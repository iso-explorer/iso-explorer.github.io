post_cb({"bq_ids": {"n4140": {"so_28010392_28010428_0": {"length": 16, "quality": 0.9411764705882353, "section_id": 389}}, "n3337": {"so_28010392_28010428_0": {"length": 16, "quality": 0.9411764705882353, "section_id": 380}}, "n4659": {"so_28010392_28010428_0": {"length": 16, "quality": 0.9411764705882353, "section_id": 406}}}, "28010428": {"Id": "28010428", "PostTypeId": "2", "Body": "<p>No, they are not the same. C++ Standard section \u00a7 12.3.1 [class.conv.ctor]</p>\n<blockquote>\n<p id=\"so_28010392_28010428_0\">An explicit constructor constructs objects just like non-explicit\n  constructors, but does so only where the direct-initialization syntax\n  (8.5) or where casts (5.2.9, 5.4) are explicitly used</p>\n</blockquote>\n<hr>\n<pre><code>Base b(a); // Direct initialization\nBase b=a;  // Copy initialization\n</code></pre>\n<p>Copy initialization (using <code>=</code>) doesn't consider <em>explicit</em> constructors, but direct initialization (using <code>()</code>) does.</p>\n<p>You'll have to use a cast or make your constructor non explicit if you want to use copy initialization.</p>\n</hr>", "LastEditorUserId": "3510483", "LastActivityDate": "2015-01-18T15:16:37.130", "Score": "3", "CreationDate": "2015-01-18T13:53:15.470", "ParentId": "28010392", "CommentCount": "4", "OwnerUserId": "3510483", "LastEditDate": "2015-01-18T15:16:37.130"}, "28010392": {"ViewCount": "259", "Body": "<p>When I declare my copy constructor as explicit, calling it using = instead of () doesn't compile. Here's my code:</p>\n<pre><code>class Base\n{\n    public:\n        explicit Base(){cout&lt;&lt;__PRETTY_FUNCTION__&lt;&lt;endl;}\n        explicit Base(Base&amp; b){cout &lt;&lt;__PRETTY_FUNCTION__&lt;&lt;endl;}\n};\n\nint main()\n{\n    Base a;\n    Base b=a;\n}\n</code></pre>\n<p>The compiler says:</p>\n<blockquote>\n<p id=\"so_28010392_28010392_0\">error: no matching function for call to \u2018Base::Base(Base&amp;)\u2019</p>\n</blockquote>\n<p>If I change it to</p>\n<pre><code>Base b(a);\n</code></pre>\n<p>It compiles fine. I thought C++ considers these two styles of instantiations the same. If I remove the explicit keyword it does works both ways. I'm guessing there is some implicit conversion going on when I use =. So what am I missing here?</p>\n", "AcceptedAnswerId": "28010428", "Title": "Explicit Copy constructor call syntax", "CreationDate": "2015-01-18T13:49:23.613", "Id": "28010392", "CommentCount": "6", "PostTypeId": "1", "LastActivityDate": "2015-01-18T15:16:37.130", "Score": "1", "OwnerUserId": "663301", "Tags": "<c++><copy-constructor><explicit>", "AnswerCount": "1"}});