post_cb({"3261189": {"ParentId": "3261178", "CommentCount": "5", "Body": "<p>Your <code>func_t</code> is of type pointer to function; you can also declare a type that is a reference to a function:</p>\n<pre><code>typedef int (&amp;func_t)(int, int);\n</code></pre>\n<p>Then your <code>main()</code> would look like so:</p>\n<pre><code>int main()\n{\n    Foo&lt;add&gt; adder(7,5);\n    Foo&lt;sub&gt; subber(7,5);\n\n    std::cout &lt;&lt; adder.do_it() &lt;&lt; std::endl;\n    std::cout &lt;&lt; subber.do_it() &lt;&lt; std::endl;\n}\n</code></pre>\n", "OwnerUserId": "151292", "PostTypeId": "2", "Id": "3261189", "Score": "3", "CreationDate": "2010-07-16T00:53:30.143", "LastActivityDate": "2010-07-16T00:53:30.143"}, "3261178": {"CommentCount": "0", "AcceptedAnswerId": "3261189", "PostTypeId": "1", "LastEditorUserId": "28817", "CreationDate": "2010-07-16T00:49:21.200", "LastActivityDate": "2010-07-16T00:59:34.187", "LastEditDate": "2010-07-16T00:59:34.187", "ViewCount": "427", "FavoriteCount": "2", "Title": "What is an lvalue reference to function?", "Id": "3261178", "Score": "1", "Body": "<p>In \u00a714.1.4, the new C++0x standard describes the non-types allowed as template parameters.</p>\n<blockquote>\n<p id=\"so_3261178_3261178_0\">4) A non-type <em>template-parameter</em> shall have one of the following (optionally <em>cv-qualified</em>) types:</p>\n<ul>\n<li>integral or enumeration type,</li>\n<li>pointer to object or pointer to function,</li>\n<li>lvalue reference to object or lvalue reference to function,</li>\n<li>pointer to member.</li>\n</ul>\n</blockquote>\n<p>What is an \"lvalue reference to function\"?  What does it look like in a template paramemter list.  How is it used?</p>\n<p>I want something like this:</p>\n<pre><code>//pointer to function\ntypedef int (*func_t)(int,int);\n\nint add( int lhs, int rhs )\n{ return lhs + rhs; }\n\nint sub( int lhs, int rhs )\n{ return lhs - rhs; }\n\ntemplate&lt; func_t Func_type &gt;\nclass Foo\n{\npublic:\n   Foo( int lhs, int rhs ) : m_lhs(lhs), m_rhs(rhs) { }\n\n   int do_it()\n   {\n      // how would this be different with a reference?\n      return (*Func_type)(m_lhs,m_rhs);\n   }\nprivate:\n   int m_lhs;\n   int m_rhs;\n};\n\nint main()\n{\n   Foo&lt;&amp;add&gt; adder(7,5);\n   Foo&lt;&amp;sub&gt; subber(7,5);\n\n   std::cout &lt;&lt; adder.do_it() &lt;&lt; std::endl;\n   std::cout &lt;&lt; subber.do_it() &lt;&lt; std::endl;\n}\n</code></pre>\n", "Tags": "<c++><templates>", "OwnerUserId": "28817", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_3261178_3261178_0": {"section_id": 57, "quality": 1.0, "length": 8}}, "n3337": {"so_3261178_3261178_0": {"section_id": 52, "quality": 1.0, "length": 8}}, "n4659": {"so_3261178_3261178_0": {"section_id": 59, "quality": 1.0, "length": 8}}}});