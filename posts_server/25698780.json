post_cb({"bq_ids": {"n4140": {"so_25698780_25699475_0": {"length": 18, "quality": 1.0, "section_id": 6254}, "so_25698780_25699475_1": {"length": 19, "quality": 0.95, "section_id": 6254}, "so_25698780_25698969_0": {"length": 5, "quality": 0.5555555555555556, "section_id": 5768}}, "n3337": {"so_25698780_25699475_0": {"length": 18, "quality": 1.0, "section_id": 6014}, "so_25698780_25699475_1": {"length": 19, "quality": 0.95, "section_id": 6014}, "so_25698780_25698969_0": {"length": 5, "quality": 0.5555555555555556, "section_id": 5541}}, "n4659": {"so_25698780_25699475_0": {"length": 17, "quality": 0.9444444444444444, "section_id": 7758}, "so_25698780_25699475_1": {"length": 19, "quality": 0.95, "section_id": 7758}, "so_25698780_25698969_0": {"length": 5, "quality": 0.5555555555555556, "section_id": 7768}}}, "25698780": {"ViewCount": "161", "Body": "<p>Basically the above question. Like are classes like i_stream and everything else included inside the std namespace? Are the istream objects located INSIDE the class istream? Also why is there a namespace if there arent any naming collisions bound to happen? </p>\n", "Title": "Is every class, object, and function in c++ standard library declared under namespace std?", "CreationDate": "2014-09-06T09:24:52.103", "LastActivityDate": "2014-09-06T11:00:54.220", "CommentCount": "1", "PostTypeId": "1", "Id": "25698780", "Score": "-3", "OwnerUserId": "4006148", "Tags": "<c++><class><object><namespaces><std>", "AnswerCount": "2"}, "25698969": {"Id": "25698969", "PostTypeId": "2", "Body": "<p>Regarding the question in the title,</p>\n<blockquote>\n<p id=\"so_25698780_25698969_0\">\u201c Is every class, object, and function in c++ standard library declared under namespace std?</p>\n</blockquote>\n<p>no.</p>\n<p>For example, the global <code>operator new</code> allocation function is in the global namespace only.</p>\n", "LastActivityDate": "2014-09-06T09:48:11.053", "CommentCount": "1", "CreationDate": "2014-09-06T09:48:11.053", "ParentId": "25698780", "Score": "2", "OwnerUserId": "464581"}, "25699475": {"Id": "25699475", "PostTypeId": "2", "Body": "<p>Almost.</p>\n<p>Here's what my draft of the C++11 standard has to say about it [17.6.1.1, contents]:</p>\n<blockquote>\n<p id=\"so_25698780_25699475_0\">All library entities except macros, operator new and operator delete\n  are defined within the namespace std or namespaces nested within\n  namespace std.</p>\n</blockquote>\n<p>So <code>operator new</code> and <code>operator delete</code> are excluded, even though they are functions.</p>\n<p>And there's a footnote there, saying:</p>\n<blockquote>\n<p id=\"so_25698780_25699475_1\">The C standard library headers [...] also define names within\n  the global namespace, while the C++ headers for C library facilities\n  [...] may also define names within the global namespace.</p>\n</blockquote>\n<p>This means that you still have all the <a href=\"http://en.cppreference.com/w/cpp/header#Deprecated_headers\" rel=\"nofollow\">old (now deprecated) C headers</a> like <code>&lt;string.h&gt;</code> and <code>&lt;stddef.h&gt;</code>. Those headers place functions at the global namespace, e.g. <code>printf</code>, <code>strcpy</code> or <code>strlen</code>, just to name a few.</p>\n<p>If you use the C++ equivalents of those headers, i.e. <code>&lt;cstring&gt;</code>,  <code>&lt;cstddef&gt;</code> and so on, then you get those functions in the <code>std</code> namespace, so they become <code>std::printf</code>, <code>std::strcpy</code>, <code>std::strlen</code> and so on. But you <em>may</em> also get them in the global namespace.</p>\n<p>The following is therefore allowed to compile, and probably will when you try it with your favourite compiler:</p>\n<pre><code>#include &lt;cstdio&gt;\n\nint main()\n{\n    printf(\"Test\\n\");\n    std::printf(\"Test\\n\");\n}\n</code></pre>\n<p>Whereas the following won't:</p>\n<pre><code>#include &lt;stdio.h&gt;\n\nint main()\n{\n    printf(\"Test\\n\");\n    std::printf(\"Test\\n\"); // error\n}\n</code></pre>\n<hr>\n<p>Regarding your related question:</p>\n<blockquote>\n<p id=\"so_25698780_25699475_2\">Also why is there a namespace if there arent any naming collisions bound to happen?</p>\n</blockquote>\n<p>Use your imagination:</p>\n<pre><code>Date CreateFromString(std::string const &amp;string);\n\nclass OptionsFile\n{\n    std::map&lt;std::string, std::string&gt; list;\n    // ...\n};\n\nclass Buffer\n{\n    int count;\n    // ...\n};\n\nTexture::Texture(char const *array);\n\nenum Actions { find, sort };\n\nstruct Entity\n{\n    std::string copy;\n};\n</code></pre>\n</hr>", "LastEditorUserId": "3313064", "LastActivityDate": "2014-09-06T11:00:54.220", "Score": "1", "CreationDate": "2014-09-06T10:51:36.217", "ParentId": "25698780", "CommentCount": "1", "OwnerUserId": "3313064", "LastEditDate": "2014-09-06T11:00:54.220"}});