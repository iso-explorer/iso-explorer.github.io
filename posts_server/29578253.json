post_cb({"bq_ids": {"n4140": {"so_29578253_29578355_0": {"length": 41, "quality": 0.8367346938775511, "section_id": 7034}}, "n3337": {"so_29578253_29578355_0": {"length": 41, "quality": 0.8367346938775511, "section_id": 6780}}, "n4659": {"so_29578253_29578355_0": {"length": 41, "quality": 0.8367346938775511, "section_id": 8531}}}, "29578355": {"Id": "29578355", "PostTypeId": "2", "Body": "<p>Presumably by \".cpp file\" you mean \"translation unit\".</p>\n<p>The holy C++ standard couldn't care less how the code is distributed in files, and has no notion of header files versus .cpp.</p>\n<p>A variable to be defined in one translation unit and accessed in another, must have <code>extern</code> linkage. This is the default for namespace level non-<code>const</code> variables. However, an ordinary declaration will also <em>define</em> the variable, and then you run into the <a href=\"https://stackoverflow.com/questions/4192170/what-exactly-is-one-definition-rule-in-c\">One Definition Rule</a> that in general requires a single <strong>definition</strong> of each thing.</p>\n<p>A solution is to write e.g.</p>\n<pre><code>extern int n_oranges;\n</code></pre>\n<p>in the translation unit where you just want to access the variable. The explicit mention of <code>extern</code> linkage, without an initializer, makes this a <strong>pure declaration</strong>.</p>\n<p>You can have as many pure declarations of something, as you want.</p>\n<p>It's best to put such a declaration in a header file, so as to avoid redundant multiple possibly not quite matching declarations. Note that in a header file it will be included as part of each relevant translation unit's text. The C++ compiler doesn't care where it comes from, just that it's there.</p>\n<hr>\n<p>Relevant standardese:</p>\n<i><b>C++11 \u00a73.1/2:</b></i>\n<blockquote>\n<p id=\"so_29578253_29578355_0\"><strong>\u201d</strong> A declaration is a <em>definition</em> unless it declares a function without specifying the function\u2019s body (8.4), it\n  contains the <code>extern</code> specifier (7.1.1) or a <em>linkage-specification</em> (7.5) and neither an <em>initializer</em> nor a <em>function-body</em>, it declares a static data member in a class definition (9.2, 9.4), it is a class name declaration (9.1), it is an <em>opaque-enum-declaration</em> (7.2), it is a <em>template-parameter</em> (14.1), it is a <em>parameter-declaration</em> (8.3.5) in a\n  function declarator that is not the <em>declarator</em> of a <em>function-definition</em>, or it is a <code>typedef</code> declaration (7.1.3),\n  an <em>alias-declaration</em> (7.1.3), a <em>using-declaration</em> (7.3.3), a <em>static_assert-declaration</em> (Clause 7), an <em>attribute-declaration</em> (Clause 7), an <em>empty-declaration</em> (Clause 7), or a <em>using-directive</em> (7.3.4).</p>\n</blockquote>\n</hr>", "LastEditorUserId": "-1", "LastActivityDate": "2015-04-11T13:33:33.850", "Score": "1", "CreationDate": "2015-04-11T13:21:56.593", "ParentId": "29578253", "CommentCount": "0", "OwnerUserId": "464581", "LastEditDate": "2017-05-23T11:43:27.940"}, "29578253": {"ViewCount": "3466", "Body": "<p>I'm trying to avoid classes, so keep that in mind.</p>\n<p>I want to know how to access a variable from another .cpp file. </p>\n<p>For whatever reason when I try to include the variable in my 'codeReferences.h' header file I get LNK 2005 errors. So I'm wondering without defining it within a globally used header file (causes errors) how can I access variables from another .cpp file.</p>\n<p>All answers appreciated.</p>\n", "Title": "Accessing variables from another source file C++?", "CreationDate": "2015-04-11T13:11:52.177", "LastActivityDate": "2015-04-11T13:33:33.850", "CommentCount": "3", "PostTypeId": "1", "Id": "29578253", "Score": "1", "OwnerUserId": "4735975", "Tags": "<c++><header-files>", "AnswerCount": "3"}, "29578272": {"Id": "29578272", "PostTypeId": "2", "Body": "<p>Now the first thing is you should be careful you don't define things multiple times.</p>\n<p>Second you  should at least have read a tutorial on the basics of the c++ programming language.</p>\n<p>I know I may sound harsh but a simple tutorial could help you understand the language a lot better than you currently do.</p>\n<p>To be able to access variables from a different source file you can include them using their extension. For better practices most developers use headers to define the code , and the source to actually make it function to be able to easily debug and change things without having massive files to go through.</p>\n", "LastEditorUserId": "3212229", "LastActivityDate": "2015-04-11T13:24:16.750", "Score": "0", "CreationDate": "2015-04-11T13:13:54.037", "ParentId": "29578253", "CommentCount": "2", "OwnerUserId": "3212229", "LastEditDate": "2015-04-11T13:24:16.750"}, "29578313": {"Id": "29578313", "PostTypeId": "2", "Body": "<p><code>LNK2005</code> says that you have multiple definitions for the same symbol. </p>\n<p>You need to understand the difference between a declaration and a definition:</p>\n<ul>\n<li>When you declare a variable, then you only tell the compiler that there's a name (=symbol) and the type of that symbol. </li>\n<li>When you assign a concrete value to a variable or provide an implementation for it then you define it (e.g. in case of functions). </li>\n</ul>\n<p>You can have an arbitrary number of declarations for a symbol, but you must only have one definition for it. See this thread too: <a href=\"https://stackoverflow.com/questions/4192170/what-exactly-is-one-definition-rule-in-c\">What exactly is One Definition Rule in C++?</a></p>\n<p>If you want to use the same symbol in several .cpp files (referring to the same object), then you need to use the <code>extern</code> keyword in the header file:</p>\n<p>Example:</p>\n<pre><code>/** header.h **/\nextern int i;\n</code></pre>\n<p>You can include this header in any number of .cpp files to introduce the symbol <code>i</code>. You must specify a definition for <code>i</code> only in one .cpp:</p>\n<pre><code>/** code.cpp **/\n#include \"header.h\"\nint i; // this is a definition, even if you do not initialize here.\n</code></pre>\n", "LastEditorUserId": "-1", "LastActivityDate": "2015-04-11T13:28:32.927", "Score": "4", "CreationDate": "2015-04-11T13:17:53.950", "ParentId": "29578253", "CommentCount": "0", "OwnerUserId": "867161", "LastEditDate": "2017-05-23T11:57:03.640"}});