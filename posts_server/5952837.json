post_cb({"bq_ids": {"n4140": {"so_5952837_5955153_1": {"length": 10, "quality": 0.7142857142857143, "section_id": 3344}, "so_5952837_5952872_1": {"length": 9, "quality": 0.75, "section_id": 3360}, "so_5952837_5955153_0": {"length": 35, "quality": 0.9722222222222222, "section_id": 404}}, "n3337": {"so_5952837_5955153_1": {"length": 10, "quality": 0.7142857142857143, "section_id": 3214}, "so_5952837_5952872_1": {"length": 9, "quality": 0.75, "section_id": 3230}, "so_5952837_5955153_0": {"length": 35, "quality": 0.9722222222222222, "section_id": 395}}, "n4659": {"so_5952837_5952872_1": {"length": 9, "quality": 0.75, "section_id": 4126}, "so_5952837_5955153_0": {"length": 35, "quality": 0.9722222222222222, "section_id": 422}}}, "5952837": {"ViewCount": "891", "Body": "<p>I was recently tasked with hunting down a memory leak in a part of our code. The leak ended up being in the destructor for a particular object...and I found something really strange. A former coworker wrote this:</p>\n<pre><code>File::~File()\ntry\n{\n    Clear();\n}\ncatch (...)\n{\n    Log(\"caught exception\");\n}\n</code></pre>\n<p>The file class inherits from some base classes. My first question is: is this strictly legal C++? It compiles in Visual Studio 2008, but I showed it to a few friends / coworkers and they were fairly horrified that it worked. </p>\n<p>It doesn't actually work as intended, though: the base class that this object inherits from has a destructor that is now never called (as opposed to if you just wrapped the destructor in a regular method block, having the try / catch as part of that method).</p>\n<p>Can anyone take a stab at explaining why this is allowed, and why the base class destructor was not called? The destructor here was not throwing.</p>\n", "AcceptedAnswerId": "5952872", "Title": "Try / Catch block substituted for a method block in a destructor", "CreationDate": "2011-05-10T15:50:55.690", "Id": "5952837", "CommentCount": "0", "FavoriteCount": "0", "PostTypeId": "1", "LastActivityDate": "2011-05-10T19:16:20.490", "Score": "6", "OwnerUserId": "79177", "Tags": "<c++><visual-studio-2008>", "AnswerCount": "2"}, "5955153": {"Body": "<p>To answer the second part, \"why the base class destructor was not called?\", 12.4/6:</p>\n<blockquote>\n<p id=\"so_5952837_5955153_0\">After executing the body of the\n  destructor and destroying any\n  automatic objects allocated within the\n  body, a destructor for class X calls\n  the destructors for X\u2019s direct\n  members, the destructors for X\u2019s\n  direct base classes...\n  A return statement (6.6.3) in a\n  destructor might not directly return\n  to the caller; before transferring\n  control to the caller, the destructors\n  for the members and bases are called.</p>\n</blockquote>\n<p>This doesn't say that the member and base destructors are called if the destructor throws. However, 15.2/2 says:</p>\n<blockquote>\n<p id=\"so_5952837_5955153_1\">An object that is partially\n  constructed or partially destroyed\n  will have destructors executed for all\n  of its fully constructed subobjects,</p>\n</blockquote>\n<p>I think this should be true whether the object is \"partially destroyed\" because of an exception thrown from the body of the destructor, or because of an exception thrown from the the function try block of the destructor. I'm pretty sure that \"after the body of the destructor\" is supposed to mean also after a function try block.</p>\n<p>Apparently Microsoft disagrees, though, and because of the function try block it hasn't generated \"the body of the destructor\", and hasn't done the things that happen after executing \"the body of the destructor\".</p>\n<p>That doesn't sound right to me. GCC 4.3.4 does execute the base class destructor, whether the derived class dtor function try block throws or not. In the case where it throws, the base is destructed before the catch clause is executed.</p>\n", "CreationDate": "2011-05-10T19:10:09.180", "ParentId": "5952837", "CommentCount": "0", "LastEditDate": "2011-05-10T19:16:20.490", "Id": "5955153", "PostTypeId": "2", "LastActivityDate": "2011-05-10T19:16:20.490", "LastEditorUserId": "13005", "CommunityOwnedDate": "2011-05-10T19:10:09.180", "Score": "4", "OwnerUserId": "13005"}, "5952872": {"Id": "5952872", "PostTypeId": "2", "Body": "<p>This is a function try block and it's completely legal.</p>\n<p>See, for example, <a href=\"https://stackoverflow.com/questions/5612486/\">here</a>.</p>\n<p>The only time that you can do something in a function try block that you can't do in a normal try block in a function is catch exceptions thrown by expression in a constructor initializer list (and even then you end up having to throw <em>something</em>), but that doesn't apply here.</p>\n<p>This <a href=\"http://www.gotw.ca/gotw/066.htm\" rel=\"nofollow noreferrer\">GOTW #66</a> is particularly interesting, although it concentrates more on constructors. It contains this \"moral\":</p>\n<blockquote>\n<p id=\"so_5952837_5952872_0\">Since destructors should never emit an exception, destructor function-try-blocks have no practical use at all.</p>\n</blockquote>\n<p>Just to add clarification, the code as written will cause any exception caught to be rethrown due to ISO/IEC 14882:2003 15.3 [except.handle] / 16:</p>\n<blockquote>\n<p id=\"so_5952837_5952872_1\">The exception being handled is rethrown if control reaches the end of a handler of the <em>function-try-block</em> of a constructor or destructor. [...]</p>\n</blockquote>\n<p>However it is legal to have a parameterless <code>return</code> in the handler of a function try block for a destructor - it is only forbidden in a function try block for a constructor - and this will supress the rethrow of the exception. So either of these alternatives would prevent the exception from leaving the destructor.</p>\n<pre><code>File::~File()\ntry\n{\n    Clear();\n}\ncatch (...)\n{\n    Log(\"caught exception\");\n    return;\n}\n</code></pre>\n<hr>\n<pre><code>File::~File()\n{\n    try\n    {\n        Clear();\n    }\n    catch (...)\n    {\n        Log(\"caught exception\");\n    }\n}\n</code></pre>\n</hr>", "LastEditorUserId": "-1", "LastActivityDate": "2011-05-10T16:30:42.300", "Score": "10", "CreationDate": "2011-05-10T15:53:40.163", "ParentId": "5952837", "CommentCount": "11", "OwnerUserId": "19563", "LastEditDate": "2017-05-23T11:58:07.573"}});