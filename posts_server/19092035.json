post_cb({"19092316": {"ParentId": "19092035", "CommentCount": "0", "Body": "<p>From ISO/IEC 9899:TC3 6.7.8 Initialization</p>\n<blockquote>\n<p id=\"so_19092035_19092316_0\">26 EXAMPLE 3</p>\n<p id=\"so_19092035_19092316_1\">The declaration</p>\n</blockquote>\n<pre><code>int y[4][3] = {\n{ 1, 3, 5 },\n{ 2, 4, 6 },\n{ 3, 5, 7 },\n};\n</code></pre>\n<blockquote>\n<p id=\"so_19092035_19092316_2\">is a definition with a fully bracketed initialization: 1, 3, and 5 initialize the first row of y (the array object\n  y[0]), namely y[0][0], y[0][1], and y[0][2]. Likewise the next two lines initialize y[1] and\n  y[2]. The initializer ends early, so y[3] is initialized with zeros. Precisely the same effect could have\n  been achieved by</p>\n</blockquote>\n<pre><code>int y[4][3] = {\n1, 3, 5, 2, 4, 6, 3, 5, 7\n};\n</code></pre>\n<blockquote>\n<p id=\"so_19092035_19092316_3\">The initializer for y[0] does not begin with a left brace, so three items from the list are used. Likewise the\n  next three are taken successively for y[1] and y[2].</p>\n</blockquote>\n<p>So at least for c99 it is absoloutly legal!</p>\n", "OwnerUserId": "2003898", "PostTypeId": "2", "Id": "19092316", "Score": "1", "CreationDate": "2013-09-30T10:48:34.100", "LastActivityDate": "2013-09-30T10:48:34.100"}, "19092035": {"CommentCount": "11", "ViewCount": "159", "ClosedDate": "2013-09-30T10:53:35.257", "CreationDate": "2013-09-30T10:35:10.813", "LastActivityDate": "2013-09-30T11:04:37.083", "Title": "Is the following type of declaration perfectly valid?", "PostTypeId": "1", "Id": "19092035", "Score": "1", "Body": "<pre><code>int x[1000] = {0, }; \n</code></pre>\n<p>This is about the initialization, where a <strong>,</strong> appears without an operand on its right.</p>\n<p>My compiler reports an <strong>error</strong>.</p>\n<p>Thinking it might(?) differ from both <strong>C</strong> and <strong>C++</strong>, I am tagging both of them.</p>\n", "Tags": "<c++><c><arrays>", "OwnerUserId": "2487094", "AnswerCount": "2"}, "19092298": {"ParentId": "19092035", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>Since the possible duplicate question is about programming language syntax in general, here's the answer in C/C++ particularly:</p>\n<blockquote>\n<h3>C11(ISO/IEC 9899:201x) \u00a76.7.9 Initialization</h3>\n<p id=\"so_19092035_19092298_0\">Syntax</p>\n<p id=\"so_19092035_19092298_1\">initializer:</p>\n<p id=\"so_19092035_19092298_2\">assignment-expression</p>\n<p id=\"so_19092035_19092298_3\">{ initializer-list }</p>\n<p id=\"so_19092035_19092298_4\">{ initializer-list , }</p>\n</blockquote>\n<p>I've committed the rest, note the comma here.</p>\n<p>In C++, it's similar, note the comma <sub>opt</sub>, which means an optional comma.</p>\n<blockquote>\n<h3>C++11(ISO/IEC 14882:2011) \u00a78.5 Initializers [dcl.init]</h3>\n<p id=\"so_19092035_19092298_5\">A declarator can specify an initial value for the identifier being declared. The dentifier designates an object or reference being initialized. The process of initialization escribed in the remainder of 8.5 applies also to initializations specified by other syntactic contexts, such as the initialization of function parameters with argument expressions (5.2.2) or the initialization of return values (6.6.3).</p>\n<p id=\"so_19092035_19092298_6\">initializer:</p>\n<p id=\"so_19092035_19092298_7\">= initializer-clause</p>\n<p id=\"so_19092035_19092298_8\">( expression-list )</p>\n<p id=\"so_19092035_19092298_9\">initializer-clause:</p>\n<p id=\"so_19092035_19092298_10\">assignment-expression</p>\n<p id=\"so_19092035_19092298_11\">{ initializer-list ,<sub>opt</sub> }</p>\n<p id=\"so_19092035_19092298_12\">{ }</p>\n<p id=\"so_19092035_19092298_13\">initializer-list:</p>\n<p id=\"so_19092035_19092298_14\">initializer-clause</p>\n<p id=\"so_19092035_19092298_15\">initializer-list , initializer-clause</p>\n</blockquote>\n", "OwnerUserId": "1009479", "LastEditorUserId": "1009479", "LastEditDate": "2013-09-30T11:04:37.083", "Id": "19092298", "Score": "1", "CreationDate": "2013-09-30T10:48:01.377", "LastActivityDate": "2013-09-30T11:04:37.083"}, "bq_ids": {"n4140": {"so_19092035_19092316_3": {"section_id": 3308, "quality": 0.7857142857142857, "length": 11}, "so_19092035_19092298_5": {"section_id": 3280, "quality": 0.7894736842105263, "length": 30}, "so_19092035_19092316_2": {"section_id": 3308, "quality": 0.6451612903225806, "length": 20}}, "n3337": {"so_19092035_19092316_3": {"section_id": 3178, "quality": 0.7857142857142857, "length": 11}, "so_19092035_19092298_5": {"section_id": 3151, "quality": 0.7894736842105263, "length": 30}, "so_19092035_19092316_2": {"section_id": 3178, "quality": 0.6451612903225806, "length": 20}}, "n4659": {"so_19092035_19092316_3": {"section_id": 4074, "quality": 0.7857142857142857, "length": 11}, "so_19092035_19092298_5": {"section_id": 4042, "quality": 0.7368421052631579, "length": 28}, "so_19092035_19092316_2": {"section_id": 4074, "quality": 0.6451612903225806, "length": 20}}}});