post_cb({"32411229": {"ParentId": "32411066", "CommentCount": "1", "Body": "<p>You are passing obj by value and also returning by value in following function:</p>\n<pre><code>A operator =(A obj){\n    cout &lt;&lt; \"Assignment Operator\" &lt;&lt; endl;\n    return *this;\n}\n</code></pre>\n<p>To avoid additional copy, you should change your function to:</p>\n<pre><code>A&amp; operator =(const A&amp; obj){\n    cout &lt;&lt; \"Assignment Operator\" &lt;&lt; endl;\n    return *this;\n}\n</code></pre>\n", "OwnerUserId": "5298855", "PostTypeId": "2", "Id": "32411229", "Score": "1", "CreationDate": "2015-09-05T08:55:00.423", "LastActivityDate": "2015-09-05T08:55:00.423"}, "32411138": {"ParentId": "32411066", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>It look's like it's because you don't return an object from the assignment operator, but the caller has to destroy the supposedly returned value. What surprises me is that the compiler will allow this (or that the language allows it when the returned object is supposed to be constructed).</p>\n<p>So the objects that are destroyed are:</p>\n<ol>\n<li>The supposed returned temporary object from assignment operator</li>\n<li>The temporary object sent to the assignment operator</li>\n<li>The original object defined in <code>main</code></li>\n</ol>\n<p>The objects constructed are:</p>\n<ol start=\"2\">\n<li>The temporary object sent to the assignment operator</li>\n<li>The original object defined in <code>main</code></li>\n</ol>\n<p>Either defining the assignment operator as returning <code>void</code> or actually return <code>obj</code> or <code>*this</code> will remove this discrepancy.</p>\n", "OwnerUserId": "4498329", "LastEditorUserId": "4498329", "LastEditDate": "2015-09-05T08:52:27.383", "Id": "32411138", "Score": "0", "CreationDate": "2015-09-05T08:42:32.797", "LastActivityDate": "2015-09-05T08:52:27.383"}, "32411066": {"CommentCount": "12", "ViewCount": "133", "PostTypeId": "1", "LastEditorUserId": "1938163", "CreationDate": "2015-09-05T08:32:08.567", "LastActivityDate": "2015-09-05T10:24:02.323", "LastEditDate": "2015-09-05T10:24:02.323", "AcceptedAnswerId": "32411666", "OwnerDisplayName": "user5028722", "Title": "Why Destructor called Three Time?", "Id": "32411066", "Score": "3", "Body": "<p>I'm working on RVO/Copy-Constructor/Destructor and checking code by randomly. I'm little confused here why destructor called three time..?? </p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nclass A{\n    public:\n        A(){\n            cout &lt;&lt; \"Simple Constructor\" &lt;&lt; endl;\n        }\n        A(const A&amp; obj){\n            cout &lt;&lt; \"Copy Constructor \" &lt;&lt; endl;\n        }\n        A operator =(A obj){\n            cout &lt;&lt; \"Assignment Operator\" &lt;&lt; endl;\n        }\n        ~A(){\n            cout &lt;&lt; \"Destructor \" &lt;&lt; endl;\n        }       \n};\nA fun(A &amp;obj){\n    cout &lt;&lt; \"Fun\" &lt;&lt; endl;\n    return obj;\n}\nint main(){\n    A obj;\n    obj=fun(obj);\n    cout &lt;&lt; \"End\" &lt;&lt; endl;\n    return 0;\n}\n</code></pre>\n<p>Output:</p>\n<pre><code>Simple Constructor // ok\nFun // ok\nCopy Constructor // ok for =\nAssignment Operator // ok\nDestructor // ok for =\nDestructor // why here destructor called?\nEnd // ok\nDestructor // ok for main\n</code></pre>\n<p>I was expecting <code>Destructor</code> to be called two times. </p>\n<p>One for <code>(=) operator's</code> Object.</p>\n<p>Second one for <code>int main()'s</code> object.</p>\n<p><strong>Why is it being called the third time? And how?</strong></p>\n", "Tags": "<c++>", "AnswerCount": "5"}, "32411666": {"ParentId": "32411066", "PostTypeId": "2", "CommentCount": "1", "Body": "<p><em>[stmt.return]/p2</em> from N4527</p>\n<blockquote>\n<p id=\"so_32411066_32411666_0\">Flowing off the end of a function is equivalent to a return with no\n  value; this results in undefined behavior in a value-returning\n  function.</p>\n</blockquote>\n<p>The extra-destructor is called to deallocate an uninitialized object - <a href=\"https://en.wikipedia.org/wiki/Undefined_behavior\" rel=\"nofollow\">Undefined Behavior</a></p>\n<p>That is also the reason why clang/MSVC don't accept your code in the first place. <a href=\"http://coliru.stacked-crooked.com/a/73a3221788bbc99e\" rel=\"nofollow\">Gcc</a> does though with a warning.</p>\n<hr>\n<p>Detailed explanation:</p>\n<p>You're not returning any object though you said <code>operator=</code> returns one by value. This means skipping initialization and treating one as a fully-fledged object.</p>\n<p>Here's how things should go with gcc (the only compiler which actually accepts your code and yields your output):</p>\n<pre><code>Simple Constructor // Construct obj in main\nFun // Calls the function\nCopy Constructor // To construct operator='s argument directly (RVO elision here)\nAssignment Operator // Assignment operator\n(assignment doesn't return anything and gcc accepts it - so nop here)\nDestructor // Destroy operator='s temporary (the parameter)\nDestructor // Destroy the UNINITIALIZED object allocated for the result of operator=\nEnd\nDestructor // obj in main\n</code></pre>\n</hr>", "OwnerUserId": "1938163", "LastEditorUserId": "1938163", "LastEditDate": "2015-09-05T10:05:42.487", "Id": "32411666", "Score": "2", "CreationDate": "2015-09-05T09:47:08.507", "LastActivityDate": "2015-09-05T10:05:42.487"}, "32411690": {"ParentId": "32411066", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The possible reasons for three destructor calls could be,</p>\n<ol>\n<li>you are passing local object to assignment operator so it get deleted when function execution stop</li>\n<li>obj = fun(obj), here you are assigning a new object to \"obj\", so the old one has to deleted</li>\n<li>Last one is the \"obj\" itself get deleted when main function ends.</li>\n</ol>\n<p>Hope it will do !!</p>\n", "OwnerUserId": "5226040", "LastEditorUserId": "5226040", "LastEditDate": "2015-09-05T09:55:30.080", "Id": "32411690", "Score": "0", "CreationDate": "2015-09-05T09:50:27.533", "LastActivityDate": "2015-09-05T09:55:30.080"}, "bq_ids": {"n4140": {"so_32411066_32411666_0": {"section_id": 3913, "quality": 1.0, "length": 12}}, "n3337": {"so_32411066_32411666_0": {"section_id": 3773, "quality": 1.0, "length": 12}}, "n4659": {"so_32411066_32411666_0": {"section_id": 4799, "quality": 0.75, "length": 9}}}, "32411523": {"ParentId": "32411066", "PostTypeId": "2", "CommentCount": "0", "Body": "<pre><code>     A operator =(A obj){\n        cout &lt;&lt; \"Assignment Operator\" &lt;&lt; endl;\n    }\n</code></pre>\n<p>You declared the function <code>A::operator=</code> as having a return type (an instance of <code>A</code> in this case), but the implementation has no return statement. <strong>This is undefined behavior</strong>.</p>\n<p>You are essentially asking about the response to undefined behavior. The answer is \"anything goes\". In your case, with your compiler and your system, you are getting one more call to the destructor than to the constructors. You're lucky that you didn't your program didn't create <a href=\"http://www.catb.org/jargon/html/N/nasal-demons.html\" rel=\"nofollow\">nasal demons</a> or erase your hard drive.</p>\n<p>The solution is simple: Don't invoke undefined behavior. The canonical way to write a copy assignment operator is to have the return type be a reference to the class and to return <code>*this</code>:</p>\n<pre><code>     A&amp; operator =(A obj){\n        cout &lt;&lt; \"Assignment Operator\" &lt;&lt; endl;\n        return *this;\n    }\n</code></pre>\n<p>With this correction, you'll see that calls to the various constructors and calls to the destructor balance.</p>\n<p>Suppose you instead used a non-standard copy assignment operator (but with a properly written return statement):</p>\n<pre><code>     A operator =(A obj){\n        cout &lt;&lt; \"Assignment Operator\" &lt;&lt; endl;\n        return *this;\n    }\n</code></pre>\n<p>Once again you would see that calls to the constructors and to the destructor balance. How many calls you will see depends on your compiler and on the optimization level.</p>\n", "OwnerUserId": "774499", "LastEditorUserId": "774499", "LastEditDate": "2015-09-05T09:36:52.550", "Id": "32411523", "Score": "3", "CreationDate": "2015-09-05T09:29:54.587", "LastActivityDate": "2015-09-05T09:36:52.550"}});