post_cb({"bq_ids": {"n4140": {"so_15889867_15889913_1": {"length": 53, "quality": 1.0, "section_id": 523}, "so_15889867_15889913_0": {"length": 28, "quality": 0.9655172413793104, "section_id": 529}}, "n3337": {"so_15889867_15889913_1": {"length": 53, "quality": 1.0, "section_id": 514}, "so_15889867_15889913_0": {"length": 28, "quality": 0.9655172413793104, "section_id": 520}}, "n4659": {"so_15889867_15889913_1": {"length": 53, "quality": 1.0, "section_id": 544}, "so_15889867_15889913_0": {"length": 28, "quality": 0.9655172413793104, "section_id": 550}}}, "15889913": {"Id": "15889913", "PostTypeId": "2", "Body": "<p>A macro name is not expanded when it appears next to the <code>##</code> operator, so you need more layers of indirection:</p>\n<pre><code>#define P_VERSION2(foo)   foo ## Versioning\n#define P_VERSION(foo)    P_VERSION2(foo)\n#define VERSION_NAMESPACE P_VERSION(PROJECT_NAME)\n</code></pre>\n<p>so that <code>PROJECT_NAME</code> is expanded as the argument of <code>P_VERSION</code> and then concatenated in <code>P_VERSION2</code>.</p>\n<p>In section 16.3.3 [cpp.concat], paragraph 3, it is specified</p>\n<blockquote>\n<p id=\"so_15889867_15889913_0\">For both object-like and function-like macro invocations, before the replacement list is reexamined for more macro names to replace, each instance of a <code>##</code> preprocessing token in the replacement list (not from an argument) is deleted and the preceding preprocessing token is concatenated with the following preprocessing token.</p>\n</blockquote>\n<p>that preprocessing tokens adjacent to a <code>##</code> preprocessing token are concatenated <em>before</em> macro-replacement is done on the replacement list. Therefore, <code>PROJECT_NAME</code> must be passed through another (function-like) macro for it to be replaced and concatenated with <code>Versioning</code>.</p>\n<p>But in 16.3.1 [cpp.subst], paragraph 1, the standard specifies (emphasis added by me)</p>\n<blockquote>\n<p id=\"so_15889867_15889913_1\">After the arguments for the invocation of a function-like macro have been identified, argument substitution takes place. A parameter in the replacement list, <strong>unless preceded by a <code>#</code> or <code>##</code> preprocessing token or followed by a <code>##</code> preprocessing token</strong> (see below), is replaced by the corresponding argument after all macros contained therein have been expanded. Before being substituted, each argument\u2019s preprocessing tokens are completely macro replaced as if they formed the rest of the preprocessing file; no other preprocessing tokens are available.</p>\n</blockquote>\n<p>that macro parameters are not subject to further macro-expansion if adjacent to a <code>##</code> preprocessing token. Therefore, the function-like macro that receives <code>PROJECT_NAME</code> as argument must not directly concatenate its argument with <code>Versioning</code>, but to expand <code>PROJECT_NAME</code> it must call another function-like macro that finally does the concatenation.</p>\n<p>So in the above, with the invocation <code>ccache g++ ... -DPROJECT_NAME=Syren_DLL ...</code>, <code>PROJECT_NAME</code> is replaced with <code>Syren_DLL</code> when <code>P_VERSION(PROJECT_NAME)</code> is expanded, resulting in <code>P_VERSION2(Syren_DLL)</code> which then leads to the concatenation of <code>Syren_DLL</code> and <code>Versioning</code>.</p>\n", "LastEditorUserId": "1011995", "LastActivityDate": "2013-04-09T10:52:07.317", "Score": "12", "CreationDate": "2013-04-08T22:08:46.743", "ParentId": "15889867", "CommentCount": "3", "OwnerUserId": "1011995", "LastEditDate": "2013-04-09T10:52:07.317"}, "15889867": {"ViewCount": "296", "Body": "<p>This should be simple, but I'm struggling to figure it out.  I have <code>PROJECT_NAME</code> as a compiler (<code>g++</code>) <code>-D</code> define, and I want to concatenate it with some other text to form a namespace name.  My current approach is this:</p>\n<pre><code>#define VERSION_NAMESPACE PROJECT_NAME ## Versioning\n</code></pre>\n<p>For my current project, I expect <code>VERSION_NAMESPACE</code> to be <code>Syren_DLLVersioning</code>.  Instead I get a compiler error:</p>\n<pre><code>error: 'PROJECT_NAMEVersioning' has not been declared\n</code></pre>\n<p>But according to the <code>g++</code> call, <code>PROJECT_NAME</code> is being defined properly:</p>\n<pre><code>ccache g++ ... -DPROJECT_NAME=Syren_DLL ...\n</code></pre>\n<p>Why is <code>PROJECT_NAME</code> not being replaced before the concatenation takes place?</p>\n", "AcceptedAnswerId": "15889913", "Title": "Macro concatenation using compiler define", "CreationDate": "2013-04-08T22:05:01.227", "Id": "15889867", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2015-03-30T12:20:09.830", "LastEditorUserId": "1257035", "LastActivityDate": "2015-03-30T12:20:09.830", "Score": "4", "OwnerUserId": "498437", "Tags": "<c++><c><c-preprocessor>", "AnswerCount": "1"}});