post_cb({"bq_ids": {"n4140": {"so_10180552_10181573_0": {"length": 5, "quality": 1.0, "section_id": 87}}, "n3337": {"so_10180552_10181573_0": {"length": 5, "quality": 1.0, "section_id": 82}}}, "10180552": {"CreationDate": "2012-04-16T19:41:48.857", "ViewCount": "1384", "FavoriteCount": "3", "Id": "10180552", "AcceptedAnswerId": "10181573", "Score": "10", "Title": "Is substitution failure an error with dependent non-type template parameters?", "LastEditorUserId": "500104", "CommentCount": "11", "Body": "<p>Let's say I have these template aliases:</p>\n<pre><code>enum class enabler {};\n\ntemplate &lt;typename T&gt;\nusing EnableIf = typename std::enable_if&lt;T::value, enabler&gt;::type;\ntemplate &lt;typename T&gt;\nusing DisableIf = typename std::enable_if&lt;!T::value, enabler&gt;::type;\n</code></pre>\n<p>I can do the following in GCC:</p>\n<pre><code>#include &lt;iostream&gt;\n\ntemplate &lt;typename T, EnableIf&lt;std::is_polymorphic&lt;T&gt;&gt; = {}&gt;\nvoid f(T) { std::cout &lt;&lt; \"is polymorphic\\n\"; }\n\ntemplate &lt;typename T, DisableIf&lt;std::is_polymorphic&lt;T&gt;&gt; = {}&gt;\nvoid f(T) { std::cout &lt;&lt; \"is not polymorphic\\n\"; }\n\nstruct foo { virtual void g() {} };\n\nint main() {\n    f(foo {});\n    f(int {});\n}\n</code></pre>\n<p>It prints:</p>\n<blockquote>\n<p id=\"so_10180552_10180552_0\">is polymorphic<br>\n  is not polymorphic</br></p>\n</blockquote>\n<p>Which matches my expectations.</p>\n<p>With clang that code does not compile. It produces the following error messages.</p>\n<pre><code>test.cpp:11:58: error: expected expression\ntemplate &lt;typename T, EnableIf&lt;std::is_polymorphic&lt;T&gt;&gt; = {}&gt;\n                                                         ^\ntest.cpp:14:59: error: expected expression\ntemplate &lt;typename T, DisableIf&lt;std::is_polymorphic&lt;T&gt;&gt; = {}&gt;\n                                                          ^\ntest.cpp:20:3: error: no matching function for call to 'f'\n  f(foo {});\n  ^\ntest.cpp:12:6: note: candidate template ignored: couldn't infer template argument ''\nvoid f(T) { std::cout &lt;&lt; \"is polymorphic\\n\"; }\n     ^\ntest.cpp:15:6: note: candidate template ignored: couldn't infer template argument ''\nvoid f(T) { std::cout &lt;&lt; \"is not polymorphic\\n\"; }\n     ^\ntest.cpp:21:3: error: no matching function for call to 'f'\n  f(int {});\n  ^\ntest.cpp:12:6: note: candidate template ignored: couldn't infer template argument ''\nvoid f(T) { std::cout &lt;&lt; \"is polymorphic\\n\"; }\n     ^\ntest.cpp:15:6: note: candidate template ignored: couldn't infer template argument ''\nvoid f(T) { std::cout &lt;&lt; \"is not polymorphic\\n\"; }\n     ^\n4 errors generated.\n</code></pre>\n<p>Should it compile? Which of the two compilers is faulty?</p>\n", "Tags": "<c++><templates><c++11><sfinae><template-aliases>", "LastEditDate": "2012-10-05T17:48:22.537", "LastActivityDate": "2012-10-05T17:48:22.537", "PostTypeId": "1", "AnswerCount": "1", "OwnerUserId": "46642"}, "10181573": {"LastActivityDate": "2012-04-16T20:54:15.630", "CommentCount": "5", "Body": "<p><sup>First and foremost, thanks to @<a href=\"https://stackoverflow.com/users/1041090/richard-smith\">Richard Smith</a> on the <a href=\"http://llvm.org/docs/#irc\" rel=\"nofollow noreferrer\">#llvm IRC Channel on oftc</a> for the explanation.</sup><br>\nUnfortunately, this is not legal C++ and as such Clang is correct: <code>{}</code> is not an expression but a <em>braced-init-list</em> and as such will never be a <em>constant</em> expression as is needed in the initializer of a non-type template parameter.</br></p>\n<p><code>\u00a714.3.2 [temp.arg.non-type] p1</code></p>\n<blockquote>\n<p id=\"so_10180552_10181573_0\">A <em>template-argument</em> for a non-type, non-template <em>template-parameter</em> shall be one of:</p>\n<ul>\n<li>for a non-type <em>template-parameter</em> of integral or enumeration type, a converted <strong>constant expression</strong> (5.19) of the type of the <em>template-parameter</em>; or</li>\n<li>[...]</li>\n</ul>\n</blockquote>\n<p>One solution would be a dummy value in <code>enabler</code>.</p>\n", "CreationDate": "2012-04-16T20:54:15.630", "LastEditDate": "2017-05-23T11:45:39.890", "ParentId": "10180552", "Id": "10181573", "LastEditorUserId": "-1", "PostTypeId": "2", "Score": "7", "OwnerUserId": "500104"}});