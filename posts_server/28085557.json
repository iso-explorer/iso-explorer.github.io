post_cb({"28086078": {"ParentId": "28085557", "CommentCount": "0", "Body": "<p>This is not unusual, in fact,  C++ internally does that exact same thing, note what 1.4/6 says:</p>\n<blockquote>\n<p id=\"so_28085557_28086078_0\">The templates, classes, functions, and objects in the library have external linkage</p>\n</blockquote>\n<p>The templates in the library very obviously have definitions, too. And why wouldn't they!</p>\n<p>See what 3.1/2 and 3.4/2 (emphasis added) have to say:</p>\n<blockquote>\n<p id=\"so_28085557_28086078_1\">A declaration is a definition unless it declares a function without specifying the function\u2019s body (8.4), <strong>[or]</strong> it contains the extern specifier (7.1.1) or a linkage-specification25 (7.5) <strong>and</strong> neither an initializer nor a functionbody<br>\n  [...]<br>\n  When a name has external linkage , the entity it denotes <strong>can</strong> be referred to by names from scopes of other translation units or from other scopes of the same translation unit.</br></br></p>\n</blockquote>\n<p>Your declaration has a function body, so it is a definition, and that's explicitly, perfectly allowable. The function has external linkage, which means you <strong>could</strong> refer to it by a name from a scope in another translation unit, but you're not <em>required</em> to do that.</p>\n<p>You're still perfectly allowed to call it by its name in the current translation unit, and that is what you are doing.</p>\n<p>Note that there's a clause about names at namespace scope, so your usage of the <code>extern</code> keyword is somewhat redundant anyway.</p>\n", "OwnerUserId": "572743", "PostTypeId": "2", "Id": "28086078", "Score": "3", "CreationDate": "2015-01-22T10:10:49.583", "LastActivityDate": "2015-01-22T10:10:49.583"}, "28085557": {"CommentCount": "8", "ViewCount": "74", "CreationDate": "2015-01-22T09:48:46.963", "LastActivityDate": "2015-01-22T10:10:49.583", "Title": "Why does the C++ compiler allow extern keyword combined with definition?", "AcceptedAnswerId": "28086078", "PostTypeId": "1", "Id": "28085557", "Score": "3", "Body": "<p>I accidentally made an error using the <code>extern</code> keyword and then discovered that the compiler allowed my line of code. Why is the following program allowed? Does the compiler strip off the extern keyword? It does not even give a warning.</p>\n<pre><code>#include &lt;iostream&gt;\n\nextern void test() { std::cout &lt;&lt; \"Hello world!\" &lt;&lt; std::endl; };\n\nint main()\n{\n    test();\n}\n</code></pre>\n", "Tags": "<c++><extern>", "OwnerUserId": "1673574", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_28085557_28086078_0": {"section_id": 5774, "quality": 0.8888888888888888, "length": 8}}, "n3337": {"so_28085557_28086078_0": {"section_id": 5547, "quality": 0.8888888888888888, "length": 8}}, "n4659": {"so_28085557_28086078_0": {"section_id": 7231, "quality": 0.8888888888888888, "length": 8}}}});