post_cb({"31660313": {"ParentId": "31659968", "CommentCount": "0", "Body": "<p>According to standard (n4296 C++14) [23.3.6.5/1] insert operation for vector invalidates iterators - but not always:</p>\n<blockquote>\n<p id=\"so_31659968_31660313_0\">Remarks: Causes reallocation if the new size is greater than the old capacity. If no reallocation happens,\n  all the iterators and references before the insertion point remain valid.</p>\n</blockquote>\n<p>and for erase [23.3.6.5/3]</p>\n<blockquote>\n<p id=\"so_31659968_31660313_1\">Effects: Invalidates iterators and references at or after the point of the erase.</p>\n</blockquote>\n<p>These are rules, behaviour you are seeing as correct is actually UB (undefined behaviour) - which means it might look like it works even if in 99% of times. Also it depends on implementation in your compiler.</p>\n", "OwnerUserId": "471160", "PostTypeId": "2", "Id": "31660313", "Score": "2", "CreationDate": "2015-07-27T18:13:22.833", "LastActivityDate": "2015-07-27T18:13:22.833"}, "31659968": {"CommentCount": "0", "ViewCount": "174", "PostTypeId": "1", "LastEditorUserId": "1630041", "CreationDate": "2015-07-27T17:53:44.750", "LastActivityDate": "2015-07-27T20:09:43.677", "Title": "Error while using vectors iterators' after insert and erase", "AcceptedAnswerId": "31659982", "LastEditDate": "2015-07-27T20:09:43.677", "Id": "31659968", "Score": "0", "Body": "<p>I was trying to use vectors in <code>C++</code>. I am trying to insert one element using iterator at a specified position and then remove some elements again using iterator.But I get error when using the same iterator for both the operations.Here is my code -</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;cctype&gt;\nusing namespace std;\nint main()\n{\n    vector &lt;int&gt; A(10);\n\n    for (int i=0;i&lt;A.size();i++)\n    {\n        A[i]=i+1;\n    }\n    vector&lt;int&gt;::iterator p=A.begin();\n    p+=2;\n\n    A.insert(p,1,55);\n\n    A.erase(p,p+2);\n    for (int i=0;i&lt;A.size();i++)\n    {\n        cout &lt;&lt; A[i] &lt;&lt;\"\\n\";\n    }   \n    return 0;\n}\n</code></pre>\n<p>This gives me the following output:</p>\n<pre><code>*** Error in `./temp': double free or corruption (out): 0x00000000017d4040 ***\n55\n3\n4\n5\n6\n7\n8\n9\n10\nAborted (core dumped)\n</code></pre>\n<p>If I add following two lines before <code>A.erase</code> I get the correct answer.</p>\n<pre><code>p=A.begin();\np+=2;\nA.erase(p,p+2);\n</code></pre>\n<p>So, if p still points to the same element as its value has not been changed, why do I need to again set the value of p.</p>\n", "Tags": "<c++>", "OwnerUserId": "5045533", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_31659968_31660313_1": {"section_id": 988, "quality": 0.8571428571428571, "length": 6}, "so_31659968_31660313_0": {"section_id": 986, "quality": 0.9473684210526315, "length": 18}}, "n3337": {"so_31659968_31660313_1": {"section_id": 973, "quality": 0.8571428571428571, "length": 6}, "so_31659968_31660313_0": {"section_id": 971, "quality": 0.9473684210526315, "length": 18}}, "n4659": {"so_31659968_31660313_1": {"section_id": 1051, "quality": 0.8571428571428571, "length": 6}, "so_31659968_31660313_0": {"section_id": 1049, "quality": 0.9473684210526315, "length": 18}}}, "31659982": {"ParentId": "31659968", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>after inserting/erasing from <code>std::vector</code> all existing iterators are invalidated and should not be used (using them will lead to undefined behavior)</p>\n<p>remember, that changing items contained by vector may lead to memory allocation etc., so old iterators can point to deallocated memory (like pointers)</p>\n<p>So when you add lines you mention and reinitialize iterator - everything is ok. But after <code>insert</code> existing <code>p</code> is no longer valid.</p>\n<p>Check paragraphs about 'iterator invalidation' in: <a href=\"http://en.cppreference.com/w/cpp/container/vector/erase\" rel=\"nofollow\">http://en.cppreference.com/w/cpp/container/vector/erase</a> and <a href=\"http://en.cppreference.com/w/cpp/container/vector/insert\" rel=\"nofollow\">http://en.cppreference.com/w/cpp/container/vector/insert</a>.</p>\n<p>You might consider adding call to <code>reserve</code> to ensure that no reallocation happens on <code>insert</code> but in my opinion such code would still be error prone and harder to maintain.</p>\n", "OwnerUserId": "1630041", "LastEditorUserId": "1630041", "LastEditDate": "2015-07-27T18:08:38.790", "Id": "31659982", "Score": "4", "CreationDate": "2015-07-27T17:55:01.277", "LastActivityDate": "2015-07-27T18:08:38.790"}});