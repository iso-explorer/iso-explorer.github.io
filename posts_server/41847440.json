post_cb({"bq_ids": {"n4140": {"so_41847440_41847440_0": {"length": 29, "quality": 0.9666666666666667, "section_id": 3326}}, "n3337": {"so_41847440_41847440_0": {"length": 29, "quality": 0.9666666666666667, "section_id": 3196}}, "n4659": {"so_41847440_41847440_0": {"length": 29, "quality": 0.9666666666666667, "section_id": 4092}}}, "41847440": {"ViewCount": "35", "Body": "<p>In paragraph 8.6.4p4 of <a href=\"http://open-std.org/Jtc1/sc22/wg21/docs/papers/2016/n4606.pdf\" rel=\"nofollow noreferrer\">N4606</a>, we have:</p>\n<blockquote>\n<p id=\"so_41847440_41847440_0\">Within the <em>initializer-list</em> of a <em>braced-init-list</em>, the\n  <em>initializer-clauses</em>,\n  ..., are evaluated in the\n  order in which they appear. That is, every value computation and side effect\n  associated with a given <em>initializer-clause</em> is sequenced before every value\n  computation and side effect associated with any <em>initializer-clause</em> that\n  follows it in the comma-separated list of the <em>initializer-list</em>.</p>\n</blockquote>\n<p>In this program:</p>\n<pre><code>#include &lt;algorithm&gt;\n#include &lt;numeric&gt;\n#include &lt;iostream&gt;\n#include &lt;iterator&gt;\nusing namespace std;\n\nint main()\n{\n   int i = 0;\n   int a[4] = { ++i, ++i, ++i,    // These are OK.\n     accumulate(begin(a), end(a)-1, 0, plus&lt;int&gt;())  // Is this well-defined?\n   };\n   copy(begin(a), end(a), ostream_iterator&lt;int&gt;(cout, \" \"));\n}\n</code></pre>\n<p>It is clear that <code>accumulate</code> is evaluated after the expressions <code>++i</code>, and\nthe side-effects of <code>++i</code> are sequenced and well-defined.\nBut is the initialization of an array element with the result of <code>++i</code> also a side-effect of an <em>initializer-clause</em>? Does <code>accumulate</code> read out the values 1, 2, and 3, or does it potentially access uninitialized values?</p>\n", "Title": "Is the initialization of an element a side effect of the initializer-clause?", "CreationDate": "2017-01-25T09:09:38.163", "Id": "41847440", "CommentCount": "0", "LastEditDate": "2017-01-25T09:24:42.197", "PostTypeId": "1", "LastEditorUserId": "4672588", "LastActivityDate": "2017-01-25T09:24:42.197", "Tags": "<c++><initialization><language-lawyer><order-of-evaluation><aggregate-initialization>", "Score": "4", "OwnerUserId": "6868543", "ClosedDate": "2017-02-07T08:39:20.580", "AnswerCount": "0"}});