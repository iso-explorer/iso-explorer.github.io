post_cb({"35730655": {"Id": "35730655", "PostTypeId": "2", "Body": "<p>The <code>&amp;&amp;</code> operator forces left-to-right evaluation and a introduces a sequence point (as does the function call itself); the LHS is fully evaluated (and all side effects applied) before deciding if the RHS needs to be evaluated at all.  </p>\n<p>Thus, <code>if(f(a, b, &amp;c) &amp;&amp; c &lt; 10)</code> will work as you expect; if <code>c &lt; 10</code> is evaluated at all, it will be with the value written to <code>c</code> by the function <code>f</code>.   </p>\n<p>Having said that, this is not great style.  Just because C and C++ allow certain constructs doesn't mean it's a good idea to use them.  Anyone having to maintain your code would probably appreciate you writing it as</p>\n<pre><code>if ( f( a, b, &amp;c ) )\n{\n  if ( c &lt; 10 )\n  {\n    // do stuff\n  }\n}\n</code></pre>\n<p>instead.  </p>\n<p>Yes, it takes a bit more space on the page, but the logic is more obvious.  </p>\n", "LastActivityDate": "2016-03-01T18:31:22.827", "CommentCount": "3", "CreationDate": "2016-03-01T18:31:22.827", "ParentId": "35729956", "Score": "0", "OwnerUserId": "134554"}, "35729956": {"ViewCount": "114", "Body": "<p>Consider the following code:</p>\n<pre><code>int f(int a, int b, int *c) {\n    *c = a + b;\n    return *c &gt; 0;\n}\n\nvoid check(int a, int b) {\n    int c;\n    if(f(a, b, &amp;c) &amp;&amp; c &lt; 10) {\n        puts(\"sum is in range [1, 9]\");\n    }\n}\n</code></pre>\n<p>If the second part of <code>&amp;&amp;</code> is ever evaluated, is <code>c</code> guaranteed to hold the value assigned to it by function call <code>f(a, b, &amp;c)</code>? Does this behavior changes from C to C++?</p>\n", "AcceptedAnswerId": "35730019", "Title": "Is is safe to use result of side effect in expression inside the same expression?", "CreationDate": "2016-03-01T17:55:24.140", "Id": "35729956", "CommentCount": "5", "PostTypeId": "1", "LastActivityDate": "2016-03-01T18:32:36.150", "Score": "3", "OwnerUserId": "578749", "Tags": "<c++><c><language-lawyer>", "AnswerCount": "5"}, "bq_ids": {"n4140": {"so_35729956_35730320_2": {"length": 23, "quality": 0.9583333333333334, "section_id": 6164}, "so_35729956_35730320_0": {"length": 4, "quality": 0.6666666666666666, "section_id": 5808}, "so_35729956_35730320_1": {"length": 26, "quality": 0.896551724137931, "section_id": 6163}}, "n3337": {"so_35729956_35730320_2": {"length": 23, "quality": 0.9583333333333334, "section_id": 5925}, "so_35729956_35730320_0": {"length": 4, "quality": 0.6666666666666666, "section_id": 5581}, "so_35729956_35730320_1": {"length": 26, "quality": 0.896551724137931, "section_id": 5924}}, "n4659": {"so_35729956_35730320_2": {"length": 23, "quality": 0.9583333333333334, "section_id": 7661}, "so_35729956_35730320_0": {"length": 4, "quality": 0.6666666666666666, "section_id": 7269}, "so_35729956_35730320_1": {"length": 26, "quality": 0.896551724137931, "section_id": 7660}}}, "35730675": {"Id": "35730675", "PostTypeId": "2", "Body": "<p>IMHO the code you show is not OK at all. Let me change the function in your example just a little bit:</p>\n<pre><code>int f(int a, int b, int&amp; c) {\n    c = a + b;\n    return c &gt; 0;\n}\n</code></pre>\n<p>Now assume you are given only the following piece of code:</p>\n<pre><code>void check(int a, int b) {\n    int a = 3;\n    int b = 10;\n    int c = 7;\n    std::cout &lt;&lt; c &lt;&lt; std::endl;\n    if(f(a, b, c) || c &lt; 10) {\n        std::cout &lt;&lt; \"moo\" &lt;&lt; std::endl;\n    }\n}\n</code></pre>\n<p>what do expect it to print? \nOf course, once you know <code>f</code>, there is no problem, whereas, if you write </p>\n<pre><code>    /*...*/\n    int result = f(a,b,c);\n    std::cout &lt;&lt; c &lt;&lt; std::endl;\n    if(result || c &lt; 10) {\n        std::cout &lt;&lt; \"moo\" &lt;&lt; std::endl;\n    }\n</code></pre>\n<p>the code is much easier to read (and to debug) even if you have no knowledge of <code>f</code>.</p>\n", "LastActivityDate": "2016-03-01T18:32:36.150", "CommentCount": "3", "CreationDate": "2016-03-01T18:32:36.150", "ParentId": "35729956", "Score": "-1", "OwnerUserId": "4117728"}, "35730019": {"Id": "35730019", "PostTypeId": "2", "Body": "<p>It is safe if a sequence point occurs that controls the order of evaluation.</p>\n<pre><code>// bad: evaluation order of f() and (c &lt; 10) is not specified by C\nif(f(a, b, &amp;c) &amp; c &lt; 10) {\n// OK,  left half of &amp;&amp; must occur first.\nif(f(a, b, &amp;c) &amp;&amp; c &lt; 10) {\n</code></pre>\n<p>With simple <code>&amp;&amp;</code> expressions, there is no C,C++ difference.  With C/C++ the left side is evaluated and the right is evaluated if the left is not false.</p>\n<p>Behavior on this point is more complex when in C++, the <code>&amp;&amp;</code> operator can be overloaded and then both sides of <code>&amp;&amp;</code> are always evaluated.</p>\n", "LastEditorUserId": "2410359", "LastActivityDate": "2016-03-01T18:07:51.007", "Score": "7", "CreationDate": "2016-03-01T17:58:39.003", "ParentId": "35729956", "CommentCount": "4", "LastEditDate": "2016-03-01T18:07:51.007", "OwnerUserId": "2410359"}, "35730320": {"Id": "35730320", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_35729956_35730320_0\">is <code>c</code> guaranteed to hold the value assigned to it by function call <code>f(a, b, &amp;c)</code></p>\n</blockquote>\n<p>Yes. This is pretty clearly expressed in [expr.log.and]:</p>\n<blockquote>\n<p id=\"so_35729956_35730320_1\">The <code>&amp;&amp;</code> operator groups left-to-right. The operands are both contextually converted to <code>bool</code> (Clause 4).\n  The result is <code>true</code> if both operands are <code>true</code> and <code>false</code> otherwise. Unlike <code>&amp;</code>, <code>&amp;&amp;</code> guarantees left-to-right\n  evaluation: <strong>the second operand is not evaluated if the first operand is <code>false</code></strong>.</p>\n<p id=\"so_35729956_35730320_2\">The result is a <code>bool</code>. <strong>If the second expression is evaluated, every value computation and side effect associated\n  with the first expression is sequenced before every value computation and side effect associated with the\n  second expression.</strong></p>\n</blockquote>\n", "LastActivityDate": "2016-03-01T18:13:58.927", "CommentCount": "0", "CreationDate": "2016-03-01T18:13:58.927", "ParentId": "35729956", "Score": "3", "OwnerUserId": "2069064"}, "35729983": {"Id": "35729983", "PostTypeId": "2", "Body": "<p>Yes the expression will be evaluated from left to right and the value of <code>c</code> will be updated accordingly. Execution of the program will step into the function and anything that executes in the function will execute before <code>c &lt; 10</code> will.</p>\n<p>This behavior shouldn't change from <code>C</code> to <code>C++</code></p>\n", "LastActivityDate": "2016-03-01T17:56:47.997", "CommentCount": "0", "CreationDate": "2016-03-01T17:56:47.997", "ParentId": "35729956", "Score": "4", "OwnerUserId": "4544684"}});