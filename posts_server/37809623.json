post_cb({"37809623": {"CommentCount": "3", "ViewCount": "566", "PostTypeId": "1", "LastEditorUserId": "6290553", "CreationDate": "2016-06-14T10:37:54.050", "LastActivityDate": "2016-07-09T04:39:57.290", "LastEditDate": "2016-07-09T04:39:57.290", "AcceptedAnswerId": "37809892", "FavoriteCount": "2", "Title": "c++ alternative member definition", "Id": "37809623", "Score": "15", "Body": "<p>In C++ you can define members the following way:</p>\n<pre><code>struct test {\n    using memberType = int(int);\n    /*virtual*/ memberType member;\n};\n\nint test::member(int x) { return x; }\n</code></pre>\n<p>With C++14 is there any way to define the member inside the class definition, for instance with a lambda ?</p>\n", "Tags": "<c++><class><syntax><c++14><member>", "OwnerUserId": "3053638", "AnswerCount": "4"}, "37809902": {"ParentId": "37809623", "CommentCount": "0", "CreationDate": "2016-06-14T10:50:39.383", "OwnerUserId": "266198", "PostTypeId": "2", "Id": "37809902", "Score": "1", "Body": "<p>The only way I could think of us to use a <code>std::function&lt;&gt;</code> object, but you have to pass the instance (can't think of how it could be automatically bound..)</p>\n<pre><code>struct foo {\n    using T = int(foo&amp;, int);\n\n    int b;\n    std::function&lt;T&gt; x = [](foo&amp; f, int a) { return a * f.b; };\n};\n</code></pre>\n", "LastActivityDate": "2016-06-14T10:50:39.383"}, "37809943": {"ParentId": "37809623", "LastEditDate": "2016-06-14T11:05:28.003", "CommentCount": "0", "CreationDate": "2016-06-14T10:52:42.720", "Score": "1", "LastEditorUserId": "2015579", "PostTypeId": "2", "Id": "37809943", "OwnerUserId": "2015579", "Body": "<p>you're looking to write something like this:</p>\n<pre><code>struct test {\n  auto member_impl = [this]() {\n  };\n};\n</code></pre>\n<p>This fails on (at least) three counts:</p>\n<ol>\n<li><p>You can't declare a non-static member <code>auto</code>.</p></li>\n<li><p>You can't name the type of a lambda (so it must be auto)</p></li>\n<li><p><code>this</code> is not available at the time of defining the class.</p></li>\n</ol>\n<p>Short answer, no.</p>\n<p>but you can write:</p>\n<pre><code>struct test {\n  auto member_impl() {\n  };\n};\n</code></pre>\n<p>which is about as short as it gets.</p>\n", "LastActivityDate": "2016-06-14T11:05:28.003"}, "37809892": {"ParentId": "37809623", "CommentCount": "1", "CreationDate": "2016-06-14T10:50:15.937", "OwnerUserId": "5281853", "PostTypeId": "2", "Id": "37809892", "Score": "7", "Body": "<p>I don't think that's possible, but you could do it if the member is a pointer to function</p>\n<pre><code>struct test {\n    int (*member)(int) = [](int x){return x;};\n};\n</code></pre>\n<p>since a lambda with an empty capture list is actually a regular function</p>\n", "LastActivityDate": "2016-06-14T10:50:15.937"}, "37811379": {"ParentId": "37809623", "LastEditDate": "2016-06-14T17:17:19.600", "CommentCount": "0", "CreationDate": "2016-06-14T11:59:19.323", "Score": "1", "LastEditorUserId": "887124", "PostTypeId": "2", "Id": "37811379", "OwnerUserId": "4987285", "Body": "<p>I guess <a href=\"http://eel.is/c++draft/expr.prim.lambda#3\" rel=\"nofollow\">5.1.5/3</a> is what prevents you to use a lambda the way you would use it, I'm sorry:</p>\n<blockquote>\n<p id=\"so_37809623_37811379_0\">[...] A lambda-expression shall not appear in an unevaluated operand (Clause [expr]), in a template-argument, in an alias-declaration, in a typedef declaration, or in the declaration of a function or function template outside its function body and default arguments. [ Note: The intention is to prevent lambdas from appearing in a signature.  \u2014 end note ] [...]</p>\n</blockquote>\n<p>That said, C++14 does let you define a member type using templates, as in the following example:</p>\n<pre><code>template&lt;typename F&gt;\nstruct S;\n\ntemplate&lt;typename R, typename... Args&gt;\nstruct S&lt;R(Args...)&gt; {\n    using member = R(Args...);\n    R operator()(Args...) { return R{}; }\n    member M;\n};\n\ntemplate&lt;typename R, typename... Args&gt;\nR S&lt;R(Args...)&gt;::M(Args...) { return R{}; }\n\nint main() { S&lt;void(int)&gt; s; }\n</code></pre>\n", "LastActivityDate": "2016-06-14T17:17:19.600"}, "bq_ids": {"n4140": {"so_37809623_37811379_0": {"section_id": 5961, "quality": 0.8275862068965517, "length": 24}}, "n4659": {"so_37809623_37811379_0": {"section_id": 7448, "quality": 0.8275862068965517, "length": 24}}}});