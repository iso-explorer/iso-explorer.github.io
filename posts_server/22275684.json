post_cb({"22275745": {"Id": "22275745", "PostTypeId": "2", "Body": "<p>Mathematically speaking you should get infinite, which is the correct answer... programmatically any sane compiler will warn you of division by zero as internally the modulo operator (at least in C/C++) is translated in a division (in most implementations). So the answer to your question is that you would get a floating point exception, in both cases.</p>\n", "LastActivityDate": "2014-03-08T22:13:20.860", "CommentCount": "14", "CreationDate": "2014-03-08T22:13:20.860", "ParentId": "22275684", "Score": "1", "OwnerUserId": "1414710"}, "22275717": {"Id": "22275717", "PostTypeId": "2", "Body": "<p>The result is UB</p>\n<p>C11dr \u00a76.5.5 \"The result of the / operator is the quotient from the division of the first operand by the second; the result of the % operator is the remainder. In both operations, if the value of the second operand is zero, the behavior is undefined.\"</p>\n", "LastActivityDate": "2014-03-08T22:11:08.403", "CommentCount": "1", "CreationDate": "2014-03-08T22:11:08.403", "ParentId": "22275684", "Score": "4", "OwnerUserId": "2410359"}, "bq_ids": {"n4140": {"so_22275684_22275718_0": {"length": 10, "quality": 0.5555555555555556, "section_id": 6137}}, "n3337": {"so_22275684_22275718_0": {"length": 10, "quality": 0.5555555555555556, "section_id": 5901}}, "n4659": {"so_22275684_22275718_0": {"length": 10, "quality": 0.5555555555555556, "section_id": 7634}}}, "22275684": {"ViewCount": "207", "Body": "<p>I know that division by zero is not allowed in math, but can I use modulo by zero and what answer should I get?</p>\n<p>For example </p>\n<pre><code>10%0 = ?\n5%0 = ?\n</code></pre>\n", "AcceptedAnswerId": "22275776", "Title": "Remainder after division by zero", "CreationDate": "2014-03-08T22:07:48.763", "Id": "22275684", "CommentCount": "7", "LastEditDate": "2014-03-11T16:37:32.140", "PostTypeId": "1", "LastEditorUserId": "1237747", "LastActivityDate": "2014-03-11T16:37:32.140", "Score": "1", "OwnerUserId": "3394586", "Tags": "<c++><c><integer-division>", "AnswerCount": "4"}, "22275776": {"Id": "22275776", "PostTypeId": "2", "Body": "<p>The standard defines it as \"undefined\". </p>\n<p>In nearly all processors, the modulo is performed by the same functionality as divide. In modern larger processors, it's an instruction (x86 for example). Most often, this instruction will cause a trap when dividing by zero, and this applies whether the code is \"intending to use the modulo\" or \"quotient\" part. </p>\n<p>It is undefined so that processors and compilers have the freedom to implement what they fancy - e.g. if the processor just returns whatever came in as the input, that's also allowed, or if it causes the entire OS to crash, that's \"fine\" too by the standard. </p>\n<p>In summary, modulo of zero is just as bad as divide by zero. </p>\n<p>(Note that typically, floating point divide by zero does NOT trap [by default], and produces a infinity value, except if the value divided is also zero, in which case you get \"not a number\")</p>\n", "LastEditorUserId": "1919155", "LastActivityDate": "2014-03-08T22:31:31.480", "Score": "9", "CreationDate": "2014-03-08T22:16:58.567", "ParentId": "22275684", "CommentCount": "0", "OwnerUserId": "1919155", "LastEditDate": "2014-03-08T22:31:31.480"}, "22275718": {"Id": "22275718", "PostTypeId": "2", "Body": "<p>In C/C++ it is <a href=\"https://en.wikipedia.org/wiki/Undefined_behavior\">Undefined behaviour</a>, you can get various of results depending on compiler or even different instances of same program.</p>\n<p><a href=\"https://www.google.lt/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=4&amp;ved=0CEAQFjAD&amp;url=https://www.securecoding.cert.org/confluence/spaces/flyingpdf/pdfpageexport.action?pageId=21725433&amp;ei=Z5UbU_ulC8jAhAfFzoDoCw&amp;usg=AFQjCNHiHsN66X9ICw5gx-n21FPIIy7MDw&amp;sig2=3K5y_mDnIV2yL3bRU0GcuA&amp;bvm=bv.62578216,d.bGE&amp;cad=rja\">C11dr \u00a76.5.5</a></p>\n<blockquote>\n<p id=\"so_22275684_22275718_0\">The binary / operator yields the quotient, and the binary % operator\n  yields the remainder from the division of the first expression by the\n  second. If the second operand of / or % is zero the behavior is\n  undefined</p>\n</blockquote>\n", "LastEditorUserId": "1237747", "LastActivityDate": "2014-03-08T22:16:52.533", "Score": "7", "CreationDate": "2014-03-08T22:11:17.550", "ParentId": "22275684", "CommentCount": "1", "OwnerUserId": "1237747", "LastEditDate": "2014-03-08T22:16:52.533"}});