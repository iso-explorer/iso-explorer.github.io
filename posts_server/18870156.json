post_cb({"bq_ids": {"n4140": {"so_18870156_18870232_0": {"length": 27, "quality": 0.75, "section_id": 5768}, "so_18870156_18870232_1": {"length": 24, "quality": 0.6666666666666666, "section_id": 5768}}, "n3337": {"so_18870156_18870232_0": {"length": 27, "quality": 0.75, "section_id": 5541}, "so_18870156_18870232_1": {"length": 24, "quality": 0.6666666666666666, "section_id": 5541}}, "n4659": {"so_18870156_18870232_0": {"length": 26, "quality": 0.7222222222222222, "section_id": 7225}, "so_18870156_18870232_1": {"length": 21, "quality": 0.5833333333333334, "section_id": 7225}}}, "18870232": {"Id": "18870232", "PostTypeId": "2", "Body": "<p>There are <em>formal</em> and <em>actual</em> parameters:</p>\n<pre><code>void foo(int arg); //arg is a formal parameter\n\nint main()\n{\n    int val = 1;\n    foo(val);  //val is an actual parameter\n}\n</code></pre>\n<p>From <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1905.pdf\">C++ Standard</a>:</p>\n<p><strong>1.3.1 formal parameter (parameter)</strong></p>\n<blockquote>\n<p id=\"so_18870156_18870232_0\">an object or reference declared as part of a function declaration or\n  definition, or in the catch clause of an exception handler, that\n  acquires a value on entry to the function or handler; an identifier\n  from the comma-separated list bounded by the parentheses immediately\n  following the macro name in a function-like macro definition; or a\n  template-parameter. Parameters are also known as formal arguments or\n  formal parameters.</p>\n</blockquote>\n<p><strong>1.3.10 actual parameter (argument)</strong></p>\n<blockquote>\n<p id=\"so_18870156_18870232_1\">an expression in the comma-separated list bounded by the parentheses\n  in a function call expression, a sequence of preprocessing tokens in\n  the comma-separated list bounded by the parentheses in a function-like\n  macro invocation, the operand of throw, or an expression, type-id or\n  template-name in the comma-separated list bounded by the angle\n  brackets in a template instantiation. Also known as an actual argument\n  or actual parameter.</p>\n</blockquote>\n", "LastEditorUserId": "2606524", "LastActivityDate": "2013-09-18T13:08:23.420", "Score": "27", "CreationDate": "2013-09-18T10:50:32.780", "ParentId": "18870156", "CommentCount": "4", "OwnerUserId": "2606524", "LastEditDate": "2013-09-18T13:08:23.420"}, "18870241": {"Id": "18870241", "PostTypeId": "2", "Body": "<p>It's a matter of being a little pedantic over terminology, but quite useful: The formal parameters are what you just think of function parameters:</p>\n<pre><code>int foo(bool a, float b);\n</code></pre>\n<p>Here <code>a</code> and <code>b</code> are formal parameters. The point is that in the function body, you're referring to those parameters \"formally\" without actually knowing their value. It is only when you actual <em>evaluate a function call expression</em> that the formal function parameters are <em>bound</em> to the function call arguments:</p>\n<pre><code>int result = foo(false, 1.5);\n</code></pre>\n<p>In this call expression, the value <code>false</code> of the first argument is bound to the formal parameter <code>a</code>, and similarly for the second argument.</p>\n<p>The distinction between parameters and arguments is maybe more important to language designers and comiler writers, but as an example in C++, it can be very helpful to get your head around this when you're trying to follow the rules for template argument deduction.</p>\n", "LastEditorUserId": "596781", "LastActivityDate": "2013-09-18T10:56:13.310", "Score": "7", "CreationDate": "2013-09-18T10:50:49.260", "ParentId": "18870156", "CommentCount": "0", "OwnerUserId": "596781", "LastEditDate": "2013-09-18T10:56:13.310"}, "18870217": {"Id": "18870217", "PostTypeId": "2", "Body": "<p>Formal parameters are the parameters known at the function definition. The actual parameters are what you <em>actually</em> (hence the name) pass to the function when you call it.</p>\n<pre><code>void foo( int a ); // a is a formal parameter\n\nfoo(10); // 10 is the actual parameter\n</code></pre>\n", "LastActivityDate": "2013-09-18T10:49:40.207", "CommentCount": "1", "CreationDate": "2013-09-18T10:49:40.207", "ParentId": "18870156", "Score": "14", "OwnerUserId": "1490355"}, "18870156": {"ViewCount": "23876", "Body": "<p>When compiling in C++ I often end up with error messages dealing with \"formal parameters\", such as</p>\n<pre><code>error C2719: 'b': formal parameter with __declspec(align('16')) won't be aligned\n</code></pre>\n<p>I do understand the error, and the fact that <code>b</code> is a parameter of a function I am defining.</p>\n<p>However, what does it mean that a parameter is <em>formal</em>? Can there be <em>informal</em> parameters as well? </p>\n<p>I do notice that the term \"formal parameter\" appears in other languages as well, so I presume it is a more generic term not necessarily specific to C-family of languages? Are informal parameters supported by some subset of languages?</p>\n<hr>\n<p>Upon seeing the answers, one final question: Where those names <em>formal parameter</em> and <em>actual parameter</em> origin from? Does it origin from the C standard, or is it an effect of calling it as such in some abstract language calculus?</p>\n</hr>", "AcceptedAnswerId": "18870232", "Title": "What is a formal parameter?", "CreationDate": "2013-09-18T10:46:55.633", "Id": "18870156", "CommentCount": "4", "FavoriteCount": "9", "PostTypeId": "1", "LastEditDate": "2013-09-18T11:59:44.957", "LastEditorUserId": "635654", "LastActivityDate": "2013-09-18T13:08:23.420", "Score": "21", "OwnerUserId": "635654", "Tags": "<c++><c><language-agnostic><language-design>", "AnswerCount": "3"}});