post_cb({"bq_ids": {"n4140": {"so_37402250_37402319_0": {"length": 11, "quality": 0.9166666666666666, "section_id": 655}}, "n3337": {"so_37402250_37402319_0": {"length": 11, "quality": 0.9166666666666666, "section_id": 645}}, "n4659": {"so_37402250_37402319_0": {"length": 11, "quality": 0.9166666666666666, "section_id": 683}}}, "37402319": {"Id": "37402319", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_37402250_37402319_0\">An operator function cannot have default arguments (8.3.6), except where explicitly stated below.</p>\n</blockquote>\n<p>(C++14 standard, [over.oper]/8; an identical sentence appears in the C++03 standard).</p>\n<p>The specific case where default arguments are allowed is the case of the function call operator (<code>operator()</code>; see [over.call]/1). In all other cases they are disallowed.</p>\n", "LastActivityDate": "2016-05-23T23:51:26.577", "CommentCount": "3", "CreationDate": "2016-05-23T23:51:26.577", "ParentId": "37402250", "Score": "8", "OwnerUserId": "481267"}, "37402250": {"ViewCount": "161", "Body": "<p>I was experimenting with overloading operators <code>new</code> and <code>delete</code>, and noticed that MSVC and GCC appear to differ in their implementation of <code>operator delete</code>.  Consider the following code:</p>\n<pre><code>#include &lt;cstddef&gt;\n\nstruct CL {\n    // The bool does nothing, other than making these placement overloads.\n    void* operator new(size_t s, bool b = true);\n    void operator delete(void* o, bool b = true);\n};\n// Functions are simple wrappers for the normal operators.\nvoid* CL::operator new(size_t s, bool b) { return ::operator new(s); }\nvoid CL::operator delete(void* o, bool b) { return ::operator delete(o); }\n\nauto aut = new (false) CL;\n</code></pre>\n<p>This code will compile properly with GCC (tested with both Ideone and TutorialsPoint online compilers), but not with MSVC (tested with MSVS 2010, MSVS 2015 online, and Rextester).</p>\n<p>While it appears that GCC compiles it as one would expect, MSVC emits error <a href=\"https://msdn.microsoft.com/en-us/library/wdy2f5hx.aspx\" rel=\"nofollow noreferrer\">C2831</a>; I checked Cppreference, but couldn't find an answer; the <a href=\"http://en.cppreference.com/w/cpp/language/default_arguments\" rel=\"nofollow noreferrer\">default parameter</a> page doesn't mention operators, and the <a href=\"http://en.cppreference.com/w/cpp/language/operators\" rel=\"nofollow noreferrer\">operator overloading</a> &amp; <a href=\"http://en.cppreference.com/w/cpp/memory/new/operator_delete\" rel=\"nofollow noreferrer\">operator delete</a> pages don't mention default parameters.  Similarly, the <a href=\"https://stackoverflow.com/questions/4421706/operator-overloading/4421791#4421791\">Overloading <code>new</code> and <code>delete</code></a> entry in SO's C++ FAQ doesn't mention default parameters.</p>\n<p>So, in light of this, which of these behaviours (allowing default parameters, or treating them as an error) is compliant with the C++ standard?</p>\n<p>Links:</p>\n<ul>\n<li><a href=\"http://ideone.com/1wAf12\" rel=\"nofollow noreferrer\">On Ideone</a></li>\n<li><a href=\"http://rextester.com/VJTQ63662\" rel=\"nofollow noreferrer\">On Rextester (as VC++)</a></li>\n</ul>\n", "AcceptedAnswerId": "37402319", "Title": "Can overloaded operator delete have default parameters?", "CreationDate": "2016-05-23T23:43:18.107", "Id": "37402250", "CommentCount": "0", "LastEditDate": "2017-05-23T12:07:56.587", "PostTypeId": "1", "LastEditorUserId": "-1", "LastActivityDate": "2016-05-23T23:51:26.577", "Score": "5", "OwnerUserId": "5386374", "Tags": "<c++><visual-c++><g++><operator-overloading><default-arguments>", "AnswerCount": "1"}});