post_cb({"19200076": {"FavoriteCount": "1", "ViewCount": "72", "Id": "19200076", "AcceptedAnswerId": "19200230", "Score": "2", "Title": "Converting Constructor As The Return From A Function", "LastEditorUserId": "759866", "CommentCount": "0", "Body": "<p>Is it possible to use the converting constructor rather than copy constructor to return object from a function even if there is no RVO evolved(Suppose that the compiler is not supporting any such kind of optimizations)? The point of the question is what is the C++ std having told, could anyone tell me? I got the gcc and compiled the code below with several questions in the comment either.</p>\n<pre><code>\n\n    class A\n    {\n    public:\n        A(int) {};\n        A(int, int) {};\n\n    private:\n        A(const A &amp;) = delete;\n        A &amp; operator = (const A &amp;) = delete;\n    };\n\n    A foo(void)\n    {// All the CEs below are all the same, which is 'using the deleted function 'A::A(const A&amp;)''.\n        //return(0); // Not compiled.\n        //return(A(0)); // Not compiled. ok since the A isn't be copy-able.\n        //return {0};  // Compiled. Is it a bug of the compiler?\n        //return({0}); // Not compiled. What happened when returns in '()' implemented?\n        //return 0;  // Not compiled. What happened when returns without '()' and '{}' implemented?\n        //return ({0, 0}); // Not compiled.\n        return {0, 0}; // Compiled. Realy??\n\n    /*\n      1. What are the differences in 'return 0', 'return {0}', 'return(0)' and 'return({0})'?\n      2. Is it any possible to do conversion from source type object 'which is 'int' in this sample' to returning type of\n    the function directly with only ONE constructor call even if the compiler has no any copying eliminating optimization\n     but full compatibility with STD? Note that the function 'foo' here has no returning object accepter.\n    */\n    }\n\n    int main(void)\n    {\n        foo(); // Note that there is no accepter of 'A' here, it's not discussing purpose at this topic of the post.\n    }\n\n    // compiling with the gcc ver. 4.8.1.\n\n</code></pre>\n", "Tags": "<c++><function><constructor><std><rvo>", "CreationDate": "2013-10-05T16:35:38.777", "LastEditDate": "2013-12-09T13:11:10.400", "LastActivityDate": "2013-12-09T13:11:10.400", "PostTypeId": "1", "AnswerCount": "1", "OwnerUserId": "2848654"}, "bq_ids": {"n4140": {"so_19200076_19200230_0": {"length": 43, "quality": 0.8431372549019608, "section_id": 3913}}, "n3337": {"so_19200076_19200230_0": {"length": 43, "quality": 0.8431372549019608, "section_id": 3773}}}, "19200230": {"LastActivityDate": "2013-10-05T19:49:46.810", "CreationDate": "2013-10-05T16:49:55.290", "CommentCount": "6", "Body": "<p>Yes, it's perfectly valid to call a converting constructor in a return statement, if you use a braced-init-list to initialize the returned object.</p>\n<p>The C++11 standard says this in 6.6.3 [stmt.return]:</p>\n<blockquote>\n<p id=\"so_19200076_19200230_0\">The value of the expression is implicitly converted to the return type of the function in which it appears. A return statement can involve the construction and copy or move of a temporary object (12.2). [<em>Note:</em> A copy or move operation associated with a return statement may be elided or considered as an rvalue for the purpose of overload resolution in\n  selecting a constructor (12.8). \u2014 <em>end note</em>] A return statement with a <em>braced-init-list</em> initializes the object or reference to be returned from the function by copy-list-initialization (8.5.4) from the specified initializer list. [<em>Example:</em> </p>\n</blockquote>\n<pre><code>std::pair&lt;std::string,int&gt; f(const char* p, int x) {\n  return {p,x};\n}\n</code></pre>\n<blockquote>\n<p id=\"so_19200076_19200230_1\">\u2014 <em>end example</em>]</p>\n</blockquote>\n<p>In the other commented-out <code>return</code> statements you create a temporary object which would then need to be copied to the returned object, which requires an accessible copy ctor.</p>\n", "Id": "19200230", "LastEditDate": "2013-10-05T19:49:46.810", "ParentId": "19200076", "OwnerUserId": "981959", "PostTypeId": "2", "Score": "2", "LastEditorUserId": "981959"}});