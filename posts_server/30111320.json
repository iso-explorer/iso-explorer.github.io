post_cb({"bq_ids": {"n4140": {"so_30111320_30111560_1": {"length": 10, "quality": 1.0, "section_id": 6341}, "so_30111320_30111560_2": {"length": 7, "quality": 0.7777777777777778, "section_id": 6341}}, "n3337": {"so_30111320_30111560_1": {"length": 10, "quality": 1.0, "section_id": 6098}, "so_30111320_30111560_2": {"length": 7, "quality": 0.7777777777777778, "section_id": 6098}}, "n4659": {"so_30111320_30111560_1": {"length": 6, "quality": 0.6, "section_id": 49}, "so_30111320_30111560_2": {"length": 6, "quality": 0.6666666666666666, "section_id": 7709}}}, "30111806": {"Id": "30111806", "PostTypeId": "2", "Body": "<p>The code might compile if <code>std::copy()</code> does not call any other non-friend functions but I've yet to encounter any such implementation.     And there is no requirement in the standard limiting HOW <code>std::copy()</code> achieves the required effect.</p>\n<p>However, it does require a working and accessible assignment operator.</p>\n", "LastActivityDate": "2015-05-07T21:15:49.500", "CommentCount": "0", "CreationDate": "2015-05-07T21:15:49.500", "ParentId": "30111320", "Score": "1", "OwnerUserId": "4706785"}, "30111560": {"Id": "30111560", "PostTypeId": "2", "Body": "<p><code>std::copy</code> requires an output iterator ([algorithms.general]/p5); output iterators, among other things, require <code>*r = o</code> to be valid ([output.iterators], Table 108) - not just \"valid sometimes\" or \"valid in some contexts\".</p>\n<p>Since for <code>Picky *p, a;</code>, <code>*p = a</code> isn't valid in most contexts, <code>Picky *</code> isn't a valid output iterator.</p>\n<hr>\n<blockquote>\n<p id=\"so_30111320_30111560_0\">Hmm it'd be great if you could generalize your answer to other things\n  beyond the particular example I gave. Like, for example,\n  <code>std::vector::push_back(T const &amp;)</code>, or whatever.</p>\n</blockquote>\n<p>Befriending a member function is an absolute no-no, because you aren't even guaranteed that there's a member function with that signature ([member.functions]/p2, which Stephan T. Lavavej calls the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4245.html#2435\" rel=\"nofollow\">\"STL Implementers Can Be Sneaky Rule\"</a>):</p>\n<blockquote>\n<p id=\"so_30111320_30111560_1\">An implementation may declare additional non-virtual member function\n  signatures within a class:</p>\n<ul>\n<li>by adding arguments with default values to a member function signature<sup>187</sup> [<em>Note</em>: An implementation\n  may not add arguments with default values to virtual, global, or non-member functions. \u2014 <em>end note</em>];</li>\n<li>by replacing a member function signature with default values by two or more member function signatures with equivalent behavior; and</li>\n<li>by adding a member function signature for a member function name.</li>\n</ul>\n<p id=\"so_30111320_30111560_2\"><sub><sup>187</sup> Hence, the address of a member function of a class in the C++ standard library has an unspecified type.</sub></p>\n</blockquote>\n</hr>", "LastEditorUserId": "2756719", "LastActivityDate": "2015-05-07T21:21:40.730", "Score": "8", "CreationDate": "2015-05-07T21:01:13.160", "ParentId": "30111320", "CommentCount": "6", "OwnerUserId": "2756719", "LastEditDate": "2015-05-07T21:21:40.730"}, "30111320": {"ViewCount": "157", "Body": "<p>This question is easiest to illustrate with an example, so here goes:</p>\n<h3>Is code like the following guaranteed to be valid, and compile &amp; run correctly?</h3>\n<p>(Not all implementations actually compile it correctly, but I'm wondering if that's a bug.)</p>\n<pre><code>#include &lt;algorithm&gt;\nclass Picky\n{\n    friend\n        Picky *std::copy&lt;Picky const *, Picky *&gt;(Picky const *, Picky const *, Picky *);\n    Picky &amp;operator =(Picky const &amp;) { return *this; }\npublic:\n    Picky() { }\n};\n\nint main()\n{\n    Picky const a;\n    Picky b;\n    std::copy&lt;Picky const *, Picky *&gt;(&amp;a, &amp;a + 1, &amp;b);\n    return 0;\n}\n</code></pre>\n", "AcceptedAnswerId": "30111560", "Title": "Must the C++ standard library support classes that are picky about who their friends are?", "CreationDate": "2015-05-07T20:45:28.130", "Id": "30111320", "CommentCount": "7", "LastEditDate": "2015-05-07T20:55:34.997", "PostTypeId": "1", "LastEditorUserId": "541686", "LastActivityDate": "2015-05-07T21:21:40.730", "Score": "8", "OwnerUserId": "541686", "Tags": "<c++><stl><language-lawyer><friend><access-modifiers>", "AnswerCount": "2"}});