post_cb({"24072180": {"CommentCount": "7", "ViewCount": "1273", "PostTypeId": "1", "LastEditorUserId": "3204551", "CreationDate": "2014-06-06T00:04:48.953", "LastActivityDate": "2014-06-06T00:54:25.427", "Title": "C++ creating sorted vector from map", "AcceptedAnswerId": "24072279", "LastEditDate": "2014-06-06T00:32:37.437", "Id": "24072180", "Score": "3", "Body": "<p>I'm trying to create a sorted <code>vector</code> from a <code>map</code>, sorted according to a value that isn't the map's key.\nThe map value is <code>block</code> object, and I want the vector to be sorted according to <code>size</code>, attribute of <code>block</code>.<br>\nMy code:</br></p>\n<pre><code>#include &lt;map&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n\nstruct block {\n    string data;\n    int size;\n};\n\nstruct vecotrCompare {\n    bool operator()(pair&lt;const string, block*&gt; &amp;left,\n      pair&lt;const string, block*&gt; &amp;right) {\n        return left.second -&gt; size &lt; right.second -&gt; size;\n    }\n};\n\nint main() {\n    map&lt;const string, block*&gt; myMap;\n    vector&lt;pair&lt;const string, block*&gt; &gt; myVector(\n      myMap.begin(), myMap.end());\n    sort(myVector.begin(), myVector.end(), vecotrCompare());\n}\n</code></pre>\n<p>The <code>sort(...)</code> line can't compile, and I'm getting a compile-error:</p>\n<pre><code>error: no match for call to \u2018(vecotrCompare) (std::pair&lt;const\n  std::basic_string&lt;char&gt;, block*&gt;&amp;, const std::pair&lt;const\n  std::basic_string&lt;char&gt;, block*&gt;&amp;)\u2019\n</code></pre>\n", "Tags": "<c++><sorting><vector><map>", "OwnerUserId": "1869297", "AnswerCount": "2"}, "24072279": {"ParentId": "24072180", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>Elements in a <code>vector</code> need to be MoveAssignable or CopyAssignable. A <code>pair&lt;const string, block*&gt;</code> is neither due to the <code>const string</code>. Change that to <code>string</code> and your code compiles.</p>\n<pre><code>map&lt;string, block*&gt; myMap;\nvector&lt;pair&lt;string, block*&gt; &gt; myVector(myMap.begin(), myMap.end());\n</code></pre>\n<p>Also change your comparator so that the argument types are <code>const&amp;</code></p>\n<pre><code>struct vecotrCompare {\n    bool operator()(pair&lt; string, block*&gt; const&amp;left, \n                    pair&lt; string, block*&gt; const&amp;right) const {\n        return left.second -&gt; size &lt; right.second -&gt; size;\n    }\n};\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/ac4eb97cd85908eb\" rel=\"nofollow\">Live demo</a></p>\n<hr>\n<p>The second part about the arguments needing to be <code>const&amp;</code> is actually not a requirement. From <em>\u00a725.1/9</em></p>\n<blockquote>\n<p id=\"so_24072180_24072279_0\">The <code>BinaryPredicate</code> parameter is used whenever an algorithm expects a function object that when applied to the result of dereferencing two corresponding iterators or to dereferencing an iterator and type <code>T</code> when <code>T</code> is part of the signature returns a value testable as <code>true</code>. In other words, if an algorithm takes <code>BinaryPredicate binary_pred</code> as its argument and <code>first1</code> and <code>first2</code> as its iterator arguments, it should work correctly in the construct <code>binary_pred(*first1, *first2)</code> contextually converted to <code>bool</code> (Clause 4). <code>BinaryPredicate</code> always takes the first iterator\u2019s <code>value_type</code> as its first argument, that is, in those cases when <code>T</code> value is part of the signature, it should work correctly in the construct <code>binary_pred(*first1, value)</code> contextually converted to <code>bool</code> (Clause 4). <strong><code>binary_pred</code> shall not apply any non-constant function through the dereferenced iterators</strong>.</p>\n</blockquote>\n<p>So the standard never mentions that the functor's argument types <em>must be</em> <code>const&amp;</code>, but libstdc++ seems to be passing temporaries to the functor and the code <a href=\"http://coliru.stacked-crooked.com/a/236e36bc2fdc7bdf\" rel=\"nofollow\">doesn't compile</a> unless you add the <code>const&amp;</code> (looks like this has been fixed in gcc-4.9).</p>\n<p>On the other hand, both libc++ and VS2013 <a href=\"http://coliru.stacked-crooked.com/a/8b572073dca6a04c\" rel=\"nofollow\">handle the case</a> where the arguments are not <code>const&amp;</code> correctly.</p>\n</hr>", "OwnerUserId": "241631", "LastEditorUserId": "241631", "LastEditDate": "2014-06-06T00:54:25.427", "Id": "24072279", "Score": "2", "CreationDate": "2014-06-06T00:17:01.683", "LastActivityDate": "2014-06-06T00:54:25.427"}, "24072309": {"ParentId": "24072180", "PostTypeId": "2", "CommentCount": "10", "Body": "<p>In addition to the change suggested by @Praetorian, you should add some <code>const</code> in <code>vectorCompare::operator()</code>.</p>\n<pre><code>struct vecotrCompare {\n    bool operator()(pair&lt;const string, block*&gt; const&amp; left,\n                    pair&lt;const string, block*&gt; const&amp; right) const {\n        return left.second -&gt; size &lt; right.second -&gt; size;\n    }\n};\n</code></pre>\n<p>Here's the documentation on the requirements of <code>comp</code> from\n <a href=\"http://www.cplusplus.com/reference/algorithm/sort/\" rel=\"nofollow\">http://www.cplusplus.com/reference/algorithm/sort/</a>.</p>\n<p>comp</p>\n<blockquote>\n<p id=\"so_24072180_24072309_0\">Binary function that accepts two elements in the range as arguments, and returns a value convertible to bool. The value returned indicates whether the element passed as first argument is considered to go before the second in the specific strict weak ordering it defines.</p>\n<p id=\"so_24072180_24072309_1\">The function shall not modify any of its arguments.</p>\n<p id=\"so_24072180_24072309_2\">This can either be a function pointer or a function object.</p>\n</blockquote>\n<p>Some compilers force the argument types to be <code>const&amp;</code> or an object passed by value. Others work with a reference.</p>\n", "OwnerUserId": "434551", "LastEditorUserId": "434551", "LastEditDate": "2014-06-06T00:53:58.080", "Id": "24072309", "Score": "0", "CreationDate": "2014-06-06T00:20:56.287", "LastActivityDate": "2014-06-06T00:53:58.080"}, "bq_ids": {"n4140": {"so_24072180_24072279_0": {"section_id": 1242, "quality": 0.9871794871794872, "length": 77}, "so_24072180_24072309_2": {"section_id": 3321, "quality": 0.7142857142857143, "length": 5}}, "n3337": {"so_24072180_24072279_0": {"section_id": 1240, "quality": 0.9871794871794872, "length": 77}, "so_24072180_24072309_2": {"section_id": 4378, "quality": 0.7142857142857143, "length": 5}}, "n4659": {"so_24072180_24072279_0": {"section_id": 1330, "quality": 0.9871794871794872, "length": 77}, "so_24072180_24072309_2": {"section_id": 4087, "quality": 0.7142857142857143, "length": 5}}}});