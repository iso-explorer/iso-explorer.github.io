post_cb({"bq_ids": {"n4140": {"so_12148965_12149008_0": {"length": 60, "quality": 0.8571428571428571, "section_id": 3909}}, "n3337": {"so_12148965_12149008_0": {"length": 60, "quality": 0.8571428571428571, "section_id": 3769}}, "n4659": {"so_12148965_12149008_0": {"length": 60, "quality": 0.8571428571428571, "section_id": 4795}}}, "12148965": {"ViewCount": "460", "Body": "<blockquote>\n<p id=\"so_12148965_12148965_0\"><strong>Possible Duplicate:</strong><br>\n<a href=\"https://stackoverflow.com/questions/3179936/goto-out-of-a-block-do-destructors-get-called\">Goto out of a block: do destructors get called?</a> </br></p>\n</blockquote>\n<p>I know that goto operator both in C and C++ is useless in almost all situations, but i want to know the answer for this question only by interest, it has no practical meaning.</p>\n<p>Does C++ standard guarantees that in such situations destructors of objects must be called properly?</p>\n<pre><code>#include &lt;iostream&gt;\n\nclass Foo\n{\npublic:\n   Foo() { std::cout &lt;&lt; \"Foo::Foo() \\n\"; }\n   ~Foo() { std::cout &lt;&lt; \"Foo::~Foo() \\n\"; }\n};\n\nint main()\n{\n   {\n      std::size_t i = 0;\n      _1:\n      Foo instance;\n      if (!++i)\n      {\n         goto _1;\n      }\n   }\n\n   {\n      Foo instance;\n      goto _2;\n   }\n\n   _2:\n   ;\n}\n</code></pre>\n<p><a href=\"http://liveworkspace.org/code/06031e6699c8fddda94b8594ccab1387\" rel=\"nofollow noreferrer\">http://liveworkspace.org/code/06031e6699c8fddda94b8594ccab1387</a></p>\n<p>And what about other stange situations with goto and C++ RAII?</p>\n<p>It would be really cool if you can post here the quotes from the C++ standard.</p>\n", "AcceptedAnswerId": "12149008", "Title": "goto and RAII in C++", "CreationDate": "2012-08-27T20:16:27.800", "LastActivityDate": "2014-12-05T15:05:06.893", "CommentCount": "3", "LastEditDate": "2017-05-23T10:34:09.023", "PostTypeId": "1", "Tags": "<c++><goto>", "Id": "12148965", "AnswerCount": "1", "Score": "6", "OwnerUserId": "1608835", "ClosedDate": "2012-08-27T20:41:41.987", "LastEditorUserId": "-1"}, "12149008": {"Id": "12149008", "PostTypeId": "2", "Body": "<p>Yes. Automatic objects are guaranteed to be destructed when they go out of scope. The fact that the scope was exited using <code>goto</code> has no effect on this rule.</p>\n<p>The only situation that I can think of where this doesn't hold is if the scope is exited using <a href=\"http://en.cppreference.com/w/cpp/utility/program/longjmp\">std::longjmp</a> (in which case behaviour is undefined if there are any objects with destructors).</p>\n<h1>n3376</h1>\n<h2>6.6 Jump statments: [stmt.jump]</h2>\n<h3>Paragraph 2</h3>\n<blockquote>\n<p id=\"so_12148965_12149008_0\">On exit from a scope (however accomplished), objects with automatic storage duration (3.7.3) that have been constructed in that scope are destroyed in the reverse order of their construction. [ Note: For temporaries, see 12.2. \u2014end note] Transfer out of a loop, out of a block, <strong>or back past an initialized variable with automatic storage duration</strong> involves the destruction of objects with automatic storage duration that are in scope at the point transferred from but not at the point transferred to. (See 6.7 for transfers into blocks). [Note: However, the program can be terminated (by calling std::exit() or std::abort() (18.5), for example) without destroying class objects with automatic storage duration. \u2014 end note ]</p>\n</blockquote>\n", "LastEditorUserId": "14065", "LastActivityDate": "2012-08-27T20:23:23.303", "Score": "10", "CreationDate": "2012-08-27T20:19:53.350", "ParentId": "12148965", "CommentCount": "2", "OwnerUserId": "485561", "LastEditDate": "2012-08-27T20:23:23.303"}});