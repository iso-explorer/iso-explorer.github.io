post_cb({"4242216": {"Id": "4242216", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_4242186_4242216_0\">$3.9/1 - \"There are two kinds of\n  types: fundamental types and compound\n  types. Types describe objects (1.8),\n  references (8.3.2), or functions\n  (8.3.5). ]\"</p>\n</blockquote>\n<p>Fundamental types are char, int, bool and so on.</p>\n<p>Compound types are arrays, enums, classes, references, unions etc</p>\n", "LastActivityDate": "2010-11-22T04:11:30.310", "CommentCount": "0", "CreationDate": "2010-11-22T04:11:30.310", "ParentId": "4242186", "Score": "6", "OwnerUserId": "418110"}, "4242329": {"Id": "4242329", "PostTypeId": "2", "Body": "<p>Other answers address the kinds of types C++ makes available, so I'll address the motivation part. Note that C++ didn't invent the notion of a <em>data type</em>. Quoting from the Wikipedia entry on <a href=\"http://en.wikipedia.org/wiki/Type_system\" rel=\"nofollow\">Type system</a>.</p>\n<blockquote>\n<p id=\"so_4242186_4242329_0\">a type system may be defined as \"a\n  tractable syntactic framework for\n  classifying phrases according to the\n  kinds of values they compute\"</p>\n</blockquote>\n<p>Another interesting definition from the <a href=\"http://en.wikipedia.org/wiki/Data_type\" rel=\"nofollow\">Data Type</a> page:</p>\n<blockquote>\n<p id=\"so_4242186_4242329_1\">a data type (or datatype) is a\n  classification identifying one of\n  various types of data, such as\n  floating-point, integer, or Boolean,\n  stating the possible values for that\n  type, the operations that can be done\n  on that type, and the way the values\n  of that type are stored</p>\n</blockquote>\n<p>Note that this last one is very close to what C++ means by \"type\". Perhaps obvious for the built-in (fundamental) types like <code>bool</code>: </p>\n<ul>\n<li>possible values are <code>true</code> and <code>false</code></li>\n<li>operations - per definition of arithmetic operators that can accept <code>bool</code> as argument</li>\n<li>the way it's stored - actually not mandated by the C++ standard, but one can guess that on some systems a type requiring only a single bit can be stored efficiently (although I think most C++ systems don't do this optimization).</li>\n</ul>\n<p>For more complex, user created, types, the situation is more difficult. Consider <code>enum</code> types: you know exactly the range of values a variable of an <code>enum</code> type can get. What about <code>struct</code> and <code>class</code>? There, also, your type declaration tells the compiler what possible values the <code>struct</code> can have, what operations you can do on it (operator overloading and functions accepting objects of this type), and it will even infer how to store it.</p>\n<p>Re range of values, although huge, remember it's finite. Even a struct with N 32-bit integers has a finite range of possible values, which is <code>2^(32N)</code>. </p>\n", "LastActivityDate": "2010-11-22T04:39:07.620", "CommentCount": "1", "CreationDate": "2010-11-22T04:39:07.620", "ParentId": "4242186", "Score": "3", "OwnerUserId": "8206"}, "4242226": {"Id": "4242226", "PostTypeId": "2", "Body": "<p>A variable contains a value.<br>\nA type is a specification of the value.  (eg, number, text, date, person, truck)</br></p>\n<p>All variables must have a type, because they must hold strictly defined values.</p>\n<p>Types can be built-in primitives (such as <code>int</code>), custom types (such as enums and classes), or some other things.</p>\n", "LastActivityDate": "2010-11-22T04:14:20.627", "CommentCount": "0", "CreationDate": "2010-11-22T04:14:20.627", "ParentId": "4242186", "Score": "5", "OwnerUserId": "34397"}, "bq_ids": {"n4140": {"so_4242186_4242216_0": {"length": 13, "quality": 0.8125, "section_id": 7199}}, "n3337": {"so_4242186_4242216_0": {"length": 13, "quality": 0.8125, "section_id": 6943}}, "n4659": {"so_4242186_4242216_0": {"length": 13, "quality": 0.8125, "section_id": 8708}}}, "45477329": {"Id": "45477329", "PostTypeId": "2", "Body": "<p>Cite from the book <a href=\"http://www.stroustrup.com/programming.html\" rel=\"nofollow noreferrer\">\"Bjarne Stroustrup - Programming Principles and Practice Using C++\"</a>, page 77, chapter 3.8:</p>\n<blockquote id=\"so_4242186_45477329_0\">\n<ul>\n<li>A <strong>type</strong> defines a set of possible values and a set of operations (for an object).</li>\n<li>An <strong>object</strong> is some memory that holds a value of a given type.</li>\n<li>A <strong>value</strong> is a set of bits in memory interpreted according to a type.</li>\n<li>A <strong>variable</strong> is a named object.</li>\n<li>A <strong>declaration</strong> is a statement that gives a name to an object.</li>\n<li>A <strong>definition</strong> is a declaration that sets aside memory for an object.</li>\n</ul>\n</blockquote>\n", "LastEditorUserId": "216129", "LastActivityDate": "2017-08-03T07:41:36.523", "Score": "1", "CreationDate": "2017-08-03T07:15:46.107", "ParentId": "4242186", "CommentCount": "0", "OwnerUserId": "8392919", "LastEditDate": "2017-08-03T07:41:36.523"}, "4242206": {"Id": "4242206", "PostTypeId": "2", "Body": "<p>Sounds like a matter of semantics to me...A type refers to something with a construct that can be used to describe it in a away that conforms to traditional Object Oriented concepts(properties and methods).  Anything that isn't called a type is probably created with a less robust construct.</p>\n", "LastEditorUserId": "399815", "LastActivityDate": "2010-11-22T04:10:34.520", "Score": "0", "CreationDate": "2010-11-22T04:09:56.003", "ParentId": "4242186", "CommentCount": "0", "OwnerUserId": "77538", "LastEditDate": "2010-11-22T04:10:34.520"}, "4242186": {"ViewCount": "174", "Body": "<p>What all constructs(class,struct,union) classify as types in C++? Can anyone explain the rationale behind calling and qualifying certain C++ constructs as a 'type'.</p>\n", "AcceptedAnswerId": "4242226", "Title": "what is a type in C++?", "CreationDate": "2010-11-22T04:05:09.707", "Id": "4242186", "CommentCount": "5", "PostTypeId": "1", "LastActivityDate": "2017-08-03T07:41:36.523", "Score": "2", "OwnerUserId": "452307", "Tags": "<c++><types>", "AnswerCount": "5"}});