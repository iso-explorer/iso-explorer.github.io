post_cb({"8814164": {"ParentId": "8814146", "CommentCount": "0", "Body": "<p>Move the structure definition out of main function.</p>\n<pre><code>   struct a\n    {\n        int i;\n        int j;\n    };\n\nint main()\n{\n\n    std::vector&lt;a*&gt; vecA;\n\n    a* pA = new a;\n\n    pA-&gt;i = 4;\n    pA-&gt;j = 9;\n\n    vecA.push_back(pA);\n</code></pre>\n<p>In C++03 you cannot do this</p>\n<blockquote>\n<p id=\"so_8814146_8814164_0\">A local type, a type with no linkage, an unnamed type or a type compounded from any of these types shall not be used as a template-argument for a template type-parameter.</p>\n</blockquote>\n<p>In C++11 i think you can according to the standard. Even though my Visual Studio 11 compiler refuses to allow it</p>\n", "OwnerUserId": "764882", "PostTypeId": "2", "Id": "8814164", "Score": "6", "CreationDate": "2012-01-11T04:29:10.973", "LastActivityDate": "2012-01-11T04:29:10.973"}, "8814146": {"CommentCount": "2", "ViewCount": "6155", "PostTypeId": "1", "LastEditorUserId": "922184", "CreationDate": "2012-01-11T04:26:35.587", "LastActivityDate": "2012-01-11T04:29:54.377", "Title": "Vector of pointers to struct", "AcceptedAnswerId": "8814167", "LastEditDate": "2012-01-11T04:27:31.117", "Id": "8814146", "Score": "5", "Body": "<p>Following program looks pretty OK to me. But I can not get it compiled.  </p>\n<pre><code>#include    &lt;iostream&gt;\n#include    &lt;vector&gt;\nusing namespace std;\n\nint main()\n{\n    struct a\n    {\n        int i;\n        int j;\n    };\n\n\n    std::vector&lt;a*&gt; vecA;\n\n    a* pA = new a;\n\n    pA-&gt;i = 4;\n    pA-&gt;j = 9;\n\n    vecA.push_back(pA);\n\n    return 0;\n}\n</code></pre>\n<p>It generates following error.</p>\n<pre><code>struct_update.cc: In function \u2018int main()\u2019:\nstruct_update.cc:32:19: error: template argument for \u2018template&lt;class _Alloc&gt; class std::allocator\u2019 uses local type \u2018main()::a*\u2019\nstruct_update.cc:32:19: error:   trying to instantiate \u2018template&lt;class _Alloc&gt; class std::allocator\u2019\nstruct_update.cc:32:19: error: template argument 2 is invalid\nstruct_update.cc:32:25: error: invalid type in declaration before \u2018;\u2019 token\nstruct_update.cc:39:10: error: request for member \u2018push_back\u2019 in \u2018vecA\u2019, which is of non-class type \u2018int\u2019\n</code></pre>\n", "Tags": "<c++><pointers><vector><struct>", "OwnerUserId": "1805129", "AnswerCount": "2"}, "8814167": {"ParentId": "8814146", "CommentCount": "0", "Body": "<p>This isn't true anymore in the new C++11 standard, but current compilers don't fully implement it yet.</p>\n<p>A local type can't be a template parameter.  Move your structure definition above <code>main</code>, and everything will work.</p>\n<p>Or update your compiler to one that supports this part of C++11.</p>\n<p>Here's the restriction from C++03 section 14.3.1 (<code>[temp.arg.type]</code>), which is removed in C++11:</p>\n<blockquote>\n<p id=\"so_8814146_8814167_0\">A local type, a type with no linkage, an unnamed type or a type compounded from any of these types shall not be used as a <em>template-argument</em> for a template <em>type-parameter</em>. </p>\n</blockquote>\n", "OwnerUserId": "103167", "PostTypeId": "2", "Id": "8814167", "Score": "12", "CreationDate": "2012-01-11T04:29:54.377", "LastActivityDate": "2012-01-11T04:29:54.377"}, "bq_ids": {"n4140": {"so_8814146_8814167_0": {"section_id": 7141, "quality": 0.6666666666666666, "length": 8}, "so_8814146_8814164_0": {"section_id": 7141, "quality": 0.6666666666666666, "length": 8}}, "n3337": {"so_8814146_8814167_0": {"section_id": 6885, "quality": 0.6666666666666666, "length": 8}, "so_8814146_8814164_0": {"section_id": 6885, "quality": 0.6666666666666666, "length": 8}}, "n4659": {"so_8814146_8814167_0": {"section_id": 8642, "quality": 0.6666666666666666, "length": 8}, "so_8814146_8814164_0": {"section_id": 8642, "quality": 0.6666666666666666, "length": 8}}}});