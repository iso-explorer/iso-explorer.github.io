post_cb({"46297037": {"ParentId": "46296448", "PostTypeId": "2", "CommentCount": "3", "Body": "<blockquote>\n<p id=\"so_46296448_46297037_0\">\u00a76.4 Selection statements [stmt.select]</p>\n<ol start=\"4\">\n<li>The value of a condition that is an expression is the value of the expression, <strong>contextually converted to bool</strong> for statements other than switch;</li>\n</ol>\n</blockquote>\n<blockquote>\n<p id=\"so_46296448_46297037_1\">\u00a74 Standard conversions [conv]</p>\n<p id=\"so_46296448_46297037_2\">Certain language constructs require that an expression be converted to\n  a Boolean value. An expression e appearing in such a context is said\n  to be <em>contextually converted to bool</em> and is well-formed if and only\n  if the declaration <code>bool t(e);</code> is well-formed, for some invented\n  temporary variable t (8.5).</p>\n</blockquote>\n<p>So the expression of the condition in <code>if</code> must be <strong>contextually convertible to <code>bool</code></strong>, which means that explicit conversions are allowed.</p>\n<p>This is mode most likely done because the condition of <code>if</code> <strong>can only evaluate to  a boolean value</strong>, so by saying <code>if(cond)</code> you are explicitly stating you want <code>cond</code> to be evaluated to a boolean value.</p>\n", "OwnerUserId": "2805305", "LastEditorUserId": "2805305", "LastEditDate": "2017-09-19T09:46:16.633", "Id": "46297037", "Score": "2", "CreationDate": "2017-09-19T09:41:06.097", "LastActivityDate": "2017-09-19T09:46:16.633"}, "bq_ids": {"n4140": {"so_46296448_46297037_2": {"section_id": 3, "quality": 0.9583333333333334, "length": 23}}, "n3337": {"so_46296448_46297037_2": {"section_id": 2, "quality": 0.9583333333333334, "length": 23}}, "n4659": {"so_46296448_46297037_2": {"section_id": 3, "quality": 0.9583333333333334, "length": 23}}}, "46296448": {"CommentCount": "1", "AcceptedAnswerId": "46297037", "PostTypeId": "1", "LastEditorUserId": "3074280", "CreationDate": "2017-09-19T09:15:27.167", "LastActivityDate": "2017-09-19T09:46:16.633", "LastEditDate": "2017-09-19T09:31:11.217", "ViewCount": "33", "FavoriteCount": "1", "Title": "Explicit and implicit conversion", "Id": "46296448", "Score": "1", "Body": "<p>I am pretty surprised that this <code>struct</code>, which is only explicitly convertible to <code>bool</code>, works fine inside a <code>if</code> statement:</p>\n<pre><code>struct A\n{\n    explicit operator bool(  ) const\n    {\n        return m_i % 2 == 0;\n    }\n\n    int m_i;\n};\n\nint main()\n{\n    A a{ 10 };\n\n    if ( a ) // this is considered explicit\n    {\n        bool b = a; // this is considered implicit \n                    // and therefore does not compile           \n    }        \n    return 0;\n}\n</code></pre>\n<p>Why is it so? What is the design reason behind it in the C++ Standard?\nI personally find more explicit the second conversion than the first one. To make it even more clear, I would have expected the compiler forcing to have the following for both the cases:</p>\n<pre><code>int main()\n{\n    A a{ 10 };\n\n    if ( (bool)a )\n    {\n        bool b = (bool)a;\n    }        \n    return 0;\n}\n</code></pre>\n", "Tags": "<c++11><type-conversion><implicit-conversion><explicit><explicit-conversion>", "OwnerUserId": "3074280", "AnswerCount": "1"}});