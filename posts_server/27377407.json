post_cb({"27377407": {"CommentCount": "6", "ViewCount": "235", "OwnerDisplayName": "user3920237", "CreationDate": "2014-12-09T11:06:13.870", "LastActivityDate": "2014-12-09T11:38:42.403", "PostTypeId": "1", "AcceptedAnswerId": "27377684", "Title": "Is #undef'ing a keyword illegal?", "Id": "27377407", "Score": "3", "Body": "<p>I expected the following program to emit a diagnostic in GCC or Clang:</p>\n<pre><code>#undef protected\n#undef private\n</code></pre>\n<p>due to [macro.names]/2:</p>\n<blockquote>\n<p id=\"so_27377407_27377407_0\">A translation unit shall not <code>#define</code> or <code>#undef</code> names lexically\n  identical to keywords, to the identifiers listed in Table 3, or to the\n  <em>attribute-tokens</em> described in 7.6.</p>\n</blockquote>\n<p><code>protected</code> and <code>private</code> are both listed in Table 3. A quick find with \"no diagnostic required\" through  N3337 didn't turn up anything. So are compilers required to complain in this case?</p>\n", "Tags": "<c++>", "AnswerCount": "3"}, "27377522": {"ParentId": "27377407", "CommentCount": "4", "Body": "<p>Yes, but in practice most don't. Clang very recently got a warning.</p>\n", "OwnerUserId": "8922", "PostTypeId": "2", "Id": "27377522", "Score": "0", "CreationDate": "2014-12-09T11:11:32.167", "LastActivityDate": "2014-12-09T11:11:32.167"}, "bq_ids": {"n4140": {"so_27377407_27377407_0": {"section_id": 6306, "quality": 0.7692307692307693, "length": 10}}, "n3337": {"so_27377407_27377407_0": {"section_id": 6063, "quality": 0.7692307692307693, "length": 10}}, "n4659": {"so_27377407_27377407_0": {"section_id": 7817, "quality": 0.7692307692307693, "length": 10}}}, "27377684": {"ParentId": "27377407", "LastEditDate": "2014-12-09T11:38:42.403", "CommentCount": "3", "CreationDate": "2014-12-09T11:19:38.147", "OwnerUserId": "649665", "LastEditorUserId": "649665", "PostTypeId": "2", "Id": "27377684", "Score": "6", "Body": "<p>[macro.names] is part of [reserved.names], which states that \"If a program declares or defines a name in a context where it is reserved, other than as explicitly allowed by\nthis Clause, its behavior is undefined.\"  So it is undefined behavior.</p>\n<p>In practice, most compilers will not complain for two reasons: the first is because pre-processing normally takes place before the compiler evaluates whether a symbol is a keyword or not; it's an earlier phase of translation.  And also because such declarations are only illegal if you actually use the standard library (although other libraries, like Posix or Windows, may and probably do impose similar rules).</p>\n<p>EDIT:</p>\n<p>Just a general comment: although there is no global statement to this\neffect in the standard, there is a general, underlying principle that\nviolation of library constraints is undefined behavior; the intent is\nthat the compiler not need to know anything about the library, and that\nan implementation can treat <code>#include &lt;vector&gt;</code> exactly like\n<code>#include \"MyHeader.hpp\"</code> (except perhaps for where it looks for the\nfile).  And the restrictions cited in the original posting are\nconstraints on programs using the library, and only apply to such\nprograms.  Something like:</p>\n<pre><code>#define while if\nint\nmain( int argc, char** argv )\n{\n    int retval = 0;\n    while ( argc &gt; 0 ) {\n        ++ retval;\n        -- argc;\n    }\n    return retval;\n}\n</code></pre>\n<p>is a perfectly well defined and legal C++ (and C) program, guaranteed to\nreturn 1.  (Of course, I'd not recommend anything like this.)</p>\n", "LastActivityDate": "2014-12-09T11:38:42.403"}, "27377529": {"ParentId": "27377407", "LastEditDate": "2017-05-23T11:43:42.330", "CommentCount": "0", "CreationDate": "2014-12-09T11:11:51.087", "OwnerUserId": "4047092", "LastEditorUserId": "-1", "PostTypeId": "2", "Id": "27377529", "Score": "0", "Body": "<p>It's surely not a good idea to use names reserved for keywords. However, most compiler won't warn you regarding that.</p>\n<p>You can have a look at <a href=\"https://stackoverflow.com/questions/12286691/keywords-redefinition-in-c-c\">Keywords redefinition in C / C++</a>.</p>\n<p>It's on similar lines.</p>\n", "LastActivityDate": "2014-12-09T11:11:51.087"}});