post_cb({"bq_ids": {"n4140": {"so_44788412_44788867_0": {"length": 5, "quality": 0.5555555555555556, "section_id": 5395}, "so_44788412_44788867_1": {"length": 7, "quality": 0.7, "section_id": 5402}, "so_44788412_44788867_2": {"length": 27, "quality": 0.9642857142857143, "section_id": 5882}}, "n3337": {"so_44788412_44788867_0": {"length": 5, "quality": 0.5555555555555556, "section_id": 5189}, "so_44788412_44788867_2": {"length": 27, "quality": 0.9642857142857143, "section_id": 5653}, "so_44788412_44788867_1": {"length": 7, "quality": 0.7, "section_id": 5197}}, "n4659": {"so_44788412_44788867_0": {"length": 8, "quality": 0.8888888888888888, "section_id": 6848}, "so_44788412_44788867_2": {"length": 28, "quality": 1.0, "section_id": 7365}, "so_44788412_44788867_1": {"length": 7, "quality": 0.7, "section_id": 6849}}}, "44788773": {"Id": "44788773", "PostTypeId": "2", "Body": "<p>(NOTE: I reopened this question, as this is NOT a duplicate of the cited older question. That question involved design; this is about syntax).</p>\n<p>Now, referring to the question cited by the OP in his question about <a href=\"https://stackoverflow.com/q/9268542/12725\" title=\"inline in definition and declaration\">inline in definition and declaration</a>, the answer states that if the declaration is in a header file, then it was have the \"inline\" (\"bar style\"), because other source files using that header will try to link to it as if it were a non-inlined function and file.</p>\n<p>Personally, I'd use</p>\n<pre><code> inline int foobar() { return 5; }\n</code></pre>\n<p>in the header file without a separate declaration. (I always feel that if it's too big to be in the header, then it's too big to be inlined.)</p>\n", "LastEditorUserId": "4433546", "LastActivityDate": "2017-06-28T05:12:21.490", "Score": "0", "CreationDate": "2017-06-27T19:53:36.593", "ParentId": "44788412", "CommentCount": "3", "LastEditDate": "2017-06-28T05:12:21.490", "OwnerUserId": "12725"}, "44788867": {"Id": "44788867", "PostTypeId": "2", "Body": "<h1>True for member functions, and not explicitly-defined for non-member functions (I believe)</h1>\n<p>See \u00a710.1.6 in ISO C++ std.</p>\n<blockquote>\n<p id=\"so_44788412_44788867_0\">The inline specifier can be applied only to the declaration or\n  definition of a variable or function</p>\n</blockquote>\n<p>and</p>\n<blockquote>\n<p id=\"so_44788412_44788867_1\">A function declaration (11.3.5, 12.2.1, 14.3) with an inline specifier declares an inline function.</p>\n</blockquote>\n<p>It doesn't explictly state what will happen if an inline specifier only modifies the definition of a function.</p>\n<p>What we can be sure of is that <strong>such <em>member</em> functions are guaranteed to be marked as inline</strong> (thanks to James Curran).</p>\n<p>See \u00a712.2.1.</p>\n<blockquote>\n<p id=\"so_44788412_44788867_2\">An inline member function (whether static or non-static) may also be\n  defined outside of its class definition provided either its\n  declaration in the class definition or its definition outside of the\n  class definition declares the function as inline or constexpr.</p>\n</blockquote>\n<h1>All three functions in GCC and non-member circumstance</h1>\n<p>As in GCC <code>-O1</code> C++ mode, every function mentioned are inlined.</p>\n<p>Code:</p>\n<pre><code>#include \"stdio.h\"\n\nint foo();\ninline int foo() {int i; for(i=0;i&lt;100000;i++); return i+3; }\n\ninline int bar();\nint bar() {int i; for(i=0;i&lt;100000;i++); return i+4; }\n\ninline int foobar();\ninline int foobar() {int i; for(i=0;i&lt;100000;i++); return i+5; }\n\nint foobar2();\nint foobar2() {int i; for(i=0;i&lt;100000;i++); return i+6; }\n\nint main(){\n    int a,b,c,d;\n    a=foo();\n    b=bar();\n    c=foobar();\n    d=foobar2();\n    printf(\"%d %d %d %d\", a, b, c, d);\n}\n</code></pre>\n<p>Disassembly:\n<a href=\"https://i.stack.imgur.com/UccLs.png\" rel=\"nofollow noreferrer\"><img alt=\"IDA\" src=\"https://i.stack.imgur.com/UccLs.png\"/></a></p>\n<p>We can see only <code>foobar2</code> is called.</p>\n<p>As in <code>-O2</code> and <code>-O3</code>, <code>inline</code> doesn't matter so much. The compiler will decide by itself (in the case above, all 4 functions are inlined).</p>\n", "LastEditorUserId": "6452523", "LastActivityDate": "2017-06-27T20:28:25.830", "Score": "1", "CreationDate": "2017-06-27T19:58:53.867", "ParentId": "44788412", "CommentCount": "5", "LastEditDate": "2017-06-27T20:28:25.830", "OwnerUserId": "6452523"}, "44788412": {"ViewCount": "148", "Body": "<p>The following code segment compiles with no problems, even though <code>foo</code> is defined inline but not declared as such, and <code>bar</code> is declared inline but not defined as such.</p>\n<pre><code>int foo();\ninline int foo() { return 3; }\n\ninline int bar();\nint bar() { return 4; }\n\ninline int foobar();\ninline int foobar() { return 5; }\n\nint main(){\n    // ...\n}\n</code></pre>\n<p><strong>My first question</strong>: does the compiler read <code>foo</code> as inline or not? What about <code>bar</code>? Is this specified by the C++ standard?</p>\n<p><strong>My second question</strong>: Which one of these is the best practice in declaring and defining inline functions? Is it <code>foo</code>? <code>bar</code>? or <code>foobar</code>? Why?</p>\n<hr>\n<p>inb4 I read some other posts related to this but none of them answer my question directly.</p>\n<p><a href=\"https://stackoverflow.com/a/9268589/1801530\">This</a> answer seems to suggest that <code>foo</code> is inline, but says nothing about <code>bar</code>. It also doesn't explain <em>why</em> <code>foo</code> is preferred over the others. <a href=\"https://stackoverflow.com/a/1759575/1801530\">This</a> answer talks about when I should use inline functions. That's not my concern: I've already decided to use inline functions. My question (question 2, to be precise) is whether I should declare it as such, define it as such, or both, and why one of the conventions is better style than the rest. <a href=\"https://stackoverflow.com/q/32020122/1801530\">This</a> question seems to be closer to my concern but nobody answered it.</p>\n</hr>", "Title": "C++ inline functions: declare as such, define as such, or both? Why?", "CreationDate": "2017-06-27T19:32:37.527", "LastActivityDate": "2017-06-28T05:12:21.490", "CommentCount": "11", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2017-06-27T20:15:34.417", "LastEditorUserId": "1801530", "Id": "44788412", "Score": "1", "OwnerUserId": "1801530", "Tags": "<c++><inline>", "AnswerCount": "2"}});