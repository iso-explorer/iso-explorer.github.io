post_cb({"4468520": {"ParentId": "4466433", "CommentCount": "10", "Body": "<p>Sadly you cannot. The spec says at 7.1.6.4/3 and follows</p>\n<blockquote>\n<p id=\"so_4466433_4468520_0\">Otherwise, the type of the variable is deduced from its initializer. The name of the variable being declared shall not appear in the initializer expression. This use of auto is allowed when declaring variables in a block (6.3), in namespace scope (3.3.6), and in a for-init-statement (6.5.3).</p>\n<p id=\"so_4466433_4468520_1\">The auto type-specifier can also be used in declaring a variable in the condition of a selection statement (6.4) or an iteration statement (6.5), in the type-speci\ufb01er-seq in the new-type-id or type-id of a new-expression (5.3.4), in a for-range-declaration, and in declaring a static data member with a brace-or-equal-initializer that appears within the member-specification of a class definition (9.4.2).</p>\n<p id=\"so_4466433_4468520_2\">A program that uses auto in a context not explicitly allowed in this section is ill-formed.</p>\n</blockquote>\n<p>I'm not sure why they forbid <code>auto</code> for non-static data members, it would be quite handy. </p>\n", "OwnerUserId": "34509", "PostTypeId": "2", "Id": "4468520", "Score": "12", "CreationDate": "2010-12-17T07:26:42.403", "LastActivityDate": "2010-12-17T07:26:42.403"}, "4466433": {"CommentCount": "3", "ViewCount": "530", "PostTypeId": "1", "LastEditorUserId": "34509", "CreationDate": "2010-12-16T23:40:03.487", "LastActivityDate": "2011-10-01T14:01:28.173", "Title": "Is it possible to do the following with auto in C++0x?", "AcceptedAnswerId": "4468520", "LastEditDate": "2011-10-01T14:01:28.173", "Id": "4466433", "Score": "8", "Body": "<p>Eric Lippert has written an article about <a href=\"http://blogs.msdn.com/b/ericlippert/archive/2009/01/26/why-no-var-on-fields.aspx\" rel=\"nofollow\">Why no var on fields?</a> in C#. I was curious, will we be able to do that in C++0x? ex.</p>\n<pre><code>struct mystruct_t\n{\n   auto i = 0, d = 0.0, s = std::string(\"zero\");\n};\n</code></pre>\n<p>I couldn't reach an answer through the latest draft, sorry.</p>\n<p>Thanks,</p>\n", "Tags": "<c++><class><c++11><type-inference>", "OwnerUserId": "127893", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_4466433_4468520_2": {"section_id": 5450, "quality": 1.0, "length": 7}, "so_4466433_4468520_1": {"section_id": 5449, "quality": 0.6206896551724138, "length": 18}}, "n3337": {"so_4466433_4468520_2": {"section_id": 5244, "quality": 1.0, "length": 7}, "so_4466433_4468520_0": {"section_id": 5242, "quality": 0.8148148148148148, "length": 22}, "so_4466433_4468520_1": {"section_id": 5243, "quality": 0.6551724137931034, "length": 19}}, "n4659": {"so_4466433_4468520_2": {"section_id": 6877, "quality": 1.0, "length": 7}}}});