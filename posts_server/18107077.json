post_cb({"18107132": {"CommentCount": "3", "Body": "<p>Put</p>\n<pre><code>const int A::a;\n</code></pre>\n<p>In the source file, otherwise the compiler doesn't generate an address for a. Note the value is not repeated here.</p>\n", "CreationDate": "2013-08-07T15:11:42.267", "ParentId": "18107077", "Id": "18107132", "LastActivityDate": "2013-08-07T15:11:42.267", "PostTypeId": "2", "Score": "10", "OwnerUserId": "2068573"}, "18107077": {"CreationDate": "2013-08-07T15:09:38.167", "ViewCount": "148", "FavoriteCount": "0", "Id": "18107077", "AcceptedAnswerId": "18107132", "Score": "1", "Title": "How to access the address of a static const member of a class?", "CommentCount": "3", "Body": "<p>This code does't compile, and the error information is \"<strong>undefined reference to `A::a'</strong>\":</p>\n<p>code 1:</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass A\n{\npublic:\n    static const int a=0;\n};\n\nint main()\n{\n    cout&lt;&lt;&amp;A::a&lt;&lt;endl;\n    return 0;\n}\n</code></pre>\n<p>But for a non-const static member it compiles:</p>\n<p>code 2:</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass A\n{\npublic:\n    static int a;\n};\nint A::a=0;\n\nint main()\n{\n    cout&lt;&lt;&amp;A::a&lt;&lt;endl;\n    return 0;\n}\n</code></pre>\n<p>Is there just no way of accessing the address of a static const member of a class? If there is, how? And why code 1 does not compile?</p>\n", "Tags": "<c++>", "LastActivityDate": "2013-08-07T15:35:03.040", "PostTypeId": "1", "AnswerCount": "3", "OwnerUserId": "2658195"}, "bq_ids": {"n4140": {"so_18107077_18107129_1": {"length": 57, "quality": 0.890625, "section_id": 5908}}, "n3337": {"so_18107077_18107129_1": {"length": 57, "quality": 0.890625, "section_id": 5680}}}, "18107129": {"LastActivityDate": "2013-08-07T15:34:52.353", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_18107077_18107129_0\">This code does't compile</p>\n</blockquote>\n<p>The code does not <em>link</em>, it does compile.\nThe <code>static const</code> member requires a <em>definition</em> if its address is to be used, so just add a definition similar to the second code snippet:</p>\n<pre><code>const int A::a;\n</code></pre>\n<p>Taking the address of <code>A::a</code> means <code>A::a</code> is <a href=\"http://en.wikipedia.org/wiki/One_Definition_Rule\" rel=\"nofollow\">odr</a>-used, and from section <em>9.4.2 Static data members</em> of the C++11 standard (draft n3337), clause 3:</p>\n<blockquote>\n<p id=\"so_18107077_18107129_1\"><strong>If a non-volatile const static data member is of integral or enumeration type</strong>, its declaration in the class\n  definition can specify a brace-or-equal-initializer in which every initializer-clause that is an assignment expression\n  is a constant expression (5.19). A static data member of literal type can be declared in the\n  class definition with the constexpr specifier; if so, its declaration shall specify a brace-or-equal-initializer\n  in which every initializer-clause that is an assignment-expression is a constant expression. [ Note: In both\n  these cases, the member may appear in constant expressions. \u2014end note ] <strong>The member shall still be defined\n  in a namespace scope if it is odr-used</strong> (3.2) in the program and the namespace scope definition shall not\n  contain an initializer.</p>\n</blockquote>\n", "CreationDate": "2013-08-07T15:11:38.673", "LastEditDate": "2013-08-07T15:34:52.353", "ParentId": "18107077", "Id": "18107129", "LastEditorUserId": "1033896", "PostTypeId": "2", "Score": "8", "OwnerUserId": "1033896"}, "18107156": {"LastActivityDate": "2013-08-07T15:35:03.040", "CommentCount": "0", "Body": "<p>Since you want to take the address, you still need to define the static member, as you do for the non-const version where you say</p>\n<pre><code>int A::a;\n</code></pre>\n<p>For the <code>const</code> version you also need</p>\n<pre><code>const int A::a;\n</code></pre>\n<p>See <a href=\"https://stackoverflow.com/questions/9219898/why-can-you-initialize-a-static-const-variable-inline-but-not-a-plain-static-c\">here</a> for a good discussion - headline quote\n\"compile-time constants don't have addresses.\"</p>\n", "CreationDate": "2013-08-07T15:13:16.743", "LastEditDate": "2017-05-23T11:50:13.407", "ParentId": "18107077", "Id": "18107156", "LastEditorUserId": "-1", "PostTypeId": "2", "Score": "1", "OwnerUserId": "1055118"}});