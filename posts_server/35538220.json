post_cb({"bq_ids": {"n4140": {"so_35538220_35538308_0": {"length": 31, "quality": 0.8611111111111112, "section_id": 1922}}, "n3337": {"so_35538220_35538308_0": {"length": 31, "quality": 0.8611111111111112, "section_id": 1911}}, "n4659": {"so_35538220_35538308_0": {"length": 31, "quality": 0.8611111111111112, "section_id": 2193}}}, "35538308": {"Id": "35538308", "PostTypeId": "2", "Body": "<p>It is safe to access standard <a href=\"http://en.cppreference.com/w/cpp/io/cin\" rel=\"nofollow\">input</a> and <a href=\"http://en.cppreference.com/w/cpp/io/cout\" rel=\"nofollow\">output</a> streams as long as they are synchronized with C-streams (their default state). However output (and input) might be interleaved if you do not use any means to prevent simultaneous access.</p>\n<blockquote>\n<p id=\"so_35538220_35538308_0\"><strong>27.4.1/4</strong>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[iostream.objects.overview]<br>\n  Concurrent access to a synchronized standard iostream object\u2019s formatted and unformatted input and output functions or a standard C stream by multiple threads shall not result in a data race. [ <em>Note: Users must still synchronize concurrent use of these objects and streams by\n  multiple threads if they wish to avoid interleaved characters. \u2014end note</em> ]</br></p>\n</blockquote>\n", "LastEditorUserId": "3410396", "LastActivityDate": "2016-02-21T16:06:22.933", "Score": "0", "CreationDate": "2016-02-21T15:57:22.560", "ParentId": "35538220", "CommentCount": "0", "LastEditDate": "2016-02-21T16:06:22.933", "OwnerUserId": "3410396"}, "35538220": {"ViewCount": "88", "Body": "<p>Let's consider the following code:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;thread&gt;\nint main()\n{\n    std::thread t1([](){\n        int a;\n        std::cin &gt;&gt; a;\n        std::cout &lt;&lt; \"T1: \" &lt;&lt; a &lt;&lt; std::endl;\n    });\n    std::thread t2([](){\n        int a;\n        std::cin &gt;&gt; a;\n        std::cout &lt;&lt; \"T2: \" &lt;&lt; a &lt;&lt; std::endl;\n    });\n\n\n    t1.join();\n    t2.join();\n    return 0;\n}\n</code></pre>\n<p>Compiled with: <code>g++ -std=c++14 -pthread main.cpp -o main</code>\nRun with: <code>./main &lt; file.txt</code></p>\n<p>file.txt: </p>\n<pre><code>1 2\n</code></pre>\n<p>The outputs are different ( I supposed so), for example:</p>\n<pre><code>T1: T2: 12\n\n    T1: 1T2: \n2\n\nT1: 12\nT2: 0\n</code></pre>\n<p>and so on.</p>\n<p>I suppose that code causes undefined behaviour? Am I right? \nAnd how to solve/explain situation when two threads try use the same ( ? ) input/output?</p>\n", "AcceptedAnswerId": "35538308", "Title": "Two threads blocking on I/O", "CreationDate": "2016-02-21T15:48:55.110", "Id": "35538220", "CommentCount": "5", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2016-02-21T16:06:22.933", "Score": "2", "OwnerUserId": "5382150", "Tags": "<c++><multithreading><c++11>", "AnswerCount": "1"}});