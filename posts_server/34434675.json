post_cb({"34434814": {"ParentId": "34434675", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>A function type in C++ may not have a return type that is a function type, by [dcl.fct]/10:</p>\n<blockquote>\n<p id=\"so_34434675_34434814_0\">Functions shall not have a return type of type array or function, although they may have a return type of type pointer or reference to such things.</p>\n</blockquote>\n<p>So when <code>FuncType</code> is deduced as a function type, the purported type <code>FuncType(Args...)</code> is ill-formed.</p>\n", "OwnerUserId": "596781", "LastEditorUserId": "596781", "LastEditDate": "2015-12-23T13:04:42.610", "Id": "34434814", "Score": "3", "CreationDate": "2015-12-23T11:35:42.107", "LastActivityDate": "2015-12-23T13:04:42.610"}, "34434675": {"CommentCount": "0", "AcceptedAnswerId": "34434814", "PostTypeId": "1", "LastEditorUserId": "596781", "CreationDate": "2015-12-23T11:27:42.217", "LastActivityDate": "2015-12-23T13:14:28.363", "LastEditDate": "2015-12-23T13:14:28.363", "ViewCount": "47", "FavoriteCount": "0", "Title": "result_of fails to deduce return type", "Id": "34434675", "Score": "2", "Body": "<p>The following code fails to compile in GCC 5.2:</p>\n<pre><code>template&lt;typename FuncType, typename... ArgTypes&gt;\nresult_of_t&lt;FuncType(ArgTypes...)&gt; FuncCall(const FuncType &amp;f, ArgTypes&amp;... args)\n{\n    return f(forward&lt;ArgTypes&gt;(args)...);\n}\n\nstring SomeFunc()\n{\n    return \"SomeFunc\";\n}\n\nint main()\n{\n    cout &lt;&lt; FuncCall([](){return \"Lambda\";}) &lt;&lt; \"\\n\"; // This call works properly\n    cout &lt;&lt; FuncCall(SomeFunc) &lt;&lt; \"\\n\"; // this call fails\n}\n</code></pre>\n<p>But if I change the following line:</p>\n<pre><code>result_of_t&lt;FuncType(ArgTypes...)&gt; FuncCall(const FuncType &amp;f, ArgTypes&amp;... args)\n</code></pre>\n<p>To</p>\n<pre><code>result_of_t&lt;FuncType&amp;&amp;(ArgTypes...)&gt; FuncCall(const FuncType &amp;f, ArgTypes&amp;... args)\n</code></pre>\n<p>Then it works properly.</p>\n<p>I don't understand how making FuncType rvalue reference in this case solves the problem. Can anyone share some light on this ?</p>\n", "Tags": "<c++><templates><types><typetraits>", "OwnerUserId": "2790081", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_34434675_34434814_0": {"section_id": 3244, "quality": 1.0, "length": 18}}, "n3337": {"so_34434675_34434814_0": {"section_id": 3117, "quality": 1.0, "length": 18}}, "n4659": {"so_34434675_34434814_0": {"section_id": 4002, "quality": 1.0, "length": 18}}}});