post_cb({"bq_ids": {"n4140": {"so_48809894_48809969_3": {"length": 20, "quality": 1.0, "section_id": 3287}, "so_48809894_48809969_7": {"length": 10, "quality": 1.0, "section_id": 3325}, "so_48809894_48809969_1": {"length": 4, "quality": 1.0, "section_id": 3287}, "so_48809894_48809969_5": {"length": 6, "quality": 1.0, "section_id": 3325}, "so_48809894_48809969_2": {"length": 14, "quality": 0.9333333333333333, "section_id": 3287}}, "n3337": {"so_48809894_48809969_7": {"length": 9, "quality": 0.9, "section_id": 3195}, "so_48809894_48809969_1": {"length": 4, "quality": 1.0, "section_id": 3157}, "so_48809894_48809969_5": {"length": 6, "quality": 1.0, "section_id": 3195}, "so_48809894_48809969_2": {"length": 10, "quality": 0.6666666666666666, "section_id": 3157}}, "n4659": {"so_48809894_48809969_7": {"length": 10, "quality": 1.0, "section_id": 4091}, "so_48809894_48809969_3": {"length": 20, "quality": 1.0, "section_id": 4049}, "so_48809894_48809969_5": {"length": 6, "quality": 1.0, "section_id": 4091}, "so_48809894_48809969_2": {"length": 14, "quality": 0.9333333333333333, "section_id": 4049}}}, "48809894": {"ViewCount": "1370", "Body": "<p>I'm having trouble understanding when and why exactly a member in my class is zero-initialized according to <a href=\"http://en.cppreference.com/w/cpp/language/zero_initialization\" rel=\"noreferrer\">http://en.cppreference.com/w/cpp/language/zero_initialization</a>.</p>\n<p>Consider the following test program:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;stdio.h&gt;\n\nclass MyTest {\nprivate:\n    const static unsigned int dimension = 8;\n    void (* myFunctions [dimension])();\n\npublic: \n    MyTest() {}\n\n    void print() { \n        for(unsigned int i=0; i &lt; MyTest::dimension; i++) {\n            printf(\"myFunctions[%d] = %p\\n\", i, this-&gt;myFunctions[i]);\n        }   \n    }\n};\n\n\nint main() {\n    //We declare and initialize an object on the stack \n    MyTest testObj = {};\n    testObj.print();\n\n    return 0;\n}\n</code></pre>\n<p>I am declaring a class to have an array of 8 function pointers of the signature \"void functionname()\". When I declare and initialize an object of the class in <code>main</code> as <code>MyTest testObj = {};</code> or <code>MyTest testObj;</code>, I expected it to be zero-initialized, i.e. all pointers are null pointers.</p>\n<p>However, compiling with g++ 5.3.0 on my Windows 10 machine with <code>g++ -m32 -o test -std=c++14 test.cpp &amp;&amp; test</code> machine gives the output:</p>\n<pre><code>myFunctions[0] = 76dd6b7d\nmyFunctions[1] = 00401950\nmyFunctions[2] = 0061ff94\nmyFunctions[3] = 004019ab\nmyFunctions[4] = 00401950\nmyFunctions[5] = 00000000\nmyFunctions[6] = 003cf000\nmyFunctions[7] = 00400080\n</code></pre>\n<p>Which look like un-initialized values from the stack.. </p>\n<p>If I move the declaration of the object outside of main (as a global variable), it prints all zeroes again. </p>\n<p>If I have understood cppreference correctly, this is because I have a variariable with static storage duration, and is thus zero-initialized. It initializes my class type by zero-initializing all non-static data members of my class (i.e., the <code>myFunctions</code>) array. An array is initialized by zero-initializing every element of it, which, in my function pointer case, is a null pointer.</p>\n<p>Why does it not zero-initialize my object the stack when I declare it with <code>MyTest testObj = {};</code>? </p>\n", "AcceptedAnswerId": "48809969", "Title": "C++ Zero-Initialization", "CreationDate": "2018-02-15T14:44:21.833", "LastActivityDate": "2018-02-15T20:10:19.017", "CommentCount": "5", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2018-02-15T15:41:57.077", "LastEditorUserId": "5296568", "Id": "48809894", "Score": "18", "OwnerUserId": "5296568", "Tags": "<c++><c++14><zero-initialization>", "AnswerCount": "1"}, "48809969": {"Id": "48809969", "PostTypeId": "2", "Body": "<p>The following</p>\n<pre><code>MyTest testObj = {};\n</code></pre>\n<p>is <strong>not</strong> zero-initialization for <code>MyTest</code>, but is simply calling its default constructor. The <em>cppreference</em> page explains why (emphasis mine):</p>\n<blockquote>\n<p id=\"so_48809894_48809969_0\">As part of value-initialization sequence <strong>for non-class types and for members of value-initialized class types that have no constructors</strong>, including value initialization of elements of aggregates for which no initializers are provided.</p>\n</blockquote>\n<p><code>MyTest</code> is a class type, and a has a constructor.</p>\n<hr>\n<p>Defining the constructor with</p>\n<pre><code>MyTest() = default;\n</code></pre>\n<p>will instead <em>zero-initialize</em> the object.</p>\n<p>Relevant Standard quotes (emphasis mine) below.</p>\n<p>From <a href=\"http://eel.is/c++draft/dcl.init#6\" rel=\"noreferrer\">[dcl.init#6]</a>:</p>\n<blockquote>\n<p id=\"so_48809894_48809969_1\">To value-initialize an object of type T means: </p>\n<ul>\n<li><p id=\"so_48809894_48809969_2\">if T is a (possibly cv-qualified) class type with either no default constructor ([class.ctor]) or a default constructor that is user-provided or deleted, then the object is default-initialized;</p></li>\n<li><p id=\"so_48809894_48809969_3\"><strong>if T is a</strong> (possibly cv-qualified) <strong>class type without a user-provided or deleted default constructor, then the object is zero-initialized</strong> and the semantic constraints for default-initialization are checked, and if T has a non-trivial default constructor, the object is default-initialized;</p></li>\n<li><p id=\"so_48809894_48809969_4\">... </p></li>\n</ul>\n</blockquote>\n<p>From <a href=\"http://eel.is/c++draft/dcl.init.list\" rel=\"noreferrer\">[dcl.init.list]</a>:</p>\n<blockquote>\n<p id=\"so_48809894_48809969_5\">List-initialization of an object or reference of type T is defined as follows:</p>\n<ul>\n<li><p id=\"so_48809894_48809969_6\">...</p></li>\n<li><p id=\"so_48809894_48809969_7\"><strong>Otherwise, if the initializer list has no elements and T is a class type with a default constructor, the object is value-initialized.</strong></p></li>\n</ul>\n</blockquote>\n</hr>", "LastEditorUserId": "598696", "LastActivityDate": "2018-02-15T20:10:19.017", "Score": "26", "CreationDate": "2018-02-15T14:49:32.163", "ParentId": "48809894", "CommentCount": "8", "OwnerUserId": "598696", "LastEditDate": "2018-02-15T20:10:19.017"}});