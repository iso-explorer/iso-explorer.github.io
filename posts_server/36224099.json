post_cb({"bq_ids": {"n4140": {"so_36224099_36224537_0": {"length": 22, "quality": 1.0, "section_id": 7059}}, "n3337": {"so_36224099_36224537_0": {"length": 22, "quality": 1.0, "section_id": 6803}}, "n4659": {"so_36224099_36224537_0": {"length": 22, "quality": 1.0, "section_id": 8556}}}, "36224099": {"ViewCount": "140", "Body": "<p>I am new to C++ and just try out stuff. I stuck with the following code:</p>\n<pre><code>#include&lt;iostream&gt;  \n\nvoid t(){\n    std::cout &lt;&lt; \"func t()\" &lt;&lt; std::endl;\n}\n\nint main(int argc, char **argv) {\n    int t(); //declaration of function\n    std::cout &lt;&lt; t() &lt;&lt; std::endl;\n}\n</code></pre>\n<p>The output is \"func t()\\n6295712\". My concern is the random(?) number printed by t().   </p>\n<p>My question is: Why is it allowed to declare a function of another return-type (here: int instead of void) without any error? Is this not a violation of type safety because I never defined a function with a return-type \"int\"?</p>\n<p>Used compiler: gcc (Ubuntu 4.8.4-2ubuntu1~14.04.1) 4.8.4</p>\n", "AcceptedAnswerId": "36224537", "Title": "Violation of type safety in C++ with function declaration of other type?", "CreationDate": "2016-03-25T16:40:04.697", "Id": "36224099", "CommentCount": "6", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2016-03-25T16:46:40.073", "LastEditorUserId": "3832976", "LastActivityDate": "2016-03-26T16:51:06.773", "Score": "7", "OwnerUserId": "3832976", "Tags": "<c++><type-conversion><type-safety>", "AnswerCount": "1"}, "36224537": {"Id": "36224537", "PostTypeId": "2", "Body": "<p>The only relevant thing I can find is a note in <a href=\"http://eel.is/c++draft/basic.scope.pdecl#11\" rel=\"nofollow\">[basic.scope.pdecl]</a>:</p>\n<blockquote>\n<p id=\"so_36224099_36224537_0\">Function declarations at block scope and variable declarations with the extern specifier at block scope refer to declarations that are members of an enclosing namespace, but they do not introduce new names into that scope.</p>\n</blockquote>\n<p>So when you write:</p>\n<pre><code>void t();\n\nint main() {\n    int t();  // *\n}\n</code></pre>\n<p>That inner declaration refers to a member of the enclosing namespace. So it's equivalent to having written:</p>\n<pre><code>void t();\nint t();\n\nint main() {}\n</code></pre>\n<p>But functions cannot overload solely in return type, so this code is ill-formed. Clang rejects both programs, gcc only rejects the latter. I believe this is a gcc bug. </p>\n", "LastEditorUserId": "2069064", "LastActivityDate": "2016-03-26T16:51:06.773", "Score": "4", "CreationDate": "2016-03-25T17:09:32.307", "ParentId": "36224099", "CommentCount": "3", "OwnerUserId": "2069064", "LastEditDate": "2016-03-26T16:51:06.773"}});