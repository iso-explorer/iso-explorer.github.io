post_cb({"3814930": {"ParentId": "3814865", "CommentCount": "0", "Body": "<p>Seems like it's a question from a classroom, so I'll invite you to check the documentation on how to create a class.</p>\n<pre><code>class Foo\n{\npublic\n    Foo() {} // Constructor\n\n    Foo operator++ {} // Operation ++ on foo like:\n    // Foo foo;\n    // foo++;\n};\n</code></pre>\n", "OwnerUserId": "167897", "PostTypeId": "2", "Id": "3814930", "Score": "3", "CreationDate": "2010-09-28T16:25:25.670", "LastActivityDate": "2010-09-28T16:25:25.670"}, "3814865": {"CommentCount": "5", "AcceptedAnswerId": "3815055", "PostTypeId": "1", "LastEditorDisplayName": "Roger Pate", "CreationDate": "2010-09-28T16:18:02.723", "LastActivityDate": "2010-10-05T02:47:23.997", "LastEditDate": "2010-10-05T01:32:52.320", "ViewCount": "28753", "FavoriteCount": "8", "Title": "What is an \"operator int\" function?", "Id": "3814865", "Score": "23", "Body": "<p>What is the \"operator int\" function below? What does it do?</p>\n<pre><code>class INT\n{\n   int a;\n\npublic:\n   INT(int ix = 0)\n   {\n      a = ix;\n   }\n\n   /* Starting here: */\n   operator int()\n   {\n      return a;\n   }\n   /* End */\n\n   INT operator ++(int)\n   {\n      return a++;\n   }\n};\n</code></pre>\n", "Tags": "<c++><terminology><conversion-operator>", "OwnerUserId": "457065", "AnswerCount": "5"}, "3815055": {"ParentId": "3814865", "CommentCount": "0", "Body": "<p>The bolded code is a conversion operator. (AKA <a href=\"http://msdn.microsoft.com/en-us/library/ts48df3y(v=vs.80).aspx\" rel=\"noreferrer\">cast operator</a>)</p>\n<p>It gives you a way to convert from your custom <code>INT</code> type to another type (in this case, <code>int</code>) without having to call a special conversion function explicitly.</p>\n<p>For example, with the convert operator, this code will compile:</p>\n<pre><code>INT i(1234);\nint i_2 = i; // this will implicitly call INT::operator int()\n</code></pre>\n<p>Without the convert operator, the above code won't compile, and you would have to do something else to go from an <code>INT</code> to an <code>int</code>, such as:</p>\n<pre><code>INT i(1234);\nint i_2 = i.a;  // this wont compile because a is private\n</code></pre>\n", "OwnerUserId": "241536", "PostTypeId": "2", "Id": "3815055", "Score": "24", "CreationDate": "2010-09-28T16:44:48.173", "LastActivityDate": "2010-09-28T16:44:48.173"}, "3814905": {"ParentId": "3814865", "CommentCount": "0", "Body": "<p>It looks like it make an INT class which behaves a little like the regular int, just that some other operators are not yet defined.</p>\n<p>Is this a homework problem?</p>\n", "OwnerUserId": "139885", "PostTypeId": "2", "Id": "3814905", "Score": "4", "CreationDate": "2010-09-28T16:22:32.070", "LastActivityDate": "2010-09-28T16:22:32.070"}, "3815065": {"ParentId": "3814865", "CommentCount": "0", "Body": "<p><code>operator int()</code> is a <em>conversion operator</em>, which allows this class to be used in place of an <code>int</code>. If an object of this type is used in a place where an <code>int</code> (or other numerical type) is expected, then this code will be used to get a value of the correct type.</p>\n<p>For example:</p>\n<pre><code>int i(1);\nINT I(2); // Initialised with constructor; I.a == 2\ni = I;    // I is converted to an int using `operator int()`, returning 2.\n</code></pre>\n", "OwnerUserId": "204847", "PostTypeId": "2", "Id": "3815065", "Score": "15", "CreationDate": "2010-09-28T16:46:04.007", "LastActivityDate": "2010-09-28T16:46:04.007"}, "bq_ids": {"n4140": {"so_3814865_3860424_1": {"section_id": 391, "quality": 0.875, "length": 7}, "so_3814865_3860424_0": {"section_id": 388, "quality": 0.8888888888888888, "length": 16}, "so_3814865_3860424_3": {"section_id": 391, "quality": 0.9629629629629629, "length": 26}}, "n3337": {"so_3814865_3860424_1": {"section_id": 382, "quality": 0.875, "length": 7}, "so_3814865_3860424_0": {"section_id": 379, "quality": 0.8888888888888888, "length": 16}, "so_3814865_3860424_3": {"section_id": 382, "quality": 0.9629629629629629, "length": 26}}, "n4659": {"so_3814865_3860424_1": {"section_id": 408, "quality": 0.875, "length": 7}, "so_3814865_3860424_0": {"section_id": 405, "quality": 0.8888888888888888, "length": 16}, "so_3814865_3860424_3": {"section_id": 408, "quality": 0.6666666666666666, "length": 18}}}, "3860424": {"ParentId": "3814865", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>First things first:</p>\n<blockquote>\n<p id=\"so_3814865_3860424_0\">$12.3.1/1 - \"A constructor declared\n  without the function-specifier\n  explicit specifies a conversion from\n  the types of its parameters to the\n  type of its class. Such a constructor\n  is called a converting constructor.\"</p>\n</blockquote>\n<p>In your example, INT is a User Defined class that has a converting constructor from 'int'.</p>\n<p>Therefore the following code is well-formed:</p>\n<pre><code>INT i(1024);     // direct initialization syntax\n</code></pre>\n<p>This means that you can get an INT object from an integer. However what does one do, if the INT object has to be converted back to an integer? Transitivity?</p>\n<p>One can say that the class INT can provide a member function to return the encapsulated integer member</p>\n<pre><code>int x = i.geta();\n</code></pre>\n<p>This however is not very intuitive and is not a standardized approach. Also it is not intuitive when it comes to how built-in types work in such situations.</p>\n<pre><code>int z = 0;\nint y1 = z; // copy initialization or\nint y2(z);  // direct initialization\ndouble d = (int )z; // explicit cast\n</code></pre>\n<p>Therefor the Standard allows for such standardization and intuitiveness of converting User Defined Types by saying:</p>\n<blockquote>\n<p id=\"so_3814865_3860424_1\">$12.3/2 - \"A member function of a\n  class X having no parameters with a\n  name of the form [...] </p>\n<p id=\"so_3814865_3860424_2\"><strong>operator conversion-type-id</strong></p>\n<p id=\"so_3814865_3860424_3\">[...]specifies a conversion from X to the\n  type specified by the\n  conversion-type-id. Such functions are\n  called conversion functions. No return\n  type can be specified. If a conversion\n  function is a member function, the\n  type of the conversion function\n  (8.3.5) is \u201cfunction taking no\n  parameter returning\n  conversion-type-id\u201d.</p>\n</blockquote>\n<p>This makes all of the following well-formed and <strong>retains harmony with the way built-in types work</strong> is</p>\n<pre><code>int y1 = i; // copy initialization or\nint y2(i);  // direct initialization\ndouble d = (int )i; // explicit cast\n</code></pre>\n", "OwnerUserId": "418110", "LastEditorUserId": "418110", "LastEditDate": "2010-10-05T02:47:23.997", "Id": "3860424", "Score": "4", "CreationDate": "2010-10-05T02:11:51.383", "LastActivityDate": "2010-10-05T02:47:23.997"}});