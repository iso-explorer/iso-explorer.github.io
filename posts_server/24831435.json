post_cb({"bq_ids": {"n4140": {"so_24831435_24831570_0": {"length": 12, "quality": 0.8571428571428571, "section_id": 7240}, "so_24831435_24831435_0": {"length": 46, "quality": 0.9387755102040817, "section_id": 7177}}, "n3337": {"so_24831435_24831570_0": {"length": 12, "quality": 0.8571428571428571, "section_id": 6984}, "so_24831435_24831435_0": {"length": 46, "quality": 0.9387755102040817, "section_id": 6921}}, "n4659": {"so_24831435_24831570_0": {"length": 10, "quality": 0.7142857142857143, "section_id": 8749}, "so_24831435_24831435_0": {"length": 43, "quality": 0.8775510204081632, "section_id": 8685}}}, "24831500": {"Id": "24831500", "PostTypeId": "2", "Body": "<p>Alignment is defined by the OS and platform. Usually it is the size of the largest basic type (a pointer or <code>double</code>), but it could be more. For instance, on Windows, x86 is 8 byte and x64 is 16 byte.</p>\n", "LastActivityDate": "2014-07-18T18:24:59.397", "CommentCount": "2", "CreationDate": "2014-07-18T18:24:59.397", "ParentId": "24831435", "Score": "2", "OwnerUserId": "3849688"}, "24831656": {"Id": "24831656", "PostTypeId": "2", "Body": "<p>This means that for any complete object type with a fundamental alignment, it should be possible to convert the pointer returned to a pointer to that object type, respecting the alignment requirement of that object type.</p>\n<p>In practice, since alignments are powers of two, this means that an allocation function is required to return a pointer aligned to <code>alignof(std::max_align_t)</code>.</p>\n<p>There is no separate definition of \"suitable alignment\"; in this paragraph as elsewhere \"suitably\" just means that there is a requirement which the program is required to satisfy for the rest of the paragraph to hold.</p>\n", "LastActivityDate": "2014-07-18T18:35:40.807", "CommentCount": "2", "CreationDate": "2014-07-18T18:35:40.807", "ParentId": "24831435", "Score": "3", "OwnerUserId": "567292"}, "24831570": {"Id": "24831570", "PostTypeId": "2", "Body": "<p>\u00a73.11/1 says,</p>\n<blockquote>\n<p id=\"so_24831435_24831570_0\">Object types have alignment requirements (3.9.1, 3.9.2) which place restrictions on the addresses at which an\n  object of that type may be allocated.</p>\n</blockquote>\n<p>So if a pointer is \"suitably aligned\" it means that the address represented by the pointer satisfies these restrictions. What exactly this means for the numerical value of the address is implementation-defined.</p>\n", "LastActivityDate": "2014-07-18T18:30:09.913", "CommentCount": "2", "CreationDate": "2014-07-18T18:30:09.913", "ParentId": "24831435", "Score": "3", "OwnerUserId": "481267"}, "24831435": {"ViewCount": "174", "Body": "<p>I not understood <strong><em>suitable</em></strong> pointer alignment</p> concept:\n<blockquote>\n<p id=\"so_24831435_24831435_0\">There are no constraints on the contents of the allocated storage on\n  return from the allocation function. The order, contiguity, and\n  initial value of storage allocated by successive calls to an\n  allocation function are unspecified. The pointer returned shall be\n  <strong><em>suitably aligned</em></strong> so that it can be converted to a pointer of any\n  complete object type with a fundamental alignment requirement (3.11)\n  and then used to access the object or array in the storage allocated\n  (until the storage is explicitly deallocated by a call to a\n  corresponding deallocation function).</p>\n</blockquote>\n<p>There is no definition of suitable alignment in the <strong>sec.3.11</strong>. You explain that should mean?</p>\n", "AcceptedAnswerId": "24831656", "Title": "Allocation function and pointer to returned", "CreationDate": "2014-07-18T18:20:29.467", "Id": "24831435", "CommentCount": "5", "PostTypeId": "1", "LastActivityDate": "2014-07-18T18:35:40.807", "Score": "2", "OwnerUserId": "2786156", "Tags": "<c++><c><pointers><memory-management>", "AnswerCount": "3"}});