post_cb({"35987896": {"ParentId": "35987493", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Standard C does not support this construction:</p>\n<blockquote>\n<p id=\"so_35987493_35987896_0\"><strong>C11 6.8.6.4: The <code>return</code> statement</strong></p>\n<p id=\"so_35987493_35987896_1\">Constraints</p>\n<p id=\"so_35987493_35987896_2\">1 A <code>return</code> statement with an expression shall not appear in a function whose return type is <code>void</code>. A <code>return</code> statement without an expression shall only appear in a function whose return type is <code>void</code>.</p>\n</blockquote>\n<p>No special provisions are added for the special case in the question.  Some C compilers do support this as an extension (<code>gcc</code> does, unless instructed to conform to one of the C Standards), but C11 and previous versions consider it a constraint violation.</p>\n", "OwnerUserId": "4593267", "LastEditorUserId": "4593267", "LastEditDate": "2016-03-14T12:51:49.843", "Id": "35987896", "Score": "1", "CreationDate": "2016-03-14T12:44:01.000", "LastActivityDate": "2016-03-14T12:51:49.843"}, "35987535": {"ParentId": "35987493", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>This code is allowed in <code>C++</code> but not allowed in <code>C</code></p>\n<p>From <a href=\"http://en.cppreference.com/w/cpp/language/return\" rel=\"noreferrer\">Return statement @ cppreference</a></p>\n<blockquote>\n<p id=\"so_35987493_35987535_0\">In a function returning void, the return statement with expression can\n  be used, if the expression type is void.</p>\n</blockquote>\n<hr>\n<p>OTOH in C11 specs draft n1570:</p>\n<p><strong>Major changes in the second edition included:</strong></p>\n<blockquote>\n<p id=\"so_35987493_35987535_1\">return without expression not permitted in function that returns a\n  value (and vice versa)</p>\n</blockquote>\n<p>(<code>return</code> with expression not permitted in function that returns a <code>void</code>)</p>\n<p>and 6.8.6.4 return</p>\n<blockquote>\n<p id=\"so_35987493_35987535_2\">A return statement with an expression shall not appear in a function\n  whose return type is void. A return statement without an expression\n  shall only appear in a function whose return type is void.</p>\n</blockquote>\n<p>(even if the expression evaluates to <code>void</code>)</p>\n</hr>", "OwnerUserId": "2659313", "LastEditorUserId": "2659313", "LastEditDate": "2016-03-14T13:03:43.887", "Id": "35987535", "Score": "13", "CreationDate": "2016-03-14T12:26:05.827", "LastActivityDate": "2016-03-14T13:03:43.887"}, "35987910": {"ParentId": "35987493", "PostTypeId": "2", "CommentCount": "14", "Body": "<p><strong>C11</strong>, 6.8.6.4 \"The <code>return</code> statement\":</p>\n<blockquote>\n<p id=\"so_35987493_35987910_0\">A <code>return</code> statement with an expression shall not appear in a function whose return type is <code>void</code>.</p>\n</blockquote>\n<p><strong>No</strong>, you may not use an expression, even if it is of <code>void</code> type.</p>\n<p>From the foreword of the same document:</p>\n<blockquote>\n<p id=\"so_35987493_35987910_1\">Major changes in the second edition included:</p>\n<p id=\"so_35987493_35987910_2\">[...]</p>\n<ul>\n<li><code>return</code> without expression not permitted in function that returns a value (and vice versa)</li>\n</ul>\n</blockquote>\n<p>So this was a change from C89 -&gt; C99 (the second edition of the language standard), and has been that way ever since.</p>\n<hr>\n<p><strong>C++14</strong>, 6.6.3 \"The <code>return</code> statement\":</p>\n<blockquote>\n<p id=\"so_35987493_35987910_3\">A return statement with an expression of non-void type can be used only in functions returning a value [...]\n  A return statement with an expression of type void can be used only in functions with a return type of cv\n  void; the expression is evaluated just before the function returns to its caller.</p>\n</blockquote>\n<p><strong>Yes</strong>, you may use an expression <em>if</em> it is of void type (that's been valid since C++98).</p>\n</hr>", "OwnerUserId": "60281", "LastEditorUserId": "60281", "LastEditDate": "2016-05-19T14:37:49.717", "Id": "35987910", "Score": "66", "CreationDate": "2016-03-14T12:44:32.680", "LastActivityDate": "2016-05-19T14:37:49.717"}, "35987925": {"ParentId": "35987493", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>C++ allows something like that:</p>\n<pre><code>void f() \n{\n    return void();\n}\n</code></pre>\n<p>While C does not. That's why a warning is issued if you compile it a ISO C rather than ISO C++. This is formally described as:</p>\n<blockquote>\n<p id=\"so_35987493_35987925_0\">A return statement with an expression of type void can be used only in\n  functions with a return type of cv void</p>\n</blockquote>\n", "OwnerUserId": "2692339", "LastEditorUserId": "2692339", "LastEditDate": "2016-03-14T12:51:46.753", "Id": "35987925", "Score": "5", "CreationDate": "2016-03-14T12:45:33.813", "LastActivityDate": "2016-03-14T12:51:46.753"}, "35987493": {"CommentCount": "16", "AcceptedAnswerId": "35987910", "PostTypeId": "1", "LastEditorUserId": "964080", "CreationDate": "2016-03-14T12:24:01.517", "LastActivityDate": "2016-05-19T14:37:49.717", "LastEditDate": "2016-03-14T20:12:04.633", "ViewCount": "6518", "FavoriteCount": "6", "Title": "Return void type in C and C++", "Id": "35987493", "Score": "59", "Body": "<p>This compiles without any warnings.</p>\n<p>Is this legal in C and C++ or does it just work in gcc and clang?</p>\n<p>If it is legal, is it some new thing after C99?</p>\n<pre><code>void f(){\n\n}\n\nvoid f2(){\n    return f();\n}\n</code></pre>\n<p><strong>Update</strong></p>\n<p>as \"Rad Lexus\" suggested I tried this:</p>\n<pre><code>$ gcc -Wall -Wpedantic -c x.c \nx.c: In function \u2018f2\u2019:\nx.c:7:9: warning: ISO C forbids \u2018return\u2019 with expression, in function returning void [-Wpedantic]\n  return f();\n</code></pre>\n<hr>\n<pre><code>$ clang -Wall -Wpedantic -c x.c \nx.c:7:2: warning: void function 'f2' should not return void expression [-Wpedantic]\n        return f();\n        ^      ~~~~~\n1 warning generated.\n</code></pre>\n<hr>\n<pre><code>$ gcc -Wall -Wpedantic -c x.cc\n(no errors)\n</code></pre>\n<hr>\n<pre><code>$ clang -Wall -Wpedantic -c x.cc\n(no errors)\n</code></pre>\n<p><strong>Update</strong></p>\n<p>Someone asked how this construction is helping. Well is more or less syntactic sugar. Here is one good example:</p>\n<pre><code>void error_report(const char *s){\n    printf(\"Error %s\\n\", s);\n    exit(0);\n}\n\nvoid process(){\n   if (step1() == 0)\n      return error_report(\"Step 1\");\n\n   switch(step2()){\n   case 0: return error_report(\"Step 2 - No Memory\");\n   case 1: return error_report(\"Step 2 - Internal Error\");\n   }\n\n   printf(\"Processing Done!\\n\");\n}\n</code></pre>\n</hr></hr></hr>", "Tags": "<c++><c><gcc><clang><language-lawyer>", "OwnerUserId": "964080", "AnswerCount": "5"}, "35987890": {"ParentId": "35987493", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>ISO/IEC 9899:201x Committee draft says the following:</p>\n<blockquote>\n<p id=\"so_35987493_35987890_0\">6.8.6.4 The return statement </p>\n<p id=\"so_35987493_35987890_1\">Constraints </p>\n<ol>\n<li><p id=\"so_35987493_35987890_2\"><code>return</code> statement with an expression <strong>shall not appear in a function whose return type is <code>void</code></strong>.</p>\n<p id=\"so_35987493_35987890_3\">A <code>return</code> statement without an expression shall only appear in a\n  function whose return type is <code>void</code>.</p></li>\n</ol>\n</blockquote>\n<p>So, it is forbidden in C.</p>\n<hr>\n<p>You need to use <code>-pedantic</code> switch to <code>gcc</code> for it to complain about standard violations:</p>\n<pre><code>test.c: In function \u2018f2\u2019:\ntest.c:6:12: warning: ISO C forbids \u2018return\u2019 with expression, in function returning void \n            [-Wpedantic]\n     return f();\n</code></pre>\n</hr>", "OwnerUserId": "918959", "LastEditorUserId": "918959", "LastEditDate": "2016-03-14T15:33:11.623", "Id": "35987890", "Score": "3", "CreationDate": "2016-03-14T12:43:46.183", "LastActivityDate": "2016-03-14T15:33:11.623"}, "bq_ids": {"n4140": {"so_35987493_35987925_0": {"section_id": 3914, "quality": 1.0, "length": 10}, "so_35987493_35987910_3": {"section_id": 3914, "quality": 0.6666666666666666, "length": 18}, "so_35987493_35987910_0": {"section_id": 7218, "quality": 0.7777777777777778, "length": 7}, "so_35987493_35987535_2": {"section_id": 3913, "quality": 0.7222222222222222, "length": 13}, "so_35987493_35987890_3": {"section_id": 3913, "quality": 0.7777777777777778, "length": 7}, "so_35987493_35987890_2": {"section_id": 7218, "quality": 0.7777777777777778, "length": 7}, "so_35987493_35987896_2": {"section_id": 3913, "quality": 0.7222222222222222, "length": 13}, "so_35987493_35987535_0": {"section_id": 3913, "quality": 0.7, "length": 7}}, "n3337": {"so_35987493_35987890_2": {"section_id": 6962, "quality": 0.7777777777777778, "length": 7}, "so_35987493_35987910_3": {"section_id": 3774, "quality": 0.6666666666666666, "length": 18}, "so_35987493_35987910_0": {"section_id": 6962, "quality": 0.7777777777777778, "length": 7}, "so_35987493_35987535_2": {"section_id": 3773, "quality": 0.7222222222222222, "length": 13}, "so_35987493_35987890_3": {"section_id": 3773, "quality": 0.7777777777777778, "length": 7}, "so_35987493_35987925_0": {"section_id": 3774, "quality": 1.0, "length": 10}, "so_35987493_35987896_2": {"section_id": 3773, "quality": 0.7222222222222222, "length": 13}, "so_35987493_35987535_0": {"section_id": 3773, "quality": 0.7, "length": 7}}, "n4659": {"so_35987493_35987535_1": {"section_id": 823, "quality": 0.625, "length": 5}, "so_35987493_35987890_2": {"section_id": 4799, "quality": 0.7777777777777778, "length": 7}, "so_35987493_35987910_0": {"section_id": 4799, "quality": 0.7777777777777778, "length": 7}, "so_35987493_35987535_2": {"section_id": 4799, "quality": 0.6666666666666666, "length": 12}, "so_35987493_35987890_3": {"section_id": 4799, "quality": 0.7777777777777778, "length": 7}, "so_35987493_35987925_0": {"section_id": 307, "quality": 0.6, "length": 6}, "so_35987493_35987896_2": {"section_id": 4799, "quality": 0.6666666666666666, "length": 12}, "so_35987493_35987535_0": {"section_id": 4087, "quality": 0.6, "length": 6}}}});