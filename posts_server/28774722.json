post_cb({"28774846": {"ParentId": "28774722", "CommentCount": "6", "Body": "<p>In C++11, the underlying array is not guaranteed to exist after the lifetime of the original initialiser list object has ended. Therefore, your code may exhibit undefined behaviour. Switch to C++14.</p>\n", "OwnerUserId": "1804599", "PostTypeId": "2", "Id": "28774846", "Score": "1", "CreationDate": "2015-02-27T21:45:16.703", "LastActivityDate": "2015-02-27T21:45:16.703"}, "28775143": {"ParentId": "28774722", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>From C++11 8.5.4 List Initialization [dcl.init.list]:</p>\n<blockquote>\n<p id=\"so_28774722_28775143_0\">5 An object of type <code>std::initializer_list&lt;E&gt;</code> is constructed from an initializer list as if the implementation allocated an array of <code>N</code> elements of type <code>E</code>, where <code>N</code> is the number of elements in the initializer list. Each element of that array is copy-initialized with the corresponding element of the initializer list, and the <code>std::initializer_list&lt;E&gt;</code> object is constructed to refer to that array. If a narrowing conversion is required to initialize any of the elements, the program is ill-formed.</p>\n<p id=\"so_28774722_28775143_1\">6 The lifetime of the array is the same as that of the <code>initializer_list</code> object.</p>\n</blockquote>\n<p>The <code>return</code> statement of your lambda initializes a temporary <code>std::initializer_list&lt;int&gt;</code> and returns a copy thereof. This is all good, except that the lifetime of the array to which it refers ends at the end of the full-expression. Accessing the dead array through the <code>initializer_list</code> outside of the lambda results in undefined behavior.</p>\n<p>An <code>initializer_list</code> isn't a container, it's a reference to a temporary container. If you try to use it like a container you're going to have a bad time.</p>\n<p>In C++14 (quoting N4140) paragraph 6 was clarified to:</p>\n<blockquote>\n<p id=\"so_28774722_28775143_2\">6 The array has the same lifetime as any other temporary object (12.2), except that initializing an <code>initializer_list</code> object from the array extends the lifetime of the array exactly like binding a reference to a temporary.</p>\n</blockquote>\n<p>by the resolution of <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1290\" rel=\"nofollow\">CWG issue 1290</a>. This clarification makes it impossible to use an <code>initializer_list</code> as, e.g., a member variable which was the intention of C++11. Even in C++14, however, your program has undefined behavior.</p>\n", "OwnerUserId": "923854", "LastEditorUserId": "923854", "LastEditDate": "2015-02-27T22:19:51.360", "Id": "28775143", "Score": "4", "CreationDate": "2015-02-27T22:04:38.790", "LastActivityDate": "2015-02-27T22:19:51.360"}, "bq_ids": {"n4140": {"so_28774722_28775143_2": {"section_id": 3328, "quality": 0.9047619047619048, "length": 19}, "so_28774722_28775143_0": {"section_id": 3327, "quality": 1.0, "length": 35}, "so_28774722_28775143_1": {"section_id": 3328, "quality": 0.6666666666666666, "length": 4}}, "n3337": {"so_28774722_28775143_0": {"section_id": 3197, "quality": 1.0, "length": 35}, "so_28774722_28775143_1": {"section_id": 3198, "quality": 0.8333333333333334, "length": 5}}, "n4659": {"so_28774722_28775143_2": {"section_id": 4094, "quality": 0.9047619047619048, "length": 19}, "so_28774722_28775143_0": {"section_id": 4093, "quality": 0.9142857142857143, "length": 32}, "so_28774722_28775143_1": {"section_id": 4094, "quality": 0.6666666666666666, "length": 4}}}, "28774722": {"CommentCount": "1", "ViewCount": "236", "PostTypeId": "1", "ClosedDate": "2015-02-28T00:09:10.380", "LastEditorUserId": "3965277", "LastActivityDate": "2015-02-27T22:19:51.360", "Body": "<p>Consider this sample of code:</p>\n<pre><code>#include &lt;initializer_list&gt;\n#include &lt;iostream&gt;\n\nint main()\n{\n    for(auto e: []()-&gt;std::initializer_list&lt;int&gt;{return{1,2,3};}())\n        std::cout&lt;&lt;e&lt;&lt;std::endl;\n    return 0;\n}\n</code></pre>\n<p>I tried to compile it with g++ (gcc version 4.9.2 (Debian 4.9.2-10))\nand the output is correct.\nIn clang++ (Debian clang version 3.5.0-9 (tags/RELEASE_350/final) (based on LLVM 3.5.0)) output for example:</p>\n<pre><code>0\n2125673120\n32546\n</code></pre>\n<p>Where first line are always 0 and last two are <em>\"random\"</em>.</p>\n<p>It's error in clang or something else? I think that this sample of code is correct.</p>\n<p><strong>Update:</strong></p>\n<p>When the lambda function return type is something else (e.g. std::vector or std::array) this code works fine.</p>\n", "LastEditDate": "2015-02-27T21:44:19.357", "AcceptedAnswerId": "28775143", "Title": "Returning std::initializer_list in clang", "Id": "28774722", "Score": "10", "CreationDate": "2015-02-27T21:35:55.967", "Tags": "<c++><c++11><clang><clang++>", "OwnerUserId": "3965277", "AnswerCount": "2"}});