post_cb({"5486712": {"ParentId": "5486669", "CommentCount": "0", "Body": "<p>White space is ignored - the semicolon ends your line.</p>\n", "OwnerUserId": "14591", "PostTypeId": "2", "Id": "5486712", "Score": "1", "CreationDate": "2011-03-30T13:09:17.553", "LastActivityDate": "2011-03-30T13:09:17.553"}, "5486724": {"ParentId": "5486669", "PostTypeId": "2", "CommentCount": "6", "Body": "<p>Whitespace (\"space/tab/end of line\", as you put it) between adjacent string literals is also ignored.</p>\n<p>Since you want to know if this is standard, the C++ standard says:</p>\n<p><strong>2.1[lex.phases]/3</strong></p>\n<blockquote>\n<p id=\"so_5486669_5486724_0\">The source file is decomposed into preprocessing tokens (2.4) and sequences of white-space characters</p>\n</blockquote>\n<p><strong>2.1[lex.phases]/6</strong></p>\n<blockquote>\n<p id=\"so_5486669_5486724_1\">Adjacent ordinary string literal tokens are concatenated.</p>\n</blockquote>\n<p>And <em>white-space characters</em> are defined in <strong>2.4[lex.pptoken]/2</strong> as </p>\n<blockquote>\n<p id=\"so_5486669_5486724_2\">space, horizontal tab, new-line, vertical tab, and form-feed</p>\n</blockquote>\n<p>Also, the example of such concatenation, provided in <strong>2.13.4[lex.string]/3</strong> involves space:</p>\n<pre><code>[Example:\n\"\\xA\" \"B\"\ncontains the two characters \u2019\\xA\u2019 and \u2019B\u2019 after concatenation \n</code></pre>\n<p>which shows that the meaning of \"adjacent tokens\" in this case includes \"separated by space\", and therefore, \"separated by a sequence of white-space characters\", which includes new-line as well.</p>\n", "OwnerUserId": "273767", "LastEditorUserId": "273767", "LastEditDate": "2011-03-30T13:38:16.213", "Id": "5486724", "Score": "9", "CreationDate": "2011-03-30T13:10:00.457", "LastActivityDate": "2011-03-30T13:38:16.213"}, "5486743": {"ParentId": "5486669", "CommentCount": "0", "Body": "<p>It's by design so you can have</p>\n<pre><code>std::string a = \"really\"\n                \"long\"\n                \"string literals\"\n                \"spread over multiple lines\";\n</code></pre>\n", "OwnerUserId": "494373", "PostTypeId": "2", "Id": "5486743", "Score": "2", "CreationDate": "2011-03-30T13:11:44.233", "LastActivityDate": "2011-03-30T13:11:44.233"}, "5486705": {"ParentId": "5486669", "CommentCount": "4", "Body": "<p>Because the C++ grammar doesn't care about newlines, tabs or whitespace between tokens (as far as possible).</p>\n<p>This is valid in much the same way that:</p>\n<pre><code>int a = 3 +\n        5 +\n        9;\n</code></pre>\n<p>is valid.</p>\n<p>(Of course you often need <em>some</em> whitespace between tokens to set them apart, e.g. <code>int a;</code> rather than <code>inta;</code>. But as long as the distinction isn't required, the whitespace does not matter, e.g. <code>3 + 5</code> or <code>3+5</code>.)</p>\n", "OwnerUserId": "560648", "PostTypeId": "2", "Id": "5486705", "Score": "4", "CreationDate": "2011-03-30T13:08:38.990", "LastActivityDate": "2011-03-30T13:08:38.990"}, "5486689": {"ParentId": "5486669", "CommentCount": "3", "Body": "<p>The compiler is smart enough to optimize this for you.</p>\n<p>C++ ignores end of lines in statements - the semicolon determines when the statement is complete.</p>\n", "OwnerUserId": "23528", "PostTypeId": "2", "Id": "5486689", "Score": "1", "CreationDate": "2011-03-30T13:06:51.363", "LastActivityDate": "2011-03-30T13:06:51.363"}, "bq_ids": {"n4140": {"so_5486669_5486724_0": {"section_id": 5313, "quality": 0.9, "length": 9}, "so_5486669_5486724_1": {"section_id": 5313, "quality": 0.8333333333333334, "length": 5}, "so_5486669_5486724_2": {"section_id": 5321, "quality": 1.0, "length": 7}}, "n3337": {"so_5486669_5486724_0": {"section_id": 5110, "quality": 0.9, "length": 9}, "so_5486669_5486724_1": {"section_id": 5110, "quality": 0.8333333333333334, "length": 5}, "so_5486669_5486724_2": {"section_id": 5118, "quality": 1.0, "length": 7}}, "n4659": {"so_5486669_5486724_0": {"section_id": 6737, "quality": 0.9, "length": 9}, "so_5486669_5486724_1": {"section_id": 6737, "quality": 0.8333333333333334, "length": 5}, "so_5486669_5486724_2": {"section_id": 6742, "quality": 1.0, "length": 7}}}, "5486669": {"CommentCount": "0", "ViewCount": "609", "CreationDate": "2011-03-30T13:05:13.663", "LastActivityDate": "2013-04-03T14:39:19.130", "Title": "C++ string literals", "AcceptedAnswerId": "5486724", "PostTypeId": "1", "Id": "5486669", "Score": "1", "Body": "<p>why this code compiles?</p>\n<pre><code>std::string a = \"test\"\n\"a\";\n</code></pre>\n<p>I know that \" is ignored inside a string if \\ is missing and this:</p>\n<pre><code>std::string a = \"test\"\"a\";\n</code></pre>\n<p>will be the same as \"testa\" but why it compiles when I have space/tab/end of line inside it?</p>\n", "Tags": "<c++>", "OwnerUserId": "336578", "AnswerCount": "5"}});