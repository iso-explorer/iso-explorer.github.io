post_cb({"26939070": {"CommentCount": "3", "ViewCount": "193", "PostTypeId": "1", "LastEditorUserId": "3647361", "CreationDate": "2014-11-14T21:21:02.857", "LastActivityDate": "2016-03-18T10:38:00.363", "Title": "Why is (void)sizeof(param) not \"using\" param?", "AcceptedAnswerId": "26939087", "LastEditDate": "2016-03-18T10:38:00.363", "Id": "26939070", "Score": "4", "Body": "<p>I have a macro defined as follows:</p>\n<pre><code>#define UNREF_PARAM_1(a)\n    do { \\\n        (void)sizeof(a); \\\n    } \\\n    while (0)\n</code></pre>\n<p>To get rid of compiler warnings. In a new project I am working on, VS2013 is suddenly complaining again about a unreferenced formal parameter.</p>\n<p>Strangely it does work if I just use <code>(void)param</code>. \nDoes anybody have a clue why it does not work when using it with <code>(void)sizeof(param)</code>?</p>\n", "Tags": "<c++><visual-studio><language-lawyer><compiler-warnings><suppress-warnings>", "OwnerUserId": "1009377", "AnswerCount": "1"}, "26939087": {"ParentId": "26939070", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Because in <code>sizeof(param)</code>, <code>param</code> is a so-called <em>unevaluated operand</em> and therefore not odr-used - that is, not needed at runtime.</p>\n<p>However, <code>(void)param</code> does constitute a odr-use.<br/></p>\n<p>A cast with the notation in your code internally invokes a <code>static_cast</code>. [expr.static.cast]/6:</p>\n<blockquote>\n<p id=\"so_26939070_26939087_0\">Any expression can be explicitly converted to type <em>cv</em> <code>void</code>, in\n  which case it becomes a discarded-value expression (Clause 5).</p>\n</blockquote>\n<p>[expr]/10:</p>\n<blockquote>\n<p id=\"so_26939070_26939087_1\">In some contexts, an expression only appears for its side effects. Such an expression is called a <em>discarded-value expression</em>. The expression is evaluated and its value is discarded. [\u2026] <strong>The lvalue-to-rvalue conversion (4.1) is applied only if the expression is an lvalue of volatile-qualified type</strong> [\u2026]</p>\n</blockquote>\n<p>[basic.def.odr]/2:</p>\n<blockquote>\n<p id=\"so_26939070_26939087_2\">An expression is <em>potentially evaluated</em> unless it is an unevaluated operand (Clause 5) or a subexpression thereof. A variable whose name appears as a potentially-evaluated\n  expression is <em>odr-used</em> <strong>unless it is an object that satisfies the\n  requirements for appearing in a constant expression (5.19) and the\n  lvalue-to-rvalue conversion (4.1) is immediately applied</strong>.</p>\n</blockquote>\n<p>The first part of this quote specifies that <code>sizeof(a)</code> isn't an odr-use of <code>a</code> since <code>a</code> is an unevaluated operand<sup>1</sup>.<br>\nClearly <code>(void)a</code> is potentially evaluated. And because <code>a</code> is certainly neither allowed to appear in a constant expression nor declared <code>volatile</code>, no lvalue-to-rvalue conversion is \"immediately applied\" and thus <code>a</code> is odr-used.</br></p>\n<hr>\n<p><sup>1)</sup> Here is a list of expressions where <code>x</code> is an unevaluated operand as from C++11:</p>\n<ul>\n<li><code>typeid(x)</code>, where <code>x</code> is not a glvalue of polymorphic class type</li>\n<li><code>sizeof(x)</code> (and <code>sizeof x</code>)</li>\n<li><code>noexcept(x)</code> </li>\n<li><code>decltype(x)</code></li>\n<li><code>alignof(x)</code>? <code>alignas(x)</code>?</li>\n</ul>\n</hr>", "OwnerUserId": "3647361", "LastEditorUserId": "3647361", "LastEditDate": "2014-11-15T01:33:02.203", "Id": "26939087", "Score": "7", "CreationDate": "2014-11-14T21:22:23.480", "LastActivityDate": "2014-11-15T01:33:02.203"}, "bq_ids": {"n4140": {"so_26939070_26939087_0": {"section_id": 6032, "quality": 0.9166666666666666, "length": 11}, "so_26939070_26939087_1": {"section_id": 5944, "quality": 0.8461538461538461, "length": 22}}, "n3337": {"so_26939070_26939087_2": {"section_id": 6785, "quality": 0.8846153846153846, "length": 23}, "so_26939070_26939087_0": {"section_id": 5800, "quality": 0.9166666666666666, "length": 11}, "so_26939070_26939087_1": {"section_id": 5715, "quality": 0.8846153846153846, "length": 23}}, "n4659": {"so_26939070_26939087_0": {"section_id": 7531, "quality": 0.8333333333333334, "length": 10}, "so_26939070_26939087_1": {"section_id": 7429, "quality": 0.6538461538461539, "length": 17}}}});