post_cb({"21167010": {"Id": "21167010", "PostTypeId": "2", "Body": "<p>Aside what other's said about template instantiation, you might find useful to declare some functions/methods as 'used', to prevent the optimizers from removing them if they seem unused.</p>\n<p><a href=\"http://gcc.gnu.org/onlinedocs/gcc-4.3.5/gcc/Function-Attributes.html\" rel=\"nofollow\">http://gcc.gnu.org/onlinedocs/gcc-4.3.5/gcc/Function-Attributes.html</a></p>\n<p>see attribute <code>used</code></p>\n", "LastActivityDate": "2014-01-16T16:12:30.490", "Score": "3", "CreationDate": "2014-01-16T16:12:30.490", "ParentId": "21166762", "CommentCount": "2", "OwnerUserId": "717732"}, "bq_ids": {"n4140": {"so_21166762_21166957_0": {"length": 26, "quality": 0.896551724137931, "section_id": 233}}, "n3337": {"so_21166762_21166957_0": {"length": 26, "quality": 0.896551724137931, "section_id": 226}}, "n4659": {"so_21166762_21166957_0": {"length": 26, "quality": 0.896551724137931, "section_id": 243}}}, "21166957": {"Id": "21166957", "PostTypeId": "2", "Body": "<p>No compiler flags, but the rules of the <em>language</em> govern what is happening here, and you can use them to your advantage.</p>\n<p>Since you are implicitly instantiating <code>A&lt;int&gt;</code>, only the functions you use are instantiated:</p>\n<blockquote>\n<p id=\"so_21166762_21166957_0\"><code>[C++11: 14.7.1/1]:</code> <em>[..]</em> The implicit instantiation of a class template specialization causes the implicit instantiation of the declarations, but not of the definitions or default arguments, of the class member functions, member classes, scoped member enumerations, static data members and member templates; <em>[..]</em></p>\n</blockquote>\n<p>If you <em>explicitly</em> instantiate <code>A&lt;int&gt;</code>, instead, then the whole thing gets instantiated.</p>\n<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\ntemplate&lt;typename T&gt;\nclass A {\npublic:\n    void foo() { cout &lt;&lt; \"Inside foo\" &lt;&lt; endl; }\n    void bar() { cout &lt;&lt; \"Inside bar\" &lt;&lt; endl; }\n};\n\ntemplate class A&lt;int&gt;;   // &lt;----\n\nint main() {\n  A&lt;int&gt; a;\n  a.foo();\n}\n</code></pre>\n<p>Here is some proof: <a href=\"http://coliru.stacked-crooked.com/a/582126aac45d6ea4\" rel=\"nofollow\">http://coliru.stacked-crooked.com/a/582126aac45d6ea4</a></p>\n", "LastEditorUserId": "560648", "LastActivityDate": "2014-01-16T16:23:18.090", "Score": "7", "CreationDate": "2014-01-16T16:10:04.160", "ParentId": "21166762", "CommentCount": "3", "LastEditDate": "2014-01-16T16:23:18.090", "OwnerUserId": "560648"}, "21166832": {"Id": "21166832", "PostTypeId": "2", "Body": "<p>Explicitly instantiate it:</p>\n<pre><code>template class A&lt;int&gt;;\n</code></pre>\n", "LastEditorUserId": "2684539", "LastActivityDate": "2014-01-16T16:12:04.253", "Score": "3", "CreationDate": "2014-01-16T16:04:37.087", "ParentId": "21166762", "CommentCount": "3", "LastEditDate": "2014-01-16T16:12:04.253", "OwnerUserId": "2684539"}, "21166762": {"ViewCount": "484", "Body": "<p>Say I have this program</p>\n<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\ntemplate&lt;typename T&gt;\nclass A {\npublic:\n    void foo() { cout &lt;&lt; \"Inside foo\" &lt;&lt; endl; }\n    void bar() { cout &lt;&lt; \"Inside bar\" &lt;&lt; endl; }\n};\n\nint main() {\n  A&lt;int&gt; a;\n  a.foo();\n  return 0;\n}\n</code></pre>\n<p>Both g++ and clang++ only generate code for <code>A&lt;int&gt;::foo()</code>, but not for <code>A&lt;int&gt;::bar()</code>. This is annoying when you want to call this function while debugging. (e.g. <code>vector&lt;T&gt;::at()</code> ).</p>\n<p>Is there some flag or other method by which you can force the generation of code for all member functions every time a template is instantiated?</p>\n", "AcceptedAnswerId": "21166957", "Title": "Forcing the compiler to generate code for all member functions of a template class?", "CreationDate": "2014-01-16T16:01:54.217", "Id": "21166762", "CommentCount": "0", "LastEditDate": "2014-01-16T16:14:02.353", "PostTypeId": "1", "LastEditorUserId": "2684539", "LastActivityDate": "2014-01-16T16:23:18.090", "Score": "4", "OwnerUserId": "92560", "Tags": "<c++><instantiation>", "AnswerCount": "3"}});