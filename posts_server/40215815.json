post_cb({"40216410": {"ParentId": "40215815", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>I thought</p>\n<blockquote>\n<p id=\"so_40215815_40216410_0\">What happens when you redefine a macro?</p>\n</blockquote>\n<p>It gives redefinition warning for macro. </p>\n<p>Still </p>\n<blockquote>\n<p id=\"so_40215815_40216410_1\">if you avoid warning and try to run your program</p>\n</blockquote>\n<p>then all we know that in cpp all statements are executed sequentially from the top to the bottom, so whatever the last definition of macro is printed.</p>\n<blockquote>\n<p id=\"so_40215815_40216410_2\">What will my_value be 3 or 45?</p>\n</blockquote>\n<p>in your code 45 will be taken as macro definition.</p>\n", "OwnerUserId": "5217529", "LastEditorUserId": "5217529", "LastEditDate": "2016-10-24T10:48:20.253", "Id": "40216410", "Score": "1", "CreationDate": "2016-10-24T10:42:00.267", "LastActivityDate": "2016-10-24T10:48:20.253"}, "40216214": {"ParentId": "40215815", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>From the standard (draft) <a href=\"http://eel.is/c++draft/cpp.replace#2\" rel=\"nofollow\">[cpp.replace] \u00a72</a>:</p>\n<blockquote>\n<p id=\"so_40215815_40216214_0\">An identifier currently defined as an object-like macro (see below) may be redefined by another #define\n  preprocessing directive provided that the second definition is an object-like macro definition and the two\n  replacement lists are identical, otherwise the program is ill-formed. [...]</p>\n</blockquote>\n<hr>\n<blockquote>\n<p id=\"so_40215815_40216214_1\">What happens when you redefine a macro?</p>\n</blockquote>\n<p>When the new definition is different, your program is ill-formed. The compiler is required to show you a diagnostic message (a warning, or an error). The behaviour of an ill-formed program is not defined by the standard. The compiler is free to refuse compiling the program.</p>\n<blockquote>\n<p id=\"so_40215815_40216214_2\">What will my_value be 3 or 45?</p>\n</blockquote>\n<p>Whatever your pre-processor/compiler chooses. Or the compiler could refuse to compile it.</p>\n<hr>\n<p>Technically, the program would become well-formed if you first undefined the macro. Then the defined value would obviously be the newly defined. However, I do not recommend this, because you can then easily break other rules depending on the order of inclusion of headers in multiple translation units.</p>\n<p>Most likely, the two macros are supposed to be separate entities, and there are different files that expect the definition from one header, and not the other. The correct solution is to give each a <em>unique</em> name by renaming one, and change the dependant files to use the new name. Figuring out which files use which definition is may be a challenge. While you're at it, you may want to replace the macro with a <code>constexpr</code> variable.</p>\n</hr></hr>", "OwnerUserId": "2079303", "LastEditorUserId": "2079303", "LastEditDate": "2016-10-24T10:50:12.290", "Id": "40216214", "Score": "5", "CreationDate": "2016-10-24T10:32:25.140", "LastActivityDate": "2016-10-24T10:50:12.290"}, "40215815": {"CommentCount": "13", "ViewCount": "116", "PostTypeId": "1", "LastEditorUserId": "781252", "CreationDate": "2016-10-24T10:13:01.407", "LastActivityDate": "2016-10-24T11:10:14.680", "Title": "What happens when you redefine a macro?", "AcceptedAnswerId": "40216214", "LastEditDate": "2016-10-24T11:10:14.680", "Id": "40215815", "Score": "0", "Body": "<pre><code>#define MY_MACRO 3 --&gt; in A.h\n#define MY_MACRO 45 --&gt; B.h\n</code></pre>\n<hr>\n<pre><code>//In C.cpp\n\n#include \"A.h\"\n#include \"B.h\"\n\n..\n..\n..\nint my_value = MY_MACRO;\n</code></pre>\n<hr>\n<p>What will my_value be 3 or 45?</p>\n</hr></hr>", "Tags": "<c++><c><macros>", "OwnerUserId": "6286927", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_40215815_40216214_0": {"section_id": 512, "quality": 0.88, "length": 22}}, "n3337": {"so_40215815_40216214_0": {"section_id": 503, "quality": 0.88, "length": 22}}, "n4659": {"so_40215815_40216214_0": {"section_id": 533, "quality": 0.96, "length": 24}}}});