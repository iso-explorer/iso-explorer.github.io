post_cb({"41321418": {"ParentId": "41321335", "CommentCount": "1", "Body": "<p>Although the code didn't seem to use <code>constexpr</code>, C++11 <code>constexpr</code> functions were constrained to have only one statement which had to be a <code>return</code> statement. To do the non-functional assertion and return a value there would be no other option than using the comma operator. With C++14 this constraint was removed, though.</p>\n<p>I could imagine that the function was rewritten from a macro which originally read something like this</p>\n<pre><code>#define INT_DIVIDE(nom,denom) (assert(denom != 0), nom/denom)\n</code></pre>\n<p>The built-in comma operator simply sequences two expressions. The result of the expression is the second operand. The two functions are, indeed, equivalent. Note, that the comma operator <em>can</em> be overloaded. If it is, the expressions are not sequenced and the result is whatever the overload defines.</p>\n<p>In practice the comma operator sometimes comes in quite handy. For example, it is quite common to use the comma operator when expanding a parameter pack: in some uses each of the expansions is required to produce a value and to avoid <code>void</code> results messing things up, the comma operator can be used to have a value. For example:</p>\n<pre><code>template &lt;typename... T&gt;\nvoid g(T const&amp; arg) {\n    std::initializer_list&lt;bool&gt;{ (f(arg), true)... };\n}\n</code></pre>\n", "OwnerUserId": "1120273", "PostTypeId": "2", "Id": "41321418", "Score": "5", "CreationDate": "2016-12-25T13:14:12.553", "LastActivityDate": "2016-12-25T13:14:12.553"}, "41321335": {"CommentCount": "9", "AcceptedAnswerId": "41321400", "ClosedDate": "2016-12-25T13:16:34.243", "CreationDate": "2016-12-25T13:01:34.753", "LastActivityDate": "2016-12-25T13:18:29.557", "PostTypeId": "1", "ViewCount": "246", "FavoriteCount": "1", "Title": "Why use this comma in this return statement?", "Id": "41321335", "Score": "4", "Body": "<p>I understand what this C++ function does, but I don't understand why the <code>return</code> statement is written this way:</p>\n<pre><code>int intDivide(int num, int denom){\n  return assert(denom!=0), num/denom;\n}\n</code></pre>\n<p>There is only one statement here, because there is only one <code>;</code> but the comma confuses me. Why not write:</p>\n<pre><code>int intDivide(int num, int denom){\n  assert(denom!=0);\n  return num/denom;\n}\n</code></pre>\n<p>Aside from \"elegance\" is there something to be gained in the first version?</p>\n<p>What exactly is that comma doing anyway? Does it break a single statement into 2 parts such that essentially the above 2 versions are identical?</p>\n", "Tags": "<c++>", "OwnerUserId": "1592283", "AnswerCount": "3"}, "41321400": {"ParentId": "41321335", "CommentCount": "0", "Body": "<p>From the C++ standard:</p>\n<blockquote>\n<p id=\"so_41321335_41321400_0\"><strong>5.19  Comma operator</strong>  [expr.comma]<br>\n<sup>1</sup>  The comma operator groups left-to-right.  </br></p>\n<pre><code>expression:  \n     assignment-expression  \n     expression , assignment-expression  \n</code></pre>\n<p id=\"so_41321335_41321400_1\">A pair of expressions separated by a comma is\n  evaluated left-to-right; the left expression is a discarded- value\n  expression (Clause 5).<sup>87</sup> Every value computation and side effect\n  associated with the left expression is sequenced before every value\n  computation and side effect associated with the right expression. The\n  type and value of the result are the type and value of the right\n  operand; the result is of the same value category as its right\n  operand, and is a bit-field if its right operand is a glvalue and a\n  bit-field. If the value of the right operand is a temporary (12.2),\n  the result is that temporary.</p>\n</blockquote>\n<p>Yes, the two versions are identical, except if the comma operator is overloaded, as @StoryTeller commented.</p>\n", "OwnerUserId": "3435400", "PostTypeId": "2", "Id": "41321400", "Score": "0", "CreationDate": "2016-12-25T13:10:55.257", "LastActivityDate": "2016-12-25T13:10:55.257"}, "41321380": {"ParentId": "41321335", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>This is a sort of 'syntactic sugar', which is expanded on in a <a href=\"https://stackoverflow.com/questions/2539458/c-return-x-y-what-is-the-point#2539486\">similar question</a>.</p>\n<p>Basically the <code>e1, e2</code> means evaluate <code>e1</code>, and then evaluate <code>e2</code> - and the entire statement is the result of <code>e2</code>. It's a short and obfuscated (in my opinion) way of writing what you suggest. Maybe the writer is cheap on code lines.</p>\n", "OwnerUserId": "6881240", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:16:23.113", "Id": "41321380", "Score": "1", "CreationDate": "2016-12-25T13:08:18.277", "LastActivityDate": "2016-12-25T13:08:18.277"}, "bq_ids": {"n4140": {"so_41321335_41321400_1": {"section_id": 6182, "quality": 0.9152542372881356, "length": 54}}, "n3337": {"so_41321335_41321400_1": {"section_id": 5943, "quality": 0.8135593220338984, "length": 48}}, "n4659": {"so_41321335_41321400_1": {"section_id": 7684, "quality": 0.8813559322033898, "length": 52}}}});