post_cb({"bq_ids": {"n4140": {"so_46818864_46828101_0": {"length": 20, "quality": 1.0, "section_id": 6038}}, "n3337": {"so_46818864_46828101_0": {"length": 19, "quality": 0.95, "section_id": 5806}}, "n4659": {"so_46818864_46828101_0": {"length": 20, "quality": 1.0, "section_id": 7537}}}, "46818864": {"ViewCount": "147", "Body": "<p>I came across a problem with g++ with upcasting of a member pointer in a constexpr context using static_cast. See code example.</p>\n<p>When compiling with g++ version 6.3 and 7.0 they give a compilation error saying reinterpret_cast is not a constant expression.\nWhile clang version 4.0 gives no error, which I think is correct since there is no reinterpret_cast here.</p>\n<p>Is this a bug in g++ or clang? What is the correct behavior?</p>\n<pre><code>struct Base {};\n\nstruct Derived : Base\n{\n  int i;\n};\n\nstruct Ptr\n{\n  constexpr Ptr(int Derived::* p) : p(static_cast&lt;int Base::*&gt;(p)){}\n  int Base::* p;\n};\n\nconstexpr Ptr constexpr_ptr(&amp;Derived::i);\n</code></pre>\n<p>Compiler output</p>\n<pre><code>g++ -c -std=c++14 test.cpp \ntest.cpp:17:40:   in constexpr expansion of \u2018Ptr(&amp;Derived::i)\u2019\ntest.cpp:11:41: error: a reinterpret_cast is not a constant expression\nconstexpr Ptr(int Derived::* p) : p(static_cast&lt;int Base::*&gt;(p)){}\n                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n</code></pre>\n", "AcceptedAnswerId": "46828101", "Title": "static_cast of member pointer in constexpr context on g++", "CreationDate": "2017-10-18T20:39:15.143", "Id": "46818864", "CommentCount": "1", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2017-10-19T10:44:01.763", "Score": "11", "OwnerUserId": "7674036", "Tags": "<c++><c++11><constexpr>", "AnswerCount": "1"}, "46828101": {"Id": "46828101", "PostTypeId": "2", "Body": "<p>GCC presumably misapprehends <a href=\"http://eel.is/c++draft/expr.static.cast#12\" rel=\"nofollow noreferrer\">[expr.static.cast]/12</a>, which permits your cast and notes that</p>\n<blockquote>\n<p id=\"so_46818864_46828101_0\">If class <code>B</code> contains the original member, or is a base or derived class of the class containing the original member, the resulting pointer to member points to the original member. Otherwise, the behavior is undefined.</p>\n</blockquote>\n<p>Since <code>Base</code> is indeed a base of the class containing the member, the behaviour should be defined, and the constructor call a constant expression.</p>\n", "LastActivityDate": "2017-10-19T10:44:01.763", "CommentCount": "0", "CreationDate": "2017-10-19T10:44:01.763", "ParentId": "46818864", "Score": "3", "OwnerUserId": "3647361"}});