post_cb({"28242038": {"ParentId": "28241874", "PostTypeId": "2", "CommentCount": "0", "Body": "<p><code>C</code> is first declared in <code>g</code>, so [basic.scope.pdecl]/(7.2) applies</p>\n<blockquote>\n<p id=\"so_28241874_28242038_0\">for an <em>elaborated-type-specifier</em> of the form</p>\n<p id=\"so_28241874_28242038_1\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<em>class-key\n  identifier</em></p>\n<p id=\"so_28241874_28242038_2\">if the <em>elaborated-type-specifier</em> is used in the <em>decl-specifier-seq</em> or\n  <em>parameter-declaration-clause</em> of a function defined in namespace scope, [\u2026]; <strong>otherwise</strong>, except as a friend declaration, <strong>the identifier is declared in the smallest namespace or block scope that contains the declaration.</strong></p>\n</blockquote>\n<p><sub>(The \"otherwise \u2026\" part solely applies to declarations of the form <code>friend class C;</code>; it uses \"as\" and not \"inside\")</sub><br>\nThus as <code>C</code> is declared as a member of <code>N</code>, clearly its declarative region is <code>N</code>'s body. In fact, you <a href=\"http://coliru.stacked-crooked.com/a/099308b5ba9fe3d7\" rel=\"nofollow\">can use <code>C</code> outside <code>B</code></a>.</br></p>\n<p>And <code>g</code> is a member of <code>N</code> according to [namespace.memdef]/3</p>\n<blockquote>\n<p id=\"so_28241874_28242038_3\">If a friend declaration in a non-local class first declares a [..]\n  function template <strong>the friend is a member of the innermost enclosing\n  namespace.</strong></p>\n</blockquote>\n<p>Thus the declarative region of <code>g</code> is also <code>N</code>'s body.</p>\n", "OwnerUserId": "3647361", "LastEditorUserId": "3647361", "LastEditDate": "2015-01-30T18:19:21.720", "Id": "28242038", "Score": "4", "CreationDate": "2015-01-30T18:08:34.917", "LastActivityDate": "2015-01-30T18:19:21.720"}, "28241874": {"CommentCount": "0", "ViewCount": "143", "PostTypeId": "1", "LastEditorUserId": "3647361", "CreationDate": "2015-01-30T17:57:51.007", "LastActivityDate": "2015-02-01T00:35:43.257", "LastEditDate": "2015-02-01T00:12:19.077", "AcceptedAnswerId": "28242038", "OwnerDisplayName": "user2953119", "Title": "Declarative region of a function parameter", "Id": "28241874", "Score": "6", "Body": "<p>We have the following example from <code>N4296::3.3.9/2 [basic.scope.temp]</code>:</p>\n<blockquote>\n<pre><code>namespace N {\n    template&lt;class T&gt; struct A { };                 // #1\n    template&lt;class U&gt; void f(U) { }                 // #2\n    struct B \n    {\n        template&lt;class V&gt; friend int g(struct C*);  // #3\n    };\n}\n</code></pre>\n<p id=\"so_28241874_28241874_0\">The declarative regions of <code>T</code>, <code>U</code> and <code>V</code> are the <em>template-declaration</em>s on\n  lines <code>#1</code>, <code>#2</code> and <code>#3</code>, respectively. But the names <code>A</code>, <code>f</code>, <code>g</code> and <code>C</code> all\n  belong to the same declarative region \u2014 namely, the <em>namespace-body</em> of\n  <code>N</code>.</p>\n</blockquote>\n<p>It's not clear to me why <code>N</code>s body is the declarative region of <code>g</code> and <code>C</code>. I thought it was class <code>B</code>s body.<br>\nCan someone clarify what the standard means by that?</br></p>\n", "Tags": "<c++><templates><language-lawyer>", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_28241874_28242038_2": {"section_id": 7055, "quality": 1.0, "length": 19}, "so_28241874_28242034_0": {"section_id": 6689, "quality": 0.9375, "length": 15}, "so_28241874_28242034_3": {"section_id": 7055, "quality": 0.875, "length": 7}, "so_28241874_28242034_2": {"section_id": 5485, "quality": 0.9411764705882353, "length": 16}, "so_28241874_28242034_6": {"section_id": 7055, "quality": 1.0, "length": 13}, "so_28241874_28241874_0": {"section_id": 7074, "quality": 0.9333333333333333, "length": 14}, "so_28241874_28242038_3": {"section_id": 5485, "quality": 1.0, "length": 13}}, "n3337": {"so_28241874_28242038_2": {"section_id": 6799, "quality": 1.0, "length": 19}, "so_28241874_28242034_0": {"section_id": 6444, "quality": 0.9375, "length": 15}, "so_28241874_28242034_3": {"section_id": 6799, "quality": 0.875, "length": 7}, "so_28241874_28242034_2": {"section_id": 5271, "quality": 0.8823529411764706, "length": 15}, "so_28241874_28242034_6": {"section_id": 6799, "quality": 1.0, "length": 13}, "so_28241874_28241874_0": {"section_id": 6818, "quality": 0.9333333333333333, "length": 14}, "so_28241874_28242038_3": {"section_id": 5271, "quality": 0.9230769230769231, "length": 12}}, "n4659": {"so_28241874_28242038_2": {"section_id": 8552, "quality": 1.0, "length": 19}, "so_28241874_28242034_0": {"section_id": 8164, "quality": 0.9375, "length": 15}, "so_28241874_28242034_3": {"section_id": 8552, "quality": 0.875, "length": 7}, "so_28241874_28242034_2": {"section_id": 6920, "quality": 0.9411764705882353, "length": 16}, "so_28241874_28242034_6": {"section_id": 8552, "quality": 1.0, "length": 13}, "so_28241874_28241874_0": {"section_id": 8575, "quality": 0.9333333333333333, "length": 14}, "so_28241874_28242038_3": {"section_id": 6920, "quality": 1.0, "length": 13}}}, "28242034": {"ParentId": "28241874", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>Because <code>g</code> is a friend function it's scope is the namespace scope, as per section <code>11.3</code> <em>Friends</em>:</p>\n<blockquote>\n<p id=\"so_28241874_28242034_0\">A function can be defined in a friend declaration of a class if and\n  only if the class is a non-local class (9.8), the function name is\n  unqualified, and the function has namespace scope. [ Example:</p>\n<pre><code>class M {\nfriend void f() { } // definition of global f, a friend of M,\n// not the definition of a member function\n};\n</code></pre>\n<p id=\"so_28241874_28242034_1\">\u2014end example ]</p>\n</blockquote>\n<p>We can see this also applies to function templates from section <code>7.3.1.2</code>:</p>\n<blockquote>\n<p id=\"so_28241874_28242034_2\">If a friend declaration in a non-local class first declares a class,\n  function, class template or function template<sup>97</sup> the friend\n  is a member of the innermost enclosing namespace.[...]</p>\n</blockquote>\n<p>and for <code>C</code> this is covered in section <code>3.3.2</code> Point of declaration:</p>\n<blockquote>\n<p id=\"so_28241874_28242034_3\">The point of declaration of a class first declared in an\n  elaborated-type-specifier is as follows:</p>\n</blockquote>\n<p>and includes the following bullet (<em>emphasis mine</em>):</p>\n<blockquote>\n<ul>\n<li><p id=\"so_28241874_28242034_4\">for an elaborated-type-specifier of the form</p>\n<p id=\"so_28241874_28242034_5\">class-key identifier</p></li>\n</ul>\n<p id=\"so_28241874_28242034_6\">if the elaborated-type-specifier is used in the decl-specifier-seq or\n  parameter-declaration-clause of a function defined in namespace scope,\n  the <strong>identifier is declared as a class-name in the namespace that\n  contains the declaration</strong>;</p>\n</blockquote>\n", "OwnerUserId": "1708801", "LastEditorUserId": "1708801", "LastEditDate": "2015-02-01T00:35:43.257", "Id": "28242034", "Score": "2", "CreationDate": "2015-01-30T18:08:18.230", "LastActivityDate": "2015-02-01T00:35:43.257"}});