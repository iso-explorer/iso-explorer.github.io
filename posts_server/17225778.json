post_cb({"17225874": {"ParentId": "17225778", "CommentCount": "4", "CreationDate": "2013-06-21T00:15:45.820", "OwnerUserId": "798193", "PostTypeId": "2", "Id": "17225874", "Score": "11", "Body": "<p>The truncated value of <code>-0.0</code> is <code>0</code>, which is representable in integral types (including unsigned integral types).  There's no reason to suppose that the truncated value of <code>-0.0</code> and <code>0.0</code> are different, any more than the truncated values of <code>-0.25</code> and <code>0.3</code> are different.</p>\n", "LastActivityDate": "2013-06-21T00:15:45.820"}, "bq_ids": {"n4140": {"so_17225778_17225778_0": {"section_id": 37, "quality": 0.9166666666666666, "length": 22}, "so_17225778_17227822_3": {"section_id": 6173, "quality": 0.6666666666666666, "length": 4}}, "n3337": {"so_17225778_17225778_0": {"section_id": 34, "quality": 0.9166666666666666, "length": 22}, "so_17225778_17227822_3": {"section_id": 5934, "quality": 0.6666666666666666, "length": 4}}, "n4659": {"so_17225778_17225778_0": {"section_id": 37, "quality": 0.8333333333333334, "length": 20}, "so_17225778_17227822_3": {"section_id": 7675, "quality": 0.6666666666666666, "length": 4}}}, "17225778": {"CommentCount": "6", "ViewCount": "246", "PostTypeId": "1", "LastEditorUserId": "115698", "CreationDate": "2013-06-21T00:01:13.680", "LastActivityDate": "2013-06-21T04:45:20.117", "Title": "Is the behavior of unsigned(-0.0) defined in C++?", "AcceptedAnswerId": "17225874", "LastEditDate": "2013-06-21T00:46:44.440", "Id": "17225778", "Score": "7", "Body": "<p>C++11 4.9 Floating-integral conversions [conv.fpint]:</p>\n<blockquote>\n<p id=\"so_17225778_17225778_0\">A prvalue of a floating point type can be converted to a prvalue of an integer type. The conversion truncates; that is, the fractional part is discarded. The behavior is undefined if the truncated value cannot be represented in the destination type.</p>\n</blockquote>\n<p>If the value is <code>-0.0</code>, is behavior defined?  It comes down to whether \"the truncated value cannot be represented in the destination type\".  Zero could be represented.  Can negative zero?  In this context, are the two zero values distinguished, or not distinguished?</p>\n", "Tags": "<c++><floating-point><type-conversion><language-lawyer>", "OwnerUserId": "115698", "AnswerCount": "2"}, "17227822": {"ParentId": "17225778", "CommentCount": "0", "CreationDate": "2013-06-21T04:45:20.117", "OwnerUserId": "3624760", "PostTypeId": "2", "Id": "17227822", "Score": "-1", "Body": "<p>C11 \u00a76.2.6.2/3</p>\n<blockquote>\n<p id=\"so_17225778_17227822_0\">If the implementation supports negative zeros, they shall be generated only by:</p>\n<p id=\"so_17225778_17227822_1\">\u2014 the &amp;, |, ^, ~, &lt;&lt;, and &gt;&gt; operators with operands that produce such a value;</p>\n<p id=\"so_17225778_17227822_2\">\u2014 the +, -, *, /, and % operators where one operand is a negative zero and the result is\n  zero;</p>\n<p id=\"so_17225778_17227822_3\">\u2014 compound assignment operators based on the above cases.</p>\n<p id=\"so_17225778_17227822_4\">It is unspecified whether these cases actually generate a negative zero or a normal zero,\n  and whether a negative zero becomes a normal zero when stored in an object.</p>\n</blockquote>\n<p>So I would say that <code>unsigned(-0.0)</code> would produce <code>0</code>. At least in C.</p>\n", "LastActivityDate": "2013-06-21T04:45:20.117"}});