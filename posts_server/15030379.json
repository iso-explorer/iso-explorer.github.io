post_cb({"15030413": {"ParentId": "15030379", "CommentCount": "1", "Body": "<p>The code doesn't initialize <code>guess</code> or <code>guesses</code>, so their initial values are unpredictable.</p>\n", "OwnerUserId": "1593860", "PostTypeId": "2", "Id": "15030413", "Score": "3", "CreationDate": "2013-02-22T18:02:00.973", "LastActivityDate": "2013-02-22T18:02:00.973"}, "15030445": {"ParentId": "15030379", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>Per Paragraph 8.5/11 of the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_15030379_15030445_0\">If no initializer is specified for an object, the object is <em>default-initialized</em>; if no initialization is performed, an object with automatic or dynamic storage duration has <strong>indeterminate value</strong>. [ Note: Objects with static or thread storage duration are zero-initialized, see 3.6.2. \u2014end note ]</p>\n</blockquote>\n<p>Paragraph 8.5/6 explains what <em>default-initialized</em> means for different variable types: </p>\n<blockquote>\n<p id=\"so_15030379_15030445_1\">To <em>default-initialize</em> an object of type T means:</p>\n<p id=\"so_15030379_15030445_2\">\u2014 if T is a (possibly cv-qualified) class type (Clause 9), the default constructor for T is called (and the\n  initialization is ill-formed if T has no accessible default constructor);</p>\n<p id=\"so_15030379_15030445_3\">\u2014 if T is an array type, each element is default-initialized;</p>\n<p id=\"so_15030379_15030445_4\">\u2014 <strong>otherwise, no initialization is performed</strong>.</p>\n</blockquote>\n<p>Since <code>T</code> is neither a class type nor an array type in your case (all your default-initialized variables have type <code>int</code>), no initialization is performed and the initial value is indeterminate.</p>\n<p>Moreover, your program has <strong>Undefined Behavior</strong>, since it tries to reads the value of an uninitialized variable. Doing so necessitates an lvalue-to-rvalue conversion (although the Standard does not specify this explicitly, requiring so is likely to be intended, see <strong><a href=\"https://stackoverflow.com/questions/14991219/what-is-the-value-category-of-the-operands-of-c-operators-when-unspecified\">this Q&amp;A on SO</a></strong>), and Paragraph 4/1 of the C++11 Standard mandates:</p>\n<blockquote>\n<p id=\"so_15030379_15030445_5\">A glvalue (3.10) of a non-function, non-array type T can be converted to a prvalue.53 If T is an incomplete type, a program that necessitates this conversion is ill-formed. If the object to which the glvalue refers is not an object of type T and is not an object of a type derived from T, or <strong>if the object is uninitialized, a program that necessitates this conversion has undefined behavior</strong>. If T is a non-class type, the type of the prvalue is the cv-unqualified version of T. Otherwise, the type of the prvalue is T.54</p>\n</blockquote>\n", "OwnerUserId": "1932150", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:01:03.307", "Id": "15030445", "Score": "9", "CreationDate": "2013-02-22T18:03:42.583", "LastActivityDate": "2013-02-22T18:11:23.960"}, "15030379": {"CommentCount": "3", "ViewCount": "296", "CreationDate": "2013-02-22T18:00:00.080", "LastActivityDate": "2013-02-22T18:11:23.960", "Title": "C++ Why does this variable return a random value?", "AcceptedAnswerId": "15030414", "PostTypeId": "1", "Id": "15030379", "Score": "3", "Body": "<p>I have made a basic \"guess my number game\" in c++, and I have added a variable for how many guesses it took the person to guess the number. However when the game ends, a random value for the guesses is shown. Something like 1980046322. I can't figure out why it does this, considering that I haven't put anything extraordinary into my code.</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;cstdlib&gt;\n#include &lt;ctime&gt;\n\nusing namespace std;\n\nint main()\n{\nint randomNumber;\nint guess;\nint guesses;\n\nsrand((unsigned)time(0));\nrandomNumber = (rand()%10)+1;\n\ncout &lt;&lt; \"I am thinking of a number between 1 to 10. Can you guess it?\" &lt;&lt; endl;\n\nwhile(guess != randomNumber){\n    cout &lt;&lt; \"That is not correct, try again.\";\n    guesses++;\n    cin &gt;&gt; guess;\n}\n\nif(guess == randomNumber){\n    cout &lt;&lt; \"Good Job. Guesses: \" &lt;&lt; guesses &lt;&lt; endl;\n    guesses++;\n}\n\nreturn 0;\n}\n</code></pre>\n", "Tags": "<c++><random><int>", "OwnerUserId": "2076521", "AnswerCount": "6"}, "15030447": {"ParentId": "15030379", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>You didn't initialize your <code>guesses</code> variable to zero.</p>\n<p>If you compile your code with g++, for example, with the following flags the problem becomes obvious:</p>\n<pre><code>$ g++ -O2 -Wall foo.cpp \nfoo.cpp: In function \u2018int main()\u2019:\nfoo.cpp:25:38: warning: \u2018guesses\u2019 may be used uninitialized in this function [-Wmaybe-uninitialized]\n</code></pre>\n<p>Note that the optimization flag was needed in addition to the warning flag to trigger the warning, at least with g++ 4.7.2.</p>\n<p>Moral of the story: enable compiler warnings.</p>\n", "OwnerUserId": "69998", "LastEditorUserId": "69998", "LastEditDate": "2013-02-22T18:10:17.297", "Id": "15030447", "Score": "1", "CreationDate": "2013-02-22T18:03:46.267", "LastActivityDate": "2013-02-22T18:10:17.297"}, "15030414": {"ParentId": "15030379", "CommentCount": "0", "Body": "<p>You have not initialized some variables that you then use before assigning any value to them. They start with an unspecified value, which looks random. You can fix it like this</p>\n<pre><code>int guess = 0;\nint guesses = 0;\n</code></pre>\n", "OwnerUserId": "661519", "PostTypeId": "2", "Id": "15030414", "Score": "4", "CreationDate": "2013-02-22T18:02:05.450", "LastActivityDate": "2013-02-22T18:02:05.450"}, "15030437": {"ParentId": "15030379", "CommentCount": "0", "Body": "<p>You don't initialise guesses to 0. It will therefore contain whatever was in the memory address that it gets to start with</p>\n", "OwnerUserId": "1703195", "PostTypeId": "2", "Id": "15030437", "Score": "2", "CreationDate": "2013-02-22T18:03:17.140", "LastActivityDate": "2013-02-22T18:03:17.140"}, "bq_ids": {"n4140": {"so_15030379_15030445_1": {"section_id": 3286, "quality": 1.0, "length": 4}, "so_15030379_15030445_3": {"section_id": 3286, "quality": 1.0, "length": 5}, "so_15030379_15030445_5": {"section_id": 8, "quality": 0.5135135135135135, "length": 19}, "so_15030379_15030445_0": {"section_id": 3291, "quality": 0.76, "length": 19}, "so_15030379_15030445_2": {"section_id": 3286, "quality": 0.9230769230769231, "length": 12}}, "n3337": {"so_15030379_15030445_1": {"section_id": 3156, "quality": 1.0, "length": 4}, "so_15030379_15030445_3": {"section_id": 3156, "quality": 1.0, "length": 5}, "so_15030379_15030445_5": {"section_id": 5, "quality": 0.918918918918919, "length": 34}, "so_15030379_15030445_0": {"section_id": 3161, "quality": 0.84, "length": 21}, "so_15030379_15030445_2": {"section_id": 3156, "quality": 1.0, "length": 13}}, "n4659": {"so_15030379_15030445_3": {"section_id": 4048, "quality": 1.0, "length": 5}, "so_15030379_15030445_5": {"section_id": 8, "quality": 0.5135135135135135, "length": 19}, "so_15030379_15030445_0": {"section_id": 4053, "quality": 0.76, "length": 19}, "so_15030379_15030445_2": {"section_id": 4049, "quality": 0.6923076923076923, "length": 9}}}, "15030443": {"ParentId": "15030379", "CommentCount": "2", "Body": "<p>You do not initialize guesses and therefore you have no idea what the value will be.  C/C++ doesn't make any guarantee about what he value of an uninitialized variable is. </p>\n<p>It is good practice to always initialize all values</p>\n<p><code>int guesses = 0;</code></p>\n", "OwnerUserId": "149458", "PostTypeId": "2", "Id": "15030443", "Score": "2", "CreationDate": "2013-02-22T18:03:34.967", "LastActivityDate": "2013-02-22T18:03:34.967"}});