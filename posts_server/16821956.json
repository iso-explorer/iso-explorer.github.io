post_cb({"16822005": {"ParentId": "16821956", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>This is the same as char * * * cp except that all the pointers are const, except one. Since char***cp is a pointer to a pointer to a pointer your example is the same but it is a pointer to a const pointer to a const pointer</p>\n", "OwnerUserId": "2167655", "LastEditorUserId": "2167655", "LastEditDate": "2013-05-29T21:39:13.993", "Id": "16822005", "Score": "1", "CreationDate": "2013-05-29T19:10:18.733", "LastActivityDate": "2013-05-29T21:39:13.993"}, "16821998": {"ParentId": "16821956", "CommentCount": "0", "Body": "<p>From <a href=\"http://www.cdecl.org\" rel=\"nofollow\">cdecl.org</a>:</p>\n<blockquote>\n<p id=\"so_16821956_16821998_0\">declare cp as pointer to const pointer to const pointer to const char</p>\n</blockquote>\n", "OwnerUserId": "970543", "PostTypeId": "2", "Id": "16821998", "Score": "1", "CreationDate": "2013-05-29T19:09:49.197", "LastActivityDate": "2013-05-29T19:09:49.197"}, "bq_ids": {"n4140": {"so_16821956_16821998_0": {"section_id": 558, "quality": 0.875, "length": 7}, "so_16821956_16821988_0": {"section_id": 3195, "quality": 0.84, "length": 21}}, "n3337": {"so_16821956_16821998_0": {"section_id": 549, "quality": 0.875, "length": 7}, "so_16821956_16821988_0": {"section_id": 3069, "quality": 0.84, "length": 21}}, "n4659": {"so_16821956_16821998_0": {"section_id": 581, "quality": 0.875, "length": 7}, "so_16821956_16821988_0": {"section_id": 3957, "quality": 0.84, "length": 21}}}, "16821956": {"CommentCount": "1", "ViewCount": "144", "CreationDate": "2013-05-29T19:07:11.283", "LastActivityDate": "2013-05-29T21:39:13.993", "Title": "Confusing pointer declaration", "AcceptedAnswerId": "16822002", "PostTypeId": "1", "Id": "16821956", "Score": "3", "Body": "<p>I'm reading appendix A of Accelerated C++. There the authors show an example of a declaration which looks like this:</p>\n<pre><code>const char * const * const * cp;\n</code></pre>\n<p>They say const char is the specifier and * const * const * cp is the declarator. I'm confused about the purpose of the extra const and *s. Is this a declaration of a const pointer to a const char?</p>\n", "Tags": "<c++><pointers>", "OwnerUserId": "2433857", "AnswerCount": "4"}, "16821988": {"ParentId": "16821956", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>As we can see from <a href=\"http://cdecl.ridiculousfish.com/?q=const%20char%20%2a%20const%20%2a%20const%20%2a%20cp;\" rel=\"nofollow\">cdecl</a>, <code>cp</code> is a <code>pointer</code> to <code>const pointer</code> to <code>const pointer</code> to <code>const char</code>.</p>\n<p>You can see this by breaking it down right-to-left:</p>\n<pre><code>const char * const * const * cp;\n                             cp is\n                           a pointer\n                   to const pointer\n           to const pointer\nto const char\n</code></pre>\n<p>Also, the standard (\u00a7 8) says that:</p>\n<blockquote>\n<p id=\"so_16821956_16821988_0\">The speci\ufb01ers indicate the type, storage class or other properties\n  of the entities being declared. The declarators specify the names\n  of these entities and (optionally) modify the type of the speci\ufb01ers\n  with operators such as * (pointer to) and () (function returning).</p>\n</blockquote>\n", "OwnerUserId": "102", "LastEditorUserId": "102", "LastEditDate": "2013-05-29T19:23:18.630", "Id": "16821988", "Score": "4", "CreationDate": "2013-05-29T19:09:19.537", "LastActivityDate": "2013-05-29T19:23:18.630"}, "16822002": {"ParentId": "16821956", "CommentCount": "7", "Body": "<p>It's the declaration of</p>\n<ul>\n<li>a pointer</li>\n<li>to a const pointer</li>\n<li>to a const pointer</li>\n<li>to <code>const char</code></li>\n</ul>\n<p>Thus you may change <code>cp</code>, but you may not change any of</p>\n<pre><code>*cp\n**cp\n***cp\n</code></pre>\n", "OwnerUserId": "1011995", "PostTypeId": "2", "Id": "16822002", "Score": "7", "CreationDate": "2013-05-29T19:10:01.200", "LastActivityDate": "2013-05-29T19:10:01.200"}});