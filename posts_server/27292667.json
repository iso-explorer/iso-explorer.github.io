post_cb({"bq_ids": {"n4140": {"so_27292667_27292851_0": {"length": 14, "quality": 1.0, "section_id": 6185}}, "n4659": {"so_27292667_27292851_0": {"length": 11, "quality": 0.7857142857142857, "section_id": 7687}}}, "27292667": {"ViewCount": "97", "Body": "<p>I'm trying to get the actual object's pointer from a pointer to member variable.</p>\n<p>Yes, I know there is <code>offsetof</code> macro, but it needs the name of a member variable, not the pointer to the member variable.</p>\n<p>It actually was not difficult to implement but I'm not sure it's 100% standard conformant code.</p>\n<pre><code>template &lt;class T, class M, M T::*Ptr&gt;\nconstexpr std::ptrdiff_t offset_to_member()\n{\n  return static_cast&lt;char*&gt;(static_cast&lt;void*&gt;(&amp;(static_cast&lt;T*&gt;(nullptr)-&gt;*Ptr)))\n         - static_cast&lt;char*&gt;(nullptr);\n}\n\ntemplate &lt;class T, class M, M T::*Ptr&gt;\nconstexpr T* object_ptr_from_member(M *__ptr)\n{\n  // reinterpret_cast is not allowed in constexpr function\n  return static_cast&lt;T*&gt;(static_cast&lt;void*&gt;(\n           static_cast&lt;char*&gt;(static_cast&lt;void*&gt;(__ptr)) - offset_to_member&lt;T, M, Ptr&gt;()));\n}\n</code></pre>\n<p>result : <a href=\"http://ideone.com/1Z2nIR\" rel=\"nofollow\">http://ideone.com/1Z2nIR</a></p>\n<p>Clang++ and g++ both compiled the code without any warning, but I need more than 'it seems working'.</p>\n<p>Is the code valid in c++11 standard?</p>\n", "AcceptedAnswerId": "27292851", "Title": "Getting object's address from its pointer to member variable", "CreationDate": "2014-12-04T11:16:38.630", "Id": "27292667", "CommentCount": "3", "PostTypeId": "1", "LastActivityDate": "2014-12-04T11:32:14.690", "Score": "2", "OwnerUserId": "1030861", "Tags": "<c++><pointers>", "AnswerCount": "1"}, "27292851": {"Id": "27292851", "PostTypeId": "2", "LastEditDate": "2014-12-04T11:32:14.690", "CommentCount": "4", "LastEditorUserId": "3647361", "LastActivityDate": "2014-12-04T11:32:14.690", "CreationDate": "2014-12-04T11:26:00.017", "ParentId": "27292667", "Score": "2", "Body": "<pre><code>static_cast&lt;T*&gt;(nullptr)-&gt;*Ptr\n</code></pre>\n<p>Equivalent to <code>(*static_cast&lt;T*&gt;(nullptr)).*Ptr</code> according to [expr.mptr.oper]/3, which triggers undefined behavior.<br> And not <code>constexpr</code> (precisely because of UB) - [expr.const]/2:</br></p>\n<blockquote>\n<p id=\"so_27292667_27292851_0\">A <em>conditional-expression</em> <code>e</code> is a <em>core constant expression</em> unless the\n  evaluation of <code>e</code>, following the rules of the abstract machine, would\n  evaluate one of the following expressions:</p>\n<ul>\n<li>an operation that would have undefined behavior.</li>\n</ul>\n</blockquote>\n", "OwnerUserId": "3647361"}});