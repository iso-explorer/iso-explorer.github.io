post_cb({"41992244": {"ParentId": "41992207", "PostTypeId": "2", "CommentCount": "0", "Body": "<p><a href=\"http://en.cppreference.com/w/cpp/algorithm/merge\" rel=\"nofollow noreferrer\">std::merge</a> requires that the two input lists be sorted, so it does take advantage of this. There is no need to build your own.</p>\n<p>From the standard (N3242 \u00a725.4.4.2):</p>\n<blockquote>\n<p id=\"so_41992207_41992244_0\">Requires: The ranges [first1,last1) and [first2,last2) shall be sorted with respect to operator&lt;\n  or comp. The resulting range shall not overlap with either of the original ranges.</p>\n</blockquote>\n", "OwnerUserId": "1922722", "LastEditorUserId": "1922722", "LastEditDate": "2017-02-02T00:23:11.577", "Id": "41992244", "Score": "1", "CreationDate": "2017-02-02T00:17:16.467", "LastActivityDate": "2017-02-02T00:23:11.577"}, "41992333": {"ParentId": "41992207", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>For starters the standard container <code>std::list</code> has member functions <code>merge</code> that accept a comparison function object. They are</p>\n<pre><code>template &lt;class Compare&gt; \nvoid merge(list&amp; x, Compare comp); \ntemplate &lt;class Compare&gt; \nvoid merge(list&amp;&amp; x, Compare comp);\n</code></pre>\n<p>So you can use them.</p>\n<p>Thus you have a choice either to use the standard algorithm std::merge or to use these member functions of the std::list.</p>\n<p>Take into account that you should use the same comparison function <code>sort_func()</code> that was used to sort the lists if you want that the result list would be also ordered according to this function.</p>\n<p>Here is a demonstrative program that shows how the task can be done using only native methods of the class <code>std::list</code>. Instead of your comparison function there is used function object <code>std::greater</code> declared in header <code>&lt;functional&gt;</code></p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;list&gt;\n#include &lt;functional&gt;\n\nint main() \n{\n    std::list&lt;int&gt; list1 = { 3, 1, 5, 9, 7 };\n    std::list&lt;int&gt; list2 = { 8, 0, 4, 6, 2 };\n\n    list1.sort( std::greater&lt;int&gt;() );\n    list2.sort( std::greater&lt;int&gt;() );\n\n    std::list&lt;int&gt; list( list1 );\n\n    list.merge( list2, std::greater&lt;int&gt;() );\n\n    for ( int x : list ) std::cout &lt;&lt; x &lt;&lt; ' ';\n    std::cout &lt;&lt; std::endl;\n\n    return 0;\n}\n</code></pre>\n<p>The program output is</p>\n<pre><code>9 8 7 6 5 4 3 2 1 0 \n</code></pre>\n", "OwnerUserId": "2877241", "LastEditorUserId": "2877241", "LastEditDate": "2017-02-02T00:44:49.383", "Id": "41992333", "Score": "0", "CreationDate": "2017-02-02T00:28:23.553", "LastActivityDate": "2017-02-02T00:44:49.383"}, "41992207": {"CommentCount": "0", "ViewCount": "89", "CreationDate": "2017-02-02T00:13:18.190", "LastActivityDate": "2017-02-02T00:44:49.383", "Title": "C++: std::merge => using for sorted lists", "AcceptedAnswerId": "41992253", "PostTypeId": "1", "Id": "41992207", "Score": "0", "Body": "<p>I got two sorted lists. They are sorted like this, after a function (sort_func), which I defined:</p>\n<pre><code>std::sort(list1.begin(), list1.end(), sort_func());\n</code></pre>\n<p>Now I want to merge these two lists. That should be easy and efficient, because they are both already sorted the same way.</p>\n<p>If I use <code>std::merge</code>, does it take the advantage of the already sorted lists? Or should I write my own merge function instead to be faster?</p>\n<p>I do this at the moment:</p>\n<pre><code>std::merge(list1.begin(), list1.end(), list2.begin(), list2.end(), std::back_inserter(list), sort_func());\n</code></pre>\n<p>Thanks for your advice!</p>\n", "Tags": "<c++><sorting><merge>", "OwnerUserId": "2813152", "AnswerCount": "3"}, "41992253": {"ParentId": "41992207", "CommentCount": "0", "Body": "<p>A precondition of using <code>std::merge</code> is that both lists are already sorted. So yes, it takes advantage of this.</p>\n<blockquote>\n<p id=\"so_41992207_41992253_0\">Merges two sorted ranges [first1, last1) and [first2, last2) into one sorted range beginning at d_first. </p>\n</blockquote>\n", "OwnerUserId": "5339807", "PostTypeId": "2", "Id": "41992253", "Score": "3", "CreationDate": "2017-02-02T00:18:19.497", "LastActivityDate": "2017-02-02T00:18:19.497"}, "bq_ids": {"n4140": {"so_41992207_41992244_0": {"section_id": 1435, "quality": 0.6875, "length": 11}}, "n3337": {"so_41992207_41992244_0": {"section_id": 1429, "quality": 0.6875, "length": 11}}, "n4659": {"so_41992207_41992244_0": {"section_id": 1572, "quality": 0.625, "length": 10}}}});