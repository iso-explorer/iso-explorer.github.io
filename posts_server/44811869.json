post_cb({"44811931": {"ParentId": "44811869", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_44811869_44811931_0\">What things are included in sizeof, and what things are not?</p>\n</blockquote>\n<p><code>sizeof()</code> only includes things that have to be stored in memory as part of each instance of the type. (For a class or structure, it returns the amount of memory that needs to be allocated for an instance.)</p>\n<p>Since the function is the same for every instance of <code>struct y</code>, it's not stored as part of the structure -- defining it there just allows the function to be called as a method on the structure. If it were a function pointer, though, the pointer would be part of the structure, and would contribute to its size.</p>\n", "OwnerUserId": "149341", "PostTypeId": "2", "Id": "44811931", "Score": "6", "CreationDate": "2017-06-28T20:24:09.960", "LastActivityDate": "2017-06-28T20:24:09.960"}, "44811869": {"CommentCount": "9", "ViewCount": "132", "PostTypeId": "1", "ClosedDate": "2017-06-29T23:42:19.990", "LastEditorUserId": "2455888", "CreationDate": "2017-06-28T20:20:36.890", "LastActivityDate": "2017-06-28T21:08:38.840", "Title": "Why doesn't sizeof care about functions?", "AcceptedAnswerId": "44811931", "LastEditDate": "2017-06-28T20:22:33.913", "Id": "44811869", "Score": "-3", "Body": "<p>Given the following, you'll see that x and y are the same size, but y has an additional function. What things are included in sizeof, and what things are not?</p>\n<pre><code>struct x\n{\n    double a;\n    double b;\n    double c;\n    double d;\n};\nstruct y\n{\n    double a;\n    double b;\n    double c;\n    double d;\n    y(double q, double r, double s, double t) : a(q), b(r), c(s), d(t) {};\n};\nstd::cout &lt;&lt; sizeof(x)-sizeof(y) &lt;&lt;std::endl;\n</code></pre>\n", "Tags": "<c++>", "OwnerUserId": "1763955", "AnswerCount": "2"}, "44812577": {"ParentId": "44811869", "CommentCount": "0", "Body": "<blockquote id=\"so_44811869_44812577_0\">\n<strong>5.3.3 <code>Sizeof</code>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[expr.sizeof]</strong><br><br>\n1\u00a0\u00a0\u00a0\u00a0\u00a0The <strong><code>sizeof</code></strong> operator yields the number of bytes in the object representation of its operand. <br>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0The operand is\neither an expression, which is an unevaluated operand (Clause 5), or a<br>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0parenthesized <em>type-id</em>. The <strong><code>sizeof</code></strong>\noperator shall not be applied to an expression that has<br>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0function or incomplete type, to an enumeration\ntype whose underlying type is not fixed<br>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0before all its enumerators have been declared, to the parenthesized\nname of such types, or to<br>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0a glvalue that designates a bit-field. <strong><code>sizeof(char)</code></strong>, <strong><code>sizeof(signed char)</code></strong> and\n<br>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<strong><code>sizeof(unsigned char)</code></strong> are 1. The result of <strong><code>sizeof</code></strong></br></br></br></br></br></br></br></br></blockquote> applied to any other fundamental type<br>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(3.9.1) is\nimplementation-defined. [ <em>Note</em>: in particular, <strong><code>sizeof(bool)</code></strong>,<br>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<strong><code>sizeof(char16_t)</code></strong>, <strong><code>sizeof(char32_t)</code></strong>, and\n<strong><code>sizeof(wchar_t)</code></strong> are implementation-defined.<sup>75</sup><br>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2014 <em>end note</em> ] [ <em>Note</em>: See 1.7 for the definition of <em>byte</em>\nand 3.9 for the definition of <em>object<br>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0representation</br></em>. \u2014 <em>end note</em> ]<br><br>\n2\u00a0\u00a0\u00a0\u00a0\u00a0When applied to a reference or a reference type, the result is the size of the referenced type.<br>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0When applied\nto a class, the result is the number of bytes in an object of that class<br>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0including any padding required for\nplacing objects of that type in an array. The size of a<br>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0most derived class shall be greater than zero (1.8).\nThe result of applying <strong><code>sizeof</code></strong> to a base<br>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0class subobject is the size of the base class type.<sup>76</sup> When applied\nto an array, the result is<br>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0the total number of bytes in the array. This implies that the size of an array of <em>n</em>\nelements is <em>n</em><br>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0times the size of an element.<br><br>\n3\u00a0\u00a0\u00a0\u00a0\u00a0The <strong><code>sizeof</code></strong> operator can be applied to a pointer to a function, but shall not be applied directly <br>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0to a function.\n</br></br></br></br></br></br></br></br></br></br></br></br></br></br>\n<p><sup><em><a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4296.pdf\" rel=\"nofollow noreferrer\">C++ Online Working Draft</a></em></sup></p>\n<p>In C++, no <em>sane</em> implementation would store a redundant copy the function's machine code within an object instance; not only would it be a massive waste of space, most architectures (that I'm aware of, anyway) don't allow you to mix machine code with data that way, so it doesn't contribute to the size of the object representation.  </p>\n", "OwnerUserId": "134554", "PostTypeId": "2", "Id": "44812577", "Score": "2", "CreationDate": "2017-06-28T21:08:38.840", "LastActivityDate": "2017-06-28T21:08:38.840"}, "bq_ids": {"n4140": {"so_44811869_44812577_0": {"section_id": 6076, "quality": 0.8793103448275862, "length": 51}}, "n3337": {"so_44811869_44812577_0": {"section_id": 5844, "quality": 0.8620689655172413, "length": 50}}, "n4659": {"so_44811869_44812577_0": {"section_id": 7572, "quality": 0.6551724137931034, "length": 38}}}});