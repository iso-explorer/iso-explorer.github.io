post_cb({"36157337": {"ViewCount": "140", "Body": "<p>I'm migrating my code from windows to Linux. There is no type named \"__int64\" on Linux, so I tried to define it myself with alias. My code is as follows:</p>\n<pre><code>#include &lt;cstdint&gt;\n\n#if !defined(__int64)\ntypedef int64_t __int64;\n#endif\n\nint main(int argc, char** argv)\n{\n    unsigned __int64 ii64 = 0; // Error\n    return 0;\n};\n</code></pre>\n<p>When I compiled it, I got the following error:</p>\n<blockquote>\n<p id=\"so_36157337_36157337_0\">main.cpp: In function \u2018int main(int, char**)\u2019: main.cpp:10:20: error:\n  expected initializer before \u2018ii64\u2019</p>\n</blockquote>\n<p>I know that I can replace \"unsigned __int64\" with \"uint64_t\" or defining a new type, but why the preceding code cannot be compiled?</p>\n", "Title": "Why I cannot qualify a aliased type with \"unsigned\"?", "CreationDate": "2016-03-22T14:36:46.030", "LastActivityDate": "2016-03-22T15:43:05.827", "CommentCount": "5", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2016-03-22T15:43:05.827", "LastEditorUserId": "5624602", "Id": "36157337", "Score": "4", "OwnerUserId": "3385720", "Tags": "<c++><linux><windows>", "AnswerCount": "4"}, "36157603": {"Id": "36157603", "PostTypeId": "2", "Body": "<p>Because typedef is not a macro. It is a new type! And you can not construct the types like this.</p>\n<p>When you say <code>unsigned int</code>, it is not the same sematics as <code>const int</code>. <code>const</code> is a so-called <em>type qualifier</em>. It means, it does not specify a new type, but adds some property to already existing type. However, <code>unsigned</code> is not a type quialifier. <code>unsigned int</code> is a type on it's own. </p>\n", "LastActivityDate": "2016-03-22T14:47:38.450", "CommentCount": "3", "CreationDate": "2016-03-22T14:47:38.450", "ParentId": "36157337", "Score": "2", "OwnerUserId": "5245033"}, "36158223": {"Id": "36158223", "PostTypeId": "2", "Body": "<p>Apart from other things, that's because there is no type <code>unsiged int64_t</code>. Macro doesn't work for the same reason. But if you <code>#define __int64 int</code>, this will work, because there is a type <code>unsigned int</code>.</p>\n", "LastActivityDate": "2016-03-22T15:13:21.217", "CommentCount": "0", "CreationDate": "2016-03-22T15:13:21.217", "ParentId": "36157337", "Score": "0", "OwnerUserId": "2321326"}, "bq_ids": {"n4140": {"so_36157337_36157694_0": {"length": 14, "quality": 0.9333333333333333, "section_id": 5427}, "so_36157337_36157694_1": {"length": 8, "quality": 1.0, "section_id": 5427}}, "n3337": {"so_36157337_36157694_0": {"length": 14, "quality": 0.9333333333333333, "section_id": 5222}, "so_36157337_36157694_1": {"length": 8, "quality": 1.0, "section_id": 5222}}, "n4659": {"so_36157337_36157694_0": {"length": 12, "quality": 0.8, "section_id": 6855}, "so_36157337_36157694_1": {"length": 8, "quality": 1.0, "section_id": 6855}}}, "36157792": {"Id": "36157792", "PostTypeId": "2", "Body": "<p>To start with, \"unsigned int\" is a type, but \"unsigned int64_t\" is not.</p>\n", "LastEditorUserId": "4462397", "LastActivityDate": "2016-03-22T15:03:54.667", "Score": "0", "CreationDate": "2016-03-22T14:55:53.597", "ParentId": "36157337", "CommentCount": "2", "OwnerUserId": "4462397", "LastEditDate": "2016-03-22T15:03:54.667"}, "36157694": {"Id": "36157694", "PostTypeId": "2", "Body": "<p>See the standard 7.1.6/2:</p>\n<blockquote>\n<p id=\"so_36157337_36157694_0\">As a general rule, at most one type-specifier is allowed in the\n  complete decl-specifier-seq of a declaration or in a\n  type-specifier-seq or trailing-type-specifier-seq. The only exceptions\n  to this rule are the following:</p>\n</blockquote>\n<p></p>\n<blockquote>\n<p id=\"so_36157337_36157694_1\">signed or unsigned can be combined with char, long, short, or int.</p>\n</blockquote>\n<p>Note that this doesn't mean unsigned can be combined with a typedef that might eventually be one of those types, it can only be combined with those other types directly.</p>\n<p>Further, bear in mind that <code>__int64</code> is reserved for the compiler so defining it yourself is technically illegal. You're much better off using the standard <code>int64_t</code> and <code>uint64_t</code> types.</p>\n", "LastActivityDate": "2016-03-22T14:51:56.980", "CommentCount": "1", "CreationDate": "2016-03-22T14:51:56.980", "ParentId": "36157337", "Score": "4", "OwnerUserId": "251738"}});