post_cb({"26761385": {"CommentCount": "0", "AcceptedAnswerId": "26761386", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2014-11-05T15:51:38.090", "LastActivityDate": "2015-09-21T12:04:16.527", "LastEditDate": "2017-05-23T11:59:31.693", "ViewCount": "343", "FavoriteCount": "1", "Title": "Is rule 3 in section 3.3.7/1 from N3936 redundant?", "Id": "26761385", "Score": "7", "Body": "<p>I recently <a href=\"https://stackoverflow.com/q/26681873/1708801\">answered a question</a> dealing with a violation of <a href=\"https://github.com/cplusplus/draft/blob/master/papers/n4140.pdf\" rel=\"nofollow noreferrer\">draft C++14 standard: N4140</a> section <code>3.3.7</code> <em>Class scope</em> paragraph <code>1</code> rule <code>2</code> which says:</p>\n<blockquote>\n<p id=\"so_26761385_26761385_0\">A name N used in a class S shall refer to the same declaration in its\n  context and when re-evaluated in the completed scope of S. No\n  diagnostic is required for a violation of this rule.</p>\n</blockquote>\n<p>at the time rule <code>3</code> also seemed relevant and it says:</p>\n<blockquote>\n<p id=\"so_26761385_26761385_1\">If reordering member declarations in a class yields an alternate valid\n  program under (1) and (2), the program is ill-formed, no diagnostic is\n  required.</p>\n</blockquote>\n<p>My initial reaction is that rule <code>3</code> seems redundant and is really just a clarification of rule <code>2</code> and does not cover any cases not already covered. A reordering that results in a alternate valid program would also have to violate rule <code>2</code>.</p>\n<p>So is rule <code>3</code> redundant or is there some edge cases that requires both rules?</p>\n", "Tags": "<c++><scope><language-lawyer><c++14>", "OwnerUserId": "1708801", "AnswerCount": "1"}, "26761386": {"ParentId": "26761385", "PostTypeId": "2", "CommentCount": "10", "CreationDate": "2014-11-05T15:51:38.090", "Score": "8", "LastEditorUserId": "1708801", "LastEditDate": "2014-11-06T10:23:58.553", "Id": "26761386", "OwnerUserId": "1708801", "Body": "<p>According to <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_active.html#1875\">Defect Report 1875: Reordering declarations in class scope</a> rule <code>3</code> is redundant and the proposed solution is to remove rule <code>3</code>, it says:</p>\n<blockquote>\n<p id=\"so_26761385_26761386_0\">The need for rule #3 is not clear; it would seem that any\n  otherwise-valid reordering would have to violate rule #2 in order to\n  yield a different interpretation. Taken literally, rule #3 would also\n  apply to simply reordering nonstatic data members with no name\n  dependencies at all. Can it be simply removed?</p>\n</blockquote>\n<p>and the proposed solution is:</p>\n<blockquote>\n<p id=\"so_26761385_26761386_1\">Delete the third item of 3.3.7 [basic.scope.class] paragraph 1 and\n  renumber the succeeding items</p>\n</blockquote>\n<p>Although this defect report seems to confirm my initial suspicious I am left with a nagging feeling that perhaps rule <code>3</code> is bit broader after all. Section <code>3.3.7</code> includes the following example:</p>\n<pre><code>enum { i = 1 };\n\nclass X {\n  char v[i]; // error: i refers to ::i\n             // but when reevaluated is X::i\n  int f() { return sizeof(c); } // OK: X::c\n  char c;\n  enum { i = 2 };\n};\n</code></pre>\n<p>which violates both rule <code>2</code> and <code>3</code> but a small tweak:</p>\n<pre><code>enum { i = 1 };\n\nclass X {\n  enum { i = 2 };\n  char v[i];  // no longer refers to ::i \n              // but reordering can cause it to refer to ::i again\n\n  int f() { return sizeof(c); } // OK: X::c\n  char c;\n};\n</code></pre>\n<p>seems to no longer violate rule <code>2</code> but sure seems to violate rule <code>3</code>. I would consider this code example to be troublesome since a reordering of the members could easily cause the code to be back in violation of rule 2 but no diagnostic is required to indicate this which makes this code rather fragile.</p>\n<p><b>Update</b></p>\n<p>As far as I understand rule <code>3</code> does not apply to this example mentioned by Casey in the comment:</p>\n<pre><code>class X { int a; int b; };\n</code></pre>\n<p>because even though there is more than one valid ordering this case does not fall under both rule <code>1</code> and <code>2</code> which rule <code>3</code> requires:</p>\n<blockquote>\n<p id=\"so_26761385_26761386_2\">alternate valid program under (1) and (2)</p>\n</blockquote>\n", "LastActivityDate": "2014-11-06T10:23:58.553"}, "bq_ids": {"n4140": {"so_26761385_26761385_1": {"section_id": 7070, "quality": 1.0, "length": 11}, "so_26761385_26761385_0": {"section_id": 7070, "quality": 1.0, "length": 15}}, "n3337": {"so_26761385_26761385_1": {"section_id": 6814, "quality": 1.0, "length": 11}, "so_26761385_26761385_0": {"section_id": 6814, "quality": 1.0, "length": 15}}, "n4659": {"so_26761385_26761385_0": {"section_id": 8568, "quality": 1.0, "length": 15}}}});