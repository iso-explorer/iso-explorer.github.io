post_cb({"15208300": {"Id": "15208300", "PostTypeId": "2", "Body": "<p>The compiler will prefer non template function in overload resolution if the functions are both an exact match, including <code>cv</code> qualifiers.</p>\n<p>Therefore the non template will be picked here, even though the templated function essentially comes to the same.</p>\n<p>EDIT:</p>\n<p>In standard draft N3485 I have found this:</p>\n<p><strong>13.3.3 Best viable function [over.match.best]</strong></p>\n<blockquote>\n<p id=\"so_15208198_15208300_0\">Given these definitions, a viable function F1 is defined to be a <em>better</em> function than another viable function F2 if for all arguments i, ICSi(F1) is not a worse conversion sequence than ICSi(F2), and then</p>\n</blockquote>\n<p>...</p>\n<blockquote>\n<p id=\"so_15208198_15208300_1\">\u2014 <em>F1 is a non-template function</em> and F2 is a function template specialization, or, if not that,</p>\n<p id=\"so_15208198_15208300_2\">\u2014 F1 and F2 are function template specializations, and the function template for F1 is more specialized than the template for F2 according to the partial ordering rules described in 14.5.6.2.</p>\n</blockquote>\n<p>...</p>\n", "LastEditorUserId": "174614", "LastActivityDate": "2013-03-04T18:38:34.320", "Score": "4", "CreationDate": "2013-03-04T18:21:01.717", "ParentId": "15208198", "CommentCount": "1", "OwnerUserId": "174614", "LastEditDate": "2013-03-04T18:38:34.320"}, "15208198": {"ViewCount": "530", "Body": "<p>In Section <code>2.4 Overloading Function Templates</code> of the book \"C++ Templates - The Complete Guide\" you'll find the following example :</p>\n<pre><code>    // maximum of two int values\n    inline int const&amp; max (int const&amp; a, int const&amp; b)\n    {\n       return a&lt;b?b:a;\n    }\n    // maximum of two values of any type\n    template &lt;typename T&gt;\n    inline T const&amp; max (T const&amp; a, T const&amp; b)\n    {\n       return a&lt;b?b:a;\n    }\n    // maximum of three values of any type\n    template &lt;typename T&gt;\n    inline T const&amp; max (T const&amp; a, T const&amp; b, T const&amp; c)\n    {\n       return max (max(a,b), c);\n    }\n    int main()\n    {\n       ::max(7, 42); // calls the nontemplate for two ints   (1)\n    } \n</code></pre>\n<p>However in B.2 Simplified Overloading Resolution of Appendix B, the author states:</p>\n<blockquote>\n<p id=\"so_15208198_15208198_0\">Note that overload resolution occurs <em>after</em> template argument\n  deduction, ...                                                             (2)</p>\n</blockquote>\n<p>According to <code>(2)</code>, <code>::max(7,42)</code> should call <code>max&lt;int&gt;</code> by argument deduction.   </p>\n", "AcceptedAnswerId": "15208348", "Title": "There seems to be a contradiction in the book \"C++ Templates - The Complete Guide\"", "CreationDate": "2013-03-04T18:14:43.837", "Id": "15208198", "CommentCount": "2", "PostTypeId": "1", "LastActivityDate": "2013-03-04T18:44:03.213", "Score": "2", "OwnerUserId": "1042389", "Tags": "<c++><templates><templates-deduction>", "AnswerCount": "4"}, "15208571": {"Id": "15208571", "PostTypeId": "2", "Body": "<p>Per Paragraph 13.3.3/1 (\"Best Viable Function\" in the context of overload resolution) of the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_15208198_15208571_0\">Define ICSi(F) as follows:</p>\n<p id=\"so_15208198_15208571_1\">\u2014 if F is a static member function, ICS1 (F) is defined such that ICS1 (F) is neither better nor worse than\n  ICS1 (G) for any function G, and, symmetrically, ICS1 (G) is neither better nor worse than ICS1 (F)132;\n  otherwise,</p>\n<p id=\"so_15208198_15208571_2\">\u2014 let ICSi(F) denote the implicit conversion sequence that converts the i-th argument in the list to the\n  type of the i-th parameter of viable function F. 13.3.3.1 defines the implicit conversion sequences and\n  13.3.3.2 defines what it means for one implicit conversion sequence to be a better conversion sequence\n  or worse conversion sequence than another.</p>\n<p id=\"so_15208198_15208571_3\">Given these definitions, <strong>a viable function F1 is defined to be a better function than another viable function\n  F2 if</strong> for all arguments i, ICSi(F1) is not a worse conversion sequence than ICSi(F2), and then</p>\n<p id=\"so_15208198_15208571_4\">\u2014 for some argument j, ICSj(F1) is a better conversion sequence than ICSj(F2), or, if not that,</p>\n<p id=\"so_15208198_15208571_5\">\u2014 the context is an initialization by user-defined conversion (see 8.5, 13.3.1.5, and 13.3.1.6) and the\n  standard conversion sequence from the return type of F1 to the destination type (i.e., the type of the\n  entity being initialized) is a better conversion sequence than the standard conversion sequence from\n  the return type of F2 to the destination type. [...]</p>\n<p id=\"so_15208198_15208571_6\">\u2014 <strong>F1 is a non-template function and F2 is a function template specialization</strong>, or, if not that,</p>\n<p id=\"so_15208198_15208571_7\">\u2014 F1 and F2 are function template specializations, and the function template for F1 is more specialized\n  than the template for F2 according to the partial ordering rules described in 14.5.6.2.</p>\n</blockquote>\n<p>This means that in the context of overload resolution, when a function generated by instantiating a function template (therefore, after type deduction) is an equally good match as a non-template function, the non-template function is preferred.</p>\n", "LastActivityDate": "2013-03-04T18:35:07.173", "CommentCount": "0", "CreationDate": "2013-03-04T18:35:07.173", "ParentId": "15208198", "Score": "1", "OwnerUserId": "1932150"}, "15208348": {"Id": "15208348", "PostTypeId": "2", "Body": "<p>After template argument deduction overload resolution occurs between</p>\n<pre><code>1) inline int const&amp; max (int const&amp; a, int const&amp; b);\n</code></pre>\n<p>and</p>\n<pre><code>2) template &lt;&gt;\n   inline int const&amp; max (int const&amp; a, int const&amp; b)\n</code></pre>\n<p>In this situation 1) is called as specified in C++ standard 13.3.3 par. 1 (<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3092.pdf\" rel=\"nofollow\">Draft n3092</a>).</p>\n<p>Msdn also clearly states it:</p>\n<blockquote>\n<p id=\"so_15208198_15208348_0\">If a nontemplate function is an equally good match to a template function, the nontemplate function is chosen</p>\n</blockquote>\n<p><a href=\"http://msdn.microsoft.com/en-us/library/s016dfe8%28v=vs.80%29.aspx\" rel=\"nofollow\">http://msdn.microsoft.com/en-us/library/s016dfe8%28v=vs.80%29.aspx</a></p>\n", "LastEditorUserId": "323547", "LastActivityDate": "2013-03-04T18:44:03.213", "Score": "2", "CreationDate": "2013-03-04T18:23:56.547", "ParentId": "15208198", "CommentCount": "5", "OwnerUserId": "323547", "LastEditDate": "2013-03-04T18:44:03.213"}, "bq_ids": {"n4140": {"so_15208198_15208300_0": {"length": 18, "quality": 0.9, "section_id": 603}, "so_15208198_15208198_0": {"length": 5, "quality": 0.625, "section_id": 355}, "so_15208198_15208571_1": {"length": 18, "quality": 0.75, "section_id": 603}, "so_15208198_15208571_7": {"length": 14, "quality": 0.9333333333333333, "section_id": 603}, "so_15208198_15208606_1": {"length": 11, "quality": 1.0, "section_id": 603}, "so_15208198_15208571_3": {"length": 18, "quality": 0.9, "section_id": 603}, "so_15208198_15208348_0": {"length": 6, "quality": 0.6, "section_id": 126}, "so_15208198_15208571_4": {"length": 6, "quality": 0.75, "section_id": 603}, "so_15208198_15208571_2": {"length": 31, "quality": 0.8611111111111112, "section_id": 603}, "so_15208198_15208300_2": {"length": 14, "quality": 0.9333333333333333, "section_id": 603}, "so_15208198_15208300_1": {"length": 5, "quality": 1.0, "section_id": 111}, "so_15208198_15208571_6": {"length": 5, "quality": 1.0, "section_id": 111}, "so_15208198_15208571_5": {"length": 25, "quality": 0.9259259259259259, "section_id": 603}}, "n3337": {"so_15208198_15208300_0": {"length": 18, "quality": 0.9, "section_id": 593}, "so_15208198_15208571_3": {"length": 18, "quality": 0.9, "section_id": 593}, "so_15208198_15208571_1": {"length": 18, "quality": 0.75, "section_id": 593}, "so_15208198_15208571_7": {"length": 14, "quality": 0.9333333333333333, "section_id": 593}, "so_15208198_15208606_1": {"length": 11, "quality": 1.0, "section_id": 593}, "so_15208198_15208198_0": {"length": 5, "quality": 0.625, "section_id": 345}, "so_15208198_15208348_0": {"length": 6, "quality": 0.6, "section_id": 120}, "so_15208198_15208571_4": {"length": 6, "quality": 0.75, "section_id": 593}, "so_15208198_15208571_2": {"length": 31, "quality": 0.8611111111111112, "section_id": 593}, "so_15208198_15208300_2": {"length": 14, "quality": 0.9333333333333333, "section_id": 593}, "so_15208198_15208300_1": {"length": 5, "quality": 1.0, "section_id": 106}, "so_15208198_15208571_6": {"length": 5, "quality": 1.0, "section_id": 106}, "so_15208198_15208571_5": {"length": 25, "quality": 0.9259259259259259, "section_id": 593}}, "n4659": {"so_15208198_15208300_0": {"length": 18, "quality": 0.9, "section_id": 629}, "so_15208198_15208198_0": {"length": 5, "quality": 0.625, "section_id": 365}, "so_15208198_15208571_1": {"length": 18, "quality": 0.75, "section_id": 629}, "so_15208198_15208571_7": {"length": 14, "quality": 0.9333333333333333, "section_id": 629}, "so_15208198_15208606_1": {"length": 11, "quality": 1.0, "section_id": 629}, "so_15208198_15208571_3": {"length": 18, "quality": 0.9, "section_id": 629}, "so_15208198_15208348_0": {"length": 6, "quality": 0.6, "section_id": 131}, "so_15208198_15208571_4": {"length": 6, "quality": 0.75, "section_id": 629}, "so_15208198_15208571_2": {"length": 31, "quality": 0.8611111111111112, "section_id": 629}, "so_15208198_15208300_2": {"length": 14, "quality": 0.9333333333333333, "section_id": 629}, "so_15208198_15208300_1": {"length": 5, "quality": 1.0, "section_id": 115}, "so_15208198_15208571_6": {"length": 5, "quality": 1.0, "section_id": 115}, "so_15208198_15208571_5": {"length": 25, "quality": 0.9259259259259259, "section_id": 629}}}, "15208606": {"Id": "15208606", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_15208198_15208606_0\">According to <code>(2)</code>, <code>::max(7,42)</code> should call <code>max&lt;int&gt;</code> by argument deduction. </p>\n</blockquote>\n<p>No. Think about it, to do overload resolution (aka, to pick the best match), the compiler first needs to know all available overloads and be able to compare them. Note how a function template by itself is not a valid function, it first needs to be <em>instantiated</em> to create a real function.</p>\n<p>This means that first, the compiler looks after all function templates named <code>max</code>, tries template argument deduction for every one of them, and then does overload resolution on the instantiated functions together with the non-template functions.</p>\n<p>Here's a visualization of the functions (leaving out cv-qualifiers for brevity):</p>\n<pre><code>                    int max(int, int);\ntemplate&lt;class Arg&gt; Arg max(Arg, Arg);\ntemplate&lt;class Arg&gt; Arg max(Arg, Arg, Arg);\n</code></pre>\n<p>Let's walk through the invokation <code>::max(7, 42)</code>.</p>\n<p>First, the compiler sees that there are three candidate functions. However, it can't just compare the first overload of <code>max</code> to the other two - that'd be like comparing apples and oranges. Instead, it first needs to \"stamp out\" a real function from the function template blue-prints. This happens, in our case, through template argument deduction:</p>\n<pre><code>int max(int, int); // originally non-template\nint max(int, int); // originally template\nint max(int, int, int); // not enough arguments, invalid\n</code></pre>\n<p>With the third overload being thrown out thanks to mismatching argument / parameter counts, we're down to two. From a perspective of overload resolution, both are equal - but wait! Now a certain rule steps in that says:</p>\n<p><code>\u00a713.3.3 [over.match.best] p1</code></p>\n<blockquote>\n<p id=\"so_15208198_15208606_1\">[...] Given these definitions, a viable function <code>F1</code> is defined to be a better function than another viable function <code>F2</code> if [...]:</p>\n<ul>\n<li><code>F1</code> is a non-template function and <code>F2</code> is a function template specialization,</li>\n</ul>\n</blockquote>\n", "LastActivityDate": "2013-03-04T18:36:48.087", "CommentCount": "0", "CreationDate": "2013-03-04T18:36:48.087", "ParentId": "15208198", "Score": "3", "OwnerUserId": "500104"}});