post_cb({"35435597": {"ParentId": "35435255", "CommentCount": "4", "Body": "<p>The user-declared destructor, even if it is defaulted, means no move constructor gets generated.</p>\n<blockquote>\n<p id=\"so_35435255_35435597_0\"><strong>12.8 Copying and moving class objects [class.copy]</strong></p>\n<p id=\"so_35435255_35435597_1\">9 If the definition of a class <code>X</code> does not explicitly declare a move constructor, one will be implicitly declared as defaulted if and only if</p>\n<p id=\"so_35435255_35435597_2\">[...]</p>\n<p id=\"so_35435255_35435597_3\">(9.4) -- <code>X</code> does not have a user-declared destructor.</p>\n</blockquote>\n<p>If a move constructor is generated, then it is a better candidate for moves than your template constructor. It doesn't save a constructor call, it just means a different constructor gets called, one that doesn't print anything.</p>\n", "OwnerUserId": "743382", "PostTypeId": "2", "Id": "35435597", "Score": "7", "CreationDate": "2016-02-16T14:48:55.900", "LastActivityDate": "2016-02-16T14:48:55.900"}, "bq_ids": {"n4140": {"so_35435255_35435597_3": {"section_id": 458, "quality": 1.0, "length": 4}, "so_35435255_35435597_1": {"section_id": 458, "quality": 1.0, "length": 12}}, "n3337": {"so_35435255_35435597_3": {"section_id": 449, "quality": 1.0, "length": 4}, "so_35435255_35435597_1": {"section_id": 449, "quality": 1.0, "length": 12}}, "n4659": {"so_35435255_35435597_3": {"section_id": 481, "quality": 1.0, "length": 4}, "so_35435255_35435597_1": {"section_id": 481, "quality": 1.0, "length": 12}}}, "35435255": {"CommentCount": "11", "AcceptedAnswerId": "35435597", "PostTypeId": "1", "LastEditorUserId": "5195699", "CreationDate": "2016-02-16T14:32:01.730", "LastActivityDate": "2016-02-16T15:21:57.640", "LastEditDate": "2016-02-16T15:21:57.640", "ViewCount": "108", "FavoriteCount": "0", "Title": "Why does the constructor call depend on the default destructor's presence?", "Id": "35435255", "Score": "0", "Body": "<p>In the following code, I get two constructor calls for <code>Test u = \"u\";</code>. However, if I comment out the destructor, then I only get one constructor call. Why is that?</p>\n<pre><code>#include &lt;iostream&gt;\n\ntemplate&lt;class T&gt;\nauto operator&lt;&lt;(std::ostream&amp; os, const T&amp; t) -&gt; decltype(t.print(os), os) \n{ \n    t.print(os); \n    return os; \n} \n\nclass Test \n{\npublic:\n    template&lt;typename T&gt;\n    Test(T&amp;&amp; t)\n    {\n        std::cout &lt;&lt; \"Test \" &lt;&lt; t &lt;&lt; '\\n';\n    }\n    ~Test() = default; // if commented out removes one construction\n    void print(std::ostream&amp; os) const\n    {\n        os &lt;&lt; \"[with T = Test]\";\n    }\n};\n\nint main()\n{\n    Test u = \"u\"; // two constructors (second, a temporary, with T = Test)\n    Test t(\"t\"); // one constructor\n}\n</code></pre>\n", "Tags": "<c++>", "OwnerUserId": "832009", "AnswerCount": "1"}});