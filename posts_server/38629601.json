post_cb({"38629697": {"ParentId": "38629601", "PostTypeId": "2", "CommentCount": "14", "CreationDate": "2016-07-28T07:26:16.737", "Score": "4", "LastEditorUserId": "678093", "LastEditDate": "2016-07-28T07:38:53.253", "Id": "38629697", "OwnerUserId": "678093", "Body": "<p>The interesting part from <a href=\"http://coliru.stacked-crooked.com/a/f8bf555097e2e674\" rel=\"nofollow\">Clang's error message</a> is:</p>\n<pre><code>main.cpp:11:6: note: candidate template ignored: couldn't infer template argument 'T'\n\nvoid foo(Args... args, T x) {\n     ^\n</code></pre>\n<p>The problem is that the parameter pack <code>Args...</code> occurs <strong>prior</strong> to <code>T</code>.</p>\n<p><code>Args...</code> is \"greedy\" and so no parameters are left for the compiler to deduce <code>T</code>, hence it fails.</p>\n<p>Quoting the standard (emphasis mine):</p>\n<p><strong>[temp.param]/11</strong></p>\n<blockquote>\n<p id=\"so_38629601_38629697_0\">A template parameter pack of a function template <strong>shall not be followed</strong>\n  by another template parameter <strong>unless that template parameter can be\n  deduced</strong> from the parameter-type-list of the function template or has a\n  default argument. [Example:</p>\n<pre><code>...\n// U can be neither deduced from the parameter-type-list nor specified\ntemplate&lt;class... T, class... U&gt; void f() { } // error\ntemplate&lt;class... T, class U&gt; void g() { } // error\n</code></pre>\n<p id=\"so_38629601_38629697_1\">\u2014 end example]</p>\n</blockquote>\n", "LastActivityDate": "2016-07-28T07:38:53.253"}, "38629601": {"CommentCount": "0", "ViewCount": "267", "PostTypeId": "1", "LastEditorUserId": "3309790", "CreationDate": "2016-07-28T07:21:33.017", "LastActivityDate": "2016-07-28T11:58:31.623", "Title": "Function template parameter pack not at the end of the parameter list", "AcceptedAnswerId": "38629697", "LastEditDate": "2016-07-28T11:39:09.623", "Id": "38629601", "Score": "5", "Body": "<p>The following code compiles and runs ok.</p>\n<pre><code>void foo() {\n\n}\n\ntemplate &lt;typename T, typename... Args&gt;\nvoid foo(T x, Args... args) {\n  cout &lt;&lt; x &lt;&lt; endl;\n  foo(args...);\n}\n\n// inside main()\nfoo(1,1,1);\n</code></pre>\n<p>This other code does not compile:</p>\n<pre><code>void foo() {\n\n}\n\ntemplate &lt;typename... Args, typename T&gt;\nvoid foo(Args... args, T x) {\n  foo(args...);\n  cout &lt;&lt; x &lt;&lt; endl;\n}\n\n// inside main()\nfoo(1,1,1);\n</code></pre>\n<p>The compiler says that there is no matching function for call to <code>foo(1,1,1)</code> and says that <code>foo(Args... args, T x)</code> is a candidate, but template argument deduction/substitution failed, because candidate expects 1 argument, but 3 were provided.</p>\n<p>Is there any ambiguity with this situation that no compiler can handle? This compile error just seems illogical to me. Maybe this is not in accordance, on purpose, with the C++ standard?</p>\n", "Tags": "<c++><templates><c++11><variadic-templates><variadic-functions>", "OwnerUserId": "1972599", "AnswerCount": "2"}, "38635008": {"ParentId": "38629601", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2016-07-28T11:26:28.683", "Score": "2", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T11:52:59.190", "Id": "38635008", "OwnerUserId": "3309790", "Body": "<p>(Answer based on <a href=\"https://stackoverflow.com/questions/38629601/function-template-parameter-pack-not-at-the-end-of-the-parameter-list#comment64648723_38629697\">@JohannesSchaub-litb's comments</a>)</p>\n<p>According to the standard, template parameter pack is not deducible if it is used in a function parameter pack not at the end of the parameter list.</p>\n<p><a href=\"http://eel.is/c++draft/temp.deduct.call#1\" rel=\"nofollow noreferrer\">$14.8.2.1/1 Deducing template arguments from a function call\n[temp.deduct.call]</a>:</p>\n<blockquote>\n<p id=\"so_38629601_38635008_0\">When a function parameter pack appears in a non-deduced context\n  ([temp.deduct.type]), the type of that parameter pack is never\n  deduced. [ Example:</p>\n<pre><code>template&lt;class T1, class ... Types&gt; void g1(Types ..., T1);\n\nvoid h(int x, float&amp; y) {\n  const int z = x;\n  g1(x, y, z);                 // error: Types is not deduced\n  g1&lt;int, int, int&gt;(x, y, z);  // OK, no deduction occurs\n}\n</code></pre>\n<p id=\"so_38629601_38635008_1\">\u2014 end example ]</p>\n</blockquote>\n<p>And about non-deduced context, <a href=\"http://eel.is/c++draft/temp.deduct.type#5\" rel=\"nofollow noreferrer\">$14.8.2.5/5 Deducing template arguments from a type\n[temp.deduct.type]</a>:</p>\n<blockquote>\n<p id=\"so_38629601_38635008_2\">A function parameter pack that does not occur at the end of the parameter-declaration-list. </p>\n</blockquote>\n<p>So the direct reason of <code>foo(1,1,1);</code> failed is that the template parameter <code>Args</code> is not deduced, which is necessary to make the function invoking valid.</p>\n<p>To explain the error message, a template parameter pack not deduced will be deduced to an empty sequence of template arguments<sup>[1]</sup>, it means it'll be omitted. Then <code>foo(1,1,1);</code> failed because the number of arguments doesn't match, that's what compiler complained.</p>\n<p>Just as the example from standard shown, you could specify the template argument explicitly to avoid type deduction, even though it doesn't meet the original intent of your code. Such as:</p>\n<pre><code>template &lt;typename T, typename... Args&gt;\nvoid foo(Args... args, T x) {\n}\n\nint main() {\n    // inside main()\n    foo&lt;int, int, int&gt;(1, 1, 1);\n}\n</code></pre>\n<p><a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1399\" rel=\"nofollow noreferrer\">Here</a>'s some additional informations.</p>\n<hr>\n<p><sup>[1] I can't find direct expression about this in the standard. The most close one is <a href=\"http://eel.is/c++draft/temp.arg.explicit#3\" rel=\"nofollow noreferrer\">this</a>, \"A trailing template parameter pack ([temp.variadic]) not otherwise deduced will be deduced to an empty sequence of template arguments.\"</sup></p>\n</hr>", "LastActivityDate": "2016-07-28T11:58:31.623"}, "bq_ids": {"n4140": {"so_38629601_38635008_0": {"section_id": 302, "quality": 0.8571428571428571, "length": 12}, "so_38629601_38629697_0": {"section_id": 64, "quality": 0.9473684210526315, "length": 18}, "so_38629601_38635008_2": {"section_id": 336, "quality": 1.0, "length": 7}}, "n3337": {"so_38629601_38629697_0": {"section_id": 59, "quality": 0.7894736842105263, "length": 15}, "so_38629601_38635008_2": {"section_id": 293, "quality": 1.0, "length": 7}}, "n4659": {"so_38629601_38635008_0": {"section_id": 309, "quality": 0.8571428571428571, "length": 12}, "so_38629601_38629697_0": {"section_id": 66, "quality": 0.9473684210526315, "length": 18}, "so_38629601_38635008_2": {"section_id": 345, "quality": 1.0, "length": 7}}}});