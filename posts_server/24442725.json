post_cb({"24442725": {"CommentCount": "3", "AcceptedAnswerId": "24446382", "CreationDate": "2014-06-27T01:35:03.453", "LastActivityDate": "2014-06-27T07:34:58.743", "PostTypeId": "1", "ViewCount": "4081", "FavoriteCount": "5", "Title": "Is floating point addition commutative in C++?", "Id": "24442725", "Score": "34", "Body": "<p>For floating point values, is it guaranteed that <code>a + b == b + a</code> ?</p>\n<p>I believe this is guaranteed in IEEE754, however the C++ standard does not specify that IEEE754 must be used. The only relevant text seems to be from [expr.add]#3:</p>\n<blockquote>\n<p id=\"so_24442725_24442725_0\">The result of the binary + operator is the sum of the operands. </p>\n</blockquote>\n<p>The mathematical operation \"sum\" is commutative.  However, the mathematical operation \"sum\" is also associative, whereas floating point addition is definitely <em>not</em> associative.  So, it seems to me that we cannot conclude that the commutativity of \"sum\" in mathematics means that this quote specifies commutativity in C++.</p>\n", "Tags": "<c++><floating-point><language-lawyer>", "OwnerUserId": "1505939", "AnswerCount": "3"}, "24442771": {"ParentId": "24442725", "CommentCount": "5", "Body": "<p>No, the C++ language generally wouldn't make such a requirement of the hardware. Only the associativity of operators is defined.</p>\n<p>All kinds of crazy things <em>do</em> happen in floating-point arithmetic. Perhaps, on some machine, adding zero to an denormal number produces zero. Conceivable that a machine could avoid updating memory in the case of adding a zero-valued register to a denormal in memory. Possible that a really dumb compiler would always put the LHS in memory and the RHS in a register.</p>\n<p>Note, though, that a machine with non-commutative addition would need to specifically define how expressions map to instructions, if you're going to have any control over which operation you get. Does the left-hand side go into the first machine operand or the second?</p>\n<p>Such an ABI specification, mentioning the construction of expressions and instructions in the same breath, would be quite pathological.</p>\n", "OwnerUserId": "153285", "PostTypeId": "2", "Id": "24442771", "Score": "18", "CreationDate": "2014-06-27T01:42:30.840", "LastActivityDate": "2014-06-27T01:42:30.840"}, "24446382": {"ParentId": "24442725", "CommentCount": "15", "Body": "<p>It is not even required that <code>a + b == a + b</code>. One of the subexpressions may hold the result of the addition with more precision than the other one, for example when the use of multiple additions requires one of the subexpressions to be temporarily stored in memory, when the other subexpression can be kept in a register (with higher precision).</p>\n<p>If <code>a + b == a + b</code> is not guaranteed, <code>a + b == b + a</code> <em>cannot</em> be guaranteed. If <code>a + b</code> does not have to return the same value each time, and the values are different, one of them <em>necessarily</em> will not be equal to one particular evaluation of <code>b + a</code>.</p>\n", "OwnerUserId": "743382", "PostTypeId": "2", "Id": "24446382", "Score": "14", "CreationDate": "2014-06-27T07:34:58.743", "LastActivityDate": "2014-06-27T07:34:58.743"}, "24442854": {"ParentId": "24442725", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>The C++ standard very specifically does <em>not</em> guarantee IEEE 754. The library does have some support for IEC 559 (which is basically just the IEC's version of the IEEE 754 standard), so you can <em>check</em> whether the underlying implementation uses IEEE 754/IEC 559 though (and when it does, you can depend on what it guarantees, of course).</p>\n<p>For the most part, the C and C++ standards assume that such basic operations will be implemented however the underlying hardware works. For something as common as IEEE 754, they'll let you detect whether it's present, but still don't require it.</p>\n", "OwnerUserId": "179910", "LastEditorUserId": "179910", "LastEditDate": "2014-06-27T02:06:00.977", "Id": "24442854", "Score": "11", "CreationDate": "2014-06-27T01:57:25.703", "LastActivityDate": "2014-06-27T02:06:00.977"}, "bq_ids": {"n4140": {"so_24442725_24442725_0": {"section_id": 6140, "quality": 0.8333333333333334, "length": 5}}, "n3337": {"so_24442725_24442725_0": {"section_id": 5904, "quality": 0.8333333333333334, "length": 5}}, "n4659": {"so_24442725_24442725_0": {"section_id": 7637, "quality": 0.8333333333333334, "length": 5}}}});