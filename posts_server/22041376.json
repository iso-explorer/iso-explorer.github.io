post_cb({"22041435": {"ParentId": "22041376", "PostTypeId": "2", "CommentCount": "10", "Body": "<p><code>static</code> variables inside a function have <em>function scope</em>. The variable is visible in the whole of the function.</p>\n<p><code>static</code> variables outside the function have <em>file scope</em>, which is visible inside the file, but not across files.</p>\n", "OwnerUserId": "1397956", "LastEditorUserId": "560648", "LastEditDate": "2014-02-26T12:59:18.557", "Id": "22041435", "Score": "-1", "CreationDate": "2014-02-26T12:30:04.717", "LastActivityDate": "2014-02-26T12:59:18.557"}, "22042293": {"ParentId": "22041376", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>I had to check for myself, thought I'll share my little test. the variables are only visible inside the case curly brackets. and the same variable name can be declared inside another case and it won't overwrite the other variable.</p>\n<p>the variables are not visible in the function though, only inside the curly braces in the switch statement.</p>\n<pre><code>#include&lt;stdio.h&gt;\nint call_switch(int);\nint main()\n{\ncall_switch(2);\ncall_switch(3);\ncall_switch(2);\ncall_switch(3);\nreturn 0;\n}\n\nint call_switch(int a){\nswitch(a)\n{ \n   case 2:\n   {\n     static int i = 5;\n     i++;\n     printf(\" i declared as 5     %d\\n\",i);\n     break;\n   }\n   case 3:\n   {\n     static int i = 10;\n     i++;\n     printf(\"i declared as 10   %d\\n\",i);\n     break;\n   }\n}\n  // printf(\"%d\",i ); not visible here\n  return 0;\n\n}\n</code></pre>\n<p>output was</p>\n<pre><code>i declared as  5     6\ni declared as 10    11\ni declared as  5     7\ni declared as 10    12\n</code></pre>\n", "OwnerUserId": "2575902", "LastEditorUserId": "2575902", "LastEditDate": "2014-02-26T13:10:54.903", "Id": "22042293", "Score": "1", "CreationDate": "2014-02-26T13:04:23.330", "LastActivityDate": "2014-02-26T13:10:54.903"}, "22041376": {"CommentCount": "7", "AcceptedAnswerId": "22041425", "PostTypeId": "1", "ClosedDate": "2014-02-27T03:25:39.727", "LastEditorUserId": "1308992", "CreationDate": "2014-02-26T12:28:04.403", "LastActivityDate": "2014-02-26T13:49:09.623", "LastEditDate": "2014-02-26T13:49:09.623", "ViewCount": "565", "FavoriteCount": "2", "Title": "Separate scope for switch cases with static variables with the same name", "Id": "22041376", "Score": "3", "Body": "<p><em><strong>update:</strong></em></p> I've now re-tested both a simplified test case and the full code with the shared names reinstated, and it works correctly. There probably was some other error somewhere else in my code which is now fixed. Sorry for wasting your time and effort; will never post without a working test case in the future. <em>Mea culpa.</em>\n<hr>\n<p>I have a C++ function which I call repeatedly. It has the following snippet in it</p>\n<pre class=\"lang-cpp prettyprint-override\"><code>     switch(c)\n     {\n     case 1:\n        {\n          static int i = 0;\n          if ( ... )  { i = 0; }\n          .... \n          break;\n        }\n     case 2:\n        {\n          static int i = 0;\n          if ( ... )  { i = 0; }\n          .... \n          break;\n        }\n     case 3:\n        {\n          static int i = 0;\n          if ( ... )  { i = 0; }\n          .... \n          break;\n        }\n     }\n</code></pre>\n<p>The idea is that it must remember its state per each case, and sometimes it must reset it.</p>\n<p>It didn't work properly. When I was debugging it (MSVC++ 2010 Express Edition) I noticed that each <code>i</code> was not behaving independently and their values were changing seemingly by themselves; moreover when the re-set condition was hit, the corresponding <code>if</code> was entered OK but the <code>i = 0;</code> statement was just ... <em>skipped over</em>!!! And the \"locals\" window showed <code>i</code> with its previous value, unchanged (while the current statement was the next one, still inside the <code>if</code>). Other statements inside the <code>if</code> were executing properly.</p>\n<p>When I renamed each <code>i</code> with a unique name (<code>i1</code>, <code>i2</code>, <code>i3</code>), the problem went away.</p>\n<p>Is this some bug, or some language feature that I should know? I thought each block <code>{ ... }</code> defines independent scope. What is going on here?  Would it work in C?</p>\n<p><em>edit:</em> sorry for not constructing the test case. Will do so, and report back later.</p>\n</hr>", "Tags": "<c++><c><static><scope><switch-statement>", "OwnerUserId": "1308992", "AnswerCount": "4"}, "22041517": {"ParentId": "22041376", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Static variables inside the function have a block scope and they are persistent over consecutive calls to it. You cannot declare two variables with same name in same scope but you can do it if they are in different scopes denoted as</p>\n<pre><code>{}\n</code></pre>\n<p>which is in your case.</p>\n<pre><code>switch(c)\n {\n case 1:\n    {\n      static int i = 0;\n    }\n case 2:\n    {\n      static int i = 0;\n    }\n case 3:\n    {\n      static int i = 0; \n    }\n }\n</code></pre>\n<p>So this should work as you expected and thus probably this is the bug in compiler, debugger (or somewhere else what is hard to guess without more information given) which treats all these static variables as the same variable. This is why changing names of these variables fixes your problem.</p>\n", "OwnerUserId": "1141471", "LastEditorUserId": "1141471", "LastEditDate": "2014-02-26T13:00:52.377", "Id": "22041517", "Score": "3", "CreationDate": "2014-02-26T12:33:18.983", "LastActivityDate": "2014-02-26T13:00:52.377"}, "22041425": {"ParentId": "22041376", "PostTypeId": "2", "CommentCount": "7", "Body": "<p>This sounds like a bug in your code or interpretation. I can well imagine a \"watch window\" feature in your debugger getting this wrong, since blocks don't have names and will therefore be difficult to identify in text.</p>\n<p>Local variables with <code>static</code> storage duration <em>are</em> bound by block scope.</p>\n<p>Here's proof that they do <em>not</em> have function scope:</p>\n<blockquote>\n<p id=\"so_22041376_22041425_0\"><code>[C++11: 3.3.5/1]:</code> Labels (6.1) have function scope and may be used anywhere in the function in which they are declared. <strong>Only labels have function scope.</strong></p>\n</blockquote>\n<p>And here's a practical demonstration:</p>\n<pre><code>#include &lt;iostream&gt;\n\nvoid f(const int i)\n{\n    switch (i) {\n        case 3: {\n            static int x = 0;\n            std::cout &lt;&lt; x;\n            x = 3;\n            std::cout &lt;&lt; x &lt;&lt; ' ';\n            break;\n        }\n\n        case 4: {\n            static int x = 0;\n            std::cout &lt;&lt; x;\n            x = 4;\n            std::cout &lt;&lt; x &lt;&lt; ' ';\n            break;\n        }\n    }\n}\n\nint main()\n{\n    f(3);\n    f(4);\n}\n\n// Output: 03 04\n</code></pre>\n<p>This shows that when the second case is entered, you are working with a different local, static variable <code>x</code>. Otherwise you would see <code>03 34</code>.</p>\n<h3><a href=\"http://coliru.stacked-crooked.com/a/4a7ffdfe842f9764\" rel=\"nofollow\">Live demo using GCC 4.8</a>; I get the same result with Visual Studio 2012.</h3>\n", "OwnerUserId": "560648", "LastEditorUserId": "560648", "LastEditDate": "2014-02-26T12:58:23.240", "Id": "22041425", "Score": "4", "CreationDate": "2014-02-26T12:29:49.497", "LastActivityDate": "2014-02-26T12:58:23.240"}, "bq_ids": {"n4140": {"so_22041376_22041425_0": {"section_id": 7066, "quality": 0.75, "length": 12}}, "n3337": {"so_22041376_22041425_0": {"section_id": 6810, "quality": 0.75, "length": 12}}, "n4659": {"so_22041376_22041425_0": {"section_id": 8563, "quality": 0.6875, "length": 11}}}});