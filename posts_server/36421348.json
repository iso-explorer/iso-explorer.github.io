post_cb({"36421348": {"CommentCount": "2", "CreationDate": "2016-04-05T08:45:38.587", "PostTypeId": "1", "AcceptedAnswerId": "36422187", "LastEditorUserId": "3309790", "LastActivityDate": "2016-04-05T09:37:54.007", "LastEditDate": "2016-04-05T09:31:55.370", "ViewCount": "69", "FavoriteCount": "1", "Title": "Retry local static variable initialization after exception", "Id": "36421348", "Score": "4", "Body": "<p>In the context of a locally defined static variable, what is the expected behaviour if an exception is thrown at variable initialization and we retry to instantiate the variable?</p>\n<p>E.g.:</p>\n<pre><code>void someFunc()\n{\n    bool initialized=false;\n    do\n    {\n        try\n        {\n            static SomeType throwingConstructor; //it throws the first time!\n            initialized=true;\n        }\n        catch(...)\n        {\n            //some other code\n        }\n    }\n    while(!initialized);\n }\n</code></pre>\n<p>I would expect, since the stack is unwinded because of the exception, that the second time the loop is executed the variable tries to be initialized again.\nNevertheless, local static variables are initialized only once, so it smells somehow <em>undefined behaviour</em>.\nWhat is the expected behaviour of this code fragment? Does the standard guarantee a defined behaviour in this case?</p>\n", "Tags": "<c++><language-lawyer>", "OwnerUserId": "2200058", "AnswerCount": "2"}, "36422187": {"ParentId": "36421348", "LastEditDate": "2016-04-05T09:37:54.007", "CommentCount": "0", "CreationDate": "2016-04-05T09:23:33.050", "OwnerUserId": "3309790", "LastEditorUserId": "3309790", "PostTypeId": "2", "Id": "36422187", "Score": "7", "Body": "<blockquote>\n<p id=\"so_36421348_36422187_0\">Does the standard guarantee a defined behaviour in this case?</p>\n</blockquote>\n<p>Yes. This case is exactly mentioned in the standard. According to <code>$6.7/4 Declaration statement [stmt.dcl]</code> (emphasized by me):</p>\n<blockquote>\n<p id=\"so_36421348_36422187_1\">... all block-scope variables with static storage duration (3.7.1) or thread storage\n  duration (3.7.2) ...  </p>\n<p id=\"so_36421348_36422187_2\">Otherwise such a variable is\n  initialized the first time control passes through its declaration; such a variable is considered initialized upon\n  the completion of its initialization. <strong>If the initialization exits by throwing an exception, the initialization\n  is not complete, so it will be tried again the next time control enters the declaration.</strong></p>\n</blockquote>\n", "LastActivityDate": "2016-04-05T09:37:54.007"}, "bq_ids": {"n4140": {"so_36421348_36422187_2": {"section_id": 3919, "quality": 1.0, "length": 32}, "so_36421348_36422187_1": {"section_id": 3919, "quality": 0.8181818181818182, "length": 9}}, "n3337": {"so_36421348_36422187_2": {"section_id": 3779, "quality": 1.0, "length": 32}, "so_36421348_36422187_1": {"section_id": 3779, "quality": 0.8181818181818182, "length": 9}}, "n4659": {"so_36421348_36422187_2": {"section_id": 4805, "quality": 0.90625, "length": 29}, "so_36421348_36422187_1": {"section_id": 8663, "quality": 0.7272727272727273, "length": 8}}}, "36421815": {"ParentId": "36421348", "CommentCount": "0", "Body": "<p>If an exception is thrown during the initialiser, the static variable is not initialised.</p>\n<p>It will be initialised the next time the code flows over it.</p>\n<p>This is guaranteed by the standard.</p>\n", "OwnerUserId": "2015579", "PostTypeId": "2", "Id": "36421815", "Score": "2", "CreationDate": "2016-04-05T09:06:57.333", "LastActivityDate": "2016-04-05T09:06:57.333"}});