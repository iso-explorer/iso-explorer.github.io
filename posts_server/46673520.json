post_cb({"bq_ids": {"n4140": {"so_46673520_46673624_1": {"length": 8, "quality": 1.0, "section_id": 1569}}, "n3337": {"so_46673520_46673624_1": {"length": 8, "quality": 1.0, "section_id": 1564}}, "n4659": {"so_46673520_46673624_1": {"length": 8, "quality": 1.0, "section_id": 1718}, "so_46673520_46673767_1": {"length": 6, "quality": 0.6, "section_id": 7709}}}, "46673767": {"Id": "46673767", "PostTypeId": "2", "Body": "<p>A move assignment or move c'tor should always leave the moved object in a valid state.</p>\n<p>In case of a std::string, when you <code>std::move</code> it, it stays a valid but unspecified string. From libc++'s source:</p>\n<pre><code>// __str is a valid, but unspecified string. \nbasic_string(basic_string&amp;&amp; __str) noexcept\n  : _M_dataplus(_M_local_data(), std::move(__str._M_get_allocator()))\n</code></pre>\n<p>And since <code>getline()</code> only appends chars to the string, as long as it succeeds, the output will be as expected. From <a href=\"http://www.cplusplus.com/reference/string/string/getline/\" rel=\"nofollow noreferrer\">cplusplus.com</a>:</p>\n<blockquote>\n<p id=\"so_46673520_46673767_0\">Note that any content in str before the call is replaced by the newly extracted sequence.</p>\n<p id=\"so_46673520_46673767_1\">Each extracted character is appended to the string as if its member push_back was called.</p>\n</blockquote>\n", "LastEditorUserId": "1030410", "LastActivityDate": "2017-10-10T19:12:38.070", "Score": "1", "CreationDate": "2017-10-10T18:42:45.217", "ParentId": "46673520", "CommentCount": "2", "OwnerUserId": "1030410", "LastEditDate": "2017-10-10T19:12:38.070"}, "46673991": {"Id": "46673991", "PostTypeId": "2", "Body": "<p>Your code is safe, but only because you are checking if the <code>getline</code> successfully stored something in <code>s</code>.  If the sentry internal to <code>getline</code> failed to initialize, then nothing would be assigned to <code>s</code> and it would be left in the valid-but-unspecified state.  As long as <code>getline</code> succeeds in setting <code>s</code> to a known state, you're good.</p>\n<p>And the very first thing <code>getline</code> does after successful sentry construction is set <code>s</code> to a zero size (a known state).</p>\n<p>More details below in GManNickG's comment.</p>\n", "LastEditorUserId": "576911", "LastActivityDate": "2017-10-10T19:30:40.363", "Score": "8", "CreationDate": "2017-10-10T18:55:51.513", "ParentId": "46673520", "CommentCount": "1", "OwnerUserId": "576911", "LastEditDate": "2017-10-10T19:30:40.363"}, "46673520": {"ViewCount": "347", "Body": "<p>Is it safe and well-defined for the second argument to <a href=\"http://en.cppreference.com/w/cpp/string/basic_string/getline\" rel=\"noreferrer\"><code>std::getline(std::istream&amp;, std::string&amp;)</code></a> to be an lvalue referring to a moved-from <a href=\"http://en.cppreference.com/w/cpp/string/basic_string\" rel=\"noreferrer\"><code>std::string</code></a>, and, if so, is that string restored from its moved-from state, so methods such as <a href=\"http://en.cppreference.com/w/cpp/string/basic_string/pop_back\" rel=\"noreferrer\"><code>pop_back()</code></a> can be safely invoked?</p>\n<p>Put more simply, does writing to a string with <code>getline()</code> have equivalent semantics to assigning to that string?</p>\n<p>Or more concretely, is the following (somewhat contrived) snippet well-defined and correct?</p>\n<pre class=\"lang-cpp prettyprint-override\"><code>std::ifstream f(\"foo.txt\");\n\nstd::vector&lt;std::string&gt; lines;\n\nfor (std::string s; std::getline(f, s); lines.push_back(std::move(s)))\n        if (!s.empty() &amp;&amp; s.back() == '\\r')\n                s.pop_back();\n</code></pre>\n<p>Optimized (<code>-march=native -O3</code>) builds of this snippet with <code>g++</code> and <code>clang++</code> appear to work as expected, but that is of course no guarantee.</p>\n<p>I'd like to know if this is relying only on well-defined behavior according to the semantics of <code>getline()</code> in the C++11 standard, or, if not, if it's well-defined by a later edition of the standard, or, if not, if it's at least explicitly defined by any/all of the major implementations (G++, Clang++, Visual C++, Intel C++ Compiler).</p>\n<p>NB: This is <strong><em>not</em></strong> a duplicate of previous questions asking whether it's safe to assign to a moved-from object (yes, if it's a trivial or STL type) because <code>getline()</code> is not the assignment operator.</p>\n", "Title": "Ok to use std::getline() with a moved-from std::string?", "CreationDate": "2017-10-10T18:27:50.623", "LastActivityDate": "2017-10-10T19:30:40.363", "CommentCount": "4", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2017-10-10T18:34:18.523", "LastEditorUserId": "6797534", "Id": "46673520", "Score": "8", "OwnerUserId": "6797534", "Tags": "<c++><c++11><stl><c++14><c++1z>", "AnswerCount": "3"}, "46673624": {"Id": "46673624", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_46673520_46673624_0\">Is it safe and well-defined for the second argument to <code>std::getline(std::istream&amp;, std::string&amp;)</code> to be an lvalue referring to a moved-from <code>std::string</code></p>\n</blockquote>\n<p>Yes. Although it the moved-from string is left unspecified by the standard according to <a href=\"http://eel.is/c++draft/string.cons#2\" rel=\"noreferrer\">[string.cons]p2</a>:</p>\n<blockquote>\n<p id=\"so_46673520_46673624_1\">[...]. In the second form, <code>str</code> is left in a valid state with an unspecified value.</p>\n</blockquote>\n<p>The string is still in a valid state, it is just unspecified, i.e. you can't know which state it is in (in may be filled with some random characters). You can still to pass it to <code>std::getline</code>, because the standard says in <a href=\"http://eel.is/c++draft/string.io#1\" rel=\"noreferrer\">[string.io]p1</a> that <code>str.erase()</code> is called on the string, which empties it:</p>\n<blockquote>\n<p id=\"so_46673520_46673624_2\">[...] calls <code>str.erase()</code> [...]</p>\n</blockquote>\n<p>(if the stream is valid, but I'll assume that is in your case).</p>\n<p>No matter what the unspecified state of the string is, it is emptied at the start of <code>std::getline</code>, so it doesn't matter what state it is in.</p>\n", "LastEditorUserId": "3980929", "LastActivityDate": "2017-10-10T18:52:09.993", "Score": "5", "CreationDate": "2017-10-10T18:33:58.653", "ParentId": "46673520", "CommentCount": "5", "OwnerUserId": "3980929", "LastEditDate": "2017-10-10T18:52:09.993"}});