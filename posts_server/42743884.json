post_cb({"bq_ids": {"n4140": {"so_42743884_42743972_5": {"length": 5, "quality": 0.5555555555555556, "section_id": 7050}, "so_42743884_42743972_3": {"length": 7, "quality": 0.7777777777777778, "section_id": 7049}, "so_42743884_42743972_1": {"length": 14, "quality": 0.8235294117647058, "section_id": 7049}, "so_42743884_42743972_4": {"length": 9, "quality": 0.8181818181818182, "section_id": 7050}}, "n3337": {"so_42743884_42743972_5": {"length": 5, "quality": 0.5555555555555556, "section_id": 6795}, "so_42743884_42743972_3": {"length": 7, "quality": 0.7777777777777778, "section_id": 6794}, "so_42743884_42743972_1": {"length": 14, "quality": 0.8235294117647058, "section_id": 6794}, "so_42743884_42743972_4": {"length": 9, "quality": 0.8181818181818182, "section_id": 6795}}, "n4659": {"so_42743884_42743972_5": {"length": 5, "quality": 0.5555555555555556, "section_id": 8547}, "so_42743884_42743972_3": {"length": 7, "quality": 0.7777777777777778, "section_id": 8546}, "so_42743884_42743972_1": {"length": 14, "quality": 0.8235294117647058, "section_id": 8546}, "so_42743884_42743972_4": {"length": 9, "quality": 0.8181818181818182, "section_id": 8547}}}, "42743972": {"Id": "42743972", "PostTypeId": "2", "Body": "<p>When declaring</p>\n<pre><code>int x[x];\n</code></pre>\n<p>the global <code>x</code> is used to define the size of array. The <code>x</code> in the <code>[]</code> is the global variable since the declaration of the local variable is not yet complete.</p>\n<p>In the second case,</p>\n<pre><code>int x = x;\n</code></pre>\n<p>is undefined behavior since the <code>x</code> on the RHS is the same as the <code>x</code> on the LHS since the declaration of <code>x</code> is complete by the time  <code>x</code> on the RHS is encountered.</p>\n<p>These are described in the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_42743884_42743972_0\"><strong>3.3.2 Point of declaration</strong></p>\n<p id=\"so_42743884_42743972_1\">1 The <em>point of declaration</em> for a name is immediately after its complete declarator (Clause 8) and before its initializer (if any), except as noted below. [ <em>Example:</em></p>\n<p id=\"so_42743884_42743972_2\">int x = 12;<br>\n     { int x = x; }</br></p>\n<p id=\"so_42743884_42743972_3\">Here the second x is initialized with its own (indeterminate) value. \u2014 <em>end example</em> ]</p>\n<p id=\"so_42743884_42743972_4\">2 <em>Note:</em> a name from an outer scope remains visible up to the point of declaration of the name that hides it.[ <em>Example:</em></p>\n<pre><code>const int i = 2;  \n{ int i[i]; }\n</code></pre>\n<p id=\"so_42743884_42743972_5\">declares a block-scope array of two integers. \u2014 <em>end example</em> ] \u2014 <em>end note</em> ]</p>\n</blockquote>\n", "LastActivityDate": "2017-03-12T05:03:55.193", "CommentCount": "0", "CreationDate": "2017-03-12T05:03:55.193", "ParentId": "42743884", "Score": "1", "OwnerUserId": "434551"}, "42743884": {"ViewCount": "97", "Body": "<p>What is the value of y at the end of main?</p>\n<pre><code>const int x = 5;\nint main(int argc, char** argv)\n{\n    int x[x];\n\n    int y = sizeof(x) / sizeof(int);\n\n    return 0;\n}\n</code></pre>\n<blockquote>\n<p id=\"so_42743884_42743884_0\">y is 5</p>\n</blockquote>\n<p>What is the value of the local variable x at the end of main?</p>\n<pre><code>int x = 5;\nint main(int argc, char** argv)\n{\n    int x = x;\n    return 0;\n}\n</code></pre>\n<blockquote>\n<p id=\"so_42743884_42743884_1\">x is undefined</p>\n</blockquote>\n", "AcceptedAnswerId": "42743972", "Title": "How local variable hides global variable", "CreationDate": "2017-03-12T04:48:05.040", "Id": "42743884", "CommentCount": "2", "LastEditDate": "2017-03-14T17:40:41.863", "PostTypeId": "1", "LastEditorUserId": "560648", "LastActivityDate": "2017-03-14T17:40:41.863", "Score": "1", "OwnerUserId": "391104", "Tags": "<c++><c++11>", "AnswerCount": "1"}});