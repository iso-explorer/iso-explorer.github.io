post_cb({"2881126": {"ParentId": "2881102", "CommentCount": "2", "CreationDate": "2010-05-21T10:02:27.870", "OwnerUserId": "310733", "PostTypeId": "2", "Id": "2881126", "Score": "0", "Body": "<p>No. This seems just fine usage of <code>union</code> under your assumptions.</p>\n<p>I would have chosen better names and not <code>m</code> and <code>M</code> but other than that it is a nice usage for <code>union</code>.</p>\n", "LastActivityDate": "2010-05-21T10:02:27.870"}, "2881102": {"CommentCount": "0", "ViewCount": "728", "PostTypeId": "1", "LastEditorUserId": "718379", "CreationDate": "2010-05-21T09:58:37.897", "LastActivityDate": "2012-10-08T15:39:26.553", "Title": "Is the use of union in this matrix class completely safe?", "AcceptedAnswerId": "2881234", "LastEditDate": "2012-10-08T15:39:26.553", "Id": "2881102", "Score": "3", "Body": "<p>Unions aren't something I've used that often and after looking at a few other questions on them here it seems like there is almost always some kind of caveat where they might not work. Eg. structs possibly having unexpected padding or endian differences.</p>\n<p>Came across this in a math library I'm using though and I wondered if it is a totally safe usage. I assume that multidimensional arrays don't have any extra padding and since the type is the same for both definitions they are guaranteed to take up exactly the same amount of memory?</p>\n<pre><code>template&lt;typename T&gt; class Matrix44T\n{\n    ...\n\n    union\n    {\n        T M[16];\n        T m[4][4];\n    } m;\n};\n</code></pre>\n<p>Are there any downsides to this setup? Would the order of definition make any difference to how this works?</p>\n", "Tags": "<c++><templates><matrix><unions>", "OwnerUserId": "292406", "AnswerCount": "3"}, "2881165": {"ParentId": "2881102", "PostTypeId": "2", "CommentCount": "11", "CreationDate": "2010-05-21T10:10:03.037", "Score": "1", "LastEditorUserId": "86604", "LastEditDate": "2010-05-21T10:21:47.843", "Id": "2881165", "OwnerUserId": "86604", "Body": "<p>If you play by the rules, padding and endian differences won't hurt you.</p>\n<p>Look at this code </p>\n<pre><code>union { int a; float b; } wrong;\n\nwrong.a = 1;\nprintf(\"%f\", wrong.b);\n</code></pre>\n<p>This is wrong because if you have written member \"a\", then any reading except from \"a\" is undefined.</p>\n<p>To sum this up: Whether a union is safe cannot be told. It's not the definition, that is unsafe, it's how it is being used.</p>\n", "LastActivityDate": "2010-05-21T10:21:47.843"}, "bq_ids": {"n4140": {"so_2881102_2881234_0": {"section_id": 5913, "quality": 0.8541666666666666, "length": 41}, "so_2881102_2881234_1": {"section_id": 5876, "quality": 0.85, "length": 17}}, "n3337": {"so_2881102_2881234_0": {"section_id": 5685, "quality": 0.8541666666666666, "length": 41}, "so_2881102_2881234_1": {"section_id": 5647, "quality": 0.9, "length": 18}}, "n4659": {"so_2881102_2881234_0": {"section_id": 7404, "quality": 0.8333333333333334, "length": 40}, "so_2881102_2881234_1": {"section_id": 7361, "quality": 0.85, "length": 17}}}, "2881234": {"ParentId": "2881102", "CommentCount": "21", "CreationDate": "2010-05-21T10:22:14.800", "OwnerUserId": "125672", "PostTypeId": "2", "Id": "2881234", "Score": "4", "Body": "<p>Although I do exactly the same in my Matrix-class I think this is implementation dependent, reading the standard to the letter:</p>\n<p>Standard 9.5.1:</p>\n<blockquote>\n<p id=\"so_2881102_2881234_0\">In a union, at most one of the data\n  members can be active at any time,\n  that is, the value of at most one of\n  the data members can be stored in a\n  union at any time. [Note: one special\n  guarantee is made in order to simplify\n  the use of unions: If a POD-union\n  contains several POD-structs that\n  share a common initial sequence (9.2),\n  and if an object of this POD-union\n  type contains one of the POD-structs,\n  it is permitted to inspect the common\n  initial sequence of any of POD-struct\n  members; see 9.2. ]</p>\n</blockquote>\n<p>The question then is do <code>m</code> and <code>M</code> share a common initial sequence, to answer this we look at 9.2/15:</p>\n<blockquote>\n<p id=\"so_2881102_2881234_1\">Two POD-union (clause 9) types are\n  layout-compatible if they have the\n  same number of nonstatic data members,\n  and corresponding nonstatic data\n  members (in any order) have\n  layout-compatible types (3.9).</p>\n</blockquote>\n<p>After reading this the answer seems to be, no <code>m</code> and <code>M</code> are not layout-compatible in the strict sense of the word.</p>\n<p>In practice I think this will work fine on all compilers though.</p>\n", "LastActivityDate": "2010-05-21T10:22:14.800"}});