post_cb({"46267174": {"CommentCount": "0", "ViewCount": "43", "CreationDate": "2017-09-17T17:57:12.487", "LastActivityDate": "2017-09-17T18:49:55.240", "Title": "c++: constructor in initializer list order", "AcceptedAnswerId": "46267692", "PostTypeId": "1", "Id": "46267174", "Score": "2", "Body": "<p>I have couple question regarding how the following code runs</p>\n<pre><code>using namespace std;\nclass A\n{\n    int i;\npublic:\n    A() { i = 7; cout &lt;&lt; 1 &lt;&lt; f() &lt;&lt; i; }\n    A(int i) :i(i) { cout &lt;&lt; 1 &lt;&lt; f() &lt;&lt; i; }\n    char f() { return 'A'; }\n};\nclass B : public virtual A\n{\n    int i;\npublic:\n    B(int i) : A(i), i(++i) { cout &lt;&lt; 2 &lt;&lt; i; }\n    virtual char f() { return 'B'; }\n};\nclass C : public virtual A {\npublic:\n    C(int i) : A(i) { cout &lt;&lt; 3 &lt;&lt; i; }\n    virtual char f() { return 'C'; }\n};\nclass D :public A {\npublic:\n    D(int i) { cout &lt;&lt; 4 &lt;&lt; i; }\n    virtual char f() { return 'D'; }\n};\nclass E : public B, public C, public D {\npublic:\n    E() : B(2), C(3), D(4) { cout &lt;&lt; 5; }\n    virtual char f() { return 'E'; }\n};\nint main()\n{\n    E e;\n    return 0;\n}\n</code></pre>\n<p>So the output should be '1A723331A7445'. </p>\n<ul>\n<li>First of all, I want to double check that I am correct in thinking the following: it begins with printing '1A7' instead of '1A2' becuase the i being inputted into A is uninitialized. Do I understand this correctly? </li>\n<li>Second, I was wondering why C(3) prints '33' before it prints '1A7'</li>\n</ul>\n", "Tags": "<c++><initialization>", "OwnerUserId": "3250068", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_46267174_46267692_2": {"section_id": 438, "quality": 1.0, "length": 29}, "so_46267174_46267692_3": {"section_id": 438, "quality": 1.0, "length": 13}, "so_46267174_46267692_4": {"section_id": 438, "quality": 1.0, "length": 15}, "so_46267174_46267692_1": {"section_id": 438, "quality": 1.0, "length": 6}, "so_46267174_46267692_5": {"section_id": 438, "quality": 1.0, "length": 5}}, "n3337": {"so_46267174_46267692_2": {"section_id": 429, "quality": 1.0, "length": 29}, "so_46267174_46267692_3": {"section_id": 429, "quality": 1.0, "length": 13}, "so_46267174_46267692_4": {"section_id": 429, "quality": 1.0, "length": 15}, "so_46267174_46267692_1": {"section_id": 429, "quality": 1.0, "length": 6}, "so_46267174_46267692_5": {"section_id": 429, "quality": 1.0, "length": 5}}, "n4659": {"so_46267174_46267692_2": {"section_id": 458, "quality": 1.0, "length": 29}, "so_46267174_46267692_1": {"section_id": 458, "quality": 1.0, "length": 6}, "so_46267174_46267692_4": {"section_id": 458, "quality": 1.0, "length": 15}, "so_46267174_46267692_3": {"section_id": 458, "quality": 1.0, "length": 13}, "so_46267174_46267692_5": {"section_id": 458, "quality": 1.0, "length": 5}}}, "46267692": {"ParentId": "46267174", "CommentCount": "8", "Body": "<p>Right, so let me start off by saying you've created a truly messed up type hierarchy. If you were trying to understand initialization order, this example is only likely to confuse you.</p>\n<p>Anyway, to make things clearer, <a href=\"https://ideone.com/waZvTw\" rel=\"nofollow noreferrer\">I modified your code</a> and added a slash <code>/</code> character to the end of each c'tor print statement. So we can more easily discern what part of the line belongs to each c'tor. This gives the following output:</p>\n<blockquote>\n<p id=\"so_46267174_46267692_0\">1A7/23/33/1A7/44/5</p>\n</blockquote>\n<p>Before I get to the initialization order, you should know that all the virtual functions you specified won't by dynamically dispatched. A virtual function in the c'tor body will be statically bound. So for our intents and purposes, you don't really have virtual functions called in your code.</p>\n<p>Now, to quote the C++ standard, this is how the initialization order will be determined (<a href=\"https://timsong-cpp.github.io/cppwp/n4659/class.base.init#13\" rel=\"nofollow noreferrer\">[class.base.init]/13</a>):</p>\n<blockquote>\n<p id=\"so_46267174_46267692_1\">In a non-delegating constructor, initialization proceeds in the\n  following order:</p>\n<ul>\n<li><p id=\"so_46267174_46267692_2\">First, and only for the constructor of the most derived class, virtual base classes are initialized in the order they appear on a\n  depth-first left-to-right traversal of the directed acyclic graph of\n  base classes, where \u201cleft-to-right\u201d is the order of appearance of the\n  base classes in the derived class <em>base-specifier-list</em>.</p></li>\n<li><p id=\"so_46267174_46267692_3\">Then, direct base classes are initialized in declaration order as they appear in the <em>base-specifier-list</em> (regardless of the order of\n  the <em>mem-initializers</em>).</p></li>\n<li><p id=\"so_46267174_46267692_4\">Then, non-static data members are initialized in the order they were declared in the class definition (again regardless of the order of the\n  <em>mem-initializers</em>).</p></li>\n<li><p id=\"so_46267174_46267692_5\">Finally, the compound-statement of the constructor body is executed.</p></li>\n</ul>\n</blockquote>\n<p>So let's break your initialization apart:</p>\n<p>1) The virtual <code>A</code> sub-object is default constructed, since you didn't specify it in the member initializer list of <code>E()</code>, it executes <code>A()</code> for the object that is shared for <code>B</code> and <code>C</code>, and prints <code>1A7/</code>.</p>\n<p>2) Now the c'tor for <code>B</code> is called, executing <code>B(int i)</code> with <code>i = 2</code>. It sets <code>B::i</code> to <code>3</code>, and the c'tor body prints <code>23/</code>.</p>\n<p>3) <code>C</code> is constructed by calling <code>C(int i)</code> with <code>i = 3</code>. This prints <code>33/</code>.</p>\n<p>4) Now it's time to construct <code>D</code>.  So you call <code>D(int i)</code> with <code>i = 4</code>. Since <code>D</code> inherits from <code>A</code> non-virtually, it will have a distinct <code>A</code> sub-object that needs construction <em>now</em>.</p>\n<ol>\n<li><p>You again didn't specify a parameter for it in the member initializer list, so <code>A</code> is default constructed. This prints <code>1A7/</code>.</p></li>\n<li><p>Now the body of <code>D(int i)</code> runs, and prints <code>44/</code>.</p></li>\n</ol>\n<p>5) Finally, the body of <code>E()</code> is called, and prints <code>5</code>.</p>\n", "OwnerUserId": "817643", "PostTypeId": "2", "Id": "46267692", "Score": "1", "CreationDate": "2017-09-17T18:49:55.240", "LastActivityDate": "2017-09-17T18:49:55.240"}});