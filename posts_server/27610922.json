post_cb({"27611062": {"ParentId": "27610922", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Try running the code both ways and see. You may find that they run at the same speed! This kind of test is often memory bandwidth limited, so the number of instructions executed in the loop hardly matter at all.</p>\n<p>It's important to note that this only works if the string values have been padded with nulls out to the size of the integer, which you state as a comment to a different answer.</p>\n<p>As for whether it's legal C++, see <a href=\"https://stackoverflow.com/questions/12612488/aliasing-t-with-char-is-allowed-is-it-also-allowed-the-other-way-around\">Aliasing `T*` with `char*` is allowed. Is it also allowed the other way around?</a></p>\n", "OwnerUserId": "5987", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T11:52:43.670", "Id": "27611062", "Score": "0", "CreationDate": "2014-12-22T22:00:32.680", "LastActivityDate": "2014-12-22T22:00:32.680"}, "27610971": {"ParentId": "27610922", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>You can't <em>reliably</em> (see comments below) \"cast\" a string of characters to an integer like that.  You need to use bitwise operators, like so:</p>\n<p><a href=\"https://stackoverflow.com/questions/5334268/using-bitwise-operators-in-c-to-change-4-chars-to-int\">Using bitwise operators in C++ to change 4 chars to int</a></p>\n<p>(And, of course, you can only fit four chars into a 32-bit integer.)</p>\n<p>But I'm not sure why you're assuming that \"atomizing\" the strings like this will be faster than just calling strcmp(), which is implemented in Assembly code in most C libraries.</p>\n", "OwnerUserId": "3207828", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T11:52:43.670", "Id": "27610971", "Score": "0", "CreationDate": "2014-12-22T21:53:11.353", "LastActivityDate": "2014-12-22T21:59:56.930"}, "27610946": {"ParentId": "27610922", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>What you are proposing is not portable and in fact violates the C++ strict aliasing rule. It is undefined behavior.</p>\n<p>From the standard: section 3.10.10</p>\n<blockquote>\n<p id=\"so_27610922_27610946_0\">If a program attempts to access the stored value of an object through a <em>glvalue</em> of other than one of the following types the behavior is undefined:</p>\n<ul>\n<li>the dynamic type of the object,</li>\n<li>a cv-qualified version of the dynamic type of the object,</li>\n<li>a type similar (as defined in 4.4) to the dynamic type of the object,</li>\n<li>a type that is the signed or unsigned type corresponding to the dynamic type of the object,</li>\n<li>a type that is the signed or unsigned type corresponding to a cv-qualified version of the dynamic type of the object,</li>\n<li>an aggregate or union type that includes one of the aforementioned types among its elements or non-static data members (including, recursively, an element or non-static data member of a subaggregate or contained union),</li>\n<li>a type that is a (possibly cv-qualified) base class type of the dynamic type of the object,</li>\n<li>a <code>char</code> or <code>unsigned char</code> type.</li>\n</ul>\n</blockquote>\n<p>The most reliable, portable method is simply to use <code>strcmp()</code>.</p>\n", "OwnerUserId": "540815", "LastEditorUserId": "540815", "LastEditDate": "2014-12-22T22:17:54.027", "Id": "27610946", "Score": "1", "CreationDate": "2014-12-22T21:50:37.877", "LastActivityDate": "2014-12-22T22:17:54.027"}, "27610922": {"CommentCount": "3", "ViewCount": "167", "CreationDate": "2014-12-22T21:48:12.063", "LastActivityDate": "2014-12-22T22:17:54.027", "Title": "How to compare short strings(maximum 8 chars) in C++", "AcceptedAnswerId": "27610946", "PostTypeId": "1", "Id": "27610922", "Score": "0", "Body": "<p>I want to use this to compare short strings(4 to 8 chars long) in performance critical code. I was thinking to cast them to integer values and compare those values instead of comparing the strings:</p>\n<pre><code>const char* str = \"abcdefgh\";\nuint64_t num = *reinterpret_cast&lt;const uint64_t*&gt;(str);\n</code></pre>\n<p>Is it safe to cast <code>str</code> to <code>uint64_t</code> without checking alignment of the <code>char*</code> pointer? I'm using the code only on ARM and Intel CPUs, 32 and 64 bits.\nIf the behaviour is well defined and the cast is safe, should I expect performance degradation when the pointer is not aligned to 8 bytes?</p>\n<p>Do you have any other suggestions to do this in a very fast way?</p>\n", "Tags": "<c++>", "OwnerUserId": "336578", "AnswerCount": "4"}, "27610964": {"ParentId": "27610922", "CommentCount": "2", "Body": "<p>This code will yield incorrect behavior, as the contents of bytes following a null terminator are not part of the string. For instance, consider the strings:</p>\n<pre><code>char str1[8] = { 't', 'e', 's', 't', 0, 0, 0, 1 };\nchar str2[8] = { 't', 'e', 's', 't', 0, 0, 0, 2 };\n</code></pre>\n<p>Both strings have the value <code>\"test\"</code>, but comparing them as integers will say that they are different, because one of the bytes following the end of the string is different. Additionally, if a string begins less than eight bytes from the end of an allocated page of memory, trying to read an integer from it will result in a segfault.</p>\n<p>Use <code>strcmp()</code> to compare strings. It's already quite fast, and will give correct results.</p>\n", "OwnerUserId": "149341", "PostTypeId": "2", "Id": "27610964", "Score": "2", "CreationDate": "2014-12-22T21:52:22.257", "LastActivityDate": "2014-12-22T21:52:22.257"}, "bq_ids": {"n4140": {"so_27610922_27610946_0": {"section_id": 7239, "quality": 1.0, "length": 14}}, "n3337": {"so_27610922_27610946_0": {"section_id": 6983, "quality": 1.0, "length": 14}}, "n4659": {"so_27610922_27610946_0": {"section_id": 8748, "quality": 1.0, "length": 14}}}});