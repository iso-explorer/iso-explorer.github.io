post_cb({"14583866": {"ParentId": "14583688", "LastEditDate": "2017-05-23T11:49:02.087", "CommentCount": "5", "CreationDate": "2013-01-29T13:18:03.910", "OwnerUserId": "819272", "LastEditorUserId": "-1", "PostTypeId": "2", "Id": "14583866", "Score": "1", "Body": "<p>You need to make all your constructors <code>public</code> and define a default constructor for <code>A</code> because the string constructor will mark the default constructor as <code>=delete</code>. Furthermore, <a href=\"https://stackoverflow.com/questions/12500230/diamond-inheritance-lowest-base-class-constructor\">the most derived class will initialize any virtual base class</a>, quoting from the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3376.pdf\" rel=\"nofollow noreferrer\">draft Standard</a>:</p>\n<p><strong>12.6.2 Initializing bases and members [class.base.init]</strong></p>\n<blockquote>\n<p id=\"so_14583688_14583866_0\">10 In a non-delegating constructor, initialization proceeds in the\n  following order: \u2014 First, and only for the constructor of the most\n  derived class (1.8), virtual base classes are initialized in the order\n  they appear on a depth-\ufb01rst left-to-right traversal of the directed\n  acyclic graph of base classes, where \u201cleft-to-right\u201d is the order of\n  appearance of the base classes in the derived class\n  base-speci\ufb01er-list.</p>\n</blockquote>\n<p>In this case that means that <code>X</code> must indeed initalize <code>A</code>. </p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nclass A\n{\npublic:\n  A() { std::cout &lt;&lt; \"A\\n\"; }\n  A(std::string id) { std::cout &lt;&lt; id &lt;&lt; \" A(id)\\n\"; }\n};\n\nclass B : public virtual A\n{\npublic:\n   B() { std::cout &lt;&lt; \"B\\n\"; }\n};\n\nclass C : public virtual A\n{\npublic:\n   C() { std::cout &lt;&lt; \"C\\n\"; }\n};\n\nclass D : public B, public C\n{\npublic:  \n   D(std::string id): A(id) { std::cout &lt;&lt; id &lt;&lt; \" D(id)\\n\"; }\n};\n\n\nclass X : public D\n{\npublic:\n  X(std::string id): A(id), D(id) { std::cout &lt;&lt; id &lt;&lt; \" X(id)\\n\"; }\n};\n\nint main()\n{\n   X x(\"bla\");\n   x;       \n}\n</code></pre>\n", "LastActivityDate": "2013-01-29T13:39:16.517"}, "bq_ids": {"n4140": {"so_14583688_14583866_0": {"section_id": 438, "quality": 0.9428571428571428, "length": 33}}, "n3337": {"so_14583688_14583866_0": {"section_id": 429, "quality": 0.9428571428571428, "length": 33}}, "n4659": {"so_14583688_14583866_0": {"section_id": 458, "quality": 0.9428571428571428, "length": 33}}}, "14583688": {"CommentCount": "1", "CreationDate": "2013-01-29T13:09:03.750", "PostTypeId": "1", "AcceptedAnswerId": "14583866", "LastEditorUserId": "285303", "LastActivityDate": "2013-01-29T13:39:16.517", "LastEditDate": "2013-01-29T13:25:10.850", "ViewCount": "142", "FavoriteCount": "1", "Title": "Inheriting from multiple/diamond Inheritance", "Id": "14583688", "Score": "2", "Body": "<p>i have the following scenario:</p>\n<pre><code>class A\n{\n  public:\n    A(std::string id);\n};\n\nclass B : public virtual A\n{\n  public:\n    B();\n};\n\nclass C : public virtual A\n{\n  public:\n    C();\n};\n\nclass D : public B, public C\n{\n  public:\n    D(std::string id);\n};\n\n\nD::D(std::string id) : A(id), B(), C()\n{\n}\n\n\nclass X : public D\n{\n  public:\n    X(std::string id);\n}\n\nX::X(std::string id) : D(id)\n{\n}\n</code></pre>\n<p>Now, if i create an instance of D everything works fine. However if i create an instance of X i get a compiler error which tells me that something tries to call the default constructor of A - which does not exist. If i create it, it compiles but only the default constructor is called and accordingly, id is not correctly set/initialized.</p>\n<p>This can be fixed by implementing the constructor of X like so:</p>\n<pre><code>X::X(std::string id) : A(id), D(id)\n{\n}\n</code></pre>\n<p>But my understanding is, that this should be unnecessary. So where's my error ?</p>\n", "Tags": "<c++><inheritance><multiple-inheritance><virtual-inheritance><diamond-problem>", "OwnerUserId": "285303", "AnswerCount": "1"}});