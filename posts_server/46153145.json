post_cb({"46153145": {"CommentCount": "5", "ViewCount": "115", "PostTypeId": "1", "LastEditorUserId": "4324224", "CreationDate": "2017-09-11T10:09:39.537", "LastActivityDate": "2017-09-12T09:14:01.330", "Title": "Pass a reference to a base class as template parameter", "AcceptedAnswerId": "46153971", "LastEditDate": "2017-09-11T10:54:11.783", "Id": "46153145", "Score": "3", "Body": "<p>I have the following code where I try to specialize a function template for each instance of a class (that may have been derived):</p>\n<pre><code>class Base {\n};\n\nclass Derived:public Base {\n};\n\ntemplate&lt;Base&amp; b&gt;\nvoid myfunction() {\n   //use b somehow\n}\n\nDerived myobject;\n\nint main() {\n  myfunction&lt;myobject&gt;(); //this does not work\n}\n</code></pre>\n<p>The code results in error message:</p>\n<pre><code>candidate template ignored: invalid explicitly-specified argument for template parameter 'b'\n</code></pre>\n<p><a href=\"https://wandbox.org/permlink/g4Zq03vewEJXH1i1\" rel=\"nofollow noreferrer\">[live demo]</a></p>\n<p>How do I pass a reference to a static instance of type <code>Base</code>, given the static <code>Derived</code> object <code>myobject</code>?</p>\n", "Tags": "<c++><templates>", "OwnerUserId": "4542928", "AnswerCount": "1"}, "46153971": {"ParentId": "46153145", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>While <em>it is</em> fine to declare a template non-type <strong>parameter</strong> as a reference according to <a href=\"https://timsong-cpp.github.io/cppwp/n4659/temp.param#4\" rel=\"nofollow noreferrer\">[temp.param]/4</a>:</p>\n<blockquote>\n<p id=\"so_46153145_46153971_0\">A non-type template-parameter shall have one of the following\n  (optionally cv-qualified) types:</p>\n<ul>\n<li>...</li>\n<li>lvalue reference to object or lvalue reference to function,</li>\n<li>...</li>\n</ul>\n</blockquote>\n<p>The <strong>argument</strong> must follow the restrictions in <a href=\"https://timsong-cpp.github.io/cppwp/n4659/temp.arg.nontype#2\" rel=\"nofollow noreferrer\">[temp.arg.nontype]/2</a>:</p>\n<blockquote>\n<p id=\"so_46153145_46153971_1\">A template-argument for a non-type template-parameter shall be a\n  converted constant expression of the type of the template-parameter.\n  <strong>For a non-type template-parameter of reference or pointer type, the\n  value of the constant expression shall not refer to</strong> (or for a pointer\n  type, shall not be the address of):</p>\n<ul>\n<li><strong>a subobject</strong>,</li>\n<li>...</li>\n</ul>\n</blockquote>\n<p>Which explicitly forbids what you are trying to do. Since <code>b</code> is going to end up referring to a sub-object.</p>\n<p>The only solution which will make this compile, is adding another overload:</p>\n<pre><code>template&lt;Derived &amp; d&gt;\nvoid myfunction()\n{\n   //use d somehow\n}\n</code></pre>\n<p>So you'll need to extract the common code out somehow.</p>\n<p>Or, if you have C++17 available:</p>\n<pre><code>template&lt;auto&amp; b, std::enable_if_t&lt;\n                    std::is_base_of_v&lt;Base, std::decay_t&lt;decltype(b)&gt;&gt;\n                  , void*&gt; = nullptr&gt;\nvoid myfunction()\n{\n   //use b somehow\n}\n</code></pre>\n<p>I suggest you re-think your general approach, however.</p>\n", "OwnerUserId": "817643", "LastEditorUserId": "817643", "LastEditDate": "2017-09-12T09:14:01.330", "Id": "46153971", "Score": "4", "CreationDate": "2017-09-11T10:53:24.717", "LastActivityDate": "2017-09-12T09:14:01.330"}, "bq_ids": {"n4140": {"so_46153145_46153971_1": {"section_id": 87, "quality": 0.6190476190476191, "length": 13}, "so_46153145_46153971_0": {"section_id": 57, "quality": 1.0, "length": 8}}, "n3337": {"so_46153145_46153971_1": {"section_id": 82, "quality": 0.7619047619047619, "length": 16}, "so_46153145_46153971_0": {"section_id": 52, "quality": 1.0, "length": 8}}, "n4659": {"so_46153145_46153971_0": {"section_id": 59, "quality": 1.0, "length": 8}, "so_46153145_46153971_1": {"section_id": 90, "quality": 0.9523809523809523, "length": 20}}}});