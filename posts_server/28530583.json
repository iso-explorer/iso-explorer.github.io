post_cb({"28535343": {"Id": "28535343", "PostTypeId": "2", "Body": "<p>In addition to the information provided by @hvd <a href=\"https://stackoverflow.com/a/28534978/434551\">in his answer</a>...</p>\n<p>From the C++ Draft Standard N3337 (emphasis mine):</p>\n<blockquote>\n<p id=\"so_28530583_28535343_0\"><strong>9.4.2 Static data members</strong></p>\n<p id=\"so_28530583_28535343_1\">3 If a non-volatile <code>const static</code> data member is of integral or enumeration type, its declaration in the class definition can specify a <em>brace-or-equal-initializer</em> in which every <em>initializer-clause</em> that is an <em>assignment- expression</em> is a constant expression (5.19). A <code>static</code> data member of literal type can be declared in the class definition with the <code>constexpr</code> specifier; if so, its declaration shall specify a <em>brace-or-equal-initializer</em> in which every <em>initializer-clause</em> that is an <em>assignment-expression</em> is a constant expression. [ <em>Note:</em> In both these cases, the member may appear in constant expressions. \u2014 <em>end note</em> ] <strong>The member shall still be defined in a namespace scope if it is odr-used (3.2) in the program and the namespace scope definition shall not contain an <em>initializer</em>.</strong></p>\n</blockquote>\n<p>Given that <code>A::data</code> is odr-used in the expression <code>A::data[0]</code>, as per the standard, it shall be defined in a namespace scope. The fact that g++ is able to successfully create a program without <code>A::data</code> being defined in a namescpace scope does not make the program right. To be standards compliant, <code>A::data</code> shall be defined.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2015-02-16T06:06:08.783", "Score": "0", "CreationDate": "2015-02-16T05:59:04.873", "ParentId": "28530583", "CommentCount": "3", "LastEditDate": "2017-05-23T11:52:56.563", "OwnerUserId": "434551"}, "bq_ids": {"n4140": {"so_28530583_28535343_1": {"length": 57, "quality": 0.890625, "section_id": 5908}, "so_28530583_28534978_3": {"length": 30, "quality": 0.9375, "section_id": 7040}, "so_28530583_28534978_1": {"length": 12, "quality": 1.0, "section_id": 7041}}, "n3337": {"so_28530583_28535343_1": {"length": 57, "quality": 0.890625, "section_id": 5680}, "so_28530583_28534978_1": {"length": 12, "quality": 1.0, "section_id": 6786}}, "n4659": {"so_28530583_28534978_3": {"length": 30, "quality": 0.9375, "section_id": 8537}, "so_28530583_28534978_1": {"length": 12, "quality": 1.0, "section_id": 8538}}}, "28534978": {"Id": "28534978", "PostTypeId": "2", "Body": "<p>The standard does not require any diagnostics for a failure to provide a definition where one is required.</p>\n<blockquote>\n<p id=\"so_28530583_28534978_0\"><strong>3.2 One definition rule [basic.def.odr]</strong></p>\n<p id=\"so_28530583_28534978_1\">4 Every program shall contain exactly one definition of every non-inline function or variable that is odr-used in that program; no diagnostic required. [...]</p>\n</blockquote>\n<p>This means implementations are allowed to optimise away accesses to such variables, and that's what's happening in your first case with GCC.</p>\n<p>Both GCC and clang have decided that they prefer a consistent user experience, where error messages about missing definitions do not depend on the optimisation level. Usually, that means that any missing definition causes an error message. However, in this case, GCC is doing some minimal optimisation even at <code>-O0</code>, avoiding the error.</p>\n<p>But the program is an error either way, because even <code>A::dict[0]</code> is an ODR-use:</p>\n<blockquote>\n<p id=\"so_28530583_28534978_2\"><strong>3.2 One definition rule [basic.def.odr]</strong></p>\n<p id=\"so_28530583_28534978_3\">3 A variable <code>x</code> whose name appears as a potentially-evaluated expression <code>ex</code> is odr-used by <code>ex</code> unless applying the lvalue-to-rvalue conversion (4.1) to <code>x</code> yields a constant expression (5.19) that does not invoke any non-trivial functions and, if <code>x</code> is an object, <code>ex</code> is an element of the set of potential results of an expression <code>e</code>, where either the lvalue-to-rvalue conversion (4.1) is applied to <code>e</code>, or <code>e</code> is a discarded-value expression (Clause 5). [...]</p>\n</blockquote>\n<p>The use of <code>A::dict</code> doesn't involve lvalue-to-rvalue conversion, it involves the array-to-pointer conversion, so the exception doesn't apply.</p>\n", "LastEditorUserId": "743382", "LastActivityDate": "2015-02-16T05:29:21.933", "Score": "7", "CreationDate": "2015-02-16T05:20:25.640", "ParentId": "28530583", "CommentCount": "5", "LastEditDate": "2015-02-16T05:29:21.933", "OwnerUserId": "743382"}, "28530583": {"ViewCount": "299", "Body": "<p>This is a follow up question to <a href=\"https://stackoverflow.com/questions/28530278/undefined-reference-to-static-constexpr-char\">Undefined reference to static constexpr char[][]</a>.</p>\n<p>The following program builds and runs fine.</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct A {\n   constexpr static char dict[] = \"test\";\n\n   void print() {\n      std::cout &lt;&lt; A::dict[0] &lt;&lt; std::endl;\n   }\n};\n\nint main() {\n   A a;\n   a.print();\n   return 0;\n}\n</code></pre>\n<p>However, if I change <code>A::print()</code> to:</p>\n<pre><code>   void print() {\n      std::cout &lt;&lt; A::dict &lt;&lt; std::endl;\n   }\n</code></pre>\n<p>I get the following linker error in g++ 4.8.2.</p>\n<pre>\n/tmp/cczmF84A.o: In function `A::print()':\nsocc.cc:(.text._ZN1A5printEv[_ZN1A5printEv]+0xd): undefined reference to `A::dict'\ncollect2: error: ld returned 1 exit status\n</pre>\n<p>The linker error can be resolved by adding a line:</p>\n<pre><code>constexpr char A::dict[];\n</code></pre>\n<p>outside the class definition. </p>\n<p>However, it's not clear to me why using one of the members of the array does not cause a linker error while using the array causes a linker error.</p>\n", "AcceptedAnswerId": "28534978", "Title": "Strange behavior with constexpr static member variable", "CreationDate": "2015-02-15T20:09:15.117", "Id": "28530583", "CommentCount": "8", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2017-05-23T11:45:54.037", "LastEditorUserId": "-1", "LastActivityDate": "2015-02-16T06:06:08.783", "Score": "11", "OwnerUserId": "434551", "Tags": "<c++><c++11>", "AnswerCount": "2"}});