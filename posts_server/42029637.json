post_cb({"42030177": {"ParentId": "42029637", "CommentCount": "1", "Body": "<p>First, the compiler segfault is always a compiler bug. You should report that.</p>\n<p>Second, default constructors are never inherited. From N3242 (the wording in N3797 is similar), [class.inhctor]:</p>\n<blockquote>\n<p id=\"so_42029637_42030177_0\">For each non-template constructor in the candidate set of inherited constructors <strong>other than a constructor having no parameters</strong> or a copy/move constructor having a single parameter, a constructor is implicitly declared with the same constructor characteristics unless there is a user-declared constructor with the same signature in the class where the using-declaration appears.</p>\n</blockquote>\n<p>The default constructor of <code>Base</code> isn't inherited into <code>Derived</code>, so <code>Derived t</code> should be ill-formed since there's no valid constructor taking zero arguments.</p>\n<hr/>\n<p>In C++17, this is still ill-formed, though the wording is different. Still [class.inhctor], from N4618:</p>\n<blockquote>\n<p id=\"so_42029637_42030177_1\">When a constructor for type B is invoked to initialize an object of a different type D (that is, when the constructor was inherited (7.3.3)), initialization proceeds as if a defaulted default constructor were used to initialize the D object and each base class subobject from which the constructor was inherited, except that\n  the B subobject is initialized by the invocation of the inherited constructor. </p>\n</blockquote>\n<p>To invoke <code>Base::Base()</code>, we'd have to start with <code>Derived::Derived()</code>. But there's no <code>Derived::Derived()</code>. </p>\n", "OwnerUserId": "2069064", "PostTypeId": "2", "Id": "42030177", "Score": "2", "CreationDate": "2017-02-03T17:52:12.070", "LastActivityDate": "2017-02-03T17:52:12.070"}, "bq_ids": {"n4140": {"so_42029637_42030177_0": {"section_id": 484, "quality": 0.9696969696969697, "length": 32}}, "n3337": {"so_42029637_42030177_0": {"section_id": 475, "quality": 0.9696969696969697, "length": 32}}, "n4659": {"so_42029637_42030177_1": {"section_id": 464, "quality": 0.9705882352941176, "length": 33}}}, "42029637": {"CommentCount": "3", "ViewCount": "69", "PostTypeId": "1", "LastEditorUserId": "566849", "CreationDate": "2017-02-03T17:18:41.047", "LastActivityDate": "2017-02-03T18:10:01.773", "Title": "Inheriting default constructor fails in gcc and works in clang, which one's got the bug?", "AcceptedAnswerId": "42030177", "LastEditDate": "2017-02-03T18:10:01.773", "Id": "42029637", "Score": "1", "Body": "<p>Take this simple example.</p>\n<pre class=\"lang-c++ prettyprint-override\"><code>struct Base {\n    // Base::Base() defined by the compiler\n};\n\nstruct Derived: Base { \n    using Base::Base; // Should inherit Base::Base()\n\n    Derived(int value):\n        m_value(value)\n    {}\n\nprivate:\n    int m_value; // If Base::Base() is invoked, it's default constructed\n};\n\nDerived t;\n</code></pre>\n<p><strike>As far as I understand by reading <a href=\"http://en.cppreference.com/w/cpp/language/using_declaration#Inheriting_constructors\" rel=\"nofollow noreferrer\">cppreference</a>, <code>Derived</code> should inherit the default <code>Base::Base()</code> constructor and the code above should happily compile.</strike></p>\n<p><strong>Edit</strong>: my bad, the page I linked to tells exactly the opposite story. So it seems clang's got a regression.</p>\n<p>However, all versions of gcc I've tried fail at it, complaining that <code>Derived</code> has no default constructor, whilst clang does it just fine, but <strong>only since version 3.9.0</strong>; g++-7 <strong>segfaults</strong>, even<sup> <strong>1</strong></sup>.</p>\n<p>You can see it by yourselves on <a href=\"https://godbolt.org/g/3zz0bQ\" rel=\"nofollow noreferrer\">godbolt</a>.</p>\n<p>So, who's at fault here? Clang for allowing it, or gcc (bar the segfault) for not allowing it?</p>\n<hr>\n<p><sup><strong>1</strong></sup> Although it seems to do so only on godbolt, I cannot reproduce the segfault locally.</p>\n</hr>", "Tags": "<c++><c++11><inheritance><g++><clang++>", "OwnerUserId": "566849", "AnswerCount": "1"}});