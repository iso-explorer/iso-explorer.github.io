post_cb({"bq_ids": {"n4140": {"so_18629184_18629454_4": {"length": 33, "quality": 0.9705882352941176, "section_id": 7043}, "so_18629184_18629454_3": {"length": 32, "quality": 0.8888888888888888, "section_id": 7041}, "so_18629184_18629454_5": {"length": 6, "quality": 1.0, "section_id": 7043}, "so_18629184_18629454_7": {"length": 15, "quality": 0.9375, "section_id": 7043}, "so_18629184_18629404_2": {"length": 51, "quality": 0.9444444444444444, "section_id": 5404}, "so_18629184_18629454_9": {"length": 51, "quality": 0.9622641509433962, "section_id": 5404}, "so_18629184_18629454_1": {"length": 14, "quality": 1.0, "section_id": 7038}, "so_18629184_18629404_1": {"length": 33, "quality": 1.0, "section_id": 7043}, "so_18629184_18629404_0": {"length": 19, "quality": 1.0, "section_id": 7041}}, "n3337": {"so_18629184_18629454_1": {"length": 14, "quality": 1.0, "section_id": 6784}, "so_18629184_18629404_2": {"length": 51, "quality": 0.9444444444444444, "section_id": 5199}, "so_18629184_18629454_3": {"length": 32, "quality": 0.8888888888888888, "section_id": 6786}, "so_18629184_18629404_1": {"length": 33, "quality": 1.0, "section_id": 6788}, "so_18629184_18629454_7": {"length": 16, "quality": 1.0, "section_id": 6788}, "so_18629184_18629454_4": {"length": 33, "quality": 0.9705882352941176, "section_id": 6788}, "so_18629184_18629454_9": {"length": 51, "quality": 0.9622641509433962, "section_id": 5199}, "so_18629184_18629404_0": {"length": 19, "quality": 1.0, "section_id": 6786}, "so_18629184_18629454_5": {"length": 6, "quality": 1.0, "section_id": 6788}}, "n4659": {"so_18629184_18629454_1": {"length": 14, "quality": 1.0, "section_id": 8535}, "so_18629184_18629404_2": {"length": 51, "quality": 0.9444444444444444, "section_id": 6853}, "so_18629184_18629454_3": {"length": 32, "quality": 0.8888888888888888, "section_id": 8538}, "so_18629184_18629404_1": {"length": 33, "quality": 1.0, "section_id": 8540}, "so_18629184_18629454_7": {"length": 15, "quality": 0.9375, "section_id": 8540}, "so_18629184_18629454_4": {"length": 33, "quality": 0.9705882352941176, "section_id": 8540}, "so_18629184_18629454_9": {"length": 51, "quality": 0.9622641509433962, "section_id": 6853}, "so_18629184_18629404_0": {"length": 19, "quality": 1.0, "section_id": 8538}, "so_18629184_18629454_5": {"length": 6, "quality": 1.0, "section_id": 8540}}}, "18629404": {"Id": "18629404", "PostTypeId": "2", "Body": "<p>Your program has UB (Undefined Behaviour), because it violates ODR (One Definition Rule) by providing two different definitions of <code>f()</code>. There is therefore next to no way of reasoning why it behaves one way or the other. In the best tradition of UB, any behaviour is possible (including ordering pizza over the Internet).</p>\n<p><strong>EDIT</strong></p>\n<p>These quotes from the standard (ISO/IEC 14882:2011) prove it's UB:</p>\n<p>[basic.def.odr]\u00a73:</p>\n<blockquote>\n<p id=\"so_18629184_18629404_0\">Every program shall contain exactly one definition of every non-inline function or variable that is odr-used in that program; no diagnostic required. ... An inline function shall be defined in every translation unit in which it is odr-used.</p>\n</blockquote>\n<p>[basic.def.odr]\u00a75:</p>\n<blockquote>\n<p id=\"so_18629184_18629404_1\">There can be more than one definition of ... inline function with\n  external linkage ... in a program provided that each definition\n  appears in a different translation unit, and provided the definitions\n  satisfy the following requirements. Given such an entity named D\n  defined in more than one translation unit, then</p>\n<ul>\n<li>each definition of D shall consist of the same sequence of tokens; and</li>\n<li>...</li>\n</ul>\n</blockquote>\n<p>[dcl.fct.spec]\u00a74</p>\n<blockquote>\n<p id=\"so_18629184_18629404_2\">An inline function shall be defined in every translation unit in which it is odr-used and shall have exactly the same definition in every case (3.2). [ <em>Note:</em> A call to the inline function may be encountered before its definition appears in the translation unit. <em>-end note</em> ] If the definition of a function appears in a translation unit before its first declaration as inline, the program is ill-formed. <strong>If a function with external linkage is declared inline in one translation unit, it shall be declared inline in all translation units in which it appears; no diagnostic is required.</strong> ...</p>\n</blockquote>\n<p>(Emphasis mine)</p>\n", "LastEditorUserId": "1782465", "LastActivityDate": "2013-09-05T06:59:02.497", "Score": "6", "CreationDate": "2013-09-05T06:39:51.243", "ParentId": "18629184", "CommentCount": "16", "OwnerUserId": "1782465", "LastEditDate": "2013-09-05T06:59:02.497"}, "18629454": {"Id": "18629454", "PostTypeId": "2", "Body": "<p>Your program violate the <a href=\"http://en.wikipedia.org/wiki/One_Definition_Rule\" rel=\"noreferrer\"><strong>One definition Rule</strong></a> then it is <a href=\"http://en.wikipedia.org/wiki/Undefined_behavior\" rel=\"noreferrer\"><em>Undefined behavior</em></a>.</p>\n<p>When you have an <em>Undefined behaviour</em>, anything is possible but you have to know that the worst case will come during the most important demo ;)</p>\n<p>The standard says:</p>\n<blockquote>\n<p id=\"so_18629184_18629454_0\"><strong>3.2 One definition rule [basic.def.odr]</strong></p>\n<p id=\"so_18629184_18629454_1\">1/ No translation unit shall contain more than one definition of any variable, function, class type, enumeration type, or template.</p>\n<p id=\"so_18629184_18629454_2\"><strong>[...]</strong></p>\n<p id=\"so_18629184_18629454_3\">4/ Every program shall contain exactly one definition of every non-inline function or variable that is odr-used in that program; no diagnostic required. The definition can appear explicitly in the program, it can be found in the standard or a user-defined library, or (when appropriate) it is implicitly defined (see 12.1, 12.4 and 12.8). <strong>An inline function shall be defined in every translation unit in which it is odr-used.</strong></p>\n<p id=\"so_18629184_18629454_4\">5/ There can be more than one definition of [...] inline function with external linkage (7.1.2) [...] in a program provided that each definition appears in a different translation unit, and provided the definitions satisfy the following requirements. Given such an entity named D defined in more than one translation unit, then</p>\n<ul>\n<li><p id=\"so_18629184_18629454_5\">each definition of D shall consist of the same sequence of tokens; and</p></li>\n<li><p id=\"so_18629184_18629454_6\">[...]</p></li>\n</ul>\n<p id=\"so_18629184_18629454_7\">If the definitions of D satisfy all these requirements, then the program shall behave as if there were a single definition of D. If the definitions of D do not satisfy these requirements, <strong>then the behavior is undefined.</strong></p>\n</blockquote>\n<p>And later:</p>\n<blockquote>\n<p id=\"so_18629184_18629454_8\"><strong>7.1.2 Function specifiers [dcl.fct.spec]</strong></p>\n<p id=\"so_18629184_18629454_9\">4/ <strong>An inline function shall be defined in every translation unit in which it is odr-used and shall have exactly the same definition in every case</strong> (3.2). [ <em>Note</em>: A call to the inline function may be encountered before its definition appears in the translation unit. \u2014<em>endnote</em>] <strong>If the definition of a function appears in a translation unit before its first declaration as inline, the program is ill-formed.</strong> If a function with external linkage is declared inline in one translation unit, it shall be declared inline in all translation units in which it appears; no diagnostic is required.</p>\n</blockquote>\n", "LastEditorUserId": "1394283", "LastActivityDate": "2013-09-05T07:07:34.893", "Score": "6", "CreationDate": "2013-09-05T06:42:29.897", "ParentId": "18629184", "CommentCount": "5", "OwnerUserId": "1394283", "LastEditDate": "2013-09-05T07:07:34.893"}, "18629184": {"ViewCount": "104", "Body": "<p>test.cpp</p>\n<pre><code>#include &lt;iostream&gt;\nvoid f()\n{\n    std::cout&lt;&lt;\"non-inline\"&lt;&lt;std::endl;\n}\n</code></pre>\n<p>main.cpp</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\ninline void f()\n{\n    cout&lt;&lt;\"inline\"&lt;&lt;endl;\n}\n\nint main()\n{\n    f();\n    return 0;\n}\n</code></pre>\n<p>In debug mode, the output is: non-inline. command:g++ [-g] -o main main.cpp test.cpp</p>\n<p>In release mode, the output is: inline. command:g++ -O -o main main.cpp test.cpp </p>\n<p>Why?</p>\n<p>Linux G++ 4.7.3</p>\n<p>In C99, an inline definition does not provide an external definition for the function, so we can provide an external definition of the identifier by defining another function in other source file.</p>\n<p>Does an inline definition provide an external definition for the function in C++??</p>\n<p>Thx\uff01\uff01</p>\n", "Title": "Which one is called when existing an extern function with the same name as an inline function?", "CreationDate": "2013-09-05T06:27:16.457", "LastActivityDate": "2013-09-05T07:07:34.893", "CommentCount": "7", "LastEditDate": "2013-09-05T07:02:06.230", "PostTypeId": "1", "LastEditorUserId": "2156384", "Id": "18629184", "Score": "0", "OwnerUserId": "2156384", "Tags": "<c++>", "AnswerCount": "2"}});