post_cb({"45804869": {"ParentId": "45551177", "CommentCount": "0", "Body": "<p><a href=\"http://eel.is/c++draft/dcl.init#17\" rel=\"nofollow noreferrer\">Paragraph 17</a> of <a href=\"http://eel.is/c++draft/dcl.init\" rel=\"nofollow noreferrer\">[dcl.init]</a> specifies all possible initializers for arrays.</p>\n<blockquote>\n<p id=\"so_45551177_45804869_0\"><code>17</code> The semantics of initializers are as follows. The destination type is the type of the object or reference being initialized and the source type is the type of the initializer expression. If the initializer is not a single (possibly parenthesized) expression, the source type is not defined.</p>\n<p id=\"so_45551177_45804869_1\"><code>(17.1)</code> If the initializer is a (non-parenthesized) <em>braced-init-list</em> or is = <em>braced-init-list</em>, the object or reference is list-initialized.</p>\n<p id=\"so_45551177_45804869_2\"><code>(17.2)</code> If the destination type is a reference type, see [dcl.init.ref].</p>\n<p id=\"so_45551177_45804869_3\"><code>(17.3)</code> If the destination type is an array of characters, an array of char16_\u00adt, an array of char32_\u00adt, or an array of wchar_\u00adt, and the initializer is a string literal, see [dcl.init.string].</p>\n<p id=\"so_45551177_45804869_4\"><code>(17.4)</code> If the initializer is (), the object is value-initialized.</p>\n<p id=\"so_45551177_45804869_5\"><code>(17.5)</code> <strong>Otherwise, if the destination type is an array, the program is ill-formed.</strong></p>\n</blockquote>\n<p>(17.2) is not applicable to arrays, so the options are:</p>\n<ol>\n<li>Default-initialization (<a href=\"http://eel.is/c++draft/dcl.init#12\" rel=\"nofollow noreferrer\">[dcl.init]/12</a>): <code>int x[3];</code></li>\n<li>Value-initialization (<a href=\"http://eel.is/c++draft/dcl.init#17.4\" rel=\"nofollow noreferrer\">[dcl.init]/17.4</a>): <code>int* x = new int[3]();</code></li>\n<li>List-initialization (<a href=\"http://eel.is/c++draft/dcl.init#17.1\" rel=\"nofollow noreferrer\">[dcl.init]/17.1</a>): <code>int x[] = {1, 2, 3};</code> or <code>int x[] {1, 2, 3};</code></li>\n<li>Initialization with a string literal (<a href=\"http://eel.is/c++draft/dcl.init#17.3\" rel=\"nofollow noreferrer\">[dcl.init]/17.3</a>): <code>char x[] = \"text\";</code></li>\n</ol>\n", "OwnerUserId": "3290797", "PostTypeId": "2", "Id": "45804869", "Score": "1", "CreationDate": "2017-08-21T20:13:48.840", "LastActivityDate": "2017-08-21T20:13:48.840"}, "45551177": {"CommentCount": "2", "ViewCount": "85", "CreationDate": "2017-08-07T16:01:03.553", "LastActivityDate": "2017-08-21T20:13:48.840", "Title": "C++ array initializer", "AcceptedAnswerId": "45804869", "PostTypeId": "1", "Id": "45551177", "Score": "1", "Body": "<p>In a C++ 14 standard <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4296.pdf\" rel=\"nofollow noreferrer\">draft</a>, there are two mentions (that I found) regarding array initialization:</p>\n<ol>\n<li>Section 8.5.1 ([dcl.init.aggr]) paragraph 2:</li>\n</ol>\n<blockquote>\n<p id=\"so_45551177_45551177_0\">\"When an aggregate is initialized by an initializer list [...]\"</p>\n</blockquote>\n<ol start=\"2\">\n<li>Section 8.5.2 ([dcl.init.string]) paragraph 1:</li>\n</ol>\n<blockquote>\n<p id=\"so_45551177_45551177_1\">\"An array of narrow character type (3.9.1), char16_t array, char32_t array, or wchar_t array can be initialized\n  by a narrow string literal, char16_t string literal, char32_t string literal, or wide string literal,\n  respectively, or by an appropriately-typed string literal enclosed in braces (2.13.5). [...]\"</p>\n</blockquote>\n<p>Therefore there are at least two types of initializers that can be used for arrays: initializer lists and string literals.</p>\n<p>Does the standard mention explicitly that these are the <strong>only</strong> two options?  </p>\n", "Tags": "<c++><arrays><initializer>", "OwnerUserId": "3766405", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_45551177_45804869_2": {"section_id": 3296, "quality": 0.7142857142857143, "length": 5}, "so_45551177_45804869_0": {"section_id": 3296, "quality": 0.84, "length": 21}, "so_45551177_45804869_1": {"section_id": 3296, "quality": 0.625, "length": 5}, "so_45551177_45551177_1": {"section_id": 3314, "quality": 0.9375, "length": 30}, "so_45551177_45551177_0": {"section_id": 3299, "quality": 1.0, "length": 5}, "so_45551177_45804869_3": {"section_id": 3296, "quality": 0.875, "length": 14}, "so_45551177_45804869_5": {"section_id": 3296, "quality": 0.8333333333333334, "length": 5}}, "n3337": {"so_45551177_45804869_2": {"section_id": 3166, "quality": 0.7142857142857143, "length": 5}, "so_45551177_45804869_0": {"section_id": 3166, "quality": 0.84, "length": 21}, "so_45551177_45804869_1": {"section_id": 3166, "quality": 0.625, "length": 5}, "so_45551177_45551177_1": {"section_id": 3184, "quality": 0.8125, "length": 26}, "so_45551177_45551177_0": {"section_id": 3169, "quality": 1.0, "length": 5}, "so_45551177_45804869_3": {"section_id": 3166, "quality": 0.875, "length": 14}, "so_45551177_45804869_5": {"section_id": 3166, "quality": 0.8333333333333334, "length": 5}}, "n4659": {"so_45551177_45804869_2": {"section_id": 4058, "quality": 0.7142857142857143, "length": 5}, "so_45551177_45804869_0": {"section_id": 4058, "quality": 0.84, "length": 21}, "so_45551177_45804869_1": {"section_id": 4058, "quality": 0.875, "length": 7}, "so_45551177_45551177_1": {"section_id": 4080, "quality": 0.9375, "length": 30}, "so_45551177_45551177_0": {"section_id": 4065, "quality": 1.0, "length": 5}, "so_45551177_45804869_3": {"section_id": 4058, "quality": 0.875, "length": 14}, "so_45551177_45804869_5": {"section_id": 4058, "quality": 0.8333333333333334, "length": 5}}}});