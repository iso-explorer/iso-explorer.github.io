post_cb({"46932152": {"Id": "46932152", "PostTypeId": "2", "Body": "<p>both declaration of the function \"bar\" is okay and both are legal too.\nthe only difference occurs when you intend to use the \"bar\" function across different files.\nvoid bar() has global scope, means you can use it in any file(files other than \"bar\" exist)</p>\n<p>but static void bar() will have file scope, means you can still use it inside the parent file, but not outside the that file.</p>\n<p>otherwise, both are correct.</p>\n", "LastActivityDate": "2017-10-25T12:13:24.733", "Score": "-3", "CreationDate": "2017-10-25T12:13:24.733", "ParentId": "46930702", "CommentCount": "3", "OwnerUserId": "8825161"}, "46930819": {"Id": "46930819", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_46930702_46930819_0\">doing something like this seems to work just fine:</p>\n</blockquote>\n<p>That doesn't mean it's OK.</p>\n<p>Please read <a href=\"http://c-faq.com/ansi/experiment.html\" rel=\"nofollow noreferrer\">http://c-faq.com/ansi/experiment.html</a> which has a great analogy from Roger Miller:</p>\n<p><em>\"Somebody told me that in basketball you can't hold the ball and run. I got a basketball and tried it and it worked just fine. He obviously didn't understand basketball.\"</em></p>\n<p>Accessing <code>v[10]</code> is undefined behaviour. It doesn't matter if you call a member function on it, even just accessing <code>v[10]</code> is undefined. (And as pointed out in the comment, the object expression is evaluated even when calling a static member function, which IMHO should be obvious, because <code>v[10]</code> is not used in an unevaluated context like <code>sizeof(v[10])</code> or <code>decltype(v[10])</code>).</p>\n<p>You cannot write C++ code with the view \"this seems to work just fine\" and assume that means the program is correct.</p>\n", "LastEditorUserId": "981959", "LastActivityDate": "2017-10-25T11:15:26.397", "Score": "9", "CreationDate": "2017-10-25T11:08:44.867", "ParentId": "46930702", "CommentCount": "5", "LastEditDate": "2017-10-25T11:15:26.397", "OwnerUserId": "981959"}, "46930702": {"ViewCount": "101", "Body": "<p>Something like this just came up in another question and piqued my interest. Given that <code>Foo</code> is declared like this:</p>\n<pre><code>struct Foo\n{\n     static void bar() {std::cout &lt;&lt; \"Bar!\";}\n};\n</code></pre>\n<p>doing something like this seems to work just fine:</p>\n<pre><code>std::vector&lt;Foo&gt; v;\nv[10].bar();\n</code></pre>\n<p>However, is this usage actually legal? What if <code>bar()</code> weren't declared <code>static</code>?</p>\n", "AcceptedAnswerId": "46931313", "Title": "Invoking a static member function on non-existing object", "CreationDate": "2017-10-25T11:02:00.287", "Id": "46930702", "CommentCount": "3", "PostTypeId": "1", "LastActivityDate": "2017-11-10T19:58:16.507", "Score": "4", "OwnerUserId": "8736713", "Tags": "<c++><static><language-lawyer>", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_46930702_46931313_0": {"length": 30, "quality": 1.0, "section_id": 5900}}, "n3337": {"so_46930702_46931313_0": {"length": 30, "quality": 1.0, "section_id": 5672}}, "n4659": {"so_46930702_46931313_0": {"length": 30, "quality": 1.0, "section_id": 7382}}}, "46931313": {"Id": "46931313", "PostTypeId": "2", "Body": "<p>According to <a href=\"https://timsong-cpp.github.io/cppwp/n4659/class.static#1\" rel=\"nofollow noreferrer\">[class.static]/1</a> (emphasis mine):</p>\n<blockquote>\n<p id=\"so_46930702_46931313_0\">A static member s of class X may be referred to using the qualified-id\n  expression X\u200b::\u200bs; it is not necessary to use the class member access\n  syntax to refer to a static member. <strong>A static member may be referred to\n  using the class member access syntax, in which case the object\n  expression is evaluated</strong>.</p>\n</blockquote>\n<p><code>v[10]</code> <em>must</em> be evaluated, <code>bar</code> being static or not is immaterial. The vector will be accessed out of bounds for sure, so it's definitely undefined behavior.</p>\n", "LastActivityDate": "2017-10-25T11:31:53.233", "Score": "4", "CreationDate": "2017-10-25T11:31:53.233", "ParentId": "46930702", "CommentCount": "0", "OwnerUserId": "817643"}});