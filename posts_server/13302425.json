post_cb({"bq_ids": {"n4140": {"so_13302425_13302614_0": {"length": 48, "quality": 0.9230769230769231, "section_id": 5907}}, "n3337": {"so_13302425_13302614_0": {"length": 48, "quality": 0.9230769230769231, "section_id": 5679}}, "n4659": {"so_13302425_13302614_0": {"length": 46, "quality": 0.8846153846153846, "section_id": 7389}}}, "13302425": {"ViewCount": "797", "Body": "<p>I have a linker error and I don't seem to figure out:</p>\n<p>The default constructor sets name to \u201cUnknown\u201d, Office Number to nextOfficeNo, Employee number to the value of nextEmpId, Department number to 0, Employee Position to Entry level, year of experience to 0, and salary to 0. It also ensures that the values of all static attributes are incremented by 1.  </p>\n<p>The second constructor sets the attributes based on what is passed to the function. The value of Employee Salary would still be set to 0 and the values of Office Number and Employee number are set to nextOfficeNo and nextEmpId, respectively. Again, the constructor should increment the values of all static attributes by 1.\nalso; The value of totalNumOfEmployees must be initialized to 0 before creating any object, be incremented upon creating each object of class Employee (in every constructor), and be decremented when an object of class Employee goes out of scope (in destructor).</p>\n<p>The value of nextEmpId must be initialized to 1000 before creating any object, and must be incremented upon creating each object of class Employee in every constructor.</p>\n<p>The value of nextOfficeNo must be initialized to 10 before creating any object, and must be incremented upon creating each object of class Employee in every constructor.</p>\n<p>this is my header class:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\nusing namespace std;\n\nclass Employee\n{\nprivate:\n    string name;\n    const long officeNo;\n    const long empId;\n    int deptNo;\n    char empPosition; // \u2018E\u2019: entry level, \u2018M\u2019: manager, \u2018D\u2019: Director, \u2018P\u2019:Project_leader\n    int yearOfExp;\n    float salary;\n    static int totalNumofEmployees;\n    static int nextEmpId;\n    static int nextOfficeNo;\npublic:\n    Employee();\n    ~Employee();\n    Employee(string theName, int theDeptNo, char theEmpPosition, int theYearOfExp);\n    void Print() const ;\n    void GetInfo();\n    friend void setSalary(Employee&amp; );\n };\n</code></pre>\n<p>and this is my CPP class:<br>\nI have the problems in my constructors:</br></p>\n<pre><code>#include \"Employee.h\"\n#include &lt;string&gt;\n#include &lt;iostream&gt;\n\nEmployee::Employee()\n  : officeNo(nextOfficeNo), empId(nextEmpId)\n{\n    name = \"Unknown\";\n    deptNo = 0;\n    empPosition = 'E';\n    yearOfExp = 0;\n    salary = 0;\n    totalNumofEmployees = 0;\n    nextEmpId = 1000;\n    nextOfficeNo = 10;\n    totalNumofEmployees++;\n    nextEmpId++;\n    nextOfficeNo++;\n}\n\nEmployee::Employee(string theName, int theDeptNo, char theEmpPosition, int theYearOfExp)\n  : officeNo(nextOfficeNo), empId(nextEmpId)\n{\n    name = theName;\n    deptNo = theDeptNo;\n    empPosition = theEmpPosition;\n    yearOfExp = theYearOfExp;\n    salary = 0;\n    totalNumofEmployees = 0;\n    nextEmpId = 1000;\n    nextOfficeNo = 10;\n    totalNumofEmployees++;\n    nextEmpId++;\n    nextOfficeNo++;\n}\n</code></pre>\n<p>here are the errors:</p>\n<pre><code>{Undefined symbols for architecture x86_64:\n\"Employee::nextOfficeNo\", referenced from:\nEmployee::Employee() in Employee.o\nEmployee::Employee(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, int, char, int) in Employee.o\n\"Employee::totalNumofEmployees\", referenced from:\nEmployee::Employee() in Employee.o\nEmployee::Employee(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, int, char, int) in Employee.o\nEmployee::~Employee() in Employee.o\nEmployee::Print() const in Employee.o\n\"Employee::nextEmpId\", referenced from:\nEmployee::Employee() in Employee.o\nEmployee::Employee(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;,  std::__1::allocator&lt;char&gt; &gt;, int, char, int) in Employee.o\nld: symbol(s) not found for architecture x86_64\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\n}\n</code></pre>\n", "AcceptedAnswerId": "13302614", "Title": "Apple mach O linker", "CreationDate": "2012-11-09T05:11:10.583", "Id": "13302425", "CommentCount": "2", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2012-11-09T05:59:27.957", "LastEditorUserId": "1764118", "LastActivityDate": "2012-11-09T06:04:47.890", "Score": "2", "OwnerUserId": "1811251", "Tags": "<c++><xcode><linker>", "AnswerCount": "1"}, "13302614": {"Id": "13302614", "PostTypeId": "2", "Body": "<p>You have declared static member variables but you forgot to define them:</p>\n<blockquote>\n<p id=\"so_13302425_13302614_0\"><strong>\u00a7 9.4.2/2</strong> The declaration of a static data member in its class definition is not a definition and may be of an\n  incomplete type other than cv-qualified void. The definition for a static data member shall appear in a\n  namespace scope enclosing the member\u2019s class definition. In the definition at namespace scope, the name\n  of the static data member shall be qualified by its class name using the :: operator. The initializer\n  expression in the definition of a static data member is in the scope of its class.</p>\n</blockquote>\n<pre><code>// Example:\nclass process {\n    static process* run_chain;\n    static process* running;\n};\nprocess* process::running = get_main();\nprocess* process::run_chain = running;\n</code></pre>\n<p>In your case:</p>\n<pre><code>// add this to your .cpp\nint Employee::totalNumofEmployees = 0;\nint Employee::nextEmpId = 1000;\nint Employee::nextOfficeNo = 10;\n</code></pre>\n<p>And remove these assignments from your constructors:</p>\n<pre><code>totalNumofEmployees = 0;\nnextEmpId = 1000;\nnextOfficeNo = 10;\n</code></pre>\n<p>Otherwise, ever time you create an object, these values are reset.</p>\n", "LastEditorUserId": "1764118", "LastActivityDate": "2012-11-09T06:04:47.890", "Score": "3", "CreationDate": "2012-11-09T05:34:17.570", "ParentId": "13302425", "CommentCount": "4", "LastEditDate": "2012-11-09T06:04:47.890", "OwnerUserId": "1764118"}});