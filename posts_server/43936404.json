post_cb({"43936404": {"ViewCount": "3305", "Body": "<p>In the following <code>C++</code> program, modifying a <strong>static data member</strong> from a <code>const</code> function is working fine:</p>\n<pre><code>class A \n{\n  public:   \n    static int a; // static data member\n\n    void set() const\n    {\n        a = 10;\n    }\n};\n</code></pre>\n<p>But modifying a <strong>non-static data member</strong> from a <code>const</code> function does not work:</p>\n<pre><code>class A \n{\n  public:   \n    int a; // non-static data member\n\n    void set() const\n    {\n        a = 10;\n    }\n};\n</code></pre>\n<p><strong>Why can a <code>const</code> member function modify a <code>static</code> data member?</strong></p>\n", "AcceptedAnswerId": "43936469", "Title": "Why can a const member function modify a static data member?", "CreationDate": "2017-05-12T11:11:16.067", "Id": "43936404", "CommentCount": "6", "FavoriteCount": "9", "PostTypeId": "1", "LastEditDate": "2017-06-07T12:39:04.327", "LastEditorUserId": "6935629", "LastActivityDate": "2017-07-28T19:35:34.497", "Score": "76", "OwnerUserId": "6935629", "Tags": "<c++><function><c++11><static><const>", "AnswerCount": "4"}, "43936807": {"Id": "43936807", "PostTypeId": "2", "Body": "<p>The thing is, that if a member function of a class <code>A</code> is <code>const</code>, then the type of <code>this</code> is <code>const X*</code>, and thereby prevents non-static data members from being altered (cf, for example, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3690.pdf\" rel=\"noreferrer\">C++ standard</a>):</p>\n<blockquote>\n<p id=\"so_43936404_43936807_0\">9.3.2 The this pointer [class.this]</p>\n<p id=\"so_43936404_43936807_1\">In the body of a non-static (9.3) member function, the keyword this is a prvalue expression whose\n  value is the address of the object for which the function is called.\n  The type of this in a member function of a class X is X*. If the\n  member function is declared const, the type of this is const X*, ...</p>\n</blockquote>\n<p>If <code>a</code> is a non-static data member, then <code>a=10</code> is the same as <code>this-&gt;a = 10</code>, which is not allowed if the type of <code>this</code> is <code>const A*</code> and <code>a</code> has not been declared as <code>mutable</code>. Thus, since <code>void set() const</code> makes the type of <code>this</code> being <code>const A*</code>, this access is not allowed.</p>\n<p>If <code>a</code> is a static data member, in contrast, then <code>a=10</code> does not involve <code>this</code> at all; and as long as <code>static int a</code> by itself has not been declared as <code>const</code>, statement <code>a=10</code> is allowed.</p>\n", "LastEditorUserId": "2630032", "LastActivityDate": "2017-05-12T11:35:03.230", "Score": "13", "CreationDate": "2017-05-12T11:32:48.877", "ParentId": "43936404", "CommentCount": "0", "OwnerUserId": "2630032", "LastEditDate": "2017-05-12T11:35:03.230"}, "43972407": {"Id": "43972407", "PostTypeId": "2", "Body": "<p>The <code>const</code> qualifier on a <strong>member function</strong> means that you cannot modify <code>non-mutable</code>, <code>non-static</code> <strong>class data members</strong>.</p>\n", "LastEditorUserId": "6935629", "LastActivityDate": "2017-06-14T07:31:22.753", "Score": "1", "CreationDate": "2017-05-15T05:57:21.780", "ParentId": "43936404", "CommentCount": "0", "OwnerUserId": "8011909", "LastEditDate": "2017-06-14T07:31:22.753"}, "bq_ids": {"n4140": {"so_43936404_43936807_1": {"length": 23, "quality": 0.9583333333333334, "section_id": 5895}, "so_43936404_43937134_2": {"length": 27, "quality": 0.9310344827586207, "section_id": 5891}, "so_43936404_43937134_1": {"length": 23, "quality": 0.92, "section_id": 5895}, "so_43936404_43937134_0": {"length": 6, "quality": 1.0, "section_id": 5906}}, "n3337": {"so_43936404_43936807_1": {"length": 23, "quality": 0.9583333333333334, "section_id": 5666}, "so_43936404_43937134_2": {"length": 27, "quality": 0.9310344827586207, "section_id": 5662}, "so_43936404_43937134_1": {"length": 23, "quality": 0.92, "section_id": 5666}, "so_43936404_43937134_0": {"length": 6, "quality": 1.0, "section_id": 5678}}, "n4659": {"so_43936404_43936807_1": {"length": 23, "quality": 0.9583333333333334, "section_id": 7378}, "so_43936404_43937134_2": {"length": 27, "quality": 0.9310344827586207, "section_id": 7374}, "so_43936404_43937134_1": {"length": 23, "quality": 0.92, "section_id": 7378}, "so_43936404_43937134_0": {"length": 6, "quality": 1.0, "section_id": 7388}}}, "43937134": {"Id": "43937134", "PostTypeId": "2", "Body": "<p>According to the C++ Standard (9.2.3.2 Static data members)</p>\n<blockquote>\n<p id=\"so_43936404_43937134_0\">1 A static data member is <strong>not part of the subobjects of a class</strong>...</p>\n</blockquote>\n<p>And (9.2.2.1 The this pointer)</p>\n<blockquote>\n<p id=\"so_43936404_43937134_1\">1 In the body of a non-static (9.2.1) member function, the keyword\n  this is a prvalue expression whose value is the address of the object\n  for which the function is called. The type of this in a member\n  function of a class X is X*. <strong>If the member function is declared\n  const, the type of this is const X*</strong>,...</p>\n</blockquote>\n<p>And at last (9.2.2 Non-static member functions)</p>\n<blockquote>\n<p id=\"so_43936404_43937134_2\">3 ... if name lookup (3.4) resolves the name in the id-expression to a\n  non-static non-type member of some class C, and if either the\n  id-expression is potentially evaluated or C is X or a base class of X,\n  the id-expression is transformed into a class member access expression\n  (5.2.5) using <strong>(*this)</strong> (9.2.2.1) as the postfix-expression to the\n  left of the . operator.</p>\n</blockquote>\n<p>Thus in this class definition</p>\n<pre><code>class A \n{\n  public:   \n    static int a; \n\n    void set() const\n    {\n        a = 10;\n    }\n};\n</code></pre>\n<p>the static data member <code>a</code> is not a subobject of an object of the class type and the pointer <code>this</code> is not used to access the static data member. So any member function, non-static constant or non-constant, or a static member function can change the data member because it is not a constant.</p>\n<p>In this class definition</p>\n<pre><code>class A \n{\n  public:   \n    int a; \n\n    void set() const\n    {\n        a = 10;\n    }\n};\n</code></pre>\n<p>the non-static data member <code>a</code> is an subobject of an object of the class type. To access it in a member function there is used either a member access syntax of this syntax is implied. You may not use a constant pointer <code>this</code> to modify the data member. And the pointer this is indeed has type <code>const A *</code> within the function <code>set</code> because the function is declared with the qualifier <code>const</code>. If the function had no the qualifier in this case the data member could be changed.</p>\n", "LastEditorUserId": "6935629", "LastActivityDate": "2017-05-13T05:15:58.897", "Score": "21", "CreationDate": "2017-05-12T11:51:55.523", "ParentId": "43936404", "CommentCount": "0", "OwnerUserId": "2877241", "LastEditDate": "2017-05-13T05:15:58.897"}, "43936469": {"Id": "43936469", "PostTypeId": "2", "Body": "<p>It's the rule, that's all. And for good reason.</p>\n<p>The <code>const</code> qualifier on a member function means that you cannot modify non-<code>mutable</code> non-<code>static</code> class member variables.</p>\n<p>By way of offering some rationalisation, the <code>this</code> pointer in a <code>const</code> qualified member function is a <code>const</code> type, and <code>this</code> is inherently related to an <em>instance</em> of a class. <code>static</code> members are not related to a class instance. You don't need an instance to modify a <code>static</code> member: you can do it, in your case, by writing <code>A::a = 10;</code>.</p>\n<p>So, in your first case, think of <code>a = 10;</code> as shorthand for <code>A::a = 10;</code> and in the second case, think of it as shorthand for <code>this-&gt;a = 10;</code>, which is not compilable since the type of <code>this</code> is <code>const A*</code>.</p>\n", "LastEditorUserId": "2380830", "LastActivityDate": "2017-05-12T11:21:26.807", "Score": "91", "CreationDate": "2017-05-12T11:14:34.817", "ParentId": "43936404", "CommentCount": "2", "OwnerUserId": "2380830", "LastEditDate": "2017-05-12T11:21:26.807"}});