post_cb({"bq_ids": {"n4140": {"so_24216335_24216384_0": {"length": 37, "quality": 0.9736842105263158, "section_id": 179}}, "n3337": {"so_24216335_24216384_0": {"length": 37, "quality": 0.9736842105263158, "section_id": 173}}, "n4659": {"so_24216335_24216384_0": {"length": 37, "quality": 0.9736842105263158, "section_id": 184}}}, "24216335": {"ViewCount": "68", "Body": "<p>Consider the following code:</p>\n<pre><code>template &lt;template &lt;int&gt; class T&gt;\nstruct B {\n};\n\ntemplate &lt;int N&gt;\nstruct A {\n    B&lt;A&gt; b;\n};\n</code></pre>\n<p>This does not compile since <code>A</code> in <code>B&lt;A&gt; b</code> refers to the class <code>A&lt;N&gt;</code>, not the template. How can I get the template <code>A</code> from inside the body of <code>A&lt;N&gt;</code>?</p>\n", "AcceptedAnswerId": "24216384", "Title": "Get template from inside class", "CreationDate": "2014-06-14T03:31:45.123", "LastActivityDate": "2014-08-03T09:07:45.463", "CommentCount": "3", "FavoriteCount": "0", "PostTypeId": "1", "Tags": "<c++><templates>", "Id": "24216335", "Score": "2", "OwnerUserId": "1493321", "ClosedDate": "2014-06-14T04:26:26.783", "AnswerCount": "1"}, "24216384": {"Id": "24216384", "PostTypeId": "2", "Body": "<p>Simplest way to bypass this issue, I think:</p>\n<pre><code>template &lt;int N&gt;\nstruct A {\n    B&lt;::A&gt; b;\n};\n</code></pre>\n<p>Although it's actually a very interesting issue because it seems that <code>B&lt;A&gt;</code> should work. From \u00a714.6.1 [temp.local]/p1 of N3936:</p>\n<blockquote>\n<p id=\"so_24216335_24216384_0\">Like normal (non-template) classes, class templates have an\n  injected-class-name (Clause 9). The injected-class-name can be used as\n  a <em>template-name</em> or a <em>type-name</em>. When it is used with a\n  <em>template-argument-list</em>, as a <em>template-argument</em> for a template\n  <em>template-parameter</em>, or as the final identifier in the\n  <em>elaborated-type-specifier</em> of a friend class template declaration, it\n  refers to the class template itself. Otherwise, it is equivalent to\n  the <em>template-name</em> followed by the <em>template-parameters</em> of the class\n  template enclosed in &lt;&gt;.</p>\n</blockquote>\n<p>So it seems like <code>B&lt;A&gt;</code> should be equivalent to <code>B&lt;::A&gt;</code>. GCC 4.8 <a href=\"http://coliru.stacked-crooked.com/a/29a38078c40887a5\" rel=\"nofollow\">accepts</a> the code in the OP, though Clang 3.4 <a href=\"http://coliru.stacked-crooked.com/a/3b432b686061480b\" rel=\"nofollow\">doesn't</a>.</p>\n", "LastEditorUserId": "2756719", "LastActivityDate": "2014-08-03T09:07:45.463", "Score": "2", "CreationDate": "2014-06-14T03:44:25.123", "ParentId": "24216335", "CommentCount": "1", "OwnerUserId": "2756719", "LastEditDate": "2014-08-03T09:07:45.463"}});