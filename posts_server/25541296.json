post_cb({"25541683": {"ParentId": "25541296", "CommentCount": "2", "Body": "<p>The C++ Draft Standard (N3337) has this to say about floating point conversion.</p>\n<blockquote>\n<p id=\"so_25541296_25541683_0\"><strong>4.9 Floating-integral conversions [conv.fpint]</strong></p>\n<p id=\"so_25541296_25541683_1\">2 A prvalue of an integer type or of an unscoped enumeration type can be converted to a prvalue of a floating point type. The result is exact if possible. If the value being converted is in the range of values that can be represented but the value cannot be represented exactly, it is an implementation-defined choice of either the next lower or higher representable value. [ <em>Note:</em> Loss of precision occurs if the integral value cannot be represented exactly as a value of the floating type. \u2014 <em>end note</em> ] If the value being converted is outside the range of values that can be represented, the behavior is undefined.</p>\n</blockquote>\n<p>The warning is understandable if the range of values of an <code>int</code> is outside the range of values of a <code>float</code>.</p>\n<p>If the range of value of an <code>int</code> is within the range of values of a <code>float</code>, the compiler warning is overly zealous.</p>\n<p>I would try @Nawaz's suggestion to get rid of the compiler warning:</p>\n<pre><code>std::transform(begin(v), end(v),\n    std::back_inserter(q), [](int i) { return static_cast&lt;float&gt;(i); });\n</code></pre>\n", "OwnerUserId": "434551", "PostTypeId": "2", "Id": "25541683", "Score": "3", "CreationDate": "2014-08-28T05:57:37.530", "LastActivityDate": "2014-08-28T05:57:37.530"}, "25541296": {"CommentCount": "13", "ViewCount": "204", "PostTypeId": "1", "LastEditorUserId": "219153", "CreationDate": "2014-08-28T05:25:11.413", "LastActivityDate": "2014-08-28T05:57:37.530", "Title": "How to convert explicitly when constructing a vector copy with elements of different type?", "LastEditDate": "2014-08-28T05:39:37.240", "Id": "25541296", "Score": "5", "Body": "<p>I'm making a copy <code>q</code> of vector <code>v</code>, but element types are different and implicitly convertible:</p>\n<pre><code>vector&lt;int&gt;   v = {1, 2, 3, 2};\nvector&lt;float&gt; q(v.begin(), v.end());\n</code></pre>\n<p>This code compiles with a template barf (warning) about type conversion. What is the way to make conversion explicit and avoid the warning? </p>\n<p><strong>EDIT</strong></p>\n<p>I'm using Visual Studio 2013 with warning level 3 (/W3). Here is the top of warning message:</p>\n<p><code>warning C4244: 'initializing' : conversion from 'int' to 'float', possible loss of data ...</code></p>\n", "Tags": "<c++><visual-c++><stl>", "OwnerUserId": "219153", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_25541296_25541683_1": {"section_id": 38, "quality": 0.9166666666666666, "length": 55}}, "n3337": {"so_25541296_25541683_1": {"section_id": 35, "quality": 0.9166666666666666, "length": 55}}, "n4659": {"so_25541296_25541683_1": {"section_id": 38, "quality": 0.8833333333333333, "length": 53}}}});