post_cb({"32090711": {"ParentId": "32090595", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>For <code>std::vector</code>, [vector.overview]/1 (N3337) says:</p>\n<blockquote>\n<p id=\"so_32090595_32090711_0\">The elements of a vector are stored contiguously, meaning that if <code>v</code> is a <code>vector&lt;T, Allocator&gt;</code> where <code>T</code> is some type other than <code>bool</code>, then it obeys the identity <code>&amp;v[n] == &amp;v[0] + n</code> for all <code>0 &lt;= n &lt; v.size()</code>.</p>\n</blockquote>\n<p>So yes, your program's behaviour is portable and well-defined.</p>\n<p>For arrays, [dcl.array]/1 states:</p>\n<blockquote>\n<p id=\"so_32090595_32090711_1\">An object of array type contains a contiguously allocated non-empty set of <code>N</code> subobjects of type <code>T</code>.</p>\n</blockquote>\n<p>This is not quite so explicit as the <code>vector</code> quote, but the co-usage of the word \"contiguous\" points to the fact that the <code>std::vector</code> storage identity also applies to arrays.</p>\n", "OwnerUserId": "496161", "LastEditorUserId": "496161", "LastEditDate": "2015-08-19T08:55:25.373", "Id": "32090711", "Score": "5", "CreationDate": "2015-08-19T08:49:57.957", "LastActivityDate": "2015-08-19T08:55:25.373"}, "32090697": {"ParentId": "32090595", "CommentCount": "4", "Body": "<p>Yes, one of the requirement for the vector is that its elements must be store contiguously.</p>\n<p>From n2798:</p>\n<blockquote>\n<p id=\"so_32090595_32090697_0\">23.2.6 Class template vector [vector]</p>\n<blockquote>\n<p id=\"so_32090595_32090697_2\">1 A vector is a sequence container that supports random access\n    iterators. In addition, it supports (amortized) constant time insert\n    and erase operations at the end; insert and erase in the middle take\n    linear time. Storage management is handled automatically, though hints\n    can be given to improve efficiency. The elements of a vector are\n    stored contiguously, meaning that if v is a vector where T is some\n    type other than bool, then it obeys the identity &amp;v[n] == &amp;v[0] + n\n    for all 0 &lt;= n &lt; v.size().</p>\n</blockquote>\n</blockquote>\n", "OwnerUserId": "2422765", "PostTypeId": "2", "Id": "32090697", "Score": "3", "CreationDate": "2015-08-19T08:49:34.253", "LastActivityDate": "2015-08-19T08:49:34.253"}, "32090595": {"CommentCount": "3", "ViewCount": "134", "PostTypeId": "1", "LastEditorUserId": "2069064", "CreationDate": "2015-08-19T08:44:27.740", "LastActivityDate": "2015-08-19T11:38:23.143", "Title": "c++: How distant(in bytes) are class member in an array?", "AcceptedAnswerId": "32090711", "LastEditDate": "2015-08-19T11:38:23.143", "Id": "32090595", "Score": "8", "Body": "<p>I found no better way to formulate my question like this:\nIs the output below always true? is this portable?</p>\n<pre><code>struct Point\n{\n    int x;\n    int y;\n};\n\n//...\nstd::vector&lt;Point&gt; points(3);\nunsigned char* start = (unsigned char*)(&amp;points[0]);\nunsigned char* end = (unsigned char*)(&amp;points[1]); \n\nstd::cout &lt;&lt; \"is this the same ? \" &lt;&lt; std::distance(start,end) == sizeof(Point);\n</code></pre>\n<p>What if instead of a <code>vector</code>, <code>points</code> were defined as a raw array? Is the output still always true?</p>\n<pre><code>Point *points = new Point[3]; // instead of std::vector&lt;Point&gt; points(3);\n</code></pre>\n", "Tags": "<c++><language-lawyer>", "OwnerUserId": "1235183", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_32090595_32090711_1": {"section_id": 3228, "quality": 1.0, "length": 10}, "so_32090595_32090697_2": {"section_id": 955, "quality": 0.96, "length": 48}, "so_32090595_32090711_0": {"section_id": 955, "quality": 0.9473684210526315, "length": 18}, "so_32090595_32090697_1": {"section_id": 955, "quality": 0.96, "length": 48}}, "n3337": {"so_32090595_32090711_1": {"section_id": 3101, "quality": 1.0, "length": 10}, "so_32090595_32090697_2": {"section_id": 943, "quality": 0.96, "length": 48}, "so_32090595_32090711_0": {"section_id": 943, "quality": 0.9473684210526315, "length": 18}, "so_32090595_32090697_1": {"section_id": 943, "quality": 0.96, "length": 48}}, "n4659": {"so_32090595_32090711_1": {"section_id": 3985, "quality": 1.0, "length": 10}, "so_32090595_32090697_2": {"section_id": 1016, "quality": 0.54, "length": 27}, "so_32090595_32090697_1": {"section_id": 1016, "quality": 0.54, "length": 27}}}});