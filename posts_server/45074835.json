post_cb({"bq_ids": {"n4140": {"so_45074835_45076265_0": {"length": 9, "quality": 0.6923076923076923, "section_id": 3246}}, "n3337": {"so_45074835_45076265_0": {"length": 9, "quality": 0.6923076923076923, "section_id": 3119}}, "n4659": {"so_45074835_45076265_0": {"length": 9, "quality": 0.6923076923076923, "section_id": 4004}}}, "45076265": {"Id": "45076265", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_45074835_45076265_0\">\u00a7 8.3.5 Functions [dcl.fct] p12 A typedef of function type may be used to declare a function but shall not be used to define a function.</p>\n</blockquote>\n<p>Thus Clang is right to reject the code in all cases and compilers that accept it are in the wrong.</p>\n<p>(The quotation is from N4618 but the rule is a part of the language since forever).</p>\n", "LastEditorUserId": "775806", "LastActivityDate": "2017-07-13T10:18:40.220", "Score": "4", "CreationDate": "2017-07-13T09:12:50.437", "ParentId": "45074835", "CommentCount": "3", "OwnerUserId": "775806", "LastEditDate": "2017-07-13T10:18:40.220"}, "45074835": {"ViewCount": "240", "Body": "<p>Just recently I learned that you can declare a function (including methods) using variable-like syntax with function type:</p>\n<pre><code>using function_type = int (double);\n// pre-C++11:\n//typedef int function_type(double);\n\nfunction_type fun_global;\n\nstruct methods\n{\n    static function_type mem_fun_static;\n    function_type mem_fun_normal;\n    virtual function_type mem_fun_virtual;\n    virtual function_type mem_fun_abstract = 0;\n};\n</code></pre>\n<p>In above code</p>\n<ul>\n<li><code>fun_global</code> is a global function,</li>\n<li><code>mem_fun_static</code> is a <code>static</code> member function,</li>\n<li><code>mem_fun_normal</code> is an ordinary method,</li>\n<li><code>mem_fun_virtual</code> is a <code>virtual</code> method,</li>\n<li><code>mem_fun_abstract</code> is an abstract method.</li>\n</ul>\n<p>All of them take single argument of type <code>double</code> and return <code>int</code> value - just like the <code>function_type</code> says.</p>\n<p>All this years I know C++ and I didn't know about this - this language never stops surprising me! By the way - is this syntax mentioned anywhere <a href=\"http://en.cppreference.com/w/cpp/language/function\" rel=\"nofollow noreferrer\">here</a>? I don't see this...</p>\n<p>However, while exploring this new to me feature I stumbled upon some inconsistencies between compilers. For tests, I was using following compilers:</p>\n<ul>\n<li>GCC 5.4.0 and 7.1.0, command line: <code>g++ -Wall -Wextra -pedantic -std=c++14</code></li>\n<li>Clang 4.0.1, command line: <code>clang++ -Wall -Wextra -pedantic -std=c++14</code></li>\n<li>MSVC 19.10.25019 (VS 2017), command line: <code>cl /W4 /EHsc</code></li>\n</ul>\n<p>In tests that I run both GCC versions gave same result so further I'm referring to them just as GCC.</p>\n<hr>\n<h2><code>= delete</code> inconsistency</h2>\n<pre><code>struct methods\n{\n    /* ... */\n    function_type mem_fun_deleted = delete;\n};\n</code></pre>\n<ul>\n<li>GCC: OK</li>\n<li><p>Clang: <strong>error!</strong></p>\n<pre><code>Test.cpp:13:34: error: '= delete' is a function definition and must occur in a standalone declaration\n        function_type mem_fun_deleted = delete;\n                                        ^\n1 error generated.\n</code></pre></li>\n<li><p>MSVC: OK</p></li>\n</ul>\n<h2><code>= default</code> inconsistency</h2>\n<pre><code>struct methods\n{\n    /* ... */\n    using assignment_type = methods&amp; (methods const&amp;);\n    assignment_type operator= = default;\n};\n</code></pre>\n<ul>\n<li>GCC: OK</li>\n<li><p>Clang: <strong>error!</strong></p>\n<pre><code>Test.cpp:14:30: error: '= default' is a function definition and must occur in a standalone declaration\n        assignment_type operator= = default;\n                                    ^\n1 error generated.\n</code></pre></li>\n<li><p>MSVC: <strong>error!</strong></p>\n<pre><code>Test.cpp(14): error C2206: 'methods::operator =': typedef cannot be used for function definition\n</code></pre></li>\n</ul>\n<h2>Inline definition inconsistency</h2>\n<pre><code>struct methods\n{\n    /* ... */\n    function_type mem_fun_inline { return 0; }\n};\n</code></pre>\n<ul>\n<li><p>GCC: <strong>error!</strong></p>\n<pre><code>Test.cpp:13:43: error: invalid initializer for member function \u2018int methods::mem_fun_inline(double)\u2019\n  function_type mem_fun_inline { return 0; }\n                                           ^\nTest.cpp:13:43: error: expected \u2018;\u2019 at end of member declaration\n</code></pre></li>\n<li><p>Clang: <strong>error!</strong></p>\n<pre><code>Test.cpp:13:33: error: expected expression\n        function_type mem_fun_inline { return 0; }\n                                       ^\nTest.cpp:7:8: error: missing '}' at end of definition of 'methods'\nstruct methods\n       ^\n/usr/lib/gcc/x86_64-pc-cygwin/5.4.0/include/c++/x86_64-pc-cygwin/bits/c++config.h:194:1: note: still within definition of 'methods' here\nnamespace std\n^\n2 errors generated.\n</code></pre></li>\n<li><p>MSVC: OK</p></li>\n</ul>\n<hr>\n<h2>Questions</h2>\n<p><strong>Which compilers are right here?</strong></p>\n<p>Furthermore, is it possible to:</p>\n<ol>\n<li>In the inline definition (supported only by MSVC) refer somehow to the argument?</li>\n<li><p>Somehow use the <code>function_type</code> also at definition of those functions (when done outside of the class). Following is OK (with all compilers)</p>\n<pre><code>struct methods\n{\n    static function_type mem_fun_static;\n    /* ... */\n};\n\nint methods::mem_fun_static(double) { return 0; }\n</code></pre>\n<p>It is not that bad since change of <code>function_type</code> should result in compilation error at function definition (as it will no longer match declaration) - but still maybe it is possible to avoid even that.</p></li>\n</ol>\n</hr></hr>", "AcceptedAnswerId": "45076265", "Title": "Declaring member function using function type syntax", "CreationDate": "2017-07-13T08:03:48.997", "Id": "45074835", "CommentCount": "11", "FavoriteCount": "3", "PostTypeId": "1", "LastEditDate": "2017-07-13T09:52:58.093", "LastEditorUserId": "422489", "LastActivityDate": "2017-07-13T10:18:40.220", "Score": "10", "OwnerUserId": "422489", "Tags": "<c++><g++><clang++><cl>", "AnswerCount": "1"}});