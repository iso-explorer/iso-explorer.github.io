post_cb({"7459310": {"ParentId": "7459269", "PostTypeId": "2", "CommentCount": "4", "CreationDate": "2011-09-18T03:28:35.840", "Score": "4", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T11:47:57.470", "Id": "7459310", "OwnerUserId": "415784", "Body": "<p>In the second case, the function type adjusts to become <em>pointer-to-function-type</em>, which makes the both function identical.</p>\n<pre><code>int fun(int (*g)()); \nint fun(int g()); //same as above, after type adjustment\n</code></pre>\n<p>The C++03 Standard says in \u00a713.1/3,</p>\n<blockquote>\n<p id=\"so_7459269_7459310_0\">Parameter declarations that differ only in that one is a function type and the other is a pointer to the same function type are <strong>equivalent</strong>. <strong>That is, the function type is adjusted to become a pointer to function type (8.3.5)</strong>.</p>\n</blockquote>\n<pre><code>[Example:\n    void h(int());\n    void h(int (*)());  // redeclaration of h(int())\n    void h(int x()) { } // definition of h(int())\n    void h(int (*x)()) { } // ill-formed: redefinition of h(int())\n]\n</code></pre>\n<hr>\n<p>It's same as with array to pointer adjustement, with which we're more familiar:</p>\n<pre><code>int fun(int *a); \nint fun(int a[]);   //same as above, after type adjustment\nint fun(int a[10]); //same as above, after type adjustment\n</code></pre>\n<p>All are same!</p>\n<p>You can a detail answer by me here:</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/7321993/reference-to-function-syntax-with-and-without/7322098#7322098\">Reference to Function syntax - with and without &amp;</a></li>\n</ul>\n</hr>", "LastActivityDate": "2011-09-18T03:43:21.603"}, "7459307": {"ParentId": "7459269", "CommentCount": "3", "CreationDate": "2011-09-18T03:27:09.010", "OwnerUserId": "590042", "PostTypeId": "2", "Id": "7459307", "Score": "1", "Body": "<p>Most compilers (e.g. MSVC, g++) accept the second form as a shorthand for the first.  Technically speaking you should always use the first form.</p>\n", "LastActivityDate": "2011-09-18T03:27:09.010"}, "7459269": {"CommentCount": "0", "ViewCount": "195", "PostTypeId": "1", "LastEditorUserId": "15168", "CreationDate": "2011-09-18T03:17:32.790", "LastActivityDate": "2011-09-18T03:43:21.603", "Title": "Function pointers as parameters in C++?", "AcceptedAnswerId": "7459310", "LastEditDate": "2011-09-18T03:28:06.933", "Id": "7459269", "Score": "4", "Body": "<p>I am confused by the form of parameters for function pointers. The following two:</p>\n<pre><code>int fun(int (*g)())\n{\n    cout &lt;&lt; g() &lt;&lt; endl;\n}\n\nint fun(int g())\n{\n    cout &lt;&lt; g() &lt;&lt; endl;\n}\n</code></pre>\n<p>Both these two definitions work well. But as you have noticed, there are some differences in the prototypes of these two functions:</p>\n<ul>\n<li>the first one takes parameter <code>int (*g)()</code>,</li>\n<li>while the second takes parameter <code>int g()</code>.</li>\n</ul>\n<p>My question is are there any difference between them?</p>\n", "Tags": "<c++>", "OwnerUserId": "508305", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_7459269_7459310_0": {"section_id": 558, "quality": 0.9047619047619048, "length": 19}}, "n3337": {"so_7459269_7459310_0": {"section_id": 549, "quality": 0.9047619047619048, "length": 19}}, "n4659": {"so_7459269_7459310_0": {"section_id": 581, "quality": 0.9047619047619048, "length": 19}}}, "7459300": {"ParentId": "7459269", "CommentCount": "7", "CreationDate": "2011-09-18T03:25:07.613", "OwnerUserId": "827263", "PostTypeId": "2", "Id": "7459300", "Score": "2", "Body": "<p>You can't actually have a parameter of function type.  A function parameter declared as if it were of type \"function returning T\" is <em>adjusted</em> to be of type \"pointer to function returning T.  So your two definitions are effectively identical.  (C has the same rule.)</p>\n<p>A similar rule applies to array parameter declarations.  For example this:</p>\n<pre><code>int main(int argc, char *argv[]);\n</code></pre>\n<p>really means this:</p>\n<pre><code>int main(int argc, char **argv);\n</code></pre>\n", "LastActivityDate": "2011-09-18T03:25:07.613"}});