post_cb({"bq_ids": {"n4140": {"so_24680321_24683065_0": {"length": 25, "quality": 0.78125, "section_id": 5964}}, "n3337": {"so_24680321_24683065_0": {"length": 25, "quality": 0.78125, "section_id": 5733}}, "n4659": {"so_24680321_24683065_0": {"length": 21, "quality": 0.65625, "section_id": 7453}}}, "24683065": {"Id": "24683065", "PostTypeId": "2", "Body": "<p>The lambda captures arr as a <strong>const</strong>. If you want to be able to modify the array you need to use <strong>mutable</strong>:</p>\n<pre><code>void F(int A[], int n) { // Wrong: b/c [arr] should be [&amp;arr]\n    int arr[3] = {0}; // A[..] in the range of 0-2\n    for_each(A, A+n,  [arr](const int&amp; num) mutable -&gt; void {\n       ++arr[num];\n    });\n}\n</code></pre>\n<p>Or, more accurately, the lambda expression is like a const function without the <strong>mutable</strong> keyword:</p>\n<blockquote>\n<p id=\"so_24680321_24683065_0\">5.1.2.5 The closure type for a lambda-expression has a public inline function\n  call operator (13.5.4) whose parameters and return type are\n  described by the lambda-expression\u2019s parameter-declaration-clause and\n  trailing-return-type respectively. This function call operator is\n  declared const (9.3.1) if and only if the lambda- expression\u2019s\n  parameter-declaration-clause is not followed by mutable.</p>\n</blockquote>\n", "LastEditorUserId": "3807729", "LastActivityDate": "2014-07-10T18:12:45.537", "Score": "1", "CreationDate": "2014-07-10T17:44:49.043", "ParentId": "24680321", "CommentCount": "1", "OwnerUserId": "3807729", "LastEditDate": "2014-07-10T18:12:45.537"}, "24680595": {"Id": "24680595", "PostTypeId": "2", "Body": "<p>Arrays are not pointers. <code>arr</code> is not a pointer, it's an array. Nowhere does the standard say that array-to-pointer conversions happen on lambda captures. So the lambda is not capturing a pointer, it's capturing the actual array, by value or by reference. And as by-value captures are effectively <code>const</code> unless the lambda is declared <code>mutable</code>, you're getting the error.</p>\n<p>In other words, the closure type of the lambda will have this data member in the <code>[&amp;arr]</code> case:</p>\n<pre><code>int (&amp;arr)[3];\n</code></pre>\n<p>And this data member in the <code>[arr]</code> case:</p>\n<pre><code>int arr[3];\n</code></pre>\n<p>Do not forget that when the lambda is declared without <code>mutable</code>, the closure's <code>operator()</code> is a <code>const</code> member function:</p>\n<pre><code>auto operator() (const int&amp; num) const -&gt; void {\n  // ... code\n}\n</code></pre>\n<p>Which means it cannot modify data members captured by value.</p>\n", "LastEditorUserId": "1782465", "LastActivityDate": "2014-07-10T18:58:06.290", "Score": "1", "CreationDate": "2014-07-10T15:31:34.167", "ParentId": "24680321", "CommentCount": "3", "OwnerUserId": "1782465", "LastEditDate": "2014-07-10T18:58:06.290"}, "24680321": {"ViewCount": "71", "Body": "<pre><code>void F(int A[], int n) { // Correct\n    int arr[3] = {0}; // A[..] in the range of 0-2\n    for_each(A, A+n, [&amp;arr](const int&amp; num) -&gt; void {\n       ++arr[num];\n    });\n}\n\nvoid F(int A[], int n) { // Wrong: b/c [arr] should be [&amp;arr]\n    int arr[3] = {0}; // A[..] in the range of 0-2\n    for_each(A, A+n, [arr](const int&amp; num) -&gt; void {\n       ++arr[num];\n    });\n}\n</code></pre>\n<blockquote>\n<p id=\"so_24680321_24680321_0\">error: increment of read-only location \u2018arr[((int)num)]\u2019 ++arr[num];</p>\n</blockquote>\n<p>Question&gt; Why I see the above error?\nThe parameter in <code>[]</code> should be prefixed with <code>&amp;</code> if the anonymous function requires to modify the value. However, here, I pass in an address of array. Why I still have to use <code>[&amp;arr]</code> instead of <code>[arr]</code>.</p>\n<p>Thank you</p>\n", "AcceptedAnswerId": "24680595", "Title": "Fail to pass array address by copy to anonymous function", "CreationDate": "2014-07-10T15:18:18.583", "Id": "24680321", "CommentCount": "1", "LastEditDate": "2014-07-10T21:11:45.160", "PostTypeId": "1", "LastEditorUserId": "2073257", "LastActivityDate": "2014-07-10T21:11:45.160", "Score": "1", "OwnerUserId": "391104", "Tags": "<c++><c++11>", "AnswerCount": "2"}});