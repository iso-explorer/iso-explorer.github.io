post_cb({"bq_ids": {"n4140": {"so_13999432_14000704_3": {"length": 34, "quality": 0.85, "section_id": 2717}, "so_13999432_14000704_2": {"length": 34, "quality": 0.85, "section_id": 2717}}, "n3337": {"so_13999432_14000704_3": {"length": 34, "quality": 0.85, "section_id": 2678}, "so_13999432_14000704_2": {"length": 34, "quality": 0.85, "section_id": 2678}}, "n4659": {"so_13999432_14000704_3": {"length": 34, "quality": 0.85, "section_id": 3457}, "so_13999432_14000704_2": {"length": 34, "quality": 0.85, "section_id": 3457}}}, "13999487": {"Id": "13999487", "PostTypeId": "2", "Body": "<p>Terminating a thread is a bad idea -- you should make your thread exit gracefully. If you did terminate the thread, you'd end up causing code in the <code>getch()</code> function to end unexpectedly. What if that code was in the middle of managing a data structure, allocating or freeing memory, or doing some other work that had to execute until completion? You'd end up leaving something in an invalid state, and you'd eventually crash when that invalid state was exercised.</p>\n", "LastActivityDate": "2012-12-22T02:15:47.940", "CommentCount": "0", "CreationDate": "2012-12-22T02:15:47.940", "ParentId": "13999432", "Score": "1", "OwnerUserId": "1858241"}, "13999545": {"Id": "13999545", "PostTypeId": "2", "Body": "<p>In your standard input thread, you'll want to asynchronously read from input.  And wake up on both a demand to stop reading, and new input.</p>\n<p>Terminating a thread without joining is not a reasonable thing to do.  So what you need to be able to do is say \"yo thread, finish up right now\", then be able to expect that the join will finish promptly.  This can even be via a two-step handshake (\"yo thread, finish up\", followed by \"ok ok, I managed to clean up, join me now\") in some cases.</p>\n<p>Note that your loop to <code>1000</code> looks really ridiculous: user input timeouts should generally be based on actual time passing, or some other event occurring that makes the user input non-useful.</p>\n", "LastActivityDate": "2012-12-22T02:26:23.960", "CommentCount": "2", "CreationDate": "2012-12-22T02:26:23.960", "ParentId": "13999432", "Score": "4", "OwnerUserId": "1774667"}, "13999432": {"ViewCount": "22096", "Body": "<p>As per <a href=\"https://stackoverflow.com/questions/13999107/break-on-user-input-otherwise-continue\">This Question</a>, I'm using a thread to terminate a function on user input.  My code looks something like:</p>\n<pre><code>bool stopper = false;\nthread stopThread(userStop, &amp;stopper);      // start thread looking for user input\nfor(int i = 0; i &lt; 1000; i++) {\n    if(stopper) { break; }                  // break if desired\n    // Do stuff\n}\nreturn 0;\n</code></pre>\n<p>where,</p>\n<pre><code>userStop(bool *st) {\n    char chChar = getchar();\n    if(chChar == '\\n') {\n        *st = true;\n    }\n}\n</code></pre>\n<p>When I run this, I get the error <code>terminate called without an active exception</code>.  Based on these questions: <a href=\"https://stackoverflow.com/questions/6257370/thread-terminate-called-without-an-active-exception\">thread terminate called without an active exception</a>, <a href=\"https://stackoverflow.com/questions/7381757/c-terminate-called-without-an-active-exception-producer-consumer\">C++ terminate called without an active exception</a>; it looks like its because I'm not 'join'ing the thread again.</p>\n<p>The problem is, I don't want to 'join' the thread -- because then the user will <strong><em>need</em></strong> to provide input for <code>userStop()</code>to terminate, but I only want the user to provide input if the for-loop is to be broken (which it isn't necessarily).</p>\n<p>Thanks!</p>\n", "AcceptedAnswerId": "14000704", "Title": "std::thread - \"terminate called without an active exception\", don't want to 'join' it", "CreationDate": "2012-12-22T02:05:25.213", "Id": "13999432", "CommentCount": "0", "FavoriteCount": "5", "PostTypeId": "1", "LastEditDate": "2017-05-23T12:00:21.213", "LastEditorUserId": "-1", "LastActivityDate": "2017-09-20T19:14:52.977", "Score": "19", "OwnerUserId": "230468", "Tags": "<c++><multithreading>", "AnswerCount": "3"}, "14000704": {"Id": "14000704", "PostTypeId": "2", "Body": "<p>The trouble you are encountering is a result of the <code>stopThread</code> going out of scope on the stack. The C++ standard has the following to say about this:</p>\n<blockquote>\n<p id=\"so_13999432_14000704_0\"><strong>30.3.1.3</strong>    thread destructor    [thread.thread.destr]</p>\n<p id=\"so_13999432_14000704_1\">~thread();</p>\n<blockquote>\n<p id=\"so_13999432_14000704_3\">If <strong>joinable()</strong> then terminate(), otherwise no effects. [ <strong>Note:</strong> Either\n    implicitly detaching or joining a <strong>joinable()</strong> thread in its destructor\n    could result in difficult to debug correctness (for detach) or\n    performance (for join) bugs encountered only when an exception is\n    raised. Thus the programmer must ensure that the destructor is never\n    executed while the thread is still joinable. \u2014 <em>end note</em> ]</p>\n</blockquote>\n</blockquote>\n<p>What this means is that you should not let threads go out of scope without first calling either <code>join()</code> or <code>detach()</code>.</p>\n<p>The way you describe it, you want the thread to go out of scope without joining so it will continue to run as your application runs. That requires a call to <code>detach()</code>. From there, I can only offer a little wisdom...</p>\n<ul>\n<li><p>That thread is now completely responsible for its own lifetime. If it doesn't return on its own, it will run forever (until the process terminates).</p></li>\n<li><p>You are getting user input, presumably from something like <code>cin</code> or <code>getch()</code>. If these are accessed from multiple threads, you do not have much assurance that there are not race conditions in their library implementations. <em>Tread lightly.</em></p></li>\n</ul>\n", "LastEditorUserId": "427332", "LastActivityDate": "2017-09-20T19:14:52.977", "Score": "30", "CreationDate": "2012-12-22T06:45:31.173", "ParentId": "13999432", "CommentCount": "2", "OwnerUserId": "1020072", "LastEditDate": "2017-09-20T19:14:52.977"}});