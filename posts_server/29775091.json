post_cb({"29775651": {"Id": "29775651", "PostTypeId": "2", "Body": "<p>The largest scope that your <code>int A</code> is valid is the entire scope of <code>main</code>, so its declarative region is <code>main</code>. The namespace is valid at global scope and as such is not in the same declarative scope. Note that while the scopes overlap, they are not the <em>same</em> scope. The code looks valid to me given your quotes from the standard.</p>\n", "LastEditorUserId": "251738", "LastActivityDate": "2015-04-21T14:54:27.997", "Score": "0", "CreationDate": "2015-04-21T14:49:22.607", "ParentId": "29775091", "CommentCount": "2", "LastEditDate": "2015-04-21T14:54:27.997", "OwnerUserId": "251738"}, "29775973": {"Id": "29775973", "PostTypeId": "2", "Body": "<p>The first quote you mention <em>[namespace.alias]/4</em> was actually there to cover extension namespaces and is the subject of a defect report and was subsequently removed and replaced with more specific wording. We can see from <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1795\" rel=\"nofollow\">DR 1795</a> which says:</p>\n<blockquote>\n<p id=\"so_29775091_29775973_0\">According to 7.3.1 [namespace.def] paragraph 2,</p>\n<blockquote>\n<p id=\"so_29775091_29775973_4\">The identifier in an original-namespace-definition shall not have been previously defined in the declarative region in which the\n    original-namespace-definition appears. </p>\n</blockquote>\n<p id=\"so_29775091_29775973_2\">Apparently the intent of this requirement is to say that, given the\n  declarations</p>\n<pre><code>namespace N { }\nnamespace N { }\n</code></pre>\n<p id=\"so_29775091_29775973_3\">the second declaration is to be taken as an\n  extension-namespace-definition and not an\n  original-namespace-definition, since the general rules in 3.3.1\n  [basic.scope.declarative] cover the case in which the identifier has\n  been previously declared as something other than a namespace.</p>\n</blockquote>\n<p>and tells us that <code>3.3.1</code> covers the case you are referring to, which it does in paragraph <code>1</code>:</p>\n<blockquote>\n<p id=\"so_29775091_29775973_5\">Every name is introduced in some portion of program text called a declarative region, which is the largest part\n  of the program in which that name is valid, that is, in which that name may be used as an unqualified name\n  to refer to the same entity. In general, each particular name is valid only within some possibly discontiguous\n  portion of program text called its scope. To determine the scope of a declaration, it is sometimes convenient\n  to refer to the potential scope of a declaration. The scope of a declaration is the same as its potential scope\n  unless the potential scope contains another declaration of the same name. In that case, the potential scope\n  of the declaration in the inner (contained) declarative region is excluded from the scope of the declaration\n  in the outer (containing) declarative region.</p>\n</blockquote>\n<p>and <code>3</code>:</p>\n<blockquote>\n<p id=\"so_29775091_29775973_6\">Given a set of declarations in a single declarative region, each of which specifies the same unqualified name,</p>\n<ul>\n<li>they shall all refer to the same entity, or all refer to functions and function templates;</li>\n</ul>\n</blockquote>\n", "LastEditorUserId": "1708801", "LastActivityDate": "2015-04-21T15:16:17.257", "Score": "1", "CreationDate": "2015-04-21T15:01:37.687", "ParentId": "29775091", "CommentCount": "0", "LastEditDate": "2015-04-21T15:16:17.257", "OwnerUserId": "1708801"}, "bq_ids": {"n4140": {"so_29775091_29775091_2": {"length": 6, "quality": 0.8571428571428571, "section_id": 7045}, "so_29775091_29776086_0": {"length": 18, "quality": 0.9, "section_id": 7044}, "so_29775091_29775091_1": {"length": 18, "quality": 0.9, "section_id": 7044}, "so_29775091_29775091_0": {"length": 9, "quality": 1.0, "section_id": 5489}, "so_29775091_29775973_1": {"length": 10, "quality": 0.9090909090909091, "section_id": 5474}, "so_29775091_29775973_4": {"length": 10, "quality": 0.9090909090909091, "section_id": 5474}, "so_29775091_29775238_0": {"length": 50, "quality": 0.9259259259259259, "section_id": 7045}, "so_29775091_29775973_5": {"length": 67, "quality": 0.9305555555555556, "section_id": 7044}, "so_29775091_29775973_6": {"length": 11, "quality": 1.0, "section_id": 7047}, "so_29775091_29776086_1": {"length": 21, "quality": 1.0, "section_id": 7047}}, "n3337": {"so_29775091_29775091_2": {"length": 6, "quality": 0.8571428571428571, "section_id": 6790}, "so_29775091_29776086_0": {"length": 18, "quality": 0.9, "section_id": 6789}, "so_29775091_29775238_0": {"length": 50, "quality": 0.9259259259259259, "section_id": 6790}, "so_29775091_29775091_0": {"length": 9, "quality": 1.0, "section_id": 5275}, "so_29775091_29775973_1": {"length": 10, "quality": 0.9090909090909091, "section_id": 5260}, "so_29775091_29775973_4": {"length": 10, "quality": 0.9090909090909091, "section_id": 5260}, "so_29775091_29775091_1": {"length": 18, "quality": 0.9, "section_id": 6789}, "so_29775091_29775973_5": {"length": 67, "quality": 0.9305555555555556, "section_id": 6789}, "so_29775091_29775973_6": {"length": 11, "quality": 1.0, "section_id": 6792}, "so_29775091_29776086_1": {"length": 21, "quality": 1.0, "section_id": 6792}}, "n4659": {"so_29775091_29775091_2": {"length": 6, "quality": 0.8571428571428571, "section_id": 8542}, "so_29775091_29775238_0": {"length": 50, "quality": 0.9259259259259259, "section_id": 8542}, "so_29775091_29776086_0": {"length": 18, "quality": 0.9, "section_id": 8541}, "so_29775091_29775091_0": {"length": 5, "quality": 0.5555555555555556, "section_id": 8544}, "so_29775091_29775091_1": {"length": 18, "quality": 0.9, "section_id": 8541}, "so_29775091_29775973_5": {"length": 67, "quality": 0.9305555555555556, "section_id": 8541}, "so_29775091_29775973_6": {"length": 11, "quality": 1.0, "section_id": 8544}, "so_29775091_29776086_1": {"length": 21, "quality": 1.0, "section_id": 8544}}}, "29776086": {"Id": "29776086", "PostTypeId": "2", "Body": "<p>From [basic.scope.declarative], the definition of a \"declarative region\" is:</p>\n<blockquote>\n<p id=\"so_29775091_29776086_0\">Every name is introduced in some portion of program text called a declarative region, which is the largest part\n  of the program in which that name is valid, that is, in which that name may be used as an unqualified name\n  to refer to the same entity.</p>\n</blockquote>\n<p>The restriction is, emphasis mine:</p>\n<blockquote>\n<p id=\"so_29775091_29776086_1\">Given a set of declarations <strong>in a single declarative region</strong>, each of which specifies the same unqualified name<br>\n  \u2014 they shall all refer to the same entity, or all refer to functions and function templates</br></p>\n</blockquote>\n<p>Going back to your example. If we annotate the two declarative regions, we have:</p>\n<pre><code>namespace A{}    + region #1\n                 |\nint main()       |           +\n{                |           |\n    int A;       |           | region #2               \n                 |           |\n}                +           +\n</code></pre>\n<p>The declarative regions for <code>namespace A</code> (#1) and <code>int A</code> (#2) are different (the second is a strict subset of the first, but that doesn't matter). Since they are different, the restriction on having a single name doesn't apply. There is one single <code>A</code> in #2 and one single <code>A</code> in #1. </p>\n<p>If we, however, moved <code>int A</code> to be in the same declarative region:</p>\n<pre><code>namespace A {}     +   the only declarative region. even though the\nint A;             |   potential scope of \"int A\" does not include\n                   |   \"namespace A\", the declarative region does.\nint main() {       |   The intent of this is expressed in the example\n                   |   in [basic.scope.declarative]/2:\n                   |        int main() {\n                   |            int i = j, j;\n                   |            j = 42;\n                   |        }\n                   |\n                   |   \"The declarative region of the [j] includes all \n                   |    the text between { and }, but its potential scope\n}                  +    excludes the declaration of i.\"\n</code></pre>\n<p>That would violate [basic.scope.declarative]/4, and both gcc and clang correctly reject the code with:</p>\n<blockquote>\n<p id=\"so_29775091_29776086_2\">error: redefinition of '<code>A</code>' as different kind of symbol</p>\n</blockquote>\n<p>Note that as <a href=\"https://stackoverflow.com/questions/29775091/can-a-local-variable-have-the-same-name-as-a-namespace/29776086?noredirect=1#comment47684643_29776086\">Vaughn Cato</a> points out, there is an <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_active.html#554\" rel=\"nofollow noreferrer\">active defect report</a> about the wording for declarative region.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2015-04-21T16:04:12.000", "Score": "4", "CreationDate": "2015-04-21T15:05:27.943", "ParentId": "29775091", "CommentCount": "9", "LastEditDate": "2017-05-23T11:51:05.460", "OwnerUserId": "2069064"}, "29775238": {"Id": "29775238", "PostTypeId": "2", "Body": "<p>If you look at the example 3.3.1(2) just below 3.3.1(1)</p>\n<pre><code>int j = 24;\nint main() {\n    int i = j, j;\n    j = 42;\n}\n</code></pre>\n<p>It is noted as</p>\n<blockquote>\n<p id=\"so_29775091_29775238_0\">the identifier j is declared twice as a name (and used twice). The declarative region of the first j includes the entire example. <strong>The potential scope of the first j begins immediately after that j and extends to the end of the program, but its (actual) scope excludes the text between the , and the }.</strong> The declarative region of the second declaration of j (the j immediately before the semicolon) includes all the text between { and }, but its potential scope excludes the declaration of i. The scope of the second declaration of j is the same as its potential scope.</p>\n</blockquote>\n<p>Pay attention to what it say the scope of the name is.  Emphasis mine.</p>\n<p>So in the global space of the program you have a name <code>A</code> that is your namepsace.  Then you enter the scope of <code>main()</code> and the <code>namespace A</code> is still a valid name until in the deceleration of the <code>int A</code> has been seen.  Once that happens in the scope of main the namespace <code>A</code> will be hidden and any unqualified calls to <code>A</code> will be to the <code>int</code> that was declared.</p>\n", "LastEditorUserId": "4342498", "LastActivityDate": "2015-04-21T14:40:06.977", "Score": "0", "CreationDate": "2015-04-21T14:33:00.603", "ParentId": "29775091", "CommentCount": "1", "LastEditDate": "2015-04-21T14:40:06.977", "OwnerUserId": "4342498"}, "29775091": {"ViewCount": "517", "Body": "<p>GCC, clang and VS2013 compile the snippet below:</p>\n<pre><code>namespace A{}\nint main()\n{\n    int A;\n}\n</code></pre>\n<p>However [namespace.alias]/4 says the following:  </p>\n<blockquote>\n<p id=\"so_29775091_29775091_0\">A <em>namespace-name</em> or <em>namespace-alias</em> shall not be declared as the\n  name of any other entity in the same <em>declarative region</em>.</p>\n</blockquote>\n<p>and  </p>\n<p>[basic.scope.declarative]/1 says:  </p>\n<blockquote>\n<p id=\"so_29775091_29775091_1\">Every name is introduced in some portion of program text called a\n  <em>declarative region</em>, which is the largest part of the program in which that name is <em>valid</em>, that is, in which that name may be used as\n  an unqualified name to refer to the same entity.  </p>\n</blockquote>\n<p>That is, I have the impression that the <code>int</code> variable in <code>main()</code> cannot have the same name as the namespace <code>A</code>. Observe that the example in [basic.scope.declarative]/2 seems to corroborate this when it says  </p>\n<blockquote>\n<p id=\"so_29775091_29775091_2\">The <em>declarative region</em> of the first j includes the entire example.  </p>\n</blockquote>\n", "Title": "Can a local variable have the same name as a namespace?", "CreationDate": "2015-04-21T14:26:36.213", "LastActivityDate": "2015-04-21T16:04:12.000", "CommentCount": "11", "FavoriteCount": "3", "PostTypeId": "1", "LastEditDate": "2015-04-21T14:40:20.677", "LastEditorUserId": "1782465", "Id": "29775091", "Score": "9", "OwnerUserId": "4470935", "Tags": "<c++><namespaces><language-lawyer>", "AnswerCount": "4"}});