post_cb({"27409514": {"CreationDate": "2014-12-10T19:43:11.507", "CommentCount": "0", "Body": "<p>Clang (as usual) gives a better warning in this case:</p>\n<pre><code>example.cpp:7:34: warning: 'unused' attribute ignored when parsing type\n      [-Wignored-attributes]\nauto foo() -&gt; bar __attribute__((unused));\n                                 ^~~~~~\n1 warning generated.\n</code></pre>\n<p>Just like GCC is telling you, that attribute is meaningless in the context you're using it. It's conceptually the same as doing something like:</p>\n<pre><code>const int f(void) { return 5 };\n</code></pre>\n<p>The <code>const</code> there just doesn't <em>mean</em> anything.</p>\n", "Id": "27409514", "OwnerUserId": "116908", "LastEditDate": "2014-12-10T19:53:25.793", "ParentId": "27408928", "LastActivityDate": "2014-12-10T19:53:25.793", "PostTypeId": "2", "Score": "1", "LastEditorUserId": "116908"}, "bq_ids": {"n4140": {"so_27408928_27409772_4": {"length": 4, "quality": 0.8, "section_id": 3263}}, "n3337": {"so_27408928_27409772_4": {"length": 4, "quality": 0.8, "section_id": 3135}}}, "27409772": {"CreationDate": "2014-12-10T19:59:01.927", "Body": "<p>The <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.2/gcc/Attribute-Syntax.html#Attribute-Syntax\" rel=\"nofollow\">GCC manual</a> implies that the syntax is not supported at the moment.</p>\n<blockquote>\n<p id=\"so_27408928_27409772_0\">An attribute specifier list may, in future, be permitted to appear\n  after the declarator in a function definition (before any old-style\n  parameter declarations or the function body).</p>\n</blockquote>\n<p>N3337 describes the grammar of a function definition in [dcl.fct.def]:</p>\n<blockquote>\n<p id=\"so_27408928_27409772_1\"><em>function-definition:</em></p>\n<p id=\"so_27408928_27409772_2\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<em>attribute-specifier-seq</em><sub>opt</sub> <em>decl-specifier-seq</em><sub>opt</sub> <em>declarator virt-specifier-seq</em><sub>opt</sub> <em>function-body</em></p>\n<p id=\"so_27408928_27409772_3\">...</p>\n<p id=\"so_27408928_27409772_4\"><code>2</code> The <em>declarator</em> in a <em>function-definition</em> shall have the form</p>\n<blockquote>\n<p id=\"so_27408928_27409772_7\"><code>D1</code> ( <em>parameter-declaration-clause</em> )\n    <em>cv-qualifier-seq</em><sub>opt</sub></p>\n<p id=\"so_27408928_27409772_8\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<em>ref-qualifier</em><sub>opt</sub>\n<em>exception-specification</em><sub>opt</sub> <em>attribute-specifier-seq</em><sub>opt</sub> <em>trailing-return-type</em><sub>opt</sub></p>\n</blockquote>\n</blockquote>\n<p>As you can see the <em>trailing-return-type</em> is part of the <em>declarator</em> which appears before the <em>function-body</em>. Try changing your code to this:</p>\n<pre><code>auto __attribute__((unused)) foo() -&gt; bar;\n</code></pre>\n", "PostTypeId": "2", "OwnerDisplayName": "user3920237", "ParentId": "27408928", "LastActivityDate": "2014-12-10T19:59:01.927", "Id": "27409772", "CommentCount": "0", "Score": "1"}, "27409778": {"CommentCount": "0", "Body": "<p>Seems to be a bug in the attribute parser used by GCC. The GCC manual warns about potential problems with the attribute grammar :</p>\n<p>6.31 Attribute Syntax</p>\n<blockquote>\n<p id=\"so_27408928_27409778_0\">Because of infelicities in the grammar for attributes, some forms\n  described here may not be successfully parsed in all cases.</p>\n<p id=\"so_27408928_27409778_1\">There are some problems with the semantics of attributes in C++. [...] For example, there are no manglings for attributes, although they may affect code generation, so problems may arise when attributed types are used in conjunction with templates or overloading.</p>\n</blockquote>\n<p>A warning about attribute parsing after a trailing return type would be helpful too.</p>\n<blockquote>\n<p id=\"so_27408928_27409778_2\">An attribute specifier list may appear immediately before a declarator\n  [...]</p>\n</blockquote>\n<p>You should try to place the attribute before the prototype :</p>\n<pre><code> __attribute__((unused)) \nauto foo() -&gt; bar ;\nauto foo() -&gt; bar { return bar(5); }\n</code></pre>\n<p>and it should be OK without any warning.</p>\n<blockquote>\n<p id=\"so_27408928_27409778_3\">An attribute specifier list may appear immediately before the comma, =\n  or semicolon terminating the declaration of an identifier other than a\n  function definition. Such attribute specifiers apply to the declared\n  object or function.</p>\n</blockquote>\n<p>I guess that positioning the function attribute after the function <strong>declaration</strong> is OK unless there is a trailing return type.</p>\n", "CreationDate": "2014-12-10T19:59:17.593", "ParentId": "27408928", "Id": "27409778", "LastActivityDate": "2014-12-10T19:59:17.593", "PostTypeId": "2", "Score": "2", "OwnerUserId": "2557561"}, "27408928": {"CreationDate": "2014-12-10T19:07:51.500", "ViewCount": "383", "Id": "27408928", "AcceptedAnswerId": "27409778", "Score": "4", "Title": "GCC attribute warning with trailing return type when return type is a class", "LastEditorUserId": "3629665", "CommentCount": "0", "Body": "<p>GCC 4.9.1 does not appear to like function declarations with a trailing return type with attributes when the return type is a class.</p>\n<p>Consider this following simplistic testcase:</p>\n<pre class=\"lang-cpp prettyprint-override\"><code>struct bar\n{\n    int a;\n    bar (int a) : a(a) {}\n};\n\nauto foo() -&gt; bar __attribute__((unused));\nauto foo() -&gt; bar { return bar(5); }\n\nint main()\n{\n    return 0;\n}\n</code></pre>\n<p>GCC prints a bizarre warning in regards to the attribute:</p>\n<pre><code>argh.cpp:2:41: warning: ignoring attributes applied to class type \u2018bar\u2019 outside of definition [-Wattributes]\n auto foo() -&gt; bar __attribute__((unused)) {return bar(5);}\n</code></pre>\n<p>Merging the declaration with the definition does not silence the warning, and this only happens when the return type is a class-type, it works fine with <code>int</code>. What is going on? Why does GCC not like this particular function declaration?</p>\n", "Tags": "<c++><c++11><gcc>", "LastEditDate": "2014-12-10T19:13:59.223", "LastActivityDate": "2014-12-10T19:59:17.593", "PostTypeId": "1", "AnswerCount": "3", "OwnerUserId": "3629665"}});