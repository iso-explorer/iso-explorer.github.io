post_cb({"bq_ids": {"n4140": {"so_32094881_32095069_0": {"length": 22, "quality": 0.9166666666666666, "section_id": 450}}, "n3337": {"so_32094881_32095069_0": {"length": 22, "quality": 0.9166666666666666, "section_id": 441}}, "n4659": {"so_32094881_32095069_0": {"length": 22, "quality": 0.9166666666666666, "section_id": 472}}}, "32095069": {"Id": "32095069", "PostTypeId": "2", "Body": "<p>It is pretty straightforward, and explicitly stated in the standard (12.8.1):</p>\n<blockquote>\n<p id=\"so_32094881_32095069_0\">A class object can be copied in two ways, by initialization (including\n  for function argument passing and for function value return) and by\n  assignment. Conceptually, these two operations are implemented by a\n  copy constructor and copy assignment operator.</p>\n</blockquote>\n<p>So, if you are initializing a new object, either explicitly, or implicitly (e.g. passing an object into a function <em>by copy</em>, which is your case, or returning an object from a function), a copy constructor is called:</p>\n<pre><code>MyClass a = b;//initialization, copy constructor is called\n//or\nvoid foo(MyClass a){}//a is passed by value, a copy will be made, and copy constructor will be called\n//or\nMyClass foo()\n{\n    MyClass result;\n    return result;//a copy of result will be returned, and copy constructor will be called\n}\n</code></pre>\n<p>On the contrary, if you are making an assignment, the <code>operator=</code> will be called instead, e.g.</p>\n<pre><code>MyClass x;\nMyClass y;\ny = x;//assignmanet\n</code></pre>\n", "LastActivityDate": "2015-08-19T12:06:47.867", "CommentCount": "3", "CreationDate": "2015-08-19T12:06:47.867", "ParentId": "32094881", "Score": "3", "OwnerUserId": "1490355"}, "32094881": {"ViewCount": "137", "Body": "<p>Sorry i am struggling to grasp copy constructors,i would like to know why does the copy constructor get invoked only when i call a object in a function by value \"op.return_Value(op)&lt;\n\n<pre><code>class operation{\n   public:\n       int add(int x,int y){\n           *total=x+y;\n       return (*total);\n       }\n\n       operation(){\n       cout&lt;&lt;\"This is the constructor\"&lt;&lt;endl;\n       total=new int;\n       }\n       operation(const operation &amp;op){\n       cout&lt;&lt;\"This is the copy of the start\"&lt;&lt;endl;\n       total=new int;\n       *total=*op.total;\n       }\n\n       ~operation(){\n       cout&lt;&lt;\"This is the end\";\n       delete total;\n       }\n\n        int *total;\n\n       int return_Value(operation op){\n        return *total;\n       }\n\n};\n\nclass child_operation:operation{\n\n   public:\n\n       int sub(int x,int y){\n           *total=x-y;\n       return(*total);\n       }\n\n};\n\n\n\nint main()\n{\n   operation op;\n   child_operation op1;\n\n   cout&lt;&lt;op.add(5,6)&lt;&lt;endl&lt;&lt;op1.sub(6,5)&lt;&lt;endl;\n   cout&lt;&lt;op.return_Value(op)&lt;&lt;endl;\n}\n</code></pre>\n<p>Basically in which ways is a copy constructor invoked?</p>\n</p>", "Title": "Copy constructor C++", "CreationDate": "2015-08-19T11:58:13.567", "LastActivityDate": "2015-08-19T12:06:47.867", "CommentCount": "1", "PostTypeId": "1", "Id": "32094881", "Score": "1", "OwnerUserId": "5232412", "Tags": "<c++>", "AnswerCount": "2"}, "32094965": {"Id": "32094965", "PostTypeId": "2", "Body": "<p>In this function</p>\n<pre><code>int return_Value(operation op){\n    return *total;\n}\n</code></pre>\n<p>You are passing your <code>operation</code> <em>by value</em>. Therefore <code>op</code> is a <em>function local variable</em> that is a <strong>copy</strong> of the <code>operation</code> you passed in. To avoid this copy, you could pass the <code>operation</code> as a <code>const&amp;</code></p>\n<pre><code>int return_Value(operation const&amp; op){\n    return *total;\n}\n</code></pre>\n<p>On a side note, I don't think this function needs to take any arguments. If it is just supposed to be a getter method, it will operate off of <code>this</code>, so you shouldn't pass any argument in, and the method should be <code>const</code></p>\n<pre><code>int return_Value() const {\n    return *total;\n}\n</code></pre>\n<p>I also don't know why you are storing <code>total</code> as an <code>int*</code> instead of an <code>int</code>.</p>\n", "LastActivityDate": "2015-08-19T12:01:50.047", "CommentCount": "0", "CreationDate": "2015-08-19T12:01:50.047", "ParentId": "32094881", "Score": "2", "OwnerUserId": "2296458"}});