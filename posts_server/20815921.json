post_cb({"bq_ids": {"n4140": {"so_20815921_20815977_3": {"length": 15, "quality": 1.0, "section_id": 4710}, "so_20815921_20815977_2": {"length": 4, "quality": 0.6666666666666666, "section_id": 4710}}, "n3337": {"so_20815921_20815977_3": {"length": 15, "quality": 1.0, "section_id": 4518}, "so_20815921_20815977_2": {"length": 4, "quality": 0.6666666666666666, "section_id": 4518}}, "n4659": {"so_20815921_20815977_3": {"length": 15, "quality": 1.0, "section_id": 6107}}}, "20815977": {"Id": "20815977", "PostTypeId": "2", "Body": "<p><strong>Yes, it must be a bug.</strong></p>\n<p><code>is_move_constructible</code> is defined in terms of <code>is_constructible</code>, which requires that a construction with the given parameters is well-formed, which is clearly not the case here.</p>\n<blockquote>\n<p id=\"so_20815921_20815977_0\"><code>[C++11: Table 49]:</code> <strong><code>is_move_constructible&lt;T&gt;</code></strong></p>\n<p id=\"so_20815921_20815977_1\"><code>is_constructible&lt;T, T&amp;&amp;&gt;::value</code> is true</p>\n</blockquote>\n<p>\u00a0</p>\n<blockquote>\n<p id=\"so_20815921_20815977_2\"><code>[C++11: 20.9.4.3/6]:</code> Given the following function prototype:</p>\n<pre><code>template &lt;class T&gt;\ntypename add_rvalue_reference&lt;T&gt;::type create();\n</code></pre>\n<p id=\"so_20815921_20815977_3\">the predicate condition for a template specialization <code>is_constructible&lt;T, Args...&gt;</code> shall be satisfied if and only if the following variable definition would be well-formed for some invented variable <code>t</code>:</p>\n<pre><code>T t(create&lt;Args&gt;()...);\n</code></pre>\n</blockquote>\n<p><sup>(A note that follows clarifies that <code>create</code> is used here to avoid the Most Vexing Parse for all <code>Args</code>.)</sup></p>\n<p>For the record, <a href=\"http://coliru.stacked-crooked.com/a/42d0e49750910459\" rel=\"nofollow noreferrer\">the output is <code>0</code> with GCC 4.8</a>.</p>\n<hr>\n<p>A similar bug with <code>is_*constructible</code> relating to abstract classes <a href=\"http://connect.microsoft.com/VisualStudio/feedback/details/808132/std-is-constructible-t-value-true-for-abstract-classes\" rel=\"nofollow noreferrer\">appears to have been fixed in mid-2013</a>, and <a href=\"http://connect.microsoft.com/VisualStudio/feedback/details/799505/c-type-traits-seem-to-ignore-accessibility-modifiers\" rel=\"nofollow noreferrer\">here's another one</a>:</p>\n<blockquote>\n<p id=\"so_20815921_20815977_4\">Posted by Microsoft on 18/09/2013 at 13:17 Hi,</p>\n<p id=\"so_20815921_20815977_5\">Thanks for reporting this bug. We've fixed it, and the fix is available in VS 2013 RC.</p>\n<p id=\"so_20815921_20815977_6\">In fact, we've overhauled , fixing all known bugs. You can read more about this here:\n  <a href=\"http://blogs.msdn.com/b/vcblog/archive/2013/06/28/c-11-14-stl-features-fixes-and-breaking-changes-in-vs-2013.aspx\" rel=\"nofollow noreferrer\">http://blogs.msdn.com/b/vcblog/archive/2013/06/28/c-11-14-stl-features-fixes-and-breaking-changes-in-vs-2013.aspx</a></p>\n<p id=\"so_20815921_20815977_7\">Stephan T. Lavavej<br>\n  Senior Developer - Visual C++ Libraries<br>\n  stl@microsoft.com</br></br></p>\n</blockquote>\n<p>The changelog behind that link includes the following fix:</p>\n<blockquote>\n<p id=\"so_20815921_20815977_8\">the is_constructible family of type traits behaving incorrectly with references (DevDiv#517460)</p>\n</blockquote>\n<p>So, give this a go again in MSVS's November 2013 CTP.</p>\n<p><strong>Update:</strong> I'm told that this <em>is</em> fixed in the November CTP. Thanks <a href=\"https://stackoverflow.com/users/1932150/andy-prowl\">Andy Prowl</a> for testing.</p>\n</hr>", "LastEditorUserId": "-1", "LastActivityDate": "2013-12-28T15:25:30.120", "Score": "5", "CreationDate": "2013-12-28T15:03:34.950", "ParentId": "20815921", "CommentCount": "16", "OwnerUserId": "560648", "LastEditDate": "2017-05-23T12:03:44.403"}, "20815921": {"ViewCount": "233", "Body": "<pre><code>#include &lt;iostream&gt;\n#include &lt;type_traits&gt; \n\nstruct Foo \n{\n    Foo(Foo&amp;&amp; f) = delete;\n};\n\nint main()\n{\n\n    std::cout &lt;&lt; std::is_move_constructible&lt;Foo&gt;::value; // output is 1\n\n    std::cin.ignore();\n}\n</code></pre>\n<p>Under msv2013 should I forgot something, or is there a bug ?</p>\n<p><strong>APPENDUM:</strong></p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;type_traits&gt; \n\nstruct Foo \n{ \n    ~Foo(){}\n};\n\nint main()\n{\n    std::cout &lt;&lt; std::is_move_constructible&lt;Foo&gt;::value;\n\n    std::cin.ignore();\n}\n</code></pre>\n<p>even with CTP this program produce an output of 1 (and c++ standard say the contrary), whereas the first example with CTP works fine.</p>\n", "AcceptedAnswerId": "20815977", "Title": "is_move_constructible and msvc2013", "CreationDate": "2013-12-28T14:58:15.823", "Id": "20815921", "CommentCount": "1", "LastEditDate": "2013-12-28T20:02:30.773", "PostTypeId": "1", "LastEditorUserId": "619570", "LastActivityDate": "2013-12-28T20:02:30.773", "Score": "3", "OwnerUserId": "619570", "Tags": "<c++><c++11><move>", "AnswerCount": "1"}});