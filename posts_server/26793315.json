post_cb({"bq_ids": {"n4140": {"so_26793315_26793677_0": {"length": 14, "quality": 0.9333333333333333, "section_id": 380}, "so_26793315_26793677_2": {"length": 19, "quality": 0.8636363636363636, "section_id": 382}, "so_26793315_26793677_4": {"length": 12, "quality": 0.9230769230769231, "section_id": 382}, "so_26793315_26793677_1": {"length": 18, "quality": 0.782608695652174, "section_id": 381}}, "n3337": {"so_26793315_26793677_0": {"length": 14, "quality": 0.9333333333333333, "section_id": 371}, "so_26793315_26793677_2": {"length": 19, "quality": 0.8636363636363636, "section_id": 373}, "so_26793315_26793677_4": {"length": 12, "quality": 0.9230769230769231, "section_id": 373}, "so_26793315_26793677_1": {"length": 18, "quality": 0.782608695652174, "section_id": 372}}, "n4659": {"so_26793315_26793677_0": {"length": 14, "quality": 0.9333333333333333, "section_id": 395}, "so_26793315_26793677_2": {"length": 18, "quality": 0.8181818181818182, "section_id": 397}, "so_26793315_26793677_4": {"length": 12, "quality": 0.9230769230769231, "section_id": 397}, "so_26793315_26793677_1": {"length": 17, "quality": 0.7391304347826086, "section_id": 396}}}, "26793315": {"ViewCount": "336", "Body": "<p>If I understand the rules for the lifetime of temporaries correctly, this code should be safe since the lifetime of the temporary <code>stringstream</code> in <code>make_string()</code> lasts until the end of the complete expression. I'm not 100% confident there's not a subtle problem here though, can anyone confirm if this usage pattern is safe? It appears to work fine in clang and <a href=\"http://ideone.com/C0uMc3\" rel=\"nofollow noreferrer\">gcc</a>.</p>\n<pre><code>#include &lt;iomanip&gt;\n#include &lt;iostream&gt;\n#include &lt;sstream&gt;\n\nusing namespace std;\n\nostringstream&amp; make_string_impl(ostringstream&amp;&amp; s) { return s; }\n\ntemplate&lt;typename T, typename... Ts&gt;\nostringstream&amp; make_string_impl(ostringstream&amp;&amp; s, T&amp;&amp; t, Ts&amp;&amp;... ts) {\n    s &lt;&lt; t;\n    return make_string_impl(std::move(s), std::forward&lt;Ts&gt;(ts)...);\n}\n\ntemplate&lt;typename... Ts&gt;\nstring make_string(Ts&amp;&amp;... ts) {\n    return make_string_impl(ostringstream{}, std::forward&lt;Ts&gt;(ts)...).str();\n}\n\nint main() {\n    cout &lt;&lt; make_string(\"Hello, \", 5, \" World!\", '\\n', 10.0, \"\\n0x\", hex, 15, \"\\n\");\n}\n</code></pre>\n", "AcceptedAnswerId": "26793677", "Title": "C++ lifetime of temporaries - is this safe?", "CreationDate": "2014-11-07T03:00:40.420", "Id": "26793315", "CommentCount": "9", "LastEditDate": "2014-11-07T19:37:27.017", "PostTypeId": "1", "LastEditorUserId": "139091", "LastActivityDate": "2014-11-07T19:37:27.017", "Score": "11", "OwnerUserId": "139091", "Tags": "<c++><c++11>", "AnswerCount": "1"}, "26793677": {"Id": "26793677", "PostTypeId": "2", "Body": "<p>The relevant part of the standard is in <code>\u00a712.2</code>:</p>\n<blockquote>\n<p id=\"so_26793315_26793677_0\">12.2.3) Temporary objects are destroyed as the last step\n  in evaluating the full-expression (1.9) that (lexically) contains the point where they were created. </p>\n</blockquote>\n<p>Except:</p>\n<blockquote>\n<p id=\"so_26793315_26793677_1\">12.2.4) There are two contexts in which temporaries are destroyed at a different point than the end of the full-expression. The first context is when a default construct is called to initialize an element of an array. ... [<strong>doesn't apply</strong>]</p>\n<p id=\"so_26793315_26793677_2\">12.2.5) The second context is when a reference is bound to a temporary. The temporary to which the reference is bound or the temporary that is the complete object of a subobject to which the reference is bound persists for the lifetime of the reference except:</p>\n<ul>\n<li><p id=\"so_26793315_26793677_3\">...</p></li>\n<li><p id=\"so_26793315_26793677_4\">A temporary bound to a reference parameter in a function call (5.2.2) persists until the completion of the full-expression containing the call.</p></li>\n</ul>\n</blockquote>\n<p>So there you go. The temporary <code>stringstream{}</code> is bound to a reference in a function call, so it persists until the completion of the expression. This is safe. </p>\n", "LastActivityDate": "2014-11-07T03:41:42.680", "CommentCount": "1", "CreationDate": "2014-11-07T03:41:42.680", "ParentId": "26793315", "Score": "7", "OwnerUserId": "2069064"}});