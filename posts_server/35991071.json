post_cb({"bq_ids": {"n4140": {"so_35991071_35991282_0": {"length": 21, "quality": 1.0, "section_id": 3376}}, "n3337": {"so_35991071_35991282_0": {"length": 18, "quality": 0.8571428571428571, "section_id": 3246}}}, "35991282": {"PostTypeId": "2", "Body": "<p>From <strong>[except.spec]</strong>:</p>\n<blockquote>\n<p id=\"so_35991071_35991282_0\">14 - [...]  If <code>f</code> is [...] an implicitly declared default constructor [...] <code>f</code> allows all exceptions if any function it directly\n  invokes allows all exceptions, and <code>f</code> has the <em>exception-specification</em> <code>noexcept(true)</code> if every function it directly\n  invokes allows no exceptions. [...]</p>\n</blockquote>\n<p>The implicitly declared default constructor of <code>Aggregate</code> directly invokes <code>ClassThatMayThrowInCtor::ClassThatMayThrowInCtor()</code> which allows all exceptions, so <code>Aggregate::Aggregate()</code> allows all exceptions and is not <code>noexcept</code>.</p>\n", "LastActivityDate": "2016-03-14T15:14:14.763", "Id": "35991282", "CommentCount": "0", "CreationDate": "2016-03-14T15:14:14.763", "ParentId": "35991071", "Score": "4", "OwnerUserId": "567292"}, "35991387": {"PostTypeId": "2", "Body": "<p>You can check this at compile time. B's default constructor is not <code>noexcept</code> in the program below:</p>\n<pre><code>struct A {\n    A() {\n        throw 0;\n    }\n};\n\nstruct B {\n    A a;\n};\n\nstatic_assert(noexcept(B{}), \"\");\n\nint main() {\n    return 0;   \n}\n</code></pre>\n<p>This program fails to compile, because the <code>static_assert</code> fails.</p>\n", "LastActivityDate": "2016-03-14T15:19:40.163", "Id": "35991387", "CommentCount": "0", "CreationDate": "2016-03-14T15:19:40.163", "ParentId": "35991071", "Score": "3", "OwnerUserId": "2397809"}, "35991071": {"ViewCount": "59", "Body": "<p>Consider an example:</p>\n<pre><code>class ClassThatMayThrowInCtor\n{\n     ClassThatMayThrowInCtor()\n     {\n          if (g_unlucky) throw \"Exception\";\n     }\n};\n\nclass Aggregate\n{\n     ClassThatMayThrowInCtor m_member;\n};\n</code></pre>\n<p>As far as my limited knowledge goes, compiler may in some circumstances in C++14 generate a default ctor that is <code>noexcept</code>. </p>\n<p>Will it in this case, or will it understand that since member's default ctor does not provide any such guarantee, it should not either?</p>\n<hr>\n<p>Asked for reference of the above claim (<em>in some circumstances...</em>), I've failed to find it within the standard, but <a href=\"https://akrzemi1.wordpress.com/2011/06/10/using-noexcept/\" rel=\"nofollow\">Andrzej's blog</a> does mention:</p>\n<blockquote>\n<p id=\"so_35991071_35991071_0\">This does not mean that <code>noexcept</code> is useless. Compiler will annotate\n  implicitly generated member functions of your classes (constructors,\n  copy and move assignments and destructor) with <code>noexcept</code>, as\n  appropriate, and STL components will be querying for this annotation.\n  The feature will enable significant optimizations (by using move\n  constructors) even though you will not see a single <code>noexcept</code> keyword.\n  And <strong>when compiler annotates functions with</strong> <code>noexcept</code> <strong>it does it</strong>\n<strong>correctly</strong> (except for destructors), so there is no risk that some\n  noexcept move constructor will throw.</p>\n</blockquote>\n<p>(emphasis mine)</p>\n</hr>", "AcceptedAnswerId": "35991282", "Title": "Compiler generated noexcept ctor for class with members constructed with no such guarantee", "CreationDate": "2016-03-14T15:04:43.697", "Id": "35991071", "CommentCount": "5", "LastEditDate": "2016-03-14T15:17:18.950", "PostTypeId": "1", "LastEditorUserId": "754407", "LastActivityDate": "2016-03-14T15:19:40.163", "Score": "1", "OwnerUserId": "754407", "Tags": "<c++><exception><c++14>", "AnswerCount": "2"}});