post_cb({"14415513": {"Id": "14415513", "PostTypeId": "2", "Body": "<p>I think because auto keyword. it's type deduction so compiler doesn't know it how to convert to char* anymore.</p>\n", "LastActivityDate": "2013-01-19T14:47:52.257", "CommentCount": "1", "CreationDate": "2013-01-19T14:47:52.257", "ParentId": "14415488", "Score": "-1", "OwnerUserId": "1699139"}, "bq_ids": {"n4140": {"so_14415488_14415488_1": {"length": 15, "quality": 1.0, "section_id": 5356}}, "n3337": {"so_14415488_14415488_1": {"length": 15, "quality": 1.0, "section_id": 5153}}, "n4659": {"so_14415488_14415488_1": {"length": 15, "quality": 1.0, "section_id": 6781}}}, "14415502": {"Id": "14415502", "PostTypeId": "2", "Body": "<pre><code>f(\"Hello\");\n</code></pre>\n<p>Even this is not okay in C++. The compiler should give diagnostic, or else it needs to be updated. </p>\n<p>In C++, <code>\"Hello\"</code> is convertible to <code>const char*</code>, not <code>char*</code>. </p>\n<p>The conversion from <code>\"Hello\"</code> to <code>char*</code> is allowed in C++03, though it is <strong>deprecated</strong>. And in C++11, the conversion is invalid, and the code is ill-formed.</p>\n", "LastEditorUserId": "415784", "LastActivityDate": "2013-01-19T14:58:53.243", "Score": "7", "CreationDate": "2013-01-19T14:46:43.617", "ParentId": "14415488", "CommentCount": "5", "OwnerUserId": "415784", "LastEditDate": "2013-01-19T14:58:53.243"}, "14415488": {"ViewCount": "1209", "Body": "<pre><code>void f(char* p)\n{}\n\nint main()\n{\n    f(\"Hello\"); // OK\n\n    auto p = \"Hello\";\n\n    f(p); // error C2664: 'void f(char *)' : cannot convert parameter 1 \n          // from 'const char *' to 'char *'\n} \n</code></pre>\n<p>The code was compiled with VC++ Nov 2012 CTP.</p>\n<blockquote>\n<p id=\"so_14415488_14415488_0\">\u00a72.14.15 String Literals, Section 7</p>\n<p id=\"so_14415488_14415488_1\">A narrow string literal has type \u201carray of n const char\u201d, where n is\n  the size of the string as defined below, and has static storage\n  duration.</p>\n</blockquote>\n<p>Why is <code>f(\"Hello\")</code> OK?</p>\n", "AcceptedAnswerId": "14415495", "Title": "Why can a string literal be implicitly converted to char* only in certain case?", "CreationDate": "2013-01-19T14:44:46.103", "Id": "14415488", "CommentCount": "4", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2013-01-19T14:57:44.663", "LastEditorUserId": "508343", "LastActivityDate": "2013-01-26T11:56:14.253", "ClosedDate": "2013-02-21T05:03:12.450", "Score": "12", "OwnerUserId": "508343", "Tags": "<c++><c><type-conversion><implicit-conversion><string-literals>", "AnswerCount": "4"}, "14415566": {"Id": "14415566", "PostTypeId": "2", "Body": "<p>The difference between</p>\n<pre><code>f(\"Hello\");\n</code></pre>\n<p>and </p>\n<pre><code>f(p);\n</code></pre>\n<p>is that the former involves a literal. In C++03 conversion from string literal to <code>char*</code> (note: not <code>const</code>) was supported. It isn't supported any longer in C++11, but few if any compilers have yet caught up with that rule change.</p>\n", "LastActivityDate": "2013-01-19T14:56:05.383", "CommentCount": "1", "CreationDate": "2013-01-19T14:56:05.383", "ParentId": "14415488", "Score": "7", "OwnerUserId": "464581"}, "14415495": {"Id": "14415495", "PostTypeId": "2", "Body": "<p>This behaviour differs between C and C++, at least in theory.</p>\n<p><strong>In C:</strong> a string literal decays to a non-const pointer.  However, that doesn't make it a good idea; attempting to modify the string through that pointer leads to undefined behaviour.</p>\n<p><strong>In C++:</strong> it's never ok (AFAIK).<sup>*</sup>  However, some compilers may still let you get away with it.  GCC, for example, has the <a href=\"http://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#Warning-Options\" rel=\"nofollow\"><code>-Wwrite-strings</code></a> flag, which is enabled by default (at least in 4.5.1 onwards).</p>\n<p><hr>\n<sub>* In C++11, at least.  (I don't have older specs to hand.)</sub></hr></p>\n", "LastEditorUserId": "129570", "LastActivityDate": "2013-01-26T11:56:14.253", "Score": "16", "CreationDate": "2013-01-19T14:45:51.503", "ParentId": "14415488", "CommentCount": "6", "OwnerUserId": "129570", "LastEditDate": "2013-01-26T11:56:14.253"}});