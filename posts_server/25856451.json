post_cb({"bq_ids": {"n4140": {"so_25856451_25856716_0": {"length": 26, "quality": 0.9629629629629629, "section_id": 6000}}, "n3337": {"so_25856451_25856716_0": {"length": 19, "quality": 0.7037037037037037, "section_id": 5768}}}, "25856650": {"PostTypeId": "2", "Body": "<p>This a call of object constructor. It will create new object of specified type allocated on stack. So this exact statement will allocate new empty set and return it as function result.</p>\n", "LastActivityDate": "2014-09-15T20:48:12.523", "Id": "25856650", "CommentCount": "0", "CreationDate": "2014-09-15T20:48:12.523", "ParentId": "25856451", "Score": "1", "OwnerUserId": "1590872"}, "25856716": {"PostTypeId": "2", "Body": "<p><code>std::set&lt;int&gt;()</code>, when used as an expression, is a temporary, default-constructed instance of <code>std::set&lt;int&gt;</code>.</p>\n<p>First of all, <code>std::set&lt;int&gt;</code> is a type. As such, C++11 \u00a75.2.3 [expr.type.conv]/2 explains what happens:</p>\n<blockquote>\n<p id=\"so_25856451_25856716_0\">The expression <strong>T()</strong>, where T is a simple-type-specifier or typename-specifier for a non-array complete object type or the (possibly cv-qualified) void type, creates a <strong>prvalue</strong> of the specified type, whose value is that produced by <strong>value-initializing</strong> (8.5) an object of type T; no initialization is done for the void() case.</p>\n</blockquote>\n<p>Value-initialization has many rules, but for a class like <code>std::set&lt;int&gt;</code>, it is equivalent to default-initialization, which just calls the default constructor. Since the default constructor of <code>std::set&lt;int&gt;</code> produces an empty set, that's what you get.</p>\n<hr>\n<p>Worth noting is that had you put arguments in the parentheses, these arguments would be passed to the appropriate constructor. In that regard, this is like any other constructor call for creating a temporary object.</p>\n<p>Also worth noting is that <code>std::set&lt;int&gt;()</code> does not always do what I described. Notice that I said when used as an expression. If this appears where a type could appear, it is a valid type as well. In particular, it is a function with no parameters that returns a <code>std::set&lt;int&gt;</code>. Since <code>return</code> is followed by an expression, this must be treated as an expression rather than a type.</p>\n</hr>", "LastActivityDate": "2014-09-15T21:01:52.503", "LastEditorUserId": "962089", "Id": "25856716", "CommentCount": "0", "CreationDate": "2014-09-15T20:52:58.050", "ParentId": "25856451", "Score": "6", "OwnerUserId": "962089", "LastEditDate": "2014-09-15T21:01:52.503"}, "25856451": {"ViewCount": "3107", "Body": "<p>Don't understand why <code>return std::set&lt;int&gt;();</code> gives back an empty <code>std::set&lt;int&gt;</code>.\nIs there an operator-overload for the <code>operator ()</code> in the <code>std::set</code> class ? I assumed the <code>std::set&lt;int&gt;()</code> is a function and not an object ! Where is this function defined ?</p>\n<p>It seems that the the default constructor <code>std::set&lt;int&gt; s;</code> is the same like the expression <code>std::set&lt;int&gt;()</code> ???</p>\n<p>Thanks for any reply ... seems i don't understand the C++ basics...</p>\n", "Title": "Return an empty set with \"return std::set<int>()\" - why does it run?", "CreationDate": "2014-09-15T20:34:32.547", "LastActivityDate": "2014-09-15T21:15:59.207", "CommentCount": "5", "LastEditDate": "2014-09-15T21:15:59.207", "PostTypeId": "1", "LastEditorUserId": "2756719", "Id": "25856451", "Score": "0", "OwnerUserId": "4043983", "Tags": "<c++><operator-overloading><default-constructor>", "AnswerCount": "2"}});