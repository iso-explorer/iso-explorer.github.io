post_cb({"31405006": {"ParentId": "31404920", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The temporary is extended to <em>the lifetime of the reference</em>.</p>\n<blockquote>\n<p id=\"so_31404920_31405006_0\"><code>[C++14: 12.2/5]:</code> <strong>The temporary to which the reference is bound</strong> or the temporary that is the complete object of a subobject to which the reference is bound <strong>persists for the lifetime of the reference except</strong>:</p>\n<ul>\n<li>A temporary bound to a reference member in a constructor\u2019s <em>ctor-initializer</em> (12.6.2) persists until the constructor exits.</li>\n<li>A temporary bound to a reference parameter in a function call (5.2.2) persists until the completion of the <em>full-expression</em> containing the call.</li>\n<li>The lifetime of a temporary bound to the returned value in a function return statement (6.6.3) is not extended; the temporary is destroyed at the end of the <em>full-expression</em> in the return statement.</li>\n<li><p id=\"so_31404920_31405006_1\">A temporary bound to a reference in a <em>new-initializer</em> (5.3.4) persists until the completion of the <em>full-expression</em> containing the <em>new-initializer</em>. <em>[ Example:</em></p>\n<pre><code>struct S { int mi; const std::pair&lt;int,int&gt;&amp; mp; };\nS a { 1, {2,3} };\nS* p = new S{ 1, {2,3} }; // Creates dangling reference\n</code></pre></li>\n</ul>\n<p id=\"so_31404920_31405006_2\"><em>\u2014end example ] [ Note:</em> This may introduce a dangling reference, and implementations are encouraged to issue a warning in such a case. <em>\u2014end note ]</em></p>\n</blockquote>\n<p><sup>(In particular, note that none of the bullet points match this scenario.)</sup></p>\n<p>So, in this case, it's essentially until the program ends.</p>\n<p>We can, of course, test this pretty trivially:</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct Tracked\n{\n    Tracked() { std::cout &lt;&lt; \"ctor\\n\"; };\n    Tracked(const Tracked&amp;) { std::cout &lt;&lt; \"copy\\n\"; };\n    ~Tracked() { std::cout &lt;&lt; \"dtor\\n\"; };\n};\n\nvoid foo()\n{\n    static const Tracked&amp; ref = Tracked();\n}\n\nint main()\n{\n    std::cout &lt;&lt; \"main()\\n\";\n    foo();\n    std::cout &lt;&lt; \"bye\\n\";\n}\n</code></pre>\n<p>Result:</p>\n<blockquote>\n<p id=\"so_31404920_31405006_3\">main()<br>\n  ctor<br>\n  bye<br>\n  dtor</br></br></br></p>\n</blockquote>\n<h3>(<a href=\"http://coliru.stacked-crooked.com/a/68e18ca8a328ce95\" rel=\"nofollow\">live demo</a>)</h3>\n", "OwnerUserId": "560648", "LastEditorUserId": "560648", "LastEditDate": "2015-07-14T11:25:24.290", "Id": "31405006", "Score": "7", "CreationDate": "2015-07-14T11:13:14.297", "LastActivityDate": "2015-07-14T11:25:24.290"}, "31404920": {"CommentCount": "4", "ViewCount": "245", "PostTypeId": "1", "LastEditorUserId": "140719", "CreationDate": "2015-07-14T11:09:33.257", "LastActivityDate": "2015-07-14T12:07:55.673", "Title": "Lifetime of rvalue bound to static const reference", "AcceptedAnswerId": "31405006", "LastEditDate": "2015-07-14T12:07:55.673", "Id": "31404920", "Score": "13", "Body": "<p>Consider this: </p>\n<pre><code>std::string foo();\n\nvoid bar() {\n         const std::string&amp; r1 = foo();\n  static const std::string&amp; r2 = foo();\n}\n</code></pre>\n<p>I know that the lifetime of the string resulting from the first call to <code>foo()</code> will be extended to the lifetime of <code>r1</code>. </p>\n<p>What about the temporary bound to <code>r2</code>, though? Will it live until the end of the scope or will it still be there when <code>bar()</code> is re-entered? </p>\n<p><em>Note:</em> I am not interested whether a particular compiler does so. (I am interested in the one we use, and I can test easily with that.) I want to know what the standard has to say on this. </p>\n", "Tags": "<c++><reference><temporary>", "OwnerUserId": "140719", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_31404920_31405006_2": {"section_id": 382, "quality": 0.75, "length": 12}, "so_31404920_31405006_0": {"section_id": 382, "quality": 0.8125, "length": 13}, "so_31404920_31405006_1": {"section_id": 382, "quality": 0.8333333333333334, "length": 10}}, "n3337": {"so_31404920_31405006_2": {"section_id": 373, "quality": 0.75, "length": 12}, "so_31404920_31405006_0": {"section_id": 373, "quality": 0.8125, "length": 13}, "so_31404920_31405006_1": {"section_id": 373, "quality": 0.8333333333333334, "length": 10}}, "n4659": {"so_31404920_31405006_1": {"section_id": 397, "quality": 0.8333333333333334, "length": 10}, "so_31404920_31405006_0": {"section_id": 397, "quality": 0.8125, "length": 13}, "so_31404920_31405006_2": {"section_id": 397, "quality": 0.6875, "length": 11}}}});