post_cb({"43551665": {"CommentCount": "3", "ViewCount": "600", "CreationDate": "2017-04-21T20:40:00.293", "LastActivityDate": "2017-04-21T21:06:35.330", "Title": "Has a std::byte pointer the same aliasing implications as char*?", "AcceptedAnswerId": "43551805", "PostTypeId": "1", "Id": "43551665", "Score": "17", "Body": "<p>C++ (and C) strict aliasing rules include that a <code>char*</code> and <code>unsigned char*</code> may alias any other pointer.</p>\n<p>AFAIK there is no analogous rule for <code>uint8_t*</code>.</p>\n<p>Thus my question: What are the aliasing rules for a <a href=\"http://en.cppreference.com/w/cpp/types/byte\" rel=\"noreferrer\"><code>std::byte</code></a> pointer?</p>\n<p>The C++ reference currently just <a href=\"http://en.cppreference.com/w/cpp/types/byte\" rel=\"noreferrer\">specifies</a>:</p>\n<blockquote>\n<p id=\"so_43551665_43551665_0\">Like the character types (char, unsigned char, signed char) it can be used to access raw memory occupied by other objects (object representation), but unlike those types, it is not a character type and is not an arithmetic type. </p>\n</blockquote>\n", "Tags": "<c++><c++1z><strict-aliasing>", "OwnerUserId": "427158", "AnswerCount": "1"}, "43551805": {"ParentId": "43551665", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2017-04-21T20:51:01.223", "Score": "14", "LastEditorUserId": "2069064", "LastEditDate": "2017-04-21T21:06:35.330", "Id": "43551805", "OwnerUserId": "5212827", "Body": "<p>From the current Standard draft ([basic.types]/2):</p>\n<blockquote>\n<p id=\"so_43551665_43551805_0\">For any object (other than a base-class subobject) of trivially\n  copyable type T, whether or not the object holds a valid value of type\n  T, the underlying bytes ([intro.memory]) making up the object can be\n  copied into an array of <strong>char, unsigned char, or std\u200b::\u200bbyte</strong>\n  ([cstddef.syn]).<sup>43</sup> If the content of that array is copied back into\n  the object, the object shall subsequently hold its original value.</p>\n</blockquote>\n<p>So yes, the same aliasing rules apply for the three types, just as cppreference sums up. </p>\n<p>It also might be valuable to mention ([basic.lval]/8.8):</p>\n<blockquote>\n<p id=\"so_43551665_43551805_1\">If a program attempts to access the stored value of an object through\n  a glvalue of other than one of the following types the behavior is\n  undefined:</p>\n<ul>\n<li>a char, unsigned char, or std\u200b::\u200bbyte type.</li>\n</ul>\n</blockquote>\n", "LastActivityDate": "2017-04-21T21:06:35.330"}, "bq_ids": {"n4140": {"so_43551665_43551805_1": {"section_id": 7239, "quality": 1.0, "length": 14}, "so_43551665_43551805_0": {"section_id": 7200, "quality": 0.9024390243902439, "length": 37}}, "n3337": {"so_43551665_43551805_1": {"section_id": 6983, "quality": 1.0, "length": 14}, "so_43551665_43551805_0": {"section_id": 6944, "quality": 0.9024390243902439, "length": 37}}, "n4659": {"so_43551665_43551805_1": {"section_id": 8748, "quality": 1.0, "length": 14}, "so_43551665_43551805_0": {"section_id": 8709, "quality": 0.926829268292683, "length": 38}}}});