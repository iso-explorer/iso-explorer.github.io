post_cb({"46150905": {"CommentCount": "0", "ViewCount": "56", "PostTypeId": "1", "LastEditorUserId": "2411320", "CreationDate": "2017-09-11T08:05:31.820", "LastActivityDate": "2017-09-11T08:28:55.353", "Title": "Promotion of parameters during overloading", "AcceptedAnswerId": "46151095", "LastEditDate": "2017-09-11T08:20:26.550", "Id": "46150905", "Score": "3", "Body": "<p>I was studying about overloading and I am completely getting confused with promotions. I looked at few articles in SO (<a href=\"https://stackoverflow.com/questions/25825867/implicit-conversion-sequence-in-function-overloading\">implicit conversion sequence in function overloading</a>) and I am sure some more are available, but could not find the right article. I was also referring to  <a href=\"http://this%20article\" rel=\"nofollow noreferrer\">http://www.dcs.bbk.ac.uk/~roger/cpp/week20.htm</a>.\nI was looking at C++ Programming special edition by Stroustrup and came across following explanation.</p>\n<blockquote>\n<p id=\"so_46150905_46150905_0\">Finding the right version to call from a set of overloaded functions\n  is done by looking for a best match between the type of the argument\n  expression and the parameters (formal arguments) of the functions. To\n  approximate our notions of what is reasonable, a series of criteria\n  are tried in order: <a href=\"http://this%20article\" rel=\"nofollow noreferrer\">1</a> Exact match [2] Match using promotions;\n  [3] Match using standard conversions [4] Match using user-defined\n  conversions [5] Match using the ellipsis ......</p>\n</blockquote>\n<pre><code>void print(int);\nvoid print(double);\nvoid print(long);\nvoid print(char);\nvoid h(char c, int i, short s, float f)\n{\n    print(s); // integral promotion: invoke print(int)\n    print(f); // float to double promotion: print(double)\n}\n</code></pre>\n<p>I wrote below code. I was thinking that if I call the function with value of 1,  func1(long) will be called because promotion takes place. But I get error message \"error: call of overloaded 'func1(int)' is ambiguous\". It is not calling the function with even unsigned char type of variable.</p>\n<p>Also if I pass call func1(3.4f), func1(double) is called and promotion takes place as per my expectation. Why 1 is not promoted to long int but why float is promoted to double? What integer promotions takeplace?</p>\n<pre><code>    void func1(unsigned char speed)\n    {\n        cout&lt;&lt;\"Func1 with unsigned char: speed =\" &lt;&lt; speed &lt;&lt;\" RPM\\n\";\n    }\n\n   void func1(long speed)\n    {\n        cout&lt;&lt;\"Func1 with long Int: speed =\" &lt;&lt; speed &lt;&lt;\" RPM\\n\";\n    }\n\n    void func1(double speed)\n    {\n        cout&lt;&lt;\"Func1 with double: speed =\" &lt;&lt; speed &lt;&lt;\" RPM\\n\";\n    }\n\n    int main(void)\n    {\n        func1(1);\n        func1(3.4f);\n        return(0);\n    }\n</code></pre>\n", "Tags": "<c++><function><overloading><method-overloading><ambiguity>", "OwnerUserId": "6446479", "AnswerCount": "1"}, "46151095": {"ParentId": "46150905", "LastEditDate": "2017-09-11T08:28:55.353", "CommentCount": "5", "CreationDate": "2017-09-11T08:17:15.673", "OwnerUserId": "2411320", "LastEditorUserId": "2411320", "PostTypeId": "2", "Id": "46151095", "Score": "1", "Body": "<p>The standard specifies:</p>\n<blockquote>\n<p id=\"so_46150905_46151095_0\"><code>[C++11: 4.13/1]:</code> (\"Integer conversion rank\")</p>\n<p id=\"so_46150905_46151095_1\">Every integer type has an integer conversion rank defined as follows:</p>\n<ul>\n<li>[..]</li>\n<li>The rank of <code>long long int</code> shall be greater than <strong>the rank of <code>long int</code></strong>, which <strong>shall be greater than the rank of <code>int</code></strong>, which shall be greater than the rank of <code>short int</code>, which shall be greater than the rank of signed char.</li>\n<li><strong>The rank of any unsigned integer type shall equal the rank of the corresponding signed integer type.</strong></li>\n<li>[..]</li>\n</ul>\n</blockquote>\n<p>which calls for ambiguity in your example.</p>\n<p>As for <code>func1(3.4f);</code>, it's just a promotion from float to double, and that's the best match, since the other two overloaded methods have <code>long</code> and <code>unsigned char</code>.</p>\n<p>Also check this <a href=\"https://timsong-cpp.github.io/cppwp/n4659/over.best.ics#over.ics.scs-3\" rel=\"nofollow noreferrer\">table</a>:</p>\n<p><a href=\"https://i.stack.imgur.com/gxsP7.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/gxsP7.png\"/></a></p>\n<p>where a subclause specifies:</p>\n<blockquote>\n<p id=\"so_46150905_46151095_2\"><code>[conv.fpprom]:</code> (7.7 Floating-point promotion )</p>\n<ul>\n<li>A prvalue of type <code>float</code> can be converted to a prvalue of type <code>double</code>. The value is unchanged.</li>\n<li>This conversion is called floating-point promotion.</li>\n</ul>\n</blockquote>\n", "LastActivityDate": "2017-09-11T08:28:55.353"}, "bq_ids": {"n4140": {"so_46150905_46151095_1": {"section_id": 45, "quality": 0.875, "length": 7}}, "n3337": {"so_46150905_46151095_1": {"section_id": 42, "quality": 0.875, "length": 7}}, "n4659": {"so_46150905_46151095_1": {"section_id": 46, "quality": 0.875, "length": 7}}}});