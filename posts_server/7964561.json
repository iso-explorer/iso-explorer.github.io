post_cb({"bq_ids": {"n4140": {"so_7964561_7964561_0": {"length": 6, "quality": 1.0, "section_id": 7173}}, "n3337": {"so_7964561_7964561_0": {"length": 6, "quality": 1.0, "section_id": 6917}}, "n4659": {"so_7964561_7964561_0": {"length": 6, "quality": 1.0, "section_id": 8681}}}, "7964561": {"ViewCount": "89", "Body": "<p>C++03 Standard specifies <em>storage duration</em> in 3.7 which includes <em>automatic storage duration</em> in 3.7.2 which I read as \"automatic duration of storage\", not \"automatic storage\". Also 3.7.3/1 reads</p>\n<blockquote>\n<p id=\"so_7964561_7964561_0\">A C++ implementation provides access to, and management of, dynamic storage...</p>\n</blockquote>\n<p>where <code>dynamic storage</code> is not in italic so it is not introduced as a definition, but at least it is mentioned. However I can't find a place where <em>automatic storage</em> would be mentioned in any similar manner, only <em>automatic storage duration</em> is mentioned throughout the Standard.</p>\n<p>What's the term for the storage (not for the duration, but for the storage itself) where locals and temporaries are stored in C++ Standard?</p>\n", "AcceptedAnswerId": "7964666", "Title": "What's the term for storage where locals and temporaries are stored in C++?", "CreationDate": "2011-11-01T09:26:31.987", "Id": "7964561", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2011-11-01T09:43:22.230", "Score": "2", "OwnerUserId": "57428", "Tags": "<c++><memory><memory-management><duration><language-lawyer>", "AnswerCount": "2"}, "7964666": {"Id": "7964666", "PostTypeId": "2", "Body": "<p>There doesn't have to be a term. As far as the C++ standard is concerned, it doesn't matter. All that matters is the <em>duration</em> of this storage, not where it is located.</p>\n<p>The standard also doesn't mention \"heap\" or \"stack\", even though those are pretty much universally used by compilers to implement the storage semantics described in the standard.</p>\n<p>One possible reason why no such single term exists might be that objects with automatic storage duration aren't necessarily located in one single place. They may be on the stack, or they may be on the heap, <em>as class members of another object</em>, or perhaps in a register.</p>\n", "LastActivityDate": "2011-11-01T09:37:14.160", "Score": "5", "CreationDate": "2011-11-01T09:37:14.160", "ParentId": "7964561", "CommentCount": "5", "OwnerUserId": "33213"}, "7964618": {"Id": "7964618", "PostTypeId": "2", "Body": "<p>If the standard doesn't state where they go, an implementation is free to put them wherever it wants. Normally they would go on the stack but a stack is not a requirement of an implementation.</p>\n<p>The standard is there to state how things <em>behave,</em> not how they work under the covers.</p>\n<p>There is <strong>no</strong> mention in C++03 of <code>automatic storage</code> except in relation to <code>automatic storage duration</code>. This is also true of (the very late draft I have of) the C++11 standard. In all cases, the important thing is the lifetime of the object, not where it's stored.</p>\n", "LastEditorUserId": "14860", "LastActivityDate": "2011-11-01T09:43:22.230", "Score": "4", "CreationDate": "2011-11-01T09:33:06.527", "ParentId": "7964561", "CommentCount": "2", "LastEditDate": "2011-11-01T09:43:22.230", "OwnerUserId": "14860"}});