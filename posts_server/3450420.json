post_cb({"36171068": {"Id": "36171068", "PostTypeId": "2", "Body": "<ul>\n<li>With the old standards (C++98) it is not an error.  </li>\n<li>With the new standards incrementing a boolean is deprecated. (C++11)</li>\n<li>You can use incrementation on a boolean until C++17.</li>\n</ul>\n", "LastActivityDate": "2016-03-23T06:18:38.063", "CommentCount": "0", "CreationDate": "2016-03-23T06:18:38.063", "ParentId": "3450420", "Score": "1", "OwnerUserId": "3111051"}, "3450592": {"Id": "3450592", "PostTypeId": "2", "Body": "<p>It comes from the history of using integer values as booleans.</p>\n<p>If <code>x</code> is an <code>int</code>, but I am using it as a boolean as per <code>if(x)...</code> then incrementing will mean that whatever its truth value before the operation, it will have a truth-value of <code>true</code> after it (barring overflow).</p>\n<p>However, it's impossible to predict the result of <code>--</code> given knowledge only of the truth value of <code>x</code>, as it could result in <code>false</code> (if the integral value is 1) or <code>true</code> (if the integral value is anything else - notably this includes 0 [<code>false</code>] and 2 or more [<code>true</code>]).</p>\n<p>So as a short-hand <code>++</code> worked, and <code>--</code> didn't.</p>\n<p><code>++</code> is allowed on bools for compatibility with this, but its use is deprecated in the standard.</p>\n<hr>\n<p>This assumes that I <strong>only</strong> use <code>x</code> as an boolean, meaning that overflow can't happen until I've done <code>++</code> often enough to cause an overflow on it's own. Even with char as the type used and <code>CHAR_BITS</code> something low like 5, that's 32 times before this doesn't work any more (that's still argument enough for it being a bad practice, I'm not defending the practice, just explaining why it works) for a 32-bit <code>int</code> we of course would have to use <code>++</code> 2^32 times before this is an issue. With <code>--</code> though it will only result in <code>false</code> if I started with a value of 1 for <code>true</code>, or started with 0 and used <code>++</code> precisely once before.</p>\n<p>This is different if we start with a value that is just a few below 0. Indeed, in such a case we might want <code>++</code> to result in the <code>false</code> value eventually such as in:</p>\n<pre><code>int x = -5;\nwhile(++x)\n  doSomething(x);\n</code></pre>\n<p>However, this example treats <code>x</code> as an <code>int</code> everywhere except the conditional, so it's equivalent to:</p>\n<pre><code>int x = -5;\nwhile(++x != 0)\n  doSomething(x);\n</code></pre>\n<p>Which is different to only using <code>x</code> as a boolean.</p>\n</hr>", "LastEditorUserId": "1094609", "LastActivityDate": "2014-04-21T21:31:28.943", "Score": "80", "CreationDate": "2010-08-10T15:26:20.943", "ParentId": "3450420", "CommentCount": "11", "OwnerUserId": "400547", "LastEditDate": "2014-04-21T21:31:28.943"}, "3450554": {"Id": "3450554", "PostTypeId": "2", "Body": "<p><strong>ANSI ISO IEC 14882 2003 (c++03):</strong></p>\n<p>5.2.6-2</p>\n<blockquote>\n<p id=\"so_3450420_3450554_0\">The operand of postfix -- is\n  decremented analogously to the postfix\n  ++ operator, except that the operand shall not be of type bool. [Note: For\n  prefix increment and decrement, see\n  5.3.2. ]</p>\n</blockquote>\n<p>And unsurprisingly...</p>\n<p>5.3.2-2</p>\n<blockquote>\n<p id=\"so_3450420_3450554_1\">The operand of prefix -- is modified\n  by subtracting 1. The operand shall\n  not be of type bool. The requirements\n  on the operand of prefix -- and the\n  properties of its result are otherwise\n  the same as those of prefix ++. [Note:\n  For postfix increment and decrement,\n  see 5.2.6. ]</p>\n</blockquote>\n<p>Also the 5.6.2-1 and 5.3.2-1 mention that ++ for bools shall be true and Annex D-1 says that ++ on bools in deprecated.</p>\n", "LastEditorUserId": "385433", "LastActivityDate": "2010-08-10T15:27:31.230", "Score": "30", "CreationDate": "2010-08-10T15:22:26.143", "ParentId": "3450420", "CommentCount": "2", "OwnerUserId": "385433", "LastEditDate": "2010-08-10T15:27:31.230"}, "bq_ids": {"n4140": {"so_3450420_3450554_0": {"length": 14, "quality": 0.7777777777777778, "section_id": 6010}, "so_3450420_3450554_1": {"length": 21, "quality": 0.7777777777777778, "section_id": 6075}}, "n3337": {"so_3450420_3450554_0": {"length": 14, "quality": 0.7777777777777778, "section_id": 5778}, "so_3450420_3450554_1": {"length": 21, "quality": 0.7777777777777778, "section_id": 5843}}, "n4659": {"so_3450420_3450554_0": {"length": 10, "quality": 0.5555555555555556, "section_id": 7509}, "so_3450420_3450554_1": {"length": 18, "quality": 0.6666666666666666, "section_id": 7571}}}, "3450420": {"ViewCount": "9989", "Body": "<p>Today while writing some Visual C++ code I have come across something which has surprised me. It seems C++ supports ++ (increment) for bool, but not -- (decrement). It this just a random decision, or there is some reason behind this?</p>\n<p>This compiles:</p>\n<pre><code>static HMODULE hMod = NULL;\nstatic bool once = false;\nif (!once++)\n    hMod = LoadLibrary(\"xxx\");\n</code></pre>\n<p>This does not:</p>\n<pre><code>static HMODULE hMod = NULL;\nstatic bool once = true;\nif (once--)\n    hMod = LoadLibrary(\"xxx\");\n</code></pre>\n", "AcceptedAnswerId": "3450592", "Title": "bool operator ++ and --", "CreationDate": "2010-08-10T15:08:20.423", "Id": "3450420", "CommentCount": "4", "FavoriteCount": "18", "PostTypeId": "1", "LastEditDate": "2017-02-10T20:43:39.473", "LastEditorUserId": "4284627", "LastActivityDate": "2017-02-10T20:43:39.473", "Score": "94", "OwnerUserId": "16673", "Tags": "<c++><boolean><increment>", "AnswerCount": "4"}, "3450615": {"Id": "3450615", "PostTypeId": "2", "Body": "<p>Due to historical reasons this was supported. But note that ...\n<em>The use of an operand of type bool with the ++ operator is deprecated see Section 5.3.2 in the C++ Standard(n3092)</em></p>\n<p><strong>5.3.2 Increment and decrement [expr.pre.incr]</strong></p>\n<ul>\n<li>The operand of prefix ++ is modified\nby adding 1, or set to true if it is\nbool (this use is deprecated). The\noperand shall be a modifiable lvalue.\nThe type of the operand shall be an\narithmetic type or a pointer to a\ncompletely-defined object type. The\nresult is the updated operand; it is\nan lvalue, and it is a bit-field if\nthe operand is a bit-field. If x is\nnot of type bool, the expression ++x\nis equivalent to x+=1 [ Note: see the\ndiscussions of addition (5.7) and\nassignment operators (5.17) for\ninformation on conversions. \u2014end note\n]</li>\n<li>The operand of prefix -- is modified\nby subtracting 1. The operand shall\nnot be of type bool. The requirements\non the operand of prefix -- and the\nproperties of its result are\notherwise the same as those of prefix\n++.</li>\n</ul>\n", "LastActivityDate": "2010-08-10T15:28:33.093", "CommentCount": "0", "CreationDate": "2010-08-10T15:28:33.093", "ParentId": "3450420", "Score": "8", "OwnerUserId": "79298"}});