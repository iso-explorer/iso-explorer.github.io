post_cb({"38573315": {"ParentId": "38573185", "PostTypeId": "2", "CommentCount": "8", "Body": "<p>This is covered in <a href=\"http://eel.is/c++draft/temp.variadic#9\" rel=\"nofollow noreferrer\">[temp.variadic]\u00b69</a> (citing N4618):</p>\n<blockquote>\n<p id=\"so_38573185_38573315_0\">If <code>N</code> is zero for a unary fold-expression, the value of the expression\n  is shown in Table 14; if the operator is not listed in Table 14, the instantiation is ill-formed.</p>\n<p id=\"so_38573185_38573315_1\"><strong>Table 14 \u2014 Value of folding empty sequences</strong>:</p>\n<pre class=\"lang-none prettyprint-override\"><code>Operator  |  Value when parameter pack is empty  \n-----------------------------------------------\n&amp;&amp;        |  true\n||        |  false\n,         |  void()\n</code></pre>\n</blockquote>\n<p>The reason only these three operators are supported is outlined in <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0036r0.pdf\" rel=\"nofollow noreferrer\">P0036R0</a>.</p>\n", "OwnerUserId": "636019", "LastEditorUserId": "636019", "LastEditDate": "2016-12-17T14:32:43.330", "Id": "38573315", "Score": "12", "CreationDate": "2016-07-25T16:44:23.723", "LastActivityDate": "2016-12-17T14:32:43.330"}, "38573185": {"CommentCount": "0", "AcceptedAnswerId": "38573315", "LastEditDate": "2016-07-25T16:38:23.343", "LastEditorUserId": "636019", "CreationDate": "2016-07-25T16:36:59.047", "LastActivityDate": "2016-12-17T14:32:43.330", "PostTypeId": "1", "ViewCount": "149", "Title": "Fold expressions and empty parameters pack: what's the expected result?", "Id": "38573185", "OwnerUserId": "4987285", "Body": "<p>Consider the following minimal example:</p>\n<pre><code>#include&lt;cstddef&gt;\n\ntemplate&lt;std::size_t... I&gt;\nconstexpr auto sum() { return (I + ...); }\n\ntemplate&lt;bool... B&gt;\nconstexpr auto check() { return (B &amp;&amp; ...); }\n\nint main() {\n    static_assert(6 == sum&lt;1,2,3&gt;(), \"!\");\n    // static_assert(0 == sum&lt;&gt;(), \"!\");\n    static_assert(check&lt;true, true&gt;(), \"!\");\n    static_assert(check&lt;&gt;(), \"!\");\n}\n</code></pre>\n<p>The commented line doesn't compile.<br>\nThe same applies using <code>*</code> instead of <code>+</code>.<br>\nThe one involving booleans works instead.</br></br></p>\n<p><a href=\"http://eel.is/c++draft/expr.prim.fold\" rel=\"noreferrer\">Here</a> (working draft) I haven't found mentions about empty parameter packs.<br>\nOn the other side, <a href=\"https://isocpp.org/files/papers/n4295.html\" rel=\"noreferrer\">here</a> (isocpp) it seems that the default result in the case above is <code>int()</code>.</br></p>\n<p>What's exactly the expected behavior when mixing fold expressions and an empty parameters pack?</p>\n", "Tags": "<c++><templates><c++1z><fold-expression>", "Score": "10", "AnswerCount": "1"}, "bq_ids": {"n4659": {"so_38573185_38573315_0": {"section_id": 130, "quality": 0.8333333333333334, "length": 10}}}});