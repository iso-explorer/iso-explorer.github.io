post_cb({"bq_ids": {"n4140": {"so_31534195_31534330_1": {"length": 6, "quality": 0.8571428571428571, "section_id": 603}, "so_31534195_31534330_3": {"length": 21, "quality": 1.0, "section_id": 639}, "so_31534195_31534330_0": {"length": 13, "quality": 1.0, "section_id": 639}}, "n3337": {"so_31534195_31534330_1": {"length": 6, "quality": 0.8571428571428571, "section_id": 593}, "so_31534195_31534330_3": {"length": 21, "quality": 1.0, "section_id": 629}, "so_31534195_31534330_0": {"length": 13, "quality": 1.0, "section_id": 629}}, "n4659": {"so_31534195_31534330_1": {"length": 6, "quality": 0.8571428571428571, "section_id": 629}, "so_31534195_31534330_3": {"length": 21, "quality": 1.0, "section_id": 667}, "so_31534195_31534330_0": {"length": 13, "quality": 1.0, "section_id": 667}}}, "31534330": {"Id": "31534330", "PostTypeId": "2", "Body": "<p>The overload will be chosen at compile-time. The \"best-fit\" will be chosen, which in this case depends on the cv-qualification of the function parameters:</p>\n<p>From N4140 [over.ics.rank]/3</p>\n<blockquote>\n<p id=\"so_31534195_31534330_0\">Two implicit conversion sequences of the same form are indistinguishable conversion sequences unless one of\n  the following rules applies:</p>\n<ul>\n<li><p id=\"so_31534195_31534330_1\">Standard conversion sequence S1 is a better conversion sequence than S2 if</p>\n<ul>\n<li><p id=\"so_31534195_31534330_2\">...</p></li>\n<li><p id=\"so_31534195_31534330_3\">S1 and S2 are reference bindings, and the types to which the references refer are the same\n  type except for top-level cv-qualifiers, and the type to which the reference initialized by S2 refers\n  is more cv-qualified than the type to which the reference initialized by S1 refers.</p></li>\n</ul></li>\n</ul>\n</blockquote>\n<p><code>int&amp;</code> is less cv-qualified than <code>const int&amp;</code>, so will be chosen when possible. <code>int&amp;</code> cannot bind to an rvalue like <code>3</code>, so the <code>const</code> version is selected for that.</p>\n<p><a href=\"http://coliru.stacked-crooked.com/a/09ce3cbdfaff9926\" rel=\"nofollow\"><kbd>Demo</kbd></a></p>\n", "LastEditorUserId": "496161", "LastActivityDate": "2015-07-21T09:01:28.597", "Score": "1", "CreationDate": "2015-07-21T08:48:25.720", "ParentId": "31534195", "CommentCount": "0", "OwnerUserId": "496161", "LastEditDate": "2015-07-21T09:01:28.597"}, "31534351": {"Id": "31534351", "PostTypeId": "2", "Body": "<p>It is defined at compile time \nThis code : </p>\n<pre><code>void f (const int&amp; i)\n{\n    return;\n}\nvoid f ( int &amp;i)\n{\n    return;\n}\nint main()\n{\n    int i = 12;\n    f(3);\n    f(i);\n}\n</code></pre>\n<p>is compiled with gcc 5.2 to this : </p>\n<pre><code>movl    $3, -4(%rbp) //Declare variable i with 3\nleaq    -4(%rbp), %rax\nmovq    %rax, %rdi\ncall    f(int const&amp;)  //And call the method with const int&amp;\nleaq    -8(%rbp), %rax \nmovq    %rax, %rdi\ncall    f(int&amp;) //Call the method with only the reference\n</code></pre>\n", "LastActivityDate": "2015-07-21T08:49:25.373", "CommentCount": "0", "CreationDate": "2015-07-21T08:49:25.373", "ParentId": "31534195", "Score": "0", "OwnerUserId": "5076707"}, "31534364": {"Id": "31534364", "PostTypeId": "2", "Body": "<p>This will be done at compile time only, because the type of parameters are different.\nTherefore these are not simple overloaded functions, calls of which can be determined at compile time only.</p>\n", "LastActivityDate": "2015-07-21T08:49:47.423", "CommentCount": "0", "CreationDate": "2015-07-21T08:49:47.423", "ParentId": "31534195", "Score": "0", "OwnerUserId": "1307255"}, "31534195": {"ViewCount": "36", "Body": "<p>Consider the following functions</p>\n<pre><code>int f (const int&amp; i)\n{\n  cout &lt;&lt; \"in const reference function\";\n}\nint f ( int &amp;i)\n{\n  cout &lt;&lt; \"in non const reference function\";\n}\nint main()\n{\n    int i;\n    f(3);\n    f(i);\n}\n</code></pre>\n<p>In this case when the function call is bound with function definition, will it be at compile time or run time, as one is lvalue <code>i</code> and the other is not?</p>\n<p>Other than this two functions are same in terms of number and type of parameters.</p>\n", "Title": "When is it decided which function is to call in case of const and non const reference variable?", "CreationDate": "2015-07-21T08:41:07.467", "LastActivityDate": "2015-07-21T09:01:28.597", "CommentCount": "4", "LastEditDate": "2015-07-21T09:00:41.357", "PostTypeId": "1", "LastEditorUserId": "496161", "Id": "31534195", "Score": "-1", "OwnerUserId": "3287033", "Tags": "<c++><binding><overloading><dynamic-binding><static-binding>", "AnswerCount": "3"}});