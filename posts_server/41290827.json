post_cb({"bq_ids": {"n4140": {"so_41290827_41290827_0": {"length": 16, "quality": 0.9411764705882353, "section_id": 702}, "so_41290827_41290827_2": {"length": 13, "quality": 0.6190476190476191, "section_id": 7026}, "so_41290827_41290827_1": {"length": 5, "quality": 0.5555555555555556, "section_id": 7221}}, "n3337": {"so_41290827_41290827_0": {"length": 16, "quality": 0.9411764705882353, "section_id": 692}, "so_41290827_41290827_2": {"length": 13, "quality": 0.6190476190476191, "section_id": 6772}, "so_41290827_41290827_1": {"length": 5, "quality": 0.5555555555555556, "section_id": 6965}}, "n4659": {"so_41290827_41290827_0": {"length": 16, "quality": 0.9411764705882353, "section_id": 731}, "so_41290827_41290827_2": {"length": 14, "quality": 0.6666666666666666, "section_id": 8523}, "so_41290827_41290827_1": {"length": 5, "quality": 0.5555555555555556, "section_id": 8730}}}, "41290827": {"ViewCount": "85", "Body": "<p>Container's definition from the Standard:</p>\n<blockquote>\n<p id=\"so_41290827_41290827_0\">\u00a723.2.1/1: <strong>Containers are objects</strong> that store other objects. They control allocation and deallocation of these objects through constructors, destructors, insert and erase operations.</p>\n</blockquote>\n<p>I think the container's definition above contradicts with the definition from C++ Primer book (which I prefer):</p>\n<blockquote>\n<p id=\"so_41290827_41290827_1\"><strong>Container is a type</strong> whose objects hold a collection of objects of a given type. </p>\n</blockquote>\n<p>It's obvious that (abstract) type can't be an object (any object must occupy a region of storage). \nYou can say that C++ <strong>container is a class template</strong>. But templates are not objects too. There is a note about it from <a href=\"http://en.cppreference.com/w/cpp/language/object\" rel=\"nofollow noreferrer\">cppreference</a>:</p>\n<blockquote>\n<p id=\"so_41290827_41290827_2\">The following entities are not objects: value, reference, function, enumerator, <strong>type</strong>, non-static class member, bit-field, <strong>template</strong>, class or function template specialization, namespace, parameter pack, and this.</p>\n</blockquote>\n<p>So why the Standard claims that containers are objects? Maybe there is a mistake somewhere?</p>\n", "AcceptedAnswerId": "41291035", "Title": "Why the Standard claims that containers are objects?", "CreationDate": "2016-12-22T20:01:01.310", "Id": "41290827", "CommentCount": "6", "PostTypeId": "1", "ClosedDate": "2016-12-22T20:19:46.497", "LastActivityDate": "2016-12-22T20:16:56.617", "Score": "-5", "OwnerUserId": "7123797", "Tags": "<c++>", "AnswerCount": "1"}, "41291035": {"Id": "41291035", "PostTypeId": "2", "Body": "<p>If you are going to look at things so pedantically, then standard library containers are <em>neither</em> types nor objects. \"Container\" is a <em>concept</em>: a specific set of interfaces and behaviors which a type can conform to. <code>vector</code> is a template class which conforms to the concept of a sequence container.</p>\n<p>There is no C++ type named \"container\". So unless there is some part of the book that you're not quoting, then the C++ Primer book is clearly wrong.</p>\n<p>The standard is more technically correct. An object whose type conforms to a container concept is a container. Therefore, containers could be considered to be any object which conforms to the container concept.</p>\n", "LastActivityDate": "2016-12-22T20:16:56.617", "CommentCount": "2", "CreationDate": "2016-12-22T20:16:56.617", "ParentId": "41290827", "Score": "2", "OwnerUserId": "734069"}});