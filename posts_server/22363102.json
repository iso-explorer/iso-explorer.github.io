post_cb({"22363263": {"ParentId": "22363102", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>You can use the macro:</p>\n<pre><code>UINT64_C\n</code></pre>\n<p>to define a 64bit unsigned integer literal, the <code>cstdint</code> header provides macros for defining integer literals of specific sizes, we see that in section <code>18.4.1</code> <em>Header  synopsis</em>:</p>\n<blockquote>\n<p id=\"so_22363102_22363263_0\">The header also defines numerous macros of the form:</p>\n</blockquote>\n<p>and includes:</p>\n<blockquote>\n<p id=\"so_22363102_22363263_1\">plus function macros of the form:</p>\n<blockquote>\n<p id=\"so_22363102_22363263_3\">[U]INT{8 16 32 64 MAX}_C</p>\n</blockquote>\n</blockquote>\n<p>We have to go back to the  C99 draft standard to find how they work, section <code>7.18.4.1</code> <em>Macros for minimum-width integer constants</em> which says:</p>\n<blockquote>\n<p id=\"so_22363102_22363263_4\">[...]if uint_least64_t is a name for the type unsigned long long int,\n  then <strong>UINT64_C(0x123) might expand to the integer constant 0x123ULL</strong>.</p>\n</blockquote>\n<p>as the proper way of defining a 64bit integer constant expression. This is unfortunately not document on cpprefernce but <a href=\"http://www.cplusplus.com/reference/cstdint/\" rel=\"noreferrer\">cplusplus.com</a> does document this feature for of the <code>cstdint</code> header as well as the <a href=\"http://pubs.opengroup.org/onlinepubs/009695399/basedefs/stdint.h.html\" rel=\"noreferrer\">posix reference for stdint.h</a>.</p>\n", "OwnerUserId": "1708801", "LastEditorUserId": "1708801", "LastEditDate": "2015-12-31T16:18:41.360", "Id": "22363263", "Score": "12", "CreationDate": "2014-03-12T20:37:44.973", "LastActivityDate": "2015-12-31T16:18:41.360"}, "22363200": {"ParentId": "22363102", "CommentCount": "1", "Body": "<p><code>(uint64_t 1)</code> is not valid syntax. When casting, you can either use <code>uint64_t(1)</code> or <code>(uint64_t) 1</code>. The commented out example works because it follows the proper syntax for casting, as would:</p>\n<pre><code>const uint64_t test = ((uint64_t)1) &lt;&lt; 30;\n</code></pre>\n", "OwnerUserId": "2721883", "PostTypeId": "2", "Id": "22363200", "Score": "5", "CreationDate": "2014-03-12T20:34:34.713", "LastActivityDate": "2014-03-12T20:34:34.713"}, "22363102": {"CommentCount": "0", "ViewCount": "9363", "CreationDate": "2014-03-12T20:29:41.403", "LastActivityDate": "2016-01-05T19:19:00.293", "Title": "How to input int64_t / uint64_t constants?", "AcceptedAnswerId": "22363200", "PostTypeId": "1", "Id": "22363102", "Score": "5", "Body": "<p>What I'm trying to do is to define a constant equal to 2^30 (I may change it to something like 2^34, so I prefer to have a room larger than 32 bits for it).</p>\n<p>Why the following minimal(?) example doesn't compile?</p>\n<pre><code>#include &lt;stdint.h&gt;\n// test.cpp:4:33: error: expected primary-expression before numeric constant\n// test.cpp:4:33: error: expected ')' before numeric constant\nconst uint64_t test = (uint64_t 1) &lt;&lt; 30;\n//const uint64_t test1 = (uint64_t(1)) &lt;&lt; 30;// this one magically compiles! why?\n\nint main() { return 0; }\n</code></pre>\n", "Tags": "<c++><compiler-errors><g++><const><int64>", "OwnerUserId": "301644", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_22363102_22363263_1": {"section_id": 6796, "quality": 1.0, "length": 4}, "so_22363102_22363263_0": {"section_id": 6796, "quality": 0.8571428571428571, "length": 6}}, "n3337": {"so_22363102_22363263_1": {"section_id": 6551, "quality": 1.0, "length": 4}, "so_22363102_22363263_0": {"section_id": 6551, "quality": 0.8571428571428571, "length": 6}}, "n4659": {"so_22363102_22363263_1": {"section_id": 8286, "quality": 1.0, "length": 4}, "so_22363102_22363263_0": {"section_id": 8286, "quality": 0.8571428571428571, "length": 6}}}, "22363227": {"ParentId": "22363102", "PostTypeId": "2", "CommentCount": "9", "Body": "<p>The syntax you are looking for is:</p>\n<pre><code>const uint64_t test = 1ULL &lt;&lt; 30;\n</code></pre>\n<p>The post-fix <code>ULL</code> is used for unsigned integer literals that are at least 64-bits wide.</p>\n", "OwnerUserId": "529761", "LastEditorUserId": "529761", "LastEditDate": "2016-01-05T19:19:00.293", "Id": "22363227", "Score": "7", "CreationDate": "2014-03-12T20:35:56.250", "LastActivityDate": "2016-01-05T19:19:00.293"}});