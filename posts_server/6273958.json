post_cb({"bq_ids": {"n4140": {"so_6273958_6274011_1": {"length": 7, "quality": 1.0, "section_id": 400}, "so_6273958_6274011_0": {"length": 8, "quality": 1.0, "section_id": 369}}, "n3337": {"so_6273958_6274011_1": {"length": 7, "quality": 1.0, "section_id": 391}, "so_6273958_6274011_0": {"length": 8, "quality": 1.0, "section_id": 359}}, "n4659": {"so_6273958_6274011_1": {"length": 7, "quality": 1.0, "section_id": 417}, "so_6273958_6274011_0": {"length": 8, "quality": 1.0, "section_id": 381}}}, "6273990": {"Id": "6273990", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_6273958_6273990_0\">if I have a POD struct in C++, can I theoretically benefit under some compilers by defining empty inline constructor/destructors myself in place of the defaults?</p>\n</blockquote>\n<p>Theorotically, Yes! Any function(including constructors &amp; destructors) can be declared inline, and putting the function body in the class definition is one way of doing that. However, it's up to the compiler if it actually does inline the function.</p>\n", "LastEditorUserId": "46642", "LastActivityDate": "2011-06-08T03:52:01.810", "Score": "3", "CreationDate": "2011-06-08T03:46:47.907", "ParentId": "6273958", "CommentCount": "8", "OwnerUserId": "452307", "LastEditDate": "2011-06-08T03:52:01.810"}, "6274038": {"Id": "6274038", "PostTypeId": "2", "Body": "<p>It varies across compilers, but in general: yes, they should.</p>\n<p>With gcc at least, you get both an inline and an out-of-line function generated. The out-of-line version is marked as \"link once\", so no matter how many objects generate a default constructor, at most only one version will end up in the linked output. If in fact nobody uses the default constructor out-of-line, it's not included in the linked output at all, and you have effectively a purely inline function.</p>\n", "LastActivityDate": "2011-06-08T03:56:23.150", "CommentCount": "2", "CreationDate": "2011-06-08T03:56:23.150", "ParentId": "6273958", "Score": "1", "OwnerUserId": "591478"}, "6274011": {"Id": "6274011", "PostTypeId": "2", "Body": "<p>The C++ standard says, in <strong>12.1[class.ctor]/5</strong></p>\n<blockquote>\n<p id=\"so_6273958_6274011_0\">An implicitly-declared default constructor is an inline public member of its class</p>\n</blockquote>\n<p>and in <strong>12.4[class.dtor]/3</strong></p>\n<blockquote>\n<p id=\"so_6273958_6274011_1\">An implicitly-declared\n  destructor is an inline public member of its class.</p>\n</blockquote>\n", "LastActivityDate": "2011-06-08T03:51:27.633", "CommentCount": "2", "CreationDate": "2011-06-08T03:51:27.633", "ParentId": "6273958", "Score": "16", "OwnerUserId": "273767"}, "6273958": {"ViewCount": "1721", "Body": "<p>I'm curious if the default constructor and destructor that the compiler generates are inline or not, because I can justify it either way. On the one hand, you want the default constructor/destructor to <em>not</em> be inline so that adding them later doesn't break ABI (because object files compiled when only the defaults were there will have inlined the generated definitions instead of what you define). On the other hand, for a C++ compiler to compile C code that performs as well as when compiled with a C compiler, it can't be adding constructor/destructor calls for every allocated struct, and in C++ the only functional difference between a class and a struct is supposed to be the default access protection. Maybe the linker addresses this somehow? Maybe the answer varies across compilers?</p>\n<p>A consequence of this question: if I have a POD struct in C++, can I theoretically benefit under some compilers by defining empty inline constructor/destructors myself in place of the defaults?</p>\n", "AcceptedAnswerId": "6274011", "Title": "Are the default constructor and destructor ever inline?", "CreationDate": "2011-06-08T03:41:40.880", "Id": "6273958", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2011-06-08T03:47:13.293", "LastEditorUserId": "50385", "LastActivityDate": "2011-06-08T03:56:23.150", "Score": "7", "OwnerUserId": "50385", "Tags": "<c++><c><inline><binary-compatibility><abi>", "AnswerCount": "3"}});