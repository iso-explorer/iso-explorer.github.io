post_cb({"8100567": {"Id": "8100567", "PostTypeId": "2", "Body": "<p>No.</p>\n<p>C++ intentionally avoids such shenanigans since the symbol foo_bar would be very difficult to comprehend if it weren't defined immediately before its use in your example.</p>\n<p>You could achieve something similar with the preprocessor.</p>\n<pre><code>#define bar (1)\n\nint foo(int x) {\n  std::cout &lt;&lt; x &lt;&lt; std::endl;\n}\n\nint main() {\n  foo(0);    // print 0\n  foo bar;   // print 1\n}\n</code></pre>\n", "LastActivityDate": "2011-11-11T22:09:07.410", "CommentCount": "0", "CreationDate": "2011-11-11T22:09:07.410", "ParentId": "8100519", "Score": "1", "OwnerUserId": "16287"}, "bq_ids": {"n4140": {"so_8100519_8100583_0": {"length": 32, "quality": 0.9411764705882353, "section_id": 5368}}, "n3337": {"so_8100519_8100583_0": {"length": 32, "quality": 0.9411764705882353, "section_id": 5164}}, "n4659": {"so_8100519_8100583_0": {"length": 32, "quality": 0.9411764705882353, "section_id": 6793}}}, "8100583": {"Id": "8100583", "PostTypeId": "2", "Body": "<p>According to the C++11 Feb 2011 Draft \u00a7 2.14.8, the user literal types are integer-literals, floating-literals, string-literals, and character-literals.  There is no way to do a function-literal type.</p>\n<blockquote>\n<p id=\"so_8100519_8100583_0\">A user-defined-literal is treated as a call to a literal operator or\n  literal operator template (13.5.8). To determine the form of this call\n  for a given user-defined-literal L with ud-suffix X, the\n  literal-operator-id whose literal suffix identifier is X is looked up\n  in the context of L using the rules for unqualified name lookup\n  (3.4.1). Let S be the set of declarations found by this lookup. S\n  shall not be empty.</p>\n</blockquote>\n<p>Integers: </p>\n<pre><code>operator \"\" X (n ULL)\noperator \"\" X (\"n\")\noperator \"\" X &lt;\u2019c1\u2019, \u2019c2\u2019, ... \u2019ck\u2019&gt;()\n</code></pre>\n<p>Floating:</p>\n<pre><code>operator \"\" X (f L)\noperator \"\" X (\"f\")\noperator \"\" X &lt;\u2019c1\u2019, \u2019c2\u2019, ... \u2019ck\u2019&gt;()\n</code></pre>\n<p>String:</p>\n<pre><code>operator \"\" X (str, len)\noperator \"\" X &lt;\u2019c1\u2019, \u2019c2\u2019, ... \u2019ck\u2019&gt;() //unoffcial, a rumored GCC extension\n</code></pre>\n<p>Character:</p>\n<pre><code>operator \"\" X (ch)\n</code></pre>\n", "LastEditorUserId": "845092", "LastActivityDate": "2011-11-11T22:43:24.737", "Score": "7", "CreationDate": "2011-11-11T22:10:38.667", "ParentId": "8100519", "CommentCount": "3", "OwnerUserId": "845092", "LastEditDate": "2011-11-11T22:43:24.737"}, "8867301": {"Id": "8867301", "PostTypeId": "2", "Body": "<p>I don't know if this adds anything but there's nothing preventing you from defining</p>\n<pre><code>PythonScript operator\"\" _python(const char*, std::size_t len) {...}\n\nR\"Py(\n  print \"Hello, World\"\n)Py\"_python;\n</code></pre>\n<p>I actually think user-defined literals would make a nice way to embed scripts or SQL.</p>\n", "LastEditorUserId": "500104", "LastActivityDate": "2012-01-15T03:35:00.167", "Score": "1", "CreationDate": "2012-01-15T03:17:11.400", "ParentId": "8100519", "CommentCount": "0", "OwnerUserId": "680359", "LastEditDate": "2012-01-15T03:35:00.167"}, "8100533": {"Id": "8100533", "PostTypeId": "2", "Body": "<p>Look at <code>foo_bar</code>, its just a single lexical token. Its interpreted as a single identifier named <code>foo_bar</code>, not as <code>foo</code> suffixed with <code>_bar</code>.</p>\n", "LastActivityDate": "2011-11-11T22:04:43.523", "CommentCount": "0", "CreationDate": "2011-11-11T22:04:43.523", "ParentId": "8100519", "Score": "1", "OwnerUserId": "927034"}, "8100519": {"ViewCount": "204", "Body": "<p><strong>Can functions be used with user defined literals?</strong></p>\n<p>If so, what shenanigans can be done? Is this legal?</p>\n<pre><code>void operator \"\" _bar(int (*func)(int)) {\n  func(1);\n}\n\nint foo(int x) {\n  std::cout &lt;&lt; x &lt;&lt; std::endl;\n}\n\nint main() {\n  foo(0);    // print 0\n  foo_bar;   // print 1\n}\n</code></pre>\n", "AcceptedAnswerId": "8100583", "Title": "Can user defined literals have functions as arguments?", "CreationDate": "2011-11-11T22:01:57.070", "Id": "8100519", "CommentCount": "1", "PostTypeId": "1", "LastActivityDate": "2012-01-15T03:35:00.167", "Score": "4", "OwnerUserId": "964135", "Tags": "<c++><c++11><user-defined-literals>", "AnswerCount": "4"}});