post_cb({"15547758": {"ParentId": "15547305", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>The main reason is because there is no requirement that\na pointer to member have the same size and representation as\na pointer to data.  <strike>In practice, it's hard to imagine a pointer\nto a data member not being able to fit into a <code>void*</code>, since\na pointer to a data member really only needs to contain an\noffset.  Roughly speaking, a pointer to a data member will\nnever need to be larger than a <code>size_t</code>, and a <code>void*</code> must be\nat least as large as a <code>size_t</code>.  On the other hand, it could\neasily contain bit patterns which weren't legal in a pointer.</strike>\nIn fact, as Steve Jessop points out, pointers to member do require additional information, since if the member is in a virtual base, its offset depends on the most derived class, and must be calculated dynamically, based on additional information in the pointer.</p>\n<p>More generally, a <code>void*</code> can only contain a pointer to data.\nIt must be as large as the largest data pointer (typically\na <code>char*</code>), but pointers to functions, and member pointers, can\nbe larger, and not fit (and pointer to member functions almost\nnever fit). </p>\n", "OwnerUserId": "649665", "LastEditorUserId": "649665", "LastEditDate": "2013-03-21T14:12:19.850", "Id": "15547758", "Score": "2", "CreationDate": "2013-03-21T12:37:28.473", "LastActivityDate": "2013-03-21T14:12:19.850"}, "15547549": {"ParentId": "15547305", "CommentCount": "3", "Body": "<p>Are you trying to do something like this?</p>\n<pre><code>struct ABC\n{\n    int a;\n    int b;\n    char c;\n};\n\nint main()\n{\n    ABC abc;\n    char *ptt1 = &amp;abc.c;\n    void *another_ptr = (void*)ptt1;\n}\n</code></pre>\n", "OwnerUserId": "479869", "PostTypeId": "2", "Id": "15547549", "Score": "0", "CreationDate": "2013-03-21T12:28:36.127", "LastActivityDate": "2013-03-21T12:28:36.127"}, "15547305": {"CommentCount": "6", "AcceptedAnswerId": "15547408", "CreationDate": "2013-03-21T12:17:26.257", "LastActivityDate": "2013-03-21T14:12:19.850", "PostTypeId": "1", "ViewCount": "946", "FavoriteCount": "0", "Title": "Convert pointer to data member to void *", "Id": "15547305", "Score": "4", "Body": "<p>I know that I can get a pointer to data member for a class or struct but the last line of the following code fails to compile:</p>\n<pre><code>struct abc\n{\n    int a;\n    int b;\n    char c;\n};\n\nint main()\n{\n    typedef struct abc abc;\n    char abc::*ptt1 = &amp;abc::c;\n    void *another_ptr = (void*)ptt1;\n}\n</code></pre>\n<p>why can't I convert ptt1 to another_ptr? We're talking about pointers so one pointer should have a similar dimension to another one (although conceptually different)</p>\n", "Tags": "<c++><casting><type-conversion><pointer-to-member>", "OwnerUserId": "2154732", "AnswerCount": "3"}, "15547408": {"ParentId": "15547305", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>A <em>pointer to non-static class member type</em> is not the same as a <em>object pointer type</em>; they behave very differently. In fact, you cannot even dereference a pointer to member with <code>*</code>. To access a member through a pointer to member, you use the <code>.*</code> and <code>-&gt;*</code> operators instead. If you <em>could</em> cast it to an object pointer type like this, what would happen, then, if you dereferenced it with <code>*</code>?</p>\n<p>Only object pointer types have a standard conversion to <code>void*</code> (\u00a74.10):</p>\n<blockquote>\n<p id=\"so_15547305_15547408_0\">A prvalue of type \"pointer to <em>cv</em> <code>T</code>,\" where <code>T</code> is an object type, can be converted to a prvalue of type \"pointer to <em>cv</em> <code>void</code>\".</p>\n</blockquote>\n<p>They're so different that the standard even goes out of its way to make sure that the term \"pointer\" doesn't include pointers to non-static members (\u00a73.9.2):</p>\n<blockquote>\n<p id=\"so_15547305_15547408_1\">Except for pointers to static members, text referring to \"pointers\" does not apply to pointers to members.</p>\n</blockquote>\n", "OwnerUserId": "150634", "LastEditorUserId": "150634", "LastEditDate": "2013-03-21T13:49:03.373", "Id": "15547408", "Score": "8", "CreationDate": "2013-03-21T12:22:07.570", "LastActivityDate": "2013-03-21T13:49:03.373"}, "bq_ids": {"n4140": {"so_15547305_15547408_0": {"section_id": 40, "quality": 1.0, "length": 12}, "so_15547305_15547408_1": {"section_id": 7223, "quality": 1.0, "length": 11}}, "n3337": {"so_15547305_15547408_0": {"section_id": 37, "quality": 1.0, "length": 12}, "so_15547305_15547408_1": {"section_id": 6967, "quality": 1.0, "length": 11}}, "n4659": {"so_15547305_15547408_0": {"section_id": 40, "quality": 1.0, "length": 12}, "so_15547305_15547408_1": {"section_id": 8732, "quality": 1.0, "length": 11}}}});