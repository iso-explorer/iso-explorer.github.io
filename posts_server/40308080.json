post_cb({"bq_ids": {"n4140": {"so_40308080_40308373_0": {"length": 30, "quality": 0.7317073170731707, "section_id": 2232}}, "n3337": {"so_40308080_40308373_0": {"length": 27, "quality": 0.6585365853658537, "section_id": 2220}}, "n4659": {"so_40308080_40308373_0": {"length": 30, "quality": 0.7317073170731707, "section_id": 2505}}}, "40308080": {"ViewCount": "169", "Body": "<p>When I read all data from a stream, but make no attempt to read past its end, the stream's EOF is not set. That's how C++ streams work, right? It's the reason this works:</p>\n<pre><code>#include &lt;sstream&gt;\n#include &lt;cassert&gt;\n\nchar buf[255];\n\nint main()\n{\n    std::stringstream ss(\"abcdef\");\n    ss.read(buf, 6);\n\n    assert(!ss.eof());\n    assert(ss.tellg() == 6);\n}\n</code></pre>\n<p>However, if instead of <code>read()</code>ing data I <code>ignore()</code> it, EOF is set:</p>\n<pre><code>#include &lt;sstream&gt;\n#include &lt;cassert&gt;\n\nint main()\n{\n    std::stringstream ss(\"abcdef\");\n    ss.ignore(6);\n\n    assert(!ss.eof());        // &lt;-- FAILS\n    assert(ss.tellg() == 6);  // &lt;-- FAILS\n}\n</code></pre>\n<p>This is on GCC 4.8 and GCC trunk (Coliru).</p>\n<p>It also has the unfortunate side-effect of making <code>tellg()</code> return <code>-1</code> (because that's what <code>tellg()</code> does), which is annoying for what I'm doing.</p>\n<p>Is this standard-mandated? If so, which passage and why? Why would <code>ignore()</code> attempt to read more than I told it to?</p>\n<p>I can't find any reason for this behaviour on <a href=\"http://en.cppreference.com/w/cpp/io/basic_istream/ignore\" rel=\"nofollow\">cppreference's <code>ignore()</code> page</a>. I can probably <code>.seekg(6, std::ios::cur)</code> instead, right? But I'd still like to know what's going on.</p>\n", "AcceptedAnswerId": "40308373", "Title": "Why does std::ios_base::ignore() set the EOF bit?", "CreationDate": "2016-10-28T15:11:53.517", "Id": "40308080", "CommentCount": "4", "LastEditDate": "2016-10-28T15:25:21.863", "PostTypeId": "1", "LastEditorUserId": "560648", "LastActivityDate": "2016-10-28T17:06:02.673", "Score": "8", "OwnerUserId": "560648", "Tags": "<c++><c++11><std><iostream>", "AnswerCount": "1"}, "40308373": {"Id": "40308373", "PostTypeId": "2", "Body": "<p>I think this is a libstdc++ bug (<a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=42857\" rel=\"nofollow\">42875</a>, <a href=\"http://www.merriam-webster.com/words-at-play/what-does-ht-mean-on-twitter\" rel=\"nofollow\">h/t</a> NathanOliver). The requirements on <code>ignore()</code> in [istream.unformatted] are:</p>\n<blockquote>\n<p id=\"so_40308080_40308373_0\">Characters are extracted until any\n  of the following occurs:<br>\n  \u2014 <code>n != numeric_limits&lt;streamsize&gt;::max()</code> (18.3.2) and <code>n</code> characters have been extracted so far<br>\n  \u2014 end-of-file occurs on the input sequence (in which case the function calls <code>setstate(eofbit)</code>,\n  which may throw <code>ios_base::failure</code> (27.5.5.4));<br>\n  \u2014 <code>traits::eq_int_type(traits::to_int_type(c), delim)</code> for the next available input character\n  c (in which case c is extracted).<br>\n<em>Remarks:</em> The last condition will never occur if <code>traits::eq_int_type(delim, traits::eof())</code>.</br></br></br></br></p>\n</blockquote>\n<p>So we have two conditions (the last is ignored) - we either read <code>n</code> characters, or at some point we hit end-of-file in which case we set the <code>eofbit</code>. But, we are able to read <code>n</code> characters from the stream in this case (there are in fact 6 characters in your stream), so we will not hit end-of-file on the input sequence. </p>\n<p>In libc++, <code>eof()</code> is not set and <code>tellg()</code> does return 6.</p>\n", "LastEditorUserId": "560648", "LastActivityDate": "2016-10-28T17:06:02.673", "Score": "4", "CreationDate": "2016-10-28T15:27:30.133", "ParentId": "40308080", "CommentCount": "5", "LastEditDate": "2016-10-28T17:06:02.673", "OwnerUserId": "2069064"}});