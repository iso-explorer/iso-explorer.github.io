post_cb({"7508245": {"ParentId": "7507818", "LastEditDate": "2017-05-23T12:03:34.927", "CommentCount": "0", "CreationDate": "2011-09-22T00:28:45.153", "OwnerUserId": "46642", "LastEditorUserId": "-1", "PostTypeId": "2", "Id": "7508245", "Score": "4", "Body": "<p>First off, you cannot cast away constness:</p>\n<blockquote>\n<p id=\"so_7507818_7508245_0\">\u00a75.2.10p2. The <code>reinterpret_cast</code> operator shall not cast away constness (\u00a75.2.11). (...)</p>\n</blockquote>\n<p>So you need at least to write that as</p>\n<pre><code>operator iovec const*() const\n{\n    return reinterpret_cast&lt;iovec const*&gt;(this);\n}\n</code></pre>\n<p>or</p>\n<pre><code>operator iovec *()\n{\n    return reinterpret_cast&lt;iovec *&gt;(this);\n}\n</code></pre>\n<p>On top of that, you need to have both <code>Buffer</code> and <code>iovec</code> be standard-layout types, and <code>iovec</code> cannot have an alignment stricter (i.e. larger) than <code>Buffer</code>.</p>\n<blockquote>\n<p id=\"so_7507818_7508245_1\">\u00a75.2.10p7. An object pointer can be explicitly converted to an object pointer of\n  a different type. When a prvalue <code>v</code> of type \u201cpointer to <code>T1</code>\u201d is\n  converted to the type \u201cpointer to <em>cv</em> <code>T2</code>\u201d, the result is <code>static_cast&lt;cv T2*&gt;(static_cast&lt;cv void*&gt;(v))</code>\n  if both <code>T1</code> and <code>T2</code> are standard-layout\n  types (\u00a73.9) and the alignment requirements of <code>T2</code> are no stricter than\n  those of <code>T1</code>, or if either type is <code>void</code>. (...)</p>\n</blockquote>\n<p>You also need to be careful not to break the <a href=\"https://stackoverflow.com/q/98650/46642\">strict aliasing rules</a>: in general, you cannot use two pointers or references to different types that refer to the same memory location.</p>\n", "LastActivityDate": "2011-09-22T00:45:57.007"}, "bq_ids": {"n4140": {"so_7507818_7508245_1": {"section_id": 6046, "quality": 0.75, "length": 24}, "so_7507818_7508245_0": {"section_id": 6041, "quality": 0.625, "length": 5}}, "n3337": {"so_7507818_7508245_1": {"section_id": 5814, "quality": 0.90625, "length": 29}, "so_7507818_7508245_0": {"section_id": 5809, "quality": 0.625, "length": 5}}, "n4659": {"so_7507818_7508245_1": {"section_id": 7545, "quality": 0.71875, "length": 23}, "so_7507818_7508245_0": {"section_id": 7540, "quality": 0.625, "length": 5}}}, "7507818": {"CommentCount": "2", "ViewCount": "354", "PostTypeId": "1", "LastEditorUserId": "46642", "CreationDate": "2011-09-21T23:11:04.580", "LastActivityDate": "2011-09-22T00:45:57.007", "Title": "Standard layout type and reinterpret_cast", "AcceptedAnswerId": "7508245", "LastEditDate": "2011-09-22T00:41:37.973", "Id": "7507818", "Score": "1", "Body": "<p>Am I allowed to cast from my class to a structure if i have copied the members of the structure to my class?</p>\n<pre><code>#include &lt;stdint.h&gt;\n#include &lt;sys/uio.h&gt;\n\nclass Buffer\n{\npublic:\n    void * address;\n    size_t size;\n\n    Buffer(void * address = nullptr, size_t size = 0)\n        : address(address), size(size)\n    {\n    }\n\n    operator iovec *() const\n    {\n        // Cast this to iovec. Should work because of standard layout?\n        return reinterpret_cast&lt;iovec *&gt;(this);\n    }\n}\n</code></pre>\n", "Tags": "<c++><c++11><reinterpret-cast>", "OwnerUserId": "628696", "AnswerCount": "1"}});