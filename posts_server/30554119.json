post_cb({"30554119": {"CommentCount": "4", "ViewCount": "176", "PostTypeId": "1", "LastEditorUserId": "3093378", "CreationDate": "2015-05-31T05:18:33.850", "LastActivityDate": "2015-05-31T13:36:27.317", "Title": "Is typename required or not here?", "AcceptedAnswerId": "30554202", "LastEditDate": "2015-05-31T13:36:27.317", "Id": "30554119", "Score": "4", "Body": "<p>Consider the code:</p>\n<pre><code>#include &lt;memory&gt;\n\ntemplate &lt;class T, class Deleter = std::default_delete&lt;T&gt;&gt;\nclass unique_ptr_wrapper: public std::unique_ptr&lt;T, Deleter&gt;\n{\npublic:\n    using typename std::unique_ptr&lt;T, Deleter&gt;::unique_ptr;\n    operator T* () const {return this-&gt;get();}\n};\n\nint main()\n{\n    unique_ptr_wrapper&lt;int&gt; upw{new int{42}};\n}\n</code></pre>\n<p>g++5.1 compiles it fine, although clang++ complains </p>\n<blockquote>\n<p id=\"so_30554119_30554119_0\">error: typename is allowed for identifiers only</p>\n</blockquote>\n<p>I agree that we don't have an identifier here, so probably <code>typename</code> is not required. But is it actually forbidden? Is the compiler required to at least emit a diagnostic?</p>\n<p><strong>EDIT</strong> The code is compiled fine without <code>typename</code> by both g++ and clang++.</p>\n<hr>\n<p><strong>UPDATE</strong> It seems to be a g++ bug, I reported it <a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=66350\" rel=\"nofollow\">here</a>.</p>\n</hr>", "Tags": "<c++><templates><c++11><language-lawyer><typename>", "OwnerUserId": "3093378", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_30554119_30554202_4": {"section_id": 7114, "quality": 1.0, "length": 8}, "so_30554119_30554202_2": {"section_id": 171, "quality": 0.92, "length": 23}, "so_30554119_30554202_0": {"section_id": 482, "quality": 0.7777777777777778, "length": 7}, "so_30554119_30554202_3": {"section_id": 7114, "quality": 1.0, "length": 7}, "so_30554119_30554202_6": {"section_id": 7114, "quality": 1.0, "length": 5}, "so_30554119_30554202_5": {"section_id": 7114, "quality": 0.9285714285714286, "length": 13}, "so_30554119_30554202_1": {"section_id": 170, "quality": 0.84, "length": 21}}, "n3337": {"so_30554119_30554202_4": {"section_id": 6858, "quality": 1.0, "length": 8}, "so_30554119_30554202_2": {"section_id": 165, "quality": 0.92, "length": 23}, "so_30554119_30554202_0": {"section_id": 473, "quality": 0.7777777777777778, "length": 7}, "so_30554119_30554202_3": {"section_id": 574, "quality": 0.5714285714285714, "length": 4}, "so_30554119_30554202_6": {"section_id": 6858, "quality": 1.0, "length": 5}, "so_30554119_30554202_5": {"section_id": 6858, "quality": 0.9285714285714286, "length": 13}, "so_30554119_30554202_1": {"section_id": 164, "quality": 0.84, "length": 21}}, "n4659": {"so_30554119_30554202_4": {"section_id": 8615, "quality": 1.0, "length": 8}, "so_30554119_30554202_2": {"section_id": 176, "quality": 0.92, "length": 23}, "so_30554119_30554202_0": {"section_id": 6924, "quality": 0.5555555555555556, "length": 5}, "so_30554119_30554202_3": {"section_id": 8615, "quality": 1.0, "length": 7}, "so_30554119_30554202_6": {"section_id": 8615, "quality": 1.0, "length": 5}, "so_30554119_30554202_5": {"section_id": 8615, "quality": 0.9285714285714286, "length": 13}, "so_30554119_30554202_1": {"section_id": 175, "quality": 0.96, "length": 24}}}, "30554202": {"ParentId": "30554119", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>[class.inhctor]/p1, emphasis mine:</p>\n<blockquote>\n<p id=\"so_30554119_30554202_0\">A <em>using-declaration</em> (7.3.3) that <strong>names a constructor</strong> implicitly\n  declares a set of <em>inheriting constructors</em>.</p>\n</blockquote>\n<p>A constructor is not a type.</p>\n<p>[temp.res]/p3-4:</p>\n<blockquote>\n<p id=\"so_30554119_30554202_1\">3 When a <em>qualified-id</em> is intended to refer to a type that is not a\n  member of the current instantiation (14.6.2.1) and its\n  <em>nested-name-specifier</em> refers to a dependent type, it shall be prefixed by the keyword <code>typename</code>, forming a typename-specifier. If\n  the <em>qualified-id</em> in a <em>typename-specifier</em> does not denote a type,\n  the program is ill-formed.</p>\n<p id=\"so_30554119_30554202_2\">4 If a specialization of a template is instantiated for a set of\n  <em>template-arguments</em> such that the <em>qualified-id</em> prefixed by <code>typename</code> does not denote a type, the specialization is ill-formed.\n  The usual qualified name lookup (3.4.3) is used to find the\n  <em>qualified-id</em> even in the presence of <code>typename</code>.</p>\n</blockquote>\n<p>[class.qual]/p2:</p>\n<blockquote>\n<p id=\"so_30554119_30554202_3\">In a lookup in which function names are not ignored and the\n  <em>nested-name-specifier</em> nominates a class <code>C</code>:</p>\n<ul>\n<li><p id=\"so_30554119_30554202_4\">if the name specified after the <em>nested-name-specifier</em>, when looked up in <code>C</code>, is the <em>injected-class-name</em> of <code>C</code> (Clause 9), or</p></li>\n<li><p id=\"so_30554119_30554202_5\">in a <em>using-declaration</em> (7.3.3) that is a <em>member-declaration</em>, if the name specified after the <em>nested-name-specifier</em> is the same as\n  the <em>identifier</em> or the <em>simple-template-id</em>\u2019s <em>template-name</em> in the\n  last component of the <em>nested-name-specifier</em>,</p></li>\n</ul>\n<p id=\"so_30554119_30554202_6\">the name is instead considered to name the constructor of class <code>C</code>.</p>\n</blockquote>\n<p>Applying the \"usual qualified name lookup\" rules found in [class.qual], <code>std::unique_ptr&lt;T, Deleter&gt;::unique_ptr</code> names the constructor. It does not denote a type. Therefore, by the above quote from [temp.res], the program is ill-formed (with a diagnostic required).</p>\n<p>In other words, this appears to be a GCC bug (though Clang's error message could use some improvement too).</p>\n", "OwnerUserId": "2756719", "LastEditorUserId": "2756719", "LastEditDate": "2015-05-31T05:36:17.023", "Id": "30554202", "Score": "8", "CreationDate": "2015-05-31T05:33:37.557", "LastActivityDate": "2015-05-31T05:36:17.023"}});