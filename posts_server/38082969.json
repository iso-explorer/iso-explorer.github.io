post_cb({"38083521": {"ParentId": "38082969", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>From the working draft, <a href=\"http://eel.is/c++draft/dcl.init.aggr#5\" rel=\"nofollow\">[8.5.1/5]</a> (<em>Aggregates</em>):</p>\n<blockquote>\n<p id=\"so_38082969_38083521_0\">An empty initializer list\u00a0{}\u00a0shall not be used as the initializer-clause\u00a0for an array of unknown bound.</p>\n</blockquote>\n<p>See also <a href=\"http://eel.is/c++draft/dcl.init.aggr#footnote-105\" rel=\"nofollow\">[footnote/105]</a>:</p>\n<blockquote>\n<p id=\"so_38082969_38083521_1\">The syntax provides for empty\u00a0initializer-lists, but nonetheless C++ does not have zero length arrays.</p>\n</blockquote>\n<p>It sounds like an UB.</p>\n<hr>\n<p>Note also that this compiles as expected:</p>\n<pre><code>template&lt;int N&gt;\nvoid f(int(&amp;)[N]) { }\n\nint main() {\n    int v[] = {42};\n    f(v);\n}\n</code></pre>\n<p>But it doesn't work anymore if you use:</p>\n<pre><code>int v[] = {};\n</code></pre>\n<p>Tested with GCC.</p>\n</hr>", "OwnerUserId": "4987285", "LastEditorUserId": "4987285", "LastEditDate": "2016-06-29T17:33:41.223", "Id": "38083521", "Score": "2", "CreationDate": "2016-06-28T18:18:02.737", "LastActivityDate": "2016-06-29T17:33:41.223"}, "38082969": {"CommentCount": "3", "AcceptedAnswerId": "38083521", "PostTypeId": "1", "LastEditorUserId": "5090527", "CreationDate": "2016-06-28T17:47:07.087", "LastActivityDate": "2016-06-29T17:33:41.223", "LastEditDate": "2016-06-28T17:51:25.280", "ViewCount": "104", "FavoriteCount": "1", "Title": "Declaring empty C++ array with aggregate initializer", "Id": "38082969", "Score": "4", "Body": "<p>In C++, unlike in C, an empty array <code>T name[]</code> is illegal,</p>\n<blockquote>\n<p id=\"so_38082969_38082969_0\">the type declared is \"array of unknown bound of T\", which is a kind of incomplete type.</p>\n</blockquote>\n<p>However, it is legal when </p>\n<blockquote>\n<p id=\"so_38082969_38082969_1\">used in a declaration with an aggregate initializer </p>\n</blockquote>\n<p>like <code>T name[] = {val1, val2, ...}</code>, where the array is allocated with the number of elements in the initializer list.</p>\n<p>What is the expected behaviour when the aggregate initializer is empty? <code>T name[] = {}</code></p>\n<p>I have tested g++ (version 4.8.4) and clang (version 3.4), neither of which give any error or warning, and seem to allocate 1 element. Is this the defined behaviour? Documentation? </p>\n<pre><code>int a[] = {};\nint b[] = {};\n</code></pre>\n<p>Results in:</p>\n<pre><code>a[0] -&gt; 0x7ffc3de28dd8\na[1] -&gt; 0x7ffc3de28ddc\nb[0] -&gt; 0x7ffc3de28ddc\nb[1] -&gt; 0x7ffc3de28de0\n</code></pre>\n", "Tags": "<c++><arrays>", "OwnerUserId": "5090527", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_38082969_38083521_1": {"section_id": 3301, "quality": 0.9166666666666666, "length": 11}, "so_38082969_38082969_0": {"section_id": 202, "quality": 0.75, "length": 6}, "so_38082969_38083379_0": {"section_id": 5795, "quality": 0.96, "length": 24}, "so_38082969_38083521_0": {"section_id": 3301, "quality": 1.0, "length": 7}}, "n3337": {"so_38082969_38083521_1": {"section_id": 3171, "quality": 0.9166666666666666, "length": 11}, "so_38082969_38082969_0": {"section_id": 6948, "quality": 0.75, "length": 6}, "so_38082969_38083379_0": {"section_id": 5568, "quality": 0.96, "length": 24}, "so_38082969_38083521_0": {"section_id": 3171, "quality": 1.0, "length": 7}}, "n4659": {"so_38082969_38083521_1": {"section_id": 4067, "quality": 0.9166666666666666, "length": 11}, "so_38082969_38082969_0": {"section_id": 208, "quality": 0.75, "length": 6}, "so_38082969_38083379_0": {"section_id": 7254, "quality": 0.92, "length": 23}, "so_38082969_38083521_0": {"section_id": 4067, "quality": 1.0, "length": 7}}}, "38083379": {"ParentId": "38082969", "CommentCount": "0", "Body": "<p>According to the C++ standard 1.8.6 (C++ 14):</p>\n<blockquote>\n<p id=\"so_38082969_38083379_0\">Two objects that are not bit-fields may have the same address if one\n  is a subobject of the other, or if at least one is a base class\n  subobject of zero size and they are of different types; otherwise,\n  they shall have distinct addresses.4</p>\n</blockquote>\n<p>Compiler must allocate at least one element of your arrays to satisfy the above requirement.</p>\n", "OwnerUserId": "2126582", "PostTypeId": "2", "Id": "38083379", "Score": "2", "CreationDate": "2016-06-28T18:09:01.113", "LastActivityDate": "2016-06-28T18:09:01.113"}});