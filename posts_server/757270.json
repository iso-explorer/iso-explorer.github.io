post_cb({"757385": {"ParentId": "757270", "PostTypeId": "2", "CommentCount": "6", "CreationDate": "2009-04-16T18:13:37.110", "Score": "19", "LastEditorUserId": "63550", "LastEditDate": "2016-07-05T08:29:20.443", "Id": "757385", "OwnerUserId": "36565", "Body": "<p>Nice compiler error. For this type of checks I always fallback to the <a href=\"http://www.comeaucomputing.com/tryitout\" rel=\"nofollow noreferrer\">Comeau</a> compiler before going back to the standard and checking.</p>\n<blockquote>\n<p id=\"so_757270_757385_0\">Comeau C/C++ 4.3.10.1 (Oct  6 2008\n  11:28:09) for ONLINE_EVALUATION_BETA2\n  Copyright 1988-2008 Comeau Computing.\n  All rights reserved. MODE:strict\n  errors C++ C++0x_extensions</p>\n<p id=\"so_757270_757385_1\">\"ComeauTest.c\", line 3: error:\n  \"virtual\" is not allowed in a function\n  template\n            declaration\n        template  virtual void f();\n                           ^</p>\n<p id=\"so_757270_757385_2\">\"ComeauTest.c\", line 10: error:\n  \"virtual\" is not allowed in a function\n  template\n            declaration\n        template  virtual void f();\n     ^</p>\n</blockquote>\n<p>Now, as it has been posted by another user, the fact is that the standard does not allow you to define virtual templated methods. The rationale is that for all virtual methods, an entry must be reserved in the vtable. The problem is that template methods will only be defined when they have been instantiated (used). This means that the vtable would end up having a different number of elements in each compilation unit, depending on how many different calls to <em>f()</em> with different types happen. Then hell would be raised...</p>\n<p>If what you want is a templated function on one of its arguments and one specific version being virtual (note the part of the argument) you can do it:</p>\n<pre><code>class Base\n{\npublic:\n   template &lt;typename T&gt; void f( T a ) {}\n   virtual void f( int a ) { std::cout &lt;&lt; \"base\" &lt;&lt; std::endl; }\n};\nclass Derived : public Base\n{\npublic:\n   virtual void f( int a ) { std::cout &lt;&lt; \"derived\" &lt;&lt; std::endl; }\n};\nint main()\n{\n   Derived d;\n   Base&amp; b = d;\n   b.f( 5 ); // The compiler will prefer the non-templated method and print \"derived\"\n}\n</code></pre>\n<p>If you want this generalized for any type, then you are out of luck. Consider another type of delegation instead of polymorphism (aggregation + delegation could be a solution). More information on the problem at hand would help in determining a solution.</p>\n", "LastActivityDate": "2016-07-05T08:29:20.443"}, "757364": {"ParentId": "757270", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2009-04-16T18:08:47.653", "Score": "4", "LastEditorUserId": "63550", "LastEditDate": "2016-07-05T08:29:50.477", "Id": "757364", "OwnerUserId": "85936", "Body": "<p>According to <a href=\"http://www.kuzbass.ru:8086/docs/isocpp/template.html\" rel=\"nofollow noreferrer\">http://www.kuzbass.ru:8086/docs/isocpp/template.html</a> ISO/IEC 14882:1998:</p>\n<blockquote>\n<p id=\"so_757270_757364_0\">-3- A member function template shall not be virtual. </p>\n</blockquote>\n<p>Example:</p>\n<pre><code>template &lt;class T&gt; struct AA {\n    template &lt;class C&gt; virtual void g(C);   //  Error\n    virtual void f();                       //  OK\n};\n</code></pre>\n", "LastActivityDate": "2016-07-05T08:29:50.477"}, "13582766": {"ParentId": "757270", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2012-11-27T11:01:13.347", "Score": "1", "LastEditorUserId": "681231", "LastEditDate": "2012-11-27T21:19:50.510", "Id": "13582766", "OwnerUserId": "681231", "Body": "<p>As others have noted, this is not legal code because a member function template cannot be declared <code>virtual</code>.</p>\n<p>Yet even Visual Studio 2012 chokes on this:\n<img alt=\"C++ internal compiler error on Visual Studio 2012\" src=\"https://i.stack.imgur.com/WeWg2.png\">\n<a href=\"https://i.stack.imgur.com/WeWg2.png\" rel=\"nofollow noreferrer\"><em>Click here for full size</em></a></img></p>\n<p>Event logs indicate that the compiler crashed on <code>0xC0000005</code>, or <code>STATUS_ACCESS_VIOLATION</code>.  It's funny how a certain (illegal) code construct can make the compiler segfault...</p>\n", "LastActivityDate": "2012-11-27T21:19:50.510"}, "bq_ids": {"n4140": {"so_757270_757385_2": {"section_id": 47, "quality": 0.5454545454545454, "length": 6}, "so_757270_757385_1": {"section_id": 47, "quality": 0.5454545454545454, "length": 6}, "so_757270_757364_0": {"section_id": 112, "quality": 1.0, "length": 4}}, "n3337": {"so_757270_757364_0": {"section_id": 107, "quality": 1.0, "length": 4}}, "n4659": {"so_757270_757385_2": {"section_id": 48, "quality": 0.5454545454545454, "length": 6}, "so_757270_757385_1": {"section_id": 48, "quality": 0.5454545454545454, "length": 6}, "so_757270_757364_0": {"section_id": 116, "quality": 1.0, "length": 4}}}, "757270": {"CommentCount": "5", "AcceptedAnswerId": "757385", "PostTypeId": "1", "LastEditorUserId": "63550", "CreationDate": "2009-04-16T17:45:13.810", "LastActivityDate": "2016-07-05T08:29:50.477", "LastEditDate": "2016-07-05T08:17:53.073", "ViewCount": "4473", "FavoriteCount": "2", "Title": "Is making a function template specialization virtual legal?", "Id": "757270", "Score": "10", "Body": "<p>In C++, a function template specialization is supposed to act exactly like a normal function. Does that mean that I can make one virtual?</p>\n<p>For example:</p>\n<pre><code>struct A\n{\n    template &lt;class T&gt; void f();\n    template &lt;&gt; virtual void f&lt;int&gt;() {}\n};\n\nstruct B : A\n{\n    template &lt;class T&gt; void f();\n    template &lt;&gt; virtual void f&lt;int&gt;() {}\n};\n\nint main(int argc, char* argv[])\n{\n    B b;\n    A&amp; a = b;\n    a.f&lt;int&gt;();\n}\n</code></pre>\n<p><a href=\"http://en.wikipedia.org/wiki/Microsoft_Visual_Studio#Visual_Studio_2005\" rel=\"nofollow noreferrer\">Visual Studio 2005</a> gives me the following error:</p>\n<blockquote>\n<p id=\"so_757270_757270_0\">fatal error C1001: An internal error has occurred in the compiler.</p>\n</blockquote>\n", "Tags": "<c++><templates><virtual><specialization><c1001>", "OwnerUserId": "74350", "AnswerCount": "3"}});