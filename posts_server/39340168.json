post_cb({"39340168": {"CommentCount": "1", "ViewCount": "111", "CreationDate": "2016-09-06T03:20:52.853", "LastActivityDate": "2016-09-06T13:14:25.657", "Title": "Is it guaranteed that constructor is called exactly when the variable is defined?", "PostTypeId": "1", "Id": "39340168", "Score": "2", "Body": "<p>Consider the following code:</p>\n<pre><code>#include &lt;cstdio&gt;\n\nstruct A {\n  A() {\n    printf(\"Bar\\n\");\n  }\n};\n\nint main() {\n  printf(\"Foo\\n\");\n  A a;\n  return 0;\n}\n</code></pre>\n<p>Is it guaranteed that it will print <code>Foo\\nBar\\n</code>, in that order? My experience says \"yes\", but I want to have some quote from C++11 standard or MSDN reference to point to, because somebody told me that it's possible for compiler to call constructor before the actual line of declaration.</p>\n<p>It would be more obvious if the constructor had some arguments (because they can depend on values which are not computed when function starts), and less obvious if there was default constructor only. Say, JavaScript is famous for making variables defined before the <code>var</code> line available:</p>\n<pre><code>function main() {\n  console.log(x);\n  var x = 2;\n  console.log(y);\n}\nmain();\n</code></pre>\n<p>The code above will print <code>undefined</code> as value of <code>x</code> and then fail with <code>y is not defined</code>.</p>\n", "Tags": "<c++><c++11><constructor><standards><undefined-behavior>", "OwnerUserId": "767632", "AnswerCount": "5"}, "39342355": {"ParentId": "39340168", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2016-09-06T06:52:22.200", "Score": "1", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:32:47.810", "Id": "39342355", "OwnerUserId": "464581", "Body": "<p>There is a special rule about an atomatic variable of a type with constructors or destructors with side effects, such as this code's <code>a</code>: such a variable cannot be optimized away even if it's apparently unused.</p>\n<p>In C++14 (I'm using the N3936 draft) this is</p>\n<i>C++14 \u00a73.7.3/3 (basic.stc.auto/3):</i>\n<blockquote>\n<p id=\"so_39340168_39342355_0\"><strong>\u201d</strong> If a variable with automatic storage duration has initialization or a destructor with side effects, it shall not\n  be destroyed before the end of its block, nor shall it be eliminated as an optimization even if it appears to be unused, except that a class object or its copy/move may be eliminated as specified in 12.8.</p>\n</blockquote>\n<p>The wording was the same in C++03.</p>\n<p>Well, the nice thing about the standard is that it's often not quite 100% clear-cut, leaving room for discussions! Here we can read \u201c(initialization or a destructor) with side effects\u201d, or \u201cinitialization or (a destructor with side effects)\u201d. Thinking about what's <em>reasonable</em> it's clearly the first interpretation that is the intended meaning.</p>\n<hr>\n<p>Re</p>\n<blockquote>\n<p id=\"so_39340168_39342355_1\"><strong>\u201d</strong> Is it guaranteed that it will print <code>Foo\\nBar\\n</code>, in that order?</p>\n</blockquote>\n<p>Yes.</p>\n<p>The optimizations in C++ are constrained to yield the same visible effect as your source code's direct meaning, which is called the <strong>\u201cas-if\u201d rule</strong>.</p>\n\nC++14 \u00a71.9/1 (intro.execution/1):\n\n<blockquote>\n<p id=\"so_39340168_39342355_2\"><strong>\u201d</strong> The semantic descriptions in this International Standard define a parameterized nondeterministic abstract\n  machine. This International Standard places no requirement on the structure of conforming implementations. In particular, they need not copy or emulate the structure of the abstract machine. Rather, conforming implementations are required to emulate (only) the observable behavior of the abstract machine as explained below.</p>\n</blockquote>\n<p>The following paragraphs detail what that means, e.g. that all bets are off with Undefined Behavior in the picture.</p>\n<p>At the end of the above paragraph there is this non-normative footnote:</p>\n<blockquote>\n<p id=\"so_39340168_39342355_3\"><strong>\u201d</strong>  This provision is sometimes called the \u201cas-if\u201d rule, because an implementation is free to disregard any requirement of this International Standard as long as the result is as if the requirement had been obeyed, as far as can be determined from the observable behavior of the program. For instance, an actual implementation need not evaluate part of an expression if it can deduce that its value is not used and that no side effects affecting the observable behavior of the program are produced.</p>\n</blockquote>\n<p>Then, safe from optimizations, no UB here!, only the defined effects of the source need to be considered.</p>\n<p>And these defined effects are, as noted in <a href=\"https://stackoverflow.com/a/39340220/464581\">Igor's answer</a>, produced by two <strong>full-expressions</strong>, where the standard guarantees that all effects of the first one will be complete before the second one is executed.</p>\n<hr>\n<p>In other news:</p>\n<ul>\n<li><p>The <code>return 0;</code> in <code>main</code> is not needed, because that's the default for <code>main</code>.</p></li>\n<li><p>The program is formally not portable, because <code>&lt;cstdio&gt;</code> is not guaranteed to place <code>printf</code> in the global namespace. Include <code>&lt;stdio.h&gt;</code> instead. This is not the C header of the same name: it's a C++ header that has the same effect as <code>&lt;cstdio&gt;</code> except for which namespaces are guaranteed to be used.</p></li>\n</ul>\n</hr></hr>", "LastActivityDate": "2016-09-06T09:28:13.250"}, "39349955": {"ParentId": "39340168", "CommentCount": "0", "CreationDate": "2016-09-06T13:14:25.657", "OwnerUserId": "657412", "PostTypeId": "2", "Id": "39349955", "Score": "0", "Body": "<p>In short: There may be rules that allow compiler to elide construction or simply \"do things that won't have any observable difference\" - but well, what useful for you is the knowledge about things that you can't observe anyway?</p>\n<p>The only situation when it can make any difference are the <strong>global variables</strong>, but it's a little bit different story - the global variables don't have defined order of initialization. Variables that are local to the function are always \"runtime variables\", which means that they physically don't exist prior to declaration. Moreover, you can use variables declared earlier in the arguments for initialization of variables declared later - so the initialization order must be ensured at least in this case.</p>\n<p>May happen that a compiler can do stack allocation for all variables at once, then fill in all of them as needed. However local variables will be runtime-initialized anyway. I can imagine that you may observe something like reordered initialization in this situation:</p>\n<pre><code>int a = 0, b = 0;\nA ax;\nint c = 0, d = 0;\n</code></pre>\n<p>May happen that a compiler can decide to allocate a single stack frame for all these variables and clear the whole memory area under them - I doubt any compiler does, but at least there's nothing wrong with doing that. In this case you might observe that c contains zero before A::A() is called.</p>\n<p>This can be done because the assignment of 0 to c is runtime-independent, so it could be done earlier than it seems to be. However, this variable theoretically shouldn't exist before A::A() is called, so what is really cleared from the language point of view is some stack memory not yet assigned to variable's symbols.</p>\n<p>If you ask for any observable side effect - yes, it is guaranteed that all observable results (not only side effects) of local variable initialization are exactly such as when the variables are being constructed exactly in the order in which they were declared (moreover, they are being \"destructed\" in the reverse order).</p>\n", "LastActivityDate": "2016-09-06T13:14:25.657"}, "39340327": {"ParentId": "39340168", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2016-09-06T03:44:56.447", "Score": "5", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:08:23.347", "Id": "39340327", "OwnerUserId": "1084944", "Body": "<p>You are guaranteed that this program will output <code>Foo\\nBar\\n</code>.</p>\n<p>However, that's all you're guaranteed. That's the behavior your program will display, but by the <a href=\"https://stackoverflow.com/questions/15718262/what-exactly-is-the-as-if-rule\">as-if rule</a>, you aren't guaranteed anything about <em>how</em> that behavior is accomplished. You have no guarantees about when the constructor gets called, or even <em>if</em> the constructor gets called. Your program's executable code might not even have a constructor in it at all! You're not even guaranteed that the variable <code>a</code> exists somewhere in the program.</p>\n<p>And that's not theoretical; if your compiler is worth anything at all, with optimizations turned on your program should compile to <em>exactly</em> the same thing as does the program</p>\n<pre><code>#include &lt;cstdio&gt;\nint main() {\n    std::printf(\"Foo\\n\");\n    std::printf(\"Bar\\n\");\n    return 0;\n}\n</code></pre>\n", "LastActivityDate": "2016-09-06T03:44:56.447"}, "39340215": {"ParentId": "39340168", "CommentCount": "0", "CreationDate": "2016-09-06T03:28:26.730", "OwnerUserId": "434551", "PostTypeId": "2", "Id": "39340215", "Score": "6", "Body": "<blockquote>\n<p id=\"so_39340168_39340215_0\">because somebody told me that it's possible for compiler to call constructor before the actual line of declaration.</p>\n</blockquote>\n<p>The compiler has the freedom to do that only if it can prove that <em>the observable behavior</em> of the program will not change by doing that. In your case, that is not true. Hence, a conforming compiler will not call the constructor before the line of declaration.</p>\n", "LastActivityDate": "2016-09-06T03:28:26.730"}, "39340220": {"ParentId": "39340168", "CommentCount": "0", "CreationDate": "2016-09-06T03:28:59.483", "OwnerUserId": "1670129", "PostTypeId": "2", "Id": "39340220", "Score": "7", "Body": "<blockquote>\n<p id=\"so_39340168_39340220_0\"><strong>[intro.execution]/10</strong> A <em>full-expression</em> is an expression that is not a subexpression of another expression. [ <em>Note:</em> in some contexts,\n  such as unevaluated operands, a syntactic subexpression is considered a full-expression (Clause 5). <em>\u2014end\n  note</em> ] If a language construct is defined to produce an implicit call of a function, a use of the language\n  construct is considered to be an expression for the purposes of this definition.</p>\n</blockquote>\n<p>.</p>\n<blockquote>\n<p id=\"so_39340168_39340220_1\"><strong>[intro.execution]/14</strong> Every value computation and side effect associated with a full-expression is sequenced before every value computation and side effect associated with the next full-expression to be evaluated.</p>\n</blockquote>\n", "LastActivityDate": "2016-09-06T03:28:59.483"}, "bq_ids": {"n4140": {"so_39340168_39342355_0": {"section_id": 7172, "quality": 0.9642857142857143, "length": 27}, "so_39340168_39342355_3": {"section_id": 5797, "quality": 0.9285714285714286, "length": 39}, "so_39340168_39340220_0": {"section_id": 5806, "quality": 0.8387096774193549, "length": 26}, "so_39340168_39340220_1": {"section_id": 5810, "quality": 0.9473684210526315, "length": 18}, "so_39340168_39342355_2": {"section_id": 5797, "quality": 0.8918918918918919, "length": 33}}, "n3337": {"so_39340168_39342355_0": {"section_id": 6916, "quality": 0.9642857142857143, "length": 27}, "so_39340168_39342355_3": {"section_id": 5570, "quality": 0.9285714285714286, "length": 39}, "so_39340168_39340220_0": {"section_id": 5579, "quality": 0.5483870967741935, "length": 17}, "so_39340168_39340220_1": {"section_id": 5583, "quality": 0.9473684210526315, "length": 18}, "so_39340168_39342355_2": {"section_id": 5570, "quality": 0.8918918918918919, "length": 33}}, "n4659": {"so_39340168_39342355_0": {"section_id": 8680, "quality": 0.8928571428571429, "length": 25}, "so_39340168_39342355_3": {"section_id": 7256, "quality": 0.9285714285714286, "length": 39}, "so_39340168_39340220_0": {"section_id": 7267, "quality": 0.5806451612903226, "length": 18}, "so_39340168_39340220_1": {"section_id": 7271, "quality": 0.9473684210526315, "length": 18}, "so_39340168_39342355_2": {"section_id": 7256, "quality": 0.8918918918918919, "length": 33}}}});