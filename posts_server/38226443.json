post_cb({"38227096": {"Id": "38227096", "PostTypeId": "2", "Body": "<p>It's well defined.</p>\n<p>From the standard: <a href=\"http://eel.is/c++draft/class.temporary#6\" rel=\"nofollow\">$12.2/6 Temporary objects [class.temporary]</a>:</p>\n<p>(emphasis mine)</p>\n<blockquote>\n<p id=\"so_38226443_38227096_0\">The temporary to which the reference is bound or the temporary that is\n  <strong>the complete object of a subobject</strong> to which the reference is bound\n  persists for the lifetime of the reference</p>\n</blockquote>\n<p>And about the <strong>subobect</strong>, <a href=\"http://eel.is/c++draft/intro.object#2\" rel=\"nofollow\">$1.8/2 The C++ object model [intro.object]</a>:</p>\n<p>(emphasis mine)</p>\n<blockquote>\n<p id=\"so_38226443_38227096_1\">Objects can contain other objects, called subobjects. A subobject can\n  be a <strong>member subobject</strong> ([class.mem]), a base class subobject (Clause\n  [class.derived]), or an array element. An object that is not a subobject of any other object is called a <strong>complete object</strong>.</p>\n</blockquote>\n<p><code>first</code> is bound to reference and it's the member subobject of <code>std::pair</code>, so the temporary <code>std::pair</code> (i.e. the complete object) 's lifetime will be prolonged, the code should be fine.</p>\n<p>For reference only: <a href=\"http://rextester.com/KALS93945\" rel=\"nofollow\">Clang</a> and <a href=\"http://coliru.stacked-crooked.com/a/3019db9cfe3c75e2\" rel=\"nofollow\">GCC</a> say yes, <a href=\"http://rextester.com/TRYA5706\" rel=\"nofollow\">VC</a> says no.</p>\n", "LastEditorUserId": "3309790", "LastActivityDate": "2016-07-06T15:38:48.383", "Score": "6", "CreationDate": "2016-07-06T14:51:40.113", "ParentId": "38226443", "CommentCount": "5", "OwnerUserId": "3309790", "LastEditDate": "2016-07-06T15:38:48.383"}, "bq_ids": {"n4140": {"so_38226443_38226948_3": {"length": 12, "quality": 0.9230769230769231, "section_id": 382}, "so_38226443_38226948_2": {"length": 10, "quality": 0.9090909090909091, "section_id": 382}, "so_38226443_38226983_1": {"length": 18, "quality": 0.9, "section_id": 382}, "so_38226443_38226983_0": {"length": 36, "quality": 0.972972972972973, "section_id": 381}, "so_38226443_38226931_1": {"length": 19, "quality": 0.9047619047619048, "section_id": 382}, "so_38226443_38226948_1": {"length": 19, "quality": 0.9047619047619048, "section_id": 382}, "so_38226443_38226983_2": {"length": 20, "quality": 0.8333333333333334, "section_id": 5791}, "so_38226443_38227096_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 382}, "so_38226443_38226931_0": {"length": 11, "quality": 0.6470588235294118, "section_id": 381}, "so_38226443_38227096_1": {"length": 20, "quality": 0.7692307692307693, "section_id": 5791}}, "n3337": {"so_38226443_38226948_3": {"length": 12, "quality": 0.9230769230769231, "section_id": 373}, "so_38226443_38226948_2": {"length": 10, "quality": 0.9090909090909091, "section_id": 373}, "so_38226443_38226983_2": {"length": 20, "quality": 0.8333333333333334, "section_id": 5564}, "so_38226443_38226983_0": {"length": 36, "quality": 0.972972972972973, "section_id": 372}, "so_38226443_38226983_1": {"length": 18, "quality": 0.9, "section_id": 373}, "so_38226443_38226948_1": {"length": 19, "quality": 0.9047619047619048, "section_id": 373}, "so_38226443_38226931_0": {"length": 11, "quality": 0.6470588235294118, "section_id": 372}, "so_38226443_38226931_1": {"length": 19, "quality": 0.9047619047619048, "section_id": 373}, "so_38226443_38227096_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 373}, "so_38226443_38227096_1": {"length": 20, "quality": 0.7692307692307693, "section_id": 5564}}, "n4659": {"so_38226443_38226948_3": {"length": 12, "quality": 0.9230769230769231, "section_id": 397}, "so_38226443_38226983_2": {"length": 20, "quality": 0.8333333333333334, "section_id": 7248}, "so_38226443_38226983_0": {"length": 35, "quality": 0.9459459459459459, "section_id": 396}, "so_38226443_38226983_1": {"length": 17, "quality": 0.85, "section_id": 397}, "so_38226443_38227096_1": {"length": 20, "quality": 0.7692307692307693, "section_id": 7248}, "so_38226443_38226931_1": {"length": 18, "quality": 0.8571428571428571, "section_id": 397}, "so_38226443_38227096_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 397}, "so_38226443_38226931_0": {"length": 10, "quality": 0.5882352941176471, "section_id": 396}, "so_38226443_38226948_1": {"length": 18, "quality": 0.8571428571428571, "section_id": 397}}}, "38226948": {"Id": "38226948", "PostTypeId": "2", "Body": "<p>As I mentioned in my comment:</p>\n<blockquote>\n<p id=\"so_38226443_38226948_0\">The lifetime of the temporary should be prolonged as long as the\n  lifetime of its member access (str in this case). That said, you\n  should be just ok by taking return value by copy. RVO will avoid doing\n  extra copies.</p>\n</blockquote>\n<p>From the standard, section 12.2.5:</p>\n<blockquote>\n<p id=\"so_38226443_38226948_1\">The second context is when a reference is bound to a temporary. The\n  temporary to which the reference is bound or the temporary that is the\n  complete object of a subobject to which the reference is bound\n  persists for the lifetime of the reference except:</p>\n<p id=\"so_38226443_38226948_2\">\u2014 A temporary bound to a reference member in a constructor\u2019s\n  ctor-initializer (12.6.2) persists until the constructor exits.</p>\n<p id=\"so_38226443_38226948_3\">\u2014 A temporary bound to a reference parameter in a function call\n  (5.2.2) persists until the completion of the full-expression\n  containing the call.</p>\n</blockquote>\n<p>To stay clear out of any trouble, I would rather do:</p>\n<pre><code>auto m_p = getPair(x);\n</code></pre>\n<p>This is as efficient as it can get because of <code>RVO</code> which every compiler must be doing for this case.</p>\n", "LastActivityDate": "2016-07-06T14:45:05.193", "CommentCount": "5", "CreationDate": "2016-07-06T14:45:05.193", "ParentId": "38226443", "Score": "2", "OwnerUserId": "434233"}, "38226443": {"ViewCount": "646", "Body": "<p>It is <a href=\"https://herbsutter.com/2008/01/01/gotw-88-a-candidate-for-the-most-important-const/\" rel=\"nofollow\">known feature</a> of C++ that a const reference extends the life time of the temporary object returned from a function, but is it acceptable to use constant reference to the member of the temporary object returned from the function?</p>\n<p><strong>Example:</strong></p>\n<pre><code>#include &lt;string&gt;\n\nstd::pair&lt;std::string, int&gt; getPair(int n)\n{\n    return {std::to_string(n), n};\n}\n\nint main(int, char*[])\n{\n    const int x = 123456;\n    const auto&amp; str = getPair(x).first;\n    printf(\"%d = %s\\n\", x, str.c_str());    \n    return 0;\n}\n</code></pre>\n<p><strong>Output:</strong></p>\n<pre><code>123456 = 123456\n</code></pre>\n", "AcceptedAnswerId": "38226983", "Title": "const reference to member of temporary object", "CreationDate": "2016-07-06T14:22:59.710", "Id": "38226443", "CommentCount": "4", "FavoriteCount": "3", "PostTypeId": "1", "LastEditDate": "2016-07-06T17:01:10.293", "LastEditorUserId": "3309790", "LastActivityDate": "2016-07-06T17:01:10.293", "ClosedDate": "2016-07-06T16:02:24.553", "Score": "17", "OwnerUserId": "1109334", "Tags": "<c++><c++11><reference><const><language-lawyer>", "AnswerCount": "4"}, "38226983": {"Id": "38226983", "PostTypeId": "2", "Body": "<p>Yes, this code is perfectly acceptable. The rules, according to the standard are ([class.temporary]):</p>\n<blockquote>\n<ol start=\"4\">\n<li><p id=\"so_38226443_38226983_0\">There are two contexts in which temporaries are destroyed at a\n  different point than the end of the fullexpression. The first context\n  is when a default constructor is called to initialize an element of an\n  array. If the constructor has one or more default arguments, the\n  destruction of every temporary created in a default argument is\n  sequenced before the construction of the next array element, if any. </p></li>\n<li><p id=\"so_38226443_38226983_1\">The second context is when a reference is bound to a temporary. The\n  temporary to which the reference is bound or <strong>the temporary that is the\n  complete object of a subobject to which the reference is bound</strong>\n  persists for the lifetime of the reference...</p></li>\n</ol>\n</blockquote>\n<p>As you can see the highlighted line makes it clear that binding reference to sub-objects is acceptable, as the complete object has to have its lifetime extended as well.</p>\n<p>Note that <code>first</code> does qualify as a subobject [intro.object]:</p>\n<blockquote id=\"so_38226443_38226983_2\">\n<ol start=\"2\">\n<li>Objects can contain other objects, called subobjects. A subobject can\n  be a member subobject (9.2), a base class subobject (Clause 10), or an\n  array element. An object that is not a subobject of any other object\n  is called a complete object.</li>\n</ol>\n</blockquote>\n", "LastEditorUserId": "6255513", "LastActivityDate": "2016-07-06T14:51:20.270", "Score": "11", "CreationDate": "2016-07-06T14:46:18.143", "ParentId": "38226443", "CommentCount": "20", "OwnerUserId": "6255513", "LastEditDate": "2016-07-06T14:51:20.270"}, "38226931": {"Id": "38226931", "PostTypeId": "2", "Body": "<p>This seems addressed in 12.2/4-5:</p>\n<blockquote>\n<p id=\"so_38226443_38226931_0\">There are two contexts in which temporaries are destroyed at a\n  different point than the end of the full expression. The first\n  context... [stuff dealing with arrays]</p>\n<p id=\"so_38226443_38226931_1\">The second context is when a reference is bound to a temporary. The\n  temporary to which the reference is bound or the temporary that is the\n  complete object of a subobject to which the reference is bound\n  persists for the lifetime of the reference except:</p>\n</blockquote>\n<p>There are four exceptions dealing with constructor binding of reference members, function calls, functions returning by reference, and references bound in new-initializers.</p>\n<p>None of these cases apply, so the temporary is destroyed at the end of the full statement, leaving a dangling reference to a member of the temporary.</p>\n<p>Just help the compiler realize it can move from the temporary: <code>const auto str = std::move(getPair(x).first);</code></p>\n", "LastActivityDate": "2016-07-06T14:44:31.113", "CommentCount": "0", "CreationDate": "2016-07-06T14:44:31.113", "ParentId": "38226443", "Score": "-1", "OwnerUserId": "251738"}});