post_cb({"bq_ids": {"n4140": {"so_35449320_35449495_3": {"length": 33, "quality": 0.868421052631579, "section_id": 3291}, "so_35449320_35449495_5": {"length": 4, "quality": 0.8, "section_id": 3305}}, "n3337": {"so_35449320_35449495_5": {"length": 4, "quality": 0.8, "section_id": 3175}}, "n4659": {"so_35449320_35449495_3": {"length": 33, "quality": 0.868421052631579, "section_id": 4053}, "so_35449320_35449495_5": {"length": 4, "quality": 0.8, "section_id": 502}}}, "35449495": {"Id": "35449495", "PostTypeId": "2", "Body": "<p>For your 1st question</p>\n<blockquote>\n<p id=\"so_35449320_35449495_0\">both Displacement members of MyStruct have been initialized with garbage.</p>\n<p id=\"so_35449320_35449495_1\">(from comment) There should be a default CTOR for Displacement defined by the compiler which should be called in the CTOR of MyStruct that I have defined, right?</p>\n</blockquote>\n<p>The <a href=\"http://en.cppreference.com/w/cpp/language/default_constructor\" rel=\"nofollow\">implicitly-defined default constructor</a> won't do anything here. </p>\n<blockquote>\n<p id=\"so_35449320_35449495_2\">If the implicitly-declared default constructor is not defined as deleted, it is defined (that is, a function body is generated and compiled) by the compiler, and it has exactly the same effect as a user-defined constructor with empty body and empty initializer list. That is, it calls the default constructors of the bases and of the non-static members of this class.</p>\n</blockquote>\n<p>And for <code>MyStruct obj{2, 2};</code>, <code>obj</code> is an automatic object, so (from standard $8.5/12 Initializers [dcl.init])</p>\n<blockquote>\n<p id=\"so_35449320_35449495_3\">If no initializer is specified for an object, the object is default-initialized. When storage for an object\n  with automatic or dynamic storage duration is obtained, the object has an <strong>indeterminate value</strong>, and if\n  no initialization is performed for the object, that object retains an indeterminate value until that value is\n  replaced (5.18). [ Note: Objects with static or thread storage duration are zero-initialized, see 3.6.2. \u2014\n  end note ]</p>\n</blockquote>\n<p>You might want to initialize them as</p>\n<pre><code>MyStruct obj{2, 2, {false, 0}, {false, 0}};\n</code></pre>\n<p>For your 2nd question</p>\n<blockquote>\n<p id=\"so_35449320_35449495_4\">I don't know aggregate initialization or list-initialization stopped working for a POD struct when I have defined the default CTOR.</p>\n</blockquote>\n<p>Yes it does, unless you provide another ctor which takes <a href=\"http://en.cppreference.com/w/cpp/utility/initializer_list\" rel=\"nofollow\">std::initializer_list</a> as its parameter. See <a href=\"http://en.cppreference.com/w/cpp/language/aggregate_initialization\" rel=\"nofollow\">aggregate initialization</a></p>\n<blockquote>\n<p id=\"so_35449320_35449495_5\">An aggregate is an object of the type that is one of the following</p>\n<pre><code>array type  \nclass type (typically, struct or union), that has  \n    no private or protected non-static data members\n    no user-provided constructors (explicitly defaulted or deleted constructors are allowed) (since C++11)\n    no base classes\n    no virtual member functions \n    no default member initializers (since C++11) (until C++14)\n</code></pre>\n</blockquote>\n", "LastEditorUserId": "3309790", "LastActivityDate": "2016-02-17T07:17:06.377", "Score": "2", "CreationDate": "2016-02-17T06:32:50.940", "ParentId": "35449320", "CommentCount": "4", "OwnerUserId": "3309790", "LastEditDate": "2016-02-17T07:17:06.377"}, "35449373": {"Id": "35449373", "PostTypeId": "2", "Body": "<p>If you have a constructor that is called you need to explicitly initialize all members, or they will be uninitialized. Uninitialized members will have <em>indeterminate</em> values which is what you perceive as garbage. That's how C++ work when you have constructors.</p>\n<p>From <a href=\"http://en.cppreference.com/w/cpp/language/default_constructor#Implicitly-defined_default_constructor\" rel=\"nofollow\">this implicit default constructor reference</a>:</p>\n<blockquote>\n<p id=\"so_35449320_35449373_0\">If the implicitly-declared default constructor is not defined as deleted, it is defined ... by the compiler, and it has exactly the same effect as a user-defined constructor with empty body and empty initializer list. That is, it calls the default constructors of the bases and of the non-static members of this class.</p>\n</blockquote>\n<p>Built-in or aggregate types have no constructor, and so can't be constructed or initialized without an explicit initialization.</p>\n", "LastEditorUserId": "440558", "LastActivityDate": "2016-02-17T06:36:06.153", "Score": "2", "CreationDate": "2016-02-17T06:26:15.917", "ParentId": "35449320", "CommentCount": "2", "OwnerUserId": "440558", "LastEditDate": "2016-02-17T06:36:06.153"}, "35449440": {"Id": "35449440", "PostTypeId": "2", "Body": "<p>Your struct is no longer a <a href=\"http://en.cppreference.com/w/cpp/concept/PODType\" rel=\"nofollow\">POD type</a> when you add a default constructor. Among other things, a POD type must have a <a href=\"http://en.cppreference.com/w/cpp/language/default_constructor#Trivial_default_constructor\" rel=\"nofollow\">trivial default constructor</a>.</p>\n<p>You need to add a constructor that takes two arguments for your code to start working again. Also note that the default constructor does not 0-initialize members. The reason it worked before with the POD type is that doing aggregate initialization (which only works with POD types) defaults members not explicitly initialized to 0.</p>\n", "LastActivityDate": "2016-02-17T06:30:39.660", "CommentCount": "0", "CreationDate": "2016-02-17T06:30:39.660", "ParentId": "35449320", "Score": "1", "OwnerUserId": "459615"}, "35449320": {"ViewCount": "138", "Body": "<p>I have had the following structure:</p>\n<pre><code>struct MyStruct\n{\n    struct Displacement\n    {\n        bool            isWrapped;\n        int             steps;\n    };\n\n    int                     initialDuration;\n    int                     currentDuration;\n    Displacement            displacement1;\n    Displacement            displacement2;\n};\n</code></pre>\n<p>And I was using it like this: </p>\n<pre><code>MyStruct obj{2, 2};\nauto shared = std::make_shared&lt;MyStruct&gt;(obj);\n</code></pre>\n<p>The problem was that I needed to duplicate first two arguments as <code>initialDuration</code> and <code>currentDuration</code> should be the same when a new object is created. Therefore I have created a CTOR:</p>\n<pre><code>struct MyStruct\n{\n    struct Displacement\n    {\n        bool            isWrapped;\n        int             steps;\n    };\n\n    MyStruct(int duration) \n          : initialDuration(duration)\n          , currentDuration(duration)\n    {\n    }\n\n    int                     initialDuration;\n    int                     currentDuration;\n    Displacement            displacement1;\n    Displacement            displacement2;\n};\n</code></pre>\n<p>and then used like this:</p>\n<pre><code>    auto shared = std::make_shared&lt;MyStruct&gt;(2);\n</code></pre>\n<p><strong>The unexpected thing 1 is:</strong> both <code>Displacement</code> members of <code>MyStruct</code> have been initialized with garbage. For one the <code>bool</code> member of <code>true</code>, for the other one - <code>false</code> and <code>int</code>s were some arbitrary numbers.</p>\n<p>So though maybe I need to define CTOR for <code>Displacement</code> too. Defined like this:</p>\n<pre><code>    struct Displacement\n    {\n        Displacement() : isWrapped(false), steps(0) {}\n\n        bool            isWrapped;\n        int             steps;\n    };\n</code></pre>\n<p><strong>The unexpected thing 2 is:</strong> that somewhere else </p>\n<pre><code>  MyStruct::Displacement d {false, 0}; \n</code></pre>\n<p>started to not compile. I don't know <a href=\"http://en.cppreference.com/w/cpp/language/aggregate_initialization\" rel=\"nofollow\">aggregate initialization</a> or <a href=\"http://en.cppreference.com/w/cpp/language/list_initialization\" rel=\"nofollow\">list-initialization</a> stopped working for a POD struct when I have defined the default CTOR.</p>\n<p>Please explain the reasons of those 2 behaviours.</p>\n", "AcceptedAnswerId": "35449495", "Title": "C++ object construction with garbage, why?", "CreationDate": "2016-02-17T06:22:04.633", "Id": "35449320", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2016-02-17T07:17:06.377", "Score": "2", "OwnerUserId": "163394", "Tags": "<c++><c++11>", "AnswerCount": "3"}});