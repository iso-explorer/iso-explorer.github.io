post_cb({"bq_ids": {"n4140": {"so_16714595_16714670_0": {"length": 10, "quality": 0.9090909090909091, "section_id": 382}}, "n3337": {"so_16714595_16714670_0": {"length": 10, "quality": 0.9090909090909091, "section_id": 373}}}, "16714670": {"PostTypeId": "2", "Body": "<p>That is because you are dereferencing a dangling reference, which gives your program undefined behavior. Per paragraph 12.2/5 of the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_16714595_16714670_0\">[...] A temporary bound to a reference member in a constructor\u2019s ctor-initializer (12.6.2) persists until the\n  constructor exits. [...]</p>\n</blockquote>\n<p>That means the temporary <code>std::string</code> object to which <code>str</code> is bound in the constructor's initialization list will be dead by the time you dererefence <code>str</code>.</p>\n<p>You have two ways out of this. Either make your data member <code>str</code> a <code>const char*</code>, or make it an <code>std::string</code> (not a reference type). I would personally go for the last option:</p>\n<pre><code>class A\n{\npublic:\n    A() : str(\"test\") { }\n    std::string str;\n};\n</code></pre>\n<p>Also notice, that you don't need a semicolon after <em>function</em> definitions.</p>\n", "LastActivityDate": "2013-05-23T13:07:11.000", "LastEditorUserId": "1932150", "Id": "16714670", "CommentCount": "5", "CreationDate": "2013-05-23T13:02:05.227", "ParentId": "16714595", "Score": "11", "OwnerUserId": "1932150", "LastEditDate": "2013-05-23T13:07:11.000"}, "16714671": {"PostTypeId": "2", "Body": "<p>You bind <code>str</code> reference to a temporary <code>std::string</code> that vanishes when the constructor exits.</p>\n", "LastActivityDate": "2013-05-23T13:02:08.823", "Id": "16714671", "CommentCount": "0", "CreationDate": "2013-05-23T13:02:08.823", "ParentId": "16714595", "Score": "1", "OwnerUserId": "759253"}, "16714675": {"PostTypeId": "2", "Body": "<p>Initializing a <code>string &amp;</code> requires a <code>string</code> and you are providing a <code>const char *</code>.  The compiler generates a temporary <code>string</code>, initializes the <code>string &amp;</code> and then destroys the <code>string</code> leaving you with undefined behavior when you try to use the reference.</p>\n", "LastActivityDate": "2013-05-23T13:02:12.580", "Id": "16714675", "CommentCount": "0", "CreationDate": "2013-05-23T13:02:12.580", "ParentId": "16714595", "Score": "2", "OwnerUserId": "637801"}, "16714595": {"ViewCount": "83", "Body": "<p>In one of my project, i initialized a const std::string&amp; with a const char (know at compile time), and the result of print it was ... surprising.</p>\n<p>I use gcc version 4.6.3 (Ubuntu/Linaro 4.6.3-1ubuntu5)  on Ubuntu 12.04x32</p>\n<p>Exemple:</p>\n<pre><code>#include &lt;string&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\nclass A\n{\n    public:\n        A() : str(\"test\"){};\n    const string&amp; str;\n};\n\nint main(int argc,char* argv[])\n{ \n  A a;\n  cout&lt;&lt;a.str&lt;&lt;endl;\n  return 0;\n};\n</code></pre>\n<p>So, normaly, it will show \"test\" but, this is a prt of the output I have:</p>\n<pre><code>testP\ufffd\ufffd\ufffd\ufffd\ufffdutf8)\ufffd\ufffd\ufffd\ufffdlower_case_table_names\ufffdxW\ufffdxW\ufffd \ufffd\ufffd     \ufffd\ufffd\ufffd\ufffd127.0.0.1utf8W\ufffdY127.0.0.1 via TCP/IP127.0.0.1\n        \ufffd5.5.31-0ubuntu0.12.04.1rootW\ufffdrootW\ufffd1\ufffd\ufffd\ufffd\ufffdmetadata_use_info_schema!P\ufffdXP\ufffd\ufffd VARa\u0621pW\ufffdP4:\ufffd\ufffd\ufffd\ufffdSHOW SESSION VARIABLES LIKE 'lower_case_table_names'`(\ufffd\ufffd\ufffdTCP/IP (3)@!K!K!\ufffd\n.....\n&lt;charset name=\"gb2312\"&gt;\n  &lt;family&gt;Simplified Chinese&lt;/family&gt;\n  &lt;description&gt;GB2312 Simplified Chinese&lt;/description&gt;\n  &lt;alias&gt;chinese&lt;/alias&gt;\n  &lt;alias&gt;iso-ir-58&lt;/alias&gt;\n   &lt;collation name=\"gb2312_chinese_ci\"  id=\"24\" order=\"Chinese\"&gt;\n    &lt;flag&gt;primary&lt;/flag&gt;\n   &lt;flag&gt;compiled&lt;/flag&gt;\n  &lt;/collation&gt;\n  &lt;collation name=\"gb2312_bin\"  id=\"86\"&gt;\n    &lt;flag&gt;binary&lt;/flag&gt;\n    &lt;flag&gt;compiled&lt;/flag&gt;\n  &lt;/collation&gt;\n&lt;/charset&gt;\n</code></pre>\n<p>the output continu for 1000 lines.</p>\n<p>So my question is simple: WHY? (I try to add a \\0 at the end of \"test\", but no change)</p>\n", "AcceptedAnswerId": "16714670", "Title": "very strange output with const ref initialise", "CreationDate": "2013-05-23T12:58:32.497", "Id": "16714595", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2013-05-23T13:07:11.000", "Score": "1", "OwnerUserId": "1930466", "Tags": "<c++><gcc>", "AnswerCount": "3"}});