post_cb({"34030309": {"CommentCount": "0", "ViewCount": "362", "CreationDate": "2015-12-01T21:15:18.530", "LastActivityDate": "2015-12-01T21:25:21.660", "Title": "C++ Does typeid return string type?", "AcceptedAnswerId": "34030360", "PostTypeId": "1", "Id": "34030309", "Score": "0", "Body": "<p>When we use typeid i.e typeid(variable).name() \nDoes it give out string as the output because if it does it could be helpful in comparisons with strings.</p>\n", "Tags": "<c++>", "OwnerUserId": "5627572", "AnswerCount": "3"}, "34030479": {"ParentId": "34030309", "CommentCount": "3", "Body": "<p><code>typeid(variable).name()</code> <a href=\"http://en.cppreference.com/w/cpp/header/typeinfo\" rel=\"nofollow\">returns</a> a pointer a null terminated string, which can be compared using <code>strcmp()</code>. However a better way to check a type of variable is</p>\n<pre><code> if (typeid(a) == typeid(int)) \n</code></pre>\n", "OwnerUserId": "3421814", "PostTypeId": "2", "Id": "34030479", "Score": "0", "CreationDate": "2015-12-01T21:25:21.660", "LastActivityDate": "2015-12-01T21:25:21.660"}, "34030421": {"ParentId": "34030309", "CommentCount": "0", "Body": "<p>I'm getting Ss when I try this.</p>\n<pre><code>#include &lt;string&gt;\n#include &lt;typeinfo&gt;\n#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main(int argc, char** argv) {\n    string str = \"string\";\n    cout &lt;&lt; typeid(str).name();\n    return 0;\n}\n</code></pre>\n<p>Try it: <a href=\"http://cpp.sh/4lsw\" rel=\"nofollow\">http://cpp.sh/4lsw</a></p>\n", "OwnerUserId": "2823472", "PostTypeId": "2", "Id": "34030421", "Score": "0", "CreationDate": "2015-12-01T21:21:51.767", "LastActivityDate": "2015-12-01T21:21:51.767"}, "bq_ids": {"n4140": {"so_34030309_34030360_1": {"section_id": 2579, "quality": 1.0, "length": 5}, "so_34030309_34030360_3": {"section_id": 6894, "quality": 0.6428571428571429, "length": 9}}, "n3337": {"so_34030309_34030360_1": {"section_id": 6638, "quality": 1.0, "length": 5}, "so_34030309_34030360_3": {"section_id": 6640, "quality": 0.6428571428571429, "length": 9}}, "n4659": {"so_34030309_34030360_3": {"section_id": 5305, "quality": 0.6428571428571429, "length": 9}, "so_34030309_34030360_1": {"section_id": 3317, "quality": 1.0, "length": 5}}}, "34030360": {"ParentId": "34030309", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>According to the standard, it is an implementation-defined null-terminated <code>const char*</code>:</p>\n<blockquote>\n<p id=\"so_34030309_34030360_0\"><strong>18.7.1 Class type_info</strong><br>\n  ....</br></p>\n<p id=\"so_34030309_34030360_1\"><code>const char* name() const noexcept;</code></p>\n<p id=\"so_34030309_34030360_2\"><em>Returns</em>: An implementation-defined <code>NTBS</code>.</p>\n<p id=\"so_34030309_34030360_3\"><em>Remarks</em>: The message may be a null-terminated multibyte string (17.5.2.1.4.2), suitable for conversion\n  and display as a <code>wstring</code> (21.3, 22.4.1.4)</p>\n</blockquote>\n<p>Since the content is implementation-defined, it cannot be compared with other strings in a reliable way, unless we restrict ourselves to specific implementations.</p>\n", "OwnerUserId": "3246555", "LastEditorUserId": "3246555", "LastEditDate": "2015-12-01T21:23:57.710", "Id": "34030360", "Score": "2", "CreationDate": "2015-12-01T21:18:34.643", "LastActivityDate": "2015-12-01T21:23:57.710"}});