post_cb({"34629398": {"Id": "34629398", "PostTypeId": "2", "Body": "<p>What you're doing introduces undefined behaviour.  In general terms, I'd say that introducing undefined behaviour falls more in the realm of bad practice than in the realm of good practice.</p>\n<p>According to the 1998 C++ standard, Section 17.4.3.1, para 1.</p>\n<blockquote>\n<p id=\"so_34629249_34629398_0\">It is undefined for a C++ program to add declarations or definitions\n  to namespace std or namespaces within namespace std unless otherwise\n  specified. A program may add template specializations for any standard\n  library template to namespace std. Such a specialization (complete or\n  partial) of a standard library template results in undefined behavior\n  unless the declaration depends on a user defined name of external\n  linkage and unless the specialization meets the standard library\n  requirements for the original template.</p>\n</blockquote>\n<p>I don't have more recent versions of the standard (on my current machine) but, from memory, all releases of the C++ standard have a similar clause.</p>\n", "LastActivityDate": "2016-01-06T09:17:47.940", "CommentCount": "0", "CreationDate": "2016-01-06T09:17:47.940", "ParentId": "34629249", "Score": "1", "OwnerUserId": "4706785"}, "34629426": {"Id": "34629426", "PostTypeId": "2", "Body": "<p>Sounds like a bad idea.</p>\n<p>First off, this is undefined behaviour. Standards draft N4140 says:</p>\n<blockquote>\n<p id=\"so_34629249_34629426_0\"><code>[namespace.std]/1:</code> The behavior of a C++ program is undefined if it adds declarations or definitions to namespace <code>std</code> or to a namespace within namespace <code>std</code> unless otherwise specified. [...]</p>\n</blockquote>\n<p>A using-directive is a kind of declaration, so UB is the order for the day.</p>\n<p>Secondly, things in <code>std::experimental</code> are very much subject to change. You might find that when things are moved into <code>std</code> proper that your code still compiles, but doesn't act in quite the same way. This is just asking for trouble, especially in production code.</p>\n", "LastEditorUserId": "496161", "LastActivityDate": "2016-01-06T14:55:11.570", "Score": "5", "CreationDate": "2016-01-06T09:18:58.773", "ParentId": "34629249", "CommentCount": "2", "OwnerUserId": "496161", "LastEditDate": "2016-01-06T14:55:11.570"}, "bq_ids": {"n4140": {"so_34629249_34629398_0": {"length": 24, "quality": 0.5714285714285714, "section_id": 6299}, "so_34629249_34629426_0": {"length": 13, "quality": 0.8666666666666667, "section_id": 6299}}, "n3337": {"so_34629249_34629398_0": {"length": 24, "quality": 0.5714285714285714, "section_id": 6056}, "so_34629249_34629426_0": {"length": 13, "quality": 0.8666666666666667, "section_id": 6056}}, "n4659": {"so_34629249_34629398_0": {"length": 24, "quality": 0.5714285714285714, "section_id": 7808}, "so_34629249_34629426_0": {"length": 13, "quality": 0.8666666666666667, "section_id": 7808}}}, "34636770": {"Id": "34636770", "PostTypeId": "2", "Body": "<p>Many libraries in <code>std::experimental</code> can and will change in ways that will break user code before they migrate to <code>std</code>, and they may not even migrate into <code>std</code>.  This is why they put them in <code>std::experimental</code>.</p>\n<p><code>std::experimental</code> is intended for a relatively free-for-all place where you can introduce new proposed library features for C++, and compilers can implement them, without it breaking existing code.  The implementations are in flux and are not standard.  Some of them may make it into C++1z, but some of them may not, and those that do make it in may be changed, and those that don't make it in might make it into C++2x with substantial changes.</p>\n<p>Simply look at the history of, say, Ranges.  Or the coroutine/resumable functions stuff microsoft is proposing.  Or the reflection working group.  Or concepts.</p>\n<p>The goal of this iteration of C++ is, dare I say it, to be Agile, and to fail fast.  Many independent proposals work their way through the pipeline, with a goal to minimize inter-dependencies.  If a given proposal isn't ready for prime time at the time a C++ standard is, it doesn't make it in.  If it is ready, and worthwhile, it is added in modularly.</p>\n<p>This was (to my understanding) done explicitly to avoid the mess where some part of the process got \"too big to fail\" and things that where not ready where published into the standard, or the standard release was delayed for years because something was not ready.</p>\n<p>On top of the above, messing around with <code>std</code> in that way makes your program ill-formed with no diagnostic required, as other answers have pointed out.</p>\n", "LastActivityDate": "2016-01-06T15:27:19.953", "CommentCount": "0", "CreationDate": "2016-01-06T15:27:19.953", "ParentId": "34629249", "Score": "1", "OwnerUserId": "1774667"}, "34629714": {"Id": "34629714", "PostTypeId": "2", "Body": "<p>At work I spend a lot of time fighting this kind of speculative complexity (I'm looking for a good phrase that characterises the behavior, this is the best I've come up with so far).</p>\n<p>As I see it, you're introducing complexity and risk <em>now</em> into your code, in order to avoid refactoring in the future.  That's bad enough, but in this particular case I would even go so far as to say that refactoring is a poor word choice -- it's not so much refactoring as simple text substitution.  </p>\n<p>Going through the code to remove std::experimental's (or change then to std:: or std::something_else ) is really just a text substitution.  In the best case you're looking at a quick command in your editor or ide.  In the worst case you're looking at spending a couple hours writing a regex -- maybe in your editor, maybe in PERL or Ruby...</p>\n<p>Those std::experiment's indicate that you're using experimental functionality, and it's good to have an explicit statement in your code to that effect.  If and when certain libraries enter the standard, a competent programmer can quickly and easily make the necessary text substitutions.  If your text editing skills aren't up to the task, don't hack up the language -- improve your text editing skills.  It's an opportunity.</p>\n<p>More genarally, write  the simplest, cleanest code that satisfies your needs <em>now</em>, and be ready to change it as soon as circumstances change.  This will usually result in more flexible code that supports your real future needs better than your speculations now.</p>\n", "LastActivityDate": "2016-01-06T09:33:25.970", "CommentCount": "0", "CreationDate": "2016-01-06T09:33:25.970", "ParentId": "34629249", "Score": "9", "OwnerUserId": "2050788"}, "34629249": {"ViewCount": "848", "Body": "<p>Is it bad or good parctice to inject namespace <code>std::experimental</code> into <code>std</code> like following?</p>\n<pre><code>namespace std\n{\nnamespace experimental\n{\n}\nusing namespace experimental;    \n}\n\n#include &lt;experimental/optional&gt;\n\nint main()\n{\n    std::optional&lt; int &gt; o;\n    return 0;\n}\n</code></pre>\n<p>Or even in more modern form:</p>\n<pre><code>#if __has_include(&lt;optional&gt;)\n# include &lt;optional&gt;\n#elif __has_include(&lt;experimental/optional&gt;)\n# include &lt;experimental/optional&gt;\nnamespace std\n{\nusing namespace experimental;    \n}\n#else\n#error !\n#endif\n\nint main()\n{\n    std::optional&lt; int &gt; o;\n    return 0;\n}\n</code></pre>\n<p>The intention to introduce <code>std::experimental</code> \"sub-namespace\" is clear because <code>std::experimental</code> currently contains <a href=\"http://en.cppreference.com/w/cpp/experimental\">a plenty of <strong>new</strong> libraries</a>. I think it is very likely all them will migrate into <code>namespace std</code> without any substantial changes and user code written currently can rely upon this (am I totally wrong?). Otherwise all this code should be refactored to change from <code>std::experimental::</code> to <code>std::</code> in the future. It is not big deal, but there may be reasons not to do so.</p>\n<p>The question is about both production code and not-too-serious code.</p>\n", "AcceptedAnswerId": "34629426", "Title": "Inject namespace experimental to std", "CreationDate": "2016-01-06T09:08:24.230", "Id": "34629249", "CommentCount": "8", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2016-01-06T15:27:19.953", "Score": "9", "OwnerUserId": "1430927", "Tags": "<c++><c++11><stl><c++14>", "AnswerCount": "4"}});