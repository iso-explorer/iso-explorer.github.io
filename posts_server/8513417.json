post_cb({"8513417": {"CommentCount": "3", "AcceptedAnswerId": "8513497", "PostTypeId": "1", "LastEditorUserId": "46642", "CreationDate": "2011-12-14T23:54:42.143", "LastActivityDate": "2014-06-22T05:31:41.693", "LastEditDate": "2011-12-15T07:48:46.050", "ViewCount": "2562", "FavoriteCount": "16", "Title": "What can and can't I specialize in the std namespace?", "Id": "8513417", "Score": "51", "Body": "<p>Users are allowed to add explicit specializations to the <code>std</code> namespace. However, there are a few templates that I am explicitly forbidden from specializing.</p>\n<p>What templates can and can't I specialize?</p>\n", "Tags": "<c++><c++11><std><explicit-specialization>", "OwnerUserId": "46642", "AnswerCount": "1"}, "8513497": {"ParentId": "8513417", "PostTypeId": "2", "CommentCount": "2", "CreationDate": "2011-12-15T00:04:08.453", "Score": "53", "LastEditorUserId": "1436796", "LastEditDate": "2014-06-22T05:31:41.693", "Id": "8513497", "OwnerUserId": "596781", "Body": "<p>Quoting loosely from the standard:</p>\n<ul>\n<li><p><code>numeric_limits</code> shall not be specialized for non-arithmetic standard types (e.g. <code>complex&lt;T&gt;</code>)</p></li>\n<li><p>\"[S]pecializations of <code>shared_ptr</code> shall be CopyConstructible, CopyAssignable, and LessThanComparable [and] convertible to <code>bool</code>.\"</p></li>\n<li><p>\"Specializations of <code>weak_ptr</code> shall be CopyConstructible and CopyAssignable.\"</p></li>\n<li><p>\"[T]emplate specializations [of <code>std::hash</code>] shall meet the requirements of class template hash.\"</p></li>\n<li><p>Anything in <code>&lt;type_traits&gt;</code>: \"The behavior of a program that adds specializations for any of the class templates defined in this subclause is undefined unless otherwise specified.\" (only some specializations of <code>common_type</code> are explicitly allowed)</p></li>\n<li><p>Locales have certain <em>required</em> specializations.</p></li>\n<li><p>All specializations of <code>istreambuf_iterator</code> shall have a trivial copy constructor, a constexpr default constructor, and a trivial destructor.</p></li>\n<li><p>\"The effect of instantiating the class template <code>complex</code> for any type other than float, double, or long double is unspecified.\" I take it that means that defining such other  specializations is pointless.</p></li>\n<li><p>\"Specializations and instantiations of the <code>atomic</code> template shall have a deleted copy constructor, a deleted copy assignment operator, and a constexpr value constructor.\"</p></li>\n<li><p>\"The class templates <code>unary_function</code> and <code>binary_function</code> are deprecated. A program shall not declare specializations of these templates.\"</p></li>\n</ul>\n<p>And of course the overarching clause 17.6.4.2.1, sentence 1 (thanks @sehe and @curiousguy):</p>\n<blockquote>\n<p id=\"so_8513417_8513497_0\">The behavior of a C++ program is undefined if it adds declarations or definitions to namespace std or to a\n  namespace within namespace std unless otherwise specified. A program may add a template specialization\n  for any standard library template to namespace std only if the declaration depends on a user-defined type\n  and the specialization meets the standard library requirements for the original template and is not explicitly\n  prohibited.</p>\n</blockquote>\n<p>And sentence 2:</p>\n<blockquote>\n<p id=\"so_8513417_8513497_1\">The behavior of a C++ program is undefined if it declares</p>\n<ul>\n<li><p id=\"so_8513417_8513497_2\">an explicit specialization of any member function of a standard library class template, or</p></li>\n<li><p id=\"so_8513417_8513497_3\">an explicit specialization of any member function template of a standard library class or class template, or</p></li>\n<li><p id=\"so_8513417_8513497_4\">an explicit or partial specialization of any member class template of a standard library class or class template.</p></li>\n</ul>\n<p id=\"so_8513417_8513497_5\">A program may explicitly instantiate a template defined in the standard library only if the declaration\n  depends on the name of a user-defined type and the instantiation meets the standard library requirements\n  for the original template.</p>\n</blockquote>\n", "LastActivityDate": "2014-06-22T05:31:41.693"}, "bq_ids": {"n4140": {"so_8513417_8513497_5": {"section_id": 6300, "quality": 1.0, "length": 17}, "so_8513417_8513497_4": {"section_id": 6300, "quality": 1.0, "length": 10}, "so_8513417_8513497_3": {"section_id": 6300, "quality": 1.0, "length": 9}, "so_8513417_8513497_0": {"section_id": 6299, "quality": 0.9705882352941176, "length": 33}, "so_8513417_8513497_2": {"section_id": 6300, "quality": 1.0, "length": 7}}, "n3337": {"so_8513417_8513497_5": {"section_id": 6057, "quality": 1.0, "length": 17}, "so_8513417_8513497_4": {"section_id": 6057, "quality": 1.0, "length": 10}, "so_8513417_8513497_3": {"section_id": 6057, "quality": 1.0, "length": 9}, "so_8513417_8513497_0": {"section_id": 6056, "quality": 0.9705882352941176, "length": 33}, "so_8513417_8513497_2": {"section_id": 6057, "quality": 1.0, "length": 7}}, "n4659": {"so_8513417_8513497_5": {"section_id": 7809, "quality": 1.0, "length": 17}, "so_8513417_8513497_4": {"section_id": 7809, "quality": 1.0, "length": 10}, "so_8513417_8513497_3": {"section_id": 7809, "quality": 1.0, "length": 9}, "so_8513417_8513497_0": {"section_id": 7808, "quality": 0.9705882352941176, "length": 33}, "so_8513417_8513497_2": {"section_id": 7809, "quality": 1.0, "length": 7}}}});