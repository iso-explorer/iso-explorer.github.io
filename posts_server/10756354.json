post_cb({"10756354": {"ViewCount": "2118", "Body": "<pre><code>namespace QuantLib {\n\n    //! Base error class\n    class Error : public std::exception {\n      public:\n        /*! The explicit use of this constructor is not advised.\n            Use the QL_FAIL macro instead.\n        */\n        Error(const std::string&amp; file,\n              long line,\n              const std::string&amp; functionName,\n              const std::string&amp; message = \"\");\n        /*! the automatically generated destructor would\n            not have the throw specifier.\n        */\n        ~Error() throw() {}\n        //! returns the error message.\n        const char* what() const throw ();\n      private:\n        boost::shared_ptr&lt;std::string&gt; message_;\n    };\n\n}\n</code></pre>\n<p>As you see through the comment, the destructor of class <code>Error</code> explicitly provides an empty implementation with no-throw specifier.</p>\n<p><strong>Question</strong>: Is this necessary? Or is this a good practice comparing to let the compiler generate a implicit destructor?</p>\n", "AcceptedAnswerId": "10756470", "Title": "Should we provide a destructor with no-throw specifier?", "CreationDate": "2012-05-25T14:37:00.300", "Id": "10756354", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2012-10-11T05:33:15.047", "LastEditorUserId": "514235", "LastActivityDate": "2012-10-11T05:33:15.047", "Score": "6", "OwnerUserId": "391104", "Tags": "<c++><exception><destructor><throw><specifier>", "AnswerCount": "4"}, "10756473": {"PostTypeId": "2", "Body": "<p><a href=\"https://stackoverflow.com/questions/391595/when-is-it-ok-to-throw-an-exception-from-a-destructor-in-c\">Destructors should always be designed to never throw exceptions</a>. So in that sense, there's little point in declaring an empty destructor merely in order to mark it as no-throw.</p>\n", "LastActivityDate": "2012-05-25T14:44:28.590", "LastEditorUserId": "-1", "Id": "10756473", "CommentCount": "0", "CreationDate": "2012-05-25T14:44:28.590", "ParentId": "10756354", "Score": "5", "OwnerUserId": "129570", "LastEditDate": "2017-05-23T11:53:01.437"}, "bq_ids": {"n4140": {"so_10756354_10756554_0": {"length": 11, "quality": 0.9166666666666666, "section_id": 399}, "so_10756354_10756554_1": {"length": 49, "quality": 0.9423076923076923, "section_id": 3376}}, "n3337": {"so_10756354_10756554_0": {"length": 11, "quality": 0.9166666666666666, "section_id": 390}, "so_10756354_10756554_1": {"length": 52, "quality": 1.0, "section_id": 3246}}}, "10756554": {"PostTypeId": "2", "Body": "<p>Destructors always implicitly have exception specifications:</p>\n<p>[class.dtor] 12.4 p3</p>\n<blockquote>\n<p id=\"so_10756354_10756554_0\">A declaration of a destructor that does not have an exception-specification is implicitly considered to have the same exception-specification as an implicit declaration (15.4).</p>\n</blockquote>\n<p>[except.spec] 15.4 p14</p>\n<blockquote>\n<p id=\"so_10756354_10756554_1\">An implicitly declared special member function (Clause 12) shall have an exception-specification. If f is an implicitly declared default constructor, copy constructor, move constructor, destructor, copy assignment operator, or move assignment operator, its implicit exception-specification specifies the type-id T if and only if T is allowed by the exception-specification of a function directly invoked by f\u2019s implicit definition; f shall allow all exceptions if any function it directly invokes allows all exceptions, and f shall allow no exceptions if every function it directly invokes allows no exceptions.</p>\n</blockquote>\n<p>So, no, it's not necessary for you to use an exception specification.</p>\n<hr>\n<p>In C++03 user defined destructors did not have an implicit exception specification, so if you do define your own destructor you can't rely on the compiler to automatically add the appropriate exception specification. But implicitly declared destructors have the same implicit exception specification as in C++11.</p>\n</hr>", "LastActivityDate": "2012-05-25T15:31:44.157", "LastEditorUserId": "365496", "Id": "10756554", "CommentCount": "1", "CreationDate": "2012-05-25T14:48:11.150", "ParentId": "10756354", "Score": "3", "OwnerUserId": "365496", "LastEditDate": "2012-05-25T15:31:44.157"}, "10756470": {"PostTypeId": "2", "Body": "<p>In C++11, destructors are implicitly <code>throw()</code> (unless any member or base of the type has a destructor with a different exception specification) so if you are compiling in C++11 mode there is no need. </p>\n<p>If you are in C++03, you might want to add it, but whether it will have an effect or not is very implementation defined... Now, for documentation purposes you might want to add it, but again, it is commonly assumed that destructors don't throw.</p>\n", "LastActivityDate": "2012-05-25T15:51:55.683", "LastEditorUserId": "36565", "Id": "10756470", "CommentCount": "5", "CreationDate": "2012-05-25T14:44:21.343", "ParentId": "10756354", "Score": "8", "OwnerUserId": "36565", "LastEditDate": "2012-05-25T15:51:55.683"}, "10756519": {"PostTypeId": "2", "Body": "<p>Depends what you think <code>throw()</code> means.</p>\n<p>What it actually means according to the standard is, \"put extra code around every call to this function if necessary, or in the function itself, to ensure that if this function throws then the exception is caught and <code>std::unexpected</code> is called\".</p>\n<p>Certain compilers implemented it to mean \"optimize calls to this function on the assumption that they will not throw\", but (in violation of the standard) didn't implement the runtime check.</p>\n<p>So, adding it to a destructor (which certainly shouldn't throw) out to (but in practice might not) add a runtime check that should never be triggered and therefore might help debug your code. It may or may not enable an optimization.</p>\n", "LastActivityDate": "2012-05-25T15:32:24.407", "LastEditorUserId": "13005", "Id": "10756519", "CommentCount": "0", "CreationDate": "2012-05-25T14:46:31.573", "ParentId": "10756354", "Score": "4", "OwnerUserId": "13005", "LastEditDate": "2012-05-25T15:32:24.407"}});