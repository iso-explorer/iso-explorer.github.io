post_cb({"34965312": {"ParentId": "34965014", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>Type name <code>NestedBase</code> is a private member of the class.</p>\n<pre><code>class Base\n{\nprivate:\n    class NestedBase\n    {\n    public:\n        void Do() {}\n    };\n    //...\n</code></pre>\n<p>So you can not explicitly access it outside the class where the name is declared.</p>\n<p>But you can access the name implicitly the following way:)</p>\n<pre><code>decltype( Base::nested) instance;\n</code></pre>\n", "OwnerUserId": "2877241", "LastEditorUserId": "2877241", "LastEditDate": "2016-01-23T15:37:36.980", "Id": "34965312", "Score": "2", "CreationDate": "2016-01-23T15:32:27.113", "LastActivityDate": "2016-01-23T15:37:36.980"}, "34965014": {"CommentCount": "0", "ViewCount": "106", "PostTypeId": "1", "LastEditorUserId": "198374", "CreationDate": "2016-01-23T15:06:05.400", "LastActivityDate": "2016-09-16T10:26:23.980", "Title": "C++: Public member of a private nested class type", "FavoriteCount": "3", "LastEditDate": "2016-01-23T16:40:26.033", "Id": "34965014", "Score": "8", "Body": "<p>I have the following code:</p>\n<pre><code>class Base\n{\n  private:\n    class NestedBase\n    {\n      public:\n        void Do() {}\n    };\n\n  public:\n    NestedBase nested;\n};\n\nint main()\n{\n  Base b;\n  b.nested.Do(); // line A compiles\n  Base::NestedBase instance; // line B doesn't compile\n}\n</code></pre>\n<p><code>NestedBase</code> class is a private nested class of <code>Base</code>, so it seems natural  that line B doesn't compile. But, on the other hand, variable <code>b</code> has the public member <code>nested</code>, and I can call its method <code>Do()</code> from outside of <code>Base</code> (as in line A). What are the precise rules that regulate access to the private nested class (or its members) in such case? What does the standard say on this?</p>\n", "Tags": "<c++><inner-classes><class-visibility>", "OwnerUserId": "3133604", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_34965014_34965134_0": {"section_id": 6700, "quality": 1.0, "length": 9}}, "n3337": {"so_34965014_34965134_0": {"section_id": 6455, "quality": 1.0, "length": 9}}, "n4659": {"so_34965014_34965134_0": {"section_id": 8174, "quality": 1.0, "length": 9}}}, "34965134": {"ParentId": "34965014", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>According to the standard, <a href=\"http://eel.is/c++draft/class.access.nest#1\" rel=\"nofollow\">$11.7/1 Nested classes [class.access.nest]</a>:</p>\n<blockquote>\n<p id=\"so_34965014_34965134_0\">A nested class is a member and as such has the same access rights as any other member.</p>\n</blockquote>\n<p>So, it's quite simple. <code>NestedBase</code> is a <code>private</code> member of class <code>Base</code>, so <code>Base::NestedBase</code> can't be accessed in <code>main()</code>. </p>\n<p><code>b.nested.Do();</code> is fine because <code>nested</code> and <code>Do()</code> are both <code>public</code> members. The fact that <code>NestedBase</code> is a <code>private</code> nested class of <code>Base</code> doesn't matter, it's irrelevant here.</p>\n", "OwnerUserId": "3309790", "LastEditorUserId": "3309790", "LastEditDate": "2016-09-16T10:26:23.980", "Id": "34965134", "Score": "6", "CreationDate": "2016-01-23T15:14:00.047", "LastActivityDate": "2016-09-16T10:26:23.980"}});