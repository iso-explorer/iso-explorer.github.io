post_cb({"31264984": {"CommentCount": "1", "AcceptedAnswerId": "31266254", "CreationDate": "2015-07-07T09:37:59.507", "LastActivityDate": "2016-05-30T03:14:31.287", "PostTypeId": "1", "ViewCount": "26881", "FavoriteCount": "6", "Title": "C++ Compiler Error C2280 \"attempting to reference a deleted function\" in Visual Studio 2013 and 2015", "Id": "31264984", "Score": "16", "Body": "<p>This snippet is compiled without errors in Visual Studio 2013 (Version 12.0.31101.00 Update 4)</p>\n<pre><code>class A\n{\npublic:\n   A(){}\n   A(A &amp;&amp;){}\n};\n\nint main(int, char*)\n{\n   A a;\n   new A(a);\n   return 0;\n}\n</code></pre>\n<p>while it is compiled with this error in Visual Studio 2015 RC (Version 14.0.22823.1 D14REL):</p>\n<pre><code>1&gt;------ Build started: Project: foo, Configuration: Debug Win32 ------\n1&gt;  foo.cpp\n1&gt;c:\\dev\\foo\\foo.cpp(11): error C2280: 'A::A(const A &amp;)': attempting to reference a deleted function\n1&gt;  c:\\dev\\foo\\foo.cpp(6): note: compiler has generated 'A::A' here\n========== Build: 0 succeeded, 1 failed, 0 up-to-date, 0 skipped ==========\n</code></pre>\n<p>I think that the compiler shipped with Visual Studio 2015 generates the Copy Constructor and marks it as <code>=delete</code> and so I get the error C2280 (which, by the way, I cannot find documented on msdn.microsoft.com).</p>\n<p>Now, let's say I have a codebase which is compilable with Visual Studio 2013 (and it works because it relies on the code generated automatically by the compiler) but not compilable with Visual Studio 2015 due to C2280, how can I fix the problem?</p>\n<p>I was thinking to declare class <code>A</code> in this way:</p>\n<pre><code>class A\n{\npublic:\n   A(){}\n   A(A &amp;&amp;){}\n   A(const A&amp;)=default;\n};\n</code></pre>\n<p>am I missing something?</p>\n", "Tags": "<c++><visual-c++><copy-constructor><c++14>", "OwnerUserId": "15485", "AnswerCount": "3"}, "31265148": {"ParentId": "31264984", "CommentCount": "1", "Body": "<p>If you write a user-defined move constructor for your class, the copy constructor will be deleted. This is because if a class needs special behaviour for its move constructor, it probably needs some similar behaviour in its copy constructor, so the copy constructor will be deleted to stop you from inadvertently using the default behaviour.</p>\n<p>If you want to define your own move constructor <em>and</em> use the default copy constructor, you need to declare it as <code>default</code>, like you suggested in your question:</p>\n<pre><code>class A\n{\npublic:\n   A(){}\n   A(A &amp;&amp;){}\n   //I know what I'm doing, compiler, use the default version.\n   A(const A&amp;)=default;\n};\n</code></pre>\n<p>Note that if you define a custom move constructor, you should think about your assignment operators and destructor as well.</p>\n", "OwnerUserId": "496161", "PostTypeId": "2", "Id": "31265148", "Score": "3", "CreationDate": "2015-07-07T09:44:54.407", "LastActivityDate": "2015-07-07T09:44:54.407"}, "bq_ids": {"n4140": {"so_31264984_31266254_0": {"section_id": 456, "quality": 0.9230769230769231, "length": 36}}, "n3337": {"so_31264984_31266254_0": {"section_id": 447, "quality": 0.9230769230769231, "length": 36}}, "n4659": {"so_31264984_31266254_0": {"section_id": 479, "quality": 0.9487179487179487, "length": 37}}}, "31266254": {"ParentId": "31264984", "CommentCount": "0", "Body": "<p>From [class.copy]/7, emphasis mine:</p>\n<blockquote>\n<p id=\"so_31264984_31266254_0\">If the class definition does not explicitly declare a copy constructor, a non-explicit one is declared implicitly.\n  <strong>If the class definition declares a move constructor or move assignment operator, the implicitly declared copy\n  constructor is defined as deleted</strong>; otherwise, it is defined as defaulted (8.4). The latter case is deprecated if\n  the class has a user-declared copy assignment operator or a user-declared destructor.</p>\n</blockquote>\n<p>There is an equivalent section with similar wording for copy assignment in paragraph 18. So your class is really:</p>\n<pre><code>class A\n{\npublic:\n   // explicit\n   A(){}\n   A(A &amp;&amp;){}\n\n   // implicit\n   A(const A&amp;) = delete;\n   A&amp; operator=(const A&amp;) = delete;\n};\n</code></pre>\n<p>which is why you can't copy-construct it. If you provide a move constructor/assignment, and you still want the class to be copyable, you will have to explicitly provide those special member functions:</p>\n<pre><code>    A(const A&amp;) = default;\n    A&amp; operator=(const A&amp;) = default;\n</code></pre>\n<p>You will also need to declare a move assignment operator. If you really have a need for these special functions, you will also probably need the destructor. See <a href=\"http://en.cppreference.com/w/cpp/language/rule_of_three#Rule_of_five\" rel=\"noreferrer\">Rule of Five</a>. </p>\n", "OwnerUserId": "2069064", "PostTypeId": "2", "Id": "31266254", "Score": "22", "CreationDate": "2015-07-07T10:38:08.673", "LastActivityDate": "2015-07-07T10:38:08.673"}, "37517125": {"ParentId": "31264984", "CommentCount": "2", "Body": "<p>I had the same problem and it was due to a poorly defined member variable:</p>\n<pre><code>double const deltaBase = .001;\n</code></pre>\n<p>Putting this in will cause the copy constructor to be deleted.  Get rid of the \"const\" and assign in the constructor.  </p>\n", "OwnerUserId": "6175092", "PostTypeId": "2", "Id": "37517125", "Score": "13", "CreationDate": "2016-05-30T03:14:31.287", "LastActivityDate": "2016-05-30T03:14:31.287"}});