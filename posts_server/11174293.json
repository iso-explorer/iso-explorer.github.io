post_cb({"11174293": {"CommentCount": "4", "ViewCount": "412", "CreationDate": "2012-06-24T01:12:24.610", "LastActivityDate": "2012-06-24T01:41:43.150", "Title": "Copy of functor and initializer_list", "AcceptedAnswerId": "11174389", "PostTypeId": "1", "Id": "11174293", "Score": "4", "Body": "<p>I am a little confused about what happens when I copy functors and/or initializers. In the following code I thought I would copy/move the objects all the time but regardsless it Segfaults. I seem to be doing something wrong but haven't figured out yet, what my wrong asumptions are.\nStrangely at <em>cppreference.com</em> I could not find copy or move constructor for <code>initializer_list</code> so I wonder what actually happens in these cases.</p>\n<pre><code>#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;functional&gt;\n#include &lt;iostream&gt;\n\nstd::initializer_list&lt;std::function&lt;std::string()&gt;&gt; getInitializer() {\n  return {\n    []() -&gt; std::string {\n      return \"If\";\n    }\n  };\n}\n\nint main() {\n    std::function&lt;int(std::string)&gt; func;\n    {\n        auto init = getInitializer();\n\n        func = [init](std::string text) -&gt; int {\n            std::vector&lt;std::function&lt;std::string()&gt;&gt; vec(init);\n\n            for( auto&amp; el : vec ) {\n                std::cout &lt;&lt; el();\n            }\n            std::cout &lt;&lt; text &lt;&lt; std::endl;\n            return 5;\n        };\n    }\n\n    return func(\" you see this - the world is all right!\");\n}\n</code></pre>\n", "Tags": "<c++><gcc><c++11><functor><initializer-list>", "OwnerUserId": "725937", "AnswerCount": "1"}, "11174389": {"ParentId": "11174293", "CommentCount": "6", "Body": "<p>I don't have much experience with <code>initializer_list</code>s, but the standard seems to suggest the implementation of an <code>initializer_list</code> is as if its a pair of pointers to an array. The list at <code>getInitializer</code> has <em>automatic lifetime</em>, and so does the array that backs it. You end up returning a pair of pointers to an array that no longer exists.</p>\n<p>The relevant sections of the standard are 8.5.4 [decl.init.list] items 5 and 6:</p>\n<blockquote>\n<p id=\"so_11174293_11174389_0\">5.- An object of type <code>std::initializer_list&lt;E&gt;</code> is constructed from an initializer list as if the implementation allocated an array of <em>N</em> elements of type <code>E</code>, where <em>N</em> is the number of elements in the initializer list. Each element of that array is copy-initialized with the corresponding element of the initializer list, and the <code>std::initializer_list&lt;E&gt;</code> object is constructed to refer to that array. If a narrowing conversion is required to initialize any of the elements, the program is ill-formed.</p>\n<p id=\"so_11174293_11174389_1\">6.- The lifetime of the array is the same as that of the <code>initializer_list</code> object. </p>\n</blockquote>\n<hr>\n<p>So for your particular case, the implementation would be roughly equivalent to this:</p>\n<pre><code>std::initializer_list&lt;std::function&lt;std::string()&gt;&gt; getInitializer() {\n  std::function&lt;std::string()&gt; __a[1] = {\n    []() -&gt; std::string {\n      return \"If\";\n    }\n  };\n  return std::initializer_list&lt;std::function&lt;std::string()&gt;&gt;(__a, __a+1);\n}\n</code></pre>\n</hr>", "OwnerUserId": "927034", "PostTypeId": "2", "Id": "11174389", "Score": "7", "CreationDate": "2012-06-24T01:41:43.150", "LastActivityDate": "2012-06-24T01:41:43.150"}, "bq_ids": {"n4140": {"so_11174293_11174389_1": {"section_id": 3328, "quality": 0.6666666666666666, "length": 4}, "so_11174293_11174389_0": {"section_id": 3327, "quality": 1.0, "length": 35}}, "n3337": {"so_11174293_11174389_1": {"section_id": 3198, "quality": 0.8333333333333334, "length": 5}, "so_11174293_11174389_0": {"section_id": 3197, "quality": 1.0, "length": 35}}, "n4659": {"so_11174293_11174389_1": {"section_id": 4094, "quality": 0.6666666666666666, "length": 4}, "so_11174293_11174389_0": {"section_id": 4093, "quality": 0.9142857142857143, "length": 32}}}});