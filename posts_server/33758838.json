post_cb({"33759192": {"ParentId": "33758838", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>As far as I understand this is to allow new to be implemented in terms of malloc which allows zero sized requests. You can not do much with them since as noted in the quote below dereferencing such a pointer is undefined behavior.</p>\n<p>We can find a rationale in the draft C++ standard footnote 35 which is referenced from section <code>3.7.4.1</code> <em>[basic.stc.dynamic.allocation]</em>:</p>\n<blockquote>\n<p id=\"so_33758838_33759192_0\">[...]Even if the size of the space requested is zero, the request can fail.\n  If the request succeeds, the value returned shall be a non-null pointer value (4.10) p0 different from any\n  previously returned value p1, unless that value p1 was subsequently passed to an operator delete. The\n  effect of dereferencing a pointer returned as a request for zero size is undefined.<sup>35</sup></p>\n</blockquote>\n<p>and footnote 35 says:</p>\n<blockquote>\n<p id=\"so_33758838_33759192_1\">The intent is to have operator new() implementable by calling std::malloc() or std::calloc(), so the rules are substantially\n  the same. C++ differs from C in requiring a zero request to return a non-null pointer.</p>\n</blockquote>\n<p>From the C11 draft standard section <code>7.22.3</code> Memory management functions:</p>\n<blockquote>\n<p id=\"so_33758838_33759192_2\">[...]If the size of\n  the space requested is zero, the behavior is implementation-defined: either a null pointer\n  is returned, or the behavior is as if the size were some nonzero value, except that the\n  returned pointer shall not be used to access an object.</p>\n</blockquote>\n", "OwnerUserId": "1708801", "LastEditorUserId": "1708801", "LastEditDate": "2015-11-17T15:23:56.720", "Id": "33759192", "Score": "4", "CreationDate": "2015-11-17T14:17:16.293", "LastActivityDate": "2015-11-17T15:23:56.720"}, "33759010": {"ParentId": "33758838", "CommentCount": "0", "Body": "<p>While zero length arrays like</p>\n<pre><code>int arr[0];\n</code></pre>\n<p>are not standard C++, dynamic arrays of length zero like</p>\n<pre><code>int *arr = new int[0];\n</code></pre>\n<p>are legal and are what your quote is referring too: </p>\n<blockquote>\n<p id=\"so_33758838_33759010_0\">When the value of the expression in a noptr-new-declarator is zero, the allocation function is called to\n  allocate an array with no elements.</p>\n</blockquote>\n<p>5.3.4 (7) in N3337.</p>\n", "OwnerUserId": "3002139", "PostTypeId": "2", "Id": "33759010", "Score": "6", "CreationDate": "2015-11-17T14:08:02.053", "LastActivityDate": "2015-11-17T14:08:02.053"}, "33758838": {"CommentCount": "1", "ViewCount": "145", "PostTypeId": "1", "LastEditorUserId": "1708801", "CreationDate": "2015-11-17T13:59:23.550", "LastActivityDate": "2015-11-23T19:32:57.460", "Title": "What is the zero-length array mentioned in the draft standard?", "AcceptedAnswerId": "33759192", "LastEditDate": "2015-11-23T19:32:57.460", "Id": "33758838", "Score": "7", "Body": "<p>I was reading the draft standard <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf\" rel=\"nofollow noreferrer\">N3337</a> and footnote 79 (\u00a7 5.3.7 page 110) states (<em>emphasis mine</em>):</p>\n<blockquote>\n<p id=\"so_33758838_33758838_0\">79) For non-zero-length arrays, this is the same as a pointer to the\n  first element of the array created by that new-expression. <strong>Zero-length\n  arrays</strong> do not have a first element</p>\n</blockquote>\n<p>I was under the impression that C++ did not support zero-length arrays.</p>\n", "Tags": "<c++><arrays><language-lawyer>", "OwnerUserId": "2963099", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_33758838_33759192_1": {"section_id": 7177, "quality": 0.9473684210526315, "length": 18}, "so_33758838_33758838_0": {"section_id": 6106, "quality": 0.9333333333333333, "length": 14}, "so_33758838_33759192_0": {"section_id": 7177, "quality": 0.8857142857142857, "length": 31}, "so_33758838_33759010_0": {"section_id": 6088, "quality": 0.7272727272727273, "length": 8}}, "n3337": {"so_33758838_33759192_1": {"section_id": 6921, "quality": 0.9473684210526315, "length": 18}, "so_33758838_33758838_0": {"section_id": 5872, "quality": 0.9333333333333333, "length": 14}, "so_33758838_33759192_0": {"section_id": 6921, "quality": 0.9142857142857143, "length": 32}, "so_33758838_33759010_0": {"section_id": 5856, "quality": 1.0, "length": 11}}, "n4659": {"so_33758838_33759192_1": {"section_id": 8685, "quality": 0.9473684210526315, "length": 18}, "so_33758838_33758838_0": {"section_id": 7603, "quality": 0.9333333333333333, "length": 14}, "so_33758838_33759192_0": {"section_id": 8685, "quality": 0.8857142857142857, "length": 31}, "so_33758838_33759010_0": {"section_id": 7584, "quality": 0.7272727272727273, "length": 8}}}});