post_cb({"11789434": {"CommentCount": "2", "ViewCount": "96", "CreationDate": "2012-08-03T04:49:19.977", "LastActivityDate": "2012-08-03T05:00:58.437", "Title": "Compiler Support for Enum Values", "AcceptedAnswerId": "11789545", "PostTypeId": "1", "Id": "11789434", "Score": "1", "Body": "<p>Given an <code>enum</code> declared like so:</p>\n<pre><code>enum {\n    A,\n    B,\n    C,\n    D\n};\n</code></pre>\n<p>What is the general compiler support with reference to \u00a7 7.2 of the C++11 standard? Specifically, this excerpt from \u00a7 7.2.2:</p>\n<blockquote>\n<p id=\"so_11789434_11789434_0\">If the first enumerator has no initializer, the value of the\n  corresponding constant is zero. An enumerator-definition without an\n  initializer gives the enumerator the value obtained by increasing the\n  value of the previous enumerator by one.</p>\n</blockquote>\n<p><strong>Can I expect the common, modern compilers (GCC, Intel, Clang, recent versions of CL, <em>others</em>), to give the same results, that is, <code>A = 0</code>, <code>B = 1</code>, <code>C = 2</code>, and <code>D = 3</code>?</strong></p>\n", "Tags": "<c++><enums><compilation><standards>", "OwnerUserId": "184741", "AnswerCount": "2"}, "11789545": {"ParentId": "11789434", "CommentCount": "2", "Body": "<p>The rule you cite is not new in C++11. It's part of C++03, C++98, C11, C99, and C89. This rule existed <em>before</em> these languages were ever standardized. Java and C# both inherited this behavior with their enums.</p>\n<p>Yes, compilers support this part of the langauge. Just like they support <code>if</code>, <code>switch</code>, <code>#define</code>, <code>int</code>s and other <em>basic language constructs</em>.</p>\n<p>We're not talking about r-value references or lambdas or something. This is core stuff from before many programmers today <em>were even born</em>.</p>\n", "OwnerUserId": "734069", "PostTypeId": "2", "Id": "11789545", "Score": "6", "CreationDate": "2012-08-03T05:00:58.437", "LastActivityDate": "2012-08-03T05:00:58.437"}, "bq_ids": {"n4140": {"so_11789434_11789434_0": {"section_id": 5461, "quality": 1.0, "length": 18}}, "n3337": {"so_11789434_11789434_0": {"section_id": 5248, "quality": 1.0, "length": 18}}, "n4659": {"so_11789434_11789434_0": {"section_id": 6895, "quality": 1.0, "length": 18}}}, "11789472": {"ParentId": "11789434", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>Yes, if compiler supports standard. </p>\n<pre><code>enum { a, b, c=0 };\nenum { d, e, f=e+2 };\n</code></pre>\n<p>defines <code>a</code>, <code>c</code>, and <code>d</code> to be zero, <code>b</code> and <code>e</code> to be 1, and <code>f</code> to be 3. </p>\n", "OwnerUserId": "1498580", "LastEditorUserId": "673730", "LastEditDate": "2012-08-03T04:54:58.223", "Id": "11789472", "Score": "3", "CreationDate": "2012-08-03T04:53:05.143", "LastActivityDate": "2012-08-03T04:54:58.223"}});