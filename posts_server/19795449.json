post_cb({"19796190": {"ParentId": "19795449", "CommentCount": "0", "Body": "<p>The enum values are treated much as if they were static members\nof the class, and can be accessed in two ways: via the class\nname followed by the scope resolution operator\n(<code>MyClass::MY_VALUE0</code>), or like any other member\n(<code>instance.MY_VALUE0</code> or <code>pointer-&gt;MY_VALUE0</code>).</p>\n<p>Note that in the latter case, the operand on the left is still\nevaluated, even though the results of the evaluation is not\nused.  In other words, if I write <code>f()-&gt;MY_VALUE0</code> (where <code>f()</code>\nreturns a <code>MyClass*</code>), the function will be called, despite the\nfact that its return value is not used.</p>\n", "OwnerUserId": "649665", "PostTypeId": "2", "Id": "19796190", "Score": "2", "CreationDate": "2013-11-05T18:33:16.290", "LastActivityDate": "2013-11-05T18:33:16.290"}, "19796200": {"ParentId": "19795449", "CommentCount": "2", "Body": "<p>The <code>-&gt;</code> operator is (mostly) an abbreviation for <code>dereference</code> (<kbd>*</kbd>) and <code>selection</code> (<kbd>.</kbd>). In other words, <code>a-&gt;b</code> is the same as <code>(*(a)).b</code>. (\u00a75.2.5/2; See notes below).</p>\n<p>The <kbd>.</kbd> syntax is class member access, as defined by \u00a75.2.5 [expr.ref]; the identifier on the right-hand side of the <kbd>.</kbd> can be a static or non-static data member, function, or <em>member enumerator</em> (paragraph 4 of the cited section). It cannot be a nested type. In this sense, member enumerators are syntactically similar to <code>static const</code> data members.</p>\n<p>Notes: </p>\n<ol>\n<li><p>As \u00a713.5.6 clarifies, <code>a-&gt;b</code> is is subject to operator overloading. If <code>a</code> is not a pointer type, then <code>-&gt;</code> may be overloaded, in which case the expression is interpreted as <code>(a.operator-&gt;())-&gt;b</code>. Eventually, the sequence of overloaded <code>-&gt;</code> calls must result in a pointer type, at which point the interpretation of \u00a75.2.5/2 is applied.</p></li>\n<li><p>An important difference between <code>Class::member</code> and <code>value.member</code> is that in the second case, <code>value</code> will be evaluated <em>even if that is unnecessary to resolve the value of <code>member</code></em>.</p></li>\n</ol>\n", "OwnerUserId": "1566221", "PostTypeId": "2", "Id": "19796200", "Score": "5", "CreationDate": "2013-11-05T18:34:00.897", "LastActivityDate": "2013-11-05T18:34:00.897"}, "19795449": {"CommentCount": "11", "ViewCount": "443", "PostTypeId": "1", "LastEditorUserId": "1894055", "CreationDate": "2013-11-05T17:49:35.413", "LastActivityDate": "2013-11-05T18:57:53.150", "Title": "Why does C++ allow access to an enum through a pointer?", "AcceptedAnswerId": "19796200", "LastEditDate": "2013-11-05T18:57:53.150", "Id": "19795449", "Score": "4", "Body": "<p>I am working on some code where there is a simple enum in a class. A different piece of code has a pointer to that class and is accessing a value of the enum through the arrow pointer.</p>\n<p>How on earth is the class able to access MY_VALUE1 this way?\nI though it would only allow access via MyClass::MY_VALUE1 or MyClass::MyEnum::MY_VALUE1.</p>\n<pre><code>class MyClass {\npublic:\nenum MyEnum{\n    MY_VALUE0 = 0,\n    MY_VALUE1 = 1\n};\n//getters, setters as appropriate\n};\n\n//Other class\nMyClass* myClass = new MyClass();\n\n//Compiles without C++11\nif(getRandomEnum() == myClass-&gt;MY_VALUE1)\n{\n    //Do Stuff\n}\n</code></pre>\n", "Tags": "<c++>", "OwnerUserId": "1894055", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_19795449_19795685_0": {"section_id": 5470, "quality": 1.0, "length": 13}}, "n3337": {"so_19795449_19795685_0": {"section_id": 5256, "quality": 1.0, "length": 13}}, "n4659": {"so_19795449_19795685_0": {"section_id": 6904, "quality": 1.0, "length": 13}}}, "19795685": {"ParentId": "19795449", "PostTypeId": "2", "CommentCount": "7", "Body": "<p>From C++ ISO/IEC 2011</p>\n<blockquote>\n<p id=\"so_19795449_19795685_0\">An enumerator declared in class scope can be referred to using the\n  class member access operators (::, . (dot) and -&gt; (arrow)),</p>\n</blockquote>\n", "OwnerUserId": "1517244", "LastEditorUserId": "1517244", "LastEditDate": "2013-11-05T18:28:46.373", "Id": "19795685", "Score": "3", "CreationDate": "2013-11-05T18:02:54.940", "LastActivityDate": "2013-11-05T18:28:46.373"}});