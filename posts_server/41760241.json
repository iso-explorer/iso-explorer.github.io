post_cb({"41762123": {"ParentId": "41760241", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2017-01-20T11:03:46.400", "Score": "6", "LastEditorUserId": "1147772", "LastEditDate": "2017-03-28T08:53:54.530", "Id": "41762123", "OwnerUserId": "1147772", "Body": "<p>Let's get some facts:</p>\n<p>The wording for the <code>[[deprecated]]</code> attribute is the following \n(<em>based on <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4296.pdf\" rel=\"nofollow noreferrer\">N4269</a> 7.6.5 [dcl.attr.deprecated], emphasis mine</em>):</p>\n<blockquote id=\"so_41760241_41762123_0\">\n<ol start=\"2\">\n<li>The attribute may be applied to the declaration of a class, a typedef-name, a <strong>variable</strong>, a <strong>non-static data\n  member</strong>, a <strong>function</strong>, a namespace, an enumeration, an enumerator, or a template specialization.</li>\n</ol>\n</blockquote>\n<p>The misleading part is the explicit appearance of \"non-static data members\" without its counterpart at the same level in this list, but in that same list there are two other elements of interest.</p>\n<ul>\n<li>The description of a <code>variable</code> is (based on 3 [basic]) :</li>\n</ul>\n<blockquote id=\"so_41760241_41762123_1\">\n<ol start=\"6\">\n<li>A variable is introduced by the declaration of a reference other than a non-static data member or of an\n  object. The variable\u2019s name, if any, denotes the reference or object.</li>\n</ol>\n</blockquote>\n<p>Which means that saying <code>a variable</code> includes static data members</p>\n<ul>\n<li><p>A <code>static member function</code> is a <code>function</code> (a red car is a car, this is a logical conclusion and i don't seem to find anything counter indicating this in the standard).</p></li>\n<li><p>There isn't any syntax or behaviour problem applying particularly to static members, a static function is pretty much a free function in a namespace and static data member is more or less a global variable in a namespace and you can deprecate free functions and global variables..</p></li>\n<li><p>As a bonus, it actually works in major compilers.</p></li>\n</ul>\n<hr>\n<p>Summing up all this facts basically means that the <code>[[deprecated]]</code> attribute may actually be applied to a static data member, a non-static data member and a static member function, among other things.</p>\n<p>So to answer your question, from my understanding, deprecating static members is actually allowed by the standard.</p>\n</hr>", "LastActivityDate": "2017-03-28T08:53:54.530"}, "bq_ids": {"n4140": {"so_41760241_41762123_0": {"section_id": 5550, "quality": 0.8235294117647058, "length": 14}, "so_41760241_41762123_1": {"section_id": 7029, "quality": 0.875, "length": 14}}, "n3337": {"so_41760241_41762123_1": {"section_id": 6775, "quality": 0.875, "length": 14}}, "n4659": {"so_41760241_41762123_0": {"section_id": 6981, "quality": 0.9411764705882353, "length": 16}, "so_41760241_41762123_1": {"section_id": 8526, "quality": 0.875, "length": 14}}}, "41760241": {"CommentCount": "5", "ViewCount": "201", "PostTypeId": "1", "LastEditorUserId": "3150802", "CreationDate": "2017-01-20T09:33:53.433", "LastActivityDate": "2017-03-28T08:53:54.530", "Title": "Deprecating static class members in C++11", "AcceptedAnswerId": "41762123", "LastEditDate": "2017-01-20T09:40:50.387", "Id": "41760241", "Score": "3", "Body": "<p>I have come across different macros which enable deprecation of member attributes and functions but none of them discuss the possibility of deprecating static class members.</p>\n<p>I read that even in C++14 deprecation of static members is <a href=\"http://josephmansfield.uk/articles/marking-deprecated-c++14.html\" rel=\"nofollow noreferrer\">not allowed</a>. </p>\n<p>Is there any specific reason for this?</p>\n", "Tags": "<c++><c++11>", "OwnerUserId": "811625", "AnswerCount": "1"}});