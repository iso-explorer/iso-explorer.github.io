post_cb({"24423825": {"Id": "24423825", "PostTypeId": "2", "Body": "<p>There can be a slight difference in a <strong>non-optimized</strong> build: the integer constant 1 can (should ?) be promoted to double at run-time rather than compile-time.</p>\n", "LastActivityDate": "2014-06-26T06:31:01.613", "CommentCount": "2", "CreationDate": "2014-06-26T06:31:01.613", "ParentId": "24423651", "Score": "0", "OwnerUserId": "1196549"}, "24423822": {"Id": "24423822", "PostTypeId": "2", "Body": "<p>No difference in any self respecting compiler, the implicit cast will surely be performed at compile time, probably even with optimizations disabled. If you have some doubt however  you can always check the generated assembly. </p>\n<p>Now, stylistically speaking, I prefer to always have my constants of the \"correct\" type (especially in expressions where some terms may get changed to int later), although some people think that all the trailing  <code>.0</code> just add visual clutter (but: you can avoid the trailing <code>0</code> and just leave the dot to specify a double literal - as in <code>1.</code>).  </p>\n", "LastEditorUserId": "214671", "LastActivityDate": "2014-06-26T07:37:12.423", "Score": "2", "CreationDate": "2014-06-26T06:30:55.193", "ParentId": "24423651", "CommentCount": "0", "OwnerUserId": "214671", "LastEditDate": "2014-06-26T07:37:12.423"}, "bq_ids": {"n4140": {"so_24423651_24423821_1": {"length": 19, "quality": 0.7916666666666666, "section_id": 38}}, "n3337": {"so_24423651_24423821_1": {"length": 19, "quality": 0.7916666666666666, "section_id": 35}}, "n4659": {"so_24423651_24423821_1": {"length": 17, "quality": 0.7083333333333334, "section_id": 38}}}, "24423821": {"Id": "24423821", "PostTypeId": "2", "Body": "<p>Referring to c++03 here.</p>\n<blockquote>\n<p id=\"so_24423651_24423821_0\">4.9 Floating-integral conversions [conv.fpint]</p>\n<p id=\"so_24423651_24423821_1\">An rvalue of an integer type or of an enumeration type can be\n  converted to an rvalue of a floating point type. The result is exact\n  if possible. Otherwise, it is an implementation-defined choice of\n  either the next lower or higher representable value.</p>\n</blockquote>\n<p>If your system can represent 1.0 exactly (and looks like it can), then the expressions are same.</p>\n", "LastActivityDate": "2014-06-26T06:30:53.030", "CommentCount": "1", "CreationDate": "2014-06-26T06:30:53.030", "ParentId": "24423651", "Score": "3", "OwnerUserId": "503352"}, "24423651": {"ViewCount": "217", "Body": "<p>Suppose we have <code>double f;</code></p>\n<p>Is any difference between <code>f+=1</code> and <code>f+=1.0</code> ?</p>\n<p>How does the compiler handler these situations?</p>\n<p>I tried on my computer and loop 10<sup>10</sup> times, the elapsed time is almost the same</p>\n", "AcceptedAnswerId": "24423821", "Title": "is there any difference between f+=1 and f+=1.0 if f is a double?", "CreationDate": "2014-06-26T06:20:09.690", "Id": "24423651", "CommentCount": "2", "LastEditDate": "2014-06-26T06:34:24.067", "PostTypeId": "1", "LastEditorUserId": "1009479", "LastActivityDate": "2014-06-26T09:03:23.403", "Score": "3", "OwnerUserId": "3318504", "Tags": "<c++>", "AnswerCount": "4"}, "24426447": {"Id": "24426447", "PostTypeId": "2", "Body": "<p>You can always <a href=\"http://ideone.com/3GJslN\" rel=\"nofollow\">check</a> it for your system :</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;type_traits&gt;\n\nusing namespace std;\n\nint main() \n{\n    double f(0.);\n    cout &lt;&lt; std::is_same&lt;decltype(f+1), decltype(f+1.)&gt;::value &lt;&lt; endl;\n    return 0;\n}\n</code></pre>\n<p><sup>If anyone finds a case where they differ I'd appreciate a comment</sup></p>\n", "LastActivityDate": "2014-06-26T09:03:23.403", "CommentCount": "2", "CreationDate": "2014-06-26T09:03:23.403", "ParentId": "24423651", "Score": "0", "OwnerUserId": "2567683"}});