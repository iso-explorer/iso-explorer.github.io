post_cb({"bq_ids": {"n4140": {"so_16132252_16132283_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 382}}, "n3337": {"so_16132252_16132283_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 373}}, "n4659": {"so_16132252_16132283_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 397}}}, "16132252": {"ViewCount": "115", "Body": "<p>Can the code below cause segmentation fault?</p>\n<pre><code>struct Dim {\n  int x, y, z;\n};\n\nDim set_dim(int a) {\n Dim l;\n l.x=a;\n l.y=a;\n l.z=a;\n return l;\n}\n\nint sum(const Dim &amp;m) {\n  int s=m.x+m.y;\n  return s;\n}\n\nmain() {\n  cout&lt;&lt;sum(set_dim(5))&lt;&lt;endl;\n}\n</code></pre>\n<p>I think it can because a reference is taken of a local variable 'l' in set_dim, in other word a reference to variable now out of scope. But never the less it works</p>\n", "AcceptedAnswerId": "16132283", "Title": "No Segmentation fault why? returned function value used as parameter", "CreationDate": "2013-04-21T14:37:14.830", "Id": "16132252", "CommentCount": "1", "PostTypeId": "1", "LastActivityDate": "2013-04-21T14:45:58.040", "Score": "1", "OwnerUserId": "2304458", "Tags": "<c++><function><segmentation-fault>", "AnswerCount": "3"}, "16132283": {"Id": "16132283", "PostTypeId": "2", "Body": "<p>This is well-defined. <code>set_dim</code> returns by value, so its returned object is a temporary copy of the local variable <code>l</code>. This temporary is then bound to the <code>const</code> reference argument of <code>sum</code>. This affects the lifetime of the temporary object:</p>\n<blockquote>\n<p id=\"so_16132252_16132283_0\">A temporary bound to a reference parameter in a function call (5.2.2) persists until the completion of the full-expression containing the call.</p>\n</blockquote>\n<p>So the lifetime of the temporary object is the full-expression <code>cout&lt;&lt;sum(set_dim(5))&lt;&lt;endl;</code>. It still exists while <code>sum</code> is executing.</p>\n", "LastActivityDate": "2013-04-21T14:40:09.283", "CommentCount": "0", "CreationDate": "2013-04-21T14:40:09.283", "ParentId": "16132252", "Score": "3", "OwnerUserId": "150634"}, "16132278": {"Id": "16132278", "PostTypeId": "2", "Body": "<p>A reference of <code>l</code> is never taken (<em>not directly may be due to return value optimizations indirectly but you don't have to worry about that</em>).   </p>\n<ul>\n<li><p><code>set_dim</code> returns a <strong>copy of <code>l</code></strong>. A temporary copy which will be\npassed to <code>sum</code>.</p></li>\n<li><p><code>sum</code> can accept a temporary because it takes a const reference and\neverything worked out just fine and they all lived happily until\n<code>sum</code> returned.</p></li>\n</ul>\n", "LastEditorUserId": "6271971", "LastActivityDate": "2013-04-21T14:45:58.040", "Score": "3", "CreationDate": "2013-04-21T14:39:43.523", "ParentId": "16132252", "CommentCount": "0", "LastEditDate": "2013-04-21T14:45:58.040", "OwnerUserId": "6271971"}, "16132318": {"Id": "16132318", "PostTypeId": "2", "Body": "<p><code>set_dim</code> does not return a reference but a copy of l, so I don't think there is any chance of seg fault.</p>\n", "LastActivityDate": "2013-04-21T14:43:09.460", "CommentCount": "0", "CreationDate": "2013-04-21T14:43:09.460", "ParentId": "16132252", "Score": "1", "OwnerUserId": "1422441"}});