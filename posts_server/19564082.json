post_cb({"bq_ids": {"n4140": {"so_19564082_19564267_0": {"length": 16, "quality": 0.8888888888888888, "section_id": 434}}, "n3337": {"so_19564082_19564267_0": {"length": 16, "quality": 0.8888888888888888, "section_id": 426}}, "n4659": {"so_19564082_19564267_0": {"length": 16, "quality": 0.8888888888888888, "section_id": 452}}}, "19564152": {"Id": "19564152", "PostTypeId": "2", "Body": "<p>When you're initializating <code>data</code> in the constructor's initialization list, its parametrized constructor is called.<br/>\nExample:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nclass Data {\npublic:\n    Data(int firstArg, std::string mSecondArg)\n    {\n        std::cout&lt;&lt;\"parameterized constructor called\"&lt;&lt;std::endl;\n    }\n};\n\nclass SomeClass {\npublic:\n    SomeClass(int firstArg, std::string secondArg) : data(firstArg, secondArg) {}\nprivate:\n    Data data;\n};\n\nint main(int argc, char** argv) {\n    SomeClass someObj = new SomeClass(0, new std::string(\"empty\"));\n    return 0;\n}\n</code></pre>\n<p>With this code you will get output<br/>\n<code>parameterized constructor called</code></p>\n", "LastEditorUserId": "1755470", "LastActivityDate": "2013-10-24T11:12:36.817", "Score": "0", "CreationDate": "2013-10-24T11:03:47.730", "ParentId": "19564082", "CommentCount": "0", "OwnerUserId": "1755470", "LastEditDate": "2013-10-24T11:12:36.817"}, "19564157": {"Id": "19564157", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_19564082_19564157_0\">If data appears in the constructor's initialization list, then it is simply initialized to the given value.</p>\n</blockquote>\n<p>No, it is initialised using whatever arguments are supplied. If it has a class type, then the arguments are passed to a suitable constructor.</p>\n<blockquote>\n<p id=\"so_19564082_19564157_1\">Does this imply that there is no constructor call for creating data?</p>\n</blockquote>\n<p>No. If it has a class type, then initialisation is done by calling a constructor.</p>\n", "LastActivityDate": "2013-10-24T11:04:03.813", "CommentCount": "0", "CreationDate": "2013-10-24T11:04:03.813", "ParentId": "19564082", "Score": "2", "OwnerUserId": "204847"}, "19564267": {"Id": "19564267", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_19564082_19564267_0\"><strong>\u00a712.6.2/7:</strong> The expression-list or braced-init-list in a mem-initializer is used to initialize the designated subobject (or, in the case of a delegating constructor, the complete class object) according to the initialization rules of <strong>8.5</strong> for direct-initialization.</p>\n</blockquote>\n<p>Which, in other words, means the normal constructor is called.</p>\n<p>For example:</p>\n<pre><code>class Foo { Bar bar; Foo () : bar(...) { } };\n</code></pre>\n<p>is analoguous to creating <code>Bar</code> object as such:</p>\n<pre><code>Bar bar (...);\n</code></pre>\n", "LastActivityDate": "2013-10-24T11:09:02.293", "CommentCount": "0", "CreationDate": "2013-10-24T11:09:02.293", "ParentId": "19564082", "Score": "0", "OwnerUserId": "752976"}, "19564082": {"ViewCount": "73", "Body": "<p>If a member object <code>data</code> does <strong>not</strong> appear in the constructor's initialization list, then <code>data</code> is constructed by its default constructor.</p>\n<p>If <code>data</code> <strong>appears</strong> in the constructor's initialization list, then it is simply <em>initialized</em> to the given value. Does this imply that there is no constructor call for creating <code>data</code>? How is the new object <code>data</code> constructed then?</p>\n", "AcceptedAnswerId": "19564157", "Title": "When is a member object constructed when initialized in the constructor's initialization list?", "CreationDate": "2013-10-24T11:00:24.780", "Id": "19564082", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2013-10-24T11:12:36.817", "Score": "1", "OwnerUserId": "2564569", "Tags": "<c++><initializer-list><default-constructor>", "AnswerCount": "3"}});