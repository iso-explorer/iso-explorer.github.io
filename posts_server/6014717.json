post_cb({"6014741": {"ParentId": "6014717", "PostTypeId": "2", "CommentCount": "1", "CreationDate": "2011-05-16T08:23:16.747", "Score": "7", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:07:40.033", "Id": "6014741", "OwnerUserId": "452307", "Body": "<p>Current C++ standard does not allow non-POD types inside unions. Hence you get this compiler error from gcc.<br>\nInstead of using C unions, you should use <code>boost::variant</code>. Check the doccumentation <a href=\"http://www.boost.org/doc/libs/1_38_0/doc/html/variant.html\" rel=\"nofollow noreferrer\">here</a>.</br></p>\n<p>To add to the above:<br>\nThe new C++ standard(C++0x) adds a new feature called as <strong><em><a href=\"https://stackoverflow.com/questions/5548636/what-are-unrestricted-unions-proposed-in-c0x\">Unrestricted Unions</a></em></strong>, which supports storing non-POD types to a Union.</br></p>\n", "LastActivityDate": "2011-05-16T08:41:54.973"}, "6014717": {"CommentCount": "0", "ViewCount": "9238", "PostTypeId": "1", "LastEditorUserId": "718379", "CreationDate": "2011-05-16T08:20:28.207", "LastActivityDate": "2012-09-25T23:28:42.210", "Title": "... with constructor not allowed in union problem", "AcceptedAnswerId": "6014776", "LastEditDate": "2012-09-25T23:28:42.210", "Id": "6014717", "Score": "7", "Body": "<p>I desperately need to find a solution for the following problem:</p>\n<pre><code>namespace test\n{\n    template &lt;int param = 0&gt; struct Flags\n    {\n        int _flags;\n\n        Flags()\n        {\n            _flags = 0;\n        }\n\n        Flags(int flags)\n        {\n            _flags = flags;\n        }\n\n        void init()\n        {\n\n        }\n    };\n\n    union example\n    {\n        struct\n        {\n            union\n            {\n                struct\n                {\n                    Flags&lt;4096&gt; f;\n                }p1; //error: member 'test::example::&lt;anonymous struct&gt;::&lt;anonymous union&gt;::&lt;anonymous struct&gt; test::example::&lt;anonymous struct&gt;::&lt;anonymous union&gt;::p1' with constructor not allowed in union\n\n                struct \n                {\n                    Flags&lt;16384&gt; ff;\n                }p2; //error: member 'test::example::&lt;anonymous struct&gt;::&lt;anonymous union&gt;::&lt;anonymous struct&gt; test::example::&lt;anonymous struct&gt;::&lt;anonymous union&gt;::p2' with constructor not allowed in union\n            }parts;\n\n            byte bytes[8];\n        }data;\n\n        int data1;\n        int data2;\n    }\n}\n</code></pre>\n<p><br>\nIt's frustrating that if I add tags to p1 and p2 structs, the code will compile, but the f &amp; ff members would not be accessible:</br></p>\n<pre><code>...\nstruct p1\n{\n    Flags&lt;4096&gt; f;\n};\n\nstruct p2\n{\n    Flags&lt;4096&gt; ff;\n};\n...\n\nvoid test()\n{\n    example ex;\n    ex.data.bytes[0] = 0; //Ok\n    ex.data.parts.p1.f.init(); //error: invalid use of 'struct test::example::&lt;anonymous struct&gt;::&lt;anonymous union&gt;::p1'\n}\n</code></pre>\n<p><br>\nIs there any way to make this work somehow?</br></p>\n", "Tags": "<c++><visual-c++><gcc><struct><unions>", "OwnerUserId": "714964", "AnswerCount": "3"}, "6014776": {"ParentId": "6014717", "CommentCount": "1", "CreationDate": "2011-05-16T08:28:24.267", "OwnerUserId": "415784", "PostTypeId": "2", "Id": "6014776", "Score": "8", "Body": "<p>As @Als said, union cannot define non-POD as member data, there is one alternative. You can still define a pointer to the non-POD as member data of the union.</p>\n<p>So this is allowed:</p>\n<pre><code>union\n{\n   struct\n   {\n      Flags&lt;4096&gt; *pf; //pointer to non-POD\n   }p1;\n   struct \n   {\n      Flags&lt;16384&gt; *pff; //pointer to non-POD\n   }p2;\n}parts;\n</code></pre>\n<p>But then <a href=\"http://www.boost.org/doc/libs/1_38_0/doc/html/variant.html\">Boost.Variant</a> is a better alternative.</p>\n", "LastActivityDate": "2011-05-16T08:28:24.267"}, "bq_ids": {"n4140": {"so_6014717_6014887_1": {"section_id": 5914, "quality": 0.8, "length": 28}}, "n3337": {"so_6014717_6014887_1": {"section_id": 5686, "quality": 0.8, "length": 28}}, "n4659": {"so_6014717_6014887_1": {"section_id": 7406, "quality": 0.8, "length": 28}}}, "6014887": {"ParentId": "6014717", "CommentCount": "0", "CreationDate": "2011-05-16T08:41:12.803", "OwnerUserId": "534498", "PostTypeId": "2", "Id": "6014887", "Score": "0", "Body": "<p>C++ standard 2003 doesn't allow this (from Standard 9.5):</p>\n<blockquote>\n<p id=\"so_6014717_6014887_0\">An object of a class with a\n  non-trivial constructor (12.1), a\n  non-trivial copy constructor (12.8), a\n  non-trivial destructor (12.4), or a\n  non-trivial copy assignment operator\n  (13.5.3, 12.8) cannot be a member of a\n  union, nor can an array of such\n  objects.</p>\n</blockquote>\n<p>But C++0x allows it, however, you need to define your own constructor because default constructor will be declared as deleted if you don't define your own.</p>\n<p>From N3291 9.5:</p>\n<blockquote>\n<p id=\"so_6014717_6014887_1\">If any non-static data member of a\n  union has a non-trivial default\n  constructor (12.1), copy constructor\n  (12.8), move constructor (12.8), copy\n  assignment operator (12.8), move\n  assignment operator (12.8), or\n  destructor (12.4), the corresponding\n  member function of the union must be\n  user-provided or it will be implicitly\n  deleted (8.4.3) for the union.</p>\n</blockquote>\n<p>Other people has suggested Boost.Variant. For simple fix, just remove the constructor from Flag class. Though you need to initialize it manually whenever you initialize the union object, it won't be confusing because union is essentially a C feature. </p>\n", "LastActivityDate": "2011-05-16T08:41:12.803"}});