post_cb({"40512515": {"CreationDate": "2016-11-09T17:14:14.653", "CommentCount": "3", "Body": "<p>You can use this:</p>\n<pre><code>#if __cplusplus &gt;= 201103L || (__cplusplus &lt; 200000 &amp;&amp; __cplusplus &gt; 199711L)\n    cout &lt;&lt; \"C++11 is supported\";\n#else\n    cout &lt;&lt; \"C++11 is not supported\";\n#endif\n</code></pre>\n<p>For C++11, some compilers set the <code>__cplusplus</code> macro at <code>201103L</code> and others set it at <code>199711L</code>. This solution is compatible with both these cases.</p>\n", "Id": "40512515", "OwnerUserId": "4284627", "LastEditDate": "2017-02-23T18:13:53.487", "ParentId": "5047971", "LastActivityDate": "2017-02-23T18:13:53.487", "PostTypeId": "2", "Score": "5", "LastEditorUserId": "4284627"}, "34681870": {"CommentCount": "0", "Body": "<p>For check support C++14 and other. Testing on GCC 5.2.1.</p>\n<pre><code>#include &lt;iostream&gt;\n\nint main(){\n        #if __cplusplus==201402L\n        std::cout &lt;&lt; \"C++14\" &lt;&lt; std::endl;\n        #elif __cplusplus==201103L\n        std::cout &lt;&lt; \"C++11\" &lt;&lt; std::endl;\n        #else\n        std::cout &lt;&lt; \"C++\" &lt;&lt; std::endl;\n        #endif\n\n        return 0;\n}\n</code></pre>\n", "CreationDate": "2016-01-08T16:38:19.683", "ParentId": "5047971", "Id": "34681870", "LastActivityDate": "2016-01-08T16:38:19.683", "PostTypeId": "2", "Score": "14", "OwnerUserId": "5763801"}, "5047971": {"FavoriteCount": "25", "ViewCount": "53289", "Id": "5047971", "AcceptedAnswerId": "5047980", "Score": "79", "Title": "How do I check for C++11 support?", "LastEditorUserId": "497934", "CommentCount": "2", "Body": "<p>Is there a way to detect at compile-time if the compiler supports certain features of C++11?  For example, something like this:</p>\n<pre><code>#ifndef VARIADIC_TEMPLATES_SUPPORTED\n\n#error \"Your compiler doesn't support variadic templates.  :(\"\n\n#else\n\ntemplate &lt;typename... DatatypeList&gt;\nclass Tuple\n{\n    // ...\n}\n\n#endif\n</code></pre>\n", "Tags": "<c++><c++11>", "CreationDate": "2011-02-19T00:26:28.207", "LastEditDate": "2012-05-09T04:27:19.340", "LastActivityDate": "2017-02-23T18:13:53.487", "PostTypeId": "1", "AnswerCount": "9", "OwnerUserId": "497934"}, "27459246": {"CreationDate": "2014-12-13T13:21:27.690", "CommentCount": "1", "Body": "<p>If you do not want to use Boost.Config and need to test for compilers that support C++11 then checking the value of the constant <code>__cplusplus</code> will do. However, a compiler might support most of the popular features of the C++11 standard yet it does not support the entire specifications. If you want to enable support for specific Visual Studio compilers which are not yet 100% compliant to C++11 specifications then use the following code snippet which allows compiling in Visual Studio 2013:</p>\n<pre><code>#if defined(_MSC_VER)\n#   if _MSC_VER &lt; 1800 \n#       error This project needs atleast Visual Studio 2013\n#   endif\n#elif __cplusplus &lt;= 199711L\n#   error This project can only be compiled with a compiler that supports C++11\n#endif\n</code></pre>\n<p>A complete list of versions of the compiler for Visual Studio is provided at <a href=\"https://stackoverflow.com/questions/70013/how-to-detect-if-im-compiling-code-with-visual-studio-2008\">How to Detect if I'm Compiling Code With Visual Studio 2008</a></p>\n", "Id": "27459246", "OwnerUserId": "4333690", "LastEditDate": "2017-05-23T12:10:36.343", "ParentId": "5047971", "LastActivityDate": "2015-04-30T02:25:19.693", "PostTypeId": "2", "Score": "7", "LastEditorUserId": "-1"}, "35399513": {"CommentCount": "1", "Body": "<p>I know that this is a very old question, but this question might be often seen, and the answers are a bit out of date. </p>\n<p>Newer compilers with the C++14 standard have a standard way to check features, including C++11 features. A comprehensive page is at <a href=\"https://isocpp.org/std/standing-documents/sd-6-sg10-feature-test-recommendations\">https://isocpp.org/std/standing-documents/sd-6-sg10-feature-test-recommendations</a></p>\n<p>In summary, each feature has a standard macro defined that you can check with <code>#ifdef</code>. For example, to check for user defined literals, you can use</p>\n<pre><code>#ifdef __cpp_user_defined_literals\n</code></pre>\n", "CreationDate": "2016-02-14T23:52:12.150", "ParentId": "5047971", "Id": "35399513", "LastActivityDate": "2016-02-14T23:52:12.150", "PostTypeId": "2", "Score": "19", "OwnerUserId": "1015774"}, "29407260": {"CommentCount": "1", "Body": "<p>As stated by the <strong>C++11</strong> standard (\u00a7iso.16.8):</p>\n<blockquote>\n<p id=\"so_5047971_29407260_0\">The name <strong>__cplusplus</strong> is defined to the value <strong>201103L</strong> when\n  compiling a C++ translation unit.</p>\n</blockquote>\n<p>With the value of that macro, you can check whether the compiler is C++11 compliant. </p>\n<p>Now, if you are looking for a standard way to check if the compiler supports a whatsoever subset of C++11 features, I think there is no standard, portable way; you can check compilers documentation or std library header files to get more information.</p>\n", "CreationDate": "2015-04-02T07:22:58.253", "ParentId": "5047971", "Id": "29407260", "LastActivityDate": "2015-04-02T07:22:58.253", "PostTypeId": "2", "Score": "23", "OwnerUserId": "2508150"}, "5047980": {"CreationDate": "2011-02-19T00:28:34.567", "CommentCount": "2", "Body": "<p><a href=\"http://www.boost.org/doc/libs/1_45_0/libs/config/doc/html/index.html\">Boost.Config</a> has <a href=\"http://www.boost.org/doc/libs/release/libs/config/doc/html/boost_config/boost_macro_reference.html#boost_config.boost_macro_reference.macros_that_describe_c__11_features_not_supported\">a plethora of macros</a> that can be used to test for support for specific C++11 features.</p>\n", "Id": "5047980", "OwnerUserId": "151292", "LastEditDate": "2012-03-10T03:46:29.043", "ParentId": "5047971", "LastActivityDate": "2012-03-10T03:46:29.043", "PostTypeId": "2", "Score": "52", "LastEditorUserId": "151292"}, "bq_ids": {"n4140": {"so_5047971_29407260_0": {"length": 7, "quality": 0.7, "section_id": 550}}, "n3337": {"so_5047971_29407260_0": {"length": 7, "quality": 0.7, "section_id": 541}}}, "5048084": {"CommentCount": "3", "Body": "<p>In the traditional Linux/Unix world, autoconf is traditionally used to test for the presence of libraries and compiler features and bugs placing them into a config.h that you use in your files as needed.</p>\n", "CreationDate": "2011-02-19T00:47:44.100", "ParentId": "5047971", "Id": "5048084", "LastActivityDate": "2011-02-19T00:47:44.100", "PostTypeId": "2", "Score": "5", "OwnerUserId": "270327"}, "21400212": {"CommentCount": "0", "Body": "<p>I just wrote a small test suite to check which C++11 features are supported by a specific compiler. However, this is of course a 'pre-compile-time' check.</p>\n<p><a href=\"https://github.com/sloede/cxx11tests\">https://github.com/sloede/cxx11tests</a></p>\n", "CreationDate": "2014-01-28T08:18:31.227", "ParentId": "5047971", "Id": "21400212", "LastActivityDate": "2014-01-28T08:18:31.227", "PostTypeId": "2", "Score": "16", "OwnerUserId": "1329844"}, "10849807": {"CreationDate": "2012-06-01T11:55:39.440", "CommentCount": "5", "Body": "<p>There is a constant named <code>__cplusplus</code> that C++ compilers should set to the version of the C++ standard supported <a href=\"http://www.stroustrup.com/C++11FAQ.html#11\" rel=\"noreferrer\">see this</a></p>\n<pre><code>#if __cplusplus &lt;= 199711L\n  #error This library needs at least a C++11 compliant compiler\n#endif\n</code></pre>\n<p>It is set to 199711L in Visual Studio 2010 SP1, but I do not know if vendors will be so bold to increase it already if they just have (partial) compiler-level support versus a standard C++ library with all the C++11 changes.</p>\n<p>So Boost's defines mentioned in another answer remain the only sane way to figure out if there is, for example, support for C++11 threads and other specific parts of the standard.</p>\n", "Id": "10849807", "OwnerUserId": "133183", "LastEditDate": "2015-07-04T19:24:22.630", "ParentId": "5047971", "LastActivityDate": "2015-07-04T19:24:22.630", "PostTypeId": "2", "Score": "94", "LastEditorUserId": "1983495"}});