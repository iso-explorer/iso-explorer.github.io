post_cb({"25278576": {"ParentId": "11085916", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>This is just a humble attempt to start solving this problem. (Suggestions are welcomed.)</p>\n<p>I have been dealing with this problem a long time. A case were the problem is very obvious is this case:</p>\n<pre><code>#include&lt;cmath&gt;\n#include&lt;iostream&gt;\n\nnamespace mylib{\n    std::string exp(double x){return \"mylib::exp\";}\n}\n\nint main(){\n    std::cout &lt;&lt; std::exp(1.) &lt;&lt; std::endl; // works\n    std::cout &lt;&lt; mylib::exp(1.) &lt;&lt; std::endl; // works\n\n    using namespace mylib;\n    std::cout &lt;&lt; exp(1.) &lt;&lt; std::endl; //doesn't works!, \"ambiguous\" call\n    return 0;\n}\n</code></pre>\n<p>This is in my opinion is an annoying bug or at the least an very unfortunate situation. (At least in GCC, and clang --using GCC library-- in Linux.)  </p>\n<p>Lately I gave it another shot to the problem. By looking at the <code>cmath</code> (of GCC) it seems that the header is there simply to overload the C-functions and screws up the namespace in the process.</p>\n<pre><code>namespace std{\n   #include&lt;math.h&gt;\n}\n//instead of #include&lt;cmath&gt;\n</code></pre>\n<p>With it this works</p>\n<pre><code>using namespace mylib;\nstd::cout &lt;&lt; exp(1.) &lt;&lt; std::endl; //now works.\n</code></pre>\n<p>I am almost sure that this is not exactly equivalent to <code>#include&lt;cmath&gt;</code> but most functions seem to work. </p>\n<p>Worst of all is that eventually some dependence library will eventually will <code>#inclulde&lt;cmath&gt;</code>. For that I couldn't find a solution yet.</p>\n<p><strong>NOTE</strong>: Needless to say this doesn't work at all</p>\n<pre><code>namespace std{\n   #include&lt;cmath&gt; // compile errors\n}\n</code></pre>\n", "OwnerUserId": "225186", "LastEditorUserId": "225186", "LastEditDate": "2014-08-13T05:53:48.677", "Id": "25278576", "Score": "1", "CreationDate": "2014-08-13T05:20:46.057", "LastActivityDate": "2014-08-13T05:53:48.677"}, "12805610": {"ParentId": "11085916", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>If you really wanted to, you could always write a little wrapper around <code>cmath</code>, along the lines of:</p>\n<pre><code>//stdmath.cpp\n#include &lt;cmath&gt;\nnamespace stdmath\n{\n    double sin(double x)\n    {\n        return std::sin(x);\n    }\n}\n\n//stdmath.hpp\n#ifndef STDMATH_HPP\n#define STDMATH_HPP\nnamespace stdmath {\n    double sin(double);\n}\n#endif\n\n//uses_stdmath.cpp\n#include &lt;iostream&gt;\n#include \"stdmath.hpp\"\n\ndouble sin(double x)\n{\n    return 1.0;\n}\n\nint main()\n{\n    std::cout &lt;&lt; stdmath::sin(1) &lt;&lt; std::endl;\n    std::cout &lt;&lt; sin(1) &lt;&lt; std::endl;\n}\n</code></pre>\n<p>I suppose there could be some overhead from the additional function call, depending on how clever the compiler is.</p>\n", "OwnerUserId": "799222", "LastEditorUserId": "799222", "LastEditDate": "2012-10-09T17:57:43.343", "Id": "12805610", "Score": "3", "CreationDate": "2012-10-09T17:52:00.770", "LastActivityDate": "2012-10-09T17:57:43.343"}, "11085916": {"CommentCount": "6", "AcceptedAnswerId": "11086087", "CreationDate": "2012-06-18T15:21:53.910", "LastActivityDate": "2014-12-18T14:47:38.567", "PostTypeId": "1", "ViewCount": "8699", "FavoriteCount": "6", "Title": "Why are some functions in <cmath> not in the std namespace?", "Id": "11085916", "Score": "24", "Body": "<p>I am developing a project which works with multiple arithmetic types. So I made a header, where the minimal requirements for a user defined arithmetic type are defined:</p>\n<p><strong>user_defined_arithmetic.h :</strong></p>\n<pre><code>typedef double ArithmeticF;   // The user chooses what type he \n                              // wants to use to represent a real number\n\nnamespace arithmetic          // and defines the functions related to that type\n{\n\nconst ArithmeticF sin(const ArithmeticF&amp; x);\nconst ArithmeticF cos(const ArithmeticF&amp; x);\nconst ArithmeticF tan(const ArithmeticF&amp; x);\n...\n}\n</code></pre>\n<p>What is troubling me is that when I use code like this:</p>\n<pre><code>#include \"user_defined_arithmetic.h\"\n\nvoid some_function()\n{\n    using namespace arithmetic;\n    ArithmeticF lala(3);\n    sin(lala);\n}\n</code></pre>\n<p>I get a compiler error:</p>\n<pre><code>error: call of overloaded 'sin(ArithmeticF&amp;)' is ambiguous\ncandidates are:\ndouble sin(double)\nconst ArithmeticF arithmetic::sin(const ArithmeticF&amp;)\n</code></pre>\n<p>I have never used the <code>&lt;math.h&gt;</code> header, only the <code>&lt;cmath&gt;</code>. I have never used the <code>using namespace std</code> in a header file. </p>\n<p>I am using gcc 4.6.*. I checked what is the header containing the ambiguous declaration and it turns out to be:</p>\n<p><strong>mathcalls.h :</strong></p>\n<pre><code>Prototype declarations for math functions; helper file for &lt;math.h&gt;.\n...\n</code></pre>\n<p>I know, that <code>&lt;cmath&gt;</code> includes <code>&lt;math.h&gt;</code>, but it should shield the declarations by the std namespace. I dig into the <code>&lt;cmath&gt;</code> header and find:</p>\n<p><strong>cmath.h :</strong></p>\n<pre><code>...\n\n#include &lt;math.h&gt;\n\n...\n\n// Get rid of those macros defined in &lt;math.h&gt; in lieu of real functions.\n#undef abs\n#undef div\n#undef acos\n...\n\nnamespace std _GLIBCXX_VISIBILITY(default)\n{\n...\n</code></pre>\n<p>So the namespace std begins <strong>after</strong> the <code>#include &lt;math.h&gt;</code>. Is there something wrong here, or did I misunderstand something?</p>\n", "Tags": "<c++><namespaces><cmath>", "OwnerUserId": "1097451", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_11085916_11086087_0": {"section_id": 6259, "quality": 0.9333333333333333, "length": 28}}, "n3337": {"so_11085916_11086087_0": {"section_id": 6019, "quality": 0.9333333333333333, "length": 28}}, "n4659": {"so_11085916_11086087_0": {"section_id": 7763, "quality": 0.9333333333333333, "length": 28}}}, "11086087": {"ParentId": "11085916", "CommentCount": "0", "Body": "<p>Implementations of the C++ standard library are permitted to declare C library functions in the global namespace as well as in <code>std</code>. Some would call this a mistake, since (as you've found) the namespace pollution can cause conflicts with your own names. However, that's the way it is, so we must live with it. You'll just have to qualify your name as <code>arithmetic::sin</code>.</p>\n<p>In the words of the standard (C++11 17.6.1.2/4):</p>\n<blockquote>\n<p id=\"so_11085916_11086087_0\">In the C++ standard library, however, the declarations (except for\n  names which are defined as macros in C) are within namespace scope (3.3.6) of the namespace <code>std</code>. <strong>It is\n  unspecified whether these names are first declared within the global namespace scope</strong> and are then injected\n  into namespace std by explicit using-declarations (7.3.3).</p>\n</blockquote>\n", "OwnerUserId": "204847", "PostTypeId": "2", "Id": "11086087", "Score": "16", "CreationDate": "2012-06-18T15:32:56.737", "LastActivityDate": "2012-06-18T15:32:56.737"}});