post_cb({"27783506": {"ParentId": "27783017", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2015-01-05T16:16:20.380", "Score": "2", "LastEditorUserId": "1532460", "LastEditDate": "2015-01-05T16:36:31.573", "Id": "27783506", "OwnerUserId": "1532460", "Body": "<p>According to Standard N3337, \u00a728.5.2, Table 139:</p>\n<blockquote>\n<p id=\"so_27783017_27783506_0\"><code>format_default</code>: When a regular expression match is to be replaced by a new string, the new string shall be constructed using the rules used\n  by the ECMAScript replace function in <strong>ECMA-262, part 15.5.4.11\n  String.prototype.replace</strong>. In addition, during search and replace\n  operations all non-overlapping occurrences of the regular expression\n  shall be located and replaced, and sections of the input that did not\n  match the expression shall be copied unchanged to the output string.</p>\n</blockquote>\n<p>And according to <a href=\"http://ecma-international.org/ecma-262/5.1/#sec-15.5.4.11\" rel=\"nofollow\">ECMA-262 part 15.5.4.11 String.prototype.replace</a>, Table 22</p>\n<blockquote>\n<p id=\"so_27783017_27783506_1\"><code>$nn</code>: The nn-th capture, where nn is a two-digit decimal number in the range\n  01 to 99. If nn\u2264m and the nnth capture is undefined, use the empty\n  String instead. If nn&gt;m, the result is implementation-defined.</p>\n</blockquote>\n<p>So, there could be at most two decimal digits after <code>$</code>, which refers to matching group, therefore you could use</p>\n<pre><code>\"$01\" + to_string(r)\n</code></pre>\n", "LastActivityDate": "2015-01-05T16:36:31.573"}, "27783017": {"CommentCount": "4", "ViewCount": "75", "PostTypeId": "1", "LastEditorUserId": "3237645", "CreationDate": "2015-01-05T15:52:02.550", "LastActivityDate": "2015-01-05T16:36:31.573", "Title": "When using regex_replace(), what't the correct way to back-reference a submatch when it's directly followed by another digit in the format string?", "AcceptedAnswerId": "27783506", "LastEditDate": "2015-01-05T16:13:33.150", "Id": "27783017", "Score": "1", "Body": "<p>In the following code, I tried to use <code>$1</code> to refer to the first submatch:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;regex&gt;\n\nusing namespace std;\n\nint main()\n{\n    string str {\"1-2-3 4-5-6 7-8-9\"};\n    int r = 1;\n    str = regex_replace(str, regex{R\"((\\d*-\\d*-)\\d*)\"}, \"$1\" + to_string(r));\n    cout &lt;&lt; str &lt;&lt; \"\\n\";\n    return 0;\n}\n</code></pre>\n<p>What I expect is:</p>\n<pre><code>1-2-1 4-5-1 7-8-1\n</code></pre>\n<p>But it doesn't work because the actual format string passed to <code>regex_replace()</code> is <code>$11</code> as if I were trying to refer to the 11th submatch.</p>\n<p>So when using <code>regex_replace()</code>, what is the correct way to back-reference a submatch which is followed directly by another digit in the format string?</p>\n<p>I tried using <code>${1}</code> but it didn't work for any of the mainstream implementations that I tried.</p>\n", "Tags": "<c++><regex><c++11>", "OwnerUserId": "3237645", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_27783017_27783506_0": {"section_id": 5058, "quality": 1.0, "length": 41}}, "n3337": {"so_27783017_27783506_0": {"section_id": 4855, "quality": 1.0, "length": 41}}, "n4659": {"so_27783017_27783506_0": {"section_id": 6479, "quality": 1.0, "length": 41}}}});