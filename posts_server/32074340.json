post_cb({"32074340": {"CommentCount": "5", "CreationDate": "2015-08-18T13:50:37.380", "PostTypeId": "1", "AcceptedAnswerId": "32075009", "LastEditorUserId": "2938082", "LastActivityDate": "2015-08-18T20:12:04.657", "LastEditDate": "2015-08-18T20:12:04.657", "ViewCount": "238", "FavoriteCount": "1", "Title": "Header files without explicitly writing namespace", "Id": "32074340", "Score": "8", "Body": "<p>In a C++ implementation file, I have the option to write something like:</p>\n<pre><code>name::space::ClassName::someFunction(int param) {\n    // impl\n}\n</code></pre>\n<p>instead of</p>\n<pre><code>namespace name {\n    namespace space {\n        ClassName::someFunction(int param) {\n            // impl\n        }\n    }\n}\n</code></pre>\n<p>which I find very convenient and more readable. Can this somehow be used in header files, too? Something like this:</p>\n<pre><code>class name::space::ClassName {\n    // declarations\n};\n</code></pre>\n<p>instead of</p>\n<pre><code>namespace name {\n    namespace space {\n        class ClassName {\n            // declarations\n        };\n    }\n}\n</code></pre>\n<p>If something like this is possible, then under which conditions? I could imagine, that one would need to <strike>forward declare the namespace</strike> forward declare the classes within the namespace like this:</p>\n<pre><code>namespace name {\n    namespace space {\n        class ClassName;\n    }\n}\n</code></pre>\n<p>before being able to use this:</p>\n<pre><code>class name::space::ClassName {\n    // declarations\n};\n</code></pre>\n<p>in a header file.</p>\n<p>But somehow I am not able to get this to work <strong>1]</strong>. Is it even possible? What bothers me is, that with nested namespaces I have to indent 2 tabs until I can actually declare my class. I would like to use that space in my header files, but I don't want to omit the tabs since this would be against the \"everything in curly brackets needs to be tabbed once\"-rule (I don't know if there is an actual name for this. If there is, excuse my ignorance, I don't know any :S</p>\n<p><strong>1]</strong> The problem I faced was not related to the question. The approach actually works, but it has drawbacks (see accepted answer).</p>\n", "Tags": "<c++>", "OwnerUserId": "2938082", "AnswerCount": "4"}, "32074528": {"ParentId": "32074340", "LastEditDate": "2015-08-18T14:39:52.367", "CommentCount": "6", "CreationDate": "2015-08-18T13:57:54.500", "OwnerUserId": "2508150", "LastEditorUserId": "2508150", "PostTypeId": "2", "Id": "32074528", "Score": "1", "Body": "<p>No, it is not possible. The only way to <strong>define</strong> a namespace is using the <code>namespace</code> keyword in combination with curly braces.</p>\n<blockquote>\n<p id=\"so_32074340_32074528_0\"><strong>7.3.1 Namespace definition [namespace.def]</strong></p>\n<p id=\"so_32074340_32074528_1\">1 The grammar for a namespace-definition is</p>\n<pre><code>  namespace-name:\n      original-namespace-name\n      namespace-alias\n  original-namespace-name:\n      identifier\n  namespace-definition:\n      named-namespace-definition\n      unnamed-namespace-definition\n  named-namespace-definition:\n      original-namespace-definition\n      extension-namespace-definition\n  original-namespace-definition:\n      inlineopt namespace identifier { namespace-body }\n  extension-namespace-definition:\n      inlineopt namespace original-namespace-name { namespace-body }\n  unnamed-namespace-definition:\n      inlineopt namespace { namespace-body }\n  namespace-body:\n      declaration-seqopt\n</code></pre>\n</blockquote>\n<p>You can define namespace's members outside the namespace, although it must have been <strong>declared</strong> inside the <code>namespace</code> (emphasis mine):</p>\n<blockquote>\n<p id=\"so_32074340_32074528_2\"><strong>7.3.1.2 Namespace member definitions [namespace.memdef]</strong></p>\n<p id=\"so_32074340_32074528_3\">2 Members of a named namespace can also be <em>defined outside</em> that namespace by explicit qualification (3.4.3.2)\n  of the name being defined, provided that the entity being defined was already <strong>declared in the namespace</strong>\n  and the definition appears after the point of declaration in a namespace that encloses the declaration\u2019s\n  namespace.</p>\n</blockquote>\n<p>When you write</p>\n<pre><code>namespace name {\n    namespace space {\n        class ClassName;\n    }\n}\n</code></pre>\n<p>you are not declaring a <code>class ClassName</code> into the <code>namespace space</code>, you are just providing a <em>forward declaration</em>.</p>\n", "LastActivityDate": "2015-08-18T14:39:52.367"}, "32074622": {"ParentId": "32074340", "CommentCount": "1", "Body": "<p>No, it doesn't work. One problem is that with</p>\n<pre><code>namespace name {\n    namespace space {\n        class ClassName {\n            // declarations\n        }\n    }\n}\n</code></pre>\n<p>you can tell that it is two namespaces and one class.</p>\n<p>However, with</p>\n<pre><code>class name::space::ClassName {\n    // declarations\n}\n</code></pre>\n<p>you cannot tell if <code>space</code> is a namespace or a class containing a nested <code>ClassName</code>.</p>\n<p>What you <em>can</em> do is save on your tabbing. It is possible to write</p>\n<pre><code>namespace name { namespace space {\n    class ClassName {\n        // declarations\n    }\n}}\n</code></pre>\n", "OwnerUserId": "597607", "PostTypeId": "2", "Id": "32074622", "Score": "6", "CreationDate": "2015-08-18T14:02:19.980", "LastActivityDate": "2015-08-18T14:02:19.980"}, "32074956": {"ParentId": "32074340", "CommentCount": "3", "Body": "<p>What you are seeking does not work.</p>\n<p>One explanation is that all C++ <code>class</code> and <code>struct</code> types are implicitly associated with their own namespace (which has the same name as the class).</p>\n<p>So, given</p>\n<pre><code>class name::space::ClassName\n{\n// declarations\n};\n</code></pre>\n<p>the compiler has no way to determine whether <code>name</code> and <code>space</code> are actually namespaces or classes  (at best, it must conclude that the construct is ambiguous).   So the compiler needs to be explicitly told that <code>name</code> is a namespace, that <code>space</code> is a namespace within <code>name</code>, before being told that <code>ClassName</code> is a class within them.</p>\n<p>Hence the need for</p>\n<pre><code>namespace name\n{\n    namespace space\n    {\n        class ClassName;\n    }\n}\n</code></pre>\n<p>to forward specify both namespaces and forward declare <code>ClassName</code> within them.</p>\n", "OwnerUserId": "4706785", "PostTypeId": "2", "Id": "32074956", "Score": "2", "CreationDate": "2015-08-18T14:15:28.730", "LastActivityDate": "2015-08-18T14:15:28.730"}, "bq_ids": {"n4140": {"so_32074340_32074528_3": {"section_id": 5484, "quality": 0.967741935483871, "length": 30}}, "n3337": {"so_32074340_32074528_3": {"section_id": 5270, "quality": 0.967741935483871, "length": 30}}, "n4659": {"so_32074340_32074528_3": {"section_id": 6919, "quality": 0.967741935483871, "length": 30}}}, "32075009": {"ParentId": "32074340", "CommentCount": "3", "Body": "<p>If you simply don't want the namespace braces enveloping your class definition, you can certainly achieve that by defining the namespace somewhere else with just the class declaration inside. That way, you can come up with something like this:</p>\n<pre><code>#ifndef MYCLASS_H\n#define MYCLASS_H\n\nnamespace ClassNamespace { class MyClass; };\n\nclass ClassNamespace::MyClass\n{\npublic:\n    MyClass();\n    ~MyClass();\n    void a();\nprivate:\n\n};\n\n#endif // MYCLASS_H\n</code></pre>\n<p>for the header and this:</p>\n<pre><code>#include \"MyClass.h\"\n\n#include &lt;iostream&gt;\n\nusing namespace std;\n\nClassNamespace::MyClass::MyClass()\n{\n}\n\nClassNamespace::MyClass::~MyClass()\n{\n}\n\nvoid ClassNamespace::MyClass::a()\n{\n    cout &lt;&lt; \"hello\";\n}\n</code></pre>\n<p>for the implementation.</p>\n<p>As you can see, the namespace doesn't enclose the class definition, just its declaration.</p>\n<p>As a final note, I personally don't know why you'd want to do this or think it looks nicer to read. I'd personally much rather see the namespace encapsulate the class definition <em>as well as</em> the function definitions. But maybe I've been the odd one all along...</p>\n", "OwnerUserId": "2247607", "PostTypeId": "2", "Id": "32075009", "Score": "6", "CreationDate": "2015-08-18T14:18:04.030", "LastActivityDate": "2015-08-18T14:18:04.030"}});