post_cb({"bq_ids": {"n4140": {"so_42744245_42744535_1": {"length": 18, "quality": 0.5454545454545454, "section_id": 5445}, "so_42744245_42744535_0": {"length": 22, "quality": 0.9166666666666666, "section_id": 5445}}, "n4659": {"so_42744245_42744535_1": {"length": 28, "quality": 0.8484848484848485, "section_id": 6872}, "so_42744245_42744535_0": {"length": 18, "quality": 0.75, "section_id": 6872}}}, "42744535": {"Id": "42744535", "PostTypeId": "2", "LastEditDate": "2017-05-23T12:32:06.453", "CommentCount": "0", "LastEditorUserId": "-1", "LastActivityDate": "2017-03-12T06:36:21.827", "CreationDate": "2017-03-12T06:36:21.827", "ParentId": "42744245", "Score": "5", "Body": "<h2>Trailing return type should only be used with <code>auto</code></h2>\n<p>The point of <code>decltype(auto)</code> vs <code>auto</code> is to <a href=\"https://stackoverflow.com/questions/21369113/what-is-the-difference-between-auto-and-decltypeauto-when-returning-from-a-fun\">distinguish the case whether the return type should be a reference or value</a>. But in your case the return type is already explicitly defined as <code>decltype(std::get&lt;0&gt;(std::forward&lt;T&gt;(x)))</code>, so it will be perfectly-forwarded even if you use <code>auto</code>.</p>\n<p>In <code>auto f() -&gt; T</code>, the \"auto\" keyword is simply a <a href=\"https://stackoverflow.com/questions/12224325/what-is-the-meaning-of-auto-when-using-c-trailing-return-type\">syntactic construct to fill in a type position</a>. It serves no other purpose.</p>\n<hr>\n<p>In fact, in C++17 you <em>cannot</em> use a <code>decltype(auto)</code> with trailing-return-type together.</p>\n<p>C++14 wordings (n3936 \u00a77.1.6.4[dcl.spec.auto]/1):</p>\n<blockquote>\n<p id=\"so_42744245_42744535_0\">The <code>auto</code> and <code>decltype(auto)</code> <em>type-specifiers</em> designate a placeholder type that will be replaced later, either by deduction from an initializer or by explicit specification with a <em>trailing-return-type</em>. The <code>auto</code> <em>type-specifier</em> is also used to signify that a lambda is a generic lambda.</p>\n</blockquote>\n<p>C++17 wordings (n4618 \u00a77.1.7.4[dcl.spec.auto]/1):</p>\n<blockquote>\n<p id=\"so_42744245_42744535_1\">The <code>auto</code> and <code>decltype(auto)</code> <em>type-specifiers</em> are used to designate a placeholder type that will be replaced later by deduction from an initializer. The <code>auto</code> <em>type-specifier</em> is also used to introduce a function type having a <em>trailing-return-type</em> or to signify that a lambda is a generic lambda (5.1.5). The <code>auto</code> <em>type-specifier</em> is also used to introduce a decomposition declaration (8.5).</p>\n</blockquote>\n<p>This is <a href=\"http://open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1852\" rel=\"nofollow noreferrer\">DR 1852</a>, see <a href=\"https://stackoverflow.com/questions/24259947/does-a-placeholder-in-a-trailing-return-type-override-an-initial-placeholder\">Does a placeholder in a trailing-return-type override an initial placeholder?</a>.</p>\n<p>Practically, while <code>gcc</code> accepts <code>decltype(auto) f() -&gt; T</code> (<a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=67012\" rel=\"nofollow noreferrer\">which is a bug</a>), but <code>clang</code> will <strong>reject</strong> it saying</p>\n<pre><code>error: function with trailing return type must specify return type 'auto',\nnot 'decltype(auto)'\n</code></pre>\n</hr>", "OwnerUserId": "224671"}, "42744245": {"ViewCount": "173", "Body": "<p>Is there a difference between:</p>\n<pre><code>template &lt;class T&gt;\nconstexpr decltype(auto) f(T&amp;&amp; x) -&gt; decltype(std::get&lt;0&gt;(std::forward&lt;T&gt;(x)))\n{\n    return std::get&lt;0&gt;(std::forward&lt;T&gt;(x));\n}\n</code></pre>\n<p>and:</p>\n<pre><code>template &lt;class T&gt;\nconstexpr auto f(T&amp;&amp; x) -&gt; decltype(std::get&lt;0&gt;(std::forward&lt;T&gt;(x)))\n{\n    return std::get&lt;0&gt;(std::forward&lt;T&gt;(x));\n}\n</code></pre>\n<p>and if so, what is it, and which one should I use for perfect forwarding?</p>\n", "AcceptedAnswerId": "42744535", "Title": "auto, decltype(auto) and trailing return type", "CreationDate": "2017-03-12T05:51:01.853", "Id": "42744245", "CommentCount": "2", "PostTypeId": "1", "LastActivityDate": "2017-03-12T06:36:21.827", "Score": "1", "OwnerUserId": "882932", "Tags": "<c++><c++14><auto><decltype><trailing-return-type>", "AnswerCount": "1"}});