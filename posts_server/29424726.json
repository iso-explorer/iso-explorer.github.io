post_cb({"29424770": {"Id": "29424770", "PostTypeId": "2", "Body": "<p>This might be sufficient.</p>\n<pre><code>string convertInt(int number)\n{\n    if (number == 0)\n        return \"0\";\n    string temp=\"\";\n    string returnvalue=\"\";\n    while (number&gt;0)\n    {\n        temp+=number%10+'0';\n        number/=10;\n    }\n    for (int i=0;i&lt;temp.length();i++)\n        returnvalue+=temp[temp.length()-i-1];\n    return returnvalue;\n}\n</code></pre>\n<p>(I did not write this function, but found it by doing a <a href=\"https://www.google.com/search?q=convert%20int%20to%20string%20manually\" rel=\"nofollow\">quick Google search</a>. The original post <a href=\"http://www.cplusplus.com/forum/beginner/7777/\" rel=\"nofollow\">is here</a>.)</p>\n<p>This function works by dividing the number by 10. It takes the remainder of the division, which will always be between 0 and 9. It then \"finds\" the character representing that number by adding the integral value of the character <code>0</code> to it.</p>\n<p>Next, it takes the quotient of that division, and performs the same operation again and again until the quotient is zero.</p>\n<p>This results in a string that contains the characters representing the number, but in reverse order. The final loop reverses the string before returning it.</p>\n<p>As chris points out in the comments below, the digits 0 through 9 are guaranteed to be in sequential order</p>\n<blockquote>\n<p id=\"so_29424726_29424770_0\">N3485, \u00a72.3 [lex.charset]/3: In both the source and execution basic\n  character sets, the value of each character after 0 in the above list\n  of decimal digits shall be one greater than the value of the previous.\n  (the above list is, quite intuitively, 0 1 2 3 4 5 6 7 8 9).</p>\n</blockquote>\n<p>Here is good reading material about string manipulation: <a href=\"http://www.joelonsoftware.com/articles/Unicode.html\" rel=\"nofollow\">The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!)</a></p>\n", "LastEditorUserId": "425871", "LastActivityDate": "2015-04-03T01:19:27.833", "Score": "1", "CreationDate": "2015-04-03T00:52:31.590", "ParentId": "29424726", "CommentCount": "9", "OwnerUserId": "425871", "LastEditDate": "2015-04-03T01:19:27.833"}, "29424749": {"Id": "29424749", "PostTypeId": "2", "Body": "<p>You can do the following:</p>\n<pre><code>int main(){\n    int x;\n    cin&gt;&gt;x;\n    string s = \"\";     // s will represent x but with the digits reversed\n    bool neg = 0;      // this flag is 1 if x is negative and 0 if positive. \n                       // we will use it to find out if we should put a \"-\" before the number\n    if(x &lt; 0){\n        neg = 1;\n        x *= -1;       // making the number positive\n    }\n    while(x){\n        char c = '0' + x % 10;          // c represent the least significant digit of x\n        s.push_back(c);                 // adding c to s             \n        x /= 10;                        // removing the least significant digit of x\n    }\n    string ans = \"\";                    // ans is our resulting string\n    if(neg) ans.push_back('-');         // adding a negative sign if x was negative\n    for(int i=s.size() - 1; i &gt;= 0; i--)    // adding the characters of s in reverse order\n        ans.push_back(s[i]);\n}\n</code></pre>\n", "LastEditorUserId": "4129517", "LastActivityDate": "2015-04-03T01:07:36.767", "Score": "1", "CreationDate": "2015-04-03T00:48:58.527", "ParentId": "29424726", "CommentCount": "6", "OwnerUserId": "4129517", "LastEditDate": "2015-04-03T01:07:36.767"}, "bq_ids": {"n4140": {"so_29424726_29424770_0": {"length": 19, "quality": 0.76, "section_id": 5316}}, "n3337": {"so_29424726_29424770_0": {"length": 19, "quality": 0.76, "section_id": 5113}}, "n4659": {"so_29424726_29424770_0": {"length": 19, "quality": 0.76, "section_id": 6740}}}, "29424726": {"ViewCount": "61", "Body": "<p>I got a quick question for the following code</p>\n<pre><code>int main()\n{\n    string data;\n    int x;\n    cin &gt;&gt; x;\n\n    if (x &lt; 0)\n    {\n        data = to_string(x);\n    }\n    else\n    {\n        data = to_string(x);\n    }\n   return 0;\n}\n</code></pre>\n<p>If I does not want to use <code>to_string(x)</code>, instead I want to do something manually. Is there anyway I can do that? If I use <code>data = x;</code> this obviously won't work.</p>\n<p>ps. I doesn't want to use <code>atoi</code> either, </p>\n", "AcceptedAnswerId": "29424749", "Title": "Put integer variable in string manually", "CreationDate": "2015-04-03T00:44:14.520", "Id": "29424726", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2015-04-03T01:25:59.727", "Score": "0", "OwnerUserId": "4744612", "Tags": "<c++><string><integer>", "AnswerCount": "5"}, "29424867": {"Id": "29424867", "PostTypeId": "2", "Body": "<p>If you really must extract the digits yourself</p>\n<pre><code>std::string manual_convert(int value)\n{\n    if (x &lt; 0)\n       return std::string(\"-\") + manual_convert(-x);   // handle negative values (except potentially INT_MIN)\n    else if (x == 0)\n       return \"0\";\n\n    std::string retval;\n    while (x &gt; 0)\n    {\n         char digit = x%10 + '0';     // extract the proverbial digit\n         retval.append(1, digit);\n         x /= 10;                     // drop the digit, and prepare for next one\n    }\n\n    std::reverse(retval.begin(), retval.end());   // loop above extracted digits in reverse order\n    return retval;\n}\n</code></pre>\n", "LastEditorUserId": "4706785", "LastActivityDate": "2015-04-03T01:15:09.927", "Score": "0", "CreationDate": "2015-04-03T01:09:54.717", "ParentId": "29424726", "CommentCount": "0", "OwnerUserId": "4706785", "LastEditDate": "2015-04-03T01:15:09.927"}, "29424801": {"Id": "29424801", "PostTypeId": "2", "Body": "<p>Formatting an integer manually in any number base isn't hard. E.g. in base 10:</p>\n<pre><code>void print(int n)\n{\n    if (n == 0) { std::cout &lt;&lt; '0'; return; }\n    if (n &lt; 0) { std::cout &lt;&lt; '-'; n = -n; }\n\n    std::string buf;\n    while (n != 0) { buf += '0' + n % 10; n /= 10; }\n    for (auto it = buf.rbegin(); it != buf.rend(); ++it)\n        std::cout &lt;&lt; *it;\n}\n</code></pre>\n<p>If your number base is larger than ten, you'll have to provide a suitable alphabet and use <code>n % base</code> to enumerate the desired digit.</p>\n<p>If you want to avoid reallocations, you can reserve capacity in the string, and you can compute the required capacity by taking a suitable logarithm of <code>n</code>.</p>\n", "LastActivityDate": "2015-04-03T00:57:00.323", "CommentCount": "1", "CreationDate": "2015-04-03T00:57:00.323", "ParentId": "29424726", "Score": "0", "OwnerUserId": "596781"}, "29424985": {"Id": "29424985", "PostTypeId": "2", "Body": "<p>Two easy ways:</p>\n<pre><code>#include &lt;sstream&gt;\nstring intToString(int x)\n{\n   stringstream stream;\n   stream &lt;&lt; x;\n   return stream.str();\n}\n</code></pre>\n<p>Or if you using boost library</p>\n<pre><code>string str = lexical_cast&lt;string&gt;(x)\n</code></pre>\n", "LastActivityDate": "2015-04-03T01:25:59.727", "CommentCount": "0", "CreationDate": "2015-04-03T01:25:59.727", "ParentId": "29424726", "Score": "0", "OwnerUserId": "4727775"}});