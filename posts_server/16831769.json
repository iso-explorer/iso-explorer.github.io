post_cb({"16831845": {"Id": "16831845", "PostTypeId": "2", "Body": "<p>Try this:</p>\n<pre><code>//Class A\nclass A\n{\nprotected:\n    int getX(){return _x};\nprivate:\n    int _x;\n};\n\n//Class B\nclass B : public A\n{\n    void method(){qDebug() &lt;&lt; this-&gt;getX();}\n};\n</code></pre>\n<p>You forgot the keyword <code>public</code>, you don't use <code>this</code> as a pointer and you forgot the <code>;</code> at the end of the classes.</p>\n", "LastActivityDate": "2013-05-30T08:58:26.063", "CommentCount": "0", "CreationDate": "2013-05-30T08:58:26.063", "ParentId": "16831769", "Score": "1", "OwnerUserId": "2432477"}, "16831867": {"Id": "16831867", "PostTypeId": "2", "Body": "<p>When you don't specify the type of inheritance the <a href=\"https://stackoverflow.com/questions/3811424/default-class-inheritance-access\">default</a> is taken as private.</p>\n<p>In <a href=\"https://stackoverflow.com/questions/860339/difference-between-private-public-and-protected-inheritance-in-c\">private inheritance</a>,</p>\n<p>Base Class' public members are private. </p>\n<p>From standard docs, <em>11.2.2</em></p>\n<blockquote>\n<p id=\"so_16831769_16831867_0\">In the absence of an access-specifier for a base class, public is\n  assumed when the derived class is defined with the class-key struct\n  and <strong>private is assumed when the class is defined with the class-key\n  class</strong>.</p>\n</blockquote>\n", "LastEditorUserId": "-1", "LastActivityDate": "2013-05-30T09:08:26.917", "Score": "5", "CreationDate": "2013-05-30T08:59:31.553", "ParentId": "16831769", "CommentCount": "0", "OwnerUserId": "2087705", "LastEditDate": "2017-05-23T12:11:20.377"}, "16832091": {"Id": "16832091", "PostTypeId": "2", "Body": "<p>there are three types of inheritance:</p>\n<ol>\n<li>public</li>\n<li>protected</li>\n<li>private</li>\n</ol>\n<p>the dafult mode for class is private, and for struct it is public: </p>\n<blockquote>\n<p id=\"so_16831769_16832091_0\">In the absence of an access-specifier for a base class, public is\n  assumed when the derived class is defined with the class-key struct\n  and <strong>private is assumed when the class is defined with the class-key\n  class</strong>.</p>\n</blockquote>\n<pre><code>                                                   [From C++ standard, 11.2.2]\n</code></pre>\n<p>So, when you say:</p>\n<pre><code>class B: A\n</code></pre>\n<p>this is private inheritance and thus all public and protected members of a base class will be inherited as private. What you need is</p>\n<pre><code>class B: public A\n</code></pre>\n<p>or</p>\n<pre><code>class B: protected A\n</code></pre>\n<p>Private and protected inheritance is used more often where defining implementation details. Private bases are most useful when defining a class by restricting the interface to a base so that stronger guarantees can be provided. For example, <code>Vec</code> adds\nrange checking to its private base <code>vector</code> (\u00a73.7.1) and the <code>list</code> of pointers template adds type checking to its <code>list&lt;void*&gt;</code> base  -&gt; see Stroustrup (\"C++...\" \u00a713.5).</p>\n<p>Example:</p>\n<pre><code>//Class A\nclass A\n{\npublic:\n    int getX(){return _x;};\nprotected:\n    int getX2(){return _x;}\nprivate:\n    int _x;\n};\n\n//Class B\nclass B : protected A  //A::getX and A::getX2 are not visible in B interface,\n          ^^^^^^^^^    // but still we can use it inside B class: inherited\n                       // members are always there, the inheritance mode\n                       // affects only how they are accessible outside the class\n                       // in particular for a children\n{\npublic:\n    int method(){ return this-&gt;getX();}\n    int method2(){ return this-&gt;getX2();}\n};\n\nint main(int argc, char** argv) {\n\n    B b=B();\n    printf(\"b.getX(): %d\",b.method());  // OK\n    printf(\"b.getX(): %d\",b.method2()); // OK\n\n    return 0;\n}\n</code></pre>\n<hr>\n<h2>Further effects to inheritance</h2>\n<p>Additionally, when you declare class as</p>\n<pre><code>class B: A\n</code></pre>\n<p>being the same as <code>class B: private A</code> further inheritance becomes unavailable: only class that derives from <code>A</code> and its friends can use <code>A</code> public and protected members. Only friends and members of <code>B</code> can convert <code>B*</code> to <code>A*</code>. </p>\n<p>If <code>A</code> is a <em>protected</em> base then its public and protected members can be used by class <code>B</code> and its friends and by classes derived from <code>B</code> and their friends. Only friends and members of <code>B</code> and friends and members of class derived from <code>B</code> can convert <code>B*</code> to <code>A*</code>.</p>\n<p>If <code>A</code> is a <em>public</em> base finally, then its public members can be used by any class and its protected members can be used by derived classes and their friends and by classes derived from <code>B</code> and their friends. Any function can convert <code>B*</code> to <code>A*</code>.</p>\n<p>Note also that you cannot cast <em>constness</em> with <code>dynamic_cast</code> or <code>static_cast</code>, it is said that they both respect constness. They both respect <em>access</em> controls also (<strong>it is not possible to cast to a private base</strong> [because only derived class methods might do <code>Derived* -&gt; Base*</code> and methods of classes being friends to this {friend declaration is in Base}])</p>\n<p>more in Stroustrup (\"C++\", 15.3.2)</p>\n</hr>", "LastEditorUserId": "1141471", "LastActivityDate": "2013-05-30T18:24:07.167", "Score": "4", "CreationDate": "2013-05-30T09:10:20.507", "ParentId": "16831769", "CommentCount": "0", "OwnerUserId": "1141471", "LastEditDate": "2013-05-30T18:24:07.167"}, "bq_ids": {"n4140": {"so_16831769_16831867_0": {"length": 19, "quality": 1.0, "section_id": 6679}, "so_16831769_16832091_0": {"length": 19, "quality": 1.0, "section_id": 6679}}, "n3337": {"so_16831769_16831867_0": {"length": 19, "quality": 1.0, "section_id": 6434}, "so_16831769_16832091_0": {"length": 19, "quality": 1.0, "section_id": 6434}}, "n4659": {"so_16831769_16831867_0": {"length": 19, "quality": 1.0, "section_id": 8154}, "so_16831769_16832091_0": {"length": 19, "quality": 1.0, "section_id": 8154}}}, "16831769": {"ViewCount": "268", "Body": "<p>I've 2 classes (voluntary as simple as possible) and I'm working with <code>Qt</code> on <code>Mac OS X</code>:</p>\n<pre><code>//Class A\nclass A\n{\nprotected:\n    int getX(){return _x;};\nprivate:\n    int _x;\n};\n\n//Class B\nclass B : A\n{\n    void method(){qDebug() &lt;&lt; this-&gt;getX();}\n};\n</code></pre>\n<p>And the compiler throws:</p>\n<blockquote>\n<p id=\"so_16831769_16831769_0\">error: 'getX' is a private member of 'A'</p>\n</blockquote>\n<p>Am I missing something?\nI've tried with:</p>\n<pre><code>qDebug() &lt;&lt; this-&gt;A::getX();\n</code></pre>\n<p>Which doesn't work either!</p>\n", "AcceptedAnswerId": "16831867", "Title": "getter inheritance issue with 2 classes", "CreationDate": "2013-05-30T08:53:57.873", "Id": "16831769", "CommentCount": "7", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2013-05-30T11:20:01.993", "LastEditorUserId": "648658", "LastActivityDate": "2013-05-30T18:24:07.167", "Score": "0", "OwnerUserId": "2307070", "Tags": "<c++><inheritance>", "AnswerCount": "6"}, "16831820": {"Id": "16831820", "PostTypeId": "2", "Body": "<p>You forgot ; in your getter return </p>\n<pre><code>int getX() { return _x; };\n</code></pre>\n", "LastActivityDate": "2013-05-30T08:56:46.027", "CommentCount": "0", "CreationDate": "2013-05-30T08:56:46.027", "ParentId": "16831769", "Score": "0", "OwnerUserId": "2354926"}, "16831827": {"Id": "16831827", "PostTypeId": "2", "Body": "<p>When you inherit a class from another, the mode of inheritance should be mentioned. So, you have to declare as</p>\n<pre><code>class B: public A\n</code></pre>\n<p>Then you won't have the error </p>\n", "LastActivityDate": "2013-05-30T08:57:08.760", "CommentCount": "0", "CreationDate": "2013-05-30T08:57:08.760", "ParentId": "16831769", "Score": "3", "OwnerUserId": "2046858"}, "16831829": {"Id": "16831829", "PostTypeId": "2", "Body": "<p>Your code should be as follows:</p>\n<pre><code>class A {\n    protected:\n        int getX() { return _x; }\n\n    private:\n        int _x;\n};\n\n//Class B\nclass B : public A  {\n    void method() { this-&gt;getX(); }\n};\n</code></pre>\n<p>They were many errors:</p>\n<ul>\n<li><code>class B: public A;</code></li>\n<li><code>this-&gt;getX();</code></li>\n<li>commas after class declarations</li>\n</ul>\n", "LastEditorUserId": "2286508", "LastActivityDate": "2013-05-30T09:02:16.910", "Score": "1", "CreationDate": "2013-05-30T08:57:12.220", "ParentId": "16831769", "CommentCount": "1", "OwnerUserId": "2286508", "LastEditDate": "2013-05-30T09:02:16.910"}});