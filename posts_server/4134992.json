post_cb({"4135008": {"ParentId": "4134992", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>main receives char*.  you will have to put the argv array into std::strings yourself.</p>\n", "OwnerUserId": "62488", "LastEditorUserId": "62488", "LastEditDate": "2010-11-09T15:51:25.557", "Id": "4135008", "Score": "2", "CreationDate": "2010-11-09T14:51:08.223", "LastActivityDate": "2010-11-09T15:51:25.557"}, "4135041": {"ParentId": "4134992", "CommentCount": "2", "Body": "<p>That would be non-standard because the Standard in <code>3.6.1</code> says</p>\n<blockquote>\n<p id=\"so_4134992_4135041_0\">An implementation shall not predefine the main function.  This function <strong>shall not be overloaded.  It shall have  a  return  type  of  type int</strong>,  but  otherwise  its  type  is  implementation-defined.  All  implementations shall allow both of the following definitions of main:</p>\n<p id=\"so_4134992_4135041_1\"><code>int main() { /* ... */ }</code></p>\n<p id=\"so_4134992_4135041_2\">and</p>\n<p id=\"so_4134992_4135041_3\"><code>int main(int argc, char* argv[]) { /* ... */ }</code></p>\n</blockquote>\n", "OwnerUserId": "165520", "PostTypeId": "2", "Id": "4135041", "Score": "3", "CreationDate": "2010-11-09T14:53:32.277", "LastActivityDate": "2010-11-09T14:53:32.277"}, "4135830": {"ParentId": "4134992", "CommentCount": "1", "Body": "<p>If you want to create a string out of the input parameters passed, you can also \nadd character pointers to create a string yourself</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\nusing namespace std;\n\nint main(int argc, char* argv[])\n{\n\nstring passedValue;\nfor(int i = 1; i &lt; argc; i++)\n passedValue += argv[i];\n    // ...\n    return 0;\n}\n</code></pre>\n", "OwnerUserId": "482419", "PostTypeId": "2", "Id": "4135830", "Score": "4", "CreationDate": "2010-11-09T16:10:30.807", "LastActivityDate": "2010-11-09T16:10:30.807"}, "4135036": {"ParentId": "4134992", "CommentCount": "3", "Body": "<p>You can't do it that way, as the main function is declared explicitly as it is as an entry point.  Note that the CRT knows nothing about STL so would barf anyway.  Try:</p>\n<pre><code>#include &lt;string&gt;\n#include &lt;vector&gt;\n\nint main(int argc, char* argv[])\n{\n    std::vector&lt;std::string&gt; args;\n    for(int i(0); i &lt; argc; ++i)\n        args.push_back(argv[i]);\n\n    // ...\n\n    return(0);\n}; // eo main\n</code></pre>\n", "OwnerUserId": "437768", "PostTypeId": "2", "Id": "4135036", "Score": "3", "CreationDate": "2010-11-09T14:53:13.227", "LastActivityDate": "2010-11-09T14:53:13.227"}, "4135007": {"ParentId": "4134992", "CommentCount": "0", "Body": "<p>No. That is not allowed. If present, it is mandated to be char *argv[].</p>\n<p>BTW, in C++ main should always be declared to return 'int'</p>\n", "OwnerUserId": "418110", "PostTypeId": "2", "Id": "4135007", "Score": "2", "CreationDate": "2010-11-09T14:51:04.917", "LastActivityDate": "2010-11-09T14:51:04.917"}, "4135050": {"ParentId": "4134992", "CommentCount": "3", "Body": "<p>You can't change main's signature, so this is your best bet:</p>\n<pre><code>#include &lt;string&gt;\n#include &lt;vector&gt;\n\nint main(int argc, char* argv[])\n{\n    std::vector&lt;std::string&gt; params(argv, argv+argc);\n    // ...\n    return 0;\n}\n</code></pre>\n", "OwnerUserId": "16434", "PostTypeId": "2", "Id": "4135050", "Score": "26", "CreationDate": "2010-11-09T14:54:29.593", "LastActivityDate": "2010-11-09T14:54:29.593"}, "4134992": {"CommentCount": "0", "AcceptedAnswerId": "4135830", "PostTypeId": "1", "LastEditorUserId": "434051", "CreationDate": "2010-11-09T14:49:53.163", "LastActivityDate": "2010-11-09T16:10:30.807", "LastEditDate": "2010-11-09T15:01:34.313", "ViewCount": "13719", "FavoriteCount": "3", "Title": "How to get std::string from command line arguments in win32 application?", "Id": "4134992", "Score": "5", "Body": "<p>So now I have a </p>\n<p><code>int main (int argc, char *argv[]){}</code> </p>\n<p>how to make it string based? will <code>int main (int argc, std::string *argv[])</code> be enough?</p>\n", "Tags": "<c++><string><command-line><arguments><std>", "OwnerUserId": "434051", "AnswerCount": "6"}, "bq_ids": {"n4140": {"so_4134992_4135041_0": {"section_id": 7146, "quality": 0.75, "length": 18}}, "n3337": {"so_4134992_4135041_0": {"section_id": 6890, "quality": 0.9166666666666666, "length": 22}}, "n4659": {"so_4134992_4135041_0": {"section_id": 8647, "quality": 0.75, "length": 18}}}});