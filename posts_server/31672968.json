post_cb({"31673020": {"ParentId": "31672968", "CommentCount": "2", "Body": "<blockquote>\n<p id=\"so_31672968_31673020_0\">Is it simply \"just cause\"?</p>\n</blockquote>\n<p>Yes.</p>\n<p>Both variables have a deduced type, and both variables thus need an initialiser. The logic that requires both to have the same type is applied post-deduction.</p>\n<blockquote>\n<p id=\"so_31672968_31673020_1\"><code>[C++11: 7.1.6.4/7]:</code> If the list of declarators contains more than one declarator, the type of each declared variable is determined as described above. If the type deduced for the template parameter <code>U</code> is not the same in each deduction, the program is ill-formed.</p>\n<p id=\"so_31672968_31673020_2\"><code>[C++14: 7.1.6.4/8]:</code> If the <em>init-declarator-list</em> contains more than one <em>init-declarator</em>, they shall all form declarations of variables. The type of each declared variable is determined as described above, and if the type that replaces the placeholder type is not the same in each deduction, the program is ill-formed.</p>\n</blockquote>\n<p>Call it a C++ oddity, but I imagine it's there to help keep the standard wording simple. After all, wouldn't it be a little confusing (and by that I mean more confusing/unclear than <code>auto</code> already is) if your example worked as you describe?</p>\n", "OwnerUserId": "560648", "PostTypeId": "2", "Id": "31673020", "Score": "4", "CreationDate": "2015-07-28T09:58:53.097", "LastActivityDate": "2015-07-28T09:58:53.097"}, "31672968": {"CommentCount": "2", "AcceptedAnswerId": "31673020", "PostTypeId": "1", "LastEditorUserId": "560648", "CreationDate": "2015-07-28T09:56:31.797", "LastActivityDate": "2015-07-28T09:59:59.817", "LastEditDate": "2015-07-28T09:59:59.817", "ViewCount": "111", "FavoriteCount": "1", "Title": "How come you need initialisers for all variables when using auto in multiple declarations?", "Id": "31672968", "Score": "2", "Body": "<p>I would've expected an initialiser would only be necessary for the first declaration. e.g.</p>\n<pre><code>auto x = 2, y;\n</code></pre>\n<p>I would expect this to deduce x's type as int and then implicitly replace \"auto\" with the base type \"int\", meaning y would then be a default initialised integer. Actually the entire thing doesn't compile because y explicitly needs and initialiser. Similarly it's odd to me that</p>\n<pre><code>auto x = 2, y = 3.3;\n</code></pre>\n<p>causes an error too. I would've expected y to be initialsed to 3 in a double-to-int conversion, but:</p>\n<blockquote>\n<p id=\"so_31672968_31672968_0\">error: inconsistent deduction for 'auto': 'int' and then 'double'</p>\n</blockquote>\n<p>I read through <a href=\"http://en.cppreference.com/w/cpp/language/auto\" rel=\"nofollow\">http://en.cppreference.com/w/cpp/language/auto</a> and couldn't explicitly find an explanation. Actually it seemed like that link was on my side:</p>\n<blockquote>\n<p id=\"so_31672968_31672968_1\">Once the type of the initializer has been determined, the compiler determines the type that will replace the keyword auto using the rules for template argument deduction from a function call (see template argument deduction#Other contexts for details).</p>\n</blockquote>\n<p>Is it simply \"just cause\"? </p>\n", "Tags": "<c++><c++11><declaration><c++14><auto>", "OwnerUserId": "4338785", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_31672968_31672968_1": {"section_id": 5451, "quality": 0.52, "length": 13}, "so_31672968_31673020_1": {"section_id": 5452, "quality": 0.6666666666666666, "length": 16}, "so_31672968_31673020_2": {"section_id": 5452, "quality": 0.896551724137931, "length": 26}}, "n3337": {"so_31672968_31672968_1": {"section_id": 5245, "quality": 0.56, "length": 14}, "so_31672968_31673020_1": {"section_id": 5246, "quality": 0.9166666666666666, "length": 22}, "so_31672968_31673020_2": {"section_id": 5246, "quality": 0.5517241379310345, "length": 16}}, "n4659": {"so_31672968_31673020_1": {"section_id": 6878, "quality": 0.5833333333333334, "length": 14}, "so_31672968_31673020_2": {"section_id": 6878, "quality": 0.8275862068965517, "length": 24}}}});