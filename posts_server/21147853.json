post_cb({"21148021": {"ParentId": "21147853", "LastEditDate": "2014-01-15T21:03:06.417", "CommentCount": "5", "CreationDate": "2014-01-15T20:56:55.773", "OwnerUserId": "827263", "LastEditorUserId": "827263", "PostTypeId": "2", "Id": "21148021", "Score": "3", "Body": "<p>Your code has undefined behavior.</p>\n<pre><code>x = (y+x) - (y = x);\n</code></pre>\n<p>The side effect of modifying <code>y</code> in the <code>y = x</code> assignment, and reading the value of <code>y</code> in <code>y+x</code> are unordered. You cannot assume that either occurs before the other. Beyond that, the standard specifically says that this causes undefined behavior.</p>\n<p>Reference: 2011 ISO C++ standard, section 1.9 [intro.execution], paragraph 15:</p>\n<blockquote>\n<p id=\"so_21147853_21148021_0\">Except where noted, evaluations of operands of individual operators\n  and of subexpressions of individual expressions are unsequenced. [...]\n  The value computations of the operands of an operator are sequenced\n  before the value computation of the result of the operator. If a side\n  effect on a scalar object is unsequenced relative to either another\n  side effect on the same scalar object or a value computation using the\n  value of the same scalar object, the behavior is undefined.</p>\n</blockquote>\n", "LastActivityDate": "2014-01-15T21:03:06.417"}, "21147853": {"CommentCount": "6", "ViewCount": "116", "PostTypeId": "1", "LastEditorUserId": "505088", "CreationDate": "2014-01-15T20:46:34.610", "LastActivityDate": "2014-01-15T21:03:06.417", "Title": "C++ operator precedence (unexpected results)", "LastEditDate": "2014-01-15T21:01:11.077", "Id": "21147853", "Score": "-1", "Body": "<p>During an exercise to swap the values of two variables using VS 2010/C++, the compiler is \"not\" returning the expected result for the expression. </p>\n<p>I understand a more efficient expression - XOR x and y. This exercise is an alternative approach to obtain a similar result for x and y using an Algebraic expression.</p>\n<p>The expected result:  x = 21, y = 11\nThe result from the sample CPP is: x = 11, y = 11</p>\n<pre><code>// test.cpp : main project file.\n\n#include \"stdafx.h\"\n\nusing namespace System;\n\nint main(array&lt;System::String ^&gt; ^args)\n{\n\n    int x = 11; \n    int y = 23;\n\n    x = (y+x) - (y = x);\n    Console::WriteLine(System::String::Format(\"Value of x:\", x));\n    Console::WriteLine(System::String::Format(\"Value of y:\", y));\n\n    x = 11;\n    y = 23;\n    x = ((y+x)*1) - (y = x);\n    Console::WriteLine(System::String::Format(\"Value of x:\", x));\n    Console::WriteLine(System::String::Format(\"Value of y:\", y));\n\n    return 0; \n}\n</code></pre>\n<p>The ILDASM output is as follows:</p>\n<pre><code>.method assembly static int32  main(string[] args) cil managed\n{\n // Code size       118 (0x76)\n   .maxstack  2\n   .locals ([0] int32 y,\n            [1] int32 x,\n            [2] int32 V_2)\n    IL_0000:  ldc.i4.0\n    IL_0001:  stloc.2\n    IL_0002:  ldc.i4.s   11\n    IL_0004:  stloc.1\n    IL_0005:  ldc.i4.s   23\n    IL_0007:  stloc.0\n    IL_0008:  ldloc.1\n    IL_0009:  stloc.0\n    IL_000a:  ldloc.0\n    IL_000b:  ldloc.1\n    IL_000c:  add\n    IL_000d:  ldloc.0\n    IL_000e:  sub\n    IL_000f:  stloc.1\n    IL_0010:  ldstr      \"Value of x:\"\n    IL_0015:  ldloc.1\n    IL_0016:  box        [mscorlib]System.Int32\n    IL_001b:  call       string [mscorlib]System.String::Format(string,\n                                                              object)\n    IL_0020:  call       void [mscorlib]System.Console::WriteLine(string)\n    IL_0025:  ldstr      \"Value of y:\"\n    IL_002a:  ldloc.0\n    IL_002b:  box        [mscorlib]System.Int32\n    IL_0030:  call       string [mscorlib]System.String::Format(string,\n                                                              object)\n    IL_0035:  call       void [mscorlib]System.Console::WriteLine(string)\n    IL_003a:  ldc.i4.s   11\n    IL_003c:  stloc.1\n    IL_003d:  ldc.i4.s   23\n    IL_003f:  stloc.0\n    IL_0040:  ldloc.1\n    IL_0041:  stloc.0\n    IL_0042:  ldloc.0\n    IL_0043:  ldloc.1\n    IL_0044:  add\n    IL_0045:  ldloc.0\n    IL_0046:  sub\n    IL_0047:  stloc.1\n    IL_0048:  ldstr      \"Value of x:\"\n    IL_004d:  ldloc.1\n    IL_004e:  box        [mscorlib]System.Int32\n    IL_0053:  call       string [mscorlib]System.String::Format(string,\n                                                              object)\n    IL_0058:  call       void [mscorlib]System.Console::WriteLine(string)\n    IL_005d:  ldstr      \"Value of y:\"\n    IL_0062:  ldloc.0\n    IL_0063:  box        [mscorlib]System.Int32\n    IL_0068:  call       string [mscorlib]System.String::Format(string,\n                                                              object)\n    IL_006d:  call       void [mscorlib]System.Console::WriteLine(string)\n    IL_0072:  ldc.i4.0\n    IL_0073:  stloc.2\n    IL_0074:  ldloc.2\n    IL_0075:  ret\n} // end of method 'Global Functions'::main\n</code></pre>\n", "Tags": "<c++><c++-cli>", "OwnerUserId": "2394721", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_21147853_21148021_0": {"section_id": 5811, "quality": 0.9772727272727273, "length": 43}}, "n3337": {"so_21147853_21148021_0": {"section_id": 5584, "quality": 0.9772727272727273, "length": 43}}, "n4659": {"so_21147853_21148021_0": {"section_id": 7272, "quality": 0.8409090909090909, "length": 37}}}});