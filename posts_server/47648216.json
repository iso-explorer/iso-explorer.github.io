post_cb({"bq_ids": {"n4140": {"so_47648216_47648519_0": {"length": 23, "quality": 1.0, "section_id": 5943}, "so_47648216_47648519_1": {"length": 18, "quality": 1.0, "section_id": 31}, "so_47648216_47648519_2": {"length": 14, "quality": 1.0, "section_id": 7213}}, "n3337": {"so_47648216_47648519_0": {"length": 23, "quality": 1.0, "section_id": 5714}, "so_47648216_47648519_1": {"length": 18, "quality": 1.0, "section_id": 28}, "so_47648216_47648519_2": {"length": 14, "quality": 1.0, "section_id": 6957}}, "n4659": {"so_47648216_47648519_0": {"length": 23, "quality": 1.0, "section_id": 7428}, "so_47648216_47648519_1": {"length": 18, "quality": 1.0, "section_id": 31}, "so_47648216_47648519_2": {"length": 14, "quality": 1.0, "section_id": 8722}}}, "47648519": {"Id": "47648519", "PostTypeId": "2", "Body": "<p>When performing addition, the usual arithmetic conversions are performed on the operands, which state (<a href=\"https://timsong-cpp.github.io/cppwp/n4659/expr#11.5.3\" rel=\"noreferrer\">[expr]/11.5.3</a>):</p>\n<blockquote id=\"so_47648216_47648519_0\">\n<ul>\n<li>Otherwise, if the operand that has unsigned integer type has rank greater than or equal to the rank of the type of the other operand,\n  the operand with signed integer type shall be converted to the type of\n  the operand with unsigned integer type.</li>\n</ul>\n</blockquote>\n<p>So <code>-8</code> is converted to an unsigned number. Which according to <a href=\"https://timsong-cpp.github.io/cppwp/n4659/conv.integral#2\" rel=\"noreferrer\">[conv.integral]/2</a> is as follows:</p>\n<blockquote>\n<p id=\"so_47648216_47648519_1\">If the destination type is unsigned, the resulting value is the least\n  unsigned integer congruent to the source integer (modulo 2<sup>n</sup>\n  where n is the number of bits used to represent the unsigned type).</p>\n</blockquote>\n<p>That translates our number to <code>(MAX_UINT + 1) - 8</code>. Now, since unsigned addition is modular 2<sup>n</sup> (<a href=\"https://timsong-cpp.github.io/cppwp/n4659/basic.fundamental#4\" rel=\"noreferrer\">[basic.fundamental]/4</a>):</p>\n<blockquote>\n<p id=\"so_47648216_47648519_2\">Unsigned integers shall obey the laws of arithmetic modulo 2<sup>n</sup> where n is the number of bits in the value representation of that particular size of integer.</p>\n</blockquote>\n<p>The result must be <code>(MAX_UINT + 1) - 8 + 10</code> modulo <code>MAX_UINT + 1</code>, and that is just <code>2</code>.</p>\n", "LastActivityDate": "2017-12-05T07:47:10.203", "Score": "5", "CreationDate": "2017-12-05T07:47:10.203", "ParentId": "47648216", "CommentCount": "0", "OwnerUserId": "817643"}, "47648216": {"ViewCount": "56", "Body": "<p>When I was about to execute the following code I thought the signed int i would be converted to unsigned and the result would be some big positive number but the result was 2  </p>\n<pre><code>int main()\n{\n    unsigned u = 10; int i = -8;\n    std::cout &lt;&lt; u + i &lt;&lt; std::endl; \n    return 0;\n}\n</code></pre>\n", "AcceptedAnswerId": "47648519", "Title": "What happens if I add an unsigned int to a negative int and the arithmetic result is positive?", "CreationDate": "2017-12-05T07:26:04.187", "LastActivityDate": "2017-12-05T07:47:10.203", "CommentCount": "2", "LastEditDate": "2017-12-05T07:45:51.867", "PostTypeId": "1", "LastEditorUserId": "3723423", "Id": "47648216", "Score": "2", "OwnerUserId": "8364849", "Tags": "<c++><type-conversion><expression><language-lawyer>", "AnswerCount": "1"}});