post_cb({"21968530": {"Id": "21968530", "PostTypeId": "2", "Body": "<p>Section <code>3.6.1</code> of the C++ standard defines how <code>main</code> and its arguments work:</p>\n<blockquote>\n<p id=\"so_21968468_21968530_0\">In the latter form, for purposes of exposition, the first function parameter is\n  called <em>argc</em> and the second function parameter is called <em>argv</em>, where <em>argc</em> shall be the number of arguments\n  passed to the program from the environment in which the program is run. If <em>argc</em> is nonzero these arguments\n  shall be supplied in <em>argv[0]</em> through <em>argv[argc-1]</em> as pointers to the initial characters of null-terminated\n  multibyte strings (ntmbs s) (17.5.2.1.4.2) and <em>argv[0]</em> shall be the pointer to the initial character of a\n  ntmbs that represents the name used to invoke the program or \"\". The value of <em>argc</em> shall be non-negative.\n  <strong>The value of argv[argc] shall be 0</strong>. [ Note: It is recommended that any further (optional) parameters be\n  added after argv. \u2014end note ]</p>\n</blockquote>\n<p>That means with a standard-conforming compiler, you should be able to access <code>argv[argc]</code>.\nAccessing <code>argv[n]</code> with n &gt; <code>argc</code> is undefined though. It may crash, but doesn't have to.</p>\n<p>What you're experiencing is weird, as apparently the arguments are processed as a single argument. If you provide the arguments exactly as stated, this should not happen.</p>\n<p>You should fix the signature of <code>main</code>. The standard guarantees at least these two signatures, anything else is implementation-defined:</p>\n<blockquote>\n<p id=\"so_21968468_21968530_1\">\u2014 a function of () returning int and</p>\n<p id=\"so_21968468_21968530_2\">\u2014 a function of (int, pointer to pointer to char) returning int</p>\n</blockquote>\n<p>As you want to access arguments, the appropriate signature is <code>int main(int argc, char** argv)</code>.</p>\n", "LastEditorUserId": "985296", "LastActivityDate": "2014-02-23T13:37:22.263", "Score": "2", "CreationDate": "2014-02-23T12:59:36.353", "ParentId": "21968468", "CommentCount": "5", "OwnerUserId": "985296", "LastEditDate": "2014-02-23T13:37:22.263"}, "bq_ids": {"n4140": {"so_21968468_21968530_2": {"length": 7, "quality": 1.0, "section_id": 7146}, "so_21968468_21968530_0": {"length": 53, "quality": 0.8688524590163934, "section_id": 7146}}, "n3337": {"so_21968468_21968530_0": {"length": 39, "quality": 0.639344262295082, "section_id": 6890}, "so_21968468_21968530_2": {"length": 6, "quality": 0.8571428571428571, "section_id": 3073}}, "n4659": {"so_21968468_21968530_0": {"length": 53, "quality": 0.8688524590163934, "section_id": 8647}, "so_21968468_21968530_2": {"length": 7, "quality": 1.0, "section_id": 8647}}}, "21968977": {"Id": "21968977", "PostTypeId": "2", "Body": "<p>ok, as it turns out, the problem was in some code i didn't include here. my code was:</p>\n<pre><code>if (argc = 2) { do some stuff }\n</code></pre>\n<p>it should have been </p>\n<pre><code>if (argc == 2) { do some stuff }\n</code></pre>\n<p>i feel really stupid :\\</p>\n", "LastActivityDate": "2014-02-23T13:42:09.410", "CommentCount": "4", "CreationDate": "2014-02-23T13:42:09.410", "ParentId": "21968468", "Score": "1", "OwnerUserId": "2891900"}, "21968468": {"ViewCount": "152", "Body": "<p>if i compile this code under Visual Studio 2013</p>\n<pre><code>int main(int argc, char* argv[])\n{\nstd::cout &lt;&lt; \"arg count: \"&lt;&lt; argc &lt;&lt; \"/n\";\n}\n</code></pre>\n<p>and then run it with no additional arguments (i.e. &gt;program.exe), it outputs</p>\n<pre><code>arg count: 1\n</code></pre>\n<p>with 1 argument (&gt;program.exe arg1) it outputs</p>\n<pre><code>arg count: 2\n</code></pre>\n<p>BUT this is where it gets weird. if i input (&gt;program.exe arg1 arg2) it outputs</p>\n<pre><code>arg count: 2\n</code></pre>\n<p>\"arg count\" should be 3, shouldn't it?</p>\n<p>with (&gt;program.exe arg1 arg2 arg3) it outputs</p>\n<pre><code>arg count: 2\n</code></pre>\n<p>it should be 4 in this case...</p>\n<p>printing argv[3] works fine for some reason.</p>\n<p>why is this happening?</p>\n", "Title": "argc never has a value above 2", "CreationDate": "2014-02-23T12:53:12.643", "Id": "21968468", "CommentCount": "9", "LastEditDate": "2014-02-23T13:11:53.793", "PostTypeId": "1", "LastEditorUserId": "2891900", "LastActivityDate": "2014-02-23T13:42:09.410", "Tags": "<c++><argc>", "Score": "0", "OwnerUserId": "2891900", "ClosedDate": "2014-02-24T11:19:28.387", "AnswerCount": "3"}, "21968887": {"Id": "21968887", "PostTypeId": "2", "Body": "<p>I can guess that either you enter as</p>\n<p>(&gt;program.exe \"arg1 arg2\"</p>\n<p>or</p>\n<pre><code>(&gt;program.exe arg1,arg2\n</code></pre>\n", "LastActivityDate": "2014-02-23T13:35:37.530", "CommentCount": "0", "CreationDate": "2014-02-23T13:35:37.530", "ParentId": "21968468", "Score": "0", "OwnerUserId": "2877241"}});