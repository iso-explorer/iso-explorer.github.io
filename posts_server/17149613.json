post_cb({"17149721": {"Id": "17149721", "PostTypeId": "2", "Body": "<p>The reason the object is never destroyed is because you are exiting the program by calling <code>exit</code>. This causes the program to exit before the smart pointer objects have a chance to go out of scope thus the objects they manage are never destroyed. Since you are in <code>main</code> use a return statement instead of calling <code>exit</code>.</p>\n", "LastActivityDate": "2013-06-17T14:14:24.080", "CommentCount": "0", "CreationDate": "2013-06-17T14:14:24.080", "ParentId": "17149613", "Score": "11", "OwnerUserId": "845568"}, "17149837": {"Id": "17149837", "PostTypeId": "2", "Body": "<p>And, as additional information to other answers, note from the Standard:</p>\n<p>Per \u00a73.6.1/4:</p>\n<blockquote>\n<p id=\"so_17149613_17149837_0\">Terminating the program without leaving the current block (e.g., by\n  calling the function <code>std::exit(int)</code> (18.5)) does not destroy any\n  objects with automatic storage duration (12.4).</p>\n</blockquote>\n", "LastActivityDate": "2013-06-17T14:19:52.227", "CommentCount": "0", "CreationDate": "2013-06-17T14:19:52.227", "ParentId": "17149613", "Score": "4", "OwnerUserId": "1532460"}, "17149763": {"Id": "17149763", "PostTypeId": "2", "Body": "<p>In the code below,</p>\n<pre><code>if(i == 0)\n{\n   std::cout &lt;&lt; \"Exiting...\\n\";\n   exit(-1);\n}\n</code></pre>\n<p>You are terminating the program by calling <code>exit()</code>, so the object is never destroyed. So remove the <code>exit(-1);</code> from the code.</p>\n", "LastActivityDate": "2013-06-17T14:16:47.677", "CommentCount": "0", "CreationDate": "2013-06-17T14:16:47.677", "ParentId": "17149613", "Score": "2", "OwnerUserId": "2105110"}, "bq_ids": {"n4140": {"so_17149613_17149837_0": {"length": 13, "quality": 0.8666666666666667, "section_id": 7148}}, "n3337": {"so_17149613_17149837_0": {"length": 13, "quality": 0.8666666666666667, "section_id": 6892}}, "n4659": {"so_17149613_17149837_0": {"length": 13, "quality": 0.8666666666666667, "section_id": 8649}}}, "17149613": {"ViewCount": "124", "Body": "<p>As a C++ neophyte trying to understand smart pointers. I have written below code to check.</p>\n<p>It did compile and run but I was expecting the destructor of my class to be invoked and print the cout's from the destructor but it didn't . </p>\n<p>Do we need to overload any function in the user defined class so that its destructor is called when the smart_ptr object of that class gets destroyed.</p>\n<p>Why is that it did not invoke the object destructor. What is that i am missing?</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;cstdlib&gt;\n#include &lt;tr1/memory&gt; \n#include &lt;string&gt;\n\n//using namespace std;\n\nclass myclass\n{\npublic:\n  myclass();\n  myclass(int);\n  ~myclass();\nprivate:\n  int *ptr;\n  std::string *cptr;\n};\n\nmyclass::myclass()\n{\n    std::cout &lt;&lt; \"Inside default constructor\\n\";\n}\n\nmyclass::myclass(int a)\n{\n   std::cout &lt;&lt; \"Inside user defined constructor\\n\" ;\n   ptr = new int[10];\n   cptr = new std::string(\"AD\");\n}\n\nmyclass::~myclass()\n{\n    std::cout &lt;&lt; \"Inside destructor..\\n\";\n    delete [] ptr;\n    delete cptr;\n\n    std::cout &lt;&lt; \"Freed memory..\\n\";\n}\n\nint main()\n{\n\n\n   int i;\n   std::cin &gt;&gt; i;       \n std::tr1::shared_ptr&lt;std::string&gt; smartstr(new std::string);\n std::tr1::shared_ptr&lt;myclass&gt; smart_a(new myclass(i));\n   if(i == 0)\n   {\n      std::cout &lt;&lt; \"Exiting...\\n\";\n      exit(-1);\n   }\n\n\n}\n</code></pre>\n", "AcceptedAnswerId": "17149721", "Title": "Using smart_ptr for user defined class objects", "CreationDate": "2013-06-17T14:09:09.083", "Id": "17149613", "CommentCount": "8", "PostTypeId": "1", "LastActivityDate": "2013-06-17T14:19:52.227", "Score": "3", "OwnerUserId": "2759376", "Tags": "<c++><smart-pointers>", "AnswerCount": "4"}, "17149711": {"Id": "17149711", "PostTypeId": "2", "Body": "<p>One possible solution is ensure that your buffer is flushed in your destructor. Use <code>std::endl;</code> in your destructor. For more information, please look here: <a href=\"https://stackoverflow.com/questions/9651311/buffer-flushing-n-vs-stdendl\">Buffer Flushing, Stack Overflow</a></p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2013-06-17T14:13:45.913", "Score": "-1", "CreationDate": "2013-06-17T14:13:45.913", "ParentId": "17149613", "CommentCount": "0", "OwnerUserId": "1923699", "LastEditDate": "2017-05-23T12:05:31.313"}});