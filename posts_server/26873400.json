post_cb({"bq_ids": {"n4140": {"so_26873400_26873400_2": {"length": 4, "quality": 0.6666666666666666, "section_id": 1890}}, "n3337": {"so_26873400_26873400_2": {"length": 4, "quality": 0.6666666666666666, "section_id": 1879}}, "n4659": {"so_26873400_26873400_2": {"length": 4, "quality": 0.6666666666666666, "section_id": 2165}}}, "26873400": {"ViewCount": "1648", "Body": "<p>I've been trying to learn unit testing on my own following along a book.</p>\n<p>Code in the book use the C++11 standard and have a line like this:</p>\n<pre><code>auto variable = function(parameter);\n</code></pre>\n<p>When I first compiled it I got this warning:</p>\n<blockquote>\n<p id=\"so_26873400_26873400_0\">warning: 'auto' changes meaning in C++11; please remove it [-Wc++0x-compat]</p>\n</blockquote>\n<p>No biggie, I could fix that by checking the following box in the Project-&gt;Build options... menu:</p>\n<blockquote>\n<p id=\"so_26873400_26873400_1\">[ ] Have g++ follow the C++ 11 ISO C++ language standard [-std=c++11]</p>\n</blockquote>\n<p>Now, however, I get new errors related to Google Mock in the gtest-port.h :</p>\n<blockquote>\n<p id=\"so_26873400_26873400_2\">|    | In function 'int testing::internal::posix::StrCaseCmp(const char*, const char*)':</p>\n<p id=\"so_26873400_26873400_3\">|1719| error: '_stricmp' was not declared in this scope</p>\n<p id=\"so_26873400_26873400_4\">|    | In function 'char* testing::internal::posix::StrDup(const char*)':</p>\n<p id=\"so_26873400_26873400_5\">|1721| error: '_strdup' was not declared in this scope</p>\n<p id=\"so_26873400_26873400_6\">|    | In function 'FILE* testing::internal::posix::FDOpen(int, const char*)':|</p>\n<p id=\"so_26873400_26873400_7\">|1779| error: 'fdopen' was not declared in this scope</p>\n</blockquote>\n<p>Searching for this problem yielded little for me but I did try and define the target OS as it was a suggested solution in case it was not correctly identified automatically. Adding GTEST_OS_WINDOWS=1 and/or GTEST_OS_WINDOWS_DESKTOP=1 in the projects defines changed nothing.</p>\n<p>I realize this is easily fixed in this instance by just providing the correct type instead of using auto but I'd like to find a solution for this if possible. Replacing auto and not having the -std=c++11 option checked makes the code work as intended so the library works.</p>\n<p>I'm using Code::Blocks 13.12 , MinGW/g++ 4.8.1-4 and Google Mock 1.7 in Windows.</p>\n<p>Thanks for reading =)</p>\n", "AcceptedAnswerId": "26874877", "Title": "C++ : Unit testing using Google Mock with Code::Blocks, MinGW and C++11", "CreationDate": "2014-11-11T19:58:19.750", "Id": "26873400", "CommentCount": "2", "PostTypeId": "1", "LastActivityDate": "2014-11-11T21:25:48.920", "Score": "2", "OwnerUserId": "4240900", "Tags": "<c++><c++11><mingw><codeblocks><gmock>", "AnswerCount": "1"}, "26874877": {"Id": "26874877", "PostTypeId": "2", "Body": "<p>The answer here lies in the functions which are missing declarations: <code>_stricmp</code>, <code>_strdup</code> and <code>fdopen</code>. The first two are Microsoft versions of the POSIX functions <code>stricmp</code> and <code>strdup</code>. Note that you are specifying the use of the C++11 ISO standard which does not contain items in the POSIX standard. By specifying <code>--std=gnu++11</code> you are telling the compiler to accept a hybrid of C++11 and POSIX along with GNU extensions.</p>\n<p>Interestingly I cannot replicate this with GCC 4.8.2 on Linux so there is the possibility that something else is going on in the Google Mock headers when compiling on Windows.</p>\n", "LastActivityDate": "2014-11-11T21:25:48.920", "CommentCount": "0", "CreationDate": "2014-11-11T21:25:48.920", "ParentId": "26873400", "Score": "2", "OwnerUserId": "2558027"}});