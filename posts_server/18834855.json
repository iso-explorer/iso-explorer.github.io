post_cb({"bq_ids": {"n4140": {"so_18834855_18835188_0": {"length": 24, "quality": 1.0, "section_id": 7151}}, "n3337": {"so_18834855_18835188_0": {"length": 24, "quality": 1.0, "section_id": 6895}}}, "18835146": {"CommentCount": "0", "Body": "<p>In your example, <code>A&lt;int&gt;::a</code> is initialized statically, and all static initialization takes place before any dynamic initialization.  <code>B::b</code> is initialized dynamically and so it will happen after <code>A&lt;int&gt;::a</code> is initialized, and everything is fine.</p>\n", "CreationDate": "2013-09-16T18:50:10.647", "ParentId": "18834855", "Id": "18835146", "LastActivityDate": "2013-09-16T18:50:10.647", "PostTypeId": "2", "Score": "1", "OwnerUserId": "951890"}, "18835188": {"LastActivityDate": "2013-09-16T18:58:22.370", "CommentCount": "0", "Body": "<p>In this case, there is no issue since <code>a</code> is initialised statically; this is guaranteed to happen before the dynamic initialisation of <code>b</code>.</p>\n<p>More generally, where both require dynamic initialisation, this <em>is</em> an issue. Unless you specialise the template member before using it to initialise <code>b</code>, there is no guaranteed order. To quote the standard (C++11 3.6.2/2):</p>\n<blockquote>\n<p id=\"so_18834855_18835188_0\">Definitions of explicitly specialized class template static data members have <strong>ordered initialization</strong>. Other class template static data members (i.e., implicitly or explicitly instantiated specializations) have <strong>unordered initialization</strong>.</p>\n</blockquote>\n", "CreationDate": "2013-09-16T18:52:39.733", "LastEditDate": "2013-09-16T18:58:22.370", "ParentId": "18834855", "Id": "18835188", "LastEditorUserId": "204847", "PostTypeId": "2", "Score": "5", "OwnerUserId": "204847"}, "18834855": {"CreationDate": "2013-09-16T18:30:10.357", "ViewCount": "82", "Id": "18834855", "AcceptedAnswerId": "18835146", "Score": "3", "Title": "Can the compiler deal with the initialization order of static variables correctly?", "CommentCount": "6", "Body": "<p>How about the following case? Can the compiler deal with the initialization order of static variables correctly if there is dependency? </p>\n<p>a.h</p>\n<pre><code>template&lt;class T&gt;\nstruct A { static double a; };\n\ntemplate&lt;class T&gt;\ndouble A&lt;T&gt;::a = 1;\n</code></pre>\n<p>b.h</p>\n<pre><code>struct B { static double b; };\n</code></pre>\n<p>b.cpp</p>\n<pre><code>#include \"b.h\"\n#include \"a.h\"\n\ndouble B::b = A&lt;int&gt;::a;\n</code></pre>\n", "Tags": "<c++><static-members>", "LastActivityDate": "2013-09-16T18:58:22.370", "PostTypeId": "1", "AnswerCount": "2", "OwnerUserId": "1899020"}});