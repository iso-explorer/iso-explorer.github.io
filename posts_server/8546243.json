post_cb({"8546339": {"ParentId": "8546243", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>No, the code that you have posted does not exhibit <em>undefined behavior</em> but attempting to read <code>*p</code> would. Also, depending on the alignment requirements of <code>int</code> and <code>short</code>, the result of the cast may be unspecified and irreversable (see 5.2.10 [expr.reinterpret.cast] / 7).</p>\n<p>See ISO/IEC 14882:2011 3.10 [basic.lval] / 10:</p>\n<blockquote>\n<p id=\"so_8546243_8546339_0\">If a program attempts to access the stored value of an object through a glvalue of other than one of the following types the behavior is undefined:</p>\n<ul>\n<li>the dynamic type of the object,</li>\n<li>a cv-qualified version of the dynamic type of the object,</li>\n<li>a type similar (as defined in 4.4) to the dynamic type of the object,</li>\n<li>a type that is the signed or unsigned type corresponding to the dynamic type of the object,</li>\n<li>a type that is the signed or unsigned type corresponding to a cv-qualified version of the dynamic type of the object,</li>\n<li>an aggregate or union type that includes one of the aforementioned types among its elements or non-static data members (including, recursively, an element or non-static data member of a subaggregate or contained union),</li>\n<li>a type that is a (possibly cv-qualified) base class type of the dynamic type of the object,</li>\n<li>a char or unsigned char type.</li>\n</ul>\n</blockquote>\n<p>The object that you are trying to access is a <code>short</code> and <code>*p</code> is a <em>glvalue</em> of type <code>int</code> which doesn't meet any of the above descriptions.</p>\n", "OwnerUserId": "19563", "LastEditorUserId": "19563", "LastEditDate": "2011-12-17T17:04:12.267", "Id": "8546339", "Score": "7", "CreationDate": "2011-12-17T16:55:58.380", "LastActivityDate": "2011-12-17T17:04:12.267"}, "8546243": {"CommentCount": "4", "AcceptedAnswerId": "8546339", "CreationDate": "2011-12-17T16:42:36.043", "LastActivityDate": "2011-12-17T17:04:12.267", "PostTypeId": "1", "ViewCount": "423", "FavoriteCount": "1", "Title": "Conversion between short* to int*", "Id": "8546243", "Score": "1", "Body": "<p>Assuming <code>short</code> is 2 bytes and <code>int</code> is 4 bytes on a 32 bit OS. Is the following an undefined behavior?</p>\n<pre><code>short s = 42;\nint *p = (int*)(&amp;s);\n</code></pre>\n", "Tags": "<c++><undefined-behavior>", "OwnerUserId": "1086635", "AnswerCount": "2"}, "8546301": {"CommentCount": "4", "CreationDate": "2011-12-17T16:51:03.533", "CommunityOwnedDate": "2011-12-17T16:51:03.533", "LastEditorUserId": "406009", "LastActivityDate": "2011-12-17T16:57:22.963", "ParentId": "8546243", "PostTypeId": "2", "LastEditDate": "2011-12-17T16:57:22.963", "Id": "8546301", "Score": "1", "Body": "<p>Your code is directly in the realm of UB, as you are reading two uninitialized bytes.\nHowever, the opposite, </p>\n<pre><code>int b\nshort* f = (short *) &amp;b\n</code></pre>\n<p>will probably work due to the semantics of the little endian architecture.</p>\n<p>(This is all assuming the compiler doesn't do anything stupid)</p>\n<p>From wikipedia:</p>\n<blockquote>\n<p id=\"so_8546243_8546301_0\">The little-endian system has the property that the same value can be\n  read from memory at different lengths without using different\n  addresses (even when alignment restrictions are imposed). For example,\n  a 32-bit memory location with content 4A 00 00 00 can be read at the\n  same address as either 8-bit (value = 4A), 16-bit (004A), 24-bit\n  (00004A), or 32-bit (0000004A), all of which retain the same numeric\n  value. Although this little-endian property is rarely used directly by\n  high-level programmers, it is often employed by code optimizers as\n  well as by assembly language programmers.</p>\n</blockquote>\n<p>So, as long as you are little endian, the opposite direction should be fine.</p>\n<p>Still undefined behavior though.</p>\n", "OwnerUserId": "406009"}, "bq_ids": {"n4140": {"so_8546243_8546339_0": {"section_id": 7239, "quality": 1.0, "length": 14}}, "n3337": {"so_8546243_8546339_0": {"section_id": 6983, "quality": 1.0, "length": 14}}, "n4659": {"so_8546243_8546339_0": {"section_id": 8748, "quality": 1.0, "length": 14}}}});