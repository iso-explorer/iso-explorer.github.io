post_cb({"6775552": {"ParentId": "6775336", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2011-07-21T11:50:59.887", "Score": "13", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:24:58.297", "Id": "6775552", "OwnerUserId": "476681", "Body": "<p>Reading <a href=\"http://www.boost.org/doc/libs/1_47_0/libs/tokenizer/char_separator.htm#members\" rel=\"nofollow noreferrer\">explanation of members</a> :</p>\n<pre><code>explicit char_separator(const Char* dropped_delims,\n                        const Char* kept_delims = \"\",\n                        empty_token_policy empty_tokens = drop_empty_tokens)\nexplicit char_separator()\n</code></pre>\n<p>The <code>explicit</code> keyword for the 1st constructor requires explicit creation of objects of char_separator type.\n<a href=\"https://stackoverflow.com/questions/121162/what-does-the-explicit-keyword-in-c-mean\">What does the explicit keyword mean in C++?</a> covers the explicit keyword very well.</p>\n<p>The <code>explicit</code> keyword for the 2nd constructor is a noise and is ignored.</p>\n<p><strong>EDIT</strong></p>\n<p>From the c++ standard :</p>\n<p>7.1.2 p6 tells :</p>\n<blockquote>\n<p id=\"so_6775336_6775552_0\">The explicit specifier shall be used only in declarations of\n  constructors within a class declaration; see 12.3.1.</p>\n</blockquote>\n<p>12.3.1 p2 tells :</p>\n<blockquote>\n<p id=\"so_6775336_6775552_1\">An explicit constructor constructs objects just like non-explicit\n  constructors, but does so only where direct-initialization syntax\n  (8.5) or where casts (5.2.9, 5.4) are explicitly used. A default\n  constructor may be an explicit constructor; such a constructor will be\n  used to perform default-initialization or value-initialization (8.5).\n  [Example:</p>\n</blockquote>\n<pre><code>class Z {\npublic:\nexplicit Z();\nexplicit Z(int);\n// ...\n};\nZ a;               // OK: default-initialization performed\nZ a1 = 1;          // error: no implicit conversion\nZ a3 = Z(1);       // OK: direct initialization syntax used\nZ a2(1);           // OK: direct initialization syntax used\nZ* p = new Z(1);   // OK: direct initialization syntax used\nZ a4 = (Z)1;       // OK: explicit cast used\nZ a5 = static_cast&lt;Z&gt;(1); // OK: explicit cast used\n</code></pre>\n<blockquote>\n<p id=\"so_6775336_6775552_2\">\u2014end example]</p>\n</blockquote>\n<p>So, the default constructor with the <code>explicit</code> keyword is the same as without this keyword.</p>\n", "LastActivityDate": "2011-07-21T12:34:29.010"}, "bq_ids": {"n4140": {"so_6775336_6775552_1": {"section_id": 389, "quality": 0.9310344827586207, "length": 27}}, "n3337": {"so_6775336_6775552_1": {"section_id": 380, "quality": 0.9310344827586207, "length": 27}}, "n4659": {"so_6775336_6775552_1": {"section_id": 406, "quality": 0.9310344827586207, "length": 27}}}, "6775336": {"CommentCount": "5", "AcceptedAnswerId": "6775552", "PostTypeId": "1", "ClosedDate": "2011-07-24T01:09:15.260", "LastEditorUserId": "-1", "CreationDate": "2011-07-21T11:32:18.490", "LastActivityDate": "2011-07-21T12:34:29.010", "LastEditDate": "2017-05-23T12:24:58.297", "ViewCount": "5143", "FavoriteCount": "2", "Title": "c++ explicit keyword for function without arguments", "Id": "6775336", "Score": "21", "Body": "<blockquote>\n<p id=\"so_6775336_6775336_0\"><strong>Possible Duplicate:</strong><br>\n<a href=\"https://stackoverflow.com/questions/121162/what-does-the-explicit-keyword-in-c-mean\">What does the explicit keyword in C++ mean?</a> </br></p>\n</blockquote>\n<p>Is there a reason to use the <code>explicit</code> keyword for a function that doesn't take any arguments? Does it have any effect? I'm wondering because I just came across the line</p>\n<p><code>explicit char_separator()</code></p>\n<p>near the end of the page documenting boost::char_separator\n( <a href=\"http://www.boost.org/doc/libs/1_47_0/libs/tokenizer/char_separator.htm\" rel=\"nofollow noreferrer\">http://www.boost.org/doc/libs/1_47_0/libs/tokenizer/char_separator.htm</a> ), but it's not explained any further there.</p>\n", "Tags": "<c++><explicit>", "OwnerUserId": "846758", "AnswerCount": "1"}});