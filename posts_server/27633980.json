post_cb({"bq_ids": {"n4140": {"so_27633980_27634045_0": {"length": 21, "quality": 0.9545454545454546, "section_id": 293}}, "n3337": {"so_27633980_27634045_0": {"length": 21, "quality": 0.9545454545454546, "section_id": 284}}, "n4659": {"so_27633980_27634045_0": {"length": 21, "quality": 0.9545454545454546, "section_id": 300}}}, "27633980": {"ViewCount": "84", "Body": "<p>This is the function declaration of STL <code>make_heap</code> which expects the random-access iterators as the arguments </p>\n<pre><code>template &lt;class RandomAccessIterator&gt;\n    void make_heap (RandomAccessIterator first, RandomAccessIterator last); \n</code></pre>\n<p>But when we call it :   </p>\n<pre><code> std::make_heap (v.begin(),v.end());\n</code></pre>\n<p>We dont specify the <code>template argument</code> . why so...?</p>\n<p>Does C++ automaticaly detect which data type we are passing in the fucntion call...?</p>\n<p>Is this <code>implicit type-casting</code> ...?</p>\n", "AcceptedAnswerId": "27634045", "Title": "no template argument specified but still works", "CreationDate": "2014-12-24T08:40:00.487", "Id": "27633980", "CommentCount": "2", "PostTypeId": "1", "LastActivityDate": "2014-12-24T08:45:57.867", "Score": "1", "OwnerUserId": "3751615", "Tags": "<c++><templates><stl>", "AnswerCount": "1"}, "27634045": {"Id": "27634045", "PostTypeId": "2", "Body": "<p>The process of determining template arguments based on function arguments is called template argument deduction.</p>\n<p>From the C++ Standard</p>\n<p>14.8.2 Template argument deduction</p>\n<blockquote>\n<p id=\"so_27633980_27634045_0\">1 When a function template specialization is referenced, all of the\n  template arguments shall have values. The values can be explicitly\n  specified or, in some cases, be deduced from the use or obtained from\n  default template-arguments.</p>\n</blockquote>\n<p>[ Example:</p>\n<pre><code>void f(Array&lt;dcomplex&gt;&amp; cv, Array&lt;int&gt;&amp; ci) {\nsort(cv); // calls sort(Array&lt;dcomplex&gt;&amp;)\nsort(ci); // calls sort(Array&lt;int&gt;&amp;)\n}\n</code></pre>\n", "LastActivityDate": "2014-12-24T08:45:57.867", "CommentCount": "0", "CreationDate": "2014-12-24T08:45:57.867", "ParentId": "27633980", "Score": "1", "OwnerUserId": "2877241"}});