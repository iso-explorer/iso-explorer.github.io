post_cb({"30490256": {"Id": "30490256", "PostTypeId": "2", "Body": "<p>About 1) See kerek's answer above</p>\n<p>About 2) The standard says about conditional operator:  </p>\n<blockquote>\n<p id=\"so_30489726_30490256_0\"><strong>5.16/4:</strong> If the second and third operands are glvalues of the <strong>same value category</strong> and have the <strong>same type</strong>, the result is of that type and value category (...).</p>\n<p id=\"so_30489726_30490256_1\"><strong>5.16/5:</strong> Otherwise, the result is a prvalue. (...)</p>\n</blockquote>\n<p>According to the taxonomy of lvalues and rvalues in <strong>3.10/1</strong>, <code>*aPtr</code> is an lvalue ,  <code>MyClass()</code> is an prvalue .  Hence the result should be a prvalue so that the reference should refer to this temporary (potentially a copy constructed temp).    </p>\n<p><strong>Edit:</strong> Here an <strong><a href=\"http://ideone.com/Fv5NZT\" rel=\"nofollow\">online demo</a></strong>,  which shows that the const reference refers to a temporary and not to the original object pointed to by aPtr.   </p>\n", "LastEditorUserId": "3723423", "LastActivityDate": "2015-05-27T21:03:09.963", "Score": "1", "CreationDate": "2015-05-27T18:20:08.480", "ParentId": "30489726", "CommentCount": "3", "OwnerUserId": "3723423", "LastEditDate": "2015-05-27T21:03:09.963"}, "30489806": {"Id": "30489806", "PostTypeId": "2", "Body": "<p>Your conditional expression is a prvalue (because one of its operands is). If the first alternative of the conditional operator is selected, it is converted to a temporary (which incurs a copy). That temporary is bound to the reference, and the usual life-time extension applies.</p>\n<p>The relevant standardese [expr.cond]:</p>\n<blockquote>\n<p id=\"so_30489726_30489806_0\">If the operands have class type, the result is a prvalue temporary of the result type, which is copy-initialized from either the second operand or the third operand depending on the value of the first operand.</p>\n</blockquote>\n", "LastEditorUserId": "596781", "LastActivityDate": "2015-05-27T18:28:16.790", "Score": "6", "CreationDate": "2015-05-27T17:55:47.830", "ParentId": "30489726", "CommentCount": "5", "OwnerUserId": "596781", "LastEditDate": "2015-05-27T18:28:16.790"}, "bq_ids": {"n4140": {"so_30489726_30490256_0": {"length": 14, "quality": 0.9333333333333333, "section_id": 6170}, "so_30489726_30489798_1": {"length": 19, "quality": 0.9047619047619048, "section_id": 382}, "so_30489726_30489798_0": {"length": 16, "quality": 0.9411764705882353, "section_id": 381}, "so_30489726_30489806_0": {"length": 19, "quality": 1.0, "section_id": 6172}}, "n3337": {"so_30489726_30490256_0": {"length": 14, "quality": 0.9333333333333333, "section_id": 5931}, "so_30489726_30489798_1": {"length": 19, "quality": 0.9047619047619048, "section_id": 373}, "so_30489726_30489798_0": {"length": 16, "quality": 0.9411764705882353, "section_id": 372}, "so_30489726_30489806_0": {"length": 19, "quality": 1.0, "section_id": 5933}}, "n4659": {"so_30489726_30490256_0": {"length": 14, "quality": 0.9333333333333333, "section_id": 7668}, "so_30489726_30489798_1": {"length": 18, "quality": 0.8571428571428571, "section_id": 397}, "so_30489726_30489798_0": {"length": 15, "quality": 0.8823529411764706, "section_id": 396}, "so_30489726_30489806_0": {"length": 10, "quality": 0.5263157894736842, "section_id": 7667}}}, "30489798": {"Id": "30489798", "PostTypeId": "2", "Body": "<p>To the first, yes <code>a</code> is guaranteed to refer to a valid <code>MyClass</code> object. This comes directly from [class.temporary]/4-5:</p>\n<blockquote>\n<p id=\"so_30489726_30489798_0\">There are two contexts in which temporaries are destroyed at a different point than the end of the fullexpression. The first context is when a default constructor is called [...]</p>\n<p id=\"so_30489726_30489798_1\">The second context is when a reference is bound to a temporary. The temporary to which the reference is\n  bound or the temporary that is the complete object of a subobject to which the reference is bound <strong>persists\n  for the lifetime of the reference</strong> except:</p>\n<ul>\n<li>A temporary bound to a reference member in a constructor\u2019s <em>ctor-initializer</em> [...]</li>\n<li>A temporary bound to a reference parameter in a function call [...]</li>\n<li>The lifetime of a temporary bound to the returned value in a function return statement [...]</li>\n<li>A temporary bound to a reference in a <em>new-initializer</em> [...]</li>\n</ul>\n</blockquote>\n<p>None of those exceptions apply. </p>\n<p>If <code>aPtr</code> is a valid pointer, then a copy is made because the type of <code>aPtr ? *aPtr : MyClass{}</code> is just <code>MyClass</code>. That temporary gets bound to <code>a</code>, and <em>its</em> lifetime also persists for the same reason. </p>\n", "LastActivityDate": "2015-05-27T17:55:29.760", "CommentCount": "0", "CreationDate": "2015-05-27T17:55:29.760", "ParentId": "30489726", "Score": "3", "OwnerUserId": "2069064"}, "30489726": {"ViewCount": "201", "Body": "<p>Consider the following code:</p>\n<pre><code>int foo(MyClass const* aPtr = 0) {\n    MyClass const&amp; a = aPtr ? *aPtr : MyClass(); // Either bind to *aPtr, or to a default-constructed MyClass\n    ...\n    return a.bar();\n}\n</code></pre>\n<p>The <a href=\"http://herbsutter.com/2008/01/01/gotw-88-a-candidate-for-the-most-important-const/\">\"most important const\"</a> is, hopefully, being used here. The aim is to allow for a null <code>aPtr</code> to be passed in (BTW, yes, it must be a pointer argument), in which case a temporary <code>MyClass</code> object would be default-constructed, and its lifetime extended by a const reference binding to it. Whereas, if <code>aPtr</code> was not null, the reference would bind to its pointed-to object without any (expensive) copy construction happening.</p>\n<p>The questions two are:</p>\n<ol>\n<li>If <code>aPtr == 0</code>, is <code>a</code> guaranteed to refer to a valid <code>MyClass</code> object until the end of the function?</li>\n<li>If <code>aPtr != 0</code>, will <code>a</code> bind to it, rather than to some other <code>MyClass</code>?</li>\n</ol>\n<p>Based on testing, the answer to 1 is almost certainly \"yes\". #2 I'm not so sure about, though (copy elision and such)... it seems possible that the conditional expression would end up copy-constructing a temporary <code>MyClass</code> from <code>*aPtr</code>, and extending the life of <em>that</em> temporary.</p>\n", "AcceptedAnswerId": "30489806", "Title": "\"Most important const\" with conditional expression?", "CreationDate": "2015-05-27T17:51:43.740", "Id": "30489726", "CommentCount": "1", "LastEditDate": "2015-05-27T23:03:49.523", "PostTypeId": "1", "LastEditorUserId": "787480", "LastActivityDate": "2015-05-27T23:03:49.523", "Score": "11", "OwnerUserId": "787480", "Tags": "<c++><conditional-operator>", "AnswerCount": "3"}});