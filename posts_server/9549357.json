post_cb({"bq_ids": {"n4140": {"so_9549357_9574589_2": {"length": 13, "quality": 0.9285714285714286, "section_id": 3587}}, "n3337": {"so_9549357_9574589_2": {"length": 13, "quality": 0.9285714285714286, "section_id": 3452}}, "n4659": {"so_9549357_9574589_2": {"length": 12, "quality": 0.8571428571428571, "section_id": 4352}}}, "9575747": {"Id": "9575747", "PostTypeId": "2", "Body": "<p>According to a comment left on this question by Hans Passant, <code>random_device</code> uses <code>advapi32:SystemFunction036</code>, which  according to MSDN is an alias for <code>RtlGenRandom</code>.  This is verified by the runtime library source provided with VC++ 2010:</p>\n<p><code>random_device::operator()()</code> in <code>&lt;random&gt;</code> calls the following chain of functions:</p>\n<pre><code>_Random_device() // in xrngdev.cpp\n    rand_s()     // in rand_s.c\n        RtlGenRandom()/SystemFunction036()  // in advapi32.dll\n</code></pre>\n<p>According to a comment left by Michael Howard on one of his blog articles, <a href=\"http://blogs.msdn.com/b/michael_howard/archive/2005/01/14/353379.aspx\" rel=\"noreferrer\">\"Cryptographically Secure Random number on Windows without using CryptoAPI\"</a>, <code>RtlGenRandom</code> uses the following:</p>\n<blockquote>\n<p id=\"so_9549357_9575747_0\">The RNG generates as specified in FIPS 186-2 appendix 3.1 with SHA-1\n  as the G function. With entropy from:</p>\n<ul>\n<li><p id=\"so_9549357_9575747_1\">The current process ID (GetCurrentProcessID).</p></li>\n<li><p id=\"so_9549357_9575747_2\">The current thread ID (GetCurrentThreadID).</p></li>\n<li><p id=\"so_9549357_9575747_3\">The ticks since boot (GetTickCount).</p></li>\n<li><p id=\"so_9549357_9575747_4\">The current time (GetLocalTime).</p></li>\n<li><p id=\"so_9549357_9575747_5\">Various high-precision performance counters (QueryPerformanceCounter).</p></li>\n<li><p id=\"so_9549357_9575747_6\">An MD4 hash of the user's environment block, which includes username, computer name, and search path. MD4 is a hashing algorithm\n  that creates a 128-bit message digest from input data to verify data\n  integrity.</p></li>\n<li><p id=\"so_9549357_9575747_7\">High-precision internal CPU counters, such as RDTSC, RDMSR, RDPMC</p></li>\n<li><p id=\"so_9549357_9575747_8\">Low-level system information: Idle Process Time, Io Read Transfer Count, I/O Write Transfer Count, I/O Other Transfer Count, I/O Read\n  Operation Count, I/O Write Operation Count, I/O Other Operation Count,\n  Available Pages, Committed Pages, Commit Limit, Peak Commitment, Page\n  Fault Count, Copy On Write Count, Transition Count, Cache Transition\n  Count, Demand Zero Count, Page Read Count, Page Read I/O Count, Cache\n  Read Count, Cache I/O Count, Dirty Pages Write Count, Dirty Write I/O\n  Count, Mapped Pages Write Count, Mapped Write I/O Count, Paged Pool\n  Pages, Non Paged Pool Pages, Paged Pool Allocated space, Paged Pool\n  Free space, Non Paged Pool Allocated space, Non Paged Pool Free space,\n  Free System page table entry, Resident System Code Page, Total System\n  Driver Pages, Total System Code Pages, Non Paged Pool Lookaside Hits,\n  Paged Pool Lookaside Hits, Available Paged Pool Pages, Resident System\n  Cache Page, Resident Paged Pool Page, Resident System Driver Page,\n  Cache manager Fast Read with No Wait, Cache manager Fast Read with\n  Wait, Cache manager Fast Read Resource Missed, Cache manager Fast Read\n  Not Possible, Cache manager Fast Memory Descriptor List Read with No\n  Wait, Cache manager Fast Memory Descriptor List Read with Wait, Cache\n  manager Fast Memory Descriptor List Read Resource Missed, Cache\n  manager Fast Memory Descriptor List Read Not Possible, Cache manager\n  Map Data with No Wait, Cache manager Map Data with Wait, Cache manager\n  Map Data with No Wait Miss, Cache manager Map Data Wait Miss, Cache\n  manager Pin-Mapped Data Count, Cache manager Pin-Read with No Wait,\n  Cache manager Pin Read with Wait, Cache manager Pin-Read with No Wait\n  Miss, Cache manager Pin-Read Wait Miss, Cache manager Copy-Read with\n  No Wait, Cache manager Copy-Read with Wait, Cache manager Copy-Read\n  with No Wait Miss, Cache manager Copy-Read with Wait Miss, Cache\n  manager Memory Descriptor List Read with No Wait, Cache manager Memory\n  Descriptor List Read with Wait, Cache manager Memory Descriptor List\n  Read with No Wait Miss, Cache manager Memory Descriptor List Read with\n  Wait Miss, Cache manager Read Ahead IOs, Cache manager Lazy-Write IOs,\n  Cache manager Lazy-Write Pages, Cache manager Data Flushes, Cache\n  manager Data Pages, Context Switches, First Level Translation buffer\n  Fills, Second Level Translation buffer Fills, and System Calls.</p></li>\n<li><p id=\"so_9549357_9575747_9\">System exception information consisting of Alignment Fix up Count, Exception Dispatch Count, Floating Emulation Count, and Byte Word\n  Emulation Count.</p></li>\n<li><p id=\"so_9549357_9575747_10\">System lookaside information consisting of Current Depth, Maximum Depth, Total Allocates, Allocate Misses, Total Frees, Free Misses,\n  Type, Tag, and Size.</p></li>\n<li><p id=\"so_9549357_9575747_11\">System interrupt information consisting of context switches, deferred procedure call count, deferred procedure call rate, time\n  increment, deferred procedure call bypass count, and asynchronous\n  procedure call bypass count.</p></li>\n<li><p id=\"so_9549357_9575747_12\">System process information consisting of Next Entry Offset, Number Of Threads, Create Time, User Time, Kernel Time, Image Name, Base\n  Priority, Unique Process ID, Inherited from Unique Process ID, Handle\n  Count, Session ID, Page Directory Base, Peak Virtual Size, Virtual\n  Size, Page Fault Count, Peak Working Set Size, Working Set Size, Quota\n  Peak Paged Pool Usage, Quota Paged Pool Usage, Quota Peak Non Paged\n  Pool Usage, Quota Non Paged Pool Usage, Page file Usage, Peak Page\n  file Usage, Private Page Count, Read Operation Count, Write Operation\n  Count, Other Operation Count, Read Transfer Count, Write Transfer\n  Count, and Other Transfer Count.</p></li>\n</ul>\n</blockquote>\n<p>There's a full explanation (including diagrams) in Chapter 8 of Writing Secure Code, 2nd Edition.</p>\n", "LastEditorUserId": "12711", "LastActivityDate": "2012-03-06T00:11:42.407", "Score": "19", "CreationDate": "2012-03-05T23:34:16.577", "ParentId": "9549357", "CommentCount": "0", "OwnerUserId": "12711", "LastEditDate": "2012-03-06T00:11:42.407"}, "9549357": {"ViewCount": "2760", "Body": "<p>From my reading of the standard, <code>random_device::entropy()</code> should return 0.0 if a software engine is used. However, in VS2010 it returns 32.0, which in my understanding requires hardware to produce non-deterministic random numbers. </p>\n<p>How does VS2010's <code>random_device</code> generate the number sequence?</p>\n", "AcceptedAnswerId": "9575747", "Title": "The implementation of random_device in VS2010?", "CreationDate": "2012-03-03T19:56:42.233", "Id": "9549357", "CommentCount": "3", "FavoriteCount": "6", "PostTypeId": "1", "LastEditDate": "2012-03-03T20:21:36.630", "LastEditorUserId": "636019", "LastActivityDate": "2012-03-06T00:11:42.407", "Score": "12", "OwnerUserId": "221619", "Tags": "<c++><visual-studio-2010><random><c++11>", "AnswerCount": "2"}, "9574589": {"Id": "9574589", "PostTypeId": "2", "Body": "<p>Maybe it's a bug, maybe it isn't.  But it sure looks deliberate.  From Microsoft's <a href=\"http://msdn.microsoft.com/en-us/library/bb982250.aspx\" rel=\"nofollow\">own documentation</a>:</p>\n<blockquote>\n<p id=\"so_9549357_9574589_0\">The class describes a source of random numbers, preferably from a\n  non-deterministic external device. <strong>In this implementation the values\n  produced by default are not non-deterministic.</strong> They are uniformly\n  distributed in the closed range [0, 65535].</p>\n</blockquote>\n<p>And from the C++11 standard, section 26.5.6.6 on <code>random_device</code>:</p>\n<blockquote>\n<p id=\"so_9549357_9574589_1\"><code>result_type operator()();</code></p>\n<p id=\"so_9549357_9574589_2\">Returns: <strong>A non-deterministic random value</strong>,\n  uniformly distributed between min() and max(), inclusive. It is\n  implementation-defined how these values are generated.</p>\n</blockquote>\n<p>By a strict reading of the standard, they shouldn't be able return anything other than 0 from <code>entropy()</code>.  Perhaps they plan to improve the implementation someday and tried to make it do Something Reasonable for now.  They do have an API call to generate <a href=\"http://msdn.microsoft.com/en-us/library/windows/desktop/aa379942%28v=vs.85%29.aspx\" rel=\"nofollow\">cryptographically secure random numbers</a> but don't appear to be using it for this yet.</p>\n", "LastEditorUserId": "46821", "LastActivityDate": "2012-03-05T22:31:39.730", "Score": "1", "CreationDate": "2012-03-05T21:51:54.507", "ParentId": "9549357", "CommentCount": "3", "OwnerUserId": "46821", "LastEditDate": "2012-03-05T22:31:39.730"}});