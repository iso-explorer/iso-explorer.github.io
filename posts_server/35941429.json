post_cb({"35941517": {"ParentId": "35941429", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2016-03-11T13:29:00.003", "Score": "7", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T10:28:32.080", "Id": "35941517", "OwnerUserId": "3747990", "Body": "<p>The statement;</p>\n<pre><code>d = ++a &amp;&amp; ++b || ++c;\n</code></pre>\n<p>Is grouped left to right (given the <a href=\"http://en.cppreference.com/w/cpp/language/operator_precedence\" rel=\"nofollow noreferrer\">precedence of <code>&amp;&amp;</code></a>);</p>\n<pre><code>d = (++a &amp;&amp; ++b) || ++c;\n</code></pre>\n<p>Hence, when evaluating the <code>&amp;&amp;</code>, since the first operand is true (the <code>++a</code>), the second is evaluated (the <code>++b</code>). At this point, the result of this logical AND is <code>true</code>; hence the logical OR is true and its second operand is not evaluated (the <code>++c</code>).</p>\n<p>This behaviour is guaranteed and is commonly known as short circuit evaluation. The wording for this in the standards for C++ and C is <a href=\"https://stackoverflow.com/a/35912619/3747990\">listed here, in this answer</a>; briefly reproduced here for C++;</p>\n<p><em>\u00a75.14 Logical AND operator</em></p>\n<blockquote>\n<p id=\"so_35941429_35941517_0\">1 The <code>&amp;&amp;</code> operator groups left-to-right. The operands are both contextually converted to bool (Clause 4). The result is true if both operands are true and false otherwise. Unlike <code>&amp;</code>, <code>&amp;&amp;</code> guarantees left-to-right evaluation: the second operand is not evaluated if the first operand is false.</p>\n</blockquote>\n<p><em>\u00a75.15 Logical OR operator</em></p>\n<blockquote>\n<p id=\"so_35941429_35941517_1\">1 The <code>||</code> operator groups left-to-right. The operands are both contextually converted to bool (Clause 4). It returns true if either of its operands is true, and false otherwise. Unlike <code>|</code>, <code>||</code> guarantees left-to-right evaluation; moreover, the second operand is not evaluated if the first operand evaluates to true.</p>\n</blockquote>\n", "LastActivityDate": "2016-03-11T14:35:03.097"}, "35941429": {"CommentCount": "1", "ViewCount": "92", "PostTypeId": "1", "ClosedDate": "2016-03-11T13:28:38.433", "LastEditorUserId": "3747990", "CreationDate": "2016-03-11T13:24:48.007", "LastActivityDate": "2016-03-13T15:03:34.097", "LastEditDate": "2016-03-13T15:03:34.097", "FavoriteCount": "0", "Title": "Unable to understand the execution when using the logical operators", "Id": "35941429", "Score": "-2", "Body": "<p>This is the code :</p>\n<pre><code>void main()\n{\n    clrscr();\n    int a=-3 , b=2 , c=0, d;\n    d = ++a &amp;&amp; ++b || ++c;\n    printf(\"a=%d , b=%d , c=%d, d=%d \",a,b,c,d);\n    getch();\n}\n</code></pre>\n<p>Output : <code>-2 , 3 , 0 , 1</code></p>\n<p>I am unable to understand that why value of <code>c</code> is not incremented, I think it should be <code>1</code> and how come output of <code>d = 1</code>.</p>\n", "Tags": "<c++><c><logical-operators>", "OwnerUserId": "4792891", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_35941429_35941517_1": {"section_id": 6165, "quality": 0.9354838709677419, "length": 29}, "so_35941429_35941517_0": {"section_id": 6163, "quality": 0.896551724137931, "length": 26}}, "n3337": {"so_35941429_35941517_1": {"section_id": 5926, "quality": 0.9354838709677419, "length": 29}, "so_35941429_35941517_0": {"section_id": 5924, "quality": 0.896551724137931, "length": 26}}, "n4659": {"so_35941429_35941517_1": {"section_id": 7662, "quality": 0.9354838709677419, "length": 29}, "so_35941429_35941517_0": {"section_id": 7660, "quality": 0.896551724137931, "length": 26}}}});