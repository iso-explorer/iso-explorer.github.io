post_cb({"bq_ids": {"n4140": {"so_21214653_21214890_2": {"length": 31, "quality": 0.7560975609756098, "section_id": 3376}}, "n3337": {"so_21214653_21214890_0": {"length": 8, "quality": 0.6153846153846154, "section_id": 3143}, "so_21214653_21214890_2": {"length": 34, "quality": 0.8292682926829268, "section_id": 3246}}}, "21214890": {"PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_21214653_21214890_0\"><em>8.4.2 [dcl.fct.def.default]</em> An explicitly-defaulted function [...] may have an explicit exception-speci\ufb01cation only if it is compatible (15.4) with the exception-speci\ufb01cation on the implicit declaration.</p>\n</blockquote>\n<blockquote>\n<p id=\"so_21214653_21214890_1\"><em>15.4/3 [except.spec]</em> Two exception-speci\ufb01cations are compatible if:</p>\n<ul>\n<li>both are non-throwing (see below), regardless of their form,</li>\n<li>both have the form noexcept(constant-expression) and the constant-expressions are equivalent, or</li>\n<li>both are dynamic-exception-speci\ufb01cations that have the same set of adjusted types.</li>\n</ul>\n</blockquote>\n<p>So you can only give an explicit exception-specification if it exactly matches the one that the implicit declaration of the destructor would have.</p>\n<p>The exception-specification that the implicit destructor would have depends on the functions it would call:</p>\n<blockquote>\n<p id=\"so_21214653_21214890_2\"><em>15.4/14 [except.spec]</em> An implicitly declared special member function shall have an exception-speci\ufb01cation. If f is an implicitly declared [...] destructor, [...] its implicit exception-speci\ufb01cation speci\ufb01es the type-id T if and only if T is allowed by the exception-speci\ufb01cation of a function directly invoked by f\u2019s implicit de\ufb01nition; f shall allow all exceptions if any function it directly invokes allows all exceptions, and f shall allow no exceptions if every function it directly invokes allows no exceptions.</p>\n</blockquote>\n<p>The functions that a destructor calls are the destructors of the class's non-static data members, its base classes, and its virtual base classes.</p>\n<p>In your case, since the class has no data members and no base classes and therefore it calls no functions, it falls into the final case. Every function it directly invokes (there are none) allows no exceptions, so this destructor must allow no exceptions. Therefore, your exception-specification has to be non-throwing, so <code>nothrow</code>, <code>except()</code>, and <code>exception(constant expression that yields true)</code> are the only appropriate exception-specifications you can give, so your code is fine.</p>\n", "LastActivityDate": "2014-01-19T09:13:06.857", "LastEditorUserId": "150634", "Id": "21214890", "CommentCount": "3", "CreationDate": "2014-01-19T09:02:08.910", "ParentId": "21214653", "Score": "4", "OwnerUserId": "150634", "LastEditDate": "2014-01-19T09:13:06.857"}, "21214653": {"ViewCount": "652", "Body": "<p>The following code is legal?</p>\n<pre><code>class C\n{\n    virtual ~C() noexcept = default;\n};\n</code></pre>\n<p>or</p>\n<pre><code>class C\n{\n    virtual ~C() throw() = default;\n};\n</code></pre>\n<p>(throw() is deprecated, but my compiler doesn't support noexcept ;;)</p>\n", "AcceptedAnswerId": "21214890", "Title": "C++ : noexcept (or throw()) virtual destructor = default;", "CreationDate": "2014-01-19T08:29:38.820", "Id": "21214653", "CommentCount": "1", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2014-01-19T08:40:15.870", "LastEditorUserId": "631429", "LastActivityDate": "2014-01-19T09:13:06.857", "Score": "4", "OwnerUserId": "2729109", "Tags": "<c++><destructor>", "AnswerCount": "1"}});