post_cb({"27829729": {"ParentId": "27829608", "LastEditDate": "2015-01-07T22:29:08.447", "CommentCount": "1", "CreationDate": "2015-01-07T22:23:27.957", "OwnerUserId": "864313", "LastEditorUserId": "864313", "PostTypeId": "2", "Id": "27829729", "Score": "0", "Body": "<p>In the <code>Viewer</code> class, you are missing a <code>return</code> statement:</p>\n<pre><code>int retObjectVal( ) { return myObject-&gt;i; }\n</code></pre>\n<p>should work.</p>\n<p>What you have is a method where some of its branches fall off without returning a value. This leads to undefined behavior. You are simply evaluating \"myObject-&gt;i;\" as a statement.</p>\n<hr>\n<p>Another issue you should probably address is that your Object pointers are not owned by anyone and not being deleted anywhere. Namely, you are deleting your <code>ObjectManager</code> but nowhere does it <code>delete</code> the underlying object itself. You should probably figure out an ownership model there, have someone keep track of these pointers, and <code>delete</code> them when appropriate.</p>\n</hr>", "LastActivityDate": "2015-01-07T22:29:08.447"}, "27829747": {"ParentId": "27829608", "CommentCount": "1", "Body": "<p>The problem is:</p>\n<pre><code>int retObjectVal(  ) { myObject-&gt;i; }\n</code></pre>\n<p>There is no <code>return</code> statement in that function. You just have an expression with no side effect. As a result, we run into \u00a76.6.3/2:</p>\n<blockquote>\n<p id=\"so_27829608_27829747_0\">Flowing off the end of a function is equivalent to a return with no value; this results in undefined\n  behavior in a value-returning function.</p>\n</blockquote>\n<p>It's undefined behavior what it returns, so it ends up returning some garbage. Just make it:</p>\n<pre><code>int retObjectVal() { return myObject-&gt;i; }\n</code></pre>\n<p>This is an easy mistake to make, which is why you should always try to compile with the highest warning settings possible. For instance, on gcc with no flags, I get no warnings. But with <code>-Wall</code>, I get:</p>\n<blockquote>\n<p id=\"so_27829608_27829747_1\">warning: statement has no effect [-Wunused-value]</p>\n<p id=\"so_27829608_27829747_2\">warning: no return statement in function returning non-void [-Wreturn-type]</p>\n</blockquote>\n", "OwnerUserId": "2069064", "PostTypeId": "2", "Id": "27829747", "Score": "7", "CreationDate": "2015-01-07T22:24:39.513", "LastActivityDate": "2015-01-07T22:24:39.513"}, "27829803": {"ParentId": "27829608", "CommentCount": "0", "Body": "<p>First, you're not initializing <code>Viewer::myObject</code> so if you just do</p>\n<pre><code>void something() {\n    Viewer v;\n}\n</code></pre>\n<p>You may end up trying to delete an invalid pointer.</p>\n<pre><code>myViewer.cpyinObject( &amp;myManager );\nmyViewer.ptrinObject( &amp;myManager );\n</code></pre>\n<p>Both functions create a new <code>Object</code> but neither checks to see if there's already one allocated (memory leak). Then later, they immediately ignore that new object created and instead assign yet another new <code>Object</code> allocated by <code>ObjectManager</code> (more memory leaks).</p>\n<p>Finally, <code>Viewer::retObjectVal</code> does not actually specifically <code>return</code> a value and therefore you are receiving \"junk off the end of the function\".</p>\n<p>I suggest you look at your compiler warnings as any sensible compiler will have warned you about the first and third issues I've mentioned.</p>\n", "OwnerUserId": "1111557", "PostTypeId": "2", "Id": "27829803", "Score": "1", "CreationDate": "2015-01-07T22:28:33.037", "LastActivityDate": "2015-01-07T22:28:33.037"}, "27829608": {"CommentCount": "3", "ViewCount": "78", "PostTypeId": "1", "LastEditorUserId": "3501778", "CreationDate": "2015-01-07T22:16:09.247", "LastActivityDate": "2015-01-07T22:29:08.447", "Title": "Pointer Works And Then Breaks Seemingly Without Reason", "AcceptedAnswerId": "27829729", "LastEditDate": "2015-01-07T22:22:25.953", "Id": "27829608", "Score": "-1", "Body": "<p>Why is it that I can access the data held within the object after assigning the pointer WHILE I'm within the scope of the assigning function, but cannot once I try to access the same value through the same pointer but outside of that function?</p>\n<p>The pointer is a member function and is assigned within the function. Within the function, that works fine. But, when from within that function, I call ANOTHER function which uses the class scope, the pointer misbehaves, presenting garbage data. Why?</p>\n<p>CODE:</p>\n<pre><code>#include &lt;iostream&gt;\n\nclass Object{\npublic:\n    Object(  ) { std::cout &lt;&lt; \"Object constructor called.\" &lt;&lt; std::endl; }\n    Object( const Object &amp;in ) { i = in.i; std::cout &lt;&lt; \"Object copy constructor called.\" &lt;&lt; std::endl; }\n    ~Object(  ) { std::cout &lt;&lt; \"Object destructor called.\" &lt;&lt; std::endl; }\n    int i;\n};\n\nclass ObjectManager{\npublic:\n    Object * retObject(){\n        Object *myObject = new Object;\n        myObject-&gt;i=55;\n        return myObject;\n    }\n};\n\nclass LogicManager{\npublic:\n    LogicManager(){\n        myObjectManager = new ObjectManager;\n    }\n    ~LogicManager(){\n        delete myObjectManager;\n    }\n    Object * retObject(){\n        return myObjectManager-&gt;retObject();\n    }\nprivate:\n    ObjectManager *myObjectManager;\n};\n\nclass Viewer{\npublic:\n    ~Viewer(  ) { if( myObject ) { delete myObject; } }\n    void ptrinObject( LogicManager * inLogic ){\n        myObject = inLogic-&gt;retObject();\n\n        std::cout &lt;&lt; \"Got path size of \" &lt;&lt; myObject-&gt;i &lt;&lt; std::endl;       //correct\n        std::cout &lt;&lt; \"Got path size of \" &lt;&lt; retObjectVal(  ) &lt;&lt; std::endl;  //0?!?!?!?\n    }\n    int retObjectVal(  ) { myObject-&gt;i; }\nprivate:\n    Object *myObject;\n};\n\n\nint main(){\n    LogicManager myManager;\n    Viewer myViewer;\n    //myViewer.cpyinObject( &amp;myManager );\n    myViewer.ptrinObject( &amp;myManager );\n\n    return 0;\n}\n</code></pre>\n<p>OUTPUT:</p>\n<pre><code>Object constructor called.\nGot path size of 55\nGot path size of 861280848\nObject destructor called.\n</code></pre>\n", "Tags": "<c++><pointers>", "OwnerUserId": "3501778", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_27829608_27829747_0": {"section_id": 3913, "quality": 1.0, "length": 12}, "so_27829608_27829747_2": {"section_id": 3913, "quality": 0.5714285714285714, "length": 4}}, "n3337": {"so_27829608_27829747_0": {"section_id": 3773, "quality": 1.0, "length": 12}, "so_27829608_27829747_2": {"section_id": 3773, "quality": 0.5714285714285714, "length": 4}}, "n4659": {"so_27829608_27829747_0": {"section_id": 4799, "quality": 0.75, "length": 9}}}});