post_cb({"bq_ids": {"n4140": {"so_34552380_34552418_0": {"length": 48, "quality": 0.8571428571428571, "section_id": 7043}, "so_34552380_34552544_0": {"length": 38, "quality": 0.926829268292683, "section_id": 7043}}, "n3337": {"so_34552380_34552418_0": {"length": 48, "quality": 0.8571428571428571, "section_id": 6788}, "so_34552380_34552544_0": {"length": 39, "quality": 0.9512195121951219, "section_id": 6788}}, "n4659": {"so_34552380_34552418_0": {"length": 48, "quality": 0.8571428571428571, "section_id": 8540}, "so_34552380_34552544_0": {"length": 38, "quality": 0.926829268292683, "section_id": 8540}}}, "34552380": {"ViewCount": "264", "Body": "<p>Maybe its lame question, But I don't get it!\nIf I include <code>&lt;string&gt;</code> or <code>&lt;vector&gt;</code> in multiple translation units (different .cpp) why it doesn't break the ODR?\nAs far as I know each .cpp is compiled differently so vector's methods code will be generated for each object file separately, right?\nSo linker should detect it and complain.\nEven If it won't  (I suspect it's special case for templates) will it be using one code or different set of cloned code in each unit, when I link all together???</p>\n", "AcceptedAnswerId": "34552418", "Title": "Why C++'s <vector> templated class doesn't break one definition rule?", "CreationDate": "2015-12-31T23:23:41.117", "Id": "34552380", "CommentCount": "3", "LastEditDate": "2015-12-31T23:34:32.723", "PostTypeId": "1", "LastEditorUserId": "3598119", "LastActivityDate": "2016-01-01T13:39:55.987", "Score": "3", "OwnerUserId": "5302690", "Tags": "<c++><templates><language-lawyer><one-definition-rule>", "AnswerCount": "3"}, "34552425": {"Id": "34552425", "PostTypeId": "2", "Body": "<p>The ODR doesn't state that a struct will only be declared one time across all compilation units--it states that if you declare a struct in multiple compilation units, it has to be the <em>same</em> struct. Violating the ODR would be if you had two separate <code>vector</code> types with the same name but different contents. At that point the linker would get confused and you'd get mixed up code and/or errors.</p>\n", "LastActivityDate": "2015-12-31T23:32:34.120", "CommentCount": "0", "CreationDate": "2015-12-31T23:32:34.120", "ParentId": "34552380", "Score": "1", "OwnerUserId": "291737"}, "34552544": {"Id": "34552544", "PostTypeId": "2", "Body": "<p>The standard has a special exception for templates that allows for duplication of functions that otherwise would violate ODR (such as functions with external linkage and non-inline member functions).  from C++11 3.2/5:</p>\n<blockquote>\n<p id=\"so_34552380_34552544_0\">If D is a template and is defined in more than one translation unit,\n  then the preceding requirements shall apply both to names from the\n  template\u2019s enclosing scope used in the template definition (14.6.3),\n  and also to dependent names at the point of instantiation (14.6.2). If\n  the definitions of D satisfy all these requirements, <strong>then the program\n  shall behave as if there were a single definition of D</strong>. If the\n  definitions of D do not satisfy these requirements, then the behavior\n  is undefined.</p>\n</blockquote>\n", "LastActivityDate": "2015-12-31T23:57:40.887", "CommentCount": "0", "CreationDate": "2015-12-31T23:57:40.887", "ParentId": "34552380", "Score": "5", "OwnerUserId": "12711"}, "34552418": {"Id": "34552418", "PostTypeId": "2", "Body": "<p>The same way <em>any</em> template definitions don't break the ODR \u2014 the ODR specifically says that template definitions may be duplicated across translation units, as long as they are literally duplicates (and, since they are duplicates, no conflict or ambiguity is possible).</p>\n<blockquote>\n<p id=\"so_34552380_34552418_0\"><code>[C++14: 3.2/6]:</code> There can be more than one definition of a class type (Clause 9), enumeration type (7.2), inline function with external linkage (7.1.2), class template (Clause 14), non-static function template (14.5.6), static data member of a class template (14.5.1.3), member function of a class template (14.5.1.1), or template specialization for which some template parameters are not specified (14.7, 14.5.5) in a program provided that each definition appears in a different translation unit, and provided the definitions satisfy the following requirements <em>[..]</em></p>\n</blockquote>\n<p>Multiple inclusions of <code>&lt;vector&gt;</code> within the same translation unit are expressly permitted and effectively elided, more than likely by \"<code>#ifndef</code>\" header guards.</p>\n", "LastEditorUserId": "560648", "LastActivityDate": "2016-01-01T13:39:55.987", "Score": "13", "CreationDate": "2015-12-31T23:30:44.547", "ParentId": "34552380", "CommentCount": "13", "OwnerUserId": "560648", "LastEditDate": "2016-01-01T13:39:55.987"}});