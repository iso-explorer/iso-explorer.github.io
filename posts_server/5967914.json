post_cb({"5967966": {"Id": "5967966", "PostTypeId": "2", "Body": "<p>Yes, it's still undefined behavior, because you're lying to the compiler about the real type of <code>d</code>.</p>\n<p>See the standard 5.2.9/8:</p>\n<blockquote>\n<p id=\"so_5967914_5967966_0\">An rvalue of type \u201cpointer to cv1 B\u201d,\n  where B is a class type, can be\n  converted to an rvalue of type\n  \u201cpointer to cv2 D\u201d, where D is a class\n  derived (clause 10) from B, if a valid\n  standard conversion from \u201cpointer to\n  D\u201d to \u201cpointer to B\u201d exists (4.10),\n  cv2 is the same cvqualification as, or\n  greater cvqualification than, cv1, and\n  B is not a virtual base class of D.\n  The null pointer value (4.10) is\n  converted to the null pointer value of\n  the destination type. If the rvalue of\n  type \u201cpointer to cv1 B\u201d points to a B\n  that is actually a subobject of an\n  object of type D, the resulting\n  pointer points to the enclosing object\n  of type D. Otherwise, the result of\n  the cast is undefined.</p>\n</blockquote>\n<p>The final two sentences say that if the <code>B</code> pointed to by the pointer is not actually part of a <code>D</code> derived class, the cast is undefined behavior.</p>\n", "LastEditorUserId": "251738", "LastActivityDate": "2011-05-11T17:12:45.257", "Score": "7", "CreationDate": "2011-05-11T17:04:43.980", "ParentId": "5967914", "CommentCount": "0", "OwnerUserId": "251738", "LastEditDate": "2011-05-11T17:12:45.257"}, "5967914": {"ViewCount": "271", "Body": "<p>In C++, is it Undefined Behavior if a Base class object is instantiated <em>as a base object</em>, and subsequently downcast to a derived object?  </p>\n<p>Of course, I would assume it definitely <em>must</em> be undefined behavior, because the Derived class object might have member variables which the base class doesn't.  So these variables wouldn't actually exist if the class was instantiated as a base object, which means that accessing them through a Derived class pointer would have to cause Undefined Behavior.</p>\n<p>But, what if the Derived class simply provides extra member functions, but doesn't include any further member data?  For example:</p>\n<pre><code>class Base\n{\n    public:\n    int x;\n};\n\nclass Derived : public Base\n{\n    public:\n    void foo();    \n};\n\nint main()\n{\n    Base b;\n    Derived* d = static_cast&lt;Derived*&gt;(&amp;b);\n    d-&gt;foo(); // &lt;--- Is this undefined behavior?\n}\n</code></pre>\n<p>Does this program cause undefined behavior?  </p>\n", "AcceptedAnswerId": "5967966", "Title": "Downcasting a base type", "CreationDate": "2011-05-11T16:59:32.197", "Id": "5967914", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2011-05-11T19:23:08.903", "Score": "4", "OwnerUserId": "469408", "Tags": "<c++><inheritance>", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_5967914_5967966_0": {"length": 54, "quality": 0.8571428571428571, "section_id": 6037}, "so_5967914_5968004_0": {"length": 54, "quality": 0.8571428571428571, "section_id": 6037}}, "n3337": {"so_5967914_5967966_0": {"length": 56, "quality": 0.8888888888888888, "section_id": 5805}, "so_5967914_5968004_0": {"length": 56, "quality": 0.8888888888888888, "section_id": 5805}}, "n4659": {"so_5967914_5967966_0": {"length": 49, "quality": 0.7777777777777778, "section_id": 7536}, "so_5967914_5968004_0": {"length": 49, "quality": 0.7777777777777778, "section_id": 7536}}}, "5968004": {"Id": "5968004", "PostTypeId": "2", "Body": "<p>The C++03 standard, par. 5.2.9.8 lays it out (emphasis mine):</p>\n<blockquote>\n<p id=\"so_5967914_5968004_0\">An rvalue of type \u201cpointer to cv1 B\u201d,\n  where B is a class type, can be\n  converted to an rvalue of type\n  \u201cpointer to cv2 D\u201d, where D is a class\n  derived (clause 10) from B, if a valid\n  standard conversion from \u201cpointer to\n  D\u201d to \u201cpointer to B\u201d exists (4.10),\n  cv2 is the same cv-qualification as,\n  or greater cv-qualification than, cv1,\n  and B is not a virtual base class of\n  D. The null pointer value (4.10) is\n  converted to the null pointer value of\n  the destination type. <strong>If the rvalue of\n  type \u201cpointer to cv1 B\u201d points to a B\n  that is actually a sub-object of an\n  object of type D, the resulting\n  pointer points to the enclosing object\n  of type D. Otherwise, the result of\n  the cast is undefined.</strong></p>\n</blockquote>\n", "LastActivityDate": "2011-05-11T17:08:24.467", "CommentCount": "0", "CreationDate": "2011-05-11T17:08:24.467", "ParentId": "5967914", "Score": "4", "OwnerUserId": "50079"}, "5968007": {"Id": "5968007", "PostTypeId": "2", "Body": "<p>Given the mental model I have of C++ implementation in terms of generated machine code I'd say that if the method called is not virtual and the derived class is not introducing virtual methods when the base class has none, and multiple inheritance is not involved in this trickery and and and ... it should work as you expect if the method code is indeed only accessing members defined in base object.</p>\n<p>However this is still clearly UB in C++.</p>\n", "LastEditorUserId": "320726", "LastActivityDate": "2011-05-11T19:23:08.903", "Score": "0", "CreationDate": "2011-05-11T17:08:59.987", "ParentId": "5967914", "CommentCount": "2", "OwnerUserId": "320726", "LastEditDate": "2011-05-11T19:23:08.903"}, "5967962": {"Id": "5967962", "PostTypeId": "2", "Body": "<p>Yes, that is completely undefined behaviour. That's why when downcasting you should favour <code>dynamic_cast</code> unless you're very very sure.</p>\n", "LastActivityDate": "2011-05-11T17:03:57.440", "CommentCount": "1", "CreationDate": "2011-05-11T17:03:57.440", "ParentId": "5967914", "Score": "1", "OwnerUserId": "298661"}});