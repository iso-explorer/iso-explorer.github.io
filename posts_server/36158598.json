post_cb({"bq_ids": {"n4140": {"so_36158598_36158775_0": {"length": 36, "quality": 0.9, "section_id": 6049}, "so_36158598_36158740_0": {"length": 37, "quality": 0.925, "section_id": 6049}, "so_36158598_36158740_2": {"length": 27, "quality": 1.0, "section_id": 6049}, "so_36158598_36158740_1": {"length": 20, "quality": 1.0, "section_id": 6049}}, "n3337": {"so_36158598_36158775_0": {"length": 36, "quality": 0.9, "section_id": 5817}, "so_36158598_36158740_0": {"length": 37, "quality": 0.925, "section_id": 5817}, "so_36158598_36158740_2": {"length": 27, "quality": 1.0, "section_id": 5817}, "so_36158598_36158740_1": {"length": 20, "quality": 1.0, "section_id": 5817}}, "n4659": {"so_36158598_36158775_0": {"length": 36, "quality": 0.9, "section_id": 7548}, "so_36158598_36158740_2": {"length": 27, "quality": 1.0, "section_id": 7548}, "so_36158598_36158740_0": {"length": 37, "quality": 0.925, "section_id": 7548}, "so_36158598_36158740_1": {"length": 20, "quality": 1.0, "section_id": 7548}}}, "36158740": {"Id": "36158740", "PostTypeId": "2", "Body": "<p>I believe, yes. Here is what I find in standard (5.2.10):</p>\n<blockquote>\n<p id=\"so_36158598_36158740_0\">A prvalue of type \u201cpointer to member of X of type T1\u201d can be\n  explicitly converted to a prvalue of a different type \u201cpointer to\n  member of Y of type T2\u201d if T1 and T2 are both function types or both\n  object types. The null member pointer value (4.11) is converted to\n  the null member pointer value of the destination type. The result of\n  this conversion is unspecified, except in the following cases:<br/></p>\n<p id=\"so_36158598_36158740_1\">\u2014 converting a prvalue of type \u201cpointer to member function\u201d to a\n  different pointer to member function type and back to its original\n  type yields the original pointer to member value.<br/></p>\n<p id=\"so_36158598_36158740_2\">\u2014 converting a prvalue of type \u201cpointer to data member of X of type T1\u201d to the type\n  \u201cpointer to data member of Y of type T2\u201d (where the alignment\n  requirements of T2 are no stricter than those of T1) and back to its\n  original type yields the original pointer to member value.</p>\n</blockquote>\n", "LastEditorUserId": "3545273", "LastActivityDate": "2016-03-22T15:45:37.157", "Score": "3", "CreationDate": "2016-03-22T15:36:12.160", "ParentId": "36158598", "CommentCount": "0", "OwnerUserId": "5245033", "LastEditDate": "2016-03-22T15:45:37.157"}, "36158598": {"ViewCount": "57", "Body": "<p>Reading the answer to this question (<a href=\"https://stackoverflow.com/questions/559581/casting-a-function-pointer-to-another-type\">Casting a function pointer to another type</a>), I understand that it is safe to cast pointers like <code>void(*)(A*)</code> to pointers like <code>void(*)(B*)</code>, you just need to cast them back before calling them.</p>\n<p>Does this also work for member function pointers? Can I safely cast <code>void(A::*)()</code> to <code>void(B::*)()</code> and cast it back before calling it?</p>\n<p>Example code that seems to work at least on my system:</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct A {\n  void f() { std::cout &lt;&lt; \"called\" &lt;&lt; std::endl; }\n};\n\nstruct B {};\n\nint main() {\n  A instance;\n  auto ptr = reinterpret_cast&lt;void (B::*)()&gt;(&amp;A::f);\n  (instance.*(reinterpret_cast&lt;void (A::*)()&gt;(ptr)))();\n}\n</code></pre>\n", "AcceptedAnswerId": "36158775", "Title": "Is it safe to cast a member function pointer to one of another class and back again?", "CreationDate": "2016-03-22T15:29:44.940", "Id": "36158598", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2016-03-22T15:45:37.157", "Score": "1", "OwnerUserId": "3684240", "Tags": "<c++><pointers><casting>", "AnswerCount": "3"}, "36158775": {"Id": "36158775", "PostTypeId": "2", "Body": "<p>From 5.2.10/10 (<code>reinterpret_cast</code>) we learn:</p>\n<blockquote>\n<p id=\"so_36158598_36158775_0\">A prvalue of type \u201cpointer to member of X of type T1\u201d can be\n  explicitly converted to a prvalue of a different type \u201cpointer to\n  member of Y of type T2\u201d if T1 and T2 are both function types or both\n  object types.71 The null member pointer value (4.11) is converted to\n  the null member pointer value of the destination type. The result of\n  this conversion is unspecified, except in the following cases:</p>\n<ul>\n<li>converting a prvalue of type \u201cpointer to member function\u201d to a\n  different pointer to member function type and back to its original\n  type yields the original pointer to member value.</li>\n</ul>\n</blockquote>\n<p>In this case you're casting to and from pointer-to-member-function (both point to functions), so it looks like it's totally legal.</p>\n", "LastActivityDate": "2016-03-22T15:37:32.277", "CommentCount": "0", "CreationDate": "2016-03-22T15:37:32.277", "ParentId": "36158598", "Score": "3", "OwnerUserId": "251738"}, "36158745": {"Id": "36158745", "PostTypeId": "2", "Body": "<p>5.4 [expr.cast] says that you can use <code>reinterpret_cast</code> to convert a pointer-to-member-of-derived to a pointer-to-member-of-base and back. Of course, you have to convert back to the derived type in order to use the pointer, since there is no guarantee that the function it points to is actually a member of the base.</p>\n", "LastActivityDate": "2016-03-22T15:36:29.340", "CommentCount": "11", "CreationDate": "2016-03-22T15:36:29.340", "ParentId": "36158598", "Score": "-1", "OwnerUserId": "1593860"}});