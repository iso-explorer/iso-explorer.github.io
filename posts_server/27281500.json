post_cb({"bq_ids": {"n4140": {"so_27281500_27282211_0": {"length": 7, "quality": 0.875, "section_id": 584}, "so_27281500_27282211_1": {"length": 43, "quality": 0.9772727272727273, "section_id": 584}}, "n3337": {"so_27281500_27282211_0": {"length": 7, "quality": 0.875, "section_id": 574}, "so_27281500_27282211_1": {"length": 43, "quality": 0.9772727272727273, "section_id": 574}}, "n4659": {"so_27281500_27282211_0": {"length": 7, "quality": 0.875, "section_id": 607}, "so_27281500_27282211_1": {"length": 41, "quality": 0.9318181818181818, "section_id": 607}}}, "27282211": {"Id": "27282211", "PostTypeId": "2", "Body": "<p>The second test, <code>~ec</code> runs into a peculiarity of the name lookup for operators in expressions: [over.match.oper]/3 (from the \"ancient\" N3797):</p>\n<blockquote>\n<p id=\"so_27281500_27282211_0\">For a unary operator <code>@</code> with an operand of a type whose cv-unqualified version is <code>T1</code> [...]</p>\n<p id=\"so_27281500_27282211_1\">The set of non-member candidates is the result of the unqualified\n  lookup of <code>operator@</code> in the context of the expression according to the\n  usual rules for name lookup in unqualified function calls\n  except that all member functions are ignored. <strong>However, if no operand\n  has a class type, only those non-member functions in the lookup set\n  that have a first parameter of type <code>T1</code> or \u201creference to (possibly\n  cv-qualified) <code>T1</code>\u201d, when <code>T1</code> is an enumeration type</strong> [...] <strong>are\n  candidate functions</strong>.</p>\n</blockquote>\n<p>So the <code>::operator~(const Target&amp;)</code> should not be found/used with a for an expression with a unary operator applied to an operand of type <code>ConvertibleEC</code>.</p>\n<hr>\n<p>For the first, <code>~t</code>, the operand is of class type and the above exception does not apply.</p>\n<p>Both the third and the fourth test do not use operator lookup, but usual unqualified lookup. The usual unqualified lookup finds <code>::operator~(const Target&amp;)</code> (in cases 1 and 3) and <code>anotherFunction</code> (in case 4).</p>\n</hr>", "LastEditorUserId": "420683", "LastActivityDate": "2014-12-03T21:52:16.197", "Score": "4", "CreationDate": "2014-12-03T21:41:02.817", "ParentId": "27281500", "CommentCount": "2", "OwnerUserId": "420683", "LastEditDate": "2014-12-03T21:52:16.197"}, "27281500": {"ViewCount": "381", "Body": "<p>Consider the following example:</p>\n<pre><code>struct ConvertibleStruct {};\n\nenum class ConvertibleEC {};\n\nstruct Target {\n    // Implicit conversion constructors\n    Target(ConvertibleStruct) {}\n    Target(ConvertibleEC) {}\n};\n\nTarget operator~(const Target&amp; t) {\n    return t;\n}\n\nTarget anotherFunction(const Target&amp; t) {\n    return t;\n}\n\nint main() {\n    ConvertibleStruct t;\n    ConvertibleEC ec;\n\n    ~t;                   // 1. Works finding the operator overloaded above\n    ~ec;                  // 2. Fails to compile on clang 3.4 and gcc 4.8.2\n    operator~(ec);        // 3. Works finding the operator overloaded above\n\n    anotherFunction(ec);  // 4. Works\n}\n</code></pre>\n<p><strong>Compiler versions:</strong></p>\n<p>The above findings are for <code>clang 3.4</code> and <code>gcc 4.8.2</code>. Test 2. actually compiles fine on <code>gcc 4.7.3</code> with <code>-std=c++11</code>. Possibly a bug in early GCC C++11 implementation?</p>\n<p><strong>Assertions:</strong></p>\n<ul>\n<li>Given that 1. compiles, user-defined implicit-conversions are checked when calling the <code>~</code> operator. </li>\n<li>Given that 4. compiles, user-defined implicit-conversions are checked for <code>enum class</code> objects.</li>\n</ul>\n<p><strong>Questions:</strong></p>\n<ul>\n<li>Are the above assertions correct?</li>\n<li>If they are, why does 2. fail to compile?</li>\n<li>Given that 2. fails to compile, why does 3. compile?</li>\n</ul>\n", "AcceptedAnswerId": "27282211", "Title": "User-defined implicit conversion of an enum class when calling an overloaded operator fails", "CreationDate": "2014-12-03T20:58:09.960", "Id": "27281500", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2014-12-03T21:52:16.197", "Score": "5", "OwnerUserId": "406813", "Tags": "<c++><c++11><operator-overloading><implicit-conversion><enum-class>", "AnswerCount": "1"}});