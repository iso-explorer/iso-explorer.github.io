post_cb({"bq_ids": {"n4140": {"so_22591490_22591837_1": {"length": 10, "quality": 0.9090909090909091, "section_id": 5335}, "so_22591490_22591837_4": {"length": 13, "quality": 0.9285714285714286, "section_id": 6307}, "so_22591490_22591837_3": {"length": 8, "quality": 1.0, "section_id": 6307}}, "n3337": {"so_22591490_22591837_1": {"length": 10, "quality": 0.9090909090909091, "section_id": 5132}, "so_22591490_22591837_4": {"length": 13, "quality": 0.9285714285714286, "section_id": 6064}, "so_22591490_22591837_3": {"length": 8, "quality": 1.0, "section_id": 6064}}, "n4659": {"so_22591490_22591837_1": {"length": 9, "quality": 0.8181818181818182, "section_id": 6756}, "so_22591490_22591837_4": {"length": 12, "quality": 0.8571428571428571, "section_id": 6756}, "so_22591490_22591837_3": {"length": 5, "quality": 0.625, "section_id": 7844}}}, "22591490": {"ViewCount": "317", "Body": "<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\nint main()\n{\n    std::string s;\n    s._Mysize = 7;  // Well compiled !!!\n    std::cout &lt;&lt; s.size() &lt;&lt; '\\n'; // prints 7   !!!\n\n}\n</code></pre>\n<p>Why non-static members of the <code>std::basic_string</code> are public in VS2010 ?</p>\n<p>Is this bug ? \nIf yes, how about of  next version of visual studio's ( vs2012 and vs2013) ?</p>\n<p>EDIT: I just test other containers, and ... interesting vector and unique_ptr's non-static members are public, also.</p>\n<pre><code>std::vector&lt;char&gt; v;\nv._Myfirst = (char*)2; // Well Compiled.\n\n\nstd::unique_ptr&lt; int &gt; u;\n\nu._Myptr = 0; // well compiled.\n</code></pre>\n<p><strong>Q: Is here any reason or advantage of using <code>public</code> data members ?</strong></p>\n", "AcceptedAnswerId": "22591837", "Title": "Why members of std::basic_string are public in VS2010?", "CreationDate": "2014-03-23T13:24:33.510", "Id": "22591490", "CommentCount": "4", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2014-04-10T14:12:49.167", "LastEditorUserId": "2455122", "LastActivityDate": "2014-04-10T14:12:49.167", "Score": "12", "OwnerUserId": "2542308", "Tags": "<c++><visual-studio-2010><visual-studio-2012>", "AnswerCount": "1"}, "22591837": {"Id": "22591837", "PostTypeId": "2", "Body": "<p>It's not something that affects conformance. Standard C++ programs are not allowed to use <code>_Mysize</code> in any context, not even to test if such a member exists on any standard library type. The fact that you do so anyway means the standard imposes no requirements whatsoever on the behaviour of your program.</p>\n<blockquote>\n<p id=\"so_22591490_22591837_0\"><strong>2.11 Identifiers [lex.name]</strong></p>\n<p id=\"so_22591490_22591837_1\">3 In addition, some identifiers are reserved for use by C++ implementations and standard libraries (17.6.4.3.2) and shall not be used otherwise; no diagnostic is required.</p>\n<p id=\"so_22591490_22591837_2\"><strong>17.6.4.3.2 Global names [global.names]</strong></p>\n<p id=\"so_22591490_22591837_3\">1 Certain sets of names and function signatures are always reserved to the implementation:</p>\n<p id=\"so_22591490_22591837_4\">-- Each name that contains a double underscore <code>__</code> or begins with an underscore followed by an uppercase letter (2.12) is reserved to the implementation for any use.</p>\n</blockquote>\n<p>In some cases, it might make it easier for MS to write highly-optimised special non-member functions in additional headers that did not exist at the time of the initial release, without modifying the original headers. That's one of the few cases where direct access to the classes' internals is defensible, and also one of the cases where the new functions cannot be declared <code>friend</code>, so if such functions are anticipated, exposing the internals may be the best (read: least bad) thing to do.</p>\n<p>So I wouldn't be too quick yet in calling it a bug. That said, it is a questionable design decision, and I would certainly not suggest anyone copy that style.</p>\n", "LastActivityDate": "2014-03-23T13:57:56.617", "Score": "13", "CreationDate": "2014-03-23T13:57:56.617", "ParentId": "22591490", "CommentCount": "0", "OwnerUserId": "743382"}});