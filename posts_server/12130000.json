post_cb({"bq_ids": {"n4140": {"so_12130000_12130000_2": {"length": 11, "quality": 0.7857142857142857, "section_id": 1924}, "so_12130000_12130000_4": {"length": 11, "quality": 0.7857142857142857, "section_id": 1930}}, "n3337": {"so_12130000_12130000_2": {"length": 11, "quality": 0.7857142857142857, "section_id": 1913}, "so_12130000_12130000_4": {"length": 11, "quality": 0.7857142857142857, "section_id": 1919}}, "n4659": {"so_12130000_12130000_2": {"length": 11, "quality": 0.7857142857142857, "section_id": 2195}, "so_12130000_12130000_4": {"length": 11, "quality": 0.7857142857142857, "section_id": 2201}}}, "12130935": {"Id": "12130935", "PostTypeId": "2", "Body": "<p>No, there are no such guarantees.\nYes, you may use fflush() to ensure that stdout is flushed.</p>\n<p>This question is closely related: <a href=\"https://stackoverflow.com/questions/2123528/does-reading-from-stdin-flush-stdout\">Does reading from stdin flush stdout?</a> </p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2012-08-26T14:30:51.870", "Score": "4", "CreationDate": "2012-08-26T14:30:51.870", "ParentId": "12130000", "CommentCount": "0", "OwnerUserId": "485047", "LastEditDate": "2017-05-23T12:12:19.403"}, "12130171": {"Id": "12130171", "PostTypeId": "2", "Body": "<p>I didn't know the cin / cout relation in C++, thank you.\nIn C, I don't know other way to flush the stdout buffer. I always use <strong>fflush</strong> when I need to be sure that the output has been printed at a given time.</p>\n", "LastEditorUserId": "1598228", "LastActivityDate": "2012-08-26T12:44:25.970", "Score": "3", "CreationDate": "2012-08-26T12:35:25.353", "ParentId": "12130000", "CommentCount": "0", "OwnerUserId": "1598228", "LastEditDate": "2012-08-26T12:44:25.970"}, "12130000": {"ViewCount": "338", "Body": "<blockquote>\n<p id=\"so_12130000_12130000_0\"><strong>Possible Duplicate:</strong><br>\n<a href=\"https://stackoverflow.com/questions/2123528/does-reading-from-stdin-flush-stdout\">Does reading from stdin flush stdout?</a> </br></p>\n</blockquote>\n<p>C++ Standard guarantees that all data contained in the buffer will be printed before next call to std::cin. Like this:</p>\n<pre><code>#include &lt;iostream&gt;\n\nvoid bar()\n{\n    int x;\n    std::cout &lt;&lt; \"Enter an integer: \"; /* 1 */\n    std::cin &gt;&gt; x; /* 2 */\n}\n</code></pre>\n<p>Because of this:</p>\n<p><strong>ISO/IEC 14882:2011</strong></p>\n<blockquote>\n<p id=\"so_12130000_12130000_1\">27.4.2 Narrow stream objects [narrow.stream.objects]</p>\n<p id=\"so_12130000_12130000_2\">2 After the object cin is initialized, cin.tie() returns &amp;cout. Its\n  state is otherwise the same as required  for basic_ios::init\n  (27.5.5.2).</p>\n<p id=\"so_12130000_12130000_3\">27.4.3 Wide stream objects [wide.stream.objects]</p>\n<p id=\"so_12130000_12130000_4\">2 After the object wcin is initialized, wcin.tie() returns &amp;wcout.\n  Its state is otherwise the same as  required for\n  basic_ios::init (27.5.5.2).</p>\n</blockquote>\n<p>But in C there are really no guarantees that everything contained in the stdout buffer will be printed before any attempt to stdin?</p>\n<pre><code>#include &lt;stdio.h&gt;\n\nvoid bar()\n{\n    int x;\n    printf(\"Enter an integer: \"); /* 1 */\n    scanf(\"%d\", &amp;x); /* 2 */\n}\n</code></pre>\n<p>I know that stdout is line buffered but i don't want to put '\\n' character in such situations. Is using fflush / fclose / etc is the only right way to get output right before input request in C?</p>\n", "AcceptedAnswerId": "12130935", "Title": "stdout and stdin relationships", "CreationDate": "2012-08-26T12:09:38.800", "Id": "12130000", "CommentCount": "3", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2017-05-23T12:04:46.843", "LastEditorUserId": "-1", "LastActivityDate": "2012-08-26T14:30:51.870", "ClosedDate": "2012-08-27T04:11:44.263", "Score": "8", "OwnerUserId": "1608835", "Tags": "<c++><c>", "AnswerCount": "2"}});