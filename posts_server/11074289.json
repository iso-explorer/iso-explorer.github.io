post_cb({"11074289": {"CommentCount": "5", "ViewCount": "253", "PostTypeId": "1", "LastEditorUserId": "241536", "CreationDate": "2012-06-17T19:46:54.153", "LastActivityDate": "2012-06-18T01:18:29.780", "Title": "new A[0] -- Legal, but of what use?  What does it actually do?", "AcceptedAnswerId": "11076053", "LastEditDate": "2012-06-17T20:12:31.333", "Id": "11074289", "Score": "3", "Body": "<p>According to the C++03 Standard (5.3.4/7):</p>\n<blockquote>\n<p id=\"so_11074289_11074289_0\">When the value of the expression in a direct-new-declarator is zero,\n  the allocation function is called to allocate an array with no\n  elements.</p>\n</blockquote>\n<p>By my reading, this means that this code is legal and has a specified effect:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\nusing namespace std;\n\nclass A\n{\npublic:\n    A() : a_(++aa_) {};\n    int a_;\n    static int aa_;\n};\nint A::aa_ = 0;\n\nint main()\n{\n    A* a = new A[0];\n    // cout &lt;&lt; \"A\" &lt;&lt; a-&gt;a_ &lt;&lt; endl; // &lt;-- this would be undefined behavior\n}\n</code></pre>\n<p>When I run this code under the debugger, I see that <code>A</code>'s constructor is never called.  <code>new</code> does not throw, and returns a non-null, apparently valid pointer.  However, the value at <code>a-&gt;a_</code> is uninitialized memory.</p>\n<p>Questions:</p>\n<ol>\n<li>In the above code, what does <code>a</code> actually point to?</li>\n<li>What does is mean to \"allocate an array with no elements?\"</li>\n<li>Of what practical use is it to allocate an array with zero elements?</li>\n</ol>\n", "Tags": "<c++><new-operator>", "OwnerUserId": "241536", "AnswerCount": "3"}, "11076053": {"ParentId": "11074289", "CommentCount": "2", "Body": "<p>What it comes down to is this: <code>new whatever[0]</code> results in returning a valid address, different from that of any other currently-allocated object, but which you cannot dereference.</p>\n<p>The typical use for it is with code that allocates varying sizes of arrays, so at some times you might have an array with a positive number of elements, but at other times an array with zero elements. Even though you can't dereference it, having a \"normal\" (valid) pointer instead of (for example) a null pointer can still simplify quite a bit of code.</p>\n<p>Just for one example, consider the typical case of storing the address of the start of your array, and the address one beyond the end of the array (and having loops that traverse from one to the other). With a null pointer, you can't do arithmetic like that, so anything that dealt with the one-past-the-end pointer would need special casing for a null pointer. In the case of a valid, non-null pointer that you can't dereference, you can still form the starting and ending addresses without any special cases. Instead of special-case code to execute the loops only for non-null pointers, you write normal loops that execute zero iterations when the array is empty.</p>\n", "OwnerUserId": "179910", "PostTypeId": "2", "Id": "11076053", "Score": "3", "CreationDate": "2012-06-18T01:18:29.780", "LastActivityDate": "2012-06-18T01:18:29.780"}, "11074328": {"ParentId": "11074289", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_11074289_11074328_0\">In the above code, what does a actually point to?</p>\n</blockquote>\n<p>Points to a zero element array.</p>\n<blockquote>\n<p id=\"so_11074289_11074328_1\">What does is mean to \"allocate an array with no elements?\"</p>\n</blockquote>\n<p>It means that we get a valid array, but of zero size. We can't access the values into it since there are none, but we now that each zero-sized array points to a different location and we can even make an iterator to past-the-end <code>&amp;a[0]</code>. So we can use it just like we use every other array.</p>\n<blockquote>\n<p id=\"so_11074289_11074328_2\">Of what practical use is it to allocate an array with zero elements?</p>\n</blockquote>\n<p>It just saves you from checking for <code>n = 0</code> every time you call <code>new</code>. Note that a static array of zero-size is illegal, since static arrays have static sizes that come from constant expressions. And furthermore, allows you to call any standard or custom algorithm taking a pair of iterators.</p>\n", "OwnerUserId": "927034", "PostTypeId": "2", "Id": "11074328", "Score": "5", "CreationDate": "2012-06-17T19:53:18.100", "LastActivityDate": "2012-06-17T19:53:18.100"}, "11074321": {"ParentId": "11074289", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>Your <code>a</code> points (validly) to zero consecutive elements, and zero elements have been constructed. The expression <code>a-&gt;a_</code> is the same as <code>a[0].a_</code>, which is out of bounds and hence undefined behaviour.</p>\n<p>Furthermore, the statement \"the value at <code>a-&gt;a_</code> is uninitialized memory\" doesn't seem to make sense: a value is a value, and memory is memory -- a value cannot <em>be</em> memory. Since we already established that you must never dereference <code>a</code>, it is meaningless to ask for any sort of value of a variable to which <code>a</code> points: <code>a</code> just doesn't point anywhere useful.</p>\n<p>It is still perfectly valid (and expected?!) to say <code>delete[] a;</code> to release the allocated memory and destroy all of the zero objects.</p>\n<p>(Note that C's <code>malloc</code> function can also be called with argument <code>0</code>, but there are no guarantees about its return value other that you can <code>free</code> it. In C++, <code>::operator new[]</code> is actually required to return a <em>distinct</em>, <em>non-null</em> value every time (subject to reusing values that have been passed to <code>::operator delete[]</code>).</p>\n", "OwnerUserId": "596781", "LastEditorUserId": "596781", "LastEditDate": "2012-06-17T20:03:23.283", "Id": "11074321", "Score": "4", "CreationDate": "2012-06-17T19:51:46.343", "LastActivityDate": "2012-06-17T20:03:23.283"}, "bq_ids": {"n4140": {"so_11074289_11074289_0": {"section_id": 6088, "quality": 0.7272727272727273, "length": 8}, "so_11074289_11074328_1": {"section_id": 6088, "quality": 0.6666666666666666, "length": 4}}, "n3337": {"so_11074289_11074328_2": {"section_id": 5856, "quality": 0.5714285714285714, "length": 4}, "so_11074289_11074289_0": {"section_id": 5856, "quality": 0.9090909090909091, "length": 10}}, "n4659": {"so_11074289_11074289_0": {"section_id": 7584, "quality": 0.7272727272727273, "length": 8}}}});