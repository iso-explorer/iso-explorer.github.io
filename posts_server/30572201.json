post_cb({"bq_ids": {"n4140": {"so_30572201_30572232_0": {"length": 4, "quality": 0.6666666666666666, "section_id": 6106}}, "n3337": {"so_30572201_30572232_0": {"length": 4, "quality": 0.6666666666666666, "section_id": 5872}}, "n4659": {"so_30572201_30572232_0": {"length": 4, "quality": 0.6666666666666666, "section_id": 7603}}}, "30572201": {"ViewCount": "197", "Body": "<p>There is a line of code like this:<code>char* arr=\"Hello\"</code>. I have heard that the string <code>Hello</code> is located at someplace for constant things like the value of a const variable (is that right?) . My confusion is, if that assumption is true, why can we let a pointer of type <code>char*</code> point to something that is <code>const</code>, giving people opportunity to change the const \"Hello\" string. I mean, isn't it unreasonable for a language like C which have type-check to allowed this happen?</p>\n", "Title": "Why can we let a pointer of type char point to something that is const*", "CreationDate": "2015-06-01T11:21:20.423", "LastActivityDate": "2015-06-01T11:30:09.263", "CommentCount": "0", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2015-06-01T11:30:07.627", "Tags": "<c++><c><constants>", "Id": "30572201", "LastEditorUserId": "4845608", "Score": "0", "OwnerUserId": "4845608", "ClosedDate": "2015-06-01T11:23:28.447", "AnswerCount": "1"}, "30572232": {"Id": "30572232", "PostTypeId": "2", "Body": "<p>See, the <code>\"Hello\"</code> here is a <em>string literal</em>, but it's not <code>const</code>, by standard.</p>\n<p>Most compilers, including <code>gcc</code>, puts the <em>string literals</em> in read only memory. Standard only mandates not to modify the <em>string literals.</em></p>\n<p>Quoting from <code>C11</code> standard, chapter \u00a76.4.5, <em>String literals</em></p>\n<blockquote>\n<p id=\"so_30572201_30572232_0\">If the program attempts to modify such an array, the behavior is\n  undefined.</p>\n</blockquote>\n", "LastActivityDate": "2015-06-01T11:23:02.063", "CommentCount": "0", "CreationDate": "2015-06-01T11:23:02.063", "ParentId": "30572201", "Score": "0", "OwnerUserId": "2173917"}});