post_cb({"31809388": {"CommentCount": "5", "ViewCount": "97", "CreationDate": "2015-08-04T12:29:02.640", "LastActivityDate": "2015-08-04T12:54:41.957", "Title": "What all can be the third arguement in for_each in C++?", "PostTypeId": "1", "Id": "31809388", "Score": "2", "Body": "<p>What all can be the third parameter in for_each in C++ ?\nI read its unary function but the code which I encountered had object of some class as third arguement.</p>\n", "Tags": "<c++>", "OwnerUserId": "5184267", "AnswerCount": "2"}, "31809505": {"ParentId": "31809388", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>The third argument can be a function object that is an object that can be used in the postfix expression of function call.</p>\n<p>From the C++ Standard (20.9 Function objects)</p>\n<blockquote>\n<p id=\"so_31809388_31809505_0\">1 A function object type is an object type (3.9) that can be the type\n  of the postfix-expression in a function call (5.2.2, 13.3.1.1).231 A\n  function object is an object of a function object type. In the places\n  where one would expect to pass a pointer to a function to an\n  algorithmic template (Clause 25), the interface is specified to accept\n  a function object. <strong>This not only makes algorithmic templates work\n  with pointers to functions, but also enables them to work with\n  arbitrary function objects</strong></p>\n</blockquote>\n<p>Here is an example</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n\nint main()\n{\n    const size_t N = 10;\n    int a[N] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\n\n    struct A\n    {\n        void operator()( int x ) const { std::cout &lt;&lt; x &lt;&lt; ' '; }\n    };\n\n    std::for_each( a, a + N, A() );\n    std::cout &lt;&lt; std::endl;\n}    \n</code></pre>\n<p>The program output is</p>\n<pre><code>0 1 2 3 4 5 6 7 8 9\n</code></pre>\n<p>Here is temporary object <code>A()</code> of type <code>struct A</code> is a function object because it can be used in the postfix expression of function call due to the definition of the function call operator <code>in struct A</code>.</p>\n<p>For example you can write</p>\n<pre><code>std::cout &lt;&lt; A()( a[0] ) std::endl;\n</code></pre>\n<p>or</p>\n<pre><code>A obj;\nstd::cout &lt;&lt; obj( a[0] ) std::endl;\n</code></pre>\n<p>As you see expression <code>obj( a[0] )</code> looks like a function call.</p>\n", "OwnerUserId": "2877241", "LastEditorUserId": "2877241", "LastEditDate": "2015-08-04T12:54:41.957", "Id": "31809505", "Score": "3", "CreationDate": "2015-08-04T12:35:46.177", "LastActivityDate": "2015-08-04T12:54:41.957"}, "31809584": {"ParentId": "31809388", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>From <a href=\"http://www.cplusplus.com/reference/algorithm/for_each/\" rel=\"nofollow\">cplusplus.com</a> :</p>\n<blockquote>\n<pre><code>template&lt;class InputIterator, class Function&gt;\nFunction for_each (InputIterator first, InputIterator last, Function fn);</code></pre>\n<p id=\"so_31809388_31809584_0\"><strong>Parameters</strong></p>\n<p id=\"so_31809388_31809584_1\"><code>first</code>, <code>last</code><br>\n  Input iterators to the initial and final positions in\n  a sequence. The range used is <code>[first,last)</code>, which contains all the\n  elements between first and last, including the element pointed by\n  first but not the element pointed by last.</br></p>\n<p id=\"so_31809388_31809584_2\"><code>fn</code><br>\n  Unary function that\n  accepts an element in the range as argument.<br>\n  This can either be a function pointer or a move constructible function object.<br>\n  Its return value, if any, is ignored.</br></br></br></p>\n</blockquote>\n", "OwnerUserId": "5157440", "LastEditorUserId": "3233393", "LastEditDate": "2015-08-04T12:51:30.393", "Id": "31809584", "Score": "0", "CreationDate": "2015-08-04T12:39:31.740", "LastActivityDate": "2015-08-04T12:51:30.393"}, "bq_ids": {"n4140": {"so_31809388_31809505_0": {"section_id": 4548, "quality": 0.9183673469387755, "length": 45}}, "n3337": {"so_31809388_31809505_0": {"section_id": 4378, "quality": 0.9183673469387755, "length": 45}}, "n4659": {"so_31809388_31809505_0": {"section_id": 5922, "quality": 0.9183673469387755, "length": 45}}}});