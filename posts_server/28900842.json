post_cb({"28901052": {"ParentId": "28900842", "CommentCount": "7", "Body": "<p>If you enter a tab into an input, then your string will contain a literal tab character, and it will stay a tab character - it wont' be magically translated into <code>\\t</code> internally. </p>\n<p>Same goes for writing code - you can embed literal tab characters in your strings. However, consider this:</p>\n<pre><code>     T     T     T        &lt;--tab stops\n012345012345012345012345\nfoo1 = 'a\\tb';\nfoo2 = 'a  b'; // pressed tab in the editor\nfoo3 = 'a  b'; // hit space twice in the editor\n</code></pre>\n<p>Unless you put the cursor on the whitespace between <code>a</code> and <code>b</code> and checked how many characters are in there, there is essentially NO way to determine if there's a tab or actual space characters in there. But with the <code>\\t</code> version, it is immediately shown to be a tab.</p>\n", "OwnerUserId": "118068", "PostTypeId": "2", "Id": "28901052", "Score": "9", "CreationDate": "2015-03-06T14:36:17.973", "LastActivityDate": "2015-03-06T14:36:17.973"}, "28901038": {"ParentId": "28900842", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>It's completely legal to put a tab character directly into a character string or character literal. The C and C++ standards require the source character set to include a tab character, and string and character literals may contain any character in the source character set except backslash, quote or apostrophe (as appropriate) and newline.</p>\n<p>So it's portable. But it is not a good idea, since there is no way a reader can distinguish between different kinds of whitespace. It is also quite common for text editors, mail programs, and the like to reformat tabs, so bugs may be introduced into the program in the course of such operations.</p>\n", "OwnerUserId": "1566221", "LastEditorUserId": "1566221", "LastEditDate": "2015-03-07T02:11:10.447", "Id": "28901038", "Score": "27", "CreationDate": "2015-03-06T14:35:51.110", "LastActivityDate": "2015-03-07T02:11:10.447"}, "28900986": {"ParentId": "28900842", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>Yes, you can include a tab character in a string or character literal, at least according to C++11. The allowed characters include (with my emphasis):</p>\n<blockquote>\n<p id=\"so_28900842_28900986_0\">any member of the <strong>source character set</strong> except\n  the double-quote <code>\"</code>, backslash <code>\\</code>, or new-line character</p>\n</blockquote>\n<p>(from <a href=\"http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2012/n3485.pdf\" rel=\"noreferrer\">C++11 standard</a>, annex A.2)</p>\n<p>and the source character set includes:</p>\n<blockquote>\n<p id=\"so_28900842_28900986_1\">the space character, the control characters representing <strong>horizontal tab</strong>, vertical tab, form feed, and new-line, plus the following 91 graphical characters</p>\n</blockquote>\n<p>(from <a href=\"http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2012/n3485.pdf\" rel=\"noreferrer\">C++11 standard</a>, paragraph 2.3.1)</p>\n<p><strong>UPDATE:</strong> I've just noticed that you're asking about two different languages. For C99, the answer is also yes. The wording is different, but basically says the same thing:</p>\n<blockquote>\n<p id=\"so_28900842_28900986_2\">In a character constant or string literal, members of the execution character set shall be represented by corresponding members of the <strong>source character set</strong> or [...]</p>\n</blockquote>\n<p>where both the source and execution character sets include</p>\n<blockquote>\n<p id=\"so_28900842_28900986_3\">control characters representing <strong>horizontal tab</strong>, vertical tab, and\n  form feed.</p>\n</blockquote>\n", "OwnerUserId": "204847", "LastEditorUserId": "2715219", "LastEditDate": "2015-03-06T14:43:36.083", "Id": "28900986", "Score": "56", "CreationDate": "2015-03-06T14:34:00.050", "LastActivityDate": "2015-03-06T14:43:36.083"}, "28906572": {"ParentId": "28900842", "CommentCount": "1", "Body": "<p>When you press the TAB key you get whatever code point your system maps that key to. That code point may or may not be a tab on the system where the program runs. When you put \\t in a literal the compiler replaces it with the appropriate code point for the target system. So if you want to be sure that you get a tab on the system where the program runs, use \\t. That's its job.</p>\n", "OwnerUserId": "1593860", "PostTypeId": "2", "Id": "28906572", "Score": "2", "CreationDate": "2015-03-06T19:53:23.953", "LastActivityDate": "2015-03-06T19:53:23.953"}, "28900842": {"CommentCount": "11", "AcceptedAnswerId": "28900986", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2015-03-06T14:26:26.613", "LastActivityDate": "2015-03-07T02:11:10.447", "LastEditDate": "2017-05-23T11:51:35.427", "ViewCount": "2433", "FavoriteCount": "0", "Title": "Is it mandatory to escape tabulator characters in C and C++?", "Id": "28900842", "Score": "54", "Body": "<p>In C and C++ (and several other languages) horizontal tabulators (ASCII code 9) in character and string constants are denoted in escaped form as <code>'\\t'</code> and <code>\"\\t\"</code>. However, I am regularly typing the unescaped tabulator character in string literals as for example in <code>\"A\tB\"</code> (there is a TAB in betreen <code>A</code> and <code>B</code>), and at least clang++ does not seem to bother - the string seems to be equivalent to <code>\"A\\tB\"</code>. I like the unescaped version better since long indented multi-line strings are better readable in the source code.</p>\n<p>Now I am asking myself whether this is generally legal in C and C++ or just supported by my compiler. How portable are unescaped tabulators in character and string constants?</p>\n<p>Surprisingly I could not find an answer to this seemingly simple question, neither with Google nor on stackoverflow (I just found <a href=\"https://stackoverflow.com/questions/14297477/how-do-you-insert-a-tab-in-a-string\">this</a> vaguely related question).</p>\n", "Tags": "<c++><c>", "OwnerUserId": "4614700", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_28900842_28900986_0": {"section_id": 5313, "quality": 0.7777777777777778, "length": 7}, "so_28900842_28900986_1": {"section_id": 5314, "quality": 1.0, "length": 16}, "so_28900842_28900986_2": {"section_id": 5313, "quality": 0.5714285714285714, "length": 8}, "so_28900842_28900986_3": {"section_id": 5314, "quality": 1.0, "length": 9}}, "n3337": {"so_28900842_28900986_0": {"section_id": 5110, "quality": 0.7777777777777778, "length": 7}, "so_28900842_28900986_1": {"section_id": 5111, "quality": 1.0, "length": 16}, "so_28900842_28900986_2": {"section_id": 5110, "quality": 0.5714285714285714, "length": 8}, "so_28900842_28900986_3": {"section_id": 5111, "quality": 1.0, "length": 9}}, "n4659": {"so_28900842_28900986_0": {"section_id": 6737, "quality": 0.7777777777777778, "length": 7}, "so_28900842_28900986_1": {"section_id": 6738, "quality": 1.0, "length": 16}, "so_28900842_28900986_2": {"section_id": 6737, "quality": 0.5714285714285714, "length": 8}, "so_28900842_28900986_3": {"section_id": 6738, "quality": 1.0, "length": 9}}}});