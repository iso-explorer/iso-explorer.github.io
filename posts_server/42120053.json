post_cb({"42120053": {"CommentCount": "7", "ViewCount": "130", "CreationDate": "2017-02-08T17:41:43.927", "LastActivityDate": "2017-02-08T17:47:30.820", "Title": "Three different definitions of a function, no linker error; how can that be?", "PostTypeId": "1", "Id": "42120053", "Score": "6", "Body": "<p>I have something which looks very impossible to me. I have three files which each seem to contain the exact same function declaration, albeit with a different definition.</p>\n<p><code>inst_dp_vec2.cc</code>:</p>\n<pre><code>void loadSOAFVec(InstVector &amp;ivector,\n                 const FVec &amp;ret,\n                 const Address *a,\n                 int soanum,\n                 int soalen,\n                 string mask) {\n    if (soalen == 2) {\n        ivector.push_back(new LoadFVec(ret, a, string(\"\")));\n    } else {\n        printf(\"SOALEN = %d not supported at %s:%d\\n\", soalen, __FILE__,\n               __LINE__);\n        exit(1);\n    }\n}\n</code></pre>\n<p><code>inst_dp_vec4.cc</code></p>\n<pre><code>void loadSOAFVec(InstVector &amp;ivector,\n                 const FVec &amp;ret,\n                 const Address *a,\n                 int soanum,\n                 int soalen,\n                 string mask) {\n    if (soalen == 4) {\n        ivector.push_back(new LoadFVec(ret, a, string(\"\")));\n    } else if (soalen == 2) {\n        ivector.push_back(new LoadHalfFVec(ret, a, soanum));\n    } else {\n        UNSUPPORTED_SOALEN(soalen);\n    }\n}\n</code></pre>\n<p><code>inst_dp_vec8.cc</code></p>\n<pre><code>void loadSOAFVec(InstVector &amp;ivector,\n                 const FVec &amp;ret,\n                 const Address *a,\n                 int soanum,\n                 int soalen,\n                 string mask) {\n    int mskbits = (((1 &lt;&lt; soalen) - 1) &lt;&lt; (soanum * soalen));\n    stringstream mk;\n    mk &lt;&lt; \"0x\" &lt;&lt; hex &lt;&lt; mskbits;\n    string localmask = mk.str();\n    ivector.push_back(new LoadUnpackFVec(ret, a, localmask));\n}\n</code></pre>\n<p>The linker command as executed from the Makefile (generated by GNU Autotools)\nseems to include all three compiled files:</p>\n<pre><code>g++ -O3 -g -DNO_HW_MASKING -DUSE_LDUNPK -DUSE_PKST -DUSE_PACKED_GAUGES\n-DUSE_PACKED_CLOVER -DNO_GPREF_L1 -DNO_GPREF_L2 -DENABLE_STREAMING_STORES\n-DSERIAL_SPIN -DSOALEN=8 -DVECLEN=4 -DPRECISION=2 codegen.o data_types.o\ndslash.o dslash_common.o inst_dp_vec8.o inst_sp_vec16.o inst_dp_vec4.o\ninst_sp_vec8.o inst_sp_vec4.o inst_dp_vec2.o inst_scalar.o -o codegen\n</code></pre>\n<p>From my knowledge of the <em>one definition rule</em>, this should give a linker\nerror. Even more peculiar is that the version from <code>inst_dp_vec8.o</code> is not the\none used, but the one from <code>inst_dp_vec4.cc</code>, although it appears first in the\nlinker command line. I changed the code such that <code>UNSUPPORTED_SOALEN</code> throws\nan exception and with GDB I found that <code>soalen = 8</code> is active. From what I know\nabout the software, <code>soalen = 8</code> only works with <code>veclen \u2265 8</code> such that only\nthe <code>inst_dp_vec8.cc</code> could contain the right definition.</p>\n<p>My question: How can this possible link to a program that can be executed and\nonly fails because of the explicit exception raised with <code>UNSUPPORTED_SOALEN</code>?</p>\n", "Tags": "<c++>", "OwnerUserId": "653152", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_42120053_42120158_1": {"section_id": 7041, "quality": 0.75, "length": 12}, "so_42120053_42120158_0": {"section_id": 7038, "quality": 1.0, "length": 14}}, "n3337": {"so_42120053_42120158_1": {"section_id": 6786, "quality": 0.75, "length": 12}, "so_42120053_42120158_0": {"section_id": 6784, "quality": 1.0, "length": 14}}, "n4659": {"so_42120053_42120158_1": {"section_id": 8538, "quality": 0.9375, "length": 15}, "so_42120053_42120158_0": {"section_id": 8535, "quality": 1.0, "length": 14}}}, "42120158": {"ParentId": "42120053", "CommentCount": "7", "Body": "<p>Because no diagnostic is required when the multiple definitions occur in multiple translation units.</p>\n<p>From [basic.def.odr]:</p>\n<blockquote>\n<p id=\"so_42120053_42120158_0\">No translation unit shall contain more than one definition of any variable, function, class type, enumeration type, or template.</p>\n</blockquote>\n<p>and later</p>\n<blockquote>\n<p id=\"so_42120053_42120158_1\">Every program shall contain exactly one definition of every non-inline function or variable that is odr-used in that program outside of a discarded statement (6.4.1); no diagnostic required.</p>\n</blockquote>\n<p>So you get an error if they are multiple definitions within on source module, but don't have to get them if they're in different ones.</p>\n", "OwnerUserId": "5231607", "PostTypeId": "2", "Id": "42120158", "Score": "7", "CreationDate": "2017-02-08T17:47:30.820", "LastActivityDate": "2017-02-08T17:47:30.820"}});