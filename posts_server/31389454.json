post_cb({"31391081": {"Id": "31391081", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_31389454_31391081_0\">errors of type 'Uninitialized scalar variable' that are high impact</p>\n</blockquote>\n<p>Yes, they are high impact because an uninitialized automatic variable has indeterminate value and <a href=\"https://stackoverflow.com/q/23415661/1708801\">using an indeterminate value is undefined behavior</a> so these are serious bugs if you attempt to produce a value from them before initialization.</p>\n<blockquote>\n<p id=\"so_31389454_31391081_1\">Would initializing them to zero be any different than what C++ does by default?</p>\n</blockquote>\n<p>Yes, for automatic scalar variables the C++ standard says they will have indeterminate value, the draft C++ standard from section <code>8.5</code> <em>[dcl.init]</em>:</p>\n<blockquote>\n<p id=\"so_31389454_31391081_2\">If no initializer is specified for an object, the object is\n  default-initialized. When storage for an object with automatic or\n  dynamic storage duration is obtained, the object has an indeterminate\n  value, and if no initialization is performed for the object, that\n  object retains an indeterminate value until that value is replaced\n  (5.17 [expr.ass])</p>\n</blockquote>\n<p>A compiler may in debug mode initialize local variable, to aid in debugging, we can see that <a href=\"https://msdn.microsoft.com/en-us/library/8wtf2dfz.aspx\" rel=\"nofollow noreferrer\">MSVC can do this using /RTC</a>:</p>\n<blockquote>\n<p id=\"so_31389454_31391081_3\">Initialization of local variables to a nonzero value. This helps\n  identify bugs that do not appear when running in debug mode.[...]</p>\n</blockquote>\n", "LastEditorUserId": "-1", "LastActivityDate": "2015-09-07T02:28:11.667", "Score": "0", "CreationDate": "2015-07-13T18:44:59.323", "ParentId": "31389454", "CommentCount": "0", "OwnerUserId": "1708801", "LastEditDate": "2017-05-23T11:44:11.960"}, "31389824": {"Id": "31389824", "PostTypeId": "2", "Body": "<p>Objects declared in static storage duration are zero initialized before any other initialization takes place (including default initializations).</p>\n<blockquote>\n<p id=\"so_31389454_31389824_0\">To <em>default-initialize</em> an object of type <code>T</code> means:<br>\n  \u2014 if <code>T</code> is a (possibly cv-qualified) class type (Clause 9), the default constructor for <code>T</code> is called (and the\n  initialization is ill-formed if <code>T</code> has no accessible default constructor);<br>\n  \u2014 if <code>T</code> is an array type, each element is default-initialized;<br>\n  \u2014 otherwise, no initialization is performed<br>\n<sub>C.11 \u00a78.5\u00b66</sub></br></br></br></br></p>\n<p id=\"so_31389454_31389824_1\">[\u00a0<em>Note</em>: Every object of static storage duration is zero-initialized at program startup before any other initialization\n  takes place. In some cases, additional initialization is done later. \u2014 <em>end note</em>\u00a0]<br>\n<sub>C.11 \u00a78.5\u00b69</sub></br></p>\n</blockquote>\n", "LastActivityDate": "2015-07-13T17:32:59.743", "CommentCount": "0", "CreationDate": "2015-07-13T17:32:59.743", "ParentId": "31389454", "Score": "1", "OwnerUserId": "315052"}, "31389454": {"ViewCount": "1675", "Body": "<p>I've noticed several Coverity (static-analysis tool) errors of type 'Uninitialized scalar variable' that are high impact. A lot of them are just ints that don't get initialized. </p>\n<p>Would initializing them to zero be any different than what C++ does by default?</p>\n", "AcceptedAnswerId": "31389644", "Title": "Does C++ initialize integers to zero automatically?", "CreationDate": "2015-07-13T17:12:08.797", "Id": "31389454", "CommentCount": "6", "LastEditDate": "2015-07-13T17:19:22.347", "PostTypeId": "1", "LastEditorUserId": "4183920", "LastActivityDate": "2015-09-07T02:28:11.667", "Score": "4", "OwnerUserId": "4183920", "Tags": "<c++><coverity>", "AnswerCount": "5"}, "31389644": {"Id": "31389644", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_31389454_31389644_0\">Does C++ initialize integers to zero automatically?</p>\n</blockquote>\n<p>For automatic variables:</p>\n<p>Some compilers might do it but the standard does not require it. A conforming implementation could leave them to be uninitialized garbage values.</p>\n<p>For <code>static</code> variables:</p>\n<p>They must be initialized to zero unless explicitly initialized otherwise.</p>\n", "LastEditorUserId": "434551", "LastActivityDate": "2015-07-13T17:31:02.933", "Score": "10", "CreationDate": "2015-07-13T17:23:05.063", "ParentId": "31389454", "CommentCount": "9", "OwnerUserId": "434551", "LastEditDate": "2015-07-13T17:31:02.933"}, "31389811": {"Id": "31389811", "PostTypeId": "2", "Body": "<p>C++ does not initialize integer variables to zero by default. </p>\n<p>Some compilers may zero them out or fill with some default value <em>while compiling your project in debug mode</em>. In release mode that usually does not happen.</p>\n<p>There is an exception with static variables, but by default it is safe to assume that anything unitialized holds a random value.</p>\n<p>Beware of uninitialized variables. Finding this kind of bug is hard and can waste a lot of time. Usual symptoms: the program works fine in debug mode, but behaves strangely in release.</p>\n", "LastEditorUserId": "100297", "LastActivityDate": "2015-07-22T22:00:23.200", "Score": "6", "CreationDate": "2015-07-13T17:31:46.260", "ParentId": "31389454", "CommentCount": "2", "OwnerUserId": "271376", "LastEditDate": "2015-07-22T22:00:23.200"}, "bq_ids": {"n4140": {"so_31389454_31389824_1": {"length": 18, "quality": 0.782608695652174, "section_id": 3289}, "so_31389454_31389824_0": {"length": 24, "quality": 0.8888888888888888, "section_id": 3286}, "so_31389454_31391081_2": {"length": 26, "quality": 0.9285714285714286, "section_id": 3291}}, "n3337": {"so_31389454_31389824_0": {"length": 25, "quality": 0.9259259259259259, "section_id": 3156}, "so_31389454_31389824_1": {"length": 18, "quality": 0.782608695652174, "section_id": 3159}}, "n4659": {"so_31389454_31389824_0": {"length": 17, "quality": 0.6296296296296297, "section_id": 4049}, "so_31389454_31389824_1": {"length": 18, "quality": 0.782608695652174, "section_id": 4051}, "so_31389454_31391081_2": {"length": 26, "quality": 0.9285714285714286, "section_id": 4053}}}, "31389731": {"Id": "31389731", "PostTypeId": "2", "Body": "<p>Yes and no.</p>\n<p>It depends how they are declared. If they are declared <code>static</code>, then yes, they are guaranteed to be zero-initialized. However, local variables in a function may not be zero-initialized. Nor are class member variables in most contexts (the exception being <code>static</code>).</p>\n<p>Basically, if it's not <code>static</code>, you should assume it won't be initialized to 0. Since it's not initialized, it could have any value whatsoever.</p>\n", "LastEditorUserId": "1502810", "LastActivityDate": "2015-07-13T21:24:31.207", "Score": "0", "CreationDate": "2015-07-13T17:27:51.227", "ParentId": "31389454", "CommentCount": "4", "OwnerUserId": "1502810", "LastEditDate": "2015-07-13T21:24:31.207"}});