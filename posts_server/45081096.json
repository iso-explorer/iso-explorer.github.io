post_cb({"45081406": {"ParentId": "45081096", "PostTypeId": "2", "CommentCount": "6", "CreationDate": "2017-07-13T13:01:05.927", "Score": "3", "LastEditorUserId": "4832499", "LastEditDate": "2017-07-13T14:02:31.963", "Id": "45081406", "OwnerUserId": "4832499", "Body": "<p>Seems like a gcc bug, from <a href=\"http://eel.is/c++draft/class.static#data-2\" rel=\"nofollow noreferrer\">[class.static]</a></p>\n<blockquote>\n<p id=\"so_45081096_45081406_0\">The declaration of a non-inline static data member in its class definition is not a definition and may be of an incomplete type other than cv void.</p>\n</blockquote>\n<p>So regardless whether <code>Test&lt;T&gt;</code> or <code>Static&lt;Test&lt;T&gt;&gt;</code> has complete type, the declaration should be allowed.</p>\n<p>From <a href=\"http://eel.is/c++draft/temp\" rel=\"nofollow noreferrer\">[temp.inst]</a></p>\n<blockquote>\n<p id=\"so_45081096_45081406_1\">the class template specialization is implicitly instantiated when the specialization is referenced in a context that requires a completely-defined object type</p>\n</blockquote>\n<hr>\n<blockquote>\n<p id=\"so_45081096_45081406_2\">The implicit instantiation of a class template specialization causes the implicit instantiation of the declarations, but not of the definitions, [...] static data members [...]</p>\n</blockquote>\n<p>Means when we first use <code>Test&lt;int&gt;</code> to declare a variable, <code>Test&lt;int&gt;</code> is required to be a completely-defined type, so <code>Test&lt;int&gt;</code> is implicitly instantiated, but <code>Static&lt;Test&lt;int&gt;&gt;</code> isn't required to be a completely-defined object type since it is still only declared.</p>\n<p>Funnily enough, gcc compiles this just fine</p>\n<pre><code>template&lt;typename&gt;\nstruct Static;\n\ntemplate&lt;typename T&gt;\nstruct Test\n{\n    static Static&lt;Test&lt;T&gt;&gt; t;\n};\n\ntemplate&lt;typename T&gt;\nStatic&lt;Test&lt;T&gt;&gt; Test&lt;T&gt;::t;\n\nTest&lt;int&gt; t;\n//auto u = t.t;  // error, now requires a completely-defined type\n</code></pre>\n<p><a href=\"https://godbolt.org/g/BH2N9h\" rel=\"nofollow noreferrer\">Live</a></p>\n<p>Even though <code>Static</code> isn't even defined, <code>Test::t</code> never needed to be a completely-defined type.</p>\n</hr>", "LastActivityDate": "2017-07-13T14:02:31.963"}, "45081096": {"CommentCount": "8", "ViewCount": "113", "PostTypeId": "1", "LastEditorUserId": "1797239", "CreationDate": "2017-07-13T12:48:38.997", "LastActivityDate": "2017-07-13T14:02:31.963", "Title": "g++ compiler can't compile fully defined types", "LastEditDate": "2017-07-13T13:13:12.633", "Id": "45081096", "Score": "3", "Body": "<p>I am trying to use static instance of the struct in the same struct but g++ compiler tells me that:</p>\n<pre><code>C:\\Temp\\cs2cpp_tries\\test\\test.cpp: In instantiation of 'struct Static&lt;Test&lt;int&gt; &gt;':\nC:\\Temp\\cs2cpp_tries\\test\\test.cpp:16:19:   required from 'struct Test&lt;int&gt;'\nC:\\Temp\\cs2cpp_tries\\test\\test.cpp:20:12:   required from here\nC:\\Temp\\cs2cpp_tries\\test\\test.cpp:6:4: error: 'Static&lt;T&gt;::t' has incomplete type\n  T t;\n    ^\nC:\\Temp\\cs2cpp_tries\\test\\test.cpp:10:8: note: declaration of 'struct Test&lt;int&gt;'\n struct Test\n        ^~~~\n</code></pre>\n<p>Here is the code example. You can see that types are defined but g++ still does not like it.</p>\n<pre><code>#include &lt;iostream&gt;\n\ntemplate &lt; typename T &gt;\nstruct Static\n{\n    T t;\n};\n\ntemplate &lt; typename T &gt;\nstruct Test\n{\n    static Static&lt;Test&lt;T&gt;&gt; t;\n};\n\ntemplate &lt; typename T &gt;\nStatic&lt; Test&lt;T&gt; &gt; Test&lt;T&gt;::t;\n\nint main (int argc, char **argv)\n{\n    Test&lt;int&gt; t;\n    return 0;\n}\n</code></pre>\n<p>But if you remove <code>template &lt; typename T &gt;</code> from test class and code becomes fully compilable</p>\n<pre><code>#include &lt;iostream&gt;\n\ntemplate &lt; typename T &gt;\nstruct Static\n{\n    T t;\n};\n\nstruct Test\n{\n    static Static&lt;Test&gt; t;\n};\n\nStatic&lt; Test &gt; Test::t;\n\nint main (int argc, char **argv)\n{\n    Test t;\n    return 0;\n}\n</code></pre>\n", "Tags": "<c++><c++11>", "OwnerUserId": "1797239", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_45081096_45081406_2": {"section_id": 233, "quality": 0.9333333333333333, "length": 14}, "so_45081096_45081406_1": {"section_id": 233, "quality": 1.0, "length": 13}, "so_45081096_45081406_0": {"section_id": 5907, "quality": 0.875, "length": 14}}, "n3337": {"so_45081096_45081406_2": {"section_id": 226, "quality": 0.9333333333333333, "length": 14}, "so_45081096_45081406_1": {"section_id": 226, "quality": 1.0, "length": 13}, "so_45081096_45081406_0": {"section_id": 5679, "quality": 0.875, "length": 14}}, "n4659": {"so_45081096_45081406_2": {"section_id": 243, "quality": 0.9333333333333333, "length": 14}, "so_45081096_45081406_1": {"section_id": 242, "quality": 1.0, "length": 13}, "so_45081096_45081406_0": {"section_id": 7389, "quality": 0.875, "length": 14}}}});