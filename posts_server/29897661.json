post_cb({"29897661": {"CommentCount": "5", "AcceptedAnswerId": "29897879", "PostTypeId": "1", "ClosedDate": "2016-05-09T20:35:44.037", "LastEditorUserId": "1253826", "CreationDate": "2015-04-27T13:49:25.217", "LastActivityDate": "2015-08-01T18:07:07.393", "LastEditDate": "2015-04-27T13:57:23.100", "ViewCount": "2015", "FavoriteCount": "2", "Title": "When using standard C functions in C++, is the \"std::\" prefix required?", "Id": "29897661", "Score": "13", "Body": "<p>When use standard C function in C++, should we prefix every function with <code>std::</code>?</p>\n<p>for example (file name: <code>std.C</code>):</p>\n<pre><code>#include &lt;cstdio&gt;\n\nint main() {\n  std::printf(\"hello\\n\");\n  printf(\"hello\\n\");\n}\n</code></pre>\n<p>This file can be compiled with: </p>\n<pre><code>g++ -Wall -Werror -std=c++11 std.C\n</code></pre>\n<p>without any error.</p>\n<p>my questions are:</p>\n<ol>\n<li>Should we always place <code>std::</code> before all the standard C library functions when they are used in C++?</li>\n<li>What's the main difference between header files like <code>&lt;stdio.h&gt;</code> and <code>&lt;cstdio&gt;</code>?</li>\n</ol>\n", "Tags": "<c++><c>", "OwnerUserId": "1253826", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_29897661_29900474_1": {"section_id": 4907, "quality": 0.926829268292683, "length": 38}, "so_29897661_29900474_0": {"section_id": 6259, "quality": 0.9333333333333333, "length": 28}}, "n3337": {"so_29897661_29900474_1": {"section_id": 4702, "quality": 0.926829268292683, "length": 38}, "so_29897661_29900474_0": {"section_id": 6019, "quality": 0.9333333333333333, "length": 28}}, "n4659": {"so_29897661_29900474_1": {"section_id": 6316, "quality": 0.926829268292683, "length": 38}, "so_29897661_29900474_0": {"section_id": 7763, "quality": 0.9333333333333333, "length": 28}}}, "29897879": {"ParentId": "29897661", "PostTypeId": "2", "CommentCount": "3", "Body": "<blockquote>\n<p id=\"so_29897661_29897879_0\">The C++ library includes the same definitions as the C language\n  library organized in the same structure of header files, with the\n  following differences:</p>\n<ul>\n<li>Each header file has the same name as the C language version but with a \"<code>c</code>\" prefix and no extension. For example, the C++ equivalent\n  for the C language header file <code>&lt;stdlib.h&gt;</code> is <code>&lt;cstdlib&gt;</code>.</li>\n<li>Every element of the library is defined within the <code>std</code> namespace.</li>\n</ul>\n<p id=\"so_29897661_29897879_1\">Nevertheless, for compatibility with C, the traditional header names\n  <code>name.h</code> (like <code>stdlib.h</code>) are also provided with the same definitions\n  within the global namespace although its use is deprecated in C++.</p>\n</blockquote>\n<p>(<a href=\"http://www.cplusplus.com/reference/clibrary/\" rel=\"nofollow\">source</a>)</p>\n<p>The <code>std::</code> part of the <code>std::printf()</code> call is the standard way to use names in the standard library, therefore, I suggest to use it.</p>\n", "OwnerUserId": "2328763", "LastEditorUserId": "3425536", "LastEditDate": "2015-08-01T18:07:07.393", "Id": "29897879", "Score": "9", "CreationDate": "2015-04-27T13:59:36.370", "LastActivityDate": "2015-08-01T18:07:07.393"}, "29900474": {"ParentId": "29897661", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>The C++ standard library incorporates the C standard library (with a few minor tweaks).</p>\n<p>Each C header with a name like <code>&lt;foo.h&gt;</code> has a corresponding C++ header <code>&lt;cfoo&gt;</code>.  For example, the C++ header <code>&lt;cstdio&gt;</code> corresponds to the C header <code>&lt;stdio.h&gt;</code>.</p>\n<p>Quoting the 2011 ISO C++ standard, 17.6.1.2 [headers] paragraph 4:</p>\n<blockquote>\n<p id=\"so_29897661_29900474_0\">In the C ++ standard library, however, the declarations (except for\n  names which are defined as macros in C) are within namespace scope\n  (3.3.6) of the namespace <strong><code>std</code></strong>. It is unspecified whether these names\n  are first declared within the global namespace scope and are then\n  injected into namespace <strong><code>std</code></strong> by explicit <em>using-declarations</em> (7.3.3).</p>\n</blockquote>\n<p>So given <code>#include &lt;cstdio&gt;</code>, the <code>printf</code> function <em>definitely</em> can be referred to as <code>std::printf</code>, and <em>optionally</em> may be visible as <code>printf</code> in the global namespace. (This option is up to the implementation, not the programmer.)</p>\n<p>Of course you can refer to it as just <code>printf</code> within the scope of <code>using namespace std</code>.</p>\n<p>In my opinion, this is unfortunate; it seems to be for the convenience of implementers rather than programmers. It's safest to assume that <code>printf</code> is declared <em>only</em> with in the <code>std</code> namespace. If you use <code>#include &lt;cstdio&gt;</code> and then refer to <code>printf</code> in the global namespace, your code might compile today and fail to compile on a different implementation.</p>\n<p>Conversely, as a <em>deprecated</em> feature, the C++ standard library also includes the C standard headers with their original names, such as <code>&lt;stdio.h&gt;</code>. Quoting the standard, section D.5 [depr.c.header]:</p>\n<blockquote>\n<p id=\"so_29897661_29900474_1\">Every C header, each of which has a name of the form <strong><code>name.h</code></strong>,\n  behaves as if each name placed in the standard library namespace by\n  the corresponding <em>cname</em> header is placed within the global namespace\n  scope. It is unspecified whether these names are first declared or\n  defined within namespace scope (3.3.6) of the namespace <strong><code>std</code></strong> and\n  are then injected into the global namespace scope by explicit\n  <em>using-declarations</em> (7.3.3).</p>\n</blockquote>\n<p>So given <code>#include &lt;stdio.h&gt;</code>, the name <code>printf</code> is <em>definitely</em> visible in the global namespace, and <em>optionally</em> (again, this is the implementation's option, not yours) visible as <code>std::printf</code>.</p>\n", "OwnerUserId": "827263", "LastEditorUserId": "827263", "LastEditDate": "2015-04-27T17:28:59.230", "Id": "29900474", "Score": "3", "CreationDate": "2015-04-27T15:55:14.760", "LastActivityDate": "2015-04-27T17:28:59.230"}, "29897974": {"ParentId": "29897661", "PostTypeId": "2", "CommentCount": "1", "Body": "<ol>\n<li><em>std</em> is the namespace and by using <strong>::</strong> (after the <em>std</em>) you explicitly using the functions of the namespace std. Now, imagine that you create your own namespace and some of the functions that you have created there have the same name as the functions in std namespace. This could be a problem, but by using the std::func1 and YourNameSpace::func1 you are preventing this issue.</li>\n<li><a href=\"https://stackoverflow.com/questions/4404725/why-do-some-includes-need-the-h-and-others-not/4404753#4404753\">Look in here</a>. Thanks @karma_geek</li>\n</ol>\n", "OwnerUserId": "4260691", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:10:08.920", "Id": "29897974", "Score": "1", "CreationDate": "2015-04-27T14:03:09.730", "LastActivityDate": "2015-04-27T14:03:09.730"}});