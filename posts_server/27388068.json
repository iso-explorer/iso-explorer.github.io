post_cb({"27388981": {"Id": "27388981", "PostTypeId": "2", "Body": "<p>Boost.Thread (that internally exploits Boost.Bind for binding arguments) supports only <em>some</em> fixed number of arguments (<a href=\"http://www.boost.org/doc/libs/release/doc/html/thread/thread_management.html#thread.thread_management.thread.multiple_argument_constructor\" rel=\"nofollow\">doc</a>):</p>\n<blockquote>\n<h3>Thread Constructor with arguments</h3>\n<pre><code>template &lt;class F,class A1,class A2,...&gt;\nthread(F f,A1 a1,A2 a2,...);\n</code></pre>\n<p id=\"so_27388068_27388981_0\"><em>Preconditions:</em></p>\n<p id=\"so_27388068_27388981_1\"><code>F</code> and each <code>An</code> must be copyable or movable.</p>\n<p id=\"so_27388068_27388981_2\"><em>Effects:</em></p>\n<p id=\"so_27388068_27388981_3\">As if <code>thread(boost::bind(f,a1,a2,...))</code>. Consequently, <code>f</code> and each <code>an</code> are copied into internal storage for access by the new thread.</p>\n<p id=\"so_27388068_27388981_4\"><em>Postconditions:</em></p>\n<p id=\"so_27388068_27388981_5\"><code>*this</code> refers to the newly created thread of execution.</p>\n<p id=\"so_27388068_27388981_6\"><em>Throws:</em></p>\n<p id=\"so_27388068_27388981_7\"><code>boost::thread_resource_error</code> if an error occurs.</p>\n<p id=\"so_27388068_27388981_8\"><em>Error Conditions:</em></p>\n<p id=\"so_27388068_27388981_9\"><code>resource_unavailable_try_again</code> : the system lacked the necessary resources to create an- other thread, or the system-imposed limit on the number of threads in a process would be exceeded.</p>\n<p id=\"so_27388068_27388981_10\"><em>Note:</em></p>\n<p id=\"so_27388068_27388981_11\"><strong>Currently up to nine additional arguments <code>a1</code> to <code>a9</code> can be specified in addition to the function <code>f</code>.</strong></p>\n</blockquote>\n<p>Clearly, this means that passing <strong>11</strong> arguments (as you do) must result in the error you see: <em>\"no overloaded function takes 11 arguments\"</em>.</p>\n<p>Unfortunately, there is no easy way of extending the limit. Possible solutions are:</p>\n<ul>\n<li><p>reducing the overall number of arguments (you're only one ahead of the limit)</p></li>\n<li><p>using other library for binding arguments like <a href=\"http://www.boost.org/doc/libs/release/libs/phoenix/doc/html/phoenix/modules/bind/binding_functions.html\" rel=\"nofollow\">Boost.Phoenix</a></p></li>\n<li><p>wrapping arguments in a class-type variable (or at least some of them)</p></li>\n<li><p>switching to <code>std::thread</code> on a C++11 compiler that fully supports <em>variadic templates</em>.</p></li>\n</ul>\n", "LastEditorUserId": "3953764", "LastActivityDate": "2014-12-09T21:34:00.593", "Score": "1", "CreationDate": "2014-12-09T21:16:12.043", "ParentId": "27388068", "CommentCount": "1", "OwnerUserId": "3953764", "LastEditDate": "2014-12-09T21:34:00.593"}, "27389115": {"Id": "27389115", "PostTypeId": "2", "Body": "<p>From the <a href=\"http://www.boost.org/doc/libs/1_57_0/doc/html/thread/thread_management.html#thread.thread_management.thread.multiple_argument_constructor\" rel=\"nofollow\">Boost.Thread documentation</a>:</p>\n<blockquote>\n<p id=\"so_27388068_27389115_0\">Note:</p>\n<p id=\"so_27388068_27389115_1\">Currently up to nine additional arguments a1 to a9 can be specified in addition to the function f.</p>\n</blockquote>\n<p>Boost.Bind has the same limitation. You can try <code>std::tr1::bind</code>, which MSVC 2008 has, but I suspect it'll be similar there -- you really need variadic templates to make <code>bind</code> properly, and MSVC 2008 doesn't have them. I think the only guys actually crazy enough to see this through with preprocessor metaprogramming were the Boost.Spirit people, who made it into Boost.Phoenix. There you can specify an upper bound by preprocessor like so:</p>\n<pre><code>// Set this before headers are included.\n// ...best set it projectwide. I don't know if funny stuff happens if Phoenix is\n// used with different limits in different translation units.\n//\n// Also, please read the stuff below.\n//\n#define BOOST_PROTO_MAX_ARITY 20\n#define BOOST_PROTO_MAX_LOGICAL_ARITY 20\n\n#include &lt;boost/phoenix/bind.hpp&gt;\n#include &lt;boost/thread.hpp&gt;\n\n#include &lt;iostream&gt;\n\nvoid foo(int x0, int x1, int x2, int x3, int x4,\n         int x5, int x6, int x7, int x8, int x9,\n         int x10)\n{\n  std::cout &lt;&lt; x0 &lt;&lt; x1 &lt;&lt; x2 &lt;&lt; x3 &lt;&lt; x4\n            &lt;&lt; x5 &lt;&lt; x6 &lt;&lt; x7 &lt;&lt; x8 &lt;&lt; x9\n            &lt;&lt; x10 &lt;&lt; \"\\n\";\n}\n\nint main() {\n  boost::thread th(boost::phoenix::bind(&amp;foo, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10));\n  th.join();\n}\n</code></pre>\n<p>Now, this feature is fairly rough. I get the feeling that the preprocessor macros controlling this have been treated as an afterthought. In the Boost.Phoenix docs, it says you should be able to control this through <code>BOOST_PHOENIX_LIMIT</code>, and that was true once upon a time, but during the creation of the Boost.Proto backbone, it appears to have changed and that the docs were not updated. It's also rough around the edges in other ways. For example, it only works for me with a value of 20 (and, I suspect, 30, 40, etc. if you're really patient) -- anything from 11 to 19 gives huge compiler errors -- and it takes ages to compile because it suddenly has 1048576 function template overloads to handle.</p>\n<p>So this works (for me, with Boost 1.55.0), but it's not really something to rely on. Instead, I suggest you either group your arguments together in structs so you have less than 10 arguments to pass to <code>writeDB</code>, or you write your own functor (with blackjack and...nevermind) like</p>\n<pre><code>// \"...\" to mean the rest of the arguments\nclass writeDBFunctor {\npublic:\n  writeDBFunctor(std::string coordString, ...) : coordString(cordString), ... { }\n\n  void operator()() {\n    writeDB(coordString, ...);\n  }\n\nprivate:\n  std::string coordString;\n  // ...and the other arguments saved here\n}\n</code></pre>\n<p>and give that to the <code>boost::thread</code>.</p>\n", "LastActivityDate": "2014-12-09T21:25:38.207", "CommentCount": "0", "CreationDate": "2014-12-09T21:25:38.207", "ParentId": "27388068", "Score": "0", "OwnerUserId": "4301306"}, "bq_ids": {"n4140": {"so_27388068_27388981_9": {"length": 14, "quality": 0.9333333333333333, "section_id": 2714}}, "n3337": {"so_27388068_27388981_9": {"length": 14, "quality": 0.9333333333333333, "section_id": 2675}}, "n4659": {"so_27388068_27388981_9": {"length": 14, "quality": 0.9333333333333333, "section_id": 3454}}}, "27388068": {"ViewCount": "630", "Body": "<p>The IDE complains to me that thread does not contain the number of parameters that I am passing it. This is because there are too many of them, I believe...</p>\n<p>I had this same issue when I was using the standard library for threads, but do to compatibility issues, I need to use the Boost::threads. <a href=\"https://stackoverflow.com/questions/26919664/cant-pass-arguments-to-thread-function\">HERE</a> is the link to my previous question where someone explained that the issue was caused by veriadic templates.</p>\n<p>This was indeed the issue, however, after switching to boost threads, that error comes back and changing the veriadic max does not fix it.</p>\n<p>this is my thread declaration</p>\n<p><code>boost::thread db(writeToDB, coordString, time, std::to_string(id), imageName, azimuth, att_pitch, att_roll, yaw, cam_pitch, cam_roll);</code></p>\n<p><strong>EDIT:</strong></p>\n<p>Here is how I tried the bind function:</p>\n<p><code>boost::thread db(boost::bind(::writeToDB, coordString, time, std::to_string(id), imageName, azimuth, att_pitch, att_roll, yaw, cam_pitch, cam_roll));</code></p>\n<p>And the current IDE is Visual Studio 2013, however it needs to be compatible with Visual Studio 2008</p>\n<p>Also here is the actual error I am recieveing:</p>\n<p><strong>ERROR:</strong></p>\n<p><code>Error  6   error C2661: 'boost::thread::thread' : no overloaded function takes 11 arguments    c:\\users\\hewittjc\\desktop\\final project\\project1\\clientexample.cpp  174 1   Project1\n</code></p>\n", "AcceptedAnswerId": "27388981", "Title": "Boost::thread thread() not accepting arguments", "CreationDate": "2014-12-09T20:19:36.997", "Id": "27388068", "CommentCount": "9", "LastEditDate": "2017-05-23T11:43:45.330", "PostTypeId": "1", "LastEditorUserId": "-1", "LastActivityDate": "2015-05-26T06:24:08.900", "Score": "2", "OwnerUserId": "4250248", "Tags": "<c++><multithreading><boost>", "AnswerCount": "2"}});