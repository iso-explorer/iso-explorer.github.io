post_cb({"48168661": {"Id": "48168661", "PostTypeId": "2", "Body": "<p>By using single quotes, we can print ascii value.  So ascii value of the whole expression got printed.</p>\n<p>Thanks i hope this will help</p>\n", "LastActivityDate": "2018-01-09T12:54:10.217", "CommentCount": "0", "CreationDate": "2018-01-09T12:54:10.217", "ParentId": "48168094", "Score": "0", "OwnerUserId": "6012849"}, "48168651": {"Id": "48168651", "PostTypeId": "2", "Body": "<p>This really looks like a typo, we might safely speculate the author meant:</p>\n<pre><code>cout &lt;&lt; c &lt;&lt; ' ' &lt;&lt; i1 &lt;&lt; ' ' &lt;&lt; c2 &lt;&lt; '\\n';\n</code></pre>\n<p>The incorrect code <em>does</em> compile though, but is meaningless:</p>\n<pre><code>cout &lt;&lt; c &lt;&lt; ' &lt;&lt; i1 &lt;&lt; ' &lt;&lt; c2 &lt;&lt; '\\n';\n</code></pre>\n<p>Here, <code>' &lt;&lt; i1 &lt;&lt; '</code> (note single quote) is called a <em>multicharacter literal</em>, it has type <code>int</code> and implementation-defined value.</p>\n<blockquote>\n<p id=\"so_48168094_48168651_0\">From <a href=\"http://eel.is/c++draft/lex.literal#lex.ccon-2\" rel=\"nofollow noreferrer\"><code>[lex.ccon]/2</code></a>:</p>\n<p id=\"so_48168094_48168651_1\">An ordinary character literal that contains more than one c-char is a\n  multicharacter literal. A multicharacter literal [...] is conditionally-supported, has type int, and\n  has an implementation-defined value.</p>\n</blockquote>\n<p>Its usage is relativly rare, I personally have seen it as a way to define arbitrary constants, like in</p>\n<pre><code>enum state { wait = 'wait', start = 'start', /*...*/ };\n</code></pre>\n", "LastActivityDate": "2018-01-09T12:53:43.450", "CommentCount": "2", "CreationDate": "2018-01-09T12:53:43.450", "ParentId": "48168094", "Score": "3", "OwnerUserId": "5470596"}, "48168251": {"Id": "48168251", "PostTypeId": "2", "Body": "<p>You should try this code (below). There is a typo that you, or that book made.</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main() {\n    char c = 'x';\n    int i1 = c;\n    int i2 = 'x';\n    char c2 = i1;\n    std::cout &lt;&lt; c &lt;&lt; ' ' &lt;&lt; i1 &lt;&lt; ' ' &lt;&lt; c2 &lt;&lt; '\\n';\n    return 0;\n}\n</code></pre>\n<p>The result:</p>\n<p><a href=\"https://i.stack.imgur.com/iDKtv.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/iDKtv.png\"/></a></p>\n", "LastActivityDate": "2018-01-09T12:28:16.590", "CommentCount": "0", "CreationDate": "2018-01-09T12:28:16.590", "ParentId": "48168094", "Score": "1", "OwnerUserId": "1964707"}, "48168094": {"ViewCount": "122", "Body": "<p>From page 72\u201373 of Programming: Principles and Practices using C++:</p>\n<blockquote>\n<p id=\"so_48168094_48168094_0\">We saw that we couldn\u2019t directly add chars or compare a double to an int.\n  However, C++ provides an indirect way to do both. When needed, a char is\n  converted to an int and an int is converted to a double. For example:</p>\n</blockquote>\n<pre><code>char c = 'x'; \nint i1 = c; \nint i2 = 'x'; \n</code></pre>\n<blockquote>\n<p id=\"so_48168094_48168094_1\">Here both i1 and i2 get the value 120, which is the integer value of the\n  character 'x' in the most popular 8-bit character set, ASCII. This is a simple\n  and safe way of getting the numeric representation of a character. We call this\n  char-to-int conversion safe because no information is lost; that is, we can\n  copy the resulting int back into a char and get the original value:</p>\n</blockquote>\n<pre><code>char c2 = i1; \ncout &lt;&lt; c &lt;&lt; ' &lt;&lt; i1 &lt;&lt; ' &lt;&lt; c2 &lt;&lt; '\\n';\n</code></pre>\n<blockquote>\n<p id=\"so_48168094_48168094_2\">This will print x 120 x</p>\n</blockquote>\n<p>I do not understand the single quote use here. When I try it, it prints <a href=\"https://i.stack.imgur.com/hQY5l.jpg\" rel=\"nofollow noreferrer\">x540818464x</a>.</p>\n", "AcceptedAnswerId": "48168258", "Title": "Single Quote in cpp cout", "CreationDate": "2018-01-09T12:18:17.207", "Id": "48168094", "CommentCount": "4", "PostTypeId": "1", "ClosedDate": "2018-01-09T14:39:24.263", "LastActivityDate": "2018-01-09T12:54:10.217", "Score": "4", "OwnerUserId": "9192867", "Tags": "<c++><cout>", "AnswerCount": "5"}, "48168258": {"Id": "48168258", "PostTypeId": "2", "Body": "<p>The only explanation for that code is that the book is wrongly printed, or that's a blatant typo. The correct code should be</p>\n<pre><code>cout &lt;&lt; c &lt;&lt; ' ' &lt;&lt; i1 &lt;&lt; ' ' &lt;&lt; c2 &lt;&lt; '\\n';\n</code></pre>\n", "LastActivityDate": "2018-01-09T12:28:51.863", "CommentCount": "0", "CreationDate": "2018-01-09T12:28:51.863", "ParentId": "48168094", "Score": "4", "OwnerUserId": "5958455"}, "bq_ids": {"n4140": {"so_48168094_48168651_1": {"length": 15, "quality": 0.8823529411764706, "section_id": 5343}}, "n3337": {"so_48168094_48168651_1": {"length": 14, "quality": 0.8235294117647058, "section_id": 5140}}, "n4659": {"so_48168094_48168651_1": {"length": 15, "quality": 0.8823529411764706, "section_id": 6765}}}, "48168281": {"Id": "48168281", "PostTypeId": "2", "Body": "<p><code>' &lt;&lt; i1 &lt;&lt; '</code> is a multicharacter literal, has type <code>int</code> and implementation-defined value.</p>\n<p>You probably want: <code>cout &lt;&lt; c &lt;&lt; ' ' &lt;&lt; i1 &lt;&lt; ' ' &lt;&lt; c2 &lt;&lt; '\\n';</code></p>\n<p>with regular character space.</p>\n", "LastActivityDate": "2018-01-09T12:30:21.823", "CommentCount": "0", "CreationDate": "2018-01-09T12:30:21.823", "ParentId": "48168094", "Score": "5", "OwnerUserId": "2684539"}});