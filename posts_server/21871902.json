post_cb({"21872347": {"Id": "21872347", "PostTypeId": "2", "Body": "<p>From <em>\u00a721.4.2/1 [string.require]</em>,</p>\n<blockquote>\n<p id=\"so_21871902_21872347_0\">If any operation would cause <code>size()</code> to exceed <code>max_size()</code>, that operation shall throw an exception object of type <code>length_error</code>.</p>\n</blockquote>\n<p>So somewhere in your code you're attempting to create a string whose length exceeds <a href=\"http://en.cppreference.com/w/cpp/string/basic_string/max_size\" rel=\"nofollow\"><code>string::max_size()</code></a>, which is typically a huge number, so you should feel proud of yourself :-)</p>\n<p>Jokes aside, it's difficult to tell where the error is because it looks like you've removed relevant sections of code, especially the implementation of <code>ArithCard::readCards</code>. I don't understand why you chose to make this function <code>static</code> and then pass it a pointer to an instance of <code>ArithCard</code>, instead of just making it a non-static member function. </p>\n<p>Your code has the pointer you're passing to <code>ArithCard::readCards</code> initialized to <code>nullptr</code>, so I assume you're allocating memory for the object within the function. If you're not, then you most likely have undefined behavior going on within that function.</p>\n<p>I'd change that function to</p>\n<pre><code>class ArithCard {\n  public:\n  ...\n  bool readCards(const std::string &amp;fileName, int &amp;cardCnt) ;\n};\n</code></pre>\n<p>And change the code within <code>main()</code> to</p>\n<pre><code>ArithCard cards;\n\nresult = cards.readCards(dataFile, cardCnt);\n</code></pre>\n<p>Also, in both <code>getQuestion()</code> and <code>getAnswer()</code> you're not checking the return value of <code>string::find</code>, so attempting to extract a substring using a invalid result may be the cause of this error. This is the most likely explanation because <code>string::find</code> will return <a href=\"http://en.cppreference.com/w/cpp/string/basic_string/npos\" rel=\"nofollow\"><code>string::npos</code></a>, a huge number, if the search term is not found.</p>\n", "LastEditorUserId": "241631", "LastActivityDate": "2014-02-19T06:08:24.763", "Score": "1", "CreationDate": "2014-02-19T06:01:58.050", "ParentId": "21871902", "CommentCount": "1", "OwnerUserId": "241631", "LastEditDate": "2014-02-19T06:08:24.763"}, "bq_ids": {"n4140": {"so_21871902_21872347_0": {"length": 12, "quality": 1.0, "section_id": 1563}}, "n3337": {"so_21871902_21872347_0": {"length": 12, "quality": 1.0, "section_id": 1557}}, "n4659": {"so_21871902_21872347_0": {"length": 12, "quality": 1.0, "section_id": 1713}}}, "21871902": {"ViewCount": "493", "Body": "<p>My program consists of three files. arithcard.hpp (header), assign2.cpp (the main program) and arithcard.cpp(method). </p>\n<p>In the array, cards, is store strings read from a text file. For example, cards[0].fileLine has the string 2 + 2 = 4. (fileLine is a private member variable with all the strings), cards[1].fileLine has the string 2 + 4 = 3, etc...</p>\n<p>I know cards[i].fileLine contains all these strings because I tested by printing them all out in the readCards method to see if they are actually in there. </p>\n<p>Here is my problem, when I try to call cards[i].getQuestion (or .getAnswer()) in the main program. Sometimes, it shows me the question(or answer) or the error</p>\n<p>\"terminate called after throwing an instance of 'std::length_error'\n  what():  basic_string::_S_create\"</p>\n<h2>arithcard.hpp</h2>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\n/*\n  Defines the class ArithCard, for handling arithmetic flash cards.\n\n  You may not modify the public method declarations provided below. The main\n  program used to test your solution will assume that these methods exist.\n\n  You can add private attributes and methods as you need them.\n\n  You may find it convenient to add additional public methods for testing.\n  Keep in mind that your code must work with the unmodified main program\n  or it will fail automated testing.\n*/\nclass ArithCard {\n\n  public:\n\n  // Default constructor\n  ArithCard() ;\n\n  static bool readCards(const std::string &amp;fileName,\n            int &amp;cardCnt,ArithCard *&amp;cards) ;\n\n  void displayQuestion(std::ostream &amp;out) ;\n\n  bool checkAnswer(std::istream &amp;in) ;\n\n  // Return the question as a string.\n  std::string getQuestion() ;\n\n  // Return the answer as a string.\n  std::string getAnswer() ;\n\n  // Return the answer as an integer.\n  int getAnswerValue() ;\n\n  private:\n\n  // Add your private methods and attributes here.\n  std::string fileLine;\n  std::string question;\n  std::string answer;\n} ;\n</code></pre>\n<h2>arithcard.cpp</h2>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;fstream&gt;\n#include \"arithcard.hpp\"\nusing namespace std;\n\nArithCard::ArithCard()\n{\n    //body intentionally empty\n}\n\nbool ArithCard::readCards(const string &amp;fileName, int &amp;cardCnt, ArithCard *&amp;cards)\n{\n    //read the file line by line and store it in cards\n    return (true);\n}\n\nvoid displayQuestion(std::ostream &amp;out)\n{\n   //display output\n}\n\n bool checkAnswer(std::istream &amp;in)\n {\n     return (true);\n }\n\n// Return the question as a string.\n string ArithCard::getQuestion()\n {\n     size_t pos = 0;\n     pos = fileLine.find(\"=\");\n     question = fileLine.substr(0, pos);\n     return question;\n }\n\n // Return the answer as a string.\n  string ArithCard::getAnswer()\n  {\n      size_t pos = 0;\n      pos = fileLine.find(\"=\") + 1;\n      answer = fileLine.substr(pos);\n      return answer;\n  }\n\n    // Return the answer as an integer.\n   int getAnswerValue()\n   {\n       return answer;\n\n   }\n</code></pre>\n<h2>assign2.cpp</h2>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;sstream&gt;\n#include &lt;string&gt;\n#include &lt;limits&gt;\n#include &lt;random&gt;\n#include \"arithcard.hpp\"\n\n// File-local anonymous namespace\n\nnamespace {\n\nint verbosity = 1 ;\n\n}\n\n/*\n  Read in the files of cards, then loop: query the user to specify a\n  question, print the question, check the answer. Terminate when the user\n  types an empty line instead of specifying a question.\n*/\nint main (int argc, const char *argv[])\n{\n  if (argc != 2) {\n    std::cout &lt;&lt; \"Usage: \" &lt;&lt; argv[0] &lt;&lt; \" &lt;datafile&gt;\" &lt;&lt; std::endl ;\n    return (1) ;\n  }\n  std::string dataFile(argv[1]) ;\n\n  bool result = false ;\n  int cardCnt = -1 ;\n  ArithCard *cards = nullptr ;\n\n/*\n  Parse the file of questions &amp; answers. A false return value indicates an\n  absent file or other i/o error. It's also possible the file is present but\n  contains no valid questions.\n*/\nresult = ArithCard::readCards(dataFile,cardCnt,cards) ;\nstd::cout &lt;&lt; cards[0].getQuestion() &lt;&lt; std:: endl;\n\n  return (0) ;\n}\n</code></pre>\n", "AcceptedAnswerId": "21872347", "Title": "std::length_error when trying to output a string from class array", "CreationDate": "2014-02-19T05:31:44.217", "Id": "21871902", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2014-02-19T06:08:24.763", "Score": "0", "OwnerUserId": "2817611", "Tags": "<c++><arrays><string><class><c++11>", "AnswerCount": "1"}});