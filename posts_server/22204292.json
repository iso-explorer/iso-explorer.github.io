post_cb({"22204439": {"ParentId": "22204292", "CommentCount": "4", "Body": "<p>There are a number of things which means that an expression is\nnot a <em>core constant expression</em> is </p>\n<blockquote>\n<p id=\"so_22204292_22204439_0\">-- an invocation of a <code>constexpr</code> function or a <code>constexpr</code> constructor that would exceed the implementation defined recursion limits;</p>\n</blockquote>\n<p>(fifth point in \u00a75.19/2.).  So the limit is implementation\ndefined.</p>\n", "OwnerUserId": "649665", "PostTypeId": "2", "Id": "22204439", "Score": "7", "CreationDate": "2014-03-05T17:08:13.090", "LastActivityDate": "2014-03-05T17:08:13.090"}, "22204292": {"CommentCount": "1", "AcceptedAnswerId": "22204439", "PostTypeId": "1", "LastEditorUserId": "985296", "CreationDate": "2014-03-05T17:01:58.523", "LastActivityDate": "2014-03-05T17:10:17.223", "LastEditDate": "2014-03-05T17:10:17.223", "ViewCount": "183", "FavoriteCount": "4", "Title": "Are non-terminating constexpr functions well-defined?", "Id": "22204292", "Score": "12", "Body": "<p>Consider the following code:</p>\n<pre><code>constexpr unsigned f(unsigned x)\n{\n    while (x &amp; 1) x *= 3;\n    return x;\n}\n\nint main()\n{\n    char a[f(2)];\n    char b[f(1)];\n}\n</code></pre>\n<p>In case it isn't obvious: for odd integers <code>x</code>, the function <code>f</code> never terminates.</p>\n<p>When I compile the above program <a href=\"http://coliru.stacked-crooked.com/a/b5bcc70cb191ac4c\">with clang on coliru</a>, <code>b</code> seems to be a VLA, but not <code>a</code>:</p>\n<pre><code>warning: variable length arrays are a C99 feature [-Wvla-extension]\n\nchar b[f(1)];\n</code></pre>\n<p>Is there a well-defined limit at which the compiler decides to stop evaluation of a constant expression? Or would it be perfectly fine for a conforming compiler to go into an infinite loop? Does <code>f(1)</code> yield UB?</p>\n", "Tags": "<c++><infinite-loop><undefined-behavior><constexpr><c++14>", "OwnerUserId": "252000", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_22204292_22204439_0": {"section_id": 6185, "quality": 0.7272727272727273, "length": 8}}, "n3337": {"so_22204292_22204439_0": {"section_id": 5946, "quality": 0.8181818181818182, "length": 9}}, "n4659": {"so_22204292_22204439_0": {"section_id": 7687, "quality": 0.7272727272727273, "length": 8}}}});