post_cb({"35359296": {"ParentId": "35359169", "PostTypeId": "2", "CommentCount": "4", "Body": "<blockquote>\n<p id=\"so_35359169_35359296_0\">Does <code>std::vector::insert</code> reserve by definition?</p>\n</blockquote>\n<p>Yes, no; depends on the current capacity.</p>\n<p>From the draft N4567, \u00a723.3.6.5/1 ([vector.modifiers]):</p>\n<blockquote>\n<p id=\"so_35359169_35359296_1\">Causes reallocation if the <strong>new size is greater than the old capacity</strong>.</p>\n</blockquote>\n<p>If the allocated memory capacity in the <code>vector</code> is large enough to contain the new elements, no additional allocations for the <code>vector</code> are needed. So no, then it won't reserve memory.</p>\n<p>If the <code>vector</code> capacity is not large enough, then a new block is allocated, the current contents moved/copied over and the new elements are inserted. The exact allocation algorithm is not specified, but typically it would be as used in the <code>reserve()</code> method.</p>\n<blockquote>\n<p id=\"so_35359169_35359296_2\">... or another better approach?</p>\n</blockquote>\n<p>If you are concerned about too many allocations whilst inserting elements into the <code>vector</code>, then calling the <code>reserve</code> method with the size of the number of expected elements to be added does minimise the allocations.</p>\n<blockquote>\n<p id=\"so_35359169_35359296_3\">Does the <code>vector</code> call <code>reserve</code> before the/any insertions? I.e. does it allocate enough capacity in a single allocation?</p>\n</blockquote>\n<p>No guarantees. How would it know the distance between the to input iterators? Given that the <a href=\"http://en.cppreference.com/w/cpp/container/vector/insert\" rel=\"nofollow\"><code>insert</code></a> method can take an <a href=\"http://en.cppreference.com/w/cpp/concept/InputIterator\" rel=\"nofollow\">InputIterator</a> (i.e. single pass iterator), it has no why of calculating the expected size. <em>Could the method calculate the size if the iterators where something else (e.g. pointers or <a href=\"http://en.cppreference.com/w/cpp/concept/RandomAccessIterator\" rel=\"nofollow\">RandomAccessIterator</a>)</em>? Yes it could. <em>Would it</em>? Depends on the implementation and the optimisations that are made.</p>\n", "OwnerUserId": "3747990", "LastEditorUserId": "3747990", "LastEditDate": "2016-02-12T15:26:04.423", "Id": "35359296", "Score": "1", "CreationDate": "2016-02-12T09:44:13.830", "LastActivityDate": "2016-02-12T15:26:04.423"}, "35359225": {"ParentId": "35359169", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>From the <a href=\"http://en.cppreference.com/w/cpp/container/vector/insert\" rel=\"nofollow\">documentation</a>, it seems that:</p>\n<blockquote>\n<p id=\"so_35359169_35359225_0\">Causes reallocation if the new\u00a0size()\u00a0is greater than the old capacity().</p>\n</blockquote>\n<p>Be aware also that in such a case all the iterators and references are invalidated.</p>\n<p>It goes without saying thus that reallocations are in charge of the <code>insert</code> and, if you look at those operations one at the time, it's as a consistent <em>reserve-size-plus-one</em> operation is made at each step.<br>\nYou can argue that a <code>reserve</code> call at the top of the insertion would speed up everything in those cases when more than one reallocation takes place... Well, right, it could help, but it mostly depends on your actual problem.</br></p>\n", "OwnerUserId": "4987285", "LastEditorUserId": "4987285", "LastEditDate": "2016-02-12T09:59:00.080", "Id": "35359225", "Score": "1", "CreationDate": "2016-02-12T09:40:02.937", "LastActivityDate": "2016-02-12T09:59:00.080"}, "35359169": {"CommentCount": "4", "CreationDate": "2016-02-12T09:37:26.910", "PostTypeId": "1", "AcceptedAnswerId": "35359472", "LastEditorUserId": "3747990", "LastActivityDate": "2016-02-12T15:26:04.423", "LastEditDate": "2016-02-12T10:27:57.253", "ViewCount": "1079", "FavoriteCount": "2", "Title": "Does std::vector::insert reserve by definition?", "Id": "35359169", "Score": "6", "Body": "<p>When calling the <code>insert</code> member function on a <code>std::vector</code>, will it <code>reserve</code> before \"pushing back\" the new items? I mean does the standard guarantee that or not?</p>\n<p>In other words, should I do it like this:</p>\n<pre><code>std::vector&lt;int&gt; a{1,2,3,4,5};\nstd::vector&lt;int&gt; b{6,7,8,9,10};\na.insert(a.end(),b.begin(),b.end());\n</code></pre>\n<p>or like this:</p>\n<pre><code>std::vector&lt;int&gt; a{1,2,3,4,5};\nstd::vector&lt;int&gt; b{6,7,8,9,10};\na.reserve(a.size()+b.size());\na.insert(a.end(),b.begin(),b.end());\n</code></pre>\n<p>or another better approach?</p>\n", "Tags": "<c++><c++11><vector>", "OwnerUserId": "4523099", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_35359169_35359296_1": {"section_id": 986, "quality": 1.0, "length": 8}, "so_35359169_35359225_0": {"section_id": 986, "quality": 1.0, "length": 8}}, "n3337": {"so_35359169_35359296_1": {"section_id": 971, "quality": 1.0, "length": 8}, "so_35359169_35359225_0": {"section_id": 971, "quality": 1.0, "length": 8}}, "n4659": {"so_35359169_35359296_1": {"section_id": 1049, "quality": 1.0, "length": 8}, "so_35359169_35359225_0": {"section_id": 1049, "quality": 1.0, "length": 8}}}, "35359472": {"ParentId": "35359169", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>Regarding the complexity of the function <a href=\"http://www.cplusplus.com/reference/vector/vector/insert/\" rel=\"noreferrer\">[link]</a>:</p>\n<blockquote>\n<p id=\"so_35359169_35359472_0\">Linear on the number of elements inserted (copy/move construction)\n  plus the number of elements after position (moving).</p>\n<p id=\"so_35359169_35359472_1\">Additionally, if InputIterator in the range insert (3) is not at least\n  of a forward iterator category (i.e., just an input iterator) the new\n  capacity cannot be determined beforehand and the insertion incurs in\n  additional logarithmic complexity in size (reallocations).</p>\n</blockquote>\n<p>Hence, there is two cases :</p>\n<ul>\n<li>The new capacity can be determined, therefore you won't need to call reserve</li>\n<li>The new capacity can't be determined, hence a call to <code>reserve</code> should be useful.</li>\n</ul>\n", "OwnerUserId": "1013504", "LastEditorUserId": "1013504", "LastEditDate": "2016-02-12T09:59:40.860", "Id": "35359472", "Score": "12", "CreationDate": "2016-02-12T09:53:06.907", "LastActivityDate": "2016-02-12T09:59:40.860"}});