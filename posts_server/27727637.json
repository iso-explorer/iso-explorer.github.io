post_cb({"bq_ids": {"n4140": {"so_27727637_27728034_0": {"length": 30, "quality": 0.7894736842105263, "section_id": 3218}}, "n3337": {"so_27727637_27728034_0": {"length": 28, "quality": 0.7368421052631579, "section_id": 3092}}, "n4659": {"so_27727637_27728034_0": {"length": 30, "quality": 0.7894736842105263, "section_id": 3975}}}, "27727683": {"Id": "27727683", "PostTypeId": "2", "Body": "<p>A <code>const T</code> is a object of type <code>T</code> whose value cannot be modified. However, when <code>T</code> is a reference type, the <code>const</code> modifier is superfluous since references cannot be changed once initialized - they always refer to the same object. Thus, a <code>const T</code> when <code>T=int&amp;</code> is just a <code>T</code>(which in this case is <code>int&amp;</code>). Thus, the argument that <code>f&lt;int&amp;&gt;</code> takes is a lvalue reference to an <code>int&amp;</code>, which by c++11's collapsing rules is just <code>int&amp;</code>.</p>\n", "LastActivityDate": "2015-01-01T01:20:43.580", "CommentCount": "1", "CreationDate": "2015-01-01T01:20:43.580", "ParentId": "27727637", "Score": "0", "OwnerUserId": "862351"}, "27728034": {"Id": "27728034", "PostTypeId": "2", "Body": "<p>Thanks to <a href=\"https://stackoverflow.com/users/2877241/vlad-from-moscow\">Vlad from Moscow</a>'s answer to <a href=\"https://stackoverflow.com/questions/27256516/c-template-function-with-explicitly-specified-reference-type-as-type-parameter\">C++: template function with explicitly specified reference type as type parameter</a>, I believe the crux of the <code>const</code>-disappearance is 8.3.2/1, which says:</p>\n<blockquote>\n<p id=\"so_27727637_27728034_0\">In a declaration T D where D has either of the forms<br>\n  &amp; <em>attribute-specifier-seqopt</em>D1<br>\n  &amp;&amp; <em>attribute-specifier-seqopt</em>D1<br>\n  and the type of the identifier in the declaration T D1 is\n  \u201c<em>derived-declarator-type-list</em> T,\u201d then the type of the identifier of D\n  is \u201c<em>derived-declarator-type-list</em> reference to T.\u201d The optional\n  <em>attribute-specifier-seq</em> appertains to the reference type. Cv-qualified\n  references are ill-formed except when the cv-qualifiers are introduced\n  through the use of a <em>typedef-name</em> (7.1.3, 14.1) or <em>decltype-specifier</em>\n  (7.1.6.2), <strong>in which case the cv-qualifiers are ignored</strong>.</br></br></br></p>\n</blockquote>\n<p>I've emboldened the relevant text. (I'd like to format the entire paragraph as it is in the standard, but I can't figure out how to get the right indentation and to add subscripting.)</p>\n<p>Once the <code>const</code> disappears, normal reference collapsing kicks in as usual.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2015-01-01T03:08:13.313", "Score": "1", "CreationDate": "2015-01-01T03:08:13.313", "ParentId": "27727637", "CommentCount": "1", "OwnerUserId": "1426649", "LastEditDate": "2017-05-23T11:53:43.970"}, "27727637": {"ViewCount": "315", "Body": "<p>The following code shows that if a template taking a ref-to-<code>const</code> parameter is instantiated with a reference type (e.g., <code>int&amp;</code>), the parameter isn't <code>const</code>:</p>\n<pre><code>#include &lt;iostream&gt;\n\ntemplate&lt;typename T&gt;\nvoid f(const T&amp; arg)         // arg isn't const if T is a reference type\n{\n  arg = -1;\n}\n\nint main()\n{\n  int x = 0;\n  f&lt;int&amp;&gt;(x);                // instantiate f with reference type\n  std::cout &lt;&lt; x &lt;&lt; '\\n';    // prints -1 under gcc, clang, and msvc\n}\n</code></pre>\n<p>What's going on here?</p>\n<p>My guess is that the initial type of <code>arg</code> is <code>int &amp; const &amp;</code> and that this somehow transforms to <code>int&amp;</code>. If that's so, exactly how does that happen, in terms of the standard? If that's not what's going on, what is?</p>\n", "Title": "Why does the const in a const T& parameter disappear when T is a reference type?", "CreationDate": "2015-01-01T01:08:35.817", "LastActivityDate": "2015-01-01T03:08:13.313", "CommentCount": "4", "FavoriteCount": "0", "PostTypeId": "1", "ClosedDate": "2015-01-01T04:00:04.333", "Id": "27727637", "Score": "4", "OwnerUserId": "1426649", "Tags": "<c++><templates><type-deduction>", "AnswerCount": "2"}});