post_cb({"bq_ids": {"n4140": {"so_6310638_6310703_5": {"length": 7, "quality": 0.875, "section_id": 467}, "so_6310638_6310703_3": {"length": 11, "quality": 0.7857142857142857, "section_id": 467}, "so_6310638_6310703_4": {"length": 19, "quality": 0.9047619047619048, "section_id": 467}, "so_6310638_6310703_7": {"length": 7, "quality": 0.875, "section_id": 369}, "so_6310638_6310703_0": {"length": 7, "quality": 0.875, "section_id": 457}}, "n3337": {"so_6310638_6310703_5": {"length": 7, "quality": 0.875, "section_id": 458}, "so_6310638_6310703_3": {"length": 14, "quality": 1.0, "section_id": 448}, "so_6310638_6310703_4": {"length": 21, "quality": 1.0, "section_id": 448}, "so_6310638_6310703_7": {"length": 7, "quality": 0.875, "section_id": 359}, "so_6310638_6310703_0": {"length": 7, "quality": 0.875, "section_id": 448}}, "n4659": {"so_6310638_6310703_5": {"length": 7, "quality": 0.875, "section_id": 490}, "so_6310638_6310703_3": {"length": 11, "quality": 0.7857142857142857, "section_id": 490}, "so_6310638_6310703_0": {"length": 7, "quality": 0.875, "section_id": 480}, "so_6310638_6310703_7": {"length": 7, "quality": 0.875, "section_id": 381}, "so_6310638_6310703_4": {"length": 19, "quality": 0.9047619047619048, "section_id": 490}}}, "6310685": {"Id": "6310685", "PostTypeId": "2", "Body": "<p>Your copy constructor should accept <code>const Uniform&amp;</code> and not <code>Uniform&amp;</code> as the one you have does.</p>\n", "LastActivityDate": "2011-06-10T18:41:00.630", "CommentCount": "0", "CreationDate": "2011-06-10T18:41:00.630", "ParentId": "6310638", "Score": "1", "OwnerUserId": "618400"}, "6310703": {"Id": "6310703", "PostTypeId": "2", "Body": "<p>When you say \"default copy constructor\" (which generally makes little sense), I assume you mean \"implicitly-declared copy constructor\" or \"compiler-provided copy constructor\"</p>\n<p>The exact signature of the compiler-provided copy constructor will depend on the contents of your <code>Uniform</code> class. It could be <code>Uniform::Uniform(const Uniform &amp;)</code> or <code>Uniform::Uniform(Uniform &amp;)</code> depending, again, on the details of <code>Uniform</code> (which you didn't provide).</p>\n<p>For example, if your <code>Uniform</code> includes a subobject (base or member) of type <code>T</code>, whose copy constructor is declared as <code>T::T(T &amp;)</code> (no <code>const</code>), then <code>Uniform</code>'s implicit constructor will also be implicitly declared as <code>Uniform::Uniform(Uniform &amp;)</code> (no <code>const</code>).</p>\n<p>A full specification can be found in the language standard (12.8/5)</p>\n<blockquote>\n<p id=\"so_6310638_6310703_0\">The implicitly-declared copy\n  constructor for a class X will have\n  the form </p>\n<p id=\"so_6310638_6310703_1\"><code>X::X(const X&amp;)</code> </p>\n<p id=\"so_6310638_6310703_2\">if </p>\n<p id=\"so_6310638_6310703_3\">\u2014 each\n  direct or virtual base class B of X\n  has a copy constructor whose first\n  parameter is of type const B&amp; or const\n  volatile B&amp;, and </p>\n<p id=\"so_6310638_6310703_4\">\u2014 for all the\n  nonstatic data members of X that are\n  of a class type M (or array thereof),\n  each such class type has a copy\n  constructor whose first parameter is\n  of type const M&amp; or const volatile\n  M&amp;.</p>\n<p id=\"so_6310638_6310703_5\">Otherwise, the implicitly\n  declared copy constructor will have\n  the form </p>\n<p id=\"so_6310638_6310703_6\"><code>X::X(X&amp;)</code></p>\n<p id=\"so_6310638_6310703_7\">An\n  implicitly-declared copy constructor\n  is an inline public member of its\n  class.</p>\n</blockquote>\n<p>The <code>push_back</code> implementation needs <code>Uniform::Uniform(const Uniform &amp;)</code>, but something in your class causes it to be <code>Uniform::Uniform(Uniform &amp;)</code>. Hence the error. There's no way to say what it is without seeing the definition of your <code>Uniform</code>.</p>\n", "LastEditorUserId": "187690", "LastActivityDate": "2011-06-10T18:52:59.020", "Score": "10", "CreationDate": "2011-06-10T18:42:17.230", "ParentId": "6310638", "CommentCount": "2", "OwnerUserId": "187690", "LastEditDate": "2011-06-10T18:52:59.020"}, "6310683": {"Id": "6310683", "PostTypeId": "2", "Body": "<p>You failed to include the copy constructor (sic!!!) but you must have defined it wrongly:</p>\n<pre><code>Uniform::Uniform(Uniform&amp;)\n{\n     ....\n}\n</code></pre>\n<p>should be (note the <strong>const</strong>)</p>\n<pre><code>Uniform::Uniform(const Uniform&amp;)\n{\n     ....\n}\n</code></pre>\n", "LastActivityDate": "2011-06-10T18:40:54.830", "CommentCount": "0", "CreationDate": "2011-06-10T18:40:54.830", "ParentId": "6310638", "Score": "0", "OwnerUserId": "85371"}, "6310684": {"Id": "6310684", "PostTypeId": "2", "Body": "<p>Your copy constructor needs to take its argument as a <strong>const</strong> reference:</p>\n<pre><code>Uniform::Uniform(const Uniform&amp; other)\n</code></pre>\n", "LastActivityDate": "2011-06-10T18:40:58.093", "CommentCount": "0", "CreationDate": "2011-06-10T18:40:58.093", "ParentId": "6310638", "Score": "1", "OwnerUserId": "500104"}, "6310638": {"ViewCount": "12965", "Body": "<p>I have a class (Uniform) that has a constructor with 2 parameters, and a default copy constructor (it only contains int, floats, a std::vector and a std::map). I created a </p>\n<pre><code>std::vector&lt;Uniform&gt; uniforms\n</code></pre>\n<p>that I want to fill using the </p>\n<pre><code>uniforms.push_back()\n</code></pre>\n<p>line. I use this code to do that (the 2nd line is just here to test the copy constructor, as it currently fails)</p>\n<pre><code>Uniform uni(uniform_name,type);\nUniform uni2=uni;\nuniforms.push_back(uni2);\n</code></pre>\n<p>The default constructor works fine, the \"uni2=uni\" compiles without problem (so the default copy constructor is OK too), but the push_back returns (using g++ as a compiler):</p>\n<blockquote>\n<p id=\"so_6310638_6310638_0\">/usr/lib/gcc/x86_64-unknown-linux-gnu/4.6.0/../../../../include/c++/4.6.0/ext/new_allocator.h:108:9: erreur: no matching function for call to \u2018Uniform::Uniform(const Uniform&amp;)\u2019</p>\n<p id=\"so_6310638_6310638_1\">/usr/lib/gcc/x86_64-unknown-linux-gnu/4.6.0/../../../../include/c++/4.6.0/ext/new_allocator.h:108:9: note: candidates are:</p>\n<p id=\"so_6310638_6310638_2\">./inc/uniform.h:16:5: note: Uniform::Uniform(std::string, Uniform_Type)</p>\n<p id=\"so_6310638_6310638_3\">./inc/uniform.h:16:5: note:   candidate expects 2 arguments, 1 provided</p>\n<p id=\"so_6310638_6310638_4\">./inc/uniform.h:14:7: note: Uniform::Uniform(Uniform&amp;)</p>\n<p id=\"so_6310638_6310638_5\">./inc/uniform.h:14:7: note:   no known conversion for argument 1 from \u2018const Uniform\u2019 to \u2018Uniform&amp;\u2019</p>\n</blockquote>\n<p>Thanks :)</p>\n", "AcceptedAnswerId": "6310703", "Title": "C++ vector::push_back using default copy constructor", "CreationDate": "2011-06-10T18:35:53.163", "Id": "6310638", "CommentCount": "3", "FavoriteCount": "2", "PostTypeId": "1", "LastActivityDate": "2011-06-10T18:52:59.020", "Score": "8", "OwnerUserId": "793221", "Tags": "<c++><vector><copy><copy-constructor>", "AnswerCount": "5"}, "6310712": {"Id": "6310712", "PostTypeId": "2", "Body": "<p>The compiler output</p>\n<blockquote>\n<p id=\"so_6310638_6310712_0\">./inc/uniform.h:14:7: note: Uniform::Uniform(Uniform&amp;)</p>\n</blockquote>\n<p>says you're not using the default copy constructor, but that you have defined one yourself, taking a non-const reference.</p>\n", "LastActivityDate": "2011-06-10T18:43:12.897", "CommentCount": "0", "CreationDate": "2011-06-10T18:43:12.897", "ParentId": "6310638", "Score": "1", "OwnerUserId": "334852"}});