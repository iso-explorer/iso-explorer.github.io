post_cb({"bq_ids": {"n4140": {"so_25385464_25386824_0": {"length": 40, "quality": 0.9523809523809523, "section_id": 615}}, "n3337": {"so_25385464_25386824_0": {"length": 40, "quality": 0.9523809523809523, "section_id": 605}}, "n4659": {"so_25385464_25386824_0": {"length": 40, "quality": 0.9523809523809523, "section_id": 641}}}, "25386623": {"Id": "25386623", "PostTypeId": "2", "Body": "<p>A debugging session gave the result. One is globally defined <code>operator&lt;&lt;</code> and other one is class method. You guess which one is calling which.</p>\n<p><code>Test.exe!std::operator&lt;&lt;&lt;std::char_traits&lt;char&gt; &gt;(std::basic_ostream&lt;char,std::char_traits&lt;char&gt; &gt; &amp; _Ostr, char _Ch)</code></p>\n<p><code>msvcp120d.dll!std::basic_ostream&lt;char,std::char_traits&lt;char&gt; &gt;::operator&lt;&lt;(int _Val) Line 292  C++</code></p>\n<p>I am not a language lawyer, but I believe compiler is giving precedence to member-function first.</p>\n", "LastActivityDate": "2014-08-19T14:54:50.750", "CommentCount": "0", "CreationDate": "2014-08-19T14:54:50.750", "ParentId": "25385464", "Score": "1", "OwnerUserId": "264325"}, "25386824": {"Id": "25386824", "PostTypeId": "2", "Body": "<p>Yes, this is ambiguous, but the cause of the ambiguity is actually rather surprising. It is not that the compiler cannot distinguish between <code>ostream::operator&lt;&lt;(int)</code> and <code>operator&lt;&lt;(ostream &amp;, char)</code>; the latter is actually a template while the former is not, so if the matches are equally good the first one will be selected, and there is no ambiguity between those two. Rather, the ambiguity comes from <code>ostream</code>'s other member <code>operator&lt;&lt;</code> overloads.</p>\n<p>A <a href=\"http://coliru.stacked-crooked.com/a/54e87601b45cd6e6\" rel=\"nofollow noreferrer\">minimized repro</a> is</p>\n<pre><code>struct A{\n    operator char() const{ return 'a'; }\n    operator int() const{ return 10; }\n};\n\nstruct B {\n    void operator&lt;&lt; (int) { }\n    void operator&lt;&lt; (long) { }\n};\n\nint main()\n{\n    A a;\n    B b;\n    b &lt;&lt; a;\n}\n</code></pre>\n<p>The problem is that the conversion of <code>a</code> to <code>long</code> can be via either <code>a.operator char()</code> or <code>a.operator int()</code>, both followed by a standard conversion sequence consisting of an integral conversion. The standard says that (\u00a713.3.3.1 [over.best.ics]/p10, footnote omitted):</p>\n<blockquote>\n<p id=\"so_25385464_25386824_0\">If several different sequences of conversions exist that each convert\n  the argument to the parameter type, the implicit conversion sequence\n  associated with the parameter is defined to be the unique conversion\n  sequence designated the <em>ambiguous conversion sequence</em>. For the\n  purpose of ranking implicit conversion sequences as described in\n  13.3.3.2, the ambiguous conversion sequence is treated as a user-defined sequence that is indistinguishable from any other\n  user-defined conversion sequence. <sup>*</sup></p>\n</blockquote>\n<p>Since the conversion of <code>a</code> to <code>int</code> also involves a user-defined conversion sequence, it is indistinguishable from the <em>ambiguous conversion sequence</em> from <code>a</code> to <code>long</code>, and in this context no other rule in \u00a713.3.3 [over.match.best] applies to distinguish the two overloads either. Hence, the call is ambiguous, and the program is ill-formed.</p>\n<hr>\n<p><sub><sup>*</sup> The next sentence in the standard says \"If a function that uses the ambiguous conversion sequence is selected as the best viable function, the call will be ill-formed because the conversion of one of the arguments in the call is ambiguous.\", which doesn't seem necessarily correct, but detailed discussion of this issue is probably better in a <a href=\"https://stackoverflow.com/questions/25395056/in-overload-resolution-does-selection-of-a-function-that-uses-the-ambiguous-con\">separate question</a>. </sub></p>\n</hr>", "LastEditorUserId": "-1", "LastActivityDate": "2014-09-24T08:49:15.690", "Score": "5", "CreationDate": "2014-08-19T15:03:45.640", "ParentId": "25385464", "CommentCount": "0", "OwnerUserId": "2756719", "LastEditDate": "2017-05-23T11:59:28.910"}, "25385464": {"ViewCount": "379", "Body": "<p>Here is the code:</p>\n<pre><code>class A{\npublic:\n    int val;\n    char cval;\n    A():val(10),cval('a'){ }\n    operator char() const{ return cval; }\n    operator int() const{ return val; }\n};\nint main()\n{\n    A a;\n    cout &lt;&lt; a;\n}\n</code></pre>\n<p>I am running the code in VS 2013, the output value is <code>10</code>, if I comment out <code>operator int() const{ return val; }</code>, the output value will then become <code>a</code>.</p>\n<p>My question is how does the compiler determine which implicit type conversion to choose, I mean since both <code>int</code> and <code>char</code> are possible options for the <code>&lt;&lt;</code> operator?</p>\n", "AcceptedAnswerId": "25386824", "Title": "How is the implicit type conversion priority determined?", "CreationDate": "2014-08-19T14:03:00.737", "Id": "25385464", "CommentCount": "4", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2014-08-19T15:06:44.073", "LastEditorUserId": "2756719", "LastActivityDate": "2014-09-24T08:49:15.690", "Score": "7", "OwnerUserId": "3045084", "Tags": "<c++><implicit-conversion>", "AnswerCount": "3"}, "25385669": {"Id": "25385669", "PostTypeId": "2", "Body": "<p>It shouldn't compile, since the conversion is ambiguous; and it doesn't with my compiler: <a href=\"http://ideone.com/pPekoE\" rel=\"nofollow noreferrer\">live demo</a>. I've no idea why your compiler accepts it, or how it chooses which conversion to use, but it's wrong.</p>\n<p>You can resolve the ambiguity with an explicit cast:</p>\n<pre><code>cout &lt;&lt; static_cast&lt;char&gt;(a); // uses operator char()\ncout &lt;&lt; static_cast&lt;int&gt;(a);  // uses operator int()\n</code></pre>\n<p>Personally, I'd probably use named conversion functions, rather than operators, if I wanted it to be convertible to more than one type.</p>\n", "LastActivityDate": "2014-08-19T14:12:20.840", "CommentCount": "0", "CreationDate": "2014-08-19T14:12:20.840", "ParentId": "25385464", "Score": "4", "OwnerUserId": "204847"}});