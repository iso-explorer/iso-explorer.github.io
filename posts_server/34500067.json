post_cb({"34500099": {"ParentId": "34500067", "LastEditDate": "2015-12-28T20:16:55.027", "CommentCount": "1", "CreationDate": "2015-12-28T20:14:19.500", "Score": "2", "LastEditorUserId": "596781", "PostTypeId": "2", "Id": "34500099", "OwnerUserId": "596781", "Body": "<p>Your function returns a <code>std::future&lt;void&gt;</code>: the future result of the call of the asynchronous function.</p>\n<p>However, it is very poor practice to return a future returned from a call of <code>std::async</code> with the <code>std::launch::async</code> policy, as such a future's destructor may block, and users of the standard library usually don't expect standard library destructors to block. Cf. [futures.async]/4:</p>\n<blockquote>\n<p id=\"so_34500067_34500099_0\">[<em>Note:</em> If a future obtained from <code>std::async</code> is moved outside the local scope, other code that uses the future must be aware that the future\u2019s destructor may block for the shared state to become ready. \u2014 <em>end note</em>]</p>\n</blockquote>\n", "LastActivityDate": "2015-12-28T20:16:55.027"}, "34500067": {"CommentCount": "2", "ViewCount": "39", "CreationDate": "2015-12-28T20:13:01.180", "LastActivityDate": "2015-12-28T20:16:55.027", "Title": "How to specify function signature for function that returns result of async?", "AcceptedAnswerId": "34500099", "PostTypeId": "1", "Id": "34500067", "Score": "0", "Body": "<p>I have a function that does this:</p>\n<pre><code>??? createThread(int x) {\n   return async(std::launch::async, \n      [x] () { // do stuff with x });\n}\n</code></pre>\n<p>I am using VS 2012 (partial C++11). What should the return type be to make this compile?</p>\n", "Tags": "<c++><c++11>", "OwnerUserId": "1695372", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_34500067_34500099_0": {"section_id": 3162, "quality": 0.875, "length": 21}}, "n4659": {"so_34500067_34500099_0": {"section_id": 3924, "quality": 0.8333333333333334, "length": 20}}}});