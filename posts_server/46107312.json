post_cb({"bq_ids": {"n4140": {"so_46107312_46107312_0": {"length": 19, "quality": 0.8636363636363636, "section_id": 7136}}, "n3337": {"so_46107312_46107312_0": {"length": 18, "quality": 0.8181818181818182, "section_id": 6880}}, "n4659": {"so_46107312_46107312_0": {"length": 22, "quality": 1.0, "section_id": 8637}}}, "46107312": {"ViewCount": "267", "Body": "<p>Imagine we have a header <code>foo.h</code> containing the following:</p>\n<pre><code>#ifndef FOO_H_\n#define FOO_H_\n\nnamespace foo {\nconstexpr std::string_view kSomeString = \"blah\";\n}\n\n#endif  // FOO_H_\n</code></pre>\n<p>Is <code>foo::kSomeString</code> guaranteed to have internal linkage in any translation unit that includes <code>foo.h</code>? Does this vary between C++11 and C++17?</p>\n<p>In the draft standard <a href=\"http://eel.is/c++draft/basic.link#3\" rel=\"noreferrer\">[basic.link]/3</a> says</p>\n<blockquote>\n<p id=\"so_46107312_46107312_0\">A name having namespace scope has internal linkage if it is the name of [...] a non-inline variable of non-volatile const-qualified type that is neither explicitly declared extern nor previously declared to have external linkage [...]</p>\n</blockquote>\n<p>But I don't know if <code>constexpr</code> counts as \"const-qualified\". Does the standard say so somewhere?</p>\n<p>Assuming this is guaranteed to have internal linkage, it seems like there can be no problem with the ODR for this usage, right? (In contrast to what it says in <a href=\"https://stackoverflow.com/a/45666276/1505451\">this answer</a>.)</p>\n", "AcceptedAnswerId": "46107877", "Title": "C++ standard: do namespace-scoped constexpr variables have internal linkage?", "CreationDate": "2017-09-08T01:29:19.330", "Id": "46107312", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2017-09-08T01:44:51.863", "LastEditorUserId": "596781", "LastActivityDate": "2017-09-08T02:55:35.850", "Score": "11", "OwnerUserId": "1505451", "Tags": "<c++><c++11><language-lawyer><c++1z><linkage>", "AnswerCount": "1"}, "46107877": {"Id": "46107877", "PostTypeId": "2", "Body": "<p>Yes, <code>constexpr</code> on an object declaration means that the object is <code>const</code>. See <a href=\"https://timsong-cpp.github.io/cppwp/dcl.constexpr#9\" rel=\"noreferrer\">[dcl.constexpr]/9</a>. And yes, that means that <code>kSomeString</code> in your example has internal linkage.</p>\n<p>The species of ODR violation we are talking about here is not the definition of <code>kSomeString</code> itself, but other definitions that attempt to use it. And there's a problem precisely because of the internal linkage. Consider:</p>\n<pre><code>void f(const std::string_view &amp;);\n\ninline void g() { \n    f(foo::kSomeString); \n}\n</code></pre>\n<p>This is an ODR violation if included in multiple translation units, essentially because the definition of <code>g</code> in each translation unit references a different object.</p>\n", "LastEditorUserId": "2756719", "LastActivityDate": "2017-09-08T02:55:35.850", "Score": "13", "CreationDate": "2017-09-08T02:48:58.637", "ParentId": "46107312", "CommentCount": "1", "LastEditDate": "2017-09-08T02:55:35.850", "OwnerUserId": "2756719"}});