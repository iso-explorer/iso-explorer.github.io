post_cb({"43835539": {"Id": "43835539", "PostTypeId": "2", "Body": "<p><code>extern</code> variables are initialized before any function runs:\n<a href=\"http://en.cppreference.com/w/cpp/language/initialization#Non-local_variables\" rel=\"nofollow noreferrer\">en.cppreference.com/w/cpp/language/initialization#Non-local_variables</a></p>\n<p>If it was declared <code>static</code> rather than <code>extern</code> within a function block, it would still have <em>static storage duration</em>, but its' <em>linkage</em> would be <em>local</em> to that function vs. <em>external</em>. So it would be initialized when the execution first runs through that line within the function:\n<a href=\"http://en.cppreference.com/w/cpp/language/storage_duration#Static_local_variables\" rel=\"nofollow noreferrer\">en.cppreference.com/w/cpp/language/storage_duration#Static_local_variables</a></p>\n<p>So it's ok to initialize <code>static</code> variables in a function block, but not ok to initialize <code>extern</code> variables there.</p>\n", "LastActivityDate": "2017-05-07T19:10:49.020", "CommentCount": "0", "CreationDate": "2017-05-07T19:10:49.020", "ParentId": "17090354", "Score": "0", "OwnerUserId": "1666237"}, "30407955": {"Id": "30407955", "PostTypeId": "2", "Body": "<p>The simplest way to put it:</p>\n<p>The purpose of the <strong><code>extern</code></strong> keyword is to declare an object without defining it. By defining it, you're basically telling the compiler \"Do not assign a value but assign a value\". That doesn't make sense - It should never be done, inside <em>or</em> outside a function. Most compilers will either warn you and proceed anyway, or they won't compiler at all and give an error.</p>\n<p>Though it's beyond the scope of this question to explain in detail <em>what</em> <strong><code>extern</code></strong> does, you may find it useful to read the answers for <a href=\"https://stackoverflow.com/questions/1410563/what-is-the-difference-between-a-definition-and-a-declaration\">this question</a>.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2015-05-23T01:20:56.357", "Score": "0", "CreationDate": "2015-05-23T01:20:56.357", "ParentId": "17090354", "CommentCount": "0", "OwnerUserId": "3618920", "LastEditDate": "2017-05-23T12:26:10.887"}, "17099819": {"Id": "17099819", "PostTypeId": "2", "Body": "<p>At first ,you should familiar with the conception of linkage and the meaning of extern linkage:</p>\n<blockquote>\n<p id=\"so_17090354_17099819_0\">A name is said to have <strong>linkage</strong> when it might denote the same object,\n  reference, function, type, template, namespace or value as a name\n  introduced by a declaration in another scope:  </p>\n<p id=\"so_17090354_17099819_1\">When a name has <strong>external</strong> linkage, the entity it denotes can be\n  referred to by names from scopes of other translation units or from\n  other scopes of the same translation unit.<br>\n<em>--3.5.6.2 n3242</em></br></p>\n</blockquote>\n<p>The function of <code>static</code> which is differ from <code>extern</code>,<code>extern</code> is just a request,<code>static</code> is a command.</p>\n<blockquote>\n<p id=\"so_17090354_17099819_2\">The name of a function declared in block scope and the name of a\n  variable declared by a block scope extern declaration have linkage. </p>\n<ul>\n<li>If there is a visible declaration of an entity with linkage having the same name and type, ignoring entities declared outside the innermost enclosing namespace scope, the block scope declaration declares that same entity and receives the linkage of the previous declaration. </li>\n<li>If there is more than one such matching entity, the program is ill-formed.</li>\n<li>Otherwise, if no matching entity is found, the block scope entity receives external linkage.  </li>\n</ul>\n<p id=\"so_17090354_17099819_3\"><em>--3.5.6.6 n3242</em></p>\n</blockquote>\n<p>Therefore,in block scope the procedure below is recommend to do:</p>\n<pre><code>     extern int i;//declare it,request the linkage according to 3.5.6.6 above\n     i = 10;//modify it when has link to a defination\n</code></pre>\n<p>For the global extern declaration is possibly convert form</p>\n<pre><code>     extern int i =10;\n</code></pre>\n<p>to</p>\n<pre><code>     extern int i;//include in .hpp is recommended \n     int i =10;//global or namespace variable defination\n</code></pre>\n", "LastActivityDate": "2013-06-14T01:34:53.090", "CommentCount": "0", "CreationDate": "2013-06-14T01:34:53.090", "ParentId": "17090354", "Score": "4", "OwnerUserId": "1501948"}, "17090354": {"ViewCount": "12134", "Body": "<p>This code compiles fine:</p>\n<pre><code>extern int i = 10;\n\nvoid test()\n{\n    std::cout &lt;&lt; \"Hi\" &lt;&lt; i &lt;&lt; std::endl;\n}\n</code></pre>\n<p>While this one gives an error:</p>\n<pre><code>void test()\n{\n    extern int i = 10;\n    std::cout &lt;&lt; \"Hi\" &lt;&lt; i &lt;&lt; std::endl;\n}\n</code></pre>\n<blockquote>\n<p id=\"so_17090354_17090354_0\">error: 'i' has both 'extern' and initializer</p>\n</blockquote>\n<p>I read in <a href=\"https://www.google.co.in/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;ved=0CCoQFjAA&amp;url=http%3A%2F%2Fwww.amazon.com%2FPrimer-5th-Edition-Stanley-Lippman%2Fdp%2F0321714113&amp;ei=Qt25UdyHMoOLrQePi4CYBA&amp;usg=AFQjCNEOV2w5ncb9CBUfcyduJhFLw0wEMA&amp;bvm=bv.47883778,d.bmk\" rel=\"noreferrer\">C++ Primer</a></p>\n<blockquote>\n<p id=\"so_17090354_17090354_1\">Any declaration that includes an explicit initializer is a definition.\n  We can provide an initializer on a variable defined as extern, but\n  doing so overrides the extern. An extern that has an initializer is a\n  definition. <strong>It is an error to provide an initializer on an extern inside a\n  function</strong>.</p>\n</blockquote>\n<p>Can someone provide an explanation why this should be an error if done locally in a function, while the same is allowed at a global scope?</p>\n", "AcceptedAnswerId": "17090801", "Title": "Why does initializing of an extern variable locally inside a function give an error?", "CreationDate": "2013-06-13T14:57:45.333", "Id": "17090354", "CommentCount": "5", "FavoriteCount": "6", "PostTypeId": "1", "LastEditDate": "2013-06-13T15:04:46.520", "LastEditorUserId": "1348709", "LastActivityDate": "2017-05-07T19:10:49.020", "Score": "17", "OwnerUserId": "1093223", "Tags": "<c++><declaration><definition><extern>", "AnswerCount": "5"}, "bq_ids": {"n4140": {"so_17090354_17099819_0": {"length": 19, "quality": 0.95, "section_id": 7135}, "so_17090354_17099819_2": {"length": 14, "quality": 0.9333333333333333, "section_id": 7139}, "so_17090354_17099819_1": {"length": 17, "quality": 0.85, "section_id": 7135}}, "n3337": {"so_17090354_17099819_0": {"length": 19, "quality": 0.95, "section_id": 6879}, "so_17090354_17099819_2": {"length": 14, "quality": 0.9333333333333333, "section_id": 6883}, "so_17090354_17099819_1": {"length": 17, "quality": 0.85, "section_id": 6879}}, "n4659": {"so_17090354_17099819_0": {"length": 19, "quality": 0.95, "section_id": 8636}, "so_17090354_17099819_2": {"length": 14, "quality": 0.9333333333333333, "section_id": 8640}, "so_17090354_17099819_1": {"length": 17, "quality": 0.85, "section_id": 8636}}}, "17090859": {"Id": "17090859", "PostTypeId": "2", "Body": "<p>By adding an initialiser to the declaration, it becomes a definition of the global variable. It's equivalent to the same definition without <code>extern</code>, which is what your book means when it says it \"overrides the extern\".</p>\n<p>While global variables can be declared (using <code>extern</code>) inside a function, they cannot be defined there, only at namespace scope. That's why the second snippet is an error.</p>\n<p>If you want to know why the designers of C (whence these rules came to C++) chose to allow declarations but not definitions here, then I'm afraid I don't know the language's history in enough detail to answer.</p>\n", "LastEditorUserId": "204847", "LastActivityDate": "2013-06-13T15:32:00.300", "Score": "6", "CreationDate": "2013-06-13T15:19:23.910", "ParentId": "17090354", "CommentCount": "0", "OwnerUserId": "204847", "LastEditDate": "2013-06-13T15:32:00.300"}, "17090801": {"Id": "17090801", "PostTypeId": "2", "Body": "<p>The reason defining an external variable inside a function does not make sense is the following:</p>\n<p>When you declare a symbol extern, you are telling the compiler to link all such occurrences of this value into the same symbol.  Any occurences of extern int i; in your program would link to the externally defined i.  Look at this example:</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nextern int i;\nint i = 10;\nvoid test()\n{\n    std::cout &lt;&lt; \"Hi\" &lt;&lt; i &lt;&lt; std::endl;\n}\n\nint main()\n{\n    extern int i;\n    i++;\n    test();\n}\n</code></pre>\n<p>This example should output hi11.  HOwever, if we remove the extern inside main, it will output 10.  This is because without extern, i is not linking to the global i, but creating it's own local copy of i.  </p>\n<p>The reason that defining an extern i inside a function does not make sense, is what if we allowed any function to \"define\" i.  Which function runs first?  When does it get defined?</p>\n<p>Assume the following example to be valid, what would the output be???</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nextern int i;\nint i = 10;\nvoid test()\n{\n    std::cout &lt;&lt; \"Hi\" &lt;&lt; i &lt;&lt; std::endl;\n}\n\nvoid test2() {\n    extern int i = 1000;\n    std::cout&lt;&lt; \"HI\" &lt;&lt; i &lt;&lt; std::endl;\n}\n\nvoid test3() {\n    extern int i;\n    i = 1000;\n    std::cout&lt;&lt; \"HI\" &lt;&lt; i &lt;&lt; std::endl;\n}\n\nint main()\n{\n    extern int i;\n    i++;\n    test();\n    i = 0;\n    test2();\n}\n</code></pre>\n<p>Should the output of test2 be 0, or 1000?  Also look at my test3, here we are concisely saying, link my i to the externally defined i, and assign it's value as 1000.  This is very different from trying to \"initialize\" a value.</p>\n<p>In short, extern variables really only make sense as globals, and should be defined in global scope.  In your examples, the first version doesn't compile either for me.  I find this interesting.  It might be worth looking at the standards docs to see if this is defined concisely, or if your compiler might be handling this in a way designed to add additional protection... </p>\n", "LastEditorUserId": "1467304", "LastActivityDate": "2013-06-13T15:23:28.300", "Score": "14", "CreationDate": "2013-06-13T15:16:31.433", "ParentId": "17090354", "CommentCount": "1", "OwnerUserId": "1467304", "LastEditDate": "2013-06-13T15:23:28.300"}});