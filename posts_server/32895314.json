post_cb({"32899144": {"ParentId": "32895314", "CommentCount": "2", "Body": "<p>[temp.explicit]/p11:</p>\n<blockquote>\n<p id=\"so_32895314_32899144_0\">An entity that is the subject of an explicit instantiation declaration\n  and that is also used in a way that would otherwise cause an implicit\n  instantiation (14.7.1) in the translation unit shall be the subject of\n  an explicit instantiation definition somewhere in the program;\n  otherwise the program is ill-formed, no diagnostic required.</p>\n</blockquote>\n", "OwnerUserId": "2756719", "PostTypeId": "2", "Id": "32899144", "Score": "1", "CreationDate": "2015-10-02T01:15:47.253", "LastActivityDate": "2015-10-02T01:15:47.253"}, "32895314": {"CommentCount": "0", "ViewCount": "415", "CreationDate": "2015-10-01T19:23:36.893", "LastActivityDate": "2015-10-02T01:15:47.253", "Title": "Confusions around explicit template instantiation", "PostTypeId": "1", "Id": "32895314", "Score": "2", "Body": "<p>Well, I think I just get extremely confused by explicit template instantiation ~&gt;_&lt;~</p>\n<ol>\n<li>Could an explicit instantiation declaration exploit an implicit\ninstantiation definition?</li>\n<li>What if both explicit and implicit instantiation definitions exist\nin a program? Will they ultimately collapse into a single one?</li>\n<li>Does an explicit instantiation declaration have any effect when placed after an\nimplicit instantiation definition?</li>\n</ol>\n<p>Also, see the following code:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nstd::vector&lt;int&gt; a;  // Implicit instantiation definition.\n\n// Explicit instantiation declaration.\nextern template class std::vector&lt;int&gt;; \n\nint main() {\n  std::cout &lt;&lt; std::vector&lt;int&gt;().size();  // So what?\n}\n</code></pre>\n<p>It causes the link error </p>\n<pre><code>/tmp/ccQld7ol.o: In function `_GLOBAL__sub_I_a':\nmain.cpp:(.text.startup+0x6e): undefined reference to `std::vector&lt;int, std::allocator&lt;int&gt; &gt;::~vector()'\ncollect2: error: ld returned 1 exit status\n</code></pre>\n<p>with GCC 5.2, but builds fine with clang 3.6. Which one is correct according to the standard?</p>\n<p>I hope there is an insightful way to understand explicit template instantiation so that answers to all the questions above can be logically deduced and explained.</p>\n", "Tags": "<c++><templates><c++11><language-lawyer><explicit-instantiation>", "OwnerUserId": "1348273", "AnswerCount": "2"}, "32895507": {"ParentId": "32895314", "CommentCount": "2", "Body": "<p>First of all, it seems like you are overthinking explicit instantion. There is nothing special about it. All it does, it allows someone to use the templated function or class without having the template definition visible. It makes it so by creating an instance of function or class with template specified, so that it is no longer template but the actual usable thing. It can be used, for example, when you have a template class, but do want to hide the actual code in .cpp file which you never provide to the users - instead you give them the compiled .o file. To make it work, you can explicitly instantiate your template with the types you believe your users are going to need for the template arguments. (of course, this is a rare case when the set of types is known like this). There is nothing more to that.</p>\n<p>Implicit and explicit instantions for the same type can live together. Implicit instantiation will produce weak symbol, explicit one will produce the 'strong' symbol. Strong symbols override weaks symbols, and there is no violation of ODR. Everything will be OK.</p>\n<p>As for the error you have, you need to remove 'extern' from your explicit instantion.</p>\n", "OwnerUserId": "5245033", "PostTypeId": "2", "Id": "32895507", "Score": "0", "CreationDate": "2015-10-01T19:35:58.797", "LastActivityDate": "2015-10-01T19:35:58.797"}, "bq_ids": {"n4140": {"so_32895314_32899144_0": {"section_id": 260, "quality": 0.9583333333333334, "length": 23}}, "n3337": {"so_32895314_32899144_0": {"section_id": 251, "quality": 0.9583333333333334, "length": 23}}, "n4659": {"so_32895314_32899144_0": {"section_id": 267, "quality": 0.9583333333333334, "length": 23}}}});