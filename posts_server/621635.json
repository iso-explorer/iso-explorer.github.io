post_cb({"621655": {"CommentCount": "0", "CreationDate": "2009-03-07T10:40:16.693", "LastEditorUserId": "66692", "LastActivityDate": "2009-03-07T11:54:54.643", "ParentId": "621635", "PostTypeId": "2", "LastEditorDisplayName": "dirkgently", "LastEditDate": "2009-03-07T11:54:54.643", "Id": "621655", "Score": "15", "Body": "<p>In C++0x, <code>char16_t</code> and <code>char32_t</code> will be used to store UTF-16 and UTF-32 and not <code>wchar_t</code>.</p>\n<p>From the draft n2798:</p>\n<blockquote>\n<p id=\"so_621635_621655_0\"><strong>22.2.1.4 Class template codecvt</strong></p>\n<p id=\"so_621635_621655_1\">2 The class codecvt is for use when converting from one codeset to another, such as from wide characters to multibyte characters or between wide character encodings such as Unicode and\n  EUC.</p>\n<p id=\"so_621635_621655_2\">3 The specializations required in Table 76 (22.1.1.1.1) convert the implementation-\n  defined native character set. codecvt implements a degenerate\n  conversion; it does not convert at all. The specialization <code>codecvt&lt;char16_t, char, \n  mbstate_t&gt;</code> converts between the UTF-16 and UTF-8 encodings schemes, and the \n  specialization <code>codecvt &lt;char32_t, char, mbstate_t&gt;</code> converts between the UTF-32 and\n  UTF-8 encodings schemes. <code>codecvt&lt;wchar_t,char,mbstate_t&gt;</code> converts between the native \n  character sets for narrow and wide characters. Specializations on <code>mbstate_t</code> perform \n  conversion between encodings known to the library implementor. </p>\n<p id=\"so_621635_621655_3\">Other encodings can be converted by specializing on a user-defined stateT type. The stateT object can contain any state that is useful to communicate to or from the specialized do_in or\n  do_out members. </p>\n</blockquote>\n<p>The <em>thing</em> about <code>wchar_t</code> is that it does not give you any guarantees about the encoding used. It is a type that can hold a multibyte character. Period. If you are going to write software <em>now</em>, you have to live with this compromise. C++0x compliant compilers are yet a far cry. You can always give the VC2010 CTP and g++ compilers a try for what it is worth. Moreover, <code>wchar_t</code> has different sizes on different platforms which is another thing to watch out for (2 bytes on VS/Windows, 4 bytes on GCC/Mac and so on). There is then options like <code>-fshort-wchar</code> for GCC to further complicate the issue. </p>\n<p>The best solution therefore is to use an existing library. Chasing UNICODE bugs around isn't the best possible use of effort/time. I'd suggest you take a look at:</p>\n<ul>\n<li>GNU <a href=\"http://www.gnu.org/software/libiconv/\" rel=\"nofollow noreferrer\">libiconv</a></li>\n<li>IBM's <a href=\"http://www-01.ibm.com/software/globalization/icu/\" rel=\"nofollow noreferrer\">libicu</a></li>\n</ul>\n<p>More on C++0x Unicode string literals <a href=\"http://en.wikipedia.org/wiki/C%2B%2B0x#New_string_literals\" rel=\"nofollow noreferrer\">here</a></p>\n", "OwnerUserId": "66692", "OwnerDisplayName": "dirkgently"}, "621635": {"CommentCount": "0", "ViewCount": "3079", "PostTypeId": "1", "LastEditorUserId": "3204551", "CreationDate": "2009-03-07T10:25:03.067", "LastActivityDate": "2016-11-02T08:44:05.907", "AnswerCount": "2", "LastEditDate": "2016-11-02T08:44:05.907", "FavoriteCount": "3", "Title": "Does C++0x support std::wstring conversion to/from UTF-8 byte sequence?", "Id": "621635", "Score": "8", "Body": "<p>I saw that C++0x will add support for UTF-8, UTF-16 and UTF-32 literals. But what about conversions between the three representations ? </p>\n<p>I plan to use std::wstring everywhere in my code. But I also need to manipulate UTF-8 encoded data when dealing with files and network. Will C++0x provide also support for these operations ?</p>\n", "Tags": "<c++><c++11><unicode><utf-8><wstring>", "OwnerDisplayName": "chmike"}, "bq_ids": {"n4140": {"so_621635_621655_2": {"section_id": 6507, "quality": 0.7931034482758621, "length": 46}, "so_621635_621655_3": {"section_id": 6507, "quality": 0.9, "length": 18}, "so_621635_621655_1": {"section_id": 6505, "quality": 0.8571428571428571, "length": 18}}, "n3337": {"so_621635_621655_2": {"section_id": 6262, "quality": 0.8275862068965517, "length": 48}, "so_621635_621655_3": {"section_id": 6262, "quality": 0.95, "length": 19}, "so_621635_621655_1": {"section_id": 6260, "quality": 0.8571428571428571, "length": 18}}, "n4659": {"so_621635_621655_2": {"section_id": 7989, "quality": 0.7758620689655172, "length": 45}, "so_621635_621655_1": {"section_id": 7987, "quality": 0.8571428571428571, "length": 18}, "so_621635_621655_3": {"section_id": 7989, "quality": 0.9, "length": 18}}}, "625328": {"ParentId": "621635", "CommentCount": "3", "Body": "<p>Thank you dirkgently. I'm not yet registered, so I can't upvote or respond directly as a comment. </p>\n<p>I've learned something with codecvt. I knew about the libraries you suggest and the following resource may also be useful <a href=\"http://www.unicode.org/Public/PROGRAMS/CVTUTF/\" rel=\"nofollow noreferrer\">http://www.unicode.org/Public/PROGRAMS/CVTUTF/</a>.</p>\n<p>The project is for a library that should be open source. I would prefer minimizing the dependencies with external libraries. I already have a dependency with libgc and boost, though for the later I only use threads. I would really prefer to stick to the C++ standard and I'm a bit disappointed that GC supported has been somehow dropped.</p>\n<p>Apparently VC++ express 2008 is said to support most of the C++0x standard as well as icc. Since I currently develop with VC++ and it will still take some time until the library would be released, I'd like to give a try to use codecvt and char32_t strings. </p>\n<p>Does anyone know how to do this ? Should I post another question ? </p>\n", "OwnerUserId": "75517", "Id": "625328", "PostTypeId": "2", "OwnerDisplayName": "chmike", "Score": "0", "CreationDate": "2009-03-09T08:00:08.327", "LastActivityDate": "2009-03-09T08:00:08.327"}});