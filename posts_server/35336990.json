post_cb({"bq_ids": {"n4140": {"so_35336990_35337463_0": {"length": 11, "quality": 0.8461538461538461, "section_id": 629}, "so_35336990_35337463_1": {"length": 50, "quality": 0.9433962264150944, "section_id": 632}, "so_35336990_35336990_1": {"length": 6, "quality": 1.0, "section_id": 599}, "so_35336990_35337463_2": {"length": 17, "quality": 0.9444444444444444, "section_id": 388}}, "n3337": {"so_35336990_35337463_0": {"length": 11, "quality": 0.8461538461538461, "section_id": 620}, "so_35336990_35337463_1": {"length": 50, "quality": 0.9433962264150944, "section_id": 622}, "so_35336990_35336990_1": {"length": 6, "quality": 1.0, "section_id": 589}, "so_35336990_35337463_2": {"length": 17, "quality": 0.9444444444444444, "section_id": 379}}, "n4659": {"so_35336990_35337463_0": {"length": 11, "quality": 0.8461538461538461, "section_id": 655}, "so_35336990_35337463_1": {"length": 50, "quality": 0.9433962264150944, "section_id": 660}, "so_35336990_35336990_1": {"length": 6, "quality": 1.0, "section_id": 622}, "so_35336990_35337463_2": {"length": 17, "quality": 0.9444444444444444, "section_id": 405}}}, "35337463": {"Id": "35337463", "PostTypeId": "2", "Body": "<p>Yes, VS2013 is wrong in allowing the code to compile.</p>\n<p>The important rule is in <code>[over.ics.list]</code> (quote from N3337):</p>\n<blockquote>\n<p id=\"so_35336990_35337463_0\"><code>[over.ics.list]/1]:</code> When an argument is an initializer list (8.5.4), it is not an expression and special rules apply for converting\n  it to a parameter type.</p>\n<p id=\"so_35336990_35337463_1\"><code>[over.ics.list]/3]:</code> Otherwise, if the parameter is a non-aggregate class X and overload resolution per 13.3.1.7 chooses a single\n  best constructor of X to perform the initialization of an object of type X from the argument initializer list, the\n  implicit conversion sequence is a user-defined conversion sequence. If multiple constructors are viable but\n  none is better than the others, the implicit conversion sequence is the ambiguous conversion sequence. <strong>User-defined conversions are allowed for conversion of the initializer list elements to the constructor parameter\n  types except as noted in 13.3.3.1</strong>.</p>\n</blockquote>\n<p><code>13.3.3.1</code> outlines implicit conversion sequences, which references <code>[class.conv.ctor]</code> regarding user-defined conversions:</p>\n<blockquote>\n<p id=\"so_35336990_35337463_2\"><code>[class.conv.ctor]/1:</code> A constructor declared <strong>without the function-specifier explicit</strong> specifies a conversion from the types of its\n  parameters to the type of its class. Such a constructor is called a converting constructor.</p>\n</blockquote>\n<p>So the constructor must not be marked <code>explicit</code> if it should be used for this form of initialization.</p>\n", "LastActivityDate": "2016-02-11T10:58:21.187", "CommentCount": "0", "CreationDate": "2016-02-11T10:58:21.187", "ParentId": "35336990", "Score": "2", "OwnerUserId": "496161"}, "35336990": {"ViewCount": "69", "Body": "<p>I am using the following code in VS2013 and it compiles. </p>\n<pre><code>explicit QIcon(const QString &amp;fileName); // file or resource name\nvoid setWindowIcon(const QIcon &amp;icon);\n</code></pre>\n<p>I call the function like this:</p>\n<pre><code>setWindowIcon({ \"icon.png\" });\n</code></pre>\n<p>However in Clang 3.7.1 it fails with:</p>\n<blockquote>\n<p id=\"so_35336990_35336990_0\">error chosen constructor is explicit in copy-initialization</p>\n</blockquote>\n<p>I read in other questions that in the C++ standard, \u00a713.3.1.7 [over.match.list], the following is stated:</p>\n<blockquote>\n<p id=\"so_35336990_35336990_1\">In copy-list-initialization, if an explicit constructor is chosen, the\n  initialization is ill-formed.</p>\n</blockquote>\n<p>Is VS2013 wrong in allowing this code to compile?</p>\n", "AcceptedAnswerId": "35337463", "Title": "Copy list initialisation and explicit constructor allowed?", "CreationDate": "2016-02-11T10:39:27.880", "Id": "35336990", "CommentCount": "0", "LastEditDate": "2016-02-11T11:01:37.213", "PostTypeId": "1", "LastEditorUserId": "496161", "LastActivityDate": "2016-02-11T11:01:37.213", "Score": "1", "OwnerUserId": "2561947", "Tags": "<c++><c++11><visual-studio-2013><clang><language-lawyer>", "AnswerCount": "1"}});