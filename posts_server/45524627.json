post_cb({"45524654": {"ParentId": "45524627", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>Unlike C++, C requires static initializers to be constant. This will not compile in C, but will compile in C++:</p>\n<pre><code>int makeInitialValue() {\n    return 42;\n}\nstatic int val = makeInitialValue();\n</code></pre>\n<p>This is because C++ inserts special initialization code into your program to be executed before entering <code>main</code> for <code>static</code> variables outside of functions, or before entering a function for local statics. C does not do that, requiring instead that all <code>static</code> initializers be compile-time constants.</p>\n<p><strong>References:</strong></p>\n<p>C99 Standard, 6.7.8</p>\n<blockquote id=\"so_45524627_45524654_0\">\n<ol start=\"4\">\n<li>All the expressions in an initializer for an object that has static storage duration shall be constant expressions or string literals.</li>\n</ol>\n</blockquote>\n<p>C++11 Standard, 3.6.2</p>\n<blockquote>\n<p id=\"so_45524627_45524654_1\">Together, zero-initialization and constant initialization are called <em>static initialization</em>; all other initialization is <em>dynamic initialization</em>. It is implementation-defined whether the dynamic initialization of a non-local variable with static storage\n  duration is done before the first statement of main.</p>\n</blockquote>\n", "OwnerUserId": "335858", "LastEditorUserId": "335858", "LastEditDate": "2017-08-05T17:43:19.230", "Id": "45524654", "Score": "7", "CreationDate": "2017-08-05T17:28:40.107", "LastActivityDate": "2017-08-05T17:43:19.230"}, "45524627": {"CommentCount": "1", "ViewCount": "67", "PostTypeId": "1", "LastEditorUserId": "3980929", "CreationDate": "2017-08-05T17:25:40.020", "LastActivityDate": "2017-08-05T17:43:19.230", "Title": "local variable assigned to static variable;compile-error in 'c' but successful in c++", "AcceptedAnswerId": "45524654", "LastEditDate": "2017-08-05T17:28:49.720", "Id": "45524627", "Score": "-1", "Body": "<p>Here I tried one program in which local variable <strong>x</strong> is assigned to a static variable <strong>i</strong> and checked whether it assigns value or not.</p>\n<p>I did <strong>program in 'C'</strong>: It was obvious that it will give a <strong>compile time error( initializer element is not constant).</strong></p>\n<p>Then I implemented <strong>same program in C++</strong>: and this time <strong>I did not get compile time error</strong>, but output as \"equal\"(wasn't it supposed to give a compile time error as before).</p>\n<p>Please explain this.</p>\n<pre><code>int main() //C code\n{\n    int x=10;\n    static int i=x;\n    if(i==x)\n        printf(\"Equal\");\n    return 1;\n}\n\n\nint main() //C++ code\n{\n    int x=10;\n    static int i=x;\n    if(i==x)\n        cout&lt;&lt;\"equal\";\n    return 0;\n}\n</code></pre>\n", "Tags": "<c++><c>", "OwnerUserId": "7012486", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_45524627_45524654_1": {"section_id": 7151, "quality": 0.6538461538461539, "length": 17}}, "n3337": {"so_45524627_45524654_0": {"section_id": 5947, "quality": 0.6363636363636364, "length": 7}, "so_45524627_45524654_1": {"section_id": 6895, "quality": 0.6538461538461539, "length": 17}}, "n4659": {"so_45524627_45524654_0": {"section_id": 6789, "quality": 0.5454545454545454, "length": 6}, "so_45524627_45524654_1": {"section_id": 8652, "quality": 0.5384615384615384, "length": 14}}}});