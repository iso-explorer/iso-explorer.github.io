post_cb({"1790908": {"ParentId": "1790704", "CommentCount": "1", "Body": "<p>C++ Standard 13.1.3</p>\n<blockquote>\n<p id=\"so_1790704_1790908_0\">\u2014 Parameter declarations that differ\n  only in a pointer * versus an array []\n  are equivalent.  That is, the array\n  declaration is adjusted to become a\n  pointer declaration (8.3.5).  Only the\n  second and subsequent array dimensions\n  are significant in parameter types\n  (8.3.4).  [Example:</p>\n</blockquote>\n<pre><code> int f(char*);\n int f(char[]);  // same as f(char*);\n int f(char[7]);  // same as f(char*);\n int f(char[9]);  // same as f(char*);\n int g(char(*)[10]);\n int g(char[5][10]);  // same as g(char(*)[10]);\n int g(char[7][10]);  // same as g(char(*)[10]);\n int g(char(*)[20]);  // different from g(char(*)[10]);\n</code></pre>\n<blockquote>\n<p id=\"so_1790704_1790908_1\">\u2014end example]</p>\n</blockquote>\n", "OwnerUserId": "124161", "PostTypeId": "2", "Id": "1790908", "Score": "13", "CreationDate": "2009-11-24T15:45:15.867", "LastActivityDate": "2009-11-24T15:45:15.867"}, "1790773": {"ParentId": "1790704", "CommentCount": "2", "Body": "<p>There is no difference between your two codes, apart from the different style obviously. In both cases the array is passed by reference and not by value, as function parameters <code>type *x</code> and <code>type x[]</code> are semantically the same.</p>\n", "OwnerUserId": "214473", "PostTypeId": "2", "Id": "1790773", "Score": "3", "CreationDate": "2009-11-24T15:24:17.393", "LastActivityDate": "2009-11-24T15:24:17.393"}, "1790720": {"ParentId": "1790704", "PostTypeId": "2", "CommentCount": "8", "Body": "<p>When you use the type <code>char x[]</code> instead of <code>char *x</code> <strong>without initialization</strong>, you can consider them the same.   You cannot declare a new type as <code>char x[]</code> without initialization, but you can accept them as parameters to functions.  In which case they are the same as pointers. </p>\n<p>When you use the type <code>char x[]</code> instead of <code>char *x</code> <strong>with initialization</strong>, they are completely 100% different.</p>\n<hr>\n<p><strong>Example of how <code>char x[]</code> is different from <code>char *x</code>:</strong></p>\n<pre><code>char sz[] = \"hello\";\nchar *p = \"hello\";\n</code></pre>\n<p><code>sz</code> is actually an array, not a pointer. </p>\n<pre><code>assert(sizeof(sz) == 6);\nassert(sizeof(sz) != sizeof(char*)); \nassert(sizeof(p) == sizeof(char*));\n</code></pre>\n<hr>\n<p><strong>Example of how <code>char x[]</code> is the same as <code>char *x</code>:</strong></p>\n<pre><code>void test1(char *p)\n{\n  assert(sizeof(p) == sizeof(char*));\n}\n\nvoid test2(char p[])\n{\n  assert(sizeof(p) == sizeof(char*));\n}\n</code></pre>\n<hr>\n<p><strong>Coding style for passing to functions:</strong></p>\n<p>It really doesn't matter which one you do.  Some people prefer <code>char x[]</code> because it is clear that you want an array passed in, and not the address of a single element.</p>\n<p>Usually this is already clear though because you would have another parameter for the length of the array. </p>\n<hr>\n<p><strong>Further reading:</strong></p>\n<p>Please see this post entitled <a href=\"http://brianbondy.com/blog/id/91/\" rel=\"noreferrer\">Arrays are not the same as pointers!</a></p>\n</hr></hr></hr></hr>", "OwnerUserId": "3153", "LastEditorUserId": "3153", "LastEditDate": "2009-11-24T15:36:50.283", "Id": "1790720", "Score": "54", "CreationDate": "2009-11-24T15:15:29.923", "LastActivityDate": "2009-11-24T15:36:50.283"}, "1790821": {"ParentId": "1790704", "CommentCount": "0", "Body": "<p>The two expressions are equivalent.  They each evaluate to the address of the first element of the array arrayOfInt.</p>\n", "OwnerUserId": "204398", "PostTypeId": "2", "Id": "1790821", "Score": "-1", "CreationDate": "2009-11-24T15:33:02.790", "LastActivityDate": "2009-11-24T15:33:02.790"}, "1790704": {"CommentCount": "0", "AcceptedAnswerId": "1790720", "CreationDate": "2009-11-24T15:13:19.270", "LastActivityDate": "2009-11-24T17:19:36.520", "PostTypeId": "1", "ViewCount": "17720", "FavoriteCount": "9", "Title": "Difference between [square brackets] and *asterisk", "Id": "1790704", "Score": "24", "Body": "<p>If you write a C++ function like</p>\n<pre>\nvoid readEmStar( int *arrayOfInt )\n{\n}\n</pre>\n<p>vs a C++ function like:</p>\n<pre>\nvoid readEmSquare( int arrayOfInt[] )\n{\n}\n</pre>\n<p>What is the difference between using [square brackets] vs *asterisk, and does anyone have a style guide as to which is preferrable, assuming they are equivalent to the compiler?</p>\n<p>For completeness, an example</p>\n<pre><code>void readEmStar( int *arrayOfInt, int len )\n{\n  for( int i = 0 ; i &lt; len; i++ )\n    printf( \"%d \", arrayOfInt[i] ) ;\n  puts(\"\");\n}\n\n\nvoid readEmSquare( int arrayOfInt[], int len )\n{\n  for( int i = 0 ; i &lt; len; i++ )\n    printf( \"%d \", arrayOfInt[i] ) ;\n  puts(\"\");\n}\n\nint main()\n{\n  int r[] = { 2, 5, 8, 0, 22, 5 } ;\n\n  readEmStar( r, 6 ) ;\n  readEmSquare( r, 6 ) ;\n}\n</code></pre>\n", "Tags": "<c++><arrays><function>", "OwnerUserId": "111307", "AnswerCount": "5"}, "bq_ids": {"n4140": {"so_1790704_1790908_0": {"section_id": 558, "quality": 0.8, "length": 20}}, "n3337": {"so_1790704_1790908_0": {"section_id": 549, "quality": 0.8, "length": 20}}, "n4659": {"so_1790704_1790908_0": {"section_id": 581, "quality": 0.8, "length": 20}}}, "1791589": {"ParentId": "1790704", "CommentCount": "2", "Body": "<p>On the style question I'll stick my neck out and say int *arrayOfInt is better. Which ever syntax you use you are passing a pointer and the type should make that clear. </p>\n<p>This is just my opinion.</p>\n", "OwnerUserId": "38892", "PostTypeId": "2", "Id": "1791589", "Score": "1", "CreationDate": "2009-11-24T17:19:36.520", "LastActivityDate": "2009-11-24T17:19:36.520"}});