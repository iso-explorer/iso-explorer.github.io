post_cb({"bq_ids": {"n4140": {"so_24043802_24043802_0": {"section_id": 7117, "quality": 0.8928571428571429, "length": 25}}, "n3337": {"so_24043802_24043802_0": {"section_id": 6861, "quality": 0.8928571428571429, "length": 25}}, "n4659": {"so_24043802_24043802_0": {"section_id": 8618, "quality": 0.8928571428571429, "length": 25}}}, "24043885": {"ParentId": "24043802", "LastEditDate": "2014-06-04T18:08:00.350", "CommentCount": "3", "CreationDate": "2014-06-04T17:31:54.903", "OwnerUserId": "3064551", "LastEditorUserId": "3064551", "PostTypeId": "2", "Id": "24043885", "Score": "0", "Body": "<p>b is in global scope but it must be declare before where you are using it.\nlike </p>\n<pre><code>int b=6;\nnamespace A\n{\n    int a=::b; \n}\n</code></pre>\n<p><code>(N 3690 Draft)\n3.4.1 Unqualified name lookup\n4. A name used in global scope, outside of any function, class or user-declared namespace, shall be declared before its use in global scope.</code></p>\n", "LastActivityDate": "2014-06-04T18:08:00.350"}, "24043802": {"CommentCount": "5", "ViewCount": "78", "OwnerDisplayName": "user2953119", "CreationDate": "2014-06-04T17:27:30.847", "LastActivityDate": "2014-06-04T18:08:00.350", "Title": "Qualified name lookup in the name", "PostTypeId": "1", "Id": "24043802", "Score": "1", "Body": "<p>I want to understand the namespace qualified name lookup rule. I'm trying to do that on the example:</p>\n<pre><code>namespace A\n{\n    int a=::b; //error: \u2018::b\u2019 has not been declared\n}\nint b=6;\n</code></pre>\n<p>There is a quote which I rely in my reasoning (3.4.3.2/2 N3797):</p>\n<blockquote>\n<p id=\"so_24043802_24043802_0\">For a namespace X and name m, the namespace-qualified lookup set S(X,\n  m) is defined as follows: Let S (X, m) be the <strong>set of all declarations\n  of m in X</strong> and the inline namespace set of X (7.3.1). If S (X, m) is\n  not empty, S(X, m) is S (X, m); otherwise, S(X, m) is the union of\n  S(Ni , m) for all namespaces Ni nominated by using-directives in X and\n  its inline namespace set.</p>\n</blockquote>\n<p>Let <code>X</code> be a global scope. We have that <code>S(X,b)={int b=6}</code>. This implies that name lookup must be success. But in fact, the program is ill-formed. Might I don't understood this rule correctly?</p>\n", "Tags": "<c++><namespaces><qualified-name>", "AnswerCount": "1"}});