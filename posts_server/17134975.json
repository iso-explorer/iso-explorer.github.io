post_cb({"bq_ids": {"n4140": {"so_17134975_17135093_4": {"length": 19, "quality": 0.8260869565217391, "section_id": 7146}, "so_17134975_17135093_1": {"length": 9, "quality": 1.0, "section_id": 7149}, "so_17134975_17135093_0": {"length": 20, "quality": 1.0, "section_id": 5454}}, "n3337": {"so_17134975_17135093_4": {"length": 19, "quality": 0.8260869565217391, "section_id": 6890}, "so_17134975_17135093_1": {"length": 9, "quality": 1.0, "section_id": 6893}}, "n4659": {"so_17134975_17135093_4": {"length": 19, "quality": 0.8260869565217391, "section_id": 8647}, "so_17134975_17135093_0": {"length": 20, "quality": 1.0, "section_id": 6880}}}, "17134975": {"ViewCount": "833", "Body": "<p>Will I be able to do the following for the main function in C++1y (C++14):</p>\n<pre><code>auto main()\n{\n    // ...\n}\n</code></pre>\n<p>So will the return type automatically be <code>int</code> even though we don't need to use an explicit <code>return 0;</code>?</p>\n", "AcceptedAnswerId": "17135093", "Title": "Will automatic return type deduction work for main?", "CreationDate": "2013-06-16T15:45:21.737", "Id": "17134975", "CommentCount": "11", "LastEditDate": "2013-06-25T17:41:58.317", "PostTypeId": "1", "LastEditorUserId": "962089", "LastActivityDate": "2014-06-09T23:02:44.667", "Score": "27", "OwnerUserId": "1594090", "Tags": "<c++><c++14>", "AnswerCount": "1"}, "17135093": {"Id": "17135093", "PostTypeId": "2", "Body": "<p>No, it won't be allowed. Paragraph 7.1.6.4/10 of the C++14 Standard Draft N3690 specifies:</p>\n<blockquote>\n<p id=\"so_17134975_17135093_0\">If a function with a declared return type that uses a placeholder type has no <code>return</code> statements, the return\n  type is deduced as though from a <code>return</code> statement with no operand at the closing brace of the function\n  body. [...]</p>\n</blockquote>\n<p>This means that omitting a <code>return</code> statement in <code>main()</code> would make its type <code>void</code>.</p>\n<p>The special rule introduced by paragraph 3.6.1/5 about flowing off the end of <code>main()</code> specifies:</p>\n<blockquote>\n<p id=\"so_17134975_17135093_1\">[...] If control reaches the end\n  of <code>main</code> without encountering a <code>return</code> statement, the effect is that of executing</p>\n<pre><code>return 0;\n</code></pre>\n</blockquote>\n<p>The wording says that the \"effect\" during the <em>execution</em> of the program is the same as though a <code>return 0</code> was present, not that a <code>return</code> statement will be added to the program (which would affect type deduction according to the quoted paragraph).</p>\n<p><strong>EDIT:</strong></p>\n<p>There is a <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1669\" rel=\"nofollow noreferrer\">Defect Report</a> for this (<a href=\"https://stackoverflow.com/questions/17134975/will-automatic-return-type-deduction-work-for-main/17135093?noredirect=1#comment37231162_17135093\">courtesy of Johannes Schaub</a>):</p>\n<blockquote>\n<p id=\"so_17134975_17135093_2\">Proposed resolution (November, 2013):</p>\n<p id=\"so_17134975_17135093_3\">Change 3.6.1 [basic.start.main] paragraph 2 as follows:</p>\n<p id=\"so_17134975_17135093_4\">An implementation shall not predefine the main function. This function shall not be overloaded. It shall have a <strong>declared</strong> return type of type int, but otherwise its type is implementation-defined. <s>All implementations</s> <strong>An implementation</strong> shall allow both</p>\n<ul>\n<li>a function of <code>()</code> returning <code>int</code> and</li>\n<li>a function of (<code>int</code>, pointer to pointer to <code>char</code>) returning <code>int</code></li>\n</ul>\n<p id=\"so_17134975_17135093_5\">as the type...</p>\n</blockquote>\n", "LastEditorUserId": "-1", "LastActivityDate": "2014-06-09T23:02:44.667", "Score": "23", "CreationDate": "2013-06-16T15:56:50.287", "ParentId": "17134975", "CommentCount": "14", "OwnerUserId": "1932150", "LastEditDate": "2017-05-23T12:22:59.840"}});