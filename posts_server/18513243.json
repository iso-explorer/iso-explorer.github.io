post_cb({"18513426": {"ParentId": "18513243", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>From the standard :</p>\n<blockquote>\n<p id=\"so_18513243_18513426_0\"><strong>16.3.2 The # operator [cpp.stringize]</strong></p>\n<p id=\"so_18513243_18513426_1\">A <em>character string literal</em> is a <em>string-literal</em> with no prefix. If, <strong>in the replacement list</strong>, a parameter is immediately <strong>preceded by a <code>#</code> preprocessing token</strong>, both are replaced by a single character string literal preprocessing token that contains the spelling of the preprocessing token sequence for the corresponding argument.</p>\n</blockquote>\n<p>It means that:</p>\n<pre><code>#define VALUE_CHAR(value)    #value, value\nVALUE_CHAR(some_value)\n</code></pre>\n<p>Will be expanded to :</p>\n<pre><code>\"some_value\", some_value\n</code></pre>\n<p>by the preprocessor.</p>\n<hr>\n<p>For example, the famous BOOST Library uses this operator to stringize token :</p>\n<pre><code>#define BOOST_STRINGIZE(X) BOOST_DO_STRINGIZE(X)\n#define BOOST_DO_STRINGIZE(X) #X\n</code></pre>\n<p>An example of the usage in the Test library:</p>\n<pre><code>#define BOOST_AUTO_TEST_SUITE( suite_name )                             \\\nnamespace suite_name {                                                  \\\n  TheFunction( BOOST_STRINGIZE( suite_name ) );                         \\\n//             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n// ...\n\nBOOST_AUTO_TEST_SUITE( MyTest );\n</code></pre>\n<p>Will be expanded to:</p>\n<pre><code>namespace MyTest {\n    TheFunction( \"MyTest\" );\n//               ^^^^^^^^\n</code></pre>\n</hr>", "OwnerUserId": "1394283", "LastEditorUserId": "1394283", "LastEditDate": "2013-08-29T14:28:27.463", "Id": "18513426", "Score": "3", "CreationDate": "2013-08-29T14:15:41.500", "LastActivityDate": "2013-08-29T14:28:27.463"}, "18513287": {"ParentId": "18513243", "PostTypeId": "2", "CommentCount": "7", "Body": "<p>Stringification.  See <a href=\"http://gcc.gnu.org/onlinedocs/cpp/Stringification.html\" rel=\"nofollow\">this</a> page.</p>\n<p>So</p>\n<pre><code>VALUE_CHAR(1)\n</code></pre>\n<p>expands to:</p>\n<pre><code>\"1\", 1\n</code></pre>\n<p>You might use this kind of macro to simplify initialization of an array, for example:</p>\n<pre><code>#define MYDEF(x) { #x, x }\n\nstatic struct {\n    const char *str;\n    int num;\n} values[] = {\n    MYDEF(1),\n    MYDEF(2),\n    MYDEF(3)\n};\n</code></pre>\n", "OwnerUserId": "299924", "LastEditorUserId": "299924", "LastEditDate": "2013-08-29T14:21:59.203", "Id": "18513287", "Score": "7", "CreationDate": "2013-08-29T14:10:05.017", "LastActivityDate": "2013-08-29T14:21:59.203"}, "bq_ids": {"n4140": {"so_18513243_18513426_1": {"section_id": 526, "quality": 0.9629629629629629, "length": 26}}, "n3337": {"so_18513243_18513426_1": {"section_id": 517, "quality": 0.9629629629629629, "length": 26}}, "n4659": {"so_18513243_18513426_1": {"section_id": 547, "quality": 0.9629629629629629, "length": 26}}}, "18513243": {"CommentCount": "3", "ViewCount": "220", "PostTypeId": "1", "ClosedDate": "2013-08-29T15:35:02.513", "LastEditorUserId": "1948578", "CreationDate": "2013-08-29T14:08:17.167", "LastActivityDate": "2013-08-29T14:28:27.463", "Title": "What it means #value in a macro", "AcceptedAnswerId": "18513287", "LastEditDate": "2013-08-29T14:10:20.313", "Id": "18513243", "Score": "2", "Body": "<p>I found the below macro in an SDK sample program. What #value is meant for in this context?</p>\n<pre><code>#define VALUE_CHAR(value)       #value, value\n</code></pre>\n<p>It may be silly question. But I am not clear why it is ued. Can anyone help me?</p>\n<p>Thanks in advamce</p>\n", "Tags": "<c++><c++11>", "OwnerUserId": "1948578", "AnswerCount": "2"}});