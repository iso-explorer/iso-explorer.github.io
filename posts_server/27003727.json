post_cb({"27003727": {"CommentCount": "5", "AcceptedAnswerId": "27049038", "PostTypeId": "1", "LastEditorUserId": "3647361", "CreationDate": "2014-11-18T20:49:16.793", "LastActivityDate": "2016-03-17T00:21:04.627", "LastEditDate": "2016-03-17T00:19:06.863", "ViewCount": "777", "FavoriteCount": "3", "Title": "Does this really break strict-aliasing rules?", "Id": "27003727", "Score": "16", "Body": "<p>When I compile this sample code using g++, I get this warning:</p>\n<blockquote>\n<p id=\"so_27003727_27003727_0\">warning: dereferencing type-punned pointer will break strict-aliasing rules <code>[-Wstrict-aliasing]</code></p>\n</blockquote>\n<p>The code:</p>\n<pre><code>#include &lt;iostream&gt;\n\nint main() \n{\n   alignas(int) char data[sizeof(int)];\n   int *myInt = new (data) int;\n   *myInt = 34;\n\n   std::cout &lt;&lt; *reinterpret_cast&lt;int*&gt;(data);\n}\n</code></pre>\n<p>In this case, doesn't <code>data</code> alias an int, and therefore casting it back to an int would not violate strict aliasing rules? Or am I missing something here?</p>\n<p>Edit: Strange, when I define <code>data</code> like this:</p>\n<pre><code>alignas(int) char* data = new char[sizeof(int)];\n</code></pre>\n<p>The compiler warning goes away. Does the stack allocation make a difference with strict aliasing? Does the fact that it's a <code>char[]</code> and not a <code>char*</code> mean it can't actually alias any type?</p>\n", "Tags": "<c++><language-lawyer><strict-aliasing>", "OwnerUserId": "2817371", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_27003727_27049038_0": {"section_id": 7195, "quality": 1.0, "length": 52}}, "n3337": {"so_27003727_27049038_0": {"section_id": 6939, "quality": 1.0, "length": 52}}, "n4659": {"so_27003727_27049038_1": {"section_id": 8704, "quality": 0.7368421052631579, "length": 14}, "so_27003727_27049038_0": {"section_id": 8704, "quality": 1.0, "length": 52}}}, "27049038": {"ParentId": "27003727", "PostTypeId": "2", "CommentCount": "10", "Body": "<p>The warning is absolutely justified. The decayed pointer to <code>data</code> does  <strong>not point to an object of type <code>int</code></strong>, and casting it doesn't change that. See <a href=\"http://eel.is/c++draft/basic.life#7\">[basic.life]/7</a>:</p>\n<blockquote>\n<p id=\"so_27003727_27049038_0\">If, after the lifetime of an object has ended and before the storage\n  which the object occupied is reused or released, a new object is\n  created at the storage location which the original object occupied, <strong>a\n  pointer that pointed to the original object</strong>, a reference that referred\n  to the original object, or <strong>the name of the original object will\n  automatically refer to the new object</strong> and, once the lifetime of the\n  new object has started, can be used to manipulate the new object, <strong>if</strong>:<br>\n  (7.1) \u2014 [..]<br> (7.2) \u2014 <strong>the new object is of the same type as the\n  original object (ignoring the top-level cv-qualifiers)</strong>,</br></br></p>\n</blockquote>\n<p>The new object is not an array of <code>char</code>, but an <code>int</code>. <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0137r0.html\"><strong>P0137</strong></a>, which formalizes the notion of pointing, adds <code>launder</code>:</p>\n<blockquote>\n<p id=\"so_27003727_27049038_1\">[ <em>Note</em>: If these conditions are not met, a pointer to the new object\n  can be obtained from a pointer that represents the address of its\n  storage by calling <code>std::launder</code> (18.6 [support.dynamic]). \u2014 <em>end note</em>\n  ]</p>\n</blockquote>\n<p>I.e. your snippet can be corrected thusly:</p>\n<pre><code>std::cout &lt;&lt; *std::launder(reinterpret_cast&lt;int*&gt;(data));\n</code></pre>\n<p>.. or just initialize a new pointer from the result of placement new, which also removes the warning.</p>\n", "OwnerUserId": "3647361", "LastEditorUserId": "3647361", "LastEditDate": "2016-03-17T00:21:04.627", "Id": "27049038", "Score": "11", "CreationDate": "2014-11-20T20:33:59.260", "LastActivityDate": "2016-03-17T00:21:04.627"}});