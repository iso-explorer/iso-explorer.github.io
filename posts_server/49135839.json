post_cb({"bq_ids": {"n4140": {"so_49135839_49136178_0": {"length": 34, "quality": 0.918918918918919, "section_id": 398}}, "n3337": {"so_49135839_49136178_0": {"length": 34, "quality": 0.918918918918919, "section_id": 389}}, "n4659": {"so_49135839_49136178_0": {"length": 34, "quality": 0.918918918918919, "section_id": 415}}}, "49136178": {"Id": "49136178", "PostTypeId": "2", "Body": "<p>Yes, you can certainly and safely call non-const functions from destructor. Standard explicitly allows this:</p>\n<blockquote>\n<p id=\"so_49135839_49136178_0\">15.4/2 A destructor is used to destroy objects of its class type. The address\n  of a destructor shall not be taken. A destructor can be invoked for a\n  const, volatile or const volatile object. const and volatile semantics\n  ([dcl.type.cv]) are not applied on an object under destruction. They\n  stop being in effect when the destructor for the most derived object\n  starts.</p>\n</blockquote>\n", "LastActivityDate": "2018-03-06T16:57:26.340", "Score": "12", "CreationDate": "2018-03-06T16:57:26.340", "ParentId": "49135839", "CommentCount": "0", "OwnerUserId": "5245033"}, "49135839": {"ViewCount": "259", "Body": "<p>I searched for the answer to this question and wasn't able to find one. Consider the following code:</p>\n<pre><code>struct Foo\n{\n    int *bar;\n    Foo(int barValue) : bar(new int(barValue)) {}\n    ~Foo() { do_this(); }\n    void do_this() { delete bar; bar = nullptr; }\n};\n\nint main()\n{\n    const Foo foo(7);\n}\n</code></pre>\n<p><code>do_this()</code> cannot be called on a <code>const</code> object, so I couldn't do something like <code>foo.do_this()</code>. It would also make sense in some situations to call <code>do_this()</code> outside of the destructor, which is why I don't want to simply include the code in the destructor definition. Because <code>do_this()</code> modifies a member variable, I can't declare it as <code>const</code>.</p>\n<p>My question is: will the destructor be able to call <code>do_this()</code> on a <code>const</code> object when the object is destroyed?</p>\n<p>I tried it and received no errors, but I want to make sure I'm not causing a memory leak once my program terminates.</p>\n", "AcceptedAnswerId": "49136178", "Title": "Can a destructor call a non-const function on a const object?", "CreationDate": "2018-03-06T16:38:41.260", "LastActivityDate": "2018-03-06T16:57:26.340", "CommentCount": "9", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2018-03-06T16:56:00.000", "LastEditorUserId": "5245033", "Id": "49135839", "Score": "12", "OwnerUserId": "7595618", "Tags": "<c++><const><language-lawyer><destructor>", "AnswerCount": "1"}});