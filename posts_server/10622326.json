post_cb({"10622387": {"LastActivityDate": "2012-05-16T16:07:04.323", "ParentId": "10622326", "Id": "10622387", "Score": "0", "Body": "<p>if it's just an <code>int</code>, then no - it will not throw.</p>\n<p>if it's something more complex, such as a vector, then it may throw for a number of reasons (e.g. allocation failure or alteration from a secondary thread).</p>\n", "CommentCount": "1", "PostTypeId": "2", "OwnerUserId": "191596", "CreationDate": "2012-05-16T16:07:04.323"}, "10622326": {"ViewCount": "485", "AcceptedAnswerId": "10622417", "Tags": "<c++><exception><try-catch>", "AnswerCount": "5", "OwnerUserId": "1353876", "Body": "<p>Given code like the following:</p>\n<pre><code>void f()\n{\n   int i;\n   i = 0;\n}\n</code></pre>\n<p>is it possible the system could throw an exception due to the simple assignment?</p>\n<p>[Edit: For Those saying, \"No an exception cannot occur,\" can You point Me in the direction of the part of the C++ standard which says this? I am having trouble finding it.]</p>\n", "CommentCount": "2", "PostTypeId": "1", "CreationDate": "2012-05-16T16:03:05.457", "FavoriteCount": "0", "LastActivityDate": "2012-05-16T17:04:56.733", "Id": "10622326", "LastEditorUserId": "280314", "Title": "Can a literal assignment to int in C++ throw an exception?", "Score": "5", "LastEditDate": "2012-05-16T16:53:03.627"}, "10622491": {"LastActivityDate": "2012-05-16T16:25:07.027", "LastEditorUserId": "168175", "ParentId": "10622326", "LastEditDate": "2012-05-16T16:25:07.027", "Id": "10622491", "Score": "6", "Body": "<p>There's quite a lot of things that look like assignments that can throw one way or another:</p>\n<pre><code>int operator\"\" _t(const char *) { throw 0; } // C++11 user defined literal \n\nstruct foo {\n  foo(int) { throw 0; }\n  operator int() { throw 0; }\n  foo&amp; operator=(int) { throw 0; }\n};\n\nint main() {\n  int i;\n  i = 0; // can't throw\n  i = 0_t; // User defined literal throws\n  foo f = 0; // Constructor throws\n  i = f; // conversion operator throws\n  f = 0; // assignment throws\n  f = f; // both conversion and assignment would like to throw\n}\n</code></pre>\n<p>(including the new one from C++11)</p>\n", "CommentCount": "0", "PostTypeId": "2", "OwnerUserId": "168175", "CreationDate": "2012-05-16T16:13:25.050"}, "bq_ids": {"n3337": {"so_10622326_10622417_0": {"section_id": 3201, "quality": 1.0, "length": 6}}}, "10622823": {"LastActivityDate": "2012-05-16T16:33:35.153", "ParentId": "10622326", "Id": "10622823", "Score": "3", "Body": "<p>If you're concerned about assinging <code>0</code> (which has type <code>int</code>) to an\n<code>int</code>, \u00a75.17 of the standard specifies very exactly the semantics of the\nassignment operation, and there is no case where an exception can occur.\nIf you're concerned about assigning an arbitrary expression to an <code>int</code>,\n\u00a75.17 says that \u201cthe expression is implicitly converted to the\ncv-unqualified type of the left operand.\"  Depending on the actual type\nof the right operand: </p>\n<ul>\n<li><p>If it is an integral type, if the actual value cannot be represented in an <code>int</code>, the results are implementation defined (the C standard is more explicit: it must either result in an <code>int</code> with an implementation defined value, or you will get an implementation defined signal)</p></li>\n<li><p>If it is a floating point value, the result is undefined behavior if the value after truncation to zero cannot be represented in an <code>int</code>, the behavior is undefined (so you might get an exception)</p></li>\n<li><p>If it is a user defined type, then a user defined conversion operator will be called.  Which can throw an exception.</p></li>\n</ul>\n<p>If you're concerned about assigning other types: for each set of\nnon-class types, there is a list of rules like the above, but the only\npossible exceptions will be as a result of a type conversion.  For class\ntypes, the <code>operator=</code> will be used.  Which can throw an exception,\ndepending on what is in it.</p>\n", "CommentCount": "0", "PostTypeId": "2", "OwnerUserId": "649665", "CreationDate": "2012-05-16T16:33:35.153"}, "10622395": {"LastActivityDate": "2012-05-16T16:14:08.147", "LastEditorUserId": "809387", "ParentId": "10622326", "LastEditDate": "2012-05-16T16:14:08.147", "Id": "10622395", "Score": "2", "Body": "<p>It can throw an exception only in one case: when overloaded <code>operator=()</code> for those two types throws; similary, when conversion is needed, the converting constructor or <code>operator T()</code> can also throw. It depends on the exact implementation then - to find out if it will throw, look for information about it in documentation of library you are using.</p>\n", "CommentCount": "0", "PostTypeId": "2", "OwnerUserId": "809387", "CreationDate": "2012-05-16T16:07:25.890"}, "10622417": {"LastActivityDate": "2012-05-16T17:04:56.733", "LastEditorUserId": "179910", "ParentId": "10622326", "LastEditDate": "2012-05-16T17:04:56.733", "Id": "10622417", "Score": "7", "Body": "<p>Although you'd probably be hard put to find an assurance of it in the standard, a simple rule of thumb is that anything that's legitimate in C probably can't throw. [Edit: The closest I'm aware of to a direct statement to this effect is at \u00a715/2, which says that:</p>\n<blockquote>\n<p id=\"so_10622326_10622417_0\">Code that executes a <em>throw-expression</em> is said to \u201cthrow an exception;\u201d [...] </p>\n</blockquote>\n<p>Looking at that in reverse, code that does not execute a throw-expression does not throw an exception.]</p>\n<p>Throwing is basically restricted to two possibilities: the first is invoking UB. The second is doing something unique to C++, such as assigning to a user-defined type which overloads <code>operator =</code>, or using a <code>new</code> expression.</p>\n<p>Edit: As far as an assignment goes, there are quite a few ways it can throw. Obviously, throwing in the assignment operator itself would do it, but there are a fair number of others. Just for example, if the source type doesn't match the target type, you might get a conversion via a cast operator in the source or a constructor in the target -- either of which might throw. </p>\n", "CommentCount": "5", "PostTypeId": "2", "OwnerUserId": "179910", "CreationDate": "2012-05-16T16:08:35.467"}});