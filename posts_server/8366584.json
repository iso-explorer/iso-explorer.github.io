post_cb({"8366584": {"CommentCount": "0", "AcceptedAnswerId": "8366618", "CreationDate": "2011-12-03T08:48:19.717", "LastActivityDate": "2011-12-03T08:55:38.227", "PostTypeId": "1", "ViewCount": "3991", "FavoriteCount": "1", "Title": "Is public usage of private typedef portable?", "Id": "8366584", "Score": "18", "Body": "<pre><code>class Settings\n{\nprivate:\n    typedef std::map&lt;std::string, SettingsOption&gt; OptionMap;\n\npublic:\n    typedef OptionMap::iterator iterator;\n    typedef OptionMap::const_iterator const_iterator;\n\n    ...\n};\n</code></pre>\n<p>Is this code portable? What does the standard state about it?</p>\n", "Tags": "<c++><typedef>", "OwnerUserId": "727696", "AnswerCount": "1"}, "8366618": {"ParentId": "8366584", "CommentCount": "0", "CreationDate": "2011-12-03T08:55:38.227", "OwnerUserId": "19563", "PostTypeId": "2", "Id": "8366618", "Score": "24", "Body": "<p>It's legal and <code>Settings::iterator</code> and <code>Settings::const_iterator</code> are accessible to all users of the <code>Settings</code> class.</p>\n<p>Access control in C++ is applied purely to names. There's a note and example in ISO/IEC 14882:2011 11 [class.access]/4 that makes it clear that this is the intention.</p>\n<blockquote>\n<p id=\"so_8366584_8366618_0\">[...] [ <em>Note:</em> Because access control applies to names, if access control is\n  applied to a typedef name, only the accessibility of the typedef name itself is considered. The accessibility\n  of the entity referred to by the typedef is not considered. For example,</p>\n</blockquote>\n<pre><code>class A {\n  class B { };\npublic:\n  typedef B BB;\n};\n\nvoid f() {\n  A::BB x; // OK, typedef name A::BB is public\n  A::B y; // access error, A::B is private\n}\n</code></pre>\n<blockquote>\n<p id=\"so_8366584_8366618_1\">\u2014<em>end note</em> ]</p>\n</blockquote>\n", "LastActivityDate": "2011-12-03T08:55:38.227"}, "bq_ids": {"n4140": {"so_8366584_8366618_0": {"section_id": 6667, "quality": 0.8636363636363636, "length": 19}}, "n3337": {"so_8366584_8366618_0": {"section_id": 6422, "quality": 0.8636363636363636, "length": 19}}, "n4659": {"so_8366584_8366618_0": {"section_id": 8142, "quality": 0.8636363636363636, "length": 19}}}});