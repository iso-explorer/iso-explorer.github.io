post_cb({"26375498": {"ParentId": "26333381", "CommentCount": "0", "Body": "<p>To be more specific I'll provide a normative reference relates to the question: <code>[N3797:8.5.2/1 [dcl.init.string]</code> says:</p>\n<blockquote>\n<p id=\"so_26333381_26375498_0\">An array of narrow character type (3.9.1), char16_t array, char32_t\n  array, or wchar_t array can be initialized by a narrow string literal,\n  char16_t string literal, char32_t string literal, or wide string\n  literal, respectively, or by an appropriately-typed string literal\n  enclosed in braces (2.14.5). Successive characters of the value of the\n  string literal initialize the elements of the array.</p>\n</blockquote>\n<p>8.5.2/2:</p>\n<blockquote>\n<p id=\"so_26333381_26375498_1\">There shall not be more initializers than there are array elements.</p>\n</blockquote>\n<p>In the case of</p>\n<pre><code>#include &lt;iostream&gt;\n\nchar cp[] = \"LATINICA_\u041a\u0418\u0420\u0418\u041b\u041b\u0418\u0426\u0410\";\n\nint main()\n{\n    std::cout &lt;&lt; sizeof(cp) &lt;&lt; std::endl; //28\n}\n</code></pre>\n<p><strong><a href=\"http://coliru.stacked-crooked.com/a/fe11227939f9816c\" rel=\"nofollow\">DEMO</a></strong></p>\n", "Id": "26375498", "PostTypeId": "2", "OwnerDisplayName": "user2953119", "Score": "0", "CreationDate": "2014-10-15T06:00:54.677", "LastActivityDate": "2014-10-15T06:00:54.677"}, "26334060": {"ParentId": "26333381", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>It depends what encoding you decide to use.  Any single UTF-8 value can be held in an 8-bit <code>char</code> (though one Unicode code-point can take several <code>char</code> values to represent).  It's impossible to tell from your question, but I'd guess that your editor and compiler are treating your strings as UTF-8 and that's fine if that's what you want.</p>\n<p>Other common encodings include UTF-16, UTF-32, UCS-2 and UCS-4, which have 2-byte, 4-byte, 2-byte and 4-byte values respectively.  You can't store these values in an 8-bit <code>char</code>.</p>\n<p>The decision of what encoding to use for any given purpose is not straightforward.  The main considerations are:</p>\n<ul>\n<li>What other systems does your code have to interface to and what encoding do they use?</li>\n<li>What libraries do you want to use and what encodings do they use? (eg xerces-c uses UTF-16 throughout)</li>\n<li>The tradeoff between complexity and storage size.  UTF-32 and UCS-4 have the useful property that every possible displayed character is represented by one value, so you can tell the length of the string from how much memory it takes up without having to look at the values in it (though this assumes that you consider combining diacretic marks as separate characters).  However, if all you're representing is ASCII, they take up four times as much memory as UTF-8.</li>\n</ul>\n<p>I'd suggest <a href=\"http://www.joelonsoftware.com/articles/Unicode.html\" rel=\"nofollow\">Joel Spolsky's essay on Unicode</a> as a good read.</p>\n<p><code>wchar_t</code> has its own problems, though.  The standard didn't specify how big a <code>wchar_t</code> is, so, of course, different compilers have picked different sizes; VC++ used two bytes and gcc (and most others) use four bytes.  Wide-character literals, such as <code>L\"Hello, world,\"</code> are similarly confused, being UTF-16 strings in VC++ and UCS-4 in gcc.</p>\n<p>To try to clean this up, C++11 introduced two new character types:</p>\n<ul>\n<li><code>char16_t</code> is a character guaranteed to be 16-bits, and with a literal form <code>u\"Hello, world.\"</code></li>\n<li><code>char32_t</code> is a character guaranteed to be 32-bits, and with a literal form <code>U\"Hello, world.\"</code></li>\n</ul>\n<p>However, these have problems of their own; in particular, <code>&lt;iostream&gt;</code> doesn't provide console streams that can handle them (ie there is no <code>u16cout</code> or <code>u32cerr</code>).</p>\n", "OwnerUserId": "274460", "LastEditorUserId": "274460", "LastEditDate": "2014-10-13T06:40:21.860", "Id": "26334060", "Score": "1", "CreationDate": "2014-10-13T06:24:23.570", "LastActivityDate": "2014-10-13T06:40:21.860"}, "26333381": {"CommentCount": "3", "AcceptedAnswerId": "26334119", "OwnerDisplayName": "user2953119", "CreationDate": "2014-10-13T05:24:57.240", "LastActivityDate": "2014-10-15T06:00:54.677", "PostTypeId": "1", "ViewCount": "218", "FavoriteCount": "1", "Title": "Understanding wchar_t type in c++", "Id": "26333381", "Score": "0", "Body": "<p>The Standard says <code>N3797::3.9.1  [basic.fundamental]</code>:</p>\n<blockquote>\n<p id=\"so_26333381_26333381_0\">Type <code>wchar_t</code> is a distinct type whose values can represent distinct\n  codes for all members of the largest extended character set specified\n  among the supported locales (22.3.1).</p>\n</blockquote>\n<p>I can't imagine how we can use that type. Could you give an example where plain <code>char</code> isn't working? I thought it may be helpful if we use two different language simultaneously. But plain char is Ok in case for <code>cyrillic</code> and <code>latinica</code></p>\n<pre><code>#include &lt;iostream&gt;\n\nchar cp[] = \"LATINICA_\u041a\u0418\u0420\u0418\u041b\u041b\u0418\u0426\u0410\";\n\nint main()\n{\n    std::cout &lt;&lt; cp; //LATINICA_\u041a\u0418\u0420\u0418\u041b\u041b\u0418\u0426\u0410\n}\n</code></pre>\n<p><strong><a href=\"http://coliru.stacked-crooked.com/a/7f2823013c8b6c02\" rel=\"nofollow\">DEMO</a></strong></p>\n", "Tags": "<c++><encoding>", "AnswerCount": "4"}, "26333806": {"ParentId": "26333381", "CommentCount": "1", "Body": "<p>for some language, like English, it's not necessary to use wchar_t.but some language, like Chinese, you'd better use wchar_t.\nalthough char is able to store string, like<code>char p[] = \"\u4f60\u597d\"</code> </p>\n<p>but it may show messy code when you run you program in different computer, especially the computer using different language.\nif you use wchar_t, you can avoid this.</p>\n", "OwnerUserId": "4089758", "PostTypeId": "2", "Id": "26333806", "Score": "-1", "CreationDate": "2014-10-13T06:01:43.383", "LastActivityDate": "2014-10-13T06:01:43.383"}, "bq_ids": {"n4140": {"so_26333381_26375498_0": {"section_id": 3314, "quality": 0.95, "length": 38}, "so_26333381_26375498_1": {"section_id": 3315, "quality": 1.0, "length": 7}, "so_26333381_26333381_0": {"section_id": 7214, "quality": 0.9523809523809523, "length": 20}}, "n3337": {"so_26333381_26375498_0": {"section_id": 3184, "quality": 0.85, "length": 34}, "so_26333381_26375498_1": {"section_id": 3185, "quality": 1.0, "length": 7}, "so_26333381_26333381_0": {"section_id": 6958, "quality": 0.9523809523809523, "length": 20}}, "n4659": {"so_26333381_26375498_0": {"section_id": 4080, "quality": 0.95, "length": 38}, "so_26333381_26375498_1": {"section_id": 4081, "quality": 1.0, "length": 7}, "so_26333381_26333381_0": {"section_id": 8723, "quality": 0.9523809523809523, "length": 20}}}, "26334119": {"ParentId": "26333381", "CommentCount": "0", "Body": "<p>In your example, you use Unicode. Indeed you could type not only in Latin or Cyrillic, but in Thai, Arabic, Chinese in other words any Unicode symbol. Your example with some more symbols <a href=\"http://coliru.stacked-crooked.com/a/80f877dd04653e60\" rel=\"nofollow\">link</a></p>\n<p>The case is in encoding. In your example you are using <em>char</em> to store Unicode symbols encoded in UTF-8. See <a href=\"http://en.wikipedia.org/wiki/UTF-8\" rel=\"nofollow\">this</a> for more details. The main advantage of UTF-8 in backward compatibility with ASCII. The main disadvantage of using UTF-8 is variable symbol length.</p>\n<p>There are other types of encoding for Unicode symbols. The most common (except UTF-8) are <a href=\"http://en.wikipedia.org/wiki/UTF-16\" rel=\"nofollow\">UTF-16</a> and <a href=\"http://en.wikipedia.org/wiki/UTF-32\" rel=\"nofollow\">UTF-32</a>. You should be aware that the UTF-16 encoding is still variable length, however the code unit is now 16bit. UTF-32 encoding is constant length.\nThe type <em>wchar_t</em> is usually used to store symbols in UTF-16 or UTF-32 encoding depending on the system.</p>\n", "OwnerUserId": "2081094", "PostTypeId": "2", "Id": "26334119", "Score": "2", "CreationDate": "2014-10-13T06:28:58.647", "LastActivityDate": "2014-10-13T06:28:58.647"}});