post_cb({"36895012": {"CommentCount": "14", "AcceptedAnswerId": "36898879", "PostTypeId": "1", "LastEditorUserId": "4294597", "CreationDate": "2016-04-27T15:59:26.043", "LastActivityDate": "2016-05-30T18:11:51.190", "LastEditDate": "2016-04-28T02:16:44.077", "ViewCount": "1468", "FavoriteCount": "2", "Title": "Does C++ final imply final in all aspects?", "Id": "36895012", "Score": "7", "Body": "<blockquote>\n<p id=\"so_36895012_36895012_0\">C++11 added final.</p>\n</blockquote>\n<p>Finally!</p>\n<p>I understand <code>final</code> does two things:</p>\n<ul>\n<li>Makes a class non-inheritable.</li>\n<li>Makes (virtual) functions in a class non-overridable (in a derived class).</li>\n</ul>\n<p>Both of these seem independent of each other. But take for example the following:</p>\n<pre><code>class Foo\n{\n    public:\n    virtual void bar()\n    {\n        //do something unimportant.\n    }\n};\nclass Baz final : public Foo\n{\n    public:\n    void bar() /*final*/ override\n    {\n        //do something more important than Foo's bar.\n    }\n};\n</code></pre>\n<p>From above, I believe <code>Baz</code> being <code>final</code>, I <em>should <strong>NOT</strong> need to specify</em> that its <code>virtual</code> member function <code>bar</code> is also <code>final</code>. Since <code>Baz</code> cannot be inherited, the question of overriding <code>bar</code> goes out of scope. However my compiler VC++ 2015, is very quiet about this. I have not tested this on any others at the moment.</p>\n<p>I would be glad if someone could shed some light on this topic. A quote from the standard (if any) would be extremely appreciated. Also please state any corner cases that I am unaware of, that may cause my logical belief to fail.</p>\n<p>So, my question is: <strong>Does a</strong> <code>final class</code> <strong>implicitly imply its</strong> <code>virtual</code> <strong>functions to be</strong> <code>final</code> <strong>as well? Should it? Please clarify.</strong></p>\n<hr>\n<p>The reason I am asking this is because <code>final</code> functions become qualified for <strong>de-virtualization</strong>, which is a great optimization. Any help is appreciated.</p>\n</hr>", "Tags": "<c++><c++11><virtual><final>", "OwnerUserId": "4294597", "AnswerCount": "2"}, "36898976": {"ParentId": "36895012", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>To quote the draft C++ standard from here <a href=\"http://eel.is/c++draft/class.derived#class.virtual-4\" rel=\"nofollow noreferrer\">[class.virtual/4]</a>:</p>\n<blockquote>\n<p id=\"so_36895012_36898976_0\">If a virtual function <code>f</code> in some class <code>B</code> is marked with the <em>virt-specifier</em> <code>final</code> and in a class <code>D</code> derived from <code>B</code> a function <code>D::f</code> overrides <code>B::f</code>, the program is ill-formed. </p>\n</blockquote>\n<p>And here <a href=\"http://eel.is/c++draft/class#3\" rel=\"nofollow noreferrer\">[class/3]</a>:</p>\n<blockquote>\n<p id=\"so_36895012_36898976_1\">If a class is marked with the <em>class-virt-specifier</em> <code>final</code> and it appears as a <em>base-type-specifier</em> in a <em>base-clause</em> (Clause [class.derived]), the program is ill-formed.</p>\n</blockquote>\n<p><em>So, in answer to the question</em>;</p>\n<blockquote>\n<p id=\"so_36895012_36898976_2\">Does a <code>final</code> <code>class</code> implicitly imply its <code>virtual</code> functions to be <code>final</code> as well? Should it? Please clarify.</p>\n</blockquote>\n<p>So, at least not formally. Any attempt to violate either rule will have the same result in both cases; the program is ill-formed and won't compile. A <code>final class</code> means the class cannot be derived from, so as a consequence of this, its <code>virtual</code> methods cannot be overridden.</p>\n<p>Should it? At least formally, probably not; they are related but they are not the same thing. There is also no need formally require the one to imply the other, the effect follows naturally. Any violations have the same result, a failed compilation (hopefully with appropriate error messages to distinguish the two).</p>\n<hr>\n<p>To touch on your motivation for the query and the de-virtualization of the virtual calls. This is not always immediately affected by the <code>final</code> of the class nor method (albeit they offer help), the normal rules of the virtual functions and class hierarchy apply.</p>\n<p>If the compiler can determine that at runtime a particular method will always be called (e.g. with an automatic object, i.e. \"on the stack\"), it could apply such <a href=\"https://stackoverflow.com/a/7047248/3747990\">an optimisation anyway</a>, irrespective of the method is final or not. These optimisations fall under the as-if rule, that allow the compiler to <a href=\"http://en.cppreference.com/w/cpp/language/as_if\" rel=\"nofollow noreferrer\">apply any transformation</a> so long as the observable behaviour is as-if the original code had been executed. </p>\n</hr>", "OwnerUserId": "3747990", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:16:51.383", "Id": "36898976", "Score": "4", "CreationDate": "2016-04-27T19:17:18.170", "LastActivityDate": "2016-05-30T18:11:51.190"}, "bq_ids": {"n4140": {"so_36895012_36898976_1": {"section_id": 5847, "quality": 0.9, "length": 9}, "so_36895012_36898976_0": {"section_id": 7005, "quality": 1.0, "length": 12}}, "n3337": {"so_36895012_36898976_1": {"section_id": 5617, "quality": 0.9, "length": 9}, "so_36895012_36898976_0": {"section_id": 6751, "quality": 1.0, "length": 12}}, "n4659": {"so_36895012_36898976_1": {"section_id": 7326, "quality": 0.8, "length": 8}, "so_36895012_36898976_0": {"section_id": 8502, "quality": 1.0, "length": 12}}}, "36898879": {"ParentId": "36895012", "PostTypeId": "2", "CommentCount": "1", "Body": "<blockquote>\n<p id=\"so_36895012_36898879_0\">The reason I am asking this is because final functions become qualified for de-virtualization, which is a great optimization.</p>\n</blockquote>\n<p>Do they? \"De-virtualization\" is not part of the C++ standard. Or at least, not really.</p>\n<p>De-virtualization is merely a consequence of the \"as if\" rule, which states that the implementation can do whatever it likes so long as the implementation behaves \"as if\" it is doing what the standard says.</p>\n<p>If the compiler can detect at compile-time that a particular call to a virtual member function, through a polymorphic type, will undeniably call a specific version of that function, then it is allowed to avoid using the virtual dispatching logic and calling the function statically. That's behaving \"as if\" it had used the virtual dispatching logic, since the compiler can prove that this is the function that would have been called.</p>\n<p>As such, the standard does not define when de-virtualization is allowed/forbidden. A compiler, upon inlining a class that takes a pointer to a virtual type, may find that the pointer being passed is pointing to a stack variable local declared in the function that it is being inlined within. Or that the compiler can trace down a particular inline/call graph to the point of origin for a particular polymorphic pointer/reference. In those cases, the compiler can de-virtualize calls into that type. But only if it's smart enough to do so.</p>\n<p>Will a compiler devirtualize all virtual function calls to a <code>final</code> class, regardless of whether those methods are declared <code>final</code> themselves? It may. It may not. It may not even devirtualize any calls to methods declared <code>final</code> on the polymorphic type. That's a valid (if not particularly bright) implementation.</p>\n<p>The question you're asking is implementation specific. It can vary from compiler to compiler.</p>\n<p>However, a class being declared <code>final</code>, as you pointed out, ought to be sufficient information for the compiler to devirtualize all calls to pointers/references to the <code>final</code> class type. If a compiler doesn't do so, then that's a quality-of-implementation issue, not a standards one.</p>\n", "OwnerUserId": "734069", "LastEditorUserId": "734069", "LastEditDate": "2016-05-28T21:04:36.750", "Id": "36898879", "Score": "8", "CreationDate": "2016-04-27T19:12:33.563", "LastActivityDate": "2016-05-28T21:04:36.750"}});