post_cb({"31064959": {"PostTypeId": "2", "ParentId": "31064701", "Body": "<p>Quoting relevant part of the C++11 standard (draft N3337), section 5.19, paragraph 2:</p>\n<blockquote>\n<p id=\"so_31064701_31064959_0\">A conditional-expression is a core constant expression unless it involves one of the following as a potentially evaluated subexpression (3.2), but subexpressions of logical AND (5.14), logical OR (5.15), and conditional (5.16) operations that are not evaluated are not considered [ Note: An overloaded operator invokes a function. \u2014 end note ]:</p>\n<ul>\n<li><p id=\"so_31064701_31064959_1\">an lvalue-to-rvalue conversion (4.1) unless it is applied to  </p>\n<ul>\n<li>a glvalue of integral or enumeration type that refers to a non-volatile const object with a preceding initialization, initialized with a constant expression</li>\n</ul></li>\n</ul>\n</blockquote>\n<p>There is no preceding initialization of <code>S::c</code> in your definition of <code>d</code>.</p>\n<p>Edit: why this applies:</p>\n<ul>\n<li><code>5.1.1/8</code>: <code>S::c</code> is an lvalue.</li>\n<li><code>3.10/1</code>: a glvalue is an lvalue or xvalue.</li>\n<li><code>5/8</code>: specifies that lvalue-to-rvalue conversion happens whenever an operator that expects a prvalue is used.</li>\n<li>Proving that multiplication expects a prvalue is hurting my head. It is implied in many places, but I haven't found anywhere it is said <em>explicitly</em>.</li>\n</ul>\n", "LastEditorUserId": "1405588", "LastActivityDate": "2015-06-26T05:32:44.603", "LastEditDate": "2015-06-26T05:32:44.603", "CommentCount": "5", "Id": "31064959", "OwnerUserId": "1405588", "Score": "4", "CreationDate": "2015-06-26T04:31:42.720"}, "31065015": {"PostTypeId": "2", "ParentId": "31064701", "Body": "<p>Constant initialization is performed before other initialization in the C++ compiling process. In the example, the constant initialization of <code>d</code> is guaranteed to occur before the constant initialization of <code>S::c</code>. A constant expression must consist exclusively of constant values. When <code>d</code> is initialized, <code>S::c</code> is known to be a constant value, so the expression is not considered constant.</p>\n", "CreationDate": "2015-06-26T04:36:19.203", "Score": "1", "CommentCount": "0", "Id": "31065015", "OwnerUserId": "3776174", "LastActivityDate": "2015-06-26T04:36:19.203"}, "31064701": {"LastEditDate": "2015-06-26T05:34:08.400", "Body": "<p>I'm trying to understand the constant expression concept (from <a href=\"http://en.cppreference.com/w/cpp/language/constant_initialization\" rel=\"nofollow\">c++reference</a>):</p>\n<pre><code>struct S {\n    static const int c;\n};\nconst int d = 10 * S::c; // not a constant expression: S::c has no preceding\n                         // initializer, this initialization happens after const\nconst int S::c = 5;      // constant initialization, guaranteed to happen first\n</code></pre>\n<p>Why isn't the <code>S::c</code> a constant expression untill we define it. It was declared as a static <strong>const</strong> data member though...</p>\n", "CreationDate": "2015-06-26T04:05:14.877", "Score": "4", "AcceptedAnswerId": "31064959", "CommentCount": "3", "OwnerUserId": "4671213", "Title": "Understanding constant expression", "LastActivityDate": "2015-06-26T05:34:08.400", "PostTypeId": "1", "Tags": "<c++><language-lawyer>", "AnswerCount": "3", "Id": "31064701", "ViewCount": "106", "LastEditorUserId": "1405588"}, "31064898": {"PostTypeId": "2", "ParentId": "31064701", "Body": "<p>In this sequence \u2026</p>\n<pre><code>constexpr int d = 10 * S::c;\nconst int S::c = 5;\n</code></pre>\n<p>\u2026 the value of <code>S::c</code> is not known yet when the <code>d</code> value is compiled. But try to swap these lines:</p>\n<pre><code>const int S::c = 5;\nconstexpr int d = 10 * S::c;\n</code></pre>\n", "CreationDate": "2015-06-26T04:25:52.100", "Score": "2", "CommentCount": "0", "Id": "31064898", "OwnerUserId": "1881196", "LastActivityDate": "2015-06-26T04:25:52.100"}, "bq_ids": {"n3337": {"so_31064701_31064959_0": {"quality": 0.7142857142857143, "length": 20, "section_id": 5946}}}});