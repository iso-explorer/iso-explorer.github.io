post_cb({"26404545": {"Id": "26404545", "PostTypeId": "2", "Body": "<pre><code>new int[]; \n</code></pre>\n<p>is not legal.</p>\n<p>As per the draft standard <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf\" rel=\"nofollow\">n3337</a> \u00a7 5.3.4, <code>[]</code> should have an <em>expression</em> for the first dimension, and a <em>constant-expression</em> for each subsequent dimension (if any), as dictated by the grammar:</p>\n<pre><i>noptr-new-declarator</i>:\n     [ <i>expression</i> ] <i>attribute-specifier-seq</i><sub>opt</sub>\n     <i>noptr-new-declarator</i> [ <i>constant-expression</i> ] <i>attribute-specifier-seq</i><sub>opt</sub></pre>\n<p>Here, every <em>constant-expression</em> shall be a converted constant expression, as specified in clause 6:</p>\n<blockquote>\n<p id=\"so_26404384_26404545_0\">Every <em>constant-expression</em> in a <em>noptr-new-declarator</em> shall be a\n  converted constant expression (5.19) of type std::size_t and shall\n  evaluate to a strictly positive value. The <em>expression</em> in a\n  <em>noptr-new-declarator</em> is implicitly converted to std::size_t.</p>\n</blockquote>\n", "LastEditorDisplayName": "user3920237", "LastActivityDate": "2014-10-16T13:00:15.067", "Score": "7", "CreationDate": "2014-10-16T12:31:50.630", "ParentId": "26404384", "CommentCount": "14", "OwnerUserId": "1870232", "LastEditDate": "2014-10-16T13:00:15.067"}, "bq_ids": {"n4140": {"so_26404384_26404545_0": {"length": 14, "quality": 0.7368421052631579, "section_id": 6087}}, "n3337": {"so_26404384_26404910_0": {"length": 28, "quality": 0.9032258064516129, "section_id": 5855}, "so_26404384_26404545_0": {"length": 12, "quality": 0.631578947368421, "section_id": 5855}}, "n4659": {"so_26404384_26404545_0": {"length": 17, "quality": 0.8947368421052632, "section_id": 7583}}}, "26404384": {"ViewCount": "583", "Body": "<p>What does this line of code do?</p>\n<pre><code>new int[];\n</code></pre>\n<p>According to my compiler's disassembly (VC++ 2012), it does the same as:</p>\n<pre><code>new int[0];\n</code></pre>\n<p>But is it specified by the C++ standard? And is it a legal instruction?</p>\n", "AcceptedAnswerId": "26404910", "Title": "What does \"new int[];\" do?", "CreationDate": "2014-10-16T12:25:19.720", "Id": "26404384", "CommentCount": "9", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2014-10-16T13:11:44.910", "Score": "4", "OwnerUserId": "1030598", "Tags": "<c++><arrays><c++11><new-operator>", "AnswerCount": "2"}, "26404910": {"Id": "26404910", "PostTypeId": "2", "Body": "<p>The expression <code>new int[]</code> is not valid with C++11 (I have not checked C++14).</p>\n<p>With a single <code>[]</code> the syntax requires an (implicitly convertible to) integral type <em>expression</em> between the brackets, denoting the desired array size.</p>\n<p>Note that this size needs not be a constant: at the bottom level of abstraction this is how you allocate a dynamic array in C++.</p>\n<hr>\n<p>C++11 (via the N3290 final draft) \u00a75.3.4/6:</p>\n<blockquote>\n<p id=\"so_26404384_26404910_0\"><strong>\u201d</strong> Every <em>constant-expression</em> in a <em>noptr-new-declarator</em> shall be an integral constant expression (5.19) and\n  evaluate to a strictly positive value. The <em>expression</em> in a <em>noptr-new-declarator</em> shall be of integral type,\n  unscoped enumeration type, or a class type for which a single non-explicit conversion function to integral or\n  unscoped enumeration type exists (12.3)</p>\n</blockquote>\n<p><em>expression</em> is used for the first <code>[]</code> brackets. In subsequent <code>[]</code> brackets one must use a <em>constant-expression</em> (value known at compile time) because addressing of the outermost array dimension requires known size array items.</p>\n<hr>\n<p>Of course, instead of using <code>new</code> directly you will generally be better off using a <code>std::vector</code> (or maybe <code>std::string</code>).</p>\n</hr></hr>", "LastEditorUserId": "464581", "LastActivityDate": "2014-10-16T13:11:44.910", "Score": "8", "CreationDate": "2014-10-16T12:49:36.853", "ParentId": "26404384", "CommentCount": "2", "OwnerUserId": "464581", "LastEditDate": "2014-10-16T13:11:44.910"}});