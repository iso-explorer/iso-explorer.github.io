post_cb({"23965233": {"ParentId": "23892018", "PostTypeId": "2", "CommentCount": "13", "Body": "<p><strong>TL;DR</strong></p>\n<p><em>Aggregate initialization</em> can be used to extend the life-time of a temporary, a <em>user-defined constructor</em> cannot do the same since it's effectively a function call.</p>\n<p><sub><strong>Note</strong>: Both <code>T const&amp;</code> and <code>T&amp;&amp;</code> apply in the case of <em>aggregate-initalization</em> and extending the life of temporaries bound to them.</sub></p>\n<hr>\n<hr>\n<h2>What is an <em>Aggregate</em>?</h2>\n<pre><code>struct S {                // (1)\n  std::vector&lt;int&gt;&amp;&amp; vec;\n};\n</code></pre>\n<p>To answer this question we will have to dive into the difference between initialization of an <em>aggregate</em>  and initialization of a <em>class type</em>, but first we must establish what an <em>aggregate</em> is:</p>\n<blockquote>\n<p id=\"so_23892018_23965233_0\"><code>8.5.1p1</code> <strong>Aggregates</strong> <code>[dcl.init.aggr]</code></p>\n<blockquote>\n<p id=\"so_23892018_23965233_2\">An <em>aggregate</em> is an array or a class (Clause 9) with no user-provided constructors (12.1), no private or protected non-static data members (Clause 11), no base classes (Clause 10), and no virtual functions (10.3)</p>\n</blockquote>\n</blockquote>\n<p><sup><strong>Note</strong>: The above means that <em>(1)</em> is an aggregate.</sup></p>\n<hr>\n<hr>\n<h2>How are <em>Aggregates</em> initialized?</h2>\n<p>The initialization between an <em>aggregate</em> and a \"<em>non-aggregate</em>\" differs greatly, here comes another section straight from the Standard:</p>\n<blockquote>\n<p id=\"so_23892018_23965233_3\"><code>8.5.1p2</code> <strong>Aggregates</strong> <code>[dcl.init.aggr]</code></p>\n<blockquote>\n<p id=\"so_23892018_23965233_5\">When an aggregate is initialized by an initializer list, as specified in 8.5.4, <strong>the elements of the initializer list are taken as initializers for the members of the aggregate</strong>, in increasing subscript or member order. Each member is <em>copy-initialized</em> from the corresponding <em>initializer-clause</em>.</p>\n</blockquote>\n</blockquote>\n<p><br/></p>\n<p>The above quotation states that we are initializing the members of our <em>aggregate</em> with the initializers in the <em>initializer-clause</em>, there is no step in between.</p>\n<pre><code>struct A { std::string a; int b; };\n</code></pre>\n<p><sup></sup></p>\n<pre><code>A x { std::string {\"abc\"}, 2 };\n</code></pre>\n<p><br/></p>\n<p>Semantically the above is equivalent to initializing our members using the below, just that <code>A::a</code> and <code>A::b</code> in this case is only accessible through <code>x.a</code> and <code>x.b</code>.</p>\n<pre><code>std::string A::a { std::string {\"abc\"} };\nint         A::b { 2 };\n</code></pre>\n<p><br/></p>\n<p>If we change the type of <code>A::a</code> to an rvalue-reference, or a <em>const lvalue-reference</em>, we will <em>directly</em> bind the temporary use for initialization to <code>x.a</code>.</p>\n<p>The rules of <em>rvalue-references</em>, and <em>const lvalue-references</em>, says that the temporaries lifetime will be extended to that of the host, which is exactly what is going to happen.</p>\n<hr>\n<hr>\n<h2>How does initialization using a user-declared constructor differ?</h2>\n<pre><code>struct S {                    // (2)\n    std::vector&lt;int&gt;&amp;&amp; vec;\n    S(std::vector&lt;int&gt;&amp;&amp; v)\n        : vec{std::move(v)}   // bind to the temporary provided\n    { }\n};\n</code></pre>\n<p>A <em>constructor</em> is really nothing more than a fancy function, used to initialize a <em>class</em> instance. The same rules that apply to functions, apply to them. </p>\n<p>When it comes to extending the life-time of temporaries there is no difference.</p>\n<pre><code>std::string&amp;&amp; func (std::string&amp;&amp; ref) {\n  return std::move (ref);\n}\n</code></pre>\n<p><br/></p>\n<p>A temporary passed to <code>func</code> will not have its life-time extended just because we have an argument declared as being a rvalue/lvalue-reference. Even if we return the <em>\"same\"</em> reference so that it's available outside of <code>func</code>, it just won't happen.</p>\n<p>This is what happens in the constructor of <em>(2)</em>, after all a <em>constructor</em> is just a \"<em>fancy function</em>\" used to initialize an object.</p>\n<p><br/></p>\n<blockquote>\n<p id=\"so_23892018_23965233_6\"><code>12.2p5</code> <strong>Temporary objects</strong> <code>[class.temporary]</code></p>\n<blockquote>\n<p id=\"so_23892018_23965233_11\">The temporary to which the reference is bound or the temporary that is the complete object of a subobject to which the reference is bound persists for the lifetime of the reference except:</p>\n<ul>\n<li><p id=\"so_23892018_23965233_12\">A temporary bound to a reference member in a constructor's ctor-initializer (12.6.2) persists until the constructor exits.</p></li>\n<li><p id=\"so_23892018_23965233_13\"><strong>A temporary bound to a reference parameter in a function call (5.2.2) persists until the completion of the full-expression containing the call.</strong></p></li>\n<li><p id=\"so_23892018_23965233_14\">The lifetime of a temporary bound to the returned value in a function return statement (6.6.3) is not extended; the temporary is destroyed at the end of the full-expression in the return statement.</p>\n<ul>\n<li>A temporary bound to a reference in a <em>new-initializer</em> (5.3.4) persists until the completion of the full-expression containing the <em>new-initializer</em>.</li>\n</ul></li>\n</ul>\n</blockquote>\n</blockquote>\n<p><sub><strong>Note</strong>: Do note that aggregate initialization through a <code>new T { ... }</code> differ from the previously mentioned rules.</sub></p>\n</hr></hr></hr></hr></hr></hr>", "OwnerUserId": "1090079", "LastEditorUserId": "1090079", "LastEditDate": "2014-05-31T10:53:30.077", "Id": "23965233", "Score": "8", "CreationDate": "2014-05-31T00:30:13.850", "LastActivityDate": "2014-05-31T10:53:30.077"}, "23892018": {"CommentCount": "9", "AcceptedAnswerId": "23965233", "PostTypeId": "1", "LastEditorUserId": "1090079", "CreationDate": "2014-05-27T14:23:23.833", "LastActivityDate": "2014-05-31T10:53:30.077", "LastEditDate": "2014-05-31T07:23:21.723", "ViewCount": "479", "FavoriteCount": "4", "Title": "Extending temporary's lifetime through rvalue data-member works with aggregate, but not with constructor, why?", "Id": "23892018", "Score": "10", "Body": "<p>I've found the following scheme to extend a temporaries lifetime works, I don't know if it should, but it does.</p>\n<pre><code>struct S {\n    std::vector&lt;int&gt;&amp;&amp; vec;\n};\n\nint main() {\n    S s1{std::vector&lt;int&gt;(5)};      // construct with temporary\n    std::cout &lt;&lt; s1.vec[0] &lt;&lt; '\\n'; // fine, temporary is alive\n}\n</code></pre>\n<hr>\n<p>However, when <code>S</code> is given an explicit value constructor it is no longer an aggregate, and this scheme fails with an invalid read on <code>s1.vec[0]</code></p>\n<pre><code>struct S {\n    std::vector&lt;int&gt;&amp;&amp; vec;\n    S(std::vector&lt;int&gt;&amp;&amp; v)\n        : vec{std::move(v)}         // bind to the temporary provided\n    { }\n};\n\nint main() {\n    S s1{std::vector&lt;int&gt;(5)};      // construct with temporary\n    std::cout &lt;&lt; s1.vec[0] &lt;&lt; '\\n'; // not ok. invalid read on free'd memory\n}\n</code></pre>\n<hr>\n<p>Why is this valid with an aggregate?  I'm thinking it has to do with the constructor being an actual function call, based on what I've red with const lvalue refs.  Additionally, is there any way to make the latter case work?</p>\n<p>There are a great deal of questions dealing with a similar situation using lvalue references on SO.  I see that if I had used a const lvalue ref it wouldn't help to extend the lifetime of the temporary, are the rules for rvalue refs the same?</p>\n</hr></hr>", "Tags": "<c++><c++11><language-lawyer><rvalue-reference><object-lifetime>", "OwnerUserId": "1013719", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_23892018_23965233_7": {"section_id": 382, "quality": 0.9285714285714286, "length": 13}, "so_23892018_23965233_9": {"section_id": 382, "quality": 0.9230769230769231, "length": 12}, "so_23892018_23965233_5": {"section_id": 3299, "quality": 0.9565217391304348, "length": 22}, "so_23892018_23965233_8": {"section_id": 382, "quality": 0.9090909090909091, "length": 10}, "so_23892018_23965233_4": {"section_id": 3299, "quality": 0.9565217391304348, "length": 22}, "so_23892018_23965233_2": {"section_id": 3298, "quality": 0.8421052631578947, "length": 16}, "so_23892018_23965233_11": {"section_id": 382, "quality": 0.9285714285714286, "length": 13}, "so_23892018_23965233_10": {"section_id": 382, "quality": 0.8823529411764706, "length": 15}, "so_23892018_23965233_1": {"section_id": 3298, "quality": 0.8421052631578947, "length": 16}, "so_23892018_23965233_14": {"section_id": 382, "quality": 0.8823529411764706, "length": 15}, "so_23892018_23965233_12": {"section_id": 382, "quality": 0.9090909090909091, "length": 10}, "so_23892018_23965233_13": {"section_id": 382, "quality": 0.9230769230769231, "length": 12}}, "n3337": {"so_23892018_23965233_7": {"section_id": 373, "quality": 0.9285714285714286, "length": 13}, "so_23892018_23965233_9": {"section_id": 373, "quality": 0.9230769230769231, "length": 12}, "so_23892018_23965233_5": {"section_id": 3169, "quality": 0.9565217391304348, "length": 22}, "so_23892018_23965233_8": {"section_id": 373, "quality": 0.9090909090909091, "length": 10}, "so_23892018_23965233_4": {"section_id": 3169, "quality": 0.9565217391304348, "length": 22}, "so_23892018_23965233_2": {"section_id": 3168, "quality": 0.8421052631578947, "length": 16}, "so_23892018_23965233_11": {"section_id": 373, "quality": 0.9285714285714286, "length": 13}, "so_23892018_23965233_10": {"section_id": 373, "quality": 0.8823529411764706, "length": 15}, "so_23892018_23965233_1": {"section_id": 3168, "quality": 0.8421052631578947, "length": 16}, "so_23892018_23965233_14": {"section_id": 373, "quality": 0.8823529411764706, "length": 15}, "so_23892018_23965233_12": {"section_id": 373, "quality": 0.9090909090909091, "length": 10}, "so_23892018_23965233_13": {"section_id": 373, "quality": 0.9230769230769231, "length": 12}}, "n4659": {"so_23892018_23965233_7": {"section_id": 397, "quality": 0.9285714285714286, "length": 13}, "so_23892018_23965233_4": {"section_id": 4065, "quality": 0.7391304347826086, "length": 17}, "so_23892018_23965233_9": {"section_id": 397, "quality": 0.9230769230769231, "length": 12}, "so_23892018_23965233_2": {"section_id": 4063, "quality": 0.631578947368421, "length": 12}, "so_23892018_23965233_11": {"section_id": 397, "quality": 0.9285714285714286, "length": 13}, "so_23892018_23965233_10": {"section_id": 397, "quality": 0.8823529411764706, "length": 15}, "so_23892018_23965233_1": {"section_id": 4063, "quality": 0.631578947368421, "length": 12}, "so_23892018_23965233_14": {"section_id": 397, "quality": 0.8823529411764706, "length": 15}, "so_23892018_23965233_13": {"section_id": 397, "quality": 0.9230769230769231, "length": 12}, "so_23892018_23965233_5": {"section_id": 4065, "quality": 0.7391304347826086, "length": 17}}}});