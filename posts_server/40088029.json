post_cb({"40088115": {"ParentId": "40088029", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>The \"exact implementation\" should not be your concern (it will vary from compiler to compiler, from version to version, and possibly based on the options you provide to the compiler)</p>\n<p>Your concern should be \"How will a standards-compliant compiler behave\" and the answer is \"Yes, <code>if(ptr)</code> should always produce the same results as <code>if(ptr.get())</code></p>\n<p>From the standard:</p>\n<blockquote>\n<p id=\"so_40088029_40088115_0\">A prvalue of arithmetic, unscoped enumeration, pointer, or pointer to member type can be converted to a prvalue of type  bool. A zero value, null pointer value, or null member pointer value is converted to  false; any other value is converted to  true . A prvalue of type  std::nullptr_t can be converted to a prvalue of type  bool ; the resulting value is  false .</p>\n</blockquote>\n<p>And smart pointers count as  <a href=\"https://timsong-cpp.github.io/cppwp/nullablepointer.requirements#3\" rel=\"nofollow\">nullable pointers</a> which have the following requirement:</p>\n<blockquote>\n<p id=\"so_40088029_40088115_1\">An object p of type P can be contextually converted to bool (Clause [conv]). The effect shall be as if p != nullptr had been evaluated in place of p.</p>\n</blockquote>\n<p>(thanks to T.C. for this quote)</p>\n", "OwnerUserId": "391806", "LastEditorUserId": "391806", "LastEditDate": "2016-10-18T19:56:40.627", "Id": "40088115", "Score": "6", "CreationDate": "2016-10-17T13:46:28.183", "LastActivityDate": "2016-10-18T19:56:40.627"}, "bq_ids": {"n4140": {"so_40088029_40088115_1": {"section_id": 6284, "quality": 0.8666666666666667, "length": 13}, "so_40088029_40088115_0": {"section_id": 44, "quality": 1.0, "length": 39}}, "n3337": {"so_40088029_40088115_1": {"section_id": 6044, "quality": 0.8666666666666667, "length": 13}, "so_40088029_40088115_0": {"section_id": 41, "quality": 1.0, "length": 39}}, "n4659": {"so_40088029_40088115_1": {"section_id": 7791, "quality": 0.8666666666666667, "length": 13}, "so_40088029_40088115_0": {"section_id": 45, "quality": 1.0, "length": 39}}}, "40088029": {"CommentCount": "6", "ViewCount": "96", "CreationDate": "2016-10-17T13:41:50.070", "LastActivityDate": "2016-10-18T19:56:40.627", "Title": "Smart pointer as condition: are if (p) and if (p.get()) equilavent?", "AcceptedAnswerId": "40088115", "PostTypeId": "1", "Id": "40088029", "Score": "0", "Body": "<p>Let <code>p</code> be a shared/unique pointer. Are <code>if (p)</code> and <code>if (p.get())</code> equivalent?</p>\n<p>If not, in what cases can these conditionals, or the code within the conditionals, behave differently?</p>\n<p>From <a href=\"http://en.cppreference.com/w/cpp/memory/shared_ptr/operator_bool\" rel=\"nofollow\">cppreference</a> I read that <code>std::shared_ptr::operator bool</code> checks whether <code>get() != nullptr</code>. Is this the exact implementation of <code>operator bool</code>?</p>\n", "Tags": "<c++><c++11><shared-ptr><smart-pointers><unique-ptr>", "OwnerUserId": "3927314", "AnswerCount": "4"}, "40088193": {"ParentId": "40088029", "CommentCount": "0", "Body": "<p>The purpose behind <code>operator bool()</code> on smart pointers is to make smart pointers behave like regular pointers in a common situation of performing a validity check, i.e. in situations when you write</p>\n<pre><code>if (myPointer) {\n    ... // Do something\n}\n</code></pre>\n<p>The exact implementation may be different. Instead of calling <code>get()</code> and comparing the result to <code>nullptr</code> a standard-compliant implementation could, for example, check a member variable that stores the value returned by <code>get()</code>, or check a private flag indicating that the pointer is not pointing to anything valid.</p>\n<p>For programmers' purposes, however, it is enough to know that the implementation would return <code>true</code> any time when <code>get()</code> returns a non-null value, and that it would also return <code>false</code> when <code>get()</code> returns <code>nullptr</code>.</p>\n", "OwnerUserId": "335858", "PostTypeId": "2", "Id": "40088193", "Score": "1", "CreationDate": "2016-10-17T13:49:58.093", "LastActivityDate": "2016-10-17T13:49:58.093"}, "40088203": {"ParentId": "40088029", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_40088029_40088203_0\">Are <code>if (p)</code> and if <code>(p.get())</code> equivalent?</p>\n</blockquote>\n<p>From <a href=\"http://en.cppreference.com/w/cpp/memory/shared_ptr/operator_bool\" rel=\"nofollow\">this reference</a> (same applies for <code>unique_ptr</code>):</p>\n<blockquote>\n<p id=\"so_40088029_40088203_1\">Checks if <code>*this</code> stores a non-null pointer, i.e. whether <code>get() != nullptr</code>.</p>\n</blockquote>\n<p>Yes, <code>if (p)</code> and <code>if (p.get())</code> have equivalent behaviour. No, pedantically speaking they are not exactly equivalent: the former has a function call, the latter has a different function call and a pointer comparison. In practice, both are likely to generate identical code.</p>\n<blockquote>\n<p id=\"so_40088029_40088203_2\">If not, in what cases can these conditionals, or the code within the conditionals, behave differently?</p>\n</blockquote>\n<p>They behave exactly the same.</p>\n<blockquote>\n<p id=\"so_40088029_40088203_3\">Is this the exact implementation of operator bool?</p>\n</blockquote>\n<p>This is exactly how the implementation must behave.</p>\n<p>The exact implementation is... implementation defined. You can read the sources of your standard library implementation to find out.</p>\n", "OwnerUserId": "2079303", "PostTypeId": "2", "Id": "40088203", "Score": "1", "CreationDate": "2016-10-17T13:50:08.763", "LastActivityDate": "2016-10-17T13:50:08.763"}, "40105538": {"ParentId": "40088029", "CommentCount": "0", "Body": "<p>They behave exactly the same. </p>\n<p>In order to find out the various ways in which we could use a pointer null check you could see the following </p>\n<p><a href=\"http://www.artima.com/cppsource/safebool.html\" rel=\"nofollow\">http://www.artima.com/cppsource/safebool.html</a></p>\n<p>Which is called the safe bool idiom. Even though it may seem to be obselete in c++11, it gives a good exposer on the usage of bool operations on sharedPtrs.</p>\n", "OwnerUserId": "6286927", "PostTypeId": "2", "Id": "40105538", "Score": "0", "CreationDate": "2016-10-18T10:16:37.003", "LastActivityDate": "2016-10-18T10:16:37.003"}});