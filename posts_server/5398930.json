post_cb({"5399021": {"Id": "5399021", "PostTypeId": "2", "Body": "<p>As <a href=\"https://stackoverflow.com/questions/5398930/general-rules-of-passing-returning-an-array-not-pointer-to-from-a-function/5398968#5398968\">Erik mentioned</a>, you can't return an array from a function.  You can return a pointer or a reference, although the syntax is quite hairy:</p>\n<pre><code>// foo returns a pointer to an array 10 of int\nint (*foo(float arg1, char arg2))[10] { ... }\n\n// bar returns a reference to an array 10 of int\nint (&amp;foo(float arg1, char arg2))[10] { ... }\n</code></pre>\n<p>I'd strongly recommend making a typedef for the array type:</p>\n<pre><code>// IntArray10 is an alias for \"array 10 of int\"\ntypedef int IntArray10[10];\n\n// Equivalent to the preceding definitions\nIntArray10 *foo(float arg1, char arg2) { ... }\nIntArray10 &amp;bar(float arg1, char arg2) { ... }\n</code></pre>\n", "LastEditorUserId": "-1", "LastActivityDate": "2011-03-22T23:14:17.090", "Score": "3", "CreationDate": "2011-03-22T23:14:17.090", "ParentId": "5398930", "CommentCount": "0", "OwnerUserId": "9530", "LastEditDate": "2017-05-23T11:54:34.683"}, "5398968": {"Id": "5398968", "PostTypeId": "2", "Body": "<p>You cannot return an array from a function.</p>\n<p>8.3.5/6:</p>\n<blockquote>\n<p id=\"so_5398930_5398968_0\">Functions shall not have a return type\n  of type array or function, although\n  they may have a return type of type\n  pointer or reference to such things.</p>\n</blockquote>\n<p>EDIT: You'll love the syntax:</p>\n<pre><code>int (&amp;bar()) [5] {\n  static int x[5];\n  return x;\n}\n\n\nint (* &amp; bar()) [6][10] {\n    static int x[6][10];\n    static int (*y)[6][10] = &amp;x;\n    return y;\n}\n// Note - this returns a reference to a pointer to a 2d array, not exactly what you wanted.\n</code></pre>\n", "LastEditorUserId": "36565", "LastActivityDate": "2011-03-22T23:56:48.920", "Score": "9", "CreationDate": "2011-03-22T23:07:42.300", "ParentId": "5398930", "CommentCount": "3", "OwnerUserId": "616700", "LastEditDate": "2011-03-22T23:56:48.920"}, "5399014": {"Id": "5399014", "PostTypeId": "2", "Body": "<p>If you want to return a reference to an array from a function, the declaration would look like this:</p>\n<pre><code>// an array\nint global[10];\n\n// function returning a reference to an array\nint (&amp;f())[10] {\n   return global;\n}\n</code></pre>\n<p>The declaration of a function returning a reference to an array looks the same as the declaration of a variable that is a reference to an array - only that the function name is followed by <code>()</code>, which may contain parameter declarations:</p>\n<pre><code>int (&amp;variable)[1][2];\nint (&amp;functionA())[1][2];\nint (&amp;functionB(int param))[1][2];\n</code></pre>\n<p>Such declarations can be made much clearer by using a typedef:</p>\n<pre><code>typedef int array_t[10];\n\narray_t&amp; f() {\n   return global;\n}\n</code></pre>\n<p>If you want it to get really confusing, you can declare a function that takes a reference to an array and also returns such a reference:</p>\n<pre><code>template&lt;int N, int M&gt;\nint (&amp;f(int (&amp;param)[M][N]))[M][N] {\n   return param;\n}\n</code></pre>\n<p><em>Pointers</em> to arrays work the same, only that they use <code>*</code> instead of <code>&amp;</code>.</p>\n", "LastEditorUserId": "56338", "LastActivityDate": "2011-03-22T23:22:13.010", "Score": "34", "CreationDate": "2011-03-22T23:12:52.827", "ParentId": "5398930", "CommentCount": "2", "OwnerUserId": "56338", "LastEditDate": "2011-03-22T23:22:13.010"}, "5399095": {"Id": "5399095", "PostTypeId": "2", "Body": "<p>This is tagged C++, so I'm going to suggest that the way to return an array in C++ is to return a <code>std::vector</code> and not try any trickery with C-arrays (which should be used only in carefully selected scenarios in C++ code).</p>\n<p>As other answers noted, you can't return C-arrays from functions.</p>\n", "LastActivityDate": "2011-03-22T23:23:54.213", "CommentCount": "1", "CreationDate": "2011-03-22T23:23:54.213", "ParentId": "5398930", "Score": "0", "OwnerUserId": "251738"}, "bq_ids": {"n4140": {"so_5398930_5398968_0": {"length": 18, "quality": 1.0, "section_id": 3244}}, "n3337": {"so_5398930_5398968_0": {"length": 18, "quality": 1.0, "section_id": 3117}}, "n4659": {"so_5398930_5398968_0": {"length": 18, "quality": 1.0, "section_id": 4002}}}, "5398930": {"ViewCount": "22105", "Body": "<p>We can pass reference of an array to a function like:</p>\n<pre><code>void f(int (&amp;a)[5]);\n\nint x[5];\nf(x);     //okay\nint y[6];\nf(y);     //error - type of y is not `int (&amp;)[5]`.\n</code></pre>\n<p>Or even better, we can write a function template:</p>\n<pre><code>template&lt;size_t N&gt;\nvoid f(int (&amp;a)[N]); //N is size of the array!\n\nint x[5];\nf(x);     //okay - N becomes 5\nint y[6];\nf(y);     //okay - N becomes 6\n</code></pre>\n<hr>\n<p>Now my question is, how to return reference of an array from a function?</p>\n<p>I want to return array of folllowing types from a function:</p>\n<pre><code>int a[N];\nint a[M][N];\nint (*a)[N];\nint (*a)[M][N];\n</code></pre>\n<p>where <code>M</code> and <code>N</code> is known at compile time!</p>\n<p>What are general rules for passing and returning compile-time reference of an array to and from a function? How can we pass reference of an array of type <code>int (*a)[M][N]</code> to a function?</p>\n<p>EDIT:</p>\n<p><strong>Adam</strong> commented : <code>int (*a)[N]</code> is not an array, it's a pointer to an array.</p>\n<p>Yes. But one dimension is known at compile time! How can we pass this information which is known at compile time, to a function?</p>\n</hr>", "AcceptedAnswerId": "5399014", "Title": "General rules of passing/returning reference of array (not pointer) to/from a function?", "CreationDate": "2011-03-22T23:03:05.373", "Id": "5398930", "CommentCount": "6", "FavoriteCount": "20", "PostTypeId": "1", "LastEditDate": "2011-03-22T23:09:53.577", "LastEditorUserId": "415784", "LastActivityDate": "2016-10-01T23:54:33.323", "Score": "26", "OwnerUserId": "415784", "Tags": "<c++><arrays><compile-time>", "AnswerCount": "6"}, "35038987": {"Id": "35038987", "PostTypeId": "2", "Body": "<p>Supplemental to the fine answer by sth, here is how to declare a class with a constant method returning an array reference:</p>\n<pre><code>class MyClass\n{\npublic:\n    const int (&amp;getIntArray() const)[10];\n};\n</code></pre>\n", "LastActivityDate": "2016-01-27T13:41:55.257", "CommentCount": "0", "CreationDate": "2016-01-27T13:41:55.257", "ParentId": "5398930", "Score": "1", "OwnerUserId": "5847014"}, "25169202": {"Id": "25169202", "PostTypeId": "2", "Body": "<p>With C++11's trailing return type syntax, you can also write:</p>\n<pre><code>auto foo () -&gt; int (&amp;)[3]\n{\n    static int some_array[3]; // doesn't have to be declared here\n    return some_array; // return a reference to the array.\n}\n</code></pre>\n", "LastEditorUserId": "239916", "LastActivityDate": "2016-10-01T23:54:33.323", "Score": "9", "CreationDate": "2014-08-06T20:04:47.187", "ParentId": "5398930", "CommentCount": "3", "OwnerUserId": "239916", "LastEditDate": "2016-10-01T23:54:33.323"}});