post_cb({"27131501": {"ParentId": "27131378", "CommentCount": "0", "Body": "<p>The temporary returned ( int would be converted to Foo ) is bound to the reference c. That means life time of temporary is extended to the life time of c.</p>\n", "OwnerUserId": "4047092", "PostTypeId": "2", "Id": "27131501", "Score": "1", "CreationDate": "2014-11-25T16:08:36.777", "LastActivityDate": "2014-11-25T16:08:36.777"}, "27131378": {"CommentCount": "0", "ViewCount": "53", "CreationDate": "2014-11-25T16:02:07.467", "LastActivityDate": "2014-11-25T16:25:59.707", "Title": "Why can I bind an int to a reference of a class with an int constructor?", "AcceptedAnswerId": "27131690", "PostTypeId": "1", "Id": "27131378", "Score": "1", "Body": "<p>This code compiles fine in both VS2013 and Ideone.com (<a href=\"http://ideone.com/g9P8J7\" rel=\"nofollow\">http://ideone.com/g9P8J7</a>):</p>\n<pre><code>#include &lt;list&gt;\n#include &lt;iostream&gt;\n#include &lt;ostream&gt;\n\nclass Foo\n{\npublic:\n    Foo(int x_ = -1) : x(x_), y(-2.3f) {}\n    int x;\n    float y;\n};\n\nint main()\n{\n    std::list&lt;int&gt; myList;\n    myList.push_back(0);\n    for (auto it = std::begin(myList); it != std::end(myList); ++it)\n    {\n        Foo const&amp; c = *it;\n        std::cout &lt;&lt; c.x &lt;&lt; ' ' &lt;&lt; c.y &lt;&lt; std::endl;\n        // output: 0 -2.3\n    }\n}\n</code></pre>\n<p>Given the output, it seems like the int from <code>myList</code> is being implicitly converted into a Foo instance via the int constructor, which is then being bound to the reference variable <code>c</code>. But where does this object live? If it's a temporary then why is it still valid on the next line?</p>\n", "Tags": "<c++><reference>", "OwnerUserId": "794283", "AnswerCount": "3"}, "27131448": {"ParentId": "27131378", "CommentCount": "2", "Body": "<blockquote>\n<p id=\"so_27131378_27131448_0\">it seems like the int from <code>myList</code> is being implicitly converted into a Foo instance via the int constructor, which is then being bound to the reference variable <code>c</code>.</p>\n</blockquote>\n<p>Yes, that's exactly what happens.</p>\n<blockquote>\n<p id=\"so_27131378_27131448_1\">But where does this object live?</p>\n</blockquote>\n<p>Unspecified, but it must behave like an automatic variable with the same scope as the reference, so probably on the stack just like an automatic variable.</p>\n<blockquote>\n<p id=\"so_27131378_27131448_2\">If it's a temporary then why is it still valid on the next line?</p>\n</blockquote>\n<p>Because an obscure rule causes the lifetime of a temporary to be extended if it's used to initialise a <code>const</code> reference. Its lifetime is extended to match the reference.</p>\n", "OwnerUserId": "204847", "PostTypeId": "2", "Id": "27131448", "Score": "5", "CreationDate": "2014-11-25T16:05:46.633", "LastActivityDate": "2014-11-25T16:05:46.633"}, "bq_ids": {"n4140": {"so_27131378_27131690_1": {"section_id": 382, "quality": 0.8571428571428571, "length": 6}, "so_27131378_27131690_0": {"section_id": 381, "quality": 0.65, "length": 13}}, "n3337": {"so_27131378_27131690_1": {"section_id": 373, "quality": 0.8571428571428571, "length": 6}, "so_27131378_27131690_0": {"section_id": 372, "quality": 0.65, "length": 13}}, "n4659": {"so_27131378_27131690_1": {"section_id": 397, "quality": 0.7142857142857143, "length": 5}, "so_27131378_27131690_0": {"section_id": 396, "quality": 0.65, "length": 13}}}, "27131690": {"ParentId": "27131378", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Here the lifetime of a temporary object is extended as it initializes a reference.</p>\n<p>From Standards</p>\n<p><strong>\u00a712.2/4</strong> </p>\n<blockquote>\n<p id=\"so_27131378_27131690_0\">There are two contexts in which temporaries are destroyed at a\n  different point than the end of the fullexpression. The first context\n  is when an expression appears as an initializer for a declarator\n  defining an object. [...]</p>\n</blockquote>\n<p><strong>\u00a712.2/5</strong> </p>\n<blockquote>\n<p id=\"so_27131378_27131690_1\">The second context is when <strong><em>a reference is bound to a temporary</em></strong>.[...]</p>\n</blockquote>\n", "OwnerUserId": "1870232", "LastEditorUserId": "1870232", "LastEditDate": "2014-11-25T16:25:59.707", "Id": "27131690", "Score": "3", "CreationDate": "2014-11-25T16:19:23.030", "LastActivityDate": "2014-11-25T16:25:59.707"}});