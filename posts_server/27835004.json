post_cb({"bq_ids": {"n4140": {"so_27835004_27835102_0": {"length": 41, "quality": 0.9111111111111111, "section_id": 5402}}, "n3337": {"so_27835004_27835102_0": {"length": 41, "quality": 0.9111111111111111, "section_id": 5197}}, "n4659": {"so_27835004_27835102_0": {"length": 40, "quality": 0.8888888888888888, "section_id": 6849}}}, "27835102": {"Id": "27835102", "PostTypeId": "2", "Body": "<p>Inline <strong>functions</strong> are functions. So they are written and managed like a function.</p>\n<p>A compiler may choose to treat these functions differently (may try harder to inline those), but the interface to the user still remains as function.</p>\n<p>Moreover it is not guaranteed that inline request would be honored by the compiler.</p>\n<p>If you <code>inline</code> a function, it must be defined in each translation unit where it is used and it doesn't give multiple definition link error whether it can be inlined or not by the compiler.</p>\n<p>From <strong>7.1.2 Function specifiers [dcl.fct.spec]</strong></p>\n<blockquote>\n<p id=\"so_27835004_27835102_0\">A function declaration (8.3.5, 9.3, 11.3) with an inline specifier\n  declares an inline function. The inline specifier indicates to the\n  implementation that inline substitution of the function body at the\n  point of call is to be preferred to the usual function call mechanism.\n  An implementation is not required to perform this inline substitution\n  at the point of call; however, even if this inline substitution is\n  omitted, the other rules for inline functions defined by 7.1.2 shall\n  still be respected.</p>\n</blockquote>\n", "LastActivityDate": "2015-01-08T07:36:31.380", "CommentCount": "1", "CreationDate": "2015-01-08T07:36:31.380", "ParentId": "27835004", "Score": "3", "OwnerUserId": "2659313"}, "27835077": {"Id": "27835077", "PostTypeId": "2", "Body": "<p>Your conclusion is based on an invalid premise. Inline functions are not a macro-like facility that blindly splices the code of the function into the code of the caller. They are a request to the compiler that the function body be inlined if possible, but <em>keeping the normal semantics of the function call/execution</em>. In other words, assuming the code is correct, there should be no observable difference in behavior (other than processor and memory usage, of course) between an inlined and a non-inlined call.</p>\n<p>This definition of inline function allows their usage to avoid a number of problems associated with macro, such as clashes of local variables defined in the function with the same name as those in the caller, or calls to function with side effects in the argument (e.g. <code>print(a++)</code> will work correctly with an inline function, but not with a macro).</p>\n<p>As a result of this design, the example you provided is a compile-time error.</p>\n", "LastActivityDate": "2015-01-08T07:34:35.163", "CommentCount": "1", "CreationDate": "2015-01-08T07:34:35.163", "ParentId": "27835004", "Score": "5", "OwnerUserId": "1600898"}, "27835004": {"ViewCount": "106", "Body": "<p>One definition given for an <em>inline function</em> is </p>\n<blockquote>\n<p id=\"so_27835004_27835004_0\">If a function is inline, the compiler places a copy of the code of\n  that function at each point where the function is called at compile\n  time.</p>\n</blockquote>\n<p>Then my question is: why do we need to pass arguments to an inline function?</p>\n<p>E.g</p>\n<pre><code>void main()\n{\n    int a = 10;\n    print(a);\n}\n\ninline void print(int a)\n{\n    printf(\"%d\",a);\n}\n</code></pre>\n<p>As per the above definition of inline, there should be no compile time errors, as the compiler will translate the code to something like:</p>\n<pre><code>void main()\n{\n    int a = 10;\n    printf(\"%d\",a);\n}\n</code></pre>\n", "AcceptedAnswerId": "27835102", "Title": "Why does an inline function need pass arguments?", "CreationDate": "2015-01-08T07:29:52.397", "Id": "27835004", "CommentCount": "9", "LastEditDate": "2015-01-08T07:44:03.333", "PostTypeId": "1", "LastEditorUserId": "3237253", "LastActivityDate": "2015-01-08T07:44:03.333", "Score": "-2", "OwnerUserId": "3237253", "Tags": "<c++><c>", "AnswerCount": "2"}});