post_cb({"12924726": {"ParentId": "12924694", "CommentCount": "4", "Body": "<p>The sizeof operator have two forms:</p>\n<pre><code>sizeof expression\nsizeof(type)\n</code></pre>\n<p>As you're giving it a type, you need the parenthesis, <code>sizeof(tmp)</code></p>\n", "OwnerUserId": "126769", "PostTypeId": "2", "Id": "12924726", "Score": "11", "CreationDate": "2012-10-16T22:58:36.163", "LastActivityDate": "2012-10-16T22:58:36.163"}, "12924710": {"ParentId": "12924694", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>add parentheses around <code>tmp</code>: <code>sizeof(tmp)</code></p>\n", "OwnerUserId": "808640", "LastEditorUserId": "673730", "LastEditDate": "2012-10-16T23:12:52.463", "Id": "12924710", "Score": "3", "CreationDate": "2012-10-16T22:57:26.983", "LastActivityDate": "2012-10-16T23:12:52.463"}, "12924707": {"ParentId": "12924694", "PostTypeId": "2", "CommentCount": "1", "Body": "<h3>5.3.3 Sizeof [expr.sizeof]</h3>\n<blockquote>\n<p id=\"so_12924694_12924707_0\">1) The <code>sizeof</code> operator yields the number of bytes in the object representation of its operand. The operand is\n  either an expression, which is an unevaluated operand (Clause 5), <strong>or a parenthesized <em>type-id</em>.</strong> (emphasis mine)</p>\n</blockquote>\n<p>In your case, it is a <em>type-id</em> so it must be parenthesized. What a type-id is is described in <strong>8.1 Type names [dcl.name]</strong>.</p>\n<p><code>sizeof tmp</code> should be <code>sizeof (tmp)</code>.</p>\n<p>As in</p>\n<p><code>if (c &lt;= sizeof tmp)</code> should be <code>if (c &lt;= sizeof (tmp))</code>.</p>\n<p>Yup, pretty \"obvious and straightforward\".</p>\n", "OwnerUserId": "673730", "LastEditorUserId": "673730", "LastEditDate": "2012-10-16T23:10:14.620", "Id": "12924707", "Score": "9", "CreationDate": "2012-10-16T22:56:58.740", "LastActivityDate": "2012-10-16T23:10:14.620"}, "12924694": {"CommentCount": "1", "AcceptedAnswerId": "12924707", "CreationDate": "2012-10-16T22:55:37.357", "LastActivityDate": "2015-04-30T14:38:18.497", "PostTypeId": "1", "ViewCount": "3932", "FavoriteCount": "1", "Title": "Using sizeof operator on a typedef-ed struct", "Id": "12924694", "Score": "7", "Body": "<p>This might be something too obvious. However, I couldn't find the specific answer though many stackoverflow threads talk about different aspects of this.</p>\n<pre><code>typedef struct _tmp {\n   unsigned int a;\n   unsigned int b;\n} tmp;\n\nint main()\n{\n    int c=10;\n    if (c &lt;= sizeof tmp) {\n       printf(\"less\\n\");\n    } else {\n       printf(\"more\\n\");\n    }\n    return 0;\n}\n</code></pre>\n<p>I compile this prog as - </p>\n<pre><code>g++ -lstdc++ a.cpp\n</code></pre>\n<p>I get an error - </p>\n<pre><code>expected primary-expression before \u2018)\u2019 token\n</code></pre>\n<p>I think I am missing something very obvious and straightforward. But can't seem to pinpoint it :-/</p>\n<p>Thanks! </p>\n", "Tags": "<c++><typedef>", "OwnerUserId": "922421", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_12924694_12924707_0": {"section_id": 6076, "quality": 0.8095238095238095, "length": 17}}, "n3337": {"so_12924694_12924707_0": {"section_id": 5844, "quality": 0.8095238095238095, "length": 17}}, "n4659": {"so_12924694_12924707_0": {"section_id": 7572, "quality": 0.8095238095238095, "length": 17}}}});