post_cb({"38570582": {"CommentCount": "2", "Body": "<p>This is illegal for sequential containers, like <code>vector</code> or <code>deque</code>.</p>\n<blockquote>\n<p id=\"so_38570267_38570582_0\"><strong>[sequence.reqmts]/4</strong> Table 100</p>\n<p id=\"so_38570267_38570582_1\"><code>a.assign(i,j)</code> pre: <code>i</code>, <code>j</code> are not iterators into <code>a</code></p>\n</blockquote>\n<p>But I believe it's explicitly made valid for <code>std::string</code>:</p>\n<blockquote>\n<p id=\"so_38570267_38570582_2\"><strong>[string::assign]/20</strong></p>\n<pre><code>template&lt;class InputIterator&gt;\nbasic_string&amp; assign(InputIterator first, InputIterator last);\n</code></pre>\n<p id=\"so_38570267_38570582_3\"><em>Effects</em>: Equivalent to <code>assign(basic_string(first, last))</code>.</p>\n</blockquote>\n<p>The standard requires that the implementation make a copy of the sequence before performing the assignment (or at least, behave as if it does). There is no requirement I can see that iterators not point into the string being assigned.</p>\n<p>I'm not sure why it doesn't work this way for containers, but if I had to guess, I'd say it's precisely to avoid forcing the implementation to make extra copies.</p>\n", "CreationDate": "2016-07-25T14:33:20.443", "ParentId": "38570267", "Id": "38570582", "LastActivityDate": "2016-07-25T14:33:20.443", "PostTypeId": "2", "Score": "3", "OwnerUserId": "1670129"}, "bq_ids": {"n4140": {"so_38570267_38570582_1": {"length": 4, "quality": 1.0, "section_id": 723}}, "n3337": {"so_38570267_38570582_1": {"length": 4, "quality": 1.0, "section_id": 712}}}, "38570267": {"CreationDate": "2016-07-25T14:19:24.230", "ViewCount": "62", "Id": "38570267", "Score": "1", "Title": "why the iterators can't refer to the container they belong to when container calls assign?", "LastEditorUserId": "845092", "CommentCount": "4", "Body": "<pre><code>string s=\"zhangzhizhong\";\ns.assign(s.begin()+2, s.end()-2);\nstring is correct!\nvector&lt;int&gt; ivec{0,1,2,3,4,5}; \nivec.assign(ivec.begin()+1, ivec.end()-1); \nvector is also correct!!!\n</code></pre>\n<p>The above code is correct, but what is written in the book is that the iterators can't refer to the container they belong to when container calls <code>assign()</code>.</p>\n", "Tags": "<c++><c++11><codeblocks>", "LastEditDate": "2016-07-26T01:00:04.103", "LastActivityDate": "2016-07-26T01:00:04.103", "PostTypeId": "1", "AnswerCount": "1", "OwnerUserId": "6635492"}});