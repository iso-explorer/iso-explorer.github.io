post_cb({"bq_ids": {"n4140": {"so_12063821_12063878_0": {"length": 6, "quality": 1.0, "section_id": 3876}}, "n3337": {"so_12063821_12063878_0": {"length": 6, "quality": 1.0, "section_id": 3736}}, "n4659": {"so_12063821_12063878_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 4690}}}, "12063821": {"ViewCount": "1098", "Body": "<p>What is the difference between the nextafter and the nexttoward functions of the C++ 2011 standard library ?</p>\n", "AcceptedAnswerId": "12063878", "Title": "nextafter vs nexttoward functions in C++ 2011?", "CreationDate": "2012-08-21T22:12:37.550", "Id": "12063821", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2012-08-21T22:18:56.017", "Score": "14", "OwnerUserId": "882932", "Tags": "<c++><floating-point><c++11><c++-standard-library>", "AnswerCount": "2"}, "12063878": {"Id": "12063878", "PostTypeId": "2", "Body": "<p>Since the functions originate from C, they can't be overloaded, which means two different names for functions that do the same but have different parameter(-type)s. Here are the original signatures:</p>\n<pre><code>float nextafter(float, float);\nfloat nexttoward(float, long double);\n</code></pre>\n<p>And now the standard just says there should be <a href=\"http://en.cppreference.com/w/cpp/numeric/math/nextafter\" rel=\"noreferrer\">a few overloads</a> to make things nicer in C++ (<code>\u00a726.8 [c.math] p11</code>):</p>\n<blockquote>\n<p id=\"so_12063821_12063878_0\">Moreover, there shall be additional overloads sufficient to ensure:</p>\n<ol>\n<li>If any argument corresponding to a <code>double</code> parameter has type <code>long double,</code> then all arguments corresponding to <code>double</code> parameters are effectively cast to <code>long double</code>.</li>\n<li>Otherwise, if any argument corresponding to a <code>double</code> parameter has type <code>double</code> or an integer type, then all arguments corresponding to <code>double</code> parameters are effectively cast to <code>double</code>.</li>\n<li>Otherwise, all arguments corresponding to <code>double</code> parameters are effectively cast to <code>float</code>.</li>\n</ol>\n<p id=\"so_12063821_12063878_1\">See also: ISO C 7.5, 7.10.2, 7.10.6.</p>\n</blockquote>\n", "LastActivityDate": "2012-08-21T22:18:56.017", "CommentCount": "0", "CreationDate": "2012-08-21T22:18:56.017", "ParentId": "12063821", "Score": "12", "OwnerUserId": "500104"}, "12063847": {"Id": "12063847", "PostTypeId": "2", "Body": "<p>Read man page:</p>\n<blockquote>\n<p id=\"so_12063821_12063847_0\">The  nexttoward()  functions  do  the  same as the nextafter() functions, except that they have a long double second argument.</p>\n</blockquote>\n", "LastActivityDate": "2012-08-21T22:15:25.443", "CommentCount": "1", "CreationDate": "2012-08-21T22:15:25.443", "ParentId": "12063821", "Score": "1", "OwnerUserId": "971786"}});