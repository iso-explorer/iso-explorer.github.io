post_cb({"bq_ids": {"n4140": {"so_33021636_33021890_0": {"length": 35, "quality": 1.0, "section_id": 257}}, "n3337": {"so_33021636_33021890_0": {"length": 33, "quality": 0.9428571428571428, "section_id": 248}}, "n4659": {"so_33021636_33021890_0": {"length": 35, "quality": 1.0, "section_id": 264}}}, "33021636": {"ViewCount": "289", "Body": "<p>I'm trying to compile with explicit template instatiation only.</p>\n<p>Consider this dummy snippet</p>\n<pre><code>#include &lt;vector&gt;\n\ntemplate struct std::allocator&lt;int&gt;;\ntemplate struct std::vector&lt;int, std::allocator&lt;int&gt;&gt;;\n\nvoid fun(){\n  std::vector&lt;int&gt; v;\n}\n\nint main (){\n  fun();\n};\n</code></pre>\n<p>I would like to compile it with</p>\n<pre><code>g++ -std=c++11  -fno-implicit-templates fun.cc \n</code></pre>\n<p>I expected this to work, however it complains of unresolved references to <code>std::vector</code> member functions. Shouldn't member functions be automatically instantiated along with the <code>std::vector</code> class? How can I make it work?</p>\n<p>The compiler error is:</p>\n<pre><code>/tmp/cc1QxQUn.o: In function `std::vector&lt;int, std::allocator&lt;int&gt; &gt;::push_back(int const&amp;)':\nvec.cc:(.text._ZNSt6vectorIiSaIiEE9push_backERKi[_ZNSt6vectorIiSaIiEE9push_backERKi]+0x65): undefined reference to `void std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_emplace_back_aux&lt;int const&amp;&gt;(int const&amp;)'\n/tmp/cc1QxQUn.o: In function `std::vector&lt;int, std::allocator&lt;int&gt; &gt;::push_back(int&amp;&amp;)':\nvec.cc:(.text._ZNSt6vectorIiSaIiEE9push_backEOi[_ZNSt6vectorIiSaIiEE9push_backEOi]+0x2a): undefined reference to `void std::vector&lt;int, std::allocator&lt;int&gt; &gt;::emplace_back&lt;int&gt;(int&amp;&amp;)'\n/tmp/cc1QxQUn.o: In function `std::vector&lt;int, std::allocator&lt;int&gt; &gt;::insert(__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int const&amp;)':\nvec.cc:(.text._ZNSt6vectorIiSaIiEE6insertEN9__gnu_cxx17__normal_iteratorIPKiS1_EERS4_[_ZNSt6vectorIiSaIiEE6insertEN9__gnu_cxx17__normal_iteratorIPKiS1_EERS4_]+0x14d): undefined reference to `void std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_insert_aux&lt;int&gt;(__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int&amp;&amp;)'\nvec.cc:(.text._ZNSt6vectorIiSaIiEE6insertEN9__gnu_cxx17__normal_iteratorIPKiS1_EERS4_[_ZNSt6vectorIiSaIiEE6insertEN9__gnu_cxx17__normal_iteratorIPKiS1_EERS4_]+0x166): undefined reference to `void std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_insert_aux&lt;int const&amp;&gt;(__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int const&amp;)'\n/tmp/cc1QxQUn.o: In function `std::vector&lt;int, std::allocator&lt;int&gt; &gt;::insert(__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int&amp;&amp;)':\nvec.cc:(.text._ZNSt6vectorIiSaIiEE6insertEN9__gnu_cxx17__normal_iteratorIPKiS1_EEOi[_ZNSt6vectorIiSaIiEE6insertEN9__gnu_cxx17__normal_iteratorIPKiS1_EEOi]+0x32): undefined reference to `__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; std::vector&lt;int, std::allocator&lt;int&gt; &gt;::emplace&lt;int&gt;(__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int&amp;&amp;)'\n/tmp/cc1QxQUn.o: In function `void std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_assign_dispatch&lt;int const*&gt;(int const*, int const*, std::__false_type)':\nvec.cc:(.text._ZNSt6vectorIiSaIiEE18_M_assign_dispatchIPKiEEvT_S5_St12__false_type[_ZNSt6vectorIiSaIiEE18_M_assign_dispatchIPKiEEvT_S5_St12__false_type]+0x2d): undefined reference to `void std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_assign_aux&lt;int const*&gt;(int const*, int const*, std::forward_iterator_tag)'\n/tmp/cc1QxQUn.o: In function `void std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_insert_dispatch&lt;int const*&gt;(__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int const*, int const*, std::__false_type)':\nvec.cc:(.text._ZNSt6vectorIiSaIiEE18_M_insert_dispatchIPKiEEvN9__gnu_cxx17__normal_iteratorIPiS1_EET_S9_St12__false_type[_ZNSt6vectorIiSaIiEE18_M_insert_dispatchIPKiEEvN9__gnu_cxx17__normal_iteratorIPiS1_EET_S9_St12__false_type]+0x32): undefined reference to `void std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_range_insert&lt;int const*&gt;(__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int const*, int const*, std::forward_iterator_tag)'\n/tmp/cc1QxQUn.o: In function `void std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_assign_dispatch&lt;std::move_iterator&lt;__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt; &gt;(std::move_iterator&lt;__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::move_iterator&lt;__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__false_type)':\nvec.cc:(.text._ZNSt6vectorIiSaIiEE18_M_assign_dispatchISt13move_iteratorIN9__gnu_cxx17__normal_iteratorIPiS1_EEEEEvT_S9_St12__false_type[_ZNSt6vectorIiSaIiEE18_M_assign_dispatchISt13move_iteratorIN9__gnu_cxx17__normal_iteratorIPiS1_EEEEEvT_S9_St12__false_type]+0x2d): undefined reference to `void std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_assign_aux&lt;std::move_iterator&lt;__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt; &gt;(std::move_iterator&lt;__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::move_iterator&lt;__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::forward_iterator_tag)'\ncollect2: error: ld returned 1 exit status\n</code></pre>\n", "AcceptedAnswerId": "33021890", "Title": "Explicit template instantiation", "CreationDate": "2015-10-08T16:49:44.617", "Id": "33021636", "CommentCount": "0", "LastEditDate": "2015-10-08T17:06:13.657", "PostTypeId": "1", "LastEditorUserId": "2069064", "LastActivityDate": "2015-10-08T17:06:13.657", "Score": "3", "OwnerUserId": "1084774", "Tags": "<c++><templates><c++11>", "AnswerCount": "1"}, "33021890": {"Id": "33021890", "PostTypeId": "2", "Body": "<p>From [temp.explicit]:</p>\n<blockquote>\n<p id=\"so_33021636_33021890_0\">An explicit instantiation that names a class template specialization is also an explicit instantiation of the\n  same kind (declaration or definition) of each of its members (<strong>not including</strong> members inherited from base\n  classes and <strong>members that are templates</strong>) that has not been previously explicitly specialized in the translation\n  unit containing the explicit instantiation, except as described below.</p>\n</blockquote>\n<p>So while you're explicitly instantiating <code>std::vector&lt;int&gt;</code>, you're not instantiating any of its member function templates - so you're getting undefined references for all of those (e.g. <code>_M_emplace_back_aux</code> is a function template). You'd have to add all of those explicitly:</p>\n<pre><code>template void std::vector&lt;int&gt;::_M_emplace_back_aux&lt;int&gt;(int&amp;&amp; );\ntemplate void std::vector&lt;int&gt;::_M_emplace_back_aux&lt;const int&amp;&gt;(const int&amp; );\ntemplate void std::vector&lt;int&gt;::_M_assign_aux&lt;int const*&gt;(int const*, int const*, std::forward_iterator_tag);\n...\n</code></pre>\n<p>Or just - let implicit instantiation just do its thing. </p>\n", "LastActivityDate": "2015-10-08T17:03:23.320", "CommentCount": "0", "CreationDate": "2015-10-08T17:03:23.320", "ParentId": "33021636", "Score": "3", "OwnerUserId": "2069064"}});