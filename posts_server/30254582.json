post_cb({"bq_ids": {"n4140": {"so_30254582_30869374_2": {"length": 19, "quality": 1.0, "section_id": 7216}, "so_30254582_30869374_0": {"length": 5, "quality": 0.7142857142857143, "section_id": 1166}, "so_30254582_30869374_1": {"length": 17, "quality": 0.7083333333333334, "section_id": 1178}}, "n3337": {"so_30254582_30869374_1": {"length": 17, "quality": 0.7083333333333334, "section_id": 1176}, "so_30254582_30869374_2": {"length": 19, "quality": 1.0, "section_id": 6960}, "so_30254582_30869374_0": {"length": 5, "quality": 0.7142857142857143, "section_id": 1164}}, "n4659": {"so_30254582_30869374_2": {"length": 19, "quality": 1.0, "section_id": 8725}}}, "30869374": {"Id": "30869374", "PostTypeId": "2", "Body": "<p>The <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf\" rel=\"nofollow\">C++11 N3337 draft</a> does not require that method for <code>bool</code>.</p>\n<p>29.5 \"Atomic types\"</p>\n<pre><code>template &lt;class T&gt; struct atomic {\n  [...]\n}\n\ntemplate &lt;&gt; struct atomic&lt;integral&gt; {\n  [...]\n  integral fetch_or(integral , memory_order = memory_order_seq_cst) noexcept;\n  [...]\n}\n</code></pre>\n<p>29.5/1:</p>\n<blockquote>\n<p id=\"so_30254582_30869374_0\">The semantics of the operations on specializations of atomic are defined in 29.6.</p>\n</blockquote>\n<p>29.6.3/2 \"Arithmetic operations on atomic types\":</p>\n<blockquote>\n<p id=\"so_30254582_30869374_1\">In the declarations of these functions and function template specializations, the name integral refers to an integral type and the name atomic-integral refers to either atomic or to a named base class for integral from Table 145 or inferred from Table 146.</p>\n</blockquote>\n<p>and Table 145 does not contain <code>bool</code>.</p>\n<p>So only the integral (without <code>bool</code>) specializations of <code>struct</code> will have that method.</p>\n<p>This is a bit confusing because in the rest of the standard, \"integral types\" includes bool, 3.9.1/7 \"Fundamental types\":</p>\n<blockquote>\n<p id=\"so_30254582_30869374_2\">Types bool, char, char16_t, char32_t, wchar_t, and the signed and unsigned integer types are collectively called integral types. A synonym for integral type is integer type.</p>\n</blockquote>\n", "LastActivityDate": "2015-06-16T13:42:23.683", "CommentCount": "0", "CreationDate": "2015-06-16T13:42:23.683", "ParentId": "30254582", "Score": "2", "OwnerUserId": "895245"}, "30254582": {"ViewCount": "316", "Body": "<p>With this excerpt of code:</p>\n<pre><code>class myclass {\n    volatile std::atomic&lt;bool&gt; flag;\n    public:\n    myclass(): flag(false) {}\n    bool get_flag() { return flag; }\n    bool try_set() {\n        return !flag.fetch_or(flag, true);\n    }\n    void reset() {\n        flag = false;\n    }\n};\n</code></pre>\n<p>I am having this compile error:</p>\n<pre><code>error: \u2018volatile struct std::atomic&lt;bool&gt;\u2019 has no member named \u2018fetch_or\u2019   \n   return !flag.fetch_or(flag, true);\n</code></pre>\n<p>It compiles if, however, I change the template parameter to <code>int</code>:</p>\n<pre><code>class myclass {\n    volatile std::atomic&lt;int&gt; flag;\n    public:\n    myclass(): flag(0) {}\n    bool get_flag() { return flag; }\n    bool try_set() {\n        return !flag.fetch_or(flag, true);\n    }\n    void reset() {\n        flag = 0;\n    }\n};\n</code></pre>\n<p>The <a href=\"http://en.cppreference.com/w/cpp/atomic/atomic\" rel=\"nofollow\">atomic</a> reference says that \"the full specialization <code>atomic&lt;bool&gt;</code>\" is treated as \"non-specialized\", what I believe to be the source of the problems. So my doubts:</p>\n<ol>\n<li>How can a \"full specialization\" be \"treated as non-specialized\"? </li>\n<li>May there I face any tricky pitfalls using as flag template parameter <code>int</code> instead of <code>bool</code> when calling <code>flag.fetch_or()</code>?</li>\n</ol>\n<p>I am using gcc 5.1.0, and compiling with <code>-std=c++14</code>. </p>\n", "AcceptedAnswerId": "30869374", "Title": "c++ std::atomic<bool>::fetch_or not implemented?", "CreationDate": "2015-05-15T08:08:35.580", "Id": "30254582", "CommentCount": "4", "LastEditDate": "2015-05-15T12:06:31.473", "PostTypeId": "1", "LastEditorUserId": "533510", "LastActivityDate": "2015-06-16T13:42:23.683", "Score": "3", "OwnerUserId": "533510", "Tags": "<c++><embedded><atomicity>", "AnswerCount": "1"}});