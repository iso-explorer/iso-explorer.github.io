post_cb({"21210445": {"ParentId": "21210310", "CommentCount": "2", "Body": "<blockquote>\n<p id=\"so_21210310_21210445_0\">If the de\ufb01nition of a class X does not explicitly declare a move constructor, one will be implicitly declared as defaulted if and only if</p>\n<ul>\n<li>X does not have a user-declared copy constructor</li>\n<li>[and ...]</li>\n</ul>\n</blockquote>\n<p>Since the copy constructor is user-declared (even though it is defaulted, which means it is not <em>user-provided</em>), a move constructor will not be implicitly declared as defaulted.</p>\n<p>You're right that if you were to explicitly <code>delete</code> the move constructor, you would not be able to construct from temporaries because the deleted move constructor would be chosen by overload resolution. So the approach you have used for a copyable but not moveable class is the right one.</p>\n", "OwnerUserId": "150634", "PostTypeId": "2", "Id": "21210445", "Score": "2", "CreationDate": "2014-01-18T22:01:23.067", "LastActivityDate": "2014-01-18T22:01:23.067"}, "21210452": {"ParentId": "21210310", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Relative to your example the compiler will implicitly declare a move constructor because the first declaration of your copy constructor is the default definition. In this case the copy constructor is considered as implicitly defined. But if you would change your class definition the following way</p>\n<pre><code>class C {\n    public:\n    int i_;\n    C(const C&amp;);\n};\n\nC::C( const C &amp; ) = default;\n</code></pre>\n<p>then in this case the move constructor would not be generated by the compiler becasue the copy constructor is explicitly declared by the user. </p>\n", "OwnerUserId": "2877241", "LastEditorUserId": "2877241", "LastEditDate": "2014-01-18T22:11:35.997", "Id": "21210452", "Score": "0", "CreationDate": "2014-01-18T22:02:17.123", "LastActivityDate": "2014-01-18T22:11:35.997"}, "bq_ids": {"n4140": {"so_21210310_21210394_0": {"section_id": 458, "quality": 1.0, "length": 12}, "so_21210310_21210445_0": {"section_id": 458, "quality": 0.9166666666666666, "length": 11}}, "n3337": {"so_21210310_21210394_0": {"section_id": 449, "quality": 1.0, "length": 12}, "so_21210310_21210445_0": {"section_id": 449, "quality": 0.9166666666666666, "length": 11}}, "n4659": {"so_21210310_21210394_0": {"section_id": 481, "quality": 1.0, "length": 12}, "so_21210310_21210445_0": {"section_id": 481, "quality": 0.9166666666666666, "length": 11}}}, "21210310": {"CommentCount": "0", "ViewCount": "85", "CreationDate": "2014-01-18T21:46:53.803", "LastActivityDate": "2014-01-18T22:11:35.997", "Title": "Will move constructor and move assignment be generated if I default the copy constructor?", "AcceptedAnswerId": "21210445", "PostTypeId": "1", "Id": "21210310", "Score": "0", "Body": "<p>I am a little confused about how best to define a copyable but not moveable class. It seems to me that deleting the move constructor is a bad idea because then I couldn't construct from a temporary. On the other hand I don't want the compiler to implicitly generate a move constructor for me that may be wrong or may lead to unexpected behavior. My question is whether the compiler is allowed to implicitly generate a move constructor for the following class:</p>\n<pre><code>class C {\n    public:\n    int i_;\n    C(const C&amp;) = default;\n}\n</code></pre>\n", "Tags": "<c++><move-semantics><default-constructor>", "OwnerUserId": "893819", "AnswerCount": "3"}, "21210394": {"ParentId": "21210310", "CommentCount": "1", "Body": "<p>[class.copy]/9 after <a href=\"http://www.open-std.org/JTC1/SC22/WG21/docs/cwg_defects.html#1402\" rel=\"nofollow\">CWG 1402</a>:</p>\n<blockquote>\n<p id=\"so_21210310_21210394_0\">If the definition of a class <code>X</code> does not explicitly declare a move constructor, one will be implicitly declared as defaulted if and only if</p>\n<ul>\n<li><code>X</code> does not have a user-declared copy constructor,</li>\n<li><code>X</code> does not have a user-declared copy assignment operator,</li>\n<li><code>X</code> does not have a user-declared move assignment operator, and</li>\n<li><code>X</code> does not have a user-declared destructor.</li>\n</ul>\n</blockquote>\n", "OwnerUserId": "420683", "PostTypeId": "2", "Id": "21210394", "Score": "4", "CreationDate": "2014-01-18T21:55:57.410", "LastActivityDate": "2014-01-18T21:55:57.410"}});