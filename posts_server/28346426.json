post_cb({"28346853": {"Id": "28346853", "PostTypeId": "2", "Body": "<p>We can make a simpler example that compiles on neither g++ 4.9 nor clang:</p>\n<pre><code>template &lt;typename T&gt;\nvoid call(T&amp; ) {  }\n\nstruct A { \n    void foo() { call(this); }\n};\n\nint main()\n{\n    A().foo();\n}\n</code></pre>\n<p>That is because <code>this</code> is, from the standard, [class.this] (\u00a79.3.2):</p>\n<blockquote>\n<p id=\"so_28346426_28346853_0\">In the body of a non-static (9.3) member function, the keyword <code>this</code> is a <strong>prvalue expression</strong> whose value\n  is the address of the object for which the function is called.</p>\n</blockquote>\n<p>You cannot take an lvalue reference to a prvalue, hence the error - which gcc explains better than clang in this case:</p>\n<blockquote>\n<p id=\"so_28346426_28346853_1\">error: invalid initialization of non-const reference of type <code>A*&amp;</code> from an rvalue of type <code>A*</code></p>\n</blockquote>\n<p>If we rewrite <code>call</code> to either take a <code>const T&amp;</code> or a <code>T&amp;&amp;</code>, both compilers accept the code. </p>\n", "LastActivityDate": "2015-02-05T14:44:55.443", "CommentCount": "4", "CreationDate": "2015-02-05T14:44:55.443", "ParentId": "28346426", "Score": "3", "OwnerUserId": "2069064"}, "bq_ids": {"n4140": {"so_28346426_28346853_0": {"length": 13, "quality": 1.0, "section_id": 5895}, "so_28346426_28346853_1": {"length": 5, "quality": 0.625, "section_id": 5}}, "n3337": {"so_28346426_28346853_0": {"length": 13, "quality": 1.0, "section_id": 5666}, "so_28346426_28346853_1": {"length": 5, "quality": 0.625, "section_id": 2}}, "n4659": {"so_28346426_28346853_0": {"length": 13, "quality": 1.0, "section_id": 7378}, "so_28346426_28346853_1": {"length": 5, "quality": 0.625, "section_id": 5}}}, "28346689": {"Id": "28346689", "PostTypeId": "2", "Body": "<p>This didn't compile for me with gcc-4.6, so it seems that gcc-4.8 is where the regression occurred.  It seems what you want is to take <code>A1</code> by universal reference, ie: <code>PImpl(A1 &amp;&amp; a1)</code>.  This compiles for me with both gcc-4.6, gcc-4.8 and gcc-4.9.</p>\n", "LastActivityDate": "2015-02-05T14:37:23.353", "CommentCount": "1", "CreationDate": "2015-02-05T14:37:23.353", "ParentId": "28346426", "Score": "1", "OwnerUserId": "1277769"}, "28346426": {"ViewCount": "219", "Body": "<p>This is a minimized part of Pointer to implementation code:</p>\n<pre><code>template&lt;typename T&gt;\nclass PImpl {\nprivate:\n  T* m;\npublic:\n\n  template&lt;typename A1&gt; \n  PImpl(A1&amp; a1) : m(new T(a1)) {\n  }\n};\n\nstruct A{\n    struct AImpl;\n    PImpl&lt;AImpl&gt; me;\n    A();\n};\n\nstruct A::AImpl{\n    const A* ppub;\n    AImpl(const A* ppub)\n    :ppub(ppub){}\n};\nA::A():me(this){}\n\nA a;\nint main (int, char**){\n    return 0;\n}\n</code></pre>\n<p>It compilable on G++4.8 and prior and works as well. But G++4.9.2 compiler raise following errors:</p>\n<pre><code>prog.cpp: In constructor 'A::A()':\nprog.cpp:24:15: error: no matching function for call to 'PImpl&lt;A::AImpl&gt;::PImpl(A*)'\n A::A():me(this){}\n               ^\nprog.cpp:24:15: note: candidates are:\nprog.cpp:9:5: note: PImpl&lt;T&gt;::PImpl(A1&amp;) [with A1 = A*; T = A::AImpl]\n   &gt; PImpl(A1&amp; a1) : m(new T(a1)) {\n     ^\nprog.cpp:9:5: note:   no known conversion for argument 1 from 'A*' to 'A*&amp;'\nprog.cpp:2:7: note: PImpl&lt;A::AImpl&gt;::PImpl(const PImpl&lt;A::AImpl&gt;&amp;)\n class PImpl {\n       ^\nprog.cpp:2:7: note:   no known conversion for argument 1 from 'A*' to 'const PImpl&lt;A::AImpl&gt;&amp;'\n</code></pre>\n<p>But it can be fixed by small hack. If i pass '<strong>&amp;*this</strong>' instead of '<strong>this</strong>' then it bring to compilable state.</p>\n<p>Is it G++ regression or new C++ standards feature which eliminate backward compatibility?</p>\n", "Title": "g++ 4.9.2 regression on pass reference to 'this'", "CreationDate": "2015-02-05T14:23:39.153", "LastActivityDate": "2015-02-05T14:44:55.443", "CommentCount": "0", "PostTypeId": "1", "Id": "28346426", "Score": "3", "OwnerUserId": "3597240", "Tags": "<c++><gcc4.9><g++4.9>", "AnswerCount": "2"}});