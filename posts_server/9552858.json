post_cb({"9553889": {"ParentId": "9552858", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The ISO C++ standard really does not establish a very clear distinction. It does provide a formal definition for container (23.2.1):</p>\n<blockquote>\n<p id=\"so_9552858_9553889_0\">Containers are objects that store other objects.</p>\n</blockquote>\n<p>... yet it provides no such formal definition for <em>collection</em> and uses that term a bit more generally. It describes tuple, for example, as a <em>collection</em> of objects, even though by the very definition above, it is also a <em>container</em>.</p>\n<blockquote>\n<p id=\"so_9552858_9553889_1\">Collections : Stores variable number of objects. Ex. list, set...</p>\n<p id=\"so_9552858_9553889_2\">Containers : DataStructures? Ex. dequeue, stack..</p>\n<p id=\"so_9552858_9553889_3\">But I thought collections like list, tree etc are data structures,\n  then what are containers. Also what does this mean..</p>\n</blockquote>\n<p>As far as I see it, and the standard does not specify anything to the contrary, these are both collections and containers. They also happen to be data structures, but 'data structure' is a very general computer science term for any kind of aggregate which organizes data in some way.</p>\n<p>With C++, where you'll find a more useful distinction is in concepts that the original STL, as conceived by Stephanov, defined.</p>\n<blockquote>\n<p id=\"so_9552858_9553889_4\">A Sequence is a variable-sized Container whose elements are arranged\n  in a strict linear order. It supports insertion and removal of\n  elements.</p>\n</blockquote>\n<p>The above describes containers like <code>list</code>, <code>deque</code>, and <code>vector</code>.</p>\n<blockquote>\n<p id=\"so_9552858_9553889_5\">A Sorted Associative Container is a type of Associative Container.\n  Sorted Associative Containers use an ordering relation on their keys;\n  two keys are considered to be equivalent if neither one is less than\n  the other. (If the ordering relation is case-insensitive string\n  comparison, for example, then the keys \"abcde\" and \"aBcDe\" are\n  equivalent.)</p>\n</blockquote>\n<p>The above describes containers like <code>set</code> and <code>map</code>.</p>\n<blockquote>\n<p id=\"so_9552858_9553889_6\">A Pair Associative Container is an Associative Container that\n  associates a key with some other object. The value type of a Pair\n  Associative Container is pair. [1]</p>\n</blockquote>\n<p>The above describes containers like <code>map</code>.</p>\n<p>As to further reading on this subject with respects to the slight semantic differences: <a href=\"https://stackoverflow.com/questions/694387/oop-terminology-container-collection\">OOP Terminology: \"Container\" &amp; \"Collection\"</a></p>\n", "OwnerUserId": "374980", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:07:11.813", "Id": "9553889", "Score": "5", "CreationDate": "2012-03-04T09:51:05.180", "LastActivityDate": "2012-03-04T10:06:28.120"}, "9552985": {"ParentId": "9552858", "CommentCount": "1", "Body": "<p>\"\n<em>The C++ language standard (ISO/IEC 14882-1998[E]) says in Clause 23 that containers are \"components that C++ programs may use to organize collections of information,\" and adds: \"Containers are objects that store other objects. They control allocation and deallocation of these objects through constructors, destructors, insert and erase operations.\" It goes on to list the two general types of containers: sequences and associative containers.</em></p>\n<p><em>The C++ standard says, \"A sequence is a kind of container that organizes a finite set of objects, all of the same type, into a strictly linear arrangement.\" The three types of sequences are vector, list, and deque.</em> </p>\n<p><strong><em>C++ Containers Cannot Contain Mixed Types!</em></strong> </p>\n<p><em>Perhaps the most useful C# collection isn't considered a collection at all. C# arrays are much more powerful than C++ arrays, and they natively support many operations that require a class in C++. For instance, the Length property tells you the number of elements in the array, like the size() method in C++ containers.</em> \n\"</p>\n<p>take from <a href=\"http://soa.sys-con.com/node/39460\" rel=\"noreferrer\">http://soa.sys-con.com/node/39460</a>, you can read this article for good understand of Container and Collection concepts.</p>\n", "OwnerUserId": "793934", "PostTypeId": "2", "Id": "9552985", "Score": "7", "CreationDate": "2012-03-04T06:50:44.360", "LastActivityDate": "2012-03-04T06:50:44.360"}, "9554033": {"ParentId": "9552858", "CommentCount": "0", "Body": "<p>The difference is more of taste than substance, but the feeling I have when listening the two terminologies is that</p>\n<ul>\n<li>container \"has\" the values it contains</li>\n<li>collection \"owns\" the object it refers.</li>\n</ul>\n<p>This is clearly subjective, but considering how C++ container are implemented (value semantics) and how Java colloection behave (polymorphism of the objects), and what Java variable technically are (autodereferenced pointers) it is probably all due to the value/pointer semantics.</p>\n<p>A C++ container cannot be polymorphic in values, but can be homomorphic in pointers to polymorphic values, so a C++ <code>collection&lt;T&gt;</code> can just be a <code>container&lt;unique_ptr&lt;T&gt; &gt;</code> (choose the container you want to concretize), where <code>container&lt;T&gt;</code> has no strict java correspondence.</p>\n", "OwnerUserId": "924727", "PostTypeId": "2", "Id": "9554033", "Score": "2", "CreationDate": "2012-03-04T10:12:52.253", "LastActivityDate": "2012-03-04T10:12:52.253"}, "9553091": {"ParentId": "9552858", "CommentCount": "0", "Body": "<p>Java doesn't really use the term \"container,\" except in the context of AWT GUI components, in which a <code>Container</code> represents a GUI component that can contain other components.</p>\n<p><code>Collection</code> is used in Java for data structures that contain objects, as you describe.</p>\n<p>Computer science in general tends to treat them as more or less synonymous.</p>\n", "OwnerUserId": "869736", "PostTypeId": "2", "Id": "9553091", "Score": "6", "CreationDate": "2012-03-04T07:13:03.077", "LastActivityDate": "2012-03-04T07:13:03.077"}, "9552858": {"CommentCount": "1", "AcceptedAnswerId": "9553091", "CreationDate": "2012-03-04T06:27:23.973", "LastActivityDate": "2012-03-04T10:12:52.253", "PostTypeId": "1", "ViewCount": "4311", "FavoriteCount": "1", "Title": "Difference between Collection and Container", "Id": "9552858", "Score": "4", "Body": "<p>I am little confused about the difference between containers and collections. I read about them on Wikipedia and this is what I have understood.. </p>\n<p>Collections : Stores variable number of objects. Ex. list, set... </p>\n<p>Containers : DataStructures? Ex. dequeue, stack.. </p>\n<p>But I thought collections like list, tree etc are data structures, then what are containers. Also what does this mean.. </p>\n<blockquote>\n<p id=\"so_9552858_9552858_0\">Data structures that implement containers include arrays, lists, maps,\n  queues, sets, stacks, tables, trees, and vectors.</p>\n</blockquote>\n", "Tags": "<java><c++><collections><containers>", "OwnerUserId": "1241347", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_9552858_9553889_0": {"section_id": 702, "quality": 1.0, "length": 5}}, "n3337": {"so_9552858_9553889_0": {"section_id": 692, "quality": 1.0, "length": 5}}, "n4659": {"so_9552858_9553889_0": {"section_id": 731, "quality": 1.0, "length": 5}}}});