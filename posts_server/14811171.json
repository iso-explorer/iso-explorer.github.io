post_cb({"bq_ids": {"n4140": {"so_14811171_14811849_2": {"length": 25, "quality": 0.9259259259259259, "section_id": 5794}, "so_14811171_14811849_0": {"length": 16, "quality": 0.8, "section_id": 5790}, "so_14811171_14811849_1": {"length": 26, "quality": 0.9285714285714286, "section_id": 5793}}, "n3337": {"so_14811171_14811849_2": {"length": 25, "quality": 0.9259259259259259, "section_id": 5567}, "so_14811171_14811849_0": {"length": 16, "quality": 0.8, "section_id": 5563}, "so_14811171_14811849_1": {"length": 26, "quality": 0.9285714285714286, "section_id": 5566}}, "n4659": {"so_14811171_14811849_2": {"length": 25, "quality": 0.9259259259259259, "section_id": 7253}, "so_14811171_14811849_0": {"length": 17, "quality": 0.85, "section_id": 7247}, "so_14811171_14811849_1": {"length": 26, "quality": 0.9285714285714286, "section_id": 7252}}}, "14811171": {"ViewCount": "174", "Body": "<p>Since in C++ <code>sizeof</code> of an empty class is 1 byte, is the following code valid?</p>\n<pre><code>class A\n{\n};\n\nint main()\n{\n    A a;\n    char* p = reinterpret_cast&lt;char*&gt;(&amp;a);\n    *p = 'a';\n}\n</code></pre>\n<p>I know its pretty much useless, but just wanted to see whether I can do this. It compiles and runs fine on MSVC2010.</p>\n", "Title": "Using the memory of an object of an empty class type", "CreationDate": "2013-02-11T11:17:47.423", "LastActivityDate": "2013-02-11T13:11:55.110", "CommentCount": "5", "LastEditDate": "2013-02-11T13:11:55.110", "PostTypeId": "1", "LastEditorUserId": "1168156", "Id": "14811171", "Score": "3", "OwnerUserId": "392315", "Tags": "<c++><standards><memory-model>", "AnswerCount": "1"}, "14811849": {"Id": "14811849", "PostTypeId": "2", "Body": "<p><strong>C++03 standard 1.8 The C+ + object model:</strong></p>\n<blockquote>\n<p id=\"so_14811171_14811849_0\">Relevant parts of <strong>\u00a71</strong>: An <em>object</em> is a region of storage... Some objects are <em>polymorphic</em>... For other objects, <strong>the interpretation of the values found therein is determined by the type of the expressions used to access them.</strong>\"</p>\n</blockquote>\n<p>In your example, <code>a</code> is an object with automatic storage duration that is deallocated when the execution leaves the scope. Basically, memory where it resides is available to you and you can store whatever you want there:</p>\n<pre><code>int i;\nchar* myStr = reinterpret_cast&lt;char*&gt;(&amp;i);\nmyStr[0] = 'H';\nmyStr[1] = 'i';\nmyStr[2] = '!';\nmyStr[3] = '\\0';\nstd::cout &lt;&lt; myStr;\n</code></pre>\n<p>(Full example is <a href=\"http://ideone.com/tnCCW5\" rel=\"nofollow\">here</a>)</p>\n<p>What you should consider here is the lifetime of object that you \"abuse\" in this way, i.e. if you still keep the pointer to this memory even after the object has been deallocated, accessing this memory will lead to <strong>undefined behaviour</strong>.</p>\n<p>Just note that just because the language allows you to do something, it doesn't mean you should do it. Use features of this language the way they were meant to be used. After all, you are not writing codes just so that \"it works\".</p>\n<hr>\n<p>And to your question about the size of empty class, same part of the standard also says:</p>\n<blockquote>\n<p id=\"so_14811171_14811849_1\"><strong>\u00a74</strong>: If a complete object, a data member (9.2), or an array element is of class type, its type is considered the <strong>most derived class</strong>, to distinguish it from the class type of any base class subobject; an object of a most derived class type is called a <strong>most derived object</strong>.</p>\n<p id=\"so_14811171_14811849_2\"><strong>\u00a75</strong>: Unless it is a bit-field (9.6), a most derived object <strong>shall have a non-zero size and shall occupy one or more bytes of storage</strong>. Base class sub-objects may have zero size. An object of POD type (3.9) shall occupy contiguous bytes of storage.</p>\n</blockquote>\n<p>So it is guaranteed by standard that objects of an empty class such as yours will occupy <strong>at least 1 byte</strong>.</p>\n</hr>", "LastEditorUserId": "1168156", "LastActivityDate": "2013-02-11T13:04:25.967", "Score": "1", "CreationDate": "2013-02-11T12:26:07.493", "ParentId": "14811171", "CommentCount": "2", "OwnerUserId": "1168156", "LastEditDate": "2013-02-11T13:04:25.967"}});