post_cb({"4508583": {"PostTypeId": "2", "Body": "<p>The base destructor will get called.  </p>\n<p>In Effective C++, Meyers recommends that exceptions shouldn't leave destructors.\nCatch the exception inside the destructor and handle it, swallow it or terminate.</p>\n", "LastActivityDate": "2010-12-22T11:57:27.367", "LastEditorUserId": "455272", "Id": "4508583", "CommentCount": "6", "CreationDate": "2010-12-22T11:13:58.787", "ParentId": "4508533", "Score": "1", "OwnerUserId": "455272", "LastEditDate": "2010-12-22T11:57:27.367"}, "bq_ids": {"n4140": {"so_4508533_4508687_0": {"length": 18, "quality": 0.8181818181818182, "section_id": 3344}}, "n3337": {"so_4508533_4508687_0": {"length": 18, "quality": 0.8181818181818182, "section_id": 3214}}}, "4508533": {"ViewCount": "1941", "Body": "<p>It just happened to me I wondered how resources are freed in the following case.</p>\n<pre><code>class Base {\n  Resource *r;\n\npublic:\n  Base() { /* ... */ }\n  ~Base() {\n    delete r; \n  }\n};\n\nclass Derived : public Base {\npublic:\n  Derived() { /* ... */ }\n  ~Derived() {\n    /* Suddenly something here throws! */\n  }\n};\n\nint main() {\n  try {\n    Derived d;\n  } catch(...) {\n    /* what happened with Base::r !? */\n  }\n}\n</code></pre>\n<p>Will the base class destructor be called if the derived class destructor throws? Or will there be a leak?</p>\n", "AcceptedAnswerId": "4508687", "Title": "What happens to base class destructor if a derived class destructor throws an exception", "CreationDate": "2010-12-22T11:08:41.280", "Id": "4508533", "CommentCount": "2", "FavoriteCount": "7", "PostTypeId": "1", "LastActivityDate": "2010-12-22T11:57:27.367", "Score": "22", "OwnerUserId": "34509", "Tags": "<c++><exception><destructor><memory-leaks>", "AnswerCount": "3"}, "4508687": {"PostTypeId": "2", "Body": "<p>According to \u00a715.2/2:</p>\n<blockquote>\n<p id=\"so_4508533_4508687_0\">An object that is partially constructed or partially destroyed will have destructors executed for all of its fully constructed subobjects, that is, for subobjects for which the constructor has completed execution and the destructor has not yet begun execution.</p>\n</blockquote>\n<p>So the base class destructor should be called. That is, just like we know this will clean up the base class:</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct foo\n{\n    ~foo()\n    {\n        std::cout &lt;&lt; \"clean\" &lt;&lt; std::endl;\n    }\n};\n\nstruct bar : foo\n{\n    bar()\n    { // foo is initialized...\n        throw 0; // ...so its destructor is run\n    }\n};\n\nint main()\n{\n    try\n    {\n        bar b;\n    }\n    catch (...)\n    {\n        std::cerr &lt;&lt; \"caught\" &lt;&lt; std::endl;\n    }\n}\n</code></pre>\n<p>And that this will clean up the member:</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct foo\n{\n    ~foo()\n    {\n        std::cout &lt;&lt; \"clean\" &lt;&lt; std::endl;\n    }\n};\n\nstruct bar\n{\n    ~bar()\n    { // f has been initialized...\n        throw 0; // ...so its destructor will run\n    }\n\n    foo f;\n};\n\nint main()\n{\n    try\n    {\n        bar b;\n    }\n    catch (...)\n    {\n        std::cerr &lt;&lt; \"caught\" &lt;&lt; std::endl;\n    }\n}\n</code></pre>\n<p>This will also clean up the base class:</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct foo\n{\n    ~foo()\n    {\n        std::cout &lt;&lt; \"clean\" &lt;&lt; std::endl;\n    }\n};\n\nstruct bar : foo\n{\n    ~bar()\n    { // foo has been initialized...\n        throw 0; // ...so its destructor will run\n    }\n};\n\nint main()\n{\n    try\n    {\n        bar b;\n    }\n    catch (...)\n    {\n        std::cerr &lt;&lt; \"caught\" &lt;&lt; std::endl;\n    }\n}\n</code></pre>\n<p>That's my understanding of the quote.</p>\n", "LastActivityDate": "2010-12-22T11:29:45.940", "LastEditorUserId": "123111", "Id": "4508687", "CommentCount": "10", "CreationDate": "2010-12-22T11:26:40.103", "ParentId": "4508533", "Score": "20", "OwnerUserId": "87234", "LastEditDate": "2010-12-22T11:29:45.940"}, "4508769": {"PostTypeId": "2", "Body": "<p>The base class destructor is indeed called. Sample code:</p>\n<pre><code>#include \n#include \n\nclass Base {\npublic:\n  Base() { /* ... */ }\n  ~Base() {\n    printf(\"Base\\n\");\n  }\n};\n\nclass Derived : public Base {\npublic:\n  Derived() { /* ... */ }\n  ~Derived() {\n    printf(\"Derived\\n\");\n    throw 1;\n  }\n};\n\nint main() {\n  try {\n    Derived d;\n  } catch(...) {\n    printf(\"CAUGHT!\\n\");\n  }\n}\n</code></pre>\n<p>This prints:</p>\n<pre><code>Derived\nBase\nCAUGHT!\n</code></pre>\n", "LastActivityDate": "2010-12-22T11:37:38.530", "Id": "4508769", "CommentCount": "5", "CreationDate": "2010-12-22T11:37:38.530", "ParentId": "4508533", "Score": "1", "OwnerUserId": "358904"}});