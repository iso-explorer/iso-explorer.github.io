post_cb({"12801797": {"Id": "12801797", "PostTypeId": "2", "Body": "<p>In C++, literals tokens can be concatenated thusly:</p>\n<pre><code>const char* thingy = \"Hello\" \"World\";\n</code></pre>\n<p><code>\"Hello\"</code> and <code>\"World</code>\" are each a literal token.</p>\n", "LastActivityDate": "2012-10-09T14:00:31.207", "CommentCount": "1", "CreationDate": "2012-10-09T14:00:31.207", "ParentId": "12801776", "Score": "1", "OwnerUserId": "241536"}, "bq_ids": {"n4140": {"so_12801776_12801788_0": {"length": 8, "quality": 0.6666666666666666, "section_id": 5313}}, "n3337": {"so_12801776_12801788_0": {"length": 8, "quality": 0.6666666666666666, "section_id": 5110}}, "n4659": {"so_12801776_12801788_0": {"length": 8, "quality": 0.6666666666666666, "section_id": 6737}}}, "12801776": {"ViewCount": "111", "Body": "<p>I can't realize how could it be possible to print a string this way without any complaint by the compiler:</p>\n<pre><code>std::cout &lt;&lt; \"Hello \" \"World!\";\n</code></pre>\n<p>In fact, the above line works exactly like:</p>\n<pre><code>std::cout &lt;&lt; \"Hello \" &lt;&lt; \"World!\";\n</code></pre>\n<p>Is there an explanation for this behaviour?</p>\n", "AcceptedAnswerId": "12801788", "Title": "Strange behaviour of << (as at least seems to me)", "CreationDate": "2012-10-09T13:59:25.287", "Id": "12801776", "CommentCount": "1", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2012-10-09T14:27:44.503", "Score": "5", "OwnerUserId": "1035933", "Tags": "<c++><cout>", "AnswerCount": "3"}, "12801788": {"Id": "12801788", "PostTypeId": "2", "Body": "<p>Adjacent literal tokens are concatenated automatically, it's part of the standard.</p>\n<h3>2.1 Phases of translation [lex.phases]</h3>\n<blockquote>\n<p id=\"so_12801776_12801788_0\">6) Adjacent <del>ordinary string</del> literal tokens are concatenated. <del>Adjacent wide string literal tokens are concatenated.</del></p>\n</blockquote>\n<p>(C++03)</p>\n", "LastActivityDate": "2012-10-09T13:59:57.403", "CommentCount": "12", "CreationDate": "2012-10-09T13:59:57.403", "ParentId": "12801776", "Score": "11", "OwnerUserId": "673730"}, "12802214": {"Id": "12802214", "PostTypeId": "2", "Body": "<p>This is normal behavior of the strings. In the first line specified strings are concatenated by compiler automatically. As sample you can specify also multiline to avoid very long line.</p>\n<pre><code>const char *strLine = \"line 1 \"\n                      \"line 1 \"\n                      \"line 2 \";\n</code></pre>\n<p>And it will work OK. The second line is cleared, specified another line for output. </p>\n", "LastEditorUserId": "646382", "LastActivityDate": "2012-10-09T14:27:44.503", "Score": "1", "CreationDate": "2012-10-09T14:25:00.320", "ParentId": "12801776", "CommentCount": "0", "OwnerUserId": "1732048", "LastEditDate": "2012-10-09T14:27:44.503"}});