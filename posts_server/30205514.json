post_cb({"30205514": {"CommentCount": "1", "AcceptedAnswerId": "30205781", "CreationDate": "2015-05-13T04:07:49.850", "LastActivityDate": "2015-05-13T04:46:04.020", "PostTypeId": "1", "ViewCount": "506", "FavoriteCount": "1", "Title": "Is \"typename\" allowed/required in C++11 using-declaration?", "Id": "30205514", "Score": "12", "Body": "<p>The following code compiles correctly in g++ and clang:</p>\n<pre><code>template&lt;typename T&gt;\nstruct foo\n{\n    class iterator;\n    using bar = foo::iterator;\n};\n\nint main() {}\n</code></pre>\n<p>however MSVC 2013 gives the following errors:</p>\n<pre><code>foo.cpp(9): error C2061: syntax error : identifier 'iterator'\n          foo.cpp(10) : see reference to class template instantiation 'foo&lt;T&gt;' being compiled\nfoo.cpp(9): error C2238: unexpected token(s) preceding ';'\n</code></pre>\n<p>If I change that line to:</p>\n<pre><code>using bar = typename foo::iterator;\n</code></pre>\n<p>then all three compilers compile it successfully.  Is the original version correct? (i.e. is this a MSVC bug, or a gcc/clang extension)</p>\n", "Tags": "<c++><c++11><typename><using-declaration>", "OwnerUserId": "1505939", "AnswerCount": "2"}, "30205845": {"ParentId": "30205514", "CommentCount": "0", "Body": "<p>From the standard:</p>\n<blockquote>\n<p id=\"so_30205514_30205845_0\"><strong>14.6.2.1 Dependent types</strong> [temp.dep.type]</p>\n<p id=\"so_30205514_30205845_1\">1 A name refers to the current instantiation if it is  </p>\n<p id=\"so_30205514_30205845_2\">__ in the definition of a class template, a nested class of a class template, a member of a class template, or a member of a nested class of a class template, the injected-class-name (Clause 9) of the class template\n  or nested class,</p>\n</blockquote>\n<p>The name <code>foo</code> refers to the current instantiation, that is obvious.</p>\n<p>Since <code>iterator</code> is declared as a nested class in the definition of the template, <code>iterator</code> refers to the name in the current instantiation of <code>foo</code>. <code>foo::iterator</code> is the same as <code>iterator</code>.</p>\n<pre><code>using bar = foo::iterator;\n</code></pre>\n<p>as well as</p>\n<pre><code>using bar = iterator;\n</code></pre>\n<p>should work.</p>\n<p>It seems to me that you have run into a MSVC defect.</p>\n", "OwnerUserId": "434551", "PostTypeId": "2", "Id": "30205845", "Score": "2", "CreationDate": "2015-05-13T04:42:42.427", "LastActivityDate": "2015-05-13T04:42:42.427"}, "bq_ids": {"n4140": {"so_30205514_30205845_1": {"section_id": 72, "quality": 1.0, "length": 4}, "so_30205514_30205781_2": {"section_id": 72, "quality": 1.0, "length": 4}, "so_30205514_30205781_1": {"section_id": 72, "quality": 1.0, "length": 4}, "so_30205514_30205845_2": {"section_id": 191, "quality": 1.0, "length": 21}, "so_30205514_30205781_0": {"section_id": 170, "quality": 0.8421052631578947, "length": 16}}, "n3337": {"so_30205514_30205845_2": {"section_id": 185, "quality": 1.0, "length": 21}, "so_30205514_30205845_1": {"section_id": 67, "quality": 1.0, "length": 4}, "so_30205514_30205781_1": {"section_id": 67, "quality": 1.0, "length": 4}, "so_30205514_30205781_2": {"section_id": 67, "quality": 1.0, "length": 4}, "so_30205514_30205781_0": {"section_id": 164, "quality": 0.8421052631578947, "length": 16}}, "n4659": {"so_30205514_30205845_2": {"section_id": 196, "quality": 1.0, "length": 21}, "so_30205514_30205781_2": {"section_id": 196, "quality": 1.0, "length": 4}, "so_30205514_30205781_1": {"section_id": 200, "quality": 1.0, "length": 4}, "so_30205514_30205845_1": {"section_id": 200, "quality": 1.0, "length": 4}, "so_30205514_30205781_0": {"section_id": 175, "quality": 0.9473684210526315, "length": 18}}}, "30205781": {"ParentId": "30205514", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>[temp.res]/p3:</p>\n<blockquote>\n<p id=\"so_30205514_30205781_0\">When a <em>qualified-id</em> is intended to refer to a type that is not a\n  member of the current instantiation (14.6.2.1) and its\n  <em>nested-name-specifier</em> refers to a dependent type, it shall be prefixed by the keyword <code>typename</code>, forming a <em>typename-specifier</em>.</p>\n</blockquote>\n<p>[temp.dep.type]/p1:</p>\n<blockquote>\n<p id=\"so_30205514_30205781_1\">A name refers to the <em>current instantiation</em> if it is</p>\n<ul>\n<li>in the definition of a class template, a nested class of a class template, a member of a class template, or a member of a nested class\n  of a class template, the injected-class-name (Clause 9) of the class\n  template or nested class,</li>\n<li>[...]</li>\n</ul>\n</blockquote>\n<p>[temp.dep.type]/p4:</p>\n<blockquote>\n<p id=\"so_30205514_30205781_2\">A name is a <em>member of the current instantiation</em> if it is</p>\n<ul>\n<li>An unqualified name that, when looked up, refers to at least one member of a class that is the current instantiation or a non-dependent\n  base class thereof. [ <em>Note</em>: This can only occur when looking up a\n  name in a scope enclosed by the definition of a class template. \u2014<em>end\n  note</em> ]</li>\n<li>A <em>qualified-id</em> in which the <em>nested-name-specifier</em> refers to the current instantiation and that, when looked up, refers to at least one\n  member of a class that is the current instantiation or a non-dependent\n  base class thereof. [ <em>Note</em>: if no such member is found, and the\n  current instantiation has any dependent base classes, then the\n  qualified-id is a member of an unknown specialization; see below.\n  \u2014<em>end note</em> ]</li>\n<li>[...]</li>\n</ul>\n</blockquote>\n<p><code>foo</code> is the current instantiation. <code>foo::iterator</code> is a <em>qualified-id</em> in which the <em>nested-name-specifier</em> (<code>foo::</code>) refers to the current instantiation, and when looked up, \"refers to at least one member of a class that is the current instantiation or a non-dependent base class thereof\"; it therefore is a member of the current instantiation. Therefore, [temp.res]/p3 does not apply, and no <code>typename</code> is required. You are still allowed to add one - or just use <code>iterator</code> unqualified directly.</p>\n", "OwnerUserId": "2756719", "LastEditorUserId": "2756719", "LastEditDate": "2015-05-13T04:46:04.020", "Id": "30205781", "Score": "7", "CreationDate": "2015-05-13T04:37:18.407", "LastActivityDate": "2015-05-13T04:46:04.020"}});