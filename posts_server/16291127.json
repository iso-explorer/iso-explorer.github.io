post_cb({"bq_ids": {"n4140": {"so_16291127_16292092_0": {"length": 14, "quality": 1.0, "section_id": 380}, "so_16291127_16292092_2": {"length": 35, "quality": 0.8974358974358975, "section_id": 381}, "so_16291127_16292092_1": {"length": 4, "quality": 0.8, "section_id": 5806}, "so_16291127_16292092_3": {"length": 19, "quality": 0.9047619047619048, "section_id": 382}}, "n3337": {"so_16291127_16292092_0": {"length": 14, "quality": 1.0, "section_id": 371}, "so_16291127_16292092_3": {"length": 19, "quality": 0.9047619047619048, "section_id": 373}, "so_16291127_16292092_1": {"length": 4, "quality": 0.8, "section_id": 5579}, "so_16291127_16292092_2": {"length": 35, "quality": 0.8974358974358975, "section_id": 372}}, "n4659": {"so_16291127_16292092_0": {"length": 14, "quality": 1.0, "section_id": 395}, "so_16291127_16292092_3": {"length": 18, "quality": 0.8571428571428571, "section_id": 397}, "so_16291127_16292092_1": {"length": 4, "quality": 0.8, "section_id": 7267}, "so_16291127_16292092_2": {"length": 34, "quality": 0.8717948717948718, "section_id": 396}}}, "16291127": {"ViewCount": "78", "Body": "<p>Suppose we have some struct, A, with mathematical operators overloaded, like +,-,*,/ etc. If we then have an equation</p>\n<pre><code>A a1, a2, a3, a4, a5;\nA a6 = a1*a2 + a3/a4 + 15;\n</code></pre>\n<p>There are intermediates created; for example the result of a1*a2 and the result of a3/a4 (which are then added together). My question is, when do these intermediates get destructed?</p>\n<p>Compiling on gcc 4.2.1 the intermediates appear to get destructed <em>after</em> a6 is created. Does this happen for all compilers? Is there something in the standard about this?</p>\n<p>Thanks</p>\n", "Title": "Destruction of intermediates in an equation", "CreationDate": "2013-04-30T02:10:43.377", "LastActivityDate": "2013-04-30T04:18:49.447", "CommentCount": "3", "PostTypeId": "1", "Id": "16291127", "Score": "1", "OwnerUserId": "2020792", "Tags": "<c++><destructor>", "AnswerCount": "2"}, "16292092": {"Id": "16292092", "PostTypeId": "2", "Body": "<p>I only have access to a draft version of the standard, but from <code>12.2.3</code>: </p>\n<blockquote>\n<p id=\"so_16291127_16292092_0\">Temporary objects are destroyed as the last step\n  in evaluating the full-expression (1.9) that (lexically) contains the point where they were created.</p>\n</blockquote>\n<p>With the definition of a full expression, from <code>1.9.10</code>:</p>\n<blockquote>\n<p id=\"so_16291127_16292092_1\">A full-expression is an expression that is not a subexpression of another expression.</p>\n</blockquote>\n<p>This is true except for two special cases (<code>12.2.4</code> and <code>12.2.5</code>):</p>\n<blockquote>\n<p id=\"so_16291127_16292092_2\">There are two contexts in which temporaries are destroyed at a different point than the end of the full-\n  expression. The first context is when a default constructor is called to initialize an element of an array. If\n  the constructor has one or more default arguments, the destruction of every temporary created in a default\n  argument expression is sequenced before the construction of the next array element, if any.</p>\n<p id=\"so_16291127_16292092_3\">The second context is when a reference is bound to a temporary. The temporary to which the reference is\n  bound or the temporary that is the complete object of a subobject to which the reference is bound persists\n  for the lifetime of the reference except ...</p>\n</blockquote>\n<p>I've left out the exposition of the second special case, as it does not apply here - your example is encompassed by <code>12.2.3</code>.</p>\n", "LastActivityDate": "2013-04-30T04:18:49.447", "CommentCount": "0", "CreationDate": "2013-04-30T04:18:49.447", "ParentId": "16291127", "Score": "2", "OwnerUserId": "1085573"}, "16291431": {"Id": "16291431", "PostTypeId": "2", "Body": "<p>I am not sure of the standards but you can check when they are destroyed by a well designed <strong>destructor</strong> function for the said class.<br/>\nThe general rule of thumb in any compiler is to destroy the object when all the references to that object are removed i,e when no other object refers to this object.</p>\n", "LastActivityDate": "2013-04-30T02:50:47.970", "CommentCount": "1", "CreationDate": "2013-04-30T02:50:47.970", "ParentId": "16291127", "Score": "-1", "OwnerUserId": "2330574"}});