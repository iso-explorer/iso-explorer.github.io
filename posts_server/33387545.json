post_cb({"33387659": {"Id": "33387659", "PostTypeId": "2", "Body": "<p><strong>It is indeed safe - and recommended - to catch by <code>const</code> reference.</strong></p>\n<blockquote>\n<p id=\"so_33387545_33387659_0\">\"<code>e</code> is actually placed on the stack of <code>some_function()</code>\"</p>\n</blockquote>\n<p>No it's not... the object actually thrown is created in an unspecified area of memory reserved for use by the exception handling mechanism: </p>\n<blockquote>\n<p id=\"so_33387545_33387659_1\"><strong>[except.throw]</strong> 15.1/4: <strong>The memory for the exception object is allocated in an unspecified way, except as noted in 3.7.4.1.</strong>  The exception\n  object is destroyed after either the last remaining active handler for the exception exits by any means other than rethrowing, or the last object of type std::exception_ptr (18.8.5) that refers to the exception object is destroyed, whichever is later.</p>\n</blockquote>\n<p>If a local variable is specified to <code>throw</code>, it's copied there-to if necessary (the optimiser may be able to directly create it in this other memory).  That's why...</p>\n<blockquote>\n<p id=\"so_33387545_33387659_2\">15.1/5 <em>When the thrown object is a class object, the constructor selected for the copy-initialization and the destructor\n  shall be accessible, even if the copy/move operation is elided (12.8).</em></p>\n</blockquote>\n<hr/>\n<p>If that's not clicked, it <em>might</em> help to imagine implementation vaguely like this:</p>\n<pre><code>// implementation support variable...\nthread__local alignas(alignof(std::max_align_t))\n    char __exception_object[EXCEPTION_OBJECT_BUFFER_SIZE];\n\nvoid some_function() {\n    // throw std::exception(\"some error message\");\n\n    // IMPLEMENTATION PSEUDO-CODE:\n    auto&amp;&amp; thrown = std::exception(\"some error message\");\n    // copy-initialise __exception_object...\n    new (&amp;__exception_object) decltype(thrown){ thrown };\n    throw __type_of(thrown);\n    // as stack unwinds, _type_of value in register or another\n    // thread_local var...\n}\n\nint main(int argc, char **argv)\n{\n    try {\n        some_function();\n    } // IMPLEMENTATION:\n      // if thrown __type_of for std::exception or derived...\n      catch (const std::exception&amp; e) {\n        // IMPLEMENTATION:\n        // e references *(std::exception*)(&amp;__exception_object[0]);\n        ...\n    }\n}\n</code></pre>\n", "LastEditorUserId": "410767", "LastActivityDate": "2015-11-20T04:06:27.180", "Score": "93", "CreationDate": "2015-10-28T09:45:21.873", "ParentId": "33387545", "CommentCount": "8", "OwnerUserId": "410767", "LastEditDate": "2015-11-20T04:06:27.180"}, "33387655": {"Id": "33387655", "PostTypeId": "2", "Body": "<p>You <em>have</em> to catch by reference, otherwise you couldn't possibly get the correct dynamic type of the object. As for its lifetime, the standard guarantees, in <code>[except.throw]</code>,</p>\n<blockquote>\n<p id=\"so_33387545_33387655_0\">The exception object is destroyed after either the last remaining active handler for the exception exits by any means other than rethrowing, or the last object of type std::exception_ptr (18.8.5) that refers to the exception object is destroyed, whichever is later</p>\n</blockquote>\n", "LastEditorUserId": "1084944", "LastActivityDate": "2015-10-28T09:56:20.773", "Score": "22", "CreationDate": "2015-10-28T09:45:02.620", "ParentId": "33387545", "CommentCount": "1", "OwnerUserId": "1084944", "LastEditDate": "2015-10-28T09:56:20.773"}, "33388006": {"Id": "33388006", "PostTypeId": "2", "Body": "<p>From <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4296.pdf\">except.throw</a>:</p>\n<blockquote>\n<p id=\"so_33387545_33388006_0\">Throwing an exception copy-initializes (8.5, 12.8) a temporary object,\n  called the exception object. The temporary is an lvalue and is used to\n  initialize the variable declared in the matching handler (15.3). If\n  the type of the exception object would be an incomplete type or a\n  pointer to an incomplete type other than (possibly cv-qualified) void\n  the program is ill-formed.</p>\n</blockquote>\n<p>It's the act of throwing the exception that copies the exception object in the exceptions-area, outside of any stack. So it's perfectly legit, and advisable, to catch exception by reference, since the exception object lifetime will extend until the last possible <code>catch()</code>.</p>\n", "LastActivityDate": "2015-10-28T10:02:03.693", "CommentCount": "0", "CreationDate": "2015-10-28T10:02:03.693", "ParentId": "33387545", "Score": "8", "OwnerUserId": "1168733"}, "bq_ids": {"n4140": {"so_33387545_33387659_1": {"length": 33, "quality": 0.8461538461538461, "section_id": 3337}, "so_33387545_33387655_0": {"length": 25, "quality": 0.9259259259259259, "section_id": 3337}, "so_33387545_33387659_2": {"length": 14, "quality": 0.875, "section_id": 3338}, "so_33387545_33388006_0": {"length": 29, "quality": 0.8787878787878788, "section_id": 3336}}, "n3337": {"so_33387545_33387659_1": {"length": 33, "quality": 0.8461538461538461, "section_id": 3207}, "so_33387545_33387655_0": {"length": 25, "quality": 0.9259259259259259, "section_id": 3207}, "so_33387545_33387659_2": {"length": 12, "quality": 0.75, "section_id": 3208}, "so_33387545_33388006_0": {"length": 25, "quality": 0.7575757575757576, "section_id": 3206}}, "n4659": {"so_33387545_33387659_1": {"length": 25, "quality": 0.6410256410256411, "section_id": 4104}, "so_33387545_33387655_0": {"length": 17, "quality": 0.6296296296296297, "section_id": 4104}, "so_33387545_33387659_2": {"length": 13, "quality": 0.8125, "section_id": 4105}, "so_33387545_33388006_0": {"length": 25, "quality": 0.7575757575757576, "section_id": 4103}}}, "33387545": {"ViewCount": "4281", "Body": "<p>Please take a look at the following exception throwing and catching:</p>\n<pre><code>void some_function() {\n    throw std::exception(\"some error message\");\n}\n\nint main(int argc, char **argv) {\n    try {\n        some_function();\n    } catch (const std::exception&amp; e) {\n        std::cerr &lt;&lt; e.what() &lt;&lt; std::endl;\n        exit(1);\n    }\n    return 0;\n}\n</code></pre>\n<p>Is it safe to catch the thrown exception by reference?</p>\n<p>My concern is because the exception <code>e</code> is actually <strong>placed on the stack</strong> of <code>some_function()</code>. But <code>some_function()</code> has just returned, causing <code>e</code> to be destructed. So actually now <code>e</code> points to a destructed object.</p>\n<p>Is my concern correct?</p>\n<p>What is the correct way to pass the exception without copying it by value? Should I throw <code>new std::exception()</code> so it is placed in the dynamic memory?</p>\n", "AcceptedAnswerId": "33387659", "Title": "Is catching an exception by reference dangerous?", "CreationDate": "2015-10-28T09:39:49.783", "Id": "33387545", "CommentCount": "8", "FavoriteCount": "5", "PostTypeId": "1", "LastEditDate": "2015-10-29T08:45:59.440", "LastEditorUserId": "3322273", "LastActivityDate": "2015-11-20T04:06:27.180", "Score": "63", "OwnerUserId": "3322273", "Tags": "<c++><exception>", "AnswerCount": "4"}, "33387652": {"Id": "33387652", "PostTypeId": "2", "Body": "<p>Catching by const reference is <em>exactly</em> how exceptions should be caught. The exception object does not necessarily live 'on the stack'. The compiler is responsible for the appropriate magic to make this work.</p>\n<p>On the other hand, your example cannot compile since <code>std::exception</code> may only be default-constructed or copy-constructed. In this case the <code>what()</code> method would return a pointer to an empty (c-style) string, which is not particularly useful.</p>\n<p>Suggest you throw a <code>std::runtime_error</code> or <code>std::logic_error</code> as appropriate, or a class derived therefrom:</p>\n<ul>\n<li><code>logic_error</code> when the caller has requested something outside the design parameters of your service.</li>\n<li><code>runtime_error</code> when the caller has requested something reasonable but external factors prevent you from honouring the request. </li>\n</ul>\n<p><a href=\"http://en.cppreference.com/w/cpp/error/exception\" rel=\"noreferrer\">http://en.cppreference.com/w/cpp/error/exception</a></p>\n", "LastEditorUserId": "2015579", "LastActivityDate": "2015-10-28T10:42:06.740", "Score": "18", "CreationDate": "2015-10-28T09:44:55.927", "ParentId": "33387545", "CommentCount": "0", "OwnerUserId": "2015579", "LastEditDate": "2015-10-28T10:42:06.740"}});