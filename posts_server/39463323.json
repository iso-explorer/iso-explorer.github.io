post_cb({"bq_ids": {"n4140": {"so_39463323_39463377_5": {"length": 28, "quality": 1.0, "section_id": 3329}, "so_39463323_39463377_2": {"length": 21, "quality": 0.875, "section_id": 3329}, "so_39463323_39463377_3": {"length": 4, "quality": 1.0, "section_id": 3329}, "so_39463323_39463377_6": {"length": 8, "quality": 0.6666666666666666, "section_id": 3329}}, "n3337": {"so_39463323_39463377_5": {"length": 25, "quality": 0.8928571428571429, "section_id": 3199}, "so_39463323_39463377_2": {"length": 20, "quality": 0.8333333333333334, "section_id": 3199}, "so_39463323_39463377_3": {"length": 4, "quality": 1.0, "section_id": 3199}, "so_39463323_39463377_6": {"length": 8, "quality": 0.6666666666666666, "section_id": 3199}}, "n4659": {"so_39463323_39463377_5": {"length": 28, "quality": 1.0, "section_id": 4095}, "so_39463323_39463377_2": {"length": 21, "quality": 0.875, "section_id": 4095}, "so_39463323_39463377_3": {"length": 4, "quality": 1.0, "section_id": 4095}, "so_39463323_39463377_6": {"length": 8, "quality": 0.6666666666666666, "section_id": 4095}}}, "39463377": {"Id": "39463377", "PostTypeId": "2", "Body": "<p>For <code>short c{0};</code>, <a href=\"http://en.cppreference.com/w/cpp/language/list_initialization#Narrowing_conversions\" rel=\"nofollow\">narrowing conversion</a> doesn't occur. Because <code>0</code> is a constant expression and can be stored exactly in a <code>short</code>.</p>\n<p>(emphasis mine)</p>\n<blockquote>\n<p id=\"so_39463323_39463377_0\">list-initialization limits the allowed implicit conversions by prohibiting the following: </p>\n<ul>\n<li><p id=\"so_39463323_39463377_1\">...</p></li>\n<li><p id=\"so_39463323_39463377_2\">conversion from integer or unscoped enumeration type to integer type that cannot represent all values of the original, <strong>except where source is a constant expression whose value can be stored exactly in the target type</strong> </p></li>\n</ul>\n</blockquote>\n<p>Relevant explanations and examples from the standard, <a href=\"http://eel.is/c++draft/dcl.init.list#7\" rel=\"nofollow\">$8.6.4/7 List-initialization\n[dcl.init.list]</a>:</p>\n<p>(emphasis mine)</p>\n<blockquote>\n<p id=\"so_39463323_39463377_3\">A narrowing conversion is an implicit conversion</p>\n<ul>\n<li><p id=\"so_39463323_39463377_4\">...</p></li>\n<li><p id=\"so_39463323_39463377_5\">from an integer type or unscoped enumeration type to an integer type that cannot represent all the values of the original type, <strong>except\n  where the source is a constant expression whose value after integral\n  promotions will fit into the target type</strong>. </p></li>\n</ul>\n<p id=\"so_39463323_39463377_6\">[ Note: As indicated above, such conversions are not allowed at the\n  top level in list-initializations. \u2014 end note ] [ Example:</p>\n<pre><code>// ...\nconst int z = 99;\n// ...\nchar c4{z};               // OK: no narrowing needed\nunsigned char uc1 = {5};  // OK: no narrowing needed\n// ...\nfloat f2 { 7 };           // OK: 7 can be exactly represented as a float\n// ...\n</code></pre>\n<p id=\"so_39463323_39463377_7\">\u2014 end example ]</p>\n</blockquote>\n", "LastEditorUserId": "3309790", "LastActivityDate": "2016-09-13T06:35:28.280", "Score": "5", "CreationDate": "2016-09-13T06:19:45.673", "ParentId": "39463323", "CommentCount": "2", "OwnerUserId": "3309790", "LastEditDate": "2016-09-13T06:35:28.280"}, "39463323": {"ViewCount": "54", "Body": "<p><code>int a = 0; short b{a}; short c{0};</code></p>\n<p>The compiler gives a waring for <code>short b{a}</code>. I can understand this, because <code>int</code> is narrowed to <code>short</code>. </p>\n<p>However, it doesn't give a warning to <code>short c{0}</code>, which is weird to me.  My remember for literal integers, the type of <code>0</code> should at least be <code>int</code>.  So narrowing from <code>int</code> to <code>short</code> is happening here. Why doesn't the compiler give a warning?</p>\n", "AcceptedAnswerId": "39463377", "Title": "Narrowing from literal doesn't cause warning", "CreationDate": "2016-09-13T06:15:48.850", "Id": "39463323", "CommentCount": "0", "LastEditDate": "2016-09-13T06:34:46.800", "PostTypeId": "1", "LastEditorUserId": "3309790", "LastActivityDate": "2016-09-13T06:35:28.280", "Score": "1", "OwnerUserId": "855160", "Tags": "<c++><initialization><language-lawyer><list-initialization><narrowing>", "AnswerCount": "1"}});