post_cb({"25174373": {"ParentId": "25174236", "PostTypeId": "2", "CommentCount": "13", "CreationDate": "2014-08-07T04:52:03.300", "Score": "2", "LastEditorUserId": "391161", "LastEditDate": "2014-08-08T04:08:45.350", "Id": "25174373", "OwnerUserId": "391161", "Body": "<p>The key point is the pointer resulting from <code>reinterpret_cast&lt;void*&gt;</code> must compare equal to a safely-derived pointer <strong>computable from</strong> <code>reinterpret_cast&lt;void*&gt;(P)</code>. </p>\n<p>It does not have to equal <code>reinterpret_cast&lt;void*&gt;(P)</code>.</p>\n<p>Consider the following example, where we exhibit equality with a safely derived pointer which computed from <code>reinterpret_cast&lt;void*&gt;(P)</code>.</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;stdint.h&gt;\n\nusing namespace std;\n\nint main(){\n    int *P = new int(1); //Safely-derived pointer\n    uint64_t p_int = reinterpret_cast&lt;uint64_t&gt;(P); \n    uint64_t new_p_int = p_int + 10; // Result of an additive operation\n    void *new_P = reinterpret_cast&lt;void*&gt;(new_p_int);\n    void *P_computed_from_void_star = reinterpret_cast&lt;void*&gt;(P) + 10;\n    cout &lt;&lt; \"P converted to void* = \" &lt;&lt; P_computed_from_void_star &lt;&lt; endl;\n    cout &lt;&lt; \"P after result of an additive operation = \" &lt;&lt; new_P &lt;&lt; endl;\n}\n</code></pre>\n", "LastActivityDate": "2014-08-08T04:08:45.350"}, "25174236": {"CommentCount": "0", "ViewCount": "96", "CreationDate": "2014-08-07T04:37:40.797", "LastActivityDate": "2014-08-08T04:08:45.350", "Title": "Integer representation of safely derived pointer", "AcceptedAnswerId": "25174373", "PostTypeId": "1", "Id": "25174236", "Score": "0", "Body": "<p>The following I have come across in the section 3.7.4.3/3:</p>\n<blockquote>\n<p id=\"so_25174236_25174236_0\">An integer value is an integer representation of a safely-derived\n  pointer only if its type is at least as large as std::intptr_tand it\n  is one of the following: </p>\n<p id=\"so_25174236_25174236_1\">[...] </p>\n<p id=\"so_25174236_25174236_2\">\u2014 the result of an additive or bitwise\n  operation, one of whose operands is an integer representation of a\n  safely-derived pointer value <code>P</code>, if that result converted by\n  <code>reinterpret_cast&lt;void*&gt;</code> would compare equal to a safely-derived\n  pointer computable from <code>reinterpret_cast&lt;void*&gt;(P)</code>.</p>\n</blockquote>\n<p>Ok, let <code>int *P = new int(1);</code> be a some pointer and <code>long p_int = &lt;reinterpret_cast&lt;long&gt;(P);</code> his integer representation. Consider the following code:</p>\n<pre><code>int *P = new int(1); //Safely-derived pointer\nlong p_int = &lt;reinterpret_cast&lt;long&gt;(P); //Integer representation of safely derived pointer\nlong new_p_int = p_int + 10; // Result of an additive operation\nvoid *new_P = reinterpret_cast&lt;void*&gt;(new_p_int);\nvoid *P_cpnverting_to_void = reinterpret_cast&lt;void*&gt;(P);\ncout &lt;&lt; \"P converted to void* = \" &lt;&lt; P_cpnverting_to_void &lt;&lt; endl;\ncout &lt;&lt; \"P after result of an additive operation = \" &lt;&lt; new_P &lt;&lt; endl;\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/0a0bcfdd61198b4d\" rel=\"nofollow\">demo</a></p>\n<p>The rule is not clear. How can the result pointer be compare equal reinterpret_cast(P)? They never be compare equal after applying additive operation. Could you possibly provide actual example reflecting the rule?</p>\n", "Tags": "<c++><pointers>", "OwnerUserId": "2786156", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_25174236_25174236_2": {"section_id": 7186, "quality": 1.0, "length": 22}, "so_25174236_25174236_0": {"section_id": 7186, "quality": 0.9230769230769231, "length": 12}}, "n3337": {"so_25174236_25174236_2": {"section_id": 6930, "quality": 1.0, "length": 22}, "so_25174236_25174236_0": {"section_id": 6930, "quality": 0.9230769230769231, "length": 12}}, "n4659": {"so_25174236_25174236_2": {"section_id": 8694, "quality": 1.0, "length": 22}, "so_25174236_25174236_0": {"section_id": 8694, "quality": 0.7692307692307693, "length": 10}}}});