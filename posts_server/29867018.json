post_cb({"29867256": {"Id": "29867256", "PostTypeId": "2", "Body": "<p>The reason that <code>switch</code>/<code>case</code> exists (bearing in mind that <code>if</code>/<code>else</code> exists for everything else) is to provide an analogue for lower-level \"jump\" syntax, so that you can create fast, static \"<a href=\"http://en.wikipedia.org/wiki/Branch_table\">jump tables</a>\" for your code. That reason evaporates if you allow runtime expressions.</p>\n<p>Asking <em>why</em> <code>switch</code> does this thing is akin to asking why <code>if</code> does the other thing, and is therefore vacuous.</p>\n", "LastActivityDate": "2015-04-25T15:41:05.287", "CommentCount": "0", "CreationDate": "2015-04-25T15:41:05.287", "ParentId": "29867018", "Score": "10", "OwnerUserId": "560648"}, "bq_ids": {"n4140": {"so_29867018_29867092_0": {"length": 11, "quality": 0.9166666666666666, "section_id": 3889}, "so_29867018_29867126_0": {"length": 12, "quality": 0.6, "section_id": 3890}, "so_29867018_29867126_1": {"length": 10, "quality": 0.7142857142857143, "section_id": 3890}}, "n3337": {"so_29867018_29867092_0": {"length": 11, "quality": 0.9166666666666666, "section_id": 3749}, "so_29867018_29867126_0": {"length": 12, "quality": 0.6, "section_id": 3750}, "so_29867018_29867126_1": {"length": 14, "quality": 1.0, "section_id": 3750}}, "n4659": {"so_29867018_29867092_0": {"length": 11, "quality": 0.9166666666666666, "section_id": 4775}, "so_29867018_29867126_0": {"length": 12, "quality": 0.6, "section_id": 4776}, "so_29867018_29867126_1": {"length": 10, "quality": 0.7142857142857143, "section_id": 4776}}}, "29867325": {"Id": "29867325", "PostTypeId": "2", "Body": "<p>Just because you can do something doesn't mean that makes sense. In particular, <code>switch</code> is not equivalent to <code>if/else</code> ladders. </p>\n<p><code>if/else</code> is more general than <code>switch</code> which is intended to do \"select the thing to do based on the value of the switch expression\". </p>\n<p>Exercise - what would the following code do?</p>\n<pre><code>var a = 5;\nvar b = 0;\nswitch(a)\n{\n    case 5: b = 1; break;\n    case 5: b = 2; break;\n    case 1: b = 3; break;\n}\n</code></pre>\n<p>Is now <code>b</code> equal to <code>2</code> or <code>1</code>? If it does both branches, it doesn't do \"select <em>one</em> thing to do\", if it does one but not the other, it's arbitrary decision.</p>\n<p>Restricting the case values to be constant expressions allows compiler to issue error on this code. If the values could be different based on the value at runtime, the compiler couldn't be able to verify that two cases have identical values, as a consequence of Halting problem.</p>\n", "LastActivityDate": "2015-04-25T15:47:13.590", "CommentCount": "9", "CreationDate": "2015-04-25T15:47:13.590", "ParentId": "29867018", "Score": "9", "OwnerUserId": "1012936"}, "29867018": {"ViewCount": "1836", "Body": "<p>In JavaScript the following statement is valid.</p>\n<pre><code>switch(true) {\n    case a &gt; b:\n        max = a;\n        break;\n    case a &lt; b:\n        max = b;\n        break;\n    default:\n       max = a;\n}\n</code></pre>\n<p>But in the C/C++ programming languages, when I write this statement, the compiler gives me an error showing that <em>case statement</em> must consist of constant values. Sometimes in particular circumstances writing such switch-case statements would be very useful, but C/C++ will not allow me to do so.</p>\n<p>Now I am curious to know what is the point behind this to not allowing variable values to be used in <em>case statements</em>?</p>\n", "AcceptedAnswerId": "29867092", "Title": "Why should labels in a case statement be constant?", "CreationDate": "2015-04-25T15:19:52.063", "Id": "29867018", "CommentCount": "16", "FavoriteCount": "4", "PostTypeId": "1", "LastEditDate": "2016-08-23T15:57:34.757", "LastEditorUserId": "1841194", "LastActivityDate": "2016-08-23T15:57:34.757", "Score": "24", "OwnerUserId": "1841194", "Tags": "<c++><c><switch-statement>", "AnswerCount": "4"}, "29867126": {"Id": "29867126", "PostTypeId": "2", "Body": "<p>The C (rather than C++) Standard says:  </p>\n<h3>C11: 6.8.4.2 The switch statement (p3)</h3>\n<blockquote>\n<p id=\"so_29867018_29867126_0\">The expression of each <code>case</code> label shall be an integer constant expression and <strong>no two of the <code>case</code> constant expressions in the same <code>switch</code> statement shall have the same value after conversion</strong>.[...] </p>\n</blockquote>\n<p>If expressions were allowed in <code>case</code> then there are possibilities that two expressions could have same value.  </p>\n<p>The C++ (rather than C) Standard says the same:</p>\n<h3>C++11: 6.4.2 paragraph 2:</h3>\n<blockquote>\n<p id=\"so_29867018_29867126_1\">[...] No two of the case constants in the same switch shall have the same value after conversion to the promoted type of the switch condition.</p>\n</blockquote>\n", "LastEditorUserId": "1593077", "LastActivityDate": "2015-04-26T17:09:26.023", "Score": "14", "CreationDate": "2015-04-25T15:28:54.857", "ParentId": "29867018", "CommentCount": "3", "OwnerUserId": "2455888", "LastEditDate": "2015-04-26T17:09:26.023"}, "29867092": {"Id": "29867092", "PostTypeId": "2", "Body": "<p>C++ has evolved from C where switch statements were conceived as a <a href=\"http://en.wikipedia.org/wiki/Branch_table\" rel=\"nofollow noreferrer\">Jump Table (Branch Table)</a>. To implement as jump tables, the switch conditions should be constant such that it can easily be translated to a label. </p>\n<p>Though the standard never dictates how the switch statements should be implemented but, most importantly, the case labels should be such that it could be evaluated during compile time. In C and C++, the switch statement evaluates the expression and transfers control to one of the many case statement values that evaluates to the value of the conditional expression.</p>\n<p><strong>6.4.2 The switch statement [stmt.switch]</strong></p>\n<blockquote>\n<p id=\"so_29867018_29867092_0\">The switch statement causes control to be transferred to one of several statements depending on the value of a condition.</p>\n</blockquote>\n<p>This behaviour makes it different from other languages which supports, conditions in case statements. </p>\n<p>As for an instance, Javascript describes <code>switch ... case</code> statement as </p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch\" rel=\"nofollow noreferrer\">MDN switch</a> </p>\n<blockquote>\n<p id=\"so_29867018_29867092_1\">The switch statement evaluates an expression, matching the expression's value to a case clause, and executes statements associated with that case.</p>\n</blockquote>\n<p><strong><em>So you are actually trying to compare two different construct and expecting the behaviour would be the same.</em></strong> </p>\n<p>As to answer <code>the point behind this to not allowing variable values to be used in case statements?</code>, that would had made the <code>switch .. case</code> a less efficient construct where for every iteration/instance, the case labels should be re-evaluated to determine if it matches the conditional expression.</p>\n", "LastEditorUserId": "1593860", "LastActivityDate": "2015-04-26T15:55:39.480", "Score": "32", "CreationDate": "2015-04-25T15:25:39.570", "ParentId": "29867018", "CommentCount": "8", "OwnerUserId": "977038", "LastEditDate": "2015-04-26T15:55:39.480"}});