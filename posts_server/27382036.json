post_cb({"27387232": {"ParentId": "27382036", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2014-12-09T19:29:14.437", "Score": "11", "LastEditorUserId": "743382", "LastEditDate": "2014-12-09T20:10:08.970", "Id": "27387232", "OwnerUserId": "743382", "Body": "<p>Initialising any member with <code>()</code> performs value initialisation.</p>\n<p>Initialising any class type with a default constructor with <code>{}</code> performs value initialisation.</p>\n<p>Initialising any other aggregate type (including arrays) with <code>{}</code> performs list initialisation, and is equivalent to initialising each of the aggregate's members with <code>{}</code>.</p>\n<p>Initialising any reference type with <code>{}</code> constructs a temporary object, which is initialised from <code>{}</code>, and binds the reference to that temporary.</p>\n<p>Initialising any other type with <code>{}</code> performs value initialisation.</p>\n<p>Therefore, for pretty much all types, initialisation from <code>{}</code> will give the same result as value initialisation. You cannot have arrays of references, so those cannot be an exception. You <em>might</em> be able to construct arrays of aggregate class types without a default constructor, but compilers are not in agreement on the exact rules. But to get back to your question, all these corner cases do not really matter for you: for your specific array element type, they have the exact same effect.</p>\n", "LastActivityDate": "2014-12-09T20:10:08.970"}, "27383064": {"ParentId": "27382036", "PostTypeId": "2", "CommentCount": "1", "CreationDate": "2014-12-09T15:46:48.820", "Score": "-2", "LastEditorUserId": "1192896", "LastEditDate": "2014-12-09T20:39:31.850", "Id": "27383064", "OwnerUserId": "1192896", "Body": "<p>Parentheses work in C++98, and are calling for zero initialization, which is what you want. I verified on gcc 4.3. Edit: removed incorrect statement about C++11. I also confirmed that empty braces perform empty-list-initialization using clang 3.4 with -std=c++11.</p>\n", "LastActivityDate": "2014-12-09T20:39:31.850"}, "27388378": {"CommentCount": "0", "CreationDate": "2014-12-09T20:37:25.983", "LastEditorUserId": "4342498", "LastActivityDate": "2017-06-06T11:51:51.887", "ParentId": "27382036", "PostTypeId": "2", "LastEditorDisplayName": "user3920237", "LastEditDate": "2017-06-06T11:51:51.887", "Id": "27388378", "Score": "9", "Body": "<p>The types of initialization can be kind of tedious to go through, but in this case it is trivial. For:</p>\n<pre><code>public:\n    X()\n    : m_array()\n    {}\n</code></pre>\n<p>since the <em>expression-list</em> between the parentheses are empty, value-initialization occurs. Similarly for:</p>\n<pre><code>public:\n    X()\n    : m_array{}\n    {}\n</code></pre>\n<p>list-initialization occurs, and subsequently value-initialization since the <em>brace-init-list</em> is empty. </p>\n<hr/>\n<p>To give a more comprehensive answer, let's go through \u00a78.5 of N4140.</p>\n<blockquote id=\"so_27382036_27388378_0\">\n<ol start=\"12\">\n<li>If no initializer is specified for an object, the object is\n  default-initialized. When storage for an object with automatic or\n  dynamic storage duration is obtained, the object has an <em>indeterminate\n  value</em>, and if no initialization is performed for the object, that\n  object retains an indeterminate value until that value is replaced\n  (5.17).</li>\n</ol>\n</blockquote>\n<p>This <em>indeterminate value</em> is what you refer to as garbage values.</p>\n<blockquote>\n<ol start=\"6\">\n<li><p id=\"so_27382036_27388378_1\">To <em>zero-initialize</em> an object or reference of type <code>T</code> means:</p>\n<p id=\"so_27382036_27388378_2\">\u2014 if T is an array type, each element is zero-initialized</p></li>\n<li><p id=\"so_27382036_27388378_3\">To <em>value-initialize</em> an object of type <code>T</code> means:</p>\n<p id=\"so_27382036_27388378_4\">\u2014 if T is a (possibly cv-qualified) class type ... then the object is default-initialized; ...</p>\n<p id=\"so_27382036_27388378_5\">\u2014 if T is an array type, then each element is value-initialized;</p>\n<p id=\"so_27382036_27388378_6\">\u2014 otherwise, the object is zero-initialized.</p></li>\n<li><p id=\"so_27382036_27388378_7\">The semantics of initializers are as follows. ...\n  \u2014 If the initializer is a (non-parenthesized) <em>braced-init-list</em>, the object or reference is list-initialized (8.5.4).</p>\n<p id=\"so_27382036_27388378_8\">\u2014 If the initializer is (), the object is value-initialized.</p></li>\n</ol>\n</blockquote>\n<p>So far it's clear that value initialization will make each element of the array zero since <code>int</code> is not a class type. But we have not yet covered list initialization and aggregate initialization, since an array is an aggregate.</p>\n<p>\u00a78.5.4:</p>\n<blockquote>\n<ol start=\"3\">\n<li><p id=\"so_27382036_27388378_9\">List-initialization of an object or reference of type <code>T</code> is defined as follows:</p>\n<p id=\"so_27382036_27388378_10\">\u2014 If T is an aggregate, aggregate initialization is performed (8.5.1).</p></li>\n</ol>\n</blockquote>\n<p>And back to \u00a78.5.1:</p>\n<blockquote id=\"so_27382036_27388378_11\">\n<ol start=\"7\">\n<li>If there are fewer <em>initializer-clauses</em> in the list than there\n  are members in the aggregate, then each member not explicitly\n  initialized shall be initialized from its <em>brace-or-equal-initializer</em>\n  or, if there is no <em>brace-or-equal-initializer</em>, from an empty\n  initializer list (8.5.4).</li>\n</ol>\n</blockquote>\n<p>And we end with \u00a78.5.4 again:</p>\n<blockquote>\n<ol start=\"3\">\n<li><p id=\"so_27382036_27388378_12\">List-initialization of an object or reference of type <code>T</code> is defined as follows:</p>\n<p id=\"so_27382036_27388378_13\">\u2014 Otherwise, if the initializer list has no elements, the object is value-initialized.</p></li>\n</ol>\n</blockquote>\n<p>Since traversing the (draft) standard can take breath out of you, I recommend <a href=\"http://en.cppreference.com/w/\" rel=\"nofollow noreferrer\">cppreference</a> as it breaks it down pretty good. </p>\n<h3>Relevant links:</h3>\n<p>cppreference:</p>\n<ul>\n<li><p><a href=\"http://en.cppreference.com/w/cpp/language/aggregate_initialization\" rel=\"nofollow noreferrer\">aggregate initialization</a></p></li>\n<li><p><a href=\"http://en.cppreference.com/w/cpp/language/value_initialization\" rel=\"nofollow noreferrer\">value initialization</a></p></li>\n</ul>\n<p>Draft standard:</p>\n<ul>\n<li><a href=\"https://github.com/cplusplus/draft/blob/master/papers/n4140.pdf\" rel=\"nofollow noreferrer\">N4140</a></li>\n</ul>\n", "OwnerDisplayName": "user3920237"}, "bq_ids": {"n4140": {"so_27382036_27388378_1": {"section_id": 3285, "quality": 1.0, "length": 5}, "so_27382036_27388378_12": {"section_id": 3325, "quality": 1.0, "length": 6}, "so_27382036_27388378_7": {"section_id": 3296, "quality": 0.8181818181818182, "length": 9}, "so_27382036_27388378_0": {"section_id": 3291, "quality": 0.9259259259259259, "length": 25}, "so_27382036_27388378_13": {"section_id": 3325, "quality": 1.0, "length": 6}, "so_27382036_27388378_5": {"section_id": 3287, "quality": 1.0, "length": 6}, "so_27382036_27388378_10": {"section_id": 3325, "quality": 0.8, "length": 4}, "so_27382036_27388378_9": {"section_id": 3325, "quality": 1.0, "length": 6}, "so_27382036_27388378_4": {"section_id": 3287, "quality": 1.0, "length": 7}, "so_27382036_27388378_3": {"section_id": 3287, "quality": 1.0, "length": 4}, "so_27382036_27388378_2": {"section_id": 3285, "quality": 1.0, "length": 5}, "so_27382036_27388378_11": {"section_id": 3304, "quality": 0.9545454545454546, "length": 21}}, "n3337": {"so_27382036_27388378_1": {"section_id": 3155, "quality": 1.0, "length": 5}, "so_27382036_27388378_13": {"section_id": 3195, "quality": 1.0, "length": 6}, "so_27382036_27388378_5": {"section_id": 3157, "quality": 1.0, "length": 6}, "so_27382036_27388378_10": {"section_id": 3195, "quality": 0.8, "length": 4}, "so_27382036_27388378_9": {"section_id": 3195, "quality": 1.0, "length": 6}, "so_27382036_27388378_3": {"section_id": 3157, "quality": 1.0, "length": 4}, "so_27382036_27388378_4": {"section_id": 3157, "quality": 0.8571428571428571, "length": 6}, "so_27382036_27388378_12": {"section_id": 3195, "quality": 1.0, "length": 6}, "so_27382036_27388378_2": {"section_id": 3155, "quality": 1.0, "length": 5}, "so_27382036_27388378_11": {"section_id": 3174, "quality": 0.7727272727272727, "length": 17}, "so_27382036_27388378_7": {"section_id": 3166, "quality": 0.8181818181818182, "length": 9}}, "n4659": {"so_27382036_27388378_0": {"section_id": 4053, "quality": 0.9259259259259259, "length": 25}, "so_27382036_27388378_12": {"section_id": 4091, "quality": 1.0, "length": 6}, "so_27382036_27388378_13": {"section_id": 4091, "quality": 1.0, "length": 6}, "so_27382036_27388378_5": {"section_id": 4049, "quality": 1.0, "length": 6}, "so_27382036_27388378_10": {"section_id": 4091, "quality": 0.8, "length": 4}, "so_27382036_27388378_1": {"section_id": 653, "quality": 0.8, "length": 4}, "so_27382036_27388378_9": {"section_id": 4091, "quality": 1.0, "length": 6}, "so_27382036_27388378_4": {"section_id": 4049, "quality": 1.0, "length": 7}, "so_27382036_27388378_2": {"section_id": 4047, "quality": 1.0, "length": 5}, "so_27382036_27388378_11": {"section_id": 4070, "quality": 0.7272727272727273, "length": 16}, "so_27382036_27388378_7": {"section_id": 4058, "quality": 0.8181818181818182, "length": 9}}}, "27382036": {"CommentCount": "3", "AcceptedAnswerId": "27387232", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2014-12-09T15:01:41.537", "LastActivityDate": "2017-06-06T11:51:51.887", "LastEditDate": "2017-05-23T12:09:15.117", "ViewCount": "9015", "FavoriteCount": "3", "Title": "Zero-Initialize array member in initialization list", "Id": "27382036", "Score": "19", "Body": "<p>I have a class with an array member that I would like to initialize to all zeros.</p>\n<pre><code>class X\n{\nprivate:\n    int m_array[10];\n};\n</code></pre>\n<p>For a local variable, there is a straightforward way to zero-initialize (see <a href=\"https://stackoverflow.com/questions/1065774/c-c-initialization-of-a-normal-array-with-one-default-value\">here</a>):</p>\n<pre><code>int myArray[10] = {};\n</code></pre>\n<p>Also, the class member <code>m_array</code> clearly needs to be initialized, as default-initializing ints will just leave random garbage, as explained <a href=\"https://stackoverflow.com/questions/7760291/default-initialization-of-c-member-arrays\">here</a>.</p>\n<p>However, I can see two ways of doing this for a member array:</p>\n<p>With parentheses:</p>\n<pre><code>public:\n    X()\n    : m_array()\n    {}\n</code></pre>\n<p>With braces:</p>\n<pre><code>public:\n    X()\n    : m_array{}\n    {}\n</code></pre>\n<p>Are both correct? Is there any difference between the two in C++11?</p>\n", "Tags": "<c++><initialization><initialization-list><array-initialization>", "OwnerUserId": "1805388", "AnswerCount": "3"}});