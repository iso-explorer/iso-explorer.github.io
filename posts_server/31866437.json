post_cb({"bq_ids": {"n4140": {"so_31866437_31866878_2": {"length": 38, "quality": 0.9743589743589743, "section_id": 467}, "so_31866437_31866878_4": {"length": 39, "quality": 0.8863636363636364, "section_id": 3274}, "so_31866437_31866878_1": {"length": 37, "quality": 0.9736842105263158, "section_id": 456}, "so_31866437_31866437_0": {"length": 6, "quality": 0.5454545454545454, "section_id": 460}}, "n3337": {"so_31866437_31866878_1": {"length": 37, "quality": 0.9736842105263158, "section_id": 447}, "so_31866437_31866878_4": {"length": 39, "quality": 0.8863636363636364, "section_id": 3145}, "so_31866437_31866878_2": {"length": 38, "quality": 0.9743589743589743, "section_id": 458}, "so_31866437_31866437_0": {"length": 6, "quality": 0.5454545454545454, "section_id": 447}}, "n4659": {"so_31866437_31866878_1": {"length": 37, "quality": 0.9736842105263158, "section_id": 479}, "so_31866437_31866878_4": {"length": 39, "quality": 0.8863636363636364, "section_id": 4032}, "so_31866437_31866878_2": {"length": 38, "quality": 0.9743589743589743, "section_id": 490}, "so_31866437_31866437_0": {"length": 6, "quality": 0.5454545454545454, "section_id": 483}}}, "31866878": {"Id": "31866878", "PostTypeId": "2", "Body": "<p>The standard says:</p>\n<blockquote>\n<p id=\"so_31866437_31866878_0\">12.8 Copying and moving class objects  [class.copy]</p>\n<p id=\"so_31866437_31866878_1\">If the class definition does not explicitly declare a copy constructor, one is declared implicitly. If the class\n  definition declares a move constructor or move assignment operator, the implicitly declared copy constructor\n  is defined as deleted; otherwise, it is defined as defaulted (8.4). The latter case is deprecated if the class has\n  a user-declared copy assignment operator or a user-declared destructor. </p>\n<p id=\"so_31866437_31866878_2\">If the class definition does not explicitly declare a copy assignment operator, one is declared implicitly. If\n  the class definition declares a move constructor or move assignment operator, the implicitly declared copy\n  assignment operator is defined as deleted; otherwise, it is defined as defaulted (8.4). The latter case is deprecated if the class has a user-declared copy constructor or a user-declared destructor. </p>\n</blockquote>\n<p>Your class has defaulted move constructor, but it is explicitly declared.\nSo according to standard implicitly declared copy constructor and copy assignment operator is defined as deleted.</p>\n<blockquote>\n<p id=\"so_31866437_31866878_3\">8.4.2  Explicitly-defaulted functions [dcl.fct.def.default]</p>\n<p id=\"so_31866437_31866878_4\">Explicitly-defaulted functions and implicitly-declared functions are collectively called defaulted functions, and the implementation shall provide implicit definitions for them (12.1 12.4, 12.8), which might mean defining them as deleted. A function is user-provided if it is user-declared and not explicitly defaulted or deleted on its first declaration. A user-provided explicitly-defaulted function  (i.e., explicitly defaulted after its first declaration) is defined at the point where it is explicitly defaulted.</p>\n</blockquote>\n<p>Using this terminology your move constructor is user-declared, but not user-provided. </p>\n", "LastEditorUserId": "4712648", "LastActivityDate": "2015-08-06T23:14:22.937", "Score": "1", "CreationDate": "2015-08-06T22:32:58.567", "ParentId": "31866437", "CommentCount": "2", "OwnerUserId": "4712648", "LastEditDate": "2015-08-06T23:14:22.937"}, "31866437": {"ViewCount": "318", "Body": "<p>The question is as my title states.</p>\n<p>I'm asking because I have a class with a defaulted move constructor but code trying to perform copy assignment is failing stating that the copy assignment operator is <em>deleted</em> (according to Visual Studio 2015).</p>\n<p>So I checked the rules <a href=\"http://en.cppreference.com/w/cpp/language/as_operator\">here</a> for implicitly declared copy assignment operators:</p>\n<blockquote>\n<p id=\"so_31866437_31866437_0\">The implicitly-declared or defaulted copy assignment operator for class T is defined as deleted in any of the following is true:</p>\n<ul>\n<li>...</li>\n<li><strong>T has a user-declared move constructor</strong></li>\n<li>T has a user-declared move assignment operator</li>\n</ul>\n</blockquote>\n<p>So basically I'm not sure if a <em>defaulted</em> move constructor counts as <em>user-declared</em>. My gut tells me yes but when it comes to standardese I always like to be sure since assumptions can be costly.</p>\n", "AcceptedAnswerId": "31866878", "Title": "Is a defaulted move constructor considered user-declared?", "CreationDate": "2015-08-06T21:52:24.380", "Id": "31866437", "CommentCount": "16", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2015-08-06T21:59:03.557", "LastEditorUserId": "241631", "LastActivityDate": "2015-08-09T19:43:15.680", "Score": "7", "OwnerUserId": "157971", "Tags": "<c++><c++11>", "AnswerCount": "2"}, "31908164": {"Id": "31908164", "PostTypeId": "2", "Body": "<p>A defaulted special member function is user-<em>declared</em> but it is also <em>defined</em> by the user as defaulted. The standard doesn't explicitly define the term \"user-declared\" but it essentially means any special member function that has to be written out by the user. So the following declares a constructor and defines it as defaulted.</p>\n<pre><code>struct X { \n    X() = default; // declaration and definition\n};\n</code></pre>\n<p>Defining a member function as defaulted means the <em>definition</em> is equivalent to the implicit definition. It is user-declared by virtue of the fact that it had to be typed out by the user.</p>\n", "LastActivityDate": "2015-08-09T19:43:15.680", "CommentCount": "0", "CreationDate": "2015-08-09T19:43:15.680", "ParentId": "31866437", "Score": "0", "OwnerUserId": "701092"}});