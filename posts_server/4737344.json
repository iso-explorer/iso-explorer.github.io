post_cb({"4737668": {"ParentId": "4737344", "CommentCount": "0", "Body": "<p>It's natural to think that <code>A+B</code> is evaluated before <code>C</code> in this psudocode:</p>\n<p><code>(A+b)*C</code></p>\n<p>But in fact this is not so.  The Standard says that the order of evaluation for <em>all</em> expressions is \"Unspecified\", unless otherwise specified by the Standard:</p>\n<h2>5/4 [expr]:</h2>\n<blockquote>\n<p id=\"so_4737344_4737668_0\">Except where noted, the order of\n  evaluation of operands of individual\n  operators and subexpressions of\n  individual expressions, and the order\n  in which side effects take place, is\n  unspecified</p>\n</blockquote>\n<p>The Standard then goes on to identify a parenthesized expression as a \"Primary expression\" but does not specify the order of evaluation for Primary expressions. (5.1/5).</p>\n<p>In Standardese, \"Unspecified\" does not mean \"Undefined.\"  Rather it means \"Implementation Defined, but no documentation is required.\"  So you might not even be able to say what the order of evaluation is for a specific compiler.</p>\n<p>Here is a simple program illustrating the behavior:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\nusing namespace std;\n\nclass Foo\n{\npublic:\n    Foo(const string&amp; name) : name_(name) {++i_; cout &lt;&lt; \"'\" &lt;&lt; name &lt;&lt; \"'(\" &lt;&lt; i_ &lt;&lt; \")\\n\"; };\n    operator unsigned() const { return i_; }\n    Foo operator+(const Foo&amp; rhs) const { string new_name = name_; new_name += \"+\"; new_name += rhs.name_; return Foo(new_name); }\nprivate:\n    string name_;\n    static unsigned i_;\n};\n\nunsigned Foo::i_ = 0;\n\nint main()\n{\n    (Foo(\"A\") + Foo(\"B\")) + Foo(\"C\");\n}\n</code></pre>\n<p>On my MSVC10 running in Debug/x64 on Win7, the output happened to be:</p>\n<pre><code>'C'(1)\n'B'(2)\n'A'(3)\n'A+B'(4)\n'A+B+C'(5)\n</code></pre>\n", "OwnerUserId": "241536", "PostTypeId": "2", "Id": "4737668", "Score": "2", "CreationDate": "2011-01-19T16:13:24.893", "LastActivityDate": "2011-01-19T16:13:24.893"}, "4737417": {"ParentId": "4737344", "CommentCount": "0", "Body": "<p>Parenthesis in C/C++ force order of operations.  <code>func1() * func2()</code> will be added to <code>func3()</code>, but the compiler can choose to call the functions in whatever order it wishes before passing in the results to the multiplication / addition operation.</p>\n", "OwnerUserId": "570081", "PostTypeId": "2", "Id": "4737417", "Score": "1", "CreationDate": "2011-01-19T15:54:51.797", "LastActivityDate": "2011-01-19T15:54:51.797"}, "4737379": {"ParentId": "4737344", "CommentCount": "0", "Body": "<p>The functions can be called in any order.</p>\n", "OwnerUserId": "440119", "PostTypeId": "2", "Id": "4737379", "Score": "13", "CreationDate": "2011-01-19T15:52:36.210", "LastActivityDate": "2011-01-19T15:52:36.210"}, "4737393": {"ParentId": "4737344", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>You can't make any assumptions about the order in which these functions will be called. It's perfectly valid for the compiler to call these functions in any order, assign the results to temporaries, and then use these temporary values to calculate the result of the expression.</p>\n", "OwnerUserId": "253056", "LastEditorUserId": "253056", "LastEditDate": "2011-01-19T15:59:34.503", "Id": "4737393", "Score": "6", "CreationDate": "2011-01-19T15:53:14.180", "LastActivityDate": "2011-01-19T15:59:34.503"}, "4737344": {"CommentCount": "0", "AcceptedAnswerId": "4737379", "CreationDate": "2011-01-19T15:49:52.670", "LastActivityDate": "2011-01-19T16:33:00.997", "PostTypeId": "1", "ViewCount": "1554", "FavoriteCount": "0", "Title": "Order of function call", "Id": "4737344", "Score": "6", "Body": "<p>for the expression</p>\n<pre><code>(func1() * func2()) + func3()\n</code></pre>\n<p>will func1() * func2() be evaluated first as it has brackets or can the functions be called in any order like</p>\n<p>first func3() and then (func1() * func2())</p>\n", "Tags": "<c++><c>", "OwnerUserId": "473692", "AnswerCount": "6"}, "4737411": {"ParentId": "4737344", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>These calls can be made in any order. You want to learn about <del><a href=\"http://msdn.microsoft.com/en-us/library/d45c7a5d%28v=vs.80%29.aspx\" rel=\"nofollow\">C++ sequence points</a></del> <a href=\"http://en.wikipedia.org/wiki/Sequence_point\" rel=\"nofollow\">C++ sequence points</a>.</p>\n", "OwnerUserId": "106671", "LastEditorUserId": "106671", "LastEditDate": "2011-01-19T16:33:00.997", "Id": "4737411", "Score": "4", "CreationDate": "2011-01-19T15:54:25.507", "LastActivityDate": "2011-01-19T16:33:00.997"}, "bq_ids": {"n4140": {"so_4737344_4737668_0": {"section_id": 5811, "quality": 0.6470588235294118, "length": 11}}, "n3337": {"so_4737344_4737668_0": {"section_id": 5584, "quality": 0.6470588235294118, "length": 11}}, "n4659": {"so_4737344_4737668_0": {"section_id": 7272, "quality": 0.5882352941176471, "length": 10}}}, "4737594": {"ParentId": "4737344", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Precedence of operators has got nothing to do anything with the order of evaluation of operands. </p>\n<p>The C or C++ Standard doesn't determine the order in which the functions would be called. .</p>\n<p>The order of evaluation of subexpressions, including</p>\n<ul>\n<li>the arguments of a function call and</li>\n<li>operands of operators (e.g.<code>, +, -, =, * , /</code>), with the exception of:\n<ul>\n<li>the binary logical operators (<code>&amp;&amp;</code> and <code>||</code>),</li>\n<li>the ternary conditional operator (<code>?:</code>), and</li>\n<li>the comma operator (<code>,</code>)</li>\n</ul></li>\n</ul>\n<p>is <strong>Unspecified</strong></p>\n<p>For example</p>\n<pre><code>  int Hello()\n  {\n       return printf(\"Hello\"); /* printf() returns the number of \n                                  characters successfully printed by it\n                               */\n  }\n\n  int World()\n  {\n       return printf(\"World !\");\n  }\n\n  int main()\n  {\n\n      int a = Hello() + World(); //might print Hello World! or World! Hello\n      /**             ^\n                      | \n                Functions can be called in either order\n      **/\n      return 0;\n  } \n</code></pre>\n", "OwnerUserId": "165520", "LastEditorUserId": "165520", "LastEditDate": "2011-01-19T16:14:50.503", "Id": "4737594", "Score": "8", "CreationDate": "2011-01-19T16:08:11.033", "LastActivityDate": "2011-01-19T16:14:50.503"}});