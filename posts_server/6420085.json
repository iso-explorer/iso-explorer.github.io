post_cb({"6420127": {"ParentId": "6420085", "CommentCount": "9", "Body": "<p>From the C++0x FDIS \u00a77.1.5[dcl.constexpr]/1:</p>\n<blockquote>\n<p id=\"so_6420085_6420127_0\">The <code>constexpr</code> specifier shall be applied only to the definition of a variable, the declaration of a function or function template, or the declaration of a static data member of a literal type.</p>\n</blockquote>\n<p>A lambda expression is none of those things and thus may not be declared <code>constexpr</code>.</p>\n", "OwnerUserId": "151292", "PostTypeId": "2", "Id": "6420127", "Score": "24", "CreationDate": "2011-06-21T03:48:29.993", "LastActivityDate": "2011-06-21T03:48:29.993"}, "38848385": {"ParentId": "6420085", "CommentCount": "0", "Body": "<p><strong>Prior to C++17</strong> lambdas are not compatible with <code>constexpr</code>. They cannot be used inside <em>constant expressions</em>. </p>\n<p><strong>Starting with C++17</strong> lambdas are <code>constexpr</code> where it makes sense. The proposal <a href=\"https://isocpp.org/files/papers/N4487.pdf\" rel=\"noreferrer\">N4487</a> will be put into the C++17 standard. On <a href=\"https://herbsutter.com/2016/06/30/trip-report-summer-iso-c-standards-meeting-oulu/\" rel=\"noreferrer\">his website</a> Herb Sutter, chair of the ISO C++ committee, stated the following:</p>\n<blockquote>\n<p id=\"so_6420085_38848385_0\">Lambdas are now <a href=\"https://isocpp.org/files/papers/P0170R1.pdf\" rel=\"noreferrer\">allowed inside constexpr functions</a>.</p>\n</blockquote>\n", "OwnerUserId": "1335865", "PostTypeId": "2", "Id": "38848385", "Score": "9", "CreationDate": "2016-08-09T10:35:20.203", "LastActivityDate": "2016-08-09T10:35:20.203"}, "32697323": {"ParentId": "6420085", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Lambdas are currently (C++14) not allowed in constant expressions as per [expr.const]/(2.6), but they will once <a href=\"http://open-std.org/JTC1/SC22/WG21/docs/papers/2015/n4487.pdf\"><strong>N4487</strong></a> is accepted (which can be found in the working draft N4582):</p>\n<blockquote>\n<p id=\"so_6420085_32697323_0\">This proposal suggests allowing <em>lambda-expressions</em> in constant\n  expressions, removing an existing restriction. The authors propose\n  that certain <em>lambda-expression</em>s and operations on certain closure\n  objects be allowed to appear within constant expressions. In doing so,\n  we also propose that a closure type be considered a literal type if\n  the type of each of its data-members is a literal type; and, that if\n  the <code>constexpr</code> specifier is omitted within the lambda-declarator, that\n  the generated function call operator be <code>constexpr</code> if it would satisfy\n  the requirements of a <code>constexpr</code> function (similar to the\n  <code>constexpr</code> inference that already occurs for implicitly defined\n  constructors and the assignment operator functions).</p>\n</blockquote>\n", "OwnerUserId": "3647361", "LastEditorUserId": "3647361", "LastEditDate": "2016-04-06T10:28:21.347", "Id": "32697323", "Score": "21", "CreationDate": "2015-09-21T14:06:08.033", "LastActivityDate": "2016-04-06T10:28:21.347"}, "bq_ids": {"n4140": {"so_6420085_6420127_0": {"section_id": 5417, "quality": 0.9375, "length": 15}}, "n3337": {"so_6420085_6420127_0": {"section_id": 5212, "quality": 0.9375, "length": 15}}, "n4659": {"so_6420085_6420127_0": {"section_id": 6839, "quality": 0.75, "length": 12}}}, "6420085": {"CommentCount": "3", "CreationDate": "2011-06-21T03:39:56.037", "PostTypeId": "1", "AcceptedAnswerId": "32697323", "LastEditorUserId": "514235", "LastActivityDate": "2016-08-09T10:35:20.203", "LastEditDate": "2011-06-21T03:52:00.137", "ViewCount": "8598", "FavoriteCount": "4", "Title": "Is constexpr supported with lambda functions / expressions?", "Id": "6420085", "Score": "44", "Body": "<pre><code>struct Test\n{\n  static const int value = []() -&gt; int { return 0; } ();\n};\n</code></pre>\n<p>With gcc-4.6 I get something like, <code>error: function needs to be constexpr</code>. I have tried multiple combinations of putting <code>constexpr</code> at various places, but no luck.</p>\n<p>Is <code>constexpr</code> supported for lambda functions as well (irrespective of <code>return</code> type specified or not) ? What is the correct syntax ?</p>\n<p>Any work around possible ?</p>\n", "Tags": "<c++><c++11><lambda><constexpr>", "OwnerUserId": "514235", "AnswerCount": "3"}});