post_cb({"11495337": {"ParentId": "11495292", "CommentCount": "0", "Body": "<p>The code has undefined behavior. Even though what you're doing is wrong, the compiler is not required to diagnose it. The other point is that ideone uses what is now a fairly old version of gcc. A reasonably current version of gcc (e.g., 4.7) will at least give you a warning that your function is declared to return a value, but doesn't -- but not by default. You have to turn it on with something like <code>-Wall</code> to get the warning (but as a general rule, I'd <em>always</em> use at least -Wall with gcc).</p>\n", "OwnerUserId": "179910", "PostTypeId": "2", "Id": "11495337", "Score": "2", "CreationDate": "2012-07-15T20:24:39.537", "LastActivityDate": "2012-07-15T20:24:39.537"}, "11495319": {"ParentId": "11495292", "PostTypeId": "2", "CommentCount": "7", "Body": "<p>Plain and simply (from C++11 6.6.3 \"The return statement\"):</p>\n<blockquote>\n<p id=\"so_11495292_11495319_0\">Flowing off the end of a function is equivalent to a return with no value; this results in undefined behavior in a value-returning function.</p>\n</blockquote>\n<p>So the compiler is pretty much allowed to do whatever it wants.  Clearly, a diagnostic is something I'd prefer from a compiler, but there are times when it can be difficult to diagnose (like when the return is inside conditional logic, and the 'end' of the function would never be reached).</p>\n<p>Note that I get the following warning with GCC 4.6.1 (using the <code>Wall</code> option):</p>\n<pre><code>test.cpp:8:1: warning: no return statement in function returning non-void [-Wreturn-type]\n</code></pre>\n<p>I'm not sure what options ideone passes to GCC (I imagine that <code>-Wall</code> would do the same with the 4.3.4 version that ideone uses).</p>\n<p>Some related information:</p>\n<p>In C it's OK for a function that is declared to return a value to not actually do so in certain circumstances; in C it only results in undefined behavior if the function's return value is actually <em>used</em>. Pre-standard C didn't always support the <code>void</code> type, so functions that didn't return anything were often declared to return <code>int</code>, explicitly or implicitly. From C99 6.9.1/12 \"Function definitions\": If the <code>}</code> that terminates a function is reached, and the value of the function call is used by the caller, the behavior is undefined. </p>\n<p>Also, as mentioned in a couple comments, flowing off the end of <code>main()</code> is treated specially by C++ and C99 and later.</p>\n", "OwnerUserId": "12711", "LastEditorUserId": "12711", "LastEditDate": "2012-07-15T21:20:58.593", "Id": "11495319", "Score": "14", "CreationDate": "2012-07-15T20:22:06.807", "LastActivityDate": "2012-07-15T21:20:58.593"}, "11495325": {"ParentId": "11495292", "CommentCount": "0", "Body": "<p>Not returning a value from a non-void function is a mistake, but not all compiler treats it as an error -- for example, GCC only emits a warning when it encounters this. Other compilers may be paranoid (and they're right) and don't let you compile such code. Of course compiler behavior may be modified using different switches and options.</p>\n<p>The return value of 0 is just a random value -- it might equally be 255, -1 or any other garbage, as doing this is undefined behavior (except for main, for which C99 specifies that an implicit 0 return value should be assumed).</p>\n", "Id": "11495325", "PostTypeId": "2", "OwnerDisplayName": "user529758", "Score": "3", "CreationDate": "2012-07-15T20:23:24.623", "LastActivityDate": "2012-07-15T20:23:24.623"}, "11495327": {"ParentId": "11495292", "CommentCount": "0", "Body": "<p>It appears that ideone doesn't display warnings, it only displays the compiler output if there was an error.  On the version of GCC that ideone is using (gcc 4.3) this isn't an error, it's just a warning.  </p>\n", "OwnerUserId": "36384", "PostTypeId": "2", "Id": "11495327", "Score": "3", "CreationDate": "2012-07-15T20:23:33.013", "LastActivityDate": "2012-07-15T20:23:33.013"}, "11495292": {"CommentCount": "0", "ViewCount": "823", "CreationDate": "2012-07-15T20:18:37.590", "LastActivityDate": "2012-07-15T21:20:58.593", "Title": "Why does this compile on Ideone?", "AcceptedAnswerId": "11495319", "PostTypeId": "1", "Id": "11495292", "Score": "9", "Body": "<p>Ok so I was messing around on <a href=\"http://ideone.com\">Ideone</a> and accidentally submitted this piece of code, however to my surprise it actually compiled and ran outputting a value of 0, <a href=\"http://ideone.com/Lkbjo\">here</a>.</p>\n<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nconst int five(  )\n{\n        const int i = 5;\n}\n\nint main() {\n        cout &lt;&lt; five(  ) &lt;&lt; endl;\n        return 0;\n}\n</code></pre>\n<p>I then tried this in Visual Studio, and on <a href=\"http://codepad.org\">Codepad</a> however both failed to compile because <code>five()</code> does not return a value, as one would expect. My question, is of course, why does this compile fine on <a href=\"http://ideone.com\">Ideone</a> even though the code, to my understanding is wrong and shouldn't compile.</p>\n", "Tags": "<c++>", "OwnerUserId": "862396", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_11495292_11495319_0": {"section_id": 3913, "quality": 1.0, "length": 12}}, "n3337": {"so_11495292_11495319_0": {"section_id": 3773, "quality": 1.0, "length": 12}}, "n4659": {"so_11495292_11495319_0": {"section_id": 4799, "quality": 0.75, "length": 9}}}});