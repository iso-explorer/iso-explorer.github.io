post_cb({"21691319": {"ParentId": "21691213", "PostTypeId": "2", "CommentCount": "7", "Body": "<p>No, it won't deallocate.  It will be a memory leak if the constructor throws at <code>aNum &lt; 100</code>.</p>\n<blockquote>\n<p id=\"so_21691213_21691319_0\">An object of any storage duration whose initialization or destruction is terminated by an exception will\n  have destructors executed for all of its fully constructed subobjects (excluding the variant members of a\n  union-like class), that is, for subobjects for which the principal constructor (12.6.2) has completed execution\n  and the destructor has not yet begun execution.</p>\n</blockquote>\n<p>The standard generally won't state explicitly that something won't be called.  So by only stating destructors of fully constructed subobjects will be called, the standard is equivalently saying the object's own destructor won't be called.</p>\n<p>However, the object itself will be deallocated if it's allocated on the free store.</p>\n<blockquote>\n<p id=\"so_21691213_21691319_1\">If the object was allocated in a new-expression, the matching deallocation\n  function (3.7.4.2, 5.3.4, 12.5), if any, is called to free the storage occupied by the object.</p>\n</blockquote>\n", "OwnerUserId": "3239559", "LastEditorUserId": "3239559", "LastEditDate": "2014-02-11T01:50:57.063", "Id": "21691319", "Score": "4", "CreationDate": "2014-02-11T01:28:39.650", "LastActivityDate": "2014-02-11T01:50:57.063"}, "21691408": {"ParentId": "21691213", "CommentCount": "0", "Body": "<p>You are right, the array won't be deallocated. </p>\n<blockquote>\n<p id=\"so_21691213_21691408_0\">An object is destroyed only if fully constructed i.e if no exception\n  propagates from its constructor.</p>\n</blockquote>\n<p>Read: <a href=\"http://en.wikipedia.org/wiki/Resource_acquisition_is_initialization\" rel=\"nofollow\">RAII</a></p>\n", "OwnerUserId": "1054245", "PostTypeId": "2", "Id": "21691408", "Score": "1", "CreationDate": "2014-02-11T01:36:53.713", "LastActivityDate": "2014-02-11T01:36:53.713"}, "bq_ids": {"n4140": {"so_21691213_21691319_1": {"section_id": 3344, "quality": 0.8, "length": 12}, "so_21691213_21691319_0": {"section_id": 3344, "quality": 0.96875, "length": 31}}, "n3337": {"so_21691213_21691319_1": {"section_id": 3214, "quality": 0.8, "length": 12}, "so_21691213_21691319_0": {"section_id": 3214, "quality": 0.96875, "length": 31}}, "n4659": {"so_21691213_21691319_1": {"section_id": 4112, "quality": 0.8, "length": 12}}}, "21691213": {"CommentCount": "8", "ViewCount": "67", "PostTypeId": "1", "ClosedDate": "2014-02-11T06:46:58.083", "LastEditorUserId": "1817031", "LastActivityDate": "2014-02-11T01:50:57.063", "Body": "<p>This is a potential memory leak, correct? <code>arr</code> won't be deallocated if the constructor throws, right? I have read that the destructor won't be called in this case, but any sub objects of badType would be, however I think the array won't here because it's a raw pointer, correct?</p>\n<pre><code>class badType\n{\nprivate:\n    int* arr;\n    int myLen, myNum;\npublic:\n    badType(int myLen, int aNum)\n    {\n        this-&gt;myLen = myLen;\n        arr = new int[myLen];\n\n        if (aNum &lt; 100) \n            throw exception{ \"Da number is too low\" };\n\n        myNum = aNum;\n    }\n\n    ~badType()\n    {\n        delete[] arr;\n    }\n};\n</code></pre>\n", "LastEditDate": "2014-02-11T01:30:50.113", "AcceptedAnswerId": "21691319", "Title": "The array won't be deallocated here when the constructor throws, right?", "Id": "21691213", "Score": "2", "CreationDate": "2014-02-11T01:18:15.967", "Tags": "<c++>", "OwnerUserId": "1817031", "AnswerCount": "2"}});