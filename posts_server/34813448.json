post_cb({"34813448": {"CommentCount": "4", "AcceptedAnswerId": "34813830", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2016-01-15T14:37:58.383", "LastActivityDate": "2016-01-15T18:20:37.700", "LastEditDate": "2017-05-23T10:30:21.577", "ViewCount": "1441", "FavoriteCount": "1", "Title": "Does ::operator new(size_t) use malloc()?", "Id": "34813448", "Score": "7", "Body": "<p>Does <code>::operator new(size_t)</code> call <code>malloc()</code> internally, or does it use system calls / OS-specific library calls directly? What does the C++ standard say?</p>\n<p>In <a href=\"https://stackoverflow.com/a/13288357/1593077\">this answer</a> it says that:</p>\n<blockquote>\n<p id=\"so_34813448_34813448_0\"><code>malloc()</code> is guaranteed to return an address aligned for any standard type. <code>::operator new(n)</code> is only guaranteed to return an address aligned for any standard type no larger than <code>n</code>, and if <code>T</code> isn't a character type then new <code>T[n]</code> is only required to return an address aligned for <code>T</code>.</p>\n</blockquote>\n<p>And that suggests that <code>new()</code> cannot be required to call <code>malloc()</code>.</p>\n<p>Note: There's an SO <a href=\"https://stackoverflow.com/questions/377178/how-does-the-standard-new-operator-work-in-c?lq=1\">question</a> about everything <code>operator new</code> does <em>other</em> than allocation.</p>\n", "Tags": "<c++><malloc><new-operator><dynamic-memory-allocation>", "OwnerUserId": "1593077", "AnswerCount": "3"}, "34813830": {"ParentId": "34813448", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The details of how <code>operator new</code> is implemented are property of a particular implementation of standard library - not even a compiler or operation system. I am familiar with one (gnu) and aware of 3 others - CLang, Apache and MSFT. All of them are using <code>malloc()</code> within <code>operator new</code>, because it just makes a life of library developer so much easier.</p>\n<p>If <code>malloc()</code> were not used, said developer would have to reimplement a lot in terms of memory allocation, and sprinkle the code heavily with OS-dependent logic to actually request memory. No one wants to do this when <code>malloc()</code> is already there. But by no means they are obliged to use it.</p>\n", "OwnerUserId": "5245033", "LastEditorUserId": "5245033", "LastEditDate": "2016-01-15T15:03:56.360", "Id": "34813830", "Score": "7", "CreationDate": "2016-01-15T14:55:57.207", "LastActivityDate": "2016-01-15T15:03:56.360"}, "34813599": {"ParentId": "34813448", "PostTypeId": "2", "CommentCount": "6", "Body": "<p>Yes, it may call malloc - under windows with VS and standard runtime library it does call <code>malloc</code>.</p>\n<p>You are allowed to overload new operator and call your own allocation function. In application I work on, we have custom malloc from Doug Lea with lots of customizations for embeded systems. Windows calls malloc because it calls HeapAlloc, which is standard heap allocation function under windows. It also allows debugging allocation errors with CrtDbg api.</p>\n<p>To make answer more formal I have looked up the standard and in \u00a718.6.1.1, I found that <code>new</code></p>\n<blockquote>\n<p id=\"so_34813448_34813599_0\">Executes a loop: Within the loop, the function first attempts to\n  allocate the requested storage. <strong><em>Whether the attempt involves a call to\n  the Standard C library function malloc is unspecified</em></strong>.</p>\n</blockquote>\n<p>so wheteher malloc is used is unspecified - it might use it or not.</p>\n", "OwnerUserId": "471160", "LastEditorUserId": "471160", "LastEditDate": "2016-01-15T15:02:20.070", "Id": "34813599", "Score": "2", "CreationDate": "2016-01-15T14:45:20.527", "LastActivityDate": "2016-01-15T15:02:20.070"}, "bq_ids": {"n4140": {"so_34813448_34813599_0": {"section_id": 6815, "quality": 0.9473684210526315, "length": 18}}, "n3337": {"so_34813448_34813599_0": {"section_id": 6570, "quality": 0.9473684210526315, "length": 18}}, "n4659": {"so_34813448_34813599_0": {"section_id": 8307, "quality": 0.8947368421052632, "length": 17}}}, "34813711": {"ParentId": "34813448", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>It can, and usually it does.<br/>\nOn Windows (more specificly on VC++), the chain of calls looks like </p>\n<p><code>operator new</code> calls <code>malloc</code> calls <code>HeapAlloc</code></p>\n<p><code>HeapAlloc</code> is a Windows API function in for allocating memory from specific heap.\nwhen the process goes up, it allocate a heap (the CRT heap) in which all the standard allocation takes memory.</p>\n<p>No, it isn't obligated to call malloc. it is up to the library developers/end user developer to decide from where they want their memory from.</p>\n<p>For example, I can create a mono-threaded program. usually the heap allocator locks the heap lock when allocation/deallocation takes place, in order to prevent fatal race-condition on the heap.\nbut if my program is monothreaded, I don't have the problem.<br/>\nI may choose to create my own heap with WinApi <code>HeapCreate</code> and pass <code>HEAP_NO_SERIALIZE</code> which makes the heap skip the lock. then I can use <code>operator new</code> with plain <code>HeapAlloc</code>. this is a case where I can make <code>new</code> work with different function then <code>malloc</code>.</p>\n<p>Another low level approach which is sometimes* is done is to allocate huge memory block with <code>VirtualAlloc</code>, then pass a re-calculated memory address anytime someone calls <code>new</code>. </p>\n<p>(all of these approches are done pretty rarely, and from my experiance they bring minimal improvment to the execution time)</p>\n", "OwnerUserId": "3613500", "LastEditorUserId": "3613500", "LastEditDate": "2016-01-15T14:55:44.203", "Id": "34813711", "Score": "3", "CreationDate": "2016-01-15T14:49:51.597", "LastActivityDate": "2016-01-15T14:55:44.203"}});