post_cb({"23005241": {"CommentCount": "11", "ViewCount": "803", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2014-04-11T06:38:58.680", "LastActivityDate": "2014-05-01T02:44:00.790", "Title": "brace-or-equal-Initializer in unions", "FavoriteCount": "2", "LastEditDate": "2017-05-23T12:22:04.950", "Id": "23005241", "Score": "20", "Body": "<p>Related: <a href=\"https://stackoverflow.com/questions/23004941/how-to-initialize-a-non-pod-member-in-union/23005015\">How to initialize a non-POD member in Union</a></p>\n<p>The standard says</p>\n<blockquote>\n<p id=\"so_23005241_23005241_0\">At most one non-static data member of a union may have a brace-or-equal-initializer.</p>\n</blockquote>\n<p>But</p>\n<pre><code>struct Point {\n    Point() {}\n    Point(int x, int y): x_(x), y_(y) {}\n    int x_, y_;\n};\n\nunion U {\n    int z;\n    double w;\n    Point p = Point(1,2);\n};\n\n\n#include &lt;iostream&gt;\nint main () {\n    U u;\n    std::cout &lt;&lt; u.p.x_ &lt;&lt; \":\" &lt;&lt; u.p.y_ &lt;&lt; std::endl;\n}\n</code></pre>\n<p>prints <code>4196960:0</code> instead of the expected <code>1:2</code>.</p>\n<p>I consider this a compiler bug. Is that so?</p>\n", "Tags": "<c++><c++11><g++><compiler-bug>", "OwnerUserId": "76722", "AnswerCount": "1"}, "23401282": {"ParentId": "23005241", "CommentCount": "0", "Body": "<p>C++11 [class.ctor]/5 states:</p>\n<blockquote>\n<p id=\"so_23005241_23401282_0\">A <em>default</em> constructor for a class <code>X</code> is a constructor of class <code>X</code> that can be called without an argument. If there is no user-declared constructor for class <code>X</code>, a constructor having no parameters is implicitly declared as defaulted (8.4). An implicitly-declared default constructor is an <code>inline public</code> member of its class. A defaulted default constructor for class <code>X</code> is defined as deleted if:</p>\n<ul>\n<li><code>X</code> is a union-like class that has a variant member with a non-trivial default constructor,</li>\n<li>any non-static data member with no <em>brace-or-equal-initializer</em> is of reference type,</li>\n<li>any non-variant non-static data member of const-qualified type (or array thereof) with no <em>brace-or-equal-initializer</em> does not have a user-provided default constructor,</li>\n<li><code>X</code> is a union and all of its variant members are of const-qualified type (or array thereof),</li>\n<li><code>X</code> is a non-union class and all members of any anonymous union member are of const-qualified type (or array thereof),</li>\n<li>any direct or virtual base class, or non-static data member with no <em>brace-or-equal-initializer</em>, has class type <code>M</code> (or array thereof) and either <code>M</code> has no default constructor or overload resolution (13.3) as applied to <code>M</code>\u2019s default constructor results in an ambiguity or in a function that is deleted or inaccessible from the defaulted default constructor, or</li>\n<li>any direct or virtual base class or non-static data member has a type with a destructor that is deleted or inaccessible from the defaulted default constructor.</li>\n</ul>\n<p id=\"so_23005241_23401282_1\">A default constructor is trivial if it is not user-provided and if:</p>\n<ul>\n<li>its class has no virtual functions (10.3) and no virtual base classes (10.1), and</li>\n<li>no non-static data member of its class has a <em>brace-or-equal-initializer</em>, and</li>\n<li>all the direct base classes of its class have trivial default constructors, and</li>\n<li>for all the non-static data members of its class that are of class type (or array thereof), each such class has a trivial default constructor.</li>\n</ul>\n<p id=\"so_23005241_23401282_2\">Otherwise, the default constructor is <em>non-trivial</em>.</p>\n</blockquote>\n<p>Since the struct <code>Point</code> in the OP has a non-trivial default constructor,</p>\n<pre><code>Point() {}\n</code></pre>\n<p>a defaulted default constructor for a union containing a member of type <code>Point</code> <em>should</em> be defined as deleted according to the first bullet:</p>\n<blockquote id=\"so_23005241_23401282_3\">\n<ul>\n<li><code>X</code> is a union-like class that has a variant member with a non-trivial default constructor</li>\n</ul>\n</blockquote>\n<p>resulting in the program presented in the OP being ill-formed.</p>\n<p>However, the committee seems to consider this to be a defect in the case that a member of a union has a <em>brace-or-equal-initializer</em>, per <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_active.html#1623\" rel=\"nofollow\">core working group issue 1623</a>:</p>\n<blockquote>\n<p id=\"so_23005241_23401282_4\">According to 12.1 [class.ctor] paragraph 5,</p>\n<blockquote>\n<p id=\"so_23005241_23401282_14\">A defaulted default constructor for class X is defined as deleted if:</p>\n<ul>\n<li><p id=\"so_23005241_23401282_15\"><code>X</code> is a union-like class that has a variant member with a non-trivial default constructor,</p></li>\n<li><p id=\"so_23005241_23401282_16\">...</p></li>\n<li><p id=\"so_23005241_23401282_17\"><code>X</code> is a union and all of its variant members are of const-qualified type (or array thereof),</p></li>\n<li><p id=\"so_23005241_23401282_18\"><code>X</code> is a non-union class and all members of any anonymous union member are of const-qualified type (or array thereof),</p></li>\n<li><p id=\"so_23005241_23401282_19\">...</p></li>\n</ul>\n</blockquote>\n<p id=\"so_23005241_23401282_11\">Because the presence of a non-static data member initializer is the moral equivalent of a <em>mem-initializer</em>, these rules should probably be modified not to define the generated constructor as deleted when a union member has a non-static data member initializer. (Note the non-normative references in 9.5 [class.union] paragraphs 2-3 and 7.1.6.1 [dcl.type.cv] paragraph 2 that would also need to be updated if this restriction is changed.)</p>\n<p id=\"so_23005241_23401282_12\">It would also be helpful to add a requirement to 9.5 [class.union] requiring either a non-static data member initializer or a user-provided constructor if all the members of the union have const-qualified types.</p>\n<p id=\"so_23005241_23401282_13\">On a more general note, why is the default constructor defined as deleted just because a member has a non-trivial default constructor? The union itself doesn't know which member is the active one, and default construction won't initialize any members (assuming no <em>brace-or-equal-initializer</em>). It is up to the \u201cowner\u201d of the union to control the lifetime of the active member (if any), and requiring a user-provided constructor is forcing a design pattern that doesn't make sense. Along the same lines, why is the default destructor defined as deleted just because a member has a non-trivial destructor? I would agree with this restriction if it only applied when the union also has a user-provided constructor.</p>\n</blockquote>\n<p>Issue 1623 has the status \"drafting,\" indicating that the committee believes the issue is probably a defect - why else allow a <em>brace-or-equal-initializer</em> for a union member? - but hasn't yet devoted the time to determine the proper wording for a resolution. Indeed, the paragraph is largely the same in the current C++14 draft N3936 ([class.ctor]/4), except that the wording \"any direct or virtual base class or non-static data member\" is everywhere replaced by the simpler \"any potentially constructed subobject.\"</p>\n<p>Although the behavior of both compilers is not strictly conforming, I would consider Clang to be behaving in the spirit of the standard. It would appear that GCC becomes confused by the combination of deleted default constructor and <em>brace-or-equal-initializer</em>:</p>\n<ul>\n<li>it does <a href=\"http://coliru.stacked-crooked.com/a/34bdcc508403bb88\" rel=\"nofollow\" title=\"Live at Coliru\">diagnose the program as ill-formed in the absence of the <em>brace-or-equal-initializer</em></a>,</li>\n<li><p>with the <em>brace-or-equal-initializer</em> present and maximum warnings GCC 4.8.2 performs no initialization of the union at all, and <a href=\"http://coliru.stacked-crooked.com/a/51ad4d2c632c18ef\" rel=\"nofollow\" title=\"Live at Coliru\">even warns that the members are used uninitialized</a>:</p>\n<pre><code>main.cpp: In function 'int main()':\nmain.cpp:17:39: warning: 'u.U::p.Point::y_' is used uninitialized in this function [-Wuninitialized]\n     std::cout &lt;&lt; u.p.x_ &lt;&lt; \":\" &lt;&lt; u.p.y_ &lt;&lt; std::endl;\n                                       ^\nmain.cpp:17:22: warning: 'u.U::p.Point::x_' is used uninitialized in this function [-Wuninitialized]\n     std::cout &lt;&lt; u.p.x_ &lt;&lt; \":\" &lt;&lt; u.p.y_ &lt;&lt; std::endl;\n                      ^\n</code></pre></li>\n</ul>\n<p>GCC should probably either conform to the standard and diagnose the program as ill-formed, or emulate clang's behavior and generate a proper constructor from the <em>brace-or-equal-initializer</em>.</p>\n", "OwnerUserId": "923854", "PostTypeId": "2", "Id": "23401282", "Score": "2", "CreationDate": "2014-05-01T02:44:00.790", "LastActivityDate": "2014-05-01T02:44:00.790"}, "bq_ids": {"n4140": {"so_23005241_23401282_5": {"section_id": 369, "quality": 1.0, "length": 6}, "so_23005241_23401282_1": {"section_id": 369, "quality": 1.0, "length": 4}, "so_23005241_23401282_17": {"section_id": 369, "quality": 1.0, "length": 9}, "so_23005241_23005241_0": {"section_id": 5913, "quality": 0.7777777777777778, "length": 7}, "so_23005241_23401282_2": {"section_id": 369, "quality": 1.0, "length": 4}, "so_23005241_23401282_14": {"section_id": 369, "quality": 1.0, "length": 6}, "so_23005241_23401282_18": {"section_id": 369, "quality": 1.0, "length": 11}, "so_23005241_23401282_15": {"section_id": 369, "quality": 1.0, "length": 7}, "so_23005241_23401282_8": {"section_id": 369, "quality": 1.0, "length": 9}, "so_23005241_23401282_9": {"section_id": 369, "quality": 1.0, "length": 11}, "so_23005241_23401282_3": {"section_id": 369, "quality": 1.0, "length": 7}, "so_23005241_23401282_0": {"section_id": 369, "quality": 0.96875, "length": 31}, "so_23005241_23401282_6": {"section_id": 369, "quality": 1.0, "length": 7}}, "n3337": {"so_23005241_23401282_5": {"section_id": 359, "quality": 1.0, "length": 6}, "so_23005241_23401282_1": {"section_id": 359, "quality": 1.0, "length": 4}, "so_23005241_23401282_17": {"section_id": 359, "quality": 1.0, "length": 9}, "so_23005241_23005241_0": {"section_id": 5686, "quality": 1.0, "length": 9}, "so_23005241_23401282_2": {"section_id": 359, "quality": 1.0, "length": 4}, "so_23005241_23401282_14": {"section_id": 359, "quality": 1.0, "length": 6}, "so_23005241_23401282_18": {"section_id": 359, "quality": 1.0, "length": 11}, "so_23005241_23401282_15": {"section_id": 359, "quality": 1.0, "length": 7}, "so_23005241_23401282_8": {"section_id": 359, "quality": 1.0, "length": 9}, "so_23005241_23401282_9": {"section_id": 359, "quality": 1.0, "length": 11}, "so_23005241_23401282_3": {"section_id": 359, "quality": 1.0, "length": 7}, "so_23005241_23401282_0": {"section_id": 359, "quality": 0.96875, "length": 31}, "so_23005241_23401282_6": {"section_id": 359, "quality": 1.0, "length": 7}}, "n4659": {"so_23005241_23401282_15": {"section_id": 382, "quality": 0.8571428571428571, "length": 6}, "so_23005241_23401282_8": {"section_id": 382, "quality": 1.0, "length": 9}, "so_23005241_23401282_5": {"section_id": 382, "quality": 1.0, "length": 6}, "so_23005241_23401282_9": {"section_id": 382, "quality": 1.0, "length": 11}, "so_23005241_23401282_6": {"section_id": 382, "quality": 0.8571428571428571, "length": 6}, "so_23005241_23005241_0": {"section_id": 454, "quality": 0.6666666666666666, "length": 6}, "so_23005241_23401282_0": {"section_id": 381, "quality": 0.71875, "length": 23}, "so_23005241_23401282_14": {"section_id": 382, "quality": 1.0, "length": 6}, "so_23005241_23401282_3": {"section_id": 382, "quality": 0.8571428571428571, "length": 6}, "so_23005241_23401282_18": {"section_id": 382, "quality": 1.0, "length": 11}, "so_23005241_23401282_17": {"section_id": 382, "quality": 1.0, "length": 9}}}});