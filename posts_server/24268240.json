post_cb({"24268240": {"ViewCount": "75", "Body": "<p>Definition of S(X,m) is the following sec. 3.4.3.2/2:</p>\n<blockquote>\n<p id=\"so_24268240_24268240_0\">For a namespace X and name m, the namespace-qualified lookup set S(X,\n  m) is defined as follows: Let S (X, m) be the set of all declarations\n  of m in X and the inline namespace set of X (7.3.1). If S (X, m) is\n  not empty, S(X, m) is S (X, m); otherwise, S(X, m) is the union of\n  S(Ni , m) for all namespaces Ni nominated by using-directives in X and\n  its inline namespace set.</p>\n</blockquote>\n<p>The quote from 3.4.3.2/3:</p>\n<blockquote>\n<p id=\"so_24268240_24268240_1\">Given X::m (where X is a user-declared namespace), or given ::m (where\n  X is the global namespace), if S(X, m) is the empty set, the program\n  is ill-formed. Otherwise, if S(X, m) has exactly one member, or if the\n  context of the reference is a using-declaration (7.3.3), S(X, m) is\n  the required set of declarations of m. Otherwise <strong>if the use of m is\n  not one that allows a unique declaration to be chosen from S(X, m),\n  the program is ill-formed.</strong></p>\n</blockquote>\n<p>Can you get an example to demonstrate the rule:</p>\n<blockquote>\n<p id=\"so_24268240_24268240_2\">if the use of m is not one that allows a unique declaration to be\n  chosen from S(X, m), the program is ill-formed.</p>\n</blockquote>\n", "AcceptedAnswerId": "24268394", "Title": "Code example for non-unique namespace-qualified lookup", "CreationDate": "2014-06-17T15:52:46.643", "Id": "24268240", "CommentCount": "2", "LastEditDate": "2014-06-22T06:38:59.797", "PostTypeId": "1", "OwnerDisplayName": "user2953119", "LastEditorUserId": "23897", "LastActivityDate": "2014-06-22T06:38:59.797", "Score": "2", "Tags": "<c++><namespaces><language-lawyer>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_24268240_24268240_0": {"length": 25, "quality": 0.8928571428571429, "section_id": 7117}, "so_24268240_24268240_1": {"length": 29, "quality": 0.9666666666666667, "section_id": 7118}, "so_24268240_24268240_2": {"length": 7, "quality": 1.0, "section_id": 7118}}, "n3337": {"so_24268240_24268240_1": {"length": 29, "quality": 0.9666666666666667, "section_id": 6862}, "so_24268240_24268240_0": {"length": 25, "quality": 0.8928571428571429, "section_id": 6861}, "so_24268240_24268240_2": {"length": 7, "quality": 1.0, "section_id": 6862}}, "n4659": {"so_24268240_24268240_0": {"length": 25, "quality": 0.8928571428571429, "section_id": 8618}, "so_24268240_24268240_1": {"length": 29, "quality": 0.9666666666666667, "section_id": 8619}, "so_24268240_24268240_2": {"length": 7, "quality": 1.0, "section_id": 8619}}}, "24268394": {"Id": "24268394", "PostTypeId": "2", "Body": "<p>The draft standard actually provides an example although it is not very easy to find, is is under paragraph <em>3</em> and is as follows, given the following:</p>\n<pre><code>namespace A {\n  using namespace Y;\n  void f(int);\n  void g(int);\n  int i;\n}\nnamespace B {\n  using namespace Z;\n  void f(char);\n  int i;\n}\nnamespace AB {\n  using namespace A;\n  using namespace B;\n  void g();\n}\n</code></pre>\n<p>Buried in the examples is the following:</p>\n<pre><code>AB::i++; // i is not declared directly in AB so the rules are\n         // applied recursively to A and B,\n         // S is { A::i , B::i } so the use is ambiguous\n         // and the program is ill-formed\n</code></pre>\n", "LastActivityDate": "2014-06-17T15:59:45.477", "CommentCount": "3", "CreationDate": "2014-06-17T15:59:45.477", "ParentId": "24268240", "Score": "1", "OwnerUserId": "1708801"}});