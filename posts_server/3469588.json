post_cb({"bq_ids": {"n4140": {"so_3469588_3469588_7": {"length": 32, "quality": 0.7804878048780488, "section_id": 5311}, "so_3469588_3469588_5": {"length": 14, "quality": 0.875, "section_id": 6256}, "so_3469588_3469588_3": {"length": 24, "quality": 0.8275862068965517, "section_id": 504}, "so_3469588_3469588_2": {"length": 8, "quality": 0.8888888888888888, "section_id": 503}, "so_3469588_3469588_4": {"length": 34, "quality": 0.8095238095238095, "section_id": 505}}, "n3337": {"so_3469588_3469588_7": {"length": 32, "quality": 0.7804878048780488, "section_id": 5108}, "so_3469588_3469588_5": {"length": 14, "quality": 0.875, "section_id": 6016}, "so_3469588_3469588_2": {"length": 8, "quality": 0.8888888888888888, "section_id": 494}, "so_3469588_3469588_3": {"length": 24, "quality": 0.8275862068965517, "section_id": 495}, "so_3469588_3469588_4": {"length": 34, "quality": 0.8095238095238095, "section_id": 496}}, "n4659": {"so_3469588_3469588_7": {"length": 31, "quality": 0.7560975609756098, "section_id": 6735}, "so_3469588_3469588_5": {"length": 14, "quality": 0.875, "section_id": 7760}, "so_3469588_3469588_2": {"length": 8, "quality": 0.8888888888888888, "section_id": 524}, "so_3469588_3469588_3": {"length": 24, "quality": 0.8275862068965517, "section_id": 525}, "so_3469588_3469588_4": {"length": 34, "quality": 0.8095238095238095, "section_id": 526}}}, "3469671": {"Id": "3469671", "PostTypeId": "2", "Body": "<p>The standard headers (string, iostream) don't necessarily have to be files with those names, or even files at all.  As long as when you say</p>\n<pre><code>#include &lt;iostream&gt;\n</code></pre>\n<p>a certain list of declarations come into scope, the Standard is satisfied.  Exactly how that comes about is an implementation detail.  (when the Standard was being written, DOS could only handle 8.3 filenames, but some of the standard header names were longer than that)</p>\n", "LastActivityDate": "2010-08-12T16:07:21.787", "CommentCount": "1", "CreationDate": "2010-08-12T16:07:21.787", "ParentId": "3469588", "Score": "2", "OwnerUserId": "12725"}, "3469588": {"ViewCount": "7470", "Body": "<p>For the purposes of this question, I am interested only in Standard-Compliant C++, not C or C++0x, and not any implementation-specific details.</p>\n<p><a href=\"https://stackoverflow.com/questions/21593/what-is-the-difference-between-include-filename-and-include-filename\">Questions</a> arise from time to time regarding the difference between <code>#include \"\"</code> and <code>#include &lt;&gt;</code>.  The argument typically boils down to two differences:</p>\n<ol>\n<li>Specific implementations often search different paths for the two forms.  This is platform-specific, and not in the scope of this question.</li>\n<li>The Standard says <code>#include &lt;&gt;</code> is for \"headers\" whereas <code>#include \"\"</code> is for a \"source file.\"  Here is the relevant reference:</li>\n</ol>\n<blockquote>\n<p id=\"so_3469588_3469588_0\"><h1>ISO/IEC 14882:2003(E)</h1></p>\n<p id=\"so_3469588_3469588_1\"><h2>16.2 Source file inclusion [cpp.include]</h2></p>\n<p id=\"so_3469588_3469588_2\"><b>1</b> A #include directive shall identify a header or source file that can be processed by the implementation.</p>\n<p id=\"so_3469588_3469588_3\"><b>2</b> A preprocessing directive of the form\n<pre><code># include  &lt; h-char-sequence &gt; new-line</code></pre>\nsearches a sequence of implementation-defined places for a <b>header</b> identified uniquely by the specified sequence between the &lt; and &gt; delimiters, and causes the replacement of that directive by the entire contents of the header. How the places are specified or the header identified is implementation-defined.</p>\n<p id=\"so_3469588_3469588_4\"><b>3</b> A preprocessing directive of the form\n<pre><code># include \"q-char-sequence\" new-line</code></pre>\ncauses the replacement of that directive by the entire contents of the <b>source file</b> identified by the specified sequence between the \" delimiters. The named source file is searched for in an implementation-defined manner. If this search is not supported, or if the search fails, the directive is reprocessed as if it read\n<pre><code># include  &lt; h-char-sequence &gt; new-line</code></pre>\nwith the identical contained sequence (including &gt; characters, if any) from the original directive.</p>\n</blockquote>\n<p>(Emphasis in quote above is mine.) The implication of this difference seems to be that the Standard intends to differentiate between a 'header' and a 'source file', but nowhere does the document define either of these terms or the difference between them.</p>\n<p>There are few other places where headers or source files are even mentioned.  A few:</p>\n<blockquote id=\"so_3469588_3469588_5\">158) A header is not necessarily a source file, nor are the sequences delimited by  in header names necessarily valid source file names (16.2).</blockquote>\n<p>Seems to imply a header may not reside in the filesystem, but it doesn't say that source files do, either.</p>\n<blockquote><p id=\"so_3469588_3469588_6\"><h2>2 Lexical conventions [lex]</h2></p>\n<p id=\"so_3469588_3469588_7\"><b>1</b> The text of the program is kept in units called source files in this International Standard. A source file together with all the headers (17.4.1.2) and source files included (16.2) via the preprocessing directive <code>#include</code>, less any source lines skipped by any of the conditional inclusion (16.1) preprocessing directives, is called a translation unit. [Note: a C + + program need not all be translated at the same time. ]</p></blockquote>\n<p>This is the closest I could find to a definition, and it seems to imply that headers are not the \"text of the program.\"  But if you <code>#include</code> a header, doesn't it become part of the text of the program?  This is a bit misleading.</p>\n<p>So what is a header?  What is a source file?</p>\n", "AcceptedAnswerId": "3469630", "Title": "Pedantic: What Is A Source File? What Is A Header? ", "CreationDate": "2010-08-12T15:57:56.740", "Id": "3469588", "CommentCount": "1", "FavoriteCount": "3", "PostTypeId": "1", "LastEditDate": "2017-05-23T10:30:18.373", "LastEditorUserId": "-1", "LastActivityDate": "2012-05-14T17:15:11.327", "Score": "15", "OwnerUserId": "241536", "Tags": "<c++><language-lawyer>", "AnswerCount": "5"}, "3469798": {"Id": "3469798", "PostTypeId": "2", "Body": "<p>As your quotes say: a header is something included using <code>&lt;&gt;</code>, and a source file is the file being compiled, or something included using <code>\"\"</code>. Exactly where the contents of these come from, and what non-standard headers are available, is up to the implementation. All the Standard specifies is what is defined if you include the standard headers. </p>\n<p>By convention, headers are generally system-wide things, and source files are generally local to a project (for some definition of project), but the standard wisely doesn't get bogged down in anything to do with project organisation; it just gives very general definitions that are compatible with such conventions, leaving the details to the implementation and/or the user.</p>\n<p>Nearly all of the standard deals with the program after it's been preprocessed, at which time there are no such things as source files or headers, just the translations units that your last quote defines.</p>\n", "LastEditorUserId": "204847", "LastActivityDate": "2010-08-12T16:51:41.567", "Score": "2", "CreationDate": "2010-08-12T16:21:02.833", "ParentId": "3469588", "CommentCount": "0", "OwnerUserId": "204847", "LastEditDate": "2010-08-12T16:51:41.567"}, "3469630": {"Id": "3469630", "PostTypeId": "2", "Body": "<p>Isn't this saying that a header may be implemented as a source file, but there again may not be? as for \"what is a source file\", it seems very sensible for the standard not to spell this out, given the many ways that \"files\" are implemented.</p>\n", "OwnerDisplayName": "anon", "LastActivityDate": "2010-08-12T16:02:54.217", "Score": "4", "CreationDate": "2010-08-12T16:02:54.217", "ParentId": "3469588", "CommentCount": "5"}, "3469662": {"Id": "3469662", "PostTypeId": "2", "Body": "<p>My reading is that the standard headers, included by use of <code>&lt;&gt;</code> angle brackets, need not be actual files on the filesystem; e.g. an implementation would be free to enable a set of \"built-in\" operations providing the functionality of <code>iostream</code> when it sees <code>#include &lt;iostream&gt;</code>.</p>\n<p>On the other hand, \"source files\" included with <code>#include \"xxx.h\"</code> are intended to be literal files residing on the filesystem, searched in some implementation-dependent manner.</p>\n<p>Edit: to answer your specific question, I believe that \"headers\" are limited only to those <code>#include</code>able facilities specified in the standard: <code>iostream</code>, <code>vector</code> and friends---or by the implementation as extensions to the standard. \"Source files\" would be any non-standard facilities (as <code>.h</code> files, etc.) the programmer may write or use.</p>\n", "LastEditorUserId": "6210", "LastActivityDate": "2010-11-16T17:52:01.580", "Score": "8", "CreationDate": "2010-08-12T16:06:00.563", "ParentId": "3469588", "CommentCount": "13", "OwnerUserId": "30160", "LastEditDate": "2010-11-16T17:52:01.580"}, "3469746": {"Id": "3469746", "PostTypeId": "2", "Body": "<p>Hmmm...</p>\n<p>My casual understanding has been that the distinction between &lt;&gt; includes and \"\" includes was inherited from c and (though not defined by the standards) the <em>de facto</em> meaning was that &lt;&gt; searched paths for system and compiler provided headers and \"\" also searched local and user specified paths.</p>\n<p>The definition above seem to agree in some sense with that usage, but restricts the use of \"header\" to things provided by the compiler or system <em>exclusive</em> of code provided by the user, even if they have the traditional \"interface goes in the header\" form.</p>\n<p>Anyway, very interesting.</p>\n", "LastActivityDate": "2010-08-12T16:15:58.290", "CommentCount": "1", "CreationDate": "2010-08-12T16:15:58.290", "ParentId": "3469588", "Score": "0", "OwnerUserId": "2509"}});