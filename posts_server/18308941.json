post_cb({"18330289": {"ParentId": "18308941", "CommentCount": "0", "Body": "<p>This is clearly an error in Sun CC.  The standard is clear, and your understanding of it is correct.</p>\n", "OwnerUserId": "649665", "PostTypeId": "2", "Id": "18330289", "Score": "1", "CreationDate": "2013-08-20T08:24:12.873", "LastActivityDate": "2013-08-20T08:24:12.873"}, "18308941": {"CommentCount": "4", "ViewCount": "898", "PostTypeId": "1", "LastEditorUserId": "14089", "CreationDate": "2013-08-19T07:58:21.770", "LastActivityDate": "2013-08-20T08:27:16.587", "Title": "c++ array zero-initialization: Is this a bug, or is this correct?", "FavoriteCount": "3", "LastEditDate": "2013-08-19T08:05:17.190", "Id": "18308941", "Score": "14", "Body": "<p><i>Note: We are speaking about (supposedly) C++98 compliant compilers, here. This is not a C++11 question.</i></p>\n<p>We have a strange behavior in one of our compilers and we're not sure if this is Ok or if this is a compiler bug:</p>\n<pre><code>// This struct has a default constructor\nstruct AAA\n{\n   AAA() : value(0) {}\n   int value ;\n} ;\n\n// This struct has a member of type AAA and an array of int, both surrounded\n// by ints\nstruct BBB\n{\n   int m_a ;\n   AAA m_b ;\n   int m_c ;\n   int m_d[42] ;\n} ;\n</code></pre>\n<p>When BBB is initialized as such:</p>\n<pre><code>BBB bbb = {0} ;\n</code></pre>\n<p>We expected all the POD members of BBB (including m_d, the array of ints) to be zero-initialized, and all the non-POD members of BBB to be constructed.</p>\n<p>This worked on the native compiler of AIX, on Linux/GCC-3.4, on Windows/VisualC++... But not on Solaris/SunStudio, where only the non-arrays members are zero-initialized.</p>\n<p>We did a little research, in the C++98 standard (a draft document), where we found the following:</p>\n<blockquote>\n<p id=\"so_18308941_18308941_0\">[12.6.1 - 2]</p>\n<p id=\"so_18308941_18308941_1\">When an aggregate (whether class or array) contains members of class type and is initialized by a brace-enclosed initializer-list (8.5.1), each such member is copy-initialized (see 8.5) by the corresponding assignment-expression. <b>If there are fewer initializers in the initializer-list than members of the aggregate, each member not explicitly initialized shall be default-initialized (8.5)</b>.</p>\n</blockquote>\n<p>Then:</p>\n<blockquote>\n<p id=\"so_18308941_18308941_2\">[8.5 - 5]</p>\n<p id=\"so_18308941_18308941_3\"><b>To zero-initialize</b> storage for an object of type T means:<br/>\n  \u2014 <b>if T is a scalar type (3.9), the storage is set to the value of 0 (zero) converted to T ;</b><br/>\n  \u2014 if T is a non-union class type, the storage for each nonstatic data member and each base-class subobject is zero-initialized;<br/>\n  \u2014 if T is a union type, the storage for its first data member 89) is zero-initialized;<br/>\n  \u2014 if T is an array type, the storage for each element is zero-initialized;<br/>\n  \u2014 if T is a reference type, no initialization is performed. <br/></p>\n</blockquote>\n<p>And then:</p>\n<blockquote>\n<p id=\"so_18308941_18308941_4\"><b>To default-initialize</b> an object of type T means:<br/>\n  \u2014 if T is a non-POD class type (clause 9), the default constructor for T is called (and the initialization is ill-formed if T has no accessible default constructor);<br/>\n  \u2014 <b>if T is an array type, each element is default-initialized;</b><br/>\n  \u2014 <b>otherwise, the storage for the object is zero-initialized.</b><br/></p>\n</blockquote>\n<p>The way I read it: SunStudio should zero-initialize the array of ints (BBB::m_d)</p>\n<p>Strange thing: if we remove the default constructor from AAA, then everything in BBB is zero-initialized.</p>\n<p><b>QUESTION: Is SunStudio behavior standard when it fails to zero-initialize an array of ints of a struct containing a non-POD? Or is this a compiler bug?</b></p>\n", "Tags": "<c++><standards-compliance><c++98><compiler-bug>", "OwnerUserId": "14089", "AnswerCount": "3"}, "18330348": {"ParentId": "18308941", "CommentCount": "0", "Body": "<p>It seems to be a bug - I have no experience with Solaris compilers, but all other compilers I've worked with will allow this sort of initialization.</p>\n<p>I would suggest that work around the problem by being more explicit:</p>\n<pre><code> BBB bbb = {0, 0, 0, {0} };\n</code></pre>\n", "OwnerUserId": "1919155", "PostTypeId": "2", "Id": "18330348", "Score": "1", "CreationDate": "2013-08-20T08:27:16.587", "LastActivityDate": "2013-08-20T08:27:16.587"}, "18324538": {"ParentId": "18308941", "CommentCount": "0", "Body": "<p>It is indeed a bug with Sun/Solaris. \nWhat you've written is indeed what is supposed to happen and you are correct with everything you write.</p>\n", "OwnerUserId": "1164004", "PostTypeId": "2", "Id": "18324538", "Score": "2", "CreationDate": "2013-08-19T23:08:38.273", "LastActivityDate": "2013-08-19T23:08:38.273"}, "bq_ids": {"n4140": {"so_18308941_18308941_4": {"section_id": 3286, "quality": 0.8, "length": 20}, "so_18308941_18308941_3": {"section_id": 3285, "quality": 0.8095238095238095, "length": 34}}, "n3337": {"so_18308941_18308941_4": {"section_id": 3156, "quality": 0.84, "length": 21}, "so_18308941_18308941_3": {"section_id": 3155, "quality": 0.8571428571428571, "length": 36}}, "n4659": {"so_18308941_18308941_4": {"section_id": 4049, "quality": 0.64, "length": 16}, "so_18308941_18308941_3": {"section_id": 4047, "quality": 0.7619047619047619, "length": 32}}}});