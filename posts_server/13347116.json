post_cb({"13347587": {"ParentId": "13347116", "CommentCount": "3", "Body": "<p>There are multiple problems with your code.  Primarily, this is not valid C++03:</p>\n<pre><code>class CFoo{\nprivate:\n    static const double VPI = 0.5;    \n// ...\n};\n</code></pre>\n<p>The declaration of a static data member can specify a constant initializer if and only if that initializer is <code>const</code> integral or <code>const</code> enumeration type.  <code>0.5</code> is neither of these, and hence your code is not valid C++.  <strong>9.4.2 Static data members</strong> covers this:</p>\n<blockquote>\n<p id=\"so_13347116_13347587_0\">2/ The declaration of a static data member in its class definition is\n  not a definition [...]The definition for a static data member shall\n  appear in a namespace scope enclosing the member\u2019s class definition.\n  [...]</p>\n<p id=\"so_13347116_13347587_1\">4/ If a static data member is of const integral or const enumeration\n  type, its declaration in the class definition can specify a\n  constant-initializer which shall be an integral constant expression\n  (5.19).</p>\n</blockquote>\n<p>In order to initialize <code>VPI</code>, you must do so in the CPP file:</p>\n<h2>header:</h2>\n<pre><code>class CFoo{\nprivate:\n    static const double VPI;    \n};\n</code></pre>\n<h2>cpp :</h2>\n<pre><code>const double CFoo::VPI = 0.5;\n</code></pre>\n<p>Another problem, unrelated, is here:</p>\n<pre><code>int main(){\n    CFoo aFoo(); // NOT OK\n    return 0;\n</code></pre>\n<p>The expression <code>CFoo aFoo();</code> doesn't do what you think it does.  You think it declares an object <code>aFoo</code> of type <code>CFoo</code> and initializes it using <code>CFoo</code>'s default constructor.  But what it actually does is declare a function named <code>aFoo</code> taking no parameters, returning a <code>CFoo</code> by value.  This is known as the <a href=\"http://en.wikipedia.org/wiki/Most_vexing_parse\">most vexing parse</a>.  In order to do what you want, simple omit the parenthesis:</p>\n<pre><code>CFoo aFoo;\n</code></pre>\n", "OwnerUserId": "241536", "PostTypeId": "2", "Id": "13347587", "Score": "5", "CreationDate": "2012-11-12T16:33:43.803", "LastActivityDate": "2012-11-12T16:33:43.803"}, "13347116": {"CommentCount": "10", "ViewCount": "408", "CreationDate": "2012-11-12T16:05:42.747", "LastActivityDate": "2012-11-12T16:33:43.803", "Title": "Why does negating a static member variable produce a linker error?", "AcceptedAnswerId": "13347587", "PostTypeId": "1", "Id": "13347116", "Score": "2", "Body": "<p>Please consider the following mini example</p>\n<pre><code>// CFoo.hpp\nclass CFoo{\nprivate:\n    static const double VPI = 0.5;    \npublic:\n    double getVpi();\n};\n\n// CFoo.cpp\n#include \"CFoo.hpp\"    \ndouble CFoo::getVpi(){\n    double x = -VPI;\n    return x;\n}\n\n// main.cpp\n#include \"CFoo.hpp\"    \nint main(){\n    CFoo aFoo();\n    return 0;\n}\n</code></pre>\n<p>Lining the program with gcc version 4.5.1 produces the error <code>CFoo.cpp: undefined reference to CFoo::VPI</code>. The error dose <strong>not</strong> occur if</p>\n<ul>\n<li>VPI is not negated</li>\n<li>the negation is written as <code>double x = -1 * VPI;</code></li>\n<li>Declaration and definition of class CFoo happen in the same file</li>\n</ul>\n<p>Do you know the reason for this error?</p>\n", "Tags": "<c++>", "OwnerUserId": "585869", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_13347116_13347587_1": {"section_id": 5908, "quality": 0.7368421052631579, "length": 14}, "so_13347116_13347587_0": {"section_id": 5907, "quality": 0.9047619047619048, "length": 19}}, "n3337": {"so_13347116_13347587_1": {"section_id": 5680, "quality": 0.7368421052631579, "length": 14}, "so_13347116_13347587_0": {"section_id": 5679, "quality": 0.9047619047619048, "length": 19}}, "n4659": {"so_13347116_13347587_1": {"section_id": 7390, "quality": 0.7368421052631579, "length": 14}, "so_13347116_13347587_0": {"section_id": 7389, "quality": 0.9047619047619048, "length": 19}}}});