post_cb({"40784990": {"ParentId": "40784322", "PostTypeId": "2", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_40784322_40784990_0\">Is this true that {object} always produces temporary object?</p>\n</blockquote>\n<p>No (read on).</p>\n<p>Both snippets are valid (you should use an up-to-date compiler) and will compile successfully.</p>\n<p>The <code>{p}</code> case falls into <code>[over.match.list]/p1</code></p>\n<blockquote>\n<p id=\"so_40784322_40784990_1\">When objects of non-aggregate class type T are list-initialized such that [dcl.init.list] specifies that overload resolution is performed according to the rules in this section, overload resolution selects the constructor in two phases:</p>\n<p id=\"so_40784322_40784990_2\">(1.1)\n  Initially, the candidate functions are the initializer-list constructors ([dcl.init.list]) of the class T and the argument list consists of the initializer list as a single argument.</p>\n<p id=\"so_40784322_40784990_3\"><strong>(1.2)</strong>\n  If no viable initializer-list constructor is found, overload resolution is performed again, where the candidate functions are all the constructors of the class T and the argument list consists of the elements of the initializer list.</p>\n</blockquote>\n<p>Specifically in (1.2), while <code>{m}</code> is a list initialization for the other case.</p>\n", "OwnerUserId": "1938163", "LastEditorUserId": "1938163", "LastEditDate": "2016-11-24T12:44:48.300", "Id": "40784990", "Score": "0", "CreationDate": "2016-11-24T11:16:13.433", "LastActivityDate": "2016-11-24T12:44:48.300"}, "40784322": {"CommentCount": "12", "AcceptedAnswerId": "40785248", "PostTypeId": "1", "LastEditorUserId": "3671410", "CreationDate": "2016-11-24T10:43:35.620", "LastActivityDate": "2016-11-24T12:44:48.300", "LastEditDate": "2016-11-24T10:53:24.750", "ViewCount": "181", "FavoriteCount": "2", "Title": "What is the type of {object}?", "Id": "40784322", "Score": "8", "Body": "<p>Consider following piece of code:</p>\n<pre><code>void foo (M&amp;) {}\n\nM m;\nfoo ({m});\n</code></pre>\n<p>So, the expression <code>{m}</code> is treated as rvalue reference and that is why this code fails to compile.</p>\n<p><strong>Is this true that <code>{object}</code> always produces temporary object?</strong></p>\n<p>If no, then how to be sure when it happens?\nIf yes, please consider following code:</p>\n<pre><code>struct M {};\n\nstruct I {\n    I (M&amp;) {}\n};\n\nstruct MM {\n    MM (M&amp; p)\n    : m (p), i ( {p} )\n    {}\n\n    M&amp; m;\n    I i;\n};\n\nM m;\nMM mm {m};\n</code></pre>\n<p>Here there is no problem at all, so what is the difference between <code>{m}</code> from the first example and <code>{p}</code> from the second?</p>\n<p>Compiler (GCC 4.8.1) results (first example):</p>\n<pre><code>main.cpp:366:13: error: invalid initialization of non-const reference of type \u2018M&amp;\u2019 from an rvalue of type \u2018&lt;brace-enclosed initializer list&gt;\u2019\n     foo ({m});\n             ^\nmain.cpp:359:6: error: in passing argument 1 of \u2018void foo(M&amp;)\u2019\n void foo (M&amp;) {}\n</code></pre>\n", "Tags": "<c++>", "OwnerUserId": "3671410", "AnswerCount": "2"}, "40785248": {"ParentId": "40784322", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_40784322_40785248_0\">What is the type of <code>{object}</code>?</p>\n</blockquote>\n<p>That depends on the context. In some situations, such as when constructing a type with a <code>std::initializer_list</code> parameter, it'll be of type <code>std::initializer_list&lt;decltype(object)&gt;</code>. In others, it'll be used to initialize members of an aggregate or some other type, in which case the syntactic form <code>{object}</code> doesn't <em>have</em> a type <em>per se</em>.</p>\n<blockquote>\n<p id=\"so_40784322_40785248_1\">Is this true that <code>{object}</code> always produces temporary object?</p>\n</blockquote>\n<p>No, and in your case it shouldn't. This was <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1288\" rel=\"nofollow noreferrer\">a bug in the C++11 spec</a> relating to the ordering of clauses specifying list initialization. The old wording meant that your call resulted in the construction of a temporary (which is ill-formed due to the non-const reference parameter), but under the new rules, the reference binds to the single initializer list element. Your old compiler implements the old wording, whereas <a href=\"http://coliru.stacked-crooked.com/a/39564c68854632dd\" rel=\"nofollow noreferrer\">newer compilers</a> implement the fixed behaviour.</p>\n<blockquote>\n<p id=\"so_40784322_40785248_2\">Here there is no problem at all, so what is the difference between {m} from the first example and {p} from the second?</p>\n</blockquote>\n<p>The difference is that <code>{m}</code> is used to initialize the <code>M</code> parameter of <code>foo</code> (invalid under the old wording), but <code>{p}</code> initializes the <code>I</code> member. As such, <code>p</code> is taken as the argument to the <code>I</code> constructor, binds to the <code>M&amp;</code> parameter, and since <code>p</code> is an lvalue, everything is fine and dandy.</p>\n", "OwnerUserId": "496161", "PostTypeId": "2", "Id": "40785248", "Score": "2", "CreationDate": "2016-11-24T11:27:58.440", "LastActivityDate": "2016-11-24T11:27:58.440"}, "bq_ids": {"n4140": {"so_40784322_40785248_1": {"section_id": 480, "quality": 0.6666666666666666, "length": 4}, "so_40784322_40784990_3": {"section_id": 599, "quality": 1.0, "length": 20}, "so_40784322_40784990_0": {"section_id": 480, "quality": 0.6666666666666666, "length": 4}, "so_40784322_40784990_1": {"section_id": 599, "quality": 0.5714285714285714, "length": 12}, "so_40784322_40784990_2": {"section_id": 599, "quality": 0.9285714285714286, "length": 13}}, "n3337": {"so_40784322_40784990_3": {"section_id": 589, "quality": 1.0, "length": 20}, "so_40784322_40784990_1": {"section_id": 589, "quality": 0.5714285714285714, "length": 12}, "so_40784322_40784990_2": {"section_id": 589, "quality": 0.9285714285714286, "length": 13}}, "n4659": {"so_40784322_40785248_1": {"section_id": 15, "quality": 0.6666666666666666, "length": 4}, "so_40784322_40784990_2": {"section_id": 622, "quality": 0.9285714285714286, "length": 13}, "so_40784322_40784990_0": {"section_id": 15, "quality": 0.6666666666666666, "length": 4}, "so_40784322_40784990_1": {"section_id": 622, "quality": 0.9523809523809523, "length": 20}, "so_40784322_40784990_3": {"section_id": 622, "quality": 1.0, "length": 20}}}});