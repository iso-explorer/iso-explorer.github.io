post_cb({"35826269": {"ParentId": "35826142", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>An inline function shall be <em>defined</em> in each TU which uses it. This means that you cannot place a <em>declaration</em> in header and define function in implementation file.</p>\n<blockquote>\n<p id=\"so_35826142_35826269_0\"><strong>7.1.2/4</strong><br>\n  An inline function shall be defined in every translation unit in which it is odr-used and shall have exactly the same definition in every case.</br></p>\n</blockquote>\n", "OwnerUserId": "3410396", "LastEditorUserId": "3410396", "LastEditDate": "2016-03-06T11:37:17.640", "Id": "35826269", "Score": "5", "CreationDate": "2016-03-06T11:24:16.420", "LastActivityDate": "2016-03-06T11:37:17.640"}, "35826142": {"CommentCount": "3", "ViewCount": "635", "PostTypeId": "1", "LastEditorUserId": "3964765", "CreationDate": "2016-03-06T11:10:45.973", "LastActivityDate": "2016-03-06T11:37:17.640", "Title": "Inline function in namespaces in C++", "LastEditDate": "2016-03-06T11:26:17.333", "Id": "35826142", "Score": "0", "Body": "<p>I am writing a matrix library.\nI put my classes inside namespace SLMath.\nbut because of inline functions i am getting errors.</p>\n<p>these are my files..</p>\n<p>Mat4.hpp</p>\n<pre><code>#ifndef INC_SLMATH_MAT4_H\n#define INC_SLMATH_MAT4_H\n\n\n#include&lt;cstdint&gt;\n#include&lt;algorithm&gt;\n\nnamespace SLMath\n{\n    class Mat4\n    {\n        typedef std::uint8_t uint8; // You know that Its tedious to write          std::uint8_t everytime\n        float matrix[16];\n        inline int index(uint8 row,uint8 col) const;\n\n    public:\n\n        //Constructors\n        Mat4();\n        Mat4(const Mat4 &amp;other);\n\n        //Destructor\n        ~Mat4();\n\n    //operators\n    void operator=(const Mat4 &amp;other);\n\n    //loads the identity matrix\n    void reset();\n\n    //returns the element in the given index\n    inline float operator()(uint8 row,uint8 col) const;\n\n    //returns the matrix array\n    inline const float* const valuePtr();\n\n};\n}\n\n\n#endif\n</code></pre>\n<p>and Mat4.cpp..</p>\n<pre><code>#include\"Mat4.hpp\"\n\n\nnamespace SLMath\n{\n\n//private member functions\ninline int Mat4::index(uint8 row,uint8 col) const\n{\n    return row*4+col;\n}\n\n\n//Public member functions\nMat4::Mat4()\n{\n    reset();\n}\n\n\nMat4::Mat4(const Mat4 &amp;other)\n{\n    this-&gt;operator=(other);\n}\n\n\nMat4::~Mat4(){}\n\n\ninline float Mat4::operator()(uint8 row,uint8 col) const\n{\n    return matrix[index(row,col)];\n}\n\n\nvoid Mat4::reset()\n{\n    float identity[16] = \n    {\n        1.0,0.0,0.0,0.0,\n        0.0,1.0,0.0,0.0,\n        0.0,0.0,1.0,0.0,\n        0.0,0.0,0.0,1.0\n    };\n\n    std::copy(identity,identity+16,this-&gt;matrix);\n}\n\n\nvoid Mat4::operator=(const Mat4 &amp;other)\n{\n    for(uint8 row=0 ; row&lt;4 ; row++)\n    {\n        for(uint8 col=0 ; col&lt;4 ; col++)\n        {\n            matrix[index(row,col)] = other(row,col);\n        }\n    }\n}\n\n\ninline const float* const Mat4::valuePtr()\n{\n    return matrix;\n}\n\n}\n</code></pre>\n<p>But when I do this..</p>\n<pre><code>SLMath::Mat4 matrix;\nconst float *const value = matrix.valuePtr();\n</code></pre>\n<p>in main functions It is giving me a linking error...</p>\n<pre><code>Main.obj : error LNK2019: unresolved external symbol \"public: float const *    __thiscall SLMath::Mat4::valuePtr(void)\" (?valuePtr@Mat4@SLMath@@QAEQBMXZ) referenced in function _main\n</code></pre>\n<p>and When I removed inline keyword from the function valuePtr() ..Its working fine.\nPlease help me...\nOne more thing is not clear here is that if the compiler is giving error for the function valuePtr() then It should also give the error for the operator()(uint8,uint8) right,because its declared inline?</p>\n", "Tags": "<c++><function><linker><namespaces>", "OwnerUserId": "3964765", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_35826142_35826269_0": {"section_id": 5404, "quality": 0.9285714285714286, "length": 13}}, "n3337": {"so_35826142_35826269_0": {"section_id": 5199, "quality": 0.9285714285714286, "length": 13}}, "n4659": {"so_35826142_35826269_0": {"section_id": 6853, "quality": 0.9285714285714286, "length": 13}}}});