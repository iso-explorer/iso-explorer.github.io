post_cb({"33375747": {"Id": "33375747", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_33375027_33375747_0\">Would it be good practice ( considering modern c++ semantics ) to \"hide the Init. code\" in a code chunk being called before main ?</p>\n</blockquote>\n<p>Because order of initialization of global static objects is not guaranteed I would consider such practice as bad in general. Another reason - providing diagnostics for such code is not trivial and creates artificial problems that can be easily avoided without using this method. There are exceptions but they are rare, definetly not as many to consider this as a good practice.</p>\n", "LastActivityDate": "2015-10-27T18:24:57.143", "CommentCount": "1", "CreationDate": "2015-10-27T18:24:57.143", "ParentId": "33375027", "Score": "3", "OwnerUserId": "432358"}, "bq_ids": {"n4140": {"so_33375027_33375635_0": {"length": 13, "quality": 0.9285714285714286, "section_id": 7153}}, "n3337": {"so_33375027_33375635_0": {"length": 13, "quality": 0.9285714285714286, "section_id": 6897}}, "n4659": {"so_33375027_33375635_0": {"length": 12, "quality": 0.8571428571428571, "section_id": 8657}}}, "33375635": {"Id": "33375635", "PostTypeId": "2", "Body": "<p>The standard, section 3.6.2, says that non-local static variables <strong>may be</strong> initialized before the first statement of <code>main</code>:</p>\n<blockquote>\n<p id=\"so_33375027_33375635_0\">It is implementation-defined whether the dynamic initialization of a\n  non-local variable with static storage duration is done before the\n  first statement of main. </p>\n</blockquote>\n<p>Thus, it doesn't say they <strong>must be</strong> initialized before the first statement of <code>main</code>. There is no way in C++ to enforce a constraint that anything would be initialized before <code>main()</code> is called, except for static variables defined in the same compilation unit as main.</p>\n<p>The best solution is simply to include your resource management within <code>main</code> itself:</p>\n<pre><code>int main()\n{\n    // Load resources (housekeeping code)\n\n    // Do real work (applicative code)\n\n    // Release resources (housekeeping code)\n}\n</code></pre>\n<p>If you want to separate the applicative code from the housekeeping code, a commonly used approach is to use <a href=\"https://en.wikipedia.org/wiki/Inversion_of_control\" rel=\"nofollow\">inversion of control</a> (sometimes via a <a href=\"https://en.wikipedia.org/wiki/Template_method_pattern\" rel=\"nofollow\">template method pattern</a>):</p>\n<ul>\n<li>A separate function or method is dedicated to the applicative or user code</li>\n<li>The function <code>main</code> is responsible both for doing the housekeeping and for invoking the user-code or applicative-code function or method.</li>\n</ul>\n<p>This is exemplified below:</p>\n<pre><code>// The function below is expected to exist by the framework\n// It must be implemented by the user\nint userMain()\n{\n    // Implement user-code here\n}\n\n// The code below is implemented by the framework\n// It expects the user to have implemented a function userMain\nint main()\n{\n    FrameWorkData theFrameWorkData;\n\n    // The framework performs its initialization house-keeping here\n    theFrameWorkData.initialize();\n\n    // The framework invokes the user-code (inversion of control)\n    userMain();\n\n    // The framework performs its clean-up house-keeping here\n    theFrameWorkData.cleanup();\n}\n</code></pre>\n", "LastEditorUserId": "5482150", "LastActivityDate": "2015-10-27T19:41:22.117", "Score": "2", "CreationDate": "2015-10-27T18:18:09.923", "ParentId": "33375027", "CommentCount": "3", "OwnerUserId": "5482150", "LastEditDate": "2015-10-27T19:41:22.117"}, "33375027": {"ViewCount": "196", "Body": "<p>I am building a c++ library and I would need to initialize an openGL context for my program ( and other default resource objects ). Would it be good practice ( considering modern c++ semantics ) to \"hide the Init. code\" in a code chunk being called before main ? I cannot use static variables because I need to initialize things in a specific order ! (I cannot init a texture before openGLm or SDL !)</p>\n<p>Here is my code :</p>\n<pre><code>#include &lt;stdio.h&gt;\n\n#ifdef _MSC_VER // For msvc / msvc++ 2015\n\n#define CCALL __cdecl\n#pragma section(\".CRT$XCU\",read)\n#define INITIALIZER(f) \\\n   static void __cdecl f(void); \\\n   __declspec(allocate(\".CRT$XCU\")) void (__cdecl*f##_)(void) = f; \\\n   static void __cdecl f(void)\n\n#elif defined(__GNUC__) for gcc / g++\n\n#define CCALL\n#define INITIALIZER(f) \\\n   static void f(void) __attribute__((constructor)); \\\n   static void f(void)\n\n#endif\n\nstatic void CCALL finalize(void)\n{\n    /* Some king of delete / dispose here : like SDL_Quit, ... */\n}\n\nINITIALIZER(initialize)\n{\n/* \n   HERE IS THE STARTUP CODE ...\n\n*/\n\n}\n</code></pre>\n", "AcceptedAnswerId": "33375635", "Title": "Is it good practice to hide Initialization code \"before main\"?", "CreationDate": "2015-10-27T17:46:44.350", "Id": "33375027", "CommentCount": "6", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2015-10-27T19:41:22.117", "Score": "0", "OwnerUserId": "5166868", "Tags": "<c++><main>", "AnswerCount": "3"}, "33375582": {"Id": "33375582", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_33375027_33375582_0\">Would it be good practice ( considering modern c++ semantics ) to \"hide the Init. code\" in a code chunk being called before main ?</p>\n</blockquote>\n<p>Only way to run anything before <code>main</code> is to do it in the constructor of a static object.</p>\n<blockquote>\n<p id=\"so_33375027_33375582_1\">I cannot use static variables </p>\n</blockquote>\n<p>You've ran out of options. There is no way to achieve what you're asking for in standard c++.</p>\n<p>To answer the question of would it be good practice... that's opinion based, but I'll say that I would usually consider it bad if a library initializes something before I've explicitly told it to initialize. That would prevent the user of the library from controlling the order of initialization of your library in relation to other libraries. It's especially important when your library depends on other libraries like SDL.</p>\n", "LastEditorUserId": "2079303", "LastActivityDate": "2015-10-27T18:26:23.097", "Score": "2", "CreationDate": "2015-10-27T18:14:45.187", "ParentId": "33375027", "CommentCount": "0", "OwnerUserId": "2079303", "LastEditDate": "2015-10-27T18:26:23.097"}});