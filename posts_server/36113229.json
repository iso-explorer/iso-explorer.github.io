post_cb({"36113229": {"CommentCount": "2", "ViewCount": "427", "PostTypeId": "1", "LastEditorUserId": "120163", "CreationDate": "2016-03-20T11:40:06.453", "LastActivityDate": "2016-03-21T11:01:49.060", "Title": "Syntax ambiguities of C++", "LastEditDate": "2016-03-20T19:36:02.927", "Id": "36113229", "Score": "12", "Body": "<p>Assume there is a declaration:</p>\n<pre><code>struct A { static int i; };\nA a;\n</code></pre>\n<p>As I know, the input string <code>int decltype(a)::i = 0;</code> has no strictly described behaviour.</p>\n<p>It can be parsed as <code>int        decltype(a)::i       = 0;</code>, where:\n<code>int</code> is a <em>decl-specifier</em> and <code>decltype(a)::i</code> the <code>declarator</code>.</p>\n<p>However,it can be parsed as <code>int decltype(a)    ::i = 0;</code>,where\n<code>int</code> and <code>decltype(a)</code> are parsed as<code>decl-specifer</code>s, and <code>::i</code> is the (re)declaration of a global variable <code>i</code> - the compiler should give a error msg which goes like \"a <em>decl-specifier-seq</em> should not contain two <em>type-specifier</em>s\".</p>\n<p>I clearly know the first way to parse should be the right one but I can't find any proof.</p>\n<p>Anyway, in <code>int A::a = 0;</code>, <code>A</code> is sure to be parsed as part of <code>declarator</code> because <code>A</code> is a <em>type-name</em> and as described in standard</p>\n<blockquote>\n<p id=\"so_36113229_36113229_0\">If a <em>type-name</em> is encountered while parsing a decl-specifier-seq, it is interpreted as part of the <em>decl-specifier-seq</em> if and only if there is no previous <em>type-specifier</em> other than a <em>cv-qualifier</em> in the <em>decl-specifier-seq</em>.</p>\n</blockquote>\n<p>In constrant, <code>decltype(a)</code> is not a <em>type-name</em>, it's a <em>type-specifier</em>.</p>\n<p>I am not 'finding a quarrel in a straw', I have this question because I'm writing my parser for C++.</p>\n<p>So, I wonder if the description should be:</p>\n<blockquote>\n<p id=\"so_36113229_36113229_1\">If a <strong>type-specifier</strong> is encountered while parsing a <em>decl-specifier-seq</em>, it is interpreted as part of the <em>decl-specifier-seq</em> if and only if there is no previous <em>type-specifier</em> other than a <em>cv-qualifier</em> in the <em>decl-specifier-seq</em>.</p>\n</blockquote>\n", "Tags": "<c++><parsing><language-lawyer><grammar>", "OwnerUserId": "5667569", "AnswerCount": "1"}, "36113490": {"ParentId": "36113229", "PostTypeId": "2", "CommentCount": "11", "Body": "<p>Your definition is explicitly disallowed by <a href=\"http://eel.is/c++draft/dcl.meaning#1\" rel=\"nofollow\">[dcl.meaning]/1</a>:</p>\n<blockquote>\n<p id=\"so_36113229_36113490_0\">The <em>nested-name-specifier</em> of a qualified <em>declarator-id</em> shall not begin with a <em>decltype-specifier</em>.</p>\n</blockquote>\n<p>(GCC and VC++ are buggy in this respect.)</p>\n<p>Your implementation's concrete diagnostic (whether referring to multiple <em>type-specifier</em>s or an invalid <em>nested-name-specifier</em>) is then just a QoI issue. In actuality, implementations will probably implement some variation of the maximum munch principle on <em>type-specifier</em>s, similar to what the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#808\" rel=\"nofollow\">original wording of your quote resembled</a> (which is why GCC and VC++ accept your code). However, <a href=\"http://goo.gl/a1fZdS\" rel=\"nofollow\">ICC gives the exact error message</a> you expected:</p>\n<blockquote>\n<p id=\"so_36113229_36113490_1\">error: invalid combination of type specifiers</p>\n</blockquote>\n<p>Note that your \"resolution\" is also incorrect, because we can have multiple <em>type-specifier</em>s; see <a href=\"http://eel.is/c++draft/dcl.type#2\" rel=\"nofollow\">[dcl.type]/2</a>. In fact, the wording is fine as is, because if the beginning of a <strong>valid</strong> declarator (in your invalid case, <code>decltype(a)</code>) is a <em>type-specifier</em>, it also is a <em>type-name</em>. </p>\n", "OwnerUserId": "3647361", "LastEditorUserId": "3647361", "LastEditDate": "2016-03-21T11:01:49.060", "Id": "36113490", "Score": "3", "CreationDate": "2016-03-20T12:09:49.320", "LastActivityDate": "2016-03-21T11:01:49.060"}, "bq_ids": {"n4140": {"so_36113229_36113490_0": {"section_id": 3208, "quality": 0.8333333333333334, "length": 5}, "so_36113229_36113229_0": {"section_id": 5389, "quality": 1.0, "length": 15}, "so_36113229_36113229_1": {"section_id": 5389, "quality": 0.9333333333333333, "length": 14}}, "n3337": {"so_36113229_36113490_0": {"section_id": 3082, "quality": 0.8333333333333334, "length": 5}, "so_36113229_36113229_0": {"section_id": 5183, "quality": 1.0, "length": 15}, "so_36113229_36113229_1": {"section_id": 5183, "quality": 0.9333333333333333, "length": 14}}, "n4659": {"so_36113229_36113490_0": {"section_id": 3965, "quality": 0.8333333333333334, "length": 5}, "so_36113229_36113229_0": {"section_id": 6815, "quality": 0.9333333333333333, "length": 14}, "so_36113229_36113229_1": {"section_id": 6815, "quality": 0.8666666666666667, "length": 13}}}});