post_cb({"24496183": {"Id": "24496183", "PostTypeId": "2", "Body": "<p>The standard has this to say about <code>std::vector</code>'s <code>erase()</code> (\u00a723.3.6.5 [vector.modifiers]/p3):</p>\n<blockquote>\n<pre><code>iterator erase(const_iterator position);\niterator erase(const_iterator first, const_iterator last);\n</code></pre>\n<p id=\"so_24495889_24496183_0\"><em>Effects</em>: Invalidates iterators and references at or after the point of\n  the erase.</p>\n</blockquote>\n<p>Thus, erase-increment simply does not work with <code>vector</code>s. The <code>erase()</code> call invalidates the incremented iterator. Use <code>_iter = _elements.erase(_iter);</code> instead.</p>\n<p>Testing code - this compiles and runs fine on my VS 2010: </p>\n<pre><code>#include &lt;vector&gt;\n#include &lt;iostream&gt;\n#include &lt;iterator&gt;\n#include &lt;algorithm&gt;\nint main(int argc, char* argv[])\n{\n    std::vector&lt;int&gt; v;\n    v.push_back(10);\n    v.push_back(20);\n    v.push_back(10);\n    v.push_back(40);\n    v.push_back(10);\n    v.push_back(60);\n\n    std::vector&lt;int&gt;::iterator b = v.begin();\n    for(std::vector&lt;int&gt;::iterator _iter = b; _iter != v.end(); /** DO NOTHING **/) {\n        if(*_iter != 10) {\n            ++_iter;\n            continue;\n        }\n        _iter=v.erase(_iter); // v.erase(iter++) causes abort()\n    }\n    std::copy(v.begin(), v.end(), std::ostream_iterator&lt;int&gt;(std::cout, \" \"));\n    return 0;\n}\n</code></pre>\n", "LastEditorUserId": "2756719", "LastActivityDate": "2014-08-03T09:21:37.650", "Score": "2", "CreationDate": "2014-06-30T18:01:59.570", "ParentId": "24495889", "CommentCount": "0", "OwnerUserId": "2756719", "LastEditDate": "2014-08-03T09:21:37.650"}, "bq_ids": {"n4140": {"so_24495889_24496183_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 988}}, "n3337": {"so_24495889_24496183_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 973}}, "n4659": {"so_24495889_24496183_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 1051}}}, "24495889": {"ViewCount": "297", "Body": "<p>I've implemented part of a SubDivide method of a position-based Quadtree like so:</p>\n<pre><code>//Give elements of mine to children, may or may not accept them.\nfor(std::size_t i = 0; i &lt; MAX_CHILDREN; ++i) {\n    std::vector&lt;T&gt;::iterator b = _elements.begin();\n    std::vector&lt;T&gt;::iterator e = _elements.end();\n    for(std::vector&lt;T&gt;::iterator _iter = b; _iter != e; ++_iter) {\n        if(_children[i]-&gt;Add(*_iter)) continue;\n    }\n}\n</code></pre>\n<p>The problem with this approach is that when the tree subdivides the parent does not remove the element from its own container if a child node accepts it, so I changed it to use the erase-increment idiom:</p>\n<pre><code>//Give elements of mine to children, may or may not accept them.\nfor(std::size_t i = 0; i &lt; MAX_CHILDREN; ++i) {\n    std::vector&lt;T&gt;::iterator b = _elements.begin();\n    for(std::vector&lt;T&gt;::iterator _iter = b; _iter != _elements.end(); /** DO NOTHING **/) {\n        if(_children[i]-&gt;Add(*_iter) == false) {\n            ++_iter;\n            continue;\n        }\n        _elements.erase(_iter++);\n    }\n}\n</code></pre>\n<p>But this is failing with <code>vector iterator not compatible</code> on the conditional check of the for loop after the child accepts the element and the parent erases the copy out of its container. I suspect the iterators past the erased iterator are being invalidated (as they should) but I have this exact code elsewhere (the conditional inside the for loop is different but otherwise the code involving the iterators is the same) and it does not fail.</p>\n", "AcceptedAnswerId": "24496183", "Title": "Erase-Increment idiom failing with 'vector iterator not compatible'", "CreationDate": "2014-06-30T17:44:09.870", "Id": "24495889", "CommentCount": "4", "LastEditDate": "2014-06-30T17:52:33.113", "PostTypeId": "1", "LastEditorUserId": "421178", "LastActivityDate": "2014-08-03T09:21:37.650", "Score": "0", "OwnerUserId": "421178", "Tags": "<c++><visual-studio-2010><iterator><stdvector>", "AnswerCount": "1"}});