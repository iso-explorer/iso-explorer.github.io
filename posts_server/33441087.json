post_cb({"33441159": {"ParentId": "33441087", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>No, the default constructor doesn't do anything! \nTo initialize the member variables you can write:</p>\n<pre><code>struct Test\n{\n    int s = 0;\n    float m = 3.3;\n    Test(int a,float b) : s(a),m(b)\n    { }\n    Test()=default;\n};\n</code></pre>\n<p>Look at this: <a href=\"https://stackoverflow.com/questions/20828907/the-new-keyword-default-in-c11\">C++ ctor = default</a></p>\n", "OwnerUserId": "1266688", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:02:02.080", "Id": "33441159", "Score": "3", "CreationDate": "2015-10-30T16:58:24.587", "LastActivityDate": "2015-10-30T17:03:05.450"}, "33441087": {"CommentCount": "8", "ViewCount": "811", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2015-10-30T16:52:50.150", "LastActivityDate": "2017-03-31T07:07:53.567", "Title": "Is it guaranteed that defaulted constructor initialize built in types automatically to 0?", "AcceptedAnswerId": "33441251", "LastEditDate": "2017-05-23T12:02:02.080", "Id": "33441087", "Score": "9", "Body": "<p>Before you start to mark this as duplicate I've already read <a href=\"https://stackoverflow.com/questions/2417065/does-the-default-constructor-initialize-built-in-types\">this</a>\n.But It doesn't answer my question. The linked question talks about C++98 &amp; C++03 but my question is about <strong>defaulted constructor</strong> introduced by C++11. </p>\n<p>Consider following program (See live demo <a href=\"http://cpp.sh/7iw4\" rel=\"nofollow noreferrer\">here</a>):</p>\n<pre><code>#include &lt;iostream&gt;\nstruct Test\n{\n    int s;\n    float m;\n    Test(int a,float b) : s(a),m(b)\n    { }\n    Test()=default;\n}t;\nint main()\n{\n    std::cout&lt;&lt;t.s&lt;&lt;'\\n';\n    std::cout&lt;&lt;t.m&lt;&lt;'\\n';\n}\n</code></pre>\n<p>My question is that is the defaulted constructor provided by compiler here always initializes built in types to by default 0 in C++11 &amp; C++14 when they are <code>class</code> &amp; <code>struct</code> members. Is this behavior guaranteed by C++11 standard?</p>\n", "Tags": "<c++><c++11><initialization><language-lawyer><default-constructor>", "OwnerUserId": "3777958", "AnswerCount": "5"}, "33441154": {"ParentId": "33441087", "CommentCount": "6", "Body": "<p>For all purposes:</p>\n<pre><code>Test() = default;\n</code></pre>\n<p>is equivalent to:</p>\n<pre><code>Test() {}\n</code></pre>\n<p>So it does not initialize members of built-in types.</p>\n", "OwnerUserId": "493122", "PostTypeId": "2", "Id": "33441154", "Score": "2", "CreationDate": "2015-10-30T16:58:08.100", "LastActivityDate": "2015-10-30T16:58:08.100"}, "33441251": {"ParentId": "33441087", "CommentCount": "6", "Body": "<p><code>Test = default</code> will default initialize its members.\nbut for type as <code>int</code> or <code>float</code>, default initialization is different than value-initialization</p>\n<p>so</p>\n<pre><code>Test t; // t.s and t.m have unitialized value\n</code></pre>\n<p>whereas</p>\n<pre><code>Test t{}; // t.s == 0 and t.m == 0.0f;\n</code></pre>\n", "OwnerUserId": "2684539", "PostTypeId": "2", "Id": "33441251", "Score": "8", "CreationDate": "2015-10-30T17:04:12.340", "LastActivityDate": "2015-10-30T17:04:12.340"}, "33441250": {"ParentId": "33441087", "PostTypeId": "2", "CommentCount": "9", "Body": "<p>There are two separate questions built into this question.</p>\n<ol>\n<li><p>What does <code>= default</code> mean for the default constructor? From [class.ctor]:</p>\n<blockquote>\n<p id=\"so_33441087_33441250_0\">A default constructor that is defaulted and not defined as deleted is implicitly defined when it is odr-used\n  (3.2) to create an object of its class type (1.8) or when it is explicitly defaulted after its first declaration. The implicitly-defined default constructor performs the set of initializations of the class that would be\n  performed by a user-written default constructor for that class with no ctor-initializer (12.6.2) and an empty\n  compound-statement.</p>\n</blockquote>\n<p>That is, <code>Test() = default</code> is exactly equivalent to <code>Test() { }</code>, which would default-initialize <code>s</code> and <code>m</code>, which sets them to some indeterminate value.</p></li>\n<li><p>How are <code>t.s</code> and <code>t.m</code> initialized? Yes, this is a separate question from (1) because we're not just calling the default constructor here. From [basic.stc.static]:</p>\n<blockquote>\n<p id=\"so_33441087_33441250_1\">All variables which do not have dynamic storage duration, do not have thread storage duration, and are\n  not local have static storage duration.</p>\n</blockquote>\n<p>and from [basic.start.init]:</p>\n<blockquote>\n<p id=\"so_33441087_33441250_2\">Variables with static storage duration (3.7.1) or thread storage duration (3.7.2) <strong>shall be zero-initialized (8.5)</strong>\n  before any other initialization takes place.</p>\n</blockquote>\n<p>Thus <code>t.s</code> and <code>t.m</code> are guaranteed to be 0, even though if we default-constructed a local <code>Test</code>, they would not be. </p></li>\n</ol>\n", "OwnerUserId": "2069064", "LastEditorUserId": "2069064", "LastEditDate": "2015-10-30T17:20:39.087", "Id": "33441250", "Score": "13", "CreationDate": "2015-10-30T17:04:11.693", "LastActivityDate": "2015-10-30T17:20:39.087"}, "33441605": {"ParentId": "33441087", "CommentCount": "0", "Body": "<p>As it is already answered, it is not guaranteed that default constructor will \"initialize built in types automatically to 0\".</p>\n<p>You can use placement new to see this for yourself. Consider the following code:</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct Test\n{\n    int s;\n    float m;\n    Test(int a,float b) : s(a),m(b)\n    { }\n    Test()=default;\n};\n\nint main()\n{\n    char* buf = new char[sizeof(Test)];\n    Test* t = new (buf) Test;\n\n    std::cout &lt;&lt; t-&gt;s &lt;&lt; '\\n';\n    std::cout &lt;&lt; t-&gt;m &lt;&lt;'\\n';\n\n    t-&gt;s = 42;\n    t-&gt;m = 4.2;\n\n    t-&gt;~Test();\n    t = new (buf) Test;\n\n    std::cout &lt;&lt; t-&gt;s &lt;&lt; '\\n';\n    std::cout &lt;&lt; t-&gt;m &lt;&lt;'\\n';\n}\n</code></pre>\n<p>If default constructor was guaranteed to zero-initialize data members on non-class types, the output of this program would be four zeroes.</p>\n<p>However, you'll likely see something like this instead:</p>\n<pre><code>0\n0\n42\n4.2\n</code></pre>\n<p>Here's this code on cpp.sh - <a href=\"http://cpp.sh/9fdj\" rel=\"nofollow\">http://cpp.sh/9fdj</a></p>\n", "OwnerUserId": "4656786", "PostTypeId": "2", "Id": "33441605", "Score": "4", "CreationDate": "2015-10-30T17:23:49.983", "LastActivityDate": "2015-10-30T17:23:49.983"}, "bq_ids": {"n4140": {"so_33441087_33441250_0": {"section_id": 370, "quality": 0.9230769230769231, "length": 36}, "so_33441087_33441250_2": {"section_id": 7151, "quality": 0.8666666666666667, "length": 13}, "so_33441087_33441250_1": {"section_id": 7164, "quality": 0.9333333333333333, "length": 14}}, "n3337": {"so_33441087_33441250_0": {"section_id": 360, "quality": 0.9230769230769231, "length": 36}, "so_33441087_33441250_2": {"section_id": 6895, "quality": 0.8666666666666667, "length": 13}, "so_33441087_33441250_1": {"section_id": 6908, "quality": 0.9333333333333333, "length": 14}}, "n4659": {"so_33441087_33441250_0": {"section_id": 384, "quality": 0.9230769230769231, "length": 36}, "so_33441087_33441250_1": {"section_id": 8672, "quality": 0.9333333333333333, "length": 14}, "so_33441087_33441250_2": {"section_id": 4051, "quality": 0.6, "length": 9}}}});