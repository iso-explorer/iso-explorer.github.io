post_cb({"34964604": {"Id": "34964604", "PostTypeId": "2", "Body": "<p>Edit: <code>long long int</code> always exists in a C++11 implementation, and it has at least 64 bits because the <em>C standard</em> in 5.2.4.2.1 (not the C++ standard) demands it (by defining a minimum value of LLONG_MAX). That means you should be fine. On 32 bit systems the library may be slow or not available though.</p>\n", "LastEditorUserId": "3150802", "LastActivityDate": "2016-01-23T14:49:00.910", "Score": "0", "CreationDate": "2016-01-23T14:20:49.170", "ParentId": "34964200", "CommentCount": "0", "OwnerUserId": "3150802", "LastEditDate": "2016-01-23T14:49:00.910"}, "34964436": {"Id": "34964436", "PostTypeId": "2", "Body": "<p>You are worried if your program will run the same when you run it on a 32-bit machine. You shouldn't. </p>\n<p>If it's compiled as a 32-bit application it will always run the same, it just won't use the features of 64-bit processors. So you might have guessed <code>long long</code> was fine with 32-bit compilers because otherwise you wouldn't be able to build your program. </p>\n<p>If it's compiled as a 64-bit application, it will not run on 32-bit machines at all.</p>\n", "LastActivityDate": "2016-01-23T14:06:15.813", "CommentCount": "4", "CreationDate": "2016-01-23T14:06:15.813", "ParentId": "34964200", "Score": "0", "OwnerUserId": "1371188"}, "34964269": {"Id": "34964269", "PostTypeId": "2", "Body": "<p>Short answer - No.  </p>\n<p>The terms 32-bit and 64-bit refer to the way a computer's processor, handles information. The 64-bit version of Windows handles large amounts of random access memory (RAM) more effectively than a 32-bit system.<br>\nIf you have a long long int, it simply means that it takes up 64 bits in the memory.  </br></p>\n<p>Refer to <a href=\"https://stackoverflow.com/questions/4552905/what-is-the-difference-between-a-32-bit-and-64-bit-processor\">What is the difference between a 32-bit and 64-bit processor?</a> , for a complete understanding of the differences between 32 bit and 64 bit processors.</p>\n<p>Also take a look at - <a href=\"https://en.wikipedia.org/wiki/64-bit_computing\" rel=\"nofollow noreferrer\">https://en.wikipedia.org/wiki/64-bit_computing</a></p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2016-01-23T13:58:51.680", "Score": "1", "CreationDate": "2016-01-23T13:50:16.573", "ParentId": "34964200", "CommentCount": "0", "OwnerUserId": "3404790", "LastEditDate": "2017-05-23T10:27:54.817"}, "34964557": {"Id": "34964557", "PostTypeId": "2", "Body": "<p>No, instead it completely depend on the data models used by the OS and the compiler being used. In C++ since C99 the size of long long int is 64 bits. Infact, most of the Linux/Unix implementations define long as a 64 bit type but it is only 32 bit in Windows because they use different data models. Have a look at given <a href=\"https://en.wikipedia.org/wiki/64-bit_computing#64-bit_data_models\" rel=\"nofollow\">64 bit computing</a> related to models. </p>\n", "LastActivityDate": "2016-01-23T14:16:56.130", "CommentCount": "0", "CreationDate": "2016-01-23T14:16:56.130", "ParentId": "34964200", "Score": "0", "OwnerUserId": "5438060"}, "34964289": {"Id": "34964289", "PostTypeId": "2", "Body": "<p>The integer size in memmory is independent of the amount of bits a CPU uses.\nhoewever the length of an int can vary because that processor always tries to run at it's most efficient way so for an 32 bit processor an int will have a default size of 32-bits.\nusing types like long long int or uint64 (unsigned integer of 64 bit) will guarantee the length of 64 bits across all processors. so it's good to keep that in mind.</p>\n", "LastActivityDate": "2016-01-23T13:52:13.140", "CommentCount": "0", "CreationDate": "2016-01-23T13:52:13.140", "ParentId": "34964200", "Score": "0", "OwnerUserId": "5726042"}, "bq_ids": {"n4140": {"so_34964200_34964461_1": {"length": 58, "quality": 0.9666666666666667, "section_id": 7211}}, "n3337": {"so_34964200_34964461_1": {"length": 58, "quality": 0.9666666666666667, "section_id": 6955}}, "n4659": {"so_34964200_34964461_1": {"length": 54, "quality": 0.9, "section_id": 8720}}}, "34964461": {"Id": "34964461", "PostTypeId": "2", "Body": "<p><code>long long int</code> is not guaranteed to be a 64 bit integer. At least not by the C++ standard:</p>\n<blockquote>\n<p id=\"so_34964200_34964461_0\">3.9.1 Fundamental types [basic.fundamental]</p>\n<pre><code> ...\n</code></pre>\n<p id=\"so_34964200_34964461_1\">2 There are five standard signed integer types : \u201csigned char\u201d, \u201cshort int\u201d, \u201cint\u201d, \u201clong int\u201d, and \u201clong long int\u201d. In this list,\n  each type provides at least as much storage as those preceding it in\n  the list. There may also be implementation-defined extended signed\n  integer types. The standard and extended signed integer types are\n  collectively called signed integer types. Plain ints have the natural\n  size suggested by the architecture of the execution environment;\n  the other signed integer types are provided to meet special needs.</p>\n</blockquote>\n<p>In other words, the only guarantee you have is that a <code>long long int</code> will be at least as big as a <code>long int</code>. That's it.</p>\n<p>Now, on most modern execution environments, a <code>long long int</code> is a 64 bit value, and this is true even on native 32-bit hardware platforms.</p>\n<p>But, as far as the C++ standard goes, you have no guarantees whatsoever. So, you might find that on a particular 32-bit platform, a <code>long int</code> and a <code>long long int</code> are both 32 bit integer values. And this will be perfectly compliant with the C++ standard.</p>\n", "LastActivityDate": "2016-01-23T14:07:57.783", "CommentCount": "5", "CreationDate": "2016-01-23T14:07:57.783", "ParentId": "34964200", "Score": "-1", "OwnerUserId": "3943312"}, "34964334": {"Id": "34964334", "PostTypeId": "2", "Body": "<p>In short, no.</p>\n<p>Using <code>long long</code> types does not limit your choice of operating system.    If your compiler supports <code>long long</code> and targets a 32-bit operating system (or even a 16-bit operating system), then the compiler or library sorts out the details of how to support longer types.</p>\n<p>Using <code>long long</code> types does limit you to compilers (and libraries) that support such a type, no matter what operating system you use.   In C++, the 2011 standard introduced them, but some older compilers support <code>long long</code> types as an extension (e.g. because C did since 1999).    So, compilers predating the 2011 standard may not support <code>long long</code> types.</p>\n", "LastActivityDate": "2016-01-23T13:56:22.840", "CommentCount": "0", "CreationDate": "2016-01-23T13:56:22.840", "ParentId": "34964200", "Score": "1", "OwnerUserId": "4706785"}, "34964200": {"ViewCount": "163", "Body": "<p>With use of a C++ Long Long int being 64-bits does this limit use of this program to execution to a 64-bit OS only or would this still handle a 64-bit value within execution on a 32-bit OS?</p>\n<p>I have a program that I am passing a integer seed to random generator and using the seed as a key for starting position within random algorithm. I compiled my code with long long int and it compiles and runs with no problems however my system is running Windows 7 64-bit and I dont have a 32-bit system to test it out on. While this program will mainly be run on my 64-bit system the reason behind this question is to understand if long long int use is only for a 64-bit OS system or if 32-bit systems can handle 64-bit int's through say 2 or more clock cycles to handle 64-bits vs a 64-bit OS being able to handle it in less clock cycles etc? Maybe I am comparing apples to oranges with 64-bit int to 64-bit CPU/OS? Thinking that if able to be handled by 32-bit CPU/OS that it may be inefficient at 64-bit int's?</p>\n", "Title": "C++ Long Long INT - 64-bits does this limit use to 64-bit OS only?", "CreationDate": "2016-01-23T13:43:22.547", "LastActivityDate": "2016-01-23T14:49:00.910", "CommentCount": "4", "PostTypeId": "1", "Id": "34964200", "Score": "1", "OwnerUserId": "5767860", "Tags": "<c++>", "AnswerCount": "7"}});