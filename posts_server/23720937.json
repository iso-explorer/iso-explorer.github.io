post_cb({"23720937": {"CommentCount": "4", "ViewCount": "634", "CreationDate": "2014-05-18T10:29:16.590", "LastActivityDate": "2014-05-18T13:21:58.407", "Title": "Template specialization of template class member function", "AcceptedAnswerId": "23721061", "PostTypeId": "1", "Id": "23720937", "Score": "0", "Body": "<p>I am trying to specialize template class member functions:</p>\n<p>In valueinput.h</p>\n<pre><code>namespace Gui\n    {\n    template&lt;class T&gt;\n    class ValueInput:public TextInput\n        {\n        public:         \n            static ValueInput* create(Gui&amp; gui_obj,uint32_t style_0,uint32_t style_1\n                ,Window* parent,T&amp; obj)\n                {return new ValueInput(gui_obj,style_0,style_1,parent,obj);}\n\n            //Polymorphic implementation inherited from\n            //TextInput that needs specialization depending on T\n            void valueUpdate();\n\n            //Polymorphic implementation inherited from\n            //TextInput that needs specialization depending on T\n            void displayUpdate();\n\n        protected:\n            ValueInput(Gui&amp; gui_obj,uint32_t style_0,uint32_t style_1,Window* parent\n                ,T&amp; obj):TextInput(gui_obj,style_0,style_1,parent),ptr_obj(&amp;obj)\n                {}\n\n        private:\n            T* ptr_obj;\n        };\n    }\n</code></pre>\n<p>In valueinput.cpp</p>\n<pre><code>template&lt;&gt;\nvoid Gui::ValueInput&lt;double&gt;::displayUpdate()   \n    {\n    Dialog::messageDisplay(this,{STR(\"Display Update\"),Herbs::LogMessage::Type::INFORMATION},STR(\"Test\"));\n    }\n\ntemplate&lt;&gt;\nvoid Gui::ValueInput&lt;double&gt;::valueUpdate() \n    {\n    Dialog::messageDisplay(this,{STR(\"Value Update\"),Herbs::LogMessage::Type::INFORMATION},STR(\"Test\"));\n    }\n</code></pre>\n<p>Compiler output:</p>\n<pre><code>g++ \"valueinput.cpp\" -g -municode -Wall -c -std=c++11 -o \"__wand_targets_dbg\\valueinput.o\"\n</code></pre>\n<blockquote>\n<p id=\"so_23720937_23720937_0\">valueinput.cpp:21:45: error: specialization of 'void Gui::ValueInput::displayUpdate() [with T = double]' in different namespace [-fpermissive]</p>\n<p id=\"so_23720937_23720937_1\">valueinput.cpp:21:6: error:   from definition of 'void Gui::ValueInput::displayUpdate() [with T = double]' [-fpermissive]</p>\n<p id=\"so_23720937_23720937_2\">valueinput.cpp:27:43: error: specialization of 'void Gui::ValueInput::valueUpdate() [with T = double]' in different namespace [-fpermissive]</p>\n<p id=\"so_23720937_23720937_3\">valueinput.cpp:27:6: error:   from definition of 'void Gui::ValueInput::valueUpdate() [with T = double]' [-fpermissive]</p>\n</blockquote>\n<p>What is wrong?</p>\n", "Tags": "<c++><templates><template-specialization>", "OwnerUserId": "877329", "AnswerCount": "1"}, "23721061": {"ParentId": "23720937", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>Rewrite the code in your <code>valueinput.cpp</code> file in the following manner:</p>\n<pre><code>namespace Gui\n{\n    template&lt;&gt;\n    void ValueInput&lt;double&gt;::displayUpdate()   \n    {\n        Dialog::messageDisplay(this,{STR(\"Display Update\"),Herbs::LogMessage::Type::INFORMATION},STR(\"Test\"));\n    }\n\n    template&lt;&gt;\n    void ValueInput&lt;double&gt;::valueUpdate() \n    {\n        Dialog::messageDisplay(this,{STR(\"Value Update\"),Herbs::LogMessage::Type::INFORMATION},STR(\"Test\"));\n    }\n}\n</code></pre>\n<p>And don't forget to declare these specializations in <code>valueinput.h</code> header file if you want to use them outside the <code>valueinput.cpp</code> file:</p>\n<pre><code>namespace Gui\n{\n    template&lt;class T&gt;\n    class ValueInput : public TextInput\n    {\n        // ...\n    };\n\n    template&lt;&gt;\n    void ValueInput&lt;double&gt;::displayUpdate();\n\n    template&lt;&gt;\n    void ValueInput&lt;double&gt;::valueUpdate();\n\n}\n</code></pre>\n<p><strong>Edit:</strong> I don't know is your variant standard-compliant or not. But here is a small quotation from the standard ([temp.expl.spec] 14.7.3/8):</p>\n<blockquote>\n<p id=\"so_23720937_23721061_0\">A template explicit specialization is in the scope of the namespace in\n  which the template was defined.\n  <em>[ Example:</em></p>\n<pre><code>namespace N {\n  template&lt;class T&gt; class X { /* ... */ };\n  template&lt;class T&gt; class Y { /* ... */ };\n\n  template&lt;&gt; class X&lt;int&gt; { /* ... */ };      // OK: specialization\n                                              // in same namespace\n  template&lt;&gt; class Y&lt;double&gt;;                 // forward declare intent to\n                                              // specialize for double\n}\n\ntemplate&lt;&gt; class N::Y&lt;double&gt; { /* ... */ };  // OK: specialization\n                                              // in same namespace\n</code></pre>\n<p id=\"so_23720937_23721061_1\"><em>\u2014 end example ]</em></p>\n</blockquote>\n<p>Unfortunately it is about class template specializations, not about function template specializations or function member specializations of class templates.</p>\n", "OwnerUserId": "3043539", "LastEditorUserId": "3043539", "LastEditDate": "2014-05-18T12:46:27.293", "Id": "23721061", "Score": "1", "CreationDate": "2014-05-18T10:45:04.067", "LastActivityDate": "2014-05-18T12:46:27.293"}, "bq_ids": {"n4140": {"so_23720937_23721061_0": {"section_id": 270, "quality": 0.8888888888888888, "length": 8}}, "n3337": {"so_23720937_23721061_0": {"section_id": 261, "quality": 0.8888888888888888, "length": 8}}, "n4659": {"so_23720937_23721061_0": {"section_id": 277, "quality": 0.8888888888888888, "length": 8}}}});