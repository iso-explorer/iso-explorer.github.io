post_cb({"17379727": {"ParentId": "17378481", "CommentCount": "1", "Body": "<p>Per 14.3/1 Standard:</p>\n<blockquote>\n<p id=\"so_17378481_17379727_0\">There are three forms of template-argument, corresponding to the three\n  forms of  template-parameter: <strong>type</strong>, <strong>non-type</strong> and <strong>template</strong>.</p>\n</blockquote>\n<p>And per 14.3.1/1 Standard:</p>\n<blockquote>\n<p id=\"so_17378481_17379727_1\">A template-argument for a template-parameter which is a <strong>type</strong> shall be a <strong>type-id</strong>.</p>\n</blockquote>\n<p>Since your template argument is <strong>type</strong>, you should pass a <strong>type-id</strong> as template argument. <code>3</code> is not a <strong>type-id</strong>. So, it is impossible in your way. </p>\n<p>You could only add a function with <strong>non-type</strong> template-argument:</p>\n<pre><code>template &lt;class A&gt;\nvoid function()\n{\n    std::cout &lt;&lt; \"A is type\" &lt;&lt; std::endl;\n}\n\ntemplate &lt;int A&gt;\nvoid function()\n{\n    std::cout &lt;&lt; \"A is value\" &lt;&lt; std::endl;\n}\n\nint main()\n{\n    function&lt;int&gt;();\n    function&lt;3&gt;();\n}\n</code></pre>\n", "OwnerUserId": "1532460", "PostTypeId": "2", "Id": "17379727", "Score": "1", "CreationDate": "2013-06-29T11:31:01.307", "LastActivityDate": "2013-06-29T11:31:01.307"}, "bq_ids": {"n4140": {"so_17378481_17379727_0": {"section_id": 76, "quality": 1.0, "length": 11}, "so_17378481_17379727_1": {"section_id": 84, "quality": 1.0, "length": 4}}, "n3337": {"so_17378481_17379727_0": {"section_id": 71, "quality": 1.0, "length": 11}, "so_17378481_17379727_1": {"section_id": 79, "quality": 1.0, "length": 4}}, "n4659": {"so_17378481_17379727_0": {"section_id": 78, "quality": 1.0, "length": 11}, "so_17378481_17379727_1": {"section_id": 87, "quality": 1.0, "length": 4}}}, "17378481": {"CommentCount": "2", "ViewCount": "81", "PostTypeId": "1", "LastEditorUserId": "1829943", "CreationDate": "2013-06-29T08:57:05.633", "LastActivityDate": "2013-06-29T11:31:01.307", "Title": "Is it possible detect Value or Type in template using traits?", "AcceptedAnswerId": "17379727", "LastEditDate": "2013-06-29T10:56:15.610", "Id": "17378481", "Score": "2", "Body": "<p>Is possible using traits to deduce if a template argument is Value or a Type?</p>\n<pre><code>template &lt;typename A&gt;\nvoid function(){\n    if(is_value&lt;A&gt;()::value)\n        cout&lt;&lt;\"A is value\"&lt;&lt;endl;\n    else\n        cout&lt;&lt;\"A is type\"&lt;&lt;endl;\n}\n\nint main(){\n    function&lt;int&gt;(); \n    function&lt;3&gt;();\n}\n</code></pre>\n<p>outputs</p>\n<pre><code>\"A is type\"\n\"A is value\"\n</code></pre>\n", "Tags": "<templates><c++11><typetraits>", "OwnerUserId": "1829943", "AnswerCount": "1"}});