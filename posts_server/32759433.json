post_cb({"32761541": {"ParentId": "32759433", "CommentCount": "0", "CreationDate": "2015-09-24T12:37:50.980", "OwnerUserId": "2069064", "PostTypeId": "2", "Id": "32761541", "Score": "3", "Body": "<p>This is an MSVC bug. From [except.throw]:</p>\n<blockquote>\n<p id=\"so_32759433_32761541_0\">Throwing an exception copy-initializes (8.5, 12.8) a temporary object, called the <em>exception object</em>. </p>\n</blockquote>\n<p>That means we do:</p>\n<pre><code>ThrowMoveTest __exception_object = move(tmt1);\n</code></pre>\n<p>which should definitely call the move constructor.</p>\n<hr/>\n<p>Note that the <code>move</code> here is unnecessary and also damaging. [class.copy] stipulates that copy/move construction can be elided</p>\n<blockquote>\n<p id=\"so_32759433_32761541_1\">\u2014 in a <em>throw-expression</em> (5.17), when the operand is the name of a non-volatile automatic object (other than\n  a function or catch-clause parameter) whose scope does not extend beyond the end of the innermost\n  enclosing try-block (if there is one), the copy/move operation from the operand to the exception\n  object (15.1) can be omitted by constructing the automatic object directly into the exception object</p>\n</blockquote>\n<p>So simply <code>throw tmt1;</code> would have allowed for <code>tmt1</code> to be constructed directly into the exception object. Although neither gcc nor clang do this. </p>\n<p>And even if the copy/move is not elided:</p>\n<blockquote>\n<p id=\"so_32759433_32761541_2\">When the criteria for elision of a copy/move operation are met, but not for an exception-declaration, and the\n  object to be copied is designated by an lvalue [...] overload resolution\n  to select the constructor for the copy is first performed as if the object were designated by an rvalue.</p>\n</blockquote>\n<p>So <code>throw tmt1;</code> would still move-construct the exception object. </p>\n", "LastActivityDate": "2015-09-24T12:37:50.980"}, "32759559": {"CommentCount": "2", "CreationDate": "2015-09-24T10:54:40.287", "CommunityOwnedDate": "2015-09-24T11:26:32.677", "LastEditorUserId": "410767", "LastActivityDate": "2015-09-24T11:59:56.890", "ParentId": "32759433", "PostTypeId": "2", "LastEditDate": "2015-09-24T11:59:56.890", "Id": "32759559", "Score": "1", "Body": "<p>This is a compiler bug. Standard ref \u00a712.8/p32 states it should call the move constructor (acknowledge @Piotr Skotnicki).</p>\n", "OwnerUserId": "2380830"}, "32759433": {"CommentCount": "2", "ViewCount": "108", "PostTypeId": "1", "LastEditorUserId": "1915854", "CreationDate": "2015-09-24T10:48:09.717", "LastActivityDate": "2015-09-24T13:28:40.343", "Title": "Move constructor is not called when throwing an exception", "AcceptedAnswerId": "32761541", "LastEditDate": "2015-09-24T13:28:40.343", "Id": "32759433", "Score": "2", "Body": "<p>I have a variable which accumulates the current exception and needs to get cleaned when the current exception gets thrown (so that the same error does not get reported again). The problem is that <code>throw std::move(ex);</code> does not call the move constructor (which would clean <code>ex</code>), but rather calls a copy constructor (so that <code>ex</code> stays with the already thrown errors too). A MVCE follows:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;stdexcept&gt;\n#include &lt;string&gt;\nusing namespace std;\n\nclass ThrowMoveTest : exception\n{\npublic:\n    ThrowMoveTest(const string&amp; what)\n    {\n        _what = what;\n    }\n    ThrowMoveTest(const ThrowMoveTest&amp; fellow)\n    {\n        cout &lt;&lt; \"Copy \" &lt;&lt; what() &lt;&lt; endl;\n        _what = fellow._what;\n    }\n    ThrowMoveTest(ThrowMoveTest&amp;&amp; fellow)\n    {\n        cout &lt;&lt; \"Move \" &lt;&lt; what() &lt;&lt; endl;\n        _what = std::move(fellow._what);\n    }\n    virtual const char* what() const override\n    {\n        return _what.c_str();\n    }\nprivate:\n    mutable string _what;\n};\n\nint main()\n{\n    try\n    {\n        ThrowMoveTest tmt1(\"Test1\");\n        throw move(tmt1);\n    }\n    catch (const ThrowMoveTest&amp; ex)\n    {\n        cout &lt;&lt; \"Caught \" &lt;&lt; ex.what() &lt;&lt; endl;\n    }\n    return 0;\n}\n</code></pre>\n<p>I am using MSVC++2013 Update 5.</p>\n<p>Is there something that I am doing wrong so that the move constructor does not get called for this reason? Is there away to throw an exception so that the temporary object used for exception storage in C++ gets move-constructed, rather than copy-constructed from the original?</p>\n<p>What I try to avoid is double-copying: construction of a copy of <code>tmt1</code>, then cleaning the original, then using the copy in <code>throw</code> statement, which would construct another copy for temporary storage.</p>\n<p>EDIT: The above code example gives the following output on MSVC++2013 Update 5</p>\n<pre><code>Copy\nCaught Test1\n</code></pre>\n<p>While the expected output is</p>\n<pre><code>Move\nCaught Test1\n</code></pre>\n<p>EDIT2: Submitted a compiler bug report <a href=\"https://connect.microsoft.com/VisualStudio/feedback/details/1829824\" rel=\"nofollow\">https://connect.microsoft.com/VisualStudio/feedback/details/1829824</a></p>\n", "Tags": "<c++><c++11><exception><move-semantics><move-constructor>", "OwnerUserId": "1915854", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_32759433_32761541_1": {"section_id": 480, "quality": 0.9230769230769231, "length": 36}, "so_32759433_32761541_2": {"section_id": 481, "quality": 0.9565217391304348, "length": 22}, "so_32759433_32761541_0": {"section_id": 3336, "quality": 0.8888888888888888, "length": 8}}, "n3337": {"so_32759433_32761541_1": {"section_id": 471, "quality": 0.9230769230769231, "length": 36}, "so_32759433_32761541_2": {"section_id": 472, "quality": 0.8695652173913043, "length": 20}, "so_32759433_32761541_0": {"section_id": 371, "quality": 0.5555555555555556, "length": 5}}, "n4659": {"so_32759433_32761541_1": {"section_id": 502, "quality": 0.9487179487179487, "length": 37}, "so_32759433_32761541_2": {"section_id": 504, "quality": 0.5652173913043478, "length": 13}, "so_32759433_32761541_0": {"section_id": 4103, "quality": 0.8888888888888888, "length": 8}}}});