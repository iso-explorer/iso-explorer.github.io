post_cb({"bq_ids": {"n4140": {"so_30155802_30156450_7": {"length": 12, "quality": 1.0, "section_id": 5412}, "so_30155802_30156450_2": {"length": 13, "quality": 1.0, "section_id": 7042}, "so_30155802_30156450_3": {"length": 17, "quality": 1.0, "section_id": 5846}, "so_30155802_30156450_0": {"length": 9, "quality": 1.0, "section_id": 5846}, "so_30155802_30156439_0": {"length": 21, "quality": 0.9545454545454546, "section_id": 7203}, "so_30155802_30156450_6": {"length": 11, "quality": 1.0, "section_id": 7047}, "so_30155802_30156450_1": {"length": 15, "quality": 1.0, "section_id": 5857}, "so_30155802_30156450_4": {"length": 12, "quality": 0.8571428571428571, "section_id": 5407}}, "n3337": {"so_30155802_30156450_7": {"length": 12, "quality": 1.0, "section_id": 5207}, "so_30155802_30156450_2": {"length": 13, "quality": 1.0, "section_id": 6787}, "so_30155802_30156450_3": {"length": 17, "quality": 1.0, "section_id": 5616}, "so_30155802_30156450_0": {"length": 9, "quality": 1.0, "section_id": 5616}, "so_30155802_30156439_0": {"length": 21, "quality": 0.9545454545454546, "section_id": 6947}, "so_30155802_30156450_6": {"length": 11, "quality": 1.0, "section_id": 6792}, "so_30155802_30156450_1": {"length": 15, "quality": 1.0, "section_id": 5627}, "so_30155802_30156450_4": {"length": 12, "quality": 0.8571428571428571, "section_id": 5202}}, "n4659": {"so_30155802_30156450_7": {"length": 12, "quality": 1.0, "section_id": 6834}, "so_30155802_30156450_2": {"length": 13, "quality": 1.0, "section_id": 8539}, "so_30155802_30156450_3": {"length": 17, "quality": 1.0, "section_id": 7325}, "so_30155802_30156450_0": {"length": 9, "quality": 1.0, "section_id": 7325}, "so_30155802_30156439_0": {"length": 17, "quality": 0.7727272727272727, "section_id": 8712}, "so_30155802_30156450_6": {"length": 11, "quality": 1.0, "section_id": 8544}, "so_30155802_30156450_1": {"length": 15, "quality": 1.0, "section_id": 7336}, "so_30155802_30156450_4": {"length": 12, "quality": 0.8571428571428571, "section_id": 6829}}}, "30156450": {"Id": "30156450", "PostTypeId": "2", "Body": "<p><code>Incomplete</code> is a type, introduced by your declaration and you cannot have a typedef using the same name, refering to another type.</p>\n<p>Your <code>struct Incomplete;</code> is a forward class declaration which inserts a class-name into the global scope (and introduces a new, yet incomplete type).</p>\n<p><strong>\u00a79/2</strong></p>\n<blockquote>\n<p id=\"so_30155802_30156450_0\">A class-name is inserted into the scope in which it is declared immediately after the class-name is seen.</p>\n</blockquote>\n<p><strong>\u00a79.1/2</strong></p>\n<blockquote>\n<p id=\"so_30155802_30156450_1\">A declaration consisting solely of class-key identifier; is either a redeclaration of the name in the current scope or a forward declaration of the identifier as a class name.</p>\n</blockquote>\n<p>In order to use that name where a complete type is required, it must be defined.</p>\n<p><strong>\u00a73.2/4</strong></p>\n<blockquote>\n<p id=\"so_30155802_30156450_2\">Exactly one definition of a class is required in a translation unit if the class is used in a way that requires the class type to be complete.</p>\n</blockquote>\n<p>A class ist defined using the class-specifier.</p>\n<p><strong>\u00a79/2</strong></p>\n<blockquote>\n<p id=\"so_30155802_30156450_3\">A class is considered defined after the closing brace of its class-specifier has been seen even though its member functions are in general not yet defined.</p>\n</blockquote>\n<p>Your typedef is a declaration and does not define the class.</p>\n<p><strong>\u00a77.1.3/1</strong></p>\n<blockquote>\n<p id=\"so_30155802_30156450_4\">Declarations containing the decl-specifier typedef declare identifiers that can be used later for naming fundamental (3.9.1) or compound (3.9.2) types.</p>\n</blockquote>\n<p><strong>\u00a73.1/2</strong></p>\n<blockquote>\n<p id=\"so_30155802_30156450_5\">A declaration is a definition unless [...] it is a typedef declaration [...].</p>\n</blockquote>\n<p>Whereas declarations in the same scope / declarative region are required to refer to the same entity.</p>\n<p><strong>\u00a73.3.1/4</strong></p>\n<blockquote>\n<p id=\"so_30155802_30156450_6\">Given a set of declarations in a single declarative region, each of which specifies the same unqualified name</p>\n<ul>\n<li>they shall all refer to the same entity, or all refer to functions and function templates; [ ... ]</li>\n</ul>\n</blockquote>\n<p>Your typedef declares <code>Incomplete</code> to refer to <code>Unrelated</code> whereas <code>struct Incomplete;</code> declares a type <code>Incomplete</code>.</p>\n<p><strong>\u00a77.1.3/6</strong></p>\n<blockquote>\n<p id=\"so_30155802_30156450_7\">In a given scope, a typedef specifier shall not be used to redefine the name of any type declared in that scope to refer to a different type.</p>\n</blockquote>\n<p><em>C++11</em></p>\n", "LastEditorUserId": "951423", "LastActivityDate": "2015-05-10T20:46:02.243", "Score": "3", "CreationDate": "2015-05-10T20:43:40.320", "ParentId": "30155802", "CommentCount": "1", "OwnerUserId": "951423", "LastEditDate": "2015-05-10T20:46:02.243"}, "30156439": {"Id": "30156439", "PostTypeId": "2", "Body": "<p>You can\u2019t complete something that is declared in a <em>different translation unit</em>. Either you <code>#include</code> your first file in the second one and in this case you have everything happening in a single translation unit, or, if you don\u2019t <code>#include</code> it, you just have a <code>typedef</code> and no incomplete types in unit B and an incomplete type (which you don\u2019t ever complete because you don\u2019t have to) in unit A.</p>\n<p>And you can\u2019t complete a class with a <code>typedef</code> in a single unit, because:</p>\n<blockquote>\n<p id=\"so_30155802_30156439_0\"><strong>3.9.5.</strong> A class that has been declared but <em>not defined</em>, or an array of unknown\n  size or of incomplete element type, is an incompletely-defined object\n  type. Incompletely-defined object types and the void types are\n  <em>incomplete types</em>.</p>\n</blockquote>\n<blockquote>\n<p id=\"so_30155802_30156439_1\"><strong>3.9.2.</strong> A declaration is a <em>definition</em> unless &lt;\u2026&gt; it is a <code>typedef</code> declaration, &lt;\u2026&gt;.</p>\n</blockquote>\n<p>(<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf\" rel=\"nofollow\">N3337</a>; some emphases add by me.)</p>\n<p>So, you can\u2019t complete a class type with a <code>typedef</code> because a class type can be completed only by a <em>definition</em> and <code>typedef</code> declaration is not a definition.</p>\n", "LastActivityDate": "2015-05-10T20:42:44.757", "CommentCount": "1", "CreationDate": "2015-05-10T20:42:44.757", "ParentId": "30155802", "Score": "1", "OwnerUserId": "603094"}, "30155802": {"ViewCount": "177", "Body": "<p>Given an incomplete type in translation unit A:</p>\n<pre><code>struct Incomplete;\n\nIncomplete* create_incomplete();\nvoid destroy_incomplete(Incomplete*);\n</code></pre>\n<p>why can't I use it in another translation unit, by using <code>typedef</code>?</p>\n<p>For example in translation unit B:</p>\n<pre><code>struct Unrelated\n{\n    int x;\n    int y;\n};\n\ntypedef Unrelated Incomplete;\n\nIncomplete* create_incomplete()\n{\n    return new Incomplete();\n}\n\nvoid destroy_incomplete(Incomplete* arg)\n{\n    delete arg;\n}\n</code></pre>\n", "AcceptedAnswerId": "30156450", "Title": "Why can't I complete the type with the typedef?", "CreationDate": "2015-05-10T19:32:35.340", "Id": "30155802", "CommentCount": "5", "LastEditDate": "2015-05-10T20:44:06.250", "PostTypeId": "1", "LastEditorUserId": "1012936", "LastActivityDate": "2015-05-10T20:46:02.243", "Score": "2", "OwnerUserId": "1012936", "Tags": "<c++><language-lawyer>", "AnswerCount": "2"}});