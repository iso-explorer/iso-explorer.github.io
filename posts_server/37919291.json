post_cb({"bq_ids": {"n4140": {"so_37919291_37919534_3": {"length": 23, "quality": 0.7931034482758621, "section_id": 5807}, "so_37919291_37919534_0": {"length": 25, "quality": 0.8620689655172413, "section_id": 3260}, "so_37919291_37919414_0": {"length": 18, "quality": 0.8181818181818182, "section_id": 3260}}, "n3337": {"so_37919291_37919534_3": {"length": 23, "quality": 0.7931034482758621, "section_id": 5580}, "so_37919291_37919534_0": {"length": 21, "quality": 0.7241379310344828, "section_id": 3132}, "so_37919291_37919414_0": {"length": 20, "quality": 0.9090909090909091, "section_id": 3132}}, "n4659": {"so_37919291_37919534_3": {"length": 23, "quality": 0.7931034482758621, "section_id": 7268}, "so_37919291_37919534_0": {"length": 29, "quality": 1.0, "section_id": 4018}}}, "37919414": {"Id": "37919414", "PostTypeId": "2", "Body": "<p>Because the default argument must be complete in itself so that compiler can simply replace it if not provided by call. The (local) variable <code>dimension</code> isn't created yet and you are trying to use it, and hence the error. This would work, however:</p>\n<pre><code>int _def_dim=10;\nclass MyClass {\n    MyClass(unsigned int dimension, std::vector vector=unitaryVector(_def_dim));\n};\n</code></pre>\n<p>I am not sure what standard says, but for compiler implementation is would be tricky to handle such corner cases.</p>\n<p>EDIT (for completeness), grabbed from <a href=\"https://stackoverflow.com/a/1880877/264325\">this answer</a>:</p>\n<blockquote>\n<p id=\"so_37919291_37919414_0\">Default arguments are evaluated each time the function is called. The\n  order of evaluation of function arguments is unspecified.\n  Consequently, parameters of a function shall not be used in default\n  argument expressions, even if they are not evaluated.</p>\n</blockquote>\n", "LastEditorUserId": "-1", "LastActivityDate": "2016-06-20T10:02:47.300", "Score": "1", "CreationDate": "2016-06-20T09:52:33.157", "ParentId": "37919291", "CommentCount": "0", "LastEditDate": "2017-05-23T12:17:52.443", "OwnerUserId": "264325"}, "37919291": {"ViewCount": "268", "Body": "<p>Consider the following constructor:</p>\n<pre><code>class MyClass {\n    MyClass(unsigned int dimension, std::vector vector=unitaryVector(dimension));\n};\n</code></pre>\n<p>where <code>unitaryVector(d)</code> is a function that returns a random <code>std::vector</code> in d dimensions.</p>\n<p>This gives the following compiler error:</p>\n<pre><code>error: default argument references parameter 'dimension'\n    MyClass(unsigned int dimension, std::vector vector=unitaryVector(dimension));\n</code></pre>\n<p>Why isn't this idiom valid in C++11? It seems to be pretty obvious: if <code>vector</code> argument is provided, init <code>vector</code> as a copy of the argument, otherwise, call the function and init it as a copy of the return value. Why can't a compiler understand this?</p>\n", "AcceptedAnswerId": "37919534", "Title": "why can't default argument depend on non-default argument?", "CreationDate": "2016-06-20T09:46:09.637", "Id": "37919291", "CommentCount": "3", "PostTypeId": "1", "LastActivityDate": "2017-04-09T12:48:17.040", "Score": "5", "OwnerUserId": "931303", "Tags": "<c++><c++11>", "AnswerCount": "3"}, "37919534": {"Id": "37919534", "PostTypeId": "2", "Body": "<p>The C++ standard forbids it.</p>\n<p><a href=\"http://eel.is/c++draft/dcl.fct.default\" rel=\"nofollow noreferrer\">dcl.fct.default</a></p>\n<blockquote>\n<p id=\"so_37919291_37919534_0\"><a href=\"http://eel.is/c++draft/dcl.fct.default#9\" rel=\"nofollow noreferrer\"><strong>9</strong></a> default argument is evaluated each time the function is called with\n  no argument for the corresponding parameter. A parameter shall not\n  appear as a potentially-evaluated expression in a default argument.\n  Parameters of a function declared before a default argument are in\n  scope and can hide namespace and class member names. </p>\n<p id=\"so_37919291_37919534_1\"><em>[ Example:</em></p>\n<pre><code>int a;\nint f(int a, int b = a);            // error: parameter a\n                                    // used as default argument\ntypedef int I;\nint g(float I, int b = I(2));       // error: parameter I found\nint h(int a, int b = sizeof(a));    // OK, unevaluated operand\n</code></pre>\n<p id=\"so_37919291_37919534_2\"><em>\u2014 end example ]</em></p>\n</blockquote>\n<p>Note that default arguments are <em>replaced</em> at the call site if not provided</p>\n<p><a href=\"http://eel.is/c++draft/intro.execution\" rel=\"nofollow noreferrer\">Intro.execution</a> <em>(emphasis mine)</em></p>\n<blockquote>\n<p id=\"so_37919291_37919534_3\"><strong>11:</strong> <em>[ Note:</em> The evaluation of a <strong><em>full-expression</em></strong> can include the evaluation of subexpressions that are <strong>not lexically part of the\n  full-expression</strong>. For example, subexpressions involved in evaluating\n  default arguments ([dcl.fct.default]) are considered to be <strong>created\n  in the expression that calls the function,</strong> not the expression that\n  defines the default argument.  <em>\u2014 end note ]</em></p>\n</blockquote>\n<hr>\n<p>You can simply overload the constructor and delegate it:</p>\n<pre><code>class MyClass {\n    explicit MyClass(unsigned int dimension) \n        : MyClass(dimension, unitaryVector(dimension))  //delegation\n    {  }\n    MyClass(unsigned int dimension, std::vector vector);\n};\n</code></pre>\n<p><em>Footnote: Its a good thing to make single argument constructors <code>explicit</code></em></p>\n</hr>", "LastEditorUserId": "1621391", "LastActivityDate": "2017-04-09T12:48:17.040", "Score": "8", "CreationDate": "2016-06-20T09:57:32.183", "ParentId": "37919291", "CommentCount": "0", "LastEditDate": "2017-04-09T12:48:17.040", "OwnerUserId": "1621391"}, "37919603": {"Id": "37919603", "PostTypeId": "2", "Body": "<p>One alternative is to use</p>\n<pre><code>class MyClass {\n    MyClass(unsigned int dimension, std::vector const&amp; vector) :\n            dimension(dimension), vector(vector) {}\n\n    MyClass(unsigned int dimension) :\n            MyClass(dimension, unitaryVector(dimension)) {}\n};\n</code></pre>\n<p>(this of course when you want to store <code>dimension</code> and <code>vector</code> in the class).</p>\n", "LastActivityDate": "2016-06-20T10:00:27.053", "Score": "1", "CreationDate": "2016-06-20T10:00:27.053", "ParentId": "37919291", "CommentCount": "0", "OwnerUserId": "931303"}});