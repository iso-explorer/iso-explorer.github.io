post_cb({"bq_ids": {"n4140": {"so_48569621_48569768_1": {"length": 14, "quality": 1.0, "section_id": 5526}}, "n3337": {"so_48569621_48569768_1": {"length": 14, "quality": 1.0, "section_id": 5312}}, "n4659": {"so_48569621_48569768_1": {"length": 14, "quality": 1.0, "section_id": 6961}}}, "48569768": {"Id": "48569768", "PostTypeId": "2", "Body": "<p>According to <em>N4659</em>:</p>\n<blockquote>\n<p id=\"so_48569621_48569768_0\">10.6.1 Attribute syntax and semantics [dcl.attr.grammar]</p>\n<p id=\"so_48569621_48569768_1\">Attributes specify additional information for various source\n  constructs such as types, variables, names, blocks, or translation\n  units.</p>\n<pre><code>attribute-specifier-seq:\n    attribute-specifier-seqopt attribute-specifier\n\nattribute-specifier: \n    [ [ attribute-using-prefixopt attribute-list ] ]\n    alignment-specifier\n</code></pre>\n</blockquote>\n<p>So, <code>[[...]]</code> is a standardized syntax.</p>\n<p>In opposite, <code>__attribute__ ((attribute-list))</code> is a syntax of <code>gcc</code> <a href=\"https://gcc.gnu.org/onlinedocs/gcc/Attribute-Syntax.html\" rel=\"nofollow noreferrer\">extension</a>:</p>\n<blockquote>\n<p id=\"so_48569621_48569768_2\">An attribute specifier is of the form <code>__attribute__ ((attribute-list))</code>. An attribute list is a possibly empty comma-separated sequence of attributes, where each attribute is one of the following:</p>\n<p id=\"so_48569621_48569768_3\">...</p>\n</blockquote>\n<p>As attributes were introduced in <em>C++11</em> and you use <code>gcc</code> with <em>C++11</em> support (or newer), then both types of syntax are available for you.</p>\n", "LastEditorUserId": "5507349", "LastActivityDate": "2018-02-01T18:53:27.110", "Score": "2", "CreationDate": "2018-02-01T18:47:04.383", "ParentId": "48569621", "CommentCount": "6", "OwnerUserId": "5507349", "LastEditDate": "2018-02-01T18:53:27.110"}, "48569621": {"ViewCount": "47", "Body": "<p>I just came across attributes enclosed in square brackets for the first time, and I've been doing a little background reading: <a href=\"http://en.cppreference.com/w/cpp/language/attributes\" rel=\"nofollow noreferrer\">http://en.cppreference.com/w/cpp/language/attributes</a>. </p>\n<p>For gcc at least, there seem to be multiple techniques allowed: </p>\n<pre><code>__attribute__((some_attribute))\n</code></pre>\n<p>and </p>\n<pre><code>[[some_attribute]]\n</code></pre>\n<p>Is this correct? When is one technique allowed or not allowed, preferred or not preferred? What's the difference? </p>\n<p>It looks like <code>[[some_attribute]]</code> is allowed as of C++11 only, right?</p>\n", "AcceptedAnswerId": "48569768", "Title": "Is there a difference between `__attribute__((some_attribute))` and `[[some_attribute]]`?", "CreationDate": "2018-02-01T18:37:22.237", "Id": "48569621", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2018-02-01T18:53:27.110", "Score": "2", "OwnerUserId": "4561887", "Tags": "<c++><c++11><attributes>", "AnswerCount": "2"}, "48569697": {"Id": "48569697", "PostTypeId": "2", "Body": "<p>The <code>[[foo]]</code> syntax was introduced with C++11. But many compilers had their own syntax before that (which in some cases also supports some non-standardized attributes).</p>\n<p>So in short: <code>[[foo]]</code> is standard and should work everywhere with a conforming compiler. The other syntaxes are compiler specific.</p>\n", "LastActivityDate": "2018-02-01T18:42:15.820", "CommentCount": "0", "CreationDate": "2018-02-01T18:42:15.820", "ParentId": "48569621", "Score": "2", "OwnerUserId": "5910058"}});