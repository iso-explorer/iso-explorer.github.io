post_cb({"bq_ids": {"n4140": {"so_37262329_37262860_0": {"length": 25, "quality": 0.9615384615384616, "section_id": 713}, "so_37262329_37262860_1": {"length": 16, "quality": 0.5333333333333333, "section_id": 712}}, "n3337": {"so_37262329_37262860_0": {"length": 25, "quality": 0.9615384615384616, "section_id": 702}, "so_37262329_37262860_1": {"length": 16, "quality": 0.5333333333333333, "section_id": 701}}, "n4659": {"so_37262329_37262860_0": {"length": 25, "quality": 0.9615384615384616, "section_id": 742}, "so_37262329_37262860_1": {"length": 16, "quality": 0.5333333333333333, "section_id": 741}}}, "37263161": {"Id": "37263161", "PostTypeId": "2", "Body": "<p>Until recently, overloading <code>.begin()</code> by rvalue/lvalue-ness of the invoking object was not possible.</p>\n<p>When it was added, retrofitting such changes into the standard library could, in theory, break existing code.</p>\n<p>Breaking existing code is bad, bad enough that legacy quirks are left in barring reasonably strong evidence that such code does not exist, that there would be clear diagnostics, and/or the effect of the change is really useful.</p>\n<p>So <code>.begin()</code> ignores rvalueness of its <code>*this</code>.</p>\n<p>There is no such restriction on <code>std::begin</code>, other than possibly wishing compatibility with <code>.begin()</code>.</p>\n<p>In theory, standard containers don't have a proper respose to being called with <code>std::begin</code> in an rvalue context.  The \"proper\" way of interacting with <code>std::move</code> or rvalues is that you aren't supposed to care about the state of the moved-from object after the call completes.</p>\n<p>This means (logically) you can only get one of the two iterators out (begin or end).</p>\n<p>What the proper semantics are in this case is a big puzzling.  I have written adaptors that, in this situation (a pseudo-begin/end call on an rvalue) generate move iterators (for example), but doing that in general is very surprising, and I think it is a bad move in the end.</p>\n", "LastActivityDate": "2016-05-16T20:58:36.250", "CommentCount": "0", "CreationDate": "2016-05-16T20:58:36.250", "ParentId": "37262329", "Score": "2", "OwnerUserId": "1774667"}, "37262329": {"ViewCount": "320", "Body": "<p>Calling the member function <code>.begin()</code> of <code>std::vector</code> and <code>std::begin()</code> on rvalues result in different outputs, as the following test shows:</p>\n<pre><code>vector&lt;int&gt; a{ 1, 2, 3 };\n\nvector&lt;int&gt;::iterator it1 = move(a).begin(); // OK\nvector&lt;int&gt;::const_iterator it2 = move(a).begin(); // OK\n\nvector&lt;int&gt;::iterator it3 = begin(move(a)); // Error!\nvector&lt;int&gt;::const_iterator it4 = begin(move(a)); // OK\n</code></pre>\n<p>Here is my understanding: <code>std::begin()</code> calls <code>const&amp;</code> overload (since it lack <code>&amp;&amp;</code> overload), and therefore, it return a <code>const_iterator</code> object. So, the returned value can be assigned to <code>const_iterator</code> but not <code>iterator.</code></p>\n<ol>\n<li>Is my understanding correct?</li>\n<li>Why does <code>std::begin()</code> not have an rvalue overload?</li>\n</ol>\n<p>Just a note that I used <code>move(a)</code> to demonstrate calling <code>.begin()</code> and <code>std::begin()</code> on rvalues. Of course, it can be replaced by any rvalue object for which <code>.begin()</code> and <code>std::begin()</code> are well defined.</p>\n<p><strong>Edit:</strong> Here is the real example showing where I encountered this issue. I've simplified a lot just to convey the idea where <code>std::begin()</code> is called on an rvalue. So, since <code>row_matrix</code> is a proxy class, there shouldn't be any problem calling <code>begin</code> and <code>end</code> on rvalues since the underlying object is identical.</p>\n<pre><code>class matrix_row;\nclass row_iterator;\n\nclass matrix {\npublic:\n    matrix_row row(int i);\n    // other members\n};  \n\nclass matrix_row { // &lt;- proxy class representing a row of matrix\npublic:\n    row_iterator begin();\n    row_iterator end();\n    // other members\nprivate:\n    int row_;\n    matrix&amp; matrix_;\n};\n\nclass row_iterator {\n    // defined everything needed to qualify as a valid iterator \n};\n\nmatrix m(3,4);\n\nfor(auto x = m.row(1).begin(); x != m.row(1).end(); ++x) {\n    *x /=2; // OK\n}\n\nfor(auto x = begin(m.row(1)); x != end(m.row(1)); ++x) {\n    *x /= 2; // Error\n}\n</code></pre>\n", "Title": "Member function .begin() and std::begin()", "CreationDate": "2016-05-16T20:03:27.703", "LastActivityDate": "2016-05-17T03:18:28.627", "CommentCount": "5", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2016-05-17T03:18:28.627", "LastEditorUserId": "2229960", "Id": "37262329", "Score": "2", "OwnerUserId": "2229960", "Tags": "<c++><c++11><iterator><move><move-semantics>", "AnswerCount": "2"}, "37262860": {"Id": "37262860", "PostTypeId": "2", "Body": "<p>23.2.1/12 states:</p>\n<blockquote>\n<p id=\"so_37262329_37262860_0\">Unless otherwise specified (either explicitly or by defining a\n  function in terms of other functions), invoking a container member\n  function or passing a container as an argument to a library function\n  shall not invalidate iterators to, or change the values of, objects\n  within that container.</p>\n</blockquote>\n<p><a href=\"http://www.open-std.org/JTC1/SC22/WG21/docs/lwg-active.html#2321\" rel=\"nofollow\">DR 2321</a> also wants to make it explicit:</p>\n<blockquote>\n<p id=\"so_37262329_37262860_1\">no move constructor (or move assignment operator when\n  <code>allocator_traits&lt;allocator_type&gt;::propagate_on_container_move_assignment::value</code>\n  is true) of a container (except for <code>array</code>) invalidates any\n  references, pointers, or iterators referring to the elements of the\n  source container. <em>[Note:</em> The <code>end()</code> iterator does not refer to any\n  element, so it may be invalidated. \u2014 <em>end note]</em></p>\n</blockquote>\n<p>Of course this would only be useful if you were moving <em>into</em> a different container, but you're not. </p>\n", "LastActivityDate": "2016-05-16T20:37:17.710", "CommentCount": "1", "CreationDate": "2016-05-16T20:37:17.710", "ParentId": "37262329", "Score": "-1", "OwnerUserId": "6342598"}});