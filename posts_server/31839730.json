post_cb({"31839730": {"CommentCount": "0", "ViewCount": "119", "CreationDate": "2015-08-05T18:05:02.497", "LastActivityDate": "2015-08-05T18:14:38.027", "Title": "Type casting operator is not being called", "AcceptedAnswerId": "31839803", "PostTypeId": "1", "Id": "31839730", "Score": "1", "Body": "<p>I was trying to do some example code for type conversions between objects, just following what is showed <a href=\"http://www.cplusplus.com/doc/tutorial/typecasting/\" rel=\"nofollow\">here</a>.</p>\n<p>This is the parent class</p>\n<pre><code>// ParentClass.h\nclass ParentClass {\npublic:\n    ParentClass();\n    virtual ~ParentClass();\n};\n</code></pre>\n<p>It\u00b4s just some concept proof, the only thing it does is print something</p>\n<pre><code>#include &lt;iostream&gt;\n#include \"ParentClass.h\"\nParentClass::ParentClass()\n{\n    std::cout &lt;&lt; \"Parent\\tDefault constructor\\n\";\n}\nParentClass::~ParentClass()\n{\n    std::cout &lt;&lt; \"Parent\\tDestructor\\n\";\n}\n</code></pre>\n<p>And then, the derived class</p>\n<pre><code>// ChildClass.h\n#include \"ParentClass.h\"\n\nclass ChildClass: public ParentClass {\npublic:\n    ChildClass();\n    // conversion constructor\n    ChildClass( const ParentClass&amp; p );\n    // conversion from assignment\n    ChildClass&amp; operator= ( const ParentClass &amp; p );\n    // type-cast operator\n    operator ParentClass();\n    // destructor\n    virtual ~ChildClass();\n};\n</code></pre>\n<p>And then, the code, is also rather stupid</p>\n<pre><code>// ChildClass.cpp\n\n#include &lt;iostream&gt;\n#include \"ChildClass.h\"\n\nChildClass::ChildClass()\n{\n    std::cout &lt;&lt; \"Child\\tDefault constructor\\n\";\n}\nChildClass::~ChildClass()\n{\n    std::cout &lt;&lt; \"Child\\tDestructor\\n\";\n}\n// conversion constructor\nChildClass::ChildClass( const ParentClass&amp; p )\n{\n    std::cout &lt;&lt; \"Child\\tConversion constructor\\n\";\n}\n// assignment operator    \nChildClass&amp; ChildClass::operator= ( const ParentClass &amp; p )\n{\n    std::cout &lt;&lt; \"Child\\toperator= conversion\\n\";\n    return *this;\n}    \n// type-cast operator\nChildClass::operator ParentClass()\n{\n    std::cout &lt;&lt; \"Child\\toperatorParentClass()\\n\";\n    return ParentClass();\n}\n</code></pre>\n<p>Then, I do some conversions in my main function</p>\n<pre><code>    std::cout &lt;&lt; \"calls Parent default constructor\\n\";\n    ParentClass foo;\n    std::cout &lt;&lt; \"calls Parent to child constructor\\n\";\n    ChildClass bar = foo;\n    std::cout &lt;&lt; \"calls assignment operator from child\\n\";\n    bar = foo;\n    std::cout &lt;&lt; \"calls Child type-cast operator\\n\";\n    foo = bar;\n    std::cout &lt;&lt; \"Exit\\n\";\n</code></pre>\n<p>But when I run this the code is not entering the type cast operator from the derived class, it just prints this:</p>\n<pre><code>calls Parent default constructor\nParent  Default constructor\ncalls Parent to child constructor\nParent  Default constructor\nChild   Conversion constructor\ncalls assignment operator from child\nChild   operator= conversion\ncalls Child type-cast operator\nExit\nChild   Destructor\nParent  Destructor\nParent  Destructor\n</code></pre>\n<p>I am at a loss about this, as I tried the code in the link above and it worked just like it should.</p>\n", "Tags": "<c++><c++11><typecast-operator><typecasting-operator>", "OwnerUserId": "4105601", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_31839730_31839803_0": {"section_id": 391, "quality": 1.0, "length": 22}}, "n3337": {"so_31839730_31839803_0": {"section_id": 382, "quality": 1.0, "length": 22}}, "n4659": {"so_31839730_31839803_0": {"section_id": 408, "quality": 1.0, "length": 22}}}, "31839803": {"ParentId": "31839730", "CommentCount": "1", "CreationDate": "2015-08-05T18:09:27.300", "OwnerUserId": "2756719", "PostTypeId": "2", "Id": "31839803", "Score": "4", "Body": "<p>Derived-to-base conversion never invokes a conversion function. [class.conv.fct]/p1:</p>\n<blockquote>\n<p id=\"so_31839730_31839803_0\">A conversion function is never used to convert a (possibly\n  cv-qualified) object to the (possibly cv-qualified) same object type\n  (or a reference to it), to a (possibly cv-qualified) base class of\n  that type (or a reference to it), or to (possibly cv-qualified)\n  <code>void</code>.</p>\n</blockquote>\n<p>In your <code>foo = bar;</code>, the <code>bar</code> binds directly to the <code>const ParentClass&amp;</code> parameter of the implicitly-declared copy assignment operator of <code>ParentClass</code>.</p>\n", "LastActivityDate": "2015-08-05T18:09:27.300"}});