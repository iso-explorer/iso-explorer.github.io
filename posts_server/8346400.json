post_cb({"8346560": {"ParentId": "8346400", "CommentCount": "1", "Body": "<p>No, all the \"globals\" will be initialized before <code>main</code>:</p>\n<p><code>iGlobal, m_b_static_a, m_b_static_b, m_a_a, m_b_a, m_b_b</code>, and <code>m_b_c</code> is never initialized.</p>\n", "OwnerUserId": "251738", "PostTypeId": "2", "Id": "8346560", "Score": "2", "CreationDate": "2011-12-01T18:42:08.213", "LastActivityDate": "2011-12-01T18:42:08.213"}, "8347374": {"ParentId": "8346400", "CommentCount": "0", "Body": "<p>The canonical initialization order is:</p>\n<ol>\n<li>Base classes left-to-right</li>\n<li>Nonstatic data members top-to-bottom</li>\n<li>The body of the constructor</li>\n</ol>\n<p>Here is the initialization order that I observed in VC++ 2005:</p>\n<ol>\n<li>Global data (<code>iGlobal</code> == 10 before entering <code>main()</code>)</li>\n<li><strong>Static</strong> data members (<code>B::m_b_static_a</code> == 11, <code>B::m_b_static_b</code> == 12 )</li>\n<li>Base classes (<code>A::m_a_a</code> == 20)</li>\n<li>Nonstatic data members <strong>in the initialization list</strong> (<code>B::m_b_a</code> == 30, <code>B::m_b_b</code> == 40)</li>\n</ol>\n<p><code>B::m_b_c</code> remains <em>uninitialized</em> (set to <code>0xcccccccc</code>) after returning from B's constructor.</p>\n", "OwnerUserId": "124755", "PostTypeId": "2", "Id": "8347374", "Score": "0", "CreationDate": "2011-12-01T19:48:05.563", "LastActivityDate": "2011-12-01T19:48:05.563"}, "8346400": {"CommentCount": "7", "AcceptedAnswerId": "8346843", "PostTypeId": "1", "LastEditorUserId": "298054", "CreationDate": "2011-12-01T18:30:13.453", "LastActivityDate": "2011-12-08T13:57:52.437", "LastEditDate": "2011-12-01T18:39:11.410", "ViewCount": "978", "FavoriteCount": "0", "Title": "Initialization order for nonstatic/static/global/subclass members", "Id": "8346400", "Score": "3", "Body": "<p>I deliberately create the following code to let me easily present the question.</p>\n<p>Question&gt; What is the initialization order of all variables?</p>\n<pre><code>#include &lt;iostream&gt;\n\nint iGlobal = 10;\n\nclass A {\npublic:\n    A(int _a) : m_a_a(_a) {}\n\nprivate:\n    int m_a_a;\n};\n\nclass B : public A\n{\npublic:\n    B() : m_b_b(40), A(20), m_b_a(30) {}\n\nprivate:\n    static int m_b_static_a;\n    int m_b_a;\n    int m_b_b;\n    int m_b_c; // this variable is NOT initialized in the B::B() initialization list\n    static int m_b_static_b;\n};\n\nint B::m_b_static_a = 11;\nint B::m_b_static_b = 12;\n\nint main(void)\n{\n   B b;\n   return 0;\n}\n</code></pre>\n<p>First, I list all variables as follows:</p>\n<pre><code>iGlobal, m_a_a, m_b_static_a, m_b_a, m_b_b, m_b_c, m_b_static_b\n</code></pre>\n<p>Here is what I think I am right.</p>\n<pre><code>m_a_a &lt; m_b_a &lt; m_b_b &lt; m_b_c (i.e. X &lt; Y iff X is initialized early than Y)\n\nm_b_static_a &lt; m_b_static_b\n</code></pre>\n<p>Rule1&gt; C++ guarantees that variables in compilation unit (.cpp file) are initialised in order of declaration. </p>\n<p>Rule2&gt; The order listed in the initialized list doesn't control the order of initialization.</p>\n<p>I have problems to order among the global variable, static variable and non-static variable.</p>\n", "Tags": "<c++>", "OwnerUserId": "391104", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_8346400_8346843_3": {"section_id": 438, "quality": 1.0, "length": 15}, "so_8346400_8346843_1": {"section_id": 438, "quality": 0.875, "length": 28}, "so_8346400_8346843_2": {"section_id": 438, "quality": 1.0, "length": 13}}, "n3337": {"so_8346400_8346843_3": {"section_id": 429, "quality": 1.0, "length": 15}, "so_8346400_8346843_1": {"section_id": 429, "quality": 0.875, "length": 28}, "so_8346400_8346843_2": {"section_id": 429, "quality": 1.0, "length": 13}}, "n4659": {"so_8346400_8346843_3": {"section_id": 458, "quality": 1.0, "length": 15}, "so_8346400_8346843_2": {"section_id": 458, "quality": 1.0, "length": 13}, "so_8346400_8346843_1": {"section_id": 458, "quality": 0.875, "length": 28}}}, "8346843": {"ParentId": "8346400", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>Within a compilation unit, globals are initialised in the same order they're declared. However, the order is unspecified across different compilation units (see <a href=\"http://www.parashift.com/c++-faq-lite/ctors.html#faq-10.14\" rel=\"nofollow\">What's the \"static initialization order fiasco\"?</a>).</p>\n<p><strong>Class initialisation order</strong>:</p>\n<ol>\n<li>Members of base classes (when inheritance is present)</li>\n<li>Members of the current class</li>\n<li>Constructor</li>\n</ol>\n<p>Members initialisation respects the declaration order, regardless the order used in the initilisation list.</p>\n<p>Having <code>class C : public A, public B</code>, initialiases <code>A</code>, then <code>B</code>, then <code>C</code>. And their destruction occurs in the inverse order.</p>\n<p><strong>NOTE</strong>: Virtual base classes do not respect the order mentioned above.</p>\n<p>Quoting \u00a712.6.2/5 from the C++03 Standard:</p>\n<blockquote>\n<p id=\"so_8346400_8346843_0\">Initialization shall proceed in the following order:</p>\n<p id=\"so_8346400_8346843_1\">\u2014 First, and only for the constructor of the most derived class as\n  described below, virtual base classes shall be initialized in the\n  order they appear on a depth-first left-to-right traversal of the\n  directed acyclic graph of base classes, where \u201cleft-to-right\u201d is the\n  order of appearance of the base class names in the derived class\n  base-specifier-list.</p>\n<p id=\"so_8346400_8346843_2\">\u2014 Then, direct base classes shall be initialized in declaration order\n  as they appear in the base-specifier-list (regardless of the order of\n  the mem-initializers).</p>\n<p id=\"so_8346400_8346843_3\">\u2014 Then, nonstatic data members shall be initialized in the order they\n  were declared in the class definition (again regardless of the order\n  of the mem-initializers).</p>\n<p id=\"so_8346400_8346843_4\">\u2014 Finally, the body of the constructor is executed.</p>\n</blockquote>\n<p>Concluding, the order will be:</p>\n<pre><code>iGlobal (global)\nB::m_b_static_a (static)\nB::m_b_static_b (static)\nA::m_a_a (base class member)\nB::m_b_a (class member)\nB::m_b_b (class member)\n</code></pre>\n", "OwnerUserId": "298054", "LastEditorUserId": "298054", "LastEditDate": "2011-12-08T13:57:52.437", "Id": "8346843", "Score": "4", "CreationDate": "2011-12-01T19:04:26.463", "LastActivityDate": "2011-12-08T13:57:52.437"}});