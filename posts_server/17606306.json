post_cb({"bq_ids": {"n4140": {"so_17606306_17606373_0": {"length": 10, "quality": 0.9090909090909091, "section_id": 3913}}, "n3337": {"so_17606306_17606373_0": {"length": 10, "quality": 0.9090909090909091, "section_id": 3773}}, "n4659": {"so_17606306_17606373_0": {"length": 7, "quality": 0.6363636363636364, "section_id": 4799}}}, "17606306": {"ViewCount": "261", "Body": "<p>When defining the operator assignment for a class in C++ I noticed that you don't need to return *this. I tested this on Visual Studio 2012, Visual Studio 2010 with warning level 4 and had no errors or warnings, and the code worked as expected. In Visual Studio 2008 however I got a compile time error saying 'operator= must return a value'. </p>\n<p>My question is this: is this 'feature' apart of the core C++ language or is it something that the VS team decided to add in.</p>\n<p>I do apologize if this has been asked or there is information on this online, I was unable to find any answers.</p>\n<pre><code>template &lt;typename T&gt;\nstruct singleton\n{\nT value;\n\nsingleton(const singleton&amp; x) : value(x.value) {}\nsingleton() {}\n~singleton() {}\nsingleton&amp; operator=(const singleton&amp; x) { value = x.value; }\n};\n</code></pre>\n<p>This was the code I used for testing:</p>\n<pre><code>singleton&lt;float&gt; sf;\nsf.value = 1.9f;\nsingleton&lt;float&gt; sf2 = sf;\nstd::cout &lt;&lt; sf2.value &lt;&lt; std::endl;\n</code></pre>\n", "AcceptedAnswerId": "17606373", "Title": "C++ assignment operator default return", "CreationDate": "2013-07-12T01:48:23.977", "Id": "17606306", "CommentCount": "5", "LastEditDate": "2013-07-12T02:50:33.123", "PostTypeId": "1", "LastEditorUserId": "2574802", "LastActivityDate": "2013-07-12T02:50:33.123", "Score": "1", "OwnerUserId": "2574802", "Tags": "<c++><visual-studio><return-value><assignment-operator>", "AnswerCount": "2"}, "17606373": {"Id": "17606373", "PostTypeId": "2", "Body": "<p>In your example, your issue comes from your function returning <code>singleton&amp;</code> however you don't actually return anything (i.e. <code>*this</code>). The standard considers this to be undefined behaviour.</p>\n<p>Section 6.6.3.2</p>\n<blockquote>\n<p id=\"so_17606306_17606373_0\">Flowing o\ufb00 the end of a function is equivalent to a return with no\n  value; this results in unde\ufb01ned behavior in a value-returning function</p>\n</blockquote>\n", "LastActivityDate": "2013-07-12T01:59:37.400", "CommentCount": "2", "CreationDate": "2013-07-12T01:59:37.400", "ParentId": "17606306", "Score": "2", "OwnerUserId": "1381108"}, "17606338": {"Id": "17606338", "PostTypeId": "2", "Body": "<p>It's undefined behavior for a function returning non-void to have an absent return value. It may be allowed but it doesn't mean it's Standard-conformant.</p>\n", "LastActivityDate": "2013-07-12T01:53:11.623", "CommentCount": "1", "CreationDate": "2013-07-12T01:53:11.623", "ParentId": "17606306", "Score": "0", "OwnerUserId": "701092"}});