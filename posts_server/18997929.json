post_cb({"bq_ids": {"n4140": {"so_18997929_18999167_1": {"length": 13, "quality": 0.9285714285714286, "section_id": 438}, "so_18997929_18999167_2": {"length": 15, "quality": 0.9375, "section_id": 434}, "so_18997929_18999167_0": {"length": 29, "quality": 0.9666666666666667, "section_id": 438}}, "n3337": {"so_18997929_18999167_1": {"length": 13, "quality": 0.9285714285714286, "section_id": 429}, "so_18997929_18999167_2": {"length": 15, "quality": 0.9375, "section_id": 426}, "so_18997929_18999167_0": {"length": 29, "quality": 0.9666666666666667, "section_id": 429}}, "n4659": {"so_18997929_18999167_1": {"length": 13, "quality": 0.9285714285714286, "section_id": 458}, "so_18997929_18999167_2": {"length": 15, "quality": 0.9375, "section_id": 452}, "so_18997929_18999167_0": {"length": 29, "quality": 0.9666666666666667, "section_id": 458}}}, "18999167": {"Id": "18999167", "PostTypeId": "2", "Body": "<p>That's how virtual inheritance is described in the standard.</p>\n<blockquote>\n<p id=\"so_18997929_18999167_0\">[12.6.2] \u2014 First, and only for the constructor of the most derived class (1.8), virtual base classes are initialized in the order they appear on a depth-first left-to-right traversal of the directed acyclic graph of base classes, where \u201cleft-to-right\u201d is the order of appearance of the base classes in the derived class <em>base-specifier-list</em>.</p>\n</blockquote>\n<p>In particular, when constructing <code>C</code>, the <code>A</code> subobject is initialized before anything else (including the <code>B</code> subobject). Since <code>A</code> is not in the <code>mem-initializers</code> list of the offending <code>C</code> constructor, the default constructor of <code>A</code> is used for that.</p>\n<blockquote>\n<p id=\"so_18997929_18999167_1\">[12.6.2] \u2014 Then, direct base classes are initialized in declaration order as they appear in the base-specifier-list (regardless of the order of the <em>mem-initializers</em>).</p>\n</blockquote>\n<p>Then the <code>B</code> subobject is constructed.</p>\n<blockquote>\n<p id=\"so_18997929_18999167_2\">[12.6.2] A <em>mem-initializer</em> where the <em>mem-initializer-id</em> denotes a virtual base class is ignored during execution of a constructor of any class that is not the most derived class.</p>\n</blockquote>\n<p><code>: A(z)</code> in the constructor of <code>B</code> is ignored when constructing the <code>B</code> subobject of <code>C</code>.</p>\n<p>In the everyday language this means you have to initialize a virtual base class in each direct or indirect derived class, as if it were a direct derived class. If you forget to do so, a default constructor will be forced, with potentially devastating consequences. (That's why you should strive to have either <em>only</em> the default constructor or <em>no</em> default constructor at all in any virtual base class).</p>\n", "LastActivityDate": "2013-09-25T07:49:29.270", "CommentCount": "1", "CreationDate": "2013-09-25T07:49:29.270", "ParentId": "18997929", "Score": "0", "OwnerUserId": "775806"}, "18997929": {"ViewCount": "103", "Body": "<p>In the following code when I create the object of C then A'a default constructor is getting called through B's constructor, why is that happening?</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass A\n{\npublic:\n    int a;\n    A(int z): a(z) {cout&lt;&lt;\"a is \"&lt;&lt;a;}\n    A() { cout&lt;&lt;\" it came here\\n\";}\n};\n\nclass B: public virtual A\n{\npublic:\n    B(int z): A(z) {cout&lt;&lt;\"in B and z is \"&lt;&lt;z&lt;&lt;\"\\n\"; }\n};\n\nclass C:public B\n{\npublic:\n    C(int z): B(z) {cout&lt;&lt;\" In C\\n\"; }\n};\n\nint main()\n{\n    C b(6);\n    cout&lt;&lt;b.a;\n    return 0;\n}\n</code></pre>\n", "AcceptedAnswerId": "18999167", "Title": "Default constructor getting called while using virtual inheritance", "CreationDate": "2013-09-25T06:40:15.413", "LastActivityDate": "2013-09-25T14:57:56.697", "CommentCount": "2", "LastEditDate": "2013-09-25T07:38:07.257", "PostTypeId": "1", "Tags": "<c++><inheritance><virtual>", "Id": "18997929", "AnswerCount": "1", "Score": "1", "OwnerUserId": "2739511", "ClosedDate": "2013-09-25T19:28:58.957", "LastEditorUserId": "1322972"}});