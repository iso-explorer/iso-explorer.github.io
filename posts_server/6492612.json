post_cb({"6492652": {"Id": "6492652", "PostTypeId": "2", "Body": "<p>IMHO, if your enums must have fixed values, then fix explicitely those values, you'll be sure of the values contained in your enums.</p>\n<p>But if you only need to compare your enums each other, let the compiler do it for you.\nIt should be safe to write some comparisons like  this <code>if FUNC_ERROR_2 &gt; FUNC_ERROR_1 ...</code></p>\n", "LastActivityDate": "2011-06-27T12:11:07.583", "CommentCount": "0", "CreationDate": "2011-06-27T12:11:07.583", "ParentId": "6492612", "Score": "1", "OwnerUserId": "718618"}, "bq_ids": {"n4140": {"so_6492612_6492670_0": {"length": 34, "quality": 0.85, "section_id": 5461}}, "n3337": {"so_6492612_6492670_0": {"length": 34, "quality": 0.85, "section_id": 5248}}, "n4659": {"so_6492612_6492670_0": {"length": 34, "quality": 0.85, "section_id": 6895}}}, "6492680": {"Id": "6492680", "PostTypeId": "2", "Body": "<p>It is safe as far as Visual Studio 2010 goes. Check out the following example from <a href=\"http://msdn.microsoft.com/en-us/library/2dzy4k6e.aspx\" rel=\"nofollow\">msdn</a>:</p>\n<p>\"<em>Any enumerator in the list, including the first one, can be initialized to a value other than its default value. Suppose the declaration of Suit had been the following:</em></p>\n<pre><code>enum Suit {\n   Diamonds = 5,\n   Hearts,\n   Clubs = 4,\n   Spades\n};\n</code></pre>\n<p><em>Then the values of Diamonds, Hearts, Clubs, and Spades would have been <strong>5, 6, 4, and 5,</strong> respectively. Note that 5 is used more than once.</em>\"</p>\n", "LastEditorUserId": "280104", "LastActivityDate": "2011-06-27T12:26:10.203", "Score": "1", "CreationDate": "2011-06-27T12:13:30.837", "ParentId": "6492612", "CommentCount": "4", "OwnerUserId": "280104", "LastEditDate": "2011-06-27T12:26:10.203"}, "6492612": {"ViewCount": "277", "Body": "<p>I currently have code with an enum where one value is set and the rest are left to be set by the compiler using the previous value +1, or so I hope. </p>\n<p>Is this functionality within an enumerated type compiler dependant, an example is below to clarify.</p>\n<pre><code>enum FUNC_ERROR_CODE    \n{\n    FUNC_SUCCESS,\n    FUNC_ERROR_1 = 24,\n    FUNC_ERROR_2,\n    FUNC_ERROR_3\n}\n</code></pre>\n<p>Is it safe to assume that FUNC_ERROR_2 will have the value 25 and FUNC_ERROR_3 will have the value 26, regardless of compliler used.</p>\n<p>I'm coding this so as a function can return an integer value, 0 is always success and any other value can signify failure.</p>\n", "AcceptedAnswerId": "6492670", "Title": "C++ enumerations and compiler dependency", "CreationDate": "2011-06-27T12:08:23.643", "Id": "6492612", "CommentCount": "2", "LastEditDate": "2011-06-27T12:13:16.423", "PostTypeId": "1", "LastEditorUserId": "365188", "LastActivityDate": "2011-06-27T12:26:10.203", "Score": "3", "OwnerUserId": "405715", "Tags": "<c++><enums>", "AnswerCount": "4"}, "6492670": {"Id": "6492670", "PostTypeId": "2", "Body": "<p>It is safe to assume that:</p>\n<ul>\n<li><em><strong>Enumeration Declaration [dcl.enum]</strong></em></li></ul>\n<blockquote>\n<p id=\"so_6492612_6492670_0\">The identifiers in an enumerator-list are declared as constants, and can appear wherever constants are\n  required. An enumerator-definition with = gives the associated enumerator the value indicated by the\n  constant-expression. The constant-expression shall be of integral or enumeration type. <strong>If the first\n  enumerator has no initializer, the value of the corresponding constant is zero. An enumerator-definition\n  without an initializer gives the enumerator the value obtained by increasing the value of the <em>previous enumerator by one</em></strong>.</p></blockquote>\n<p><strong>But</strong> if you have a typesafe enum: <em>Use it</em>! Don't fall back on converting to/from integers.</p>\n", "LastEditorUserId": "76722", "LastActivityDate": "2011-06-27T12:20:16.413", "Score": "6", "CreationDate": "2011-06-27T12:12:47.187", "ParentId": "6492612", "CommentCount": "1", "OwnerUserId": "76722", "LastEditDate": "2011-06-27T12:20:16.413"}, "6492667": {"Id": "6492667", "PostTypeId": "2", "Body": "<p>I'm pretty sure that the compiler is compelled to increment for each new value.</p>\n", "LastActivityDate": "2011-06-27T12:12:16.607", "CommentCount": "0", "CreationDate": "2011-06-27T12:12:16.607", "ParentId": "6492612", "Score": "0", "OwnerUserId": "298661"}});