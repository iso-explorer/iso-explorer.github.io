post_cb({"bq_ids": {"n4140": {"so_14123347_14123347_0": {"length": 21, "quality": 0.75, "section_id": 3269}}, "n3337": {"so_14123347_14123347_0": {"length": 21, "quality": 0.75, "section_id": 3141}}, "n4659": {"so_14123347_14123347_0": {"length": 21, "quality": 0.75, "section_id": 4027}}}, "14123821": {"Id": "14123821", "PostTypeId": "2", "Body": "<p>(Promoted from an earlier comment)</p>\n<p><code>__func__</code> is in the reserved namespace, so the implementation is allowed to use it at namespace scope for any purpose, i.e. the implementation is not required to diagnose a (mis)use of <code>__func__</code> outside a function, because nothing in the standard forbids an implementation from defining <code>__func__</code> as a namespace-scope array of <code>char</code> if that's what the implementors want to do.</p>\n<p>It could be undefined, or it could be defined as a string, or as anything else, and that implementation is still conforming.</p>\n<p>So it's undefined behaviour to try to use it outside a function because it may or may not be defined and may or may not be of the right type to be usable.</p>\n<p>For concrete examples of how the code in the question could have undefined behaviour when used with a conforming implementation, I believe an implementation could define it to <code>nullptr</code> (so the example would crash in <code>printf</code>) or could even define it to a macro that expands to a dereference of a null pointer and then <code>#undef</code> it on entry to each function and <code>#define</code> it after each function (so the example would crash before <code>main</code> begins!)</p>\n", "LastActivityDate": "2013-01-02T14:30:17.837", "Score": "7", "CreationDate": "2013-01-02T14:30:17.837", "ParentId": "14123347", "CommentCount": "1", "OwnerUserId": "981959"}, "14123347": {"ViewCount": "984", "Body": "<p>What should happened if we use predefined variable <code>__func__</code> outside a function in C (C99 / C11) and C++?</p>\n<pre><code>#include &lt;stdio.h&gt;\n\nconst char* str = __func__;\n\nint main(void)\n{\n   printf(\"%s\", str);\n   return 0;\n}\n</code></pre>\n<p>gcc 4.7.2 only give a warning (with <code>-Wall -W -pedantic</code> enabled) and prints nothing.</p>\n<p>Standard doesn't say anything about it explicitly:</p>\n<p><strong>ISO/IEC 14882:2011</strong></p>\n<p>8.4.1 In general [dcl.fct.def.general]</p>\n<blockquote>\n<p id=\"so_14123347_14123347_0\"><strong>8</strong> The function-local predefined variable <code>__func__</code> is defined as if a\n  definition of the form <code>static const char __func__[] = \"function-name\";</code>\n  had been provided, where function-name is an implementation-defined\n  string. It is unspecified whether such a variable has an address\n  distinct from that of any other object in the program.</p>\n</blockquote>\n<p><strong>ISO/IEC 9899:2011</strong></p>\n<p>6.4.2.2 Predefined identifiers</p>\n<blockquote>\n<p id=\"so_14123347_14123347_1\"><strong>1</strong> The identifier <code>__func__</code> shall be implicitly declared by the translator as if, immediately\n  following the opening brace of each function definition, the\n  declaration <code>static const char __func__[] = \"function-name\";</code>\n  appeared, where function-name is the name of the lexically-enclosing\n  function.</p>\n</blockquote>\n<p>UB? Error? Or something else?</p>\n", "AcceptedAnswerId": "14123437", "Title": "__func__ outside function definition", "CreationDate": "2013-01-02T13:55:51.853", "Id": "14123347", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2013-01-02T14:01:42.920", "LastEditorUserId": "592323", "LastActivityDate": "2013-01-02T15:34:24.010", "Score": "21", "OwnerUserId": "1608835", "Tags": "<c++><c><c++11><c99><c11>", "AnswerCount": "2"}, "14123437": {"Id": "14123437", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_14123347_14123437_0\">Standard doesn't say anything about it explicitly</p>\n</blockquote>\n<p>This means undefined behavior.</p>\n<p>From the C Standard (emphasis mine):</p>\n<blockquote>\n<p id=\"so_14123347_14123437_1\">(C99, 4.p2) \"If a \u2018\u2018shall\u2019\u2019 or \u2018\u2018shall not\u2019\u2019 requirement that appears outside of a constraint is violated, the behavior is undefined. Undefined behavior is otherwise indicated in this International Standard by the words \u2018\u2018undefined behavior\u2019\u2019 <strong>or by the omission of any explicit definition of behavior.</strong> There is no difference in emphasis among these three; they all describe \u2018\u2018behavior that is undefined\u2019\u2019.\"</p>\n</blockquote>\n", "LastActivityDate": "2013-01-02T14:03:06.710", "Score": "23", "CreationDate": "2013-01-02T14:03:06.710", "ParentId": "14123347", "CommentCount": "0", "OwnerUserId": "1119701"}});