post_cb({"47122907": {"ParentId": "47122822", "LastEditDate": "2017-11-05T14:58:40.257", "CommentCount": "0", "CreationDate": "2017-11-05T14:51:34.223", "OwnerUserId": "7860670", "LastEditorUserId": "7860670", "PostTypeId": "2", "Id": "47122907", "Score": "1", "Body": "<p>You can write a dedicated helper:</p>\n<pre><code>template&lt;typename TItem, TItem... VInitialValues&gt; auto\nmake_array(void) -&gt; ::std::unique_ptr&lt;TItem[]&gt;\n{\n    return\n    (\n        ::std::unique_ptr&lt;TItem[]&gt;\n        {\n            new TItem[sizeof...(VInitialValues)]\n            {\n                VInitialValues...\n            }\n        }\n    );\n}\n\nmake_array&lt;int, 10, 20, 30, 40, 50&gt;();\n</code></pre>\n<p>or like this:</p>\n<pre><code>template&lt;typename TItem, typename... TInitialValues&gt; auto\nmake_array(TInitialValues &amp;&amp; ... initial_values) -&gt; ::std::unique_ptr&lt;TItem[]&gt;\n{\n    return\n    (\n         ::std::unique_ptr&lt;TItem[]&gt;\n         {\n             new TItem[sizeof...(TInitialValues)]\n             {\n                 ::std::forward&lt;TInitialValues&gt;(initial_values)...\n             }\n         }\n    );\n}\n\nmake_array&lt;int&gt;(10, 20, 30, 40, 50);\n</code></pre>\n", "LastActivityDate": "2017-11-05T14:58:40.257"}, "47122822": {"CommentCount": "1", "ViewCount": "68", "PostTypeId": "1", "LastEditorUserId": "6564148", "CreationDate": "2017-11-05T14:42:40.557", "LastActivityDate": "2017-11-05T14:58:40.257", "Title": "Why can a dynamically allocated array not infer its size from a list Initializer?", "AcceptedAnswerId": "47122880", "LastEditDate": "2017-11-05T14:46:34.837", "Id": "47122822", "Score": "2", "Body": "<p>Why is:</p>\n<p><code>new int[]{10,20,30,40,50};</code></p>\n<p>illegal (at least as of C++14)?, gcc 6.3's error:</p>\n<blockquote>\n<p id=\"so_47122822_47122822_0\">error: too many initializers for \u2018int [1]\u2019</p>\n</blockquote>\n", "Tags": "<c++><language-lawyer>", "OwnerUserId": "6564148", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_47122822_47122880_0": {"section_id": 6082, "quality": 0.8333333333333334, "length": 20}}, "n3337": {"so_47122822_47122880_0": {"section_id": 5850, "quality": 0.8333333333333334, "length": 20}}, "n4659": {"so_47122822_47122880_0": {"section_id": 7578, "quality": 0.7916666666666666, "length": 19}}}, "47122880": {"ParentId": "47122822", "CommentCount": "5", "Body": "<p>The \"why\" is rather boring. <a href=\"https://timsong-cpp.github.io/cppwp/n4659/expr.new#1\" rel=\"nofollow noreferrer\">[expr.new]/1</a> demands a complete object type:</p>\n<blockquote>\n<p id=\"so_47122822_47122880_0\">The new-expression attempts to create an object of the type-id or\n  new-type-id to which it is applied. The type of that object is the\n  allocated type. <strong>This type shall be a complete object type</strong>, but not an\n  abstract class type or array thereof.</p>\n</blockquote>\n<p>Since <code>int[]</code> is an incomplete object type, it's ill-formed.</p>\n", "OwnerUserId": "817643", "PostTypeId": "2", "Id": "47122880", "Score": "3", "CreationDate": "2017-11-05T14:48:10.440", "LastActivityDate": "2017-11-05T14:48:10.440"}});