post_cb({"32778604": {"CommentCount": "2", "ViewCount": "43", "CreationDate": "2015-09-25T09:05:40.247", "LastActivityDate": "2015-09-25T09:17:51.380", "Title": "What happens when one uses auto with two declarations in C++11?", "AcceptedAnswerId": "32778832", "PostTypeId": "1", "Id": "32778604", "Score": "1", "Body": "<p>Let's say there is a loop like this:</p>\n<pre><code>for(size_t i=0, n=ar.size(); i&lt;n; ++i)\n{\n  // ...\n}\n</code></pre>\n<p>Would it be good to rewrite it as:</p>\n<pre><code>for(auto i=0, n=ar.size(); i&lt;n; ++i)\n{\n  // ...\n}\n</code></pre>\n<p>In other words will the two variables <code>i</code> and <code>n</code> always end up being the same datatype.</p>\n<p>When i try something like this:</p>\n<pre><code>auto i=0, s=\"\";\n</code></pre>\n<p>g++ 4.8.4 generates an error <code>inconsistent deduction for \u2018auto\u2019: \u2018int\u2019 and then \u2018const char*\u2019</code>. But i cannot find out if it's just g++ or this is actually required according to the standard to use every value in the type deduction.</p>\n", "Tags": "<c++11><auto>", "OwnerUserId": "2893496", "AnswerCount": "1"}, "32778832": {"ParentId": "32778604", "CommentCount": "0", "Body": "<p>This is [dcl.spec.auto, 7.1.6.4]/8:</p>\n<blockquote>\n<p id=\"so_32778604_32778832_0\">If the <em>init-declarator-list</em> contains more than one <em>init-declarator</em>, they shall all form declarations of variables. The type of each declared variable is determined as described above, and if the type that replaces the placeholder type is not the same in each deduction, the program is ill-formed.</p>\n</blockquote>\n<p>That is, all deduced types have to be the same.</p>\n<p>There's even an example in the same paragraph:</p>\n<pre><code>auto x = 5, *y = &amp;x;       // OK: auto is int\nauto a = 5, b = { 1, 2 };  // error: different types for auto\n</code></pre>\n", "OwnerUserId": "596781", "PostTypeId": "2", "Id": "32778832", "Score": "4", "CreationDate": "2015-09-25T09:17:51.380", "LastActivityDate": "2015-09-25T09:17:51.380"}, "bq_ids": {"n4140": {"so_32778604_32778832_0": {"section_id": 5452, "quality": 0.9629629629629629, "length": 26}}, "n3337": {"so_32778604_32778832_0": {"section_id": 5246, "quality": 0.5925925925925926, "length": 16}}, "n4659": {"so_32778604_32778832_0": {"section_id": 6878, "quality": 0.8888888888888888, "length": 24}}}});