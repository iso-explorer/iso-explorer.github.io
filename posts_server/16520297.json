post_cb({"bq_ids": {"n4140": {"so_16520297_16520442_0": {"length": 20, "quality": 0.9523809523809523, "section_id": 6173}}, "n3337": {"so_16520297_16520442_0": {"length": 20, "quality": 0.9523809523809523, "section_id": 5934}}, "n4659": {"so_16520297_16520442_0": {"length": 20, "quality": 0.9523809523809523, "section_id": 7675}}}, "16520466": {"Id": "16520466", "PostTypeId": "2", "Body": "<p>In C++ the result of the assignment operators, including the compound assignment operators (such as <code>*=</code>) are l-values, and thus assignables.</p>\n<p>In C they are r-values, so your code invalid C code.</p>\n", "LastActivityDate": "2013-05-13T11:00:04.823", "CommentCount": "0", "CreationDate": "2013-05-13T11:00:04.823", "ParentId": "16520297", "Score": "0", "OwnerUserId": "865874"}, "16520502": {"Id": "16520502", "PostTypeId": "2", "Body": "<p>The assignment operators for the built in types return an lvalue\nin C++ (unlike in C).  But you cannot use it to modify the\nobject without an intervening sequence point, so your example is\nundefined behavior (in C++03\u2014C++11 changed a lot here, and\nI seem to remember that one of the results made your code\ndefined).</p>\n<p>Regardless of the situation with regards to undefined behavior,\nyou would be better off writing:</p>\n<pre><code>x = 2 * x + y;\n</code></pre>\n<p>It's far more readable.  The fact that the assignment operators\nresult in lvalues is really only usable when the results are\nbound immediately to a reference:</p>\n<pre><code>T&amp;\nSomeClass::f()\n{\n    //  ...\n    return aTinSomeClass += 42;\n}\n</code></pre>\n<p>And even then, I'd write it in two statements.</p>\n<p>(The general rule in C++ is that if the result of an operator\ncorresponds to the value of an object in memory, then it is an\nlvalue.  There was no general rule in C.)</p>\n", "LastActivityDate": "2013-05-13T11:02:13.220", "CommentCount": "5", "CreationDate": "2013-05-13T11:02:13.220", "ParentId": "16520297", "Score": "2", "OwnerUserId": "649665"}, "16520442": {"Id": "16520442", "PostTypeId": "2", "Body": "<p>In C++, compound assignment operators return lvalues, as per \u00a75.17/1:</p>\n<blockquote>\n<p id=\"so_16520297_16520442_0\">The assignment operator (<code>=</code>) and the compound assignment operators all group right-to-left. All require a modifiable lvalue as their left operand and return an lvalue referring to the left operand.</p>\n</blockquote>\n<p>In this case, the use of <code>*=</code> returns an lvalue denoting the object <code>x</code> which is then used as the left operand of the <code>+=</code> operator.</p>\n<p>Perhaps you are thinking of the simple arithmetic operators like <code>+</code> and <code>*</code> which do return rvalues.</p>\n<p>In C, these operators don't return lvalues and therefore the result can't be further assigned.</p>\n", "LastEditorUserId": "150634", "LastActivityDate": "2013-05-13T11:03:56.710", "Score": "0", "CreationDate": "2013-05-13T10:57:59.027", "ParentId": "16520297", "CommentCount": "3", "OwnerUserId": "150634", "LastEditDate": "2013-05-13T11:03:56.710"}, "16520297": {"ViewCount": "669", "Body": "<p>I'm surprised that this works:</p>\n<pre><code>double x = 3;\ndouble y = 2;\n\n(x *= 2) += y;\nstd::cout &lt;&lt; x &lt;&lt; std::endl;\n</code></pre>\n<p>The result is 8, which is what it looks like the programmer is trying to achieve.  But I thought assignment operators returned an rvalue - how is it that you can assign to the result of one?</p>\n", "AcceptedAnswerId": "16520502", "Title": "Using the result of compound assignment as an lvalue", "CreationDate": "2013-05-13T10:50:05.367", "Id": "16520297", "CommentCount": "1", "PostTypeId": "1", "ClosedDate": "2013-05-13T13:19:21.967", "LastActivityDate": "2013-05-13T11:08:15.243", "Score": "0", "OwnerUserId": "274460", "Tags": "<c++><c><rvalue><compound-assignment>", "AnswerCount": "3"}});