post_cb({"29747909": {"CommentCount": "0", "Body": "<p>Your code is well-formed and should call the move constructor. However, gcc 4.4, does not support defining move functions as stated <a href=\"https://gcc.gnu.org/projects/cxx0x.html\" rel=\"nofollow\">here</a>.  </p>\n<p>You do want to consider to update your compiler.</p>\n", "CreationDate": "2015-04-20T12:29:09.090", "ParentId": "29747503", "Id": "29747909", "LastActivityDate": "2015-04-20T12:29:09.090", "PostTypeId": "2", "Score": "3", "OwnerUserId": "2692339"}, "bq_ids": {"n4140": {"so_29747503_29747759_0": {"length": 6, "quality": 0.5454545454545454, "section_id": 480}}, "n3337": {"so_29747503_29747759_0": {"length": 6, "quality": 0.5454545454545454, "section_id": 471}}}, "29747759": {"CreationDate": "2015-04-20T12:22:24.410", "CommentCount": "0", "Body": "<p>Well, your code works properly for me. <a href=\"https://ideone.com/VkYe0U\" rel=\"nofollow noreferrer\">See this sample</a>.</p>\n<p>Output:</p>\n<pre><code>Data()\nData(&amp;&amp;)\n4\n</code></pre>\n<p>As standard says:</p>\n<blockquote>\n<p id=\"so_29747503_29747759_0\">The move constructor is called whenever an object is initialized from\n  <strong>xvalue</strong> of the same type, which includes</p>\n<ul>\n<li>initialization, <code>T a = std::move(b);</code> or <code>T a(std::move(b));</code>, where <code>b</code> is of type <code>T</code></li>\n<li>function argument passing: <code>f(std::move(a));</code>, where a is of type <code>T</code> and <code>f</code> is <code>void f(T t)</code></li>\n<li>function return: <code>return a;</code> inside a function such as <code>T f()</code>, where a is of type T which has a move constructor.</li>\n</ul>\n</blockquote>\n<p>And</p>\n<blockquote>\n<p id=\"so_29747503_29747759_1\"><code>std::move</code> obtains an rvalue reference to its argument and converts it to an <strong>xvalue</strong>. </p>\n</blockquote>\n<p>I see no reason for behavior you describe. Perhaps there is something wrong with your compiler?</p>\n<hr>\n<p><strong>EDIT</strong></p>\n<p>It seems, that it is indeed the fault of the compiler. Definition of move functions was described in proposal <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3053.html\" rel=\"nofollow noreferrer\">N3053</a> (\"Defining Move Special Member Functions\"). As we can see in table on <a href=\"https://gcc.gnu.org/projects/cxx0x.html\" rel=\"nofollow noreferrer\">this page</a>:</p>\n<p><img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/AqtkN.png\"/></p>\n</hr>", "Id": "29747759", "OwnerUserId": "2812864", "LastEditDate": "2015-04-20T14:59:17.777", "ParentId": "29747503", "LastActivityDate": "2015-04-20T14:59:17.777", "PostTypeId": "2", "Score": "8", "LastEditorUserId": "2812864"}, "29747503": {"CreationDate": "2015-04-20T12:09:03.073", "ViewCount": "815", "Id": "29747503", "AcceptedAnswerId": "29747759", "Score": "6", "Title": "Move constructor not called", "LastEditorUserId": "1708860", "CommentCount": "9", "Body": "<p>After trying to write an example regaurding move constructors, i ran into the following code:</p>\n<pre><code>#include &lt;utility&gt;\n#include &lt;iostream&gt;\n\nusing namespace std;\n\nclass Data\n{\npublic:\n    Data()\n    : x (3)\n    {\n        cout &lt;&lt; \"Data()\" &lt;&lt; endl;\n    }\n    Data(Data&amp;&amp;)\n    : x(4)\n    {\n        cout &lt;&lt; \"Data(&amp;&amp;)\" &lt;&lt; endl;\n    }\n\nint x;\n};\n\nint main()\n{\n    Data a;\n    Data b (std::move(a));\n    cout &lt;&lt; b.x &lt;&lt; endl;\n    return 0;\n}\n</code></pre>\n<p>why is the move constructor not called here?\nThe program prints:</p>\n<blockquote>\n<p id=\"so_29747503_29747503_0\">Data() </p>\n<p id=\"so_29747503_29747503_1\">3</p>\n</blockquote>\n<p>What i'm finding even wierder is that by adding a copy constructor, suddenly, it does call the move constructor...</p>\n<pre><code>    Data(const Data&amp;)\n    : x(2)\n    {\n        cout &lt;&lt; \"Data(copy)\" &lt;&lt; endl;\n    }\n</code></pre>\n<p>And now it will print </p>\n<blockquote>\n<p id=\"so_29747503_29747503_2\">Data(&amp;&amp;)</p>\n<p id=\"so_29747503_29747503_3\">4</p>\n</blockquote>\n<p>P.S I'm using gcc 4.4.5</p>\n", "Tags": "<c++><c++11><move><copy-constructor><move-semantics>", "LastEditDate": "2015-04-20T12:24:35.327", "LastActivityDate": "2015-04-20T14:59:17.777", "PostTypeId": "1", "AnswerCount": "2", "OwnerUserId": "1708860"}});