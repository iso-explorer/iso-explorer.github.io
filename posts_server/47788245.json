post_cb({"47788261": {"Id": "47788261", "PostTypeId": "2", "Body": "<p>You need to actually <em>execute</em> the lambda:</p>\n<pre><code>qDebug() &lt;&lt; abc();\n</code></pre>\n<p>Currently the <code>&lt;&lt;</code> overload is converting the <em>type</em> of the lambda to a <code>bool</code>, and outputting that.</p>\n", "LastActivityDate": "2017-12-13T08:08:34.010", "CommentCount": "4", "CreationDate": "2017-12-13T08:08:34.010", "ParentId": "47788245", "Score": "10", "OwnerUserId": "2380830"}, "bq_ids": {"n4140": {"so_47788245_47788404_0": {"length": 9, "quality": 1.0, "section_id": 6047}, "so_47788245_47788404_1": {"length": 13, "quality": 1.0, "section_id": 44}}, "n3337": {"so_47788245_47788404_0": {"length": 9, "quality": 1.0, "section_id": 5815}, "so_47788245_47788404_1": {"length": 13, "quality": 1.0, "section_id": 41}}, "n4659": {"so_47788245_47788404_0": {"length": 9, "quality": 1.0, "section_id": 7546}, "so_47788245_47788404_1": {"length": 13, "quality": 1.0, "section_id": 45}}}, "47788245": {"ViewCount": "206", "Body": "<p>I've started learning C++11 and C++14 and i have a question. Why lambda not returns 23?</p>\n<pre><code>template&lt;class T&gt;\nauto func(T t)\n{\n    return t;\n}\n\nint main(int argc, char *argv[])\n{\n    QCoreApplication a(argc, argv);\n\n    auto abc = []()-&gt;auto { return func(23); };\n    qDebug() &lt;&lt; abc; // output: true\n\n    return a.exec();\n}\n</code></pre>\n", "AcceptedAnswerId": "47788261", "Title": "Why lambda returns bool?", "CreationDate": "2017-12-13T08:07:35.373", "LastActivityDate": "2017-12-13T08:37:08.633", "CommentCount": "1", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2017-12-13T08:14:46.307", "LastEditorUserId": "8366382", "Id": "47788245", "Score": "3", "OwnerUserId": "8366382", "Tags": "<c++><qt><c++11><return><return-type>", "AnswerCount": "2"}, "47788404": {"Id": "47788404", "PostTypeId": "2", "Body": "<p>As @Bathsheba pointed out. You have a typo and don't call the lambda. Now, it's rather obvious that <code>operator&lt;&lt;</code> for <code>qDebug()</code> is not overloaded on the lambda's closure type. So naturally an implicit conversion sequence has to happen. The only available one, <em>and only because your lambda is capture-less</em>, starts with a conversion to a function pointer.</p>\n<p>Now, <a href=\"http://doc.qt.io/qt-5/qdebug.html\" rel=\"noreferrer\">which overload of <code>operator&lt;&lt;</code></a> can be used to print a function pointer? On the face of it, two likely candidates:</p>\n<pre><code>operator&lt;&lt;(bool t)         // Because it prints true, duh\noperator&lt;&lt;(const void *p)  // Because pointers :)\n</code></pre>\n<p>So why the <code>bool</code> overload? Because a function pointer is not implicitly convertible to <code>void*</code>. That conversion is conditionally supported, and must be performed with a cast (<a href=\"https://timsong-cpp.github.io/cppwp/n3337/expr.reinterpret.cast#8\" rel=\"noreferrer\">[expr.reinterpret.cast]/8</a>):</p>\n<blockquote>\n<p id=\"so_47788245_47788404_0\">Converting a function pointer to an object pointer type or vice versa\n  is conditionally-supported.</p>\n</blockquote>\n<p>That leaves us only with <a href=\"https://timsong-cpp.github.io/cppwp/n3337/conv.bool\" rel=\"noreferrer\">[conv.bool]</a>:</p>\n<blockquote>\n<p id=\"so_47788245_47788404_1\">A prvalue of arithmetic, unscoped enumeration, pointer, or pointer to\n  member type can be converted to a prvalue of type bool.</p>\n</blockquote>\n", "LastEditorUserId": "2380830", "LastActivityDate": "2017-12-13T08:37:08.633", "Score": "15", "CreationDate": "2017-12-13T08:19:34.407", "ParentId": "47788245", "CommentCount": "7", "OwnerUserId": "817643", "LastEditDate": "2017-12-13T08:37:08.633"}});