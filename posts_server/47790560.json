post_cb({"bq_ids": {"n4140": {"so_47790560_47802261_0": {"length": 13, "quality": 0.5909090909090909, "section_id": 87}}, "n3337": {"so_47790560_47802261_0": {"length": 16, "quality": 0.7272727272727273, "section_id": 82}}, "n4659": {"so_47790560_47802261_0": {"length": 20, "quality": 0.9090909090909091, "section_id": 90}}}, "47802261": {"Id": "47802261", "PostTypeId": "2", "Body": "<p>You can modify the <code>AutoIncrementName</code> to be a <code>std::string</code> object, not a reference, so that you could take its address. Or change the two <code>f()</code> methods like this:</p>\n<pre><code>template&lt; typename T &gt;\nstatic int f( decltype(&amp;T::AutoIncrementName)*, void* );\n\ntemplate&lt; typename T &gt;\nstatic char f( decltype(&amp;T::AutoIncrementName)*, ... );\n</code></pre>\n<p>Non-type template arguments have some limitations <a href=\"http://eel.is/c++draft/temp.arg.nontype#2\" rel=\"nofollow noreferrer\">[temp.arg.nontype]/2</a>:</p>\n<blockquote>\n<p id=\"so_47790560_47802261_0\">2 A <em>template-argument</em> for a non-type <em>template-parameter</em> shall be a converted constant expression (8.20) of the type of the <em>template-parameter</em>. For a non-type <em>template-parameter</em> of reference or pointer type, the value of the constant expression shall not refer to (or for a pointer type, shall not be the address of):</p>\n<p id=\"so_47790560_47802261_1\">\u2014(2.1) a subobject (4.5),</p>\n<p id=\"so_47790560_47802261_2\">\u2014(2.2) a temporary object (15.2),</p>\n<p id=\"so_47790560_47802261_3\">\u2014(2.3) a string literal (5.13.5),</p>\n<p id=\"so_47790560_47802261_4\">\u2014(2.4) the result of a <code>typeid</code> expression (8.2.8), or</p>\n<p id=\"so_47790560_47802261_5\">\u2014(2.5) a prede\ufb01ned <code>__func__</code> variable (11.4.1).</p>\n</blockquote>\n", "LastEditorUserId": "8918119", "LastActivityDate": "2017-12-14T20:37:02.177", "Score": "1", "CreationDate": "2017-12-13T21:18:28.133", "ParentId": "47790560", "CommentCount": "0", "OwnerUserId": "8918119", "LastEditDate": "2017-12-14T20:37:02.177"}, "47790560": {"ViewCount": "37", "Body": "<p>After migrating from MS Visual Studio 2008 to MS Visual Studio 2017 and compiling using v140 toolset, I got a problem with defining whether a specific member variable is present in class. \nIn my case it not a simple variable but a static const reference.\nIt worked fine in under 2008.</p>\n<p>Here is an extract from my code which doesn't compile</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\n\nstruct ActivityEntry\n{\n    static const std::string&amp; AutoIncrementName;\n};\n\ntemplate&lt; typename Entry &gt;\nstruct AutoIncrementNameSelect\n{    \n    template&lt; const std::string* &gt;\n    struct TestHasMember;\n\n    template&lt; typename T &gt;\n    static int f( TestHasMember&lt; &amp;T::AutoIncrementName &gt;*, void* );\n\n    template&lt; typename T &gt;\n    static char f( TestHasMember&lt; &amp;T::AutoIncrementName &gt;*, ... );\n\n    enum { UseAutoIncrement = ( sizeof( f&lt; Entry &gt;( 0, 0 ) ) == sizeof( int ) ) };\n};\n\nstd::string s(\"aaa\");\n//initialize the reference\nconst std::string &amp; ActivityEntry::AutoIncrementName(s);\n\nint main()\n{\n    std::cout&lt;&lt;\"Use autoinc:\"&lt;&lt; AutoIncrementNameSelect&lt;ActivityEntry&gt;::UseAutoIncrement;\n\n    return 0;\n}\n</code></pre>\n<p>In my original code the error is: \"pointer to reference member is illegal\" with reference to:</p>\n<pre><code>enum { UseAutoIncrement = ( sizeof( f&lt; Entry &gt;( 0, 0 ) ) == sizeof( int ) ) };\n</code></pre>\n<p>Here, the error is</p>\n<pre><code> error: '&amp; ActivityEntry::AutoIncrementName' is not a valid template argument for 'const string* {aka const std::basic_string*}' because it is not the address of a variable\n</code></pre>\n", "Title": "Impossible to define whether a specific member variable (static const reference) is present in class", "CreationDate": "2017-12-13T10:20:11.853", "LastActivityDate": "2017-12-14T20:37:02.177", "CommentCount": "1", "PostTypeId": "1", "Id": "47790560", "Score": "1", "OwnerUserId": "9093046", "Tags": "<visual-c++>", "AnswerCount": "1"}});