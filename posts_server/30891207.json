post_cb({"bq_ids": {"n4140": {"so_30891207_30891261_0": {"length": 36, "quality": 0.9230769230769231, "section_id": 179}, "so_30891207_30891261_1": {"length": 20, "quality": 0.9523809523809523, "section_id": 180}}, "n3337": {"so_30891207_30891261_0": {"length": 36, "quality": 0.9230769230769231, "section_id": 173}, "so_30891207_30891261_1": {"length": 20, "quality": 0.9523809523809523, "section_id": 174}}, "n4659": {"so_30891207_30891261_0": {"length": 36, "quality": 0.9230769230769231, "section_id": 184}, "so_30891207_30891261_1": {"length": 20, "quality": 0.9523809523809523, "section_id": 185}}}, "30891261": {"Id": "30891261", "PostTypeId": "2", "Body": "<p>This is known as the \"injected class name.\" The rule specifically comes from [temp.local]:</p>\n<blockquote>\n<p id=\"so_30891207_30891261_0\">Like normal (non-template) classes, class templates have an <em>injected-class-name</em> (Clause 9). The <em>injected-class-\n  name</em> can be used as a <em>template-name</em> or a <em>type-name</em>. When it is used with a <em>template-argument-list</em>,\n  as a <em>template-argument</em> for a template <em>template-parameter</em>, or as the final identifier in the <em>elaborated-type-specifier</em>\n  of a friend class template declaration, it refers to the class template itself. Otherwise, <strong>it is equivalent\n  to the <em>template-name</em> followed by the template-parameters of the class template enclosed in <code>&lt;&gt;</code></strong>.</p>\n<p id=\"so_30891207_30891261_1\">Within the scope of a class template specialization or partial specialization, when the <em>injected-class-name</em> is\n  used as a <em>type-name</em>, it is equivalent to the <em>template-name</em> followed by the <em>template-arguments</em> of the class\n  template specialization or partial specialization enclosed in &lt;&gt;. <em>[ Example:</em></p>\n<pre><code>template&lt;template&lt;class&gt; class T&gt; class A { };\ntemplate&lt;class T&gt; class Y;\ntemplate&lt;&gt; class Y&lt;int&gt; {\n    Y* p;                                // meaning Y&lt;int&gt;\n    Y&lt;char&gt;* q;                          // meaning Y&lt;char&gt;\n    A&lt;Y&gt;* a;                             // meaning A&lt;::Y&gt;\n    class B {\n        template&lt;class&gt; friend class Y;  // meaning ::Y\n    };\n};\n</code></pre>\n<p id=\"so_30891207_30891261_2\"><em>\u2014end example ]</em></p>\n</blockquote>\n<p>This is basically for convenience, so that the class name within the class refers to the class itself and not anything external which may have the same name. For class templates, it potentially saves a lot of typing if you have a long template argument list. </p>\n", "LastEditorUserId": "2069064", "LastActivityDate": "2015-06-17T12:21:37.597", "Score": "13", "CreationDate": "2015-06-17T12:12:13.007", "ParentId": "30891207", "CommentCount": "2", "OwnerUserId": "2069064", "LastEditDate": "2015-06-17T12:21:37.597"}, "30891207": {"ViewCount": "364", "Body": "<p>the code comes from a C++ book as below:</p>\n<p>Why does this public member Link* next have no typename argument?</p>\n<pre><code>template &lt;typename E&gt; class Link {\nprivate:\n    static Link&lt;E&gt;* freelist;\npublic:\n    E element;\n    Link* next;  // this line confused me....\n\n    Link(const E&amp; elemval, Link* nextval = NULL)\n    {\n        element = elemval; next = nextval;\n    }\n    Link(Link* nextval = NULL) { next = nextval; }\n    void* operator new(size t){\n        if (freelist == NULL) return ::new Link;\n        Link&lt;E&gt;* temp = freelist;\n        freelist = freelist-&gt;next;\n        return temp; // Return the link\n    }\n};\n</code></pre>\n<p>I think it should be <code>Link&lt;E&gt;* next</code>.</p>\n<p>Please tell me the reason it doesn't have a template argument.</p>\n", "AcceptedAnswerId": "30891261", "Title": "using class name in a class template without template parameters", "CreationDate": "2015-06-17T12:09:36.703", "Id": "30891207", "CommentCount": "0", "LastEditDate": "2015-06-17T12:27:32.757", "PostTypeId": "1", "LastEditorUserId": "2069064", "LastActivityDate": "2015-06-17T12:27:32.757", "Score": "8", "OwnerUserId": "2579069", "Tags": "<c++><templates>", "AnswerCount": "1"}});