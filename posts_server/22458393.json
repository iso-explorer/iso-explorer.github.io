post_cb({"22459120": {"ParentId": "22458393", "PostTypeId": "2", "CommentCount": "3", "Body": "<p><strong>This answer is apparently wrong, which surprised me to learn. See the comments. I think the first and fourth bullet points of [dcl.init.list]/3 are what mean (1) invokes a constructor (or performs aggregate init) directly, without a temporary.</strong></p>\n<p>There is nothing in the standard that guarantees that (1) and (2) avoid a temporary. They are both copy-initialization, (1) is copy-list-initialization as defined by [dcl.init.list] p1:</p>\n<blockquote>\n<p id=\"so_22458393_22459120_0\">List-initialization can occur in direct-initialization or copy-initialization contexts; list-initialization in a direct-initialization context is called <em>direct-list-initialization</em> and list-initialization in a copy-initialization context is called <em>copy-list-initialization</em>.</p>\n</blockquote>\n<p>In both cases it is copy-initialization, and [dcl.init] says that may involve a move (which can be elided).</p>\n<p><code>8.5/14,15</code>:</p>\n<blockquote>\n<p id=\"so_22458393_22459120_1\">The initialization that occurs in the form</p>\n<p id=\"so_22458393_22459120_2\"><code>T x = a;</code></p>\n<p id=\"so_22458393_22459120_3\">[...] is called copy-initialization.</p>\n<p id=\"so_22458393_22459120_4\">The initialization that occurs in the forms</p>\n<p id=\"so_22458393_22459120_5\"><code>T x(a);</code></p>\n<p id=\"so_22458393_22459120_6\"><code>T x{a};</code></p>\n<p id=\"so_22458393_22459120_7\">[...] is called direct-initialization.</p>\n</blockquote>\n<p>If your compiler is not smart enough to always elide the temporary, then to ensure no temporary with list-initialization you can use direct-list-initialization, i.e.</p>\n<pre><code>A x{5, nullptr};\n</code></pre>\n", "OwnerUserId": "981959", "LastEditorUserId": "981959", "LastEditDate": "2014-03-17T23:42:16.600", "Id": "22459120", "Score": "3", "CreationDate": "2014-03-17T15:56:23.170", "LastActivityDate": "2014-03-17T23:42:16.600"}, "22458393": {"CommentCount": "0", "ViewCount": "246", "PostTypeId": "1", "LastEditorUserId": "1692107", "CreationDate": "2014-03-17T15:25:56.207", "LastActivityDate": "2014-03-17T23:42:16.600", "Title": "List initialization and copy elision", "AcceptedAnswerId": "22459120", "LastEditDate": "2014-03-17T15:43:30.937", "Id": "22458393", "Score": "3", "Body": "<p>Consider the following example:</p>\n<pre><code>#include &lt;cstdlib&gt;\nstruct A\n{\n    A(int, char*){};\n    A(const A&amp;){ printf(\"copy-ctor\\n\"); }\n};\nint main()\n{\n    A x = A(5, nullptr);\n}\n</code></pre>\n<p>According to 8.5.16 (of C++11 standard) the line</p>\n<pre><code>    A x = A(5, nullptr);\n</code></pre>\n<p>is treated as</p>\n<pre><code>    A x(A(5, nullptr));\n</code></pre>\n<p>(i.e. a temporary object of type A is created and passed to copy-ctor of type A to initialize an x). Then according to 12.8.31 compiler is allowed (<strong>but is not forced</strong>) to perform an optimization called \"copy elision\" to eliminate the creation of a temporary of type A which effectively makes that line of code to become</p>\n<pre><code>    A x(5, nullptr);\n</code></pre>\n<p>(i.e. no temporaries created, no copy-ctors called).</p>\n<p>Now, suppose I use a list-initialization in the example above like this:</p>\n<pre><code>    A x = {5, nullptr}; // (1)\n</code></pre>\n<p>or</p>\n<pre><code>    A x = A{5, nullptr}; // (2)\n</code></pre>\n<p>Can someone please <strong>quote the appropriate pharagraphs from C++11 standard</strong> that confirm or deny that (1) and/or (2) would <strong>always</strong> (i.e. not only when compiler can do \"copy elision\" optimization) be treated as</p>\n<pre><code>    A x(5, nullptr);\n</code></pre>\n<p>(i.e. first constructor of A is being directly called, no temporaries created, no copying of objects of type A is performed).</p>\n", "Tags": "<c++><c++11><language-lawyer><copy-elision><list-initialization>", "OwnerUserId": "1997715", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_22458393_22459120_0": {"section_id": 3323, "quality": 1.0, "length": 16}}, "n3337": {"so_22458393_22459120_0": {"section_id": 3193, "quality": 1.0, "length": 16}}, "n4659": {"so_22458393_22459120_0": {"section_id": 4089, "quality": 0.875, "length": 14}}}});