post_cb({"3093690": {"Id": "3093690", "PostTypeId": "2", "Body": "<p>You can also do:</p>\n<pre><code>string useMultiple =  \"this\" \n                      \"is \"\n                      \"a string in C.\"; \n</code></pre>\n<p>Place one literal after another without any special chars.</p>\n", "LastActivityDate": "2010-06-22T13:46:39.407", "CommentCount": "1", "CreationDate": "2010-06-22T13:46:39.407", "ParentId": "3093632", "Score": "0", "OwnerUserId": "168703"}, "3094774": {"Id": "3094774", "PostTypeId": "2", "Body": "<p>One has to consider that C was not written to be a \"Applications\" programming language but a systems programming language.  It would not be inaccurate to say it was designed expressly to rewrite Unix.  With that in mind, there was no EMACS or VIM and your user interfaces were serial terminals.  Multiline string declarations would seem a bit pointless on a system that did not have a multiline text editor.  Furthmore string manipulation would not be a primary concern for someone looking write an OS at that particular point in time.  The traditional set of UNIX scripting tools such as AWK and SED (amongst MANY others) are a testiment to the fact they weren't using C to do significant string manipulation.</p>\n<p>Additional considerations, it was not uncommon in the early 70s (when C was written) to submit your programs on PUNCH CARDS and comeback the next day to get them.  Would it have eaten up extra processing time to compile a program with multiline strings literals?  Not really it can actually be less work for the compiler. But you were going to comeback for it the next day anyhow in most cases.  But nobody who was filling out a punch card was going to put large amounts of text that wasn't needed in there programs.</p>\n<p>In a modern environment, there is probably no reason not to include multiline string literals other than designer's preference.  Gramatically speaking it's probably simpler because you don't have to take linefeeds into consideration when parsing the string literal.</p>\n", "LastEditorUserId": "560648", "LastActivityDate": "2011-09-09T19:22:14.807", "Score": "13", "CreationDate": "2010-06-22T15:48:30.157", "ParentId": "3093632", "CommentCount": "2", "OwnerUserId": "134597", "LastEditDate": "2011-09-09T19:22:14.807"}, "3095698": {"Id": "3095698", "PostTypeId": "2", "Body": "<p>The C preprocessor works on a line-by-line basis, but with lexical tokens. That means that the preprocessor understands that <code>\"foo\"</code> is a token. If C were to allow multi-line literals, however, the preprocessor would be in trouble. Consider:</p>\n<pre><code>\"foo\n#ifdef BAR\nbar\n#endif\nbaz\"\n</code></pre>\n<p>The preprocessor isn't able to mess with the inside of a token - but it's operating line-by-line. So how is it supposed to handle this case? The easy solution is to simply forbid multiline strings entirely.</p>\n", "LastActivityDate": "2010-06-22T17:51:11.963", "CommentCount": "2", "CreationDate": "2010-06-22T17:51:11.963", "ParentId": "3093632", "Score": "4", "OwnerUserId": "36723"}, "bq_ids": {"n4140": {"so_3093632_7366469_0": {"length": 19, "quality": 0.8636363636363636, "section_id": 5352}}, "n3337": {"so_3093632_7366469_0": {"length": 19, "quality": 0.8636363636363636, "section_id": 5149}}, "n4659": {"so_3093632_7366469_0": {"length": 18, "quality": 0.8181818181818182, "section_id": 6777}}}, "3093677": {"Id": "3093677", "PostTypeId": "2", "Body": "<p>The terse answer is \"because the grammar prohibits multiline string literals.\"  I don't know whether there is a good reason for this other than historical reasons.</p>\n<p>There are, of course, ways around this.  You can use line splicing:</p>\n<pre><code>const char* script = \"\\\n      Some\\n\\\n   Formatted\\n\\\n String Literal\\n\\\n\";\n</code></pre>\n<p>If the <code>\\</code> appears as the last character on the line, the newline will be removed during preprocessing.</p>\n<p>Or, you can use string literal concatenation:</p>\n<pre><code>const char* script = \n\"      Some\\n\"\n\"   Formatted\\n\"\n\" String Literal\\n\";\n</code></pre>\n<p>Adjacent string literals are concatenated during preprocessing, so these will end up as a single string literal at compile-time.</p>\n<p>Using either technique, the string literal ends up as if it were written:</p>\n<pre><code>const char* script = \"      Some\\n   Formatted\\n  String Literal\\n\";\n</code></pre>\n", "LastEditorUserId": "151292", "LastActivityDate": "2010-06-22T13:55:07.500", "Score": "30", "CreationDate": "2010-06-22T13:44:59.707", "ParentId": "3093632", "CommentCount": "6", "OwnerUserId": "151292", "LastEditDate": "2010-06-22T13:55:07.500"}, "3093678": {"Id": "3093678", "PostTypeId": "2", "Body": "<p>Actually, you can break it up thus:</p>\n<pre><code>string script =\n\"\\n\"\n\"      Some\\n\"\n\"   Formatted\\n\"\n\" String Literal\\n\";\n</code></pre>\n<p>Adjacent string literals are concatenated by the compiler.</p>\n", "LastActivityDate": "2010-06-22T13:45:08.397", "CommentCount": "5", "CreationDate": "2010-06-22T13:45:08.397", "ParentId": "3093632", "Score": "2", "OwnerUserId": "10077"}, "3093737": {"Id": "3093737", "PostTypeId": "2", "Body": "<p>Others have mentioned some excellent workarounds, I just wanted to address the <em>reason</em>.</p>\n<p>The reason is simply that C was created at a time when processing was at a premium and compilers had to be simple and as fast as possible. These days, if C were to be updated (I'm looking at you, <a href=\"http://en.wikipedia.org/wiki/C1X\" rel=\"nofollow noreferrer\">C1X</a>), it's quite <em>possible</em> to do exactly what you want. It's unlikely, however. Mostly for historical reasons; such a change <em>could</em> require extensive rewrites of compilers, and so will likely be rejected. </p>\n", "LastActivityDate": "2010-06-22T13:50:42.900", "CommentCount": "12", "CreationDate": "2010-06-22T13:50:42.900", "ParentId": "3093632", "Score": "6", "OwnerUserId": "12716"}, "3093685": {"Id": "3093685", "PostTypeId": "2", "Body": "<p>Strings can lay on multiple lines, but each line has to be quoted individually : </p>\n<pre><code>string script =\n    \"                \\n\"\n    \"       Some     \\n\"\n    \"    Formatted   \\n\"\n    \" String Literal \";\n</code></pre>\n", "LastActivityDate": "2010-06-22T13:45:59.190", "CommentCount": "0", "CreationDate": "2010-06-22T13:45:59.190", "ParentId": "3093632", "Score": "1", "OwnerUserId": "18804"}, "3095007": {"Id": "3095007", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_3093632_3095007_0\">I am writing a programming language\n  (similar to C) and would like to let\n  write multi-line strings easily (like\n  in above example).</p>\n</blockquote>\n<p>There is no reason why you couldn't create a programming language that allows multi-line strings.\nFor example, <a href=\"http://rosettacode.org/wiki/Category:Vedit_macro_language\" rel=\"nofollow noreferrer\">Vedit Macro Language</a> (which is C-like scripting language for VEDIT text editor) allows multi-line strings, for example:</p>\n<pre><code>Reg_Set(1,\"\n      Some\n   Formatted\n String Literal\n\")\n</code></pre>\n<p>It is up to you how you define your language syntax.</p>\n", "LastActivityDate": "2010-06-22T16:18:17.837", "CommentCount": "0", "CreationDate": "2010-06-22T16:18:17.837", "ParentId": "3093632", "Score": "1", "OwnerUserId": "227808"}, "14856516": {"Id": "14856516", "PostTypeId": "2", "Body": "<p>Literal declarations doesn't have to be single-line.</p>\n<p><a href=\"https://github.com/BradLarson/GPUImage/blob/master/framework/Source/GPUImage3x3ConvolutionFilter.m\" rel=\"nofollow\">GPUImage</a> inlines multiline shader code. Checkout its SHADER_STRING macro.</p>\n", "LastActivityDate": "2013-02-13T15:05:13.317", "CommentCount": "1", "CreationDate": "2013-02-13T15:05:13.317", "ParentId": "3093632", "Score": "0", "OwnerUserId": "78336"}, "7366469": {"Id": "7366469", "PostTypeId": "2", "Body": "<p>In addition to the existing answers, you can work around this using C++11's <em>raw string literals</em>, e.g.:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nint main() {\n   std::string str = R\"(a\nb)\";\n   std::cout &lt;&lt; str;\n}\n\n/* Output:\na\nb\n*/\n</code></pre>\n<h2><a href=\"http://www.ideone.com/hnlph\" rel=\"nofollow\">Live demo.</a></h2>\n<hr>\n<blockquote>\n<p id=\"so_3093632_7366469_0\"><code>[n3290: 2.14.5/4]:</code> [ <em>Note:</em> A source-file new-line in a raw string\n  literal results in a new-line in the resulting execution\n  <em>string-literal</em>. Assuming no whitespace at the beginning of lines in\n  the following example, the assert will succeed:</p>\n<pre><code>const char *p = R\"(a\\\nb\nc)\";\nassert(std::strcmp(p, \"a\\\\\\nb\\nc\") == 0);\n</code></pre>\n<p id=\"so_3093632_7366469_1\"><em>\u2014end note</em> ]</p>\n</blockquote>\n<p>Though non-normative, this note and the example that follows it in <code>[n3290: 2.14.5/5]</code> serve to complement the indication in the grammar that the production <code>r-char-sequence</code> may contain newlines (whereas the production <code>s-char-sequence</code>, used for normal string literals, may not).</p>\n</hr>", "LastActivityDate": "2011-09-09T19:21:50.563", "CommentCount": "0", "CreationDate": "2011-09-09T19:21:50.563", "ParentId": "3093632", "Score": "4", "OwnerUserId": "560648"}, "3093632": {"ViewCount": "4463", "Body": "<p>Is there any particular reason that multi-line string literals such as the following are not permitted in C++?</p>\n<pre><code>string script =\n\"\n      Some\n   Formatted\n String Literal\n\";\n</code></pre>\n<p>I know that multi-line string literals may be created by putting a backslash before each newline.\nI am writing a programming language (similar to C) and would like to allow the easy creation of multi-line strings (as in the above example).</p>\n<p>Is there any technical reason for avoiding this kind of string literal? Otherwise I would have to use a python-like string literal with a triple quote (which I don't want to do):</p>\n<pre><code>string script =\n\"\"\"\n      Some\n   Formatted\n String Literal\n\"\"\";\n</code></pre>\n<p><strong>Why must C/C++ string literal declarations be single-line?</strong></p>\n", "AcceptedAnswerId": "3094774", "Title": "Why must C/C++ string literal declarations be single-line?", "CreationDate": "2010-06-22T13:40:11.950", "Id": "3093632", "CommentCount": "6", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2010-06-23T09:41:52.950", "LastEditorUserId": "279580", "LastActivityDate": "2013-02-13T15:05:13.317", "Score": "13", "OwnerUserId": "279580", "Tags": "<c++><c><programming-languages><string><language-design>", "AnswerCount": "10"}});