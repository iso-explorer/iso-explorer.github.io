post_cb({"bq_ids": {"n4140": {"so_36515046_36515302_0": {"length": 64, "quality": 0.927536231884058, "section_id": 5811}}, "n3337": {"so_36515046_36515302_0": {"length": 59, "quality": 0.855072463768116, "section_id": 5584}}, "n4659": {"so_36515046_36515302_0": {"length": 58, "quality": 0.8405797101449275, "section_id": 7272}}}, "36515302": {"Id": "36515302", "PostTypeId": "2", "Body": "<p>This topic is discussed in \u00a71.9/15 (Program execution) of the C++11 standard:</p>\n<blockquote>\n<p id=\"so_36515046_36515302_0\">Except where noted, evaluations of operands of individual operators and of subexpressions of individual expressions are unsequenced. [ Note: In an expression that is <strong>evaluated more than once during the execution</strong>\n  of a program, <strong>unsequenced and indeterminately sequenced evaluations</strong> of its subexpressions need not be performed consistently in different evaluations. \u2014 end note ] The value computations of the operands of an\n  operator are sequenced before the value computation of the result of the operator. If a side effect on a scalar object is unsequenced relative to either another side effect on the same scalar object or a <strong>value computation\n  using the value of the same scalar object</strong>, and they are not potentially concurrent (1.10), <strong>the behavior is undefined</strong>. ...</p>\n<pre><code>void g(int i, int* v) {\n    i = v[i++];       // the behavior is undefined\n    i = 7, i++, i++;  // i becomes 9\n    i = i++ + 1;      // the behavior is undefined\n}\n</code></pre>\n</blockquote>\n<p>Undefined Behavior means: anything can happen, the program might behave as you expect or something (as you say) \"strange\" might happen.</p>\n<p>See also: <a href=\"https://en.wikipedia.org/wiki/Sequence_point\" rel=\"nofollow\">\"Sequence point\" on Wikipedia</a>:</p>\n<blockquote>\n<p id=\"so_36515046_36515302_1\">... depending on the order of expression evaluation, the <strong>increment may occur before, after, or interleaved</strong> with the assignment. ...</p>\n</blockquote>\n<p>A quick-fix would be to change</p>\n<pre><code>while (i ^ 5)   a[i++] = a[i] + b[i];\n</code></pre>\n<p>to</p>\n<pre><code>while (i ^ 5)   a[i] = a[i] + b[i], i++;\n</code></pre>\n", "LastEditorUserId": "2020827", "LastActivityDate": "2016-04-09T10:38:35.327", "Score": "4", "CreationDate": "2016-04-09T09:59:32.247", "ParentId": "36515046", "CommentCount": "1", "OwnerUserId": "2020827", "LastEditDate": "2016-04-09T10:38:35.327"}, "36515235": {"Id": "36515235", "PostTypeId": "2", "Body": "<p>'while (i ^ 5)   a[i++]' - i modified twice, no sequence point, so UB.</p>\n<p>'Between evaluation of the left and right operands of the &amp;&amp; (logical AND), || (logical OR) ' - no mention of XOR.</p>\n<p>Maybe.......</p>\n", "LastActivityDate": "2016-04-09T09:53:10.050", "CommentCount": "0", "CreationDate": "2016-04-09T09:53:10.050", "ParentId": "36515046", "Score": "-1", "OwnerUserId": "758133"}, "36515046": {"ViewCount": "111", "Body": "<p>I have switched from MS Visual Studio to gcc, and currently I am trying to recompile some of the codes I have written in VS by gcc. Now I come across something odd. Simply explained, consider the following code, but first, note that I already know it's a very bad code (which is not the point here)</p>\n<pre><code>#include &lt;iostream&gt;\n\nint main()\n{\n    int i = 0,\n        a[10] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 },\n        b[10] = { 6, 5, 4, 1, 3, 2, 9, 7, 10, 8 };\n\n    while (i ^ 5)   a[i++] = a[i] + b[i];\n\n    while (i ^ 10)  a[i++] = a[i] - b[i];\n\n    for (int j = 0; j &lt; 10; j++)\n        std::cout &lt;&lt; a[j] &lt;&lt; ' ';\n}\n</code></pre>\n<p>When I compile it with Visual Studio, it results in:</p>\n<pre><code>7 7 7 5 8 4 -2 1 -1 2 \n</code></pre>\n<p>as expected. With gcc v.4.3.6 I also get the same result (<a href=\"http://melpon.org/wandbox/permlink/IQxHiql3meopgYX0\" rel=\"nofollow\">Live example</a>).</p>\n<p>But when I switch to gcc 5.3.0, it results in:</p>\n<pre><code>7 7 5 8 8 -2 1 -1 2 -4198061\n</code></pre>\n<p>after generating many warnings about undefined behavior.</p>\n<p>The question is, why visual studio, even in its most recent version, doesn't care about the quality of code and undefined behaviors, and why earlier versions of gcc do the same? What has happened in recent versions of gcc?</p>\n", "AcceptedAnswerId": "36515302", "Title": "Different versions of gcc differently compile the same code", "CreationDate": "2016-04-09T09:34:26.313", "Id": "36515046", "CommentCount": "15", "LastEditDate": "2016-04-11T06:22:02.727", "PostTypeId": "1", "LastEditorUserId": "5358284", "LastActivityDate": "2016-04-11T06:22:02.727", "Score": "-1", "OwnerUserId": "5358284", "Tags": "<c++><gcc><undefined-behavior>", "AnswerCount": "3"}, "36515126": {"Id": "36515126", "PostTypeId": "2", "Body": "<p>This line of code seems to me to be undefined behavior:</p>\n<pre><code>a[i++] = a[i] + b[i];\n</code></pre>\n<p>It could means:</p>\n<pre><code>a[i] = a[i] + b[i];\ni++;\n</code></pre>\n<p>Or :</p>\n<pre><code>a[i] = a[i + 1] + b[i + 1];\ni++;\n</code></pre>\n<p>It seems the two first compilers use first interpretation while the third compiler uses second interpretation.</p>\n", "LastActivityDate": "2016-04-09T09:42:15.150", "CommentCount": "9", "CreationDate": "2016-04-09T09:42:15.150", "ParentId": "36515046", "Score": "1", "OwnerUserId": "5845470"}});