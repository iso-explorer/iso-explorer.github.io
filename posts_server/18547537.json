post_cb({"18547823": {"ParentId": "18547537", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>I know you're looking for an explanation based on the standards, but in this case I don't think that is necessary.</p>\n<p>Global variable and function declarations, unless declared <code>static</code>, have external linkage.</p>\n<p>A declaration with an initialization counts as a definition. You're declaring the same variable <code>x</code> in two places and initializing it with 2 different values. (In fact, it could even be the same value.)</p>\n<p>Meaning, you have 2 definitions of the same variable. That's for sure.</p>\n<p>Meaning, your example above violates the ODR.</p>\n<p>I remember this being the case even from pre-historical times in C.</p>\n<p>In C++ instead of using <code>static</code> we can place all global definitions inside the <code>anonymous namespace</code>, the effect is the same.</p>\n", "OwnerUserId": "1856694", "LastEditorUserId": "1856694", "LastEditDate": "2013-08-31T12:41:58.623", "Id": "18547823", "Score": "1", "CreationDate": "2013-08-31T11:50:32.320", "LastActivityDate": "2013-08-31T12:41:58.623"}, "bq_ids": {"n4140": {"so_18547537_18547537_0": {"section_id": 7041, "quality": 1.0, "length": 10}, "so_18547537_18547665_0": {"section_id": 7142, "quality": 1.0, "length": 15}}, "n3337": {"so_18547537_18547537_0": {"section_id": 6786, "quality": 1.0, "length": 10}, "so_18547537_18547665_0": {"section_id": 6886, "quality": 1.0, "length": 15}}, "n4659": {"so_18547537_18547537_0": {"section_id": 8538, "quality": 1.0, "length": 10}, "so_18547537_18547665_0": {"section_id": 8643, "quality": 0.9333333333333333, "length": 14}}}, "18547665": {"ParentId": "18547537", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>It is not a gcc bug, but standard behavior.</p>\n<p>Practically speaking, <code>int x;</code> defines a symbol which leads to a linker error if defined twice or more.</p>\n<h3><a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3242.pdf\" rel=\"nofollow\">C++ standard</a> 3.5 (9)</h3>\n<blockquote>\n<p id=\"so_18547537_18547665_0\">Two names that are the same (Clause 3) and that are declared in different scopes shall denote the same variable, function, type, enumerator, template or namespace if</p>\n</blockquote>\n<p>\u2014 both names have external linkage or else both names have internal linkage and are declared in the same translation unit; and</p>\n<p>\u2014 both names refer to members of the same namespace or to members, not by inheritance, of the same class; and</p>\n<p>\u2014 when both names denote functions, the parameter-type-lists of the functions (8.3.5) are identical; and</p>\n<p>\u2014 when both names denote function templates, the signatures (14.5.6.1) are the same.</p>\n", "OwnerUserId": "2682142", "LastEditorUserId": "2682142", "LastEditDate": "2013-08-31T12:14:02.977", "Id": "18547665", "Score": "2", "CreationDate": "2013-08-31T11:32:41.720", "LastActivityDate": "2013-08-31T12:14:02.977"}, "18547537": {"CommentCount": "4", "ViewCount": "399", "PostTypeId": "1", "ClosedDate": "2013-08-31T13:45:01.060", "LastEditorUserId": "2682142", "CreationDate": "2013-08-31T11:15:23.137", "LastActivityDate": "2013-10-05T16:26:12.193", "Title": "c++11 multiple definitions not odr-used?", "LastEditDate": "2013-10-05T16:26:12.193", "Id": "18547537", "Score": "1", "Body": "<p>Consider the following C++11 program:</p>\n<p>translation unit #1:</p>\n<pre><code>int x = 3;\n\nint main() {}\n</code></pre>\n<p>translation unit #2:</p>\n<pre><code>int x = 4;\n</code></pre>\n<p>Is this program ill-formed?  Why / why not?</p>\n<p>gcc complains that:</p>\n<pre><code>error: multiple definition of `x'\n</code></pre>\n<p>The only relevant rule I can see is in 3.2.4:</p>\n<blockquote>\n<p id=\"so_18547537_18547537_0\">Every program shall contain exactly one definition of every non-inline function or variable that is odr-used in that program</p>\n</blockquote>\n<p>But <code>x</code> isn't odr-used in the program. (or is it?)</p>\n<p>Is this a gcc bug?  Or am I missing something in the standard?</p>\n", "Tags": "<c++><gcc><c++11>", "OwnerUserId": "1131467", "AnswerCount": "2"}});