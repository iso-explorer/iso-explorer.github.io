post_cb({"bq_ids": {"n4140": {"so_20443257_20443340_0": {"length": 83, "quality": 0.9540229885057471, "section_id": 404}, "so_20443257_20443340_1": {"length": 6, "quality": 1.0, "section_id": 438}, "so_20443257_20443340_3": {"length": 11, "quality": 0.7333333333333333, "section_id": 438}, "so_20443257_20443340_2": {"length": 62, "quality": 1.0, "section_id": 438}}, "n3337": {"so_20443257_20443340_0": {"length": 83, "quality": 0.9540229885057471, "section_id": 395}, "so_20443257_20443340_1": {"length": 6, "quality": 1.0, "section_id": 429}, "so_20443257_20443340_3": {"length": 11, "quality": 0.7333333333333333, "section_id": 429}, "so_20443257_20443340_2": {"length": 62, "quality": 1.0, "section_id": 429}}, "n4659": {"so_20443257_20443340_0": {"length": 83, "quality": 0.9540229885057471, "section_id": 422}, "so_20443257_20443340_1": {"length": 6, "quality": 1.0, "section_id": 458}, "so_20443257_20443340_3": {"length": 11, "quality": 0.7333333333333333, "section_id": 458}, "so_20443257_20443340_2": {"length": 62, "quality": 1.0, "section_id": 458}}}, "20443340": {"Id": "20443340", "PostTypeId": "2", "Body": "<p>There are rules (C++11 \u00a712.4):</p>\n<blockquote>\n<p id=\"so_20443257_20443340_0\">After executing the body of the destructor and destroying any automatic objects allocated within the body, a destructor for class X calls the destructors for X\u2019s direct non-variant non-static data members, the destructors for X\u2019s direct base classes and, if X is the type of the most derived class (12.6.2), its destructor calls the destructors for X\u2019s virtual base classes. All destructors are called as if they were referenced with a qualified name, that is, ignoring any possible virtual overriding destructors in more derived classes. Bases and members <strong>are destroyed in the reverse order of the completion of their constructor</strong> (see 12.6.2). A return statement (6.6.3) in a destructor might not directly return to the caller; before transferring control to the caller, the destructors for the members and bases are called. Destructors for elements of an array are called in reverse order of their construction (see 12.6).</p>\n</blockquote>\n<p>The construction order is (\u00a712.6.2/10):</p>\n<blockquote>\n<p id=\"so_20443257_20443340_1\">In a non-delegating constructor, initialization proceeds in the following order:</p>\n<p id=\"so_20443257_20443340_2\">\u2014 First, and only for the constructor of the most derived class (1.8), virtual base classes are initialized in the order they appear on a depth-first left-to-right traversal of the directed acyclic graph of base classes, where \u201cleft-to-right\u201d is the order of appearance of the base classes in the derived class base-specifier-list.<br>\n  \u2014 Then, direct base classes are initialized in declaration order as they appear in the base-specifier-list (regardless of the order of the mem-initializers).<br>\n  \u2014 Then, non-static data members are initialized in the order they were declared in the class definition (again regardless of the order of the mem-initializers).<br>\n  \u2014 Finally, the compound-statement of the constructor body is executed.</br></br></br></p>\n<p id=\"so_20443257_20443340_3\">[ Note: The declaration order is mandated to ensure that base and member subobjects are destroyed in the\n  reverse order of initialization. \u2014 end note ]</p>\n</blockquote>\n<p>So in simple cases, base constructors are called in the order in which the classes are listed in the declaration, and destructors run in reverse of that order.</p>\n", "LastActivityDate": "2013-12-07T15:56:17.090", "Score": "5", "CreationDate": "2013-12-07T15:56:17.090", "ParentId": "20443257", "CommentCount": "0", "OwnerUserId": "635608"}, "20443257": {"ViewCount": "146", "Body": "<p>I have a class structure of three classes where two of them are base classes of the third, like this:</p>\n<pre><code>class A {\n};\nclass B {\n};\nclass C : public A, public B {\n};\n</code></pre>\n<p>When an instance of <code>C</code> is to be destroyed, in which order are the base classes <code>A</code> and <code>B</code> destroyed? Are there any rules for this?</p>\n", "AcceptedAnswerId": "20443340", "Title": "In what order will base classes be destroyed?", "CreationDate": "2013-12-07T15:48:33.880", "LastActivityDate": "2013-12-07T15:57:40.507", "CommentCount": "6", "LastEditDate": "2013-12-07T15:54:15.630", "PostTypeId": "1", "Tags": "<c++><class><inheritance><destruction>", "Id": "20443257", "AnswerCount": "1", "Score": "-1", "OwnerUserId": "1734432", "ClosedDate": "2013-12-09T02:10:05.427", "LastEditorUserId": "1734432"}});