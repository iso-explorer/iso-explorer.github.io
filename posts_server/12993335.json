post_cb({"bq_ids": {"n4140": {"so_12993335_12993697_0": {"length": 16, "quality": 0.9411764705882353, "section_id": 6072}}, "n3337": {"so_12993335_12993697_0": {"length": 16, "quality": 0.9411764705882353, "section_id": 5840}}, "n4659": {"so_12993335_12993697_0": {"length": 16, "quality": 0.9411764705882353, "section_id": 7568}}}, "12993599": {"Id": "12993599", "PostTypeId": "2", "Body": "<p>You can use <code>if (!(fMinute &amp;&amp; fIndividual) )</code> instead of <code>if (!fMinute || !fIndividual)</code>. C++ say that they are convertible to bool, but <code>operator bool</code> usually create problems, for example you may have a function that accept <code>int</code>, if your class have an <code>operator bool</code> then it is convertible to int and you can pass it to this function, but for example in our case <code>unique_ptr</code> never intended to be used as an <code>int</code>, so many developers never use <code>operator bool</code> directly but instead write an operator that can be used as a bool in conditional expressions but it is not actually bool!</p>\n<pre><code>struct bool_convertible {\n    typedef void (*convertible_to_bool)();\n    static void convertible_to_true();\n    operator convertible_to_bool () const {\n        return test() ? &amp;convertible_to_true : nullptr;\n    }\n};\n</code></pre>\n<p>Using this technique I may have <code>bool_convertible c; if( c ) {...}</code> but I can't have</p>\n<pre><code>void test_int( int );\nbool_convertible c;\ntest_int( c );\n</code></pre>\n", "LastActivityDate": "2012-10-20T23:29:14.747", "CommentCount": "4", "CreationDate": "2012-10-20T23:29:14.747", "ParentId": "12993335", "Score": "1", "OwnerUserId": "1425813"}, "12993664": {"Id": "12993664", "PostTypeId": "2", "Body": "<p>To build on what BigBoss said, C++11 requires that <code>std::unique_ptr</code> use <code>explicit operator bool() noexcept</code>, which solves the whole implicit conversion to bool problem. Except... VC2012 doesn't <em>support</em> <code>explicit</code> operators yet. Therefore, they have to use the <a href=\"http://www.artima.com/cppsource/safebool.html\" rel=\"nofollow\">safe-bool idiom</a>.</p>\n<p>While the safe-bool idiom is good, it can have flaws (which is why <code>explicit operator bool()</code> exists), depending on how you implement the idiom. And you apparently ran across one of them in VC2012. Reconfiguring your test, with <code>!(fMinute &amp;&amp; fIndividual)</code>, should solve it.</p>\n<p>But either way, it's a Visual Studio bug. Since the behavior changed, you should file a bug report even if you do manage to find a way around it.</p>\n", "LastEditorUserId": "734069", "LastActivityDate": "2012-10-21T00:32:11.403", "Score": "6", "CreationDate": "2012-10-20T23:41:37.517", "ParentId": "12993335", "CommentCount": "1", "OwnerUserId": "734069", "LastEditDate": "2012-10-21T00:32:11.403"}, "12993335": {"ViewCount": "1952", "Body": "<p>I'm trying to port my project from Visual Studio 2010 to Visual Studio 2012. In my code I have some file handling that looks like this:</p>\n<pre><code>auto fileDeleter = [](FILE* f) { fclose(f); };\n\nunique_ptr&lt;FILE, decltype(fileDeleter)&gt; fMinute(\n    fopen(minuteLogName.c_str(), \"w\"), fileDeleter);\n\n\nunique_ptr&lt;FILE, decltype(fileDeleter)&gt; fIndividual(\n    fopen(individualLogName.c_str(), \"w\"), fileDeleter);\n\nif (!fMinute || !fIndividual) {\n    throw Exceptions::IOException(\"One of the log files failed to open\",\n                                  __FUNCTION__);\n}\n</code></pre>\n<p>This built with no issues in 2010, but in 2012 it fails on the conditional with:</p>\n<blockquote>\n<p id=\"so_12993335_12993335_0\">error C2678: binary '!' : no operator found which takes a left-hand operand of type &gt; 'std::unique_ptr&lt;_Ty,_Dx&gt;' (or there is no acceptable conversion)<br>\n  ...<br>\n  could be 'built-in C++ operator!(bool)'</br></br></p>\n</blockquote>\n<p>The C++11 standard specifies that <a href=\"http://en.cppreference.com/w/cpp/memory/unique_ptr/operator_bool\">unique_ptr has a bool operator</a> to allow you to do quick checks like I have above. Stranger yet, VS2012's unique_ptr definition has this very operator:</p>\n<pre><code>_OPERATOR_BOOL() const _NOEXCEPT\n{   // test for non-null pointer\n    return (this-&gt;_Myptr != pointer() ? _CONVERTIBLE_TO_TRUE : 0);\n}\n</code></pre>\n<p>But I get that error upon compilation. Why?</p>\n<p>Yes, I could just be using <code>ofstream</code> instead, but that's besides the point.</p>\n", "AcceptedAnswerId": "12993664", "Title": "C++11 issues when moving from Visual Studio 2010 to 2012", "CreationDate": "2012-10-20T22:42:50.090", "Id": "12993335", "CommentCount": "1", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2012-10-23T22:55:12.777", "LastEditorUserId": "636019", "LastActivityDate": "2012-10-23T22:55:12.777", "Score": "7", "OwnerUserId": "713961", "Tags": "<c++><visual-c++><c++11><visual-studio-2012><unique-ptr>", "AnswerCount": "3"}, "12993697": {"Id": "12993697", "PostTypeId": "2", "Body": "<p>In the recent C++11 standard, std::unique_ptr has no <code>operator!</code> defined, only the explicit conversion operator</p>\n<pre><code>explicit operator bool() const;\n</code></pre>\n<p>However, the built-in unary logical negation operator, <code>!</code>, contextually converts its argument to bool according to 5.3.1/9:</p>\n<blockquote>\n<p id=\"so_12993335_12993697_0\">The operand of the logical negation operator <code>!</code> is contextually converted to <code>bool</code> (Clause 4); its value is true if the converted operand is false and false otherwise</p>\n</blockquote>\n<p>Contextual conversion to bool will use an explicit conversion operator, if available. So, your code is actually expected to work under C++11 rules. You should probably file a bug report to Microsoft. Whether they support explicit conversion operators or not should not matter.</p>\n<p>As a workaround try this:</p>\n<pre><code>if (!fMinute.get() || !fIndividual.get()) {\n    ....\n</code></pre>\n", "LastActivityDate": "2012-10-20T23:50:18.990", "CommentCount": "0", "CreationDate": "2012-10-20T23:50:18.990", "ParentId": "12993335", "Score": "1", "OwnerUserId": "172531"}});