post_cb({"4377483": {"CommentCount": "0", "ViewCount": "1534", "PostTypeId": "1", "LastEditorUserId": "121332", "CreationDate": "2010-12-07T14:09:18.370", "LastActivityDate": "2010-12-07T19:21:47.997", "Title": "c++ static POD initialization", "AcceptedAnswerId": "4377581", "LastEditDate": "2010-12-07T14:10:56.180", "Id": "4377483", "Score": "1", "Body": "<p>I have a single instance of a simple POD</p>\n<h2>a.hpp</h2>\n<pre><code>class A {\n    struct Zzz {\n        A*  m_aPtr;\n        int m_val;\n    }\n\n    static Zzz s_zzz;\n};\n</code></pre>\n<h2>a.cpp</h2>\n<pre><code>A::Zzz A::s_zzz;\n</code></pre>\n<p>I expect that both s_zzz.m_aPtr and s_zzz.m_val will be initialized to zeros before any other static initialization in any other compilation unit and it is guaranteed by the language itself. Am I right about it?</p>\n<p>Usually I provide default constructors for the structs. Say</p>\n<pre><code>A::Zzz::Zzz() :\n m_aPtr(0),\n m_val(0)\n{\n}\n</code></pre>\n<p>Will it create initialization order problem or introduce compiler dependencies? </p>\n", "Tags": "<c++><static><initialization><pod>", "OwnerUserId": "194305", "AnswerCount": "4"}, "4377586": {"ParentId": "4377483", "PostTypeId": "2", "CommentCount": "9", "Body": "<blockquote>\n<p id=\"so_4377483_4377586_0\">I expect that both s_zzz.m_aPtr and\n  s_zzz.m_val will be initialized to\n  zeros before any other static\n  initialization in any other\n  compilation unit and it is guaranteed\n  by the language itself.</p>\n</blockquote>\n<p>It will be zero-initialized, since it's a static lifetime variable at namespace scope.</p>\n<p>That zero-initialization happens before any dynamic initialization (an example of dynamic initializatin is when you some explicit initialization, or the class has a constructor).</p>\n<p>The order of zero-initialization between different translation units is not defined, but there's not any way to detect it or rely on it since it happens before anything else, so it doesn't matter.</p>\n<p>Re your point 2, it's rather unclear what you're asking about.</p>\n<p>But for your static lifetime object, the effect is just that it's first zero-initialized, and then during dynamic initialization your constructor is used to zero it again (although the compiler might be smart enough to optimize away that redundant extra initialization).</p>\n<p>Cheers &amp; hth.,</p>\n<p><strong>ERRATA</strong>: Ben Voigt has provided a convincing example that <em>the last paragraph above is wrong</em>. So please disregard. The presence of the constructor means that the object can be dynamically initialized at some point before, between or after operations that change it, causing rather unpredictable results\u2026</p>\n", "OwnerUserId": "464581", "LastEditorUserId": "464581", "LastEditDate": "2010-12-07T19:21:47.997", "Id": "4377586", "Score": "2", "CreationDate": "2010-12-07T14:19:09.883", "LastActivityDate": "2010-12-07T19:21:47.997"}, "4377581": {"ParentId": "4377483", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>At least in C++0x, you can rely on all <em>zero-initialization</em> being performed before any other initialization code runs.</p>\n<p>From the C++0x FCD, section <code>[basic.start.init]</code></p>\n<blockquote>\n<p id=\"so_4377483_4377581_0\">Variables with static storage duration\n  (3.7.1) or thread storage duration\n  (3.7.2) shall be zero-initialized\n  (8.5) before any other initialization\n  takes place.</p>\n</blockquote>\n<p>If you're considering using this variable from other initialization code, then an explicit constructor would be a big mistake, as it would run sometime mixed in with other initialization code, and overwrite whatever changes have already been made by other initializers.</p>\n", "OwnerUserId": "103167", "LastEditorUserId": "103167", "LastEditDate": "2010-12-07T14:24:27.487", "Id": "4377581", "Score": "2", "CreationDate": "2010-12-07T14:18:46.117", "LastActivityDate": "2010-12-07T14:24:27.487"}, "4377587": {"ParentId": "4377483", "CommentCount": "1", "Body": "<ol>\n<li>Static data is always initialised to zero.</li>\n<li>No it shouldn't introduce any initialisation problems.</li>\n</ol>\n<p>When the application is loaded into memory, the static area is initialised to zero. This is before any code starts to execute.</p>\n", "OwnerUserId": "516138", "PostTypeId": "2", "Id": "4377587", "Score": "0", "CreationDate": "2010-12-07T14:19:11.007", "LastActivityDate": "2010-12-07T14:19:11.007"}, "bq_ids": {"n4140": {"so_4377483_4377581_0": {"section_id": 7151, "quality": 0.8666666666666667, "length": 13}}, "n3337": {"so_4377483_4377581_0": {"section_id": 6895, "quality": 0.8666666666666667, "length": 13}}, "n4659": {"so_4377483_4377581_0": {"section_id": 4051, "quality": 0.6, "length": 9}}}, "4377530": {"ParentId": "4377483", "CommentCount": "9", "Body": "<ol>\n<li><p>There are no guarantees about initialization order of statics between compilation units (see <a href=\"http://www.parashift.com/c++-faq-lite/ctors.html#faq-10.14\" rel=\"nofollow\">http://www.parashift.com/c++-faq-lite/ctors.html#faq-10.14</a>).</p></li>\n<li><p>If it has a constructor, it will no longer be a POD, unfortunately.</p></li>\n</ol>\n", "OwnerUserId": "129570", "PostTypeId": "2", "Id": "4377530", "Score": "1", "CreationDate": "2010-12-07T14:14:23.683", "LastActivityDate": "2010-12-07T14:14:23.683"}});