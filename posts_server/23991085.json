post_cb({"bq_ids": {"n4140": {"so_23991085_23991085_0": {"length": 34, "quality": 0.8947368421052632, "section_id": 7110}, "so_23991085_23991160_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 5522}, "so_23991085_23991312_0": {"length": 14, "quality": 0.8235294117647058, "section_id": 7049}}, "n3337": {"so_23991085_23991312_0": {"length": 14, "quality": 0.8235294117647058, "section_id": 6794}, "so_23991085_23991160_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 5308}, "so_23991085_23991085_0": {"length": 34, "quality": 0.8947368421052632, "section_id": 6854}}, "n4659": {"so_23991085_23991312_0": {"length": 14, "quality": 0.8235294117647058, "section_id": 8546}, "so_23991085_23991160_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 6957}, "so_23991085_23991085_0": {"length": 34, "quality": 0.8947368421052632, "section_id": 8611}}}, "23991085": {"ViewCount": "40", "Body": "<p>I've written the following code:</p>\n<pre><code>#include &lt;iostream&gt;\n\nnamespace A\n{\n    int z=::b;\n}\n\nint b=5;\n\nint main()\n{\n    std::cout &lt;&lt; A::z;\n}\n</code></pre>\n<p>and I expected that it was worked correctly. It is because:</p>\n<blockquote>\n<p id=\"so_23991085_23991085_0\">A name prefixed by the unary scope operator :: (5.1) is looked up in\n  global scope, in the translation unit where it is used. The name shall\n  be declared in global namespace scope or shall be a name whose\n  declaration is visible in global scope because of a using-directive\n  (3.4.3.2). The use of :: allows a global name to be referred to even\n  if its identifier has been hidden (3.3.10).</p>\n</blockquote>\n<p>This quote is said nothing about that the variable must be declare lexically before using of qualified id.</p>\n", "Title": "Using qualified name in the global scope", "CreationDate": "2014-06-02T09:17:03.283", "LastActivityDate": "2014-06-02T09:28:59.090", "CommentCount": "0", "PostTypeId": "1", "Id": "23991085", "Score": "0", "OwnerUserId": "2786156", "Tags": "<c++>", "AnswerCount": "2"}, "23991160": {"Id": "23991160", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_23991085_23991160_0\">The name shall be declared in global namespace scope</p>\n</blockquote>\n<p>You have to write:</p>\n<pre><code>int b=5;\n\nnamespace A\n{\n    int z=::b;\n}\n</code></pre>\n", "LastActivityDate": "2014-06-02T09:21:13.073", "CommentCount": "4", "CreationDate": "2014-06-02T09:21:13.073", "ParentId": "23991085", "Score": "0", "OwnerUserId": "316448"}, "23991312": {"Id": "23991312", "PostTypeId": "2", "Body": "<p>From <strong>3.3.2 Point of declaration:</strong></p>\n<blockquote>\n<p id=\"so_23991085_23991312_0\">The point of declaration for a name is immediately after its complete declarator (Clause 8) and before its\n  initializer (if any), except as noted below. [ Example:</p>\n<pre><code> int x = 12;\n { int x = x; }\n   Here the second x is initialized with its own (indeterminate) value. \u2014 end example ]\n</code></pre>\n</blockquote>\n<p>This effectively enforces the <em>declare-before-use</em> in C++ aside from exceptions such as functions in a class scope, etc.</p>\n", "LastActivityDate": "2014-06-02T09:28:59.090", "CommentCount": "1", "CreationDate": "2014-06-02T09:28:59.090", "ParentId": "23991085", "Score": "0", "OwnerUserId": "2968284"}});