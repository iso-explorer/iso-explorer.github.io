post_cb({"bq_ids": {"n4140": {"so_15317218_15317235_1": {"length": 10, "quality": 0.9090909090909091, "section_id": 7124}, "so_15317218_15317235_0": {"length": 14, "quality": 0.9333333333333333, "section_id": 7123}}, "n3337": {"so_15317218_15317235_1": {"length": 10, "quality": 0.9090909090909091, "section_id": 6868}, "so_15317218_15317235_0": {"length": 14, "quality": 0.9333333333333333, "section_id": 6867}}, "n4659": {"so_15317218_15317235_1": {"length": 10, "quality": 0.9090909090909091, "section_id": 8625}, "so_15317218_15317235_0": {"length": 14, "quality": 0.9333333333333333, "section_id": 8624}}}, "15317235": {"Id": "15317235", "PostTypeId": "2", "Body": "<p>You should use an elaborated type specifier:</p>\n<pre><code>class test an_instance_of_test;\n</code></pre>\n<p>As the standard says (\u00a73.4.4):</p>\n<blockquote>\n<p id=\"so_15317218_15317235_0\">An <em>elaborated-type-specifier</em> (7.1.6.3) may be used to refer to a previously declared <em>class-name</em> or <em>enum-name</em> even though the name has been hidden by a non-type declaration.</p>\n</blockquote>\n<p>The name lookup simply ignores any names of non-types:</p>\n<blockquote>\n<p id=\"so_15317218_15317235_1\">the identifier is looked up according to 3.4.1 but ignoring any non-type names that have been declared.</p>\n</blockquote>\n", "LastActivityDate": "2013-03-09T23:42:56.723", "Score": "3", "CreationDate": "2013-03-09T23:42:56.723", "ParentId": "15317218", "CommentCount": "0", "OwnerUserId": "150634"}, "15317218": {"ViewCount": "278", "Body": "<p>This code compiles without any issue if test is not called so I conclude that c++ allows to create class and function with the same name:</p>\n<pre><code>class test {};\nvoid test() {}\n\nint main() {\n  test an_instance_of_test;\n}\n</code></pre>\n<p>error is:</p>\n<pre><code>&lt;stdin&gt;: In function 'int main()':\n&lt;stdin&gt;:5:8: error: expected ';' before 'an_instance_of_test'\n&lt;stdin&gt;:5:27: warning: statement is a reference, not call, to function 'test' [-Waddress]\n</code></pre>\n<p>And I know that I should not create such unambiguity in the first place but nevertheless this may be experienced in someones else code and I'm asking if there is a way out of this without changing function or class definition. </p>\n", "AcceptedAnswerId": "15317235", "Title": "how to resolve ambiguous situation between same named function and class?", "CreationDate": "2013-03-09T23:40:56.800", "Id": "15317218", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2013-03-09T23:42:56.723", "Score": "2", "OwnerUserId": "393087", "Tags": "<c++><class><function><ambiguous>", "AnswerCount": "1"}});