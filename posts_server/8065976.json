post_cb({"bq_ids": {"n4140": {"so_8065976_8066129_0": {"length": 12, "quality": 0.7058823529411765, "section_id": 712}, "so_8065976_8066032_1": {"length": 22, "quality": 0.8461538461538461, "section_id": 3382}, "so_8065976_8066032_0": {"length": 19, "quality": 0.6785714285714286, "section_id": 712}}, "n3337": {"so_8065976_8066129_0": {"length": 12, "quality": 0.7058823529411765, "section_id": 701}, "so_8065976_8066032_1": {"length": 22, "quality": 0.8461538461538461, "section_id": 3251}, "so_8065976_8066032_0": {"length": 19, "quality": 0.6785714285714286, "section_id": 701}}, "n4659": {"so_8065976_8066129_0": {"length": 12, "quality": 0.7058823529411765, "section_id": 741}, "so_8065976_8066032_1": {"length": 19, "quality": 0.7307692307692307, "section_id": 4142}, "so_8065976_8066032_0": {"length": 19, "quality": 0.6785714285714286, "section_id": 741}}}, "8066129": {"Id": "8066129", "PostTypeId": "2", "Body": "<p>No.</p>\n<p>Edit: Oops, accidentally used N3126.  Some Standard section numbers below are no good.</p>\n<p>23.2.1p11:</p>\n<blockquote>\n<p id=\"so_8065976_8066129_0\">Unless otherwise specified (see 23.2.4.1, 23.2.5.1, 23.3.2.3, and 23.4.1.4) all container types defined in this Clause meet the following additional requirements: ...</p>\n</blockquote>\n<ul>\n<li>no <code>erase()</code>, <code>clear()</code>, <code>pop_back()</code>, or <code>pop_front()</code> function throws an exception.</li>\n</ul>\n<p>In 23.4.1.4, <code>vector</code> has exceptions for <code>erase</code> (since it may need to copy or move some elements), but none of the others.</p>\n<p>If an element destructor throws during <code>clear()</code>, it will result in <code>std::unexpected()</code>.</p>\n", "LastEditorUserId": "459640", "LastActivityDate": "2011-11-09T14:25:15.873", "Score": "7", "CreationDate": "2011-11-09T14:02:54.543", "ParentId": "8065976", "CommentCount": "4", "OwnerUserId": "459640", "LastEditDate": "2011-11-09T14:25:15.873"}, "8066072": {"Id": "8066072", "PostTypeId": "2", "Body": "<p>Yes and No</p>\n<p>Yes:</p>\n<p><code>clear</code> eventually calls <code>delete[]</code> operator, which involves calling destructors of all the objects an the array (if they have one) and <code>free</code> the memory.</p>\n<p>Destructors may eventually throw an exception.</p>\n<p>Memory freeing may also fail in abrnormal cases (such as heap corruption or etc.)</p>\n<p>No:</p>\n<p>Throwing exceptions is destructors is criticized and mostly doesn't happen (at least in the standard libraries). Besides the fact that exception thrown from a destructor during the stack unwinding (caused by another exception) may not be handled, there is a logical problem with exceptions in destructors.</p>\n<p>Error in freeing memory usually caused by heap corruption or other unrecoverable problem. Anyway the program's fate is to die, no matter if there'll be exception or not</p>\n", "LastActivityDate": "2011-11-09T13:58:04.850", "CommentCount": "3", "CreationDate": "2011-11-09T13:58:04.850", "ParentId": "8065976", "Score": "-2", "OwnerUserId": "1560850"}, "8066005": {"Id": "8066005", "PostTypeId": "2", "Body": "<p>Yes, if the destructor of <code>T</code> throws, otherwise no.</p>\n<p><em>Update:</em>\nseems i was dead wrong; it just crashes in that case</p>\n", "LastEditorUserId": "560648", "LastActivityDate": "2011-11-09T17:51:44.090", "Score": "5", "CreationDate": "2011-11-09T13:52:48.593", "ParentId": "8065976", "CommentCount": "4", "OwnerUserId": "100724", "LastEditDate": "2011-11-09T17:51:44.090"}, "8065976": {"ViewCount": "1470", "Body": "<p>Is there any chance for a call to <code>std::vector&lt;T&gt;::clear()</code> to throw an exception?</p>\n", "AcceptedAnswerId": "8066032", "Title": "Can vector<T>::clear throw?", "CreationDate": "2011-11-09T13:50:44.920", "Id": "8065976", "CommentCount": "2", "FavoriteCount": "3", "PostTypeId": "1", "LastEditDate": "2011-11-11T13:10:35.997", "LastEditorUserId": "545127", "LastActivityDate": "2011-11-11T13:10:35.997", "Score": "17", "OwnerUserId": "333390", "Tags": "<c++><exception><vector>", "AnswerCount": "4"}, "8066032": {"Id": "8066032", "PostTypeId": "2", "Body": "<p><strong>No.</strong></p>\n<blockquote>\n<p id=\"so_8065976_8066032_0\"><code>[2003: 21.2.1/11 | n3290: 21.2.1/10]:</code> Unless otherwise specified\n  (see 23.2.4.1, 23.2.5.1, 23.3.3.4, and 23.3.6.5) all container types\n  defined in this Clause meet the following additional requirements:\n  [..] \u2014 <strong>no <code>erase()</code>, <code>clear()</code>, <code>pop_back()</code> or <code>pop_front()</code>\n  function throws an exception</strong>. [..]</p>\n</blockquote>\n<hr>\n<h3>What happens if my element type destructor throws?</h3>\n<p>In C++11, <code>std::vector&lt;T&gt;::clear()</code> is marked <code>noexcept</code> (<code>[n3290: 23.3.6/1]</code>).</p>\n<p>Any exceptions falling out of <code>~T</code> could be caught by the implementation, so that <code>clear()</code> itself may not throw anything. If they're not, and it does, the exception is \"unexpected\" and terminates the process rather than propagating:</p>\n<pre><code>struct T {\n   ~T() { throw \"lol\"; }\n};\n\nint main() {\n   try {\n      vector&lt;T&gt; v{T()};\n      v.clear();\n   }\n   catch (...) {\n      cout &lt;&lt; \"caught\";\n   }\n}\n\n// Output: \"terminated by exception: lol\" (GCC 4.7.0 20111108)\n</code></pre>\n<blockquote>\n<p id=\"so_8065976_8066032_1\"><code>[n3290: 15.5.1]:</code> In some situations exception handling must be\n  abandoned for less subtle error handling techniques. [..] \u2014 when the\n  search for a handler (15.3) encounters the outermost block of a\n  function with a <em>no-except-specification</em> that does not allow the\n  exception (15.4) [..]</p>\n</blockquote>\n</hr>", "LastEditorUserId": "560648", "LastActivityDate": "2011-11-09T14:20:42.377", "Score": "22", "CreationDate": "2011-11-09T13:55:01.940", "ParentId": "8065976", "CommentCount": "4", "OwnerUserId": "560648", "LastEditDate": "2011-11-09T14:20:42.377"}});