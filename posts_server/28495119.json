post_cb({"28495626": {"ParentId": "28495119", "PostTypeId": "2", "CommentCount": "1", "CreationDate": "2015-02-13T08:48:52.670", "Id": "28495626", "LastEditDate": "2015-02-13T09:08:07.450", "OwnerDisplayName": "user3920237", "Score": "4", "Body": "<p>The reason you can't do:</p>\n<pre><code>std::array&lt;struct {int v}, 10&gt; arr;\n</code></pre>\n<p>is because of the following rule from N4140:</p>\n<blockquote>\n<p id=\"so_28495119_28495626_0\">\u00a77.1.6/3 [...] A <em>type-specifier-seq</em> shall not define a class or\n  enumeration unless it appears in the <em>type-id</em> of an <em>alias-declaration</em>\n  (7.1.3) that is not the <em>declaration</em> of a\n  <em>template-declaration</em>.</p>\n</blockquote>\n<p>Since a template type argument is specified using a <em>type-id</em>, and a <em>type-id</em> contains a <em>type-specifier-seq</em>, it can't be the definition of a class.</p>\n<p>You could use a typedef, but:</p>\n<blockquote>\n<p id=\"so_28495119_28495626_1\">\u00a79.1/5 A <em>typedef-name</em> (7.1.3) that names a class type, or a\n  cv-qualified version thereof, is also a <em>class-name</em>. [...]</p>\n</blockquote>\n<p>I would go with the suggestion by <a href=\"https://stackoverflow.com/questions/28495119/is-it-possible-to-initialize-an-stdarray-of-unnamed-structs/28495626#comment45310348_28495119\">T.C.</a>:</p>\n<pre><code>struct { int v; } foo; std::array&lt;decltype(foo), 10&gt; bar = {{{1},{2}}};\n</code></pre>\n", "LastActivityDate": "2015-02-13T09:08:07.450", "LastEditorUserId": "2756719"}, "bq_ids": {"n4140": {"so_28495119_28495626_0": {"section_id": 5428, "quality": 0.8181818181818182, "length": 9}, "so_28495119_28495626_1": {"section_id": 5414, "quality": 0.8181818181818182, "length": 9}}, "n3337": {"so_28495119_28495626_0": {"section_id": 5223, "quality": 0.8181818181818182, "length": 9}, "so_28495119_28495626_1": {"section_id": 5209, "quality": 0.8181818181818182, "length": 9}}, "n4659": {"so_28495119_28495626_0": {"section_id": 49, "quality": 0.5454545454545454, "length": 6}, "so_28495119_28495626_1": {"section_id": 6836, "quality": 0.8181818181818182, "length": 9}}}, "28495119": {"CommentCount": "12", "ViewCount": "371", "PostTypeId": "1", "LastEditorUserId": "1392189", "CreationDate": "2015-02-13T08:13:40.867", "LastActivityDate": "2015-02-13T09:08:07.450", "Title": "Is it possible to initialize an std::array of unnamed structs?", "AcceptedAnswerId": "28495626", "LastEditDate": "2015-02-13T09:02:32.910", "Id": "28495119", "Score": "7", "Body": "<p>The below works:</p>\n<pre><code>struct\n{\n    int v;\n} vals[] = { {1}, {2} };\n</code></pre>\n<p>Can I do the same thing but instead initialize an <code>std::array</code>?</p>\n<p><strong>Edit since so many people are asking 'why'</strong></p>\n<p>There are some very obvious workarounds (listed in the comments), but I only want to use the type once, so I don't really want it added to my current namespace. I could  use a tuple or something similar, but having the named values improves clarity. I don't need the c-array value if I am constructing an <code>std::array</code>, so I can't use decltype.</p>\n<p>The cleanest solution that I <em>want</em> to do is:</p>\n<pre><code>struct\n{\n    int v;\n} std::array vals = { {1}, {2} };\n</code></pre>\n<p>There is an element of academic interest as well - \"is this possible in some way I hadn't though of?\". Seems like not, so I'll likely use:</p>\n<pre><code>struct\n{\n    int v;\n} c_array[] = {};\n\nstd::array&lt;std::remove_reference_t&lt;decltype(c_array[0])&gt;, 2&gt; arr = { {1}, {2} };\n</code></pre>\n", "Tags": "<c++>", "OwnerUserId": "1392189", "AnswerCount": "1"}});