post_cb({"27000065": {"ParentId": "26999739", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>You haven't said what you want to achieve.  I assume that you need that each of your instances react on a specific way, depending on a certain class variable.</p>\n<p>However, if you don't need a per-instance behaviour, then you can use static variables. The following works:</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nstruct test {\n  static string t1;  \n  void say(const string &amp;val=t1){\n    cout &lt;&lt; val &lt;&lt; \"!\" &lt;&lt; endl;\n  }\n};\n\nstring test::t1;\n\nint main() {\n   cout &lt;&lt; \"Hello World\" &lt;&lt; endl; \n   test::t1 = string(\"asd\");\n   test a;\n   a.say();\n   a.say(\"bla\");\n   test::t1 = string(\"blahblah\");\n   a.say();\n   return 0;\n}\n</code></pre>\n<p>... which means that all the objects of the class <code>test</code> will use the static string <code>t1</code> as their default value.</p>\n<p>You can \"hack\" a little bit, and use this as an ugly sentinel:</p>\n<pre><code>  void say(const string &amp;val=t1){\n    if (&amp;val == &amp;t1) {\n      // They are using the default value, so act as you want\n    } else {\n      // they are providing a value\n    }\n  }\n</code></pre>\n", "OwnerUserId": "1433901", "LastEditorUserId": "1433901", "LastEditDate": "2014-11-19T07:28:10.787", "Id": "27000065", "Score": "0", "CreationDate": "2014-11-18T17:13:32.503", "LastActivityDate": "2014-11-19T07:28:10.787"}, "27000245": {"ParentId": "26999739", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_26999739_27000245_0\">Is there a solution doing it this way except overloading and setting the parameter manually?</p>\n</blockquote>\n<p>No, you'd need an overload if you want a default argument to depend on another parameter, including <code>this</code>. Although, in this case, it doesn't make sense since this is a constructor, and <code>t1</code> doesn't exist before it's called.</p>\n<blockquote>\n<p id=\"so_26999739_27000245_1\">Why is this not working, is there a technical reason for it?</p>\n</blockquote>\n<p>Because the evaluation order of function arguments isn't specified. To allow parameter values in default arguments, you'd need much more complex rules to ensure each parameter was initialised before being used.</p>\n", "OwnerUserId": "204847", "PostTypeId": "2", "Id": "27000245", "Score": "1", "CreationDate": "2014-11-18T17:23:58.963", "LastActivityDate": "2014-11-18T17:23:58.963"}, "bq_ids": {"n4140": {"so_26999739_26999944_1": {"section_id": 3260, "quality": 0.8571428571428571, "length": 18}, "so_26999739_26999944_0": {"section_id": 3259, "quality": 0.8333333333333334, "length": 5}}, "n3337": {"so_26999739_26999944_1": {"section_id": 3132, "quality": 0.9523809523809523, "length": 20}, "so_26999739_26999944_0": {"section_id": 3131, "quality": 0.8333333333333334, "length": 5}}, "n4659": {"so_26999739_26999944_0": {"section_id": 4017, "quality": 0.8333333333333334, "length": 5}}}, "26999944": {"ParentId": "26999739", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>[dcl.fct.default]/8:</p>\n<blockquote>\n<p id=\"so_26999739_26999944_0\">The keyword <code>this</code> shall not be used in a default argument of a member function.</p>\n</blockquote>\n<p>This is a special case of a general problem: You cannot refer to other parameters in a default argument of a parameter. I.e.</p>\n<pre><code>void f(int a, int b = a) {} \n</code></pre>\n<p>Is ill-formed. And so would be</p>\n<pre><code>class A\n{\n    int j;\n};\n\nvoid f(A* this, int i = this-&gt;j) {}\n</code></pre>\n<p>Which is basically what the compiler transforms a member function of the form <code>void f(int i = j) {}</code> into. This originates from the fact that the order of evaluation of function arguments and the postfix-expression (which constitutes the object argument) is unspecified. [dcl.fct.default]/9:</p>\n<blockquote>\n<p id=\"so_26999739_26999944_1\">Default arguments are evaluated each time the function is called.\n  <strong>The order of evaluation of function arguments is unspecified. Consequently, parameters of a function shall not be used in a default\n  argument, even if they are not evaluated.</strong></p>\n</blockquote>\n", "OwnerUserId": "3647361", "LastEditorUserId": "3647361", "LastEditDate": "2014-11-18T17:26:40.723", "Id": "26999944", "Score": "13", "CreationDate": "2014-11-18T17:08:15.177", "LastActivityDate": "2014-11-18T17:26:40.723"}, "26999739": {"CommentCount": "6", "AcceptedAnswerId": "26999944", "PostTypeId": "1", "LastEditorUserId": "3782904", "CreationDate": "2014-11-18T16:57:53.997", "LastActivityDate": "2014-11-19T07:28:10.787", "LastEditDate": "2014-11-18T22:28:35.777", "ViewCount": "856", "FavoriteCount": "2", "Title": "Using a class member as a default argument for a member function", "Id": "26999739", "Score": "9", "Body": "<p>Is there another way than manually overloading the corresponding member function and calling the first overload with the member as the argument?</p>\n<p>I am trying something along the lines of</p>\n<pre><code>class test\n{\n    string t1=\"test\";\n\n    testfun( string&amp; val = this-&gt;t1 )\n    { /* modify val somehow */ }\n};\n</code></pre>\n<p>(Test it: <a href=\"http://goo.gl/36p4CF\" rel=\"nofollow\">http://goo.gl/36p4CF</a>)</p>\n<p>Currently I guess there is no technical reason why this should not work. </p>\n<ul>\n<li>Is there a solution doing it this way except overloading and setting the parameter manually? </li>\n<li>Why is this not working, is there a technical reason for it?</li>\n</ul>\n", "Tags": "<c++><c++11><overloading><default-value><method-overloading>", "OwnerUserId": "3782904", "AnswerCount": "3"}});