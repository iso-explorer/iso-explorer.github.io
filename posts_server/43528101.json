post_cb({"43528436": {"ParentId": "43528101", "CommentCount": "1", "CreationDate": "2017-04-20T19:38:32.157", "OwnerUserId": "481267", "PostTypeId": "2", "Id": "43528436", "Score": "2", "Body": "<p>The program is well-formed as far as I can see.</p>\n<p>According to [temp.param]/8 the template parameter actually has type <code>const int*</code>, not <code>const int[]</code>.</p>\n<blockquote>\n<p id=\"so_43528101_43528436_0\">A non-type <em>template-parameter</em> of type \u201carray of <code>T</code>\u201d or \u201cfunction returning <code>T</code>\u201d is adjusted to be of type\n  \u201cpointer to <code>T</code>\u201d or \u201cpointer to function returning <code>T</code>\u201d, respectively.</p>\n</blockquote>\n<p>According to [temp.arg.nontype]/1, we can use the name of a complete array object with static storage duration and external linkage as an argument to such a template parameter:</p>\n<blockquote>\n<p id=\"so_43528101_43528436_1\">A <em>template-argument</em> for a non-type, non-template <em>template-parameter</em> shall be one of:</p>\n<p id=\"so_43528101_43528436_2\">...</p>\n<p id=\"so_43528101_43528436_3\">\u2014 a constant expression (5.19) that designates the address of a complete object with static storage duration and external or internal linkage or a function with external or internal linkage, including function\n  templates and function <em>template-ids</em> but excluding non-static class members, expressed (ignoring parentheses) as <code>&amp;</code> <em>id-expression</em>, where the <em>id-expression</em> is the name of an object or function, except that the\n  <code>&amp;</code> may be omitted if the name refers to a function or array and shall be omitted if the corresponding\n  <em>template-parameter</em> is a reference ...</p>\n</blockquote>\n<p><code>arr</code> is a constant expression, despite the fact that MSVC thinks it isn't. It is a core constant expression according to [expr.const]/2 since it does not contain any forbidden evaluations, and it is a constant expression since it points to an object with static storage duration ([expr.const]/4).</p>\n<p>Because the template parameter refers to an array with static storage duration, the bounds of the array are known at the time of template instantiation. It can therefore verify that the access to <code>arr[0]</code> is a legitimate core constant expression since it has well-defined behaviour and falls into the category of allowed lvalue-to-rvalue conversions in [expr.const]/2:</p>\n<blockquote>\n<p id=\"so_43528101_43528436_4\">... a non-volatile glvalue of integral or enumeration type that refers to a non-volatile const object with\n  a preceding initialization, initialized with a constant expression</p>\n</blockquote>\n", "LastActivityDate": "2017-04-20T19:38:32.157"}, "bq_ids": {"n4140": {"so_43528101_43528436_3": {"section_id": 87, "quality": 0.9787234042553191, "length": 46}, "so_43528101_43528436_4": {"section_id": 6185, "quality": 1.0, "length": 14}, "so_43528101_43528436_0": {"section_id": 61, "quality": 1.0, "length": 13}, "so_43528101_43528436_1": {"section_id": 87, "quality": 1.0, "length": 5}}, "n3337": {"so_43528101_43528436_3": {"section_id": 82, "quality": 0.851063829787234, "length": 40}, "so_43528101_43528436_4": {"section_id": 5946, "quality": 0.9285714285714286, "length": 13}, "so_43528101_43528436_0": {"section_id": 56, "quality": 1.0, "length": 13}, "so_43528101_43528436_1": {"section_id": 82, "quality": 1.0, "length": 5}}, "n4659": {"so_43528101_43528436_4": {"section_id": 7687, "quality": 1.0, "length": 14}, "so_43528101_43528436_0": {"section_id": 63, "quality": 0.6153846153846154, "length": 8}}}, "43528101": {"CommentCount": "3", "ViewCount": "131", "CreationDate": "2017-04-20T19:17:45.703", "LastActivityDate": "2017-04-20T19:38:32.157", "Title": "Using constexpr array as a template non-type argument (C++14)", "FavoriteCount": "1", "PostTypeId": "1", "Id": "43528101", "Score": "2", "Body": "<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\ntemplate&lt;const int arr[]&gt;\nstruct S {\n    static constexpr int value = arr[0];\n};\n\nconstexpr int arr[] = { 5 };\n\nint main() {\n    cout &lt;&lt; S&lt;arr&gt;::value &lt;&lt; endl;\n}\n</code></pre>\n<p>This program compiles fine and prints <code>5</code> with gcc 5.1 and higher, but MSVC 19.10.25019 gives the following errors:</p>\n<blockquote>\n<p id=\"so_43528101_43528101_0\">error C2975: 'S': invalid template argument for 'arr', expected\n  compile-time constant expression error C2131: expression did not\n  evaluate to a constant</p>\n</blockquote>\n<p>Is this program valid according to the C++14 Standard, or gcc is being too lenient here?</p>\n", "Tags": "<c++><gcc><visual-c++><c++14><constexpr>", "OwnerUserId": "305118", "AnswerCount": "1"}});