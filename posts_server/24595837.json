post_cb({"24595837": {"CommentCount": "14", "ViewCount": "153", "PostTypeId": "1", "LastEditorUserId": "147192", "CreationDate": "2014-07-06T12:32:51.890", "LastActivityDate": "2014-07-06T15:07:01.820", "Title": "Bug in std::basic_string in special case of allocator", "LastEditDate": "2014-07-06T12:42:38.037", "Id": "24595837", "Score": "3", "Body": "<p>I use g++ and I have defined a custom allocator where the size_type is byte. \nI am using it with <code>basic_string</code> to create custom strings.</p>\n<p>The \"basic_string.tcc\" code behaves erroneously because in the code of </p>\n<pre><code>_S_create(size_type __capacity, size_type __old_capacity, const _Alloc&amp; __alloc) \n</code></pre>\n<p>the code checks for </p>\n<pre><code>const size_type __extra = __pagesize - __adj_size % __pagesize;\n</code></pre>\n<p>But all the arithmetic are byte arithmetic and so <code>__pagesize</code> that should have a value 4096, becomes 0 (because 4096 is a multiple of 256) and we have a \"division by 0\" exception (the code hangs).</p>\n<p>The question isn't what should I do, but how could I ask a correction to the above code ? from whom ? (I may implement those corrections).</p>\n", "Tags": "<c++><c++11><allocator>", "OwnerUserId": "3127336", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_24595837_24597217_0": {"section_id": 6290, "quality": 1.0, "length": 11}}, "n3337": {"so_24595837_24597217_0": {"section_id": 6050, "quality": 1.0, "length": 11}}, "n4659": {"so_24595837_24597217_0": {"section_id": 7797, "quality": 1.0, "length": 11}}}, "24597217": {"ParentId": "24595837", "CommentCount": "2", "Body": "<p>Before you can request or suggest a change to something like that, you have to establish a strong case that there is indeed a problem that needs to be fixed. In my view there probably is not.</p>\n<p>The question is: under which circumstances would it be legitimate (or useful) to define a <code>size_type</code> as unsigned char? I am not aware of anything in the standard that specifically disallows this choice. It is defined as </p>\n<blockquote>\n<p id=\"so_24595837_24597217_0\">unsigned integer type - a type that can represent the size of the largest object in the allocation model.</p>\n</blockquote>\n<p>And <code>unsigned char</code> is definitely an <code>unsigned integer type</code> as per s3.9.1. Interesting.</p>\n<p>So is it useful? Clearly you seem to think so, but I'm not sure your case is strongly made out. You could work on providing evidence that this is an issue worth resolving.</p>\n<p>So it seems to me the process is:</p>\n<ol>\n<li>Establish whether <code>unsigned char</code> is intended to be included as a valid choice in the standard, or whether it should be excluded, or was just overlooked.</li>\n<li>Raise a 'standards non-compliance' issue with the team for each compiler that has the problem, providing good reasoning and a repro case.</li>\n<li>Consider submitting a patch, if this is something within your ability to fix.</li>\n</ol>\n<p>Or you could just use <code>short unsigned int</code> instead. I would.</p>\n", "OwnerUserId": "1105562", "PostTypeId": "2", "Id": "24597217", "Score": "3", "CreationDate": "2014-07-06T15:07:01.820", "LastActivityDate": "2014-07-06T15:07:01.820"}});