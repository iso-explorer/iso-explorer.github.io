post_cb({"40380203": {"CommentCount": "2", "ViewCount": "56", "CreationDate": "2016-11-02T12:40:14.233", "LastActivityDate": "2016-11-02T13:35:14.870", "Title": "The standard's wording on variadic templates", "AcceptedAnswerId": "40381315", "PostTypeId": "1", "Id": "40380203", "Score": "0", "Body": "<blockquote>\n<h2>14.5.3 [temp.variadic], paragraph 5</h2>\n<p id=\"so_40380203_40380203_0\">For the purpose of determining whether a parameter pack satisfies a rule regarding entities other than parameter packs, the parameter pack is considered to be the entity <strong>that would result from an instantiation of the pattern in which it appears</strong>. [Example:</p>\n<pre><code>template&lt;class ... Types&gt; void f(Types ... rest);\ntemplate&lt;class ... Types&gt; void g(Types ... rest) {\n    f(&amp;rest ...); // \u201c&amp;rest ...\u201d is a pack expansion; \u201c&amp;rest\u201d is its pattern\n}\n</code></pre>\n<p id=\"so_40380203_40380203_1\">\u2014end example]</p>\n</blockquote>\n<p>The committee gave the title of <strong>entity</strong> to a parameter pack, so that a lambda expression can find the identifier of it without explicitly capturing it \u2014 see <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4019.html#1662\" rel=\"nofollow noreferrer\">this</a>. That being said, I expected to see as an example something relevant to a lambda expression making use of a parameter pack, but the actual one is far from my expectation. I don't see how the example above is related to the wording (I think it should be about name lookup or something). Furthermore, what's the purpose of the bold text next to \"the entity\" (I barely understand what it means...)?</p>\n", "Tags": "<c++><language-lawyer>", "OwnerUserId": "5645940", "AnswerCount": "2"}, "40381315": {"ParentId": "40380203", "CommentCount": "1", "Body": "<p>I would consider this a [minor] editorial problem in the standard (I submitted an issue about it). The text in question is a result of core issue <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4019.html#1662\" rel=\"nofollow noreferrer\">1662</a>, which suggested adding that text at the end of paragraph 4, in which case the entire text would read:</p>\n<blockquote>\n<p id=\"so_40380203_40381315_0\">A <em>pack expansion</em> consists of a <em>pattern</em> and an ellipsis, the instantiation of which produces zero or more\n  instantiations of the pattern in a list (described below). The form of the pattern depends on the context in\n  which the expansion occurs. Pack expansions can occur in the following contexts:<br>\n  \u2014 In a function parameter pack [...]<br>\n  \u2014 In a template parameter pack [...]<br>\n  [...]<br>\n  \u2014 In a <em>fold-expression</em> [...]<br>\n  For the purpose of determining whether a parameter pack satisfies a rule regarding entities other than\n  parameter packs, the parameter pack is considered to be the entity that would result from an instantiation\n  of the pattern in which it appears.<em>[Example:</em></br></br></br></br></br></p>\n<pre><code>template&lt;class ... Types&gt; void f(Types ... rest);\ntemplate&lt;class ... Types&gt; void g(Types ... rest) {\n    f(&amp;rest ...); // \u201c&amp;rest ...\u201d is a pack expansion; \u201c&amp;rest\u201d is its pattern\n}\n</code></pre>\n<p id=\"so_40380203_40381315_1\"><em>-end example]</em></p>\n</blockquote>\n<p>The example here is simply an example of a pack expansion - which is the term introduced in the previous paragraph. The fact that the \"For the purpose of...\" section has become its own paragraph, rather than an extension of paragraph 4, makes the placement of the example pretty odd. </p>\n<p>That said, examples aren't normative anyway and what's important is the text.</p>\n", "OwnerUserId": "2069064", "PostTypeId": "2", "Id": "40381315", "Score": "2", "CreationDate": "2016-11-02T13:35:14.870", "LastActivityDate": "2016-11-02T13:35:14.870"}, "40380964": {"ParentId": "40380203", "CommentCount": "3", "Body": "<p>What the standard tries to say here is that certain rules do not apply to a parameter pack, but do apply to the results of unpacking said pack. </p>\n<p>E.g. to determine whether a given lambda capture is a <em>simple-capture</em>, you can't check whether the pack has automatic storage duration. Packs don't have storage duration. Instead, unpack the pack, and then for each unpacked result, determine whether that has automatic storage duration.</p>\n", "OwnerUserId": "15416", "PostTypeId": "2", "Id": "40380964", "Score": "1", "CreationDate": "2016-11-02T13:18:32.187", "LastActivityDate": "2016-11-02T13:18:32.187"}, "bq_ids": {"n4140": {"so_40380203_40380203_0": {"section_id": 122, "quality": 0.9130434782608695, "length": 21}, "so_40380203_40381315_0": {"section_id": 121, "quality": 0.625, "length": 35}}, "n3337": {"so_40380203_40381315_0": {"section_id": 116, "quality": 0.625, "length": 35}}, "n4659": {"so_40380203_40380203_0": {"section_id": 126, "quality": 0.9130434782608695, "length": 21}, "so_40380203_40381315_0": {"section_id": 125, "quality": 0.625, "length": 35}}}});