post_cb({"bq_ids": {"n4140": {"so_32973787_32974857_0": {"length": 29, "quality": 1.0, "section_id": 268}, "so_32973787_32974857_1": {"length": 7, "quality": 1.0, "section_id": 264}}, "n3337": {"so_32973787_32974857_0": {"length": 29, "quality": 1.0, "section_id": 259}, "so_32973787_32974857_1": {"length": 7, "quality": 1.0, "section_id": 255}}, "n4659": {"so_32973787_32974857_0": {"length": 29, "quality": 1.0, "section_id": 275}, "so_32973787_32974857_1": {"length": 6, "quality": 0.8571428571428571, "section_id": 285}}}, "32973787": {"ViewCount": "48", "Body": "<p>I am working with the following simple example</p>\n<pre><code>struct foo\n{\n    template &lt;typename t&gt;\n    void funct(t a , t b)\n    {\n        std::cout &lt;&lt; \"Primary template called\";\n    }\n};\n\ntemplate&lt;&gt;\nvoid foo::funct&lt;std::string&gt; (std::string a , std::string b)\n{\n   std::cout &lt;&lt; \"Specialized\";\n}\n</code></pre>\n<p>The above code is fine and runs , however I am a bit confused the method declared outside the class  which is :</p>\n<pre><code>    template&lt;&gt;\n    void foo::funct&lt;std::string&gt; (std::string a , std::string b)\n    {\n       std::cout &lt;&lt; \"Specialized\";\n    }\n</code></pre>\n<p>does not even have a signature inside the class. I was under the assumption that the above code would work even if I added the signature of the method to the class and made it look like this which unfortunately is wrong</p>\n<pre><code>struct foo\n{\n    template &lt;typename t&gt;\n    void funct(t a , t b)\n    {\n        std::cout &lt;&lt; \"Primary template called\";\n    }\n\n    template&lt;&gt;                                                 ----&gt;Added Extra\n    void funct&lt;std::string&gt; (std::string a , std::string b);   -----&gt;Added Extra\n};\n\n template&lt;&gt;\n    void foo::funct&lt;std::string&gt; (std::string a , std::string b)\n    {\n       std::cout &lt;&lt; \"Specialized\";\n    }\n</code></pre>\n<p>My question is why does it behave like this ? The method outside the class/struct assumes there is a method with the signature</p>\n<pre><code>  funct(std::string a , std::string b);\n</code></pre>\n<p>but there is not.I would appreciate it if someone could explain this behaviour.</p>\n", "AcceptedAnswerId": "32974857", "Title": "Why does explicit method specialization of a template class work without its prototype declaration inside the class", "CreationDate": "2015-10-06T15:25:28.820", "Id": "32973787", "CommentCount": "3", "LastEditDate": "2015-10-06T15:33:15.010", "PostTypeId": "1", "LastEditorUserId": "4589819", "LastActivityDate": "2015-10-06T16:26:04.493", "Score": "1", "OwnerUserId": "4589819", "Tags": "<c++><templates><gcc>", "AnswerCount": "1"}, "32974857": {"Id": "32974857", "PostTypeId": "2", "Body": "<p>The explicit specialization will cause an implicit instantiation, no need to declare it explicitly here.</p>\n<p>14.7.3$6 Explicit specialization [temp.expl.spec]</p>\n<blockquote>\n<p id=\"so_32973787_32974857_0\">If a template, a member template or a member of a class template is\n  explicitly specialized then that specialization shall be declared\n  before the first use of that specialization that would cause an\n  implicit instantiation to take place, in every translation unit in\n  which such a use occurs; no diagnostic is required.</p>\n</blockquote>\n<p>And, the explicit specialization can't be declared in class scope.</p>\n<p>14.7.3$2 Explicit specialization [temp.expl.spec]</p>\n<blockquote>\n<p id=\"so_32973787_32974857_1\">An explicit specialization shall be declared in a namespace enclosing\n  the specialized template.</p>\n</blockquote>\n<p>So, if you want you can add the explicit specialization declaration explicitly outside the class scope, even if doesn't make much sense here.</p>\n<pre><code>template&lt;&gt;\nvoid foo::funct&lt;std::string&gt; (std::string a , std::string b);\n</code></pre>\n<p><a href=\"http://ideone.com/DEdavs\" rel=\"nofollow\">LIVE</a></p>\n", "LastEditorUserId": "3309790", "LastActivityDate": "2015-10-06T16:26:04.493", "Score": "2", "CreationDate": "2015-10-06T16:20:27.740", "ParentId": "32973787", "CommentCount": "0", "OwnerUserId": "3309790", "LastEditDate": "2015-10-06T16:26:04.493"}});