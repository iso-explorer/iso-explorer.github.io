post_cb({"bq_ids": {"n4140": {"so_13241806_13241886_0": {"length": 11, "quality": 0.5238095238095238, "section_id": 4658}}, "n3337": {"so_13241806_13241886_0": {"length": 11, "quality": 0.5238095238095238, "section_id": 4469}}}, "29099638": {"Id": "29099638", "PostTypeId": "2", "Body": "<p>None of the other answers really make sense to me.  <code>std::function</code> <em>does</em> have a <code>noexcept</code> default constructor and a <code>noexcept</code> <code>swap</code> method, so an implementor could always define the move constructor like so:</p>\n<pre><code>function(function&amp;&amp; other) noexcept\n  : function()\n{\n  swap(*this, other);\n}\n</code></pre>\n<p>Given the above, I'm not sure why the committee declined to make the move constructor <code>noexcept</code>.  In any case, you can work around the problem by creating a wrapper to hold the <code>std::function</code> and move it using this technique.</p>\n", "LastEditorUserId": "3919155", "LastActivityDate": "2016-06-27T10:01:47.377", "CommentCount": "0", "CreationDate": "2015-03-17T12:55:05.830", "ParentId": "13241806", "Score": "3", "OwnerUserId": "114421", "LastEditDate": "2016-06-27T10:01:47.377"}, "13241868": {"PostTypeId": "2", "Body": "<p>I imagine that the <code>function</code> object is capable of storing an arbitrary, user-defined, callable object. When you move the <code>function</code> object, that contained, user-defined object is moved as well, and there are no guarantees that this can be done without exceptions.</p>\n", "LastActivityDate": "2012-11-05T23:08:37.993", "Id": "13241868", "CommentCount": "3", "CreationDate": "2012-11-05T23:08:37.993", "ParentId": "13241806", "Score": "3", "OwnerUserId": "596781"}, "13241886": {"Id": "13241886", "PostTypeId": "2", "Body": "<p>Quoting the standard (as you request):</p>\n<blockquote>\n<p id=\"so_13241806_13241886_0\"><strong>C++11 \u00a720.8.11.2.1/6</strong> (from N3290):<br>\n<code>function(function&amp;&amp; f);</code><br>\n<code>template &lt;class A&gt; function(allocator_arg_t, const A&amp; a, function&amp;&amp; f);</code><br>\n  Effects: If <code>!f</code>, <code>*this</code> has no target; otherwise, move-constructs the target of <code>f</code> into the target of <code>*this</code>,\n  leaving <code>f</code> in a valid state with an unspecified value.</br></br></br></p>\n</blockquote>\n<p>So, sorry, no <code>noexcept</code> on the move constructor.</p>\n<p>There is a related <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#2062\" rel=\"nofollow\">Defect Report 2062</a> which is still open, but it goes in the other direction, so to speak, namely that there is at least one <code>noexcept</code> that apparently should not be there, for whatever the rationale of that is\u2026</p>\n<p>It <strong>may</strong> be that the intent is to support callables that have throwing move constructors. But that is just speculation in the direction of rationalization. For example, imagine reallocation of the buffer in a vector of such function objects, where an attempt is made to move the originals, and where in the middle somewhere one of them throws (I think this was the original example by Abrahams et.al). Oh dang, they can't guaranteed be moved back, and neither can we go forward. So the reallocation fails, and the operation that caused the reallocation, fails, <em>with the vector in an invalid state</em>. A requirement of non-throwing move of the callable objects would have supported such general usage of function objects, including optimized vector reallocation (etc.). Which IMHO makes it doubtful that the intent really has been to make this trade-off.</p>\n", "LastEditorUserId": "464581", "LastActivityDate": "2015-05-25T01:24:38.277", "CommentCount": "0", "CreationDate": "2012-11-05T23:10:49.737", "ParentId": "13241806", "Score": "5", "OwnerUserId": "464581", "LastEditDate": "2015-05-25T01:24:38.277"}, "13241806": {"ViewCount": "644", "Body": "<p>I've looked at <a href=\"http://en.cppreference.com/w/cpp/utility/functional/function/function\" rel=\"nofollow\">cppreference.com</a> and they seem to indicate no <code>noexcept</code> specification on <code>std::function(std::function&amp;&amp;)</code>. This seems rather odd to me. Does the standard really not give a nothrow guarantee in this case?</p>\n", "AcceptedAnswerId": "13241868", "Title": "What is the exception specification of std::function's move constructor?", "CreationDate": "2012-11-05T23:04:10.070", "Id": "13241806", "CommentCount": "3", "LastEditDate": "2016-06-27T09:58:15.293", "PostTypeId": "1", "LastEditorUserId": "3919155", "LastActivityDate": "2016-06-27T10:01:47.377", "Score": "6", "OwnerUserId": "298661", "Tags": "<c++><c++11>", "AnswerCount": "3"}});