post_cb({"bq_ids": {"n4140": {"so_30532566_30532566_3": {"length": 9, "quality": 0.9, "section_id": 5944}, "so_30532566_30532566_1": {"length": 11, "quality": 0.9166666666666666, "section_id": 6032}}, "n3337": {"so_30532566_30532566_3": {"length": 8, "quality": 0.8, "section_id": 5715}, "so_30532566_30532566_1": {"length": 11, "quality": 0.9166666666666666, "section_id": 5800}}, "n4659": {"so_30532566_30532566_3": {"length": 9, "quality": 0.9, "section_id": 7429}, "so_30532566_30532566_1": {"length": 10, "quality": 0.8333333333333334, "section_id": 7531}}}, "30532566": {"ViewCount": "74", "Body": "<p>I'm currently studying C++ standard and came to this insane example:</p>\n<pre><code>#include &lt;iostream&gt;\n\nint i = 0;\n\nclass A {\npublic:\n    operator void() {\n        std::cout &lt;&lt; ++i &lt;&lt; std::endl;\n    }\n};\n\nint main() { \n    A a, b;\n    A c = (a, b);\n    static_cast&lt;void&gt;(a);\n    (void) a;\n}\n</code></pre>\n<p>Despite the fact that <code>operator void()</code> has side effects, it is never called (at least nothing is printed to stdout). However <code>operator void()</code> is not disallowed, the only way I found to trigger it is to use volatiles:</p>\n<blockquote>\n<p id=\"so_30532566_30532566_0\"><strong>5.2.9 Static cast [expr.static.cast]</strong></p>\n<p id=\"so_30532566_30532566_1\">[...]\n  Any expression can be explicitly converted to type <em>cv</em> <code>void</code>, in which case it becomes a <em>discarded-value expression</em> (Clause 5).</p>\n<p id=\"so_30532566_30532566_2\"><strong>5  Expressions [expr]</strong></p>\n<p id=\"so_30532566_30532566_3\">[...]\n  The lvalue-to-rvalue conversion (4.1) is applied if and\n  only if the expression is a glvalue of volatile-qualified type and it is one of the following: [...]</p>\n</blockquote>\n<p><sup>As of N3797 draft</sup></p>\n<p>I have tried to add <code>volatile</code> to my code, but nothing printed. </p>\n<p>Is there way to trigger <code>operator void()</code> or it is dead code? Of course question is speculative, no practical use behind it. </p>\n<p>I have checked my example with G++ 4.9 and CLang++ 3.3</p>\n", "Title": "Is conversion `operator void()` allowed?", "CreationDate": "2015-05-29T14:45:41.413", "LastActivityDate": "2015-05-29T14:45:41.413", "CommentCount": "7", "FavoriteCount": "0", "PostTypeId": "1", "ClosedDate": "2015-05-29T14:53:07.327", "Id": "30532566", "Score": "5", "OwnerUserId": "2709018", "Tags": "<c++><type-conversion><language-lawyer>", "AnswerCount": "0"}});