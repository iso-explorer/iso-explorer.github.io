post_cb({"27755143": {"ParentId": "27754697", "CommentCount": "7", "CreationDate": "2015-01-03T13:02:02.977", "OwnerUserId": "2015579", "PostTypeId": "2", "Id": "27755143", "Score": "5", "Body": "<p><code>{}</code> can be used to initialise variables in c++11 in the same way that they are used to initialise arrays and structures in c.</p>\n<p>This has been introduced primarily to provide consistency in language syntax (initialising with <code>{}</code> will work in all contexts, whereas initialising using the assignment operator or <code>()</code> will work in specific contexts.</p>\n<p>There is a further advantage to list initialisation in that it prevents <code>narrowing</code> - i.e. it prevents you from providing an integer when a double is required, or a short when an integer is required. In this way it can help to reduce bugs.</p>\n<p>Note that <code>{}</code> cannot be used to pass values to a function - only to construct new objects.</p>\n<p>The link above is well worth reading (repeated here)\n<a href=\"http://en.cppreference.com/w/cpp/language/list_initialization\" rel=\"noreferrer\">http://en.cppreference.com/w/cpp/language/list_initialization</a></p>\n", "LastActivityDate": "2015-01-03T13:02:02.977"}, "27754697": {"CommentCount": "1", "ViewCount": "519", "CreationDate": "2015-01-03T12:09:29.250", "LastActivityDate": "2015-01-03T14:00:43.783", "Title": "which one should i use and why: {} vs = in c++", "AcceptedAnswerId": "27755143", "PostTypeId": "1", "Id": "27754697", "Score": "0", "Body": "<p>I was watching MVA's(Microsoft Visual Academy's) tutorials and I came across these two operators i.e. <code>{}</code> and <code>=</code> to pass in the value to variables. I have done C programming so I am pretty much aware of the assignment operator <code>=</code>. But <code>{}</code> is not in any language I did so far. </p>\n<p>Kate is teaching the C++ course so she told that <code>{}</code> is used for copying. </p>\n<p>But I was using the operator <code>{}</code> in the class below and it shows some error when I try to do this: </p>\n<pre><code>this-&gt;_width{new_width};\n</code></pre>\n<p>whereas below one works:</p>\n<pre><code>this-&gt;_width = new_width; \n</code></pre>\n<p>Why so? I am also using <code>{}</code> to pass values in constructor but then they work perfectly. Only Problem is with member fucntions.</p>\n<pre><code>class Rectangle\n{\n\npublic:\n     void resize(int new_height, int new_width)  { this-&gt;_width{new_width ; this-&gt;_height{new_height};        //member function\n\n     Rectangle(): _width{} , height{} {}   //constructor\n\nprivate:\n     int _width; \n     int _height; \n\n}; \n</code></pre>\n", "Tags": "<c++>", "OwnerUserId": "4318990", "AnswerCount": "3"}, "27754721": {"ParentId": "27754697", "LastEditDate": "2015-01-03T14:00:43.783", "CommentCount": "2", "CreationDate": "2015-01-03T12:12:18.270", "Score": "1", "LastEditorUserId": "4108963", "PostTypeId": "2", "Id": "27754721", "OwnerUserId": "4108963", "Body": "<p>Non-static data members may be initialized in one of two ways:<br/>\n1) In the member initializer list of the constructor.</p>\n<pre><code>struct S {\n    int n;\n    std::string s;\n    S() : n(7) // direct-initializes n, default-initializes s\n    { }\n};\n</code></pre>\n<p>2) Through a brace-or-equal initializer, which is simply an initializer included in the member declaration, which is used if the member is omitted in the member initializer list</p>\n<pre><code>struct S {\n    int n = 7;\n    std::string s{'a', 'b', 'c'};\n    S() // copy-initializes n, list-initializes s\n    { }\n};\n</code></pre>\n<p>You may use brace initializers in the member declaration.</p>\n<p>Also, from the standard, N4296, \u00a7 9.2, paragraph 4:</p>\n<blockquote>\n<p id=\"so_27754697_27754721_0\">A brace-or-equal-initializer shall appear only in the declaration of\n  a data member.</p>\n</blockquote>\n", "LastActivityDate": "2015-01-03T14:00:43.783"}, "27755262": {"ParentId": "27754697", "LastEditDate": "2015-01-03T13:21:22.760", "CommentCount": "0", "CreationDate": "2015-01-03T13:15:36.370", "Score": "0", "LastEditorUserId": "572743", "PostTypeId": "2", "Id": "27755262", "OwnerUserId": "572743", "Body": "<p>Using <code>{}</code> is called <strong>uniform initialization</strong> in this context. It was introduced mainly for two reasons.</p>\n<p>First, as the name indicates, initialization is uniform, that is it looks and works the same for single objects, arrays, containers that accept initializer lists, etc.</p>\n<p>Second, and equally important, it is impossible to get a <a href=\"http://en.wikipedia.org/wiki/Most_vexing_parse\" rel=\"nofollow\">most vexing parse</a> using curly braces, which is quite possible unintentionally otherwise:</p>\n<pre><code>A a(); // What does this do? What was probably intended?\nB b{}; // And what does this do?\n</code></pre>\n<p>Also, as a bonus (kudos to @Richard Hodges), you avoid narrowing conversions using uniform initialization.</p>\n<p>To literally answer the question \"which one should I use?\", you should preferrably use <code>{}</code> as it has only advantages, and no disadvantages (plus, Bjarne Stroustrup recommends using it).</p>\n", "LastActivityDate": "2015-01-03T13:21:22.760"}, "bq_ids": {"n4140": {"so_27754697_27754721_0": {"section_id": 5864, "quality": 1.0, "length": 5}}, "n4659": {"so_27754697_27754721_0": {"section_id": 7347, "quality": 1.0, "length": 5}}}});