post_cb({"bq_ids": {"n4140": {"so_46309148_46309425_0": {"length": 39, "quality": 0.975, "section_id": 6028}}, "n3337": {"so_46309148_46309425_0": {"length": 39, "quality": 0.975, "section_id": 5796}}, "n4659": {"so_46309148_46309425_0": {"length": 31, "quality": 0.775, "section_id": 7527}}}, "46309148": {"ViewCount": "63", "Body": "<p>Is is possible to overload a reference cast in C++?</p>\n<p>I've got code I can't touch in the format:</p>\n<pre><code>void someMethod(Parent&amp; parentReference, ...){\n    ...\n    Child&amp; child = static_cast&lt;Child&amp;&gt;(parentReference);\n</code></pre>\n<p>(The class Child inherits directly and publicly from the class Parent)</p>\n<p>I'd like to adjust the behavior of this cast - I can modify the class Child.<br>\nI've tried overloading the cast operator like so:</br></p>\n<pre><code>Parent::operator Child&amp;(){\n    ...\n</code></pre>\n<p>But this method never gets called.</p>\n<p>I'm starting to wonder if this is even possible?</p>\n<p><strong>EDIT</strong><br>\nPer R Sahu, I'm close to this scenario:\n<a href=\"https://timsong-cpp.github.io/cppwp/n3337/expr.static.cast#2\" rel=\"nofollow noreferrer\">https://timsong-cpp.github.io/cppwp/n3337/expr.static.cast#2</a></br></p>\n<pre><code>struct B { };\nstruct D : public B { };\nD d;\nB &amp;br = d;\n\nstatic_cast&lt;D&amp;&gt;(br);            // produces lvalue to the original d object\n</code></pre>\n<p>Except that instead of simply assigning <code>B &amp;br = d;</code>, <code>br</code> comes into the method as an argument, and is previously sent over the network (as NML). </p>\n<p>This would be the scenario:</p>\n<pre><code>struct B { };\nstruct D : public B { \n   int a;\n   int b\n};\n\nD d;\nd.a = x;\nd.b = y;\n\nserver.send(d); \n\n...\n\nclient.receive(msg);\n\nreceive(B&amp; msg){\n\n  D&amp; msgD = static_cast&lt;D&amp;&gt;(msg);\n\n}\n</code></pre>\n<p><code>msgD.x</code> and <code>msgD.y</code> come over the wire and are reconstructed properly.  However, I would like to change the way they are reconstructed, without modifying the <code>receive</code> method.  Is this possible?</p>\n", "Title": "Overload a C++ reference cast (downcasting inheritance)", "CreationDate": "2017-09-19T20:20:38.283", "LastActivityDate": "2017-09-21T14:33:49.250", "CommentCount": "4", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2017-09-21T14:33:49.250", "LastEditorUserId": "1100000", "Id": "46309148", "Score": "1", "OwnerUserId": "1100000", "Tags": "<c++><inheritance><casting><downcasting><static-cast>", "AnswerCount": "1"}, "46309425": {"Id": "46309425", "PostTypeId": "2", "Body": "<p>Given classes </p>\n<pre><code>struct Parent\n{\n};\n\nstruct Child : Parent\n{\n};\n</code></pre>\n<p><code>static_cast&lt;Child&amp;&gt;</code> will not use a user defined conversion function.</p>\n<p>From <a href=\"https://timsong-cpp.github.io/cppwp/n3337/expr.static.cast#2\" rel=\"nofollow noreferrer\">5.2.9 Static cast/2</a></p>\n<blockquote>\n<p id=\"so_46309148_46309425_0\">An lvalue of type \u201ccv1 B,\u201d where B is a class type, can be cast to type \u201creference to cv2 D,\u201d where D is a class derived from B, if a valid standard conversion from \u201cpointer to D\u201d to \u201cpointer to B\u201d exists , cv2 is the same cv-qualification as, or greater cv-qualification than, cv1, and B is neither a virtual base class of D nor a base class of a virtual base class of D. The result has type \u201ccv2 D.\u201d</p>\n</blockquote>\n<p>and then there are the \"otherwise\" clauses in <a href=\"https://timsong-cpp.github.io/cppwp/n3337/expr.static.cast#4\" rel=\"nofollow noreferrer\">5.2.9 Static cast/4</a> and <a href=\"https://timsong-cpp.github.io/cppwp/n3337/expr.static.cast#5\" rel=\"nofollow noreferrer\">5.2.9 Static cast/5</a>.</p>\n<p>My interpretation of the above is that since <code>Child</code> is a sub-type of <code>Parent</code>, the clauses 4 and 5 above don't apply.</p>\n", "LastEditorUserId": "434551", "LastActivityDate": "2017-09-19T20:51:13.997", "Score": "0", "CreationDate": "2017-09-19T20:40:43.933", "ParentId": "46309148", "CommentCount": "3", "OwnerUserId": "434551", "LastEditDate": "2017-09-19T20:51:13.997"}});