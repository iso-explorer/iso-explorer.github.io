post_cb({"bq_ids": {"n4140": {"so_26951779_26953869_0": {"length": 24, "quality": 0.8888888888888888, "section_id": 5451}}, "n4659": {"so_26951779_26953869_0": {"length": 14, "quality": 0.5185185185185185, "section_id": 6890}}}, "26953869": {"PostTypeId": "2", "OwnerDisplayName": "user3920237", "LastActivityDate": "2014-11-16T04:45:59.210", "CommentCount": "0", "Id": "26953869", "CreationDate": "2014-11-16T04:45:59.210", "ParentId": "26951779", "Score": "2", "Body": "<p>The feature you're trying to use is called a generic (polymorphic) lambda expression from <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3649.html\" rel=\"nofollow\">N3649</a> and the <a href=\"https://software.intel.com/en-us/articles/c14-features-supported-by-intel-c-compiler\" rel=\"nofollow\">table</a> you linked shows that support has not been added yet. However, the feature(s) you <em>think</em> you're using, \"decltype(auto), return type deduction for normal functions\" from <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3638.html\" rel=\"nofollow\">N3638</a> do have support.</p>\n<p>A generic lambda looks like:</p>\n<pre><code>[](auto a) { return a; }\n</code></pre>\n<p>Return type deduction for normal functions looks like:</p>\n<pre><code>auto func() { return 42; } // deduced to be int\n</code></pre>\n<p>The semantics for <code>decltype(auto)</code> are described in the following example from n3638:</p>\n<blockquote>\n<p id=\"so_26951779_26953869_0\">If the placeholder is the decltype(auto) type-specifier, the declared\n  type of the variable or return type of the function shall be the\n  placeholder alone. The type deduced for the variable or return type is\n  determined as described in 7.1.6.2, as though the initializer had been\n  the operand of the decltype. [ Example:</p>\n<pre><code>int i;\nint&amp;&amp; f();\nauto           x3a = i;        // decltype(x3a) is int\ndecltype(auto) x3d = i;        // decltype(x3d) is int\nauto           x4a = (i);      // decltype(x4a) is int\ndecltype(auto) x4d = (i);      // decltype(x4d) is int&amp;\nauto           x5a = f();      // decltype(x5a) is int\ndecltype(auto) x5d = f();      // decltype(x5d) is int&amp;&amp;\nauto           x6a = { 1, 2 }; // decltype(x6a) is std::initializer_list&lt;int&gt;\ndecltype(auto) x6d = { 1, 2 }; // error, { 1, 2 } is not an expression\nauto          *x7a = &amp;i;       // decltype(x7a) is int*\ndecltype(auto)*x7d = &amp;i;       // error, declared type is not plain decltype(auto)\n</code></pre>\n<p id=\"so_26951779_26953869_1\">\u2014 end example ]</p>\n</blockquote>\n"}, "26951779": {"ViewCount": "443", "Body": "<p>I'm using Intel C++ Compiler version 15.0.0.108 Build 20140726 and I can't use some C++14 features like \"decltype(auto), return type deduction for normal functions\" declared support in <a href=\"https://software.intel.com/en-us/articles/c14-features-supported-by-intel-c-compiler\" rel=\"nofollow\">here</a></p>\n<p>If I do something like:</p>\n<pre><code>std::for_each(vector.begin(), vector.end(), [] (auto value) {});\n</code></pre>\n<p>Then I got this error:</p>\n<blockquote>\n<p id=\"so_26951779_26951779_0\">error: \"auto\" is not allowed here</p>\n</blockquote>\n<p>I'm compiling using this:</p>\n<pre><code>icl /FA /EHs program.cpp\n</code></pre>\n", "AcceptedAnswerId": "26953869", "Title": "Enable C++14 Intel Compiler", "CreationDate": "2014-11-15T23:02:45.253", "Id": "26951779", "CommentCount": "5", "PostTypeId": "1", "LastActivityDate": "2014-11-16T04:45:59.210", "Score": "0", "OwnerUserId": "3996275", "Tags": "<c++><intel><c++14>", "AnswerCount": "1"}});