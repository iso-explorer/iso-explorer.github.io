post_cb({"bq_ids": {"n4140": {"so_21447243_21447284_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 6005}}, "n3337": {"so_21447243_21447284_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 5773}}, "n4659": {"so_21447243_21447284_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 7504}}}, "21447256": {"Id": "21447256", "PostTypeId": "2", "Body": "<p><code>a-&gt;b</code> is equivalent to <code>(*a).b</code>. What exactly do you expect to happen when you say <code>a-&gt;[b]</code> and it translates to <code>(*a).[b]</code>?</p>\n", "LastActivityDate": "2014-01-30T03:28:49.353", "Score": "2", "CreationDate": "2014-01-30T03:28:49.353", "ParentId": "21447243", "CommentCount": "0", "OwnerUserId": "857012"}, "21447290": {"Id": "21447290", "PostTypeId": "2", "Body": "<p>You have to call the <code>operator[]</code> member function directly, something like:</p>\n<pre><code>this-&gt;operator[](i)\n</code></pre>\n", "LastActivityDate": "2014-01-30T03:31:51.880", "Score": "7", "CreationDate": "2014-01-30T03:31:51.880", "ParentId": "21447243", "CommentCount": "1", "OwnerUserId": "1312406"}, "21447284": {"Id": "21447284", "PostTypeId": "2", "Body": "<p>That is not correct, if we look at the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3485.pdf\" rel=\"nofollow\">draft C++ standard</a> we can see that <code>E1-&gt;E2</code> is equivalent to <code>(*(E1)).E2</code> and not <code>(*E1)E2</code>, this is covered in section <code>5.2.5</code> <em>Class member access</em> paragraph <em>2</em>:</p>\n<blockquote>\n<p id=\"so_21447243_21447284_0\">[...]The expression E1-&gt;E2 is converted to the equivalent form (*(E1)).E2;[...]</p>\n</blockquote>\n<p>so what follows <code>-&gt;</code> has to be a member of the class(<em>or a base class</em>), so in this case that would be <code>operator[]</code>:</p>\n<pre><code>this-&gt;operator[](i)\n</code></pre>\n", "LastEditorUserId": "1708801", "LastActivityDate": "2014-01-30T03:47:34.353", "Score": "2", "CreationDate": "2014-01-30T03:31:20.550", "ParentId": "21447243", "CommentCount": "0", "LastEditDate": "2014-01-30T03:47:34.353", "OwnerUserId": "1708801"}, "21447243": {"ViewCount": "77", "Body": "<p>I'm playing around with composition, and in one of my classes I have a wrapper around the subscript operator \"[ ]\" (from std::vector). However, the compiler (g++) gets mad when I say <code>this-&gt;[i]</code>. I've worked around this issue by using <code>(*this)[i]</code> instead, but I thought these were synonyms. What am I missing? Here is a small sample code that throws the error (I'm purposely avoiding iterators in <code>newmethod</code> just to simply illustrate my problem).</p>\n<pre><code>#include &lt;vector&gt;\n#include &lt;iostream&gt;\n\nclass A {\n  private:\n    std::vector&lt;int&gt; rep;\n  public:\n    std::size_t size() { return rep.size(); }\n    int&amp; operator[](std::size_t index) { return rep[index]; }\n    void newmethod();\n\n    A(size_t n, int m) : rep(n,m) {}\n};\n\nvoid A::newmethod() {\n  for (std::size_t i=0; i &lt; (this-&gt;size()); ++i) {\n    std::cout &lt;&lt; (*this)[i] &lt;&lt; \" \";\n  }\n  for (std::size_t i=0; i &lt; (this-&gt;size()); ++i) {\n    std::cout &lt;&lt; this-&gt;[i]; &lt;&lt; \" \"; //Causes an error!\n  }\n  return;\n}\n\nint main() {\n  A(17,3).newmethod();\n  return 0;\n}\n</code></pre>\n", "AcceptedAnswerId": "21447290", "Title": "Why can't I use \"->\" with \"this\" and \"[ ]\"?", "CreationDate": "2014-01-30T03:27:10.887", "Id": "21447243", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2014-01-30T03:47:34.353", "Score": "1", "OwnerUserId": "3183244", "Tags": "<c++><oop><pointers>", "AnswerCount": "3"}});