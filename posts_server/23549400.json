post_cb({"23549400": {"CommentCount": "4", "AcceptedAnswerId": "23551597", "PostTypeId": "1", "LastEditorUserId": "241631", "CreationDate": "2014-05-08T18:07:58.720", "LastActivityDate": "2014-05-08T20:12:19.353", "LastEditDate": "2014-05-08T19:36:28.583", "ViewCount": "6184", "FavoriteCount": "1", "Title": "error: call to implicitly-deleted copy constructor of 'Cadena'", "Id": "23549400", "Score": "2", "Body": "<p>i have the next errors when i try to compile my code:</p>\n<blockquote id=\"so_23549400_23549400_0\">\n<pre><code>./usuario.h:64:37: error: call to implicitly-deleted copy constructor of 'Cadena'\n                Cadena direccion() const { return direccion_; }\n                                                  ^~~~~~~~~~\n./../P1/Cadena/cadena.h:11:3: note: copy constructor is implicitly deleted because 'Cadena' has a user-declared move constructor\n                Cadena(Cadena&amp;&amp; c);\n</code></pre>\n</blockquote>\n<pre><code>usuario.cpp:14:3: error: call to implicitly-deleted copy constructor of 'Cadena'\n         nombre_(nombre), apellidos_(apellidos), direccion_(direccion), password_(password){\n         ^       ~~~~~~\n</code></pre>\n<p>The constructors in Cadena are:</p>\n<pre><code>Cadena(const size_t t=0, const char c=' ');\nCadena(Cadena&amp;&amp; c);\nCadena(const char* c);\n</code></pre>\n<p>And the move-constructor:</p>\n<pre><code>Cadena::Cadena(Cadena&amp;&amp; c) : tam_(c.tam_) {\n    cadena_ = new char[tam_+1];\n    strcpy(cadena_, c.cadena_);    \n    c.tam_=0;\n    delete[] c.cadena_;\n    c.cadena_ = new char[1];\n    c.cadena_ = \"\";\n}\n</code></pre>\n<p>The declaration in usuario.h are:</p>\n<pre><code>//........\npublic:\n     Cadena id() const { return id_; }\n//....\nprivate:\n     Cadena direccion_;\n</code></pre>\n<p>The class Cadena is work perfectly, but now i need use it and the compiler drop those errors.\nI think that i don\u00b4t doing nothing special, only return/assign a object of type Cadena..</p>\n<p>I expect yours feedback, </p>\n<p>best regards.</p>\n", "Tags": "<c++><c++11><move-constructor>", "OwnerUserId": "3617538", "AnswerCount": "1"}, "23551597": {"ParentId": "23549400", "CommentCount": "0", "Body": "<p>Just for completeness, the Standard mandates the behavior from your compiler warning:</p>\n<p><strong>12.8 Copying and moving class objects [class.copy]</strong></p>\n<blockquote>\n<p id=\"so_23549400_23551597_0\">7 If the class de\ufb01nition does not explicitly declare a copy\n  constructor, one is declared implicitly. <strong>If the class de\ufb01nition\n  declares a move constructor or move assignment operator, the\n  implicitly declared copy constructor is de\ufb01ned as deleted;</strong> otherwise,\n  it is de\ufb01ned as defaulted (8.4). The latter case is deprecated if the\n  class has a user-declared copy assignment operator or a user-declared\n  destructor.</p>\n</blockquote>\n<p>So if you want copying behavior, you will have to provide a copy constructor and copy assignment operator yourself. </p>\n<p>However, looking at your move constructor, it appears that this doesn't provide any move semantics but rather deep copying (hint: what does <code>strcopy()</code> do? it sure doesn't move). So I would rename your current move constructor to the copy constructor, and provide a new move constructor that actually moves (i.e. re-assigns the <code>char</code> pointer or whatever is the handle to the actual data in your class).</p>\n", "OwnerUserId": "819272", "PostTypeId": "2", "Id": "23551597", "Score": "3", "CreationDate": "2014-05-08T20:12:19.353", "LastActivityDate": "2014-05-08T20:12:19.353"}, "bq_ids": {"n4140": {"so_23549400_23551597_0": {"section_id": 456, "quality": 0.8421052631578947, "length": 32}}, "n3337": {"so_23549400_23551597_0": {"section_id": 447, "quality": 0.8421052631578947, "length": 32}}, "n4659": {"so_23549400_23551597_0": {"section_id": 479, "quality": 0.8421052631578947, "length": 32}}}});