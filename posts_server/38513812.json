post_cb({"bq_ids": {"n4140": {"so_38513812_38516575_0": {"length": 11, "quality": 0.6470588235294118, "section_id": 5551}}, "n4659": {"so_38513812_38516575_0": {"length": 17, "quality": 1.0, "section_id": 6990}}}, "38513812": {"ViewCount": "1743", "LastEditDate": "2016-07-22T02:35:23.027", "AcceptedAnswerId": "38516575", "Title": "do I put [[maybe unused]] on function declarations or definitions?", "CreationDate": "2016-07-21T20:30:37.660", "LastActivityDate": "2016-07-29T20:28:50.550", "CommentCount": "5", "Body": "<p>C++17 introduces the attribute <a href=\"http://en.cppreference.com/w/cpp/language/attributes\" rel=\"noreferrer\">[[maybe_unused]]</a>.<br>\nI assume this a standardized version of GCC and Clang's:    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-3.2/gcc/Function-Attributes.html\" rel=\"noreferrer\">__attribute__((unused))</a>.</br></p>\n<p>For unused functions that I don't want to see a warning from,<br>\nshould I be specifying the attribute on   </br></p>\n<p><em>function declarations?</em> </p>\n<pre><code>void maybe_used_function() [[maybe_unused]];\n</code></pre>\n<p>or <em>function definitions?</em> </p>\n<pre><code>void maybe_used_function() [[maybe_unused]] {\n  /* impl */\n}\n</code></pre>\n<p>Either one?  Both?<br>\nWill the effect be the same on both the standardized and compiler specific attributes?<br>\nI can't find any clear documentation on placement behaviour, and what the common practice is.  </br></br></p>\n<hr>\n<p>When I place the attribute before the function body in a definition, GCC and clang give an error:  </p>\n<pre><code>void function();\nint main(){}\nvoid function() __attribute__((unused)) {}  \n</code></pre>\n<p><strong>warning: GCC does not allow 'unused' attribute in this position\n      on a function definition [-Wgcc-compat]\nvoid function() __attribute__((unused)) {</strong></p>\n<hr>\n<p>However, the attribute can be placed in two other places without error:  </p>\n<pre><code>__attribute__((unused)) void __attribute__((unused)) function() {}\n</code></pre>\n<p>Maybe one of these ways is how I'm expected to use the attribute on function definitions?</p>\n</hr></hr>", "PostTypeId": "1", "LastEditorUserId": "908939", "Id": "38513812", "AnswerCount": "2", "Score": "8", "OwnerUserId": "908939", "Tags": "<c++><gcc><clang><pragma><c++1z>", "FavoriteCount": "1"}, "38516575": {"Id": "38516575", "PostTypeId": "2", "LastEditDate": "2016-07-29T20:28:50.550", "CommentCount": "0", "LastEditorUserId": "636019", "LastActivityDate": "2016-07-29T20:28:50.550", "CreationDate": "2016-07-22T00:54:38.897", "ParentId": "38513812", "Score": "5", "Body": "<p>From N4606, [dcl.attr.unused]\u00b64:  </p>\n<blockquote>\n<p id=\"so_38513812_38516575_0\">A name or entity declared without the <code>maybe_unused</code> attribute can later be redeclared with the attribute and vice versa. An entity is considered marked after the first declaration that marks it.</p>\n</blockquote>\n<p>Since a function definition is a declaration ([dcl.dcl]\u00b61), this means you can put it in either place and it will behave the same.</p>\n<p>(It makes sense to be allowed in both places since the attribute only actually affects the <em>definition</em>, but because the attribute can serve as self-documentation it is also <em>permitted</em> on the declaration.)</p>\n", "OwnerUserId": "636019"}, "38517349": {"Id": "38517349", "PostTypeId": "2", "LastEditDate": "2017-05-23T12:02:51.580", "CommentCount": "0", "LastEditorUserId": "-1", "LastActivityDate": "2016-07-22T02:47:19.130", "CreationDate": "2016-07-22T02:47:19.130", "ParentId": "38513812", "Score": "16", "Body": "<p>Neither.\nIn</p>\n<pre><code>[[attr1]] void [[attr2]] f [[attr3]] () [[attr4]] {}\n</code></pre>\n<ul>\n<li><code>attr1</code> and <code>attr3</code> appertain (or apply) to <code>f</code> itself.</li>\n<li><code>attr2</code> appertains to the preceding type, <code>void</code>.</li>\n<li><code>attr4</code> appertains to <code>f</code>'s type (\"function of <code>()</code> returning <code>void</code>), not <code>f</code>.</li>\n</ul>\n<p>You want <code>maybe_unused</code> to appertain to <code>f</code>, so you can put it in position 1 or 3, but not 2 or 4.</p>\n<p><a href=\"https://stackoverflow.com/a/38516575/2756719\">@ildjarn's answer</a> covers the rest.</p>\n<p>For GCC's <code>__attribute__</code>, you'll have to check its documentation.</p>\n", "OwnerUserId": "2756719"}});