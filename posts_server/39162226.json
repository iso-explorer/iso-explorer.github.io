post_cb({"39162226": {"CommentCount": "2", "AcceptedAnswerId": "39162297", "PostTypeId": "1", "LastEditorUserId": "519836", "CreationDate": "2016-08-26T08:52:44.400", "LastActivityDate": "2016-08-26T13:52:48.350", "LastEditDate": "2016-08-26T09:33:58.800", "ViewCount": "105", "FavoriteCount": "1", "Title": "C++: override or overload?", "Id": "39162226", "Score": "1", "Body": "<p>I have two classes representing contexts for some methods.</p>\n<pre><code>class BaseContext {};\nclass DerivedContext : public BaseContext {};\n</code></pre>\n<p>I have a base class:</p>\n<pre><code>class MyBase {\nprotected:\n  virtual void doSome(BaseContext* context);\n};\n</code></pre>\n<p>And a derived class:</p>\n<pre><code>class MyDerived : public MyBase {\nprotected:\n  virtual void doSome(DerivedContext* context) override; // Overriding\n  virtual void doSome(DerivedContext* context); // Overloading?\n};\n</code></pre>\n<p>Since <code>DerivedContext</code> derives from <code>BaseContext</code>, it might seems that I am overriding <code>doSome</code>. But it might also be an overloading...</p>\n<ol>\n<li>Which one is correct? Am I overriding or overloading here?</li>\n<li>Thus, if I type <code>(MyBase* my = new MyDerived())-&gt;doSome(new DerivedContext())</code>, what should I get?</li>\n</ol>\n", "Tags": "<c++><overloading><override>", "OwnerUserId": "519836", "AnswerCount": "3"}, "39162297": {"ParentId": "39162226", "PostTypeId": "2", "CommentCount": "8", "Body": "<p>This is neither overriding nor overloading. Since the parameter's type is different, <code>MyDerived::doSome</code> is just <em>hiding</em> <code>MyBase::doSome</code>.</p>\n<blockquote>\n<p id=\"so_39162226_39162297_0\">1.1. Since <code>DerivedContext</code> derives from <code>BaseContext</code>, it might seems that I am overriding <code>doSome</code>. </p>\n</blockquote>\n<p>No. Here're the preconditions of overriding listed in the standard. <a href=\"http://eel.is/c++draft/class.virtual#2\" rel=\"nofollow\">$10.3/2 Virtual functions\n[class.virtual]</a>:</p>\n<p>(emphasis mine)</p>\n<blockquote>\n<p id=\"so_39162226_39162297_1\">If a virtual member function <code>vf</code> is declared in a class <code>Base</code> and in a class <code>Derived</code>, derived directly or indirectly from <code>Base</code>, a member function <code>vf</code> with the same name, <strong>parameter-type-list</strong> ([dcl.fct]), cv-qualification, and ref-qualifier (or absence of same) as <code>Base::vf</code> is declared, then <code>Derived::vf</code> is also virtual (whether or not it is so declared) and it <strong>overrides</strong><a href=\"http://eel.is/c++draft/class.virtual#footnote-110\" rel=\"nofollow\"><sup>110</sup></a> <code>Base::vf</code>.</p>\n<p id=\"so_39162226_39162297_2\"><a href=\"http://eel.is/c++draft/class.virtual#footnote-110\" rel=\"nofollow\">110)</a> A function with the same name but a different parameter list (Clause [over]) as a virtual function is not necessarily virtual and <strong>does not override</strong>.</p>\n</blockquote>\n<p>In fact with <a href=\"http://en.cppreference.com/w/cpp/language/override\" rel=\"nofollow\">override specifier</a> you'll get a <a href=\"http://rextester.com/AZIOB20883\" rel=\"nofollow\">compile error</a> for this case. e.g.</p>\n<pre><code>error: 'doSome' marked 'override' but does not override any member functions\n</code></pre>\n<blockquote>\n<p id=\"so_39162226_39162297_3\">1.2. But it might also be an overloading...</p>\n</blockquote>\n<p>You <a href=\"http://rextester.com/MFT62301\" rel=\"nofollow\">can't overload</a> functions across scopes according to the rule of <a href=\"http://en.cppreference.com/w/cpp/language/unqualified_lookup\" rel=\"nofollow\">unqualified name lookup</a> (unless using <a href=\"http://en.cppreference.com/w/cpp/language/namespace#Using-declarations\" rel=\"nofollow\">using-declaration</a> to introduce names into the same scope).</p>\n<blockquote id=\"so_39162226_39162297_4\">\n<ol start=\"2\">\n<li>Thus, if I type <code>(MyBase* my = new MyDerived())-&gt;doSome(new DerivedContext())</code>, what should I get?</li>\n</ol>\n</blockquote>\n<p><code>MyBase::doSome()</code> will be invoked since you call it on a <code>MyBase*</code>. This is not overriding, so no dynamic dispatching happens here. </p>\n<p><a href=\"http://rextester.com/RMZ12032\" rel=\"nofollow\">LIVE</a></p>\n<p><sup>Note the argument <code>DerivedContext*</code> will be implicitly converted to <code>BaseContext*</code> and then passed to the function. BTW <code>(MyBase* my = new MyDerived())-&gt;...</code> is not valid syntax.</sup></p>\n", "OwnerUserId": "3309790", "LastEditorUserId": "3309790", "LastEditDate": "2016-08-26T13:37:49.273", "Id": "39162297", "Score": "4", "CreationDate": "2016-08-26T08:57:04.490", "LastActivityDate": "2016-08-26T13:37:49.273"}, "39162314": {"ParentId": "39162226", "CommentCount": "0", "Body": "<p>Just put override after the function definition and see if it compiles. If it compiles, it is overriding the virtual method in the base class. If it does not, it would <em>hide</em> the base class method.</p>\n", "OwnerUserId": "3495086", "PostTypeId": "2", "Id": "39162314", "Score": "0", "CreationDate": "2016-08-26T08:57:58.533", "LastActivityDate": "2016-08-26T08:57:58.533"}, "bq_ids": {"n4140": {"so_39162226_39162297_1": {"section_id": 7003, "quality": 0.9375, "length": 30}, "so_39162226_39162297_2": {"section_id": 7003, "quality": 0.875, "length": 14}}, "n3337": {"so_39162226_39162297_1": {"section_id": 6749, "quality": 0.9375, "length": 30}, "so_39162226_39162297_2": {"section_id": 6749, "quality": 0.875, "length": 14}}, "n4659": {"so_39162226_39162297_1": {"section_id": 8500, "quality": 0.9375, "length": 30}, "so_39162226_39162297_2": {"section_id": 8500, "quality": 0.875, "length": 14}}}, "39162365": {"ParentId": "39162226", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>While only specifying the member function with another argument type, you are hiding the function from the base class.<br>\nWith the <code>override</code> specifier you should get a compile error as there is no such function (with the exact same signature) in the base class.</br></p>\n<p><strong>Overriding</strong> is when <em>redefining</em> virtual a member function in a derived class with the <em>exact same arguments</em> (number <em>and</em> type). The <code>override</code> specifier is optional but encouraged as it helps identifying subtle bugs as in your case.</p>\n<p><strong>Overloading</strong> is when defining a function (not necessarily member of a class) with a different number or types of arguments.</p>\n", "OwnerUserId": "588243", "LastEditorUserId": "588243", "LastEditDate": "2016-08-26T13:52:48.350", "Id": "39162365", "Score": "1", "CreationDate": "2016-08-26T09:00:22.860", "LastActivityDate": "2016-08-26T13:52:48.350"}});