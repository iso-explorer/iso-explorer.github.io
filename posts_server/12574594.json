post_cb({"12574607": {"ParentId": "12574594", "CommentCount": "0", "Body": "<p>Your compiler is out of date. Upgrade it and you should find a <code>std::string</code> constructor.</p>\n", "OwnerUserId": "298661", "PostTypeId": "2", "Id": "12574607", "Score": "0", "CreationDate": "2012-09-25T00:06:40.110", "LastActivityDate": "2012-09-25T00:06:40.110"}, "12574594": {"CommentCount": "0", "ViewCount": "1453", "PostTypeId": "1", "ClosedDate": "2012-09-25T09:03:32.090", "LastEditorUserId": "-1", "CreationDate": "2012-09-25T00:04:58.513", "LastActivityDate": "2012-09-25T00:06:40.110", "Title": "Why does std::ifstream constructor not take a std::string?", "AcceptedAnswerId": "12574606", "LastEditDate": "2017-05-23T11:50:45.117", "Id": "12574594", "Score": "0", "Body": "<blockquote>\n<p id=\"so_12574594_12574594_0\"><strong>Possible Duplicate:</strong><br>\n<a href=\"https://stackoverflow.com/questions/4640281/design-of-stdifstream-class\">Design of std::ifstream class</a><br>\n<a href=\"https://stackoverflow.com/questions/5972151/why-does-iofstream-take-a-const-char-parameter-for-a-file-name\">Why does (i|o)fstream take a const char* parameter for a file name?</a> </br></br></p>\n</blockquote>\n<p>Looking at std::ifstream's constructors, I find two:</p>\n<pre><code>ifstream ( );\nexplicit ifstream ( const char * filename, ios_base::openmode mode = ios_base::in );\n</code></pre>\n<p>Why does the second one take a <code>const char *</code> and not a <code>const std::string &amp;</code>?</p>\n<p>Is this some kind of avoidance of circularity or forward reference?</p>\n", "Tags": "<c++><string><constructor><std><ifstream>", "OwnerUserId": "115751", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_12574594_12574606_0": {"section_id": 2457, "quality": 1.0, "length": 6}}, "n3337": {"so_12574594_12574606_0": {"section_id": 2442, "quality": 1.0, "length": 6}}, "n4659": {"so_12574594_12574606_0": {"section_id": 2733, "quality": 1.0, "length": 6}}}, "12574606": {"ParentId": "12574594", "CommentCount": "0", "Body": "<p>It was a simple omission. Nobody thought about it in time. This has been corrected in C++11, where <code>std::string</code> is also accepted. From 27.9.1.7/3:</p>\n<blockquote>\n<p id=\"so_12574594_12574606_0\"><code>explicit basic_ifstream(const string&amp; s, ios_base::openmode mode = ios_base::in);</code></p>\n<p id=\"so_12574594_12574606_1\"><em>Effects:</em> the same as <code>basic_ifstream(s.c_str(), mode)</code>.</p>\n</blockquote>\n", "OwnerUserId": "596781", "PostTypeId": "2", "Id": "12574606", "Score": "5", "CreationDate": "2012-09-25T00:06:25.663", "LastActivityDate": "2012-09-25T00:06:25.663"}});