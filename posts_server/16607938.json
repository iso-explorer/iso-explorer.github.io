post_cb({"bq_ids": {"n4140": {"so_16607938_16607953_3": {"length": 5, "quality": 0.8333333333333334, "section_id": 3906}}, "n3337": {"so_16607938_16607953_3": {"length": 5, "quality": 0.8333333333333334, "section_id": 3766}}, "n4659": {"so_16607938_16607953_3": {"length": 4, "quality": 0.6666666666666666, "section_id": 4792}}}, "16607953": {"Id": "16607953", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_16607938_16607953_0\">I wonder if I it would make any performance difference to use the code below instead</p>\n</blockquote>\n<p>As always, when it comes to performance, you should back up your assumptions with measurements. </p>\n<p>No other proof than clear measurements indicating that you have a bottleneck in that particular routine should be a reason for abandoning a clearer, simpler design in favor of a more complex, less intuitive one. That would be, by definition, <em>premature optimization</em>.</p>\n<p>Therefore, <strong>choose the form that best communicates its intent for you</strong>. This said, I can answer the following question:</p>\n<blockquote>\n<p id=\"so_16607938_16607953_1\">Would <code>get_elements()</code> get called every iteration or just once?</p>\n</blockquote>\n<p><strong>No</strong>, it would get called only once. This behavior is mandated by paragraph 6.5.4/1 of the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_16607938_16607953_2\">For a range-based for statement of the form</p>\n<pre><code>for ( for-range-declaration : expression ) statement\n</code></pre>\n<p id=\"so_16607938_16607953_3\">let <code>range-init</code> be equivalent to the expression surrounded by parentheses</p>\n<pre><code>( expression )\n</code></pre>\n<p id=\"so_16607938_16607953_4\">[...] a range-based for statement is equivalent\n  to</p>\n<pre><code>{\n    auto &amp;&amp; __range = range-init; // &lt;== HERE IS YOUR get_elements()!\n    for ( auto __begin = begin-expr,\n        __end = end-expr;    \n        __begin != __end;\n        ++__begin ) {\n            for-range-declaration = *__begin;\n            statement\n        }\n    }\n</code></pre>\n</blockquote>\n<p>Regarding your second question:</p>\n<blockquote>\n<p id=\"so_16607938_16607953_5\">Moreover, how about traditional for loops?</p>\n</blockquote>\n<p>Those are just less clear about the purpose of the loop itself, and more error-prone. I would suggest avoiding manual loops. </p>\n<p>For instance, just by looking at its first line, it is evident that the purpose of a range-based <code>for</code> loop is to iterate through all the elements of a collection. </p>\n<p>The same is not evident for a manually unrolled <code>for</code> loop, where just by looking at the first line, you do not know whether the <code>i</code> variable will be incremented or manipulated anyhow inside the loop.</p>\n<p>This is nicely discussed in <a href=\"http://herbsutter.com/2013/05/16/gotw-3-solution-using-the-standard-library-or-temporaries-revisited/?utm_source=tf&amp;utm_medium=t\" rel=\"nofollow\">this article by Herb Sutter</a> (see the solution to Question 2-a).</p>\n", "LastEditorUserId": "1932150", "LastActivityDate": "2013-05-17T11:43:45.920", "Score": "2", "CreationDate": "2013-05-17T11:33:11.083", "ParentId": "16607938", "CommentCount": "0", "LastEditDate": "2013-05-17T11:43:45.920", "OwnerUserId": "1932150"}, "16607938": {"ViewCount": "54", "Body": "<p>Normally, I would write code like that.</p>\n<pre><code>auto elements = get_elements();\nfor(auto i : elements)\n{\n    // ...\n}\n</code></pre>\n<p>I wonder if I it would make any performance difference to use the code below instead. Would <code>get_elements()</code> get called every iteration or just once?</p>\n<pre><code>for(auto i : get_elements())\n{\n    // ...\n}\n</code></pre>\n<p>Moreover, how about traditional for loops? If I don't modify the elements I loop over, would the compiler optimize that code to not call <code>get_elements()</code> every iteration?</p>\n<pre><code>for(auto i = get_elements().begin(); i != get_elements().end(); ++i)\n{\n    // ...\n}\n</code></pre>\n", "AcceptedAnswerId": "16607953", "Title": "Would this code fetch the elements every iteration?", "CreationDate": "2013-05-17T11:32:25.080", "Id": "16607938", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2013-05-17T11:43:45.920", "Score": "2", "OwnerUserId": "1079110", "Tags": "<c++><performance><loops><call><iteration>", "AnswerCount": "1"}});