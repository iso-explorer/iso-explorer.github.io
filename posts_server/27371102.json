post_cb({"bq_ids": {"n4140": {"so_27371102_27371352_0": {"length": 21, "quality": 0.9545454545454546, "section_id": 7093}}, "n3337": {"so_27371102_27371352_0": {"length": 21, "quality": 0.9545454545454546, "section_id": 6837}}, "n4659": {"so_27371102_27371352_0": {"length": 21, "quality": 0.9545454545454546, "section_id": 8594}}}, "27371102": {"ViewCount": "368", "Body": "<p>For example</p>\n<pre><code>struct A\n{\n    auto count() -&gt; decltype(m_count) { return m_count; }\n    int m_count;        \n};\n</code></pre>\n<p>The above gets compilation error because m_count in <code>decltype</code> is not recognized. How to work around it? <code>auto</code> return and get the type from <code>m_count</code> must be used.</p>\n<p>The code compiles when the order is changed</p>\n<pre><code>struct A\n{\n    int m_count;        \n    auto count() -&gt; decltype(m_count) { return m_count; }\n};\n</code></pre>\n<p>but how do I get the first case to work?</p>\n", "AcceptedAnswerId": "27371244", "Title": "How to use auto return and decltype when class members involved with c++11?", "CreationDate": "2014-12-09T03:47:24.720", "LastActivityDate": "2014-12-09T04:22:39.787", "CommentCount": "3", "LastEditDate": "2014-12-09T04:09:22.863", "PostTypeId": "1", "Tags": "<c++><c++11><auto><decltype><trailing-return-type>", "Id": "27371102", "AnswerCount": "2", "Score": "0", "OwnerUserId": "1899020", "ClosedDate": "2017-03-02T10:44:58.500", "LastEditorUserId": "241631"}, "27371244": {"Id": "27371244", "PostTypeId": "2", "Body": "<p>In C++, you can't use a name that hasn't been introduced (declared) in a declaration, including in a <code>decltype</code> for a trailing return type. So you must reorder your declarations :</p>\n<pre><code>struct A\n{\n    int m_count;\n    auto count() -&gt; decltype(m_count) { return m_count; }\n};\n</code></pre>\n", "LastEditorUserId": "3510483", "LastActivityDate": "2014-12-09T04:19:49.337", "Score": "2", "CreationDate": "2014-12-09T04:03:23.537", "ParentId": "27371102", "CommentCount": "1", "OwnerUserId": "3510483", "LastEditDate": "2014-12-09T04:19:49.337"}, "27371352": {"Id": "27371352", "PostTypeId": "2", "Body": "<p>The trailing return type is part of the <em>member function declaration</em>, and not the <em>member function definition</em> (<strong><em>[dcl.fct]/2</em></strong>). That's the reason why you can use <code>m_count</code> within the function body even when the data member follows the member function definition. </p>\n<p>However, when used in a declaration, the name in question must be declared before its use.</p>\n<p><em>\u00a73.4.1/7</em> <strong><em>[basic.lookup.unqual]</em></strong></p>\n<blockquote>\n<p id=\"so_27371102_27371352_0\">A name used in the definition of a class <code>X</code> outside of a member function body or nested class definition shall be declared in one of the following ways:<br/>\n  \u2014 before its use in class <code>X</code> or be a member of a base class of <code>X</code> (10.2), or<br/>\n  \u2014 <code>...</code></p>\n</blockquote>\n<p>In your case, you need to place the declaration of <code>m_count</code> ahead of <code>count()</code>; or if you have access to a C++14 compiler, you can omit the trailing return type altogether.</p>\n<pre><code>struct A\n{\n    auto count() { return m_count; } // OK in C++14\n    int m_count;        \n};\n</code></pre>\n", "LastEditorUserId": "241631", "LastActivityDate": "2014-12-09T04:22:39.787", "Score": "3", "CreationDate": "2014-12-09T04:17:19.567", "ParentId": "27371102", "CommentCount": "0", "OwnerUserId": "241631", "LastEditDate": "2014-12-09T04:22:39.787"}});