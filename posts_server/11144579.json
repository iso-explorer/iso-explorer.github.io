post_cb({"11144637": {"ParentId": "11144579", "CommentCount": "3", "Body": "<p>The code is ill-formed.  The extent of an array must be a constant expression, and <code>i</code> is not a constant expression (it is not declared <code>const</code>).</p>\n<p>If <code>a</code> were declared as a <code>const int</code> and initialized with a constant expression (like <code>7</code>), the code would be well-formed because the extent would then be a constant expression.  For example, the following is well-formed:</p>\n<pre><code>int main()\n{\n    int const a = 7;\n    char arr[a];\n}\n</code></pre>\n<p>Some C++ compilers (including gcc, in some compilation modes) support <em>variable length arrays</em>, which are a feature from C, and which allow local arrays to have nonconstant size.  Compilers that provide this feature do so as a language extension, though; it is not a feature of C++.</p>\n", "OwnerUserId": "151292", "PostTypeId": "2", "Id": "11144637", "Score": "8", "CreationDate": "2012-06-21T18:37:54.960", "LastActivityDate": "2012-06-21T18:37:54.960"}, "11144824": {"ParentId": "11144579", "CommentCount": "0", "Body": "<p>It is not legal according to the Standard, here:</p>\n<p>C++03 8.3.4/1 [dcl.array]</p>\n<blockquote>\n<p id=\"so_11144579_11144824_0\">In a declarationT D where D has the form <code>D1 [constant-expressionopt]</code>\n  and the type of the identifier in the declarationT D1 is\n  \u201cderived-declarator-type-list T,\u201d then the type of the identifier of D\n  is an array type. T is called the array element type; this type shall\n  not be a reference type, the (possibly cv-qualified) type void, a\n  function type or an abstract class type. If the constant-expression\n  (5.19) is present, it shall be an integral constant expression and its\n  value shall be greater than zero. [...]</p>\n</blockquote>\n<p>Integral Constant Expressions are further defined in 5.19/1:</p>\n<blockquote>\n<p id=\"so_11144579_11144824_1\">[...] An integral constant-expression can involve only literals\n  (2.13), enumerators, const variables or static data members of\n  integral or enumeration types initialized with constant expressions\n  (8.5), non-type template parameters of integral or enumeration types,\n  and sizeof expressions.</p>\n</blockquote>\n", "OwnerUserId": "241536", "PostTypeId": "2", "Id": "11144824", "Score": "0", "CreationDate": "2012-06-21T18:50:26.093", "LastActivityDate": "2012-06-21T18:50:26.093"}, "11144579": {"CommentCount": "7", "ViewCount": "145", "PostTypeId": "1", "ClosedDate": "2012-06-21T18:52:27.090", "LastEditorUserId": "-1", "CreationDate": "2012-06-21T18:34:00.720", "LastActivityDate": "2012-06-21T18:51:11.463", "Title": "Is it legal according to rules of C++?", "LastEditDate": "2017-05-23T12:02:59.700", "Id": "11144579", "Score": "2", "Body": "<blockquote>\n<p id=\"so_11144579_11144579_0\"><strong>Possible Duplicate:</strong><br>\n<a href=\"https://stackoverflow.com/questions/5947661/in-c-books-array-bound-must-be-constant-expression-but-why-the-following-cod\">In C++ books, array bound must be constant expression, but why the following code works?</a> </br></p>\n</blockquote>\n<p>see this code</p>\n<pre><code>#include&lt;iostream&gt;\nint main\n{\nusing namespace std;\nint a=7;\nchar arr[a];\nreturn 0;\n}\n</code></pre>\n<p>in my book it is written that array_size must be a constant but codeblocks is not giving error in it...</p>\n<p>it is not the only case.. there are several other examples also.</p>\n<p>who is wrong IDE, compiler, or any other thing???</p>\n<p>does using newer or older book can cause such issue??</p>\n", "Tags": "<c++><arrays>", "OwnerUserId": "1472997", "AnswerCount": "4"}, "11144808": {"ParentId": "11144579", "CommentCount": "0", "Body": "<p><strong>It is illegal in C++98, C++03, C++11, C89 and C90 (probably in C11 also).</strong></p>\n<p>It is legal only in C99.</p>\n", "OwnerUserId": "415784", "PostTypeId": "2", "Id": "11144808", "Score": "0", "CreationDate": "2012-06-21T18:49:41.853", "LastActivityDate": "2012-06-21T18:49:41.853"}, "bq_ids": {"n4140": {"so_11144579_11144824_0": {"section_id": 3228, "quality": 0.85, "length": 34}}, "n3337": {"so_11144579_11144824_0": {"section_id": 3101, "quality": 0.875, "length": 35}}, "n4659": {"so_11144579_11144824_0": {"section_id": 3985, "quality": 0.725, "length": 29}}}, "11144735": {"ParentId": "11144579", "LastEditDate": "2017-05-23T10:34:26.580", "CommentCount": "2", "CreationDate": "2012-06-21T18:44:10.580", "OwnerUserId": "600135", "LastEditorUserId": "-1", "PostTypeId": "2", "Id": "11144735", "Score": "1", "Body": "<p>Since <a href=\"http://en.wikipedia.org/wiki/C99\" rel=\"nofollow noreferrer\">C99</a> (<a href=\"http://www.open-std.org/jtc1/sc22/WG14/www/docs/n1256.pdf\" rel=\"nofollow noreferrer\">ISO/IEC 9899:1999</a>, section 6.7.5.2), this is legal in <strong>C</strong>: <code>arr</code> is a variable length array (VLA). However, <a href=\"https://stackoverflow.com/questions/8593643/does-c-support-variable-length-arrays\">there is no VLA in <strong>C++</strong></a>. The accepted answer <a href=\"https://stackoverflow.com/questions/1887097/variable-length-arrays-in-c\">here</a> explains why.</p>\n", "LastActivityDate": "2012-06-21T18:51:11.463"}});