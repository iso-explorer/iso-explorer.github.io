post_cb({"38554741": {"ViewCount": "28", "Body": "<p>I have the following code in my project:  </p>\n<p><strong>MainWindow.cpp</strong> </p>\n<pre><code>#include \"date.h\" \n\nDate date; //extern from date.h &lt;- Error when instantinating this one\n\nMainWindow::MainWindow(){//...}\n</code></pre>\n<p><strong>date.cpp</strong> </p>\n<pre><code>#include \"date.h\" \n#include \"consants.h\" \n\n//..Stuff\nDate::Date()\n{\n    //Use const int variable from \"constants.h\"\n    year = constants::START_YEAR; //Works, START_YEAR is initialized\n    Month month(m, y);\n}\nMonth::Month(int month, int year)\n{\n    //Use const std::map&lt;QString, std::pair&lt;int,int&gt;&gt; from \"constants.h\"\n    day_count = constants::MONTH_DAY_MAP_LY.at(\"January\").second //ERROR, MONTH_DAY_MAP_LY is not initialized\n}\n</code></pre>\n<p><strong>constants.h</strong> </p>\n<pre><code>namespace constants {\nconst int START_YEAR = 2016;\nconst int YEAR_COUNT = 83;\n\nconst QList&lt;QString&gt; MONTH { \"January\", \"February\", \"March\",\n        \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"};\n\nconst std::map&lt;QString, std::pair&lt;int, int&gt;&gt; MONTH_DAY_MAP{\n    {MONTH[0], std::make_pair(0, 31)}, {MONTH[1], std::make_pair(1, 28)}, {MONTH[2], std::make_pair(2, 31)},\n    {MONTH[3], std::make_pair(3, 30)}, {MONTH[4], std::make_pair(4, 31)}, {MONTH[5], std::make_pair(5, 30)},\n    {MONTH[6], std::make_pair(6, 31)}, {MONTH[7], std::make_pair(7, 31)}, {MONTH[8], std::make_pair(8, 30)},\n    {MONTH[9], std::make_pair(9, 31)}, {MONTH[10], std::make_pair(10, 30)}, {MONTH[11], std::make_pair(11, 31)}\n};\nconst std::map&lt;QString, std::pair&lt;int, int&gt;&gt; MONTH_DAY_MAP_LY {\n    {MONTH[0], std::make_pair(0, 31)}, {MONTH[1], std::make_pair(1, 29)}, {MONTH[2], std::make_pair(2, 31)},\n    {MONTH[3], std::make_pair(3, 30)}, {MONTH[4], std::make_pair(4, 31)}, {MONTH[5], std::make_pair(5, 30)},\n    {MONTH[6], std::make_pair(6, 31)}, {MONTH[7], std::make_pair(7, 31)}, {MONTH[8], std::make_pair(8, 30)},\n    {MONTH[9], std::make_pair(9, 31)}, {MONTH[10], std::make_pair(10, 30)}, {MONTH[11], std::make_pair(11, 31)}\n};\n}\n</code></pre>\n<p>As you see I get the <code>std::out_of_range</code> error when trying to access <code>MONTH_DAY_MAP_LY</code>. After the debugging session I figured out that it happens because <code>Date</code>'s constructor is called before any other function (even main). But I also found this page in the standard:  </p>\n<blockquote>\n<p id=\"so_38554741_38554741_0\">It is implementation-defined whether or not the dynamic initialization (8.5, 9.4, 12.1, 12.6.1) of an object of namespace scope is done before the first statement of main. If the initialization is deferred to some point in time after the first statement of main, it shall occur before the first use of any function or object defined in the same translation unit as the object to be initialized.  </p>\n</blockquote>\n<p>Since this rule applies to both <code>Date date</code> and objects from <code>constants.h</code> I don't know why linker initializes <code>Date date</code> and only <code>int</code>s from <code>constants.h</code>.</p>\n", "Title": "Global scoped objects are not initialized recursively?", "CreationDate": "2016-07-24T17:25:19.293", "LastActivityDate": "2016-07-24T17:44:55.463", "CommentCount": "1", "LastEditDate": "2016-07-24T17:44:55.463", "PostTypeId": "1", "LastEditorUserId": "5925318", "Id": "38554741", "Score": "0", "OwnerUserId": "5925318", "Tags": "<c++><linker><global-variables>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_38554741_38554862_1": {"length": 4, "quality": 0.5714285714285714, "section_id": 744}, "so_38554741_38554741_0": {"length": 26, "quality": 0.7428571428571429, "section_id": 7153}, "so_38554741_38554862_2": {"length": 9, "quality": 0.6, "section_id": 763}}, "n3337": {"so_38554741_38554862_2": {"length": 9, "quality": 0.6, "section_id": 750}, "so_38554741_38554741_0": {"length": 26, "quality": 0.7428571428571429, "section_id": 6897}, "so_38554741_38554862_1": {"length": 4, "quality": 0.5714285714285714, "section_id": 733}}, "n4659": {"so_38554741_38554862_2": {"length": 9, "quality": 0.6, "section_id": 823}, "so_38554741_38554862_1": {"length": 4, "quality": 0.5714285714285714, "section_id": 802}}}, "38554862": {"Id": "38554862", "PostTypeId": "2", "Body": "<p><code>MONTH_DAY_MAP_LY</code> is <code>std::map&lt;QString, std::pair&lt;int, int&gt;&gt;</code>, so you should use <code>std::map::at</code> with <code>QString</code> as argument instead of element index: <code>constants::MONTH_DAY_MAP_LY.at(\"January\").second</code>.</p>\n<p>From the documentation:</p>\n<blockquote>\n<p id=\"so_38554741_38554862_0\"><code>T&amp; at( const Key&amp; key );</code> (1) (since C++11) </p>\n<p id=\"so_38554741_38554862_1\"><code>const T &amp; at( const Key&amp; key ) const;</code> (2) (since C++11) </p>\n<p id=\"so_38554741_38554862_2\">Returns a reference to the mapped value of the element with key equivalent to key. If no such element exists, an exception of type <code>std::out_of_range</code> is thrown. </p>\n</blockquote>\n", "LastActivityDate": "2016-07-24T17:37:14.203", "CommentCount": "1", "CreationDate": "2016-07-24T17:37:14.203", "ParentId": "38554741", "Score": "0", "OwnerUserId": "5251968"}});