post_cb({"40523513": {"CommentCount": "7", "ViewCount": "175", "PostTypeId": "1", "LastEditorUserId": "4987285", "CreationDate": "2016-11-10T08:59:20.787", "LastActivityDate": "2016-11-10T09:25:02.370", "Title": "typename, type members and non-type members: is it valid code?", "AcceptedAnswerId": "40523853", "LastEditDate": "2016-11-10T09:18:32.340", "Id": "40523513", "Score": "3", "Body": "<p>Consider the following code:</p>\n<pre><code>struct S {\n    struct type {};\n    type type;\n};\n\nint main() {  \n    typename S::type t;\n    (void) t;\n}\n</code></pre>\n<p>Apart for the fact that is far from being a good idea, I was experimenting after having read another question here on SO.<br>\nI found that the snippet above is <a href=\"https://godbolt.org/g/eErtDr\" rel=\"nofollow noreferrer\">compiled with no errors by GCC</a> and it is <a href=\"https://godbolt.org/g/Li65kz\" rel=\"nofollow noreferrer\">rejected by clang 3.9</a> with the following error:</br></p>\n<blockquote>\n<p id=\"so_40523513_40523513_0\">error: typename specifier refers to non-type member 'type' in 'S'</p>\n</blockquote>\n<p>I suspect that clang is right in this case and GCC is wrong (actually, I'm opening an issue to the latter).<br>\nIs it the right conclusion or is that a valid use of <code>typename</code>?</br></p>\n<hr>\n<p>Note: I'm not asking how to solve it, I know how to do that. I'm asking only if this code is valid or not.</p>\n</hr>", "Tags": "<c++><gcc><clang><language-lawyer><typename>", "OwnerUserId": "4987285", "AnswerCount": "1"}, "40523853": {"ParentId": "40523513", "PostTypeId": "2", "CommentCount": "6", "Body": "<p><a href=\"http://eel.is/c++draft/temp.res#4\" rel=\"nofollow noreferrer\">[temp.res]/4</a>:</p>\n<blockquote>\n<p id=\"so_40523513_40523853_0\">The usual qualified name lookup is used to find the <em>qualified-id</em> even in the presence of <code>typename</code>.</p>\n</blockquote>\n<p>That is, unlike the case with <em>elaborated-type-specifier</em>s, the name lookup in this case does not ignore non-type names.</p>\n<p><a href=\"http://eel.is/c++draft/temp.res#3\" rel=\"nofollow noreferrer\">[temp.res]/3</a>:</p>\n<blockquote>\n<p id=\"so_40523513_40523853_1\">If the <em>qualified-id</em> in a <em>typename-specifier</em> does not denote a type or a class template, the program is ill-formed.</p>\n</blockquote>\n<p>So the program in question is ill-formed.</p>\n<p>[temp.res]/4 also has an example for this:</p>\n<pre><code>struct A {\n  struct X { };\n  int X;\n};\nstruct B {\n  struct X { };\n};\ntemplate&lt;class T&gt; void f(T t) {\n  typename T::X x;\n}\nvoid foo() {\n  A a;\n  B b;\n  f(b);             // OK: T::X refers to B::X\n  f(a);             // error: T::X refers to the data member A::X not the struct A::X\n}\n</code></pre>\n", "OwnerUserId": "4672588", "LastEditorUserId": "4672588", "LastEditDate": "2016-11-10T09:24:10.123", "Id": "40523853", "Score": "7", "CreationDate": "2016-11-10T09:18:59.097", "LastActivityDate": "2016-11-10T09:24:10.123"}, "bq_ids": {"n4140": {"so_40523513_40523853_1": {"section_id": 170, "quality": 0.75, "length": 6}, "so_40523513_40523853_0": {"section_id": 171, "quality": 0.9, "length": 9}}, "n3337": {"so_40523513_40523853_1": {"section_id": 164, "quality": 0.75, "length": 6}, "so_40523513_40523853_0": {"section_id": 165, "quality": 0.9, "length": 9}}, "n4659": {"so_40523513_40523853_1": {"section_id": 175, "quality": 1.0, "length": 8}, "so_40523513_40523853_0": {"section_id": 176, "quality": 0.9, "length": 9}}}});