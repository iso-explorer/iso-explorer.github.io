post_cb({"31766689": {"ParentId": "31766613", "PostTypeId": "2", "CommentCount": "14", "Body": "<ol>\n<li>Yes. From [class.ctor]:</li>\n</ol>\n<blockquote>\n<p id=\"so_31766613_31766689_0\">If there is no user-declared constructor\n  for class <code>X</code>, a non-explicit constructor having no parameters is implicitly declared <strong>as defaulted (8.4)</strong>.</p>\n</blockquote>\n<p>A function implicitly declared as defaulted means it functions as if it were explicitly declared as <code>= default</code>. </p>\n<ol start=\"2\">\n<li>You are correct. The default constructor cannot be used as <code>constexpr</code>, further made clear via [dcl.init]:</li>\n</ol>\n<blockquote>\n<p id=\"so_31766613_31766689_1\">If a program calls for the default initialization of an object of a const-qualified type T, T shall be a class type\n  with a <strong>user-provided</strong> default constructor. </p>\n</blockquote>\n<p>So the following is ill-formed, as there is no user-provided default constructor:</p>\n<pre><code>    constexpr Point p; // error\n</code></pre>\n<p>We also see this in [dcl.constexpr]:</p>\n<blockquote>\n<p id=\"so_31766613_31766689_2\">A <code>constexpr</code> specifier used in an object declaration declares the object as <code>const</code>. Such an object shall have\n  literal type and <strong>shall be initialized</strong>. If it is initialized by a constructor call, that call shall be a constant expression (5.20). Otherwise, or if a <code>constexpr</code> specifier is used in a reference declaration, every fullexpression\n  that appears in its initializer shall be a constant expression. <em>[ Note:</em> Each implicit conversion\n  used in converting the initializer expressions and each constructor call used for the initialization is part of\n  such a full-expression. <em>\u2014end note ]</em><br>\n<em>[ Example:</em></br></p>\n<pre><code>struct pixel {\n    int x, y;\n};\nconstexpr pixel ur = { 1294, 1024 };  // OK\nconstexpr pixel origin;               // error: initializer missing\n</code></pre>\n<p id=\"so_31766613_31766689_3\"><em>\u2014end example ]</em></p>\n</blockquote>\n<p>Since the default constructor doesn't initialize for us (even if it didn't fail the user-provided requirement), we can provide an initializer to do it ourselves:</p>\n<pre><code>    constexpr Point q{}; // ok, all of q's members are 0\n</code></pre>\n<hr/>\n<p>This is all ultimately irrelevant as this:</p>\n<pre><code>constexpr Point p1 {10, 20, 30};     // the default constructor is constexpr\n</code></pre>\n<p>does not use the default constructor at all and actually performs aggregate initialization, which satisfies the \"shall be initialized\" clause cited above. </p>\n", "OwnerUserId": "2069064", "LastEditorUserId": "2069064", "LastEditDate": "2015-08-01T22:44:56.707", "Id": "31766689", "Score": "5", "CreationDate": "2015-08-01T22:09:06.327", "LastActivityDate": "2015-08-01T22:44:56.707"}, "31766613": {"CommentCount": "2", "ViewCount": "146", "PostTypeId": "1", "LastEditorUserId": "1033581", "CreationDate": "2015-08-01T21:57:33.383", "LastActivityDate": "2017-04-05T15:49:20.163", "Title": "Is it correct to say that the default constructor for class Point below is constexpr?", "AcceptedAnswerId": "31766689", "LastEditDate": "2017-04-05T15:49:20.163", "Id": "31766613", "Score": "3", "Body": "<p>B. Stroustrup has the following example on page 265 of his book \"TCPL\" 4th edition:</p>\n<pre><code>struct Point{\n    int x, y, z;\n    constexpr Point up(int d) { return {x, y, z+d}; }\n    constexpr Poind move(int dx, int dy) { return {x+dx, y+dy}; }\n};\n</code></pre>\n<p>Later on page 266 he shows:</p>\n<pre><code>constexpr Point p1 {10, 20, 30};     // the default constructor is constexpr\n</code></pre>\n<p>From \u00a77.1.5/4 in N4140, I find the following pertinent bullet points:</p>\n<blockquote id=\"so_31766613_31766613_0\">\n<ul>\n<li>(4.4) either its function-body shall be <code>= default</code>, or the compound-statement of its function-body shall satisfy the constraints\n  for a function-body of a constexpr function;</li>\n<li>(4.5) every non-variant non-static data member and base class sub-object shall be initialized (12.6.2);</li>\n</ul>\n</blockquote>\n<p>I have two observations in relation to the bullet points above:</p>\n<ol>\n<li>Is it correct to say that the compiler generated default constructor for <code>struct Point</code> has a function body <code>= default</code>?</li>\n<li>Even if the answer to my question above is <code>yes</code>, I'm disputing the fact that the compiler generated default constructor for <code>struct Point</code> is <code>constexpr</code>, simply because this constructor doesn't initialize the members <code>x</code>, <code>y</code> and <code>z</code>, contradicting bullet point (4.5) above. Am I correct here?</li>\n</ol>\n<p><strong>Edit</strong> I'm introducing a third question that I think summarizes my main difficulty with this issue.</p>\n<p>I can't produce an example of a <code>constexpr</code> default constructor whose body is equal to <code>= default</code>. Suppose this is NOT possible. The obvious question is: what is then the purpose of the bullet point (4.4) in \u00a77.1.5/4? </p>\n", "Tags": "<c++><c++14><constexpr>", "OwnerUserId": "4470210", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_31766613_31766613_0": {"section_id": 5420, "quality": 0.9545454545454546, "length": 21}, "so_31766613_31766689_1": {"section_id": 3286, "quality": 1.0, "length": 11}, "so_31766613_31766689_0": {"section_id": 369, "quality": 0.9090909090909091, "length": 10}, "so_31766613_31766689_2": {"section_id": 5425, "quality": 0.8979591836734694, "length": 44}}, "n3337": {"so_31766613_31766613_0": {"section_id": 5215, "quality": 0.6818181818181818, "length": 15}, "so_31766613_31766689_1": {"section_id": 3156, "quality": 1.0, "length": 11}, "so_31766613_31766689_0": {"section_id": 359, "quality": 0.9090909090909091, "length": 10}, "so_31766613_31766689_2": {"section_id": 5220, "quality": 0.8367346938775511, "length": 41}}, "n4659": {"so_31766613_31766613_0": {"section_id": 6842, "quality": 0.9090909090909091, "length": 20}, "so_31766613_31766689_0": {"section_id": 381, "quality": 1.0, "length": 11}, "so_31766613_31766689_1": {"section_id": 382, "quality": 0.6363636363636364, "length": 7}}}});