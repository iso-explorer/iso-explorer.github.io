post_cb({"31460733": {"ViewCount": "985", "Body": "<p>As the <a href=\"http://en.cppreference.com/w/cpp/numeric/random/uniform_int_distribution\" rel=\"noreferrer\">documentation says</a>:</p>\n<blockquote>\n<p id=\"so_31460733_31460733_0\">The effect is undefined if this is not one of <code>short</code>, <code>int</code>, <code>long</code>, <code>long long</code>, <code>unsigned short</code>, <code>unsigned int</code>, <code>unsigned long</code>, or <code>unsigned long long</code>.</p>\n</blockquote>\n<p>If I don't care about the range, I can just mask off the bits of a larger type to generate random numbers.  If not, it's more complex.  Why aren't the byte types provided just by default?</p>\n", "Title": "Why Aren't `std::uniform_int_distribution<uint8_t>` and `std::uniform_int_distribution<int8_t>` Allowed?", "CreationDate": "2015-07-16T17:24:40.437", "LastActivityDate": "2015-11-05T21:47:54.137", "CommentCount": "5", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2015-07-16T17:42:23.107", "LastEditorUserId": "1708801", "Id": "31460733", "Score": "15", "OwnerUserId": "688624", "Tags": "<c++><c++11><random>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_31460733_31460733_0": {"length": 17, "quality": 0.9444444444444444, "section_id": 3487}, "so_31460733_31460827_1": {"length": 10, "quality": 0.7142857142857143, "section_id": 3487}, "so_31460733_31460827_2": {"length": 11, "quality": 0.7333333333333333, "section_id": 3487}}, "n3337": {"so_31460733_31460733_0": {"length": 17, "quality": 0.9444444444444444, "section_id": 3352}, "so_31460733_31460827_2": {"length": 11, "quality": 0.7333333333333333, "section_id": 3352}, "so_31460733_31460827_1": {"length": 10, "quality": 0.7142857142857143, "section_id": 3352}}, "n4659": {"so_31460733_31460733_0": {"length": 17, "quality": 0.9444444444444444, "section_id": 4250}, "so_31460733_31460827_2": {"length": 11, "quality": 0.7333333333333333, "section_id": 4250}, "so_31460733_31460827_1": {"length": 10, "quality": 0.7142857142857143, "section_id": 4250}}}, "31460827": {"Id": "31460827", "PostTypeId": "2", "Body": "<p>There is a library working group unresolved issue on this <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-unresolved.html#2326\" rel=\"noreferrer\">uniform_int_distribution&lt;unsigned char&gt; should be permitted</a> and it says, amongst other things:</p>\n<blockquote>\n<p id=\"so_31460733_31460827_0\">I am not aware of anything in <code>&lt;random&gt;</code> that works with 16-bit\n  integers but fails with 8-bit integers, so I suspect that <code>IntType</code>\n  and <code>UIntType</code> could simply be extended to permit the char family.\n  Alternatively, this change could be limited to\n  uniform_int_distribution alone, where it is definitely safe. A\n  <code>&lt;random&gt;</code> expert should decide which change is best.</p>\n</blockquote>\n<p>The proposed resolution is to change the restriction to allow standard integer types:</p>\n<blockquote>\n<p id=\"so_31460733_31460827_1\">that has a template type parameter named <code>IntType</code> is undefined unless\n  the corresponding template argument is cv-unqualified and is a a\n  standard integer type (3.9.1 [basic.fundamental]</p>\n</blockquote>\n<p>and:</p>\n<blockquote>\n<p id=\"so_31460733_31460827_2\">that has a template type parameter named <code>UIntType</code> is undefined\n  unless the corresponding template argument is cv-unqualified and is a\n  standard unsigned integer type (3.9.1 [basic.fundamental])</p>\n</blockquote>\n<p>This gets you <em>unsigned</em> / <em>signed char</em> although not <em>uint8_t</em> or <em>int8_t</em> but they are likely equivalent. Extended integral types were exluded to simplify the wording and maximize consensus:</p>\n<blockquote>\n<p id=\"so_31460733_31460827_3\">This also excludes extended integral types and wide char types, which seem like nice-to-haves at best. I have no objection to supporting any of those types; I just picked this to simplify the wording and hopefully maximize consensus.</p>\n</blockquote>\n<p>Note, this excludes <code>char</code> since it is implementation defined whether <code>char</code> is signed or not.</p>\n<p>Note this topic was also brought up in the <a href=\"https://groups.google.com/a/isocpp.org/forum/#!msg/std-discussion/rOzm69RSNcg/aIqYf__XJb0J\" rel=\"noreferrer\">std-discussion list</a>.</p>\n<p>Jonathan Wakely notes this proposal is controversial and commented that his notes from the last discussion include the following:</p>\n<blockquote>\n<p id=\"so_31460733_31460827_4\">that it was very definitely intentional that single byte integers are not supported, not an accidental omission, and so we should be careful about just changing that without consulting the designers of the C++11 </p>\n</blockquote>\n<p>He suggests adding a member to <code>random_device</code> to provide single bytes, which is seems like a reasonable alternative.</p>\n", "LastEditorUserId": "1708801", "LastActivityDate": "2015-11-05T21:47:54.137", "Score": "12", "CreationDate": "2015-07-16T17:29:56.597", "ParentId": "31460733", "CommentCount": "4", "OwnerUserId": "1708801", "LastEditDate": "2015-11-05T21:47:54.137"}});