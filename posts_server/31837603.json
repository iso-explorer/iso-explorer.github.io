post_cb({"31837603": {"CommentCount": "5", "ViewCount": "265", "PostTypeId": "1", "LastEditorUserId": "447688", "CreationDate": "2015-08-05T16:09:09.133", "LastActivityDate": "2015-08-11T10:01:09.750", "Title": "Get the largest signed integer type in C++", "AcceptedAnswerId": "31856601", "LastEditDate": "2015-08-05T16:14:55.700", "Id": "31837603", "Score": "0", "Body": "<p>Let's say I have to accept a size as an argument to an interface which deals with arrays. For e.x.</p>\n<pre><code>void doSomethingRelatedToArrays(const size_t length)\n</code></pre>\n<p>Here, I used size_t with the following in mind:</p>\n<ul>\n<li>length must always be positive</li>\n<li>size_t is always typedef-ed to the largest unsigned integer type in the system. std::size_t can store the maximum size of a theoretically possible object of any type.</li>\n</ul>\n<p>However, I should not use unsigned types in my interfaces because the client can pass in a negative number, which is implicitly converted to an unsigned number and I do not have any way of validating it in my method. Refer to Scott Meyer's article on this subject <a href=\"http://www.aristeia.com/Papers/C++ReportColumns/sep95.pdf\" rel=\"nofollow\">here</a>.</p>\n<p>So, I should pass in signed integer type to the API. But how can I get the largest signed integer type in the system? Is there any typedef similar to size_t which is signed? Or should I just use size_t instead?</p>\n", "Tags": "<c++><c><signed><unsigned-integer><size-t>", "OwnerUserId": "439888", "AnswerCount": "4"}, "31838646": {"ParentId": "31837603", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The largest signed integer type in recent standards of C and C++ is <code>long long</code>. Until there is a type wider than <code>long long</code> you can always use it. If you want to be more future proof, use <code>intmax_t</code></p>\n<blockquote>\n<p id=\"so_31837603_31838646_0\"><code>size_t</code> is always typedef-ed to the largest unsigned integer type in the system</p>\n</blockquote>\n<p>This is incorrect. <code>size_t</code> in 32-bit systems is typically also 32 bits, which obviously not the widest type possible. It's only guaranteed to be big enough to represent the size of the biggest object on the system.</p>\n<p>In case <code>size_t</code> is needed, <code>ptrdiff_t</code> can be used as a signed counterpart. But it's not the biggest type either.</p>\n<blockquote>\n<p id=\"so_31837603_31838646_1\">For <code>char</code> arrays shorter than <code>PTRDIFF_MAX</code>, <code>std::ptrdiff_t</code> acts as the signed counterpart of <code>std::size_t</code>: it can store the size of the array of any type and is, on most platforms, synonymous with <code>std::intptr_t</code></p>\n</blockquote>\n<p><a href=\"http://en.cppreference.com/w/cpp/types/ptrdiff_t\" rel=\"nofollow\">http://en.cppreference.com/w/cpp/types/ptrdiff_t</a></p>\n", "OwnerUserId": "995714", "LastEditorUserId": "995714", "LastEditDate": "2015-08-11T10:01:09.750", "Id": "31838646", "Score": "1", "CreationDate": "2015-08-05T17:01:33.267", "LastActivityDate": "2015-08-11T10:01:09.750"}, "31837693": {"ParentId": "31837603", "CommentCount": "1", "Body": "<p>The signed equivalent of <code>size_t</code> is simply <code>ssize_t</code> but this type is not defined in C99 standard even if it is known to many compilers.</p>\n<p>For the C99 standard  the largest signed integer type is defined as <code>intmax_t</code>.</p>\n<p>Reference : 7. Library / 7.18 Integer types  / 7.18.1.5 Greatest-width integer types</p>\n", "OwnerUserId": "3545273", "PostTypeId": "2", "Id": "31837693", "Score": "4", "CreationDate": "2015-08-05T16:12:35.637", "LastActivityDate": "2015-08-05T16:12:35.637"}, "31838083": {"ParentId": "31837603", "CommentCount": "0", "Body": "<p>The standard type to use is <code>std::intmax_t</code> which is defined in <code>&lt;cstdint&gt;</code>. To get the maximum value you can use <code>std::numeric_limits&lt;intmax_t&gt;::max()</code>.</p>\n<p>Sample code:</p>\n<pre><code>#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n#include &lt;limits&gt;\n\nint main(int argc, char* argv[]) {\n    std::cout &lt;&lt; \"max size = \" &lt;&lt; std::numeric_limits&lt;intmax_t&gt;::max() &lt;&lt; std::endl;\n}\n</code></pre>\n", "OwnerUserId": "581903", "PostTypeId": "2", "Id": "31838083", "Score": "3", "CreationDate": "2015-08-05T16:30:58.087", "LastActivityDate": "2015-08-05T16:30:58.087"}, "bq_ids": {"n4140": {"so_31837603_31856601_1": {"section_id": 45, "quality": 0.5384615384615384, "length": 7}, "so_31837603_31856601_0": {"section_id": 6290, "quality": 0.5555555555555556, "length": 5}}, "n3337": {"so_31837603_31856601_1": {"section_id": 42, "quality": 0.5384615384615384, "length": 7}, "so_31837603_31856601_0": {"section_id": 6050, "quality": 0.5555555555555556, "length": 5}}, "n4659": {"so_31837603_31856601_1": {"section_id": 8721, "quality": 0.6153846153846154, "length": 8}, "so_31837603_31856601_0": {"section_id": 7797, "quality": 0.5555555555555556, "length": 5}}}, "31856601": {"ParentId": "31837603", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_31837603_31856601_0\">But how can I get the largest signed integer type in the system? </p>\n</blockquote>\n<p>In C++11's <code>&lt;cstdint&gt;</code> you can find type <code>intmax_t</code>, which is defined after the C standard (7.20.1.5):</p>\n<blockquote>\n<p id=\"so_31837603_31856601_1\">The following type designates a signed integer type capable of\n  representing any value of any signed integer type</p>\n</blockquote>\n<hr>\n<blockquote>\n<p id=\"so_31837603_31856601_2\">Is there any typedef similar to size_t which is signed? </p>\n</blockquote>\n<p>No, not in the C++ standard. POSIX defines <code>ssize_t</code>, <strong>but</strong>:</p>\n<ul>\n<li>it is not meant to replace <code>size_t</code> (which itself is also more restricted by POSIX)</li>\n<li>is not meant to store/pass negative values, but to indicate error:\n\n<blockquote>\n<p id=\"so_31837603_31856601_3\"><code>ssize_t</code> shall be capable of storing values at least in the range [-1, {SSIZE_MAX}].</p>\n</blockquote></li>\n</ul>\n<hr>\n<blockquote>\n<p id=\"so_31837603_31856601_4\">So, I should pass in signed integer type to the API. (...) Or should I\n  just use size_t instead?</p>\n</blockquote>\n<p>If your interface is meant to deal with C++ arrays, <code>size_t</code> is the only type that is assured by the standard to be able to hold any of the possible array indexes. Using any other type you might (in theory) loose ability to address all of the array (which is even noted in the article you linked).</p>\n<p>Using <code>size_t</code> for indexing purposes is therefore common and customary - and used by many libraries (including STL).</p>\n</hr></hr>", "OwnerUserId": "3941935", "PostTypeId": "2", "Id": "31856601", "Score": "2", "CreationDate": "2015-08-06T13:04:24.357", "LastActivityDate": "2015-08-06T13:04:24.357"}});