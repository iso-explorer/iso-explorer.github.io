post_cb({"40226269": {"CommentCount": "2", "AcceptedAnswerId": "40233006", "PostTypeId": "1", "LastEditorUserId": "1217557", "CreationDate": "2016-10-24T19:42:18.950", "LastActivityDate": "2016-10-25T06:40:32.240", "LastEditDate": "2016-10-24T20:22:12.730", "ViewCount": "664", "FavoriteCount": "1", "Title": "What does the C++ standard say about overriding a throw() function with noexcept?", "Id": "40226269", "Score": "11", "Body": "<p>The following seems to compile on a couple of compilers that I've tried:</p>\n<pre><code>class A\n{\npublic:\n    virtual void foo() throw() = 0;\n};\n\nclass B : public A\n{\npublic:\n    virtual void foo() noexcept override { }\n};\n</code></pre>\n<p>It seems that one can override a throw() function with the newer noexcept specification. I also tried the opposite (overriding noexcept with throw()) and it seems to work. Why is that? Is this undefined behavior or is this allowed?</p>\n<p>Please note that code generation is affected by noexcept vs throw(). They also do not have equivalent behavior since noexcept calls a different termination function than throw(). An ideal answer will call out the differences in behavior and why they do or do not matter in this case.</p>\n", "Tags": "<c++><c++11>", "OwnerUserId": "1217557", "AnswerCount": "2"}, "40233006": {"ParentId": "40226269", "CommentCount": "1", "Body": "<p>You can even do this without overriding:</p>\n<pre><code>void f() throw();\nvoid f() noexcept { throw 1; }\n</code></pre>\n<p><a href=\"https://timsong-cpp.github.io/cppwp/except#spec-9\" rel=\"nofollow\">[except.spec]/9</a> makes it clear that it is the specification on the <em>definition</em> that controls what happens:</p>\n<blockquote>\n<p id=\"so_40226269_40233006_0\">Whenever an exception of type E is thrown and the search for a handler\n  ([except.handle]) encounters the outermost block of a function with an\n  exception specification that does not allow E, then,</p>\n<ul>\n<li><p id=\"so_40226269_40233006_1\">if the function definition has a <em>dynamic-exception-specification</em>, the\n  function <code>std::unexpected()</code> is called ([except.unexpected]),</p></li>\n<li><p id=\"so_40226269_40233006_2\">otherwise, the function <code>std::terminate()</code> is called\n  ([except.terminate]).</p></li>\n</ul>\n</blockquote>\n<p>This isn't a problem because whatever special handling for this happens in the callee, not the caller; all the caller needs to know is that no exception will ever leave the function.</p>\n", "OwnerUserId": "2756719", "PostTypeId": "2", "Id": "40233006", "Score": "3", "CreationDate": "2016-10-25T06:40:32.240", "LastActivityDate": "2016-10-25T06:40:32.240"}, "40226380": {"ParentId": "40226269", "CommentCount": "4", "Body": "<blockquote>\n<p id=\"so_40226269_40226380_0\">Is this undefined behaviour or is this allowed?\n  This is allowed. </p>\n</blockquote>\n<p>From the C++ standard:</p>\n<blockquote>\n<p id=\"so_40226269_40226380_1\">If a virtual function has an exception specification, all\n  declarations, including the definition, of any function that overrides\n  that virtual function in any derived class shall only allow exceptions\n  that are allowed by the exception specification of the base class\n  virtual function, unless the overriding function is defined as\n  deleted.</p>\n</blockquote>\n<p>Practically: you can override the method in the derived class and specify new rules in additional to those specified by the base class.</p>\n<p>In your example <code>throw()</code> and <code>noexcept</code> are equivalent.</p>\n", "OwnerUserId": "6040181", "PostTypeId": "2", "Id": "40226380", "Score": "2", "CreationDate": "2016-10-24T19:50:15.397", "LastActivityDate": "2016-10-24T19:50:15.397"}, "bq_ids": {"n4140": {"so_40226269_40233006_0": {"section_id": 3371, "quality": 0.75, "length": 12}, "so_40226269_40226380_1": {"section_id": 3367, "quality": 0.7037037037037037, "length": 19}, "so_40226269_40233006_1": {"section_id": 3371, "quality": 0.7142857142857143, "length": 5}, "so_40226269_40233006_2": {"section_id": 3371, "quality": 0.8, "length": 4}}, "n3337": {"so_40226269_40233006_0": {"section_id": 3241, "quality": 0.75, "length": 12}, "so_40226269_40226380_1": {"section_id": 3237, "quality": 0.7037037037037037, "length": 19}, "so_40226269_40233006_1": {"section_id": 3241, "quality": 0.7142857142857143, "length": 5}, "so_40226269_40233006_2": {"section_id": 3241, "quality": 0.8, "length": 4}}, "n4659": {"so_40226269_40233006_0": {"section_id": 4133, "quality": 0.6875, "length": 11}, "so_40226269_40226380_1": {"section_id": 4132, "quality": 0.7407407407407407, "length": 20}, "so_40226269_40233006_1": {"section_id": 245, "quality": 0.5714285714285714, "length": 4}}}});