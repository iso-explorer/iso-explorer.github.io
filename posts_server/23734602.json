post_cb({"bq_ids": {"n4140": {"so_23734602_23734824_0": {"length": 13, "quality": 0.8666666666666667, "section_id": 7151}, "so_23734602_23734824_2": {"length": 8, "quality": 1.0, "section_id": 7151}}, "n3337": {"so_23734602_23734824_0": {"length": 13, "quality": 0.8666666666666667, "section_id": 6895}, "so_23734602_23734824_2": {"length": 8, "quality": 1.0, "section_id": 6895}}, "n4659": {"so_23734602_23734824_0": {"length": 9, "quality": 0.6, "section_id": 4051}, "so_23734602_23734824_2": {"length": 5, "quality": 0.625, "section_id": 8652}}}, "23734824": {"Id": "23734824", "PostTypeId": "2", "Body": "<p>Your program invokes a static initialization of <code>T</code> instance and  C++ Standard n3337 <strong>\u00a7</strong>  3.6.2/2 says:</p>\n<blockquote>\n<p id=\"so_23734602_23734824_0\">Variables with static storage duration (3.7.1) or thread storage\n  duration (3.7.2) shall be zero-initialized (8.5) before any other\n  initialization takes place.</p>\n<p id=\"so_23734602_23734824_1\">(...)</p>\n<p id=\"so_23734602_23734824_2\">Static initialization shall be performed before any dynamic initialization\n  takes place (...)</p>\n</blockquote>\n", "LastActivityDate": "2014-05-19T09:59:05.227", "Score": "0", "CreationDate": "2014-05-19T09:59:05.227", "ParentId": "23734602", "CommentCount": "0", "OwnerUserId": "1141471"}, "23734664": {"Id": "23734664", "PostTypeId": "2", "Body": "<p>Your Singleton class uses a static instance of <code>T</code>. This instance will be initialized during program startup, before calling <code>main</code>. </p>\n<p>The following code from your paste initializes the instance:</p>\n<pre><code>//Globals initialization\n\n// [\u2026]\n\ntemplate &lt;typename T&gt;\nT Singleton&lt;T&gt;::m_Instance = T();\n</code></pre>\n", "LastActivityDate": "2014-05-19T09:51:15.437", "Score": "3", "CreationDate": "2014-05-19T09:51:15.437", "ParentId": "23734602", "CommentCount": "1", "OwnerUserId": "1248008"}, "23735050": {"Id": "23735050", "PostTypeId": "2", "Body": "<p>Normaly we use the idiom \"Construct On First Use\" when implement a Singleton class.</p>\n<p>The idiom correct some problems on the order of construction of the statics objects (you can search for the static initialization order fiasco).</p>\n<p>Just put your static declaration on the getObject method. The constructor is then called after the first call of this method.</p>\n<p>The constructor of a Singleton have to be private.</p>\n<p>After that, a Singleton is by definition not copyable. You have to make private the copy constructor and operator=.</p>\n", "LastEditorUserId": "914760", "LastActivityDate": "2014-05-19T10:33:27.363", "Score": "0", "CreationDate": "2014-05-19T10:11:29.920", "ParentId": "23734602", "CommentCount": "0", "LastEditDate": "2014-05-19T10:33:27.363", "OwnerUserId": "914760"}, "23734602": {"ViewCount": "102", "Body": "<p>I've written a very simple program implementing a generic Singleton class as follow:</p>\n<pre><code>namespace core\n{\n    template &lt;typename T&gt;\n    class Singleton\n    {\n        protected:\n            Singleton(void);\n            Singleton(Singleton const &amp;other);\n            virtual ~Singleton(void);\n        public:\n            Singleton &amp;operator=(Singleton const &amp;other);\n            static T *GetSingletonPtr(void);\n            static T &amp;GetSingleton(void);\n            static void DestroySingleton(void);\n        private:\n            static T *m_pInstance;\n            static T m_Instance;\n    };\n\n    //Globals initialization\n\n    template &lt;typename T&gt;\n    T *Singleton&lt;T&gt;::m_pInstance = NULL;\n\n    template &lt;typename T&gt;\n    T Singleton&lt;T&gt;::m_Instance = T();\n\n    //Initialization\n\n    template &lt;typename T&gt;\n    Singleton&lt;T&gt;::Singleton(void)\n    {\n\n    }\n\n    template &lt;typename T&gt;\n    Singleton&lt;T&gt;::Singleton(Singleton&lt;T&gt; const &amp;other)\n    {\n        *this = other;\n    }\n\n    //Destruction\n\n    template &lt;typename T&gt;\n    Singleton&lt;T&gt;::~Singleton(void)\n    {\n\n    }\n\n    //Surcharges\n\n    template &lt;typename T&gt;\n    Singleton&lt;T&gt; &amp;Singleton&lt;T&gt;::operator=(Singleton&lt;T&gt; const &amp;other)\n    {\n        if (&amp;other != this)\n        {\n            m_pInstance = other.m_pInstance;\n            m_Instance = other.m_Instance;\n        }\n        return (*this);\n    }\n\n    //Others\n\n    template &lt;typename T&gt;\n    T *Singleton&lt;T&gt;::GetSingletonPtr(void)\n    {\n        if (m_pInstance == NULL)\n            m_pInstance = new T();\n        return (m_pInstance);\n    }\n\n    template &lt;typename T&gt;\n    T &amp;Singleton&lt;T&gt;::GetSingleton(void)\n    {\n        return (m_Instance);\n    }\n\n    template &lt;typename T&gt;\n    void Singleton&lt;T&gt;::DestroySingleton(void)\n    {\n        if (m_pInstance != NULL)\n        {\n            delete (m_pInstance);\n            m_pInstance = NULL;\n        }\n    }\n}\n</code></pre>\n<p>Then, I've written the following code with the log 'constructor:toto' in the constructor of the singleton class 'TestSingleton'.</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;Singleton.hpp&gt;\n\nclass TestSingleton : public core::Singleton&lt;TestSingleton&gt;\n{\n        friend class core::Singleton&lt;TestSingleton&gt;;\n    private:\n        TestSingleton(void)\n        {\n            std::cout &lt;&lt; \"constructor:toto\" &lt;&lt; std::endl;\n        }\n};\n\nclass HandleSingleton\n{\n    public:\n        void Handle()\n        {\n            TestSingleton &amp;test = TestSingleton::GetSingleton();\n        }\n};\n\nint main(void)\n{\n    getchar();\n    return (0);\n}\n</code></pre>\n<p>The output is the following:</p>\n<pre><code>$&gt; constructor:toto\n</code></pre>\n<p>I don't understand why a variable with reference is initialized even if the method that initialize this reference (here the method 'Handle') is not called ?</p>\n<p>Thanks in advance for your help!</p>\n", "AcceptedAnswerId": "23734664", "Title": "Better understanding of Singleton class in C++", "CreationDate": "2014-05-19T09:48:20.887", "Id": "23734602", "CommentCount": "2", "PostTypeId": "1", "ClosedDate": "2014-05-19T12:58:23.013", "LastActivityDate": "2014-05-19T10:33:27.363", "Score": "0", "OwnerUserId": "1364743", "Tags": "<c++><reference><singleton>", "AnswerCount": "3"}});