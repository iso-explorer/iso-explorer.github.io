post_cb({"6242355": {"LastActivityDate": "2016-09-17T20:54:32.847", "LastEditorUserId": "2176813", "ParentId": "6242296", "LastEditDate": "2016-09-17T20:54:32.847", "Id": "6242355", "Score": "63", "Body": "<p>In C++03, you need to use the <a href=\"http://www.artima.com/cppsource/safebool.html\" rel=\"noreferrer\">safe bool idiom</a> to avoid evil things:</p>\n<pre><code>int x = my_object; // this works\n</code></pre>\n<p>In C++11 you can use an explicit conversion:</p>\n<pre><code>explicit operator bool() const\n{\n    // verify if valid\n    return is_valid;\n}\n</code></pre>\n<p>This way you need to be explicit about the conversion to bool, so you can no longer do crazy things by accident (in C++ you can always do crazy things on purpose):</p>\n<pre><code>int x = my_object; // does not compile because there's no explicit conversion\nbool y = bool(my_object); // an explicit conversion does the trick\n</code></pre>\n<p>This still works as normal in places like <code>if</code> and <code>while</code> that require a boolean expression, because the condition of those statements is <em>contextually converted</em> to bool:</p>\n<pre><code>// this uses the explicit conversion \"implicitly\"\nif (my_object)\n{\n    ...\n}\n</code></pre>\n<p>This is documented in <strong>\u00a74[conv]</strong>:</p>\n<blockquote>\n<p id=\"so_6242296_6242355_0\">An expression <code>e</code> can be <em>implicitly\n  converted</em> to a type <code>T</code> if and only if\n  the declaration <code>T t=e;</code> is well-formed,\n  for some invented temporary variable <code>t</code>\n  (\u00a78.5). Certain language constructs\n  require that an expression be\n  converted to a Boolean value. An\n  expression <code>e</code> appearing in such a\n  context is said to be <em>contextually converted to <code>bool</code></em> and is well-formed\n  if and only if the declaration <code>bool t(e);</code> is well-formed, for some\n  invented temporary variable <code>t</code> (\u00a78.5). The effect of either\n  implicit conversion is the same as performing the\n  declaration and initialization and then using the temporary\n  variable as the result of the conversion.</p>\n</blockquote>\n<p>(What makes the difference is the use of <code>bool t(e);</code> instead of <code>bool t = e;</code>.)</p>\n<p>The places were this contextual conversion to bool happens are:</p>\n<ul>\n<li>the conditions of <code>if</code>, <code>while</code>, and <code>for</code> statements;</li>\n<li>the operators of logical negation <code>!</code>, logical conjunction <code>&amp;&amp;</code>, and logical disjunction <code>||</code>;</li>\n<li>the conditional operator <code>?:</code>;</li>\n<li>the condition of <code>static_assert</code>;</li>\n<li>the optional constant expression of the <code>noexcept</code> exception specifier;</li>\n</ul>\n", "CommentCount": "3", "PostTypeId": "2", "OwnerUserId": "46642", "CreationDate": "2011-06-05T10:34:13.760"}, "31207963": {"LastActivityDate": "2015-07-03T13:26:27.507", "ParentId": "6242296", "Id": "31207963", "Score": "0", "Body": "<p>The original question was </p>\n<blockquote>\n<p id=\"so_6242296_31207963_0\">Is this considered a good practise? </p>\n</blockquote>\n<p>The issue with the safe bool conversion was very relevant in practice, but fortunately has now been addressed by the standards.</p>\n<p>But the judgement if this approach is appropriate, is a <em>question of design.</em></p>\n<p>By introducing such a \"validity check\", effectively you are stating that your objects can be in an invalid state. That is, speaking in the terms of computer science, you added a new separate value to the value domain represented by your objects. A so called <strong>bottom value</strong></p>\n<p>The most prominent example for a value domain with that propery is the pointer. A pointer can refer to various memory locations, but it also can be <code>NULL</code> (invalid).</p>\n<p>Thus we need do ask ourselves: does such a bottom value really reflect the nature of the things we want to model with our classes -- <em>and</em> -- do we really need to cover this aspect of the nature within our model?</p>\n<p>Experience shows that bottom values tend to be error prone, easy to forget and generally more of a liability than an asset. If you're able to arrange your code in a way that your objects can not be invalid, your code gets simpler, easier to read, to understand and to maintain..</p>\n", "CommentCount": "0", "PostTypeId": "2", "OwnerUserId": "444796", "CreationDate": "2015-07-03T13:26:27.507"}, "6242300": {"LastActivityDate": "2011-06-05T10:20:01.987", "ParentId": "6242296", "Id": "6242300", "Score": "11", "Body": "<p><strong>No</strong>, a simple bool conversion operator is <strong>not</strong>, as you can now make evil comparisions <strong>between unrelated types</strong>. Generally, yes, a conversion function is a-okay. Just use <a href=\"http://www.artima.com/cppsource/safebool.html\" rel=\"noreferrer\">the right one</a> (<a href=\"http://en.wikibooks.org/wiki/More_C++_Idioms/Safe_bool\" rel=\"noreferrer\">safe-bool idiom</a>). I can't explain it any better than the given links.</p>\n", "CommentCount": "0", "PostTypeId": "2", "OwnerUserId": "500104", "CreationDate": "2011-06-05T10:20:01.987"}, "6242296": {"AcceptedAnswerId": "6242355", "Tags": "<c++><error-handling>", "AnswerCount": "3", "OwnerUserId": "211359", "Body": "<p>I'd like to have a simple way of checking for an object to be valid. I thought of a simple conversion function, something like this: </p>\n<pre><code>operator bool() const { return is_valid; }\n</code></pre>\n<p>Checking for it to be valid would be very simple now</p>\n<pre><code>// is my object invalid?\nif (!my_object) std::cerr &lt;&lt; \"my_object isn't valid\" &lt;&lt; std::endl;\n</code></pre>\n<p>Is this considered a good practise? </p>\n", "CommentCount": "0", "CreationDate": "2011-06-05T10:18:14.247", "PostTypeId": "1", "FavoriteCount": "20", "LastActivityDate": "2016-09-17T20:54:32.847", "Id": "6242296", "Title": "Conversion function for error checking considered good?", "Score": "46", "ViewCount": "2654"}, "bq_ids": {"n3337": {"so_6242296_6242355_0": {"section_id": 2, "quality": 0.96, "length": 48}}}});