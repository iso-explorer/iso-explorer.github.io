post_cb({"17344873": {"Id": "17344873", "PostTypeId": "2", "Body": "<p>If <code>T</code> has a destructor then it will be invoked by <code>delete[]</code>. From section <em>5.3.5 Delete</em> of the c++11 standard (draft n3337), clause 6:</p>\n<blockquote>\n<p id=\"so_17344727_17344873_0\">If the value of the operand of the delete-expression is not a null pointer value, <strong>the delete-expression will\n  invoke the destructor (if any) for the object or the elements of the array being deleted</strong>. In the case of an\n  array, the elements will be destroyed in order of decreasing address (that is, in reverse order of the completion\n  of their constructor; see 12.6.2).</p>\n</blockquote>\n<p>The destructor for a type <code>T</code> will also be invoked for each element in an array of <code>T[]</code> when the array is not dynamically allocated and array goes out of scope (lifetime ends).</p>\n<hr>\n<blockquote>\n<p id=\"so_17344727_17344873_1\">I need to know this, because the objects in my class do not contain sensible values all the time, so the destructors should not be called when they don't.</p>\n</blockquote>\n<p>But, there seems to be a <em>very</em> significant problem with an object that can acquire a state where it cannot be destructed.</p>\n</hr>", "LastEditorUserId": "1033896", "LastActivityDate": "2013-06-27T13:51:36.193", "Score": "18", "CreationDate": "2013-06-27T13:43:52.093", "ParentId": "17344727", "CommentCount": "0", "OwnerUserId": "1033896", "LastEditDate": "2013-06-27T13:51:36.193"}, "17344876": {"Id": "17344876", "PostTypeId": "2", "Body": "<p>The answer is yes. Destructor for each object is called.</p>\n<p>On a related note, you should try to avoid using <code>delete</code> whenever possible. Use smart pointers (e.g.,<code>unique_ptr</code>, <code>shared_ptr</code>) and STL containers (e.g., std::vector, std::array) instead.</p>\n", "LastActivityDate": "2013-06-27T13:43:54.083", "CommentCount": "0", "CreationDate": "2013-06-27T13:43:54.083", "ParentId": "17344727", "Score": "2", "OwnerUserId": "93558"}, "17344864": {"Id": "17344864", "PostTypeId": "2", "Body": "<p>Yes, the destructor will be called for all objects in the array when using <code>delete[]</code>. But that shouldn't be an issue, since the constructor was called for all objects in the array when you used <code>new[]</code> (you did, right ?) to allocate it.</p>\n<p>If a constructed object can be in such a state that calling the destructor would be invalid, then there's something seriously wrong with your object. You need to make your destructor work in all cases.</p>\n", "LastActivityDate": "2013-06-27T13:43:40.253", "CommentCount": "0", "CreationDate": "2013-06-27T13:43:40.253", "ParentId": "17344727", "Score": "3", "OwnerUserId": "822669"}, "17344859": {"Id": "17344859", "PostTypeId": "2", "Body": "<p><code>delete[] objects</code> is <em>similar</em> (but not identical) to:</p>\n<pre><code>for (i = 0; i &lt; num_of_objects; ++i) {\n    delete objects[i];\n}\n</code></pre>\n<p>since <code>delete</code> calls the destructor, you can expect <code>delete[]</code> to do the same.</p>\n", "LastActivityDate": "2013-06-27T13:43:35.107", "CommentCount": "0", "CreationDate": "2013-06-27T13:43:35.107", "ParentId": "17344727", "Score": "1", "OwnerUserId": "1084"}, "bq_ids": {"n4140": {"so_17344727_17344873_0": {"length": 29, "quality": 0.9666666666666667, "section_id": 6110}}, "n3337": {"so_17344727_17344873_0": {"length": 29, "quality": 0.9666666666666667, "section_id": 5876}}, "n4659": {"so_17344727_17344873_0": {"length": 29, "quality": 0.9666666666666667, "section_id": 7607}}}, "17344986": {"Id": "17344986", "PostTypeId": "2", "Body": "<p>Yes, <code>delete[]</code> guarantees destructors are called on every object.</p>\n<p>Depending on your use case, using <a href=\"http://www.boost.org/doc/libs/1_53_0/libs/ptr_container/doc/ptr_container.html\" rel=\"nofollow\">Boost pointer containers</a>, or simply containers of smart pointers, might make it a lot easier to have (exception safe) collection of pointers.</p>\n", "LastActivityDate": "2013-06-27T13:48:50.370", "CommentCount": "0", "CreationDate": "2013-06-27T13:48:50.370", "ParentId": "17344727", "Score": "0", "OwnerUserId": "5822"}, "17344727": {"ViewCount": "6298", "Body": "<p>I am writing a template class which internally manages an array of the given type. Like this:</p>\n<pre><code>template&lt;typename T&gt;\nclass Example {\n    // ...\nprivate:\n    T* objects; // allocated in c'tor (array), deleted in d'tor\n    // ...\n};\n</code></pre>\n<p>I was wondering if C++ calls the destructor of each object in <code>objects</code> when I delete it via <code>delete[] objects;</code>.</p>\n<p>I need to know this, because the objects in my class do not contain sensible values all the time, so the destructors should not be called when they don't.</p>\n<p>Additionally, I'd like to know if the destructors would be called if I declared a fixed-sized array like <code>T objects[100]</code> as part of <code>Example&lt;T&gt;</code>.</p>\n", "AcceptedAnswerId": "17344873", "Title": "Does delete[] call destructors?", "CreationDate": "2013-06-27T13:37:51.510", "Id": "17344727", "CommentCount": "8", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2015-07-10T21:03:02.570", "LastEditorUserId": "4370109", "LastActivityDate": "2015-07-10T21:03:02.570", "Score": "8", "OwnerUserId": "2111790", "Tags": "<c++><delete-operator>", "AnswerCount": "6"}, "17344867": {"Id": "17344867", "PostTypeId": "2", "Body": "<p><code>delete []</code> does call the destructor for each element of the array. Same happens for a member array (your <code>T objects[100]</code>).</p>\n<p>You want to keep it as pointer, and design the destructor (and copy constructor, and copy assignment operator, see <a href=\"https://stackoverflow.com/questions/4782757/rule-of-three-becomes-rule-of-five-with-c11\">rule of three/five</a>) for your template to deal with \"non-sensible\" values pointed to by <code>objects</code>.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2013-06-27T13:43:43.107", "Score": "1", "CreationDate": "2013-06-27T13:43:43.107", "ParentId": "17344727", "CommentCount": "0", "OwnerUserId": "106671", "LastEditDate": "2017-05-23T12:02:04.963"}});