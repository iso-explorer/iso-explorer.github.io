post_cb({"bq_ids": {"n4140": {"so_44369648_44370539_5": {"length": 21, "quality": 0.9130434782608695, "section_id": 3875}, "so_44369648_44370539_2": {"length": 8, "quality": 0.8888888888888888, "section_id": 6970}, "so_44369648_44370539_3": {"length": 10, "quality": 0.9090909090909091, "section_id": 6971}, "so_44369648_44370539_0": {"length": 22, "quality": 0.8461538461538461, "section_id": 6260}, "so_44369648_44370539_4": {"length": 7, "quality": 1.0, "section_id": 6262}, "so_44369648_44370539_1": {"length": 6, "quality": 1.0, "section_id": 6261}}, "n3337": {"so_44369648_44370539_5": {"length": 21, "quality": 0.9130434782608695, "section_id": 3735}, "so_44369648_44370539_2": {"length": 8, "quality": 0.8888888888888888, "section_id": 6717}, "so_44369648_44370539_3": {"length": 10, "quality": 0.9090909090909091, "section_id": 6718}, "so_44369648_44370539_0": {"length": 22, "quality": 0.8461538461538461, "section_id": 6020}, "so_44369648_44370539_4": {"length": 7, "quality": 1.0, "section_id": 6022}, "so_44369648_44370539_1": {"length": 6, "quality": 1.0, "section_id": 6021}}, "n4659": {"so_44369648_44370539_5": {"length": 13, "quality": 0.5652173913043478, "section_id": 4695}, "so_44369648_44370539_2": {"length": 8, "quality": 0.8888888888888888, "section_id": 6310}, "so_44369648_44370539_3": {"length": 10, "quality": 0.9090909090909091, "section_id": 6311}, "so_44369648_44370539_0": {"length": 22, "quality": 0.8461538461538461, "section_id": 7764}, "so_44369648_44370539_4": {"length": 7, "quality": 1.0, "section_id": 7766}, "so_44369648_44370539_1": {"length": 6, "quality": 1.0, "section_id": 7765}}}, "44370539": {"Id": "44370539", "PostTypeId": "2", "Body": "<p>If we look at [headers] paragraphs 5 and 6 we have</p>\n<blockquote>\n<p id=\"so_44369648_44370539_0\">Names which are defined as macros in C shall be defined as macros in the C++ standard library, even if C grants license for implementation as functions. [ Note: The names defined as macros in C include the following: <code>assert</code>, <code>offsetof</code>, <code>setjmp</code>, <code>va_arg</code>, <code>va_end</code>, and <code>va_start</code>. \u2014end note ]</p>\n<p id=\"so_44369648_44370539_1\">Names that are defined as functions in C shall be defined as functions in the C++ standard library.</p>\n</blockquote>\n<p>So, if it is defined as a macro in C, it will be a macro in C++.  There are a couple of exceptions though.  from [support.runtime] paragraphs 7 and 8</p>\n<blockquote>\n<p id=\"so_44369648_44370539_2\">The header <code>&lt;cstdalign&gt;</code> and the header <code>&lt;stdalign.h&gt;</code> shall not define a macro named <code>alignas</code>.</p>\n<p id=\"so_44369648_44370539_3\">The header <code>&lt;cstdbool&gt;</code> and the header <code>&lt;stdbool.h&gt;</code> shall not define macros named <code>bool</code>, <code>true</code>, or <code>false</code>.</p>\n</blockquote>\n<p>Although that those exceptions are covered by [headers]/7 as well</p>\n<blockquote>\n<p id=\"so_44369648_44370539_4\">Identifiers that are keywords or operators in C++ shall not be defined as macros in C++ standard library headers.</p>\n</blockquote>\n<p>There is also an exception that all classification macros defined in 7.12.3 Classification macros be overloaded by functions per [c.math]/10</p>\n<blockquote>\n<p id=\"so_44369648_44370539_5\">The classification/comparison functions behave the same as the C macros with the corresponding names defined in 7.12.3, Classification macros, and 7.12.14, Comparison macros in the C Standard. Each function is overloaded for the three floating-point types, as follows:</p>\n<pre><code>int fpclassify(float x);\nbool isfinite(float x);\nbool isinf(float x);\nbool isnan(float x);\nbool isnormal(float x);\nbool signbit(float x);\nbool isgreater(float x, float y);\nbool isgreaterequal(float x, float y);\nbool isless(float x, float y);\nbool islessequal(float x, float y);\nbool islessgreater(float x, float y);\nbool isunordered(float x, float y);\nint fpclassify(double x);\nbool isfinite(double x);\nbool isinf(double x);\nbool isnan(double x);\nbool isnormal(double x);\nbool signbit(double x);\nbool isgreater(double x, double y);\nbool isgreaterequal(double x, double y);\nbool isless(double x, double y);\nbool islessequal(double x, double y);\nbool islessgreater(double x, double y);\nbool isunordered(double x, double y);\nint fpclassify(long double x);\nbool isfinite(long double x);\nbool isinf(long double x);\nbool isnan(long double x);\nbool isnormal(long double x);\nbool signbit(long double x);\nbool isgreater(long double x, long double y);\nbool isgreaterequal(long double x, long double y);\nbool isless(long double x, long double y);\nbool islessequal(long double x, long double y);\nbool islessgreater(long double x, long double y);\nbool isunordered(long double x, long double y);\n</code></pre>\n</blockquote>\n", "LastEditorUserId": "4342498", "LastActivityDate": "2017-06-05T17:18:44.787", "Score": "3", "CreationDate": "2017-06-05T13:51:31.513", "ParentId": "44369648", "CommentCount": "6", "OwnerUserId": "4342498", "LastEditDate": "2017-06-05T17:18:44.787"}, "44369648": {"ViewCount": "57", "Body": "<p>I asked a question <a href=\"https://stackoverflow.com/q/37124192/2642059\">here</a> about <a href=\"http://en.cppreference.com/w/cpp/error/assert\" rel=\"nofollow noreferrer\"><code>assert</code></a> which is implemented in the standard as a macro, not a function.</p>\n<p>This had caused me an issue because the way that <code>assert</code> appears to be a function in the way it takes a parameter: <code>assert(true)</code> Thus I tried to use it as: <code>std::assert(true)</code> and of course being a macro that didn't work.</p>\n<p>My question is this: Are there any other macros provided by the standard library which would appear as functions that take parameters?</p>\n", "AcceptedAnswerId": "44370539", "Title": "What Standard Calls are Actually Macros", "CreationDate": "2017-06-05T13:05:33.427", "Id": "44369648", "CommentCount": "8", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2017-06-05T17:18:44.787", "Score": "1", "OwnerUserId": "2642059", "Tags": "<c++><parameters><macros><namespaces><assert>", "AnswerCount": "1"}});