post_cb({"bq_ids": {"n4140": {"so_47989217_47989380_1": {"length": 34, "quality": 0.918918918918919, "section_id": 5510}, "so_47989217_47989380_0": {"length": 17, "quality": 1.0, "section_id": 5884}}, "n3337": {"so_47989217_47989380_0": {"length": 17, "quality": 1.0, "section_id": 5655}, "so_47989217_47989380_1": {"length": 34, "quality": 0.918918918918919, "section_id": 5296}}, "n4659": {"so_47989217_47989380_0": {"length": 17, "quality": 1.0, "section_id": 7367}, "so_47989217_47989380_1": {"length": 34, "quality": 0.918918918918919, "section_id": 6945}}}, "47989380": {"Id": "47989380", "PostTypeId": "2", "Body": "<p>The reason (2) works is because of these two:</p>\n<ol>\n<li><p><a href=\"https://timsong-cpp.github.io/cppwp/n4659/class.mfct#4\" rel=\"noreferrer\">[class.mfct]/4</a></p>\n<blockquote>\n<p id=\"so_47989217_47989380_0\">If the definition of a member function is lexically outside its class\n  definition, the member function name shall be qualified by its class\n  name using the \u200b::\u200b operator.</p>\n</blockquote></li>\n<li><p><a href=\"https://timsong-cpp.github.io/cppwp/n4659/namespace.udir#2\" rel=\"noreferrer\">[namespace.udir]/2</a> (emphasis mine)</p>\n<blockquote>\n<p id=\"so_47989217_47989380_1\">A using-directive specifies that <strong>the names in the nominated namespace\n  can be used in the scope in which the using-directive appears after\n  the using-directive</strong>. During unqualified name lookup, the names appear\n  as if they were declared in the nearest enclosing namespace which\n  contains both the using-directive and the nominated namespace. [\u2009Note:\n  In this context, \u201ccontains\u201d means \u201ccontains directly or indirectly\u201d.\n  \u2009\u2014\u2009end note\u2009]</p>\n</blockquote></li>\n</ol>\n<p>The directive simply lets you name <code>S</code> for the <code>::</code> operator as if you were inside the <code>N</code> namespace (as you are in (1)). But I wouldn't do that. Scoping is good. Definitions should be scoped too.</p>\n", "LastActivityDate": "2017-12-27T09:15:08.010", "Score": "5", "CreationDate": "2017-12-27T09:15:08.010", "ParentId": "47989217", "CommentCount": "0", "OwnerUserId": "817643"}, "47989217": {"ViewCount": "41", "Body": "<p>I have the following class definition in <code>.h</code> file:</p>\n<pre><code>namespace N {\n    struct S {\n        S(); // no definition for member here    \n    };\n}\n</code></pre>\n<p>And I would like to write definition for class constructor (member in general) in <code>.cpp</code> file. I consider the following two cases:</p>\n<ol>\n<li><pre><code>namespace N {\n    S::S() { /* definition */ }  \n}\n</code></pre></li>\n<li><pre><code>using namespace N;\nS::S() { /* definition */ }  \n</code></pre></li>\n</ol>\n<p>I'm slightly confused why the second is working at all, because never saw this way definition until today. Why the second is working? Some citing from the Standard would be appreciated.</p>\n<p>What are the nuances of using one approach instead of the other? Should I prefer the first or the second form?</p>\n", "AcceptedAnswerId": "47989380", "Title": "using namespace for function-member definition", "CreationDate": "2017-12-27T09:03:04.087", "Id": "47989217", "CommentCount": "5", "PostTypeId": "1", "LastActivityDate": "2017-12-27T09:26:38.113", "Score": "3", "OwnerUserId": "3240681", "Tags": "<c++><namespaces><language-lawyer>", "AnswerCount": "2"}, "47989450": {"Id": "47989450", "PostTypeId": "2", "Body": "<p>In this particular example you have declared only one structure in the namespace and defined the function in a separate .cpp file, so it doesn't matter if you use 1 or 2. </p>\n<p>Had you declared any other identifiers in the namespace, then 1 should be preferred over 2 as the using declaration kind of defeats the purpose of having a namespace.</p>\n", "LastEditorUserId": "8555635", "LastActivityDate": "2017-12-27T09:26:38.113", "Score": "0", "CreationDate": "2017-12-27T09:20:15.307", "ParentId": "47989217", "CommentCount": "0", "OwnerUserId": "8555635", "LastEditDate": "2017-12-27T09:26:38.113"}});