post_cb({"36507663": {"ParentId": "36507520", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>In this example, <code>c</code> is statically upcast to B, and then compared with <code>c_as_b</code> yielding true.</p>\n", "OwnerUserId": "5245033", "LastEditorUserId": "5245033", "LastEditDate": "2016-04-08T20:10:49.253", "Id": "36507663", "Score": "1", "CreationDate": "2016-04-08T19:20:47.077", "LastActivityDate": "2016-04-08T20:10:49.253"}, "36507662": {"ParentId": "36507520", "CommentCount": "2", "Body": "<p>The pointer equality comparison <code>c_as_b == &amp;c</code> will do an implicit pointer conversion. From [expr.eq]:</p>\n<blockquote>\n<p id=\"so_36507520_36507662_0\">If at least one of the operands is a pointer, pointer conversions (4.10), function pointer conversions (4.12),\n  and qualification conversions (4.4) are performed on both operands to bring them to their composite pointer\n  type (Clause 5).</p>\n</blockquote>\n<p>Basically, <code>&amp;c</code> will be converted to a <code>B*</code> so that the comparison can happen. At which point, it is exactly the same as <code>c_as_b</code> (since that's how you got that pointer to begin with), so they compare equal. </p>\n", "OwnerUserId": "2069064", "PostTypeId": "2", "Id": "36507662", "Score": "5", "CreationDate": "2016-04-08T19:20:46.850", "LastActivityDate": "2016-04-08T19:20:46.850"}, "36508080": {"ParentId": "36507520", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>To answer the part of the question that nobody touched on: <strong>Can you give a similar small example where the == results in false?</strong></p>\n<p>Here is a similar example where the <code>==</code> results in false, using <code>dynamic_cast&lt;void*&gt;</code> makes the same comparison true, and commented out is a way that <code>==</code> results in a compile time error:</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nstruct A { virtual ~A() {} };\nstruct B : A { };\nstruct C : A { };\nstruct D : B, C { };\n\nint main() {\n    D d;\n    C* c = &amp;d;\n    B* b = &amp;d;\n    A* a_through_b = b; // &amp;d results in error: 'A' is an ambiguous base of 'D'\n    A* a_through_c = c;\n    cout &lt;&lt; \"&amp;d:           \" &lt;&lt; &amp;d &lt;&lt; endl\n         &lt;&lt; \"c :           \" &lt;&lt; c &lt;&lt; endl\n         &lt;&lt; \"b :           \" &lt;&lt; b &lt;&lt; endl\n         &lt;&lt; \"a_through_b : \" &lt;&lt; a_through_b &lt;&lt; endl\n         &lt;&lt; \"a_through_c : \" &lt;&lt; a_through_c &lt;&lt; endl;\n    cout &lt;&lt; (a_through_b == a_through_c ? \"a_through_b == a_through_c\" : \"a_through_b != a_through_c\") &lt;&lt; endl;\n    cout &lt;&lt; (dynamic_cast&lt;void*&gt;(a_through_b) == dynamic_cast&lt;void*&gt;(a_through_c) ? \"dynamic_cast&lt;void*&gt;(a_through_b) == dynamic_cast&lt;void*&gt;(a_through_c)\" : \"dynamic_cast&lt;void*&gt;(a_through_b) != dynamic_cast&lt;void*&gt;(a_through_c)\") &lt;&lt; endl;\n    //cout &lt;&lt; (a_through_c == &amp;d) &lt;&lt; endl; // error: 'A' is an ambiguous base of 'D'\n    cout &lt;&lt; (dynamic_cast&lt;void*&gt;(a_through_c) == dynamic_cast&lt;void*&gt;(&amp;d) ? \"dynamic_cast&lt;void*&gt;(a_through_c) == dynamic_cast&lt;void*&gt;(&amp;d)\" : \"dynamic_cast&lt;void*&gt;(a_through_c) != dynamic_cast&lt;void*&gt;(&amp;d)\") &lt;&lt; endl;\n    return 0;\n}\n</code></pre>\n<p>Sample output:</p>\n<pre><code>&amp;d:           0xbff6d558\nc :           0xbff6d55c\nb :           0xbff6d558\na_through_b : 0xbff6d558\na_through_c : 0xbff6d55c\na_through_b != a_through_c\ndynamic_cast&lt;void*&gt;(a_through_b) == dynamic_cast&lt;void*&gt;(a_through_c)\ndynamic_cast&lt;void*&gt;(a_through_c) == dynamic_cast&lt;void*&gt;(&amp;d)\n</code></pre>\n", "OwnerUserId": "1007353", "LastEditorUserId": "1007353", "LastEditDate": "2016-04-08T20:24:32.137", "Id": "36508080", "Score": "-1", "CreationDate": "2016-04-08T19:44:38.873", "LastActivityDate": "2016-04-08T20:24:32.137"}, "36507520": {"CommentCount": "8", "AcceptedAnswerId": "36507662", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2016-04-08T19:12:48.917", "LastActivityDate": "2016-04-08T20:24:32.137", "LastEditDate": "2017-05-23T11:45:06.000", "ViewCount": "81", "FavoriteCount": "1", "Title": "How are two different inherited pointer addresses equal?", "Id": "36507520", "Score": "4", "Body": "<p>After reading <a href=\"https://stackoverflow.com/questions/5662719/c-comparing-pointers-of-base-and-derived-classes\" title=\"C++: Comparing pointers of base and derived classes\">C++: Comparing pointers of base and derived classes</a>, I thought for sure this wouldn't work.  </p>\n<p>When I executed this, the printed addresses for <code>c_as_b</code> and <code>&amp;c</code> were different, so why does this print \"seems safe to compare pointers in same hierarchy\"?  What is being compared besides the printed addresses that could result in true?</p>\n<p>Can you give a similar small example where the <code>==</code> results in false?</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nstruct A { std::string s; };\nstruct B { int i; };\nstruct C : A, B { double d; };\n\nint main() {\n    C c;\n    B* c_as_b = &amp;c;\n    A* c_as_a = &amp;c;\n    cout &lt;&lt; \"c_as_a: \" &lt;&lt; c_as_a &lt;&lt; endl\n         &lt;&lt; \"c_as_b: \" &lt;&lt; c_as_b &lt;&lt; endl\n         &lt;&lt; \"&amp;c:     \" &lt;&lt; &amp;c &lt;&lt; endl;\n    cout &lt;&lt; (c_as_b == &amp;c ? \"seems safe to compare pointers in same hierarchy\" : \"definately not safe\") &lt;&lt; endl;\n    return 0;\n}\n</code></pre>\n<p>Sample output:</p>\n<pre><code>c_as_a: 0xbfb98f10\nc_as_b: 0xbfb98f14\n&amp;c:     0xbfb98f10\nseems safe to compare pointers in same hierarchy\n</code></pre>\n", "Tags": "<c++><pointers><inheritance>", "OwnerUserId": "1007353", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_36507520_36507662_0": {"section_id": 6155, "quality": 0.782608695652174, "length": 18}}, "n3337": {"so_36507520_36507662_0": {"section_id": 5933, "quality": 0.6521739130434783, "length": 15}}, "n4659": {"so_36507520_36507662_0": {"section_id": 7652, "quality": 0.9130434782608695, "length": 21}}}});