post_cb({"23906610": {"ParentId": "23906439", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>This rule regulates where the compiler is looking for functions or classes marked as <code>friend</code>. It regulates, that the compiler will only check functions or classes in the same namespace as the class which allows <code>friend</code> access. It will not check functions or classes in other or outer namespaces.</p>\n<hr>\n<p>This code will produce an error:</p>\n<pre><code>#include &lt;iostream&gt;\n\nnamespace a {\n  class Q { int x; friend void foo(Q q); };\n}\n\n// function foo is in outer namespace (not in a)\nvoid foo(a::Q q) { std::cout &lt;&lt; q.x &lt;&lt; std::endl; }\n//                              ^^^ ERROR q.x is private\n\nint main() {\n    a::Q q;\n    foo(q);\n}\n</code></pre>\n<p>The reason is that the function <code>foo</code> is not in the namespace <code>a</code>, but in an outer namespace (in this case the global namespace). Thus <code>foo</code> does not match the friend declaration in <code>Q</code>.</p>\n<hr>\n<p>This code will work:</p>\n<pre><code>#include &lt;iostream&gt;\n\nnamespace a {\n  class Q { int x; friend void foo(Q q); };\n}\n\n// function foo is in same namespace as Q\nnamespace a {\n  void foo(Q q) { std::cout &lt;&lt; q.x &lt;&lt; std::endl; }\n//                            ^^^ OK access allowed by friend\n}\n\nint main() {\n    a::Q q;\n    a::foo(q);\n}\n</code></pre>\n<p>This works because the function <code>foo</code> is now in the same namespace as <code>Q</code>. Thus <code>foo</code> matches the friend declaration in <code>Q</code>.</p>\n</hr></hr>", "OwnerUserId": "316448", "LastEditorUserId": "316448", "LastEditDate": "2014-05-28T08:50:29.117", "Id": "23906610", "Score": "1", "CreationDate": "2014-05-28T08:37:42.150", "LastActivityDate": "2014-05-28T08:50:29.117"}, "23906684": {"ParentId": "23906439", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Sure. This code works (both classes are in the same namespace):</p>\n<pre><code>namespace Foo {\n  class Bar\n  {\n  friend class FooBar;\n  public:\n    Bar() : i(0){}\n  private:\n    int i;\n  };\n\n  class FooBar\n  {\n    FooBar( Bar &amp; other )\n    {\n      other.i = 1;\n    }\n  };\n}//namespace Foo\n</code></pre>\n<p>And this code fails (the friend class is outside of the <code>Foo</code>'s enclosing namespace, thus the lookup fails and you see the the <code>int Foo::i is private within this context</code> error):</p>\n<pre><code>namespace Foo {\n  class Bar\n  {\n  friend class FooBar;\n  public:\n    Bar() : i(0){}\n  private:\n    int i;\n  };\n}//namespace Foo\n\nclass FooBar\n{\n    FooBar( Foo::Bar &amp; other )\n    {\n        other.i = 1;//Oops :'(\n    }\n};\n</code></pre>\n", "OwnerUserId": "1490355", "LastEditorUserId": "1490355", "LastEditDate": "2014-05-28T08:46:24.243", "Id": "23906684", "Score": "1", "CreationDate": "2014-05-28T08:40:57.050", "LastActivityDate": "2014-05-28T08:46:24.243"}, "23906439": {"CommentCount": "1", "ViewCount": "41", "PostTypeId": "1", "LastEditorUserId": "1498329", "CreationDate": "2014-05-28T08:28:38.133", "LastActivityDate": "2014-05-28T09:32:34.893", "Title": "Looking for a prior declaration, introduced by friend declaration", "AcceptedAnswerId": "23906684", "LastEditDate": "2014-05-28T09:32:34.893", "Id": "23906439", "Score": "1", "Body": "<p>There is a quote from 3.4.1/7:</p>\n<blockquote>\n<p id=\"so_23906439_23906439_0\">When looking for a prior declaration of a class or function introduced\n  by a friend declaration, scopes outside of the innermost enclosing\n  namespace scope are not considered;</p>\n</blockquote>\n<p>Can you get an example to demonstrate this rule?</p>\n", "Tags": "<c++><namespaces><friend>", "OwnerUserId": "2786156", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_23906439_23906439_0": {"section_id": 7093, "quality": 1.0, "length": 15}}, "n3337": {"so_23906439_23906439_0": {"section_id": 6837, "quality": 1.0, "length": 15}}, "n4659": {"so_23906439_23906439_0": {"section_id": 8594, "quality": 1.0, "length": 15}}}});