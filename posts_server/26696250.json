post_cb({"bq_ids": {"n4140": {"so_26696250_26696318_0": {"length": 17, "quality": 0.7727272727272727, "section_id": 5234}, "so_26696250_26696318_1": {"length": 16, "quality": 0.7619047619047619, "section_id": 5242}}, "n3337": {"so_26696250_26696318_0": {"length": 17, "quality": 0.7727272727272727, "section_id": 5031}, "so_26696250_26696318_1": {"length": 16, "quality": 0.7619047619047619, "section_id": 5039}}, "n4659": {"so_26696250_26696318_0": {"length": 17, "quality": 0.7727272727272727, "section_id": 6657}, "so_26696250_26696318_1": {"length": 16, "quality": 0.7619047619047619, "section_id": 6665}}}, "26696318": {"Id": "26696318", "PostTypeId": "2", "Body": "<p><code>regex_match</code> only returns <code>true</code> when the entire input sequence has been matched, while <code>regex_search</code> will succeed even if only a sub-sequence matches the <code>regex</code>. </p>\n<p>Quoting from N3337,</p>\n<blockquote>\n<p id=\"so_26696250_26696318_0\"><em>\u00a728.11.2/2</em> <code>regex_match</code> <em>[re.alg.match]</em><br/><br/>\n<em>Effects:</em> Determines whether there is a match between the regular expression <code>e</code>, and <strong>all of the character sequence <code>[first,last)</code></strong>. <code>...</code> Returns <code>true</code> if such a match exists, <code>false</code> otherwise.</p>\n</blockquote>\n<p>The above description is for the <code>regex_match</code> overload that takes a pair of iterators to the sequence to be matched. The remaining overloads are defined in terms of this overload.</p>\n<p>The corresponding <code>regex_search</code> overload is described as </p>\n<blockquote>\n<p id=\"so_26696250_26696318_1\"><em>\u00a728.11.3/2</em> <code>regex_search</code> <em>[re.alg.search]</em><br/><br/>\n<em>Effects:</em> Determines whether there is <strong>some sub-sequence within <code>[first,last)</code></strong> that matches the regular expression <code>e</code>. <code>...</code> Returns <code>true</code> if such a sequence exists, <code>false</code> otherwise.</p>\n</blockquote>\n<hr>\n<p>In your example, if you modify the <code>regex</code> to <code>r{R\"(.*?\\s\\d{2}\\s.*)\"};</code> both <code>regex_match</code> and <code>regex_search</code> will succeed (but the match result is not just the day, but the entire date string).</p>\n<p><a href=\"http://coliru.stacked-crooked.com/a/7cecafd11147af0a\">Live demo</a> of a modified version of your example where the day is being captured and displayed by both <code>regex_match</code> and <code>regex_search</code>.</p>\n</hr>", "LastEditorUserId": "241631", "LastActivityDate": "2014-11-02T05:51:24.577", "Score": "17", "CreationDate": "2014-11-02T05:21:39.097", "ParentId": "26696250", "CommentCount": "2", "OwnerUserId": "241631", "LastEditDate": "2014-11-02T05:51:24.577"}, "26696307": {"Id": "26696307", "PostTypeId": "2", "Body": "<p>It's very simple. <code>regex_search</code> looks through the string to find if any portion of the string matches the regex. <code>regex_match</code> checks if the whole string is a match for the regex.  As a simple example, given the following string:</p>\n<pre><code>\"one two three four\"\n</code></pre>\n<p>If I use <code>regex_search</code> on that string with the expression <code>\"three\"</code>, it will succeed, because <code>\"three\"</code> can be found in <code>\"one two three four\"</code></p>\n<p>However, if I use <code>regex_match</code> instead, it will fail, because <code>\"three\"</code> is not the whole string, but only a part of it.</p>\n", "LastActivityDate": "2014-11-02T05:20:20.677", "CommentCount": "0", "CreationDate": "2014-11-02T05:20:20.677", "ParentId": "26696250", "Score": "11", "OwnerUserId": "440119"}, "26696250": {"ViewCount": "7377", "Body": "<p>Below program has been written to fetch the \"Day\" information using the C++11 <a href=\"http://en.cppreference.com/w/cpp/regex/regex_match\" rel=\"nofollow noreferrer\">std::regex_match</a> &amp; <a href=\"http://en.cppreference.com/w/cpp/regex/regex_search\" rel=\"nofollow noreferrer\">std::regex_search</a>. However, using the first method returns <code>false</code> and second method returns <code>true</code>(expected). I read the documentation and already existing SO question related to this, but I do not understand the difference between these two methods and when we should use either of them?  Can they both be used interchangeably for any common problem? </p>\n<p><a href=\"https://stackoverflow.com/questions/11628047/difference-between-regex-match-and-regex-search\">Difference between regex_match and regex_search?</a></p>\n<pre><code>#include&lt;iostream&gt;\n#include&lt;string&gt;\n#include&lt;regex&gt;\n\nint main()\n{\n    std::string input{ \"Mon Nov 25 20:54:36 2013\" };\n    //Day:: Exactly Two Number surrounded by spaces in both side\n    std::regex  r{R\"(\\s\\d{2}\\s)\"};\n    //std::regex  r{\"\\\\s\\\\d{2}\\\\s\"};\n    std::smatch match;\n\nif (std::regex_match(input,match,r)) {\n        std::cout &lt;&lt; \"Found\" &lt;&lt; \"\\n\";\n    } else {\n        std::cout &lt;&lt; \"Did Not Found\" &lt;&lt; \"\\n\";\n    }\n\n    if (std::regex_search(input, match,r)) {\n        std::cout &lt;&lt; \"Found\" &lt;&lt; \"\\n\";\n        if (match.ready()){\n            std::string out = match[0];\n            std::cout &lt;&lt; out &lt;&lt; \"\\n\";\n        }\n    }\n    else {\n        std::cout &lt;&lt; \"Did Not Found\" &lt;&lt; \"\\n\";\n    }\n}\n</code></pre>\n<h1>Output</h1>\n<pre><code>Did Not Found\n\nFound\n\n 25 \n</code></pre>\n<p>Why first regex method returns <code>false</code> in this case?. The <code>regex</code> seems to be correct so ideally both should have been returned <code>true</code>. I ran the above program by changing the <code>std::regex_match(input,match,r)</code> to <code>std::regex_match(input,r)</code> and found that it still returns <code>false.</code></p>\n<p>Could somebody explain the above example and, in general, use cases of these methods?</p>\n", "AcceptedAnswerId": "26696318", "Title": "Difference between std::regex_match & std::regex_search?", "CreationDate": "2014-11-02T05:06:59.457", "Id": "26696250", "CommentCount": "0", "FavoriteCount": "4", "PostTypeId": "1", "LastEditDate": "2017-05-23T11:45:26.457", "LastEditorUserId": "-1", "LastActivityDate": "2015-03-09T17:24:21.523", "Score": "17", "OwnerUserId": "2724703", "Tags": "<c++><regex><c++11><visual-studio-2013><gcc4.9>", "AnswerCount": "2"}});