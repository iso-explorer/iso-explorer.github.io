post_cb({"bq_ids": {"n4140": {"so_26780795_26780878_0": {"length": 34, "quality": 0.9714285714285714, "section_id": 7153}}, "n3337": {"so_26780795_26780878_0": {"length": 34, "quality": 0.9714285714285714, "section_id": 6897}}, "n4659": {"so_26780795_26780878_0": {"length": 23, "quality": 0.6571428571428571, "section_id": 8657}}}, "26780795": {"ViewCount": "140", "Body": "<p>I know that the order of initialization of static variables defined in different translation units (e.g. different cpp/lib/dll/so files) is undefined. Does it mean that the behavior of following program is not well defined?</p>\n<pre><code>#include &lt;vector&gt;\n\nstd::vector&lt;int&gt; v;\n\nint main()\n{\n    v.push_back(1);\n}\n</code></pre>\n<p>EDIT: Here I used STL vector as an example. But it could be an object of any other \"3rd party\" class. As such we wouldn't know if that object initialized via some other global variable. This means that in C++ it not safe to create even a single global object with nontrivial constructor.  Right?</p>\n", "Title": "Global objects are inherently unsafe?", "CreationDate": "2014-11-06T13:32:52.293", "LastActivityDate": "2014-11-06T16:13:22.627", "CommentCount": "5", "LastEditDate": "2014-11-06T14:00:15.193", "PostTypeId": "1", "LastEditorUserId": "3237841", "Id": "26780795", "Score": "3", "OwnerUserId": "3237841", "Tags": "<c++>", "AnswerCount": "3"}, "26780853": {"Id": "26780853", "PostTypeId": "2", "Body": "<p>Since there's only one global object being defined, there can be only one ordering of its initialization, and therefore there is no issue. </p>\n", "LastActivityDate": "2014-11-06T13:36:06.057", "CommentCount": "0", "CreationDate": "2014-11-06T13:36:06.057", "ParentId": "26780795", "Score": "0", "OwnerUserId": "656069"}, "26780878": {"Id": "26780878", "PostTypeId": "2", "Body": "<p>It's specified in [basic.start.init]/4:</p>\n<blockquote>\n<p id=\"so_26780795_26780878_0\">It is implementation-defined whether the dynamic initialization of a\n  non-local variable with static storage duration is done before the\n  first statement of main. If the initialization is deferred to some\n  point in time after the first statement of main, it shall occur before\n  the first odr-use (3.2) of any function or variable defined in the\n  same translation unit as the variable to be initialized.</p>\n</blockquote>\n<p>It is therefore defined that <code>v</code> is initialized before its first use in any function of this translation unit, including <code>main</code>. That implies that in this particular program <code>v</code> is initialized before the first statement of <code>main</code>. <br><br>\nThe <a href=\"http://www.parashift.com/c++-faq/static-init-order.html\" rel=\"nofollow\">static initialization order fiasco</a> occurs when <strong>multiple</strong> variables in <strong>different</strong> translation units depend on their relative order of initialization; The initializations may be indeterminately sequenced with respect to each other, depending on their initialization.</br></br></p>\n", "LastEditorUserId": "3647361", "LastActivityDate": "2014-11-06T16:13:22.627", "Score": "6", "CreationDate": "2014-11-06T13:37:44.017", "ParentId": "26780795", "CommentCount": "0", "OwnerUserId": "3647361", "LastEditDate": "2014-11-06T16:13:22.627"}, "26780836": {"Id": "26780836", "PostTypeId": "2", "Body": "<p>No, because when you use v in main, it is perfectly defined. The static initialization phase takes place before you use v in main ...</p>\n<p>The problem arise if you use 2 globals in different translation units and there is a dependency between the two. See this <a href=\"http://www.parashift.com/c++-faq/static-init-order.html\" rel=\"nofollow\">C++ FAQ lite</a> for an explanation. The next items in the FAQ explains how to avoid the 'fiasco'.</p>\n<p>The problem of static initialization made globals worse in C++ than in any other language. Good library writers know the problem and avoid the static order initialization fiasco. And even if not, if the library is well spread, someone will hit the problem and, I hope, fix it. But 3rd party libs are not always well written, they can be libraries written in your company by an ignorant new to C++ programmer ...</p>\n<p>So, yes, it is unsafe, you're right. And in C++ avoid globals even more than in other languages !</p>\n<p>Note: Columbo as pointed out that the standard does not not exactly say that v is defined before entering main (see his answer). No practical difference in your instance.</p>\n", "LastEditorUserId": "135549", "LastActivityDate": "2014-11-06T14:12:53.047", "Score": "8", "CreationDate": "2014-11-06T13:35:08.063", "ParentId": "26780795", "CommentCount": "4", "OwnerUserId": "135549", "LastEditDate": "2014-11-06T14:12:53.047"}});