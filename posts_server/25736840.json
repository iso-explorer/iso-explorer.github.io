post_cb({"bq_ids": {"n4140": {"so_25736840_25738746_1": {"length": 5, "quality": 0.625, "section_id": 7195}, "so_25736840_25736840_0": {"length": 28, "quality": 0.875, "section_id": 7196}}, "n3337": {"so_25736840_25738746_1": {"length": 5, "quality": 0.625, "section_id": 6939}, "so_25736840_25736840_0": {"length": 28, "quality": 0.875, "section_id": 6940}}, "n4659": {"so_25736840_25738746_1": {"length": 5, "quality": 0.625, "section_id": 8704}, "so_25736840_25736840_0": {"length": 28, "quality": 0.875, "section_id": 8705}}}, "25736885": {"Id": "25736885", "PostTypeId": "2", "Body": "<p>\"storage location\" is the section of memory (in the abstract machine -- in reality it could be RAM, cache, register, optimized out...) where the object is stored.</p>\n<p>After an object's lifetime ends, it no longer exists, therefore it does not have a storage location. \"changing of storage location\" is not possible (and that text does not occur in your standard quote).</p>\n<p>In this example, the storage location is the <code>sizeof(int)</code> bytes starting at the memory address <code>&amp;a</code> . Initially it has an object called <code>a</code>; and then it has a new object (also called <code>a</code>).</p>\n", "LastActivityDate": "2014-09-09T04:48:37.677", "CommentCount": "1", "CreationDate": "2014-09-09T04:48:37.677", "ParentId": "25736840", "Score": "3", "OwnerUserId": "1505939"}, "25736840": {"ViewCount": "139", "Body": "<p>What is the variable's \"storage location\"? One is using in the following chunk of the Standard:</p>\n<blockquote>\n<p id=\"so_25736840_25736840_0\">If a program ends the lifetime of an object of type T with static\n  (3.7.1), thread (3.7.2), or automatic (3.7.3) storage duration and if\n  T has a non-trivial destructor,41 the program must ensure that an\n  object of the original type <strong>occupies that same storage location</strong> when\n  the implicit destructor call takes place; otherwise the behavior of\n  the program is undefined.</p>\n</blockquote>\n<p>Consider the following code:</p>\n<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nstruct A \n{ \n    int a = 5;\n    A(){ cout &lt;&lt; \"A()\" &lt;&lt; endl; }\n    ~A(){ cout &lt;&lt; \"~A()\" &lt;&lt; endl; }\n};\n\nstruct B : A{ };\n\nint main()\n{\n    A a;\n    new (&amp;a) B;\n}\n</code></pre>\n<p>Does the storage location of original object changed at the line <code>new (&amp;a) B</code>? I know that at this line the lifetime of <code>a</code> ends. How does end of the lifetime bound to the \"changing of storage location\"? I'm confused about these concepts.</p>\n", "AcceptedAnswerId": "25738746", "Title": "Variable's storage location", "CreationDate": "2014-09-09T04:42:59.633", "Id": "25736840", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2014-09-09T05:51:54.200", "LastEditorUserId": "2297448", "LastActivityDate": "2014-09-09T07:17:17.477", "Score": "1", "OwnerUserId": "2786156", "Tags": "<c++>", "AnswerCount": "2"}, "25738746": {"Id": "25738746", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_25736840_25738746_0\">What is the variable's \"storage location\"?</p>\n</blockquote>\n<p>The region of memory used to store the object's data. This is fixed for the objects lifetime (optimisations might mean that the data is sometimes cached in registers or whatever; but the program must behave as if the object is at a fixed memory location throughout its lifetime).</p>\n<blockquote>\n<p id=\"so_25736840_25738746_1\">Does the storage location of original object changed at the line <code>new (&amp;a) B</code>? </p>\n</blockquote>\n<p>No, the location of an object never changes. This creates a new object, of a different type, in the same memory location. In other words, it ends the lifetime of the original object - without calling its destructor - and reuses the memory for a different object.</p>\n<p>The quote is saying that, since the variable has automatic storage duration, the destructor of <code>A</code> will be called when it goes out of scope. This would be a very bad thing to do if there's no longer a valid <code>A</code> object there; hence the rule that you must restore an <code>A</code> before it's destroyed.</p>\n", "LastActivityDate": "2014-09-09T07:17:17.477", "CommentCount": "3", "CreationDate": "2014-09-09T07:17:17.477", "ParentId": "25736840", "Score": "1", "OwnerUserId": "204847"}});