post_cb({"bq_ids": {"n4140": {"so_26323471_26323825_1": {"length": 29, "quality": 0.9354838709677419, "section_id": 6030}, "so_26323471_26323471_0": {"length": 13, "quality": 0.9285714285714286, "section_id": 3280}, "so_26323471_26323825_0": {"length": 26, "quality": 0.9285714285714286, "section_id": 5999}}, "n3337": {"so_26323471_26323825_1": {"length": 30, "quality": 0.967741935483871, "section_id": 5798}, "so_26323471_26323471_0": {"length": 13, "quality": 0.9285714285714286, "section_id": 3151}, "so_26323471_26323825_0": {"length": 26, "quality": 0.9285714285714286, "section_id": 5767}}, "n4659": {"so_26323471_26323471_0": {"length": 13, "quality": 0.9285714285714286, "section_id": 4042}}}, "26323471": {"ViewCount": "92", "Body": "<p>Consider the following simple example:</p>\n<pre><code>struct A \n{\n    int a;\n    A(int b);\n};\n\nA *p;\n\nA::A(int b) : a(b)\n{\n    p = this;\n    std::cout &lt;&lt; \"A()\" &lt;&lt; std::endl; \n} \n\n\n\nint main()\n{\n    A(10); //What is it?\n    std::cout &lt;&lt; p -&gt; a &lt;&lt; std::endl; //10\n}\n</code></pre>\n<p>I'm not sure that <code>N3797::8.5 [dcl.init]</code> may be applied here, because <code>N3797::8.5/1 [dcl.init]</code> says:</p>\n<blockquote>\n<p id=\"so_26323471_26323471_0\">A <em>declarator</em> can specify an initial value for the identifier being\n  declared. The identifier designates a variable being initialized</p>\n</blockquote>\n<p>In the case there is no declartor. Which means that rule is not applicable.</p>\n<p>If it's just a constructor call where does it specify int the Standard that expression of the form <code>class-name(argument_list)</code> allocate a fit amount of memory (What allocation function takes over that?) and initialize an object? I wish to acquire more details about how such expressions work?</p>\n", "AcceptedAnswerId": "26323825", "Title": "Is forced construction of unnamed variable like \"Foo(12,3);\" still a declarator?", "CreationDate": "2014-10-12T09:01:14.927", "LastActivityDate": "2016-03-17T10:51:54.060", "CommentCount": "5", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2016-03-17T10:51:54.060", "OwnerDisplayName": "user2953119", "LastEditorUserId": "3647361", "Id": "26323471", "Score": "2", "Tags": "<c++><language-lawyer>", "AnswerCount": "2"}, "26323789": {"Id": "26323789", "PostTypeId": "2", "Body": "<p>Since you don't give a name, <code>A(10)</code> produces a temporary object of type <code>A</code>. </p>\n<p>In the constructor of <code>A</code>, you assign the address of this temporary object to the pointer <code>p</code>. But the temporary object is destroyed at the end of the line <code>A(10);</code>. So you should not use the pointer <code>p</code> afterwards.</p>\n", "LastActivityDate": "2014-10-12T09:42:43.437", "CommentCount": "6", "CreationDate": "2014-10-12T09:42:43.437", "ParentId": "26323471", "Score": "2", "OwnerUserId": "3019065"}, "26323825": {"Id": "26323825", "PostTypeId": "2", "Body": "<pre><code>A(10);\n</code></pre>\n<p>This is a discarded-value expression. According to [expr.type.conv], </p>\n<blockquote>\n<p id=\"so_26323471_26323825_0\">A <em>simple-type-specifier</em> (7.1.6.2) or <em>typename-specifier</em> (14.6)\n  followed by a parenthesized <em>expression-list</em> constructs a value of\n  the specified type given the expression list. If the expression list\n  is a single expression, the type conversion expression is equivalent\n  (in definedness, and if defined in meaning) to the corresponding cast\n  expression (5.4).</p>\n</blockquote>\n<p>The 'corresponding cast expression' is <code>(A)10</code>, which in turn is equivalent to <code>static_cast&lt;A&gt;(10)</code> ([expr.cast]/4), and the <code>static_cast</code> is defined as [expr.static.cast]/4:</p>\n<blockquote>\n<p id=\"so_26323471_26323825_1\">Otherwise, an expression <code>e</code> can be explicitly converted to a type <code>T</code>\n  using a <code>static_cast</code> of the form <code>static_cast&lt;T&gt;(e)</code> if the declaration\n  <code>T t(e);</code> is well-formed, for some invented temporary variable <code>t</code>\n  (8.5). The effect of such an explicit conversion is the same as\n  performing the declaration and initialization and then using the\n  temporary variable as the result of the conversion.</p>\n</blockquote>\n<p>And there you have your declarator.</p>\n", "LastActivityDate": "2014-10-12T09:47:09.417", "CommentCount": "1", "CreationDate": "2014-10-12T09:47:09.417", "ParentId": "26323471", "Score": "2", "OwnerUserId": "3647361"}});