post_cb({"bq_ids": {"n4140": {"so_42997847_43007131_1": {"length": 11, "quality": 1.0, "section_id": 6185}, "so_42997847_43007131_3": {"length": 4, "quality": 0.8, "section_id": 6185}, "so_42997847_43007131_0": {"length": 13, "quality": 0.9285714285714286, "section_id": 6185}}, "n3337": {"so_42997847_43007131_1": {"length": 10, "quality": 0.9090909090909091, "section_id": 5946}}, "n4659": {"so_42997847_43007131_1": {"length": 11, "quality": 1.0, "section_id": 7687}, "so_42997847_43007131_3": {"length": 5, "quality": 1.0, "section_id": 7687}, "so_42997847_43007131_0": {"length": 12, "quality": 0.8571428571428571, "section_id": 7687}}}, "42997847": {"ViewCount": "69", "Body": "<p>I have 4 test cases and I believe that all of them are valid:</p>\n<pre><code>constexpr int f(int const&amp; /*unused*/){\n    return 1;\n}\n\nvoid g(int const&amp; p){\n    constexpr int a = f(p); // clang error, gcc valid\n\n    int v = 0;\n    constexpr int b = f(v); // clang valid, gcc valid\n\n    int const&amp; r = v;\n    constexpr int c = f(r); // clang error, gcc error\n\n    int n = p;\n    constexpr int d = f(n); // clang valid, gcc valid\n}\n\nint main(){\n    int p = 0;\n    g(p);\n}\n</code></pre>\n<p>Clang and GCC differ only in the first test case.</p>\n<p>I tested with clang 4 &amp; 5 (20170319) and with GCC 7.0.1 (20170221).</p>\n<p>If I'm right it would massively simplify the usage of boost::hana in static_assert's.</p>\n", "AcceptedAnswerId": "43007131", "Title": "constexpr with untouched non-constexpr arguments: Who is correct, clang or gcc?", "CreationDate": "2017-03-24T11:03:49.913", "Id": "42997847", "CommentCount": "0", "LastEditDate": "2017-03-24T19:03:39.640", "PostTypeId": "1", "LastEditorUserId": "2756719", "LastActivityDate": "2017-03-24T19:03:39.640", "Score": "4", "OwnerUserId": "4821621", "Tags": "<c++><c++11><c++14><constexpr>", "AnswerCount": "1"}, "43007131": {"Id": "43007131", "PostTypeId": "2", "Body": "<p><a href=\"https://timsong-cpp.github.io/cppwp/expr.const#2\" rel=\"nofollow noreferrer\">[expr.const]/2</a>:</p>\n<blockquote>\n<p id=\"so_42997847_43007131_0\">An expression <code>e</code> is a <em>core constant expression</em> unless the\n  evaluation of <code>e</code>, following the rules of the abstract machine, would\n  evaluate one of the following expressions:</p>\n<ul>\n<li>[...]</li>\n<li><p id=\"so_42997847_43007131_1\">an <em>id-expression</em> that refers to a variable or data member of reference type unless the reference has a preceding initialization and\n  either</p>\n<ul>\n<li><p id=\"so_42997847_43007131_2\">it is initialized with a constant expression or</p></li>\n<li><p id=\"so_42997847_43007131_3\">its lifetime began within the evaluation of <code>e</code>;</p></li>\n</ul></li>\n<li>[...]</li>\n</ul>\n</blockquote>\n<p>Neither condition is satisfied for <code>p</code> or <code>r</code>. Therefore neither <code>f(p)</code> nor <code>f(r)</code> is a core constant expression and hence neither can be used to initialize a <code>constexpr</code> variable. Clang is correct.</p>\n", "LastActivityDate": "2017-03-24T18:52:53.063", "Score": "3", "CreationDate": "2017-03-24T18:52:53.063", "ParentId": "42997847", "CommentCount": "0", "OwnerUserId": "2756719"}});