post_cb({"9804853": {"CommentCount": "1", "AcceptedAnswerId": "9805164", "PostTypeId": "1", "LastEditorUserId": "1147349", "CreationDate": "2012-03-21T12:43:45.087", "LastActivityDate": "2012-03-21T13:17:17.643", "LastEditDate": "2012-03-21T13:03:06.513", "ViewCount": "564", "FavoriteCount": "1", "Title": "Numeric conversion", "Id": "9804853", "Score": "6", "Body": "<p>In the  header of C++11, there are three new functions for conversion between number and string.</p>\n<pre><code>std::string std::to_string(unsigned long long);\nstd::string std::to_string(long double);\nstd::string std::to_string(long long);\n</code></pre>\n<p>The first question - why there is only 3 functions? What about simple int or unsigned int, etc.?</p>\n<p>The second question - why to_string doesn't throw exception in following code?</p>\n<pre><code>long double x = std::numeric_limits&lt;long double&gt;::quiet_NaN();\nstd::string i = std::to_string( x ); \nlong double c = std::stold( i ); // i = \"1.#QNAN\"\n</code></pre>\n<p>And the third question - why c equals 1.0 ?</p>\n", "Tags": "<c++><visual-studio-2010><visual-c++><c++11>", "OwnerUserId": "1147349", "AnswerCount": "2"}, "9805106": {"ParentId": "9804853", "CommentCount": "5", "Body": "<p>I find the whole package in my copy of the standard:</p>\n<pre><code>string to_string(int val);\nstring to_string(unsigned val);\nstring to_string(long val);\nstring to_string(unsigned long val);\nstring to_string(long long val);\nstring to_string(unsigned long long val);\nstring to_string(float val);\nstring to_string(double val);\nstring to_string(long double val);\n</code></pre>\n<p>Perhaps your compiler just hasn't implemented all of them yet?</p>\n<p>The functionality is described as</p>\n<blockquote>\n<p id=\"so_9804853_9805106_0\">Returns: Each function returns a string object holding the character representation of the value of its argument that would be generated by calling <code>sprintf(buf, fmt, val)</code> with a format specifier of <code>\"%d\"</code>, <code>\"%u\"</code>, <code>\"%ld\"</code>, <code>\"%lu\"</code>, <code>\"%lld\"</code>, <code>\"%llu\"</code>, <code>\"%f\"</code>, <code>\"%f\"</code>, or <code>\"%Lf\"</code>, respectively, where <code>buf</code> designates an internal character buffer of sufficient size.</p>\n</blockquote>\n<p>As it is supposed to be a wrapper around <code>sprintf</code> it was probably decided not to throw any exceptions, as <code>sprintf</code> does not.</p>\n", "OwnerUserId": "597607", "PostTypeId": "2", "Id": "9805106", "Score": "1", "CreationDate": "2012-03-21T12:57:42.680", "LastActivityDate": "2012-03-21T12:57:42.680"}, "9805164": {"ParentId": "9804853", "PostTypeId": "2", "CommentCount": "3", "Body": "<ul>\n<li><p><strong>\"<em>As long as it yields the behavior described, do what you please..</em>\"</strong></p>\n<p>All intrinsic numeric types can implicitly be converted to either <code>unsigned long long</code>, <code>long double</code> or <code>long long</code> and still hold the precision required, therefore no more overloads are necessary. </p>\n<p>The standard says that the following functions should be defined, though a lib confirming to the standard is free to do \"<em>whatever it wants</em>\" as long as it yields the same behavior as described.</p></li>\n</ul>\n<hr>\n<ul>\n<li><p><strong>Why should it throw an exception?</strong></p>\n<p><code>std::numeric_limits&lt;long double&gt;::quiet_NaN();</code> is a valid value, and <code>std::to_string (T)</code> is described in the standard to yield the same behavior as calling <code>sprintf</code> with the appropriate <em>format-string</em>.</p></li>\n</ul>\n<blockquote>\n<p id=\"so_9804853_9805164_0\"><strong>\u00a7 21.5</strong>/6 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <strong>Numeric conversions</strong></p>\n<ul>\n<li><code>string to_string(int val);</code></li>\n<li><code>string to_string(unsigned val);</code></li>\n<li><code>string to_string(long val);</code></li>\n<li><code>string to_string(unsigned long val);</code></li>\n<li><code>string to_string(long long val);</code></li>\n<li><code>string to_string(unsigned long long val);</code></li>\n<li><code>string to_string(float val);</code></li>\n<li><code>string to_string(double val);</code></li>\n<li><p id=\"so_9804853_9805164_1\"><code>string to_string(long double val);</code></p>\n<p id=\"so_9804853_9805164_2\"><sup>..</sup></p></li>\n</ul>\n<p id=\"so_9804853_9805164_3\"><strong>Returns:</strong></p>\n<ul>\n<li>Each function returns a string object holding the character\n  representation of the value of its argument that would be generated by\n  calling sprintf(buf, fmt, val) with a format specifier of \"<em>%d</em>\", \"<em>%u</em>\",\n  \"<em>%ld</em>\", \"<em>%lu</em>\", \"<em>%lld</em>\", \"<em>%llu</em>\", \"<em>%f</em>\", \"<em>%f</em>\", or \"<em>%Lf</em>\", respectively,\n  where buf designates an internal character buffer of sufficient size.</li>\n</ul>\n</blockquote>\n<hr>\n<ul>\n<li><p><strike><strong>On what compiler is <code>c</code> equal to <code>1.0</code>?</strong></strike></p>\n<p>The conversion should yield a <code>NaN</code>-value if the value of <code>i</code> is string representation of <code>NaN</code> (not containing any digits).</p>\n<p>If no suitable conversion can be found the function is described to throw <code>invalid_argument</code>.</p>\n<p><em>MSVC</em> will yield <code>1.#QNAN</code> when trying to convert <code>std::numeric_limits&lt;long double&gt;::quiet_NaN();</code> to a <code>std::string</code>.</p>\n<p>When using <code>std::stold</code> it will look for the first none whitespace character, and then use as many digits as found (in this case only <code>1</code>), therefore <code>c</code> will be equal to <code>1.0</code> after the function call.</p></li>\n</ul>\n</hr></hr>", "OwnerUserId": "1090079", "LastEditorUserId": "1090079", "LastEditDate": "2012-03-21T13:17:17.643", "Id": "9805164", "Score": "5", "CreationDate": "2012-03-21T13:01:10.540", "LastActivityDate": "2012-03-21T13:17:17.643"}, "bq_ids": {"n4140": {"so_9804853_9805164_1": {"section_id": 1871, "quality": 1.0, "length": 4}, "so_9804853_9805106_0": {"section_id": 1872, "quality": 0.7419354838709677, "length": 23}}, "n3337": {"so_9804853_9805164_1": {"section_id": 1865, "quality": 1.0, "length": 4}, "so_9804853_9805106_0": {"section_id": 1866, "quality": 0.7419354838709677, "length": 23}}, "n4659": {"so_9804853_9805164_1": {"section_id": 2043, "quality": 1.0, "length": 4}, "so_9804853_9805106_0": {"section_id": 2044, "quality": 0.7419354838709677, "length": 23}}}});