post_cb({"6323091": {"ParentId": "6322970", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>In general, <code>swap</code> never invalidates iterators.  However, another rule comes into play when the allocators are different.  In that case the behavior depends on <code>allocator_traits&lt;a1&gt;::propagate_on_container_swap::value</code> and <code>allocator_traits&lt;a2&gt;::propagate_on_container_swap::value</code>.  If both are true, the allocators are exchanged along with the data, all iterators remain valid.  If either is false, behavior is undefined, so the particular behavior exhibited by VC++ 2010 is allowed.</p>\n<p>From <code>[container.requirements.general]</code> (wording from n3290):</p>\n<blockquote>\n<p id=\"so_6322970_6323091_0\">Allocator replacement is performed by copy assignment, move assignment, or swapping of the allocator only if <code>allocator_traits&lt;allocatortype&gt;::propagate_on_container_copy_assignment::value</code>,\n  <code>allocator_traits&lt;allocatortype&gt;::propagate_on_container_move_assignment::value</code>, or <code>allocator_traits&lt;allocatortype&gt;::propagate_on_container_swap::value</code> is true within the implementation of the corresponding container operation. The behavior of a call to a container\u2019s swap function is undefined unless the objects being swapped have allocators that compare equal or <code>allocator_traits&lt;allocatortype&gt;::propagate_on_container_swap::value</code> is true.</p>\n</blockquote>\n<p>and</p>\n<blockquote>\n<p id=\"so_6322970_6323091_1\">Every iterator referring to an element in one container before the swap shall refer to the same element in the other container after the swap</p>\n</blockquote>\n<p>and</p>\n<blockquote>\n<p id=\"so_6322970_6323091_2\">Unless otherwise specified ...  no <code>swap()</code> function invalidates any references, pointers, or iterators referring to the elements of the containers being swapped. </p>\n</blockquote>\n<p>23.3.6.5 does not specify alternate rules for <code>vector::swap()</code>.</p>\n", "OwnerUserId": "103167", "LastEditorUserId": "103167", "LastEditDate": "2011-06-12T16:43:42.803", "Id": "6323091", "Score": "16", "CreationDate": "2011-06-12T16:30:57.870", "LastActivityDate": "2011-06-12T16:43:42.803"}, "bq_ids": {"n4140": {"so_6322970_6323091_0": {"section_id": 709, "quality": 0.8529411764705882, "length": 29}, "so_6322970_6323091_2": {"section_id": 712, "quality": 0.9285714285714286, "length": 13}, "so_6322970_6323091_1": {"section_id": 710, "quality": 1.0, "length": 15}}, "n3337": {"so_6322970_6323091_0": {"section_id": 698, "quality": 0.8529411764705882, "length": 29}, "so_6322970_6323091_2": {"section_id": 701, "quality": 0.9285714285714286, "length": 13}, "so_6322970_6323091_1": {"section_id": 699, "quality": 1.0, "length": 15}}, "n4659": {"so_6322970_6323091_2": {"section_id": 741, "quality": 0.9285714285714286, "length": 13}, "so_6322970_6323091_1": {"section_id": 739, "quality": 1.0, "length": 15}}}, "6322970": {"CommentCount": "1", "AcceptedAnswerId": "6323091", "PostTypeId": "1", "LastEditorUserId": "636019", "CreationDate": "2011-06-12T16:06:05.820", "LastActivityDate": "2011-06-12T18:58:08.593", "LastEditDate": "2011-06-12T18:58:08.593", "ViewCount": "1459", "FavoriteCount": "1", "Title": "Should std::vector::swap() with stateful allocators invalidate all iterators?", "Id": "6322970", "Score": "10", "Body": "<p>Given allocators <code>a1</code> and <code>a2</code>, where <code>a1</code> != <code>a2</code>,</p>\n<p>and <code>std::vector</code>s <code>v1(a1)</code> and <code>v2(a2)</code></p>\n<p>then <code>v1.swap(v2)</code> invalidates all iterators.</p>\n<p>Is this expected behavior?</p>\n", "Tags": "<c++><visual-studio-2010>", "OwnerUserId": "14841", "AnswerCount": "1"}});