post_cb({"bq_ids": {"n4140": {"so_48682413_48682659_1": {"length": 15, "quality": 0.7142857142857143, "section_id": 6318}}, "n3337": {"so_48682413_48682659_1": {"length": 15, "quality": 0.7142857142857143, "section_id": 6075}}, "n4659": {"so_48682413_48682659_1": {"length": 16, "quality": 0.7619047619047619, "section_id": 7828}, "so_48682413_48682659_0": {"length": 11, "quality": 0.8461538461538461, "section_id": 8303}, "so_48682413_48682659_4": {"length": 20, "quality": 0.7692307692307693, "section_id": 7709}}}, "48682659": {"Id": "48682659", "PostTypeId": "2", "Body": "<p>The standard ( Language support library -&gt; Dynamic memory management ) says for these functions:</p>\n<p><a href=\"http://www.eel.is/c++draft/support.dynamic#new.delete.single-2\" rel=\"nofollow noreferrer\">[new.delete.single]</a></p>\n<blockquote>\n<p id=\"so_48682413_48682659_0\">Replaceable: A C++ program may define functions with either of these\n  function signatures, and thereby displace the default versions defined\n  by the C++ standard library.</p>\n</blockquote>\n<p><a href=\"http://eel.is/c++draft/replacement.functions\" rel=\"nofollow noreferrer\">[replacement.functions]</a></p>\n<blockquote>\n<p id=\"so_48682413_48682659_1\">The program's definitions are used instead of the default versions\n  supplied by the implementation ([support.dynamic]). Such replacement\n  occurs prior to program startup ([basic.def.odr], [basic.start]). The\n  program's declarations shall not be specified as inline. </p>\n<p id=\"so_48682413_48682659_2\">No diagnostic is required.</p>\n</blockquote>\n<p><a href=\"http://eel.is/c++draft/defns.replacement\" rel=\"nofollow noreferrer\">[defns.replacement]</a></p>\n<blockquote>\n<p id=\"so_48682413_48682659_3\">Replacement function </p>\n<p id=\"so_48682413_48682659_4\">non-reserved function whose\n  definition is provided by a C++ program [\u2009Note: Only one definition\n  for such a function is in effect for the duration of the program's\n  execution, as the result of creating the program ([lex.phases]) and\n  resolving the definitions of all translation units ([basic.link]).\n  \u2014\u2009end note \u2009]</p>\n</blockquote>\n", "LastEditorUserId": "2504757", "LastActivityDate": "2018-02-08T10:32:08.060", "Score": "6", "CreationDate": "2018-02-08T10:02:58.577", "ParentId": "48682413", "CommentCount": "4", "OwnerUserId": "2504757", "LastEditDate": "2018-02-08T10:32:08.060"}, "48682413": {"ViewCount": "78", "Body": "<p>why it's permitted to redefine a global <code>operator new(size_t)</code>?</p>\n<p>As far as i know,there exists an identical and default <strong><code>operator new(size_t</code>)</strong> in c++ standard library(learned from c++ Primer 5th)  </p>\n<p>The <strong>default operator new</strong> is in global namespace,so why does the <strong>user-defined global operator new</strong> does not <strong>conflict</strong> with the default one?Since they are in the same scope,isn't there a redefinition error?</p>\n", "Title": "why it's permitted to redefine a global operator new(size_t)?", "CreationDate": "2018-02-08T09:52:38.657", "LastActivityDate": "2018-02-08T10:35:54.960", "CommentCount": "6", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2018-02-08T10:35:54.960", "LastEditorUserId": "8434761", "Id": "48682413", "Score": "3", "OwnerUserId": "8434761", "Tags": "<c++>", "AnswerCount": "1"}});