post_cb({"25664969": {"ParentId": "25664694", "CommentCount": "0", "Body": "<p>No, you don't have. I'll be automatically generated like default/copy constructor.</p>\n<hr/>\n<p>From <a href=\"http://en.cppreference.com/w/cpp/language/move_constructor\" rel=\"nofollow\">this page</a>,</p>\n<blockquote>\n<p id=\"so_25664694_25664969_0\"><strong>Implicitly-declared move constructor</strong></p>\n<p id=\"so_25664694_25664969_1\">If no user-defined move constructors are provided for a class type (struct, class, or union), and all of the following is true:</p>\n<pre><code>there are no user-declared copy constructors\nthere are no user-declared copy assignment operators\nthere are no user-declared move assignment operators\nthere are no user-declared destructors\n(until C++14) the implicitly-declared move constructor is not defined as deleted due to conditions detailed in the next section \n</code></pre>\n<p id=\"so_25664694_25664969_2\">then the compiler will declare a move constructor as an inline public member of its class with the signature T::T(T&amp;&amp;).</p>\n<p id=\"so_25664694_25664969_3\">A class can have multiple move constructors, e.g. both T::T(const T&amp;&amp;) and T::T(T&amp;&amp;). If some user-defined move constructors are present, the user may still force the generation of the implicitly declared move constructor with the keyword default.</p>\n</blockquote>\n<p>Your <code>struct Sub</code> has no user-declared copy constructors, copy assignment operators, move assignment operators or destructors.</p>\n<p>And,</p>\n<blockquote>\n<p id=\"so_25664694_25664969_4\"><strong>Trivial move constructor</strong></p>\n<p id=\"so_25664694_25664969_5\">The move constructor for class T is trivial if all of the following is true:</p>\n<pre><code>It is not user-provided (meaning, it is implicitly-defined or defaulted), and if it is defaulted, its signature is the same as implicitly-defined\nT has no virtual member functions\nT has no virtual base classes\nThe move constructor selected for every direct base of T is trivial\nThe move constructor selected for every non-static class type (or array of class type) member of T is trivial \n\nT has no non-static data members of volatile-qualified type \n</code></pre>\n<p id=\"so_25664694_25664969_6\">(since C++14)</p>\n<p id=\"so_25664694_25664969_7\">A trivial move constructor is a constructor that performs the same action as the trivial copy constructor, that is, makes a copy of the object representation as if by std::memmove. All data types compatible with the C language (POD types) are trivially movable. </p>\n<p id=\"so_25664694_25664969_8\"><strong>Implicitly-defined move constructor</strong></p>\n<p id=\"so_25664694_25664969_9\">If the implicitly-declared move constructor is neither deleted <em>nor trivial</em>, it is defined (that is, a function body is generated and compiled) by the compiler. For union types, the implicitly-defined move constructor copies the object representation (as by std::memmove). <strong>For non-union class types (class and struct), the move constructor performs full member-wise move of the object's bases and non-static members, in their initialization order, using direct initialization with an xvalue argument.</strong></p>\n</blockquote>\n<p>The move constructor of <code>Base</code> is not trivial (it's user-defined). So, the implicitly-defined move constructor of <code>Sub</code> will work as \"the move constructor performs full <strong>member-wise move</strong> of the object's bases and non-static members, in their initialization order, using direct initialization with an xvalue argument.\"</p>\n", "OwnerUserId": "2729109", "PostTypeId": "2", "Id": "25664969", "Score": "0", "CreationDate": "2014-09-04T12:01:50.670", "LastActivityDate": "2014-09-04T12:01:50.670"}, "25664694": {"CommentCount": "6", "ViewCount": "1153", "PostTypeId": "1", "LastEditorUserId": "3747990", "CreationDate": "2014-09-04T11:47:51.033", "LastActivityDate": "2014-09-04T12:14:46.820", "Title": "Default move constructor in a sub class", "AcceptedAnswerId": "25664875", "LastEditDate": "2014-09-04T12:01:10.510", "Id": "25664694", "Score": "8", "Body": "<p>In C++11, if the base class has defined its own move (copy) constructor (assignment operator), does its subclass need to define its own move (copy) constructor (assignment operator) in where call the base class's corresponding constructor/operator is called explicitly?</p>\n<p>Is it a good idea to define the constructor, destructor, move/copy constructor (assignment operator) clearly every time?</p>\n<pre><code>struct Base {\n    Base() {}\n    Base(Base&amp;&amp; o);\n};\n\nstruct Sub : public Base {\n    Sub(Sub&amp;&amp; o) ;  // Need I do it explicitly ? If not,what the compiler will do for me\n};\n</code></pre>\n", "Tags": "<c++><c++11><move-semantics>", "OwnerUserId": "2428540", "AnswerCount": "3"}, "25664875": {"ParentId": "25664694", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>The compiler will generate a default move constructor if you don't specify one in the base class (except <a href=\"http://en.cppreference.com/w/cpp/language/move_constructor\" rel=\"nofollow\">some cases</a>, e.g. there's a base class with a deleted move constructor) but you should, in any case, call explicitly the base class' one if you have it:</p>\n<pre><code>Sub(Sub&amp;&amp; o) : Base(std::move(o))\n</code></pre>\n", "OwnerUserId": "1938163", "LastEditorUserId": "1938163", "LastEditDate": "2014-09-04T12:14:46.820", "Id": "25664875", "Score": "4", "CreationDate": "2014-09-04T11:57:04.177", "LastActivityDate": "2014-09-04T12:14:46.820"}, "25664886": {"ParentId": "25664694", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>According to the standard (<a href=\"https://isocpp.org/files/papers/N3797.pdf\" rel=\"nofollow\">N3797</a>) <em>12.8/9 Copying and moving class objects [class.copy]:</em></p>\n<blockquote>\n<p id=\"so_25664694_25664886_0\">If the definition of a <code>class X</code> does not explicitly declare a move constructor, one will be implicitly declared as defaulted if and only if</p>\n<p id=\"so_25664694_25664886_1\">\u2014 X does not have a user-declared copy constructor,</p>\n<p id=\"so_25664694_25664886_2\">\u2014 X does not have a user-declared copy assignment operator,</p>\n<p id=\"so_25664694_25664886_3\">\u2014 X does not have a user-declared move assignment operator, and</p>\n<p id=\"so_25664694_25664886_4\">\u2014 X does not have a user-declared destructor.</p>\n</blockquote>\n<p>As such, if your <code>class</code> meets the above requirements then a default move constructor will be implicitly declared for you.</p>\n<p>As already being stated, the base-class has no knowledge of any sub-classes. As such, whether you declare a move constructor in one base class has no effect on the implicit generation of a move constructor in its sub-classes.</p>\n<p>As far as it concerns whether you should declare explicitly a constructor/destructor etc. of a class, there's this nice <a href=\"http://flamingdangerzone.com/cxx11/2012/08/15/rule-of-zero.html\" rel=\"nofollow\">article</a>.</p>\n", "OwnerUserId": "2352671", "LastEditorUserId": "2352671", "LastEditDate": "2014-09-04T12:03:53.717", "Id": "25664886", "Score": "1", "CreationDate": "2014-09-04T11:57:28.553", "LastActivityDate": "2014-09-04T12:03:53.717"}, "bq_ids": {"n4140": {"so_25664694_25664886_1": {"section_id": 458, "quality": 1.0, "length": 5}, "so_25664694_25664886_2": {"section_id": 458, "quality": 1.0, "length": 6}, "so_25664694_25664886_4": {"section_id": 458, "quality": 1.0, "length": 4}, "so_25664694_25664886_3": {"section_id": 458, "quality": 1.0, "length": 6}, "so_25664694_25664886_0": {"section_id": 458, "quality": 1.0, "length": 12}}, "n3337": {"so_25664694_25664886_1": {"section_id": 449, "quality": 1.0, "length": 5}, "so_25664694_25664886_2": {"section_id": 449, "quality": 1.0, "length": 6}, "so_25664694_25664886_4": {"section_id": 449, "quality": 1.0, "length": 4}, "so_25664694_25664886_3": {"section_id": 449, "quality": 1.0, "length": 6}, "so_25664694_25664886_0": {"section_id": 449, "quality": 1.0, "length": 12}}, "n4659": {"so_25664694_25664886_3": {"section_id": 481, "quality": 1.0, "length": 6}, "so_25664694_25664886_2": {"section_id": 481, "quality": 1.0, "length": 6}, "so_25664694_25664886_4": {"section_id": 481, "quality": 1.0, "length": 4}, "so_25664694_25664886_1": {"section_id": 481, "quality": 1.0, "length": 5}, "so_25664694_25664886_0": {"section_id": 481, "quality": 1.0, "length": 12}}}});