post_cb({"16751734": {"CommentCount": "3", "ViewCount": "81", "CreationDate": "2013-05-25T16:45:25.900", "LastActivityDate": "2013-05-25T17:25:49.540", "Title": "std::list.unique() should invalidate iterators?", "AcceptedAnswerId": "16751908", "PostTypeId": "1", "Id": "16751734", "Score": "2", "Body": "<p>I have this code:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;list&gt;\n\nint main()\n{    \n    typedef std::list&lt;int&gt; list;\n    int i0t[5]={-1, 2, 3, 3, 5};\n    list list_1(i0t, i0t+5);\n    list::reverse_iterator ri0 = ++list_1.rbegin();    \n    list_1.unique();\n    list_1.remove(3);\n    int val = *ri0; // why is this valid ?\n    std::cout &lt;&lt; \"val = \" &lt;&lt; val &lt;&lt; \"\\n\";\n    return 0;\n}\n</code></pre>\n<p>My intuition was that ri0 iterator would become invalid after<br>\nlist_1.unique();<br>\nlist_1.remove(3);<br>\nusing MS VS2005 Debug configuration with _HAS_ITERATOR_DEBUGGING=1<br>\nHowever, I think \"iterator debugging\" didn't catch this. Right ?</br></br></br></br></p>\n<p>Thank you.  </p>\n", "Tags": "<c++>", "OwnerUserId": "115149", "AnswerCount": "2"}, "16751908": {"ParentId": "16751734", "CommentCount": "2", "Body": "<blockquote>\n<p id=\"so_16751734_16751908_0\">My intuition was that ri0 iterator would become invalid</p>\n</blockquote>\n<p>Yes, it would. Per \u00a7 23.3.5.5</p>\n<blockquote>\n<p id=\"so_16751734_16751908_1\">void remove(const T&amp; value)</p>\n<p id=\"so_16751734_16751908_2\">void unique()</p>\n<p id=\"so_16751734_16751908_3\">[...] Invalidates only the iterators and references to the erased\n  elements.</p>\n</blockquote>\n<p>So, behavior of your program is undefined.  </p>\n", "OwnerUserId": "1532460", "PostTypeId": "2", "Id": "16751908", "Score": "4", "CreationDate": "2013-05-25T17:02:56.123", "LastActivityDate": "2013-05-25T17:02:56.123"}, "16751771": {"ParentId": "16751734", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>23.3.5.5/15 states that the effects of a remove operation performed on a list will only invalidate iterators and references to erased elements. It does not specify that the operation <em>must</em> invalidate those iterators. The iterator remaining valid is <em>unspecified</em> behavior and is not guaranteed to occur in other implementations. <em>Accessing</em> the iterator after the modification however is undefined behavior.</p>\n", "OwnerUserId": "845568", "LastEditorUserId": "845568", "LastEditDate": "2013-05-25T17:25:49.540", "Id": "16751771", "Score": "1", "CreationDate": "2013-05-25T16:48:31.333", "LastActivityDate": "2013-05-25T17:25:49.540"}, "bq_ids": {"n4140": {"so_16751734_16751908_3": {"section_id": 884, "quality": 1.0, "length": 5}}, "n3337": {"so_16751734_16751908_3": {"section_id": 873, "quality": 1.0, "length": 5}}, "n4659": {"so_16751734_16751908_3": {"section_id": 944, "quality": 1.0, "length": 5}}}});