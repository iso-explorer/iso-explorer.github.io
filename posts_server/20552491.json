post_cb({"20552491": {"CommentCount": "3", "ViewCount": "310", "PostTypeId": "1", "LastEditorUserId": "2548699", "CreationDate": "2013-12-12T19:30:36.210", "LastActivityDate": "2013-12-13T11:19:14.140", "Title": "Where in the C++ Standard does it say that sizeof(wchar_t) <= sizeof(long) and sizeof(bool) <= sizeof(long)?", "FavoriteCount": "1", "LastEditDate": "2013-12-13T11:19:14.140", "Id": "20552491", "Score": "4", "Body": "<p>Mr. Stroustrup wrote the following on page 149 of his new book (TCPL 4th edition)</p>\n<pre><code>1 &lt;= sizeof(wchar_t) &lt;= sizeof(long)\n</code></pre>\n<p>I couldn't find anything in the Standard supporting the last inequality above. I could say the same for <code>sizeof(bool) &lt;= sizeof(long)</code>.</p>\n<p><strong>Edit</strong>: In <code>3.9.1p5</code>  you'll find:</p>\n<blockquote>\n<p id=\"so_20552491_20552491_0\">Type wchar_t shall have the same size, signedness, and alignment requirements (3.11) as one of the other integral types, called its underlying type.</p>\n</blockquote>\n<p>which gives support to the inequality</p>\n<pre><code>sizeof(wchar_t) &lt;= sizeof(long long)\n</code></pre>\n<p>but not to</p>\n<pre><code>sizeof(wchar_t) &lt;= sizeof(long)\n</code></pre>\n<p>But I couldn't find anything confirming</p>\n<pre><code>sizeof(bool) &lt;= sizeof(long)\n</code></pre>\n", "Tags": "<c++><c++11><sizeof>", "OwnerUserId": "2548699", "AnswerCount": "1"}, "20552672": {"ParentId": "20552491", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>It's hard to imagine a  <code>sizeof(wchar_t)&gt;N &amp;&amp; sizeof(long)&lt;=N</code> implementation for any value of N, let alone one on which anyone would consider using <code>wchar_t</code>.  That said:</p>\n<p>In fact, I think it's wrong.  4.5 \"Integral promotions\" p2 explicitly allows for the possibility:</p>\n<blockquote>\n<p id=\"so_20552491_20552672_0\"><code>2.</code> A prvalue of type char16_t, char32_t, or wchar_t (3.9.1) can be converted to a prvalue of the first of\n  the following types that can represent all the values of its underlying type: int, unsigned int, long int,\n  unsigned long int, long long int, or unsigned long long int. <strong><em>If none of the types in that list can\n  represent all the values of its underlying type</em></strong>, a prvalue of type char16_t, char32_t, or wchar_t can be\n  converted to a prvalue of its underlying type.</p>\n</blockquote>\n<p>and 5.3.3 \"sizeof\" p1 explicitly leaves the actual sizes implementation-defined:</p>\n<blockquote>\n<p id=\"so_20552491_20552672_1\"><code>1.</code> [...] The result of sizeof applied to any other fundamental type (3.9.1) is\n  implementation-defined. [ <strong>*Note: in particular, sizeof(bool), sizeof(char16_t), sizeof(char32_t), and\n  sizeof(wchar_t) are implementation-defined.*</strong>\n   76 \u2014 end note ] [ Note: See 1.7 for the definition of byte\n  and 3.9 for the definition of object representation. \u2014 end note ]</p>\n</blockquote>\n<p>While 5.3.3 is enough to leave the relative sizes open to question, the normative possibility of <code>wchar_t</code> being unrepresentable in any standard type I think makes it unquestionable.</p>\n", "OwnerUserId": "1290731", "LastEditorUserId": "1290731", "LastEditDate": "2013-12-12T19:57:46.347", "Id": "20552672", "Score": "6", "CreationDate": "2013-12-12T19:40:00.163", "LastActivityDate": "2013-12-12T19:57:46.347"}, "bq_ids": {"n4140": {"so_20552491_20552672_0": {"section_id": 22, "quality": 0.9818181818181818, "length": 54}, "so_20552491_20552491_0": {"section_id": 7214, "quality": 0.8823529411764706, "length": 15}, "so_20552491_20552672_1": {"section_id": 6076, "quality": 0.5925925925925926, "length": 16}}, "n3337": {"so_20552491_20552672_0": {"section_id": 19, "quality": 0.9818181818181818, "length": 54}, "so_20552491_20552491_0": {"section_id": 6958, "quality": 0.8823529411764706, "length": 15}, "so_20552491_20552672_1": {"section_id": 5844, "quality": 0.5925925925925926, "length": 16}}, "n4659": {"so_20552491_20552672_0": {"section_id": 22, "quality": 0.9818181818181818, "length": 54}, "so_20552491_20552491_0": {"section_id": 8723, "quality": 0.8823529411764706, "length": 15}, "so_20552491_20552672_1": {"section_id": 7572, "quality": 0.5925925925925926, "length": 16}}}});