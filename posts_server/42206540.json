post_cb({"bq_ids": {"n4140": {"so_42206540_42208278_2": {"length": 24, "quality": 1.0, "section_id": 7151}}, "n3337": {"so_42206540_42208278_2": {"length": 24, "quality": 1.0, "section_id": 6895}}}, "42206540": {"CreationDate": "2017-02-13T14:32:43.063", "ViewCount": "76", "Id": "42206540", "AcceptedAnswerId": "42208278", "Score": "5", "Title": "How come the definition order is not followed when defining static member variables?", "LastEditorUserId": "2725810", "CommentCount": "5", "Body": "<p>I know about the problem of the order of initialization of static variables from different translation units. However, my problem is within one translation unit and, in fact, within one struct: </p>\n<pre><code>template &lt;int size&gt;\nstruct SlidingTile {\n    using AllActions = std::array&lt;int, size&gt;;\n    using AllMDDeltas = std::array&lt;int, size&gt;;\n\n    int mdDelta(int i) const {\n        return mdDeltas_[i];\n    }\n\n    static AllActions computeAllActions() {\n        std::cout &lt;&lt; \"computeAllActions\" &lt;&lt; std::endl;\n        AllActions res;\n        for (int i = 0; i &lt; size; ++i) res[i] = i;\n        return res;\n    }\n\n    static AllMDDeltas computeAllMDDeltas() {\n        std::cout &lt;&lt; \"Entered computeAllMDDeltas\" &lt;&lt; std::endl;\n        AllActions res;\n        for (int i = 0; i &lt; size; ++i) res[i] = 10 * allActions_[i];\n        std::cout &lt;&lt; \"Exiting computeAllMDDeltas\" &lt;&lt; std::endl;\n        return res;\n    }\n\nprivate:\n    static const AllActions allActions_;\n    static const AllMDDeltas mdDeltas_;\n};\n\ntemplate &lt;int size&gt;\nconst typename SlidingTile&lt;size&gt;::AllActions\n    SlidingTile&lt;size&gt;::allActions_ = SlidingTile&lt;size&gt;::computeAllActions();\n\ntemplate &lt;int size&gt;\nconst typename SlidingTile&lt;size&gt;::AllMDDeltas\n    SlidingTile&lt;size&gt;::mdDeltas_ = SlidingTile&lt;size&gt;::computeAllMDDeltas();\n\nint main() {\n    SlidingTile&lt;3&gt; s;\n    std::cout &lt;&lt; s.mdDelta(2) &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>\n<p>The output is:</p>\n<pre><code>Entered computeAllMDDeltas\nExiting computeAllMDDeltas\ncomputeAllActions\n</code></pre>\n<p>To my surprise, <code>computeAllMDDeltas</code> gets called before <code>computeAllActions</code> and so <code>allActions_</code> is not initialized when it is used in <code>computeAllMDDeltas</code>. Interestingly, <code>computeAllActions</code> is not called even when <code>allActions_</code> is used in <code>computeAllMDDeltas</code>.</p>\n<p>Why does this happen and what is the advised way in this situation?</p>\n", "Tags": "<c++><initialization><static-variables>", "LastEditDate": "2017-02-13T15:56:53.173", "LastActivityDate": "2017-02-13T16:18:21.797", "PostTypeId": "1", "AnswerCount": "1", "OwnerUserId": "2725810"}, "42208278": {"LastActivityDate": "2017-02-13T16:18:21.797", "CommentCount": "4", "Body": "<blockquote>\n<p id=\"so_42206540_42208278_0\">How come the definition order is not followed when defining static member variables?</p>\n</blockquote>\n<p>Because the standard says that the initialization is unordered:</p>\n<blockquote>\n<p id=\"so_42206540_42208278_1\">[basic.start.init] /2 (N4140 standard draft)</p>\n<p id=\"so_42206540_42208278_2\">... Definitions of explicitly specialized class template static data members have ordered initialization. Other\n  <strong>class template static data members (i.e., implicitly or explicitly instantiated specializations) have unordered\n  initialization</strong>. ...</p>\n</blockquote>\n<hr>\n<blockquote>\n<p id=\"so_42206540_42208278_3\">what is the advised way in this situation?</p>\n</blockquote>\n<p>Same as initialization across translation units: <em>Construct On First Use</em> idiom:</p>\n<pre><code>struct SlidingTile {\n    // ...\nprivate:\n    static const AllActions&amp; allActions() {\n        static const AllActions instance = computeAllActions();\n        return instance;\n    }\n    static const AllMDDeltas&amp; mdDeltas() {\n        static const AllMDDeltas instance = computeAllMDDeltas();\n        return instance;\n    }\n};\n</code></pre>\n</hr>", "CreationDate": "2017-02-13T15:57:59.333", "LastEditDate": "2017-02-13T16:18:21.797", "ParentId": "42206540", "Id": "42208278", "LastEditorUserId": "2079303", "PostTypeId": "2", "Score": "5", "OwnerUserId": "2079303"}});