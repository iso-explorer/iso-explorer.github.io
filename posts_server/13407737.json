post_cb({"13428150": {"ParentId": "13407737", "PostTypeId": "2", "CommentCount": "12", "Body": "<p>I'm seeing the following definition for \"trivially copyable\" (C++11 \u00a73.9, paragraph 9):</p>\n<blockquote>\n<p id=\"so_13407737_13428150_0\">...Scalar types, trivially copyable class types, arrays of such types, <strong>and  <em>cv-qualified</em> versions of these types</strong> are collectively called <em>trivially copyable</em> types....</p>\n</blockquote>\n<p><em>cv-qualified</em> by definition includes <code>const</code> <em>and/or</em> <code>volatile</code> (\u00a73.9.3).  It would therefore appear that <code>volatile</code> values are explicitly trivially copyable, if the unqualified type would be trivially copyable (a scalar or trivially copyable class type, or array thereof).</p>\n", "OwnerUserId": "319403", "LastEditorUserId": "319403", "LastEditDate": "2012-11-17T06:21:31.103", "Id": "13428150", "Score": "1", "CreationDate": "2012-11-17T06:00:16.367", "LastActivityDate": "2012-11-17T06:21:31.103"}, "13407737": {"CommentCount": "1", "ViewCount": "285", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2012-11-15T22:57:42.163", "LastActivityDate": "2012-11-17T17:40:14.097", "Title": "Are volatile data members trivially copyable?", "FavoriteCount": "2", "LastEditDate": "2017-05-23T11:57:59.370", "Id": "13407737", "Score": "9", "Body": "<p>Whilst writing <a href=\"https://stackoverflow.com/a/13407454/560648\">this answer</a> I realised that I'm not as confident about my conclusions as I usually would ensure before hitting <kbd>Post Your Answer</kbd>.</p>\n<p>I can find a couple of reasonably convincing citations for the argument that the trivial-copyability of <code>volatile</code> data members is either implementation-defined or flat-out disallowed:</p>\n<ul>\n<li><a href=\"https://groups.google.com/forum/?fromgroups=#!topic/comp.std.c++/5cWxmw71ktI\" rel=\"nofollow noreferrer\">https://groups.google.com/forum/?fromgroups=#!topic/comp.std.c++/5cWxmw71ktI</a></li>\n<li><a href=\"http://gcc.gnu.org/bugzilla/show_bug.cgi?id=48118\" rel=\"nofollow noreferrer\">http://gcc.gnu.org/bugzilla/show_bug.cgi?id=48118</a></li>\n<li><a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_active.html#496\" rel=\"nofollow noreferrer\">http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_active.html#496</a></li>\n</ul>\n<p>But I haven't been able to back this up in the standard<sup>1</sup> itself. Particularly \"worrying\" is that there's no sign of the proposed wording change from that n3159 issues list in the actual standard's final wording.</p>\n<p><strong>So, what gives? Are <code>volatile</code> data members trivially copyable, or not?</strong></p>\n<hr>\n<p><sup>1</sup> \u00a0 C++11</p>\n</hr>", "Tags": "<c++><c++11><volatile><language-lawyer>", "OwnerUserId": "560648", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_13407737_13428150_0": {"section_id": 7207, "quality": 0.8823529411764706, "length": 15}}, "n3337": {"so_13407737_13428150_0": {"section_id": 6951, "quality": 0.9411764705882353, "length": 16}}, "n4659": {"so_13407737_13428150_0": {"section_id": 8716, "quality": 0.9411764705882353, "length": 16}}}});