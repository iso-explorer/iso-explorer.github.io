post_cb({"60653": {"ViewCount": "6649", "Body": "<p>Is global memory initialized in C++? And if so, how?</p>\n<p>(Second) clarification:</p>\n<p>When a program starts up, what is in the memory space which will become global memory, prior to primitives being initialized? I'm trying to understand if it is zeroed out, or garbage for example.</p>\n<p>The situation is: can a singleton reference be set - via an <code>instance()</code> call, prior to its initialization:</p>\n<pre><code>MySingleton* MySingleton::_instance = NULL;\n</code></pre>\n<p>and get two singleton instances as a result?</p>\n<p>See my C++ quiz on on multiple instances of a singleton...</p>\n", "AcceptedAnswerId": "60655", "Title": "Is global memory initialized in C++?", "CreationDate": "2008-09-13T16:13:29.520", "Id": "60653", "CommentCount": "0", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2015-12-22T21:23:42.080", "LastEditorUserId": "3552770", "LastActivityDate": "2015-12-22T21:34:51.670", "Score": "13", "OwnerUserId": "2167252", "Tags": "<c++><memory><memory-management>", "AnswerCount": "4"}, "60677": {"Body": "<p>Variables declared with static/global scope are always initialized under VC++ at least.</p>\n<p>Under some circumstances there can actually be a difference in behaviour between:</p>\n<pre><code>int x = 0;\n\nint main() { ... }\n</code></pre>\n<p>and</p>\n<pre><code>int x;\n\nint main() { ... }\n</code></pre>\n<p>If you are using shared data segments then VC++ at least uses the presence of an explicit initialization along with a <code>#pragma data_seg</code> to determine whether a particular variable should go in the shared data segment or the private data segment for a process.</p>\n<p>For added fun consider what happens if you have a static C++ object with constructor/destructor declared in a shared data segment.  The constructor/destructor is called every time the exe/dll attaches to the data segment which is almost certainly not what you want.</p>\n<p>More details in this <a href=\"http://support.microsoft.com/kb/125677\" rel=\"nofollow noreferrer\">KB article</a></p>\n", "CreationDate": "2008-09-13T16:34:42.293", "ParentId": "60653", "CommentCount": "0", "LastEditDate": "2015-12-22T21:34:51.670", "PostTypeId": "2", "OwnerDisplayName": "Rob Walker", "LastEditorUserId": "3552770", "LastActivityDate": "2015-12-22T21:34:51.670", "Id": "60677", "Score": "0", "OwnerUserId": "3631"}, "60707": {"PostTypeId": "2", "Body": "<p>From the standard:</p>\n<blockquote>\n<p id=\"so_60653_60707_0\">Objects with static storage duration (3.7.1) shall be zero-initialized (8.5) before any other initialization takes place. Zero-initialization and initialization with a constant expression are collectively called <em>static initialization</em>; all other initialization is <em>dynamic initialization</em>. Objects of POD [plain old data] types (3.9) with static storage duration initialized with constant expressions (5.19) shall be initialized before any dynamic initialization takes place. Objects with static storage duration defined in namespace scope in the same translation unit and dynamically initialized shall be initialized in the order in which their definition appears in the translation unit. [Note:8.5.1 describes the order in which aggregate members are initialized. The initial- \n  ization of local static objects is described in 6.7.] </p>\n</blockquote>\n<p>So yes, globals which have static storage duration will be initialized.  Globals allocated, e.g., on the heap will of course not be initialized automatically.</p>\n", "OwnerDisplayName": "Derek Park", "LastActivityDate": "2008-09-13T17:20:43.197", "Id": "60707", "CommentCount": "0", "CreationDate": "2008-09-13T17:20:43.197", "ParentId": "60653", "Score": "18", "OwnerUserId": "872"}, "60669": {"PostTypeId": "2", "Body": "<p>Coming from the embedded world...</p>\n<p>Your code gets compiled into three types of memory:<br>\n   1. .data: initialized memory<br>\n   2. .text: constants and code<br>\n   3. .bss: uninitialized memory  (initialized to 0 in C++ if not explicitly initialized)</br></br></br></p>\n<p>Globals go in .data if initialized. If not they are placed in .bss and zero'ed in premain code.</p>\n", "OwnerDisplayName": "Jeff V", "LastActivityDate": "2008-09-13T16:28:05.663", "Id": "60669", "CommentCount": "0", "CreationDate": "2008-09-13T16:28:05.663", "ParentId": "60653", "Score": "6", "OwnerUserId": "445087"}, "bq_ids": {"n4140": {"so_60653_60707_0": {"length": 38, "quality": 0.5066666666666667, "section_id": 7151}}, "n3337": {"so_60653_60707_0": {"length": 38, "quality": 0.5066666666666667, "section_id": 6895}}}, "60655": {"PostTypeId": "2", "Body": "<p>Yes global primitives are initialized to NULL.</p>\n<p>Example:</p>\n<pre><code>int x;\n\nint main(int argc, char**argv)\n{\n  assert(x == 0);\n  int y;\n  //assert(y == 0); &lt;-- wrong can't assume this.\n}\n</code></pre>\n<p>You cannot make any assumptions about classes, structs, arrays, blocks of memory on the heap...</p>\n<p>It's safest just to always initialize everything. </p>\n", "OwnerDisplayName": "Brian R. Bondy", "LastActivityDate": "2008-09-13T16:15:28.360", "Id": "60655", "CommentCount": "6", "CreationDate": "2008-09-13T16:15:28.360", "ParentId": "60653", "Score": "8", "OwnerUserId": "3153"}});