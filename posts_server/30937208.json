post_cb({"30937208": {"CommentCount": "0", "ViewCount": "117", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2015-06-19T11:37:59.450", "LastActivityDate": "2015-06-19T11:51:12.307", "Title": "std::vector::resize(size_type) requires CopyInsertable?", "AcceptedAnswerId": "30937290", "LastEditDate": "2017-05-23T11:58:17.027", "Id": "30937208", "Score": "6", "Body": "<p>This question is made while I answer <a href=\"https://stackoverflow.com/questions/30935840/does-the-c-standard-specify-stl-implementation-details-for-the-compiler\">this another question</a>.</p>\n<p><a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf\" rel=\"nofollow noreferrer\">N3337</a> 23.3.6.3 \"vector capacity\" says (it's in 770 page):</p>\n<blockquote>\n<p id=\"so_30937208_30937208_0\">void resize(size_type sz);</p>\n<p id=\"so_30937208_30937208_1\">E\ufb00ects: If <code>sz &lt;= size()</code>, equivalent to <code>erase(begin() + sz, end());</code>. If <code>size() &lt; sz</code>, appends\n  <code>sz - size()</code> value-initialized elements to the sequence.</p>\n<p id=\"so_30937208_30937208_2\">Requires: T shall be CopyInsertable into *this.</p>\n</blockquote>\n<p>However, <a href=\"http://coliru.stacked-crooked.com/a/ada7ceb3f4d3868b\" rel=\"nofollow noreferrer\">clang++ says it's okay though T is not copyable.</a> And I think it makes sense that <code>resize(size_type)</code> requires only destroyable/moveable/default constructable. It destroys if <code>sz &lt;= size</code>, appends (which uses default constructing, and destroying and moving if the capacity is not enough) if <code>size() &lt; sz</code>.</p>\n<p>What is truth? Is it a standard defect? Or is it a mistake of both clang++ and me?</p>\n", "Tags": "<c++><c++11><language-lawyer>", "OwnerUserId": "2729109", "AnswerCount": "1"}, "30937290": {"ParentId": "30937208", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>You are correct. It was a defect in C++11 that was fixed for C++14 by <a href=\"http://cplusplus.github.io/LWG/lwg-defects.html#2033\" rel=\"nofollow\">http://cplusplus.github.io/LWG/lwg-defects.html#2033</a></p>\n<p>The current wording says:</p>\n<blockquote>\n<p id=\"so_30937208_30937290_0\">Effects: If <code>sz &lt; size()</code>, erases the last <code>size() - sz</code> elements from the sequence. Otherwise, appends\n  <code>sz - size()</code> default-inserted elements to the sequence.</p>\n<p id=\"so_30937208_30937290_1\">Requires: <code>T</code> shall be <code>MoveInsertable</code> and <code>DefaultInsertable</code> into <code>*this</code>.</p>\n</blockquote>\n<p>The requirement on <code>Destructible</code> is in Table 95 and applies to all operations on all containers, not just <code>resize()</code>.</p>\n", "OwnerUserId": "981959", "LastEditorUserId": "2069064", "LastEditDate": "2015-06-19T11:51:12.307", "Id": "30937290", "Score": "7", "CreationDate": "2015-06-19T11:42:42.127", "LastActivityDate": "2015-06-19T11:51:12.307"}, "bq_ids": {"n4140": {"so_30937208_30937208_1": {"section_id": 810, "quality": 0.6363636363636364, "length": 7}, "so_30937208_30937290_0": {"section_id": 810, "quality": 0.5384615384615384, "length": 7}}, "n3337": {"so_30937208_30937208_1": {"section_id": 801, "quality": 0.9090909090909091, "length": 10}}, "n4659": {"so_30937208_30937208_1": {"section_id": 868, "quality": 0.5454545454545454, "length": 6}, "so_30937208_30937290_0": {"section_id": 868, "quality": 0.9230769230769231, "length": 12}}}});