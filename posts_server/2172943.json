post_cb({"2172948": {"ParentId": "2172943", "PostTypeId": "2", "CommentCount": "13", "CreationDate": "2010-01-31T19:17:28.627", "Id": "2172948", "LastEditDate": "2013-12-09T18:02:11.077", "OwnerDisplayName": "anon", "Score": "261", "Body": "<p>In C, the type of a character <em>constant</em> like <code>'a'</code> is actually an <code>int</code>, with size of 4 (or some other implementation-dependent value). In C++, the type is <code>char</code>, with size of 1. This is one of many small differences between the two languages.</p>\n", "LastActivityDate": "2013-12-09T18:02:11.077", "LastEditorUserId": "298225"}, "47052994": {"ParentId": "2172943", "PostTypeId": "2", "CommentCount": "2", "Body": "<p><strong>In C language</strong>, character literal is not a <code>char</code> type. C considers character literal as integer. So, there is no difference between <code>sizeof('a')</code> and <code>sizeof(1)</code>. </p>\n<p>So, the sizeof character literal is equal to sizeof integer in C.</p>\n<p><strong>In C++ language</strong>, character literal is type of <code>char</code>. The <a href=\"http://en.cppreference.com/w/cpp/language/character_literal\" rel=\"nofollow noreferrer\">cppreference</a> say's:</p>\n<blockquote>\n<p id=\"so_2172943_47052994_0\">1) <strong>narrow character literal or ordinary character literal, e.g. <code>'a'</code> or\n  <code>'\\n'</code> or <code>'\\13'</code>. Such literal has type <code>char</code></strong> and the value equal to the\n  representation of c-char in the execution character set. If c-char is\n  not representable as a single byte in the execution character set, the\n  literal has type int and implementation-defined value.</p>\n</blockquote>\n<p>So, in C++ character literal is a type of <code>char</code>. so, size of character literal in C++ is one byte.</p>\n<p>Alos, In your programs, you have used wrong format specifier for <code>sizeof</code> operator.</p>\n<p><strong>C11 \u00a77.21.6.1 (P9) :</strong></p>\n<blockquote>\n<p id=\"so_2172943_47052994_1\">If a conversion specification is invalid, the behavior is\n  undefined.275) <strong>If any argument is not the correct type for the\n  corresponding conversion specification, the behavior is undefined.</strong></p>\n</blockquote>\n<p>So, you should use <code>%zu</code> format specifier instead of <code>%d</code>, otherwise it is undefined behaviour in C.</p>\n", "OwnerUserId": "6935629", "LastEditorUserId": "6935629", "LastEditDate": "2017-11-01T11:20:25.957", "Id": "47052994", "Score": "1", "CreationDate": "2017-11-01T10:41:01.367", "LastActivityDate": "2017-11-01T11:20:25.957"}, "27783813": {"ParentId": "2172943", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>In C the type of character literals are <strong>int</strong> and <strong>char</strong> in C++. This is in C++ required to <strong>support function overloading</strong>. See this example:</p>\n<pre><code>void foo(char c)\n{\n    puts(\"char\");\n}\nvoid foo(int i)\n{\n    puts(\"int\");\n}\nint main()\n{\n    foo('i');\n    return 0;\n}\n</code></pre>\n<p>Output:</p>\n<pre><code>char\n</code></pre>\n", "OwnerUserId": "3968826", "LastEditorUserId": "2465463", "LastEditDate": "2016-08-20T07:41:12.277", "Id": "27783813", "Score": "13", "CreationDate": "2015-01-05T16:33:41.123", "LastActivityDate": "2016-08-20T07:41:12.277"}, "11941166": {"ParentId": "2172943", "CommentCount": "3", "Body": "<p>As Paul stated, it's because <code>'a'</code> is an <code>int</code> in C but a <code>char</code> in C++.</p>\n<p>I cover that specific difference between C and C++ in something I wrote a few years ago, at: <a href=\"http://david.tribble.com/text/cdiffs.htm#C99-char-literal\" rel=\"noreferrer\">http://david.tribble.com/text/cdiffs.htm</a></p>\n", "OwnerUserId": "170383", "PostTypeId": "2", "Id": "11941166", "Score": "25", "CreationDate": "2012-08-13T19:42:36.000", "LastActivityDate": "2012-08-13T19:42:36.000"}, "2172943": {"CommentCount": "1", "AcceptedAnswerId": "2172948", "PostTypeId": "1", "LastEditorUserId": "6850771", "CreationDate": "2010-01-31T19:15:20.003", "LastActivityDate": "2017-11-01T11:20:25.957", "LastEditDate": "2017-03-09T04:59:44.823", "ViewCount": "197734", "FavoriteCount": "65", "Title": "Size of character ('a') in C/C++", "Id": "2172943", "Score": "231", "Body": "<p>What is the size of character in C and C++ ? As far as I know the size of char is 1 byte in both C and C++.</p>\n<p><strong><a href=\"http://www.ideone.com/e3Yo1Kyf\" rel=\"noreferrer\">In C:</a></strong></p>\n<pre><code>#include &lt;stdio.h&gt;\nint main()\n{\n  printf(\"Size of char : %d\\n\",sizeof(char));\n  return 0;\n}\n</code></pre>\n<p><strong><a href=\"http://www.ideone.com/uG4Qodfo\" rel=\"noreferrer\">In C++:</a></strong></p>\n<pre><code>#include &lt;iostream&gt;\nint main()\n{\n  std::cout&lt;&lt;\"Size of char : \"&lt;&lt;sizeof(char)&lt;&lt;\"\\n\";\n  return 0;\n}\n</code></pre>\n<p>No surprises, both of them gives the output : <code>Size of char : 1</code></p>\n<p>Now we know that characters are represented as <code>'a'</code>,<code>'b'</code>,<code>'c'</code>,<code>'|'</code>,... So I just modified the above codes to these:</p>\n<p><strong>In C:</strong></p>\n<pre><code>#include &lt;stdio.h&gt;\nint main()\n{\n  char a = 'a';\n  printf(\"Size of char : %d\\n\",sizeof(a));\n  printf(\"Size of char : %d\\n\",sizeof('a'));\n  return 0;\n}\n</code></pre>\n<p><strong><a href=\"http://www.ideone.com/Y11gm1lw\" rel=\"noreferrer\">Output:</a></strong></p>\n<pre><code>Size of char : 1\nSize of char : 4\n</code></pre>\n<p><strong>In C++:</strong></p>\n<pre><code>#include &lt;iostream&gt;\nint main()\n{\n  char a = 'a';\n  std::cout&lt;&lt;\"Size of char : \"&lt;&lt;sizeof(a)&lt;&lt;\"\\n\";\n  std::cout&lt;&lt;\"Size of char : \"&lt;&lt;sizeof('a')&lt;&lt;\"\\n\";\n  return 0;\n}\n</code></pre>\n<p><strong><a href=\"http://www.ideone.com/b00pdptc\" rel=\"noreferrer\">Output:</a></strong></p>\n<pre><code>Size of char : 1\nSize of char : 1\n</code></pre>\n<p><strong>Why the <code>sizeof('a')</code> returns different values in C and C++?</strong></p>\n", "Tags": "<c++><c><types>", "OwnerUserId": "211631", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_2172943_47052994_0": {"section_id": 5343, "quality": 0.7586206896551724, "length": 22}}, "n3337": {"so_2172943_47052994_0": {"section_id": 5140, "quality": 0.6551724137931034, "length": 19}}, "n4659": {"so_2172943_47052994_0": {"section_id": 6765, "quality": 0.7241379310344828, "length": 21}}}});