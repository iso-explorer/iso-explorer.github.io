post_cb({"12136194": {"ParentId": "12136156", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>Read the standard</p>\n<blockquote>\n<p id=\"so_12136156_12136194_0\">\u00a75.18 Comma operator [expr.comma]</p>\n<p id=\"so_12136156_12136194_1\">\u00b61 The comma operator groups left-to-right.</p>\n<pre><code>expression:\nassignment-expression\nexpression , assignment-expression\n</code></pre>\n<p id=\"so_12136156_12136194_2\">A pair of expressions separated by a comma is evaluated left-to-right; the left expression is a discardedvalue\n  expression (Clause 5).<sup>83</sup> Every value computation and side effect associated with the left expression\n  is sequenced before every value computation and side effect associated with the right expression. The type\n  and value of the result are the type and value of the right operand; the result is of the same value category\n  as its right operand, and is a bit-field if its right operand is a glvalue and a bit-field.</p>\n<p id=\"so_12136156_12136194_3\">\u00b62 In contexts where comma is given a special meaning, [ Example: in lists of arguments to functions (5.2.2)\n  and lists of initializers (8.5) \u2014end example ] the comma operator as described in Clause 5 can appear only\n  in parentheses. [ Example:</p>\n<pre><code>f(a, (t=3, t+2), c);\n</code></pre>\n<p id=\"so_12136156_12136194_4\">has three arguments, the second of which has the value 5. \u2014end example ]</p>\n</blockquote>\n", "OwnerUserId": "990524", "LastEditorUserId": "15168", "LastEditDate": "2012-08-27T04:26:10.073", "Id": "12136194", "Score": "0", "CreationDate": "2012-08-27T04:21:48.967", "LastActivityDate": "2012-08-27T04:26:10.073"}, "12136188": {"ParentId": "12136156", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>The first one is equivalent to:</p>\n<pre><code>(true  ? (++x, ++y) : (--x)), --y; \n</code></pre>\n<p>The second one is equivalent to:</p>\n<pre><code>(false ? (++x, ++y) : (--x)), --y; \n</code></pre>\n<p>Thus the <code>--y</code> is always executed.  In the first line, the increments are executed first so <code>x = 1, y = 0</code> is expected.  In the second line, the decrement of <code>x</code> is executed first so <code>x = -1, y = -1</code> is expected.</p>\n<hr>\n<p>As noted in a comment (to another answer) by <a href=\"https://stackoverflow.com/users/1491895/barmar\">Barmar</a>:</p>\n<blockquote>\n<p id=\"so_12136156_12136188_0\">And in case anyone is wondering why the comma between <code>++x</code> and <code>++y</code> doesn't have the same effect, it's because <code>(true? ++x)</code> would not be valid at all. So the compiler keeps scanning until it finds the <code>:</code>, but beyond that it stops when it reaches a lower precedence operator <em>[(<code>,</code> in this example) or the end of statement]</em>.</p>\n</blockquote>\n</hr>", "OwnerUserId": "15168", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:01:55.357", "Id": "12136188", "Score": "17", "CreationDate": "2012-08-27T04:19:41.423", "LastActivityDate": "2012-08-27T04:35:41.593"}, "12136195": {"ParentId": "12136156", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>The <code>y</code> is zero because comma has <a href=\"http://en.cppreference.com/w/cpp/language/operator_precedence\" rel=\"nofollow\">the lowest precedence among all C++ operators</a>. Because its precedence is lower than that of the ternary conditional operator, the conditional operators are parsed as <code>true? ++x, ++y : --x</code> and <code>false? ++x, ++y : --x</code>. In both cases, the <code>--y</code> statement is executed <em>unconditionally</em>.</p>\n<p><strong>EDIT</strong> The first comma is different because the compiler has found a <code>?</code>, so now it needs a <code>:</code> to complete the \"when true\" expression of the conditional. That is why both <code>++x</code> and <code>++y</code> are taken in.</p>\n", "OwnerUserId": "335858", "LastEditorUserId": "335858", "LastEditDate": "2012-08-27T04:30:30.077", "Id": "12136195", "Score": "4", "CreationDate": "2012-08-27T04:21:55.923", "LastActivityDate": "2012-08-27T04:30:30.077"}, "bq_ids": {"n4140": {"so_12136156_12136194_1": {"section_id": 6182, "quality": 0.8, "length": 4}, "so_12136156_12136194_4": {"section_id": 6183, "quality": 0.6666666666666666, "length": 4}, "so_12136156_12136194_2": {"section_id": 6182, "quality": 0.9607843137254902, "length": 49}, "so_12136156_12136194_3": {"section_id": 6183, "quality": 0.782608695652174, "length": 18}}, "n3337": {"so_12136156_12136194_1": {"section_id": 5943, "quality": 0.8, "length": 4}, "so_12136156_12136194_4": {"section_id": 5944, "quality": 0.6666666666666666, "length": 4}, "so_12136156_12136194_2": {"section_id": 5943, "quality": 0.9607843137254902, "length": 49}, "so_12136156_12136194_3": {"section_id": 5944, "quality": 0.782608695652174, "length": 18}}, "n4659": {"so_12136156_12136194_1": {"section_id": 7684, "quality": 0.8, "length": 4}, "so_12136156_12136194_4": {"section_id": 7685, "quality": 0.6666666666666666, "length": 4}, "so_12136156_12136194_2": {"section_id": 7684, "quality": 0.9411764705882353, "length": 48}, "so_12136156_12136194_3": {"section_id": 7685, "quality": 0.782608695652174, "length": 18}}}, "12136156": {"CommentCount": "8", "CreationDate": "2012-08-27T04:15:02.050", "PostTypeId": "1", "AcceptedAnswerId": "12136188", "LastEditorUserId": "5340808", "LastActivityDate": "2016-01-12T09:32:04.800", "LastEditDate": "2016-01-12T09:32:04.800", "ViewCount": "1006", "FavoriteCount": "2", "Title": "What's the precedence of comma operator inside conditional operator in C++?", "Id": "12136156", "Score": "7", "Body": "<p>What's happening here? </p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main(){\n\n    int x=0,y=0;\n    true? ++x, ++y : --x, --y; \n    cout &lt;&lt; \"x: \" &lt;&lt; x &lt;&lt; endl;\n    cout &lt;&lt; \"y: \" &lt;&lt; y &lt;&lt; endl; //why does y=0 here?\n\n    x=0,y=0;\n    false ? ++x, ++y : --x, --y; \n    cout &lt;&lt; \"x: \" &lt;&lt; x &lt;&lt; endl;\n    cout &lt;&lt; \"y: \" &lt;&lt; y &lt;&lt; endl;\n}\n\nx: 1\ny: 0\n\nx: -1\ny: -1\n</code></pre>\n<p>The second case seems fine. I would expect both x and y to increment to 1 in the first case but only the left hand operand increments. </p>\n", "Tags": "<c++><comma><precedence>", "OwnerUserId": "1626720", "AnswerCount": "3"}});