post_cb({"4480729": {"CommentCount": "2", "Body": "<p>No, you should match the non-array form of <code>new</code> with non-array <code>delete</code>, and likewise for the array forms.</p>\n<p>See the <a href=\"http://www.parashift.com/c%2B%2B-faq-lite/freestore-mgmt.html\" rel=\"nofollow\">C++ FAQ Lite section on Freestore Management</a></p>\n<p>This is especially good: <a href=\"http://www.parashift.com/c%2B%2B-faq-lite/freestore-mgmt.html#faq-16.12\" rel=\"nofollow\">http://www.parashift.com/c%2B%2B-faq-lite/freestore-mgmt.html#faq-16.12</a></p>\n<blockquote>\n<p id=\"so_4480722_4480729_0\">[16.12] What if I forget the [] when deleteing array allocated via new T[n]?</p>\n<p id=\"so_4480722_4480729_1\">All life comes to a catastrophic end.</p>\n<p id=\"so_4480722_4480729_2\">It is the programmer's \u2014not the compiler's\u2014 responsibility to get the connection between new T[n] and delete[] p correct. If you get it wrong, neither a compile-time nor a run-time error message will be generated by the compiler. Heap corruption is a likely result. Or worse. Your program will probably die.</p>\n</blockquote>\n", "CreationDate": "2010-12-18T23:25:15.410", "ParentId": "4480722", "Id": "4480729", "LastActivityDate": "2010-12-18T23:25:15.410", "PostTypeId": "2", "Score": "11", "OwnerUserId": "297696"}, "4480722": {"CreationDate": "2010-12-18T23:23:53.493", "ViewCount": "542", "Id": "4480722", "AcceptedAnswerId": "4480729", "Score": "0", "Title": "Should new/new[] match delete/delete[]?", "LastEditorUserId": "3980929", "CommentCount": "5", "Body": "<p>I knew that when we allocate memory by using new/new[], then we should release the memory by using the delete/delete[] respectively.</p>\n<p>Here is the question,</p>\n<p>Can I use delete[] to release the memory allocated by new?</p>\n<p>For example,</p>\n<pre><code>int *pInt3 = new int;\ndelete [] pInt3;\npInt3 = NULL;\n\nT *pT3 = new T;\ndelete [] pT3;\npT3 = NULL;\n</code></pre>\n<p>Thank you</p>\n", "Tags": "<c++>", "LastEditDate": "2017-06-10T12:33:09.730", "LastActivityDate": "2017-06-10T12:33:09.730", "PostTypeId": "1", "AnswerCount": "3", "OwnerUserId": "391104"}, "4481176": {"CommentCount": "3", "Body": "<p>I guess that you are not satisfied with anything but a reference to the standard, so here it is.</p>\n<p>You can find it under 3.7.3.2 in the Standard for C++03.</p>\n<blockquote>\n<p id=\"so_4480722_4481176_0\">3 The value of the first argument supplied to one of the deallocation functions provided in the standard library may be a null pointer value; if so, the call to the deallocation function has no effect. Otherwise, the value supplied to operator delete(void*) in the standard library shall be one of the values returned by a previous invocation of either operator new(size_t) or operator new(size_t, const std::nothrow_t&amp;) in the standard library, and <strong>the value supplied to operator delete[] (void*) in the standard library shall be one of the values returned by a previous invocation of either operator new[] (size_t) or operator new[] (size_t, const std::nothrow_t&amp;) in the standard library</strong>.</p>\n</blockquote>\n<p>So the answer to your question is no.</p>\n", "CreationDate": "2010-12-19T01:30:53.000", "ParentId": "4480722", "Id": "4481176", "LastActivityDate": "2010-12-19T01:30:53.000", "PostTypeId": "2", "Score": "5", "OwnerUserId": "429618"}, "bq_ids": {"n4140": {"so_4480722_4481176_0": {"length": 44, "quality": 0.7586206896551724, "section_id": 7182}}, "n3337": {"so_4480722_4481176_0": {"length": 44, "quality": 0.7586206896551724, "section_id": 6926}}}, "4480754": {"CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_4480722_4480754_0\">Can I use delete[] to release the\n  memory allocated by new?</p>\n</blockquote>\n<p>Yes you <em>could</em>, but you will be sorry if you do.</p>\n", "CreationDate": "2010-12-18T23:30:50.297", "ParentId": "4480722", "Id": "4480754", "LastActivityDate": "2010-12-18T23:30:50.297", "PostTypeId": "2", "Score": "1", "OwnerUserId": "547023"}});