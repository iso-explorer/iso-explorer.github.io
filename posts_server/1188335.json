post_cb({"1188488": {"ParentId": "1188335", "CommentCount": "0", "Body": "<p>0 as the return code for success, and postive integers as errors is the standard in C and Unix. This scheme was chosen because normally one doesn't care why a program <strong>succeeded</strong>, just that it did. On the other hand, there are lots of ways for a program to fail with an error, and one is often interested in this information. Hence it makes sense to use a scalar value for success, and a range of values for error. Using positive integers is a memory-saving C convention, as they allow the error code to be defined as an unsigned int.</p>\n", "OwnerUserId": "143804", "PostTypeId": "2", "Id": "1188488", "Score": "3", "CreationDate": "2009-07-27T14:27:31.373", "LastActivityDate": "2009-07-27T14:27:31.373"}, "1188469": {"ParentId": "1188335", "PostTypeId": "2", "CommentCount": "7", "Body": "<p>Returning zero from <code>main()</code> does essentially the same as what you're asking. Returning zero from <code>main()</code> does not have to return zero to the host environment.  </p>\n<p>From the C90/C99/C++98 standard document:</p>\n<blockquote>\n<p id=\"so_1188335_1188469_0\">If the value of status is zero or <code>EXIT_SUCCESS</code>, an implementation-defined form of the status successful termination is returned.</p>\n</blockquote>\n", "OwnerUserId": "12711", "LastEditorUserId": "1009479", "LastEditDate": "2013-10-06T13:25:00.480", "Id": "1188469", "Score": "33", "CreationDate": "2009-07-27T14:25:43.420", "LastActivityDate": "2013-10-06T13:25:00.480"}, "1188341": {"ParentId": "1188335", "CommentCount": "3", "Body": "<p>0 is the standard (success) exit code on all POSIX systems, and all systems I know!  I think it has been this way sinc time begain (or at least since Unix did...) So it's for this reason I would say.</p>\n<p>What system do you know that is different?</p>\n", "OwnerUserId": "912", "PostTypeId": "2", "Id": "1188341", "Score": "4", "CreationDate": "2009-07-27T14:07:12.200", "LastActivityDate": "2009-07-27T14:07:12.200"}, "1188497": {"ParentId": "1188335", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>Actually, <code>return 0</code> won't necessarily return 0! I'm quoting the C standard here, because it's what I know best.</p>\n<p>About <code>return</code> in <code>main()</code>:</p>\n<blockquote>\n<p id=\"so_1188335_1188497_0\">5.1.2.2.3 Program termination</p>\n<p id=\"so_1188335_1188497_1\">If the return type of the main function is a type compatible with <code>int</code>, a return from the initial call to the <code>main</code> function is equivalent to calling the <code>exit</code> function with the value returned by the <code>main</code> function as its argument;</p>\n</blockquote>\n<p>About <code>exit()</code>:</p>\n<blockquote>\n<p id=\"so_1188335_1188497_2\">7.20.4.3 The exit function<br>\n    Synopsis  </br></p>\n<pre><code>#include &lt;stdlib.h&gt;\nvoid exit(int status);\n</code></pre>\n<p id=\"so_1188335_1188497_3\">[...]<br>\n  Finally, control is returned to the host environment. If the value of <code>status</code> is zero or\n  <code>EXIT_SUCCESS</code>, an implementation-defined form of the status <em>successful termination</em> is\n  returned.</br></p>\n</blockquote>\n", "OwnerUserId": "88851", "LastEditorUserId": "88851", "LastEditDate": "2009-07-27T14:48:56.737", "Id": "1188497", "Score": "18", "CreationDate": "2009-07-27T14:28:41.590", "LastActivityDate": "2009-07-27T14:48:56.737"}, "1188386": {"ParentId": "1188335", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>If you were also thinking about why the error code for success is 0 instead of any other value, I would add that it might have been historically for performance reasons, as comparing with 0 have been sightly faster (I think in modern architectures might be the same as with any number) and usually you don't check for a particular error code, just if it was success or any error (so it makes sense to use the fastest comparison for that).</p>\n", "OwnerUserId": "106979", "LastEditorUserId": "106979", "LastEditDate": "2009-07-27T16:27:48.373", "Id": "1188386", "Score": "0", "CreationDate": "2009-07-27T14:14:09.883", "LastActivityDate": "2009-07-27T16:27:48.373"}, "1188350": {"ParentId": "1188335", "CommentCount": "1", "Body": "<p>The standard is simply making a determination on what must be the value when not explicitly set. It is up to the developers to either explicitly set the return value or assume an appropriate semantic for the default. I don't think the language is trying to force any semantics on to the developers.</p>\n", "OwnerUserId": "48684", "PostTypeId": "2", "Id": "1188350", "Score": "5", "CreationDate": "2009-07-27T14:08:47.393", "LastActivityDate": "2009-07-27T14:08:47.393"}, "2890460": {"ParentId": "1188335", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>OS/360 and successors use a numeric exit code, <code>0</code> usually being success, <code>4</code> for warnings (such as a compiler that generated warning message), <code>8</code> for error, and <code>12</code> for especially bad errors\n(such as being unable to open SYSPRINT, the standard output unit).</p>\n", "OwnerUserId": "348097", "LastEditorUserId": "1009479", "LastEditDate": "2013-10-06T13:25:52.013", "Id": "2890460", "Score": "2", "CreationDate": "2010-05-23T02:01:12.240", "LastActivityDate": "2013-10-06T13:25:52.013"}, "19209310": {"ParentId": "1188335", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>By browsing <code>cstdlib</code> I ended up with two lines:</p>\n<pre><code>#define EXIT_SUCCESS 0\n#define EXIT_FAILURE 1\n</code></pre>\n<p>So <code>EXIT_SUCCESS</code> equals <code>0</code>, and <code>EXIT_FAILURE</code> equals <code>1</code>, which means it doesn't matter, thought.</p>\n<p>Checked on Linux (OpenSuse) and ended up with the same thing.</p>\n", "OwnerUserId": "2851815", "LastEditorUserId": "2851815", "LastEditDate": "2013-10-22T20:04:36.343", "Id": "19209310", "Score": "1", "CreationDate": "2013-10-06T13:20:34.953", "LastActivityDate": "2013-10-22T20:04:36.343"}, "1188335": {"CommentCount": "0", "AcceptedAnswerId": "1188469", "PostTypeId": "1", "LastEditorUserId": "1768232", "CreationDate": "2009-07-27T14:05:52.280", "LastActivityDate": "2015-06-22T15:05:39.963", "LastEditDate": "2015-06-22T15:05:39.963", "ViewCount": "15401", "FavoriteCount": "4", "Title": "Why default return value of main is 0 and not EXIT_SUCCESS?", "Id": "1188335", "Score": "21", "Body": "<p>The ISO 1998 c++ standard specifies that not explicitly using a return statement in the main is equivalent to use <code>return 0</code>. \nBut what if an implementation has a different standard \"no error\" code, for example <code>-1</code>?</p>\n<p>Why not use the standard macro <code>EXIT_SUCCESS</code> that would be replaced either by <code>0</code> or <code>-1</code> or any other value depending on the implementation?</p>\n<p>C++ seems to force the semantic of the program, which is not the role of a language which should only describe how the program behaves. Moreover the situation is different for the \"error\" return value: only <code>EXIT_FAILURE</code> is a standard \"error\" termination flag, with no explicit value, like \"1\" for example.</p>\n<p>What are the reasons of these choices?</p>\n", "Tags": "<c++><return><standards><main>", "OwnerUserId": "145757", "AnswerCount": "9"}, "bq_ids": {"n4140": {"so_1188335_1188497_3": {"section_id": 6805, "quality": 0.8, "length": 12}, "so_1188335_1188469_0": {"section_id": 6805, "quality": 0.7, "length": 7}}, "n3337": {"so_1188335_1188497_3": {"section_id": 6560, "quality": 0.8, "length": 12}, "so_1188335_1188469_0": {"section_id": 6560, "quality": 0.7, "length": 7}}, "n4659": {"so_1188335_1188497_3": {"section_id": 8296, "quality": 0.8, "length": 12}, "so_1188335_1188469_0": {"section_id": 8296, "quality": 0.7, "length": 7}}}, "1188656": {"ParentId": "1188335", "CommentCount": "0", "Body": "<p>Computer language standards say what a program written in the language has to do, and what will happen.  In this case, the C and C++ standards say that returning 0 signals success, among other things.</p>\n<p>Language implementations allow programs to run on particular implementations.  It's the job of the implementor to figure out how to make I/O work according to the standard, or to give the OS the correct result code.</p>\n<p>What a program does and what the OS sees do not have to be the same thing.  All that is necessary is that the program works as the standard says on the given OS.</p>\n", "OwnerUserId": "14148", "PostTypeId": "2", "Id": "1188656", "Score": "1", "CreationDate": "2009-07-27T14:56:46.147", "LastActivityDate": "2009-07-27T14:56:46.147"}});