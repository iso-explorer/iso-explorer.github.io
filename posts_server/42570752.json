post_cb({"bq_ids": {"n4140": {"so_42570752_42570876_2": {"length": 5, "quality": 0.8333333333333334, "section_id": 7185}, "so_42570752_42570876_1": {"length": 19, "quality": 0.95, "section_id": 6064}, "so_42570752_42570876_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 6005}}, "n3337": {"so_42570752_42570876_2": {"length": 5, "quality": 0.8333333333333334, "section_id": 6929}, "so_42570752_42570876_1": {"length": 19, "quality": 0.95, "section_id": 5832}, "so_42570752_42570876_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 5773}}, "n4659": {"so_42570752_42570876_2": {"length": 6, "quality": 1.0, "section_id": 8732}, "so_42570752_42570876_1": {"length": 18, "quality": 0.9, "section_id": 7560}, "so_42570752_42570876_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 7504}}}, "42570752": {"ViewCount": "65", "Body": "<p>There are many questions on Stack Overflow that explain that the following is undefined behavior in C++:</p>\n<pre><code>MyType* p = nullptr;\np-&gt;DoSomething();\n</code></pre>\n<p>but I can't find one that cites the C++ standard. Which part of the C++11 and/or C++14 standards say that this is undefined behavior?</p>\n", "AcceptedAnswerId": "42570876", "Title": "Which part of the C++ standard covers calling a method via a null pointer?", "CreationDate": "2017-03-03T04:37:02.360", "Id": "42570752", "CommentCount": "0", "LastEditDate": "2017-03-03T22:08:43.117", "PostTypeId": "1", "LastEditorUserId": "68587", "LastActivityDate": "2017-03-03T22:08:43.117", "Score": "2", "OwnerUserId": "1505451", "Tags": "<c++><standards>", "AnswerCount": "1"}, "42570876": {"Id": "42570876", "PostTypeId": "2", "Body": "<p>C++14 [expr.ref]/2:</p>\n<blockquote>\n<p id=\"so_42570752_42570876_0\">The expression <code>E1-&gt;E2</code> is converted to the equivalent form <code>(*(E1)).E2</code></p>\n</blockquote>\n<p>C++14 [expr.unary.op]/1:</p>\n<blockquote>\n<p id=\"so_42570752_42570876_1\">The unary <code>*</code> operator performs indirection: the expression to which it is applied shall be a pointer to an object type, or a pointer to a function type and the result is an lvalue referring to <strong>the object</strong> or function <strong>to which the expression points</strong>.</p>\n</blockquote>\n<p>The pointer does not point to an object, therefore this quote does not define the behaviour of <code>*p</code>. Nowhere else in the standard defines it either, so it is undefined behaviour.</p>\n<p>Regarding whether a null pointer can be said to point to an object, N4618 [basic.compound]/3 defines pointer values as:</p>\n<blockquote>\n<p id=\"so_42570752_42570876_2\">Every value of pointer type is one of the following:</p>\n<ul>\n<li>a pointer to an object or function (the pointer is said to point to the object or function), or</li>\n<li>a pointer past the end of an object, or</li>\n<li>the null pointer value for that type, or</li>\n<li>an invalid pointer value.</li>\n</ul>\n</blockquote>\n<p>which indicates that the null pointer value does not point to an object.</p>\n", "LastEditorUserId": "1505939", "LastActivityDate": "2017-03-03T21:52:33.250", "Score": "3", "CreationDate": "2017-03-03T04:48:52.973", "ParentId": "42570752", "CommentCount": "9", "LastEditDate": "2017-03-03T21:52:33.250", "OwnerUserId": "1505939"}});