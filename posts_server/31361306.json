post_cb({"bq_ids": {"n4140": {"so_31361306_31361306_0": {"length": 43, "quality": 1.0, "section_id": 7195}, "so_31361306_31361306_2": {"length": 9, "quality": 1.0, "section_id": 7195}, "so_31361306_31361336_0": {"length": 10, "quality": 0.9090909090909091, "section_id": 6975}, "so_31361306_31361306_5": {"length": 10, "quality": 0.9090909090909091, "section_id": 6975}, "so_31361306_31361306_1": {"length": 10, "quality": 1.0, "section_id": 7195}, "so_31361306_31361306_4": {"length": 17, "quality": 1.0, "section_id": 7195}, "so_31361306_31361306_3": {"length": 16, "quality": 1.0, "section_id": 7195}}, "n3337": {"so_31361306_31361306_0": {"length": 43, "quality": 1.0, "section_id": 6939}, "so_31361306_31361306_2": {"length": 9, "quality": 1.0, "section_id": 6939}, "so_31361306_31361306_4": {"length": 17, "quality": 1.0, "section_id": 6939}, "so_31361306_31361306_5": {"length": 10, "quality": 0.9090909090909091, "section_id": 6721}, "so_31361306_31361306_1": {"length": 10, "quality": 1.0, "section_id": 6939}, "so_31361306_31361336_0": {"length": 10, "quality": 0.9090909090909091, "section_id": 6721}, "so_31361306_31361306_3": {"length": 16, "quality": 1.0, "section_id": 6939}}, "n4659": {"so_31361306_31361306_0": {"length": 43, "quality": 1.0, "section_id": 8704}, "so_31361306_31361306_2": {"length": 9, "quality": 1.0, "section_id": 8704}, "so_31361306_31361306_4": {"length": 17, "quality": 1.0, "section_id": 8704}, "so_31361306_31361306_5": {"length": 10, "quality": 0.9090909090909091, "section_id": 8474}, "so_31361306_31361306_1": {"length": 10, "quality": 1.0, "section_id": 8704}, "so_31361306_31361336_0": {"length": 10, "quality": 0.9090909090909091, "section_id": 8474}, "so_31361306_31361306_3": {"length": 16, "quality": 1.0, "section_id": 8704}}}, "31361336": {"Id": "31361336", "PostTypeId": "2", "Body": "<p>From [class.derived]:</p>\n<blockquote>\n<p id=\"so_31361306_31361336_0\">Unless redeclared in the derived class, members\n  of a base class are also considered to be members of the derived class.</p>\n</blockquote>\n<p><code>a</code> is also a member of <code>D</code>, so <code>D</code> does contain a non-static data member of reference type. Hence, your usage is invalid. </p>\n", "LastActivityDate": "2015-07-11T20:09:13.547", "CommentCount": "0", "CreationDate": "2015-07-11T20:09:13.547", "ParentId": "31361306", "Score": "1", "OwnerUserId": "2069064"}, "31361306": {"ViewCount": "34", "Body": "<p>Working Draft N4527 3.8[basic.life]p7 says:</p>\n<blockquote>\n<p id=\"so_31361306_31361306_0\">If, after the lifetime of an object has ended and before the storage which the object occupied is reused or\n  released, a new object is created at the storage location which the original object occupied, a pointer that\n  pointed to the original object, a reference that referred to the original object, or the name of the original\n  object will automatically refer to the new object and, once the lifetime of the new object has started, can\n  be used to manipulate the new object, if:</p>\n<p id=\"so_31361306_31361306_1\">(7.1) \u2014 the storage for the new object exactly overlays the storage location which the original object occupied,\n  and</p>\n<p id=\"so_31361306_31361306_2\">(7.2) \u2014 the new object is of the same type as the original object (ignoring the top-level cv-qualifiers), and</p>\n<p id=\"so_31361306_31361306_3\">(7.3) \u2014 the type of the original object is not const-qualified, and, <strong>if a class type, does not contain any non-static\n  data member whose type is const-qualified or a reference type, and</strong></p>\n<p id=\"so_31361306_31361306_4\">(7.4) \u2014 the original object was a most derived object (1.8) of type T and the new object is a most derived\n  object of type T (that is, they are not base class subobjects).</p>\n</blockquote>\n<pre><code>struct B{\n    B(int &amp;i):a(i){}\n    int &amp;a;\n};\n\nstruct D:B{\n    D(int &amp;i):B(i){}\n    f();\n};\n\nint main()\n{\n    int i = 1;\n    int j = 2;\n    D d(i);\n    d.~D();\n    new(&amp;d) D(j);\n    d.f();  //D does not contain any non-static data member \n            //whose type is a reference type,\n            //but B does, is this ok?\n    return 0;\n}\n</code></pre>\n<p>10 [class.derived]p2:</p>\n<blockquote>\n<p id=\"so_31361306_31361306_5\"><strong>Unless redeclared in the derived class, members\n  of a base class are also considered to be members of the derived class</strong></p>\n</blockquote>\n<p>Question 1:</p>\n<p>When the Working Draft says \"<strong>non-static data member</strong>\", it only means non-static data members of derived class, or of both derived class and base class?</p>\n<p>Question 2:</p>\n<p>Is the code right?</p>\n", "AcceptedAnswerId": "31361336", "Title": "After lifetime has ended, recreating an new object, the type of non-static data member of bass class is reference type, is this well-defined?", "CreationDate": "2015-07-11T20:05:19.597", "Id": "31361306", "CommentCount": "1", "PostTypeId": "1", "LastActivityDate": "2015-07-11T20:09:13.547", "Score": "2", "OwnerUserId": "4958516", "Tags": "<c++>", "AnswerCount": "1"}});