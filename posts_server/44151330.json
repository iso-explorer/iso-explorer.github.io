post_cb({"bq_ids": {"n4140": {"so_44151330_44151610_1": {"length": 15, "quality": 0.7894736842105263, "section_id": 3296}, "so_44151330_44151610_3": {"length": 5, "quality": 0.7142857142857143, "section_id": 3296}, "so_44151330_44151610_4": {"length": 14, "quality": 0.875, "section_id": 3296}, "so_44151330_44151610_6": {"length": 5, "quality": 0.8333333333333334, "section_id": 3296}, "so_44151330_44151610_2": {"length": 5, "quality": 0.5555555555555556, "section_id": 3296}}, "n3337": {"so_44151330_44151610_4": {"length": 14, "quality": 0.875, "section_id": 3166}, "so_44151330_44151610_3": {"length": 5, "quality": 0.7142857142857143, "section_id": 3166}, "so_44151330_44151610_1": {"length": 15, "quality": 0.7894736842105263, "section_id": 3166}, "so_44151330_44151610_6": {"length": 5, "quality": 0.8333333333333334, "section_id": 3166}, "so_44151330_44151610_2": {"length": 5, "quality": 0.5555555555555556, "section_id": 3166}}, "n4659": {"so_44151330_44151610_1": {"length": 15, "quality": 0.7894736842105263, "section_id": 4058}, "so_44151330_44151610_3": {"length": 5, "quality": 0.7142857142857143, "section_id": 4058}, "so_44151330_44151610_4": {"length": 14, "quality": 0.875, "section_id": 4058}, "so_44151330_44151610_6": {"length": 5, "quality": 0.8333333333333334, "section_id": 4058}, "so_44151330_44151610_2": {"length": 7, "quality": 0.7777777777777778, "section_id": 4058}}}, "44152404": {"Id": "44152404", "PostTypeId": "2", "Body": "<p>In c++14 you could also make use of <code>std::integer_sequence</code> and constructor dedicated to initialize array:</p>\n<pre><code>#include &lt;utility&gt;\n\nstruct Test\n{\n    char characters_[3];\n\n    Test(char (&amp;characters)[3]) : Test(characters, std::make_index_sequence&lt;3&gt;{}) {}\n\n\n    private:\n    template &lt;std::size_t N, std::size_t... Is&gt;\n    Test(char (&amp;characters)[N], std::index_sequence&lt;Is...&gt;): characters_{characters[Is]...} {}\n};\n\nint main() {\n    char abc[] = {'a', 'b', 'c'};\n    Test test(abc);\n}\n</code></pre>\n<p><a href=\"https://wandbox.org/permlink/zje9awlneu0ve4cp\" rel=\"nofollow noreferrer\">[live demo]</a></p>\n<p>To apply it in c++11 you'd need to use one of the <code>std::integer_sequence</code> <a href=\"https://stackoverflow.com/questions/17424477/implementation-c14-make-integer-sequence\">c++11 implementations</a></p>\n", "LastEditorUserId": "4324224", "LastActivityDate": "2017-05-24T08:07:46.157", "Score": "2", "CreationDate": "2017-05-24T08:00:23.393", "ParentId": "44151330", "CommentCount": "0", "OwnerUserId": "4324224", "LastEditDate": "2017-05-24T08:07:46.157"}, "44151330": {"ViewCount": "127", "Body": "<p>How to initialize an array in constructor by the argument? I think <code>type (&amp;name)[size]</code> syntax is pretty good and compiler maintainers can implement this easily. Is there a paragraph in the standard prohibiting such initialization?</p>\n<h3>Code:</h3>\n<pre><code>struct Test\n{\n    char characters_[3];\n    Test(char (&amp;characters)[3]) : characters_(characters) {}\n};\n</code></pre>\n<h3>GCC version:</h3>\n<pre><code>gcc (Ubuntu 5.4.0-6ubuntu1~16.04.4) 5.4.0 20160609\n</code></pre>\n<h2>GCC output:</h2>\n<pre><code>FAILED: /usr/bin/c++     -Wall -Wextra -Wconversion -pedantic -Wmissing-declarations -Wmissing-include-dirs -Wfloat-equal -std=c++11 -pg   -m32 -std=gnu++11 -MMD -MT CMakeFiles/Test.dir/test.cpp.o -MF CMakeFiles/Test.dir/test.cpp.o.d -o CMakeFiles/Test.dir/test.cpp.o -c /home/user/Desktop/programms/test/Test/test.cpp\nIn file included from /home/user/Desktop/programms/test/Test/test.cpp:1:0:\n/home/user/Desktop/programms/test/Test/test.h: In constructor \u2018Test::Test(char (&amp;)[3])\u2019:\n/home/user/Desktop/programms/test/Test/test.h:38:54: error: array used as initializer\n  Test(char (&amp;characters)[3]) : characters_(characters) {}\n                                                      ^\nFAILED: /usr/bin/c++     -Wall -Wextra -Wconversion -pedantic -Wmissing-declarations -Wmissing-include-dirs -Wfloat-equal -std=c++11 -pg   -m32 -std=gnu++11 -MMD -MT CMakeFiles/Test.dir/main.cpp.o -MF CMakeFiles/Test.dir/main.cpp.o.d -o CMakeFiles/Test.dir/main.cpp.o -c /home/user/Desktop/programms/test/Test/main.cpp\nIn file included from /home/user/Desktop/programms/test/Test/main.cpp:4:0:\n/home/user/Desktop/programms/test/Test/test.h: In constructor \u2018Test::Test(char (&amp;)[3])\u2019:\n/home/user/Desktop/programms/test/Test/test.h:38:54: error: array used as initializer\n  Test(char (&amp;characters)[3]) : characters_(characters) {}\n                                                      ^\n</code></pre>\n", "AcceptedAnswerId": "44151610", "Title": "How to initialize an array in constructor by the argument?", "CreationDate": "2017-05-24T07:09:47.633", "Id": "44151330", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2017-05-24T08:07:46.157", "Score": "2", "OwnerUserId": "6099096", "Tags": "<c++><c++11><gcc>", "AnswerCount": "2"}, "44151610": {"Id": "44151610", "PostTypeId": "2", "Body": "<p>Perhaps the simplest solution is to use <code>std::array</code> instead:</p>\n<pre><code>std::array&lt;char, 3&gt; characters;\nTest(std::array&lt;char, 3&gt; characters) : characters(characters) {}\n</code></pre>\n<p>Prior to C++11, one would have copied the argument array in the body of the constructor:</p>\n<pre><code>Test(char (&amp;characters)[3]) {\n    std::copy(characters, characters + sizeof characters, this-&gt;characters);\n}\n</code></pre>\n<p>Or would have used a custom <code>std::array</code>-like wrapper.</p>\n<hr>\n<blockquote>\n<p id=\"so_44151330_44151610_0\">Is there a paragraph in the standard prohibiting such initialization?</p>\n</blockquote>\n<p>There sure is (standard draft):</p>\n<blockquote>\n<p id=\"so_44151330_44151610_1\">[dcl.init]/17 The semantics of initializers are as follows. The destination type is the type of the object or reference being\n  initialized and the source type is the type of the initializer expression. [snip]</p>\n<ul>\n<li><p id=\"so_44151330_44151610_2\">(17.1) \u2014 If the initializer is a (non-parenthesized) braced-init-list or is = braced-init-list, the object or reference is\n  list-initialized (8.6.4).</p></li>\n<li><p id=\"so_44151330_44151610_3\">(17.2) \u2014 If the destination type is a reference type, see 8.6.3.</p></li>\n<li><p id=\"so_44151330_44151610_4\">(17.3) \u2014 If the destination type is an array of characters, an array of char16_t, an array of char32_t, or an\n  array of wchar_t, and the initializer is a string literal, see 8.6.2.</p></li>\n<li><p id=\"so_44151330_44151610_5\">(17.4) \u2014 If the initializer is (), the object is value-initialized.</p></li>\n<li><p id=\"so_44151330_44151610_6\">(17.5) \u2014 <strong>Otherwise, if the destination type is an array, the program is ill-formed.</strong></p></li>\n<li><p id=\"so_44151330_44151610_7\">[snip]</p></li>\n</ul>\n</blockquote>\n<p>As you can see, only a braced-init-list, string literal (for char arrays only), or an empty initializer are valid for arrays. Source type of an array is not allowed if destination is an array.</p>\n</hr>", "LastEditorUserId": "2079303", "LastActivityDate": "2017-05-24T07:46:29.087", "Score": "4", "CreationDate": "2017-05-24T07:21:54.093", "ParentId": "44151330", "CommentCount": "0", "OwnerUserId": "2079303", "LastEditDate": "2017-05-24T07:46:29.087"}});