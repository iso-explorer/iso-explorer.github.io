post_cb({"42580449": {"Id": "42580449", "PostTypeId": "2", "Body": "<p><code>string hex_decode(string hex_input)</code> returns a temporary <code>string</code> object. <code>c_str()</code> returns a pointer into the private parts of that string object. Once the temporary dies (at the end of the full expression), that pointer points into inaccessible memory. That's called <em>undefined behavior</em>.</p>\n<p>To solve this, copy the return value into a local <code>string</code> object, or extend the lifetime of the temporary, by binding it to a <code>const string&amp;</code> reference. The validity of the return value of <code>c_str()</code> is tied to the lifetime of the object it was called on. Abidance cannot be enforced by the compiler, library or runtime. This is something a developer needs to make sure.</p>\n<p>For reference, see <a href=\"http://en.cppreference.com/w/cpp/language/lifetime\" rel=\"nofollow noreferrer\">Lifetime</a>.</p>\n", "LastEditorUserId": "1889329", "LastActivityDate": "2017-03-03T13:48:38.360", "Score": "1", "CreationDate": "2017-03-03T13:40:17.573", "ParentId": "42580307", "CommentCount": "0", "LastEditDate": "2017-03-03T13:48:38.360", "OwnerUserId": "1889329"}, "42580307": {"ViewCount": "78", "Body": "<p>I tried to convert a hex-encoded string into a const char* buffer containing the decoded string.\nFor that I have a function (<code>string hex_decode(string hex_input)</code>) that takes the string and decodes it.<br>\nAfter testing the function by itself a couple of times, I tried the following call:</br></p>\n<pre><code>const char* hex_decoded_c_str = hex_decode(input).c_str();\n</code></pre>\n<p>and saw that it returned complete gibberish!\nIn an effort to debug the problem, I broke it up into two statements, like so:</p>\n<pre><code>string hex_decoded_string = hex_decode(input);\nconst char* hex_decoded_c_str = hex_decoded_string.c_str();\n</code></pre>\n<p>This time it worked perfectly!<br>\nI am so confused, does anyone know what could cause something like this?</br></p>\n", "AcceptedAnswerId": "42580392", "Title": "C++: Two separate functions return a different result when nested?", "CreationDate": "2017-03-03T13:33:55.520", "LastActivityDate": "2017-03-03T14:40:47.507", "CommentCount": "2", "LastEditDate": "2017-03-03T13:38:06.797", "PostTypeId": "1", "Tags": "<c++>", "Id": "42580307", "AnswerCount": "4", "Score": "0", "OwnerUserId": "5716839", "ClosedDate": "2017-03-05T12:43:36.520", "LastEditorUserId": "6451573"}, "bq_ids": {"n4140": {"so_42580307_42581330_0": {"length": 14, "quality": 1.0, "section_id": 380}, "so_42580307_42581330_2": {"length": 13, "quality": 0.7647058823529411, "section_id": 381}}, "n3337": {"so_42580307_42581330_0": {"length": 14, "quality": 1.0, "section_id": 371}, "so_42580307_42581330_2": {"length": 13, "quality": 0.7647058823529411, "section_id": 372}}, "n4659": {"so_42580307_42581330_0": {"length": 14, "quality": 1.0, "section_id": 395}, "so_42580307_42581330_2": {"length": 12, "quality": 0.7058823529411765, "section_id": 396}}}, "42580392": {"Id": "42580392", "PostTypeId": "2", "Body": "<p>with</p>\n<pre><code>const char* hex_decoded_c_str = hex_decode(input).c_str();\n</code></pre>\n<p>you're taking a reference to the internal representation of a <code>string</code> temporary object (the return value), which is invalid when <code>hex_decode(input)</code> goes out of scope, immediately after the <code>c_str()</code> call.</p>\n<p>With the other approach, you copy the <code>string</code> object, making that reference valid in your scope.</p>\n", "LastEditorUserId": "6451573", "LastActivityDate": "2017-03-03T14:40:47.507", "Score": "0", "CreationDate": "2017-03-03T13:37:40.607", "ParentId": "42580307", "CommentCount": "5", "LastEditDate": "2017-03-03T14:40:47.507", "OwnerUserId": "6451573"}, "42580384": {"Id": "42580384", "PostTypeId": "2", "Body": "<p>Pointer returned by <code>c_str()</code> method becomes invalid after <code>std::string</code> instance is destroyed.</p>\n", "LastActivityDate": "2017-03-03T13:37:08.543", "Score": "-1", "CreationDate": "2017-03-03T13:37:08.543", "ParentId": "42580307", "CommentCount": "0", "OwnerUserId": "6668238"}, "42581330": {"Id": "42581330", "PostTypeId": "2", "Body": "<p>Prototype of <code>string hex_decode(string hex_input)</code> says a new string object is always returned by <code>hex_decode</code>.</p>\n<p>Paragraph <code>12.2#3</code> of the standard says:</p>\n<blockquote>\n<p id=\"so_42580307_42581330_0\">Temporary objects are destroyed as the last step in evaluating the full-expression that (lexically) contains the point where they were created.</p>\n</blockquote>\n<p>Additionally <code>c_str()</code> returns a pointer to something <em>inside</em> of the string object.</p>\n<p>When reading documentation for <code>c_str()</code> and <code>data()</code> (which now perform the same function) you can deduce that from this line (see <a href=\"http://en.cppreference.com/w/cpp/string/basic_string/c_str\" rel=\"nofollow noreferrer\">here</a> or <code>21.4.7.1#1</code>):</p>\n<blockquote>\n<p id=\"so_42580307_42581330_1\"><code>c_str() + i == &amp;operator[](i)</code> for every <code>i in [0, size()]</code>.</p>\n</blockquote>\n<p>Therefore:</p>\n<p>Once <code>c_str()</code> ended there's <code>;</code> and the temporary string returned by <code>hex_decode()</code> must be destroyed. During destruction it frees underlying character array.</p>\n<p>However to preserve character array there's no need to copy the temporary string. <code>12.2#4,5</code>:</p>\n<blockquote>\n<p id=\"so_42580307_42581330_2\">There are two contexts in which temporaries are destroyed at a different point than the end of the full-expression. ... The second context is when a reference is bound to a temporary.</p>\n</blockquote>\n<p>So you can just bind a const reference to the temporary object and save on the copy constructor call:</p>\n<pre><code>const string &amp; hex_decoded_string = hex_decode(input);\nconst char* hex_decoded_c_str = hex_decoded_string.c_str();\n</code></pre>\n", "LastActivityDate": "2017-03-03T14:22:58.997", "Score": "1", "CreationDate": "2017-03-03T14:22:58.997", "ParentId": "42580307", "CommentCount": "0", "OwnerUserId": "655436"}});