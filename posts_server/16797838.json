post_cb({"bq_ids": {"n4140": {"so_16797838_16797906_0": {"length": 16, "quality": 0.64, "section_id": 6146}, "so_16797838_16797906_1": {"length": 18, "quality": 0.782608695652174, "section_id": 6147}}, "n3337": {"so_16797838_16797906_0": {"length": 16, "quality": 0.64, "section_id": 5909}, "so_16797838_16797906_1": {"length": 18, "quality": 0.782608695652174, "section_id": 5910}}, "n4659": {"so_16797838_16797906_0": {"length": 16, "quality": 0.64, "section_id": 7642}, "so_16797838_16797906_1": {"length": 18, "quality": 0.782608695652174, "section_id": 7643}}}, "16797838": {"ViewCount": "200", "Body": "<p>im having a problem with <code>__int64</code> and <code>%I64u</code>. or may be there is a problem with my formula. i am trying to mimic the output below. but there is a weird thing happen in some line items. i cant understand what happened since others were printed fine.</p>\n<p>NOTE: the main source of these list are from binary raw data. so i fetched it from hex and trying to convert it in <code>__int64</code>. my list consist of <code>120</code> line items which outputs well up to line <code>73</code> and fail from line <code>74</code> with expected value of <code>2276812558</code> and displayed <code>18446744071691396878</code>. From line <code>74</code> up to line <code>120</code> results are <code>intermittent</code>. others are ok and other lines fail.</p>\n<p>anyone help??</p>\n<p>SOURCE:</p>\n<pre><code>74  2276812558     &lt;-- expected output\n...\n110 88343310421     &lt;-- expected output\n111 101677534814    &lt;-- expected output\n112 116372862414    \n113 132547934111    &lt;-- expected output\n114 150330130721\n115 169856101434    &lt;-- expected output\n116 193905458276    \n117 220253625665    \n118 249089120712    &lt;-- expected output\n119 280613529205    \n120 315042247217\n</code></pre>\n<p>here is my code:</p>\n<pre><code>    longint =  (__int64)((col[3] &lt;&lt; 24) | (col[2] &lt;&lt; 16) | (col[1] &lt;&lt; 8)) | ((col[0]) | (__int64)((col[7] &lt;&lt; 56) | (col[6] &lt;&lt; 48) | (col[5] &lt;&lt; 40) | (col[4] &lt;&lt; 32)) &lt;&lt; 32);\nsprintf(longintbuf,\"%I64u\", longint );\n</code></pre>\n<p>.OUTPUT GENERATED</p>\n<pre><code>74  18446744071691396878    &lt;-- err\n...\n110 18446744071858548821    &lt;-- err\n111 18446744072307871326    &lt;-- err\n112 116372862414    \n113 18446744073113499551    &lt;-- err\n114 150330130721    \n115 18446744071766961210    &lt;-- err\n116 193905458276    \n117 220253625665    \n118 18446744073690569160    &lt;-- err\n119 280613529205    \n120 315042247217\n</code></pre>\n", "AcceptedAnswerId": "16797906", "Title": "Weird list output of __int64", "CreationDate": "2013-05-28T17:14:59.543", "Id": "16797838", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2013-05-28T17:25:15.653", "Score": "1", "OwnerUserId": "2006584", "Tags": "<c++><c><int64>", "AnswerCount": "1"}, "16797906": {"Id": "16797906", "PostTypeId": "2", "Body": "<p>if <code>col</code> isn't an array of 64-bit types, your shifts are causing undefined behaviour.  Cast before shifting:</p>\n<pre><code>(__int64)col[7] &lt;&lt; 56\n</code></pre>\n<p>It's also undefined behaviour if the shift would cause a sign change, so be careful for that when using signed types (like you are).</p>\n<p>From C11 <strong>6.5.7 Bitwise shift operators</strong> (emphasis mine):</p>\n<blockquote>\n<p id=\"so_16797838_16797906_0\">The integer promotions are performed on each of the operands. The type of the result is that of the promoted left operand. <em>If the value of the right operand is negative or is greater than or equal to the width of the promoted left operand, the behavior is undefined.</em></p>\n<p id=\"so_16797838_16797906_1\">The result of <strong><code>E1 &lt;&lt; E2</code></strong> is <strong><code>E1</code></strong> left-shifted <strong><code>E2</code></strong> bit positions; vacated bits are filled with zeros. ... <em>If <strong><code>E1</code></strong> has a signed type and nonnegative value, and <strong><code>E1</code> \u00d7 2<sup>E2</sup></strong> is representable in the result type, then that is the resulting value; otherwise, the behavior is undefined.</em></p>\n</blockquote>\n", "LastEditorUserId": "116908", "LastActivityDate": "2013-05-28T17:25:15.653", "Score": "1", "CreationDate": "2013-05-28T17:19:45.810", "ParentId": "16797838", "CommentCount": "4", "LastEditDate": "2013-05-28T17:25:15.653", "OwnerUserId": "116908"}});