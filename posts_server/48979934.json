post_cb({"bq_ids": {"n4140": {"so_48979934_48980202_0": {"length": 7, "quality": 1.0, "section_id": 2248}}, "n3337": {"so_48979934_48980202_0": {"length": 7, "quality": 1.0, "section_id": 2236}}, "n4659": {"so_48979934_48980202_0": {"length": 7, "quality": 1.0, "section_id": 2521}}}, "48980202": {"Id": "48980202", "PostTypeId": "2", "Body": "<p>With a file of less than nine characters, you have already attempted to read past the end with your initial <code>read</code>. That means the <code>eof</code> (end of file) and <code>fail</code> flags have been set for the stream and, while <code>seekg</code> may reset <code>eof</code>, it does <em>not</em> reset <code>fail</code> <sup>(a)</sup>.</p>\n<p>You can check that by inserting:</p>\n<pre><code>cout &lt;&lt; \"eof/fail=\" &lt;&lt; cin.eof() &lt;&lt; '/' &lt;&lt; cin.fail() &lt;&lt; '\\n';\n</code></pre>\n<p>immediately before and after the <code>seekg</code>. For file sizes of 8, 9, and 10 respectively, you get:</p>\n<pre><code>eof/fail=1/1\neof/fail=0/1\n\neof/fail=0/0\neof/fail=0/0\n12345678\n\neof/fail=0/0\neof/fail=0/0\n123456789\n</code></pre>\n<p>You can see the first failure results in no output because the <code>fail</code> bit is still set. The second and third have output because it was never set (the output is the characters shown plus one newline).</p>\n<p>To repair this, you can <em>clear</em> the <code>fail</code> bit simply by inserting the following before your <code>seekg</code>:</p>\n<pre><code>std::cin.clear();\n</code></pre>\n<p>Then running that code on the eight-character file gives:</p>\n<pre><code>eof/fail=1/1\neof/fail=0/0\n1234567\n</code></pre>\n<p>showing that the <code>clear</code> has indeed cleared the <code>fail</code> bit.</p>\n<hr>\n<p>You might also want to keep in mind that it's not a <em>requirement</em> for a stream to be seekable, especially if it's just coming in via standard input. You may find for certain sized files that you cannot seek back an arbitrary amount if you've read through a large chunk of the stream.</p>\n<hr>\n<p><sup>(a)</sup> For the language lawyers amongst us, <code>Unformatted input functions</code> (<code>C++11 27.7.2.3/41</code>, <code>C++14 27.7.2.3/41</code> and <code>C++17 30.7.4.3/41</code>) all have essentially the same text on how <code>seekg</code> works (my emphasis):</p>\n<blockquote>\n<p id=\"so_48979934_48980202_0\">After constructing a sentry object, <strong><em>if fail() != true,</em></strong> executes ...</p>\n</blockquote>\n</hr></hr>", "LastEditorUserId": "14860", "LastActivityDate": "2018-02-26T01:46:31.213", "Score": "2", "CreationDate": "2018-02-26T01:17:36.897", "ParentId": "48979934", "CommentCount": "0", "OwnerUserId": "14860", "LastEditDate": "2018-02-26T01:46:31.213"}, "48979934": {"ViewCount": "41", "Body": "<pre><code>    #include &lt;string&gt;\n    #include &lt;iostream&gt;\n\n    int main() {\n        std::string str;\n        char magic[9];\n        std::cin.read((char *)magic, sizeof(magic));\n        std::cin.seekg(0, std::ios::beg);\n\n        while (std::cin &gt;&gt; str) {\n            std::cout &lt;&lt; str &lt;&lt; std::endl;\n        }\n    }\n</code></pre>\n<p>my code contains implementation of seekg(0) fucntion on std::cin\nit is not behaving as expected on some of the files\nwhen run as\n    <code>./a.out &lt; filename</code></p>\n<p>those files that it is not behaving as expected have property that they have number of characters(including endline characters and other white spaces) less than 9(9 is the number of characters we read from cin before seekg)</p>\n<p>if the file contains more than 9 characters it is behaving as expected\nfor example:</p>\n<p><code>123456789</code></p>\n<p>will give output as </p>\n<p><code>123456789</code></p>\n<p>while file containing less than 9 characters will not give output</p>\n<p>for example:</p>\n<p><code>1234</code></p>\n<p>will give no output</p>\n", "Title": "Seekg not behaving as expected", "CreationDate": "2018-02-26T00:28:32.627", "LastActivityDate": "2018-02-26T01:46:31.213", "CommentCount": "2", "PostTypeId": "1", "Id": "48979934", "Score": "0", "OwnerUserId": "6799074", "Tags": "<c++><iostream><cin><seekg>", "AnswerCount": "1"}});