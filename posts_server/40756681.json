post_cb({"bq_ids": {"n4140": {"so_40756681_40756829_0": {"length": 20, "quality": 0.7692307692307693, "section_id": 170}}, "n3337": {"so_40756681_40756829_0": {"length": 20, "quality": 0.7692307692307693, "section_id": 164}}, "n4659": {"so_40756681_40756829_0": {"length": 23, "quality": 0.8846153846153846, "section_id": 175}}}, "40756829": {"Id": "40756829", "PostTypeId": "2", "Body": "<p>No, it is not required. According to [temp.res]/3 in C++14:</p>\n<blockquote>\n<p id=\"so_40756681_40756829_0\">When a <em>qualified-id</em> is intended to refer to a type that is not a member of the current instantiation (14.6.2.1)\n  and its <em>nested-name-specifier</em> refers to a dependent type, it shall be prefixed by the keyword <code>typename</code>, forming\n  a <em>typename-specifier</em> . If the <em>qualified-id</em> in a <em>typename-specifier</em> does not denote a type, the program is ill-\n  formed.</p>\n</blockquote>\n<p>Here there is no <em>nested-name-specifier</em> referring to a dependent type, so <code>typename</code> is not required. (<em>nested-name-specifier</em> refers to a <code>::</code> and the type or namespace to its left. Clearly, <code>std</code> is not a type, much less a dependent type.)</p>\n", "LastActivityDate": "2016-11-23T05:37:26.280", "CommentCount": "0", "CreationDate": "2016-11-23T05:37:26.280", "ParentId": "40756681", "Score": "5", "OwnerUserId": "481267"}, "40756681": {"ViewCount": "98", "Body": "<p>In <code>a.hpp</code> I defined:</p>\n<pre><code>#include &lt;utility&gt;\nnamespace Board {\n    template&lt;int W, int H&gt;\n    struct GroupNode\n    {\n        using PointType = std::pair&lt;int, int&gt;;\n        // ...\n    };\n}\n</code></pre>\n<p>Then, in <code>b.cpp</code> I defined:</p>\n<pre><code>#include \"a.hpp\"\nnamespace Board {\n    template&lt;int W, int H&gt;\n    struct NodeList\n    {\n        using StdList = std::list &lt; /* typename */ GroupNode&lt;W, H&gt;&gt;;\n    }\n}\n// and then use NodeList&lt;19, 19&gt; nl;\n</code></pre>\n<p>The code above could be compiled on both gcc-6 and clang-3.9 without any warning. \nHowever, Clion 2016.3 complained <code>cannot resolve variable GroupNode</code> in <code>b.cpp</code>. Uncommenting <code>typename</code> could tame Clion warning, but I was wondering whether this <code>typename</code> is required? If so, why g++/clang++ didn't give out any warnings?</p>\n", "AcceptedAnswerId": "40756829", "Title": "C++ dependent name: Is this typename required?", "CreationDate": "2016-11-23T05:26:29.933", "Id": "40756681", "CommentCount": "0", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2016-11-23T05:27:45.037", "LastEditorUserId": "481267", "LastActivityDate": "2016-11-23T05:37:26.280", "Score": "5", "OwnerUserId": "4140668", "Tags": "<c++><templates><language-lawyer><dependent-name>", "AnswerCount": "1"}});