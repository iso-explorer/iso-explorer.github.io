post_cb({"bq_ids": {"n4140": {"so_48048163_48048249_1": {"length": 38, "quality": 0.926829268292683, "section_id": 3201}}, "n3337": {"so_48048163_48048249_1": {"length": 38, "quality": 0.926829268292683, "section_id": 3075}}, "n4659": {"so_48048163_48048249_1": {"length": 38, "quality": 0.926829268292683, "section_id": 3962}}}, "48048249": {"Id": "48048249", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_48048163_48048249_0\">but I would have thought the most vexing parse issue wouldn't arise as using a number literal of 256 couldn't be interpreted as a function.</p>\n</blockquote>\n<p>That is correct, it is not the most vexing parse. The most vexing parse is formally handled in <a href=\"http://eel.is/c++draft/dcl.ambig.res#:ambiguity,declaration_versus_cast\" rel=\"nofollow noreferrer\">[dcl.ambig.res]</a>:</p>\n<blockquote>\n<p id=\"so_48048163_48048249_1\">The ambiguity arising from the similarity between a function-style cast and a declaration mentioned in [stmt.ambig] can also occur in the context of a declaration.\n  In that context, the choice is between a function declaration with a redundant set of parentheses around a parameter name and an object declaration with a function-style cast as the initializer.\n  Just as for the ambiguities mentioned in [stmt.ambig], the resolution is to consider any construct that could possibly be a declaration a declaration.</p>\n</blockquote>\n<p>The catch here is that you cannot initialize members using <code>()</code>, only <code>=</code> or <code>{}</code>, so naturally the ambiguity resolution does not apply. </p>\n", "LastActivityDate": "2018-01-01T08:35:08.247", "Score": "4", "CreationDate": "2018-01-01T08:35:08.247", "ParentId": "48048163", "CommentCount": "0", "OwnerUserId": "9160056"}, "48048185": {"Id": "48048185", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_48048163_48048185_0\">But I was wondering is there anything ambiguous when I've passed a number literal in brackets such as in this case?</p>\n</blockquote>\n<p>Probably not, but it would have made the grammar more complex. Default member initializers were made to support only uniform initialization and copy initialization, because those things couldn't have appeared in existing code. And differentiating them from function declarations is easy.</p>\n<p>Adding <em>another</em> overloaded usage for parentheses was never a goal. It's overused as is, IMO. If it's not supported in general, supporting it just for this particular use case you have in mind is hardly a useful feature that would merit the grammar contortions.</p>\n", "LastActivityDate": "2018-01-01T08:23:17.160", "Score": "2", "CreationDate": "2018-01-01T08:23:17.160", "ParentId": "48048163", "CommentCount": "2", "OwnerUserId": "817643"}, "48048163": {"ViewCount": "68", "Body": "<p>I was making a class that looked like this:</p>\n<pre><code>struct InputHandler\n{\n    std::vector&lt;std::pair&lt;int, int&gt;&gt; keyBindings( 256 );\n};\n</code></pre>\n<p>It came up with an error, and I know this is because the compiler interprets this as a function instead of a constructor argument. But I was wondering is there anything ambiguous when I've passed a number literal in brackets such as in this case? I know I can fix this by just using curly brackets here, but I would have thought the most vexing parse issue wouldn't arise as using a number literal of 256 couldn't be interpreted as a function.</p>\n<p>Edit: I'm happy to close or delete this question. The thing I learned is that even though that particular line isn't ambiguous, the general rules of C++11 forbid in-class initialisers with anything other than = or {}, this is as a general rule so as not to have an extra exception to the rule. On the other hand creating the vector in the main() function as:</p>\n<pre><code>std::vector&lt;std::pair&lt;int, int&gt; foo(5);\n</code></pre>\n<p>Works fine. It's not an ambiguous expression, apparently.</p>\n", "AcceptedAnswerId": "48048249", "Title": "C++ Most vexing parse when a number literal is the argument?", "CreationDate": "2018-01-01T08:19:18.477", "LastActivityDate": "2018-01-01T09:10:32.573", "CommentCount": "3", "LastEditDate": "2018-01-01T09:10:32.573", "PostTypeId": "1", "LastEditorUserId": "4696802", "Id": "48048163", "Tags": "<c++><ambiguous><most-vexing-parse>", "Score": "0", "OwnerUserId": "4696802", "ClosedDate": "2018-01-01T11:11:53.630", "AnswerCount": "2"}});