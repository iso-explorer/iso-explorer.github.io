post_cb({"bq_ids": {"n4140": {"so_33085796_33085881_0": {"length": 12, "quality": 0.75, "section_id": 3321}}, "n3337": {"so_33085796_33085881_0": {"length": 10, "quality": 0.625, "section_id": 3191}}, "n4659": {"so_33085796_33085881_0": {"length": 9, "quality": 0.5625, "section_id": 4087}}}, "33085796": {"ViewCount": "101", "Body": "<p>This is admittedly a nit-picky question that is mainly driven by curiosity.  Suppose we have the following:</p>\n<pre><code>int x = 5;\nint&amp;&amp; xref = std::move(x);\nstd::cout &lt;&lt; \"Before assignment x: \" &lt;&lt; x &lt;&lt; std::endl;\nstd::cout &lt;&lt; \"Before assignment xref: \" &lt;&lt; xref &lt;&lt; std::endl;\nxref = 10;\nstd::cout &lt;&lt; \"After assignment x: \" &lt;&lt; x &lt;&lt; std::endl;\nstd::cout &lt;&lt; \"After assignment xref: \" &lt;&lt; xref &lt;&lt; std::endl;\n</code></pre>\n<p>The output as expected is:</p>\n<pre><code>// Before assignment x: 5\n// Before assignment xref: 5\n// After assignment x: 10\n// After assignment xref: 10\n</code></pre>\n<p>This makes sense.  <code>std::move</code> converts <code>x</code> to an xvalue and allows us to bind its memory location to <code>xref</code> and modify its contents accordingly.  Now lets say we have the following:</p>\n<pre><code>int&amp;&amp; xref = 5;\nstd::cout &lt;&lt; \"Before assignment xref: \" &lt;&lt; xref &lt;&lt; std::endl;\nxref = 10;\nstd::cout &lt;&lt; \"After assignment xref: \" &lt;&lt; xref &lt;&lt; std::endl;\n\nint x = 5;\nstd::cout &lt;&lt; \"After assignment x: \" &lt;&lt; x &lt;&lt; std::endl;\n</code></pre>\n<p>The output is intuitively:</p>\n<pre><code>// Before assignment xref: 5\n// After assignment xref: 10\n// After assignment x: 5\n</code></pre>\n<p>This make overall sense.  We expect to be able to bind the constant literal <code>5</code> to <code>xref</code> because <code>5</code> is a prvalue.  We also expect that <code>xref</code> be mutable.  We further expect that the value of constant literal <code>5</code> isn't modifiable (as shown somewhat pedantically in the last two lines of the above snippet).  </p>\n<p>So my question is, what exactly is going on here?  How does C++ know not to modify the value of the constant literal <code>5</code> yet maintain sufficient identity for <code>xref</code> to know that it's been changed to <code>10</code> by the assignment.  Is a new variable being created upon assignment to <code>xref</code> when its bound to a constant literal?  This question never came up in C++03 since only const references could be bound to rvalues.</p>\n", "AcceptedAnswerId": "33085881", "Title": "What happens when you assign a literal constant to an rvalue reference?", "CreationDate": "2015-10-12T16:22:03.713", "LastActivityDate": "2015-10-12T16:27:23.090", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "Id": "33085796", "Score": "5", "OwnerUserId": "498586", "Tags": "<c++><move-semantics>", "AnswerCount": "2"}, "33085902": {"Id": "33085902", "PostTypeId": "2", "Body": "<pre><code>int&amp;&amp; xref = 5;\n</code></pre>\n<p>... creates a temporary, initialized with 5, whose lifetime is extended to the end of the block.</p>\n<p>The assignment</p>\n<pre><code>xref = 10;\n</code></pre>\n<p>changes the value of the still living temporary.</p>\n", "LastActivityDate": "2015-10-12T16:27:23.090", "Score": "4", "CreationDate": "2015-10-12T16:27:23.090", "ParentId": "33085796", "CommentCount": "0", "OwnerUserId": "464581"}, "33085881": {"Id": "33085881", "PostTypeId": "2", "Body": "<p>A temporary is constructed, initialised from the value of the literal, and it lasts as long as the reference. You can do what you like with this object.</p>\n<p>In terms of lifetime, this is just the same as if you'd written <code>const int&amp; x = 5</code>; only, there, the fact that you're working with an automatically-created temporary object is masked because the <code>const</code> prevents you from proving it with a mutation.</p>\n<blockquote>\n<p id=\"so_33085796_33085881_0\"><code>[C++14: 8.5.3/5]:</code> <em>[..]</em> If <code>T1</code> is a non-class type, a temporary of type \u201c<em>cv1</em> <code>T1</code>\u201d is created and copy-initialized (8.5) from the initializer expression. The reference is then bound to the temporary. <em>[..]</em></p>\n</blockquote>\n", "LastActivityDate": "2015-10-12T16:26:45.663", "Score": "3", "CreationDate": "2015-10-12T16:26:45.663", "ParentId": "33085796", "CommentCount": "2", "OwnerUserId": "560648"}});