post_cb({"bq_ids": {"n4140": {"so_27249698_27249953_0": {"length": 26, "quality": 0.9629629629629629, "section_id": 480}, "so_27249698_27249698_0": {"length": 41, "quality": 0.9111111111111111, "section_id": 3296}}, "n3337": {"so_27249698_27249953_0": {"length": 26, "quality": 0.9629629629629629, "section_id": 471}, "so_27249698_27249698_0": {"length": 41, "quality": 0.9111111111111111, "section_id": 3166}}, "n4659": {"so_27249698_27249953_0": {"length": 17, "quality": 0.6296296296296297, "section_id": 502}, "so_27249698_27249698_0": {"length": 41, "quality": 0.9111111111111111, "section_id": 4058}}}, "27249698": {"ViewCount": "269", "Body": "<p>In the code below an object <code>s</code> of class <code>S</code> is used to initialize an object of class <code>D</code> with a direct-initialization <code>D d(s);</code>. The conversion function S::operator D() is used to convert the object <code>s</code> into a temporary object of type <code>D</code>. Then, gcc and clang both elide the explicit call to the move constructor <code>D(&amp;&amp;)</code>, to move this temporary object into <code>d</code>. See <a href=\"http://coliru.stacked-crooked.com/a/18da94723d63da40\" rel=\"noreferrer\">live example</a>.</p>\n<pre><code>#include &lt;iostream&gt;\nstruct D;\nstruct S{ operator D(); };\n\nstruct D{\n    D(){}\n    D(D&amp;&amp;) { std::cout &lt;&lt; \"move constructor\" &lt;&lt; '\\n'; }\n};\n\nS::operator D() { std::cout &lt;&lt; \"conversion function\" &lt;&lt; '\\n'; return D(); }\n\nint main()\n{\n    S s;\n    D d(s);\n}\n</code></pre>\n<p>I'm disputing the correctness of this elision, on the following grounds:</p>\n<ol>\n<li>This case is covered in the first sub-bullet point in \u00a78.5/16 (N3337), which is silent about elision.\n\n<blockquote>\n<p id=\"so_27249698_27249698_0\">If the initialization is direct-initialization, or if it is\n  copy-initialization where the cv-unqualified version of the source\n  type is the same class as, or a derived class of, the class of the\n  destination, constructors are considered. The applicable constructors\n  are enumerated (13.3.1.3), and the best one is chosen through overload\n  resolution (13.3). The constructor so selected is called to initialize\n  the object, with the initializer expression or expression-list as its\n  argument(s). If no constructor applies, or the overload resolution is\n  ambiguous, the initialization is ill-formed.</p>\n</blockquote></li>\n<li>Note that the next sub-bullet point explicitly mentions the possibility of elision.</li>\n<li>The call to the move constructor is explicit. How can it be elided?</li>\n</ol>\n", "AcceptedAnswerId": "27249953", "Title": "gcc and clang both elide the call to the move constructor in the snippet below. Is this correct?", "CreationDate": "2014-12-02T12:38:40.633", "Id": "27249698", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2014-12-02T12:51:49.737", "Score": "6", "OwnerUserId": "1042389", "Tags": "<c++><c++11><initialization><language-lawyer><copy-elision>", "AnswerCount": "1"}, "27249953": {"Id": "27249953", "PostTypeId": "2", "Body": "<p>The C++ standard loves to create exceptions to rules defined in one place in a completely different place.</p>\n<p>The copy/move elision rules are specified in 12.8/31. There are two copy/move operations to be eliminated in your code.</p>\n<p>The first is easy: within <code>operator D</code>, the temporary constructed in the return expression is moved to the temporary that represents the function return value. Bullet 3 permits elision of this move.</p>\n<p>The second is the move of the temporary function return value to the <code>d</code> object. Again, bullet 3 permits the elision.</p>\n<blockquote id=\"so_27249698_27249953_0\">\n<ul>\n<li>when a temporary class object that has not been bound to a reference (12.2) would be copied/moved to a class object with the same cv-unqualified type, the copy/move operation can be omitted by constructing the temporary object directly into the target of the omitted copy/move</li>\n</ul>\n</blockquote>\n", "LastActivityDate": "2014-12-02T12:51:49.737", "CommentCount": "0", "CreationDate": "2014-12-02T12:51:49.737", "ParentId": "27249698", "Score": "8", "OwnerUserId": "8922"}});