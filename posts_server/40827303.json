post_cb({"bq_ids": {"n4140": {"so_40827303_40827376_2": {"length": 22, "quality": 0.9565217391304348, "section_id": 5811}, "so_40827303_40827376_5": {"length": 18, "quality": 0.72, "section_id": 5995}, "so_40827303_40827376_1": {"length": 33, "quality": 1.0, "section_id": 5811}, "so_40827303_40827376_3": {"length": 7, "quality": 1.0, "section_id": 5811}}, "n3337": {"so_40827303_40827376_2": {"length": 22, "quality": 0.9565217391304348, "section_id": 5584}, "so_40827303_40827376_3": {"length": 7, "quality": 1.0, "section_id": 5584}, "so_40827303_40827376_1": {"length": 33, "quality": 1.0, "section_id": 5584}, "so_40827303_40827376_5": {"length": 21, "quality": 0.84, "section_id": 5763}}, "n4659": {"so_40827303_40827376_3": {"length": 7, "quality": 1.0, "section_id": 7273}, "so_40827303_40827376_1": {"length": 27, "quality": 0.8181818181818182, "section_id": 7272}, "so_40827303_40827376_7": {"length": 22, "quality": 0.9166666666666666, "section_id": 7492}}}, "40827303": {"ViewCount": "94", "Body": "<p>I'm trying to figure out if there's anything in the C++11 specification re. expected behavior for the following code (<a href=\"https://github.com/sxlijin/assorted-code-snippets/blob/e98a54618d102929fdc0b477e3bbba085002549e/language-semantic-examples/cpp/order_of_ops.cpp\" rel=\"nofollow noreferrer\">GitHub link here</a>):</p>\n<pre><code>struct Scalar {\n    int data;\n\n    Scalar(int x) : data(x) {}\n\n    int get() {\n        return data;\n    }\n\n    Scalar &amp;square() {\n        scale(data);\n        return *this;\n    }\n\n    void scale(int rhs) {\n        data *= rhs;\n    }\n};\n\nint main() {\n    Scalar v(3);\n\n    v.square().scale(v.get());\n\n    return v.data;\n}\n</code></pre>\n<p>This comes up mostly because of the discovery that this does different things between <code>g++</code> and <code>clang++</code>:</p>\n<pre><code>$ g++ --version\ng++ (GCC) 6.2.1 20160830\nCopyright (C) 2016 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n$ clang++ --version\nclang version 3.9.0 (tags/RELEASE_390/final)\nTarget: x86_64-unknown-linux-gnu\nThread model: posix\nInstalledDir: /usr/bin\n\n$ g++ -std=c++11 order_of_ops.cpp -o a.out &amp;&amp; ./a.out; echo $?\n27\n\n$ clang++ -std=c++11 order_of_ops.cpp -o a.out &amp;&amp; ./a.out; echo $?\n81\n</code></pre>\n<p>The answer seems like it should be in \u00a7 5.2.2 and \u00a7 5.2.5 of <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3242.pdf\" rel=\"nofollow noreferrer\">n3242</a> but I'm having trouble tracking down something concrete.</p>\n", "AcceptedAnswerId": "40827376", "Title": "C++ Order of Evaluation", "CreationDate": "2016-11-27T09:04:24.163", "Id": "40827303", "CommentCount": "3", "FavoriteCount": "0", "PostTypeId": "1", "LastActivityDate": "2016-11-27T15:22:37.587", "Score": "3", "OwnerUserId": "3577414", "Tags": "<c++><c++11><g++><clang++>", "AnswerCount": "1"}, "40827376": {"Id": "40827376", "PostTypeId": "2", "Body": "<p>If I read things correctly, the behaviour of your code is unspecified. N3337 for C++11 quotes:</p>\n<blockquote>\n<p id=\"so_40827303_40827376_0\">\u00a7 1.9 [intro.execution] / 15</p>\n<p id=\"so_40827303_40827376_1\">Except where noted, evaluations of operands of individual operators\n  and of subexpressions of individual expressions are unsequenced. [...]\n  If a side effect on a scalar object is unsequenced relative to either\n  another side effect on the same scalar object or a value computation\n  using the value of the same scalar object, the behavior is undefined.</p>\n</blockquote>\n<p>but it follows with</p>\n<blockquote>\n<p id=\"so_40827303_40827376_2\">Every evaluation in the calling function (including other function\n  calls) that is not otherwise specifically sequenced before or after\n  the execution of the body of the called function is indeterminately\n  sequenced with respect to the execution of the called\n  function.<sup>9</sup></p>\n<p id=\"so_40827303_40827376_3\">9) In other words, function executions do not interleave with each\n  other.</p>\n</blockquote>\n<p>and</p>\n<blockquote>\n<p id=\"so_40827303_40827376_4\">\u00a7 5.2.2 [expr.call] / 8</p>\n<p id=\"so_40827303_40827376_5\">[ <em>Note:</em> The evaluations of the postfix expression and of the\n  argument expressions are all unsequenced relative to one another. All\n  side effects of argument expression evaluations are sequenced before\n  the function is entered (see 1.9). <em>\u2014end note</em> ]</p>\n</blockquote>\n<p>So, your modification and unrelated read of <code>Scalar::data</code> are indeterminately sequenced.</p>\n<p>That being said, it is likely to change and be well-defined in C++1z:</p>\n<blockquote>\n<p id=\"so_40827303_40827376_6\">N4606 \u00a7 5.2.2 [expr.call] / 5</p>\n<p id=\"so_40827303_40827376_7\">The <em>postfix-expression</em> is sequenced before each <em>expression</em> in the\n  expression-list and any default argument. The initialization of a\n  parameter, including every associated value computation and side\n  effect, is indeterminately sequenced with respect to that of any other\n  parameter.</p>\n</blockquote>\n<p>Thus, in C++1z your <code>v.data</code> should be equal to 81 (if I read things correctly)</p>\n", "LastEditorUserId": "2456565", "LastActivityDate": "2016-11-27T15:22:37.587", "Score": "8", "CreationDate": "2016-11-27T09:16:19.047", "ParentId": "40827303", "CommentCount": "4", "OwnerUserId": "2456565", "LastEditDate": "2016-11-27T15:22:37.587"}});