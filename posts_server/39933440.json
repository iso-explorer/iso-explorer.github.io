post_cb({"39933440": {"CommentCount": "5", "ViewCount": "85", "PostTypeId": "1", "LastEditorUserId": "5845611", "CreationDate": "2016-10-08T14:15:49.937", "LastActivityDate": "2016-10-09T15:08:46.593", "Title": "Does multiple definitions of object of lambda expression in different translation units violate the ODR in C++?", "LastEditDate": "2016-10-09T15:08:46.593", "Id": "39933440", "Score": "1", "Body": "<p>I thought the following codes violates ODR (<code>f</code> is defined in both foo.cpp and main.cpp), but the compiler yields no error.</p>\n<pre><code>// foo.h\nauto f = [](int i){return i;};\nvoid printTypeID();\n\n// foo.cpp\n#include \"foo.h\"\n#include &lt;typeinfo&gt;\n#include &lt;iostream&gt;\n\nvoid printTypeID(){\n    std::cout &lt;&lt; typeid(f).name() &lt;&lt; '\\n';\n}\n\n// main.cpp\n#include \"foo.h\"\n#include &lt;typeinfo&gt;\n#include &lt;iostream&gt;\n\nint main(){\n    std::cout &lt;&lt; typeid(f).name() &lt;&lt; '\\n';\n    printTypeID();\n    return 0;\n}\n</code></pre>\n<p>And the output typeid is identical, which surprises me because I thought every lambda expression will have an unique non-union class type unless they are in the body of external inline function definition.</p>\n<hr>\n<p><strong>Edit:</strong> As I'm looking into the standard, I intend to think that this is because objects of unnamed class type have internal linkage. Although I haven't found the corresponding specification. These are related specification I have found below.</p>\n<p>The type of lambda expression is a unique, unnamed non-union class type: <a href=\"http://eel.is/c++draft/expr.prim.lambda#4\" rel=\"nofollow\">expr.prim.lambda</a></p>\n<blockquote>\n<p id=\"so_39933440_39933440_0\">The type of the lambda-expression (which is also the type of the closure object) is a unique, <strong>unnamed non-union class</strong> type \u2014 called the closure type \u2014 whose properties are described below. [...]</p>\n</blockquote>\n<p>A unnamed class type that has global scope has no linkage, but, a type with no linkage still could be used to declare an object with external linkage. <a href=\"http://eel.is/c++draft/basic.link#8\" rel=\"nofollow\">basic.link</a></p>\n<blockquote>\n<p id=\"so_39933440_39933440_1\">Names not covered by these rules have no linkage. Moreover, except as noted, a name declared at block scope ([basic.scope.block]) has no linkage. A <strong>type</strong> is said to have linkage <strong>if and only if</strong>:</p>\n<ul>\n<li>it is a class or enumeration type that is named (or has a name for linkage purposes ([dcl.typedef])) and the name has linkage; or</li>\n<li>it is an unnamed class or unnamed enumeration that is a member of a class with linkage; or</li>\n<li>it is a specialization of a class template (Clause [temp])34; or</li>\n<li>it is a fundamental type ([basic.fundamental]); or</li>\n<li>it is a compound type ([basic.compound]) other than a class or enumeration, compounded exclusively from types that have linkage; or</li>\n<li>it is a cv-qualified ([basic.type.qualifier]) version of a type that has linkage.</li>\n</ul>\n<p id=\"so_39933440_39933440_2\">A type without linkage shall not be used as the type of a variable or function with external linkage unless</p>\n<ul>\n<li>the entity has C language linkage ([dcl.link]), or</li>\n<li>the entity is declared within an unnamed namespace ([namespace.def]), or</li>\n<li>the entity is not odr-used ([basic.def.odr]) or <strong>is defined in the same translation unit</strong>.</li>\n</ul>\n</blockquote>\n<p>And the object of the lambda expression (<code>f</code> in this case) is NOT a variable that has internal linkage according to following quotations: <a href=\"http://eel.is/c++draft/basic.link#3\" rel=\"nofollow\">basic.link</a></p>\n<blockquote>\n<p id=\"so_39933440_39933440_3\">A name having namespace scope ([basic.scope.namespace]) has internal linkage if it is the name of</p>\n<ul>\n<li>a variable, function or function template that is explicitly declared static; or,</li>\n<li>a non-inline variable of non-volatile const-qualified type that is neither explicitly declared extern nor previously declared to have external linkage; or</li>\n<li>a data member of an anonymous union.</li>\n</ul>\n<p id=\"so_39933440_39933440_4\">An unnamed namespace or a namespace declared directly or indirectly within an unnamed namespace has internal linkage. All other namespaces have external linkage. A name having namespace scope that has not been given internal linkage above has the same linkage as the enclosing namespace if it is the name of [...]</p>\n</blockquote>\n<p>So, the output typeids in previous codes might be identical, and it's not a problem here since the closure type in this case has no linkage. But the question comes to:</p>\n<p>Do objects of unnamed class type that have global scope have internal linkage?</p>\n</hr>", "Tags": "<c++><lambda><one-definition-rule>", "OwnerUserId": "5845611", "AnswerCount": "0"}, "bq_ids": {"n4140": {"so_39933440_39933440_4": {"section_id": 7137, "quality": 1.0, "length": 31}, "so_39933440_39933440_1": {"section_id": 7141, "quality": 0.9444444444444444, "length": 17}, "so_39933440_39933440_3": {"section_id": 7136, "quality": 0.875, "length": 7}, "so_39933440_39933440_0": {"section_id": 5962, "quality": 0.8947368421052632, "length": 17}, "so_39933440_39933440_2": {"section_id": 7141, "quality": 1.0, "length": 7}}, "n3337": {"so_39933440_39933440_4": {"section_id": 6881, "quality": 1.0, "length": 31}, "so_39933440_39933440_1": {"section_id": 6885, "quality": 0.9444444444444444, "length": 17}, "so_39933440_39933440_3": {"section_id": 6880, "quality": 0.875, "length": 7}, "so_39933440_39933440_0": {"section_id": 5731, "quality": 0.8947368421052632, "length": 17}, "so_39933440_39933440_2": {"section_id": 6885, "quality": 1.0, "length": 7}}, "n4659": {"so_39933440_39933440_4": {"section_id": 8638, "quality": 1.0, "length": 31}, "so_39933440_39933440_1": {"section_id": 8642, "quality": 0.9444444444444444, "length": 17}, "so_39933440_39933440_3": {"section_id": 8637, "quality": 0.875, "length": 7}, "so_39933440_39933440_0": {"section_id": 7451, "quality": 0.8947368421052632, "length": 17}, "so_39933440_39933440_2": {"section_id": 8642, "quality": 1.0, "length": 7}}}});