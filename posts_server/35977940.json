post_cb({"35977940": {"CommentCount": "0", "ViewCount": "184", "CreationDate": "2016-03-14T01:03:20.960", "LastActivityDate": "2016-03-14T02:58:57.920", "Title": "Valid characters for file name in the #include directive", "AcceptedAnswerId": "35977999", "PostTypeId": "1", "Id": "35977940", "Score": "2", "Body": "<p>What are the valid characters for the file name in the <code>#include</code> directive?</p>\n<p>Under Linux, for example, I can use pretty much any character except <code>/</code> and <code>\\0</code> to have a valid file name, but I would expect C preprocessor to be more restrictive about the names of files I can include.</p>\n", "Tags": "<c++><c><c-preprocessor>", "OwnerUserId": "882478", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_35977940_35977999_0": {"section_id": 5314, "quality": 0.8695652173913043, "length": 20}}, "n3337": {"so_35977940_35977999_0": {"section_id": 5111, "quality": 0.8695652173913043, "length": 20}}, "n4659": {"so_35977940_35977999_0": {"section_id": 6738, "quality": 0.8260869565217391, "length": 19}}}, "35977999": {"ParentId": "35977940", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>In C++, the source character set is defined in <a href=\"http://eel.is/c++draft/lex.charset#1\" rel=\"nofollow\">[lex.charset]</a>:</p>\n<blockquote>\n<p id=\"so_35977940_35977999_0\">The basic source character set consists of 96 characters: the space character, the control characters representing horizontal tab, vertical tab, form feed, and new-line, plus the following 91 graphical characters:14</p>\n<p id=\"so_35977940_35977999_1\">a b c d e f g h i j k l m n o p q r s t u v w x y z</p>\n<p id=\"so_35977940_35977999_2\">A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</p>\n<p id=\"so_35977940_35977999_3\">0 1 2 3 4 5 6 7 8 9</p>\n<p id=\"so_35977940_35977999_4\">_ { } [ ] # ( ) &lt; &gt; % : ; . ? * + - / ^ &amp; | ~ ! = , \\ \" '</p>\n</blockquote>\n<p>And the grammar for <code>#include</code>s is anything in the source character set except for characters that would mess with the <code>#include</code> parsing: newlines and <code>&gt;</code>/<code>\"</code> depending (<a href=\"http://eel.is/c++draft/lex.header\" rel=\"nofollow\">[lex.header]</a>):</p>\n<blockquote id=\"so_35977940_35977999_5\">\n<pre><code>header-name:\n    &lt; h-char-sequence &gt;\n    \" q-char-sequence \"\nh-char-sequence:\n    h-char\n    h-char-sequence h-char\nh-char:\n    any member of the source character set except new-line and &gt;\nq-char-sequence:\n    q-char\n    q-char-sequence q-char\nq-char:\n    any member of the source character set except new-line and \"\n</code></pre>\n</blockquote>\n<p>So something like this is perfectly<sup>\u2020</sup> fine:</p>\n<pre><code>#include &lt;hel&amp; lo% world$@-\".h&gt;\n#include \"&gt;.&lt;&gt;.\"\n</code></pre>\n<hr/>\n<p><sup>\u2020</sup>For some definition of \"perfectly\" anyway... </p>\n", "OwnerUserId": "2069064", "LastEditorUserId": "1405588", "LastEditDate": "2016-03-14T02:58:57.920", "Id": "35977999", "Score": "3", "CreationDate": "2016-03-14T01:09:55.433", "LastActivityDate": "2016-03-14T02:58:57.920"}});