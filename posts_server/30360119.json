post_cb({"30360342": {"Id": "30360342", "PostTypeId": "2", "Body": "<p>As Barry said, precedence is determined by the grammar (and there are a few operators that don't really fit well with the basic idea of precedence so you can only really figure out what happens entirely correctly from the grammar, not a precedence table).</p>\n<p>Even if we ignore that, however, the precedence of delete only (at least usually) determines whether a statement is legal/allowed, not what it means. To give a counterexample, with <code>+</code> and <code>*</code>, precedence determines that <code>2 * 3 + 4</code> yields 10 rather than 14 (i.e., multiplication takes precedence).</p>\n<p>In the case of <code>delete</code>, no value is produced as a result of the <code>delete</code> statement, so a statement like <code>delete x + y;</code> simply isn't allowed. It would be parsed as <code>(delete x) + y;</code>, but since <code>delete x</code> doesn't produce a value that can be added to anything else, the result is always prohibited (and if you change the operator, that will remain true).</p>\n<p>Associativity doesn't really make sense for <code>delete</code>. In particular, associativity deals with whether something like: <code>a @ b @ c</code> will be parsed as <code>(a @ b) @ c</code> or <code>a @ (b @ c)</code> (where <code>@</code> is some operator). That's only really meaningful for operators that take two operands though. There's simply no way to combine <code>delete</code>s in a way that allows you to ask the question(s) that associativity answers.</p>\n", "LastEditorUserId": "179910", "LastActivityDate": "2015-05-20T21:16:22.870", "Score": "6", "CreationDate": "2015-05-20T21:05:06.247", "ParentId": "30360119", "CommentCount": "1", "LastEditDate": "2015-05-20T21:16:22.870", "OwnerUserId": "179910"}, "bq_ids": {"n4140": {"so_30360119_30360231_0": {"length": 4, "quality": 0.5714285714285714, "section_id": 203}, "so_30360119_30360119_1": {"length": 5, "quality": 1.0, "section_id": 6063}}, "n3337": {"so_30360119_30360231_0": {"length": 4, "quality": 0.5714285714285714, "section_id": 197}, "so_30360119_30360119_1": {"length": 5, "quality": 1.0, "section_id": 5831}}, "n4659": {"so_30360119_30360231_0": {"length": 4, "quality": 0.5714285714285714, "section_id": 209}, "so_30360119_30360119_1": {"length": 5, "quality": 1.0, "section_id": 7559}}}, "30360364": {"Id": "30360364", "PostTypeId": "2", "Body": "<p>Associativity is about whether <code>a op b op c</code> is parsed as <code>(a op b) op c</code> or <code>a op (b op c)</code>.</p>\n<p><code>delete</code> is a unary operator, so it cannot associate. It has no associativity.</p>\n<p>And <code>delete delete x</code> is never valid.</p>\n", "LastActivityDate": "2015-05-20T21:06:41.530", "Score": "1", "CreationDate": "2015-05-20T21:06:41.530", "ParentId": "30360119", "CommentCount": "0", "OwnerUserId": "212870"}, "30360231": {"Id": "30360231", "PostTypeId": "2", "Body": "<p>The C++ standard typically does not define operators in terms of precedence or associativity. It defines them in terms of grammar. From [expr.delete], <code>delete</code> is used in a <em>delete-expression</em> which is defined as:</p>\n<blockquote>\n<p id=\"so_30360119_30360231_0\"><em>delete-expression</em>:<br>\n  \u00a0\u00a0\u00a0\u00a0::opt <code>delete</code> <em>cast-expression</em><br>\n  \u00a0\u00a0\u00a0\u00a0::opt <code>delete []</code> <em>cast-expression</em></br></br></p>\n</blockquote>\n<p>Where <em>cast-expression</em> is defined in [expr.cast]:</p>\n<blockquote>\n<p id=\"so_30360119_30360231_1\"><em>cast-expression:</em><br>\n  \u00a0\u00a0\u00a0\u00a0<em>unary-expression</em><br>\n  \u00a0\u00a0\u00a0\u00a0 <code>(</code> <em>type-id</em> <code>)</code> <em>cast-expression</em></br></br></p>\n</blockquote>\n<p>And <em>unary-expression</em> is a whole bunch of things defined [expr.unary], that are all unary expressions (increments, decrements, <code>delete</code>s themselves)</p>\n<p>That is, <code>delete *x</code> is right to-left associative because <code>(delete (*x))</code> is the only way to parse that expression according to the grammar.</p>\n<p>This is also reason that <a href=\"http://en.cppreference.com/w/cpp/language/operator_precedence\" rel=\"nofollow\">cppreference</a> cites <code>delete</code>'s precedence where it does is a direct consequence of that. For example, <code>delete</code> is higher than <code>+</code> because in an expression like this:</p>\n<pre><code>delete x+y\n</code></pre>\n<p><code>x+y</code> is not a <em>unary-expression</em>, so the only legitimate parsing of the grammar would be <code>(delete x) + y</code>. </p>\n", "LastEditorUserId": "2069064", "LastActivityDate": "2015-05-20T21:13:36.837", "Score": "2", "CreationDate": "2015-05-20T20:57:39.437", "ParentId": "30360119", "CommentCount": "2", "LastEditDate": "2015-05-20T21:13:36.837", "OwnerUserId": "2069064"}, "30360119": {"ViewCount": "83", "Body": "<p>Whilst looking up operator associativity on wikipedia, I noticed that <code>delete</code> has an associativity of right to left. The source is cited as <a href=\"https://msdn.microsoft.com/en-us/library/126fe14k(v=vs.120).aspx\" rel=\"nofollow\">msdn</a>, I checked it and it comes under group 3 precedence, right to left associativity. So I checked <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4296.pdf\" rel=\"nofollow\">the C++ standard (n4296)</a></p>\n<blockquote>\n<p id=\"so_30360119_30360119_0\"><strong>5.3 Unary expressions [expr.unary]</strong></p>\n<p id=\"so_30360119_30360119_1\">1) Expressions with unary operators group right-to-left</p>\n<pre><code>unary-expression:\n    postfix-expression\n    ++ cast-expression\n    -- cast-expression\n    unary-operator cast-expression\n    sizeof unary-expression\n    sizeof ( type-id )\n    sizeof ... ( identifier )\n    alignof ( type-id )\n    noexcept-expression\n    new-expression\n    delete-expression\nunary-operator: one of\n    * &amp; + - ! ~\n</code></pre>\n</blockquote>\n<p>What implications does this have? What does <code>delete</code> have any associativity at all?</p>\n", "AcceptedAnswerId": "30360342", "Title": "Operator delete associativity", "CreationDate": "2015-05-20T20:49:45.357", "Id": "30360119", "CommentCount": "1", "LastEditDate": "2015-07-01T21:41:21.573", "PostTypeId": "1", "LastEditorUserId": "4370109", "LastActivityDate": "2015-07-01T21:41:21.573", "Score": "5", "OwnerUserId": "1816262", "Tags": "<c++><operators>", "AnswerCount": "3"}});