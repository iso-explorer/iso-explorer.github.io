post_cb({"24489060": {"CommentCount": "0", "ViewCount": "50", "OwnerDisplayName": "user2953119", "CreationDate": "2014-06-30T11:25:37.940", "LastActivityDate": "2014-06-30T11:29:27.683", "PostTypeId": "1", "AcceptedAnswerId": "24489138", "Title": "Constant initialization in a dynamic way", "Id": "24489060", "Score": "1", "Body": "<p>I think that the the variable declared as <code>const</code> applies only <code>Static Initialization</code>. I've written the following:</p>\n<pre><code>#include &lt;cstdlib&gt; \n#include &lt;iostream&gt;\n\nstruct A{ };\n\nconst A *i = new A();\n\nint main(){ }\n</code></pre>\n<p>and it works fine.</p>\n<p><a href=\"http://ideone.com/IIzumd\" rel=\"nofollow\">Ideone</a></p>\n<p>But I expected that the the code is invalid because <code>new A()</code> is a <code>new-expression</code> and it is not a <code>constant expression</code>. Actually:\n sec. 5.19/2 N3797:</p>\n<blockquote>\n<p id=\"so_24489060_24489060_0\">A conditional-expression e is a core constant expression unless the\n  evaluation of e, following the rules of the abstract machine (1.9),\n  would evaluate one of the following expressions:<br>\n  [...]<br>\n  \u2014 a new-expression (5.3.4); </br></br></p>\n<p id=\"so_24489060_24489060_1\">[...]</p>\n</blockquote>\n<p>and</p>\n<blockquote>\n<p id=\"so_24489060_24489060_2\">A constant expression is either a glvalue core constant expression\n  whose value refers to an object with static storage duration or to a\n  function,</p>\n</blockquote>\n", "Tags": "<c++><constant-expression>", "AnswerCount": "2"}, "24489137": {"ParentId": "24489060", "CommentCount": "0", "Body": "<p>The initialisation of a <code>const</code> variable does not require a constant expression.</p>\n", "OwnerUserId": "542190", "PostTypeId": "2", "Id": "24489137", "Score": "0", "CreationDate": "2014-06-30T11:29:25.190", "LastActivityDate": "2014-06-30T11:29:25.190"}, "24489138": {"ParentId": "24489060", "CommentCount": "2", "Body": "<p>First off, you probably meant <code>A * const i</code> (a constant pointer to <code>A</code>) and not <code>const A * i</code> (a non-constant pointer to <code>const A</code>).</p>\n<p>Still, even with this modification, it is perfectly legal to initialise a <code>const</code> variable with a value that is not a constant expression (such as a value computed at runtime). However, it is then not possible to use such a variable inside constant expressions. If you tried that, the constant expression definition would kick in and you'd get an error.</p>\n", "OwnerUserId": "1782465", "PostTypeId": "2", "Id": "24489138", "Score": "4", "CreationDate": "2014-06-30T11:29:27.683", "LastActivityDate": "2014-06-30T11:29:27.683"}, "bq_ids": {"n4140": {"so_24489060_24489060_0": {"section_id": 6185, "quality": 0.875, "length": 14}, "so_24489060_24489060_2": {"section_id": 6187, "quality": 0.9333333333333333, "length": 14}}, "n3337": {"so_24489060_24489060_2": {"section_id": 5947, "quality": 0.6666666666666666, "length": 10}}, "n4659": {"so_24489060_24489060_0": {"section_id": 7687, "quality": 0.75, "length": 12}, "so_24489060_24489060_2": {"section_id": 7690, "quality": 0.9333333333333333, "length": 14}}}});