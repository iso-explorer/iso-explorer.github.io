post_cb({"43848478": {"Id": "43848478", "PostTypeId": "2", "Body": "<pre><code>error 'Class' does not name a type\n</code></pre>\n<p>Just in case someone does the same idiotic thing I did ...\nI was creating a small test program from scratch and I typed <strong>Class</strong> instead of <strong>class</strong> (with a small C). I didn't take any notice of the quotes in the error message and spent a little too long not understanding my problem.</p>\n<p>My search for a solution brought me here so I guess the same could happen to someone else.</p>\n", "LastActivityDate": "2017-05-08T13:07:00.793", "CommentCount": "0", "CreationDate": "2017-05-08T13:07:00.793", "ParentId": "3608305", "Score": "0", "OwnerUserId": "3070485"}, "3608333": {"Id": "3608333", "PostTypeId": "2", "Body": "<p>The problem is that you need to include <code>B.h</code> in your <code>A.h</code> file. The problem is that in the definition of <code>A</code>, the compiler still doesn't know what <code>B</code> is. You should include all the definitions of all the types you are using.</p>\n", "LastActivityDate": "2010-08-31T11:00:12.590", "CommentCount": "0", "CreationDate": "2010-08-31T11:00:12.590", "ParentId": "3608305", "Score": "2", "OwnerUserId": "166067"}, "3608334": {"Id": "3608334", "PostTypeId": "2", "Body": "<p>when you define the class A, in A.h, you explicitely say that the class has a member B.</p>\n<p>You MUST include \"B.h\" in \"A.h\"</p>\n", "LastActivityDate": "2010-08-31T11:00:16.800", "CommentCount": "0", "CreationDate": "2010-08-31T11:00:16.800", "ParentId": "3608305", "Score": "1", "OwnerUserId": "356440"}, "3608342": {"Id": "3608342", "PostTypeId": "2", "Body": "<p>Aren't you missing the #include \"B.h\" in A.h?</p>\n", "LastActivityDate": "2010-08-31T11:01:53.893", "CommentCount": "0", "CreationDate": "2010-08-31T11:01:53.893", "ParentId": "3608305", "Score": "1", "OwnerUserId": "433654"}, "bq_ids": {"n4140": {"so_3608305_3608326_2": {"length": 16, "quality": 0.9411764705882353, "section_id": 7093}, "so_3608305_3608326_3": {"length": 13, "quality": 1.0, "section_id": 7093}, "so_3608305_3608326_0": {"length": 13, "quality": 0.9285714285714286, "section_id": 7093}, "so_3608305_3608326_4": {"length": 22, "quality": 1.0, "section_id": 7093}, "so_3608305_3608326_1": {"length": 7, "quality": 0.875, "section_id": 7093}}, "n3337": {"so_3608305_3608326_2": {"length": 16, "quality": 0.9411764705882353, "section_id": 6837}, "so_3608305_3608326_1": {"length": 7, "quality": 0.875, "section_id": 6837}, "so_3608305_3608326_3": {"length": 13, "quality": 1.0, "section_id": 6837}, "so_3608305_3608326_4": {"length": 22, "quality": 1.0, "section_id": 6837}, "so_3608305_3608326_0": {"length": 13, "quality": 0.9285714285714286, "section_id": 6837}}, "n4659": {"so_3608305_3608326_4": {"length": 22, "quality": 1.0, "section_id": 8594}, "so_3608305_3608326_3": {"length": 13, "quality": 1.0, "section_id": 8594}, "so_3608305_3608326_2": {"length": 16, "quality": 0.9411764705882353, "section_id": 8594}, "so_3608305_3608326_0": {"length": 13, "quality": 0.9285714285714286, "section_id": 8594}, "so_3608305_3608305_0": {"length": 4, "quality": 0.8, "section_id": 180}, "so_3608305_3608326_1": {"length": 7, "quality": 0.875, "section_id": 8594}}}, "3608478": {"Id": "3608478", "PostTypeId": "2", "Body": "<p>The preprocessor inserts the contents of the files <code>A.h</code> and <code>B.h</code> exactly where the <code>include</code> statement occurs (this is really just copy/paste). When the compiler then parses <code>A.cpp</code>, it finds the declaration of class <code>A</code> before it knows about class <code>B</code>. This causes the error you see. There are two ways to solve this:</p>\n<ol>\n<li>Include <code>B.h</code> in <code>A.h</code>. It is generally a good idea to include header files in the files where they are needed. If you rely on indirect inclusion though another header, or a special order of includes in the compilation unit (cpp-file), this will only confuse you and others as the project gets bigger.</li>\n<li><p>If you use member variable of type <code>B</code> in class <code>A</code>, the compiler needs to know the exact and complete declaration of <code>B</code>, because it needs to create the memory-layout for <code>A</code>. If, on the other hand, you were using a pointer or reference to <code>B</code>, then a forward declaration would suffice, because the memory the compiler needs to reserve for a pointer or reference is independent of the class definition. This would look like this:</p>\n<pre><code>class B; // forward declaration        \nclass A {\npublic:\n    A(int id);\nprivate:\n    int _id;\n    B &amp; _b;\n};\n</code></pre>\n<p>This is very useful to avoid circular dependencies among headers.</p></li>\n</ol>\n<p>I hope this helps.</p>\n", "LastEditorUserId": "160206", "LastActivityDate": "2014-06-06T07:01:27.283", "Score": "25", "CreationDate": "2010-08-31T11:21:06.673", "ParentId": "3608305", "CommentCount": "0", "OwnerUserId": "160206", "LastEditDate": "2014-06-06T07:01:27.283"}, "3608305": {"ViewCount": "60709", "Body": "<p>I just started programming in C++, and I've tried to create 2 classes where one will contain the other.</p>\n<p>File <code>A.h</code>:</p>\n<pre><code>#ifndef _A_h\n#define _A_h\n\nclass A{\n    public:\n        A(int id);\n    private:\n        int _id;\n        B _b; // HERE I GET A COMPILATION ERROR: B does not name a type\n};\n\n#endif\n</code></pre>\n<p>File <code>A.cpp</code>:</p>\n<pre><code>#include \"A.h\"\n#include \"B.h\"\n#include &lt;cstdio&gt;\n\nA::A(int id): _id(id), _b(){\n    printf(\"hello\\n the id is: %d\\n\", _id);\n}\n</code></pre>\n<p>File <code>B.h</code>:</p>\n<pre><code>#ifndef _B_h\n#define _B_h\n\nclass B{\n    public:\n        B();\n};\n#endif\n</code></pre>\n<p>File <code>B.cpp</code>:</p>\n<pre><code>#include \"B.h\"\n#include &lt;cstdio&gt;\n\nB::B(){\n    printf(\"this is hello from B\\n\");\n}\n</code></pre>\n<p>I first compile the B class and then the A class, but then I get the error message:</p>\n<blockquote>\n<p id=\"so_3608305_3608305_0\">A.h:9: error: \u2018B\u2019 does not name a type</p>\n</blockquote>\n<p>How do I fix this problem?</p>\n", "AcceptedAnswerId": "3608478", "Title": "Class name does not name a type in C++", "CreationDate": "2010-08-31T10:57:07.070", "Id": "3608305", "CommentCount": "5", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2010-09-13T23:04:35.363", "LastEditorUserId": "63550", "LastActivityDate": "2017-05-08T13:07:00.793", "Score": "13", "OwnerUserId": "432679", "Tags": "<c++>", "AnswerCount": "7"}, "3608327": {"Id": "3608327", "PostTypeId": "2", "Body": "<p>You must first include <code>B.h</code> from <code>A.h</code>. <code>B b</code>; makes no sense until you have included <code>B.h</code>.</p>\n", "LastActivityDate": "2010-08-31T10:59:36.253", "CommentCount": "0", "CreationDate": "2010-08-31T10:59:36.253", "ParentId": "3608305", "Score": "3", "OwnerUserId": "298661"}, "3608326": {"Id": "3608326", "PostTypeId": "2", "Body": "<p>Include \"B.h\" in \"A.h\". That brings in the declaration of 'B' for the compiler while compiling 'A'.</p>\n<p>The first bullet holds in the case of OP.</p>\n<p>$3.4.1/7 - </p>\n<blockquote>\n<p id=\"so_3608305_3608326_0\">\"A name used in the definition of a\n  class X outside of a member function\n  body or nested class definition27)\n  shall be declared in one of the\n  following ways: </p>\n<p id=\"so_3608305_3608326_1\">\u2014 <strong>before its use in\n  class X or be a member of a base class\n  of X (10.2),</strong> or </p>\n<p id=\"so_3608305_3608326_2\">\u2014 if X is a nested\n  class of class Y (9.7), before the\n  definition of X in Y, or shall be a\n  member of a base class of Y (this\n  lookup applies in turn to Y\u2019s\n  enclosing classes, starting with the\n  innermost enclosing class),28) or </p>\n<p id=\"so_3608305_3608326_3\">\u2014 if\n  X is a local class (9.8) or is a\n  nested class of a local class, before\n  the definition of class X in a block\n  enclosing the definition of class X,\n  or </p>\n<p id=\"so_3608305_3608326_4\">\u2014 if X is a member of namespace N,\n  or is a nested class of a class that\n  is a member of N, or is a local class\n  or a nested class within a local class\n  of a function that is a member of N,\n  before the definition of class X in\n  namespace N or in one of N\u2019s enclosing\n  namespaces.\"</p>\n</blockquote>\n", "LastEditorUserId": "418110", "LastActivityDate": "2010-08-31T11:18:12.483", "Score": "2", "CreationDate": "2010-08-31T10:59:35.877", "ParentId": "3608305", "CommentCount": "0", "OwnerUserId": "418110", "LastEditDate": "2010-08-31T11:18:12.483"}});