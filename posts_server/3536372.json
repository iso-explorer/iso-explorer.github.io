post_cb({"3536498": {"ParentId": "3536372", "CommentCount": "1", "Body": "<blockquote>\n<p id=\"so_3536372_3536498_0\">Why is it not allowed in C++ ?</p>\n</blockquote>\n<p>Until and unless you define it, the variable doesn't become a l-value. </p>\n<blockquote>\n<p id=\"so_3536372_3536498_1\">Why are const members allowed to be initialized ?</p>\n</blockquote>\n<p>Even in this case, a definition is required if you are going to take the address of the variable. </p>\n<blockquote>\n<p id=\"so_3536372_3536498_2\"><strong>9.4.2 Static data members</strong></p>\n<p id=\"so_3536372_3536498_3\"><strong>2</strong> The declaration of a static data\n  member in its class definition is not\n  a definition and may be of an\n  incomplete type other than\n  cv-qualified void. The definition for\n  a static data member shall appear in a\n  namespace scope enclosing the member\u2019s\n  class definition. In the definition at\n  namespace scope, the name of the\n  static data member shall be qualified\n  by its class name using the ::\n  operator. The initializer expression\n  in the definition of a static data\n  member is in the scope of its class</p>\n</blockquote>\n<p>Also, this is primarily an usage artifact so that you can write:</p>\n<pre><code>class S {\n      static const int size = 42;\n      float array[ size ];\n};\n</code></pre>\n<blockquote>\n<p id=\"so_3536372_3536498_4\">Does this mean static variables in C++ are not initialized with 0 as\n  in C?</p>\n</blockquote>\n<p>No they are:</p>\n<blockquote>\n<p id=\"so_3536372_3536498_5\"><strong>3.6.2 Initialization of non-local variables</strong></p>\n<p id=\"so_3536372_3536498_6\">Variables with static storage duration\n  (3.7.1) or thread storage duration\n  (3.7.2) shall be zeroinitialized (8.5)\n  before any other initialization takes\n  place.</p>\n</blockquote>\n<p>Though things get a bit more trickier in C++0x. All literal types can now be initialized (as opposed to only integral types in the current standard) which would mean that all scalar types (floats included) and some class types can now be initialized using an initializer in the declaration.</p>\n", "OwnerUserId": "66692", "PostTypeId": "2", "Id": "3536498", "Score": "17", "CreationDate": "2010-08-21T05:41:23.493", "LastActivityDate": "2010-08-21T05:41:23.493"}, "3536534": {"ParentId": "3536372", "CommentCount": "1", "Body": "<p>The short answer:</p>\n<p>It's equivalent to saying <code>extern int Test_j = 0;</code>.</p>\n<p>If it did compile, what would happen? Every source file including your class's header file would define a symbol called Test::j initialized to 0. The linker tends not to like that.</p>\n", "OwnerUserId": "349112", "PostTypeId": "2", "Id": "3536534", "Score": "8", "CreationDate": "2010-08-21T05:57:29.430", "LastActivityDate": "2010-08-21T05:57:29.430"}, "3536513": {"ParentId": "3536372", "PostTypeId": "2", "CommentCount": "2", "Body": "<blockquote>\n<p id=\"so_3536372_3536513_0\">(1.) Why is it not allowed in C++ ?</p>\n</blockquote>\n<p>From <a href=\"http://www.stroustrup.com/bs_faq2.html#in-class\" rel=\"nofollow noreferrer\">Bjarne Stroustrup's C++ Style and Technique FAQ</a>: <code>A class is typically declared in a header file and a header file is typically included into many translation units. However, to avoid complicated linker rules, C++ requires that every object has a unique definition. That rule would be broken if C++ allowed in-class definition of entities that needed to be stored in memory as objects.</code></p>\n<blockquote>\n<p id=\"so_3536372_3536513_1\">(2.) Why are const members allowed to\n  be initialized ?</p>\n</blockquote>\n<p>[<a href=\"https://stackoverflow.com/a/3536498/641833\">dirkgently said it better</a>]</p>\n<blockquote>\n<p id=\"so_3536372_3536513_2\">(3.) Does this mean static variables\n  in C++ are not initialized with 0 as\n  in C?</p>\n</blockquote>\n<p>As far as I know, as long as you declare the static member var in a .cpp it will be zero-initialized if you don't specify otherwise:</p>\n<pre><code>// in some .cpp\nint Test::j; // j = int();\n</code></pre>\n", "OwnerUserId": "153861", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T11:46:40.563", "Id": "3536513", "Score": "14", "CreationDate": "2010-08-21T05:49:04.127", "LastActivityDate": "2016-03-18T12:26:19.750"}, "3536372": {"CommentCount": "0", "AcceptedAnswerId": "3536513", "CreationDate": "2010-08-21T04:49:39.827", "LastActivityDate": "2016-05-17T15:29:24.490", "PostTypeId": "1", "ViewCount": "26318", "FavoriteCount": "6", "Title": "Defining static members in C++", "Id": "3536372", "Score": "22", "Body": "<p>I am trying to define a public static variable like this :</p>\n<pre><code>public :\n         static int j=0;        //or any other value too\n</code></pre>\n<p>I am getting a compilation error on this very line : ISO C++ forbids in-class initialization of non-const static member `j'.</p>\n<ol>\n<li><p>Why is it not allowed in C++ ?</p></li>\n<li><p>Why are const members allowed to be initialized ?</p></li>\n<li><p>Does this mean static variables in C++ are not initialized with 0 as in C?</p></li>\n</ol>\n<p>Thanks !</p>\n", "Tags": "<c++><static>", "OwnerUserId": "430720", "AnswerCount": "5"}, "3536383": {"ParentId": "3536372", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>You will have to initialize the static variable in a .cpp file and not in the class declaration. </p>\n<p>When you declare a static variable in the class, it can used without instantiating a class.</p>\n<pre><code>//Header file\nclass Test\n{\n  public:\n    static int j;\n};\n\n//In cpp file\n\n//Initialize static variables here.\nint Test::j = 0;\n\n//Constructor\nTest::Test(void)\n{\n   //Class initialize code\n}\n</code></pre>\n", "OwnerUserId": "425952", "LastEditorUserId": "15168", "LastEditDate": "2010-08-21T05:14:53.120", "Id": "3536383", "Score": "16", "CreationDate": "2010-08-21T04:56:17.477", "LastActivityDate": "2010-08-21T05:14:53.120"}, "37279028": {"ParentId": "3536372", "PostTypeId": "2", "CommentCount": "0", "Body": "<pre><code>class GetData        \n{    \nprivate:     \nstatic int integer;   //Static variable must be defined with the extension of keyword static;      \npublic:      \nstatic void enter(int x)      \n{       \ninteger = x;  //static variable passed through the static function    \n}\nstatic int  show()   //declared and defined\n{\n    return integer;   //will return the integer's value\n}        \n};        \nint GetData::integer = 0;    //Definition of the static variable       \nint main()      \n{      \n   GetData::enter(234);    //value has been passed through the static function enter. Note that class containing static variables may not have the object in main. They can be called by scope resolution operator in main.\n   cout&lt;&lt;GetData::show();      \n}     \n</code></pre>\n", "OwnerUserId": "5935653", "LastEditorUserId": "5935653", "LastEditDate": "2016-05-17T15:29:24.490", "Id": "37279028", "Score": "2", "CreationDate": "2016-05-17T14:28:47.743", "LastActivityDate": "2016-05-17T15:29:24.490"}, "bq_ids": {"n4140": {"so_3536372_3536498_3": {"section_id": 5907, "quality": 0.9411764705882353, "length": 48}, "so_3536372_3536498_6": {"section_id": 7151, "quality": 0.8666666666666667, "length": 13}}, "n3337": {"so_3536372_3536498_3": {"section_id": 5679, "quality": 0.9411764705882353, "length": 48}, "so_3536372_3536498_6": {"section_id": 6895, "quality": 0.8666666666666667, "length": 13}}, "n4659": {"so_3536372_3536498_3": {"section_id": 7389, "quality": 0.9019607843137255, "length": 46}, "so_3536372_3536498_6": {"section_id": 4051, "quality": 0.6, "length": 9}}}});