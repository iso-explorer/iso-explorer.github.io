post_cb({"36970048": {"ParentId": "36965727", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Basically this question is a duplicate of <a href=\"https://stackoverflow.com/questions/307352/g-undefined-reference-to-typeinfo\">g++ undefined reference to typeinfo</a>.</p>\n<p>Note that according to the standard, the program is ill-formed, no diagnostic required, if not all the non-pure virtual functions are defined:</p>\n<p>N4582 [basic.def.odr]p3</p>\n<blockquote>\n<p id=\"so_36965727_36970048_0\">A virtual member function is odr-used if it is not pure. </p>\n</blockquote>\n<p>N4582 [basic.def.odr]p4</p>\n<blockquote>\n<p id=\"so_36965727_36970048_1\">Every program shall contain exactly one definition of every non-inline function or variable that is odr-used in that program; no diagnostic required. [...] An inline function shall be defined in every translation unit in which it is odr-used.</p>\n</blockquote>\n", "OwnerUserId": "4672588", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T11:53:26.483", "Id": "36970048", "Score": "1", "CreationDate": "2016-05-01T18:01:43.853", "LastActivityDate": "2016-05-01T18:01:43.853"}, "36965727": {"CommentCount": "6", "ViewCount": "176", "PostTypeId": "1", "ClosedDate": "2016-05-26T10:05:35.917", "LastEditorUserId": "-1", "CreationDate": "2016-05-01T10:45:17.603", "LastActivityDate": "2016-05-01T18:01:43.853", "Title": "Weird undefined reference error using typeid() in a CRTP", "LastEditDate": "2017-05-23T11:53:26.483", "Id": "36965727", "Score": "-4", "Body": "<p>In regards to give a solution for <a href=\"https://stackoverflow.com/questions/36964242/print-overridden-child-field-during-initialization-in-c-without-templates\">this question</a>, I tried to simplify my code presented in the answer to use RTTI and the <code>typeid()</code> function to retrieve a class name:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;typeinfo&gt;\n\nstruct IDriver {\n    // Public virtual API:\n    virtual void func1() = 0;\n    // ...\n    virtual ~IDriver() {}\n};\n\nclass SpecificDriver;\n\ntemplate&lt;typename Derived&gt;\nclass Driver : public IDriver {\npublic:\n    Driver() {\n         std::cout &lt;&lt; typeid(*this).name() &lt;&lt; std::endl;\n         std::cout &lt;&lt; typeid(Derived).name() &lt;&lt; std::endl;\n    }  \n    virtual ~Driver() {}\n};\n\nclass SpecificDriver : public Driver&lt;SpecificDriver&gt; {\npublic:\n    // Public virtual API:\n    virtual void func1();\n    virtual ~SpecificDriver() {}\n};\n\nint main() {\n    SpecificDriver sd;\n}\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/4e068b6a4807089e\" rel=\"nofollow noreferrer\">Using this code</a> results in a linker error:</p>\n<pre><code>/tmp/ccXnTrfe.o: In function `main':\nmain.cpp:(.text.startup+0x4f): undefined reference to `typeinfo for SpecificDriver'\n</code></pre>\n<p>Why does this result in an undefined reference error for the <code>typeinfo</code> rather than the missing <code>func1()</code> definition (where it's not even used BTW)? </p>\n<hr>\n<p>Interestingly enough when I remove all the <code>virtual</code> stuff, it works just fine:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;typeinfo&gt;\n\ntemplate&lt;typename Derived&gt;\nclass Driver {\npublic:\n    Driver() {\n         std::cout &lt;&lt; typeid(*this).name() &lt;&lt; std::endl;\n         std::cout &lt;&lt; typeid(Derived).name() &lt;&lt; std::endl;\n    }  \n};\n\nclass SpecificDriver : public Driver&lt;SpecificDriver&gt; {\n};\n\nint main() {\n    SpecificDriver sd;\n}\n</code></pre>\n<p>Output:</p>\n<pre><code>6DriverI14SpecificDriverE\n14SpecificDriver\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/027199136aff8bd4\" rel=\"nofollow noreferrer\"><kbd>Demo</kbd></a></p>\n<p>So is this really related to <a href=\"https://gcc.gnu.org/onlinedocs/gcc/Vague-Linkage.html\" rel=\"nofollow noreferrer\"><code>vtable</code> generation</a>?</p>\n</hr>", "Tags": "<c++><undefined-reference><crtp><typeinfo>", "OwnerUserId": "1413395", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_36965727_36970048_1": {"section_id": 7041, "quality": 1.0, "length": 19}, "so_36965727_36970048_0": {"section_id": 7040, "quality": 1.0, "length": 5}}, "n3337": {"so_36965727_36970048_1": {"section_id": 6786, "quality": 1.0, "length": 19}, "so_36965727_36970048_0": {"section_id": 6785, "quality": 1.0, "length": 5}}, "n4659": {"so_36965727_36970048_1": {"section_id": 8538, "quality": 1.0, "length": 19}, "so_36965727_36970048_0": {"section_id": 8537, "quality": 1.0, "length": 5}}}, "36965813": {"ParentId": "36965727", "PostTypeId": "2", "CommentCount": "10", "Body": "<p>So why missed implementation of <code>virtual void func1();</code> in <code>SpecificDriver</code></p>\n<pre><code>// Public virtual API:\nvirtual void func1();\n</code></pre>\n<p>cause message about missed <code>typeinfo</code>?</p>\n<p>The detailed answer can be found here:</p>\n<p><a href=\"http://www.hexblog.com/wp-content/uploads/2012/06/Recon-2012-Skochinsky-Compiler-Internals.pdf\" rel=\"nofollow\">http://www.hexblog.com/wp-content/uploads/2012/06/Recon-2012-Skochinsky-Compiler-Internals.pdf</a></p>\n<p>or here <a href=\"http://www.avabodh.com/cxxin/virtualfunction.html\" rel=\"nofollow\">http://www.avabodh.com/cxxin/virtualfunction.html</a></p>\n<p>the short answer because for <code>gcc</code> and <code>clang</code> compiler implement\n<code>rtti</code> lookup for <code>class</code> with <code>vtable</code> via <code>vtable</code>.</p>\n<p>In your case if you compile code <strong>without optimization</strong>, gcc give you:</p>\n<blockquote>\n<p id=\"so_36965727_36965813_0\">undefined reference to `vtable for SpecificDriver'</p>\n<p id=\"so_36965727_36965813_1\">undefined reference to `typeinfo for SpecificDriver'</p>\n</blockquote>\n<p><code>coliru</code> by default using <code>-O2</code> optimization level, so it optimize code like this:</p>\n<pre><code>auto p1 = get_ptr_to_vtable();\nauto p2 = get_ptr_to_typeinfo(p1);\n</code></pre>\n<p>to just </p>\n<pre><code>auto p2 = CONSTANT;\n</code></pre>\n<p>and give error only about missed typeinfo.</p>\n", "OwnerUserId": "1034749", "LastEditorUserId": "1034749", "LastEditDate": "2016-05-01T13:22:23.520", "Id": "36965813", "Score": "2", "CreationDate": "2016-05-01T10:53:50.990", "LastActivityDate": "2016-05-01T13:22:23.520"}});