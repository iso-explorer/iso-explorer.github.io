post_cb({"bq_ids": {"n4140": {"so_25501583_25501734_3": {"length": 4, "quality": 1.0, "section_id": 3286}, "so_25501583_25501734_0": {"length": 17, "quality": 0.6538461538461539, "section_id": 435}}, "n3337": {"so_25501583_25501734_3": {"length": 4, "quality": 1.0, "section_id": 3156}, "so_25501583_25501734_0": {"length": 25, "quality": 0.9615384615384616, "section_id": 427}}, "n4659": {"so_25501583_25501734_0": {"length": 17, "quality": 0.6538461538461539, "section_id": 454}}}, "25501734": {"Id": "25501734", "PostTypeId": "2", "Body": "<p>Accessing uninitialized variables is <strong>undefined behavior</strong> and no diagnostic is required. This means that you can get a warning for <code>b.k</code> (MSVC++), for <code>a.k</code> (g++) or for neither (Clang).</p>\n<p>Standard quotes:</p>\n<p><strong>12.6.2 Initializing bases and members [class.base.init]</strong></p>\n<blockquote>\n<p id=\"so_25501583_25501734_0\">8 In a non-delegating constructor, if a given non-static data member\n  or base class is not designated by a mem-initializer-id (including the\n  case where there is no mem-initializer-list because the constructor\n  has no ctor-initializer) and the entity is not a virtual base class of\n  an abstract class (10.4), then </p>\n<p id=\"so_25501583_25501734_1\">[bunch of non-applicable clauses] </p>\n<p id=\"so_25501583_25501734_2\">\u2014 otherwise, the entity is default-initialized (8.5).</p>\n</blockquote>\n<p><strong>8.5 Initializers [dcl.init]</strong></p>\n<blockquote>\n<p id=\"so_25501583_25501734_3\">7 To default-initialize an object of type T means: </p>\n<p id=\"so_25501583_25501734_4\">[bunch of non-applicable clauses]</p>\n<p id=\"so_25501583_25501734_5\"><strong>\u2014 otherwise, no initialization is performed.</strong></p>\n</blockquote>\n<p>The 12.6.2/8 quote has this example:</p>\n<pre><code>struct C {\n    C() { }    // initializes members as follows:\n    A a;         // OK: calls A::A()\n    const B b;   // error: B has no default constructor\n    int i;       // OK: i has indeterminate value // &lt;---------- your code\n    int j = 5;   // OK: j has the value 5\n};\n</code></pre>\n", "LastEditorUserId": "819272", "LastActivityDate": "2014-08-26T09:35:15.157", "Score": "8", "CreationDate": "2014-08-26T08:54:19.720", "ParentId": "25501583", "CommentCount": "6", "OwnerUserId": "819272", "LastEditDate": "2014-08-26T09:35:15.157"}, "25502138": {"Id": "25502138", "PostTypeId": "2", "Body": "<p>As per <strong>\u00a7 8.5 Initializers</strong></p>\n<p><code>if T has a non-trivial default constructor, the object is default-initialized;</code></p>\n<p>Which means both <code>a.k and b.k</code> are not value initialized, access them are <code>UB</code></p>\n<p>To initialize <code>A::k</code>, you could put it in member initialize list</p>\n<pre><code>A():k(42) {};\n</code></pre>\n<p>For <code>B::K</code>, you could call it with:</p>\n<pre><code>B b = {}; // value initialize  members, k initialized to 0\n</code></pre>\n", "LastActivityDate": "2014-08-26T09:15:05.413", "CommentCount": "2", "CreationDate": "2014-08-26T09:15:05.413", "ParentId": "25501583", "Score": "2", "OwnerUserId": "951757"}, "25501583": {"ViewCount": "1653", "Body": "<p>Why does printing <code>b.k</code> give a warning when printing <code>a.k</code> does not? I Use VS2013</p>\n<pre><code>//warning C4700: uninitialized local variable 'b' used\n#include&lt;iostream&gt; \n\nusing namespace std;\n\nstruct A {\n  A() {};\n  int k;\n};\nstruct B {\n  B() = default;\n  int k;\n};\n\nint main() {\n  A a;\n  cout &lt;&lt; a.k &lt;&lt; endl;\n  B b;\n  cout &lt;&lt; b.k &lt;&lt; endl; // this gives a warning, uninitialized local variable\n\n  return 0;\n}\n</code></pre>\n", "AcceptedAnswerId": "25501734", "Title": "uninitialized local variable with c++11 default", "CreationDate": "2014-08-26T08:45:56.203", "Id": "25501583", "CommentCount": "3", "LastEditDate": "2014-08-26T08:57:56.380", "PostTypeId": "1", "LastEditorUserId": "819272", "LastActivityDate": "2014-08-26T09:35:15.157", "Score": "12", "OwnerUserId": "334688", "Tags": "<c++><c++11><undefined-behavior><default-constructor>", "AnswerCount": "2"}});