post_cb({"17082841": {"CommentCount": "1", "ViewCount": "637", "PostTypeId": "1", "LastEditorUserId": "908515", "CreationDate": "2013-06-13T08:46:36.687", "LastActivityDate": "2013-06-13T09:48:50.890", "Title": "invalid conversion from 'const char*' to 'const S8*'", "LastEditDate": "2013-06-13T08:50:43.310", "Id": "17082841", "Score": "-1", "Body": "<p>I have a S8 type define, and a debug print function using that defined type.</p>\n<pre><code>typedef signed char S8;\nS32 CH_COM_DebugPrintf(const S8 *rpc_format, ...)\n</code></pre>\n<p>when I invoke this printf function like below, </p>\n<pre><code>CH_COM_DebugPrintf(\"TunerCallback device id:[%d]\\r\\n\", ri_Device);\nCH_COM_DebugPrintf(\"TunerCallback event type:[%d]\\r\\n\", renm_EventType);\n</code></pre>\n<p>when compiling, it give out error, what's wrong? </p>\n<pre><code>arm-hisiv200-linux-g++ -I./gtest/include -I../drv/include -g -Wall -Wextra -c src/chdrv_tunner_test.cc\nsrc/chdrv_tunner_test.cc: In function 'void CHDRV_TEST_TunerCallback(S32, CHDRV_TUNER_EVENT_TYPE_e, void*)':\nsrc/chdrv_tunner_test.cc:30: error: invalid conversion from 'const char*' to 'const S8*'\nsrc/chdrv_tunner_test.cc:30: error:   initializing argument 1 of 'S32 CH_COM_DebugPrintf(const S8*, ...)'\nsrc/chdrv_tunner_test.cc:31: error: invalid conversion from 'const char*' to 'const S8*'\nsrc/chdrv_tunner_test.cc:31: error:   initializing argument 1 of 'S32 CH_COM_DebugPrintf(const S8*, ...)'\nsrc/chdrv_tunner_test.cc: At global scope:\n</code></pre>\n<p>it didn't work as I force to convert to (const S8*), please give me some help regard this. very appreciated your help.</p>\n<pre><code>CH_COM_DebugPrintf((S8*)\"TunerCallback device id:[%d]\\r\\n\", ri_Device);\nCH_COM_DebugPrintf((S8*)\"TunerCallback event type:[%d]\\r\\n\", renm_EventType);\n</code></pre>\n", "Tags": "<c++>", "OwnerUserId": "723549", "AnswerCount": "3"}, "17082931": {"ParentId": "17082841", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>According to the <a href=\"http://www.open-std.org/jtc1/sc22/open/n2356/basic.html\" rel=\"nofollow\">standard</a> (3.9.1  Fundamental types):</p>\n<blockquote>\n<p id=\"so_17082841_17082931_0\">Plain char, signed char, and unsigned char are three distinct types.</p>\n</blockquote>\n<p>A string literal in the form of <code>\"text\"</code> consists of <code>const char</code> and not a <code>const signed char</code> or <code>const unsigned char</code>.</p>\n<p>Since they are pointer types you can easily cast them to each other, but that won't be done implicitly.</p>\n", "OwnerUserId": "2035029", "LastEditorUserId": "2035029", "LastEditDate": "2013-06-13T08:59:11.037", "Id": "17082931", "Score": "3", "CreationDate": "2013-06-13T08:52:13.887", "LastActivityDate": "2013-06-13T08:59:11.037"}, "17082950": {"ParentId": "17082841", "CommentCount": "0", "Body": "<p>The type of a string literal is <code>char []</code>, an array of <code>char</code>.  When passed to a function like this, it will be evaluated as a pointer to its first element, a <code>char *</code>.</p>\n<p><code>char</code> and <code>signed char</code> are distinct types (even if <code>char</code> is signed on your platform).  A pointer to one cannot be implicitly converted to a pointer to the other.</p>\n<p>Your function should be declared with the first parameter as <code>const char *</code> if you want to pass string literals without an explicit conversion.</p>\n", "OwnerUserId": "134633", "PostTypeId": "2", "Id": "17082950", "Score": "3", "CreationDate": "2013-06-13T08:53:04.720", "LastActivityDate": "2013-06-13T08:53:04.720"}, "bq_ids": {"n4140": {"so_17082841_17082931_0": {"section_id": 7210, "quality": 1.0, "length": 9}}, "n3337": {"so_17082841_17082931_0": {"section_id": 6954, "quality": 1.0, "length": 9}}, "n4659": {"so_17082841_17082931_0": {"section_id": 8719, "quality": 1.0, "length": 9}}}, "17082968": {"ParentId": "17082841", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>You can try:</p>\n<pre><code>CH_COM_DebugPrintf((S8*)\"TunerCallback device id:[%du]\\r\\n\", ri_Device);\nCH_COM_DebugPrintf((S8*)\"TunerCallback event type:[%du]\\r\\n\", renm_EventType);\n</code></pre>\n<p>printing as unsigned values</p>\n<p>Maybe you should use <code>typedef unsigned char S8;</code> instead of <code>signed</code> values, because device id and callback types representations  are semantically positive values.</p>\n", "OwnerUserId": "2183287", "LastEditorUserId": "2183287", "LastEditDate": "2013-06-13T09:48:50.890", "Id": "17082968", "Score": "0", "CreationDate": "2013-06-13T08:54:09.773", "LastActivityDate": "2013-06-13T09:48:50.890"}});