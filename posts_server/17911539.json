post_cb({"bq_ids": {"n4140": {"so_17911539_17911572_0": {"length": 15, "quality": 0.9375, "section_id": 6109}}, "n3337": {"so_17911539_17911572_0": {"length": 15, "quality": 0.9375, "section_id": 5875}}, "n4659": {"so_17911539_17911572_0": {"length": 15, "quality": 0.9375, "section_id": 7606}}}, "17911539": {"ViewCount": "1905", "Body": "<p>I have  the following code:</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass CForward;\n\nvoid func(CForward* frw) { delete frw; }\n\nclass CForward\n{\npublic:\n    ~CForward() { cout &lt;&lt; \"Forward\" &lt;&lt; endl; }\n};\n\nint main()\n{\n    func(new CForward);\n    cin.get();\n}\n</code></pre>\n<p>I ran the program, and it printed nothing.</p>\n<p>Why?</p>\n<p>in main, I created <code>new CFoward</code>, and in <code>func</code> I deleted it and called it destructor.</p>\n<p>It seems that the destructor have not been called. Why? Is  that related anyhow to the forward decleration?</p>\n", "AcceptedAnswerId": "17911572", "Title": "The relation between Forward declaration and destructors", "CreationDate": "2013-07-28T18:40:25.653", "Id": "17911539", "CommentCount": "4", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2013-07-28T19:38:07.473", "LastEditorUserId": "24874", "LastActivityDate": "2013-07-28T19:38:07.473", "Score": "13", "OwnerUserId": "1798362", "Tags": "<c++><forward-declaration>", "AnswerCount": "2"}, "17911594": {"Id": "17911594", "PostTypeId": "2", "Body": "<p>Yes. In fact in the function func, the compiler doesn't know the complete type of cForward. So  the desctructor is neved called.</p>\n<p>If you put the function after the class, it will work fine.</p>\n", "LastActivityDate": "2013-07-28T18:46:36.180", "CommentCount": "0", "CreationDate": "2013-07-28T18:46:36.180", "ParentId": "17911539", "Score": "1", "OwnerUserId": "2422765"}, "17911572": {"Id": "17911572", "PostTypeId": "2", "Body": "<p>Indeed, your forward declaration introduces an incomplete type that is later defined with a non-trivial destructor, and that can't be used in a delete expression:</p>\n<p>From n3337, paragraph 5.3.5/5:</p>\n<blockquote>\n<p id=\"so_17911539_17911572_0\">5 If the object being deleted has incomplete class type at the point of deletion and the complete class has a\n  non-trivial destructor or a deallocation function, the behavior is unde\ufb01ned.</p>\n</blockquote>\n", "LastEditorUserId": "947836", "LastActivityDate": "2013-07-28T18:49:11.337", "Score": "12", "CreationDate": "2013-07-28T18:43:51.767", "ParentId": "17911539", "CommentCount": "1", "OwnerUserId": "947836", "LastEditDate": "2013-07-28T18:49:11.337"}});