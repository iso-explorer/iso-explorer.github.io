post_cb({"16200316": {"ParentId": "12072182", "CommentCount": "0", "CreationDate": "2013-04-24T19:13:41.077", "Id": "16200316", "PostTypeId": "2", "OwnerDisplayName": "user2316968", "Score": "1", "Body": "<p>yes. This placement form of <code>operator new</code> is already defined in a global namespace, so that you cannot provide a definition there yourself. This is not replaceable.</p>\n", "LastActivityDate": "2013-04-24T19:13:41.077"}, "12917192": {"ParentId": "12072182", "LastEditDate": "2014-04-19T11:06:19.257", "CommentCount": "0", "CreationDate": "2012-10-16T14:37:27.307", "OwnerUserId": "833538", "LastEditorUserId": "2514879", "PostTypeId": "2", "Id": "12917192", "Score": "2", "Body": "<p>1) You have the compile error because global level placement new operator <strong>cannot</strong> be replaced ! See c++ 11 standards(in previous standards as well). </p>\n<blockquote>\n<pre><code>18.6.1.3 Placement forms [new.delete.placement]\n1 These functions are reserved, a C++ program may not define functions that \n</code></pre>\n<p id=\"so_12072182_12917192_0\">displace the versions in the\n      Standard C++ library (17.6.4). The provisions of (3.7.4) do not apply to these reserved placement forms of\n      operator new and operator delete.\n      void* operator new(std::size_t size, void* ptr) noexcept;</p>\n</blockquote>\n<p>So basically you can replace the other global new operator(see below), but <strong>NOT</strong> the placement form as the standards forbid it ! </p>\n<pre><code>void* operator new (std::size_t size) throw (std::bad_alloc) \n</code></pre>\n<p>2) On the other hand, you can write your own class level new operators including the placement new one inside your class, that's ok:</p>\n<pre><code>class Test\n{\npublic:\n\n    void* operator new (std::size_t size) throw (std::bad_alloc) {\n        return malloc(size);\n    }\n\n    void* operator new (std::size_t size, const std::nothrow_t&amp; nothrow_constant) throw() {\n        return malloc(size);\n    }\n\n    void* operator new (std::size_t size, void* ptr) throw() {\n        return malloc(size);\n    }\n};\n</code></pre>\n", "LastActivityDate": "2014-04-19T11:06:19.257"}, "12072364": {"ParentId": "12072182", "LastEditDate": "2012-08-22T12:00:08.837", "CommentCount": "9", "CreationDate": "2012-08-22T11:45:00.050", "OwnerUserId": "1522056", "LastEditorUserId": "1522056", "PostTypeId": "2", "Id": "12072364", "Score": "1", "Body": "<p>The C++ standard defines a placement <code>operator new</code> taking an additional <code>void*</code> in the header file <code>&lt;new&gt;</code>.\nIts implementation is similar to this:</p>\n<pre><code>void* operator new(size_t, void* m)\n{\n    return m;\n}\n</code></pre>\n<p>It's commonly used to instantiate objects on already allocated memory, e.g. by STL containers which separate allocation from instantiation. So if you include any standard header depending on <code>&lt;new&gt;</code>, the placement new will already be defined.</p>\n<p>If you want to create your own version of <code>operator new</code> with different semantics, you can use a dummy parameter to disambiguate the situation:</p>\n<pre><code>struct my_new_dummy {} dummy;\nvoid* operator new(size_t, my_new_dummy, void* m);\n\n//...\n\nint mem;\nint* ptr = new(dummy, &amp;mem) int;\n</code></pre>\n<p><strong>Edit:</strong> The reason why you can redefine the ordinary <code>operator new</code> but not placement new, is that the former is by default defined by the compiler and can be overridden manually, whereas placement new is defined in a header, therefore causing a conflict with your re-definition.</p>\n", "LastActivityDate": "2012-08-22T12:00:08.837"}, "12072182": {"CommentCount": "7", "ViewCount": "2482", "PostTypeId": "1", "LastEditorUserId": "1459996", "CreationDate": "2012-08-22T11:34:23.980", "LastActivityDate": "2016-03-03T09:49:09.387", "Title": "operator new already has a body", "AcceptedAnswerId": "12072364", "LastEditDate": "2016-03-03T09:49:09.387", "Id": "12072182", "Score": "3", "Body": "<p>I am trying to implement operator new with parameter as global. There is no problem if new without args is overloaded, but I get followings errors when trying to compile</p>\n<pre><code>inline void* operator new(size_t, void* p) {\n    //...\n    return p;\n}\n</code></pre>\n<blockquote>\n<p id=\"so_12072182_12072182_0\">c:\\bjarne_exercise_6.cpp(14): error C2084: function 'void *operator new(size_t,void *) throw()' already has a body\n            c:\\program files\\microsoft visual studio 10.0\\vc\\include\\new(55) : see previous definition of 'new'</p>\n<p id=\"so_12072182_12072182_1\">c:\\bjarne_exercise_6.cpp(40): error C2264: 'operator new' : error in function definition or declaration; function not called</p>\n</blockquote>\n<p>I have just solved this, you have to declare this before you #include stdafx.h\nNo, not true. It compile well but still not this function is called but the version from new header file. It is so, because placement new(with 2 params) is already defined in new header. The ordinary new (with just 1, size_t parameter) is only declared there, so you can still overload it. So if you want special new with more than 1 parameter the solution suggested by @trion below is appropriate.</p>\n", "Tags": "<c++><operators><new-operator>", "OwnerUserId": "1141471", "AnswerCount": "4"}, "12072294": {"ParentId": "12072182", "CommentCount": "2", "Body": "<p>This placement form of <code>operator new</code> (as the Standard calls it) is already defined in a C++ program in the global namespace, you cannot provide a definition there yourself. Unlike other global <code>operator new</code>s, this one is not replaceable.</p>\n", "OwnerUserId": "726300", "PostTypeId": "2", "Id": "12072294", "Score": "4", "CreationDate": "2012-08-22T11:40:37.980", "LastActivityDate": "2012-08-22T11:40:37.980"}, "bq_ids": {"n4140": {"so_12072182_12917192_0": {"section_id": 6857, "quality": 0.8260869565217391, "length": 19}}, "n3337": {"so_12072182_12917192_0": {"section_id": 6603, "quality": 0.8260869565217391, "length": 19}}, "n4659": {"so_12072182_12917192_0": {"section_id": 8349, "quality": 0.8260869565217391, "length": 19}}}});