post_cb({"bq_ids": {"n4140": {"so_2372291_2372354_0": {"length": 33, "quality": 0.66, "section_id": 3344}}, "n3337": {"so_2372291_2372354_0": {"length": 33, "quality": 0.66, "section_id": 3214}}}, "2372291": {"ViewCount": "116", "Body": "<p>I know that when a constructor fails, the completed member objects will be destroyed. There is no memory leak.</p>\n<p>My question is that how does compiler do that? How can compiler know what member is constructed? Does it make any record of it? Does the compiler really destroy everything in this case? How does it guarantee this?</p>\n", "AcceptedAnswerId": "2372354", "Title": "how failed constructor roll over to destroy the completed objects?", "CreationDate": "2010-03-03T15:01:50.723", "Id": "2372291", "CommentCount": "2", "LastEditDate": "2010-03-03T15:07:41.337", "PostTypeId": "1", "LastEditorUserId": "57120", "LastActivityDate": "2010-03-03T15:10:20.460", "Score": "1", "OwnerUserId": "233254", "Tags": "<c++>", "AnswerCount": "1"}, "2372354": {"PostTypeId": "2", "Body": "<p>How the compiler does that is up to the compiler.</p>\n<p>But yes, you are guaranteed that any constructed objects will be destructed (in the reverse order they were constructed). \u00a715.2/2:</p>\n<blockquote>\n<p id=\"so_2372291_2372354_0\">An object that is partially constructed or partially destroyed will have destructors executed for all of its fully constructed subobjects, that is, for subobjects for which the constructor has completed execution and the destructor has not yet begun execution. Should a constructor for an element of an automatic array throw an exception, only the constructed elements of that array will be destroyed. If the object or array was allocated in a new-expression, the matching deallocation function (3.7.3.2, 5.3.4, 12.5), if any, is called to free the storage occupied by the object.</p>\n</blockquote>\n", "LastActivityDate": "2010-03-03T15:10:20.460", "Id": "2372354", "CommentCount": "0", "CreationDate": "2010-03-03T15:10:20.460", "ParentId": "2372291", "Score": "4", "OwnerUserId": "87234"}});