post_cb({"2506839": {"Id": "2506839", "PostTypeId": "2", "Body": "<p>In section 12.2, Temporary Objects, clause 3, the ANSI/ISO C standard states: \"... Temporary objects are destroyed as the last step in evaluating the full-expression that (lexically) contains the point where they were created.\"</p>\n<p>This is closely related to the concept of <a href=\"http://en.wikipedia.org/wiki/Sequence_point\" rel=\"nofollow noreferrer\">Sequence Points</a>.  When a sequence point is reached, all side-effects of expressions are guaranteed to have taken place.</p>\n", "LastActivityDate": "2010-03-24T10:26:24.777", "CommentCount": "1", "CreationDate": "2010-03-24T10:26:24.777", "ParentId": "2506793", "Score": "2", "OwnerUserId": "99032"}, "2507225": {"Id": "2507225", "PostTypeId": "2", "Body": "<p>Everyone has rightly cited 12.2/3 or similar, which answers your question:</p>\n<blockquote>\n<p id=\"so_2506793_2507225_0\">Temporary objects are destroyed as the\n  last step in evaluating the\n  full-expression that (lexically)\n  contains the point where they were\n  created.</p>\n</blockquote>\n<p>I find it amusing that <em>over the next page</em> in my printing of the standard, 12.2/4 says:</p>\n<blockquote>\n<p id=\"so_2506793_2507225_1\">There are two contexts in which\n  temporaries are destroyed at a\n  different point than the end of the\n  full-expression.</p>\n</blockquote>\n<p>Neither of them applies to your example, they both relate to the use of temporaries in initializers. But it does go to show that you have to keep your wits about you when dealing with a tricky beast like the C++ standard.</p>\n", "LastEditorUserId": "13005", "LastActivityDate": "2014-03-04T14:53:58.350", "Score": "22", "CreationDate": "2010-03-24T11:32:24.540", "ParentId": "2506793", "CommentCount": "2", "OwnerUserId": "13005", "LastEditDate": "2014-03-04T14:53:58.350"}, "2506793": {"ViewCount": "9073", "Body": "<p>When creating a new instance of a <code>MyClass</code> as an argument to a function like so:</p>\n<pre><code>class MyClass\n{\n  MyClass(int a);\n};    \n\nmyFunction(MyClass(42));\n</code></pre>\n<p>does the standard make any grantees on the timing of the destructor?<br>\nSpecifically, can I assume that the it is going to be called before the next statement after the call to <code>myFunction()</code> ?</br></p>\n", "AcceptedAnswerId": "2506800", "Title": "C++: Life span of temporary arguments?", "CreationDate": "2010-03-24T10:18:55.917", "Id": "2506793", "CommentCount": "1", "FavoriteCount": "17", "PostTypeId": "1", "LastEditDate": "2011-11-15T15:27:59.690", "LastEditorUserId": "46642", "LastActivityDate": "2016-04-15T08:25:51.887", "Score": "54", "OwnerUserId": "9611", "Tags": "<c++><destructor>", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_2506793_2507225_1": {"length": 10, "quality": 1.0, "section_id": 381}, "so_2506793_2506811_0": {"length": 12, "quality": 0.8571428571428571, "section_id": 382}, "so_2506793_2507225_0": {"length": 14, "quality": 1.0, "section_id": 380}}, "n3337": {"so_2506793_2507225_1": {"length": 10, "quality": 1.0, "section_id": 372}, "so_2506793_2506811_0": {"length": 12, "quality": 0.8571428571428571, "section_id": 373}, "so_2506793_2507225_0": {"length": 14, "quality": 1.0, "section_id": 371}}, "n4659": {"so_2506793_2507225_1": {"length": 9, "quality": 0.9, "section_id": 396}, "so_2506793_2506811_0": {"length": 11, "quality": 0.7857142857142857, "section_id": 397}, "so_2506793_2507225_0": {"length": 14, "quality": 1.0, "section_id": 395}}}, "2506800": {"Id": "2506800", "PostTypeId": "2", "Body": "<p>Temporary objects are destroyed at the end of the full expression they're part of. </p>\n<p>A full expression is an expression that isn't a sub-expression of some other expression. Usually this means it ends at the <code>;</code> (or <code>)</code> for <code>if</code>, <code>while</code>, <code>switch</code> etc.) denoting the end of the statement. In your example, it's the end of the function call. </p>\n<p>Note that you can extend the lifetime of temporaries by binding them to a <code>const</code> reference. Doing so extends their lifetime to the reference's lifetime: </p>\n<pre><code>MyClass getMyClass();\n\n{\n  const MyClass&amp; r = getMyClass(); // full expression ends here\n  ...\n} // object returned by getMyClass() is destroyed here\n</code></pre>\n<p>If you don't plan to change the returned object, then this is a nice trick to save a copy constructor call (compared to <code>MyClass obj = getMyClass();</code>), in case return value optimization was not being applied. Unfortunately it isn't very well known. (I suppose C++11's move semantics will render it less useful, though.)</p>\n", "LastEditorUserId": "140719", "LastActivityDate": "2016-04-15T08:25:51.887", "Score": "85", "CreationDate": "2010-03-24T10:20:30.953", "ParentId": "2506793", "CommentCount": "9", "OwnerUserId": "140719", "LastEditDate": "2016-04-15T08:25:51.887"}, "2506811": {"Id": "2506811", "PostTypeId": "2", "Body": "<p>The standard does indeed offer guarantees - from section 12.2/5:</p>\n<blockquote>\n<p id=\"so_2506793_2506811_0\">A temporary bound to a reference\n  parameter in a function call (5.2.2)\n  persists until the completion of the\n  full expression containing the call</p>\n</blockquote>\n<p>However, in your code it is not clear if the parameter is being passed by reference or by value, though at some point a copy constructor which does take a reference will be used.</p>\n", "LastEditorDisplayName": "anon", "OwnerDisplayName": "anon", "LastActivityDate": "2010-03-24T10:28:38.280", "Score": "9", "CreationDate": "2010-03-24T10:22:20.260", "ParentId": "2506793", "CommentCount": "1", "LastEditDate": "2010-03-24T10:28:38.280"}});