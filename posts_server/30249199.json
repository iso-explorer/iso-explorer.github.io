post_cb({"bq_ids": {"n4140": {"so_30249199_30249315_0": {"length": 47, "quality": 0.9591836734693877, "section_id": 3308}, "so_30249199_30249315_2": {"length": 41, "quality": 0.9761904761904762, "section_id": 3308}, "so_30249199_30249315_3": {"length": 16, "quality": 0.8421052631578947, "section_id": 3308}, "so_30249199_30249315_4": {"length": 20, "quality": 0.9090909090909091, "section_id": 3304}}, "n3337": {"so_30249199_30249315_0": {"length": 46, "quality": 0.9387755102040817, "section_id": 3178}, "so_30249199_30249315_2": {"length": 41, "quality": 0.9761904761904762, "section_id": 3178}, "so_30249199_30249315_3": {"length": 16, "quality": 0.8421052631578947, "section_id": 3178}, "so_30249199_30249315_4": {"length": 17, "quality": 0.7727272727272727, "section_id": 3174}}, "n4659": {"so_30249199_30249315_0": {"length": 42, "quality": 0.8571428571428571, "section_id": 4074}, "so_30249199_30249315_2": {"length": 41, "quality": 0.9761904761904762, "section_id": 4074}, "so_30249199_30249315_3": {"length": 16, "quality": 0.8421052631578947, "section_id": 4074}, "so_30249199_30249315_4": {"length": 16, "quality": 0.7272727272727273, "section_id": 4070}}}, "30249315": {"Id": "30249315", "PostTypeId": "2", "Body": "<p>The line</p>\n<pre><code>A C = {0, 0}; \n</code></pre>\n<p>Performs <a href=\"http://en.cppreference.com/w/cpp/language/value_initialization\" rel=\"nofollow\">value initialization</a> of the <a href=\"http://en.cppreference.com/w/cpp/language/value_initialization\" rel=\"nofollow\">aggregate</a> <code>A</code>. According to the standard, the braces can be omitted for aggregate initialization:</p>\n<p><strong>8.5.1 Aggregates[dcl.init.aggr]/12</strong></p>\n<blockquote>\n<p id=\"so_30249199_30249315_0\">Braces can be elided in an initializer-list as follows. If the\n  initializer-list begins with a left brace, then the succeeding\n  comma-separated list of initializer-clauses initializes the members of\n  a subaggregate; it is erroneous for there to be more\n  initializer-clauses than members. If, however, the initializer-list\n  for a sub- aggregate does not begin with a left brace, then only\n  enough initializer-clauses from the list are taken to initialize the\n  members of the subaggregate; any remaining initializer-clauses are\n  left to initialize the next member of the aggregate of which the\n  current subaggregate is a member.</p>\n<p id=\"so_30249199_30249315_1\">[Example:</p>\n<pre><code> float y[4][3] = {\n   { 1, 3, 5 },\n   { 2, 4, 6 },\n   { 3, 5, 7 }, }; \n</code></pre>\n<p id=\"so_30249199_30249315_2\">is a completely-braced initialization: 1, 3, and 5 initialize the first row of the array y[0], namely y[0][0],\n  y[0][1], and y[0][2]. Likewise the next two lines initialize y[1] and\n  y[2]. The initializer ends early and therefore y[3]'s elements are\n  initialized as if explicitly initialized with an expression of the\n  form float(), that is, are initialized with 0.0. In the following\n  example, braces in the initializer-list are elided; however the\n  initializer-list has the same effect as the completely-braced\n  initializer-list of the above example,</p>\n<pre><code> float y[4][3] = {\n   1, 3, 5, 2, 4, 6, 3, 5, 7 }; \n</code></pre>\n<p id=\"so_30249199_30249315_3\">The initializer for y begins with a left brace, but the one for y[0] does not, therefore three elements\n  from the list are used. Likewise the next three are taken successively\n  for y[1] and y[2]. \u2014 end example ]</p>\n</blockquote>\n<p>Next</p>\n<p><strong>8.5.1 Aggregates[dcl.init.aggr]/7</strong></p>\n<blockquote>\n<p id=\"so_30249199_30249315_4\">If there are fewer initializer-clauses in the list than there are\n  members in the aggregate, then each member not explicitly initialized\n  shall be initialized from its brace-or-equal-initializer or, if there\n  is no brace-or-equal- initializer, from an empty initializer list.</p>\n</blockquote>\n<p>In your case, this mean that the first <code>0</code> is assigned to <code>B[0]</code> and the second <code>0</code> is assigned to <code>B[1]</code>. According then to <strong>8.5.1/7</strong>, the rest of the elements are value-initialized.</p>\n<p>However, for clarity in this case, you should use <code>A C = {{0}, 0};</code>, or, better</p>\n<pre><code>A C{}; // or A C = {};\n</code></pre>\n<p>The only thing that worries me a bit is the g++ warning (<code>-Wextra</code>):</p>\n<blockquote>\n<p id=\"so_30249199_30249315_5\">warning: missing initializer for member 'main()::A::D'\n  [-Wmissing-field-initializers] A C {0,0};</p>\n</blockquote>\n<p>But according to my interpretation of the standard above, you should be OK and <code>D</code> should have been initialized. I even tested it with some placement <code>new</code>, and the result is as expected</p>\n<pre><code>#include &lt;iostream&gt;\n\nint main()\n{\n    struct A { int B[100]; int D;};\n    A memory{};\n    memory.D = 42; \n    std::cout &lt;&lt; memory.D &lt;&lt; std::endl;\n\n    // let's place something an A at the location of memory\n    A* foo = new (&amp;memory) A{0,0}; \n    // line below outputs 0, so D is erased; not the case if A* foo = new (&amp;memory) A; \n    std::cout &lt;&lt; memory.D &lt;&lt; std::endl; // outputs 0\n}\n</code></pre>\n", "LastEditorUserId": "815724", "LastActivityDate": "2015-05-15T02:09:53.377", "Score": "5", "CreationDate": "2015-05-14T23:49:21.280", "ParentId": "30249199", "CommentCount": "1", "OwnerUserId": "3093378", "LastEditDate": "2015-05-15T02:09:53.377"}, "30249199": {"ViewCount": "147", "Body": "<p>In this code, will all 100 items of <code>C.B</code> be initialized to zero?</p>\n<pre><code>struct A { int B[100]; int D; };\nA C = {0, 0};\n</code></pre>\n<p>It seems to work, but memory could have just been empty in advance.</p>\n", "Title": "Will {0, 0} initialize array in the struct?", "CreationDate": "2015-05-14T23:35:40.210", "LastActivityDate": "2015-05-15T02:09:53.377", "CommentCount": "10", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2015-05-15T00:03:16.240", "LastEditorUserId": "31667", "Id": "30249199", "Score": "10", "OwnerUserId": "1968972", "Tags": "<c++>", "AnswerCount": "1"}});