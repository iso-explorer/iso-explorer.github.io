post_cb({"12143877": {"Id": "12143877", "PostTypeId": "2", "Body": "<p>As the function prototype differs (one uses <code>ParentClass</code> and the other <code>ChildClass</code>) they are <em>not</em> the same functions. Instead the one with the <code>ChildClass</code> argument is overloading and not overriding the <code>Delete</code> function.</p>\n", "LastActivityDate": "2012-08-27T14:22:23.730", "CommentCount": "6", "CreationDate": "2012-08-27T14:22:23.730", "ParentId": "12143836", "Score": "1", "OwnerUserId": "440558"}, "bq_ids": {"n4140": {"so_12143836_12144590_1": {"length": 12, "quality": 1.0, "section_id": 7078}, "so_12143836_12144590_0": {"length": 25, "quality": 0.9259259259259259, "section_id": 7003}}, "n3337": {"so_12143836_12144590_1": {"length": 12, "quality": 1.0, "section_id": 6822}, "so_12143836_12144590_0": {"length": 25, "quality": 0.9259259259259259, "section_id": 6749}}, "n4659": {"so_12143836_12144590_1": {"length": 12, "quality": 1.0, "section_id": 8579}, "so_12143836_12144590_0": {"length": 25, "quality": 0.9259259259259259, "section_id": 8500}}}, "12144731": {"Id": "12144731", "PostTypeId": "2", "Body": "<p>Because any type that's accepted as an argument for the base-class function, must also be acceptable by an override of that function. This prevents an error such as:</p>\n<pre><code>struct BastardClass : ParentClass {} wrong;\nDelete(&amp;wrong);\n</code></pre>\n<p>which, if dispatched to the override that expects a <code>ChildClass</code>, would cause it to interpret the object as the wrong type.</p>\n<p>(This is known as <em>contravariance</em> - arguments to a function overridden by a <em>more</em> specific type must be <em>no more</em> specific than those being overridden. For similar reasons, return types must be <em>covariant</em> - those specified by a function overridden by a <em>more</em> specific type must be <em>no less</em> specific.)</p>\n", "LastActivityDate": "2012-08-27T15:12:45.267", "CommentCount": "0", "CreationDate": "2012-08-27T15:12:45.267", "ParentId": "12143836", "Score": "0", "OwnerUserId": "204847"}, "12143836": {"ViewCount": "214", "Body": "<p>Say if I have an interface with virtual methods, but one of the arguments are:</p>\n<pre><code>virtual void Delete(ParentClass *parentClass) = 0;\n</code></pre>\n<p>If I later implement this in child class</p>\n<pre><code>void Delete(ChildClass *childClass)\n{\n};\n</code></pre>\n<p>...why doesn't this work as an implementation? </p>\n", "AcceptedAnswerId": "12143877", "Title": "Implementation of inherited class' method (param=pointer to parent) in child class (param=pointer to child)", "CreationDate": "2012-08-27T14:20:28.240", "Id": "12143836", "CommentCount": "1", "PostTypeId": "1", "LastActivityDate": "2012-08-27T15:12:45.267", "Score": "0", "OwnerUserId": "1364750", "Tags": "<c++><inheritance><interface><parameters><implementation>", "AnswerCount": "3"}, "12144590": {"Id": "12144590", "PostTypeId": "2", "Body": "<p><strong>C++03 Standard: 10.3/2</strong> </p>\n<blockquote>\n<p id=\"so_12143836_12144590_0\">If a virtual member function <code>vf</code> is declared in a class <code>Base</code> and in a class <code>Derived</code>, derived directly or indirectly from <code>Base</code>, a member function <code>vf</code> <strong>with the same name and same parameter list as <code>Base::vf</code> is declared</strong>, then <code>Derived::vf</code> is also virtual an it overrides <code>Base::vf</code>.</p>\n</blockquote>\n<p>Note the text in bold.<br>\nAn derived class function overides a Base class function only and only if it has the same signature as the Base class function with the exception of <strong><em><a href=\"http://msdn.microsoft.com/en-us/library/8z9feath%28v=vs.80%29.aspx\" rel=\"nofollow\">Co-Variant return types</a></em></strong>. Since your function <code>Delete()</code> does not have the same signature in Base Class and Derived class, the derived class function is not overidding the Base class function but what you get is merely <strong><em><a href=\"http://www.parashift.com/c++-faq/hiding-rule.html\" rel=\"nofollow\">Function Hiding</a></em></strong>.</br></p>\n<p><strong>C++03 Standard: 3.3.7/1:</strong></p>\n<blockquote>\n<p id=\"so_12143836_12144590_1\">A name can be hidden by an explicit declaration of that same name in a nested declarative region or derived class.</p>\n</blockquote>\n", "LastActivityDate": "2012-08-27T15:04:02.520", "CommentCount": "0", "CreationDate": "2012-08-27T15:04:02.520", "ParentId": "12143836", "Score": "0", "OwnerUserId": "452307"}});