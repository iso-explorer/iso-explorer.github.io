post_cb({"bq_ids": {"n4140": {"so_47432221_47437965_0": {"length": 14, "quality": 1.0, "section_id": 175}}, "n3337": {"so_47432221_47437965_0": {"length": 14, "quality": 1.0, "section_id": 169}}, "n4659": {"so_47432221_47437965_0": {"length": 12, "quality": 0.8571428571428571, "section_id": 180}}}, "47432221": {"ViewCount": "176", "Body": "<p>The following code <a href=\"https://godbolt.org/g/XeaEpr\" rel=\"nofollow noreferrer\">compiles successfully</a> in <em>g++ 7.2.0</em> (compilation flags are <code>-std=c++14 -Wall -Wextra -Werror -pedantic-errors</code>), but it fails to compile in <em>clang++ 5.0.0</em> (with the same flags, <code>-std=c++14 -Wall -Wextra -Werror -pedantic-errors</code>) and <em>vc++ 15.4</em> (compilation flags are <code>/EHsc /Za /std:c++14 /permissive-</code>):</p>\n<pre><code>template &lt;template &lt;typename...&gt; class Functor, typename... FixedArguments&gt;\nstruct apply\n{\n    template &lt;typename... FreeArguments&gt;\n    using type = Functor&lt;FixedArguments..., FreeArguments...&gt;;\n};\n\ntemplate &lt;typename, typename&gt;\nstruct Bar{};\n\ntemplate &lt;template &lt;typename...&gt; class&gt;\nstruct Foo{};\n\nint main()\n{\n    (void)Foo&lt;apply&lt;Bar, int, char&gt;::type&gt;{};\n}\n</code></pre>\n<p>Which compiler behavior is standard compliant? How such template <code>apply</code> may be changed to be compiled on <em>clang++</em>, too?</p>\n<p><em>clang++</em> error messages:</p>\n<blockquote id=\"so_47432221_47432221_0\">\n<pre><code>5 : &lt;source&gt;:5:15: error: too many template arguments for class template 'Bar'\n        using type = Functor&lt;FixedArguments..., FreeArguments...&gt;;\n                     ^                          ~~~~~~~~~~~~~~~~~\n16 : &lt;source&gt;:16:15: note: in instantiation of template class 'apply&lt;Bar, int, char&gt;' requested here\n    (void)Foo&lt;apply&lt;Bar, int, char&gt;::type&gt;{};\n              ^\n9 : &lt;source&gt;:9:8: note: template is declared here\nstruct Bar{};\n</code></pre>\n</blockquote>\n<p><em>vc++</em> error messages:</p>\n<blockquote id=\"so_47432221_47432221_1\">\n<pre><code>5 : &lt;source&gt;(5): error C2977: 'Bar': too many template arguments\n9 : &lt;source&gt;(9): note: see declaration of 'Bar'\n16 : &lt;source&gt;(16): note: see reference to class template instantiation 'apply&lt;Bar,int,char&gt;' being compiled\n</code></pre>\n</blockquote>\n", "AcceptedAnswerId": "47437965", "Title": "`apply` template compiles in g++ but not in clang++ and vc++", "CreationDate": "2017-11-22T10:24:49.730", "Id": "47432221", "CommentCount": "8", "LastEditDate": "2017-11-22T10:33:40.827", "PostTypeId": "1", "LastEditorUserId": "3043539", "LastActivityDate": "2017-11-29T20:07:00.447", "Score": "2", "OwnerUserId": "3043539", "Tags": "<c++><templates><variadic-templates><template-meta-programming><partial-application>", "AnswerCount": "2"}, "47437965": {"Id": "47437965", "PostTypeId": "2", "Body": "<p>As <a href=\"https://stackoverflow.com/users/2756719/t-c\"><strong>@T.C.</strong></a> <a href=\"https://stackoverflow.com/questions/47432221/apply-template-compiles-in-g-but-not-in-clang-and-vc#comment81821071_47432221\">noted in the comments to the question</a> such code is ill-formed (no diagnostic required).</p>\n<p><strong>C++14 standard, section \"Name resolution\" [temp.res], paragraph 8:</strong></p>\n<blockquote>\n<p id=\"so_47432221_47437965_0\">If every valid specialization of a variadic template requires an empty\n  template parameter pack, the template is ill-formed, no diagnostic\n  required.</p>\n</blockquote>\n<p><strong>Latest drafts of the C++ standard, section \"Name resolution\" [temp.res], paragraph 8.3:</strong></p>\n<blockquote>\n<p id=\"so_47432221_47437965_1\">...The program is ill-formed, no diagnostic required, if:  </p>\n<ul>\n<li>...</li>\n<li>every valid specialization of a variadic template requires an empty template parameter pack...</li>\n</ul>\n</blockquote>\n<p>Additional information: <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_active.html#2067\" rel=\"nofollow noreferrer\"><strong>Core Issue 2067</strong></a>.</p>\n<p>In accordance with the standard requirements such simple workaround can be written:</p>\n<pre><code>template &lt;template &lt;typename...&gt; class Functor, typename... Arguments&gt;\nstruct invoke\n{\n    using type = Functor&lt;Arguments...&gt;;\n};\n\ntemplate &lt;template &lt;typename...&gt; class Functor, typename... FixedArguments&gt;\nstruct apply\n{\n    template &lt;typename... FreeArguments&gt;\n    using type = typename invoke&lt;Functor, FixedArguments..., FreeArguments...&gt;::type;\n};\n</code></pre>\n<p><a href=\"https://godbolt.org/g/xBzjW6\" rel=\"nofollow noreferrer\"><kbd>Live demo</kbd></a></p>\n<p><strong>Update:</strong> As <a href=\"https://stackoverflow.com/users/893819/odinthenerd\"><strong>@odinthenerd</strong></a> <a href=\"https://stackoverflow.com/questions/47432221/apply-template-compiles-in-g-but-not-in-clang-and-vc#comment81960296_47437965\">noted in the comments</a> this workaround uses an additional type which leads to a slower compilation of the program.</p>\n", "LastEditorUserId": "3043539", "LastActivityDate": "2017-11-29T20:07:00.447", "Score": "1", "CreationDate": "2017-11-22T15:07:27.900", "ParentId": "47432221", "CommentCount": "4", "OwnerUserId": "3043539", "LastEditDate": "2017-11-29T20:07:00.447"}, "47433821": {"Id": "47433821", "PostTypeId": "2", "Body": "<p><strong>note:</strong> after looking at this, this answer would be correct if Bar were an alias template rather than a class template. The workaround works but for other reasons. See Constructors answer for the correct answer of the OP.</p>\n<p>This problem is known as the 'alias flaw' and we had a lot of challenges with it in the implementation of kvasir::mpl. The problem is that Bar takes exactly two parameters but <code>sizeof...(FixedArguments)+sizeof...(FreeArguments)</code> could add up to something besides 2. </p>\n<p>The compiler can either try and track the potential arity through all the alias calls and only issue errors when the user actually passes something besides 2 or it can \"eagerly\" give an error simply by proving that an error could occur. </p>\n<p>The work around I have found effective in dealing with this is to make the alias call dependant on the size of the input <a href=\"https://godbolt.org/g/PT4uaE\" rel=\"nofollow noreferrer\">https://godbolt.org/g/PT4uaE</a></p>\n<pre><code>template&lt;bool&gt;\nstruct depends{\n    template&lt;template&lt;typename...&gt; class F, typename...Ts&gt;\n    using f = F&lt;Ts...&gt;;\n};\n\ntemplate&lt;&gt;\nstruct depends&lt;false&gt;{\n    template&lt;template&lt;typename...&gt; class F, typename...Ts&gt;\n    using f = void;\n};\n\ntemplate &lt;template &lt;typename...&gt; class Functor, typename... FixedArguments&gt;\nstruct apply\n{\n    template &lt;typename... FreeArguments&gt;\n    using type = typename depends&lt;(sizeof...(FixedArguments)+sizeof...(FreeArguments) == 2)&gt;::template f&lt;Functor, FixedArguments..., FreeArguments...&gt;;\n};\n\ntemplate &lt;typename, typename&gt;\nstruct Bar{};\n\ntemplate &lt;template &lt;typename...&gt; class&gt;\nstruct Foo{};\n\nint main()\n{\n    (void)Foo&lt;apply&lt;Bar, int, char&gt;::type&gt;{};\n}\n</code></pre>\n<p>It should be noted that constraining to exactly two is not needed on all compiler I have tested, one could just as easilty constrain to be <code>sizeof...(FixedArguments)+sizeof...(FreeArguments) != 100000</code> and the compiler will still take it only issuing an error if things actually don'T work out on a concrete call.</p>\n<p>I would actually like to improve my mental model of how this works internally in order to come up with faster work arounds, in kvasir::mpl we are currently experimenting with tracking the arity manually behind the scenes in order to eliminate the dependant calls which do slow things down a little.</p>\n", "LastEditorUserId": "893819", "LastActivityDate": "2017-11-27T10:38:24.697", "Score": "5", "CreationDate": "2017-11-22T11:41:48.637", "ParentId": "47432221", "CommentCount": "1", "OwnerUserId": "893819", "LastEditDate": "2017-11-27T10:38:24.697"}});