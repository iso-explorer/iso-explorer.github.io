post_cb({"bq_ids": {"n4140": {"so_25541010_25541090_2": {"length": 4, "quality": 1.0, "section_id": 447}, "so_25541010_25541090_0": {"length": 11, "quality": 1.0, "section_id": 447}, "so_25541010_25541010_0": {"length": 7, "quality": 1.0, "section_id": 7114}, "so_25541010_25541010_1": {"length": 8, "quality": 1.0, "section_id": 7114}, "so_25541010_25541010_4": {"length": 35, "quality": 1.0, "section_id": 447}, "so_25541010_25541197_1": {"length": 8, "quality": 1.0, "section_id": 7114}, "so_25541010_25541010_3": {"length": 5, "quality": 1.0, "section_id": 7114}, "so_25541010_25541090_3": {"length": 6, "quality": 0.8571428571428571, "section_id": 447}}, "n3337": {"so_25541010_25541010_4": {"length": 35, "quality": 1.0, "section_id": 438}, "so_25541010_25541090_0": {"length": 11, "quality": 1.0, "section_id": 438}, "so_25541010_25541010_0": {"length": 4, "quality": 0.5714285714285714, "section_id": 574}, "so_25541010_25541010_1": {"length": 8, "quality": 1.0, "section_id": 6858}, "so_25541010_25541090_2": {"length": 4, "quality": 1.0, "section_id": 438}, "so_25541010_25541197_1": {"length": 8, "quality": 1.0, "section_id": 6858}, "so_25541010_25541010_3": {"length": 5, "quality": 1.0, "section_id": 6858}, "so_25541010_25541090_3": {"length": 6, "quality": 0.8571428571428571, "section_id": 438}}, "n4659": {"so_25541010_25541010_4": {"length": 35, "quality": 1.0, "section_id": 469}, "so_25541010_25541090_0": {"length": 11, "quality": 1.0, "section_id": 469}, "so_25541010_25541010_0": {"length": 7, "quality": 1.0, "section_id": 8615}, "so_25541010_25541010_1": {"length": 8, "quality": 1.0, "section_id": 8615}, "so_25541010_25541090_2": {"length": 4, "quality": 1.0, "section_id": 469}, "so_25541010_25541197_1": {"length": 8, "quality": 1.0, "section_id": 8615}, "so_25541010_25541010_3": {"length": 5, "quality": 1.0, "section_id": 8615}, "so_25541010_25541090_3": {"length": 6, "quality": 0.8571428571428571, "section_id": 469}}}, "25541010": {"ViewCount": "83", "Body": "<p>We can call a constructor using qualified-name, although the constructor doesn't have a name. Indeed 3.4.3.2/2:</p>\n<blockquote>\n<p id=\"so_25541010_25541010_0\">In a lookup in which function names are not ignored and the\n  nested-name-specifier nominates a class C: </p>\n<p id=\"so_25541010_25541010_1\">\u2014 if the name specified after the nested-name-specifier, when looked up in C, is the\n  injected-class-name of C (Clause 9), or </p>\n<p id=\"so_25541010_25541010_2\">[...] </p>\n<p id=\"so_25541010_25541010_3\">the name is instead considered to name the constructor of class C.</p>\n</blockquote>\n<p>Consider the following example:</p>\n<pre><code>#include &lt;iostream&gt;\n\nusing std::cout;\nusing std::endl;\n\nstruct A\n{\n    virtual void foo()\n    {\n        cout &lt;&lt; \"A\" &lt;&lt; endl;\n    }\n\n    A(){ }\n};\n\nstruct B : A\n{\n    virtual void foo()\n    {\n        cout &lt;&lt; \"B\" &lt;&lt; endl;\n    }\n\n    B()\n    {\n        foo();\n    }  \n};\n\nstruct C : B\n{\n    virtual void foo()\n    {\n        cout &lt;&lt; \"C\" &lt;&lt; endl;\n    }\n\n    C() : B(){ }      \n};\n\nC c;\n\nint main()\n{\n    c.foo();\n    C::C(); // Prints B\n}\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/cfdfed40a5cc00be\" rel=\"nofollow\">demo</a></p>\n<p>The line <code>C::C()</code> prints B. But it's unclear. Section 12.7/4 says:</p>\n<blockquote>\n<p id=\"so_25541010_25541010_4\">When a virtual function is called directly or indirectly from a\n  constructor or from a destructor, including during the construction or\n  destruction of the class\u2019s non-static data members, and the <strong>object</strong> <strong>to</strong>\n<strong>which the call applies</strong> is the object (call it x) <strong>under construction or</strong>\n<strong>destruction</strong>, the function called is the final overrider in the\n  constructor\u2019s or destructor\u2019s class and not one overriding it in a\n  more-derived class</p>\n</blockquote>\n<p>In an explicit constructor call <code>c</code> has already fully-contructed. So the rule I cited cannot be used to explain such behavior. Is it UB at all? Could you explain it?</p>\n", "AcceptedAnswerId": "25541197", "Title": "Explicitly constructor and virtual function call during the object lifetime", "CreationDate": "2014-08-28T04:58:26.123", "Id": "25541010", "CommentCount": "1", "PostTypeId": "1", "OwnerDisplayName": "user2953119", "LastActivityDate": "2014-08-28T08:13:02.067", "Score": "0", "Tags": "<c++><constructor>", "AnswerCount": "2"}, "25541090": {"Id": "25541090", "PostTypeId": "2", "Body": "<p>The line...</p>\n<pre><code>C::C();\n</code></pre>\n<p>is outputting...</p>\n<pre><code>B\n</code></pre>\n<p>because <code>foo()</code> is being called from within <code>B</code>'s constructor so it'll use <code>B</code>'s version of <code>foo()</code>.</p>\n<p>Any time <code>C</code>'s constructor is called, \n<code>C::C()</code> calls <code>A</code>'s constructor which calls <code>B</code>'s constructor in which <code>foo()</code> is called so <code>B</code>'s version of <code>foo()</code> is used, and then <code>C</code>'s constructor body (which you left empty) is finally called.</p>\n<hr>\n<p>Let's ignore the fact that calling <code>C::C()</code> from <code>main()</code> like that doesn't conform to C++ standards.  You seem to be misinterpreting part of Section 12.7/4:</p>\n<blockquote>\n<p id=\"so_25541010_25541090_0\">...the function called is the final overrider in the constructor\u2019s or\n  destructor\u2019s class and not one overriding it in a more-derived class</p>\n</blockquote>\n<p>The call to foo is in <code>B</code> so the </p>\n<blockquote>\n<p id=\"so_25541010_25541090_1\">...constructor's class...</p>\n</blockquote>\n<p>is <code>B</code> and therefore </p>\n<blockquote>\n<p id=\"so_25541010_25541090_2\">...not one overriding it in a more-derived class.</p>\n</blockquote>\n<p>(which would be <code>C</code>).</p>\n<p>You also mention \"In an explicit constructor call <code>C</code> has already fully-contructed.\" The line...</p>\n<pre><code>C c; \n</code></pre>\n<p>will not change the behavior mentioned in Section 12.7/4.  <code>foo()</code> is still called <code>B</code>'s constructor and therefore</p>\n<blockquote>\n<p id=\"so_25541010_25541090_3\">...the function called is the final overrider in the construtor's or destructor's class.</p>\n</blockquote>\n</hr>", "LastEditorUserId": "1159604", "LastActivityDate": "2014-08-28T08:13:02.067", "Score": "0", "CreationDate": "2014-08-28T05:06:48.783", "ParentId": "25541010", "CommentCount": "0", "OwnerUserId": "1159604", "LastEditDate": "2014-08-28T08:13:02.067"}, "25541197": {"Id": "25541197", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_25541010_25541197_0\">We can call a constructor using qualified-name, although the constructor doesn't have a name.</p>\n</blockquote>\n<p>Your premise is completely wrong. In the <em>very same</em> paragraph you cited (\u00a73.4.3.1 [class.qual]/p2):</p>\n<blockquote>\n<p id=\"so_25541010_25541197_1\">Such a constructor name shall be used only in the <em>declarator-id</em> of a\n  declaration that names a constructor or in a <em>using-declaration</em>.</p>\n</blockquote>\n<p>Is <code>C::C();</code> a declaration that names a constructor? No. Is it a <em>using-declaration</em>? Obviously not. </p>\n<p>It's ill-formed. Clang seems to consider it to name the type instead, for some reason - probably a bug (its handling of <em>injected-class-names</em> is also buggy in other respects).</p>\n<hr>\n<p>I also have no idea how you came to the conclusion that the behavior of <code>C::C();</code> - which, incidentally, only makes any sense if you consider <code>C::C</code> to name the type - could possibly be affected by the state of <code>c</code>, which appears nowhere in the expression nor in any of the relevant functions.</p>\n<p>A hypothetical explicit constructor call on an object would have to look like <code>c.C::C();</code>, because the constructor is a <em>non-static</em> member function. And it makes no sense whatsoever to permit you to call a constructor on an already-constructed object - what does that even mean?</p>\n</hr>", "LastEditorUserId": "2756719", "LastActivityDate": "2014-08-28T05:26:04.963", "Score": "1", "CreationDate": "2014-08-28T05:17:34.600", "ParentId": "25541010", "CommentCount": "3", "OwnerUserId": "2756719", "LastEditDate": "2014-08-28T05:26:04.963"}});