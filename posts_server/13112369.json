post_cb({"13112523": {"ParentId": "13112369", "CommentCount": "4", "Body": "<p>For a string literal it is reasonably conceivable that a null character is embedded in the sequence of the string, e.g., <code>\"a\\0b\"</code>. To allow the implementation to consume the entire string literal, even if there is an embedded null character, it needs to know the length of the literal. The other forms for user-defined literals cannot contain embedded zero characters.</p>\n", "OwnerUserId": "1120273", "PostTypeId": "2", "Id": "13112523", "Score": "8", "CreationDate": "2012-10-28T20:06:05.993", "LastActivityDate": "2012-10-28T20:06:05.993"}, "13112369": {"CommentCount": "3", "ViewCount": "387", "PostTypeId": "1", "LastEditorUserId": "636019", "CreationDate": "2012-10-28T19:49:37.197", "LastActivityDate": "2012-10-28T20:06:25.777", "Title": "User-Defined String Literals Vs. Other User-Defined Literals", "AcceptedAnswerId": "13112523", "LastEditDate": "2012-10-28T20:02:39.123", "Id": "13112369", "Score": "6", "Body": "<p>Let's consider the following quote from the C++11 standard (<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3376.pdf\" rel=\"nofollow\">the N3376 draft</a>, to be precise):</p>\n<blockquote>\n<p id=\"so_13112369_13112369_0\">(2.14.8.5) </p>\n<p id=\"so_13112369_13112369_1\">If L is a user-de\ufb01ned-string-literal, let str be the literal without\n  its ud-su\ufb03x and let len be the number of code units in str (i.e., its\n  length excluding the terminating null character). The literal L is\n  treated as a call of the form </p>\n<pre><code>     operator \"\" X (str , len )\n</code></pre>\n</blockquote>\n<p>Whereas for all the other types of user-defined literals (floating-point, integer, character) the length is never passed along even if the literal itself is passed as a string. For example:</p>\n<pre><code>42_zzz; // calls operator \"\" _zzz(\"42\") and not operator \"\" _zzz(\"42\", 2)\n</code></pre>\n<p>Why is there this distinction between string and non-string user-defined literals? Or should I say, why does the implementation pass len for UD string literals? The length, just as in case of other literals, could be deduced by null-termination. What am I missing?</p>\n", "Tags": "<c++><c++11><user-defined-literals>", "OwnerUserId": "469935", "AnswerCount": "2"}, "13112526": {"ParentId": "13112369", "CommentCount": "0", "Body": "<p>Strings are always null terminated in C/C++ but it never mean that they can't contain embedded <code>\\0</code> character, you may have <code>\"1234\\05678\"</code> and while this string is null terminated, it contain an extra '\\0` in it.</p>\n", "OwnerUserId": "1425813", "PostTypeId": "2", "Id": "13112526", "Score": "6", "CreationDate": "2012-10-28T20:06:25.777", "LastActivityDate": "2012-10-28T20:06:25.777"}, "bq_ids": {"n4140": {"so_13112369_13112369_1": {"section_id": 5371, "quality": 0.7391304347826086, "length": 17}}, "n3337": {"so_13112369_13112369_1": {"section_id": 5167, "quality": 0.7391304347826086, "length": 17}}, "n4659": {"so_13112369_13112369_1": {"section_id": 6796, "quality": 0.7391304347826086, "length": 17}}}});