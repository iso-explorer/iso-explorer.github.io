post_cb({"bq_ids": {"n4140": {"so_31792101_31792573_0": {"length": 90, "quality": 0.9278350515463918, "section_id": 5559}}, "n3337": {"so_31792101_31792573_0": {"length": 90, "quality": 0.9278350515463918, "section_id": 5341}}, "n4659": {"so_31792101_31792573_0": {"length": 90, "quality": 0.9278350515463918, "section_id": 7006}}}, "31792573": {"Id": "31792573", "PostTypeId": "2", "Body": "<p><strong>No.</strong></p>\n<p>Both <code>d</code> and <code>e</code> are \"singular iterators\" because they point neither to an element in a sequence, or to the \"one-past-the-end\" pseudo-element.</p>\n<p>And you can barely do anything with singular iterators:</p>\n<blockquote>\n<p id=\"so_31792101_31792573_0\"><code>[C++11: 24.2.1/5]</code>: Just as a regular pointer to an array guarantees that there is a pointer value pointing past the last element of the array, so for any iterator type <strong>there is an iterator value that points past the last element of a corresponding sequence</strong>. These values are called <em>past-the-end</em> values. Values of an iterator <code>i</code> for which the expression <code>*i</code> is defined are called <em>dereferenceable</em>. The library never assumes that past-the-end values are dereferenceable. <strong>Iterators can also have singular values that are not associated with any sequence.</strong> <em>[ Example:</em> After the declaration of an uninitialized pointer <code>x</code> (as with <code>int* x;</code>), <code>x</code> must always be assumed to have a singular value of a pointer. <em>\u2014end example ]</em> <strong>Results of most expressions are undefined for singular values; the only exceptions are destroying an iterator that holds a singular value, the assignment of a non-singular value to an iterator that holds a singular value, and, for iterators that satisfy the <code>DefaultConstructible</code> requirements, using a value-initialized iterator as the source of a copy or move operation.</strong></p>\n</blockquote>\n<p>Note that, in particular, you cannot perform arbitrary comparisons on them.</p>\n<p>I was pretty sure that even evaluating <code>a.begin() - 1</code> or <code>a.end() + 1</code> were UB, but I can't find any evidence of that right now.</p>\n", "LastActivityDate": "2015-08-03T16:43:10.080", "CommentCount": "7", "CreationDate": "2015-08-03T16:43:10.080", "ParentId": "31792101", "Score": "3", "OwnerUserId": "560648"}, "31792101": {"ViewCount": "60", "Body": "<p>I tried an experiment:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nint main(void) {\n  std::vector&lt;int&gt; a{1, 2, 3};\n  std::vector&lt;int&gt;::iterator b = a.begin();\n  std::vector&lt;int&gt;::iterator c = a.end();\n  std::vector&lt;int&gt;::iterator d = b - 1;\n  std::vector&lt;int&gt;::iterator e = c + 1;\n  std::cout &lt;&lt; true &lt;&lt; std::endl;\n  std::cout &lt;&lt; (d &lt; b) &lt;&lt; std::endl;\n  std::cout &lt;&lt; (e &gt; c) &lt;&lt; std::endl;\n  return 0;\n}\n</code></pre>\n<p>It outputs:</p>\n<pre><code>1\n1\n1\n</code></pre>\n<p>But someone told me that it is behavior undefined for deque, so what do you think? Thank you!</p>\n", "AcceptedAnswerId": "31792573", "Title": "In the computation of iterators, if I use an iterator which is before begin() or after end() as a operand, is its behavior defined?", "CreationDate": "2015-08-03T16:15:52.853", "Id": "31792101", "CommentCount": "9", "LastEditDate": "2015-08-03T16:40:12.887", "PostTypeId": "1", "LastEditorUserId": "560648", "LastActivityDate": "2015-08-03T16:43:27.117", "Score": "1", "OwnerUserId": "1546088", "Tags": "<c++>", "AnswerCount": "3"}, "31792179": {"Id": "31792179", "PostTypeId": "2", "Body": "<p>The behaviour on using either <code>d</code> or <code>e</code> is undefined, as you suspected.</p>\n<p>You are allowed to <em>test</em> <code>c</code> for equality with <code>a.end()</code>, but note that the behaviour on any dereferencing it is undefined.</p>\n", "LastEditorUserId": "2380830", "LastActivityDate": "2015-08-03T16:43:27.117", "Score": "0", "CreationDate": "2015-08-03T16:20:13.940", "ParentId": "31792101", "CommentCount": "3", "OwnerUserId": "2380830", "LastEditDate": "2015-08-03T16:43:27.117"}, "31792190": {"Id": "31792190", "PostTypeId": "2", "Body": "<p>Not just for <code>deque</code> but this is undefined for any container (only random access containers will actually allow this to compile though).</p>\n", "LastActivityDate": "2015-08-03T16:20:53.727", "CommentCount": "0", "CreationDate": "2015-08-03T16:20:53.727", "ParentId": "31792101", "Score": "2", "OwnerUserId": "251738"}});