post_cb({"14242552": {"Id": "14242552", "PostTypeId": "2", "Body": "<p>The backslash before the newline says the string is continued on the next line. There are many whitespace chars on the front of the next line.</p>\n<p>Try:</p>\n<pre><code>std::cout &lt;&lt; \"str \" \n                \"str \\n\";\n</code></pre>\n", "LastActivityDate": "2013-01-09T17:07:01.130", "CommentCount": "7", "CreationDate": "2013-01-09T17:07:01.130", "ParentId": "14242504", "Score": "3", "OwnerUserId": "1932588"}, "14242504": {"ViewCount": "180", "Body": "<p>Why is the output of the following program:</p>\n<pre><code>str                 str\n</code></pre>\n<p>and not this:</p>\n<pre><code>str str\n</code></pre>\n<p>This is the program:</p>\n<pre><code>#include &lt;iostream&gt;\n\nint main()\n{\n   std::cout &lt;&lt; \"str \\\n                str \\n\";\n}\n</code></pre>\n<p>I tried both gcc 4.7.2 and MSVC-11.0.</p>\n", "Title": "backslash character in string literals", "CreationDate": "2013-01-09T17:04:47.820", "LastActivityDate": "2013-01-09T17:31:15.977", "CommentCount": "2", "LastEditDate": "2013-01-09T17:07:53.590", "PostTypeId": "1", "LastEditorUserId": "912144", "Id": "14242504", "Score": "1", "OwnerUserId": "1608835", "Tags": "<c++><c>", "AnswerCount": "3"}, "14242532": {"Id": "14242532", "PostTypeId": "2", "Body": "<p>The backslash is replaced by the preprocessor, with the following rule: each sequence of <code>\\</code> followed by new-line character is deleted.</p>\n<blockquote>\n<p id=\"so_14242504_14242532_0\"><strong>C11 (n1570), \u00a7 5.1.1.2 Translation phases</strong><br>\n  Each instance of a backslash character (<code>\\</code>) immediately followed by a new-line\n  character is deleted, splicing physical source lines to form logical source lines.</br></p>\n</blockquote>\n<p>A common solution is to use adjacent string litterals concatenation.</p>\n<pre><code>std::cout &lt;&lt; \"str\"\n             \"str\\n\";\n</code></pre>\n<blockquote>\n<p id=\"so_14242504_14242532_1\"><strong>C11 (n1570), \u00a7 5.1.1.2 Translation phases</strong><br>\n  Adjacent string literal tokens are concatenated.</br></p>\n</blockquote>\n", "LastEditorUserId": "1126268", "LastActivityDate": "2013-01-09T17:31:15.977", "Score": "4", "CreationDate": "2013-01-09T17:06:15.010", "ParentId": "14242504", "CommentCount": "2", "LastEditDate": "2013-01-09T17:31:15.977", "OwnerUserId": "1126268"}, "bq_ids": {"n4140": {"so_14242504_14242532_1": {"length": 6, "quality": 0.6, "section_id": 5313}, "so_14242504_14242526_0": {"length": 17, "quality": 1.0, "section_id": 5313}, "so_14242504_14242532_0": {"length": 18, "quality": 0.8181818181818182, "section_id": 5313}}, "n3337": {"so_14242504_14242532_1": {"length": 6, "quality": 0.6, "section_id": 5110}, "so_14242504_14242526_0": {"length": 17, "quality": 1.0, "section_id": 5110}, "so_14242504_14242532_0": {"length": 18, "quality": 0.8181818181818182, "section_id": 5110}}, "n4659": {"so_14242504_14242532_1": {"length": 6, "quality": 0.6, "section_id": 6737}, "so_14242504_14242526_0": {"length": 17, "quality": 1.0, "section_id": 6737}, "so_14242504_14242532_0": {"length": 18, "quality": 0.8181818181818182, "section_id": 6737}}}, "14242526": {"Id": "14242526", "PostTypeId": "2", "Body": "<p>Because <code>\\</code> before a newline denotes line-continuation.<sup>*</sup>  So your two lines are literally spliced together, including all the whitespace.</p>\n<p>You could try this instead:</p>\n<pre><code>std::cout &lt;&lt; \"str \"\n                \"str \\n\";\n</code></pre>\n<p>because adjacent string literals are concatenated.</p>\n<p><hr>\n<sub>* From C99, section 5.1.1.2:</sub></hr></p>\n<blockquote>\n<p id=\"so_14242504_14242526_0\">Each instance of a backslash character (<code>\\</code>) immediately followed by a new-line\n  character is deleted, splicing physical source lines to form logical source lines.\n  </p></blockquote>\n", "LastEditorUserId": "129570", "LastActivityDate": "2013-01-09T17:11:21.177", "Score": "9", "CreationDate": "2013-01-09T17:05:56.593", "ParentId": "14242504", "CommentCount": "1", "LastEditDate": "2013-01-09T17:11:21.177", "OwnerUserId": "129570"}});