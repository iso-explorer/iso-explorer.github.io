post_cb({"bq_ids": {"n4140": {"so_13199551_13199688_0": {"length": 11, "quality": 0.9166666666666666, "section_id": 6089}, "so_13199551_13199801_2": {"length": 36, "quality": 1.0, "section_id": 6090}, "so_13199551_13199801_1": {"length": 15, "quality": 0.8823529411764706, "section_id": 6089}}, "n3337": {"so_13199551_13199688_0": {"length": 12, "quality": 1.0, "section_id": 5857}, "so_13199551_13199801_2": {"length": 36, "quality": 1.0, "section_id": 5858}, "so_13199551_13199801_1": {"length": 16, "quality": 0.9411764705882353, "section_id": 5857}}, "n4659": {"so_13199551_13199688_0": {"length": 11, "quality": 0.9166666666666666, "section_id": 7585}, "so_13199551_13199801_2": {"length": 36, "quality": 1.0, "section_id": 7586}, "so_13199551_13199801_1": {"length": 15, "quality": 0.8823529411764706, "section_id": 7585}}}, "13199801": {"Id": "13199801", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_13199551_13199801_0\">Does the Standard enforce that the memory <em>must</em> come from operator new- class-specific or global?</p>\n</blockquote>\n<p>Yes, it does.</p>\n<p><code>\u00a75.3.4 [expr.new]</code>:</p>\n<blockquote>\n<p id=\"so_13199551_13199801_1\">p8 A <em>new-expression</em> obtains storage for the object by calling an <em>allocation function</em> (3.7.4.1). [...] If the allocated type is a non-array type, <strong>the allocation function\u2019s name is <code>operator new</code></strong> [...].</p>\n<p id=\"so_13199551_13199801_2\">p9 If the <em>new-expression</em> begins with a unary <code>::</code> operator, the allocation function\u2019s name is looked up in the  global scope. Otherwise, if the allocated type is a class type <code>T</code> or array thereof, the allocation function\u2019s name is looked up in the scope of <code>T</code>. If this lookup fails to find the name, or if the allocated type is not a class type, the allocation function\u2019s name is looked up in the global scope.</p>\n</blockquote>\n", "LastActivityDate": "2012-11-02T16:57:39.383", "CommentCount": "0", "CreationDate": "2012-11-02T16:57:39.383", "ParentId": "13199551", "Score": "4", "OwnerUserId": "500104"}, "13199688": {"Id": "13199688", "PostTypeId": "2", "Body": "<p>It is not guaranteed to be <code>::operator new</code>, as the memory can come from a class specific <code>operator new</code> instead, but if no such class-specific version exists, then the global version will be used. The relevant part of the standard is <code>[expr.new]/8</code>:</p>\n<blockquote>\n<p id=\"so_13199551_13199688_0\">A new-expression obtains storage for the object by calling an allocation function. ... the allocation function\u2019s name is operator new ...</p>\n</blockquote>\n", "LastActivityDate": "2012-11-02T16:50:45.960", "CommentCount": "3", "CreationDate": "2012-11-02T16:50:45.960", "ParentId": "13199551", "Score": "4", "OwnerUserId": "485561"}, "13199551": {"ViewCount": "166", "Body": "<p>When considering something along the lines of</p>\n<pre><code>auto x = new T;\n</code></pre>\n<p>Does the Standard enforce that the memory <em>must</em> come from <code>operator new</code>- class-specific or global? i.e., there is no way a conforming implementation, given a lack of a class-specific <code>operator new</code>, could get the memory from anywhere except the global <code>operator new</code>?</p>\n", "AcceptedAnswerId": "13199784", "Title": "Does memory for new have to come from operator new?", "CreationDate": "2012-11-02T16:42:55.263", "Id": "13199551", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2012-11-02T16:53:24.790", "LastEditorUserId": "298661", "LastActivityDate": "2012-11-02T16:57:39.383", "Score": "5", "OwnerUserId": "298661", "Tags": "<c++><c++11>", "AnswerCount": "3"}, "13199784": {"Id": "13199784", "PostTypeId": "2", "Body": "<p>I think you have it the wrong way round.</p>\n<p>The expression <code>new T</code> always consists of two steps:</p>\n<ol>\n<li><p>A suitable <code>operator new</code> is searched for. If one exists in the class <code>T</code>, that one is taken, otherwise the global one is taken. The global one always exists, as this is mandated by the standard (so you can never \"define\" it (since it is already defined), but you can <em>replace</em> it).</p>\n<p>You can say <code>::new T</code> to always pick the global <code>operator new</code> unconditionally.</p></li>\n<li><p>Once the allocation function has been called and succeeded, the object is constructed in that memory.</p></li>\n</ol>\n<p>If you say <code>new (a, b, c) T</code>, then the same happens, only that in step 1 we are now looking for an <code>operator new</code> overload with the appropriate signature.</p>\n", "LastActivityDate": "2012-11-02T16:56:13.487", "CommentCount": "0", "CreationDate": "2012-11-02T16:56:13.487", "ParentId": "13199551", "Score": "6", "OwnerUserId": "596781"}});