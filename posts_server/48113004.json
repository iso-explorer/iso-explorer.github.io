post_cb({"48113061": {"Id": "48113061", "PostTypeId": "2", "Body": "<p>This is due to the + operator having left to right associativity.</p>\n<p>Find a better description of this here:\n<a href=\"https://stackoverflow.com/questions/6061648/concatenate-two-string-literals\">Concatenate two string literals</a></p>\n", "LastActivityDate": "2018-01-05T11:50:36.957", "CommentCount": "0", "CreationDate": "2018-01-05T11:50:36.957", "ParentId": "48113004", "Score": "2", "OwnerUserId": "9176651"}, "bq_ids": {"n4140": {"so_48113004_48113065_0": {"length": 4, "quality": 0.8, "section_id": 6138}}, "n3337": {"so_48113004_48113065_0": {"length": 4, "quality": 0.8, "section_id": 5902}}, "n4659": {"so_48113004_48113065_0": {"length": 4, "quality": 0.8, "section_id": 7635}}}, "48113004": {"ViewCount": "65", "Body": "<p>In the definition of <code>s6</code> and <code>s7</code>, how is there a string for every + in <code>s6</code> and how come it's not still so in <code>s7</code>?</p>\n<pre><code>#include &lt;string&gt;\nusing std::string;\nint main()\n{\nstring s1 = \"hello\", s2 = \"world\";\nstring s3 = s1 + \", \" + s2 + '\\n';\nstring s4 = s1 + \", \"; // ok: adding a string and a literal\nstring s5 = \"hello\" + \", \"; // error: no string operand\nstring s6 = s1 + \", \" + \"world\"; // ok: each + has a string operand\nstring s7 = \"hello\" + \", \" + s2; // error: can't add string literal\n}\n</code></pre>\n", "AcceptedAnswerId": "48113065", "Title": "Problems with adding string and literals in C++", "CreationDate": "2018-01-05T11:46:10.447", "Id": "48113004", "CommentCount": "0", "PostTypeId": "1", "ClosedDate": "2018-01-05T11:58:53.687", "LastActivityDate": "2018-01-05T12:04:03.607", "Score": "1", "OwnerUserId": "9163262", "Tags": "<c++><string><c++11><literals>", "AnswerCount": "4"}, "48113067": {"Id": "48113067", "PostTypeId": "2", "Body": "<p>There is no need to add string literals <code>\"hello\" \", \"</code> will be glued by preprocessor to <code>\"hello, \"</code>.</p>\n", "LastActivityDate": "2018-01-05T11:51:00.407", "CommentCount": "0", "CreationDate": "2018-01-05T11:51:00.407", "ParentId": "48113004", "Score": "0", "OwnerUserId": "7860670"}, "48113065": {"Id": "48113065", "PostTypeId": "2", "Body": "<p><a href=\"http://eel.is/c++draft/expr.add#1\" rel=\"nofollow noreferrer\">[expr.add]p1</a>:</p>\n<blockquote>\n<p id=\"so_48113004_48113065_0\">The additive operators + and - group left-to-right. [...]</p>\n</blockquote>\n<p><code>+</code> and <code>-</code> are left associative, that means that actually, the last two definitions look like this:</p>\n<pre><code>string s6 = (s1 + \", \") + \"world\";\nstring s7 = (\"hello\" + \", \") + s2;\n</code></pre>\n<p>Now the error is obvious: <code>\"hello\" + \", \"</code> is evaluated first, but because  there is no addition operator for <code>const char[]</code>, you get a compiler error. If the operators were right associative, <code>s7</code> would be valid, while <code>s6</code> would not.</p>\n", "LastActivityDate": "2018-01-05T11:50:57.520", "CommentCount": "0", "CreationDate": "2018-01-05T11:50:57.520", "ParentId": "48113004", "Score": "3", "OwnerUserId": "3980929"}, "48113144": {"Id": "48113144", "PostTypeId": "2", "Body": "<p>There is a difference between the notion of a \"string literal\" such as <code>\"hello\"</code> and <code>\", \"</code> and a \"<code>std::string</code> object\". </p>\n<p>String literals are just <code>char[]</code> and adding two to each other doesn't have the effect you think it has. You're just adding the two pointers, which doesn't amount to anything meaningful in your case.</p>\n<p>On the other hand, the <code>operator+()</code> method is defined on operands <code>std::string</code> and <code>char*</code> such that it returns a <code>std::string</code> object. This is when the other concept you are missing comes into play: operator associativity. In the case of the following line:</p>\n<pre><code>string s6 = s1 + \", \" + \"world\";\n</code></pre>\n<ol>\n<li><code>s1 + \", \"</code> returns a <code>std::string</code></li>\n<li>That returned object is concatenated to <code>\"world\"</code>, also returning a <code>std::string</code> object. This works as expected</li>\n</ol>\n<p>On the other hand, the following statement:</p>\n<pre><code>string s7 = \"hello\" + \", \" + s2;\n</code></pre>\n<p>Does not work as expected because the first part of the expression being evaluated is <code>\"hello\" + \", \"</code>, which is an attempt to add 2 string literals.</p>\n", "LastActivityDate": "2018-01-05T11:55:46.453", "CommentCount": "0", "CreationDate": "2018-01-05T11:55:46.453", "ParentId": "48113004", "Score": "1", "OwnerUserId": "2718864"}});