post_cb({"38533067": {"ParentId": "38532927", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>It's problematic, but the standard unfortunately does not specify in detail what algorithm to use when constructing (many) of the randomly distributed numbers, and there are several valid alternatives, with different benefits.</p>\n<blockquote>\n<p id=\"so_38532927_38533067_0\">26.6.8.5 Normal distributions [rand.dist.norm]\n  26.6.8.5.1 Class template normal_distribution [rand.dist.norm.normal]</p>\n<p id=\"so_38532927_38533067_1\">A normal_distribution random number distribution produces random\n  numbers x distributed according to the probability density function</p>\n<p id=\"so_38532927_38533067_2\"><a href=\"https://i.stack.imgur.com/6MO8C.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/6MO8C.png\"/></a></p>\n<p id=\"so_38532927_38533067_3\">parameters \u03bc and  are also known as this distribution\u2019s mean and\n  standard deviation .</p>\n</blockquote>\n<p>The most common algorithm for generating normally distributed numbers is <em><a href=\"https://en.wikipedia.org/wiki/Box%E2%80%93Muller_transform\" rel=\"nofollow noreferrer\">Box-Muller</a></em>, but even with that algorithm there are options and variations.</p>\n<p>The freedom is even explicitly mentioned in the standard:</p>\n<blockquote>\n<p id=\"so_38532927_38533067_4\">26.6.8 Random number distribution class templates [rand.dist]\n  . . .</p>\n<p id=\"so_38532927_38533067_5\">3 The\n  algorithms for producing each of the specified distributions are\n  implementation-defined. </p>\n</blockquote>\n<p>A goto options for this is <a href=\"http://www.boost.org/doc/libs/1_61_0/doc/html/boost_random/reference.html\" rel=\"nofollow noreferrer\">boost random</a></p>\n<p>By the way, as @Hurkyl points out: It seems that the two implementations are actually the same: For example box-muller generates pairs of values, of which one is returned and once is cached. The two implementations differ only in which of the values is returned.</p>\n<p>Further, the random number <em>engines</em> are completely specified and will give the same sequence between implementations, but care does need to be taken since the different <em>distributions</em> can also <em>consume</em> different amounts of random data in order to produce their results, which will put the engines out of sync.</p>\n", "OwnerUserId": "1149664", "LastEditorUserId": "1149664", "LastEditDate": "2016-07-22T19:07:05.377", "Id": "38533067", "Score": "5", "CreationDate": "2016-07-22T18:23:19.527", "LastActivityDate": "2016-07-22T19:07:05.377"}, "38533088": {"ParentId": "38532927", "CommentCount": "0", "Body": "<p>Unlike the PRN generators defined by the standard that must produce the same output for the same seed the standard does not keep that mandate for distrobutions.  From [rand.dist.general]/3</p>\n<blockquote>\n<p id=\"so_38532927_38533088_0\">The algorithms for producing each of the specified distributions are implementation-defined.</p>\n</blockquote>\n<p>So In this case even though the distribution has to have a density function in the form of</p>\n<p><a href=\"https://i.stack.imgur.com/tuy5M.png\" rel=\"noreferrer\"><img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/tuy5M.png\"/></a></p>\n<p>How the implementation does that is up to them.</p>\n<p>The only way to get a portable distribution would be to write one yourself or use a third party library.</p>\n", "OwnerUserId": "4342498", "PostTypeId": "2", "Id": "38533088", "Score": "6", "CreationDate": "2016-07-22T18:24:39.297", "LastActivityDate": "2016-07-22T18:24:39.297"}, "bq_ids": {"n4140": {"so_38532927_38533088_0": {"section_id": 3612, "quality": 0.8571428571428571, "length": 6}, "so_38532927_38533067_1": {"section_id": 3665, "quality": 1.0, "length": 12}, "so_38532927_38533067_5": {"section_id": 3612, "quality": 0.8571428571428571, "length": 6}, "so_38532927_38533067_3": {"section_id": 3665, "quality": 0.8333333333333334, "length": 5}}, "n3337": {"so_38532927_38533088_0": {"section_id": 3474, "quality": 0.8571428571428571, "length": 6}, "so_38532927_38533067_1": {"section_id": 3527, "quality": 1.0, "length": 12}, "so_38532927_38533067_5": {"section_id": 3474, "quality": 0.8571428571428571, "length": 6}, "so_38532927_38533067_3": {"section_id": 3527, "quality": 0.8333333333333334, "length": 5}}, "n4659": {"so_38532927_38533088_0": {"section_id": 4376, "quality": 0.7142857142857143, "length": 5}, "so_38532927_38533067_1": {"section_id": 4429, "quality": 1.0, "length": 12}, "so_38532927_38533067_5": {"section_id": 4376, "quality": 0.7142857142857143, "length": 5}, "so_38532927_38533067_3": {"section_id": 4429, "quality": 0.8333333333333334, "length": 5}}}, "38532927": {"CommentCount": "5", "AcceptedAnswerId": "38533067", "PostTypeId": "1", "ClosedDate": "2016-07-22T19:26:15.733", "LastEditorUserId": "1033581", "CreationDate": "2016-07-22T18:14:26.087", "LastActivityDate": "2017-03-01T15:34:23.077", "LastEditDate": "2017-03-01T15:34:23.077", "ViewCount": "301", "FavoriteCount": "2", "Title": "Why GCC and MSVC std::normal_distribution are different?", "Id": "38532927", "Score": "10", "Body": "<p>I have a simple code sample:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;random&gt;\nusing namespace std;\nint main() {\n    minstd_rand0 gen(1);\n    uniform_real_distribution&lt;double&gt; dist(0.0, 1.0);\n    for(int i = 0; i &lt; 10; ++i) {\n        cout &lt;&lt; \"1 \" &lt;&lt; dist(gen) &lt;&lt; endl;\n    }\n\n    normal_distribution&lt;double&gt; dist2(0.0, 1.0);\n    minstd_rand0 gen2(1);\n    for(int i = 0; i &lt; 10; ++i) {\n        cout &lt;&lt; \"2 \" &lt;&lt; dist2(gen2) &lt;&lt; endl;\n    }\n\n    return 0;\n}\n</code></pre>\n<p>Which I compile on <a href=\"http://cpp.sh/8g7g4\" rel=\"nofollow noreferrer\">gcc</a> and <a href=\"http://rextester.com/SWKQP38269\" rel=\"nofollow noreferrer\">msvc</a>. I get diferent results on std code!(\n<a href=\"https://i.stack.imgur.com/j4eT9.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/j4eT9.png\"/></a></p>\n<p>So why GCC and MSVC <code>std::normal_distribution</code> results are diferent for the same seed and generator, and, most importantly, how to <em>force</em> them to be same?</p>\n", "Tags": "<c++><visual-studio><c++11><gcc><visual-c++>", "OwnerUserId": "1973207", "AnswerCount": "2"}});