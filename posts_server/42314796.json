post_cb({"42314796": {"CommentCount": "8", "ViewCount": "49", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2017-02-18T11:53:39.453", "LastActivityDate": "2017-02-18T15:35:33.517", "Title": "How can a built-in operator (except new, delete and function call) return?", "LastEditDate": "2017-05-23T12:34:06.217", "Id": "42314796", "Score": "0", "Body": "<p>I have found next built-in operators which can <strong>return</strong> in Clause 5:<br>\nnew, delete, function call, logical OR, all assignments operators. </br></p>\n<p>It's all clear about the first three operators:  </p>\n<ul>\n<li>new operator usually calls allocation function which returns the\nresult.   </li>\n<li>delete operator usually calls deallocation function which\nreturns the result.   </li>\n<li>The result of a function call is usually the\nresult of the operand of the evaluated return statement in the called\nfunction.</li>\n</ul>\n<p>Other built-in operators didn't call functions. <strong>So how they can return something?</strong><br>\nWe can say only that such operators evaluate the result value or produce side effects like any other expressions.\nAre there two inaccuracies in the Standard about built-in logical AND and built-in assignment operators?</br></p>\n<p>Let's look at logical OR (\u00a75.15/1):  </p>\n<blockquote>\n<p id=\"so_42314796_42314796_0\">The || operator groups left-to-right. The operands are both\n  contextually converted to bool (Clause 4). It <strong>returns</strong> true if either\n  of its operands is true, and false otherwise.</p>\n</blockquote>\n<p>Compare with the technically correct definition of logical AND (\u00a75.14/1):  </p>\n<blockquote>\n<p id=\"so_42314796_42314796_1\">The &amp;&amp; operator groups left-to-right. The operands are both\n  contextually converted to bool (Clause 4). <strong>The result is</strong> true if both\n  operands are true and false otherwise.</p>\n</blockquote>\n<p>Why they used \"returns\" in case of || operator and \"the result is\" in case of logical AND?</p>\n<p>Next look at the built-in assignment operators (\u00a75.18/1).</p>\n<blockquote>\n<p id=\"so_42314796_42314796_2\">All require a modifiable lvalue as their left operand and <strong>return</strong> an\n  lvalue referring to the left operand.</p>\n</blockquote>\n<p>Again we see \"return\" instead of \"the result is\". </p>\n<p><strong>P.S.</strong> I didn't find any phrases like \"expression returns\" in the Standard so it seems that such phrases are technically incorrect. Using them may <a href=\"https://stackoverflow.com/questions/42306545/when-exactly-the-built-in-postfix-increment-operator-returns-the-result\">cause strange questions</a></p>\n", "Tags": "<c++><operators><language-lawyer>", "OwnerUserId": "7123797", "AnswerCount": "1"}, "42316124": {"ParentId": "42314796", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>From the discussion above (thanks to <em>Matteo Italia</em>) we can conclude that there is absolutely NO difference between concepts \"return the result\" and \"yield/evaluate the result value\" for built-in operators (at least for built-in types which are the only ones that are interesting for the rules of built in operators).</p>\n", "OwnerUserId": "7123797", "LastEditorUserId": "7123797", "LastEditDate": "2017-02-18T15:35:33.517", "Id": "42316124", "Score": "0", "CreationDate": "2017-02-18T14:03:52.700", "LastActivityDate": "2017-02-18T15:35:33.517"}, "bq_ids": {"n4140": {"so_42314796_42314796_1": {"section_id": 6163, "quality": 0.8421052631578947, "length": 16}, "so_42314796_42314796_2": {"section_id": 6173, "quality": 1.0, "length": 12}, "so_42314796_42314796_0": {"section_id": 6165, "quality": 0.8947368421052632, "length": 17}}, "n3337": {"so_42314796_42314796_1": {"section_id": 5924, "quality": 0.8421052631578947, "length": 16}, "so_42314796_42314796_2": {"section_id": 5934, "quality": 1.0, "length": 12}, "so_42314796_42314796_0": {"section_id": 5926, "quality": 0.8947368421052632, "length": 17}}, "n4659": {"so_42314796_42314796_1": {"section_id": 7660, "quality": 0.8421052631578947, "length": 16}, "so_42314796_42314796_2": {"section_id": 7675, "quality": 1.0, "length": 12}, "so_42314796_42314796_0": {"section_id": 7662, "quality": 0.8947368421052632, "length": 17}}}});