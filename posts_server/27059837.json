post_cb({"27059837": {"ViewCount": "314", "Body": "<p><code>cin</code>, <code>cout</code>, basic streams related - is it guaranteed anywhere in the standard that these obejcts will be created first and destroyed last?</p>\n<p>It would implicate that non-local static objects can rely on them in their constructors and destructors (no ctor race between these objects and the basic streams).</p>\n", "AcceptedAnswerId": "27059902", "Title": "Is it guaranteed by the C++ standard that cin, cout, etc. will be created first and destroyed last?", "CreationDate": "2014-11-21T11:03:48.503", "Id": "27059837", "CommentCount": "0", "LastEditDate": "2014-11-21T11:05:09.107", "PostTypeId": "1", "LastEditorUserId": "264325", "LastActivityDate": "2014-11-21T21:50:50.827", "Score": "6", "OwnerUserId": "754407", "Tags": "<c++><c++11><stl>", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_27059837_27059902_0": {"length": 48, "quality": 0.8888888888888888, "section_id": 1920}}, "n3337": {"so_27059837_27059902_0": {"length": 48, "quality": 0.8888888888888888, "section_id": 1909}}, "n4659": {"so_27059837_27059902_0": {"length": 36, "quality": 0.6666666666666666, "section_id": 2191}}}, "27060115": {"Id": "27060115", "PostTypeId": "2", "Body": "<p>The simple answer to your question is no.  As others have pointed out,\nthere <em>are</em> guarantees for objects defined in translation units\nincluding <code>&lt;iostream&gt;</code>, at least if the object is defined after the\ninclusion.  But this doesn't always help: you include <code>&lt;iostream&gt;</code> in\nthe translation unit which defines the constructor, not necessarily in\nthe one which defines the static variable.  So cases like the following\nare possible:</p>\n<p>file1.hh</p>\n<pre><code>class X\n{\npublic:\n    X();\n};\n</code></pre>\n<p>file1.cc</p>\n<pre><code>#include \"file1.hh\"\n#include &lt;iostream&gt;\n\nX::X()\n{\n    std::cout &lt;&lt; \"Coucou, me voila!\" &lt;&lt; std::endl;\n}\n</code></pre>\n<p>file2.cc</p>\n<pre><code>#include \"file1.hh\"\n\nX anX;\n</code></pre>\n<p>In this case, it's quite possible that the constructor of <code>anX</code> be\ncalled before <code>std::cout</code> is constructed.</p>\n<p>To be on the safe side: if the constructor of an object which might be\nused as a static variable wants to use any of the standard streams, it\nshould probably declare a local static of type <code>ios_base::Init</code>:</p>\n<pre><code>X::X()\n{\n    static ios_base::Init dummyForInitialization;\n    std::cout &lt;&lt; \"Coucou, me voila!\" &lt;&lt; std::endl;\n}\n</code></pre>\n<p>If <code>std::cout</code> wasn't already constructed when this constructor is\ncalled, it will be when the static variable is constructed.</p>\n", "LastEditorUserId": "4834", "LastActivityDate": "2014-11-21T21:50:50.827", "Score": "7", "CreationDate": "2014-11-21T11:18:41.947", "ParentId": "27059837", "CommentCount": "3", "LastEditDate": "2014-11-21T21:50:50.827", "OwnerUserId": "649665"}, "27059902": {"Id": "27059902", "PostTypeId": "2", "Body": "<p>They are guaranteed to be created before any static object declared after including <code>&lt;iostream&gt;</code> and, in any case, before starting <code>main</code>. They are not destroyed during program execution.</p>\n<p>Including the header has the effect of declaring a static variable of type <code>ios_base::Init</code>, whose creation ensures that the standard streams are initialised.</p>\n<p>If you want the Standardese for this:</p>\n<blockquote>\n<p id=\"so_27059837_27059902_0\">C++11 27.4.1 [iostream.objects.overview]/2: The objects are constructed and the associations are established at some time prior to or during the first time an object of class <code>ios_base::Init</code> is constructed, and in any case before the body of main begins execution. The objects are not destroyed during program execution. The results of including <code>&lt;iostream&gt;</code> in a translation unit shall be as if <code>&lt;iostream&gt;</code> defined an instance of <code>ios_base::Init</code> with static storage duration. Similarly, the entire program shall behave as if there were at least one instance of <code>ios_base::Init</code> with static storage duration.</p>\n</blockquote>\n", "LastActivityDate": "2014-11-21T11:07:16.280", "Score": "7", "CreationDate": "2014-11-21T11:07:16.280", "ParentId": "27059837", "CommentCount": "8", "OwnerUserId": "204847"}});