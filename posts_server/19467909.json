post_cb({"bq_ids": {"n4140": {"so_19467909_19467909_0": {"length": 29, "quality": 0.90625, "section_id": 6086}}, "n3337": {"so_19467909_19467909_0": {"length": 29, "quality": 0.90625, "section_id": 5854}}, "n4659": {"so_19467909_19467909_0": {"length": 28, "quality": 0.875, "section_id": 7582}}}, "26029144": {"Id": "26029144", "PostTypeId": "2", "Body": "<p>Yes, in fact it is suggested in the standard text you quoted:</p>\n<pre><code>int (*arr_ptr)[10] = new int[1][10];\n</code></pre>\n<p>The pointer returned by the new-expression has type <code>int (*)[10]</code>, i.e. pointer to array of 10 ints. You need <code>delete[]</code> to delete it.</p>\n", "LastActivityDate": "2014-09-25T01:39:46.183", "CommentCount": "4", "CreationDate": "2014-09-25T01:39:46.183", "ParentId": "19467909", "Score": "1", "OwnerUserId": "1505939"}, "19468214": {"Id": "19468214", "PostTypeId": "2", "Body": "<p>If I have understood correctly what you want then you can use std::array. For example</p>\n<pre><code>{\n    typedef std::array&lt;int, 10&gt; Array10;\n\n    Array10 *p = new Array10;\n    delete p;\n}\n</code></pre>\n", "LastActivityDate": "2013-10-19T16:19:14.970", "CommentCount": "3", "CreationDate": "2013-10-19T16:19:14.970", "ParentId": "19467909", "Score": "0", "OwnerUserId": "2877241"}, "19467909": {"ViewCount": "196", "Body": "<p>In this <a href=\"https://stackoverflow.com/a/1810295/183120\">excellent answer by AndreyT</a>, he explains that in C, when a function needs an array whose dimension is known at compile-time, it's a major technique-level error to declare</p>\n<pre><code>void process_array(int *ptr, size_t plen);\n</code></pre>\n<p>instead of</p>\n<pre><code>void process_array(int (*arr_ptr)[10]);\n</code></pre>\n<p>Furthermore, he opines that many programmers are oblivious to the second option and know only about the first. One of the reasons, he writes, for this behaviour is when an array needs to be dynamically allocated and passed to the second version, programmers don't know how to do it; they're so accustomed to <code>int *p = malloc(sizeof(*p) * 10)</code> which returns an <code>int *</code>. In C, the way to do it is, as he shows</p>\n<pre><code>int (*arr_ptr) [10] = malloc(sizeof(*arr_ptr));\n</code></pre>\n<hr>\n<p>This got me thinking on how one would do the same in C++. I know we've <code>std::array</code>, <code>std::vector</code>, etc. but I'm interested in understanding <code>new</code>'s usage. So I tried doing this:</p>\n<pre><code>typedef int Array10[10];\nArray10 *p = new Array10;    // error: cannot convert \u2018int*\u2019 to \u2018int (*)[10]\u2019\n</code></pre>\n<p>When I change <code>p</code>'s type to <code>int*</code> the compiler (GCC 4.8.1) is happy. I looked up C++11 standard (draft n3337, <code>\u00a75.3.4/5</code>) to understand this further, it says:</p>\n<blockquote>\n<p id=\"so_19467909_19467909_0\">When the allocated object is an array (that is, the <em>noptr-new-declarator</em> syntax is used or the <em>new-type-id</em> or <em>type-id</em> denotes an array type), the <em>new-expression</em> yields a pointer to the initial element (if any) of the array. [<em>Note:</em> both <strong>new int</strong> and <strong>new int[10]</strong> have type <strong>int*</strong> and the type of <strong>new int[i][10]</strong> is <strong>int (*)[10]</strong> \u2014 <em>end note</em>]</p>\n</blockquote>\n<p>I understand that <code>new int [10]</code> is in action; what I get back should be freed using <code>delete [] p</code> and not <code>delete p</code>. However what I need seems to be the latter, where the allocation is not an array of integers but an array itself, as a single/whole object.</p>\n<p>Is there a way to do it? Or my trying to do this in itself shows a misunderstanding of the C++ type system? Or it is right but is simply not allowed by the standard?</p>\n<hr>\n<p><sup><strong>Aside:</strong> When a function takes an array whose size is fixed, as in option 2, IMHO the best thing to do for the calling function is to declare an automatic array instead of resorting to dynamically allocating one and worrying about clean-up.</sup></p>\n</hr></hr>", "Title": "Will the new expression ever return a pointer to an array?", "CreationDate": "2013-10-19T15:47:25.190", "LastActivityDate": "2014-09-29T15:27:50.533", "CommentCount": "7", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2017-05-23T11:50:38.783", "LastEditorUserId": "-1", "Id": "19467909", "Score": "7", "OwnerUserId": "183120", "Tags": "<c++><arrays><pointers><types><new-operator>", "AnswerCount": "2"}});