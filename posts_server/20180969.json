post_cb({"20181798": {"ParentId": "20180969", "CommentCount": "1", "Body": "<p>I <em>think</em> the question is about constraints about the representable values. There are only fairly basic constraints which are not explicitly spelled out in the C++ but are spelled out in the C standard in section 5.2.4.2.2 (\"Characteristics of floating types <code>&lt;float.h&gt;</code>), paragraph 11 (I'm merely quoting the values I consider interesting in this context):</p>\n<blockquote>\n<p id=\"so_20180969_20181798_0\">The values given in the following list shall be replaced by constant expressions with implementation-defined values that are greater or equal in magnitude (absolute value) to those shown, with the same sign:</p>\n<ul>\n<li><code>FLT_DECIMAL_DIG   6</code></li>\n<li><code>DBL_DECIMAL_DIG  10</code></li>\n<li><code>LDBL_DECIMAL_DIG 10</code></li>\n<li><code>FLT_MIN_10_EXP -37</code></li>\n<li><code>DBL_MIN_10_EXP -37</code></li>\n<li><code>LDBL_MIN_10_EXP -37</code></li>\n<li><code>FLT_MAX_10_EXP +37</code></li>\n<li><code>DBL_MAX_10_EXP +37</code></li>\n<li><code>LDBL_MAX_10_EXP +37</code></li>\n<li><code>FLT_MAX 1E+37</code></li>\n<li><code>DBL_MAX 1E+37</code></li>\n<li><code>LDBL_MAX 1E+37</code></li>\n<li><code>FLT_EPSILON 1E-5</code></li>\n<li><code>DBL_EPSILON 1E-9</code></li>\n<li><code>LDBL_EPSILON 1E-9</code></li>\n</ul>\n</blockquote>\n<p>This pretty much says that <code>float</code> is likely to be smaller than <code>double</code> and <code>double</code> and <code>long double</code> can be the same thing and that they an be fairly far off compared to the constraints of IEEE-754.</p>\n", "OwnerUserId": "1120273", "PostTypeId": "2", "Id": "20181798", "Score": "3", "CreationDate": "2013-11-24T22:15:54.693", "LastActivityDate": "2013-11-24T22:15:54.693"}, "bq_ids": {"n4140": {"so_20180969_20181524_1": {"section_id": 7217, "quality": 0.8064516129032258, "length": 25}, "so_20180969_20181524_0": {"section_id": 7217, "quality": 0.8732394366197183, "length": 62}}, "n3337": {"so_20180969_20181524_1": {"section_id": 6961, "quality": 0.8064516129032258, "length": 25}, "so_20180969_20181524_0": {"section_id": 6961, "quality": 0.8591549295774648, "length": 61}}, "n4659": {"so_20180969_20181524_1": {"section_id": 8726, "quality": 0.8064516129032258, "length": 25}, "so_20180969_20181524_0": {"section_id": 8726, "quality": 0.8873239436619719, "length": 63}}}, "20181524": {"ParentId": "20180969", "LastEditDate": "2013-11-24T22:01:59.740", "CommentCount": "2", "CreationDate": "2013-11-24T21:53:35.127", "OwnerUserId": "483486", "LastEditorUserId": "483486", "PostTypeId": "2", "Id": "20181524", "Score": "2", "Body": "<p>From N3337:</p>\n<blockquote>\n<p id=\"so_20180969_20181524_0\">3.9.1.8<br>\n  There are three floating point types: <code>float</code>, <code>double</code>, and <code>long double</code>. The type <code>double</code> provides at least as much precision as <code>float</code>, and the type <code>long double</code> provides at least as much precision as <code>double</code>. The set of values of the type <code>float</code> is a subset of the set of values of the type <code>double</code>; the set of values of the type <code>double</code> is a subset of the set of values of the type <code>long double</code>. The value representation of floating-point types is implementation-defined. Integral and floating types are collectively called arithmetic types. Specializations of the standard template <code>std::numeric_limits</code> (18.3) shall specify the maximum and minimum values of each arithmetic type for an implementation.</br></p>\n</blockquote>\n<p>The C standard is also relevant here, so here what it (N1570) has to say about floating point types:</p>\n<blockquote>\n<p id=\"so_20180969_20181524_1\">6.2.5.10<br>\n  There are three real floating types, designated as <code>float</code>, <code>double</code>, and <code>long\n  double</code>.42) The set of values of the type <code>float</code> is a subset of the set of values of the\n  type <code>double</code>; the set of values of the type <code>double</code> is a subset of the set of values of the type <code>long double</code>.</br></p>\n<p id=\"so_20180969_20181524_2\">42) See \u2018\u2018future language directions\u2019\u2019 (6.11.1).</p>\n<p id=\"so_20180969_20181524_3\">6.11.1.1 Floating types<br>\n  Future standardization may include additional floating-point types, including those with\n  greater range, precision, or both than <code>long double</code>.</br></p>\n</blockquote>\n<p>So as far as I can tell, floating point is almost all implementation defined.  For good reason, floating point is implemented by the CPU.  The standard can not make any guarantees about how big or small the various floating point types will be.  If it did it might become simply incompatible with newer processors.</p>\n<p>The float.h and cfloat headers are using their ability within the standard to define the implementation.  The sizes you gave are not part of the standard.</p>\n<p>So no, there are no other constraints.* And no, there are no implied maximum sizes.</p>\n<ul>\n<li>This isn't strictly true.  There are lots of other information defined in N1570 Section 5.2.4.2.2 but nothing that restricts floating point values in the way you're asking.</li>\n</ul>\n", "LastActivityDate": "2013-11-24T22:01:59.740"}, "20180969": {"CommentCount": "8", "ViewCount": "131", "PostTypeId": "1", "LastEditorUserId": "749762", "CreationDate": "2013-11-24T21:03:30.757", "LastActivityDate": "2013-11-24T22:15:54.693", "Title": "How are the sizes of non IEEE754 floating-point types constrainted?", "AcceptedAnswerId": "20181798", "LastEditDate": "2013-11-24T21:39:15.797", "Id": "20180969", "Score": "2", "Body": "<p>How are the sizes of non IEEE754 floating-point types <code>float</code>, <code>double</code>, and <code>long double</code> constrained?</p>\n<p>I know that each floating-point type must be able to represent all values from a smaller type, which implies <code>sizeof(float) &lt;= sizeof(double) &lt;= sizeof(long double)</code>.</p>\n<p>From what I can tell, the <code>float.h</code>/<code>cfloat</code> minimums require <code>sizeof(float)*CHAR_BIT&gt;=32</code>, <code>sizeof(double)*CHAR_BIT&gt;=64</code>, and <code>sizeof(long double)*CHAR_BIT&gt;=64</code>.</p>\n<p>Are there other constraints?  If so, what are they, and do any imply a maximum on these sizes?</p>\n", "Tags": "<c++><c><floating-point><ieee-754>", "OwnerUserId": "749762", "AnswerCount": "2"}});