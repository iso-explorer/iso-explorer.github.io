post_cb({"12701279": {"ParentId": "12701130", "CommentCount": "0", "Body": "<p>It's the <code>const</code> on <code>std::string</code>, it gives <code>s</code> internal linkage. Quote from [3.5 Program and linkage]:3:</p>\n<blockquote>\n<p id=\"so_12701130_12701279_0\">A name having namespace scope (3.3.6) has internal linkage if it is\n  the name of</p>\n<p id=\"so_12701130_12701279_1\">\u2014 a variable that is <strong>explicitly declared const</strong> or constexpr and\n  neither explicitly declared extern nor previously declared to have\n  external linkage; or</p>\n</blockquote>\n", "OwnerUserId": "906773", "PostTypeId": "2", "Id": "12701279", "Score": "4", "CreationDate": "2012-10-03T02:53:02.787", "LastActivityDate": "2012-10-03T02:53:02.787"}, "12701200": {"ParentId": "12701130", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>If you remove const, it works in vc++, and if you define them both extern const, it also works.</p>\n<pre><code>// file1.cpp\nextern const std::string s(\"test\");\nextern const int i = 99;\n\n// file2.cpp\nextern const std::string s;\nextern const int i;\n</code></pre>\n<p>If you remove any 'extern' from file1.cpp, it can't compile. If the variables are defined const, you can remove 'extern' from file1.cpp.</p>\n", "OwnerUserId": "840015", "LastEditorUserId": "840015", "LastEditDate": "2012-10-03T02:55:38.897", "Id": "12701200", "Score": "2", "CreationDate": "2012-10-03T02:37:27.243", "LastActivityDate": "2012-10-03T02:55:38.897"}, "12701130": {"CommentCount": "0", "ViewCount": "1660", "CreationDate": "2012-10-03T02:24:53.127", "LastActivityDate": "2012-10-03T02:55:38.897", "Title": "Undefined reference when using extern on a c++ object, but not integral type", "AcceptedAnswerId": "12701279", "PostTypeId": "1", "Id": "12701130", "Score": "3", "Body": "<p>I'm getting undefined reference errors when trying to use extern on a c++ object. It doesn't appear to happen with integral types. What am I missing?! This code below replicates the problem:</p>\n<p>file1.cpp:</p>\n<pre><code>#include &lt;string&gt;\n\nconst std::string s(\"test\");\nint i = 99;\n\nint main()\n{\n        extern void Test();\n        Test();\n}\n</code></pre>\n<p>file2.cpp:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nextern const std::string s;\nextern int i;\n\nvoid Test()\n{\n        std::cout &lt;&lt; s &lt;&lt; std::endl;\n        std::cout &lt;&lt; i &lt;&lt; std::endl;\n}\n</code></pre>\n<p>if i comment out the usage of the 's' std::string variable, the linking errors go away.</p>\n<p>There are other questions on SO similar to this, but they all seem to be related to people not defining the variable, which I am!</p>\n", "Tags": "<c++><gcc>", "OwnerUserId": "269469", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_12701130_12701279_0": {"section_id": 7136, "quality": 0.875, "length": 7}, "so_12701130_12701279_1": {"section_id": 7136, "quality": 1.0, "length": 15}}, "n3337": {"so_12701130_12701279_0": {"section_id": 6880, "quality": 0.875, "length": 7}, "so_12701130_12701279_1": {"section_id": 6880, "quality": 1.0, "length": 15}}, "n4659": {"so_12701130_12701279_0": {"section_id": 8637, "quality": 0.875, "length": 7}, "so_12701130_12701279_1": {"section_id": 8637, "quality": 0.8666666666666667, "length": 13}}}});