post_cb({"146625": {"Id": "146625", "PostTypeId": "2", "Body": "<p>With C++, Plain Old Data doesn't just mean that things like int, char, etc are the only types used. Plain Old Data really means in practice that you can take a struct memcpy it from one location in memory to another and things will work exactly like you would expect (i.e. not blow up). This breaks if your class, or any class your class contains, has as a member that is a pointer or a reference or a class that has a virtual function. Essentially, if pointers have to be involved somewhere, its not Plain Old Data.  </p>\n", "LastActivityDate": "2008-09-28T20:14:11.963", "CommentCount": "2", "CreationDate": "2008-09-28T20:14:11.963", "ParentId": "146452", "Score": "-5", "OwnerUserId": "14788"}, "146589": {"Id": "146589", "PostTypeId": "2", "Body": "<h3>Very informally:</h3>\n<p>A POD is a type (including classes) where the C++ compiler guarantees that there will be no \"magic\" going on in the structure: for example hidden pointers to vtables, offsets that get applied to the address when it is cast to other types (at least if the target's POD too), constructors, or destructors. Roughly speaking, a type is a POD when the only things in it are built-in types and combinations of them. The result is something that \"acts like\" a C type.</p>\n<h3>Less informally:</h3>\n<ul>\n<li><code>int</code>, <code>char</code>, <code>wchar_t</code>, <code>bool</code>, <code>float</code>, <code>double</code> are PODs, as are <code>long/short</code> and <code>signed/unsigned</code> versions of them.</li>\n<li>pointers (including pointer-to-function and pointer-to-member) are PODs, </li>\n<li><code>enums</code> are PODs</li>\n<li>a <code>const</code> or <code>volatile</code> POD is a POD.</li>\n<li>a <code>class</code>, <code>struct</code> or <code>union</code> of PODs is a POD provided that all non-static data members are <code>public</code>, and it has no base class and no constructors, destructors, or virtual methods. Static members don't stop something being a POD under this rule.</li>\n<li>Wikipedia is wrong to say that a POD cannot have members of type pointer-to-member. Or rather, it's correct for the C++98 wording, but TC1 made explicit that pointers-to-member are POD.</li>\n</ul>\n<h3>Formally (C++03 Standard):</h3>\n<blockquote>\n<p id=\"so_146452_146589_0\"><strong>3.9(10):</strong> \"Arithmetic types (3.9.1), enumeration types, pointer types, and pointer to member types (3.9.2) and cv-qualified versions of these types (3.9.3) are collectively caller scalar types. Scalar types, POD-struct types, POD-union types (clause 9), arrays of such types and cv-qualified versions of these types (3.9.3) are collectively called POD types\"</p>\n<p id=\"so_146452_146589_1\"><strong>9(4):</strong> \"A POD-struct is an aggregate class that has no non-static data members of type non-POD-struct, non-POD-union (or array of such types) or reference, and has no user-define copy operator and no user-defined destructor. Similarly a POD-union is an aggregate union that has no non-static data members of type non-POD-struct, non-POD-union (or array of such types) or reference, and has no user-define copy operator and no user-defined destructor.</p>\n<p id=\"so_146452_146589_2\"><strong>8.5.1(1):</strong> \"An aggregate is an array or class (clause 9) with no user-declared constructors (12.1), no private or protected non-static data members (clause 11), no base classes (clause 10) and no virtual functions (10.3).\"</p>\n</blockquote>\n", "LastEditorUserId": "3313438", "LastActivityDate": "2015-09-24T08:20:11.557", "Score": "270", "CreationDate": "2008-09-28T19:48:33.443", "ParentId": "146452", "CommentCount": "9", "OwnerUserId": "13005", "LastEditDate": "2015-09-24T08:20:11.557"}, "20447009": {"Id": "20447009", "PostTypeId": "2", "Body": "<p>As I understand POD (PlainOldData) is just a raw data - it does not need:</p>\n<ul>\n<li>to be constructed,</li>\n<li>to be destroyed,</li>\n<li>to have custom operators.</li>\n<li>Must not have virtual functions,</li>\n<li>and must not override operators.</li>\n</ul>\n<p>How to check if something is a POD? Well, there is a struct for that called <code>std::is_pod</code>:</p>\n<pre><code>namespace std {\n// Could use is_standard_layout &amp;&amp; is_trivial instead of the builtin.\ntemplate&lt;typename _Tp&gt;\n  struct is_pod\n  : public integral_constant&lt;bool, __is_pod(_Tp)&gt;\n  { };\n}\n</code></pre>\n<p>(From header type_traits)</p>\n<p><br/>Reference:</p>\n<ul>\n<li><a href=\"http://en.cppreference.com/w/cpp/types/is_pod\" rel=\"nofollow\">http://en.cppreference.com/w/cpp/types/is_pod</a></li>\n<li><a href=\"http://en.wikipedia.org/wiki/Plain_old_data_structure\" rel=\"nofollow\">http://en.wikipedia.org/wiki/Plain_old_data_structure</a></li>\n<li><a href=\"http://en.wikipedia.org/wiki/Plain_Old_C++_Object\" rel=\"nofollow\">http://en.wikipedia.org/wiki/Plain_Old_C++_Object</a></li>\n<li>File type_traits</li>\n</ul>\n", "LastEditorUserId": "2851815", "LastActivityDate": "2015-05-20T18:10:56.423", "Score": "7", "CreationDate": "2013-12-07T21:38:41.640", "ParentId": "146452", "CommentCount": "2", "OwnerUserId": "2851815", "LastEditDate": "2015-05-20T18:10:56.423"}, "38974315": {"Id": "38974315", "PostTypeId": "2", "Body": "<p>A POD (plain old data) object has one of these data types--a fundamental type, pointer, union, struct, array, or class--with no constructor. Conversely, a non-POD object is one for which a constructor exists. A POD object begins its lifetime when it obtains storage with the proper size for its type and its lifetime ends when the storage for the object is either reused or deallocated.</p>\n<p>PlainOldData types also must not have any of:</p>\n<ul>\n<li>Virtual functions (either their own, or inherited) </li>\n<li>Virtual base classes (direct or indirect).</li>\n</ul>\n<p>A looser definition of PlainOldData includes objects with constructors; but excludes those with virtual anything. The important issue with PlainOldData types is that they are non-polymorphic. Inheritance can be done with POD types, however it should only be done for ImplementationInheritance (code reuse) and not polymorphism/subtyping.</p>\n<p>A common (though not strictly correct) definition is that a PlainOldData type is anything that doesn't have a VeeTable.</p>\n", "LastActivityDate": "2016-08-16T11:56:51.840", "CommentCount": "1", "CreationDate": "2016-08-16T11:56:51.840", "ParentId": "146452", "Score": "4", "OwnerUserId": "5371678"}, "bq_ids": {"n4140": {"so_146452_146589_0": {"length": 28, "quality": 0.7368421052631579, "section_id": 7207}, "so_146452_146589_2": {"length": 13, "quality": 0.65, "section_id": 3298}}, "n3337": {"so_146452_146589_0": {"length": 28, "quality": 0.7368421052631579, "section_id": 6951}, "so_146452_146589_2": {"length": 13, "quality": 0.65, "section_id": 3168}}, "n4659": {"so_146452_146589_0": {"length": 28, "quality": 0.7368421052631579, "section_id": 8716}}}, "146452": {"ViewCount": "204068", "Body": "<p>I've come across this term POD-type a few times... what does it mean? </p>\n", "AcceptedAnswerId": "146454", "Title": "What are POD types in C++?", "CreationDate": "2008-09-28T18:36:09.563", "LastActivityDate": "2016-08-16T11:56:51.840", "CommentCount": "4", "FavoriteCount": "283", "PostTypeId": "1", "LastEditDate": "2016-08-15T23:34:13.823", "OwnerDisplayName": "austirg", "LastEditorUserId": "2411320", "Id": "146452", "Score": "689", "OwnerUserId": "14069", "Tags": "<c++><types><c++-faq>", "AnswerCount": "6"}, "146454": {"Body": "<p><em>POD</em> stands for <em>Plain Old Data</em> - that is, a class (whether defined with the keyword <code>struct</code> or the keyword <code>class</code>) without constructors, destructors and virtual members functions. <a href=\"http://en.wikipedia.org/wiki/Plain_Old_Data_Structures\" rel=\"noreferrer\">Wikipedia's article on POD</a> goes into a bit more detail and defines it as:</p>\n<blockquote>\n<p id=\"so_146452_146454_0\">A Plain Old Data Structure in C++ is an aggregate class that contains only PODS as members, has no user-defined destructor, no user-defined copy assignment operator, and no nonstatic members of pointer-to-member type.</p>\n</blockquote>\n<p>Greater detail can be found in <a href=\"https://stackoverflow.com/a/4178176/734069\">this answer for C++98/03</a>. C++11 changed the rules surrounding POD, relaxing them greatly, thus <a href=\"https://stackoverflow.com/a/7189821/734069\">necessitating a follow-up answer here</a>.</p>\n", "CreationDate": "2008-09-28T18:37:31.977", "ParentId": "146452", "CommentCount": "9", "LastEditDate": "2017-05-23T12:18:21.613", "PostTypeId": "2", "OwnerDisplayName": "Greg Hewgill", "LastEditorUserId": "-1", "LastActivityDate": "2016-01-12T12:50:57.737", "Id": "146454", "Score": "490", "OwnerUserId": "893"}, "146464": {"Id": "146464", "PostTypeId": "2", "Body": "<p><a href=\"http://en.wikipedia.org/wiki/Plain_Old_Data_Structures\" rel=\"noreferrer\">Plain Old Data</a> </p>\n<p>in short it is all builtin data type (ex: int, char, float, long int, unsigned char, double) and all aggregation of POD data. Yes, it's a recursive definition ;)</p>\n<p>To be more clear, a POD is what we call 'a struct'.</p>\n", "OwnerDisplayName": "ugasoft", "LastActivityDate": "2008-09-28T18:41:31.220", "Score": "13", "CreationDate": "2008-09-28T18:41:31.220", "ParentId": "146452", "CommentCount": "4", "OwnerUserId": "10120"}});