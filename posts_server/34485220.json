post_cb({"34485250": {"ParentId": "34485220", "PostTypeId": "2", "CommentCount": "6", "Body": "<p>Sometimes a utility's behavior is explicitly defined by the standard, sometimes it's not.</p>\n<ol>\n<li>Look in the standard; if found, it's strictly-conforming and portable. Yoohay!</li>\n<li>If not specified or explicitly implementation-defined, look into the standard library implementation of your choice. The source code will explain it.<br>\nUnfortunately it's implementation-defined and unportable then. If specified by POSIX or something similar, yoohay again, but only for POSIX-conforming or \"something similar\"-conforming platforms.</br></li>\n</ol>\n<hr>\n<p>Here's an example:</p>\n<p>The C++14 standard draft N4296 says in \u00a726.5.8.5.1:</p>\n<blockquote>\n<p id=\"so_34485220_34485250_0\">A <code>normal_distribution</code> random number distribution produces random\n  numbers <code>x</code> distributed according to the probability density function</p>\n<p id=\"so_34485220_34485250_1\"><img alt=\"formula\" src=\"https://i.stack.imgur.com/qqEDX.png\"/></p>\n<p id=\"so_34485220_34485250_2\">The distribution parameters <code>\u00b5</code> and <code>\u03c3</code> are also known as this distribution's mean and standard deviation.</p>\n</blockquote>\n<p><sub>I have no idea about PRNG, so I cannot explain this formula to you but I think this is the thing you were looking for.</sub></p>\n<p>There you have a function (more specifically: a \"probability density function\") for calculating random numbers using normal distribution. The whole algorithm builds around this and can be found in the corresponding standard library implementation.</p>\n</hr>", "OwnerUserId": "3494013", "LastEditorUserId": "2756719", "LastEditDate": "2015-12-28T14:43:43.287", "Id": "34485250", "Score": "2", "CreationDate": "2015-12-27T21:58:34.617", "LastActivityDate": "2015-12-28T14:43:43.287"}, "34485220": {"CommentCount": "6", "ViewCount": "115", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2015-12-27T21:54:02.013", "LastActivityDate": "2015-12-28T14:43:43.287", "Title": "How to find out the implementation details for a certain standard C++ function?", "AcceptedAnswerId": "34485250", "LastEditDate": "2017-05-23T12:31:23.930", "Id": "34485220", "Score": "1", "Body": "<p>Let's look for example at <code>std::normal_distribution</code>.</p>\n<p>I know that there is a handful of algorithms to sample from a normal distribution (reference: <a href=\"http://en.wikipedia.org/wiki/Normal_distribution#Generating_values_from_normal_distribution\" rel=\"nofollow noreferrer\">Wikipedia</a>). And I know that the standard specification usually leaves it to the implementation to choose the algorithm (reference: <a href=\"https://stackoverflow.com/questions/24550963/stl-random-distributions-and-portability\">SO</a>).</p>\n<p>However, it is sometimes required to specify which algorithm is in use under the hood. How to find out the details about the implementation? </p>\n<p>(I admit that I don't know much about the different implementations of the C++ standard library that exist in this world. Mostly, I'm using the ones shipped with XCode/clang, gcc and MSVC.)</p>\n", "Tags": "<c++><c++11><standard-library>", "OwnerUserId": "3388962", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_34485220_34485250_0": {"section_id": 3665, "quality": 1.0, "length": 12}, "so_34485220_34485250_2": {"section_id": 3665, "quality": 0.75, "length": 6}}, "n3337": {"so_34485220_34485250_0": {"section_id": 3527, "quality": 1.0, "length": 12}, "so_34485220_34485250_2": {"section_id": 3527, "quality": 0.75, "length": 6}}, "n4659": {"so_34485220_34485250_0": {"section_id": 4429, "quality": 1.0, "length": 12}, "so_34485220_34485250_2": {"section_id": 4429, "quality": 0.75, "length": 6}}}});