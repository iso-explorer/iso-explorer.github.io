post_cb({"bq_ids": {"n4140": {"so_48763043_48763043_1": {"length": 27, "quality": 0.75, "section_id": 6288}}, "n3337": {"so_48763043_48763043_1": {"length": 24, "quality": 0.6666666666666666, "section_id": 6048}}, "n4659": {"so_48763043_48763043_1": {"length": 27, "quality": 0.75, "section_id": 7795}}}, "48763043": {"ViewCount": "63", "Body": "<p>The <a href=\"http://en.cppreference.com/w/cpp/utility/hash\" rel=\"nofollow noreferrer\">page about <code>std::hash</code> over on cppreference.com</a> states the following since C++14:</p>\n<blockquote>\n<p id=\"so_48763043_48763043_0\">Hash functions are only required to produce the same result for the\n  same input within a single execution of a program; this allows salted\n  hashes that prevent collision DoS attacks.</p>\n</blockquote>\n<p>And indeed, the C++ Standard mentions this requirement in <a href=\"http://eel.is/c++draft/hash.requirements\" rel=\"nofollow noreferrer\">[hash.requirements]</a>, specifically for the expression <code>h(k)</code> in the table <em>Hash requirements</em>:</p>\n<blockquote>\n<p id=\"so_48763043_48763043_1\">The value returned shall depend only on the argument k for the\n  duration of the program. [\u2009Note: Thus all evaluations of the\n  expression h(k) with the same value for k yield the same result for a\n  given execution of the program. \u2014\u2009end note\u2009] [\u2009Note: For two different\n  values t1 and t2, the probability that h(t1) and h(t2) compare equal\n  should be very small, approaching 1.0 /\n  numeric_\u00adlimits\u200b::\u200bmax(). \u2014\u2009end note\u2009]</p>\n</blockquote>\n<p>It seems to me that this requirement is introduced to cater to user-provided specializations, allowing salted hashes. If I understood everything correctly, it does also allow a library-provided specialization of <code>std::hash</code> to produce different results over different executions of a program.</p>\n<p><strong>Question:</strong> Is there any implementation of the C++14 standard that provides one or more specializations for <code>std::hash</code> that do not consistently produce the same result in different executions of a program when given the exact same value as input on each execution?</p>\n", "Title": "Examples of library-provided std::hash specializations that produce different values over different executions of a program", "CreationDate": "2018-02-13T09:09:21.180", "LastActivityDate": "2018-02-13T10:11:31.910", "CommentCount": "7", "LastEditDate": "2018-02-13T10:11:31.910", "PostTypeId": "1", "LastEditorUserId": "4841248", "Id": "48763043", "Score": "1", "OwnerUserId": "4841248", "Tags": "<c++><hash>", "AnswerCount": "0"}});