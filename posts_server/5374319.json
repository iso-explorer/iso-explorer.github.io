post_cb({"5374319": {"CommentCount": "2", "ViewCount": "125", "PostTypeId": "1", "LastEditorUserId": "165520", "CreationDate": "2011-03-21T05:59:07.653", "LastActivityDate": "2011-03-21T09:40:35.393", "Title": "assignment operation confusion", "AcceptedAnswerId": "5374363", "LastEditDate": "2011-03-21T09:40:35.393", "Id": "5374319", "Score": "3", "Body": "<p>What is the output of the following code:</p>\n<pre><code>int main() {\n  int k = (k = 2) + (k = 3) + (k = 5);\n  printf(\"%d\", k);\n}\n</code></pre>\n<p>It does not give any error, why? I think it should give error because the assignment operations are on the same line as the definition of <code>k</code>.</p>\n<p>What I mean is <code>int i = i;</code> cannot compile. \nBut it compiles. Why? What will be the output and why?</p>\n", "Tags": "<c++><c><declaration><variable-assignment>", "OwnerUserId": "668907", "AnswerCount": "3"}, "5374361": {"ParentId": "5374319", "CommentCount": "1", "Body": "<p>int i = i; first defines the variable and then assigns a value to it.  In C you can read from an uninitialized variable.  It's never a good idea, and some compilers will issue a warning message, but it's possible.</p>\n<p>And in C, assignments are also expressions.  The output will be \"10\", or it would be if you had a 'k' there, instead of an 'a'.</p>\n", "OwnerUserId": "343489", "PostTypeId": "2", "Id": "5374361", "Score": "0", "CreationDate": "2011-03-21T06:07:18.420", "LastActivityDate": "2011-03-21T06:07:18.420"}, "5374363": {"ParentId": "5374319", "LastEditDate": "2017-05-23T12:03:55.223", "CommentCount": "3", "CreationDate": "2011-03-21T06:07:53.407", "OwnerUserId": "165520", "LastEditorUserId": "-1", "PostTypeId": "2", "Id": "5374363", "Score": "7", "Body": "<p><code>int i = i</code> compiles because 3.3.1/1 (C++03) says</p>\n<blockquote>\n<p id=\"so_5374319_5374363_0\">The point of declaration for a name is immediately after its complete declarator and before its initializer </p>\n</blockquote>\n<p>So <code>i</code> is initialized with its own indeterminate value.</p>\n<p>However the code invokes Undefined Behaviour because <code>k</code> is being modified more than once between two sequence points. Read this FAQ on <a href=\"https://stackoverflow.com/questions/4176328/undefined-behavior-and-sequence-points\">Undefined Behaviour and Sequence Points</a></p>\n", "LastActivityDate": "2011-03-21T06:07:53.407"}, "5374498": {"ParentId": "5374319", "CommentCount": "1", "CreationDate": "2011-03-21T06:29:45.147", "Id": "5374498", "PostTypeId": "2", "OwnerDisplayName": "shelman", "Score": "0", "Body": "<p>Wow, I got 11 too.  I think k is getting assigned to 3 twice and then once to 5 for the addition.  Making it just <code>int k = (k=2)+(k=3)</code> yields 6, and <code>int k = (k=2)+(k=4)</code> yields 8, while <code>int k = (k=2)+(k=4)+(k=5)</code> gives 13.  <code>int k = (k=2)+(k=4)+(k=5)+(k=6)</code> gives 19 (4+4+5+6).<br>\n<p>\nMy guess?  The addition is done left to right.  The first two (k=x) expressions are added, and the result is stored in a register or on the stack.  However, since it is k+k for this expression, both values being added are whatever k currently is, which is the second expression because it is evaluated after the other (overriding its assignment to k).  However, after this initial add, the result is stored elsewhere, so is now safe from tampering (changing k will not affect it).  Moving from left to right, each successive addition reassigns k (not affected the running sum), and adds k to the running sum.</p>\n</br></p>", "LastActivityDate": "2011-03-21T06:29:45.147"}, "bq_ids": {"n4140": {"so_5374319_5374363_0": {"section_id": 7049, "quality": 0.8333333333333334, "length": 10}}, "n3337": {"so_5374319_5374363_0": {"section_id": 6794, "quality": 0.8333333333333334, "length": 10}}, "n4659": {"so_5374319_5374363_0": {"section_id": 8546, "quality": 0.8333333333333334, "length": 10}}}});