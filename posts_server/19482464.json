post_cb({"bq_ids": {"n4140": {"so_19482464_19482509_1": {"length": 27, "quality": 0.9642857142857143, "section_id": 6107}}, "n3337": {"so_19482464_19482509_1": {"length": 27, "quality": 0.9642857142857143, "section_id": 5873}}, "n4659": {"so_19482464_19482509_1": {"length": 27, "quality": 0.9642857142857143, "section_id": 7604}}}, "19482519": {"Id": "19482519", "PostTypeId": "2", "Body": "<p>When the operator delete is used the type of the deleted object is not specified. So I do not see a problem because as I have understood you have no any inheritance of the structures.</p>\n", "LastActivityDate": "2013-10-20T20:31:49.663", "CommentCount": "1", "CreationDate": "2013-10-20T20:31:49.663", "ParentId": "19482464", "Score": "-1", "OwnerUserId": "2877241"}, "19482464": {"ViewCount": "128", "Body": "<p>This is the code that I have:</p>\n<pre><code>struct WndProcStatus {\n    WNDPROC OrgWndProc;\n};\n\nstruct ButtonWndProcStatus {\n    WNDPROC OrgWndProc;\n    bool bIsPressed;\n    bool bIsFocused;\n    bool bIsDefault;\n    bool bIsDisabled;\n    bool bDrawFocusRect;\n    bool bMouseOver;\n    bool bShowAccel;\n};\n\nstruct EditBoxWndProcStatus {\n    WNDPROC OrgWndProc;\n    bool bIsFocused;\n    bool bIsDisabled;\n    bool bMouseOver;\n    bool bTextSelected;\n};\n</code></pre>\n<p>In my program, I will have a pointer to a ButtonWndProcStatus structure or EditBoxWndProcStatus structure, but I won't know which one it is.</p>\n<p>Can I cast the pointer as WndProcStatus and then use the delete command to delete the structure from memory?</p>\n<p>The pointers were created by using <code>LONG ptr = (LONG)new ButtonWndProcStatus()</code> or <code>LONG ptr = (LONG)new EditWndProcStatus()</code>.</p>\n", "AcceptedAnswerId": "19482514", "Title": "How do I delete a stucture without knowing its type?", "CreationDate": "2013-10-20T20:26:49.733", "Id": "19482464", "CommentCount": "1", "PostTypeId": "1", "LastActivityDate": "2013-10-20T20:41:29.397", "Score": "0", "OwnerUserId": "2392291", "Tags": "<c++><structure>", "AnswerCount": "3"}, "19482509": {"Id": "19482509", "PostTypeId": "2", "Body": "<h2>No.</h2>\n<blockquote>\n<p id=\"so_19482464_19482509_0\"><em>delete-expression</em>:   ::<sub><em>opt</em></sub><strong>delete</strong> <em>cast-expression</em></p>\n<p id=\"so_19482464_19482509_1\">In the first alternative (delete object), if the static type of the\n  object to be deleted is different from its dynamic type, the static\n  type shall be a base class of the dynamic type of the object to be\n  deleted and the static type shall have a virtual destructor or the\n  behavior is undefined [5.3.5 / 3]</p>\n</blockquote>\n<p>The operand of <code>delete</code> should be as same as allocated type (unless base/derived situation)</p>\n", "LastEditorUserId": "952747", "LastActivityDate": "2013-10-20T20:41:29.397", "Score": "1", "CreationDate": "2013-10-20T20:31:03.270", "ParentId": "19482464", "CommentCount": "0", "OwnerUserId": "952747", "LastEditDate": "2013-10-20T20:41:29.397"}, "19482514": {"Id": "19482514", "PostTypeId": "2", "Body": "<p>No, you can't do that. It can only work if you use inheritance and if you give a virtual destructor to the structs/classes:</p>\n<pre><code>struct WndProcStatus\n{\n    virtual ~WndProcStatus() = default;\n\n    WNDPROC OrgWndProc;\n};\n\nstruct ButtonWndProcStatus\n    : public WndProcStatus // derive, this also inherits OrgWndProc\n{\n    bool bIsPressed;\n    bool bIsFocused;\n    bool bIsDefault;\n    bool bIsDisabled;\n    bool bDrawFocusRect;\n    bool bMouseOver;\n    bool bShowAccel;\n};\n</code></pre>\n<p>And now it should be safe to delete through a pointer. Also, you can easily write</p>\n<pre><code>WndProcStatus* p = new ButtonWndProcStatus; // look ma, no cast!\ndelete p; // this is now safe\n</code></pre>\n", "LastActivityDate": "2013-10-20T20:31:17.087", "CommentCount": "0", "CreationDate": "2013-10-20T20:31:17.087", "ParentId": "19482464", "Score": "1", "OwnerUserId": "2073257"}});