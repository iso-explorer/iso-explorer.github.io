post_cb({"876048": {"CommentCount": "0", "ViewCount": "41917", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2009-05-18T02:43:35.333", "LastActivityDate": "2013-04-18T10:46:48.987", "Title": "Why can I define structures and classes within a function in C++?", "FavoriteCount": "18", "LastEditDate": "2017-05-23T11:54:44.827", "Id": "876048", "Score": "67", "Body": "<p>I just mistakenly did something like this in C++, and it works. Why can I do this?</p>\n<pre><code>int main(int argc, char** argv) {\n    struct MyStruct\n    {\n      int somevalue;\n    };\n\n    MyStruct s;\n    s.somevalue = 5;\n}\n</code></pre>\n<p>Now after doing this, I kind of remembered reading about this trick someplace, a long time ago, as a kind of poor-man's functional programming tool for C++, but I can't remember why this is valid, or where I read it. </p>\n<p>Answers to either question are welcome!</p>\n<p>Note: Although when writing the question I didn't get any references to <a href=\"https://stackoverflow.com/questions/681068/declaring-structures-within-functions-in-c\">this question</a>, the current side-bar points it out so I'll put it here for reference, either way the question is different but might be useful.</p>\n", "Tags": "<c++><data-structures><functional-programming>", "OwnerUserId": "15124", "AnswerCount": "6"}, "876066": {"ParentId": "876048", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>It's mentioned at, for example, section \"7.8: Local classes: classes inside functions\" of <a href=\"http://www.icce.rug.nl/documents/cplusplus/cplusplus07.html\" rel=\"nofollow noreferrer\">http://www.icce.rug.nl/documents/cplusplus/cplusplus07.html</a> which calls it a \"local class\" and says it \"can be very useful in advanced applications involving inheritance or templates\".</p>\n", "OwnerUserId": "49942", "LastEditorUserId": "49942", "LastEditDate": "2012-12-30T18:18:07.983", "Id": "876066", "Score": "4", "CreationDate": "2009-05-18T02:51:40.400", "LastActivityDate": "2012-12-30T18:18:07.983"}, "876177": {"ParentId": "876048", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>It's for making arrays of objects that are properly initialized.</p>\n<p>I have a class C which has no default constructor.  I want an array of objects of class C.  I figure out how I want those objects initialized, then derive a class D from C with a static method which provides the argument for the C in D's default constructor:</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass C {\npublic:\n  C(int x) : mData(x)  {}\n  int method() { return mData; }\n  // ...\nprivate:\n  int mData;\n};\n\nvoid f() {\n\n  // Here I am in f.  I need an array of 50 C objects starting with C(22)\n\n  class D : public C {\n  public:\n    D() : C(D::clicker()) {}\n  private:\n    // I want my C objects to be initialized with consecutive\n    // integers, starting at 22.\n    static int clicker() { \n      static int current = 22;\n      return current++;\n    } \n  };\n\n  D array[50] ;\n\n  // Now I will display the object in position 11 to verify it got initialized\n  // with the right value.  \n\n  cout &lt;&lt; \"This should be 33: --&gt; \" &lt;&lt; array[11].method() &lt;&lt; endl;\n\n  cout &lt;&lt; \"sizodf(C): \" &lt;&lt; sizeof(C) &lt;&lt; endl;\n  cout &lt;&lt; \"sizeof(D): \" &lt;&lt; sizeof(D) &lt;&lt; endl;\n\n  return;\n\n}\n\nint main(int, char **) {\n  f();\n  return 0;\n}\n</code></pre>\n<p>For the sake of simplicity, this example uses a trivial non-default constructor and a case where the values are known at compile time.  It is straightforward to extend this technique to cases where you want an array of objects initialized with values that are known only at runtime.</p>\n", "OwnerUserId": "29403", "LastEditorUserId": "29403", "LastEditDate": "2013-04-17T21:02:51.543", "Id": "876177", "Score": "2", "CreationDate": "2009-05-18T03:43:11.290", "LastActivityDate": "2013-04-17T21:02:51.543"}, "876060": {"ParentId": "876048", "CommentCount": "3", "Body": "<p>Well, basically, why not?  A <code>struct</code> in C (going back to the dawn of time) was just a way to declare a record structure.  If you want one, why not be able to declare it where you would declare a simple variable?</p>\n<p>Once you do that, then remember that a goal of C++ was to be compatible with C if at all possible.  So it stayed.</p>\n", "OwnerUserId": "35092", "PostTypeId": "2", "Id": "876060", "Score": "8", "CreationDate": "2009-05-18T02:47:39.973", "LastActivityDate": "2009-05-18T02:47:39.973"}, "7762286": {"ParentId": "876048", "CommentCount": "2", "Body": "<p>It's actually very useful for doing some stack-based exception-safety work. Or general cleanup from a function with multiple return points. This is often called the RAII (resource acquisition is initialzation) idiom.</p>\n<pre><code>void function()\n{\n\n    struct Cleaner\n    {\n        Cleaner()\n        {\n            // do some initialization code in here\n            // maybe start some transaction, or acquire a mutex or something\n        }\n\n        ~Cleaner()\n        {\n             // do the associated cleanup\n             // (commit your transaction, release your mutex, etc.)\n        }\n    };\n\n    Cleaner cleaner();\n\n    // Now do something really dangerous\n    // But you know that even in the case of an uncaught exception, \n    // ~Cleaner will be called.\n\n    // Or alternatively, write some ill-advised code with multiple return points here.\n    // No matter where you return from the function ~Cleaner will be called.\n}\n</code></pre>\n", "OwnerUserId": "242530", "PostTypeId": "2", "Id": "7762286", "Score": "6", "CreationDate": "2011-10-14T01:44:44.047", "LastActivityDate": "2011-10-14T01:44:44.047"}, "876069": {"ParentId": "876048", "PostTypeId": "2", "CommentCount": "6", "Body": "<p><strong>[EDIT 18/4/2013]:</strong> Happily, the restriction mentioned below has been lifted in C++11, so locally defined classes are useful after all!  Thanks to commenter bamboon.</p>\n<p>The ability to define classes locally <em>would</em> make creating custom functors (classes with an <code>operator()()</code>, e.g. comparison functions for passing to <code>std::sort()</code> or \"loop bodies\" to be used with <code>std::for_each()</code>) much more convenient.</p>\n<p><strong>Unfortunately, C++ forbids using locally-defined classes with templates</strong>, as they have no linkage.  Since most applications of functors involve template types that are templated on the functor type, locally defined classes can't be used for this -- you must define them outside the function. :(</p>\n<p><strong>[EDIT 1/11/2009]</strong></p>\n<p>The relevant quote from the standard is:</p>\n<blockquote>\n<p id=\"so_876048_876069_0\"><strong>14.3.1/2:</strong> .A local type, a type with no linkage, an unnamed type or a type compounded from any of these types shall not be used as a template-argument for a template type-parameter.</p>\n</blockquote>\n", "OwnerUserId": "47984", "LastEditorUserId": "47984", "LastEditDate": "2013-04-18T10:46:48.987", "Id": "876069", "Score": "61", "CreationDate": "2009-05-18T02:55:22.450", "LastActivityDate": "2013-04-18T10:46:48.987"}, "bq_ids": {"n4140": {"so_876048_876069_0": {"section_id": 7141, "quality": 0.6153846153846154, "length": 8}}, "n3337": {"so_876048_876069_0": {"section_id": 6885, "quality": 0.6153846153846154, "length": 8}}, "n4659": {"so_876048_876069_0": {"section_id": 8642, "quality": 0.6153846153846154, "length": 8}}}, "876109": {"ParentId": "876048", "CommentCount": "5", "Body": "<p>One application of locally-defined C++ classes is in <a href=\"http://en.wikipedia.org/wiki/Factory_method_pattern\" rel=\"noreferrer\">Factory design pattern</a>:</p>\n<pre><code>\n// In some header\nclass Base\n{\npublic:\n    virtual ~Base() {}\n    virtual void DoStuff() = 0;\n};\n\nBase* CreateBase( const Param&amp; );\n\n// in some .cpp file\nBase* CreateBase( const Params&amp; p )\n{\n    struct Impl: Base\n    {\n        virtual void DoStuff() { ... }\n    };\n\n    ...\n    return new Impl;\n}\n\n</code></pre>\n<p>Though you can do the same with anonymous namespace.</p>\n", "OwnerUserId": "106671", "PostTypeId": "2", "Id": "876109", "Score": "25", "CreationDate": "2009-05-18T03:15:54.100", "LastActivityDate": "2009-05-18T03:15:54.100"}});