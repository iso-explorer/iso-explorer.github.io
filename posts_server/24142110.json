post_cb({"24143096": {"ParentId": "24142110", "CommentCount": "2", "Body": "<p>I believe you can use thread-local storage to count how many threads called your function:</p>\n<pre><code>namespace {\n    thread_local bool used = false;\n}\n\n\nvoid register_call()\n{\n    if( !used ) {\n        used = true;\n        ++count;\n    }\n}\n</code></pre>\n<p>Of course this code is to show the idea, in real code it can be a pointer to container, that holds addresses of functions which are in interest etc.</p>\n", "OwnerUserId": "432358", "PostTypeId": "2", "Id": "24143096", "Score": "1", "CreationDate": "2014-06-10T14:04:54.450", "LastActivityDate": "2014-06-10T14:04:54.450"}, "24142110": {"CommentCount": "5", "ViewCount": "911", "PostTypeId": "1", "LastEditorUserId": "3510483", "CreationDate": "2014-06-10T13:19:25.293", "LastActivityDate": "2014-06-10T14:04:54.450", "Title": "C++ : How to count the number of threads used to call a function?", "FavoriteCount": "1", "LastEditDate": "2014-06-10T13:41:35.440", "Id": "24142110", "Score": "2", "Body": "<p>I would like to know how many different threads used an object function during its lifetime.</p>\n<p>My naive approach was to create a base class to register the id of calling threads :</p>\n<pre><code>class threaded_object\n{\npublic:\n    virtual ~threaded_object() {}\n\nprotected:\n    void register_call()\n    {\n                    // error ! if the ID is reused, the new thread wont be accounted for.\n        callers_ids.insert(std::this_thread::get_id());\n    }\n\n    size_t get_threads_cout() const\n    {\n        return callers_ids.size();\n    }\n\nprivate:\n    std::set&lt;std::thread::id&gt; callers_ids;\n};\n</code></pre>\n<p>And to inherits it in my client classes, here I will count how many threads used foo()</p>\n<pre><code>class MyObject : public threaded_object\n{\n void foo()\n {\n    register_call();\n    // ...\n }\n};\n</code></pre>\n<p>But it doesn't work in the general case, the standards says in section \u00a7 30.3.1.1</p>\n<blockquote>\n<p id=\"so_24142110_24142110_0\">The library may reuse the value of a thread::id of a terminated thread\n  that can no longer be joined</p>\n</blockquote>\n<p><strong>Question:</strong></p>\n<p>Is there a portable and safe way to do this ?</p>\n", "Tags": "<c++><multithreading><c++11>", "OwnerUserId": "3510483", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_24142110_24142110_0": {"section_id": 2693, "quality": 0.9090909090909091, "length": 10}}, "n3337": {"so_24142110_24142110_0": {"section_id": 2655, "quality": 0.9090909090909091, "length": 10}}, "n4659": {"so_24142110_24142110_0": {"section_id": 3433, "quality": 0.9090909090909091, "length": 10}}}});