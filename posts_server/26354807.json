post_cb({"26354862": {"ParentId": "26354807", "CommentCount": "0", "Body": "<p>You must change all the <code>fun()</code>s to return <code>Base1</code>.</p>\n", "OwnerUserId": "4323", "PostTypeId": "2", "Id": "26354862", "Score": "-2", "CreationDate": "2014-10-14T07:20:47.183", "LastActivityDate": "2014-10-14T07:20:47.183"}, "26355071": {"ParentId": "26354807", "CommentCount": "0", "Body": "<p>The return type of an overriding function shall be either identical to the return type of the overridden function or covariant with the classes of the functions. If a function D::f overrides a function B::f, the return types of the functions are covariant if they satisfy the following criteria:</p>\n<p>-both are pointers to classes or references to classes<br/>\n-the class in the return type of B::f is the same class as the class in the return type of D::f or, is an unambiguous direct or indirect base class of the class in the return type of D::f and is accessible in D<br/>\n-both pointers or references have the same cv-qualification and the class type in the return type of D::f has the same cv-qualification as or less cv-qualification than the class type in the return type of B::f.</p>\n", "OwnerUserId": "4108963", "PostTypeId": "2", "Id": "26355071", "Score": "2", "CreationDate": "2014-10-14T07:30:27.090", "LastActivityDate": "2014-10-14T07:30:27.090"}, "26354955": {"ParentId": "26354807", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>Assuming you are trying to use <a href=\"http://en.wikipedia.org/wiki/Covariant_return_type\" rel=\"nofollow\"><em>covariance of return types</em></a>, your attempts are valid except for the fact  that the types must be using a public inheritance:</p>\n<pre><code>class D1:public Base1{\n//       ~~~~~^\n\n};\n\nclass D2:public Base1{\n//       ~~~~~^    \n};\n\nclass _D1 : Base2{\npublic:\n    D1* fun(){} // ok now, D1 inherits publicly from Base1\n};\n\nclass _D2 : Base2{\npublic:\n    D2* fun(){} // ok now, D2 inherits publicly from Base1\n};\n</code></pre>\n<p>Just like you can't cast <code>D2*</code> to <code>Base1*</code> unless you are using a public inheritance, the same applies here.</p>\n<p><a href=\"http://coliru.stacked-crooked.com/a/ae78ca2fc1862876\" rel=\"nofollow\"><strong>DEMO</strong></a></p>\n<hr>\n<p>Alternatively, you would have to make those classes to be friends, so that they <em>have access</em> to the private base class:</p>\n<pre><code>class _D1;\nclass _D2;\n\nclass D1 : Base1{\n    friend class _D1;\n};\n\nclass D2 : Base1{\n    friend class _D2;\n};\n</code></pre>\n<hr>\n<p>C++ Standard reference:</p>\n<blockquote>\n<h3>\u00a7 10.3 Virtual functions <code>[class.virtual]</code></h3>\n<ol start=\"7\">\n<li><p id=\"so_26354807_26354955_0\">The return type of an overriding function shall be either identical to the return type of the overridden function or covariant with the classes of the functions. If a function <code>D::f</code> overrides a function <code>B::f</code>, the return types of the functions are covariant if they satisfy the following criteria:</p>\n<p id=\"so_26354807_26354955_1\">\u2014 both are pointers to classes, both are lvalue references to classes, or both are rvalue references to classes</p>\n<p id=\"so_26354807_26354955_2\">\u2014 the class in the return type of <code>B::f</code> is the same class as the class in the return type of <code>D::f</code>, or is an unambiguous <strong>and accessible</strong> direct or indirect base class of the class in the return type of <code>D::f</code></p>\n<p id=\"so_26354807_26354955_3\">\u2014 both pointers or references have the same cv-qualification and the class type in the return type of <code>D::f</code> has the same cv-qualification as or less cv-qualification than the class type in the return type of <code>B::f</code>.</p></li>\n</ol>\n</blockquote>\n</hr></hr>", "OwnerUserId": "3953764", "LastEditorUserId": "3953764", "LastEditDate": "2015-06-27T21:06:07.053", "Id": "26354955", "Score": "4", "CreationDate": "2014-10-14T07:25:19.223", "LastActivityDate": "2015-06-27T21:06:07.053"}, "26354807": {"CommentCount": "6", "ViewCount": "1459", "PostTypeId": "1", "LastEditorUserId": "3953764", "CreationDate": "2014-10-14T07:18:01.357", "LastActivityDate": "2015-06-27T21:06:07.053", "Title": "Overriding the virtual functions with different return types raises error with private inheritance", "AcceptedAnswerId": "26354955", "LastEditDate": "2014-10-14T07:18:56.983", "Id": "26354807", "Score": "3", "Body": "<p>In the following code I got the following compilation errors:</p>\n<pre><code>1&gt;c:\\users\\mittamani\\desktop\\06-10\\over_riding_test\\over_riding_test\\over_riding_test.cpp(33) : error C2555: '_D1::fun': overriding virtual function return type differs and is not covariant from 'Base2::fun'\n1&gt;        c:\\users\\mittamani\\desktop\\06-10\\over_riding_test\\over_riding_test\\over_riding_test.cpp(28) : see declaration of 'Base2::fun'\n1&gt;        'Base1' : base class is not accessible\n1&gt;c:\\users\\mittamani\\desktop\\06-10\\over_riding_test\\over_riding_test\\over_riding_test.cpp(37) : error C2555: '_D2::fun': overriding virtual function return type differs and is not covariant from 'Base2::fun'\n1&gt;        c:\\users\\mittamani\\desktop\\06-10\\over_riding_test\\over_riding_test\\over_riding_test.cpp(28) : see declaration of 'Base2::fun'\n1&gt;        'Base1' : base class is not accessible\n1&gt;Build log was saved at \"file://c:\\Users\\mittamani\\Desktop\\06-10\\Over_riding_Test\\Over_riding_Test\\Debug\\BuildLog.htm\"\n1&gt;Over_riding_Test - 2 error(s), 0 warning(s)\n</code></pre>\n<p>Here is the code:</p>\n<pre><code>class Base1{\npublic:\n    Base1(){}\n    virtual ~Base1(){}\n};\n\nclass D1:Base1{\n\n};\n\nclass D2:Base1{\n\n};\n\nclass Base2{\npublic:\n    Base2(){}\n    virtual ~Base2(){}\n    virtual Base1 * fun() = 0;\n};\n\nclass _D1:Base2{\npublic:\n    D1* fun(){}\n};\n\nclass _D2:Base2{\npublic:\n    D2* fun(){}\n};\n</code></pre>\n<p>By the way, I am fresher to C++.. plz help..thanks in advance..</p>\n", "Tags": "<c++><return-type><method-overriding>", "OwnerUserId": "4140315", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_26354807_26354955_1": {"section_id": 7008, "quality": 1.0, "length": 11}, "so_26354807_26354955_0": {"section_id": 7008, "quality": 0.92, "length": 23}, "so_26354807_26354955_3": {"section_id": 7008, "quality": 1.0, "length": 19}, "so_26354807_26354955_2": {"section_id": 7008, "quality": 1.0, "length": 17}}, "n3337": {"so_26354807_26354955_1": {"section_id": 6754, "quality": 1.0, "length": 11}, "so_26354807_26354955_0": {"section_id": 6754, "quality": 0.92, "length": 23}, "so_26354807_26354955_3": {"section_id": 6754, "quality": 1.0, "length": 19}, "so_26354807_26354955_2": {"section_id": 6754, "quality": 1.0, "length": 17}}, "n4659": {"so_26354807_26354955_1": {"section_id": 8505, "quality": 1.0, "length": 11}, "so_26354807_26354955_0": {"section_id": 8505, "quality": 0.92, "length": 23}, "so_26354807_26354955_3": {"section_id": 8505, "quality": 1.0, "length": 19}, "so_26354807_26354955_2": {"section_id": 8505, "quality": 1.0, "length": 17}}}});