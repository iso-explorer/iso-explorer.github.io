post_cb({"bq_ids": {"n4140": {"so_28541488_28542142_1": {"length": 7, "quality": 0.875, "section_id": 775}, "so_28541488_28542142_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 775}}, "n3337": {"so_28541488_28542142_1": {"length": 7, "quality": 0.875, "section_id": 762}, "so_28541488_28542142_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 762}}}, "28541732": {"CommentCount": "2", "Body": "<p>The braces in aggregate initialisation are largely optional, so you can write:</p>\n<pre><code>S c_arr[] = {1, 2, 3, 4};  // OK\nstd::array&lt;S, 2&gt; std_arr = {1, 2, 3, 4};  // OK\n</code></pre>\n<p>If you do add braces, though, then the braces are taken to apply to the next sub-object. Unfortunately, when you start nesting, this leads to silly code being valid, and sensible code like yours being invalid.</p>\n<pre><code>std::array&lt;S, 2&gt; std_arr = {{1, 2, 3, 4}};  // OK\nstd::array&lt;S, 2&gt; std_arr = {1, 2, {3, 4}};  // OK\nstd::array&lt;S, 2&gt; std_arr = {1, {2}, {3, 4}};  // OK\n</code></pre>\n<p>These are all okay. <code>{1, 2, 3, 4}</code> is a valid initialiser for the <code>S[2]</code> member of <code>std_arr</code>. <code>{2}</code> is okay because it is an attempt to initialise an <code>int</code>, and <code>{2}</code> is a valid initialiser for that. <code>{3, 4}</code> is taken as an initialiser for <code>S</code>, and it's also valid for that.</p>\n<pre><code>std::array&lt;S, 2&gt; std_arr = {{1, 2}, {3, 4}};  // error\n</code></pre>\n<p>This is not okay because <code>{1, 2}</code> is taken as a valid initialiser for the <code>S[2]</code> member. The remaining <code>int</code> sub-objects are initialised to zero.</p>\n<p>You then have <code>{3, 4}</code>, but there are no more members to initialise.</p>\n<p>As pointed out in the comments,</p>\n<pre><code>std::array&lt;S, 2&gt; std_arr = {{{1, 2}, {3, 4}}};\n</code></pre>\n<p>also works. The nested <code>{{1, 2}, {3, 4}}</code> is an initialiser for the <code>S[2]</code> member. The <code>{1, 2}</code> is an initialiser for the first <code>S</code> element. The <code>{3, 4}</code> is an initialiser for the second <code>S</code> element.</p>\n<p><sub>I'm assuming here that <code>std::array&lt;S, 2&gt;</code> contains an array member of type <code>S[2]</code>, which it does on current implementations, and which I believe is likely to become guaranteed, but which has been covered on SO before and is not currently guaranteed.</sub></p>\n", "CreationDate": "2015-02-16T12:46:04.367", "ParentId": "28541488", "Id": "28541732", "LastActivityDate": "2015-02-16T12:46:04.367", "PostTypeId": "2", "Score": "7", "OwnerUserId": "743382"}, "28541488": {"CreationDate": "2015-02-16T12:29:42.763", "ViewCount": "544", "ClosedDate": "2017-07-23T12:48:13.823", "AcceptedAnswerId": "28541732", "Score": "5", "Title": "Nested aggregate initialization of std::array", "CommentCount": "7", "Body": "<p>I wonder, why declaration of <code>std_arr</code> in the following code generates an error, while <code>c_arr</code> compiles well:</p>\n<pre><code>struct S { int a, b; };\n\nS c_arr[] = {{1, 2}, {3, 4}};  // OK\nstd::array&lt;S, 2&gt; std_arr = {{1, 2}, {3, 4}};  // Error: too many initializers\n</code></pre>\n<p>Both <code>std::array</code> and <code>S</code> are aggregates. From <a href=\"http://en.cppreference.com/w/cpp/language/aggregate_initialization\">aggregate initialization on cppreference.com</a>:</p>\n<blockquote>\n<p id=\"so_28541488_28541488_0\">If the initializer clause is a nested braced-init-list (which is not an expression and has no type), the corresponding class member is\n  itself an aggregate: aggregate initialization is recursive.</p>\n</blockquote>\n<p>Why this initialization of <code>std::array</code> does not compile?</p>\n", "Tags": "<c++><arrays><initialization><c++14><aggregate-initialization>", "Id": "28541488", "LastActivityDate": "2015-02-16T13:08:46.713", "PostTypeId": "1", "AnswerCount": "2", "OwnerUserId": "261217"}, "28542142": {"CreationDate": "2015-02-16T13:08:46.713", "Body": "<p>Since the question is tagged C++14, I'll be quoting N4140. In [array] it says that <code>std::array</code> is an aggregate:</p>\n<blockquote>\n<p id=\"so_28541488_28542142_0\">2 An <code>array</code> is an aggregate (8.5.1) that can be initialized with the\n  syntax</p>\n<pre>  array a = { <em>initializer-list</em> };</pre>\n<p id=\"so_28541488_28542142_1\">where <em>initializer-list</em> is a comma-separated list of up to <code>N</code> elements\n  whose types are convertible to <code>T</code>.</p>\n</blockquote>\n<p>In general, it's agreed that you need an extra pair of outer braces to initialize the underlying aggregate, which looks something like <code>T elems[N]</code>. In paragraph 3, it's explained that this is for exposition purposes and not actually part of the interface. In practice, however, libstdc++ and Clang implement it like that:</p>\n<pre><code>  template&lt;typename _Tp, std::size_t _Nm&gt;\n    struct __array_traits\n    {\n      typedef _Tp _Type[_Nm];\n\n      static constexpr _Tp&amp;\n      _S_ref(const _Type&amp; __t, std::size_t __n) noexcept\n      { return const_cast&lt;_Tp&amp;&gt;(__t[__n]); }\n    };\n\n  template&lt;typename _Tp, std::size_t _Nm&gt;\n    struct array\n    {\n      /* Snip */\n\n      // Support for zero-sized arrays mandatory.\n      typedef _GLIBCXX_STD_C::__array_traits&lt;_Tp, _Nm&gt; _AT_Type;\n      typename _AT_Type::_Type                         _M_elems;\n</code></pre>\n<p>Clang:</p>\n<pre><code>template &lt;class _Tp, size_t _Size&gt;\nstruct _LIBCPP_TYPE_VIS_ONLY array\n{\n    /* Snip */\n\n    value_type __elems_[_Size &gt; 0 ? _Size : 1];\n</code></pre>\n<p>There are changes between C++11 and C++14 regarding aggregate initialization, however none that would make:</p>\n<pre><code>std::array&lt;S, 2&gt; std_arr = {{1, 2}, {3, 4}};\n</code></pre>\n<p>not ill-formed.</p>\n", "PostTypeId": "2", "OwnerDisplayName": "user3920237", "ParentId": "28541488", "LastActivityDate": "2015-02-16T13:08:46.713", "Id": "28542142", "CommentCount": "0", "Score": "3"}});