post_cb({"20793712": {"Id": "20793712", "PostTypeId": "2", "Body": "<p>Main two syntax fixes:</p>\n<ul>\n<li><p>Semicolon at end of class definition.</p></li>\n<li><p>Replacing the word <code>class</code> with <code>void</code> for the return type of the function definition.</p></li>\n</ul>\n<p>Main problem, that you can't partially specialize a function.</p>\n<p>Partially specializing the original class is not a good solution, because then the other original member declarations have to be inherited in or duplicated in the specialization.</p>\n<p>General solution: use a static function member of a class, which can be partially specialized.</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\ntemplate &lt;class T, int K&gt;\nclass URLListNode {\n    // Some other stuff\npublic:\n    void split( URLListNode*, URLListNode* );\n};\n\nnamespace detail {\n    template &lt;class T, int K&gt;\n    struct Impl\n    {\n        typedef URLListNode&lt;T, K&gt; Node;\n        static void split( Node&amp; self, Node*, Node* )\n        { (void) self; cout &lt;&lt; \"Generic split\" &lt;&lt; endl; }\n    };\n\n    template &lt;class T&gt;\n    struct Impl&lt;T, 1&gt;\n    {\n        typedef URLListNode&lt;T, 1&gt; Node;\n        static void split( Node&amp; self, Node*, Node* )\n        { (void) self; cout &lt;&lt; \"Partially specialized split.\" &lt;&lt; endl; }\n    };\n\n}  // namespace detail\n\ntemplate &lt;class T, int K&gt;\nvoid URLListNode&lt;T,K&gt;::split( URLListNode* n1, URLListNode* n2 )\n{\n    detail::Impl&lt;T, K&gt;::split( *this, n1, n2 );\n}\n\nint main()\n{\n    URLListNode&lt;int, 0&gt;().split( 0, 0 );     // Generic.\n    URLListNode&lt;int, 1&gt;().split( 0, 0 );     // Partially specialized.\n}\n</code></pre>\n", "LastEditorUserId": "464581", "LastActivityDate": "2013-12-27T02:06:28.070", "Score": "4", "CreationDate": "2013-12-27T01:59:04.967", "ParentId": "20793345", "CommentCount": "1", "OwnerUserId": "464581", "LastEditDate": "2013-12-27T02:06:28.070"}, "20793676": {"Id": "20793676", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_20793345_20793676_0\">That does what I want it to do, but is there any way of doing this\n  without creating an entire new template class? I only have a couple of\n  functions out of a fairly complex pair of classes that need to be\n  specialized.</p>\n</blockquote>\n<p>You cannot partially specialize member functions. You must specialize the whole class.</p>\n<p>14.5.5.3.1. </p>\n<blockquote>\n<p id=\"so_20793345_20793676_1\">The template parameter list of a member of a class template partial specialization shall match the template parameter list of the\n  class template partial specialization. The template argument list of a\n  member of a class template partial specialization shall match the\n  template argument list of the class template partial specialization.</p>\n</blockquote>\n", "OwnerDisplayName": "user1508519", "LastActivityDate": "2013-12-27T01:53:44.397", "Score": "0", "CreationDate": "2013-12-27T01:53:44.397", "ParentId": "20793345", "CommentCount": "0"}, "20793345": {"ViewCount": "97", "Body": "<p>I have a pair of template classes and I am attempting to create a specialization for one of my member functions for one of the classes.  The general form of what I have is:</p>\n<pre><code>template &lt;typename T, int K&gt;\nclass URLListNode {\n    // Some other stuff\n    void split( class URLListNode&lt;T,K&gt;*, class URLListNode&lt;T,K&gt; );\n}\n</code></pre>\n<p>For the general case I have:</p>\n<pre><code>template &lt;typename T, int K&gt;\nclass URLListNode&lt;T,K&gt;::split( URLListNode&lt;T,K&gt;* node1, URLListNode&lt;T,K&gt;* node2 ){\n    // Code here\n}\n</code></pre>\n<p>And that works.  I am now trying to create a specialization for the case of K=1.  Here is what I have so far:</p>\n<pre><code>template &lt;typename T&gt;\nclass URLListNode&lt;T,1&gt;::split( URLListNode&lt;T,1&gt;* n1, URLListNode&lt;T,1&gt;* n2 ) {\n    // Code here\n}\n</code></pre>\n<p>But when I try to compile, I get the following errors:</p>\n<pre><code>In file included from ../src/driver.cpp:34:0:\n../src/urllist.h:101:80: error: invalid use of incomplete type \u2018class URLListNode&lt;T, 1&gt;\u2019\nvoid URLListNode&lt;T,1&gt;::split( URLListNode&lt;T,1&gt;* node1, URLListNode&lt;T,1&gt;* node2 ) {\n                                                                            ^\n../src/urllist.h:29:7: error: declaration of \u2018class URLListNode&lt;T, 1&gt;\u2019\nclass URLListNode {\n   ^\nmake: *** [src/driver.o] Error 1\n</code></pre>\n<p>This is on g++-4.8.2</p>\n", "AcceptedAnswerId": "20793712", "Title": "C++ - Partially specializing a template class member function", "CreationDate": "2013-12-27T01:05:53.783", "Id": "20793345", "CommentCount": "0", "LastEditDate": "2013-12-27T01:49:34.480", "PostTypeId": "1", "LastEditorUserId": "2452562", "LastActivityDate": "2013-12-27T02:06:28.070", "Score": "1", "OwnerUserId": "2452562", "Tags": "<c++><templates>", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_20793345_20793676_1": {"length": 32, "quality": 0.9411764705882353, "section_id": 149}}, "n3337": {"so_20793345_20793676_1": {"length": 32, "quality": 0.9411764705882353, "section_id": 143}}, "n4659": {"so_20793345_20793676_1": {"length": 32, "quality": 0.9411764705882353, "section_id": 153}}}, "20793602": {"Id": "20793602", "PostTypeId": "2", "Body": "<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\ntemplate&lt;class T, int K&gt;\nclass URLListNode\n{\npublic:\n    void split(class URLListNode&lt;T,K&gt;*, class URLListNode&lt;T,K&gt;*)\n    {\n        cout &lt;&lt; \"split generic\" &lt;&lt; endl;\n    }\n};\n\ntemplate&lt;class T&gt;\nclass URLListNode&lt;T, 1&gt;\n{\npublic:\n    void split(class URLListNode&lt;T, 1&gt;*, class URLListNode&lt;T,1&gt;*)\n    {\n        cout &lt;&lt; \"split specific\" &lt;&lt; endl;\n    }\n};\n\nint main()\n{\n    URLListNode&lt;int, 1&gt; x;\n    x.split(&amp;x, &amp;x);\n\n    cin.get();\n}\n</code></pre>\n<p>Is this what you want?</p>\n", "LastActivityDate": "2013-12-27T01:44:09.253", "CommentCount": "3", "CreationDate": "2013-12-27T01:44:09.253", "ParentId": "20793345", "Score": "2", "OwnerUserId": "466694"}});