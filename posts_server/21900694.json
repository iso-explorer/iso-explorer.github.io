post_cb({"bq_ids": {"n4140": {"so_21900694_21901318_0": {"length": 42, "quality": 0.9767441860465116, "section_id": 234}}, "n3337": {"so_21900694_21901318_0": {"length": 42, "quality": 0.9767441860465116, "section_id": 227}}, "n4659": {"so_21900694_21901318_0": {"length": 41, "quality": 0.9534883720930233, "section_id": 244}}}, "21900694": {"ViewCount": "146", "Body": "<p>I have two test cases of a class having a static member instance. The first uses non-templated samples, while the second relies on generic object types. </p>\n<p><em>The dilemma is simple</em>: the constructor of the static member gets called before the main function (as it should), but only for the specific object types. The generic types do not exhibit the same behaviour. As the matter of fact, the constructor isn't compiled at all. It seems the compiler decided to completely overlook it as a means of (not completely justified) optimization. </p>\n<p>I would like to know what is happening and what can be done to make it work in the most elegant way possible. I presume the obvious answer would be: use that static member somewhere in the code. I'd like not to do that, as the specific type case works without making use of that static member, apart from performing some \"work\" in its constructor.</p>\n<p>The code samples:</p>\n<pre><code>//////////////////////////////////////////////\n// Specific case\n//////////////////////////////////////////////\nclass CPassive\n{\npublic:\n    CPassive()\n    {\n        printf(\" passively called \");\n    }\n};\n\nclass CActive\n{\nprivate:\n    static CPassive ms_passive;\n};\nCPassive CActive::ms_passive;\n///////////////////////////////////////////////////////////\n// GENERIC TYPES\n///////////////////////////////////////////////////////////\nclass CSample\n{\npublic:\n    CSample()\n    {\n        printf(\"sample \");\n    }\n};\n\ntemplate &lt;typename T&gt;\nclass CGenericPassive\n{\npublic:\n    CGenericPassive()\n    {\n        T sample;\n        printf(\" generic passive .. \");\n    }\nprivate:\n};\n\ntemplate &lt;typename T&gt;\nclass CGenericActive\n{\nprivate:\n    static CGenericPassive&lt;T&gt; ms_passive;\n};\ntemplate&lt;typename T&gt;\nCGenericPassive&lt;T&gt; CGenericActive&lt;T&gt;::ms_passive;\n\nint main(int argc, char** argv)\n{\n    CActive activeExample;// instantiates the static member\n    CGenericActive&lt;CSample&gt; activeExample; // obliterates the static from the class def.\n}\n</code></pre>\n", "AcceptedAnswerId": "21901318", "Title": "C++ templated static member constructor not being called", "CreationDate": "2014-02-20T07:09:52.753", "Id": "21900694", "CommentCount": "7", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2014-02-20T08:50:03.643", "LastEditorUserId": "1256811", "LastActivityDate": "2014-02-20T09:31:08.343", "Score": "2", "OwnerUserId": "1256811", "Tags": "<c++><templates><visual-c++><static><generic-programming>", "AnswerCount": "1"}, "21901318": {"Id": "21901318", "PostTypeId": "2", "Body": "<p>Each (non-virtual) member of each class template you want instantiated needs to be referenced from non-template code, directly or indirectly. It is not enough to instantiate the class itself.</p>\n<p>This is governed by the standard 14.7.1/2:</p>\n<blockquote>\n<p id=\"so_21900694_21901318_0\">Unless a member of a class template or a member template has been explicitly instantiated or explicitly specialized, the specialization of the member is implicitly instantiated when the specialization is referenced in a context that requires the member definition to exist; in particular, the initialization (and any associated side-effects) of a static data member does not occur unless the static data member is itself used in a way that requires the definition of the static data member to exist.</p>\n</blockquote>\n<p>In your case it is enough to reference the member from <code>CGenericActive</code> constructor (you need to write this constructor obviously), like this:</p>\n<pre><code>CGenericActive()\n {\n   // just reference it so it gets instantiated\n   (void)ms_passive;\n }\n</code></pre>\n<p><a href=\"http://ideone.com/Y31PJA\" rel=\"nofollow\">Full live example</a>.</p>\n", "LastEditorUserId": "775806", "LastActivityDate": "2014-02-20T09:31:08.343", "Score": "3", "CreationDate": "2014-02-20T07:43:53.107", "ParentId": "21900694", "CommentCount": "2", "OwnerUserId": "775806", "LastEditDate": "2014-02-20T09:31:08.343"}});