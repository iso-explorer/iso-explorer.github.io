post_cb({"45332326": {"CommentCount": "12", "CreationDate": "2017-07-26T16:12:22.007", "PostTypeId": "1", "AcceptedAnswerId": "45332881", "LastEditorUserId": "8157187", "LastActivityDate": "2017-07-26T17:08:17.890", "LastEditDate": "2017-07-26T17:08:17.890", "ViewCount": "282", "FavoriteCount": "1", "Title": "Are structs of variables of the same type layout compatible with a struct containing an array of that type?", "Id": "45332326", "Score": "15", "Body": "<p>Are these 2 structs layout-compatible?</p>\n<pre><code>struct One {\n    float x, y, z;\n};\n\nstruct Two {\n    float c[3];\n};\n</code></pre>\n<p>Both contains 3 floats, so in a way, this description can be considered true (from N3797):</p>\n<blockquote>\n<p id=\"so_45332326_45332326_0\">16 Two standard-layout struct (Clause 9) types are layout-compatible\n  if they have the same number of non-static data members and\n  corresponding non-static data members (in declaration order) have\n  layout-compatible types (3.9).</p>\n</blockquote>\n<p>N4659 has a different text:</p>\n<blockquote>\n<p id=\"so_45332326_45332326_1\">The common initial sequence of two standard-layout struct (Clause 12)\n  types is the longest sequence of non-static data members and bit-\ufb01elds\n  in declaration order, starting with the \ufb01rst such entity in each of\n  the structs, such that corresponding entities have layout-compatible\n  types and either neither entity is a bit-\ufb01eld or both are bit-\ufb01elds\n  with the same width.</p>\n<p id=\"so_45332326_45332326_2\">Two standard-layout struct (Clause 12) types are layout-compatible\n  classes if their common initial sequence comprises all members and\n  bit-\ufb01elds of both classes (6.9).</p>\n</blockquote>\n<p>If the answer is <em>no</em>, they are not layout-compatible, then: was it the intention of the committee? Maybe they do want <code>One</code> and <code>Two</code> to be layout-compatible (maybe a committee member reads this, and can clarify).</p>\n<hr>\n<p>Bonus question: is it guaranteed, that <code>sizeof(One)==sizeof(Two)</code>?</p>\n</hr>", "Tags": "<c++><language-lawyer>", "OwnerUserId": "8157187", "AnswerCount": "2"}, "45332881": {"ParentId": "45332326", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>Well, no:</p>\n<blockquote>\n<p id=\"so_45332326_45332881_0\">[...] if they have the same number of non-static data members [...]</p>\n</blockquote>\n<p><code>One</code> has three members: <code>x</code>, <code>y</code>, and <code>z</code>. <code>Two</code> has one member: <code>c</code>. They don't have the same number of non-static data members, therefore they aren't layout compatible. </p>\n<hr/>\n<p>The new wording is different but you end up at the same place. <a href=\"http://eel.is/c++draft/basic.types#11.sentence-1\" rel=\"noreferrer\">[basic.types]</a> defines layout-compatible as:</p>\n<blockquote>\n<p id=\"so_45332326_45332881_1\">Two types cv1 T1 and cv2 T2 are layout-compatible types if T1 and T2 are the same type, layout-compatible enumerations, or layout-compatible standard-layout class types.</p>\n</blockquote>\n<p><a href=\"http://eel.is/c++draft/class.mem#22.sentence-1\" rel=\"noreferrer\">[class.mem]</a>  defines layout-compatible classes are:</p>\n<blockquote>\n<p id=\"so_45332326_45332881_2\">Two standard-layout struct types are layout-compatible classes if their common initial sequence comprises all members and bit-fields of both classes ([basic.types]).</p>\n</blockquote>\n<p>Where the common initial sequence is:</p>\n<blockquote>\n<p id=\"so_45332326_45332881_3\">The common initial sequence of two standard-layout struct types is the longest sequence of non-static data members and bit-fields in declaration order, starting with the first such entity in each of the structs, such that corresponding entities have layout-compatible types and either neither entity is a bit-field or both are bit-fields with the same width.</p>\n</blockquote>\n<p>Here, the first member of <code>One</code> (<code>float x</code>) is not layout-compatible with the first member of <code>Two</code> (<code>float c[3]</code>), so the common initial sequence is empty. </p>\n", "OwnerUserId": "2069064", "LastEditorUserId": "2069064", "LastEditDate": "2017-07-26T16:56:20.257", "Id": "45332881", "Score": "10", "CreationDate": "2017-07-26T16:41:20.313", "LastActivityDate": "2017-07-26T16:56:20.257"}, "bq_ids": {"n4140": {"so_45332326_45332881_0": {"section_id": 5876, "quality": 1.0, "length": 7}, "so_45332326_45332326_0": {"section_id": 5876, "quality": 0.9545454545454546, "length": 21}}, "n3337": {"so_45332326_45332881_0": {"section_id": 5647, "quality": 1.0, "length": 7}, "so_45332326_45332326_0": {"section_id": 5647, "quality": 1.0, "length": 22}}, "n4659": {"so_45332326_45332881_3": {"section_id": 7359, "quality": 0.9444444444444444, "length": 34}, "so_45332326_45332881_1": {"section_id": 8718, "quality": 0.7857142857142857, "length": 11}, "so_45332326_45332326_0": {"section_id": 7361, "quality": 0.8181818181818182, "length": 18}, "so_45332326_45332881_0": {"section_id": 7361, "quality": 1.0, "length": 7}, "so_45332326_45332326_1": {"section_id": 7359, "quality": 0.8378378378378378, "length": 31}, "so_45332326_45332881_2": {"section_id": 7360, "quality": 0.8235294117647058, "length": 14}, "so_45332326_45332326_2": {"section_id": 7360, "quality": 0.8235294117647058, "length": 14}}}, "45333171": {"ParentId": "45332326", "CommentCount": "0", "Body": "<p>The compiler is allowed to add padding between members in a <code>class</code> or <code>struct</code>.  </p>\n<p>Array elements are in contiguous locations.</p>\n<p>They <em>may</em> not be layout compatible depending on how the compiler organizes the members in the <code>struct</code>.</p>\n", "OwnerUserId": "225074", "PostTypeId": "2", "Id": "45333171", "Score": "2", "CreationDate": "2017-07-26T16:57:40.910", "LastActivityDate": "2017-07-26T16:57:40.910"}});