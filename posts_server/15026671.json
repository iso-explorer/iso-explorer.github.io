post_cb({"15027189": {"ParentId": "15026671", "CommentCount": "0", "Body": "<p>By value.  But beware, if <code>MyClass</code> is not a POD, the program\nhas undefined behavior (C++03, \u00a75.2.2/7), or if <code>MyClass</code> has\na non-trivial copy constructor, move constructor or destructor,\nthe operation is conditionally supported, with implementation\ndefined semantics (C++11, \u00a75.2.2/7).</p>\n<p>In your example, passing <code>a</code> and passing <code>c</code> are exactly\nidentical operations (except that <code>c</code> cannot be bound to \na non-const reference, but that's not an issue here, since\nvarargs are all pass by value).   Thus, when calling <code>foo</code>, you\npass <code>0</code>, a copy of <code>a</code>, a copy of the pointer <code>b</code>, and a copy\nof <code>a</code>.  In order to access them in <code>foo</code>, you need to declare\nthe types in <code>va_arg</code> as <code>int</code>, <code>MyClass</code>, <code>MyClass*</code> and\n<code>MyClass</code>.</p>\n", "OwnerUserId": "649665", "PostTypeId": "2", "Id": "15027189", "Score": "3", "CreationDate": "2013-02-22T15:11:31.560", "LastActivityDate": "2013-02-22T15:11:31.560"}, "15026671": {"CommentCount": "11", "ViewCount": "614", "PostTypeId": "1", "LastEditorUserId": "498424", "CreationDate": "2013-02-22T14:42:37.733", "LastActivityDate": "2013-11-29T12:24:00.327", "Title": "c++ variable argument list", "AcceptedAnswerId": "15026735", "LastEditDate": "2013-11-29T12:24:00.327", "Id": "15026671", "Score": "1", "Body": "<p>I'm searching for answers but i can't find any relevant information on this. Let's take the example:</p>\n<pre><code>class MyClass\n{\n    //member functions and variables\n};\n\nvoid foo(int pivot,...)\n{\n    va_list arguments;  \n    va_start(arguments,pivot);\n\n    //va_arg(arguments,???)\n\n    va_end(arguments);\n}\n\nvoid bar()\n{\n    MyClass a;\n    MyClass * b = &amp;a;\n    const MyClass &amp; c = a;\n    foo(0,a,b,c);\n}\n</code></pre>\n<p>How are the arguments <code>a</code>,<code>b</code> and <code>c</code> passed? By value , or by reference and how to ask for them using va_arg? What about the constructors/destructor for MyClass? Where in the c++ standard is this kind of behavior specified?</p>\n", "Tags": "<c++><variadic-functions>", "OwnerUserId": "498424", "AnswerCount": "2"}, "15026735": {"ParentId": "15026671", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>You should never use user-defined types in var-arg function. Use C++11 variadic templates.</p>\n<p>If your class is not pod-type - it's unspecified by standard, thanks to Vaughn Cato for remark</p>\n<p>n3337 5.2.2/7\n<blockquote><p id=\"so_15026671_15026735_0\">\nPassing a potentially-evaluated argument of class type (Clause 9) having a nontrivial\ncopy constructor, a non-trivial move constructor, or a non-trivial destructor, with no corresponding\nparameter, is conditionally-supported with implementation-defined semantics.</p></blockquote></p>\n<p>Else, you can and it will be correct, but you shouln't.</p>\n", "OwnerUserId": "1498580", "LastEditorUserId": "1498580", "LastEditDate": "2013-02-22T15:26:11.513", "Id": "15026735", "Score": "5", "CreationDate": "2013-02-22T14:45:51.517", "LastActivityDate": "2013-02-22T15:26:11.513"}, "bq_ids": {"n4140": {"so_15026671_15026735_0": {"section_id": 5994, "quality": 0.95, "length": 19}}, "n3337": {"so_15026671_15026735_0": {"section_id": 5762, "quality": 0.95, "length": 19}}, "n4659": {"so_15026671_15026735_0": {"section_id": 7496, "quality": 0.95, "length": 19}}}});