post_cb({"30064193": {"ParentId": "30063956", "CommentCount": "0", "Body": "<p><a href=\"http://www.cplusplus.com/reference/cstdlib/atoi/\" rel=\"nofollow\">atoi()</a> expects a <code>const char*</code>, which maps to a <code>c string</code> as an argument, you're passing a simple <code>char</code>. Thus the error, <code>const char*</code> represents a pointer, which is not compatible with a <code>char</code>.</p>\n<p>Looks like you need to convert only one character to a numeric value, and in this case you can replace <code>atoi(c)</code> by <code>c-'0'</code>, which will give you a number between 0 and 9. However, if your file contains hexadecimals digits, the logic get a little bit more complicated, but not much.</p>\n", "OwnerUserId": "1974224", "PostTypeId": "2", "Id": "30064193", "Score": "0", "CreationDate": "2015-05-05T22:18:24.973", "LastActivityDate": "2015-05-05T22:18:24.973"}, "30063956": {"CommentCount": "2", "ViewCount": "758", "PostTypeId": "1", "LastEditorUserId": "2069064", "CreationDate": "2015-05-05T21:56:53.490", "LastActivityDate": "2015-05-05T22:33:22.590", "Title": "atoi() - from char to int", "AcceptedAnswerId": "30064005", "LastEditDate": "2015-05-05T22:02:55.183", "Id": "30063956", "Score": "-4", "Body": "<pre><code>char c;\nint array[10][10];\nwhile( !plik.eof())\n{\n    getline( plik, text );\n    int string_l=text.length(); \n    character_controler=false;\n    for(int i=0; i&lt;string_l; ++i)\n    {\n        c=napis.at(i);\n        if(c==' ') continue;\n        else if(character_controler==false)\n        {\n            array[0][nood]=0;\n            cout&lt;&lt;\"nood: \"&lt;&lt;nood&lt;&lt; \"next nood \"&lt;&lt;c&lt;&lt;endl;\n            array[1][nood]=atoi(c); // there is a problem\n            character_controler=true;\n        }\n        else if(c==',') character_controler=false;\n    }   \n    ++nood;\n}\n</code></pre>\n<p>I have no idea why <code>atoi()</code> doesn't work. The compiler error is:</p>\n<pre><code>invalid conversion from `char` to `const char*`\n</code></pre>\n<p>I need to convert <code>c</code> into int.</p>\n", "Tags": "<c++><atoi>", "OwnerUserId": "4868263", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_30063956_30064005_0": {"section_id": 5316, "quality": 1.0, "length": 19}}, "n3337": {"so_30063956_30064005_0": {"section_id": 5113, "quality": 1.0, "length": 19}}, "n4659": {"so_30063956_30064005_0": {"section_id": 6740, "quality": 1.0, "length": 19}}}, "30064005": {"ParentId": "30063956", "PostTypeId": "2", "CommentCount": "4", "CreationDate": "2015-05-05T22:01:46.840", "Score": "2", "LastEditorUserId": "2069064", "LastEditDate": "2015-05-05T22:33:22.590", "Id": "30064005", "OwnerUserId": "2069064", "Body": "<p>A <code>char</code> is already implicitly convertible to an <code>int</code>:</p>\n<pre><code>array[1][nood] = c;\n</code></pre>\n<p>But if you meant to convert the char <code>'0'</code> to the int <code>0</code>, you'll have to take advantage of the fact that the C++ standard mandates that the digits are contiguous. From [lex.charset]:</p>\n<blockquote>\n<p id=\"so_30063956_30064005_0\">In both the\n  source and execution basic character sets, the value of each character after 0 in the above list of decimal\n  digits shall be one greater than the value of the previous.</p>\n</blockquote>\n<p>So you just have to subtract:</p>\n<pre><code>array[1][nood] = c - '0';\n</code></pre>\n", "LastActivityDate": "2015-05-05T22:33:22.590"}});