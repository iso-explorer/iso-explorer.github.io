post_cb({"bq_ids": {"n4140": {"so_36497632_36497920_1": {"length": 29, "quality": 0.9354838709677419, "section_id": 6343}}, "n4659": {"so_36497632_36497920_1": {"length": 29, "quality": 0.9354838709677419, "section_id": 7852}}}, "36497920": {"Id": "36497920", "PostTypeId": "2", "Body": "<p>This appears to be a non-conforming extension of gcc since <code>exp()</code> is declared without <code>constexpr</code> in <code>&lt;cmath&gt;</code>: </p>\n<blockquote>\n<p id=\"so_36497632_36497920_0\"><strong>17.6.5.6 constexpr functions and constructors [constexpr.functions]</strong> </p>\n<p id=\"so_36497632_36497920_1\">1 This standard explicitly requires that\n  certain standard library functions are constexpr (7.1.5). <strong>An\n  implementation shall not declare any standard library function\n  signature as constexpr except for those where it is explicitly\n  required.</strong> Within any header that provides any non-defining\n  declarations of constexpr functions or constructors an implementation\n  shall provide corresponding definitions.</p>\n</blockquote>\n<p>Without the <code>constexpr</code> in front of your <code>LookupTable</code>, it will indeed be initalized at runtime. A work-around is to make it a <code>static</code> variable, so that you can initialize it at start-up time. </p>\n<p>If you want <code>constexpr</code> math functions, you need to write your own, or alternatively, write a Standard proposal that the current <code>&lt;cmath&gt;</code> library is modified to be <code>constexpr</code>. </p>\n", "Score": "6", "LastActivityDate": "2016-04-08T10:58:03.213", "CreationDate": "2016-04-08T10:58:03.213", "ParentId": "36497632", "CommentCount": "0", "OwnerUserId": "819272"}, "36497632": {"ViewCount": "1063", "LastEditDate": "2016-04-08T10:58:21.433", "Body": "<p>I want to compute a lookup table at compile time for a mathematical function in a given range and then retrieve values from the table at run time. My code is as follows:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;cmath&gt;\n\n\ntemplate&lt;int size&gt;\nclass LookupTable {\npublic:\nconstexpr LookupTable(double xMin, double xMax) : array(), xMin(xMin), xMax(xMax), dx((xMax - xMin) / (size - 1)) {\n    for(auto i = 0; i &lt; size; ++i)\n        array[i] = exp(xMin + i * dx);\n}\n\nconstexpr double operator()(double x) const {\n    return array[std::min(std::max(static_cast&lt;int&gt;((x - xMin) / dx), 0), size-1)];\n}\n\nprivate:\ndouble array[size];\ndouble xMin;\ndouble xMax;\ndouble dx;\n};\n\n\n\nint main() {\n    const double x = 0.5;\n    constexpr LookupTable&lt;10000&gt; table(0.0, 1.0);\n    std::cout &lt;&lt; \"f(x) = \" &lt;&lt; table(x) &lt;&lt; std::endl;  // evaluated at compile time ?\n    std::cout &lt;&lt; \"f(x) = \" &lt;&lt; LookupTable&lt;10000&gt;(0.0, 1.0)(x) &lt;&lt; std::endl;  // evaluated at run time ?\n    return 0;\n}\n</code></pre>\n<p>The code compiles and runs on gcc 5.1 and above but not on Clang 3.8.\nClang's error messages are: constexpr variable 'table' must be initialized by a constant expression and non-constexpr function 'exp' cannot be used in a constant expression.</p>\n<p>When I remove the constexpr in:</p>\n<pre><code>constexpr LookupTable&lt;10000&gt; table(0.0, 1.0);\n</code></pre>\n<p>then the code compiles and runs on Clang as well.</p>\n<p>My questions are:</p>\n<ul>\n<li>What is the meaning of the error message \"function 'exp' cannot be used in a constant expression\" ? And is there a workaround?</li>\n<li>Does that mean that when I declare LookupTable&lt;10000&gt; table(0.0, 1.0); without the constexpr, then the table precomputations happen at run-time?\nI am using an online compiling tool so I do not have an option to benchmark the code right now.</li>\n<li>I would like to generalize the code and templatize the mathematical function. It works fine with functors but is it possible to use lambdas?</li>\n</ul>\n<p>Thanks</p>\n", "Title": "constexpr - function cannot be used in a constant expression", "CreationDate": "2016-04-08T10:42:57.020", "LastActivityDate": "2016-04-08T10:58:21.433", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastEditorUserId": "819272", "Id": "36497632", "Score": "4", "OwnerUserId": "6176554", "Tags": "<c++><g++><c++14><constexpr><cmath>", "AnswerCount": "1"}});