post_cb({"bq_ids": {"n4140": {"so_35138864_35138909_1": {"length": 19, "quality": 0.95, "section_id": 5937}, "so_35138864_35138909_3": {"length": 25, "quality": 0.9615384615384616, "section_id": 7213}}, "n3337": {"so_35138864_35138909_1": {"length": 19, "quality": 0.95, "section_id": 5709}, "so_35138864_35138909_3": {"length": 25, "quality": 0.9615384615384616, "section_id": 6957}}, "n4659": {"so_35138864_35138909_1": {"length": 13, "quality": 0.65, "section_id": 7421}, "so_35138864_35138909_3": {"length": 25, "quality": 0.9615384615384616, "section_id": 8722}}}, "35138917": {"Id": "35138917", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_35138864_35138917_0\">is overflow_error for this kind of capacity issue caught at runtime in C++?</p>\n</blockquote>\n<p>No, as from the <a href=\"http://en.cppreference.com/w/cpp/error/overflow_error\" rel=\"nofollow noreferrer\">documentation</a></p>\n<blockquote>\n<blockquote>\n<p id=\"so_35138864_35138917_2\">The only standard library components that throw this exception are <code>std::bitset::to_ulong</code> and <code>std::bitset::to_ullong</code>.</p>\n</blockquote>\n</blockquote>\n<p>Overflows as induced by intrinsic mathematical operations won't be caught, and just leave you with unexpected results. The exact behavior isn't defined in the standard (<a href=\"https://stackoverflow.com/a/35138909/1413395\">great cite</a> in <a href=\"https://stackoverflow.com/users/3246555/alexd\">@AlexD</a>\n's answer).</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2016-02-01T19:49:45.850", "Score": "4", "CreationDate": "2016-02-01T19:41:39.347", "ParentId": "35138864", "CommentCount": "0", "OwnerUserId": "1413395", "LastEditDate": "2017-05-23T12:23:32.430"}, "35138929": {"Id": "35138929", "PostTypeId": "2", "Body": "<p>Short answer: No.  Neither C nor C++ will automatically detect integer overflow at runtime.</p>\n<p>Here are more details about C++ std::overflow_error:</p>\n<blockquote>\n<p id=\"so_35138864_35138929_0\"><a href=\"http://en.cppreference.com/w/cpp/error/overflow_error\" rel=\"nofollow noreferrer\">http://en.cppreference.com/w/cpp/error/overflow_error</a></p>\n<p id=\"so_35138864_35138929_1\"><code>std::overflow_error</code>   Defined in header <code>&lt;stdexcept&gt;</code></p>\n<p id=\"so_35138864_35138929_2\">Defines a type of object to be thrown as exception. It can be used to\n  report arithmetic overflow errors (that is, situations where a result\n  of a computation is too large for the destination type)</p>\n<p id=\"so_35138864_35138929_3\">The only standard library components that throw this exception are\n  std::bitset::to_ulong and std::bitset::to_ullong.</p>\n<p id=\"so_35138864_35138929_4\">The mathematical functions of the standard library components do not\n  throw this exception (mathematical functions report overflow errors as\n  specified in math_errhandling). Third-party libraries, however, use\n  this. For example, boost.math throws std::overflow_error if\n  boost::math::policies::throw_on_error is enabled (the default\n  setting).</p>\n</blockquote>\n<p>Here is more information about what you can do in your code to detect and handle integer overflow:</p>\n<p><a href=\"https://stackoverflow.com/questions/199333/how-to-detect-integer-overflow-in-c-c\">How to detect integer overflow?</a></p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2016-02-01T19:42:21.093", "Score": "6", "CreationDate": "2016-02-01T19:42:21.093", "ParentId": "35138864", "CommentCount": "6", "OwnerUserId": "421195", "LastEditDate": "2017-05-23T11:59:16.997"}, "35138909": {"Id": "35138909", "PostTypeId": "2", "Body": "<p>According to the standard (emphasis mine):</p>\n<blockquote>\n<p id=\"so_35138864_35138909_0\"><strong>5 Expressions [expr]</strong><br>....</br></p>\n<p id=\"so_35138864_35138909_1\">If during the evaluation of an expression, the result is not mathematically defined or not in the range of\n  representable values for its type, <strong><em>the behavior is undefined</em></strong>. [ <em>Note</em>: <strong><em>most existing implementations of C++\n  ignore integer overflows</em></strong>.</p>\n</blockquote>\n<p>P.S. BTW, please note that</p>\n<blockquote>\n<p id=\"so_35138864_35138909_2\"><strong>3.9.1 Fundamental types [basic.fundamental]</strong><br>....</br></p>\n<p id=\"so_35138864_35138909_3\">(<em>footnote</em>)<br><strong><em>unsigned arithmetic does not overflow</em></strong> because a result that cannot be represented by the resulting\n  unsigned integer type is reduced modulo the number that is one greater than the largest value that can be represented by the\n  resulting unsigned integer type.</br></p>\n</blockquote>\n", "LastEditorUserId": "3246555", "LastActivityDate": "2016-02-01T19:48:34.383", "Score": "6", "CreationDate": "2016-02-01T19:41:16.267", "ParentId": "35138864", "CommentCount": "4", "OwnerUserId": "3246555", "LastEditDate": "2016-02-01T19:48:34.383"}, "35138864": {"ViewCount": "976", "Body": "<p>I am learning C++, I was trying to write this function to find the largest fibonacci integer that can fit into an integer type:</p>\n<pre><code>void findFibThatFitsInAnInt()\n{\n    int n1 = 1;\n    int n2 = 1;\n    int fib = 0;\n    try\n    {\n        while ( true )\n        {\n            fib = n1 + n2;\n            n1 = n2;\n            n2 = fib;\n            cout &lt;&lt; \"Fibonacci number : \" &lt;&lt; fib &lt;&lt; \"\\n\";\n        } \n\n    }\n    catch (overflow_error &amp; e)\n    {\n        cout &lt;&lt; \"The largest fib that can fit into an int is : \" &lt;&lt; fib &lt;&lt; \"\\n\";\n        cout &lt;&lt; e.what() &lt;&lt; \"\\n\";\n    }\n\n    cout &lt;&lt; \"The largest fib that can fit into an int is : \" &lt;&lt; n1 &lt;&lt; \"\\n\";\n}\n</code></pre>\n<p>But the thing is overflow_error is not caught at all. \nI know other ways of doing this:</p>\n<p>I know that I can write like : </p>\n<pre><code>while ( fib &gt;= 0 )\n        {\n            fib = n1 + n2;\n            n1 = n2;\n            n2 = fib;\n            cout &lt;&lt; \"Fibonacci number : \" &lt;&lt; fib &lt;&lt; \"\\n\";\n        } \n</code></pre>\n<p>and because fib is just an \"int\" not an unsigned int, it will eventually become &lt; 0 ( strangely enough ) when it is assigned a value that is larger than the capacity of int type.</p>\n<p>Question is : is overflow_error for this kind of capacity issue caught at runtime in C++? Did I misunderstand something about overflow_error? This is what I know from my google foo:</p>\n<blockquote>\n<p id=\"so_35138864_35138864_0\">Defines a type of object to be thrown as exception. It can be used to\n  report arithmetic overflow errors (that is, situations where a result\n  of a computation is too large for the destination type)</p>\n</blockquote>\n<p>If overflow_error is ignored for integer overflows is there a way to enable it for my c++ compiler ( visual studio 2013?)</p>\n", "AcceptedAnswerId": "35138929", "Title": "Is overflow_error caught at runtime in C++ when a integer variable cannot hold a value that it is not supposed to", "CreationDate": "2016-02-01T19:38:52.427", "Id": "35138864", "CommentCount": "6", "LastEditDate": "2016-02-01T19:45:58.220", "PostTypeId": "1", "LastEditorUserId": "1410303", "LastActivityDate": "2016-02-01T19:49:45.850", "Score": "5", "OwnerUserId": "1410303", "Tags": "<c++>", "AnswerCount": "3"}});