post_cb({"44762154": {"CommentCount": "10", "AcceptedAnswerId": "44762820", "CreationDate": "2017-06-26T14:33:31.927", "LastActivityDate": "2017-06-26T15:08:07.050", "PostTypeId": "1", "ViewCount": "193", "FavoriteCount": "1", "Title": "initializer_list and GCC 4.9.2 vs GCC trunk", "Id": "44762154", "Score": "9", "Body": "<p>The following is a stripped-down version of the problem:</p>\n<pre><code>#include &lt;initializer_list&gt;\n#include &lt;iostream&gt;\n\nenum objects { zero, one, two, three, four, five, six, seven };\n\nstd::initializer_list&lt;objects&gt; objects_list()\n{\n    return { zero, one, two, three, four, five, six, seven };\n}\n\nint main()\n{\n    for (auto a : objects_list())\n    {\n        std::cout &lt;&lt; a &lt;&lt; ' ';\n    }\n    std::cout &lt;&lt; '\\n';\n}\n</code></pre>\n<p>My expectation is that the programs outputs:</p>\n<pre><code>0 1 2 3 4 5 6 7\n</code></pre>\n<p>which is comfirmed by GCC 4.9.2, but a GCC fresh from its git repository yields:</p>\n<pre><code>0 0 -85997960 32712 -1076836160 32765 0 32\n</code></pre>\n<p>which seem basically random numbers.</p>\n<p>Is there a problem with my program or with GCC?</p>\n", "Tags": "<c++><c++11><gcc>", "OwnerUserId": "812178", "AnswerCount": "1"}, "44762820": {"ParentId": "44762154", "CommentCount": "7", "Body": "<p>N4296 \u00a7 8.5.4/5 states</p>\n<blockquote>\n<p id=\"so_44762154_44762820_0\">An object of type <code>std::initializer_list&lt;E&gt;</code> is constructed from an initializer list as if the implementation\n  allocated a temporary array of <code>N</code> elements of type <code>const E</code>, where <code>N</code> is the number of elements in the\n  initializer list. Each element of that array is copy-initialized with the corresponding element of the initializer\n  list, and the <code>std::initializer_list&lt;E&gt;</code> object is constructed to refer to that array</p>\n</blockquote>\n<p>So we're told that a <code>std::initializer_list</code> refers to a temporary array.</p>\n<p>and \u00a7 8.5.4/6 states</p>\n<blockquote>\n<p id=\"so_44762154_44762820_1\">The array has the same lifetime as any other temporary object</p>\n</blockquote>\n<p>And the standard provides this example to demonstrate that accessing an initializer list after its array has gone out of scope is undefined behavior:</p>\n<pre><code>struct A {\nstd::initializer_list&lt;int&gt; i4;\nA() : i4{ 1, 2, 3 } {} // creates an A with a dangling reference\n};\n</code></pre>\n<blockquote>\n<p id=\"so_44762154_44762820_2\">the <code>initializer_list</code> object is initialized in a constructor\u2019s\n  <em>ctor-initializer</em>, so the array persists only until the constructor exits, and so any use of the elements of <code>i4</code>\n  after the constructor exits produces undefined behavior. \u2014end example ]</p>\n</blockquote>\n<p>You have a similar, but slightly different, example that involves copying:</p>\n<pre><code>std::initializer_list&lt;objects&gt; objects_list()\n{\n    return { zero, one, two, three, four, five, six, seven };\n}\n</code></pre>\n<p>By the logic from the standard, the array <code>{zero, one, two, ...}</code> only persists for the duration of the <code>objects_list</code> function. </p>\n<p>18.9/2 [support.initlist] also supports that a copy will not persist the underlying array:</p>\n<blockquote>\n<p id=\"so_44762154_44762820_3\">Copying an [<code>std::</code>]<code>initializer list</code> does not copy the underlying elements.</p>\n</blockquote>\n<p>So I believe your code is ultimately UB and the fact that it worked before was by luck.</p>\n", "OwnerUserId": "27678", "PostTypeId": "2", "Id": "44762820", "Score": "5", "CreationDate": "2017-06-26T15:08:07.050", "LastActivityDate": "2017-06-26T15:08:07.050"}, "bq_ids": {"n4140": {"so_44762154_44762820_2": {"section_id": 3328, "quality": 0.9, "length": 18}, "so_44762154_44762820_1": {"section_id": 3328, "quality": 0.8571428571428571, "length": 6}, "so_44762154_44762820_3": {"section_id": 6955, "quality": 0.8571428571428571, "length": 6}, "so_44762154_44762820_0": {"section_id": 3327, "quality": 1.0, "length": 31}}, "n3337": {"so_44762154_44762820_1": {"section_id": 373, "quality": 0.5714285714285714, "length": 4}, "so_44762154_44762820_3": {"section_id": 6702, "quality": 0.8571428571428571, "length": 6}, "so_44762154_44762820_0": {"section_id": 3197, "quality": 0.9354838709677419, "length": 29}}, "n4659": {"so_44762154_44762820_0": {"section_id": 4093, "quality": 0.8709677419354839, "length": 27}, "so_44762154_44762820_3": {"section_id": 8452, "quality": 0.8571428571428571, "length": 6}, "so_44762154_44762820_1": {"section_id": 4094, "quality": 0.8571428571428571, "length": 6}}}});