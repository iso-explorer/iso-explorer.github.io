post_cb({"28661302": {"CommentCount": "0", "Body": "<p>I think it should be allowed and considered valid in all languages. If you have a function whose return type is <code>void</code> and you return the result of an expression whose type is <code>void</code> (such as calling another <code>void</code> function), you've satisfied that constraint.</p>\n<p>It's not considered useful to do this in C (though I think it may be allowed) because there's no reason to need it. Anytime you do:</p>\n<pre><code>return someVoidFn();\n</code></pre>\n<p>You can always translate that to:</p>\n<pre><code>someVoidFn();\nreturn;\n</code></pre>\n<p>And get the exact same effect.</p>\n<p>However, in C++ and Java, returning a <code>void</code> function does have a real use, and that's because those languages have <em>templates and generics</em>. Consider this (not very useful) Java class:</p>\n<pre><code>class NestedIdentity&lt;T&gt; {\n  T run(int i, T value) {\n    if (i == 0) return value;\n    return run(i - 1);\n  }\n}\n</code></pre>\n<p>Its <code>run</code> method returns the value you pass to it, after calling itself a given number of times. I know, pointless, right? But the important part is that <code>T</code> <em>may be void</em>. You can do this:</p>\n<pre><code>NestedIdentity&lt;Void&gt; nest = new NestedIdentity&lt;Void&gt;();\nnest(5, null);\n</code></pre>\n<p>And <em>this works</em>. In Java, <code>Void</code> (note the capitalization) instantiates a generic with a <code>void</code>-like type whose only value is <code>null</code>. If Java didn't allow returning a <code>void</code> expression in a <code>void</code> method, it would have to be a compile-time error to instantiate a generic with void.</p>\n", "CreationDate": "2015-02-22T18:05:38.647", "ParentId": "27142891", "Id": "28661302", "LastActivityDate": "2015-02-22T18:05:38.647", "PostTypeId": "2", "Score": "2", "OwnerUserId": "9457"}, "27142942": {"LastActivityDate": "2014-11-26T07:31:02.720", "CommentCount": "1", "Body": "<p>Philosophically, you <em>could</em> argue that returning the result of a <code>void</code>-returning function should be allowed but, sadly, that's not the case here, at least for Java.</p>\n<p>It <em>is</em> valid for C++ however. If you try out the following program:</p>\n<pre><code>#include &lt;iostream&gt;\n\nvoid xyzzy(void) {}\nvoid plugh(void) { return xyzzy();}\n\nint main() {\n    std::cout &lt;&lt; \"Hello\\n\";\n    plugh();\n    return 0;\n}\n</code></pre>\n<p>it will work fine.</p>\n<p>This is detailed in <code>ISO C++11 6.6.3 /3</code>:</p>\n<blockquote>\n<p id=\"so_27142891_27142942_0\">A return statement with an expression of type <code>void</code> can be used only in functions with a return type of <code>cv void</code>; the expression is evaluated just before the function returns to its caller.</p>\n</blockquote>\n<p>So it's really equally valid to argue that the Java way is correct if you think of <code>void</code> as not an actual type, but as an <em>absence</em> of something. For example, when you have:</p>\n<pre><code>int xyzzy(void) { return 42; }\n</code></pre>\n<p>in C, you're not forced to provide an argument of the correct (non-)type, such as with:</p>\n<pre><code>void plugh;\nint twisty = xyzzy(plugh);\n</code></pre>\n<p>Ditto, the C++ way is correct as well, but in a different way  - the languages are what they are.</p>\n", "CreationDate": "2014-11-26T06:48:57.493", "LastEditDate": "2014-11-26T07:31:02.720", "ParentId": "27142891", "Id": "27142942", "LastEditorUserId": "14860", "PostTypeId": "2", "Score": "8", "OwnerUserId": "14860"}, "bq_ids": {"n4140": {"so_27142891_27142942_0": {"length": 18, "quality": 1.0, "section_id": 3914}}, "n3337": {"so_27142891_27142942_0": {"length": 18, "quality": 1.0, "section_id": 3774}}}, "27142891": {"CreationDate": "2014-11-26T06:45:44.997", "ViewCount": "268", "FavoriteCount": "2", "Id": "27142891", "AcceptedAnswerId": "27142942", "Score": "5", "Title": "Return from void function", "CommentCount": "4", "Body": "<p>Suppose a class exists as follows:</p>\n<pre><code>class Foo\n{\n    void do_after_something()\n    {\n    //some code here\n    return;\n    }\n\n    void do_something()\n    {\n    //some code here\n    return do_after_something(); //returning another (void) function\n    }\n};\n</code></pre>\n<p><p>JAVA is clearly opposed to something like the above, Borland C++ compiler issues a warning,\nMS VC++ does not complain.</p>\n<strong>My question is: Should returning from a void function be logically (theoretically) correct?</strong></p>\n<pre><code>return do_after_something();\n</code></pre>\n<p>as opposed to:</p>\n<pre><code>do_after_something();\nreturn;\n</code></pre>\n<p>or <strong>is it all implementation (compiler/language) dependent?</strong></p>\n", "Tags": "<java><c++><return><language-features>", "LastActivityDate": "2015-02-22T18:05:38.647", "PostTypeId": "1", "AnswerCount": "3", "OwnerUserId": "4294597"}, "27143293": {"CommentCount": "0", "Body": "<p>In C++ 11 its possible and legal . You can return a void function from other void function.\nRefrence The C++ Programming Language Chapter 12 , Bjarne Strousstrup</p>\n", "CreationDate": "2014-11-26T07:17:17.677", "ParentId": "27142891", "Id": "27143293", "LastActivityDate": "2014-11-26T07:17:17.677", "PostTypeId": "2", "Score": "1", "OwnerUserId": "2951452"}});