post_cb({"7016898": {"LastActivityDate": "2017-03-09T18:02:41.407", "LastEditorUserId": "501557", "ParentId": "7016861", "LastEditDate": "2017-03-09T18:02:41.407", "Id": "7016898", "Score": "98", "Body": "<p>Back in C++03, a null pointer was defined by the ISO specification (\u00a74.10/1) as</p>\n<blockquote>\n<p id=\"so_7016861_7016898_0\">A null pointer constant is an integral constant expression (5.19) rvalue of integer type that evaluates to zero.</p>\n</blockquote>\n<p>This is why in C++ you can write</p>\n<pre><code>int* ptr = 0;\n</code></pre>\n<p>In C, this rule is similar, but is a bit different (\u00a76.3.2.3/3):</p>\n<blockquote>\n<p id=\"so_7016861_7016898_1\">An integer constant expression with the value 0, or such an expression cast to type\n  <code>void *</code>, is called a null pointer constant.55) If a null pointer constant is converted to a\n  pointer type, the resulting pointer, called a null pointer, is guaranteed to compare unequal\n  to a pointer to any object or function.</p>\n</blockquote>\n<p>Consequently, both</p>\n<pre><code>int* ptr = 0;\n</code></pre>\n<p>and</p>\n<pre><code>int* ptr = (void *)0\n</code></pre>\n<p>are legal.  However, my guess is that the <code>void*</code> cast is here so that statements like</p>\n<pre><code>int x = NULL;\n</code></pre>\n<p>produce a compiler warning on most systems.  In C++, this wouldn't be legal because you can't implicitly convert a <code>void*</code> to another pointer type implicitly without a cast.  For example, this is illegal:</p>\n<pre><code>int* ptr = (void*)0; // Legal C, illegal C++\n</code></pre>\n<p>However, this leads to issues because the code </p>\n<pre><code>int x = NULL;\n</code></pre>\n<p>is legal C++.  Because of this and the ensuing confusion (and another case, shown later), since C++11, there is a keyword <code>nullptr</code> representing a null pointer:</p>\n<pre><code>int* ptr = nullptr;\n</code></pre>\n<p>This doesn't have any of the above problems.</p>\n<p>The other advantage of <code>nullptr</code> over 0 is that it plays better with the C++ type system.  For example, suppose I have these two functions:</p>\n<pre><code>void DoSomething(int x);\nvoid DoSomething(char* x);\n</code></pre>\n<p>If I call</p>\n<pre><code>DoSomething(NULL);\n</code></pre>\n<p>It's equivalent to</p>\n<pre><code>DoSomething(0);\n</code></pre>\n<p>which calls <code>DoSomething(int)</code> instead of the expected <code>DoSomething(char*)</code>.  However, with <code>nullptr</code>, I could write</p>\n<pre><code>DoSomething(nullptr);\n</code></pre>\n<p>And it will call the <code>DoSomething(char*)</code> function as expected.</p>\n<p>Similarly, suppose that I have a <code>vector&lt;Object*&gt;</code> and want to set each element to be a null pointer.  Using the <code>std::fill</code> algorithm, I might try writing</p>\n<pre><code>std::fill(v.begin(), v.end(), NULL);\n</code></pre>\n<p>However, this doesn't compile, because the template system treats <code>NULL</code> as an <code>int</code> and not a pointer.  To fix this, I would have to write</p>\n<pre><code>std::fill(v.begin(), v.end(), (Object*)NULL);\n</code></pre>\n<p>This is ugly and somewhat defeats the purpose of the template system.  To fix this, I can use <code>nullptr</code>:</p>\n<pre><code>std::fill(v.begin(), v.end(), nullptr);\n</code></pre>\n<p>And since <code>nullptr</code> is known to have a type corresponding to a null pointer (specifically, <code>std::nullptr_t</code>), this will compile correctly.</p>\n<p>Hope this helps!</p>\n", "CommentCount": "3", "PostTypeId": "2", "OwnerUserId": "501557", "CreationDate": "2011-08-10T19:52:52.303"}, "7016861": {"ViewCount": "54835", "AcceptedAnswerId": "7016898", "Tags": "<c++><c><pointers><null>", "AnswerCount": "3", "OwnerUserId": "827044", "Body": "<p>In C, <code>NULL</code> is defined as <code>(void *)0</code> whereas in C++ it is <code>0</code>. Why is it so?\nIn C I can understand that if <code>NULL</code> is not typecast to <code>(void *)</code> then compilers may/may not generate warning. Other than this, is there any reason?</p>\n", "CommentCount": "2", "PostTypeId": "1", "CreationDate": "2011-08-10T19:49:45.723", "FavoriteCount": "25", "LastActivityDate": "2017-03-09T18:02:41.407", "Id": "7016861", "LastEditorUserId": "501557", "Title": "Why are NULL pointers defined differently in C and C++?", "Score": "68", "LastEditDate": "2014-01-03T06:24:10.010"}, "7017155": {"LastActivityDate": "2011-08-10T20:13:41.453", "ParentId": "7016861", "Id": "7017155", "Score": "16", "Body": "<p>In C, <code>NULL</code> expands to an implementation-defined \"null pointer constant\".  A null pointer constant is either an integer constant expression with the value 0, or such an expression cast to <code>void*</code>.  So a C implementation may define <code>NULL</code> either as <code>0</code> or as <code>((void*)0)</code>.</p>\n<p>In C++, the rules for null pointer constants are different.  In particular, <code>((void*)0)</code> is not a C++ null pointer constant, so a C++ implementation can't define <code>NULL</code> that way.</p>\n", "CommentCount": "0", "PostTypeId": "2", "OwnerUserId": "827263", "CreationDate": "2011-08-10T20:13:41.453"}, "bq_ids": {"n3337": {"so_7016861_7016898_1": {"section_id": 36, "quality": 0.5333333333333333, "length": 16}, "so_7016861_7016898_0": {"section_id": 36, "quality": 0.8333333333333334, "length": 10}}}, "7017541": {"LastActivityDate": "2011-08-10T20:44:06.910", "ParentId": "7016861", "Id": "7017541", "Score": "-6", "Body": "<p>The C language was created to make it easier to program microprocessors. A C pointer is used to store the address of data in memory. A way was needed to represent that a pointer had no valid value. The address zero was chosen since all microprocessors used that address for booting up. Since it couldn't be used for anything else zero was a good choice to represent a pointer with no valid value. C++ is backward compatible with C so it's inherited that convention.</p>\n<p>The requirement of casting zero when used as a pointer is only a recent add on. Later generations of C wanted to have more rigor (and hopefully fewer errors) so they started being more pedantic about syntax.</p>\n", "CommentCount": "19", "PostTypeId": "2", "OwnerUserId": "79737", "CreationDate": "2011-08-10T20:44:06.910"}});