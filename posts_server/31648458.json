post_cb({"31649056": {"ParentId": "31648458", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>Ok, so thanks to Piotr pointing this other question asking about the same thing, I found the information in a comment that will resolve this, here it is:</p>\n<p><a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4040.pdf\" rel=\"nofollow\">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4040.pdf</a></p>\n<p>page 16, chapter 5.1.1 named <code>generic functions</code></p>\n<blockquote>\n<p id=\"so_31648458_31649056_0\">A generic function is a function template whose\n  template-parameter-list has a parameterdeclaration whose\n  type-specifier is either auto or a constrained-type-name.  </p>\n<p id=\"so_31648458_31649056_1\">[ Example:  </p>\n<pre><code>auto f(auto x); // Ok\nvoid sort(C&amp; c); // Ok (assuming C names a concept)\n</code></pre>\n<p id=\"so_31648458_31649056_2\">\u2014 end example ]</p>\n</blockquote>\n<p>This seems rather positive :)</p>\n<p>followed by the excpected obvious wording, that matches generic lambda:</p>\n<blockquote>\n<p id=\"so_31648458_31649056_3\">The declaration of a generic function has a template-parameter-list\n  that consists of one invented type template-parameter for each\n  occurrence of auto.</p>\n<p id=\"so_31648458_31649056_4\">[ Example: The following generic function declarations are equivalent:</p>\n<pre><code>template&lt;typenaem T&gt;  \nconxtexpr bool C() { ... }  \nauto f(auto x, const C&amp; y);  \ntemplate&lt;typename T1, C T2&gt; \nauto f(T1 x, const T2&amp; y);\n</code></pre>\n<p id=\"so_31648458_31649056_5\">The type of y is a type parameter constrained by C. \u2014 end example ]</p>\n</blockquote>\n", "OwnerUserId": "893406", "LastEditorUserId": "893406", "LastEditDate": "2015-07-27T09:18:02.573", "Id": "31649056", "Score": "4", "CreationDate": "2015-07-27T09:09:21.973", "LastActivityDate": "2015-07-27T09:18:02.573"}, "31648458": {"CommentCount": "4", "ViewCount": "1566", "PostTypeId": "1", "LastEditorUserId": "5507349", "CreationDate": "2015-07-27T08:37:42.407", "LastActivityDate": "2017-07-09T21:34:29.810", "Title": "auto parameter type in functions", "LastEditDate": "2017-07-09T21:34:29.810", "Id": "31648458", "Score": "4", "Body": "<p>I would like to know if the standard committee considered expanding the C++14 <code>auto</code> keyword to deduce function template parameter type, as it exists today in generic lambdas. (<a href=\"https://stackoverflow.com/a/17233649/893406\">as can be seen nicely depicted in this answer</a>)</p>\n<p>Because it works in lambda functions, it should also work in any function. Of course it would be totally redundant with the classic syntax:</p>\n<pre><code>template&lt; typename T &gt;\nvoid f(T param);\n</code></pre>\n<p>But being able to write this, for the same result:</p>\n<pre><code>void f(auto param);\n</code></pre>\n<p>I think would allow for less clogged code (shorter neater cleaner) and allow a great consistency in this use case:</p>\n<pre><code>auto v = func1();\nf(v);\n</code></pre>\n<p>As you can see, we used the auto type deducer to declare <code>v</code>, but then we have to use either a hard-typed parameterized function f, or a templated f.<br>\nIn combination with <code>auto</code> we should use <code>auto</code>, that would be more consistent.</br></p>\n<p>EDIT: <a href=\"https://stackoverflow.com/q/25879705/893406\">this question</a> indeed asks effectively the same thing, but less directly. And has yet to get the answer that user657267 gives, which I reproduce and extend thereunder.</p>\n", "Tags": "<c++><c++14><auto><c++1z>", "OwnerUserId": "893406", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_31648458_31649056_5": {"section_id": 156, "quality": 0.5714285714285714, "length": 4}, "so_31648458_31649056_0": {"section_id": 5964, "quality": 0.5833333333333334, "length": 7}, "so_31648458_31649056_3": {"section_id": 5964, "quality": 0.7692307692307693, "length": 10}}, "n3337": {"so_31648458_31649056_5": {"section_id": 150, "quality": 0.5714285714285714, "length": 4}}, "n4659": {"so_31648458_31649056_5": {"section_id": 160, "quality": 0.5714285714285714, "length": 4}, "so_31648458_31649056_3": {"section_id": 7453, "quality": 0.7692307692307693, "length": 10}}}});