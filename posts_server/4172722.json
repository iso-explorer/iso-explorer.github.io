post_cb({"bq_ids": {"n4140": {"so_4172722_4172724_3": {"section_id": 404, "quality": 0.8888888888888888, "length": 16}, "so_4172722_4172724_1": {"section_id": 464, "quality": 0.5714285714285714, "length": 8}, "so_4172722_4172724_2": {"section_id": 477, "quality": 0.625, "length": 10}, "so_4172722_4172724_0": {"section_id": 361, "quality": 0.7567567567567568, "length": 28}}, "n3337": {"so_4172722_4172724_3": {"section_id": 395, "quality": 0.8888888888888888, "length": 16}, "so_4172722_4172724_1": {"section_id": 455, "quality": 0.5714285714285714, "length": 8}, "so_4172722_4172724_2": {"section_id": 468, "quality": 0.625, "length": 10}, "so_4172722_4172724_0": {"section_id": 351, "quality": 0.7567567567567568, "length": 28}}, "n4659": {"so_4172722_4172724_3": {"section_id": 422, "quality": 0.8888888888888888, "length": 16}, "so_4172722_4172724_1": {"section_id": 487, "quality": 0.5714285714285714, "length": 8}, "so_4172722_4172724_2": {"section_id": 500, "quality": 0.625, "length": 10}, "so_4172722_4172724_0": {"section_id": 373, "quality": 0.7567567567567568, "length": 28}}}, "12939100": {"ParentId": "4172722", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>What does copying an object mean? \nThere are a few ways you can copy objects--let's talk about the 2 kinds you're most likely referring to--deep copy and shallow copy.</p>\n<p>Since we're in an object-oriented language (or at least are assuming so), let's say you have a piece of memory allocated.  Since it's an OO-language, we can easily refer to chunks of memory we allocate because they are usually primitive variables (ints, chars, bytes) or classes we defined that are made of our own types and primitives.  So let's say we have a class of Car as follows:</p>\n<pre><code>class Car //A very simple class just to demonstrate what these definitions mean.\n//It's pseudocode C++/Javaish, I assume strings do not need to be allocated.\n{\nprivate String sPrintColor;\nprivate String sModel;\nprivate String sMake;\n\npublic changePaint(String newColor)\n{\n   this.sPrintColor = newColor;\n}\n\npublic Car(String model, String make, String color) //Constructor\n{\n   this.sPrintColor = color;\n   this.sModel = model;\n   this.sMake = make;\n}\n\npublic ~Car() //Destructor\n{\n//Because we did not create any custom types, we aren't adding more code.\n//Anytime your object goes out of scope / program collects garbage / etc. this guy gets called + all other related destructors.\n//Since we did not use anything but strings, we have nothing additional to handle.\n//The assumption is being made that the 3 strings will be handled by string's destructor and that it is being called automatically--if this were not the case you would need to do it here.\n}\n\npublic Car(const Car &amp;other) // Copy Constructor\n{\n   this.sPrintColor = other.sPrintColor;\n   this.sModel = other.sModel;\n   this.sMake = other.sMake;\n}\npublic Car &amp;operator =(const Car &amp;other) // Assignment Operator\n{\n   if(this != &amp;other)\n   {\n      this.sPrintColor = other.sPrintColor;\n      this.sModel = other.sModel;\n      this.sMake = other.sMake;\n   }\n   return *this;\n}\n\n}\n</code></pre>\n<p>A deep copy is if we declare an object and then create a completely separate copy of the object...we end up with 2 objects in 2 completely sets of memory.</p>\n<pre><code>Car car1 = new Car(\"mustang\", \"ford\", \"red\");\nCar car2 = car1; //Call the copy constructor\ncar2.changePaint(\"green\");\n//car2 is now green but car1 is still red.\n</code></pre>\n<p>Now let's do something strange.  Let's say car2 is either programmed wrong or purposely meant to share the actual memory that car1 is made of.  (It's usually a mistake to do this and in classes is usually the blanket it's discussed under.)  Pretend that anytime you ask about car2, you're really resolving a pointer to car1's memory space...that's more or less what a shallow copy is.</p>\n<pre><code>//Shallow copy example\n//Assume we're in C++ because it's standard behavior is to shallow copy objects if you do not have a constructor written for an operation.\n//Now let's assume I do not have any code for the assignment or copy operations like I do above...with those now gone, C++ will use the default.\n\n Car car1 = new Car(\"ford\", \"mustang\", \"red\"); \n Car car2 = car1; \n car2.changePaint(\"green\");//car1 is also now green \n delete car2;/*I get rid of my car which is also really your car...I told C++ to resolve \n the address of where car2 exists and delete the memory...which is also\n the memory associated with your car.*/\n car1.changePaint(\"red\");/*program will likely crash because this area is\n no longer allocated to the program.*/\n</code></pre>\n<p>So regardless of what language you're writing in, be very careful about what you mean when it comes to copying objects because most of the time you want a deep copy.</p>\n<p>What are the copy constructor and the copy assignment operator?\nI have already used them above.  The copy constructor is called when you type code such as <code>Car car2 = car1;</code>  Essentially if you declare a variable and assign it in one line, that's when the copy constructor is called.  The assignment operator is what happens when you use an equal sign--<code>car2 = car1;</code>.  Notice <code>car2</code> isn't declared in the same statement.  The two chunks of code you write for these operations are likely very similar.  In fact the typical design pattern has another function you call to set everything once you're satisfied the initial copy/assignment is legitimate--if you look at the longhand code I wrote, the functions are nearly identical.</p>\n<p>When do I need to declare them myself? \nIf you are not writing code that is to be shared or for production in some manner, you really only need to declare them when you need them.  You do need to be aware of what your program language does if you choose to use it 'by accident' and didn't make one--i.e. you get the compiler default.  I rarely use copy constructors for instance, but assignment operator overrides are very common.  Did you know you can override what addition, subtraction, etc. mean as well?</p>\n<p>How can I prevent my objects from being copied?\nOverride all of the ways you're allowed to allocate memory for your object with a private function is a reasonable start.  If you really don't want people copying them, you could make it public and alert the programmer by throwing an exception and also not copying the object.  </p>\n", "OwnerUserId": "1701047", "LastEditorUserId": "2713852", "LastEditDate": "2013-12-12T13:09:19.497", "Id": "12939100", "Score": "24", "CreationDate": "2012-10-17T16:37:50.740", "LastActivityDate": "2013-12-12T13:09:19.497"}, "10585232": {"ParentId": "4172722", "PostTypeId": "2", "CommentCount": "7", "Body": "<p>The law of the big three is as specified above.</p>\n<p>An easy example, in plain English, of the kind of problem it solves:</p>\n<p><strong>Non default destructor</strong></p>\n<p>You allocated memory in your constructor and so you need to write a destructor to delete it.  Otherwise you will cause a memory leak.</p>\n<p>You might think that this is job done. </p>\n<p>The problem will be, if a copy is made of your object, then the copy will point to the same memory as the original object.</p>\n<p>Once, one of these deletes the memory in its destructor, the other will have a pointer to invalid memory (this is called a dangling pointer) when it tries to use it things are going to get hairy.</p>\n<p>Therefore, you write a copy constructor so that it allocates new objects their own pieces of memory to destroy.</p>\n<p><strong>Assignment operator and copy constructor</strong></p>\n<p>You allocated memory in your constructor to a member pointer of your class.  When you copy an object of this class the default assignment operator and copy constructor will copy the value of this member pointer to the new object.</p>\n<p>This means that the new object and the old object will be pointing at the same piece of memory so when you change it in one object it will be changed for the other objerct too.  If one object deletes this memory the other will carry on trying to use it - eek.</p>\n<p>To resolve this you write your own version of the copy constructor and assignment operator.  Your versions allocate separate memory to the new objects and copy across the values that the first pointer is pointing too rather than its address.</p>\n", "OwnerUserId": "861970", "LastEditorUserId": "861970", "LastEditDate": "2017-11-02T12:07:13.740", "Id": "10585232", "Score": "114", "CreationDate": "2012-05-14T14:22:58.390", "LastActivityDate": "2017-11-02T12:07:13.740"}, "25256163": {"ParentId": "4172722", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>Rule of three in C++ is a fundamental principle of the design and the development of three requirements that if there is clear definition in one of the following member function, then the programmer should define the other two members functions together. Namely the following three member functions are indispensable: destructor, copy constructor, copy assignment operator.</p>\n<p>Copy constructor  in C++ is a special constructor. It is used to build a new object, which is the new object equivalent to a copy of an existing object.</p>\n<p>Copy assignment operator is a special assignment operator that is usually used to specify an existing object to others of the same type of object.</p>\n<p>There are quick examples:</p>\n<pre><code>// default constructor\nMy_Class a;\n\n// copy constructor\nMy_Class b(a);\n\n// copy constructor\nMy_Class c = a;\n\n// copy assignment operator\nb = a;\n</code></pre>\n", "OwnerUserId": "2288882", "LastEditorUserId": "3167040", "LastEditDate": "2016-10-16T04:57:08.003", "Id": "25256163", "Score": "2", "CreationDate": "2014-08-12T04:27:01.583", "LastActivityDate": "2016-10-16T04:57:08.003"}, "4172961": {"ParentId": "4172722", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>The <a href=\"http://en.wikipedia.org/wiki/Rule_of_three_%28C%2B%2B_programming%29\" rel=\"noreferrer\">Rule of Three</a> is a rule of thumb for C++, basically saying </p>\n<blockquote>\n<p id=\"so_4172722_4172961_0\">If your class needs any of</p>\n<ul>\n<li>a <strong>copy constructor</strong>,</li>\n<li>an <strong>assignment operator</strong>, </li>\n<li>or a <strong>destructor</strong>, </li>\n</ul>\n<p id=\"so_4172722_4172961_1\">defined explictly, then it is likely to need <strong>all three of them</strong>.</p>\n</blockquote>\n<p>The reasons for this is that all three of them are usually used to manage a resource, and if your class manages a resource, it usually needs to manage copying as well as freeing. </p>\n<p>If there is no good semantic for copying the resource your class manages, then consider to forbid copying by declaring (not <em><a href=\"https://stackoverflow.com/questions/1410563/what-is-the-difference-between-a-definition-and-a-declaration/1410632#1410632\">defining</a></em>) the copy constructor and assignment operator as <code>private</code>. </p>\n<p>(Note that the forthcoming new version of the C++ standard (which is C++11) adds move semantics to C++, which will likely change the Rule of Three. However, I know too little about this to write a C++11 section about the Rule of Three.)</p>\n", "OwnerUserId": "140719", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:03:09.083", "Id": "4172961", "Score": "403", "CreationDate": "2010-11-13T14:22:21.193", "LastActivityDate": "2016-10-16T05:45:53.287"}, "27813065": {"ParentId": "4172722", "CommentCount": "0", "Body": "<p>Many of the existing answers already touch the copy constructor, assignment operator and destructor.\nHowever, in post C++11, the introduction of move semantic may expand this beyond 3.</p>\n<p>Recently Michael Claisse gave a talk that touches this topic:\n<a href=\"http://channel9.msdn.com/events/CPP/C-PP-Con-2014/The-Canonical-Class\" rel=\"noreferrer\">http://channel9.msdn.com/events/CPP/C-PP-Con-2014/The-Canonical-Class</a></p>\n", "OwnerUserId": "1380947", "PostTypeId": "2", "Id": "27813065", "Score": "7", "CreationDate": "2015-01-07T05:38:51.413", "LastActivityDate": "2015-01-07T05:38:51.413"}, "4172722": {"CommentCount": "6", "AcceptedAnswerId": "4172724", "PostTypeId": "1", "LastEditorUserId": "252000", "CreationDate": "2010-11-13T13:27:09.260", "LastActivityDate": "2017-11-02T12:07:13.740", "LastEditDate": "2010-11-15T11:07:25.873", "ViewCount": "197481", "FavoriteCount": "942", "Title": "What is The Rule of Three?", "Id": "4172722", "Score": "1690", "Body": "<p>What does <em>copying an object</em> mean? What are the <em>copy constructor</em> and the <em>copy assignment operator</em>? When do I need to declare them myself? How can I prevent my objects from being copied?</p>\n", "Tags": "<c++><copy-constructor><assignment-operator><c++-faq><rule-of-three>", "OwnerUserId": "252000", "AnswerCount": "8"}, "34740363": {"ParentId": "4172722", "PostTypeId": "2", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_4172722_34740363_0\">When do I need to declare them myself?</p>\n</blockquote>\n<p>The Rule of Three states that if you declare any of a </p>\n<ol>\n<li>copy constructor</li>\n<li>copy assignment operator</li>\n<li>destructor</li>\n</ol>\n<p>then you should declare all three. It grew out of the observation that the need to take over the meaning of a copy operation almost always stemmed from the class performing some kind of resource management, and that almost always implied that </p>\n<ul>\n<li><p>whatever resource management was being done in one copy operation probably needed to be done in the other copy operation and </p></li>\n<li><p>the class destructor would also be participating in management of the resource (usually releasing it). The classic resource to be managed was memory, and this is why all Standard Library classes that\nmanage memory (e.g., the STL containers that perform dynamic memory management) all declare \u201cthe big three\u201d: both copy operations and a destructor.</p></li>\n</ul>\n<p><strong>A consequence of the Rule of Three</strong> is that the presence of a user-declared destructor indicates that simple member wise copy is unlikely to be appropriate for the copying operations in the class. That, in turn, suggests that if a class declares a destructor, the copy operations probably shouldn\u2019t be automatically generated, because they wouldn\u2019t do the right thing. At the time C++98 was adopted, the significance of this line of reasoning was not fully appreciated, so in C++98, the existence of a user declared destructor had no impact on compilers\u2019 willingness to generate copy operations. That continues to be the case in C++11, but only because restricting the conditions under which the copy operations are generated would break too much legacy code.</p>\n<blockquote>\n<p id=\"so_4172722_34740363_1\">How can I prevent my objects from being copied?</p>\n</blockquote>\n<p>Declare copy constructor &amp; copy assignment operator as private access specifier.</p>\n<pre><code>class MemoryBlock\n{\npublic:\n\n//code here\n\nprivate:\nMemoryBlock(const MemoryBlock&amp; other)\n{\n   cout&lt;&lt;\"copy constructor\"&lt;&lt;endl;\n}\n\n// Copy assignment operator.\nMemoryBlock&amp; operator=(const MemoryBlock&amp; other)\n{\n return *this;\n}\n};\n\nint main()\n{\n   MemoryBlock a;\n   MemoryBlock b(a);\n}\n</code></pre>\n<p>In C++11 onwards you can also declare copy constructor &amp; assignment operator deleted</p>\n<pre><code>class MemoryBlock\n{\npublic:\nMemoryBlock(const MemoryBlock&amp; other) = delete\n\n// Copy assignment operator.\nMemoryBlock&amp; operator=(const MemoryBlock&amp; other) =delete\n};\n\n\nint main()\n{\n   MemoryBlock a;\n   MemoryBlock b(a);\n}\n</code></pre>\n", "OwnerUserId": "2575399", "LastEditorUserId": "2575399", "LastEditDate": "2016-01-12T10:19:01.493", "Id": "34740363", "Score": "13", "CreationDate": "2016-01-12T09:54:33.670", "LastActivityDate": "2016-01-12T10:19:01.493"}, "4172724": {"ParentId": "4172722", "PostTypeId": "2", "CommentCount": "22", "Body": "<h1>Introduction</h1>\n<p>C++ treats variables of user-defined types with <em>value semantics</em>.\nThis means that objects are implicitly copied in various contexts,\nand we should understand what \"copying an object\" actually means.</p>\n<p>Let us consider a simple example:</p>\n<pre><code>class person\n{\n    std::string name;\n    int age;\n\npublic:\n\n    person(const std::string&amp; name, int age) : name(name), age(age)\n    {\n    }\n};\n\nint main()\n{\n    person a(\"Bjarne Stroustrup\", 60);\n    person b(a);   // What happens here?\n    b = a;         // And here?\n}\n</code></pre>\n<p>(If you are puzzled by the <code>name(name), age(age)</code> part,\nthis is called a <a href=\"https://stackoverflow.com/questions/1272680/\">member initializer list</a>.)</p>\n<h1>Special member functions</h1>\n<p>What does it mean to copy a <code>person</code> object?\nThe <code>main</code> function shows two distinct copying scenarios.\nThe initialization <code>person b(a);</code> is performed by the <em>copy constructor</em>.\nIts job is to construct a fresh object based on the state of an existing object.\nThe assignment <code>b = a</code> is performed by the <em>copy assignment operator</em>.\nIts job is generally a little more complicated,\nbecause the target object is already in some valid state that needs to be dealt with.</p>\n<p>Since we declared neither the copy constructor nor the assignment operator (nor the destructor) ourselves,\nthese are implicitly defined for us. Quote from the standard:</p>\n<blockquote>\n<p id=\"so_4172722_4172724_0\">The [...] copy constructor and copy assignment operator, [...] and destructor are special member functions.\n  [ <em>Note</em>: <strong>The implementation will implicitly declare these member functions\n  for some class types when the program does not explicitly declare them.</strong>\n  The implementation will implicitly define them if they are used. [...] <em>end note</em> ]\n  [n3126.pdf section 12 \u00a71]</p>\n</blockquote>\n<p>By default, copying an object means copying its members:</p>\n<blockquote>\n<p id=\"so_4172722_4172724_1\">The implicitly-defined copy constructor for a non-union class X performs a memberwise copy of its subobjects.\n  [n3126.pdf section 12.8 \u00a716]</p>\n<p id=\"so_4172722_4172724_2\">The implicitly-defined copy assignment operator for a non-union class X performs memberwise copy assignment\n  of its subobjects.\n  [n3126.pdf section 12.8 \u00a730]</p>\n</blockquote>\n<h2>Implicit definitions</h2>\n<p>The implicitly-defined special member functions for <code>person</code> look like this:</p>\n<pre><code>// 1. copy constructor\nperson(const person&amp; that) : name(that.name), age(that.age)\n{\n}\n\n// 2. copy assignment operator\nperson&amp; operator=(const person&amp; that)\n{\n    name = that.name;\n    age = that.age;\n    return *this;\n}\n\n// 3. destructor\n~person()\n{\n}\n</code></pre>\n<p>Memberwise copying is exactly what we want in this case:\n<code>name</code> and <code>age</code> are copied, so we get a self-contained, independent <code>person</code> object.\nThe implicitly-defined destructor is always empty.\nThis is also fine in this case since we did not acquire any resources in the constructor.\nThe members' destructors are implicitly called after the <code>person</code> destructor is finished:</p>\n<blockquote>\n<p id=\"so_4172722_4172724_3\">After executing the body of the destructor and destroying any automatic objects allocated within the body,\n  a destructor for class X calls the destructors for X's direct [...] members\n  [n3126.pdf 12.4 \u00a76]</p>\n</blockquote>\n<h1>Managing resources</h1>\n<p>So when should we declare those special member functions explicitly?\nWhen our class <em>manages a resource</em>, that is,\nwhen an object of the class is <em>responsible</em> for that resource.\nThat usually means the resource is <em>acquired</em> in the constructor\n(or passed into the constructor) and <em>released</em> in the destructor.</p>\n<p>Let us go back in time to pre-standard C++.\nThere was no such thing as <code>std::string</code>, and programmers were in love with pointers.\nThe <code>person</code> class might have looked like this:</p>\n<pre><code>class person\n{\n    char* name;\n    int age;\n\npublic:\n\n    // the constructor acquires a resource:\n    // in this case, dynamic memory obtained via new[]\n    person(const char* the_name, int the_age)\n    {\n        name = new char[strlen(the_name) + 1];\n        strcpy(name, the_name);\n        age = the_age;\n    }\n\n    // the destructor must release this resource via delete[]\n    ~person()\n    {\n        delete[] name;\n    }\n};\n</code></pre>\n<p>Even today, people still write classes in this style and get into trouble:\n\"<em>I pushed a person into a vector and now I get crazy memory errors!</em>\"\nRemember that by default, copying an object means copying its members,\nbut copying the <code>name</code> member merely copies a pointer, <em>not</em> the character array it points to!\nThis has several unpleasant effects:</p>\n<ol>\n<li>Changes via <code>a</code> can be observed via <code>b</code>.</li>\n<li>Once <code>b</code> is destroyed, <code>a.name</code> is a dangling pointer.</li>\n<li>If <code>a</code> is destroyed, deleting the dangling pointer yields <a href=\"https://stackoverflow.com/questions/2397984/\">undefined behavior</a>.</li>\n<li>Since the assignment does not take into account what <code>name</code> pointed to before the assignment,\nsooner or later you will get memory leaks all over the place.</li>\n</ol>\n<h2>Explicit definitions</h2>\n<p>Since memberwise copying does not have the desired effect, we must define the copy constructor and the copy assignment operator explicitly to make deep copies of the character array:</p>\n<pre><code>// 1. copy constructor\nperson(const person&amp; that)\n{\n    name = new char[strlen(that.name) + 1];\n    strcpy(name, that.name);\n    age = that.age;\n}\n\n// 2. copy assignment operator\nperson&amp; operator=(const person&amp; that)\n{\n    if (this != &amp;that)\n    {\n        delete[] name;\n        // This is a dangerous point in the flow of execution!\n        // We have temporarily invalidated the class invariants,\n        // and the next statement might throw an exception,\n        // leaving the object in an invalid state :(\n        name = new char[strlen(that.name) + 1];\n        strcpy(name, that.name);\n        age = that.age;\n    }\n    return *this;\n}\n</code></pre>\n<p>Note the difference between initialization and assignment:\nwe must tear down the old state before assigning to <code>name</code> to prevent memory leaks.\nAlso, we have to protect against self-assignment of the form <code>x = x</code>.\nWithout that check, <code>delete[] name</code> would delete the array containing the <em>source</em> string,\nbecause when you write <code>x = x</code>, both <code>this-&gt;name</code> and <code>that.name</code> contain the same pointer.</p>\n<h2>Exception safety</h2>\n<p>Unfortunately, this solution will fail if <code>new char[...]</code> throws an exception due to memory exhaustion.\nOne possible solution is to introduce a local variable and reorder the statements:</p>\n<pre><code>// 2. copy assignment operator\nperson&amp; operator=(const person&amp; that)\n{\n    char* local_name = new char[strlen(that.name) + 1];\n    // If the above statement throws,\n    // the object is still in the same state as before.\n    // None of the following statements will throw an exception :)\n    strcpy(local_name, that.name);\n    delete[] name;\n    name = local_name;\n    age = that.age;\n    return *this;\n}\n</code></pre>\n<p>This also takes care of self-assignment without an explicit check.\nAn even more robust solution to this problem is the <a href=\"https://stackoverflow.com/questions/3279543/\">copy-and-swap idiom</a>,\nbut I will not go into the details of exception safety here.\nI only mentioned exceptions to make the following point: <strong>Writing classes that manage resources is hard.</strong></p>\n<h2>Noncopyable resources</h2>\n<p>Some resources cannot or should not be copied, such as file handles or mutexes.\nIn that case, simply declare the copy constructor and copy assignment operator as <code>private</code> without giving a definition:</p>\n<pre><code>private:\n\n    person(const person&amp; that);\n    person&amp; operator=(const person&amp; that);\n</code></pre>\n<p>Alternatively, you can inherit from <code>boost::noncopyable</code> or declare them as deleted (C++0x):</p>\n<pre><code>person(const person&amp; that) = delete;\nperson&amp; operator=(const person&amp; that) = delete;\n</code></pre>\n<h2>The rule of three</h2>\n<p>Sometimes you need to implement a class that manages a resource.\n(Never manage multiple resources in a single class,\nthis will only lead to pain.)\nIn that case, remember the <strong>rule of three</strong>:</p>\n<blockquote>\n<p id=\"so_4172722_4172724_4\">If you need to explicitly declare either the destructor,\n  copy constructor or copy assignment operator yourself,\n  you probably need to explicitly declare all three of them.</p>\n</blockquote>\n<p>(Unfortunately, this \"rule\" is not enforced by the C++ standard or any compiler I am aware of.)</p>\n<h1>Advice</h1>\n<p>Most of the time, you do not need to manage a resource yourself,\nbecause an existing class such as <code>std::string</code> already does it for you.\nJust compare the simple code using a <code>std::string</code> member\nto the convoluted and error-prone alternative using a <code>char*</code> and you should be convinced.\nAs long as you stay away from raw pointer members, the rule of three is unlikely to concern your own code.</p>\n", "OwnerUserId": "252000", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T10:31:37.513", "Id": "4172724", "Score": "1409", "CreationDate": "2010-11-13T13:27:19.090", "LastActivityDate": "2014-08-30T15:38:25.357"}, "14105409": {"ParentId": "4172722", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Basically if you have a destructor (not the default destructor) it means that the class that you defined has some memory allocation. Suppose that the class is used outside by some client code or by you.</p>\n<pre><code>    MyClass x(a, b);\n    MyClass y(c, d);\n    x = y; // This is a shallow copy if assignment operator is not provided\n</code></pre>\n<p>If MyClass has only some primitive typed members a default assignment operator would work but if it has some pointer members and objects that do not have assignment operators the result would be unpredictable. Therefore we can say that if there is something to delete in destructor of a class, we might need a deep copy operator which means we should provide a copy constructor and assignment operator.</p>\n", "OwnerUserId": "1678760", "LastEditorUserId": "1365653", "LastEditDate": "2015-09-11T11:39:15.923", "Id": "14105409", "Score": "34", "CreationDate": "2012-12-31T19:29:17.897", "LastActivityDate": "2015-09-11T11:39:15.923"}});