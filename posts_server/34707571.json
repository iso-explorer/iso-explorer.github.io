post_cb({"34708035": {"PostTypeId": "2", "Body": "<p>This expression</p>\n<pre><code>MyItem{{}}\n</code></pre>\n<p>denotes explicit type conversion (the functional notation).</p>\n<p>According to the C++ Standard (5.2.3 Explicit type conversion (functional notation))</p>\n<blockquote id=\"so_34707571_34708035_0\">\n<ol start=\"3\">\n<li>Similarly, a simple-type-specifier or typename-specifier followed by a\n  braced-init-list creates a temporary object of the specified type\n  direct-list-initialized (8.5.4) with the specified braced-init-list,\n  and its value is that temporary object as a prvalue.</li>\n</ol>\n</blockquote>\n<p>Class MyItem has conversion initializer-list constructor</p>\n<pre><code>MyItem(std::initializer_list&lt;double&gt; l) {\n    std::cout &lt;&lt; \"l size \" &lt;&lt; l.size() &lt;&lt; \")\" &lt;&lt; std::endl;\n}\n</code></pre>\n<p>that is selected for the explicit type conversion. In fact it is equivalent to the call</p>\n<pre><code>MyItem( {{}} );\n</code></pre>\n<p>So the constructor gets an initializer list with one element</p>\n<pre><code>{ {} }\n</code></pre>\n<p>A scalar object of type double can be initialized with an empty braces <code>{}</code>. </p>\n<p>As result the expression creates a temporary object of type <code>MyItem</code> which is initialized by an initializer list that contains one element of type double that is value-initialized by means of empty braces.</p>\n", "LastActivityDate": "2016-01-10T16:48:01.467", "LastEditorUserId": "2877241", "Id": "34708035", "CommentCount": "0", "CreationDate": "2016-01-10T16:42:50.563", "ParentId": "34707571", "Score": "5", "OwnerUserId": "2877241", "LastEditDate": "2016-01-10T16:48:01.467"}, "bq_ids": {"n4140": {"so_34707571_34708035_0": {"length": 18, "quality": 0.9473684210526315, "section_id": 6001}}, "n3337": {"so_34707571_34708035_0": {"length": 18, "quality": 0.9473684210526315, "section_id": 5769}}}, "34707623": {"PostTypeId": "2", "Body": "<p>When you use braces (list-initialization) to initialize the <code>MyItem</code> object, the list constructor you have shown is very greedy.</p>\n<p>These would pass an empty list:</p>\n<pre><code>MyItem foo({});\nMyItem foo{std::initializer_list&lt;double&gt;{}};\n</code></pre>\n<p>This passes a list containing a single element - a value-initialized <code>double</code> (0.0):</p>\n<pre><code>MyItem foo{{}};\n</code></pre>\n<p>This works because there are certain contexts where you can simply use braces in place of a known type. Here, it knows from preferring the list constructor that the given list should contain <code>double</code>.</p>\n<p>For completeness, this looks like it passes an empty list, but it actually value-initializes <code>foo</code> if it has a default constructor (or in special cases, does something almost equivalent). If there's no default constructor, it would choose the list constructor, <a href=\"http://coliru.stacked-crooked.com/a/2c206fef140e35d8\">as shown here</a>.</p>\n<pre><code>MyItem foo{};\n</code></pre>\n", "LastActivityDate": "2016-01-10T16:22:05.117", "LastEditorUserId": "962089", "Id": "34707623", "CommentCount": "5", "CreationDate": "2016-01-10T16:06:21.843", "ParentId": "34707571", "Score": "10", "OwnerUserId": "962089", "LastEditDate": "2016-01-10T16:22:05.117"}, "34707571": {"ViewCount": "602", "Body": "<p>I have the following constructor:</p>\n<pre><code>MyItem(std::initializer_list&lt;double&gt; l) {\n    std::cout &lt;&lt; \"l size \" &lt;&lt; l.size() &lt;&lt; \")\" &lt;&lt; std::endl;\n}\n</code></pre>\n<p>Which is called later with double curly braces:</p>\n<pre><code>MyItem{{}}\n</code></pre>\n<p>The result l.size() gives is 1.</p>\n<p>What's the mechanics behind such behavior?</p>\n<p>It seems like nested {} plays like a default constructor for the only element, but I don't quite understand why and how type deduction works here.</p>\n", "AcceptedAnswerId": "34707623", "Title": "Why does double empty curly braces { { } } create a std::initializer_list<double> with one element, not zero?", "CreationDate": "2016-01-10T16:02:10.923", "Id": "34707571", "CommentCount": "1", "FavoriteCount": "3", "PostTypeId": "1", "LastEditDate": "2016-01-10T16:17:01.190", "LastEditorUserId": "63550", "LastActivityDate": "2016-01-10T16:48:01.467", "Score": "18", "OwnerUserId": "947334", "Tags": "<c++><initializer-list>", "AnswerCount": "2"}});