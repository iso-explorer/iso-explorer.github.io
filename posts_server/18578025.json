post_cb({"bq_ids": {"n4140": {"so_18578025_18578076_1": {"length": 12, "quality": 0.8571428571428571, "section_id": 5336}}, "n3337": {"so_18578025_18578076_1": {"length": 12, "quality": 0.8571428571428571, "section_id": 5133}}, "n4659": {"so_18578025_18578076_1": {"length": 12, "quality": 0.8571428571428571, "section_id": 6757}}}, "18578076": {"Id": "18578076", "PostTypeId": "2", "Body": "<p>The <code>true</code> and <code>false</code> are keywords in C++. You cannot use them in enum identifiers.</p>\n<p>As it is said in the standard :</p>\n<blockquote>\n<p id=\"so_18578025_18578076_0\"><strong>2.12 Keywords [lex.key]</strong></p>\n<p id=\"so_18578025_18578076_1\">The identifiers shown in Table 4 are reserved for use as keywords (that is, they are unconditionally treated as keywords in phase 7) except in an attribute-token.</p>\n<p id=\"so_18578025_18578076_2\">In table 4:</p>\n<pre><code> false\n ...\n true\n</code></pre>\n</blockquote>\n<p>In C, they are not keywords, your code should work but the best should be to include <code>&lt;stdbool.h&gt;</code> who already defines <code>true</code> and <code>false</code> then you don't need to define them by yourself.</p>\n", "LastEditorUserId": "1394283", "LastActivityDate": "2013-09-02T17:21:15.110", "Score": "2", "CreationDate": "2013-09-02T17:15:11.243", "ParentId": "18578025", "CommentCount": "0", "OwnerUserId": "1394283", "LastEditDate": "2013-09-02T17:21:15.110"}, "18578025": {"ViewCount": "1231", "Body": "<p>I'm getting <code>\"error: expected '}'\"</code> where the '^' is pointing when I compile in the following C++ source:</p>\n<pre><code>typedef enum { false, true } Boolean;\n               ^\n</code></pre>\n<p>I don't get this error when I compile it as C source.  </p>\n<p>What it the reason for this? I'm stumped!</p>\n", "AcceptedAnswerId": "18578052", "Title": "Why am I getting \"error: expected '}'\" in C++ but not in C?", "CreationDate": "2013-09-02T17:12:23.443", "Id": "18578025", "CommentCount": "7", "LastEditDate": "2013-09-02T17:59:06.153", "PostTypeId": "1", "LastEditorUserId": "78845", "LastActivityDate": "2013-09-02T19:22:37.860", "Score": "3", "OwnerUserId": "2738698", "Tags": "<c++><c><enums><boolean>", "AnswerCount": "3"}, "18578087": {"Id": "18578087", "PostTypeId": "2", "Body": "<p>To solve this you need to do:</p>\n<pre><code>#ifdef __cplusplus\n  typedef bool Boolean;\n#else\n  typedef enum { false, true } Boolean;\n#endif\n</code></pre>\n<p>That way, you are not trying to use C++ keywords (<code>true</code> and <code>false</code>) in an <code>enum</code>. </p>\n", "LastActivityDate": "2013-09-02T17:15:54.253", "CommentCount": "2", "CreationDate": "2013-09-02T17:15:54.253", "ParentId": "18578025", "Score": "6", "OwnerUserId": "1919155"}, "18578052": {"Id": "18578052", "PostTypeId": "2", "Body": "<p><code>false</code> and <code>true</code> are C++ keywords, so you can't use them as <code>enum</code> identifiers.</p>\n<p>In C they are not keywords so your code will work, but if you include <code>&lt;stdbool.h&gt;</code> then it will fail to compile because that header defines <code>false</code> and <code>true</code> as macros.</p>\n<p>Note that you probably shouldn't implement a boolean type yourself. C++ already has the <code>bool</code> type, and if you are using a C99 compiler, you can include <code>stdbool.h</code>. This will give you a <code>bool</code> type that has <code>false</code> and <code>true</code> values, similar to C++.</p>\n", "LastEditorUserId": "189205", "LastActivityDate": "2013-09-02T19:22:37.860", "Score": "16", "CreationDate": "2013-09-02T17:14:04.407", "ParentId": "18578025", "CommentCount": "2", "OwnerUserId": "189205", "LastEditDate": "2013-09-02T19:22:37.860"}});