post_cb({"32915434": {"CommentCount": "3", "ViewCount": "105", "PostTypeId": "1", "LastEditorUserId": "4385532", "CreationDate": "2015-10-02T20:34:21.233", "LastActivityDate": "2015-10-29T11:43:45.857", "Title": "Is it guaranteed that size_t, vector::size_type, etc typedefs won't bind to a char type?", "LastEditDate": "2015-10-29T11:43:45.857", "Id": "32915434", "Score": "3", "Body": "<p>It is definitely possible that <code>cstdint</code> typedefs bind to char variables. For example, it is very likely that <code>uint_least8_t</code> binds to <code>unsigned char</code>, and <code>int_least8_t</code> binds to <code>signed char</code>.</p>\n<p>Does the Standard guarantee that similar thing won't happen to <code>size_t</code> or similar types? Or is there at least a purely theoretical chance that such types will bind to some char types, like <code>unsigned char</code> or maybe even <code>wchar_t</code>?</p>\n", "Tags": "<c++><char><size-t>", "OwnerUserId": "4385532", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_32915434_32915587_0": {"section_id": 6708, "quality": 0.8461538461538461, "length": 11}}, "n3337": {"so_32915434_32915587_0": {"section_id": 6463, "quality": 0.8461538461538461, "length": 11}}, "n4659": {"so_32915434_32915587_0": {"section_id": 8183, "quality": 0.8461538461538461, "length": 11}}}, "32915587": {"ParentId": "32915434", "PostTypeId": "2", "CommentCount": "10", "Body": "<p>All we know about <code>std::size_t</code> is:</p>\n<blockquote>\n<p id=\"so_32915434_32915587_0\">The type size_t is an implementation-defined unsigned integer type that is large enough to contain the size\n  in bytes of any object.</p>\n</blockquote>\n<p>If <code>unsigned char</code> fulfills this condition, it may be used as <code>std::size_t</code>.</p>\n<p>However, this concern is purely theoretical as there is not a single real platform (that I know of) where <s><code>unsigned char</code> would be wide enough</s> (alright, that was wrong) a char type is used as <code>std::size_t</code> or the like.</p>\n<p>If you are super paranoid, you can promote the value to at least <code>int</code> with the unary <code>+</code>:</p>\n<pre><code>std::cout &lt;&lt; +vector.size();\n</code></pre>\n<p>This will print the number even if the size type would be a character type.</p>\n<p>For reading you can use variables of type <code>std::common_type&lt;unsigned int, std::size_t&gt;::type</code> (probably through a <code>typedef</code>) and then do a bounds check in case <code>sizeof(int) &gt; sizeof(std::size_t)</code>.</p>\n", "OwnerUserId": "3002139", "LastEditorUserId": "3002139", "LastEditDate": "2015-10-02T21:00:44.350", "Id": "32915587", "Score": "5", "CreationDate": "2015-10-02T20:44:58.370", "LastActivityDate": "2015-10-02T21:00:44.350"}, "32915647": {"ParentId": "32915434", "CommentCount": "7", "Body": "<p>Document <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf\" rel=\"nofollow\">N3337</a> is the closest approximation to C++11 that is readily available online for free.  The relevant sections are 3.9.1 [basic.fundamental], 18.2 [support.types], and 18.4 [cstdint].</p>\n<p>All of the type names you are curious about, except <code>wchar_t</code>, are required to be <code>typedef</code>s for primitive <em>integer types</em> of the appropriate signedness.  <code>signed char</code> and <code>unsigned char</code> are considered to be primitive integer types; plain <code>char</code> is not.  <code>wchar_t</code> is special; in C++ (not C), it is a <em>keyword</em> (like <code>int</code>) and a distinct primitive type.</p>\n<p>Plain <code>char</code>, <code>signed char</code>, and <code>unsigned char</code> are considered to be <em>character types</em>; <code>wchar_t</code>, <code>char16_t</code>, and <code>char32_t</code> are <strong>not</strong> character types (nor are they integer types).</p>\n<p>So the answer is that all of the types you mention, except <code>wchar_t</code>,  <em>could</em> conceivably be defined as <code>signed char</code> or <code>unsigned char</code>, but not as plain <code>char</code>.</p>\n<p>Yes, this is confusing.  It reflects a tangled history of varying levels of compatibility with C and changing ideas about how to handle text that can't be represented in ASCII.</p>\n", "OwnerUserId": "388520", "PostTypeId": "2", "Id": "32915647", "Score": "0", "CreationDate": "2015-10-02T20:49:44.517", "LastActivityDate": "2015-10-02T20:49:44.517"}});