post_cb({"1901043": {"ParentId": "1900924", "CommentCount": "2", "Body": "<p>Stating the <code>partition</code> precondition that the range <code>[first, last)</code> should be a valid range, <a href=\"http://www.sgi.com/tech/stl/InputIterator.html\" rel=\"nofollow noreferrer\">SGI says</a>:</p>\n<blockquote>\n<p id=\"so_1900924_1901043_0\">The range [i,j) is a valid range if both i and j are valid iterators, and j is reachable from i [2].</p>\n</blockquote>\n<p>Which makes it ok to use <code>partition</code> on an empty range.</p>\n<p>Of course, sgi is not the standard.  But it's pretty close :)</p>\n", "OwnerUserId": "6610", "PostTypeId": "2", "Id": "1901043", "Score": "0", "CreationDate": "2009-12-14T13:49:48.803", "LastActivityDate": "2009-12-14T13:49:48.803"}, "1900938": {"ParentId": "1900924", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>Am I missing something, or shouldn't:</p>\n<pre><code>std::list&lt;int&gt;::iterator end_it = l.begin();\n</code></pre>\n<p>be:</p>\n<pre><code>std::list&lt;int&gt;::iterator end_it = l.end();\n</code></pre>\n<p>But actually I think the return value of partition() is undefined for an empty set of values. The return value is defined to be:</p>\n<blockquote>\n<p id=\"so_1900924_1900938_0\">An iterator i such that for any\n  iterator j in the range [first, i),\n  pred(*j) != false, and for any\n  iterator k in the range [i, last),\n  pred(*j) == false.</p>\n</blockquote>\n<p>IMHO, the predicate cannot be applied to an end iterator, as it would not be dereferrencable.</p>\n", "Id": "1900938", "LastEditDate": "2009-12-14T13:35:34.230", "OwnerDisplayName": "anon", "Score": "4", "CreationDate": "2009-12-14T13:30:27.110", "LastActivityDate": "2009-12-14T13:35:34.230", "LastEditorDisplayName": "anon"}, "1900924": {"CommentCount": "1", "ViewCount": "329", "PostTypeId": "1", "LastEditorUserId": "85322", "CreationDate": "2009-12-14T13:27:35.213", "LastActivityDate": "2009-12-14T17:39:49.650", "Title": "Behaviour of std::partition when called on empty container?", "AcceptedAnswerId": "1901917", "LastEditDate": "2009-12-14T13:37:11.823", "Id": "1900924", "Score": "2", "Body": "<p>I ran into a problem when calling std::partition on an empty container (std::list).</p>\n<pre><code>std::list&lt;int&gt;::iterator end_it = std::partition(l.begin(), l.end(), SomeFunctor(42));\nstd::list&lt;int&gt;::iterator it = l.begin();\n\nwhile (it != end_it)\n{\n  // do stuff\n}\n</code></pre>\n<p>If the list is empty, std::partition returns an iterator, that is not equal\nto l.end(). Is this the default behaviour?</p>\n", "Tags": "<c++><stl>", "OwnerUserId": "85322", "AnswerCount": "5"}, "1900957": {"ParentId": "1900924", "CommentCount": "0", "Body": "<p>No, <code>std::partition</code> should return the end iterator, and for me (gcc-4.4.2) it does.</p>\n<p>I think you have a bug somewhere. Either in your code or in the compiler.</p>\n", "OwnerUserId": "30579", "PostTypeId": "2", "Id": "1900957", "Score": "0", "CreationDate": "2009-12-14T13:34:38.340", "LastActivityDate": "2009-12-14T13:34:38.340"}, "1901917": {"ParentId": "1900924", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>Right now, there really is no good answer. The Library Working Group of the C++ committee issue number <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#1205\" rel=\"nofollow noreferrer\">1205</a> covers exactly this question. That issue includes both a primary and an alternative proposed resolution but neither has been accepted or rejected yet (and I don't like either one).</p>\n<p>Since the standard doesn't give an unambiguous definition of the result of applying an algorithm to an empty range, I'd say the result of doing so is currently undefined. I think there's some hope that it'll be defined in the next version of the standard, but for now it's really not. Even when it is, from a practical viewpoint it'll probably be better to avoid it at least for a while, because it may be a while before compilers conform in this respect (though it should usually be a <em>fairly</em> easy fix).</p>\n<p>Edit, mostly in response to Martin B's comment: the issue is listed for [alg.partitions], which includes both <code>std::partition</code> and <code>std::stable_partition</code>. Unfortunately, the proposed wording does <em>not</em> seem to directly address either one. The paragraph it cites is (at least in N2960) in the description of <code>std::is_paritioned</code>, which is pretty much what Martin B described, even though he used the wrong name for it. Worse, the primary proposed resolution is in the form of non-normative notes.</p>\n<p>As I said, though, I don't really like either proposed resolution. The primary tries to place requirements in non-normative notes. Such notes are fine if they clarify requirements that are really already present elsewhere, but might be hard to find. In this case, I'm pretty sure the requirements really aren't present. The alternative resolution is better, but fails to address the core question of whether an empty range is a valid range.</p>\n<p>IMO, a better resolution would start at \u00a724.1/7. This already tells us that: \"A range [i, i) is an empty range;...\" I think it should add normative language to explicitly state that an empty range either is or is not a valid range. If it's not a valid range, nothing else needs to be added -- it's already explicit that applying an algorithm to an invalid range gives undefined behavior.</p>\n<p>If an empty range is valid, then <em>normative</em> wording needs to be added to define the results for applying each algorithm to an empty range. This would answer the basic question, then state what that answer implies for each specific algorithm.</p>\n", "OwnerUserId": "179910", "LastEditorUserId": "179910", "LastEditDate": "2009-12-14T17:39:49.650", "Id": "1901917", "Score": "2", "CreationDate": "2009-12-14T16:27:40.997", "LastActivityDate": "2009-12-14T17:39:49.650"}, "bq_ids": {"n4140": {"so_1900924_1900938_0": {"section_id": 1379, "quality": 0.75, "length": 9}}, "n3337": {"so_1900924_1900938_0": {"section_id": 1373, "quality": 0.75, "length": 9}}, "n4659": {"so_1900924_1900938_0": {"section_id": 1559, "quality": 0.75, "length": 9}}}, "1900947": {"ParentId": "1900924", "CommentCount": "0", "Body": "<p><a href=\"http://www.cplusplus.com/reference/algorithm/partition/\" rel=\"nofollow noreferrer\">This page</a> shows the code that <code>std::partition</code> is behaving like.</p>\n", "OwnerUserId": "28169", "PostTypeId": "2", "Id": "1900947", "Score": "0", "CreationDate": "2009-12-14T13:32:01.327", "LastActivityDate": "2009-12-14T13:32:01.327"}});