post_cb({"28707464": {"ParentId": "28707388", "LastEditDate": "2015-02-24T22:32:44.593", "CommentCount": "4", "CreationDate": "2015-02-24T22:17:11.293", "OwnerUserId": "4433386", "LastEditorUserId": "4433386", "PostTypeId": "2", "Id": "28707464", "Score": "0", "Body": "<p><code>static</code> is a C++ storage specifier. It means the value of this member of the class is the same for all instances of the class. Nothing special about enums here.</p>\n<p>EDIT: Even the <code>static</code> tag wiki has an explanation. On exactly this topic.</p>\n<p>EDIT2: Oh, I've misread your code. There's no static enum. You can have a static variable of an enum type that holds a value.</p>\n", "LastActivityDate": "2015-02-24T22:32:44.593"}, "28707388": {"CommentCount": "6", "ViewCount": "7406", "PostTypeId": "1", "LastEditorUserId": "64046", "CreationDate": "2015-02-24T22:13:00.913", "LastActivityDate": "2015-06-07T01:26:48.220", "Title": "C++ declaring static enum vs enum in a class", "AcceptedAnswerId": "28707520", "LastEditDate": "2015-06-07T01:26:48.220", "Id": "28707388", "Score": "5", "Body": "<p>What's the difference between the <code>static enum</code> and <code>enum</code> definitions when defined inside a class declaration like the one shown below?</p>\n<pre><code>class Example\n{\n     Example();\n     ~Example();\n\n     static enum Items{ desk = 0, chair, monitor };\n     enum Colors{ red = 0, blue, green };\n}\n</code></pre>\n<p>Also, since we are defining types in a class, what do we call them?  By analogy if I define a variable in a class, we call it a member variable.</p>\n", "Tags": "<c++><class><enums><static><nested>", "OwnerUserId": "3731622", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_28707388_28707520_0": {"section_id": 5395, "quality": 0.9, "length": 9}}, "n3337": {"so_28707388_28707520_0": {"section_id": 5189, "quality": 0.9, "length": 9}}, "n4659": {"so_28707388_28707520_0": {"section_id": 6820, "quality": 0.9, "length": 9}}}, "28707520": {"ParentId": "28707388", "LastEditDate": "2015-02-25T05:39:15.223", "CommentCount": "5", "CreationDate": "2015-02-24T22:21:44.543", "OwnerUserId": "241631", "LastEditorUserId": "241631", "PostTypeId": "2", "Id": "28707520", "Score": "7", "Body": "<p><code>static</code> cannot be applied to <code>enum</code> declarations, so your code is invalid.</p>\n<p>From N3337, <em>\u00a77.1.1/5 <strong>[dcl.stc]</strong></em></p>\n<blockquote>\n<p id=\"so_28707388_28707520_0\">The <code>static</code> specifier can be applied only to names of variables and functions and to anonymous unions ...</p>\n</blockquote>\n<p>An <code>enum</code> declaration is none of those.</p>\n<p>You can create an instance of the <code>enum</code> and make that <code>static</code> if you want.</p>\n<pre><code>class Example\n{\n     enum Items{ desk = 0, chair, monitor };\n     static Items items; // this is legal\n};\n</code></pre>\n<p>In this case <code>items</code> is just like any other <a href=\"http://en.cppreference.com/w/cpp/language/static#Static_data_members\" rel=\"nofollow\">static data member</a>.</p>\n<hr>\n<p>This is an <a href=\"https://connect.microsoft.com/VisualStudio/feedbackdetail/view/927577/storage-classes-allowed-on-enum-declarations\" rel=\"nofollow\">MSVC bug</a>; from the linked bug report it seems the compiler will allow both <code>static</code> and <code>register</code> storage specifiers on <code>enum</code> declarations. The bug has been closed as fixed, so maybe the fix will be available in VS2015.</p>\n</hr>", "LastActivityDate": "2015-02-25T05:39:15.223"}});