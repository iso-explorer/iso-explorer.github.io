post_cb({"13314638": {"CommentCount": "2", "ViewCount": "138", "CreationDate": "2012-11-09T19:28:08.720", "LastActivityDate": "2012-11-09T21:59:48.347", "Title": "size greater than max_size in containers", "PostTypeId": "1", "Id": "13314638", "Score": "3", "Body": "<p>What standard says about situation when size of the container is greater than max_size?</p>\n<p>UB, std::bad_alloc or something else?</p>\n<p>MSVC throws an exception.</p>\n", "Tags": "<c++>", "OwnerUserId": "1608835", "AnswerCount": "2"}, "13316366": {"ParentId": "13314638", "CommentCount": "0", "Body": "<p>I'm assuming you mean 'what happens if I try to push the container over <code>max_size</code>?' because a container's <code>size</code> cannot exceed <code>max_size</code>. If it does, then <code>max_size</code> returned an incorrect value.</p>\n<p>Exactly what happens depends on the container and what operation is attempting to resize the container, but in the case of most re-sizable containers (i.e. <code>string</code>, <code>vector</code>), the standard requires a <code>length_error</code> to be thrown.</p>\n", "OwnerUserId": "214796", "PostTypeId": "2", "Id": "13316366", "Score": "1", "CreationDate": "2012-11-09T21:35:11.060", "LastActivityDate": "2012-11-09T21:35:11.060"}, "bq_ids": {"n4140": {"so_13314638_13316655_2": {"section_id": 971, "quality": 0.75, "length": 6}, "so_13314638_13316655_4": {"section_id": 971, "quality": 0.75, "length": 6}}, "n3337": {"so_13314638_13316655_2": {"section_id": 960, "quality": 0.75, "length": 6}, "so_13314638_13316655_4": {"section_id": 960, "quality": 0.75, "length": 6}}, "n4659": {"so_13314638_13316655_2": {"section_id": 1033, "quality": 0.75, "length": 6}, "so_13314638_13316655_4": {"section_id": 1033, "quality": 0.75, "length": 6}}}, "13316655": {"ParentId": "13314638", "CommentCount": "0", "Body": "<p>The standard requires a <code>std::length_error</code> to be thrown in most cases, but in some cases the allocator may throw a different exception.</p>\n<p>From C++03 \u00a721.3/4a (Class template <code>basic_string</code>):</p>\n<blockquote>\n<p id=\"so_13314638_13316655_0\">For any string operation, if as a result of the operation, <code>size()</code> would exceed <code>max_size()</code> then the\n  operation throws <code>length_error</code>.</p>\n</blockquote>\n<p>\u00a721.3.3/10-12 (<code>basic_string</code> capacity):</p>\n<blockquote>\n<p id=\"so_13314638_13316655_1\"><code>void reserve(size_type res_arg=0)</code>;<br>\n  [...]<br>\n<strong>Throws:</strong> <code>length_error</code> if <code>res_arg &gt; max_size()</code>.<sup>218)</sup></br></br></p>\n<p id=\"so_13314638_13316655_2\">218) <code>reserve()</code> uses <code>Allocator::allocate()</code> which may throw an appropriate exception.</p>\n</blockquote>\n<p>\u00a723.2.4.2/2-4 (<code>vector</code> capacity):</p>\n<blockquote>\n<p id=\"so_13314638_13316655_3\"><code>void reserve(size_type n)</code><br>\n  [...]<br>\n<strong>Throws:</strong> <code>length_error</code> if <code>n &gt; max_size()</code>.<sup>248</sup></br></br></p>\n<p id=\"so_13314638_13316655_4\">248) <code>reserve()</code> uses <code>Allocator::allocate()</code> which may throw an appropriate exception.</p>\n</blockquote>\n<p>The standard doesn't explicitly mention this for the other standard containers (<code>deque</code>, <code>list</code>, <code>priority_queue</code>, <code>map</code>, <code>multimap</code>, <code>set</code>, <code>multiset</code>, and <code>bitset</code>).  However, in Table 65 (Container requirements), it says that <code>max_size</code> is the \"<code>size()</code> of the largest possible container\".</p>\n", "OwnerUserId": "9530", "PostTypeId": "2", "Id": "13316655", "Score": "1", "CreationDate": "2012-11-09T21:59:48.347", "LastActivityDate": "2012-11-09T21:59:48.347"}});