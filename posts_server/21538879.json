post_cb({"21538942": {"ParentId": "21538879", "CommentCount": "1", "Body": "<blockquote>\n<p id=\"so_21538879_21538942_0\"><strong>5.3.5/3</strong> In the first alternative (delete object), if the static type of the object to be deleted is different from its\n  dynamic type, the static type shall be a base class of the dynamic type of the object to be deleted and the\n  static type <strong>shall have a virtual destructor or the behavior is undefined</strong>.</p>\n</blockquote>\n<p>Emphasis mine. Crashing is one possible manifestation of undefined behavior. \"Nothing bad appears to happen\" is another.</p>\n", "OwnerUserId": "1670129", "PostTypeId": "2", "Id": "21538942", "Score": "4", "CreationDate": "2014-02-03T22:13:09.063", "LastActivityDate": "2014-02-03T22:13:09.063"}, "21538879": {"CommentCount": "1", "ViewCount": "54", "CreationDate": "2014-02-03T22:08:59.710", "LastActivityDate": "2014-02-03T22:20:41.660", "Title": "Virtual method crash with MSVC", "AcceptedAnswerId": "21538942", "PostTypeId": "1", "Id": "21538879", "Score": "1", "Body": "<p>I think I found a bug in MSVC's compiler (MSVC Ultimate 2012 Version 11.0.61030.00 Update 4).</p>\n<pre><code>#include \"stdafx.h\"\n\nclass Base\n{\npublic:\n    Base()\n    {\n    }\n\n    void print()\n    {\n        printf(\"Base::print()\\n\");\n    }\n};\n\nclass Derived : public Base\n{\npublic:\n    Derived() : Base()\n    {\n    }\n\n    virtual void print()\n    {\n        printf(\"Derived::print()\\n\");\n    }\n};\n\nclass DerivedSquared : public Derived\n{\npublic:\n    DerivedSquared() : Derived()\n    {\n    }\n\n    void print()\n    {\n        printf(\"DerivedSquared::print()\\n\");\n    }\n};\n\nint main(int argc, char *argv[])\n{\n    Base *obj1 = new Base();\n    Base *obj2 = new Derived();\n    Base *obj3 = new DerivedSquared();\n\n    obj1-&gt;print();\n    obj2-&gt;print();\n    obj3-&gt;print();\n\n    // Memory leaks are ALWAYS nasty :P\n    delete obj1;\n\n    // CRASH!!!\n    // File: f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\dbgdel.cpp\n    //  _BLOCK_TYPE_IS_VALID(pHead-&gt;nBlockUse)\n    delete obj2;\n    delete obj3;\n\n    return 0;\n}\n</code></pre>\n<p>The particularity in that code is that Base's printf() method is not virtual, while Derived's one is.\nThis doesn't happen with GCC (I've tested that with <a href=\"http://codepad.org/\" rel=\"nofollow\">codepad</a>).\nI wonder if this is an actual compiler bug or I'm missing something obvious.</p>\n<p>Thoughts?</p>\n", "Tags": "<c++><visual-c++><compiler-construction><crash>", "OwnerUserId": "1447535", "AnswerCount": "3"}, "21539058": {"ParentId": "21538879", "CommentCount": "0", "Body": "<p>The problem occurs without calling the 'print' functions, and can be resolved by adding a virtual destructor to each class.</p>\n", "OwnerUserId": "1382251", "PostTypeId": "2", "Id": "21539058", "Score": "2", "CreationDate": "2014-02-03T22:20:41.660", "LastActivityDate": "2014-02-03T22:20:41.660"}, "bq_ids": {"n4140": {"so_21538879_21538942_0": {"section_id": 6107, "quality": 0.9285714285714286, "length": 26}}, "n3337": {"so_21538879_21538942_0": {"section_id": 5873, "quality": 0.9285714285714286, "length": 26}}, "n4659": {"so_21538879_21538942_0": {"section_id": 7604, "quality": 0.9285714285714286, "length": 26}}}, "21538984": {"ParentId": "21538879", "CommentCount": "2", "Body": "<p>As for me then it looks like a bug. I mean calling the print function that ends with crash if you are speaking about this.</p>\n", "OwnerUserId": "2877241", "PostTypeId": "2", "Id": "21538984", "Score": "0", "CreationDate": "2014-02-03T22:15:22.160", "LastActivityDate": "2014-02-03T22:15:22.160"}});