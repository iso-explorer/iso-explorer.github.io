post_cb({"17665519": {"ViewCount": "1097", "Body": "<p>I am unsure about the guarantees of execution for the C / C++ ternary operator.<br>\nFor instance if I am given an address and a boolean that tells if that address is good for reading I can easily avoid bad reads using if/else:</br></p>\n<pre><code>int foo(const bool addressGood, const int* ptr) {\n    if (addressGood) { return ptr[0]; }\n    else { return 0; }\n}\n</code></pre>\n<p>However can a ternary operator (<code>?:</code>) guarantee that <code>ptr</code> won't be accessed unless <code>addressGood</code> is true?<br> Or could an optimizing compiler generate code that accesses <code>ptr</code> in any case (possibly crashing the program), stores the value in an intermediate register and use conditional assignment to implement the ternary operator?</br></p>\n<pre><code>int foo(const bool addressGood, const int* ptr) {\n    // Not sure about ptr access conditions here.\n    return (addressGood) ? ptr[0] : 0;\n}\n</code></pre>\n<p>Thanks.</p>\n", "AcceptedAnswerId": "17665570", "Title": "C++ ternary operator execution conditions", "CreationDate": "2013-07-15T23:18:59.500", "Id": "17665519", "CommentCount": "3", "PostTypeId": "1", "LastActivityDate": "2013-07-15T23:37:46.697", "Score": "5", "OwnerUserId": "1232524", "Tags": "<c++><c><pointers><memory><conditional-statements>", "AnswerCount": "4"}, "17665595": {"Id": "17665595", "PostTypeId": "2", "Body": "<p>The conditional (ternary) operator guarantees to only evaluate the second operand if the first operand compares unequal to 0, and only evaluate the third operand if the first operand compares equal to 0.  This means that your code is safe.</p>\n<p>There is also a sequence point after the evaluation of the first operand.</p>\n<p>By the way, you don't need the parantheses - <code>addressGood ? ptr[0] : 0</code> is fine too.</p>\n", "LastActivityDate": "2013-07-15T23:25:50.983", "Score": "1", "CreationDate": "2013-07-15T23:25:50.983", "ParentId": "17665519", "CommentCount": "1", "OwnerUserId": "134633"}, "17665714": {"Id": "17665714", "PostTypeId": "2", "Body": "<p>I would say, in addition to the answer that \"yes, it's guaranteed by the C++ standard\":</p>\n<p>Please use the first form. It's MUCH clearer what you are trying to achieve. </p>\n<p>I can almost guarantee that any sane compiler (with minimal amount of optimisation) generates exactly the same code for both examples anyway. </p>\n<p>So whilst it's useful to know that both of these forms achieve the same \"protection\", it is definitely preferred to use the form that is most readable. </p>\n<p>It also means you don't need to write a comment explaining that it is safe because of paragraph such and such in the C++ standard, thus making both take up the same amount of code-space - because if you didn't know it before, then you can rely on someone else ALSO not knowing that this is safe, and then spending the next half hour finding the answer via google, and either running into this thread, or asking the question again!</p>\n", "LastActivityDate": "2013-07-15T23:37:46.697", "Score": "1", "CreationDate": "2013-07-15T23:37:46.697", "ParentId": "17665519", "CommentCount": "0", "OwnerUserId": "1919155"}, "bq_ids": {"n4140": {"so_17665519_17665570_0": {"length": 45, "quality": 0.9574468085106383, "section_id": 6167}}, "n3337": {"so_17665519_17665570_0": {"length": 45, "quality": 0.9574468085106383, "section_id": 5928}}, "n4659": {"so_17665519_17665570_0": {"length": 45, "quality": 0.9574468085106383, "section_id": 7664}}}, "17665570": {"Id": "17665570", "PostTypeId": "2", "Body": "<p>Yes, the standard guarantees that <code>ptr</code> is only accessed if <code>addressGood</code> is true.  See <a href=\"https://stackoverflow.com/a/14763151/2530166\">this answer</a> on the subject, which quotes the standard:</p>\n<blockquote>\n<p id=\"so_17665519_17665570_0\">Conditional expressions group right-to-left. The first expression is contextually converted to bool (Clause 4). <strong>It is evaluated and if it is true, the result of the conditional expression is the value of the second expression</strong>, otherwise that of the third expression. <strong>Only one of the second and third expressions is evaluated.</strong> Every value computation and side effect associated with the first expression is sequenced before every value computation and side effect associated with the second or third expression.</p>\n</blockquote>\n<p>(C++11 standard, paragraph 5.16/1)</p>\n", "OwnerDisplayName": "user2530166", "LastEditorUserId": "-1", "LastActivityDate": "2013-07-15T23:23:49.987", "Score": "7", "CreationDate": "2013-07-15T23:23:49.987", "ParentId": "17665519", "CommentCount": "0", "LastEditDate": "2017-05-23T12:23:40.623"}, "17665584": {"Id": "17665584", "PostTypeId": "2", "Body": "<p>c++11/[expr.cond]/1</p>\n<pre><code>Conditional expressions group right-to-left. The \ufb01rst expression is contextually converted to bool (Clause 4).\nIt is evaluated and if it is true, the result of the conditional expression is the value of the second expression,\notherwise that of the third expression. Only one of the second and third expressions is evaluated. Every value\ncomputation and side e\ufb00ect associated with the \ufb01rst expression is sequenced before every value computation\nand side e\ufb00ect associated with the second or third expression\n</code></pre>\n", "LastActivityDate": "2013-07-15T23:25:16.607", "Score": "0", "CreationDate": "2013-07-15T23:25:16.607", "ParentId": "17665519", "CommentCount": "0", "OwnerUserId": "1598080"}});