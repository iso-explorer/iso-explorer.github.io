post_cb({"26667546": {"Id": "26667546", "PostTypeId": "2", "Body": "<p>In order to make a lambda function non-const you need to add the <code>mutable</code> keyword:</p>\n<pre><code>std::function&lt;int(int)&gt; Memoize(std::function&lt;int(int)&gt; fn)\n    {\n        std::map&lt;int, int&gt; memo;\n        std::function&lt;int(int)&gt; helper = [=](int pos) mutable // &lt;== HERE!!\n        {\n            if (memo.count(0) == 0)\n            {\n                memo[pos] = fn(pos);\n            }\n            return memo[pos];\n        };\n        return helper;\n    }\n</code></pre>\n", "LastActivityDate": "2014-10-31T04:25:57.670", "CommentCount": "0", "CreationDate": "2014-10-31T04:25:57.670", "ParentId": "26667515", "Score": "6", "OwnerUserId": "3807729"}, "bq_ids": {"n4140": {"so_26667515_26667544_1": {"length": 11, "quality": 0.9166666666666666, "section_id": 5974}, "so_26667515_26667544_0": {"length": 20, "quality": 0.8695652173913043, "section_id": 5964}}, "n3337": {"so_26667515_26667544_1": {"length": 11, "quality": 0.9166666666666666, "section_id": 5742}, "so_26667515_26667544_0": {"length": 17, "quality": 0.7391304347826086, "section_id": 5733}}, "n4659": {"so_26667515_26667544_1": {"length": 11, "quality": 0.9166666666666666, "section_id": 7473}, "so_26667515_26667544_0": {"length": 15, "quality": 0.6521739130434783, "section_id": 7453}}}, "26667515": {"ViewCount": "412", "Body": "<p>I was intending to write a memorization pattern in C++ and ended up with the following approach</p>\n<pre><code>std::function&lt;int(int)&gt; Memoize(std::function&lt;int(int)&gt; fn)\n    {\n        std::map&lt;int, int&gt; memo;\n        std::function&lt;int(int)&gt; helper = [=](int pos) \n        {\n            if (memo.count(pos) == 0)\n            {\n                memo[pos] = fn(pos);\n            }\n            return memo[pos];\n        };\n        return helper;\n    }\n</code></pre>\n<p>Strangely, my compiler VS 2012, refused to compile with the following error</p>\n<pre><code>1&gt;Source1.cpp(24): error C2678: binary '[' : no operator found which takes a left-hand operand of type 'const std::map&lt;_Kty,_Ty&gt;' (or there is no acceptable conversion)\n</code></pre>\n<p>It seems to me that the compiler deliberately captures everything by value as a const object. I cannot find any documented reference to this behavior.</p>\n<p>Can any one help me understand what is possibly happening here?  </p>\n", "AcceptedAnswerId": "26667544", "Title": "Lambda Capture by Value forces all scoped object to const", "CreationDate": "2014-10-31T04:22:22.540", "Id": "26667515", "CommentCount": "2", "LastEditDate": "2014-10-31T09:15:17.563", "PostTypeId": "1", "LastEditorUserId": "977038", "LastActivityDate": "2014-10-31T09:15:17.563", "Score": "8", "OwnerUserId": "977038", "Tags": "<c++><visual-c++><c++11><lambda>", "AnswerCount": "2"}, "26667544": {"Id": "26667544", "PostTypeId": "2", "Body": "<p>Lambdas behave more or less like function objects; like a function object they have a function call operator, i.e. <code>operator()</code>. For non-<code>mutable</code> lambdas, this function is <code>const</code>:</p>\n<p>[expr.prim.lambda]</p>\n<blockquote>\n<p id=\"so_26667515_26667544_0\">5 The closure type for a non-generic lambda-expression has a public\n  inline function call operator [...] <strong>This function call operator or\n  operator template is declared <code>const</code></strong> (9.3.1) if and only if the\n  lambda-expression\u2019s parameter-declaration-clause is <strong>not followed by\n  <code>mutable</code></strong>.</p>\n</blockquote>\n<p>Because entities captured by copy behave as though they were member variables of the lambda:</p>\n<blockquote>\n<p id=\"so_26667515_26667544_1\">15 [...] For each entity captured by copy, an unnamed non-static data member is declared in the closure type.</p>\n</blockquote>\n<p>and non-<code>mutable</code> members <strong>cannot</strong> be modified inside a <code>const</code> member function ([class.this] / 1, [dcl.type.cv] / 4), if you want to modify the captured entities you will have to declare a <code>mutable</code> lambda.</p>\n<p>As it stands your lambda looks like this:</p>\n<pre><code>class Helper\n{\npublic:\n    int operator()(int) const;\nprivate:\n    std::map&lt;int, int&gt; memo;\n    std::function&lt;int(int)&gt; fn;\n};\n</code></pre>\n<p>You can think of a <code>mutable</code> lambda as having a non-<code>const</code> <code>operator()</code>, in your case the lambda can be defined as follows:</p>\n<pre><code>std::function&lt;int(int)&gt; helper = [=](int pos) mutable\n// etc\n</code></pre>\n", "LastEditorUserId": "657267", "LastActivityDate": "2014-10-31T08:45:15.283", "Score": "14", "CreationDate": "2014-10-31T04:25:34.207", "ParentId": "26667515", "CommentCount": "1", "OwnerUserId": "657267", "LastEditDate": "2014-10-31T08:45:15.283"}});