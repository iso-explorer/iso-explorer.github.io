post_cb({"bq_ids": {"n4140": {"so_29717144_29717851_0": {"length": 31, "quality": 1.0, "section_id": 481}}, "n3337": {"so_29717144_29717851_0": {"length": 17, "quality": 0.5483870967741935, "section_id": 472}}, "n4659": {"so_29717144_29717851_0": {"length": 25, "quality": 0.8064516129032258, "section_id": 504}}}, "29717144": {"ViewCount": "664", "Body": "<p>I'm watching the \"<a href=\"https://channel9.msdn.com/Events/GoingNative/2013/Don-t-Help-the-Compiler\" rel=\"nofollow noreferrer\">Don\u2019t Help the Compiler</a>\" talk by STL, where he has a similar example on slide 26:</p>\n<pre><code>struct A\n{\n  A() = default;\n  A(const A&amp;) { std::cout &lt;&lt; \"copied\" &lt;&lt; std::endl; }\n  A(A&amp;&amp;) { std::cout &lt;&lt; \"moved\" &lt;&lt; std::endl; }\n};\n\nstd::pair&lt;A, A&gt; get_pair()\n{\n  std::pair&lt;A, A&gt; p;\n  return p;\n}\n\nstd::tuple&lt;A, A&gt; get_tuple()\n{\n  std::pair&lt;A, A&gt; p;\n  return p;\n}\n\nstd::tuple&lt;A, A&gt; get_tuple_moved()\n{\n  std::pair&lt;A, A&gt; p;\n  return std::move(p);\n}\n</code></pre>\n<p>With this, the following call:</p>\n<pre><code>get_pair();\nget_tuple();\nget_tuple_moved();\n</code></pre>\n<p>Produces this output:</p>\n<pre><code>moved\nmoved\ncopied\ncopied\nmoved\nmoved\n</code></pre>\n<p><a href=\"http://ideone.com/fCtjx7\" rel=\"nofollow noreferrer\">See MCVE in action</a>.</p>\n<p>Result of <code>get_pair</code> is move-constructed, which is as expected. A move may also has been completely elided by NRVO, but it is off the topic of the present question.</p>\n<p>Result of <code>get_tuple_moved</code> is also move-constructed, which is explicitly specified to be so. However, result of <code>get_tuple</code> is copy-constructed, which is completely un-obvious to me. </p>\n<p>I thought that any expression passed to <code>return</code> statement may be thought of as having implicit <code>move</code> on it, since the compiler knows it is about to go out of scope anyway. Seems like I'm wrong. Can someone clarify, what is going on here?</p>\n<p>See also related, but different question: <a href=\"https://stackoverflow.com/questions/14856344/when-should-stdmove-be-used-on-a-function-return-value\">When should std::move be used on a function return value?</a></p>\n", "AcceptedAnswerId": "29717851", "Title": "Why explicit std::move is needed when returning compatible type?", "CreationDate": "2015-04-18T12:10:47.853", "Id": "29717144", "CommentCount": "6", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2017-05-23T10:24:05.787", "LastEditorUserId": "-1", "LastActivityDate": "2015-04-18T18:36:17.827", "Score": "10", "OwnerUserId": "261217", "Tags": "<c++><c++11><c++14><move-semantics>", "AnswerCount": "1"}, "29717851": {"Id": "29717851", "PostTypeId": "2", "Body": "<p>The return statement in get_tuple() should be copy-initialized using the move-constructor, but since the type of the return expression and the return type don't match, the copy-constructor is chosen instead. There was a change made in C++14 where there is now an initial phase of overload resolution that treats the return statement as an rvalue when it is simply an automatic variable declared in the body.</p>\n<p>The relevant wording can be found in [class.copy]/p32:</p>\n<blockquote>\n<p id=\"so_29717144_29717851_0\">When the criteria for elision of a copy/move operation are met, [..], <strong>or when the expression in a return statement is a (possibly parenthesized) id-expression that names an object with automatic storage duration declared in the body</strong> [..], overload resolution to select the constructor for the copy is first performed as if the object were designated by an rvalue.</p>\n</blockquote>\n<p>So in C++14 all output should be coming from the move-constructor of A. </p>\n<p>Trunk versions of clang and gcc already implement this change. To get the same behavior in C++11 mode you'll need to use an explicit std::move() in the return statement.</p>\n", "LastEditorUserId": "701092", "LastActivityDate": "2015-04-18T13:18:44.853", "Score": "8", "CreationDate": "2015-04-18T13:12:40.547", "ParentId": "29717144", "CommentCount": "3", "LastEditDate": "2015-04-18T13:18:44.853", "OwnerUserId": "701092"}});