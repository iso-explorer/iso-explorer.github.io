post_cb({"15096287": {"ParentId": "15094828", "CommentCount": "0", "Body": "<p>In <code>void f(int x = 5)</code>, the <code>= 5</code> part is a default argument. You can call the function in two different ways:</p>\n<pre><code>f();  // uses default argument, as if f(5)\nf(3); // explicit argument\n</code></pre>\n<p>Note that the decision to use the default argument is made at the <strong>point of the call</strong>, not at the point of the declaration. Regardless of whether <code>int main(int x = 5, char *argv[])</code> is valid,  the application's startup code (part of the compiler's library) won't know about the attempted default argument, so won't do anything with it. And don't try and get tricky by calling <code>main</code> from inside your program: that's not allowed.</p>\n", "OwnerUserId": "1593860", "PostTypeId": "2", "Id": "15096287", "Score": "1", "CreationDate": "2013-02-26T18:14:40.450", "LastActivityDate": "2013-02-26T18:14:40.450"}, "15094828": {"CommentCount": "8", "ViewCount": "122", "PostTypeId": "1", "LastEditorUserId": "637679", "CreationDate": "2013-02-26T16:56:11.107", "LastActivityDate": "2013-10-23T17:08:21.597", "Title": "Does Main() accept expression?", "AcceptedAnswerId": "15094865", "LastEditDate": "2013-02-27T11:47:57.627", "Id": "15094828", "Score": "0", "Body": "<p>Why this code prints 1 instead of 5</p>\n<p>Code:</p>\n<pre><code>main(int x=5) //this defn. is written intentionally to chec weather main accepts \n                expression or not. \n{\n printf(\"%d\",x);  \n}\n</code></pre>\n<p>Compiler used:minGW 3.2</p>\n<p><strong>EDIT</strong></p>\n<p>My point is weather <code>x=5</code> executes or not. if not then why i don't get any error or warning. </p>\n", "Tags": "<c++><main>", "OwnerUserId": "637679", "AnswerCount": "4"}, "15094867": {"ParentId": "15094828", "PostTypeId": "2", "CommentCount": "0", "Body": "<p><b>Update</b></p>\n<p>Your <code>main</code> declaration is not valid, if we look at the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3485.pdf\" rel=\"nofollow\">C++ draft standard</a> section <code>3.6.1</code> <em>Main function</em> paragraph <em>2</em> says(<em>emphasis mine</em>):</p>\n<blockquote>\n<p id=\"so_15094828_15094867_0\">An implementation shall not predefine the main function. This function shall not be overloaded. <strong>It shall have a return type of type int</strong>, but otherwise its type is implementation-defined. <strong>All implementations shall allow both</strong></p>\n<blockquote>\n<p id=\"so_15094828_15094867_3\">\u2014 a function of () returning int and</p>\n<p id=\"so_15094828_15094867_4\">\u2014 a function of (int, pointer to pointer to char) returning int</p>\n</blockquote>\n</blockquote>\n<p>So <code>main</code> should adhere to one of these standard forms or <em>implementation defined</em> forms defined by compiler documentation.</p>\n<p><code>gcc</code> gives me a warning for this regardless of warning levels and in <code>clang</code> this is an error, so I am not sure why you do not see an error.</p>\n<p><b>Orignal Answer</b></p>\n<p>The first argument to main is the argument count usually denoted as argc for example:</p>\n<pre><code>int main(int argc, char *argv[])\n{\n}\n</code></pre>\n<p>and argv is an array of string which represents the arguments to your program, the first one being the command line.</p>\n", "OwnerUserId": "1708801", "LastEditorUserId": "1708801", "LastEditDate": "2013-10-23T17:08:21.597", "Id": "15094867", "Score": "1", "CreationDate": "2013-02-26T16:58:01.307", "LastActivityDate": "2013-10-23T17:08:21.597"}, "15094896": {"ParentId": "15094828", "PostTypeId": "2", "CommentCount": "8", "Body": "<p>Because the operating system expects this signature of <code>main</code>:</p>\n<pre><code>int main(int argc, char** argv);\n</code></pre>\n<p><code>argc</code> is the amount of parameters. When it calls your <code>main</code>, it passes the amount of arguments (<code>argc</code>) as the first parameter, which is 1 (if you call your binary without arguments, you still get one argument: the binary filename, <code>$0</code> in bash).</p>\n<p>Note that this depends also on the C ABI. By the C/C++ standard, multiple signatures of <code>main</code> are allowed. So, depending on the compiler and the OS, there could be a different handling for <code>main</code>. What you are doing is not really defined behavior.</p>\n<p>You should declare <code>main</code> like the expected - because that is what your OS expects and uses. Make another function for whatever you want to program.</p>\n", "OwnerUserId": "133374", "LastEditorUserId": "133374", "LastEditDate": "2013-02-26T18:24:46.800", "Id": "15094896", "Score": "-1", "CreationDate": "2013-02-26T16:59:11.277", "LastActivityDate": "2013-02-26T18:24:46.800"}, "15094865": {"ParentId": "15094828", "CommentCount": "7", "Body": "<p>because x is really argc (and your count of arguments is 1)</p>\n<p>The signature for main is:</p>\n<pre><code>int main (int argc, char **argv)\n</code></pre>\n<p>with argc being a count of arguments <br>\nand argv being an array of those arguments <br/></br></p>\n", "OwnerUserId": "54200", "PostTypeId": "2", "Id": "15094865", "Score": "10", "CreationDate": "2013-02-26T16:57:49.927", "LastActivityDate": "2013-02-26T16:57:49.927"}, "bq_ids": {"n4140": {"so_15094828_15094867_2": {"section_id": 7146, "quality": 1.0, "length": 7}, "so_15094828_15094867_4": {"section_id": 7146, "quality": 1.0, "length": 7}, "so_15094828_15094867_0": {"section_id": 7146, "quality": 0.8095238095238095, "length": 17}}, "n3337": {"so_15094828_15094867_2": {"section_id": 3073, "quality": 0.8571428571428571, "length": 6}, "so_15094828_15094867_4": {"section_id": 3073, "quality": 0.8571428571428571, "length": 6}, "so_15094828_15094867_0": {"section_id": 6890, "quality": 0.9047619047619048, "length": 19}}, "n4659": {"so_15094828_15094867_2": {"section_id": 8647, "quality": 1.0, "length": 7}, "so_15094828_15094867_4": {"section_id": 8647, "quality": 1.0, "length": 7}, "so_15094828_15094867_0": {"section_id": 8647, "quality": 0.8095238095238095, "length": 17}}}});