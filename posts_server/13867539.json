post_cb({"13867608": {"ParentId": "13867539", "CommentCount": "0", "Body": "<p><code>*it</code> is most assuredly not guaranteed to be an lvalue. Input iterators may return an rvalue.</p>\n", "OwnerUserId": "298661", "PostTypeId": "2", "Id": "13867608", "Score": "5", "CreationDate": "2012-12-13T20:07:11.020", "LastActivityDate": "2012-12-13T20:07:11.020"}, "13867678": {"ParentId": "13867539", "PostTypeId": "2", "CommentCount": "3", "Body": "<p><code>*it</code> is not necessarily an lvalue. Only forward iterators have that requirement.</p>\n<p>Iterators (\u00a724.2.2) are required to have <code>*it</code> be a valid expression that returns <code>iterator_traits&lt;Iterator&gt;::reference</code> (and other irrelevant things). Nothing else is said about this and <code>reference</code> does not have to be  a reference type\u2020.</p>\n<p>Input iterators (\u00a724.2.3) are required to have <code>*it</code> be a valid expression that returns <em>something</em> convertible to the value type.</p>\n<p>Forward iterators, however, have the following requirement (\u00a724.2.5 paragraph 1):</p>\n<blockquote>\n<p id=\"so_13867539_13867678_0\">\u2014 if <code>X</code> is a mutable iterator, <code>reference</code> is a reference to <code>T</code>; if <code>X</code> is a const iterator, <code>reference</code> is a reference to <code>const T</code>,</p>\n</blockquote>\n<p>(here <code>T</code> is the iterator's value type)</p>\n<p>This requires <code>*it</code> to be a reference, which means it has to be a glvalue (i.e. cannot be a prvalue but can be an xvalue like it is the case with move iterators).</p>\n<p>The higher iterator categories do not add any relevant requirements.</p>\n<hr>\n<p>\u2020 <code>reference</code> is defined to be the type of <code>*it</code> which makes it a bit of a circular definition, but poses no restrictions.</p>\n</hr>", "OwnerUserId": "46642", "LastEditorUserId": "46642", "LastEditDate": "2012-12-14T03:47:46.170", "Id": "13867678", "Score": "5", "CreationDate": "2012-12-13T20:11:13.100", "LastActivityDate": "2012-12-14T03:47:46.170"}, "bq_ids": {"n4140": {"so_13867539_13867678_0": {"section_id": 5573, "quality": 1.0, "length": 9}}, "n3337": {"so_13867539_13867678_0": {"section_id": 5355, "quality": 1.0, "length": 9}}, "n4659": {"so_13867539_13867678_0": {"section_id": 7020, "quality": 0.8888888888888888, "length": 8}}}, "13867539": {"CommentCount": "0", "ViewCount": "88", "PostTypeId": "1", "LastEditorUserId": "252000", "CreationDate": "2012-12-13T20:03:25.430", "LastActivityDate": "2012-12-14T03:47:46.170", "Title": "What is decltype(*it) for BidirectionalIterator?", "AcceptedAnswerId": "13867678", "LastEditDate": "2012-12-13T20:11:40.060", "Id": "13867539", "Score": "2", "Body": "<p>Is <code>decltype(*it)</code> the value type of the iterator, or an lvalue reference to that, or something else?</p>\n<p>I think it is an lvalue reference, because <code>*it</code> is an lvalue, but I'm not sure.</p>\n<p>Note: In my case, <code>it</code> is a <em>BidirectionalIterator</em>, but feel free to answer the general case.</p>\n", "Tags": "<c++><c++11><iterator><type-inference><decltype>", "OwnerUserId": "252000", "AnswerCount": "2"}});