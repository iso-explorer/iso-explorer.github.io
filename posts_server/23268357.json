post_cb({"bq_ids": {"n4140": {"so_23268357_23268553_2": {"length": 19, "quality": 0.9047619047619048, "section_id": 7215}, "so_23268357_23268553_0": {"length": 6, "quality": 1.0, "section_id": 7215}}, "n3337": {"so_23268357_23268553_2": {"length": 19, "quality": 0.9047619047619048, "section_id": 6959}, "so_23268357_23268553_0": {"length": 6, "quality": 1.0, "section_id": 6959}}, "n4659": {"so_23268357_23268553_2": {"length": 19, "quality": 0.9047619047619048, "section_id": 8724}, "so_23268357_23268553_0": {"length": 6, "quality": 1.0, "section_id": 8724}}}, "23268553": {"Id": "23268553", "PostTypeId": "2", "Body": "<p>The standard (3.9.1/6 Fundamental types) says:</p>\n<blockquote>\n<p id=\"so_23268357_23268553_0\">Values of type bool are either true or false.</p>\n<p id=\"so_23268357_23268553_1\">....</p>\n<p id=\"so_23268357_23268553_2\">Using a bool value in ways described by this International Standard as \u201cundefined,\u201d such as by examining the value of an\n  uninitialized automatic object, might cause it to behave as if it is neither true nor false.</p>\n</blockquote>\n<p>Your program's use of <code>memset</code> leads to undefined behaviour. The consequence of which might be that the value is neither true nor false. </p>\n", "LastEditorUserId": "505088", "LastActivityDate": "2014-04-24T12:28:29.557", "Score": "91", "CreationDate": "2014-04-24T12:12:49.303", "ParentId": "23268357", "CommentCount": "3", "LastEditDate": "2014-04-24T12:28:29.557", "OwnerUserId": "505088"}, "23268357": {"ViewCount": "4227", "Body": "<p>This is my code:</p>\n<pre><code>#include &lt;cstring&gt;\n#include &lt;iostream&gt;\nint main() {\n    bool a;\n    memset(&amp;a, 0x03, sizeof(bool));\n    if (a) {\n        std::cout &lt;&lt; \"a is true!\" &lt;&lt; std::endl;\n    }\n    if (!a) {\n        std::cout &lt;&lt; \"!a is true!\" &lt;&lt; std::endl;\n    }\n}\n</code></pre>\n<p>It outputs:</p>\n<pre><code>a is true!\n!a is true!\n</code></pre>\n<p>It seems that the <code>!</code> operator on <code>bool</code> only inverts the last bit, but every value that does not equal <code>0</code> is treated as <code>true</code>. This leads to the shown behavior, which is logically wrong. Is that a fault in the implementation, or does the specification allow this? Note that the <code>memset</code> can be omitted, and the behavior would <em>probably</em> be the same because <code>a</code> contains memory garbage.</p>\n<p>I'm on gcc 4.4.5, other compilers might do it differently.</p>\n", "AcceptedAnswerId": "23268553", "Title": "Why does bool and not bool both return true in this case?", "CreationDate": "2014-04-24T12:03:14.260", "Id": "23268357", "CommentCount": "10", "FavoriteCount": "7", "PostTypeId": "1", "LastEditDate": "2014-04-26T07:25:49.043", "LastEditorUserId": "1711796", "LastActivityDate": "2014-04-26T09:31:30.997", "ClosedDate": "2014-04-26T14:34:39.313", "Score": "67", "OwnerUserId": "347964", "Tags": "<c++><boolean>", "AnswerCount": "3"}, "23309033": {"Id": "23309033", "PostTypeId": "2", "Body": "<p>Internally it is likely using a bitwise not (<code>~</code> operator) to invert it, which would work when the bool was either zero or all ones:</p>\n<pre><code> a = 00000000 (false)\n!a = 11111111 (true)\n</code></pre>\n<p>However if you set it to three:</p>\n<pre><code> a = 00000011 (true)\n!a = 11111100 (also true)\n</code></pre>\n", "LastActivityDate": "2014-04-26T09:31:30.997", "Score": "3", "CreationDate": "2014-04-26T09:31:30.997", "ParentId": "23268357", "CommentCount": "3", "OwnerUserId": "17440"}, "23268520": {"Id": "23268520", "PostTypeId": "2", "Body": "<p>It's not \"logically wrong\", it's undefined behaviour. <code>bool</code> is only supposed to contain one of two values, <code>true</code> or <code>false</code>. Assigning a value to it will cause a conversion to one of these values. Breaking type-safety by writing an arbitrary byte value on top of its memory (or, as you mention, leaving it unintialised) will not, so you might well end up with a value that's neither <code>true</code> nor <code>false</code>.</p>\n", "LastActivityDate": "2014-04-24T12:10:59.650", "Score": "41", "CreationDate": "2014-04-24T12:10:59.650", "ParentId": "23268357", "CommentCount": "10", "OwnerUserId": "204847"}});