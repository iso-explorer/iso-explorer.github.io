post_cb({"bq_ids": {"n4140": {"so_32691535_32691642_0": {"length": 4, "quality": 0.6666666666666666, "section_id": 5923}}, "n3337": {"so_32691535_32691642_0": {"length": 4, "quality": 0.6666666666666666, "section_id": 5695}}, "n4659": {"so_32691535_32691642_0": {"length": 4, "quality": 0.6666666666666666, "section_id": 7397}}}, "32691535": {"ViewCount": "106", "Body": "<p>MSVC++ gives me a compiler error when I try to initialize a bit field inside structure declaration:</p>\n<pre><code>struct SomeStruct\n{\n    bool a : 1 = false; // compiler error\n    bool a = false : 1; // compiler error\n} ;\n</code></pre>\n<p>What is the syntax for initializing bit fields inside structure declaration?</p>\n", "AcceptedAnswerId": "32691764", "Title": "How to initialize a bitfield inside structure declaration?", "CreationDate": "2015-09-21T09:19:49.977", "LastActivityDate": "2015-09-21T14:16:00.127", "CommentCount": "1", "LastEditDate": "2015-09-21T12:29:38.110", "PostTypeId": "1", "Tags": "<c++><c++11><visual-c++><syntax><bit-fields>", "Id": "32691535", "AnswerCount": "2", "Score": "1", "OwnerUserId": "1915854", "ClosedDate": "2015-09-21T09:39:17.787", "LastEditorUserId": "1708801"}, "32691642": {"Id": "32691642", "PostTypeId": "2", "Body": "<p>The error I get from clang is very telling:</p>\n<blockquote>\n<p id=\"so_32691535_32691642_0\">bitfield member cannot have an in-class initializer</p>\n</blockquote>\n<p>So you simply can't do it, you need a constructor that initializes the members.</p>\n", "LastActivityDate": "2015-09-21T09:25:52.060", "CommentCount": "3", "CreationDate": "2015-09-21T09:25:52.060", "ParentId": "32691535", "Score": "2", "OwnerUserId": "440558"}, "32691764": {"Id": "32691764", "PostTypeId": "2", "Body": "<p>I am a bit surprised but apparently Visual Studio is correct here, if we look at the grammar from section <code>9.2</code> of the draft C++11 standard it says:</p>\n<pre><code>member-declarator:\n  declarator virt-specifier-seqopt pure-specifieropt\n  declarator brace-or-equal-initializeropt\n  identifieropt attribute-specifier-seqopt: constant-expression\n</code></pre>\n<p>and bit-fields are not allowed to have a <em>brace-or-equal-initializer</em>. It is not clear to me why this restriction exists though. This feels like the first time I realized a in-class <a href=\"https://stackoverflow.com/q/27118535/1708801\">initializer makes a class a non-aggregate</a>.</p>\n<p>This apparently is a <a href=\"http://open-std.org/JTC1/SC22/WG21/docs/cwg_active.html#1341\" rel=\"nofollow noreferrer\">defect</a>:</p>\n<blockquote>\n<p id=\"so_32691535_32691764_0\">The grammar for member-declarator (9.2 [class.mem]) does not, but should, allow for a brace-or-equal-initializer on a bit-field declarator.</p>\n</blockquote>\n<p>This issue was apparently also caught before C++11 was finalized as we can see from <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3307.pdf\" rel=\"nofollow noreferrer\">Issues Found Implementing C++0x</a>:</p>\n<blockquote>\n<ol start=\"11\">\n<li>(Richard Smith) class.mem: bitfield members cannot have in-class initializers</li>\n</ol>\n<p id=\"so_32691535_32691764_1\">The grammar does not allow a\n  brace-or-equal-initializer for a bitfield member. This seems like an\n  oversight. A brace-or-equal-initializer after a constant- expression\n  appears to be unambiguous.</p>\n<p id=\"so_32691535_32691764_2\">clang behavior: clang implements the letter of the standard.</p>\n<p id=\"so_32691535_32691764_3\">suggested resolution: Change the grammar as follows:</p>\n<pre><code>member-declarator:\n    identifieropt attribute-specifier-seqopt : constant-expression brace-or-equal-initializeropt\n</code></pre>\n</blockquote>\n<p>but apparently this feel through the cracks.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2015-09-21T14:16:00.127", "Score": "1", "CreationDate": "2015-09-21T09:32:05.877", "ParentId": "32691535", "CommentCount": "0", "OwnerUserId": "1708801", "LastEditDate": "2017-05-23T11:58:23.367"}});