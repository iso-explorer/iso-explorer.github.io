post_cb({"14654429": {"ParentId": "14654377", "CommentCount": "0", "Body": "<p>A class definition is just a kind of a blueprint for the objects of that class. It's been the same with <code>struct</code> since the C days. No classes or structures actually exists in the code as such.</p>\n", "OwnerUserId": "440558", "PostTypeId": "2", "Id": "14654429", "Score": "1", "CreationDate": "2013-02-01T20:27:30.020", "LastActivityDate": "2013-02-01T20:27:30.020"}, "14654428": {"ParentId": "14654377", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The <strong>one-definition rule</strong> (3.2, [basic.def.odr]) applies differently to classes and functions:</p>\n<blockquote>\n<p id=\"so_14654377_14654428_0\">1 - No translation unit shall contain more than one definition of any variable, function, class type, enumeration type, or template.</p>\n<p id=\"so_14654377_14654428_1\">[...]</p>\n<p id=\"so_14654377_14654428_2\">4 - Every program shall contain exactly one definition of every non-inline function or variable that is odr-used in that program [...]</p>\n</blockquote>\n<p>So while (non-inline) functions may be defined at most once in the whole program (and exactly once if they are called or otherwise odr-used), classes may be defined as many times as you have translation units (source files), but no more than once per translation unit.</p>\n<p>The <em>reason</em> for this is that since classes are types, their definitions are necessary to be able to share data between translation units.  Originally, classes (<code>struct</code>s in C) did not have any data requiring linker support; C++ introduces virtual member functions and virtual inheritance, which require linker support for the <em>vtable</em>, but this is usually worked around by attaching the vtable to (the definition of) a member function.</p>\n", "OwnerUserId": "567292", "LastEditorUserId": "567292", "LastEditDate": "2013-02-01T20:32:34.163", "Id": "14654428", "Score": "10", "CreationDate": "2013-02-01T20:27:24.230", "LastActivityDate": "2013-02-01T20:32:34.163"}, "14654377": {"CommentCount": "2", "AcceptedAnswerId": "14654428", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2013-02-01T20:23:27.710", "LastActivityDate": "2013-02-01T20:34:10.393", "LastEditDate": "2017-05-23T12:25:05.283", "ViewCount": "1049", "FavoriteCount": "2", "Title": "Why is there no multiple definition error when you define a class in a header file?", "Id": "14654377", "Score": "7", "Body": "<p>I'm not sure if I asked the question correctly, but let me explain.</p>\n<p>First, I read this article that explains the difference between declarations and definitions:\n<a href=\"http://www.cprogramming.com/declare_vs_define.html\" rel=\"nofollow noreferrer\">http://www.cprogramming.com/declare_vs_define.html</a></p>\n<p>Second, I know from previous research that it is bad practice to define variables and functions in a header file, because during the linking phase you might have multiple definitions for the same name which will throw an error.</p>\n<p>However, how come this doesn't happen for classes? According to another SO answer (\n<a href=\"https://stackoverflow.com/questions/1410563/what-is-the-difference-between-a-definition-and-a-declaration\">What is the difference between a definition and a declaration?</a> ), the following would be a class DEFINITION:</p>\n<pre><code>    class MyClass {\n        private:\n        public:\n    };\n</code></pre>\n<p>If the above definition is in a header file. Then , presumably, you can have multiple .cpp files that #include that header.  This means the class is defined multiple times after compilation in multiple .o files, but doesn't seem to cause much problems...</p>\n<p>On the other hand, if it was a function being defined in the header file, it would cause problems apparently...from what I understand... mayb?</p>\n<p>So what's so special about class definitions?</p>\n", "Tags": "<c++><linker><header-files>", "OwnerUserId": "2033761", "AnswerCount": "3"}, "14654534": {"ParentId": "14654377", "CommentCount": "0", "Body": "<p>Your class definition defines the class, but does not define and <em>objects</em> of that class. It's OK to have the class (or structure) defined in multiple files, because you're just defining a <em>type</em>, not a variable of that type. If you just had the definition, no code would be emitted by the compiler.\n<br>\nThe compiler actually emits code only after you declare an object (i.e. variable) of this type:</br></p>\n<pre><code>class MyClass myvar;\n</code></pre>\n<p>or:</p>\n<pre><code>class MyOtherClass { \n    public: ...\n    private: ...\n} myvar;         // note the variable name, it instantiates a MyOtherClass\n</code></pre>\n<p>That is what you do NOT want to do in headers because it will cause multiple instances of <em>myvar</em> to be instantiated.</p>\n", "OwnerUserId": "2033835", "PostTypeId": "2", "Id": "14654534", "Score": "0", "CreationDate": "2013-02-01T20:34:10.393", "LastActivityDate": "2013-02-01T20:34:10.393"}, "bq_ids": {"n4140": {"so_14654377_14654428_2": {"section_id": 7041, "quality": 1.0, "length": 10}, "so_14654377_14654428_0": {"section_id": 7038, "quality": 1.0, "length": 14}}, "n3337": {"so_14654377_14654428_2": {"section_id": 6786, "quality": 1.0, "length": 10}, "so_14654377_14654428_0": {"section_id": 6784, "quality": 1.0, "length": 14}}, "n4659": {"so_14654377_14654428_2": {"section_id": 8538, "quality": 1.0, "length": 10}, "so_14654377_14654428_0": {"section_id": 8535, "quality": 1.0, "length": 14}}}});