post_cb({"bq_ids": {"n4140": {"so_30882420_30882420_0": {"length": 26, "quality": 0.9629629629629629, "section_id": 447}}, "n3337": {"so_30882420_30882420_0": {"length": 26, "quality": 0.9629629629629629, "section_id": 438}}, "n4659": {"so_30882420_30882420_0": {"length": 26, "quality": 0.9629629629629629, "section_id": 469}}}, "41456272": {"Id": "41456272", "PostTypeId": "2", "Body": "<p>In case you still want to know, this refers to when you are in the destructor of a base class and you refer to things of the the whole object that have already been destroyed.  An example:</p>\n<pre><code>struct Derived;\n\nstruct Base {\n    Derived &amp;der;\n    Base(Derived &amp;d): der(d) {}\n    ~Base();\n};\n\nstruct Derived: Base {\n    int value;\n    Derived(): Base(*this) {}\n};\n\n#include &lt;iostream&gt;\n\nBase::~Base() {\n    std::cout &lt;&lt;\n        der.value // this is the undefined behavior! der.value is *gone*\n        &lt;&lt; std::endl;\n}\n</code></pre>\n<p>AFAIK, everything in that code is legal except accessing <code>der.value</code> in the destructor of <code>Base</code> because when you are destroying <code>Base</code> you've already destroyed the <code>Derived</code> you kept a reference of in <code>der</code></p>\n", "LastActivityDate": "2017-01-04T04:35:53.070", "CommentCount": "0", "CreationDate": "2017-01-04T04:35:53.070", "ParentId": "30882420", "Score": "0", "OwnerUserId": "4988044"}, "30882420": {"ViewCount": "50", "Body": "<p>I came acros the following rule <code>N4296::12.7/4 [class.cdtor]</code>:</p>\n<blockquote>\n<p id=\"so_30882420_30882420_0\">If the virtual function call uses an explicit class member access\n  (5.2.5) and the object expression refers to the complete object of x\n  or one of that object\u2019s base class subobjects but not x or one of its\n  base class subobjects, the behavior is undefined.</p>\n</blockquote>\n<p>What does that mean? Couldn't you give an explanation of it with an example? It's a little bit hard to imagine that for me.</p>\n", "Title": "Calling a virtual function through a member-access expression", "CreationDate": "2015-06-17T04:36:56.333", "LastActivityDate": "2017-01-04T04:35:53.070", "CommentCount": "3", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2015-06-17T04:50:26.750", "OwnerDisplayName": "user2953119", "LastEditorUserId": "266487", "Id": "30882420", "Score": "2", "Tags": "<c++><base-class>", "AnswerCount": "1"}});