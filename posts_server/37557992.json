post_cb({"bq_ids": {"n4140": {"so_37557992_37558466_5": {"length": 7, "quality": 0.875, "section_id": 87}, "so_37557992_37558466_3": {"length": 46, "quality": 0.9787234042553191, "section_id": 87}, "so_37557992_37558466_0": {"length": 5, "quality": 1.0, "section_id": 87}, "so_37557992_37558466_6": {"length": 4, "quality": 0.8, "section_id": 87}, "so_37557992_37558466_1": {"length": 10, "quality": 0.9090909090909091, "section_id": 87}, "so_37557992_37558466_4": {"length": 6, "quality": 0.8571428571428571, "section_id": 87}, "so_37557992_37558466_7": {"length": 4, "quality": 1.0, "section_id": 87}, "so_37557992_37558466_8": {"length": 12, "quality": 1.0, "section_id": 87}}, "n3337": {"so_37557992_37558466_5": {"length": 7, "quality": 0.875, "section_id": 82}, "so_37557992_37558466_3": {"length": 40, "quality": 0.851063829787234, "section_id": 82}, "so_37557992_37558466_0": {"length": 5, "quality": 1.0, "section_id": 82}, "so_37557992_37558466_6": {"length": 4, "quality": 0.8, "section_id": 82}, "so_37557992_37558466_1": {"length": 10, "quality": 0.9090909090909091, "section_id": 82}, "so_37557992_37558466_8": {"length": 11, "quality": 0.9166666666666666, "section_id": 82}, "so_37557992_37558466_7": {"length": 4, "quality": 1.0, "section_id": 36}, "so_37557992_37558466_4": {"length": 6, "quality": 0.8571428571428571, "section_id": 36}}, "n4659": {"so_37557992_37558466_1": {"length": 7, "quality": 0.6363636363636364, "section_id": 90}, "so_37557992_37558466_5": {"length": 5, "quality": 0.625, "section_id": 42}, "so_37557992_37558466_4": {"length": 5, "quality": 0.7142857142857143, "section_id": 7690}}}, "37557992": {"ViewCount": "56", "Body": "<p>A while back I learned you could pass literals into a template like so:</p>\n<pre><code>template &lt;int x&gt;\nclass myClass { };\n\n//Later\nmyClass&lt;12&gt; var;\n</code></pre>\n<p>Now I have defined my own int type and want to do the same thing with that....but it is turning out to be a headache</p>\n<p>I am trying to achieve....something like this:</p>\n<pre><code>class myIntType;\n\ntemplate &lt;myIntType val&gt;\nclass Other{\n};\n</code></pre>\n<p>Unfortunately this is illegal :(</p>\n<p>So another shot at it is instead of giving an actual instance, pass a function that will return an instance (because this is an integer type anyways....so we don't care if two instances are the actually same instance so much):</p>\n<pre><code>template&lt;myIntTypeT(*Val)()&gt;\nclass Other{\n};\n</code></pre>\n<p>And then you use it like this:</p>\n<pre><code>constexpr myIntType foo() { return 12_mit; } \n   //_mit operator returns a myIntType var\nOther&lt;foo&gt; other;\n</code></pre>\n<p>There are a couple downsides with this approach:</p>\n<ul>\n<li><code>Other&lt;foo&gt;</code> and <code>Other&lt;bar&gt;</code> are different types even if <code>bar</code> mirrors whatever <code>foo</code> gives (this I am OK with)</li>\n<li>It is very inelegant (this I am not so fine with)</li>\n</ul>\n<p>Unfortunately that is a very clunky use.  So my next attempt is to take a lambda function and put it into the template:</p>\n<pre><code>Other&lt;[](){ return 12_mit; }&gt; other;\n</code></pre>\n<p>But that fails because lambdas are not <code>constexpr</code>s....</p>\n<p>So is there another more elegant solution to pass an <em>instance</em> of a user defined type into a template?</p>\n", "Title": "User Defined Non-Type Parameter Workaround", "CreationDate": "2016-06-01T01:19:27.577", "LastActivityDate": "2016-06-01T02:29:33.077", "CommentCount": "2", "LastEditDate": "2016-06-01T02:22:34.573", "PostTypeId": "1", "LastEditorUserId": "6149078", "Id": "37557992", "Score": "2", "OwnerUserId": "6149078", "Tags": "<c++><templates><lambda><constexpr>", "AnswerCount": "1"}, "37558466": {"Id": "37558466", "PostTypeId": "2", "Body": "<p>One option would be to pass a reference to an instance of <code>MyIntType</code> as the template argument:</p>\n<pre><code>class MyIntType {\npublic:\n  MyIntType () {}\n};\n\ntemplate &lt;const MyIntType &amp; val&gt;\nclass Other {};\n\nconst MyIntType foo;\n\nint main () {\n  Other&lt;foo&gt; other;\n}\n</code></pre>\n<p>Another option would be to pass a pointer to an instance of <code>MyIntType</code> as the template argument:</p>\n<pre><code>class MyIntType {\npublic:\n  MyIntType () {}\n};\n\ntemplate &lt;const MyIntType * val&gt;\nclass Other {};\n\nconst MyIntType foo;\n\nint main () {\n  Other&lt;&amp;foo&gt; other;\n}\n</code></pre>\n<p>Note that in these simple examples, the constructor of <code>MyIntType</code> does not need to be <code>constexpr</code>.</p>\n<p>According to the C++ standard (section 14.3.2, clause 1):</p>\n<blockquote>\n<p id=\"so_37557992_37558466_0\">A <em>template-argument</em> for a non-type, non-template <em>template-parameter</em> shall be one of:</p>\n<ul>\n<li><p id=\"so_37557992_37558466_1\">for a non-type <em>template-parameter</em> of integral or enumeration type, a converted constant expression (5.19) of the type of the <em>template-parameter</em>; or</p></li>\n<li><p id=\"so_37557992_37558466_2\">the name of a non-type <em>template-parameter</em>; or</p></li>\n<li><p id=\"so_37557992_37558466_3\">a constant expression (5.19) that designates the address of a complete object with static storage duration and external or internal linkage or a function with external or internal linkage, including function templates and function <em>template-ids</em> but excluding non-static class members, expressed (ignoring parentheses) as <em><code>&amp;</code> id-expression</em>, where the <em>id-expression</em> is the name of an object or function, except that the <code>&amp;</code> may be omitted if the name refers to a function or array and shall be omitted if the corresponding <em>template-parameter</em> is a reference; or</p></li>\n<li><p id=\"so_37557992_37558466_4\">a constant expression that evaluates to a null pointer value (4.10); or</p></li>\n<li><p id=\"so_37557992_37558466_5\">a constant expression that evaluates to a null member pointer value (4.11); or</p></li>\n<li><p id=\"so_37557992_37558466_6\">a pointer to member expressed as described in 5.3.1; or</p></li>\n<li><p id=\"so_37557992_37558466_7\">a constant expression of type <code>std::nullptr_t</code>.</p></li>\n</ul>\n</blockquote>\n<p>The examples above fall into the category of:</p>\n<blockquote>\n<p id=\"so_37557992_37558466_8\">A constant expression that designates the address of a complete object with static storage duration and external or internal linkage.</p>\n</blockquote>\n", "LastActivityDate": "2016-06-01T02:29:33.077", "CommentCount": "0", "CreationDate": "2016-06-01T02:29:33.077", "ParentId": "37557992", "Score": "1", "OwnerUserId": "4698882"}});