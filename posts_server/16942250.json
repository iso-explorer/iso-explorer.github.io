post_cb({"16942250": {"CommentCount": "4", "ViewCount": "315", "CreationDate": "2013-06-05T14:12:20.767", "LastActivityDate": "2013-06-05T14:35:28.340", "Title": "Dynamic 1D array as input", "AcceptedAnswerId": "16942423", "PostTypeId": "1", "Id": "16942250", "Score": "0", "Body": "<p>I am trying to get a dynamic 1D array of integers as input. The situation is I do not know how many inputs I would have. I have the following code, but I know its wrong. Could you please tell me how I can achieve this?</p>\n<pre><code>     int main(string path,string aligned_path,vector&lt;int&gt;cams)\n     {\n        string path = \"/home/iiith/resect/output.txt\";\n        findpoints(cams,path);\n     } \n</code></pre>\n<p>The size of cams is actually unknown. I would not know how many cams they would provide as input. Am trying to achieve something like the below</p>\n<pre><code>    ./a.out path1 path2 1 2 3 5 6\n</code></pre>\n<p>The numbers trailing in the end would be the cams. it can be any number of cams. Is it possible to receive them all as input? is it possible to have an inut parameter that is dynamic as the above.? Please help me here. It would b really helpful. Thanks in Advance</p>\n", "Tags": "<c++><dynamic><user-input>", "OwnerUserId": "1620040", "AnswerCount": "2"}, "16942441": {"ParentId": "16942250", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The signature of <code>main</code> must be <code>int main(int argc, char* argv[])</code> (or equivalent, or <code>int main()</code>). You would process the arguments into something more useful within your own code. Here's a quick and sloppy example (no proper error handling, etc).</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;cstdlib&gt;\n#include &lt;vector&gt;\n\nint main(int argc, char * argv[])\n{\n    std::vector&lt;int&gt; nums;\n    nums.reserve(argc-3);\n    int pos = 3;\n\n    // Read args into vector of ints\n    while (pos &lt; argc)\n    {\n        nums.push_back(atoi(argv[pos]));\n        ++pos;\n    }\n\n    // Print them\n    for (auto i : nums) std::cout &lt;&lt; i &lt;&lt; '\\n';\n}\n</code></pre>\n<p>Here's a run:</p>\n<pre><code>$ ./a.out path1 path2 1 2 3 5 4\n1\n2\n3\n5\n4\n</code></pre>\n<p>Just in case it isn't clear: <code>argc</code> contains the number of arguments passed, including the name of the program. so for <code>$ ./a.out</code> <code>argc=1</code>, for <code>$ ./a.out some list of args</code> <code>argc=5</code>.</p>\n<p>Then <code>argv</code> is an array of <code>c</code>-style strings (<code>NUL</code>-terminated <code>const char *</code>s) containing the text of each argument.</p>\n<p>Note that strictly speaking the <code>argv</code> array is 1 longer than it needs to be, and the last entry is guaranteed to be a NULL pointer.</p>\n<hr>\n<p>For Standard geeks, I don't have the proper <code>C++</code> 2011 standard, this is from N3337:</p>\n<blockquote>\n<p id=\"so_16942250_16942441_0\">3.6.1 Main function</p>\n<p id=\"so_16942250_16942441_1\">...</p>\n<p id=\"so_16942250_16942441_2\">2  An implementation shall not predefine the <code>main</code> function. This function shall not be overloaded. It shall have a\n  return type of type <code>int</code>, but otherwise its type is\n  implementation-defined. All implementations shall allow both of the\n  following definitions of <code>main</code>:</p>\n<p id=\"so_16942250_16942441_3\"><code>int main() { /* ... */ }</code></p>\n<p id=\"so_16942250_16942441_4\">and</p>\n<p id=\"so_16942250_16942441_5\"><code>int main(int argc, char* argv[]) { /* ... */ }</code></p>\n<p id=\"so_16942250_16942441_6\">In the latter form <code>argc</code>\n  shall be the number of arguments passed to the program from the\n  environment in which the program is run. If <code>argc</code> is nonzero these\n  arguments shall be supplied in <code>argv[0]</code> through <code>argv[argc-1]</code> as\n  pointers to the initial characters of null-terminated multibyte\n  strings (ntmbs s) (17.5.2.1.4.2) and <code>argv[0]</code> shall be the pointer to\n  the initial character of a ntmbs that represents the name used to\n  invoke the program or \"\". The value of <code>argc</code> shall be non-negative. The\n  value of <code>argv[argc]</code> shall be <code>0</code>. [ Note: It is recommended that any\n  further (optional) parameters be added after <code>argv</code>. \u2014end note ]</p>\n</blockquote>\n</hr>", "OwnerUserId": "1171191", "LastEditorUserId": "1171191", "LastEditDate": "2013-06-05T14:35:28.340", "Id": "16942441", "Score": "2", "CreationDate": "2013-06-05T14:21:21.860", "LastActivityDate": "2013-06-05T14:35:28.340"}, "16942423": {"ParentId": "16942250", "PostTypeId": "2", "CommentCount": "6", "Body": "<p>Your definition of <code>main</code> is invalid. In C and C++, main has a strict definition (although arguments can be ignored if not used): </p>\n<pre><code>int main(int argc, char **argv)\n</code></pre>\n<p>A common extension is to also pass in environment variables:</p>\n<pre><code>int main(int argc, char **argv, char **envp)\n</code></pre>\n<p>and if arguments aren't used at all:</p>\n<pre><code>int main()\n</code></pre>\n<p>The arguments to <code>main</code> are defined as follows <code>argc</code> is the number of elements in the list of arguments. Each of the following <code>argv[0]</code> .. <code>argv[argc-1]</code> contain the arguments to your function. <code>argv[0]</code> is the name of the executable itself. <code>argv[1]</code> with your example would be <code>path1</code>. </p>\n<p>So, you know how many <code>cams</code> there are based on <code>argc</code>. Of course, you have to copy the string values in <code>argv[x]</code> into the relevant place in a vector, using, perhaps, <code>std::stoi(...)</code> to make it into an integer value. </p>\n", "OwnerUserId": "1919155", "LastEditorUserId": "1919155", "LastEditDate": "2013-06-05T14:28:55.400", "Id": "16942423", "Score": "5", "CreationDate": "2013-06-05T14:20:24.540", "LastActivityDate": "2013-06-05T14:28:55.400"}, "bq_ids": {"n4140": {"so_16942250_16942441_6": {"section_id": 7146, "quality": 0.8333333333333334, "length": 40}, "so_16942250_16942441_2": {"section_id": 7146, "quality": 0.75, "length": 18}}, "n3337": {"so_16942250_16942441_6": {"section_id": 6890, "quality": 0.8333333333333334, "length": 40}, "so_16942250_16942441_2": {"section_id": 6890, "quality": 0.9166666666666666, "length": 22}}, "n4659": {"so_16942250_16942441_6": {"section_id": 8647, "quality": 0.8333333333333334, "length": 40}, "so_16942250_16942441_2": {"section_id": 8647, "quality": 0.75, "length": 18}}}});