post_cb({"28016551": {"Id": "28016551", "PostTypeId": "2", "Body": "<p>Semantically, there is a difference.  </p>\n<p>To the reader, a function requiring <code>double a[]</code> is expecting an array.  </p>\n<p>A function requiring a <code>double * a</code>, is a pointer to a one or more <code>double</code> values.  There is some ambiguity as to whether the function will be operating on more than one contiguous <code>double</code>.  All the reader can assume is that <em>one</em> double, pointed to by the given pointer*, may be accessed;  the reader can't assume that an array of <code>double</code> is required.</p>\n<p>See also the MISRA C and MISRA C++ coding guidelines.  </p>\n", "LastActivityDate": "2015-01-19T00:51:27.273", "Score": "2", "CreationDate": "2015-01-19T00:51:27.273", "ParentId": "28016179", "CommentCount": "1", "OwnerUserId": "225074"}, "bq_ids": {"n4140": {"so_28016179_28016189_1": {"length": 16, "quality": 1.0, "section_id": 3241}}, "n3337": {"so_28016179_28016189_1": {"length": 16, "quality": 1.0, "section_id": 3114}}, "n4659": {"so_28016179_28016189_1": {"length": 12, "quality": 0.75, "section_id": 3997}}}, "28016179": {"ViewCount": "320", "Body": "<p>What is the difference, if it exists, between \"double a[]\" and \"double *a\" when passing arguments in c++ functions? I mean, are those two functions bellow the same?</p>\n<pre><code>void do_somethingA (double a[], size_t size_a)\n{\n    // ... do something\n}\n\nvoid do_somethingB (double *a, size_t size_a)\n{\n    // ... do something\n}\n\nint main()\n{\n    double X[] = {1.,2.,3.,4.,5.};\n    double *Y;\n    Y = new double[5];\n    for(int i = 0; i &lt; 5; i++)\n        Y[i] = (double) i;\n    do_somethingA(X,5);\n    do_somethingA(Y,5);\n    do_somethingB(X,5);\n    do_somethingB(Y,5);\n    delete [] Y;\n}\n</code></pre>\n<p>No error in the code above. I'm just curious about this and I couldn't find a way to \"google\" it, sorry. </p>\n<p>I'm passing both static and dynamic arrays as arguments to functions from which one uses \"double a[]\" and the other uses \"double *a\" and everything compiles and executes fine. Is it just a matter of style?</p>\n", "AcceptedAnswerId": "28016189", "Title": "What is the difference between \"double a[]\" and \"double *a\" when passing arguments in c++ functions?", "CreationDate": "2015-01-18T23:51:15.590", "Id": "28016179", "CommentCount": "2", "PostTypeId": "1", "LastActivityDate": "2015-01-19T00:51:27.273", "Score": "0", "OwnerUserId": "3784537", "Tags": "<c++>", "AnswerCount": "3"}, "28016189": {"Id": "28016189", "PostTypeId": "2", "Body": "<p>In that context <code>double a[]</code> and <code>double *a</code> are defined to be absolutely, 100% identical. This is a C++ question but a <a href=\"http://c-faq.com/aryptr/aryptrparam.html\" rel=\"nofollow\">C FAQ</a> is still relevant.</p>\n<hr>\n<p>From the C++11 standard:</p>\n<blockquote>\n<p id=\"so_28016179_28016189_0\">8.3.5</p>\n<p id=\"so_28016179_28016189_1\">After determining the type of each parameter, <strong>any parameter of type\n  \"array of T\"</strong> or \"function returning T\" is adjusted to be <strong>\"pointer to\n  T\"</strong> or \"pointer to function returning T,\" respectively.</p>\n</blockquote>\n</hr>", "LastEditorUserId": "714501", "LastActivityDate": "2015-01-19T00:19:24.863", "Score": "5", "CreationDate": "2015-01-18T23:52:22.683", "ParentId": "28016179", "CommentCount": "2", "LastEditDate": "2015-01-19T00:19:24.863", "OwnerUserId": "714501"}, "28016328": {"Id": "28016328", "PostTypeId": "2", "Body": "<p>Arrays passed by value decay to pointers, so in your case <code>double a[]</code> (or even <code>double a[256]</code>) is just syntactic sugar for <code>double* a</code>. However, arrays are not pointers, and the difference appears when you pass arrays by reference. In that case, you can even deduce their size, such as:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;cstddef&gt;\n\ntemplate&lt;typename T, std::size_t N&gt;\nstd::size_t get_arr_size(T (&amp;arr)[N]) // pass array by reference\n{\n    return N;\n}\n\nint main()\n{\n    int arr[] = {1,2,3,4};\n    int* p = new int[256];\n    std::cout &lt;&lt; get_arr_size(arr) &lt;&lt; std::endl; // displays 4\n    // std::cout &lt;&lt; get_arr_size(p) &lt;&lt; std::endl; // does not compile, not the same as array\n    delete[] p;\n}\n</code></pre>\n", "LastActivityDate": "2015-01-19T00:14:09.023", "Score": "1", "CreationDate": "2015-01-19T00:14:09.023", "ParentId": "28016179", "CommentCount": "1", "OwnerUserId": "3093378"}});