post_cb({"37167565": {"ParentId": "36295738", "CommentCount": "0", "Body": "<p>You can probably answer this question yourself if you consider a <code>noexcept</code> constructor whose definition is not available in the current translation unit (e.g. the constructor imlementation resides in a shared library).</p>\n<p>If <code>noexcept</code> did not apply to the entire constructor, an exception could still be emitted by the constructor somehow, defeating the purpose of <code>noexcept</code>.</p>\n<p>The only way <code>noexcept</code> can work correctly in this scenario is if it applies to the entire constructor, including base class and member initialization.</p>\n", "OwnerUserId": "412080", "PostTypeId": "2", "Id": "37167565", "Score": "3", "CreationDate": "2016-05-11T15:48:20.733", "LastActivityDate": "2016-05-11T15:48:20.733"}, "36295738": {"CommentCount": "1", "AcceptedAnswerId": "37138998", "PostTypeId": "1", "LastEditorUserId": "560648", "CreationDate": "2016-03-29T21:49:57.390", "LastActivityDate": "2016-05-25T19:07:24.417", "LastEditDate": "2016-05-10T12:57:41.857", "ViewCount": "452", "FavoriteCount": "3", "Title": "What does noexcept exactly encompass for constructors?", "Id": "36295738", "Score": "10", "Body": "<p><strong>According to the C++ standard, what exactly does a <code>noexcept</code> <em>noexcept-specification</em> on a class constructor apply to?</strong></p>\n<ol>\n<li>the <em>function-body</em>?\n\n<ol>\n<li>initialization of members in the optional <em>ctor-initializer</em>?\n\n<ol>\n<li>initialization of base classes in the optional <em>mem-initializer</em>s?</li>\n<li>initialization of class members in the optional <em>mem-initializer</em>s?</li>\n</ol></li>\n<li>the <em>compound-statement</em>?</li>\n<li>the <em>function-try-block</em>?</li>\n</ol></li>\n<li>initialization of object base classes not initialized in the <em>ctor-initializer</em>?</li>\n<li>initialization of object class members not initialized in the <em>ctor-initializer</em>?</li>\n<li>something additional?</li>\n</ol>\n<p>In other words, which of the above are encompassed by the <code>noexcept</code> <em>noexcept-specification</em> (i.e. trigger <code>std::terminate()</code> when throwing an exception if <code>noexcept(true)</code>)?</p>\n<p>Please provide references to the standard. Tips on any caveats using <code>noexcept</code> for constructors are also welcome. Thanks!</p>\n", "Tags": "<c++><c++11><constructor><language-lawyer><noexcept>", "OwnerUserId": "3919155", "AnswerCount": "2"}, "37138998": {"ParentId": "36295738", "PostTypeId": "2", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_36295738_37138998_0\">In other words, which of the above are encompassed by the <code>noexcept</code> <em>noexcept-specification</em>...?</p>\n</blockquote>\n<p>The exception specification (<code>noexcept</code> and dynamic exception specification) pertains to the construction of the base classes, construction and initialisation of the members, and the code in the body of the constructor. <em>Basically, all functions executed in the construction of the object</em> - this makes sense in that the exception specification is tied to the constructor of the object, hence it should cover code executed during the construction of the object; it would be counterintuitive if any part of the construction was not covered by this.</p>\n<p>Supporting standard quotes...</p>\n<p><strong>What if an exception is thrown during construction (and possibly not handled)?</strong></p>\n<p><a href=\"http://eel.is/c++draft/except#except.spec-9\" rel=\"nofollow\">[except.spec]/9</a></p>\n<blockquote>\n<p id=\"so_36295738_37138998_1\">Whenever an exception of type <code>E</code> is thrown and the search for a handler ([except.handle]) encounters the outermost block of a function with an exception specification that does not allow <code>E</code>, then,</p>\n<ul>\n<li>if the function definition has a dynamic-exception-specification, the function <code>std::unexpected()</code> is called ([except.unexpected]),</li>\n<li>otherwise, the function <code>std::terminate()</code> is called ([except.terminate]).</li>\n</ul>\n</blockquote>\n<p><em>What does the \"outermost block of a function\" mean?</em> The body of the function.<sup>1</sup></p>\n<p>The <a href=\"http://eel.is/c++draft/except.spec#exception-specification\" rel=\"nofollow\"><em>exception specification</em></a> above includes the <em>noexcept-specification</em>.</p>\n<p><strong>How is the implicitly declared exception specification determined on an implicitly declared constructor?</strong></p>\n<p><a href=\"http://eel.is/c++draft/except#except.spec-15\" rel=\"nofollow\">[except.spec]/15</a></p>\n<blockquote>\n<p id=\"so_36295738_37138998_2\">An implicitly-declared special member function <code>f</code> of some class <code>X</code> is considered to have an implicit exception specification that consists of all the members from the following sets:</p>\n<ul>\n<li><p id=\"so_36295738_37138998_3\">if <code>f</code> is a constructor,</p>\n<ul>\n<li><p id=\"so_36295738_37138998_4\">the sets of potential exceptions of the constructor invocations</p>\n<ul>\n<li>for <code>X</code>'s non-variant non-static data members,</li>\n<li>for <code>X</code>'s direct base classes, and</li>\n<li><p id=\"so_36295738_37138998_5\">if <code>X</code> is non-abstract ([class.abstract]), for <code>X</code>'s virtual base classes,</p>\n<p id=\"so_36295738_37138998_6\">(including default argument expressions used in such invocations) as selected by overload resolution for the implicit definition of f ([class.ctor])...</p></li>\n</ul></li>\n<li><p id=\"so_36295738_37138998_7\">the sets of potential exceptions of the initialization of non-static data members from <em>brace-or-equal-initializers</em> that are not ignored ([class.base.init]);</p></li>\n</ul></li>\n</ul>\n</blockquote>\n<p>This provides very useful clarification on what the compiler would use to determine (and hence consider covered by) the exception specification.</p>\n<hr>\n<p><sup>1</sup><em>What does the \"outermost block of a function\" mean?</em> There was a comment on the concern to the definition of the block of a function. The standard has no formal definition of the <em>block of a function</em>. The phrase <em>block of a function</em> is only used in the <a href=\"http://eel.is/c++draft/#except\" rel=\"nofollow\">Exception Handling [except]</a>. The phrase was included in the standard from as far back as C++98.</p>\n<p>For further clarity on this, we would need seek alternative source and draw some reasonable conclusions.</p>\n<p>From <a href=\"http://www.stroustrup.com/glossary.html#Gfunction-body\" rel=\"nofollow\">Stroustrup C++ glossary</a>;</p>\n<blockquote>\n<p id=\"so_36295738_37138998_8\"><strong>function body</strong> - the outermost block of a function. See also: try-block, function definition. TC++PL 2.7, 13.</p>\n</blockquote>\n<p>And from <a href=\"http://eel.is/c++draft/dcl.fct.def.general#1\" rel=\"nofollow\">[dcl.fct.def.general]/1</a> the grammar for the <em>function-body</em> that covers the <em>ctor-initializer</em> with <em>compound-statement</em> and the <em>function-try-block</em>;</p>\n<blockquote>\n<p id=\"so_36295738_37138998_9\">Function definitions have the form;</p>\n<p id=\"so_36295738_37138998_10\">...</p>\n<p id=\"so_36295738_37138998_11\">\u00a0\u00a0<em>function-body</em>:<br>\n  \u00a0\u00a0\u00a0\u00a0<em>ctor-initializer</em><sub>opt</sub> <em>compound-statement</em><br>\n  \u00a0\u00a0\u00a0\u00a0<em>function-try-block</em><br/></br></br></p>\n<p id=\"so_36295738_37138998_12\">...</p>\n<p id=\"so_36295738_37138998_13\">Any informal reference to the body of a function should be interpreted as a reference to the non-terminal <em>function-body</em>...</p>\n</blockquote>\n<p>It is also important to bear in mind that exception specifications are associated with functions and not general blocks of code (scoped blocks etc.).</p>\n<p>Given the age of the phrase in the exception handling clause and the Stroustrup FAQ, the <em>block of a function</em> is the same as the <em>function-body</em>, the standard could probably do with an update of the language used in the exception clause.</p>\n<hr>\n<p>Some empirical evidence, given the code below, for the construction of <code>a1</code>, <code>a2</code> and <code>a3</code> (when the others are commented out), result in <code>std::terminate</code> being called. The result is applicable for <a href=\"http://coliru.stacked-crooked.com/a/b0a58ce594bd6d37\" rel=\"nofollow\">g++, clang</a> and <a href=\"http://rextester.com/MVFU30714\" rel=\"nofollow\">MSVC</a>.</p>\n<pre><code>struct Thrower { Thrower() { std::cout &lt;&lt; \"throwing...\" &lt;&lt; std::endl; throw 42; } };\n\nstruct AsMember { Thrower t_; AsMember() noexcept : t_{} { std::cout &lt;&lt; \"ctor\" &lt;&lt; std::endl; } };\n\nstruct AsBase : Thrower { AsBase() noexcept { std::cout &lt;&lt; \"ctor\" &lt;&lt; std::endl; } };\n\nstruct AsNSDMI { Thrower t_ {}; AsNSDMI() noexcept { std::cout &lt;&lt; \"ctor\" &lt;&lt; std::endl; } };\n\nint main()\n{\n    std::set_terminate([](){ std::cout &lt;&lt; \"terminating...\" &lt;&lt; std::endl; });\n    try {\n        //AsMember a1{};\n        //AsBase a2{};\n        AsNSDMI a3{};\n    }\n    catch (...) { std::cout &lt;&lt; \"caught...\" &lt;&lt; std::endl; }\n    return 0;\n}\n</code></pre>\n</hr></hr>", "OwnerUserId": "3747990", "LastEditorUserId": "3747990", "LastEditDate": "2016-05-25T19:07:24.417", "Id": "37138998", "Score": "5", "CreationDate": "2016-05-10T12:46:09.260", "LastActivityDate": "2016-05-25T19:07:24.417"}, "bq_ids": {"n4140": {"so_36295738_37138998_1": {"section_id": 3371, "quality": 0.75, "length": 12}, "so_36295738_37138998_13": {"section_id": 3262, "quality": 0.8888888888888888, "length": 8}, "so_36295738_37138998_8": {"section_id": 7062, "quality": 0.5454545454545454, "length": 6}, "so_36295738_37138998_9": {"section_id": 3262, "quality": 1.0, "length": 4}}, "n3337": {"so_36295738_37138998_1": {"section_id": 3241, "quality": 0.75, "length": 12}, "so_36295738_37138998_13": {"section_id": 3134, "quality": 0.8888888888888888, "length": 8}, "so_36295738_37138998_8": {"section_id": 6806, "quality": 0.5454545454545454, "length": 6}, "so_36295738_37138998_9": {"section_id": 3134, "quality": 1.0, "length": 4}}, "n4659": {"so_36295738_37138998_1": {"section_id": 4133, "quality": 0.6875, "length": 11}, "so_36295738_37138998_13": {"section_id": 4020, "quality": 0.8888888888888888, "length": 8}, "so_36295738_37138998_8": {"section_id": 8559, "quality": 0.5454545454545454, "length": 6}, "so_36295738_37138998_9": {"section_id": 4020, "quality": 1.0, "length": 4}}}});