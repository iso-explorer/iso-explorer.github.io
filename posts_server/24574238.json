post_cb({"24574378": {"Id": "24574378", "PostTypeId": "2", "Body": "<p>No, it isn't logical for the compiler to say that the second else is not associated with an if statement.</p>\n", "LastActivityDate": "2014-07-04T12:29:58.720", "Score": "1", "CreationDate": "2014-07-04T12:29:58.720", "ParentId": "24574238", "CommentCount": "0", "OwnerUserId": "1160570"}, "24574355": {"Id": "24574355", "PostTypeId": "2", "Body": "<p>The <code>else</code> is part of the <code>if</code> statement it corresponds to. In the case of:</p>\n<pre><code>if(condition) {\n\n}\nelse if {\n\n}\nelse if {\n\n}\n</code></pre>\n<p>The nested statements are as follows:</p>\n<pre><code>if (condition) { } else // first statement\n  if { } else           // second statement\n    if { }              // third statement\n</code></pre>\n<p>So the second <code>else</code> is associated with the second <code>if</code>.</p>\n", "LastActivityDate": "2014-07-04T12:28:48.560", "Score": "3", "CreationDate": "2014-07-04T12:28:48.560", "ParentId": "24574238", "CommentCount": "0", "OwnerUserId": "150634"}, "24574347": {"Id": "24574347", "PostTypeId": "2", "Body": "<pre><code>if (condition) statement else statement\n</code></pre>\n<p>is a single <em>selection-statement</em>. This means that the entire <code>if...else</code> is the substatement of a previous <code>else</code>.</p>\n<p>or in other words, you start rolling up the statements from the bottom.</p>\n", "LastActivityDate": "2014-07-04T12:28:22.717", "Score": "6", "CreationDate": "2014-07-04T12:28:22.717", "ParentId": "24574238", "CommentCount": "1", "OwnerUserId": "8922"}, "bq_ids": {"n4140": {"so_24574238_24574238_0": {"length": 33, "quality": 1.0, "section_id": 3888}}, "n3337": {"so_24574238_24574238_0": {"length": 33, "quality": 1.0, "section_id": 3748}}, "n4659": {"so_24574238_24574238_0": {"length": 33, "quality": 1.0, "section_id": 4772}}}, "24574446": {"Id": "24574446", "PostTypeId": "2", "Body": "<p>The reason for these rules is to resolve a problem known as the <a href=\"http://en.wikipedia.org/wiki/Dangling_else\" rel=\"nofollow\">Dangling else</a> problem.</p>\n<p>It rears its head in code like this...</p>\n<pre><code>if (A) \nif (B) DoB();\nelse DoC();\n</code></pre>\n<p>When is <code>DoC()</code> performed?  Does it happen when A is false? Or does it happen when A is true and B is false?</p>\n<p>There is no <em>logical</em> way for the compiler to resolve this kind of situation.  So outside the normal parsing rules, 6.3 declares that in this ambiguous case, the else belongs to the <em>inner</em> if statement.</p>\n", "LastEditorUserId": "3294441", "LastActivityDate": "2014-09-02T13:50:50.927", "Score": "2", "CreationDate": "2014-07-04T12:33:27.597", "ParentId": "24574238", "CommentCount": "4", "LastEditDate": "2014-09-02T13:50:50.927", "OwnerUserId": "3294441"}, "24574238": {"ViewCount": "643", "Body": "<p>From the C++ standard section 6.4.1: <strong>The if statement</strong>:</p>\n<blockquote>\n<p id=\"so_24574238_24574238_0\">If the condition (6.4) yields true the first substatement is executed. If the else part of the selection\n  statement is present and the condition yields false, the second\n  substatement is executed. In the second form of if statement (the one\n  including else), if the first substatement is also an if statement\n  then that inner if statement shall contain an else part.</p>\n</blockquote>\n<p>Section 6.4: <strong>Selection statements</strong>:</p>\n<pre><code>Selection statements choose one of several flows of control.\n    selection-statement:\n        if ( condition ) statement\n        if ( condition ) statement else statement\n    condition:\n       expression\n       attribute-specifier-seqopt decl-specifier-seq declarator = initializer-clause\n       attribute-specifier-seqopt decl-specifier-seq declarator braced-init-list\n</code></pre>\n<p>I thought that <strong>else if() {}</strong> statement was a separate statement from <strong>if() {}</strong> and <strong>else {}</strong>.\nNow it seems that this <strong>else if {}</strong> statement is just an else statement with it's own <strong>if() {}</strong> inside it so these two codes are equal:</p>\n<pre><code>if(condition) {\n\n    }\n    else {\n        if(condition) {\n\n        }\n    }\n\nif(condition) {\n\n    }\n    else if(condition) {\n\n    }\n</code></pre>\n<p>Now what if we have multiple else if-s? These codes are also equal in C++:</p>\n<pre><code>if(condition) {\n\n    }\n    else {\n        if(condition) {\n\n        }\n        else {\n            if(condition){\n\n            }\n        }\n    }\n\nif(condition) {\n\n    }\n    else if {\n\n    }\n    else if {\n\n    }\n</code></pre>\n<p>About the last code: When we write an else statement without curly braces only the first statement is associated to the <strong>else</strong> because the other statements are not part of that <strong>else</strong>(they are not in curly braces with the first statement). So isn't it logical for the compiler to say that the second <strong>else</strong> is not associated with an if statement?</p>\n", "AcceptedAnswerId": "24574347", "Title": "if..else statement in the c++ standard", "CreationDate": "2014-07-04T12:22:50.187", "Id": "24574238", "CommentCount": "6", "PostTypeId": "1", "LastActivityDate": "2014-09-02T13:50:50.927", "Score": "3", "OwnerUserId": "1907159", "Tags": "<c++><if-statement>", "AnswerCount": "4"}});