post_cb({"46271589": {"ParentId": "37753998", "CommentCount": "2", "CreationDate": "2017-09-18T04:24:15.457", "OwnerUserId": "8586227", "PostTypeId": "2", "Id": "46271589", "Score": "1", "Body": "<p>You can do what you want with an <a href=\"https://timsong-cpp.github.io/cppwp/expr.prim.lambda.capture#6\" rel=\"nofollow noreferrer\">init-capture</a>:</p>\n<pre><code>void ClassDerivedFromSharedFromThis::countdown(ThreadPool &amp;pool, std::string name){\n    pool.then([=, self=shared_from_this()]{\n        for(int i = 0;i &lt; 10;++i){\n            atomic_cout() &lt;&lt; \"Hey [\" &lt;&lt; name &lt;&lt; \"]! Our counter is: \" &lt;&lt; atomicCounter++ &lt;&lt; \"\\n\";\n        }\n    });\n}\n</code></pre>\n<p>With the bonus that you don't have to declare <code>self</code> separately.</p>\n", "LastActivityDate": "2017-09-18T04:24:15.457"}, "37754133": {"ParentId": "37753998", "PostTypeId": "2", "CommentCount": "2", "CreationDate": "2016-06-10T17:34:29.283", "Score": "7", "LastEditorUserId": "1505939", "LastEditDate": "2017-09-18T05:38:33.503", "Id": "37754133", "OwnerUserId": "4342498", "Body": "<p>Yes this is standard behavior.  From C++14 (N4140) [expr.prim.lambda]/8</p>\n<blockquote>\n<p id=\"so_37753998_37754133_0\">If a <em>lambda-capture</em> includes a <em>capture-default</em> that is <code>=</code>, each <em>simple-capture</em> of that <em>lambda-capture</em> shall be of the form \u201c<em>&amp; identifier</em>\u201d.</p>\n</blockquote>\n<p>So if you have <code>[=]</code> then any other capture you do must be done by reference like </p>\n<pre><code>[=, &amp;some_var]{} // copy all implicitly but explicitly capture some_var by reference\n</code></pre>\n<p>The rules do change in C++17 but it is to allow</p>\n<pre><code>[=, *this]{};\n</code></pre>\n<p>Which will capture a copy of the object into the lambda.</p>\n", "LastActivityDate": "2017-09-18T05:38:33.503"}, "bq_ids": {"n4140": {"so_37753998_37754133_0": {"section_id": 5967, "quality": 1.0, "length": 8}}, "n3337": {"so_37753998_37754133_0": {"section_id": 5736, "quality": 0.625, "length": 5}}, "n4659": {"so_37753998_37754133_0": {"section_id": 7465, "quality": 1.0, "length": 8}}}, "37753998": {"CommentCount": "4", "ViewCount": "126", "CreationDate": "2016-06-10T17:25:31.877", "LastActivityDate": "2017-09-18T05:38:33.503", "Title": "C++: Can you do a lambda implicit copy capture plus explicit copy capture?", "AcceptedAnswerId": "37754133", "PostTypeId": "1", "Id": "37753998", "Score": "5", "Body": "<p>Trying to keep an object alive (but not needing to reference the shared_ptr to do so) I found myself writing stuff like this:</p>\n<pre><code>void ClassDerivedFromSharedFromThis::countdown(ThreadPool &amp;pool, std::string name){\n    auto self = shared_from_this();\n    pool.then([=, self]{\n        for(int i = 0;i &lt; 10;++i){\n            atomic_cout() &lt;&lt; \"Hey [\" &lt;&lt; name &lt;&lt; \"]! Our counter is: \" &lt;&lt; atomicCounter++ &lt;&lt; \"\\n\";\n        }\n    });\n}\n</code></pre>\n<p>But then got an error in visual studio that said I couldn't copy-capture explicitly because I was already copy-capturing implicitly... This forced me to write:</p>\n<pre><code>void countdown(ThreadPool &amp;pool, std::string name){\n    auto self = shared_from_this();\n    pool.then([=]{\n        self; //Capture self.\n        for(int i = 0;i &lt; 10;++i){\n            atomic_cout() &lt;&lt; \"Hey [\" &lt;&lt; name &lt;&lt; \"]! Our counter is: \" &lt;&lt; atomicCounter++ &lt;&lt; \"\\n\";\n        }\n    });\n}\n</code></pre>\n<p>I know this works, but it feels wrong. Since I only need the side-effect of the shared_ptr ownership and do not need to reference it directly I would like to express this in the capture list instead of the lambda body.</p>\n<p>In my real code I have about 5 or 6 variables I wanted to capture across a couple nested lambdas in network code and implicit capture was way nicer and easier to edit.</p>\n<p>My question is: is this standard behaviour or Visual Studio 2015's own take on lambda capture limitations? Do newer versions of the standard allow for this, or has anyone talked about it?</p>\n", "Tags": "<c++><lambda><visual-studio-2015><c++1z>", "OwnerUserId": "246878", "AnswerCount": "2"}});