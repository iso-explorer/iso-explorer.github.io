post_cb({"20066104": {"CommentCount": "7", "ViewCount": "212", "PostTypeId": "1", "LastEditorUserId": "160206", "CreationDate": "2013-11-19T07:57:52.337", "LastActivityDate": "2013-11-19T08:33:36.890", "Title": "Is a string literal not acceptable as a template argument in C++?", "FavoriteCount": "2", "LastEditDate": "2013-11-19T08:33:36.890", "Id": "20066104", "Score": "3", "Body": "<p>Page 724 , Chapter 25, The C++ Programming Language</p>\n<p>A pointer used as a template argument must be of the form <code>&amp;of</code>, where of is the name of an object or a function, or of the form <code>f</code>, where <code>f</code> is the name of a function. A pointer to member must be of the form <code>&amp;X::of</code>, where of is the name of a member. In particular, a string literal is not acceptable as a template argument:</p>\n<pre><code>template&lt;typename T, char\u2217 label&gt;\nclass X {\n    // ...\n};\nX&lt;int,\"BMW323Ci\"&gt; x1; // **error : string literal as template argument**\nchar lx2[] = \"BMW323Ci\";\nX&lt;int,lx2&gt; x2; // OK: lx2 has exter nal linkage\n</code></pre>\n<p>Page 725 , Chapter 25, The C++ Programming Language</p>\n<p>This becomes particularly useful when combined with a default template argument (\u00a725.2.5); for\nexample:</p>\n<pre><code>template&lt;typename T, T default_value = T{}&gt;\nclass Vec {\n    // ...\n};\nVec&lt;int,42&gt; c1;\nVec&lt;int&gt; c11; // default_value is int{}, that is, 0\nVec&lt;string,\"fortytwo\"&gt; c2;  // **I'm confused!**\nVec&lt;string&gt; c22; // default_value is string{}; that is, \"\"\n</code></pre>\n", "Tags": "<c++><templates>", "OwnerUserId": "2345321", "AnswerCount": "2"}, "20066609": {"ParentId": "20066104", "CommentCount": "0", "CreationDate": "2013-11-19T08:30:43.800", "OwnerUserId": "459640", "PostTypeId": "2", "Id": "20066609", "Score": "1", "Body": "<pre><code>template&lt;typename T, T default_value = T{}&gt;\nclass Vec {\n    // ...\n};\nVec&lt;string,\"fortytwo\"&gt; c2;\nVec&lt;string&gt; c22;\n</code></pre>\n<p>Neither declaration involving <code>string</code> is legal at all.</p>\n<p>14.1/4:</p>\n<blockquote>\n<p id=\"so_20066104_20066609_0\">A non-type <em>template-parameter</em> shall have one of the following (optionally <em>cv-qualified</em>) types:</p>\n<ul>\n<li><p id=\"so_20066104_20066609_1\">integral or enumeration type,</p></li>\n<li><p id=\"so_20066104_20066609_2\">pointer to object or pointer to function,</p></li>\n<li><p id=\"so_20066104_20066609_3\">lvalue reference to object or lvalue reference to function,</p></li>\n<li><p id=\"so_20066104_20066609_4\">pointer to member,</p></li>\n<li><p id=\"so_20066104_20066609_5\"><code>std::nullptr_t</code>.</p></li>\n</ul>\n</blockquote>\n<p>14.1/7:</p>\n<blockquote>\n<p id=\"so_20066104_20066609_6\">A non-type <em>template-parameter</em> shall not be declared to have floating point, <strong>class</strong>, or void type.</p>\n</blockquote>\n", "LastActivityDate": "2013-11-19T08:30:43.800"}, "bq_ids": {"n4140": {"so_20066104_20066609_3": {"section_id": 57, "quality": 1.0, "length": 6}, "so_20066104_20066609_0": {"section_id": 57, "quality": 1.0, "length": 8}, "so_20066104_20066609_2": {"section_id": 57, "quality": 1.0, "length": 4}, "so_20066104_20066609_6": {"section_id": 60, "quality": 1.0, "length": 9}}, "n3337": {"so_20066104_20066609_0": {"section_id": 52, "quality": 1.0, "length": 8}, "so_20066104_20066609_3": {"section_id": 52, "quality": 1.0, "length": 6}, "so_20066104_20066609_2": {"section_id": 52, "quality": 1.0, "length": 4}, "so_20066104_20066609_6": {"section_id": 55, "quality": 1.0, "length": 9}}, "n4659": {"so_20066104_20066609_3": {"section_id": 59, "quality": 1.0, "length": 6}, "so_20066104_20066609_0": {"section_id": 59, "quality": 1.0, "length": 8}, "so_20066104_20066609_2": {"section_id": 59, "quality": 1.0, "length": 4}, "so_20066104_20066609_6": {"section_id": 62, "quality": 0.7777777777777778, "length": 7}}}, "20066289": {"ParentId": "20066104", "CommentCount": "3", "CreationDate": "2013-11-19T08:10:15.340", "OwnerUserId": "3671015", "PostTypeId": "2", "Id": "20066289", "Score": "0", "Body": "<p>A string literal is not acceptable as a template argument. With the first template, you have to declare a char array to be used as template argument.</p>\n<p>With the second template, the \"fortytwo\" isn't a string literal. Instead, it is a std::string.</p>\n", "LastActivityDate": "2013-11-19T08:10:15.340"}});