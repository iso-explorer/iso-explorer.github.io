post_cb({"6987704": {"Id": "6987704", "PostTypeId": "2", "Body": "<p>I think the relevant quote is:</p>\n<blockquote>\n<p id=\"so_6987497_6987704_0\">\u00a7 7.1.6.1 (4) from N3242:</p>\n<p id=\"so_6987497_6987704_1\">Except that any class member declared mutable can be modified, any\n  attempt to modify a const object during its lifetime results in\n  undefined behavior.</p>\n</blockquote>\n<p>The examples illustrate the point using <code>const_cast</code>. As James pointed out: the quote can be found in \u00a77.1.5 in the C++03 standard.</p>\n<p>A little elaboration: That language rule allows the compiler to use read-only memory (if it is available on the target architecture) when something is declared <code>const</code>. Without this rule <code>const</code>-ness could always be casted away without fearing any consequences and using it would only be a matter of developer discipline. The way it is you can at least tell people that they are invoking UB, which usually is a good deterrent. The <code>const_cast</code> itself is of minor relevance as it does not matter how you trick the compiler in letting you manipulate a <code>const</code> object.</p>\n", "LastEditorUserId": "105672", "LastActivityDate": "2012-07-31T21:20:38.557", "Score": "12", "CreationDate": "2011-08-08T19:49:51.517", "ParentId": "6987497", "CommentCount": "0", "OwnerUserId": "105672", "LastEditDate": "2012-07-31T21:20:38.557"}, "6987578": {"Id": "6987578", "PostTypeId": "2", "Body": "<p>I don't have a solution for the actual problem. I just can say, don't use <code>const_cast</code> unless the intention is to call a const member function from a non-const member function and \"const_cast\" the const result (to make it a mutable result for the non-const member function).</p>\n<p>But I have a proposal for improving your design:</p>\n<pre><code>class A\n{\nprivate:\n  static int v;\npublic:\n  A() { ++v; }\n  static int get_v() { return v; }\n};\n\nint A::v = 0;\n\nint main(int argc, char * argv[])\n{\n  A a, b, c;\n  std::cout &lt;&lt; a.get_v() &lt;&lt; std::endl;\n\n  return 0;\n}\n</code></pre>\n", "LastEditorUserId": "480304", "LastActivityDate": "2011-08-08T19:41:36.180", "Score": "2", "CreationDate": "2011-08-08T19:36:18.413", "ParentId": "6987497", "CommentCount": "0", "OwnerUserId": "480304", "LastEditDate": "2011-08-08T19:41:36.180"}, "6987558": {"Id": "6987558", "PostTypeId": "2", "Body": "<p>Because you're not allowed to modify variables declared as const.</p>\n", "LastActivityDate": "2011-08-08T19:34:55.783", "CommentCount": "0", "CreationDate": "2011-08-08T19:34:55.783", "ParentId": "6987497", "Score": "4", "OwnerUserId": "882003"}, "bq_ids": {"n4140": {"so_6987497_6987624_0": {"length": 20, "quality": 0.9523809523809523, "section_id": 6057}, "so_6987497_6987704_1": {"length": 17, "quality": 1.0, "section_id": 5433}}, "n3337": {"so_6987497_6987624_0": {"length": 20, "quality": 0.9523809523809523, "section_id": 5825}, "so_6987497_6987704_1": {"length": 17, "quality": 1.0, "section_id": 5228}}, "n4659": {"so_6987497_6987624_0": {"length": 20, "quality": 0.9523809523809523, "section_id": 7555}, "so_6987497_6987704_1": {"length": 17, "quality": 1.0, "section_id": 6861}}}, "6987497": {"ViewCount": "1671", "Body": "<p>The following code compile well both with GCC (4.2-4.6) and with Clang (2.1), but when I run the executable it gives me \"Bus error: 10\". I don't understand the reason.</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct A\n{\n  static int const v;\n  A() { ++*const_cast&lt;int *&gt;(&amp;A::v); }\n};\n\nint const A::v = 0;\n\nint main(int argc, char * argv[])\n{\n  A a, b, c;\n  std::cout &lt;&lt; a.v &lt;&lt; std::endl;\n\n  return 0;\n}\n</code></pre>\n", "AcceptedAnswerId": "6987704", "Title": "const_cast of a static const member", "CreationDate": "2011-08-08T19:30:04.630", "Id": "6987497", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2012-07-31T21:20:38.557", "Score": "7", "OwnerUserId": "235120", "Tags": "<c++><static><const><member><const-cast>", "AnswerCount": "7"}, "6987594": {"Id": "6987594", "PostTypeId": "2", "Body": "<p>Just because you've cast away const, doesn't mean that you will succeed in writing to that memory.</p>\n<p>All that <code>const_cast&lt;T&gt;</code> does is remove the const-ness of the variable from the compiler's perspective. That lets the compiler go ahead and emit code to write to the variable. But at runtime, if the compiler/linker happened to put the variable in read-only memory, then the hardware will stop you writing there no matter how you cast it.</p>\n", "LastActivityDate": "2011-08-08T19:37:37.800", "CommentCount": "0", "CreationDate": "2011-08-08T19:37:37.800", "ParentId": "6987497", "Score": "2", "OwnerUserId": "505088"}, "6987591": {"Id": "6987591", "PostTypeId": "2", "Body": "<p>The problem is this line :  </p>\n<pre><code>static int const v;\n</code></pre>\n<p>Because you declared it const, the const_cast is causing an undefined behaviour - in your case you are lucky with getting bus error (it is a segmentation fault on my system).</p>\n<p>Declare it non-const, and you can call const_cast on it without problems.</p>\n", "LastActivityDate": "2011-08-08T19:37:22.553", "CommentCount": "0", "CreationDate": "2011-08-08T19:37:22.553", "ParentId": "6987497", "Score": "1", "OwnerUserId": "476681"}, "6987624": {"Id": "6987624", "PostTypeId": "2", "Body": "<p>5.2.11.7:</p>\n<blockquote>\n<p id=\"so_6987497_6987624_0\">Depending on the type of the object, a write operation through the\n  pointer, lvalue or pointer to data member resulting from a const_cast\n  that casts away a const-qualifier) may produce undefined behavior\n  (7.1.5.1)</p>\n</blockquote>\n<p>In your case, you are trying to modify data that is in read-only segment.</p>\n", "OwnerDisplayName": "user405725", "LastActivityDate": "2011-08-08T19:40:53.420", "Score": "6", "CreationDate": "2011-08-08T19:40:53.420", "ParentId": "6987497", "CommentCount": "3"}, "6987713": {"Id": "6987713", "PostTypeId": "2", "Body": "<p>Basically, if a variable is declared <code>const</code>, the compiler is allowed to emit the results to read only memory.  Taking a pointer/reference to a <code>const</code> object and then using <code>const_cast</code> to remove the <code>const</code> can result in undefined behavior.</p>\n<p>In general, it is only safe to use <code>const_cast</code> if the object being refered to is non-<code>const</code> (even if the pointer/reference you have is <code>const</code>).</p>\n", "LastActivityDate": "2011-08-08T19:50:54.490", "CommentCount": "0", "CreationDate": "2011-08-08T19:50:54.490", "ParentId": "6987497", "Score": "2", "OwnerUserId": "862231"}});