post_cb({"8202705": {"ParentId": "8202571", "CommentCount": "0", "CreationDate": "2011-11-20T15:53:28.597", "OwnerUserId": "784668", "PostTypeId": "2", "Id": "8202705", "Score": "2", "Body": "<p>When declared as such, <code>MojaKlasa</code> is a POD type, so the compiler can't initialize it to any meaningful value automatically, just like it couldn't automatically initialize a <code>const int</code> to any meaningful value.</p>\n<p>Note that you don't need an explicit default constructor to create constants of this type:</p>\n<pre class=\"lang-c prettyprint-override\"><code>const MojaKlasa foo = {}; // works fine\n</code></pre>\n", "LastActivityDate": "2011-11-20T15:53:28.597"}, "8202571": {"CommentCount": "5", "ViewCount": "3204", "CreationDate": "2011-11-20T15:33:42.593", "LastActivityDate": "2011-11-20T15:53:28.597", "Title": "Definition of constant object of class", "FavoriteCount": "1", "PostTypeId": "1", "Id": "8202571", "Score": "2", "Body": "<p>There is such code:</p>\n<pre><code>class MojaKlasa{\npublic:\n};\n\nint main()\n{\n  const MojaKlasa a;\n\n  return 0;\n}\n</code></pre>\n<p>Compiler error is:</p>\n<pre><code>error: uninitialized const \u2018a\u2019\n</code></pre>\n<p>However after modification of class MojaKlasa:</p>\n<pre><code>class MojaKlasa{\npublic:\n  MojaKlasa(){}\n};\n</code></pre>\n<p>it works all right. Default constructor should be defined automatically by C++ - why isn't it done in this case and default constructor must be explicitly defined?</p>\n", "Tags": "<c++><class>", "OwnerUserId": "738811", "AnswerCount": "3"}, "8202635": {"ParentId": "8202571", "CommentCount": "3", "CreationDate": "2011-11-20T15:42:09.450", "OwnerUserId": "837803", "PostTypeId": "2", "Id": "8202635", "Score": "-2", "Body": "<p>The compiler might be confused because the size of a is zero! Try adding a dummy member to MojaKlasa. </p>\n", "LastActivityDate": "2011-11-20T15:42:09.450"}, "bq_ids": {"n4140": {"so_8202571_8202615_0": {"section_id": 3286, "quality": 0.9722222222222222, "length": 35}}, "n3337": {"so_8202571_8202615_0": {"section_id": 3156, "quality": 1.0, "length": 36}}, "n4659": {"so_8202571_8202615_0": {"section_id": 4048, "quality": 0.6111111111111112, "length": 22}}}, "8202615": {"ParentId": "8202571", "PostTypeId": "2", "CommentCount": "1", "CreationDate": "2011-11-20T15:39:40.413", "Score": "7", "LastEditorUserId": "635608", "LastEditDate": "2011-11-20T15:52:19.920", "Id": "8202615", "OwnerUserId": "635608", "Body": "<p>Draft n3290 (C++0X) has this in \u00a78.5/6:</p>\n<blockquote>\n<p id=\"so_8202571_8202615_0\">To default-initialize an object of type T means:<br>\n  \u2014 if T is a (possibly cv-qualified) class type (Clause 9), the default constructor for T is called (and the\n  initialization is ill-formed if T has no accessible default constructor);<br>\n  \u2014 if T is an array type, each element is default-initialized;<br>\n  \u2014 otherwise, no initialization is performed.<br>\n  If a program calls for the default initialization of an object of a <strong>const-qualified type T</strong>, T shall be a class type\n  with a <strong>user-provided default constructor</strong>.</br></br></br></br></p>\n</blockquote>\n<p>So you actually need a user-defined constructor here, the compiler-generated one would not be sufficient.</p>\n<p>BTW, <code>clang++</code> has a great diagnostic for this:</p>\n<pre><code>$ clang++ -std=c++0x -pedantic -Wall t.cpp\nt.cpp:7:19: error: default initialization of an object  of const type\n                   'const MojaKlasa' requires a user-provided default constructor\n  const MojaKlasa a;\n                  ^\n1 error generated.\n</code></pre>\n<p>For C++03, the wording is as follows (\u00a78.5/9):</p>\n<blockquote>\n<p id=\"so_8202571_8202615_1\">If no initializer is specified for an object, and the object is of (possibly cv-qualified) non-POD class type (or array thereof), the object shall be default-initialized; if the object is of const-qualified type, the underlying class type shall have a user-declared default constructor. Otherwise, if no initializer is specified for a non-static object, the object and its subobjects, if any, have an indeterminate initial value ; <em>if the object or any of its subobjects are of const-qualified type, the program is ill-formed</em>.</p>\n</blockquote>\n<p>Which explains the <em>why</em> it is this way. You've got a POD type that you're not initializing,  so its members have an \"indeterminate\" values. Since the object you declare is <code>const</code>, you can't assign to its fields, so you're left with a POD whose values you can't assign to, and you can't read from either (would be undefined behavior). Not very useful.</p>\n", "LastActivityDate": "2011-11-20T15:52:19.920"}});