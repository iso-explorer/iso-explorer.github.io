post_cb({"46165756": {"ParentId": "3025997", "CommentCount": "0", "Body": "<p>As of C++11 you can (and you want) to use:</p>\n<p><code>static constexpr int N = 10;</code></p>\n<p>that does not require you to define the constant in a .cpp file.</p>\n", "OwnerUserId": "1487069", "PostTypeId": "2", "Id": "46165756", "Score": "2", "CreationDate": "2017-09-11T23:38:15.530", "LastActivityDate": "2017-09-11T23:38:15.530"}, "6160192": {"ParentId": "3025997", "CommentCount": "2", "Body": "<p>Here's another way to work around the problem:</p>\n<pre><code>std::min(9, int(test::N));\n</code></pre>\n<p>(I think Crazy Eddie's answer correctly describes why the problem exists.)</p>\n", "OwnerUserId": "475491", "PostTypeId": "2", "Id": "6160192", "Score": "8", "CreationDate": "2011-05-28T07:04:03.643", "LastActivityDate": "2011-05-28T07:04:03.643"}, "3026148": {"ParentId": "3025997", "LastEditDate": "2012-12-03T13:47:43.493", "CommentCount": "1", "CreationDate": "2010-06-11T20:48:49.697", "OwnerUserId": "211160", "LastEditorUserId": "170967", "PostTypeId": "2", "Id": "3026148", "Score": "36", "Body": "<p>Bjarne Stroustrup's example <a href=\"http://www.stroustrup.com/bs_faq2.html#in-class\" rel=\"noreferrer\">in his C++ FAQ</a> suggests you are correct, and only need a definition if you take the address.  </p>\n<pre><code>class AE {\n    // ...\npublic:\n    static const int c6 = 7;\n    static const int c7 = 31;\n};\n\nconst int AE::c7;   // definition\n\nint f()\n{\n    const int* p1 = &amp;AE::c6;    // error: c6 not an lvalue\n    const int* p2 = &amp;AE::c7;    // ok\n    // ...\n}\n</code></pre>\n<p>He says <i>\"You can take the address of a static member if (and only if) it has an out-of-class definition\"</i>.  Which suggests it would work otherwise.  Maybe your min function invokes addresses somehow behind the scenes.</p>\n", "LastActivityDate": "2012-12-03T13:47:43.493"}, "3026072": {"ParentId": "3025997", "CommentCount": "1", "Body": "<p>Another way to do this, for integer types anyway, is to define constants as enums in the class:</p>\n<pre><code>class test\n{\npublic:\n    enum { N = 10 };\n};\n</code></pre>\n", "OwnerUserId": "307339", "PostTypeId": "2", "Id": "3026072", "Score": "22", "CreationDate": "2010-06-11T20:39:46.787", "LastActivityDate": "2010-06-11T20:39:46.787"}, "3026054": {"ParentId": "3025997", "LastEditDate": "2010-06-11T20:51:24.183", "CommentCount": "4", "CreationDate": "2010-06-11T20:36:30.833", "OwnerUserId": "301883", "LastEditorUserId": "301883", "PostTypeId": "2", "Id": "3026054", "Score": "48", "Body": "<p><i>My understanding is that C++ allows static const members to be defined inside a class so long as it's an integer type.</i></p>\n<p>You are sort of correct.  You are allowed to initialize static const integrals in the class declaration but that is not a definition.</p>\n<p><a href=\"http://publib.boulder.ibm.com/infocenter/comphelp/v8v101/index.jsp?topic=/com.ibm.xlcpp8a.doc/language/ref/cplr038.htm\" rel=\"noreferrer\">http://publib.boulder.ibm.com/infocenter/comphelp/v8v101/index.jsp?topic=/com.ibm.xlcpp8a.doc/language/ref/cplr038.htm</a></p>\n<p><i>Interestingly, if I comment out the call to std::min, the code compiles and links just fine (even though test::N is also referenced on the previous line).</i></p>\n<p>Any idea as to what's going on?</p>\n<p>std::min takes its parameters by const reference.  If it took them by value you'd not have this problem but since you need a reference you also need a definition.</p>\n<p>Here's chapter/verse:</p>\n<p><b>9.4.2/4</b> - If a <code>static</code> data member is of <code>const</code> integral or <code>const</code> enumeration type, its declaration in the class definition can specify a <i>constant-initializer</i> which shall be an integral constant expression (5.19).  In that case, the member can appear in integral constant expressions.  The member shall still be defined in a namespace scope if it is used in the program and the namespace scope definition shall not contain an <i>initializer</i>.</p>\n<p>See Chu's answer for a possible workaround.</p>\n", "LastActivityDate": "2010-06-11T20:51:24.183"}, "3026237": {"ParentId": "3025997", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_3025997_3026237_0\">C++ allows static const members to be defined inside a class</p>\n</blockquote>\n<p>Nope, 3.1 \u00a72 says:</p>\n<blockquote>\n<p id=\"so_3025997_3026237_1\"><strong>A declaration is a definition unless</strong> it declares a function without specifying the function's body (8.4), it contains the extern specifier (7.1.1) or a linkage-specification (7.5) and neither an initializer nor a functionbody, <strong>it declares a static data member in a class definition</strong> (9.4), it is a class name declaration (9.1), it is an opaque-enum-declaration (7.2), or it is a typedef declaration (7.1.3), a using-declaration (7.3.3), or a using-directive (7.3.4).</p>\n</blockquote>\n", "OwnerUserId": "252000", "PostTypeId": "2", "Id": "3026237", "Score": "2", "CreationDate": "2010-06-11T21:02:34.997", "LastActivityDate": "2010-06-11T21:02:34.997"}, "3026024": {"ParentId": "3025997", "CommentCount": "3", "Body": "<p>Not just int's.  But you can't define the value in the class declaration.  If you have:</p>\n<pre><code>class classname\n{\n    public:\n       static int const N;\n}\n</code></pre>\n<p>in the .h file then you must have:</p>\n<pre><code>int const classname::N = 10;\n</code></pre>\n<p>in the .cpp file.</p>\n", "OwnerUserId": "350821", "PostTypeId": "2", "Id": "3026024", "Score": "10", "CreationDate": "2010-06-11T20:30:30.353", "LastActivityDate": "2010-06-11T20:30:30.353"}, "3025997": {"CommentCount": "3", "CreationDate": "2010-06-11T20:26:48.840", "PostTypeId": "1", "AcceptedAnswerId": "3026054", "LastEditorUserId": "1307166", "LastActivityDate": "2017-09-11T23:38:15.530", "LastEditDate": "2015-03-25T15:12:05.143", "ViewCount": "65723", "FavoriteCount": "25", "Title": "Defining static const integer members in class definition", "Id": "3025997", "Score": "78", "Body": "<p>My understanding is that C++ allows static const members to be defined inside a class so long as it's an integer type.</p>\n<p>Why, then, does the following code give me a linker error?</p>\n<pre><code>#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\n\nclass test\n{\npublic:\n    static const int N = 10;\n};\n\nint main()\n{\n    std::cout &lt;&lt; test::N &lt;&lt; \"\\n\";\n    std::min(9, test::N);\n}\n</code></pre>\n<p>The error I get is:</p>\n<pre><code>test.cpp:(.text+0x130): undefined reference to `test::N'\ncollect2: ld returned 1 exit status\n</code></pre>\n<p>Interestingly, if I comment out the call to std::min, the code compiles and links just fine (even though test::N is also referenced on the previous line).</p>\n<p>Any idea as to what's going on?</p>\n<p>My compiler is gcc 4.4 on Linux.</p>\n", "Tags": "<c++><static><declaration><definition>", "OwnerUserId": "141719", "AnswerCount": "7"}, "bq_ids": {"n4140": {"so_3025997_3026237_0": {"section_id": 5907, "quality": 0.5714285714285714, "length": 4}, "so_3025997_3026237_1": {"section_id": 7034, "quality": 0.8484848484848485, "length": 28}}, "n3337": {"so_3025997_3026237_0": {"section_id": 5679, "quality": 0.5714285714285714, "length": 4}, "so_3025997_3026237_1": {"section_id": 6780, "quality": 0.8484848484848485, "length": 28}}, "n4659": {"so_3025997_3026237_0": {"section_id": 7389, "quality": 0.5714285714285714, "length": 4}, "so_3025997_3026237_1": {"section_id": 8531, "quality": 0.8484848484848485, "length": 28}}}});