post_cb({"21739994": {"ParentId": "21739621", "CommentCount": "0", "Body": "<p>As I said in my comment, for built-in types, I don't think it matters. See <a href=\"https://stackoverflow.com/questions/15745359/impact-of-returning-const-value-types-in-c11-on-move-semantics\">Impact of returning const value types in C++11 on move semantics</a> for why:</p>\n<blockquote>\n<p id=\"so_21739621_21739994_0\">An expression calling a function that returns by value is a prvalue.\n  However, there are no const prvalues of non-class non-array type\n  (\u00a75/6):</p>\n<blockquote>\n<p id=\"so_21739621_21739994_3\">If a prvalue initially has the type \u201ccv T,\u201d where T is a\n    cv-unqualified non-class, non-array type, the type of the expression\n    is adjusted to T prior to any further analysis.</p>\n</blockquote>\n<p id=\"so_21739621_21739994_2\">This means that there's no difference between your two definitions of\n  the function. Whether it returns a const int or just an int is\n  irrelevant because the expression is never const.</p>\n</blockquote>\n", "Id": "21739994", "PostTypeId": "2", "OwnerDisplayName": "user1508519", "Score": "1", "CreationDate": "2014-02-12T21:24:55.453", "LastActivityDate": "2014-02-12T21:24:55.453"}, "21739753": {"ParentId": "21739621", "CommentCount": "0", "CreationDate": "2014-02-12T21:13:18.000", "OwnerUserId": "2877241", "PostTypeId": "2", "Id": "21739753", "Score": "2", "Body": "<p>I do not see a sense to return <code>const double</code> from the function,</p>\n<p>There could be a sense to define the function as <code>constexpr</code> provided that you need to use its result at compile time.</p>\n<p>In other cases the return type should be defined as simply double.</p>\n", "LastActivityDate": "2014-02-12T21:13:18.000"}, "21739766": {"ParentId": "21739621", "CommentCount": "0", "CreationDate": "2014-02-12T21:13:44.973", "OwnerUserId": "3290955", "PostTypeId": "2", "Id": "21739766", "Score": "2", "Body": "<p>It depends on what you want to do. If you want client code to be able to modify your private xval_ from outside the class, you want to return <code>double&amp;</code>; however, you probably don't want to do that.</p>\n<p>Your other two choices are to return a <code>double</code> or a <code>const double</code>. In this case, they're both the same; you don't get any benefit from adding a <code>const</code> in this case, so you should simply return <code>double</code> because the <code>const</code> is redundant.</p>\n<pre><code>double x() const;\n</code></pre>\n<p>If you had pointers or references, then you might want to consider specifying the <code>const</code> for the return type depending on what you wanted to do. For example:</p>\n<pre><code>const double* xPtr() const;\ndouble* const xPtr() const;\nconst double* const xPtr() const;\n</code></pre>\n<p>Note I did not specify <code>inline</code> anywhere. That's a separate discussion that you didn't ask about in your original post. For this example, you can go either way--include it or omit it--the <code>inline</code> keyword has nothing to do with your original question.</p>\n", "LastActivityDate": "2014-02-12T21:13:44.973"}, "21739621": {"CommentCount": "2", "ViewCount": "64", "CreationDate": "2014-02-12T21:07:05.897", "LastActivityDate": "2014-02-12T21:24:55.453", "Title": "Should I use const return type in a simple access member function?", "AcceptedAnswerId": "21739766", "PostTypeId": "1", "Id": "21739621", "Score": "1", "Body": "<p>I am still not quite sure about the \"move semantics\". In a simple point class,</p>\n<pre><code>class point\n{\n\nprivate:\n\n    double xval_, yval_, zval_;\n\n\npublic:\n    // Constructs\n    // ...\n\n\npublic:\n\n    // Access (return xval_)\n    inline const double x() const;\n\n    // Edit\n    inline double&amp; x();\n};\n</code></pre>\n<p>Should I use <code>inline const double x() const;</code> or <code>inline double x() const;</code> in my Access function?</p>\n", "Tags": "<c++><move-semantics>", "OwnerUserId": "650718", "AnswerCount": "5"}, "21739792": {"ParentId": "21739621", "CommentCount": "0", "CreationDate": "2014-02-12T21:14:43.313", "OwnerUserId": "602372", "PostTypeId": "2", "Id": "21739792", "Score": "1", "Body": "<p>When returning by value, it's usually best not to return a const. Reason being: as long as your consumer doesn't change your state, you really don't care what it does with it.\nAlso, (excluding const cast) the client can always bind to a non-const by copying - but why would you want to force it to do that?</p>\n", "LastActivityDate": "2014-02-12T21:14:43.313"}, "21739846": {"ParentId": "21739621", "CommentCount": "0", "CreationDate": "2014-02-12T21:17:06.197", "OwnerUserId": "198164", "PostTypeId": "2", "Id": "21739846", "Score": "1", "Body": "<p>It's good to define const access functions (if you're able), because it allows a user of the class with a const reference to access the value (without having to copy away the const reference).</p>\n<p>For the function above, the form:</p>\n<pre><code>inline const double x();\n</code></pre>\n<p>doesn't really make much sense when returning a non-pointer or reference type. Typically you reserve the const modifier when returning a pointer or a reference.</p>\n", "LastActivityDate": "2014-02-12T21:17:06.197"}, "bq_ids": {"n4140": {"so_21739621_21739994_1": {"section_id": 5939, "quality": 1.0, "length": 14}, "so_21739621_21739994_3": {"section_id": 5939, "quality": 1.0, "length": 14}}, "n4659": {"so_21739621_21739994_1": {"section_id": 7423, "quality": 1.0, "length": 14}, "so_21739621_21739994_3": {"section_id": 7423, "quality": 1.0, "length": 14}}}});