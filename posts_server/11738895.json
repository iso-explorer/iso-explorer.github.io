post_cb({"11738895": {"LastActivityDate": "2017-11-12T14:50:26.473", "ViewCount": "679", "FavoriteCount": "2", "Id": "11738895", "AcceptedAnswerId": "11739012", "Score": "1", "Title": "Are these stack allocation or heap allocation?", "LastEditorUserId": "2757035", "CommentCount": "4", "Body": "<blockquote>\n<p id=\"so_11738895_11738895_0\"><strong>Possible Duplicate:</strong><br>\n<a href=\"https://stackoverflow.com/questions/426737/does-this-type-of-memory-get-allocated-on-the-heap-or-the-stack\">Does this type of memory get allocated on the heap or the stack?</a> </br></p>\n</blockquote>\n<pre><code>class foo{\nprivate:\nint bar;\nconstructors and other members here...\n}\n</code></pre>\n<p>If i create an instance of <code>foo</code> using the new operator where it will be created?</p>\n<p>Heap i guess but where does my <code>int bar;</code> get created, stack or heap?</p>\n<p>And if my <code>bar</code> wasn't a primitive data type but another object created like <code>this-&gt;bar=bar();</code>, where would it be created?</p>\n", "Tags": "<c++><memory-management><stack><heap>", "CreationDate": "2012-07-31T11:17:41.463", "LastEditDate": "2017-11-12T14:50:26.473", "ClosedDate": "2012-07-31T20:55:21.153", "PostTypeId": "1", "AnswerCount": "3", "OwnerUserId": "1180619"}, "11739023": {"CommentCount": "0", "CreationDate": "2012-07-31T11:23:53.967", "Body": "<p>Any automatic (not created with <code>new</code>) object/value is created inside its container object. If they are independent, they are created in the stack.</p>\n<p>In this case, <code>bar</code> will be created inside its container object, which is the <code>foo</code> instance that was created in the heap. So <code>bar</code> will go to the heap, inside the <code>foo</code> instance.</p>\n", "PostTypeId": "2", "ParentId": "11738895", "Id": "11739023", "LastActivityDate": "2012-07-31T11:23:53.967", "Score": "0", "OwnerUserId": "25824"}, "11738915": {"LastActivityDate": "2012-07-31T11:28:44.337", "CommentCount": "0", "Body": "<p>Since you have created <code>foo</code> in the heap all the member variables primitive/non-primitive will be in the heap too.</p>\n<p>Case 1:</p>\n<pre><code>Foo *obj = new Foo();\n</code></pre>\n<p>bar is on the heap:</p>\n<p>Case 2:</p>\n<pre><code>Foo obj ;\n</code></pre>\n<p>bar is on the stack:</p>\n<p>according to the standard</p>\n<blockquote>\n<p id=\"so_11738895_11738915_0\">3.7.4 Duration of sub-objects [basic.stc.inherit]</p>\n<p id=\"so_11738895_11738915_1\">The storage duration of member subobjects, base class subobjects and\n  array elements is that of their complete object (1.8).</p>\n</blockquote>\n", "PostTypeId": "2", "LastEditDate": "2012-07-31T11:28:44.337", "ParentId": "11738895", "Id": "11738915", "OwnerUserId": "462467", "Score": "1", "CreationDate": "2012-07-31T11:18:29.010", "LastEditorUserId": "462467"}, "11739012": {"CommentCount": "0", "CreationDate": "2012-07-31T11:23:26.307", "Body": "<p>Read  about how class instances are constructed in the memory. <strong><a href=\"http://tnvbalaji.com/2011/09/19/memory-layout-of-a-class-c-object/\" rel=\"nofollow\">Simple explanation here</a></strong>.</p>\n<p>The members are a part of the class instance's chunk in memory. So where ever that class instance is allocated, the whole chunk is allocated, including the members.</p>\n", "PostTypeId": "2", "ParentId": "11738895", "Id": "11739012", "LastActivityDate": "2012-07-31T11:23:26.307", "Score": "1", "OwnerUserId": "536086"}, "bq_ids": {"n4140": {"so_11738895_11738915_1": {"length": 12, "quality": 0.9230769230769231, "section_id": 7188}}, "n3337": {"so_11738895_11738915_1": {"length": 12, "quality": 0.9230769230769231, "section_id": 6932}}}});