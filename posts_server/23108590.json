post_cb({"23108966": {"ParentId": "23108590", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>GCC is right here, scoped enumeration, aka <code>enum class</code> are not implicitly converting to int or anything else. By extension, they do not have a built-in <code>operator~</code>, so you need to cast explicitly :</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;type_traits&gt;\n\nenum class E { val };\n\nint main () { \n    std::cout &lt;&lt; ~std::underlying_type&lt;E&gt;::type(E::val);\n} \n</code></pre>\n<p>By removing your <code>struct D</code> and the global <code>operator~</code>, clang give the good error. It is a bug clearly as <code>operator~(D)</code> is not a candidate in the first place :</p>\n<pre><code>main.cpp:17:35: error: invalid argument type 'E' to unary expression\nstatic const int value = sizeof ~make&lt;Rhs&gt;();\n</code></pre>\n<p>The rules about collecting the overloads \u00a7 13.3.1.2 :</p>\n<blockquote>\n<p id=\"so_23108590_23108966_0\">For a unary operator @ with an operand of a type whose cv-unqualified\n  version is T1, [...], three sets of candidate functions, designated\n  member candidates, nonmember\n      candidates and built-in candidates, are constructed as follows:</p>\n</blockquote>\n<p>And the finish :</p>\n<blockquote>\n<p id=\"so_23108590_23108966_1\">However, if no operand has a class type, only those non-member\n  functions in the lookup set that have a first parameter of type T1 or\n  reference to (possibly cv-qualified) T1\u201d, when T1 is an enumeration\n  type, [...], are candidate functions.</p>\n</blockquote>\n<p>To summarize, because E is of non class type, only free function operators taking a E or a reference to E are considered.</p>\n", "OwnerUserId": "2694444", "LastEditorUserId": "2694444", "LastEditDate": "2014-04-16T13:31:57.373", "Id": "23108966", "Score": "8", "CreationDate": "2014-04-16T12:05:01.213", "LastActivityDate": "2014-04-16T13:31:57.373"}, "bq_ids": {"n4140": {"so_23108590_23108966_1": {"section_id": 584, "quality": 1.0, "length": 21}, "so_23108590_23108966_0": {"section_id": 584, "quality": 0.8095238095238095, "length": 17}}, "n3337": {"so_23108590_23108966_1": {"section_id": 574, "quality": 1.0, "length": 21}, "so_23108590_23108966_0": {"section_id": 574, "quality": 0.8095238095238095, "length": 17}}, "n4659": {"so_23108590_23108966_1": {"section_id": 607, "quality": 0.9047619047619048, "length": 19}, "so_23108590_23108966_0": {"section_id": 607, "quality": 0.8095238095238095, "length": 17}}}, "23108590": {"CommentCount": "5", "AcceptedAnswerId": "23108966", "PostTypeId": "1", "LastEditorUserId": "3540970", "CreationDate": "2014-04-16T11:49:49.237", "LastActivityDate": "2014-04-16T14:33:57.733", "LastEditDate": "2014-04-16T14:33:57.733", "ViewCount": "551", "FavoriteCount": "2", "Title": "enum class and global operator~ overloading", "Id": "23108590", "Score": "6", "Body": "<p>\nConsider the following code:</p>\n<pre class=\"lang-cpp prettyprint-override\"><code>struct D\n{\n  template &lt;class T&gt; D (T);\n};\nint operator~(const D &amp;);\n\ntemplate &lt;typename T&gt; T &amp;make ();\n\ntemplate &lt;typename Rhs&gt; struct H\n{\n  static const int value = sizeof ~make&lt;Rhs&gt;();\n};\n\nenum class E;\n\nint main () { return H&lt;E&gt;::value; }\n</code></pre>\n<p>Is this valid C++11?</p>\n<p>Clang accepts it. Gcc gives an error:</p>\n<pre class=\"lang-cpp prettyprint-override\"><code> % gcc -std=c++11 b.ii\nb.ii: In instantiation of \u2018const int H&lt;E&gt;::value\u2019:\nb.ii:16:28:   required from here\nb.ii:11:35: error: no match for \u2018operator~\u2019 (operand type is \u2018E\u2019)\n   static const int value = sizeof ~make&lt;Rhs&gt;();\n</code></pre>\n<p>The code was reduced from a gcc bug report: \n    <a href=\"http://gcc.gnu.org/bugzilla/show_bug.cgi?id=60852\" rel=\"nofollow\">http://gcc.gnu.org/bugzilla/show_bug.cgi?id=60852</a> </p>\n<p>This is the unreduced test case:</p>\n<pre class=\"lang-cpp prettyprint-override\"><code>#include &lt;boost/type_traits.hpp&gt;\n#include &lt;iostream&gt;\n\nenum class E {};\n\nint main()\n{ std::cout &lt;&lt; boost::has_complement&lt;E&gt;() &lt;&lt; std::endl; }\n</code></pre>\n", "Tags": "<c++11>", "OwnerUserId": "3540970", "AnswerCount": "1"}});