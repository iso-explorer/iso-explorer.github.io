post_cb({"2549011": {"CommentCount": "1", "Body": "<p>Did you try something like this?</p>\n<pre><code>typedef Tem&lt;FILE*,((FILE*)NULL)&gt; TemFile;\n</code></pre>\n<p>Perhaps it's trying to figure out the type of NULL.</p>\n", "CreationDate": "2010-03-30T21:51:32.323", "ParentId": "2548887", "Id": "2549011", "LastActivityDate": "2010-03-30T21:51:32.323", "PostTypeId": "2", "Score": "-1", "OwnerUserId": "79737"}, "bq_ids": {"n4140": {"so_2548887_2549144_0": {"length": 5, "quality": 1.0, "section_id": 87}, "so_2548887_2549144_1": {"length": 32, "quality": 0.9142857142857143, "section_id": 91}}, "n3337": {"so_2548887_2549144_0": {"length": 5, "quality": 1.0, "section_id": 82}, "so_2548887_2549144_1": {"length": 32, "quality": 0.9142857142857143, "section_id": 86}}}, "2548887": {"CreationDate": "2010-03-30T21:30:03.290", "ViewCount": "251", "Id": "2548887", "AcceptedAnswerId": "2549144", "Score": "2", "Title": "0 not a valid FILE* when provided as a template argument", "CommentCount": "9", "Body": "<p>The following code</p>\n<pre><code>#include &lt;stdio.h&gt;\ntemplate &lt;typename T, T v&gt; class Tem\n{\n    T t;\n    Tem()\n    {\n        t = v;\n    }\n};\n\ntypedef Tem&lt;FILE*,NULL&gt; TemFile;\n</code></pre>\n<p>when compiled in a .mm file (Objective C++) by Xcode on MacOS X, throws the following error:</p>\n<p>error: could not convert template argument '0' to 'FILE*'.</p>\n<p>What's going on, please? The code in question compiled fine under MSVC. Since when is the 0 constant not a valid pointer to anything? Is this an artifact of Objective C++ (as opposed to vanilla C++)?</p>\n", "Tags": "<c++><xcode><objective-c++>", "LastActivityDate": "2010-03-30T23:00:14.490", "PostTypeId": "1", "AnswerCount": "2", "OwnerUserId": "219159"}, "2549144": {"LastActivityDate": "2010-03-30T23:00:14.490", "CommentCount": "2", "Body": "<p>According to the standard, you are out of luck. There is no way to initialize a pointer argument to anything besides the address-of a global. \u00a714.3.2/1:</p>\n<blockquote>\n<p id=\"so_2548887_2549144_0\">A template-argument for a non-type,\n  non-template template-parameter shall\n  be one of:</p>\n<ul>\n<li>an integral constant-expression of integral or enumeration type; or</li>\n<li>the name of a non-type template-parameter; or</li>\n<li>the address of an object or function with external linkage, including\n  function templates and function\n  template-ids but excluding non-static\n  class members, <strong>expressed as &amp;\n  id-expression where the &amp; is optional</strong>\n  if the name refers to a function or\n  array, or if the corresponding\n  template-parameter is a reference; or</li>\n<li>a pointer to member expressed as described in 5.3.1 .</li>\n</ul>\n</blockquote>\n<p>\u00a714.3.2/5:</p>\n<blockquote id=\"so_2548887_2549144_1\">\n<ul>\n<li>for a non-type template-parameter of\n  type pointer to object, qualification\n  conversions (4.4) and the\n  array-to-pointer conversion (4.2) are\n  applied. [Note: In particular, neither\n  the null pointer conversion (4.10) nor\n  the derived-to-base conversion (4.10)\n  are applied. Although 0 is a valid\n  template-argument for a non-type\n  template-parameter of integral type,\n  it is not a valid template-argument\n  for a non-type template-parameter of\n  pointer type. ]</li>\n</ul>\n</blockquote>\n<p>However, Comeau accepts this invalid workaround:</p>\n<pre><code>typedef Tem&lt;FILE*, (FILE *) NULL &gt; TemFile;\n</code></pre>\n<p>And this code has a slim chance of compliance: I can't find where the standard specifically says that a default expression is used verbatim in place of a a missing argument, and I can't find a matching known defect. Anyone have a reference?</p>\n<pre><code>#include &lt;stdio.h&gt;\ntemplate &lt;typename T, T *v = (T*) 0&gt; class Tem\n{\n    T t;\n    Tem()\n    {\n        t = v;\n    }\n};\n\ntypedef Tem&lt;FILE&gt; TemFile;\n</code></pre>\n<p>For more portability, you might consider creating a bogus <code>FILE FILE_NULL;</code>, pass <code>&amp;FILE_NULL</code>, and test for pointer-equality with that instead of zero.</p>\n", "CreationDate": "2010-03-30T22:20:18.730", "LastEditDate": "2010-03-30T23:00:14.490", "ParentId": "2548887", "Id": "2549144", "LastEditorUserId": "153285", "PostTypeId": "2", "Score": "1", "OwnerUserId": "153285"}});