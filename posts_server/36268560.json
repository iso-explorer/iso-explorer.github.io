post_cb({"36268747": {"ParentId": "36268560", "PostTypeId": "2", "CommentCount": "2", "CreationDate": "2016-03-28T18:38:07.137", "Score": "2", "LastEditorUserId": "576911", "LastEditDate": "2016-03-28T18:59:12.853", "Id": "36268747", "OwnerUserId": "576911", "Body": "<blockquote>\n<p id=\"so_36268560_36268747_0\">Why does the following code cause an error?</p>\n</blockquote>\n<p>There are two viable choices for the <code>function</code> overloads.  Both involve a conversion from the supplied argument, and neither conversion is better than the other:</p>\n<pre><code>error: call to 'function' is ambiguous\n    constexpr static const bool value = function&lt;ToCheckFor&gt;(nullptr);\n                                        ^~~~~~~~~~~~~~~~~~~~\ntest.cpp:36:13: note: in instantiation of template class 'InterfaceCheck&lt;Something&gt;' requested here\n    cout &lt;&lt; InterfaceCheck&lt;Something&gt;::value &lt;&lt; endl;\n            ^\ntest.cpp:17:27: note: candidate function [with T = Something]\n    static constexpr bool function(__attribute__((unused)) void* ptr) { \n                          ^\ntest.cpp:21:27: note: candidate function [with T = Something]\n    static constexpr bool function (__attribute__((unused))  \n</code></pre>\n<p>Fixing with <code>function(...)</code> works because the conversion from anything to <code>...</code> is always a \"worse\" match than anything else (but still legal).  It is a wonderful trick once you know it.</p>\n<p>From 13.3.3.2 Ranking implicit conversion sequences [over.ics.rank]:</p>\n<blockquote>\n<ol start=\"2\">\n<li><p id=\"so_36268560_36268747_1\">When comparing the basic forms of implicit conversion sequences (as defined in 13.3.3.1)</p>\n<ul>\n<li><p id=\"so_36268560_36268747_2\">a standard conversion sequence (13.3.3.1.1) is a better conversion sequence than a user-defined conversion sequence or an ellipsis\n  conversion sequence, and</p></li>\n<li><p id=\"so_36268560_36268747_3\">a user-defined conversion sequence (13.3.3.1.2) is a better conversion sequence than an ellipsis conversion sequence\n  (13.3.3.1.3).</p></li>\n</ul></li>\n</ol>\n</blockquote>\n<p><strong>History</strong></p>\n<p>I first learned this technique from <a href=\"http://erdani.com/index.php/books/modern-c-design/\" rel=\"nofollow\">Modern C++ Design</a>, section 2.7.  I do not know for sure if this is where it was invented.  But that isn't a bad guess.  The book is now 15 years old, and it is still a good read.</p>\n", "LastActivityDate": "2016-03-28T18:59:12.853"}, "36268560": {"CommentCount": "0", "ViewCount": "88", "PostTypeId": "1", "LastEditorUserId": "5501675", "CreationDate": "2016-03-28T18:27:06.973", "LastActivityDate": "2016-03-28T18:59:12.853", "Title": "Error with SFINAE", "AcceptedAnswerId": "36268747", "LastEditDate": "2016-03-28T18:35:12.460", "Id": "36268560", "Score": "2", "Body": "<p>Why does the following code cause an error?  I would think the compiler just picks the appropriate overload here?</p>\n<pre><code>#include &lt;iostream&gt;\nusing std::cout;\nusing std::endl;\n\ntemplate &lt;typename ToCheckFor&gt;\nstruct InterfaceCheck {\n\n    // used by the constexpr function, the function will pass in a pointer to\n    // a type with the required types\n    template &lt;typename _ToCheckFor, void (_ToCheckFor::*) ()&gt;\n    struct InterfaceCheckImplTag {};\n\n    // used to check for the presence of a function print()\n    // template &lt;typename T&gt;\n    // static constexpr bool function(__attribute__((unused)) void* ptr) {}\n    template &lt;typename T&gt;\n    static constexpr bool function(__attribute__((unused)) void* ptr) { \n        return false; \n    }\n    template &lt;typename T&gt;\n    static constexpr bool function (__attribute__((unused))  \n         InterfaceCheckImplTag&lt;T, &amp;T::print&gt;* ptr) { \n\n        return true; \n    }\n\n    constexpr static const bool value = function&lt;ToCheckFor&gt;(nullptr);\n};\n\nstruct Something {\n    void print() { cout &lt;&lt; \"Something::print()\" &lt;&lt; endl; }\n};\n\nint main() {\n\n    cout &lt;&lt; InterfaceCheck&lt;Something&gt;::value &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>\n<p>Why does replacing the <code>void*</code> argument with an ellipsis make the code work as expected?  So the following code works as expected </p>\n<pre><code>#include &lt;iostream&gt;\nusing std::cout;\nusing std::endl;\n\ntemplate &lt;typename ToCheckFor&gt;\nstruct InterfaceCheck {\n\n    // used by the constexpr function, the function will pass in a pointer to\n    // a type with the required types\n    template &lt;typename _ToCheckFor, void (_ToCheckFor::*) ()&gt;\n    struct InterfaceCheckImplTag {};\n\n    // used to check for the presence of a function print()\n    // template &lt;typename T&gt;\n    // static constexpr bool function(__attribute__((unused)) void* ptr) {}\n    template &lt;typename T&gt;\n    static constexpr bool function(...) { \n        return false; \n    }\n    template &lt;typename T&gt;\n    static constexpr bool function (__attribute__((unused))  \n         InterfaceCheckImplTag&lt;T, &amp;T::print&gt;* ptr) { \n\n        return true; \n    }\n\n    constexpr static const bool value = function&lt;ToCheckFor&gt;(nullptr);\n};\n\nstruct Something {\n    void print() { cout &lt;&lt; \"Something::print()\" &lt;&lt; endl; }\n};\n\nint main() {\n\n    cout &lt;&lt; InterfaceCheck&lt;Something&gt;::value &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>\n", "Tags": "<c++><c++11><c++14><template-meta-programming><sfinae>", "OwnerUserId": "5501675", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_36268560_36268747_1": {"section_id": 638, "quality": 0.8888888888888888, "length": 8}, "so_36268560_36268747_3": {"section_id": 638, "quality": 0.8333333333333334, "length": 10}, "so_36268560_36268747_2": {"section_id": 638, "quality": 0.9230769230769231, "length": 12}}, "n3337": {"so_36268560_36268747_1": {"section_id": 628, "quality": 0.8888888888888888, "length": 8}, "so_36268560_36268747_3": {"section_id": 628, "quality": 0.8333333333333334, "length": 10}, "so_36268560_36268747_2": {"section_id": 628, "quality": 0.9230769230769231, "length": 12}}, "n4659": {"so_36268560_36268747_1": {"section_id": 666, "quality": 0.8888888888888888, "length": 8}, "so_36268560_36268747_3": {"section_id": 666, "quality": 0.8333333333333334, "length": 10}, "so_36268560_36268747_2": {"section_id": 666, "quality": 0.9230769230769231, "length": 12}}}});