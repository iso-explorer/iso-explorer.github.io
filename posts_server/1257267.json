post_cb({"1257267": {"ViewCount": "1008", "Body": "<p>I'm having trouble deciding whether not this code should compile or if just both compilers I tried have a bug (GCC 4.2 and Sun Studio 12). In general, if you have a static class member you declare in a header file you are required to define it in some source file. However, an exception is made in the standard for static const integrals. For example, this is allowed:</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct A {\n    static const int x = 42;\n};\n</code></pre>\n<p>With no need to add a definition of x outside the class body somewhere. I'm trying to do the same thing, but I also take the address of x and pass it to a template. This results in a linker error complaining about a lack of definition. The below example doesn't link (missing a definition for A::x) even when it's all in the same source file:</p>\n<pre><code>#include &lt;iostream&gt;\n\ntemplate&lt;const int* y&gt;\nstruct B {\n    static void foo() { std::cout &lt;&lt; \"y: \" &lt;&lt; y &lt;&lt; std::endl; }\n};\n\nstruct A {\n    static const int x = 42;\n    typedef B&lt;&amp;x&gt; fooness;\n};\n\nint main()\n{\n    std::cout &lt;&lt; A::x &lt;&lt; std::endl;\n    A::fooness::foo();\n}\n</code></pre>\n<p>Which is bizarre since it works as long as I don't pass the address to a template. Is this a bug or somehow technically standards compliant?</p>\n<p>Edit: I should point out that &amp;A::x is <em>not</em> a runtime value. Memory is set aside for statically allocated variables at compile time.</p>\n", "AcceptedAnswerId": "1257366", "Title": "Is it legal C++ to pass the address of a static const int with no definition to a template?", "CreationDate": "2009-08-10T21:18:29.857", "Id": "1257267", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2009-08-10T21:30:53.217", "LastEditorUserId": "50385", "LastActivityDate": "2009-08-10T21:40:31.093", "Score": "2", "OwnerUserId": "50385", "Tags": "<c++><templates><static><standards><const>", "AnswerCount": "4"}, "1257319": {"Id": "1257319", "PostTypeId": "2", "Body": "<p>Interesting, it compiled fine for me on VS 2008. I kind of assumed that the error came from the typedef because at compile time when it tries to compile 'B' with &amp;x as the template type it doesn't then know where the address of x will be. Still... it compiles and gives a reasonable output.</p>\n", "LastActivityDate": "2009-08-10T21:28:39.853", "CommentCount": "0", "CreationDate": "2009-08-10T21:28:39.853", "ParentId": "1257267", "Score": "0", "OwnerUserId": "132961"}, "bq_ids": {"n4140": {"so_1257267_1257366_0": {"length": 28, "quality": 0.7567567567567568, "section_id": 5908}}, "n3337": {"so_1257267_1257366_0": {"length": 28, "quality": 0.7567567567567568, "section_id": 5680}}, "n4659": {"so_1257267_1257366_0": {"length": 24, "quality": 0.6486486486486487, "section_id": 7390}}}, "1257366": {"Id": "1257366", "PostTypeId": "2", "Body": "<p>To be a well formed program you stil have to have the defintion of the static variable (without an initializer in this case) if it actually gets used, and taking the address counts as a use:</p>\n<ul>\n<li>C++2003 Standard: 9.4.2 Static data members Paragraph 4 (bold added)</li>\n</ul>\n<blockquote>\n<p id=\"so_1257267_1257366_0\">If a static data member is of const\n  integral or const enumeration type,\n  its declaration in the class\n  definition can specify a\n  constant-initializer which shall be an\n  integral constant expression (5.19).\n  In that case, the member can appear in\n  integral constant expressions. <strong>The\n  member shall still be defined in a\n  namespace scope if it is used in the\n  program and the namespace scope\n  definition shall not contain an\n  initializer</strong></p>\n</blockquote>\n", "LastActivityDate": "2009-08-10T21:40:31.093", "CommentCount": "2", "CreationDate": "2009-08-10T21:40:31.093", "ParentId": "1257267", "Score": "6", "OwnerUserId": "12711"}, "1257326": {"Id": "1257326", "PostTypeId": "2", "Body": "<p>I could see how one might expect this to compile anyway.</p>\n<p>The address of a static const isn't really a runtime value and can be fully resolved at link time.</p>\n", "LastActivityDate": "2009-08-10T21:30:30.783", "CommentCount": "1", "CreationDate": "2009-08-10T21:30:30.783", "ParentId": "1257267", "Score": "0", "OwnerUserId": "14768"}, "1257302": {"Id": "1257302", "PostTypeId": "2", "Body": "<p>You are trying to pass a runtime value to a template, that's not possible. The only allowed template parameters are types (class/typename) or integral constant values (int/bool/etc). </p>\n", "LastActivityDate": "2009-08-10T21:26:18.640", "CommentCount": "3", "CreationDate": "2009-08-10T21:26:18.640", "ParentId": "1257267", "Score": "1", "OwnerUserId": "5811"}});