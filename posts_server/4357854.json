post_cb({"4357878": {"Id": "4357878", "PostTypeId": "2", "Body": "<p>Change</p>\n<pre>\n    Entity&lt;T*&gt; pPrev;\n    Entity&lt;T*&gt; pNext;\n</pre>\n<p>to</p>\n<pre>\n    Entity&lt;T&gt; *pPrev;\n    Entity&lt;T&gt; *pNext;\n</pre>\n<p>Your type definition is recursive...</p>\n", "LastActivityDate": "2010-12-05T07:48:04.420", "CommentCount": "0", "CreationDate": "2010-12-05T07:48:04.420", "ParentId": "4357854", "Score": "1", "OwnerUserId": "490784"}, "4357873": {"Id": "4357873", "PostTypeId": "2", "Body": "<p>Alright. I'm explaining you the problem you're facing. But first thing first. You said:</p>\n<blockquote>\n<p id=\"so_4357854_4357873_0\">I wrote a template class which is\n  giving compilation error</p>\n</blockquote>\n<p>First of all, as far as C++ is concerned, <strong>there is no such thing as a \"template class,\" there is only a \"class template.\"</strong> The way to read that phrase is \"a template for a class,\" as opposed to a \"function template,\" which is \"a template for a function.\" Again: classes do not define templates, templates define classes (and functions).*  Quoted from <a href=\"https://stackoverflow.com/questions/879535/what-is-the-difference-between-a-template-class-and-a-class-template\">here</a>.</p>\n<p>Now, lets see the error:</p>\n<blockquote>\n<p id=\"so_4357854_4357873_1\">fatal error C1202: recursive type or\n  function dependency context too\n  complex</p>\n</blockquote>\n<p>The error says it all. <code>$14.7.1</code> from the Standard explains the cause of your problem very well, giving you even an example which is very much close to what you're doing. So I don't even need to write a single word of my own. Here is <code>$14.7.1</code></p>\n<blockquote>\n<p id=\"so_4357854_4357873_2\">4 <strong>There is an implementation-defined\n  quantity that specifies the limit on\n  the total depth of recursive\n  instantiations</strong>, which\n      could involve more than one template. <em>The result of an infinite\n  recursion in instantiation is\n  undefined.</em> [ Example:</p>\n<pre><code>template &lt; class T &gt; class X {\nX&lt;T &gt;* p; // OK\nX&lt;T*&gt; a; //implicit generation of X&lt;T&gt; requires\n         //the implicit instantiation of X&lt;T*&gt; which requires\n         //the implicit instantiation of X&lt;T**&gt; which ...\n};\n</code></pre>\n<p id=\"so_4357854_4357873_3\">\u2014end example ]</p>\n</blockquote>\n<p>Please read the comment with <code>X&lt;T*&gt; a</code>, which is pretty much the case with you too. So your problem is not because of recursive function, it's rather because of <strong>recursive instantiation of class template</strong>, causing from these lines:</p>\n<pre><code>  Entity&lt;T*&gt; pPrev;\n  Entity&lt;T*&gt; pNext;\n</code></pre>\n<p>Hope, it solves your problem!</p>\n<hr>\n<p>EDIT : But I'm wondering what are you trying to achieve with <code>Entity&lt;T*&gt; pPrev</code>? It seems its a typo, and you probably wanted to write <code>Entity&lt;T&gt;* pPrev</code>. Same with <code>pNext</code>. Is that so?</p>\n<p>And an advice to improve the design : Use Member Initialization list, instead of Assignment. That is, write your constructor the following way,</p>\n<pre><code>    Entity&lt;T&gt;(const string &amp; name, int size) : EntityName(name), EntitySize(size)\n    {\n       //all assignments moved to initialization list.\n    }\n</code></pre>\n<p>Read this : <a href=\"https://stackoverflow.com/questions/926752/why-should-i-prefer-to-use-member-initialization-list\">Why should I prefer to use member initialization list?</a></p>\n</hr>", "LastEditorUserId": "-1", "LastActivityDate": "2013-03-25T17:15:09.233", "Score": "11", "CreationDate": "2010-12-05T07:46:08.730", "ParentId": "4357854", "CommentCount": "1", "OwnerUserId": "415784", "LastEditDate": "2017-05-23T11:54:07.933"}, "4357854": {"ViewCount": "2153", "Body": "<p>I wrote a template class which is giving compilation error</p>\n<pre><code>template&lt;class T&gt;\nclass Entity\n{\n    string EntityName;\n    int  EntitySize;\n    Entity&lt;T*&gt; pPrev;\n    Entity&lt;T*&gt; pNext;\npublic:\n    Entity&lt;T&gt;(const string &amp; name, int size)\n    {\n        EntityName = name;\n        EntitySize = size;\n    }\n    //member functions\n};\n</code></pre>\n<p>I am using MSVC++ 2008, and the error is :</p>\n<blockquote>\n<p id=\"so_4357854_4357854_0\">fatal error C1202: recursive type or\n  function dependency context too\n  complex</p>\n</blockquote>\n<p>I have not written any recursive function in my class. Then why this error? Please help.</p>\n", "AcceptedAnswerId": "4357873", "Title": "C++ template compilation error - recursive type or function dependency", "CreationDate": "2010-12-05T07:39:14.863", "Id": "4357854", "CommentCount": "0", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2010-12-05T08:08:29.120", "LastEditorDisplayName": "Pointer", "OwnerDisplayName": "Pointer", "LastActivityDate": "2013-03-25T17:15:09.233", "Score": "7", "Tags": "<c++><templates>", "AnswerCount": "5"}, "bq_ids": {"n4140": {"so_4357854_4357873_2": {"length": 20, "quality": 0.9090909090909091, "section_id": 249}}, "n3337": {"so_4357854_4357873_2": {"length": 20, "quality": 0.9090909090909091, "section_id": 240}}, "n4659": {"so_4357854_4357873_2": {"length": 19, "quality": 0.8636363636363636, "section_id": 256}}}, "4357862": {"Id": "4357862", "PostTypeId": "2", "Body": "<p>You have written a recursive type. Entity has other Entity members. You should change the Entity members into a pointer or reference.</p>\n", "LastActivityDate": "2010-12-05T07:43:25.343", "CommentCount": "0", "CreationDate": "2010-12-05T07:43:25.343", "ParentId": "4357854", "Score": "-1", "OwnerUserId": "347240"}, "4357889": {"Id": "4357889", "PostTypeId": "2", "Body": "<p>Your template definition is infinitely recursive. You define template class <code>Entity&lt;T&gt;</code> that contains objects of type <code>Entity&lt;T*&gt;</code> as members. Objects <code>Entity&lt;T*&gt;</code> will, according to the same definition, contain objects of type <code>Entity&lt;T**&gt;</code>. The latter will in turn contain objects of type <code>Entity&lt;T***&gt;</code> and so on, as infinitum. In other words, your infinitely recursive template definition makes no sense. </p>\n<p>Either terminate the recursion or think about what it is you are really trying to implement. I strongly suspect that your member definitions were supposed to have type <code>Entity&lt;T&gt;*</code>, not <code>Entity&lt;T*&gt;</code>.</p>\n", "LastActivityDate": "2010-12-05T07:52:41.857", "CommentCount": "0", "CreationDate": "2010-12-05T07:52:41.857", "ParentId": "4357854", "Score": "2", "OwnerUserId": "187690"}, "4357869": {"Id": "4357869", "PostTypeId": "2", "Body": "<p>Read the error message more closely. The \"too complex\" thing is not a recursive function, it's a recursive <strong>type or function dependency</strong>. The type <code>Entity&lt;T*&gt;</code> depends on the type <code>Entity&lt;T&gt;</code>, recursively. When the compiler tries to generate the code for <code>Entity&lt;int&gt;</code>, it will have to figure out <code>Entity&lt;int*&gt;</code> (in order to implement the <code>pPrev</code> and <code>pNext</code> members), which means it will have to figure out <code>Entity&lt;int**&gt;</code>, etc. - infinitely. That isn't allowed.</p>\n<p>But that's just how the compiler knows something is wrong. It doesn't know what is wrong, because it can't think about how to program. (If it could, it would just write your program for you.)</p>\n<p>The logical error is that <code>Entity&lt;T*&gt;</code> means \"an object which is an Entity with template type pointer-to-T\". What you really wanted, in order to make a linked list, is \"a pointer to an object which is an Entity with template type T\". That is spelled <code>Entity&lt;T&gt;*</code>, with the * outside the angle brackets.</p>\n<p>But the real <strong>problem</strong> is that you are trying to create your own linked list. <strong>Don't do that</strong>. Use the standard library containers. If you're smart enough to use <code>std::string</code>, you should be smart enough to use the containers (<code>std::vector</code>, <code>std::list</code>, etc. - in a sense, <code>std::string</code> is a container, too, albeit a very special-purpose one) too.</p>\n", "LastActivityDate": "2010-12-05T07:44:43.203", "CommentCount": "0", "CreationDate": "2010-12-05T07:44:43.203", "ParentId": "4357854", "Score": "6", "OwnerUserId": "523612"}});