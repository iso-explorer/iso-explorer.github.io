post_cb({"bq_ids": {"n4140": {"so_44484660_44485308_0": {"length": 15, "quality": 1.0, "section_id": 5409}}, "n3337": {"so_44484660_44485308_0": {"length": 15, "quality": 1.0, "section_id": 5204}}, "n4659": {"so_44484660_44485308_0": {"length": 15, "quality": 1.0, "section_id": 6831}}}, "44484660": {"ViewCount": "587", "Body": "<p>In Visual Studio 2017 when creating Linux project and inserting <code>using namespace std;</code> in source code like this:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\nint main()\n{\n    size_t i = 1;\n    string s = to_string(i);\n    cout &lt;&lt; i &lt;&lt; s &lt;&lt; endl;\n    return 0;\n}\n</code></pre>\n<p>VS underlines <code>size_t</code> and says that it is an ambiguous symbol.<a href=\"https://i.stack.imgur.com/a0WPF.png\" rel=\"nofollow noreferrer\"><img alt=\"VS pic 1\" src=\"https://i.stack.imgur.com/a0WPF.png\"/></a></p>\n<p>If I press F12 (<code>Go to definition</code>) it offers me two definition places:</p>\n<p>From <code>stddef.h</code></p>\n<p>(<code>C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\Linux\\include\\usr\\include\\x86_64-linux-gnu\\5\\include\\stddef.h</code>):</p>\n<pre><code>// ...\nnamespace std\n{\n  typedef __SIZE_TYPE__     size_t;\n// ...\n</code></pre>\n<p>And <code>c++config.h</code></p>\n<p>(<code>C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\Linux\\include\\usr\\include\\x86_64-linux-gnu\\c++\\5\\bits\\c++config.h</code>):</p>\n<pre><code>// ...\n#if !(defined (__GNUG__) &amp;&amp; defined (size_t))\ntypedef __SIZE_TYPE__ size_t;\n// ...\n</code></pre>\n<p>It happens only with Linux projects in VS, not with Windows projects.</p>\n<p>Is there any known solution (except for \"do not use <code>using namespace std;</code> :) )?</p>\n<p><strong>Upd</strong>: Reported this problem to Microsoft: <a href=\"https://developercommunity.visualstudio.com/content/problem/67405/ambiguous-symbol-size-t-in-linux-projects-when-usi.html\" rel=\"nofollow noreferrer\">https://developercommunity.visualstudio.com/content/problem/67405/ambiguous-symbol-size-t-in-linux-projects-when-usi.html</a></p>\n<p><strong>Upd2</strong>: Microsoft says that they fixed it, and solution will be in next update: <a href=\"https://developercommunity.visualstudio.com/content/problem/67405/ambiguous-symbol-size-t-in-linux-projects-when-usi.html\" rel=\"nofollow noreferrer\">https://developercommunity.visualstudio.com/content/problem/67405/ambiguous-symbol-size-t-in-linux-projects-when-usi.html</a></p>\n", "Title": "Visual Studio 2017: ambiguous symbol size_t in linux projects", "CreationDate": "2017-06-11T13:56:32.033", "LastActivityDate": "2017-06-14T12:16:34.987", "CommentCount": "27", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2017-06-13T09:06:36.987", "LastEditorUserId": "1555823", "Id": "44484660", "Score": "4", "OwnerUserId": "1555823", "Tags": "<c++><visual-studio-2017>", "AnswerCount": "1"}, "44485308": {"Id": "44485308", "PostTypeId": "2", "Body": "<p>It looks like there is a difference between Microsoft's and other compilers related to typedef in and out of a namespace.</p>\n<p>This source file</p>\n<pre><code>namespace foo { typedef int moo; }\ntypedef int moo;\nusing namespace foo;\nextern moo a;\n</code></pre>\n<p>compiles in g++ and clang++ (no warnings with -Weverything). MSVC rejects it because of an ambiguous symbol.</p>\n<p>This is exactly the situation with <code>size_t</code> in gcc headers. It is  typedefed both in and out of <code>namespace std</code>. This doesn't seem to cause any problems with \ng++.</p>\n<p>Why does this compile in g++ and not in msvc? I guess this is because of different interpretation of 7.1.3/3</p>\n<blockquote>\n<p id=\"so_44484660_44485308_0\">In a given non-class scope, a typedef specifier can be used to redefine the name of any type declared in that scope to refer to the type to which it already refers. </p>\n</blockquote>\n<p>Admittedly the interpretation by g++ is rather loose. The first <code>moo</code> is not declared within <code>namespace ::</code> so the rule seemingly doesn't apply. I cannot find anything else that would permit such a thing.</p>\n<p>To solve the problem, I would patch the header where <code>size_t</code> is defined in the global namespace, and bring the declaration inside <code>namespace std</code> (conditionally, if <code>__cplusplus</code> is defined). But I have not tested it (no VC2017 here) and cannot guarantee it will work. </p>\n<p>I also have no idea why your code is accepted by the actual compiler and only rejected by IntelliSense. I have tested this construction with actual compilers. (<strong>update</strong> to the last sentence: I have had the code tested with, and rejected by, MSVC. I have conducted the tests before realising that \"the actual compiler\" above is in fact gcc and not MSVC).</p>\n", "LastEditorUserId": "775806", "LastActivityDate": "2017-06-14T12:16:34.987", "Score": "5", "CreationDate": "2017-06-11T15:07:31.223", "ParentId": "44484660", "CommentCount": "12", "OwnerUserId": "775806", "LastEditDate": "2017-06-14T12:16:34.987"}});