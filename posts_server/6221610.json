post_cb({"6221635": {"ParentId": "6221610", "PostTypeId": "2", "CommentCount": "9", "Body": "<p>At a minimum, for <code>std::vector&lt;T&gt;</code> to compile, <code>T</code> must be copy-constructible, and copy-assignable.  If you want to use <code>std::vector&lt;T&gt;::vector(int)</code> (or <code>std::vector&lt;T&gt;::resize()</code>), then <code>T</code> must have be default-constructible.  If any of these requirements are not fulfilled, the code will not compile.</p>\n<p>...</p>\n<p>C++03 standard, section 23.1 (discussing containers in general):</p>\n<blockquote>\n<p id=\"so_6221610_6221635_0\">The type of objects stored in these components must meet the requirements of <code>CopyConstructible</code> types (20.1.3), and the additional requirements of <code>Assignable</code> types.</p>\n</blockquote>\n<p>Section 20.1.4:</p>\n<blockquote>\n<p id=\"so_6221610_6221635_1\">20.1.4 Default construction</p>\n<p id=\"so_6221610_6221635_2\">The default constructor is not required.  Certain container class member function signatures specify the default constructor as a default argument. <code>T()</code> shall be a well-defined expression (8.5) if one of those signatures is called using the default argument (8.3.6).</p>\n</blockquote>\n", "OwnerUserId": "129570", "LastEditorUserId": "636019", "LastEditDate": "2011-06-03T00:48:54.973", "Id": "6221635", "Score": "7", "CreationDate": "2011-06-02T23:48:35.090", "LastActivityDate": "2011-06-03T00:48:54.973"}, "6221672": {"ParentId": "6221610", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>What happens, after you fix the error: </p>\n<pre><code>std::vector&lt;Foo&gt; myVector;\nmyVector.reserve(10);\nmyVector.push_back(bar);\n</code></pre>\n<p>is that you have two <code>Foo</code> instances pointing to the same <code>data</code> buffer.  It will probably appear to work for a while, but eventually both objects get destroyed, the destructor is called twice (or more, depending on whether the <code>vector</code> needs to move its content around) and the buffer is double-freed, resulting in undefined behavior (which usually means crash).</p>\n<hr>\n<p>To address the initial content of the <code>vector</code>, it copy-constructs the pattern you pass in as a parameter (this parameter defaults to a default-constructed object, but doesn't have to be):</p>\n<pre><code>std::vector&lt;Foo&gt; myVector(10, bar); // 10 copies of bar\n</code></pre>\n</hr>", "OwnerUserId": "103167", "LastEditorUserId": "103167", "LastEditDate": "2011-06-03T00:00:43.967", "Id": "6221672", "Score": "1", "CreationDate": "2011-06-02T23:55:38.973", "LastActivityDate": "2011-06-03T00:00:43.967"}, "6221610": {"CommentCount": "3", "CreationDate": "2011-06-02T23:45:22.373", "PostTypeId": "1", "AcceptedAnswerId": "6221635", "LastEditorUserId": "492961", "LastActivityDate": "2011-06-03T00:48:54.973", "LastEditDate": "2011-06-03T00:01:12.490", "ViewCount": "784", "FavoriteCount": "1", "Title": "std::vector and Constructors", "Id": "6221610", "Score": "0", "Body": "<p>Which constructor does std::vector call when it is making a new instance of the object it's containing? I am under the impression it calls a default constructor but what if one is not defined or is the compiler doing that for me?</p>\n<p>Particularly in a case as such:</p>\n<pre><code>class Foo\n{\n    public:\n        Foo(int size)\n        {\n            data = new double[size];\n        }\n\n\n        ~Foo()\n        {\n            delete[] data;\n        }\n\n    private:\n        double* data;\n};\n\nstd::vector&lt;Foo&gt; myVector;\nFoo bar(5);\nmyVector.push_back(bar);\n//stuff\n</code></pre>\n<p>How does it know how much memory to allocate when the object has an unknown size until after construction?</p>\n", "Tags": "<c++><object><vector><constructor>", "OwnerUserId": "492961", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_6221610_6221635_2": {"section_id": 6276, "quality": 0.84, "length": 21}}, "n3337": {"so_6221610_6221635_2": {"section_id": 6036, "quality": 0.84, "length": 21}}, "n4659": {"so_6221610_6221635_2": {"section_id": 7783, "quality": 0.84, "length": 21}}}});