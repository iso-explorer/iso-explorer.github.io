post_cb({"28484792": {"ParentId": "28484557", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>What will happen in practice is highly dependent on the implementation.</p>\n<p>In your case your compiler apparently implements that reference as a \"pointer in disguise\". In addition to that, the pointer has external linkage.  I.e. your program exports an external symbol called <code>main</code>, which is actually associated with memory location in data segment occupied by a pointer. The linker, without looking too much into it, records that memory location as the program's entry point. </p>\n<p>Later, trying to use that location as an entry point causes segmentation fault. Firstly, there's no meaningful code at that location. Secondly, a mere attempt to pass control to a location inside a data segment might trigger the \"data execution protection\" mechanisms of your platform.</p>\n<p>By doing this you apparently hoped that the reference will get optimized out, i.e. that <code>main</code> will become just another name for <code>main1</code>. In your case it didn't happen. The reference survived as an independent external object.</p>\n", "OwnerUserId": "187690", "LastEditorUserId": "187690", "LastEditDate": "2015-02-12T18:31:43.867", "Id": "28484792", "Score": "1", "CreationDate": "2015-02-12T18:13:37.857", "LastActivityDate": "2015-02-12T18:31:43.867"}, "28484628": {"ParentId": "28484557", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>That's not a conformant C++ program.  C++ requires that (section 3.6.1)</p>\n<blockquote>\n<p id=\"so_28484557_28484628_0\">A  program  shall  contain  a  global  function  called  <code>main</code></p>\n</blockquote>\n<p>Your program contains a global not-a-function called <code>main</code>, which introduces a name conflict with the <code>main</code> function that is required.</p>\n<hr>\n<p>One justification for this would be it allows the hosted environment to, during program startup, make a function call to <code>main</code>.  It is not equivalent to the source string <code>main(args)</code> which could be a function call, a function pointer dereference, use of <code>operator()</code> on a function object, or construction of an instance of a type <code>main</code>.  Nope, <code>main</code> must be a function.</p>\n<p>One additional thing to note is that the C++ Standard never says what the type of <code>main</code> actually is, and prevents you from observing it.  So implementations can (and do!) rewrite the signature, for example adding any of <code>int argc, char** argv, char** envp</code> that you have omitted.  Clearly it couldn't know to do this for your <code>main1</code> and <code>main2</code>.</p>\n</hr>", "OwnerUserId": "103167", "LastEditorUserId": "103167", "LastEditDate": "2015-02-12T19:52:04.440", "Id": "28484628", "Score": "16", "CreationDate": "2015-02-12T18:04:38.707", "LastActivityDate": "2015-02-12T19:52:04.440"}, "28484730": {"ParentId": "28484557", "PostTypeId": "2", "CommentCount": "6", "Body": "<blockquote>\n<p id=\"so_28484557_28484730_0\">This would be useful if you want to define either of 2 entry-points depending on some macro</p>\n</blockquote>\n<p>No, not really. You should do this:</p>\n<pre><code>int main1();\nint main2();\n\n#ifdef _0_ENTRY\n   int main() { return main1(); }\n#else\n   int main() { return main2(); }\n#endif\n</code></pre>\n", "OwnerUserId": "560648", "LastEditorUserId": "204847", "LastEditDate": "2015-02-12T18:37:16.713", "Id": "28484730", "Score": "7", "CreationDate": "2015-02-12T18:09:55.667", "LastActivityDate": "2015-02-12T18:37:16.713"}, "28484773": {"ParentId": "28484557", "CommentCount": "3", "Body": "<p>This is soon going to become clearly ill-formed, thanks to the resolution of <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_active.html#1886\" rel=\"nofollow\">CWG issue 1886</a>, currently in \"tentatively ready\" status, which adds, among other things, the following to [basic.start.main]:</p>\n<blockquote>\n<p id=\"so_28484557_28484773_0\">A program that declares a variable <code>main</code> at global scope or that\n  declares the name <code>main</code> with C language linkage (in any namespace) is\n  ill-formed.</p>\n</blockquote>\n", "OwnerUserId": "2756719", "PostTypeId": "2", "Id": "28484773", "Score": "3", "CreationDate": "2015-02-12T18:12:38.883", "LastActivityDate": "2015-02-12T18:12:38.883"}, "28485104": {"ParentId": "28484557", "CommentCount": "0", "Body": "<p>Looks like you already answered the question about what happens.</p>\n<p>As far as why, in your code <code>main</code> is a reference/pointer to a function. That is different than a function. And I would expect a segment fault if the code is calling a pointer instead of a function.</p>\n", "OwnerUserId": "522663", "PostTypeId": "2", "Id": "28485104", "Score": "0", "CreationDate": "2015-02-12T18:32:44.977", "LastActivityDate": "2015-02-12T18:32:44.977"}, "28484557": {"CommentCount": "18", "ViewCount": "274", "PostTypeId": "1", "LastEditorUserId": "4031604", "CreationDate": "2015-02-12T18:00:54.963", "LastActivityDate": "2015-02-17T17:34:28.867", "Title": "C++ declare 'main' as a reference to function?", "AcceptedAnswerId": "28484628", "LastEditDate": "2015-02-17T17:34:28.867", "Id": "28484557", "Score": "8", "Body": "<p>What if I define main as a reference to function?</p>\n<pre><code>#include&lt;iostream&gt;\n#include&lt;cstring&gt;\n\nusing namespace std;\n\nint main1()\n{\n    cout &lt;&lt; \"Hello World from main1 function!\" &lt;&lt; endl;\n    return 0;\n}\n\nint (&amp;main)() = main1;\n</code></pre>\n<p>What will happen? I tested in an online compiler with error \"Segmentation fault\":</p>\n<p><a href=\"http://melpon.org/wandbox/permlink/s39eTgnV0jiqR4PL\" rel=\"nofollow\">here</a></p>\n<p>And under VC++ 2013 it will create a program crashing at run-time!</p>\n<p>A code calling the data of the function pointer as a code will be compiled which will immediately crash on launch.</p>\n<p><strong>I would also like an ISO C++ standard quote about this.</strong></p>\n<p><em>The concept will be useful if you want to define either of 2 entry-points depending on some macro like this:</em></p>\n<pre><code>int main1();\n\nint main2();\n\n#ifdef _0_ENTRY\nint (&amp;main)() = main1;\n#else\nint (&amp;main)() = main2;\n#endif\n</code></pre>\n", "Tags": "<c++><reference><main><language-lawyer><iso>", "OwnerUserId": "4031604", "AnswerCount": "5"}, "bq_ids": {"n4140": {"so_28484557_28484628_0": {"section_id": 7145, "quality": 1.0, "length": 5}, "so_28484557_28484773_0": {"section_id": 5522, "quality": 0.5833333333333334, "length": 7}}, "n3337": {"so_28484557_28484628_0": {"section_id": 6889, "quality": 1.0, "length": 5}, "so_28484557_28484773_0": {"section_id": 5308, "quality": 0.5833333333333334, "length": 7}}, "n4659": {"so_28484557_28484773_0": {"section_id": 8648, "quality": 1.0, "length": 12}, "so_28484557_28484628_0": {"section_id": 8646, "quality": 1.0, "length": 5}}}});