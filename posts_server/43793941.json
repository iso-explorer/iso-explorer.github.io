post_cb({"43794043": {"ParentId": "43793941", "CommentCount": "5", "Body": "<p>If you attempt to remove auto type deduction from your code for the problem line, the compiler gives a more appropriate message:</p>\n<pre><code>prog.cc: In function 'int main()':\nprog.cc:18:40: error: conversion from '&lt;unresolved overloaded function \n type&gt;' to non-scalar type 'std::function&lt;void()&gt;' requested\n   std::function&lt;void()&gt; fptr = A&lt;int&gt;::f;\n</code></pre>\n<p>Attempting to resolve <code>A::f</code> has two possible options, how is the compiler to know that you didn't screw up and intend to call the other one.</p>\n", "OwnerUserId": "2946062", "PostTypeId": "2", "Id": "43794043", "Score": "-1", "CreationDate": "2017-05-04T23:04:25.633", "LastActivityDate": "2017-05-04T23:04:25.633"}, "43794166": {"ParentId": "43793941", "PostTypeId": "2", "CommentCount": "4", "Body": "<blockquote>\n<p id=\"so_43793941_43794166_0\">If a class has only a single member function enabled via <code>requires</code> is it still considered overloaded?</p>\n</blockquote>\n<p><strong>Yes.</strong></p>\n<blockquote>\n<p id=\"so_43793941_43794166_1\"><code>[C++ Concepts TS: 13/1]:</code> When two or more different declarations are specified for a single name in the same scope, that name is said to be overloaded. By extension, <strong>two declarations in the same scope that declare the same name but with different types or different associated constraints (14.10.2) are called overloaded declarations</strong>. Only function and function template declarations can be overloaded; variable and type declarations cannot be overloaded.</p>\n</blockquote>\n<p>Overload resolution selects between them:</p>\n<blockquote>\n<p id=\"so_43793941_43794166_2\"><code>[C++ Concepts TS: 13.3.2/1]:</code> From the set of candidate functions constructed for a given context (13.3.1), a set of viable functions is chosen, from which the best function will be selected by comparing argument conversion sequences and associated constraints for the best fit (13.3.3). <strong>The selection of viable functions considers associated constraints, if any</strong> (14.10.2), and relationships between arguments and function parameters other than the ranking of conversion sequences.</p>\n</blockquote>\n<hr>\n<blockquote>\n<p id=\"so_43793941_43794166_3\">For example, is this code valid?</p>\n</blockquote>\n<p><strong>Yes!</strong></p>\n<p>Although there are two overloads here, the one with unsatisfied constraints is removed from consideration when taking the address of <code>f</code>:</p>\n<blockquote>\n<p id=\"so_43793941_43794166_4\"><code>[C++ Concepts TS: 13.4/4]:</code> <strong>Eliminate from the set of selected functions all those whose constraints are not satisfied</strong> <em>[..]</em></p>\n</blockquote>\n<p>This would, therefore, appear to be a compiler bug.</p>\n<p><sub><em>Version cited: <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4377.pdf\" rel=\"nofollow noreferrer\">N4377</a>, dated 2015-02-09</em></sub></p>\n</hr>", "OwnerUserId": "560648", "LastEditorUserId": "560648", "LastEditDate": "2017-05-05T00:06:06.150", "Id": "43794166", "Score": "5", "CreationDate": "2017-05-04T23:18:22.037", "LastActivityDate": "2017-05-05T00:06:06.150"}, "43793941": {"CommentCount": "3", "ViewCount": "108", "PostTypeId": "1", "LastEditorUserId": "4447365", "CreationDate": "2017-05-04T22:50:59.007", "LastActivityDate": "2017-05-05T00:27:28.233", "Title": "If a class has only a single member function enabled via requires can it still be ambiguously overloaded?", "AcceptedAnswerId": "43794166", "LastEditDate": "2017-05-05T00:27:28.233", "Id": "43793941", "Score": "4", "Body": "<p>For example, is this code valid?</p>\n<pre><code>template &lt;class T&gt;\nstruct A {\n  void f() \n    requires std::is_same_v&lt;T, int&gt;\n  {\n  }\n\n  void f(int) \n    requires !std::is_same_v&lt;T, int&gt;\n  {\n  }\n};\n\nint main() {\n  auto fptr = &amp;A&lt;int&gt;::f;\n  return 0;\n}\n</code></pre>\n<p>It won't <a href=\"https://wandbox.org/permlink/xFBZIwKjptKAFFwF\" rel=\"nofollow noreferrer\">compile</a> with gcc, but it seems like it ought to work to me.</p>\n", "Tags": "<c++><c++-concepts>", "OwnerUserId": "4447365", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_43793941_43794166_1": {"section_id": 554, "quality": 0.8222222222222222, "length": 37}, "so_43793941_43794166_2": {"section_id": 600, "quality": 0.7555555555555555, "length": 34}}, "n3337": {"so_43793941_43794166_1": {"section_id": 545, "quality": 0.8222222222222222, "length": 37}, "so_43793941_43794166_2": {"section_id": 590, "quality": 0.7555555555555555, "length": 34}}, "n4659": {"so_43793941_43794166_1": {"section_id": 577, "quality": 0.8, "length": 36}, "so_43793941_43794166_2": {"section_id": 626, "quality": 0.7555555555555555, "length": 34}}}});