post_cb({"bq_ids": {"n4140": {"so_16033729_16033892_3": {"length": 13, "quality": 1.0, "section_id": 438}, "so_16033729_16033892_4": {"length": 15, "quality": 1.0, "section_id": 438}, "so_16033729_16033892_5": {"length": 5, "quality": 1.0, "section_id": 438}, "so_16033729_16033892_6": {"length": 11, "quality": 0.7333333333333333, "section_id": 438}, "so_16033729_16033892_1": {"length": 6, "quality": 1.0, "section_id": 438}, "so_16033729_16033892_2": {"length": 29, "quality": 1.0, "section_id": 438}}, "n3337": {"so_16033729_16033892_3": {"length": 13, "quality": 1.0, "section_id": 429}, "so_16033729_16033892_4": {"length": 15, "quality": 1.0, "section_id": 429}, "so_16033729_16033892_5": {"length": 5, "quality": 1.0, "section_id": 429}, "so_16033729_16033892_1": {"length": 6, "quality": 1.0, "section_id": 429}, "so_16033729_16033892_6": {"length": 11, "quality": 0.7333333333333333, "section_id": 429}, "so_16033729_16033892_2": {"length": 29, "quality": 1.0, "section_id": 429}}, "n4659": {"so_16033729_16033892_3": {"length": 13, "quality": 1.0, "section_id": 458}, "so_16033729_16033892_4": {"length": 15, "quality": 1.0, "section_id": 458}, "so_16033729_16033892_5": {"length": 5, "quality": 1.0, "section_id": 458}, "so_16033729_16033892_1": {"length": 6, "quality": 1.0, "section_id": 458}, "so_16033729_16033892_6": {"length": 11, "quality": 0.7333333333333333, "section_id": 458}, "so_16033729_16033892_2": {"length": 29, "quality": 1.0, "section_id": 458}}}, "16033892": {"Id": "16033892", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_16033729_16033892_0\">Why the constructors of 'cat' and 'dog' are called earlier than constructor of 'useresources'?</p>\n</blockquote>\n<p>They are called earlier than the <strong>body</strong> of the constructor of <code>UseResources</code> is entered.</p>\n<p><code>UseResources</code> has two data members which are instantiations of the <code>PWrap&lt;&gt;</code> class template. The constructor of <code>PWrap&lt;T&gt;</code> instantiates a number of objects of type <code>T</code>:</p>\n<pre><code>ptr = new T[sz];\n</code></pre>\n<p>Thus resulting in a corresponding number of call to the constructor of <code>T</code> (<code>Cat</code> or <code>Dog</code>, in your case).</p>\n<p>Since your <code>PWrap</code> objects are data members of <code>UseResources</code>, their constructor gets executed before the body of the <code>UseResources</code> constructor is entered. This is how object construction works in C++.</p>\n<p>The rationale behind this is to make sure that when the body of a constructor is entered, the constructor of all the subobjects (including both base subobjects and <em>member</em> subobjects - such as <code>Bonk</code> and <code>Og</code>) has been completed.</p>\n<p>This way, a constructor can rely on using valid subobjects whose class invariant has already been established by the time it gets executed.</p>\n<p>This is how Paragraph 12.6.2/10 of the C++11 Standard describes the process:</p>\n<blockquote>\n<p id=\"so_16033729_16033892_1\">In a non-delegating constructor, initialization proceeds in the following order:</p>\n<p id=\"so_16033729_16033892_2\">\u2014 First, and only for the constructor of the most derived class (1.8), virtual base classes are initialized in\n  the order they appear on a depth-first left-to-right traversal of the directed acyclic graph of base classes,\n  where \u201cleft-to-right\u201d is the order of appearance of the base classes in the derived class base-specifier-list.</p>\n<p id=\"so_16033729_16033892_3\">\u2014 Then, direct base classes are initialized in declaration order as they appear in the base-specifier-list\n  (regardless of the order of the mem-initializers).</p>\n<p id=\"so_16033729_16033892_4\">\u2014 <strong>Then, non-static data members are initialized in the order they were declared in the class definition\n  (again regardless of the order of the mem-initializers)</strong>.</p>\n<p id=\"so_16033729_16033892_5\">\u2014 <strong>Finally, the compound-statement of the constructor body is executed</strong>.</p>\n<p id=\"so_16033729_16033892_6\">[ <em>Note</em>: The declaration order is mandated to ensure that base and member subobjects are destroyed in\n  the reverse order of initialization. \u2014<em>end note</em> ]</p>\n</blockquote>\n", "LastEditorUserId": "1932150", "LastActivityDate": "2013-04-16T10:05:24.750", "Score": "3", "CreationDate": "2013-04-16T09:52:08.327", "ParentId": "16033729", "CommentCount": "0", "LastEditDate": "2013-04-16T10:05:24.750", "OwnerUserId": "1932150"}, "16034637": {"Id": "16034637", "PostTypeId": "2", "Body": "<p>The order of constructor calling is:</p>\n<ol>\n<li>Base class.</li>\n<li>Members, in order they appear in the header</li>\n<li>Class constructor.</li>\n</ol>\n<p>The class UseResources is \"constructed\" before the body of the constructor is called, with regards to it having a size, and the member variables having proper addresses. However they are not yet fully constructed.</p>\n<p>The body of the constructor can assume that all its members are already fully constructed (with their constructors called), thus they have to be called in this order.</p>\n<p>Thus Bonk and Og have their constructors called in that order before UseResources.</p>\n", "LastActivityDate": "2013-04-16T10:24:55.403", "Score": "1", "CreationDate": "2013-04-16T10:24:55.403", "ParentId": "16033729", "CommentCount": "0", "OwnerUserId": "442284"}, "16033729": {"ViewCount": "139", "Body": "<p>Following code is from \"exception handling\" in . The author tried to tell us that by making everything an object, we can prevent resource leaks. \nMy question:\nWhy the constructors of 'cat' and 'dog' are called earlier than constructor of 'useresources'?</p>\n<pre><code>//: C07:Wrapped.cpp\n// Safe, atomic pointers\n#include &lt;fstream&gt;\n#include &lt;cstdlib&gt;\nusing namespace std;\nofstream out(\"wrapped.out\");\n// Simplified. Yours may have other arguments.\ntemplate&lt;class T, int sz = 1&gt; class PWrap {\n    T* ptr;\npublic:\n    class RangeError {}; // Exception class\n    PWrap() {\n        ptr = new T[sz];\n        out &lt;&lt; \"PWrap constructor\" &lt;&lt; endl;\n    }\n    ~PWrap() {\n        delete []ptr;\n        out &lt;&lt; \"PWrap destructor\" &lt;&lt; endl;\n    }\n    T&amp; operator[](int i) throw(RangeError) {\n        if(i &gt;= 0 &amp;&amp; i &lt; sz) return ptr[i];\n        throw RangeError();\n    }\n};\nclass Cat {\npublic:\n    Cat() { out &lt;&lt; \"Cat()\" &lt;&lt; endl; }\n    ~Cat() { out &lt;&lt; \"~Cat()\" &lt;&lt; endl; }\n    void g() {}\n};\nclass Dog {\npublic:\n    void* operator new[](size_t sz) {\n        out &lt;&lt; \"allocating an Dog\" &lt;&lt; endl;\n        throw int(47);\n    }\n    void operator delete[](void* p) {\n        out &lt;&lt; \"deallocating an Dog\" &lt;&lt; endl;\n        ::delete p;\n    }\n};\nclass UseResources {\n    PWrap&lt;Cat, 3&gt; Bonk;\n    PWrap&lt;Dog&gt; Og;\npublic:\n    UseResources() : Bonk(), Og() {\n        out &lt;&lt; \"UseResources()\" &lt;&lt; endl;\n    }\n    ~UseResources() {\n        out &lt;&lt; \"~UseResources()\" &lt;&lt; endl;\n    }\n    void f() { Bonk[1].g(); }\n};\nint main() {\n    try {\n        UseResources ur;\n    } catch(int) {\n        out &lt;&lt; \"inside handler\" &lt;&lt; endl;\n    } catch(...) {\n    out &lt;&lt; \"inside catch(...)\" &lt;&lt; endl;\n    }\n} ///:~\n</code></pre>\n", "Title": "Which constructor is called first", "CreationDate": "2013-04-16T09:45:20.323", "LastActivityDate": "2013-04-16T10:24:55.403", "CommentCount": "1", "LastEditDate": "2013-04-16T09:54:34.430", "PostTypeId": "1", "LastEditorUserId": "2225976", "Id": "16033729", "Score": "2", "OwnerUserId": "2225976", "Tags": "<c++><exception><constructor>", "AnswerCount": "3"}, "16034073": {"Id": "16034073", "PostTypeId": "2", "Body": "<p>In the code segment:</p>\n<pre><code>   UseResources() : Bonk(), Og() {\n      out &lt;&lt; \"UseResources()\" &lt;&lt; endl;\n   }\n</code></pre>\n<p>Actually you are calling UseResources constructor before constructing Bonk and Og members but just outstreaming your log later</p>\n", "LastActivityDate": "2013-04-16T09:59:59.277", "Score": "0", "CreationDate": "2013-04-16T09:59:59.277", "ParentId": "16033729", "CommentCount": "0", "OwnerUserId": "2183287"}});