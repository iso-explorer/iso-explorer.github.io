post_cb({"27139136": {"ParentId": "27139006", "PostTypeId": "2", "CommentCount": "0", "Body": "<pre><code>struct _tv {\n    string t;\n    void* v;\n    _tv(string _t, void* _v) {\n        t = _t;\n        v = _v;\n    }\n    _tv(_tv* ptr) {\n        t = ptr-&gt;t;\n        v = ptr-&gt;v;\n    } // A\n};\n</code></pre>\n<p>What you'r trying to do is constructor delegration, algo need the pointer called ptr to not shadow v\n<a href=\"https://en.wikipedia.org/wiki/C++11#Object_construction_improvement\" rel=\"nofollow noreferrer\">https://en.wikipedia.org/wiki/C++11#Object_construction_improvement</a></p>\n<p>also leading underscore names are reserved\n<a href=\"https://stackoverflow.com/questions/228783/what-are-the-rules-about-using-an-underscore-in-a-c-identifier\">What are the rules about using an underscore in a C++ identifier?</a></p>\n", "OwnerUserId": "2735383", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T11:57:56.840", "Id": "27139136", "Score": "1", "CreationDate": "2014-11-26T00:05:44.073", "LastActivityDate": "2014-11-26T00:05:44.073"}, "27139046": {"ParentId": "27139006", "PostTypeId": "2", "CommentCount": "4", "Body": "<pre><code>_tv(*v);\n</code></pre>\n<p>Declares a variable of type \"pointer to <code>_tv</code>\". The name of that variable is <code>v</code>. </p>\n<p>Consider [dcl.meaning]/6:</p>\n<blockquote>\n<p id=\"so_27139006_27139046_0\">In a declaration <code>T D</code> where <code>D</code> has the form</p>\n<p id=\"so_27139006_27139046_1\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<em>( D1 )</em></p>\n<p id=\"so_27139006_27139046_2\">the type of the contained <em>declarator-id</em> is the same as that of the\n  contained <em>declarator-id</em> in the declaration</p>\n<pre><code>  T D1\n</code></pre>\n<p id=\"so_27139006_27139046_3\">Parentheses do not alter the type of the embedded <em>declarator-id</em>, but\n  they can alter the binding of complex declarators.</p>\n</blockquote>\n<p>It seems you want to use delegating constructors:</p>\n<pre><code>_tv(_tv* v) : _tv(*v) {}\n</code></pre>\n<p>And define an appropriate copy constructor (if necessary).</p>\n", "OwnerUserId": "3647361", "LastEditorUserId": "3647361", "LastEditDate": "2014-11-26T00:04:32.713", "Id": "27139046", "Score": "4", "CreationDate": "2014-11-25T23:58:23.583", "LastActivityDate": "2014-11-26T00:04:32.713"}, "27139006": {"CommentCount": "0", "ViewCount": "105", "PostTypeId": "1", "LastEditorUserId": "412436", "CreationDate": "2014-11-25T23:55:42.557", "LastActivityDate": "2014-11-26T00:05:44.073", "Title": "C++ - struct constructor, redefinition error when trying to derefence a pointer to the struct", "AcceptedAnswerId": "27139046", "LastEditDate": "2014-11-26T00:00:48.470", "Id": "27139006", "Score": "2", "Body": "<p>When defining a constructor overload whose only purpose is to dereference a value I get an error that I'd like to understand.</p>\n<p>Here's the code:</p>\n<pre><code>struct _tv {\n    string t;\n    void* v;\n    _tv(string _t, void* _v) {\n        t = _t;\n        v = _v;\n    };\n    _tv(_tv* v) { _tv(*v); }; // A\n};\n</code></pre>\n<p>And it fails to compile because of:</p>\n<pre><code>error: redefinition of 'v'\n  _tv(_tv* v) { _tv(*v); };\n</code></pre>\n<p>What I want to do is to be able to construct _tv's like this:</p>\n<pre><code>// Suppose 'a' is a valid _tv*\n_tv* b = new _tv(a); // B\n</code></pre>\n<p>If I drop that line (A) from my code, it compiles and I could achieve the same result with:</p>\n<pre><code>_tv* b = new _tv(*a);\n</code></pre>\n<p>But I don't want that, I want to understand why it doesn't work and why the error states that I'm trying to redefine the argument 'v'.</p>\n", "Tags": "<c++><constructor>", "OwnerUserId": "412436", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_27139006_27139046_2": {"section_id": 3213, "quality": 1.0, "length": 7}, "so_27139006_27139046_3": {"section_id": 3213, "quality": 1.0, "length": 12}}, "n3337": {"so_27139006_27139046_2": {"section_id": 3087, "quality": 1.0, "length": 7}, "so_27139006_27139046_3": {"section_id": 3087, "quality": 1.0, "length": 12}}, "n4659": {"so_27139006_27139046_2": {"section_id": 3970, "quality": 1.0, "length": 7}, "so_27139006_27139046_3": {"section_id": 3970, "quality": 1.0, "length": 12}}}});