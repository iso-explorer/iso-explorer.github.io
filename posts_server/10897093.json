post_cb({"10897483": {"ParentId": "10897093", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Regarding the second point, the standard <em>guarantees</em> that there will be no race there. That being said, I have been told that this guarantee is not implemented in current compilers, and it might even be impossible to implement in some architectures.</p>\n<p>Regarding the first point, if the second point is guaranteed, and if your program does not contain any race condition, then the natural outcome is that this will not be a race condition either. That is, given the premise that the standard <em>guarantees</em> that writes to different sub word locations are safe, then the only case where you can have a race condition is if multiple threads access the same variable (that is split across words, or more probably for this to be problematic, across cache lines). </p>\n<p>Again this might be hard or even impossible to implement. If your unaligned datum goes across a cache line, then it would be almost impossible to guarantee the correctness of the code without imposing a huge cost to performance. You should try to avoid unaligned variables as much as possible for this and other reasons (including raw performance, a write to an object that touches two cache lines involves writing as many as 32 bytes to memory, and if any other thread is touching any of the cache lines, it also involves the cost of synchronization of the caches...</p>\n", "OwnerUserId": "36565", "LastEditorUserId": "36565", "LastEditDate": "2012-06-05T12:46:26.653", "Id": "10897483", "Score": "5", "CreationDate": "2012-06-05T12:39:59.213", "LastActivityDate": "2012-06-05T12:46:26.653"}, "10897450": {"ParentId": "10897093", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>It does not protect against memory tearing, which is only visible when two threads access the same memory location (but the clause only applies to separate memory locations).</p>\n<p>It appears to protect against memory conflict, according to your example.  The most likely way to achieve this is that a system which can't write less than 32 bits at once would have 32-bit <code>char</code>, and then two separate objects could never share a \"system memory unit\".  (The only way two 16-bit integers can be adjacent on a system with 32-bit <code>char</code> is as bitfields.)</p>\n", "OwnerUserId": "103167", "LastEditorUserId": "103167", "LastEditDate": "2012-06-05T12:43:21.030", "Id": "10897450", "Score": "1", "CreationDate": "2012-06-05T12:38:08.893", "LastActivityDate": "2012-06-05T12:43:21.030"}, "bq_ids": {"n4140": {"so_10897093_10897093_0": {"section_id": 5787, "quality": 0.9259259259259259, "length": 25}}, "n3337": {"so_10897093_10897093_0": {"section_id": 5560, "quality": 0.9259259259259259, "length": 25}}, "n4659": {"so_10897093_10897093_0": {"section_id": 7244, "quality": 0.8888888888888888, "length": 24}}}, "10897093": {"CommentCount": "2", "ViewCount": "709", "CreationDate": "2012-06-05T12:13:11.553", "LastActivityDate": "2012-06-05T12:46:26.653", "Title": "Does the C++11 memory model prevent memory tearing and conflicts?", "AcceptedAnswerId": "10897483", "PostTypeId": "1", "Id": "10897093", "Score": "7", "Body": "<p>Reading a draft of C++11 I was interested by clause 1.7.3:</p>\n<blockquote>\n<p id=\"so_10897093_10897093_0\">A memory location is either an object of scalar type or a maximal sequence of adjacent bit-fields all having non-zero width. ... Two threads of execution (1.10) can update and access separate memory locations without interfering with each other.</p>\n</blockquote>\n<p>Does this clause protect from hardware related race conditions such as:</p>\n<ul>\n<li>unaligned data access where memory is updated in two bus transactions (<em>memory tearing</em>)?  </li>\n<li>where you have distinct objects within a system memory unit, e.g. two 16-bit signed integers in a 32-bit word, and each independent update of the separate objects requires the entire memory unit to be written (<em>memory conflict</em>)?</li>\n</ul>\n", "Tags": "<c++><multithreading><thread-safety><c++11>", "OwnerUserId": "105344", "AnswerCount": "2"}});