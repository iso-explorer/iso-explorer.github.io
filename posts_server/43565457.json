post_cb({"43565457": {"CommentCount": "2", "ViewCount": "64", "PostTypeId": "1", "LastEditorUserId": "6427477", "CreationDate": "2017-04-22T22:48:50.960", "LastActivityDate": "2017-04-22T23:23:39.370", "Title": "unrestricted union members lifetime during parent object construction", "AcceptedAnswerId": "43565560", "LastEditDate": "2017-04-22T23:08:35.653", "Id": "43565457", "Score": "1", "Body": "<p>Normally you are responsible for lifetime of your unrestricted union members -- and typically you do it via in-place ctor/dtor calls. But, apparently, there is at least one case when compiler helps you -- in the code below, if object construction fails it's (previously constructed) union member gets automatically destroyed (at least in MSVC 2015), i.e. we never leak.</p>\n<pre><code>#include &lt;string&gt;\n\nstruct CanThrow\n{\n    CanThrow() {  throw 0;  }\n};\n\nstruct A\n{\n    A() : str{} {}    // note that we don't explicitly call str dtor here\n    ~A() { str.~basic_string(); }\n\n    union { std::string str; };\n    CanThrow ct;\n};\n\nint main() { try{ A a; } catch(...) {} }\n</code></pre>\n<p>Disclaimer: this code compiles on my MSVC 2015</p>\n<p>Question -- is this guaranteed by standard and where it stipulates that?</p>\n", "Tags": "<c++><c++11><unions>", "OwnerUserId": "6427477", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_43565457_43565560_0": {"section_id": 5920, "quality": 0.5454545454545454, "length": 18}, "so_43565457_43565560_1": {"section_id": 3344, "quality": 0.90625, "length": 58}}, "n3337": {"so_43565457_43565560_0": {"section_id": 5692, "quality": 0.9090909090909091, "length": 30}, "so_43565457_43565560_1": {"section_id": 3214, "quality": 0.90625, "length": 58}}, "n4659": {"so_43565457_43565560_0": {"section_id": 7413, "quality": 0.5151515151515151, "length": 17}}}, "43565560": {"ParentId": "43565457", "PostTypeId": "2", "CommentCount": "16", "Body": "<p>Quite the contrary: it's <em>not</em> supposed to happen!</p>\n<blockquote>\n<p id=\"so_43565457_43565560_0\"><code>[C++11: 9.5/8]:</code> <strong>A <em>union-like class</em> is a union or a class that has an anonymous union as a direct member</strong>. A union-like class <code>X</code> has a set of variant members. If <code>X</code> is a union its variant members are the non-static data members; \n  otherwise, its variant members are the non-static data members of all anonymous unions that are members of <code>X</code>.</p>\n<p id=\"so_43565457_43565560_1\"><code>[C++11: 15.2/2]:</code> <strong>An object of any storage duration whose initialization or destruction is terminated by an exception will have destructors executed for all of its fully constructed subobjects (excluding the variant members of a union-like class)</strong>, that is, for subobjects for which the principal constructor (12.6.2) has completed execution and the destructor has not yet begun execution. Similarly, if the non-delegating constructor for an object has completed execution and a delegating constructor for that object exits with an exception, the object\u2019s destructor will be invoked. If the object was allocated in a new-expression, the matching deallocation function (3.7.4.2, 5.3.4, 12.5), if any, is called to free the storage occupied by the object.</p>\n</blockquote>\n<p>If Visual Studio is doing so, it's non-compliant; FWIW, <a href=\"http://coliru.stacked-crooked.com/a/42dd5feaec4de4d6\" rel=\"nofollow noreferrer\">GCC 6.3 seems to be also</a>.</p>\n<p>Note that the (current) C++17 wording is different and does permit what we're observing; <a href=\"https://wg21.cmeerw.net/cwg/issue1866\" rel=\"nofollow noreferrer\">this change appears to have been introduced by CWG issue #1866 in 2014</a>, so it's likely that this is one of those times that the main compilers were \"ahead of the game\" and don't quite abide to the standard (despite <code>-std</code> flags).</p>\n<p>So the answer is, <em>no</em>, the standard certainly doesn't guarantee it in MSVS 2015's case, though it will in future, C++17 versions of the software.</p>\n", "OwnerUserId": "560648", "LastEditorUserId": "560648", "LastEditDate": "2017-04-22T23:23:39.370", "Id": "43565560", "Score": "1", "CreationDate": "2017-04-22T23:04:11.913", "LastActivityDate": "2017-04-22T23:23:39.370"}});