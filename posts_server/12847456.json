post_cb({"bq_ids": {"n4140": {"so_12847456_12847480_0": {"section_id": 3260, "quality": 0.8378378378378378, "length": 31}}, "n3337": {"so_12847456_12847480_0": {"section_id": 3132, "quality": 0.8918918918918919, "length": 33}}, "n4659": {"so_12847456_12847480_0": {"section_id": 4018, "quality": 0.5405405405405406, "length": 20}}}, "12848148": {"ParentId": "12847456", "CommentCount": "1", "CreationDate": "2012-10-11T20:39:06.273", "OwnerUserId": "251738", "PostTypeId": "2", "Id": "12848148", "Score": "3", "Body": "<p>The reason this is disallowed has already been addressed, but another solution along the lines of @Vyktor's is to use <code>boost::optional</code> instead of magic numbers (This has pros and cons compared to creating an overload):</p>\n<pre><code>int foo(int a, boost::optional&lt;int&gt; b = boost::none)\n{\n    if(!b) b = a;\n}\n</code></pre>\n", "LastActivityDate": "2012-10-11T20:39:06.273"}, "12848355": {"ParentId": "12847456", "CommentCount": "0", "CreationDate": "2012-10-11T20:53:25.120", "OwnerUserId": "1463922", "PostTypeId": "2", "Id": "12848355", "Score": "0", "Body": "<p>This is a little funny answer - but works:</p>\n<pre><code>#define TWO_FROM_ONE(a) (a),(a)\n\nf(TWO_FROM_ONE(12));\n</code></pre>\n<p>One disadvantage is that this will call some function twice (a known macro drawback):</p>\n<pre><code>f(TWO_FROM_ONE(sin(123 / PI)));\n</code></pre>\n", "LastActivityDate": "2012-10-11T20:53:25.120"}, "12847456": {"CommentCount": "0", "AcceptedAnswerId": "12847480", "CreationDate": "2012-10-11T19:55:09.723", "LastActivityDate": "2012-10-11T20:53:25.120", "PostTypeId": "1", "ViewCount": "5509", "FavoriteCount": "3", "Title": "C++ default function parameter", "Id": "12847456", "Score": "6", "Body": "<p>I want to achieve this:</p>\n<pre><code>- second parameter by default set to first argument\n</code></pre>\n<p>Something like:</p>\n<pre><code>int foo (int a, int b = a);\n</code></pre>\n<p>But how to do that?</p>\n<p>Thanks a lot!</p>\n", "Tags": "<c++>", "OwnerUserId": "1251099", "AnswerCount": "4"}, "12847480": {"ParentId": "12847456", "PostTypeId": "2", "CommentCount": "5", "CreationDate": "2012-10-11T19:56:34.020", "Score": "18", "LastEditorUserId": "673730", "LastEditDate": "2012-10-11T20:37:06.637", "Id": "12847480", "OwnerUserId": "673730", "Body": "<p>This is forbidden by:</p>\n<h3>8.3.6 Default arguments [dcl.fct.default]</h3>\n<blockquote>\n<p id=\"so_12847456_12847480_0\">9) Default arguments are evaluated each time the function is called.\n  The order of evaluation of function arguments is unspecified.\n  <strong>Consequently, parameters of a function shall not be used in default\n  argument expressions, even if they are not evaluated.</strong> Parameters of a\n  function declared before a default argument expression are in scope\n  and can hide namespace and class member names. [ Example:</p>\n<p id=\"so_12847456_12847480_1\"><code>int a;</code></p>\n<p id=\"so_12847456_12847480_2\"><strong><code>int f(int a , int b = a); / / error: parameter a</code></strong></p>\n<p id=\"so_12847456_12847480_3\"><code>/ / used as default argument</code></p>\n<p id=\"so_12847456_12847480_4\"><code>typedef int I;</code></p>\n<p id=\"so_12847456_12847480_5\"><code>int g( float I , int b = I (2)); / / error: parameter I found</code></p>\n<p id=\"so_12847456_12847480_6\"><code>int h(int a , int b = sizeof (a )); / / error, parameter a used</code></p>\n<p id=\"so_12847456_12847480_7\"><code>/ / in default argument</code></p>\n<p id=\"so_12847456_12847480_8\">\u2014end example ]</p>\n</blockquote>\n<p><strong>An alternative</strong> is overloading:</p>\n<pre><code>int foo(int a, int b);\n\nint foo(int a)\n{\n   return foo(a,a);\n}\n</code></pre>\n", "LastActivityDate": "2012-10-11T20:37:06.637"}, "12847531": {"ParentId": "12847456", "PostTypeId": "2", "CommentCount": "4", "CreationDate": "2012-10-11T20:00:41.560", "Score": "2", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:07:58.473", "Id": "12847531", "OwnerUserId": "1149736", "Body": "<p>I recommend using overloading for this particular task as <a href=\"https://stackoverflow.com/a/12847480/1149736\">Luchian Grigore suggested</a>, but common practice would be to reserve some value to say \"this is default\". For example</p>\n<pre><code>int foo( int a, int b = -1)\n{\n    if( b == -1){\n       b = a;\n    }\n}\n</code></pre>\n<p>Using object (not scalar values) this could be really nicely implemented (by creating new delivered class reserved to represent default value), but with int you have to do this.</p>\n<p>Note that you have to be 100% sure that <code>b</code> cannot get value <code>-1</code> (or whatever your reserved value is).</p>\n", "LastActivityDate": "2012-10-11T20:00:41.560"}});