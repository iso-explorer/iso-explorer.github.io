post_cb({"19216133": {"ParentId": "19216123", "LastEditDate": "2013-10-07T02:15:17.723", "CommentCount": "5", "CreationDate": "2013-10-07T02:09:43.787", "OwnerUserId": "951757", "LastEditorUserId": "951757", "PostTypeId": "2", "Id": "19216133", "Score": "1", "Body": "<p><code>std::find</code> returns <code>end()</code> if element is not found in STL container, dereference <code>end()</code> is undefined behavior.</p>\n<p>You need to test iterator <code>it</code> before dereference it:</p>\n<pre><code>it = find(a.begin(), a.end(), 180);\nif (it != a.end())\n{\n  cout &lt;&lt; *it &lt;&lt; endl;\n}\n</code></pre>\n<p>\u00a7 25.2.5</p>\n<blockquote>\n<p id=\"so_19216123_19216133_0\">Returns: The first iterator i in the range [first,last) for which the following corresponding conditions hold: *i == value, pred(*i) != false, pred(*i) == false. Returns last if no such iterator is found.</p>\n</blockquote>\n<p>range <code>[first,last)</code> is half open range, <code>last</code> means <code>end()</code> not last element in container.</p>\n", "LastActivityDate": "2013-10-07T02:15:17.723"}, "19216165": {"ParentId": "19216123", "CommentCount": "0", "Body": "<p><code>a.end()</code> is not an iterator to the last value but an iterator that is <em>past</em> the last element in the list. It should never be printed or accessed in any way. In the case of <code>std::find</code>, you should compare the return value to the end iterator. If it matches, there is no element in that container that matches the requested value.</p>\n<pre><code>it = find(a.begin(),a.end(),180);\nif( a.end() == it ) { // using Yoda conditional\n    cout &lt;&lt; \"no element matching value..\" &lt;&lt; endl;\n} else {\n    cout &lt;&lt; *it &lt;&lt; endl;\n}\n</code></pre>\n", "OwnerUserId": "1209614", "PostTypeId": "2", "Id": "19216165", "Score": "2", "CreationDate": "2013-10-07T02:16:00.747", "LastActivityDate": "2013-10-07T02:16:00.747"}, "19216123": {"CommentCount": "1", "ViewCount": "87", "CreationDate": "2013-10-07T02:08:26.177", "LastActivityDate": "2013-10-07T02:16:00.747", "Title": "Expected return of find STL algorithm", "AcceptedAnswerId": "19216133", "PostTypeId": "1", "Id": "19216123", "Score": "0", "Body": "<pre><code>list&lt; int &gt; a;\n\nlist &lt; int &gt; ::iterator it;\n\nit = a.begin();\n\nit=a.insert(it,10);\nit=a.insert(it,210);\nit=a.insert(it,310);\nit=a.insert(it,410);\nit=a.insert(it,510);\n\n\nit = find(a.begin(),a.end(),180);\n\ncout &lt;&lt; *it &lt;&lt; endl;\n</code></pre>\n<p>In this program the value 180 is not present in this list. So as per the find STL algorithm it should return the last value, but when I print this value it is coming something garbage. Seems like the iterator is pointing to some other location. Please help me spot my error.</p>\n", "Tags": "<c++><stl>", "OwnerUserId": "1706864", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_19216123_19216133_0": {"section_id": 1257, "quality": 0.85, "length": 17}}, "n3337": {"so_19216123_19216133_0": {"section_id": 1255, "quality": 0.85, "length": 17}}, "n4659": {"so_19216123_19216133_0": {"section_id": 1377, "quality": 0.85, "length": 17}}}});