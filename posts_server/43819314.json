post_cb({"bq_ids": {"n4140": {"so_43819314_44692728_5": {"length": 8, "quality": 0.6666666666666666, "section_id": 6122}, "so_43819314_44692728_8": {"length": 6, "quality": 0.75, "section_id": 3952}, "so_43819314_44692728_1": {"length": 13, "quality": 0.8666666666666667, "section_id": 6120}, "so_43819314_44692728_6": {"length": 10, "quality": 0.7142857142857143, "section_id": 6122}, "so_43819314_44692728_3": {"length": 16, "quality": 0.8, "section_id": 6122}}, "n3337": {"so_43819314_44692728_8": {"length": 8, "quality": 1.0, "section_id": 3810}, "so_43819314_44692728_6": {"length": 12, "quality": 0.8571428571428571, "section_id": 5886}, "so_43819314_44692728_5": {"length": 10, "quality": 0.8333333333333334, "section_id": 5886}, "so_43819314_44692728_1": {"length": 13, "quality": 0.8666666666666667, "section_id": 5884}, "so_43819314_44692728_3": {"length": 18, "quality": 0.9, "section_id": 5886}, "so_43819314_44693603_0": {"length": 10, "quality": 0.5882352941176471, "section_id": 359}}, "n4659": {"so_43819314_44692728_5": {"length": 7, "quality": 0.5833333333333334, "section_id": 4134}, "so_43819314_44692728_1": {"length": 13, "quality": 0.8666666666666667, "section_id": 7617}, "so_43819314_44692728_6": {"length": 10, "quality": 0.7142857142857143, "section_id": 7687}, "so_43819314_44692728_8": {"length": 6, "quality": 0.75, "section_id": 4839}, "so_43819314_44693603_0": {"length": 9, "quality": 0.5294117647058824, "section_id": 7347}}}, "44773443": {"Id": "44773443", "PostTypeId": "2", "Body": "<p>This is correct syntactical way is I can say.</p>\n<pre><code>#include &lt;utility&gt;\n\nstruct foo\n{\n    int x{0};\n    foo() noexcept {} // = default;\n    void f() noexcept(noexcept(std::declval&lt;foo&amp;&gt;())) {}\n};\n\nint main()\n{ \n}\n</code></pre>\n", "LastEditorUserId": "1485885", "LastActivityDate": "2017-06-27T12:34:02.777", "Score": "0", "CreationDate": "2017-06-27T06:20:22.670", "ParentId": "43819314", "CommentCount": "0", "OwnerUserId": "6440372", "LastEditDate": "2017-06-27T12:34:02.777"}, "45019208": {"Id": "45019208", "PostTypeId": "2", "Body": "<p>This seems like it might be related to this commit in November. <a href=\"https://lists.llvm.org/pipermail/cfe-commits/Week-of-Mon-20161121/177858.html\" rel=\"nofollow noreferrer\">https://lists.llvm.org/pipermail/cfe-commits/Week-of-Mon-20161121/177858.html</a></p>\n<p>It <em>must</em> be a compiler bug.  Has it been reported?</p>\n", "LastActivityDate": "2017-07-10T18:24:16.387", "CommentCount": "0", "CreationDate": "2017-07-10T18:24:16.387", "ParentId": "43819314", "Score": "0", "OwnerUserId": "6591690"}, "44687541": {"Id": "44687541", "PostTypeId": "2", "Body": "<p>Your usage is fine.</p>\n<ul>\n<li>Your <code>int x{0}</code> clearly falls under the category <a href=\"http://en.cppreference.com/w/cpp/language/class\" rel=\"nofollow noreferrer\">non-static data member with initializer (C++11)</a>. </li>\n<li>The <code>declval</code> does not require a complete type--that's kind of the point of it, as explained in <a href=\"https://thenewcpp.wordpress.com/2011/10/25/decltype-and-declval/\" rel=\"nofollow noreferrer\">this nice exposition</a>. </li>\n</ul>\n<p>What's left? Compiler bug, I guess. How about this for evidence? Use a complete type <code>z</code> instead of <code>foo</code> in your <code>declval</code>.</p>\n<pre><code>#include &lt;utility&gt;\nstruct z{};\nstruct foo\n{\n    int x{0};\n    foo() noexcept = default;\n    void f() noexcept( noexcept( std::declval&lt;z&gt;() ) ) {}\n};\n\nint main()\n{ \n}\n</code></pre>\n<p><a href=\"https://godbolt.org/g/AoFY5s\" rel=\"nofollow noreferrer\">Clang 4.0.0 on godbolt</a> still errors the same way. Unfortunately I do not have clang 4.0.0 available on a machine to test, so I cannot not say whether it is Clang or godbolt for certain.</p>\n", "LastActivityDate": "2017-06-21T23:03:04.523", "CommentCount": "1", "CreationDate": "2017-06-21T23:03:04.523", "ParentId": "43819314", "Score": "0", "OwnerUserId": "1904419"}, "44693603": {"Id": "44693603", "PostTypeId": "2", "Body": "<p>Your code is fine from what I can tell.  Clang seems to struggle with the <code>= default</code> constructor rather than just defining a default constructor manually.  It has the following spiel in its source code about it:</p>\n<blockquote>\n<p id=\"so_43819314_44693603_0\">DR1351:\n    If the brace-or-equal-initializer of a non-static data member\n    invokes a defaulted default constructor of its class or of an\n    enclosing class in a potentially evaluated subexpression, the\n    program is ill-formed.</p>\n<p id=\"so_43819314_44693603_1\">This resolution is unworkable: the exception specification of the\n  default constructor can be needed in an unevaluated context, in\n  particular, in the operand of a noexcept-expression, and we can be\n  unable to compute an exception specification for an enclosed class.</p>\n<p id=\"so_43819314_44693603_2\">Any attempt to resolve the exception specification of a defaulted default\n  constructor before the initializer is lexically complete will ultimately\n  come here at which point we can diagnose it.</p>\n</blockquote>\n<p>I think it may be incorrectly picking up the error, personally.  But it specifially mentions \"defaulted default constructor\".</p>\n<p>The following seems to work:</p>\n<pre><code>#include &lt;utility&gt;\n\nstruct foo\n{\n    int x{0};\n    foo() noexcept {} // = default;\n    void f() noexcept(noexcept(std::declval&lt;foo&amp;&gt;())) {}\n};\n\nint main()\n{ \n}\n</code></pre>\n", "LastActivityDate": "2017-06-22T08:02:38.803", "CommentCount": "3", "CreationDate": "2017-06-22T08:02:38.803", "ParentId": "43819314", "Score": "10", "OwnerUserId": "1696283"}, "43819314": {"ViewCount": "646", "Body": "<pre><code>#include &lt;utility&gt;\n\nstruct foo\n{\n    int x{0};\n    foo() noexcept = default;\n    void f() noexcept(noexcept(std::declval&lt;foo&amp;&gt;())) {}\n};\n\nint main()\n{ \n}\n</code></pre>\n<p><a href=\"https://godbolt.org/g/6RcGxn\" rel=\"noreferrer\"><strong>live example on godbolt</strong></a></p>\n<hr>\n<p>The code above compiles with any version of g++ I tested, and with clang++ from 3.6 to 3.9.1, but <strong>does not compile with clang++ 4.0.0</strong>:</p>\n<pre><code>test.cpp:6:5: error: default member initializer for 'x' needed within \ndefinition of enclosing class 'foo' outside of member functions\n    foo() noexcept = default;\n    ^\ntype_traits:126:26: note: in instantiation of template \nclass 'std::is_function&lt;foo &amp;&gt;' requested here\n    : public conditional&lt;_B1::value, _B1, __or_&lt;_B2, _B3, _Bn...&gt;&gt;::type\n                        ^\ntype_traits:154:39: note: in instantiation of template \nclass 'std::__or_&lt;std::is_function&lt;foo &amp;&gt;,\n    std::is_reference&lt;foo &amp;&gt;, std::is_void&lt;foo &amp;&gt; &gt;' requested here\n    : public integral_constant&lt;bool, !_Pp::value&gt;\n                                    ^\ntype_traits:598:14: note: in instantiation of template \nclass 'std::__not_&lt;std::__or_&lt;std::is_function&lt;foo &amp;&gt;,\n    std::is_reference&lt;foo &amp;&gt;, std::is_void&lt;foo &amp;&gt; &gt; &gt;' requested here\n    : public __not_&lt;__or_&lt;is_function&lt;_Tp&gt;, is_reference&lt;_Tp&gt;,\n            ^\ntype_traits:121:26: note: in instantiation of template \nclass 'std::is_object&lt;foo &amp;&gt;' requested here\n    : public conditional&lt;_B1::value, _B1, _B2&gt;::type\n                        ^\ntype_traits:635:14: note: in instantiation of template \nclass 'std::__or_&lt;std::is_object&lt;foo &amp;&gt;,\n    std::is_reference&lt;foo &amp;&gt; &gt;' requested here\n    : public __or_&lt;is_object&lt;_Tp&gt;, is_reference&lt;_Tp&gt;&gt;::type\n            ^\ntype_traits:1667:33: note: in instantiation of template \nclass 'std::__is_referenceable&lt;foo &amp;&gt;' requested here\ntemplate&lt;typename _Tp, bool = __is_referenceable&lt;_Tp&gt;::value&gt;\n                                ^\ntype_traits:1678:14: note: in instantiation of default \nargument for '__add_rvalue_reference_helper&lt;foo &amp;&gt;'\n    required here\n    : public __add_rvalue_reference_helper&lt;_Tp&gt;\n            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\ntype_traits:2267:12: note: in instantiation of template \nclass 'std::add_rvalue_reference&lt;foo &amp;&gt;' requested\n    here\n    inline typename add_rvalue_reference&lt;_Tp&gt;::type\n        ^\nwtfff.cpp:7:32: note: while substituting explicitly-specified \ntemplate arguments into function template 'declval'\n    void f() noexcept(noexcept(std::declval&lt;foo&amp;&gt;())) {}\n                            ^\nwtfff.cpp:5:9: note: default member initializer declared here\n    int x{0};\n        ^\n</code></pre>\n<p><strong>Is my code ill-formed?</strong> If so, what's the meaning of the error?</p>\n<p>Note that removing the <code>noexcept</code> from the constructor or the <code>{0}</code> initializer from <code>x</code> will make the code compile.</p>\n</hr>", "AcceptedAnswerId": "44693603", "Title": "\"Default member initializer needed within definition of enclosing class outside of member functions\" - is my code ill-formed?", "CreationDate": "2017-05-06T10:26:53.323", "Id": "43819314", "CommentCount": "12", "FavoriteCount": "9", "PostTypeId": "1", "LastActivityDate": "2017-07-10T18:24:16.387", "Score": "20", "OwnerUserId": "598696", "Tags": "<c++><c++11><language-lawyer>", "AnswerCount": "5"}, "44692728": {"Id": "44692728", "PostTypeId": "2", "Body": "<p>As C++ 11 standard states</p>\n<blockquote>\n<p id=\"so_43819314_44692728_0\">\u00a7 5.3.7</p>\n<p id=\"so_43819314_44692728_1\">The <code>noexcept</code> operator determines whether the evaluation of its operand, which is an <strong>unevaluated operand</strong>\n  (Clause 5), can throw an exception (15.1).</p>\n<pre><code>noexcept-expression:\nnoexcept ( expression )\n</code></pre>\n<p id=\"so_43819314_44692728_2\">The result of the noexcept operator is a constant of type bool and is an rvalue.\n  The result of the noexcept operator is false if in a potentially-evaluated context the expression would\n  contain</p>\n<p id=\"so_43819314_44692728_3\">\u2014 <strong>a potentially evaluated call to a function</strong>, member function, function pointer, or member function\n  pointer that <strong>does not have a non-throwing exception-specification</strong> (15.4), unless the call is a constant\n  expression (5.19),</p>\n<p id=\"so_43819314_44692728_4\">\u2014 a potentially evaluated throw-expression (15.1),</p>\n<p id=\"so_43819314_44692728_5\">\u2014 a potentially evaluated dynamic_cast expression dynamic_cast(v), where T is a reference type,\n  that requires a run-time check (5.2.7), or</p>\n<p id=\"so_43819314_44692728_6\">\u2014 a potentially evaluated typeid expression (5.2.8) applied to a glvalue expression whose type is a\n  polymorphic class type (10.3).</p>\n<p id=\"so_43819314_44692728_7\">Otherwise, the result is true.</p>\n</blockquote>\n<p>and</p>\n<blockquote id=\"so_43819314_44692728_8\">\n<pre><code>template &lt;class T&gt;\ntypename add_rvalue_reference&lt;T&gt;::type declval() noexcept; // as unevaluated operand\n</code></pre>\n</blockquote>\n<p>The <code>add_rvalue_reference</code> is of type Transformation Trait and, not explicitly said, but does not require object/function definition to be instantiated.</p>\n<p>From here it is clear that <code>struct foo; ... noexcept(std::declval&lt;foo&gt;())</code> is a legal code. Where <code>noexcept</code> part, by the way, is equivalent to <code>noexcept(true)</code> that is equivalent to just <code>noexcept</code>, and <code>noexcept(noexcept</code> does not make sense, to get a constructor noexcept specifier you have to do this <code>noexcept(foo())</code>. The latter is valid as well, but, unfortunately, compilers are not able to deal with it, probably because of the order how they build the unit for non C++11 code, and they have not transformed this model yet. This reflects the nature of the bug that you encounter in the particular libc++ implementation. For some reasons <code>add_rvalue_reference</code> due to the presence of <code>noexcept</code> specifier tries to use declaration of the constructor and since that happens outside of the member function, as mentioned before, it fails. So yes, this is a bug of the library.</p>\n", "LastActivityDate": "2017-06-22T07:22:39.567", "CommentCount": "2", "CreationDate": "2017-06-22T07:22:39.567", "ParentId": "43819314", "Score": "0", "OwnerUserId": "8005438"}});