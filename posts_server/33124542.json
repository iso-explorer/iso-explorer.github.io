post_cb({"33126028": {"ParentId": "33124542", "CommentCount": "14", "CreationDate": "2015-10-14T13:01:00.757", "OwnerUserId": "5245033", "PostTypeId": "2", "Id": "33126028", "Score": "2", "Body": "<p>Fully disagree with all the answers and comments. There is absolutely no need to default initialze a member when it is not needed. This is why C/C++ never initializes built-in types as members or automatic variables - because doing so would impede performance. Of course, it is not a problem when you create your object/variable once (that's why statics are default-initialized), but for something happening in a tight loop default initialization might eat valuable nanoseconds.</p>\n<p>The one exception to this rule would, in my view, be pointers (if you happen to have raw pointers in your code). Raw pointers should be NULL-initialized, since having invalid pointer is a direct way to undefined behaviour.</p>\n", "LastActivityDate": "2015-10-14T13:01:00.757"}, "37653175": {"ParentId": "33124542", "CommentCount": "0", "CreationDate": "2016-06-06T08:51:32.093", "OwnerUserId": "6429496", "PostTypeId": "2", "Id": "37653175", "Score": "0", "Body": "<p>As it has been already said, you should always initialize pointers and of course const objects are mandatory.</p>\n<p>In my opinion you should not initialize when it is not necessary but it is good to check for all non constructor initialized variables once in a while because they are source of very frequent and hard to find bugs.</p>\n<p>I run Cppcheck every few months. This gives me more than one hundred 'false' warnings like \"Member variable 'foo::bar' is not initialized in the constructor.\" but once in a while it discovers some real bugs so it is totally worth it.</p>\n", "LastActivityDate": "2016-06-06T08:51:32.093"}, "33125217": {"ParentId": "33124542", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2015-10-14T12:24:26.023", "Score": "11", "LastEditorUserId": "2079303", "LastEditDate": "2015-10-14T12:35:27.057", "Id": "33125217", "OwnerUserId": "2079303", "Body": "<blockquote>\n<p id=\"so_33124542_33125217_0\">Should constructor initialize all the data members of the class?</p>\n</blockquote>\n<p>That would be a good practice.</p>\n<blockquote>\n<p id=\"so_33124542_33125217_1\">So, does C++ encourage us to initialize all the data members in the constructor?</p>\n</blockquote>\n<p>It's not required by the c++ standard. As long as you initialize all variables before they're used, your program is correct in that regard.</p>\n<blockquote>\n<p id=\"so_33124542_33125217_2\">or it is just Eclipse's logic? </p>\n</blockquote>\n<p>Quite likely. Neither g++ nor clang versions that I tested warn about this when all warnings are enabled. The logic may or might not be based on <a href=\"http://www.codingstandard.com/rule/12-4-2-ensure-that-a-constructor-initializes-explicitly-all-base-classes-and-non-static-data-members/\" rel=\"noreferrer\">high integrity c++ coding standard \n12.4.2</a> or some other coding standard or style guide.</p>\n", "LastActivityDate": "2015-10-14T12:35:27.057"}, "33124542": {"CommentCount": "15", "AcceptedAnswerId": "33125217", "CreationDate": "2015-10-14T11:52:27.333", "LastActivityDate": "2016-06-06T08:51:32.093", "PostTypeId": "1", "ViewCount": "4412", "FavoriteCount": "4", "Title": "Should constructor initialize all the data members of the class?", "Id": "33124542", "Score": "10", "Body": "<p>I have a situation like this:</p>\n<pre><code>class A {\npublic:\n  A() : n(0) {}\nprivate:\n  int n;\n  int m;\n}\n</code></pre>\n<p>There is simply no meaning in the application logic to initialize <code>m</code> in the constructor. However, Eclipse warns me that the constructor leaves <code>m</code> uninitialized. I can't run the code somewhere else now. The warning is:</p>\n<blockquote>\n<p id=\"so_33124542_33124542_0\">Member 'm' was not initialized in this constructor</p>\n</blockquote>\n<p>So, does C++ encourage us to initialize all the data members in the constructor or it is just Eclipse's logic? </p>\n", "Tags": "<c++><eclipse><initialization><language-lawyer><initializer-list>", "OwnerUserId": "2411320", "AnswerCount": "5"}, "33128129": {"ParentId": "33124542", "PostTypeId": "2", "CommentCount": "1", "CreationDate": "2015-10-14T14:28:45.063", "Score": "4", "LastEditorUserId": "5445427", "LastEditDate": "2015-10-15T07:17:31.600", "Id": "33128129", "OwnerUserId": "5445427", "Body": "<p>C++ doesn't require attributes to be initialized in constructor, except in case of const attributes where there value must be defined in initialization list.</p>\n<p>However, it is clearly a good practice to initialize every attributes in constructor. I cannot count how many bugs I've met due to a non initialized variable or attributes.</p>\n<p>Finally, every object should <strong>permanently</strong> be in a <strong>consistent</strong> state, which include both public (accessible) attributes and private attributes as well. Optimization should not be a reason for keeping an object un-consistent.</p>\n", "LastActivityDate": "2015-10-15T07:17:31.600"}, "bq_ids": {"n4140": {"so_33124542_33125217_1": {"section_id": 369, "quality": 0.7142857142857143, "length": 5}, "so_33124542_33125217_0": {"section_id": 467, "quality": 0.7142857142857143, "length": 5}}, "n3337": {"so_33124542_33125217_1": {"section_id": 359, "quality": 0.7142857142857143, "length": 5}, "so_33124542_33125217_0": {"section_id": 448, "quality": 0.7142857142857143, "length": 5}}, "n4659": {"so_33124542_33125217_1": {"section_id": 383, "quality": 0.5714285714285714, "length": 4}, "so_33124542_33125217_0": {"section_id": 383, "quality": 0.7142857142857143, "length": 5}}}, "33126908": {"ParentId": "33124542", "CommentCount": "1", "CreationDate": "2015-10-14T13:37:45.820", "OwnerUserId": "2796832", "PostTypeId": "2", "Id": "33126908", "Score": "3", "Body": "<p>For completeness, the warning comes from the C/C++ Code Analysis. In particular the problem is <code>Potential Programming Problems</code> / <code>Class members should be properly initialized</code></p>\n<p>To change the code analysis settings (in this case I recommend per-project) edit the project properties. You can disable the whole warning, or disable it on just the files that violate the warning condition.</p>\n<p><a href=\"https://i.stack.imgur.com/8VEI9.png\" rel=\"nofollow noreferrer\"><img alt=\"show the warning\" src=\"https://i.stack.imgur.com/8VEI9.png\"/></a></p>\n<p>As for comparing CDT with GCC or CLang, this appears to be a case where additional code analysis is being done by CDT compared to what is available from the compilers. Of course that is to be expected as the CDT Code Analysis' remit is greater than that of the compiler.</p>\n<p>PS, If you are up for it, you can read the implementation of this <a href=\"https://github.com/MentorEmbedded/cdt/blob/master/codan/org.eclipse.cdt.codan.checkers/src/org/eclipse/cdt/codan/internal/checkers/ClassMembersInitializationChecker.java\" rel=\"nofollow noreferrer\">particular checker</a>.</p>\n", "LastActivityDate": "2015-10-14T13:37:45.820"}});