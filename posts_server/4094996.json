post_cb({"bq_ids": {"n4140": {"so_4094996_4095666_0": {"length": 46, "quality": 0.7931034482758621, "section_id": 3344}}, "n3337": {"so_4094996_4095666_0": {"length": 46, "quality": 0.7931034482758621, "section_id": 3214}}}, "4095055": {"LastActivityDate": "2010-11-04T09:03:47.003", "CommentCount": "1", "Body": "<p>The memory will be properly deallocated.</p>\n<p>Related questions at SO.</p>\n<p><li> <a href=\"https://stackoverflow.com/questions/1197566/is-it-ever-not-safe-to-throw-an-exception-in-a-constructor\">Is it ever not safe to throw an exception in a constructor?</a></li>\n<li> <a href=\"https://stackoverflow.com/questions/1230423/c-handle-resources-if-constructors-may-throw-exceptions-reference-to-faq-17\">C++ : handle resources if constructors may throw exceptions (Reference to FAQ 17.4)</a></li></p>\n<pre><code>prasoon@prasoon-desktop ~ $ cat noleak.cpp &amp;&amp; g++ noleak.cpp &amp;&amp; valgrind --leak-check=full ./a.out\n#include &lt;stdexcept&gt;\n\nclass MyClass\n{\npublic:\n    MyClass()\n    {\n        throw std::runtime_error(\"Test\");\n    }\n};\n\nint main()\n{\n    try\n    {\n        MyClass * myClass = new MyClass;\n    }\n    catch (const std::exception &amp; exc)\n    {\n        // Memory leak?\n    }\n    return 0;\n}\n==3652== Memcheck, a memory error detector\n==3652== Copyright (C) 2002-2009, and GNU GPL'd, by Julian Seward et al.\n==3652== Using Valgrind-3.5.0 and LibVEX; rerun with -h for copyright info\n==3652== Command: ./a.out\n==3652== \n==3652== \n==3652== HEAP SUMMARY:\n==3652==     in use at exit: 0 bytes in 0 blocks\n==3652==   total heap usage: 3 allocs, 3 frees, 106 bytes allocated\n==3652== \n==3652== All heap blocks were freed -- no leaks are possible\n==3652== \n==3652== For counts of detected and suppressed errors, rerun with: -v\n==3652== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 17 from 6)\nprasoon@prasoon-desktop ~ $ \n</code></pre>\n", "CreationDate": "2010-11-04T08:53:59.187", "LastEditDate": "2017-05-23T10:33:15.267", "ParentId": "4094996", "Id": "4095055", "LastEditorUserId": "-1", "PostTypeId": "2", "Score": "12", "OwnerUserId": "165520"}, "4095025": {"CommentCount": "0", "Body": "<p>The memory will be automatically freed before the exception propagates.</p>\n<p>This is essential, because a) the program never receives a pointer to free, and b) even if it did, it would have no portable way to actually free it since the memory never became an object that you can delete.</p>\n", "CreationDate": "2010-11-04T08:49:20.810", "ParentId": "4094996", "Id": "4095025", "LastActivityDate": "2010-11-04T08:49:20.810", "PostTypeId": "2", "Score": "16", "OwnerUserId": "9990"}, "4095666": {"CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_4094996_4095666_0\">$15.2/2 - \"An object that is partially\n  constructed or partially destroyed\n  will have destructors executed for all\n  of its fully constructed base classes\n  and non-variant members, that is, for\n  subobjects for which the principal\n  constructor (12.6.2) has completed\n  execution and the destructor has not\n  yet begun execution. Similarly, if the\n  non-delegating constructor for an\n  object has completed execution and a\n  delegating constructor for that object\n  exits with an exception, the object\u2019s\n  destructor will be invoked. <strong>If the\n  object was allocated in a\n  new-expression, the matching\n  deallocation function (3.7.4.2, 5.3.4,\n  12.5), if any, is called to free the storage occupied by the object.</strong>\"</p>\n</blockquote>\n", "CreationDate": "2010-11-04T10:21:53.920", "ParentId": "4094996", "Id": "4095666", "LastActivityDate": "2010-11-04T10:21:53.920", "PostTypeId": "2", "Score": "4", "OwnerUserId": "418110"}, "4094996": {"CreationDate": "2010-11-04T08:45:09.907", "ViewCount": "1676", "FavoriteCount": "3", "Id": "4094996", "AcceptedAnswerId": "4095025", "Score": "15", "Title": "What happens to the memory allocated by `new` if the constructor throws?", "CommentCount": "0", "Body": "<p>Will this code cause a memory leak?</p>\n<pre><code>#include &lt;stdexept&gt;\n\nclass MyClass\n{\npublic:\n    MyClass()\n    {\n        throw std::runtime_error(\"Test\");\n    }\n};\n\nint main()\n{\n    try\n    {\n        MyClass * myClass = new MyClass;\n    }\n    catch (const std::exception &amp; exc)\n    {\n        // Memory leak?\n    }\n    return 0;\n}\n</code></pre>\n<p>The memory allocated by <code>new</code> is never deleted. Is this taken care of internally, or it an actual memory leak?</p>\n", "Tags": "<c++>", "LastActivityDate": "2010-11-04T10:21:53.920", "PostTypeId": "1", "AnswerCount": "3", "OwnerUserId": "75889"}});