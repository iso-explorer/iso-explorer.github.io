post_cb({"18278394": {"ParentId": "18278365", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>It is called <code>member initialization list</code>. You may find this thread <a href=\"https://stackoverflow.com/questions/7665021/c-member-initialization-list\">C++ member initialization list</a> useful.</p>\n<p>In the code you posted, it will initialize the class member <code>players</code> with the input value <code>players</code>. (BTW, bad style to use the same names).</p>\n", "OwnerUserId": "1760345", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:28:55.233", "Id": "18278394", "Score": "1", "CreationDate": "2013-08-16T16:50:03.950", "LastActivityDate": "2013-08-16T16:50:03.950"}, "18278365": {"CommentCount": "1", "ViewCount": "140", "ClosedDate": "2013-08-17T06:58:38.677", "CreationDate": "2013-08-16T16:48:24.717", "LastActivityDate": "2013-08-16T19:08:05.833", "Title": "Basic c++ constructor notation", "PostTypeId": "1", "Id": "18278365", "Score": "0", "Body": "<p>I'm learning c++ and I was looking at the following webpage:</p>\n<p><a href=\"http://msdn.microsoft.com/en-us/library/vstudio/bb384842.aspx\" rel=\"nofollow\">http://msdn.microsoft.com/en-us/library/vstudio/bb384842.aspx</a></p>\n<p>The code given on that page contains the following line of code under step 7.</p>\n<pre><code>Cardgame::Cardgame(int players)\n    : players(players)\n{\n    totalParticipants += players;\n    cout &lt;&lt; players &lt;&lt; \" players have started a new game.  There are now \"\n          &lt;&lt; totalParticipants &lt;&lt; \" players in total.\" &lt;&lt; endl;\n}\n</code></pre>\n<p>As I understand it, the first line corresponds to an object constructor which takes a single integer argument. However, I don't understand the line directly after it </p>\n<pre><code>: players(players)\n</code></pre>\n<p>What does this notation mean? Could someone please explain this to me in as simple a way as possible?</p>\n", "Tags": "<c++><visual-c++>", "OwnerUserId": "1322736", "AnswerCount": "4"}, "18278498": {"ParentId": "18278365", "CommentCount": "0", "Body": "<p>As it's already mentioned by taocp, the line refers to member initialization list.</p>\n<p>There are couple of ways to initialize members\n1. member initialization list (efficient approach)\n2. using assignment e.g. players = 10</p>\n<p>It might not make any difference for built-in types e.g. int, char\nbut if you are assigning big objects then use member initialization list. Constructor/ Destructor gets called in assignment which is definitely not warranted</p>\n", "OwnerUserId": "2689994", "PostTypeId": "2", "Id": "18278498", "Score": "0", "CreationDate": "2013-08-16T16:56:09.100", "LastActivityDate": "2013-08-16T16:56:09.100"}, "18278456": {"ParentId": "18278365", "CommentCount": "0", "Body": "<p>This refers to <code>initialization list</code> which is another form of initialising the members of an object.</p>\n<p>Advantage of initialization list over normal construction is that it usually fast as it doesn't create a temporary object before initializing the members.</p>\n<p>And a disadvantage could be that <code>this</code> pointer is to be used a bit carefully in initialization list </p>\n", "OwnerUserId": "2078685", "PostTypeId": "2", "Id": "18278456", "Score": "0", "CreationDate": "2013-08-16T16:53:57.500", "LastActivityDate": "2013-08-16T16:53:57.500"}, "bq_ids": {"n4140": {"so_18278365_18278467_1": {"section_id": 428, "quality": 0.8666666666666667, "length": 13}}, "n3337": {"so_18278365_18278467_1": {"section_id": 420, "quality": 0.8666666666666667, "length": 13}}, "n4659": {"so_18278365_18278467_1": {"section_id": 446, "quality": 0.8666666666666667, "length": 13}}}, "18278467": {"ParentId": "18278365", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>It is called the <em>member-initialization-list</em>.</p>\n<p>It is used to initialize members of a class by choosing the best initializer for it. Here you are initializing your member <code>players</code> with the parameter of the same. (It can be confusing to choose the same name, it is not a really good practice.)</p>\n<p>From the standard :</p>\n<blockquote>\n<p id=\"so_18278365_18278467_0\"><strong>12.6.2 Initializing bases and members [class.base.init]</strong></p>\n<p id=\"so_18278365_18278467_1\">In the de\ufb01nition of a constructor for a class, initializers for direct and virtual base subobjects and non-static data members can be speci\ufb01ed by a ctor-initializer, which has the form</p>\n<pre><code>ctor-initializer:\n    mem-initializer-list\n\nmem-initializer-list:\n    mem-initializer ...opt\n    mem-initializer , mem-initializer-list ...opt\n\nmem-initializer:\n    mem-initializer-id ( expression-listopt)\n    mem-initializer-id braced-init-list\n\nmem-initializer-id:\n    class-or-decltype\n    identifier\n</code></pre>\n</blockquote>\n<p><strong>I really suggest you to read the first post of this thread who explain it very well by quoting <em>Scott Meyers</em> : <a href=\"http://www.cplusplus.com/forum/articles/17820/\" rel=\"nofollow\">http://www.cplusplus.com/forum/articles/17820/</a></strong></p>\n<p>You can get more informations here :<a href=\"http://en.cppreference.com/w/cpp/language/initializer_list\" rel=\"nofollow\">http://en.cppreference.com/w/cpp/language/initializer_list</a></p>\n", "OwnerUserId": "1394283", "LastEditorUserId": "1394283", "LastEditDate": "2013-08-16T19:08:05.833", "Id": "18278467", "Score": "1", "CreationDate": "2013-08-16T16:54:22.813", "LastActivityDate": "2013-08-16T19:08:05.833"}});