post_cb({"21682822": {"ParentId": "21682716", "CommentCount": "1", "Body": "<p>This is a guarantee by the behavior of <code>std::map</code>'s <a href=\"http://en.cppreference.com/w/cpp/container/map/operator_at\" rel=\"nofollow\">operator <code>[]</code></a> overload. If the key does not exist then it will be value-initialized for you. Since <code>int</code>, when value-initialized is assigned to zero, you're safe here.</p>\n", "OwnerUserId": "154744", "PostTypeId": "2", "Id": "21682822", "Score": "1", "CreationDate": "2014-02-10T16:36:39.073", "LastActivityDate": "2014-02-10T16:36:39.073"}, "21682807": {"ParentId": "21682716", "CommentCount": "0", "Body": "<p>It is guaranteed to be zero-initialized for built-in types, and default constructed for user-defined types. The guarantee is that if an element for a given key does not exist, one is inserted, with the mapped_type being <em>value initialized</em>. For built-in types such as <code>int</code>, this means <em>zero initialization</em>.</p>\n<p>More information in <a href=\"http://en.cppreference.com/w/cpp/container/map/operator_at\" rel=\"nofollow\">this reference</a>.</p>\n", "OwnerUserId": "661519", "PostTypeId": "2", "Id": "21682807", "Score": "4", "CreationDate": "2014-02-10T16:36:11.457", "LastActivityDate": "2014-02-10T16:36:11.457"}, "21682858": {"ParentId": "21682716", "CommentCount": "0", "Body": "<p>Yes, the value inserted by <code>[]</code> is guaranteed to be zero. From C++11 23.4.4.3/1:</p>\n<blockquote>\n<p id=\"so_21682716_21682858_0\"><em>Effects:</em> If there is no key equivalent to <code>x</code> in the map, inserts <code>value_type(x, T())</code> into the map.</p>\n</blockquote>\n<p><code>T()</code> specifies value-initialisation which, for numeric types, means it's initialised with the value zero.</p>\n", "OwnerUserId": "204847", "PostTypeId": "2", "Id": "21682858", "Score": "6", "CreationDate": "2014-02-10T16:37:35.120", "LastActivityDate": "2014-02-10T16:37:35.120"}, "bq_ids": {"n4140": {"so_21682716_21682858_0": {"section_id": 1007, "quality": 0.8888888888888888, "length": 8}}, "n3337": {"so_21682716_21682858_0": {"section_id": 992, "quality": 0.8888888888888888, "length": 8}}, "n4659": {"so_21682716_21682858_0": {"section_id": 802, "quality": 0.5555555555555556, "length": 5}}}, "21682716": {"CommentCount": "10", "ViewCount": "780", "CreationDate": "2014-02-10T16:32:34.177", "LastActivityDate": "2014-02-10T16:37:35.120", "Title": "Create A histogram using C++ with map/unordered_map: the default value for a non-existant key", "AcceptedAnswerId": "21682858", "PostTypeId": "1", "Id": "21682716", "Score": "1", "Body": "<p>I am defining a small function to create a histogram of a vector of integers, Initially I defined the following function that first test whether the key exists in the map before assigning or increment the value. </p>\n<pre><code>map&lt;int, int&gt; histogram(vector&lt;int&gt; &amp;a){\n     map&lt;int, int&gt; hist;\n     for (auto &amp;x : a){\n         hist[x] = hist.count(x) == 0 ? 1 : hist[x] + 1; // check key existence \n     }\n     return hist;\n}\n</code></pre>\n<p>Later, I found the following code also works without checking the existence of the key. Therefore the default value for a non-existent key is supposed to be ZERO. I am wondering is this behavior guaranteed to have a default zero value when referencing a key that does not exist? </p>\n<pre><code>map&lt;int, int&gt; histogram(vector&lt;int&gt; &amp;a){\n     map&lt;int, int&gt; hist;\n     for (auto &amp;x : a){\n         hist[x]++;        // without key existence checking. \n     }\n     return hist;\n}\n</code></pre>\n", "Tags": "<c++>", "OwnerUserId": "644027", "AnswerCount": "3"}});