post_cb({"bq_ids": {"n4140": {"so_6275383_6275532_0": {"length": 33, "quality": 0.868421052631579, "section_id": 5493}}, "n3337": {"so_6275383_6275532_0": {"length": 33, "quality": 0.868421052631579, "section_id": 5279}}, "n4659": {"so_6275383_6275532_0": {"length": 30, "quality": 0.7894736842105263, "section_id": 6927}}}, "6275383": {"ViewCount": "110", "Body": "<p>Here is the code, I wrote the comments. \nThe question is I don't know which function will be called after the function unhide in the Derive class.</p>\n<pre><code>    #include &lt;CONIO.H&gt;\n    #include &lt;IOSTREAM&gt;\n    #include &lt;string&gt;\n\n    using namespace std;\n\n    class Base\n    {\n        string strName;\n    public:\n        Base&amp; operator=(const Base &amp;b)\n        {\n            this-&gt;strName = b.strName;\n            cout &lt;&lt; \"copy assignment\" &lt;&lt; endl;\n            return *this;\n        }\n        Base&amp; operator=(string&amp; str)\n        {\n            this-&gt;strName = str;\n            cout &lt;&lt; \"operator=(string&amp; str)\" &lt;&lt; endl;\n            return *this;\n        }\n\n    };\n\n    class Derive : public Base\n    {\n    public:\n        int num;\n        using Base::operator =; // unhide Base::operator=();\n    };\n\n    int main(int argc, char *argv[])\n    {\n        Derive derive1;\n        derive1.num = 1;\n\n        Derive derive2;\n\n        Base b1;\n        derive1 = b1;  // This will call Base&amp; Base::operator=(const Base &amp;b)\n                           //no problem\n\n        string str(\"test\");\n        derive1 = str;  // This will call Base&amp; Base::operator=(string&amp; str)\n                            // no problem\n\n        derive2 = derive1; // What function will this statement call???\n                               // If it calls Base&amp; Base::operator(const Base &amp;b)\n                               // how could it be assigend to a class Derive?\n        return 0;\n    }\n</code></pre>\n<p>But the result of the code is: derive2.num equals to 1!!!, that means the whole class has been copied after the statment, why would this happen?</p>\n<p><strong>Thanks to Tony, I think I got the answer.</strong></p>\n<p><em><strong>here is my explanation:</strong></em></p>\n<p>Based on C++0x 7.3.3.3 and 12.8.10, The using-statement in <code>Derive</code> will be explained like this</p>\n<pre><code>class Derive : public Base\n{\npublic:\n    int num;\n    //using Base::operator =;\n    Base&amp; operator=(const Base &amp;b); // comes form the using-statement\n    Base&amp; operator=(string&amp; str); // comes form the using-statement\n    Derive&amp; operator=(const Derive &amp;); // implicitly declared by complier\n};\n</code></pre>\n<p>So when I wrote:</p>\n<pre><code>string str(\"test\");\nderive1 = str;\n</code></pre>\n<p>function <code>Base&amp; Base::operator=(string&amp; str);</code> will be called,</p>\n<p>and when I wrote:</p>\n<pre><code>Base b1;\nderive1 = b1;\n</code></pre>\n<p>function <code>Base&amp; Base::operator=(const Base &amp;b);</code> will be called,</p>\n<p>finnaly, when I wrote:</p>\n<pre><code>derive2 = derive1;\n</code></pre>\n<p>function <code>Derive&amp; Dervie::operator=(const Derive&amp;);</code> will be called.</p>\n", "AcceptedAnswerId": "6275532", "Title": "Which function will it call?", "CreationDate": "2011-06-08T07:16:58.430", "Id": "6275383", "CommentCount": "4", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2011-06-08T09:05:07.420", "LastEditorUserId": "688912", "LastActivityDate": "2011-06-08T09:05:07.420", "Score": "3", "OwnerUserId": "688912", "Tags": "<c++><inheritance><operators><operator-overloading>", "AnswerCount": "2"}, "6275496": {"Id": "6275496", "PostTypeId": "2", "Body": "<p>It will call the derived <code>operator=</code>, which in its automatically generated implementation will call <code>operator=</code> from <code>Base</code> as well as copy the members in <code>Derive</code>.</p>\n", "LastActivityDate": "2011-06-08T07:27:44.537", "CommentCount": "3", "CreationDate": "2011-06-08T07:27:44.537", "ParentId": "6275383", "Score": "1", "OwnerUserId": "98117"}, "6275532": {"Id": "6275532", "PostTypeId": "2", "Body": "<p>Standard 7.3.3-4 (from an old draft, but in this regard still valid):  </p>\n<blockquote>\n<p id=\"so_6275383_6275532_0\">If an assignment operator brought from a base class into a derived class scope has the signature of a copy-assignment operator for the derived class (class.copy), the using-declaration does not by itself suppress the implicit declaration of the derived class copy-assignment operator; the copy-assignment operator from the base class is hidden or overridden by the implicitly-declared copy-assignment operator of the derived class, as described below. </p>\n</blockquote>\n<p>So, the implicit <code>Derived::operator=()</code> is used.</p>\n", "LastActivityDate": "2011-06-08T07:31:08.337", "CommentCount": "4", "CreationDate": "2011-06-08T07:31:08.337", "ParentId": "6275383", "Score": "3", "OwnerUserId": "410767"}});