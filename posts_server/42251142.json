post_cb({"42252328": {"Id": "42252328", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_42251142_42252328_0\">What does the C++ standard say about this?</p>\n<p id=\"so_42251142_42252328_1\">Is the above example code standard-conformant?</p>\n</blockquote>\n<p>In C++14, it is non-conformant:</p>\n<blockquote>\n<p id=\"so_42251142_42252328_2\">n4431 (2015) standard draft [dcl.init] / 7:</p>\n<p id=\"so_42251142_42252328_3\">If a program calls for the default initialization of an object of a const-qualified type\n  T\n  ,\n  T\n  shall be a class type\n  with a user-provided default constructor.</p>\n</blockquote>\n<p><code>my_struct</code> has no user-provided default constructor, so you shall not default-initialize.</p>\n<p>However, some newer compilers appear to have chosen to relax the rule, possibly because it is subject to a defect report: <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_active.html#253\" rel=\"nofollow noreferrer\">DR 253</a>.</p>\n<hr>\n<p>The upcoming standard has changed wording:</p>\n<blockquote>\n<p id=\"so_42251142_42252328_4\">Current (2017) standard draft <a href=\"http://eel.is/c++draft/dcl.init#7\" rel=\"nofollow noreferrer\">[dcl.init] / 7</a>:</p>\n<p id=\"so_42251142_42252328_5\">A class type T is const-default-constructible if default-initialization of T would invoke a user-provided constructor of T (not inherited from a base class) or if</p>\n<p id=\"so_42251142_42252328_6\">(7.4) each direct non-variant non-static data member M of T has a default member initializer or, if M is of class type X (or array thereof), X is const-default-constructible,</p>\n<p id=\"so_42251142_42252328_7\">(7.5) if T is a union with at least one non-static data member, exactly one variant member has a default member initializer,</p>\n<p id=\"so_42251142_42252328_8\">(7.6) if T is not a union, for each anonymous union member with at least one non-static data member (if any), exactly one non-static data member has a default member initializer, and</p>\n<p id=\"so_42251142_42252328_9\">(7.7) each potentially constructed base class of T is const-default-constructible. </p>\n<p id=\"so_42251142_42252328_10\">If a program calls for the default-initialization of an object of a const-qualified type T, T shall be a const-default-constructible class type or array thereof.</p>\n</blockquote>\n<p>The wording is a bit ambiguous to me, but I think that since <code>my_struct</code> has no members that violate 7.4 (and is not a union, so 7.5 does not apply, has no union members so 7.6 does not apply and no bases, so 7.7 does not apply), it is const-default-constructible and therefore the example will be conformant.</p>\n</hr>", "LastEditorUserId": "2079303", "LastActivityDate": "2017-05-15T16:33:37.317", "Score": "4", "CreationDate": "2017-02-15T14:37:29.257", "ParentId": "42251142", "CommentCount": "0", "OwnerUserId": "2079303", "LastEditDate": "2017-05-15T16:33:37.317"}, "bq_ids": {"n4140": {"so_42251142_42251142_0": {"length": 22, "quality": 0.7096774193548387, "section_id": 5431}, "so_42251142_42252328_7": {"length": 7, "quality": 0.5384615384615384, "section_id": 369}, "so_42251142_42252328_8": {"length": 11, "quality": 0.6111111111111112, "section_id": 369}, "so_42251142_42252328_3": {"length": 11, "quality": 1.0, "section_id": 3286}, "so_42251142_42252328_6": {"length": 10, "quality": 0.7142857142857143, "section_id": 369}, "so_42251142_42251142_1": {"length": 33, "quality": 0.9428571428571428, "section_id": 3286}, "so_42251142_42252328_9": {"length": 4, "quality": 0.6666666666666666, "section_id": 369}, "so_42251142_42252328_10": {"length": 6, "quality": 0.6, "section_id": 369}}, "n3337": {"so_42251142_42252328_10": {"length": 6, "quality": 0.6, "section_id": 359}, "so_42251142_42252328_7": {"length": 8, "quality": 0.6153846153846154, "section_id": 5686}, "so_42251142_42252328_8": {"length": 12, "quality": 0.6666666666666666, "section_id": 359}, "so_42251142_42252328_3": {"length": 11, "quality": 1.0, "section_id": 3156}, "so_42251142_42252328_6": {"length": 10, "quality": 0.7142857142857143, "section_id": 359}, "so_42251142_42251142_1": {"length": 24, "quality": 0.6857142857142857, "section_id": 3156}, "so_42251142_42251142_0": {"length": 22, "quality": 0.7096774193548387, "section_id": 5226}}, "n4659": {"so_42251142_42252328_5": {"length": 10, "quality": 0.9090909090909091, "section_id": 4048}, "so_42251142_42252328_10": {"length": 10, "quality": 1.0, "section_id": 4048}, "so_42251142_42252328_7": {"length": 13, "quality": 1.0, "section_id": 4048}, "so_42251142_42252328_3": {"length": 7, "quality": 0.6363636363636364, "section_id": 382}, "so_42251142_42252328_6": {"length": 14, "quality": 1.0, "section_id": 4048}, "so_42251142_42252328_8": {"length": 18, "quality": 1.0, "section_id": 4048}, "so_42251142_42252328_9": {"length": 6, "quality": 1.0, "section_id": 4048}, "so_42251142_42251142_0": {"length": 22, "quality": 0.7096774193548387, "section_id": 6859}}}, "42251142": {"ViewCount": "117", "Body": "<p>The following code compiles with some versions with GCC and some versions of Clang (see below which versions).</p>\n<pre><code>struct my_struct {};\n\nint main(int argc, char** argv) {\n  const my_struct my_object;\n  return 0;\n};\n</code></pre>\n<p>Compile with :<code>g++ clang_error.cpp</code> and <code>clang++ clang_error.cpp</code>. Where I had g++ at <em>4.8.4</em> and clang++ at 3.6.0.</p>\n<p>The error message is:</p>\n<pre><code>clang_error.cpp:7:19: error: default initialization of an object of const type 'const my_struct' without a user-provided default constructor\n   const my_struct my_object;\n                   ^\nclang_error.cpp:7:28: note: add an explicit initializer to initialize 'my_object'\n   const my_struct my_object;\n                            ^\n                             = {}\n1 error generated.\n</code></pre>\n<h1>Versions affected</h1>\n<p>Using the <em>Compiler Explorer</em> <a href=\"https://godbolt.org/g/V770Wr\" rel=\"nofollow noreferrer\">here</a>, I can see that GCC up to 4.5.4 is affected. Clang is affected up to 3.9.0.</p>\n<h1>Question</h1>\n<p>My question is: <strong>What does the C++ standard say about this?</strong> Ideally, I'd care about C++14 but I'm not picky there.</p>\n<p><strong>Is the above example code standard-conformant?</strong></p>\n<h2>What I found so far</h2>\n<p>I found the following in <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3797.pdf\" rel=\"nofollow noreferrer\">Draft N3797</a> of C++14.</p>\n<blockquote>\n<p id=\"so_42251142_42251142_0\">\u00a7 7.1.6.1 The cv-qualifiers [dcl.type.cv]<br>\n  2 [ Note: Declaring a variable const can affect its linkage (7.1.1) and its usability in constant expressions (5.19).\n  As described in 8.5, the definition of an object or subobject of const-qualified type must specify an initializer\n  or <strong>be subject to default-initialization.</strong> \u2014 end note ]</br></p>\n<p id=\"so_42251142_42251142_1\">\u00a7 8.5<br>\n  7 To default-initialize an object of type T means:<br>\n  \u2014 if T is a (possibly cv-qualified) class type (Clause 9), the default constructor (12.1) for T is called (and\n  <strong>the initialization is ill-formed if T has no default constructor</strong> or overload resolution (13.3) results in an\n  ambiguity or in a function that is deleted or inaccessible from the context of the initialization);<br>\n  \u2014 if T is an array type, each element is default-initialized;<br>\n  \u2014 otherwise, no initialization is performed.  </br></br></br></br></p>\n</blockquote>\n", "AcceptedAnswerId": "42252328", "Title": "Default Initializer of empty struct in clang vs gcc", "CreationDate": "2017-02-15T13:46:25.000", "Id": "42251142", "CommentCount": "5", "PostTypeId": "1", "LastActivityDate": "2017-05-15T16:33:37.317", "Score": "2", "OwnerUserId": "461597", "Tags": "<c++><g++><c++14><clang++>", "AnswerCount": "1"}});