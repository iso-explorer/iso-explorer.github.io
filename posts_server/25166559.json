post_cb({"bq_ids": {"n4140": {"so_25166559_25167027_0": {"length": 19, "quality": 1.0, "section_id": 6679}}, "n3337": {"so_25166559_25167027_0": {"length": 19, "quality": 1.0, "section_id": 6434}}, "n4659": {"so_25166559_25167027_0": {"length": 19, "quality": 1.0, "section_id": 8154}}}, "25166559": {"ViewCount": "173", "Body": "<p>Using g++ 4.4.6, the following does not compile:</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct Base {};\n\nstd::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const Base&amp;) { return os &lt;&lt; \"Hi\\n\"; }\n\ntemplate &lt;class T&gt;\nclass Container\n{\n   class Derived : Base {};\n\n   template &lt;class U&gt;\n   friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const typename Container&lt;U&gt;::Derived&amp;);\n};\n\ntemplate &lt;typename U&gt;\nstd::ostream&amp;\noperator&lt;&lt;(std::ostream&amp; os, const typename Container&lt;U&gt;::Derived&amp; der)\n{\n   return os &lt;&lt; static_cast&lt;const Base&amp;&gt;(der);\n}\n\nint main()\n{\n   Container&lt;int&gt;::Derived d;\n   std::cout &lt;&lt; d;\n   return 0;\n}\n</code></pre>\n<p>Result:</p>\n<pre><code>/tmp $ g++ test.c\ntest.c: In function \u2018int main()\u2019:\ntest.c:26: error: \u2018Base\u2019 is an inaccessible base of \u2018Container&lt;int&gt;::Derived\u2019\n/tmp $ g++ --version\n</code></pre>\n<p>However, if I simply change </p>\n<pre><code>class Derived : Base {}\n</code></pre>\n<p>to</p>\n<pre><code>struct Derived : Base {}\n</code></pre>\n<p>it compiles without issue.  What's going on here?</p>\n", "AcceptedAnswerId": "25167027", "Title": "Inaccessible base when inner class is class vs struct", "CreationDate": "2014-08-06T17:30:39.960", "Id": "25166559", "CommentCount": "3", "PostTypeId": "1", "LastActivityDate": "2014-08-06T17:59:07.530", "Score": "-1", "OwnerUserId": "464289", "Tags": "<c++>", "AnswerCount": "1"}, "25167027": {"Id": "25167027", "PostTypeId": "2", "Body": "<p>To make it an answer I'll directly quote the C++ standard, section \u00a7 11.2, [class.access.base]</p>\n<blockquote>\n<p id=\"so_25166559_25167027_0\">In the absence of an access-specifier for a base class, public is assumed when the derived class is defined with the class-key struct and private is assumed when the class is defined with the class-key class</p>\n</blockquote>\n<p>So in your case, the first has  private inheritance of <code>Base</code>, the second has public.</p>\n", "LastActivityDate": "2014-08-06T17:59:07.530", "CommentCount": "1", "CreationDate": "2014-08-06T17:59:07.530", "ParentId": "25166559", "Score": "1", "OwnerUserId": "3510483"}});