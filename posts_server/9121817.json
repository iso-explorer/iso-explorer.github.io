post_cb({"9121817": {"ViewCount": "1205", "Body": "<p>I have written a function which tries to do an auto-allocating sprintf by returning a std::string instead of writing into a user-supplied <code>char*</code>.  (Please, no answers recommending iostreams or Boost.Format or friends -- I know they exist, I do use them in other contexts, but there is a requirement for this particular case.)</p>\n<pre><code>std::string FormatString(const std::string&amp; format, va_list argList)\n{\n    char smallBuffer[500], *text = smallBuffer;\n    int length = _countof(smallBuffer);\n\n    // MSVC is not C99 conformant, so its vsnprintf returns -1\n    // on insufficient buffer space\n    int outputSize = _vsnprintf(text, length, format.c_str(), argList);\n    while (outputSize &lt; 0 &amp;&amp; errno == ERANGE &amp;&amp; length &gt; 0)\n    {\n        length &lt;&lt;= 1;\n        if (text != smallBuffer) { delete[] text; }\n        text = new char[length];\n        outputSize = _vsnprintf(text, length, format.c_str(), argList);\n    }\n    if (outputSize &lt; 0)\n    {\n        throw std::runtime_error(\"Failed to format string.\");\n    }\n\n    std::string ret(text);\n    if (text != smallBuffer)\n    {\n        delete[] text;\n    }\n    return ret;\n}\n\nstd::string FormatString(const std::string&amp; format, ...)\n{\n    va_list argList;\n    va_start(argList, format);\n\n    std::string result;\n    try\n    {\n        result = FormatString(format, argList);\n    }\n    catch(...)\n    {\n        va_end(argList);\n        throw;\n    }\n    va_end(argList);\n\n    return result;\n}\n\nint _tmain(int argc, _TCHAR* argv[])\n{\n    int foo = 1234;\n    std::string bar = \"BlaBla\";\n    std::cout &lt;&lt; FormatString(\"%i (%s)\", foo, bar.c_str()) &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>\n<p>(And yes, I see the irony of piping a C-formatted string to a C++ iostream.  This is just test code.)</p>\n<p>Unfortunately, using VS2008, it's crashing deep within the bowels of the printf internals, apparently because it's reading the wrong arguments out of the <code>va_list</code> (according to the debugger, after the <code>va_start</code> it's pointing at a four-byte null sequence immediately prior to the \"real\" first parameter).</p>\n<p>Of particular note is that if in the variadic function I change the <code>const std::string&amp; format</code> to just <code>std::string format</code> (ie. pass by value), it works properly; it also does so if I change it to a <code>const char *</code>, of course.</p>\n<p>Is this some sort of compiler bug, or is it not legal to use a va_list with reference parameters?</p>\n", "AcceptedAnswerId": "9121926", "Title": "std::string and stdarg.h", "CreationDate": "2012-02-02T23:51:29.790", "Id": "9121817", "CommentCount": "2", "PostTypeId": "1", "LastActivityDate": "2012-02-03T00:06:54.750", "Score": "1", "OwnerUserId": "43534", "Tags": "<c++><printf><stdstring><variadic-functions>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_9121817_9121926_0": {"length": 38, "quality": 0.8444444444444444, "section_id": 6966}}, "n3337": {"so_9121817_9121926_0": {"length": 41, "quality": 0.9111111111111111, "section_id": 6713}}, "n4659": {"so_9121817_9121926_0": {"length": 37, "quality": 0.8222222222222222, "section_id": 8465}}}, "9121926": {"Id": "9121926", "PostTypeId": "2", "Body": "<p>I think you are out of luck if you want to pass a reference. Here is what the C++2011 standard has to say about the subject in 18.10 [support.runtime] paragraph 3:</p>\n<blockquote>\n<p id=\"so_9121817_9121926_0\">The restrictions that ISO C places on the second parameter to the va_start() macro in header  are different in this International Standard. The parameter parmN is the identifier of the rightmost parameter in the variable parameter list of the function definition (the one just before the ...).230    If the parameter parmN is declared with a function, array, or reference type, or with a type that is not compatible with the type that results when passing an argument for which there is no parameter, the behavior is undefined.</p>\n</blockquote>\n", "LastActivityDate": "2012-02-03T00:06:54.750", "CommentCount": "2", "CreationDate": "2012-02-03T00:06:54.750", "ParentId": "9121817", "Score": "1", "OwnerUserId": "1120273"}});