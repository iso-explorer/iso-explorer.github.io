post_cb({"39314241": {"Id": "39314241", "PostTypeId": "2", "Body": "<p>This function should be public, so that you can access it through main(). </p>\n<pre><code>void print(){\n    /**print or return your private variable here**/\n}\n</code></pre>\n", "LastEditorUserId": "2394816", "LastActivityDate": "2016-09-04T07:34:13.587", "Score": "0", "CreationDate": "2016-09-04T06:41:08.503", "ParentId": "33253245", "CommentCount": "0", "OwnerUserId": "6792480", "LastEditDate": "2016-09-04T07:34:13.587"}, "33253334": {"Id": "33253334", "PostTypeId": "2", "Body": "<p>As you correctly observed, only member functions (including constructors and destructors) and <code>friend</code> functions and classes may access you're <code>private</code>s. That's the purpose of <code>friend</code>s: they provide an exception (<strong>not</strong> <code>std::exception</code>) to the encapsulation mechanism.</p>\n<p>Now you may think about whether this breaks encapsulation or actually stabilizes it.</p>\n", "LastActivityDate": "2015-10-21T07:26:58.197", "CommentCount": "0", "CreationDate": "2015-10-21T07:26:58.197", "ParentId": "33253245", "Score": "0", "OwnerUserId": "3494013"}, "33253297": {"Id": "33253297", "PostTypeId": "2", "Body": "<p>That's exactly what friend functions do: any friend function of a class can access it's private members. Since your <code>printPrivateMember</code> is declared as a friend of <code>a</code>, it can access it's private <code>x</code> member. Since main is not a friend function, it can't.</p>\n<p>Forestalling a question about declaring <code>main</code> as friend, <a href=\"https://stackoverflow.com/questions/14582603/declare-main-as-friend-function-in-c\">this question</a> covers it.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2015-10-21T07:30:20.403", "Score": "1", "CreationDate": "2015-10-21T07:25:09.097", "ParentId": "33253245", "CommentCount": "3", "OwnerUserId": "1490355", "LastEditDate": "2017-05-23T12:34:50.137"}, "33253245": {"ViewCount": "3921", "Body": "<p>My code:-</p>\n<pre><code>#include&lt;iostream&gt;\nusing namespace std;\n\nclass a{\n   private:\n      int x;\n   public:\n      a(int data)\n      {\n         x=data;\n      }\n      friend void printPrivateMember(a);\n};\n\nvoid printPrivateMember(a obj)\n{\n   cout&lt;&lt;obj.x; //I can access private data member by an object inside this function.\n}\n\nint main()\n{\n   a obj1(5);\n   printPrivateMember(obj1);\n   cout&lt;&lt;obj1.x; //this gives error\n   return 0;\n}\n</code></pre>\n<p>I wanted to know as to how can I access a PRIVATE data type by an object in the friend function but cannot do so in main.</p>\n<p>When I read about access specifier . It was specified that private can be accessed by only member functions (I don't have a problem with the friend function) and not by the object of that class. I wanted to know as to what difference is there because of which I can access private member by an object in one case and cannot do so in another. The same is applicable for copy constructor. </p>\n", "Title": "How does a function access private data member of a class object?", "CreationDate": "2015-10-21T07:22:56.880", "LastActivityDate": "2016-09-04T07:34:13.587", "CommentCount": "1", "LastEditDate": "2016-09-04T07:04:43.293", "PostTypeId": "1", "LastEditorUserId": "3309790", "Id": "33253245", "Score": "1", "OwnerUserId": "3715862", "Tags": "<c++><private><friend><access-specifier><friend-function>", "AnswerCount": "6"}, "bq_ids": {"n4140": {"so_33253245_33253345_1": {"length": 29, "quality": 0.9666666666666667, "section_id": 6664}}, "n3337": {"so_33253245_33253345_1": {"length": 29, "quality": 0.9666666666666667, "section_id": 6419}}, "n4659": {"so_33253245_33253345_1": {"length": 29, "quality": 0.9666666666666667, "section_id": 8139}}}, "33253515": {"Id": "33253515", "PostTypeId": "2", "Body": "<p>Your use of the phrase <strong>not by the object of that class</strong> makes me think that you are unclear on the access rules. The access rules don't apply to the objects but who can access member variables and member functions of the objects.</p>\n<p>A member variable of a class can be accessed in a function -- which can be a member function of the class, a member function of another class, or a global function.</p>\n<p>It can also be accessed in the global space, e.g. to initialize a global variable.</p>\n<p>A <code>friend</code> declaration in a class changes the default access rules that are in place by use of <code>private</code>, <code>protected</code>, and <code>public</code> access specifiers.</p>\n<p>A function declared a <code>friend</code> of a class can access all the members of all instances of the class.</p>\n<p>The <a href=\"https://stackoverflow.com/a/33253345/434551\">answer by songyuanyao</a> cites the section of the standard that provides more details on the subject.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2015-10-21T07:35:52.893", "Score": "0", "CreationDate": "2015-10-21T07:35:52.893", "ParentId": "33253245", "CommentCount": "3", "OwnerUserId": "434551", "LastEditDate": "2017-05-23T10:27:26.407"}, "33253456": {"Id": "33253456", "PostTypeId": "2", "Body": "<p>if you want to access private member, you'd better use a public function like:</p>\n<pre><code>class a {\n private:\n   int m;\n public:\n   int getM() {\n     return m;\n   }\n};\n</code></pre>\n", "LastActivityDate": "2015-10-21T07:32:28.717", "CommentCount": "0", "CreationDate": "2015-10-21T07:32:28.717", "ParentId": "33253245", "Score": "0", "OwnerUserId": "5470378"}, "33253345": {"Id": "33253345", "PostTypeId": "2", "Body": "<p>Because friends could do that.</p>\n<p><a href=\"http://eel.is/c++draft/class.access#1\" rel=\"nofollow\">$11/1 Member access control [class.access]</a></p>\n<p>(emphasis mine)</p>\n<blockquote>\n<p id=\"so_33253245_33253345_0\">1 A member of a class can be </p>\n<p id=\"so_33253245_33253345_1\">(1.1) \u2014 private; that is, its name can be\n  used only by members and <strong>friends of the class</strong> in which it is\n  declared.<br>\n  (1.2) \u2014 protected; that is, its name can be used only by\n  members and friends of the class in which it is declared, by classes\n  derived from that class, and by their friends (see 11.4).<br>\n  (1.3) \u2014\n  public; that is, its name can be used anywhere without access\n  restriction.</br></br></p>\n</blockquote>\n", "LastEditorUserId": "3309790", "LastActivityDate": "2016-09-04T07:04:50.073", "Score": "1", "CreationDate": "2015-10-21T07:27:27.630", "ParentId": "33253245", "CommentCount": "0", "OwnerUserId": "3309790", "LastEditDate": "2016-09-04T07:04:50.073"}});