post_cb({"20750871": {"ParentId": "20750669", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2013-12-23T20:40:39.520", "Score": "1", "LastEditorUserId": "592323", "LastEditDate": "2013-12-23T20:47:39.367", "Id": "20750871", "OwnerUserId": "592323", "Body": "<p>As the compile error indicates, lambda objects aren't assignable. You can use a different type of functor for the queue but still write it as a labmda:</p>\n<ol>\n<li><p>Use <code>std::function&lt;bool(ifpair,ifpair)&gt;</code>: <a href=\"http://ideone.com/HZywoV\" rel=\"nofollow\">http://ideone.com/HZywoV</a></p>\n<p>But this adds (probably noticable) overhead due to some more indirections in the implementation of <code>std::function</code> but I guess this heavily depends on the implementation of the standard library and the compiler optimizations. Might be the nicest solution regarding how the code looks though.</p></li>\n<li><p>Use a function pointer <code>bool(*)(ifpair,ifpair)</code>: <a href=\"http://ideone.com/ZhFq3C\" rel=\"nofollow\">http://ideone.com/ZhFq3C</a></p>\n<p>This should not suffer from any overhead compared to <code>std::function</code> but to your current solution, since there might be some compiler optimizations done to your lambda code which are then not possible (i.e. inlining it into the rest of the <code>std::queue</code> code which for example eliminates copying the two pairs). Using function pointers looks pretty old-school though.</p></li>\n<li><p>Use a custom functor class which can be as simple as: <a href=\"http://ideone.com/9pcQFc\" rel=\"nofollow\">http://ideone.com/9pcQFc</a></p>\n<pre><code>template&lt;typename Pair&gt;\nstruct GreaterBySecond {\n    bool operator()(Pair a, Pair b) const {\n        return a.second &gt; b.second;\n    }\n};\n</code></pre>\n<p>This should eliminate all overhead discussed above. I'd prefer this if performance matters.</p></li>\n</ol>\n", "LastActivityDate": "2013-12-23T20:47:39.367"}, "20750820": {"ParentId": "20750669", "CommentCount": "5", "Body": "<p>Lambdas aren't assignable \u2013 5.1.2/19:</p>\n<blockquote>\n<p id=\"so_20750669_20750820_0\">The closure type associated with a lambda-expression has a deleted default constructor and a deleted copy assignment operator.</p>\n</blockquote>\n<p>The swap of the containers wants to assign the comparators, too, so that doesn't work.</p>\n<p>However, you can easily make it work by converting the stateless lambda to a function pointer first:</p>\n<pre><code>bool (*p)(ifpair, ifpair) = [](ifpair a, ifpair b) { return a.second &gt; b.second; };\n</code></pre>\n<p>Now use:</p>\n<pre><code>priority_queue&lt;ifpair, vector&lt;ifpair&gt;, bool(*)(ifpair, ifpair)&gt;\n</code></pre>\n<p>(You might want to introduce a typedef for the function type: <code>using comp_type = bool(iftype, iftype)</code>, and then use <code>comp_type *</code> everywhere.)</p>\n", "OwnerUserId": "596781", "PostTypeId": "2", "Id": "20750820", "Score": "1", "CreationDate": "2013-12-23T20:36:55.370", "LastActivityDate": "2013-12-23T20:36:55.370"}, "20750669": {"CommentCount": "5", "CreationDate": "2013-12-23T20:26:32.203", "PostTypeId": "1", "AcceptedAnswerId": "20751106", "LastEditorUserId": "-1", "LastActivityDate": "2013-12-23T21:26:39.770", "LastEditDate": "2017-05-23T10:24:18.720", "ViewCount": "525", "FavoriteCount": "2", "Title": "Can you swap a std::queue with a lambda comparator?", "Id": "20750669", "Score": "6", "Body": "<p>I am trying to clear a std::queue using the example in <a href=\"https://stackoverflow.com/a/709161/837451\">https://stackoverflow.com/a/709161/837451</a> via a swap.  However, it doesn't seem to work with a lambda comparator due to the \"deleted function\" error.</p>\n<p>Minimal <del>working</del> failing example:</p>\n<pre><code>#include &lt;queue&gt;\n#include &lt;vector&gt;\nusing namespace std;\nint main(){\n    typedef pair&lt;int,float&gt; ifpair;\n    auto comp = []( ifpair a,  ifpair b ) { return a.second &gt; b.second; };\n    typedef priority_queue&lt; ifpair , vector&lt;ifpair&gt;, decltype( comp ) &gt; t_npq;\n    t_npq npq( comp );\n    //do something with npq. finish using it (without emptying it) and clear for next round\n    t_npq empty( comp );\n    swap(npq , empty);\n}\n</code></pre>\n<p>Compile with</p>\n<pre><code>g++ -std=c++11 /tmp/test.cpp -o /tmp/o\n</code></pre>\n<p>And I get the following error:</p>\n<pre><code>/usr/include/c++/4.8/bits/move.h:176:11: error: use of deleted function \u2018main()::__lambda0&amp; main()::__lambda0::operator=(const main()::__lambda0&amp;)\u2019\n   __a = _GLIBCXX_MOVE(__b);\n       ^\n/tmp/test.cpp:6:18: note: a lambda closure type has a deleted copy assignment operator\n</code></pre>\n<p>g++ -v</p>\n<pre><code>Using built-in specs.\nCOLLECT_GCC=g++\nCOLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-linux-gnu/4.8/lto-wrapper\nTarget: x86_64-linux-gnu\nConfigured with: ../src/configure -v --with-pkgversion='Ubuntu/Linaro 4.8.1-10ubuntu9' --with-bugurl=file:///usr/share/doc/gcc-4.8/README.Bugs --enable-languages=c,c++,java,go,d,fortran,objc,obj-c++ --prefix=/usr --program-suffix=-4.8 --enable-shared --enable-linker-build-id --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --with-gxx-include-dir=/usr/include/c++/4.8 --libdir=/usr/lib --enable-nls --with-sysroot=/ --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --enable-gnu-unique-object --enable-plugin --with-system-zlib --disable-browser-plugin --enable-java-awt=gtk --enable-gtk-cairo --with-java-home=/usr/lib/jvm/java-1.5.0-gcj-4.8-amd64/jre --enable-java-home --with-jvm-root-dir=/usr/lib/jvm/java-1.5.0-gcj-4.8-amd64 --with-jvm-jar-dir=/usr/lib/jvm-exports/java-1.5.0-gcj-4.8-amd64 --with-arch-directory=amd64 --with-ecj-jar=/usr/share/java/eclipse-ecj.jar --enable-objc-gc --enable-multiarch --disable-werror --with-arch-32=i686 --with-abi=m64 --with-multilib-list=m32,m64,mx32 --with-tune=generic --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu\nThread model: posix\ngcc version 4.8.1 (Ubuntu/Linaro 4.8.1-10ubuntu9) \n</code></pre>\n<p>I'm kind of curious what exactly is going on here but more importantly I would really like to know how to make this work.</p>\n", "Tags": "<c++><c++11><stl><lambda><deleted-functions>", "OwnerUserId": "837451", "AnswerCount": "4"}, "20751106": {"ParentId": "20750669", "PostTypeId": "2", "CommentCount": "4", "CreationDate": "2013-12-23T21:00:43.120", "Score": "7", "LastEditorUserId": "1120273", "LastEditDate": "2013-12-23T21:26:39.770", "Id": "20751106", "OwnerUserId": "1120273", "Body": "<p>While the result of a lambda expression is move constructible it isn't necessarily move assignable and certainly not copyable. I would just bypass the problem by using a <code>std::reference_wrapper&lt;decltype(comp)&gt;</code> for the comparator object:</p>\n<pre><code>typedef pair&lt;int,float&gt; ifpair;\nauto comp = []( ifpair a,  ifpair b ) { return a.second &gt; b.second; };\ntypedef priority_queue&lt; ifpair , vector&lt;ifpair&gt;,\n                        std::reference_wrapper&lt;decltype( comp ) &gt;&gt; t_npq;\nt_npq npq( std::ref(comp) );\nt_npq empty( std::ref(comp) );\nswap(npq , empty);\n</code></pre>\n<p>Since the full type information of the lambda expression is retained by the reference wrapper, this should work even if the closure isn't empty and, where viable, it should be possible to inline the function.</p>\n", "LastActivityDate": "2013-12-23T21:26:39.770"}, "20750814": {"ParentId": "20750669", "CommentCount": "1", "Body": "<p>Have you tried to use <code>std::function</code>?</p>\n<pre><code>#include &lt;queue&gt;\n#include &lt;vector&gt;\n#include &lt;functional&gt;\nusing namespace std;\nint main(){\n    typedef pair&lt;int,float&gt; ifpair;\n    std::function&lt; bool ( ifpair, ifpair )&gt; comp = []( ifpair a,  ifpair b ) { return a.second &gt; b.second; };\n    typedef priority_queue&lt; ifpair , vector&lt;ifpair&gt;, decltype( comp ) &gt; t_npq;\n    t_npq npq( comp );\n    //do something with npq. finish using it (without emptying it) and clear for next round\n    t_npq empty( comp );\n    swap(npq , empty);\n}\n</code></pre>\n", "OwnerUserId": "3123654", "PostTypeId": "2", "Id": "20750814", "Score": "1", "CreationDate": "2013-12-23T20:36:23.377", "LastActivityDate": "2013-12-23T20:36:23.377"}, "bq_ids": {"n4140": {"so_20750669_20750820_0": {"section_id": 5979, "quality": 0.9166666666666666, "length": 11}}, "n3337": {"so_20750669_20750820_0": {"section_id": 5747, "quality": 0.9166666666666666, "length": 11}}, "n4659": {"so_20750669_20750820_0": {"section_id": 7461, "quality": 0.8333333333333334, "length": 10}}}});