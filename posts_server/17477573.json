post_cb({"17477573": {"CommentCount": "1", "ViewCount": "271", "PostTypeId": "1", "LastEditorUserId": "563765", "CreationDate": "2013-07-04T20:14:11.103", "LastActivityDate": "2013-07-05T08:35:58.450", "Title": "Error in Stroustrup's The C++ Programming Language?", "FavoriteCount": "1", "LastEditDate": "2013-07-05T08:35:58.450", "Id": "17477573", "Score": "3", "Body": "<p>The last sentence of \u00a76.3.5.1 from Stroustrup's <em>The C++ Programming Language</em> (4th edition here) is:</p>\n<blockquote>\n<p id=\"so_17477573_17477573_0\">A member of an array or a class is default initialized if the array or structure is.</p>\n</blockquote>\n<p>However, <a href=\"http://codepad.org/UsBchyrW\" rel=\"nofollow\">this test</a> shows <em>uninitialized</em> members of a default initialized object (I also tried with <code>g++4.7 -std=c++11</code>)</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct Foo\n{\n    int i;\n\n    Foo();\n};\n\nFoo::Foo() {}\n\nint main()\n{\n    Foo f;\n    std::cout &lt;&lt; \"f.i: \" &lt;&lt; f.i &lt;&lt; std::endl;\n\n    return 0;\n}\n</code></pre>\n<p>I must be missing something, but is there an explanation that doesn't mean an error in Stroustrup's affirmation?</p>\n<hr>\n<p>EDIT: After the answers I understand that the concept of <em>default initialized</em> is supposed to include what is called <em>uninitialized</em> in other parts of the text (e.g. in \u00a717.3.1). This sounds very unclear to me. In fact, using <em>uninitialized</em> to mean anything other than \"not explicitly user-initialized\" (as is the case in there) is a contradiction: <strong>some things are default initialized and yet uninitialized</strong>. Unless one drops the natural language evidence that X and un-X classify opposite, exclusive sets of things...</p>\n<p>Also, an earlier sentence in the same section (\u00a76.3.5.1) reads </p>\n<blockquote>\n<p id=\"so_17477573_17477573_1\">Local variables [...] are not initialized by default unless they are of user-defined types with a default constructor [...]</p>\n</blockquote>\n<p>The contradiction is apparent here again. Accepting both the first and latter statements to be true <strong>implies that there are variables (namely local variables) that are simultaneously <em>default initialized</em> and <em>not initialized by default</em></strong>. </p>\n<p>IMHO this is, at best, a very unclear use of natural language to describe something.</p>\n</hr>", "Tags": "<c++><default-constructor><initialization><built-in-types>", "OwnerUserId": "563765", "AnswerCount": "1"}, "17477638": {"ParentId": "17477573", "CommentCount": "6", "Body": "<p>Per \u00a7 8.5/7:</p>\n<blockquote>\n<p id=\"so_17477573_17477638_0\">To default-initialize an object of type T means:<br>\n  \u2014 if T is a (possibly cv-quali\ufb01ed) class type (Clause 9), the default constructor for T is called (and the initialization is ill-formed if T has no accessible default constructor);<br>\n  \u2014 if T is an array type, each element is default-initialized;<br>\n  \u2014 otherwise, no initialization is performed.</br></br></br></p>\n</blockquote>\n<p><code>int</code> falls in the last point, so it is left uninitialized. If your member had the type, say, <code>std::string</code>, it would call the default constructor of <code>std::string</code> and you'd have an empty string.</p>\n", "OwnerUserId": "962089", "PostTypeId": "2", "Id": "17477638", "Score": "6", "CreationDate": "2013-07-04T20:20:11.150", "LastActivityDate": "2013-07-04T20:20:11.150"}, "bq_ids": {"n4140": {"so_17477573_17477638_0": {"section_id": 3286, "quality": 0.92, "length": 23}, "so_17477573_17477573_0": {"section_id": 423, "quality": 0.5714285714285714, "length": 4}}, "n3337": {"so_17477573_17477638_0": {"section_id": 3156, "quality": 0.96, "length": 24}, "so_17477573_17477573_0": {"section_id": 415, "quality": 0.5714285714285714, "length": 4}}, "n4659": {"so_17477573_17477638_0": {"section_id": 4049, "quality": 0.64, "length": 16}, "so_17477573_17477573_0": {"section_id": 382, "quality": 0.5714285714285714, "length": 4}}}});