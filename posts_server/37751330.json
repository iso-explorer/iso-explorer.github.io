post_cb({"bq_ids": {"n4140": {"so_37751330_37751443_0": {"length": 17, "quality": 0.9444444444444444, "section_id": 5433}}, "n3337": {"so_37751330_37751443_0": {"length": 17, "quality": 0.9444444444444444, "section_id": 5228}}, "n4659": {"so_37751330_37751443_0": {"length": 17, "quality": 0.9444444444444444, "section_id": 6861}}}, "37751508": {"Id": "37751508", "PostTypeId": "2", "Body": "<p>It is undefined behavior to modify data initially declared <code>const</code>, and the contents of an initializer list are always <code>const</code>.</p>\n<p>In this case, it appears that the contents of the list are being stored in a read-only page or somesuch, and you are getting a runtime error.  You are lucky: with undefined behavior <em>anything</em> can happen.</p>\n<p>Another classic example of undefined behavior caused by writing to const is when you modify something on one line, and on the next line you read it and the modifications don't show up.  This happens because the compiler can assume that any const-declared (not referenced) data <em>will not change</em>, so it can optimize its code to presume that the initial value is the value it always has.</p>\n<p>Other possibilities that compilers actually do is the compiler noticing you are doing undefined behavior on a branch, reasoning that the branch cannot be taken logically, deriving that the condition to enter the branch <em>must</em> be the other setting, and eliminating a branch entirely (and/or going into a branch whose preconditions are proved by the above logic).  Undefined behavior can time travel.</p>\n<p>Your hard drive could be formatted, the computer could explode, it email your web history to your parents: a compiler is free to make the code do anything, at any point, for any or no reason.</p>\n<p>Don't do undefined behavior.</p>\n", "LastActivityDate": "2016-06-10T15:04:03.603", "CommentCount": "0", "CreationDate": "2016-06-10T15:04:03.603", "ParentId": "37751330", "Score": "5", "OwnerUserId": "1774667"}, "37751330": {"ViewCount": "122", "Body": "<p>I was using const_cast to modify elements inside an initializer_list, like below:</p>\n<pre><code>#include &lt;initializer_list&gt;\nint main()\n{\n    auto a1={1,2,3};\n    auto a2=a1;//copy or reference?\n    for(auto&amp; e:a1)\n    {\n        int*p=const_cast&lt;int*&gt;(&amp;e);\n        ++(*p);\n    }\n    for(auto&amp; e:a2)\n        cout&lt;&lt;e;\n    return 0;\n}\n</code></pre>\n<p>Unfortunately, when doing ++(*p) this g++4.9.2 compiled program throws SIGSEGV. The problem doesn't happen in VC.</p>\n<p>Why is that, is my program having any unsafe operations? Please help, thanks.</p>\n", "AcceptedAnswerId": "37751443", "Title": "C++11 modifying elements in initializer_list using pointer caused SIGSEGV, why?", "CreationDate": "2016-06-10T14:55:15.987", "Id": "37751330", "CommentCount": "2", "LastEditDate": "2016-06-10T15:08:28.390", "PostTypeId": "1", "LastEditorUserId": "2069064", "LastActivityDate": "2016-06-10T15:08:28.390", "Score": "1", "OwnerUserId": "5890784", "Tags": "<c++><c++11><initializer-list><sigsegv><const-cast>", "AnswerCount": "2"}, "37751443": {"Id": "37751443", "PostTypeId": "2", "Body": "<p>As <a href=\"https://stackoverflow.com/a/37738978/2069064\">I mentioned</a> on your previous question, the underlying array for an <code>initializer_list&lt;T&gt;</code> is composed on <code>const</code> objects. Modifying objects declared <code>const</code> is <strong>undefined behavior</strong>. From [dcl.type.cv]:</p>\n<blockquote>\n<p id=\"so_37751330_37751443_0\">Except that any class member declared mutable (7.1.1) can be modified, any attempt to modify a const\n  object during its lifetime (3.8) results in undefined behavior.</p>\n</blockquote>\n<p>One possible instantiation of undefined behavior is SIGSEV, which is what you see from gcc. Another possible instantiation is the code working, which is what you see in VC. Just don't do it. </p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2016-06-10T15:00:49.853", "Score": "3", "CreationDate": "2016-06-10T15:00:49.853", "ParentId": "37751330", "CommentCount": "0", "OwnerUserId": "2069064", "LastEditDate": "2017-05-23T10:34:05.250"}});