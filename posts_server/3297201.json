post_cb({"3297275": {"ParentId": "3297201", "CommentCount": "0", "Body": "<p>It's probably because in your initial call to rand the random number generator has not been seeded so it uses a default value of 1 to seed it.</p>\n", "OwnerUserId": "366817", "PostTypeId": "2", "Id": "3297275", "Score": "0", "CreationDate": "2010-07-21T08:00:13.993", "LastActivityDate": "2010-07-21T08:00:13.993"}, "3297239": {"ParentId": "3297201", "CommentCount": "0", "Body": "<p>I think this one may be a problem:</p>\n<p>If seed is set to 1, the generator is reinitialized to its initial value and produces the same values as before any call to rand or srand.</p>\n<p><a href=\"http://www.cplusplus.com/reference/clibrary/cstdlib/srand/\" rel=\"nofollow noreferrer\">srand reference</a></p>\n", "OwnerUserId": "227698", "PostTypeId": "2", "Id": "3297239", "Score": "0", "CreationDate": "2010-07-21T07:54:05.110", "LastActivityDate": "2010-07-21T07:54:05.110"}, "3297241": {"ParentId": "3297201", "CommentCount": "0", "Body": "<p>Calling <code>srand</code> with a value of <code>1</code> resets the generator to its initial state when the program started.</p>\n", "OwnerUserId": "9990", "PostTypeId": "2", "Id": "3297241", "Score": "0", "CreationDate": "2010-07-21T07:54:12.780", "LastActivityDate": "2010-07-21T07:54:12.780"}, "3297240": {"ParentId": "3297201", "CommentCount": "0", "Body": "<p>If you call <code>rand()</code> without first calling <code>srand()</code>, the behavior is as if you called <code>srand()</code> with <code>1</code> as the argument.</p>\n<p>This behavior is defined in the original C standard. I don't have a full copy of it handy, but The Open Group's POSIX standards are the next best thing, as they incorporate the full C standard (with some extensions):</p>\n<p><a href=\"http://www.opengroup.org/onlinepubs/000095399/functions/rand.html\" rel=\"noreferrer\">http://www.opengroup.org/onlinepubs/000095399/functions/rand.html</a></p>\n<blockquote>\n<p id=\"so_3297201_3297240_0\">The srand() function uses the argument as a seed for a new sequence of pseudo-random numbers to be returned by subsequent calls to rand(). If srand() is then called with the same seed value, the sequence of pseudo-random numbers shall be repeated. If rand() is called before any calls to srand() are made, the same sequence shall be generated as when srand() is first called with a seed value of 1.</p>\n</blockquote>\n<p>The actual result of a <code>rand()</code> call for any given seed is implementation-defined, except that for any seed <em>x</em>, call <em>n</em> to <code>rand()</code> after the seeding of the generator must return the same result. So while on your implementation you will always get 41 on the first <code>rand()</code> call after calling <code>srand(1)</code>, and you will always get the same result (whatever it is) for the second <code>rand()</code> call, other implementations may use a different algorithm that produces different results.</p>\n", "OwnerUserId": "91962", "PostTypeId": "2", "Id": "3297240", "Score": "7", "CreationDate": "2010-07-21T07:54:12.680", "LastActivityDate": "2010-07-21T07:54:12.680"}, "3297247": {"ParentId": "3297201", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The C++ standard defers to the C standard for <code>rand</code> and <code>srand</code> (see section 26.8 of C++0x):</p>\n<blockquote>\n<p id=\"so_3297201_3297247_0\">The <code>rand</code> function has the semantics specified in the C standard, except that the implementation may specify that particular library functions may call <code>rand</code>.</p>\n</blockquote>\n<p>The C standard (7.20.2.2 of C99) states quite categorically:</p>\n<blockquote>\n<p id=\"so_3297201_3297247_1\">If <code>rand</code> is called before any calls to <code>srand</code> have been made, the same sequence shall be generated as when <code>srand</code> is first called with a seed value of 1.</p>\n</blockquote>\n<p>So the first time you call <code>rand</code>, the seed is 1. It's also 1 the third time you call it which is why you get the same value.</p>\n<p>The second time that you called <code>rand</code>, the seed had been set based on the current time, which is why you got a different result. It's usually not a good idea to re-seed the random number generator unless you actually <em>want</em> the same sequence (such as in testing).</p>\n", "OwnerUserId": "14860", "LastEditorUserId": "14860", "LastEditDate": "2010-07-21T08:00:37.267", "Id": "3297247", "Score": "7", "CreationDate": "2010-07-21T07:54:52.557", "LastActivityDate": "2010-07-21T08:00:37.267"}, "3297249": {"ParentId": "3297201", "CommentCount": "0", "Body": "<p><code>srand(3)</code> lets you get repeatable output from the random number generator. This way, you can write programs that depend on random numbers, but test them deterministically. (Typically by having a command-line option to call <code>srand()</code> with a supplied argument, so it could be run a hundred times with 1, 2, 3, 4, 5, ... as inputs.)</p>\n<p>So this is behaving as expected.</p>\n", "OwnerUserId": "377270", "PostTypeId": "2", "Id": "3297249", "Score": "0", "CreationDate": "2010-07-21T07:55:12.367", "LastActivityDate": "2010-07-21T07:55:12.367"}, "bq_ids": {"n4140": {"so_3297201_3297247_0": {"section_id": 3870, "quality": 0.9333333333333333, "length": 14}}, "n3337": {"so_3297201_3297247_0": {"section_id": 3730, "quality": 0.9333333333333333, "length": 14}}, "n4659": {"so_3297201_3297247_0": {"section_id": 4495, "quality": 0.6, "length": 9}}}, "3297201": {"CommentCount": "2", "AcceptedAnswerId": "3297240", "PostTypeId": "1", "LastEditorUserId": "63550", "CreationDate": "2010-07-21T07:48:10.410", "LastActivityDate": "2010-09-10T18:49:35.883", "LastEditDate": "2010-09-10T18:49:35.883", "ViewCount": "4398", "FavoriteCount": "3", "Title": "Function srand in C++", "Id": "3297201", "Score": "6", "Body": "<p>This code</p>\n<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;time.h&gt;\n\nint main ()\n{\n    printf (\"First number: %d\\n\", rand() % 100);\n    srand ( time(NULL) );\n    printf (\"Random number: %d\\n\", rand() % 100);\n    srand ( 1 );\n    printf (\"Again the first number: %d\\n\", rand() %100);\n\n    return 0;\n}\n</code></pre>\n<p>has the following output:</p>\n<pre><code>First number: 41\nRandom number: 13\nAgain the first number: 41\n</code></pre>\n<p>There is also the following rule:</p>\n<blockquote>\n<p id=\"so_3297201_3297201_0\">Two different initializations with the same seed, instructs the pseudo-random generator to generate the same succession of results for the subsequent calls to rand in both cases.</p>\n</blockquote>\n<p>I understand the words but I just don't understand the method itself. Why did it return 41 again? Is it random or must it return the same result in every case according to this code?</p>\n", "Tags": "<c++><random>", "OwnerUserId": "466534", "AnswerCount": "6"}});