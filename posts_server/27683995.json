post_cb({"27686030": {"ParentId": "27683995", "CommentCount": "0", "Body": "<p>As noted already in the comments, there is no relevant difference between the standard's example, and your example. Compilers that properly implement the standard issue a diagnostic for both.</p>\n<p>The fact that this is clearly a compiler bug in at least clang and Intel can be seen when you edit the example to the nonsensical</p>\n<pre><code>namespace A\n{\n    extern \"C\" void f(int = 5);\n}\n\nnamespace B\n{\n    extern \"C\" void f(int = 3); // different default argument\n}\n\nusing A::f;\nusing B::f;\n\nvoid use()\n{\n    f(); // No error !\n}\n</code></pre>\n<p>Despite getting two <em>different</em> default arguments, no error or even a warning is generated. One of the default arguments is used, the first with Intel, the second with clang.</p>\n<p>GCC does happen to reject this nonsensical example, so there is no quick and easy way to verify that it is clearly a bug in GCC as well, but that doesn't change the fact that it is: as noted, it silently accepts the example from the standard where the standard points out where an error should be detected.</p>\n", "OwnerUserId": "743382", "PostTypeId": "2", "Id": "27686030", "Score": "1", "CreationDate": "2014-12-29T09:05:00.400", "LastActivityDate": "2014-12-29T09:05:00.400"}, "27683995": {"CommentCount": "9", "AcceptedAnswerId": "27686030", "OwnerDisplayName": "user2953119", "CreationDate": "2014-12-29T05:47:26.780", "LastActivityDate": "2014-12-29T09:05:00.400", "PostTypeId": "1", "ViewCount": "151", "FavoriteCount": "2", "Title": "Why isn't compiler time error thrown when we call to a C function", "Id": "27683995", "Score": "7", "Body": "<p>According to the example which the Standard provides at <code>N4296::13.3.3 [over.match.best]</code></p>\n<pre><code>namespace A \n{\n    extern \"C\" void f(int = 5);\n}\n\nnamespace B \n{\n    extern \"C\" void f(int = 5);\n}\n\nusing A::f;\nusing B::f;\n\nvoid use() \n{\n    f(3); // OK, default argument was not used for viability\n    f(); // Error: found default argument twice\n}\n</code></pre>\n<p>As the Standard says at <code>N4296::7.5/6 [dcl.link]</code>:</p>\n<blockquote>\n<p id=\"so_27683995_27683995_0\">Two declarations for a function with C language linkage with the same\n  function name (ignoring the namespace names that qualify it) that\n  appear in different namespace scopes refer to the same function.</p>\n</blockquote>\n<p>I tried to explore such a thing on my own example:</p>\n<pre><code>#include &lt;iostream&gt;\n\nnamespace A\n{\n    extern \"C\" void foo(int a = 5){ std::cout &lt;&lt; a &lt;&lt; \"1\" &lt;&lt; std::endl; }\n}\n\nnamespace B\n{\n    extern \"C\" void foo(int a = 5);\n}\n\nusing A::foo;\nusing B::foo;\n\nint main()\n{ \n    foo(); //Error \n    foo(2);\n}\n</code></pre>\n<p><strong><a href=\"http://coliru.stacked-crooked.com/a/3d952d5fe5a3a691\">DEMO</a></strong></p>\n<p>So why does my example work? What's differences between my example and the Standard's example unless I defined the function explicitly in the <code>A</code> namespace? Why is that so important?</p>\n", "Tags": "<c++><c>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_27683995_27683995_0": {"section_id": 5522, "quality": 1.0, "length": 19}}, "n3337": {"so_27683995_27683995_0": {"section_id": 5308, "quality": 1.0, "length": 19}}, "n4659": {"so_27683995_27683995_0": {"section_id": 6957, "quality": 1.0, "length": 19}}}});