post_cb({"29901547": {"ParentId": "29896248", "CommentCount": "0", "Body": "<p>An excerpt from the language standards can make everything better!</p>\n<p>C99, 6.7.5.3/10:</p>\n<blockquote>\n<p id=\"so_29896248_29901547_0\">The special case of an unnamed parameter of type void as the only item in the list speci\ufb01es that the function has no parameters.</p>\n</blockquote>\n<p>C++, 8.3.5/2:</p>\n<blockquote>\n<p id=\"so_29896248_29901547_1\">If the parameter-declaration-clause is empty, the function takes no arguments. The parameter list (void) is equivalent to the empty parameter list.</p>\n</blockquote>\n<p>The difference is plain. C has the <code>void</code> in question as an unnamed parameter of type <code>void</code>, and C++ has the identifier <code>void</code>. The former can be <code>typedef</code>-ed, the latter can't.</p>\n<p>It may be interesting to muse on the reasons for this. Actually, the following is legal in C++, but illegal in C:</p>\n<pre><code>void fn(int){\n}\n</code></pre>\n<p>As C++ has the concept of unnamed (anonymous) parameters in function definitions, while C doesn't... Almost.</p>\n<p>Actually, one unnamed parameter can be present in a C function definition: one of type <code>void</code>.</p>\n<p>Which definitely makes little to no sense since there can be no <em>named</em> parameter with this type.</p>\n<p>Besides making little sense, this definition of <code>void</code> in the parameter list could screw up C++'s unnamed parameters, as it would be no different from them. The definition could have been amended to make it a <strong>very-very-very</strong> special case of an unnamed parameter that has no corresponding named parameters and cannot be used with other named or unnamed parameters and is not actually a parameter and...</p>\n<p>But I guess that instead of trying to word something as crazy as that, the C++ commitee simply decided to drop the \"unnamed-void-type-parameter\" stuff completely and go with the \"special parameter list\". I say good riddance.</p>\n<p>And the C standard? It probably retains its weird 6.7.5.3/10 for backward compatibility reasons...</p>\n", "OwnerUserId": "3079266", "PostTypeId": "2", "Id": "29901547", "Score": "1", "CreationDate": "2015-04-27T16:47:23.327", "LastActivityDate": "2015-04-27T16:47:23.327"}, "29896643": {"ParentId": "29896248", "PostTypeId": "2", "CommentCount": "8", "Body": "<p>A simple test program in C++ demonstrates the difference:</p>\n<pre><code>typedef void VOID;\n\nvoid f(VOID) {}\n\nint main()\n{\n    f();\n}\n</code></pre>\n<p>On compilation (as C++), <a href=\"http://ideone.com/6CPjyf\">it gives these error</a>:</p>\n<pre><code>prog.cpp:5:8: error: '&lt;anonymous&gt;' has incomplete type\n void f(VOID) {}\n        ^\nprog.cpp:5:12: error: invalid use of 'VOID {aka void}'\n void f(VOID) {}\n            ^\nprog.cpp: In function 'int main()':\nprog.cpp:9:7: error: too few arguments to function 'void f(&lt;type error&gt;)'\n     f();\n       ^\nprog.cpp:5:6: note: declared here\n void f(VOID) {}\n      ^\n</code></pre>\n<p>which explains what the comment means in your code. In particular, it seems the typedef <code>VOID</code> attempts to be a type <em>different</em> from <code>void</code>, <em>when it is used as parameter type</em>.</p>\n", "OwnerUserId": "415784", "LastEditorUserId": "415784", "LastEditDate": "2015-04-27T13:08:22.107", "Id": "29896643", "Score": "8", "CreationDate": "2015-04-27T13:03:24.377", "LastActivityDate": "2015-04-27T13:08:22.107"}, "29896248": {"CommentCount": "4", "ViewCount": "644", "PostTypeId": "1", "ClosedDate": "2015-04-27T17:54:32.103", "LastEditorUserId": "-1", "CreationDate": "2015-04-27T12:47:26.650", "LastActivityDate": "2015-04-27T16:47:23.327", "Title": "Implications of typedef void FOO vs. #define FOO void in function signatures", "AcceptedAnswerId": "29896643", "LastEditDate": "2017-05-23T12:15:11.933", "Id": "29896248", "Score": "13", "Body": "<p>While going through some source code that heavily mixes C and C++, I came across the following (slightly modified to protect the work of the company, the meaning remains the same):</p>\n<pre><code>/*\n * Typedefs of void are synonymous with the void keyword in C,\n * but not in C++. In order to support the use of MY_VOID\n * in place of the void keyword to specify that a function takes no\n * arguments, it must be a macro rather than a typedef.\n */\n#define MY_VOID void\n</code></pre>\n<p>What is the difference between <code>typedef void MY_VOID</code> and <code>#define MY_VOID void</code> in this specific context?</p>\n<hr>\n<p>I don't believe this is a duplicate of <a href=\"https://stackoverflow.com/questions/540748/void-void-c-and-c\">this question</a> because it asks specifically about the implications in regards to function signatures, rather than a much more general \"what's the difference\".</p>\n</hr>", "Tags": "<c++><c><typedef><c-preprocessor>", "OwnerUserId": "1816262", "AnswerCount": "5"}, "29896623": {"ParentId": "29896248", "CommentCount": "1", "Body": "<p>You can use both, they are doing the same thing so the single difference its that using #define you will declare your new type as a macro. </p>\n", "OwnerUserId": "4816325", "PostTypeId": "2", "Id": "29896623", "Score": "-1", "CreationDate": "2015-04-27T13:02:33.267", "LastActivityDate": "2015-04-27T13:02:33.267"}, "29896638": {"ParentId": "29896248", "CommentCount": "0", "Body": "<p>The comment refers to code like this:</p>\n<pre><code>typedef void my_void_t;\nmy_void_t foo(my_void_t); // Illegal.\n</code></pre>\n<p>With the <code>#define</code> it's legal.</p>\n", "OwnerUserId": "15416", "PostTypeId": "2", "Id": "29896638", "Score": "3", "CreationDate": "2015-04-27T13:03:17.480", "LastActivityDate": "2015-04-27T13:03:17.480"}, "29896658": {"ParentId": "29896248", "CommentCount": "0", "Body": "<p>The comment explains the difference. Given an alias for <code>void</code>:</p>\n<pre><code>typedef void MY_VOID;\n</code></pre>\n<p>If you try to use this instead of <code>void</code> to indicate that a function takes no parameters:</p>\n<pre><code>int f(MY_VOID);\n</code></pre>\n<p>C will allow this, but C++ won't.</p>\n<p>So, if you really want to make life difficult for yourself by writing code that (a) is valid in both languages and (b) uses an alias for this particular use of <code>void</code>, that alias will have to be a macro.</p>\n", "OwnerUserId": "204847", "PostTypeId": "2", "Id": "29896658", "Score": "5", "CreationDate": "2015-04-27T13:04:29.567", "LastActivityDate": "2015-04-27T13:04:29.567"}, "bq_ids": {"n4140": {"so_29896248_29901547_1": {"section_id": 3240, "quality": 0.9230769230769231, "length": 12}}, "n3337": {"so_29896248_29901547_1": {"section_id": 3113, "quality": 0.9230769230769231, "length": 12}}, "n4659": {"so_29896248_29901547_1": {"section_id": 3996, "quality": 0.9230769230769231, "length": 12}}}});