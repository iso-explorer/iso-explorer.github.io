post_cb({"bq_ids": {"n4140": {"so_11965214_11965258_0": {"length": 10, "quality": 0.7692307692307693, "section_id": 421}}, "n3337": {"so_11965214_11965258_0": {"length": 10, "quality": 0.7692307692307693, "section_id": 413}}, "n4659": {"so_11965214_11965258_1": {"length": 8, "quality": 0.5714285714285714, "section_id": 4058}, "so_11965214_11965258_0": {"length": 10, "quality": 0.7692307692307693, "section_id": 439}}}, "11965614": {"Id": "11965614", "PostTypeId": "2", "Body": "<p>This behaviour is considered and issue and seems to have been fixed, at least in newer versions of GCC, and presumably in the C++11 standard. See <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_active.html#253\" rel=\"nofollow\">here</a> for the issue report.</p>\n", "LastActivityDate": "2012-08-15T07:35:43.663", "CommentCount": "0", "CreationDate": "2012-08-15T07:35:43.663", "ParentId": "11965214", "Score": "1", "OwnerUserId": "661519"}, "11965230": {"Id": "11965230", "PostTypeId": "2", "Body": "<p>The const object \"constantObject\" needs an initializer or requires \"class ExampleClass\" to have a user-declared default constructor.</p>\n", "LastEditorUserId": "619540", "LastActivityDate": "2012-08-15T07:13:15.487", "Score": "6", "CreationDate": "2012-08-15T06:57:45.900", "ParentId": "11965214", "CommentCount": "14", "OwnerUserId": "619540", "LastEditDate": "2012-08-15T07:13:15.487"}, "11965258": {"Id": "11965258", "PostTypeId": "2", "Body": "<p>Your <code>ExampleClass</code> is a <a href=\"https://stackoverflow.com/questions/146452/what-are-pod-types-in-c\">POD (plain old data)</a> structure. When it's declared as a local variable like this <code>ExampleClass exampleObj</code> no default constructor gets called and it remains uninitialized.</p>\n<p>You need either to create a default constructor of your own or use the following syntax -<code>ExampleClass exampleObj = ExampleClass();</code>. This will create a temporary <code>ExampleClass</code> object and value initialize your <code>exampoleObj</code>.</p>\n<p><strong>updated:</strong></p>\n<p>Here is an excerpt from C++03 standard 8.5.9.</p>\n<blockquote>\n<p id=\"so_11965214_11965258_0\">If no initializer is specified for an object, and the object is of\n  (possibly cv-qualified) non-POD class type (or array thereof), the\n  object shall be default-initialized; </p>\n<p id=\"so_11965214_11965258_1\"><strong>if the object is of const-qualified type, the underlying class type shall have a\n  user-declared default constructor</strong>. [this one applies to const objects]</p>\n<p id=\"so_11965214_11965258_2\"><strong>Otherwise, if no initializer is\n  specified for a nonstatic object, the object and its subobjects, if\n  any, have an indeterminate initial value); if the object or any of its\n  subobjects are of const-qualified type, the program is ill-formed.</strong> [this one applies to const and POD types]</p>\n</blockquote>\n<p>This means that the <code>constantObject</code> should have user-defined default constructor, otherwise a program is ill-formed, which should be diagnosed. If we remove const, the object will remain uninitialized anyway (will have <em>indeterminate initial value</em>)</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2012-08-15T10:05:10.710", "Score": "5", "CreationDate": "2012-08-15T07:01:28.647", "ParentId": "11965214", "CommentCount": "6", "OwnerUserId": "276274", "LastEditDate": "2017-05-23T12:20:08.867"}, "11965214": {"ViewCount": "201", "Body": "<p>I am trying to learn how to use constant functions and objects, however, I have some error that has kept me up for over an hour and I can't seem to figure out. I was following a simple example and I guess I got lost somewhere along the way. Here is my code.</p>\n<p>Main.cpp</p>\n<pre><code>#include &lt;iostream&gt;\n#include \"ExampleClass.h\"\n\nint main(){\n    ExampleClass exampleObj; // object used to call members of ExampleClass.\n    exampleObj.printText(); // calls printVar from the ExampleClass.\n\n    const ExampleClass constantObject; // object used to call constant members of ExampleClass.\n    constantObject.printConstText(); // calls printConstVar from the ExampleClass.\n\n    return 0;\n}\n</code></pre>\n<p>ExampleClass.h</p>\n<pre><code>#ifndef EXAMPLECLASS_H\n#define EXAMPLECLASS_H\n\n\nclass ExampleClass\n{\n    public:\n        void printText();\n        void printConstText() const;\n};\n\n#endif // EXAMPLECLASS_H\n</code></pre>\n<p>ExampleClass.cpp</p>\n<pre><code>#include &lt;iostream&gt;\n#include \"ExampleClass.h\"\n\nvoid ExampleClass::printText(){\n    std::cout &lt;&lt; \"The code works!\" &lt;&lt; \"\\n\";\n}\n\nvoid ExampleClass::printConstText() const{\n    std::cout &lt;&lt; \"The code works!\" &lt;&lt; \"\\n\";\n}\n</code></pre>\n<p>And I'm getting the error:</p>\n<pre><code>C:\\Documents and Settings\\Me\\My Documents\\ConstObjects\\main.cpp||In function 'int main()':|\nC:\\Documents and Settings\\Me\\My Documents\\ConstObjects\\main.cpp|8|error: uninitialized const 'constantObject'|\n||=== Build finished: 1 errors, 0 warnings ===|\n</code></pre>\n<p>If I take out the const before ExampleClass the code executes fine. But is it still a constant object? Thanks for the help, I hope I gave enough information. If it matters at all I'm using Code Blocks.</p>\n", "AcceptedAnswerId": "11965258", "Title": "Trouble with constant objects and functions", "CreationDate": "2012-08-15T06:56:20.873", "LastActivityDate": "2012-08-15T10:05:10.710", "CommentCount": "31", "FavoriteCount": "3", "PostTypeId": "1", "OwnerDisplayName": "user1581100", "Id": "11965214", "Score": "8", "Tags": "<c++><const>", "AnswerCount": "3"}});