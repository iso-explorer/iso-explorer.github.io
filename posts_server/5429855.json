post_cb({"5429922": {"Id": "5429922", "PostTypeId": "2", "Body": "<p><code>void</code> is a placeholder indicating <strong>no object of any type</strong> is expected.</p>\n<h3>As a function argument specification</h3>\n<p>Historically C used an empty argument list in a function declaration ala <code>return_type f();</code> to allow <code>f()</code> to be called with however-many and whatever-type arguments were specified at each call site, whereas <code>return_type f(void);</code> made it explicit no arguments were expected or allowed.  I.e. C was prepared to trust the programmer to get the number and types of arguments right, with any mistake likely to corrupt data and/or crash the program.</p>\n<h3>As a function return type</h3>\n<p>There woud also be some ambiguities in the language if <code>void</code> wasn't there to establish the overall \"type variable|function\" sequence that's part of the grammar of the language.  For example:</p>\n<pre><code>f();  // declaration of a function that returns nothing?\n      // OR a function call?\n</code></pre>\n<h3>Comparison with other types</h3>\n<p>It is not really a data type itself in the sense of representing some interpretation of an area of memory, as int, float, char etc., classes, unions etc. all do.</p>\n<h3>pointers to void</h3>\n<p>For <code>void*</code>, it indicates a loss of insight into the contents of memory at the contained address, such that sometime before dereferencing the pointer it must be cast to a specific type reflecting the bitwise layout of data at that memory address.  Then, the compiler can interpret and operate on that bit layout in accord with the then-known data type.</p>\n", "LastEditorUserId": "410767", "LastActivityDate": "2011-03-25T11:11:26.063", "Score": "3", "CreationDate": "2011-03-25T08:03:56.620", "ParentId": "5429855", "CommentCount": "1", "OwnerUserId": "410767", "LastEditDate": "2011-03-25T11:11:26.063"}, "5429855": {"ViewCount": "1567", "Body": "<p>C++ doesn't allow creating objects of type <code>void</code>. Why is that?</p>\n", "AcceptedAnswerId": "5429869", "Title": "Why can't objects of type void be created in C++?", "CreationDate": "2011-03-25T07:54:44.663", "Id": "5429855", "CommentCount": "3", "LastEditDate": "2011-03-25T07:57:57.467", "PostTypeId": "1", "LastEditorUserId": "57428", "LastActivityDate": "2011-03-25T21:14:20.510", "Score": "14", "OwnerUserId": "541460", "Tags": "<c++><types><void>", "AnswerCount": "7"}, "5430319": {"Id": "5430319", "PostTypeId": "2", "Body": "<p>It is, simply, an arbitrary decision, from C.</p>\n<p>In C, all types (except from <code>void</code>) are used to carry a value. <code>void</code>, by definition, does not hold any value. The language designers therefore decided it would not be possible to instantiate it.</p>\n<p>C++ takes after C, and the decision remained. Otherwise it would have been necessary to define a storage size (probably the same as <code>bool</code>).</p>\n<p>In C++ it is indeed annoying, especially because of the special casing necessary for template classes / functions, but no-one deemed it worthy of modification since it's possible to specialize the templates for <code>void</code> and thus it's not blocking.</p>\n", "LastActivityDate": "2011-03-25T08:54:12.637", "CommentCount": "1", "CreationDate": "2011-03-25T08:54:12.637", "ParentId": "5429855", "Score": "0", "OwnerUserId": "147192"}, "5429889": {"Id": "5429889", "PostTypeId": "2", "Body": "<p>In <code>C++</code>, every thing can be related to object. So, when said -</p>\n<pre><code>void variable ;  \n</code></pre>\n<p>How many bytes must the platform allocate for <code>variable</code> with out knowing it's type. Is it <code>int</code> or <code>float</code> or <code>double</code> or any other primitive type. So, it is not allowed. </p>\n", "LastActivityDate": "2011-03-25T07:59:07.823", "CommentCount": "3", "CreationDate": "2011-03-25T07:59:07.823", "ParentId": "5429855", "Score": "2", "OwnerUserId": "528724"}, "5430495": {"Id": "5430495", "PostTypeId": "2", "Body": "<p>As a side note, you <strong>can</strong> create a temporary of type <code>void</code>:</p>\n<pre><code>void f()\n{\n    return void();\n}\n\nvoid g()\n{\n    return cout &lt;&lt; \"hi\", f();\n}\n</code></pre>\n<p>this is valid code. It is extremely useful in generic code. It was even considered to allow the usage of built in types (including void) in some places like base classes:</p>\n<pre><code>template&lt;class T&gt; class A : T { };\n\nA&lt;string&gt; x; // works\nA&lt;int&gt; y; // error, but could be usefull\nA&lt;void&gt; z; // error, but could be usefull.\n</code></pre>\n", "LastActivityDate": "2011-03-25T09:13:58.933", "CommentCount": "3", "CreationDate": "2011-03-25T09:13:58.933", "ParentId": "5429855", "Score": "4", "OwnerUserId": "277176"}, "5430329": {"Id": "5430329", "PostTypeId": "2", "Body": "<p>It is because <code>void</code> is an incomplete type.</p>\n<p>From Standard docs., incomplete types <em>3.9</em> states that, </p>\n<blockquote>\n<p id=\"so_5429855_5430329_0\"><code>5</code> A class that has been declared but not defined, or an array of unknown size or of incomplete element type, is an\n  incompletely-defined object type.38) Incompletely-defined object types and <strong>the void types are incomplete types</strong> (3.9.1).\n  Objects shall not be defined to have an incomplete type.</p>\n<p id=\"so_5429855_5430329_1\">38) <strong>The size and layout of an instance of an incompletely-defined object type is unknown.</strong></p>\n</blockquote>\n<p>Since <code>void</code> is an incomplete type, it's size and layout cannot be determined and hence it cannot be defined.</p>\n", "LastActivityDate": "2011-03-25T08:55:00.690", "CommentCount": "2", "CreationDate": "2011-03-25T08:55:00.690", "ParentId": "5429855", "Score": "12", "OwnerUserId": "249490"}, "bq_ids": {"n4140": {"so_5429855_5430329_0": {"length": 25, "quality": 0.9259259259259259, "section_id": 7203}, "so_5429855_5430329_1": {"length": 7, "quality": 0.875, "section_id": 7203}}, "n3337": {"so_5429855_5430329_0": {"length": 25, "quality": 0.9259259259259259, "section_id": 6947}, "so_5429855_5430329_1": {"length": 7, "quality": 0.875, "section_id": 6947}}, "n4659": {"so_5429855_5430329_0": {"length": 20, "quality": 0.7407407407407407, "section_id": 8712}, "so_5429855_5430329_1": {"length": 7, "quality": 0.875, "section_id": 8712}}}, "5429892": {"Id": "5429892", "PostTypeId": "2", "Body": "<p>void represents Nothing.Even you are creating function with Void type we no need to return a value.Same like Here also No object of type void is declared.</p>\n", "LastActivityDate": "2011-03-25T07:59:39.667", "CommentCount": "1", "CreationDate": "2011-03-25T07:59:39.667", "ParentId": "5429855", "Score": "1", "OwnerUserId": "438676"}, "5429869": {"Id": "5429869", "PostTypeId": "2", "Body": "<p>Consider the code below.</p>\n<pre><code>class Foo\n{\n    // etc ...\n};\n\nint main()\n{\n    // Declaring an object...\n    Foo foo;\n    // foo has been created.\n\n    // etc ...\n\n    return 0; // When function returns, foo will be destroyed.\n}\n</code></pre>\n<p>In order to know how to actually create the object, the compiler has to know the type. Informally, you can think of <code>void</code> as a \"type\" representing an absence of type. Therefore, the compiler can't possibly know how to create a <code>void</code> object. You can't create an object you don't know how to create.</p>\n<pre><code>int main()\n{\n    void v; // \"I don't know how to create this!\"\n}\n</code></pre>\n<p>That being said, there are other cases where <code>void</code> makes sense. For example, a <code>void</code> function has no return value. You can't assign a type to things (like return values) that do not exist.</p>\n<p>You can also have a pointer to <code>void</code>, or <code>void*</code>. Unlike the plain <code>void</code>, <code>void*</code> is valid and simply means \"<em>a pointer to an object of some unknown type</em>\". Obviously you can't do much with a <code>void*</code> until you cast it into an actual, known type (assuming the cast is safe, of course).</p>\n", "LastEditorUserId": "308661", "LastActivityDate": "2011-03-25T21:14:20.510", "Score": "13", "CreationDate": "2011-03-25T07:56:38.940", "ParentId": "5429855", "CommentCount": "7", "OwnerUserId": "308661", "LastEditDate": "2011-03-25T21:14:20.510"}});