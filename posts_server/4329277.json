post_cb({"4329376": {"ParentId": "4329277", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>This is what the C++03 standard says (3.9.1/2) :</p>\n<blockquote>\n<p id=\"so_4329277_4329376_0\">There are <strong>four</strong> signed integer types:\n  \u201csigned char\u201d, \u201cshort int\u201d, \u201cint\u201d, and\n  \u201clong int.\u201d In this list, each type\n  provides at least as much storage as\n  those preceding it in the list.</p>\n</blockquote>\n<p>So : <code>sizeof(char) &lt;= sizeof(short) &lt;= sizeof(int) &lt;= sizeof(long)</code></p>\n<p>This is what the C++0x (3.9.1/2) and C99 (6.2.5/4) standards say :</p>\n<blockquote>\n<p id=\"so_4329277_4329376_1\">There are <strong>five</strong> standard signed integer\n  types, designated as signed char,\n  short int, int, long int, and long\n  long int.</p>\n</blockquote>\n<ul>\n<li><code>long</code> is synonym of <code>long int</code></li>\n<li><code>long long</code> doesn't exist in C++03, but will in C++0x.</li>\n</ul>\n", "OwnerUserId": "451980", "LastEditorUserId": "451980", "LastEditDate": "2010-12-01T21:38:53.120", "Id": "4329376", "Score": "4", "CreationDate": "2010-12-01T21:32:40.753", "LastActivityDate": "2010-12-01T21:38:53.120"}, "4329277": {"CommentCount": "9", "ViewCount": "15335", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2010-12-01T21:22:57.177", "LastActivityDate": "2015-09-18T13:15:44.943", "Title": "What's the 'long' data type used for?", "FavoriteCount": "4", "LastEditDate": "2017-05-23T12:34:51.097", "Id": "4329277", "Score": "12", "Body": "<p>I've been programming in C++ for quite a while now and I am pretty familiar with most of the stuff. One thing that I've never understood though is the 'long' data type.</p>\n<p>I googled it but I still don't know what it is for. I've found pages that say it is the same size and has the same range as an int. So what would be the point in using it?</p>\n<p>I found another stack overflow question regarding this here:\n<a href=\"https://stackoverflow.com/questions/900230/difference-in-long-vs-int-data-types-in-c\">Difference between long and int data types</a></p>\n<p>And it seems that the only difference between the two is that sometimes the size is different on different systems. Does that mean that an application that uses long on a 64bit machine won't work on a 32bit machine? If so then wouldn't it be better to not use them at all?</p>\n<p>Also I noticed stuff called \"long int\" or even \"long long\"! Is it a data type or a modifier?</p>\n", "Tags": "<c++><types><long-integer>", "OwnerUserId": "527193", "AnswerCount": "7"}, "4329349": {"ParentId": "4329277", "CommentCount": "21", "Body": "<p><code>long</code> is guaranteed (at least) 32 bits. <code>int</code> is only guaranteed (at least) 16 bits. on 16- and 8-bit systems <code>long</code> provided range at a cost of efficiency.</p>\n<p>cheers &amp; hth.,</p>\n", "OwnerUserId": "464581", "PostTypeId": "2", "Id": "4329349", "Score": "5", "CreationDate": "2010-12-01T21:30:15.407", "LastActivityDate": "2010-12-01T21:30:15.407"}, "bq_ids": {"n4140": {"so_4329277_4329376_0": {"section_id": 7211, "quality": 0.9545454545454546, "length": 21}, "so_4329277_4329360_1": {"section_id": 22, "quality": 0.5714285714285714, "length": 4}, "so_4329277_4329376_1": {"section_id": 7211, "quality": 0.9375, "length": 15}}, "n3337": {"so_4329277_4329376_0": {"section_id": 6955, "quality": 0.9545454545454546, "length": 21}, "so_4329277_4329360_1": {"section_id": 19, "quality": 0.5714285714285714, "length": 4}, "so_4329277_4329376_1": {"section_id": 6955, "quality": 0.9375, "length": 15}}, "n4659": {"so_4329277_4329376_0": {"section_id": 8720, "quality": 0.9090909090909091, "length": 20}, "so_4329277_4329360_1": {"section_id": 22, "quality": 0.5714285714285714, "length": 4}, "so_4329277_4329376_1": {"section_id": 8720, "quality": 0.875, "length": 14}}}, "6452145": {"ParentId": "4329277", "PostTypeId": "2", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_4329277_6452145_0\">I googled it but I still don't know\n  what its for. I've found pages that\n  say its the same size and has the same\n  range as an int. So what would be the\n  point in using it?</p>\n</blockquote>\n<p><a href=\"https://stackoverflow.com/questions/2398262/is-long-still-useful-in-c\">I've wondered the same thing.</a>  And concluded that <code>long</code> is now useless.</p>\n<p>Prior to the rise of 64-bit systems, the <strong><em>de facto</em></strong> standard for C integer types was:</p>\n<ul>\n<li><code>char</code> = (<code>u</code>)<code>int8_t</code> (Note that C predates Unicode.)</li>\n<li><code>short</code> = <code>int16_t</code></li>\n<li><code>int</code> = <code>intptr_t</code> [until 64-bit], <code>int_fast16_t</code></li>\n<li><code>long</code> = <code>int32_t</code> [until 64-bit], <code>intmax_t</code> [until 1999]</li>\n<li><code>long long</code> = <code>int64_t</code> or <code>intmax_t</code></li>\n</ul>\n<p>Today, however, <code>long</code> has no consistent semantics.</p>\n", "OwnerUserId": "287586", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T10:30:08.107", "Id": "6452145", "Score": "0", "CreationDate": "2011-06-23T09:46:53.743", "LastActivityDate": "2011-06-23T09:46:53.743"}, "4329348": {"ParentId": "4329277", "CommentCount": "0", "Body": "<p>From one of the answers in the question you linked:</p>\n<blockquote>\n<p id=\"so_4329277_4329348_0\">The long must be at least the same size as an int, and possibly, but not necessarily, longer.</p>\n</blockquote>\n<p>I can't think of a better way to explain it.</p>\n", "OwnerUserId": "86860", "PostTypeId": "2", "Id": "4329348", "Score": "6", "CreationDate": "2010-12-01T21:30:09.537", "LastActivityDate": "2010-12-01T21:30:09.537"}, "4329343": {"ParentId": "4329277", "PostTypeId": "2", "CommentCount": "9", "Body": "<p>It is compiler dependent. My standards-fu is a bit rusty but I believe it is defined as follows:</p>\n<pre><code>char &lt;= short &lt;= int &lt;= long &lt;= long long\n</code></pre>\n<p>where:</p>\n<pre><code>char      &gt;= 8 bits\nshort     &gt;= 16 bits\nint       &gt;= 16 bits\nlong      &gt;= 32 bits\nlong long &gt;= 64 bits\n</code></pre>\n<p>Which means that it is perfectly valid to have <code>char = short = int = long = long long = 64bits</code> and in fact compilers of some DSPs are designed that way.</p>\n<hr>\n<p><em>This underscores the importance of actually <strong>reading your compiler documentation</strong>.</em></p>\n</hr>", "OwnerUserId": "167735", "LastEditorUserId": "167735", "LastEditDate": "2010-12-01T22:05:10.917", "Id": "4329343", "Score": "25", "CreationDate": "2010-12-01T21:29:40.900", "LastActivityDate": "2010-12-01T22:05:10.917"}, "4329360": {"ParentId": "4329277", "CommentCount": "1", "Body": "<blockquote>\n<p id=\"so_4329277_4329360_0\">I noticed stuff called \"long int\" or even \"long long\"! Is it a data type or a modifier?</p>\n</blockquote>\n<p><code>long int</code> is the same as <code>long</code> (just as <code>short int</code> is the same as <code>short</code>).</p>\n<p><code>long long</code> is a distinct data type introduced by several compilers and adopted by C++0x.</p>\n<p>Note that there is no such thing as <code>long long long</code>:</p>\n<blockquote id=\"so_4329277_4329360_1\">\n<pre><code>error: 'long long long' is too long for GCC\n</code></pre>\n</blockquote>\n", "OwnerUserId": "252000", "PostTypeId": "2", "Id": "4329360", "Score": "19", "CreationDate": "2010-12-01T21:31:27.770", "LastActivityDate": "2010-12-01T21:31:27.770"}, "4331612": {"ParentId": "4329277", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>If you want an integer that is guaranteed to be 32 bit or 64 bit, there are such types, e.g. int64_t.  If you really want to ensure your int are of such a size, use these types instead of long, long long, etc.  You'll need to include <code>cstdint</code> for these (stdint.h in C).</p>\n", "OwnerUserId": "189456", "LastEditorUserId": "-1", "LastEditDate": "2012-10-05T14:17:54.110", "Id": "4331612", "Score": "0", "CreationDate": "2010-12-02T04:15:22.217", "LastActivityDate": "2012-10-05T14:17:54.110"}});