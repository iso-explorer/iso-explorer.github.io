post_cb({"1193164": {"ParentId": "1193134", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>No, it is not. Constructors for D's data members didn't run yet.</p>\n<p>Since D's membrs aren't constructed, D isn't fully constructed yet, so technically, a reference to D should be invalid. I expect that to be no problem on most implementations, but still.</p>\n<p>I'd like to suggest a better mechanism, but I guess \"better\" depends a lot on actual details.</p>\n", "OwnerUserId": "31317", "LastEditorUserId": "31317", "LastEditDate": "2009-07-28T16:13:20.133", "Id": "1193164", "Score": "2", "CreationDate": "2009-07-28T10:08:41.667", "LastActivityDate": "2009-07-28T16:13:20.133"}, "bq_ids": {"n4140": {"so_1193134_1193691_0": {"section_id": 440, "quality": 0.8571428571428571, "length": 12}}, "n3337": {"so_1193134_1193691_0": {"section_id": 431, "quality": 0.8571428571428571, "length": 12}}, "n4659": {"so_1193134_1193691_0": {"section_id": 460, "quality": 0.8571428571428571, "length": 12}}}, "1193134": {"CommentCount": "2", "ViewCount": "250", "CreationDate": "2009-07-28T10:02:46.093", "LastActivityDate": "2009-07-28T16:13:20.133", "Title": "Is downcasting this during construction safe?", "AcceptedAnswerId": "1193691", "PostTypeId": "1", "Id": "1193134", "Score": "0", "Body": "<p>I have a class hierarchy where I know that a given class (B) will always be derived into a second one (D). In B's constructor, is it safe to statically cast the <code>this</code> pointer into a D* if I'm sure that nobody will ever try to use it before the entire construction is finished? In my case, I want to pass a reference to the object to yet another class (A).</p>\n<pre><code>struct A\n{\n    D &amp; d_;\n\n    A(D &amp; d) : d_(d) {}\n};\n\nstruct D; //forward declaration\n\nstruct B\n{\n    A a;\n\n    B() : a(std::static_cast&lt;D&amp;&gt;(*this)) {}\n};\n\nstruct D : public B\n{};\n</code></pre>\n<p>Is this code safe?</p>\n", "Tags": "<c++><inheritance><static-cast>", "OwnerUserId": "20984", "AnswerCount": "3"}, "1193691": {"ParentId": "1193134", "PostTypeId": "2", "CommentCount": "0", "Body": "<p><a href=\"https://stackoverflow.com/questions/1193134/is-downcasting-this-during-construction-safe/1193245#1193245\">@AProgrammer's answer</a> made me realized that the <code>static_cast</code> could be easily avoided by passing the <code>this</code> pointer from the derived class to the base class. Consequently, the question boils down to the validity of the <code>this</code> pointer into the member-initializer-list.</p>\n<p>I found the following note in the C++ Standard [12.6.2.7]:</p>\n<blockquote>\n<p id=\"so_1193134_1193691_0\">[<em>Note:</em> because the <em>mem-initializer</em> are evaluated in the scope of the constructor, the <code>this</code> pointer can be used in the <em>expression-list</em> of a <em>mem-initializer</em> to refer to the object being initialized. ]</p>\n</blockquote>\n<p>Therefore, using <code>this</code> in the member-initializer-list is perfectly valid, so I think the code presented is safe (as long as no members of D are accessed).</p>\n", "OwnerUserId": "20984", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T11:55:42.787", "Id": "1193691", "Score": "0", "CreationDate": "2009-07-28T12:10:53.667", "LastActivityDate": "2009-07-28T12:10:53.667"}, "1193245": {"ParentId": "1193134", "CommentCount": "1", "Body": "<p>I didn't find anything about that.  I've trouble to find reasons for which your code would be unsafe while this is safe:</p>\n<pre><code>struct B\n{\n    A a;\n\n    B(D&amp; d) : a(d) {}\n};\n\nstruct D : public B\n{\n    D() : B(*this) {}\n};\n</code></pre>\n<p>but I'd probably still use the form I present here.</p>\n", "OwnerUserId": "136208", "PostTypeId": "2", "Id": "1193245", "Score": "2", "CreationDate": "2009-07-28T10:30:59.687", "LastActivityDate": "2009-07-28T10:30:59.687"}});