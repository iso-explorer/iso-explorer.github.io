post_cb({"36834652": {"ParentId": "36834260", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>It has nothing to do with the compiler, but the language is defined in such a way that it's allowed. It will lead to <em>undefined behavior</em> though as the contents is <em>indeterminate</em>.</p>\n<p>As for the <em>reason</em> it's allowed, consider the definition of the subscript (array indexing) operator (From ISO/IEC 14882:2011(E) \u00a75.2.1/1 [expr.sub]):</p>\n<blockquote>\n<p id=\"so_36834260_36834652_0\">A postfix expression followed by an expression in square brackets is a postfix expression. One of the expressions shall have the type \u201c<strong><em>pointer to <code>T</code></em></strong>\u201d and the other shall have unscoped enumeration or integral type. The result is an lvalue of type \u201c<code>T</code>.\u201d The type \u201c<code>T</code>\u201d shall be a completely-defined object type. The expression <code>E1[E2]</code> is identical (by definition) to <code>*((E1)+(E2))</code></p>\n</blockquote>\n<p><sub>[Emphasis mine]</sub></p>\n<p>What happens due to the above is that the array <code>E1</code> is decayed to a pointer to the first element (i.e. it's equivalent to <code>&amp;(E1)[0]</code>), and then the compiler performs pointer arithmetic with <code>(E1)+(E2)</code>. And since the array has decayed to a pointer, there is no possibility for bounds-checking.</p>\n", "OwnerUserId": "440558", "LastEditorUserId": "440558", "LastEditDate": "2016-04-25T07:49:07.290", "Id": "36834652", "Score": "2", "CreationDate": "2016-04-25T07:43:26.960", "LastActivityDate": "2016-04-25T07:49:07.290"}, "36834260": {"CommentCount": "4", "ViewCount": "93", "PostTypeId": "1", "ClosedDate": "2016-04-25T07:46:37.777", "LastEditorUserId": "4253427", "LastActivityDate": "2016-04-25T07:49:07.290", "Body": "<p>I'd like a formal explanation on the stance of visual studio C++ and what it does when you create an array such as:</p>\n<pre><code>int a[3] = {1, 2, 3};\n</code></pre>\n<p>and you then do something like:</p>\n<pre><code>cout &lt;&lt; a[4];\n</code></pre>\n<p>Upon test, it will print out the garbage stored in that memory location. Why does it allow the programmer to do this, while a language like javaScript will prevent the user from doing so?</p>\n<p>What's the prevailing philosophy by not making the compiler ban this kind of behavior from the user in C++? Is this something carried over from C?</p>\n<p>These are just some minor curiosities that I have, and perhaps the person who answers can tell me where I'd be able to find such information. The answer as to <em>what</em> is happening is not what I'm asking, it's the <em>why</em> that I'm interested in.</p>\n<p>Thank you.</p>\n", "LastEditDate": "2016-04-25T07:35:14.200", "AcceptedAnswerId": "36834652", "Title": "Does visual studio let you access outside the bound of arrays? (VS2013)", "Id": "36834260", "Score": "0", "CreationDate": "2016-04-25T07:21:50.427", "Tags": "<c++><visual-studio><compiler-errors><compiler-warnings>", "OwnerUserId": "3499524", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_36834260_36834652_0": {"section_id": 5986, "quality": 0.8823529411764706, "length": 30}}, "n3337": {"so_36834260_36834652_0": {"section_id": 5754, "quality": 0.9117647058823529, "length": 31}}, "n4659": {"so_36834260_36834652_0": {"section_id": 7486, "quality": 0.8235294117647058, "length": 28}}}});