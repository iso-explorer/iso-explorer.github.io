post_cb({"12979525": {"ParentId": "12978745", "CommentCount": "0", "Body": "<p>You're correct that the standard is at fault in this regard.  I have a feeling that this case falls into the gap between 3.2p1 (at most one definition per translation unit, as in your question) and 3.2p6 (which describes how classes, enumerations, inline functions, and various templates can have duplicate definitions across translation units).  </p>\n<p>For comparison, in C, 6.9p5 requires that (my emphasis):</p>\n<blockquote>\n<p id=\"so_12978745_12979525_0\">An external definition is an external declaration that is also a definition of a function\n  (other than an inline definition) or an object. If an identifier declared with external linkage is used in an expression (other than as part of the operand of a <code>sizeof</code> or <code>_Alignof</code> operator whose result is an integer constant), somewhere in the entire program there shall be exactly one external definition for the identifier; <strong>otherwise, there shall be no more than one</strong>.</p>\n</blockquote>\n", "OwnerUserId": "567292", "PostTypeId": "2", "Id": "12979525", "Score": "5", "CreationDate": "2012-10-19T17:38:31.057", "LastActivityDate": "2012-10-19T17:38:31.057"}, "12979016": {"ParentId": "12978745", "PostTypeId": "2", "CommentCount": "12", "Body": "<p>Your program violates the linkage rules.  C++11 \u00a73.5[basic.link]/9 states:</p>\n<blockquote>\n<p id=\"so_12978745_12979016_0\">Two names that are the same and that are declared in different scopes shall denote the same\n  variable, function, type, enumerator, template or namespace if</p>\n<ul>\n<li><p id=\"so_12978745_12979016_1\">both names have external linkage or else both names have internal linkage and are declared in the same translation unit; and</p></li>\n<li><p id=\"so_12978745_12979016_2\">both names refer to members of the same namespace or to members, not by inheritance, of the same class; and</p></li>\n<li><p id=\"so_12978745_12979016_3\">when both names denote functions, the parameter-type-lists of the functions are identical; and</p></li>\n<li><p id=\"so_12978745_12979016_4\">when both names denote function templates, the signatures are the same.</p></li>\n</ul>\n</blockquote>\n<p>(I've cited the complete paragraph, for reference.  The second two bullets do not apply here.)</p>\n<p>In your program, there are two names <code>x</code>, which are the same.  They are declared in different scopes (in this case, they are declared in different translation units).  Both names have external linkage and both names refer to members of the same namespace (the global namespace).</p>\n<p>These two names <strong>do not</strong> denote the same variable.  The declaration <code>int x;</code> defines a variable.  Because there are two such definitions in the program, there are two variables in the program.  The name \"x\" in one translation unit denotes one of these variables; the name \"x\" in the other translation unit denotes the other.  Therefore, the program is ill-formed.</p>\n", "OwnerUserId": "151292", "LastEditorUserId": "151292", "LastEditDate": "2012-10-19T18:10:49.053", "Id": "12979016", "Score": "11", "CreationDate": "2012-10-19T17:02:18.483", "LastActivityDate": "2012-10-19T18:10:49.053"}, "12978745": {"CommentCount": "0", "AcceptedAnswerId": "12979016", "CreationDate": "2012-10-19T16:44:03.967", "LastActivityDate": "2012-10-19T18:10:49.053", "PostTypeId": "1", "ViewCount": "619", "FavoriteCount": "2", "Title": "If I don't odr-use a variable, can I have multiple definitions of it across translation units?", "Id": "12978745", "Score": "13", "Body": "<p>The standard seems to imply that there is no restriction on the number of definitions of a variable if it is not <em>odr-used</em> (\u00a73.2/3):</p>\n<blockquote>\n<p id=\"so_12978745_12978745_0\">Every program shall contain exactly one definition of every non-inline function or variable that is odr-used in that program; no diagnostic required.</p>\n</blockquote>\n<p>It does say that any variable can't be defined multiple times within a translation unit (\u00a73.2/1):</p>\n<blockquote>\n<p id=\"so_12978745_12978745_1\">No translation unit shall contain more than one definition of any variable, function, class type, enumeration type, or template.</p>\n</blockquote>\n<p>But I can't find a restriction for non-odr-used variables across the entire program. So why can't I compile something like the following:</p>\n<pre><code>// other.cpp\nint x;\n\n// main.cpp\nint x;\nint main() {}\n</code></pre>\n<p>Compiling and linking these files with g++ 4.6.3, I get a linker error for <code>multiple definition of 'x'</code>. To be honest, I expect this, but since <code>x</code> is not odr-used anywhere (as far as I can tell), I can't see how the standard restricts this. Or is it undefined behaviour?</p>\n", "Tags": "<c++><linker><c++11><standards><one-definition-rule>", "OwnerUserId": "150634", "AnswerCount": "4"}, "12978881": {"ParentId": "12978745", "CommentCount": "0", "Body": "<p>There is no error in compiling that, the error is in its linkage. By default your global variable or functions are public to other files(have <code>extern</code> storage) so at the end when linker want to link your code it see two definition for <code>x</code> and it can't select one of them, so if you do not use <code>x</code> of <code>main.cpp</code> in <code>other.cpp</code> and vice-verse make them static(that means only visible to the file that contain it)</p>\n<pre><code>// other.cpp\nstatic int x;\n\n// main.cpp\nstatic int x;\n</code></pre>\n", "OwnerUserId": "1425813", "PostTypeId": "2", "Id": "12978881", "Score": "0", "CreationDate": "2012-10-19T16:52:48.257", "LastActivityDate": "2012-10-19T16:52:48.257"}, "bq_ids": {"n4140": {"so_12978745_12979016_2": {"section_id": 7142, "quality": 1.0, "length": 10}, "so_12978745_12979016_1": {"section_id": 7142, "quality": 1.0, "length": 15}, "so_12978745_12979016_3": {"section_id": 7142, "quality": 1.0, "length": 8}, "so_12978745_12978745_0": {"section_id": 7041, "quality": 1.0, "length": 12}, "so_12978745_12979016_4": {"section_id": 7142, "quality": 1.0, "length": 8}, "so_12978745_12978745_1": {"section_id": 7038, "quality": 1.0, "length": 14}, "so_12978745_12978941_0": {"section_id": 5768, "quality": 0.7692307692307693, "length": 10}, "so_12978745_12979016_0": {"section_id": 7142, "quality": 1.0, "length": 14}}, "n3337": {"so_12978745_12979016_2": {"section_id": 6886, "quality": 1.0, "length": 10}, "so_12978745_12979016_1": {"section_id": 6886, "quality": 1.0, "length": 15}, "so_12978745_12979016_3": {"section_id": 6886, "quality": 1.0, "length": 8}, "so_12978745_12978745_0": {"section_id": 6786, "quality": 1.0, "length": 12}, "so_12978745_12979016_4": {"section_id": 6886, "quality": 1.0, "length": 8}, "so_12978745_12978745_1": {"section_id": 6784, "quality": 1.0, "length": 14}, "so_12978745_12978941_0": {"section_id": 5541, "quality": 0.7692307692307693, "length": 10}, "so_12978745_12979016_0": {"section_id": 6886, "quality": 1.0, "length": 14}}, "n4659": {"so_12978745_12979016_4": {"section_id": 8643, "quality": 1.0, "length": 8}, "so_12978745_12979016_1": {"section_id": 8643, "quality": 1.0, "length": 15}, "so_12978745_12979016_3": {"section_id": 8643, "quality": 1.0, "length": 8}, "so_12978745_12978745_0": {"section_id": 8538, "quality": 1.0, "length": 12}, "so_12978745_12978745_1": {"section_id": 8535, "quality": 1.0, "length": 14}, "so_12978745_12978941_0": {"section_id": 7225, "quality": 0.7692307692307693, "length": 10}, "so_12978745_12979016_0": {"section_id": 8643, "quality": 0.9285714285714286, "length": 13}, "so_12978745_12979016_2": {"section_id": 8643, "quality": 1.0, "length": 10}}}, "12978941": {"ParentId": "12978745", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>If standard does not say anything about definitions of unused variables then you can not imply that there may be multiple:</p>\n<blockquote>\n<p id=\"so_12978745_12978941_0\">Undefined behavior may also be expected when this International\n  Standard omits the description of any explicit definition of\n  behavior.</p>\n</blockquote>\n<p>So it may compile and run nicely or may stop during translation with error message or may crash runtime etc. </p>\n<p>EDIT: See James McNellis answer the standard indeed actually has rules about it.</p>\n", "OwnerUserId": "528720", "LastEditorUserId": "528720", "LastEditDate": "2012-10-19T17:19:08.987", "Id": "12978941", "Score": "1", "CreationDate": "2012-10-19T16:57:28.440", "LastActivityDate": "2012-10-19T17:19:08.987"}});