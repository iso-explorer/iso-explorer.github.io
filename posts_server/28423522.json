post_cb({"28423522": {"CommentCount": "0", "ViewCount": "114", "PostTypeId": "1", "LastEditorUserId": "16287", "CreationDate": "2015-02-10T03:22:01.430", "LastActivityDate": "2015-02-10T04:08:34.037", "Title": "Why is the 'explicit' keyword allowing implicit conversions?", "AcceptedAnswerId": "28423592", "LastEditDate": "2015-02-10T04:08:34.037", "Id": "28423522", "Score": "3", "Body": "<pre><code>class Test {\n\n    private:\n    int value;\n\n    public:\n    void display(void)\n    {\n        cout &lt;&lt; \"Value [\" &lt;&lt; value &lt;&lt; \"]\" &lt;&lt; endl;\n    }\n    explicit Test(int i)\n    {\n        value=i;\n    }   \n};\n\nint main() {\n\n    Test a(5);\n    Test b(4.9);\n\n    a.display();\n    b.display();\n\n    cin.get();\n    return 0;\n}\n</code></pre>\n<p>Float value gets converted to int even though explicit is mentioned.</p>\n<p>I was expecting (incorrectly) that float does not get converted to integer and object b not to be constructed.</p>\n", "Tags": "<c++>", "OwnerUserId": "385349", "AnswerCount": "2"}, "28423542": {"ParentId": "28423522", "CommentCount": "5", "Body": "<p><code>explicit</code> just prevents any implicit conversions. So if you had:</p>\n<pre><code>void foo(Test t);\n</code></pre>\n<p>You cannot call <code>foo(4);</code> because the <code>Test</code> constructor is <code>explicit</code>. You'd have to call <code>foo(Test(4));</code>. The <code>explicit</code> keyword has nothing to do with any conversions that might have to happen during construction. </p>\n<p>From the standard [class.conv.ctor]:</p>\n<blockquote>\n<p id=\"so_28423522_28423542_0\">An explicit constructor constructs objects just like non-explicit constructors, but does so <strong>only</strong> where the\n  direct-initialization syntax (8.5) or where casts (5.2.9, 5.4) are <strong>explicitly</strong> used.</p>\n</blockquote>\n<p>Which means that <code>Test t = 4;</code> is also illegal, but <code>Test t(42.0)</code> is fine. </p>\n", "OwnerUserId": "2069064", "PostTypeId": "2", "Id": "28423542", "Score": "3", "CreationDate": "2015-02-10T03:23:34.847", "LastActivityDate": "2015-02-10T03:23:34.847"}, "28423592": {"ParentId": "28423522", "PostTypeId": "2", "CommentCount": "4", "Body": "<p><code>explicit</code> does not prevent implicit conversions of <strong>constructor parameters</strong>.  It means that the constructor itself may not be used <em>as</em> an implicit conversion to your class type <code>Test</code>.</p>\n<pre><code>void func( Test );  // function declaration\n\nfunc( 5 ); // Your \"explicit\" makes this call an error.\n</code></pre>\n<p>To prevent implicit conversions of parameters for your constructor (or <em>any</em> function) you may use the C++11 <code>= delete</code> syntax.</p>\n<pre><code>  Test(int i)\n  {\n      value=i;\n  }   \n\n  template&lt;typename T&gt;\n  Test(const T&amp;) = delete;\n  // ^ Aside from your int constructor and the implicitly-generated \n  // copy constructor, this will be a better match for any other type\n</code></pre>\n", "OwnerUserId": "16287", "LastEditorUserId": "16287", "LastEditDate": "2015-02-10T03:45:49.453", "Id": "28423592", "Score": "7", "CreationDate": "2015-02-10T03:30:52.970", "LastActivityDate": "2015-02-10T03:45:49.453"}, "bq_ids": {"n4140": {"so_28423522_28423542_0": {"section_id": 389, "quality": 0.9411764705882353, "length": 16}}, "n3337": {"so_28423522_28423542_0": {"section_id": 380, "quality": 0.9411764705882353, "length": 16}}, "n4659": {"so_28423522_28423542_0": {"section_id": 406, "quality": 0.9411764705882353, "length": 16}}}});