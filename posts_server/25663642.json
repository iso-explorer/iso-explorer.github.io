post_cb({"bq_ids": {"n4140": {"so_25663642_25663854_0": {"length": 38, "quality": 0.7037037037037037, "section_id": 378}}, "n3337": {"so_25663642_25663854_0": {"length": 50, "quality": 0.9259259259259259, "section_id": 369}}, "n4659": {"so_25663642_25663854_0": {"length": 31, "quality": 0.5740740740740741, "section_id": 392}}}, "25663854": {"Id": "25663854", "PostTypeId": "2", "Body": "<p>It shouldn't compile. C++11 [class.temporary] has this to say about creating a temporary object:</p>\n<blockquote>\n<p id=\"so_25663642_25663854_0\">12.2/1 Even when the creation of the temporary object is <strong>unevaluated</strong>\n  or otherwise avoided, <strong>all the semantic restrictions shall be respected</strong> as if the temporary object had been created and later destroyed. [ <em>Note:</em> even if there is no call to the destructor or copy/move constructor, all the <strong>semantic restrictions, such as accessibility</strong> and whether the function is deleted, shall be satisfied. However, in the special case of a function call used as the operand of a <em>decltype-specifier</em>, no temporary is introduced, so the foregoing does not apply to the prvalue of any such function call. \u2014 <em>end note</em> ]</p>\n</blockquote>\n<p>So, even when unevaluated, you're still restricted by the accessibility of any functions (including constructors) needed to create and destroy the temporary. The final sentence of the note clarifies that a function like <code>declval</code> can be used to avoid this obstacle.</p>\n", "LastActivityDate": "2014-09-04T11:04:31.163", "CommentCount": "2", "CreationDate": "2014-09-04T11:04:31.163", "ParentId": "25663642", "Score": "11", "OwnerUserId": "204847"}, "25663642": {"ViewCount": "470", "Body": "<p>Look at the code:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;utility&gt;\n\nclass test\n{\nprivate:\n    test() { }\npublic:\n    test foo() { return *this; }\n\n    static const char *name() { return \"test\"; }\n};\n\nint main()\n{\n    std::cout &lt;&lt; decltype(test().foo())::name() &lt;&lt; std::endl;               // 1\n    std::cout &lt;&lt; decltype(std::declval&lt;test&gt;().foo())::name() &lt;&lt; std::endl; // 2\n}\n</code></pre>\n<p>I expected <code>// 1</code> line cannot be compiled because the default constructor of <code>test</code> is private.</p>\n<p><a href=\"http://ideone.com/AMdoez\" rel=\"nofollow\">However, it works well.</a> I tested it on my g++ 4.8.3 with <code>-Wall -Wextra -Werror -pedantic</code> in disbelief, but it works well without any errors or warnings.</p>\n<p>(In addition, it seems to work well in GCC 4.9.1 as well.)</p>\n<p>From <a href=\"http://en.cppreference.com/w/cpp/utility/declval\" rel=\"nofollow\">this page</a>, I guess we can use private default constructor if the expression is unevaluated. So, I tested the following to check it.</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;utility&gt;\n\nclass test\n{\nprivate:\n    test(int) { }\npublic:\n    test foo() { return *this; }\n\n    static const char *name() { return \"test\"; }\n};\n\nint main()\n{\n    std::cout &lt;&lt; decltype(test().foo())::name() &lt;&lt; std::endl;               // 1\n    std::cout &lt;&lt; decltype(std::declval&lt;test&gt;().foo())::name() &lt;&lt; std::endl; // 2\n}\n</code></pre>\n<p><a href=\"http://ideone.com/JtbM2n\" rel=\"nofollow\">(live example)</a></p>\n<p>As expected, it wasn't compiled.</p>\n<p>But.... <strong>why??</strong> How can it be possible? Can we use <strong>private</strong> members in unevaluated expression? Or is there a special rule for default constructors? Could you explain me why?</p>\n", "AcceptedAnswerId": "25663854", "Title": "Why can I use private default constructor in decltype()?", "CreationDate": "2014-09-04T10:53:54.123", "Id": "25663642", "CommentCount": "6", "LastEditDate": "2015-07-25T20:02:41.987", "PostTypeId": "1", "LastEditorUserId": "3204551", "LastActivityDate": "2015-07-25T20:02:41.987", "Score": "7", "OwnerUserId": "2729109", "Tags": "<c++><c++11><language-lawyer><private-members><decltype>", "AnswerCount": "1"}});