post_cb({"bq_ids": {"n4140": {"so_20313322_20313322_0": {"length": 5, "quality": 0.7142857142857143, "section_id": 2707}, "so_20313322_20313322_4": {"length": 7, "quality": 0.7777777777777778, "section_id": 4353}, "so_20313322_20313322_7": {"length": 7, "quality": 0.7777777777777778, "section_id": 4355}, "so_20313322_20313322_6": {"length": 4, "quality": 0.8, "section_id": 4354}, "so_20313322_20313322_1": {"length": 5, "quality": 0.7142857142857143, "section_id": 4351}, "so_20313322_20313322_3": {"length": 4, "quality": 1.0, "section_id": 4352}}, "n3337": {"so_20313322_20313322_1": {"length": 4, "quality": 0.5714285714285714, "section_id": 457}, "so_20313322_20313322_6": {"length": 4, "quality": 0.8, "section_id": 6788}, "so_20313322_20313322_0": {"length": 5, "quality": 0.7142857142857143, "section_id": 2669}}, "n4659": {"so_20313322_20313322_1": {"length": 5, "quality": 0.7142857142857143, "section_id": 5613}, "so_20313322_20313322_4": {"length": 7, "quality": 0.7777777777777778, "section_id": 5615}, "so_20313322_20313322_7": {"length": 7, "quality": 0.7777777777777778, "section_id": 5617}, "so_20313322_20313322_6": {"length": 4, "quality": 0.8, "section_id": 5616}, "so_20313322_20313322_0": {"length": 5, "quality": 0.7142857142857143, "section_id": 1076}, "so_20313322_20313322_3": {"length": 4, "quality": 1.0, "section_id": 5614}}}, "20313322": {"ViewCount": "220", "Body": "<p>As per N3797, <code>std::make_unique</code> has three \"overloads\":</p>\n<blockquote>\n<h3>20.8.1.4 unique_ptr creation [unique.ptr.create]</h3>\n<p id=\"so_20313322_20313322_0\"><code>template &lt;class T, class... Args&gt; unique_ptr&lt;T&gt; make_unique(Args&amp;&amp;... args);</code></p>\n<p id=\"so_20313322_20313322_1\"><sup>1</sup> <em>Remarks:</em> This function shall not participate in overload resolution unless <code>T</code> is not an array.</p>\n<p id=\"so_20313322_20313322_2\"><sup>2</sup> <em>Returns:</em> <code>unique_ptr&lt;T&gt;(new T(std::forward&lt;Args&gt;(args)...))</code>.</p>\n<p id=\"so_20313322_20313322_3\"><code>template &lt;class T&gt; unique_ptr&lt;T&gt; make_unique(size_t n);</code></p>\n<p id=\"so_20313322_20313322_4\"><sup>3</sup> <em>Remarks:</em> This function shall not participate in overload resolution unless <code>T</code> is an array of unknown bound.</p>\n<p id=\"so_20313322_20313322_5\"><sup>4</sup> <em>Returns:</em> <code>unique_ptr&lt;T&gt;(new remove_extent_t&lt;T&gt;[n]())</code>.</p>\n<p id=\"so_20313322_20313322_6\"><code>template &lt;class T, class... Args&gt;</code><em><code>unspecified</code></em><code>make_unique(Args&amp;&amp;...) = delete;</code></p>\n<p id=\"so_20313322_20313322_7\"><sup>5</sup> <em>Remarks:</em> This function shall not participate in overload resolution unless <code>T</code> is an array of known bound.</p>\n</blockquote>\n<p>I don't understand the reason for the third, deleted overload. If <code>T</code> is an array of known bounds, the first two don't participate in overload resolution anyways, so why does the standard specifies the third one? Isn't this identical to leaving it out and specifying the first two overloads alone?</p>\n<p><strong>EDIT</strong>: Please note that I know why <code>make_unique&lt;T[N]&gt;</code> is not allowed. The question is not about that, it's about why the third overloaded is needed. AFAICT, the effect of having or not having it is identical, even wrt <code>make_unique&lt;T[N]&gt;</code>.</p>\n", "Title": "What is the purpose of the third \"overload\" for make_unique?", "CreationDate": "2013-12-01T14:42:04.587", "Id": "20313322", "CommentCount": "7", "LastEditDate": "2013-12-01T14:58:22.080", "PostTypeId": "1", "LastEditorUserId": "2073257", "LastActivityDate": "2013-12-01T14:58:22.080", "Tags": "<c++><c++11><unique-ptr><c++14>", "Score": "5", "OwnerUserId": "2073257", "ClosedDate": "2013-12-10T13:41:09.110", "AnswerCount": "0"}});