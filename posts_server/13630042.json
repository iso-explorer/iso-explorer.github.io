post_cb({"13630086": {"Id": "13630086", "PostTypeId": "2", "Body": "<p>Unless one of the operands is a <code>float</code> or <code>double</code>, <code>/</code> does integer division and discards the remainder.</p>\n<p>Write it like this:</p>\n<pre><code>( (double)now / length * 100 )\n</code></pre>\n", "LastEditorUserId": "76722", "LastActivityDate": "2012-11-29T16:32:27.127", "Score": "6", "CreationDate": "2012-11-29T16:20:33.253", "ParentId": "13630042", "CommentCount": "3", "OwnerUserId": "2101267", "LastEditDate": "2012-11-29T16:32:27.127"}, "13630095": {"Id": "13630095", "PostTypeId": "2", "Body": "<p>Convert the calculations to floats</p>\n<pre><code>i = (float)now / length * 100;\nd = (float)now / length * 100;\n</code></pre>\n<p>Essentially, if you divide ints, the round down to the nearest number. Thus you could only have 0 or 1. Then it multiplies by 100. </p>\n<p>Alternatively, you could do this:</p>\n<pre><code>i = 100 * now / length;\nd = 100 * now / length;\n</code></pre>\n<p>This would round down after the number was multiplied by 100.</p>\n", "LastActivityDate": "2012-11-29T16:21:03.917", "CommentCount": "0", "CreationDate": "2012-11-29T16:21:03.917", "ParentId": "13630042", "Score": "2", "OwnerUserId": "544198"}, "13630131": {"Id": "13630131", "PostTypeId": "2", "Body": "<p>Alternatively, to avoid floating division, you could also multiply first, then divide:</p>\n<pre><code>(now * 100) / length\n</code></pre>\n", "LastActivityDate": "2012-11-29T16:22:53.797", "CommentCount": "0", "CreationDate": "2012-11-29T16:22:53.797", "ParentId": "13630042", "Score": "1", "OwnerUserId": "694509"}, "bq_ids": {"n4140": {"so_13630042_13630606_0": {"length": 9, "quality": 0.9, "section_id": 6137}, "so_13630042_13630606_1": {"length": 29, "quality": 0.9354838709677419, "section_id": 5943}}, "n3337": {"so_13630042_13630606_1": {"length": 29, "quality": 0.9354838709677419, "section_id": 5714}, "so_13630042_13630606_0": {"length": 9, "quality": 0.9, "section_id": 5901}}, "n4659": {"so_13630042_13630606_1": {"length": 29, "quality": 0.9354838709677419, "section_id": 7428}, "so_13630042_13630606_0": {"length": 9, "quality": 0.9, "section_id": 7634}}}, "13630112": {"Id": "13630112", "PostTypeId": "2", "Body": "<p>Try <code>(now * 100) / length</code>.\nIt's because the result of <code>now / length</code> is converted to int, so it could be only <code>0</code> or <code>1</code>.</p>\n", "LastActivityDate": "2012-11-29T16:21:54.730", "CommentCount": "2", "CreationDate": "2012-11-29T16:21:54.730", "ParentId": "13630042", "Score": "1", "OwnerUserId": "1317074"}, "13630042": {"ViewCount": "437", "Body": "<p>I read in a file with <code>ifstream</code>, and I want to write out with <code>cout</code> how much of the file already read, in percent.</p>\n<pre><code>long length = 0, now = 0;\nint i = 0;\ndouble d = 0;\n\nfile.seekg( 0, std::ios::end );\nlength = file.teelg();\nfile.seekg( 0, std::ios::beg );\n\nwhile ( std::getline( file, buffer ) ) {\n    now = file.teelg;\n\n    i = now / length * 100;\n    d = now / length * 100;\n\n    std::cout &lt;&lt; length &lt;&lt; \" \"      // working\n              &lt;&lt; now &lt;&lt; \" \"     // working\n              &lt;&lt; ( now / length * 100 ) &lt;&lt; \" \"  // not working = 0\n              &lt;&lt; i &lt;&lt; \" \"           // not working = 0\n              &lt;&lt; d;         // not working = 0\n}\n</code></pre>\n<p>Only if <code>now = length</code> shows me that it's <code>100%</code>, but every other time it fails and gives me back <code>0</code>.\nI can imagine, that the answer is simple as the <code>1*1</code>, but now I can't find the solution. I also tried with casting, maybe because of that's the problem, but of course nothing.</p>\n", "AcceptedAnswerId": "13630086", "Title": "C++ - cout prints quotient of two integers as zero", "CreationDate": "2012-11-29T16:18:37.277", "Id": "13630042", "CommentCount": "1", "LastEditDate": "2012-11-29T18:20:42.193", "PostTypeId": "1", "LastEditorUserId": "1339987", "LastActivityDate": "2012-11-29T18:20:42.193", "Score": "0", "OwnerUserId": "704251", "Tags": "<c++><numbers><integer><cout>", "AnswerCount": "6"}, "13630606": {"Id": "13630606", "PostTypeId": "2", "Body": "<p>Your expression</p>\n<pre><code>( now / length * 100 )\n</code></pre>\n<p>is evaluated left-to-right, therefore like this:</p>\n<pre><code>int tmp    = now / length\nint result = tmp * 100\n</code></pre>\n<p>Because of ...</p>\n<blockquote>\n<h3><em>5.6 Multiplicative operators [expr.mul]</em></h3>\n<p id=\"so_13630042_13630606_0\">[...] For\n  integral operands the / operator yields the algebraic quotient with any fractional part discarded [...]</p>\n</blockquote>\n<p>... for any <code>now &lt; length</code>, the result will be zero.</p>\n<p>Adding a floating point conversion can help:</p>\n<blockquote>\n<h2><em>5 Expressions [expr]</em>:</h2>\n<p id=\"so_13630042_13630606_1\"><em>10</em>: Many binary operators that expect operands of arithmetic or enumeration type cause conversions and yield\n  result types in a similar way. The purpose is to yield a common type, which is also the type of the result.\n  This pattern is called the usual arithmetic conversions, which are defined as follows:</p>\n<ul>\n<li>...</li>\n<li>If either operand is of type long double, the other shall be converted to long double.</li>\n<li>Otherwise, if either operand is double, the other shall be converted to double.</li>\n<li>Otherwise, if either operand is float, the other shall be converted to float.</li>\n<li>...</li>\n</ul>\n</blockquote>\n<p>So in summary, for any two primitive operands (or for any non-overloaded <code>operator/</code>), if one operand is of floating type, the other operand is converted to floating type, too:</p>\n<pre><code>float(now) / length * 100\n</code></pre>\n<p>... would convert all operands to float:</p>\n<pre><code>float tmp    = float(now) / length\nfloat result = tmp * 100.0f\n</code></pre>\n<p>But you can also rearrange your calculation to not use any floating point math:</p>\n<pre><code>i = 100*now / length;\nd = 100*now / length\n</code></pre>\n<p>which then gives an integral number as desired.</p>\n<p>If you wonder why this works mathematically:</p>\n<pre><code>  100*now              now\n ----------  = 100 * --------\n   length             length\n</code></pre>\n<p>The left side is what you have now, the right side is what you had. Both are equivalent, but when it comes to finite datatypes, the order of execution becomes highly relevant.</p>\n", "LastEditorUserId": "76722", "LastActivityDate": "2012-11-29T16:52:16.693", "Score": "1", "CreationDate": "2012-11-29T16:47:00.200", "ParentId": "13630042", "CommentCount": "0", "OwnerUserId": "76722", "LastEditDate": "2012-11-29T16:52:16.693"}, "13630087": {"Id": "13630087", "PostTypeId": "2", "Body": "<p>If <code>length &gt; now</code> then <code>now / length</code> is zero in integer division.  Cast to double first.</p>\n", "LastActivityDate": "2012-11-29T16:20:33.777", "CommentCount": "0", "CreationDate": "2012-11-29T16:20:33.777", "ParentId": "13630042", "Score": "6", "OwnerUserId": "1339987"}});