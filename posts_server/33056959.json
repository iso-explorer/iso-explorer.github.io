post_cb({"bq_ids": {"n4140": {"so_33056959_33057074_1": {"length": 35, "quality": 0.9459459459459459, "section_id": 264}, "so_33056959_33057074_0": {"length": 35, "quality": 0.9459459459459459, "section_id": 264}}, "n3337": {"so_33056959_33057074_1": {"length": 35, "quality": 0.9459459459459459, "section_id": 255}, "so_33056959_33057074_0": {"length": 35, "quality": 0.9459459459459459, "section_id": 255}}}, "33057074": {"LastActivityDate": "2015-10-10T18:00:27.590", "CommentCount": "1", "Body": "<h3>What does the Standard (<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3797.pdf\" rel=\"nofollow\">n3797</a>) say?</h3>\n<blockquote>\n<pre><code>14.7.3    <b>Explicit Specialization</b>    [temp.expl.spec]</code></pre>\n<blockquote>\n<p id=\"so_33056959_33057074_1\">An explicit specialization shall be declared in a namespace enclosing\n    the specialized template. An explicit specialization whose\n    <em>declarator-id</em> is not qualified shall be declared in the nearest\n    enclosing namespace of the template, or, if the namespace is inline\n    (7.3.1), any namespace from its enclosing namespace set. Such a\n    declaration may also be a definition. If the declaration is not a\n    definition, the specialization may be defined later (7.3.1.2).</p>\n</blockquote>\n</blockquote>\n<p><strong>Verdict</strong>: Your specialization is an <em>explicit specialization</em>, and it is <em>qualified</em>, meaning that the snippet is legal. As such, the behavior shown by <em>clang</em> is the correct one.</p>\n<hr>\n<p>The relevant bug report for <em>gcc</em>:</p>\n<ul>\n<li><a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=56480\" rel=\"nofollow\"> gcc.gnu.org/bugzilla - <strong>Bug 56480</strong> - Explicit specialization in a namespace enclosing the specialized template</a></li>\n</ul>\n</hr>", "CreationDate": "2015-10-10T17:45:23.160", "LastEditDate": "2015-10-10T18:00:27.590", "ParentId": "33056959", "Id": "33057074", "LastEditorUserId": "1090079", "PostTypeId": "2", "Score": "6", "OwnerUserId": "1090079"}, "33056959": {"CreationDate": "2015-10-10T17:34:53.567", "ViewCount": "271", "Id": "33056959", "AcceptedAnswerId": "33057074", "Score": "5", "Title": "When function template is specialized in a different namespace, GCC and clang disagree", "CommentCount": "0", "Body": "<p>See the following code:</p>\n<pre><code>namespace ns {\n\ntemplate &lt;typename T&gt;\nvoid func() {}\n\n}\n\ntemplate &lt;&gt;\nvoid ns::func&lt;int&gt;() {}\n\nint main() {}\n</code></pre>\n<p>While clang 3.6 (C++14) compiles fine, GCC 5.2 (C++14) throws the following error</p>\n<pre><code>main.cpp:9:20: error: specialization of 'template&lt;class T&gt; void ns::func()' in different namespace [-fpermissive]\n void ns::func&lt;int&gt;() {}\n                    ^\nmain.cpp:4:6: error:   from definition of 'template&lt;class T&gt; void ns::func()' [-fpermissive]\n void func() {}\n      ^\n</code></pre>\n<p>So, what does the standard say about this? Who is correct?</p>\n", "Tags": "<c++><namespaces><language-lawyer><c++14><template-specialization>", "LastActivityDate": "2015-10-10T18:00:27.590", "PostTypeId": "1", "AnswerCount": "1", "OwnerUserId": "1348273"}});