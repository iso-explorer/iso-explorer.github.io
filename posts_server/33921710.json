post_cb({"33921710": {"CommentCount": "3", "ViewCount": "5767", "PostTypeId": "1", "LastEditorUserId": "718379", "CreationDate": "2015-11-25T16:31:14.350", "LastActivityDate": "2016-05-02T23:16:13.567", "Title": "C2280: attempting to reference a deleted function (union, struct, copy constructor)", "FavoriteCount": "1", "LastEditDate": "2016-05-02T16:32:38.403", "Id": "33921710", "Score": "6", "Body": "<p>I have a problem with misleading error messages, when I try to compile the following minimal sample in Visual Studio 2015:</p>\n<pre><code>class Vector\n{\n    float x;\n    float y;\n\npublic:\n\n    Vector(float x, float y) : x(x), y(y) {}\n    Vector&amp; operator = (const Vector&amp; v) { x = v.x; y = v.y; return *this; }\n    //Vector(Vector&amp;&amp;) = default;\n};\n\n\nclass Rect\n{\npublic:\n    union {\n        struct {\n            Vector p1, p2;\n        };\n\n        struct {\n            float p1x, p1y, p2x, p2y;\n        };\n    };\n\n    Rect() : p1(0,0),  p2(0,0) {}\n    Rect(Vector&amp; p1,  Vector&amp; p2) : p1(p1), p2(p2) {}\n\n    /*Rect(const Rect&amp;) = default;\n    Rect&amp; operator=(const Rect&amp;) = default;\n    Rect&amp; operator=(Rect&amp;&amp;) = default;\n    Rect(Rect&amp;&amp;) = default;*/\n};\n\n\nint main()\n{\n    Rect test = Rect();\n    test = Rect();\n    return 0;\n}\n</code></pre>\n<p>I got the following error messages:</p>\n<blockquote>\n<p id=\"so_33921710_33921710_0\">1&gt;...main.cpp(56): error C2280: 'Rect &amp;Rect::operator =(const Rect &amp;)': attempting to reference a deleted function</p>\n<p id=\"so_33921710_33921710_1\">1&gt;...main.cpp(50): note: compiler has generated 'Rect::operator =' here</p>\n</blockquote>\n<p>The compiler tries to tell me that, the copy constructor of class Rect is a deleted function. So I tried to add all kinds of additional (copy) constructors and assignment operators like shown below but without success:</p>\n<pre><code>Rect(const Rect&amp;) = default;\nRect&amp; operator=(const Rect&amp;) = default;\nRect&amp; operator=(Rect&amp;&amp;) = default;\nRect(Rect&amp;&amp;) = default;\n</code></pre>\n<p>I recognized that the error actually is not caused in the Rect class. When I comment the line</p>\n<pre><code>Vector&amp; operator = (const Vector&amp; v) { x = v.x; y = v.y; return *this; }\n</code></pre>\n<p>the error disappiers and when I want to keep this line, I have to add the following line:</p>\n<pre><code>Vector(Vector&amp;&amp;) = default;\n</code></pre>\n<p>However, this problem seems to show up only if I am using unions and structs inside my Rect class.\nSo I do not know, where my error is actually caused or if just the error message points to the wrong class.</p>\n", "Tags": "<c++><struct><unions><assignment-operator>", "OwnerUserId": "871495", "AnswerCount": "2"}, "36987534": {"ParentId": "33921710", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>The error is from the union placing the memory usage of the floats <code>p1x, ... p2y</code> on top of the allocation for the Vector objects.</p>\n<p>g++ would give a more explicit error message informing that an object with a constructor cannot be used in a union.</p>\n<p>I'm surprised VS does not report an error on the use of an object in a union directly. It would be interesting to see what happens if you declare the Vectors AFTER the floats in your union.</p>\n", "OwnerUserId": "2012862", "LastEditorUserId": "2012862", "LastEditDate": "2016-05-02T22:02:14.830", "Id": "36987534", "Score": "1", "CreationDate": "2016-05-02T16:50:44.240", "LastActivityDate": "2016-05-02T22:02:14.830"}, "bq_ids": {"n4140": {"so_33921710_36993074_3": {"section_id": 5914, "quality": 1.0, "length": 28}, "so_33921710_36993074_4": {"section_id": 5913, "quality": 1.0, "length": 9}}, "n3337": {"so_33921710_36993074_3": {"section_id": 5686, "quality": 1.0, "length": 28}, "so_33921710_36993074_4": {"section_id": 5685, "quality": 1.0, "length": 9}}, "n4659": {"so_33921710_36993074_3": {"section_id": 7406, "quality": 1.0, "length": 28}, "so_33921710_36993074_4": {"section_id": 7404, "quality": 1.0, "length": 9}}}, "36993074": {"ParentId": "33921710", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Repeating the error message:</p>\n<blockquote>\n<p id=\"so_33921710_36993074_0\"><code>main.cpp(56): error C2280: 'Rect &amp;Rect::operator =(const Rect &amp;)': attempting to reference a deleted function</code></p>\n</blockquote>\n<p>This is fairly clear: the member function <code>operator=</code> with parameter <code>const Rect &amp;</code> has been <code>delete</code>d, but your code tries to call it on the line <code>test = Rect();</code>.</p>\n<p>You then say:</p>\n<blockquote>\n<p id=\"so_33921710_36993074_1\">The compiler tries to tell me that, the copy constructor of class Rect is a deleted function</p>\n</blockquote>\n<p>However, you misread the error.  The error is about the function <code>operator =</code>, which is called <em>copy assignment operator</em>.  This is a different function to <em>copy constructor</em>, which would look like <code>Rect::Rect(const Rect &amp;)</code>.</p>\n<hr>\n<p>You say that you tried adding:</p>\n<blockquote>\n<p id=\"so_33921710_36993074_2\"><code>Rect&amp; operator=(const Rect&amp;) = default;</code></p>\n</blockquote>\n<p>However this would make no difference. The compiler-generated <code>operator=</code> function is <code>delete</code>d because it is not possible for the compiler to generate one (explanation for this comes below); writing <code>= default;</code> does not change this.  You have to actually write your own body for <code>operator=</code> which performs the actions that you want to occur when an assignment happens.</p>\n<hr>\n<p>In Standard C++ it is not permitted to have an anonymous struct, let alone an anonymous struct inside an anonymous union. So you are really out on your own here. The rules your compiler is using regarding <code>operator=</code>, copy constructor, etc. are not covered by any Standard.</p>\n<p>A version of your <code>Rect</code> that is compilable in Standard C might look like:</p>\n<pre><code>class Rect\n{\npublic:\n    struct S1 {\n        Vector p1, p2;\n        S1(Vector p1, Vector p2): p1(p1), p2(p2) {} \n    };\n    struct S2 {\n        float p1x, p1y, p2x, p2y;\n    };\n\n    union {\n        struct S1 s1;\n        struct S2 s2;\n    };\n\n    Rect() : s1({0, 0}, {0, 0}) {}\n    Rect(Vector p1,  Vector p2) : s1(p1, p2) {}\n};\n</code></pre>\n<p>So far, so good. For this class, the implicitly-declared <code>operator=</code> is <em>defined as deleted</em>. To see why , we first have to look at the implicitly-declared special functions for the anonymous union, because the behaviour of implicitly-declared function for a class depends on the behaviour of the same operation for each of its members.</p>\n<p>The relevant rule here for the union is C++14 [class.union]/1:</p>\n<blockquote>\n<p id=\"so_33921710_36993074_3\">If any non-static data member of a union has a non-trivial default constructor , copy constructor, move constructor, copy assignment operator, move assignment operator, or destructor, the corresponding member function of the union must be user-provided or it will be implicitly <code>delete</code>d for the union.</p>\n</blockquote>\n<p><code>Vector</code> has a non-trivial <code>operator=</code>, because you write your own body for it. Therefore <code>S1</code> has non-trivial <code>operator=</code>, because it has a member with non-trivial <code>operator=</code>, and so according to the above quote, the implicitly-declared <code>operator=</code> for the union is <code>delete</code>d.</p>\n<p>Note that there is no error about the copy-constructor: <code>Vector</code> <em>does</em> have a trivial copy-constructor, so the union does too.</p>\n<hr>\n<p>To fix this error you could do one of two things:</p>\n<ul>\n<li>Change <code>Vector::operator=</code> to be trivial, either by removing your definition entirely, or making it <code>= default;</code></li>\n<li>Write <code>operator=</code> for the <code>Rect</code> class</li>\n</ul>\n<p>Now, how would you write your own <code>operator=</code>?  Do you do <code>s1 = other.s1;</code>, or do you do <code>s2 = other.s2;</code> ? The compiler can't know that on its own, which is the reason behind the implicitly-declared <code>operator=</code> being deleted.</p>\n<p>Now, it seems you overlooked (either accidentally or deliberately) the rule about active members in C++:</p>\n<blockquote>\n<p id=\"so_33921710_36993074_4\">In a union, at most one of the non-static data members can be active at any time</p>\n</blockquote>\n<p>This means that if <code>s1</code> is the last member set, then you'd have to do <code>s1 = other.s1;</code>.  Or if <code>s2</code> is the last member set, you'd have to do <code>s2 = other.s2;</code>.  </p>\n<p>The copy-constructor doesn't run into this problem because it is <em>trivial</em>: the compiler can generate a bit-wise copy and that will correctly implement the copy regardless of which member was active. But since your <code>operator=</code> is non-trivial, that would not be possible. </p>\n<p>For example, imagine if you actually had a union of <code>std::string</code> and <code>std::vector</code> - bitwise copy doesn't work for either of those and you need to know which one is active in order to perform the copy.</p>\n<hr>\n<p>Reiterating: <strong>In standard C++ it is not permitted to read a member of a union other than the one most recently written to</strong>. You can't use unions for aliasing.  C++ has other language tools to achieve what you might do in C with union aliasing, <a href=\"https://stackoverflow.com/questions/2253878/why-does-c-disallow-anonymous-structs-and-unions\">see here for more discussion</a>.</p>\n<p>Based on the choice of members for your anonymous structs I suspect that this is what you intended to do.  If you really want to go ahead with this approach, relying on your compiler implementing union aliasing as a non-standard extension, then my advice would be to use the defaulted <code>operator=</code> for your <code>Vector</code> class.  </p>\n</hr></hr></hr></hr>", "OwnerUserId": "1505939", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:25:36.213", "Id": "36993074", "Score": "3", "CreationDate": "2016-05-02T23:16:13.567", "LastActivityDate": "2016-05-02T23:16:13.567"}});