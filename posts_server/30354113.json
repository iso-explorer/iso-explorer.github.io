post_cb({"30354909": {"ParentId": "30354113", "PostTypeId": "2", "CommentCount": "4", "CreationDate": "2015-05-20T16:05:22.197", "Score": "2", "LastEditorUserId": "3647361", "LastEditDate": "2015-05-20T16:09:43.213", "Id": "30354909", "OwnerUserId": "3647361", "Body": "<p>With @dyps suggestions, a sensible implementation is indeed possible:</p>\n<pre><code>template &lt;typename OutputIt&gt;\nauto make_raw_storage_iterator( OutputIt out ) {\n    return std::raw_storage_iterator&lt;OutputIt, std::remove_pointer_t&lt;decltype(&amp;*out)&gt;&gt;(out);\n}\n</code></pre>\n<p>(<a href=\"http://coliru.stacked-crooked.com/a/09bf337ea68ace62\" rel=\"nofollow\"><strong>Demo</strong></a> with cppreference's example)<br>\nThis is guaranteed to work since \u00a720.7.10/1, which imposes requirements for the template arguments of <code>raw_storage_iterator</code>, mandates that:</br></p>\n<blockquote>\n<p id=\"so_30354113_30354909_0\"><code>OutputIterator</code> is required to have its <code>operator*</code> return an object for\n  which <code>operator&amp;</code> is defined and returns a pointer to <code>T</code> [..]</p>\n</blockquote>\n<p>Where <code>T</code> is the second argument, the value type of the output range. So, given the underlying output iterator, we have enough information to determine the intended specialization of <code>raw_storage_iterator</code>.</p>\n<p>The reason this has not been proposed is assuredly not more than an oversight - consider that <code>make_reverse_iterator</code> or even <code>make_unique</code> have not been provided before C++14, either. Feel free to take the first step.</p>\n", "LastActivityDate": "2015-05-20T16:09:43.213"}, "30354113": {"CommentCount": "8", "ViewCount": "75", "CreationDate": "2015-05-20T15:30:10.483", "LastActivityDate": "2015-05-20T16:09:43.213", "Title": "Why there is no std::make_raw_storage_iterator?", "AcceptedAnswerId": "30354909", "PostTypeId": "1", "Id": "30354113", "Score": "3", "Body": "<p>I'm wondering why <code>std::raw_storage_iterator</code> does not have an accompanying <code>std::make_raw_storage_iterator</code> like <code>std::move_iterator</code> and <code>std::make_move_iterator</code>. The <code>std::raw_storage_iterator</code> class template has two template parameters. So I think it is actually more useful to provide a make function for <code>std::raw_storage_iterator</code> than <code>std::move_iterator</code> which only has a single template parameter to specify.</p>\n", "Tags": "<c++><templates>", "OwnerUserId": "1348273", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_30354113_30354909_0": {"section_id": 4250, "quality": 1.0, "length": 11}}, "n3337": {"so_30354113_30354909_0": {"section_id": 4091, "quality": 1.0, "length": 11}}, "n4659": {"so_30354113_30354909_0": {"section_id": 6405, "quality": 1.0, "length": 11}}}});