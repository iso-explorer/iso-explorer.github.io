post_cb({"24427058": {"ParentId": "18295302", "CommentCount": "0", "Body": "<p>First of all, T x[N] does default initialize the elements, although default initialization of a scalar type T actually does nothing. The above also holds for std::array x. I think what you need is list initialization.</p>\n", "OwnerUserId": "1348273", "PostTypeId": "2", "Id": "24427058", "Score": "0", "CreationDate": "2014-06-26T09:35:08.983", "LastActivityDate": "2014-06-26T09:35:08.983"}, "18295302": {"CommentCount": "1", "CreationDate": "2013-08-18T03:07:52.383", "PostTypeId": "1", "AcceptedAnswerId": "18295840", "LastEditorUserId": "103167", "LastActivityDate": "2017-03-29T14:09:19.820", "LastEditDate": "2017-03-29T14:09:19.820", "ViewCount": "33039", "FavoriteCount": "13", "Title": "Default initialization of std::array?", "Id": "18295302", "Score": "53", "Body": "<p>With C++11 <code>std::array</code>, do I have the guarantee that the syntax <code>std::array&lt;T, N&gt; x;</code> will default-initialize all the elements of the array ?</p>\n<p><strong>EDIT</strong>: if not, is there a syntax that will work on all arrays (including zero-sized arrays) to initialize all elements to their default value?</p>\n<p><strong>EDIT</strong>: on <a href=\"http://en.cppreference.com/w/cpp/container/array\" rel=\"noreferrer\">cppreference</a>, the default constructor description says:</p>\n<pre><code>(constructor) (implicitly declared) (public member function)\ndefault-constructs or copy-constructs every element of the array \n</code></pre>\n<p>so the answer may be yes. But I would like to be sure of that according to the standard or future standard.</p>\n", "Tags": "<c++11><initialization><default-constructor><stdarray>", "OwnerUserId": "882932", "AnswerCount": "4"}, "18304935": {"ParentId": "18295302", "CommentCount": "0", "Body": "<p><em>Default-initialization</em> is a term from the Standard potentially meaning no initialization at all, so you probably mean <em>zero-initialization</em>.</p>\n<p>The description at cppreference.com is actually a bit misleading. <code>std::array</code> is an aggregate class, and if the element type is primitive, it is POD: \"plain old data,\" with semantics closely matching the C language. The implicitly-defined constructor of <code>std::array&lt; int, N &gt;</code> is a <em>trivial</em> one which does absolutely nothing.</p>\n<p>Syntax like <code>std::array&lt; int, 3 &gt;()</code> or <code>std::array&lt; int, 3 &gt; x{}</code> which provide zeroed values do not do so by invoking a constructor. Getting zeroes is part of <em>value-initialization</em>, specified in C++11 \u00a78.5/8:</p>\n<blockquote>\n<p id=\"so_18295302_18304935_0\">To value-initialize an object of type T means:</p>\n<p id=\"so_18295302_18304935_1\">\u2014 if T is a (possibly cv-qualified) class type without a user-provided or deleted default constructor, then the object is zero-initialized \u2026, and if T has a non-trivial default constructor, the object is default-initialized;</p>\n</blockquote>\n<p><code>std::array</code> has no user-provided default constructor, so it gets zero-initialized. It has an implicitly-defined default constructor, but it is trivial, so it is never default-initialized. (But this doesn't make a difference since trivial initialization by definition has no effect at runtime.)</p>\n<blockquote>\n<p id=\"so_18295302_18304935_2\">if not, is there a syntax that will work on all arrays (including zero-sized arrays) to initialize all elements to their default value?</p>\n</blockquote>\n<p>C-style arrays and <code>std::array</code> are both aggregates, and the way to completely zero-initialize any aggregate is with the syntax <code>= {}</code>. This works since C++98. Note that C-style arrays cannot have zero extent, and that <code>sizeof (std::array&lt; X, 0 &gt;)</code> is not zero.</p>\n", "OwnerUserId": "153285", "PostTypeId": "2", "Id": "18304935", "Score": "10", "CreationDate": "2013-08-19T00:18:54.717", "LastActivityDate": "2013-08-19T00:18:54.717"}, "18295515": {"ParentId": "18295302", "CommentCount": "0", "Body": "<p>Both <code>T x[N];</code> and <code>std::array&lt;T, N&gt; x;</code> default-initialize every element of the array.</p>\n<p>For example, if <code>T = std::string</code>, every element will be an empty string. If <code>T</code> is a class without a default constructor, both will fail to compile. If <code>T = int</code>, every element will have indeterminate value (unless that declaration happens to be at namespace scope)</p>\n", "OwnerUserId": "273767", "PostTypeId": "2", "Id": "18295515", "Score": "3", "CreationDate": "2013-08-18T03:52:45.197", "LastActivityDate": "2013-08-18T03:52:45.197"}, "18295840": {"ParentId": "18295302", "LastEditDate": "2013-08-18T05:24:09.713", "CommentCount": "5", "CreationDate": "2013-08-18T04:59:17.307", "OwnerUserId": "923854", "LastEditorUserId": "923854", "PostTypeId": "2", "Id": "18295840", "Score": "81", "Body": "<p>By definition, default initialization is the initialization that occurs when no other initialization is specified; the C++ language guarantees you that <em>any</em> object for which you do not provide an explicit initializer will be default initialized (C++11 \u00a78.5/11). That includes objects of type <code>std::array&lt;T, N&gt;</code> and <code>T[N]</code>.</p>\n<p>Be aware that there are types for which default initialization has no effect and leaves the object's value indeterminate: any non-class, non-array type (\u00a78.5/6). Consequently, a default-initialized array of objects with such types will have indeterminate value, e.g.:</p>\n<pre><code>int plain_int;\nint c_style_array[13];\nstd::array&lt;int, 13&gt; cxx_style_array;\n</code></pre>\n<p>Both the c-style array and <code>std::array</code> are filled with integers of indeterminate value, just as <code>plain_int</code> has indeterminate value.</p>\n<blockquote>\n<p id=\"so_18295302_18295840_0\">Is there a syntax that will work on all arrays (including zero-sized arrays) to initialize all elements to their default value?</p>\n</blockquote>\n<p>I'm guessing that when you say \"to their default value\" you really mean \"initialize all elements to <code>T{}</code>\". That's not <em>default-initialization</em>, it is <em>value-initialization</em> (8.5/7). You can request value initialization quite easily in C++11 by giving each declaration an empty initializer:</p>\n<pre><code>int plain_int{};\nint c_style_array[13]{};\nstd::array&lt;int, 13&gt; cxx_style_array{};\n</code></pre>\n<p>Which will value-initialize all of the array elements in turn, resulting in <code>plain_old_int</code>, and all the members of both kinds of arrays, being initialized to zero.</p>\n", "LastActivityDate": "2013-08-18T05:24:09.713"}, "bq_ids": {"n4140": {"so_18295302_18304935_0": {"section_id": 3287, "quality": 1.0, "length": 4}, "so_18295302_18304935_1": {"section_id": 3287, "quality": 1.0, "length": 16}}, "n3337": {"so_18295302_18304935_0": {"section_id": 3157, "quality": 1.0, "length": 4}, "so_18295302_18304935_1": {"section_id": 3157, "quality": 0.625, "length": 10}}, "n4659": {"so_18295302_18304935_1": {"section_id": 4049, "quality": 1.0, "length": 16}}}});