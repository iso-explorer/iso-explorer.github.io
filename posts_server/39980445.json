post_cb({"39980737": {"ParentId": "39980445", "PostTypeId": "2", "CommentCount": "2", "CreationDate": "2016-10-11T15:17:39.480", "Score": "2", "LastEditorUserId": "5507349", "LastEditDate": "2016-10-11T15:38:57.497", "Id": "39980737", "OwnerUserId": "5507349", "Body": "<p>From the standard draft n4296, \u00a78.3.4 Arrays:</p>\n<blockquote>\n<p id=\"so_39980445_39980737_0\">In a declaration T D where D has the form</p>\n<p id=\"so_39980445_39980737_1\">D1 [ constant-expression ]\n  attribute-specifier-seq</p>\n<p id=\"so_39980445_39980737_2\">and the type of the identifier in the\n  declaration T D1 is \u201cderived-declarator-type-list T\u201d, then the type of\n  the identifier of D is an array type;</p>\n<p id=\"so_39980445_39980737_3\">...</p>\n<p id=\"so_39980445_39980737_4\">If the constant-expression is present, it shall be a converted constant expression of type\n  std::size_t and its value shall be greater than zero.</p>\n</blockquote>\n<p>So your code is not valid.</p>\n", "LastActivityDate": "2016-10-11T15:38:57.497"}, "39980445": {"CommentCount": "5", "ViewCount": "77", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2016-10-11T15:04:32.403", "LastActivityDate": "2016-10-11T17:12:14.113", "Title": "Why a compiler doesn't deduce the template parameter in case of zero array?", "LastEditDate": "2017-05-23T12:33:10.147", "Id": "39980445", "Score": "2", "Body": "<p>I have read the following links how to calculate size of an array through template function:</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/q/3368883/2199669\">How does this \u201csize of array\u201d template function work?\n[duplicate]</a></li>\n<li><a href=\"https://stackoverflow.com/q/437150/2199669\">Can someone explain this template code that gives me the size of an\narray? [duplicate]</a></li>\n<li><p><a href=\"https://stackoverflow.com/q/2384107/2199669\">Magic arguments in function templates</a></p>\n<p>But this trick doesn't work in case of zero array. Why is the following code not correct?\nFor instance the online compiler ideone prints the following error message:</p></li>\n</ul>\n<blockquote>\n<p id=\"so_39980445_39980445_0\">error: no matching function for call to 'size_of_array(int [0])'<br>\n  std::size_t num = size_of_array(arr);</br></p>\n</blockquote>\n<pre><code>#include &lt;cstddef&gt;\ntemplate &lt;typename T, std::size_t N&gt;\ninline std::size_t size_of_array( T (&amp;)[N] ) {\n   return N;\n}\nint main()\n{\n  int arr[0]={};\n  std::size_t num = size_of_array(arr);\n}\n</code></pre>\n", "Tags": "<c++><arrays><templates><size>", "OwnerUserId": "2199669", "AnswerCount": "2"}, "39982793": {"ParentId": "39980445", "PostTypeId": "2", "CommentCount": "4", "CreationDate": "2016-10-11T17:06:03.693", "Score": "2", "LastEditorUserId": "4987285", "LastEditDate": "2016-10-11T17:12:14.113", "Id": "39982793", "OwnerUserId": "4987285", "Body": "<p>According with [temp.deduct/8] (<a href=\"http://eel.is/c++draft/temp#deduct-8\" rel=\"nofollow\">working draft</a>, <em>template argument deduction</em>, emphasis mine):</p>\n<blockquote>\n<p id=\"so_39980445_39982793_0\">Type deduction may fail for the following reasons:<br>\n  [...]<br>\n  - Attempting to create an array with an element type that is\u00a0void, a function type, a reference type, or an abstract class type, or <strong>attempting to create an array with a size that is zero</strong> or negative</br></br></p>\n</blockquote>\n<p>Type deduction for zero-length arrays may fail (mainly because zero-length arrays are not allowed as well) and that's why you get an error.<br>\nNote also that from the same paragraph we have the following (emphasis mine)</br></p>\n<blockquote>\n<p id=\"so_39980445_39982793_1\">An invalid type or expression is one that would be ill-formed, <strong>with a diagnostic required</strong>, if written using the substituted arguments.</p>\n</blockquote>\n", "LastActivityDate": "2016-10-11T17:12:14.113"}, "bq_ids": {"n4140": {"so_39980445_39980737_4": {"section_id": 3228, "quality": 0.9166666666666666, "length": 11}, "so_39980445_39982793_1": {"section_id": 300, "quality": 1.0, "length": 12}, "so_39980445_39980737_2": {"section_id": 3228, "quality": 1.0, "length": 9}, "so_39980445_39982793_0": {"section_id": 300, "quality": 1.0, "length": 25}}, "n3337": {"so_39980445_39980737_4": {"section_id": 3101, "quality": 0.75, "length": 9}, "so_39980445_39982793_1": {"section_id": 291, "quality": 0.8333333333333334, "length": 10}, "so_39980445_39980737_2": {"section_id": 3101, "quality": 1.0, "length": 9}, "so_39980445_39982793_0": {"section_id": 291, "quality": 1.0, "length": 25}}, "n4659": {"so_39980445_39980737_4": {"section_id": 3985, "quality": 1.0, "length": 12}, "so_39980445_39982793_1": {"section_id": 307, "quality": 1.0, "length": 12}, "so_39980445_39980737_2": {"section_id": 3985, "quality": 0.8888888888888888, "length": 8}, "so_39980445_39982793_0": {"section_id": 307, "quality": 1.0, "length": 25}}}});