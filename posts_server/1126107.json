post_cb({"1126107": {"CommentCount": "2", "ViewCount": "1176", "CreationDate": "2009-07-14T15:18:25.467", "LastActivityDate": "2009-07-14T17:58:58.653", "Title": "POD class initialized with placement new default initialized?", "PostTypeId": "1", "Id": "1126107", "Score": "3", "Body": "<p>If I initialize a POD class with placement new, can I assume that the memory will be default initialized (to zeros)? <a href=\"http://www.fnal.gov/docs/working-groups/fpcltf/Pkg/ISOcxx/doc/POD.html\" rel=\"nofollow noreferrer\">This resource</a> clearly states that if you call the zero argument default constructor explicitly that the fields will be default initialized, but it is not clear if this would hold true using the default implementation of placement new (passing an address). Is it standard behavior for the memory to be zeroed in this case?  </p>\n", "Tags": "<c++><pod><placement-new>", "OwnerUserId": "138135", "AnswerCount": "1"}, "1126995": {"ParentId": "1126107", "CommentCount": "1", "Body": "<p>From the beginning:</p>\n<p>5.3.4/15:</p>\n<blockquote id=\"so_1126107_1126995_0\">\n<ul>\n<li>If the <em>new-initializer</em> is of the form <code>()</code>, then the item is value-initialized (8.5);</li>\n</ul>\n</blockquote>\n<p>8.5/5:</p>\n<blockquote>\n<p id=\"so_1126107_1126995_1\">To <em>value-initialize</em> an object of type T means:</p>\n<ul>\n<li><p id=\"so_1126107_1126995_2\">if T is a class type (clause 9) with a user-declared constructor (12.1), then the default constructor for T is called (and the initialization is ill-formed if T has no accessible default constructor);</p></li>\n<li><p id=\"so_1126107_1126995_3\">if T is a non-union class type without a user-declared constructor, then every non-static data member and base-class component of T is value-initialized;</p></li>\n<li><p id=\"so_1126107_1126995_4\">if T is an array type, then each element is value-initialized;</p></li>\n<li><p id=\"so_1126107_1126995_5\">otherwise, the object is zero-initialized</p></li>\n</ul>\n</blockquote>\n<p>The first bullet doesn't apply here because you have a POD type and therefore you cannot have a user declared constructor.  The members of your type can only be POD types such as <code>int</code>, <code>float</code> etc or a nested structure that is also a POD or an array of POD types.  So eventually each of them ends up at the final bullet:  \"otherwise, the object is zero-initialized\".</p>\n<p>This initialization occurs because the POD class is initialized in the memory that you've supplied.  It doesn't matter that the memory was allocated by the OS or that you supplied an address.</p>\n<p>So, IMHO, the answer is yes - the members will be zero initialized.</p>\n", "OwnerUserId": "11698", "PostTypeId": "2", "Id": "1126995", "Score": "3", "CreationDate": "2009-07-14T17:58:58.653", "LastActivityDate": "2009-07-14T17:58:58.653"}, "bq_ids": {"n4140": {"so_1126107_1126995_2": {"section_id": 3286, "quality": 0.6, "length": 9}, "so_1126107_1126995_3": {"section_id": 369, "quality": 0.5384615384615384, "length": 7}, "so_1126107_1126995_1": {"section_id": 3287, "quality": 1.0, "length": 4}, "so_1126107_1126995_4": {"section_id": 3287, "quality": 1.0, "length": 6}}, "n3337": {"so_1126107_1126995_2": {"section_id": 3157, "quality": 0.8, "length": 12}, "so_1126107_1126995_3": {"section_id": 359, "quality": 0.5384615384615384, "length": 7}, "so_1126107_1126995_1": {"section_id": 3157, "quality": 1.0, "length": 4}, "so_1126107_1126995_4": {"section_id": 3157, "quality": 1.0, "length": 6}}, "n4659": {"so_1126107_1126995_2": {"section_id": 384, "quality": 0.5333333333333333, "length": 8}, "so_1126107_1126995_3": {"section_id": 7358, "quality": 0.5384615384615384, "length": 7}, "so_1126107_1126995_4": {"section_id": 4049, "quality": 1.0, "length": 6}}}});