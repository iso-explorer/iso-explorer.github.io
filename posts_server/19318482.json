post_cb({"bq_ids": {"n4140": {"so_19318482_19319374_1": {"length": 5, "quality": 0.8333333333333334, "section_id": 775}, "so_19318482_19319374_3": {"length": 7, "quality": 0.875, "section_id": 775}}, "n3337": {"so_19318482_19319374_1": {"length": 5, "quality": 0.8333333333333334, "section_id": 762}, "so_19318482_19319374_3": {"length": 7, "quality": 0.875, "section_id": 762}}}, "19319374": {"PostTypeId": "2", "Body": "<p>Maybe like this?</p>\n<pre><code>#include &lt;vector&gt;\n#include &lt;array&gt;\n#include &lt;iostream&gt;\n\nint main()\n{\n    std::vector&lt; std::array&lt;int, 2&gt; &gt; v(3, {1,1});\n\n    for(auto const&amp; e0 : v)\n    {\n        for(auto const&amp; e1 : e0)\n            std::cout &lt;&lt; e1 &lt;&lt; \", \";\n        std::cout &lt;&lt; \"\\n\";\n    }\n}\n</code></pre>\n<p>Output:</p>\n<pre>1, 1, \n1, 1, \n1, 1,</pre>\n<hr>\n<p>\"Why should we use two brackets?\"</p>\n<p>The original code in my question was</p>\n<pre><code>std::vector&lt; std::array&lt;int, 2&gt; &gt; v(3, {{1,1}});\n</code></pre>\n<p>but I decided to remove that second pair of braces. They've been in there to suppress a clang++ warning: Typically, <code>std::array</code> contains a (raw) array. One pair of braces is sufficient to initialize this inner array, but clang++ issues a warning because the elements of <code>{1,1}</code> (one pair of braces) are used to initialize the elements of this inner array, not the aggregate (the outer <code>std::array</code>) itself. Quoth clang++:</p>\n<blockquote>\n<p id=\"so_19318482_19319374_0\">warning: suggest braces around initialization of subobject</p>\n</blockquote>\n<p>I looked this up in the Standard, and it requires in [array.overview]/2</p>\n<blockquote>\n<p id=\"so_19318482_19319374_1\">An array is an aggregate (8.5.1) that can be initialized with the syntax</p>\n<p id=\"so_19318482_19319374_2\">\u00a0\u00a0\u00a0\u00a0<code>array&lt;T, N&gt; a = {</code> <em>initializer-list</em> <code>};</code></p>\n<p id=\"so_19318482_19319374_3\">where <em>initializer-list</em> is a comma-separated list of up to <code>N</code> elements whose types are convertible to <code>T</code>.</p>\n</blockquote>\n<p>Argument passing uses the same specification as this form of initialization (called <em>copy-initialization</em>, [dcl.init]/15), therefore using one pair of braces is <em>guaranteed</em> to work.</p>\n<p>OTOH, there's no requirement that <code>std::array</code> contains a (raw) array.</p>\n</hr>", "LastActivityDate": "2013-10-11T14:11:31.550", "LastEditorUserId": "420683", "Id": "19319374", "CommentCount": "7", "CreationDate": "2013-10-11T13:26:44.467", "ParentId": "19318482", "Score": "5", "OwnerUserId": "420683", "LastEditDate": "2013-10-11T14:11:31.550"}, "19318482": {"ViewCount": "1747", "Body": "<p>In C++11, is there a nice way to initialise a vector of arrays (I mean the C++ class) with one element, like</p>\n<pre><code>std::vector&lt;std::vector&lt;int&gt; &gt; foo(3, std::vector&lt;int&gt;(2, 1));\n</code></pre>\n<p>to initialise a 3x2 vector of vector with all 1s?</p>\n<p>Unluckily, the analogue for a vector of arrays does not seem to work; am I really obliged to use a for loop?</p>\n", "AcceptedAnswerId": "19319374", "Title": "C++ - Initialise a vector of arrays with one element", "CreationDate": "2013-10-11T12:44:26.900", "Id": "19318482", "CommentCount": "0", "FavoriteCount": "2", "PostTypeId": "1", "LastActivityDate": "2013-10-11T14:11:31.550", "Score": "3", "OwnerUserId": "1754518", "Tags": "<arrays><c++11><vector><initialization>", "AnswerCount": "1"}});