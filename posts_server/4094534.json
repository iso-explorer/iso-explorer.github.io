post_cb({"bq_ids": {"n4140": {"so_4094534_4094751_1": {"length": 9, "quality": 0.5294117647058824, "section_id": 5506}}, "n3337": {"so_4094534_4094751_1": {"length": 9, "quality": 0.5294117647058824, "section_id": 5292}}}, "4094534": {"CreationDate": "2010-11-04T07:06:31.577", "ViewCount": "917", "FavoriteCount": "2", "Id": "4094534", "AcceptedAnswerId": "4094751", "Score": "6", "Title": "How and why is it possible to change access level of a member?", "LastEditorUserId": "466694", "CommentCount": "5", "Body": "<p>I ended up coding (With some help) something like this yesterday:</p>\n<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nclass A\n{\n    public:\n        virtual void foo(){cout &lt;&lt; \"A::foo\\n\";}\n};\n\nclass B : private A\n{\n    private:\n        virtual void foo(){ cout &lt;&lt; \"B::foo\\n\";}\n        void DoSomething(SomeOtherClass&amp; o){o.DoSomething(*static_cast&lt;A*&gt;(this));}\n};\n</code></pre>\n<p>I tried changing the inheritance method:</p>\n<pre><code>class B : public A\n{\n    private:\n        virtual void foo(){ cout &lt;&lt; \"B::foo\\n\";}\n};\n\nint main()\n{\n    A* a = new B;\n    a-&gt;foo();\n}\n</code></pre>\n<p>This still works. I expected a compile time error. Please tell me why this is possible and what are the possible uses? I know one use due to first scenario - You can expose different interfaces for different classes.</p>\n<p>EDIT:</p>\n<p>In the second case, output is <code>B::foo</code>.</p>\n", "Tags": "<c++><oop><design>", "LastEditDate": "2010-11-04T07:31:44.243", "LastActivityDate": "2010-11-04T09:05:43.020", "PostTypeId": "1", "AnswerCount": "2", "OwnerUserId": "466694"}, "4094764": {"CommentCount": "4", "Body": "<pre><code>using namespace std; \n\nclass A \n{ \n    public: \n        virtual void foo(){cout &lt;&lt; \"A::foo\\n\";} \n}; \n\nclass B : public A \n{ \n    private: \n        virtual void foo(){ cout &lt;&lt; \"B::foo\\n\";} \n}; \n\nint main() \n{ \n    A* a = new B; \n    a-&gt;foo(); \n} \n</code></pre>\n<p>This works because at compile time the compiler can only see that <code>a</code> is a pointer to the base class <code>A</code> and <code>foo()</code> is a public method being called on <code>a</code>, which is perfectly valid. The virtual binding happens dynamically at run time after the compilation, this virtaul binding decides that the actual call is to <code>B::foo()</code> and not <code>A::foo()</code> that is the the performance penalty of using virtualism. </p>\n", "CreationDate": "2010-11-04T07:56:41.517", "ParentId": "4094534", "Id": "4094764", "LastActivityDate": "2010-11-04T07:56:41.517", "PostTypeId": "2", "Score": "3", "OwnerUserId": "452307"}, "4094751": {"LastActivityDate": "2010-11-04T08:08:40.473", "CommentCount": "1", "Body": "<p>May not answer all your questions directly, nevertheless I decided to put it up here for future reference. Also please take it with a pinch of salt as this is based on my understanding of the events that have happened in the C++ Standard world, rather than the actuals.</p>\n<p>Read <a href=\"http://www.drdobbs.com/184403312;jsessionid=BANUY352YZTCPQE1GHPSKH4ATMY32JVN\" rel=\"nofollow\">this</a>. I don't have the ARM with me, but the article gives necessary details.</p>\n<p>Note 115 in C++0x says</p>\n<blockquote>\n<p id=\"so_4094534_4094751_0\">115) Access declarations are\n  deprecated; member using-declarations\n  (7.3.3) provide a better means of\n  doing the same things. In earlier\n  versions of the C++ language, access\n  declarations were more limited; they\n  were generalized and made equivalent\n  to using-declarations in the interest\n  of simplicity. Programmers are\n  encouraged to use using-declarations,\n  rather than the new capabilities of\n  access declarations, in new code.</p>\n</blockquote>\n<p>In summary:</p>\n<p>I think the ARM prohibited it initially:</p>\n<blockquote>\n<p id=\"so_4094534_4094751_1\">An access declaration may not be used\n  to restrict access to a member that is\n  accessible in the base class, nor may\n  it be used to enable access to a\n  member that is not accessible in the\n  base class.</p>\n</blockquote>\n<p>But later on I guess when the Standard evolved <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1602.pdf\" rel=\"nofollow\">this was eventually allowed</a></p>\n", "CreationDate": "2010-11-04T07:53:00.547", "LastEditDate": "2010-11-04T08:08:40.473", "ParentId": "4094534", "Id": "4094751", "LastEditorUserId": "418110", "PostTypeId": "2", "Score": "1", "OwnerUserId": "418110"}});