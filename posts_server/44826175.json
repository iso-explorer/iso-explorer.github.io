post_cb({"44826175": {"CommentCount": "16", "ViewCount": "55", "PostTypeId": "1", "LastEditorUserId": "3684343", "CreationDate": "2017-06-29T13:14:17.163", "LastActivityDate": "2017-06-29T14:45:23.027", "Title": "Struct Variable Query", "LastEditDate": "2017-06-29T13:23:31.253", "Id": "44826175", "Score": "-2", "Body": "<pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\ntypedef struct trie\n{\n    int arr[26];\n    bool isleaf;\n    trie(int isleaf)\n    {\n        this-&gt;isleaf=9;\n        cout&lt;&lt;isleaf&lt;&lt;endl;\n        isleaf=false;\n        cout&lt;&lt;isleaf&lt;&lt;endl;\n        cout&lt;&lt;this-&gt;isleaf&lt;&lt;endl;\n    }\n}* tr;\n//void inser(s)\nint main()\n{\n   tr k=new trie(3);\n   cout&lt;&lt;k-&gt;isleaf;\n}\n</code></pre>\n<p>Works Fine and outputs</p>\n<pre><code>3\n0\n1\n1\n</code></pre>\n<p>But in </p>\n<pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\ntypedef struct trie\n{\n    int arr[26];\n    bool isleaf;\n    trie(int isleaf)\n    {\n        cout&lt;&lt;isleaf&lt;&lt;endl;\n        isleaf=false;\n        cout&lt;&lt;isleaf&lt;&lt;endl;\n        cout&lt;&lt;this-&gt;isleaf&lt;&lt;endl;\n    }\n}* tr;\n//void inser(s)\nint main()\n{\n   tr k=new trie(3);\n   cout&lt;&lt;k-&gt;isleaf;\n}\n</code></pre>\n<p>I get</p>\n<pre><code>3\n0\n68\n68\n</code></pre>\n<p>I understand that it is uninitialized but still why 68?</p>\n<p>If use a normal bool either in global or inside function and print it without initializing i get 0,then why not here?</p>\n<p>And can somebody also point out some good source to clear doubts about such variable declarations , public and private concepts , and OOPS, difference between structs and classes etc.</p>\n", "Tags": "<c++><class><c++11><struct>", "OwnerUserId": "6092337", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_44826175_44828363_0": {"section_id": 7215, "quality": 0.7142857142857143, "length": 5}, "so_44826175_44828363_1": {"section_id": 7215, "quality": 0.8636363636363636, "length": 19}}, "n3337": {"so_44826175_44828363_0": {"section_id": 6959, "quality": 0.7142857142857143, "length": 5}, "so_44826175_44828363_1": {"section_id": 6959, "quality": 0.8636363636363636, "length": 19}}, "n4659": {"so_44826175_44828363_0": {"section_id": 8724, "quality": 0.7142857142857143, "length": 5}, "so_44826175_44828363_1": {"section_id": 8724, "quality": 0.8636363636363636, "length": 19}}}, "44828363": {"ParentId": "44826175", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_44826175_44828363_0\"><strong>[basic.fundamental]/6</strong> Values of type <code>bool</code> are either <code>true</code> or <code>false</code>.<sup>49</sup></p>\n<p id=\"so_44826175_44828363_1\">Footnote 49) Using a <code>bool</code> value in ways described by this International Standard as \u201cundefined,\u201d such as by examining the value of an uninitialized automatic object, might cause it to behave as if it is neither <code>true</code> nor <code>false</code>.</p>\n</blockquote>\n<p>Undefined behavior is undefined. That's the long and the short of it. It's really pointless to discuss why a program exhibiting undefined behavior happens to manifest it in a particular way.</p>\n", "OwnerUserId": "1670129", "PostTypeId": "2", "Id": "44828363", "Score": "0", "CreationDate": "2017-06-29T14:45:23.027", "LastActivityDate": "2017-06-29T14:45:23.027"}});