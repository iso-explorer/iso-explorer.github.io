post_cb({"bq_ids": {"n4140": {"so_36320008_36320050_0": {"length": 20, "quality": 0.9090909090909091, "section_id": 1169}, "so_36320008_36320067_1": {"length": 8, "quality": 0.6153846153846154, "section_id": 1183}, "so_36320008_36320050_2": {"length": 5, "quality": 0.8333333333333334, "section_id": 1183}}, "n3337": {"so_36320008_36320067_1": {"length": 8, "quality": 0.6153846153846154, "section_id": 1181}, "so_36320008_36320050_0": {"length": 20, "quality": 0.9090909090909091, "section_id": 1167}, "so_36320008_36320050_2": {"length": 5, "quality": 0.8333333333333334, "section_id": 1181}}, "n4659": {"so_36320008_36320067_1": {"length": 7, "quality": 0.5384615384615384, "section_id": 1264}, "so_36320008_36320050_2": {"length": 4, "quality": 0.6666666666666666, "section_id": 1264}}}, "36320067": {"Id": "36320067", "PostTypeId": "2", "Body": "<p>\u00a7 29.6.5 [atomics.types.operations.req] \u00b6 4 of N 4140 (the final draft for C++14) says:</p>\n<blockquote>\n<p id=\"so_36320008_36320067_0\"><code>A ::A () noexcept = default;</code></p>\n<p id=\"so_36320008_36320067_1\"><em>Effects:</em> leaves the atomic object in an uninitialized state. [ <em>Note:</em> These semantics ensure compatibility with C. \u2014 <em>end note</em> ]</p>\n</blockquote>\n<p>Note that this doesn't mean that the object wraps an unspecified value that you can read but not depend on its value. Rather, it means that reading the value out of the object before assigning to it results in undefined behavior.</p>\n", "LastActivityDate": "2016-03-30T21:28:05.377", "CommentCount": "1", "CreationDate": "2016-03-30T21:28:05.377", "ParentId": "36320008", "Score": "4", "OwnerUserId": "1392132"}, "36320008": {"ViewCount": "2184", "Body": "<p>I find that in practice, with a variety of C++11/C++14 compilers, a <code>std::atomic</code> has an undefined initial value just as it would if it were a \"raw\" type. That is, we expect that for the expression</p>\n<pre><code>int a;\n</code></pre>\n<p><code>a</code> may have any value. It also turns out to be true that for the expression</p>\n<pre><code>std::atomic&lt; int &gt; b;\n</code></pre>\n<p><code>b</code> may also have any value. To say it another way,</p>\n<pre><code>std::atomic&lt; int &gt; b;         // b is undefined\n</code></pre>\n<p>is not equivalent to</p>\n<pre><code>std::atomic&lt; int &gt; b{ 0 };    // b == 0\n</code></pre>\n<p>or to</p>\n<pre><code>std::atomic&lt; int &gt; b{};       // b == 0\n</code></pre>\n<p>because in the latter two cases <code>b</code> is initialized to a known value.</p>\n<p>My question is simple: where in the C++11 or C++14 spec is this behavior documented?</p>\n", "AcceptedAnswerId": "36320050", "Title": "What's the default value for a std::atomic?", "CreationDate": "2016-03-30T21:22:26.163", "Id": "36320008", "CommentCount": "0", "LastEditDate": "2016-03-30T21:56:18.297", "PostTypeId": "1", "LastEditorUserId": "596781", "LastActivityDate": "2016-03-30T21:56:18.297", "Score": "4", "OwnerUserId": "358475", "Tags": "<c++><c++11><initialization><c++14><atomic>", "AnswerCount": "2"}, "36320050": {"Id": "36320050", "PostTypeId": "2", "Body": "<p>[atomics.types.generic]/5 says this about integral specializations:</p>\n<blockquote>\n<p id=\"so_36320008_36320050_0\">The atomic integral specializations and the specialization atomic shall have standard layout. They shall each have a <strong>trivial default constructor</strong> and a trivial destructor. They shall each support aggregate\n  initialization syntax.</p>\n</blockquote>\n<p>Moreover, the primary template synopsis at the beginning of the same section normatively specifies the default constructor as:</p>\n<blockquote id=\"so_36320008_36320050_1\">\n<pre><code>atomic() noexcept = default;\n</code></pre>\n</blockquote>\n<p>The effects are defined in [atomic.types.operations]/4 as:</p>\n<blockquote>\n<p id=\"so_36320008_36320050_2\"><em>Effects</em>: leaves the atomic object in an uninitialized state.</p>\n</blockquote>\n", "LastActivityDate": "2016-03-30T21:26:42.977", "CommentCount": "0", "CreationDate": "2016-03-30T21:26:42.977", "ParentId": "36320008", "Score": "6", "OwnerUserId": "596781"}});