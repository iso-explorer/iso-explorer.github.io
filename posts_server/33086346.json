post_cb({"33086452": {"ParentId": "33086346", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Most compilers performs what's called <a href=\"http://en.cppreference.com/w/cpp/language/copy_elision\">copy/move elision</a>, which is specified by the C++ standard. But it is not guaranteed. For example, you can compile with <code>-fno-elide-constructors</code> in gcc and you'll see <em>all</em> constructors in all their glory. </p>\n<p><kbd><a href=\"http://coliru.stacked-crooked.com/a/c5576dc1bce7298c\">Live example on Coliru</a></kbd></p>\n", "OwnerUserId": "3093378", "LastEditorUserId": "4342498", "LastEditDate": "2015-10-12T19:40:59.183", "Id": "33086452", "Score": "11", "CreationDate": "2015-10-12T16:58:01.770", "LastActivityDate": "2015-10-12T19:40:59.183"}, "33087259": {"ParentId": "33086346", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>There is no guarantee that there will be no temporary. But the Big Three compilers will optimize it out (even with the <code>-O0</code> switch).</p>\n<p>To guarantee no temporary at all just write:</p>\n<pre><code>int main()\n{\n  // ...\n  S s{};\n  // ...\n}\n</code></pre>\n<p>Or simply <code>S s;</code>.</p>\n", "OwnerUserId": "1555823", "LastEditorUserId": "333698", "LastEditDate": "2015-10-12T20:44:21.847", "Id": "33087259", "Score": "5", "CreationDate": "2015-10-12T17:50:52.157", "LastActivityDate": "2015-10-12T20:44:21.847"}, "33086346": {"CommentCount": "3", "ViewCount": "857", "PostTypeId": "1", "LastEditorUserId": "1350209", "CreationDate": "2015-10-12T16:52:31.120", "LastActivityDate": "2015-10-12T23:54:33.650", "Title": "In S s = S() is it guaranteed that no temporary will be created?", "AcceptedAnswerId": "33086461", "LastEditDate": "2015-10-12T23:54:33.650", "Id": "33086346", "Score": "14", "Body": "<p>In the following code, are <code>pS</code> and <code>s.pS</code> guaranteed to be equal in the final line? In other words, in the statement <code>S s = S();</code>, can I be sure that a temporary <code>S</code> will not be constructed?</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nstruct S\n{\n  S() { pS = this; }\n  S* pS;\n};\n\nint main()\n{\n  S s = S();\n  S* pS = &amp;s;\n  cout &lt;&lt; pS &lt;&lt; \" \" &lt;&lt; s.pS &lt;&lt; endl;\n}\n</code></pre>\n<p>In every compiler I've tested this in <code>pS == s.pS</code>, but I'm not sufficiently familiar with the standard to be able to satisfy myself that this is guaranteed.</p>\n", "Tags": "<c++><constructor><language-lawyer><temporary>", "OwnerUserId": "995218", "AnswerCount": "3"}, "33086461": {"ParentId": "33086346", "CommentCount": "5", "Body": "<p><strong>NO</strong></p>\n<p>The compiler isn't <em>obligated</em> to do copy elision. The standard simply specifies that, [class.copy]:</p>\n<blockquote>\n<p id=\"so_33086346_33086461_0\">When certain criteria are met, an implementation <strong>is allowed to</strong> omit the copy/move construction of a class object [...]</p>\n</blockquote>\n<p>I can disable copy elision via <code>-fno-elide-constructors</code>, and then the two pointers will definitely be different. For example:</p>\n<pre><code>$g++ -std=c++11 -Wall -pedantic -fno-elide-constructors -Wall -Wextra main.cpp &amp;&amp; ./a.out\n0x7fff5a598920 0x7fff5a598930\n</code></pre>\n<p>And in the general case, if we add <code>S(S&amp;&amp; ) = delete</code>, then the above code wouldn't even compile. </p>\n", "OwnerUserId": "2069064", "PostTypeId": "2", "Id": "33086461", "Score": "16", "CreationDate": "2015-10-12T16:58:34.973", "LastActivityDate": "2015-10-12T16:58:34.973"}, "bq_ids": {"n4140": {"so_33086346_33086461_0": {"section_id": 480, "quality": 1.0, "length": 11}}, "n3337": {"so_33086346_33086461_0": {"section_id": 471, "quality": 1.0, "length": 11}}, "n4659": {"so_33086346_33086461_0": {"section_id": 502, "quality": 1.0, "length": 11}}}});