post_cb({"bq_ids": {"n4140": {"so_47947565_47947681_0": {"length": 16, "quality": 0.9411764705882353, "section_id": 6066}}, "n3337": {"so_47947565_47947681_0": {"length": 16, "quality": 0.9411764705882353, "section_id": 5834}}, "n4659": {"so_47947565_47947681_0": {"length": 17, "quality": 1.0, "section_id": 7562}}}, "47947681": {"Id": "47947681", "PostTypeId": "2", "Body": "<p>See [expr.unary.op], which says</p>\n<blockquote>\n<p id=\"so_47947565_47947681_0\">If the operand is a qualified-id naming a non-static or variant member m of some class C with type T, the result has type \u201cpointer to member of class C of type T\u201d and is a prvalue designating C::m.</p>\n</blockquote>\n<p>It also gives an example to show this behavior:</p>\n<pre><code>struct A { int i; };\nstruct B : A { };\n... &amp;B::i ... // has type int A::*\n</code></pre>\n", "LastActivityDate": "2017-12-22T21:38:47.580", "Score": "2", "CreationDate": "2017-12-22T21:38:47.580", "ParentId": "47947565", "CommentCount": "0", "OwnerUserId": "5231607"}, "47947565": {"ViewCount": "32", "Body": "<pre><code>#include &lt;type_traits&gt;\n\nstruct BaseClass\n{\n    int baseValue;\n};\n\nstruct DerivedClass : public BaseClass\n{\n    int derivedValue;\n};\n\nint main()\n{\n    auto memDataPtr = &amp;DerivedClass::baseValue;\n\n    static_assert(std::is_same&lt;decltype(memDataPtr), int BaseClass::*&gt;::value, \"Huh?\");\n}\n</code></pre>\n<p>All the compilers I've tried this on compile this code successfully, i.e., the static assert does not fire. This means that if I take the address of a member inherited from a base class, the resultant pointer-to-member refers to the base class the member comes from, even if I explicitly use the derived class name when specifying the member.</p>\n<p>I'm curious to know where in the spec this is explicitly called out, and the reasoning behind this behavior, as it seems a bit counter-intuitive (to my naive self at least).</p>\n", "AcceptedAnswerId": "47947681", "Title": "Deduced type for pointer-to-member of base class", "CreationDate": "2017-12-22T21:24:23.383", "Id": "47947565", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2017-12-22T21:38:47.580", "Score": "1", "OwnerUserId": "179895", "Tags": "<c++>", "AnswerCount": "1"}});