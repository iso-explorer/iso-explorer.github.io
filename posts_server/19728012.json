post_cb({"bq_ids": {"n4140": {"so_19728012_19728048_0": {"length": 48, "quality": 0.96, "section_id": 955}}, "n3337": {"so_19728012_19728048_0": {"length": 48, "quality": 0.96, "section_id": 943}}, "n4659": {"so_19728012_19728048_0": {"length": 27, "quality": 0.54, "section_id": 1016}}}, "19728012": {"ViewCount": "612", "Body": "<p>I have seen people in my team writing code like this. I personally think this is not portable since vector could be implemented in a totally different way. Am I right?</p>\n<pre><code>vector&lt;int&gt; a;\na.push_back(1);\na.push_back(2);\na.push_back(3);\n\nint* b = &amp;a[0];\nstd::cout&lt;&lt; *(b +1); // this will print 2\n</code></pre>\n", "AcceptedAnswerId": "19728048", "Title": "is it portable to treat std::vector like array", "CreationDate": "2013-11-01T13:45:51.317", "LastActivityDate": "2013-11-01T15:26:28.377", "CommentCount": "3", "LastEditDate": "2013-11-01T15:26:28.377", "PostTypeId": "1", "Tags": "<c++><arrays><pointers><vector>", "Id": "19728012", "AnswerCount": "2", "Score": "12", "OwnerUserId": "1394786", "ClosedDate": "2013-11-01T15:29:39.150", "LastEditorUserId": "1670308"}, "19728048": {"Id": "19728048", "PostTypeId": "2", "Body": "<p>That code is correct. The elements stored in a <code>std::vector</code> are guaranteed to be stored contiguously as of C++03.</p>\n<p>This is the relevant part of the current standard C++ draft <code>N3797</code> (23.3.6.1):</p>\n<blockquote>\n<p id=\"so_19728012_19728048_0\">A vector is a sequence container that supports random access\n  iterators. In addition, it supports (amortized) constant time insert\n  and erase operations at the end; insert and erase in the middle take\n  linear time. Storage management is handled automatically, though hints\n  can be given to improve efficiency. <strong>The elements of a vector are\n  stored contiguously</strong>, meaning that if v is a vector where T is some\n  type other than bool, then it obeys the identity <code>&amp;v[n] == &amp;v[0] + n</code>\n  for all <code>0 &lt;= n &lt; v.size()</code>.</p>\n</blockquote>\n", "LastEditorUserId": "517503", "LastActivityDate": "2013-11-01T13:56:20.673", "Score": "21", "CreationDate": "2013-11-01T13:47:12.350", "ParentId": "19728012", "CommentCount": "0", "OwnerUserId": "525217", "LastEditDate": "2013-11-01T13:56:20.673"}, "19728059": {"Id": "19728059", "PostTypeId": "2", "Body": "<p>In whatever way a vector might be implemented, some things are guaranteed by the standard to remain consistent. A <code>std::vector</code> is always stored contiguously in memory and that is why it can work with random access iterators.</p>\n", "LastActivityDate": "2013-11-01T13:48:10.387", "CommentCount": "0", "CreationDate": "2013-11-01T13:48:10.387", "ParentId": "19728012", "Score": "8", "OwnerUserId": "909253"}});