post_cb({"bq_ids": {"n4140": {"so_18105139_18105697_0": {"length": 29, "quality": 0.8285714285714286, "section_id": 778}}, "n3337": {"so_18105139_18105697_0": {"length": 29, "quality": 0.8285714285714286, "section_id": 765}}, "n4659": {"so_18105139_18105697_0": {"length": 29, "quality": 0.8285714285714286, "section_id": 838}}}, "18105697": {"Id": "18105697", "PostTypeId": "2", "Body": "<p>Have a look at the standard:</p>\n<p>23.3.2.2 array constructors, copy, and assignment [array.cons]</p>\n<blockquote>\n<p id=\"so_18105139_18105697_0\">The conditions for an aggregate (8.5.1) shall be met. Class array\n  relies on the implicitly-declared special member functions (12.1,\n  12.4, and 12.8) to conform to the container requirements table in 23.2. In addition to the requirements specified in the container requirements table, the implicit move constructor and move assignment\n  operator for array require that T be MoveConstructible or\n  MoveAssignable, respectively.</p>\n</blockquote>\n<p>The move constructor and assignment operator are by far not free, they may not be provided.</p>\n", "LastEditorUserId": "1095108", "LastActivityDate": "2013-08-07T16:06:00.423", "Score": "0", "CreationDate": "2013-08-07T14:10:06.727", "ParentId": "18105139", "CommentCount": "0", "OwnerUserId": "1095108", "LastEditDate": "2013-08-07T16:06:00.423"}, "18115201": {"Id": "18115201", "PostTypeId": "2", "Body": "<p>To summarize and expand on other answers, <code>array&lt;T&gt;</code> should be moveable (when <code>T</code> itself is moveable) because:</p>\n<ul>\n<li><code>T</code> may be efficiently moveable.</li>\n<li><code>T</code> may be move-<em>only</em>.</li>\n</ul>\n", "LastActivityDate": "2013-08-07T22:59:34.430", "CommentCount": "4", "CreationDate": "2013-08-07T22:59:34.430", "ParentId": "18105139", "Score": "23", "OwnerUserId": "1661064"}, "18105139": {"ViewCount": "3011", "Body": "<p>Moving can't be implemented efficiently (O(1)) on std::array, so why does it have move constructor ?</p>\n", "Title": "Should std::array have move constructor?", "CreationDate": "2013-08-07T13:46:13.280", "LastActivityDate": "2013-08-08T06:08:28.667", "CommentCount": "5", "FavoriteCount": "2", "PostTypeId": "1", "Id": "18105139", "Score": "20", "OwnerUserId": "61342", "Tags": "<c++><c++11><move-semantics>", "AnswerCount": "3"}, "18105321": {"Id": "18105321", "PostTypeId": "2", "Body": "<p><code>std::array</code> has a compiler generated move constructor, which allows all the elements of one instance to be moved into another. This is handy if the elements are efficiently moveable or if they are only movable:</p>\n<pre><code>#include &lt;array&gt;\n#include &lt;iostream&gt;\n\nstruct Foo\n{\n  Foo()=default;\n  Foo(Foo&amp;&amp;)\n  {\n    std::cout &lt;&lt; \"Foo(Foo&amp;&amp;)\\n\";\n  }\n  Foo&amp; operator=(Foo&amp;&amp;)\n  {\n    std::cout &lt;&lt; \"operator=(Foo&amp;&amp;)\\n\";\n    return *this;\n  }\n};\n\nint main()\n{\n  std::array&lt;Foo, 10&gt; a;\n  std::array&lt;Foo, 10&gt; b = std::move(a);\n}\n</code></pre>\n<p>So I would say <code>std::array</code> should have a move copy constructor, specially since it comes for free. Not to have one would require for it to be actively disabled, and I cannot see any benefit in that.</p>\n", "LastEditorUserId": "661519", "LastActivityDate": "2013-08-08T06:08:28.667", "Score": "28", "CreationDate": "2013-08-07T13:54:19.940", "ParentId": "18105139", "CommentCount": "5", "OwnerUserId": "661519", "LastEditDate": "2013-08-08T06:08:28.667"}});