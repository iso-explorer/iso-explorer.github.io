post_cb({"bq_ids": {"n4140": {"so_2484389_2484878_0": {"length": 45, "quality": 0.75, "section_id": 7194}}, "n3337": {"so_2484389_2484878_0": {"length": 46, "quality": 0.7666666666666667, "section_id": 6938}}, "n4659": {"so_2484389_2484878_0": {"length": 43, "quality": 0.7166666666666667, "section_id": 8703}}}, "2484422": {"Id": "2484422", "PostTypeId": "2", "Body": "<p>It depends what you are doing in the A constructor.</p>\n<p>The B object is not fully constructed until the constructor returns.  Furthermore, before you enter the body of the B constructor, the objects within the B object may not be fully constructed.  For example:</p>\n<pre><code>class B\n{\n    A a;\n    std::string str;\n\npublic:\n    B() : a(*this)\n    {\n    }\n};\n</code></pre>\n<p>At the time that <code>A::A</code> is called, <code>str</code> is not yet constructed.  If you try to use <code>str</code> within <code>A::A</code> (either directly or indirectly), you will have undefined behavior.</p>\n", "LastActivityDate": "2010-03-20T19:34:07.480", "CommentCount": "0", "CreationDate": "2010-03-20T19:34:07.480", "ParentId": "2484389", "Score": "1", "OwnerUserId": "29809"}, "2484389": {"ViewCount": "143", "Body": "<pre><code>Class A\n{\n  A(B&amp; b) : mb(b) \n   {\n     // I will not access anything from B here\n    }\n\n  B&amp; mb;\n};\n\n\nClass B\n{\nB(): a(*this)\n{}\n\nA a;\n}\n</code></pre>\n<p>I run into such a situation may times, the contained object needs to use the containers functionality. Having a reference to the container object in the contained object seems to be the best way to do this. Of course, I could do this with a pointer, that way I could have  a setter <code>setB(B* b) {mb = b;}</code> which I could call later after I am sure B is initialized but I would much prefer to do this with a reference which means I need to initialize it in the constructor, hence the problem. </p>\n", "AcceptedAnswerId": "2484878", "Title": "Is it ok to pass *this in the constructor in the following example", "CreationDate": "2010-03-20T19:24:30.703", "Id": "2484389", "CommentCount": "2", "LastEditDate": "2011-04-20T15:13:19.720", "PostTypeId": "1", "LastEditorUserId": "4418", "LastActivityDate": "2011-04-20T15:13:19.720", "Score": "3", "OwnerUserId": "66455", "Tags": "<c++><constructor>", "AnswerCount": "3"}, "2484878": {"Id": "2484878", "PostTypeId": "2", "Body": "<p>The appropriate quote from the standard is:</p>\n<p>\u00a73.8 [basic.life]/6</p>\n<blockquote>\n<p id=\"so_2484389_2484878_0\">Similarly, before the lifetime of an object has started but after the storage which the object will occupy has been allocated or, after the lifetime of an object has ended and before the storage which the object occupied is reused or released, any lvalue which refers to the original object may be used but only in limited ways. Such an lvalue refers to allocated storage (3.7.3.2), and using the properties of the lvalue which do not depend on its value is well-defined. If an lvalue-to-rvalue conversion (4.1) is applied to such an lvalue, the program has undefined behavior; if the original object will be or was of a non-POD class type, the program has undefined behavior if: </p>\n<pre><code>\u2014 the lvalue is used to access a non-static data member or call a non-static member function of the object, or \n\u2014 the lvalue is implicitly converted (4.10) to a reference to a base class type, or \n\u2014 the lvalue is used as the operand of a static_cast(5.2.9) (except when the conversion is ultimately to char&amp; or unsigned char&amp;), or \n\u2014 the lvalue is used as the operand of a dynamic_cast(5.2.7) or as the operand oftypeid.\n</code></pre>\n</blockquote>\n", "LastActivityDate": "2010-03-20T21:39:43.070", "CommentCount": "1", "CreationDate": "2010-03-20T21:39:43.070", "ParentId": "2484389", "Score": "1", "OwnerUserId": "36565"}, "2484396": {"Id": "2484396", "PostTypeId": "2", "Body": "<p>Since you're only initializing the reference to B, this should be just fine -- by the time B's constructor runs the memory location for it has already been setup.</p>\n<p>Do keep in mind that you can't call any methods in B safely from A's constructor because B has not finished constructing yet.</p>\n", "LastActivityDate": "2010-03-20T19:25:44.077", "CommentCount": "0", "CreationDate": "2010-03-20T19:25:44.077", "ParentId": "2484389", "Score": "9", "OwnerUserId": "82320"}});