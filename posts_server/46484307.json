post_cb({"46484307": {"CommentCount": "0", "ViewCount": "42", "PostTypeId": "1", "LastEditorUserId": "440558", "CreationDate": "2017-09-29T07:58:40.097", "LastActivityDate": "2017-09-29T08:34:33.433", "Title": "Class with defaulted protected destructor not trivially-destructible but derived class is?", "AcceptedAnswerId": "46484620", "LastEditDate": "2017-09-29T07:59:41.483", "Id": "46484307", "Score": "0", "Body": "<p>In the following exemple the first static assertion fired but not the second:</p>\n<pre><code>#include&lt;type_traits&gt;\nstruct A{\n protected:\n  ~A()=default;\n};\nstruct B:A{\n  //this static assertion fails\n  static_assert(std::is_trivially_destructible&lt;A&gt;::value,\"\");\n};\n//this static assertion succeeds\nstatic_assert(std::is_trivially_destructible&lt;B&gt;::value,\"\");\n</code></pre>\n<p>(checked with GCC,Clang,MSVC,ellcc)</p>\n<p>I don't understand why A can not be trivially_destructible, inside B, while B is trivially destructible. This seems to be in contradiction with these 2 paragraphs of the C++ standard, where accessibility is not mentionned:</p>\n<p><strong>[class.dtor]</strong></p>\n<blockquote>\n<p id=\"so_46484307_46484307_0\">A destructor is trivial if it is not user-provided and if:</p>\n<p id=\"so_46484307_46484307_1\">(6.1) \u2014 the destructor is not <code>virtual</code>,</p>\n<p id=\"so_46484307_46484307_2\">(6.2) \u2014 all of the direct base classes of its class have trivial destructors, and</p>\n<p id=\"so_46484307_46484307_3\">(6.3) \u2014 for all of the non-static data members of its class that are of class type (or array thereof), each such\n  class has a trivial destructor.</p>\n</blockquote>\n<p><strong>[dcl.fct.def.default]</strong></p>\n<blockquote>\n<p id=\"so_46484307_46484307_4\">A function is <em>user-provided</em> if it is user-declared and not explicitly defaulted or deleted\n  on its first declaration.</p>\n</blockquote>\n", "Tags": "<c++><c++11><language-lawyer><destructor>", "OwnerUserId": "5632316", "AnswerCount": "2"}, "46484620": {"ParentId": "46484307", "CommentCount": "2", "Body": "<p>Simply put, because from an outside point of view, <code>A</code> is <em>not destructible at all!</em> The destructor is <code>protected</code>, so if you have a <code>A* ptr</code>, calling <code>delete ptr</code> will fail to compile.</p>\n", "OwnerUserId": "8922", "PostTypeId": "2", "Id": "46484620", "Score": "4", "CreationDate": "2017-09-29T08:17:39.040", "LastActivityDate": "2017-09-29T08:17:39.040"}, "bq_ids": {"n4140": {"so_46484307_46484307_2": {"section_id": 401, "quality": 1.0, "length": 9}, "so_46484307_46484307_3": {"section_id": 401, "quality": 1.0, "length": 15}, "so_46484307_46484307_4": {"section_id": 3274, "quality": 0.8888888888888888, "length": 8}}, "n3337": {"so_46484307_46484307_2": {"section_id": 392, "quality": 1.0, "length": 9}, "so_46484307_46484307_3": {"section_id": 392, "quality": 1.0, "length": 15}, "so_46484307_46484307_4": {"section_id": 3145, "quality": 0.8888888888888888, "length": 8}}, "n4659": {"so_46484307_46484307_2": {"section_id": 419, "quality": 1.0, "length": 9}, "so_46484307_46484307_3": {"section_id": 419, "quality": 1.0, "length": 15}, "so_46484307_46484307_4": {"section_id": 4032, "quality": 0.8888888888888888, "length": 8}}}, "46484870": {"ParentId": "46484307", "CommentCount": "0", "Body": "<p>To complement Sebastian Redl answer: <code>std::is_trivially_destructible&lt;T&gt;::value==false</code> does not imply that the type is <strong>not</strong> <em>trivially-destructible</em>.</p>\n<p>So if one use it in template programming, it is much better not to use standard library type traits, but to directly use compiler intrinsic. For exemple with gcc:</p>\n<pre><code>#include&lt;type_traits&gt;\nstruct A{\n    protected:\n    ~A(){};\n};\nstruct B:A{\n  //Bad: fails while the fact that A is trivially destructible\n  //could be used to implement optimized function member in B.\n  static_assert(std::is_trivially_destructible&lt;A&gt;::value,\"\");\n  //Good: __has_trivial_destructor actualy return what is name says!!\n  static_assert(__has_trivial_destructor(A),\"\");\n};\n</code></pre>\n", "OwnerUserId": "5632316", "PostTypeId": "2", "Id": "46484870", "Score": "-1", "CreationDate": "2017-09-29T08:34:33.433", "LastActivityDate": "2017-09-29T08:34:33.433"}});