post_cb({"24087187": {"CommentCount": "12", "ViewCount": "49", "CreationDate": "2014-06-06T17:04:08.693", "LastActivityDate": "2014-06-06T17:12:29.390", "Title": "prevent custom iterator from getting nullptr", "AcceptedAnswerId": "24087291", "PostTypeId": "1", "Id": "24087187", "Score": "0", "Body": "<p>I wrote a PriorityQueue class and an iterator class for it. But I don't understand why these\nline compile?</p>\n<pre><code>PriorityQueue&lt;int,int&gt; pq;\n   auto z =pq.begin();\n   z=nullptr;\n</code></pre>\n<p>I mean, The iterator isn't a pointer(It has a pointer in it,but there is no conversion between them).How can I prevent this from hapenning?</p>\n<p>EDIT: The begin decleration:</p>\n<pre><code>const iterator begin() const;\n</code></pre>\n", "Tags": "<c++>", "OwnerUserId": "3706035", "AnswerCount": "1"}, "24087291": {"ParentId": "24087187", "CommentCount": "0", "Body": "<p>Your single argument constructor</p>\n<pre><code>iterator::iterator(Node&lt;Priority,T&gt;* node) : node(node) {}\n</code></pre>\n<p>establishes a user-defined conversion from a pointer type <code>Node&lt;Priority,T&gt;*</code> to <code>iterator</code>.  Since <code>nullptr_t</code> implicitly converts to any pointer type, that gives you a conversion from <code>nullptr</code> to your <code>iterator</code> type.  The line <code>z = nullptr;</code> in your example then implicitly converts <code>nullptr</code> to the iterator type, before calling the automatically-generated move- or copy-assignment operator.</p>\n<p>Fix: Add the <code>explicit</code> keyword to your constructor.</p>\n<pre><code>explicit iterator(Node&lt;Priority,T&gt;* node) : node(node) {}\n</code></pre>\n<hr>\n<p>Rule from the Standard, section 12.3.1:</p>\n<blockquote>\n<p id=\"so_24087187_24087291_0\">A constructor declared without the <em>function-specifier</em> <code>explicit</code> speci\ufb01es a conversion from the types of its parameters to the type of its class.  Such a constructor is called a <em>converting constructor</em>.</p>\n<p id=\"so_24087187_24087291_1\">An  explicit  constructor  constructs  objects  just  like  non-explicit  constructors,  but  does  so  only  where  the direct-initialization  syntax  (8.5)  or  where  casts  (5.2.9,  5.4)  are  explicitly  used.  A default  constructor may be an explicit constructor;  such a constructor will be used to perform default-initialization or value-initialization (8.5).</p>\n</blockquote>\n</hr>", "OwnerUserId": "103167", "PostTypeId": "2", "Id": "24087291", "Score": "3", "CreationDate": "2014-06-06T17:12:29.390", "LastActivityDate": "2014-06-06T17:12:29.390"}, "bq_ids": {"n4140": {"so_24087187_24087291_0": {"section_id": 388, "quality": 0.8823529411764706, "length": 15}, "so_24087187_24087291_1": {"section_id": 389, "quality": 0.9642857142857143, "length": 27}}, "n3337": {"so_24087187_24087291_0": {"section_id": 379, "quality": 0.8823529411764706, "length": 15}, "so_24087187_24087291_1": {"section_id": 380, "quality": 0.9642857142857143, "length": 27}}, "n4659": {"so_24087187_24087291_0": {"section_id": 405, "quality": 0.8823529411764706, "length": 15}, "so_24087187_24087291_1": {"section_id": 406, "quality": 0.9642857142857143, "length": 27}}}});