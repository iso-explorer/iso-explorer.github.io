post_cb({"bq_ids": {"n4140": {"so_33242940_33243307_0": {"length": 15, "quality": 0.9375, "section_id": 5947}}, "n3337": {"so_33242940_33243307_0": {"length": 15, "quality": 0.9375, "section_id": 5717}}, "n4659": {"so_33242940_33243307_0": {"length": 15, "quality": 0.9375, "section_id": 7433}}}, "33242940": {"ViewCount": "291", "Body": "<p>I know only object could have reference. But literals are not object.\nSo I could understand why following code cannot compile:</p>\n<pre><code>int &amp;a = '4';\nint &amp;b = 2;\n</code></pre>\n<p>However, when I add <strong>const</strong> in front of them, it could work!!</p>\n<pre><code>const int &amp;a = '4';\nconst int &amp;b = 2;\n</code></pre>\n<p>I do not know why. Could anyone help me?</p>\n", "AcceptedAnswerId": "33243307", "Title": "why must use const reference when reference to literals", "CreationDate": "2015-10-20T17:22:46.957", "Id": "33242940", "CommentCount": "0", "LastEditDate": "2015-10-20T17:27:26.387", "PostTypeId": "1", "LastEditorUserId": "5133387", "LastActivityDate": "2016-04-15T13:23:42.640", "Score": "3", "OwnerUserId": "5133387", "Tags": "<c++><reference><const><literals>", "AnswerCount": "2"}, "33243058": {"Id": "33243058", "PostTypeId": "2", "Body": "<p>(Assiming that you left out '&amp;' in the second snippet.)</p>\n<p>Because the literal is not an object; a temporary object is created which has the value corresponding to the literal. </p>\n<p>You can bind a temporary to a const reference, and thereby extend that object's lifetime, but you can't bind it to a non-const reference. </p>\n", "LastActivityDate": "2015-10-20T17:28:39.703", "CommentCount": "1", "CreationDate": "2015-10-20T17:28:39.703", "ParentId": "33242940", "Score": "0", "OwnerUserId": "404970"}, "33243307": {"Id": "33243307", "PostTypeId": "2", "Body": "<p>A integer or character literal is a prvalue [expr.prim.general]</p>\n<blockquote>\n<p id=\"so_33242940_33243307_0\">A literal is a primary expression. Its type depends on its form (2.13). A string literal is an lvalue; all other literals are prvalues.</p>\n</blockquote>\n<p>Since it is a prvalue we are allowed to take a <code>const &amp;</code> to it but we cannot take a reference to it.  If we take a <code>const &amp;</code> to the temporary the the lifetime of the temporary will be extended to the point where the reference goes out of scope.</p>\n<pre><code>{\n    const int &amp; a = 42;\n    //line of code\n    //42 still exits here\n} // a goes out of scope and now 42 is gone\n</code></pre>\n", "LastEditorUserId": "4342498", "LastActivityDate": "2016-04-15T13:23:42.640", "Score": "7", "CreationDate": "2015-10-20T17:42:05.167", "ParentId": "33242940", "CommentCount": "0", "OwnerUserId": "4342498", "LastEditDate": "2016-04-15T13:23:42.640"}});