post_cb({"bq_ids": {"n4140": {"so_12285060_12285088_4": {"length": 6, "quality": 0.8571428571428571, "section_id": 1575}, "so_12285060_12285088_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 1573}, "so_12285060_12285088_2": {"length": 21, "quality": 0.9130434782608695, "section_id": 1642}}, "n3337": {"so_12285060_12285088_4": {"length": 6, "quality": 0.8571428571428571, "section_id": 1641}, "so_12285060_12285088_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 1637}, "so_12285060_12285088_2": {"length": 21, "quality": 0.9130434782608695, "section_id": 1639}}, "n4659": {"so_12285060_12285088_4": {"length": 6, "quality": 0.8571428571428571, "section_id": 1728}, "so_12285060_12285088_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 1726}, "so_12285060_12285088_2": {"length": 21, "quality": 0.9130434782608695, "section_id": 1801}}}, "12285132": {"Id": "12285132", "PostTypeId": "2", "Body": "<p>From the docs:</p>\n<blockquote>\n<p id=\"so_12285060_12285132_0\"><code>string&amp; append ( const char * s, size_t n );</code></p>\n<p id=\"so_12285060_12285132_1\">Appends a copy of the\n  string formed by the first n characters in the array of characters\n  pointed by s. </p>\n<p id=\"so_12285060_12285132_2\"><code>string&amp; append ( const char * s );</code> </p>\n<p id=\"so_12285060_12285132_3\">Appends a copy of the\n  string formed by the null-terminated character sequence (C string)\n  pointed by s. The length of this character sequence is determined by\n  the first ocurrence of a null character (as determined by\n  traits.length(s)).</p>\n</blockquote>\n<p>The second version (your first one) takes into account the null-terminator (which in your case is exactly the first character). The first one doesn't.</p>\n", "LastActivityDate": "2012-09-05T15:43:41.063", "CommentCount": "0", "CreationDate": "2012-09-05T15:43:41.063", "ParentId": "12285060", "Score": "3", "OwnerUserId": "673730"}, "12285060": {"ViewCount": "67", "Body": "<p>I have this code say:  </p>\n<pre><code> std::string str(\"ashish\");  \n str.append(\"\\0\\0\");  \n printf(\"%d\", str.length());  \n</code></pre>\n<p>It is printing 6 but if I have this code  </p>\n<pre><code> std::string str(\"ashish\");  \n str.append(\"\\0\\0\",2);  \n printf(\"%d\", str.length());  \n</code></pre>\n<p>it is printing 8 ! Why?</p>\n", "AcceptedAnswerId": "12285088", "Title": "Strange behaviour of string length function w.r.t null character?", "CreationDate": "2012-09-05T15:39:50.733", "Id": "12285060", "CommentCount": "2", "LastEditDate": "2012-09-05T15:40:35.650", "PostTypeId": "1", "LastEditorUserId": "673730", "LastActivityDate": "2012-09-05T15:59:34.050", "Score": "1", "OwnerUserId": "374402", "Tags": "<c++><string>", "AnswerCount": "2"}, "12285088": {"Id": "12285088", "PostTypeId": "2", "Body": "<p>It's because <code>str.append(\"\\0\\0\")</code> uses the null character to determine the end of the string. So \"\\0\\0\" is length zero. The other overload, <code>str.append(\"\\0\\0\",2)</code>, just takes the length you give it, so it appends two characters.</p>\n<p>From the standard:</p>\n<blockquote>\n<pre><code>  basic_string&amp;\n   append(const charT* s, size_type n);\n</code></pre>\n<p id=\"so_12285060_12285088_0\">7 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<em>Requires:</em> <code>s</code> points to an array of at least <code>n</code> elements of <code>charT</code>.</p>\n<p id=\"so_12285060_12285088_1\">8 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<em>Throws:</em> length_error if size() + n &gt; max_size().</p>\n<p id=\"so_12285060_12285088_2\">9 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<em>Effects:</em> The function replaces the string controlled by <code>*this</code> with a string of length <code>size() + n</code> whose first <code>size()</code> elements are a copy of the original string controlled by <code>*this</code> and whose remaining elements are a copy of the initial <code>n</code> elements of <code>s</code>.</p>\n<p id=\"so_12285060_12285088_3\">10 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<em>Returns:</em> <code>*this</code>.</p>\n<pre><code>  basic_string&amp; append(const charT* s);\n</code></pre>\n<p id=\"so_12285060_12285088_4\">11 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<em>Requires:</em> <code>s</code> points to an array of at least <code>traits::length(s) + 1</code> elements of <code>charT</code>.</p>\n<p id=\"so_12285060_12285088_5\">12 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<em>Effects:</em> Calls <code>append(s, traits::length(s))</code>.</p>\n<p id=\"so_12285060_12285088_6\">13 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<em>Returns:</em> <code>*this</code>.</p>\n<p id=\"so_12285060_12285088_7\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<em>\u2014 [string::append] 21.4.6.2 p7-13</em></p>\n</blockquote>\n", "LastEditorUserId": "365496", "LastActivityDate": "2012-09-05T15:59:34.050", "Score": "4", "CreationDate": "2012-09-05T15:41:35.120", "ParentId": "12285060", "CommentCount": "0", "LastEditDate": "2012-09-05T15:59:34.050", "OwnerUserId": "365496"}});