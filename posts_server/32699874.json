post_cb({"bq_ids": {"n4140": {"so_32699874_32726664_0": {"length": 63, "quality": 0.9692307692307692, "section_id": 2287}}, "n3337": {"so_32699874_32726664_0": {"length": 63, "quality": 0.9692307692307692, "section_id": 2275}}, "n4659": {"so_32699874_32726664_0": {"length": 63, "quality": 0.9692307692307692, "section_id": 2560}}}, "32699874": {"ViewCount": "177", "Body": "<p>Is it safe to use <code>std::cerr</code> like this?</p>\n<pre><code>try \n{\n      Something();\n} \ncatch(std::bad_alloc) \n{\n    cerr &lt;&lt; \"Out of memory!\";\n}\n</code></pre>\n<p>Does it use dynamic memory?  If it fails, will it throw an exception or just not output anything?</p>\n", "AcceptedAnswerId": "32701780", "Title": "Is it safe to use cerr when handling bad_alloc?", "CreationDate": "2015-09-21T16:10:41.383", "Id": "32699874", "CommentCount": "5", "LastEditDate": "2015-09-21T17:19:21.423", "PostTypeId": "1", "LastEditorUserId": "2692339", "LastActivityDate": "2015-09-22T20:50:34.653", "Score": "5", "OwnerUserId": "4812122", "Tags": "<c++><exception-handling>", "AnswerCount": "2"}, "32726664": {"Id": "32726664", "PostTypeId": "2", "Body": "<p>The <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4527.pdf\" rel=\"nofollow\">standard</a>(27.7.3.6, page 1057) defines some requirements for formatted output functions in ostreams:</p>\n<blockquote>\n<p id=\"so_32699874_32726664_0\">Each formatted output function begins execution by <strong>constructing an object of class sentry</strong> . If this object returns true when converted to a value of type bool , the function endeavors to generate the requested output. If the generation fails, then the formatted output function does setstate(ios_base::failbit) , <strong>which might throw an exception</strong>. If an exception is thrown during output, then ios::badbit is turned on 328 in *this \u2019s error state. If (exceptions()&amp;badbit) != 0 <strong>then the exception is rethrown.</strong> Whether or not an exception is thrown, the sentry object is destroyed before leaving the formatted output function. If no exception is thrown, the result of the formatted output function is *this .</p>\n</blockquote>\n<p>(Emphasis mine)</p>\n<p>For the construction of the sentry object (as with the construction of any object), the program will require more memory. Whether it is static or dynamic memory is left unspecified. Also, as blacks' answer sums up nicely, the standard defines that an exception may be thrown when failbit is enabled.</p>\n", "LastActivityDate": "2015-09-22T20:50:34.653", "CommentCount": "0", "CreationDate": "2015-09-22T20:50:34.653", "ParentId": "32699874", "Score": "1", "OwnerUserId": "3854787"}, "32701780": {"Id": "32701780", "PostTypeId": "2", "Body": "<h2>Simple case</h2>\n<p>There is one failing big allocation -possibly due to programmer's mistake-</p>\n<pre><code>int main() \n{\n\n    try {\n        std::size_t bytesToAllocate;\n        std::cin &gt;&gt; bytesToAllocate;\n\n        std::unique_ptr&lt;char&gt; ptr { new char[bytesToAllocate - 1] };\n        // ops, if user enters 0 or extraction fails we get \n        // std::numeric_limits&lt;std::size_t&gt;::max() -1 bytes to allocate\n\n    } catch (const std::bad_alloc&amp; e) {\n            std::cerr &lt;&lt; \"Failed to allocate memory.\\n\";\n    }\n}\n</code></pre>\n<p>Here, even if <code>new</code> fails, we definitely have more memory because there was none used before.</p>\n<h2>Realistic case</h2>\n<p>If, for some unspecified reason, a character insertion fails, the internal <code>failbit</code> is enabled i.e <code>setstate(std::ios_base::failbit)</code> and, if <a href=\"https://stackoverflow.com/questions/3180268/why-are-c-stl-iostreams-not-exception-friendly\"><code>exception</code> is set</a> for <code>failbit</code>, an exception is thrown. Moreover, if an exception is thrown during an insertion, <code>badbit</code> is set and, if <code>exception</code> is set on <code>badbit</code>, the exception is rethrown.  </p>\n<p>However, AFAIK, it is left uncovered and therefore unspecified whether such operation allocates memory or not and how it's done. Your program could be killed because of out-of-memory protections and so without having chance to catch the exception, if the whole process of exception propagating is possible at all in that condition.</p>\n", "LastEditorUserId": "2692339", "LastActivityDate": "2015-09-22T15:10:40.963", "Score": "1", "CreationDate": "2015-09-21T18:01:52.590", "ParentId": "32699874", "CommentCount": "3", "OwnerUserId": "2692339", "LastEditDate": "2015-09-22T15:10:40.963"}});