post_cb({"43768437": {"ParentId": "43764311", "CommentCount": "1", "Body": "<p><a href=\"https://timsong-cpp.github.io/cppwp/temp.point#8\" rel=\"noreferrer\">[temp.point]/8</a>:</p>\n<blockquote>\n<p id=\"so_43764311_43768437_0\">A specialization for a function template [...] may\n  have multiple points of instantiations within a translation unit, and\n  in addition to the points of instantiation described above, for any\n  such specialization that has a point of instantiation within the\n  translation unit, the end of the translation unit is also considered a\n  point of instantiation. [...] If two different points of instantiation\n  give a template specialization different meanings according to the\n  one-definition rule, the program is ill-formed, no diagnostic\n  required.</p>\n</blockquote>\n<p>Compare <a href=\"https://timsong-cpp.github.io/cppwp/temp.dep.candidate\" rel=\"noreferrer\">[temp.dep.candidate]</a>:</p>\n<blockquote>\n<p id=\"so_43764311_43768437_1\">For a function call where the <em>postfix-expression</em> is a dependent\n  name, the candidate functions are found using the usual lookup rules\n  ([basic.lookup.unqual], [basic.lookup.argdep]) except that:</p>\n<ul>\n<li><p id=\"so_43764311_43768437_2\">For the part of the lookup using unqualified name lookup, only function declarations from the template definition context are found.</p></li>\n<li><p id=\"so_43764311_43768437_3\">For the part of the lookup using associated namespaces ([basic.lookup.argdep]), only function declarations found in either\n  the template definition context or the template instantiation context\n  are found.</p></li>\n</ul>\n<p id=\"so_43764311_43768437_4\">If the call would be ill-formed or would find a better match had the lookup within the associated namespaces considered all the function\n  declarations with external linkage introduced in those namespaces in\n  all translation units, not just considering those declarations found\n  in the template definition and template instantiation contexts, then\n  the program has undefined behavior.</p>\n</blockquote>\n", "OwnerUserId": "2756719", "PostTypeId": "2", "Id": "43768437", "Score": "6", "CreationDate": "2017-05-03T19:26:59.827", "LastActivityDate": "2017-05-03T19:26:59.827"}, "43764311": {"CommentCount": "0", "ViewCount": "218", "LastActivityDate": "2017-05-03T19:26:59.827", "Body": "<p>I have an issue which is quite similar to <a href=\"https://stackoverflow.com/questions/39781244/why-does-order-of-declaring-function-changes-overload-chosen-by-sfinae\">this</a> one.</p>\n<p>In short, I have a <code>magic</code> method, which is <code>noexcept</code> if another method is <code>noexcept</code>.</p>\n<p>The weird thing is that this \"another method\" has two overloads, and the compiler chooses the <strong>second</strong> overload to determine <code>magic</code> <code>noexcept</code>-ness.</p>\n<p>However, when <code>magic</code> is called later on, the <strong>first</strong> overload is called, but the <code>noexcept</code>-ness of <code>magic</code> remains the same!</p>\n<p>Here is the wandbox <a href=\"https://wandbox.org/permlink/XwROqTUJqIaCiYU2\" rel=\"noreferrer\">link</a></p>\n<p>From what I understand:</p>\n<ol>\n<li><code>noexcept(magic(dummy2{}))</code> calls</li>\n<li><code>noexcept(noexcept(adl_caller(...))</code> which falls back to</li>\n<li><code>adl_caller(..., priority_tag&lt;0&gt;) noexcept</code>since <code>user_method(dummy2)</code> is not known by the compiler at this point.</li>\n</ol>\n<p>Fair enough, however, how is <code>user_method(dummy2)</code> called 3 lines above?\nIs this intended by the Standard?</p>\n<p>Sorry if I'm not clear enough.</p>\n<pre><code>#include &lt;iostream&gt;\n\ntemplate &lt;unsigned N&gt; struct priority_tag : priority_tag&lt;N - 1&gt; {};\ntemplate &lt;&gt; struct priority_tag&lt;0&gt; {};\n\ntemplate &lt;typename T&gt;\nauto adl_caller(T t, priority_tag&lt;1&gt;) noexcept(noexcept(user_method(t)))\n    -&gt; decltype(user_method(t)) {\n  std::cout &lt;&lt; \"first adl_caller overload\" &lt;&lt; std::endl;\n  user_method(t);\n}\n\n// tricky noexcept ...\ntemplate &lt;typename T&gt; void adl_caller(T, priority_tag&lt;0&gt;) noexcept {\n  std::cout &lt;&lt; \"second adl_caller overload\" &lt;&lt; std::endl;\n}\n\ntemplate &lt;typename T&gt;\nvoid magic(T t) noexcept(noexcept(adl_caller(t, priority_tag&lt;1&gt;{}))) {\n  adl_caller(t, priority_tag&lt;1&gt;{});\n}\n\nstruct dummy {};\nstruct dummy2 {};\n\n// un-commenting this line makes the above call to cout print '0'\n// void user_method(dummy2);\n\nvoid user_method(dummy)\n{\n  // user_method(dummy2) is declared after this point\n  // this line prints '1', since magic falls back to the second adl_caller overload\n  std::cout &lt;&lt; \"noexcept?: \" &lt;&lt; noexcept(magic(dummy2{})) &lt;&lt; std::endl;\n  std::cout &lt;&lt; \"dummy method called\" &lt;&lt; std::endl;\n  // however, the first adl_caller overload is called here ...\n  magic(dummy2{});\n}\n\nvoid user_method(dummy2)\n{\n  std::cout &lt;&lt; \"dummy2 method called\" &lt;&lt; std::endl;\n}\n\nint main()\n{\n  magic(dummy{});\n}\n</code></pre>\n", "PostTypeId": "1", "AcceptedAnswerId": "43768437", "FavoriteCount": "1", "Title": "Inconsistencies with conditional noexcept and overloads", "Id": "43764311", "Score": "8", "CreationDate": "2017-05-03T15:29:35.303", "Tags": "<c++><c++11><templates><argument-dependent-lookup><noexcept>", "OwnerUserId": "4116453", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_43764311_43768437_3": {"section_id": 224, "quality": 0.8888888888888888, "length": 16}, "so_43764311_43768437_2": {"section_id": 224, "quality": 0.9230769230769231, "length": 12}, "so_43764311_43768437_1": {"section_id": 224, "quality": 0.8235294117647058, "length": 14}, "so_43764311_43768437_4": {"section_id": 224, "quality": 1.0, "length": 36}, "so_43764311_43768437_0": {"section_id": 223, "quality": 0.9772727272727273, "length": 43}}, "n3337": {"so_43764311_43768437_3": {"section_id": 217, "quality": 0.8888888888888888, "length": 16}, "so_43764311_43768437_2": {"section_id": 217, "quality": 0.9230769230769231, "length": 12}, "so_43764311_43768437_1": {"section_id": 217, "quality": 0.5882352941176471, "length": 10}, "so_43764311_43768437_4": {"section_id": 217, "quality": 1.0, "length": 36}, "so_43764311_43768437_0": {"section_id": 216, "quality": 0.9772727272727273, "length": 43}}, "n4659": {"so_43764311_43768437_1": {"section_id": 232, "quality": 0.8235294117647058, "length": 14}, "so_43764311_43768437_2": {"section_id": 232, "quality": 0.9230769230769231, "length": 12}, "so_43764311_43768437_3": {"section_id": 232, "quality": 0.8888888888888888, "length": 16}, "so_43764311_43768437_4": {"section_id": 232, "quality": 1.0, "length": 36}, "so_43764311_43768437_0": {"section_id": 231, "quality": 1.0, "length": 44}}}});