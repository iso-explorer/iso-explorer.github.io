post_cb({"bq_ids": {"n4140": {"so_36033000_36033322_0": {"length": 5, "quality": 1.0, "section_id": 87}, "so_36033000_36033322_3": {"length": 16, "quality": 0.9411764705882353, "section_id": 91}}, "n3337": {"so_36033000_36033322_0": {"length": 5, "quality": 1.0, "section_id": 82}, "so_36033000_36033322_3": {"length": 16, "quality": 0.9411764705882353, "section_id": 86}}}, "36033322": {"PostTypeId": "2", "Body": "<p>This code should work fine, due standard. From <a href=\"http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2011/n3242.pdf\" rel=\"nofollow\">N3242</a>:</p>\n<p><strong>\u00a714.3.2/1:</strong></p>\n<blockquote>\n<p id=\"so_36033000_36033322_0\">A template-argument for a non-type, non-template <em>template-parameter</em>\n  shall be one of:</p>\n<p id=\"so_36033000_36033322_1\">[...]</p>\n<ul>\n<li>a constant expression that evaluates to a null pointer value (4.10); or</li>\n</ul>\n<p id=\"so_36033000_36033322_2\">[...]</p>\n</blockquote>\n<p><strong>\u00a714.3.2/5:</strong></p>\n<blockquote>\n<p id=\"so_36033000_36033322_3\">The following conversions are performed on each expression used as a\n  non-type <em>template-argument</em>. If a non-type <em>template-argument</em> cannot be\n  converted to the type of the corresponding <em>template-parameter</em> then the\n  program is ill-formed.</p>\n<p id=\"so_36033000_36033322_4\">[...]</p>\n<ul>\n<li>for a non-type <em>template-parameter</em> of type pointer to object,\n  qualification conversions (4.4) and the array-to-pointer conversion\n  (4.2) are applied; if the <em>template-argument</em> is of type <code>std::nullptr_t</code>,\n  the null pointer conversion (4.10) is applied. [<em>Note:</em> [...] However, both\n  <code>(int*)0</code> and <code>nullptr</code> are valid <em>template-arguments</em> for a non-type\n  <em>template-parameter</em> of type \u201cpointer to int.\u201d \u2014 <em>end note</em>]</li>\n</ul>\n<p id=\"so_36033000_36033322_5\">[...]</p>\n</blockquote>\n", "LastActivityDate": "2016-06-28T12:28:05.037", "LastEditorUserId": "3919155", "Id": "36033322", "CommentCount": "1", "CreationDate": "2016-03-16T10:42:46.760", "ParentId": "36033000", "Score": "4", "OwnerUserId": "1498580", "LastEditDate": "2016-06-28T12:28:05.037"}, "36033000": {"ViewCount": "114", "Body": "<p>The following C++11 code compiles with g++ 4.7.4, g++ 4.8.5, g++ 4.9.3 and g++ 5.3.0, but not with clang++ 3.7.1 or clang++ 3.8.0 (trunk 254750):</p>\n<pre><code>template &lt;typename F, F f&gt; struct MetaValue {};\n\ntemplate &lt;typename T&gt; class IntSpec;\ntemplate &lt;int V&gt; class IntSpec&lt;MetaValue&lt;int, V&gt; &gt; {};\n\n// note: template is declared here:\ntemplate &lt;typename T&gt; class PtrSpec;\ntemplate &lt;void * V&gt; class PtrSpec&lt;MetaValue&lt;void *, V&gt; &gt; {};\n\nint main() {\n  IntSpec&lt;MetaValue&lt;int, 0&gt; &gt;();\n\n  // implicit instantiation of undefined template 'PtrSpec&lt;MetaValue&lt;void *, nullptr&gt; &gt;'\n  PtrSpec&lt;MetaValue&lt;void *, nullptr&gt; &gt;();\n}\n</code></pre>\n<p>Clang only errors on instantiation of <code>PtrSpec&lt;&gt;</code> but not on <code>IntSpec&lt;&gt;</code>. Is this a compiler bug, an ambiguity in the standard or something I always need to consider when writing code? Please provide a reference, if possible.</p>\n<p><strong>EDIT:</strong> My further analysis found that the following works for both compilers:</p>\n<pre><code>template &lt;typename F, F f&gt; struct MetaValue {};\n\n// note: template is declared here:\ntemplate&lt;typename T&gt; class PtrSpec;\ntemplate &lt;int * V&gt; class PtrSpec&lt;MetaValue&lt;int *, V&gt; &gt; {};\n\nextern int x;\n\nint main() { PtrSpec&lt;MetaValue&lt;int *, &amp;x&gt; &gt;(); }\n</code></pre>\n<p>but if I change <code>&amp;x</code> to <code>nullptr</code> I get <code>implicit instantiation of undefined template 'PtrSpec&lt;MetaValue&lt;int *, nullptr&gt; &gt;'</code> with clang++.</p>\n", "AcceptedAnswerId": "36033322", "Title": "Strange template instantiation bug with non-type argument", "CreationDate": "2016-03-16T10:29:13.157", "Id": "36033000", "CommentCount": "2", "LastEditDate": "2016-03-16T10:54:10.880", "PostTypeId": "1", "LastEditorUserId": "3919155", "LastActivityDate": "2016-06-28T12:28:05.037", "Score": "2", "OwnerUserId": "3919155", "Tags": "<c++><c++11><g++><clang++><compiler-bug>", "AnswerCount": "1"}});