post_cb({"32815366": {"ParentId": "32815210", "CommentCount": "3", "Body": "<p>This is the rule, found in 7.3.1.2, that causes <code>A::f2()</code> to fail:</p>\n<blockquote>\n<p id=\"so_32815210_32815366_0\">If a friend declaration in a non-local class first declares a class, function, class template or function template the friend is a member of the innermost enclosing namespace. The friend declaration does not by itself make the name visible to unqualified lookup (3.4.1) or qualified lookup (3.4.3).</p>\n</blockquote>\n", "OwnerUserId": "103167", "PostTypeId": "2", "Id": "32815366", "Score": "3", "CreationDate": "2015-09-28T03:39:30.313", "LastActivityDate": "2015-09-28T03:39:30.313"}, "32815210": {"CommentCount": "2", "ViewCount": "77", "PostTypeId": "1", "LastEditorUserId": "2776146", "CreationDate": "2015-09-28T03:14:39.993", "LastActivityDate": "2015-09-28T03:44:33.680", "Title": "Why f1 is found but f2 not?", "AcceptedAnswerId": "32815366", "LastEditDate": "2015-09-28T03:18:30.060", "Id": "32815210", "Score": "1", "Body": "<p>Following codes are in two source files.</p>\n<p>First:</p>\n<pre><code>namespace A {\n    // two friends; neither is declared apart from a friend declaration\n    // these functions implicitly are members of namespace A\n    class C {\n        friend void f2();           // won\u2019t be found, unless otherwise declared\n        friend void f1(const C&amp;);   // found by argument-dependent lookup\n    };\n}\nint main()\n{\n    A::C obj;\n    f1(obj);        // ok: find A::f through the friend declaration in A::C\n    A::f2();        // no member named f2 in namespace A\n}\n</code></pre>\n<p>and the second:</p>\n<pre><code>#include &lt;iostream&gt;\nnamespace A {\n    class C;\n    void f1(const C&amp;) {\n        std::cout &lt;&lt; 1;\n    }\n    void f2() {\n        std::cout &lt;&lt; 2;\n    }\n}\n</code></pre>\n<p>The first piece of code is copied from C++ primer, the only difference is C++ primer call <strong>f2()</strong> without prefix the namespace. The second piece is my complement. I wanna know now that <strong>f1</strong> and <strong>f2</strong> implicitly are members of namespace A, why <strong>A::f2()</strong> is still wrong while <strong>f1(obj)</strong> can be found by ADL?</p>\n", "Tags": "<c++><friend-function>", "OwnerUserId": "2184663", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_32815210_32815366_0": {"section_id": 5485, "quality": 0.9032258064516129, "length": 28}}, "n3337": {"so_32815210_32815366_0": {"section_id": 5271, "quality": 0.6451612903225806, "length": 20}}, "n4659": {"so_32815210_32815366_0": {"section_id": 6920, "quality": 0.9032258064516129, "length": 28}}}, "32815350": {"ParentId": "32815210", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>In the first block of code, <code>f2</code> is in the lexical scope of <code>A::C</code>, i.e. the name is visible within the scope of <code>A::C</code>. It is not visible outside <code>A::C</code>.</p>\n<p>To make <code>f2</code> visible outside the scope of <code>A::C</code>, you'll need to declare or define it in <code>A</code>.</p>\n", "OwnerUserId": "434551", "LastEditorUserId": "434551", "LastEditDate": "2015-09-28T03:44:33.680", "Id": "32815350", "Score": "0", "CreationDate": "2015-09-28T03:37:36.017", "LastActivityDate": "2015-09-28T03:44:33.680"}});