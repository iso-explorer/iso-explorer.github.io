post_cb({"24385410": {"CommentCount": "7", "ViewCount": "253", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2014-06-24T11:26:32.233", "LastActivityDate": "2014-06-25T16:36:27.567", "Title": "How is it parsed: constructing unnamed temporary with braced init list", "FavoriteCount": "3", "LastEditDate": "2017-05-23T10:26:13.043", "Id": "24385410", "Score": "13", "Body": "<p>I recently <a href=\"https://stackoverflow.com/a/24376630/464581\">yet again encountered</a> the notation</p>\n<pre><code>( const int[10] ){ 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 }\n</code></pre>\n<p>As I recall it's permitted in both C and C++, but via quite different language mechanisms.</p>\n<p>I believed that in C++ the formal view is that it's a construction of an unnamed temporary via an epxlicit type conversion <code>(T)</code> <em>cast-expression</em> that would reduce to a <code>static_cast</code>, that constructs an object via C++11 \u00a75.2.9/4:</p>\n<blockquote>\n<p id=\"so_24385410_24385410_0\"><strong>\u201d</strong> an expression <code>e</code> can be explicitly converted to a type <code>T</code> using a <code>static_cast</code> of the form <code>static_cast&lt;T&gt;(e)</code> if the declaration <code>T t(e);</code> is well-formed, for some invented temporary variable <code>t</code> (8.5)</p>\n</blockquote>\n<p>However, the <em>cast-expression</em> syntax is defined by C++11 \u00a75.4/2 as being either <em>unary-expression</em> or, recursively, a <code>(</code> <em>type-id</em> <code>)</code> <em>cast-expression</em>, where the single base case is reduction to <em>unary-expression</em>.</p>\n<p>And as far as I can tell a <em>braced init-list</em> is not an expression?</p>\n<p>An alternative view could be that it\u2019s an explicit type conversion via functional notation, C++11 \u00a75.2.3/3,</p>\n<blockquote>\n<p id=\"so_24385410_24385410_1\"><strong>\u201d</strong> a <em>simple-type-specifier</em> or <em>typename-specifier</em> followed by a <em>braced-init-list</em> creates a temporary\n  object of the specified type</p>\n</blockquote>\n<p>but as far as I can tell a <em>simple-type-specifier</em> can\u2019t involve parentheses, and a <em>typename-specifier</em> involves the keyword <code>typename</code>?</p>\n", "Tags": "<c++><c++11>", "OwnerUserId": "464581", "AnswerCount": "1"}, "24390563": {"ParentId": "24385410", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>Per C99 (well, actually N1256 which is the prior draft) 6.5.2.5/4:</p>\n<blockquote>\n<p id=\"so_24385410_24390563_0\">A postfix expression that consists of a parenthesized type name followed by a brace-enclosed list of initializers is a <em>compound literal</em>. It provides an unnamed object whose value is given by the initializer list.</p>\n</blockquote>\n<p>Some compilers - <a href=\"http://coliru.stacked-crooked.com/a/11896810ad4cf5cb\" rel=\"nofollow noreferrer\">at least g++ and clang</a> - provide C99 compound literals in C++ as an extension. Semantically, the expression</p>\n<pre><code>( const int[10] ){ 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 }\n</code></pre>\n<p>is a literal of type <code>const int[10]</code>: <code>decltype((const int[10]){ 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 })</code> is in fact <code>const int[10]</code>. <strong>Note well:</strong> There's some disagreement among g++ versions about the exact type: g++ versions before 4.9 says that <code>decltype((const int[10]){ 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 })</code> is <code>const int(&amp;)[10]</code>. <a href=\"http://coliru.stacked-crooked.com/a/8acf9f5f4e71d3ad\" rel=\"nofollow noreferrer\" title=\"Live at Coliru\">See this demonstration program</a>.</p>\n<p>You can achieve the same result in standard C++ with explicit type conversion via functional notation, but you must define a type alias for the array type since functional notation requires a <em>simple-type-specifier</em>:</p>\n<pre><code>using foo = const int[10];\nfoo{ 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 };\n</code></pre>\n<p>or <a href=\"https://stackoverflow.com/questions/24385410/how-is-it-parsed-constructing-unnamed-temporary-with-braced-init-list/24390563#comment37715934_24385410\">Xeo's general alias template</a>:</p>\n<pre><code>template &lt;typename T&gt;\nusing foo = T;\nfoo&lt;const int[10]&gt;{ 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 };\n</code></pre>\n", "OwnerUserId": "923854", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T11:57:50.760", "Id": "24390563", "Score": "6", "CreationDate": "2014-06-24T15:26:06.383", "LastActivityDate": "2014-06-25T16:36:27.567"}, "bq_ids": {"n4140": {"so_24385410_24385410_1": {"section_id": 6001, "quality": 1.0, "length": 9}, "so_24385410_24385410_0": {"section_id": 6030, "quality": 1.0, "length": 15}}, "n3337": {"so_24385410_24385410_1": {"section_id": 5769, "quality": 1.0, "length": 9}, "so_24385410_24385410_0": {"section_id": 5798, "quality": 1.0, "length": 15}}, "n4659": {"so_24385410_24385410_1": {"section_id": 7499, "quality": 0.6666666666666666, "length": 6}, "so_24385410_24385410_0": {"section_id": 2, "quality": 0.6666666666666666, "length": 10}}}});