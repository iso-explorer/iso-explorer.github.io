post_cb({"bq_ids": {"n4140": {"so_15459316_15481556_0": {"length": 8, "quality": 1.0, "section_id": 7242}}, "n3337": {"so_15459316_15481556_0": {"length": 8, "quality": 1.0, "section_id": 6986}}, "n4659": {"so_15459316_15481556_0": {"length": 7, "quality": 0.875, "section_id": 8751}}}, "15481556": {"Id": "15481556", "PostTypeId": "2", "Body": "<p>With VS2012 <code>max_align_t</code> is 8, which means the maximum alignment supported in all contexts is 8. Alignments larger than this value are 'extended alignments' and</p>\n<blockquote>\n<p id=\"so_15459316_15481556_0\">It is implementation-defined whether any extended alignments are supported and the contexts in which they are supported.</p>\n<p id=\"so_15459316_15481556_1\">\u2014 <em>[basic.align] 3.11/3</em></p>\n</blockquote>\n<p>Microsoft's alignment specifier permits extended alignments, however they are not supported by the implementation of the standard library they are using. Although this doesn't seem to be non-conformant it does seem like a QoI issue to me.</p>\n", "LastActivityDate": "2013-03-18T16:12:19.210", "CommentCount": "0", "CreationDate": "2013-03-18T16:12:19.210", "ParentId": "15459316", "Score": "3", "OwnerUserId": "365496"}, "15459316": {"ViewCount": "488", "Body": "<pre><code>_declspec(align(32)) struct St{ \n    int foo; \n};\ntypedef std::aligned_storage&lt;sizeof(St), std::alignment_of&lt;St&gt;::value&gt;::type Ta;\n\nint main() {\n    std::cout &lt;&lt; std::alignment_of&lt;St&gt;::value &lt;&lt; '\\n'; \n    std::cout &lt;&lt; std::alignment_of&lt;Ta&gt;::value &lt;&lt; '\\n';\n    return 0;\n}\n</code></pre>\n<p>Output is:</p>\n<pre><code>32\n8\n</code></pre>\n<p>I'm using msvc(visual studio 2012). Is <code>Ta</code> aligned by 32, or just 8?</p>\n", "AcceptedAnswerId": "15481556", "Title": "strange behaviour of std::aligned_storage", "CreationDate": "2013-03-17T09:35:47.520", "Id": "15459316", "CommentCount": "1", "LastEditDate": "2013-03-18T16:32:31.027", "PostTypeId": "1", "LastEditorUserId": "500104", "LastActivityDate": "2013-03-18T16:32:31.027", "Score": "1", "OwnerUserId": "1971684", "Tags": "<c++><c++11><visual-studio-2012><alignment>", "AnswerCount": "2"}, "15462850": {"Id": "15462850", "PostTypeId": "2", "Body": "<p>I translated your example into standard C++11 by substituting <code>struct alignas(32) St{</code> for <code>_declspec(align(32)) struct St{</code>.</p>\n<p>I then ran it on my system (clang++ / libc++) OS X.  My results are:</p>\n<pre><code>32\n32\n</code></pre>\n<p>If I change 32 to 16 or 64 I continue to get the same alignment for both <code>St</code> and <code>Ta</code>.  I suspect this is a bug in the implementation you're using.</p>\n", "LastActivityDate": "2013-03-17T15:57:48.047", "CommentCount": "1", "CreationDate": "2013-03-17T15:57:48.047", "ParentId": "15459316", "Score": "2", "OwnerUserId": "576911"}});