post_cb({"30252074": {"ViewCount": "194", "Body": "<p>I have created a class, which has a constructor that takes a parameter.  Am I right in thinking that I need a copy constructor here?  </p>\n<p>I have a class, which does not take pointers:</p>\n<pre><code>class xyz : public Node\n{\npublic:\n    xyz( uint8_t node);\n    xyz(const xyz&amp; cxyz);\n    ~xyz();\n\nprivate:\n    uint8_t m_node;\n    uint16_t m_gainxyz;\n</code></pre>\n<p>And the base:</p>\n<pre><code>class Node\n{\npublic:\n\nNode();\nvirtual ~Node();\n\nprotected:\n    std::string  m_name;\n</code></pre>\n<p>And when I do this:</p>\n<pre><code>xyz xyz = Initxyz(node);\n</code></pre>\n<p>The compiler tells me to make a copy constructor.</p>\n<p>where:</p>\n<pre><code>xyz PD::Initxyz(Source&amp; inputNode)\n{\n    if (inputNode.getNodeNumber() &gt; 10 )\n        {\n        xyz element(inputNode.getNodeNumber());\n        element.setInputNode(inputNode);\n        return element; \n        }\n    else\n        {\n        std::cout &lt;&lt; \"ERROR IN XYZ CONFIGURATION\" &lt;&lt; std::endl;\n        //Throw Exception;\n        }\n}\n</code></pre>\n<p>But according to what I have read on the web:</p>\n<blockquote>\n<p id=\"so_30252074_30252074_0\">If the object has no pointers to dynamically allocated memory, a shallow copy is probably sufficient. Therefore the default copy constructor, default assignment operator, and default destructor are ok and you don't need to write your own. </p>\n</blockquote>\n<p><a href=\"http://www.fredosaurus.com/notes-cpp/oop-condestructors/copyconstructors.html\" rel=\"nofollow\">http://www.fredosaurus.com/notes-cpp/oop-condestructors/copyconstructors.html</a></p>\n<p>Is it also true that I must have one if I use a constructor with parameters?</p>\n", "AcceptedAnswerId": "30252506", "Title": "When to use a copy constructor?", "CreationDate": "2015-05-15T05:25:49.167", "Id": "30252074", "CommentCount": "10", "LastEditDate": "2015-05-15T05:51:13.677", "PostTypeId": "1", "LastEditorUserId": "1876942", "LastActivityDate": "2015-05-26T05:28:17.330", "Score": "-1", "OwnerUserId": "1876942", "Tags": "<c++><constructor>", "AnswerCount": "4"}, "30252278": {"Id": "30252278", "PostTypeId": "2", "Body": "<p><strong>Copy Constructor</strong> </p>\n<p>Copy constructors are used when: </p>\n<ul>\n<li>Initializing an object at the time of creation (we want to create an\nobject with state of a pre existing object)</li>\n<li>When an object is passed by value to a function (As you know\ntemporary  copy of object is created on stack so we need copy\nconstructor to create that  temporary object with the state of actual\nobject being passed).</li>\n</ul>\n<p>We need Copy constructor to initialize one object from other object, And generally we use assignment operator to invoke copy constructor.\nHere is an example for more understanding. </p>\n<pre><code>class Student{ \n      int rollNo; \npublic: \n    Student(){ \n       rollNo = 0; \n       cout&lt;&lt;\"I am default constructor of Student class\u2026\\n\";  \n    } \n    Student(const Student &amp;obj){ \n     cout&lt;&lt;\"I am copy constructor of Student class\\n\";  \n     rollNo = obj.rollNo; \n    } \n}; \nint main() \n{ \n    Student aStudent;  /*default constructor is implicitly called at this point*/ \n    Student bStudent = aStudent;    /*copy constructor is implicitly called at this point, \n                                   because of the here we are going to initialize one object \n                                   from other previously existing object. */\n}\n</code></pre>\n", "LastEditorUserId": "2852575", "LastActivityDate": "2015-05-15T06:08:44.287", "Score": "-1", "CreationDate": "2015-05-15T05:41:40.573", "ParentId": "30252074", "CommentCount": "11", "OwnerUserId": "2852575", "LastEditDate": "2015-05-15T06:08:44.287"}, "30259262": {"Id": "30259262", "PostTypeId": "2", "Body": "<p>Copy constructor is required when you want to do deep copy instead of shallow copy.It means you are avoiding dangling pointer problem.\nActually compiler is also provide default copy constructor but it works fine if you are not any string to constructor for copy.\nBut If you want to copy string from one object of class to other object of class then you cant refer one memory address to two pointers.\nTry to do examples of copy constructor.</p>\n", "LastActivityDate": "2015-05-15T12:12:20.817", "CommentCount": "0", "CreationDate": "2015-05-15T12:12:20.817", "ParentId": "30252074", "Score": "0", "OwnerUserId": "4903732"}, "bq_ids": {"n4140": {"so_30252074_30252333_0": {"length": 16, "quality": 0.8, "section_id": 450}, "so_30252074_30252333_6": {"length": 21, "quality": 0.9130434782608695, "section_id": 365}, "so_30252074_30252333_5": {"length": 8, "quality": 0.8888888888888888, "section_id": 460}, "so_30252074_30252333_3": {"length": 21, "quality": 0.9130434782608695, "section_id": 460}, "so_30252074_30252333_2": {"length": 7, "quality": 0.875, "section_id": 460}, "so_30252074_30252333_4": {"length": 9, "quality": 0.9, "section_id": 369}, "so_30252074_30252333_1": {"length": 13, "quality": 0.8666666666666667, "section_id": 460}}, "n3337": {"so_30252074_30252333_0": {"length": 16, "quality": 0.8, "section_id": 441}, "so_30252074_30252333_6": {"length": 13, "quality": 0.5652173913043478, "section_id": 359}, "so_30252074_30252333_3": {"length": 18, "quality": 0.782608695652174, "section_id": 451}, "so_30252074_30252333_5": {"length": 8, "quality": 0.8888888888888888, "section_id": 451}, "so_30252074_30252333_2": {"length": 7, "quality": 0.875, "section_id": 451}, "so_30252074_30252333_4": {"length": 6, "quality": 0.6, "section_id": 359}, "so_30252074_30252333_1": {"length": 13, "quality": 0.8666666666666667, "section_id": 451}}, "n4659": {"so_30252074_30252333_0": {"length": 16, "quality": 0.8, "section_id": 472}, "so_30252074_30252333_6": {"length": 21, "quality": 0.9130434782608695, "section_id": 377}, "so_30252074_30252333_3": {"length": 21, "quality": 0.9130434782608695, "section_id": 483}, "so_30252074_30252333_5": {"length": 8, "quality": 0.8888888888888888, "section_id": 483}, "so_30252074_30252333_2": {"length": 7, "quality": 0.875, "section_id": 483}, "so_30252074_30252333_4": {"length": 9, "quality": 0.9, "section_id": 382}, "so_30252074_30252333_1": {"length": 13, "quality": 0.8666666666666667, "section_id": 483}}}, "30252506": {"Id": "30252506", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_30252074_30252506_0\">I have created a class, which has a constructor that takes a parameter. Am I right in thinking that I need a copy constructor here? </p>\n</blockquote>\n<p>You <strong>do not</strong> need to provide a copy constructor for your classes. The compiler generated ones are sufficient.</p>\n<p>Here is <a href=\"http://ideone.com/7fUKyU\" rel=\"nofollow\">a working example based on your code</a>:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;stdint.h&gt;\n\nclass Node\n{\npublic:\n\n  Node() {}\n  virtual ~Node() {}\n\nprotected:\n  std::string  m_name;\n};\n\nclass xyz : public Node\n{\npublic:\n    xyz( uint8_t node) {}\n\nprivate:\n    uint8_t m_node;\n    uint16_t m_gainxyz;\n};\n\nxyz Initxyz(Node)\n{\n    return xyz(42);\n}\n\nint main()\n{\n    Node node;\n    xyz xyz = Initxyz(node);\n}\n</code></pre>\n", "LastEditorUserId": "661519", "LastActivityDate": "2015-05-26T05:28:17.330", "Score": "0", "CreationDate": "2015-05-15T05:57:46.680", "ParentId": "30252074", "CommentCount": "3", "OwnerUserId": "661519", "LastEditDate": "2015-05-26T05:28:17.330"}, "30252333": {"Id": "30252333", "PostTypeId": "2", "Body": "<p>I'll provide some normative reference in order to explain the thing formally.</p>\n<p>If I correctly understand what you wanted, when you need to make the copy of your object then <code>N4296::12.8/1 [class.copy]</code>:</p>\n<blockquote>\n<p id=\"so_30252074_30252333_0\">A class object can be copied or moved in two ways: by initialization\n  (12.1, 8.5), including for function argument passing (5.2.2) and for\n  function value return (6.6.3); and by assignment (5.18).</p>\n</blockquote>\n<p>Actully, the copy constructor may be implicitly declared as deleted, so you'll give a compile-time error if you try to invoke it when you need to make a copy.</p>\n<p>Relevant refernce:</p>\n<blockquote>\n<p id=\"so_30252074_30252333_1\">An implicitly-declared copy/move constructor is an inline public\n  member of its class. A defaulted copy/move constructor for a class X\n  is defined as deleted (8.4.3) if X has:</p>\n<p id=\"so_30252074_30252333_2\">(11.1) \u2014 a variant member with a non-trivial corresponding constructor\n  and X is a union-like class, </p>\n<p id=\"so_30252074_30252333_3\">(11.2) \u2014 a potentially constructed\n  subobject type M (or array thereof) that cannot be copied/moved\n  because overload resolution (13.3), as applied to M\u2019s corresponding\n  constructor, results in an ambiguity or a function that is deleted or\n  inaccessible from the defaulted constructor, </p>\n<p id=\"so_30252074_30252333_4\">(11.3) \u2014 any potentially\n  constructed subobject of a type with a destructor that is deleted or\n  inaccessible from the defaulted constructor, or, </p>\n<p id=\"so_30252074_30252333_5\">(11.4) \u2014 for the copy\n  constructor, a non-static data member of rvalue reference type.</p>\n</blockquote>\n<p>Where potentially construted subobject's defined as follows <code>N4296::12/5</code></p>\n<blockquote>\n<p id=\"so_30252074_30252333_6\">For a class, its non-static data members, its non-virtual direct base\n  classes, and, if the class is not abstract (10.4), its virtual base\n  classes are called its <em>potentially constructed subobjects</em>.</p>\n</blockquote>\n", "OwnerDisplayName": "user2953119", "LastActivityDate": "2015-05-15T05:45:00.813", "Score": "0", "CreationDate": "2015-05-15T05:45:00.813", "ParentId": "30252074", "CommentCount": "0"}});