post_cb({"31644165": {"Id": "31644165", "PostTypeId": "2", "Body": "<p>Well you can declare it explicitly like this:</p>\n<pre><code>void (*actions[5])();\n</code></pre>\n<p>But this is <strike>nearly</strike> unreadable.<br>\nTo make it more readable use a typedef.</br></p>\n<pre><code>typedef void(*Action)();    // Action is the typename for a pointer\n                            // to a function return null and taking\n                            // no parameters.\n\nAction   actions[5];        // An array of 5 Action objects.\n</code></pre>\n<p>Or for your purposes:</p>\n<pre><code>int main()\n{\n     Action   actions[] = {&amp;tell, &amp;slap};\n}\n</code></pre>\n", "LastEditorUserId": "14065", "LastActivityDate": "2015-07-27T04:19:27.273", "Score": "2", "CreationDate": "2015-07-27T02:34:53.517", "ParentId": "31643245", "CommentCount": "0", "OwnerUserId": "14065", "LastEditDate": "2015-07-27T04:19:27.273"}, "31643245": {"ViewCount": "1607", "Body": "<p>I have a few functions that return <code>void</code>.  I made pointers to these functions and wanted to have an array of these functions:</p>\n<p>Why does this code work:</p>\n<pre><code>#include &lt;cstdio&gt;\nusing std::puts;\n\nvoid tell() {\n  puts(\"hi\");\n};\n\nvoid slap() {\n  puts(\"goodbye\");\n}\n\nint main(int argc, char *argv[])\n{\n\n  void (*tp)() = tell;\n  void (*sp)() = slap;\n\n  void(*funcs[])() = {tp, sp};\n  for (auto point:funcs) {\n    point();\n  }\n  return 0;\n}\n</code></pre>\n<p>When I try this code with out specifying a pointer in <code>funcs</code> (i.e. <code>void(funcs[])() = {tp, sp};</code>  I get <code>\" error: 'funcs' declared as array of functions of type 'void ()' \"</code>  Which is exactly what they are - so why is that an error?</p>\n<p>I also don't get the syntax, wouldn't the <code>()</code> at the end of <code>void(*funcs[])()</code> indicate actually calling a function?</p>\n", "AcceptedAnswerId": "31643380", "Title": "Declaring an array of functions of type void C++", "CreationDate": "2015-07-27T00:05:14.387", "Id": "31643245", "CommentCount": "3", "LastEditDate": "2015-07-27T03:19:52.297", "PostTypeId": "1", "LastEditorUserId": "1505939", "LastActivityDate": "2015-07-27T04:19:27.273", "Score": "3", "OwnerUserId": "3291506", "Tags": "<c++><function-pointers>", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_31643245_31643450_0": {"length": 16, "quality": 1.0, "section_id": 3228}, "so_31643245_31643450_1": {"length": 11, "quality": 0.9166666666666666, "section_id": 12}, "so_31643245_31643380_0": {"length": 9, "quality": 1.0, "section_id": 3244}}, "n3337": {"so_31643245_31643450_0": {"length": 16, "quality": 1.0, "section_id": 3101}, "so_31643245_31643380_0": {"length": 9, "quality": 1.0, "section_id": 3117}, "so_31643245_31643450_1": {"length": 11, "quality": 0.9166666666666666, "section_id": 9}}, "n4659": {"so_31643245_31643450_0": {"length": 13, "quality": 0.8125, "section_id": 307}, "so_31643245_31643380_0": {"length": 9, "quality": 1.0, "section_id": 4002}, "so_31643245_31643450_1": {"length": 11, "quality": 0.9166666666666666, "section_id": 13}}}, "31643866": {"Id": "31643866", "PostTypeId": "2", "Body": "<p>use like this:</p>\n<pre><code>int main(int argc, char *argv[])\n{\n    void (*tp)() = tell;\n    void (*sp)() = slap;\n\n    void (*funcs[])() = {tp, sp};\n    for (void (*point)():funcs)\n    {\n        point;\n    }\n    return 0;\n}\n</code></pre>\n", "LastActivityDate": "2015-07-27T01:47:31.107", "CommentCount": "2", "CreationDate": "2015-07-27T01:47:31.107", "ParentId": "31643245", "Score": "-1", "OwnerUserId": "4976170"}, "31643380": {"Id": "31643380", "PostTypeId": "2", "Body": "<p>C++ Standard 8.3.5/10 says:</p>\n<blockquote>\n<p id=\"so_31643245_31643380_0\">There shall be no arrays of functions, although there can be arrays of pointers to functions.</p>\n</blockquote>\n<p>The declaration of \"<code>funcs</code>\" must be read using the \"spiral rule\":</p>\n<p><code>funcs[]</code>: <code>funcs</code> is an array</p>\n<p><code>*funcs[]</code>: <code>funcs</code> is an array of pointers</p>\n<p><code>(*funcs[])()</code>: <code>funcs</code> is an array of pointers to functions with no parameters</p>\n<p><code>void (*funcs[])()</code>: <code>funcs</code> is an array of pointers to functions with no parameters returning <code>void</code>.</p>\n", "LastActivityDate": "2015-07-27T00:24:15.927", "CommentCount": "0", "CreationDate": "2015-07-27T00:24:15.927", "ParentId": "31643245", "Score": "3", "OwnerUserId": "459640"}, "31643450": {"Id": "31643450", "PostTypeId": "2", "Body": "\n<p>Without the asterisk, <code>void (funcs[])()</code> declares an array of functions rather than array of <em>pointers</em> to functions. The latter is allowed in the C++ grammar while the former is not.</p>\n<p>[dcl.array]/p1:</p>\n<blockquote>\n<p id=\"so_31643245_31643450_0\"><code>T</code> is called the array element type; this type shall not be a reference type, the (possibly cv-qualified) type <code>void</code>, <strong>a function type</strong> or an abstract class type.</p>\n</blockquote>\n<p>The contents of the initializer-list (<code>{tp, sp}</code>) are functions but they are converted to pointers via the function-to-pointer conversion:</p>\n<p>[conv.func]/p1</p>\n<blockquote>\n<p id=\"so_31643245_31643450_1\">An lvalue of function type <code>T</code> can be converted to a prvalue of type \u201cpointer to <code>T</code>.\u201d The result is a pointer to the function.</p>\n</blockquote>\n<p>Note that C++ also doesn't allow an array of references.</p>\n<hr>\n<blockquote>\n<p id=\"so_31643245_31643450_2\">I also don't get the syntax, wouldn't the <code>()</code> at the end of <code>void(*funcs[])()</code> indicate actually calling a function?</p>\n</blockquote>\n<p>No, this is a declaration of an array type. The <code>()</code> is part of the construction of the type which specifies the argument list of the function. The entire type indicates <em>\"an array of pointers to functions which take zero arguments (<code>()</code>) and return <code>void</code>\"</em>. It may become clearer with the use of a type alias:</p>\n<pre class=\"lang-c++ prettyprint-override\"><code>using void_f = void (*)();\nvoid_f funcs[] = {tp, sp};\n</code></pre>\n</hr>", "LastActivityDate": "2015-07-27T00:35:13.423", "CommentCount": "2", "CreationDate": "2015-07-27T00:35:13.423", "ParentId": "31643245", "Score": "2", "OwnerUserId": "701092"}});