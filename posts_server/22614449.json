post_cb({"22615500": {"ParentId": "22614449", "CommentCount": "0", "Body": "<p>Main is not a keyword in Java. When you try to execute a java code using \"java\" command, the runtime will load the public class that you are trying to execute and then call the main method defined in the class. The runtime knows that \"main\" is the method to look for as it is designed that way. The language specification also mandates that there should be a method named \"main\", which should be public and static and accept an array of strings as parameter with the return type as void. Since it is public and static, the runtime can call the method without having to instantiate the Class. </p>\n", "OwnerUserId": "2549037", "PostTypeId": "2", "Id": "22615500", "Score": "1", "CreationDate": "2014-03-24T16:45:22.083", "LastActivityDate": "2014-03-24T16:45:22.083"}, "22614449": {"CommentCount": "7", "CreationDate": "2014-03-24T16:00:10.200", "PostTypeId": "1", "AcceptedAnswerId": "22614759", "LastEditorUserId": "3456143", "LastActivityDate": "2015-04-23T13:41:46.797", "LastEditDate": "2014-03-25T17:19:39.167", "ViewCount": "2121", "FavoriteCount": "1", "Title": "Where is main stored & is main a keyword? I do know that main() is a method but I am asking about \"main\"", "Id": "22614449", "Score": "2", "Body": "<p>I do know about the main() method used in C/C++ &amp; Java but since the main() is user defined (as the code inside the main() is defined by the user, it can't be a predefined method) &amp; in C/C++ the main is not stored in a header file, then where is it exactly located so that the compiler first searches for it in a program? And is main a keyword or something else? I heard somewhere that it is an attribute used as a keyword but I am not sure. Can someone please help me with this? (I would like to know about this in case of both Java &amp; C/C++)</p>\n", "Tags": "<java><c++><c>", "OwnerUserId": "3456143", "AnswerCount": "3"}, "22614761": {"ParentId": "22614449", "CommentCount": "0", "Body": "<p><strong>C++11</strong></p>\n<p>Just a quote from the standard:</p>\n<blockquote>\n<p id=\"so_22614449_22614761_0\">3.6.1 Main function</p>\n<p id=\"so_22614449_22614761_1\">A program shall contain a global function called main, which is the\n  designated start of the program. It is implementation-defined whether\n  a program in a freestanding environment is required to define a main\n  function. [ Note: In a freestanding environment, start-up and\n  termination is implementation-defined; start- up contains the\n  execution of constructors for objects of namespace scope with static\n  storage duration; termination contains the execution of destructors\n  for objects with static storage duration. \u2014 end note ]</p>\n<p id=\"so_22614449_22614761_2\">An implementation shall not predefine the main function. This function\n  shall not be overloaded. It shall have a return type of type int, but\n  otherwise its type is implementation-defined. All implementations\n  shall allow both of the following definitions of main:</p>\n<p id=\"so_22614449_22614761_3\">int main() { /* ... <em>/ } and int main(int argc, char</em> argv[]) { /* ...\n  */ }</p>\n<p id=\"so_22614449_22614761_4\">In the latter form argc shall be the number of arguments passed to the\n  program from the environ- ment in which the program is run. If argc is\n  nonzero these arguments shall be supplied in argv[0] through\n  argv[argc-1] as pointers to the initial characters of null-terminated\n  multibyte strings (ntmbs s) (17.5.2.1.4.2) and argv[0] shall be the\n  pointer to the initial character of a ntmbs that represents the name\n  used to invoke the program or \"\". The value of argc shall be\n  non-negative. The value of argv[argc] shall be 0. [ Note: It is\n  recommended that any further (optional) parameters be added after\n  argv. \u2014 end note ]</p>\n<p id=\"so_22614449_22614761_5\">The function main shall not be used within a program. The linkage\n  (3.5) of main is implementation-defined. A program that defines main\n  as deleted or that declares main to be inline, static, or constexpr is\n  ill- formed. The name main is not otherwise reserved. [ Example:\n  member functions, classes, and enumerations can be called main, as can\n  entities in other namespaces. \u2014 end example ]</p>\n<p id=\"so_22614449_22614761_6\">Terminating the program without leaving the current block (e.g., by\n  calling the function std::exit(int) (18.5)) does not destroy any\n  objects with automatic storage duration (12.4). If std::exit is called\n  to end a program during the destruction of an object with static or\n  thread storage duration, the program has undefined behavior.</p>\n<p id=\"so_22614449_22614761_7\">A return statement in main has the effect of leaving the main function\n  (destroying any objects with automatic storage duration) and calling\n  std::exit with the return value as the argument. If control reaches\n  the end of main without encountering a return statement, the effect is\n  that of executing return 0;</p>\n</blockquote>\n", "OwnerUserId": "2249683", "PostTypeId": "2", "Id": "22614761", "Score": "0", "CreationDate": "2014-03-24T16:12:25.177", "LastActivityDate": "2014-03-24T16:12:25.177"}, "bq_ids": {"n4140": {"so_22614449_22614761_1": {"section_id": 7145, "quality": 0.8536585365853658, "length": 35}, "so_22614449_22614761_7": {"section_id": 7149, "quality": 0.9629629629629629, "length": 26}, "so_22614449_22614761_3": {"section_id": 7146, "quality": 0.7142857142857143, "length": 5}, "so_22614449_22614761_6": {"section_id": 7148, "quality": 0.9259259259259259, "length": 25}, "so_22614449_22614761_5": {"section_id": 7147, "quality": 0.7567567567567568, "length": 28}, "so_22614449_22614761_4": {"section_id": 7146, "quality": 0.7959183673469388, "length": 39}, "so_22614449_22614761_2": {"section_id": 7146, "quality": 0.75, "length": 18}}, "n3337": {"so_22614449_22614761_1": {"section_id": 6889, "quality": 0.8536585365853658, "length": 35}, "so_22614449_22614761_6": {"section_id": 6892, "quality": 0.9259259259259259, "length": 25}, "so_22614449_22614761_3": {"section_id": 6890, "quality": 0.5714285714285714, "length": 4}, "so_22614449_22614761_7": {"section_id": 6893, "quality": 0.9629629629629629, "length": 26}, "so_22614449_22614761_2": {"section_id": 6890, "quality": 0.9166666666666666, "length": 22}, "so_22614449_22614761_4": {"section_id": 6890, "quality": 0.7959183673469388, "length": 39}, "so_22614449_22614761_5": {"section_id": 6891, "quality": 0.7567567567567568, "length": 28}}, "n4659": {"so_22614449_22614761_1": {"section_id": 8646, "quality": 0.8048780487804879, "length": 33}, "so_22614449_22614761_6": {"section_id": 8649, "quality": 0.9259259259259259, "length": 25}, "so_22614449_22614761_3": {"section_id": 8647, "quality": 0.7142857142857143, "length": 5}, "so_22614449_22614761_7": {"section_id": 8650, "quality": 0.8148148148148148, "length": 22}, "so_22614449_22614761_5": {"section_id": 8648, "quality": 0.7297297297297297, "length": 27}, "so_22614449_22614761_4": {"section_id": 8647, "quality": 0.7959183673469388, "length": 39}, "so_22614449_22614761_2": {"section_id": 8647, "quality": 0.75, "length": 18}}}, "22614759": {"ParentId": "22614449", "CommentCount": "5", "Body": "<p><code>main</code> is not predefined, but it <em>is</em> predeclared. In C, your code is linked against a small runtime library that constitutes the <em>true</em> starting point of your program. It is this small library that does a minimal amount of stack setup, then calls a function called <code>main</code>--it's hardcoded to do so. Your code runs because you supply the <em>definition</em> of <code>main</code>.</p>\n<p>The Java runtime does something similar: the bootstrap code in the virtual machine will invoke the <code>main</code> method of whatever class is provided as input.</p>\n", "OwnerUserId": "1126841", "PostTypeId": "2", "Id": "22614759", "Score": "4", "CreationDate": "2014-03-24T16:12:16.370", "LastActivityDate": "2014-03-24T16:12:16.370"}});