post_cb({"29293180": {"CommentCount": "1", "ViewCount": "41", "PostTypeId": "1", "LastEditorUserId": "963864", "CreationDate": "2015-03-27T04:13:57.220", "LastActivityDate": "2015-08-10T05:30:31.527", "Title": "concept involved here in function calling and argument passing", "AcceptedAnswerId": "29293313", "LastEditDate": "2015-08-10T05:30:31.527", "Id": "29293180", "Score": "0", "Body": "<p>while reading through vptr and vtable concept i got this wonderful piece of code, but i am not able to make out the concept involved here:</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nclass A\n{\n public:\n  virtual void foo(int x = 10)\n  {\n    cout &lt;&lt; \"base x : \" &lt;&lt; x &lt;&lt; \"\\n\";\n  }\n  virtual void bar()\n  {\n    cout &lt;&lt; \"base bar\\n\";\n  } \n};\nclass B : public A  \n   {\n public:\n   virtual void foo(int x = 20)\n   {\n     cout &lt;&lt; \"derived x : \" &lt;&lt; x &lt;&lt; \"\\n\";\n   }\n  private:\n   virtual void bar()\n   {\n     cout &lt;&lt; \"derived bar\\n\";\n   }\n\n   };\n   class C : public B\n   {\n\n   };\n   int main()\n   {\n     A x; x.foo(); // x.foo(10);\n     B y; y.foo(); // x.foo(20);\n     A *p(&amp;y);\n     p-&gt;foo(); \n   }\n</code></pre>\n<p>now the output i get here is:</p>\n<pre><code>base x : 10\nderived x : 20\nderived x : 10\n</code></pre>\n<p>how is it possible that even when derived x(i.e B::foo()) is being printed then the default argument is that of base function(i.e A::foo())?</p>\n", "Tags": "<c++><override><virtual-functions><late-binding><default-arguments>", "OwnerUserId": "4264158", "AnswerCount": "2"}, "29293313": {"ParentId": "29293180", "CommentCount": "1", "Body": "<p>C++ standard section 8.3.6 point 10 mentions that:</p>\n<blockquote>\n<p id=\"so_29293180_29293313_0\">A virtual function call (10.3) uses the default arguments in the\n  declaration of the virtual function determined by the static type of\n  the pointer or reference denoting the object. An overriding function\n  in a derived class does not acquire default arguments from the\n  function it overrides.</p>\n</blockquote>\n<p>In your example the evaluation of default argument is done on the basis of type of \"p\" which is \"A\". Hence the evaluation of default argument is done from the <strong>declaration</strong> of A, and the calling of function happens by the usual lookup in vptr table.</p>\n", "OwnerUserId": "1043773", "PostTypeId": "2", "Id": "29293313", "Score": "1", "CreationDate": "2015-03-27T04:27:30.383", "LastActivityDate": "2015-03-27T04:27:30.383"}, "bq_ids": {"n4140": {"so_29293180_29293313_0": {"section_id": 3261, "quality": 0.9629629629629629, "length": 26}}, "n3337": {"so_29293180_29293313_0": {"section_id": 3133, "quality": 0.9629629629629629, "length": 26}}, "n4659": {"so_29293180_29293313_0": {"section_id": 4019, "quality": 0.9629629629629629, "length": 26}}}, "29293284": {"ParentId": "29293180", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>It seems that the default parameters are resolved at compile time. See <a href=\"https://stackoverflow.com/questions/18105523/virtual-functions-default-parameters\">here</a> and <a href=\"https://stackoverflow.com/questions/25146354/virtual-function-default-parameters-and-overloading\">here</a>.</p>\n<blockquote>\n<p id=\"so_29293180_29293284_0\">The default values that are used will be those defined in the static (compile-time) type. So if you were to change the default parameters in an override, but you called the function through a base class pointer or reference, the default values in the base would be used.</p>\n</blockquote>\n", "OwnerUserId": "4505712", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:06:13.537", "Id": "29293284", "Score": "1", "CreationDate": "2015-03-27T04:24:09.023", "LastActivityDate": "2015-03-27T04:24:09.023"}});