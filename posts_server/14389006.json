post_cb({"bq_ids": {"n4140": {"so_14389006_14389118_0": {"length": 5, "quality": 0.7142857142857143, "section_id": 7043}}, "n3337": {"so_14389006_14389118_0": {"length": 5, "quality": 0.7142857142857143, "section_id": 6788}}, "n4659": {"so_14389006_14389118_0": {"length": 5, "quality": 0.7142857142857143, "section_id": 7709}}}, "14389066": {"Id": "14389066", "PostTypeId": "2", "Body": "<p>The scope is explained <a href=\"http://gcc.gnu.org/onlinedocs/gcc/Variable-Length.html\" rel=\"nofollow\">here</a>:</p>\n<blockquote>\n<p id=\"so_14389006_14389066_0\">Jumping or breaking out of the scope of the array name deallocates the\n  storage. Jumping into the scope is not allowed; you get an error\n  message for it.</p>\n</blockquote>\n<p>In your case the array is out of scope.</p>\n", "LastActivityDate": "2013-01-17T22:11:31.093", "CommentCount": "0", "CreationDate": "2013-01-17T22:11:31.093", "ParentId": "14389006", "Score": "2", "OwnerUserId": "906773"}, "14389118": {"Id": "14389118", "PostTypeId": "2", "Body": "<p>No, for two separate reasons:</p>\n<p><em>C++:</em> The code isn't valid C++. Arrays in C++ must have a compile-time constant size.</p>\n<p><em>C:</em> No, because the array only lives until the end of the block in which it was declared, and thus dereferencing <code>x</code> is undefined behaviour.</p>\n<p>From C11, 6.2.4/2:</p>\n<blockquote>\n<p id=\"so_14389006_14389118_0\">If an object is referred to outside of its lifetime, the behavior is undefined.</p>\n</blockquote>\n<p>And 6.2.4/7 says that the variable-length array lives from its declaration until the end of its enclosing scope:</p>\n<blockquote>\n<p id=\"so_14389006_14389118_1\">For such an object that does have a variable length array type, its lifetime extends from\n  the declaration of the object until execution of the program leaves the scope of the\n  declaration.</p>\n</blockquote>\n", "LastActivityDate": "2013-01-17T22:14:34.567", "CommentCount": "0", "CreationDate": "2013-01-17T22:14:34.567", "ParentId": "14389006", "Score": "2", "OwnerUserId": "596781"}, "14389006": {"ViewCount": "117", "Body": "<p>Is this always going to run as expected?</p>\n<pre><code>char *x;\nif (...) {\n    int len = dynamic_function();\n    char x2[len];\n\n    sprintf(x2, \"hello %s\", ...);\n\n    x = x2;\n}\n\nprintf(\"%s\\n\", x);\n// prints hello\n</code></pre>\n<p><br/>\nHow does the compiler (GCC in my case) implement variably sized arrays, in each of C and C++?</p>\n", "AcceptedAnswerId": "14389079", "Title": "Scope of variably sized array", "CreationDate": "2013-01-17T22:07:32.657", "Id": "14389006", "CommentCount": "5", "PostTypeId": "1", "LastActivityDate": "2013-01-17T22:16:33.470", "Score": "1", "OwnerUserId": "750875", "Tags": "<c++><c><gcc>", "AnswerCount": "3"}, "14389079": {"Id": "14389079", "PostTypeId": "2", "Body": "<p>No. <code>x2</code> is local to the <code>if</code> statement's scope and you access it outside of it using a pointer. This results in undefined behaviour.</p>\n<p>By the way, VLAs have been made optional in C11 and had never been part of C++. So it's better to avoid it.</p>\n", "LastEditorUserId": "277176", "LastActivityDate": "2013-01-17T22:16:33.470", "Score": "5", "CreationDate": "2013-01-17T22:12:23.643", "ParentId": "14389006", "CommentCount": "2", "OwnerUserId": "1275169", "LastEditDate": "2013-01-17T22:16:33.470"}});