post_cb({"bq_ids": {"n4140": {"so_47956757_47956898_3": {"length": 4, "quality": 1.0, "section_id": 3218}, "so_47956757_47956898_12": {"length": 5, "quality": 0.5555555555555556, "section_id": 5808}, "so_47956757_47956757_0": {"length": 4, "quality": 0.5714285714285714, "section_id": 5988}, "so_47956757_47956898_5": {"length": 7, "quality": 1.0, "section_id": 3219}, "so_47956757_47956898_1": {"length": 8, "quality": 1.0, "section_id": 5997}, "so_47956757_47956898_9": {"length": 9, "quality": 0.8181818181818182, "section_id": 5768}, "so_47956757_47956898_7": {"length": 10, "quality": 0.9090909090909091, "section_id": 6066}, "so_47956757_47956898_4": {"length": 8, "quality": 0.8888888888888888, "section_id": 3228}, "so_47956757_47956898_13": {"length": 20, "quality": 0.5128205128205128, "section_id": 7230}}, "n3337": {"so_47956757_47956898_9": {"length": 9, "quality": 0.8181818181818182, "section_id": 5541}, "so_47956757_47956898_3": {"length": 4, "quality": 1.0, "section_id": 3092}, "so_47956757_47956757_0": {"length": 4, "quality": 0.5714285714285714, "section_id": 6974}, "so_47956757_47956898_5": {"length": 7, "quality": 1.0, "section_id": 3093}, "so_47956757_47956898_1": {"length": 8, "quality": 1.0, "section_id": 5765}, "so_47956757_47956898_12": {"length": 5, "quality": 0.5555555555555556, "section_id": 5581}, "so_47956757_47956898_7": {"length": 10, "quality": 0.9090909090909091, "section_id": 5834}, "so_47956757_47956898_4": {"length": 8, "quality": 0.8888888888888888, "section_id": 3101}, "so_47956757_47956898_13": {"length": 20, "quality": 0.5128205128205128, "section_id": 6974}}, "n4659": {"so_47956757_47956898_9": {"length": 9, "quality": 0.8181818181818182, "section_id": 7225}, "so_47956757_47956898_3": {"length": 4, "quality": 1.0, "section_id": 3975}, "so_47956757_47956757_0": {"length": 4, "quality": 0.5714285714285714, "section_id": 7488}, "so_47956757_47956898_5": {"length": 7, "quality": 1.0, "section_id": 3976}, "so_47956757_47956898_1": {"length": 8, "quality": 1.0, "section_id": 7498}, "so_47956757_47956898_12": {"length": 8, "quality": 0.8888888888888888, "section_id": 8741}, "so_47956757_47956898_7": {"length": 10, "quality": 0.9090909090909091, "section_id": 7562}, "so_47956757_47956898_4": {"length": 7, "quality": 0.7777777777777778, "section_id": 3975}, "so_47956757_47956898_13": {"length": 35, "quality": 0.8974358974358975, "section_id": 8741}}}, "47956757": {"ViewCount": "65", "Body": "<p><a href=\"https://msdn.microsoft.com/en-us/library/f90831hc.aspx\" rel=\"nofollow noreferrer\">Microsoft</a> <code>lvalue</code> definition:</p>\n<blockquote>\n<p id=\"so_47956757_47956757_0\">An lvalue refers to an object that persists beyond a single\n  expression.</p>\n</blockquote>\n<p>A <a href=\"https://stackoverflow.com/a/34901787/806963\">second</a> definition:</p>\n<blockquote>\n<p id=\"so_47956757_47956757_1\">The expression E belongs to the <code>lvalue</code> category if and only if E\n  refers to an entity that ALREADY has had an identity (address, name or\n  alias) that makes it accessible outside of E.</p>\n</blockquote>\n<p>I wrote the following code:</p>\n<pre><code>class A{};\n\nconst A&amp; f1()\n{\n    return A();\n}\n\nconst int&amp; f2()\n{\n    return 1;\n}\n\nint main() {\n    cout&lt;&lt;&amp;f1()&lt;&lt;endl; // this prints everytime \"0\".\n    cout&lt;&lt;&amp;f2()&lt;&lt;endl; // this prints everytime \"0\".\n    return 0;\n}\n</code></pre>\n<ol>\n<li>Why <code>f1()</code> and <code>f2()</code> are <code>lvalue</code> expressions?</li>\n<li>Why an address of <code>lvalue reference</code> to <code>rvalue</code> is zero?</li>\n<li>Why are both definitions equivalent?</li>\n</ol>\n", "AcceptedAnswerId": "47956898", "Title": "Multiple lvalue equivalent definitions", "CreationDate": "2017-12-23T23:07:22.440", "LastActivityDate": "2017-12-24T00:29:05.500", "CommentCount": "4", "LastEditDate": "2017-12-23T23:46:57.383", "PostTypeId": "1", "LastEditorUserId": "8751754", "Id": "47956757", "Score": "1", "OwnerUserId": "806963", "Tags": "<c++>", "AnswerCount": "3"}, "47956797": {"Id": "47956797", "PostTypeId": "2", "Body": "<p>You end up returning a hanging reference because the returned reference has nothing to reference because <code>A()</code> is destructed at the end of the method. What you have is undefined behavior. The 0 is a placeholder for the fact that it is not referencing any memory location. The <code>f2()</code> function returns another temporary variable as reference. To be absolutely clear the memory location they return is 0 because the memory location they reference does not exit any longer.</p>\n<p>Hope this helps.</p>\n", "LastEditorUserId": "9005255", "LastActivityDate": "2017-12-24T00:10:31.600", "Score": "1", "CreationDate": "2017-12-23T23:15:36.627", "ParentId": "47956757", "CommentCount": "8", "OwnerUserId": "9005255", "LastEditDate": "2017-12-24T00:10:31.600"}, "47956898": {"Id": "47956898", "PostTypeId": "2", "Body": "<blockquote id=\"so_47956757_47956898_0\">\n<ol>\n<li>Why f1() and f2() are lvalue expressions?</li>\n</ol>\n</blockquote>\n<p>Because each are a function call to a function that returns an lvalue reference.</p>\n<p>Standard draft: <a href=\"http://eel.is/c++draft/expr.call\" rel=\"nofollow noreferrer\">[expr.call]</a></p>\n<blockquote>\n<p id=\"so_47956757_47956898_1\">11 A function call is an lvalue if the result type is an lvalue reference type or ...</p>\n</blockquote>\n<hr>\n<blockquote>\n<p id=\"so_47956757_47956898_2\">Why the &amp; character after the type name makes it an lvalue reference?</p>\n</blockquote>\n<p>Standard draft: <a href=\"http://eel.is/c++draft/dcl.ref\" rel=\"nofollow noreferrer\">[dcl.ref]</a></p>\n<blockquote>\n<p id=\"so_47956757_47956898_3\">1 In a declaration T D where D has either of the forms</p>\n<pre><code>&amp; attribute-specifier-seqopt D1\n&amp;&amp; attribute-specifier-seqopt D1\n</code></pre>\n<p id=\"so_47956757_47956898_4\">and the type of the identifier in the declaration T D1 is \u201cderived-declarator-type-list T\u201d, then the type of the identifier of D is \u201cderived-declarator-type-list reference to T\u201d ...</p>\n<p id=\"so_47956757_47956898_5\">2 A reference type that is declared using &amp; is called an lvalue reference ...</p>\n</blockquote>\n<hr>\n<blockquote id=\"so_47956757_47956898_6\">\n<ol start=\"2\">\n<li>Why an addres of lvalue reference to rvalue is zero?</li>\n</ol>\n</blockquote>\n<p>The behaviour is undefined.</p>\n<p>Standard draft: <a href=\"http://eel.is/c++draft/expr.unary.op\" rel=\"nofollow noreferrer\">[expr.unary.op]</a></p>\n<blockquote>\n<p id=\"so_47956757_47956898_7\">3 The result of the unary &amp; operator is ... the result has type \u201cpointer to T\u201d and is a prvalue that is the address of the designated object</p>\n</blockquote>\n<p>There is no designated object, and the standard doesn't define the behaviour of the addressof operator in that case.</p>\n<p>Standard draft: <a href=\"http://eel.is/c++draft/defns.undefined\" rel=\"nofollow noreferrer\">[defns.undefined]</a></p>\n<blockquote>\n<p id=\"so_47956757_47956898_8\">behavior for which this document imposes no requirements</p>\n<p id=\"so_47956757_47956898_9\">[\u2009Note: Undefined behavior may be expected when this document omits any explicit definition of behavior ...</p>\n</blockquote>\n<hr>\n<blockquote id=\"so_47956757_47956898_10\">\n<ol start=\"3\">\n<li>Why are both definitions equivalent?</li>\n</ol>\n</blockquote>\n<p>They aren't necessarily equivalent. One or both of them may be incorrect. Both appear to be descriptions of lvalue expressions, rather than definitions.</p>\n<p>The normative definition is in the C++ standard document.</p>\n<blockquote>\n<p id=\"so_47956757_47956898_11\">What is the definition of lvalue by the standard?</p>\n</blockquote>\n<p>Standard draft: <a href=\"http://eel.is/c++draft/basic.lval\" rel=\"nofollow noreferrer\">[basic.lval]</a></p>\n<blockquote id=\"so_47956757_47956898_12\">\n<ul>\n<li>(1.1) A glvalue is an expression whose evaluation determines the identity of an object, bit-field, or function.</li>\n</ul>\n</blockquote>\n<p>...</p>\n<blockquote>\n<ul>\n<li><p id=\"so_47956757_47956898_13\">(1.3) An xvalue is a glvalue that denotes an object or bit-field whose resources can be reused (usually because it is near the end of its lifetime).\n  [\u2009Example: Certain kinds of expressions involving rvalue references ([dcl.ref]) yield xvalues, such as a call to a function whose return type is an rvalue reference or a cast to an rvalue reference type.\n  \u2014\u2009end example\n  \u2009]</p></li>\n<li><p id=\"so_47956757_47956898_14\">(1.4) An lvalue is a glvalue that is not an xvalue.</p></li>\n</ul>\n</blockquote>\n<p>The <a href=\"http://eel.is/c++draft/expr\" rel=\"nofollow noreferrer\">[expr]</a> section defines each possible expression in the language, and if the expression is an lvalue, then that is stated. \"is an lvalue\" occurs 37 times, but this simple search is not necessarily exhaustive.</p>\n</hr></hr></hr>", "LastEditorUserId": "2079303", "LastActivityDate": "2017-12-24T00:29:05.500", "Score": "3", "CreationDate": "2017-12-23T23:31:43.683", "ParentId": "47956757", "CommentCount": "6", "OwnerUserId": "2079303", "LastEditDate": "2017-12-24T00:29:05.500"}, "47957002": {"Id": "47957002", "PostTypeId": "2", "Body": "<p>Declaring a function with lvalue reference return type means that that function call is an lvalue expression (nothing more and nothing less).</p>\n<p>The pages you linked to are both wrong in equating lvalue expressions with objects that \"already exist\" or \"persist\" or whatever.  In your code is an example of an lvalue expression that refers to an object that only existed during the function call.</p>\n<p>Using the result of the function call causes <em>undefined behaviour</em> because the behaviour of lvalue expressions is only defined for when they actually refer to an object. (Plus a few cases for referring to a potential object under construction or destruction, but that doesn't apply here, since the object's associated storage is already released by the time the calling code uses the result of the expression). </p>\n<p>Undefined behaviour means anything can happen, including (but not limited to) outputting a zero.</p>\n", "LastActivityDate": "2017-12-23T23:53:06.377", "CommentCount": "0", "CreationDate": "2017-12-23T23:53:06.377", "ParentId": "47956757", "Score": "1", "OwnerUserId": "1505939"}});