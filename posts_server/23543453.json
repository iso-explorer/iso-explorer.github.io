post_cb({"bq_ids": {"n4140": {"so_23543453_23544915_0": {"length": 28, "quality": 1.0, "section_id": 5522}}, "n3337": {"so_23543453_23544915_0": {"length": 28, "quality": 1.0, "section_id": 5308}}, "n4659": {"so_23543453_23544915_0": {"length": 28, "quality": 1.0, "section_id": 6957}}}, "23543453": {"ViewCount": "1524", "Body": "<p>Does anybody know how this</p>\n<pre><code>namespace my_ns {\n    void Load() {}\n}\nusing namespace my_ns;\nextern \"C\" __declspec(dllexport) void my_dll_function() {\n    ::my_ns::Load();\n}\n</code></pre>\n<p>differs from</p>\n<pre><code>namespace my_ns {\n    void Load() {}\n    extern \"C\" __declspec(dllexport) void my_dll_function() {\n        Load();\n    }\n}\n</code></pre>\n<p>or why one would consider the first one as a better solution than the second?<br>\nPlease notice the <code>dllexport</code> and <code>extern</code> 'keywords'!</br></p>\n", "AcceptedAnswerId": "23544915", "Title": "Namespace and identifier in c++ with dllexport", "CreationDate": "2014-05-08T13:39:52.027", "Id": "23543453", "CommentCount": "3", "PostTypeId": "1", "LastActivityDate": "2014-05-08T14:36:15.970", "Score": "2", "OwnerUserId": "2452585", "Tags": "<c++><namespaces><identifier><dllexport>", "AnswerCount": "1"}, "23544915": {"Id": "23544915", "PostTypeId": "2", "Body": "<p>There is no difference (from point of view of a caller inside another DLL), exported function name (because of <code>export \"C\"</code>) has no reference to namespace (you can check it with Dependency Walker).</p>\n<p>It means that it doesn't matter where <code>my_dll_function()</code> is placed, it'll be always imported in the namespace where it'll be declared (with <code>__declspec(dllimport)</code>). This has a somehow big implication: you can't declare more than one exported function (with <code>extern \"C\"</code>) with a given name (even if you - try to - declare them in different namespaces). From C++ specifications (\u00a7 7.5):</p>\n<blockquote>\n<p id=\"so_23543453_23544915_0\">...At most one function with a particular name can have C language linkage. Two declarations for a function with C language linkage with the same function name (ignoring the namespace names that qualify it) that appear in different namespace scopes refer to the same function...</p>\n</blockquote>\n<p><hr/>\n<sub>\nJust another side note: in your first example <code>using namespace my_ns</code> is useless because you call function using full namespace <code>::my_ns::Load()</code>.\n</sub></p>\n", "LastActivityDate": "2014-05-08T14:36:15.970", "CommentCount": "0", "CreationDate": "2014-05-08T14:36:15.970", "ParentId": "23543453", "Score": "2", "OwnerUserId": "1207195"}});