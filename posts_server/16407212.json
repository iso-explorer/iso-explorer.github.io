post_cb({"16407402": {"ParentId": "16407212", "CommentCount": "6", "Body": "<p>From my reading of C++2011 6.5.4, your code of:</p>\n<pre><code>bar b;\n\nfor(int b : b.nums)\n    std::cout &lt;&lt; b &lt;&lt; std::endl;\n</code></pre>\n<p>Should be converted to:</p>\n<pre><code>bar b;\n\n{\n   auto &amp;&amp; __range = b.nums;\n   for (auto __begin = __range.begin(), __end = __range.end(); __begin != __end; ++__begin ) {\n       int b = *__begin;\n       std::cout &lt;&lt; b &lt;&lt; std::endl;\n   }\n}\n</code></pre>\n<p>This to me means that <strong>clang</strong> is correct.</p>\n", "OwnerUserId": "47453", "PostTypeId": "2", "Id": "16407402", "Score": "11", "CreationDate": "2013-05-06T21:15:16.023", "LastActivityDate": "2013-05-06T21:15:16.023"}, "16407244": {"ParentId": "16407212", "PostTypeId": "2", "CommentCount": "6", "Body": "<p><strong>Clang is right</strong>. </p>\n<p>Paragraph 6.5.4/1 of the C++11 Standard defines the range-based <code>for</code> statement as follows:</p>\n<blockquote>\n<p id=\"so_16407212_16407244_0\">For a <em>range-based</em> for statement of the form</p>\n<pre><code>for ( for-range-declaration : expression ) statement\n</code></pre>\n<p id=\"so_16407212_16407244_1\">let <em>range-init</em> be equivalent to the expression surrounded by parentheses </p>\n<pre><code>( expression )\n</code></pre>\n<p id=\"so_16407212_16407244_2\">and for a <em>range-based</em> for statement of the form</p>\n<pre><code>for ( for-range-declaration : braced-init-list ) statement\n</code></pre>\n<p id=\"so_16407212_16407244_3\">let <em>range-init</em> be equivalent to the braced-init-list. In each case, a range-based for statement is equivalent\n  to</p>\n<pre><code>{\n    auto &amp;&amp; __range = range-init;\n    for ( auto __begin = begin-expr,\n          __end = end-expr;\n          __begin != __end;\n          ++__begin ) {\n        for-range-declaration = *__begin;\n        statement\n    }\n}\n</code></pre>\n</blockquote>\n<p>From the above, it is visible that variable <code>b</code>, which corresponds to the <code>for-range-declaration</code>, is declared inside a nested block statement, while the initializer <code>range-init</code> (which corresponds to <code>b.nums</code>) appears in the parent scope, where <code>b</code> should resolve to the object of type <code>bar</code>.</p>\n", "OwnerUserId": "1932150", "LastEditorUserId": "1932150", "LastEditDate": "2013-05-06T21:10:44.043", "Id": "16407244", "Score": "9", "CreationDate": "2013-05-06T21:04:35.513", "LastActivityDate": "2013-05-06T21:10:44.043"}, "32895338": {"ParentId": "16407212", "CommentCount": "1", "Body": "<p>For what it's worth, this bug has now been fixed on gcc trunk. :)</p>\n", "OwnerUserId": "1315421", "PostTypeId": "2", "Id": "32895338", "Score": "2", "CreationDate": "2015-10-01T19:25:35.157", "LastActivityDate": "2015-10-01T19:25:35.157"}, "bq_ids": {"n4140": {"so_16407212_16407244_3": {"section_id": 3906, "quality": 0.8888888888888888, "length": 8}, "so_16407212_16407244_1": {"section_id": 3906, "quality": 0.8333333333333334, "length": 5}}, "n3337": {"so_16407212_16407244_3": {"section_id": 3766, "quality": 0.8888888888888888, "length": 8}, "so_16407212_16407244_1": {"section_id": 3766, "quality": 0.8333333333333334, "length": 5}}, "n4659": {"so_16407212_16407244_1": {"section_id": 4792, "quality": 0.6666666666666666, "length": 4}}}, "16407212": {"CommentCount": "2", "CreationDate": "2013-05-06T21:02:08.133", "PostTypeId": "1", "AcceptedAnswerId": "16407402", "LastEditorUserId": "485561", "LastActivityDate": "2015-10-01T19:25:35.157", "LastEditDate": "2013-05-10T05:53:54.520", "ViewCount": "305", "FavoriteCount": "1", "Title": "Identifier with the same name in both expression and declaration of range-based for", "Id": "16407212", "Score": "16", "Body": "<p>Is it legal to declare a loop variable in a ranged-based for loop with the same name I use in the expression statement of the loop? I hope the example makes it clear.</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nstruct bar {\n    std::vector&lt;int&gt; nums;\n};\n\nint main()\n{\n    bar b;\n    b.nums = {1, 2, 3};\n\n    for(int b : b.nums)\n        std::cout &lt;&lt; b &lt;&lt; std::endl;   \n}\n</code></pre>\n<p>gcc 4.8 gives an error while clang 3.2 allows it.</p>\n", "Tags": "<c++><for-loop><c++11><scope>", "OwnerUserId": "893693", "AnswerCount": "3"}});