post_cb({"10193578": {"Id": "10193578", "PostTypeId": "2", "Body": "<p>From the C++11 viepoint a reference returned by a function is <em>not</em> a temporary:</p>\n<p><b>\n12.12.1 Temporaries of class type are created in various contexts: binding a reference to a          prvalue (8.5.3), returning\na prvalue (6.6.3), a conversion that creates a prvalue (4.1, 5.2.9, 5.2.11, 5.4), throwing an exception (15.1),\nentering a handler (15.3), and in some initializations (8.5).\n</b></p>\n<p>A function returning a reference dosn't return prvalue (\"pure rvalue\"), so it's not a temporary.\nThis seems quite natural: compiler can't manage lifetime of referenced objects, it is programmer's responsibility </p>\n<p>Thus, the compiler doesn't provide any liftime guarantes for const int&amp; reference since it is not bounded to temporary.</p>\n", "LastActivityDate": "2012-04-17T14:51:43.553", "CommentCount": "1", "CreationDate": "2012-04-17T14:51:43.553", "ParentId": "10190677", "Score": "2", "OwnerUserId": "396672"}, "10190677": {"ViewCount": "1002", "Body": "<p>I have this code (simplified version):</p>\n<pre><code>const int&amp; function( const int&amp; param )\n{\n     return param;\n}\n\nconst int&amp; reference = function( 10 );\n//use reference\n</code></pre>\n<p>I can't quite decide to which extent C++03 Standard $12.2/5 wording</p>\n<blockquote>\n<p id=\"so_10190677_10190677_0\">The temporary to which the reference is bound or the temporary that is the complete object to a subobject of which the temporary is bound persists for the lifetime of the reference...</p>\n</blockquote>\n<p>is applicable here.</p>\n<p>Is <code>reference</code> variable in the code above valid or dangling? Will the reference in the calling code prolong the lifetime of the temporary passed as the parameter?</p>\n", "AcceptedAnswerId": "10194011", "Title": "Will a reference bound to a function parameter prolong the lifetime of that temporary?", "CreationDate": "2012-04-17T11:51:21.463", "Id": "10190677", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2012-04-17T13:01:49.980", "LastEditorUserId": "57428", "LastActivityDate": "2012-04-17T15:31:38.747", "Score": "9", "OwnerUserId": "57428", "Tags": "<c++><reference><object-lifetime><function-parameter>", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_10190677_10190677_0": {"length": 11, "quality": 0.8461538461538461, "section_id": 382}, "so_10190677_10194011_0": {"length": 13, "quality": 0.9285714285714286, "section_id": 382}, "so_10190677_10194011_2": {"length": 12, "quality": 0.9230769230769231, "section_id": 382}}, "n3337": {"so_10190677_10190677_0": {"length": 11, "quality": 0.8461538461538461, "section_id": 373}, "so_10190677_10194011_0": {"length": 13, "quality": 0.9285714285714286, "section_id": 373}, "so_10190677_10194011_2": {"length": 12, "quality": 0.9230769230769231, "section_id": 373}}, "n4659": {"so_10190677_10190677_0": {"length": 11, "quality": 0.8461538461538461, "section_id": 397}, "so_10190677_10194011_0": {"length": 13, "quality": 0.9285714285714286, "section_id": 397}, "so_10190677_10194011_2": {"length": 12, "quality": 0.9230769230769231, "section_id": 397}}}, "10190761": {"Id": "10190761", "PostTypeId": "2", "Body": "<p>It is this part that is important</p>\n<blockquote>\n<p id=\"so_10190677_10190761_0\">The temporary to which the reference is bound </p>\n</blockquote>\n<p>In this case the parameter is bound to the temporary, and will be destroyed after the call. </p>\n<p>You cannot extend the lifetime further by passing the reference on.</p>\n", "LastActivityDate": "2012-04-17T11:55:56.903", "CommentCount": "8", "CreationDate": "2012-04-17T11:55:56.903", "ParentId": "10190677", "Score": "1", "OwnerUserId": "597607"}, "10194011": {"Id": "10194011", "PostTypeId": "2", "Body": "<p>A <em>full-expression</em> is an expression that is not a subexpression of another expression.  In this case, the full-expression containing the call <code>function( 10 )</code> is the assignment expression:</p>\n<pre><code>const int&amp; reference = function( 10 );\n</code></pre>\n<p>In order to call <code>function</code> with the argument <code>10</code>, a temporary const-reference object is created to the temporary integer object <code>10</code>. The lifetime of the temporary integer and the temporary const-reference extend through the assignment, so although the assignment expression is valid, attempting to use the integer referenced by <code>reference</code> is Undefined Behavior as <code>reference</code> no longer references a live object.</p>\n<p>The C++11 Standard, I think, clarifies the situation:</p>\n<blockquote>\n<p id=\"so_10190677_10194011_0\">The temporary to which the reference is bound or the temporary that is the complete object of a subobject to which the reference is bound persists for the lifetime of the reference except:</p>\n<p id=\"so_10190677_10194011_1\">...</p>\n<p id=\"so_10190677_10194011_2\">\u2014 A temporary bound to a reference parameter in a function call (5.2.2) persists until the completion of the full-expression containing the call.</p>\n</blockquote>\n<p><strong>EDIT:</strong> \"The temporary to which the reference is bound ... persists for the lifetime of the reference\". In this case, the lifetime of the reference ends at the end of the assignment expression, as does the lifetime of the temporary integer.</p>\n", "LastEditorUserId": "196844", "LastActivityDate": "2012-04-17T15:31:38.747", "Score": "9", "CreationDate": "2012-04-17T15:17:11.143", "ParentId": "10190677", "CommentCount": "0", "LastEditDate": "2012-04-17T15:31:38.747", "OwnerUserId": "196844"}, "10190757": {"Id": "10190757", "PostTypeId": "2", "Body": "<p>This will compile, but you will end up with a dangling reference. <code>param</code> is freed after <code>function</code> returns. </p>\n<ol>\n<li>function is called with a reference to the temporary, anonymous object</li>\n<li>function returns the reference</li>\n<li>now that function has returned the temporary param is released</li>\n<li>the reference is now dangling as the object was destroyed</li>\n</ol>\n<p>If you had made it non-const, then it wouldn't have compiled because you cannot pass a non-const reference to an anonymous object.</p>\n", "OwnerDisplayName": "user195488", "LastActivityDate": "2012-04-17T11:55:27.077", "Score": "2", "CreationDate": "2012-04-17T11:55:27.077", "ParentId": "10190677", "CommentCount": "1"}});