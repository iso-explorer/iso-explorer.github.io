post_cb({"39124246": {"CommentCount": "1", "ViewCount": "59", "PostTypeId": "1", "LastEditorUserId": "2877241", "CreationDate": "2016-08-24T13:08:38.603", "LastActivityDate": "2016-08-24T13:43:26.910", "Title": "In class initialization of constant member", "AcceptedAnswerId": "39124394", "LastEditDate": "2016-08-24T13:18:24.743", "Id": "39124246", "Score": "0", "Body": "<p>Why does the compiler (clang) complain that the <code>mymy</code> is uninitialized, when I specifically have told it to be a constant value, holding 50. And why does it allow me to change it to be 23 ... when I still have told him to be constant?</p>\n<pre><code>#include &lt;iostream&gt;\n\nclass Base\n{\npublic:\n\n    Base(int y) : my(y) {std::cout &lt;&lt; \"Base:\" &lt;&lt; my &lt;&lt; std::endl;}\nprivate:\n    int my;\n};\n\nclass Derived : public Base\n{\npublic:\n    Derived() : Base(mymy), mymy(23) {std::cout &lt;&lt; \"Derived:\" &lt;&lt; mymy &lt;&lt; std::endl;}\n\n\nprivate:\n\n    const int mymy = 50;\n};\n\nint main()\n{\n    Derived a;\n}\n</code></pre>\n<p>Strangely, coliru compiles without a hick. <a href=\"http://coliru.stacked-crooked.com/a/63629c2d99bf6f43\" rel=\"nofollow\">http://coliru.stacked-crooked.com/a/63629c2d99bf6f43</a> (Yes, I know changing it to <code>static</code> will fix this problem)</p>\n", "Tags": "<c++><constructor><initialization><const>", "OwnerUserId": "186193", "AnswerCount": "2"}, "39124394": {"ParentId": "39124246", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The standard says that (\u00a712.6.2/10<sup>1</sup>, emphasis is mine):</p>\n<blockquote>\n<p id=\"so_39124246_39124394_0\">If a given non-static data member has both a default member initializer and a <em>mem-initializer</em>, the initialization\n  specified by the <em>mem-initializer</em> is performed, and <strong>the non-static data member\u2019s default member initializer is ignored</strong>. [ <em>Example:</em> Given</p>\n<pre><code>struct A {\n      int i = /* some integer expression with side effects */ ;\n      A(int arg) : i(arg) { }\n      // ...\n};\n</code></pre>\n<p id=\"so_39124246_39124394_1\">the <code>A(int)</code> constructor will simply initialize <code>i</code> to the value of <code>arg</code>, and the side effects in <code>i</code>\u2019s default member initializer will not take place. <em>\u2014end example</em>]</p>\n</blockquote>\n<p><a href=\"http://coliru.stacked-crooked.com/\" rel=\"nofollow\">http://coliru.stacked-crooked.com/</a> use g++ which do not produce a warning but the result is the same: <code>Base</code> is not initialized with <code>50</code> or <code>23</code> but with <code>0</code>. You can get weirder behavior by adding another attribute before <code>mymy</code>:</p>\n<pre><code>class Derived: public Base {\n  public:\n  Derived() : Base(mymy), mymymy(mymy), mymy(23) {\n      std::cout &lt;&lt; \"Derived:\" &lt;&lt; mymy &lt;&lt; std::endl;\n      std::cout &lt;&lt; \"Derived:\" &lt;&lt; mymymy &lt;&lt; std::endl;\n\n  }\n  int mymymy;\n  const int mymy = 50;\n};\n</code></pre>\n<p>Output from <a href=\"http://coliru.stacked-crooked.com/a/22a53c09cf16a8cb\" rel=\"nofollow\">coliru</a>:</p>\n<pre><code>Base:4197208\nDerived:23\nDerived:4197208\nMain:23\n</code></pre>\n<p>But if you add an attribute after <code>mymy</code>:</p>\n<pre><code>class Derived : public Base {\n  public:\n  Derived() : Base(mymy), mymy(23) {\n      std::cout &lt;&lt; \"Derived:\" &lt;&lt; mymy &lt;&lt; std::endl;\n      std::cout &lt;&lt; \"Derived:\" &lt;&lt; mymymy &lt;&lt; std::endl;\n\n  }\n  const int mymy = 50;\n  int mymymy= mymy;\n\n};\n</code></pre>\n<p>The value you provide in the member-initializer-list of the constructor will be used:</p>\n<pre><code>Base:0\nDerived:23\nDerived:23\nMain:23\n</code></pre>\n<hr>\n<p>Regarding the <code>const</code> qualification: You can always initialize <code>const</code> member in the member-list-initializer of your constructor (this is the only place where you can initialize them along with default member initializers). </p>\n<p>I don't know if there is a more explicit quote from the standard, but \u00a712.6.2/7<sup>1</sup> (the example is quite explicit though):</p>\n<blockquote>\n<p id=\"so_39124246_39124394_2\">The <em>expression-list</em> or <em>braced-init-list</em> in a <em>mem-initializer</em> is used to initialize the designated subobject (or, in the case of a delegating constructor, the complete class object) according to the initialization rules of 8.5 for direct-initialization.\n  [ <em>Example:</em></p>\n<pre><code>struct B1 { B1(int); /* ... */ };\nstruct B2 { B2(int); /* ... */ };\nstruct D : B1, B2 {\n    D(int);\n    B1 b;\n    const int c;\n};\nD::D(int a) : B2(a+1), B1(a+2), c(a+3), b(a+4)\n    { /* ... */ }\nD d(10);\n</code></pre>\n<p id=\"so_39124246_39124394_3\"><em>\u2014end example</em> ]</p>\n</blockquote>\n<hr>\n<p><sub><sup>1</sup> Latest C++17 standard draft (N4594).</sub></p>\n</hr></hr>", "OwnerUserId": "2666289", "LastEditorUserId": "2666289", "LastEditDate": "2016-08-24T13:43:26.910", "Id": "39124394", "Score": "4", "CreationDate": "2016-08-24T13:14:47.910", "LastActivityDate": "2016-08-24T13:43:26.910"}, "39124299": {"ParentId": "39124246", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>If you use ctor initializer then in class initialization is ignored.</p>\n<p>Take into account that the call of the base constructor with the argument <code>mymy</code></p>\n<pre><code>Derived() : Base(mymy), mymy(23) {std::cout &lt;&lt; \"Derived:\" &lt;&lt; mymy &lt;&lt; std::endl;}\n</code></pre>\n<p>is incorrect because the data members of the derived class were not yet initialized.</p>\n", "OwnerUserId": "2877241", "LastEditorUserId": "2877241", "LastEditDate": "2016-08-24T13:13:08.670", "Id": "39124299", "Score": "3", "CreationDate": "2016-08-24T13:10:40.543", "LastActivityDate": "2016-08-24T13:13:08.670"}, "bq_ids": {"n4140": {"so_39124246_39124394_1": {"section_id": 436, "quality": 0.7058823529411765, "length": 12}, "so_39124246_39124394_2": {"section_id": 434, "quality": 0.8888888888888888, "length": 16}, "so_39124246_39124394_0": {"section_id": 436, "quality": 0.6818181818181818, "length": 15}}, "n3337": {"so_39124246_39124394_1": {"section_id": 428, "quality": 0.7058823529411765, "length": 12}, "so_39124246_39124394_2": {"section_id": 426, "quality": 0.8888888888888888, "length": 16}, "so_39124246_39124394_0": {"section_id": 428, "quality": 0.6818181818181818, "length": 15}}, "n4659": {"so_39124246_39124394_1": {"section_id": 455, "quality": 0.8823529411764706, "length": 15}, "so_39124246_39124394_2": {"section_id": 452, "quality": 0.8888888888888888, "length": 16}, "so_39124246_39124394_0": {"section_id": 455, "quality": 0.9545454545454546, "length": 21}}}});