post_cb({"bq_ids": {"n4140": {"so_23891058_23891697_1": {"section_id": 5523, "quality": 0.9523809523809523, "length": 20}}, "n3337": {"so_23891058_23891697_1": {"section_id": 5309, "quality": 0.9523809523809523, "length": 20}}, "n4659": {"so_23891058_23891697_1": {"section_id": 6958, "quality": 0.9523809523809523, "length": 20}}}, "23891697": {"ParentId": "23891058", "PostTypeId": "2", "CommentCount": "5", "Body": "<blockquote>\n<p id=\"so_23891058_23891697_0\">Here's how int ID can and cannot be defined:</p>\n</blockquote>\n<p>Careful! <code>extern \"C\"</code> has different effects in different contexts.</p>\n<p>N3797 \u00a77.5/7:</p>\n<blockquote>\n<p id=\"so_23891058_23891697_1\">A declaration directly contained in a <em>linkage-specification</em> is <strong>treated\n  as if it contains the <code>extern</code> specifier (7.1.1) for the purpose of\n  determining the linkage of the declared name and whether it is a\n  definition</strong>. Such a declaration shall not specify a storage class.</p>\n<pre><code>extern \"C\" int i; // declaration\nextern \"C\" {\n    int i;           // definition\n}\n</code></pre>\n</blockquote>\n<p>So the second line in your snippet is just a declaration whilst your third line is also a definition. This changes what effect the <em>linkage-specification</em> has on the declarations - you can't give a name defined in a C++ translation unit C linkage. You have to make it a pure declaration.</p>\n", "OwnerUserId": "3647361", "LastEditorUserId": "3647361", "LastEditDate": "2014-05-27T15:45:57.660", "Id": "23891697", "Score": "1", "CreationDate": "2014-05-27T14:07:03.007", "LastActivityDate": "2014-05-27T15:45:57.660"}, "23891551": {"ParentId": "23891058", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The inner <code>extern</code> means what expected: \"the symbol is defined somewhere else, it has <em>external linkage</em>, don't allocate space for it in this unit (unless defined here as well)\".</p>\n<p>The outer <code>extern \"C\" { ... }</code> has maybe a bit misleading syntax, it only tells the compiler \"if you are creating names of any symbols with <em>external linkage</em> inside this block, use traditional C naming (<em>C language linkage</em>) instead of C++ name mangling (<em>C++ language linkage</em>) for them\". But it does not specify that all things inside the block are \"defined somewhere else\" (have <em>external linkage</em>) -- they are still declared with the default <em>internal linkage</em>. That's why you need the inner <code>extern</code> as well.</p>\n<p>The one-line variant <code>extern \"C\" &lt;variable declaration&gt;</code> is just a shorthand, as you probably want to define an external variable if you care about its cross-unit symbol name.</p>\n<p>(As a side-note, I would include <code>i.h</code> also in <code>i.cpp</code>, that way I wouldn't have to remember to mess with <code>extern \"C\"</code> any more in the implementation.)</p>\n", "OwnerUserId": "3543211", "LastEditorUserId": "3543211", "LastEditDate": "2014-05-27T14:11:10.117", "Id": "23891551", "Score": "3", "CreationDate": "2014-05-27T14:00:39.133", "LastActivityDate": "2014-05-27T14:11:10.117"}, "23892206": {"ParentId": "23891058", "CommentCount": "0", "Body": "<p>The problem is that <code>const</code> and <code>extern</code> are warring with each other.  <code>const</code> means (among other things), \"Make this definition internal, unless there's an explicit <code>extern</code> on it.\".  When the definition is in an <code>extern \"C\"</code> block, there's no <code>extern</code> <em>directly</em> on the definition, so the \"implicit internal\" from the <code>const</code> takes precedence.  The other definitions all have an <code>extern</code> directly on the definition, so it becomes external.</p>\n", "OwnerUserId": "16406", "PostTypeId": "2", "Id": "23892206", "Score": "2", "CreationDate": "2014-05-27T14:32:33.167", "LastActivityDate": "2014-05-27T14:32:33.167"}, "23891058": {"CommentCount": "2", "ViewCount": "503", "CreationDate": "2014-05-27T13:41:20.443", "LastActivityDate": "2014-05-27T15:45:57.660", "Title": "External linkage and \u00bbextern \"C\"\u00ab block", "PostTypeId": "1", "Id": "23891058", "Score": "5", "Body": "<p>I have an <code>int ID</code>, which I want to define in C++ and make available for C linkage (contrived case for the sake of simplicity):</p>\n<pre><code>/* i.h */\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n        extern int ID;\n#ifdef __cplusplus\n}\n#endif\n</code></pre>\n<p>Here's a C and a C++ program using the <code>int</code>:</p>\n<pre><code>/* m.cpp */\n#include \"i.h\"\n#include &lt;iostream&gt;\nint main() { std::cout &lt;&lt; ID &lt;&lt; std::endl; }\n\n/* m.c */\n#include \"i.h\"\n#include &lt;stdio.h&gt;\nint main() { printf(\"%d\\n\", ID); }\n</code></pre>\n<p>Now what I'm wondering is the syntax of <code>extern \"C\"</code> and/or <code>extern</code>. Here's how <code>int ID</code> can and cannot be defined:</p>\n<pre><code>/* i.cpp */\n//                     const int ID = 88;   // no C linkage, obviously, LNK2019/1120\n// extern \"C\"          const int ID = 88;   // provides C linkage\n// extern \"C\" {        const int ID = 88; } // no C linkage, surprisingly, LNK2019/1120\n// extern \"C\" { extern const int ID = 88; } // C linkage restored\n</code></pre>\n<p>Compiling:</p>\n<pre><code>cl /nologo /W4 m.cpp i.cpp /MD /EHsc\ncl /nologo /W4 m.c   i.cpp /MD\n</code></pre>\n<p>What I don't understand is the syntax when <code>extern \"C\"</code> is used with a <code>{block}</code>. I have to repeat the <code>extern</code>, whereas with the blockless form of <code>extern \"C\"</code> I do not. Is this just a syntax quirk or is there more to it?</p>\n<p>I stumbled upon this issue on page 98 of <em>Inside COM</em> by Dale Rogerson. There is a code listing with the nested <code>extern</code> and a comment intended to clarify (but which I don't understand):</p>\n<pre><code>#include &lt;objbase.h&gt;\nextern \"C\"{\n  extern const IID IID_IX = {0x32bb8320, 0x41b, 0x11cf, ...};\n  // The extern is required to allocate memory for C++ constants.\n}\n</code></pre>\n<p>Can anyone explain the internal <code>extern</code>?</p>\n", "Tags": "<c++><c>", "OwnerUserId": "269126", "AnswerCount": "3"}});