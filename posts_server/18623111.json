post_cb({"18623172": {"ParentId": "18623111", "CommentCount": "0", "Body": "<p>no Inheritance does not work, this is not like a virtual function.</p>\n", "OwnerUserId": "466464", "PostTypeId": "2", "Id": "18623172", "Score": "0", "CreationDate": "2013-09-04T20:27:50.377", "LastActivityDate": "2013-09-04T20:27:50.377"}, "18623111": {"CommentCount": "1", "ViewCount": "107", "CreationDate": "2013-09-04T20:23:24.920", "LastActivityDate": "2013-09-04T21:04:30.643", "Title": "C++ - LNK 2019 Error, Trying to Define a Subclass Static Function", "PostTypeId": "1", "Id": "18623111", "Score": "0", "Body": "<p>The call that generates the unresolved external symbol:</p>\n<pre><code>#include &lt;string.h&gt;\n#include \"GContext.h\"\n#include \"GBitmap.h\"\n#include \"GColor.h\"\n\nint main(int argc, char** argv) {\n    const int W = 100;\n    const int H = 100;\n    GContext* ctx = GContext::Create(W, H);\n</code></pre>\n<p>The abstract class method signature:</p>\n<pre><code>#ifndef GContext_DEFINED\n#define GContext_DEFINED\n\n#include \"GTypes.h\"\n\nclass GBitmap;\nclass GColor;\n\nclass GContext {\npublic:\n    GContext() {}\n    virtual ~GContext() {}\n\n\n    virtual void getBitmap(GBitmap*) const = 0;\n\n    virtual void clear(const GColor&amp;) = 0;\n\n\n    static GContext* Create(const GBitmap&amp;);\n\n    static GContext* Create(int width, int height);\n};\n\n#endif\n</code></pre>\n<p>And the Current Derived Class Implementation and Method Signature:</p>\n<pre><code>#include \"GColor.h\"\n#include \"GPixel.h\"\n#include \"GBitmap.h\"\n#include \"GContext.h\"\n#include \"GTypes.h\"\nclass myGContext : public GContext\n{\npublic:\n        myGContext() : GContext(){}\n        static const GBitmap* bitmap;\n\n        void getBitmap(GBitmap* bitmap) const\n        {\n\n        }\n\n        void clear(const GColor&amp; gcolor)\n        {\n        int length = sizeof( (GPixel)(bitmap-&gt;fPixels) ) / sizeof(GPixel);\n        for (int i = 0; i &lt; length; i++)\n        {\n            (bitmap-&gt;fPixels)[i]\n        }\n\n        }\n\n        static GContext* Create(const GBitmap&amp; gbitmap)\n        { \n        GContext::Create(gbitmap);\n        bitmap = &amp;gbitmap;\n        GContext* g = new myGContext();\n        return g;\n        }\n\n\n        static GContext* Create(int width, int height)\n        {\n        GContext::Create(width,height);\n        GContext* g = new myGContext();\n        return g;\n\n    }\n};\n</code></pre>\n<p>So I understand that I need to define both types of the function GContext::Create() to resolve the external symbol error, but I need to define them in my derived Class. Which I thought I was doing right, any ideas?</p>\n", "Tags": "<c++><function><static><subclass><lnk2019>", "OwnerUserId": "2748285", "AnswerCount": "3"}, "18623401": {"ParentId": "18623111", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>I think it is just because you static method is not defined in your base class. From <a href=\"http://msdn.microsoft.com/en-us/library/799kze2z.aspx\" rel=\"nofollow\">here</a> it is said that <em>LNK2019 can also occur when a static data member is declared but not defined.</em></p>\n<hr>\n<p>Also, be careful when you try to redefine static methods inside subclasses:</p>\n<p><strong>You cannot override a static method in a subclass</strong>, you can only hide it.</p>\n<p>And from the C++ standard:</p>\n<blockquote>\n<p id=\"so_18623111_18623401_0\"><strong>9.4.1 Static member functions [class.static.mfct]</strong></p>\n<p id=\"so_18623111_18623401_1\">2/ <strong>A <code>static</code> member function shall not be <code>virtual</code>. There shall not be a <code>static</code> and a non-static member function with the same name and the same parameter types</strong> (13.1). A <code>static</code> member function shall not be declared <code>const</code>, <code>volatile</code>, or <code>const volatile</code>.</p>\n</blockquote>\n<p><a href=\"http://ideone.com/aDIr1K\" rel=\"nofollow\">Example</a>:</p>\n<pre><code>#include &lt;iostream&gt;\n\nclass Foo\n{\npublic:\n  static void func() { std::cout &lt;&lt; \"Foo::func\" &lt;&lt; std::endl; }\n};\n\nclass Bar : public Foo\n{\npublic:\n  static void func() { std::cout &lt;&lt; \"Bar::func\" &lt;&lt; std::endl; }\n};\n\nint main(void)\n{\n  Foo::func();     // Works\n  Bar::func();     // Works\n\n  Foo foo;\n  Bar bar;\n\n  foo.func();        // Works\n  bar.func();        // Works\n  bar.Foo::func();   // Works\n\n  Foo* foobar = new Bar;\n\n  foobar-&gt;func();      // Not the result expected\n                       // Because no override.\n  return 0;\n}\n</code></pre>\n</hr>", "OwnerUserId": "1394283", "LastEditorUserId": "1394283", "LastEditDate": "2013-09-04T21:04:30.643", "Id": "18623401", "Score": "0", "CreationDate": "2013-09-04T20:42:30.457", "LastActivityDate": "2013-09-04T21:04:30.643"}, "bq_ids": {"n4140": {"so_18623111_18623401_1": {"section_id": 5905, "quality": 0.9565217391304348, "length": 22}}, "n3337": {"so_18623111_18623401_1": {"section_id": 5677, "quality": 0.9565217391304348, "length": 22}}, "n4659": {"so_18623111_18623401_1": {"section_id": 7387, "quality": 0.9565217391304348, "length": 22}}}, "18623371": {"ParentId": "18623111", "CommentCount": "0", "Body": "<p>I'm not exactly sure what you're trying to do but if you</p>\n<ul>\n<li>Need to have static functions</li>\n<li>Need both base and derived classes to have their own implementation</li>\n<li>derived needs access to the base class' functions</li>\n</ul>\n<p>this is all achievable:</p>\n<pre><code>#include &lt;iostream&gt;\n\nclass A {\npublic:\n    A() {}\n    static void f() { std::cout &lt;&lt; \"A f\" &lt;&lt; std::endl; }\n};\n\nclass B : public A {\npublic:\n    B() {}\n    static void f() { std::cout &lt;&lt; \"B f\" &lt;&lt; std::endl; }\n};\n\n\n\n\nint main(int argc, char* argv[]) {\n\n    A a;\n    B b;\n\n    a.f();\n    b.f();\n    b.A::f();\n    return 0;\n}\n</code></pre>\n<p>Output is</p>\n<pre><code>A f\nB f\nA f\n</code></pre>\n", "OwnerUserId": "2415237", "PostTypeId": "2", "Id": "18623371", "Score": "0", "CreationDate": "2013-09-04T20:40:43.670", "LastActivityDate": "2013-09-04T20:40:43.670"}});