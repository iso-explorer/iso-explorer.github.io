post_cb({"16994263": {"CommentCount": "5", "AcceptedAnswerId": "16994342", "PostTypeId": "1", "LastEditorUserId": "2410359", "CreationDate": "2013-06-07T23:15:26.197", "LastActivityDate": "2013-06-08T16:32:59.387", "LastEditDate": "2013-06-08T16:32:59.387", "ViewCount": "216", "FavoriteCount": "1", "Title": "Did older versions of C++ use the `int` operator of a class when evaluating the condition in an `if()` statement?", "Id": "16994263", "Score": "5", "Body": "<p>The modern versions of C++ attempt to use the <code>bool</code> operator of a class when evaluating the condition in an <code>if()</code> statement.  Other casting operators, such as <code>int</code> being use when no <code>bool</code> operator exists.  This is demonstrated below.</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass TwoInts {\n  public:\n    int a,b;\n    operator bool() { cout &lt;&lt; \"TwoInts to bool\" &lt;&lt; endl; return 0;}\n    operator int()  { cout &lt;&lt; \"TwoInts to int\"  &lt;&lt; endl; return 0;}\n};\n\nclass SixInts {\n  public:\n    int a[6];\n    operator int()  { cout &lt;&lt; \"SixInts to int\" &lt;&lt; endl; return 0;}\n};\n\nint main(void) {\n  TwoInts T;\n  SixInts S;\n  if (T) cout &lt;&lt; \"xxx\" &lt;&lt; endl;\n  if (S) cout &lt;&lt; \"xxx\" &lt;&lt; endl;\n  return 0;\n}\n</code></pre>\n<p>Running this code produces no surprises:</p>\n<pre><code>TwoInts to bool\nSixInts to int\n</code></pre>\n<p>Looking over some old C++ code, there appears to be a change that I would like to verify.<br>\n<strong>Did older versions of C++ use the <code>int</code> operator of a class when evaluating the condition in an <code>if()</code> statement?</strong>  What versions, if any, did that?  </br></p>\n<p>The suggested output then would have been</p>\n<pre><code>TwoInts to int\nSixInts to int\n</code></pre>\n<p>Some details as to why the question: Issues with converting an old big integer class <em>may</em> be due <code>int</code> vs. <code>bool</code> in an <code>if()</code>.  No longer have access to the old compiler, so can not test the old behavior.</p>\n<hr>\n<p>[Edit]<br>\nUsing the answers below and some more research:<br>\nAnswer: <strong>Yes</strong>, many pre ISO Standard C++ versions (mid 1980s -1998), that lacked a <code>bool</code>,  did use casts to <code>int</code> (or other numeric types).  Significant compiler variation existed - it was <em>pre-standard</em>.</br></br></p>\n<p>The first C++ ISO standard came out in 1998 (ISO/IEC 14882:1998 aka C++98).  It defined the <code>bool</code> type.  Thus ISO standard C++ has always used the <code>bool</code> cast in <code>if()</code>.</p>\n</hr>", "Tags": "<c++>", "OwnerUserId": "2410359", "AnswerCount": "2"}, "16994342": {"ParentId": "16994263", "CommentCount": "5", "Body": "<p>I can't directly answer the question for certain, but <a href=\"http://www.gotw.ca/gotw/026.htm\" rel=\"noreferrer\">Herb Sutter says</a> that there was no <code>bool</code> type in the pre-standard version of C++ published in 1990.</p>\n<p>As such, <code>if</code> cannot possibly have used <code>operator bool()</code> and it seems to me likely that it would have used <code>operator int()</code> if it worked at all. I don't have a copy of the 1990 C++ reference manual to confirm, though.</p>\n", "OwnerUserId": "13005", "PostTypeId": "2", "Id": "16994342", "Score": "6", "CreationDate": "2013-06-07T23:25:45.833", "LastActivityDate": "2013-06-07T23:25:45.833"}, "bq_ids": {"n4140": {"so_16994263_16994295_0": {"section_id": 44, "quality": 0.9259259259259259, "length": 25}, "so_16994263_16994295_1": {"section_id": 3888, "quality": 0.9696969696969697, "length": 32}}, "n3337": {"so_16994263_16994295_0": {"section_id": 41, "quality": 0.9259259259259259, "length": 25}, "so_16994263_16994295_1": {"section_id": 3748, "quality": 0.9696969696969697, "length": 32}}, "n4659": {"so_16994263_16994295_0": {"section_id": 45, "quality": 0.9259259259259259, "length": 25}, "so_16994263_16994295_1": {"section_id": 4772, "quality": 0.9696969696969697, "length": 32}}}, "16994295": {"ParentId": "16994263", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>Not in standard C++. Strictly speaking, in standard C++, the if statement attempts to convert the expression contained therein to <code>bool</code>, and then changes behavior based on that.</p>\n<p>ISO/IEC 14882:2003 4.12 [conv.bool]/1:</p>\n<blockquote>\n<p id=\"so_16994263_16994295_0\">An rvalue of arithmetic, enumeration, pointer, or pointer to member type can be converted to an rvalue of type bool. A zero value, null pointer value, or null member pointer value is converted to false; any other value is converted to true.</p>\n</blockquote>\n<p>6.4.1 [stmt.if]/1:</p>\n<blockquote>\n<p id=\"so_16994263_16994295_1\">If the condition (6.4) yields true the first substatement is executed. If the else part of the selection statement is present and the condition yields false, the second substatement is executed. In the second form of if statement (the one including else), if the first substatement is also an if statement then that inner if statement shall contain an else part.76)</p>\n</blockquote>\n<p>Note the explicit reference to \"true\" and \"false\", which are boolean concepts.</p>\n", "OwnerUserId": "82320", "LastEditorUserId": "82320", "LastEditDate": "2013-06-07T23:28:51.253", "Id": "16994295", "Score": "4", "CreationDate": "2013-06-07T23:20:17.323", "LastActivityDate": "2013-06-07T23:28:51.253"}});