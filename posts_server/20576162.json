post_cb({"20576217": {"ParentId": "20576162", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>When initialized with a list <em>smaller than the array</em>, only the specified elements are initialized as you expected; the rest are initialized to 0.</p>\n<p>To initialize all values, use a loop, or <a href=\"http://www.cplusplus.com/reference/algorithm/fill_n/\" rel=\"nofollow noreferrer\"><code>std::fill_n</code></a>, as shown <a href=\"https://stackoverflow.com/a/1065800/2231440\">here</a>.</p>\n<pre><code>std::fill_n(my_array, 5, 10); // array name, size, value\n</code></pre>\n<p>Internally, <code>std::fill_n</code> is equivalent to a loop. From the first link:</p>\n<pre><code>template &lt;class OutputIterator, class Size, class T&gt;\n    OutputIterator fill_n (OutputIterator first, Size n, const T&amp; val)\n{\n    while (n&gt;0) {\n        *first = val;\n        ++first; --n;\n    }\n    return first;     // since C++11\n}\n</code></pre>\n", "OwnerUserId": "2231440", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:11:33.653", "Id": "20576217", "Score": "4", "CreationDate": "2013-12-13T21:21:59.453", "LastActivityDate": "2013-12-13T21:31:52.647"}, "20576364": {"ParentId": "20576162", "CommentCount": "3", "Body": "<p>The C++03 (assuming if you have an older version of GCC on an Ubuntu system) standard says:</p>\n<p>8.5.1/7</p>\n<blockquote>\n<p id=\"so_20576162_20576364_0\">If there are fewer initializers in the list than there are members\n  in the aggregate, then each member not explicitly initialized shall be\n  value-initialized (8.5).</p>\n</blockquote>\n<p>And an array is an aggregate:</p>\n<p>8.5.1/1</p>\n<blockquote>\n<p id=\"so_20576162_20576364_1\">An aggregate is an <b>array</b> or a class (clause 9) with no user-declared\n  constructors (12.1), no private or protected non-static data members\n  (clause 11), no base classes (clause 10), and no virtual functions\n  (10.3).</p>\n</blockquote>\n<p>As to what value-initialized means:</p>\n<blockquote>\n<p id=\"so_20576162_20576364_2\">To value-initialize an object of type T means:</p>\n<p id=\"so_20576162_20576364_3\">\u2014 if T is a class type (clause 9) with a user-declared constructor (12.1), then the default constructor for T is called (and the initialization is ill-formed if T has no accessible default constructor);</p>\n<p id=\"so_20576162_20576364_4\"><b>... and skipping everything an int is not ...</b></p>\n<p id=\"so_20576162_20576364_5\">\u2014  otherwise, the object is <b>zero-initialized</b></p>\n</blockquote>\n<p>Which is what happens for a variable of type <code>int</code>.</p>\n", "Id": "20576364", "PostTypeId": "2", "OwnerDisplayName": "user1508519", "Score": "6", "CreationDate": "2013-12-13T21:31:46.113", "LastActivityDate": "2013-12-13T21:31:46.113"}, "20576194": {"ParentId": "20576162", "CommentCount": "5", "Body": "<p>What you observe is correct: the remaining items of the array are initialized to 0, according to the standard.</p>\n", "OwnerUserId": "2030311", "PostTypeId": "2", "Id": "20576194", "Score": "7", "CreationDate": "2013-12-13T21:19:52.907", "LastActivityDate": "2013-12-13T21:19:52.907"}, "bq_ids": {"n4140": {"so_20576162_20576364_1": {"section_id": 3298, "quality": 0.631578947368421, "length": 12}, "so_20576162_20576364_0": {"section_id": 3304, "quality": 0.8571428571428571, "length": 12}, "so_20576162_20576364_3": {"section_id": 3286, "quality": 0.6, "length": 9}, "so_20576162_20576364_2": {"section_id": 3287, "quality": 1.0, "length": 4}}, "n3337": {"so_20576162_20576364_1": {"section_id": 3168, "quality": 0.631578947368421, "length": 12}, "so_20576162_20576364_0": {"section_id": 3174, "quality": 0.8571428571428571, "length": 12}, "so_20576162_20576364_3": {"section_id": 3157, "quality": 0.8, "length": 12}, "so_20576162_20576364_2": {"section_id": 3157, "quality": 1.0, "length": 4}}, "n4659": {"so_20576162_20576364_0": {"section_id": 4070, "quality": 0.7142857142857143, "length": 10}, "so_20576162_20576364_3": {"section_id": 384, "quality": 0.5333333333333333, "length": 8}}}, "20576162": {"CommentCount": "6", "ViewCount": "1577", "CreationDate": "2013-12-13T21:17:24.250", "LastActivityDate": "2013-12-13T21:32:04.927", "Title": "Array doesn't initialize with a curly braces in c++", "AcceptedAnswerId": "20576194", "PostTypeId": "1", "Id": "20576162", "Score": "1", "Body": "<p>I'm learning c++ and I've encountered the following strange thing:</p>\n<p>If I initialize array like the book says</p>\n<pre><code>int my_array[5] = {10}\n</code></pre>\n<p>every array field is still initialized to zero, when it should be ten.</p>\n<p>If I initialize it in a loop, it works as intended</p>\n<p>What is happening? I'm using Ubuntu and compiling with g++</p>\n", "Tags": "<c++><arrays>", "OwnerUserId": "877579", "AnswerCount": "3"}});