post_cb({"bq_ids": {"n4140": {"so_48753064_48755986_1": {"length": 13, "quality": 0.7222222222222222, "section_id": 5791}, "so_48753064_48755986_0": {"length": 7, "quality": 0.5384615384615384, "section_id": 95}, "so_48753064_48755986_2": {"length": 5, "quality": 1.0, "section_id": 87}}, "n3337": {"so_48753064_48755986_1": {"length": 13, "quality": 0.7222222222222222, "section_id": 5564}, "so_48753064_48755986_0": {"length": 7, "quality": 0.5384615384615384, "section_id": 86}, "so_48753064_48755986_2": {"length": 5, "quality": 1.0, "section_id": 82}}, "n4659": {"so_48753064_48755986_1": {"length": 13, "quality": 0.7222222222222222, "section_id": 7248}, "so_48753064_48755986_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 90}}}, "48753860": {"Id": "48753860", "PostTypeId": "2", "Body": "<p>See <a href=\"http://en.cppreference.com/w/cpp/language/template_parameters#Template_non-type_arguments\" rel=\"nofollow noreferrer\">cppreference.com - Template non-type arguments</a></p>\n<blockquote>\n<ul>\n<li>For pointers to objects, the template arguments have to designate the address of an object with static storage duration and a linkage (either internal or external), or a constant expression that evaluates to the appropriate null pointer or std::nullptr_t value.</li>\n</ul>\n<p id=\"so_48753064_48753860_0\">...</p>\n<p id=\"so_48753064_48753860_1\">The only exceptions are that non-type template parameters of reference and pointer type cannot refer to/be the address of</p>\n<ul>\n<li>a subobject (including non-static class member, base subobject, or array element);</li>\n<li>a temporary object (including one created during reference initialization);</li>\n</ul>\n</blockquote>\n<p>So the address of an array element is not allowed.</p>\n", "LastActivityDate": "2018-02-12T19:14:58.987", "Score": "3", "CreationDate": "2018-02-12T19:14:58.987", "ParentId": "48753064", "CommentCount": "1", "OwnerUserId": "1741542"}, "48753064": {"ViewCount": "114", "Body": "<p>Why a template function with a template parameter pack of pointers cannot be instantiated with offsets of the same pointer?</p>\n<p>I mean: given this short code why must I comment out the last two lines?</p>\n<pre><code>template &lt;int * ... pt&gt; void f() {}\n\nint n[] = {1, 2, 3};\nint m = n[1];\n\nint main()\n{\n    f&lt;n&gt;();  // this is accepted\n    f&lt;n, &amp;m&gt;();  // this is accepted too\n    //f&lt;n, n+1&gt;(); // this is not.\n    //f&lt;n, &amp;n[1]&gt;(); // this isn't accepted neither\n}\n</code></pre>\n<p>Doesn't <code>n+1</code> represent the same address as <code>&amp;m</code> ? Or there is a difference in the linkage? Or what else? </p>\n", "Title": "template pointer parameter pack", "CreationDate": "2018-02-12T18:23:31.693", "LastActivityDate": "2018-02-12T21:42:57.200", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2018-02-12T20:42:20.800", "LastEditorUserId": "921070", "Id": "48753064", "Score": "6", "OwnerUserId": "4278083", "Tags": "<c++><templates><language-lawyer><variadic-templates>", "AnswerCount": "2"}, "48755986": {"Id": "48755986", "PostTypeId": "2", "Body": "<p>In C++17, from <a href=\"http://eel.is/c++draft/temp.arg.nontype#2\" rel=\"nofollow noreferrer\">[temp.arg.nontype]</a>:</p>\n<blockquote>\n<p id=\"so_48753064_48755986_0\">For a non-type template-parameter of reference or pointer type, the value of the constant expression shall not refer to (or for a pointer type, shall not be the address of):  </p>\n<ul>\n<li>a subobject, </li>\n<li>[...]</li>\n</ul>\n</blockquote>\n<p>Where a subobject is, from <a href=\"http://eel.is/c++draft/intro.object#def:subobject\" rel=\"nofollow noreferrer\">[intro.object]</a>:</p>\n<blockquote>\n<p id=\"so_48753064_48755986_1\">Objects can contain other objects, called subobjects. A subobject can be a member subobject ([class.mem]), a base class subobject ([class.derived]), or an array element. </p>\n</blockquote>\n<p>Using <code>&amp;m</code> as a non-type template argument is fine - it points to an object. That object happens to be initialized from <code>n[1]</code>, but that doesn't matter. </p>\n<p>On the other hand, <code>n+1</code> and <code>&amp;n[1]</code> both point to an element of the array <code>n</code>, which is to say they both point to a subobject of <code>n</code>, and hence this is not allowed. <code>n+1</code> and <code>&amp;m</code> are not related. </p>\n<hr/>\n<p>In <a href=\"https://timsong-cpp.github.io/cppwp/n3337/temp.arg.nontype#1.3\" rel=\"nofollow noreferrer\">C++11</a> and <a href=\"https://timsong-cpp.github.io/cppwp/n4140/temp.arg.nontype#1.3\" rel=\"nofollow noreferrer\">C++14</a>, the wording was <em>inclusive</em> rather than <em>exclusive</em>, but the conclusion is the same:</p>\n<blockquote>\n<p id=\"so_48753064_48755986_2\">A <em>template-argument</em> for a non-type, non-template <em>template-parameter</em> shall be one of:</p>\n<ul>\n<li>[...]</li>\n<li>a constant expression ([expr.const]) that designates the address of a <strong>complete object</strong> with static storage duration and external or internal linkage or a function with external or internal linkage, including function templates and function template-ids but excluding non-static class members, expressed (ignoring parentheses) as [...]</li>\n<li>[...]</li>\n</ul>\n</blockquote>\n<p>A pointer to <code>m</code> is allowed, a pointer to <code>n[1]</code> is not. </p>\n", "LastActivityDate": "2018-02-12T21:42:57.200", "Score": "2", "CreationDate": "2018-02-12T21:42:57.200", "ParentId": "48753064", "CommentCount": "0", "OwnerUserId": "2069064"}});