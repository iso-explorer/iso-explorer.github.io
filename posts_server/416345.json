post_cb({"416345": {"CommentCount": "8", "AcceptedAnswerId": "416354", "PostTypeId": "1", "LastEditorUserId": "1538531", "CreationDate": "2009-01-06T12:34:40.447", "LastActivityDate": "2017-01-18T21:13:24.830", "AnswerCount": "6", "LastEditDate": "2012-09-13T16:37:53.883", "ViewCount": "13150", "FavoriteCount": "17", "Title": "is f(void) deprecated in modern C and C++", "Id": "416345", "Score": "63", "Body": "<p>I'm currently refactoring/tidying up some old C code used in a C++ project, and regularly see functions such as:</p>\n<pre><code>int f(void)\n</code></pre>\n<p>which I would tend to write as:</p>\n<pre><code>int f()\n</code></pre>\n<p>Is there any reason not to replace (void) with () throughout the codebase in order to improve consistency, or is there a subtle difference between the two that I am unaware of?  More specifically, if a virtual member function in C++ is described as:</p>\n<pre><code>virtual int f(void)\n</code></pre>\n<p>and a derived class includes a member function:</p>\n<pre><code>int f()\n</code></pre>\n<p>is this a valid override?  Additionally, am I likely to encounter any linker problems based on almost identical signatures?</p>\n", "Tags": "<c++><c><refactoring><void>", "OwnerUserId": "22564", "OwnerDisplayName": "smacl"}, "bq_ids": {"n4140": {"so_416345_36835586_2": {"section_id": 3240, "quality": 0.5555555555555556, "length": 10}}, "n3337": {"so_416345_36835586_2": {"section_id": 3113, "quality": 0.5555555555555556, "length": 10}}, "n4659": {"so_416345_36835586_2": {"section_id": 3996, "quality": 0.5555555555555556, "length": 10}}}, "416354": {"CommentCount": "6", "CreationDate": "2009-01-06T12:37:52.813", "LastEditorUserId": "96780", "LastActivityDate": "2013-08-27T08:47:07.853", "ParentId": "416345", "LastEditDate": "2013-08-27T08:47:07.853", "OwnerDisplayName": "Chris Young", "PostTypeId": "2", "Id": "416354", "Score": "91", "Body": "<p>In C, the declaration <code>int f(void)</code> means a function returning int that takes no parameters. The declaration <code>int f()</code> means a function returning int that takes any number of parameters. Thus, if you have a function that takes no parameters in C, the former is the correct prototype.</p>\n<p>In C++, I believe <code>int f(void)</code> is deprecated, and <code>int f()</code> is preferred, as it specifically means a function that takes no parameters.</p>\n", "OwnerUserId": "9417"}, "597446": {"CommentCount": "0", "CreationDate": "2009-02-28T03:25:20.840", "LastEditorUserId": "69283", "LastActivityDate": "2009-03-01T12:44:53.233", "ParentId": "416345", "PostTypeId": "2", "LastEditorDisplayName": "Dan Olson", "LastEditDate": "2009-03-01T12:44:53.233", "Id": "597446", "Score": "17", "Body": "<p>The answers above are quite correct, but I'm linking to David Tribble's excellent page  as it gives a <a href=\"http://david.tribble.com/text/cdiffs.htm#C99-empty-parm\" rel=\"noreferrer\">great explanation</a> on this and many other issues.</p>\n<p>The highlights:</p>\n<blockquote>\n<p id=\"so_416345_597446_0\">C distinguishes between a function\n  declared with an empty parameter list\n  and a function declared with a\n  parameter list consisting of only\n  void. The former is an unprototyped\n  function taking an unspecified number\n  of arguments, while the latter is a\n  prototyped function taking no\n  arguments.</p>\n<p id=\"so_416345_597446_1\">C++, on the other hand, makes no\n  distinction between the two\n  declarations and considers them both\n  to mean a function taking no\n  arguments.</p>\n<p id=\"so_416345_597446_2\">For code that is intended to be\n  compiled as either C or C++, the best\n  solution to this problem is to always\n  declare functions taking no parameters\n  with an explicit void prototype.</p>\n<p id=\"so_416345_597446_3\">Empty function prototypes are a\n  deprecated feature in C99 (as they\n  were in C89).</p>\n</blockquote>\n<p>Edit: After looking at the standard, it's perhaps worth noting that the func(void) syntax is <em>not</em> deprecated in C++, but it's commonly considered more of a C-style idiom.  I think most C++ programmers I've run across prefer the empty parameter list.</p>\n<p>Edit 2: Adding a quote from the C++ standard, section 8.3.5, paragraph 2:</p>\n<p>\"If the parameter-declaration-clause is empty, the function takes no arguments. The parameter list (void) is equivalent to the empty parameter list. Except for this special case, void shall not be a parameter type (though types derived from void, such as void*, can).\"</p>\n<p>There's no mention that either form is deprecated.  Thanks again to Mr. Tribble's excellent website for pointing me to the correct section of the standard.</p>\n", "OwnerUserId": "69283", "OwnerDisplayName": "Dan Olson"}, "36835586": {"ParentId": "416345", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2016-04-25T08:36:56.697", "Score": "1", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T11:46:37.490", "Id": "36835586", "OwnerUserId": "895245", "Body": "<p><strong><a href=\"http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf\" rel=\"nofollow noreferrer\">C11 N1570 standard draft</a></strong></p>\n<p><code>void f()</code> is deprecated, <code>void f(void)</code> recommended:</p>\n<p><em>6.11.6 Function declarators</em>:</p>\n<blockquote>\n<p id=\"so_416345_36835586_0\">1\n  The use of function declarators with empty parentheses (not prototype-format parameter\n  type declarators) is an obsolescent feature.</p>\n</blockquote>\n<p><em>Introduction</em>:</p>\n<blockquote>\n<p id=\"so_416345_36835586_1\">2 Certain features are obsolescent, which means that they may be considered for\n  withdrawal in future revisions of this International Standard. They are retained because\n  of their widespread use, but their use in new implementations (for implementation\n  features) or new programs (for language [6.11] or library features [7.31]) is discouraged.</p>\n</blockquote>\n<p>Detailed discussion: <a href=\"https://stackoverflow.com/a/36292431/895245\">https://stackoverflow.com/a/36292431/895245</a></p>\n<p><a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf\" rel=\"nofollow noreferrer\"><strong>C++11 N3337 standard draft</strong></a></p>\n<p>Neither <code>void f(void)</code> nor <code>void f()</code> are deprecated.</p>\n<p><code>void f(void)</code> exists for compatibility with C. <em>Annex C \"Compatibility\" C.1.7 Clause 8: declarators</em>:</p>\n<blockquote>\n<p id=\"so_416345_36835586_2\">8.3.5 Change: In C ++ , a function declared with an empty parameter list takes no arguments. In C, an empty\n  parameter list means that the number and type of the function arguments are unknown.</p>\n</blockquote>\n<p>Since <code>void f()</code> is deprecated in C and <code>void f(void)</code> recommended, <code>void f(void)</code> will exist for as long as C++ wants to maintain compatibility.</p>\n<p><code>void f(void)</code> and <code>void f()</code> are the same in C++. So the longer <code>void f(void)</code> only makes sense if you care about writing code that compiles under both C and C++, which is likely not worth it.</p>\n<p>Detailed discussion: <a href=\"https://stackoverflow.com/a/36835303/895245\">https://stackoverflow.com/a/36835303/895245</a></p>\n", "LastActivityDate": "2016-04-25T11:16:53.663"}, "416392": {"ParentId": "416345", "CommentCount": "2", "Body": "<p>In C++, int f(void) is indeed a deprecated declaration which is 100% equivalent to int f(). It <em>is</em> the same signature. The <code>void</code>in this context is as significant as e.g. whitespace. That also means that they are subject to the One Definition Rule (they don't overload)  and Derived::f(void) overrides Base::f()</p>\n<p>Don't mess with stuff like f(const void), though. There's not a lot of consensus what that kind of weirdness means.</p>\n", "OwnerUserId": "15416", "Id": "416392", "PostTypeId": "2", "OwnerDisplayName": "MSalters", "Score": "-1", "CreationDate": "2009-01-06T12:50:58.060", "LastActivityDate": "2009-01-06T12:50:58.060"}, "41703955": {"ParentId": "416345", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2017-01-17T18:00:56.110", "Score": "2", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T11:46:37.490", "Id": "41703955", "OwnerUserId": "1526115", "Body": "<p>tl;dr: use <code>void</code>.</p>\n<p>Given the backward compatibility in C++, and the bit of ambiguity identified below, I assert that we go all the way back to KnR and ANSI C for a conclusive answer:</p>\n<pre><code>int getline(void);\nint copy(void)\n</code></pre>\n<blockquote>\n<p id=\"so_416345_41703955_0\">Since the specialized versions of getline and copy have no arguments,\n  logic would suggest that their prototypes at the beginning of the file\n  should be <code>getline()</code> and <code>copy()</code>. But for compatibility with\n  older C programs the standard takes an empty list as an old-style\n  declaration, and turns off all argument list checking; the word\n  <code>void</code> must be used for an explicitly empty list.\n  [Kernighan &amp; Richie, the C programming language, 1988, Pgs 32-33]</p>\n</blockquote>\n<p>and..</p>\n<blockquote>\n<p id=\"so_416345_41703955_1\">The special meaning of the empty argument list is intended to permit\n  older C programs to compile with new compilers. But it's a bad idea to\n  use it with new programs. If the function takes arguments, declare\n  them; if it takes no arguments, use void [ibid, Pg. 73]</p>\n</blockquote>\n<p>EDIT: Broke the rest into a separate discussion here:\n<a href=\"https://stackoverflow.com/questions/41704561/does-specifying-the-use-of-void-in-the-declaration-of-a-function-that-takes-no-a\">Does specifying the use of void in the declaration of a function that takes no arguments address The Most Vexing Parse?</a></p>\n", "LastActivityDate": "2017-01-18T21:13:24.830"}, "416371": {"CommentCount": "3", "CreationDate": "2009-01-06T12:43:15.220", "LastEditorUserId": "50773", "LastActivityDate": "2009-01-06T12:48:24.930", "ParentId": "416345", "PostTypeId": "2", "LastEditorDisplayName": "Zach Hirsch", "LastEditDate": "2009-01-06T12:48:24.930", "Id": "416371", "Score": "21", "Body": "<p>To add to Chris's answer, using <code>int f()</code> is bad practice in C, in my experience, since you lose the compiler's ability to compare the function's declaration to its definition, to ensure that it will be called correctly.</p>\n<p>For example, the following code is standards-compliant C:</p>\n<pre><code>#include &lt;stdio.h&gt;\nvoid foo();\nvoid bar(void) {\n    foo();\n}\nvoid foo(int a) {\n    printf(\"%d\\n\", a);\n}\n</code></pre>\n<p>But it results in undefined behavior, since <code>a</code> was not passed to <code>foo</code>.</p>\n<p>In C++, there are two versions of <code>foo</code>: one that takes no arguments and one that takes an <code>int</code>. So <code>bar</code> winds up calling the undefined version, which would result in a linker error (assuming there are no other definitions of <code>foo</code> anywhere).</p>\n", "OwnerUserId": "50773", "OwnerDisplayName": "Zach Hirsch"}});