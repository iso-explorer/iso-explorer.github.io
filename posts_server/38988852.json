post_cb({"38988852": {"CommentCount": "11", "ViewCount": "380", "PostTypeId": "1", "LastEditorUserId": "4523099", "CreationDate": "2016-08-17T05:40:35.383", "LastActivityDate": "2016-08-17T13:32:06.123", "Title": "casting to the same type", "AcceptedAnswerId": "38989036", "LastEditDate": "2016-08-17T05:55:24.163", "Id": "38988852", "Score": "8", "Body": "<p>I have this case:</p>\n<pre><code>using T = classA; //T could be classA and could be `classB` in other platforms.\nT a;\nauto x = static_cast&lt;classB&gt;(a);\n</code></pre>\n<p>In case that T is <code>classA</code> the casting is must. In case of T is <code>classB</code> the casting is redundant. </p>\n<p>By standard, would the second casting be dropped (no more executable code) since it is not necessary?</p>\n", "Tags": "<c++><c++11><static-cast>", "OwnerUserId": "4523099", "AnswerCount": "1"}, "38989036": {"ParentId": "38988852", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>From the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_38988852_38989036_0\"><strong>5.2.9 Static cast</strong></p>\n<p id=\"so_38988852_38989036_1\">1 The result of the expression <code>static_cast&lt;T&gt;(v)</code> is the result of converting the expression <code>v</code> to type <code>T</code>.</p>\n</blockquote>\n<p>When the type of <code>v</code> is the same as <code>T</code>, the conversion is simple when <code>T</code> is not a class. A decent compiler <em>should not</em> generate any executable code for such usages of <code>static_cast</code>.</p>\n", "OwnerUserId": "434551", "LastEditorUserId": "434551", "LastEditDate": "2016-08-17T13:32:06.123", "Id": "38989036", "Score": "3", "CreationDate": "2016-08-17T05:56:37.623", "LastActivityDate": "2016-08-17T13:32:06.123"}, "bq_ids": {"n4140": {"so_38988852_38989036_1": {"section_id": 6027, "quality": 0.875, "length": 7}}, "n3337": {"so_38988852_38989036_1": {"section_id": 5795, "quality": 0.875, "length": 7}}, "n4659": {"so_38988852_38989036_1": {"section_id": 7526, "quality": 0.875, "length": 7}}}});