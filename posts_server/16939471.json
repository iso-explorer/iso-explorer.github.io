post_cb({"16939798": {"Id": "16939798", "PostTypeId": "2", "Body": "<p>Actually, a program containing a narrowing conversion in a brace list initializer is <strong>ill-formed</strong>. I am not sure why the compiler just gives you a warning, but it definitely should issue an error here (FWIW, <a href=\"http://coliru.stacked-crooked.com/view?id=f4b28ee252709be69fa3e506e6646409-25dabfc2c190f5ef027f31d968947336\">Clang does that</a>).</p>\n<p>Also notice, that this is a narrowing (and therefore illegal) conversion as well:</p>\n<pre><code>int x { 1.0f }; // ERROR! Narrowing conversion required\n</code></pre>\n<p>Per paragraph 8.5.4/3 of the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_16939471_16939798_0\">List-initialization of an object or reference of type T is defined as follows:</p>\n<p id=\"so_16939471_16939798_1\">\u2014 If <code>T</code> is an aggregate, aggregate initialization is performed (8.5.1). [...]</p>\n<p id=\"so_16939471_16939798_2\">\u2014 Otherwise, if the initializer list has no elements [...]</p>\n<p id=\"so_16939471_16939798_3\">\u2014 Otherwise, if <code>T</code> is a specialization of <code>std::initializer_list&lt;E&gt;</code>, [...]</p>\n<p id=\"so_16939471_16939798_4\">\u2014 Otherwise, if <code>T</code> is a class type, constructors are considered. The applicable constructors are enumerated\n  and the best one is chosen through overload resolution (13.3, 13.3.1.7). <strong>If a narrowing conversion (see\n  below) is required to convert any of the arguments, the program is ill-formed</strong>. [...]</p>\n</blockquote>\n<p>To be more precise, the Standard only says that a \"diagnostic\" is required in this case, and a warning is a diagnostic, so the compiler's behavior is conforming - but I believe emitting an error would be a better behavior.</p>\n", "LastEditorUserId": "1932150", "LastActivityDate": "2013-06-05T12:38:39.397", "Score": "19", "CreationDate": "2013-06-05T12:18:47.937", "ParentId": "16939471", "CommentCount": "13", "OwnerUserId": "1932150", "LastEditDate": "2013-06-05T12:38:39.397"}, "16939471": {"ViewCount": "3002", "Body": "<pre><code>#include &lt;iostream&gt;\n\nstruct X {\n    X(std::initializer_list&lt;int&gt; list) { std::cout &lt;&lt; \"list\" &lt;&lt; std::endl; }\n    X(float f) { std::cout &lt;&lt; \"float\" &lt;&lt; std::endl; }\n};\n\nint main() {\n    int x { 1.0f };\n    X a(1);     // float (implicit conversion)\n    X b{1};     // list\n    X c(1.0f);  // float\n    X d{1.0f};  // list (narrowing conversion) ARG!!!\n\n    // warning: narrowing conversion of '1.0e+0f' from 'float' to 'int'\n    // inside { } [-Wnarrowing]\n}\n</code></pre>\n<p>Is there any other way of removing <code>std::initializer_list</code> from an overload list (i.e., making the non-list ctors more favorable) instead of using the ()-initialization, or at least prohibiting narrowing conversion to happen (apart from turning warning into error)?</p>\n<p>I was using <a href=\"http://coliru.stacked-crooked.com/\">http://coliru.stacked-crooked.com/</a> compiler which uses GCC 4.8.</p>\n", "AcceptedAnswerId": "16939798", "Title": "Preventing narrowing conversion when using std::initializer_list", "CreationDate": "2013-06-05T12:04:00.020", "Id": "16939471", "CommentCount": "3", "FavoriteCount": "3", "PostTypeId": "1", "LastEditDate": "2013-06-05T13:34:46.410", "LastEditorUserId": "339249", "LastActivityDate": "2016-11-26T23:17:14.627", "Score": "19", "OwnerUserId": "339249", "Tags": "<c++><c++11><initializer-list>", "AnswerCount": "4"}, "16939841": {"Id": "16939841", "PostTypeId": "2", "Body": "<p>That looks like a compiler error. You should be getting an error instead of a warning. Brace initialization should never implicitly narrow.</p>\n<p>From the standard (\u00a7 8.5.4)</p>\n<blockquote id=\"so_16939471_16939841_0\">\n<pre><code>struct B {\n  B(std::initializer_list&lt;int&gt;);\n};\nB b1 { 1, 2 }; // creates initializer_list&lt;int&gt; and calls constructor\nB b2 { 1, 2.0 }; // error: narrowing\n</code></pre>\n</blockquote>\n", "LastActivityDate": "2013-06-05T12:21:14.663", "CommentCount": "1", "CreationDate": "2013-06-05T12:21:14.663", "ParentId": "16939471", "Score": "3", "OwnerUserId": "754093"}, "16945743": {"Id": "16945743", "PostTypeId": "2", "Body": "<p>You can achieve what you want with <code>std::enable_if</code>.</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;type_traits&gt;\n\nstruct X {\n    template&lt;typename T, typename = typename std::enable_if&lt;std::is_same&lt;T,int&gt;::value&gt;::type&gt;\n    X(std::initializer_list&lt;T&gt;) { std::cout &lt;&lt; \"list\" &lt;&lt; std::endl; }\n    X(float) { std::cout &lt;&lt; \"float\" &lt;&lt; std::endl; }\n};\n\nint main() {\n    X a(1);     // float (implicit conversion)\n    X b{1};     // list\n    X c(1.0f);  // float\n    X d{1.0f};  // float (yay)\n}\n</code></pre>\n<p>Works on both <a href=\"http://coliru.stacked-crooked.com/view?id=d82be774dcbf2c3bd97cb35da92f8b1a-b1fba5242d36d8fdaa89f56dd07dd250\" rel=\"nofollow\">g++4.8</a> and clang 3.2</p>\n", "LastActivityDate": "2013-06-05T16:59:52.043", "CommentCount": "2", "CreationDate": "2013-06-05T16:59:52.043", "ParentId": "16939471", "Score": "2", "OwnerUserId": "2456565"}, "bq_ids": {"n4140": {"so_16939471_16939798_4": {"length": 21, "quality": 0.875, "section_id": 3325}, "so_16939471_16939798_0": {"length": 6, "quality": 1.0, "section_id": 3325}, "so_16939471_16939798_2": {"length": 4, "quality": 1.0, "section_id": 631}, "so_16939471_16939798_1": {"length": 4, "quality": 0.8, "section_id": 3325}}, "n3337": {"so_16939471_16939798_1": {"length": 4, "quality": 0.8, "section_id": 3195}, "so_16939471_16939798_0": {"length": 6, "quality": 1.0, "section_id": 3195}, "so_16939471_16939798_2": {"length": 4, "quality": 1.0, "section_id": 622}, "so_16939471_16939798_4": {"length": 21, "quality": 0.875, "section_id": 3195}}, "n4659": {"so_16939471_16939798_1": {"length": 4, "quality": 0.8, "section_id": 4091}, "so_16939471_16939798_0": {"length": 6, "quality": 1.0, "section_id": 4091}, "so_16939471_16939798_2": {"length": 4, "quality": 1.0, "section_id": 658}, "so_16939471_16939798_4": {"length": 21, "quality": 0.875, "section_id": 4091}}}, "40824150": {"Id": "40824150", "PostTypeId": "2", "Body": "<p>You can use <code>-Wno-c++11-narrowing</code> to turn off the errors:</p>\n<p>Here's a sample test program:</p>\n<pre><code>#include &lt;cstdint&gt;\n\nstruct foo {\n    int32_t a;\n};\n\nvoid foo(int64_t val) {\n    struct foo A = { val };\n}\n</code></pre>\n<p>Compile with clang++-3.8 with just <code>-std=c++11</code>, we get the stated error:</p>\n<p><a href=\"https://i.stack.imgur.com/PWiD5.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/PWiD5.png\"/></a></p>\n<p>Add <code>-Wno-c++11-narrowing</code>, golden silence :-)</p>\n<p><a href=\"https://i.stack.imgur.com/c30Ik.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/c30Ik.png\"/></a></p>\n<p>Of course, the narrowing issue might come back to bite you later, but it might occasionally be easier to delay the technical debt pain till later.  ymmv :-)</p>\n", "LastActivityDate": "2016-11-26T23:17:14.627", "CommentCount": "0", "CreationDate": "2016-11-26T23:17:14.627", "ParentId": "16939471", "Score": "0", "OwnerUserId": "212731"}});