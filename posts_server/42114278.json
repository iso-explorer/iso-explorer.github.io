post_cb({"42114325": {"ParentId": "42114278", "CommentCount": "1", "Body": "<p>Copy elision is allowed to happen even if it ignores side effects:</p>\n<blockquote>\n<p id=\"so_42114278_42114325_0\"><code>[class.copy]/31:</code> When certain criteria are met, an implementation is allowed to omit the copy/move construction of a class\n  object, <strong>even if the constructor selected for the copy/move operation and/or the destructor for the object\n  have side effects</strong>. [...]</p>\n</blockquote>\n<p>A good general rule is to not write code which relies on copy/move constructor side effects, as you can easily get bitten by elision. This is particularly true in C++17, where certain cases of copy elision are mandatory.</p>\n", "OwnerUserId": "496161", "PostTypeId": "2", "Id": "42114325", "Score": "9", "CreationDate": "2017-02-08T13:21:41.663", "LastActivityDate": "2017-02-08T13:21:41.663"}, "42114332": {"ParentId": "42114278", "CommentCount": "2", "Body": "<p>To quote <a href=\"http://eel.is/c++draft/class.copy.elision#constructor,copy,elision\" rel=\"nofollow noreferrer\">the standard</a> 12.8.3:</p>\n<blockquote>\n<p id=\"so_42114278_42114332_0\">When certain criteria are met, an implementation is allowed to omit\n  the copy/move construction of a class object, <strong>even if the constructor\n  selected for the copy/move operation and/or the destructor for the\n  object have side effects.</strong></p>\n</blockquote>\n<p><sup>(Emphasis mine)</sup></p>\n<p>This means that the compiler is allowed to elide the copy even if the copy has side effects. Which is exactly what's happening in your case.</p>\n", "OwnerUserId": "1870760", "PostTypeId": "2", "Id": "42114332", "Score": "4", "CreationDate": "2017-02-08T13:21:57.037", "LastActivityDate": "2017-02-08T13:21:57.037"}, "bq_ids": {"n4140": {"so_42114278_42114332_0": {"section_id": 480, "quality": 1.0, "length": 22}, "so_42114278_42114325_0": {"section_id": 480, "quality": 0.9565217391304348, "length": 22}}, "n3337": {"so_42114278_42114332_0": {"section_id": 471, "quality": 0.8636363636363636, "length": 19}, "so_42114278_42114325_0": {"section_id": 471, "quality": 0.8260869565217391, "length": 19}}, "n4659": {"so_42114278_42114332_0": {"section_id": 502, "quality": 1.0, "length": 22}, "so_42114278_42114325_0": {"section_id": 502, "quality": 0.9565217391304348, "length": 22}}}, "42114278": {"CommentCount": "2", "AcceptedAnswerId": "42114325", "PostTypeId": "1", "LastEditorUserId": "485343", "CreationDate": "2017-02-08T13:18:51.093", "LastActivityDate": "2017-02-08T13:48:04.633", "LastEditDate": "2017-02-08T13:48:04.633", "ViewCount": "307", "FavoriteCount": "1", "Title": "Is it legal to elide a non-trivial copy/move constructor in initialization?", "Id": "42114278", "Score": "11", "Body": "<p>Given this application:</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct X {\n  X(int _x)                   { x = _x     + 1; }\n  X(const X&amp; that)            { x = that.x + 10; }\n  X&amp; operator=(const X&amp; that) { x = that.x + 100; return *this; }\n  X(X&amp;&amp; that)                 { x = that.x + 1000; }\n  X&amp; operator=(X&amp;&amp; that)      { x = that.x + 10000; return *this; }\n  int x;\n};\n\nint main() {\n  X a(1);\n  std::cout &lt;&lt; \"a.x=\" &lt;&lt; a.x &lt;&lt; std::endl;\n  X b = 2;\n  std::cout &lt;&lt; \"b.x=\" &lt;&lt; b.x &lt;&lt; std::endl;\n  X c = X(3);\n  std::cout &lt;&lt; \"c.x=\" &lt;&lt; c.x &lt;&lt; std::endl;\n  X d = a;\n  std::cout &lt;&lt; \"d.x=\" &lt;&lt; d.x &lt;&lt; std::endl;\n}\n</code></pre>\n<p>I expected the output to be:</p>\n<pre><code>a.x=2\nb.x=1003\nc.x=1004\nd.x=12\n</code></pre>\n<p>Yet what I get is:</p>\n<pre><code>a.x=2\nb.x=3\nc.x=4\nd.x=12\n</code></pre>\n<p><a href=\"http://rextester.com/IRR1416\">Live example</a></p>\n<p>The only way to get my expected output is to compile with <code>-fno-elide-constructors</code> (<a href=\"http://rextester.com/QKSH83987\">example</a>)</p>\n<p>I thought the compiler may not elide stuff if doing so will affect the observed behavior, yet GCC, clang and MSVC seem to be doing just that.</p>\n<p>Am I missing some general rule or is it specific to object initialization with a temporary?</p>\n", "Tags": "<c++><c++11><language-lawyer>", "OwnerUserId": "485343", "AnswerCount": "2"}});