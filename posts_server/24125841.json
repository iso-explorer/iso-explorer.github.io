post_cb({"bq_ids": {"n4140": {"so_24125841_24126011_2": {"length": 35, "quality": 0.875, "section_id": 187}, "so_24125841_24126011_1": {"length": 35, "quality": 0.875, "section_id": 187}}, "n3337": {"so_24125841_24126011_2": {"length": 35, "quality": 0.875, "section_id": 181}, "so_24125841_24126011_1": {"length": 35, "quality": 0.875, "section_id": 181}}, "n4659": {"so_24125841_24126011_2": {"length": 32, "quality": 0.8, "section_id": 192}, "so_24125841_24126011_1": {"length": 32, "quality": 0.8, "section_id": 192}}}, "24125841": {"ViewCount": "187", "Body": "<p>The following code fails to compile using Visual Studio Express 2012:</p>\n<pre><code>template&lt; int d &gt;\nclass MyVector\n{\npublic:\n    typedef double X;\n};\n\nclass Base\n{\npublic:\n    int d;\n    int m() {\n        return 0;\n    }\n};\n\ntemplate&lt;int d&gt;\nclass Derived1 : Base\n{\n    typedef typename MyVector&lt;d&gt;::X X;\n};\n\ntemplate&lt;int m&gt;\nclass Derived2 : Base\n{\n    typedef typename MyVector&lt;m&gt;::X X;\n};\n</code></pre>\n<p>I get the \"error C2327: 'Base::d' : is not a type name, static, or enumerator\" at Derived1 and the \"error C2975: 'd' : invalid template argument for 'MyVector', expected compile-time constant expression\" at Derived2.</p>\n<p>Of course, it is easy to see that the problem are the template arguments names, that conflict with the Base member names. If I change the derived template names to</p>\n<pre><code>template&lt;int ddd&gt;\nclass Derived1 : Base\n{\n    typedef typename MyVector&lt;ddd&gt;::X X;\n};\n\ntemplate&lt;int mmm&gt;\nclass Derived2 : Base\n{\n    typedef typename MyVector&lt;mmm&gt;::X X;\n};\n</code></pre>\n<p>the code compiles fine.</p>\n<p>However, the original code compiles without any problems in Linux, using gcc 4.6.4. So my question is: which compiler is right, according to the standard? I consider myself a newbie at this c++ template subtleties, but my instincts tend to prefer the gcc interpretation: after all, if Derived1 wished to access the Base member 'd' it would require the notation 'Base::d' or 'this-&gt;d', so I guess there should not be a name conflict in this case. </p>\n", "AcceptedAnswerId": "24126011", "Title": "C++ Template names: compilation error in Visual Studio, works fine in gcc", "CreationDate": "2014-06-09T17:47:21.743", "Id": "24125841", "CommentCount": "0", "LastEditDate": "2014-06-09T22:28:00.693", "PostTypeId": "1", "LastEditorUserId": "1090079", "LastActivityDate": "2014-06-09T22:28:46.383", "Score": "3", "OwnerUserId": "3692818", "Tags": "<c++><templates><language-lawyer>", "AnswerCount": "1"}, "24126011": {"Id": "24126011", "PostTypeId": "2", "Body": "<h3>Who's to blame?</h3>\n<p><code>gcc 4.6.4</code> is relatively old, but nonetheless; it's wrong to accept the snippet.</p>\n<p><sup> <strong>Edit</strong>: prior to this edit it was stated that 4.6.4 was <em>\"very old\"</em>. I inaccurately thought it was released back in 2011, but it's actually from 13 Apr 2013. </sup></p>\n<hr>\n<h3>What does the Standard say? (<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf\" rel=\"nofollow\">n3337</a>)</h3>\n<blockquote>\n<p id=\"so_24125841_24126011_0\"><code>14.6.1p9</code> <strong>Locally declared names</strong> <code>[temp.local]</code></p>\n<blockquote>\n<p id=\"so_24125841_24126011_2\">If the definition of a class template or in the definition of a member of such a template that appears outside of the template definition, for each base class which does not depend on a <em>template-parameter</em> (14.6.2), <code>[ Note: &gt;&gt; ]</code> if the name of the base class or the name of a member of the base class is the same as the name of a <em>template-parameter</em>, the base class name or member name hides the <em>template-parameter</em> name <code>[ &lt;&lt; --end note ]</code>(3.3.10).</p>\n</blockquote>\n</blockquote>\n<p><sup> <strong>Note</strong>: The relevant, and semantically equivalent, wording for <em>C++03</em> can be found at <code>[temp.local]p7</code> in <strong>14882:2003</strong>.</sup></p>\n<p><br/></p>\n<p>The last sentence from the section quoted above says that if the name of a <em>template-parameter</em> is the same as a name found in a <em>non-dependent</em> base, the member-name will effectively hide the <em>template-parameter</em>.</p>\n<p>The bug has been fixed in newer versions of <code>gcc</code>.</p>\n</hr>", "LastEditorUserId": "1090079", "LastActivityDate": "2014-06-09T22:28:46.383", "Score": "3", "CreationDate": "2014-06-09T17:57:59.473", "ParentId": "24125841", "CommentCount": "3", "OwnerUserId": "1090079", "LastEditDate": "2014-06-09T22:28:46.383"}});