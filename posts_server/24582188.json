post_cb({"bq_ids": {"n4140": {"so_24582188_24582262_13": {"length": 4, "quality": 0.8, "section_id": 121}, "so_24582188_24582262_2": {"length": 5, "quality": 0.8333333333333334, "section_id": 68}, "so_24582188_24582262_1": {"length": 6, "quality": 0.8571428571428571, "section_id": 121}, "so_24582188_24582262_11": {"length": 4, "quality": 0.8, "section_id": 121}, "so_24582188_24582262_6": {"length": 4, "quality": 1.0, "section_id": 121}, "so_24582188_24582262_3": {"length": 7, "quality": 1.0, "section_id": 121}, "so_24582188_24582262_0": {"length": 26, "quality": 0.9629629629629629, "section_id": 121}, "so_24582188_24582262_4": {"length": 9, "quality": 1.0, "section_id": 121}}, "n3337": {"so_24582188_24582262_13": {"length": 4, "quality": 0.8, "section_id": 116}, "so_24582188_24582262_2": {"length": 5, "quality": 0.8333333333333334, "section_id": 63}, "so_24582188_24582262_4": {"length": 9, "quality": 1.0, "section_id": 116}, "so_24582188_24582262_11": {"length": 4, "quality": 0.8, "section_id": 116}, "so_24582188_24582262_6": {"length": 4, "quality": 1.0, "section_id": 116}, "so_24582188_24582262_3": {"length": 7, "quality": 1.0, "section_id": 116}, "so_24582188_24582262_0": {"length": 26, "quality": 0.9629629629629629, "section_id": 116}, "so_24582188_24582262_1": {"length": 6, "quality": 0.8571428571428571, "section_id": 116}}, "n4659": {"so_24582188_24582262_13": {"length": 4, "quality": 0.8, "section_id": 125}, "so_24582188_24582262_2": {"length": 5, "quality": 0.8333333333333334, "section_id": 70}, "so_24582188_24582262_4": {"length": 9, "quality": 1.0, "section_id": 125}, "so_24582188_24582262_11": {"length": 4, "quality": 0.8, "section_id": 125}, "so_24582188_24582262_6": {"length": 4, "quality": 1.0, "section_id": 125}, "so_24582188_24582262_3": {"length": 7, "quality": 1.0, "section_id": 125}, "so_24582188_24582262_0": {"length": 24, "quality": 0.8888888888888888, "section_id": 125}, "so_24582188_24582262_1": {"length": 6, "quality": 0.8571428571428571, "section_id": 125}}}, "24582262": {"Id": "24582262", "PostTypeId": "2", "Body": "<p>This is not a valid location for parameter pack expansion. The valid contexts for pack expansion is covered in the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3485.pdf\" rel=\"nofollow\">draft C++ standard</a> section <code>14.5.3</code> <em>Variadic templates</em> which says:</p>\n<blockquote>\n<p id=\"so_24582188_24582262_0\">A pack expansion consists of a pattern and an ellipsis, the\n  instantiation of which produces zero or more instantiations of the\n  pattern in a list (described below). The form of the pattern depends\n  on the context in which the expansion occurs. Pack expansions can\n  occur in the following contexts:</p>\n<p id=\"so_24582188_24582262_1\">\u2014 In a function parameter pack\n  (8.3.5); the pattern is the parameter-declaration without the\n  ellipsis.</p>\n<p id=\"so_24582188_24582262_2\">\u2014 In a template parameter pack that is a pack expansion (14.1):</p>\n<p id=\"so_24582188_24582262_3\">\u2014 if the template parameter pack is a parameter-declaration; the pattern is the parameter-declaration\n  without the ellipsis;</p>\n<p id=\"so_24582188_24582262_4\">\u2014 if the template parameter pack is a type-parameter with a template-parameter-list; the pattern is\n  the corresponding type-parameter without the ellipsis.</p>\n<p id=\"so_24582188_24582262_5\">\u2014 In an initializer-list (8.5); the pattern is an initializer-clause.</p>\n<p id=\"so_24582188_24582262_6\">\u2014 In a base-specifier-list (Clause 10); the pattern is a base-specifier.</p>\n<p id=\"so_24582188_24582262_7\">\u2014 In a mem-initializer-list (12.6.2); the pattern is a mem-initializer.</p>\n<p id=\"so_24582188_24582262_8\">\u2014 In a template-argument-list (14.3); the pattern is a template-argument.</p>\n<p id=\"so_24582188_24582262_9\">\u2014 In a dynamic-exception-specification (15.4); the pattern is a type-id.</p>\n<p id=\"so_24582188_24582262_10\">\u2014 In an attribute-list (7.6.1); the pattern is an attribute.</p>\n<p id=\"so_24582188_24582262_11\">\u2014 In an alignment-specifier (7.6.2); the pattern is the alignment-specifier without the ellipsis.</p>\n<p id=\"so_24582188_24582262_12\">\u2014 In a capture-list (5.1.2); the pattern is a capture.</p>\n<p id=\"so_24582188_24582262_13\">\u2014 In a sizeof... expression (5.3.3); the pattern is an identifier.</p>\n</blockquote>\n<p>This is also covered on cppreference section for <a href=\"http://en.cppreference.com/w/cpp/language/parameter_pack\" rel=\"nofollow\">Parameter pack</a>.</p>\n", "LastEditorUserId": "1708801", "LastActivityDate": "2014-07-06T01:23:08.127", "Score": "4", "CreationDate": "2014-07-05T01:37:35.253", "ParentId": "24582188", "CommentCount": "0", "OwnerUserId": "1708801", "LastEditDate": "2014-07-06T01:23:08.127"}, "24582188": {"ViewCount": "285", "Body": "<p>In the code below I expand a parameter pack inside an initializer list, while calling a function <code>DoSomethingReturnInt</code> on each element. Below that I attempt to do something seemingly similar to try and call <code>DoSomething</code> on each element, but get a compiler error. Is this simply not possible or do I simply have to modify it slightly to accomplish this? It seems to me that something like this should be possible.</p>\n<pre class=\"lang-c++ prettyprint-override\"><code>template &lt;class T&gt;\nint DoSomethingReturnInt(T&amp;&amp; t) \n{}\n\ntemplate &lt;class T&gt;\nvoid DoSomething(T&amp;&amp; t) \n{}\n\ntemplate &lt;class... T&gt;\nvoid variadic(T&amp;&amp;... args) \n{\n    int arr[] = { DoSomethingReturnInt(args)... }; //Compiles OK\n    DoSomething(args)...; //error: parameter packs not expanded with '...'\n}\n\nint main()\n{\n    variadic(\"Testing\", \"one\", 2.0, 3);\n}\n</code></pre>\n", "AcceptedAnswerId": "24582262", "Title": "Can this not be done with variadic template parameter packs?", "CreationDate": "2014-07-05T01:22:34.883", "LastActivityDate": "2014-07-11T12:44:33.707", "CommentCount": "3", "LastEditDate": "2014-07-11T12:44:33.707", "PostTypeId": "1", "Tags": "<c++><templates><c++11><variadic-templates>", "Id": "24582188", "AnswerCount": "2", "Score": "3", "OwnerUserId": "897778", "ClosedDate": "2014-07-06T01:37:37.083", "LastEditorUserId": "3043539"}, "24582317": {"Id": "24582317", "PostTypeId": "2", "Body": "<p>You can use the comma operator to your advantage here.</p>\n<pre><code>int dummy[] = { (DoSomething(args), 0)... };\n</code></pre>\n<p>EDIT: If you don't like the comma operator \"abuse\", maybe a lambda?</p>\n<pre><code>int dummy[] = { []() { DoSomething(args); return 0; }()... };\n</code></pre>\n<p>Note that gcc4.9 doesn't seem to be able to handle this, but clang will do just fine.</p>\n", "LastEditorUserId": "2968284", "LastActivityDate": "2014-07-05T05:31:41.050", "Score": "4", "CreationDate": "2014-07-05T01:54:11.043", "ParentId": "24582188", "CommentCount": "2", "OwnerUserId": "2968284", "LastEditDate": "2014-07-05T05:31:41.050"}});