post_cb({"29190453": {"ParentId": "29190042", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>Basically you are trying to write into an empty string.</p>\n<p>When you create a <code>std::string</code>, no storage is allocated, so you are passing the address of a zero-length array to <code>sprintf</code>.</p>\n", "OwnerUserId": "2960823", "LastEditorUserId": "560648", "LastEditDate": "2015-03-22T03:01:43.677", "Id": "29190453", "Score": "0", "CreationDate": "2015-03-22T02:58:16.487", "LastActivityDate": "2015-03-22T03:01:43.677"}, "29190042": {"CommentCount": "7", "ViewCount": "117", "PostTypeId": "1", "LastEditorUserId": "560648", "CreationDate": "2015-03-22T01:42:09.560", "LastActivityDate": "2015-03-22T03:14:54.973", "Title": "Why is the Function Returning an Empty String", "LastEditDate": "2015-03-22T03:04:16.070", "Id": "29190042", "Score": "0", "Body": "<p>Why is this function always returning an empty string?</p>\n<p>I'm aware of scope of variables but I thought the function would return a copy of the std::string res?</p>\n<pre><code>string getNumberOfLines(string absFilePath)\n{\n    int nLines = 0;\n    ifstream inFile(absFilePath.c_str());\n\n    if (!inFile)\n        return \"no lines\";\n\n    char c;\n    while (inFile.get(c))\n    {\n        if (c == '\\n')\n            nLines++;\n    }   \n\n    string res;\n    sprintf(&amp;res[0], \"%d lines.\", nLines);\n    puts(res.c_str()); // prints \"40 lines\" or etc.\n    return res;\n}\n\nputs(getNumberOfLines(\"f.txt\").c_str()); // outputs nothing\n</code></pre>\n", "Tags": "<c++><string>", "OwnerUserId": "972202", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_29190042_29190538_1": {"section_id": 1617, "quality": 0.9473684210526315, "length": 18}}, "n3337": {"so_29190042_29190538_1": {"section_id": 1613, "quality": 0.9473684210526315, "length": 18}}, "n4659": {"so_29190042_29190538_1": {"section_id": 1770, "quality": 0.9473684210526315, "length": 18}}}, "29190538": {"ParentId": "29190042", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>You're using <code>reference std::basic_string::operator[](size_t pos)</code> to get the first element in a string and then its address using the <code>&amp;</code> operator. However, as per the function's specification, if <code>pos == size</code> then it's undefined behaviour. C++11 standard, draft N3337, <strong>[string.access]</strong>, <code>basic_string</code> element access (emphasis mine):</p>\n<blockquote>\n<p id=\"so_29190042_29190538_0\">1 <em>Requires:</em> <code>pos &lt;= size()</code>.</p>\n<p id=\"so_29190042_29190538_1\">2 <em>Returns:</em> <code>*(begin() + pos)</code> if <code>pos &lt; size()</code>. Otherwise, returns a reference to an object of type <code>charT</code> with value <code>charT()</code>, where <strong>modifying the object leads to undefined behavior</strong>.</p>\n</blockquote>\n<p>Your string <code>res</code> has no elements in it and is thus 0 sized, thus undefined behaviour ensues. After this point, nothing else is guarenteed by the language.</p>\n<p>You should be using <code>std::ostringstream</code> for this:</p>\n<pre><code>std::ostringstream ss;\nss &lt;&lt; nLines &lt;&lt; \" lines.\";\nauto res = ss.str();\nstd::cout &lt;&lt; res &lt;&lt; '\\n';\nreturn res;\n</code></pre>\n", "OwnerUserId": "183120", "LastEditorUserId": "183120", "LastEditDate": "2015-03-22T03:14:54.973", "Id": "29190538", "Score": "2", "CreationDate": "2015-03-22T03:12:32.763", "LastActivityDate": "2015-03-22T03:14:54.973"}});