post_cb({"bq_ids": {"n4140": {"so_12485025_12485165_0": {"length": 39, "quality": 0.9512195121951219, "section_id": 7143}, "so_12485025_12485165_1": {"length": 27, "quality": 0.9642857142857143, "section_id": 7204}}, "n3337": {"so_12485025_12485165_0": {"length": 39, "quality": 0.9512195121951219, "section_id": 6887}, "so_12485025_12485165_1": {"length": 27, "quality": 0.9642857142857143, "section_id": 6948}}, "n4659": {"so_12485025_12485165_0": {"length": 39, "quality": 0.9512195121951219, "section_id": 8644}, "so_12485025_12485165_1": {"length": 26, "quality": 0.9285714285714286, "section_id": 8713}}}, "12485108": {"Id": "12485108", "PostTypeId": "2", "Body": "<p><a href=\"http://ideone.com/3ssVi\" rel=\"nofollow\">http://ideone.com/3ssVi</a> </p>\n<p>it compiles fine with G++.</p>\n<p>As far as i can see it can be related to this bug:</p>\n<p><a href=\"http://connect.microsoft.com/VisualStudio/feedback/details/759407/can-not-get-size-of-static-array-defined-in-class-template\" rel=\"nofollow\">http://connect.microsoft.com/VisualStudio/feedback/details/759407/can-not-get-size-of-static-array-defined-in-class-template</a></p>\n", "LastEditorUserId": "673730", "LastActivityDate": "2012-09-18T21:14:39.450", "Score": "5", "CreationDate": "2012-09-18T21:11:18.583", "ParentId": "12485025", "CommentCount": "1", "LastEditDate": "2012-09-18T21:14:39.450", "OwnerUserId": "1012759"}, "12485025": {"ViewCount": "4446", "Body": "<p>The following code looks fine to me:</p>\n<pre><code>    #include &lt;stdio.h&gt;\n\n    template &lt;typename T&gt;\n    struct A\n    {\n        static float m_kA[];\n    };\n\n    template &lt;typename T&gt;\n    float A&lt;T&gt;::m_kA[] = {1.0f, 2.0f, 3.0f};\n\n    int main()\n    {\n        printf(\"%d\\n\", \n            sizeof(A&lt;unsigned int&gt;::m_kA) /\n            sizeof(A&lt;unsigned int&gt;::m_kA[0]));\n        return 0;\n    }\n</code></pre>\n<p>But when i compile with VC9 i get the following error</p>\n<pre><code>error C2070: 'float []': illegal sizeof operand\n</code></pre>\n<p>I would expect this code to compile. Am i missing something? Does anyone know a way to fix this strange behavior (note that the exact same thing without the template compiles fine and outputs 3).</p>\n<p>Note that removing the template is not an option, i made this example to reproduce a problem that i'm having in a code where i need the type containing the array to be a template.</p>\n<p>Thanks</p>\n", "AcceptedAnswerId": "12485108", "Title": "C2070 - illegal sizeof operand", "CreationDate": "2012-09-18T21:04:56.777", "Id": "12485025", "CommentCount": "10", "PostTypeId": "1", "LastActivityDate": "2012-09-18T22:11:51.107", "Score": "7", "OwnerUserId": "239769", "Tags": "<c++><visual-studio-2008><sizeof><visual-c++>", "AnswerCount": "2"}, "12485165": {"Id": "12485165", "PostTypeId": "2", "Body": "<p>It's well defined. Do note that in the class definition, <code>m_kA</code> is declared with type <code>float[]</code>, which is an incomplete type and cannot be used in tandem with <code>sizeof</code>. In the definition of <code>m_kA</code>, it is redeclared to have type <code>float[3]</code>, after which it is okay to use <code>sizeof</code>. (8.3.4 governs the meaning of array declarations.)</p>\n<p>From 3.4.6 Using-directives and namespace aliases [basic.lookup.udir]:</p>\n<blockquote>\n<p id=\"so_12485025_12485165_0\">10 After all adjustments of types (during which typedefs (7.1.3) are replaced by their definitions), the types specified by all declarations referring to a given variable or function shall be identical, except that declarations for an array object can specify array types that differ by the presence or absence of a major array bound (8.3.4). A violation of this rule on type identity does not require a diagnostic.</p>\n</blockquote>\n<p>From 3.9.2 Compound types [basic.compound]:</p>\n<blockquote>\n<p id=\"so_12485025_12485165_1\">6 [...] The declared type of an array object might be an array of unknown size and therefore be incomplete at one point in a translation unit and complete later on; the array types at those two points (\u201carray of unknown bound of T\u201d and \u201carray of N T\u201d) are different types. [...]</p>\n</blockquote>\n<p>A workaround for your compiler issues would be to declare <code>m_kA</code> with a complete type outright. Another static member holding the size could be helpful, too.</p>\n<p>[ I'm quoting from C++11 but to the best of my knowledge C++03 followed the same rules. ]</p>\n", "LastEditorUserId": "726300", "LastActivityDate": "2012-09-18T22:11:51.107", "Score": "4", "CreationDate": "2012-09-18T21:16:44.043", "ParentId": "12485025", "CommentCount": "2", "LastEditDate": "2012-09-18T22:11:51.107", "OwnerUserId": "726300"}});