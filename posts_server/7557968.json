post_cb({"7557968": {"CommentCount": "1", "AcceptedAnswerId": "7558010", "PostTypeId": "1", "LastEditorUserId": "965359", "CreationDate": "2011-09-26T16:08:36.187", "LastActivityDate": "2013-06-15T03:43:25.173", "LastEditDate": "2011-09-26T16:18:21.317", "ViewCount": "511", "FavoriteCount": "2", "Title": "a strange use of typedef", "Id": "7557968", "Score": "6", "Body": "<p>I have never see a  grammar in c++ like this before:</p>\n<pre><code>typedef int (callback)(int);\n</code></pre>\n<p>what really  does this really mean?I just find that if  I create a statement</p>\n<pre><code>  callback a;\n</code></pre>\n<p>It's effect is very very similar to a forward  function declaration.</p>\n<p>below is the code I  had written</p>\n<pre><code>#include&lt;cstdio&gt;\n\nint callbackfunc(int i)\n{\n    printf(\"%d\\n\",i);\n    return i*i;\n}\n\n// you can also use typedef int (callback)(int) here!\ntypedef int (*callback)(int);\n\nvoid func(callback hook)\n{\n    hook(hook(3));\n}\n\nint main()\n{\n    func(callbackfunc);\n    getchar();\n        return 0;\n}\n</code></pre>\n<p>You can use </p>\n<pre><code>typedef int (*callback)(int);//this is very common to use\n</code></pre>\n<p>in this code,but if we change it to </p>\n<pre><code>typedef int (callback)(int); //I'm puzzled by this !\n</code></pre>\n<p>this will also get the same result!</p>\n<p>and I know <code>typedef int (*callback)(int)</code>  and  <code>typedef int (callback)(int)</code><br>\nare two completely different stuff.</br></p>\n", "Tags": "<c++><typedef>", "OwnerUserId": "965359", "AnswerCount": "2"}, "7557995": {"ParentId": "7557968", "CommentCount": "0", "Body": "<p>It's because a function implicitly becomes a function pointer where necessary. These are identical:</p>\n<pre><code>func(callbackfunc);\n\nfunc(&amp;callbackfunc);\n</code></pre>\n", "OwnerUserId": "565635", "PostTypeId": "2", "Id": "7557995", "Score": "3", "CreationDate": "2011-09-26T16:11:07.807", "LastActivityDate": "2011-09-26T16:11:07.807"}, "7558010": {"ParentId": "7557968", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>Its because of the fact that <em>in the parameter declaration</em>, the <em>function-type</em> is adjusted to become a <em>pointer-to-function-type</em>.</p>\n<pre><code>typedef int type(int); \ntypedef int (*type)(int); \n</code></pre>\n<p>The first typedef defines a type which is called <code>function-type</code>, while the second typedef defines a type which is called <code>pointer-to-function-type</code>. In the parameter declaration, function-type is adjusted to become a pointer to function type.</p>\n<p>\u00a713.1/3 (C++03) says,</p>\n<blockquote>\n<p id=\"so_7557968_7558010_0\">Parameter declarations that differ only in that one is a function type and the other is a pointer to the same function type are <strong>equivalent</strong>. <strong>That is, the function type is adjusted to become a pointer to function type (8.3.5)</strong>.</p>\n</blockquote>\n<pre><code>[Example:\n    void h(int());\n    void h(int (*)()); // redeclaration of h(int())\n    void h(int x()) { } // definition of h(int())\n    void h(int (*x)()) { } // ill-formed: redefinition of h(int())\n]\n</code></pre>\n<hr>\n<h3>An interesting example of the exclusive usage of function-type</h3>\n<p>Suppose you've a typedef, defined as:</p>\n<pre><code>typedef void funtype();\n</code></pre>\n<p>then you can use this to define <em>member-function</em> as:</p>\n<pre><code>struct A\n{\n   //member function declaration. \n    funtype f; //equivalent to : void f();\n};\n\nvoid A::f() //definition\n{\n  std::cout &lt;&lt; \"haha\" &lt;&lt; std::endl;\n}\n</code></pre>\n<p>Test code:</p>\n<pre><code>int main() {\n        A a;\n        a.f(); //call member function\n}\n</code></pre>\n<p>Output:</p>\n<pre><code>haha\n</code></pre>\n<p>Online demo: <a href=\"http://ideone.com/hhkeK\" rel=\"nofollow\">http://ideone.com/hhkeK</a></p>\n</hr>", "OwnerUserId": "415784", "LastEditorUserId": "415784", "LastEditDate": "2013-06-15T03:43:25.173", "Id": "7558010", "Score": "11", "CreationDate": "2011-09-26T16:12:30.690", "LastActivityDate": "2013-06-15T03:43:25.173"}, "bq_ids": {"n4140": {"so_7557968_7558010_0": {"section_id": 558, "quality": 0.9047619047619048, "length": 19}}, "n3337": {"so_7557968_7558010_0": {"section_id": 549, "quality": 0.9047619047619048, "length": 19}}, "n4659": {"so_7557968_7558010_0": {"section_id": 581, "quality": 0.9047619047619048, "length": 19}}}});