post_cb({"bq_ids": {"n4140": {"so_37155404_37156393_0": {"length": 16, "quality": 0.8888888888888888, "section_id": 5991}}, "n3337": {"so_37155404_37156393_0": {"length": 16, "quality": 0.8888888888888888, "section_id": 5759}}, "n4659": {"so_37155404_37156393_0": {"length": 16, "quality": 0.8888888888888888, "section_id": 7491}}}, "37155404": {"ViewCount": "196", "Body": "<p>While porting some C++ code from Microsoft Visual Studio to gcc, I ran into a weird bug, which I eventually boiled down to this:</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass Foo {\npublic:\n    int data;\n    Foo(int i) : data(i) \n    {\n        cout &lt;&lt; \"Foo constructed with \" &lt;&lt; i &lt;&lt; endl; \n    }\n    Foo(const Foo&amp; f) : data(f.data)\n    {\n        cout &lt;&lt; \"copy ctor \" &lt;&lt; endl;\n    }\n    Foo(const Foo&amp;&amp; f) : data(f.data)\n    {\n        cout &lt;&lt; \"move ctor\" &lt;&lt; endl;\n    }\n    ~Foo()\n    {\n        cout &lt;&lt; \"Foo destructed with \" &lt;&lt; data &lt;&lt; endl;\n    }\n};\n\nint Bar(Foo f)\n{\n    cout &lt;&lt; \"f.data = \" &lt;&lt; f.data &lt;&lt; endl;\n    return f.data * 2;\n}\n\nint main()\n{\n    Foo f1(10);\n    Foo f2(Bar(std::move(f1)));\n}\n</code></pre>\n<p>If I compile and run the above code with Microsoft Visual Studio 2015 Community, I get the following output:</p>\n<pre><code>Foo constructed with 10\nmove ctor\nf.data = 10\nFoo destructed with 10\nFoo constructed with 20\nFoo destructed with 20\nFoo destructed with 10\n</code></pre>\n<p>However, if I compile and run the code with gcc 6.1.1 and --std=c++14, I get this output:</p>\n<pre><code>Foo constructed with 10\nmove ctor\nf.data = 10\nFoo constructed with 20\nFoo destructed with 10\nFoo destructed with 20\nFoo destructed with 10\n</code></pre>\n<p>gcc calls the destructor of <code>f</code>, the argument to <code>Bar()</code>, after <code>Bar()</code> returns, while msvc calls the destructor (apparently) before it returns, or at least before the constructor of <code>f2</code>. When is <code>f</code> supposed to be destructed, according to the C++ standard?</p>\n", "AcceptedAnswerId": "37156393", "Title": "Destructor of a function argument being called differently in gcc and MSVC", "CreationDate": "2016-05-11T07:05:49.967", "Id": "37155404", "CommentCount": "6", "FavoriteCount": "3", "PostTypeId": "1", "LastEditDate": "2016-05-11T07:26:23.017", "LastEditorUserId": "5597947", "LastActivityDate": "2016-05-11T13:01:26.237", "Score": "10", "OwnerUserId": "5597947", "Tags": "<c++><c++11><gcc><visual-studio-2015>", "AnswerCount": "1"}, "37156393": {"Id": "37156393", "PostTypeId": "2", "Body": "<p>They are all right; it depends. It seems underspecified in the standard.</p>\n<p>From <a href=\"http://eel.is/c++draft/expr.call#4\" rel=\"nofollow\">[expr.call]/4</a> (this wording goes back to C++98);</p>\n<blockquote>\n<p id=\"so_37155404_37156393_0\">The lifetime of a parameter ends when the function in which it is defined returns. The initialization and destruction of each parameter occurs within the context of the calling function. </p>\n</blockquote>\n<p>And the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_active.html#1880\" rel=\"nofollow\">CWG#1880</a>;</p>\n<blockquote>\n<p id=\"so_37155404_37156393_1\">WG decided to make it unspecified whether parameter objects are destroyed immediately following the call or at the end of the full-expression to which the call belongs.</p>\n</blockquote>\n<p>Both the behaviour of g++ (and clang) and MSVC would be correct, implementations are free to pick one approach over the other.</p>\n<p>That all said, if the code you have is dependent on this ordering, I would change it such that the ordering is more deterministic - as you have seen, it leads to subtle bugs.</p>\n<hr>\n<p>A simplified example of this behaviour is;</p>\n<pre><code>#include &lt;iostream&gt;\nstruct Arg {\n    Arg() {std::cout &lt;&lt; 'c';}\n    ~Arg() {std::cout &lt;&lt; 'd';}\n    Arg(Arg const&amp;)  {std::cout &lt;&lt; 'a';}\n    Arg(Arg&amp;&amp;)  {std::cout &lt;&lt; 'b';}\n    Arg&amp; operator=(Arg const&amp;)  {std::cout &lt;&lt; 'e'; return *this;}\n    Arg&amp; operator=(Arg&amp;&amp;)  {std::cout &lt;&lt; 'f'; return *this;}\n};\nvoid func(Arg) {}\nint main() {\n    (func(Arg{}), std::cout &lt;&lt; 'X');\n    std::cout &lt;&lt; std::endl;\n}\n</code></pre>\n<p>Clang and g++ both produce <code>cXd</code> and MSVC produces <code>cdX</code>.</p>\n</hr>", "LastEditorUserId": "3747990", "LastActivityDate": "2016-05-11T13:01:26.237", "Score": "8", "CreationDate": "2016-05-11T07:56:33.410", "ParentId": "37155404", "CommentCount": "0", "OwnerUserId": "3747990", "LastEditDate": "2016-05-11T13:01:26.237"}});