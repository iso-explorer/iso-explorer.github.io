post_cb({"bq_ids": {"n4140": {"so_30310299_30310428_2": {"length": 55, "quality": 0.9166666666666666, "section_id": 7193}, "so_30310299_30310501_0": {"length": 7, "quality": 1.0, "section_id": 411}, "so_30310299_30315090_0": {"length": 31, "quality": 0.7948717948717948, "section_id": 7189}, "so_30310299_30310501_1": {"length": 35, "quality": 0.9722222222222222, "section_id": 7193}, "so_30310299_30310428_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 7189}, "so_30310299_30310501_2": {"length": 20, "quality": 0.9090909090909091, "section_id": 7189}}, "n3337": {"so_30310299_30310428_2": {"length": 51, "quality": 0.85, "section_id": 6937}, "so_30310299_30310501_0": {"length": 7, "quality": 1.0, "section_id": 402}, "so_30310299_30315090_0": {"length": 31, "quality": 0.7948717948717948, "section_id": 6933}, "so_30310299_30310501_1": {"length": 35, "quality": 0.9722222222222222, "section_id": 6937}, "so_30310299_30310428_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 6933}, "so_30310299_30310501_2": {"length": 20, "quality": 0.9090909090909091, "section_id": 6933}}, "n4659": {"so_30310299_30310428_2": {"length": 54, "quality": 0.9, "section_id": 8702}, "so_30310299_30310501_0": {"length": 7, "quality": 1.0, "section_id": 429}, "so_30310299_30315090_0": {"length": 30, "quality": 0.7692307692307693, "section_id": 8697}, "so_30310299_30310501_1": {"length": 34, "quality": 0.9444444444444444, "section_id": 8702}, "so_30310299_30310428_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 8697}, "so_30310299_30310501_2": {"length": 19, "quality": 0.8636363636363636, "section_id": 8697}}}, "30310501": {"Id": "30310501", "PostTypeId": "2", "Body": "<p>Given [class.dtor]:</p>\n<blockquote>\n<p id=\"so_30310299_30310501_0\">Once a destructor is invoked for an object, the object <strong>no longer exists</strong></p>\n</blockquote>\n<p>This fragment from [basic.life]:</p>\n<blockquote>\n<p id=\"so_30310299_30310501_1\">... or, after <strong>the lifetime of an object has ended</strong> and before the storage which the object occupied is\n  reused or released, any pointer that refers to the storage location where the object will be or was located\n  may be used but only in limited ways... The program has undefined behavior if:<br>\n  \u2014 ...<br>\n  \u2014 the pointer is used to access a non-static data member or call a non-static member function of the\n  object</br></br></p>\n</blockquote>\n<p>stipulates that what you have is undefined behavior. However, there's different language here - \"the object no longer exists\" versus \"the object has ended\", and earlier in [basic.life], it's stated that:</p>\n<blockquote>\n<p id=\"so_30310299_30310501_2\">its initialization is complete.\n  The lifetime of an object of type <code>T</code> <strong>ends</strong> when:<br>\n  \u2014 if <code>T</code> is a class type with a non-trivial destructor (12.4), the destructor call starts, or<br>\n  \u2014 the storage which the object occupies is reused or released.</br></br></p>\n</blockquote>\n<p>On the one hand, you do not have a non-trivial destructor, so [basic.life] suggests that the lifetime of the object isn't ended yet - the storage hasn't be reused or released. On the other hand, [class.dtor] suggests that the object \"no longer exists\" which certainly sounds like it should be a synonym for \"ended\", yet is not. </p>\n<p>I suppose the \"language-lawyer\" answer is: it's technically not undefined behavior and seems perfectly legal. The \"code quality\" answer is: don't do it, it's confusing at best. </p>\n", "LastActivityDate": "2015-05-18T18:34:05.977", "CommentCount": "1", "CreationDate": "2015-05-18T18:34:05.977", "ParentId": "30310299", "Score": "5", "OwnerUserId": "2069064"}, "30310299": {"ViewCount": "1718", "Body": "<p>I have this code:</p>\n<pre><code>struct data {\n  void doNothing() {}\n};\n\nint main() {\n    data* ptr = new data();\n    ptr-&gt;~data();\n    ptr-&gt;doNothing();\n    ::operator delete(ptr);\n}\n</code></pre>\n<p>Note that <code>doNothing()</code> is being called after the object has been destroyed but before its memory was deallocated. It looks like \"object lifetime\" has ended however the pointer still points to proper allocated memory. The member function does not access any member variables.</p>\n<p>Would member function call be legal in this case?</p>\n", "Title": "Is it legal to call member functions after an object has been explicitly destroyed but before its memory was deallocated?", "CreationDate": "2015-05-18T18:21:17.200", "LastActivityDate": "2015-08-02T04:42:06.707", "CommentCount": "7", "FavoriteCount": "6", "PostTypeId": "1", "LastEditDate": "2015-08-02T04:42:06.707", "LastEditorUserId": "963864", "Id": "30310299", "Score": "21", "OwnerUserId": "57428", "Tags": "<c++><destructor><language-lawyer><object-lifetime><explicit-destructor-call>", "AnswerCount": "3"}, "30310428": {"Id": "30310428", "PostTypeId": "2", "Body": "<p>Yes, in the case of the code in the OP. Because the destructor is trivial, calling it doesn't end the object's lifetime. [basic.life]/p1:</p>\n<blockquote>\n<p id=\"so_30310299_30310428_0\">The lifetime of an object of type <code>T</code> ends when:</p>\n<ul>\n<li>if <code>T</code> is a class type with a non-trivial destructor (12.4), the destructor call starts, or</li>\n<li>the storage which the object occupies is reused or released.</li>\n</ul>\n</blockquote>\n<p>[class.dtor]/p5:</p>\n<blockquote>\n<p id=\"so_30310299_30310428_1\">A destructor is trivial if it is not user-provided and if:</p>\n<ul>\n<li>the destructor is not <code>virtual</code>,</li>\n<li>all of the direct base classes of its class have trivial destructors, and</li>\n<li>for all of the non-static data members of its class that are of class type (or array thereof), each such class has a trivial\n  destructor.</li>\n</ul>\n</blockquote>\n<p>No, not in the general case. Invoking a non-static member function after the object's lifetime has ended is UB. [basic.life]/p5:</p>\n<blockquote>\n<p id=\"so_30310299_30310428_2\">[A]fter the lifetime of an object has ended and before the storage which\n  the object occupied is reused or released, any pointer that refers to\n  the storage location where the object will be or was located may be\n  used but only in limited ways. For an object under construction or destruction, see 12.7. Otherwise, such a pointer refers to allocated\n  storage (3.7.4.2), and using the pointer as if the pointer were of\n  type <code>void*</code>, is well-defined. Indirection through such a pointer is\n  permitted but the resulting lvalue may only be used in limited ways,\n  as described below. The program has undefined\n  behavior if:</p>\n<ul>\n<li>[...]</li>\n<li>the pointer is used to access a non-static data member or call a non-static member function of the object, or</li>\n<li>[...]</li>\n</ul>\n</blockquote>\n", "LastEditorUserId": "2756719", "LastActivityDate": "2015-05-18T18:34:22.467", "Score": "28", "CreationDate": "2015-05-18T18:29:10.740", "ParentId": "30310299", "CommentCount": "7", "OwnerUserId": "2756719", "LastEditDate": "2015-05-18T18:34:22.467"}, "30315090": {"Id": "30315090", "PostTypeId": "2", "Body": "<p>The other answers are correct, but leave out one detail:</p>\n<p>It is allowed <strong>if either the destructor or constructor</strong> are trivial.  Other answers have clearly explained that if the destructor is trivial, the lifetime of the original object has not ended.</p>\n<p>But if the constructor is trivial, then an object exists whenever a memory location of appropriate size and alignment is present.  So even with a non-trivial destructor and trivial constructor, a brand-new object exists that you can call members on.</p>\n<p>The verbiage that the other answers left out, that immediately precedes the end-of-lifetime rule they quoted, says</p>\n<blockquote>\n<p id=\"so_30310299_30315090_0\">The lifetime of an object is a runtime property of the object. An object is said to have <em>non-vacuous initialization</em> if it is of a class or aggregate type and it or one of its members is initialized by a constructor other than a trivial default constructor. [ Note: initialization by a trivial copy/move constructor is non-vacuous initialization. \u2014 end note ] The lifetime of an object of type <code>T</code> begins when:</p>\n<ul>\n<li>storage with the proper alignment and size for type <code>T</code> is obtained, and</li>\n<li>if the object has non-vacuous initialization, its initialization is complete.</li>\n</ul>\n</blockquote>\n", "LastActivityDate": "2015-05-19T00:54:25.423", "CommentCount": "1", "CreationDate": "2015-05-19T00:54:25.423", "ParentId": "30310299", "Score": "3", "OwnerUserId": "103167"}});