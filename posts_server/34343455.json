post_cb({"34343563": {"ParentId": "34343455", "CommentCount": "2", "Body": "<p>Yes it reads <code>n-1</code> characters and it never encountered <code>'\\n'</code> but you missed the first point</p>\n<blockquote>\n<p id=\"so_34343455_34343563_0\">end-of-file occurs on the input sequence (in which case the function calls setstate(eofbit));</p>\n</blockquote>\n<p>Since you read in exactly what was in the stream the <code>eofbit</code> gets set and you get the input.</p>\n<p>If we add</p>\n<pre><code>std::cout &lt;&lt; input.eof();\n</code></pre>\n<p>You can see that is indeed what happened(<a href=\"http://coliru.stacked-crooked.com/a/5f1b250dd7cc48bb\" rel=\"nofollow\">live example</a>)</p>\n", "OwnerUserId": "4342498", "PostTypeId": "2", "Id": "34343563", "Score": "1", "CreationDate": "2015-12-17T20:20:48.323", "LastActivityDate": "2015-12-17T20:20:48.323"}, "34343455": {"CommentCount": "0", "ViewCount": "94", "CreationDate": "2015-12-17T20:14:06.617", "LastActivityDate": "2015-12-17T20:20:48.323", "Title": "istream::getline failbit not getting set?", "AcceptedAnswerId": "34343563", "PostTypeId": "1", "Id": "34343455", "Score": "0", "Body": "<pre><code>#include &lt;iostream&gt;\n#include &lt;sstream&gt;\n#include &lt;fstream&gt;\n\nusing namespace std;\n\nint main(){\n\n    istringstream input(\"1234\");\n\n    char c[5];\n\n    while(input.getline(c, 5, '\\n')){\n        cout &lt;&lt; \"OUTPUT: \" &lt;&lt; c &lt;&lt; endl;\n    }\n\n\n}\n</code></pre>\n<p>The output is</p>\n<pre><code>OUTPUT: 1234\n</code></pre>\n<p>when I feel like all sources tell me <code>input</code> should test as <code>false</code> and there should be no ouput. From the standard (N3337) [27.7.2.3]/18:</p>\n<blockquote>\n<p id=\"so_34343455_34343455_0\">Effects: Behaves as an unformatted input function (as described in 27.7.2.3, paragraph 1). After constructing a sentry object, extracts characters and stores them into successive locations of an array whose first element is designated by s. Characters are extracted and stored until one of the following\n  occurs:</p>\n<ol>\n<li>end-of-file occurs on the input sequence (in which case the function calls setstate(eofbit));</li>\n<li>traits::eq(c, delim) for the next available input character c (in which case the input character\n  is extracted but not stored);320</li>\n<li>n is less than one or <strong>n - 1 characters are stored</strong> (in which case the function calls setstate(\n  failbit)).</li>\n</ol>\n</blockquote>\n<p>Since <code>4</code> values get stored, <code>failbit</code> should be getting set. Some other sources give a bit differing but still confusing input on this function. <a href=\"http://www.cplusplus.com/reference/istream/istream/getline/\" rel=\"nofollow\">Cplusplus</a>:</p>\n<blockquote>\n<p id=\"so_34343455_34343455_1\">The failbit flag is set if the function extracts no characters, or if the delimiting character is not found once (n-1) characters have already been written to s. Note that if the character that follows those (n-1) characters in the input sequence is precisely the delimiting character, it is also extracted and the failbit flag is not set (the extracted sequence was exactly n characters long).</p>\n</blockquote>\n<p>Again, the deliminting character <code>'\\n'</code> is not found after the <code>4</code>, and so <code>failbit</code> should be getting set. <a href=\"http://en.cppreference.com/w/cpp/string/basic_string/getline\" rel=\"nofollow\">Cppreference</a> says a similar thing. What am I missing here?</p>\n", "Tags": "<c++><c++11><getline>", "OwnerUserId": "5627734", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_34343455_34343455_0": {"section_id": 2225, "quality": 0.9354838709677419, "length": 29}, "so_34343455_34343563_0": {"section_id": 2215, "quality": 1.0, "length": 8}}, "n3337": {"so_34343455_34343455_0": {"section_id": 2213, "quality": 0.9354838709677419, "length": 29}, "so_34343455_34343563_0": {"section_id": 2203, "quality": 1.0, "length": 8}}, "n4659": {"so_34343455_34343455_0": {"section_id": 2498, "quality": 0.9032258064516129, "length": 28}, "so_34343455_34343563_0": {"section_id": 2488, "quality": 1.0, "length": 8}}}});