post_cb({"33758235": {"ParentId": "30882953", "CommentCount": "0", "Body": "<p>C++ standard says about <code>steady_clock</code>:</p>\n<blockquote>\n<p id=\"so_30882953_33758235_0\"><strong>20.12.7.2 Class steady_clock [time.clock.steady]</strong></p>\n<p id=\"so_30882953_33758235_1\">Objects of class steady_clock represent clocks for which values of time_point never decrease as physical time advances and for which values of time_point advance at a steady rate relative to real time. That is, the clock may not be adjusted.</p>\n</blockquote>\n<p>Compare this to what the standard has to say about <code>system_clock</code>:</p>\n<blockquote>\n<p id=\"so_30882953_33758235_2\"><strong>20.12.7.1 Class system_clock [time.clock.system]</strong></p>\n<p id=\"so_30882953_33758235_3\">Objects of class system_clock represent wall clock time from the system-wide realtime clock.</p>\n</blockquote>\n<p>There's no mention about <code>steady_clock</code> being \"system-wide\", which leads me to believe that, according to the C++ standard, you cannot trust on two <code>steady_clocks</code> in different processes on the same machine having the same epoch.</p>\n", "OwnerUserId": "4029784", "PostTypeId": "2", "Id": "33758235", "Score": "1", "CreationDate": "2015-11-17T13:31:20.910", "LastActivityDate": "2015-11-17T13:31:20.910"}, "30882995": {"ParentId": "30882953", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>No the times are not interchangeable between systems, because C++ doesn't specify the epoch. The epoch is depending on the operating system, different systems can have different epochs.</p>\n<p>If, on the other hand, you share the times only locally, within the same system, then it's okay.</p>\n", "OwnerUserId": "440558", "LastEditorUserId": "440558", "LastEditDate": "2015-06-17T05:40:46.633", "Id": "30882995", "Score": "3", "CreationDate": "2015-06-17T05:34:00.017", "LastActivityDate": "2015-06-17T05:40:46.633"}, "bq_ids": {"n4140": {"so_30882953_33758235_1": {"section_id": 4852, "quality": 0.9583333333333334, "length": 23}, "so_30882953_33758235_3": {"section_id": 4848, "quality": 1.0, "length": 10}}, "n3337": {"so_30882953_33758235_1": {"section_id": 4647, "quality": 0.9583333333333334, "length": 23}, "so_30882953_33758235_3": {"section_id": 4643, "quality": 1.0, "length": 10}}, "n4659": {"so_30882953_33758235_1": {"section_id": 6277, "quality": 0.9583333333333334, "length": 23}, "so_30882953_33758235_3": {"section_id": 6273, "quality": 1.0, "length": 10}}}, "30882953": {"CommentCount": "0", "ViewCount": "383", "PostTypeId": "1", "LastEditorUserId": "1416294", "CreationDate": "2015-06-17T05:29:20.473", "LastActivityDate": "2015-11-17T13:31:20.910", "Title": "Is the epoch of steady_clock relative to when the operating system starts? or to the process itself?", "LastEditDate": "2015-06-17T05:36:11.187", "Id": "30882953", "Score": "3", "Body": "<p>Using <code>boost::chrono::steady_clock</code> or <code>std::chrono::steady_clock</code> is suppose to guarantee that physical time is always monotonic and is not affected by date time changes in the system. Here is my question, if I have two processes that need to be immune to system date time changes, is it enough to exchange just the <code>time_since_epoch</code>? In other words, the time interpretation of the two processes to the same time since epoch will be the same? Specifically I need to answer this question for Windows and QNX.</p>\n<p>EDIT: Both processes are running in the same computer, same operating system and communicate via IPC calls.</p>\n", "Tags": "<c++><windows><boost><qnx><chrono>", "OwnerUserId": "1416294", "AnswerCount": "2"}});