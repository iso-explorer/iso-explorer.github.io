post_cb({"bq_ids": {"n4140": {"so_22795037_22795079_0": {"length": 26, "quality": 0.9629629629629629, "section_id": 3291}, "so_22795037_22795079_1": {"length": 4, "quality": 1.0, "section_id": 3286}}, "n3337": {"so_22795037_22795079_1": {"length": 4, "quality": 1.0, "section_id": 3156}}, "n4659": {"so_22795037_22795079_0": {"length": 26, "quality": 0.9629629629629629, "section_id": 4053}}}, "22795037": {"ViewCount": "214", "Body": "<p>I'm trying to understand how the compiler's default constructor works. I made this example:</p>\n<pre><code>#include &lt;iostream&gt;\n\nclass Base {\n    public:\n    int number;\n};\n\nclass Test1 : public Base {  \n};\n\nclass Test2 {\n    public:\n    Base base;\n};\n\nint main() {\n    Test1 test1;\n    Test2 test2;\n    std::cout&lt;&lt;test1.number&lt;&lt;std::endl;\n    std::cout&lt;&lt;test2.base.number&lt;&lt;std::endl;\n}\n</code></pre>\n<p>The output of this test program is, for <code>test1</code> <code>0</code>, and for <code>test2</code> is a uninitialized (random) number. Now my question is: why in the first case (<code>test1</code>) the compiler's default constructor initialize <code>number</code> to <code>0</code> but for <code>test2</code> it doesn't?</p>\n<p><strong>Edit</strong>: According to answers both makes undefined behavior. So, in this program, what the compiler's default constructor does?</p>\n", "AcceptedAnswerId": "22795079", "Title": "Understanding implicitly declared default costructor", "CreationDate": "2014-04-01T19:22:01.007", "Id": "22795037", "CommentCount": "6", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2014-04-01T19:28:11.147", "LastEditorUserId": "3240801", "LastActivityDate": "2014-04-02T16:53:44.307", "Score": "4", "OwnerUserId": "3240801", "Tags": "<c++><default-constructor>", "AnswerCount": "3"}, "22795077": {"Id": "22795077", "PostTypeId": "2", "Body": "<p>Actually in both cases <code>number</code> is non-default-initialized, meaning its value could be anything. It just so happened that test1 output 0 instead of some random number.</p>\n", "LastEditorUserId": "1373124", "LastActivityDate": "2014-04-01T20:00:28.327", "Score": "3", "CreationDate": "2014-04-01T19:23:51.893", "ParentId": "22795037", "CommentCount": "2", "OwnerUserId": "1373124", "LastEditDate": "2014-04-01T20:00:28.327"}, "22795367": {"Id": "22795367", "PostTypeId": "2", "Body": "<p>Personally, I can never remember what the implicitly defined default constructor does except in the simplest cases.  So I only rely on it for the simplest cases.</p>\n<p>I took a look at the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf\" rel=\"nofollow\">C++11 January working paper</a> (i.e., an edited version of the Standard published after the Standard was approved). Section 12.1 paragraph 6 (p. 243) states, \"The implicitly-defined default constructor performs the set of initializations of the class that would be performed by a user-written default constructor for that class with no ctor-initializer and an empty compound-statement.\"</p>\n<p>If I understand \"ctor-initializer\" and \"compound-statement\" correctly, your implicitly defined constructors are:</p>\n<pre><code>Test1::Test1() {}\n\nTest2::Test2() {}\n\nBase::Base() {}\n</code></pre>\n<p>So, in both <code>Test1</code> and <code>Test2</code>, <code>Base::number</code> is never initialized (<code>Base</code> is, in <code>Test2</code>, but <code>Base</code>'s implicit constructor doesn't initialize <code>number</code>).</p>\n<p>At least, the Standard doesn't require that <code>Base::number</code> be initialized.  Compilers are free to define things that the Standard doesn't define.  The fact that you see a <code>0</code> doesn't mean the operation is defined according to the Standard, it simply means your compiler zeroed things out in this particular case.</p>\n", "LastEditorUserId": "10593", "LastActivityDate": "2014-04-02T16:53:44.307", "Score": "1", "CreationDate": "2014-04-01T19:39:54.173", "ParentId": "22795037", "CommentCount": "4", "OwnerUserId": "10593", "LastEditDate": "2014-04-02T16:53:44.307"}, "22795079": {"Id": "22795079", "PostTypeId": "2", "Body": "<p>The value of an uninitialized object is <em>indeterminate</em> as per 8.5/12:</p>\n<blockquote>\n<p id=\"so_22795037_22795079_0\">If no initializer is specified for an object, the object is default-initialized. When storage for an object with automatic or dynamic storage duration is obtained, the object has an indeterminate value, and if no initialization is performed for the object, that object retains an indeterminate value until that value is replaced (5.17).</p>\n</blockquote>\n<p>Unfortunately for you, <code>int</code> falls into the category of \"non-default-initialized types\" as per \u00a78.5/7:</p>\n<blockquote>\n<p id=\"so_22795037_22795079_1\">To default-initialize an object of type T means:</p>\n<ul>\n<li>if T is a (possibly cv-qualified) class type (Clause 9), the default constructor (12.1) for T is called (and the initialization is ill-formed if T has no default constructor or overload resolution (13.3) results in an ambiguity or in a function that is deleted or inaccessible from the context of the initialization);</li>\n<li>if T is an array type, each element is default-initialized;</li>\n<li>otherwise, no initialization is performed.</li>\n</ul>\n</blockquote>\n", "LastEditorUserId": "493122", "LastActivityDate": "2014-04-01T19:33:47.730", "Score": "5", "CreationDate": "2014-04-01T19:23:58.867", "ParentId": "22795037", "CommentCount": "6", "OwnerUserId": "493122", "LastEditDate": "2014-04-01T19:33:47.730"}});