post_cb({"bq_ids": {"n4140": {"so_27734245_27734325_0": {"length": 11, "quality": 0.8461538461538461, "section_id": 6708}}, "n3337": {"so_27734245_27734422_0": {"length": 27, "quality": 1.0, "section_id": 338}, "so_27734245_27734325_0": {"length": 11, "quality": 0.8461538461538461, "section_id": 6463}}, "n4659": {"so_27734245_27734325_0": {"length": 11, "quality": 0.8461538461538461, "section_id": 8183}}}, "27734245": {"ViewCount": "230", "Body": "<p>I'm compiling some code (which I wrote and compiled fine with the microsoft\ntoolchain) with clang. Here is some piece of code for which I do not understand the error:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;bitset&gt;\n\ntemplate &lt;int N&gt;\nauto foo(int index, std::bitset&lt;N&gt; &amp; already_given)-&gt;int\n{\n        return 0;\n}\n\n\nauto bar()-&gt;void\n{\n        auto const n = 10;\n\n        auto baz = std::bitset&lt;n&gt;{};\n        for (auto i = 0; i &lt; n; i++) {\n                std::cout &lt;&lt; foo(i, baz)\n                          &lt;&lt; std::endl;\n        }\n}\n</code></pre>\n<p>gives me the error <code>no matching function to call to 'foo'</code>.\nWhat is the source of this error?</p>\n", "AcceptedAnswerId": "27734422", "Title": "clang compilation error with template function", "CreationDate": "2015-01-01T20:12:18.337", "Id": "27734245", "CommentCount": "2", "LastEditDate": "2015-01-01T20:28:16.903", "PostTypeId": "1", "LastEditorUserId": "3356233", "LastActivityDate": "2015-01-01T20:34:34.843", "Score": "1", "OwnerUserId": "3356233", "Tags": "<c++><c++11><clang>", "AnswerCount": "2"}, "27734422": {"Id": "27734422", "PostTypeId": "2", "Body": "\n<p><code>std::bitset</code> is a class template that takes its argument as a <code>std::size_t</code>:</p>\n<pre class=\"lang-c++ prettyprint-override\"><code>template&lt; std::size_t N &gt;\nclass bitset;\n</code></pre>\n<p>When doing <code>auto baz = std::bitset&lt;n&gt;{};</code>, <code>n</code> is implicitly-convertible to <code>std::size_t</code>, but during template argument deduction the types must match exactly [temp.deduct.type]/p17:</p>\n<blockquote>\n<p id=\"so_27734245_27734422_0\">If, in the declaration of a function template with a non-type <em>template-parameter</em>, the non-type <em>template-parameter</em> is used in an expression in the function parameter-list and, if the corresponding <em>template-argument</em> is deduced, the <em>template-argument</em> type shall match the type of the <em>template-parameter</em> exactly, except that a <em>template-argument</em> deduced from an array bound may be of any integral type.</p>\n</blockquote>\n<p>The non-type template parameter <code>int N</code> deduces the argument from an integer, which doesn't match the type of the bitset, so you have a deduction failure.</p>\n<p>To fix this, you need to change your parameter to match the type:</p>\n<pre class=\"lang-c++ prettyprint-override\"><code>template &lt;std::size_t N&gt;\nauto foo(int index, std::bitset&lt;N&gt;&amp; already_given) -&gt; int;\n</code></pre>\n", "LastActivityDate": "2015-01-01T20:34:34.843", "Score": "6", "CreationDate": "2015-01-01T20:34:34.843", "ParentId": "27734245", "CommentCount": "0", "OwnerUserId": "701092"}, "27734325": {"Id": "27734325", "PostTypeId": "2", "Body": "<p><code>bitset&lt;N&gt;</code> is a class template declared as follows [template.bitset]:</p>\n<pre><code>namespace std {\n  template &lt;size_t N&gt; class bitset;\n}\n</code></pre>\n<p>Its non-type template parameter is of the type <code>size_t</code>, not <code>int</code>, [support.types]/p6:</p>\n<blockquote>\n<p id=\"so_27734245_27734325_0\">The type <code>size_t</code> is an implementation-defined unsigned integer type that is large enough to contain the size in bytes of any object.</p>\n</blockquote>\n<p>Therefore, you should rewrite your function template as follows:</p>\n<pre><code>#include &lt;cstddef&gt; // size_t\n\ntemplate &lt;std::size_t N&gt;\n//        ~~~~~~~~~~^\nauto foo(int index, std::bitset&lt;N&gt; &amp; already_given)-&gt;int\n{\n        return 0;\n}\n</code></pre>\n", "LastActivityDate": "2015-01-01T20:20:48.983", "Score": "1", "CreationDate": "2015-01-01T20:20:48.983", "ParentId": "27734245", "CommentCount": "1", "OwnerUserId": "3953764"}});