post_cb({"46283690": {"CommentCount": "7", "ViewCount": "96", "PostTypeId": "1", "LastEditorUserId": "8004586", "CreationDate": "2017-09-18T16:00:58.660", "LastActivityDate": "2017-09-18T16:34:43.473", "Title": "Conversion from long to short error", "AcceptedAnswerId": "46284103", "LastEditDate": "2017-09-18T16:10:31.490", "Id": "46283690", "Score": "1", "Body": "<p>I have the following code:</p>\n<pre><code>int main()\n{\n   short s(0);\n   long l(10);\n\n   s += static_cast&lt;short&gt;(l);\n}\n</code></pre>\n<p>I'm compiling this with g++ and I get the following error:</p>\n<pre><code>..\\src\\main.cpp:6:7: warning: conversion to 'short int' from 'int' may alter its value [-Wconversion]\n</code></pre>\n<p>I absolutely have no idea why this is happening, as I thought that \"static_cast\" permitted to avoid this king of warnings.</p>\n<p>Thanks for any help provided.</p>\n", "Tags": "<c++><type-conversion>", "OwnerUserId": "8004586", "AnswerCount": "2"}, "46284103": {"ParentId": "46283690", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Integral promotion of <code>short</code> is required, so widening is unavoidable, however if you perform a <code>static_cast</code> you'll cast the result back to a <code>short</code></p>\n<p>In a nutshell:</p>\n<ul>\n<li>you're performing a <code>short</code> = <code>short</code> + <code>short</code>\n<ul>\n<li>(the <code>static_cast</code> of the <code>long</code> made the second value a <code>short</code>)</li>\n</ul></li>\n<li>Integral promotion happens before the operands are checked for type\n\n<ul>\n<li>so you'll get <code>short</code> = <code>int</code> + <code>int</code></li>\n</ul></li>\n<li>implicit conversion of the resulting <code>int</code> to <code>short</code> creates a warning</li>\n</ul>\n<p>From [expr]:</p>\n<blockquote>\n<p id=\"so_46283690_46284103_0\">Many binary operators that expect operands of arithmetic or enumeration type cause conversions and yield\n  result types in a similar way. The purpose is to yield a common type, which is also the type of the result.\n  This pattern is called the usual <em>arithmetic conversions</em>, which are defined as follows: <br/>...<br/>Otherwise, the integral promotions (7.6) shall be performed on both operands. Then the following\n  rules shall be applied to the promoted operands <br/> - If both operands have the same type, no further conversion is needed.</p>\n</blockquote>\n<p>From [conv.prom]</p>\n<blockquote>\n<p id=\"so_46283690_46284103_1\">A prvalue of an integer type other than <code>bool</code>, <code>char16_t</code>, <code>char32_t</code>, or <code>wchar_t</code> whose integer conversion\n  rank (7.15) is less than the rank of int can be converted to a prvalue of type <code>int</code> if <code>int</code> can represent all the\n  values of the source type; otherwise, the source prvalue can be converted to a prvalue of type <code>unsigned int</code>.</p>\n</blockquote>\n<p>And indeed <code>short</code> has a lower rank than <code>int</code>:</p>\n<p>From [conv.rank]</p>\n<blockquote>\n<p id=\"so_46283690_46284103_2\">The rank of a signed integer type shall be greater than the rank of any signed integer type with a\n  smaller size.</p>\n</blockquote>\n<p>For performing the cast (to make the warning go away), see Richard Crittenden's comments on the OP or <a href=\"https://stackoverflow.com/a/46284115/27678\">Nathan Oliver's answer</a></p>\n", "OwnerUserId": "27678", "LastEditorUserId": "27678", "LastEditDate": "2017-09-18T16:34:43.473", "Id": "46284103", "Score": "2", "CreationDate": "2017-09-18T16:25:23.370", "LastActivityDate": "2017-09-18T16:34:43.473"}, "46284115": {"ParentId": "46283690", "CommentCount": "0", "Body": "<p>Even though you are casting <code>l</code> to a <code>short</code> you still have another conversion that is getting in the way.  When you do</p>\n<pre><code> s += static_cast&lt;short&gt;(l);\n</code></pre>\n<p>[expr.ass]/7 says it is the same as</p>\n<pre><code>s = s + static_cast&lt;short&gt;(l)\n</code></pre>\n<p>And this transformation is what is giving you the <code>int</code> in the warning you receive.</p>\n<p>The reason for this is the built in operators don't exist for types smaller than <code>int</code>.  Since both types are <code>short</code> they are converted to <code>int</code> which gives you an <code>int</code> for the result and now you are trying to assign that <code>int</code> to a <code>short</code> which could overflow.  To workaround this you can use</p>\n<pre><code>s = static_cast&lt;short&gt;(s + l);\n</code></pre>\n<p>which converts the result to a <code>short</code> and then does the assignment.</p>\n", "OwnerUserId": "4342498", "PostTypeId": "2", "Id": "46284115", "Score": "2", "CreationDate": "2017-09-18T16:26:14.810", "LastActivityDate": "2017-09-18T16:26:14.810"}, "bq_ids": {"n4140": {"so_46283690_46284103_0": {"section_id": 5943, "quality": 0.9411764705882353, "length": 48}, "so_46283690_46284103_2": {"section_id": 45, "quality": 0.9230769230769231, "length": 12}, "so_46283690_46284103_1": {"section_id": 21, "quality": 0.9743589743589743, "length": 38}}, "n3337": {"so_46283690_46284103_0": {"section_id": 5714, "quality": 0.9411764705882353, "length": 48}, "so_46283690_46284103_2": {"section_id": 42, "quality": 0.9230769230769231, "length": 12}, "so_46283690_46284103_1": {"section_id": 18, "quality": 0.9743589743589743, "length": 38}}, "n4659": {"so_46283690_46284103_0": {"section_id": 7428, "quality": 0.9411764705882353, "length": 48}, "so_46283690_46284103_2": {"section_id": 46, "quality": 0.9230769230769231, "length": 12}, "so_46283690_46284103_1": {"section_id": 21, "quality": 0.9743589743589743, "length": 38}}}});