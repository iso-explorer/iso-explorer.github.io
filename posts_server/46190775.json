post_cb({"46190775": {"CommentCount": "1", "ViewCount": "306", "PostTypeId": "1", "LastEditorUserId": "817643", "CreationDate": "2017-09-13T06:54:00.320", "LastActivityDate": "2017-09-13T07:16:12.443", "Title": "Terminate called without an active exception", "LastEditDate": "2017-09-13T07:15:48.650", "Id": "46190775", "Score": "1", "Body": "<p>This is my code :</p>\n<pre><code>#include&lt;iostream&gt;\n#include&lt;boost/shared_ptr.hpp&gt;\nusing namespace std;\n\nvoid func()\n{\n    cout&lt;&lt;\"   func # \"&lt;&lt;endl;\n    throw;\n}\n\nint main()\n{\n\n  try\n  {\n      int x = -1;\n      cout&lt;&lt;\"   point 1 \"&lt;&lt;endl;\n      func();\n      cout&lt;&lt;\"   point 2 \"&lt;&lt;endl;\n  }\n  catch (exception&amp; e)\n  {\n      cout&lt;&lt;\"  exception caught \"&lt;&lt;endl;\n      //throw;\n  }\n  cout&lt;&lt;\"   point 3 \"&lt;&lt;endl;\n  return 0;\n}\n</code></pre>\n<p>Now, it's giving this result</p>\n<pre><code>point 1\nfunc #\nterminate called after throwing an instance of in\nAbort\n</code></pre>\n<p>But I was expecting this:</p>\n<pre><code>point 1\nfunc #\nexception caught\n</code></pre>\n<p>What am I missing?<br>\nWhy is terminate being called like this?<br>\nAnd also, what if I also throw from catch block?</br></br></p>\n", "Tags": "<c++><exception>", "OwnerUserId": "3312772", "AnswerCount": "1"}, "46190814": {"ParentId": "46190775", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>This is because <code>func</code> has an empty <code>throw</code> statement. If that statement is executed without an active exception being handled, terminate is <em>supposed</em> to be called.</p>\n<p><a href=\"https://timsong-cpp.github.io/cppwp/n4659/expr.throw#4\" rel=\"nofollow noreferrer\">[expr.throw]/4</a></p>\n<blockquote>\n<p id=\"so_46190775_46190814_0\">If no exception is presently being handled, evaluating a <em>throw-expression</em> with no operand calls std\u200b::\u200b\u200bterminate().</p>\n</blockquote>\n<p>You need to throw <em>something</em> in order to catch. An empty throw statement only has something to throw while an exception is being handled.</p>\n<p>You probably meant to write <code>throw std::exception{};</code></p>\n<blockquote>\n<p id=\"so_46190775_46190814_1\">And also, what if I also throw from catch block?</p>\n</blockquote>\n<p>Assuming you apply the fix, the empty <code>throw</code> in the exception handler (the <code>catch</code> block) will re-throw the exception you caught from inside <code>func</code>. And now <code>std::terminate</code> will be called because an uncaught exception is about to leave the <code>main</code> function.</p>\n", "OwnerUserId": "817643", "LastEditorUserId": "817643", "LastEditDate": "2017-09-13T07:16:12.443", "Id": "46190814", "Score": "5", "CreationDate": "2017-09-13T06:55:57.793", "LastActivityDate": "2017-09-13T07:16:12.443"}, "bq_ids": {"n4140": {"so_46190775_46190814_0": {"section_id": 3342, "quality": 0.7777777777777778, "length": 7}}, "n3337": {"so_46190775_46190814_0": {"section_id": 3212, "quality": 0.7777777777777778, "length": 7}}, "n4659": {"so_46190775_46190814_0": {"section_id": 7674, "quality": 0.8888888888888888, "length": 8}}}});