post_cb({"25999309": {"CommentCount": "3", "ViewCount": "90", "CreationDate": "2014-09-23T15:43:20.307", "LastActivityDate": "2014-09-23T16:44:42.720", "Title": "Is a local scoped variable initialized to an undetermined value, or un-initialized?", "PostTypeId": "1", "Id": "25999309", "Score": "2", "Body": "<p>Pedantically speaking, is <code>x</code> initialized in the following code or not?</p>\n<pre><code>int main()\n{\n    int x;\n}\n</code></pre>\n<p>There are some paragraphs about it in <strong>8.5 Initializers [dcl.init]</strong> (for C++11) but not backed by any examples.</p>\n", "Tags": "<c++><language-lawyer>", "OwnerUserId": "673730", "AnswerCount": "3"}, "25999455": {"ParentId": "25999309", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2014-09-23T15:49:47.347", "Score": "3", "LastEditorUserId": "3647361", "LastEditDate": "2014-09-23T16:44:42.720", "Id": "25999455", "OwnerUserId": "3647361", "Body": "<p>No, it isn't. According to standard, <code>x</code> is <em>default-initialized</em> ([dcl.init]/6):</p>\n<blockquote>\n<p id=\"so_25999309_25999455_0\">To <em>default-initialize</em> an object of type T means:</p>\n<p id=\"so_25999309_25999455_1\">\u2014 if <code>T</code> is a (possibly cv-qualified) class type [...] </p>\n<p id=\"so_25999309_25999455_2\">\u2014 if <code>T</code> is an array type [...]</p>\n<p id=\"so_25999309_25999455_3\">\u2014 <strong>otherwise, no initialization was performed</strong>.</p>\n</blockquote>\n<p><code>x</code> is therefore uninitialized since no initialization is performed. <br>\nHence the object has indeterminate value ([dcl.init]/11):</br></p>\n<blockquote>\n<p id=\"so_25999309_25999455_4\">If no initializer is specified for an object, the object is\n  default-initialized; <strong>if no initialization is performed, an object\n  with automatic or dynamic storage duration has indeterminate value</strong>.</p>\n</blockquote>\n<p>Moreover, if we were to access it's stored, indeterminate value - in other words, perform an lvalue-to-rvalue conversion on it - we would induce undefined behavior ([conv.lval]/1]):</p>\n<blockquote>\n<p id=\"so_25999309_25999455_5\">If the object to which the glvalue refers is [..], <strong>or if the object\n  is uninitialized, a program that necessitates this conversion has\n  undefined behavior</strong>.</p>\n</blockquote>\n", "LastActivityDate": "2014-09-23T16:44:42.720"}, "25999448": {"ParentId": "25999309", "PostTypeId": "2", "CommentCount": "4", "CreationDate": "2014-09-23T15:49:18.667", "Score": "4", "LastEditorUserId": "420683", "LastEditDate": "2014-09-23T15:54:32.223", "Id": "25999448", "OwnerUserId": "420683", "Body": "<p>It is formally <em>default-initialized</em>, which means for <code>int</code>s, that no initialization is performed.</p>\n<p>[dcl.init]/12 (N3797)</p>\n<blockquote>\n<p id=\"so_25999309_25999448_0\">If no initializer is specified for an object, the object is default-initialized; if no initialization is performed, an object with automatic or dynamic storage duration has indeterminate value</p>\n</blockquote>\n<p>[dcl.init]/7</p>\n<blockquote>\n<p id=\"so_25999309_25999448_1\">To <em>default-initialize</em> an object of type <code>T</code> means:</p>\n<ul>\n<li><p id=\"so_25999309_25999448_2\">if <code>T</code> is a (possibly cv-qualified) class type, the default\n  constructor for <code>T</code> is called [...];</p></li>\n<li><p id=\"so_25999309_25999448_3\">if <code>T</code> is an array type, each element is default-initialized;</p></li>\n<li><p id=\"so_25999309_25999448_4\"><strong>otherwise, no initialization is performed</strong>.</p></li>\n</ul>\n</blockquote>\n", "LastActivityDate": "2014-09-23T15:54:32.223"}, "bq_ids": {"n4140": {"so_25999309_25999448_1": {"section_id": 3286, "quality": 1.0, "length": 4}, "so_25999309_25999448_3": {"section_id": 3286, "quality": 1.0, "length": 5}, "so_25999309_25999455_0": {"section_id": 3286, "quality": 1.0, "length": 4}, "so_25999309_25999455_1": {"section_id": 9, "quality": 1.0, "length": 4}, "so_25999309_25999448_0": {"section_id": 3291, "quality": 0.8571428571428571, "length": 12}, "so_25999309_25999455_4": {"section_id": 3291, "quality": 0.8571428571428571, "length": 12}, "so_25999309_25999448_2": {"section_id": 3286, "quality": 1.0, "length": 7}, "so_25999309_25999455_5": {"section_id": 5768, "quality": 0.6666666666666666, "length": 6}}, "n3337": {"so_25999309_25999448_1": {"section_id": 3156, "quality": 1.0, "length": 4}, "so_25999309_25999448_3": {"section_id": 3156, "quality": 1.0, "length": 5}, "so_25999309_25999455_0": {"section_id": 3156, "quality": 1.0, "length": 4}, "so_25999309_25999455_1": {"section_id": 382, "quality": 1.0, "length": 4}, "so_25999309_25999448_0": {"section_id": 3161, "quality": 1.0, "length": 14}, "so_25999309_25999455_4": {"section_id": 3161, "quality": 1.0, "length": 14}, "so_25999309_25999448_2": {"section_id": 3156, "quality": 1.0, "length": 7}, "so_25999309_25999455_5": {"section_id": 5, "quality": 1.0, "length": 9}}, "n4659": {"so_25999309_25999448_3": {"section_id": 4048, "quality": 1.0, "length": 5}, "so_25999309_25999455_1": {"section_id": 408, "quality": 1.0, "length": 4}, "so_25999309_25999448_0": {"section_id": 4053, "quality": 0.8571428571428571, "length": 12}, "so_25999309_25999455_4": {"section_id": 4053, "quality": 0.8571428571428571, "length": 12}, "so_25999309_25999448_2": {"section_id": 4058, "quality": 1.0, "length": 7}, "so_25999309_25999455_5": {"section_id": 7225, "quality": 0.6666666666666666, "length": 6}}}, "25999739": {"ParentId": "25999309", "CommentCount": "0", "CreationDate": "2014-09-23T16:04:36.377", "OwnerUserId": "1688565", "PostTypeId": "2", "Id": "25999739", "Score": "1", "Body": "<p>The way I understand it is that the place in memory for the variable x is reserved, but not set to a value (un-initialized). Because it is un-initialized, any old values there will be considered as 'garbage' int.</p>\n", "LastActivityDate": "2014-09-23T16:04:36.377"}});