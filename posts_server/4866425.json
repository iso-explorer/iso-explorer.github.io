post_cb({"4881444": {"Id": "4881444", "PostTypeId": "2", "Body": "<p>Technically the code is ok, according to the language standard. However, as at least one of the most popular compilers issues a warning for this, it doesn't work in practice.</p>\n<p>\"In theory, there is no difference between theory and practice. In pratice, there is.\"</p>\n", "LastActivityDate": "2011-02-03T00:11:30.687", "CommentCount": "0", "CreationDate": "2011-02-03T00:11:30.687", "ParentId": "4866425", "Score": "4", "OwnerUserId": "597607"}, "4866425": {"ViewCount": "2513", "Body": "<p>I'm well aware of the <a href=\"https://stackoverflow.com/questions/54585/when-should-you-use-a-class-vs-a-struct-in-c\">difference between class and struct</a>, however I'm struggling to authoritatively say if this is well defined:</p>\n<pre><code>// declare foo (struct)\nstruct foo;\n\n// define foo (class)\nclass foo {\n};\n\n// instance of foo, claiming to be a struct again! Well defined?\nstruct foo bar;\n\n// mixing class and struct like this upsets at least one compiler (names are mangled differently)\nconst foo&amp; test() {\n   return bar;\n}\n\nint main() {\n   test();\n   return 0;\n}\n</code></pre>\n<p>If this is undefined behaviour can someone point me in the direction of an authoritative (i.e. chapter and verse from ISO) reference? </p>\n<p>The compiler with problems handling this (<a href=\"http://www.forum.nokia.com/Develop/Other_Technologies/Symbian_C++/Tools/\" rel=\"nofollow noreferrer\">Carbide 2.7</a>) is relatively old and all the other compilers I've tried it on are perfectly happy with this, but clearly that doesn't prove anything.</p>\n<p>My intuition was this ought to be undefined behaviour but I can't find anything to confirm this and I'm surprised that none of the GCC versions or <a href=\"http://www.comeaucomputing.com/tryitout/\" rel=\"nofollow noreferrer\">Comeau</a> so much as warned about it.</p>\n", "AcceptedAnswerId": "4866845", "Title": "Mixing class and struct", "CreationDate": "2011-02-01T18:23:31.420", "Id": "4866425", "CommentCount": "6", "FavoriteCount": "3", "PostTypeId": "1", "LastEditDate": "2017-05-23T10:31:24.007", "LastEditorUserId": "-1", "LastActivityDate": "2011-02-03T00:11:30.687", "Score": "16", "OwnerUserId": "168175", "Tags": "<c++><class><struct><undefined-behavior>", "AnswerCount": "6"}, "4866852": {"Id": "4866852", "PostTypeId": "2", "Body": "<p>From <a href=\"https://stackoverflow.com/questions/468486/warning-c4099-type-name-first-seen-using-class-now-seen-using-struct-ms-vs\">Warning C4099: type name first seen using 'class' now seen using 'struct' (MS VS 2k8)</a> it appears that at least some compilers mangle differently depending on keyword used, so best not to rely on it even if it's technically allowed (of which I can't find a confirming reference).</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2011-02-01T19:05:57.427", "Score": "4", "CreationDate": "2011-02-01T19:05:57.427", "ParentId": "4866425", "CommentCount": "0", "OwnerUserId": "251738", "LastEditDate": "2017-05-23T12:10:35.467"}, "4866623": {"Id": "4866623", "PostTypeId": "2", "Body": "<p>MSVC10 throws a warning, and the warning page states that the type given in the definition will be used.</p>\n<p><a href=\"http://msdn.microsoft.com/en-us/library/695x5bes.aspx\" rel=\"nofollow\">http://msdn.microsoft.com/en-us/library/695x5bes.aspx</a></p>\n", "LastActivityDate": "2011-02-01T18:43:48.923", "CommentCount": "2", "CreationDate": "2011-02-01T18:43:48.923", "ParentId": "4866425", "Score": "0", "OwnerUserId": "298661"}, "4866615": {"Id": "4866615", "PostTypeId": "2", "Body": "<p>In C++, a struct is a class.  Specifically:</p>\n<blockquote>\n<p id=\"so_4866425_4866615_0\">A structure is a class defined with\n  the class-key <code>struct</code>.  (ISO/IEC FDIS\n  14882:1998(E) 9-4)</p>\n</blockquote>\n<p>This implies that your class, which was not <em>defined</em> with <code>struct</code>, is definitely not a struct.  Therefore, your forward declaration with the struct class-key is erroneous.  I'm not aware of any part of the specification that allows a forward declaration to use a class-key that is clearly wrong.  I'm sure that the lenient compilers in question treat structs and classes equally and are glossing over the incorrect declaration.  An error may not be required from the compiler in this scenario, but neither should it be unexpected.</p>\n", "LastActivityDate": "2011-02-01T18:43:28.023", "CommentCount": "12", "CreationDate": "2011-02-01T18:43:28.023", "ParentId": "4866425", "Score": "3", "OwnerUserId": "214146"}, "4866520": {"Id": "4866520", "PostTypeId": "2", "Body": "<p>I have no idea whether or not this is undefined (or any of the other categories of not-strictly-conforming) per the C standard, but I do know that if you have two translation units that don't agree on whether a type 'foo' is declared as a 'class' or a 'struct', like so:</p>\n<h3>TU 1</h3>\n<pre><code>struct foo;\nvoid f(foo&amp;) { ... }\n</code></pre>\n<h3>TU 2</h3>\n<pre><code>class foo { ... };\nvoid f(foo&amp;);\n\nvoid g()\n{\n  foo x;\n  f(x);\n}\n</code></pre>\n<p>then, at least some compilers (notably MSVC++) will mangle the name of <code>f</code> differently in each translation unit, so the definition of <code>f</code> in TU 1 does not satisfy the reference to <code>f</code> in TU 2 and you get a link error.  This comes up in real life when you have a header <code>A.h</code> that defines class <code>A</code> and needs to refer to classes <code>B</code>, <code>C</code>, and <code>D</code> but a forward declaration of them suffices (so it, quite sensibly, does <em>not</em> include <code>B.h</code> etc) -- you better use the same keyword for those forward declarations that the actual definitions do!</p>\n", "LastActivityDate": "2011-02-01T18:35:24.900", "CommentCount": "3", "CreationDate": "2011-02-01T18:35:24.900", "ParentId": "4866425", "Score": "0", "OwnerUserId": "388520"}, "bq_ids": {"n4140": {"so_4866425_4866845_0": {"length": 21, "quality": 1.0, "section_id": 5857}}, "n3337": {"so_4866425_4866845_0": {"length": 21, "quality": 1.0, "section_id": 5627}}, "n4659": {"so_4866425_4866845_0": {"length": 21, "quality": 1.0, "section_id": 7336}}}, "4866845": {"Id": "4866845", "PostTypeId": "2", "Body": "<p>It looks to me like it's defined behavior. In particular, \u00a79.1/2 says:</p>\n<blockquote>\n<p id=\"so_4866425_4866845_0\">A declaration consisting solely of <code>class-key identifier ;</code> is either a redeclaration of the\n  name in the current scope or a forward declaration of the identifier as a class name. It introduces the class name into the current scope.</p>\n</blockquote>\n<p>The standard distinguishes between using <code>class</code>, <code>struct</code> or <code>union</code> when <em>defining</em> a class, but here, talking about a declaration, no such distinction is made -- using one <code>class-key</code> is equivalent to any other.</p>\n", "LastActivityDate": "2011-02-01T19:04:53.510", "CommentCount": "11", "CreationDate": "2011-02-01T19:04:53.510", "ParentId": "4866425", "Score": "10", "OwnerUserId": "179910"}});