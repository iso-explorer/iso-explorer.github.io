post_cb({"1122012": {"ParentId": "1121971", "CommentCount": "0", "Body": "<p>As Mehrdad said, it concatenates the operands, like:</p>\n<pre><code>#define MyMacro(A,B) A ## B\nMyMacro(XYZ, 123) // Equivalent to XYZ123\n</code></pre>\n<p>Note that MISRA C suggests that this operand (and the <code>#</code> 'stringify' operand) should not be used due to the compiler dependent order of calculation.</p>\n", "OwnerUserId": "72791", "PostTypeId": "2", "Id": "1122012", "Score": "2", "CreationDate": "2009-07-13T20:56:31.580", "LastActivityDate": "2009-07-13T20:56:31.580"}, "1122066": {"ParentId": "1121971", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>This is also standard C++, contrary to what <a href=\"https://stackoverflow.com/questions/1121971/what-is-the-purpose-of-the-operator-in-c-and-what-is-it-called/1122005#1122005\">Raldolpho</a> stated.</p>\n<p>Here is the relevant information:</p>\n<blockquote>\n<p id=\"so_1121971_1122066_0\">16.3.3 The ## operator [cpp.concat]</p>\n<p id=\"so_1121971_1122066_1\">1 A <code>##</code> preprocessing token shall not\n  occur at the beginning or at the end\n  of a replacement list for either form\n  of macro definition.</p>\n<p id=\"so_1121971_1122066_2\">2 If, in the\n  replacement list, a parameter is\n  immediately preceded or followed by a\n  <code>##</code> preprocessing token, the parameter is replaced by the corresponding\n  argument\u2019s preprocessing token\n  sequence.</p>\n<p id=\"so_1121971_1122066_3\">3 For both object-like and\n  function-like macro invocations,\n  before the replacement list is\n  reexamined for more macro names to\n  replace, each instance of a <code>##</code>\n  preprocessing token in the replacement\n  list (not from an argument) is deleted\n  and the preceding preprocessing token\n  is concatenated with the following\n  preprocessing token. If the result is\n  not a valid preprocessing token, the\n  behavior is undefined. The resulting\n  token is available for further macro\n  replacement. The order of evaluation\n  of <code>##</code> operators is unspecified.</p>\n</blockquote>\n", "OwnerUserId": "87234", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:34:15.983", "Id": "1122066", "Score": "6", "CreationDate": "2009-07-13T21:06:36.583", "LastActivityDate": "2009-07-13T21:06:36.583"}, "1122005": {"ParentId": "1121971", "PostTypeId": "2", "CommentCount": "7", "Body": "<p>This isn't Standard C++, it's Standard C. Check out <a href=\"http://en.wikipedia.org/wiki/C_preprocessor#Token_concatenation\" rel=\"nofollow noreferrer\">this Wikipedia article</a>.</p>\n<p>And is it a good practice? In general, I hate pre-processor macros and think they're as bad as (if not worse than) Goto. </p>\n<p><strong>Edit:</strong> Apparently I'm being misunderstood by what I meant by \"This isn't Standard C++, it's Standard C\". Many people are reading the first phrase and failing to read the second. My intent is to point out that macros were inherited by C++ from C. </p>\n", "OwnerUserId": "12716", "LastEditorUserId": "12716", "LastEditDate": "2009-07-14T14:47:54.367", "Id": "1122005", "Score": "3", "CreationDate": "2009-07-13T20:55:39.647", "LastActivityDate": "2009-07-14T14:47:54.367"}, "1121971": {"CommentCount": "1", "ViewCount": "1581", "PostTypeId": "1", "LastEditorUserId": "13313", "CreationDate": "2009-07-13T20:51:32.963", "LastActivityDate": "2009-07-14T14:47:54.367", "Title": "What is the purpose of the ## operator in C++, and what is it called?", "AcceptedAnswerId": "1121997", "LastEditDate": "2009-07-13T20:55:36.293", "Id": "1121971", "Score": "5", "Body": "<p>I was looking through the DXUTCore project that comes with the DirectX March 2009 SDK, and noticed that instead of making normal accessor methods, they used macros to create the generic accessors, similar to the following:</p>\n<pre><code>#define GET_ACCESSOR( x, y )  inline x Get##y()  { DXUTLock l; return m_state.m_##y;};\n...\n\nGET_ACCESSOR( WCHAR*, WindowTitle );\n</code></pre>\n<p>It seems that the ## operator just inserts the text from the second argument into the macro to create a function operating on a variable using that text.  Is this something that is standard in C++ (i.e. not Microsoft specific)? Is its use considered good practice? And, what is that operator called?</p>\n", "Tags": "<c++><c><macros>", "OwnerUserId": "23504", "AnswerCount": "7"}, "1121995": {"ParentId": "1121971", "CommentCount": "5", "Body": "<p>It's a preprocessing operator that concatenates left and right operands (without inserting whitespace). I don't think it's Microsoft specific.</p>\n", "OwnerUserId": "33708", "PostTypeId": "2", "Id": "1121995", "Score": "5", "CreationDate": "2009-07-13T20:53:51.367", "LastActivityDate": "2009-07-13T20:53:51.367"}, "1122000": {"ParentId": "1121971", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>it's the concatenation for macro arguments i.e.</p>\n<pre><code>GET_ACCESSOR (int, Age);\n</code></pre>\n<p>will be expended to</p>\n<pre><code>inline int GetAge()  { DXUTLock l; return m_state.m_Age;};\n</code></pre>\n", "OwnerUserId": "89299", "LastEditorUserId": "2509", "LastEditDate": "2009-07-13T21:21:39.440", "Id": "1122000", "Score": "1", "CreationDate": "2009-07-13T20:55:02.690", "LastActivityDate": "2009-07-13T21:21:39.440"}, "1121997": {"ParentId": "1121971", "CommentCount": "0", "Body": "<p><a href=\"http://msdn.microsoft.com/en-us/library/09dwwt6y.aspx\" rel=\"noreferrer\">Token-pasting operator</a>, used by the pre-processor to join two tokens into a single token.</p>\n", "OwnerUserId": "67132", "PostTypeId": "2", "Id": "1121997", "Score": "16", "CreationDate": "2009-07-13T20:54:05.407", "LastActivityDate": "2009-07-13T20:54:05.407"}, "bq_ids": {"n4140": {"so_1121971_1122066_2": {"section_id": 528, "quality": 1.0, "length": 15}, "so_1121971_1122066_1": {"section_id": 527, "quality": 1.0, "length": 11}, "so_1121971_1122066_3": {"section_id": 529, "quality": 0.9361702127659575, "length": 44}}, "n3337": {"so_1121971_1122066_2": {"section_id": 519, "quality": 1.0, "length": 15}, "so_1121971_1122066_1": {"section_id": 518, "quality": 1.0, "length": 11}, "so_1121971_1122066_3": {"section_id": 520, "quality": 0.9361702127659575, "length": 44}}, "n4659": {"so_1121971_1122066_2": {"section_id": 549, "quality": 1.0, "length": 15}, "so_1121971_1122066_1": {"section_id": 548, "quality": 1.0, "length": 11}, "so_1121971_1122066_3": {"section_id": 550, "quality": 0.9361702127659575, "length": 44}}}, "1122039": {"ParentId": "1121971", "CommentCount": "0", "Body": "<p>It is token pasting operator allowed by Standard C++ (see 16.3.3 for details).\nAs for good practice: using macro is not a good practice IMHO (in C++).</p>\n", "OwnerUserId": "123111", "PostTypeId": "2", "Id": "1122039", "Score": "2", "CreationDate": "2009-07-13T21:01:09.697", "LastActivityDate": "2009-07-13T21:01:09.697"}});