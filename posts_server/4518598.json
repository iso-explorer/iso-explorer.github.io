post_cb({"4518646": {"Id": "4518646", "PostTypeId": "2", "Body": "<p>The claim <a href=\"http://www.programmersheaven.com/mb/CandCPP/109711/109711/recursive-main/\" rel=\"noreferrer\">here</a> is that it is indeed specifically forbidden:</p>\n<blockquote>\n<p id=\"so_4518598_4518646_0\">Well, the standard states:</p>\n<p id=\"so_4518598_4518646_1\"><strong>3.6.1.3</strong>\n<br>\"The function main shall not be used within a program.\"</br></p>\n<p id=\"so_4518598_4518646_2\"><strong>5.2.2.9</strong>\n<br>\"Recursive calls are permitted, except to the function named main\"</br></p>\n</blockquote>\n<p>You can, of course, do this:</p>\n<pre><code>int main(int argc, char* argv[]) {\n    return foo(argc, argv);\n}\nint foo(int argc, char* argv[]) {\n    if (some_condition) {\n        return foo(argc, argv);\n    }\n    return 0;\n}\n</code></pre>\n<p>(Note I added a get-out clause. I can't even <em>hypothetically</em> code infinite recursion, it repeats on me.)</p>\n", "LastActivityDate": "2010-12-23T12:13:39.440", "CommentCount": "2", "CreationDate": "2010-12-23T12:13:39.440", "ParentId": "4518598", "Score": "22", "OwnerUserId": "157247"}, "4518625": {"Id": "4518625", "PostTypeId": "2", "Body": "<p>According to the standard in 3.6.1/3, it's not :</p>\n<blockquote>\n<p id=\"so_4518598_4518625_0\">The function <code>main</code> <strong>shall not be used</strong>\n  (3.2) <strong>within a program</strong></p>\n</blockquote>\n<p>The definition of <em>used</em> being :</p>\n<blockquote>\n<p id=\"so_4518598_4518625_1\">An object or non-overloaded\n  function is used if <strong>its name appears in a potentially-evaluated expression</strong>.</p>\n</blockquote>\n", "LastEditorUserId": "451980", "LastActivityDate": "2010-12-23T13:20:13.073", "Score": "50", "CreationDate": "2010-12-23T12:11:22.113", "ParentId": "4518598", "CommentCount": "3", "OwnerUserId": "451980", "LastEditDate": "2010-12-23T13:20:13.073"}, "9554900": {"Id": "9554900", "PostTypeId": "2", "Body": "<p>Other people have addressed the standards part.  However, I'd like to note that g++ (at least 4.6.2) will reject this if you use <code>-pedantic-errors</code> with at least one of these errors (depending on <code>main</code> signature):</p>\n<pre><code>error: ISO C++ forbids calling \u2018::main\u2019 from within program [-pedantic]\nerror: ISO C++ forbids taking address of function \u2018::main\u2019 [-pedantic]\n</code></pre>\n", "LastActivityDate": "2012-03-04T12:36:35.073", "CommentCount": "0", "CreationDate": "2012-03-04T12:36:35.073", "ParentId": "4518598", "Score": "1", "OwnerUserId": "47773"}, "4519407": {"Id": "4519407", "PostTypeId": "2", "Body": "<p>I'll do the fish and explain why this is <em>verboten</em>.  Before a C or C++ program can start running, the CRT has to be initialized first.  Open stdin/out/err, call initializers, that sort of thing.  There are two basic strategies to get this done, a heavy platform implementation detail.</p>\n<ul>\n<li><p>The program's start address points to the CRT init function, which eventually calls main().  Common on full-featured operating systems that have a fancy loader which can support arbitrary sections in the executable image.</p></li>\n<li><p>The compiler injects code into the main() function that calls the CRT initialization function.  The start function is always main().  Common on embedded platforms with limited loader capabilities.  Recursing main() is now a problem, the CRT startup code will be called again with an unpredictable stack state.</p></li>\n</ul>\n", "LastEditorUserId": "17034", "LastActivityDate": "2011-01-04T14:31:27.600", "Score": "37", "CreationDate": "2010-12-23T14:01:35.823", "ParentId": "4518598", "CommentCount": "7", "OwnerUserId": "17034", "LastEditDate": "2011-01-04T14:31:27.600"}, "4518651": {"Id": "4518651", "PostTypeId": "2", "Body": "<p>It is not legal. Read 3.6.1-3 :</p>\n<blockquote>\n<p id=\"so_4518598_4518651_0\">The function main shall not be used\n  (3.2) within a program. The linkage\n  (3.5) of main is\n  implementation-defined. A program that\n  declares main to be inline or static\n  is ill-formed. The name main is not\n  otherwise reserved. [Example: member\n  functions, classes, and enumerations\n  can be called main, as can entities in\n  other namespaces. ]</p>\n</blockquote>\n", "LastActivityDate": "2010-12-23T12:14:16.583", "CommentCount": "0", "CreationDate": "2010-12-23T12:14:16.583", "ParentId": "4518598", "Score": "9", "OwnerUserId": "476681"}, "bq_ids": {"n4140": {"so_4518598_4518646_2": {"length": 5, "quality": 0.625, "section_id": 5996}, "so_4518598_4518625_1": {"length": 6, "quality": 0.75, "section_id": 7040}, "so_4518598_4518651_0": {"length": 25, "quality": 0.8333333333333334, "section_id": 7147}}, "n3337": {"so_4518598_4518646_2": {"length": 7, "quality": 0.875, "section_id": 5764}, "so_4518598_4518625_1": {"length": 5, "quality": 0.625, "section_id": 6785}, "so_4518598_4518651_0": {"length": 25, "quality": 0.8333333333333334, "section_id": 6891}}, "n4659": {"so_4518598_4518646_2": {"length": 5, "quality": 0.625, "section_id": 7497}, "so_4518598_4518625_1": {"length": 6, "quality": 0.75, "section_id": 8537}, "so_4518598_4518651_0": {"length": 24, "quality": 0.8, "section_id": 8648}}}, "4518598": {"ViewCount": "3297", "Body": "<p>I read that the C++ standard forbids recursion in <code>main()</code>, but g++ compiles the following code without complaint:</p>\n<pre><code>int main()\n{\n    main();\n}\n</code></pre>\n<p>Can anyone clarify this?</p>\n", "AcceptedAnswerId": "4518625", "Title": "Is it legal to recurse into main() in C++?", "CreationDate": "2010-12-23T12:07:29.843", "Id": "4518598", "CommentCount": "13", "FavoriteCount": "12", "PostTypeId": "1", "LastEditDate": "2011-01-04T13:22:18.637", "LastEditorUserId": "95135", "LastActivityDate": "2012-03-04T12:36:35.073", "Score": "45", "OwnerUserId": "47322", "Tags": "<c++><recursion><standards><main>", "AnswerCount": "5"}});