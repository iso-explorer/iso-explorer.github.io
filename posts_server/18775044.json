post_cb({"18775126": {"ParentId": "18775044", "PostTypeId": "2", "CommentCount": "10", "Body": "<p>Always use <code>nullptr</code> when initializing pointers to a <em>null pointer value</em>, that's what it is meant for according to <strong>draft n3485</strong>.</p>\n<blockquote>\n<p id=\"so_18775044_18775126_0\"><strong>[lex.nullptr] paragraph 1</strong></p>\n<p id=\"so_18775044_18775126_1\">The pointer literal is the keyword nullptr. It is a prvalue of type\n  std::nullptr_t. [ Note: std::nullptr_t is a distinct type that is\n  neither a pointer type nor a pointer to member type; rather, a prvalue\n  of this type is  a null pointer constant and can be converted to a\n  null pointer value or null member pointer value. [...] \u2014 end note ]</p>\n</blockquote>\n<p>Now onto the use of <code>NULL</code>. </p>\n<p>According to the same draft it shall be defined as follows.</p>\n<blockquote>\n<p id=\"so_18775044_18775126_2\"><strong>[diff.null] paragraph 1</strong></p>\n<p id=\"so_18775044_18775126_3\">The macro NULL, [...] is an\n  <strong>implementation-defined C ++ null pointer constant</strong> in this\n  International Standard.</p>\n</blockquote>\n<p>and <em>null pointer constant</em> as follows.</p>\n<blockquote>\n<p id=\"so_18775044_18775126_4\"><strong>[conv.ptr] paragraph 1</strong></p>\n<p id=\"so_18775044_18775126_5\">A <strong>null pointer constant</strong> is an integral constant expression [...]\n  prvalue of integer type that evaluates to zero or a prvalue of type\n  std::nullptr_t.</p>\n</blockquote>\n<p>That is, it is <em><a href=\"https://stackoverflow.com/questions/2397984/undefined-unspecified-and-implementation-defined-behavior\">implementation-defined behavior</a></em> whether <code>NULL</code> is defined as an integer prvalue evaluating to zero, or a prvalue of type <code>std::nullptr_t</code>. If the given implementation of the standard library chooses the former, then <code>NULL</code> can be assigned to integer types and it's guaranteed it will be set to zero, but if the later is chosen, then the compiler is allowed to issue an error and declare the program ill-formed.</p>\n<p>In other words, although conditionally valid [<em>read IB</em>], initializing an integer using <code>NULL</code> is most probably a bad idea, just use 0 instead.</p>\n<p>On the other hand, according to the above <code>NULL</code> is guaranteed to initialize pointers to a <em>null pointer value</em>, much like <code>nullptr</code> does, but while <code>NULL</code> is a macro, what accompanies several caveats, <code>nullptr</code> is prvalue of a specific type, for which type checking and conversion rules apply. That's mostly why <code>nullptr</code> should be prefered.</p>\n", "OwnerUserId": "801438", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T11:51:29.143", "Id": "18775126", "Score": "9", "CreationDate": "2013-09-12T22:10:17.340", "LastActivityDate": "2013-09-12T23:04:23.183"}, "18775044": {"CommentCount": "1", "AcceptedAnswerId": "18775126", "CreationDate": "2013-09-12T22:03:36.927", "LastActivityDate": "2013-09-12T23:04:23.183", "PostTypeId": "1", "ViewCount": "2167", "FavoriteCount": "1", "Title": "C++11- Use nullptr all the time?", "Id": "18775044", "Score": "6", "Body": "<p>I'm just a little bit confused.</p>\n<p>When should I use nullptr? </p>\n<p>I've read on some sites that it should always be used, but I can't set nullptr for a non-pointer for example:</p>\n<pre><code>int myVar = nullptr; // Not a pointer ofcourse\n</code></pre>\n<p>Should I always use NULL non-pointers and nullptr for pointers?</p>\n<p>Thanks to any help! I'm very new to c++ 11 (and c++ overall).</p>\n", "Tags": "<pointers><c++11><nullptr>", "OwnerUserId": "2774429", "AnswerCount": "2"}, "18775137": {"ParentId": "18775044", "CommentCount": "6", "Body": "<p>consider the two function overloads:</p>\n<pre><code>void foo(int)\nvoid foo(int*)\n</code></pre>\n<p>in C++, people tend to use <code>0</code> as a null value. Other people use <code>NULL</code>. (<code>NULL</code> is really just a fancy macro for <code>0</code>)</p>\n<p>If you call <code>foo(0)</code> or <code>foo(NULL)</code>, it becomes ambiguous which one should be called. <code>foo(nullptr)</code> clears up this ambiguity, and will always call <code>foo(int*)</code>.</p>\n", "OwnerUserId": "2752296", "PostTypeId": "2", "Id": "18775137", "Score": "2", "CreationDate": "2013-09-12T22:10:54.547", "LastActivityDate": "2013-09-12T22:10:54.547"}, "bq_ids": {"n4140": {"so_18775044_18775126_3": {"section_id": 2515, "quality": 0.7777777777777778, "length": 7}, "so_18775044_18775126_1": {"section_id": 5366, "quality": 0.8888888888888888, "length": 32}}, "n3337": {"so_18775044_18775126_1": {"section_id": 5162, "quality": 0.8888888888888888, "length": 32}, "so_18775044_18775126_3": {"section_id": 6460, "quality": 0.7777777777777778, "length": 7}, "so_18775044_18775126_5": {"section_id": 36, "quality": 0.9285714285714286, "length": 13}}, "n4659": {"so_18775044_18775126_3": {"section_id": 3249, "quality": 0.6666666666666666, "length": 6}, "so_18775044_18775126_1": {"section_id": 6791, "quality": 0.8888888888888888, "length": 32}}}});