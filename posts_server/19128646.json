post_cb({"bq_ids": {"n4140": {"so_19128646_19128780_1": {"length": 14, "quality": 1.0, "section_id": 336}}, "n3337": {"so_19128646_19128780_1": {"length": 14, "quality": 1.0, "section_id": 326}}, "n4659": {"so_19128646_19128780_1": {"length": 14, "quality": 1.0, "section_id": 345}}}, "19128646": {"ViewCount": "266", "Body": "<p><strong>C++</strong></p>\n<p>None of these template functions</p>\n<pre><code>template&lt;typename T&gt; void foo(T par = nullptr) {return;}  //#1\ntemplate&lt;typename T&gt; void foo(T par = std::nullptr_t(nullptr)) {return;}  //#2\ntemplate&lt;typename T&gt; void foo(T par = int(0)) {return;}  //#3\n</code></pre>\n<p>allow anything with the following zero-argument call to compile:</p>\n<pre><code>foo();\n</code></pre>\n<p>although calling <code>foo</code> with any value works (e.g. <code>foo(2)</code>).</p>\n<p><code>nullptr</code> has a specific type, which is <code>std::nullptr_t</code>, so I didn't think the default parameter needed extra type qualification in #1. The type of the default parameter is explicitly provided in #2 and #3, so I didn't think there was any type ambiguity there.</p>\n<p>What is wrong here? Is there a proper way to do default parameters with template functions?</p>\n", "AcceptedAnswerId": "19128780", "Title": "Template function default parameter and type inference", "CreationDate": "2013-10-02T01:30:59.953", "Id": "19128646", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2013-10-02T01:52:30.457", "Score": "0", "OwnerUserId": "2090317", "Tags": "<c++><templates><type-inference><default-parameters><template-function>", "AnswerCount": "1"}, "19128780": {"Id": "19128780", "PostTypeId": "2", "Body": "<p>Your examples don't work because template argument deduction fails for <code>foo()</code>. With C++11 you're allowed to specify default template arguments for function templates, so you change the definition to</p>\n<pre><code>template&lt;typename T = void*&gt; void foo(T par = nullptr) {return;}\n</code></pre>\n<p>With C++03 I don't know of any way other than to explicitly specify the template argument.</p>\n<p>The reason the template argument is not deduced from the default argument is because the standard states that is a non-deduced context.</p>\n<p>From N3691, <em>\u00a714.8.2.5/5</em></p>\n<blockquote>\n<p id=\"so_19128646_19128780_0\">The non-deduced contexts are:</p>\n<p id=\"so_19128646_19128780_1\">...<br/><br/>   \u2014 A template parameter used in the parameter type of a\n  function parameter that has a default argument that is being used in\n  the call for which argument deduction is being done.</p>\n</blockquote>\n", "LastEditorUserId": "241631", "LastActivityDate": "2013-10-02T01:52:30.457", "Score": "1", "CreationDate": "2013-10-02T01:47:28.717", "ParentId": "19128646", "CommentCount": "0", "OwnerUserId": "241631", "LastEditDate": "2013-10-02T01:52:30.457"}});