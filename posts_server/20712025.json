post_cb({"20712042": {"ParentId": "20712025", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The statement  </p>\n<pre><code>j= test(++i); \n</code></pre>\n<p>will invoke <strong><a href=\"http://en.wikipedia.org/wiki/Undefined_behavior\" rel=\"nofollow\">undefined behavior</a></strong>. On expanding macro <code>test(X)</code> it looks like  </p>\n<pre><code>j = ++i * ++i; //i is modifying twice.   \n</code></pre>\n<p>Here <code>i</code> is modifying twice between two sequence points.   </p>\n<h2><a href=\"http://www.c-faq.com/expr/seqpoints.html\" rel=\"nofollow\">C-FAQ-3.8:</a>.</h2>\n<blockquote>\n<p id=\"so_20712025_20712042_0\">Between the previous and next sequence point an object shall have its stored value modified at most once by the evaluation of an expression. Furthermore, the prior value shall be accessed only to determine the value to be stored.  </p>\n</blockquote>\n<h2>C11: 3.4.3; undefined behavior:</h2>\n<blockquote>\n<p id=\"so_20712025_20712042_1\">behavior, upon use of a nonportable or erroneous program construct or of erroneous data,\n  for which this International Standard imposes no requirements  </p>\n<p id=\"so_20712025_20712042_2\"><strong>NOTE</strong>  Possible undefined behavior ranges from ignoring the situation completely with unpredictable\n  results, to behaving during translation or program execution in a documented manner characteristic of the\n  environment (with or without the issuance of a diagnostic message), to terminating a translation or\n  execution (with the issuance of a diagnostic message).</p>\n</blockquote>\n", "OwnerUserId": "2455888", "LastEditorUserId": "2455888", "LastEditDate": "2013-12-20T21:39:39.603", "Id": "20712042", "Score": "0", "CreationDate": "2013-12-20T21:14:18.363", "LastActivityDate": "2013-12-20T21:39:39.603"}, "bq_ids": {"n4140": {"so_20712025_20712042_2": {"section_id": 5768, "quality": 0.9259259259259259, "length": 25}}, "n3337": {"so_20712025_20712042_2": {"section_id": 5541, "quality": 0.9259259259259259, "length": 25}}, "n4659": {"so_20712025_20712042_2": {"section_id": 7225, "quality": 0.9259259259259259, "length": 25}}}, "20712043": {"ParentId": "20712025", "PostTypeId": "2", "CommentCount": "14", "Body": "<p>Macros effectively copy/paste. So, it turns into:</p>\n<pre><code>++i * ++i\n</code></pre>\n<p>Don't think of it like a function. And, this is undefined behavior because it modifies <code>i</code> twice between sequence points.</p>\n<p>Also, macros are evil. Don't use them. (And for the obnoxious downvoter: Very very rarely macros are a necessary evil. However, they are still evil)</p>\n", "OwnerUserId": "369872", "LastEditorUserId": "369872", "LastEditDate": "2013-12-20T21:20:17.420", "Id": "20712043", "Score": "-2", "CreationDate": "2013-12-20T21:14:27.973", "LastActivityDate": "2013-12-20T21:20:17.420"}, "20712025": {"CommentCount": "6", "ViewCount": "116", "PostTypeId": "1", "ClosedDate": "2013-12-20T21:15:27.760", "LastEditorUserId": "3865653", "CreationDate": "2013-12-20T21:13:11.437", "LastActivityDate": "2016-06-10T01:26:11.363", "LastEditDate": "2016-06-10T01:26:11.363", "FavoriteCount": "0", "Title": "Using macros in C++", "Id": "20712025", "Score": "0", "Body": "<pre><code>#include&lt;iostream&gt;\n#include&lt;conio.h&gt;\n#define test(X) X*X\n\nusing namespace std;\n\nint main()\n{\n    int i=3,j;\n    j= test(++i);\n    cout&lt;&lt;j;\n    getch();\n}\n</code></pre>\n<p>I was expecting output of 20 ( 4*5) but I am getting value of 25. \ncan anyone point out where I misunderstood.</p>\n<p>Thanks.</p>\n", "Tags": "<c++>", "OwnerUserId": "1633583", "AnswerCount": "2"}});