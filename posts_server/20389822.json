post_cb({"20389822": {"CommentCount": "11", "ViewCount": "64", "CreationDate": "2013-12-05T01:44:57.283", "LastActivityDate": "2013-12-05T02:34:44.073", "Title": "Trouble understanding this output", "PostTypeId": "1", "Id": "20389822", "Score": "-2", "Body": "<p>Can someone please guide me as to how these answers are being produced.  For ii.) Why are the letters being turned into numbers? For iii.) What is going on here?</p>\n<p>Problem 23: Suppose that a C++ program called prog.cpp is compiled and correctly executed on venus with the instructions:</p>\n<p>venus&gt; g++ prog.cpp</p>\n<p>venus&gt; a.out file1 file2 file3</p>\n<p>For each of the following short segments of the program prog.cpp write exactly what output is produced. Each answer should consist of those symbols printed by the given part of the program and nothing else.</p>\n<p>(ii)</p>\n<pre><code>char a = \u2019a\u2019;\n\nwhile (a &lt;= \u2019f\u2019) {\n\n   cout &lt;&lt; \u2019a\u2019 - a;\n\n   a = a + 1; }\n</code></pre>\n<p>Answer:\n0-1-2-3-4-5</p>\n<p>(iii)</p>\n<pre><code>int main(int argc, char *argv[]) {\n   cout &lt;&lt; argc;\n</code></pre>\n<p>Answer:\n4</p>\n", "Tags": "<c++>", "OwnerUserId": "2090113", "AnswerCount": "3"}, "20389896": {"ParentId": "20389822", "CommentCount": "0", "Body": "<pre><code>a-'a' \n</code></pre>\n<p>returns a number since the ASCII number of the char a, which is 97, is subtracted from the ASCII value of the variable a. So, the difference in the ASCII value is printed as the integer.</p>\n<p>The second case, <code>argc</code> prints the number of commandline arguments given running the program.</p>\n", "OwnerUserId": "2046858", "PostTypeId": "2", "Id": "20389896", "Score": "1", "CreationDate": "2013-12-05T01:51:36.133", "LastActivityDate": "2013-12-05T01:51:36.133"}, "20390309": {"ParentId": "20389822", "CommentCount": "0", "Body": "<p>(ii)</p>\n<pre><code>char a = \u2019a\u2019;\nwhile (a &lt;= \u2019f\u2019) {\n   cout &lt;&lt; \u2019a\u2019 - a;\n   a = a + 1; \n}`\n</code></pre>\n<p>Answer: 0-1-2-3-4-5</p>\n<p>Explanation: \nThis is a loop that would consider the ascii value of <code>'a'</code> and compare it to <code>'f'</code>. Thus the loop will progress from <code>'a'</code> to <code>'f'</code> and terminate on 'f'.\nInside the loop it will subtract the value of the variable a from ascii value of <code>'a'</code> thus you see 1-2-3-4-5. To understand this better you can put print statements before each statement</p>\n<p>(iii)</p>\n<pre><code>int main(int argc, char *argv[]) {\n   cout &lt;&lt; argc;\n}\n</code></pre>\n<p>Answer: 4</p>\n<p>Explanation: Since the Answer is 4 i presume there is no syntax error and that was just a type in your function (ending brace in the question <code>'}'</code>)\n<code>argv</code> - The array of pointers to character \n<code>argc</code> - This is the count of elements in argv</p>\n<p>when you run the executable you pass it some command line parameters these will be stored in argv and the count/number of elements would be stored in argc.\nargc is 4 means it was called as myexe.exe param1 param2 param3, where params are 3 parameters along with the myexe.exe making the count to 4.</p>\n", "OwnerUserId": "1180245", "PostTypeId": "2", "Id": "20390309", "Score": "0", "CreationDate": "2013-12-05T02:34:44.073", "LastActivityDate": "2013-12-05T02:34:44.073"}, "20390174": {"ParentId": "20389822", "PostTypeId": "2", "CommentCount": "0", "Body": "<pre><code>cout &lt;&lt; \u2019a\u2019 - a;\n</code></pre>\n<p>This is actually a very interesting case.  Clearly the values should be 0, then -1, then -2, etc., but if you <code>cout</code> those numbers with <code>char</code> type (e.g. <code>cout &lt;&lt; char(0) &lt;&lt; char(-1);</code>) you'll get \"garbage\" (or perhaps nothing) on your terminal - 0 is a non-printable NUL character, and (char)-1, (char)-2 might end up being rendered as some strange graphics character (e.g. blank and a square dot per <a href=\"http://www.goldparser.org/images/chart-set-ibm-pc2.gif\" rel=\"nofollow\">http://www.goldparser.org/images/chart-set-ibm-pc2.gif</a>)...</p>\n<p>The reason they're being printed as readable numbers is that the <code>'a' - a</code> expression evaluates to an <code>int</code> type - not <code>char</code> - and <code>int</code>s do print in a human-readable numeric format.</p>\n<p><code>'a'</code> is a character literal of type <code>char</code>, encoded using the ASCII value 97.  <code>a</code> is a variable but also of type <code>char</code>.  And yet, before one can be subtracted from the other they undergo Integral Promotion to type <code>int</code>; from the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_20389822_20390174_0\">4.5 Integral promotions [conv.prom]\n  1 A prvalue of an integer type other than bool, char16_t, char32_t, or wchar_t whose integer\n  conversion rank (4.13) is less than the rank of int can be converted\n  to a prvalue of type int if int can represent all the values of the\n  source type; otherwise, the source prvalue can be converted to a\n  prvalue of type unsigned int.</p>\n</blockquote>\n<p>Given 4.13 says <code>char</code> has lower rank than <code>int</code>, this means <code>char</code> <strong>can</strong> be converted to <code>int</code> if needed, but why is it needed?</p>\n<p><strong>The compiler's <em>conceptually</em> providing a <code>int operator-(int, int)</code> function but no <code>char operator-(char, char)</code>, and that forces subtraction of two <code>char</code> values to be shoehorned into the <code>int</code> operator after undergoing the Integral Promotion.</strong></p>\n", "OwnerUserId": "410767", "LastEditorUserId": "410767", "LastEditDate": "2013-12-05T02:26:42.743", "Id": "20390174", "Score": "0", "CreationDate": "2013-12-05T02:20:02.207", "LastActivityDate": "2013-12-05T02:26:42.743"}, "bq_ids": {"n4140": {"so_20389822_20390174_0": {"section_id": 21, "quality": 0.9047619047619048, "length": 38}}, "n3337": {"so_20389822_20390174_0": {"section_id": 18, "quality": 0.9047619047619048, "length": 38}}, "n4659": {"so_20389822_20390174_0": {"section_id": 21, "quality": 0.9047619047619048, "length": 38}}}});