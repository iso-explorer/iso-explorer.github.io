post_cb({"12760977": {"CommentCount": "1", "ViewCount": "217", "PostTypeId": "1", "LastEditorUserId": "500104", "CreationDate": "2012-10-06T15:12:09.637", "LastActivityDate": "2012-10-06T16:46:41.063", "Title": "What is the std::mem_fn type equivalent to void(MainWindow::*handler)()?", "AcceptedAnswerId": "12761642", "LastEditDate": "2012-10-06T15:21:26.577", "Id": "12760977", "Score": "1", "Body": "<p>I have a function:</p>\n<pre><code>std::function&lt;void(sp_session*)&gt; test(void(MainWindow::*handler)())\n{\n    return ...;\n}\n</code></pre>\n<p>I would like to replace handler's type with the equivalent std::mem_fn type.</p>\n<p>What is the type?</p>\n<p>I tried this:</p>\n<pre><code>std::function&lt;void(sp_session*)&gt; test(std::mem_fn&lt;void(), MainWindow&gt;  handler)    \n{\n    return ...;\n}\n</code></pre>\n<p>But VC++ 2010 spits out these errors:</p>\n<pre><code>error C2146: syntax error : missing ')' before identifier 'handler'\nerror C2059: syntax error : ')'\nerror C2143: syntax error : missing ';' before '{'\nerror C2447: '{' : missing function header (old-style formal list?)\n</code></pre>\n<p>So I am not sure what I did wrong.</p>\n", "Tags": "<c++><c++11>", "OwnerUserId": "259982", "AnswerCount": "2"}, "12761642": {"ParentId": "12760977", "PostTypeId": "2", "CommentCount": "2", "Body": "<p><code>std::mem_fn</code> is not the type you are looking for.<br>\nThe type you need is <code>std::function</code> that takes the instance as argument:</br></p>\n<pre><code>std::function&lt;void(sp_session*)&gt; test(std::function&lt;void(MainWindow *)&gt; handler)\n</code></pre>\n<p>It can bind to member function and is just used with the instance as first parameter.<br>\nIf in the original function you would do:</br></p>\n<pre><code>instance-&gt;*handler();\n</code></pre>\n<p>In the new function you do:</p>\n<pre><code>handler(instance);\n</code></pre>\n", "OwnerUserId": "362589", "LastEditorUserId": "362589", "LastEditDate": "2012-10-06T16:46:41.063", "Id": "12761642", "Score": "1", "CreationDate": "2012-10-06T16:38:16.843", "LastActivityDate": "2012-10-06T16:46:41.063"}, "bq_ids": {"n4140": {"so_12760977_12761009_0": {"section_id": 4632, "quality": 0.8, "length": 4}}, "n3337": {"so_12760977_12761009_0": {"section_id": 4443, "quality": 0.8, "length": 4}}, "n4659": {"so_12760977_12761009_0": {"section_id": 6002, "quality": 0.8, "length": 4}}}, "12761009": {"ParentId": "12760977", "CommentCount": "0", "Body": "<p>The exact type returned by the C++11 binder family of functions (<code>mem_fn</code>, <code>bind</code>) is <em>unspecified</em>, meaning it's an implementation detail and you shouldn't concern yourself with it.</p>\n<p><code>\u00a720.8.9 [func.bind]</code></p>\n<blockquote>\n<p id=\"so_12760977_12761009_0\"><code>template&lt;class F, class... BoundArgs&gt;</code><br>\n<em><code>unspecified</code></em><code>bind(F&amp;&amp;, BoundArgs&amp;&amp;...);</code></br></p>\n</blockquote>\n<p><code>\u00a720.8.10 [func.memfn]</code></p>\n<blockquote>\n<p id=\"so_12760977_12761009_1\"><code>template&lt;class R, class T&gt;</code><br>\n<em><code>unspecified</code></em><code>mem_fn(R T::* pm);</code></br></p>\n</blockquote>\n<p>\"Workaround\": Use a template.</p>\n<pre><code>template&lt;class F&gt;\nstd::function&lt;void(sp_session*)&gt; test(F handler)\n{\n    return ...;\n}\n</code></pre>\n", "OwnerUserId": "500104", "PostTypeId": "2", "Id": "12761009", "Score": "4", "CreationDate": "2012-10-06T15:16:28.247", "LastActivityDate": "2012-10-06T15:16:28.247"}});