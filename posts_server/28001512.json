post_cb({"bq_ids": {"n4140": {"so_28001512_28001552_1": {"length": 10, "quality": 0.8333333333333334, "section_id": 7151}, "so_28001512_28001552_0": {"length": 12, "quality": 0.75, "section_id": 3291}}, "n3337": {"so_28001512_28001552_1": {"length": 10, "quality": 0.8333333333333334, "section_id": 6895}, "so_28001512_28001552_0": {"length": 14, "quality": 0.875, "section_id": 3161}}, "n4659": {"so_28001512_28001552_1": {"length": 9, "quality": 0.75, "section_id": 4051}, "so_28001512_28001552_0": {"length": 12, "quality": 0.75, "section_id": 4053}}}, "28001552": {"Id": "28001552", "PostTypeId": "2", "Body": "<p>If you didn't provide a default constructor, a local object may not be zero initialized and may contain garbage. </p>\n<p>This is defined in the standard: </p>\n<blockquote>\n<p id=\"so_28001512_28001552_0\">Section <strong>8.5/11</strong>: If no initializer is specified for an object, the\n  object is default-initialized; if no initialization is performed, an\n  object with automatic or dynamic storage duration has indeterminate\n  value.</p>\n</blockquote>\n<p>For static and globals: </p>\n<blockquote>\n<p id=\"so_28001512_28001552_1\">Section <strong>3.6.2/2</strong>:  Variables with static storage duration (...) \n  shall be zero-initialized <strong>before any other initialization takes\n  place</strong>.</p>\n</blockquote>\n<p>If you have a default constructor, it is called in every case (unless you specify an initializer).  This is true for global objects as for locals. </p>\n<p><strong><em>Suggestion:</em></strong>  You could experiment this with the following default constructor:  </p>\n<pre><code>Test() {\n    cout &lt;&lt; \"Default ctor: old x:\" &lt;&lt; x &lt;&lt; endl;   // for curisosity\n    x = 0;  // now x is 0 for sure \n}\n</code></pre>\n<p>You'll notice that for global objects,  old x is always 0, whereas for local objects, old x may be garbage.  </p>\n", "LastEditorUserId": "3723423", "LastActivityDate": "2015-01-17T16:57:09.893", "Score": "1", "CreationDate": "2015-01-17T16:24:21.830", "ParentId": "28001512", "CommentCount": "4", "OwnerUserId": "3723423", "LastEditDate": "2015-01-17T16:57:09.893"}, "36997995": {"Id": "36997995", "PostTypeId": "2", "Body": "<p>You can initialize x as x = 0 (or any other number you want it to be) by using a defualt constructor in your class definition. From there you can manipulate the data accordingly, or just enter the value you want x to hold in the defualt constructor.</p>\n<pre><code>class Test\n{\n   public:\n   void show(){cout&lt;&lt;x&lt;&lt;endl;}\n   int x;\n\n//Defualt Constructor\n   test(){\n\n    x=0;\n    }\n};\n</code></pre>\n", "LastActivityDate": "2016-05-03T07:17:44.150", "CommentCount": "0", "CreationDate": "2016-05-03T07:17:44.150", "ParentId": "28001512", "Score": "0", "OwnerUserId": "5843215"}, "28001512": {"ViewCount": "86", "Body": "<p>I was reading inside the c++ object module,there is a topic about default constructor.if we initialize a object of some class in function like</p>\n<p><strong>CODE</strong></p>\n<pre><code>class Test\n{\n   public:\n   void show(){cout&lt;&lt;x&lt;&lt;endl;}\n   int x;\n};\nvoid func()\n{\n  Test t;\n  t.show();\n}\n</code></pre>\n<p><strong>OUTPUT</strong></p>\n<p>Output is 0</p>\n<p>but in book it is given that global objects are zero initialized and default \nconstructor for the creation of this object doesn't run. I'm bit confused about it.\nis object zero initialized in local function and to some arbitrary value in main???</p>\n", "Title": "C++ main() vs local function initialization of object", "CreationDate": "2015-01-17T16:19:22.613", "LastActivityDate": "2016-05-03T07:17:44.150", "CommentCount": "3", "LastEditDate": "2015-01-17T17:10:14.333", "PostTypeId": "1", "LastEditorUserId": "2435473", "Id": "28001512", "Score": "-1", "OwnerUserId": "4465089", "Tags": "<c++><function><class><object><main>", "AnswerCount": "2"}});