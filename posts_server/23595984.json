post_cb({"23596045": {"Id": "23596045", "PostTypeId": "2", "Body": "<p>About postfix operators (13.5.7)</p>\n<blockquote>\n<p id=\"so_23595984_23596045_0\">The user-defined function called operator++ implements the prefix and\n  postfix ++ operator. If   this function is a member function with no\n  parameters, or a non-member function with one  parameter of class or\n  enumeration type, it defines the prefix increment operator ++ for \n  objects of that type. If the function is a member function with one\n  parameter (which shall be of type int) or a non-member function with\n  two parameters (the second of which shall  be of type int), it defines\n  the postfix increment operator ++ for objects of that type. When  the\n  postfix increment is called as a result of using the ++ operator, the\n  int argument will  have value zero.</p>\n</blockquote>\n", "LastEditorUserId": "2756719", "LastActivityDate": "2014-05-11T18:05:59.620", "Score": "0", "CreationDate": "2014-05-11T17:59:00.247", "ParentId": "23595984", "CommentCount": "0", "OwnerUserId": "1390091", "LastEditDate": "2014-05-11T18:05:59.620"}, "bq_ids": {"n4140": {"so_23595984_23596045_0": {"length": 55, "quality": 0.9322033898305084, "section_id": 665}, "so_23595984_23595984_0": {"length": 12, "quality": 1.0, "section_id": 657}}, "n3337": {"so_23595984_23596045_0": {"length": 58, "quality": 0.9830508474576272, "section_id": 655}, "so_23595984_23595984_0": {"length": 12, "quality": 1.0, "section_id": 647}}, "n4659": {"so_23595984_23596045_0": {"length": 55, "quality": 0.9322033898305084, "section_id": 693}, "so_23595984_23595984_0": {"length": 12, "quality": 1.0, "section_id": 685}}}, "23595984": {"ViewCount": "94", "Body": "<p>In the c++ standard said</p>\n<blockquote>\n<p id=\"so_23595984_23595984_0\">A prefix unary operator shall be implemented by a non-static member\n  function (9.3) with no parameters or a non-member function with one\n  parameter.</p>\n</blockquote>\n<p>But there is no some info about postfix operator overloading.</p>\n", "AcceptedAnswerId": "23596116", "Title": "Is it possible to overload postfix unary operator besides the ++ and --", "CreationDate": "2014-05-11T17:52:15.570", "Id": "23595984", "CommentCount": "3", "PostTypeId": "1", "OwnerDisplayName": "user2953119", "LastActivityDate": "2014-05-11T18:05:59.620", "Score": "0", "Tags": "<c++><overloading><operator-keyword>", "AnswerCount": "2"}, "23596116": {"Id": "23596116", "PostTypeId": "2", "Body": "<p><code>operator--</code> and <code>operator++</code> are unusual because they exist in both prefix and postfix forms, so something needs to be done to differentiate between the two. As you've already noted, they decided to differentiate based on having the postfix form receive an extra (unused) parameter.</p>\n<p>You can overload other postfix operators (e.g., <code>operator[]</code>, <code>operator()</code> and <code>operator-&gt;</code>), but you don't have to do anything special to overload them because they only exist in postfix form.</p>\n", "LastActivityDate": "2014-05-11T18:05:48.640", "CommentCount": "2", "CreationDate": "2014-05-11T18:05:48.640", "ParentId": "23595984", "Score": "0", "OwnerUserId": "179910"}});