post_cb({"34713858": {"ParentId": "34713756", "PostTypeId": "2", "CommentCount": "2", "Body": "<blockquote>\n<p id=\"so_34713756_34713858_0\">the allocated memory for x may be freed at the end of getString</p>\n</blockquote>\n<p>Yes, but only for <code>x</code>, <a href=\"http://en.cppreference.com/w/cpp/language/string_literal\" rel=\"nofollow\">string literal</a> won't.</p>\n<blockquote>\n<p id=\"so_34713756_34713858_1\">String literals have <strong>static storage duration</strong>, and thus exist in memory for the life of the program. </p>\n</blockquote>\n<p>According to the C++ stardard, $2.13.5/8 String literals [lex.string] (bold by me)</p>\n<blockquote>\n<p id=\"so_34713756_34713858_2\">Ordinary string literals and UTF-8 string literals are also referred\n  to as narrow string literals. A narrow string literal has type \u201carray\n  of n const char\u201d, where n is the size of the string as defined below,\n  and has <strong>static storage duration</strong> (3.7).</p>\n</blockquote>\n<p>And for C <a href=\"http://en.cppreference.com/w/c/language/string_literal\" rel=\"nofollow\">string literal</a>,</p>\n<blockquote>\n<p id=\"so_34713756_34713858_3\">Then (at stage 7), a terminating null character is added to each\n  string literal, and then each literal initializes an unnamed array\n  with <strong>static storage duration</strong> and length just enough to contain the\n  contents of the string literal plus one the null terminator.</p>\n</blockquote>\n", "OwnerUserId": "3309790", "LastEditorUserId": "3309790", "LastEditDate": "2016-01-11T03:56:51.273", "Id": "34713858", "Score": "3", "CreationDate": "2016-01-11T03:38:57.247", "LastActivityDate": "2016-01-11T03:56:51.273"}, "bq_ids": {"n4140": {"so_34713756_34713858_2": {"section_id": 5356, "quality": 1.0, "length": 26}}, "n3337": {"so_34713756_34713858_2": {"section_id": 5153, "quality": 1.0, "length": 26}}, "n4659": {"so_34713756_34713858_2": {"section_id": 6781, "quality": 1.0, "length": 26}}}, "34713756": {"CommentCount": "3", "AcceptedAnswerId": "34713858", "PostTypeId": "1", "ClosedDate": "2016-01-11T03:41:36.110", "LastEditorUserId": "-1", "CreationDate": "2016-01-11T03:25:47.850", "LastActivityDate": "2016-01-11T03:56:51.273", "LastEditDate": "2017-05-23T12:31:22.777", "ViewCount": "116", "FavoriteCount": "1", "Title": "Is it legal to return a string using `const char *` like this?", "Id": "34713756", "Score": "2", "Body": "<p>Here  is the code changed a bit from this thread:<a href=\"https://stackoverflow.com/questions/4929329/how-to-return-a-string-in-my-c-code\">How to return a string in my C code?</a></p>\n<pre><code>#include &lt;stdio.h&gt;\nconst char * getString();\nint main()\n{\n printf(\"hello world\\n\");\n printf(\"%s\\n\", getString());\n printf(\"%s\\n\", getString2());\n return 0;\n\n}\n\nconst char * getString()\n{\n const char *x = \"abcstring\";\n return x;\n}\n\nconst char * getString2()\n{\n return \"abcstring\";\n}\n</code></pre>\n<p>This looks a bit confusing to me because the memory space which <code>x</code> points to, <code>\"abcstring\"</code>, in <code>getString</code> seems to be on stack instead of on heap. Therefore, the allocated memory for <code>x</code> may be freed at the end of <code>getString</code>. If so, will <code>printf(\"%s\\n\", getString());</code> fail? </p>\n<p>And What about <code>printf(\"%s\\n\", getString2());</code>?</p>\n", "Tags": "<c++><c><memory><char>", "OwnerUserId": "1272683", "AnswerCount": "1"}});