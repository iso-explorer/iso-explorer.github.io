post_cb({"22812945": {"CommentCount": "4", "ViewCount": "40", "PostTypeId": "1", "LastEditorUserId": "164171", "CreationDate": "2014-04-02T13:25:26.663", "LastActivityDate": "2014-04-02T14:24:16.580", "Title": "Is there a way to avoid the outside visibility of template friend declarations?", "AcceptedAnswerId": "22813383", "LastEditDate": "2014-04-02T14:12:25.117", "Id": "22812945", "Score": "1", "Body": "<p>Take a look at the following example:</p>\n<p>a.h:</p>\n<pre><code>class A {\nprotected:\n  template&lt;class T&gt;\n  friend void b();\n};\n</code></pre>\n<p>b.h:</p>\n<pre><code>template&lt;class T&gt;\nvoid b() {}\n</code></pre>\n<p>main.cxx:</p>\n<pre><code>#include \"a.h\"\n\nint main()\n{\n  b&lt;double&gt;();\n}\n</code></pre>\n<p>Notice that I forgot to include \"b.h\" in the main file. Unfortunately, the compiler picks up the friend declaration in class A and compiles the main function without complaining. I'm left with a cryptic link error, which is surprising since instantiation should occur in main.cxx:</p>\n<pre><code>[joel@fedora-joel friend]$ g++ main.cxx \n/tmp/ccfpaeHw.o: In function `main':\nmain.cxx:(.text+0x5): undefined reference to `void b&lt;double&gt;()'\ncollect2: error: ld returned 1 exit status\n</code></pre>\n<p>My question is: why does the compiler allow this? Is there a way against it?</p>\n", "Tags": "<c++><templates>", "OwnerUserId": "164171", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_22812945_22813383_0": {"section_id": 6687, "quality": 0.9285714285714286, "length": 13}}, "n3337": {"so_22812945_22813383_0": {"section_id": 6442, "quality": 0.9285714285714286, "length": 13}}, "n4659": {"so_22812945_22813383_0": {"section_id": 8162, "quality": 0.8571428571428571, "length": 12}}}, "22813383": {"ParentId": "22812945", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>ISO/IEC 14882:2003, \u00a711.4, paragraph 3 says this :</p>\n<blockquote>\n<p id=\"so_22812945_22813383_0\">A function first declared in a friend declaration has external linkage (3.5). Otherwise, the function retains its previous linkage (7.1.1).</p>\n</blockquote>\n<p>So, the friend declaration doubles as a function declaration. This allows <code>main</code> to call the function, so there is no compiler error.</p>\n<p>The linker error occurs because there is no matching function definition for the declaration.</p>\n<p>I don't see a way to avoid this behavior (since the standard prescribes it). It makes sense too, since a function declaration is needed to make the friend declaration valid anyway (otherwise you'd have a friend declaration for an undeclared function). So, if the friend declaration wouldn't double as a function declaration, the function declaration would have to be provided otherwise (by including the appropriate header eg.).</p>\n", "OwnerUserId": "822669", "LastEditorUserId": "822669", "LastEditDate": "2014-04-02T14:24:16.580", "Id": "22813383", "Score": "4", "CreationDate": "2014-04-02T13:42:56.933", "LastActivityDate": "2014-04-02T14:24:16.580"}});