post_cb({"26328319": {"ParentId": "26328077", "PostTypeId": "2", "CommentCount": "4", "CreationDate": "2014-10-12T18:08:23.380", "Score": "5", "LastEditorUserId": "661519", "LastEditDate": "2014-10-12T19:09:34.167", "Id": "26328319", "OwnerUserId": "661519", "Body": "<p>The fundamental problem is that the first function template is equivalent to</p>\n<pre><code>template &lt;class T, size_t N&gt;\nT* asFlatArray (T (*arr)[N]) {}\n</code></pre>\n<p>so there is no dimension to calculate. It will match a pointer to an array, or anything that can decay to pointer to array. Thus is can also match 2D array.</p>\n<p>As for the second example, a reference or pointer to type <code>T[][N]</code> cannot be a function parameter, which leads to a compiler error. Of course, you can add an extra template parameter for the missing dimension:</p>\n<pre><code>template &lt;class T, size_t N, size_t M&gt;\nT* asFlatArray(T (&amp;arr)[N][M]) {}\n</code></pre>\n", "LastActivityDate": "2014-10-12T19:09:34.167"}, "26328406": {"ParentId": "26328077", "PostTypeId": "2", "CommentCount": "3", "CreationDate": "2014-10-12T18:16:54.083", "Score": "1", "LastEditorUserId": "3959454", "LastEditDate": "2014-10-12T18:58:05.380", "Id": "26328406", "OwnerUserId": "3959454", "Body": "<p>C++11 and C++14 standards in part <code>[dcl.fct]/8 (8.3.5)</code> explicitly state:</p>\n<blockquote>\n<p id=\"so_26328077_26328406_0\">If the type of a parameter includes a type of the form \u201cpointer to array of unknown bound of <code>T</code>\u201d or \u201creference to array of unknown bound of <code>T</code>,\u201d the program is ill-formed.</p>\n</blockquote>\n<p>There is actually a <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_active.html#393\" rel=\"nofollow\">core language active issue</a> proposing to remove that from the standard, so  perhaps we won't see it in C++17.</p>\n<p>BTW, if the array size is really unknown, clang (but not gcc) compiles the code:</p>\n<pre><code>#include &lt;iostream&gt;\n\nclass A {\npublic:\n    static int arr[][3];\n};\n\n// this compiles on clang but not gcc\nvoid func(int (&amp;arr_ref)[][3]) {\n    std::cout &lt;&lt; arr_ref[1][2] &lt;&lt; std::endl;\n}\n\nint main() {\n    int (&amp;arr_ref)[][3] = A::arr;\n\n    std::cout &lt;&lt; A::arr[1][2] &lt;&lt; std::endl;\n\n    arr_ref[1][2] = 100;\n    std::cout &lt;&lt; A::arr[1][2] &lt;&lt; std::endl;\n\n    arr_ref[1][2] = 200;\n    func(arr_ref); \n}\n\nint A::arr[][3] = {{1, 2, 3}, {4, 5, 6}};\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/a60d4da47a0e7035\" rel=\"nofollow\">Demo</a></p>\n", "LastActivityDate": "2014-10-12T18:58:05.380"}, "26328077": {"CommentCount": "2", "ViewCount": "95", "CreationDate": "2014-10-12T17:42:13.460", "LastActivityDate": "2014-10-12T19:09:34.167", "Title": "Why can't compiler calculate size of array in case passing 2D array by reference", "AcceptedAnswerId": "26328319", "PostTypeId": "1", "Id": "26328077", "Score": "3", "Body": "<p>Just wondering - i've written following function</p>\n<pre><code>template &lt;class T, size_t N&gt;\nT* asFlatArray (T arr[][N])\n{\n    // some code\n}\n</code></pre>\n<p>and call it like</p>\n<pre><code>asFlatArray(myArray); // where myArray is int myArray[some_size][sime_size];\n</code></pre>\n<p>compilation runs without errors. But if i change 'arr' to reference like</p>\n<pre><code>template &lt;class T, size_t N&gt;\nT* asFlatArray (T (&amp;arr)[][N])\n{\n    // some code\n}\n</code></pre>\n<p>i'll have errors:</p>\n<pre><code>parameter \u2018arr\u2019 includes reference to array of unknown bound \u2018T [][N]\u2019\n</code></pre>\n<p>I know how to fix it</p>\n<pre><code>template &lt;class T, size_t Rows, size_t Columns&gt;\nT* asFlatArray (T (&amp;arr)[Rows][Columns])\n</code></pre>\n<p>but i don't understand why is it's happening?</p>\n", "Tags": "<c++><template-deduction>", "OwnerUserId": "1526758", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_26328077_26328406_0": {"section_id": 3244, "quality": 1.0, "length": 14}}, "n3337": {"so_26328077_26328406_0": {"section_id": 3117, "quality": 1.0, "length": 14}}, "n4659": {"so_26328077_26328406_0": {"section_id": 6103, "quality": 0.7142857142857143, "length": 10}}}});