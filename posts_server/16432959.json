post_cb({"16432959": {"ViewCount": "2062", "Body": "<p>Referring to <a href=\"http://en.wikipedia.org/wiki/Copy_elision\">http://en.wikipedia.org/wiki/Copy_elision</a></p>\n<p>I run below code:</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct C {\n  C() {}\n  C(const C&amp;) { std::cout &lt;&lt; \"Hello World!\\n\"; }\n};\n\nvoid f() {\n  C c;\n  throw c; // copying the named object c into the exception object.\n}          // It is unclear whether this copy may be elided.\n\nint main() {\n  try {\n    f();\n  }\n  catch(C c) {  // copying the exception object into the temporary in the exception declaration.\n  }             // It is also unclear whether this copy may be elided.\n}\n</code></pre>\n<p>The Output I got:</p>\n<pre><code>Gaurav@Gaurav-PC /cygdrive/d/Trial\n$ make clean\nrm -f Trial.exe Trial.o\n\nGaurav@Gaurav-PC /cygdrive/d/Trial\n$ make\ng++ -Wall Trial.cpp -o Trial\n\nGaurav@Gaurav-PC /cygdrive/d/Trial\n$ ./Trial\nHello World!\nHello World!\n</code></pre>\n<p>I understand that the compiler might have optimized the code with unnecessary copying, which it is not doing here.</p>\n<p>But What I want to ask, How does <code>two calls to the copy constructor</code> is being made?</p>\n<p><code>catch(C c)</code> - Since we are passing by value, hence here the copy constructor is being called.</p>\n<p>But at <code>throw c</code> how is copy constructor being called? Can someone explain?</p>\n", "AcceptedAnswerId": "16433015", "Title": "Exception and Copy Constructor : C++", "CreationDate": "2013-05-08T04:58:23.880", "Id": "16432959", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2013-05-08T05:09:42.837", "Score": "7", "OwnerUserId": "1559833", "Tags": "<c++>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_16432959_16433015_0": {"length": 15, "quality": 0.8333333333333334, "section_id": 3336}, "so_16432959_16433015_1": {"length": 12, "quality": 0.8571428571428571, "section_id": 3338}}, "n3337": {"so_16432959_16433015_0": {"length": 17, "quality": 0.9444444444444444, "section_id": 3206}, "so_16432959_16433015_1": {"length": 13, "quality": 0.9285714285714286, "section_id": 3208}}, "n4659": {"so_16432959_16433015_0": {"length": 11, "quality": 0.6111111111111112, "section_id": 7672}, "so_16432959_16433015_1": {"length": 11, "quality": 0.7857142857142857, "section_id": 4105}}}, "16433015": {"Id": "16433015", "PostTypeId": "2", "Body": "<pre><code>throw c;     \n</code></pre>\n<p>Creates a temporary object and it is this temporary object that is thrown. The creation of the temporary might be through copy/move constructor. And yes this copy/move can be elided.</p>\n<hr>\n<p><strong>References:</strong><br>\n<strong>C++11  15.1 Throwing an exception</strong> </br></p>\n<p><strong>\u00a73:</strong> </p>\n<blockquote>\n<p id=\"so_16432959_16433015_0\"><strong>A throw-expression initializes a temporary object, called the exception object</strong>, the type of which is determined by removing any top-level cv-qualifiers from the static type of the operand of throw and adjusting the type.........</p>\n</blockquote>\n<p><strong>\u00a75:</strong> </p>\n<blockquote>\n<p id=\"so_16432959_16433015_1\">When the thrown object is a class object, the copy/move constructor and the destructor shall be accessible, even if the copy/move operation is elided (12.8). </p>\n</blockquote>\n</hr>", "LastEditorUserId": "452307", "LastActivityDate": "2013-05-08T05:09:42.837", "Score": "11", "CreationDate": "2013-05-08T05:03:14.877", "ParentId": "16432959", "CommentCount": "7", "OwnerUserId": "452307", "LastEditDate": "2013-05-08T05:09:42.837"}});