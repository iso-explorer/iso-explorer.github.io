post_cb({"24500918": {"ParentId": "24500164", "CommentCount": "4", "Body": "<p>Language-lawyer wise, 8.5/17:</p>\n<blockquote>\n<p id=\"so_24500164_24500918_0\">\u2014 If the initializer is a (non-parenthesized) braced-init-list, the object or reference is list-initialized (8.5.4).</p>\n<p id=\"so_24500164_24500918_1\">\u2014 If the destination type is a reference type, see 8.5.3.</p>\n<p id=\"so_24500164_24500918_2\">\u2014 If the destination type is an array of characters, an array of char16_t, an array of char32_t, or an\n  array of wchar_t, and the initializer is a string literal, see 8.5.2.</p>\n<p id=\"so_24500164_24500918_3\">\u2014 If the initializer is (), the object is value-initialized.</p>\n<p id=\"so_24500164_24500918_4\">\u2014 Otherwise, if the destination type is an array, the program is ill-formed</p>\n</blockquote>\n<p>A braced-init-list is { } where anything (or nothing) can be inside the brackets (for example, <code>int arr[3] = {1,2,3}</code>).  With that in mind, none of the first 4 options are viable for <code>int arr[] (10, 42);</code>, leaving the last one indicating the program is ill-formed.</p>\n", "OwnerUserId": "2263978", "PostTypeId": "2", "Id": "24500918", "Score": "5", "CreationDate": "2014-07-01T00:36:17.127", "LastActivityDate": "2014-07-01T00:36:17.127"}, "24500672": {"ParentId": "24500164", "CommentCount": "1", "Body": "<p>8.5/14:</p>\n<blockquote>\n<p id=\"so_24500164_24500672_0\">If the entity being initialized does not have class type, the <em>expression-list</em> in a parenthesized initializer shall be a single expression.</p>\n</blockquote>\n", "OwnerUserId": "459640", "PostTypeId": "2", "Id": "24500672", "Score": "0", "CreationDate": "2014-07-01T00:02:50.380", "LastActivityDate": "2014-07-01T00:02:50.380"}, "24500164": {"CommentCount": "8", "AcceptedAnswerId": "24500918", "PostTypeId": "1", "LastEditorUserId": "47453", "CreationDate": "2014-06-30T22:58:46.447", "LastActivityDate": "2014-07-01T00:36:17.127", "LastEditDate": "2014-06-30T23:55:32.797", "ViewCount": "153", "FavoriteCount": "1", "Title": "Is direct initialization forbidden for array?", "Id": "24500164", "Score": "0", "Body": "<p>Language-lawyer-wise, which clause in the standard forbid below code:</p>\n<pre><code>int arr[] (10, 42); \n</code></pre>\n<p>This would produce an array of 10 elements, each initalized to 42.</p>\n", "Tags": "<c++><arrays><initialization><language-lawyer>", "OwnerUserId": "3791991", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_24500164_24500918_2": {"section_id": 3296, "quality": 0.9333333333333333, "length": 14}, "so_24500164_24500918_4": {"section_id": 3296, "quality": 1.0, "length": 5}, "so_24500164_24500918_0": {"section_id": 3296, "quality": 0.8571428571428571, "length": 6}, "so_24500164_24500672_0": {"section_id": 3293, "quality": 1.0, "length": 12}, "so_24500164_24500918_1": {"section_id": 3296, "quality": 0.8333333333333334, "length": 5}}, "n3337": {"so_24500164_24500918_2": {"section_id": 3166, "quality": 0.9333333333333333, "length": 14}, "so_24500164_24500918_4": {"section_id": 3166, "quality": 1.0, "length": 5}, "so_24500164_24500918_0": {"section_id": 3166, "quality": 0.8571428571428571, "length": 6}, "so_24500164_24500672_0": {"section_id": 3163, "quality": 1.0, "length": 12}, "so_24500164_24500918_1": {"section_id": 3166, "quality": 0.8333333333333334, "length": 5}}, "n4659": {"so_24500164_24500918_2": {"section_id": 4058, "quality": 0.9333333333333333, "length": 14}, "so_24500164_24500918_4": {"section_id": 4058, "quality": 1.0, "length": 5}, "so_24500164_24500918_0": {"section_id": 4058, "quality": 0.8571428571428571, "length": 6}, "so_24500164_24500918_1": {"section_id": 4058, "quality": 0.8333333333333334, "length": 5}, "so_24500164_24500672_0": {"section_id": 4055, "quality": 1.0, "length": 12}}}});