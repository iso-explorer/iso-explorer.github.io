post_cb({"26633267": {"ParentId": "26632809", "CommentCount": "0", "Body": "<p>In case you care about the official wording from the standard (\u00a725.4.5/1):</p>\n<blockquote>\n<p id=\"so_26632809_26633267_0\">This section defines all the basic set operations on <strong>sorted structures</strong>. They also work with multisets (23.4.7) containing multiple copies of equivalent elements. The semantics of the set operations are generalized to multisets in a standard way by defining set_union() to contain the maximum number of occurrences of every element, set_intersection() to contain the minimum, and so on. [emphasis added]</p>\n</blockquote>\n<p>That section includes the specifications for <code>std::includes</code>, <code>std::set_union</code>, <code>std::set_intersection</code>, <code>std::set_difference</code>, and <code>std::set_symmetric_difference</code>, so the requirement for sorted inputs applies to all of these algorithms.</p>\n", "OwnerUserId": "179910", "PostTypeId": "2", "Id": "26633267", "Score": "1", "CreationDate": "2014-10-29T14:40:46.340", "LastActivityDate": "2014-10-29T14:40:46.340"}, "26632809": {"CommentCount": "4", "ViewCount": "933", "PostTypeId": "1", "LastEditorUserId": "1083220", "CreationDate": "2014-10-29T14:23:10.393", "LastActivityDate": "2014-10-30T01:27:28.580", "Title": "STL set_union and set_intersection on unsorted vectors", "LastEditDate": "2014-10-30T01:27:28.580", "Id": "26632809", "Score": "1", "Body": "<p>Below is my code on set intersection and union test that I did. I don't understand why it the output is incorrect when I commented out the sort function. Why is the sort necessary? or am I missing anything here?\nWhat is the technical reason for making the programmer responsible to sort the inputs first? Is it for guaranteeing sorting is not done twice(if the vector was already sorted and the algorithm sorts it again...)?</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n\nusing namespace std;\nvoid test_vector_union();\nvoid test_vector_intesection();\n\nint main(int i, char * args [])\n{\n  cout &lt;&lt;endl&lt;&lt; \"test union of unsorted vectors {1,4,3,2,0} and {6,10,2,1,4}\" &lt;&lt; endl;\n  test_vector_union();\n  cout &lt;&lt;endl&lt;&lt; \"test intersection of unsorted vectors {1,4,3,2,0} and {6,10,2,1,4}\" &lt;&lt;     endl;\n  test_vector_intesection(); \n  return 0;\n }\n\nvoid test_vector_union(){\n vector&lt;int&gt; x = {1,4,3,2,0};\n vector&lt;int&gt; y= {6,10,2,1,4};\n//sort(x.begin(),x.end()); sort(y.begin(),y.end());\nvector&lt;int&gt; z ;\nset_union(x.begin(),x.end(),y.begin(),y.end(),back_inserter(z));\n\nfor (int i:z)\n     cout &lt;&lt; i &lt;&lt;\",\";\n}\n\nvoid test_vector_intesection(){\n vector&lt;int&gt; x = {1,4,3,2,0};\n vector&lt;int&gt; y= {6,10,2,1,4};\n //sort(x.begin(),x.end()); sort(y.begin(),y.end());\n vector&lt;int&gt; z ;\n set_intersection(x.begin(),x.end(),y.begin(),y.end(),back_inserter(z));\n\n for (int i:z)\n     cout &lt;&lt; i &lt;&lt;\",\";\n</code></pre>\n<p>}</p>\n", "Tags": "<c++><stl>", "OwnerUserId": "1083220", "AnswerCount": "3"}, "26632945": {"ParentId": "26632809", "CommentCount": "0", "Body": "<p>That's required. This is excerpt from documentation of std::union.:-</p>\n<pre><code>Constructs a sorted range beginning at d_first consisting of all elements present in one or both sorted ranges [first1, last1) and [first2, last2).\n1) Expects both input ranges to be sorted with operator&lt;\n2) Expects them to be sorted with the given comparison function comp\nIf some element is found m times in [first1, last1) and n times in [first2, last2), then all m elements will be copied from [first1, last1) to d_first, preserving order, and then exactly std::max(n-m, 0) elements will be copied from [first2, last2) to d_first, also preserving order.\n</code></pre>\n", "OwnerUserId": "4047092", "PostTypeId": "2", "Id": "26632945", "Score": "0", "CreationDate": "2014-10-29T14:28:43.470", "LastActivityDate": "2014-10-29T14:28:43.470"}, "bq_ids": {"n4140": {"so_26632809_26633267_0": {"section_id": 1443, "quality": 0.8717948717948718, "length": 34}}, "n3337": {"so_26632809_26633267_0": {"section_id": 1437, "quality": 0.8717948717948718, "length": 34}}, "n4659": {"so_26632809_26633267_0": {"section_id": 1581, "quality": 0.8717948717948718, "length": 34}}}, "26632903": {"ParentId": "26632809", "CommentCount": "0", "Body": "<p>Because it is a <strong>requirement</strong> for <a href=\"http://en.cppreference.com/w/cpp/algorithm/set_union\" rel=\"nofollow\">std::set_union</a>:</p>\n<blockquote>\n<p id=\"so_26632809_26632903_0\">Constructs a sorted range beginning at d_first consisting of all elements present in one or both sorted ranges [first1, last1) and [first2, last2).</p>\n<p id=\"so_26632809_26632903_1\">1) Expects <strong>both input ranges to be sorted</strong> with operator&lt;</p>\n<p id=\"so_26632809_26632903_2\">2) Expects them <strong>to be sorted</strong> with the given comparison function comp</p>\n</blockquote>\n<p>(emphasis mine)</p>\n<p>you shouldn't call these algorithms on unsorted ranges.</p>\n", "OwnerUserId": "1938163", "PostTypeId": "2", "Id": "26632903", "Score": "1", "CreationDate": "2014-10-29T14:26:51.517", "LastActivityDate": "2014-10-29T14:26:51.517"}});