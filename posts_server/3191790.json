post_cb({"3191916": {"Id": "3191916", "PostTypeId": "2", "Body": "<p>Insertion of a single element into the <code>std::list&lt;&gt;</code> takes constant time, regardless of where you insert it. Note, that <code>std::list&lt;&gt;</code> is not an inherently ordered container, meaning that it is you who specify where exactly to insert the new element. No wonder, the time is linear.</p>\n<p>Inserting (\"splicing\") a <em>[sub]sequence</em> of elements moved from another list into this one (i.e. <code>std::list&lt;&gt;::splice</code> method) takes either constant time or linear time (linear in the number of element inserted). This happens because the implementation if <code>std::list&lt;&gt;</code> has a choice of either: </p>\n<p>(1) implementing <code>std::list&lt;&gt;::size</code> method in constant time, and paying for it by implementing <code>std::list&lt;&gt;::splice</code> in linear time, or</p>\n<p>(2) implementing <code>std::list&lt;&gt;::splice</code> method in constant time, and paying for it by implementing <code>std::list&lt;&gt;::size</code> in linear time.</p>\n<p>You can have either this or that, but you can't have both. The decision to follow a specific approach is up to the implementation.</p>\n", "LastActivityDate": "2010-07-07T04:27:12.000", "CommentCount": "0", "CreationDate": "2010-07-07T04:27:12.000", "ParentId": "3191790", "Score": "1", "OwnerUserId": "187690"}, "3191806": {"Id": "3191806", "PostTypeId": "2", "Body": "<p>Inserts <strong>anywhere</strong> in a <a href=\"http://en.cppreference.com/w/cpp/container/list\" rel=\"nofollow noreferrer\"><code>std::list</code></a> are constant time operations.</p>\n<p>That said, before you can insert, you need to get an iterator to the location you'd like to insert to, which is a linear time operation unless you're talking about the front or back.</p>\n", "LastEditorDisplayName": "user283145", "LastActivityDate": "2012-10-20T18:25:33.480", "Score": "9", "CreationDate": "2010-07-07T03:56:16.213", "ParentId": "3191790", "CommentCount": "2", "OwnerUserId": "82320", "LastEditDate": "2012-10-20T18:25:33.480"}, "bq_ids": {"n4140": {"so_3191790_3191977_0": {"length": 34, "quality": 0.918918918918919, "section_id": 902}}, "n3337": {"so_3191790_3191977_0": {"length": 34, "quality": 0.918918918918919, "section_id": 888}}, "n4659": {"so_3191790_3191977_0": {"length": 34, "quality": 0.918918918918919, "section_id": 962}}}, "3192895": {"Id": "3192895", "PostTypeId": "2", "Body": "<p>Note that, mainly due to better locality of data, in practice <strong><em><code>std::vector</code> is often faster than <code>std::list</code></em></strong>, even where in theory it should be the other way around. So the default sequential container should be <code>std::vector</code>. </p>\n<p>If you doubt, <strong><em>first measure whether that container is critical at all</em></strong> (no use in increasing the speed of a piece of code even ten times, if that piece only uses 2% of the overall time), then compare measurements with <code>std::list</code> and <code>std::deque</code> and make your pick. </p>\n", "LastEditorUserId": "140719", "LastActivityDate": "2010-07-07T08:19:44.030", "Score": "2", "CreationDate": "2010-07-07T08:02:28.123", "ParentId": "3191790", "CommentCount": "1", "OwnerUserId": "140719", "LastEditDate": "2010-07-07T08:19:44.030"}, "3191803": {"Id": "3191803", "PostTypeId": "2", "Body": "<p><a href=\"http://www.sgi.com/tech/stl/List.html\" rel=\"nofollow noreferrer\">http://www.sgi.com/tech/stl/List.html</a></p>\n<blockquote>\n<p id=\"so_3191790_3191803_0\">A list is a doubly linked list. That is, it is a Sequence that supports both forward and backward traversal, and (amortized) constant time insertion and removal of elements at the beginning or the end, or in the middle. Lists have the important property that insertion and splicing do not invalidate iterators to list elements, and that even removal invalidates only the iterators that point to the elements that are removed</p>\n</blockquote>\n<p>With regards to access, if you're going to search for an element somewhere in the middle, it'll take linear time. But once you've got an iterator, it'll be (of course) constant time access, and it won't be invalidated by other insertions or removals.</p>\n", "LastActivityDate": "2010-07-07T03:55:41.597", "CommentCount": "0", "CreationDate": "2010-07-07T03:55:41.597", "ParentId": "3191790", "Score": "4", "OwnerUserId": "112"}, "3191977": {"Id": "3191977", "PostTypeId": "2", "Body": "<p>It is guaranteed by the C++ Standard 23.2.2/1:</p>\n<blockquote>\n<p id=\"so_3191790_3191977_0\">A <code>list</code> is a kind of sequence that supports bidirectional iterators and <strong>allows constant time insert and erase\n  operations anywhere within the sequence</strong>, with storage management handled automatically.  Unlike vectors\n  (23.2.4) and deques (23.2.1), fast random access to list elements is not supported, but many algorithms only\n  need sequential access anyway.</p>\n</blockquote>\n", "LastActivityDate": "2010-07-07T04:42:27.827", "CommentCount": "0", "CreationDate": "2010-07-07T04:42:27.827", "ParentId": "3191790", "Score": "1", "OwnerUserId": "123111"}, "3191790": {"ViewCount": "6502", "Body": "<p>Are all the inserts (anywhere) for the list constant?</p>\n<p>What about access?   </p>\n<p>Front, back - constant time?</p>\n<p>and in the middle of the list - linear time?</p>\n", "Title": "stl list - complexity", "CreationDate": "2010-07-07T03:52:13.317", "LastActivityDate": "2012-10-20T18:25:33.480", "CommentCount": "0", "PostTypeId": "1", "Id": "3191790", "Score": "2", "OwnerUserId": "382499", "Tags": "<c++>", "AnswerCount": "5"}});