post_cb({"17772464": {"CommentCount": "4", "ViewCount": "269", "PostTypeId": "1", "LastEditorUserId": "2178852", "CreationDate": "2013-07-21T12:42:11.870", "LastActivityDate": "2013-07-22T09:47:03.197", "Title": "C++ Code displays different, which is unexpected, output in different compilers", "AcceptedAnswerId": "17772778", "LastEditDate": "2013-07-22T09:47:03.197", "Id": "17772464", "Score": "1", "Body": "<p>This is a beginners question.</p>\n<p>Following is the C++ code that I was working with</p>\n<pre><code>int main() {\n    int x=5, y=5;\n    cout&lt;&lt;x--;\n    cout&lt;&lt;\",\";\n    cout&lt;&lt;--x;\n    cout&lt;&lt;\",\";\n    cout&lt;&lt;y--&lt;&lt;\",\"&lt;&lt;--y;\n    return 0;\n}\n</code></pre>\n<p>When run in Turbo C++ 3.0 the following is the output displayed by the code:</p>\n<pre><code>5,3,4,4\n</code></pre>\n<p>When compiled with Code::Blocks on Windows (uses MinGW with GCC/G++) the following is the output displayed:</p>\n<pre><code>5,3,4,3\n</code></pre>\n<p>Previously, I have heard that sometimes different compilers behave differently to certain problems, but I don't understand why this result is being displayed. Since logically, as I think, the output should be:</p>\n<pre><code>5,3,5,3\n</code></pre>\n<p>Can you please tell me the reason for such output logically.</p>\n<p>Thank you!</p>\n", "Tags": "<c++><g++><turboc++>", "OwnerUserId": "2178852", "AnswerCount": "2"}, "17772740": {"ParentId": "17772464", "CommentCount": "4", "CreationDate": "2013-07-21T13:19:38.730", "OwnerUserId": "923854", "PostTypeId": "2", "Id": "17772740", "Score": "0", "Body": "<p><code>cout&lt;&lt;y--&lt;&lt;\",\"&lt;&lt;--y;</code> is an expression with two unsequenced side effects on <code>y</code>, and therefore has undefined behavior.</p>\n", "LastActivityDate": "2013-07-21T13:19:38.730"}, "17772778": {"ParentId": "17772464", "PostTypeId": "2", "CommentCount": "1", "CreationDate": "2013-07-21T13:24:04.120", "Score": "3", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:12:59.617", "Id": "17772778", "OwnerUserId": "947836", "Body": "<p>There is no right or wrong output. Your code has undefined behavior and anything is possible.</p>\n<p>The reason lies in paragraph 1.9.15 (n3337) of C++ standard (emphasis mine):</p>\n<blockquote>\n<p id=\"so_17772464_17772778_0\">Except where noted, <strong>evaluations of operands of individual operators and of subexpressions of individual\n  expressions are unsequenced.</strong> [Note: In an expression that is evaluated more than once during the execution\n  of a program, unsequenced and indeterminately sequenced evaluations of its subexpressions need not be\n  performed consistently in different evaluations. \u2014end note ] The value computations of the operands of an\n  operator are sequenced before the value computation of the result of the operator. <strong>If a side effect on a scalar\n  object is unsequenced relative to either another side effect on the same scalar object or a value computation\n  using the value of the same scalar object, the behavior is unde\ufb01ned.</strong></p>\n</blockquote>\n<p>In this line</p>\n<pre><code>cout &lt;&lt; y-- &lt;&lt; \",\" &lt;&lt; --y;\n</code></pre>\n<p>you've introduced two side effects (increments by postfix and prefix, respectively) and two value computations (results of <code>y--</code> and <code>--y</code>) on a scalar object (<code>y</code>) where they are unsequenced. Thus, your program is ill-formed and just about anything is a possible output.</p>\n<p>Read more about this <a href=\"https://stackoverflow.com/questions/4176328/undefined-behavior-and-sequence-points\">here</a>.</p>\n", "LastActivityDate": "2013-07-21T13:24:04.120"}, "bq_ids": {"n4140": {"so_17772464_17772778_0": {"section_id": 5811, "quality": 0.9230769230769231, "length": 60}}, "n3337": {"so_17772464_17772778_0": {"section_id": 5584, "quality": 0.9230769230769231, "length": 60}}, "n4659": {"so_17772464_17772778_0": {"section_id": 7272, "quality": 0.8307692307692308, "length": 54}}}});