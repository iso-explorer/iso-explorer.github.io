post_cb({"47120582": {"ParentId": "47120549", "LastEditDate": "2017-11-05T10:46:39.683", "CommentCount": "0", "CreationDate": "2017-11-05T10:38:42.467", "OwnerUserId": "6789083", "LastEditorUserId": "6789083", "PostTypeId": "2", "Id": "47120582", "Score": "7", "Body": "<p>All variable names must begin with a letter of the alphabet or an\nunderscore. So yes, it is valid, except if you place it on file scope. (Be careful with double underscore though, it is reserved for the compiler internal use)</p>\n<p>Yet, I wouldn't recommend having variables with names like that, since it may be confusing for the reader.</p>\n<p>From the C++ 2003 standard:</p>\n<blockquote>\n<h3>17.4.3.1.2 Global names [lib.global.names]</h3>\n<p id=\"so_47120549_47120582_0\">Certain sets of names and function signatures are always reserved to the implementation:</p>\n<ul>\n<li>Each name that contains a double underscore (_ _) or begins with an underscore followed by an uppercase letter (2.11) is reserved to the implementation for any use.</li>\n<li>Each name that begins with an underscore is reserved to the implementation for use as a name in the global namespace.<sup>165</sup></li>\n</ul>\n<p id=\"so_47120549_47120582_1\"><sup>165)</sup> Such names are also reserved in namespace ::std (17.4.3.1). </p>\n</blockquote>\n", "LastActivityDate": "2017-11-05T10:46:39.683"}, "47120549": {"CreationDate": "2017-11-05T10:34:49.713", "CommentCount": "10", "ViewCount": "113", "PostTypeId": "1", "ClosedDate": "2017-11-05T12:54:39.130", "LastEditorUserId": "6935629", "LastActivityDate": "2017-11-05T12:55:18.610", "LastEditDate": "2017-11-05T10:51:48.127", "AcceptedAnswerId": "47120582", "FavoriteCount": "1", "Title": "Is `char _3 = 'c'` valid in C and C++?", "Id": "47120549", "Score": "-2", "Body": "<p>Considering, i have declared variable name as a numeric with underscore.</p>\n<pre><code>#include &lt;stdio.h&gt;\n\nint main()\n{\n   char _3 = 'c';\n   printf(\"%c\\n\",_3);\n}\n</code></pre>\n<p>I wonder, It's working fine in C and C++. So,is it valid?</p>\n", "Tags": "<c++><c><variables><underscores>", "OwnerUserId": "6935629", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_47120549_47120620_0": {"section_id": 5335, "quality": 1.0, "length": 9}, "so_47120549_47120582_0": {"section_id": 6307, "quality": 1.0, "length": 8}}, "n3337": {"so_47120549_47120620_0": {"section_id": 5132, "quality": 1.0, "length": 9}, "so_47120549_47120582_0": {"section_id": 6064, "quality": 1.0, "length": 8}}, "n4659": {"so_47120549_47120620_0": {"section_id": 6756, "quality": 1.0, "length": 9}, "so_47120549_47120582_0": {"section_id": 7844, "quality": 0.625, "length": 5}}}, "47120620": {"ParentId": "47120549", "LastEditDate": "2017-11-05T10:50:12.350", "CommentCount": "4", "CreationDate": "2017-11-05T10:41:52.607", "OwnerUserId": "817643", "LastEditorUserId": "214671", "PostTypeId": "2", "Id": "47120620", "Score": "5", "Body": "<p>It's valid in any scope other than global scope<sup>1</sup>.</p>\n<p>C++17 - <a href=\"https://timsong-cpp.github.io/cppwp/n4659/lex.name\" rel=\"nofollow noreferrer\">n4659 / [lex.name]</a></p>\n<blockquote>\n<p id=\"so_47120549_47120620_0\">In addition, some identifiers are reserved for use by C++\n  implementations and shall not be used otherwise; no diagnostic is\n  required.</p>\n<ul>\n<li><strong>Each identifier that begins with an underscore is reserved to the implementation for use as a name in the global namespace</strong>.</li>\n</ul>\n</blockquote>\n<p>The standard library actually has an example of it in namespace scope, inherited from <code>boost</code>: The placeholders for <code>std::bind</code>.</p>\n<p>And C has similar phrasing:</p>\n<p>C11 - <a href=\"http://port70.net/~nsz/c/c11/n1570.html#7.1.3\" rel=\"nofollow noreferrer\">n1570 / 7.1.3 Reserved identifiers</a></p>\n<blockquote>\n<p id=\"so_47120549_47120620_1\">Each header declares or defines all identifiers listed in its\n  associated subclause, and optionally declares or defines identifiers\n  listed in its associated future library directions subclause and\n  identifiers which are always reserved either for any use or for use as\n  file scope identifiers.</p>\n<ul>\n<li><strong>All identifiers that begin with an underscore are always reserved for use as identifiers with file scope in both the ordinary and tag\n  name spaces.</strong></li>\n</ul>\n</blockquote>\n<p>Though the choice of scopes is more limited.</p>\n<hr>\n<p><sub>\n<sup>1</sup> - Not a normative term, just a bastardization of the terms used by the two standards.\n</sub></p>\n</hr>", "LastActivityDate": "2017-11-05T10:50:12.350"}});