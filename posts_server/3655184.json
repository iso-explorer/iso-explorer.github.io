post_cb({"3655381": {"Id": "3655381", "PostTypeId": "2", "Body": "<p>It's all about Standard Conversion rule ($4.2)</p>\n<blockquote>\n<p id=\"so_3655184_3655381_0\">An lvalue or rvalue of type \u201carray ofN\n  T\u201d or \u201carray of unknown bound of T\u201d\n  can be converted to an rvalue of type\n  \u201cpointer to T.\u201d The result is a\n  pointer to the first element of the\n  array.</p>\n</blockquote>\n<p>The type of <code>od</code> and <code>td</code> respectively are</p>\n<p><code>char [3]</code></p>\n<p><code>char [1][3]</code></p>\n<p>This means that <code>od</code> has type 'array of 3 chars' (N = 3, T = char).</p>\n<p>So in accordance with the above quote, it can be converted to 'pointer to char'</p>\n<p>Therefore <code>char *p = od;</code> is perfectly well-formed</p>\n<p>Similarly the type of <code>od</code> is 'array of 1 array of 3 chars' (N = 1, T = array of 3 chars).</p>\n<p>So in accordance with the above quote, it can be converted to 'pointer to array of 3 chars'</p>\n<p>Therefore <code>char (*p)[3] = td;</code> is perfectly well-formed</p>\n<blockquote>\n<p id=\"so_3655184_3655381_1\">Is there a way to be able to assign to\n  **p the x[][]?</p>\n</blockquote>\n<p>No. Because type of <code>td[x][y]</code> for valid <code>x</code> and <code>y</code> is <code>char</code>. So what you can really do is <code>char *pc = &amp;td[0][0]</code>.</p>\n", "LastActivityDate": "2010-09-07T02:31:37.643", "CommentCount": "0", "CreationDate": "2010-09-07T02:31:37.643", "ParentId": "3655184", "Score": "1", "OwnerUserId": "418110"}, "3655238": {"Id": "3655238", "PostTypeId": "2", "Body": "<p>No, there's no way to assign the array to an \"int **\", because a two-dimensional array is an array of arrays, not an array of pointers.</p>\n<p>You could for instance do:</p>\n<pre><code>  int x1[2] = {0, 1};\n  int x2[2] = {2, 3};\n  int *x[2] = {x1, x2};\n  int **p = x;\n</code></pre>\n<p>... and maybe that would be an acceptable equivalent to what you are trying to do (depending on what exactly that is of course!).</p>\n<p><strong>Update:</strong> If you must keep x as a two-dimensional array, you could also do: <code>int (*p)[2] = x;</code> which gives you a pointer-to-array-of-int.</p>\n", "LastEditorUserId": "388661", "LastActivityDate": "2010-09-07T03:11:24.637", "Score": "2", "CreationDate": "2010-09-07T01:40:33.837", "ParentId": "3655184", "CommentCount": "10", "OwnerUserId": "388661", "LastEditDate": "2010-09-07T03:11:24.637"}, "3655241": {"Id": "3655241", "PostTypeId": "2", "Body": "<p>Using the pointer notation you can do this</p>\n<blockquote>\n<p id=\"so_3655184_3655241_0\">*(p + n) will return back a value in the subscript n which is equivalent of\n  p[n], a \"single dimension array\"</p>\n<p id=\"so_3655184_3655241_1\">*( * (p + i) + j) will return back a value in the subscripts i and j which\n  is equivalent of p[i][j], a \"double dimension array\"</p>\n</blockquote>\n<p>This will prove that using array subscripts [] decays into pointers as per the rule - see <strong>ANSI C Standard, 6.2.2.1</strong> - \"<em>An array name in an expression is treated by the compiler as a pointer to the first element of the array</em>\", furthermore, <strong>ANSI C Standard 6.3.2.1</strong> - \"<em>A subscript is always equivalent to an offset from a pointer</em>\", and also <strong>ANSI C Standard 6.7.1</strong> - \"<em>An array name in the declaration of a function parameter is treated as a pointer to the first element in the array</em>\"</p>\n<p>If you are not sure in understanding how pointers and arrays work, please see my other <a href=\"https://stackoverflow.com/questions/2124935/c-strings-confusion/2125429#2125429\">answer</a> which will explain how it works... </p>\n<p>Please ignore anyone who says arrays and pointers are the same - they are not...</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2010-09-07T01:58:28.840", "Score": "2", "CreationDate": "2010-09-07T01:41:15.037", "ParentId": "3655184", "CommentCount": "0", "OwnerUserId": "206367", "LastEditDate": "2017-05-23T11:44:43.567"}, "3655475": {"Id": "3655475", "PostTypeId": "2", "Body": "<p>A pointer to int <code>int *</code> can point at an integer within an array of integers, so that's why the first is OK;</p>\n<pre><code>int x[4] = { 0, 1, 2, 3 };\nint *p = x;\n</code></pre>\n<p>This makes <code>p</code> point to <code>x[0]</code>, the first int in <code>x</code>.</p>\n<p>A pointer to a pointer-to-int <code>int **</code> can point at a pointer-to-int within an array of pointers-to-int.  However, your second array is <em>not</em> an array of pointers-to-int; it is an array of arrays.  There <em>are</em> no pointers-to-int, so there is nothing sensible to point <code>int **p</code> at.  You can solve this in two ways.  The first is to change the type of <code>p</code> so that it is a pointer-to-array-of-2-ints:</p>\n<pre><code>int x[2][2] = { 0, 1, 2, 3 };\nint (*p)[2] = x;\n</code></pre>\n<p>Now <code>p</code> points at <code>x[0]</code>, the first <code>int [2]</code> in <code>x</code>.</p>\n<p>The alternative is to create some <code>pointers-to-int</code> to point at:</p>\n<pre><code>int x[2][2] = { 0, 1, 2, 3 };\nint *y[2] = { x[0], x[1] };\nint **p = y;\n</code></pre>\n<p>Now <code>p</code> points at <code>y[0]</code>, which is the first <code>int *</code> in <code>y</code>.  <code>y[0]</code> in turn points at <code>x[0][0]</code>, and <code>y[1]</code> points at <code>x[1][0]</code>.</p>\n", "LastActivityDate": "2010-09-07T03:05:25.110", "CommentCount": "0", "CreationDate": "2010-09-07T03:05:25.110", "ParentId": "3655184", "Score": "8", "OwnerUserId": "134633"}, "3655184": {"ViewCount": "232", "Body": "<p>Can someone explain why I can do:</p>\n<pre><code>int x[4] = { 0, 1, 2, 3 };\nint *p = x;\n</code></pre>\n<p>But cannot do:</p>\n<pre><code>int x[2][2] = { 0, 1, 2, 3 };\nint **p = x;\n</code></pre>\n<p>Is there a way to be able to assign to **p the x[][]?</p>\n<p>TIA</p>\n", "Title": "C/C++ Array initializer problem", "CreationDate": "2010-09-07T01:24:58.357", "LastActivityDate": "2010-09-07T03:20:36.340", "CommentCount": "1", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2010-09-07T01:26:29.163", "LastEditorUserId": "68204", "Id": "3655184", "Score": "2", "OwnerUserId": "406282", "Tags": "<c++><c><arrays>", "AnswerCount": "6"}, "bq_ids": {"n4140": {"so_3655184_3655381_0": {"length": 16, "quality": 0.8421052631578947, "section_id": 11}}, "n3337": {"so_3655184_3655381_0": {"length": 16, "quality": 0.8421052631578947, "section_id": 8}}, "n4659": {"so_3655184_3655381_0": {"length": 16, "quality": 0.8421052631578947, "section_id": 12}}}, "3655240": {"Id": "3655240", "PostTypeId": "2", "Body": "<p>If you are really using c++ instead of c, you can get this effect by using std::vector (or some other collection type).</p>\n<pre><code>typedef std::vector&lt;std::vector&lt;int&gt; &gt; intmatrix;\nintmatrix x;\nintmatrix::iterator p = x.begin();\n</code></pre>\n<p>or some such.</p>\n", "LastActivityDate": "2010-09-07T01:41:07.297", "CommentCount": "0", "CreationDate": "2010-09-07T01:41:07.297", "ParentId": "3655184", "Score": "1", "OwnerUserId": "65696"}, "3655526": {"Id": "3655526", "PostTypeId": "2", "Body": "<p>There is no way to meaningfully initialize you variable <code>p</code> with <code>x</code>. Why? Well, there's no way to answer your question until you explain how you even came to this idea. The type of <code>p</code> is <code>int **</code>. The type of <code>x</code> is <code>int[2][2]</code>. These are two different types. Where did you get the idea that you should be able to assign one to the other?</p>\n<p>If you really need to access elements of your <code>x</code> through a pointer of type <code>int **</code>, you have to do it indirectly. You have to create an additional intermediate array that will hold pointers to first elements of consecutive rows of array <code>x</code>:</p>\n<pre><code>int *rows[2] = { x[0], x[1] };\n</code></pre>\n<p>and now you can point your <code>p</code> to the beginning of this intermediate array</p>\n<pre><code>int **p = rows;\n</code></pre>\n<p>Now when you assess <code>p[i][j]</code> you get <code>x[i][j]</code>. </p>\n<p>There's no way to do it directly, without an intermediate array.</p>\n", "LastActivityDate": "2010-09-07T03:20:36.340", "CommentCount": "0", "CreationDate": "2010-09-07T03:20:36.340", "ParentId": "3655184", "Score": "2", "OwnerUserId": "187690"}});