post_cb({"31812910": {"Id": "31812910", "PostTypeId": "2", "Body": "<p>Yes, it is true, the member functions defined in the class are implicitly declared inline. But <code>inline</code> is only a suggestion you give to the compiler. The compiler could ignore it.</p>\n<p>If you want to see what happen with different scenarios you could read the assembler</p>\n", "LastActivityDate": "2015-08-04T15:08:54.967", "CommentCount": "2", "CreationDate": "2015-08-04T15:08:54.967", "ParentId": "31812723", "Score": "2", "OwnerUserId": "1885917"}, "bq_ids": {"n4140": {"so_31812723_31813156_1": {"length": 41, "quality": 0.8723404255319149, "section_id": 5402}, "so_31812723_31813156_0": {"length": 25, "quality": 0.8928571428571429, "section_id": 5881}}, "n3337": {"so_31812723_31813156_1": {"length": 41, "quality": 0.8723404255319149, "section_id": 5197}, "so_31812723_31813156_0": {"length": 25, "quality": 0.8928571428571429, "section_id": 5652}}, "n4659": {"so_31812723_31813156_1": {"length": 40, "quality": 0.851063829787234, "section_id": 6849}, "so_31812723_31813156_0": {"length": 25, "quality": 0.8928571428571429, "section_id": 7364}}}, "31812723": {"ViewCount": "307", "Body": "<p>As per some of the books, function defined(along with definition in header) in class are always inline. Is that true? </p>\n<p>How we can create such scenario using test app?</p>\n", "AcceptedAnswerId": "31813156", "Title": "Is function defined in class always inline?", "CreationDate": "2015-08-04T14:58:54.850", "Id": "31812723", "CommentCount": "3", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2015-08-04T16:04:11.587", "Score": "2", "OwnerUserId": "5190087", "Tags": "<c++><inline-functions>", "AnswerCount": "2"}, "31813156": {"Id": "31813156", "PostTypeId": "2", "Body": "<p>Functions defined within the class definition are implicitly marked <code>inline</code>.</p>\n<blockquote>\n<p id=\"so_31812723_31813156_0\"><code>[C++11: 9.3/2]:</code> A member function may be defined (8.4) in its class definition, in which case it is an <em>inline</em> member function (7.1.2), or it may be defined outside of its class definition if it has already been declared but not defined in its class definition. <em>[..]</em></p>\n</blockquote>\n<p>That is not the same as saying that they will be inlined.</p>\n<p>The <code>inline</code> keyword has implications for storage duration and linkage requirements, and these <em>must</em> be abided by.</p>\n<blockquote>\n<p id=\"so_31812723_31813156_1\"><code>[C++11: 7.1.2/2]:</code> A function declaration (8.3.5, 9.3, 11.3) with an <code>inline</code> specifier declares an <em>inline function</em>. The inline specifier indicates to the implementation that inline substitution of the function body at the point of call is to be preferred to the usual function call mechanism. An implementation is not required to perform this inline substitution at the point of call; however, even if this inline substitution is omitted, the other rules for inline functions defined by 7.1.2 shall still be respected.</p>\n</blockquote>\n<p>However, nowadays, your compiler will make the decision on whether to physically inline a function based on its own metrics, not based on the presence or absence of the <code>inline</code> keyword (because, nowadays, frankly the compiler knows best).</p>\n<p>I have no idea what \"test app\" you have in mind, but an example of this in code is very simple:</p>\n<pre><code>struct T\n{\n   void foo() {}  // implicitly `inline`\n};\n</code></pre>\n", "LastEditorUserId": "560648", "LastActivityDate": "2015-08-04T15:26:46.903", "Score": "4", "CreationDate": "2015-08-04T15:20:23.260", "ParentId": "31812723", "CommentCount": "0", "OwnerUserId": "560648", "LastEditDate": "2015-08-04T15:26:46.903"}});