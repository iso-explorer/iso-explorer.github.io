post_cb({"25069585": {"ParentId": "25069405", "CommentCount": "6", "Body": "<p>You're falling off the end of a function with non-<code>void</code> return type.  The fact that you don't use the return value does not make that ok.</p>\n<p>6.6.3 in the Standard says that:</p>\n<blockquote>\n<p id=\"so_25069405_25069585_0\">Flowing off the end of a function is equivalent to a <code>return</code> with no value; this results in undefined behavior in a value-returning function.</p>\n</blockquote>\n", "OwnerUserId": "103167", "PostTypeId": "2", "Id": "25069585", "Score": "2", "CreationDate": "2014-07-31T21:53:48.110", "LastActivityDate": "2014-07-31T21:53:48.110"}, "25070677": {"ParentId": "25069405", "CommentCount": "0", "Body": "<p>Is it against the rules to use recursive functions in your question?</p>\n<p>Why not do...</p>\n<pre><code>void addToEnd(listNode* node){\n    if(node == NULL){\n        *node = new listNode;\n        node-&gt;next = NULL;\n        node-&gt;val = ++nodeCount;\n    }else{\n        addToEnd(node-&gt;next);\n    }\n    return;\n}\n\nint main(){\n    listNode* first = NULL;\n    addToEnd(first); // 1\n    addToEnd(first); // 2\n    addToEnd(first); // 3\n    addToEnd(first); // 4\n    addToEnd(first); // Linked list is now 5 long\n}\n</code></pre>\n", "OwnerUserId": "3658249", "PostTypeId": "2", "Id": "25070677", "Score": "0", "CreationDate": "2014-07-31T23:36:29.580", "LastActivityDate": "2014-07-31T23:36:29.580"}, "25069606": {"ParentId": "25069405", "CommentCount": "0", "Body": "<p>There is no return statement just in case the if condition that checks <code>if(node==null)</code> fails..</p>\n", "OwnerUserId": "3822255", "PostTypeId": "2", "Id": "25069606", "Score": "0", "CreationDate": "2014-07-31T21:55:52.727", "LastActivityDate": "2014-07-31T21:55:52.727"}, "25082496": {"ParentId": "25069405", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>This is how I would have coded adding five nodes to a linked list that holds a node count. If anyone has advice it is welcome.</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;cstdlib&gt;\n\nusing namespace std;\n\nstruct listNode{\n int val;\n listNode* next;\n};\n\nlistNode* addToEnd(listNode*, int);\n\nint main()\n{\n  listNode* first = NULL;\n  listNode* temp;\n  int nodeCount = 1;\n\n  for(int i = 0; i &lt; 5; i++){\n     first = addToEnd(first, nodeCount);\n     nodeCount++;\n  }\n\n  temp = first;\n\n  while(temp){\n     cout &lt;&lt; temp-&gt;val &lt;&lt; ' ';\n     temp = temp-&gt;next;\n  }\n\n  temp = first;\n                               //Deallocate memory\n  while(temp){                 //could do memory deallocation while displaying \n     nodeToDelete = temp;      //the value of nodeCount but wanted to illustrate  \n                               //both methods individually\n     temp = temp-&gt;next;\n\n     delete nodeToDelete;   \n  }  \n\n  first = NULL;                //eliminate hanging pointer\n\n  return 0;\n}\n\nlistNode* addToEnd(listNode* node, int nodeCount) \n{\n\n  listNode* newNode = new (nothrow) listNode;\n  listNode* current = node;\n\n  if(newNode){\n     newNode-&gt;val = nodeCount;\n     newNode-&gt;next = NULL;\n     if (node == NULL)        \n        node = newNode;       \n\n     else{          \n        while (current-&gt;next != NULL) \n           current = current-&gt;next;\n\n           current-&gt;next = newNode;          \n     }\n  }\n  else\n     cout &lt;&lt; \"error allocationg memory\" &lt;&lt; endl;\n\n  return node;\n}\n</code></pre>\n", "OwnerUserId": "3158259", "LastEditorUserId": "3158259", "LastEditDate": "2014-08-01T14:47:47.913", "Id": "25082496", "Score": "0", "CreationDate": "2014-08-01T14:28:57.430", "LastActivityDate": "2014-08-01T14:47:47.913"}, "25069405": {"CommentCount": "0", "ViewCount": "138", "PostTypeId": "1", "LastEditorUserId": "2602718", "CreationDate": "2014-07-31T21:41:24.783", "LastActivityDate": "2014-08-01T14:47:47.913", "Title": "C++ Pointers, Linked List Confusion", "AcceptedAnswerId": "25069627", "LastEditDate": "2014-07-31T23:01:05.910", "Id": "25069405", "Score": "1", "Body": "<p>I am trying to build a linked list in C++.  My understanding is that the code I have created should create a node and then progressively link 4 more onto the end.  Unfortunately, while I would expect to see the cout results as \"12 123 1234 12345\" I'm seeing \"12 12 12 12\" and in my main I am unable to traverse the list - it just crashes.</p>\n<p>I have the following code:</p>\n<pre><code>struct listNode {\n\n    int val;\n    listNode* next;\n\n};\n\n\nint nodeCount = 0;\n\nlistNode* addToEnd(listNode* node) {\n\n    listNode* newNode = new listNode;\n    newNode-&gt;val = ++nodeCount;\n    newNode-&gt;next = NULL;\n\n    if (node == NULL) {\n        return newNode;\n    }\n\n    listNode* current = node;\n    cout&lt;&lt;\"\\n\\n\";\n    do {\n        if (current-&gt;next == NULL) {\n            current-&gt;next = newNode;\n        }\n        cout&lt;&lt;current-&gt;val&lt;&lt;\"\\n\";\n        current = current-&gt;next;\n    } while (current-&gt;next != NULL);\n    cout&lt;&lt;current-&gt;val&lt;&lt;endl;\n\n}\n\n\nint main()\n{\n\n    listNode* first = addToEnd(NULL);\n\n    addToEnd(first);\n    addToEnd(first);\n    addToEnd(first);\n    addToEnd(first);\n\n    cout&lt;&lt;\"Third: \"&lt;&lt;first-&gt;next-&gt;next-&gt;val;\n\n}\n</code></pre>\n<p>Any help is appreciated, as I am at wit's end!</p>\n", "Tags": "<c++><linked-list>", "OwnerUserId": "2692756", "AnswerCount": "6"}, "25069506": {"ParentId": "25069405", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Use a for loop to get you to the last node instead of a while, and then assign the new node OUTSIDE of the loop. Trying to do it inside will result in an infinite loop (and make the code harder to read):</p>\n<pre><code>listNode* current;\nfor(current = node; current-&gt;next != NULL; current = current-&gt;next) ;\ncurrent-&gt;next = newNode;\n</code></pre>\n<p>You're also forgetting to return <code>newNode</code> at the end of the function.</p>\n", "OwnerUserId": "2602718", "LastEditorUserId": "2602718", "LastEditDate": "2014-07-31T21:56:25.047", "Id": "25069506", "Score": "3", "CreationDate": "2014-07-31T21:48:47.160", "LastActivityDate": "2014-07-31T21:56:25.047"}, "25069627": {"ParentId": "25069405", "PostTypeId": "2", "CommentCount": "9", "Body": "<p>It is obvious that function <code>addToEnd</code> is wrong</p>\n<pre><code>listNode* addToEnd(listNode* node) {\n\n    listNode* newNode = new listNode;\n    newNode-&gt;val = ++nodeCount;\n    newNode-&gt;next = NULL;\n\n    if (node == NULL) {\n        return newNode;\n    }\n\n    listNode* current = node;\n    cout&lt;&lt;\"\\n\\n\";\n    do {\n        if (current-&gt;next == NULL) {\n            current-&gt;next = newNode;\n        }\n        cout&lt;&lt;current-&gt;val&lt;&lt;\"\\n\";\n        current = current-&gt;next;\n    } while (current-&gt;next != NULL);\n    cout&lt;&lt;current-&gt;val&lt;&lt;endl;\n\n}\n</code></pre>\n<p>Let's assume that the list already contains two nodes and consider the do-while loop inside the function. At first <code>current_next</code> != null so the following statement is executed</p>\n<pre><code>        current = current-&gt;next;\n</code></pre>\n<p>Now current points to the second node. Its data member <code>next</code> is equal to NULL. So the condition of the loop</p>\n<pre><code>    } while (current-&gt;next != NULL);\n</code></pre>\n<p>will be false and no iteration will be repeated. So we added nothing.</p>\n<p>Also the function returns nothing if node is not equal to NULL.</p>\n<p>Rewrite the function the following way</p>\n<pre><code>listNode* addToEnd( listNode* node ) \n{\n\n    listNode* newNode = new listNode { ++nodeCount, NULL };\n\n    if ( node == NULL) return newNode;\n\n    listNode* current = node;\n\n    while ( current-&gt;next != NULL ) current = current-&gt;next;\n\n    current-&gt;next = newNode;\n\n    return newNode;\n    // or\n    //return node;    \n}\n</code></pre>\n<p>Take into account that this statement</p>\n<pre><code>cout&lt;&lt;\"Third: \"&lt;&lt;first-&gt;next-&gt;next-&gt;val;\n</code></pre>\n<p>outputs only the value of the third node.\nIf you want to output all the list you should write</p>\n<pre><code>for ( listNode *current = first; current; current = current-&gt;next ) \n{\n    std::cout &lt;&lt; current-&gt;val &lt;&lt; ' ';\n}\nstd::cout &lt;&lt; std::endl;\n</code></pre>\n<p>By the way using my function you could write in main for example the following way:)</p>\n<pre><code>listNode* first;\n\naddToEnd( addToEnd( addToEnd( addToEnd( first  = addToEnd( NULL ) ) ) ) );\n</code></pre>\n", "OwnerUserId": "2877241", "LastEditorUserId": "2877241", "LastEditDate": "2014-07-31T22:18:11.283", "Id": "25069627", "Score": "4", "CreationDate": "2014-07-31T21:57:18.977", "LastActivityDate": "2014-07-31T22:18:11.283"}, "bq_ids": {"n4140": {"so_25069405_25069585_0": {"section_id": 3913, "quality": 1.0, "length": 12}}, "n3337": {"so_25069405_25069585_0": {"section_id": 3773, "quality": 1.0, "length": 12}}, "n4659": {"so_25069405_25069585_0": {"section_id": 4799, "quality": 0.75, "length": 9}}}});