post_cb({"1915707": {"ParentId": "1915659", "CommentCount": "4", "Body": "<p>The type contains more than just the return type. Hence, the return type must be int, but you are free considering the remaining argument, i.e. you may e.g., select between</p>\n<pre><code>int main()\n</code></pre>\n<p>and</p>\n<pre><code>int main(int argc, char **argv)\n</code></pre>\n", "OwnerUserId": "229535", "PostTypeId": "2", "Id": "1915707", "Score": "2", "CreationDate": "2009-12-16T16:10:41.350", "LastActivityDate": "2009-12-16T16:10:41.350"}, "1915728": {"ParentId": "1915659", "CommentCount": "3", "Body": "<p>As far as parameters are concern ,it allows </p>\n<ol>\n<li><p>int main()</p></li>\n<li><p>int main(int argc , char * argv[])</p></li>\n<li><p>int main(int argc , char * argv[] , char * envr[])</p></li>\n</ol>\n<p>But as per standard return type should be <strong>int</strong> for consistency purpose.</p>\n", "OwnerUserId": "303986", "PostTypeId": "2", "Id": "1915728", "Score": "0", "CreationDate": "2009-12-16T16:12:38.340", "LastActivityDate": "2009-12-16T16:12:38.340"}, "1915702": {"ParentId": "1915659", "CommentCount": "6", "Body": "<p>The english you quote does prohibit declaring <code>main</code> to return <code>void</code>. It is allowing variation in the arguments that come in, but not in the return type.</p>\n", "OwnerUserId": "131433", "PostTypeId": "2", "Id": "1915702", "Score": "12", "CreationDate": "2009-12-16T16:10:16.927", "LastActivityDate": "2009-12-16T16:10:16.927"}, "1915772": {"ParentId": "1915659", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The standard is saying that the return type must be <code>int</code>, but that the rest of the type is up to the implementation.  For example, you could make a standard-compliant (but not terribly useful) C++ compiler that used.</p>\n<pre><code>int main(int secondsSinceSystemStart, int myFavoriteNumber, char* aFunnyJoke)\n</code></pre>\n<p>From <a href=\"http://en.wikipedia.org/wiki/Main_function_%28programming%29#C_and_C.2B.2B\" rel=\"nofollow noreferrer\">Wikipedia</a>:</p>\n<blockquote>\n<p id=\"so_1915659_1915772_0\">In C and C++, the function prototype of the main function looks like one of the following:</p>\n<pre><code>int main(void)\nint main(int argc, char **argv)\n</code></pre>\n<p id=\"so_1915659_1915772_1\">The parameters argc, argument count, and argv, argument vector, respectively give the number and value of the program's command-line arguments. The names of argc and argv may be any valid identifier, but it is common convention to use these names. Other platform-dependent formats are also allowed by the C and C++ standards; for example, Unix (though not POSIX.1) and Microsoft Visual C++ have a third argument giving the program's environment, otherwise accessible through getenv in stdlib.h:</p>\n<pre><code>int main(int argc, char **argv, char **envp)\n</code></pre>\n<p id=\"so_1915659_1915772_2\">Mac OS X and Darwin have a fourth parameter containing arbitrary OS-supplied information, such as the path to the executing binary:</p>\n<pre><code>int main(int argc, char **argv, char **envp, char **apple)\n</code></pre>\n</blockquote>\n", "OwnerUserId": "91756", "LastEditorUserId": "33732", "LastEditDate": "2009-12-16T19:36:09.023", "Id": "1915772", "Score": "1", "CreationDate": "2009-12-16T16:17:55.313", "LastActivityDate": "2009-12-16T19:36:09.023"}, "1915695": {"ParentId": "1915659", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2009-12-16T16:09:27.670", "Id": "1915695", "LastEditDate": "2009-12-16T19:42:37.040", "OwnerDisplayName": "anon", "Score": "7", "Body": "<p>Aaargh! Yes it does. The only return type allowed by the standard is int. To quote from section 3.6.1:</p>\n<blockquote>\n<p id=\"so_1915659_1915695_0\">It shall have a return type of type\n  int, but otherwise its type is\n  implementation-defined.</p>\n</blockquote>\n<p>meaning it could look like this:</p>\n<pre><code>int main( float f );\nint main( int x, int y );\n</code></pre>\n<p>etc. etc.</p>\n", "LastActivityDate": "2009-12-16T19:42:37.040", "LastEditorUserId": "87234"}, "1915744": {"ParentId": "1915659", "CommentCount": "0", "Body": "<p>The intent is to say that aspects of the type of the <code>main</code> function other than the return type are implementation defined.  That means this declaration is allowed by this clause of the standard:</p>\n<pre><code>int main(int fred, char *bouncy);\n</code></pre>\n<p>but not this one:</p>\n<pre><code>void main(int fred, char *bouncy);\n</code></pre>\n<p>Its return type <strong>must</strong> be <code>int</code>, but the implementation is allowed to have different argument types.</p>\n", "OwnerUserId": "167958", "PostTypeId": "2", "Id": "1915744", "Score": "0", "CreationDate": "2009-12-16T16:14:02.547", "LastActivityDate": "2009-12-16T16:14:02.547"}, "1915659": {"CommentCount": "0", "ViewCount": "1491", "PostTypeId": "1", "LastEditorUserId": "560648", "CreationDate": "2009-12-16T16:06:17.323", "LastActivityDate": "2012-01-25T16:40:44.777", "Title": "does c++ standard prohibit the void main() prototype?", "AcceptedAnswerId": "1915702", "LastEditDate": "2012-01-25T16:40:44.777", "Id": "1915659", "Score": "6", "Body": "<p>In section 3.6.1.2 of both C++ Standard 1998 and 2003 editions,</p>\n<blockquote>\n<p id=\"so_1915659_1915659_0\">An implementation shall not predefine the main function. This function shall not be overloaded. It shall\n  have a return type of type int, but otherwise its type is implementation-defined.</p>\n</blockquote>\n<p>I am not a native English speaker.I do not sure what does\"but otherwise\" means.Whether it is to prohibit the other return type,or to give the right to C++ compiler writer?</p>\n<p>So what's the answer?</p>\n", "Tags": "<c++><standards><main>", "OwnerUserId": "193251", "AnswerCount": "6"}, "bq_ids": {"n4140": {"so_1915659_1915659_0": {"section_id": 7146, "quality": 0.8823529411764706, "length": 15}, "so_1915659_1915695_0": {"section_id": 7146, "quality": 0.9, "length": 9}}, "n3337": {"so_1915659_1915659_0": {"section_id": 6890, "quality": 0.8823529411764706, "length": 15}, "so_1915659_1915695_0": {"section_id": 6890, "quality": 0.9, "length": 9}}, "n4659": {"so_1915659_1915659_0": {"section_id": 8647, "quality": 0.8823529411764706, "length": 15}, "so_1915659_1915695_0": {"section_id": 8647, "quality": 0.9, "length": 9}}}});