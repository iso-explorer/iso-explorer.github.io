post_cb({"40383290": {"ParentId": "40382838", "PostTypeId": "2", "CommentCount": "6", "Body": "<p>Because <code>optional</code>, as standardized in C++17, does not permit reference types. This was excluded by design.</p>\n<p>There are two reasons for this. The first is that, structurally speaking, an <code>optional&lt;T&amp;&gt;</code> is equivalent to a <code>T*</code>. They may have different interfaces, but they do the same thing.</p>\n<p>The second thing is that there was effectively no consensus by the standards committee on questions of exactly how <code>optional&lt;T&amp;&gt;</code> should behave.</p>\n<p>Consider the following:</p>\n<pre><code>optional&lt;T&amp;&gt; ot = ...;\nT t = ...;\not = t;\n</code></pre>\n<p>What should that last line do? Is it taking the object being referenced by <code>ot</code> and copy-assign to it, such that <code>*ot == t</code>? Or should it rebind the stored reference itself, such that <code>ot.get() == &amp;t</code>? Worse, will it <a href=\"https://stackoverflow.com/a/39985029/734069\">do different things based on whether <code>ot</code> was engaged or not</a> before the assignment?</p>\n<p>Some people will expect it to do one thing, and some people will expect it to do the other. So no matter which side you pick, somebody is going to be confused.</p>\n<p>If you had used a <code>T*</code> instead, it would be quite clear which happens:</p>\n<pre><code>T* pt = ...;\nT t = ...;\npt = t;   //Compile error. Be more specific.\n*pt = t;  //Assign to pointed-to object.\npt = &amp;t;  //Change pointer.\n</code></pre>\n", "OwnerUserId": "734069", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T11:53:50.530", "Id": "40383290", "Score": "4", "CreationDate": "2016-11-02T15:05:37.787", "LastActivityDate": "2016-11-02T15:40:36.800"}, "40382838": {"CommentCount": "4", "ViewCount": "471", "PostTypeId": "1", "LastEditorUserId": "636019", "CreationDate": "2016-11-02T14:45:34.580", "LastActivityDate": "2017-07-18T14:58:15.260", "Title": "Why GCC rejects std::optional for references?", "AcceptedAnswerId": "40383290", "LastEditDate": "2016-11-02T21:42:46.707", "Id": "40382838", "Score": "4", "Body": "<p><code>std::optional&lt;int&amp;&gt; xx;</code> just doesn't compile for the latest gcc-7.0.0 snapshot. Does the C++17 standard include <code>std::optional</code> for references? And why if it doesn't? (The implementation with pointers in a dedicated specialization whould cause no problems i guess.)</p>\n", "Tags": "<c++><gcc><reference><optional><c++1z>", "OwnerUserId": "371239", "AnswerCount": "2"}, "40383196": {"ParentId": "40382838", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>In [optional]:</p>\n<blockquote>\n<p id=\"so_40382838_40383196_0\">A program that necessitates the instantiation of template optional for a reference type, or for possibly cv-qualified types <code>in_place_t</code> or <code>nullopt_t</code> is ill-formed.</p>\n</blockquote>\n<p>There is no <code>std::optional&lt;T&amp;&gt;</code>. For now, you'll have to use <code>std::optional&lt;std::reference_wrapper&lt;T&gt;&gt;</code>. </p>\n", "OwnerUserId": "2069064", "LastEditorUserId": "2069064", "LastEditDate": "2017-07-18T14:58:15.260", "Id": "40383196", "Score": "2", "CreationDate": "2016-11-02T15:01:13.980", "LastActivityDate": "2017-07-18T14:58:15.260"}, "bq_ids": {"n4140": {"so_40382838_40383196_0": {"section_id": 4706, "quality": 0.5833333333333334, "length": 7}}, "n3337": {"so_40382838_40383196_0": {"section_id": 4515, "quality": 0.5833333333333334, "length": 7}}, "n4659": {"so_40382838_40383196_0": {"section_id": 5015, "quality": 1.0, "length": 12}}}});