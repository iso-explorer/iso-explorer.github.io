post_cb({"bq_ids": {"n4140": {"so_15279547_15279657_0": {"length": 31, "quality": 0.8378378378378378, "section_id": 5962}, "so_15279547_15279658_2": {"length": 5, "quality": 1.0, "section_id": 2579}, "so_15279547_15279659_0": {"length": 11, "quality": 0.9166666666666666, "section_id": 5962}, "so_15279547_15279658_4": {"length": 9, "quality": 0.6428571428571429, "section_id": 6894}, "so_15279547_15279658_1": {"length": 33, "quality": 0.868421052631579, "section_id": 5962}}, "n3337": {"so_15279547_15279657_0": {"length": 31, "quality": 0.8378378378378378, "section_id": 5731}, "so_15279547_15279658_1": {"length": 33, "quality": 0.868421052631579, "section_id": 5731}, "so_15279547_15279659_0": {"length": 11, "quality": 0.9166666666666666, "section_id": 5731}, "so_15279547_15279658_4": {"length": 9, "quality": 0.6428571428571429, "section_id": 6640}, "so_15279547_15279658_2": {"length": 5, "quality": 1.0, "section_id": 6638}}, "n4659": {"so_15279547_15279659_0": {"length": 11, "quality": 0.9166666666666666, "section_id": 7451}, "so_15279547_15279658_4": {"length": 9, "quality": 0.6428571428571429, "section_id": 5305}, "so_15279547_15279658_2": {"length": 5, "quality": 1.0, "section_id": 3317}}}, "15279547": {"ViewCount": "572", "Body": "<p>There is this code:</p>\n<pre><code>auto fun = [](int x)-&gt;int {return x + 1; };\nstd::cout &lt;&lt; typeid(fun).name() &lt;&lt; std::endl;\n</code></pre>\n<p>The result is: <code>Z4mainEUliE_</code> but c++filt doesn't seem to explain what is it. What is type of lambda expression?</p>\n", "AcceptedAnswerId": "15279659", "Title": "Type of lambda function", "CreationDate": "2013-03-07T19:01:57.987", "LastActivityDate": "2013-03-07T19:22:33.967", "CommentCount": "1", "LastEditDate": "2013-03-07T19:22:33.967", "PostTypeId": "1", "Tags": "<c++><c++11><lambda><typeid>", "Id": "15279547", "AnswerCount": "3", "Score": "7", "OwnerUserId": "738811", "ClosedDate": "2016-12-21T08:32:20.027", "LastEditorUserId": "1932150"}, "15279657": {"Id": "15279657", "PostTypeId": "2", "Body": "<p>The type of a lambda function is unspecified by the standard (\u00a75.1.2):</p>\n<blockquote>\n<p id=\"so_15279547_15279657_0\">The type of the lambda-expression (which is also the type of the closure object) is a <strong>unique, unnamed non-union classtype</strong> \u2014 called the closure type \u2014 whose properties are described below. This class type is not an aggregate (8.5.1). The closure type is declared in the smallest block scope, class scope, or namespace scope that contains the corresponding lambda-expression.</p>\n</blockquote>\n<p>It then goes on listing the exact properties a closure type should have.</p>\n<p>Therefore there is no general type for a lambda function to have. The compiler will generate a new functor type with unspecified name for each lambda function</p>\n", "LastActivityDate": "2013-03-07T19:07:19.537", "CommentCount": "0", "CreationDate": "2013-03-07T19:07:19.537", "ParentId": "15279547", "Score": "6", "OwnerUserId": "201270"}, "15279658": {"Id": "15279658", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_15279547_15279658_0\">What is type of lambda expression?</p>\n</blockquote>\n<p>The type of a lambda expression (the so-called <strong>closure</strong>) is an unnamed class type with a function call operator automatically generated by the compiler. The internal name the compiler will give it is unspecified. </p>\n<p>According to Paragraph 5.1.2/3 of the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_15279547_15279658_1\">The type of the lambda-expression (which is also the type of the closure object) is a unique, <strong>unnamed nonunion\n  class type</strong> \u2014 called the closure type \u2014 whose properties are described below. This class type is not\n  an aggregate (8.5.1). The closure type is declared in the smallest block scope, class scope, or namespace\n  scope that contains the corresponding lambda-expression. [...]</p>\n</blockquote>\n<p>Also notice, that the <code>name()</code> member function of the <code>type_info</code> class (the type returned by <code>typeid()</code>) is also implementation-dependent, and the Standard does not require it to be meaningful for a human.</p>\n<p>Per Paragraph 18.7.1:</p>\n<blockquote>\n<p id=\"so_15279547_15279658_2\"><code>const char* name() const noexcept;</code></p>\n<p id=\"so_15279547_15279658_3\">9 <em>Returns</em>: An <strong>implementation-defined</strong> NTBS.</p>\n<p id=\"so_15279547_15279658_4\">10 <em>Remarks</em>: The message may be a null-terminated multibyte string (17.5.2.1.4.2), suitable for conversion and display as a wstring (21.3, 22.4.1.4)</p>\n</blockquote>\n", "LastEditorUserId": "1932150", "LastActivityDate": "2013-03-07T19:18:14.370", "Score": "6", "CreationDate": "2013-03-07T19:07:20.253", "ParentId": "15279547", "CommentCount": "0", "OwnerUserId": "1932150", "LastEditDate": "2013-03-07T19:18:14.370"}, "15279659": {"Id": "15279659", "PostTypeId": "2", "Body": "<p>\u00a75.1.2/3 states:</p>\n<blockquote>\n<p id=\"so_15279547_15279659_0\">The type of the <em>lambda-expression</em> (which is also the type of the closure object) is a unique, unnamed non-union class type</p>\n</blockquote>\n<p>It goes on to say more, but that's the most important bit. A lambda is basically an instance of an anonymous class.</p>\n<p>Incidentally, the demangled form of your lambda is <code>main::$_0</code>.</p>\n", "LastActivityDate": "2013-03-07T19:07:22.650", "CommentCount": "0", "CreationDate": "2013-03-07T19:07:22.650", "ParentId": "15279547", "Score": "10", "OwnerUserId": "582"}});