post_cb({"18402953": {"ParentId": "18402853", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>In C++ and C99/C11, without a return statement in main function, it's <strong>default to return 0</strong>;</p>\n<p>\u00a7 3.6.1 Main function</p>\n<blockquote>\n<p id=\"so_18402853_18402953_0\">A return statement in main has the effect of leaving the main function (destroying any objects with automatic storage duration) and calling std::exit with the return value as the argument. If control reaches the end of main without encountering a return statement, the effect is that of executing return 0;</p>\n</blockquote>\n<p>also read wiki page  <a href=\"http://en.wikipedia.org/wiki/Main_function#C_and_C.2B.2B\">C/C++ main function</a></p>\n<blockquote>\n<p id=\"so_18402853_18402953_1\">In case a return value is not defined by the programmer, an implicit return 0; at the end of the main() function is inserted by the compiler; this behavior is required by the C++ standard.</p>\n</blockquote>\n", "OwnerUserId": "951757", "LastEditorUserId": "951757", "LastEditDate": "2013-08-24T03:25:49.800", "Id": "18402953", "Score": "25", "CreationDate": "2013-08-23T12:31:21.023", "LastActivityDate": "2013-08-24T03:25:49.800"}, "18402896": {"ParentId": "18402853", "CommentCount": "20", "Body": "<p>In C++, and in C99 and C11, it is a special rule of the language that if the control flow reaches the end of the <code>main</code> function, then the function impliclty returns <code>0</code>.</p>\n", "OwnerUserId": "596781", "PostTypeId": "2", "Id": "18402896", "Score": "37", "CreationDate": "2013-08-23T12:28:49.657", "LastActivityDate": "2013-08-23T12:28:49.657"}, "18404472": {"ParentId": "18402853", "CommentCount": "0", "Body": "<p>Other than conforming to an arbitrary language standard, there is no compelling reason to return a value when the main function ends.</p>\n<p>It is only because processes on the popular operating systems have a notion of a return code for a process that has terminated. It is not hard to imagine an operating system where they need not return any value. You can also imagine a world where 0 is implicitly returned by all processes unless otherwise overridden -- in which case, you can delegate the return code decision to a system call. (In fact, such a system call already exists in the form of C's exit function).</p>\n", "OwnerUserId": "92971", "PostTypeId": "2", "Id": "18404472", "Score": "0", "CreationDate": "2013-08-23T13:45:56.020", "LastActivityDate": "2013-08-23T13:45:56.020"}, "18405545": {"ParentId": "18402853", "CommentCount": "0", "Body": "<p>As other people have stated, some compilers don't require you to explicitly <code>return 0;</code> however, it is always a good idea to (if possible). I would discourage the use of any compiler that disallows you from returning from your main function.</p>\n<p>I would like to note that the return value from int main is very important, and actually has a use.</p>\n<p>The return value from main is sometimes referred to as the <code>exit status</code> or <code>error code</code> from your program, zero indicating that it completed successfully. Other programs and scripts can access this code to determine if your program completed successfully.</p>\n<p>More information here: <a href=\"http://en.wikipedia.org/wiki/Exit_status\" rel=\"nofollow\">http://en.wikipedia.org/wiki/Exit_status</a></p>\n", "OwnerUserId": "1486100", "PostTypeId": "2", "Id": "18405545", "Score": "0", "CreationDate": "2013-08-23T14:37:46.240", "LastActivityDate": "2013-08-23T14:37:46.240"}, "18402983": {"ParentId": "18402853", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The standard says that <code>main</code> will return <code>0</code> if there is no <code>return</code> statement. From the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3485.pdf\" rel=\"nofollow\">draft C++ standard</a> section <code>3.6.1</code> paragraph <code>5</code>:</p>\n<blockquote>\n<p id=\"so_18402853_18402983_0\">return statement in main has the effect of leaving the main function (destroying any objects with automatic storage duration) and calling std::exit with the return value as the argument. <strong>If control reaches the end of main without encountering a return statement, the effect is that of executing</strong></p>\n<pre><code>   return 0;\n</code></pre>\n</blockquote>\n<p>The <code>C99</code> draft standard in section <code>5.1.2.2.3</code> says:</p>\n<blockquote>\n<p id=\"so_18402853_18402983_1\">If the return type of the main function is a type compatible with int, a return from the\n  initial call to the main function is equivalent to calling the exit function with the value\n  returned by the main function as its argument;10) <strong>reaching the } that terminates the\n  main function returns a value of 0.</strong></p>\n</blockquote>\n<p>From what I can tell the last version of <a href=\"http://en.wikipedia.org/wiki/Turbo_C%2B%2B\" rel=\"nofollow\">Turbo C++</a> is quite old and I can not find anything that defines which standard if any it supports.</p>\n", "OwnerUserId": "1708801", "LastEditorUserId": "1708801", "LastEditDate": "2013-08-23T12:57:35.623", "Id": "18402983", "Score": "4", "CreationDate": "2013-08-23T12:32:42.073", "LastActivityDate": "2013-08-23T12:57:35.623"}, "18406863": {"ParentId": "18402853", "CommentCount": "0", "Body": "<p>TC will return EXIT_SUCCESS no matter you explicit specify or not</p>\n", "OwnerUserId": "2487249", "PostTypeId": "2", "Id": "18406863", "Score": "0", "CreationDate": "2013-08-23T15:44:55.857", "LastActivityDate": "2013-08-23T15:44:55.857"}, "18402912": {"ParentId": "18402853", "PostTypeId": "2", "CommentCount": "0", "Body": "<p><code>main</code> must return an <code>int</code>, some compilers, including Turbo C++, may allow other return values, notably <code>void main</code>, but it's wrong, never use that.</p>\n<p>However in C++, if you don't explicitly return a value in <code>main</code>, it's the same as<code>return 0;</code></p>\n<blockquote>\n<p id=\"so_18402853_18402912_0\"><strong>C++11 \u00a73.6.1 Main function</strong> section 5</p>\n<p id=\"so_18402853_18402912_1\">A return statement in main has the effect of leaving the main function (destroying any objects with automatic storage duration) and calling std::exit with the return value as the argument. If control reaches the end of main without encountering a return statement, the effect is that of executing</p>\n<pre><code>return 0;\n</code></pre>\n</blockquote>\n<p>Note that for C, this is only supported in C99 and later, but not supported by C89.</p>\n", "OwnerUserId": "1009479", "LastEditorUserId": "1009479", "LastEditDate": "2013-08-24T03:05:47.893", "Id": "18402912", "Score": "13", "CreationDate": "2013-08-23T12:29:49.127", "LastActivityDate": "2013-08-24T03:05:47.893"}, "bq_ids": {"n4140": {"so_18402853_18402983_0": {"section_id": 7149, "quality": 1.0, "length": 26}, "so_18402853_18402953_0": {"section_id": 7149, "quality": 0.9629629629629629, "length": 26}, "so_18402853_18402912_1": {"section_id": 7149, "quality": 1.0, "length": 26}}, "n3337": {"so_18402853_18402983_0": {"section_id": 6893, "quality": 1.0, "length": 26}, "so_18402853_18402953_0": {"section_id": 6893, "quality": 0.9629629629629629, "length": 26}, "so_18402853_18402912_1": {"section_id": 6893, "quality": 1.0, "length": 26}}, "n4659": {"so_18402853_18402983_0": {"section_id": 8650, "quality": 0.8076923076923077, "length": 21}, "so_18402853_18402953_0": {"section_id": 8650, "quality": 0.8148148148148148, "length": 22}, "so_18402853_18402912_1": {"section_id": 8650, "quality": 0.8076923076923077, "length": 21}}}, "18402853": {"CommentCount": "3", "AcceptedAnswerId": "18402896", "PostTypeId": "1", "ClosedDate": "2013-08-23T19:22:21.597", "LastEditorUserId": "1203129", "CreationDate": "2013-08-23T12:27:10.447", "LastActivityDate": "2013-08-24T03:25:49.800", "LastEditDate": "2013-08-23T17:24:18.100", "ViewCount": "11281", "FavoriteCount": "5", "Title": "Must the int main() function return a value in all compilers?", "Id": "18402853", "Score": "18", "Body": "<p>Why is it not necessary to include the return statement while using int main() in some compilers for C++? What about Turbo C++?</p>\n", "Tags": "<c++><turboc++>", "OwnerUserId": "2565398", "AnswerCount": "7"}});