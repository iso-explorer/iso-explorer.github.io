post_cb({"bq_ids": {"n4140": {"so_16985687_16985687_3": {"length": 4, "quality": 0.6666666666666666, "section_id": 633}, "so_16985687_16985687_0": {"length": 28, "quality": 1.0, "section_id": 3309}, "so_16985687_16985687_1": {"length": 6, "quality": 1.0, "section_id": 3325}}, "n3337": {"so_16985687_16985687_3": {"length": 5, "quality": 0.8333333333333334, "section_id": 3195}, "so_16985687_16985687_1": {"length": 6, "quality": 1.0, "section_id": 3195}, "so_16985687_16985687_0": {"length": 28, "quality": 1.0, "section_id": 3179}}, "n4659": {"so_16985687_16985687_3": {"length": 5, "quality": 0.8333333333333334, "section_id": 4091}, "so_16985687_16985687_1": {"length": 6, "quality": 1.0, "section_id": 4091}, "so_16985687_16985687_0": {"length": 22, "quality": 0.7857142857142857, "section_id": 4075}}}, "16993028": {"Id": "16993028", "PostTypeId": "2", "Body": "<p>Brace elision applies, but not in C++11. In C++14, they will apply because of <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1270\" rel=\"noreferrer\">http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1270</a> . If you are lucky, Clang will backport that to their C++11 mode (let's hope they will!).</p>\n", "LastActivityDate": "2013-06-07T21:12:09.747", "CommentCount": "1", "CreationDate": "2013-06-07T21:12:09.747", "ParentId": "16985687", "Score": "20", "OwnerUserId": "34509"}, "28890081": {"Id": "28890081", "PostTypeId": "2", "Body": "<p>Relevant: <a href=\"http://en.cppreference.com/w/cpp/language/aggregate_initialization\" rel=\"nofollow\">http://en.cppreference.com/w/cpp/language/aggregate_initialization</a></p>\n<p>In short,</p>\n<pre><code>struct S {\n    int x;\n    struct Foo {\n        int i;\n        int j;\n        int a[3];\n    } b;\n};\nS s1 = { 1, { 2, 3, {4, 5, 6} } };\nS s2 = { 1, 2, 3, 4, 5, 6}; // same, but with brace elision\nS s3{1, {2, 3, {4, 5, 6} } }; // same, using direct-list-initialization syntax\nS s4{1, 2, 3, 4, 5, 6}; // error in C++11: brace-elision only allowed with equals sign\n                        // okay in C++14\n</code></pre>\n", "LastActivityDate": "2015-03-05T23:54:39.743", "CommentCount": "0", "CreationDate": "2015-03-05T23:54:39.743", "ParentId": "16985687", "Score": "3", "OwnerUserId": "1911412"}, "16985687": {"ViewCount": "4414", "Body": "<p>Suppose there's an <code>std::array</code> to be initialized. It's okay if using double braces:</p>\n<pre><code>std::array&lt;int, 2&gt; x = {{0, 1}};\nstd::array&lt;int, 2&gt; x{{0, 1}};\n</code></pre>\n<p>It's also okay to use single braces in the good old aggregate initialization, as the brace elision will take care of the missing braces:</p>\n<pre><code>std::array&lt;int, 2&gt; x = {0, 1};\n</code></pre>\n<p>However, is it okay to use list-initialization with single braces? GCC accepts it, Clang rejects it with \"cannot omit braces around initialization of subobject when using direct list-initialization\".</p>\n<pre><code>std::array&lt;int, 2&gt; x{0, 1};\n</code></pre>\n<p>The only part of the standard where brace elision is mentioned is 8.5.1/12, which says:</p>\n<blockquote>\n<p id=\"so_16985687_16985687_0\">All implicit type conversions (Clause 4) are considered when initializing the aggregate member with an assignment-expression. If the assignment-expression can initialize a member, the member is initialized. Otherwise, if the member is itself a subaggregate, brace elision is assumed and the assignment-expression is considered for the initialization of the first member of the subaggregate.</p>\n</blockquote>\n<p>8.5.1 is about aggregate initialization specifically, so that should mean Clang is correct to reject, right? Not so fast. 8.5.4/3 says:</p>\n<blockquote>\n<p id=\"so_16985687_16985687_1\">List-initialization of an object or reference of type T is defined as follows:</p>\n<p id=\"so_16985687_16985687_2\">[\u2026]</p>\n<p id=\"so_16985687_16985687_3\">\u2014 Otherwise, if T is an aggregate, aggregate initialization is performed (8.5.1).</p>\n</blockquote>\n<p>I thinks it means that the exact same rules as with aggregate initialization, including brace elision, apply, meaning GCC is correct to accept.</p>\n<p>I admit, the wording is not particularly clear. So, which compiler is right in its treatment of the third snippet? Does the brace elision happen in list-initialization, or it doesn't?</p>\n", "AcceptedAnswerId": "16993028", "Title": "Brace elision in std::array initialization", "CreationDate": "2013-06-07T13:45:52.777", "Id": "16985687", "CommentCount": "11", "FavoriteCount": "6", "PostTypeId": "1", "LastEditDate": "2013-06-07T15:08:00.880", "LastEditorUserId": "1774667", "LastActivityDate": "2015-03-05T23:54:39.743", "Score": "40", "OwnerUserId": "784668", "Tags": "<c++><c++11><language-lawyer><brace-initialization><aggregate-initialization>", "AnswerCount": "2"}});