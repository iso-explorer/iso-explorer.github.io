post_cb({"38184127": {"CommentCount": "9", "ViewCount": "118", "PostTypeId": "1", "LastEditorUserId": "1181174", "CreationDate": "2016-07-04T11:54:01.543", "LastActivityDate": "2016-07-04T12:18:35.077", "Title": "C++ Static storage duration objects initialization before main()", "FavoriteCount": "2", "LastEditDate": "2016-07-04T12:10:37.153", "Id": "38184127", "Score": "3", "Body": "<p>Suppose we have some global object subjected to dynamic initialization:</p>\n<pre><code>class A {\n    A() { std::cout &lt;&lt; \"constructor\\n\"; }\n};\nA global_a; // Here it is\n\n// Other translation unit\nint main()\n{\n    return 0;\n}\n</code></pre>\n<blockquote>\n  C++14 \u00a73.6.2 clause 4\n  \n  <p id=\"so_38184127_38184127_0\">It is implementation-defined whether the dynamic initialization of a non-local variable with static storage duration is done before the first statement of main. If the initialization is deferred to some point in time after the first statement of main, it shall occur before the first odr-use (3.2) of any function or variable defined in the same translation unit as the variable to be initialized</p></blockquote>\n<p>This means that an implementation is <em>not required</em> to initialize our object before main() even though all compilers I know do that. This is unfortunate since sometimes it is very convenient to have such guarantee, e.g. for independent self-registering factories residing in a separate file, etc.</p>\n<p>So I came up with the following: what if we define some inline function:</p>\n<pre><code>inline void f(){}\n</code></pre>\n<p>in every translation unit (supposedly using a common header).\nThen in the beggining of main() we odr-use it in some way:</p>\n<pre><code>int main()\n{\n    f();\n    //...\n}\n</code></pre>\n<p>Will this guarantee that all the translation units which provide a definition for f() will have their global objects initialized at this point?</p>\n", "Tags": "<c++><static><initialization><global><main>", "OwnerUserId": "1181174", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_38184127_38184127_0": {"section_id": 7153, "quality": 0.9714285714285714, "length": 34}}, "n3337": {"so_38184127_38184127_0": {"section_id": 6897, "quality": 0.9714285714285714, "length": 34}}, "n4659": {"so_38184127_38184127_0": {"section_id": 8657, "quality": 0.6571428571428571, "length": 23}}}, "38184607": {"ParentId": "38184127", "CommentCount": "2", "CreationDate": "2016-07-04T12:18:35.077", "OwnerUserId": "560648", "PostTypeId": "2", "Id": "38184607", "Score": "1", "Body": "<p>Technically? <strong>Yes</strong>, per the quote you provided and the definition of <em>odr-use</em>.</p>\n<p>In practice I'm not sure I'd rely on it. I can well imagine compilers optimising <code>f()</code> away and having some bug that then ruins what you're trying to rely on. Though I have no data to support this; it just seems like a prime candidate for non-compliance, based on experience.</p>\n<p>If you want to really, really ensure that something happens when your program starts up, on balance it might be better to invoke some \"initialisation\" function on <code>global_a</code> at the top of <code>main</code>. I realise that's an anti-pattern.</p>\n", "LastActivityDate": "2016-07-04T12:18:35.077"}});