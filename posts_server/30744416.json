post_cb({"bq_ids": {"n4140": {"so_30744416_30744619_1": {"length": 6, "quality": 1.0, "section_id": 438}}, "n3337": {"so_30744416_30744619_1": {"length": 6, "quality": 1.0, "section_id": 429}}, "n4659": {"so_30744416_30744619_1": {"length": 6, "quality": 1.0, "section_id": 458}}}, "30744619": {"Id": "30744619", "PostTypeId": "2", "Body": "<p>In order to have correctly called <code>Abstract</code>'s copy constructor, you need to specify that in the initializer list of <code>Child</code>'s copy constructor.</p>\n<pre><code>Child( const Child&amp; other ): Abstract(other), Parent(other) {};\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/5e3a961be8fd4d2c\" rel=\"nofollow\">DEMO</a></p>\n<p>Here is the relevant quote from the standard, which states that the constructor of a virtual base class is called only in the most derived class. If it is missing, the default constructor is called instead (--if it exists).</p>\n<blockquote>\n<p id=\"so_30744416_30744619_0\">\u00a712.6.2, (13.1):</p>\n<p id=\"so_30744416_30744619_1\">In a non-delegating constructor, initialization proceeds in the following order:</p>\n<ul>\n<li>First, and only for the constructor of the most derived class (1.8),\n  virtual base classes are initialized in the order they appear on a\n  depth-first left-to-right traversal of the directed acyclic graph of\n  base classes, where \u201cleft-to-right\u201d is the order of appearance of the\n  base classes in the derived class base-specifier-list.</li>\n</ul>\n</blockquote>\n<p>In particular, this is why you notice <code>Abstract</code>'s default constructor being called.</p>\n<p>In order to avoid this pitfall, however, you can drop all user-defined copy constructors and rely on the copy constructor which is implicitly defined (which is always a good idea). <a href=\"http://coliru.stacked-crooked.com/a/cf5e0a7f82bb88ad\" rel=\"nofollow\">DEMO 2</a></p>\n", "LastEditorUserId": "2412846", "LastActivityDate": "2015-06-09T23:45:57.963", "Score": "1", "CreationDate": "2015-06-09T23:30:10.573", "ParentId": "30744416", "CommentCount": "0", "LastEditDate": "2015-06-09T23:45:57.963", "OwnerUserId": "2412846"}, "30744596": {"Id": "30744596", "PostTypeId": "2", "Body": "<p>Virtual base classes can only be initialized by the most derived class. Calls to a constructor of a virtual base from a non most-derived class are ignored and replaced with default constructor calls. This is to ensure that the virtual base subobject is initialized only once:</p>\n<p>The correct code should place the constructor call in the most derived class' <em>ctor-initializer</em>:</p>\n<pre><code>Child(Child const&amp; other)\n    : Abstract(other) // indirect virtual bases are\n                      // initialized first\n    , Parent(other) // followed by direct bases\n{ }\n</code></pre>\n", "LastActivityDate": "2015-06-09T23:28:18.230", "Score": "5", "CreationDate": "2015-06-09T23:28:18.230", "ParentId": "30744416", "CommentCount": "0", "OwnerUserId": "701092"}, "30744416": {"ViewCount": "321", "Body": "<p>I have three classes as you can see in the code below. Notice how I have written the copy constructors.</p>\n<pre><code>#include &lt;iostream&gt;\n\nclass Abstract\n{\npublic:\n    Abstract(){};\n    Abstract( const Abstract&amp; other ): mA(other.mA){};\n    virtual ~Abstract(){};\n\n    void setA(double inA){mA = inA;};\n    double getA(){return mA;};\n\n    virtual void isAbstract() = 0;\nprotected:\n    double mA;\n};\n\nclass Parent : public virtual Abstract\n{\npublic:\n    Parent(){};\n    Parent( const Parent&amp; other ): Abstract(other){};\n    virtual ~Parent(){};\n\n};\n\n\nclass Child : public virtual Parent\n{\npublic:\n    Child(){};\n    Child( const Child&amp; other ): Parent(other){};\n    virtual ~Child(){};\n\n    void isAbstract(){};\n};\n\n\nint main()\n{\n    Child child1;\n    child1.setA(5);\n\n    Child childCopy(child1);\n    std::cout &lt;&lt; childCopy.getA() &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>\n<p>Now why <code>Abstract()</code> gets called instead of the copy constructor <code>Abstract( const Abstract&amp; other )</code> when <code>childCopy</code> is being constructed?</p>\n<p>Shouldn't <code>Child(other)</code> call <code>Parent(other)</code>? And shouldn't <code>Parent(other)</code> in turn call <code>Abstract(other)</code>?</p>\n", "AcceptedAnswerId": "30744596", "Title": "C++ virtual base classes: parent's copy constructor doesn't get called", "CreationDate": "2015-06-09T23:11:58.503", "Id": "30744416", "CommentCount": "7", "LastEditDate": "2015-06-09T23:22:28.203", "PostTypeId": "1", "LastEditorUserId": "97248", "LastActivityDate": "2015-06-09T23:45:57.963", "Score": "1", "OwnerUserId": "2294360", "Tags": "<c++><class><copy-constructor>", "AnswerCount": "2"}});