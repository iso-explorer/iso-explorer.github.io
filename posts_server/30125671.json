post_cb({"30125720": {"ParentId": "30125671", "CommentCount": "0", "Body": "<p>It means that this is invalid:</p>\n<pre><code>void f(int p)\n{\n   int p = 3;\n}\n</code></pre>\n<p>wheras this</p>\n<pre><code>void f(int p)\n{\n  {\n    int p = 3;\n  }\n}\n</code></pre>\n<p>is allowed.</p>\n", "OwnerUserId": "1705441", "PostTypeId": "2", "Id": "30125720", "Score": "7", "CreationDate": "2015-05-08T13:59:23.890", "LastActivityDate": "2015-05-08T13:59:23.890"}, "bq_ids": {"n4140": {"so_30125671_30126032_1": {"section_id": 7063, "quality": 0.9, "length": 9}, "so_30125671_30126032_0": {"section_id": 7062, "quality": 0.9807692307692307, "length": 51}, "so_30125671_30126032_2": {"section_id": 7064, "quality": 1.0, "length": 28}}, "n3337": {"so_30125671_30126032_1": {"section_id": 6807, "quality": 0.9, "length": 9}, "so_30125671_30126032_0": {"section_id": 6806, "quality": 0.9807692307692307, "length": 51}, "so_30125671_30126032_2": {"section_id": 6808, "quality": 1.0, "length": 28}}, "n4659": {"so_30125671_30126032_1": {"section_id": 8560, "quality": 0.9, "length": 9}, "so_30125671_30126032_0": {"section_id": 8559, "quality": 0.9807692307692307, "length": 51}, "so_30125671_30126032_2": {"section_id": 8561, "quality": 0.9642857142857143, "length": 27}}}, "30126032": {"ParentId": "30125671", "CommentCount": "0", "Body": "<p>This rule is valid not only for function parameters of function definitions but also for iteration and conditional statements and for exceptions handlers</p>\n<p>3.3.3 Block scope</p>\n<blockquote>\n<p id=\"so_30125671_30126032_0\">2 The potential scope of a function parameter name (including one\n  appearing in a lambda-declarator) or of a function-local predefined\n  variable in a function definition (8.4) begins at its point of\n  declaration. If the function has a function-try-block the potential\n  scope of a parameter or of a function-local predefined variable ends\n  at the end of the last associated handler, otherwise it ends at the\n  end of the outermost block of the function definition. A parameter\n  name shall not be redeclared in the outermost block of the function\n  definition nor in the outermost block of any handler associated with a\n  function-try-block.</p>\n<p id=\"so_30125671_30126032_1\">3 The name declared in an exception-declaration is local to the\n  handler and shall not be redeclared in the outermost block of the\n  handler.</p>\n<p id=\"so_30125671_30126032_2\">4 Names declared in the for-init-statement, the for-range-declaration,\n  and in the condition of if, while, for, and switch statements are\n  local to the if, while, for, or switch statement (including the\n  controlled statement), and shall not be redeclared in a subsequent\n  condition of that statement nor in the outermost block (or, for the if\n  statement, any of the outermost blocks) of the controlled statement;\n  see 6.4.</p>\n</blockquote>\n<p>For example this code snippet is invalid</p>\n<pre><code>if( int x = SomeFunction() )\n{\n    int x; // invalid declaration\n    //...\n}\n</code></pre>\n", "OwnerUserId": "2877241", "PostTypeId": "2", "Id": "30126032", "Score": "4", "CreationDate": "2015-05-08T14:16:21.027", "LastActivityDate": "2015-05-08T14:16:21.027"}, "30125710": {"ParentId": "30125671", "CommentCount": "4", "Body": "<p>It means you can't do things like this:</p>\n<pre><code>void foo (int x)\n{\n    int x = 4; //in the outermost scope, invalid\n}\n</code></pre>\n<p>You can, however, do this:</p>\n<pre><code>void foo (int x)\n{\n    { //this introduces a new scope\n        int x = 4; //not in the outermost scope, valid\n    }\n}\n</code></pre>\n", "OwnerUserId": "496161", "PostTypeId": "2", "Id": "30125710", "Score": "16", "CreationDate": "2015-05-08T13:59:04.807", "LastActivityDate": "2015-05-08T13:59:04.807"}, "30125881": {"ParentId": "30125671", "CommentCount": "0", "Body": "<p>Imagine that you have a function 'foo' that takes an integer parameter 'bar'.</p>\n<pre><code>int foo (int bar)\n{\n    int bar = 0; // &lt; illegal, this is the 'outermost' scope\n    if (bar == 10) {\n        int bar = 5; // legal (though unadvisable) this 'shadows' the passed-in 'bar'\n        return bar;\n    }\n    return bar;\n}\n</code></pre>\n<p>The first internal declaration of 'bar' is illegal, since the passed in parameter is also declared in the same context (even though the syntax doesn't necessarily make that clear.)</p>\n<p>Just as it would be incorrect to write:</p>\n<pre><code>int bar;\nchar bar[10];\n</code></pre>\n<p>Since those two variables share the same scope.</p>\n<p>The second declaration of bar (in the function foo above) is legal (though usually a bad idea) since it is declared in the inner scope of the 'if' and therefore fair game.</p>\n<p>Hope that helps.</p>\n", "OwnerUserId": "910271", "PostTypeId": "2", "Id": "30125881", "Score": "2", "CreationDate": "2015-05-08T14:08:31.897", "LastActivityDate": "2015-05-08T14:08:31.897"}, "30125671": {"CommentCount": "0", "AcceptedAnswerId": "30125743", "PostTypeId": "1", "LastEditorUserId": "3049655", "CreationDate": "2015-05-08T13:56:43.133", "LastActivityDate": "2015-05-09T05:23:52.997", "LastEditDate": "2015-05-09T05:23:52.997", "ViewCount": "935", "FavoriteCount": "1", "Title": "What does \"local variables at the outermost scope of the function may not use the same name as any parameter\" mean?", "Id": "30125671", "Score": "13", "Body": "<p>I have been reading the C++ primer 5th edition. In the third paragraph of Function Parameter List of  Chapter 6.1 .\nIt writes \"<strong>Moreover, local variables at the outermost scope of the function may not use the same name as any parameter</strong>\".\nWhat does it mean?</p>\n<p>I am not native English speaker. I don't understand the actual meanings of \"outermost scope\" of the function.</p>\n", "Tags": "<c++><parameters><scope><local-variables>", "OwnerUserId": "4127634", "AnswerCount": "5"}, "30125743": {"ParentId": "30125671", "CommentCount": "3", "Body": "<p>The outermost scope of the function is the block that defines the function's body. You can put other (inner) blocks inside that, and declare variables in those which are local to that block. Variables in inner blocks can have the same name as those in an outer block, or the function parameters; they hide the names in the outer scope. Variables in the outer block can't have the same name as a function parameter.</p>\n<p>To demonstrate:</p>\n<pre><code>void f(int a)           // function has a parameter\n{                       // beginning of function scope\n    int b;              // OK: local variable\n    {                   // beginning of inner block\n        int a;          // OK: hides parameter\n        int b;          // OK: hides outer variable\n    }                   // end of inner block\n    int a;              // Error: can't have same name as parameter\n}\n</code></pre>\n", "OwnerUserId": "204847", "PostTypeId": "2", "Id": "30125743", "Score": "24", "CreationDate": "2015-05-08T14:00:29.917", "LastActivityDate": "2015-05-08T14:00:29.917"}});