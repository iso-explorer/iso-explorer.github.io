post_cb({"20963668": {"ParentId": "20641735", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>I think the problem is, you do not have copy constructor for Point, therefore, in this line,</p>\n<p>explicit ListNode(T v, ListNode* n = nullptr)\n    : val{ v }, next{ n }</p>\n<p>since there's no copy constructor, val{v} will try to initialize by aggregate. </p>\n<p>From 8.5.1,</p>\n<blockquote>\n<p id=\"so_20641735_20963668_0\">An aggregate is an array or a class (Clause 9) with no user-provided\n  constructors. </p>\n<p id=\"so_20641735_20963668_1\">When an aggregate is initialized by an initializer list,\n  as specified in 8.5.4, the elements of the initializer list are taken\n  as initializers for the members of the aggregate, in increasing\n  subscript or member order. Each member is copy-initialized from the\n  corresponding initializer-clause.</p>\n</blockquote>\n<p>For a point type, the aggregate initialization shall be val {v.x, v.y}.</p>\n<p>Or, you can implement a copy constructor for Point class.</p>\n<p>GCC &amp; Clang are correct. VS is wrong and it should reject your code.</p>\n", "OwnerUserId": "534498", "LastEditorUserId": "534498", "LastEditDate": "2014-01-07T04:06:16.337", "Id": "20963668", "Score": "0", "CreationDate": "2014-01-07T03:58:55.760", "LastActivityDate": "2014-01-07T04:06:16.337"}, "20641735": {"CommentCount": "7", "ViewCount": "178", "CreationDate": "2013-12-17T18:17:27.923", "LastActivityDate": "2014-01-07T04:06:16.337", "Title": "C++11 - Wrong constructor called in GCC/Clang (not in VS 2013)", "PostTypeId": "1", "Id": "20641735", "Score": "2", "Body": "<p>I have this code which works fine in VS 2013 but doesn't compile in either GCC 4.8 or clang 3.3!</p>\n<pre><code>    AND_end(c)-&gt;next = new ListNode&lt;Point&gt;{ b-&gt;val };\n</code></pre>\n<p>The error message is the following: \"cannot convert from \"Point\" to \"int\".</p>\n<p>Now, gradually, member val of b is a Point:</p>\n<pre><code>struct Point\n{\nint x;\nint y;\n\ndouble distance(const Point&amp; other) const\n{\n    if (this == &amp;other)\n        return 0.;\n\n    return std::sqrt(std::pow(other.y - y, 2.) + std::pow(other.x - x, 2.));\n}\n\nbool operator==(const Point&amp; other)\n{\n    return x == other.x &amp;&amp; y == other.y;\n}\n\nbool operator!=(const Point&amp; other)\n{\n    return !(*this == other);\n}\n};\n</code></pre>\n<p>b is a Line:</p>\n<pre><code>using Line = ListNode&lt;Point&gt;*;\n</code></pre>\n<p>a ListNode is a typical node for a singly linked list:</p>\n<pre><code>template&lt;typename T&gt;\nstruct ListNode\n{\nT val;              // Value\nListNode* next = nullptr;   // Next node in the list\n\n// Constructor: takes a value of type T and optionally a pointer to the next node\nexplicit ListNode(T v, ListNode* n = nullptr)\n    : val{ v }, next{ n }\n{\n    // Empty body, both member variables are initialized already\n}\n};\n</code></pre>\n<p>So, the line of code that doesn't compile should do the following: create a new ListNode, with T = Point, by supplying to the explicit ListNode constructor its first (and only) argument T v, which is a Point (b-&gt;val is a Point). This argument will be copied into the ListNode member val by copy, using the default copy constructor.\nWhat seems to happen in both GCC and clang is that b-&gt;val is supplied to the Point constructor, hence the error message above (and for the sake of completeness, and additional warning is given: \"missing field 'y' initializer\").\nVC++12 seems to get it all right instead.</p>\n<p>So, what's up? Am I missing anything obvious (maybe, happens from time to time) or is there a nasty problem here?</p>\n", "Tags": "<gcc><c++11><constructor><clang>", "OwnerUserId": "3112339", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_20641735_20963668_0": {"section_id": 3298, "quality": 0.8333333333333334, "length": 5}, "so_20641735_20963668_1": {"section_id": 3299, "quality": 0.9565217391304348, "length": 22}}, "n3337": {"so_20641735_20963668_0": {"section_id": 3168, "quality": 0.8333333333333334, "length": 5}, "so_20641735_20963668_1": {"section_id": 3169, "quality": 0.9565217391304348, "length": 22}}, "n4659": {"so_20641735_20963668_0": {"section_id": 4063, "quality": 0.8333333333333334, "length": 5}, "so_20641735_20963668_1": {"section_id": 4065, "quality": 0.7391304347826086, "length": 17}}}});