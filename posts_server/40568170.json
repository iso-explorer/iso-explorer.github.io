post_cb({"40568170": {"CommentCount": "4", "ViewCount": "60", "CreationDate": "2016-11-12T22:04:58.873", "LastActivityDate": "2016-11-12T23:24:50.280", "Title": "Why const is ignored when deducing type from universal reference?", "AcceptedAnswerId": "40568833", "PostTypeId": "1", "Id": "40568170", "Score": "3", "Body": "<p>Here is the definition of my A class and make function for it:</p>\n<pre><code>template&lt; typename T &gt;\nclass A\n{\npublic:\n    A( T test )\n    : _test( test )\n    {}\n\npublic:\n    const T _test;\n};\n\ntemplate &lt;typename T&gt;\nA&lt;T&gt; make_a (T&amp;&amp; elem) {\n    return A&lt;T&gt;{std::forward&lt;T&gt;(elem)};\n}\n</code></pre>\n<p>When I pass int lvalue to <code>make_a</code> function, I expect the instantiated class to be similar to </p>\n<pre><code>class B\n{\npublic:\n    B( int &amp;test )\n    : _test( test )\n    {}\n\npublic:\n    const int &amp;_test;\n};\n</code></pre>\n<p>But the type of <code>A::_test</code> is deduced to be <code>int&amp;</code> instead of <code>const int&amp;</code>:</p>\n<pre><code>int main(int argc, const char * argv[]) {\n\n    int a = 1;\n    auto aa = make_a(a);\n    aa._test = 2; // compiled OK\n\n    B bb(a);\n    bb._test = 2; // compilation error\n    return 0;\n}\n</code></pre>\n<p>Can anybody explain me what causes such behaviour?</p>\n<p>I'm using XCode 7.0, LLVM 7.0 default compiler.</p>\n<p>Thanks.</p>\n", "Tags": "<c++><templates><perfect-forwarding><type-deduction>", "OwnerUserId": "3943956", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_40568170_40568833_2": {"section_id": 3218, "quality": 0.75, "length": 9}, "so_40568170_40568833_1": {"section_id": 3218, "quality": 0.7777777777777778, "length": 14}}, "n3337": {"so_40568170_40568833_2": {"section_id": 3092, "quality": 0.75, "length": 9}, "so_40568170_40568833_1": {"section_id": 3092, "quality": 0.6666666666666666, "length": 12}}, "n4659": {"so_40568170_40568833_2": {"section_id": 3975, "quality": 0.75, "length": 9}, "so_40568170_40568833_1": {"section_id": 3975, "quality": 0.7777777777777778, "length": 14}}}, "40568833": {"ParentId": "40568170", "CommentCount": "0", "Body": "<p>This behaviour is caused by the language standard.</p>\n<blockquote>\n<p id=\"so_40568170_40568833_0\">N4140 \u00a78.3.2 [dcl.ref]/1</p>\n<p id=\"so_40568170_40568833_1\">Cv-qualified references are ill-formed except when the cv-qualifiers are introduced through the use of a <em>typedef-name</em> (7.1.3, 14.1) or\n  <em>decltype-specifier</em> (7.1.6.2), in which case the cv-qualifiers are ignored. [ Example:</p>\n<pre><code>typedef int&amp; A;\nconst A aref = 3; // ill-formed; lvalue reference to non-const initialized with rvalue\n</code></pre>\n<p id=\"so_40568170_40568833_2\">The type of <code>aref</code> is \u201clvalue reference to <code>int</code>\u201d, not \u201clvalue\n  reference to <code>const int</code>\u201d. \u2014<em>end example</em> ]</p>\n</blockquote>\n", "OwnerUserId": "2456565", "PostTypeId": "2", "Id": "40568833", "Score": "1", "CreationDate": "2016-11-12T23:24:50.280", "LastActivityDate": "2016-11-12T23:24:50.280"}});