post_cb({"bq_ids": {"n4140": {"so_29930982_29931010_4": {"length": 9, "quality": 1.0, "section_id": 5854}, "so_29930982_29931010_2": {"length": 8, "quality": 1.0, "section_id": 5851}}, "n3337": {"so_29930982_29931010_4": {"length": 9, "quality": 1.0, "section_id": 5624}, "so_29930982_29931010_2": {"length": 8, "quality": 1.0, "section_id": 5621}}, "n4659": {"so_29930982_29931010_4": {"length": 9, "quality": 1.0, "section_id": 7333}, "so_29930982_29931010_2": {"length": 8, "quality": 1.0, "section_id": 7330}}}, "29931010": {"Id": "29931010", "PostTypeId": "2", "Body": "<p>According to the standard (<strong>9 Classes [class]</strong>, emphasis mine):</p>\n<blockquote>\n<p id=\"so_29930982_29931010_0\">A <em>standard-layout class</em> is a class that:</p>\n<p id=\"so_29930982_29931010_1\">...</p>\n<p id=\"so_29930982_29931010_2\">\u2014 <strong><em>has the same access control</em></strong> (Clause 11) <strong><em>for all non-static data members</em></strong>,</p>\n<p id=\"so_29930982_29931010_3\">...</p>\n</blockquote>\n<p>and</p>\n<blockquote>\n<p id=\"so_29930982_29931010_4\">A <em>POD struct</em> is a non-union class that is both a trivial class and <strong><em>a standard-layout class</em></strong>, and ...</p>\n</blockquote>\n<p>Your hunch is correct, because <code>B.m1</code> and <code>B.m2</code> are both non-static and have different access control.</p>\n", "LastEditorUserId": "1146608", "LastActivityDate": "2015-04-29T06:01:28.027", "Score": "31", "CreationDate": "2015-04-28T22:23:42.340", "ParentId": "29930982", "CommentCount": "0", "OwnerUserId": "3246555", "LastEditDate": "2015-04-29T06:01:28.027"}, "29930982": {"ViewCount": "802", "Body": "<p>This is about <a href=\"http://en.cppreference.com/w/cpp/types/is_pod\"><code>std::is_pod</code></a>, which detects whether a template is a <em>plain old data type</em> or not.</p>\n<p>See the following code:</p>\n<pre><code>struct A {\npublic:\n    int m1;\n    int m2;\n};\n\nstruct B {\npublic:\n    int m1;\nprivate:\n    int m2;\n};\n\nstruct C {\nprivate:\n    int m1;\n    int m2;\n};\n\nint main()\n{\n    std::cout &lt;&lt; std::boolalpha;\n    std::cout &lt;&lt; std::is_pod&lt;A&gt;::value &lt;&lt; '\\n'; // true\n    std::cout &lt;&lt; std::is_pod&lt;B&gt;::value &lt;&lt; '\\n'; // false\n    std::cout &lt;&lt; std::is_pod&lt;C&gt;::value &lt;&lt; '\\n'; // true\n}\n</code></pre>\n<p>The 3 structs all look like POD to me. But apparently <code>struct B</code> is not.\nI don't understand why. To me, they all have a trivial constructor, move and copy operator. Destructor is certainly trivial too.</p>\n<p>I blame it on using 2 access specifiers, but I can't find information about this.</p>\n", "AcceptedAnswerId": "29931010", "Title": "Why is this not a POD?", "CreationDate": "2015-04-28T22:20:30.627", "Id": "29930982", "CommentCount": "2", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2015-04-29T05:59:19.570", "LastEditorUserId": "1146608", "LastActivityDate": "2015-04-29T06:01:28.027", "Score": "26", "OwnerUserId": "865281", "Tags": "<c++><data-structures>", "AnswerCount": "1"}});