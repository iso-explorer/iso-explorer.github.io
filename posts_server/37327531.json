post_cb({"37328645": {"ParentId": "37327531", "PostTypeId": "2", "CommentCount": "5", "CreationDate": "2016-05-19T16:05:56.810", "Score": "1", "LastEditorUserId": "146041", "LastEditDate": "2016-05-21T19:54:35.567", "Id": "37328645", "OwnerUserId": "146041", "Body": "<p>Not a very nice solution, but we can change <code>order_rec</code> and declare it early.</p>\n<pre><code>struct  book_list_iterator;\nstruct order_rec\n{   \n    int a;\n    vector    &lt;book_list_iterator&gt; bi;\n};\n</code></pre>\n<p>This works because <code>vector</code> explicitly allows incomplete types as the member type.</p>\n<p>(I did consider <code>shared_ptr</code> and <code>unique_ptr</code> instead of <code>vector</code>, but I think this is the easiest way to avoid having to write copy constructor for order_rec)</p>\n<p>To access an individual iterator, we'll need <code>-&gt;bi.at(0)</code>, not just <code>-&gt;bi</code>.</p>\n<p>Finally, <code>book_list_iterator</code> isn't a typedef, but a struct instead</p>\n<pre><code>typedef unordered_map&lt;int, order_rec&gt; placed_orders_t;\ntypedef placed_orders_t::iterator placed_order_iterator;\ntypedef unordered_map&lt;int, placed_order_iterator&gt; book_list_t;\n\nstruct  book_list_iterator : public book_list_t::iterator\n{\n};\n</code></pre>\n", "LastActivityDate": "2016-05-21T19:54:35.567"}, "37327731": {"ParentId": "37327531", "CommentCount": "7", "Body": "<p>I think this is a compiler issue. But generally it should not work, because when you use <code>typedef unordered_map&lt;int, order_rec&gt; placed_orders_t;</code> it requires size of <code>order_rec</code> to be known, so that it can allocate memory accordingly, which in your case is not known, so either use <code>order_rec*</code> in place of <code>order_rec</code> or move the definition of <code>struct order_rec</code> to before you use it.</p>\n", "OwnerUserId": "3857473", "PostTypeId": "2", "Id": "37327731", "Score": "1", "CreationDate": "2016-05-19T15:25:31.147", "LastActivityDate": "2016-05-19T15:25:31.147"}, "37328501": {"ParentId": "37327531", "CommentCount": "7", "Body": "<p>The code you have is undefined behavior. When you write:</p>\n<pre><code>struct order_rec;\ntypedef unordered_map&lt;int, order_rec&gt; placed_orders_t;\ntypedef placed_orders_t::iterator placed_order_iterator;\n</code></pre>\n<p>This requires instantiation of <code>placed_orders_t</code>, which requires instantiation of <code>unordered_map&lt;int, order_rec&gt;</code>. <code>order_rec</code> is incomplete at this point. From [res.on.functions]:</p>\n<blockquote>\n<p id=\"so_37327531_37328501_0\">In particular, the effects are undefined in the following cases: [...] if an incomplete type (3.9) is used as a template argument when instantiating a template component, unless specifically allowed for that component.</p>\n</blockquote>\n<p>Some class templates in the standard library allow for incomplete types (like <code>unique_ptr</code> or <code>vector</code>), but <code>unordered_map</code> isn't one of them, so the effects of that are undefined. Failing to compile is a permissible effect. Note that the same is true of <code>map</code>, even if your code compiles.</p>\n<p>You'll have to have <code>placed_orders_t::mapped_type</code> be a type that can be used in this context. Perhaps <code>std::unique_ptr&lt;order_rec&gt;</code>?</p>\n", "OwnerUserId": "2069064", "PostTypeId": "2", "Id": "37328501", "Score": "3", "CreationDate": "2016-05-19T15:58:36.967", "LastActivityDate": "2016-05-19T15:58:36.967"}, "bq_ids": {"n4140": {"so_37327531_37328501_0": {"section_id": 6324, "quality": 1.0, "length": 16}}, "n3337": {"so_37327531_37328501_0": {"section_id": 6081, "quality": 1.0, "length": 16}}, "n4659": {"so_37327531_37328501_0": {"section_id": 7834, "quality": 1.0, "length": 16}}}, "37327531": {"CommentCount": "8", "ViewCount": "2000", "PostTypeId": "1", "LastEditorUserId": "468725", "CreationDate": "2016-05-19T15:18:04.087", "LastActivityDate": "2016-05-21T19:54:35.567", "Title": "Circular type dependency in c++ with container iterators (GCC fails, while MSVC ok)", "AcceptedAnswerId": "37328645", "LastEditDate": "2016-05-19T15:54:57.927", "Id": "37327531", "Score": "3", "Body": "<p>Original code that I wrote worked fine out of the box with microsoft's compiler, but doesn't compile with gcc (4.7.4):\nHere's simplified code:</p>\n<pre><code>// test.cpp\n#include &lt;unordered_map&gt;\nusing namespace std;\n\nstruct order_rec;\ntypedef unordered_map&lt;int, order_rec&gt; placed_orders_t;\ntypedef placed_orders_t::iterator placed_order_iterator;\ntypedef unordered_map&lt;int, placed_order_iterator&gt; book_list_t;\ntypedef book_list_t::iterator book_list_iterator;\nstruct order_rec\n{\n    int a;\n    book_list_iterator bi;\n};\n\nint main()\n{\n    book_list_t test1;\n    order_rec test2;\n}\n</code></pre>\n<p>g++ doesn't like this line: <code>typedef placed_orders_t::iterator placed_order_iterator;</code>, it errors out because that by that line <code>struct order_rec</code> isn't fully declared.</p>\n<p>As you can see I have a map <code>placed_orders_t</code> of int =&gt; order_rec, then I have another map <code>book_list_t</code> that maps int to iterators into <code>placed_orders_t</code> map. Then, the order_rec itself stores an interator into <code>book_list_t</code> map.</p>\n<p>Note, that I believe that it's a bug in gcc's implementation of unordered_map (or perhaps compiler itself): if I typedef <code>placed_orders_t</code> as an std::map then everything compiles fine; however, I do need to use unordered maps there.</p>\n<p>What could be used as a workaround?</p>\n<p>Here's relevant part from g++ compilation</p>\n<pre><code>g++-4.7 -O3 -DNDEBUG -std=c++11 -c test.cpp\n...\n/usr/include/c++/4.7/bits/unordered_map.h:264:11:   required from \u2018class std::unordered_map&lt;int, order_rec&gt;\u2019\ntest.cpp:7:24:   required from here\n/usr/include/c++/4.7/bits/stl_pair.h:94:11: error: \u2018std::pair&lt;_T1, _T2&gt;::second\u2019 has incomplete type\ntest.cpp:5:8: error: forward declaration of \u2018struct order_rec\u2019\n</code></pre>\n", "Tags": "<c++><g++><unordered-map>", "OwnerUserId": "468725", "AnswerCount": "3"}});