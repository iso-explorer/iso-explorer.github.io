post_cb({"bq_ids": {"n4140": {"so_30139580_30141622_1": {"length": 9, "quality": 0.9, "section_id": 3246}, "so_30139580_30141622_3": {"length": 14, "quality": 0.8235294117647058, "section_id": 3225}, "so_30139580_30141622_0": {"length": 10, "quality": 0.9090909090909091, "section_id": 56}}, "n3337": {"so_30139580_30141622_1": {"length": 9, "quality": 0.9, "section_id": 3119}, "so_30139580_30141622_3": {"length": 14, "quality": 0.8235294117647058, "section_id": 3098}, "so_30139580_30141622_0": {"length": 10, "quality": 0.9090909090909091, "section_id": 51}}, "n4659": {"so_30139580_30141622_1": {"length": 9, "quality": 0.9, "section_id": 4004}, "so_30139580_30141622_3": {"length": 15, "quality": 0.8823529411764706, "section_id": 3982}, "so_30139580_30141622_0": {"length": 10, "quality": 0.9090909090909091, "section_id": 58}}}, "30139580": {"ViewCount": "386", "Body": "<p>The code below works fine but I can't figure out based what points of the C++ standard it should be valid.</p>\n<pre><code>template&lt; class C, class signature &gt;\nvoid f(signature C::*ptr) { }\n</code></pre>\n<p>When <code>C = A</code> and <code>signature = void(float, int)</code>, the function f will be</p>\n<pre><code>void f(void(A::*ptr)(float, int))\n</code></pre>\n<p>Based on which parts of the standard, does the template apply to the latter?</p>\n", "AcceptedAnswerId": "30141622", "Title": "C++ Templates with pointer to member function by signature and type", "CreationDate": "2015-05-09T11:53:58.437", "Id": "30139580", "CommentCount": "1", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2015-05-09T16:41:07.510", "LastEditorUserId": "1978011", "LastActivityDate": "2015-05-09T16:41:07.510", "Score": "5", "OwnerUserId": "4682108", "Tags": "<c++><templates><pointers><function-pointers><language-lawyer>", "AnswerCount": "1"}, "30141622": {"Id": "30141622", "PostTypeId": "2", "Body": "<p>Best go through this one by one. To avoid ambiguities, I'll use different template argument names in the example</p>\n<pre><code>template&lt;class C, class signature&gt; void f(signature C::*ptr) {}\n</code></pre>\n<p>All quotes refer to the latest working draft of the C++14 standard.</p>\n<p>First we need to understand, how the template parameters are treated.</p>\n<blockquote>\n<p id=\"so_30139580_30141622_0\"><strong>[temp.param]/3</strong> A type-parameter whose identifier does not follow an ellipsis defines\n  its identifier to be a typedef-name</p>\n</blockquote>\n<p>So your template definition has two parameters <code>T</code> and the signature. When using <code>signature</code> in the template body, it is therefore equivalent to the typedef</p>\n<pre><code>typedef void signature(float, int);\n</code></pre>\n<p>This typedef may be used to declare a function pointer parameter, as in your example:</p>\n<blockquote>\n<p id=\"so_30139580_30141622_1\"><strong>[dcl.fct]/12</strong> A typedef of function type may be used to declare a function but shall\n  not be used to define a function</p>\n</blockquote>\n<p>In the parameters of the template function, you write <code>signature T::*ptr</code>, let's see what the standard says about member pointers:</p>\n<blockquote>\n<p id=\"so_30139580_30141622_2\"><strong>[dcl.mptr]/1</strong> In a declaration <code>T D</code> where <code>D</code> has the form</p>\n<pre><code>nested-name-specifier * attribute-specifier-seq_opt cv-qualifier-seq_opt D1\n</code></pre>\n<p id=\"so_30139580_30141622_3\">and the <em>nested-name-specifier</em> denotes a class, and the type of the\n  identifier in the declaration <code>T D1</code> is <em>derived-declarator-type-list\n  T</em>, then the type of the identifier of <code>D</code> is\n  <em>derived-declarator-type-list cv-qualifier-seq pointer to member of class nested-name-specifier of type T</em>.</p>\n</blockquote>\n<p>In our example, <code>T</code> is <code>signature</code>, the function typedef, and <code>D</code> is <code>C::*ptr</code>.</p>\n<p>This explains what types the compiler will deduce for the example</p>\n<pre><code>void f(void(A::*ptr)(float, int));\n</code></pre>\n", "LastActivityDate": "2015-05-09T15:15:19.180", "CommentCount": "0", "CreationDate": "2015-05-09T15:15:19.180", "ParentId": "30139580", "Score": "4", "OwnerUserId": "1978011"}});