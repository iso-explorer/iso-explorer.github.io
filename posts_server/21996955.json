post_cb({"21997128": {"Id": "21997128", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_21996955_21997128_0\">Given this code sample, my question is: Is it possible that <code>(beg != eof)</code> is evaluated <code>true</code> even if <code>file</code> is empty?</p>\n</blockquote>\n<p>No. The standard says (24.6.1/1-2) says,</p>\n<blockquote>\n<p id=\"so_21996955_21997128_1\">After [<code>istream_iterator</code>]  is constructed, and every time <code>++</code> is used, the iterator reads and stores a value of <code>T</code>. If the iterator fails to read and store a value of <code>T</code> ... the iterator becomes equal to the <em>end-of-stream</em> iterator value. ... Two end-of-stream iterators are always equal. An end-of-stream iterator is not equal to a non-end-of-stream\n  iterator. Two non-end-of-stream iterators are equal when they are constructed from the same stream.</p>\n</blockquote>\n<p>In other words, this is not as lazy as you think:</p>\n<pre><code>istream_iterator&lt;int&gt; beg(file)\n</code></pre>\n<p>It'll read the first <code>int</code>. If the file is empty, it fails and becomes the end-of-stream iterator right away.</p>\n", "LastActivityDate": "2014-02-24T19:29:29.893", "Score": "0", "CreationDate": "2014-02-24T19:29:29.893", "ParentId": "21996955", "CommentCount": "0", "OwnerUserId": "481267"}, "bq_ids": {"n4140": {"so_21996955_21997128_1": {"length": 26, "quality": 0.6666666666666666, "section_id": 5255}}, "n3337": {"so_21996955_21997128_1": {"length": 26, "quality": 0.6666666666666666, "section_id": 5052}}, "n4659": {"so_21996955_21997128_1": {"length": 26, "quality": 0.6666666666666666, "section_id": 6678}}}, "21996955": {"ViewCount": "103", "Body": "<p>Considering <code>istream_iterator</code>'s <strong>lazy evaluation</strong> I was wondering if I can rely on the initialized, but never dereferenced or incremented, iterator for a condition.</p>\n<p>As an example:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;fstream&gt;\n#include &lt;iterator&gt;\n\nusing namespace std;\n\nint main(void)\n{\n    ifstream file(\"some_directory\");\n    istream_iterator&lt;int&gt; beg(file), eof;\n\n    if (beg != eof) {\n\n        //do something\n    }\n    else {\n\n        cerr &lt;&lt; \"No Input!\" &lt;&lt; endl;\n    }\n}\n</code></pre>\n<p>Given this code sample, my question is:\nIs it possible that <code>(beg != eof)</code> is evaluated <code>true</code> even if <code>file</code> is empty?</p>\n", "AcceptedAnswerId": "21997128", "Title": "istream_iterator and lazy evaluation", "CreationDate": "2014-02-24T19:21:45.407", "Id": "21996955", "CommentCount": "1", "PostTypeId": "1", "OwnerDisplayName": "user2952086", "LastActivityDate": "2014-02-24T19:29:29.893", "Score": "0", "Tags": "<c++><lazy-evaluation><istream-iterator>", "AnswerCount": "1"}});