post_cb({"36304511": {"CommentCount": "2", "ViewCount": "178", "PostTypeId": "1", "ClosedDate": "2016-03-30T09:23:13.827", "LastEditorUserId": "2877241", "CreationDate": "2016-03-30T09:18:16.057", "LastActivityDate": "2016-03-30T09:58:47.060", "Title": "Why am I getting garbage value for the C program?", "AcceptedAnswerId": "36304579", "LastEditDate": "2016-03-30T09:31:28.223", "Id": "36304511", "Score": "-2", "Body": "<p>Why do I get garbage value if I compile the following C code with GCC/Clang?\nNote, if I just print the value of x in inner scope I get expected result.</p>\n<pre><code>#include&lt;stdio.h&gt;\nint main()\n{\n    int x = 5;\n    {\n        int x = x;\n        printf(\"%d\", x);\n    }\n    return 0;\n}\n</code></pre>\n", "Tags": "<c++><c><scope><initialization><declaration>", "OwnerUserId": "997704", "AnswerCount": "2"}, "36304579": {"ParentId": "36304511", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2016-03-30T09:21:09.650", "Score": "4", "LastEditorUserId": "2877241", "LastEditDate": "2016-03-30T09:58:47.060", "Id": "36304579", "OwnerUserId": "2877241", "Body": "<p>In this declaration</p>\n<pre><code>int x = x;\n</code></pre>\n<p>the point of declaration of the identifier <code>x</code> is after the complete definition of the declarator that is <code>x</code> is already visible before the assignment sign <code>=</code> and hides the variable with the same name declared in the outer block scope..</p>\n<p>And you have that <code>x</code> that is not initialized is assigned to itself. As result it has an indeterminate value.</p>\n<p>You can imagine it the following way</p>\n<pre><code>int x;\nx = x;\n</code></pre>\n<p>Exactly the same example exists in the C++ Standard (3.3.2 Point of declaration)</p>\n<blockquote>\n<p id=\"so_36304511_36304579_0\">1 The point of declaration for a name is immediately after its\n  complete declarator (Clause 8) and before its initializer (if any),\n  except as noted below. [ Example:</p>\n</blockquote>\n<pre><code>int x = 12;\n{ int x = x; }\n</code></pre>\n<blockquote>\n<p id=\"so_36304511_36304579_1\">Here the second x is initialized with its own (indeterminate) value.\n  \u2014end example ]</p>\n</blockquote>\n<p>In the C Standard there is written (6.2.1 Scopes of identifiers)</p>\n<blockquote>\n<p id=\"so_36304511_36304579_2\">7 Structure, union, and enumeration tags have scope that begins just\n  after the appearance of the tag in a type specifier that declares the\n  tag. Each enumeration constant has scope that begins just after the\n  appearance of its defining enumerator in an enumerator list. <strong>Any\n  other identifier has scope that begins just after the completion of\n  its declarator.</strong></p>\n</blockquote>\n<p>Pay attention to the definition of enumerators. The rule for enumerators is different.</p>\n<p>This program is well-formed and the enumerator <code>x</code> will be initialized by the variable <code>x</code> declared in the outer scope (while the enumerator <code>y</code> will be initialized by the preceding enumerator <code>x</code>).</p>\n<pre><code>#include &lt;iostream&gt;\n\nint main()\n{\n    const int x = 10;\n    {\n        enum E { x = x + 1, y = x };\n        std::cout &lt;&lt; \"E::x = \" &lt;&lt; x &lt;&lt; \", E::y = \" &lt;&lt; y &lt;&lt; std::endl;\n    }\n    std::cout &lt;&lt; \"x = \" &lt;&lt; x &lt;&lt; std::endl;\n}    \n</code></pre>\n<p>The program output is</p>\n<pre><code>E::x = 11, E::y = 11\nx = 10\n</code></pre>\n", "LastActivityDate": "2016-03-30T09:58:47.060"}, "bq_ids": {"n4140": {"so_36304511_36304579_1": {"section_id": 7049, "quality": 0.7777777777777778, "length": 7}, "so_36304511_36304579_0": {"section_id": 7049, "quality": 0.8235294117647058, "length": 14}}, "n3337": {"so_36304511_36304579_1": {"section_id": 6794, "quality": 0.7777777777777778, "length": 7}, "so_36304511_36304579_0": {"section_id": 6794, "quality": 0.8235294117647058, "length": 14}}, "n4659": {"so_36304511_36304579_1": {"section_id": 8546, "quality": 0.7777777777777778, "length": 7}, "so_36304511_36304579_0": {"section_id": 8546, "quality": 0.8235294117647058, "length": 14}}}, "36304566": {"ParentId": "36304511", "CommentCount": "0", "Body": "<p>The declaration <code>int x = 5;</code> is out of the scope of your second block. This means that variable <code>x</code> in the following piece of code</p>\n<pre><code>{\n    int x = x;\n    printf(\"%d\", x);\n}\n</code></pre>\n<p>is different from the outside variable <code>x</code>, declared in main. So when you try to access its value in the assignment, it gives a garbage value as it did not exist in this scope before and therefore <strong><em>it is not initialized</em></strong>.</p>\n", "OwnerUserId": "5649326", "PostTypeId": "2", "Id": "36304566", "Score": "0", "CreationDate": "2016-03-30T09:20:29.620", "LastActivityDate": "2016-03-30T09:20:29.620"}});