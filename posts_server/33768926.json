post_cb({"bq_ids": {"n4140": {"so_33768926_33768940_1": {"length": 19, "quality": 0.95, "section_id": 6064}}, "n3337": {"so_33768926_33768940_1": {"length": 19, "quality": 0.95, "section_id": 5832}}, "n4659": {"so_33768926_33768940_1": {"length": 18, "quality": 0.9, "section_id": 7560}}}, "33768995": {"Id": "33768995", "PostTypeId": "2", "Body": "<p><code>*ptr</code> is an <em>expression</em>. This expression has a value, and that value has a type. If <code>ptr</code> is dereferenceable, then the value of the evaluated expression is the object that <code>ptr</code> points to, and its type is <code>MyObj</code>, and its value category is \"lvalue\". (This means, for example, that this value can bind to an lvalue reference, and that you can take its address.) If on the other hand <code>ptr</code> is not dereferenceable, then evaluating the expression results in undefined behaviour.</p>\n<p>The assignment at the end of your code is simply an assignment to the object that is the value of the dereferencing expression.</p>\n<p>Note that an expression can never <em>be</em> a reference, since the type of a value is always an object type, and never a reference type. Reference types are useful to <em>bind</em> to values, but they are not themselves values. The value of evaluating a reference is the object that's being referred to.</p>\n", "LastActivityDate": "2015-11-17T23:22:57.680", "CommentCount": "0", "CreationDate": "2015-11-17T23:22:57.680", "ParentId": "33768926", "Score": "1", "OwnerUserId": "596781"}, "33768926": {"ViewCount": "328", "Body": "<p>Say I have <code>MyObj* ptr;</code>, and is <code>*ptr</code> a reference to some <code>MyObj</code> object, or is itself the object?</p>\n<p>If <code>*ptr</code> is the object itself, why is it legal to do the following then?</p>\n<pre><code>MyObj* someFunc(){\n  MyObj* p;\n  ...\n  return p;\n}\n\nMyObj someOtherMyObjInstance;\n*someFunc() = someOtherMyObjInstance. \n</code></pre>\n", "Title": "Does dereference return the object itself or the reference to the object?", "CreationDate": "2015-11-17T23:15:50.043", "LastActivityDate": "2015-11-17T23:30:27.577", "CommentCount": "0", "PostTypeId": "1", "Id": "33768926", "Score": "-2", "OwnerUserId": "1229490", "Tags": "<c++><pointers><reference><lvalue>", "AnswerCount": "2"}, "33768940": {"Id": "33768940", "PostTypeId": "2", "Body": "<p>If <code>ptr</code> points to a valid object, then the evaluation of the expression <code>*ptr</code> results in an lvalue reference to the object.</p>\n<p>From the C++11 standard (emphasis mine):</p>\n<blockquote>\n<p id=\"so_33768926_33768940_0\"><strong>5.3.1 Unary operators</strong> [expr.unary.op]</p>\n<p id=\"so_33768926_33768940_1\">1 The unary * operator performs <em>indirection:</em> the expression to which it is applied shall be a pointer to an object type, or a pointer to a function type and <strong>the result is an lvalue referring to the object</strong> or function to which the expression points.</p>\n</blockquote>\n", "LastEditorUserId": "434551", "LastActivityDate": "2015-11-17T23:30:27.577", "Score": "1", "CreationDate": "2015-11-17T23:17:20.807", "ParentId": "33768926", "CommentCount": "0", "OwnerUserId": "434551", "LastEditDate": "2015-11-17T23:30:27.577"}});