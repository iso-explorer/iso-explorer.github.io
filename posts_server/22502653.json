post_cb({"bq_ids": {"n4140": {"so_22502653_22502775_1": {"length": 24, "quality": 0.96, "section_id": 7008}}, "n3337": {"so_22502653_22502775_1": {"length": 24, "quality": 0.96, "section_id": 6754}}, "n4659": {"so_22502653_22502775_1": {"length": 23, "quality": 0.92, "section_id": 8505}}}, "22502653": {"ViewCount": "147", "Body": "<p>In C++ it is valid to reduce the cv-qualifier of a return type in a derived class:</p>\n<pre><code>class Base {\n    virtual const Base* f();\n};\n\nclass Derived : public Base {\n    Base* f() override;\n};\n</code></pre>\n<p>Is this valid with pointers to primitive types?</p>\n<pre><code>class Base {\n    virtual const int* f();\n};\n\nclass Derived : public Base {\n    int* f() override;\n};\n</code></pre>\n", "AcceptedAnswerId": "22502775", "Title": "Do covariant cv-qualifiers apply to primitive types in C++?", "CreationDate": "2014-03-19T10:19:54.927", "Id": "22502653", "CommentCount": "0", "LastEditDate": "2014-03-19T10:25:40.393", "PostTypeId": "1", "LastEditorUserId": "2012682", "LastActivityDate": "2014-03-19T11:27:18.723", "Score": "7", "OwnerUserId": "2012682", "Tags": "<c++><const><covariance>", "AnswerCount": "1"}, "22502775": {"Id": "22502775", "PostTypeId": "2", "Body": "<p>Do covariant cv-qualifiers apply to primitive types in C++?</p>\n<p><strong>NO</strong></p>\n<blockquote>\n<p id=\"so_22502653_22502775_0\"><strong>\u00a7 10.3.7 Virtual functions</strong> </p>\n<p id=\"so_22502653_22502775_1\">The return type of an overriding function shall be either identical to the return type of the overridden function or covariant with the classes of the functions. If a function <code>D::f</code> overrides a function <code>B::f</code>, <strong>the return types of the functions are covariant if they satisfy the following criteria:</strong></p>\n<ul>\n<li>both are pointers to classes, both are lvalue references to\n  classes, or both are rvalue references to classes</li>\n<li>the class in the return type of <code>B::f</code> is the same class as the class\n  in the return type of <code>D::f</code>, or is an unambiguous and accessible\n  direct or indirect base class of the class in the return type of <code>D::f</code></li>\n<li>both pointers or references have the same cv-qualification and the\n  class type in the return type of <code>D::f</code></li>\n</ul>\n</blockquote>\n", "LastEditorUserId": "701092", "LastActivityDate": "2014-03-19T11:27:18.723", "Score": "6", "CreationDate": "2014-03-19T10:24:17.343", "ParentId": "22502653", "CommentCount": "1", "OwnerUserId": "951757", "LastEditDate": "2014-03-19T11:27:18.723"}});