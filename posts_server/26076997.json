post_cb({"26077075": {"Id": "26077075", "PostTypeId": "2", "Body": "<p>Both cat instances have to be initialized, at the point when they start existing.</p>\n<p>To avoid this you can defer each instance creation to when you need it.</p>\n<p>A simple and safe way to do that is to use a <code>std::vector</code> to hold the instances.</p>\n<pre><code>class cat\n{\n    private:\n        int height;\n    public:\n        cat (int inputHeight);\n};\n\ncat::cat (int inputHeight)\n{\n    height = inputHeight;\n}\n\n#include &lt;vector&gt;\n#include &lt;utility&gt;\n\nclass twoCats\n{\n    private:\n        std::vector&lt;cat&gt; cats_;\n\n    public:\n        twoCats (cat theFirstCat)\n        { cats_.push_back( std::move( theFirstCat ) ); }\n\n        void addSecondCat (cat theSecondCat)\n        { cats_.push_back( std::move( theSecondCat ) ); }\n};\n\nint main() {return 0;}\n</code></pre>\n<hr>\n<p>Alternatively, you might use <code>boost::optional</code>.</p>\n<p>Or allocate the instances dynamically (use a smart pointer such as <code>unique_ptr</code> to manage lifetime then).</p>\n<p>Or, let cats be default-constructible.</p>\n<hr>\n<p>As noted by \"thang\" in <a href=\"https://stackoverflow.com/questions/26076997/in-constructor-candidate-expects-1-argument-0-provided/26077075#comment40858860_26077075\">a comment</a>, the original design does not guarantee that a <code>twoCats</code> has two cats. It can have just one cat, or three or more cats. So it would be a good idea to <strong>change the design</strong>.</p>\n<p>For example, have a constructor that takes two cat arguments, or cat heights.</p>\n<p>Or for another example, changing the name of <code>twoCats</code>.</p>\n</hr></hr>", "LastEditorUserId": "-1", "LastActivityDate": "2014-09-27T17:20:22.320", "Score": "1", "CreationDate": "2014-09-27T17:03:07.427", "ParentId": "26076997", "CommentCount": "6", "OwnerUserId": "464581", "LastEditDate": "2017-05-23T12:32:59.860"}, "26076997": {"ViewCount": "13707", "Body": "<p>This is the code:</p>\n<pre><code>class cat\n{\n    private:\n        int height;\n    public:\n        cat (int inputHeight);\n};\n\ncat::cat (int inputHeight)\n{\n    height = inputHeight;\n}\n\nclass twoCats\n{\n    private:\n        cat firstCat;\n        cat secondCat;\n    public:\n        twoCats (cat theFirstCat);\n        void addSecondCat (cat theSecondCat);\n};\n\ntwoCats::twoCats (cat theFirstCat)\n{\n    firstCat = theFirstCat;\n}\n\nvoid twoCats::addSecondCat (cat theSecondCat)\n{\n    secondCat = theSecondCat;\n}\n\nint main() {return 0;}\n</code></pre>\n<p>And these are the errors:</p>\n<pre><code>main.cpp: In constructor \u2018twoCats::twoCats(cat)\u2019:\nmain.cpp:24:34: error: no matching function for call to \u2018cat::cat()\u2019\nmain.cpp:24:34: note: candidates are:\nmain.cpp:9:1: note: cat::cat(int)\nmain.cpp:9:1: note:   candidate expects 1 argument, 0 provided\nmain.cpp:1:7: note: cat::cat(const cat&amp;)\nmain.cpp:1:7: note:   candidate expects 1 argument, 0 provided\nmain.cpp:24:34: error: no matching function for call to \u2018cat::cat()\u2019\nmain.cpp:24:34: note: candidates are:\nmain.cpp:9:1: note: cat::cat(int)\nmain.cpp:9:1: note:   candidate expects 1 argument, 0 provided\nmain.cpp:1:7: note: cat::cat(const cat&amp;)\nmain.cpp:1:7: note:   candidate expects 1 argument, 0 provided\n</code></pre>\n<p>I don't understand the following:</p>\n<ol>\n<li>Why does the constructor for <code>twoCats</code> try to call the default constructor for <code>cat</code>? Surely it does not need to construct an instance of <code>cat</code> as when <code>twoCats</code> is initialised it will be passed an already initialised instance of <code>cat</code> which will have been passed the <code>int height</code> argument?</li>\n<li>Why is the same block of error messages shown twice? I called <code>g++ main.cpp</code> on Ubuntu 12.04.</li>\n</ol>\n", "AcceptedAnswerId": "26077091", "Title": "In constructor, candidate expects 1 argument, 0 provided", "CreationDate": "2014-09-27T16:53:55.153", "Id": "26076997", "CommentCount": "14", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2014-09-27T17:55:29.510", "LastEditorUserId": "3967621", "LastActivityDate": "2014-09-27T18:02:05.863", "ClosedDate": "2014-09-27T18:13:48.463", "Score": "6", "OwnerUserId": "4086467", "Tags": "<c++><compiler-errors><g++>", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_26076997_26077091_3": {"length": 13, "quality": 1.0, "section_id": 438}, "so_26076997_26077091_5": {"length": 5, "quality": 1.0, "section_id": 438}, "so_26076997_26077091_2": {"length": 29, "quality": 1.0, "section_id": 438}, "so_26076997_26077091_6": {"length": 11, "quality": 0.7333333333333333, "section_id": 438}, "so_26076997_26077091_1": {"length": 6, "quality": 1.0, "section_id": 438}, "so_26076997_26077091_4": {"length": 15, "quality": 1.0, "section_id": 438}}, "n3337": {"so_26076997_26077091_2": {"length": 29, "quality": 1.0, "section_id": 429}, "so_26076997_26077091_5": {"length": 5, "quality": 1.0, "section_id": 429}, "so_26076997_26077091_6": {"length": 11, "quality": 0.7333333333333333, "section_id": 429}, "so_26076997_26077091_1": {"length": 6, "quality": 1.0, "section_id": 429}, "so_26076997_26077091_3": {"length": 13, "quality": 1.0, "section_id": 429}, "so_26076997_26077091_4": {"length": 15, "quality": 1.0, "section_id": 429}}, "n4659": {"so_26076997_26077091_2": {"length": 29, "quality": 1.0, "section_id": 458}, "so_26076997_26077091_5": {"length": 5, "quality": 1.0, "section_id": 458}, "so_26076997_26077091_6": {"length": 11, "quality": 0.7333333333333333, "section_id": 458}, "so_26076997_26077091_1": {"length": 6, "quality": 1.0, "section_id": 458}, "so_26076997_26077091_3": {"length": 13, "quality": 1.0, "section_id": 458}, "so_26076997_26077091_4": {"length": 15, "quality": 1.0, "section_id": 458}}}, "26077175": {"Id": "26077175", "PostTypeId": "2", "Body": "<p>As name of your class (twoCats) states it represents two cats <em>always</em>. These kittens can be alive, dead or even not yet born. But it shall be two of them.</p>\n<p>Your design is wrong in the sense that either:</p>\n<ul>\n<li><code>cat</code> should be able to represent non-born cat (so it should have\npublic default constructor setting the object into non-born state initially) or</li>\n<li>your twoCats constructor shall accept exactly two cats at the very beginning.</li>\n</ul>\n", "LastActivityDate": "2014-09-27T17:13:49.453", "CommentCount": "2", "CreationDate": "2014-09-27T17:13:49.453", "ParentId": "26076997", "Score": "0", "OwnerUserId": "421163"}, "26077176": {"Id": "26077176", "PostTypeId": "2", "Body": "<p>I would initialize the class <code>twoCats</code> like this:</p>\n<pre><code>class twoCats\n{\nprivate:\n    cat firstCat;\n    cat secondCat;\npublic:\n    twoCats (const cat&amp; theFirstCat, const cat&amp; theSecondCat)\n        : firstCat (theFirstCat), secondCat (theSecondCat)\n    {\n    }\n</code></pre>\n<p>};</p>\n<p>The important part here is the colon after the constructor <code>:</code>. It starts the member initialization list, which is the place where, if possible, all your class data members should be initialized.</p>\n<p>Initialization of data members is quite a complex issue in C++, I suggest you google it.</p>\n<p>In particular, since you have two members of class type, the compiler, no matter what, tries to initialize them in your constructor. It does so for every cat, which probably is the reason you get the error message block twice. In its default, the compiler tries to initialize your cat data members using a default constructor, i.e. one without arguments. Unfortunately, <code>cat</code> does not have a default constructor, since you declared one with one argument. In other words, each cat has to be initialized with one argument (or copied, or moved in C++11).</p>\n<p>I do not recommend declaring an additional constructor to <code>cat</code> without arguments: It seems that there is no \"default hight\" of a cat, and the <code>-1</code> suggested by another answer is very strange: It doesn't seem to construct a valid object, and you'd have to check for this default value before using any of <code>cat</code>'s member functions.</p>\n<p>EDIT: This is from a format point of view. As for the semantics of your program, it might be wrong to copy the cats. Maybe you do need a reference (or a pointer) to the objects you initialized your twoCats with, maybe not.</p>\n", "LastActivityDate": "2014-09-27T17:14:07.083", "CommentCount": "1", "CreationDate": "2014-09-27T17:14:07.083", "ParentId": "26076997", "Score": "2", "OwnerUserId": "3060323"}, "26077091": {"Id": "26077091", "PostTypeId": "2", "Body": "<p>You need a default constructor or initialize cat objects in <code>twoCats</code> constructor initilization list explicitly to avoid default construction.</p>\n<blockquote>\n<p id=\"so_26076997_26077091_0\">Why does the constructor for twoCats try to call the default\n  constructor for cat? Surely it does not need to construct an instance\n  of cat as when twoCats is initialised it will be passed an already\n  initialised instance of cat which will have been passed the int height\n  argument?</p>\n</blockquote>\n<p>It needs to construct default values for <code>cat</code> objects </p>\n<pre><code>private:\n    cat firstCat;\n    cat secondCat;\n</code></pre>\n<p>in class <code>twoCats</code> because you didn't initialize them. In your constructor</p>\n<pre><code>cat::cat (int inputHeight)\n{\n    height = inputHeight;\n    ^^^^^^^^^^^^^^^^^^^^\n}   // this is assignment\n</code></pre>\n<p>this is assignment to already created objects.</p>\n<p>The rule is as follows: if you don't initialize instances explicitly in <code>ctor</code> initialization list then </p>\n<ol>\n<li>Default <code>ctor</code> is called</li>\n<li>You eventually assign to already default constructed objects in <code>ctor</code> body.</li>\n</ol>\n<p>Thus you face penalty of having additional calls if you don't initialize in initialization list.</p>\n<p>C++ Standard n3337 <strong>\u00a7</strong> 12.6.2/10 Initializing bases and members</p>\n<blockquote>\n<p id=\"so_26076997_26077091_1\">In a non-delegating constructor, initialization proceeds in the\n  following order:</p>\n<p id=\"so_26076997_26077091_2\">\u2014 First, and only for the constructor of the most derived class (1.8),\n  virtual base classes are initialized in the order they appear on a\n  depth-first left-to-right traversal of the directed acyclic graph of\n  base classes, where \u201cleft-to-right\u201d is the order of appearance of the\n  base classes in the derived class base-specifier-list.</p>\n<p id=\"so_26076997_26077091_3\">\u2014 Then, direct base classes are initialized in declaration order as\n  they appear in the base-specifier-list (regardless of the order of the\n  mem-initializers).</p>\n<p id=\"so_26076997_26077091_4\">\u2014 <strong>Then, non-static data members are initialized</strong> in the order they were\n  declared in the class definition (again regardless of the order of the\n  mem-initializers).</p>\n<p id=\"so_26076997_26077091_5\">\u2014 <strong>Finally, the compound-statement of the constructor body is executed</strong>.</p>\n<p id=\"so_26076997_26077091_6\">[ Note: The declaration order is mandated to ensure that base and\n  member subobjects are destroyed in the reverse order of\n  initialization. \u2014 end note ]</p>\n</blockquote>\n<p><a href=\"http://ideone.com/q043yr\" rel=\"nofollow\">Here is a code demo.</a></p>\n", "LastEditorUserId": "1141471", "LastActivityDate": "2014-09-27T17:26:05.820", "Score": "4", "CreationDate": "2014-09-27T17:04:09.583", "ParentId": "26076997", "CommentCount": "3", "OwnerUserId": "1141471", "LastEditDate": "2014-09-27T17:26:05.820"}});