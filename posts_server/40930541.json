post_cb({"40930541": {"CommentCount": "10", "ViewCount": "255", "PostTypeId": "1", "LastEditorUserId": "807307", "CreationDate": "2016-12-02T10:55:26.610", "LastActivityDate": "2016-12-02T16:13:08.560", "Title": "Is steady_clock monotonic across threads?", "AcceptedAnswerId": "40931104", "LastEditDate": "2016-12-02T16:13:08.560", "Id": "40930541", "Score": "6", "Body": "<p>Are monotonic properties of <code>std::chrono::steady_clock</code> preserved across threads? For example, suppose I have the following program.</p>\n<pre><code>#include &lt;chrono&gt;\n#include &lt;mutex&gt;\n#include &lt;thread&gt;\n\nusing namespace std;\nusing namespace chrono;\n\nmutex m;\nint i = 0;\n\nvoid do_something(int &amp;x) {\n  x += 1;\n}\n\nvoid f1() {\n  unique_lock&lt;mutex&gt; lock(m);\n  auto time = steady_clock::now();\n  do_something(i);\n}\n\nvoid f2() {\n  unique_lock&lt;mutex&gt; lock(m);\n  auto time = steady_clock::now();\n  do_something(i);\n}\n\nint main() {\n  thread t1(f1);\n  thread t2(f2);\n  t1.join();\n  t2.join();\n  return 0;\n}\n</code></pre>\n<p>Can I assume that the thread that has the smaller <code>time</code> value in the end (supposing they have different value at all) modified <code>i</code> before the other and that the other saw <code>i</code> as it was left by the first one?</p>\n", "Tags": "<c++><multithreading><clock>", "OwnerUserId": "807307", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_40930541_40931104_1": {"section_id": 5824, "quality": 0.6842105263157895, "length": 13}, "so_40930541_40931104_0": {"section_id": 4739, "quality": 0.90625, "length": 29}}, "n3337": {"so_40930541_40931104_1": {"section_id": 5595, "quality": 0.6842105263157895, "length": 13}, "so_40930541_40931104_0": {"section_id": 4546, "quality": 0.90625, "length": 29}}, "n4659": {"so_40930541_40931104_1": {"section_id": 7285, "quality": 0.6842105263157895, "length": 13}, "so_40930541_40931104_0": {"section_id": 6150, "quality": 0.90625, "length": 29}}}, "40931104": {"ParentId": "40930541", "CommentCount": "0", "CreationDate": "2016-12-02T11:24:02.597", "OwnerUserId": "3134621", "PostTypeId": "2", "Id": "40931104", "Score": "7", "Body": "<p>Standard [time.clock.steady]</p>\n<pre><code>...\nstatic constexpr bool is_steady = true;\nstatic time_point now() noexcept;\n...  \n</code></pre>\n<p>is_steady has to be true in all implementations (ie. the class can not exist with false, if the OS etc. isn't capable of it), and both members are independent of instances.</p>\n<p>Standard [time.clock.req]:  </p>\n<blockquote>\n<p id=\"so_40930541_40931104_0\">Clock requirements<br>\n  ...<br>\n  C1 and C2 denote clock types. t1 and t2 are values returned by C1::now() where the call returning t1 happens before <strong>(1.10)</strong> the call returning t2 and both of these calls occur before C1::time_-point::max().<br>\n  ...<br>\n  C1::is_steady: true if t1 &lt;= t2 is always true and the time between clock ticks is constant, otherwise false.</br></br></br></br></p>\n</blockquote>\n<p>And the 1.10 part contains:  </p>\n<blockquote>\n<p id=\"so_40930541_40931104_1\">Multi-threaded executions and data races<br>\n  ...<br>\n  An evaluation A happens before an evaluation B if:<br>\n  A is sequenced before B, or<br>\n  A inter-thread happens before B.<br>\n  ...<br>\n  An evaluation A inter-thread happens before an evaluation B if<br>\n  A <strong>synchronizes</strong> with B, or\n  ...  </br></br></br></br></br></br></br></p>\n</blockquote>\n<p>I don't think synchronizing needs to be copied here (a mutex should be enough to fulfil that),<br>\nso: <strong>Yes</strong>, it's ok.  </br></p>\n", "LastActivityDate": "2016-12-02T11:24:02.597"}});