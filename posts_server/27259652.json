post_cb({"27259652": {"CommentCount": "7", "ViewCount": "946", "CreationDate": "2014-12-02T21:49:49.997", "LastActivityDate": "2017-07-03T10:30:06.990", "Title": "Where does exception object have its space, heap or stack, and how to access it in different class?", "FavoriteCount": "1", "PostTypeId": "1", "Id": "27259652", "Score": "3", "Body": "<p>Recently an interviewer asked me <strong>where the exception object in C++ is allocated, heap or stack?</strong> I'm not sure but I answered stack since I thought there is no \"new\" or \"malloc\". Is it correct?</p>\n<p>Then he kept asking me that <strong>if it's on stack,  assuming class A throw a exception object, let's say \"e\", and class B catch \"e\". Since \"e\" is on the stack of A, then how does B can have the access to this \"e\"?</strong></p>\n<p>I'm not very clear about the second question. Could anyone can give me some example code showing that \"class A throw e and class B catch it\"? Also, I guessed B can catch e by copying the value or address but the interviewer only denied my answer without giving me right one, so what is the right answer, is there any mechanism can ensure class object can catch exceptions from other class objects? Thanks~</p>\n", "Tags": "<c++><exception><memory><stack><heap>", "OwnerUserId": "1328563", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_27259652_27259902_1": {"section_id": 7179, "quality": 0.6923076923076923, "length": 9}, "so_27259652_27259902_0": {"section_id": 3337, "quality": 0.8, "length": 8}}, "n3337": {"so_27259652_27259902_1": {"section_id": 6923, "quality": 0.6153846153846154, "length": 8}, "so_27259652_27259902_0": {"section_id": 3207, "quality": 0.8, "length": 8}}, "n4659": {"so_27259652_27259902_1": {"section_id": 8687, "quality": 0.6923076923076923, "length": 9}, "so_27259652_27259902_0": {"section_id": 4104, "quality": 0.8, "length": 8}}}, "27259944": {"ParentId": "27259652", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_27259652_27259944_0\"><em>\"but I answered <strong>stack</strong> since I thought there is no \"new\" or \"malloc\". Is it correct?\"</em></p>\n</blockquote>\n<p>Basically yes, though exception handling is a bit special because it <strong><em>unwinds</em></strong> the stack for <code>throw</code> operations.</p>\n<pre><code> struct SomeException {\n };\n\n void throwing_func() {\n      throw SomeException();\n }\n\n int main() {\n     try {\n         throwing_func();\n     }\n     catch(const SomeException&amp; ex) {\n         std::cout &lt;&lt; \"Caught 'SomeException' exception\" &lt;&lt; std::endl;\n     }\n }\n</code></pre>\n<p>The local scope of </p>\n<pre><code>void throwing_func() {\n      throw SomeException();\n}\n</code></pre>\n<p>is somehow equivalent as looking to a <code>local scope</code> and matching that kind of <code>local scope</code> with the best matching <code>catch(...)</code> statement.</p>\n", "OwnerUserId": "1413395", "PostTypeId": "2", "Id": "27259944", "Score": "0", "CreationDate": "2014-12-02T22:07:13.327", "LastActivityDate": "2014-12-02T22:07:13.327"}, "44883325": {"ParentId": "27259652", "CommentCount": "0", "Body": "<p>It can't be stack as the when exception is thrown stack unwinds and you'd lose the exception object if allocated in the frame that caused the exception.</p>\n<p>I remember reading something about it in C++ Primer, 5Ed. It said</p>\n<blockquote>\n<p id=\"so_27259652_44883325_0\">The exception object resides in space, managed by the compiler, that is guaranteed to be accessible to whatever catch is invoked. The exception object is destroyed after the exception is completely handle.</p>\n</blockquote>\n<p>And looking at @Kerrek's asnwer above along with it, I believe it's a separate space allocated and is specific to compilers.</p>\n", "OwnerUserId": "277375", "PostTypeId": "2", "Id": "44883325", "Score": "0", "CreationDate": "2017-07-03T10:30:06.990", "LastActivityDate": "2017-07-03T10:30:06.990"}, "27260045": {"ParentId": "27259652", "PostTypeId": "2", "CommentCount": "0", "Body": "<p><a href=\"https://stackoverflow.com/questions/10948316/throw-new-stdexception-vs-throw-stdexception\">throw new std::exception vs throw std::exception</a></p>\n<p>The above link has a pretty good answer. </p>\n<p>I think the answer would be \"usually\" heap since you are throwing an object which would be located on the heap but if it is a static object (not sure if such a thing exists) then it would be on the stack. </p>\n", "OwnerUserId": "4267463", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T11:45:58.417", "Id": "27260045", "Score": "0", "CreationDate": "2014-12-02T22:14:07.030", "LastActivityDate": "2014-12-02T22:14:07.030"}, "27259902": {"ParentId": "27259652", "CommentCount": "3", "Body": "<p>From [except.throw]/15.1/4:</p>\n<blockquote>\n<p id=\"so_27259652_27259902_0\">The memory for the exception object is allocated in an unspecified way, except as noted in 3.7.4.1.</p>\n</blockquote>\n<p>The final reference, [basic.stc.dynamic.allocation]/4, says:</p>\n<blockquote>\n<p id=\"so_27259652_27259902_1\">[<em>Note</em>: In particular, a global allocation function is not called to allocate storage for [...] an exception object (15.1). \u2014 <em>end note</em>]</p>\n</blockquote>\n", "OwnerUserId": "596781", "PostTypeId": "2", "Id": "27259902", "Score": "7", "CreationDate": "2014-12-02T22:04:42.487", "LastActivityDate": "2014-12-02T22:04:42.487"}});