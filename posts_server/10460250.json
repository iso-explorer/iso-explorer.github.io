post_cb({"10460277": {"ParentId": "10460250", "PostTypeId": "2", "CommentCount": "3", "CreationDate": "2012-05-05T08:50:12.033", "Score": "35", "LastEditorUserId": "452307", "LastEditDate": "2012-05-05T09:22:46.103", "Id": "10460277", "OwnerUserId": "452307", "Body": "<p>Including <code>cstdio</code> imports the symbol names in <code>std</code> namespace and <em>possibly</em> in Global namespace.<br>\nIncluding <code>stdio.h</code> imports the symbol names in Global namespace and <em>possibly</em> in <code>std</code> namespace.    </br></p>\n<p>The same applies for all c-styled headers.</p>\n<hr>\n<p><strong>Reference:</strong><br>\nC++11 standard</br></p>\n<p><strong>Annex D (normative) Compatibility features [depr]</strong> states:      </p>\n<p><strong>D.6 C standard library headers</strong> </p>\n<blockquote>\n<p id=\"so_10460250_10460277_0\">1 For compatibility with the C standard library and the C Unicode TR, the C++ standard library provides the 25 C headers, as shown in Table 151.</p>\n</blockquote>\n<p>Which include:         </p>\n<blockquote>\n<p id=\"so_10460250_10460277_1\"><code>&lt;assert.h&gt; &lt;float.h&gt; &lt;math.h&gt; &lt;stddef.h&gt; &lt;tgmath.h&gt;</code>\n<code>&lt;complex.h&gt; &lt;inttypes.h&gt; &lt;setjmp.h&gt; &lt;stdio.h&gt; &lt;time.h&gt;</code>\n<code>&lt;ctype.h&gt; &lt;iso646.h&gt; &lt;signal.h&gt; &lt;stdint.h&gt; &lt;uchar.h&gt;</code>\n<code>&lt;errno.h&gt; &lt;limits.h&gt; &lt;stdarg.h&gt; &lt;stdlib.h&gt; &lt;wchar.h&gt;</code>\n<code>&lt;fenv.h&gt; &lt;locale.h&gt; &lt;stdbool.h&gt; &lt;string.h&gt; &lt;wctype.h&gt;</code></p>\n</blockquote>\n<p>Further on,    </p>\n<blockquote>\n<p id=\"so_10460250_10460277_2\">2   <strong>Every C header, each of which has a name of the form <code>name.h</code>, behaves as if each name placed in the standard library namespace by the corresponding <code>cname header</code> is placed within the global namespace scope.</strong> It is unspecified whether these names are first declared or defined within namespace scope (3.3.6) of the namespace std and are then injected into the global namespace scope by explicit using-declarations (7.3.3).</p>\n<p id=\"so_10460250_10460277_3\">3 [ Example: The header <code>&lt;cstdlib&gt;</code> assuredly provides its declarations and definitions within the namespace std. It may also provide these names within the global namespace. The header <code>&lt;stdlib.h&gt;</code> assuredly provides the same declarations and definitions within the global namespace, much as in the C Standard. It may also provide these names within the namespace std. \u2014end example ]</p>\n</blockquote>\n</hr>", "LastActivityDate": "2012-05-05T09:22:46.103"}, "10460250": {"CommentCount": "0", "AcceptedAnswerId": "10460277", "PostTypeId": "1", "LastEditorUserId": "168175", "CreationDate": "2012-05-05T08:45:30.050", "LastActivityDate": "2012-05-05T09:28:47.693", "LastEditDate": "2012-05-05T08:47:04.560", "ViewCount": "12621", "FavoriteCount": "7", "Title": "cstdio stdio.h namespace", "Id": "10460250", "Score": "26", "Body": "<p>I see this line from the c++ reference for <code>cstdio</code>:</p>\n<p><strong>Every element of the library is defined within the <code>std namespace</code>.</strong>\nbut I tried the code:</p>\n<pre><code>std::printf(\"hello world\"); \n\nprintf(\"hello world\");\n</code></pre>\n<p>is it true that <strong><em>C++ headers puts the names in both the std and the global namespace</em></strong>?</p>\n", "Tags": "<c++><header>", "OwnerUserId": "445440", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_10460250_10460277_0": {"section_id": 4906, "quality": 0.7, "length": 7}, "so_10460250_10460277_2": {"section_id": 4907, "quality": 0.926829268292683, "length": 38}, "so_10460250_10460277_3": {"section_id": 4908, "quality": 0.8536585365853658, "length": 35}}, "n3337": {"so_10460250_10460277_0": {"section_id": 4701, "quality": 0.7, "length": 7}, "so_10460250_10460277_2": {"section_id": 4702, "quality": 0.926829268292683, "length": 38}, "so_10460250_10460277_3": {"section_id": 4703, "quality": 0.8536585365853658, "length": 35}}, "n4659": {"so_10460250_10460277_2": {"section_id": 6316, "quality": 0.926829268292683, "length": 38}, "so_10460250_10460277_3": {"section_id": 6317, "quality": 0.8536585365853658, "length": 35}}}, "10460291": {"ParentId": "10460250", "PostTypeId": "2", "CommentCount": "1", "CreationDate": "2012-05-05T08:51:50.530", "Score": "9", "LastEditorUserId": "256138", "LastEditDate": "2012-05-05T09:28:47.693", "Id": "10460291", "OwnerUserId": "1151724", "Body": "<p>According to libstdc++ docs:</p>\n<blockquote>\n<p id=\"so_10460250_10460291_0\">The standard specifies that if one includes the C-style header\n  (<code>&lt;math.h&gt;</code> in this case), the symbols will be available in the <strong>global\n  namespace</strong> and perhaps in namespace std:: (but this is no longer a firm\n  requirement.) One the other hand, including the C++-style header\n  (<code>&lt;cmath&gt;</code>) guarantees that the entities will be found in <strong>namespace std</strong>\n  and perhaps in the global namespace.</p>\n</blockquote>\n<p><a href=\"http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt01ch03s02.html\" rel=\"noreferrer\">http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt01ch03s02.html</a></p>\n", "LastActivityDate": "2012-05-05T09:28:47.693"}});