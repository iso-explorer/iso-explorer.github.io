post_cb({"40257321": {"Id": "40257321", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_40257011_40257321_0\">So does C++ standard define this <code>struct tm</code> as an type of function parameter as forward declaration. Please help to explain this and quota from the standard will helpful.</p>\n</blockquote>\n<p>Yes, <code>struct tm timeval</code> will introduce a new class name <code>xm::tm</code> here.</p>\n<hr>\n<p>(explanations and quotes)</p>\n<p><code>struct tm</code> is a <a href=\"http://en.cppreference.com/w/cpp/language/elaborated_type_specifier\">elaborated type specifier</a>, which could be used to introduce a new class name.</p>\n<p><a href=\"http://eel.is/c++draft/basic.def#4\">$3.1/4 Declarations and definitions [basic.def]</a></p>\n<blockquote>\n<p id=\"so_40257011_40257321_1\">[ Note: A class name can also be implicitly declared by an elaborated-type-specifier ([dcl.type.elab]).  \u2014 end note ]</p>\n</blockquote>\n<p><a href=\"http://eel.is/c++draft/class.name#2\">$9.1/2 Class names [class.name]</a>:</p>\n<blockquote>\n<p id=\"so_40257011_40257321_2\">A declaration consisting solely of class-key identifier; is either a\n  redeclaration of the name in the current scope or a forward\n  declaration of the identifier as a class name. It introduces the class\n  name into the current scope.</p>\n</blockquote>\n<p><a href=\"http://eel.is/c++draft/basic.lookup.elab#2\">$3.4.4/2 Elaborated type specifiers [basic.lookup.elab]</a>:</p>\n<blockquote>\n<p id=\"so_40257011_40257321_3\">or if the elaborated-type-specifier appears in a declaration with the\n  form:</p>\n<pre><code>class-key attribute-specifier-seqopt identifier ; \n</code></pre>\n<p id=\"so_40257011_40257321_4\">the elaborated-type-specifier is a declaration that introduces the\n  class-name as described in [basic.scope.pdecl].</p>\n</blockquote>\n<p><a href=\"http://eel.is/c++draft/basic.scope.pdecl#7\">$3.3.2/7 Point of declaration [basic.scope.pdecl]</a>:</p>\n<blockquote>\n<p id=\"so_40257011_40257321_5\">if the elaborated-type-specifier is used in the decl-specifier-seq or\n  parameter-declaration-clause of a function defined in namespace scope,\n  the identifier is declared as a class-name in the namespace that\n  contains the declaration;</p>\n</blockquote>\n<p>For <code>struct tm timeval</code> used as function parameter declaration, because <code>&lt;time.h&gt;</code> is not included and there's still no class named <code>tm</code>, class <code>tm</code> will be declared in current scope (i.e. namespace <code>xm</code>), then <code>xm::tm</code> will be forward declared.</p>\n</hr>", "LastEditorUserId": "3309790", "LastActivityDate": "2016-10-26T09:39:45.357", "Score": "7", "CreationDate": "2016-10-26T08:30:30.143", "ParentId": "40257011", "CommentCount": "0", "OwnerUserId": "3309790", "LastEditDate": "2016-10-26T09:39:45.357"}, "bq_ids": {"n4140": {"so_40257011_40257111_1": {"length": 13, "quality": 1.0, "section_id": 7124}, "so_40257011_40257321_4": {"length": 5, "quality": 0.8333333333333334, "section_id": 7124}, "so_40257011_40257321_3": {"length": 4, "quality": 1.0, "section_id": 7124}, "so_40257011_40257321_5": {"length": 13, "quality": 1.0, "section_id": 7055}, "so_40257011_40257321_2": {"length": 21, "quality": 1.0, "section_id": 5857}, "so_40257011_40257111_3": {"length": 5, "quality": 0.8333333333333334, "section_id": 7124}, "so_40257011_40257321_1": {"length": 7, "quality": 0.6363636363636364, "section_id": 7036}}, "n3337": {"so_40257011_40257111_1": {"length": 13, "quality": 1.0, "section_id": 6868}, "so_40257011_40257321_3": {"length": 4, "quality": 1.0, "section_id": 6868}, "so_40257011_40257321_1": {"length": 7, "quality": 0.6363636363636364, "section_id": 6782}, "so_40257011_40257321_2": {"length": 21, "quality": 1.0, "section_id": 5627}, "so_40257011_40257111_3": {"length": 5, "quality": 0.8333333333333334, "section_id": 6868}, "so_40257011_40257321_5": {"length": 13, "quality": 1.0, "section_id": 6799}, "so_40257011_40257321_4": {"length": 5, "quality": 0.8333333333333334, "section_id": 6868}}, "n4659": {"so_40257011_40257111_1": {"length": 13, "quality": 1.0, "section_id": 8625}, "so_40257011_40257321_3": {"length": 4, "quality": 1.0, "section_id": 8625}, "so_40257011_40257321_1": {"length": 7, "quality": 0.6363636363636364, "section_id": 8533}, "so_40257011_40257321_2": {"length": 21, "quality": 1.0, "section_id": 7336}, "so_40257011_40257111_3": {"length": 5, "quality": 0.8333333333333334, "section_id": 8625}, "so_40257011_40257321_5": {"length": 13, "quality": 1.0, "section_id": 8552}, "so_40257011_40257321_4": {"length": 5, "quality": 0.8333333333333334, "section_id": 8625}}}, "40257011": {"ViewCount": "1308", "Body": "<p>I will have the following code snippet in utilA.cpp:</p>\n<pre><code>// utilB.h\nnamespace xm\n{\n     void zoo(struct tm timeval);  //&lt;-----line 0\n}\n\n\n// utilA.cpp\n#include &lt;utilB.h&gt;                 //&lt;----line 1\n#include &lt;time.h&gt;                  //&lt;----line 2\nnamespace xm\n{\n     void foo()\n     {\n         struct tm time1 = {0};    //&lt;----line 3\n     }\n}\n</code></pre>\n<p>GCC complains when compiling utilA.cpp,</p>\n<pre><code>error: variable 'xm::tm time1' has initializer but incomplete type\n</code></pre>\n<p>It seems this is because the <code>utilA.h</code> is using <code>struct tm</code> in line 0, but without include the <code>time.h</code>, and the compiler treat the <code>struct tm</code> in line 0 as a forward declare, so the <code>struct tm</code> at line 2 is resolved as <code>xm::tm</code> inside the header at line 0.</p>\n<p>So does the C++ standard define this <code>struct tm</code> as an type of function parameter as forward declaration? Please help to explain this and quotes from the standard will helpful.</p>\n", "AcceptedAnswerId": "40257111", "Title": "Why is this a forward declaration in C++?", "CreationDate": "2016-10-26T08:14:25.367", "Id": "40257011", "CommentCount": "5", "LastEditDate": "2016-10-26T12:50:58.853", "PostTypeId": "1", "LastEditorUserId": "63550", "LastActivityDate": "2016-10-26T12:50:58.853", "Score": "18", "OwnerUserId": "2428052", "Tags": "<c++><language-lawyer><standards><forward-declaration>", "AnswerCount": "2"}, "40257111": {"Id": "40257111", "PostTypeId": "2", "Body": "<p>In line 0, you declared a class named <code>tm</code> inside the <code>xm</code> namespace. Yes, C++ allows declaring types in function/template parameters.</p>\n<blockquote>\n<p id=\"so_40257011_40257111_0\">N4140 \u00a7 3.4.4 [basic.lookup.elab]/2</p>\n<p id=\"so_40257011_40257111_1\">If the <em>elaborated-type-specifier</em> is introduced by the <em>class-key</em> and\n  this lookup does not find a previously declared <em>type-name</em>, or if the\n  <em>elaborated-type-specifier</em> appears in a declaration with the form:</p>\n<p id=\"so_40257011_40257111_2\"><em>class-key attribute-specifier-seq<sub>opt</sub> identifier</em>;</p>\n<p id=\"so_40257011_40257111_3\">the <em>elaborated-type-specifier</em> is a declaration that introduces the\n  class-name as described in 3.3.2.</p>\n</blockquote>\n<p>Because you declared a class named <code>tm</code> inside the <code>xm</code> namespace, it's the first name that name lookup finds for <code>tm</code> in line 3. <code>::tm</code> (and <code>::std::tm</code>) are not considered. And since there's no definition of class <code>::xm::tm</code>, the compiler complains about it being an incomplete type.</p>\n<p>If you weren't writing C code in C++, you'd write something like<sup>1</sup></p>\n<pre><code>struct tm;\n\nnamespace xz{\n    void zoo(tm timeval);\n}\n</code></pre>\n<p>or</p>\n<pre><code>#include &lt;ctime&gt;\n\nnamespace xz{\n    void zoo(tm timeval);\n}\n</code></pre>\n<p>and you wouldn't have that problem. </p>\n<p><sup>1</sup> <sub>remember that you cannot forward-declare names in namespace std</sub></p>\n", "LastEditorUserId": "2456565", "LastActivityDate": "2016-10-26T08:31:23.283", "Score": "20", "CreationDate": "2016-10-26T08:20:00.710", "ParentId": "40257011", "CommentCount": "0", "OwnerUserId": "2456565", "LastEditDate": "2016-10-26T08:31:23.283"}});