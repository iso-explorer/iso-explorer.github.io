post_cb({"29347717": {"CommentCount": "10", "ViewCount": "109", "PostTypeId": "1", "LastEditorUserId": "510036", "CreationDate": "2015-03-30T13:38:31.547", "LastActivityDate": "2015-03-30T14:05:08.663", "Title": "Which class should be used by C++?", "AcceptedAnswerId": "29348149", "LastEditDate": "2015-03-30T13:46:02.280", "Id": "29347717", "Score": "0", "Body": "<p>To describe is a little tricky, I think. But I do my best...</p>\n<p>Given:</p>\n<p>A prog (Prog_A)</p>\n<p>A lib (Lib_A) with\na class Class_A</p>\n<p>And a lib (Lib_B) with (also) a class Class_A and has a member Class_A mClass_A</p>\n<p>Both classes Class_A have the function </p>\n<pre><code>void Class_A::DoSome(){\n...\n}\n</code></pre>\n<p>For Class_A in Lib_A then</p>\n<pre><code>void Class_A::DoSome(){\nstd::cout &lt;&lt; \"LIB_A\";\n}\n</code></pre>\n<p>For Class_A in Lib_B then</p>\n<pre><code>void Class_A::DoSome(){\nstd::cout &lt;&lt; \"LIB_B\";\n}\n</code></pre>\n<p>Prog_A includes Lib_A, Lib_A includes Lib_B.\nLib_A and Lib_B is \"connected\" by Callback's.\nIf I now call mClass_A.DoSome() in <em>Lib_B</em> then it's printing</p>\n<p>LIB_A</p>\n<p>instead of my expectation 'LIB_B'.</p>\n<p>Is this behavior correct, or must I be worried?</p>\n", "Tags": "<c++><class>", "OwnerUserId": "2385427", "AnswerCount": "1"}, "29348149": {"ParentId": "29347717", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>Your code is wrong. You have defined <code>Class_A</code> twice, and the definitions do not match.</p>\n<p>This is <em>not allowed</em>.</p>\n<blockquote>\n<p id=\"so_29347717_29348149_0\"><code>[C++11: 3.2/3]</code>: <strong>Every program shall contain exactly one definition of every non-inline function or variable that is odr-used in that program; no diagnostic required.</strong> The definition can appear explicitly in the program, it can be found in the standard or a user-defined library, or (when appropriate) it is implicitly defined (see 12.1, 12.4 and 12.8). An inline function shall be defined in every translation unit in which it is odr-used.</p>\n<p id=\"so_29347717_29348149_1\"><code>[C++11: 3.2/5]</code>: <strong>There can be more than one definition of a class type</strong> (Clause 9), enumeration type (7.2), inline function with external linkage (7.1.2), class template (Clause 14), non-static function template (14.5.6), static data member of a class template (14.5.1.3), member function of a class template (14.5.1.1), or template specialization for which some template parameters are not specified (14.7, 14.5.5) <strong>in a program provided that each definition appears in a different translation unit, and provided the definitions satisfy the following requirements</strong>. Given such an entity named D` defined in more than one translation unit, then</p>\n<ul>\n<li><strong>each definition of <code>D</code> shall consist of the same sequence of tokens</strong>;</li>\n<li><em>[..]</em></li>\n</ul>\n</blockquote>\n<p>If you were building the entire program straight up, you'd get a multiple definitions error at link-time; however, since you're linking dynamically, this is not possible and your program is simply broken.</p>\n<p>Use namespaces to separate the definitions from each other.</p>\n<p>I managed to accidentally cause this problem once when using <a href=\"https://stackoverflow.com/questions/1250795/very-poor-boostlexical-cast-performance/1251051#comment19144737_1251043\">a custom <code>boost::lexical_cast</code> specialisation I'd found on Stack Overflow</a> in a shared library, not realising that the original, \"default\" specialisation had been instantiated in a separate shared library. The behaviour I got from the main application was quite unpredictable.</p>\n", "OwnerUserId": "560648", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:12:57.743", "Id": "29348149", "Score": "4", "CreationDate": "2015-03-30T13:59:24.353", "LastActivityDate": "2015-03-30T14:05:08.663"}, "bq_ids": {"n4140": {"so_29347717_29348149_0": {"section_id": 7041, "quality": 0.8421052631578947, "length": 32}, "so_29347717_29348149_1": {"section_id": 7043, "quality": 0.8805970149253731, "length": 59}}, "n3337": {"so_29347717_29348149_0": {"section_id": 6786, "quality": 0.8421052631578947, "length": 32}, "so_29347717_29348149_1": {"section_id": 6788, "quality": 0.8805970149253731, "length": 59}}, "n4659": {"so_29347717_29348149_0": {"section_id": 8538, "quality": 0.8421052631578947, "length": 32}, "so_29347717_29348149_1": {"section_id": 8540, "quality": 0.8805970149253731, "length": 59}}}});