post_cb({"18416780": {"ViewCount": "1454", "Body": "<p>The following program does not compile in g++ 4.4 if <code>line 8</code> is commented. Why? It seems that when I override <code>std::exception</code> constructor, I must override its destructor as well. What's the reason for this?</p>\n<pre><code>#include&lt;iostream&gt;\n#include&lt;exception&gt;\nusing namespace std;\n\nclass A : public exception {\npublic:\n    A(string msg) : _msg(msg) {}\n    //~A() throw(){};                     // line 8\n    const char* what() const throw() { return _msg.c_str();}    \nprivate:\n    string _msg;\n};\n\nint main()\n{\n}\n</code></pre>\n<p>The compilation error is:</p>\n<pre><code>error: looser throw specifier for \u2018virtual A::~A()\u2019\n</code></pre>\n", "AcceptedAnswerId": "18416814", "Title": "Overrriding destructor of std:exception", "CreationDate": "2013-08-24T09:02:02.993", "Id": "18416780", "CommentCount": "4", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2013-09-06T13:50:28.330", "Score": "10", "OwnerUserId": "2606524", "Tags": "<c++><exception><exception-handling><destructor><throw>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_18416780_18416814_1": {"length": 44, "quality": 0.8461538461538461, "section_id": 3376}, "so_18416780_18416814_0": {"length": 13, "quality": 0.8666666666666667, "section_id": 400}}, "n3337": {"so_18416780_18416814_1": {"length": 47, "quality": 0.9038461538461539, "section_id": 3246}, "so_18416780_18416814_0": {"length": 13, "quality": 0.8666666666666667, "section_id": 391}}, "n4659": {"so_18416780_18416814_0": {"length": 13, "quality": 0.8666666666666667, "section_id": 417}}}, "18416814": {"Id": "18416814", "PostTypeId": "2", "Body": "<p>This is because the destructor requires a throw() specifier. If you don't specify it in your class the compiler writes it's own default destructor for you class, and the default destructor doesn't specify that you don't throw exceptions.</p>\n<p>This is correct, since the public destructor of std::exception also specifies <code>throw()</code></p>\n<pre><code>~A() throw(){};\n</code></pre>\n<p>from the standard (N3225) 12.4.4 : </p>\n<blockquote>\n<p id=\"so_18416780_18416814_0\">If a class has no user-declared destructor, a destructor is implicitly declared as &gt;defaulted (8.4). An implicitly-\n  declared destructor is an inline public member of its class.</p>\n</blockquote>\n<p>Therefore, if you don't declare the destructor yourself the compiler creates the next destructor. If all your exception member destructors where <code>nothrow</code> qualified, the compiler will probably generate a destructor with <code>throw()</code> specified.</p>\n<pre><code>~A(){};\n</code></pre>\n<p>And technically one could throw an exception from this destructor, but that would be very bad programming style, therefore an exception deriving from <code>std::exception</code> guarantees that you don't throw any exceptions in the destructor of a <code>std::exception</code> derived class.</p>\n<p><b>Edit</b>\nNewer compilers will provide a destructor that does have a <code>noexcept</code> specifier if the destructor of std::string is <code>noexcept</code> specified. And other compilers will also generate a <code>noexcept</code> destructor if all member's destructors don't throw exceptions (are noexcept qualified).\nThis is mandated by C++11 standard in chapter 15.4. [except.spec]</p>\n<blockquote>\n<p id=\"so_18416780_18416814_1\">14 An implicitly declared special member function (Clause 12) shall have an exception-speci\ufb01cation. <strong>If f is\n  an implicitly declared default constructor</strong>, copy constructor, move constructor, destructor, copy assignment\n  operator, or move assignment operator, its implicit exception-speci\ufb01cation speci\ufb01es the type-id T if and only\n  if T is allowed by the exception-speci\ufb01cation of a function directly invoked by f\u2019s implicit de\ufb01nition; f shall\n  allow all exceptions if any function it directly invokes allows all exceptions, and <strong>f shall allow no exceptions\n  if every function it directly invokes allows no exceptions.</strong> [...]</p>\n</blockquote>\n", "LastEditorUserId": "2082884", "LastActivityDate": "2013-09-06T13:50:28.330", "Score": "8", "CreationDate": "2013-08-24T09:05:10.977", "ParentId": "18416780", "CommentCount": "7", "OwnerUserId": "2082884", "LastEditDate": "2013-09-06T13:50:28.330"}});