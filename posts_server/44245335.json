post_cb({"44245335": {"CommentCount": "3", "ViewCount": "33", "CreationDate": "2017-05-29T14:51:56.113", "LastActivityDate": "2017-05-29T15:03:24.397", "Title": "Header implementation replaced by other implementation", "AcceptedAnswerId": "44245558", "PostTypeId": "1", "Id": "44245335", "Score": "0", "Body": "<p>I've got a wondering for something that I've recently tried. This is not meant to be production code, just something I threw up together and got some weird behavior that I cannot explain. And maybe somebody with more C++ experience knows what's going on.</p>\n<p>I've got a header file containing a class with the implementation inside it (hinting to the compiler to inline it, I guess). I included this header file in multiple cpp files that compile to a dll; I then tried to use the same header file in multiple cpp files that compile to a lib (static library). </p>\n<p>And for reasons which I don't need to get into, I couldn't use a std's getcurrentthreadid() API in the header in that lib (but the same API was compiled with no issues while compiling/linking the dll). So. just wanting to workaround this issue (and I know it's not a good practice, but wanted to experiment), I copy-pasted the original header file, and I removed that particular call to the threadid API, and just hardcoded a -1 instead of using the type's method.</p>\n<p>So now i have a dll built from cpps including a .h file with the threadid call, and a lib build from cpps including a almost identical .h file with the hardcoded id = -1. The dll references the lib file.</p>\n<p>Now, to my knowledge, when compiling the lib, the header contents get injected into the cpp files during pre-compilation, and then compilation takes places. Meaning the lib file should contain object code with that hardcoded -1.\nWhen I then compile the dll, the other header file gets injected into the cpp files, and the cpp code is compiled. Then, during linking the lib gets loaded into the dll.</p>\n<p>So I would expect, at runtime, the code from the lib to use the hardcoded -1, and the code from the dll to use the actual threadid. But to my surprise, they all seem to use the actual threadid. Even though, while compiling the lib, it complained about the threadid.</p>\n<p>So, am I missing something to all of this? I know what I'm doing is not good practice, but was surprised at the outcome.\nThanks.</p>\n", "Tags": "<c++><replace><header><implementation>", "OwnerUserId": "599622", "AnswerCount": "1"}, "44245558": {"ParentId": "44245335", "CommentCount": "1", "Body": "<p>Your program exhibits undefined behavior, by way of violating <a href=\"http://en.cppreference.com/w/cpp/language/definition#One_Definition_Rule\" rel=\"nofollow noreferrer\">One definition rule</a>:</p>\n<blockquote>\n<p id=\"so_44245335_44245558_0\"><strong>[basic.def.odr]/6</strong> There can be more than one definition of ... inline function with external linkage ... in a program provided that each definition appears in a different translation unit, and provided the definitions satisfy the following requirements. Given such an entity named <code>D</code> defined in more than one translation unit, then</p>\n<p id=\"so_44245335_44245558_1\">(6.1) \u2014 each definition of <code>D</code> shall consist of the same sequence of tokens; and...</p>\n</blockquote>\n<p>Practically speaking, a typical implementation would have the compiler emit the compiled body of the function into each object file that uses it, and instruct the linker to pick one - any one - and discard the rest (under the assumption that they are all identical).</p>\n", "OwnerUserId": "1670129", "PostTypeId": "2", "Id": "44245558", "Score": "0", "CreationDate": "2017-05-29T15:03:24.397", "LastActivityDate": "2017-05-29T15:03:24.397"}, "bq_ids": {"n4140": {"so_44245335_44245558_1": {"section_id": 7043, "quality": 1.0, "length": 6}, "so_44245335_44245558_0": {"section_id": 7043, "quality": 0.9705882352941176, "length": 33}}, "n3337": {"so_44245335_44245558_1": {"section_id": 6788, "quality": 1.0, "length": 6}, "so_44245335_44245558_0": {"section_id": 6788, "quality": 0.9705882352941176, "length": 33}}, "n4659": {"so_44245335_44245558_1": {"section_id": 8540, "quality": 1.0, "length": 6}, "so_44245335_44245558_0": {"section_id": 8540, "quality": 0.9705882352941176, "length": 33}}}});