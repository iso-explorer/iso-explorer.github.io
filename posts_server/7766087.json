post_cb({"18078800": {"ParentId": "7766087", "CommentCount": "0", "Body": "<p>In n3690 (C++14 draft), the wording has been changed to:</p>\n<blockquote>\n<p id=\"so_7766087_18078800_0\"><strong>Returns:</strong> <code>*(begin() + pos)</code> if <code>pos &lt; size()</code>. Otherwise, returns a reference to an object of type <code>charT</code> with value <code>charT()</code>, where modifying the object leads to undefined behavior.</p>\n</blockquote>\n<p>I believe that this resolves the English ambiguity, and makes clear the intent of the original, ambiguous C++11 passage.</p>\n", "OwnerUserId": "560648", "PostTypeId": "2", "Id": "18078800", "Score": "4", "CreationDate": "2013-08-06T11:20:46.003", "LastActivityDate": "2013-08-06T11:20:46.003"}, "7766135": {"ParentId": "7766087", "PostTypeId": "2", "CommentCount": "10", "Body": "<p>The quote means that you cannot modify the return of <code>operator[]( size() )</code>, even if the value is well defined. That is, you must not modify the NUL terminator in the string even through the non-const overload.</p>\n<p>This is basically your first option: i.e. <code>pos &gt;= size()</code>, but because of the requirement <code>pos &lt;= size()</code> the only possible value for that condition is <code>pos == size()</code>.</p>\n<p>The actual English description of the clause can be ambiguous (at least to me), but Appendix C, and in particular C.2.11 deals with changes in semantics in the string library, and there is no mention to this change --that would break user code. In C++03 the <em>\"referenced value shall not be modified\"</em> bit is not present and there is no ambiguity. The lack of mention in C.2.11 is not normative, but can be used as a hint that when they wrote the standard there was no intention on changing this particular behavior.</p>\n", "OwnerUserId": "36565", "LastEditorUserId": "36565", "LastEditDate": "2011-10-14T10:28:38.890", "Id": "7766135", "Score": "12", "CreationDate": "2011-10-14T10:09:15.250", "LastActivityDate": "2011-10-14T10:28:38.890"}, "bq_ids": {"n4140": {"so_7766087_18078800_0": {"section_id": 1617, "quality": 0.9473684210526315, "length": 18}, "so_7766087_7766087_2": {"section_id": 1617, "quality": 0.6428571428571429, "length": 9}}, "n3337": {"so_7766087_18078800_0": {"section_id": 1613, "quality": 0.9473684210526315, "length": 18}, "so_7766087_7766087_2": {"section_id": 1613, "quality": 0.6428571428571429, "length": 9}}, "n4659": {"so_7766087_18078800_0": {"section_id": 1770, "quality": 0.9473684210526315, "length": 18}, "so_7766087_7766087_2": {"section_id": 1770, "quality": 0.7142857142857143, "length": 10}}}, "7766087": {"CommentCount": "18", "CreationDate": "2011-10-14T10:05:05.517", "PostTypeId": "1", "AcceptedAnswerId": "7766135", "LastEditorUserId": "560648", "LastActivityDate": "2013-08-06T11:21:13.177", "LastEditDate": "2013-08-06T11:21:13.177", "ViewCount": "475", "FavoriteCount": "3", "Title": "Is it legal to modify the result of std::string::op[]?", "Id": "7766087", "Score": "23", "Body": "<p>Consider the following from C++11:</p>\n<blockquote>\n<p id=\"so_7766087_7766087_0\"><code>[C++11: 21.4.5]:</code> <strong><code>basic_string</code> element access \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 [string.access]</strong></p>\n<pre><code>const_reference operator[](size_type pos) const;\nreference       operator[](size_type pos);\n</code></pre>\n<p id=\"so_7766087_7766087_1\"><sup>1</sup> \u00a0 \u00a0 <em>Requires:</em> <code>pos &lt;= size()</code>.</p>\n<p id=\"so_7766087_7766087_2\"><sup>2</sup> \u00a0 \u00a0 <em>Returns:</em> <code>*(begin() + pos)</code> if <code>pos &lt; size()</code>, otherwise a reference to an object of type <code>T</code> with value <code>charT()</code>; the referenced value shall not be modified.</p>\n<p id=\"so_7766087_7766087_3\"><sup>3</sup> \u00a0 \u00a0 <em>Throws:</em> Nothing.</p>\n<p id=\"so_7766087_7766087_4\"><sup>4</sup> \u00a0 \u00a0 <em>Complexity:</em> constant time.</p>\n</blockquote>\n<p>This means either:</p>\n<ul>\n<li>The referenced value in the <code>pos == size()</code> case shall not be modified, or</li>\n<li>In <em>any</em> case, the referenced value returned by <code>op[]</code> shall not be modified, even for the non-<code>const</code> overload.</li>\n</ul>\n<p>The second scenario seems completely ridiculous, but I think it's what the wording most strongly implies.</p>\n<p><strong>Can we modify what we get from <code>std::string::op[]</code>, or not?</strong> And is this not rather ambiguous wording?</p>\n", "Tags": "<c++><string><std>", "OwnerUserId": "560648", "AnswerCount": "2"}});