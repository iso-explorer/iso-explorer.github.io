post_cb({"35879510": {"CommentCount": "0", "ViewCount": "219", "CreationDate": "2016-03-08T22:43:14.723", "LastActivityDate": "2016-03-09T14:44:26.890", "PostTypeId": "1", "AcceptedAnswerId": "35879765", "FavoriteCount": "2", "Title": "Alias template, partial specialization and the invalid parameter type void", "Id": "35879510", "Score": "10", "Body": "<p>Consider the following code:</p>\n<pre><code>template&lt;typename F&gt;\nstruct S;\n\ntemplate&lt;typename Ret, typename... Args&gt;\nstruct S&lt;Ret(Args...)&gt; { };\n\ntemplate&lt;typename... Args&gt;\nusing Alias = S&lt;void(Args...)&gt;;\n\nint main() {\n    S&lt;void(int)&gt; s;\n    Alias&lt;int&gt; alias;\n}\n</code></pre>\n<p>It works fine, as expected and both the line involving <code>S</code> and the one involving <code>Alias</code> define under the hood the same type <code>S&lt;void(int)&gt;</code>.</p>\n<p>Now, consider the following changes:</p>\n<pre><code>int main() {\n    S&lt;void(void)&gt; s;  // this line compiles\n    Alias&lt;void&gt; alias;  // this line does not\n}\n</code></pre>\n<p>I expected it to compile, for reasons that are similar to the ones above mentioned.<br>\nIt goes without saying that it doesn't compile because of the line involving <code>Alias</code>, instead I get the error:</br></p>\n<blockquote>\n<p id=\"so_35879510_35879510_0\">In substitution of 'template using Alias = S [with Args = {void}]'</p>\n<p id=\"so_35879510_35879510_1\">[...]</p>\n<p id=\"so_35879510_35879510_2\">error: invalid parameter type 'void'</p>\n</blockquote>\n<p>The question is pretty simple: what I missed here?  </p>\n", "Tags": "<c++><templates><c++11><void><template-aliases>", "OwnerUserId": "4987285", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_35879510_35879765_0": {"section_id": 3240, "quality": 1.0, "length": 20}, "so_35879510_35879510_2": {"section_id": 300, "quality": 0.8, "length": 4}, "so_35879510_35879765_1": {"section_id": 300, "quality": 0.8636363636363636, "length": 19}}, "n3337": {"so_35879510_35879765_0": {"section_id": 3113, "quality": 0.65, "length": 13}, "so_35879510_35879510_2": {"section_id": 291, "quality": 0.8, "length": 4}, "so_35879510_35879765_1": {"section_id": 291, "quality": 0.8636363636363636, "length": 19}}, "n4659": {"so_35879510_35879765_0": {"section_id": 3996, "quality": 1.0, "length": 20}, "so_35879510_35879510_2": {"section_id": 307, "quality": 0.8, "length": 4}, "so_35879510_35879765_1": {"section_id": 307, "quality": 0.8636363636363636, "length": 19}}}, "35879765": {"ParentId": "35879510", "LastEditDate": "2016-03-09T14:44:26.890", "CommentCount": "8", "CreationDate": "2016-03-08T23:01:07.603", "OwnerUserId": "2069064", "LastEditorUserId": "2069064", "PostTypeId": "2", "Id": "35879765", "Score": "5", "Body": "<p>From [dcl.fct], emphasis mine:</p>\n<blockquote>\n<p id=\"so_35879510_35879765_0\">A parameter list consisting of a single unnamed parameter of <strong>non-dependent</strong> type <code>void</code> is equivalent to an empty parameter list. Except for this special case, a parameter shall not have type <em>cv</em> <code>void</code>.</p>\n</blockquote>\n<p>In this case, <code>Args...</code> is a dependent type pack, so <code>void</code> is not allowed there. This idea is repeated in a note in [temp.deduct]:</p>\n<blockquote>\n<p id=\"so_35879510_35879765_1\"><em>[ Note:</em> Type deduction may fail for the following reasons:<br>\n  \u2014 [...]<br>\n  \u2014 Attempting to create a function type in which a parameter has a type of <code>void</code>, or in which the return\n  type is a function type or array type.<br>\n  \u2014 [...]<br>\n<em>\u2014end note ]</em></br></br></br></br></p>\n</blockquote>\n<p>Note that <code>S&lt;void(void)&gt;</code> compiles since <code>void(void)</code> is non-dependent and is equivalent to <code>void()</code>, so <code>Ret(Args...)</code> is never deduced to have <code>void</code> in the parameter list - it's deduced with <code>Args...</code> empty. </p>\n<hr/>\n<p>At least there's a simple workaround in that you can just write <code>Alias&lt;&gt;</code>.</p>\n", "LastActivityDate": "2016-03-09T14:44:26.890"}});