post_cb({"26883820": {"Id": "26883820", "PostTypeId": "2", "Body": "<p><code>throw</code> (without an exception object) will rethrow the current exception. (must be inside catch block, otherwise <a href=\"http://en.cppreference.com/w/cpp/error/terminate\" rel=\"nofollow\">std::terminate</a> is called). Because you changed the reference of current exception object, you don't need to explicilty throw the object and <strong>throw re-throw the modified exception</strong> and no new temporary object is created.</p>\n", "LastEditorUserId": "4188894", "LastActivityDate": "2014-12-09T07:11:52.337", "Score": "3", "CreationDate": "2014-11-12T09:48:10.017", "ParentId": "26883615", "CommentCount": "6", "OwnerUserId": "4188894", "LastEditDate": "2014-12-09T07:11:52.337"}, "26883787": {"Id": "26883787", "PostTypeId": "2", "Body": "<p>Actually, the standard is very precise here. [except.handle]/17:</p>\n<blockquote>\n<p id=\"so_26883615_26883787_0\">When the handler declares a reference to a non-constant object, <strong>any\n  changes to the referenced object are changes to the temporary object\n  initialized when the <em>throw-expression</em> was executed and will have\n  effect should that object be rethrown</strong>.</p>\n</blockquote>\n<p>And [except.throw]/8:</p>\n<blockquote>\n<p id=\"so_26883615_26883787_1\">A <em>throw-expression</em> with no operand rethrows the currently handled\n  exception (15.3). </p>\n</blockquote>\n", "LastEditorUserId": "3647361", "LastActivityDate": "2014-11-19T14:08:54.077", "Score": "57", "CreationDate": "2014-11-12T09:46:31.330", "ParentId": "26883615", "CommentCount": "1", "OwnerUserId": "3647361", "LastEditDate": "2014-11-19T14:08:54.077"}, "26883786": {"Id": "26883786", "PostTypeId": "2", "Body": "<p>C++11 \u00a715.1/8:</p>\n<blockquote>\n<p id=\"so_26883615_26883786_0\"><strong>\u201d</strong> A <em>throw-expression</em> with no operand rethrows the currently handled exception (15.3). The exception is\n  reactivated with the existing temporary; no new temporary exception object is created.</p>\n</blockquote>\n", "LastEditorUserId": "3647361", "LastActivityDate": "2014-11-12T11:28:49.370", "Score": "27", "CreationDate": "2014-11-12T09:46:24.110", "ParentId": "26883615", "CommentCount": "5", "OwnerUserId": "464581", "LastEditDate": "2014-11-12T11:28:49.370"}, "bq_ids": {"n4140": {"so_26883615_26883787_1": {"length": 6, "quality": 0.8571428571428571, "section_id": 3341}, "so_26883615_26883787_0": {"length": 15, "quality": 0.6818181818181818, "section_id": 3362}, "so_26883615_26883786_0": {"length": 13, "quality": 0.7647058823529411, "section_id": 3341}}, "n3337": {"so_26883615_26883787_1": {"length": 6, "quality": 0.8571428571428571, "section_id": 3211}, "so_26883615_26883787_0": {"length": 22, "quality": 1.0, "section_id": 3232}, "so_26883615_26883786_0": {"length": 15, "quality": 0.8823529411764706, "section_id": 3211}}, "n4659": {"so_26883615_26883787_1": {"length": 6, "quality": 0.8571428571428571, "section_id": 7673}, "so_26883615_26883787_0": {"length": 15, "quality": 0.6818181818181818, "section_id": 4128}, "so_26883615_26883786_0": {"length": 13, "quality": 0.7647058823529411, "section_id": 7673}}}, "26883615": {"ViewCount": "2358", "Body": "<p>I have a function <code>foo</code> that can throw a <code>bar</code> exception.</p>\n<p>In another function I call <code>foo</code> but I have the ability to add some more detail to the <code>bar</code> exception if thrown. (I'd rather not pass such information as a parameter to <code>foo</code> as it doesn't really belong there due to the generic nature of that function.)</p>\n<p>So I do this in the caller:</p>\n<pre><code>try {\n    foo();\n} catch (bar&amp; ex){\n    ex.addSomeMoreInformation(...);\n    throw;\n}\n</code></pre>\n<p>Will <code>throw</code> re-throw the modified exception or do I need to use <code>throw ex;</code>? The latter would presumably take a value copy so I'd rather not do that. Would <code>throw</code> take a value copy too? I suspect it wouldn't.</p>\n<p>(I'm aware I could verify but I'm concerned about stumbling on an unspecified or undefined construct so would like to know for sure).</p>\n", "AcceptedAnswerId": "26883786", "Title": "Using `throw;` on a modified exception", "CreationDate": "2014-11-12T09:38:01.693", "Id": "26883615", "CommentCount": "0", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2016-03-18T10:36:28.677", "LastEditorUserId": "3647361", "LastActivityDate": "2016-03-18T10:36:28.677", "Score": "56", "OwnerUserId": "3415258", "Tags": "<c++><exception><exception-handling><language-lawyer><throw>", "AnswerCount": "5"}, "26883884": {"Id": "26883884", "PostTypeId": "2", "Body": "<p>In this case you should use <code>throw</code> to get the desired behavior...i.e throw would throw the modified exception as the exception was caught by reference.</p>\n<p>Let me try to make difference between these throw explicit through examples:-</p>\n<pre><code>class exception\n{\n};\n\nclass MyException : public exception\n{\n};\n\nvoid func()\n{\n  try\n  {\n    throw MyException();\n  }\n  catch( exception&amp; e )\n  {\n    //do some modification.\n    throw;                    //Statement_1\n    throw e;                  //Statement_2\n   }\n}\n</code></pre>\n<p>Statment_1:-</p>\n<p>What throw does is it just re-throws what the current exception is i.e it doesn't make further copies ( as was made when exception was thrown initially). So if you make any changes to the caught exception here...it would also be there in the caller routine.</p>\n<p>Statement_2:-</p>\n<p>This is throwing the \"exception\" which was originally caught as MyException i.e it would make the copy again. So, just forget about changes you made it won't even passes or*ginal exception to the caller. It throws \"exception\" to the caller routine.</p>\n<p>Hope I am clear ( and RIGHT ON TRACK OF C++ STANDARD )enough...</p>\n", "LastEditorUserId": "4047092", "LastActivityDate": "2014-11-12T10:00:12.287", "Score": "3", "CreationDate": "2014-11-12T09:50:42.697", "ParentId": "26883615", "CommentCount": "3", "OwnerUserId": "4047092", "LastEditDate": "2014-11-12T10:00:12.287"}, "26883930": {"Id": "26883930", "PostTypeId": "2", "Body": "<p>according to <a href=\"http://en.cppreference.com/w/cpp/language/throw\" rel=\"nofollow\">this</a>,throwing exceptions in c++ can be done in two ways:</p>\n<ol>\n<li><strong>throw</strong> <em>expression</em>: First, copy-initializes the exception object from expression (this may call the move constructor for rvalue expression, and the copy/move may be subject to copy elision), then transfers control to the exception handler with the matching type whose compound statement or member initializer list was most recently entered and not exited by this thread of execution.</li>\n<li><strong>throw</strong>: Rethrows the currently handled exception. Abandons the execution of the current catch block and passes control to the next matching exception handler (but not to another catch clause after the same try block: its compound-statement is considered to have been 'exited'), reusing the existing exception object: no new objects are made. This form is only allowed when an exception is presently being handled (it calls std::terminate if used otherwise). The catch clause associated with a function-try-block must exit via rethrowing if used on a constructor.</li>\n</ol>\n<p>So to underline my answer, <strong>throw</strong> should be fine in your case.</p>\n", "LastActivityDate": "2014-11-12T09:52:49.703", "CommentCount": "0", "CreationDate": "2014-11-12T09:52:49.703", "ParentId": "26883615", "Score": "2", "OwnerUserId": "2978901"}});