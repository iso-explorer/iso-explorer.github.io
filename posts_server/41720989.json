post_cb({"41721337": {"ParentId": "41720989", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The C++14 standard (<em>\u00a75.1.2</em>) says:</p>\n<blockquote>\n<p id=\"so_41720989_41721337_0\"><strong>The closure type for a non-generic lambda-expression with no</strong>\n<strong>lambda-capture has a public non-virtual non-explicit const conversion</strong>\n<strong>function to pointer to function</strong> with C++ language linkage (7.5)\n  having the same parameter and return types as the closure type\u2019s\n  function call operator. The value returned by this conversion function\n  shall be the address of a function that, when invoked, has the same\n  effect as invoking the closure type\u2019s function call operator.</p>\n</blockquote>\n<p>Since a function pointer is implicitly convertible to <code>bool</code>, you get the result you have shown. This is perfectly legal.</p>\n<p>MSVC doesn't compile this because this conversion operator is overloaded with different calling conventions (<code>__stdcall</code>, <code>__cdecl</code>, etc).\nWhen compiling for <code>x64</code> all those calling conventions are not used, so there's just one conversion operator and it compiles fine.</p>\n", "OwnerUserId": "5212827", "LastEditorUserId": "5212827", "LastEditDate": "2017-02-05T21:09:58.620", "Id": "41721337", "Score": "43", "CreationDate": "2017-01-18T13:56:22.657", "LastActivityDate": "2017-02-05T21:09:58.620"}, "41720989": {"CommentCount": "4", "AcceptedAnswerId": "41721337", "PostTypeId": "1", "LastEditorUserId": "964243", "CreationDate": "2017-01-18T13:41:12.547", "LastActivityDate": "2017-02-05T21:09:58.620", "LastEditDate": "2017-01-18T20:01:21.467", "ViewCount": "1668", "FavoriteCount": "1", "Title": "Why does a lambda convert to a bool whose value is true?", "Id": "41720989", "Score": "46", "Body": "<pre><code>#include &lt;iostream&gt;\n\nvoid IsTrue(const bool value) {\n  if (value) {\n    std::cout &lt;&lt; \"value is True!\\n\";\n  }\n}\n\nint main()\n{\n  IsTrue([]() { ; /* some lambda */ });\n\n  return 0;\n}\n</code></pre>\n<p>Output:</p>\n<pre><code>value is True!\n</code></pre>\n<p>Why does the lambda evaluate to <code>true</code> on GCC &amp; Clang? MSVC cannot build this (cannot convert lambda to bool).</p>\n<p>Is it a compiler bug? Or which paragraph of the standard allows this?</p>\n", "Tags": "<c++><lambda><boolean><language-lawyer>", "OwnerUserId": "1555823", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_41720989_41721337_0": {"section_id": 5965, "quality": 0.9534883720930233, "length": 41}}, "n3337": {"so_41720989_41721337_0": {"section_id": 5734, "quality": 0.8837209302325582, "length": 38}}, "n4659": {"so_41720989_41721337_0": {"section_id": 7456, "quality": 0.8604651162790697, "length": 37}}}});