post_cb({"31495054": {"Id": "31495054", "PostTypeId": "2", "Body": "<p>Using-directives make names visible <em>in the scope in which they appear</em>. For example, [basic.scope.namespace]p1</p>\n<blockquote>\n<p id=\"so_31494906_31495054_0\">for each <em>using-directive</em> that nominates the member\u2019s namespace, the member\u2019s potential scope includes that portion of the potential scope of the <em>using-directive</em> that follows the member\u2019s point of declaration</p>\n</blockquote>\n<p>where <em>the scope of a name</em> is a part of the program where that name (the declaration of that name) can be found via <em>unqualified lookup</em>.</p>\n<p>Similarly, in [namespace.udir]p2,</p>\n<blockquote>\n<p id=\"so_31494906_31495054_1\">A <em>using-directive</em> specifies that the names in the nominated namespace can be used in the scope in which the <em>using-directive</em> appears after the <em>using-directive</em>.</p>\n</blockquote>\n<p>which basically says the same thing as the above quote.</p>\n<p>In the OP, the <em>using-directive</em> appears in namespace-scope of namespace Y; <code>main</code> is outside that scope, hence the <em>using-directive</em> has no effect on name lookup performed inside <code>main</code>.</p>\n", "LastActivityDate": "2015-07-18T19:59:12.883", "Score": "1", "CreationDate": "2015-07-18T19:59:12.883", "ParentId": "31494906", "CommentCount": "2", "OwnerUserId": "420683"}, "31494906": {"ViewCount": "40", "Body": "<p>I'm a bit confused about the implications of [namespace.udir]p2. Consider the following program:</p>\n<pre><code>namespace X { int i = 1; }\n\nnamespace Y { using namespace X; }\n\nint main() { i = 2; }\n</code></pre>\n<p>In it name-lookup for <code>i</code> in main fails (i tried with GCC, Clang and visual c++). This does not seem to agree with [namespace.udir]p2 (<a href=\"http://eel.is/c++draft/dcl.dcl#namespace.udir-2\" rel=\"nofollow\">http://eel.is/c++draft/dcl.dcl#namespace.udir-2</a>):</p>\n<blockquote>\n<p id=\"so_31494906_31494906_0\">A using-directive specifies that the names in the nominated namespace\n  can be used in the scope in which the using-directive appears after\n  the using-directive. During unqualified name lookup\n  ([basic.lookup.unqual]), <strong>the names appear as if they were declared in\n  the nearest enclosing namespace which contains both the\n  using-directive and the nominated namespace.</strong> [ Note: In this context,\n  \u201ccontains\u201d means \u201ccontains directly or indirectly\u201d.  \u2014 end note ]</p>\n</blockquote>\n<p>With my program I'm applying this rule for the name <code>i</code>, declared by <code>int i = 1;</code> in <code>X</code>, the following way:</p>\n<ul>\n<li><p>The using-directive: <code>using namespace X;</code></p></li>\n<li><p>The nominated namespace: <code>X</code></p></li>\n<li><p>The nearest enclosing namespace: The global namespace</p></li>\n</ul>\n<p>Doesn't this imply that the unqualified name-lookup of <code>i</code> in <code>main</code> should find <code>X::i</code>? Why do I not get this result with any of the three compilers that I tried?</p>\n", "AcceptedAnswerId": "31495054", "Title": "How to interpret the rule [namespace.udir]p2 in the c++ standard?", "CreationDate": "2015-07-18T19:43:35.763", "Id": "31494906", "CommentCount": "1", "PostTypeId": "1", "LastActivityDate": "2015-07-18T19:59:12.883", "Score": "1", "OwnerUserId": "1272610", "Tags": "<c++><language-lawyer><using-directives><name-lookup>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_31494906_31494906_0": {"length": 34, "quality": 0.8947368421052632, "section_id": 5510}, "so_31494906_31495054_1": {"length": 11, "quality": 1.0, "section_id": 5510}, "so_31494906_31495054_0": {"length": 17, "quality": 1.0, "section_id": 7067}}, "n3337": {"so_31494906_31494906_0": {"length": 34, "quality": 0.8947368421052632, "section_id": 5296}, "so_31494906_31495054_1": {"length": 11, "quality": 1.0, "section_id": 5296}, "so_31494906_31495054_0": {"length": 17, "quality": 1.0, "section_id": 6811}}, "n4659": {"so_31494906_31494906_0": {"length": 34, "quality": 0.8947368421052632, "section_id": 6945}, "so_31494906_31495054_1": {"length": 11, "quality": 1.0, "section_id": 6945}, "so_31494906_31495054_0": {"length": 17, "quality": 1.0, "section_id": 8564}}}});