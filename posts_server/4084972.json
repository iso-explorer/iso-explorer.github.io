post_cb({"4084972": {"ViewCount": "2924", "Body": "<p>In my example below, why do I have to fully qualify the name of the free function in the cpp to avoid linker errors and why does it work for the class function without? Can you explain the difference?</p>\n<p><em><strong>ctest.h:</strong></em></p>\n<pre><code>namespace Test\n{\n    int FreeFunction();\n\n    class CTest\n    {\n        public:\n            CTest();\n            ~CTest();\n    };\n}\n</code></pre>\n<p><em><strong>ctest.cpp:</strong></em></p>\n<pre><code>#include \"ctest.h\"\n\nusing namespace Test;\n\n// int FreeFunction()     -&gt; undefined reference error\nint Test::FreeFunction()  -&gt; works just fine\n{\n    return 0;\n}\n\nCTest::CTest()                -&gt; no need to fully qualify name, i.e. Test::CTest\n{}\n\nCTest::~CTest()\n{}\n</code></pre>\n<p>Thanks for your time &amp; help.</p>\n", "AcceptedAnswerId": "4084996", "Title": "namespaces, classes and free functions - when do you need fully qualified names", "CreationDate": "2010-11-03T07:34:12.813", "Id": "4084972", "CommentCount": "2", "FavoriteCount": "6", "PostTypeId": "1", "LastEditDate": "2010-11-03T09:09:10.783", "LastEditorUserId": "220636", "LastActivityDate": "2010-11-03T09:44:13.353", "Score": "7", "OwnerUserId": "220636", "Tags": "<c++><namespaces><declaration><definition><fully-qualified-naming>", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_4084972_4084996_0": {"length": 33, "quality": 0.8461538461538461, "section_id": 7034}}, "n3337": {"so_4084972_4084996_0": {"length": 33, "quality": 0.8461538461538461, "section_id": 6780}}, "n4659": {"so_4084972_4084996_0": {"length": 33, "quality": 0.8461538461538461, "section_id": 8531}}}, "4085022": {"Id": "4085022", "PostTypeId": "2", "Body": "<p>While <code>FreeFunction</code> will resolve to <code>Test::FreeFunction</code> if you <em>refer to it or call it</em> after providing the <code>using namespace Test;</code> line, as far as <em>defining</em> the function goes, the compiler has no way to know if you're defining an <em>entirely new function</em> <code>FreeFunction</code> outside of any namespace, or whether you're defining the already declared <code>Test::FreeFunction</code>. The compiler defaults to thinking that you're defining an entirely new function.</p>\n<p>For <code>CTest::CTest</code>, however, you're already <em>referring to</em> the class <code>Test::CTest</code>, and since there's no class or namespace <code>CTest</code> outside of the <code>Test</code> namespace, well, the reference to <code>CTest::anything</code> is unambiguous. So it knows that the constructor and destructor definitions refer to the in-namespace class <code>CTest</code>.</p>\n<p>I think it's a small price to pay, to have to write <code>Test::FreeFunction</code>. </p>\n<p>Hope this helps!</p>\n", "LastActivityDate": "2010-11-03T07:45:11.547", "CommentCount": "0", "CreationDate": "2010-11-03T07:45:11.547", "ParentId": "4084972", "Score": "1", "OwnerUserId": "298073"}, "4085021": {"Id": "4085021", "PostTypeId": "2", "Body": "<p>If you don't qualify FreeFunction definition, the compiler does not know for sure anther you want to provide implementation for the previously forward-declared Test::FreeFunction or for a separate FreeFunction in the current namespace.</p>\n<p>On the other hand, there's only one way to resolve the name CTest - as the class definition from the Test namespace. Thus, there's no need to fully qualify it.</p>\n<p>However, if the CTest name resolution is ambiguous (say there's another CTest class in the current namespace as well), you will have to fully qualify the method declarations.</p>\n", "LastActivityDate": "2010-11-03T07:44:39.643", "CommentCount": "0", "CreationDate": "2010-11-03T07:44:39.643", "ParentId": "4084972", "Score": "1", "OwnerUserId": "17028"}, "4084996": {"Id": "4084996", "PostTypeId": "2", "Body": "<pre><code>int FreeFunction(void);  \n</code></pre>\n<p>is just a declaration whereas the below is a definition.</p>\n<pre><code>class CTest \n{ \n    public: \n        CTest(); \n        ~CTest(); \n}; \n</code></pre>\n<p>If you want to provide <code>definition for an already declared entity in a namespace</code> (e.g. in an enclosing namespace), it has to be fully qualified name.</p>\n<p>EDIT2:</p>\n<p>Here is something that would give you some more clarity. Note no using directive in this code.</p>\n<pre><code>namespace Test { \n    int FreeFunction(void);   // declare\n\n    class CTest;              // declare\n} \n\nint Test::FreeFunction(){return 0;} // define\nclass Test::CTest{            // define\n};\n\nint main(){}\n</code></pre>\n<p>EDIT 3: Declaration vs Definition (C++0x)\n$3.1/2- </p>\n<blockquote>\n<p id=\"so_4084972_4084996_0\">A declaration is a definition <strong>unless\n  it declares a function without\n  specifying the function\u2019s body\n  (8.4)</strong>, it contains the extern\n  specifier (7.1.1) or a\n  linkage-specification25 (7.5) and\n  neither an initializer nor a\n  function-body, it declares a static\n  data member in a class definition\n  (9.4), <strong>it is a class name\n  declaration (9.1)</strong>, it is an\n  opaque-enum-declaration (7.2), or it\n  is a typedef declaration (7.1.3), a\n  using-declaration (7.3.3), a\n  static_assert-declaration (Clause 7),\n  an attribute-declaration (Clause 7),\n  an empty-declaration (Clause 7), or a\n  using-directive (7.3.4).</p>\n</blockquote>\n", "LastEditorUserId": "418110", "LastActivityDate": "2010-11-03T07:58:38.827", "Score": "10", "CreationDate": "2010-11-03T07:39:52.333", "ParentId": "4084972", "CommentCount": "3", "OwnerUserId": "418110", "LastEditDate": "2010-11-03T07:58:38.827"}, "4085755": {"Id": "4085755", "PostTypeId": "2", "Body": "<p>When implementing a function it is usually preferable, I find, to open the namespace. Remember you can re-open them...</p>\n<pre><code>// in Test.cpp\nnamespace Test\n{\n   int FreeFunction()\n   {\n       return 0;\n   }\n}\n</code></pre>\n", "LastActivityDate": "2010-11-03T09:44:13.353", "CommentCount": "0", "CreationDate": "2010-11-03T09:44:13.353", "ParentId": "4084972", "Score": "0", "OwnerUserId": "442284"}});