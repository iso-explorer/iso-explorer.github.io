post_cb({"bq_ids": {"n4140": {"so_23731821_23731821_0": {"length": 20, "quality": 1.0, "section_id": 7062}}, "n3337": {"so_23731821_23731821_0": {"length": 20, "quality": 1.0, "section_id": 6806}}, "n4659": {"so_23731821_23731821_0": {"length": 20, "quality": 1.0, "section_id": 8559}}}, "23731868": {"Id": "23731868", "PostTypeId": "2", "Body": "<p>A function try-block looks like this:</p>\n<pre><code>void f()\ntry\n{\n    // Some code that might throw\n}\ncatch(std::exception&amp; e)\n{\n    // Exception caught\n}\n</code></pre>\n<p>What you have is a normal function with a normal try-catch block inside of it.</p>\n<p>When a function is defined like this, it's quite obvious that variables declared in the function (that is, declared in side the <code>try</code> block) will not exist outside of the <code>try</code> block.</p>\n", "LastActivityDate": "2014-05-19T07:18:14.877", "CommentCount": "4", "CreationDate": "2014-05-19T07:18:14.877", "ParentId": "23731821", "Score": "1", "OwnerUserId": "440558"}, "23731870": {"Id": "23731870", "PostTypeId": "2", "Body": "<p>This is not a function-try-block which has a form of:</p>\n<pre><code>int f()\ntry {\n    // ... logic\n}\ncatch ( /* exception specification */) {\n    // handle errors\n}\n</code></pre>\n<p>In your case of an ordinary function the body of the function is from { to }:</p>\n<pre><code>void foo()\n{\n    // body\n}\n</code></pre>\n", "LastEditorUserId": "1141471", "LastActivityDate": "2014-05-19T07:26:26.770", "Score": "1", "CreationDate": "2014-05-19T07:18:21.130", "ParentId": "23731821", "CommentCount": "0", "OwnerUserId": "1141471", "LastEditDate": "2014-05-19T07:26:26.770"}, "23731821": {"ViewCount": "31", "Body": "<p>The following 3.3.3/2 quote:</p>\n<blockquote>\n<p id=\"so_23731821_23731821_0\">If the function has a function-try-block the potential scope of a\n  parameter or of a function-local predefined variable ends at the end\n  of the last associated handler, otherwise it ends at the end of the\n  outermost block of the function definition.</p>\n</blockquote>\n<p>Consider the following example:</p>\n<pre><code>void foo()\n{\n    int a; //function-local predefined variable\n    std::cin &gt;&gt; a;\n    int z;\n    try\n    {\n        z=5/a;\n        std::cout &lt;&lt; z &lt;&lt; \"\\n\";\n\n    }\n    catch(std::logic_error e)\n    {\n        std::cout &lt;&lt; \"Division by zero\";\n    } //end of the last associated handler\n    std::cout &lt;&lt; a; //a is still visible\n}\n</code></pre>\n<p>Why <code>a</code> is still visible after the last associated handler?</p>\n", "Title": "Variable after the last associated handler", "CreationDate": "2014-05-19T07:15:23.740", "LastActivityDate": "2014-05-19T07:26:26.770", "CommentCount": "2", "PostTypeId": "1", "OwnerDisplayName": "user2889159", "Id": "23731821", "Score": "2", "Tags": "<c++><function><try-catch>", "AnswerCount": "2"}});