post_cb({"38878818": {"ParentId": "38878454", "LastEditDate": "2016-08-10T16:58:38.890", "CommentCount": "2", "CreationDate": "2016-08-10T16:22:13.783", "Score": "11", "LastEditorUserId": "567292", "PostTypeId": "2", "Id": "38878818", "OwnerUserId": "567292", "Body": "<p>It's a <a href=\"https://llvm.org/bugs/show_bug.cgi?id=28927\">bug in libc++</a>; <code>std::crbegin</code> is delegating to <code>rbegin</code>, but by calling it unqualified it's picking up <a href=\"http://www.boost.org/doc/libs/1_61_0/boost/range/rbegin.hpp\"><code>boost::rbegin</code></a> (<a href=\"http://www.boost.org/doc/libs/1_61_0/libs/range/doc/html/range/reference/concept_implementation/semantics/functions.html\">documentation</a>):</p>\n<pre><code>template &lt;class _Cp&gt;\ninline _LIBCPP_INLINE_VISIBILITY\nauto crbegin(const _Cp&amp; __c) -&gt; decltype(rbegin(__c))\n{\n    return rbegin(__c);\n    //     ^-- unqualified, allows ADL\n}\n</code></pre>\n<p>This is contrary to <strong>[iterator.range]</strong>, which says that <code>crbegin</code> should delegate to <code>std::rbegin</code> only:</p>\n<blockquote>\n<p id=\"so_38878454_38878818_0\"><code>template &lt;class C&gt; constexpr auto crbegin(const C&amp; c) -&gt; decltype(std::rbegin(c));</code></p>\n<p id=\"so_38878454_38878818_1\">14 -  <em>Returns:</em> <code>std::rbegin(c)</code>.</p>\n</blockquote>\n<p>Libc++'s implementations of <code>cbegin</code>, <code>cend</code> and <code>crend</code> have the same bug.</p>\n", "LastActivityDate": "2016-08-10T16:58:38.890"}, "38878454": {"CommentCount": "5", "ViewCount": "212", "PostTypeId": "1", "LastEditorUserId": "2069064", "CreationDate": "2016-08-10T16:04:01.873", "LastActivityDate": "2016-08-10T16:58:38.890", "Title": "Clang vs gcc std::crbegin with boost::iterator_range", "AcceptedAnswerId": "38878818", "LastEditDate": "2016-08-10T16:31:59.143", "Id": "38878454", "Score": "6", "Body": "<p>Clang 3.8.1 with libc++ compiles the following program:</p>\n<pre><code>#include &lt;vector&gt;\n#include &lt;iterator&gt;\n#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\n\n#include &lt;boost/range/iterator_range.hpp&gt;\n\nint main()\n{\n    const std::vector&lt;int&gt; v {1, 2, 3};\n\n    const auto range = boost::make_iterator_range(v);\n\n    std::copy(std::crbegin(range), std::crend(range), std::ostream_iterator&lt;int&gt; {std::cout, \" \"});\n    std::cout &lt;&lt; std::endl;\n\n    return 0;\n}\n</code></pre>\n<p>But gcc 6.1.0 with libstdc++ does not. First line of gcc error is:</p>\n<pre><code>error: no matching function for call to 'crbegin(const boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;const int*, std::vector&lt;int&gt; &gt; &gt;&amp;\n</code></pre>\n<p>Who is right?</p>\n<p><strong>Note</strong>: Boost version 1.61</p>\n", "Tags": "<c++><gcc><boost><clang><c++14>", "OwnerUserId": "2970186", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_38878454_38878818_0": {"section_id": 5756, "quality": 0.8333333333333334, "length": 5}}, "n4659": {"so_38878454_38878818_0": {"section_id": 7203, "quality": 1.0, "length": 6}}}});