post_cb({"bq_ids": {"n4140": {"so_25576495_25576588_1": {"length": 14, "quality": 0.8235294117647058, "section_id": 7049}, "so_25576495_25576588_2": {"length": 7, "quality": 0.7777777777777778, "section_id": 7049}}, "n3337": {"so_25576495_25576588_1": {"length": 14, "quality": 0.8235294117647058, "section_id": 6794}, "so_25576495_25576588_2": {"length": 7, "quality": 0.7777777777777778, "section_id": 6794}}, "n4659": {"so_25576495_25576588_1": {"length": 14, "quality": 0.8235294117647058, "section_id": 8546}, "so_25576495_25576588_2": {"length": 7, "quality": 0.7777777777777778, "section_id": 8546}}}, "25576727": {"Id": "25576727", "PostTypeId": "2", "Body": "<p>If the first variable is defined in a namespace for example in the global namespace then you can write using its qualified name</p>\n<pre><code>int i = 7;\n\nint main()\n{\n   int i = ::i;\n   //...\n}\n</code></pre>\n", "LastActivityDate": "2014-08-29T21:49:17.183", "CommentCount": "1", "CreationDate": "2014-08-29T21:49:17.183", "ParentId": "25576495", "Score": "3", "OwnerUserId": "2877241"}, "25576495": {"ViewCount": "315", "Body": "<p>Is there anything in the standard that defines initialing a variable from the variable it shadows?</p>\n<p>For example:</p>\n<pre><code>int i = 7;\n{\n    int i = i;\n}\n</code></pre>\n<p>Visual Studio 2013 allows this without a warning and works as expected. The inner <code>i</code> variable is 7. Clang and GCC however give me a warning about a initializing variable initializing from itself will be uninitialized.</p>\n", "AcceptedAnswerId": "25576588", "Title": "Initializing a shadowing variable", "CreationDate": "2014-08-29T21:26:22.533", "Id": "25576495", "CommentCount": "3", "FavoriteCount": "0", "PostTypeId": "1", "LastActivityDate": "2014-08-29T21:49:17.183", "Score": "2", "OwnerUserId": "785251", "Tags": "<c++><language-lawyer>", "AnswerCount": "2"}, "25576588": {"Id": "25576588", "PostTypeId": "2", "Body": "<p>The standard has this to say:</p>\n<blockquote>\n<p id=\"so_25576495_25576588_0\"><strong>3.3.2</strong> Point of declaration <strong>[basic.scope.pdecl]</strong></p>\n<p id=\"so_25576495_25576588_1\"><strong>1</strong> The <em>point of declaration</em> for a name is immediately after its complete declarator\n  (Clause 8) and before its <em>initializer</em> (if any), except as noted below.\n  [ Example:</p>\n<pre><code>int x = 12;\n{ int x = x; }\n</code></pre>\n<p id=\"so_25576495_25576588_2\">Here the second x is initialized\n  with its own (indeterminate) value. \u2014end example ]</p>\n</blockquote>\n<p>This is precisely your case. The program exhibits undefined behavior by way of accessing an uninitialized object.</p>\n<p>My copy of VS2013 reports <code>error C4700: uninitialized local variable 'i' used</code> for this code. Not sure why your copy behaves differently.</p>\n", "LastActivityDate": "2014-08-29T21:34:47.160", "CommentCount": "1", "CreationDate": "2014-08-29T21:34:47.160", "ParentId": "25576495", "Score": "8", "OwnerUserId": "1670129"}});