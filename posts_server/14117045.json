post_cb({"bq_ids": {"n4140": {"so_14117045_14117166_0": {"length": 22, "quality": 1.0, "section_id": 391}}, "n3337": {"so_14117045_14117166_0": {"length": 22, "quality": 1.0, "section_id": 382}}, "n4659": {"so_14117045_14117166_0": {"length": 22, "quality": 1.0, "section_id": 408}}}, "14117166": {"Id": "14117166", "PostTypeId": "2", "Body": "<p>Section 12.3.2:</p>\n<blockquote>\n<p id=\"so_14117045_14117166_0\">A conversion function is never used to convert a (possibly cv-qualified) object to the (possibly cv-qualified) same object type (or a reference to it), to a (possibly cv-qualified) base class of that type (or a reference to it), or to (possibly cv-qualified) void.</p>\n</blockquote>\n<p>Also, with few exceptions, the choice of <code>public</code>/<code>protected</code>/<code>private</code> rarely changes what a program does, just whether a program is valid or not.  So initialization directly binds a reference to subobject when possible rather than using a user-defined conversion, and after that choice is made, the compiler checks for access.</p>\n", "LastActivityDate": "2013-01-02T05:16:37.670", "CommentCount": "1", "CreationDate": "2013-01-02T05:16:37.670", "ParentId": "14117045", "Score": "2", "OwnerUserId": "459640"}, "14117136": {"Id": "14117136", "PostTypeId": "2", "Body": "<p>When you write <code>a = b;</code> in the <code>main()</code> or outside the class (in the world), then the conversion happens there, not inside the class, and the accessibility rules apply at the point of conversion (which is outside the class). For such conversion to take place, the base class needs to be accessible from outside (the world).</p>\n<p>In your case, since <code>B</code> is derived from <code>A</code> using <code>protected</code> keyword, which means the world cannot access <code>A</code> subobject of <code>b</code>, because of which it cannot convert <code>B</code> into <code>A</code>. It all happens because the base of <code>B</code> (which is <code>A</code>) is inaccessible from the world due to <code>protected</code> inheritance. Make it <code>public</code>, the conversion will happen in the world as well.</p>\n<p>Now, this question:</p>\n<blockquote>\n<p id=\"so_14117045_14117136_0\">Why isn't the user-conversion-function used instead of inheritance-conversion?</p>\n</blockquote>\n<p>Since inheritance-conversion is preferred over user-defined conversion function, you can think of <em>this preference</em> as the first step, and the second step to be the rule of accessibility, where the conversion fails!</p>\n", "LastEditorUserId": "183120", "LastActivityDate": "2013-01-02T05:37:49.290", "Score": "4", "CreationDate": "2013-01-02T05:12:42.927", "ParentId": "14117045", "CommentCount": "3", "OwnerUserId": "415784", "LastEditDate": "2013-01-02T05:37:49.290"}, "14117045": {"ViewCount": "392", "Body": "<p>The picture below shows three independent tests for this problem :</p>\n<p>( I just focus on the declarations but not the definitions of the functions ~~ )</p>\n<p><img alt=\"http://i.stack.imgur.com/wYtA6.png\" src=\"https://i.stack.imgur.com/YqlVN.png\"/></p>\n<p>I wonder why <strong>the right one got an error of \" 'A' is an inaccessible base of 'B' \" .</strong></p>\n<p>Why does the g++ seem to initialize the reference to the base by derived class ( which cause the error due to the protected inheritance ) , </p>\n<p>rather than use conversion operator like the middle one to convert B to A and pass in ( which is 0 error and 0 warning ) ?</p>\n<p>here is the code of the right one in the picture :</p>\n<pre><code>struct A {\n    A &amp;operator=( const A &amp; ) { return *this;  }\n}a;\n\nstruct B : protected A {\n    operator A() {  return A();  };\n}b;\n\nint main( void )\n{\n    a = b;\n    return 0;\n}\n</code></pre>\n<p>Thanks for your help !~</p>\n", "AcceptedAnswerId": "14117166", "Title": "type conversion between inherited classes when passing an argument in C++", "CreationDate": "2013-01-02T05:02:08.120", "Id": "14117045", "CommentCount": "0", "LastEditDate": "2015-02-18T03:16:51.590", "PostTypeId": "1", "LastEditorUserId": "1941881", "LastActivityDate": "2015-02-18T03:16:51.590", "Score": "3", "OwnerUserId": "1941881", "Tags": "<c++><inheritance><reference><type-conversion>", "AnswerCount": "2"}});