post_cb({"32934179": {"CommentCount": "5", "ViewCount": "93", "PostTypeId": "1", "LastEditorUserId": "4805117", "CreationDate": "2015-10-04T13:47:31.913", "LastActivityDate": "2015-10-04T14:21:08.780", "Title": "Force member variable to be constructed before base class", "LastEditDate": "2015-10-04T14:21:08.780", "Id": "32934179", "Score": "2", "Body": "<p>I'm currently facing following scenario:</p>\n<pre><code>class foo \n{\npublic:\n    foo ( /* some parameters */ );\n};\n\nclass bar\n{\npublic:\n    bar ( foo &amp; f );\n};\n\n// both foo and bar are 3rd party\n\nclass base\n{\npublic:\n    base ( foo &amp; f ) : m_bar ( f ) {}\n\nprivate:\n    bar m_bar;\n};\n\nclass derived : public base\n{\npublic:\n    derived ( foo &amp; f ) : base ( f ) {}\n};\n\nclass derived2 : public base\n{\npublic:\n    derived2 () : base ( /* well ... */ ) {} \n\nprivate:\n    foo m_foo;\n};\n</code></pre>\n<p>As you can see, <code>foo</code> and <code>bar</code> were designed to  be used like this:</p>\n<pre><code>foo f ( /* some parameters */ );\nbar b ( f );\n</code></pre>\n<p>However, I want my wrapper classes to be standalone if needed, and <code>derived2</code> needs to be. But, <code>derived2::m_foo</code> cannot be just passed to <code>base</code> while its uninitialized. </p>\n<p>So my question is: Is there a way to force <code>derived2::m_foo</code> to construct before <code>base</code> ?</p>\n<p>The only solution I came up with myself is this:</p>\n<pre><code>class derived2_foo\n{\nprotected:\n    foo m_foo;\n};\n\nclass derived2 : public base, public derived2_foo\n{\npublic:\n    derived2 () : derived2_foo (), base ( m_foo ) {}\n};\n</code></pre>\n<p>Which should be valid code ( I'm free to be proven wrong ), but I'm not quite sure if I want to like that solution. So I'm here to fish for other ideas.</p>\n", "Tags": "<c++><c++11>", "OwnerUserId": "4805117", "AnswerCount": "1"}, "32934226": {"ParentId": "32934179", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>Your basic idea is a good one, but you should use private inheritance so that clients of <code>derived2</code> are unware of what's going on inside.</p>\n<pre><code>class derived2_foo\n{\nprotected:\n    foo m_foo;\n};\n\nclass derived2 : private derived2_foo, public base\n{\npublic:\n    derived2 () : derived2_foo(), base ( m_foo ) {}\n};\n</code></pre>\n<p>I've also changed the order in which your base classes appear in the class declaration. Always make sure that the order in the class declaration matches the one in the initialisation list (just as with member variables). As the <a href=\"https://isocpp.org/wiki/faq/multiple-inheritance#mi-vi-ctor-order\" rel=\"nofollow\">C++ FAQ</a> says:</p>\n<blockquote>\n<p id=\"so_32934179_32934226_0\">Note that the order B1 and then B2 [...] is determined by\n  the order that the base classes appear in the declaration of the\n  class, <em>not</em> in the order that the initializer appears in the derived\n  class\u2019s initialization list.</p>\n</blockquote>\n<p>Or for an even more official source, the C++ standard at \u00a712.6.2/13.2:</p>\n<blockquote>\n<p id=\"so_32934179_32934226_1\">[...] direct base classes are initialized in declaration order as they\n  appear in the <em>base-specifier-list</em> (regardless of the order of the\n  <em>mem-initializers</em>).</p>\n</blockquote>\n<p>Another improvement would be putting the <code>derived2_foo</code> class into its own \"private\" namespace:</p>\n<pre><code>namespace detail\n{\n    class derived2_foo\n    {\n    protected:\n        foo m_foo;\n    };\n}\n\nclass derived2 : private detail::derived2_foo, public base\n{\npublic:\n    derived2 () : derived2_foo(), base ( m_foo ) {}\n};\n</code></pre>\n<p>Libraries like Boost do that, too. While the <code>detail</code> namespace does not technically hide or protect anything, it signals to clients that they are not supposed to depend on its contents.</p>\n", "OwnerUserId": "3313064", "LastEditorUserId": "3313064", "LastEditDate": "2015-10-04T14:20:44.370", "Id": "32934226", "Score": "4", "CreationDate": "2015-10-04T13:53:47.850", "LastActivityDate": "2015-10-04T14:20:44.370"}, "bq_ids": {"n4140": {"so_32934179_32934226_1": {"section_id": 438, "quality": 1.0, "length": 12}}, "n3337": {"so_32934179_32934226_1": {"section_id": 429, "quality": 1.0, "length": 12}}, "n4659": {"so_32934179_32934226_1": {"section_id": 458, "quality": 1.0, "length": 12}}}});