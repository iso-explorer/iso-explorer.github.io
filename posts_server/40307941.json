post_cb({"bq_ids": {"n4140": {"so_40307941_40309457_0": {"length": 17, "quality": 0.6071428571428571, "section_id": 435}}, "n3337": {"so_40307941_40309457_0": {"length": 25, "quality": 0.8928571428571429, "section_id": 427}}, "n4659": {"so_40307941_40309457_0": {"length": 17, "quality": 0.6071428571428571, "section_id": 454}}}, "40307941": {"ViewCount": "85", "Body": "<p>For example, if I have the following:</p>\n<pre><code>class Foo;  // has default ctor\n\nclass Bar {\n public:\n  Bar(Foo* f);\n}\n\nclass MyClass {\n public:\n  MyClass();\n\n private:\n  Foo foo_;\n  Bar bar_;\n}\n\nMyClass::MyClass() : foo_(), bar_(&amp;foo) {}\n</code></pre>\n<p>This more or less compiles without warnings, see <a href=\"https://godbolt.org/g/yx464A\" rel=\"nofollow\">https://godbolt.org/g/yx464A</a> [slightly modified so Foo is fleshed out].</p>\n<p>It also compiles fine without foo_() in the initializer list. But is there ever a case where one would need to invoke the default ctor?</p>\n", "AcceptedAnswerId": "40309457", "Title": "Is it ever necessary to invoke default ctor in constructor initialization list?", "CreationDate": "2016-10-28T15:04:22.933", "Id": "40307941", "CommentCount": "3", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2016-10-28T16:35:49.417", "Score": "2", "OwnerUserId": "1572626", "Tags": "<c++><c++11><initializer-list>", "AnswerCount": "1"}, "40309457": {"Id": "40309457", "PostTypeId": "2", "Body": "<p>Well, <code>foo_</code> will be default-initialised:</p>\n<blockquote>\n<p id=\"so_40307941_40309457_0\"><code>[C++11: 12.6.2/8]:</code> <strong>In a non-delegating constructor, if a given non-static data member</strong> or base class <strong>is not designated by a <em>mem-initializer-id</em></strong> (including the case where there is no <em>mem-initializer-list</em> because the constructor has no <em>ctor-initializer</em>) and the entity is not a virtual base class of an abstract class (10.4), then</p>\n<ul>\n<li>if the entity is a non-static data member that has a <em>brace-or-equal-initializer</em>, the entity is initialized as specified in 8.5;</li>\n<li>otherwise, if the entity is a variant member (9.5), no initialization is performed;</li>\n<li>otherwise, <strong>the entity is default-initialized</strong> (8.5).</li>\n</ul>\n</blockquote>\n<p>Whether that's what you wanted is up to you. For a POD, default-initialisation (which won't do anything to POD members) may not be enough. For a class with an actual default constructor with non-POD members to initialise, the initialisation will cascade as you'd expect.</p>\n", "LastActivityDate": "2016-10-28T16:35:49.417", "CommentCount": "0", "CreationDate": "2016-10-28T16:35:49.417", "ParentId": "40307941", "Score": "4", "OwnerUserId": "560648"}});