post_cb({"16760168": {"ParentId": "16759733", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>While the behaviour is undefined in C++, as <a href=\"https://stackoverflow.com/users/1932150/andy-prowl\">Andy Prowl</a>'s <a href=\"https://stackoverflow.com/a/16759922/1011995\">answer</a> tells you, in C, the behaviour is defined, paragraph 6 of 6.2.4 (N1570, identical as paragraph 5 in C99) specifies the lifetime of objects with automatic storage duration which don't have variable length array type:</p>\n<blockquote>\n<p id=\"so_16759733_16760168_0\">For such an object that does not have a variable length array type, <strong>its lifetime extends from entry into the block with which it is associated until execution of that block ends in any way</strong>. (Entering an enclosed block or calling a function suspends, but does not end, execution of the current block.) If the block is entered recursively, a new instance of the object is created each time. The initial value of the object is indeterminate. If an initialization is specified for the object, it is performed each time the declaration or compound literal is reached in the execution of the block; otherwise, the value becomes indeterminate each time the declaration is reached.</p>\n</blockquote>\n<p>The lifetime of <code>string2</code> is the entire time of execution of the block, so accessing it in the <code>if</code> branch using <code>ptr</code> <em>after</em> the first initialisation finds an object with determinate contents.</p>\n", "OwnerUserId": "1011995", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T10:27:02.107", "Id": "16760168", "Score": "1", "CreationDate": "2013-05-26T14:24:01.570", "LastActivityDate": "2013-05-26T14:24:01.570"}, "16759733": {"CommentCount": "0", "ViewCount": "249", "PostTypeId": "1", "LastEditorUserId": "1996572", "CreationDate": "2013-05-26T13:32:54.447", "LastActivityDate": "2013-05-26T15:52:12.673", "Title": "Scope and lifetime of POD stack variables when passing over it with a goto", "LastEditDate": "2013-05-26T15:52:12.673", "Id": "16759733", "Score": "2", "Body": "<p>My question is related to the lifetime of stack variables in C99/GNU-C and C++, when a goto passes over them. There are a number of related questions here, but none of them really answered my case. Consider the following code example:</p>\n<pre><code>void Foo(char *ptr)\n{\nlabel1:\n    if (ptr)\n    {\n        char string1[50];\n        strcpy(string1, ptr);\n        strupr(string1);\n        printf(\"upcased string = %s\\n\", string1);\n        return;\n    }\n\n#if CASE_1\n    char string2[50] = \"test\";\n#else\n    char string2[50];\n    strcpy(string2, \"test\");\n#endif\n    ptr = string2;\n    goto label1;\n}\n</code></pre>\n<p>I read that a goto does not introduce a new scope and as such the variable should be accessible (in theory) even before it was declared. <em>string2</em> exists at function scope, yet it is not directly accessible from the code before the declaration. Using a goto and a pointer variable on the other hand, it can be accessed.\nI know that C++ requires destructors to be called, when a goto crosses an object initialization backwards, but I didn't find anything about the life of built-in / POD types.\nTests with GCC show that while the compiler reuses the stack space when <em>ptr</em> is not assigned to <em>string2</em>, it will stop reusing it, when the assignment is done, as if it \"knows\" that it can be addressed after the goto.</p>\n<p>Is there any rules in the C99/C++ standard (or maybe even restricted to GCC) that clearly say, whether this is allowed or not? I'm especially interested in C++.</p>\n<p>Edit:</p>\n<ul>\n<li>The part of the c++ standard that deals with it is <code>\"3.7.3-1 Block-scope variables explicitly declared register or not explicitly declared static or extern have automatic storage duration. The storage for these entities lasts until the block in which they are created exits.\"</code> And while this seems to justify the above code, it does not really, since it is clear that a compiler will reuse the stack space for automatic variables as an optimization, when it knows that it will not be used anymore. So the question that needs to be answered is: Would it be allowed for the compiler to assume that a variable is not used in the location before it was declared, even if the program flow would carry a reference?</li>\n<li>I added an alternative case, which seems to have different rules.</li>\n<li>To answer any questions, why I would use such an ugly construct in the first place: This is certainly not how I would want to write normal code. It is supposed to be part of compatibility macro, to allow the use of structured exception handling with G++</li>\n</ul>\n", "Tags": "<c++><c><scope><goto>", "OwnerUserId": "1996572", "AnswerCount": "2"}, "16759922": {"ParentId": "16759733", "CommentCount": "7", "Body": "<p>Concerning C++, paragraph 6.6/1 of the C++11 Standard specifies:</p>\n<blockquote>\n<p id=\"so_16759733_16759922_0\">[...] Transfer out of a loop, out of a block, or back past an initialized variable with\n  automatic storage duration <strong>involves the destruction of objects with automatic storage duration that are in\n  scope at the point transferred from but not at the point transferred to</strong>. [...]</p>\n</blockquote>\n<p>Paragraph 3.7.3/3 then specifies:</p>\n<blockquote>\n<p id=\"so_16759733_16759922_1\"><strong>If a variable with automatic storage duration has initialization</strong> or a destructor with side effects, <strong>it shall not\n  be destroyed before the end of its block</strong>, nor shall it be eliminated as an optimization even if it appears to\n  be unused, except that a class object or its copy/move may be eliminated as specified in 12.8.</p>\n</blockquote>\n<p>Since <code>string2</code> has initialization, the program has undefined behavior.</p>\n<p>This said, why using <code>goto</code> when you can just use structured programming? <a href=\"http://www.cs.utexas.edu/~EWD/ewd02xx/EWD215.PDF\" rel=\"nofollow\">Dijkstra taught us long ago that <code>goto</code> is harmful</a>.</p>\n", "OwnerUserId": "1932150", "PostTypeId": "2", "Id": "16759922", "Score": "1", "CreationDate": "2013-05-26T13:54:38.367", "LastActivityDate": "2013-05-26T13:54:38.367"}, "bq_ids": {"n4140": {"so_16759733_16759922_1": {"section_id": 7172, "quality": 0.9642857142857143, "length": 27}, "so_16759733_16759922_0": {"section_id": 3909, "quality": 1.0, "length": 24}}, "n3337": {"so_16759733_16759922_0": {"section_id": 3769, "quality": 1.0, "length": 24}, "so_16759733_16759922_1": {"section_id": 6916, "quality": 0.9642857142857143, "length": 27}}, "n4659": {"so_16759733_16759922_0": {"section_id": 4795, "quality": 1.0, "length": 24}, "so_16759733_16759922_1": {"section_id": 8680, "quality": 0.8928571428571429, "length": 25}}}});