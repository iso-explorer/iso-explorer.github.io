post_cb({"5622092": {"CommentCount": "6", "ViewCount": "225", "PostTypeId": "1", "ClosedDate": "2011-04-11T15:06:53.503", "LastEditorUserId": "636019", "CreationDate": "2011-04-11T13:33:21.667", "LastActivityDate": "2011-04-11T13:56:04.027", "Title": "Can anyone explain this paragraph of the current C++0x standard draft?", "AcceptedAnswerId": "5622270", "LastEditDate": "2011-04-11T13:38:57.420", "Id": "5622092", "Score": "4", "Body": "<p>Can anyone explain this statement from ISO N3242 \u00a73.2, 4th point</p>\n<p>The added part of n3242 when compare to ISO Standard 2003 :</p>\n<blockquote>\n<p id=\"so_5622092_5622092_0\"><code>4</code> Exactly one definition of a class is required in a translation unit if the class is used in a way that requires theclass type to be complete.</p>\n<p id=\"so_5622092_5622092_1\">A class type <code>T</code> must be complete if:</p>\n<ul>\n<li>a non-static class data member of type <code>T</code> is declared (9.2), or</li>\n<li><code>T</code> is used as the object type or array element type in a new-expression</li>\n<li>the type <code>T</code> is the subject of an alignof expression (5.3.6), or</li>\n<li>an exception-declaration has type <code>T</code>, reference to <code>T</code>, or pointer to <code>T</code></li>\n</ul>\n</blockquote>\n<p>Can anyone explain this paragraph of the current C++0x standard draft?</p>\n<p>What is the actual meaning of adding this in these statement?</p>\n<p>Can any one explain this with the help of an example/program?</p>\n", "Tags": "<c++><c++11><standards><one-definition-rule>", "OwnerUserId": "526255", "AnswerCount": "2"}, "5622270": {"ParentId": "5622092", "CommentCount": "3", "Body": "<p><a href=\"http://en.wikipedia.org/wiki/One_Definition_Rule\" rel=\"nofollow\">Straight from Wikipedia</a>:</p>\n<blockquote>\n<p id=\"so_5622092_5622270_0\">In general, a translation unit shall contain no more than one\n  definition of any class type. In this\n  example, two definitions of the class\n  type C occur in the same translation\n  unit. This typically occurs if a\n  header file is included twice by the\n  same source file without appropriate\n  header guards.</p>\n</blockquote>\n<pre><code>class C {}; // first definition of C\nclass C {}; // error, second definition of C\n</code></pre>\n<blockquote>\n<p id=\"so_5622092_5622270_1\">n the following, forming a pointer to\n  S or defining a function taking a\n  reference to S are examples of legal\n  constructs, because they do not\n  require the type of S to be complete.\n  Therefore, a definition is not\n  required.</p>\n<p id=\"so_5622092_5622270_2\">Defining an object of type S, a\n  function taking an argument of type S,\n  or using S in a sizeof expression are\n  examples of contexts where S must be\n  complete, and therefore require a\n  definition.</p>\n</blockquote>\n<pre><code>struct S;   // declaration of S\nS * p;      // ok, no definition required\nvoid f(S&amp;); // ok, no definition required\nvoid f(S);  // ok, no definition required \nS f();      // ok, no definition required  \n\nS s;        // error, definition required\nsizeof(S);  // error, definition required\n</code></pre>\n<p><strong>More than one definition</strong></p>\n<blockquote>\n<p id=\"so_5622092_5622270_3\">In certain cases, there can be more\n  than one definition of a type or a\n  template. A program consisting of\n  multiple header files and source files\n  will typically have more than one\n  definition of a type, but not more\n  than one definition per translation\n  unit.</p>\n<p id=\"so_5622092_5622270_4\">If a program contains more than one\n  definition of a type, then each\n  definition must be equivalent.</p>\n</blockquote>\n<p><strong>Definitions of static const data members</strong></p>\n<blockquote>\n<p id=\"so_5622092_5622270_5\">In pre-standard C++, all static data\n  members required a definition outside\n  of their class. However, during the\n  C++ standardization process it was\n  decided to lift this requirement for\n  static const integral members. The\n  intent was to allow uses such as:</p>\n</blockquote>\n<pre><code>struct C\n{\n  static const int N = 10;\n};\nchar data[C::N]; // N \"used\" without out-of-class definition\n</code></pre>\n<blockquote>\n<p id=\"so_5622092_5622270_6\">without a namespace scope definition for N.</p>\n<p id=\"so_5622092_5622270_7\">Nevertheless, the wording of the 1998 C++ standard still required a\n  definition if the member was used in\n  the program. This included the\n  member appearing anywhere except as\n  the operand to sizeof or typeid,\n  effectively making the above\n  ill-formed.</p>\n<p id=\"so_5622092_5622270_8\">This was identified as a defect, and the wording was adjusted to allow\n  such a member to appear anywhere a\n  constant expression is required,\n  without requiring an out-of-class\n  definition. This includes array\n  bounds, case expressions, static\n  member initializers, and nontype\n  template arguments.</p>\n</blockquote>\n<pre><code>struct C\n{\n  static const int N = 10;\n  static const int U = N; // Legal per C++03\n};\n\nchar data[C::N]; // Legal per C++03\n\ntemplate&lt;int&gt; struct D;\n\ntemplate&lt;&gt; struct D&lt;C::N&gt; {}; // Legal per C++03\n</code></pre>\n<blockquote>\n<p id=\"so_5622092_5622270_9\">However, using a static const integral\n  member anywhere except where an\n  integral constant-expression is\n  required requires a definition</p>\n</blockquote>\n<pre><code>struct C\n{\n  static const int N = 10;\n};\n\nint main()\n{\n  int i = C::N; // ill-formed, definition of C::N required\n}\n</code></pre>\n<blockquote>\n<p id=\"so_5622092_5622270_10\">This requirement will be relaxed in\n  the upcoming C++ standard,\n  colloquially referred to as C++0x.</p>\n</blockquote>\n", "Id": "5622270", "PostTypeId": "2", "OwnerDisplayName": "user195488", "Score": "6", "CreationDate": "2011-04-11T13:49:19.170", "LastActivityDate": "2011-04-11T13:49:19.170"}, "bq_ids": {"n4140": {"so_5622092_5622270_4": {"section_id": 7043, "quality": 0.6363636363636364, "length": 7}, "so_5622092_5622092_1": {"section_id": 7042, "quality": 1.0, "length": 4}, "so_5622092_5622270_3": {"section_id": 7043, "quality": 0.53125, "length": 17}, "so_5622092_5622092_0": {"section_id": 7042, "quality": 0.9230769230769231, "length": 12}}, "n3337": {"so_5622092_5622270_4": {"section_id": 6788, "quality": 0.6363636363636364, "length": 7}, "so_5622092_5622092_1": {"section_id": 6787, "quality": 1.0, "length": 4}, "so_5622092_5622270_3": {"section_id": 6788, "quality": 0.5625, "length": 18}, "so_5622092_5622092_0": {"section_id": 6787, "quality": 0.9230769230769231, "length": 12}}, "n4659": {"so_5622092_5622270_3": {"section_id": 8540, "quality": 0.53125, "length": 17}, "so_5622092_5622092_1": {"section_id": 8539, "quality": 1.0, "length": 4}, "so_5622092_5622092_0": {"section_id": 8539, "quality": 0.9230769230769231, "length": 12}, "so_5622092_5622270_4": {"section_id": 8540, "quality": 0.6363636363636364, "length": 7}}}, "5622359": {"ParentId": "5622092", "CommentCount": "0", "Body": "<p>All it's saying is that if you make use of a class type (and they're explicitly listing ways to use a class) in a way that requires a definition, you must provide exactly one definition of such class.</p>\n<p>If you don't provide a definition it's an error. If you provide more than one in a translation unit it's an error. If you provide more than one definition across multiple translation units it's undefined behavior.</p>\n", "OwnerUserId": "251738", "PostTypeId": "2", "Id": "5622359", "Score": "0", "CreationDate": "2011-04-11T13:56:04.027", "LastActivityDate": "2011-04-11T13:56:04.027"}});