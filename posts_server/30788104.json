post_cb({"bq_ids": {"n4140": {"so_30788104_30788225_1": {"length": 35, "quality": 1.0, "section_id": 257}, "so_30788104_30788225_0": {"length": 22, "quality": 1.0, "section_id": 243}}, "n3337": {"so_30788104_30788225_0": {"length": 20, "quality": 0.9090909090909091, "section_id": 235}, "so_30788104_30788225_1": {"length": 33, "quality": 0.9428571428571428, "section_id": 248}}, "n4659": {"so_30788104_30788225_0": {"length": 20, "quality": 0.9090909090909091, "section_id": 250}, "so_30788104_30788225_1": {"length": 35, "quality": 1.0, "section_id": 264}}}, "30788225": {"Id": "30788225", "PostTypeId": "2", "Body": "<p>Yes, you have that guarantee. From [temp.inst]/11, emphasis mine:</p>\n<blockquote>\n<p id=\"so_30788104_30788225_0\">An implementation <strong>shall not implicitly instantiate</strong> a function template, a variable template, a member template,\n  <strong>a non-virtual member function</strong>, a member class, or a static data member of a class template <strong>that\n  does not require instantiation</strong>.</p>\n</blockquote>\n<p>If you don't call <code>g()</code>, it doesn't require instantiation, so there should be no issues calling <code>myclass&lt;0&gt;{}.f()</code>.</p>\n<p>This is the same guarantee that lets you use <code>std::vector</code> and <code>std::map</code> with types that aren't default constructible as long as you don't do things like call <code>resize()</code> and <code>operator[]</code>, respectively. </p>\n<p>A followup, as Jarod42 <a href=\"https://stackoverflow.com/questions/30788104/static-assert-depend-on-class-template#comment49626487_30788225\">points out</a>, is that explicitly instantiating <code>myclass&lt;0&gt;</code> will produce the assert because, from [temp.explicit]/8:</p>\n<blockquote>\n<p id=\"so_30788104_30788225_1\">An explicit instantiation that names a class template specialization is also an explicit instantiation of the\n  same kind (declaration or definition) of <strong>each of its members</strong> (not including members inherited from base\n  classes and members that are templates) that has not been previously explicitly specialized in the translation\n  unit containing the explicit instantiation, except as described below.</p>\n</blockquote>\n<p>The exceptions don't apply here. </p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2015-06-11T18:27:52.210", "Score": "11", "CreationDate": "2015-06-11T18:03:56.393", "ParentId": "30788104", "CommentCount": "4", "OwnerUserId": "2069064", "LastEditDate": "2017-05-23T10:28:01.487"}, "30789105": {"Id": "30789105", "PostTypeId": "2", "Body": "<p>If you wish to disable a function at compiler time, you should use enable_if instead of static_assert</p>\n<pre><code>template&lt;unsigned int N&gt;\nstruct Foo {\n    unsigned int f() {}\n    enable_if_t&lt;(N &gt; 0), unsigned int&gt; g() {}\n};\n\nFoo&lt;0&gt; t{};\nt.f(); /// this is okay and will compile\n// t.g() if I uncomment this line, it will not compile anymore.\n</code></pre>\n", "LastActivityDate": "2015-06-11T18:52:39.787", "CommentCount": "2", "CreationDate": "2015-06-11T18:52:39.787", "ParentId": "30788104", "Score": "-1", "OwnerUserId": "2104697"}, "30921934": {"Id": "30921934", "PostTypeId": "2", "Body": "<p>Use a template specialization:</p>\n<pre><code>template &lt;unsigned N&gt;\nstruct myclass\n{\n    unsigned f () { return N; }\n    unsigned g () { return N-1; }\n};\n\ntemplate &lt;&gt;\nstruct myclass &lt;0&gt;\n{\n    unsigned f () { return 0; }\n};\n</code></pre>\n", "LastActivityDate": "2015-06-18T17:28:45.380", "CommentCount": "2", "CreationDate": "2015-06-18T17:28:45.380", "ParentId": "30788104", "Score": "0", "OwnerUserId": "3517622"}, "30788104": {"ViewCount": "234", "Body": "<p>Consider the following code:</p>\n<pre><code>template &lt;unsigned int N&gt;\nstruct myclass\n{\n    unsigned int f() {return N;}\n    unsigned int g() {static_assert(N &gt; 0, \"\"); return N-1;}\n};\n</code></pre>\n<p>Question:\nDo I have the guarantee that the following code will compile:</p>\n<pre><code>myclass&lt;0&gt; c;\nc.f();\n</code></pre>\n<p>But the following will not:</p>\n<pre><code>myclass&lt;0&gt; c;\nc.f();\nc.g();\n</code></pre>\n", "AcceptedAnswerId": "30788225", "Title": "static_assert depend on class template", "CreationDate": "2015-06-11T17:58:10.313", "Id": "30788104", "CommentCount": "3", "LastEditDate": "2015-06-11T18:03:10.343", "PostTypeId": "1", "LastEditorUserId": "882932", "LastActivityDate": "2015-06-18T17:28:45.380", "Score": "12", "OwnerUserId": "882932", "Tags": "<c++><class><c++11><compile-time><static-assert>", "AnswerCount": "3"}});