post_cb({"7900284": {"ViewCount": "990", "Body": "<p>For some reasons, I'd like to write code like this:</p>\n<pre><code>template&lt;class T&gt;\nclass C : public T\n{\nfriend class T;\n};\n</code></pre>\n<p>I think the code is clear. I want to have a class template which defines a class derived from the class passed to it as the template parameter, and to make things a little more complex, I'd like to define the base class as friend of the derived one. The code seems to be OK with MSVC compiler, but GNU C++ compiler complains a lot. What should I do to have the desired functionality?</p>\n", "AcceptedAnswerId": "7900484", "Title": "declare class template as friend", "CreationDate": "2011-10-26T08:23:31.277", "Id": "7900284", "CommentCount": "7", "PostTypeId": "1", "LastActivityDate": "2011-10-26T08:58:18.547", "Score": "4", "OwnerUserId": "1014146", "Tags": "<c++><templates><friend>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_7900284_7900484_0": {"length": 32, "quality": 0.8205128205128205, "section_id": 5443}}, "n3337": {"so_7900284_7900484_0": {"length": 32, "quality": 0.8205128205128205, "section_id": 5238}}, "n4659": {"so_7900284_7900484_0": {"length": 32, "quality": 0.8205128205128205, "section_id": 6870}}}, "7900484": {"Id": "7900484", "PostTypeId": "2", "Body": "<p>It is ill-formed, and is not valid C++ although it works in MSVC. The C++03 standard says this (7.1.5.3 \u00a72):</p>\n<blockquote>\n<p id=\"so_7900284_7900484_0\">3.4.4 describes how name lookup proceeds for the identifier in an elaborated-type-specifier. If the identifier resolves to a class-name\n  or enum-name, the elaborated-type-specifier introduces it into the\n  decla- ration the same way a simple-type-specifier introduces its\n  type-name. If the identifier resolves to a typedef- name or a template\n  type-parameter, the elaborated-type-specifier is ill-formed. [Note:\n  this implies that, within a class template with a template\n  type-parameter T, the declaration</p>\n<pre><code>       friend class T;\n</code></pre>\n<p id=\"so_7900284_7900484_1\">is ill-formed. ] If name lookup does not find a declaration for the\n  name, the elaborated-type-specifier is ill-formed unless it is of the\n  simple form class-key identifier in which case the identifier is\n  declared as described in 3.3.1.</p>\n</blockquote>\n<p>For this same reason you can't do things like <code>friend class std::string;</code> either, but you must befriend the <code>std::basic_string</code> with the template parameters.</p>\n<p>However the new C++11 spec allows a new syntax for declaring friends, which simply is (11.3 \u00a73 of N3242):</p>\n<pre><code>friend &lt;typename-specifier&gt;;\n</code></pre>\n<p>This new syntax allows you to do what you want (I don't know if MSVC yet supports this though):</p>\n<pre><code>template&lt;typename T&gt;\nclass C : public T\n{\n    friend T;\n};\n</code></pre>\n", "LastActivityDate": "2011-10-26T08:46:10.003", "Score": "6", "CreationDate": "2011-10-26T08:46:10.003", "ParentId": "7900284", "CommentCount": "0", "OwnerUserId": "197368"}});