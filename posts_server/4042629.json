post_cb({"4042684": {"Id": "4042684", "PostTypeId": "2", "Body": "<p>If the assignment operator for <code>SomeType</code> is exception-safe then you can be sure that either <code>val</code> will be assigned a consistent new value or its initial value will remain unchanged.</p>\n<p>However the exception might be thrown by either <code>createSomeType()</code> or by the assignment after <code>createSomeType()</code> runs successfully. If the assignment operator for <code>SomeType</code> is overloaded and it can throw exceptions it might happen that <code>val</code> ends up in \"half-assigned\" inconsistent state. The latter is a result of not adopting exception safety in <code>SomeType</code> design which is bad but still can happen.</p>\n", "LastEditorUserId": "57428", "LastActivityDate": "2010-10-28T12:07:28.100", "Score": "1", "CreationDate": "2010-10-28T12:02:17.507", "ParentId": "4042629", "CommentCount": "6", "OwnerUserId": "57428", "LastEditDate": "2010-10-28T12:07:28.100"}, "4042629": {"ViewCount": "118", "Body": "<p>Lets consider I have the following function:</p>\n<pre><code>SomeType createSomeType();\n</code></pre>\n<p>which can <code>throw</code> depending on some reasons.</p>\n<p>Then:</p>\n<pre><code>SomeType val = SomeType(); // initial value\n\ntry\n{\n  val = createSomeType(); // here\n}\ncatch (std::exception&amp;)\n{\n}\n</code></pre>\n<p>If <code>createSomeType()</code> throws, can I always assume that <code>val</code> value is <strong>unchanged</strong> ?</p>\n", "AcceptedAnswerId": "4042637", "Title": "Affectations and exceptions", "CreationDate": "2010-10-28T11:55:34.683", "Id": "4042629", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2010-10-28T12:28:29.927", "Score": "5", "OwnerUserId": "279259", "Tags": "<c++><exception>", "AnswerCount": "3"}, "4042637": {"Id": "4042637", "PostTypeId": "2", "Body": "<p>Yes, if createSomeType() throws an exception, the assignment will not happen. The flow of control will go from the throw statement, through the destructors of any objects createSomeType() has on the stack and finally to the catch statement.</p>\n", "LastActivityDate": "2010-10-28T11:57:08.700", "CommentCount": "0", "CreationDate": "2010-10-28T11:57:08.700", "ParentId": "4042629", "Score": "7", "OwnerUserId": "4086"}, "bq_ids": {"n4140": {"so_4042629_4042907_0": {"length": 22, "quality": 0.9166666666666666, "section_id": 3343}}, "n3337": {"so_4042629_4042907_0": {"length": 23, "quality": 0.9583333333333334, "section_id": 3213}}, "n4659": {"so_4042629_4042907_0": {"length": 15, "quality": 0.625, "section_id": 4109}}}, "4042907": {"Id": "4042907", "PostTypeId": "2", "Body": "<p>From Standard docs 15.2.1,</p>\n<blockquote>\n<p id=\"so_4042629_4042907_0\">As control passes from a throw-expression to a handler, <strong>destructors are invoked for all automatic objects constructed\n  since the try block was entered.</strong> The automatic objects are destroyed in the reverse order of the completion of their\n  construction.</p>\n</blockquote>\n<p>Hence the <code>val</code> value, will not change...</p>\n", "LastActivityDate": "2010-10-28T12:28:29.927", "CommentCount": "0", "CreationDate": "2010-10-28T12:28:29.927", "ParentId": "4042629", "Score": "0", "OwnerUserId": "249490"}});