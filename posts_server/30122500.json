post_cb({"30122881": {"ParentId": "30122500", "LastEditDate": "2015-06-01T12:05:22.063", "CommentCount": "6", "CreationDate": "2015-05-08T11:37:12.923", "OwnerUserId": "1708801", "LastEditorUserId": "1708801", "PostTypeId": "2", "Id": "30122881", "Score": "12", "Body": "<p>This is a <a href=\"http://lists.cs.uiuc.edu/pipermail/cfe-dev/2013-January/027401.html\" rel=\"nofollow\">bug in libstdc++</a>, from the <code>cfe-dev</code> mailing list thread with title <em>-fsanitize=undefined and shared libraries</em>  says:</p>\n<blockquote>\n<p id=\"so_30122500_30122881_0\">This is a bug in libstdc++. You will be able to work around it with a\n  sanitizer blacklist file, once Will's patch for that lands, but for\n  now, filtering them out manually is likely to be your best option.</p>\n<p id=\"so_30122500_30122881_1\">Here's a patch to fix it; I'll be looking into pushing this to\n  libstdc++ upstream in the next few days. [...]</p>\n</blockquote>\n<p>As I noted to dyp in the comments it is not uncommon to see systems where <code>clang</code> uses <code>libstdc++</code> as opposed to <code>libc++</code> and if we test this on <a href=\"http://coliru.stacked-crooked.com/a/91d3b98926ff8844\" rel=\"nofollow\">Coliru explicitly using libstdc++</a> via <code>-stdlib=libstdc++</code> we indeed can reproduce the issue.</p>\n<p>The following <code>libstdc++</code> bug report: <a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=56158\" rel=\"nofollow\">bad enum values computed by operator~ in ios_base.h</a> covers this issue and says:</p>\n<blockquote>\n<p id=\"so_30122500_30122881_2\">The overloaded operator~s defined for the enumerations in ios_base.h\n  have the following form:</p>\n<pre><code>Enum operator~(Enum e) { return Enum(~static_cast&lt;int&gt;(e)); }\n</code></pre>\n<p id=\"so_30122500_30122881_3\">The ~ creates values outside the range of values of the enumeration\n  type, so the cast back to the Enum type has an unspecified value (see\n  [expr.static.cast]p10), and in practice it produces an Enum value\n  outside the range of representable values for the Enum type, so\n  behavior is undefined.</p>\n</blockquote>\n<p>For reference <em>[expr.static.cast]p10</em> says:</p>\n<blockquote>\n<p id=\"so_30122500_30122881_4\">A value of integral or enumeration type can be explicitly converted to an enumeration type. The value is\n  unchanged if the original value is within the range of the enumeration values (7.2). Otherwise, the resulting\n  value is unspecified (and might not be in that range). A value of floating-point type can also be converted\n  to an enumeration type. The resulting value is the same as converting the original value to the underlying\n  type of the enumeration (4.9), and subsequently to the enumeration type.</p>\n</blockquote>\n<p>and as hvd says this is formally unspecified behavior but Richard points out that in practice is ends up being undefined behavior.</p>\n<p>T.C. points out this was changed from unspecified to undefined behavior by <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1766\" rel=\"nofollow\">DR 1766: Values outside the range of the values of an enumeration</a>:</p>\n<blockquote>\n<p id=\"so_30122500_30122881_5\">Although issue 1094 clarified that the value of an expression of enumeration type might not be within the range of the values of the enumeration after a conversion to the enumeration type (see 5.2.9 [expr.static.cast] paragraph 10), the result is simply an unspecified value. This should probably be strengthened to produce undefined behavior, in light of the fact that undefined behavior makes an expression non-constant. See also 9.6 [class.bit] paragraph 4.</p>\n</blockquote>\n<p>The new wording appears in the draft standard in <a href=\"https://github.com/cplusplus/draft/blob/master/papers/n4431.pdf\" rel=\"nofollow\">N4431</a>.</p>\n", "LastActivityDate": "2015-06-01T12:05:22.063"}, "30122500": {"CommentCount": "3", "AcceptedAnswerId": "30122881", "PostTypeId": "1", "LastEditorUserId": "1708801", "CreationDate": "2015-05-08T11:16:48.387", "LastActivityDate": "2015-06-01T12:05:22.063", "LastEditDate": "2015-05-08T12:26:53.847", "ViewCount": "515", "FavoriteCount": "1", "Title": "Is this code really undefined, as Clang seems to indicate?", "Id": "30122500", "Score": "12", "Body": "<p>I switched on <code>-fsanitize=undefined</code> on my project which uses Catch, the unit testing library. One line from Catch was signalled as causing undefined behaviour by this flag. I managed to make an isolated example:</p>\n<pre><code>#include &lt;iomanip&gt;\n#include &lt;sstream&gt;\n\nint main()\n{\n    std::ostringstream os; \n    os &lt;&lt; \"0x\" &lt;&lt; std::setfill('0') &lt;&lt; std::hex;\n}\n</code></pre>\n<p>Compiled with:</p>\n<pre><code>clang++ -fsanitize=undefined main.cpp\n</code></pre>\n<p>If I run this, the following print is given:</p>\n<pre><code>/usr/bin/../lib64/gcc/x86_64-unknown-linux-gnu/4.9.2/../../../../include/c++/4.9.2/bits/ios_base.h:96:24: runtime error: load of value 4294967221, which is not a valid value for type 'std::_Ios_Fmtflags'\n/usr/bin/../lib64/gcc/x86_64-unknown-linux-gnu/4.9.2/../../../../include/c++/4.9.2/bits/ios_base.h:76:67: runtime error: load of value 4294967221, which is not a valid value for type 'std::_Ios_Fmtflags'\n</code></pre>\n<p>This happens for me on clang <code>3.6.0</code> and for a friend with clang <code>3.4-1ubuntu3</code>. It does not happen for me on gcc version <code>4.9.2</code></p>\n<p>So what is up here? Is this code actually bad, or is there something fishy going on on clang's end?</p>\n", "Tags": "<c++><clang><undefined-behavior><libstdc++><sanitizer>", "OwnerUserId": "2164642", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_30122500_30122881_4": {"section_id": 6036, "quality": 0.9555555555555556, "length": 43}}, "n3337": {"so_30122500_30122881_4": {"section_id": 5804, "quality": 0.9555555555555556, "length": 43}}, "n4659": {"so_30122500_30122881_4": {"section_id": 7535, "quality": 0.8444444444444444, "length": 38}}}});