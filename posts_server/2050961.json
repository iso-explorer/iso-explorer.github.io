post_cb({"2051035": {"ParentId": "2050961", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>Under <code>*nix</code> type systems with <code>exec*()</code> calls, <code>argv[0]</code> will be whatever the caller puts into the <code>argv0</code> spot in the <code>exec*()</code> call.</p>\n<p>The shell uses the convention that this is the program name, and most other programs follow the same convention, so <code>argv[0]</code> usually the program name.</p>\n<p>But a rogue Unix program can call <code>exec()</code> and make <code>argv[0]</code> anything it likes, so no matter what the C standard says, you can't count on this 100% of the time.</p>\n", "OwnerUserId": "204046", "LastEditorUserId": "14860", "LastEditDate": "2014-01-08T01:01:18.313", "Id": "2051035", "Score": "40", "CreationDate": "2010-01-12T17:40:41.060", "LastActivityDate": "2014-01-08T01:01:18.313"}, "2050977": {"ParentId": "2050961", "CommentCount": "4", "Body": "<p><a href=\"http://www.phon.ucl.ac.uk/courses/spsci/abc/lesson11.htm\" rel=\"nofollow noreferrer\">This page</a> states:</p>\n<blockquote>\n<p id=\"so_2050961_2050977_0\">The element argv[0] normally contains the name of the program, but this shouldn't be relied upon - anyway it is unusual for a program not to know its own name!</p>\n</blockquote>\n<p>However, other pages seem to back up the fact that it is always the name of the executable. <a href=\"http://www.site.uottawa.ca/~lucia/courses/2131-05/labs/Lab3/CommandLineArguments.html\" rel=\"nofollow noreferrer\">This one</a> states:</p>\n<blockquote>\n<p id=\"so_2050961_2050977_1\">You\u2019ll notice that argv[0] is the path and name of the program itself. This allows the program to discover information about itself. It also adds one more to the array of program arguments, so a common error when fetching command-line arguments is to grab argv[0] when you want argv[1].</p>\n</blockquote>\n", "OwnerUserId": "59303", "PostTypeId": "2", "Id": "2050977", "Score": "4", "CreationDate": "2010-01-12T17:33:57.173", "LastActivityDate": "2010-01-12T17:33:57.173"}, "2051026": {"ParentId": "2050961", "CommentCount": "2", "CreationDate": "2010-01-12T17:39:04.527", "Id": "2051026", "PostTypeId": "2", "OwnerDisplayName": "anon", "Score": "8", "Body": "<p>According to the C++ Standard, section 3.6.1:</p>\n<blockquote>\n<p id=\"so_2050961_2051026_0\">argv[0] shall be the pointer to the\n  initial character of a NTMBS that\n  represents the name used to invoke the\n  program or \"\"</p>\n</blockquote>\n<p>So no, it is not guaranteed, at least by the Standard. </p>\n", "LastActivityDate": "2010-01-12T17:39:04.527"}, "2051057": {"ParentId": "2050961", "CommentCount": "1", "Body": "<p>I'm not sure whether it is a nearly universal convention or a standard, but either way you should abide by it. I've never seen it exploited outside of Unix and Unix-like systems, though. In Unix environments - and maybe particularly in the old days - programs might have significantly different behaviors depending on the name under which they are invoked.</p>\n<p>EDITED: I see from other posts at the same time as mine that someone has identified it as coming from a particular standard, but I'm sure the convention long predates the standard.</p>\n", "OwnerUserId": "217246", "PostTypeId": "2", "Id": "2051057", "Score": "2", "CreationDate": "2010-01-12T17:43:25.817", "LastActivityDate": "2010-01-12T17:43:25.817"}, "42291142": {"ParentId": "2050961", "PostTypeId": "2", "CommentCount": "0", "Body": "<p><strong>Runnable POSIX <code>execve</code> example where <code>argv[0] !=</code> executable name</strong> </p>\n<p>Others mentioned <code>exec</code>, but here is a runnable example.</p>\n<p><strong><code>a.c</code></strong></p>\n<pre><code>#define _XOPEN_SOURCE 700\n#include &lt;unistd.h&gt;\n\nint main(void) {\n    char *argv[] = {\"yada yada\", NULL};\n    char *envp[] = {NULL};\n    execve(\"b.out\", argv, envp);\n}\n</code></pre>\n<p><strong><code>b.c</code></strong></p>\n<pre><code>#include &lt;stdio.h&gt;\n\nint main(int argc, char **argv) {\n    puts(argv[0]);\n}\n</code></pre>\n<p>Then:</p>\n<pre><code>gcc a.c -o a.out\ngcc b.c -o b.out\n./a.out\n</code></pre>\n<p>Gives:</p>\n<pre><code>yada yada\n</code></pre>\n<p>Yes, <code>argv[0]</code> could also be:</p>\n<ul>\n<li>NULL: <a href=\"https://stackoverflow.com/questions/2794150/when-can-argv0-have-null/42290873#42290873\">When can argv[0] have null?</a></li>\n<li>empty: <a href=\"https://stackoverflow.com/questions/8665439/can-argv0-contain-an-empty-string\">Can argv[0] contain an empty string?</a></li>\n</ul>\n<p>Tested on Ubuntu 16.10.</p>\n", "OwnerUserId": "895245", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T11:54:31.720", "Id": "42291142", "Score": "1", "CreationDate": "2017-02-17T06:46:50.870", "LastActivityDate": "2017-02-17T06:46:50.870"}, "2050961": {"CommentCount": "1", "AcceptedAnswerId": "2051031", "PostTypeId": "1", "LastEditorUserId": "168868", "CreationDate": "2010-01-12T17:31:51.220", "LastActivityDate": "2017-02-17T06:46:50.870", "LastEditDate": "2012-02-11T21:57:05.880", "ViewCount": "38309", "FavoriteCount": "17", "Title": "Is \"argv[0] = name-of-executable\" an accepted standard or just a common convention?", "Id": "2050961", "Score": "72", "Body": "<p>When passing argument to <code>main()</code> in a C or C++ application, will <code>argv[0]</code> always be the name of the executable?  Or is this just a common convention and not guaranteed to be true 100% of the time? </p>\n", "Tags": "<c++><c><standards><argv>", "OwnerUserId": "203690", "AnswerCount": "7"}, "2051047": {"ParentId": "2050961", "CommentCount": "3", "Body": "<p>ISO-IEC 9899 states:</p>\n<blockquote>\n<p id=\"so_2050961_2051047_0\"><strong>5.1.2.2.1 Program startup</strong></p>\n<p id=\"so_2050961_2051047_1\">If the value of <strong><code>argc</code></strong> is greater than zero, the string pointed to by <strong><code>argv[0]</code></strong> represents the programname; <strong><code>argv[0][0]</code></strong> shall be the null character if the program name is not available from the host environment. If the value of <strong><code>argc</code></strong> is greater than one, the strings pointed to by <strong><code>argv[1]</code></strong> through <strong><code>argv[argc-1]</code></strong> represent the <em>program parameters</em>.</p>\n</blockquote>\n<p>I've also used:</p>\n<pre><code>#if defined(_WIN32)\n  static size_t getExecutablePathName(char* pathName, size_t pathNameCapacity)\n  {\n    return GetModuleFileNameA(NULL, pathName, (DWORD)pathNameCapacity);\n  }\n#elif defined(__linux__) /* elif of: #if defined(_WIN32) */\n  #include &lt;unistd.h&gt;\n  static size_t getExecutablePathName(char* pathName, size_t pathNameCapacity)\n  {\n    size_t pathNameSize = readlink(\"/proc/self/exe\", pathName, pathNameCapacity - 1);\n    pathName[pathNameSize] = '\\0';\n    return pathNameSize;\n  }\n#elif defined(__APPLE__) /* elif of: #elif defined(__linux__) */\n  #include &lt;mach-o/dyld.h&gt;\n  static size_t getExecutablePathName(char* pathName, size_t pathNameCapacity)\n  {\n    uint32_t pathNameSize = 0;\n\n    _NSGetExecutablePath(NULL, &amp;pathNameSize);\n\n    if (pathNameSize &gt; pathNameCapacity)\n      pathNameSize = pathNameCapacity;\n\n    if (!_NSGetExecutablePath(pathName, &amp;pathNameSize))\n    {\n      char real[PATH_MAX];\n\n      if (realpath(pathName, real) != NULL)\n      {\n        pathNameSize = strlen(real);\n        strncpy(pathName, real, pathNameSize);\n      }\n\n      return pathNameSize;\n    }\n\n    return 0;\n  }\n#else /* else of: #elif defined(__APPLE__) */\n  #error provide your own implementation\n#endif /* end of: #if defined(_WIN32) */\n</code></pre>\n<p>And then you just have to parse the string to extract the executable name from the path.</p>\n", "OwnerUserId": "216063", "PostTypeId": "2", "Id": "2051047", "Score": "4", "CreationDate": "2010-01-12T17:42:40.523", "LastActivityDate": "2010-01-12T17:42:40.523"}, "bq_ids": {"n4140": {"so_2050961_2051026_0": {"section_id": 7146, "quality": 0.875, "length": 7}}, "n3337": {"so_2050961_2051026_0": {"section_id": 6890, "quality": 0.875, "length": 7}}, "n4659": {"so_2050961_2051026_0": {"section_id": 8647, "quality": 0.875, "length": 7}}}, "2051031": {"ParentId": "2050961", "PostTypeId": "2", "CommentCount": "8", "Body": "<p>Guesswork (even educated guesswork) is fun but you really need to go to the standards documents to be sure. For example, ISO C11 states (my emphasis):</p>\n<blockquote>\n<p id=\"so_2050961_2051031_0\">If the value of <code>argc</code> is greater than zero, the string pointed to by <code>argv[0]</code> <strong><em>represents</em></strong> the program name; <code>argv[0][0]</code> shall be the null character if the program name is not available from the host environment.</p>\n</blockquote>\n<p>So no, it's only the program name if that name is <em>available.</em> And it <em>\"represents\"</em> the program name, not necessarily <em>is</em> the program name. The section before that states:</p>\n<blockquote>\n<p id=\"so_2050961_2051031_1\">If the value of <code>argc</code> is greater than zero, the array members <code>argv[0]</code> through <code>argv[argc-1]</code> inclusive shall contain pointers to strings, which are given implementation-defined values by the host environment prior to program startup.</p>\n</blockquote>\n<p>This is unchanged from C99, the previous standard, and means that even the <em>values</em> are not dictated by the standard - it's up to the implementation entirely.</p>\n<p>This means that the program name can be empty if the host environment <em>doesn't</em> provide it, and anything else if the host environment <em>does</em> provide it, provided that \"anything else\" somehow represents the program name. In my more sadistic moments, I would consider translating it into Swahili, running it through a substitution cipher then storing it in reverse byte order :-).</p>\n<p>However, implementation-defined <em>does</em> have a specific meaning in the ISO standards - the implementation must document how it works. So even UNIX, which can put anything it likes into <code>argv[0]</code> with the <code>exec</code> family of calls, has to (and does) document it.</p>\n", "OwnerUserId": "14860", "LastEditorUserId": "14860", "LastEditDate": "2015-09-02T07:30:47.140", "Id": "2051031", "Score": "87", "CreationDate": "2010-01-12T17:40:15.863", "LastActivityDate": "2015-09-02T07:30:47.140"}});