post_cb({"bq_ids": {"n4140": {"so_48578215_48578602_0": {"length": 24, "quality": 1.0, "section_id": 451}, "so_48578215_48578602_1": {"length": 5, "quality": 0.5555555555555556, "section_id": 489}}, "n3337": {"so_48578215_48578602_0": {"length": 24, "quality": 1.0, "section_id": 442}, "so_48578215_48578602_1": {"length": 5, "quality": 0.5555555555555556, "section_id": 480}}, "n4659": {"so_48578215_48578602_0": {"length": 24, "quality": 1.0, "section_id": 474}}}, "48578215": {"ViewCount": "63", "Body": "<p>So let's say I have a class called classname and this class has <code>char*</code> private data member.</p>\n<p>In the class that I am taking, the professor wants us to do it like the one below, essentially creating a completely new array. </p>\n<pre><code>classname(const classname &amp; source)\n{\n         c_string = new char[strlen(source.c_string)+1];\n\n         strcpy(c_string, source.c_string);\n\n}\n</code></pre>\n<p>But what if the two objects essentially share the same single array(that has already been created), like this one. </p>\n<pre><code>classname(const classname &amp; source)\n{\n         c_string = source.c_string;\n}\n</code></pre>\n<p>I understand this doesn't necessarily do any 'copying' and having different pointers (that belong to different objects) might be risky. But is it considered a copy constructor? Or is it so that in order for it to be a copy constructor the second array must also be created? </p>\n<p>From what I've been reading I feel like the second one is the case, but I need a definite NO THAT'S NOT A COPY CONSTRUCTOR to be completely over this in my mind.\nThank you. </p>\n", "AcceptedAnswerId": "48578602", "Title": "is it still a copy constructor when you only copy the pointer instead of the entire data?", "CreationDate": "2018-02-02T08:00:42.933", "LastActivityDate": "2018-02-02T08:27:39.583", "CommentCount": "6", "LastEditDate": "2018-02-02T08:08:25.977", "PostTypeId": "1", "LastEditorUserId": "8554243", "Id": "48578215", "Score": "0", "OwnerUserId": "8554243", "Tags": "<c++><copy-constructor>", "AnswerCount": "1"}, "48578602": {"Id": "48578602", "PostTypeId": "2", "Body": "<p>As commenters have all correctly pointed out, what you have <strong>is</strong> a copy constructor, regardless of the function's content.</p>\n<p>It's a copy constructor because the standard says so (<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3797.pdf\" rel=\"nofollow noreferrer\">see 12.8.2</a>):</p>\n<blockquote>\n<p id=\"so_48578215_48578602_0\">A non-template constructor for class <code>X</code> is a copy constructor if its first parameter is of type <code>X&amp;</code>, <code>const X&amp;</code>, <code>volatile X&amp;</code> or <code>const volatile X&amp;</code>, and either there are no other parameters or else all other parameters have default arguments (...).</p>\n</blockquote>\n<p>Since you have a non template constructor for <code>classname</code>, whose signature matches <code>const classname&amp;</code>, you have a copy constructor. Maybe not a great copy constructor, maybe a broken one which doesn't even copy, but a copy constructor nonetheless.</p>\n<p>Since I can't say it better than those who have commented, I'll simply quote them:</p>\n<blockquote>\n<p id=\"so_48578215_48578602_1\">Copy constructor is defined by its signature, <em>not</em> the content in the function body.- <a href=\"https://stackoverflow.com/questions/48578215/is-it-still-a-copy-constructor-when-you-only-copy-the-pointer-instead-of-the-ent#comment84152652_48578215\">@liliscent</a> </p>\n</blockquote>\n<p>\u00a0</p>\n<blockquote>\n<p id=\"so_48578215_48578602_2\">You are doing a <a href=\"https://stackoverflow.com/questions/184710/what-is-the-difference-between-a-deep-copy-and-a-shallow-copy\">shallow copy rather than a deep copy</a> but it's still a copy-constructor.-<a href=\"https://stackoverflow.com/questions/48578215/is-it-still-a-copy-constructor-when-you-only-copy-the-pointer-instead-of-the-ent#comment84152754_48578215\">@acraig5075</a></p>\n</blockquote>\n", "LastActivityDate": "2018-02-02T08:27:39.583", "Score": "4", "CreationDate": "2018-02-02T08:27:39.583", "ParentId": "48578215", "CommentCount": "0", "OwnerUserId": "4143855"}});