post_cb({"8758445": {"CommentCount": "3", "ViewCount": "309", "PostTypeId": "1", "LastEditorUserId": "738811", "CreationDate": "2012-01-06T13:22:43.573", "LastActivityDate": "2012-01-06T13:46:27.697", "Title": "Copy constructor and normal constructor for non-POD type", "AcceptedAnswerId": "8758663", "LastEditDate": "2012-01-06T13:31:33.530", "Id": "8758445", "Score": "1", "Body": "<p>There is this code:</p>\n<pre><code>#include &lt;iostream&gt;\n\nclass KlasaNiePOD{\npublic:\n    int a;\n    ~KlasaNiePOD(){}\n\n};\nint main() {\n    KlasaNiePOD obiekt1; // first case\n    std::cout &lt;&lt; obiekt1.a &lt;&lt; std::endl; // -1075234152\n    KlasaNiePOD obiekt2 = KlasaNiePOD(); // second case\n    std::cout &lt;&lt; obiekt2.a &lt;&lt; std::endl; // 0\n    return 0;\n} \n</code></pre>\n<p>Why in the first case 'a' is not initialized, but in second case it is? Shouldn't be called constructor always in non-POD classes?</p>\n<p>Edit:</p>\n<p>Fragment from assembly:</p>\n<pre><code>.globl main\n    .type   main, @function\nmain:\n.LFB960:\n    .cfi_startproc\n    .cfi_personality 0x0,__gxx_personality_v0\n    .cfi_lsda 0x0,.LLSDA960\n    pushl   %ebp\n    .cfi_def_cfa_offset 8\n    movl    %esp, %ebp\n    .cfi_offset 5, -8\n    .cfi_def_cfa_register 5\n    andl    $-16, %esp\n    pushl   %esi\n    pushl   %ebx\n    subl    $40, %esp\n    movl    28(%esp), %eax\n    movl    %eax, 4(%esp)\n    movl    $_ZSt4cout, (%esp) # std::cout &lt;&lt; obiekt1.a &lt;&lt; std::endl;\n.LEHB0:\n    .cfi_escape 0x10,0x3,0x7,0x55,0x9,0xf0,0x1a,0x9,0xf8,0x22\n    .cfi_escape 0x10,0x6,0x7,0x55,0x9,0xf0,0x1a,0x9,0xfc,0x22\n    call    _ZNSolsEi\n    movl    $_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, 4(%esp)\n    movl    %eax, (%esp)\n    call    _ZNSolsEPFRSoS_E\n.LEHE0:\n    movl    $0, 24(%esp) # Here obiekt2.a = 0\n    movl    24(%esp), %eax\n    movl    %eax, 4(%esp)\n    movl    $_ZSt4cout, (%esp) # std::cout &lt;&lt; obiekt2.a &lt;&lt; std::endl;\n.LEHB1:\n    call    _ZNSolsEi\n    movl    $_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, 4(%esp)\n    movl    %eax, (%esp)\n    call    _ZNSolsEPFRSoS_E\n.LEHE1:\n    movl    $0, %ebx\n    leal    24(%esp), %eax\n    movl    %eax, (%esp)\n    call    _ZN11KlasaNiePODD1Ev\n    leal    28(%esp), %eax\n    movl    %eax, (%esp)\n    call    _ZN11KlasaNiePODD1Ev\n    movl    %ebx, %eax\n    addl    $40, %esp\n    popl    %ebx\n    popl    %esi\n    movl    %ebp, %esp\n    popl    %ebp\n    ret\n</code></pre>\n", "Tags": "<c++>", "OwnerUserId": "738811", "AnswerCount": "3"}, "8758663": {"ParentId": "8758445", "CommentCount": "12", "Body": "<pre><code>KlasaNiePOD obiekt1; // first case\n</code></pre>\n<p>This is <em>default-initialised</em>; since it doesn't have a default constructor, members with a fundamental type (which includes numeric types) are left uninitialised.</p>\n<pre><code>KlasaNiePOD obiekt2 = KlasaNiePOD(); // second case\n</code></pre>\n<p>The temporary <code>KlasaNiePOD()</code> is <em>value-initialised</em>; since it doesn't have a default constructor, members with a numeric type are initialised to zero.</p>\n", "OwnerUserId": "204847", "PostTypeId": "2", "Id": "8758663", "Score": "5", "CreationDate": "2012-01-06T13:38:55.877", "LastActivityDate": "2012-01-06T13:38:55.877"}, "8758760": {"ParentId": "8758445", "CommentCount": "0", "Body": "<p>ISO 14882:2011(e) 8.5.1 :</p>\n<blockquote>\n<p id=\"so_8758445_8758760_0\">An aggregate is an array or a class (Clause 9) with no user-provided\n  constructors (12.1), no brace-or-equalinitializers for non-static data\n  members (9.2), no private or protected non-static data members (Clause\n  11), no base classes (Clause 10), and no virtual functions (10.3).</p>\n</blockquote>\n<p>As such, your class is an aggregate.</p>\n<pre><code>KlasaNiePOD obiekt2 = KlasaNiePOD(); // second case\n</code></pre>\n<p>will invoke aggregate and finally value initialization, causing the int to be zero intialized.</p>\n<p>Add</p>\n<pre><code>KlasaNiePOD(){}\n</code></pre>\n<p>to your class definition, and you will see that the setting to 0 will vanish (as this will make it not an aggregate anymore).</p>\n", "OwnerUserId": "833362", "PostTypeId": "2", "Id": "8758760", "Score": "1", "CreationDate": "2012-01-06T13:46:12.400", "LastActivityDate": "2012-01-06T13:46:12.400"}, "bq_ids": {"n4140": {"so_8758445_8758760_0": {"section_id": 3298, "quality": 0.6956521739130435, "length": 16}}, "n3337": {"so_8758445_8758760_0": {"section_id": 3168, "quality": 0.8695652173913043, "length": 20}}, "n4659": {"so_8758445_8758760_0": {"section_id": 4063, "quality": 0.5217391304347826, "length": 12}}}, "8758734": {"ParentId": "8758445", "CommentCount": "0", "Body": "<p>The standard defines several different types of initialization,\ndepending on context.  Zero-initialization sets all of the members to 0\n(converted to the appropriate type, so pointers will be set to a null\npointer value, even if the null pointer isn't all zero bits); no\nconstructor is called.  Default-initialization calls the default \nconstructor, which be default doesn't do anything.  Value-initialization\ncalls the default constructor if a user defined constructor is present,\nbut does zero-initialization, followed by the default constructor, if\nthere is no user defined constructor.  An object whose initializer is\nsimply <code>()</code> (an empty list) is value-initialized.  An object with static\nlifetime is zero-initialized before program start (always); if it has a\nnon-trivial constructor, its constructor will be called sometime later\n(but before entering <code>main</code>).  All other objects defined with no\ninitializer are default-initialized.</p>\n<p>In your code, <code>obiekt1</code> is default-initialized; in this case, a no-op\n(leaving the members uninitialized).  <code>obiekt2</code> is initialized by copy\nof a value-initialized temporary; the value-initialization sets <code>a</code> to\n0.  (The actual copy may be optimized out, with the value-initialization\ntaking place directly on the object.)</p>\n", "OwnerUserId": "649665", "PostTypeId": "2", "Id": "8758734", "Score": "3", "CreationDate": "2012-01-06T13:44:17.300", "LastActivityDate": "2012-01-06T13:44:17.300"}});