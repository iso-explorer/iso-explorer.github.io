post_cb({"24634416": {"CommentCount": "3", "ViewCount": "203", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2014-07-08T14:27:45.037", "LastActivityDate": "2014-07-08T14:51:28.823", "Title": "Why does the declaration `void(*pf)(int) = bar;` fires the `static_assert` in the snippet below?", "AcceptedAnswerId": "24634760", "LastEditDate": "2017-05-23T12:11:01.687", "Id": "24634416", "Score": "3", "Body": "<p>This is a continuation of <a href=\"https://stackoverflow.com/q/24617413/3694387\">my prior question</a>. Note that the declaration <code>void (*pf)(int) = bar;</code> fires the <code>static_assert</code>. I don't understand why. Note also that if I replace <code>bar</code>by <code>bar&lt;const int&gt;</code> in this declaration the code compiles.</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;type_traits&gt;\n\ntemplate&lt;typename T&gt;\nvoid bar(T t)\n{\n    static_assert(std::is_same&lt;T, const int&gt;::value, \"Error!\");\n    std::cout &lt;&lt; t &lt;&lt; '\\n';\n}\n\nint main()\n{\n    //  static_assert doesn't fire because T==const int\n    bar&lt;const int&gt;(1);\n\n    //  But here static_assert fires because T==int (see the error message). Why is this?\n    //  If I replace `bar` by `bar&lt;const int&gt;` below the code compiles.\n\n    void(*pf)(int) = bar;\n    pf(1000);\n}\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/d23432b0dd91e2c3\" rel=\"nofollow noreferrer\">Live example</a></p>\n", "Tags": "<c++><templates><c++11>", "OwnerUserId": "3694387", "AnswerCount": "2"}, "24634807": {"ParentId": "24634416", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>The compiler is deducing that <code>T</code> = <code>int</code> based on the function pointer signature provided. Changing <code>void(*pf)(int)</code> to <code>void(*pf)(const int)</code> doesn't fix it though, because cv qualifiers are dropped during type deduction (and, as dyp pointed out in the comments, when determining the type of a function). \u00a7 14.8.2.1/3 of the C++11 draft (\"Deducing template arguments from a function call\"):</p>\n<blockquote>\n<p id=\"so_24634416_24634807_0\">If P is a cv-qualified type, the top level cv-qualifiers of P\u2019s type\n  are ignored for type deduction</p>\n</blockquote>\n<p>To fix this, explicitly indicate the type you want:</p>\n<p><code>void(*pf)(const int) = bar&lt;const int&gt;;</code></p>\n", "OwnerUserId": "3549027", "LastEditorUserId": "3549027", "LastEditDate": "2014-07-08T14:51:28.823", "Id": "24634807", "Score": "2", "CreationDate": "2014-07-08T14:44:07.963", "LastActivityDate": "2014-07-08T14:51:28.823"}, "bq_ids": {"n4140": {"so_24634416_24634807_0": {"section_id": 303, "quality": 1.0, "length": 9}}, "n3337": {"so_24634416_24634807_0": {"section_id": 294, "quality": 1.0, "length": 9}}, "n4659": {"so_24634416_24634807_0": {"section_id": 310, "quality": 0.7777777777777778, "length": 7}}}, "24634760": {"ParentId": "24634416", "PostTypeId": "2", "CommentCount": "7", "Body": "<p>The behavior is quite straightforward. <code>T</code> is being deduced as <code>int</code> from the function pointer type below, hence the <code>static_assert</code> fails.</p>\n<pre><code>void(*pf)(int) = bar; // [T = int]\n</code></pre>\n<blockquote>\n<p id=\"so_24634416_24634760_0\">if I replace <code>bar</code> by <code>bar&lt;const int&gt;</code> in this declaration the code compiles</p>\n</blockquote>\n<p>That's because you've now explicitly specified that <code>T</code> is <code>const int</code>, and it's no longer being deduced as <code>int</code>. </p>\n<pre><code>void(*pf)(int) = bar&lt;const int&gt;; // [T = const int]\n</code></pre>\n<p>You're still allowed to create a function pointer of type <code>void(*)(int)</code> to the function <code>void(const int)</code> because top level <code>const</code>s are not part of the function signature.</p>\n<p>Adding <code>const</code> to the function pointer type doesn't help because of the same reason, the top level <code>const</code> in the function argument type is discarded before <code>T</code> is deduced, and it results in the same behavior as the first example.</p>\n<pre><code>void(*pf)(const int) = bar;  // [T = int]\n</code></pre>\n", "OwnerUserId": "241631", "LastEditorUserId": "241631", "LastEditDate": "2014-07-08T14:48:22.257", "Id": "24634760", "Score": "5", "CreationDate": "2014-07-08T14:42:12.153", "LastActivityDate": "2014-07-08T14:48:22.257"}});