post_cb({"bq_ids": {"n4140": {"so_37913950_37913980_0": {"length": 11, "quality": 0.8461538461538461, "section_id": 6019}}, "n3337": {"so_37913950_37913980_0": {"length": 11, "quality": 0.8461538461538461, "section_id": 5787}}, "n4659": {"so_37913950_37913980_0": {"length": 11, "quality": 0.8461538461538461, "section_id": 7518}}}, "37913950": {"ViewCount": "180", "Body": "<p>Say I have the class hierarchy:</p>\n<pre><code>class Base{\n}\n\nclass Derived : public Base{\n\n}\n</code></pre>\n<p>Suppose I wish to check if an object is of type Derived or not :</p>\n<pre><code>Base* b = new Base();\nDerived* d = dynamic_cast&lt;Derived*&gt;(b);\nif(b!=nullptr){ //Should this check be for 0, NULL or nullptr ?\n// b is not  Derived\n}\n</code></pre>\n<p>Should I be testing for 0, NULL or nullptr in C++11 ?</p>\n<p>Found an answer: (Sorry, it didn't show up when I searched via google)\n<a href=\"https://stackoverflow.com/questions/16590920/in-c11-does-dynamic-cast-return-nullptr-or-0?rq=1\">In c++11, does dynamic_cast return nullptr or 0?</a></p>\n", "AcceptedAnswerId": "37913980", "Title": "In C++11, does a failed dynamic_cast return NULL or std::nullptr?", "CreationDate": "2016-06-20T02:39:46.957", "LastActivityDate": "2016-06-20T02:58:43.113", "CommentCount": "6", "LastEditDate": "2017-05-23T12:22:45.373", "PostTypeId": "1", "Tags": "<c++><c++11>", "Id": "37913950", "AnswerCount": "1", "Score": "-1", "OwnerUserId": "2990509", "ClosedDate": "2016-06-20T08:15:37.000", "LastEditorUserId": "-1"}, "37913980": {"Id": "37913980", "PostTypeId": "2", "Body": "<b>C++11 \u00a75.2.7/9</b>:\n\n<blockquote>\n<p id=\"so_37913950_37913980_0\"><strong>\u201d</strong> The value of a failed [dynamic] cast to pointer type is the null pointer value of the required result type.</p>\n</blockquote>\n<p>Regardless, it's a good idea to use <code>nullptr</code> in order to communicate clearly to readers of the code.</p>\n<p>Note that a failed <code>dynamic_cast</code> to reference type throws an exception, since there's no such thing as a null-reference.</p>\n<hr>\n<p>In order to check if an object <code>o</code> of statically known polymorphic type <code>Base</code> is really a <code>Derived</code>, you can use a <code>dynamic_cast</code> directly in an <code>if</code> condition \u2013 there's no need to compare it explicitly to anything:</p>\n<pre><code>if( auto pd = dynamic_cast&lt;Derived*&gt;( &amp;o ) )\n{\n    // Use pd here\n}\n</code></pre>\n</hr>", "LastEditorUserId": "464581", "LastActivityDate": "2016-06-20T02:56:18.693", "Score": "3", "CreationDate": "2016-06-20T02:44:15.457", "ParentId": "37913950", "CommentCount": "6", "OwnerUserId": "464581", "LastEditDate": "2016-06-20T02:56:18.693"}});