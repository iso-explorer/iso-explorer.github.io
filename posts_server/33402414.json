post_cb({"bq_ids": {"n4140": {"so_33402414_33403801_0": {"length": 34, "quality": 0.9714285714285714, "section_id": 6022}}, "n3337": {"so_33402414_33403801_0": {"length": 34, "quality": 0.9714285714285714, "section_id": 5790}}, "n4659": {"so_33402414_33403801_0": {"length": 29, "quality": 0.8285714285714286, "section_id": 7521}}}, "33403801": {"Id": "33403801", "PostTypeId": "2", "Body": "<p>If we go to the draft C++ standard it tell us that unless the expression glvalue of a polymorphic class type the result is based on the static type of the object. From section <code>5.2.8</code> <em>[expr.typeid]</em> with emphasis mine:</p>\n<blockquote>\n<p id=\"so_33402414_33403801_0\">When typeid is applied to an <strong>expression other than a glvalue of a polymorphic class type, the result refers\n  to a std::type_info object representing the static type of the expression.</strong> Lvalue-to-rvalue (4.1), array-topointer\n  (4.2), and function-to-pointer (4.3) conversions are not applied to the expression. If the type of the\n  expression is a class type, the class shall be completely-defined. The expression is an unevaluated operand\n  (Clause 5).</p>\n</blockquote>\n", "LastActivityDate": "2015-10-29T00:10:18.623", "CommentCount": "0", "CreationDate": "2015-10-29T00:10:18.623", "ParentId": "33402414", "Score": "1", "OwnerUserId": "1708801"}, "33402474": {"Id": "33402474", "PostTypeId": "2", "Body": "<p>The operand of <code>typeid</code> is only evaluated if it is a glvalue of polymorphic class type. Since the return type of <code>mul10</code>, namely <code>int</code>, is not a polymorphic class type, the operand is not evaluated, meaning that <code>mul10</code> is not called.</p>\n", "LastActivityDate": "2015-10-28T22:10:02.673", "CommentCount": "2", "CreationDate": "2015-10-28T22:10:02.673", "ParentId": "33402414", "Score": "12", "OwnerUserId": "481267"}, "33402414": {"ViewCount": "199", "Body": "<p>Is a function not called inside a typeid? Consider the code below.</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;typeinfo&gt;\nusing namespace std;\n\nint mul10(int &amp;s)\n{\n    static int count = 1;\n    cout &lt;&lt; \"Evaluating call \" &lt;&lt; count &lt;&lt; endl;\n    count++;\n    s *= 10;\n    return(s);\n}\n\nint main()\n{\n    int i = 5;\n    cout &lt;&lt; typeid(mul10(i)).name() &lt;&lt; endl;\n    cout &lt;&lt; i &lt;&lt; endl;\n    return(0);\n}\n</code></pre>\n<p>So here the output is</p>\n<pre><code>int\n5\n</code></pre>\n<p>So clearly the value of <code>i</code> did not change and also the function <code>mul10</code> was not actually called. Is that how typeid arguments evaluated?</p>\n", "AcceptedAnswerId": "33402474", "Title": "Is function not called inside typeid?", "CreationDate": "2015-10-28T22:04:28.407", "Id": "33402414", "CommentCount": "4", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2015-10-28T22:08:23.810", "LastEditorUserId": "3102264", "LastActivityDate": "2015-10-29T00:10:18.623", "Score": "9", "OwnerUserId": "2556628", "Tags": "<c++>", "AnswerCount": "2"}});