post_cb({"bq_ids": {"n4140": {"so_29705794_29705836_0": {"length": 18, "quality": 0.9473684210526315, "section_id": 5846}, "so_29705794_29705836_1": {"length": 6, "quality": 0.8571428571428571, "section_id": 7114}, "so_29705794_29705836_2": {"length": 16, "quality": 0.5333333333333333, "section_id": 7114}}, "n3337": {"so_29705794_29705836_0": {"length": 18, "quality": 0.9473684210526315, "section_id": 5616}, "so_29705794_29705836_1": {"length": 4, "quality": 0.5714285714285714, "section_id": 5662}, "so_29705794_29705836_2": {"length": 16, "quality": 0.5333333333333333, "section_id": 6858}}, "n4659": {"so_29705794_29705836_0": {"length": 18, "quality": 0.9473684210526315, "section_id": 7325}, "so_29705794_29705836_1": {"length": 6, "quality": 0.8571428571428571, "section_id": 8615}, "so_29705794_29705836_2": {"length": 16, "quality": 0.5333333333333333, "section_id": 8615}}}, "29705836": {"Id": "29705836", "PostTypeId": "2", "Body": "<p>[class]/2:</p>\n<blockquote>\n<p id=\"so_29705794_29705836_0\">A <em>class-name</em> is inserted into the scope in which it is declared\n  immediately after the class-name is seen. <strong>The <em>class-name</em> is also\n  inserted into the scope of the class itself; this is known as the\n  <em>injected-class-name</em>.</strong> </p>\n</blockquote>\n<p>I.e. <code>A::A::A::A</code> refers to <code>A</code> as well. In some contexts, <code>A::A</code> could name the constructor instead, though - [class.qual]/2 covers this, and its note even addresses your example:</p>\n<blockquote>\n<p id=\"so_29705794_29705836_1\">In a lookup in which function names are not ignored<sup>33</sup> and\n  the <em>nested-name-specifier</em> nominates a class <code>C</code></p>\n<ul>\n<li>if the name specified after the <em>nested-name-specifier</em>, when looked up in <code>C</code>, is the <em>injected-class-name</em>\n         of <code>C</code> (Clause 9), or</li>\n<li>in a <em>using-declaration</em> (7.3.3) that is a <em>member-declaration</em>, if the name specified after the <em>nested-name-\n       specifier</em> is the same as the identifier or the <em>simple-template-id</em>\u2019s <em>template-name</em> in the last component\n            of the <em>nested-name-specifier</em>,</li>\n</ul>\n<p id=\"so_29705794_29705836_2\"><strong>the name is instead considered to name the constructor of class <code>C</code></strong>. [ <em>Note:</em> <strong>For example, the constructor is not an acceptable\n  lookup result in an <em>elaborated-type-specifier</em> so the constructor\n  would not be used in place of the <em>injected-class-name</em>.</strong> <em>\u2014 end\n  note</em> ]\n  <hr>\n<sup>33)</sup> Lookups in which function names are ignored include\n  names appearing in a <em>nested-name-specifier</em>, an <em>elaborated-type-\n  specifier</em>, or a <em>base-specifier</em>.</hr></p>\n</blockquote>\n<p>So in a statement such as</p>\n<pre><code>A::A a;\n</code></pre>\n<p>Function names are <strong>not</strong> ignored when looking up <code>A::A</code>, and thus the code is ill-formed as <code>A::A</code> refers to the constructor. However, in</p>\n<pre><code>struct B : A::A {};\nstruct A::A a;\n</code></pre>\n<p>Everything is fine as function names are ignored in base-specifiers and elaborated-type-specifiers.</p>\n", "LastEditorUserId": "3647361", "LastActivityDate": "2015-04-20T15:10:07.833", "Score": "9", "CreationDate": "2015-04-17T17:30:57.240", "ParentId": "29705794", "CommentCount": "13", "LastEditDate": "2015-04-20T15:10:07.833", "OwnerUserId": "3647361"}, "29705794": {"ViewCount": "217", "Body": "<pre><code>struct A{};\nint A;\nstruct A a;\nstruct A::A b;\n</code></pre>\n<p>The last two declarations above are equivalent.They both declare objects of type A. Where in the Standard can I find or deduce this?</p>\n", "AcceptedAnswerId": "29705836", "Title": "Where in the Standard (C++14) does it say that the following two declarations are equivalent?", "CreationDate": "2015-04-17T17:28:31.360", "Id": "29705794", "CommentCount": "8", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2015-04-20T15:10:07.833", "Score": "8", "OwnerUserId": "4470935", "Tags": "<c++><language-lawyer><c++14>", "AnswerCount": "1"}});