post_cb({"bq_ids": {"n4140": {"so_47962555_47962619_1": {"length": 17, "quality": 1.0, "section_id": 435}}, "n3337": {"so_47962555_47962619_1": {"length": 14, "quality": 0.8235294117647058, "section_id": 427}}, "n4659": {"so_47962555_47962619_1": {"length": 17, "quality": 1.0, "section_id": 454}}}, "47962617": {"Id": "47962617", "PostTypeId": "2", "Body": "<pre><code>const char* something = \"SOMETHING HERE!!!\";\n</code></pre>\n<p>The default-initializer on the right is, as its name implies, only used when you don't provide an explicit initializer in a constructor's initializer list. Let's look at yours:</p>\n<pre><code>Test(const int&amp; number) : Test(something, number) { }\n</code></pre>\n<p>Okay, we're delegating to another constructor. That other constructor will perform full initialization, so the default initializer is not used. But... we're passing in the uninitialized value of <code>something</code> as parameter.</p>\n<pre><code>Test(const char* _something, const int&amp; number) { /* ... */ }\n</code></pre>\n<p>Uh-oh. Now we're trying to use the value of <code>_something</code>, which is a copy of <code>something</code>, which is indeterminate. Undefined Behaviour and fire ensue.</p>\n<p>You really shouldn't pass the value of a class member as parameter to its constructor, unless you have an infinite supply of fireproof chickens and eggs.</p>\n<hr>\n<p>The behaviour you're looking for can be obtained by putting the default value in the call to the delegate constructor:</p>\n<pre><code>Test(const int&amp; number) : Test(\"SOMETHING HERE!!!\", number) { }\n</code></pre>\n<p>... or keeping it in a dedicated static variable:</p>\n<pre><code>static constexpr char *const defaultSomething = \"SOMETHING HERE!!!\";\nTest(const int&amp; number) : Test(defaultSomething, number) { }\n</code></pre>\n</hr>", "LastEditorUserId": "3233393", "LastActivityDate": "2017-12-24T17:27:19.240", "Score": "20", "CreationDate": "2017-12-24T17:21:51.083", "ParentId": "47962555", "CommentCount": "2", "OwnerUserId": "3233393", "LastEditDate": "2017-12-24T17:27:19.240"}, "47962619": {"Id": "47962619", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_47962555_47962619_0\">This is a bug or my fault?</p>\n</blockquote>\n<p>Oh, it's your fault. The default member initializer is only used to initialize the member object in a non-delegating constructor. According to <a href=\"https://timsong-cpp.github.io/cppwp/n4659/class.base.init#9\" rel=\"noreferrer\">[class.base.init]/9</a>, emphasis mine:</p>\n<blockquote>\n<p id=\"so_47962555_47962619_1\"><strong>In a non-delegating constructor</strong>, if a given potentially constructed subobject is not designated by a mem-initializer-id\n  (including the case where there is no mem-initializer-list because the\n  constructor has no ctor-initializer), then</p>\n<ul>\n<li>if the entity is a non-static data member that has a default member initializer and either [...] the entity is initialized from its\n  default member initializer as specified in [dcl.init];</li>\n</ul>\n</blockquote>\n<p>So <code>something</code> isn't initialized when you pass it to the target constructor. Your program has undefined behavior, and goes bust.</p>\n", "LastActivityDate": "2017-12-24T17:22:07.577", "CommentCount": "4", "CreationDate": "2017-12-24T17:22:07.577", "ParentId": "47962555", "Score": "15", "OwnerUserId": "817643"}, "47962555": {"ViewCount": "576", "Body": "<p>Actually the segmentation fault happens in another program I tried to compile which happens because of this behaviour.</p>\n<p>My question is:</p>\n<blockquote>\n<p id=\"so_47962555_47962555_0\">This is a bug or my fault?</p>\n</blockquote>\n<p>Reproducible in any way (even if the <code>something</code> field is private or protected) and here is my example:</p>\n<p><strong>main.cc:</strong></p>\n<pre><code>#include &lt;iostream&gt;\nclass Test {\n    public:\n        const char* something = \"SOMETHING HERE!!!\";\n        Test(const int&amp; number) : Test(something, number) { }\n        // XXX: changed `something` to `_something` to make it different\n        Test(const char* _something, const int&amp; number) {\n            std::cout &lt;&lt; _something &lt;&lt; std::endl;\n            std::cout &lt;&lt; number &lt;&lt; std::endl; }\n        ~Test() { }\n};\n\nint main(int argc, char* argv[]) {\n    Test te1(345);\n    Test te2(\"asdasdad\", 34523);\n    return 0;\n}\n</code></pre>\n<p>And here is what happens when compiling with:</p>\n<pre><code>g++ main.cc -Os -o main\n</code></pre>\n<p>and running with:</p>\n<pre><code>./main\n</code></pre>\n<p>the output is:</p>\n<pre><code>pi@pi:~/ $ ./main\nA\"\ufffd~ &lt;-- this is random\n345\nasdasdad\n34523\n</code></pre>\n<p>But when I enable optimization with <code>-O0</code> or <code>-O1</code> or <code>-O2</code> ... the output is only a new line:</p>\n<pre><code>pi@pi:~/ $ ./main\npi@pi:~/ $\n</code></pre>\n<p>G++ version:</p>\n<pre><code>pi@pi:~/ $ g++ --version\ng++ (Raspbian 6.3.0-18+rpi1) 6.3.0 20170516\n</code></pre>\n", "AcceptedAnswerId": "47962617", "Title": "Delegating constructor gives segmentation fault when using class field for argument", "CreationDate": "2017-12-24T17:12:50.567", "LastActivityDate": "2017-12-24T17:32:32.270", "CommentCount": "3", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2017-12-24T17:32:32.270", "LastEditorUserId": "3233393", "Id": "47962555", "Score": "11", "OwnerUserId": "7801889", "Tags": "<c++><native><raspberry-pi3><delegating-constructor>", "AnswerCount": "2"}});