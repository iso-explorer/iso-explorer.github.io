post_cb({"bq_ids": {"n4140": {"so_36204506_36204704_0": {"length": 17, "quality": 1.0, "section_id": 5514}, "so_36204506_36204674_0": {"length": 17, "quality": 1.0, "section_id": 5514}}, "n3337": {"so_36204506_36204704_0": {"length": 17, "quality": 1.0, "section_id": 5300}, "so_36204506_36204674_0": {"length": 17, "quality": 1.0, "section_id": 5300}}, "n4659": {"so_36204506_36204704_0": {"length": 17, "quality": 1.0, "section_id": 6949}, "so_36204506_36204674_0": {"length": 17, "quality": 1.0, "section_id": 6949}}}, "36204506": {"ViewCount": "114", "Body": "<p>Consider this code:</p>\n<pre><code>using type = long;\n\nnamespace n {\n  using type = long;\n}\n\nusing namespace n;\nint main() {\n  type t;\n}\n</code></pre>\n<p>This compiles cleanly on <a href=\"http://coliru.stacked-crooked.com/a/99e20c9456a6551b\" rel=\"nofollow noreferrer\">Clang 3.7</a> and <a href=\"http://coliru.stacked-crooked.com/a/89db4e74e431f3f3\" rel=\"nofollow noreferrer\">GCC 5.3</a>, but <a href=\"http://webcompiler.cloudapp.net/\" rel=\"nofollow noreferrer\">MSVC 19</a>* gives the following error message:</p>\n<pre><code>main.cpp(9): error C2872: 'type': ambiguous symbol\nmain.cpp(1): note: could be 'long type'\nmain.cpp(4): note: or       'n::type'\n</code></pre>\n<p>Is this code well-formed? What part of the standard notes whether the alias is resolved before ambiguity checks?</p>\n<hr>\n<p>Note that Clang and GCC both give similar errors to MSVC if you change one of those aliases.</p>\n<p>I'm fully aware of how qualifying the name would resolve the ambiguity, I'm just interested in what the standard has to say about this.</p>\n<hr>\n<p>*- Just paste the code and run it at that link, I don't know if there's an online MSVC compiler with permalinks</p>\n</hr></hr>", "AcceptedAnswerId": "36204674", "Title": "Compiler discrepancy: Interaction between alias resolution and name lookup", "CreationDate": "2016-03-24T15:53:17.103", "Id": "36204506", "CommentCount": "0", "LastEditDate": "2016-03-24T17:25:04.097", "PostTypeId": "1", "LastEditorUserId": "3647361", "LastActivityDate": "2016-03-24T17:25:04.097", "Score": "9", "OwnerUserId": "496161", "Tags": "<c++><c++11><language-lawyer><typedef><name-lookup>", "AnswerCount": "2"}, "36204674": {"Id": "36204674", "PostTypeId": "2", "Body": "<p><a href=\"http://eel.is/c++draft/basic.namespace#namespace.udir-6\" rel=\"nofollow\">[namespace.udir]/6</a>:</p>\n<blockquote>\n<p id=\"so_36204506_36204674_0\">If name lookup finds a declaration for a name in two different namespaces, and the declarations <strong>do not declare the same entity</strong> and do not declare functions, the use of the name is ill-formed.</p>\n</blockquote>\n<p>However, these do declare the name to refer to the same type, hence the program should be well-formed. This interpretation is e.g. confirmed by the comments in <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_active.html#1894\" rel=\"nofollow\">core issue 1894</a>:</p>\n<pre><code>  //[..]\n\n  namespace C {\n    // The typedef does not redefine the name S in this\n    // scope, so issue 407's resolution does not apply.\n    typedef A::S S;\n    using A::S;\n    // **The name lookup here isn't ambiguous, because it only finds one\n    // entity**, but it finds both a typedef-name and a non-typedef-name referring\n    // to that entity, so the standard doesn't appear to say whether this is valid.\n    struct S s;\n  }\n</code></pre>\n", "LastEditorUserId": "3647361", "LastActivityDate": "2016-03-24T16:07:12.380", "Score": "4", "CreationDate": "2016-03-24T16:01:32.507", "ParentId": "36204506", "CommentCount": "0", "OwnerUserId": "3647361", "LastEditDate": "2016-03-24T16:07:12.380"}, "36204704": {"Id": "36204704", "PostTypeId": "2", "Body": "<p>7.3.4 / 6: </p>\n<blockquote>\n<p id=\"so_36204506_36204704_0\">If name lookup finds a declaration for a name in two different\n  namespaces, and the declarations do not declare the same entity and do\n  not declare functions, the use of the name is ill-formed</p>\n</blockquote>\n", "LastActivityDate": "2016-03-24T16:03:06.930", "CommentCount": "2", "CreationDate": "2016-03-24T16:03:06.930", "ParentId": "36204506", "Score": "-1", "OwnerUserId": "5245033"}});