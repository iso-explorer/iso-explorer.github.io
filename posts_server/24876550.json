post_cb({"24876550": {"CommentCount": "2", "ViewCount": "463", "CreationDate": "2014-07-21T23:32:07.160", "LastActivityDate": "2014-07-21T23:44:52.773", "Title": "How does overload resolution work with variadic functions?", "AcceptedAnswerId": "24876671", "PostTypeId": "1", "Id": "24876550", "Score": "1", "Body": "<p>Suppose I have this program:</p>\n<pre><code>#include &lt;iostream&gt;\n\nint fun(...) {return 0;}\n\ntemplate &lt;typename... Args&gt;\nint fun(const Args&amp;...) {return 1;}\n\nint fun(const double val) {return 2;}\n\nint main()\n{\n  std::cout &lt;&lt; fun(1,2,3) &lt;&lt; fun(1) &lt;&lt; fun(1.0);\n  return 0;\n}\n</code></pre>\n<p>This program returns the following:</p>\n<pre><code>112\n</code></pre>\n<p>I understand why <code>fun(1.0)</code> would return <code>2</code>, as that's the closest matching function candidate, but why do the first 2 examples return <code>1</code>?</p>\n<p>This page (<a href=\"http://en.cppreference.com/w/cpp/language/overload_resolution\" rel=\"nofollow\">http://en.cppreference.com/w/cpp/language/overload_resolution</a>) provides a reference of function overloading rules, but seems to stop short of covering variadics. Where can I find out the rules for overloading of variadic / template variadic functions?</p>\n", "Tags": "<c++>", "OwnerUserId": "1613983", "AnswerCount": "1"}, "24876671": {"ParentId": "24876550", "CommentCount": "1", "Body": "<blockquote>\n<p id=\"so_24876550_24876671_0\">why do the first 2 examples return <code>1</code>?</p>\n</blockquote>\n<p>A C-style variadic function is always the worst match (technically speaking it involves an \"ellipsis conversion sequence\" which is worse than any standard or user-defined conversion sequence). For <code>fun(1, 2, 3)</code>, with the variadic function template, deduction is performed as usual giving <code>Args</code> = <code>int</code>, <code>int</code>, <code>int</code>. This is an exact match.</p>\n<p>For <code>fun(1)</code> the variadic function template wins again because <code>Args</code> is deduced as <code>int</code> and once again we have an exact match, which is better than the floating-integral conversion required to call <code>fun(double)</code>.</p>\n<blockquote>\n<p id=\"so_24876550_24876671_1\">Where can I find out the rules for overloading of variadic / template variadic functions?</p>\n</blockquote>\n<p>The page you linked already covers what you need to know about C-style variadic functions:</p>\n<blockquote>\n<p id=\"so_24876550_24876671_2\">1) A standard conversion sequence is always better than a user-defined conversion sequence or an ellipsis conversion sequence.</p>\n<p id=\"so_24876550_24876671_3\">2) A user-defined conversion sequence is always better than an ellipsis conversion sequence</p>\n</blockquote>\n<p>For variadic templates there aren't really any special rules; template parameter deduction is performed as usual and then the usual overload resolution rules are applied.</p>\n<p>The rules get more complicated in a case like this:</p>\n<pre><code>template &lt;class... Args&gt; int f(Args...) { return 1; }\ntemplate &lt;class T&gt; int f(T) { return 2; }\nf(1); // returns 2\n</code></pre>\n<p>In this case the usual rules can't resolve the overload, but the second function is selected because it's \"more specialized\". The rules for determining when one function template is more specialized than another are (in my opinion) very hard to understand. You can find them at \u00a714.5.6.2 [temp.func.order] in the C++11 standard.</p>\n", "OwnerUserId": "481267", "PostTypeId": "2", "Id": "24876671", "Score": "6", "CreationDate": "2014-07-21T23:44:52.773", "LastActivityDate": "2014-07-21T23:44:52.773"}, "bq_ids": {"n4140": {"so_24876550_24876671_3": {"section_id": 638, "quality": 0.8888888888888888, "length": 8}, "so_24876550_24876671_2": {"section_id": 638, "quality": 0.9090909090909091, "length": 10}}, "n3337": {"so_24876550_24876671_3": {"section_id": 628, "quality": 0.8888888888888888, "length": 8}, "so_24876550_24876671_2": {"section_id": 628, "quality": 0.9090909090909091, "length": 10}}, "n4659": {"so_24876550_24876671_3": {"section_id": 666, "quality": 0.8888888888888888, "length": 8}, "so_24876550_24876671_2": {"section_id": 666, "quality": 0.9090909090909091, "length": 10}}}});