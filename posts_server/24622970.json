post_cb({"bq_ids": {"n4140": {"so_24622970_24635826_1": {"length": 16, "quality": 0.8888888888888888, "section_id": 550}, "so_24622970_24635826_0": {"length": 7, "quality": 0.7, "section_id": 550}}, "n3337": {"so_24622970_24635826_1": {"length": 16, "quality": 0.8888888888888888, "section_id": 541}, "so_24622970_24635826_0": {"length": 7, "quality": 0.7, "section_id": 541}}, "n4659": {"so_24622970_24635826_1": {"length": 16, "quality": 0.8888888888888888, "section_id": 571}}}, "24635826": {"Id": "24635826", "PostTypeId": "2", "Body": "<p>Actually T.C. is right, the C++11 FDIS says in <a href=\"http://timepp.drivehq.com/cpp11/data/cpp.predefined.html#fn160\" rel=\"nofollow noreferrer\">\"16.8 Predefined macro names [cpp.predefined]\"</a> that</p>\n<blockquote>\n<p id=\"so_24622970_24635826_0\">The name __cplusplus is <strong>defined to the value 201103L</strong> when compiling a C++ translation unit. </p>\n</blockquote>\n<p>The footnote states:</p>\n<blockquote>\n<p id=\"so_24622970_24635826_1\">It is intended that <strong>future versions of this standard will replace the value of this macro with a greater value</strong>. Non-conforming com- pilers should use a value with at most five decimal digits.</p>\n</blockquote>\n<p>So going with the following code seems totally legit to me.</p>\n<pre><code>#if __cplusplus &gt; 201103L\n//c++1y or above\n#else\n//c++11 or below\n#endif\n</code></pre>\n<p>However, some compiler might not follow the standard and you might want to check if the <code>_cplusplus</code> value has been incremented for c++1y.</p>\n<p>The GCC, for example, had this flag set to 1 until the version 4.7.0.</p>\n<p>If you need more information on the <code>_cplusplus</code> flag, you should take a look at <a href=\"https://stackoverflow.com/questions/2324658/how-to-determine-the-version-of-the-c-standard-used-by-the-compiler\">this question</a></p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2014-07-08T15:35:54.567", "Score": "2", "CreationDate": "2014-07-08T15:28:19.620", "ParentId": "24622970", "CommentCount": "0", "OwnerUserId": "1907026", "LastEditDate": "2017-05-23T12:29:27.973"}, "24622970": {"ViewCount": "232", "Body": "<p>I would like to use the generalized lambda capture introduced in C++14 (see <a href=\"https://stackoverflow.com/questions/8640393/move-capture-in-lambda\">Move capture in lambda</a> for an explanation). However, the remainder of my code is C++11-friendly. I would like to do something along the lines of</p>\n<pre><code>#ifdef CPP14\n// move capture in lambda\n#else\n// capture by-value\n#endif\n</code></pre>\n<p>However, there are no good cross-compiler flags to infer versions. Is there anything anyone can suggest? (other than, of course, defining my own macros)</p>\n", "AcceptedAnswerId": "24635826", "Title": "Macro for generalized lambda capture", "CreationDate": "2014-07-08T02:55:14.887", "Id": "24622970", "CommentCount": "3", "LastEditDate": "2017-05-23T11:57:51.240", "PostTypeId": "1", "LastEditorUserId": "-1", "LastActivityDate": "2014-07-08T15:35:54.567", "Score": "4", "OwnerUserId": "1493321", "Tags": "<c++><c++11><lambda><c++14>", "AnswerCount": "1"}});