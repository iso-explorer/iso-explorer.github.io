post_cb({"20817743": {"Id": "20817743", "PostTypeId": "2", "Body": "<p>C++11 14.7.2 [temp.explicit] para 8:</p>\n<blockquote>\n<p id=\"so_20816943_20817743_0\">An explicit instantiation that names a class template specialization is also an explicit instantiation of the\n  same kind (declaration or definition) of each of its members (not including members inherited from base\n  classes) that has not been previously explicitly specialized in the translation unit containing the explicit\n  instantiation, except as described below.</p>\n</blockquote>\n<p>Without espousing all the detail \"described below\", your explicit instantiation instantiates all members well-defined or otherwise. This is the point of explicit instantiation: to have all the code for every member defined in one place. At the point of instantation, it's not clear which if any members will actually be used: for all you know, some client that links to your library may use that <code>operator[]</code>.</p>\n<p>The ideal fix is (wild speculation here) to use <code>std::enable_if</code> to remove the <code>operator[]</code> overloads for non-array types instead of making the code ill-formed for non-array types.</p>\n<p>Some other options:</p>\n<ul>\n<li>Don't explicitly instantiate anything.</li>\n<li>Explicitly instantiate each of the desired members individually, avoiding the ill-formed members.</li>\n</ul>\n", "LastEditorUserId": "923854", "LastActivityDate": "2013-12-29T03:22:51.297", "Score": "2", "CreationDate": "2013-12-28T18:13:17.283", "ParentId": "20816943", "CommentCount": "5", "OwnerUserId": "923854", "LastEditDate": "2013-12-29T03:22:51.297"}, "bq_ids": {"n4140": {"so_20816943_20817743_0": {"length": 33, "quality": 1.0, "section_id": 257}}, "n3337": {"so_20816943_20817743_0": {"length": 33, "quality": 1.0, "section_id": 248}}, "n4659": {"so_20816943_20817743_0": {"length": 33, "quality": 1.0, "section_id": 264}}}, "20816943": {"ViewCount": "739", "Body": "<p>Hi fellow programmers,</p>\n<p>I'm creating a C++ DLL library in which I'm using boost's (1.55) shared_ptr.\nHowewer, when I'm compiling the project with Visual Studio 2013 a bunch of wild errors C2562 appears:</p>\n<pre><code>Error   1   error C2562: 'boost::shared_ptr&lt;MEngine::i18n::ITranslationSource&gt;::operator []' : 'void' function returning a value    f:\\developer\\cplus\\lib\\boost_1_55_0\\boost\\smart_ptr\\shared_ptr.hpp  663 1   MEngine\nError   2   error C2562: 'boost::shared_ptr&lt;MEngine::i18n::ITranslationSource&gt;::operator []' : 'void' function returning a value    f:\\developer\\cplus\\lib\\boost_1_55_0\\boost\\smart_ptr\\shared_ptr.hpp  663 1   MEngine\nError   3   error C2562: 'boost::shared_ptr&lt;MEngine::Object::GameObject&gt;::operator []' : 'void' function returning a value  f:\\developer\\cplus\\lib\\boost_1_55_0\\boost\\smart_ptr\\shared_ptr.hpp  663 1   MEngine\nError   4   error C2562: 'boost::shared_ptr&lt;MEngine::Object::GameObject&gt;::operator []' : 'void' function returning a value  f:\\developer\\cplus\\lib\\boost_1_55_0\\boost\\smart_ptr\\shared_ptr.hpp  663 1   MEngine\nError   5   error C2562: 'boost::shared_ptr&lt;MEngine::Object::GameObject&gt;::operator []' : 'void' function returning a value  f:\\developer\\cplus\\lib\\boost_1_55_0\\boost\\smart_ptr\\shared_ptr.hpp  663 1   MEngine\nError   6   error C2562: 'boost::shared_ptr&lt;MEngine::i18n::ITranslationSource&gt;::operator []' : 'void' function returning a value    f:\\developer\\cplus\\lib\\boost_1_55_0\\boost\\smart_ptr\\shared_ptr.hpp  663 1   MEngine\nError   7   error C2562: 'boost::shared_ptr&lt;MEngine::i18n::ITranslationSource&gt;::operator []' : 'void' function returning a value    f:\\developer\\cplus\\lib\\boost_1_55_0\\boost\\smart_ptr\\shared_ptr.hpp  663 1   MEngine\nError   8   error C2562: 'boost::shared_ptr&lt;MEngine::i18n::ITranslationSource&gt;::operator []' : 'void' function returning a value    f:\\developer\\cplus\\lib\\boost_1_55_0\\boost\\smart_ptr\\shared_ptr.hpp  663 1   MEngine\n</code></pre>\n<p>As you can see there's the same error for every shared_ptr template instantiation.\nThe thing is I never use that operator, so shouldn't the code for it not be generated?</p>\n<p>In that case it is and it is completely understandable why that error appears, because in the shared_ptr.h there is this:</p>\n<pre><code>typename boost::detail::sp_array_access&lt; T &gt;::type operator[] ( std::ptrdiff_t i ) const\n{\n    BOOST_ASSERT( px != 0 );\n    BOOST_ASSERT( i &gt;= 0 &amp;&amp; ( i &lt; boost::detail::sp_extent&lt; T &gt;::value || boost::detail::sp_extent&lt; T &gt;::value == 0 ) );\n\n    return px[ i ];\n}\n</code></pre>\n<p>and that:</p>\n<pre><code>template&lt; class T &gt; struct sp_array_access\n{\n    typedef void type;\n};\n...\ntemplate&lt; class T &gt; struct sp_array_access&lt; T[] &gt;\n{\n    typedef T &amp; type;\n};\n...\n</code></pre>\n<p>Which means that for smart_ptr&lt; T &gt; if T is not an array the return type of operator[] is void, so the code for the operator will not compile.</p>\n<p>So the real problem is (I think) that the code for the operator is generated but it shouldn't.\nI need to export the shared_ptr to my DLL's interface and since it's a template I'm using this to instantiate and export it:</p>\n<pre><code>EXPIMP_TEMPLATE template class MENGINE_API boost::shared_ptr&lt;MEngine::i18n::ITranslationSource&gt;;\n</code></pre>\n<p>where the macros are (pretty standard):</p>\n<pre><code>#ifdef MENGINE_EXPORTS\n#define MENGINE_API _declspec(dllexport)\n#define EXPIMP_TEMPLATE\n#else\n#define MENGINE_API _declspec(dllimport)\n#define EXPIMP_TEMPLATE extern\n#endif\n</code></pre>\n<p>Does the export statement which I'm using causes the generation of everything in the template?\nIf this is true then how can I get past that and achieve the export?</p>\n<p>Apologies for my English :)\nCorrecting me is also much appreciated as I'm willing to learn :)</p>\n", "AcceptedAnswerId": "20817743", "Title": "Error C2562 when using (and exporting) boost::shared_ptr<T>", "CreationDate": "2013-12-28T16:50:48.487", "Id": "20816943", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2013-12-28T17:03:14.863", "LastEditorUserId": "1781184", "LastActivityDate": "2013-12-29T03:22:51.297", "Score": "4", "OwnerUserId": "1781184", "Tags": "<c++><windows><visual-studio><boost><dll>", "AnswerCount": "1"}});