post_cb({"bq_ids": {"n4140": {"so_7423008_7423387_1": {"length": 44, "quality": 0.9361702127659575, "section_id": 434}}, "n3337": {"so_7423008_7423387_1": {"length": 44, "quality": 0.9361702127659575, "section_id": 426}}, "n4659": {"so_7423008_7423387_1": {"length": 44, "quality": 0.9361702127659575, "section_id": 452}}}, "7423008": {"ViewCount": "472", "Body": "<p>I got the following problem: There is an abstract base class, and two other abstract classes which virtually inherit from the base class, and as a conclusion have to call the Constructor of it, with all the needed arguments.</p>\n<p>But now, I got a \"normal\" class which does inherit both second order classes, and therefor has to call the baseclass-constructor on its own (as the base class is inherited virtually from both the second order classes), but both of the second order constructors take arguments to pass on to the base class constructor.</p>\n<p>Is it possible to somhow implement the constructors in a way that there will be no need to pass those, in that case unused, arguments?</p>\n<p>I hope I was able to precisely describe my problem, if there are any questions I will be happy to answer them.</p>\n", "AcceptedAnswerId": "7423387", "Title": "virtual inheritance with abstract class constructors", "CreationDate": "2011-09-14T21:08:38.173", "Id": "7423008", "CommentCount": "7", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2011-09-14T21:47:16.797", "Score": "3", "OwnerUserId": "919434", "Tags": "<c++><oop>", "AnswerCount": "1"}, "7423387": {"Id": "7423387", "PostTypeId": "2", "Body": "<p><em>FINALLY</em> found it.</p>\n<blockquote>\n<p id=\"so_7423008_7423387_0\">\u00a7 12.6.2 / 7 [class.base.init]</p>\n<p id=\"so_7423008_7423387_1\">The expression-list or braced-init-list in a mem-initializer is used\n  to initialize the designated subobject (or, in the case of a\n  delegating constructor, the complete class object) according to the\n  initialization rules of 8.5 for direct-initialization.  The\n  initialization performed by each mem-initializer constitutes a\n  full-expression. Any expression in a mem-initializer is evaluated as\n  part of the full-expression that performs the initialization. <strong>A\n  mem-initializer where the mem-initializer-id denotes a virtual base\n  class is ignored during execution of a constructor of any class that\n  is not the most derived class.</strong></p>\n</blockquote>\n<p>So, pass the arguments.  They'll be ignored anyway.  Makes things really simple!</p>\n", "LastActivityDate": "2011-09-14T21:47:16.797", "CommentCount": "5", "CreationDate": "2011-09-14T21:47:16.797", "ParentId": "7423008", "Score": "1", "OwnerUserId": "845092"}});