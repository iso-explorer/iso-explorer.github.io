post_cb({"bq_ids": {"n4140": {"so_42658852_42659101_0": {"length": 20, "quality": 1.0, "section_id": 7109}}, "n3337": {"so_42658852_42659101_0": {"length": 20, "quality": 1.0, "section_id": 6853}}, "n4659": {"so_42658852_42659101_0": {"length": 20, "quality": 1.0, "section_id": 8610}}}, "42658852": {"ViewCount": "119", "Body": "<pre><code>namespace Foo {\n  class Bar { };\n}\n\nnamespace Foo {\n  namespace Foo {\n    class FooFooClass {\n      public:\n        void do_stuff(Bar&amp; key);\n    };\n  }\n}\n\nusing namespace Foo::Foo;\n\nvoid FooFooClass::do_stuff(Bar&amp; key) {\n\n}\n</code></pre>\n<p>The preceding snippet compiles in XCode, but does not compile in Visual Studio (fails on 3rd to last line with <code>'Bar': undeclared identifier</code>) which one is more correct according to the C++ Standard.  I'm assuming that clang is inferring the correct namespace for <code>Bar</code> in a proprietary non-standard-following way?</p>\n", "AcceptedAnswerId": "42659101", "Title": "Xcode inferring namespace?", "CreationDate": "2017-03-07T21:40:29.310", "Id": "42658852", "CommentCount": "1", "LastEditDate": "2017-03-07T21:47:17.390", "PostTypeId": "1", "LastEditorUserId": "1739466", "LastActivityDate": "2017-03-07T21:56:49.163", "Score": "2", "OwnerUserId": "1739466", "Tags": "<c++><visual-c++><clang><standards>", "AnswerCount": "1"}, "42659101": {"Id": "42659101", "PostTypeId": "2", "Body": "<p>Clang is correct, due to an obscure but useful rule in the standard ([basic.lookup.qual]/3):</p>\n<blockquote>\n<p id=\"so_42658852_42659101_0\">In a declaration in which the <em>declarator-id</em> is a <em>qualified-id</em>, names used before the <em>qualified-id</em> being declared\n  are looked up in the defining namespace scope; names following the <em>qualified-id</em> are looked up in the scope\n  of the member\u2019s class or namespace.</p>\n</blockquote>\n<p>That is, as soon as the compiler sees that the entity being defined, <code>FooFooClass::do_stuff</code>, is a member of a class, it looks up all following names in that declaration in the scope of <code>FooFooClass</code>. That means lookup of <code>Bar</code> starts by looking for a member of <code>Foo::Foo::FooFooClass</code>, then a member of <code>Foo::Foo</code>, then a member of <code>Foo</code>, then the global scope. Since <code>Bar</code> is found in <code>Foo</code>, the name lookup succeeds.</p>\n", "LastActivityDate": "2017-03-07T21:56:49.163", "CommentCount": "0", "CreationDate": "2017-03-07T21:56:49.163", "ParentId": "42658852", "Score": "2", "OwnerUserId": "481267"}});