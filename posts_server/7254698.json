post_cb({"7254732": {"ParentId": "7254698", "CommentCount": "2", "Body": "<blockquote>\n<p id=\"so_7254698_7254732_0\">Now does this initialize all elements of this array with 0?</p>\n</blockquote>\n<p>Yes<br>\nIf the initializer list does not have the same number of elements as the actual array. Then the array is zero filled.</br></p>\n<blockquote>\n<p id=\"so_7254698_7254732_1\">will the same initialization work?</p>\n</blockquote>\n<p>Yes<br>\nThe same processes is at work here.</br></p>\n", "OwnerUserId": "14065", "PostTypeId": "2", "Id": "7254732", "Score": "3", "CreationDate": "2011-08-31T08:59:58.287", "LastActivityDate": "2011-08-31T08:59:58.287"}, "bq_ids": {"n4140": {"so_7254698_7257081_1": {"section_id": 3298, "quality": 0.6666666666666666, "length": 16}, "so_7254698_7257081_2": {"section_id": 3299, "quality": 0.8627450980392157, "length": 44}, "so_7254698_7257081_4": {"section_id": 3325, "quality": 0.75, "length": 6}, "so_7254698_7257081_6": {"section_id": 3307, "quality": 0.8181818181818182, "length": 9}, "so_7254698_7257081_3": {"section_id": 3304, "quality": 0.85, "length": 17}}, "n3337": {"so_7254698_7257081_1": {"section_id": 3168, "quality": 0.8333333333333334, "length": 20}, "so_7254698_7257081_2": {"section_id": 3169, "quality": 0.8627450980392157, "length": 44}, "so_7254698_7257081_4": {"section_id": 3195, "quality": 0.75, "length": 6}, "so_7254698_7257081_6": {"section_id": 3177, "quality": 0.8181818181818182, "length": 9}, "so_7254698_7257081_3": {"section_id": 3174, "quality": 0.85, "length": 17}}, "n4659": {"so_7254698_7257081_3": {"section_id": 4070, "quality": 0.75, "length": 15}, "so_7254698_7257081_0": {"section_id": 4074, "quality": 0.6666666666666666, "length": 4}, "so_7254698_7257081_2": {"section_id": 4065, "quality": 0.7254901960784313, "length": 37}, "so_7254698_7257081_4": {"section_id": 4091, "quality": 0.75, "length": 6}, "so_7254698_7257081_6": {"section_id": 4073, "quality": 0.8181818181818182, "length": 9}, "so_7254698_7254732_0": {"section_id": 4074, "quality": 0.6666666666666666, "length": 4}}}, "7257081": {"ParentId": "7254698", "PostTypeId": "2", "CommentCount": "1", "Body": "<blockquote>\n<pre><code>class MyClass {\n   private:\n     static char my2dArray[10][20];\n}; \n\nchar MyClass::my2dArray[10][20] = {{0}};\n</code></pre>\n<p id=\"so_7254698_7257081_0\">Now does this initialize all elements of this array with 0?</p>\n</blockquote>\n<p>Sort of.</p>\n<p>Recall that the elements of your array are not <code>char</code>, but <code>char[10]</code> (which cannot be <code>0</code>).</p>\n<p>What you're doing here is initialising the outer array by providing an initialiser for the <em>first</em> inner array (<code>{0}</code>, again setting only the inner array's <em>first</em> element to <code>0</code>).</p>\n<p>You're then letting the \"default\", implicit initialization behaviour take over for the subsequent elements in both arrays.</p>\n<blockquote>\n<p id=\"so_7254698_7257081_1\"><code>[n3290: 8.5.1/1]:</code> <strong>An <em>aggregate</em> is an array</strong> or a class (Clause 9)\n  with no user-provided constructors (12.1), no\n  <em>brace-or-equal-initializers</em> for non-static data members (9.2), no\n  private or protected non-static data members (Clause 11), no base\n  classes (Clause 10), and no virtual functions.</p>\n<p id=\"so_7254698_7257081_2\"><code>[n3290: 8.5.1/2]:</code> When an aggregate is initialized by an initializer\n  list, as specified in 8.5.4, <strong>the elements of the initializer list are\n  taken as initializers for the members of the aggregate, in increasing\n  subscript or member order</strong>. Each member is copy-initialized from the\n  corresponding <em>initializer-clause</em>. If the <em>initializer-clause</em> is an\n  expression and a narrowing conversion (8.5.4) is required to convert\n  the expression, the program is ill-formed. [ <em>Note</em>: <strong>If an\n  <em>initializer-clause</em> is itself an initializer list, the member is\n  list-initialized, which will result in a recursive application of the\n  rules in this section if the member is an aggregate.</strong> <em>\u2014end note</em> ]</p>\n<p id=\"so_7254698_7257081_3\"><code>[n3290: 8.5.1/7:]</code> If there are fewer <em>initializer-clauses</em> in the list\n  than there are members in the aggregate, then <strong>each member not\n  explicitly initialized shall be initialized from an empty initializer\n  list</strong> (8.5.4).</p>\n<p id=\"so_7254698_7257081_4\"><code>[n3290: 8.5.4/3:]</code> [..] Otherwise, <strong>if the initializer list has no\n  elements, the object is value-initialized.</strong> [..]</p>\n</blockquote>\n<p>The [final draft] standard actually contains a non-normative example of a similar behaviour:</p>\n<blockquote>\n<p id=\"so_7254698_7257081_5\"><code>[n3290: 8.5.1/10]:</code> [..] [ <em>Example:</em> [..] On the other hand,</p>\n<pre><code>float y[4][3] = { { 1 }, { 2 }, { 3 }, { 4 } };\n</code></pre>\n<p id=\"so_7254698_7257081_6\">initializes the first column of <code>y</code> (regarded as a two-dimensional\n  array) <strong>and leaves the rest zero.</strong> <em>\u2014end example</em> ]</p>\n</blockquote>\n<p>So, ultimately, yes. All of your innermost array elements will hold the value <code>0</code>; it's just that your <code>{{0}}</code> didn't actually do very much to make that happen.</p>\n<hr>\n<blockquote>\n<p id=\"so_7254698_7257081_7\">Assuming it's mandatory that all elements are explicitly initialized to 0.</p>\n</blockquote>\n<p>Well, since your array has <code>static</code> storage duration, its memory will be zero-initialised anyway, so this is ultimately pointless to bother concerning yourself over.</p>\n<hr>\n<blockquote>\n<p id=\"so_7254698_7257081_8\">Also, if I have the following type definition:</p>\n<pre><code>typedef unsigned char u8;\n</code></pre>\n<p id=\"so_7254698_7257081_9\">and this array is <code>static u8 my2dArray[10][20]</code>, will the same initialization work?</p>\n</blockquote>\n<p>Yes. The type alias doesn't change anything: this array has precisely the same type (and storage duration) as the first one, and the same rules apply.</p>\n</hr></hr>", "OwnerUserId": "560648", "LastEditorUserId": "560648", "LastEditDate": "2011-08-31T13:10:54.720", "Id": "7257081", "Score": "2", "CreationDate": "2011-08-31T12:47:12.903", "LastActivityDate": "2011-08-31T13:10:54.720"}, "7254698": {"CommentCount": "4", "ViewCount": "502", "PostTypeId": "1", "LastEditorUserId": "560648", "CreationDate": "2011-08-31T08:56:27.997", "LastActivityDate": "2011-08-31T13:10:54.720", "Title": "Regarding 2-d array initialisation in C++", "AcceptedAnswerId": "7257081", "LastEditDate": "2011-08-31T09:05:07.470", "Id": "7254698", "Score": "0", "Body": "<p>I get mixed responses for this question on 2-d array initialization in C++.</p>\n<p>Here's the scenario:</p>\n<pre><code>class MyClass {\n   private:\n      static char my2dArray[10][20];\n}; \n\nchar MyClass::my2dArray[10][20] = {{0}};\n</code></pre>\n<p>Now does this initialize all elements of this array with 0?</p>\n<p>Also, if I have the following type definition:</p>\n<pre><code>typedef unsigned char u8;\n</code></pre>\n<p>and this array is <code>static u8 my2dArray[10][20]</code>, will the same initialization work?</p>\n<p>Assuming it's mandatory that all elements are explicitly initialized to 0.</p>\n", "Tags": "<c++><initialization><aggregate><multidimensional-array>", "OwnerUserId": "454660", "AnswerCount": "2"}});