post_cb({"bq_ids": {"n4140": {"so_9522965_9523417_0": {"length": 14, "quality": 0.7777777777777778, "section_id": 6000}}, "n3337": {"so_9522965_9523417_0": {"length": 14, "quality": 0.7777777777777778, "section_id": 5768}}}, "9523017": {"PostTypeId": "2", "Body": "<p>In C++ Classes and Structs are almost the same (the difference is that C++ structs are classes with public as the default attribute where a class's is private) so it's like calling a constructor.</p>\n", "LastActivityDate": "2012-03-01T19:54:33.733", "Id": "9523017", "CommentCount": "0", "CreationDate": "2012-03-01T19:54:33.733", "ParentId": "9522965", "Score": "0", "OwnerUserId": "1238846"}, "9522965": {"ViewCount": "230", "Body": "<p>I'm trying to understand what the following line does:</p>\n<pre><code>BStats stats = BStats();\n</code></pre>\n<p>The struct is defined as follows:</p>\n<pre><code>struct BStats\n{\n    unsigned a;\n    unsigned b;\n\n    BStats&amp; operator+=(const BStats&amp; rhs)\n    {\n        this-&gt;a += rhs.a;\n        this-&gt;b += rhs.b;\n        return *this;\n    }\n};\n</code></pre>\n<p>But I have no idea about what this line does. Is it calling the default constructor?</p>\n", "AcceptedAnswerId": "9523417", "Title": "Using struct name as a function", "CreationDate": "2012-03-01T19:50:55.627", "Id": "9522965", "CommentCount": "0", "LastEditDate": "2016-03-16T21:20:22.937", "PostTypeId": "1", "LastEditorUserId": "316723", "LastActivityDate": "2016-03-16T21:20:22.937", "Score": "0", "OwnerUserId": "1243576", "Tags": "<c++><function><data-structures><struct>", "AnswerCount": "3"}, "9523417": {"PostTypeId": "2", "Body": "<p>The expression <code>BStats()</code> is described in the standard in 5.2.3/2:</p>\n<blockquote>\n<p id=\"so_9522965_9523417_0\">The expression T(), where T is a simple-type-specifier (7.1.5.2) for a non-array complete object type or the (possibly cv-qualified) void type, creates an rvalue of the specified type, which is value-initialized.</p>\n</blockquote>\n<p>That is, the expression creates an <em>rvalue</em> of <code>Bstats</code> type that is <em>value-initialized</em>. In your particular case, <em>value-initialization</em> means that the two members of the <code>BStats</code> struct will be set to zero.</p>\n<p>Note that this is different than the behavior of calling the <em>default-constructor</em> that is mentioned in other answers, as the default constructor will not guarantee that the members are set to 0.</p>\n", "LastActivityDate": "2012-03-01T20:21:52.300", "Id": "9523417", "CommentCount": "1", "CreationDate": "2012-03-01T20:21:52.300", "ParentId": "9522965", "Score": "3", "OwnerUserId": "36565"}, "9522998": {"PostTypeId": "2", "Body": "<p>Just like any class, a struct has a default constructor automatically created by the compiler. In your case, BStats() simply calls the default constructor, although the explicit call is useless.</p>\n", "LastActivityDate": "2012-03-01T19:53:00.367", "Id": "9522998", "CommentCount": "0", "CreationDate": "2012-03-01T19:53:00.367", "ParentId": "9522965", "Score": "0", "OwnerUserId": "153863"}});