post_cb({"bq_ids": {"n4140": {"so_6313771_6313771_0": {"length": 16, "quality": 0.8, "section_id": 6299}}, "n3337": {"so_6313771_6313771_0": {"length": 16, "quality": 0.8, "section_id": 6056}}, "n4659": {"so_6313771_6313771_0": {"length": 16, "quality": 0.8, "section_id": 7808}}}, "6313771": {"ViewCount": "627", "Body": "<p>The standard library includes an <code>&lt;iosfwd&gt;</code> header, that (forward) declares all streams including any <code>typedef</code>s and defines the <code>char_traits</code> template, including the specializations.</p>\n<p>Sadly, there is no such <code>&lt;stlfwd&gt;</code> header that (forward) declares all the common STL datatypes and functions like <code>vector</code>, <code>map</code>, <code>less</code>, <code>sort</code>, etc. Even more sadly, user code is not allowed to add such declarations / <code>typedef</code>s to the <code>std</code> namespace, as per  </p>\n<p><code>\u00a717.4.3.1 [lib.reserved.names] p1</code>:</p>\n<blockquote>\n<p id=\"so_6313771_6313771_0\">It is undefined for a C + + program to add <strong>declarations</strong> or definitions to namespace <code>std</code> or namespaces within namespace <code>std</code> unless otherwise specified. A program may add template specializations for any standard library template to namespace <code>std</code>.</p>\n</blockquote>\n<p>Yep, that covers the case of (forward) declarations, even if the types already exist in the standard library. Of course, most (all?) compilers will behave perfectly normal even if one adds such declarations, but strictly and language lawyer speaking, it is undefined behaviour. I find this especially tedious for <code>typedef</code>ing standard containers, like:</p>\n<pre><code>// how to forward declare map and string?\n\ntypedef std::map&lt;std::string, std::string&gt; Attributes;\n</code></pre>\n<p>Now, can this be considered a defect?</p>\n<p>I mean both the non-existence of a <code>&lt;stlfwd&gt;</code> header (or better, <code>&lt;stdfwd&gt;</code>, covering <code>&lt;iosfwd&gt;</code> too) and the ban on declarations already existing in the standard library. </p>\n<p>Also, according to <a href=\"https://stackoverflow.com/questions/1469743/standard-library-containers-with-additional-optional-template-parameters\">this question</a>, if one (forward) declares the standard container, algorithms and functors / functionals exactly as demanded by the standard, the code should be perfectly valid (if it weren't for the ban of user-made declarations in the <code>std</code> namespace), because implementations aren't allowed to add any hidden/defaulted template parameters.</p>\n<p>I am asking this because I'm thinking of eventually submitting a defect report regarding this.</p>\n", "AcceptedAnswerId": "6313915", "Title": "Why is there no <stlfwd> header and can the non-existence of it be considered a defect?", "CreationDate": "2011-06-11T02:57:08.110", "Id": "6313771", "CommentCount": "6", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2017-05-23T12:33:49.077", "LastEditorUserId": "-1", "LastActivityDate": "2012-09-21T14:07:04.183", "Score": "8", "OwnerUserId": "500104", "Tags": "<c++><std><forward-declaration><language-lawyer><defects>", "AnswerCount": "1"}, "6313915": {"Id": "6313915", "PostTypeId": "2", "Body": "<p>What would be the purpose of forward declaring say <code>less</code> or <code>sort</code> or really any other algorithm? If you're passing a general purpose algorithm around it will almost certainly be as a template type and not need a forward declaration at all.</p>\n<p>That leaves us with the container types. There are definitely cases where forward declarations of them would be useful but I suspect that it was simply decided that as each container definition is relatively simple (compared to iostreams) it would be preferable to just use the full include rather than a &lt;containerfwd&gt; include for example.</p>\n", "LastEditorUserId": "33732", "LastActivityDate": "2011-06-11T03:51:03.083", "Score": "6", "CreationDate": "2011-06-11T03:44:26.467", "ParentId": "6313771", "CommentCount": "3", "OwnerUserId": "251738", "LastEditDate": "2011-06-11T03:51:03.083"}});