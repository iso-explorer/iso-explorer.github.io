post_cb({"3877862": {"CreationDate": "2010-10-07T00:20:01.397", "ViewCount": "1847", "FavoriteCount": "1", "Id": "3877862", "AcceptedAnswerId": "3877884", "Score": "4", "Title": "Will function pointers always initialize to NULL?", "CommentCount": "9", "Body": "<p>I'm using MSVC and it seems like the code below does not crash and the function pointer is initialized to NULL by the compiler.</p>\n<pre><code>int (*operate)(int a, int b);\nint add(int a, int b)\n{\n    return a + b;\n}\n\nint subtract(int a, int b)\n{\n    return a - b;\n}\n\nint main()\n{\n\n\n    if(operate) //would crash here if not NULL\n    {\n        cout &lt;&lt; operate(5,5);\n    }\n\n    operate = add;\n    if(operate)\n    {\n        cout &lt;&lt; operate(5,5);\n    }\n\n    operate = subtract;\n    if(operate)\n    {\n        cout &lt;&lt; operate(5,5);\n    }\n    return 0;\n}\n</code></pre>\n<p>So it seems MSVC initializes function pointers to NULL, but if I build this on gcc in Linux would it also be NULL? Is it conventional or MSVC specific, can I rely on it being NULL wherever I go?</p>\n<p>Thanks</p>\n", "Tags": "<c++><c>", "LastActivityDate": "2010-10-07T00:48:35.153", "PostTypeId": "1", "AnswerCount": "1", "OwnerUserId": "146780"}, "3877884": {"LastActivityDate": "2010-10-07T00:48:35.153", "CommentCount": "11", "Body": "<p><code>operate</code> is initialised to NULL because it is a global variable, not because it is a function pointer.  All objects with static storage duration (which includes global variables, file-level <code>static</code> variables and <code>static</code> variables in functions) are initialised to 0 or NULL if no initialiser is given.</p>\n<p><strong>[EDIT in response to Jim Buck's comment:]</strong>\nIn C++, this is guaranteed by clause 3.6.2/1 of the language standard, which begins:</p>\n<blockquote>\n<p id=\"so_3877862_3877884_0\">Objects with static storage duration\n  (3.7.1) shall be zero-initialized\n  (8.5) before any other initialization\n  takes place. Zero-initialization and\n  initialization with a constant\n  expression are collectively called\n  <em>static initialization</em>; all other\n  initialization is <em>dynamic\n  initialization</em>.</p>\n</blockquote>\n<p>I expect the same behaviour is true of C, since C++ is designed to be compatible with it on most things, although I don't have the standard for it.</p>\n<p><strong>[EDIT #2]</strong> As Jeff M points out in a comment, it's important to realise that variables of automatic storage duration (that is, \"ordinary\" local variables) are <em>not</em> automatically zero-initialised: unless an initialiser is given, or they are assigned values by a constructor, they will initially contain random garbage (whatever was already sitting in memory at that location).  So it's a good habit to initialise all variables -- it can't hurt but can help.</p>\n", "CreationDate": "2010-10-07T00:28:04.407", "LastEditDate": "2010-10-07T00:48:35.153", "ParentId": "3877862", "Id": "3877884", "LastEditorUserId": "47984", "PostTypeId": "2", "Score": "17", "OwnerUserId": "47984"}, "bq_ids": {"n4140": {"so_3877862_3877884_0": {"length": 19, "quality": 0.7916666666666666, "section_id": 7151}}, "n3337": {"so_3877862_3877884_0": {"length": 19, "quality": 0.7916666666666666, "section_id": 6895}}}});