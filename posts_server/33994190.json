post_cb({"33994288": {"ParentId": "33994190", "PostTypeId": "2", "CommentCount": "3", "Body": "<p><code>std::map&lt;X&gt;::iterator</code> is specified to be convertible to <code>std::map&lt;X&gt;::const_iterator</code>, so you can pass in the former to a function expecting the latter.</p>\n<p>Overload resolution doesn't need to pick between those two functions as they are mutually exclusive: the C++98 one is not available in C++11 and vice versa.</p>\n<p>Here are the versions of <code>std::map::erase</code> which are available in C++11, from N3337 standards draft <code>[map]/2</code>:</p>\n<blockquote id=\"so_33994190_33994288_0\">\n<pre><code>iterator erase(const_iterator position);\nsize_type erase(const key_type&amp; x);\niterator erase(const_iterator first, const_iterator last);\n</code></pre>\n</blockquote>\n", "OwnerUserId": "496161", "LastEditorUserId": "496161", "LastEditDate": "2015-11-30T08:56:11.933", "Id": "33994288", "Score": "1", "CreationDate": "2015-11-30T08:29:42.903", "LastActivityDate": "2015-11-30T08:56:11.933"}, "33994190": {"CommentCount": "0", "ViewCount": "42", "CreationDate": "2015-11-30T08:23:07.140", "LastActivityDate": "2015-11-30T08:56:11.933", "Title": "Confusing about the overload resolution of map::erase()", "AcceptedAnswerId": "33994288", "PostTypeId": "1", "Id": "33994190", "Score": "0", "Body": "<p>I'm reading Nico's <em>The C++ Standard Library 2nd edition</em> book. He shows me a example of the <code>erase()</code> function of <code>map</code> at page 343:</p>\n<pre><code>std:map&lt;std::string, float&gt; coll;\n// ...\nfor (auto pos = coll.begin(); pos != coll.end(); ) {\n    if (pos-&gt;second == value) {\n        pos = coll.erase(pos);   // since C++ 11\n\n        // C++ 98\n        // coll.erase(pos++);\n    } else {\n        ++pos;\n    }\n}\n</code></pre>\n<p>And the <a href=\"http://www.cplusplus.com/reference/map/map/erase/\" rel=\"nofollow\">cplusplus.com</a> say that:</p>\n<pre><code>void erase( iterator position );               // C++ 98\niterator erase( const_iterator position );     // C++ 11\n</code></pre>\n<p>My question is how can the overload resolution select the C++ 11 version in the previous example that return the iterator of last removed element? The type of <code>pos</code> is <code>iterator</code> in the example, isn't it?</p>\n", "Tags": "<c++>", "OwnerUserId": "4836655", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_33994190_33994288_0": {"section_id": 819, "quality": 0.7272727272727273, "length": 8}}, "n3337": {"so_33994190_33994288_0": {"section_id": 808, "quality": 0.7272727272727273, "length": 8}}, "n4659": {"so_33994190_33994288_0": {"section_id": 878, "quality": 0.7272727272727273, "length": 8}}}});