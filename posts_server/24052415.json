post_cb({"31929468": {"ParentId": "24052415", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Yes. <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4296.pdf\" rel=\"nofollow noreferrer\">The C++14 draft standard</a> says in section 25.3.9 [alg.Unique] (emphasis mine):</p>\n<blockquote>\n<p id=\"so_24052415_31929468_0\">Effects: For a nonempty range, <strong>eliminates all but the first element</strong> from every consecutive group of equivalent elements referred to by the iterator i in the range [first + 1,last) for which the following conditions hold: *(i - 1) == <em>i or pred(</em>(i - 1), *i) != false.</p>\n</blockquote>\n<p>The citation of the standard is important here because the usual Internet sources on this point give two different answers: en.cppreference.com does not give the guarantee, but cplusplus.com (cited by <a href=\"https://stackoverflow.com/users/1294207/ben\">Ben</a> <a href=\"https://stackoverflow.com/a/24052435/309334\">above</a> has the guarantee.)</p>\n", "OwnerUserId": "309334", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T11:44:47.067", "Id": "31929468", "Score": "1", "CreationDate": "2015-08-10T21:26:00.337", "LastActivityDate": "2015-10-15T12:10:23.117"}, "24052435": {"ParentId": "24052415", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Yes. </p>\n<pre><code>Removes all but the first element from every consecutive \ngroup of equivalent elements in the range [first,last).\n</code></pre>\n<p><a href=\"http://www.cplusplus.com/reference/algorithm/unique/\" rel=\"nofollow\">http://www.cplusplus.com/reference/algorithm/unique/</a></p>\n<p>The <code>BinaryPredicate</code> you have given just means that any element with <code>y</code> equal to the previous element <code>x</code> will be removed. </p>\n", "OwnerUserId": "1294207", "LastEditorUserId": "1294207", "LastEditDate": "2014-06-05T06:20:02.617", "Id": "24052435", "Score": "9", "CreationDate": "2014-06-05T05:41:38.200", "LastActivityDate": "2014-06-05T06:20:02.617"}, "bq_ids": {"n4140": {"so_24052415_31929468_0": {"section_id": 1347, "quality": 0.875, "length": 21}}, "n3337": {"so_24052415_31929468_0": {"section_id": 1341, "quality": 0.875, "length": 21}}, "n4659": {"so_24052415_31929468_0": {"section_id": 1478, "quality": 0.875, "length": 21}}}, "24052415": {"CommentCount": "0", "ViewCount": "206", "CreationDate": "2014-06-05T05:39:58.030", "LastActivityDate": "2015-10-15T12:10:23.117", "Title": "Do I have the guarantee that std::unique will keep the first element?", "AcceptedAnswerId": "24052435", "PostTypeId": "1", "Id": "24052415", "Score": "3", "Body": "<p>Consider a sorted <code>std::vector&lt;std::pair&lt;int, int&gt;&gt;</code> based on comparison of the first element of pair. </p>\n<p>Now assume that I apply:</p>\n<pre><code>std::unique(std::begin(v), \n            std::end(v), \n            [](const std::pair&lt;int, int&gt;&amp; x, const std::pair&lt;int, int&gt;&amp; y)\n            {return x.first == y.first;});\n</code></pre>\n<p>Do I have the guarantee that <code>std::unique</code> will keep the first element of every equal ranges ?</p>\n", "Tags": "<c++><c++11><unique><standards><stl-algorithm>", "OwnerUserId": "882932", "AnswerCount": "2"}});