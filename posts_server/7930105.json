post_cb({"bq_ids": {"n4140": {"so_7930105_7930386_0": {"length": 23, "quality": 0.92, "section_id": 6365}}, "n3337": {"so_7930105_7930386_0": {"length": 23, "quality": 0.92, "section_id": 6122}}, "n4659": {"so_7930105_7930386_0": {"length": 23, "quality": 0.92, "section_id": 7876}}}, "7930386": {"Id": "7930386", "PostTypeId": "2", "Body": "<p>From n3290, 17.6.5.15 Moved-from state of library types [lib.types.movedfrom]</p>\n<blockquote id=\"so_7930105_7930386_0\">\n<ol>\n<li>Objects of types defined in the C++ standard library may be moved from (12.8). Move operations may be explicitly specified or implicitly generated. Unless otherwise specified, such moved-from objects shall be placed in a valid but unspecified state.</li>\n</ol>\n</blockquote>\n<p>Since the state is valid, this means you can safely operate on <code>v2</code> (e.g. by assigning to it, which would put it back to a known state). Since it is unspecified however, it means you cannot for instance rely on any particular value for <code>v2.empty()</code> as long as it is in this state (but calling it won't crash the program).</p>\n<p>Note that this axiom of move semantics (\"Moved from objects are left in a valid but unspecified state\") is something that all code should strive towards (most of the time), not just the Standard Library components. Much like the semantics of copy constructors <em>should</em> be making a copy, but are not enforced to.</p>\n", "LastEditorUserId": "726300", "LastActivityDate": "2011-10-28T20:51:42.607", "Score": "18", "CreationDate": "2011-10-28T14:12:49.450", "ParentId": "7930105", "CommentCount": "2", "OwnerUserId": "726300", "LastEditDate": "2011-10-28T20:51:42.607"}, "7930155": {"Id": "7930155", "PostTypeId": "2", "Body": "<p>No, it is left in an unspecified state.</p>\n<p>Excerpt from <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n2027.html#Move_Semantics\" rel=\"noreferrer\">open-std-org</a> article -</p>\n<blockquote>\n<p id=\"so_7930105_7930155_0\">.. move() gives its target the value of its argument, but is <strong>not obliged to preserve the value of its source</strong>. So, for a vector, move() could reasonably be expected to leave its argument as a zero-capacity vector to avoid having to copy all the elements. In other words, move is a potentially destructive read. </p>\n</blockquote>\n", "LastEditorUserId": "528724", "LastActivityDate": "2011-10-28T14:02:28.430", "Score": "6", "CreationDate": "2011-10-28T13:52:06.790", "ParentId": "7930105", "CommentCount": "4", "OwnerUserId": "528724", "LastEditDate": "2011-10-28T14:02:28.430"}, "7930105": {"ViewCount": "2125", "Body": "<p>Say I have two vectors and I move one unto the other, <code>v1 = std::move(v2)</code>; will <code>v2</code> still be in a usable state after this?</p>\n", "AcceptedAnswerId": "7930386", "Title": "Does moving leave the object in a usable state?", "CreationDate": "2011-10-28T13:46:51.937", "Id": "7930105", "CommentCount": "1", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2013-03-15T13:15:16.617", "LastEditorUserId": "313113", "LastActivityDate": "2013-03-15T13:15:16.617", "Score": "13", "OwnerUserId": "627005", "Tags": "<c++><c++11><move-semantics>", "AnswerCount": "2"}});