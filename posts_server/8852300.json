post_cb({"8852428": {"CommentCount": "0", "Body": "<p>It will pass the address of the local variable x in the caller block as a parameter to f (pointer to int). f will then set the parameter (which is a temporary variable on the stack) to address 1 (this causes no problem) and return 1. Since 1 is true, the if () will move on to evaluate x == 1 which is false, because x in the main block is still 0.</p>\n<p>The body of the if block will not be executed.</p>\n<p><strong>EDIT</strong></p>\n<p>With your new version of the question, the body will be executed, because after f() has returned, x in the calling block is 1.</p>\n", "CreationDate": "2012-01-13T14:56:10.977", "ParentId": "8852300", "Id": "8852428", "LastActivityDate": "2012-01-13T14:56:10.977", "PostTypeId": "2", "Score": "0", "OwnerUserId": "815409"}, "8852389": {"CommentCount": "1", "Body": "<p>It's not undefined, but it shouldn't compile either, as you're trying to assign a pointer to x (<code>&amp;x</code>) to a reference.</p>\n<p><code>&amp;&amp;</code> will be evaluated from left to right (evaluation will stop, if the left side evaluates false).</p>\n<p>Edit: With the change it should compile, but will still be defined (as it doesn't really matter if you use a pointer or reference).</p>\n", "CreationDate": "2012-01-13T14:53:40.503", "ParentId": "8852300", "Id": "8852389", "LastActivityDate": "2012-01-13T14:53:40.503", "PostTypeId": "2", "Score": "1", "OwnerUserId": "409744"}, "8852417": {"CommentCount": "0", "Body": "<p>No, because <code>&amp;&amp;</code> defines an ordering in which the lhs must be computed before the rhs.</p>\n<p>There is a defined order also on <code>||</code>, <code>?:</code> and <code>,</code>. There is not on other operands.</p>\n<p>In the comparable:</p>\n<pre><code>int x = 0;\nif (f(&amp;x) &amp; x == 1) {\n    // something\n}\n</code></pre>\n<p>Then it's undefined. Here both the lhs and rhs will be computed and in either order. This non-shortcutting form of logical and is less common because the short-cutting is normally seen as at least beneficial to performance and often vital to correctness.</p>\n", "CreationDate": "2012-01-13T14:55:29.223", "ParentId": "8852300", "Id": "8852417", "LastActivityDate": "2012-01-13T14:55:29.223", "PostTypeId": "2", "Score": "2", "OwnerUserId": "400547"}, "8852339": {"CommentCount": "7", "Body": "<p>It is well defined.</p>\n<p><strong>Reference - C++03 Standard:</strong></p>\n<p><strong>Section 5: Expressions, Para 4:</strong></p>\n<blockquote>\n<p id=\"so_8852300_8852339_0\">except where noted [e.g. <strong>special rules for &amp;&amp; and ||</strong>], the order of evaluation of operands of individual operators and subexpressions of individual expressions, and the order in which side effects take place, is <strong>Unspecified</strong>.</p>\n</blockquote>\n<p>While in,   </p>\n<blockquote>\n<p id=\"so_8852300_8852339_1\"><strong>Section 1.9.18</strong></p>\n<p id=\"so_8852300_8852339_2\">In the evaluation of the following expressions</p>\n<pre><code>a &amp;&amp; b\na || b\na ? b : c\na , b\n</code></pre>\n<p id=\"so_8852300_8852339_3\">using the built-in meaning of the operators in these expressions, <strong>there is a sequence point after the evaluation of the first expression</strong> (12).</p>\n</blockquote>\n", "CreationDate": "2012-01-13T14:50:39.483", "ParentId": "8852300", "Id": "8852339", "LastActivityDate": "2012-01-13T14:50:39.483", "PostTypeId": "2", "Score": "7", "OwnerUserId": "452307"}, "8852300": {"CreationDate": "2012-01-13T14:48:07.013", "ViewCount": "248", "Id": "8852300", "AcceptedAnswerId": "8852343", "Score": "4", "Title": "Is this undefined behaviour in C++?", "LastEditorUserId": "482317", "CommentCount": "8", "Body": "<p>I was wondering whether the access to x in the last if below here is undefined behaviour or not:</p>\n<pre><code>int f(int *x)\n{\n    *x = 1;\n    return 1;\n}\n\nint x = 0;\nif (f(&amp;x) &amp;&amp; x == 1) {\n    // something\n}\n</code></pre>\n", "Tags": "<c++><undefined-behavior>", "LastEditDate": "2012-01-13T14:54:58.100", "LastActivityDate": "2012-01-13T18:13:12.850", "PostTypeId": "1", "AnswerCount": "7", "OwnerUserId": "482317"}, "bq_ids": {"n4140": {"so_8852300_8852339_0": {"length": 10, "quality": 0.5263157894736842, "section_id": 5811}}, "n3337": {"so_8852300_8852339_0": {"length": 10, "quality": 0.5263157894736842, "section_id": 5584}}}, "8852343": {"LastActivityDate": "2012-01-13T17:10:12.433", "CommentCount": "2", "Body": "<p>It's <strong>not</strong> undefined behavior as operator <code>&amp;&amp;</code> is a sequence point</p>\n", "CreationDate": "2012-01-13T14:50:54.940", "LastEditDate": "2012-01-13T17:10:12.433", "ParentId": "8852300", "Id": "8852343", "LastEditorUserId": "14065", "PostTypeId": "2", "Score": "13", "OwnerUserId": "362589"}, "8852345": {"CommentCount": "0", "Body": "<p>It is defined. C/C++ do lazy evaluation and it is defined that first the left expression will be calculated and checked. If it is true then the right one will be.</p>\n", "CreationDate": "2012-01-13T14:51:01.307", "ParentId": "8852300", "Id": "8852345", "LastActivityDate": "2012-01-13T14:51:01.307", "PostTypeId": "2", "Score": "2", "OwnerUserId": "259371"}, "8855215": {"CommentCount": "0", "Body": "<p>It is not undefined behavior. The reason depends on two facts, <em>both</em> are sufficient for giving defined behavior</p>\n<ul>\n<li>A function call and termination is a sequence point</li>\n<li>The '&amp;&amp;' operator is a sequence point</li>\n</ul>\n<p>The following is defined behavior too</p>\n<pre><code>int f(int *x) {\n    *x = 1;\n    return 1;\n}\n\nint x = 0;\nif (f(&amp;x) &amp; (x == 1)) {\n    // something\n}\n</code></pre>\n<p>However, you don't know whether <code>x == 1</code> evaluates to <code>true</code> or <code>false</code>, because either the first or the second operand of <code>&amp;</code> can be evaluated first. That's not important for the behavior of this code to be defined, though.</p>\n", "CreationDate": "2012-01-13T18:13:12.850", "ParentId": "8852300", "Id": "8855215", "LastActivityDate": "2012-01-13T18:13:12.850", "PostTypeId": "2", "Score": "2", "OwnerUserId": "34509"}});