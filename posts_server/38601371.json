post_cb({"38601525": {"ParentId": "38601371", "CommentCount": "4", "CreationDate": "2016-07-26T23:39:28.197", "OwnerUserId": "1413395", "PostTypeId": "2", "Id": "38601525", "Score": "0", "Body": "<blockquote>\n<p id=\"so_38601371_38601525_0\">Note: for reasons beyond this discussion, I need to do exactly this</p>\n</blockquote>\n<p>Certainly not, because wrong things don't work.</p>\n<p>Use a <code>std::array&lt;int,10&gt;</code> instead. This code should work just smoothly:</p>\n<pre><code>typedef array&lt;int,10&gt; ArrayOf10Ints;\n\nint f() {\n     ArrayOf10Ints * p = new ArrayOf10Ints;\n     // ...\n\n     delete p;\n}\n</code></pre>\n<hr>\n<p>However I won't recommend you manage <code>new</code> and <code>delete</code> yourself, unless you're absolutely sure you need to.</p>\n</hr>", "LastActivityDate": "2016-07-26T23:39:28.197"}, "38601371": {"CommentCount": "6", "ViewCount": "81", "PostTypeId": "1", "LastEditorUserId": "2063166", "CreationDate": "2016-07-26T23:19:05.363", "LastActivityDate": "2016-07-27T01:57:43.227", "Title": "How to create an automatic array[N] on the heap, with new", "AcceptedAnswerId": "38601834", "LastEditDate": "2016-07-27T01:57:43.227", "Id": "38601371", "Score": "3", "Body": "<p>I have a corner case with regards to pointers and arrays. </p>\n<p>How do I allocate a fixed-size (automatic) array on the heap? Let's get to the code right away to understand what I'm trying to ask:</p>\n<pre><code>typedef int ArrayOf10Ints[10];\n\nint f()\n{\n        ArrayOf10Ints * p = new ArrayOf10Ints; // Error: cannot initialize a variable of type 'ArrayOf10Ints *'\n                                               // (aka 'int (*)[10]') with an rvalue of type 'int *'\n\n        ArrayOf10Ints * q = new ArrayOf10Ints[1] // OK: allocates space for 10 ints\n\n        delete q; // Warning: use delete []\n}\n</code></pre>\n<p>Why doesn't the expression to allocate <code>p</code> work? Why is the rvalue an <code>int*</code> and not a <code>ArrayOf10Ints*</code>? And why does <code>q</code> work?</p>\n<p>Note: my goal is to understand the unexpected behavior allocating <code>p</code> and <code>q</code>. As others have pointed out there are many straightforward ways to solve this problem. For example, in my case, I'm using a pointer to denote that the array is optional\u2014it may or may not exist\u2014so I would do this instead:</p>\n<pre><code>boost::optional&lt;std::array&lt;int, 10&gt; &gt; optional_array;\n</code></pre>\n", "Tags": "<c++><arrays><pointers><new-operator>", "OwnerUserId": "2063166", "AnswerCount": "2"}, "38601834": {"ParentId": "38601371", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2016-07-27T00:17:33.087", "Score": "3", "LastEditorUserId": "241631", "LastEditDate": "2016-07-27T00:19:52.120", "Id": "38601834", "OwnerUserId": "241631", "Body": "<p>This is a behavior of <code>new</code> that is somewhat surprising. Even though <code>ArrayOf10Ints</code> is an alias for <code>int[10]</code>, when you use it in a <code>new</code> expression, the result is as if you were writing <code>new int[10]</code> instead.</p>\n<p>This is specified in <a href=\"http://eel.is/c++draft/expr.new#5\" rel=\"nofollow\"><em>[expr.new]/5</em></a></p>\n<blockquote>\n<p id=\"so_38601371_38601834_0\"><strong>When the allocated object is an array (that is,</strong> the <em>noptr-new-declarator</em> syntax is used or the <em>new-type-id</em> or <strong><em>type-id</em> denotes an array type), the <em>new-expression</em> yields a pointer to the initial element (if any) of the array.</strong></p>\n</blockquote>\n<p>So in your example, the <code>new</code> expression returns an <code>int *</code>, hence the error.</p>\n<p>A workaround is to do what you've shown</p>\n<pre><code>ArrayOf10Ints* q = new ArrayOf10Ints[1];\ndelete[] q;\n</code></pre>\n<p>or place the array in a <code>struct</code>, or use <code>std::array</code>.</p>\n<p>Note that even if you were to write</p>\n<pre><code>int* p = new ArrayOf10Ints;\n</code></pre>\n<p>you must then use <code>delete[] p</code> because <code>operator new[]</code> is called in this case too.</p>\n<p><a href=\"http://coliru.stacked-crooked.com/a/a08bc901567b24f8\" rel=\"nofollow\">Live demo</a></p>\n", "LastActivityDate": "2016-07-27T00:19:52.120"}, "bq_ids": {"n4140": {"so_38601371_38601834_0": {"section_id": 6086, "quality": 1.0, "length": 17}}, "n3337": {"so_38601371_38601834_0": {"section_id": 5854, "quality": 1.0, "length": 17}}, "n4659": {"so_38601371_38601834_0": {"section_id": 7582, "quality": 1.0, "length": 17}}}});