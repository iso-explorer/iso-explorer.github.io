post_cb({"bq_ids": {"n4140": {"so_17187771_17187771_0": {"length": 38, "quality": 0.8837209302325582, "section_id": 7194}}, "n3337": {"so_17187771_17187771_0": {"length": 38, "quality": 0.8837209302325582, "section_id": 6938}}, "n4659": {"so_17187771_17187771_0": {"length": 38, "quality": 0.8837209302325582, "section_id": 8703}}}, "17187771": {"ViewCount": "90", "Body": "<p>A similar question got asked <a href=\"https://stackoverflow.com/questions/8719937/initializing-mutually-referencing-objects%20here\">here</a>, but didn't get a proper answer.</p>\n<p>Is the following legal?</p>\n<pre><code>struct B;\n\nstruct A\n{\n    A(B&amp; b) : b(b) \n    {\n    }\n\n    B&amp; b;\n};\n\nstruct B\n{\n    B(A&amp; a) : a(a)\n    {\n    }\n\n    A&amp; a;\n};\n\nstruct C\n{\n    C() : a(b), b(a)\n    {\n    }\n\n    A a;\n    B b;\n};\n</code></pre>\n<p>I wonder if it falls under 3.8 (6) (C++ 2003)</p>\n<blockquote>\n<p id=\"so_17187771_17187771_0\">... before the lifetime of an object has started but after the storage\n  which the object will occupy has been allocated or, after the lifetime\n  of an object has ended and before the storage which the object\n  occupied is reused or released, any lvalue which refers to the\n  original object may be used but only in limited ways. Such an lvalue\n  refers to allocated storage (3.7.3.2), and using the properties of the\n  lvalue which do not depend on its value is well-defined.</p>\n</blockquote>\n", "Title": "Mutually referencing instances", "CreationDate": "2013-06-19T09:33:26.907", "Id": "17187771", "CommentCount": "9", "LastEditDate": "2017-05-23T12:05:31.680", "PostTypeId": "1", "LastEditorUserId": "-1", "LastActivityDate": "2013-06-19T12:33:04.833", "Tags": "<c++>", "Score": "0", "OwnerUserId": "18167", "ClosedDate": "2013-06-19T12:36:24.257", "AnswerCount": "1"}, "17191307": {"Id": "17191307", "PostTypeId": "2", "Body": "<p>Perfectly legal.  Clearly the storage of A and B are allocated as C is allocated prior to constructing C... thus the references to A and B are well-defined and can be used.  However, you wouldn't be able to dereference the B object in the constructor of the A object.  Oppositely, deferencing A in the constructor of B <em>should</em> be OK, although compiler support for any of this might be spotty...</p>\n", "LastActivityDate": "2013-06-19T12:33:04.833", "CommentCount": "1", "CreationDate": "2013-06-19T12:33:04.833", "ParentId": "17187771", "Score": "0", "OwnerUserId": "479574"}});