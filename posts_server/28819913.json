post_cb({"bq_ids": {"n4140": {"so_28819913_28820232_1": {"length": 8, "quality": 0.5714285714285714, "section_id": 5943}}, "n3337": {"so_28819913_28820232_1": {"length": 8, "quality": 0.5714285714285714, "section_id": 5714}}, "n4659": {"so_28819913_28820232_1": {"length": 8, "quality": 0.5714285714285714, "section_id": 7428}}}, "28820232": {"Id": "28820232", "PostTypeId": "2", "Body": "<p>As far as I can tell, the are defined correctly.</p>\n<p>The macros expand to integer constant expressions <em>corresponding to</em> the specified types, not <em>of</em> the specified types.</p>\n<p>Neither C nor C++ has a syntax for integer constant expressions of types narrower than <code>int</code>. It depends on implicit conversions to convert <code>int</code> expressions to narrower types where needed.</p>\n<p>(C++ includes the contents of the C header <code>&lt;stdint.h&gt;</code> by reference to the C standard. The latest C++ standard refers to the 1999 C standard. I'm not sure what the status of the three C99 Technical Corrigenda is with respect to C++.)</p>\n<p>Looking at <a href=\"http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf\" rel=\"nofollow\">N1570</a> 7.20.4p1:</p>\n<blockquote>\n<p id=\"so_28819913_28820232_0\">The following function-like macros expand to integer constants\n  suitable for initializing objects that have integer types\n  corresponding to types defined in <strong><code>&lt;stdint.h&gt;</code></strong>. Each macro name\n  corresponds to a similar type name in 7.20.1.2 or 7.20.1.5.</p>\n</blockquote>\n<p>And in paragraph 3:</p>\n<blockquote>\n<p id=\"so_28819913_28820232_1\">The type of the expression shall have the same type as would an\n  expression of the corresponding type <em>converted according to the\n  integer promotions</em>.</p>\n</blockquote>\n<p>(emphasis added)</p>\n<p>For example, <code>int_least8_t</code> is likely to be a typedef for <code>signed char</code>. If so, it makes sense (and is conforming) to have a definition like:</p>\n<pre><code>#define INT8_C(x)   (x)\n</code></pre>\n<p>N1570 is a draft of the 2011 ISO C standard. The 1999 ISO C standard (C99) actually had a bug in this area. It states, in 7.18.4.1p2, that, for example, <code>INT8_C(</code><em>value</em><code>)</code> expands to a signed integer constant with the specified\nvalue and type <code>int_least8_t</code>. This is not possible in general (without compiler extensions) because C has no syntax for integer constants of types narrower than <code>int</code> (and a cast can't be used because the result has to be usable in a <code>#if</code> expression -- though that requirement wasn't in the original C99 standard). The <a href=\"http://www.open-std.org/jtc1/sc22/wg14/www/docs/9899tc1/n32071.PDF\" rel=\"nofollow\">first Technical Corrigendum</a> corrected this, in response to <a href=\"http://www.open-std.org/jtc1/sc22/wg14/www/docs/dr_209.htm\" rel=\"nofollow\">Defect Report # 209</a>, to say that the type is the corresponding type <em>converted according to the\ninteger promotions</em>. The corrected text is in the <a href=\"http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf\" rel=\"nofollow\">N1256</a> draft of C99 and in the published C11 standard.</p>\n", "LastEditorUserId": "827263", "LastActivityDate": "2015-03-03T20:59:23.120", "Score": "8", "CreationDate": "2015-03-02T21:58:15.873", "ParentId": "28819913", "CommentCount": "9", "OwnerUserId": "827263", "LastEditDate": "2015-03-03T20:59:23.120"}, "28819913": {"ViewCount": "153", "Body": "<p>In MVSC, when I <code>#include &lt;stdint.h&gt;</code>, I end up with the following definitions for the UINTX_C and INTX_C macros:</p>\n<pre><code>#define INT8_C(x)   (x)\n#define INT16_C(x)  (x)\n#define INT32_C(x)  ((x) + (INT32_MAX - INT32_MAX))\n\n#define UINT8_C(x)  (x)\n#define UINT16_C(x) (x)\n#define UINT32_C(x) ((x) + (UINT32_MAX - UINT32_MAX))\n</code></pre>\n<p>Clearly the 8 and 16-bit macros just pass through the constant unmodified, which doesn't exactly perform what they are designed to do.  Is there a different file to include on Windows to get the proper definitions?</p>\n", "AcceptedAnswerId": "28820232", "Title": "Why are the UINTX_C() macros not properly defined in Windows stdint.h?", "CreationDate": "2015-03-02T21:38:59.637", "Id": "28819913", "CommentCount": "8", "LastEditDate": "2015-03-03T02:16:14.930", "PostTypeId": "1", "LastEditorUserId": "332733", "LastActivityDate": "2015-03-03T20:59:23.120", "Score": "0", "OwnerUserId": "804775", "Tags": "<c++><macros><windows-7-x64><language-lawyer>", "AnswerCount": "1"}});