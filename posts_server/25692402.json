post_cb({"bq_ids": {"n4140": {"so_25692402_25692496_0": {"length": 15, "quality": 0.9375, "section_id": 6689}, "so_25692402_25692496_2": {"length": 109, "quality": 0.8934426229508197, "section_id": 5485}}, "n3337": {"so_25692402_25692496_0": {"length": 15, "quality": 0.9375, "section_id": 6444}, "so_25692402_25692496_2": {"length": 94, "quality": 0.7704918032786885, "section_id": 5271}}, "n4659": {"so_25692402_25692496_0": {"length": 15, "quality": 0.9375, "section_id": 8164}, "so_25692402_25692496_2": {"length": 102, "quality": 0.8360655737704918, "section_id": 6920}}}, "25692496": {"Id": "25692496", "PostTypeId": "2", "Body": "<p>From the C++ Standard</p>\n<p>11.3 Friends</p>\n<blockquote>\n<p id=\"so_25692402_25692496_0\">6 A function can be defined in a friend declaration of a class if and\n  only if the class is a non-local class (9.8), the function name is\n  unqualified, and <strong>the function has namespace scope</strong>.  [ Example:</p>\n</blockquote>\n<pre><code>class M { friend void f() { } // definition of global f, a friend of M,\n                              // not the definition of a member function\n};\n</code></pre>\n<blockquote>\n<p id=\"so_25692402_25692496_1\">\u2014end example ]</p>\n</blockquote>\n<p>Amd the other quote (7.3.1 Namespace definition)</p>\n<blockquote>\n<p id=\"so_25692402_25692496_2\">3 Every name first declared in a namespace is a member of that\n  namespace. If a friend declaration in a non-local class first declares\n  a class, function, class template or function template98 the friend is\n  a member of the innermost enclosing namespace. <strong>The friend declaration\n  does not by itself make the name visible to unqualified lookup (3.4.1)\n  or qualified lookup (3.4.3). [ Note: The name of the friend will be\n  visible in its namespace if a matching declaration is provided at\n  namespace scope (either before or after the class definition granting\n  friendship). \u2014end note ]</strong> If a friend function or function template is\n  called, its name may be found by the name lookup that considers\n  functions from namespaces and classes associated with the types of the\n  function arguments (3.4.2). If the name in a friend declaration is\n  neither qualified nor a template-id and the declaration is a function\n  or an elaborated-type-specifier, the lookup to determine whether the\n  entity has been previously declared shall not consider any scopes\n  outside the innermost enclosing namespace. [ Note: The other forms of\n  friend declarations cannot declare a new member of the innermost\n  enclosing namespace and thus follow the usual lookup rules. \u2014end note\n  ]</p>\n</blockquote>\n<p>I would like to mention that enclosing a function name in parentheses suppresses the argument-dependent lookup.</p>\n<p>For this code</p>\n<pre><code>int main()\n{\n    A::X x;\n    ( f )(x);\n}\n</code></pre>\n<p>function f will not be found.</p>\n", "LastEditorUserId": "2877241", "LastActivityDate": "2014-09-05T19:35:42.720", "Score": "5", "CreationDate": "2014-09-05T19:12:32.813", "ParentId": "25692402", "CommentCount": "3", "OwnerUserId": "2877241", "LastEditDate": "2014-09-05T19:35:42.720"}, "25692402": {"ViewCount": "286", "Body": "<p>The <code>friend</code> function below is not found by ordinary lookup (\u00a77.3.1.2/3), but is found by ADL (\u00a73.4.2/4 second bullet point), so the code compiles and executes normally (<a href=\"http://coliru.stacked-crooked.com/a/c8b8ce64b481fcd8\" rel=\"nofollow\">live example</a>). But the function <code>f</code> isn't declared in any namespace. For example, if you try replacing the call <code>f(x);</code> by any of these calls <code>::f(x);</code>, <code>A::f(x);</code> or <code>A::X::f(x);</code>, the code will not compile. Which namespace does contain the declaration of this friend function? Does the Standard say anything about this?</p>\n<pre><code>#include &lt;iostream&gt;\nnamespace A {\n    class X {\n        int i;\n        friend void f(X x) { std::cout &lt;&lt; x.i &lt;&lt; '\\n'; }\n    public:\n        X():i(101){}\n    };\n}\n\nint main()\n{\n    A::X x;\n    f(x);\n}\n</code></pre>\n", "AcceptedAnswerId": "25692496", "Title": "Which namespace does contain the declaration of this friend function?", "CreationDate": "2014-09-05T19:05:57.883", "Id": "25692402", "CommentCount": "7", "FavoriteCount": "0", "PostTypeId": "1", "LastActivityDate": "2014-09-05T19:35:42.720", "Score": "4", "OwnerUserId": "2548699", "Tags": "<c++><c++11><namespaces><lookup><argument-dependent-lookup>", "AnswerCount": "1"}});