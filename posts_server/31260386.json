post_cb({"31260472": {"Id": "31260472", "PostTypeId": "2", "Body": "<ol>\n<li><blockquote>\n<p id=\"so_31260386_31260472_0\">I think it should be very fast with no regards of the length of these two vectors right?</p>\n</blockquote></li>\n</ol>\n<p>Yes. <code>std::swap</code> for <code>std::vector</code> 's complexity is guaranteed to be constant time by the stardard:</p>\n<p>23.3.6.3$10,11 [vector.capacity](bold by me):</p>\n<blockquote>\n<p id=\"so_31260386_31260472_1\"><code>void swap(vector&amp; x);</code><br>\n  Effects: Exchanges the contents and capacity() of *this with that of x.<br>\n  Complexity: <strong>Constant time</strong>.</br></br></p>\n</blockquote>\n<p>And by $23.3.6.6/1 [vector.special], <code>std::swap</code> for <code>std::vector</code> is Specialized as:</p>\n<blockquote>\n<p id=\"so_31260386_31260472_2\"><code>template &lt;class T, class Allocator&gt;</code><br>\n<code>void swap(vector&lt;T,Allocator&gt;&amp; x, vector&lt;T,Allocator&gt;&amp; y);</code><br>\n  Effects:<br>\n<code>x.swap(y);</code></br></br></br></p>\n</blockquote>\n<p>Here're some more explanations: <a href=\"http://en.cppreference.com/w/cpp/container/vector/swap\" rel=\"nofollow\">std::vector::swap</a> and <a href=\"http://en.cppreference.com/w/cpp/container/vector/swap2\" rel=\"nofollow\">std::swap(std::vector)</a></p>\n<blockquote>\n<p id=\"so_31260386_31260472_3\">Exchanges the contents of the container with those of other. Does not\n  invoke any move, copy, or swap operations on individual elements.\n  All iterators and references remain valid. The past-the-end iterator is invalidated. </p>\n<p id=\"so_31260386_31260472_4\">Complexity :\n  Constant.</p>\n</blockquote>\n<ol start=\"2\">\n<li><blockquote>\n<p id=\"so_31260386_31260472_5\">It's just swapping pointers?</p>\n</blockquote></li>\n</ol>\n<p>Basically, it depenes on the implementation of the STL you're using, but it is the most common way to achieve it.</p>\n", "LastEditorUserId": "3309790", "LastActivityDate": "2015-10-02T15:20:20.677", "Score": "10", "CreationDate": "2015-07-07T05:34:16.637", "ParentId": "31260386", "CommentCount": "0", "OwnerUserId": "3309790", "LastEditDate": "2015-10-02T15:20:20.677"}, "bq_ids": {"n4140": {"so_31260386_31260472_2": {"length": 5, "quality": 0.5555555555555556, "section_id": 2354}}, "n3337": {"so_31260386_31260472_2": {"length": 5, "quality": 0.5555555555555556, "section_id": 2339}}, "n4659": {"so_31260386_31260472_2": {"length": 5, "quality": 0.5555555555555556, "section_id": 2629}}}, "31260386": {"ViewCount": "728", "Body": "<p>For example:    </p>\n<pre><code>v1 = {1,2,3},    v2 = {4,5};\nswap(v1, v2);\n</code></pre>\n<p>now <code>v1 = {4,5}</code>,   <code>v2 = {1,2,3}</code></p>\n<p>I think it should be very fast with no regards of the length of these two vectors right? It's just swapping pointers?</p>\n", "AcceptedAnswerId": "31260472", "Title": "Swap two entire vectors/queue/stack time cost?", "CreationDate": "2015-07-07T05:27:47.533", "Id": "31260386", "CommentCount": "0", "LastEditDate": "2015-07-07T06:07:36.843", "PostTypeId": "1", "LastEditorUserId": "3309790", "LastActivityDate": "2015-10-02T15:20:20.677", "Score": "4", "OwnerUserId": "1468639", "Tags": "<c++><c++11><vector><stl>", "AnswerCount": "1"}});