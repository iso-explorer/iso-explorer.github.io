post_cb({"37412452": {"Id": "37412452", "PostTypeId": "2", "Body": "<b>C++11 \u00a75.2.8/4</b>\n<blockquote>\n<p id=\"so_37412265_37412452_0\"><strong>\u201d</strong> \u2026 If the type of the <em>type-id</em> is a reference to a possibly <em>cv</em>-qualified type, the result of the <code>typeid</code> expression refers to a <code>std::type_info</code> object representing the <em>cv</em>-unqualified referenced type. \u2026</p>\n</blockquote>\n<b>C++11 \u00a75.2.8/5</b>\n<blockquote>\n<p id=\"so_37412265_37412452_1\"><strong>\u201d</strong> The top-level <em>cv</em>-qualifiers of the glvalue expression or the <em>type-id</em> that is the operand of <code>typeid</code> are always ignored.</p>\n</blockquote>\n<p>Essentially, any top-level <code>const</code> is dropped, just as with formal function argument types wrt. the resulting function type, and additionally the <em>cv</em> qualification of <code>T</code> in a reference type <code>T&amp;</code>, is dropped.</p>\n<p>The latter is possibly in order to not make a distinction between <code>T&amp;</code> and just <code>T</code> \u2013 they yield the same result.</p>\n", "LastEditorUserId": "464581", "LastActivityDate": "2016-05-24T11:43:23.090", "Score": "4", "CreationDate": "2016-05-24T11:37:25.043", "ParentId": "37412265", "CommentCount": "2", "OwnerUserId": "464581", "LastEditDate": "2016-05-24T11:43:23.090"}, "37412396": {"Id": "37412396", "PostTypeId": "2", "Body": "<p>From <a href=\"http://en.cppreference.com/w/cpp/language/typeid\" rel=\"nofollow\"><code>typeid</code> reference</a>:</p>\n<blockquote>\n<p id=\"so_37412265_37412396_0\">If type is a reference type, the result refers to a <code>std::type_info</code> object representing the referenced type.</p>\n</blockquote>\n<p>and</p>\n<blockquote>\n<p id=\"so_37412265_37412396_1\">In all cases, cv-qualifiers are ignored by typeid (that is, <code>typeid(T)==typeid(const T)</code>)</p>\n</blockquote>\n<p>(more precisely top-level <code>const</code>) <code>T</code> was of course deduced as <code>const int</code>.</p>\n<hr>\n<p><sup>The standard paragraphs are <code>[expr.typeid]/4</code> and <code>[expr.typeid]/5</code></sup></p>\n</hr>", "LastEditorUserId": "3552770", "LastActivityDate": "2016-05-24T11:50:43.267", "Score": "2", "CreationDate": "2016-05-24T11:35:46.590", "ParentId": "37412265", "CommentCount": "5", "OwnerUserId": "3552770", "LastEditDate": "2016-05-24T11:50:43.267"}, "bq_ids": {"n4140": {"so_37412265_37412452_0": {"length": 16, "quality": 1.0, "section_id": 6023}, "so_37412265_37412396_0": {"length": 10, "quality": 1.0, "section_id": 6023}}, "n3337": {"so_37412265_37412452_1": {"length": 9, "quality": 0.9, "section_id": 5792}, "so_37412265_37412452_0": {"length": 16, "quality": 1.0, "section_id": 5791}, "so_37412265_37412396_0": {"length": 10, "quality": 1.0, "section_id": 5791}}, "n4659": {"so_37412265_37412452_0": {"length": 16, "quality": 1.0, "section_id": 7522}, "so_37412265_37412396_0": {"length": 10, "quality": 1.0, "section_id": 7522}}}, "37412265": {"ViewCount": "85", "Body": "<p>I have written following code and for pointer it is showing correct argument type, but when I use reference it is only showing <code>int</code> and no <code>const</code>. why?</p>\n<pre><code>template &lt;typename T&gt;\nvoid increment(T&amp; x)\n{\n    std::cout &lt;&lt; \"Argument type is : \" &lt;&lt; typeid(x).name() &lt;&lt; std::endl;\n    //x = x + 1;\n}\n\ntemplate &lt;typename T&gt;\nvoid increment(T* x)\n{\n    std::cout &lt;&lt; \"Argument type is : \" &lt;&lt; typeid(x).name() &lt;&lt; std::endl;\n    //x = x + 1;\n}  \n\nint main()\n{\n    const int x = 0;\n    const int y = x;\n    increment(x);\n    increment(&amp;y);\n}\n</code></pre>\n<p>Output:</p>\n<pre><code>Argument type is : int \nArgument type is : int const *\n</code></pre>\n<p>Please, can you explain why <code>const</code> is not shown with reference?</p>\n", "AcceptedAnswerId": "37412396", "Title": "Why is reference template argument not deducing const?", "CreationDate": "2016-05-24T11:28:15.850", "Id": "37412265", "CommentCount": "4", "LastEditDate": "2016-05-24T12:10:37.053", "PostTypeId": "1", "LastEditorUserId": "3552770", "LastActivityDate": "2016-05-24T12:10:37.053", "Score": "1", "OwnerUserId": "3600304", "Tags": "<c++><templates><reference><type-deduction>", "AnswerCount": "2"}});