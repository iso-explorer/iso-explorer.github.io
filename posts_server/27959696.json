post_cb({"27961539": {"ParentId": "27959696", "CommentCount": "3", "Body": "<p>All concerns about the legality of your idea aside<sup>[1]</sup>, and ignoring the possibility of using <code>std::current_exception</code> from C++11 onwards<sup>[2]</sup>, you have no way of handling exceptions in a <em>meaningful</em> way from inside a catch-all clause...</p>\n<p>... except if you <em>rethrow</em> or you don't care at all what kind of exception occurred. But without knowing what exception occurred, what would you do other than kill the process.</p>\n<p>The point of handling exceptions in the first place is that there's more to handling than just crashing and burning (or you could just let the compiler call <code>terminate</code>, which is easier and less code!). But handling needs to be <em>meaningful</em> in some way.<br>\nThis is why <code>throw;</code> as for example used in this common idiom is vastly superior to <code>goto</code>:</br></p>\n<pre><code>void handler()\n{\n    try { throw; } catch (foo&amp; f){} catch(bar&amp; b){}  /* ... */\n}\n\n// ...\ntry{ /* ... */ }\ncatch(...) { handler(); }\n</code></pre>\n<p>Yes, <code>goto</code> is not inherently evil, but one should only use it in the <em>very rare</em> cases where it actually makes code better, more concise, and more readable. This is not one such case.</p>\n<p>You might argue that rethrowing is expensive, but that isn't a valid argument. Exceptions occur <em>exceptionally</em>, but once you have encountered one, performance is no longer of much concern anyway.</p>\n<hr>\n<p><sup>[1]</sup>Pretty sure it's not in accordance with the standard, though I believe that GCC will let you do it anyway, there are some weird extensions on <code>goto</code> that let you do funny stuff.<br>\n<sup>[2]</sup>While it may be useful for passing exceptions to another thread, it is otherwise pretty ugly and unwieldy compared to the \"proper\" solution.</br></p>\n</hr>", "OwnerUserId": "572743", "PostTypeId": "2", "Id": "27961539", "Score": "2", "CreationDate": "2015-01-15T10:38:19.023", "LastActivityDate": "2015-01-15T10:38:19.023"}, "27959903": {"ParentId": "27959696", "PostTypeId": "2", "CommentCount": "6", "Body": "<p>Simple rule when it comes to <code>goto</code> (pretty much always): Assuming you don't KNOW of a specific reason to use <code>goto</code>, then don't. Basically, if you can't explain to someone else \"I'm using <code>goto</code> here because ...\" (and that \"because ...\" is a valid and good reason, not just \"I'm a lazy programmer and can't be bothered to add another level if if/loop/etc\" [that's my excuse every now and again!]). </p>\n<p><strike><code>throw</code> will help with cleanup, which <code>goto</code> won't, so any local variables that need to be cleaned in the interveening scope will not be</strike>. </p>\n<p>Using <code>throw</code> also allows you to have more than one level of function call to get out of, with one <code>throw</code> (in other words, you can be in a fairly deep call-stack, and get all the way out to a <code>catch</code> some levels further out).</p>\n<p>It is also, as Wintermute points out, not valid C++ code, so it may not \"work as expected\" even if you have a very good reason to do this. You would then have to do a goto to just before the catch, and do a throw there to get into the catch block. </p>\n", "OwnerUserId": "1919155", "LastEditorUserId": "1919155", "LastEditDate": "2015-01-15T09:16:31.550", "Id": "27959903", "Score": "1", "CreationDate": "2015-01-15T09:05:38.290", "LastActivityDate": "2015-01-15T09:16:31.550"}, "27959839": {"ParentId": "27959696", "PostTypeId": "2", "CommentCount": "9", "Body": "<p>EDIT: Now that it's a completely different question, the answer is completely different as well.</p>\n<p>The most idiomatic pattern to replace this <strong>for error handling</strong>, I believe, would be to subject the things your C library gives you to RAII with <code>std::unique_ptr</code> or <code>std::shared_ptr</code> using a custom deleter, in which case special handling in the normal case would no longer be necessary for them. Then you can handle errors the usual way:</p>\n<pre><code>// just for a simple example.\nstd::unique_ptr&lt;void, void(*)(void*)&gt; c_obj(malloc(1000), free);\n\ntry {\n  // Don't use goto, throw.\n} catch(...) {\n  // handle error here\n}\n// label not required anymore, cleanup handled by custom deleters. That means\n// that free will be called when c_obj is destroyed.\n</code></pre>\n<p>I stress that this is for error handling because using <code>throw</code> for normal control flow is bad for the same reasons that <code>goto</code> is bad: Code becomes more difficult to understand and maintain the more its structure resembles a lump of spaghetti. Were this for normal control flow, I'd tell you to look for ways to restate your problem in a more structured manner.</p>\n<p><strong>Answer to the original question</strong></p>\n<p>Using <code>goto</code> in this context is ill-formed as per [except] (15 (3) in C++11, 15 (2) in C++03):</p>\n<blockquote>\n<p id=\"so_27959696_27959839_0\">A <code>goto</code> or <code>switch</code> statement shall not be used to transfer control into a try block or handler. <em>[Example:</em></p>\n</blockquote>\n<pre><code>void f() {\n  goto l1; // Ill-formed\n  goto l2; // Ill-formed\n  try {\n    goto l1; // OK\n    goto l2; // Ill-formed\n    l1: ;\n  } catch(...) {\n    l2: ;\n    goto l1; // Ill-formed\n    goto l2; // OK\n  }\n}\n</code></pre>\n<blockquote>\n<p id=\"so_27959696_27959839_1\"><em>-- end example]</em> (...)</p>\n</blockquote>\n<p>Thus your compiler is justified in rejecting such code altogether, and indeed both gcc and clang refuse to compile it.</p>\n<p>I suspect that it is forbidden for the same reasons for which it is forbidden to jump past declarations with initialization, which is that being in an exception handler without an exceptions makes no more sense than being in the scope of a variable without the variable. Just like variables with automatic storage duration are handled at the end of the scope (the destructor is called), exceptions may be handled at the end of an exception handler<sup>1</sup>. If either were not there, that would be a problem.</p>\n<p>And of course it would also be a problem if your attempted to use them yourself, which is likely another part of the reason that it is forbidden.</p>\n<p><sup>1</sup> <em>will</em> be unless you say <code>throw;</code>, in which case the exception is handled <em>in</em> the handler.</p>\n", "OwnerUserId": "4301306", "LastEditorUserId": "4301306", "LastEditDate": "2015-01-15T10:22:24.820", "Id": "27959839", "Score": "8", "CreationDate": "2015-01-15T09:00:26.903", "LastActivityDate": "2015-01-15T10:22:24.820"}, "bq_ids": {"n4140": {"so_27959696_27959839_0": {"section_id": 3332, "quality": 0.9, "length": 9}}, "n3337": {"so_27959696_27959839_0": {"section_id": 3202, "quality": 0.9, "length": 9}}, "n4659": {"so_27959696_27959839_0": {"section_id": 4098, "quality": 0.9, "length": 9}}}, "27959696": {"CommentCount": "14", "ViewCount": "393", "PostTypeId": "1", "ClosedDate": "2015-01-31T05:32:52.167", "LastEditorUserId": "3204551", "CreationDate": "2015-01-15T08:52:02.597", "LastActivityDate": "2015-01-30T22:29:12.453", "Title": "goto or throw, advantages/disadvantages", "AcceptedAnswerId": "27961539", "LastEditDate": "2015-01-30T22:29:12.453", "Id": "27959696", "Score": "-5", "Body": "<p>I have this piece of code:</p>\n<pre><code>try\n{\n  // ...do something... possibly goto error\n}\ncatch (...)\n{\n}\nerror:\n// ...process error...\n</code></pre>\n<p>The problem I face is whether I should use <code>goto</code> (when possible) or <code>throw</code> to jump to the <code>error</code> label. What are the (dis)advantages of both approaches?</p>\n<p>EDIT: fixed code to conform to the standard.</p>\n", "Tags": "<c++>", "OwnerUserId": "1095108", "AnswerCount": "3"}});