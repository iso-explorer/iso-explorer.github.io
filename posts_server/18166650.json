post_cb({"bq_ids": {"n4140": {"so_18166650_18166673_0": {"length": 4, "quality": 0.5714285714285714, "section_id": 3913}}, "n3337": {"so_18166650_18166673_0": {"length": 4, "quality": 0.5714285714285714, "section_id": 3773}}}, "18166650": {"ViewCount": "284", "Body": "<p>I was experimenting with objects in C++ and I got a segmentation fault. There are no pointers in it that I created. So I have no idea what's wrong.</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;iomanip&gt;\n#include &lt;locale&gt;\n#include &lt;sstream&gt;\n#include &lt;string&gt;\nusing namespace std;\n\nclass test {\npublic:\n  test(string hw, int tree, string vate);\n  ~test() {\n\n  }\n  string helloworld;\n  int three;\n  string privacy() {\n    cout &lt;&lt; \"I will now access the  private variable PRI\\n\";\n    cout &lt;&lt; \"pri = private\\n\";\n    cout &lt;&lt; \"The value of PRI is \"+pri+\"\\n\";\n  }\nprivate:\n  string pri;\n};\n\ntest::test (string hw, int tree, string vate) {\nhelloworld = hw;\nthree = tree;\npri = vate;\n}\n\nint main() {\n  cout &lt;&lt; \"We will now perform an object test!\\n\";\n  test thing (\"hello world\", 3, \"private\");\n  cout &lt;&lt; \"thing.helloworld\\n\";\n  cout &lt;&lt; \"hello world\\n\";\n  cout &lt;&lt; \"Real value: \"+thing.helloworld+\"\\n\";\n  cout &lt;&lt; \"thing.three\\n\";\n  cout &lt;&lt; \"3\\n\";\n  ostringstream thee;\n  thee &lt;&lt; thing.three;\n  string result = thee.str();\n  cout &lt;&lt; \"Real value: \"+result+\"\\n\";\n  cout &lt;&lt; \"thing.privacy()\\n\";\n  cout &lt;&lt; \"Real value:\\n\";\n  thing.privacy();\n  return 0;\n}\n</code></pre>\n<p>This is the error I'm getting:</p>\n<pre><code>We will now perform an object test!\nthing.helloworld\nhello world\nReal value: hello world\nthing.three\n3\nReal value: 3\nthing.privacy()\nReal value:\nI will now access the  private variable PRI\npri = private\nThe value of PRI is private\n*** glibc detected *** ./objecttest: free(): invalid pointer: 0xbfd0d8ac ***\n======= Backtrace: =========\n/lib/i386-linux-gnu/i686/cmov/libc.so.6(+0x70f01)[0xb7568f01]\n/lib/i386-linux-gnu/i686/cmov/libc.so.6(+0x72768)[0xb756a768]\n/lib/i386-linux-gnu/i686/cmov/libc.so.6(cfree+0x6d)[0xb756d81d]\n/usr/lib/i386-linux-gnu/libstdc++.so.6(_ZdlPv+0x1f)[0xb76ec4bf]\n/lib/i386-linux-gnu/i686/cmov/libc.so.6(__libc_start_main+0xe6)[0xb750ee46]\n./objecttest[0x8048bb1]\n======= Memory map: ========\n08048000-0804a000 r-xp 00000000 08:01 782387     /home/jacob/Coding/cpptests/objecttest\n0804a000-0804b000 rw-p 00001000 08:01 782387     /home/jacob/Coding/cpptests/objecttest\n08098000-080b9000 rw-p 00000000 00:00 0          [heap]\nb7300000-b7321000 rw-p 00000000 00:00 0 \nb7321000-b7400000 ---p 00000000 00:00 0 \nb74f6000-b74f8000 rw-p 00000000 00:00 0 \nb74f8000-b7654000 r-xp 00000000 08:01 655678     /lib/i386-linux-gnu/i686/cmov/libc- 2.13.so\nb7654000-b7655000 ---p 0015c000 08:01 655678     /lib/i386-linux-gnu/i686/cmov/libc-2.13.so\nb7655000-b7657000 r--p 0015c000 08:01 655678     /lib/i386-linux-gnu/i686/cmov/libc-2.13.so\nb7657000-b7658000 rw-p 0015e000 08:01 655678     /lib/i386-linux-gnu/i686/cmov/libc-2.13.so\nb7658000-b765b000 rw-p 00000000 00:00 0 \nb765b000-b7677000 r-xp 00000000 08:01 651524     /lib/i386-linux-gnu/libgcc_s.so.1\nb7677000-b7678000 rw-p 0001b000 08:01 651524     /lib/i386-linux-gnu/libgcc_s.so.1\nb7678000-b7679000 rw-p 00000000 00:00 0 \nb7679000-b769d000 r-xp 00000000 08:01 655675     /lib/i386-linux-gnu/i686/cmov/libm-2.13.so\nb769d000-b769e000 r--p 00023000 08:01 655675     /lib/i386-linux-gnu/i686/cmov/libm-2.13.so\nb769e000-b769f000 rw-p 00024000 08:01 655675     /lib/i386-linux-gnu/i686/cmov/libm-2.13.so\nb769f000-b777f000 r-xp 00000000 08:01 1046437    /usr/lib/i386-linux-gnu/libstdc++.so.6.0.17\nb777f000-b7783000 r--p 000e0000 08:01 1046437    /usr/lib/i386-linux-gnu/libstdc++.so.6.0.17\nb7783000-b7784000 rw-p 000e4000 08:01 1046437    /usr/lib/i386-linux-gnu/libstdc++.so.6.0.17\nb7784000-b778b000 rw-p 00000000 00:00 0 \nb77a0000-b77a3000 rw-p 00000000 00:00 0 \nb77a3000-b77a4000 r-xp 00000000 00:00 0          [vdso]\nb77a4000-b77c0000 r-xp 00000000 08:01 651542     /lib/i386-linux-gnu/ld-2.13.so\nb77c0000-b77c1000 r--p 0001b000 08:01 651542     /lib/i386-linux-gnu/ld-2.13.so\nb77c1000-b77c2000 rw-p 0001c000 08:01 651542     /lib/i386-linux-gnu/ld-2.13.so\nbfcee000-bfd0f000 rw-p 00000000 00:00 0          [stack]\nAborted\n</code></pre>\n<p>What does the pointer 0xbfd0d8ac point to? </p>\n", "AcceptedAnswerId": "18166673", "Title": "Unexplainable C++ Segmentation Error", "CreationDate": "2013-08-10T21:47:51.863", "Id": "18166650", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2013-08-10T22:23:56.170", "Score": "0", "OwnerUserId": "2635324", "Tags": "<c++><segmentation-fault>", "AnswerCount": "1"}, "18166673": {"PostTypeId": "2", "Body": "<p>Your <code>string privacy()</code> returns a <code>string</code>, but you never return anything. It is undefined behavior to flow off the end of a function in a value-returning function. Perhaps you wanted it be <code>void privacy()</code>.</p>\n<p>Also, I recommend compiling with <code>-Wall</code>. You would get a compiler warning, <code>[-Wreturn-type]</code> telling you the problem right away:</p>\n<blockquote>\n<p id=\"so_18166650_18166673_0\">warning: no return statement in function returning non-void\n  [-Wreturn-type]</p>\n</blockquote>\n", "LastActivityDate": "2013-08-10T22:23:56.170", "LastEditorUserId": "906773", "Id": "18166673", "CommentCount": "3", "CreationDate": "2013-08-10T21:49:59.597", "ParentId": "18166650", "Score": "5", "OwnerUserId": "906773", "LastEditDate": "2013-08-10T22:23:56.170"}});