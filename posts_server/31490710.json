post_cb({"bq_ids": {"n4140": {"so_31490710_31490957_0": {"length": 10, "quality": 0.8333333333333334, "section_id": 7088}}, "n3337": {"so_31490710_31490957_0": {"length": 10, "quality": 0.8333333333333334, "section_id": 6832}}, "n4659": {"so_31490710_31490957_0": {"length": 10, "quality": 0.8333333333333334, "section_id": 8589}}}, "31490957": {"Id": "31490957", "PostTypeId": "2", "Body": "<p>In the first program used variable <code>i</code> is defined in namespace P because the using directive </p>\n<pre><code>using namespace X;\n</code></pre>\n<p>places declarations of X in the global namespace (the common namepsace for X and P). Thus the declaration of <code>i</code> in P (more precisely in Q due to another using directive) hides the declaration of <code>X::i</code> in the global namespace.</p>\n<p>From the C++ Standard (3.4.1 Unqualified name lookup)</p>\n<blockquote>\n<p id=\"so_31490710_31490957_0\">2 The declarations from the namespace nominated by a using-directive\n  become visible in a namespace enclosing the using-directive; see\n  7.3.4.</p>\n</blockquote>\n<p>So we have for the first program</p>\n<pre><code>namespace X { int i = 1; }\n\nnamespace Q {    \n    namespace P {        \n        int i = 2;\n        using namespace X; // 1\n    }\n\n    using namespace P; // 2\n\n    int l = i;\n}\n</code></pre>\n<p>that the enclosing namespace for using directive #1 is the global namespace and the enclosing namespace for using directive #2 is the namepsace Q.</p>\n<p>In the second program the both definitions of <code>i</code> are placed in the global namespace due to these two using directives</p>\n<pre><code>//...\nusing namespace X;\n//...\nusing namespace P;\n</code></pre>\n", "LastEditorUserId": "2877241", "LastActivityDate": "2015-07-18T12:17:58.280", "Score": "1", "CreationDate": "2015-07-18T12:03:13.243", "ParentId": "31490710", "CommentCount": "0", "OwnerUserId": "2877241", "LastEditDate": "2015-07-18T12:17:58.280"}, "31490710": {"ViewCount": "79", "Body": "<p>I'm trying to understand why this program does not give an name-lookup ambiguity for i:</p>\n<pre><code>namespace X { int i = 1; }\n\nnamespace Q {    \n    namespace P {        \n        int i = 2;\n        using namespace X;\n    }\n\n    using namespace P;\n\n    int l = i;\n}\n\nint main() {}\n</code></pre>\n<p>If we modify it like this we get a name-lookup ambiguity:</p>\n<pre><code>namespace X { int i = 1; }\n\nnamespace P {        \n    int i = 2;\n    using namespace X;\n}\n\nusing namespace P;\n\nint l = i;\n\nint main() {}\n</code></pre>\n<p>The only change I made here is to remove the namespace Q and place it's content in the global namespace instead.</p>\n<p>I have tried with 3 different compilers:</p>\n<ul>\n<li>GCC and Clang with <a href=\"http://melpon.org/wandbox\" rel=\"nofollow\">http://melpon.org/wandbox</a></li>\n<li>visual c++ with <a href=\"http://webcompiler.cloudapp.net/\" rel=\"nofollow\">http://webcompiler.cloudapp.net/</a></li>\n</ul>\n<p>The all give the results stated in this email, and i'm trying to find out why.</p>\n<p>Can anyone explain the behaviour in terms of the c++ standard? I fail to understand it.</p>\n", "AcceptedAnswerId": "31490957", "Title": "Name-lookup ambiguity inconsistency", "CreationDate": "2015-07-18T11:29:55.960", "Id": "31490710", "CommentCount": "3", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2015-07-18T12:17:58.280", "Score": "4", "OwnerUserId": "1272610", "Tags": "<c++><language-lawyer><using-directives><name-lookup>", "AnswerCount": "1"}});