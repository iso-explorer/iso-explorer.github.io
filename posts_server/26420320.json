post_cb({"bq_ids": {"n4140": {"so_26420320_26421623_0": {"length": 15, "quality": 1.0, "section_id": 7070}}, "n3337": {"so_26420320_26421623_0": {"length": 15, "quality": 1.0, "section_id": 6814}}, "n4659": {"so_26420320_26421623_0": {"length": 15, "quality": 1.0, "section_id": 8568}}}, "26420320": {"ViewCount": "80", "Body": "<p>I am facing the following problem:</p>\n<p>My interfaces are defined in C#. I use custom enums in my interfaces. Some of the enums have the same name as the datatype they return, e.g.:</p>\n<pre><code>Foo Foo { get; }\nBar Bar { get; }\n</code></pre>\n<p>I use tlbexp to use the module in C++.\nProperties that share their name with their datatype are renamed from \"Name\" to \"_Name\":</p>\n<blockquote>\n<p id=\"so_26420320_26420320_0\">Bar myEnumValue = pFoo-&gt;Bar // does not exist</p>\n<p id=\"so_26420320_26420320_1\">Bar myEnumValue = pFoo-&gt;_Bar // is my 'Bar'-Property</p>\n</blockquote>\n<p>So far, i did not find any documentation about the reason and if/how i am able to prevent this. \nI do not get any warnings during build or export..\nTo make the usage of my module intuitive, I do not want to rename the property or the enum.</p>\n<p>Can anyone explain me why this happens?</p>\n", "AcceptedAnswerId": "26421623", "Title": "Properties get renamed when their name is the same as the datatype they return", "CreationDate": "2014-10-17T07:49:03.523", "Id": "26420320", "CommentCount": "1", "LastEditDate": "2014-10-17T08:12:08.500", "PostTypeId": "1", "LastEditorUserId": "3193874", "LastActivityDate": "2014-10-17T10:22:51.907", "Score": "2", "OwnerUserId": "3193874", "Tags": "<c#><c++><com><com-interop><tlbexp>", "AnswerCount": "1"}, "26421623": {"Id": "26421623", "PostTypeId": "2", "Body": "<p>In C++ this is not allowed:</p>\n<pre><code>class B {};\nclass A {\n    B B;\n};\n</code></pre>\n<p>because of <code>[basic.scope.class] 3.3.7/1</code>:</p>\n<blockquote>\n<p id=\"so_26420320_26421623_0\">A name N used in a class S shall refer to the same declaration in its context and when re-evaluated in the completed scope of S. No diagnostic is required for a violation of this rule.</p>\n</blockquote>\n<hr>\n<p>Note that this applies only to declarations inside a class, for namespace scope or function scope the rules are more complicated - sometimes <code>B B;</code> is allowed, sometimes not.</p>\n<hr>\n<p><strong>Update</strong>: actually this is perfectly valid:</p>\n<pre><code>class B {};\nclass A {\n    ::B B;\n};\n</code></pre>\n<p>So you can try to make <code>tlbexp</code> generate code like this.</p>\n</hr></hr>", "LastEditorUserId": "3959454", "LastActivityDate": "2014-10-17T10:22:51.907", "Score": "1", "CreationDate": "2014-10-17T09:08:49.620", "ParentId": "26420320", "CommentCount": "5", "OwnerUserId": "3959454", "LastEditDate": "2014-10-17T10:22:51.907"}});