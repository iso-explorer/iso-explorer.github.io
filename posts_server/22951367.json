post_cb({"bq_ids": {"n4140": {"so_22951367_23298947_0": {"length": 4, "quality": 0.5714285714285714, "section_id": 64}, "so_22951367_23298947_1": {"length": 5, "quality": 0.625, "section_id": 166}}, "n3337": {"so_22951367_23298947_0": {"length": 4, "quality": 0.5714285714285714, "section_id": 59}, "so_22951367_23298947_1": {"length": 5, "quality": 0.625, "section_id": 160}}, "n4659": {"so_22951367_23298947_0": {"length": 4, "quality": 0.5714285714285714, "section_id": 66}, "so_22951367_23298947_1": {"length": 5, "quality": 0.625, "section_id": 170}}}, "22955252": {"Id": "22955252", "PostTypeId": "2", "Body": "<p>You may do the following:</p>\n<pre><code>namespace detail\n{\n\ntemplate &lt;typename T&gt; struct Adder\n{\n    double operator() (double) const {\n        std::cerr &lt;&lt; \"Undefined for type: \" &lt;&lt; typeid(T).name() &lt;&lt; std::endl;\n        exit(EXIT_FAILURE);\n    }\n};\n\ntemplate &lt;typename T&gt; struct Adder&lt;MyOps&lt;T&gt;&gt;\n{\n    double operator() (double x) const {\n        return MyOps&lt;T&gt;::add(x, 1.);\n    }\n};\n\n}\n\ntemplate &lt;template &lt;typename&gt; class T&gt;\ndouble add1(double const &amp; x) {\n    return detail::Adder&lt;T&lt;double&gt;&gt;()(x);\n}\n</code></pre>\n", "LastEditorUserId": "2684539", "LastActivityDate": "2014-04-09T09:52:19.053", "Score": "0", "CreationDate": "2014-04-09T07:08:05.150", "ParentId": "22951367", "CommentCount": "2", "LastEditDate": "2014-04-09T09:52:19.053", "OwnerUserId": "2684539"}, "22951367": {"ViewCount": "61", "Body": "<p>Does template specialization work with alias templates?  Specifically, the following code throws an unexpected error:</p>\n<pre><code>$ cat test01.h \n#ifndef TEST01_H\n#define TEST01_H\n\n#include &lt;iostream&gt;\n#include &lt;typeinfo&gt;\n#include &lt;cstdlib&gt;\n\ntemplate &lt;template &lt;typename&gt; class Ops&gt;\ndouble add1(double const &amp; x) {\n    std::cerr &lt;&lt; \"Undefined for type: \" &lt;&lt; typeid(Ops &lt;double&gt;).name() &lt;&lt; std::endl;\n    exit(EXIT_FAILURE);\n}\n\ntemplate &lt;typename Real&gt;\nstruct MyOps {\n    static Real add(Real const &amp; x,Real const &amp; y) {\n        return x+y;\n    }\n};\n\ntemplate &lt;typename Real&gt; using MyOpsAlias = MyOps &lt;Real&gt;;\n\n#endif\n</code></pre>\n<p>In addition,</p>\n<pre><code>$ cat test01.cpp \n#include \"test01.h\"\n\ntemplate &lt;&gt;\ndouble add1 &lt;MyOps&gt; (double const &amp; x) {\n    return MyOps &lt;double&gt;::add(x,1.);\n}\n\nint main() {\n    std::cout &lt;&lt; add1 &lt;MyOps&gt; (2.) &lt;&lt; std::endl;\n    std::cout &lt;&lt; add1 &lt;MyOpsAlias&gt; (2.) &lt;&lt; std::endl;\n}\n</code></pre>\n<p>After running this code, I receive</p>\n<pre><code>$ ./test01 \n3\nUndefined for type: 5MyOpsIdE\n</code></pre>\n<p>I expected that both answers should return 3 since MyOpsAlias should just be an alias template of MyOps.  In case it matters, I'm using GCC 4.7.3.</p>\n", "AcceptedAnswerId": "23298947", "Title": "Does template specialization work with alias templates?", "CreationDate": "2014-04-09T01:50:02.410", "Id": "22951367", "CommentCount": "7", "PostTypeId": "1", "LastActivityDate": "2014-04-25T16:56:26.807", "Score": "1", "OwnerUserId": "1932452", "Tags": "<templates><c++11>", "AnswerCount": "2"}, "23298947": {"Id": "23298947", "PostTypeId": "2", "Body": "<p>As <a href=\"https://stackoverflow.com/users/34509/johannes-schaub-litb\"><strong>Johannes Schaub - litb</strong></a> explains in <a href=\"https://stackoverflow.com/a/22896036/3043539\">his answer</a> to <a href=\"https://stackoverflow.com/q/22892052/3043539\">my recent question</a>:</p>\n<blockquote>\n<p id=\"so_22951367_23298947_0\">A alias template is <em>not</em> a template alias (despite intended by some to be).</p>\n</blockquote>\n<p>So it is not a bug, it is a standard-compliant behavior.</p>\n<p>See also paragraph [temp.alias] 14.5.7/2 of the standard:</p>\n<blockquote>\n<p id=\"so_22951367_23298947_1\"><em>[ Note:</em> An alias template name is never deduced. <em>\u2014 end note ]</em></p>\n</blockquote>\n", "LastEditorUserId": "-1", "LastActivityDate": "2014-04-25T16:56:26.807", "Score": "1", "CreationDate": "2014-04-25T16:56:26.807", "ParentId": "22951367", "CommentCount": "0", "LastEditDate": "2017-05-23T10:32:26.533", "OwnerUserId": "3043539"}});