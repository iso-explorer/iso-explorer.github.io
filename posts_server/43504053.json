post_cb({"43504053": {"CommentCount": "10", "ViewCount": "61", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2017-04-19T19:03:10.647", "LastActivityDate": "2017-04-19T19:45:59.573", "Title": "Using overloaded/replaced delete[] on nullptr", "AcceptedAnswerId": "43504790", "LastEditDate": "2017-05-23T12:17:41.613", "Id": "43504053", "Score": "2", "Body": "<p>After searching on stackoverflow I've found that: \"It's still the responisiblity of operator delete (or delete[]) to check; the standard doesn't guarantee that it won't be given a null pointer; the standard requires that it be a no-op if given a null pointer. \"(<a href=\"https://stackoverflow.com/questions/1108360/delete-a-null-pointer-does-not-call-overloaded-delete-when-destructor-is-written\">delete a NULL pointer does not call overloaded delete when destructor is written</a>)\nNow to my question, is there any way to force the compiler to generate code that actually calls the overloaded/replaced delete[](for nullptr), example:</p>\n<pre><code>void *operator new[] (size_t n)\n{\n     std::cout &lt;&lt; \"new works \";\n    return std::malloc (n);\n}\n\nvoid operator delete [] ( void* ptr) {\n     if(!ptr) {\n          std::cout &lt;&lt; \"you just tried to delete a nullptr\";\n          return;\n     }\n     else {\n          std::cout &lt;&lt; \"delete works\";\n          free(ptr);\n     }\n}\nint main(){\n\n     char *p(new char[5]);\n     char *q = nullptr;\n     delete[] p;\n     delete[] q;\n     return 0;\n}\n</code></pre>\n<p>Like this it produces the output:</p>\n<pre><code>new works delete works\n</code></pre>\n<p>I've tried compiling it with -O0, but that doesn't seem to change anything(additional info: g++ --version\ng++ (Ubuntu 5.4.0-6ubuntu1~16.04.4) 5.4.0 20160609\n)</p>\n", "Tags": "<c++>", "OwnerUserId": "7891613", "AnswerCount": "1"}, "43504790": {"ParentId": "43504053", "CommentCount": "1", "Body": "<p>The standard leaves this behaviour unspecified.</p>\n<p>C++11, \u00a75.3.5, item 7:</p>\n<blockquote>\n<p id=\"so_43504053_43504790_0\">If the value of the operand of the delete-expression is not a null\n  pointer value, the delete-expression will call a deallocation function\n  (3.7.4.2). Otherwise, it is unspecified whether the deallocation\n  function will be called.</p>\n</blockquote>\n<p>C++14 adds some details for the case of a non-null pointer, but the null case is the same.</p>\n<p>If there is any way to force any specific behaviour, it would be a compiler extension.</p>\n", "OwnerUserId": "404970", "PostTypeId": "2", "Id": "43504790", "Score": "1", "CreationDate": "2017-04-19T19:45:59.573", "LastActivityDate": "2017-04-19T19:45:59.573"}, "bq_ids": {"n4140": {"so_43504053_43504790_0": {"section_id": 6111, "quality": 0.8947368421052632, "length": 17}}, "n3337": {"so_43504053_43504790_0": {"section_id": 5877, "quality": 0.8947368421052632, "length": 17}}, "n4659": {"so_43504053_43504790_0": {"section_id": 7608, "quality": 0.8947368421052632, "length": 17}}}});