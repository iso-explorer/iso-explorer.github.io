post_cb({"bq_ids": {"n4140": {"so_30527865_30528095_0": {"length": 19, "quality": 0.95, "section_id": 5425}, "so_30527865_30528095_1": {"length": 14, "quality": 1.0, "section_id": 6185}}, "n3337": {"so_30527865_30528095_0": {"length": 19, "quality": 0.95, "section_id": 5220}}, "n4659": {"so_30527865_30528095_0": {"length": 15, "quality": 0.75, "section_id": 6847}, "so_30527865_30528095_1": {"length": 11, "quality": 0.7857142857142857, "section_id": 7687}}}, "30527865": {"ViewCount": "2170", "Body": "<p>I'd like to do something like this (inside a class):</p>\n<pre><code>static constexpr MyStruct ops[6] = {\n    {'+', [&amp;] (double a, double b) { return a+b; } },\n    {'-', [&amp;] (double a, double b) { return a-b; } },\n    ...\n};\n</code></pre>\n<p>Where <code>MyStruct</code> is defined as:</p>\n<pre><code>typedef double (*binOp)(double, double);\nstruct MyStruct {\n    char c;\n    binOp fn;\n};\n</code></pre>\n<p>I also tried:</p>\n<pre><code>std::function &lt;double(double,double)&gt; fn;\n</code></pre>\n<p>for the definition of <code>fn</code>, but no luck.</p>\n<p>The error I get for the first case is <em>\"error: field initializer is not constant\"</em> which I don't really get. If I try with <code>std::function</code> it gets worse, since it says: \"cannot be initialized by a non-constant expression when being declared\".</p>\n<p>Why is the lambda function non-constant? Am I missing something?</p>\n", "AcceptedAnswerId": "30528095", "Title": "Static array of lambda functions (C++)", "CreationDate": "2015-05-29T11:01:10.190", "Id": "30527865", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2017-10-20T07:10:11.773", "LastEditorUserId": "1482455", "LastActivityDate": "2017-10-20T07:10:11.773", "Score": "11", "OwnerUserId": "3726686", "Tags": "<c++><c++11><lambda>", "AnswerCount": "2"}, "30528095": {"Id": "30528095", "PostTypeId": "2", "Body": "<p>When you construct <code>constexpr</code> object, everything you pass into it needs to be a core constant expression, [decl.constexpr]/9:</p>\n<blockquote>\n<p id=\"so_30527865_30528095_0\">A <code>constexpr</code> specifier used in an object declaration declares the object as <code>const</code>. Such an object shall have\n  literal type and shall be initialized. If it is initialized by a constructor call, <strong>that call shall be a constant expression</strong> (5.19).</p>\n</blockquote>\n<p>and, from [expr.const] lambdas are not constant expressions<sup>1</sup>:</p>\n<blockquote>\n<p id=\"so_30527865_30528095_1\">A <em>conditional-expression</em> <em>e</em> is a <em>core constant expression</em> unless the evaluation of <em>e</em>, following the rules of the\n  abstract machine (1.9), would evaluate one of the following expressions:</p>\n<ul>\n<li>[...]</li>\n<li>a lambda-expression (5.1.2);</li>\n<li>[...]</li>\n</ul>\n</blockquote>\n<p>However, that applies only to <code>constexpr</code> and not to <code>const</code>, so you could simply do that instead:</p>\n<pre><code>static const MyStruct ops[6] = {\n    {'+', [] (double a, double b) { return a+b; } },\n    {'-', [] (double a, double b) { return a-b; } },\n};\n</code></pre>\n<p>Note: your lambdas don't need to capture anything, so you should just the empty capture list <code>[]</code>.</p>\n<p><hr>\n<sub><sup>1</sup>As <a href=\"https://stackoverflow.com/questions/30527865/static-array-of-lambda-functions-c/30528095#comment49129482_30527865\">dyp</a> points out, there is a proposal to change this: <a href=\"https://isocpp.org/files/papers/N4487.pdf\" rel=\"nofollow noreferrer\">N4487</a></sub></hr></p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2015-05-29T11:18:30.040", "Score": "9", "CreationDate": "2015-05-29T11:12:46.200", "ParentId": "30527865", "CommentCount": "0", "OwnerUserId": "2069064", "LastEditDate": "2017-05-23T12:15:59.197"}, "30528062": {"Id": "30528062", "PostTypeId": "2", "Body": "<p>capturing lambda cannot decay to function pointer.</p>\n<p>and operator to return the function pointer from a (non-capturing) lambda is not <code>constexpr</code>.</p>\n", "LastActivityDate": "2015-05-29T11:10:51.647", "CommentCount": "0", "CreationDate": "2015-05-29T11:10:51.647", "ParentId": "30527865", "Score": "0", "OwnerUserId": "2684539"}});