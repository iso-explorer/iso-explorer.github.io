post_cb({"bq_ids": {"n4140": {"so_22801069_22801135_0": {"length": 29, "quality": 0.90625, "section_id": 31}}, "n3337": {"so_22801069_22801135_0": {"length": 29, "quality": 0.90625, "section_id": 28}}, "n4659": {"so_22801069_22801135_0": {"length": 29, "quality": 0.90625, "section_id": 31}}}, "22801338": {"Id": "22801338", "PostTypeId": "2", "Body": "<p>After trying to think of ways this might go wrong, I realized that there's a danger that the calling function might implicitly cast the return value to a larger type (ie unsigned int to unsigned long long).  Then checking if that value == -1 will be false.</p>\n<p>The safer option is to explicitly use size_t.max as the sentinel value.  I'm always uncomfortable with changing between signed and unsigned types.  Sometimes I think the more reasonable approach is to just make everything signed (like Java does).</p>\n", "LastActivityDate": "2014-04-02T04:04:26.793", "CommentCount": "0", "CreationDate": "2014-04-02T04:04:26.793", "ParentId": "22801069", "Score": "2", "OwnerUserId": "403875"}, "22801135": {"Id": "22801135", "PostTypeId": "2", "Body": "<p><code>-1</code> will always convert to the max unsigned value, this is due to section <code>4.7</code> <em>Integral conversions</em>:</p>\n<blockquote>\n<p id=\"so_22801069_22801135_0\">If the destination type is unsigned, the resulting value is the least unsigned integer congruent to the source\n  integer (modulo 2n where n is the number of bits used to represent the unsigned type). [ Note: In a two\u2019s\n  complement representation, this conversion is conceptual and there is no change in the bit pattern (if there\n  is no truncation). \u2014end note ]</p>\n</blockquote>\n<p>The same quote for <em>C99</em> would be from <code>6.3.1.3</code>:</p>\n<blockquote>\n<p id=\"so_22801069_22801135_1\">Otherwise, if the new type is unsigned, the value is converted by repeatedly adding or\n  subtracting one more than the maximum value that can be represented in the new type\n  until the value is in the range of the new type.<sup>49)</sup></p>\n</blockquote>\n<p>So we end up with:</p>\n<pre><code>-1 + (UMAX + 1)\n</code></pre>\n<p>which is:</p>\n<pre><code>UMAX\n</code></pre>\n", "LastEditorUserId": "1708801", "LastActivityDate": "2015-02-13T13:10:44.297", "Score": "14", "CreationDate": "2014-04-02T03:43:29.473", "ParentId": "22801069", "CommentCount": "5", "OwnerUserId": "1708801", "LastEditDate": "2015-02-13T13:10:44.297"}, "22801069": {"ViewCount": "730", "Body": "<p>I was using -1 as a flag value for a function whose return type is size_t (an unsigned type).</p>\n<p>I didn't notice it at first, particularly because it wasn't causing any errors in my code (I was checking it with x == -1, not x &lt; 0).</p>\n<p>Are there any subtle reasons I shouldn't leave it as is?  When might this behave unexpectedly?  Is this commonly used?</p>\n<p>ptrdiff_t is less common, takes longer to type, and anyway it's not really the appropriate type since the function returns an index into an array.</p>\n", "AcceptedAnswerId": "22801338", "Title": "Using -1 as a flag value for unsigned (size_t) types", "CreationDate": "2014-04-02T03:35:32.727", "Id": "22801069", "CommentCount": "0", "FavoriteCount": "4", "PostTypeId": "1", "LastEditDate": "2014-12-17T10:51:00.493", "LastEditorUserId": "2932052", "LastActivityDate": "2015-02-13T13:24:44.377", "Score": "9", "OwnerUserId": "403875", "Tags": "<c++><c><design><d><twos-complement>", "AnswerCount": "3"}, "28500654": {"Id": "28500654", "PostTypeId": "2", "Body": "<p>The obvious caveat lies in the case of a set of elements with a size equal to the largest size possible. The possibility and usability of this happening in practice and actually being the cause of your problem at that point are negligible.</p>\n<p>If you look at the C++ <code>std::string</code> class, you will notice the <code>static std::string::npos</code> data member is defined as exactly <code>-1</code> converted to <code>std::string::size_type</code> (which is really just <code>std::size_t</code>. That gives this \"technique\" a sense of precedence, which allows it to fullfil The Principle of Least Surprise\u2122, which is always a Good Thing\u00ae.</p>\n<p>Now, using <code>-1</code> directly in a comparison like that is asking for trouble. You should, as in the <code>std::string</code> case, ensure there is an accessible name for this value that will ensure its special meaning. unfortunately, the C++ type system isn't strict enough for this to prevent a user from shooting himself in the foot, but at least a user adhering to documented best practice won't think of doing things differently.</p>\n", "LastActivityDate": "2015-02-13T13:24:44.377", "CommentCount": "0", "CreationDate": "2015-02-13T13:24:44.377", "ParentId": "22801069", "Score": "2", "OwnerUserId": "256138"}});