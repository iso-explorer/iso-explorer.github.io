post_cb({"24479553": {"ViewCount": "201", "Body": "<p>In Professional C++ (2e page 689) it says:</p>\n<blockquote>\n<p id=\"so_24479553_24479553_0\">Only for constructors and the destructor you should use <code>X</code> and not\n  <code>X&lt;T&gt;</code>.</p>\n</blockquote>\n<p>So:</p>\n<pre><code>template&lt;typename T&gt;\nclass X{\n    X();                                  // X\n    ~X();                                 // X\n    X&lt;T&gt;&amp; operator=(const X&lt;T&gt;&amp; rhs);     // X&lt;T&gt;\n};\n</code></pre>\n<p>Why should you not use <code>X&lt;T&gt;</code> for constructor and destructor declarations?</p>\n", "Title": "Why use X and not X<T> for templated constructor and destructor?", "CreationDate": "2014-06-29T19:37:34.807", "LastActivityDate": "2014-07-01T11:56:11.773", "CommentCount": "9", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2014-06-29T20:29:56.930", "LastEditorUserId": "997112", "Id": "24479553", "Score": "14", "OwnerUserId": "997112", "Tags": "<c++><templates>", "AnswerCount": "2"}, "24509210": {"Id": "24509210", "PostTypeId": "2", "Body": "<p>Here there is no relevance to X , it is just a class name.</p>\n<p>Since constructors and destructors share the same name as the class and there is no return type  for both, there is no need to specify it.</p>\n", "LastActivityDate": "2014-07-01T11:31:36.320", "Score": "-1", "CreationDate": "2014-07-01T11:31:36.320", "ParentId": "24479553", "CommentCount": "0", "OwnerUserId": "3584528"}, "bq_ids": {"n4140": {"so_24479553_24509400_0": {"length": 7, "quality": 0.7777777777777778, "section_id": 74}, "so_24479553_24509400_1": {"length": 36, "quality": 0.9, "section_id": 179}}, "n3337": {"so_24479553_24509400_0": {"length": 7, "quality": 0.7777777777777778, "section_id": 69}, "so_24479553_24509400_1": {"length": 36, "quality": 0.9, "section_id": 173}}, "n4659": {"so_24479553_24509400_0": {"length": 7, "quality": 0.7777777777777778, "section_id": 76}, "so_24479553_24509400_1": {"length": 36, "quality": 0.9, "section_id": 184}}}, "24509400": {"Id": "24509400", "PostTypeId": "2", "Body": "<p><strong>The quote is, quite simply, <em>wrong</em>.</strong></p>\n<p><code>X&lt;T&gt;</code> is the actual name of the type:</p>\n<blockquote>\n<p id=\"so_24479553_24509400_0\"><code>[C++11: 14.2/6]:</code> A <em>simple-template-id</em> that names a class template specialization is a <em>class-name</em> (Clause 9).</p>\n</blockquote>\n<p>\u2026and you can use it everywhere:</p>\n<pre><code>template&lt;typename T&gt;\nclass X\n{\npublic:\n    X&lt;T&gt;() {}\n    ~X&lt;T&gt;() {}\n    X&lt;T&gt;&amp; operator=(const X&lt;T&gt;&amp; rhs) {}\n};\n\nint main()\n{\n    X&lt;int&gt; x;\n}\n</code></pre>\n<p>(<a href=\"http://coliru.stacked-crooked.com/a/245cb9ad647016b7\" rel=\"nofollow\">live demo</a>)</p>\n<p>You may optionally use <code>X</code> as a \"shorthand\", whereby the template argument will be automatically appended for you (kinda):</p>\n<blockquote>\n<p id=\"so_24479553_24509400_1\"><code>[C++11: 14.6.1/1]:</code> <strong>Like normal (non-template) classes, class templates have an <em>injected-class-name</em> (Clause 9). The <em>injected-class-name</em> can be used as a <em>template-name</em> or a <em>type-name</em>.</strong> When it is used with a <em>template-argument-list</em>, as a <em>template-argument</em> for a template <em>template-parameter</em>, or as the final identi\ufb01er in the <em>elaborated-type-specifier</em> of a friend class template declaration, it refers to the class template itself. <strong>Otherwise, it is equivalent to the <em>template-name</em> followed by the <em>template-parameters</em> of the class template enclosed in <code>&lt;&gt;</code>.</strong></p>\n</blockquote>\n<p>\u2026but it's certainly not <em>required</em> anywhere.</p>\n<p><strong>It sounds like the author is trying to enforce a <em>style guide</em>, but has made it insufficiently clear that it is entirely up to you.</strong></p>\n", "LastEditorUserId": "560648", "LastActivityDate": "2014-07-01T11:56:11.773", "Score": "4", "CreationDate": "2014-07-01T11:40:27.333", "ParentId": "24479553", "CommentCount": "2", "LastEditDate": "2014-07-01T11:56:11.773", "OwnerUserId": "560648"}});