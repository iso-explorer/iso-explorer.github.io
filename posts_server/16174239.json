post_cb({"16174353": {"LastActivityDate": "2013-04-23T16:45:39.070", "CommentCount": "2", "Body": "<p>This is not valid code. The standard's definition of operations on sequence containers states (23.2.3@4):</p>\n<blockquote>\n<p id=\"so_16174239_16174353_0\">a.insert(p,i,j)  -  [...]  pre: i and j are not iterators into a.</p>\n</blockquote>\n<p>So your code invokes undefined behavior because it violates the precondition for the <code>insert</code> operation.</p>\n<p>If instead of using <code>insert</code>, you wrote a loop iterating from <code>myvector.rbegin() + 1</code> to <code>myvector.rend() -1</code> and called <code>push_back</code> on all values, your code would be valid: This is because <code>push_back</code> only invalidates vector iterators if a reallocation is needed, and your call to <code>reserve</code> ensures that this is not the case.</p>\n<p>In general, while there are some cases where modifying a container while iterating over it is fine (such as the loop described above), you have to make sure that your iterators aren't invalidated while doing so. When this happens is specific to each container.</p>\n", "CreationDate": "2013-04-23T16:18:06.340", "LastEditDate": "2013-04-23T16:45:39.070", "ParentId": "16174239", "Id": "16174353", "LastEditorUserId": "189205", "PostTypeId": "2", "Score": "12", "OwnerUserId": "189205"}, "16174239": {"CreationDate": "2013-04-23T16:11:18.073", "ViewCount": "271", "FavoriteCount": "0", "Id": "16174239", "AcceptedAnswerId": "16174353", "Score": "6", "Title": "Appending a std::vector with its own elements using iterators", "CommentCount": "2", "Body": "<p>The following code works as expected (the test passes) but I wonder if working with iterators in this way is considered a bad practice in c++ or if it is okay.</p>\n<p>Maybe this is specific for <code>std::vector</code> and other collections behave differently and best practices vary between collections (or even their implementations)?</p>\n<p>It certainly is not okay in other languages and most of the time changing a collection will invalidate iterators and throw exceptions.</p>\n<pre><code>BOOST_AUTO_TEST_CASE (ReverseIteratorExample) {\n    std::vector&lt;int&gt; myvector;\n    for(int i = 0; i &lt; 5; i++)\n    {\n        myvector.push_back(i);\n    }\n\n    // is this generally a bad idea to change the vector while iterating?\n    // is it okay in this specific case?\n    myvector.reserve(myvector.size() + myvector.size() - 2 );\n    myvector.insert(myvector.end(), myvector.rbegin() + 1, myvector.rend() -1);\n\n    int resultset [8] = { 0,1,2,3,4,3,2,1 };\n    std::vector&lt;int&gt; resultVector( resultset, resultset + sizeof(resultset)/sizeof(resultset[0]) );\n    BOOST_CHECK_EQUAL_COLLECTIONS(myvector.begin(), myvector.end(), resultVector.begin(), resultVector.end());\n}\n</code></pre>\n<p>Summarized Questions: </p>\n<ol>\n<li>Is this generally a bad idea to change the vector while iterating?</li>\n<li>Is it okay in this specific case?</li>\n<li>Is this specific for <code>std::vector</code> and other collections behave differently? </li>\n<li>Do best practices vary between collections (or even their implementations)?</li>\n</ol>\n", "Tags": "<c++><iterator><stdvector>", "LastActivityDate": "2013-04-23T16:45:39.070", "PostTypeId": "1", "AnswerCount": "1", "OwnerUserId": "27083"}, "bq_ids": {"n4140": {"so_16174239_16174353_0": {"length": 4, "quality": 1.0, "section_id": 723}}, "n3337": {"so_16174239_16174353_0": {"length": 4, "quality": 1.0, "section_id": 712}}}});