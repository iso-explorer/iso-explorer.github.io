post_cb({"31510673": {"CommentCount": "5", "AcceptedAnswerId": "31511079", "PostTypeId": "1", "LastEditorUserId": "2549876", "CreationDate": "2015-07-20T07:14:47.480", "LastActivityDate": "2015-07-20T07:38:42.520", "LastEditDate": "2015-07-20T07:20:04.263", "ViewCount": "136", "FavoriteCount": "1", "Title": "reference types and literal types", "Id": "31510673", "Score": "3", "Body": "<p>I looked in the standard for a definition of <em>reference type</em> but I could not find any. A naive interpretation of the <em>reference type</em> as the type of objects such as <code>int &amp;</code> fails because according to the standard [basic.types] 10.3:</p>\n<blockquote>\n<p id=\"so_31510673_31510673_0\">A type is a literal type if it is: [\u2026] a reference type</p>\n</blockquote>\n<p>But the following static assert does not compile (in MSVC2015RC):</p>\n<pre><code>    static_assert( ::std::is_literal_type&lt; ::std::wstring &amp; &gt;::value, \"Nope\" );\n</code></pre>\n<p>What is the definition of a <em>reference type</em>?</p>\n", "Tags": "<c++><c++11><language-lawyer>", "OwnerUserId": "2549876", "AnswerCount": "2"}, "31511079": {"ParentId": "31510673", "CommentCount": "1", "Body": "<p>The C++11 Standard defines references in \u00a78.3.2 [dcl.ref]:</p>\n<blockquote>\n<p id=\"so_31510673_31511079_0\">1 In a declaration <code>T D</code> where <code>D</code> has either of the forms </p>\n</blockquote>\n<pre><code>&amp; attribute-specifier-seqopt D1\n&amp;&amp; attribute-specifier-seqopt D1\n</code></pre>\n<blockquote>\n<p id=\"so_31510673_31511079_1\">and the type of the identifier in the declaration <code>T D1</code> is\n  \u201cderived-declarator-type-list T,\u201d then the type of the identifier of <code>D</code>\n  is \u201cderived-declarator-type-list reference to <code>T</code>.\u201d The optional\n  attribute-specifier-seq appertains to the reference type. Cv-qualified\n  references are ill-formed except when the cv-qualifiers are introduced\n  through the use of a typedef (7.1.3) or of a template type argument\n  (14.3), in which case the cv-qualifiers are ignored. [...]</p>\n<p id=\"so_31510673_31511079_2\">2 A reference type that is declared using &amp; is called an\n  lvalue reference, and a reference type that is declared using &amp;&amp; is\n  called an rvalue reference. Lvalue references and rvalue references\n  are distinct types. Except where explicitly noted, they are\n  semantically equivalent and commonly referred to as references.</p>\n</blockquote>\n<p>Simply speaking, reference types are types declared as references to other types. There's much more to say about their behavior though.</p>\n", "OwnerUserId": "2508150", "PostTypeId": "2", "Id": "31511079", "Score": "3", "CreationDate": "2015-07-20T07:38:42.520", "LastActivityDate": "2015-07-20T07:38:42.520"}, "31510769": {"ParentId": "31510673", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>Compiles just fine, in both <a href=\"http://coliru.stacked-crooked.com/a/0322af5a4d3af228\" rel=\"nofollow\">GCC</a> and <a href=\"http://coliru.stacked-crooked.com/a/f11b5c8b9628ddac\" rel=\"nofollow\">Clang</a>, as it should. Your compiler has probably a bugged implementation.</p>\n", "OwnerUserId": "493122", "LastEditorUserId": "493122", "LastEditDate": "2015-07-20T07:37:37.390", "Id": "31510769", "Score": "2", "CreationDate": "2015-07-20T07:20:23.817", "LastActivityDate": "2015-07-20T07:37:37.390"}, "bq_ids": {"n4140": {"so_31510673_31511079_1": {"section_id": 3218, "quality": 0.7272727272727273, "length": 24}, "so_31510673_31510673_0": {"section_id": 3285, "quality": 1.0, "length": 5}, "so_31510673_31511079_2": {"section_id": 3219, "quality": 0.9333333333333333, "length": 28}, "so_31510673_31511079_0": {"section_id": 3218, "quality": 1.0, "length": 4}}, "n3337": {"so_31510673_31511079_1": {"section_id": 3092, "quality": 0.8484848484848485, "length": 28}, "so_31510673_31510673_0": {"section_id": 2, "quality": 0.8, "length": 4}, "so_31510673_31511079_2": {"section_id": 3093, "quality": 0.9333333333333333, "length": 28}, "so_31510673_31511079_0": {"section_id": 3092, "quality": 1.0, "length": 4}}, "n4659": {"so_31510673_31511079_1": {"section_id": 3975, "quality": 0.7272727272727273, "length": 24}, "so_31510673_31510673_0": {"section_id": 4047, "quality": 1.0, "length": 5}, "so_31510673_31511079_2": {"section_id": 3976, "quality": 0.9333333333333333, "length": 28}, "so_31510673_31511079_0": {"section_id": 3975, "quality": 1.0, "length": 4}}}});