post_cb({"bq_ids": {"n4140": {"so_41897130_41897477_0": {"length": 12, "quality": 1.0, "section_id": 3913}}, "n3337": {"so_41897130_41897477_0": {"length": 12, "quality": 1.0, "section_id": 3773}}, "n4659": {"so_41897130_41897477_0": {"length": 9, "quality": 0.75, "section_id": 4799}}}, "41897240": {"Id": "41897240", "PostTypeId": "2", "Body": "<p>The compiler doesn't enforce that there is no way to reach the end of a function without stepping on a return statement. Of course, it is obvious that in a function with no return statement at all, the end of the function is likely to be reached. </p>\n<p>Writing such a function is not prohibited (there could be exceptions, the function may be designed to never return...) but enabling warnings will let the compiler tell you something suspicious is going on.</p>\n<pre><code>file.cxx: In member function \u2018Soap&amp; Soap::operator=(const Soap&amp;)\u2019:\nfile.cxx:17:3: warning: no return statement in function returning non-void [-Wreturn-type]\n</code></pre>\n", "LastActivityDate": "2017-01-27T15:17:01.173", "CommentCount": "1", "CreationDate": "2017-01-27T15:17:01.173", "ParentId": "41897130", "Score": "0", "OwnerUserId": "7479226"}, "41897477": {"Id": "41897477", "PostTypeId": "2", "Body": "<p>Your code has <strong>undefined behaviour</strong>. As the C++ standard says at \u00a76.6.3/2:</p>\n<blockquote>\n<p id=\"so_41897130_41897477_0\">Flowing off the end of a function is equivalent to a <code>return</code> with no value; this results in undefined behavior in a value-returning function.</p>\n</blockquote>\n<p>With a sufficiently high warning level (<code>-Wextra</code>), GCC will print a diagnostic message for the broken code. That should be enough. Note that the C++ standard does not formally distinguish between warnings and errors, anyway.</p>\n<p>As the behaviour is undefined, there simply is no answer to the question <em>\"But what is it returning???\"</em>, because (very) strictly speaking, your code is no longer C++. The compiler creates a program from the code, but what the program does cannot be deduced from the C++ language rules.</p>\n<p>In practice, from an implementation point of view, the program <em>may</em> crash because the caller <em>may</em> try to create an object from memory it should not be allowed to access. If you <em>really really</em> want to know what the compiler creates, then you can always look into the assembly.</p>\n", "LastActivityDate": "2017-01-27T15:29:10.843", "CommentCount": "0", "CreationDate": "2017-01-27T15:29:10.843", "ParentId": "41897130", "Score": "2", "OwnerUserId": "3313064"}, "41897130": {"ViewCount": "52", "Body": "<p>Bird's eye view : Following code should generate error when compiled.</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass Soap{\n    int r;\npublic:\nSoap(){\n    r = 0;\n}\nSoap operator+(Soap &amp;s){\n    Soap new1;\n    new1.r = r + s.r; \n    return new1;}\n\nSoap&amp; operator=(const Soap &amp;s){\n    r= s.r;\n}\n};\nint main(){\n    Soap p,q,r;\n    r = p +q; \n}\n</code></pre>\n<p>Acc. to the code my Operator= should return something of type Soap. But as I did not include any return statement in the code, the operator= should have returned void. But then it would have generated an error saying non-void fn. is returning void (while compiling). But no such error is genrated.</p>\n<p>This means that the gcc is returning Something of type Soap here. But what is it returning??? And how's it doing it without even me telling it ?</p>\n<p>Edit : As my q is being compared to the q - <a href=\"https://stackoverflow.com/questions/1610030/why-does-flowing-off-the-end-of-a-non-void-function-without-returning-a-value-no\">Why does flowing off the end of a non-void function without returning a value not produce a compiler error?</a> I will make my Q more clear.</p>\n<p>While running the code when operator= is called by the compiler (i.e. when the statement r = p+r is executed) the function returns a soap type. I never typed return statement in the fn operator=, leaving aside the fact that during actual running a soap type is being returned !!! So what is gcc doing here ? Is it initialising and returning a Soap object even without me typing it ?</p>\n", "AcceptedAnswerId": "41897477", "Title": "How Does Gcc(cpp) help me if I am not returning anything on a overloaded function that returns an object of any class?", "CreationDate": "2017-01-27T15:11:00.430", "Id": "41897130", "CommentCount": "5", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2017-05-23T11:55:03.917", "LastEditorUserId": "-1", "LastActivityDate": "2017-01-27T15:49:58.257", "Score": "0", "OwnerUserId": "4726246", "Tags": "<c++><gcc>", "AnswerCount": "3"}, "41897886": {"Id": "41897886", "PostTypeId": "2", "Body": "<p>When you invoke Undefined Behaviour, the compiler is permitted to do whatever it pleases. This includes crashing, doing exactly what you expect, deleting your code and do nothing, generate a program to format your harddrive or whatever. You simply cannot reason about a program containing UB.</p>\n", "LastActivityDate": "2017-01-27T15:49:58.257", "CommentCount": "0", "CreationDate": "2017-01-27T15:49:58.257", "ParentId": "41897130", "Score": "1", "OwnerUserId": "5910058"}});