post_cb({"bq_ids": {"n4140": {"so_46589959_46589959_0": {"length": 12, "quality": 0.7058823529411765, "section_id": 6076}}, "n3337": {"so_46589959_46589959_0": {"length": 12, "quality": 0.7058823529411765, "section_id": 5844}}, "n4659": {"so_46589959_46589959_0": {"length": 12, "quality": 0.7058823529411765, "section_id": 7572}}}, "46589959": {"ViewCount": "58", "Body": "<p>I know that the following data models exist: </p>\n<ul>\n<li>32 bit *nix    : <strong>ILP32</strong> </li>\n<li>32 bit Windows : <strong>ILP32</strong> </li>\n<li>32 bit OS X    : <strong>ILP32</strong></li>\n<li>64 bit *nix    : <strong>LP64</strong> </li>\n<li>64 bit Windows : <strong>LLP64</strong> </li>\n<li>64 bit OSX     : <strong>LP64</strong></li>\n</ul>\n<p><a href=\"http://www.unix.org/whitepapers/64bit.html\" rel=\"nofollow noreferrer\">http://www.unix.org/whitepapers/64bit.html</a></p>\n<p>The 64 bit version of the Linux kernel uses the LP64 data model (<a href=\"http://www.unix.org/version2/whatsnew/lp64_wp.html\" rel=\"nofollow noreferrer\">http://www.unix.org/version2/whatsnew/lp64_wp.html</a>).</p>\n<p><strong>UPDATE</strong></p>\n<p>C++03 Standard $5.3.3/1</p>\n<blockquote>\n<p id=\"so_46589959_46589959_0\">sizeof(char), sizeof(signed char) and sizeof(unsigned char) are 1; the\n  result of sizeof applied to any other fundamental type (3.9.1) is\n  <strong>implementation-defined</strong>. [Note: in particular,sizeof(bool) and\n  sizeof(wchar_t) are implementation-defined.69)</p>\n</blockquote>\n<p>So the real question is: \ndoes the compiler (e.g. gcc) take into account the data model chosen by the OS (linux for example)?</p>\n", "AcceptedAnswerId": "46605430", "Title": "Linux Data Model and primitive types size", "CreationDate": "2017-10-05T15:53:22.360", "Id": "46589959", "CommentCount": "15", "LastEditDate": "2017-10-05T17:19:35.133", "PostTypeId": "1", "LastEditorUserId": "1306011", "LastActivityDate": "2017-10-06T12:10:20.160", "Score": "0", "OwnerUserId": "1306011", "Tags": "<c++><linux><linux-kernel><primitive-types>", "AnswerCount": "1"}, "46605430": {"Id": "46605430", "PostTypeId": "2", "Body": "<p>A compiler compiles for a specific target. Some compilers only have one target or a very limited set of targets. Since you asked for gcc as an example then looking at their documentation reveals their formats for <a href=\"https://gcc.gnu.org/onlinedocs/gccint/Machine-Desc.html#Machine-Desc\" rel=\"nofollow noreferrer\"><code>Machine Descriptions</code></a> and <a href=\"https://gcc.gnu.org/onlinedocs/gccint/Target-Macros.html#Target-Macros\" rel=\"nofollow noreferrer\"><code>Target Files</code></a>. </p>\n<p><a href=\"https://gcc.gnu.org/onlinedocs/gcc-3.1/gcc/Target-Options.html\" rel=\"nofollow noreferrer\">Their documentation mentions</a> </p>\n<blockquote>\n<p id=\"so_46589959_46605430_0\">By default, GCC compiles code for the same type of machine that you are using. However, it can also be installed as a cross-compiler</p>\n</blockquote>\n<p>So make sure to check to output of <code>gcc -v</code> or <code>gcc -dumpmachine</code> to see what the default target is.</p>\n", "LastActivityDate": "2017-10-06T12:10:20.160", "Score": "0", "CreationDate": "2017-10-06T12:10:20.160", "ParentId": "46589959", "CommentCount": "0", "OwnerUserId": "777689"}});