post_cb({"42441683": {"CommentCount": "0", "ViewCount": "144", "PostTypeId": "1", "LastEditorUserId": "4342498", "CreationDate": "2017-02-24T14:54:51.187", "LastActivityDate": "2017-02-24T15:42:30.727", "Title": "C++ freestanding features", "FavoriteCount": "1", "LastEditDate": "2017-02-24T14:56:23.380", "Id": "42441683", "Score": "4", "Body": "<p>What are the features that I can use in c++ freestanding environment? I am developing a little kernel (for my own pleasure) and I know that I can't use the whole stdlib library, but what else ? when I tried to use the new and delete operators it compiled without troubles but the linker said </p>\n<pre><code>undefined reference to `operator new[](unsigned long)\nundefined reference to `operator delete[](void*)'\n</code></pre>\n<p>I link with <code>-lgcc</code> and <code>-lsupc++</code> options. I know that exception handling is disable in freestanding but I am a little bit surprised that new and delete are also. So what can I use and what can I not?</p>\n", "Tags": "<c++><gcc4.7><freestanding>", "OwnerUserId": "7431308", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_42441683_42442198_2": {"section_id": 5812, "quality": 0.8461538461538461, "length": 11}, "so_42441683_42442198_6": {"section_id": 6317, "quality": 0.9230769230769231, "length": 12}, "so_42441683_42442198_1": {"section_id": 5775, "quality": 0.8888888888888888, "length": 16}, "so_42441683_42442198_5": {"section_id": 6266, "quality": 0.76, "length": 19}, "so_42441683_42442198_3": {"section_id": 7145, "quality": 0.8, "length": 28}}, "n3337": {"so_42441683_42442198_2": {"section_id": 5585, "quality": 0.8461538461538461, "length": 11}, "so_42441683_42442198_6": {"section_id": 6074, "quality": 0.8461538461538461, "length": 11}, "so_42441683_42442198_1": {"section_id": 5548, "quality": 0.8888888888888888, "length": 16}, "so_42441683_42442198_5": {"section_id": 6026, "quality": 0.76, "length": 19}, "so_42441683_42442198_3": {"section_id": 6889, "quality": 0.8, "length": 28}}, "n4659": {"so_42441683_42442198_2": {"section_id": 7275, "quality": 0.8461538461538461, "length": 11}, "so_42441683_42442198_6": {"section_id": 7827, "quality": 0.8461538461538461, "length": 11}, "so_42441683_42442198_1": {"section_id": 7232, "quality": 0.8888888888888888, "length": 16}, "so_42441683_42442198_5": {"section_id": 7772, "quality": 0.76, "length": 19}, "so_42441683_42442198_3": {"section_id": 8646, "quality": 0.8, "length": 28}}}, "42442198": {"ParentId": "42441683", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2017-02-24T15:19:43.263", "Score": "6", "LastEditorUserId": "2079303", "LastEditDate": "2017-02-24T15:42:30.727", "Id": "42442198", "OwnerUserId": "2079303", "Body": "<blockquote>\n<p id=\"so_42441683_42442198_0\">What are the features that I can use in c++ freestanding environment?</p>\n</blockquote>\n<p>Much of freestanding implementations is implementation defined:</p>\n<blockquote>\n<p id=\"so_42441683_42442198_1\">[intro.compliance] ... A freestanding\n  implementation is one in which execution may take place without the benefit of an operating system, and\n  has an implementation-defined set of libraries that includes certain language-support libraries </p>\n<p id=\"so_42441683_42442198_2\">[intro.multithread] ... Under a freestanding implementation, it is implementation-defined whether\n  a program can have more than one thread of execution.</p>\n<p id=\"so_42441683_42442198_3\">[basic.start.main] It\n  is implementation-defined whether a program in a freestanding environment is required to define a main\n  function. [ Note: In a freestanding environment, start-up and termination is implementation-defined; start-\n  up contains the execution of constructors for objects of namespace scope with static storage duration;\n  termination contains the execution of destructors for objects with static storage duration. \u2014 end note ]</p>\n<p id=\"so_42441683_42442198_4\">[using.headers] C ++ headers for freestanding implementations</p>\n<pre><code>&lt;ciso646&gt;\n&lt;cstddef&gt;\n&lt;cfloat&gt;\n&lt;limits&gt;\n&lt;climits&gt;\n&lt;cstdint&gt;\n&lt;cstdlib&gt;\n&lt;new&gt;\n&lt;typeinfo&gt;\n&lt;exception&gt;\n&lt;initializer_list&gt;\n&lt;cstdalign&gt;\n&lt;cstdarg&gt;\n&lt;cstdbool&gt;\n&lt;atomic&gt;\n</code></pre>\n<p id=\"so_42441683_42442198_5\">[compliance] The supplied version of the header <code>&lt;cstdlib&gt;</code> shall declare at least the functions abort, atexit, at_quick_-\n  exit, exit, and quick_exit (18.5). The other headers listed in this table shall meet the same requirements\n  as for a hosted implementation.</p>\n</blockquote>\n<p>Note that <code>malloc</code>/<code>free</code> are not listed in the required functions of <code>&lt;cstdlib&gt;</code>.</p>\n<hr>\n<p>As far as your linker error is concerned, neither freestanding, nor hosted implementation is required to provide those overloads:</p>\n<blockquote>\n<p id=\"so_42441683_42442198_6\">[replacement.functions] A C ++ program <strong>may</strong> provide the definition for any of twelve dynamic memory allocation function signatures\n  declared in header <code>&lt;new&gt;</code></p>\n</blockquote>\n<p>In practice, since a free standing environment cannot depend on an OS, and <code>malloc</code> is usually implemented using features provided by an OS, it is unlikely to have free store memory management features in a freestanding environment. Conversely, a hosted environment requires free store memory management to implement the features of the standard library.</p>\n</hr>", "LastActivityDate": "2017-02-24T15:42:30.727"}});