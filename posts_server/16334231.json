post_cb({"16334286": {"ParentId": "16334231", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_16334231_16334286_0\">Why where who...Explain! Please.</p>\n</blockquote>\n<p>If <code>Hello</code>'s constructor throws <code>h</code> is never initialised - <code>delete</code> tries to read from that uninitialised variable and behaviour in undefined.</p>\n<p>I recommend using a smart pointer.</p>\n", "OwnerUserId": "410767", "PostTypeId": "2", "Id": "16334286", "Score": "1", "CreationDate": "2013-05-02T09:13:29.847", "LastActivityDate": "2013-05-02T09:13:29.847"}, "16334231": {"CommentCount": "7", "ViewCount": "145", "PostTypeId": "1", "LastEditorUserId": "4370109", "CreationDate": "2013-05-02T09:10:29.737", "LastActivityDate": "2015-07-07T14:01:17.573", "Title": "Delete operator segfaults when the constructor throws an exception", "AcceptedAnswerId": "16334279", "LastEditDate": "2015-07-07T14:01:17.573", "Id": "16334231", "Score": "0", "Body": "<p>Best to start with code to get an understanding of this</p>\n<pre><code>#include \"Hello1.h\"\n#include \"Hello2.h\"\n\nint main(int argc, char ** argv)\n{\n    // Hello1 and Hello2 are derevied classes of Hello\n    // And there constructor throws an exception\n    Hello * h;\n\n    try\n    {\n        if (argv[1][0]=='1')\n            h = new Hello1;\n        else\n            h = new Hello2;\n    }\n    catch (std::exception ex) { /*print error*/ }\n\n    delete h;\n}\n</code></pre>\n<p>If <code>Hello1</code> and <code>Hello2</code> throws an exception, It <strong>segfault</strong>. However If I add</p>\n<pre><code>Hello h = NULL;\n</code></pre>\n<p><strong>It works!!!</strong></p>\n<p><em>Hello is a class with a constructor that throw's an exception</em></p>\n<p>All I can think of is that the exceptions in constructor's remove the object from memory! Why where who...Explain! Please.</p>\n", "Tags": "<c++><class><exception><delete-operator>", "OwnerUserId": "109815", "AnswerCount": "3"}, "16334279": {"ParentId": "16334231", "PostTypeId": "2", "CommentCount": "5", "Body": "<blockquote>\n<p id=\"so_16334231_16334279_0\">However If I add <code>Hello h = NULL;</code> it works!!! Why where who...Explain! Please.</p>\n</blockquote>\n<p>That is because <code>operator delete</code> does nothing when the pointer is <code>null</code>. It is expected to do nothing, that's standard behavior. Paragraph 3.7.4.2 of the C++11 Standard specifies:</p>\n<blockquote>\n<p id=\"so_16334231_16334279_1\">[...] The value of the\n  first argument supplied to a deallocation function may be a null pointer value; if so, and if the deallocation\n  function is one supplied in the standard library, <strong>the call has no effect</strong>. [...]</p>\n</blockquote>\n<p>If it is not <code>null</code>, on the other hand, <code>operator delete</code> will try to delete the object pointed to by <code>hello</code>, and since the pointer is uninitialized (because construction threw and control was transferred to the exception handler before the assignment to <code>hello</code> happened), you get <strong>undefined behavior</strong>.</p>\n<p>Per paragraph 5.3.5/2:</p>\n<blockquote>\n<p id=\"so_16334231_16334279_2\">[...] In the first alternative (<em>delete object</em>), the value of the operand of <code>delete</code> may be a null pointer\n  value, a pointer to a non-array object created by a previous new-expression, or a pointer to a subobject (1.8)\n  representing a base class of such an object (Clause 10). <strong>If not, the behavior is undefined</strong>. [...]</p>\n</blockquote>\n", "OwnerUserId": "1932150", "LastEditorUserId": "1932150", "LastEditDate": "2013-05-02T09:25:33.900", "Id": "16334279", "Score": "6", "CreationDate": "2013-05-02T09:13:17.853", "LastActivityDate": "2013-05-02T09:25:33.900"}, "bq_ids": {"n4140": {"so_16334231_16334279_2": {"section_id": 6106, "quality": 0.9629629629629629, "length": 26}, "so_16334231_16334279_1": {"section_id": 7182, "quality": 0.9444444444444444, "length": 17}}, "n3337": {"so_16334231_16334279_2": {"section_id": 5872, "quality": 0.9629629629629629, "length": 26}, "so_16334231_16334279_1": {"section_id": 6926, "quality": 0.9444444444444444, "length": 17}}, "n4659": {"so_16334231_16334279_2": {"section_id": 7603, "quality": 0.9629629629629629, "length": 26}, "so_16334231_16334279_1": {"section_id": 8690, "quality": 0.9444444444444444, "length": 17}}}, "16334470": {"ParentId": "16334231", "PostTypeId": "2", "CommentCount": "0", "Body": "\n<p><code>delete</code> can throw exception if you try to delete something you should not delete. As others have pointed out, <code>delete</code> will not throw if you try to delete something set to <code>null</code></p>\n<p><code>new</code> will, as far as I know, never throw unless you are out of memory. </p>\n<p>So what happens is that <code>argv[1]</code> is not <code>'1'</code> and which means h is pointing to something unknown and this makes <code>delete</code> throw an exception</p>\n", "OwnerUserId": "2340558", "LastEditorUserId": "2340558", "LastEditDate": "2013-05-02T09:29:59.260", "Id": "16334470", "Score": "0", "CreationDate": "2013-05-02T09:22:59.290", "LastActivityDate": "2013-05-02T09:29:59.260"}});