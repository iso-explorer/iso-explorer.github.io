post_cb({"37689500": {"ParentId": "37689461", "PostTypeId": "2", "CommentCount": "2", "Body": "<blockquote>\n<p id=\"so_37689461_37689500_0\">5/4 [expr]:</p>\n</blockquote>\n<p>Except where noted, the order of evaluation of operands of individual operators and subexpressions of individual expressions, and the order in which side effects take place, is unspecified</p>\n<p>Because operators are functions, this means <code>string()</code> will be constructued either before or after <code>foo()</code>.</p>\n<p>Also see: <a href=\"https://stackoverflow.com/questions/4737344/order-of-function-call\">Order of function call</a></p>\n<p>\"Bjarne Stroustrup also says it explicitly in \"The C++ Programming Language\" 3rd edition section 6.2.2, with some reasoning:</p>\n<blockquote>\n<p id=\"so_37689461_37689500_1\">Better code can be generated in the absence of restrictions on expression evaluation order.</p>\n</blockquote>\n<p>Also see: <a href=\"https://stackoverflow.com/questions/2934904/order-of-evaluation-in-c-function-parameters\">Order of evaluation in C++ function parameters</a></p>\n", "OwnerUserId": "2124148", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:17:04.823", "Id": "37689500", "Score": "3", "CreationDate": "2016-06-07T21:15:31.183", "LastActivityDate": "2016-06-07T21:15:31.183"}, "37703109": {"ParentId": "37689461", "CommentCount": "0", "Body": "<p>It was widely believed that leaving the order of expression evaluation undefined led to more optimizations. It was probably true 10 and 20 years ago, but it does not appear to be so any more. Data to that effect was presented to the committee, but I don't know if it is published anywhere.</p>\n", "OwnerUserId": "6440437", "PostTypeId": "2", "Id": "37703109", "Score": "8", "CreationDate": "2016-06-08T12:54:18.237", "LastActivityDate": "2016-06-08T12:54:18.237"}, "bq_ids": {"n4140": {"so_37689461_37689461_0": {"section_id": 3260, "quality": 0.8333333333333334, "length": 5}}, "n3337": {"so_37689461_37689461_0": {"section_id": 3132, "quality": 0.8333333333333334, "length": 5}}, "n4659": {"so_37689461_37689461_0": {"section_id": 7709, "quality": 0.6666666666666666, "length": 4}}}, "37689461": {"CommentCount": "1", "ViewCount": "307", "PostTypeId": "1", "LastEditorUserId": "963864", "CreationDate": "2016-06-07T21:12:50.153", "LastActivityDate": "2016-06-09T00:27:15.490", "Title": "X().Y(Z()) and the order of evaluation in standard", "FavoriteCount": "1", "LastEditDate": "2016-06-09T00:27:15.490", "Id": "37689461", "Score": "3", "Body": "<p>Can somebody quote the corresponding paragraph of the C++ standard that says that the order of the <code>std::string</code> construction and <code>foo()</code> call is unspecified in the following case:</p>\n<pre><code>std::string().append(foo());\n</code></pre>\n<p>I know that there's 5.2.2.8 but it states about function arguments, not several function calls between the same sequence points:</p>\n<blockquote>\n<p id=\"so_37689461_37689461_0\">The order of evaluation of function arguments is unspecified</p>\n</blockquote>\n", "Tags": "<c++><language-lawyer><order-of-evaluation>", "OwnerUserId": "1608835", "AnswerCount": "2"}});