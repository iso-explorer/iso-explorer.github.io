post_cb({"bq_ids": {"n4140": {"so_1262063_1262211_3": {"length": 21, "quality": 1.0, "section_id": 496}, "so_1262063_1262211_5": {"length": 27, "quality": 0.9310344827586207, "section_id": 506}, "so_1262063_1262211_0": {"length": 10, "quality": 0.8333333333333334, "section_id": 491}, "so_1262063_1262211_1": {"length": 10, "quality": 0.9090909090909091, "section_id": 496}, "so_1262063_1262077_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 532}}, "n3337": {"so_1262063_1262211_5": {"length": 28, "quality": 0.9655172413793104, "section_id": 497}, "so_1262063_1262211_3": {"length": 21, "quality": 1.0, "section_id": 487}, "so_1262063_1262211_0": {"length": 10, "quality": 0.8333333333333334, "section_id": 482}, "so_1262063_1262211_1": {"length": 10, "quality": 0.9090909090909091, "section_id": 487}, "so_1262063_1262077_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 523}}, "n4659": {"so_1262063_1262211_5": {"length": 27, "quality": 0.9310344827586207, "section_id": 527}, "so_1262063_1262211_3": {"length": 21, "quality": 1.0, "section_id": 511}, "so_1262063_1262211_0": {"length": 10, "quality": 0.8333333333333334, "section_id": 506}, "so_1262063_1262211_1": {"length": 10, "quality": 0.9090909090909091, "section_id": 511}, "so_1262063_1262077_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 553}}}, "1262697": {"Id": "1262697", "PostTypeId": "2", "Body": "<p>All preprocessor directives are interpreted before macro expansion begins, so no, you cannot have a macro expand into an #include directive and have it be interpreted as such.  Instead, it will be interpreted as (erroneous) C++ code.  </p>\n", "LastActivityDate": "2009-08-11T20:22:36.800", "Score": "1", "CreationDate": "2009-08-11T20:22:36.800", "ParentId": "1262063", "CommentCount": "1", "OwnerUserId": "134554"}, "1262063": {"ViewCount": "8057", "Body": "<p>Initially I thought I needed this, but I eventually avoided it. However, my curiosity (and appetite for knowledge, hum) make me ask:</p>\n<p>Can a preprocessor macro, for instance in</p>\n<pre><code>#include \"MyClass.h\"\n\nINSTANTIATE_FOO_TEMPLATE_CLASS(MyClass)\n</code></pre>\n<p>expand to another include, like in</p>\n<pre><code>#include \"MyClass.h\"\n\n#include \"FooTemplate.h\"\ntemplate class FooTemplate&lt;MyClass&gt;;\n</code></pre>\n<p>? </p>\n", "AcceptedAnswerId": "1262077", "Title": "Preprocessor macro expansion to another preprocessor directive", "CreationDate": "2009-08-11T18:12:36.263", "Id": "1262063", "CommentCount": "5", "FavoriteCount": "4", "PostTypeId": "1", "LastEditDate": "2016-02-12T09:38:18.050", "LastEditorUserId": "4370109", "LastActivityDate": "2016-02-12T09:38:18.050", "Score": "7", "OwnerUserId": "54956", "Tags": "<c++><macros><c-preprocessor><expansion><preprocessor-directive>", "AnswerCount": "3"}, "1262211": {"Id": "1262211", "PostTypeId": "2", "Body": "<p>The C standard says this about preprocessing directives (C99 - 6.10(2) - Preprocessing directives):</p>\n<blockquote>\n<p id=\"so_1262063_1262211_0\">A preprocessing directive consists of a sequence of preprocessing tokens that begins with\n  a # preprocessing token that (at the start of translation phase 4)\n  ...</p>\n</blockquote>\n<p>and (C99 - 6.10(7)):</p>\n<blockquote>\n<p id=\"so_1262063_1262211_1\">The preprocessing tokens within a preprocessing directive are not subject to macro\n  expansion unless otherwise stated.</p>\n<p id=\"so_1262063_1262211_2\">EXAMPLE In:</p>\n<pre><code>#define EMPTY\nEMPTY # include &lt;file.h&gt;\n</code></pre>\n<p id=\"so_1262063_1262211_3\">the sequence of preprocessing tokens on the second line is not a preprocessing directive, because it does not begin with a # at the start of translation phase 4, even though it will do so after the macro EMPTY has been replaced</p>\n</blockquote>\n<p>So, no, macros cannot expand into a '<code>#include</code>' preprocessing directive.  Those directives need to be in place at the start of translation phase 4 (when handling those directives takes place preprocessing happens). Since macro expansion occurs during phase 4, macros can't cause something to exist at the start of phase 4.</p>\n<p>I'd like to point out however, that the following <strong>does</strong> work:</p>\n<pre><code>#ifdef WIN32\n#define PLATFORM_HEADER \"platform/windows/platform.h\"\n#else\n#define PLATFORM_HEADER \"platform/linux/platform.h\"\n\n#include PLATFORM_HEADER\n</code></pre>\n<p>because the C standard says this (C99, 6.10.2(4) - Source file inclusion):</p>\n<blockquote>\n<p id=\"so_1262063_1262211_4\">A preprocessing directive of the form</p>\n<pre><code># include pp-tokens new-line\n</code></pre>\n<p id=\"so_1262063_1262211_5\">(that does not match one of the two previous forms) is permitted. The preprocessing\n  tokens after include in the directive are processed just as in normal text. (Each\n  identifier currently defined as a macro name is replaced by its replacement list of\n  preprocessing tokens.)</p>\n</blockquote>\n", "LastEditorUserId": "12711", "LastActivityDate": "2009-08-12T17:58:03.870", "Score": "9", "CreationDate": "2009-08-11T18:42:53.037", "ParentId": "1262063", "CommentCount": "5", "LastEditDate": "2009-08-12T17:58:03.870", "OwnerUserId": "12711"}, "1262077": {"Id": "1262077", "PostTypeId": "2", "Body": "<p>I believe that cannot be done, this is because the pre-processor is <strong>single pass</strong>. So it cannot emit other preprocessor directives.</p>\n<p>Specifically, from the C99 Standard (6.10.3.4 paragraph 3):</p>\n<blockquote>\n<p id=\"so_1262063_1262077_0\">3 The resulting completely\n  macro-replaced preprocessing token\n  sequence is not processed as a\n  preprocessing directive even if it\n  resembles one, ...</p>\n</blockquote>\n<p>Interestingly enough, This is why the unary <code>_Pragma</code> operator was added to c99. Because <code>#pragma</code> could not be emited by macros, but <code>_Pragma</code> can.</p>\n", "LastEditorUserId": "13430", "LastActivityDate": "2009-08-11T18:48:13.837", "Score": "12", "CreationDate": "2009-08-11T18:15:31.797", "ParentId": "1262063", "CommentCount": "5", "LastEditDate": "2009-08-11T18:48:13.837", "OwnerUserId": "13430"}});