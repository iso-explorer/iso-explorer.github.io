post_cb({"32220880": {"ParentId": "32220551", "CommentCount": "0", "Body": "<p>I believe this violates [basic.scope.class]/1 (N3337):</p>\n<blockquote>\n<p id=\"so_32220551_32220880_0\">The following rules describe the scope of names declared in classes.</p>\n<p id=\"so_32220551_32220880_1\">1) [...]</p>\n<p id=\"so_32220551_32220880_2\">2) A name <code>N</code> used in a class <code>S</code> shall refer to the same declaration in its context and when re-evaluated in the completed scope of <code>S</code>. No diagnostic is required for a violation of this rule.</p>\n</blockquote>\n<p>Since <code>decltype(a)</code> refers to the declaration in the enclosing scope before the member variable is declared, but refers to the member when \"re-evaluated in the completed scope of\" <code>X</code>, the program is ill-formed. No diagnostic is required, but GCC provides one anyway (although it's fairly arcane). The behaviour of all three compilers is valid.</p>\n", "OwnerUserId": "496161", "PostTypeId": "2", "Id": "32220880", "Score": "8", "CreationDate": "2015-08-26T07:52:39.267", "LastActivityDate": "2015-08-26T07:52:39.267"}, "32220551": {"CommentCount": "7", "ViewCount": "156", "PostTypeId": "1", "LastEditorUserId": "440558", "CreationDate": "2015-08-26T07:33:34.047", "LastActivityDate": "2015-08-26T07:52:39.267", "Title": "Is member declaration `decltype(name) name;` permitted in local struct where the first name refers to the enclosing scope?", "AcceptedAnswerId": "32220880", "LastEditDate": "2015-08-26T07:37:58.870", "Id": "32220551", "Score": "10", "Body": "<p>Example:</p>\n<pre><code>int main()\n{\n    int a = 0;\n    struct X\n    {\n        decltype(a) a;\n    };\n    return 0;\n}\n</code></pre>\n<p>The <code>decltype(a)</code> refers to the local <code>a</code> in <code>main</code>, while the member it declares shares the same name.</p>\n<p><a href=\"http://melpon.org/wandbox/permlink/V8GwNp0y8Z6cKTsD\">Clang</a> compiles w/o any problem, so does MSVC14.</p>\n<p><a href=\"http://melpon.org/wandbox/permlink/V8GwNp0y8Z6cKTsD\">G++</a> complains on it, adding <code>-fpermissive</code> makes it pass though</p>\n<pre><code>prog.cc:6:21: error: declaration of 'int main()::X::a' [-fpermissive]\n         decltype(a) a;\n                     ^\nprog.cc:3:9: error: changes meaning of 'a' from 'int a' [-fpermissive]\n     int a = 0;\n</code></pre>\n<p>Which behavior is standard-conformant?</p>\n", "Tags": "<c++><c++11><language-lawyer>", "OwnerUserId": "2969631", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_32220551_32220880_2": {"section_id": 7070, "quality": 1.0, "length": 15}, "so_32220551_32220880_0": {"section_id": 7070, "quality": 0.875, "length": 7}}, "n3337": {"so_32220551_32220880_2": {"section_id": 6814, "quality": 1.0, "length": 15}, "so_32220551_32220880_0": {"section_id": 6814, "quality": 0.875, "length": 7}}, "n4659": {"so_32220551_32220880_2": {"section_id": 8568, "quality": 1.0, "length": 15}}}});