post_cb({"4178919": {"ParentId": "4178889", "PostTypeId": "2", "CommentCount": "15", "CreationDate": "2010-11-14T18:24:32.043", "Score": "6", "LastEditorUserId": "451980", "LastEditDate": "2010-11-14T18:34:20.937", "Id": "4178919", "OwnerUserId": "451980", "Body": "<p>Quoting <a href=\"http://www.gotw.ca/publications/mill18.htm\" rel=\"nofollow\">Herb Sutter</a> :</p>\n<blockquote>\n<p id=\"so_4178889_4178919_0\">If deletion can be performed\n  polymorphically through the base class\n  interface, then it must behave\n  virtually and must be virtual. Indeed,\n  the language requires it - if you\n  delete polymorphically without a\n  virtual destructor, you summon the\n  dreaded specter of \"undefined\n  behavior\".</p>\n</blockquote>\n<p>In your example, both <code>delete</code> are performed through base class pointers and yield undefined behavior. Standard 5.3.5 (Delete) :</p>\n<blockquote>\n<p id=\"so_4178889_4178919_1\">In the first alternative (delete\n  object), <strong>if the static type of the\n  operand is different from its dynamic\n  type, the static type shall be a base\n  class of the operand\u2019s dynamic type\n  and the static type shall have a\n  virtual destructor or the behavior is\n  undefined</strong>.</p>\n</blockquote>\n<p>Here, both <code>delete</code> act on static type <code>B</code> while the operand's dynamic type is <code>D</code>.</p>\n", "LastActivityDate": "2010-11-14T18:34:20.937"}, "4181790": {"ParentId": "4178889", "PostTypeId": "2", "CommentCount": "3", "CreationDate": "2010-11-15T05:56:36.860", "Score": "-1", "LastEditorUserId": "167958", "LastEditDate": "2010-11-15T06:21:12.803", "Id": "4181790", "OwnerUserId": "507459", "Body": "<p>is it all concern about the virtual destructor?\nlook at this:</p>\n<pre><code>class A \n{\n    int x;\n\npublic:\n    virtual void fun()\n    {\n        return;\n    }\n};\n\nclass D : public A \n{\n    float bouncy;\n};\n\nvoid is_it_defined()\n{\n\n    A *b = new D;  // it`s ok!\n    delete b;\n}\n</code></pre>\n<p>u see? it`s ok. The pointer b can be delete correctly.\nSo, just need a vitual function to activate the polymorphic.</p>\n", "LastActivityDate": "2010-11-15T06:21:12.803"}, "4178889": {"CommentCount": "1", "CreationDate": "2010-11-14T18:18:38.447", "PostTypeId": "1", "AcceptedAnswerId": "4178919", "LastEditorUserId": "167958", "LastActivityDate": "2010-11-15T06:21:12.803", "LastEditDate": "2010-11-14T19:18:04.570", "ViewCount": "186", "FavoriteCount": "1", "Title": "Is this there a defined behavior for this code that deletes a derived class through a base class pointer?", "Id": "4178889", "Score": "2", "Body": "<p>Does this code result in defined behavior?</p>\n<pre><code>class A {\n    int x;\n};\nclass B {\n    short y;\n};\nclass C {\n    double z;\n};\n\nclass D : public A, public B, public C {\n    float bouncy;\n};\n\nvoid deleteB(B *b) {\n    delete b;\n}\n\nvoid is_it_defined() {\n    D *d = new D;\n    deleteB(d);\n\n    B *b = new D;  // Is this any different?\n    delete b;\n}\n</code></pre>\n<p>If it's not defined, why not?  And if it is, what's it defined to do and why?  Lastly, if it's implementation defined, could you give an example of what a common implementation might define the behavior to be?</p>\n", "Tags": "<c++>", "OwnerUserId": "167958", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_4178889_4178919_1": {"section_id": 6107, "quality": 0.88, "length": 22}}, "n3337": {"so_4178889_4178919_1": {"section_id": 5873, "quality": 0.88, "length": 22}}, "n4659": {"so_4178889_4178919_1": {"section_id": 7604, "quality": 0.88, "length": 22}}}, "4178925": {"ParentId": "4178889", "CommentCount": "4", "Body": "<p><code>B</code> doesn't have a <strong>virtual</strong> destructor, it should have.</p>\n", "OwnerUserId": "300805", "PostTypeId": "2", "Id": "4178925", "Score": "0", "CreationDate": "2010-11-14T18:25:25.780", "LastActivityDate": "2010-11-14T18:25:25.780"}});