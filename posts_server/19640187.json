post_cb({"19640743": {"ParentId": "19640187", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_19640187_19640743_0\">7.1.6.2/2 The other simple-type-specifiers specify either a previously-declared user-defined <strong>type</strong> or one of the fundamental types (3.9.1).</p>\n</blockquote>\n<p>Emphasis mine. Function template specialization is not a type.</p>\n", "OwnerUserId": "1670129", "PostTypeId": "2", "Id": "19640743", "Score": "4", "CreationDate": "2013-10-28T17:00:04.847", "LastActivityDate": "2013-10-28T17:00:04.847"}, "bq_ids": {"n4140": {"so_19640187_19640743_0": {"section_id": 5438, "quality": 0.6923076923076923, "length": 9}}, "n3337": {"so_19640187_19640743_0": {"section_id": 5233, "quality": 0.7692307692307693, "length": 10}}, "n4659": {"so_19640187_19640743_0": {"section_id": 6865, "quality": 0.6923076923076923, "length": 9}}}, "19640187": {"CommentCount": "0", "ViewCount": "291", "PostTypeId": "1", "LastEditorUserId": "2073257", "CreationDate": "2013-10-28T16:31:32.070", "LastActivityDate": "2013-10-28T17:00:04.847", "Title": "Use of \"simple-template-id\" in type specifiers", "AcceptedAnswerId": "19640743", "LastEditDate": "2013-10-28T16:47:00.620", "Id": "19640187", "Score": "4", "Body": "<p>In the C++11 Standard, sections <strong>dcl.type.simple</strong> and <strong>dcl.type.elab</strong> state that type specifiers can include <em>simple-template-id</em>. On the other hand, according to section <strong>temp.names</strong>, a <em>simple-template-id</em> could denote a function template specialization. Is it really possible to use a function template specialization to specify a type?</p>\n", "Tags": "<c++><templates><c++11><types>", "OwnerUserId": "2928705", "AnswerCount": "1"}});