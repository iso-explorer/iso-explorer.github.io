post_cb({"20188241": {"CommentCount": "12", "AcceptedAnswerId": "20189131", "PostTypeId": "1", "LastEditorUserId": "2506124", "CreationDate": "2013-11-25T08:54:03.273", "LastActivityDate": "2014-03-06T07:33:22.713", "LastEditDate": "2013-11-25T11:34:07.830", "ViewCount": "1004", "FavoriteCount": "4", "Title": "C++ redeclaration of loop count variable inconsistent behaviour?", "Id": "20188241", "Score": "31", "Body": "<p>I'm doing C++ in Visual Studio 2010 and found some odd behaviour. To make a long story short, I found that this won't compile:</p>\n<pre><code>for (int i = 0; i &lt; 10; i++)\n{\n    int i = 11;\n}\n</code></pre>\n<p>This seems correct, since the variable i is already declared in the for loop header.</p>\n<p>Now, however if I insert another for-loop before the re-declaration of i, then suddenly the compiler, intellisense etc thiks the code is correct - giving no real warnings (Tried warnings level 3 and four (/W3 and /w4)). So, doing this will actually compile and run:</p>\n<pre><code>for (int i = 0; i &lt; 10; i++)\n{\n    for(int j = 0; j &lt; 5; j++)\n    {\n    }\n\n    int i = 11;\n}\n</code></pre>\n<p>Personally, I find it odd that insering another for-loop legitimates the otherwise same code scenario.\nAny kind spirit able to tell me what I'm overlooking here?</p>\n<p>Thanks in advance!</p>\n<p><strong>EDIT:</strong>\nWow, thanks everyone for all the replies and demos - You are awesome! :)\nThis sample exposing a bug did cross my mind, I just assumed MS would have noticed such a thing by now and fixed it...at least in VS2013. </p>\n<p>Tried changing the optimization settings as suggested, but it did not make any difference.</p>\n<p>Thanks everybody!</p>\n<p><strong><a href=\"http://rextester.com/ORRMS33867\" rel=\"noreferrer\">First piece of code</a></strong></p>\n<p><strong><a href=\"http://rextester.com/ESBFG91953\" rel=\"noreferrer\">Second piece of code</a></strong></p>\n<p>Credit for demos: @Mark Garcia</p>\n", "Tags": "<c++><visual-studio-2010><for-loop><scope>", "OwnerUserId": "2506124", "AnswerCount": "2"}, "20189275": {"ParentId": "20188241", "CommentCount": "0", "Body": "<p>when you do something like:   </p>\n<pre><code> for (int i = 0; i &lt; 10; i++)\n    {\n     //some code\n    }\n</code></pre>\n<p>you are declaring variable i and are restricting it's scope to the for code block. So it'll only be visible inside the for loop. \nWith that in mind, your first code snippet redefines variable i;</p>\n<pre><code>for (int i = 0; i &lt; 10; i++)\n {\n      int i;\n }\n</code></pre>\n<p>the compiler complains about a redefinition because you now have 2 variable with the same name, same data type and same scope. </p>\n<p>As far as why the second piece of code compiles -compiler bug. It depends purely on the compiler implementation; if you change the optimization level it might not show up anymore.</p>\n", "OwnerUserId": "2978901", "PostTypeId": "2", "Id": "20189275", "Score": "0", "CreationDate": "2013-11-25T10:04:32.977", "LastActivityDate": "2013-11-25T10:04:32.977"}, "bq_ids": {"n4140": {"so_20188241_20189131_1": {"section_id": 3905, "quality": 0.7777777777777778, "length": 7}, "so_20188241_20189131_2": {"section_id": 7064, "quality": 0.9642857142857143, "length": 27}, "so_20188241_20189131_0": {"section_id": 3903, "quality": 0.875, "length": 7}}, "n3337": {"so_20188241_20189131_1": {"section_id": 3765, "quality": 0.8888888888888888, "length": 8}, "so_20188241_20189131_2": {"section_id": 6808, "quality": 0.9642857142857143, "length": 27}, "so_20188241_20189131_0": {"section_id": 3763, "quality": 1.0, "length": 8}}, "n4659": {"so_20188241_20189131_1": {"section_id": 4791, "quality": 0.6666666666666666, "length": 6}, "so_20188241_20189131_2": {"section_id": 8561, "quality": 0.9285714285714286, "length": 26}, "so_20188241_20189131_0": {"section_id": 4774, "quality": 0.75, "length": 6}}}, "20189131": {"ParentId": "20188241", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>According to the standard specification:</p>\n<blockquote>\n<p id=\"so_20188241_20189131_0\"><sup>1</sup> ...  names declared in the for-init-statement are in the same declarative-region as those declared in the condition</p>\n<p id=\"so_20188241_20189131_1\"><sup>3</sup> If the for-init-statement is a declaration, the scope of the name(s) declared extends to the end of the for-statement. [\u00a76.5.3]</p>\n</blockquote>\n<p>and</p>\n<blockquote>\n<p id=\"so_20188241_20189131_2\"><sup>4</sup>\n  Names declared in the for-init-statement, the for-range-declaration, and in the condition of if, while, for, and switch statements are local to the if, while, for, or switch statement (including the controlled statement), and shall not be redeclared in a subsequent condition of that statement nor in the outermost block (or, for the if statement, any of the outermost blocks) of the controlled statement [\u00a73.3.3]</p>\n</blockquote>\n<p>The behavior of MSVC++2010 is not standard and <strong>it's a bug</strong>.</p>\n", "OwnerUserId": "952747", "LastEditorUserId": "952747", "LastEditDate": "2014-03-06T07:33:22.713", "Id": "20189131", "Score": "19", "CreationDate": "2013-11-25T09:58:10.293", "LastActivityDate": "2014-03-06T07:33:22.713"}});