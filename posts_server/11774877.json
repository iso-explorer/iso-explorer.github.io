post_cb({"11774949": {"ParentId": "11774877", "CommentCount": "3", "Body": "<p>c++ is depended on the platform. for example - int will be in the size of the word - 32 bit or 64 bit, depends on how new your computer is.</p>\n<p>java is much more generic - it runs on a JVM that dfines the sizes. same case with C#. both are not depended on what OS and CPU you have.</p>\n", "OwnerUserId": "1561062", "PostTypeId": "2", "Id": "11774949", "Score": "1", "CreationDate": "2012-08-02T09:47:08.673", "LastActivityDate": "2012-08-02T09:47:08.673"}, "bq_ids": {"n4140": {"so_11774877_11774958_0": {"section_id": 7210, "quality": 0.9166666666666666, "length": 11}, "so_11774877_11774958_3": {"section_id": 7217, "quality": 0.92, "length": 23}, "so_11774877_11775032_2": {"section_id": 6076, "quality": 1.0, "length": 5}, "so_11774877_11774958_1": {"section_id": 7211, "quality": 1.0, "length": 25}}, "n3337": {"so_11774877_11774958_0": {"section_id": 6954, "quality": 0.9166666666666666, "length": 11}, "so_11774877_11774958_3": {"section_id": 6961, "quality": 0.92, "length": 23}, "so_11774877_11775032_2": {"section_id": 5844, "quality": 1.0, "length": 5}, "so_11774877_11774958_1": {"section_id": 6955, "quality": 1.0, "length": 25}}, "n4659": {"so_11774877_11774958_1": {"section_id": 8720, "quality": 0.96, "length": 24}, "so_11774877_11774958_3": {"section_id": 8726, "quality": 0.88, "length": 22}, "so_11774877_11774958_0": {"section_id": 8719, "quality": 0.9166666666666666, "length": 11}, "so_11774877_11775032_2": {"section_id": 7572, "quality": 1.0, "length": 5}}}, "11774943": {"ParentId": "11774877", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>It's just that the language designed chose to use different default representations. Nothing more complex than that.</p>\n<p>The size of <code>char</code> in Java for example was motivated by the desire to use 16-bit unicode characters (which require 2 bytes). This is a design decision that balanced a number of tradeoffs:</p>\n<ul>\n<li>They could have used 8-bit chars (as in C/C++) but then a significant number of useful unicode characters wouldn't fit in a single char.</li>\n<li>They could have used 32-bit characters to allow many more characters in the future (anticipating <a href=\"http://en.wikipedia.org/wiki/UTF-32\" rel=\"nofollow\">UTF32</a>). But then a lot of those bits would be wasted most of the time</li>\n</ul>\n<p>Note that you can have a 4-byte floating point number in Java - it's called <code>float</code> instead of <code>double</code> (which is 8 bytes)</p>\n", "OwnerUserId": "214010", "LastEditorUserId": "214010", "LastEditDate": "2012-08-02T09:53:25.547", "Id": "11774943", "Score": "0", "CreationDate": "2012-08-02T09:46:35.037", "LastActivityDate": "2012-08-02T09:53:25.547"}, "11774958": {"ParentId": "11774877", "CommentCount": "2", "Body": "<p>The size of C++ types are <em>not</em> set in stone. The standard says (3.9.1\nFundamental types):</p>\n<blockquote>\n<p id=\"so_11774877_11774958_0\">Objects declared as characters (char) shall be large enough to store\n  any member of the implementation\u2019s ba-  sic character set.</p>\n</blockquote>\n<p>And after that:</p>\n<blockquote>\n<p id=\"so_11774877_11774958_1\">There are five standard signed integer types : \u201csigned char\u201d, \u201cshort\n  int\u201d, \u201cint\u201d, \u201clong int\u201d, and \u201clong\n                     long int\u201d. In this list, each type provides at least as much storage as those preceding it in the list.</p>\n<p id=\"so_11774877_11774958_2\">&lt;...&gt;</p>\n<p id=\"so_11774877_11774958_3\">There are three floating point types: float, double, and long double.\n  The type double provides at least  as much precision as float, and the\n  type long double provides at least as much precision as double.</p>\n</blockquote>\n<p>As you can see, no exact values are mentioned.</p>\n", "OwnerUserId": "1490355", "PostTypeId": "2", "Id": "11774958", "Score": "1", "CreationDate": "2012-08-02T09:47:58.613", "LastActivityDate": "2012-08-02T09:47:58.613"}, "11774877": {"CommentCount": "4", "ViewCount": "6335", "PostTypeId": "1", "ClosedDate": "2012-08-02T12:47:55.797", "LastEditorUserId": "4370109", "CreationDate": "2012-08-02T09:43:22.460", "LastActivityDate": "2015-11-19T14:24:16.170", "Title": "Why are data type sizes in Java and C++ different?", "AcceptedAnswerId": "11774927", "LastEditDate": "2015-11-19T14:24:16.170", "Id": "11774877", "Score": "-2", "Body": "<p>For instance, real number in Java takes 8 byte while it only takes 4 byte in C++. Similarly, for character, Java takes 2 bytes, but C++ takes only 1 byte. Why are they of different size?</p>\n", "Tags": "<java><c++><types><primitive-types>", "OwnerUserId": "1570960", "AnswerCount": "7"}, "11774981": {"ParentId": "11774877", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>C and C++ don't have defined sizes for many types, but typically <code>float</code> is 4-bytes, just like in Java and <code>double</code> is 8-bytes just like in Java.  C doesn't have a standard byte type.</p>\n<p><code>char</code> in C is one byte but not guaranteed to be signed or unsigned.  In Java it is 2 bytes and guaranteed to be signed to support characters from 0 to 65535.</p>\n<p>The difference here is that C was designed which 7 bit ASCII was all you need to support.  Java was designed when 16-bit characters seemed to be enough.  Ironically, Unicode not goes beyond 65535 so Java now supports code points as well using multiple <code>char</code>s</p>\n", "OwnerUserId": "57695", "LastEditorUserId": "57695", "LastEditDate": "2012-08-02T12:53:40.420", "Id": "11774981", "Score": "1", "CreationDate": "2012-08-02T09:49:43.377", "LastActivityDate": "2012-08-02T12:53:40.420"}, "11774927": {"ParentId": "11774877", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>What you are stating isn't true. C and C++ don't have any fixed sized types (apart from those specified in <code>stdint.h</code>).</p>\n<p>And if you didn't get you answer from that statement, here is an explicit one:</p>\n<p>\"There is a difference, because Java contains fixed sized data types, while all basic data types in C and C++ depend on the actual platform (machine architecture + operating system) the program is compiled for.\"</p>\n", "OwnerUserId": "211659", "LastEditorUserId": "211659", "LastEditDate": "2012-08-02T09:50:42.557", "Id": "11774927", "Score": "5", "CreationDate": "2012-08-02T09:45:33.257", "LastActivityDate": "2012-08-02T09:50:42.557"}, "11775047": {"ParentId": "11774877", "CommentCount": "0", "Body": "<p>First, while the actual sizes of types in C++ is implemenation dependent\n(and there are implementations where <code>char</code> has 9 bits), on most\nplatforms which support both languages, <code>float</code> and <code>double</code> have\nexactly the same size in both C++ and Java.</p>\n<p>As for <code>char</code>, the Java type <code>char</code> corresponds more or less to\n<code>wchar_t</code> in C++; logically, it should be 4 bytes on most platforms, but\nfor various historical reasons, it is only 2 bytes on Windows, AIX and\nin the Java runtime environment.</p>\n<p>Java has no real equivalent to the C++ <code>char</code> type. </p>\n", "OwnerUserId": "649665", "PostTypeId": "2", "Id": "11775047", "Score": "3", "CreationDate": "2012-08-02T09:53:38.047", "LastActivityDate": "2012-08-02T09:53:38.047"}, "11775032": {"ParentId": "11774877", "CommentCount": "5", "Body": "<blockquote>\n<p id=\"so_11774877_11775032_0\">for character, Java takes 2 bytes, but C++ takes only 1 byte.</p>\n</blockquote>\n<p>Because the standards say so.</p>\n<p>For <a href=\"http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Character.html\" rel=\"nofollow\">java:</a></p>\n<blockquote>\n<p id=\"so_11774877_11775032_1\">The Java 2 platform uses the UTF-16 representation in char arrays and in the String and \n  StringBuffer classes. </p>\n</blockquote>\n<p>For <a href=\"http://www.kuzbass.ru:8086/docs/isocpp/expr.html#expr.sizeof\" rel=\"nofollow\">C++:</a></p>\n<blockquote>\n<p id=\"so_11774877_11775032_2\">sizeof(char), sizeof(signed char) and sizeof(unsigned char) are 1;</p>\n</blockquote>\n", "OwnerUserId": "227755", "PostTypeId": "2", "Id": "11775032", "Score": "0", "CreationDate": "2012-08-02T09:52:20.613", "LastActivityDate": "2012-08-02T09:52:20.613"}});