post_cb({"bq_ids": {"n4140": {"so_49053523_49150835_0": {"length": 6, "quality": 0.6, "section_id": 6077}}, "n3337": {"so_49053523_49150835_0": {"length": 6, "quality": 0.6, "section_id": 5845}}, "n4659": {"so_49053523_49150835_0": {"length": 6, "quality": 0.6, "section_id": 7573}}}, "49150835": {"Id": "49150835", "PostTypeId": "2", "Body": "<p>The problem is that according the the <a href=\"http://www.openmp.org/wp-content/uploads/openmp-4.5.pdf\" rel=\"nofollow noreferrer\">OpenMP 4.5 specification</a> (see section 3.5.1) <code>omp_target_alloc</code> requires that </p>\n<blockquote>\n<p id=\"so_49053523_49150835_0\">device_num, which must be greater than or equal to zero and less than the result of omp_get_num_devices()</p>\n</blockquote>\n<p>In your case your installation of GCC does not see any non-host devices as <code>omp_get_num_devices()</code> returns zero. This causes <code>omp_target_alloc</code> to return <code>NULL</code>. That's why it crashes <a href=\"http://coliru.stacked-crooked.com/a/00054f08e8e1322e\" rel=\"nofollow noreferrer\">http://coliru.stacked-crooked.com/a/00054f08e8e1322e</a></p>\n<p>On my system <code>omp_get_num_devices</code> returns 1 and your code does not crash.</p>\n<hr>\n<p>I just learned I can get your code to crash on my system by using <code>-foffload=disable</code></p>\n<pre><code>g++ -Wall -O3 -fopenmp -foffload=disable -fno-stack-protector foo.cpp\n</code></pre>\n<p>This disables the offloading and causes <code>omp_target_alloc</code> to return <code>NULL</code>.</p>\n<p>You can fix your code using the following method</p>\n<pre><code>bool offload;\n#pragma omp target defaultmap(tofrom:scalar)\noffload = !omp_is_initial_device();\nint device = offload ? 0: omp_get_initial_device();\n</code></pre>\n<p>This sets <code>device</code> to the host device if there is no non-host device otherwise it sets the device to <code>0</code>.  I got this idea <a href=\"https://stackoverflow.com/a/44702869/2542702\">here</a>. Then use <code>device</code> instead of <code>0</code> for device parameters like this:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;omp.h&gt;\n\nint main(int argc, char** argv)\n{\n    const unsigned long int N = 100000;\n\n    std::cout &lt;&lt; \"Number of devices: \" &lt;&lt; omp_get_num_devices() &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"Default device: \" &lt;&lt; omp_get_default_device() &lt;&lt; std::endl;\n\n    bool offload;\n    #pragma omp target defaultmap(tofrom:scalar)\n    offload = !omp_is_initial_device();\n    int device = offload ? 0: omp_get_initial_device();\n\n    if (offload) {\n      printf(\"Able to use offloading!\\n\");\n    }\n\n    // Allocate\n    float* buffer = (float*)omp_target_alloc(N*sizeof(float), device);\n\n    // Evaluate\n    #pragma omp target is_device_ptr(buffer)\n    #pragma omp parallel for\n    for(unsigned long int i = 0; i &lt; N; ++i) buffer[i] = i;\n\n    // Cleanup\n    omp_target_free(buffer, device);\n\n    return 0;\n}\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/5104446f789e2fc9\" rel=\"nofollow noreferrer\">http://coliru.stacked-crooked.com/a/5104446f789e2fc9</a></p>\n</hr>", "LastEditorUserId": "2542702", "LastActivityDate": "2018-03-09T13:19:11.427", "Score": "0", "CreationDate": "2018-03-07T11:30:21.870", "ParentId": "49053523", "CommentCount": "0", "OwnerUserId": "2542702", "LastEditDate": "2018-03-09T13:19:11.427"}, "49053523": {"ViewCount": "76", "Body": "<p>I am experimenting with OpenMP and the target directives. I am using <code>omp_target_alloc()</code> to allocate a buffer on the device directly, and then I try to write to this buffer inside a <code>target</code> region. Unfortunately, when I try to do so, I get a segmentation fault. Interestingly, if I use directives instead of the function <code>omp_target_alloc()</code>, the program does not crash. And to make things even more interesting, both <code>omp_get_num_devices()</code> and <code>omp_get_default_device()</code> return 0. Here is my code:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;omp.h&gt;\n\n//#define USE_TARGET // Uncomment this to see the segmentation fault\n\nint main(int argc, char** argv)\n{\n    const unsigned long int N = 100000;\n\n    std::cout &lt;&lt; \"Number of devices: \" &lt;&lt; omp_get_num_devices() &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"Default device: \" &lt;&lt; omp_get_default_device() &lt;&lt; std::endl;\n\n    // Allocate\n#ifdef USE_TARGET\n    float* buffer = (float*)omp_target_alloc(N*sizeof(float), 0);\n#else\n    float* buffer = (float*)malloc(N*sizeof(float));\n#endif\n\n    // Evaluate\n#ifdef USE_TARGET\n    #pragma omp target is_device_ptr(buffer)\n    {\n#else\n    #pragma omp target data map(tofrom:buffer[0:N])\n    {\n#endif\n        #pragma omp parallel for\n        for(unsigned long int i = 0; i &lt; N; ++i)\n            buffer[i] = i;\n    }\n\n    // Cleanup\n#ifdef USE_TARGET\n    omp_target_free(buffer, 0);\n#else\n    free(buffer);\n#endif\n\n    return 0;\n}\n</code></pre>\n<p>Can someone explain to me why the above code produces a segmentation fault when I define <code>USE_TARGET</code>? What do I need to do to fix this code?</p>\n<p>I use \"device 0\" in my call to <code>omp_target_alloc()</code>. I assume that device 0 is the CPU itself. Right? I know that the <code>target</code> directives and the <code>omp_target_alloc()</code> are a bit pointless, but my aim is to write a code that runs both on accelerators and CPUs.</p>\n<p>Also, <code>g++ --version</code> gives me this: <code>g++ (Debian 7.3.0-5) 7.3.0</code></p>\n", "Title": "How to access device memory which was allocated using omp_target_alloc()", "CreationDate": "2018-03-01T15:50:12.750", "LastActivityDate": "2018-03-09T13:19:11.427", "CommentCount": "4", "LastEditDate": "2018-03-02T09:04:01.737", "PostTypeId": "1", "LastEditorUserId": "721644", "Id": "49053523", "Score": "2", "OwnerUserId": "2301114", "Tags": "<c++><openmp>", "AnswerCount": "1"}});