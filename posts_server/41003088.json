post_cb({"bq_ids": {"n4140": {"so_41003088_41003364_4": {"section_id": 5999, "quality": 0.8571428571428571, "length": 12}, "so_41003088_41003364_2": {"section_id": 6123, "quality": 0.9130434782608695, "length": 21}, "so_41003088_41003364_3": {"section_id": 367, "quality": 0.6666666666666666, "length": 4}}, "n3337": {"so_41003088_41003364_4": {"section_id": 5767, "quality": 0.8571428571428571, "length": 12}, "so_41003088_41003364_2": {"section_id": 5887, "quality": 0.9130434782608695, "length": 21}, "so_41003088_41003364_3": {"section_id": 356, "quality": 0.6666666666666666, "length": 4}}, "n4659": {"so_41003088_41003364_4": {"section_id": 7499, "quality": 0.7142857142857143, "length": 10}, "so_41003088_41003364_2": {"section_id": 7620, "quality": 0.9130434782608695, "length": 21}, "so_41003088_41003364_3": {"section_id": 379, "quality": 0.6666666666666666, "length": 4}}}, "41003472": {"ParentId": "41003088", "CommentCount": "1", "Body": "<p>Let's consider this piece of code:</p>\n<pre><code>((T)(y)).doSomething();\n</code></pre>\n<p>Here <em>C-style</em> cast <em>(T)(y)</em> is applied.</p>\n<p>Basically compiler performs <em>static_cast</em> from <em>T&amp;</em> to <em>T</em> in this situation (look <a href=\"http://en.cppreference.com/w/cpp/language/explicit_cast\" rel=\"nofollow noreferrer\">here</a> for details).</p>\n<p>Now from the <em>cppreference.com</em> <a href=\"http://en.cppreference.com/w/cpp/language/static_cast\" rel=\"nofollow noreferrer\">static_cast</a>:</p>\n<blockquote>\n<p id=\"so_41003088_41003472_0\">static_cast &lt; new_type &gt; ( expression )</p>\n<p id=\"so_41003088_41003472_1\">...</p>\n<p id=\"so_41003088_41003472_2\">1) If there is an implicit conversion sequence from expression to\n  new_type, ... then static_cast(expression) returns the\n  imaginary variable Temp initialized as if by new_type\n  Temp(expression);</p>\n</blockquote>\n<p>There is an implicit conversion from <em>T&amp;</em> to <em>T</em>, so temporary is created by <em>static_cast</em>.</p>\n", "OwnerUserId": "5507349", "PostTypeId": "2", "Id": "41003472", "Score": "3", "CreationDate": "2016-12-06T19:39:17.497", "LastActivityDate": "2016-12-06T19:39:17.497"}, "41003364": {"ParentId": "41003088", "PostTypeId": "2", "CommentCount": "1", "Body": "<blockquote>\n<p id=\"so_41003088_41003364_0\">Why must the cast result in a temporary?</p>\n</blockquote>\n<p>According to the standard, <code>(T)(y)</code> <em>constructs a temporary value</em> of type <code>T</code>. </p>\n<p>The behavior of the explicit type conversion using the cast notation is described in the C++11 Standard as follows:</p>\n<blockquote>\n<p id=\"so_41003088_41003364_1\"><strong>5.4 Explicit type conversion (cast notation)</strong></p>\n<p id=\"so_41003088_41003364_2\">1 The result of the expression <code>(T)</code> <em>cast-expression</em> is of type <code>T</code>. The result is an lvalue if <code>T</code> is an lvalue reference type or an rvalue reference to function type and an xvalue if <code>T</code> is an rvalue reference to object type; otherwise the result is a prvalue.</p>\n</blockquote>\n<p>In your case,</p>\n<p><code>T</code> is not an lvalue reference.<br>\n<code>T</code> is not an rvalue reference to function type.<br>\n<code>T</code> is not an rvalue reference to object type.</br></br></p>\n<p>Hence, the result is a prvalue of type <code>T</code>.</p>\n<p>If you look further into the definitions of prvalue and rvalue (Section 3.10), the result is a temporary object.</p>\n<p>The temporary object is constructed using the <strong>Explicit type conversion (funtional notation)</strong>.</p>\n<p>From the C++11 Standard (emphasis mine):</p>\n<blockquote>\n<p id=\"so_41003088_41003364_3\"><strong>5.2.3 Explicit type conversion (functional notation)</strong></p>\n<p id=\"so_41003088_41003364_4\">1 A <em>simple-type-specifier</em> (7.1.6.2) or <em>typename-specifier</em> (14.6) followed by a parenthesized <em>expression-list</em> <strong>constructs a value of the specified type</strong> given the expression list.</p>\n</blockquote>\n", "OwnerUserId": "434551", "LastEditorUserId": "434551", "LastEditDate": "2016-12-06T20:07:39.267", "Id": "41003364", "Score": "7", "CreationDate": "2016-12-06T19:31:57.863", "LastActivityDate": "2016-12-06T20:07:39.267"}, "41003088": {"CommentCount": "1", "ViewCount": "70", "PostTypeId": "1", "LastEditorUserId": "3980929", "CreationDate": "2016-12-06T19:15:29.747", "LastActivityDate": "2016-12-06T20:07:39.267", "Title": "Why does casting a type T& to T create a temporary?", "AcceptedAnswerId": "41003364", "LastEditDate": "2016-12-06T19:26:13.503", "Id": "41003088", "Score": "2", "Body": "<p>In Effective STL item 22 Meyers appears to imply that casting a <code>T&amp;</code> to a <code>T</code> instantiates a temporary; that is</p>\n<pre><code>T x;\nT&amp; y = x;\n((T)(y)).doSomething();\n</code></pre>\n<p>results in <code>doSomething()</code> being done on a temporary rather than <code>x</code>.</p>\n<p>Why must the cast result in a temporary? </p>\n", "Tags": "<c++><casting><reference>", "OwnerUserId": "974040", "AnswerCount": "2"}});