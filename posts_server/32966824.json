post_cb({"32969444": {"ParentId": "32966824", "PostTypeId": "2", "CommentCount": "7", "CreationDate": "2015-10-06T12:01:57.477", "Score": "1", "LastEditorUserId": "1128289", "LastEditDate": "2015-10-07T08:09:09.523", "Id": "32969444", "OwnerUserId": "15416", "Body": "<p>The comments quote an \"as-if\" rule. That's actually not necessary. <code>std::sort</code> isn't specified \"as if introsort is used\". The specification for <code>std::sort</code> is brief and only requires an effect (sorted) and complexity (O(N log N)) for the number of comparisons. Radix sort meets both.</p>\n<blockquote>\n<p id=\"so_32966824_32969444_0\">25.4.1.1 sort</p>\n<p id=\"so_32966824_32969444_1\"><code>template&lt;class RandomAccessIterator&gt; void sort(RandomAccessIterator first, RandomAccessIterator last);</code></p>\n<p id=\"so_32966824_32969444_2\"><code>template&lt;class RandomAccessIterator, class\n  Compare&gt; void sort(RandomAccessIterator first, RandomAccessIterator\n  last, Compare comp);</code></p>\n<p id=\"so_32966824_32969444_3\">1 <em>Effects</em>: Sorts the elements in the range [first,last).</p>\n<p id=\"so_32966824_32969444_4\">2 <em>Requires</em>: RandomAccessIterator shall satisfy the requirements of ValueSwappable (17.6.3.2). The type of *first shall satisfy the requirements of MoveConstructible (Table 20) and of MoveAssignable (Table 22).</p>\n<p id=\"so_32966824_32969444_5\">3 <em>Complexity</em>: O(N log(N )) (where N == last - first) comparisons.</p>\n</blockquote>\n<p>In practice, comparing two register-width values <code>a&lt;b</code> is a much faster operation than extracting digits and comparing a sequence of those digits, even if we'd use bits or hexadecimal digits. Sure, it's a constant factor difference, but extracting and comparing 32 individual bits is going to be about 100x slower than a direct comparison. That beats most theoretical concerns, especially since <code>log N</code> can't really be 100 on todays computers.</p>\n", "LastActivityDate": "2015-10-07T08:09:09.523"}, "32966824": {"CommentCount": "10", "ViewCount": "162", "PostTypeId": "1", "LastEditorUserId": "1128289", "CreationDate": "2015-10-06T09:47:16.863", "LastActivityDate": "2015-10-07T08:09:09.523", "Title": "Would it be legal to implement overloads of std::sort with radix sort?", "AcceptedAnswerId": "32969444", "LastEditDate": "2015-10-06T11:31:06.900", "Id": "32966824", "Score": "9", "Body": "<p>For applicable data types a good radix sort can beat the pants off comparison sorts by a wide margin but <code>std::sort</code> is usually implemented as introsort. Is there a reason to not use radix sort to implement <code>std::sort</code>? Radix sort doesn't fully suffice for implementing <code>std::sort</code> because <code>std::sort</code> requires only that types be comparable but for types where comparison and radix based sorting produce the same answer (e.g. <code>int</code>) this seems like low hanging fruit that's been left unplucked.</p>\n<p>Would it be legal to implement <code>std::sort</code> with overloads that use radix sort when appropriate? Is there something about the requirements of <code>std::sort</code> that fundamentally prevent this?</p>\n<p><strong>Edit:</strong> I should have been a tad more clear. I'm asking if it would be legal for an implementation of the standard library to do this. I'm not asking about a user of a standard library implementation placing anything in the <code>std</code> namespace. I know that doing so is illegal except in specific cases.</p>\n", "Tags": "<c++><sorting><language-lawyer><standard-library>", "OwnerUserId": "1128289", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_32966824_32969444_1": {"section_id": 1481, "quality": 0.7142857142857143, "length": 5}, "so_32966824_32969444_4": {"section_id": 1401, "quality": 0.6666666666666666, "length": 10}, "so_32966824_32969444_2": {"section_id": 1481, "quality": 0.8181818181818182, "length": 9}, "so_32966824_32969444_5": {"section_id": 1402, "quality": 0.6666666666666666, "length": 4}}, "n3337": {"so_32966824_32969444_1": {"section_id": 1475, "quality": 0.7142857142857143, "length": 5}, "so_32966824_32969444_4": {"section_id": 1395, "quality": 0.6666666666666666, "length": 10}, "so_32966824_32969444_2": {"section_id": 1475, "quality": 0.8181818181818182, "length": 9}, "so_32966824_32969444_5": {"section_id": 1396, "quality": 0.6666666666666666, "length": 4}}, "n4659": {"so_32966824_32969444_1": {"section_id": 1619, "quality": 0.7142857142857143, "length": 5}, "so_32966824_32969444_4": {"section_id": 1518, "quality": 0.6666666666666666, "length": 10}, "so_32966824_32969444_2": {"section_id": 1620, "quality": 0.8181818181818182, "length": 9}, "so_32966824_32969444_5": {"section_id": 1523, "quality": 0.6666666666666666, "length": 4}}}});