post_cb({"33823329": {"ParentId": "33822954", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>As it is undefined to put it in namespace <code>std</code></p>\n<p>I would use:</p>\n<pre><code>namespace extended_std /* or more appropriate name */\n{\n    namespace std\n    {\n        // disable_if\n    }\n}\n</code></pre>\n<p>And potentially</p>\n<pre><code>using namespace extended_std; // So you can use std::disable_if\n</code></pre>\n", "OwnerUserId": "2684539", "LastEditorUserId": "2684539", "LastEditDate": "2015-11-20T11:17:21.857", "Id": "33823329", "Score": "3", "CreationDate": "2015-11-20T09:37:57.267", "LastActivityDate": "2015-11-20T11:17:21.857"}, "33823014": {"ParentId": "33822954", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>All identifiers are reserved inside the <code>std</code> namespace. You'll have to define your own. The name of this namespace is opinon-based, but if I were you I'd define a <code>utils::</code> or <code>stdext::</code> namespace somewhere. As I never stumbled upon such a case, I can't say what's the usual choice.</p>\n<p><hr>\nAs a reminder, here are the list of reserved identifiers in C++:</hr></p>\n<ul>\n<li>Reserved in any scope, including for use as implementation macros:\n\n<ul>\n<li>identifiers beginning with an underscore followed immediately by an uppercase letter</li>\n<li>identifiers containing adjacent underscores (or \"double underscore\")</li>\n</ul></li>\n<li>Reserved in the global namespace:\n\n<ul>\n<li>identifiers beginning with an underscore</li>\n</ul></li>\n<li>Everything in the std namespace is reserved (you are allowed to add template specializations, though).</li>\n</ul>\n<p><hr>\nFrom the 2003 C++ Standard:</hr></p>\n<blockquote>\n<h3>17.4.3.2.1 Global names [lib.global.names]</h3>\n<p id=\"so_33822954_33823014_0\">Certain sets of names and function signatures are always reserved to the implementation:</p>\n<ul>\n<li>Each name that contains a double underscore (_ _) or begins with an underscore followed by an uppercase letter (2.11) is reserved to the implementation for any use.</li>\n<li>Each name that begins with an underscore is reserved to the implementation for use as a name in the global namespace.<sup>165</sup></li>\n</ul>\n<p id=\"so_33822954_33823014_1\"><sup>165)</sup> Such names are also reserved in namespace ::std (17.4.3.1). </p>\n<h3>7.1.3 Reserved identifiers</h3>\n<p id=\"so_33822954_33823014_2\">Each header declares or defines all identifiers listed in its associated subclause, and\n  optionally declares or defines identifiers listed in its associated future library directions subclause and identifiers which are always reserved either for any use or for use as file scope identifiers.</p>\n<ul>\n<li>All identifiers that begin with an underscore and either an uppercase letter or another\n  underscore are always reserved for any use.</li>\n<li>All identifiers that begin with an underscore are always reserved for use as identifiers\n  with file scope in both the ordinary and tag name spaces.</li>\n<li>Each macro name in any of the following subclauses (including the future library\n  directions) is reserved for use as specified if any of its associated headers is included;\n  unless explicitly stated otherwise (see 7.1.4).</li>\n<li>All identifiers with external linkage in any of the following subclauses (including the\n  future library directions) are always reserved for use as identifiers with external\n  linkage.<sup>154</sup></li>\n<li>Each identifier with file scope listed in any of the following subclauses (including the\n  future library directions) is reserved for use as a macro name and as an identifier with\n  file scope in the same name space if any of its associated headers is included.</li>\n</ul>\n<p id=\"so_33822954_33823014_3\">No other identifiers are reserved. If the program declares or defines an identifier in a\n  context in which it is reserved (other than as allowed by 7.1.4), or defines a reserved\n  identifier as a macro name, the behavior is undefined.</p>\n<p id=\"so_33822954_33823014_4\">If the program removes (with <code>#undef</code>) any macro definition of an identifier in the first\n  group listed above, the behavior is undefined.</p>\n<p id=\"so_33822954_33823014_5\"><sup>154)</sup> The list of reserved identifiers with external linkage includes <code>errno</code>, <code>math_errhandling</code>, <code>setjmp</code>, and <code>va_end</code>.</p>\n</blockquote>\n", "OwnerUserId": "5470596", "LastEditorUserId": "5470596", "LastEditDate": "2015-11-20T09:58:54.493", "Id": "33823014", "Score": "2", "CreationDate": "2015-11-20T09:21:11.247", "LastActivityDate": "2015-11-20T09:58:54.493"}, "bq_ids": {"n4140": {"so_33822954_33823014_0": {"section_id": 6307, "quality": 1.0, "length": 8}}, "n3337": {"so_33822954_33823014_0": {"section_id": 6064, "quality": 1.0, "length": 8}}, "n4659": {"so_33822954_33823014_0": {"section_id": 7844, "quality": 0.625, "length": 5}}}, "33822954": {"CommentCount": "4", "ViewCount": "91", "PostTypeId": "1", "LastEditorUserId": "1593077", "CreationDate": "2015-11-20T09:18:24.920", "LastActivityDate": "2015-11-20T11:17:21.857", "Title": "What namespace to use for code that \"augments std\"?", "LastEditDate": "2015-11-20T09:35:50.213", "Id": "33822954", "Score": "3", "Body": "<p>Sometimes you find yourself writing some bits of header code which could really have fit nicely into the C++ standard library. Just as an example: a <code>disable_if</code> template, doing the converse of <a href=\"http://en.cppreference.com/w/cpp/types/enable_if\" rel=\"nofollow\"><code>std::enable_if</code></a>.</p>\n<p>I don't want to just put it in the global namespace. But what's the convention? Should I...</p>\n<ul>\n<li>add it to <code>namespace std</code>?</li>\n<li>add it to <code>namespace std::experimental</code>?</li>\n<li>add it to something like <code>namespace std::augmented</code>?</li>\n<li>add it to something like <code>namespace myprojectname::std</code>?</li>\n<li>add it to something like <code>namespace std-augmented</code>?</li>\n<li>something else?</li>\n</ul>\n", "Tags": "<c++><namespaces><c++-standard-library><idiomatic>", "OwnerUserId": "1593077", "AnswerCount": "2"}});