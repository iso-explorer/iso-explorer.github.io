post_cb({"28332078": {"CommentCount": "0", "AcceptedAnswerId": "28332609", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2015-02-04T21:45:52.590", "LastActivityDate": "2015-02-04T22:25:37.170", "LastEditDate": "2017-05-23T11:53:24.403", "ViewCount": "400", "FavoriteCount": "1", "Title": "experimental::optional nullopt_t constructor", "Id": "28332078", "Score": "6", "Body": "<p><a href=\"http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2013/n3793.html#optional.nullopt\" rel=\"nofollow noreferrer\">Here</a> is described the <code>nullopt_t</code> and <code>nullopt</code> for the <code>optional</code> object proposed for c++:</p>\n<blockquote>\n<pre><code>struct nullopt_t{see below}; \nconstexpr nullopt_t nullopt(unspecified);\n</code></pre>\n<p id=\"so_28332078_28332078_0\">[...]\n  Type nullopt_t shall not have a default constructor. It shall be a\n  literal type. Constant nullopt shall be initialized with an argument\n  of literal type.</p>\n</blockquote>\n<p>The reason for this is explained in the <a href=\"http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2013/n3793.html#rationale.reset_syntax\" rel=\"nofollow noreferrer\">The op = {} syntax</a> chapter of the document: for the <code>op = {}</code> to be unambiguous some tricks have to be adopted, one of which is that <code>nullopt_t</code> must not be default constructible.</p>\n<p>My question is about what does the literal type means here? I found this <a href=\"https://stackoverflow.com/questions/18581443/need-clarification-on-definition-of-literal-type\">SO post</a>. So it looks to me that just another empty class would do. Could it  also be a constructor taking a <code>int</code>?</p>\n<p>What would be a minimal conforming <code>nullopt_t</code> class look like?</p>\n<p>Something like this:</p>\n<pre><code>struct nullopt_t_construct_tag_t{};\n\nstruct nullopt_t {\n  nullopt_t() = delete; // I know declaring it as deleted is redundant\n  constexpr nullopt_t(nullopt_t_construct_tag_t) {};\n};\n\nconstexpr nullopt_t nullopt(nullopt_t_construct_tag_t{});\n</code></pre>\n<p>Or this:</p>\n<pre><code>struct nullopt_t {\n  nullopt_t() = delete;\n  constexpr nullopt_t(int) {};\n};\n\nconstexpr nullopt_t nullopt(0);\n</code></pre>\n", "Tags": "<c++><optional><c++1z>", "OwnerUserId": "2805305", "AnswerCount": "1"}, "28332609": {"ParentId": "28332078", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>A minimal implementation is</p>\n<pre><code>struct nullopt_t {\n    constexpr nullopt_t(int) {}\n};\n</code></pre>\n<p>No default constructor will be implicitly declared, [class.ctor]/4:</p>\n<blockquote>\n<p id=\"so_28332078_28332609_0\">If there is no user-declared constructor for class <code>X</code>, a constructor\n  having no parameters is implicitly declared as defaulted (8.4).</p>\n</blockquote>\n<p>... and <code>nullopt_t</code> can be constructed from <code>int</code>, a literal type.<br>\nNote that in your code a default constructor exists, though being defined as deleted. </br></p>\n<p>The above definition does meet the requirements for a literal type:</p>\n<blockquote>\n<p id=\"so_28332078_28332609_1\">A type is a <em>literal type</em> if it is:  <br> (10.5) \u2014 a class type (Clause 9)\n  that has all of the following properties:</br></p>\n<ul>\n<li>it has a trivial destructor,</li>\n<li>it is an aggregate type (8.5.1) or has at least one <code>constexpr</code> constructor [..] that is not a copy or move constructor, and</li>\n<li>all of its non-static data members and base classes are of non-volatile literal types.</li>\n</ul>\n</blockquote>\n", "OwnerUserId": "3647361", "LastEditorUserId": "3647361", "LastEditDate": "2015-02-04T22:25:37.170", "Id": "28332609", "Score": "5", "CreationDate": "2015-02-04T22:19:32.103", "LastActivityDate": "2015-02-04T22:25:37.170"}, "bq_ids": {"n4140": {"so_28332078_28332609_0": {"section_id": 369, "quality": 1.0, "length": 10}, "so_28332078_28332609_1": {"section_id": 7208, "quality": 0.8, "length": 8}}, "n3337": {"so_28332078_28332609_0": {"section_id": 359, "quality": 1.0, "length": 10}, "so_28332078_28332609_1": {"section_id": 6952, "quality": 0.8, "length": 8}}, "n4659": {"so_28332078_28332609_0": {"section_id": 381, "quality": 1.0, "length": 10}, "so_28332078_28332609_1": {"section_id": 8717, "quality": 0.8, "length": 8}}}});