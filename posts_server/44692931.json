post_cb({"44693469": {"Id": "44693469", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_44692931_44693469_0\">Why doesn't this compile?</p>\n</blockquote>\n<pre><code>class Test {\n  void foo();\n  void foo() { }; // wrong\n};\n</code></pre>\n<p>Because, as <a href=\"https://stackoverflow.com/a/44693145/841108\">StoryTeller</a> and others answered, you are declaring and defining the <em>same</em> member function <code>void Test::foo(void)</code> twice (and the inside-class definition of <code>foo</code> is implicitly <code>inline</code>).</p>\n<p>If you want to define a member function in your header file <em>after</em> the class, you'll better declare it explicitly as <code>inline</code> like this:</p>\n<pre><code>class Test {\n   inline void foo();\n};\n</code></pre>\n<p>and <em>later</em> define that member function (e.g. below in the same header file):</p>\n<pre><code>void Test::foo() {\n  // body of Test::foo\n}\n</code></pre>\n<p>BTW, if you declare a member function with outside definition like above, and that member function is not <code>inline</code> but is <em>defined</em> in some header file which is included in several translation units, that function would be multiply defined and the linker would complain.</p>\n", "LastEditorUserId": "841108", "LastActivityDate": "2017-06-22T08:56:08.703", "Score": "1", "CreationDate": "2017-06-22T07:56:30.513", "ParentId": "44692931", "CommentCount": "3", "OwnerUserId": "841108", "LastEditDate": "2017-06-22T08:56:08.703"}, "44693292": {"Id": "44693292", "PostTypeId": "2", "Body": "<p>It is just the way it is in C++. Redeclaring a class member is not allowed (unless you consider an out-of-class <em>definition</em> as another <em>declaration</em>). Redeclaring a namespace member is OK as long as you obey ODR.</p>\n", "LastActivityDate": "2017-06-22T07:47:30.803", "CommentCount": "1", "CreationDate": "2017-06-22T07:47:30.803", "ParentId": "44692931", "Score": "1", "OwnerUserId": "187690"}, "44692931": {"ViewCount": "69", "Body": "<p>Why doesn't this compile?</p>\n<pre><code>class Test\n{\n    void foo();\n    void foo()\n    { }\n};\n</code></pre>\n<p>But these will compile:</p>\n<pre><code>void bar();\nvoid bar()\n{ }\n\n// In same header/file\nclass Test\n{\n    void foo();   \n};\nvoid Test::foo()\n{ }\n</code></pre>\n<p>The compiler would say that given method <a href=\"http://ideone.com/d0CKiZ\" rel=\"nofollow noreferrer\">cannot be overloaded</a>. The method <code>Test::foo</code> is not being overloaded - it is the same function with exact same signature.</p>\n", "AcceptedAnswerId": "44693145", "Title": "Declare, then define a class method - Why an error?", "CreationDate": "2017-06-22T07:32:09.927", "Id": "44692931", "CommentCount": "7", "PostTypeId": "1", "LastActivityDate": "2017-06-22T08:56:08.703", "Score": "0", "OwnerUserId": "264325", "Tags": "<c++>", "AnswerCount": "4"}, "44693145": {"Id": "44693145", "PostTypeId": "2", "Body": "<p>It's explicitly prohibited by the C++ standard. Right there at <a href=\"http://eel.is/c++draft/class#mfct-1\" rel=\"noreferrer\">[class.mfct/1]</a></p>\n<blockquote>\n<p id=\"so_44692931_44693145_0\">A member function may be defined in its class definition, in which\n  case it is an inline member function, or it may be defined outside of\n  its class definition if it has already been declared but not defined\n  in its class definition. A member function definition that appears\n  outside of the class definition shall appear in a namespace scope\n  enclosing the class definition. <strong>Except for member function definitions\n  that appear outside of a class definition</strong>, and except for explicit\n  specializations of member functions of class templates and member\n  function templates ([temp.spec]) appearing outside of the class\n  definition, <strong>a member function shall not be redeclared.</strong></p>\n</blockquote>\n", "LastActivityDate": "2017-06-22T07:40:49.250", "CommentCount": "2", "CreationDate": "2017-06-22T07:40:49.250", "ParentId": "44692931", "Score": "5", "OwnerUserId": "817643"}, "44693242": {"Id": "44693242", "PostTypeId": "2", "Body": "<pre><code>void foo();\n</code></pre>\n<p>and </p>\n<pre><code>void foo() {}\n</code></pre>\n<p>are two ways of declaring functions in a class definition. The first only declares the function and the second declares the function and also  implements it. Therefore the compiler assumes that you are going to re-declare the same function and is not a correct overload as the function signature is the same in both.</p>\n", "LastEditorUserId": "5772384", "LastActivityDate": "2017-06-22T07:51:00.563", "Score": "0", "CreationDate": "2017-06-22T07:45:00.803", "ParentId": "44692931", "CommentCount": "1", "OwnerUserId": "5772384", "LastEditDate": "2017-06-22T07:51:00.563"}, "bq_ids": {"n4140": {"so_44692931_44693145_0": {"length": 63, "quality": 0.984375, "section_id": 5881}}, "n3337": {"so_44692931_44693145_0": {"length": 63, "quality": 0.984375, "section_id": 5652}}, "n4659": {"so_44692931_44693145_0": {"length": 63, "quality": 0.984375, "section_id": 7364}}}});