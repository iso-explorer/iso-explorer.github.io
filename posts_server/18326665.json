post_cb({"bq_ids": {"n4140": {"so_18326665_18326665_0": {"length": 13, "quality": 0.9285714285714286, "section_id": 6122}}, "n3337": {"so_18326665_18326665_0": {"length": 10, "quality": 0.7142857142857143, "section_id": 5886}}}, "18327187": {"PostTypeId": "2", "Body": "<p>All it's doing is checking what the expression does to see if the terms of the expression would throw an exception. It doesn't check the actual code that would potentially be called. If one of the expression terms is a function call that is not explicitly <code>noexcept</code>, then it is assumed to be able to throw exceptions.</p>\n<p>Or, to put it another way, it checks to see if all of the functions being called in the expression are <code>noexcept</code>. That's all.</p>\n<blockquote>\n<p id=\"so_18326665_18327187_0\">According to Clang 3.3 this test says that calculate() does not throw.</p>\n</blockquote>\n<p>And that's true. Because <code>calculate</code> is defined as <code>noexcept</code>, if it tries to emit an exception, <code>std::terminate</code> will be called. Therefore, no exceptions will be emitted by the function.</p>\n", "LastActivityDate": "2013-08-20T04:53:22.867", "Id": "18327187", "CommentCount": "0", "CreationDate": "2013-08-20T04:53:22.867", "ParentId": "18326665", "Score": "0", "OwnerUserId": "734069"}, "18326665": {"ViewCount": "118", "Body": "<p>Looking at the C++11 Spec (n3485) section 5.3.7, note 3 says that the result of noexcept(expr) is false if:</p>\n<blockquote>\n<p id=\"so_18326665_18326665_0\">... a potentially-evaluated call to a function... that does not have a\n  non-throwing exception-speci\ufb01cation  ... a potentially-evaluated\n  throw-expression ... a potentially-evaluated dynamic_cast ... a\n  potentially-evaluated typeid expression...</p>\n</blockquote>\n<p>Does \"potentially evaluated\" mean that it drills down (not at all? a little?) to determine if one of the conditions can result in false?</p>\n<p>I'm finding that (in test code, not an application) a function that claims to be noexcept but does, in fact, throw (even if in all cases) will still be considered to be noexcept.  Am misunderstanding the spec or is the code in the following example all wrong?</p>\n<pre><code>double calculate(....) noexcept { throw \"haha\"; }  // using simpsons::nelson\n\nbool does_not_throw = noexcept(calculate());\n</code></pre>\n<p>According to Clang 3.3 this test says that calculate() does not throw.</p>\n", "AcceptedAnswerId": "18327187", "Title": "noexcept(expression) - where expression is a noexcept function that actually throws", "CreationDate": "2013-08-20T03:49:55.500", "Id": "18326665", "CommentCount": "2", "PostTypeId": "1", "LastActivityDate": "2013-08-20T04:53:22.867", "Score": "0", "OwnerUserId": "849048", "Tags": "<c++11><noexcept>", "AnswerCount": "1"}});