post_cb({"40812204": {"ViewCount": "399", "Body": "<p>The standard (\u00a714.1) Template parameters says:</p>\n<blockquote>\n<p id=\"so_40812204_40812204_0\">A template-parameter of a template template-parameter is permitted to have a default template-argument.</p>\n</blockquote>\n<p>Now consider following code :</p>\n<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nstruct A {};\nstruct B {};\n\ntemplate&lt;typename T = A&gt;\nstruct X;\n\ntemplate&lt;&gt;\nstruct X&lt;A&gt; {\n   static void f() { cout &lt;&lt; 1 &lt;&lt; endl; }\n};\n\ntemplate&lt;&gt;\nstruct X&lt;B&gt; {\n   static void f() { cout &lt;&lt; 2 &lt;&lt; endl; }\n};\n\ntemplate&lt; template&lt;typename T = B&gt; class C&gt;\nvoid g() {\n   C&lt;&gt;::f();\n}\n\nint main() {\n   g&lt;X&gt;();\n}\n</code></pre>\n<p>It's output is:</p>\n<blockquote>\n<p id=\"so_40812204_40812204_1\">out put :2</p>\n</blockquote>\n<p>In this case, the template template-parameter is <code>C</code>.<br>\nBut I don't understand why  <code>C&lt;B&gt;::f()</code> is called inside <code>g()</code>.</br></p>\n", "AcceptedAnswerId": "40812273", "Title": "What are the scopes of default template arguments?", "CreationDate": "2016-11-25T20:58:33.800", "Id": "40812204", "CommentCount": "1", "FavoriteCount": "3", "PostTypeId": "1", "LastEditDate": "2016-11-25T21:17:03.847", "LastEditorUserId": "1639256", "LastActivityDate": "2016-11-25T22:28:44.977", "Score": "18", "OwnerUserId": "5905343", "Tags": "<c++><templates><c++14>", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_40812204_40812204_0": {"length": 7, "quality": 1.0, "section_id": 67}, "so_40812204_40812273_0": {"length": 18, "quality": 0.9, "section_id": 67}, "so_40812204_40812612_0": {"length": 19, "quality": 0.95, "section_id": 67}}, "n3337": {"so_40812204_40812612_0": {"length": 19, "quality": 0.95, "section_id": 62}, "so_40812204_40812273_0": {"length": 18, "quality": 0.9, "section_id": 62}, "so_40812204_40812204_0": {"length": 7, "quality": 1.0, "section_id": 62}}, "n4659": {"so_40812204_40812612_0": {"length": 19, "quality": 0.95, "section_id": 69}, "so_40812204_40812273_0": {"length": 18, "quality": 0.9, "section_id": 69}, "so_40812204_40812204_0": {"length": 7, "quality": 1.0, "section_id": 69}}}, "40812612": {"Id": "40812612", "PostTypeId": "2", "Body": "<p>I think this is covered by <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4567.pdf\" rel=\"nofollow noreferrer\"><strong>N4567 14.1/14</strong></a> </p>\n<blockquote>\n<p id=\"so_40812204_40812612_0\">A template-parameter of a template template-parameter is permitted to\n  have a default template-argument. When such default arguments are\n  specified, they apply to the template template-parameter in the scope\n  of the template template-parameter. [Example:   </p>\n</blockquote>\n<pre><code>    template &lt;class T = float&gt; struct B {}; \n\n    template &lt;template &lt;class TT = float&gt; class T&gt;\n    struct A { inline void f(); inline void g(); };\n\n    template &lt;template&gt; &lt;class TT&gt; class T&gt; void A&lt;T&gt;::f() {\n      T&lt;&gt; t; // error - TT has no default template argument\n    }\n\n    template &lt;template &lt;class TT = char&gt; class&gt; T&gt; void A&lt;T&gt;::g() {\n      T&lt;&gt; t; // OK - T&lt;char&gt;\n    }\n</code></pre>\n<blockquote>\n<p id=\"so_40812204_40812612_1\">-- end example]</p>\n</blockquote>\n<p>So the default template parameter of a template template parameter applies only in the scope where the default parameter is declared.<br>\nIn the examples it is even switching the default template parameter for the template template parameter between the member function declaration and the member function definition.  </br></p>\n", "LastActivityDate": "2016-11-25T21:45:34.153", "Score": "1", "CreationDate": "2016-11-25T21:45:34.153", "ParentId": "40812204", "CommentCount": "0", "OwnerUserId": "1277769"}, "40812273": {"Id": "40812273", "PostTypeId": "2", "Body": "<p>This declaration</p>\n<pre><code>template&lt; template&lt;typename T = B&gt; class C&gt;\nvoid g() {\n   C&lt;&gt;::f();\n}\n</code></pre>\n<p>is equivalent to</p>\n<pre><code>template&lt; template&lt;typename T = B&gt; class C&gt;\nvoid g() {\n   C&lt;B&gt;::f();\n}\n</code></pre>\n<p>Thus this call</p>\n<pre><code>   g&lt;X&gt;();\n</code></pre>\n<p>is equivalent to the call of the function</p>\n<pre><code>void g() {\n   X&lt;B&gt;::f();\n}\n</code></pre>\n<p>The paragraph #14.1.14 of the C++ Standard contains corresponding examples</p>\n<blockquote>\n<p id=\"so_40812204_40812273_0\">14 A template-parameter of a template template-parameter is permitted\n  to have a default template-argument. When such default arguments are\n  speci\ufb01ed, they apply to the template template-parameter in the scope\n  of the template template-parameter. [Example:</p>\n</blockquote>\n<pre><code>template &lt;class T = float&gt; struct B {}; \ntemplate &lt;template &lt;class TT = float&gt; class T&gt; struct A {\n inline void f();\n inline void g(); \n}; \ntemplate &lt;template &lt;class TT&gt; class T&gt; void A&lt;T&gt;::f() {\n T&lt;&gt; t; // error - TT has no default template argument \n} \ntemplate &lt;template &lt;class TT = char&gt; class T&gt; void A&lt;T&gt;::g() {\n T&lt;&gt; t; // OK - T&lt;char&gt; \n} \n</code></pre>\n<blockquote>\n<p id=\"so_40812204_40812273_1\">\u2014end example]</p>\n</blockquote>\n", "LastEditorUserId": "2877241", "LastActivityDate": "2016-11-25T22:10:35.180", "Score": "7", "CreationDate": "2016-11-25T21:05:40.963", "ParentId": "40812204", "CommentCount": "7", "LastEditDate": "2016-11-25T22:10:35.180", "OwnerUserId": "2877241"}, "40812519": {"Id": "40812519", "PostTypeId": "2", "Body": "<p>Think about what would happen without default template template parameter for g():</p>\n<pre><code>template&lt; template&lt;typename T&gt; class C&gt;\nvoid g() {\n   C&lt;&gt;::f();\n}\n</code></pre>\n<p>would be ill-formed as the use of C would require a template parameter inside the definition of g(). Now that you provided B as a default, the definition of template g() is well formed and the default for the template template parameter of X is irrelevant.</p>\n", "LastEditorUserId": "2440280", "LastActivityDate": "2016-11-25T21:41:49.517", "Score": "3", "CreationDate": "2016-11-25T21:34:14.043", "ParentId": "40812204", "CommentCount": "0", "LastEditDate": "2016-11-25T21:41:49.517", "OwnerUserId": "2440280"}});