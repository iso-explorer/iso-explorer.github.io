post_cb({"bq_ids": {"n4140": {"so_40656436_40656436_0": {"length": 4, "quality": 0.5714285714285714, "section_id": 3382}}, "n3337": {"so_40656436_40656436_0": {"length": 4, "quality": 0.5714285714285714, "section_id": 3251}}, "n4659": {"so_40656436_40656436_0": {"length": 4, "quality": 0.5714285714285714, "section_id": 4142}}}, "40656436": {"ViewCount": "39", "Body": "<p>I am getting an error </p>\n<blockquote>\n<p id=\"so_40656436_40656436_0\">error: cannot allocate an object of abstract type 'myClass'</p>\n</blockquote>\n<p>I have made made up a small sample to demonstrate my error.\nBelow is the code. (includes and #ifndef stuff is not included)</p>\n<blockquote>\n<p id=\"so_40656436_40656436_1\">person.h</p>\n</blockquote>\n<pre><code>class Person{\n    public:\n            virtual std::string getRole() = 0;\n};\n</code></pre>\n<blockquote>\n<p id=\"so_40656436_40656436_2\">employee.h</p>\n</blockquote>\n<pre><code>class Employee:public Person{\n    std::string getRole();\n};\n</code></pre>\n<blockquote>\n<p id=\"so_40656436_40656436_3\">workplace.h</p>\n</blockquote>\n<pre><code>class Workplace{\n    public:\n            void  setPeople(std::vector&lt;Person&gt; p);\n\n    private:\n            std::vector&lt;Person&gt; people;\n};\n</code></pre>\n<blockquote>\n<p id=\"so_40656436_40656436_4\">workplace.cpp</p>\n</blockquote>\n<pre><code>void Workplace::setPeople(std::vector&lt;Person&gt; p){\n    people = p;\n}\n</code></pre>\n<blockquote>\n<p id=\"so_40656436_40656436_5\">employee.cpp</p>\n</blockquote>\n<pre><code>std::string Employee::getRole(){\n    return \"Generic Employee\";\n}\n</code></pre>\n<p>The error I am getting from this example is:</p>\n<blockquote>\n<p id=\"so_40656436_40656436_6\">/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_construct.h:80: error: cannot allocate an object of abstract type \u2018Person\u2019\n  person.h:7: note:   because the following virtual functions are pure within \u2018Person\u2019:\n  person.h:9: note:       virtual std::string Person::getRole()</p>\n</blockquote>\n<p>Thanks in advance.</p>\n", "Title": "cpp Abstract class", "CreationDate": "2016-11-17T13:39:46.080", "LastActivityDate": "2016-11-17T13:39:46.080", "CommentCount": "2", "PostTypeId": "1", "ClosedDate": "2016-11-17T13:43:57.693", "Id": "40656436", "Score": "0", "OwnerUserId": "5765390", "Tags": "<c++><abstract-class>", "AnswerCount": "0"}});