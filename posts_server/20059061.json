post_cb({"47159747": {"ParentId": "20059061", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>This is bad. Consider a simple print() utility:</p>\n<pre><code>  template &lt;typename ...Args&gt;\n  void print ( Args&amp;&amp;... args) ;\n</code></pre>\n<p>All of this would work:</p>\n<pre><code>print(\"Word\", 12, 13.0f, true );\n</code></pre>\n<p>Tuple also works (ignore the implementation required):</p>\n<pre><code>auto tup = std::make_tuple(\"A\", true, 42f ) ;    \nprint(\"\\nTuple I can pass it in \", tup );\n</code></pre>\n<p>But none of this works</p>\n<pre><code>print({1,2,3}); // spurious error messages\nprint({1}, {2}, {3}); // also \nprint(\"\\nThe tuple: \", {12, 34, 56 } ) ; //also\n</code></pre>\n<p>The above \"solution\" does not help too:</p>\n<pre><code>template&lt;typename ...Args&gt;\ninline  void print(const std::initializer_list&lt;Args&gt;&amp;... il_);\n</code></pre>\n<p>This (as above) does not give usable print() utility :</p>\n<pre><code>print(\"\\nMy list is:\\t\", {1,2,3,4}) ; // error: function print() does not take 2 arguments?\n</code></pre>\n<p>Is it something obvious that is missing here? I would like to mix anything in the call to print() as it's declaration implies. </p>\n<p>Anybody?</p>\n<p>[Edit 2017-11-08]</p>\n<p>Somebody has suggested </p>\n<pre><code> print(\"\\nMy list is:\\t\", std::initializer_list&lt;int&gt;{1,2,3,4}) ;\n</code></pre>\n<p>And to somewhat remedy the pain of this, I am crushed to admit I have defined this macro \"helper\"</p>\n<pre><code>#define DBJ_IL(T,...) (std::initializer_list&lt;T&gt;{__VA_ARGS__})\n</code></pre>\n<p>Usage:</p>\n<pre><code>print(\"\\nMy list is:\\t\", DBJ_IL(int,1,2,3,4)) ;\n</code></pre>\n<p>But alas, MSVC 14.11.25503 (the latest as of time of this writing) can not compile this. With errors coming from </p>\n<pre><code>    1&gt;c:\\program files (x86)\\microsoft visual \n    studio\\2017\\community\\vc\\tools\\msvc\\14.11.25503\\include\\utility(415): \n    error C2027: use of undefined type 'std::tuple_size&lt;_Ty&gt;'\n   1&gt;        with\n   1&gt;        [\n   1&gt;            _Ty=std::initializer_list&lt;int&gt;\n   1&gt;        ]\n   1&gt;c:\\program files (x86)\\microsoft visual \n      studio\\2017\\community\\vc\\tools\\msvc\\14.11.25503\\include\\utility(415): \n      note: see declaration of 'std::tuple_size&lt;_Ty&gt;'\n   1&gt;        with\n   1&gt;        [\n   1&gt;            _Ty=std::initializer_list&lt;int&gt;\n   1&gt;        ]\n   1&gt;c:\\program files (x86)\\microsoft visual \n    studio\\2017\\community\\vc\\tools\\msvc\\14.11.25503\\include\\tuple(1051): \n     note: see reference to variable template 'const ::size_t \n     tuple_size_v&lt;std::initializer_list&lt;int&gt; &gt;' being compiled\n</code></pre>\n<p>I am sure nobody want's the rest of the MSVC error dump ...\nIs it me or is it them?</p>\n<p>Doing the print() as generic lambda does not solve anything of course.</p>\n<pre><code>/*\nforget templates\n*/\nnamespace dbj { namespace {\n  auto print = [](auto... param)\n  {\n   if constexpr (sizeof...(param) &gt; 0) {\n    char dummy[sizeof...(param)] = { \n          (( std::cout &lt;&lt; param), 0)... \n        };\n     }\n  };\n} }\n</code></pre>\n<p>Even if one passes single and simple init list this wont compile with the same error as above ...</p>\n<pre><code> dbj::print({1,2,3}) ; // msvc compilation error\n</code></pre>\n<p>I know C++17 type deduction of init lists is strengthened and improved, but I can not see in there anything to help me understand is this doable at all?</p>\n<p>At last it seems it should be.</p>\n", "OwnerUserId": "5560811", "LastEditorUserId": "5560811", "LastEditDate": "2017-11-08T12:51:43.373", "Id": "47159747", "Score": "2", "CreationDate": "2017-11-07T13:56:44.127", "LastActivityDate": "2017-11-08T12:51:43.373"}, "20059061": {"CommentCount": "0", "ViewCount": "1224", "CreationDate": "2013-11-18T22:14:07.197", "LastActivityDate": "2017-11-08T12:51:43.373", "Title": "Having trouble passing multiple initializer lists to variadic function template", "AcceptedAnswerId": "20059108", "PostTypeId": "1", "Id": "20059061", "Score": "9", "Body": "<p>I don't understand the error message when trying to pass a variable number of initializer lists:</p>\n<pre><code>template&lt;typename... Values&gt;\nvoid foo(Values...)\n{\n}\n\nint main()\n{\n    foo(1, 2, 3, \"hello\", 'a');   // OK\n\n    foo({1}, {2, 3});             // ERROR\n}\n</code></pre>\n<p>The error message complains about too many arguments:</p>\n<pre><code>prog.cpp: In function \u2018int main()\u2019:\nprog.cpp:9:20: error: too many arguments to function\n                      \u2018void foo(Values ...) [with Values = {}]\u2019\n     foo({1}, {2, 3});\n                    ^\nprog.cpp:2:6: note: declared here\n void foo(Values...)\n      ^\n</code></pre>\n<p>However, should I not be able to pass as many arguments as I want? [<a href=\"http://ideone.com/NiLIJu\">ideone link</a>]</p>\n", "Tags": "<c++><templates><c++11><variadic-templates><initializer-list>", "OwnerUserId": "252000", "AnswerCount": "4"}, "23745458": {"ParentId": "20059061", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The problem is indeed deducibility, as mentioned by other answers. Instead of providing a second function taking an initializer_list, you may specify the type of the argument to foo when calling the function:</p>\n<pre><code>#include &lt;initializer_list&gt;\n\ntemplate&lt;typename... Values&gt;\nvoid foo(Values...)\n{\n}\n\nint main()\n{\n  foo(1, 2, 3, \"hello\", 'a');\n  foo(std::initializer_list&lt;int&gt;{1}, std::initializer_list&lt;int&gt;{2, 3});\n}\n</code></pre>\n<p>Deciding how to treat each parameter, is another question, however.</p>\n<p>[EDIT]: Idea is taken from <a href=\"https://stackoverflow.com/questions/11820981/stdshared-ptr-and-initializer-lists\">std::shared_ptr and initializer lists</a></p>\n", "OwnerUserId": "3310709", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:00:53.937", "Id": "23745458", "Score": "2", "CreationDate": "2014-05-19T19:13:33.473", "LastActivityDate": "2014-05-19T19:13:33.473"}, "20059253": {"ParentId": "20059061", "CommentCount": "1", "Body": "<p>The issue is not with the varadic arguments, but that the compiler cannot deduce the type of a brace enclosed initializer list, except for the case where you've declare the parameter of <code>std::initializer_list&lt;T&gt;</code></p>\n<blockquote>\n<p id=\"so_20059061_20059253_0\">\u00a7 14.8.2.1 Template argument deduction is done by comparing each function\n  template parameter type (call it P) with the type of the corresponding\n  argument of the call (call it A) as described below. If removing\n  references and cv-qualifiers from P gives std::initializer_list\n  for some P0 and the argument is an initializer list (8.5.4), then\n  deduction is performed instead for each element of the initializer\n  list, taking P0 as a function template parameter type and the\n  initializer element as its argument. <strong>Otherwise, an initializer list\n  argument causes the parameter to be considered a non-deduced context</strong>\n  (14.8.2.5). </p>\n</blockquote>\n<p>There's even an example right below</p>\n<pre><code>template&lt;class T&gt; void g(T);\ng({1,2,3}); // error: no argument deduced for T\n</code></pre>\n", "OwnerUserId": "862231", "PostTypeId": "2", "Id": "20059253", "Score": "7", "CreationDate": "2013-11-18T22:26:04.493", "LastActivityDate": "2013-11-18T22:26:04.493"}, "bq_ids": {"n4140": {"so_20059061_20059253_0": {"section_id": 302, "quality": 0.9272727272727272, "length": 51}}, "n3337": {"so_20059061_20059253_0": {"section_id": 293, "quality": 0.9272727272727272, "length": 51}}, "n4659": {"so_20059061_20059253_0": {"section_id": 309, "quality": 0.9272727272727272, "length": 51}}}, "20059108": {"ParentId": "20059061", "CommentCount": "6", "Body": "<p>The problem is likely deducibility. <code>{}</code> could be uniform initializers to any of the arguments. </p>\n<p>This works:</p>\n<pre><code>#include &lt;initializer_list&gt;\n\ntemplate&lt;typename... Values&gt;\nvoid foo(std::initializer_list&lt;Values&gt;... args)\n{\n}\n\ntemplate&lt;typename... Values&gt;\nvoid foo(Values&amp;&amp;... args)\n{\n}\n\nint main()\n{    \n    foo(1, 2, 3, \"hello\", 'a');\n    foo({1}, {2, 3});\n}\n</code></pre>\n<p>See it <strong><a href=\"http://coliru.stacked-crooked.com/a/133605bb4d22e433\">Live on Coliru</a></strong></p>\n", "OwnerUserId": "85371", "PostTypeId": "2", "Id": "20059108", "Score": "10", "CreationDate": "2013-11-18T22:17:25.870", "LastActivityDate": "2013-11-18T22:17:25.870"}});