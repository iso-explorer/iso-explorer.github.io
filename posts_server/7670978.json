post_cb({"7671418": {"ParentId": "7670978", "CommentCount": "0", "Body": "<p>The definition changed slightly in the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_7670978_7671418_0\"><strong>7.3.1.1 Unnamed namespaces [namespace.unnamed]</strong></p>\n<p id=\"so_7670978_7671418_1\"><strong>1/</strong> An unnamed-namespace-definition behaves as if it were replaced by</p>\n</blockquote>\n<pre><code>inlineoptnamespace unique { /* empty body */ }\nusing namespace unique ;\nnamespace unique { namespace-body }\n</code></pre>\n<blockquote>\n<p id=\"so_7670978_7671418_2\">where inline appears if and only if it appears in the unnamed-namespace-definition, all occurrences of unique in a translation unit are replaced by the same identifier, and this identifier differs from all other identifiers in the entire program.94 <em>[ Example:</em></p>\n</blockquote>\n<pre><code>namespace { int i; } // unique ::i\nvoid f() { i++; } // unique ::i++\n\nnamespace A {\n  namespace {\n    int i; // A:: unique ::i\n    int j; // A:: unique ::j\n  }\n  void g() { i++; } // A:: unique ::i++\n}\n\nusing namespace A;\n\nvoid h() {\n  i++; // error: unique ::i or A:: unique ::i\n  A::i++; // A:: unique ::i\n  j++; // A:: unique ::j\n}\n</code></pre>\n<blockquote>\n<p id=\"so_7670978_7671418_3\"><em>\u2014end example ]</em></p>\n</blockquote>\n", "OwnerUserId": "147192", "PostTypeId": "2", "Id": "7671418", "Score": "2", "CreationDate": "2011-10-06T07:39:15.800", "LastActivityDate": "2011-10-06T07:39:15.800"}, "7671006": {"ParentId": "7670978", "CommentCount": "5", "Body": "<p>This is legal. You can reference <code>Foo</code> anywhere inside the translation-unit.</p>\n<p>From the C++03-standard, Section 7.3.1.1:</p>\n<blockquote>\n<p id=\"so_7670978_7671006_0\">An unnamed-namespace-definition behaves as if it were replaced by</p>\n<pre><code>namespace unique { /* empty body */ } using namespace unique;\nnamespace unique { namespace-body } \n</code></pre>\n<p id=\"so_7670978_7671006_1\">where all occurrences of <code>unique</code> in\n  a translation unit are replaced by the same identifier and this\n  identifier differs from all other identifiers in the entire program.</p>\n<p id=\"so_7670978_7671006_2\">The use of the static keyword is deprecated when declaring objects in\n  a namespace scope; the unnamed-namespace provides a superior\n  alternative.</p>\n</blockquote>\n", "OwnerUserId": "160206", "PostTypeId": "2", "Id": "7671006", "Score": "4", "CreationDate": "2011-10-06T06:43:35.673", "LastActivityDate": "2011-10-06T06:43:35.673"}, "bq_ids": {"n4140": {"so_7670978_7671006_1": {"section_id": 5482, "quality": 0.9333333333333333, "length": 14}, "so_7670978_7671418_2": {"section_id": 5482, "quality": 0.8571428571428571, "length": 18}, "so_7670978_7671418_1": {"section_id": 5482, "quality": 1.0, "length": 4}, "so_7670978_7671006_0": {"section_id": 5482, "quality": 1.0, "length": 4}}, "n3337": {"so_7670978_7671006_1": {"section_id": 5268, "quality": 0.9333333333333333, "length": 14}, "so_7670978_7671418_2": {"section_id": 5268, "quality": 0.8571428571428571, "length": 18}, "so_7670978_7671418_1": {"section_id": 5268, "quality": 1.0, "length": 4}, "so_7670978_7671006_0": {"section_id": 5268, "quality": 1.0, "length": 4}}, "n4659": {"so_7670978_7671006_1": {"section_id": 6917, "quality": 0.8666666666666667, "length": 13}, "so_7670978_7671418_2": {"section_id": 6917, "quality": 0.8095238095238095, "length": 17}, "so_7670978_7671418_1": {"section_id": 6917, "quality": 1.0, "length": 4}, "so_7670978_7671006_0": {"section_id": 6917, "quality": 1.0, "length": 4}}}, "7670978": {"CommentCount": "2", "ViewCount": "461", "CreationDate": "2011-10-06T06:39:12.390", "LastActivityDate": "2011-10-06T07:41:30.153", "Title": "C++ namespace.... anonymous namespace is legal?", "AcceptedAnswerId": "7671002", "PostTypeId": "1", "Id": "7670978", "Score": "4", "Body": "<blockquote>\n<p id=\"so_7670978_7670978_0\">namespace  {     int Foo (int a) ;  }</p>\n</blockquote>\n<p>Like this. Is this code snippet legal?</p>\n<p>Is this legal? and, can I reference Foo in anywhere? or only certain domain?</p>\n<p>Thank you.</p>\n", "Tags": "<c++><namespaces>", "OwnerUserId": "947301", "AnswerCount": "3"}, "7671002": {"ParentId": "7670978", "PostTypeId": "2", "CommentCount": "12", "Body": "<p>It is legal, You can use <code>Foo</code> anywhere in the same <strong><a href=\"https://stackoverflow.com/questions/1106149/what-is-a-translation-unit-in-c\">Translation Unit</a></strong>.  </p>\n<p>Anonymous namespace is the standard prescribed way of saying <code>static</code> on variables to limit their scope to the same Translation unit.</p>\n<p><strong>C++03 Standard section 7.3.1.1 Unnamed namespaces</strong></p>\n<p>para 2:</p>\n<blockquote>\n<p id=\"so_7670978_7671002_0\">The use of the static keyword is deprecated when declaring objects in a namespace scope, the unnamed-namespace provides a superior alternative.</p>\n</blockquote>\n<hr>\n<p><strong>Update:</strong><br>\nAs @Matthieu M. correctly points out in the comments, and <strong><a href=\"https://stackoverflow.com/questions/7670978/c-namespace-anonymous-namespace-is-legal/7671418#7671418\">his answer</a></strong> The C++11 Standard removed the above quote from C++03 Standard, which implies that the <code>static</code> keyword is not deprecated when declaring objects in a namespace scope, Anonymous or Unnamed namespaces are still valid nevertheless.</br></p>\n</hr>", "OwnerUserId": "452307", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:03:35.447", "Id": "7671002", "Score": "8", "CreationDate": "2011-10-06T06:43:15.827", "LastActivityDate": "2011-10-06T07:41:30.153"}});