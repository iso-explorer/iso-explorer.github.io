post_cb({"bq_ids": {"n4140": {"so_15462336_15462337_1": {"length": 47, "quality": 0.94, "section_id": 299}}, "n3337": {"so_15462336_15462337_1": {"length": 38, "quality": 0.76, "section_id": 290}}, "n4659": {"so_15462336_15462337_1": {"length": 47, "quality": 0.94, "section_id": 306}}}, "15462337": {"Id": "15462337", "PostTypeId": "2", "Body": "<p><em>[NOTE: This was not originally meant to be a self-answered question, but I happened to find out the solution while crafting the question]</em></p>\n<hr>\n<blockquote>\n<p id=\"so_15462336_15462337_0\">Is there any guarantee on the order in which substitution will be performed for the function parameters and return types?</p>\n</blockquote>\n<p><strong>Not in the current standard.</strong> </p>\n<p>However, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1227\" rel=\"nofollow noreferrer\"><strong>this Defect Report</strong></a> (courtesy of <a href=\"https://stackoverflow.com/u/500104\">Xeo</a>) shows that this is indeed intended to be the case. Here is the proposed new wording for Paragraph 14.8.2/7 of the C++11 Standard (which has become part of the <a href=\"http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2012/n3485.pdf\" rel=\"nofollow noreferrer\">n3485 draft</a>):</p>\n<blockquote>\n<p id=\"so_15462336_15462337_1\">The substitution occurs in all types and expressions that are used in the function type and in template\n  parameter declarations. The expressions include not only constant expressions such as those that appear in\n  array bounds or as nontype template arguments but also general expressions (i.e., non-constant expressions)\n  inside sizeof, decltype, and other contexts that allow non-constant expressions. <strong>The substitution proceeds\n  in lexical order and stops when a condition that causes deduction to fail is encountered</strong>. [...]</p>\n</blockquote>\n<p>As correctly pointed out by <a href=\"https://stackoverflow.com/users/734069/nicol-bolas\">Nicol Bolas</a> in the comments to the question, <em>lexical order</em> means that a trailing return type would be substituted <em>after</em> the parameter types, as shown in <a href=\"http://liveworkspace.org/code/4cvdpz$64\" rel=\"nofollow noreferrer\">this live example</a>.</p>\n</hr>", "LastEditorUserId": "-1", "LastActivityDate": "2013-03-17T16:04:12.737", "Score": "13", "CreationDate": "2013-03-17T15:11:22.683", "ParentId": "15462336", "CommentCount": "1", "LastEditDate": "2017-05-23T12:04:54.800", "OwnerUserId": "1932150"}, "15462336": {"ViewCount": "234", "Body": "<p>Consider this function template:</p>\n<pre><code>template&lt;typename T&gt;\ntypename soft_error&lt;T&gt;::type foo(T, typename hard_error&lt;T&gt;::type)\n{ }\n</code></pre>\n<p>After deducing type <code>T</code> from the type of the first argument in the call to <code>foo()</code>, the compiler will proceed to substitute <code>T</code> and instantiate the function signature. </p>\n<p>If substitution for the return type gets executed first, causing a simple substitution failure, the compiler will discard this function template when computing the overload set and search for other viable overloads (SFINAE).</p>\n<p>On the other hand, if substitution for the second function parameter occurs first, causing a hard error (e.g. because of a substitution failure in a non-immediate context), the entire compilation would fail.</p>\n<p><strong>QUESTION:</strong> <em>Is there any guarantee on the order in which substitution will be performed for the function parameters and return types?</em></p>\n<hr>\n<p><strong>NOTE:</strong> <a href=\"http://liveworkspace.org/code/4cvdpz%2464\">This example</a> seems to show that on all major compilers (VC11 was tested separately and gave identical results) substitution for the return type occurs before substitution for the parameter types.</p>\n</hr>", "AcceptedAnswerId": "15462337", "Title": "Is there any guarantee on the order of substitution in a function template after type deduction?", "CreationDate": "2013-03-17T15:11:22.683", "Id": "15462336", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2013-03-17T16:04:12.737", "Score": "10", "OwnerUserId": "1932150", "Tags": "<c++><templates><c++11><overloading><sfinae>", "AnswerCount": "1"}});