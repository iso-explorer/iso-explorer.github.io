post_cb({"6865263": {"CreationDate": "2011-07-28T20:28:46.903", "ViewCount": "189", "Id": "6865263", "AcceptedAnswerId": "6865301", "Score": "0", "Title": "binding of lvalue into rvalue reference move ctor and return of function", "CommentCount": "3", "Body": "<p>According to what I know it is not valid to bind a lvalue into a rvalue reference.\nAnd secondly, a lvalue expression is recognizable by the fact it can be prefix by adress-of operator, (&amp;)</p>\n<p>I'm a little bit in trouble if this two sentences arecorrect with the following codes :</p>\n<pre><code> #include&lt;iostream&gt;\n\nstruct Foo\n{\n    Foo(Foo&amp;&amp; other)\n    {\n        std::cout &lt;&lt; \"move ctor called\";\n    }\n\n    Foo(const Foo&amp; other)\n    {\n        std::cout &lt;&lt; \"copy ctor called\";\n    }\n\n    Foo(){}\n};\n\nFoo return_foo()\n{\n    Foo f;\n    return f;\n}\n\n\nvoid main()\n{  \n    Foo f = return_foo(); // Move ctor is called, but return_foo() is a lvalue ?? \n    std::cin.ignore();    \n}\n</code></pre>\n<p>Where I am wrong ?</p>\n", "Tags": "<c++><c++11><move-semantics>", "LastActivityDate": "2011-07-28T22:38:17.033", "PostTypeId": "1", "AnswerCount": "2", "OwnerUserId": "619570"}, "bq_ids": {"n4140": {"so_6865263_6865301_0": {"length": 20, "quality": 0.8, "section_id": 7230}}, "n3337": {"so_6865263_6865301_0": {"length": 20, "quality": 0.8, "section_id": 6974}}}, "6865301": {"CommentCount": "6", "Body": "<p><code>return_foo()</code> returns a prvalue (because it returns unnamed temporary object). Quote from \u00a73.10/1, emphasis mine:</p>\n<blockquote>\n<p id=\"so_6865263_6865301_0\">A prvalue (\u201cpure\u201d rvalue) is an rvalue that is not an xvalue. [\n  Example: <strong>The result of calling a function whose return type is not a\n  reference is a prvalue.</strong> The value of a literal such as 12, 7.3e5, or\n  true is also a prvalue. \u2014end example ]</p>\n</blockquote>\n", "CreationDate": "2011-07-28T20:33:23.547", "ParentId": "6865263", "Id": "6865301", "LastActivityDate": "2011-07-28T20:33:23.547", "PostTypeId": "2", "Score": "4", "OwnerUserId": "700253"}, "6865589": {"LastActivityDate": "2011-07-28T22:38:17.033", "CommentCount": "3", "Body": "<p>There is a special rule which allows returning a temporary as an rvalue, namely, the following are equivalent - the explicit \"I don't need this anymore\" version:</p>\n<pre><code>T foo()\n{\n  T t(a, b, ...); // constructed somehow\n  /* ... */\n  return std::move(t);\n}\n\nint main()\n{\n  T t = foo(); // we can move-construct this\n}\n</code></pre>\n<p>... and the implicit version:</p>\n<pre><code>T foo()\n{\n  T t(a, b, ...);\n  /* ... */\n  return t;  // implicitly allow moving\n}\n</code></pre>\n<p>All this happens <em>after</em> return-value optimization. This means that returning by value is actually pretty efficient in many situations.</p>\n", "CreationDate": "2011-07-28T20:59:24.017", "LastEditDate": "2011-07-28T22:38:17.033", "ParentId": "6865263", "Id": "6865589", "LastEditorUserId": "596781", "PostTypeId": "2", "Score": "2", "OwnerUserId": "596781"}});