post_cb({"11283977": {"CommentCount": "5", "AcceptedAnswerId": "12429723", "CreationDate": "2012-07-01T17:01:18.673", "LastActivityDate": "2012-09-14T18:04:24.500", "PostTypeId": "1", "ViewCount": "1079", "FavoriteCount": "1", "Title": "which identifiers are available to lambda in constructor initializer list", "Id": "11283977", "Score": "8", "Body": "<p>more to the point, what's wrong with this code:</p>\n<pre><code>#include &lt;assert.h&gt;\n#include &lt;functional&gt;\nusing namespace std;\n\n    template&lt; class BaseObjectId &gt;\n    class Check\n    {\n    protected:\n        Check( function&lt;bool()&gt; const f ) { assert( f() ); }\n    };\n\n    template&lt; int tpMinValue, int tpMaxValue &gt;\n    class IntegerSubrange\n        : private Check&lt; IntegerSubrange&lt; tpMinValue, tpMaxValue &gt; &gt;\n    {\n    private:\n        int     value_;\n\n    public:\n        enum :int { minValue = tpMinValue, maxValue = tpMaxValue };\n\n        static bool rangeContains( int const x )\n        {\n            return (minValue &lt;= x &amp;&amp; x &lt;= maxValue);\n        }\n\n        operator int() const\n        {\n            return value_;\n        }\n\n        void operator/=( int const rhs )\n        {\n            value_ /= rhs;\n            assert( rangeContains( value_ ) );\n        }\n\n        explicit IntegerSubrange( int const value )\n            : Check&lt; IntegerSubrange&lt; tpMinValue, tpMaxValue &gt; &gt;(\n                [=]() -&gt; bool { return rangeContains( value ); }\n                )\n            , value_( value )\n        {}\n    };\n\nint main() {}\n</code></pre>\n<p>Visual C++ reports a <em>syntax error</em>:</p>\n<pre>\nfoo.cpp\nfoo.cpp(41) : error C2059: syntax error : ')'\n        foo.cpp(44) : see reference to class template instantiation 'IntegerSubrange' being compiled\nfoo.cpp(42) : error C2059: syntax error : ','\nfoo.cpp(43) : error C2334: unexpected token(s) preceding '{'; skipping apparent function body\n</pre>\n", "Tags": "<c++><constructor><lambda>", "OwnerUserId": "464581", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_11283977_12429723_0": {"section_id": 440, "quality": 0.7857142857142857, "length": 22}}, "n3337": {"so_11283977_12429723_0": {"section_id": 431, "quality": 0.7857142857142857, "length": 22}}, "n4659": {"so_11283977_12429723_0": {"section_id": 460, "quality": 0.7857142857142857, "length": 22}}}, "12429723": {"ParentId": "11283977", "CommentCount": "1", "Body": "<p>To summarize the comments: <strong>The questioner's code is valid.</strong> Apparently some compilers older than GCC 4.4 or Visual C++ 2011 will reject it, due to those compilers' incomplete support for C++11-style lambdas. But modern compilers (and certainly any compiler that claims to support the new C++11 standard) should handle it just fine.</p>\n<p>To answer your question literally: In a <em>ctor-initializer-list</em>, the same identifiers are available (and refer to the same things) as they would refer to if you moved them inside the curly braces of the constructor function itself. In particular, this means that you can do</p>\n<pre><code>class C {\n    const char *p_ = \"foo\";\n    char c_;\n    C(int): p_(__func__) { }      // referring to \"__func__\"\n    C(double): c_(*this-&gt;p_) { }  // referring to \"this\"\n};\n</code></pre>\n<p>Here's what the Standard has to say on the subject:</p>\n<blockquote>\n<p id=\"so_11283977_12429723_0\">Names in the <em>expression-list</em> or <em>braced-init-list</em> of a <em>mem-initializer</em>\n  are evaluated in the scope of the constructor for which the\n  <em>mem-initializer</em> is specified. ... [<em>Note:</em> Because the <em>mem-initializer</em>\n  are [<em>sic</em>] evaluated in the scope of the constructor, the <code>this</code> pointer can be\n  used in the <em>expression-list</em> of a <em>mem-initializer</em> to refer to the\n  object being initialized. \u2014<em>end note</em>] \u00a0 \u00a0<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf\" rel=\"nofollow\">(N3337 \u00a712.6.2 #12)</a></p>\n</blockquote>\n", "OwnerUserId": "1424877", "PostTypeId": "2", "Id": "12429723", "Score": "4", "CreationDate": "2012-09-14T18:04:24.500", "LastActivityDate": "2012-09-14T18:04:24.500"}});