post_cb({"bq_ids": {"n4140": {"so_7024818_7024859_0": {"length": 33, "quality": 0.825, "section_id": 6020}, "so_7024818_7024843_0": {"length": 10, "quality": 0.8333333333333334, "section_id": 6020}}, "n3337": {"so_7024818_7024859_0": {"length": 33, "quality": 0.825, "section_id": 5788}, "so_7024818_7024843_0": {"length": 10, "quality": 0.8333333333333334, "section_id": 5788}}, "n4659": {"so_7024818_7024859_0": {"length": 34, "quality": 0.85, "section_id": 7519}, "so_7024818_7024843_0": {"length": 10, "quality": 0.8333333333333334, "section_id": 7519}}}, "7024843": {"Id": "7024843", "PostTypeId": "2", "Body": "<p>However the implementation implements them, the results of <code>typeid</code> expressions are lvalues and the lifetime of the objects that those lvalues refer to must last until the end of the program.</p>\n<p>From ISO/IEC 14882:2003 5.2.8 [expr.typeid]:</p>\n<blockquote>\n<p id=\"so_7024818_7024843_0\">The result of a <code>typeid</code> expression is an lvalue [...] The lifetime of the object referred to by the lvalue extends to the end of the program.</p>\n</blockquote>\n", "LastEditorUserId": "19563", "LastActivityDate": "2011-08-11T11:19:01.673", "Score": "10", "CreationDate": "2011-08-11T11:13:52.333", "ParentId": "7024818", "CommentCount": "0", "LastEditDate": "2011-08-11T11:19:01.673", "OwnerUserId": "19563"}, "7024832": {"Id": "7024832", "PostTypeId": "2", "Body": "<p>Its lifetime is the duration of the program. And no matter how many times you write <code>typeid(x)</code>, it will return the same <code>type_info</code> object everytime, for same type.</p>\n<p>That is, </p>\n<pre><code> T x, y;\n const type_info &amp; xinfo = typeid(x);\n const type_info &amp; yinfo = typeid(y);\n</code></pre>\n<p>The references <code>xinfo</code> and <code>yinfo</code> both refer to the same object. So try printing the address to verify it:</p>\n<pre><code> cout &lt;&lt; &amp;xinfo &lt;&lt; endl; //printing the address\n cout &lt;&lt; &amp;yinfo &lt;&lt; endl; //printing the address\n</code></pre>\n<p>Output: </p>\n<pre><code>0x80489c0\n0x80489c0\n</code></pre>\n<p>Note: for your run, the address might be different from the above, but whatever it is, it will be same!</p>\n<p>Demo : <a href=\"http://www.ideone.com/jO4CO\" rel=\"nofollow\">http://www.ideone.com/jO4CO</a></p>\n", "LastEditorUserId": "415784", "LastActivityDate": "2011-08-11T11:18:20.170", "Score": "2", "CreationDate": "2011-08-11T11:12:49.750", "ParentId": "7024818", "CommentCount": "5", "LastEditDate": "2011-08-11T11:18:20.170", "OwnerUserId": "415784"}, "7024818": {"ViewCount": "489", "Body": "<p>If I call <code>typeid</code> and retrieve the address of returned <code>type_info</code>:</p>\n<pre><code>const type_info* info = &amp;( typeid( Something ) );\n</code></pre>\n<p>what's the lifetime of the object returned by <code>typeid</code> and how long will the pointer to that object remain valid?</p>\n", "AcceptedAnswerId": "7024843", "Title": "What's the lifetime of the object returned by typeid operator?", "CreationDate": "2011-08-11T11:11:20.273", "Id": "7024818", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2011-08-11T11:19:01.673", "Score": "4", "OwnerUserId": "57428", "Tags": "<c++><visual-c++><rtti><typeid><typeinfo>", "AnswerCount": "3"}, "7024859": {"Id": "7024859", "PostTypeId": "2", "Body": "<p>From 5.2.8.1 of C++ 2003 standard:</p>\n<blockquote>\n<p id=\"so_7024818_7024859_0\">The result of a typeid expression is an lvalue of static type const\n  std::type_info (18.5.1) and dynamic type const std::type_info or const\n  name where name is an implementation-defined class derived from\n  std::type_info which preserves the behavior described in 18.5.1.61)\n  <strong><em>The lifetime of the object referred to by the lvalue extends to the\n  end of the program</em></strong>. Whether or not the destructor is called for the\n  type_info object at the end of the program is unspecified.</p>\n</blockquote>\n", "LastActivityDate": "2011-08-11T11:14:55.973", "Score": "5", "CreationDate": "2011-08-11T11:14:55.973", "ParentId": "7024818", "CommentCount": "0", "OwnerUserId": "469935"}});