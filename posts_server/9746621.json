post_cb({"bq_ids": {"n4140": {"so_9746621_9746668_0": {"length": 5, "quality": 1.0, "section_id": 705}}, "n3337": {"so_9746621_9746668_0": {"length": 5, "quality": 1.0, "section_id": 695}}, "n4659": {"so_9746621_9746668_0": {"length": 4, "quality": 0.8, "section_id": 734}}}, "9746704": {"Id": "9746704", "PostTypeId": "2", "Body": "<p>The <code>max_size</code> method of <code>std::array</code> only exists to make it look like the other STL containers. By having a common interface with other containers, much of the same code can be used for <code>array</code>s, <code>vector</code>s and <code>list</code>s.</p>\n<p>Of course, since the size of an <code>array&lt;T, N&gt;</code> is part of the type, the <code>size</code> and <code>max_size</code> must both return the same value, <code>N</code>.</p>\n", "LastActivityDate": "2012-03-17T02:22:23.367", "CommentCount": "0", "CreationDate": "2012-03-17T02:22:23.367", "ParentId": "9746621", "Score": "3", "OwnerUserId": "616815"}, "9746668": {"Id": "9746668", "PostTypeId": "2", "Body": "<p>As specified in the standard, <code>max_size()</code> is the maximum number of elements that the container can possibly store:</p>\n<blockquote>\n<p id=\"so_9746621_9746668_0\"><code>distance(begin(), end())</code> for the largest possible container</p>\n</blockquote>\n<p>(C++11, [container.requirements.general], table 96)</p>\n<p>For <code>array</code>, which is a fixed-size container, it coincides with <code>size()</code>, while it is completely different for dynamic containers, like <code>std::vector</code> (where it will return something like the size of the virtual address space divided by the size of the element).</p>\n<p>You can find all the specifications of the containers in the C++ standard (which is quite expensive, but its drafts are freely available online), although it's just a normative specification which tends not to explain well the rationale behind some decisions (and is deliberately vague on the implementation of the containers).</p>\n<p>Still, for the difference between <code>std::array</code> and <code>std::vector</code>, it's because <code>std::array</code> is intended to store the elements without resorting to the heap, providing a same-performance alternative to a local C-style array, while <code>std::vector</code> uses the heap to store the elements, which allows much more flexibility but comes at a cost. See <a href=\"https://stackoverflow.com/a/4424658/214671\">this answer of mine</a> for a more detailed comparison between <code>std::array</code> and <code>std::vector</code>.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2012-03-17T02:14:00.160", "Score": "5", "CreationDate": "2012-03-17T02:14:00.160", "ParentId": "9746621", "CommentCount": "0", "OwnerUserId": "214671", "LastEditDate": "2017-05-23T12:11:25.637"}, "9748051": {"Id": "9748051", "PostTypeId": "2", "Body": "<p>Re: I initially thought max_size() is the actual size of the array and size() is the number of elements explicitly stored. </p>\n<p>I think u confused vector::capacity() with max_size().\nAnd in my computer(32-bit),for int type max_size=1073741823,for double type max_size=536870911.which means 4G=2^32=1073741823*sizeof(int)=536870911*sizeof(double)\u3002\nSo, max_size=the max size u can used in ur computer(useless!just for compatible):)</p>\n<p>Re: Is there any place where I can read the design specs of containers like in Java(not the functional description)?\nMaybe &gt;The Annotated STL Sources&lt; is not best for u,but it's a good book for STL.</p>\n", "LastActivityDate": "2012-03-17T07:06:04.957", "CommentCount": "2", "CreationDate": "2012-03-17T07:06:04.957", "ParentId": "9746621", "Score": "1", "OwnerUserId": "1102271"}, "9746621": {"ViewCount": "869", "Body": "<p>I am just exploring the STL containers in C++. Have some questions...\nThere are two member functions max_size() and size(). They seem to be doing the same thing. I initially thought max_size() is the actual size of the array and size() is the number of elements explicitly stored. But as I tested it out, it's not the case. Then why two different functions?</p>\n<p>Is there any place where I can read the design specs of containers like in Java(not the functional description)? I seem to have many questions such as why the std::array size is fixed but can't be changed dynamically like std::vector etc. Obviously there has to one reason or another for such design decisions. It would be useful to read such design specs to understand such limitations. I have one old \"Effective STL\" which doesn't include std::array. I believe Scott meyers is yet to include std::array in it.</p>\n", "AcceptedAnswerId": "9746704", "Title": "STL container class: array", "CreationDate": "2012-03-17T02:04:46.380", "Id": "9746621", "CommentCount": "1", "PostTypeId": "1", "LastActivityDate": "2012-03-17T07:06:04.957", "Score": "1", "OwnerUserId": "1275169", "Tags": "<c++><stl>", "AnswerCount": "3"}});