post_cb({"37737049": {"ParentId": "37736780", "PostTypeId": "2", "CommentCount": "9", "Body": "<p>The use for operator overloads is always questionable, and should be mostly consistent with the behavior of operators as seen with the intrinsic types.</p>\n<p>Thus the overloading of the dereferencing operators <code>-&gt;</code> and unary <code>*</code> should behave like they are used with pointers:</p>\n<p>Citing from <a href=\"https://stackoverflow.com/questions/4421706/operator-overloading/4421719#4421719\">Operator overloading</a>:</p>\n<blockquote>\n<h3>Operators for Pointer-like Types</h3>\n<p id=\"so_37736780_37737049_0\">For defining your own iterators or smart pointers, you have to overload the unary prefix dereference operator * and the binary infix pointer member access operator -&gt;:</p>\n<pre><code>class my_ptr {\n        value_type&amp; operator*();\n  const value_type&amp; operator*() const;\n        value_type* operator-&gt;();\n  const value_type* operator-&gt;() const;\n};\n</code></pre>\n<p id=\"so_37736780_37737049_1\">Note that these, too, will almost always need both a const and a non-const version. <em>For the -&gt; operator value_type must be of class (or struct or union) type, otherwise their implementation results in a compile-time error.</em><sup>1</sup></p>\n<p id=\"so_37736780_37737049_2\">The unary address-of operator should never be overloaded.</p>\n<p id=\"so_37736780_37737049_3\">For operator-&gt;*() see <a href=\"https://stackoverflow.com/q/8777845/140719\">this question</a>. It's rarely used and thus rarely ever &gt; overloaded. In fact, even iterators do not overload it.</p>\n</blockquote>\n<hr>\n<p>Obviously you can do that overload with <code>double</code> as return type, but that's no different from possible (non-sensical, less useful) overloads for other standard operators like e.g.</p>\n<pre><code>#include &lt;type_traits&gt;\n\nstruct S { \n    constexpr double operator-&gt;() noexcept {\n        return 3.14;\n    }\n    void operator=(const S&amp; rhs) {}\n // ^^^^\n    void operator&lt;(const S&amp; rhs) {}\n // ^^^^\n};\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/2dcec301da5bd597\" rel=\"nofollow noreferrer\"><kbd>Demo</kbd></a></p>\n<pre><code>int main() {\n    static_assert(3.14 == S{}.operator-&gt;(), \"!\");\n}\n</code></pre>\n<hr>\n<p>Your cite</p>\n<blockquote>\n<blockquote>\n<p id=\"so_37736780_37737049_5\">[...] The process repeats until an operator-&gt; function returns a value of non-class type.</p>\n</blockquote>\n</blockquote>\n<p>merely means that the dereferencing operation will stop as soon a <em>non-class type</em> is received as return type. Thus returning an intrinsic type will stop calling the dereference operation.<br>\nIf a pointer is returned, or another type that overloads <code>-&gt;</code> that operator will be called automatically upon the returned type.</br></p>\n<hr>\n<p><sup>1</sup>\n<sub>Not so sure if this statement is actually valid, my and OPs example seems to prove otherwise.</sub></p>\n</hr></hr></hr>", "OwnerUserId": "1413395", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T11:58:43.920", "Id": "37737049", "Score": "5", "CreationDate": "2016-06-09T22:12:13.567", "LastActivityDate": "2016-06-09T23:02:16.153"}, "bq_ids": {"n4140": {"so_37736780_37736780_0": {"section_id": 589, "quality": 0.9, "length": 9}, "so_37736780_37737049_5": {"section_id": 589, "quality": 0.9, "length": 9}, "so_37736780_37737049_4": {"section_id": 589, "quality": 0.9, "length": 9}}, "n3337": {"so_37736780_37736780_0": {"section_id": 579, "quality": 0.9, "length": 9}, "so_37736780_37737049_5": {"section_id": 579, "quality": 0.9, "length": 9}, "so_37736780_37737049_4": {"section_id": 579, "quality": 0.9, "length": 9}}, "n4659": {"so_37736780_37736780_0": {"section_id": 612, "quality": 0.9, "length": 9}, "so_37736780_37737049_5": {"section_id": 612, "quality": 0.9, "length": 9}, "so_37736780_37737049_4": {"section_id": 612, "quality": 0.9, "length": 9}}}, "37737014": {"ParentId": "37736780", "PostTypeId": "2", "CommentCount": "3", "Body": "<blockquote>\n<p id=\"so_37736780_37737014_0\">What is the real purpose of letting the programmers return a double or a float from this operator?<br>\n  What could be a possible use for them?</br></p>\n</blockquote>\n<p>It works nicely with <code>std::map::iterator</code>. You can use:</p>\n<pre><code>std::map&lt;int, int&gt; m = { ... };\n\n...\n\nauto it  = m.find(10);\nif ( it != m.end() )\n{\n   int val = iter-&gt;second;\n}\n</code></pre>\n", "OwnerUserId": "434551", "LastEditorUserId": "434551", "LastEditDate": "2016-06-09T22:11:13.327", "Id": "37737014", "Score": "1", "CreationDate": "2016-06-09T22:09:16.483", "LastActivityDate": "2016-06-09T22:11:13.327"}, "37736780": {"CommentCount": "6", "ViewCount": "120", "PostTypeId": "1", "LastEditorUserId": "4987285", "CreationDate": "2016-06-09T21:52:03.140", "LastActivityDate": "2016-06-10T05:37:30.873", "Title": "operator-> repeats until it returns a value of non-class type", "AcceptedAnswerId": "37737049", "LastEditDate": "2016-06-10T05:37:30.873", "Id": "37736780", "Score": "4", "Body": "<p>According to <a href=\"http://eel.is/c++draft/over.match.oper#8\" rel=\"nofollow\">13.3.1.2/8</a>, or better <a href=\"http://eel.is/c++draft/over.match.oper#footnote-129\" rel=\"nofollow\">footnote-129</a> (emphasis mine):</p>\n<blockquote>\n<p id=\"so_37736780_37736780_0\">[...] The process repeats until an operator-&gt; function <strong>returns a value of non-class type</strong>.</p>\n</blockquote>\n<p>I thought I knew how <code>operator-&gt;</code> works (let me say, its <em>recursive</em> way based on the return type), but I see that I'm completely unaware about how it <em>actually</em> works (I mean, its <em>return type</em>).</p>\n<p>When I found it, I wondered if one can really define and use something like a <code>double operator-&gt;()</code> for a generic struct <code>S</code>, for I've never used such an operator this way.<br>\nAs an example, consider the code below:</br></p>\n<pre><code>struct S { \n    constexpr double operator-&gt;() noexcept {\n        return 3.14;\n    }\n};\n\nint main() {\n    static_assert(3.14 == S{}.operator-&gt;(), \"!\");\n}\n</code></pre>\n<p>The syntax is quite ugly and I cannot see any use of such an operator or a similar one.</p>\n<p>What is the real purpose of letting the programmers return a <code>double</code> or a <code>float</code> from this operator?<br>\nWhat could be a possible use for them?</br></p>\n", "Tags": "<c++><operator-overloading><return-type>", "OwnerUserId": "4987285", "AnswerCount": "2"}});