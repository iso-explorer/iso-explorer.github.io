post_cb({"40098140": {"ParentId": "40098080", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Map values are <em>value-initialized</em> by the <code>operator[]</code>, which, for <code>int</code> means zero-initialization.</p>\n<p>As defined by the standard (\u00a723.4.4.3):</p>\n<blockquote>\n<p id=\"so_40098080_40098140_0\"><em>Effects</em>: If there is no key equivalent to x in the map, inserts <code>value_type(x, T())</code> into the map.</p>\n</blockquote>\n<p><code>T()</code> is explained as (\u00a78.5/10):</p>\n<blockquote>\n<p id=\"so_40098080_40098140_1\">An object whose initializer is an empty set of parentheses, i.e., <code>()</code>, shall be value-initialized\n  \u200b</p>\n</blockquote>\n<p>which means (\u00a78.5/8):\n\u200b</p>\n<blockquote>\n<p id=\"so_40098080_40098140_2\">To value-initialize an object of type <code>T</code> means:</p>\n<p id=\"so_40098080_40098140_3\">[...]</p>\n<p id=\"so_40098080_40098140_4\">\u2014 otherwise, the object is zero-initialized.</p>\n</blockquote>\n<p>and <em>zero-initialization</em> is defined as (\u00a78.5/6):</p>\n<blockquote>\n<p id=\"so_40098080_40098140_5\">To zero-initialize an object or reference of type <code>T</code> means:</p>\n<p id=\"so_40098080_40098140_6\">\u2014 if T is a scalar type, the object is set to the value 0 (zero),\n  taken as an integral constant expression, converted to <code>T</code></p>\n<p id=\"so_40098080_40098140_7\">[...]</p>\n</blockquote>\n<p><sub>all quotes taken from n4140</sub></p>\n", "OwnerUserId": "2456565", "LastEditorUserId": "2456565", "LastEditDate": "2016-10-18T01:38:49.837", "Id": "40098140", "Score": "1", "CreationDate": "2016-10-18T01:31:09.150", "LastActivityDate": "2016-10-18T01:38:49.837"}, "40098080": {"CommentCount": "5", "ViewCount": "283", "PostTypeId": "1", "LastEditorUserId": "3309790", "CreationDate": "2016-10-18T01:24:54.900", "LastActivityDate": "2016-10-18T01:46:47.223", "Title": "std::map::operator[]", "AcceptedAnswerId": "40098141", "LastEditDate": "2016-10-18T01:46:47.223", "Id": "40098080", "Score": "2", "Body": "<p>I was doing a simple map program but ended up with this question. The c++ doc says this:</p>\n<p><em>Access element\nIf k matches the key of an element in the container, the function returns a reference to its mapped value.\nIf k does not match the key of any element in the container, the function inserts a new element with that key and returns a reference to its mapped value. Notice that this always increases the container size by one, even if no mapped value is assigned to the element (the element is constructed using its default constructor).</em></p>\n<p>The part I don't really get is where it says \"the element is constructerd using its default constructor\". </p>\n<p>I gave it a try and made this</p>\n<pre><code>std::map&lt;string, int&gt; m;\nm[\"toast\"];\n</code></pre>\n<p>I just wanted to see what value would the mapped element of \"toast\" be. And it ended up being zero, but, why? does the primitive types have a default constructor? or what is happening?</p>\n", "Tags": "<c++><dictionary><initialization><stdmap>", "OwnerUserId": "3487158", "AnswerCount": "2"}, "40098141": {"ParentId": "40098080", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>The statement of \"using its default constructor\" is confusing. More precisely, for <a href=\"http://en.cppreference.com/w/cpp/container/map/operator_at\" rel=\"nofollow\">std::map::operator[]</a>, if the key does not exist, the inserted value will be <a href=\"http://en.cppreference.com/w/cpp/language/value_initialization\" rel=\"nofollow\">value-initialized</a>.</p>\n<blockquote>\n<p id=\"so_40098080_40098141_0\">When the default allocator is used, this results in the key being copy constructed from key and the mapped value being <a href=\"http://en.cppreference.com/w/cpp/language/value_initialization\" rel=\"nofollow\">value-initialized</a>.</p>\n</blockquote>\n<p>For <code>int</code>, it means <a href=\"http://en.cppreference.com/w/cpp/language/zero_initialization\" rel=\"nofollow\">zero-initialization</a>.</p>\n<blockquote>\n<p id=\"so_40098080_40098141_1\">4) otherwise, the object is zero-initialized.</p>\n</blockquote>\n", "OwnerUserId": "3309790", "LastEditorUserId": "3309790", "LastEditDate": "2016-10-18T01:40:51.417", "Id": "40098141", "Score": "2", "CreationDate": "2016-10-18T01:31:10.687", "LastActivityDate": "2016-10-18T01:40:51.417"}, "bq_ids": {"n4140": {"so_40098080_40098140_6": {"section_id": 6143, "quality": 0.5454545454545454, "length": 6}, "so_40098080_40098140_0": {"section_id": 1007, "quality": 0.8888888888888888, "length": 8}, "so_40098080_40098140_1": {"section_id": 3290, "quality": 1.0, "length": 7}, "so_40098080_40098140_2": {"section_id": 3287, "quality": 1.0, "length": 4}, "so_40098080_40098140_5": {"section_id": 3285, "quality": 1.0, "length": 5}}, "n3337": {"so_40098080_40098140_6": {"section_id": 3155, "quality": 1.0, "length": 11}, "so_40098080_40098140_0": {"section_id": 992, "quality": 0.8888888888888888, "length": 8}, "so_40098080_40098140_1": {"section_id": 3160, "quality": 1.0, "length": 7}, "so_40098080_40098140_2": {"section_id": 3157, "quality": 1.0, "length": 4}, "so_40098080_40098140_5": {"section_id": 3155, "quality": 1.0, "length": 5}}, "n4659": {"so_40098080_40098140_0": {"section_id": 802, "quality": 0.5555555555555556, "length": 5}, "so_40098080_40098140_1": {"section_id": 4052, "quality": 1.0, "length": 7}, "so_40098080_40098140_5": {"section_id": 653, "quality": 0.8, "length": 4}}}});