post_cb({"16602251": {"Id": "16602251", "PostTypeId": "2", "Body": "<p>Look at the error message from gcc:</p>\n<pre><code>a.cpp:16: error: call of overloaded \u2018function(double, double)\u2019 is ambiguous\na.cpp:3: note: candidates are: void function(int, int)\na.cpp:9: note:                 void function(float, float)\n</code></pre>\n<p>A call to either function would require truncation, which is why neither is preferred over the other. I suspect you really want <code>void function(double y,double w)</code>. Remember that in <strong>C/C++</strong>, the <em>default floating-point type for literals and parameter passing is double</em>, NOT <strong><em>float</em></strong>.</p>\n<p><strong>UPDATE</strong></p>\n<p>If you really don't want to change the <em>function signature</em> from <strong>float</strong> to <strong>double</strong>, you can always use <em>literals</em> that are typed as <strong>float</strong>. If you add the suffix <strong>f</strong> to the <em>floating point numbers</em>, they will be typed float.</p>\n<p>Your examples would then be <code>function(1.2f, 2f)</code> and <code>function(1, 2.2f)</code>.</p>\n", "LastEditorUserId": "743214", "LastActivityDate": "2013-05-17T07:45:13.387", "Score": "70", "CreationDate": "2013-05-17T05:48:24.130", "ParentId": "16602175", "CommentCount": "3", "OwnerUserId": "1911428", "LastEditDate": "2013-05-17T07:45:13.387"}, "16946255": {"Id": "16946255", "PostTypeId": "2", "Body": "<p>Like others have said, you give <strong>doubles</strong> to your overloaded function which is designed for <strong>floats</strong>. The overloading itself doesn't have any errors.</p>\n<p>Here's the correct use of the overloaded function (notice the 'f'\u00b4s right after the numbers):</p>\n<pre><code>function(1.0f, 2.0f);\n</code></pre>\n", "LastActivityDate": "2013-06-05T17:30:01.263", "CommentCount": "0", "CreationDate": "2013-06-05T17:30:01.263", "ParentId": "16602175", "Score": "1", "OwnerUserId": "2448027"}, "bq_ids": {"n4140": {"so_16602175_16602198_0": {"length": 15, "quality": 1.0, "section_id": 606}, "so_16602175_16602198_2": {"length": 5, "quality": 0.5555555555555556, "section_id": 336}}, "n3337": {"so_16602175_16602198_0": {"length": 15, "quality": 1.0, "section_id": 596}, "so_16602175_16602198_2": {"length": 5, "quality": 0.5555555555555556, "section_id": 326}}, "n4659": {"so_16602175_16602198_0": {"length": 15, "quality": 1.0, "section_id": 632}, "so_16602175_16602198_2": {"length": 5, "quality": 0.5555555555555556, "section_id": 345}}}, "17038171": {"Id": "17038171", "PostTypeId": "2", "Body": "<pre><code>function(1.2,2.2);\n</code></pre>\n<p>Those numbers aren't floats, they are doubles. So this code says:</p>\n<pre><code>double p1 = 1.2;\ndouble p2 = 2.2;\nvoid (*fn)(double /*decltype(p1)*/, double /*decltype(p2)*/) = function;\n</code></pre>\n<p>The compiler is now looking a \"function\" which takes two doubles. There is no exact match. So next it looks for a function which takes an argument that can be cast from doubles. There are two matches.</p>\n<pre><code>function(int, int);\nfunction(float, float);\n</code></pre>\n<p>You have several options.</p>\n<ol>\n<li><p>Add an exact match overload.</p>\n<p>void function(double, double)\n{\n    printf(\"double function\\n\");\n}</p></li>\n<li><p>Use casting.</p>\n<p>function(static_cast(1.2), static_cast(2.2));</p></li>\n<li><p>Call \"function\" with floats instead of doubles:</p>\n<p>function(1.2f, 2.2f);</p></li>\n</ol>\n", "LastActivityDate": "2013-06-11T06:56:14.410", "CommentCount": "0", "CreationDate": "2013-06-11T06:56:14.410", "ParentId": "16602175", "Score": "0", "OwnerUserId": "257645"}, "16866451": {"Id": "16866451", "PostTypeId": "2", "Body": "<p>If you don't want to (as explained in the accepted answer):</p>\n<ul>\n<li>use float literals, e.g. <code>1.2f</code></li>\n<li>or change the existing <code>float</code> overload to <code>double</code></li>\n</ul>\n<p>You can add another overload that calls the float one:</p>\n<pre><code>void function(double y, double w)\n{\n    function((float)y, (float)w);\n}\n</code></pre>\n<p>Your code in <code>main</code> now will call the above function, which will call the <code>float</code> overload.</p>\n", "LastActivityDate": "2013-05-31T21:41:26.857", "CommentCount": "0", "CreationDate": "2013-05-31T21:41:26.857", "ParentId": "16602175", "Score": "7", "OwnerUserId": "1822514"}, "16604311": {"Id": "16604311", "PostTypeId": "2", "Body": "<p>Function overloading in the above example has ambiguous calls because the return type are same and the 2nd argument in the call of function is double, which can be treated as int or float and hence the compiler confuses to which function to execute.</p>\n", "LastActivityDate": "2013-05-17T08:06:48.520", "CommentCount": "1", "CreationDate": "2013-05-17T08:06:48.520", "ParentId": "16602175", "Score": "5", "OwnerUserId": "1738222"}, "16940889": {"Id": "16940889", "PostTypeId": "2", "Body": "<p>By default decimal is considered as double. If you want decimal to be floats you suffix it with f.\nIn your example when you call function(1.2,2.2) the compiler considers the values you have passed it as double and hence you are getting mismatch in function signature.</p>\n<pre><code>function(1.2,1.2) ====&gt; function(double,double)\n</code></pre>\n<p>If you want to retain the function signature you need to use floating point suffix while passing floating point literal.</p>\n<pre><code>function(1.2f,1.2f) ====&gt;   function(float,float).\n</code></pre>\n<p>If you are more interested in knowing about floating point literals you can refer</p>\n<p><a href=\"https://stackoverflow.com/questions/4353780/why-floating-point-value-such-as-3-14-are-considered-as-double-by-default-in-msv\">Why floating point value such as 3.14 are considered as double by default in MSVC?</a></p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2013-06-11T17:30:25.653", "Score": "2", "CreationDate": "2013-06-05T13:12:24.530", "ParentId": "16602175", "CommentCount": "0", "OwnerUserId": "2248845", "LastEditDate": "2017-05-23T11:54:00.683"}, "16917365": {"Id": "16917365", "PostTypeId": "2", "Body": "<p>I hope this help \nThis code is self explaintary for all combination</p>\n<p>You need to send two float to call a float function</p>\n<pre><code>#include&lt;iostream&gt;\n#include&lt;stdio.h&gt;\n\nusing namespace std;\n\n//when arguments are both int\nvoid function(int y,int w) {\n    printf(\"int function\\n\");\n}\n\n//when arguments are both double\nvoid function(double y, double w) {\n    printf(\"double function\\n\");\n}\n\n//when arguments are both float\nvoid function(float y, float w) {\n    printf(\"float function\\n\");\n}\n\n//when arguments are int and float\nvoid function(int y, float x) {\n    printf(\"int float function\\n\");\n}\n\n//when arguments are float and int\nvoid function(float y,int w) {\n    printf(\"float int function\\n\");\n}\n\n//when arguments are int and double\nvoid function(int y, double w) {\n    printf(\"int double function\\n\");\n}\n\n//when arguments are double and int\nvoid function(double y, int x) {\n    printf(\"double int function\\n\");\n}\n\n//when arguments are double and float\nvoid function(double y, float x) {\n    printf(\"double float function\\n\");\n}\n\n//when arguments are float and double\nvoid function(float y, double x) {\n    printf(\"float double function\\n\");\n}\n\n\n\nint main(int argc, char *argv[]) {\n    function(1.2,2.2);\n    function(1.2f,2.2f);\n    function(1,2);\n    function(1.2,2.2f);\n    function(1.2f,2.2);\n    function(1,2.2);\n    function(1,2.2f);\n    function(1.2,2);\n    function(1.2f,2);\n    return 0;\n}\n</code></pre>\n", "LastActivityDate": "2013-06-04T12:05:49.830", "CommentCount": "2", "CreationDate": "2013-06-04T12:05:49.830", "ParentId": "16602175", "Score": "4", "OwnerUserId": "1919092"}, "16848112": {"Id": "16848112", "PostTypeId": "2", "Body": "<p>Just imagine how your arguments would be passed.</p>\n<p>If it is passed as 1.2 and 2.2 to the (int,int) function then it would to truncated to 1 and 2.</p>\n<p>If it is passed as 1.2 and 2.2 to the (float,float) it will be processed as is.</p>\n<p>So here is where the ambiguity creeps in.</p>\n<p>I have found two ways to solve this problem.\nFirst is the use of literals:-</p>\n<pre><code>int main()\n{\n        function(1.2F,2.2F);\n    return 0;\n}\n</code></pre>\n<p>Secondly, and the way I like to do it, It always works (and can also be used for C++'s default conversion and promotion).\nFor int:-</p>\n<pre><code>int main()\n{\nint a=1.2, b=2.2;\n    function(a,b);\n    return 0;\n}\n</code></pre>\n<p>For Float:-</p>\n<pre><code>int main()\n{\nfloat a=1.2, b=2.2;\n    function(a,b);\n    return 0;\n}\n</code></pre>\n<p><em>So instead of using actual DIGITS. It is better to declare them as a type first, then overload!</em></p>\n<p>See now, if you send it as <code>(1.2,2) or (1,2.2)</code> then compiler can simply send it to the int function and it would work.\nHowever, to send it to the float function the compiler would have to promote 2 to float. Promotion only happens when no match is found.</p>\n<p>Refer:-\n<em>Computer Science with C++\nSumita Arora\n<strong>Chapter: Function Overloading</strong></em></p>\n", "LastActivityDate": "2013-05-31T00:42:25.260", "CommentCount": "2", "CreationDate": "2013-05-31T00:42:25.260", "ParentId": "16602175", "Score": "-1", "OwnerUserId": "1902667"}, "16602198": {"Id": "16602198", "PostTypeId": "2", "Body": "<h2>What is operator overloading?</h2>\n<p><a href=\"https://stackoverflow.com/users/140719/sbi\">Sbi's</a> famous <a href=\"https://stackoverflow.com/questions/4421706/operator-overloading\">Operator overloading faq</a> answers this in great detail.</p>\n<h2>Why are the two <code>function</code> versions in OP allowed to exist?</h2>\n<p>Notice they take different function parameter <em>types</em>(<code>int</code> and <code>float</code>) and hence qualify as valid function overloads.</p>\n<h2>What is overload resolution?</h2>\n<p>It is the process of selecting the most appropriate function/operator by the compiler implementation. If a best viable function exists and is unique, overload resolution succeeds and produces it as the result. Otherwise overload resolution fails and the invocation is treated as ill-formed and compiler provides a diagnostic. The compiler uses <a href=\"http://publib.boulder.ibm.com/infocenter/comphelp/v8v101/index.jsp?topic=/com.ibm.xlcpp8a.doc/language/ref/implicit_conversion_sequences.htm\" rel=\"nofollow noreferrer\">implicit conversion sequence</a> to find the best match function.        </p>\n<p>C++03 Standard 13.3.3.1 Implicit Conversions: </p>\n<blockquote>\n<p id=\"so_16602175_16602198_0\">An implicit conversion sequence is a sequence of conversions used to convert an argument in a function call to the type of the corresponding parameter of the function being called. </p>\n</blockquote>\n<p>The implicit conversion sequences can be one of the following categories:      </p>\n<ul>\n<li>A standard conversion sequence(13.3.3.1.1)</li>\n<li>A user-defined conversion sequence(13.3.3.1.2) </li>\n<li>An ellipsis conversion sequence(13.3.3.1.3)</li>\n</ul>\n<p>Note that each of these are ranked to determine the best viable function. The best viable function is the one all whose parameters have either better or equal-ranked implicit conversion sequences than all of the other viable functions.The standard details each of these in detail in respective sections. The standard conversion sequence is relevant to this case, it is summarized as:      </p>\n<p><img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/0tZ4V.png\"/></p>\n<p>With enough background on overloading resolution.<br>\nlet us examine the code examples in OP:</br></p>\n<pre><code>function(1.2,2.2);\n</code></pre>\n<p><strong>Important Rule:</strong> <code>1.2</code> and <code>2.2</code> are literals and they are treated as a <code>double</code> data type.      </p>\n<p>During implicit conversion sequences mapping:<br>\nBoth the function parameter literals with <code>double</code> type need a <em>conversion rank</em> to either call the <code>float</code> or <code>int</code> version and none is a better match than other, they score exactly the same on conversion rank. The compiler is unable to detect the best viable match and it reports an ambiguity.      </br></p>\n<pre><code>function(1.2,2);\n</code></pre>\n<p>During implicit conversion sequence mapping:<br>\nOne of the function parameters <code>2</code> has an <em>exact match</em> with the <code>int</code> function version while another <code>1.2</code> has a <em>conversion rank</em>. For function which takes <code>float</code> as parameters the implicit conversion sequences for both parameters are of <em>conversion rank</em>.<br>\nSo the function which takes <code>int</code> version scores better than the <code>float</code> version and is the best match and gets called.</br></br></p>\n<h2>How to resolve overloading ambiguity errors?</h2>\n<p>If you don't want the implicit conversion sequence mapping to throw you off, just provide functions and call them in such a way so that the parameters are a <em>exact match</em>. Since exact match scores over all others, You have a definite guarantee of your desired function getting called. In your case there are two ways to do this:</p>\n<p><strong>Solution 1:</strong> </p>\n<blockquote>\n<p id=\"so_16602175_16602198_1\">Call the function so that parameters are exact match to the functions available.      </p>\n</blockquote>\n<pre><code>function(1.2f,2.2f);\n</code></pre>\n<p>Since <code>1.2f</code> and <code>2.2f</code> are treated as <code>float</code> types they match exactly to the <code>float</code> function version.</p>\n<p><strong>Solution 2:</strong></p>\n<blockquote>\n<p id=\"so_16602175_16602198_2\">Provide a function overload which exactly matches the parameter type in called function.</p>\n</blockquote>\n<pre><code>function(double, double){}\n</code></pre>\n<p>Since <code>1.2</code> and <code>2.2</code> are treated as <code>double</code> the called function is exact match to this overload.    </p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2013-06-10T09:57:04.090", "Score": "35", "CreationDate": "2013-05-17T05:44:42.620", "ParentId": "16602175", "CommentCount": "0", "OwnerUserId": "452307", "LastEditDate": "2017-05-23T12:25:16.487"}, "16604750": {"Id": "16604750", "PostTypeId": "2", "Body": "<p>When sending a primitive type to a function as argument, if the primitive type you are sending is not exactly the same as it requests, you should always cast it to the requested primitive type.</p>\n<pre><code>int main()\n{\n    function(1.3f,                    2.4f);\n    function(1.3f,                    static_cast&lt;float&gt;(2.4));\n    function(static_cast&lt;float&gt;(1.3), static_cast&lt;float&gt;(2.4));\n    function(static_cast&lt;float&gt;(1),   static_cast&lt;float&gt;(2));\n    return 0;\n}\n</code></pre>\n", "LastActivityDate": "2013-05-17T08:33:41.817", "CommentCount": "1", "CreationDate": "2013-05-17T08:33:41.817", "ParentId": "16602175", "Score": "2", "OwnerUserId": "245376"}, "41889235": {"Id": "41889235", "PostTypeId": "2", "Body": "<p>Try This</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nvoid print(int i){\n    cout &lt;&lt; i &lt;&lt; endl;\n}\n\nvoid print(float i){\n    cout &lt;&lt; i &lt;&lt; endl;\n}\n\nint main(){\n    print(5);\n    print(5.5f);\n    return 0;\n}\n</code></pre>\n<p>In function overloading when float can conflict with other data type in other same name functions then probably this is way to over come it. I tried it worked.</p>\n", "LastActivityDate": "2017-01-27T07:58:44.037", "CommentCount": "0", "CreationDate": "2017-01-27T07:58:44.037", "ParentId": "16602175", "Score": "0", "OwnerUserId": "7477571"}, "16602175": {"ViewCount": "2719", "Body": "<p>I'm trying</p>\n<pre><code>void function(int y,int w)\n{\n    printf(\"int function\");\n\n}\n\n\nvoid function(float y,float w)\n{\n    printf(\"float function\");\n}\n\n\nint main()\n{\n    function(1.2,2.2);\n    return 0;\n}\n</code></pre>\n<p>I get an error error like..</p>\n<pre><code>error C2668: 'function' : ambiguous call to overloaded function\n</code></pre>\n<p>and when I try to call <code>function(1.2,2)</code> or <code>function(1,2.2)</code> it is printing as \"<strong>int function</strong>\"</p>\n<p>Please clarify when will the <code>function(float y,float w)</code> be called?</p>\n", "AcceptedAnswerId": "16602251", "Title": "Strange ambiguous call to overloaded function error", "CreationDate": "2013-05-17T05:42:36.443", "Id": "16602175", "CommentCount": "7", "FavoriteCount": "7", "PostTypeId": "1", "LastEditDate": "2014-10-31T03:14:56.263", "LastEditorUserId": "452307", "LastActivityDate": "2017-01-27T07:58:44.037", "Score": "32", "OwnerUserId": "2206801", "Tags": "<c++><visual-c++>", "AnswerCount": "11"}});