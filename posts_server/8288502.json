post_cb({"8288548": {"ParentId": "8288502", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>Conversions from integers to pointers without casts are also illegal in C.  Most compilers will let you get away with it though.  Clang gives a warning:</p>\n<pre><code>example.c:5:8: warning: incompatible integer to pointer conversion initializing\n      'int *' with an expression of type 'int'\n  int *x = 17;\n       ^   ~~\n</code></pre>\n<p>C99 says in <strong>Section 6.5.4 Cast operators</strong>, paragraph 4:</p>\n<blockquote>\n<p id=\"so_8288502_8288548_0\">Conversions that involve pointers, other than where permitted by the constraints of 6.5.16.1, shall be specified by means of an explicit cast.</p>\n</blockquote>\n<p>6.5.16.1 is the exception for <code>void *</code> converting to other pointers without needing a cast.</p>\n<p>The C++ spec says in <strong>Section 5.4 Explicit type conversion (cast notation)</strong>, paragraph 3:</p>\n<blockquote>\n<p id=\"so_8288502_8288548_1\">Any type conversion not mentioned below and not explicitly defined by the user is ill-formed.</p>\n</blockquote>\n<p>So there you go - illegal in both languages, but for compatibility with lots of older software, a lot of C compilers will let you get away with it.</p>\n", "OwnerUserId": "116908", "LastEditorUserId": "116908", "LastEditDate": "2012-12-18T16:11:44.940", "Id": "8288548", "Score": "16", "CreationDate": "2011-11-27T19:56:01.283", "LastActivityDate": "2012-12-18T16:11:44.940"}, "8288502": {"CommentCount": "3", "AcceptedAnswerId": "8288548", "PostTypeId": "1", "LastEditorUserId": "90511", "CreationDate": "2011-11-27T19:50:14.997", "LastActivityDate": "2015-08-15T16:13:15.193", "LastEditDate": "2011-11-27T19:57:06.197", "ViewCount": "3858", "FavoriteCount": "3", "Title": "Why can I implicitly convert an int literal to an int * in C but not in C++?", "Id": "8288502", "Score": "24", "Body": "<p>I believed that in the following code, C \"automatically casts 17 to an <code>int *</code>\" which, as someone recently pointed out (but did not give the reasons as to why), is wrong.</p>\n<pre><code>int *ptoi = 17; // I assumed that 17 is being automatically casted to int *\n</code></pre>\n<p>I know that if I do the same thing as above in C++, I get an error saying <code>invalid conversion from int to int *</code>. But if I do the following in C++, it works fine:</p>\n<pre><code>int *ptoi = (int *)17;\n</code></pre>\n<p>These are the reasons I thought that in C, the casting was implicit.</p>\n<p>Can someone please explain why, in C++, I have to cast it but in C, it works fine?</p>\n", "Tags": "<c++><c><pointers><casting>", "OwnerUserId": "814849", "AnswerCount": "4"}, "8288565": {"ParentId": "8288502", "PostTypeId": "2", "CommentCount": "7", "Body": "<p>It has been, C has implicit conversions - in my experience pretty much from any integral type to any other integral type. Pointers in C are <strike>considered integral</strike><em><code>scalar</code></em> types.</p>\n<p>In C++, Integral Types are defined as follows:</p>\n<blockquote>\n<p id=\"so_8288502_8288565_0\">Types <code>bool</code>, <code>char</code>, <code>char16_t</code>, <code>char32_t</code>, <code>wchar_t</code>, and the <code>signed</code> and <code>unsigned</code> integer types are collectively\n  called integral types.<sup>48</sup> A synonym for integral type is integer type. The representations of integral types\n  shall define values by use of a pure binary numeration system.<sup>49</sup> [ Example: this International Standard\n  permits 2\u2019s complement, 1\u2019s complement and signed magnitude representations for integral types. \u2014end\n  example ]</p>\n</blockquote>\n<p>The only integral value that can be converted to pointer type in C++ is the <em>null pointer constant</em>, though technically the conversion is to a <code>prvalue</code> of type <code>std::nullptr_t</code>. (para 4.10)</p>\n<p><strong>Final Note</strong></p>\n<p>Instead of fixing it like this:</p>\n<pre><code>int *ptoi = (int *)17;\n</code></pre>\n<p>considering adding the C++-style cast:</p>\n<pre><code>int *ptoi = reinterpret_cast&lt;int*&gt;(17);\n</code></pre>\n<p>to make it clear what kind of conversion you are trying to invoke</p>\n", "OwnerUserId": "85371", "LastEditorUserId": "85371", "LastEditDate": "2011-11-27T20:08:50.053", "Id": "8288565", "Score": "2", "CreationDate": "2011-11-27T19:58:27.507", "LastActivityDate": "2011-11-27T20:08:50.053"}, "8288541": {"ParentId": "8288502", "CommentCount": "0", "Body": "<p>Yes, the casting is implicit in C, although many (all?) compilers give a warning. In C++, no implicit conversion is performed from <code>int</code> to <code>int*</code>, so the explicit cast is required.</p>\n", "OwnerUserId": "428857", "PostTypeId": "2", "Id": "8288541", "Score": "2", "CreationDate": "2011-11-27T19:55:30.623", "LastActivityDate": "2011-11-27T19:55:30.623"}, "8288529": {"ParentId": "8288502", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>The compiler will interpret <code>int *ptoi = 17;</code> as a variable ptoi that points to an integer at location 17 (0x00000011).</p>\n<p>C is simply a completely different language. It may look like C++, but it's not. Different rules apply to both languages.</p>\n<p>I should probably point out that both C and C++ will (as far as I know) make it a pointer to 0x00000011, but C simply complains less, since assigning memory locations is something that's not invalid in C.</p>\n", "OwnerUserId": "377037", "LastEditorUserId": "558732", "LastEditDate": "2015-08-15T16:13:15.193", "Id": "8288529", "Score": "1", "CreationDate": "2011-11-27T19:54:03.340", "LastActivityDate": "2015-08-15T16:13:15.193"}, "bq_ids": {"n4140": {"so_8288502_8288565_0": {"section_id": 7216, "quality": 0.813953488372093, "length": 35}, "so_8288502_8288548_1": {"section_id": 6125, "quality": 0.8888888888888888, "length": 8}}, "n3337": {"so_8288502_8288565_0": {"section_id": 6960, "quality": 0.813953488372093, "length": 35}, "so_8288502_8288548_1": {"section_id": 5889, "quality": 0.8888888888888888, "length": 8}}, "n4659": {"so_8288502_8288565_0": {"section_id": 8725, "quality": 0.8372093023255814, "length": 36}, "so_8288502_8288548_1": {"section_id": 7622, "quality": 0.8888888888888888, "length": 8}}}});