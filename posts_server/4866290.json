post_cb({"bq_ids": {"n4140": {"so_4866290_4866383_2": {"length": 7, "quality": 1.0, "section_id": 5403}, "so_4866290_4866383_1": {"length": 7, "quality": 0.875, "section_id": 7138}, "so_4866290_4866383_0": {"length": 10, "quality": 1.0, "section_id": 5404}}, "n3337": {"so_4866290_4866383_2": {"length": 7, "quality": 1.0, "section_id": 5198}, "so_4866290_4866383_1": {"length": 7, "quality": 0.875, "section_id": 6882}, "so_4866290_4866383_0": {"length": 10, "quality": 1.0, "section_id": 5199}}, "n4659": {"so_4866290_4866383_2": {"length": 7, "quality": 1.0, "section_id": 6851}, "so_4866290_4866383_1": {"length": 5, "quality": 0.625, "section_id": 8638}, "so_4866290_4866383_0": {"length": 9, "quality": 0.9, "section_id": 6853}}}, "4866290": {"ViewCount": "527", "Body": "<p>I'm working on compiling <a href=\"http://cppcheck.sourceforge.net/\" rel=\"nofollow\">Cppcheck</a> on AIX using <code>xlC</code>. Every checker class is derived from a <code>Check</code> class, whose constructor is responsible for registering that type of checker in a global static list.</p>\n<p>Here's the relevant part of the code in question (filenames link to full source on Github):</p>\n<h2><a href=\"https://github.com/danmar/cppcheck/blob/master/lib/check.h\" rel=\"nofollow\">check.h</a></h2>\n<pre><code>class Check {\npublic:\n    Check() {\n        instances().push_back(this);\n        instances().sort();\n    }\n    static std::list&lt;Check *&gt; &amp;instances() {\n        static std::list&lt;Check *&gt; _instances;\n        return _instances;\n    }\n    // ...\n};\n</code></pre>\n<h2><a href=\"https://github.com/danmar/cppcheck/blob/master/lib/checkbufferoverrun.h\" rel=\"nofollow\">checkbufferoverrun.h</a></h2>\n<pre><code>class CheckBufferOverrun: public Check {\n    // ...\n};\n</code></pre>\n<h2><a href=\"https://github.com/danmar/cppcheck/blob/master/lib/checkbufferoverrun.cpp\" rel=\"nofollow\">checkbufferoverrun.cpp</a></h2>\n<pre><code>// Register this check class (by creating a static instance of it)\nnamespace\n{\nCheckBufferOverrun instance;\n}\n</code></pre>\n<p>Notice how the <code>_instances</code> static variable is declared inside a <code>static</code> function in the <em>header</em> file (there is no corresponding <code>check.cpp</code> file). When compiled with <code>g++</code>, the compiler and linker work together to ensure that there is only one implementation of the static <code>instances()</code> function, and therefore only one instance of the static <code>_instances</code> list. All the different checker classes instantiated in different <code>.cpp</code> files get registered in the same <code>_instances</code> list together.</p>\n<p>However, under AIX's <code>xlC</code>, this same code ends up creating a <em>different</em> <code>instances()</code> function for every <code>.cpp</code> file in which it is included, which each having a different static <code>_instances</code> list. So there is no longer a single central <code>_instances</code> list, which causes Cppcheck to not run most of its checks.</p>\n<p>Which compiler's behaviour is correct in this case? </p>\n<p><strong>Update</strong>: This question is not about how to <em>fix</em> the problem, I've already done that. I'm curious about which behaviour is <em>correct</em>.</p>\n", "AcceptedAnswerId": "4866383", "Title": "How many instances are there of static data declared inside a static member function in a header file?", "CreationDate": "2011-02-01T18:08:19.607", "Id": "4866290", "CommentCount": "1", "FavoriteCount": "3", "PostTypeId": "1", "LastEditDate": "2011-02-02T05:32:53.507", "LastEditorUserId": "893", "LastActivityDate": "2011-02-02T08:18:32.177", "Score": "1", "OwnerUserId": "893", "Tags": "<c++><static>", "AnswerCount": "3"}, "4866383": {"Id": "4866383", "PostTypeId": "2", "Body": "<p>g++ has the correct behavior:  there should be exactly one instance of the object.  The C++ Standard says (C++03 7.1.2/4):</p>\n<blockquote>\n<p id=\"so_4866290_4866383_0\">A static local variable in an extern inline function always refers to the same object.</p>\n</blockquote>\n<p>Because the class has external linkage, the static member function also has external linkage, per C++03 3.5/5:</p>\n<blockquote>\n<p id=\"so_4866290_4866383_1\">a member function...has external linkage if the name of the class has external linkage.</p>\n</blockquote>\n<p>Because the member function is defined in the class definition, it is an inline function, per C++03 7.1.2/3:</p>\n<blockquote>\n<p id=\"so_4866290_4866383_2\">A function defined within a class definition is an inline function.</p>\n</blockquote>\n", "LastEditorUserId": "151292", "LastActivityDate": "2011-02-01T18:27:49.287", "Score": "9", "CreationDate": "2011-02-01T18:18:39.803", "ParentId": "4866290", "CommentCount": "0", "LastEditDate": "2011-02-01T18:27:49.287", "OwnerUserId": "151292"}, "4866356": {"Id": "4866356", "PostTypeId": "2", "Body": "<p>Correct it to:</p>\n<pre><code>   static std::list&lt;Check *&gt;&amp; instances();\n\n// check.cpp\n std::list&lt;Check *&gt; &amp; Check::instances()\n {\n     static std::list&lt;Check *&gt; _instances;\n     return _instances;\n }\n</code></pre>\n<p>If you inline the function in the header file, each compilation unit will initially compile its own definition. However at link-time they should be reduced to one instance because of the <a href=\"https://stackoverflow.com/questions/4192170/what-exactly-is-one-definition-rule-in-c\"> One-Definition Rule</a>.</p>\n<p>I am sure you are aware, of course, that your constructor to Check is not thread-safe. Your singleton constructor is also not totally thread-safe because although the ODR ensures the threads between them can only create one instance, the constructor of list is not atomic and therefore I am not sure it is guaranteed to be completely constructed before the other thread sees it.</p>\n<p>For a totally thread-safe way of constructing singletons or non-atomic statics, you can use boost::once.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2011-02-02T08:18:32.177", "Score": "1", "CreationDate": "2011-02-01T18:15:31.333", "ParentId": "4866290", "CommentCount": "0", "LastEditDate": "2017-05-23T11:55:43.513", "OwnerUserId": "442284"}, "4866344": {"Id": "4866344", "PostTypeId": "2", "Body": "<p>In this particular case g++ is correct (assuming that the <code>instances()</code> static member function returns a reference, that is a typo, right?). You might want to move the definition of the <code>instances()</code> function to a cpp file, that should be a work around in xlc.</p>\n", "LastActivityDate": "2011-02-01T18:14:03.087", "Score": "2", "CreationDate": "2011-02-01T18:14:03.087", "ParentId": "4866290", "CommentCount": "1", "OwnerUserId": "36565"}});