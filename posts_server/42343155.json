post_cb({"bq_ids": {"n4140": {"so_42343155_42344463_4": {"length": 11, "quality": 1.0, "section_id": 7047}}, "n3337": {"so_42343155_42344463_4": {"length": 11, "quality": 1.0, "section_id": 6792}}, "n4659": {"so_42343155_42344463_4": {"length": 11, "quality": 1.0, "section_id": 8544}}}, "42343155": {"ViewCount": "123", "Body": "<p>I was testing the name lookup rule for C++, I've got a simple program having 3 files:</p>\n<pre><code>$cat testns01.h\nstruct S{\n    static int f(){return 1;}\n};\n\n$cat testns02.h\nnamespace S{\n    static int f(){return 2;}\n}\n\n$cat testns3.cpp\n#include \"testns02.h\" // namespace\n#include \"testns01.h\" // struct\n#include&lt;stdio.h&gt;\nint main()\n{\n    int i = S::f();\n    printf(\"%d\\n\",i);\n    return 0;\n}\n</code></pre>\n<p>If I compile and run, I get:</p>\n<pre><code>$g++ testns3.cpp &amp;&amp; ./a.out\n1\n</code></pre>\n<p>OK, I got 3 question:</p>\n<ol>\n<li>name \"S\" duplication between class name and namespace doesn't conflict?</li>\n<li>When both has name \"S\", seems \"struct S\" has higher priority</li>\n</ol>\n<p>If I comment the line of #include \"testns01.h\", program will print 2, still OK. So my third question is:</p>\n<ol start=\"3\">\n<li>Does c++ stardard talke about how name lookup resolves duplicated name duplication?</li>\n</ol>\n<p>Thanks!</p>\n", "AcceptedAnswerId": "42344463", "Title": "Does C++ namespace name and class name duplication lead to conflict?", "CreationDate": "2017-02-20T11:18:18.587", "Id": "42343155", "CommentCount": "6", "LastEditDate": "2017-05-05T18:12:39.363", "PostTypeId": "1", "LastEditorUserId": "608639", "LastActivityDate": "2017-05-05T18:12:39.363", "Score": "2", "OwnerUserId": "6164172", "Tags": "<c++><class><struct><namespaces><symbol>", "AnswerCount": "1"}, "42344463": {"Id": "42344463", "PostTypeId": "2", "Body": "<blockquote id=\"so_42343155_42344463_0\">\n<ol>\n<li>name \"S\" duplication between class name and namespace doesn't conflict?</li>\n</ol>\n</blockquote>\n<p>They do.</p>\n<blockquote id=\"so_42343155_42344463_1\">\n<ol start=\"2\">\n<li>When both has name \"S\", seems \"struct S\" has higher priority</li>\n</ol>\n</blockquote>\n<p>It doesn't. (look below)</p>\n<blockquote id=\"so_42343155_42344463_2\">\n<ol start=\"3\">\n<li>Does c++ stardard talke about how name lookup resolves duplicated name duplication?</li>\n</ol>\n</blockquote>\n<p>Yes. Quoting the relevant part of N4140:</p>\n<blockquote>\n<p id=\"so_42343155_42344463_3\"><em>\u00a73.3.1 [basic.scope.declarative] / 4</em></p>\n<p id=\"so_42343155_42344463_4\">Given a set of declarations in a single declarative region, each of\n  which specifies the same unqualified name, </p>\n<ul>\n<li>they shall all refer to the same entity, or all refer to functions and function templates; or </li>\n<li>exactly one declaration shall declare a class name or enumeration name that is not a typedef name and the other declarations shall all\n  refer to the same variable or enumerator, or all refer to functions\n  and function templates; in this case the class name or enumeration\n  name is hidden. [ <em>Note:</em> <strong>A namespace name or a class template name\n  must be unique in its declarative region</strong>. \u2014<em>end note</em> ]</li>\n</ul>\n</blockquote>\n<p>I think you accidentally got your example working for you, because you repeated the include guards. I was able to reproduce the \"preference\" for class <code>S</code> from the question:</p>\n<pre><code>#ifndef FOO\n#define FOO\nstruct S{\n    static int f(){return 1;}\n};\n#endif\n\n#ifndef FOO\n#define FOO\nnamespace S{\n    static int f(){return 2;}\n}\n#endif\n\n#include&lt;stdio.h&gt;\nint main()\n{\n    int i = S::f();\n    printf(\"%d\\n\",i);\n    return 0;\n}\n</code></pre>\n<p><a href=\"http://melpon.org/wandbox/permlink/PiXydbVuFpXYLbvd\" rel=\"nofollow noreferrer\">link</a></p>\n", "LastActivityDate": "2017-02-20T12:20:38.693", "Score": "2", "CreationDate": "2017-02-20T12:20:38.693", "ParentId": "42343155", "CommentCount": "2", "OwnerUserId": "2456565"}});