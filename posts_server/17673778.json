post_cb({"bq_ids": {"n4140": {"so_17673778_17673947_1": {"section_id": 5846, "quality": 0.9523809523809523, "length": 60}, "so_17673778_17673947_2": {"section_id": 6076, "quality": 0.9148936170212766, "length": 43}}, "n3337": {"so_17673778_17673947_1": {"section_id": 5616, "quality": 0.9523809523809523, "length": 60}, "so_17673778_17673947_2": {"section_id": 5844, "quality": 0.9361702127659575, "length": 44}}, "n4659": {"so_17673778_17673947_1": {"section_id": 7325, "quality": 0.9523809523809523, "length": 60}, "so_17673778_17673947_2": {"section_id": 7572, "quality": 0.6382978723404256, "length": 30}}}, "17673951": {"ParentId": "17673778", "CommentCount": "2", "Body": "<p>To \"know\" the size of <code>MyClass</code> the compiler will need to know the whole class. When you are forward declaring a <code>static MyClass m_preAllocatedObjects[100];</code> you are actually not defining the variable - to actually get the variable, you will have to do :</p>\n<pre><code>MyClass MyClasss::m_preAllocatedObjects[100]; \n</code></pre>\n<p>somewhere in a .cpp file. This is where the memory for the objects are being \"placed\" as a lump in the data-segment. So the compiler doesn't have to know the actual size of <code>MyClass</code> at the point where you declare the variable. However, it does need to know the size to evaluate <code>100 * sizeof(MyClass)</code>. </p>\n", "OwnerUserId": "1919155", "PostTypeId": "2", "Id": "17673951", "Score": "3", "CreationDate": "2013-07-16T10:18:39.163", "LastActivityDate": "2013-07-16T10:18:39.163"}, "17674102": {"ParentId": "17673778", "CommentCount": "0", "Body": "<p>You have to do that in two step: </p>\n<ul>\n<li>declaring an array (without knowing its size) inside the class.</li>\n<li>defining it, after you finish declaring the class, so that you know the size.</li>\n</ul>\n<p>Here is the code:</p>\n<pre><code>class MyClass\n{\n     int x;\n     ...\n     static char m_preAllocatedMemory[];\n};\n\n\nchar MyClass::m_preAllocatedMemory[100 * sizeof(MyClass)];\n</code></pre>\n", "OwnerUserId": "1692107", "PostTypeId": "2", "Id": "17674102", "Score": "1", "CreationDate": "2013-07-16T10:25:45.647", "LastActivityDate": "2013-07-16T10:25:45.647"}, "17673778": {"CommentCount": "1", "AcceptedAnswerId": "17673947", "CreationDate": "2013-07-16T10:10:38.030", "LastActivityDate": "2013-07-16T10:25:45.647", "PostTypeId": "1", "ViewCount": "215", "FavoriteCount": "2", "Title": "Getting sizeof(MyClass) in class member declaration", "Id": "17673778", "Score": "0", "Body": "<p>I am working in embedded C++ project, where I plan to make memory statically allocated as much as I can. So, I am writing a set of functions to override new/delete for all classes and for the global new/delete.</p>\n<p>Here is a naive implementation:</p>\n<pre><code>class MyClass\n{\n    int x;\n    float y;\n    double z;\n\n    static MyClass m_preAllocatedObjects[100];  //Solution 1\n    static char m_preAllocatedMemory[100 * sizeof(MyClass)]; //Solution 2\n    static char* getPreAllocatedMemory() // Solution 3\n    {\n        static char localStaticMemory[100 * sizeof(MyClass)];\n        return localStaticMemory;\n    }\n\n    static void* operator new(size_t s){ \n     void* p; /*fill p from the pre-allocated memory or object*/;\n     return p;\n    }\n};\n</code></pre>\n<p><strong>Solution 1</strong>: It works for object with default constructor only.</p>\n<p><strong>Solution 2</strong>: It gives compilation error <code>use of undefined type 'MyClass'</code>; and <em><strong>this is what I am asking about</strong></em>.</p>\n<p><strong>Solution 3</strong>: This solution works fine.</p>\n<p>The question is:</p>\n<p>Why can I create static members of MyClass, while I can't get sizeof(MyClass)?</p>\n", "Tags": "<c++><static><sizeof>", "OwnerUserId": "231388", "AnswerCount": "3"}, "17673947": {"ParentId": "17673778", "PostTypeId": "2", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_17673778_17673947_0\">while I can't get sizeof(MyClass)?</p>\n</blockquote>\n<p>The reason is that <code>MyClass</code> is not fully defined until the closing <code>}</code> of the class definition, from section <em>9 Classes</em> of the c++11 standard (draft n3337):</p>\n<blockquote>\n<p id=\"so_17673778_17673947_1\">A class-name is inserted into the scope in which it is declared immediately after the class-name is seen.\n  The class-name is also inserted into the scope of the class itself; this is known as the injected-class-name.\n  For purposes of access checking, the injected-class-name is treated as if it were a public member name. A\n  class-specifier is commonly referred to as a class definition. <strong>A class is considered defined after the closing\n  brace of its class-specifier has been seen</strong> even though its member functions are in general not yet defined.\n  The optional attribute-specifier-seq appertains to the class; the attributes in the attribute-specifier-seq are\n  thereafter considered attributes of the class whenever it is named.</p>\n</blockquote>\n<p>and <code>sizeof</code> can only be applied to a complete type, from section <em>5.3.3 Sizeof</em>:</p>\n<blockquote>\n<p id=\"so_17673778_17673947_2\">The sizeof operator yields the number of bytes in the object representation of its operand. The operand is\n  either an expression, which is an unevaluated operand (Clause 5), or a parenthesized type-id. <strong>The sizeof\n  operator shall not be applied to an expression that has</strong> function or <strong>incomplete type</strong>, to an enumeration\n  type whose underlying type is not fixed before all its enumerators have been declared, to the parenthesized\n  name of such types, or to an lvalue that designates a bit-field. ...</p>\n</blockquote>\n<p>To correct, define the size of the array outside of the class definition:</p>\n<pre><code>class MyClass\n{\n    static char m_preAllocatedMemory[];\n};\n\nchar MyClass::m_preAllocatedMemory[100 * sizeof(MyClass)];\n</code></pre>\n", "OwnerUserId": "1033896", "LastEditorUserId": "1033896", "LastEditDate": "2013-07-16T10:23:56.140", "Id": "17673947", "Score": "3", "CreationDate": "2013-07-16T10:18:33.957", "LastActivityDate": "2013-07-16T10:23:56.140"}});