post_cb({"6189124": {"Id": "6189124", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_6189096_6189124_0\">3.3.1 Point of declaration                                                            [basic.scope.pdecl]</p>\n<p id=\"so_6189096_6189124_1\">The point of declaration for a name is immediately after its complete declarator (clause 8) and before its initializer (if any),</p>\n</blockquote>\n<p>The behaviour is well defined if the declaration is at file scope. If you have the declaration at function scope and if you use <code>foo</code> later on [which would be initialized to some unspecified value in that case] the behaviour would be undefined.</p>\n", "LastEditorUserId": "165520", "LastActivityDate": "2011-05-31T14:47:59.797", "Score": "26", "CreationDate": "2011-05-31T14:29:52.263", "ParentId": "6189096", "CommentCount": "10", "OwnerUserId": "165520", "LastEditDate": "2011-05-31T14:47:59.797"}, "bq_ids": {"n4140": {"so_6189096_6189122_0": {"length": 10, "quality": 0.7692307692307693, "section_id": 7049}, "so_6189096_6189124_1": {"length": 10, "quality": 0.7692307692307693, "section_id": 7049}, "so_6189096_6189122_1": {"length": 6, "quality": 0.8571428571428571, "section_id": 7049}, "so_6189096_6189122_4": {"length": 11, "quality": 0.7333333333333333, "section_id": 3919}, "so_6189096_6189122_3": {"length": 9, "quality": 0.8181818181818182, "section_id": 3289}}, "n3337": {"so_6189096_6189122_0": {"length": 10, "quality": 0.7692307692307693, "section_id": 6794}, "so_6189096_6189122_3": {"length": 9, "quality": 0.8181818181818182, "section_id": 3159}, "so_6189096_6189122_4": {"length": 11, "quality": 0.7333333333333333, "section_id": 3779}, "so_6189096_6189122_1": {"length": 6, "quality": 0.8571428571428571, "section_id": 6794}, "so_6189096_6189124_1": {"length": 10, "quality": 0.7692307692307693, "section_id": 6794}, "so_6189096_6189122_2": {"length": 23, "quality": 0.8518518518518519, "section_id": 5}}, "n4659": {"so_6189096_6189122_0": {"length": 10, "quality": 0.7692307692307693, "section_id": 8546}, "so_6189096_6189124_1": {"length": 10, "quality": 0.7692307692307693, "section_id": 8546}, "so_6189096_6189122_1": {"length": 6, "quality": 0.8571428571428571, "section_id": 8546}, "so_6189096_6189122_4": {"length": 8, "quality": 0.5333333333333333, "section_id": 4051}, "so_6189096_6189122_3": {"length": 9, "quality": 0.8181818181818182, "section_id": 4051}}}, "6189096": {"ViewCount": "509", "Body": "<p><code>int foo = foo;</code> compiles.\nWhich part of the C++ standard allows this?</p>\n", "AcceptedAnswerId": "6189124", "Title": "Standard reference for int foo = foo", "CreationDate": "2011-05-31T14:28:21.077", "Id": "6189096", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2011-12-15T00:27:34.927", "LastEditorUserId": "187543", "LastActivityDate": "2011-12-15T00:27:34.927", "Score": "19", "OwnerUserId": "777853", "Tags": "<c++><undefined-behavior>", "AnswerCount": "2"}, "6189122": {"Id": "6189122", "PostTypeId": "2", "Body": "<p>This?</p>\n<pre><code>int main() {\n  int foo = foo;\n}\n</code></pre>\n<p>The object <code>foo</code> does exist after the <code>=</code>, according to <code>[basic.scope.pdecl]</code>:</p>\n<blockquote>\n<p id=\"so_6189096_6189122_0\">The point of declaration for a name is <strong>immediately after its complete declarator</strong> (clause 8) and <strong>before its initializer</strong> (if any).</p>\n</blockquote>\n<p>However, the program as a whole is undefined, because you use (on the RHS) an uninitialised value:</p>\n<blockquote>\n<p id=\"so_6189096_6189122_1\"><code>int x = x;</code>\n  Here [..] <code>x</code> is initialized with its own (indeterminate) value.</p>\n</blockquote>\n<p>And:</p>\n<p>Though \"inferred and ill-specified\" by the standard, <a href=\"https://stackoverflow.com/questions/6376580/what-standard-clause-mandates-this-lvalue-to-rvalue-conversion\">an <em>lvalue-to-rvalue conversion</em> is performed on the RHS expression <code>foo</code></a>.</p>\n<p>And (<code>[conv.lval]</code>):</p>\n<blockquote>\n<p id=\"so_6189096_6189122_2\">An lvalue (3.10) of a non-function,\n  non-array type T can be converted to\n  an rvalue. If T is an incomplete type,\n  a program that necessitates this\n  conversion is ill-formed. If the\n  object to which the lvalue refers is\n  not an object of type T and is not an\n  object of a type derived from T, or <strong>if\n  the object is uninitialized, a program\n  that necessitates this conversion has\n  undefined behavior.</strong></p>\n</blockquote>\n<p>With proper warning levels, <a href=\"http://codepad.org/uWczZuqx\" rel=\"nofollow noreferrer\">you will get told about it</a>; however, programs invoking Undefined Behaviour are allowed to compile. They just can do anything at all when you run them.</p>\n<hr>\n<p>Or, what about this?</p>\n<pre><code>int foo = foo;    \nint main() {}\n</code></pre>\n<p>Notice that <code>foo</code> is a \"global\". These are zero-initialised as a first step, according to <code>[basic.start.init]</code>:</p>\n<blockquote>\n<p id=\"so_6189096_6189122_3\">Objects with static storage duration (3.7.1) shall be zero-initialized (8.5) <strong>before any other initialization</strong> takes place.</p>\n</blockquote>\n<p>So you'll get an <code>int foo</code> with value 0; it's valid, at this point, as per <code>[basic.scope.pdecl]</code> above, and as per <code>[stmt.decl]</code>:</p>\n<blockquote>\n<p id=\"so_6189096_6189122_4\">The zero-initialization (8.5) of all\n  local objects with static storage\n  duration (3.7.1) is performed before\n  any other initialization takes place. [..]</p>\n</blockquote>\n<p>You then value-initialise it to <code>foo</code> (itself), i.e. 0.</p>\n<p>This is well-defined... if a little cryptic.</p>\n<hr>\n<p>In the interests of thoroughness, here's a third and final case:</p>\n<pre><code>int foo = 42;\nint main() {\n   int foo = foo;\n}\n</code></pre>\n<p>Sadly, <a href=\"http://www.ideone.com/O7XSJ\" rel=\"nofollow noreferrer\">this is the same as the first case</a>. Since the local <code>foo</code> is already declared and in scope by the time the initializer is evaluated, the initializer uses the local <code>foo</code> and you're still stuck with the Undefined Behaviour. The global <code>foo</code> is not used.</p>\n</hr></hr>", "LastEditorUserId": "-1", "LastActivityDate": "2011-06-16T18:18:33.073", "Score": "21", "CreationDate": "2011-05-31T14:29:35.943", "ParentId": "6189096", "CommentCount": "18", "OwnerUserId": "560648", "LastEditDate": "2017-05-23T12:22:26.580"}});