post_cb({"bq_ids": {"n4140": {"so_25435897_25436164_0": {"length": 10, "quality": 0.7142857142857143, "section_id": 5480}, "so_25435897_25436072_0": {"length": 73, "quality": 0.9125, "section_id": 5480}}, "n3337": {"so_25435897_25436164_0": {"length": 10, "quality": 0.7142857142857143, "section_id": 5266}, "so_25435897_25436072_0": {"length": 73, "quality": 0.9125, "section_id": 5266}}, "n4659": {"so_25435897_25436164_0": {"length": 10, "quality": 0.7142857142857143, "section_id": 6914}, "so_25435897_25436072_0": {"length": 73, "quality": 0.9125, "section_id": 6914}}}, "25435897": {"ViewCount": "788", "Body": "<p>Assume the following code:</p>\n<pre class=\"lang-cpp prettyprint-override\"><code>namespace test \n{ \n    namespace detail \n    { \n    }\n\n    inline namespace v1 \n    { \n        namespace detail \n        { \n            void foo() \n            { \n            }\n        }\n    }\n}\n\nint main()\n{ \n    test::detail::foo(); \n}\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/6d97c88d0f193c0c\">As we can see</a>, this code compiles with Clang; not <a href=\"http://coliru.stacked-crooked.com/a/bf474f1c41bc51a4\">with GCC</a>, however - GCC complains that the reference to <code>namespace detail</code> is ambiguous:</p>\n<pre><code>main.cpp:20:11: error: reference to 'detail' is ambiguous\n     test::detail::foo(); \n           ^\nmain.cpp:4:5: note: candidates are: namespace test::detail { }\n     { \n     ^\nmain.cpp:10:9: note:                 namespace test::v1::detail { }\n         { \n         ^\n</code></pre>\n<p>Which compiler does the correct thing here?</p>\n", "AcceptedAnswerId": "25436072", "Title": "Ambiguous reference to namespace within an inline namespace", "CreationDate": "2014-08-21T21:04:34.377", "Id": "25435897", "CommentCount": "1", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2014-08-21T21:11:13.977", "LastEditorUserId": "1381108", "LastActivityDate": "2014-08-21T21:24:35.920", "Score": "15", "OwnerUserId": "809387", "Tags": "<c++><g++><c++14><clang++><inline-namespaces>", "AnswerCount": "2"}, "25436164": {"Id": "25436164", "PostTypeId": "2", "Body": "<p>GCC is correct.</p>\n<p>N3797 states that,</p>\n<blockquote>\n<p id=\"so_25435897_25436164_0\">and a using- directive (\n  7.3.4 ) that names the inline namespace is implicitly inserted into the enclosing namespace as for an unnamed namespace (\n  7.3.1.1 ).</p>\n</blockquote>\n<p>Thus, <code>test::detail</code> is not the same namespace as <code>test::v1::detail</code>, so the lookup of <code>test::detail</code> is ambiguous. The Standard is exceptionally clear that the lookup of <code>test::detail</code> should include <code>test::v1::detail</code>, there are many quotes in this section to support this, but nothing to state that they should be considered the same namespace.</p>\n<p>Arguably, I would say that Clang's behaviour is superior, but GCC's is correct.</p>\n", "LastActivityDate": "2014-08-21T21:23:18.800", "CommentCount": "0", "CreationDate": "2014-08-21T21:23:18.800", "ParentId": "25435897", "Score": "5", "OwnerUserId": "298661"}, "25436072": {"Id": "25436072", "PostTypeId": "2", "Body": "<p>GCC is correct:</p>\n<blockquote>\n<p id=\"so_25435897_25436072_0\">Members of an inline namespace can be used in most respects as though they were members of the enclosing namespace. Speci\ufb01cally, the inline namespace and its enclosing namespace are both added to the set of associated namespaces used in argument-dependent lookup (3.4.2) whenever one of them is, and <strong>a <em>using-directive</em> that names the namespace is implicitly inserted into the enclosing namespace</strong> as for an unnamed namespace (7.3.1.1). Furthermore, each member of the inline namespace can subsequently be explicitly instantiated (14.7.2) or explicitly specialized (14.7.3) as though it were a member of the enclosing namespace. Finally, <strong>looking up a name in the enclosing namespace via explicit quali\ufb01cation</strong> (3.4.3.2) <strong>will include members of the inline namespace brought in by the <em>using-directive</em> even if there are declarations of that name in the enclosing namespace</strong>.</p>\n</blockquote>\n<p>(This is at 7.3.1/8 in old n3337 numbering)</p>\n<p>I believe you're seeing <a href=\"http://llvm.org/bugs/show_bug.cgi?id=10361\" rel=\"noreferrer\">Clang bug #10361</a>.</p>\n", "LastEditorUserId": "560648", "LastActivityDate": "2014-08-21T21:23:10.280", "Score": "13", "CreationDate": "2014-08-21T21:16:03.293", "ParentId": "25435897", "CommentCount": "0", "OwnerUserId": "560648", "LastEditDate": "2014-08-21T21:23:10.280"}});