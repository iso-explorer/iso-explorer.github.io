post_cb({"38927195": {"ParentId": "38927019", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>Both functions require an array-to-pointer conversion, but the first requires an additional qualification conversion.</p>\n<p>You're correct in saying that both are an Exact Match</p>\n<p>[over.ics.scs] / 3</p>\n<blockquote>\n<p id=\"so_38927019_38927195_0\">[...] The rank of a conversion sequence is determined by considering the rank of each conversion in the sequence and the rank of any reference binding (13.3.3.1.4). If any of those has Conversion rank, the sequence has Conversion rank; otherwise, if any of those has Promotion rank, the sequence has Promotion rank; otherwise, the sequence has Exact Match rank.</p>\n</blockquote>\n<p>but according to the rules in [over.ics.rank] / 3.2</p>\n<blockquote>\n<p id=\"so_38927019_38927195_1\">Standard conversion sequence <code>S1</code> is a better conversion sequence than standard conversion sequence <code>S2</code> if</p>\n<p id=\"so_38927019_38927195_2\">[...]</p>\n<p id=\"so_38927019_38927195_3\">(3.2.5) - <code>S1</code> and <code>S2</code> differ only in their qualification conversion and yield similar types <code>T1</code> and <code>T2</code> (4.4), respectively, and the cv-qualification signature of type <code>T1</code> is a proper subset of the cv-qualification signature of type <code>T2</code>.</p>\n</blockquote>\n<p>The same rule is on the page you linked under \"Ranking of implicit conversion sequences\"</p>\n<blockquote>\n<p id=\"so_38927019_38927195_4\">3) A standard conversion sequence <code>S1</code> is <em>better</em> than a standard conversion sequence <code>S2</code> if</p>\n<p id=\"so_38927019_38927195_5\">[...]</p>\n<p id=\"so_38927019_38927195_6\">f) Or, if not that, <code>S1</code> and <code>S2</code> only differ in qualification conversion, and the cv-qualification of the result of <code>S1</code> is a subset of the cv-qualification of the result of <code>S2</code></p>\n</blockquote>\n", "OwnerUserId": "657267", "LastEditorUserId": "657267", "LastEditDate": "2016-08-12T22:26:06.540", "Id": "38927195", "Score": "8", "CreationDate": "2016-08-12T22:19:01.413", "LastActivityDate": "2016-08-12T22:26:06.540"}, "38927019": {"CommentCount": "0", "ViewCount": "229", "CreationDate": "2016-08-12T21:57:56.447", "LastActivityDate": "2016-08-13T07:05:43.507", "Title": "c++ function overloading with Exact Match", "FavoriteCount": "2", "PostTypeId": "1", "Id": "38927019", "Score": "9", "Body": "<p>Can someone explain why the overloading resolution will pick the 2nd function, instead of reporting an ambiguous error. Anyway, the 2nd function is an exact match, but the 1st undergoes a qualification conversion(from char*\u3000to const char*). However, the document from <a href=\"http://en.cppreference.com/w/cpp/language/overload_resolution\" rel=\"noreferrer\">http://en.cppreference.com/w/cpp/language/overload_resolution</a><br>\nstates that qualification conversion is also an exact match, and hence both candidates should have same ranking.</br></p>\n<blockquote>\n<p id=\"so_38927019_38927019_0\">Each type of standard conversion sequence is assigned one of three ranks:</p>\n<p id=\"so_38927019_38927019_1\">1) Exact match: no conversion required, lvalue-to-rvalue conversion, qualification conversion, function pointer conversion, (since C++17) user-defined conversion of class type to the same class</p>\n<p id=\"so_38927019_38927019_2\">2) Promotion: integral promotion, floating-point promotion</p>\n<p id=\"so_38927019_38927019_3\">3) Conversion: integral conversion, floating-point conversion, floating-integral conversion, pointer conversion, pointer-to-member conversion, boolean conversion, user-defined conversion of a derived class to its base</p>\n</blockquote>\n<pre><code>void g(const char* x)\n{\n    std::cout &lt;&lt; \"g(const char* x)\" &lt;&lt; std::endl;\n}\n\nvoid g(char* x)\n{\n    std::cout &lt;&lt; \"g(char* x)\" &lt;&lt; std::endl;\n}\n\nvoid callg()\n{\n    char a[] = \"sample\";\n    g(a);\n}\n</code></pre>\n", "Tags": "<c++>", "OwnerUserId": "5972353", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_38927019_38927195_1": {"section_id": 603, "quality": 0.8888888888888888, "length": 8}, "so_38927019_38927195_6": {"section_id": 639, "quality": 0.75, "length": 6}, "so_38927019_38930181_0": {"section_id": 558, "quality": 1.0, "length": 15}, "so_38927019_38927019_3": {"section_id": 611, "quality": 0.5263157894736842, "length": 10}, "so_38927019_38927019_1": {"section_id": 640, "quality": 0.5263157894736842, "length": 10}, "so_38927019_38927195_4": {"section_id": 603, "quality": 1.0, "length": 6}, "so_38927019_38927195_0": {"section_id": 619, "quality": 0.9375, "length": 30}, "so_38927019_38927195_3": {"section_id": 639, "quality": 0.9411764705882353, "length": 16}}, "n3337": {"so_38927019_38927195_1": {"section_id": 593, "quality": 0.8888888888888888, "length": 8}, "so_38927019_38927195_6": {"section_id": 629, "quality": 0.75, "length": 6}, "so_38927019_38930181_0": {"section_id": 549, "quality": 1.0, "length": 15}, "so_38927019_38927019_3": {"section_id": 601, "quality": 0.5263157894736842, "length": 10}, "so_38927019_38927019_1": {"section_id": 630, "quality": 0.5263157894736842, "length": 10}, "so_38927019_38927195_4": {"section_id": 593, "quality": 1.0, "length": 6}, "so_38927019_38927195_3": {"section_id": 629, "quality": 0.9411764705882353, "length": 16}, "so_38927019_38927195_0": {"section_id": 609, "quality": 0.9375, "length": 30}}, "n4659": {"so_38927019_38927195_1": {"section_id": 629, "quality": 0.8888888888888888, "length": 8}, "so_38927019_38927195_6": {"section_id": 667, "quality": 0.75, "length": 6}, "so_38927019_38930181_0": {"section_id": 581, "quality": 1.0, "length": 15}, "so_38927019_38927019_3": {"section_id": 637, "quality": 0.5263157894736842, "length": 10}, "so_38927019_38927019_1": {"section_id": 668, "quality": 0.5263157894736842, "length": 10}, "so_38927019_38927195_4": {"section_id": 629, "quality": 1.0, "length": 6}, "so_38927019_38927195_3": {"section_id": 667, "quality": 0.9411764705882353, "length": 16}, "so_38927019_38927195_0": {"section_id": 645, "quality": 0.9375, "length": 30}}}, "38930181": {"ParentId": "38927019", "CommentCount": "0", "Body": "<p>In overload resolution T* and const T* are considered distinct parameter types.\n[over.load] 13.1/(3.4):</p>\n<blockquote>\n<p id=\"so_38927019_38930181_0\">In particular, for any type T, \"pointer to T\", \"pointer to const T\", and \"pointer to volatile T\" are considered distinct parameter types, as are \"reference to T\", \"reference to const T\", and \"reference to volatile T\".</p>\n</blockquote>\n", "OwnerUserId": "6579744", "PostTypeId": "2", "Id": "38930181", "Score": "0", "CreationDate": "2016-08-13T07:05:43.507", "LastActivityDate": "2016-08-13T07:05:43.507"}});