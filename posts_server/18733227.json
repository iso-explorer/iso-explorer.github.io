post_cb({"bq_ids": {"n4140": {"so_18733227_18740867_7": {"length": 5, "quality": 0.8333333333333334, "section_id": 464}, "so_18733227_18740867_9": {"length": 10, "quality": 0.9090909090909091, "section_id": 464}, "so_18733227_18740867_0": {"length": 48, "quality": 0.8727272727272727, "section_id": 464}, "so_18733227_18740867_3": {"length": 7, "quality": 1.0, "section_id": 464}, "so_18733227_18740867_4": {"length": 10, "quality": 0.9090909090909091, "section_id": 464}, "so_18733227_18740867_2": {"length": 5, "quality": 0.8333333333333334, "section_id": 464}, "so_18733227_18740867_1": {"length": 7, "quality": 1.0, "section_id": 464}, "so_18733227_18740867_8": {"length": 7, "quality": 1.0, "section_id": 464}, "so_18733227_18740867_5": {"length": 48, "quality": 0.8727272727272727, "section_id": 464}, "so_18733227_18740867_6": {"length": 7, "quality": 1.0, "section_id": 464}}, "n3337": {"so_18733227_18740867_7": {"length": 5, "quality": 0.8333333333333334, "section_id": 455}, "so_18733227_18740867_9": {"length": 10, "quality": 0.9090909090909091, "section_id": 455}, "so_18733227_18740867_0": {"length": 48, "quality": 0.8727272727272727, "section_id": 455}, "so_18733227_18740867_3": {"length": 7, "quality": 1.0, "section_id": 455}, "so_18733227_18740867_4": {"length": 10, "quality": 0.9090909090909091, "section_id": 455}, "so_18733227_18740867_8": {"length": 7, "quality": 1.0, "section_id": 455}, "so_18733227_18740867_1": {"length": 7, "quality": 1.0, "section_id": 455}, "so_18733227_18740867_2": {"length": 5, "quality": 0.8333333333333334, "section_id": 455}, "so_18733227_18740867_5": {"length": 48, "quality": 0.8727272727272727, "section_id": 455}, "so_18733227_18740867_6": {"length": 7, "quality": 1.0, "section_id": 455}}, "n4659": {"so_18733227_18740867_7": {"length": 5, "quality": 0.8333333333333334, "section_id": 487}, "so_18733227_18740867_9": {"length": 10, "quality": 0.9090909090909091, "section_id": 487}, "so_18733227_18740867_0": {"length": 47, "quality": 0.8545454545454545, "section_id": 487}, "so_18733227_18740867_3": {"length": 7, "quality": 1.0, "section_id": 487}, "so_18733227_18740867_4": {"length": 10, "quality": 0.9090909090909091, "section_id": 487}, "so_18733227_18740867_8": {"length": 7, "quality": 1.0, "section_id": 487}, "so_18733227_18740867_1": {"length": 7, "quality": 1.0, "section_id": 487}, "so_18733227_18740867_2": {"length": 5, "quality": 0.8333333333333334, "section_id": 487}, "so_18733227_18740867_5": {"length": 47, "quality": 0.8545454545454545, "section_id": 487}, "so_18733227_18740867_6": {"length": 7, "quality": 1.0, "section_id": 487}}}, "18733443": {"Id": "18733443", "PostTypeId": "2", "Body": "<p>Non-union members are moved in their initialization order, using the move semantics defined for each member type.</p>\n<p><a href=\"http://en.cppreference.com/w/cpp/language/move_constructor\" rel=\"nofollow\">http://en.cppreference.com/w/cpp/language/move_constructor</a></p>\n", "LastActivityDate": "2013-09-11T05:40:16.213", "CommentCount": "3", "CreationDate": "2013-09-11T05:40:16.213", "ParentId": "18733227", "Score": "1", "OwnerUserId": "2013916"}, "18740867": {"Id": "18740867", "PostTypeId": "2", "Body": "<p>That's what the standard says (12.8/15):</p>\n<blockquote>\n<blockquote>\n<p id=\"so_18733227_18740867_5\">The implicitly-defined copy/move constructor for a non-union class X performs a memberwise copy/move of its bases and members. [ Note: brace-or-equal-initializers of non-static data members are ignored. See also the example in 12.6.2. \u2014end note ] The order of initialization is the same as the order of initialization of bases and members in a user-defined constructor (see 12.6.2). Let <code>x</code> be either the parameter of the constructor or, for the move constructor, an xvalue referring to the parameter. Each base or non-static data member is copied/moved in the manner appropriate to its type:</p>\n<p id=\"so_18733227_18740867_6\">\u2014 if the member is an array, each element is direct-initialized with the corresponding subobject of <code>x</code>;</p>\n<p id=\"so_18733227_18740867_7\">\u2014 if a member <code>m</code> has rvalue reference type <code>T&amp;&amp;</code>, it is direct-initialized with <code>static_cast&lt;T&amp;&amp;&gt;(x.m)</code>;</p>\n<p id=\"so_18733227_18740867_8\">\u2014 otherwise, the base or member is direct-initialized with the corresponding base or member of <code>x</code>.</p>\n<p id=\"so_18733227_18740867_9\">Virtual base class subobjects shall be initialized only once by the implicitly-defined copy/move constructor (see 12.6.2).</p>\n</blockquote>\n</blockquote>\n<p>For pointers and fundamental types moving is the same as copying.</p>\n", "LastActivityDate": "2013-09-11T12:12:21.163", "CommentCount": "0", "CreationDate": "2013-09-11T12:12:21.163", "ParentId": "18733227", "Score": "2", "OwnerUserId": "1137388"}, "18733227": {"ViewCount": "134", "Body": "<p>What is the definition of the default move constructor? I can't think of anything sensible. Maybe a swap on ptr members and copy on values/reference member?</p>\n", "AcceptedAnswerId": "18740867", "Title": "What is the default move construct?", "CreationDate": "2013-09-11T05:22:45.110", "Id": "18733227", "CommentCount": "0", "LastEditDate": "2013-09-11T08:16:04.263", "PostTypeId": "1", "OwnerDisplayName": "user34537", "LastEditorUserId": "46642", "LastActivityDate": "2013-09-11T12:12:21.163", "Score": "1", "Tags": "<c++><c++11><move-semantics>", "AnswerCount": "2"}});