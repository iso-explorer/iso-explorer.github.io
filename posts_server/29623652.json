post_cb({"bq_ids": {"n4140": {"so_29623652_29623652_0": {"length": 6, "quality": 0.5454545454545454, "section_id": 3376}}, "n3337": {"so_29623652_29623652_0": {"length": 6, "quality": 0.5454545454545454, "section_id": 3246}}}, "29624175": {"LastActivityDate": "2015-04-14T09:59:46.563", "CommentCount": "8", "Body": "<p><code>io_service</code> is not copyable.</p>\n<p>You can make it shared quickly by wrapping it in <code>shared_ptr&lt;io_service&gt;</code>, but you should really reconsider the design first.</p>\n<p>If your class needs to be copyable, it would logically <em>not</em> contain the <code>io_service</code> object</p>\n<p>E.g. the following sample does create two instances of the test class not sharing a connection:</p>\n<p><strong><kbd><a href=\"http://coliru.stacked-crooked.com/a/f219f1396a36cae8\" rel=\"nofollow\">Live On Coliru</a></kbd></strong></p>\n<pre><code>#include &lt;boost/asio.hpp&gt;\n#include &lt;boost/make_shared.hpp&gt;\n#include &lt;iostream&gt;\n\nclass TestIOService {\n\npublic:\n    void makeConnection();\n    static TestIOService getInst();\n\nprivate:\n    TestIOService(std::string address);\n    std::string address;\n\n    boost::shared_ptr&lt;boost::asio::ip::udp::socket&gt; socket;\n    boost::shared_ptr&lt;boost::asio::io_service&gt; service;\n};\n\nvoid TestIOService::makeConnection() {\n    using namespace boost::asio;\n    service = boost::make_shared&lt;io_service&gt;();\n    socket  = boost::make_shared&lt;ip::udp::socket&gt;(*service);\n    socket-&gt;connect({ip::address::from_string(\"192.168.1.2\"), 1234 });\n    //socket-&gt;close();\n}\n\nTestIOService::TestIOService(std::string address) \n    : address(address) { }\n\nTestIOService TestIOService::getInst() {\n    return TestIOService(\"192.168.1.2\");\n}\n\nint main() {\n    auto test1 = TestIOService::getInst();\n    auto test2 = TestIOService::getInst();\n}\n</code></pre>\n", "CreationDate": "2015-04-14T09:48:10.190", "LastEditDate": "2015-04-14T09:59:46.563", "ParentId": "29623652", "Id": "29624175", "LastEditorUserId": "85371", "PostTypeId": "2", "Score": "3", "OwnerUserId": "85371"}, "29623652": {"CreationDate": "2015-04-14T09:21:46.943", "ViewCount": "1229", "Id": "29623652", "AcceptedAnswerId": "29624175", "Score": "1", "Title": "Using boost::asio::io_service as class member field", "LastEditorUserId": "1246520", "CommentCount": "0", "Body": "<p>I have class where I use boost asio library:</p>\n<p>Header:</p>\n<pre><code>class TestIOService {\n\npublic:\n    void makeConnection();\n    static TestIOService getInst();\n\nprivate:\n    TestIOService(std::string address);\n    std::string address;\n    // boost::asio::io_service service;\n};\n</code></pre>\n<p>Impl:</p>\n<pre><code>#include &lt;boost/asio/ip/address.hpp&gt;\n#include &lt;boost/asio/ip/udp.hpp&gt;\n#include \"TestIOService.h\"\n\nvoid TestIOService::makeConnection() {\n    boost::asio::io_service service;\n    boost::asio::ip::udp::socket socket(service);\n    boost::asio::ip::udp::endpoint endpoint(boost::asio::ip::address::from_string(\"192.168.1.2\"), 1234);\n    socket.connect(endpoint);\n    socket.close();\n}\n\nTestIOService::TestIOService(std::string address) : address(address) { }\n\nTestIOService TestIOService::getInst() {\n    return TestIOService(\"192.168.1.2\");\n}\n</code></pre>\n<p>And main:</p>\n<pre><code>int main(void)\n{\n    TestIOService service = TestIOService::getInst();\n    service.makeConnection();\n}\n</code></pre>\n<p>When I have service defined in makeConnection method with this line: </p>\n<pre><code>boost::asio::io_service service;\n</code></pre>\n<p>there is no problem, but when I have it as class field member(commented out in code) I get this error:</p>\n<blockquote>\n<p id=\"so_29623652_29623652_0\">note: \u2018TestIOService::TestIOService(TestIOService&amp;&amp;)\u2019 is implicitly\n  deleted because the default definition would be ill-formed:\n       class TestIOService {</p>\n</blockquote>\n", "Tags": "<c++><boost><boost-asio>", "LastEditDate": "2015-04-14T09:35:24.297", "LastActivityDate": "2015-04-14T09:59:46.563", "PostTypeId": "1", "AnswerCount": "1", "OwnerUserId": "1246520"}});