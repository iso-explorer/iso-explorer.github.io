post_cb({"bq_ids": {"n4140": {"so_19344955_19345096_3": {"length": 7, "quality": 1.0, "section_id": 7061}, "so_19344955_19345096_2": {"length": 21, "quality": 0.84, "section_id": 5969}, "so_19344955_19344955_0": {"length": 14, "quality": 0.8235294117647058, "section_id": 5968}, "so_19344955_19345096_4": {"length": 13, "quality": 1.0, "section_id": 3881}, "so_19344955_19345096_1": {"length": 5, "quality": 0.5555555555555556, "section_id": 3382}}, "n3337": {"so_19344955_19345096_3": {"length": 7, "quality": 1.0, "section_id": 6805}, "so_19344955_19345096_2": {"length": 23, "quality": 0.92, "section_id": 5738}, "so_19344955_19344955_0": {"length": 15, "quality": 0.8823529411764706, "section_id": 5737}, "so_19344955_19345096_4": {"length": 13, "quality": 1.0, "section_id": 3741}, "so_19344955_19345096_1": {"length": 5, "quality": 0.5555555555555556, "section_id": 3251}}, "n4659": {"so_19344955_19345096_3": {"length": 7, "quality": 1.0, "section_id": 8558}, "so_19344955_19345096_2": {"length": 21, "quality": 0.84, "section_id": 7467}, "so_19344955_19344955_0": {"length": 14, "quality": 0.8235294117647058, "section_id": 7466}, "so_19344955_19345096_4": {"length": 13, "quality": 1.0, "section_id": 4770}}}, "19345096": {"Id": "19345096", "PostTypeId": "2", "Body": "<p>It looks like this is a compiler extension. g++4.8.1 compiles this while giving a warning:</p>\n<blockquote>\n<p id=\"so_19344955_19345096_0\">warning: capture of variable \u2018a\u2019 with non-automatic storage duration [enabled by default]</p>\n</blockquote>\n<p>clang++3.4 doesn't compile this:</p>\n<blockquote>\n<p id=\"so_19344955_19345096_1\">error: 'a' cannot be captured because it does not have automatic storage duration</p>\n</blockquote>\n<p>Both refer to [expr.prim.lambda]/10</p>\n<blockquote>\n<p id=\"so_19344955_19345096_2\">The identifiers in a capture-list are looked up using the usual rules for unqualified name lookup (3.4.1); each such lookup shall find a variable with automatic storage duration declared in the reaching scope of the local lambda expression.</p>\n</blockquote>\n<p>It seems they don't additionally check the enclosing scope of the lambda, I can imagine it would be redundant (there are no names of variables with automatic storage duration at non-block/namespace scope).</p>\n<hr>\n<p>A block scope is defined in [basic.scope.block]/1</p>\n<blockquote>\n<p id=\"so_19344955_19345096_3\">A name declared in a block (6.3) is local to that block; it has block scope.</p>\n</blockquote>\n<p>And a block is defined as:</p>\n<blockquote>\n<p id=\"so_19344955_19345096_4\">So that several statements can be used where one is expected, the compound statement (also, and equivalently, called \u201cblock\u201d) is provided.</p>\n<p id=\"so_19344955_19345096_5\">\u00a0\u00a0\u00a0\u00a0 <em>compound-statement:</em><br/>\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 <code>{</code> <em>statement-seq<sub>opt</sub></em> <code>}</code></p>\n</blockquote>\n<p>So you're right that your globally declared lambda is <em>not</em> in a block scope.</p>\n</hr>", "LastActivityDate": "2013-10-13T12:15:06.967", "CommentCount": "3", "CreationDate": "2013-10-13T12:15:06.967", "ParentId": "19344955", "Score": "12", "OwnerUserId": "420683"}, "19344955": {"ViewCount": "2620", "Body": "<p>I'm currently playing with c++11 lambdas and found a example that I can't understand. According to the Standard:</p>\n<blockquote>\n<p id=\"so_19344955_19344955_0\">A lambda-expression whose smallest enclosing scope is a block scope (3.3.3) is a local lambda expression; any\n  other lambda-expression shall not have a capture-list in its lambda-introducer</p>\n</blockquote>\n<p>so, I created trivial example:</p>\n<pre><code>int a = 10;\nauto x  = [a] { return 1;};\nint main() {\n    int k = 5;\n    auto p = [k]{ return k; };\n    return 0;\n}\n</code></pre>\n<p>The code in ideone: <a href=\"http://ideone.com/t9emu5\" rel=\"noreferrer\">http://ideone.com/t9emu5</a></p>\n<p>I was expecting that this code will not compile because of capturing variable in non-block scope (or at least think that the auto x  = ... part is not in the block-scope). But the code is compiling - is it ok?</p>\n<p>If is it ok - what the block scope is?</p>\n<p>(I'm not sure what compiler version I use because currently I have access only to ideone site.</p>\n<p>Thanks for explaining!</p>\n", "AcceptedAnswerId": "19345096", "Title": "Non local lambda and capturing variables - what does \"block scope\" means", "CreationDate": "2013-10-13T12:01:30.890", "Id": "19344955", "CommentCount": "6", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2013-10-13T12:09:52.553", "LastEditorUserId": "210807", "LastActivityDate": "2013-10-13T12:15:06.967", "Score": "8", "OwnerUserId": "210807", "Tags": "<c++><c++11><lambda>", "AnswerCount": "1"}});