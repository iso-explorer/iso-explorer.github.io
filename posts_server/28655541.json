post_cb({"bq_ids": {"n4140": {"so_28655541_28658366_2": {"length": 8, "quality": 0.6666666666666666, "section_id": 558}}, "n3337": {"so_28655541_28658366_2": {"length": 8, "quality": 0.6666666666666666, "section_id": 549}}, "n4659": {"so_28655541_28658366_2": {"length": 8, "quality": 0.6666666666666666, "section_id": 581}}}, "28655541": {"ViewCount": "71", "Body": "<p>When I'm passing function as parameter to other functions in c++ , do I have to specify it as </p>\n<pre><code>void callOtherFunctions(void f());\n</code></pre>\n<p>or</p>\n<pre><code>void callOtherFunctions(void (*f)());\n</code></pre>\n<p>I have no idea what happens under the hood , so I tried running both versions with a simple program as below , replacing the necessary part for 2nd run. </p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nvoid printHello();\nvoid callOtherFunctions(void f());\n\nint main() {\n\n    callOtherFunctions(printHello);\n    return 0;\n}\nvoid printHello(){\n    std::cout&lt;&lt;\"\\n Hello World\";\n}\nvoid callOtherFunctions(void f()){\n    for (int i=0;i&lt;5;++i){\n        f();\n    }\n} \n</code></pre>\n<p>and to my surprise , both execute with same output and no warnings. So which is the preferred way , or correct way ( in case I'm doing something wrong ). And what actually happens in each case , when I pass pointer - does it executes address function there and when I pass function - does it copies down whole function there? or something else?</p>\n<p>Here is <a href=\"https://ideone.com/fork/ZSLyb7\" rel=\"nofollow\">Ideone Link</a></p>\n", "AcceptedAnswerId": "28658366", "Title": "Do I have to specify a '*' before function pointer?", "CreationDate": "2015-02-22T07:26:55.407", "Id": "28655541", "CommentCount": "1", "PostTypeId": "1", "LastActivityDate": "2015-02-22T13:30:39.193", "Score": "3", "OwnerUserId": "2648679", "Tags": "<c++>", "AnswerCount": "2"}, "28658366": {"Id": "28658366", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_28655541_28658366_0\">void callOtherFunctions(void f());</p>\n</blockquote>\n<p>and</p>\n<blockquote>\n<p id=\"so_28655541_28658366_1\">void callOtherFunctions(void (*f)());</p>\n</blockquote>\n<p>are identical. Quoting N1570,</p>\n<blockquote>\n<p id=\"so_28655541_28658366_2\">\u00a76.7.6.3/8 A declaration of a parameter as \"function returning <em>type</em>\"\n  shall be adjusted to \"pointer to function returning <em>type</em>\", as in\n  6.3.2.1.</p>\n</blockquote>\n<p>I would prefer the function pointer syntax because more people would be familiar with it and it's explicit what you mean. To answer your second question, a conversion also happens in certain cases (informally known as \"decay\"):</p>\n<blockquote>\n<p id=\"so_28655541_28658366_3\">\u00a76.3.2.1/4 A <em>function designator</em> is an expression that has function\n  type. Except when it is the operand of the <code>sizeof</code> operator, the\n  <code>_Alignof</code>operator,<sup>65)</sup> or the unary <code>&amp;</code> operator, a\n  <em>function designator</em> with type \"function returning type\" is converted to an expression that has type \"pointer to function returning <em>type</em>\".</p>\n</blockquote>\n", "OwnerDisplayName": "user3920237", "LastActivityDate": "2015-02-22T13:30:39.193", "Score": "5", "CreationDate": "2015-02-22T13:30:39.193", "ParentId": "28655541", "CommentCount": "0"}, "28657971": {"Id": "28657971", "PostTypeId": "2", "Body": "<p>Function parameter declarations are somewhat unusual; the compiler will adjust some of the declared types. This is one of them: function parameters of function type are adjusted to the corresponding pointer type. </p>\n<p>Other common adjustments to function parameters are array to pointer type, and removing top-level <code>const</code>:</p>\n<pre><code>int foo(int a[5]);    // a is a pointer\nint foo(const int a); // foo() can be called with a non-const int argument.\n</code></pre>\n", "LastActivityDate": "2015-02-22T12:48:06.200", "CommentCount": "0", "CreationDate": "2015-02-22T12:48:06.200", "ParentId": "28655541", "Score": "2", "OwnerUserId": "15416"}});