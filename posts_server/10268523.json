post_cb({"10268573": {"ParentId": "10268523", "CommentCount": "0", "Body": "<p>Because that's the word that the language definiton tells you to use.  'class T' in this context means 'T is the name of some type', not 'T is the name of some class'.</p>\n<p>I believe the rationale lies in a desire to not add yet another reserved word.</p>\n<p>However, the language eventually added yet another reserved word: you can equivalently say 'typename T'.</p>\n", "OwnerUserId": "1349603", "PostTypeId": "2", "Id": "10268573", "Score": "2", "CreationDate": "2012-04-22T14:02:17.923", "LastActivityDate": "2012-04-22T14:02:17.923"}, "10268523": {"CommentCount": "2", "ViewCount": "189", "PostTypeId": "1", "LastEditorUserId": "514235", "CreationDate": "2012-04-22T13:56:42.620", "LastActivityDate": "2012-04-23T04:25:13.663", "Title": "Why c++ template parameters should be declared as class type?", "LastEditDate": "2012-04-23T04:25:13.663", "Id": "10268523", "Score": "4", "Body": "<p>Syntax of Function Template</p>\n<pre><code>template &lt;**class** T, ...&gt;\n    returntype functionname(arguments)\n    {\n           .....\n           .....\n     }\n</code></pre>\n<p>I have two Questions?</p>\n<ol>\n<li>Why the template parameter should be declared as a class type?(ie\nwith the use of class keyword)</li>\n<li>When we declared it as a class type then what the thing the compiler\nwill do?</li>\n</ol>\n", "Tags": "<c++><templates><syntax><language-lawyer>", "OwnerUserId": "1204172", "AnswerCount": "5"}, "10268562": {"ParentId": "10268523", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_10268523_10268562_0\">(1) Why the template parameter should be declared as a class type?</p>\n</blockquote>\n<p><strong>Not true</strong> entirely. You can use <code>typename</code> as well. :)<br>\nMore importantly, you can declare <code>const</code> object of certain types also as a parameter. e.g.</br></p>\n<pre><code>template&lt;int I&gt;  // &lt;---- 'I' is not a class/typename\nclass A { ... };\n...\nA&lt;3&gt; obj;\n</code></pre>\n<blockquote>\n<p id=\"so_10268523_10268562_1\">(2) When we declared it as a class type then what the thing the compiler\n  will do?</p>\n</blockquote>\n<p>Actually <strong>not much</strong>.<br>\nHowever, compiler checks the type is actually a type-name, when you invoke its objects. e.g.</br></p>\n<pre><code>template&lt;class T&gt;\nclass A { ... };  // ok ... not much to check\n...\nA&lt;int&gt; obj1; // compiler checks if 'int' is a type ---&gt; yes\nA&lt;3&gt; obj2; // compiler checks if '3' is a type ---&gt; no\n</code></pre>\n", "OwnerUserId": "514235", "PostTypeId": "2", "Id": "10268562", "Score": "0", "CreationDate": "2012-04-22T14:01:31.430", "LastActivityDate": "2012-04-22T14:01:31.430"}, "10268578": {"ParentId": "10268523", "CommentCount": "1", "Body": "<p>Note that you can pass standard types to <code>template</code>, not only classes:</p>\n<pre><code>template &lt;class T, int N&gt; class mysequence {..};\n</code></pre>\n<p>So, <code>class</code> keyword here tells the compiler to treat T as class. And N is treated as integer.</p>\n", "OwnerUserId": "344347", "PostTypeId": "2", "Id": "10268578", "Score": "1", "CreationDate": "2012-04-22T14:02:50.420", "LastActivityDate": "2012-04-22T14:02:50.420"}, "10268554": {"ParentId": "10268523", "CommentCount": "0", "Body": "<p>According to the Standard, there are two keywords : <code>class</code> and <code>typename</code>. You can use any one of them in a template definition. Both has same meaning: when you write <code>class</code> (or <code>typename</code>) in a template definition, it means the user of the template has to pass a <em>type</em> as template argument to the template; it doesn't mean anything more than that. If it is a function template, then the template argument <em>may be</em> deduced (in some cases) from the argument to the function.</p>\n", "OwnerUserId": "415784", "PostTypeId": "2", "Id": "10268554", "Score": "1", "CreationDate": "2012-04-22T14:00:31.043", "LastActivityDate": "2012-04-22T14:00:31.043"}, "bq_ids": {"n4140": {"so_10268523_10268562_0": {"section_id": 466, "quality": 0.8333333333333334, "length": 5}, "so_10268523_10268559_0": {"section_id": 55, "quality": 1.0, "length": 7}}, "n3337": {"so_10268523_10268562_0": {"section_id": 457, "quality": 0.8333333333333334, "length": 5}, "so_10268523_10268559_0": {"section_id": 50, "quality": 1.0, "length": 7}}, "n4659": {"so_10268523_10268562_0": {"section_id": 489, "quality": 0.8333333333333334, "length": 5}, "so_10268523_10268559_0": {"section_id": 57, "quality": 1.0, "length": 7}}}, "10268559": {"ParentId": "10268523", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>That's the usual confusion that arises from the usage of <code>class</code> in <code>template</code> arguments.</p>\n<p>That <code>class</code> thing has nothing to do with classes; it merely says that the template accepts a type template argument (as opposed to integral<sup>1</sup> template arguments), which can be <em>any</em> type, not only classes.</p>\n<p>So, why did they choose <code>class</code>? Because they had to use a keyword that was surely not used in any C++ program and more or less \"sounded good\" - and <code>class</code> was ok, since it was already a reserved keyword in C++.</p>\n<p>Notice that there's an alternative to <code>class</code>: the <code>typename</code> keyword. They are perfectly equivalent<sup>2</sup>, but <code>typename</code> in my opinion is much more clear, since the name just says \"what follows is a type argument\", without making you think that it must be a class.</p>\n<p>Why both syntax are allowed? Because the <code>typename</code> keyword had do be introduced in the language <em>later</em> (when they noticed that it was necessary to add another keyword to disambiguate some declarations inside templates); then, it was \"retrofitted\" also for the <code>template</code> arguments declarations. This usage of the <code>class</code> keyword was kept for compatibility with programs/documentation written in the meantime.</p>\n<hr/>\n<ol>\n<li>here I say \"integral\" for simplicity, obviously I mean non-type template parameters in general (C++11, \u00a714.1 \u00b64).</li>\n<li><blockquote>\n<p id=\"so_10268523_10268559_0\">There is no semantic difference between class and typename in a template-parameter.</p>\n</blockquote>\n<p>(C++11, \u00a714.1 \u00b62)</p></li>\n</ol>\n", "OwnerUserId": "214671", "LastEditorUserId": "214671", "LastEditDate": "2012-04-22T14:23:06.710", "Id": "10268559", "Score": "11", "CreationDate": "2012-04-22T14:01:21.057", "LastActivityDate": "2012-04-22T14:23:06.710"}});