post_cb({"6708726": {"CommentCount": "0", "ViewCount": "1819", "PostTypeId": "1", "LastEditorUserId": "224671", "CreationDate": "2011-07-15T14:38:45.587", "LastActivityDate": "2011-07-17T13:16:39.943", "Title": "Multiple declarations of C++ functions with default parameters", "LastEditDate": "2011-07-15T14:50:56.283", "Id": "6708726", "Score": "5", "Body": "<p>I use typedefs for almost everything, including functions. Over the past few weeks, I have been tarting up our C++ code to conform as exactly as possible to the ISO C++11 standard, using the final draft document (N3242) as a guide.</p>\n<p>As we know, there are occasional multiple declarations that creep into our code through externs appearing in more than one file, or typedefs that are repeated. According to this excerpt from section 7.1.3, page 145 of the above doco, this should be harmless:</p>\n<blockquote>\n<p id=\"so_6708726_6708726_0\">3. In a given non-class scope, a typedef specifier can be used to redefine the name of any type declared in that scope to refer to the type to which it already refers. </p>\n<p id=\"so_6708726_6708726_1\">[ Example:</p>\n<pre><code>   typedef struct s { /* ... */ } s; \n   typedef int I; \n   typedef int I; \n   typedef I I;\n</code></pre>\n<p id=\"so_6708726_6708726_2\">\u2014 end example ]</p>\n</blockquote>\n<p>So, I wrote a program to test this. In its simplest form:</p>\n<pre><code>typedef int (fcntype)(int, int);\nextern fcntype fcn1;\n\nint fcn1(int x, int y) { return x + y; }\n\nint main(int argc, char ** argv) { return fcn1(2, 3); }\n</code></pre>\n<p>Compiling using gcc with </p>\n<pre><code> -Wfatal-errors -Wswitch-default -Wswitch-enum -Wunused-parameter -Wfloat-equal -Wundef -c -Wstrict-null-sentinel -std=c++0x -pedantic -Wall -Wextra\n</code></pre>\n<p>there are, of course, no problems. Let's dup the function decl:</p>\n<pre><code>typedef int (fcntype)(int, int);\nextern fcntype fcn1;\nextern fcntype fcn1; // woops. probably from an #include ...\n\nint fcn1(int x, int y) { return x + y; }\n\nint main(int argc, char ** argv) { return fcn1(2, 3); }\n</code></pre>\n<p>As the standard predicts, no problems. Let's make a different change to the original:</p>\n<pre><code>typedef int (fcntype)(int, int=0); // default param.\nextern fcntype fcn1;\n\nint fcn1(int x, int y) { return x + y; }\n\nint main(int argc, char ** argv) { return fcn1(2); } // use the default param\n</code></pre>\n<p>Again, no problems. The problem comes about when we have both the duplicate decl and the defaulted parameter like this:</p>\n<pre><code>typedef int (fcntype)(int, int=0); // default param.\nextern fcntype fcn1;\nextern fcntype fcn1; // FYI this is line 3 in the error message below.\n\nint fcn1(int x, int y) { return x + y; }\n\nint main(int argc, char ** argv) { return fcn1(2); } // use the default param\n</code></pre>\n<p>And gcc complains with </p>\n<pre><code>decltest.cpp:3: error: default argument given for parameter 2 of \u2018int fcn1(int, int)\u2019\n</code></pre>\n<p>Of course, I am cleaning up the code the way it should be cleaned up, which is to say I am corralling the decls into one, better organized file. But is this a bug in the compiler or a misunderstanding of mine about what a default parameter \"is\"?</p>\n", "Tags": "<c++><c++11>", "OwnerUserId": "2386992", "AnswerCount": "3"}, "6724022": {"ParentId": "6708726", "CommentCount": "0", "Body": "<p>This generates the same error:</p>\n<pre><code>extern int fcn1(int, int=0);\nextern int fcn1(int, int=0);\n</code></pre>\n<p>So it's not surprising your <code>typedef</code> version doesn't work.</p>\n", "OwnerUserId": "428857", "PostTypeId": "2", "Id": "6724022", "Score": "0", "CreationDate": "2011-07-17T13:16:39.943", "LastActivityDate": "2011-07-17T13:16:39.943"}, "6708956": {"ParentId": "6708726", "PostTypeId": "2", "CommentCount": "2", "CreationDate": "2011-07-15T14:54:21.073", "Score": "6", "LastEditorUserId": "224671", "LastEditDate": "2011-07-15T15:09:54.987", "Id": "6708956", "OwnerUserId": "224671", "Body": "<p>Firstly, for the same function declaration with same types, there should only be at most one declaration which define the default arguments. This is due to \u00a78.3.6 [dcl.fct.default]/4:</p>\n<blockquote>\n<p id=\"so_6708726_6708956_0\">... A default argument shall not be redefined by a later declaration (not even to the same value). [ <em>Example</em>:</p>\n<pre><code>...\nvoid m() {\n    void f(int, int);     // has no defaults\n    f(4);                 // error: wrong number of arguments\n    void f(int, int = 5); // OK\n    f(4);                 // OK, calls f(4, 5);\n    void f(int, int = 5); // error: cannot redefine, even to same value\n}\n...\n</code></pre>\n<p id=\"so_6708726_6708956_1\">\u2014 <em>end example</em> ] ...</p>\n</blockquote>\n<p>Also, as @Sven noticed, a default argument shall not appear in a <code>typedef</code>, although g++ cannot catch it even with <code>-pedantic</code>. I think <a href=\"http://clang.llvm.org/doxygen/SemaDeclCXX_8cpp_source.html#l00323\" rel=\"nofollow\">clang</a> and <a href=\"http://permalink.gmane.org/gmane.comp.lib.boost.devel/214578\" rel=\"nofollow\">Visual C++</a> reject this but I haven't tried.</p>\n", "LastActivityDate": "2011-07-15T15:09:54.987"}, "6708967": {"ParentId": "6708726", "CommentCount": "0", "Body": "<p>Your standard quote doesn't apply here, since you're not declaring the typedef multiple times, but using it multiple times.</p>\n<p>Default arguments are indeed a tricky case, they can only appear in one declaration (and remember, the definition itself counts as a declaration, even putting the default argument in both a forward declaration and a definition is an error).</p>\n", "OwnerUserId": "103167", "PostTypeId": "2", "Id": "6708967", "Score": "1", "CreationDate": "2011-07-15T14:55:31.463", "LastActivityDate": "2011-07-15T14:55:31.463"}, "bq_ids": {"n4140": {"so_6708726_6708956_0": {"section_id": 3255, "quality": 0.8888888888888888, "length": 8}, "so_6708726_6708726_0": {"section_id": 5409, "quality": 1.0, "length": 15}}, "n3337": {"so_6708726_6708956_0": {"section_id": 3127, "quality": 0.8888888888888888, "length": 8}, "so_6708726_6708726_0": {"section_id": 5204, "quality": 1.0, "length": 15}}, "n4659": {"so_6708726_6708956_0": {"section_id": 4013, "quality": 0.8888888888888888, "length": 8}, "so_6708726_6708726_0": {"section_id": 6831, "quality": 1.0, "length": 15}}}});