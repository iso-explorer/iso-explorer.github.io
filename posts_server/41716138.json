post_cb({"41716138": {"CommentCount": "5", "ViewCount": "329", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2017-01-18T09:52:03.900", "LastActivityDate": "2017-04-26T03:15:56.493", "Title": "What is the reason for the existent difference between C and C++ relative to the unary arithmetic operator +", "FavoriteCount": "2", "LastEditDate": "2017-05-23T12:09:55.290", "Id": "41716138", "Score": "9", "Body": "<p>In C the unary plus operator is called <em>unary arithmetic operator</em> and may not be applied to pointers (the C Standard, 6.5.3.3 Unary arithmetic operators). </p>\n<blockquote>\n<p id=\"so_41716138_41716138_0\">1 The operand of the unary + or - operator <strong>shall have arithmetic\n  type</strong>; of the ~ operator, integer type; of the ! operator, scalar\n  type.</p>\n</blockquote>\n<p>Thus this program will not compile</p>\n<pre><code>#include &lt;stdio.h&gt;\n\nint main(void) \n{\n    int a = 10;\n    int *pa = &amp;a;\n\n    printf( \"%d\\n\", *+pa );\n\n    return 0;\n}\n</code></pre>\n<p>However in C++ the unary plus operator may be applied to pointers (the C++ Standard, 5.3.1 Unary operators)</p>\n<blockquote>\n<p id=\"so_41716138_41716138_1\">7 The operand of the unary + operator shall have arithmetic, unscoped\n  enumeration, <strong>or pointer type</strong> and the result is the value of the\n  argument. Integral promotion is performed on integral or enumeration\n  operands. The type of the result is the type of the promoted operand.</p>\n</blockquote>\n<p>And this program compiles successfully.</p>\n<pre><code>#include &lt;iostream&gt;\n\nint main() \n{\n    int a = 10;\n    int *pa = &amp;a;\n\n    std::cout &lt;&lt; *+pa &lt;&lt; std::endl;\n\n    return 0;\n}\n</code></pre>\n<p>What is the reason for maintaining this difference between C and C++?</p>\n<hr>\n<p>The question arose when I was answering the question <a href=\"https://stackoverflow.com/questions/41699762/why-size-of-int-pointer-is-different-of-size-of-int-array/41699896#41699896\">Why size of int pointer is different of size of int array?</a>. I was going to show how to convert an array to a pointer in the <code>sizeof</code> operator.</p>\n<p>At first I wanted to write</p>\n<pre><code>sizeof( +array )\n</code></pre>\n<p>However this expression is invalid in C. So I had to write</p>\n<pre><code>sizeof( array + 0 )\n</code></pre>\n<p>and I found that there is such a difference between C and C++.:)</p>\n</hr>", "Tags": "<c++><c><pointers><unary-operator>", "OwnerUserId": "2877241", "AnswerCount": "3"}, "43624383": {"ParentId": "41716138", "CommentCount": "3", "Body": "<p>Not that this answers your question asked, but for the question you wanted show a conversion for, I would use:</p>\n<pre><code>sizeof(&amp;array[0])\n</code></pre>\n<p>which is effectively the same thing as (array + 0), but more clearly indicates \"pointer to the first element\".  And show that (provided the array is not of size 1 on a 64-bit machine) it will be the same as sizeof(int), wheras</p>\n<pre><code>sizeof(array)\n</code></pre>\n<p>would not be the same.</p>\n", "OwnerUserId": "7898105", "PostTypeId": "2", "Id": "43624383", "Score": "-1", "CreationDate": "2017-04-26T03:15:56.493", "LastActivityDate": "2017-04-26T03:15:56.493"}, "42942489": {"ParentId": "41716138", "CommentCount": "3", "Body": "<p>In my considerations:</p>\n<p>C++ is a type of Object-Oriented Language. So every data type can be treated as a \"Class\".</p>\n<p>In C int is one of \"the basic data type of C\". But in C++ we can consider int as a Class. Thus, In C++ int pointer and int array belong to the different classes. In C a int pointer variable stored another int variable's address. int array's name instead of the first element's address of that int array. So in C they have kind of the same meaning.</p>\n<p>As for the unary opreator \"+\", I understand the C++ language as: Every class In C++ represents a set of stuff. Every stuff in the set has the same properties. And there's some operations can be done onto each stuff. Of course these operations are member functions of a class. Another character In C++ is that users can overload an operator. Overload means we can do the same operation on the different Classes. For example: A man is eating a burger. we can overload action \"Eat\" between cats and rat: A cat is Eating a rat.</p>\n<p>So as the C++ standard say:\"<strong>The operand of the unary + operator shall have arithmetic, unscoped enumeration, or pointer type and the result is the value of the argument.</strong>\" That's just a overload for unary operator + in Class <em>unscoped enumeration</em> and <em>pointer type</em>. \"<strong>And The Result Is The Value Of The Argument</strong>\"-&gt; I guess that's the point. </p>\n", "OwnerUserId": "7073346", "PostTypeId": "2", "Id": "42942489", "Score": "-2", "CreationDate": "2017-03-22T03:58:06.903", "LastActivityDate": "2017-03-22T03:58:06.903"}, "bq_ids": {"n4140": {"so_41716138_41716138_1": {"section_id": 6070, "quality": 0.92, "length": 23}, "so_41716138_41716138_0": {"section_id": 6070, "quality": 0.6153846153846154, "length": 8}}, "n3337": {"so_41716138_41716138_1": {"section_id": 5838, "quality": 0.92, "length": 23}, "so_41716138_41716138_0": {"section_id": 5838, "quality": 0.6153846153846154, "length": 8}}, "n4659": {"so_41716138_41716138_1": {"section_id": 7566, "quality": 0.92, "length": 23}, "so_41716138_41716138_0": {"section_id": 7566, "quality": 0.6153846153846154, "length": 8}}}, "41716583": {"ParentId": "41716138", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Different languages may attach different semantics to the same syntax.</p>\n<p>C and C++ are different languages with a common ancestor. C++ semantics look deceptively similar but are subtly different for some parts of the common syntax. Another curious case is this:</p>\n<pre><code>if (sizeof(char) == sizeof(int)) {\n    printf(\"Hello embedded world\\n\");\n} else {\n    if (sizeof('a') == sizeof(char))\n        printf(\"This is C++ code\\n\");\n    if (sizeof('a') == sizeof(int))\n        printf(\"This is C code\\n\");\n}\n</code></pre>\n<p>The reason for C++ to have extended the C syntax in the case of unary <code>+</code> might be to allow for some extended numeric types to be implemented as pointers, or simply for reasons of symmetry.</p>\n<p>As Jaa-c mentions in a comment, <code>+p</code> is a computed expression whereas <code>p</code> is a reference to <code>p</code>. You provided another example where <code>+</code> can be used to force expression context. The question is why did the original authors of the C language disallow unary <code>+</code> on non numeric types? Maybe a side effect of the original implementation of <code>pcc</code>.</p>\n<p>Note that in Javascript, the unary <code>+</code> operator can be applied to non number types and operates as a conversion to number.</p>\n", "OwnerUserId": "4593267", "LastEditorUserId": "4593267", "LastEditDate": "2017-01-18T10:31:05.060", "Id": "41716583", "Score": "1", "CreationDate": "2017-01-18T10:12:11.927", "LastActivityDate": "2017-01-18T10:31:05.060"}});