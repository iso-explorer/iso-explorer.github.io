post_cb({"bq_ids": {"n4140": {"so_35978601_35978659_0": {"length": 21, "quality": 1.0, "section_id": 6164}}, "n3337": {"so_35978601_35978659_0": {"length": 21, "quality": 1.0, "section_id": 5925}}, "n4659": {"so_35978601_35978659_0": {"length": 21, "quality": 1.0, "section_id": 7661}}}, "35978659": {"Id": "35978659", "PostTypeId": "2", "Body": "<p>If the <code>&amp;&amp;</code> operator is the built-in operator, then yes. From [expr.log.and]/2:</p>\n<blockquote>\n<p id=\"so_35978601_35978659_0\">If the second expression is evaluated, every value computation and side effect associated with the first expression is sequenced before every value computation and side effect associated with the second expression.</p>\n</blockquote>\n<p>If the operator is overloaded, it is a normal function call, and the order of evaluation of the function call arguments is unspecified.</p>\n", "LastActivityDate": "2016-03-14T02:34:18.030", "Score": "6", "CreationDate": "2016-03-14T02:34:18.030", "ParentId": "35978601", "CommentCount": "6", "OwnerUserId": "596781"}, "35978601": {"ViewCount": "54", "Body": "<p>For example, in the following expression</p>\n<p><code>i-- &amp;&amp; expr</code></p>\n<p>Will <code>i</code> be already decremented when evaluating <code>expr</code>? Language-lawyers would be adapt here.</p>\n", "AcceptedAnswerId": "35978659", "Title": "Interaction between post-decrement and logical operators", "CreationDate": "2016-03-14T02:25:44.317", "Id": "35978601", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2016-03-14T02:34:18.030", "Score": "4", "OwnerUserId": "1348273", "Tags": "<c++><language-lawyer><undefined-behavior><side-effects>", "AnswerCount": "1"}});