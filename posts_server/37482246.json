post_cb({"37482246": {"ViewCount": "738", "Body": "<p>Given <code>string foo</code>, I've written <a href=\"https://stackoverflow.com/a/37438120/2642059\">answers</a> on how to use <code>cctype</code>'s <a href=\"http://en.cppreference.com/w/cpp/string/byte/tolower\" rel=\"nofollow noreferrer\"><code>tolower</code></a> to convert the characters to lowercase</p>\n<pre><code>transform(cbegin(foo), cend(foo), begin(foo), static_cast&lt;int (*)(int)&gt;(tolower))\n</code></pre>\n<p>But I've <a href=\"https://stackoverflow.com/q/37436755/2642059\">begun to consider</a> <code>locale</code>'s <a href=\"http://en.cppreference.com/w/cpp/locale/tolower\" rel=\"nofollow noreferrer\"><code>tolower</code></a>, which could be used like this:</p>\n<pre><code>use_facet&lt;ctype&lt;char&gt;&gt;(cout.getloc()).tolower(data(foo), next(data(foo), foo.size()));\n</code></pre>\n<ul>\n<li>Is there a reason to prefer one of these over the other? </li>\n<li>Does their functionality differ at all? </li>\n<li>I mean other than the fact that <code>tolower</code> accepts and returns an <code>int</code> which I assume is just some antiquated C stuff?</li>\n</ul>\n", "AcceptedAnswerId": "37593205", "Title": "Which tolower in C++?", "CreationDate": "2016-05-27T11:24:27.403", "Id": "37482246", "CommentCount": "35", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2017-05-23T12:34:57.320", "LastEditorUserId": "-1", "LastActivityDate": "2016-06-02T13:25:11.337", "Score": "19", "OwnerUserId": "2642059", "Tags": "<c++><string><locale><ctype><tolower>", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_37482246_37593205_0": {"length": 15, "quality": 0.9375, "section_id": 5439}}, "n3337": {"so_37482246_37593205_0": {"length": 15, "quality": 0.9375, "section_id": 5234}}, "n4659": {"so_37482246_37593205_0": {"length": 14, "quality": 0.875, "section_id": 6866}}}, "37482763": {"Id": "37482763", "PostTypeId": "2", "Body": "<p>In the first case (cctype) the locale is set implicitely:</p>\n<blockquote>\n<p id=\"so_37482246_37482763_0\">Converts the given character to lowercase according to the character\n  conversion rules defined by the currently installed C locale.</p>\n</blockquote>\n<p><a href=\"http://en.cppreference.com/w/cpp/string/byte/tolower\" rel=\"nofollow\">http://en.cppreference.com/w/cpp/string/byte/tolower</a></p>\n<p>In the second (locale's) case you have to explicitely set the locale:</p>\n<blockquote>\n<p id=\"so_37482246_37482763_1\">Converts parameter c to its lowercase equivalent if c is an uppercase\n  letter and has a lowercase equivalent, as determined by the ctype\n  facet of locale loc. If no such conversion is possible, the value\n  returned is c unchanged.</p>\n</blockquote>\n<p><a href=\"http://www.cplusplus.com/reference/locale/tolower/\" rel=\"nofollow\">http://www.cplusplus.com/reference/locale/tolower/</a></p>\n", "LastActivityDate": "2016-05-27T11:48:32.920", "CommentCount": "0", "CreationDate": "2016-05-27T11:48:32.920", "ParentId": "37482246", "Score": "4", "OwnerUserId": "1788806"}, "37593205": {"Id": "37593205", "PostTypeId": "2", "Body": "<p>It should be noted that the language designers <em>were</em> aware of <code>cctype</code>'s <code>tolower</code> when <code>locale</code>'s <code>tolower</code> was created. It improved in 2 primary ways:</p>\n<ol>\n<li>As is mentioned in <a href=\"https://stackoverflow.com/a/37482763/2642059\">progressive_overload's answer</a> the <code>locale</code> version allowed the use of the <code>facet ctype</code>, even a user modified one, <em>without</em> requiring the shuffling in of a new <code>LC_CTYPE</code> in via <code>setlocale</code> and the restoration of the previous <code>LC_CTYPE</code></li>\n<li>From section 7.1.6.2[dcl.type.simple]3:</li>\n</ol>\n<blockquote>\n<p id=\"so_37482246_37593205_0\">It is implementation-defined whether objects of <code>char</code> type are represented as signed or unsigned quantities. The <code>signed</code> specifier forces <code>char</code> objects to be signed</p>\n</blockquote>\n<p>Which creates an the potential for undefined behavior with the <code>cctype</code> version of <a href=\"http://en.cppreference.com/w/cpp/string/byte/tolower\" rel=\"nofollow noreferrer\"><code>tolower</code></a>'s if it's argument:</p>\n<blockquote>\n<p id=\"so_37482246_37593205_1\">Is not representable as <code>unsigned char</code> and does not equal <code>EOF</code></p>\n</blockquote>\n<p>So there is an additional input and output <code>static_cast</code> required by the <code>cctype</code> version of <code>tolower</code> yielding:</p>\n<pre><code>transform(cbegin(foo), cend(foo), begin(foo), [](const unsigned char i){ return tolower(i); });\n</code></pre>\n<p>Since the <code>locale</code> version operates directly on <code>char</code>s there is no need for a type conversion.</p>\n<p><strong>So if you don't need to perform the conversion in a different <code>facet ctype</code> it simply becomes a style question of whether you prefer the <code>transform</code> with a lambda required by the <code>cctype</code> version, or whether you prefer the <code>locale</code> version's:</strong></p>\n<pre><code>use_facet&lt;ctype&lt;char&gt;&gt;(cout.getloc()).tolower(data(foo), next(data(foo), size(foo)));\n</code></pre>\n", "LastEditorUserId": "-1", "LastActivityDate": "2016-06-02T13:25:11.337", "Score": "1", "CreationDate": "2016-06-02T13:25:11.337", "ParentId": "37482246", "CommentCount": "0", "OwnerUserId": "2642059", "LastEditDate": "2017-05-23T10:34:01.557"}, "37483982": {"Id": "37483982", "PostTypeId": "2", "Body": "<p>Unfortunately,both are equally bad. Although <code>std::string</code>  pretends to be a utf-8 encoded string, non of the methods/function (including tolower), are really utf-8 aware. So, <code>tolower</code> / <code>tolower</code> + locale may work with characters which are single byte (= ASCII), they will fail for every other set of languages. </p>\n<p>On Linux, I'd use ICU library. On Windows, I'd use <code>CharUpper</code> function.</p>\n", "LastActivityDate": "2016-05-27T12:47:42.440", "CommentCount": "8", "CreationDate": "2016-05-27T12:47:42.440", "ParentId": "37482246", "Score": "5", "OwnerUserId": "5626113"}});