post_cb({"35774127": {"Id": "35774127", "PostTypeId": "2", "Body": "<p>The problem has nothing to do with <code>std::less&lt;&gt;</code>. In your first <code>insert()</code> call at this point:</p>\n<pre><code>if ( _M_keycmp(x-&gt;key, key) ) \n</code></pre>\n<p><code>x</code> is a null pointer. It's that dereferencing that caused the segmentation fault, not anything in the call to <code>_M_keycmp</code>.</p>\n<hr/>\n<p>Side-note: All of your member names are reserved words in C++. From [lex.name]:</p>\n<blockquote>\n<p id=\"so_35773773_35774127_0\">Each identifier that contains a double underscore <code>__</code> <strong>or begins with an underscore followed by an uppercase letter</strong> is reserved to the implementation for any use.</p>\n</blockquote>\n", "LastActivityDate": "2016-03-03T13:54:53.333", "CommentCount": "0", "CreationDate": "2016-03-03T13:54:53.333", "ParentId": "35773773", "Score": "0", "OwnerUserId": "2069064"}, "bq_ids": {"n4140": {"so_35773773_35774127_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 6307}}, "n3337": {"so_35773773_35774127_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 6064}}, "n4659": {"so_35773773_35774127_0": {"length": 13, "quality": 1.0, "section_id": 6756}}}, "35773773": {"ViewCount": "280", "Body": "<p>I use template to write skip list. And when I run it,I got a Segmentation fault when I call function <code>insert</code>.And I debug with gdb it tells me the problem cause because call <code>std::less&lt;int&gt;::operator()</code>.I have see the <a href=\"http://en.cppreference.com/w/cpp/utility/functional/less\" rel=\"nofollow\">example</a>,but I still why I am wrong.\n<strong>skiplist.h:</strong></p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\nnamespace IceCity{\n    const double DEFAULT_PROBILITY = 1/4;\n    const int    DEFAULT_MAXSIZE   = 16;\n    //node base\n    template &lt;typename KeyValue,typename Value&gt;\n    struct sklist_node \n    {\n        KeyValue key;\n        Value value;\n        sklist_node&lt;KeyValue,Value&gt;** forward;\n    };\n    template &lt;typename KeyValue,typename Value,\n             typename KeyCmp = std::less&lt;KeyValue&gt; , \n             typename ValueCmp = std::equal_to&lt;Value&gt; &gt;\n    class sklist\n    {\n    public:     \n        sklist (int limitlevel = DEFAULT_MAXSIZE, double pro = DEFAULT_PROBILITY) :\n            _M_limitlevel(limitlevel), _M_pro(pro)\n        {\n            _M_maxlevel = 0;    \n            _M_header = make_node(limitlevel, 0, 0);\n        }\n        virtual ~sklist ()\n        {\n            //TODO:free\n            _M_NodePointer x = _M_header;\n            _M_NodePointer tmp = x-&gt;forward[0];\n            while (tmp != nullptr) \n            {\n                delete x;   \n                x = tmp;\n                tmp = tmp-&gt;forward[0];\n            };      \n        }\n    //Data member\n    private:\n        typedef  sklist_node&lt;KeyValue,Value&gt;    _M_Node;\n        typedef  sklist_node&lt;KeyValue,Value&gt;*   _M_NodePointer;\n        typedef  Value*                         _M_ValuePoiner;\n        int                                     _M_limitlevel;\n        double                                  _M_pro;\n        _M_NodePointer                          _M_header;\n        KeyCmp                                  _M_keycmp;\n        ValueCmp                                _M_valuecmp;\n        int                                     _M_maxlevel;    \n    //private member function\n    private:\n        /****\n        * make a node with level and key *\n        ****/\n        inline _M_NodePointer\n        make_node(int level, KeyValue key, Value value) \n        {\n            _M_NodePointer res      = new _M_Node;\n            res-&gt;key            = key;\n            res-&gt;value          = value;\n            res-&gt;forward        = new _M_NodePointer [level+1];\n            return res;\n        }\n\n        /****\n        * creat an rand number [0.0,1.0) *\n        ****/\n        inline double \n        random_pro()\n        {\n            return static_cast&lt;double&gt;(rand())/RAND_MAX;\n        }\n\n        /****\n        * get the level for a node *\n        ****/\n        int \n        random_level()\n        {\n            int level = 0;\n            while ( random_pro() &lt; _M_pro &amp;&amp; level &lt; _M_limitlevel ) \n            {\n                level++;    \n            }\n            return level;\n        }\n    public\uff1a\n        /****\n        * insert an node in skiplist *\n        ****/\n        void \n        insert(KeyValue key, Value NewValue)\n        {\n            _M_NodePointer x = _M_header;\n            _M_NodePointer update[_M_limitlevel+1];\n            memset( update, 0, _M_limitlevel+1 );\n            for(int i = _M_maxlevel; i &gt;=0 ; --i)   \n            {\n                while (x-&gt;forward[i] != nullptr &amp;&amp; _M_keycmp(x-&gt;forward[i]-&gt;key, key)) \n                {\n                    x = x-&gt;forward[i];  \n                }\n                update[i] = x;\n            }\n            x = x-&gt;forward[0];\n            /****\n            * if x-&gt;key equal to search key update it\n            * else insert it*\n            ****/\n\n            if ( _M_keycmp(x-&gt;key, key) ) \n            {\n                x-&gt;value = NewValue;    \n            }\n            else \n            {\n                int level = random_level();\n                if ( level &gt; _M_maxlevel ) \n                {\n                    for(int i = _M_maxlevel+1; i &lt;= level; ++i) \n                    {\n                        update[i] = _M_header;  \n                    }\n                    // update maxlevel\n                    _M_maxlevel = level;\n                }\n                x = make_node( level, key, NewValue );\n                for( int i = 0; i &lt;= level; ++i )\n                {\n                    x-&gt;forward[i] = update[i]-&gt;forward[i];  \n                    update[i]-&gt;forward[i] = x;\n                }\n            }\n        }   \n    };\n}\n#endif /* ifndef IC_BASE_LIST */\n</code></pre>\n<p><strong>skiplist.cpp:</strong></p>\n<pre><code>#include \"base_list.h\"\n#include &lt;iostream&gt;\nint main(int argc, char *argv[])\n{\n    IceCity::sklist&lt;int, int&gt; ss;\n\n    for (int i = 0; i &lt; 20; ++i) {\n        ss.insert(i, i*10); \n    }\n    return 0;\n}\n</code></pre>\n<p><strong>wroing message</strong>:</p>\n<pre><code>Program received signal SIGSEGV, Segmentation fault.\n0x0000000000401894 in std::less&lt;int&gt;::operator()(int const&amp;, int const&amp;) const ()\n[0] from 0x0000000000401894 in std::less&lt;int&gt;::operator()(int const&amp;, int const&amp;) const\n(no arguments)\n[1] from 0x0000000000401286 in IceCity::sklist&lt;int, int, std::less&lt;int&gt;, std::equal_to&lt;int&gt; &gt;::insert(int, int)\n(no arguments)\n</code></pre>\n", "AcceptedAnswerId": "35774127", "Title": "Using template call std::less<int>::operator() cause segmentation fault", "CreationDate": "2016-03-03T13:39:34.440", "Id": "35773773", "CommentCount": "0", "LastEditDate": "2016-03-03T13:55:00.193", "PostTypeId": "1", "LastEditorUserId": "2069064", "LastActivityDate": "2016-03-03T13:55:00.193", "Score": "0", "OwnerUserId": "4370917", "Tags": "<c++><templates><c++11><stl>", "AnswerCount": "1"}});