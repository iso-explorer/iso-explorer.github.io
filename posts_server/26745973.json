post_cb({"26746325": {"ParentId": "26745973", "CommentCount": "0", "Body": "<p>\u00a714 [temp]/p6:</p>\n<blockquote>\n<p id=\"so_26745973_26746325_0\">A function template, member function of a class template, variable\n  template, or static data member of a class template shall be defined\n  in every translation unit in which it is implicitly instantiated\n  (14.7.1) unless the corresponding specialization is explicitly\n  instantiated (14.7.2) in some translation unit; no diagnostic is\n  required.</p>\n</blockquote>\n<p>Your code is ill-formed with no diagnostic required. Both compilers are behaving correctly.</p>\n", "OwnerUserId": "2756719", "PostTypeId": "2", "Id": "26746325", "Score": "7", "CreationDate": "2014-11-04T22:32:36.437", "LastActivityDate": "2014-11-04T22:32:36.437"}, "bq_ids": {"n4140": {"so_26745973_26746325_0": {"section_id": 53, "quality": 0.9333333333333333, "length": 28}}, "n3337": {"so_26745973_26746325_0": {"section_id": 48, "quality": 0.8666666666666667, "length": 26}}, "n4659": {"so_26745973_26746325_0": {"section_id": 55, "quality": 0.9333333333333333, "length": 28}}}, "26745973": {"CommentCount": "2", "ViewCount": "133", "PostTypeId": "1", "LastEditorUserId": "3204551", "CreationDate": "2014-11-04T22:07:10.980", "LastActivityDate": "2014-11-04T22:32:36.437", "Title": "Potential evaluation of inline function bodies and instatiation of template members", "AcceptedAnswerId": "26746325", "LastEditDate": "2014-11-04T22:23:23.870", "Id": "26745973", "Score": "4", "Body": "<p>When are expressions contained inside a function marked inline considered 'potentially evaluated'?</p>\n<p>a.cpp\n</p>\n<pre><code>template &lt;typename T&gt;\nconst T&amp; foo(const T&amp; arg) { return arg; }\n\ninline void dead() {\n    int x(21);\n    x = foo(x);\n}\n</code></pre>\n<p>b.cpp\n</p>\n<pre><code>#include &lt;iostream&gt;\n\ntemplate &lt;typename T&gt; const T&amp; foo(const T&amp;);\n\nint main(int argc, char *argv[]) {\n    std::cout &lt;&lt; foo(12) &lt;&lt; std::endl;\n}\n</code></pre>\n<p>If expressions are considered 'potentially evaluated' as soon as the inline function is defined, then the template should be instantiated, and I would expect <code>$(CCC) -c a.cpp; $(CCC) -c b.cpp; $(CCC) a.o b.o -o bin</code> to link successfully.  If instead the expressions within a function declared inline only become 'potentially evaluated' when such a function itself becomes odr-used, then I would expect <code>$(CCC) -c a.cpp; $(CCC) -c b.cpp; $(CCC) a.o b.o -o bin</code> to fail during link step.</p>\n<p>Thus far I have tested xl C++ 12 (which links successfully), and various versions of gcc + clang 3.5 (all of which fail to link).</p>\n<p>Which behaviour is correct?  Am I missing a third option here?</p>\n", "Tags": "<c++><c++11><language-lawyer><inline-functions><one-definition-rule>", "OwnerUserId": "242369", "AnswerCount": "1"}});