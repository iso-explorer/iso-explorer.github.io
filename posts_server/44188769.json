post_cb({"44188888": {"ParentId": "44188769", "CommentCount": "4", "Body": "<p>No, <code>unsigned int</code> is not a simple-type-specifier.  If you read the <a href=\"http://eel.is/c++draft/dcl.type.simple#2\" rel=\"noreferrer\">preceding paragraph</a> you have</p>\n<blockquote>\n<p id=\"so_44188769_44188888_0\">Table 11 summarizes the <strong>valid combinations</strong> of simple-type-specifiers and the types they specify.</p>\n</blockquote>\n<p><sup>emphasis mine</sup></p>\n<p>So, while both <code>unsigned</code> and <code>int</code> are listed in <a href=\"http://eel.is/c++draft/dcl.type.simple#1\" rel=\"noreferrer\">paragraph 1</a> as simple-type-specifiers the combination of the two is not, but it is a valid type.</p>\n", "OwnerUserId": "4342498", "PostTypeId": "2", "Id": "44188888", "Score": "5", "CreationDate": "2017-05-25T19:59:35.737", "LastActivityDate": "2017-05-25T19:59:35.737"}, "44188769": {"CommentCount": "2", "ViewCount": "94", "PostTypeId": "1", "LastEditorUserId": "5479741", "CreationDate": "2017-05-25T19:52:21.200", "LastActivityDate": "2017-05-26T22:02:30.227", "Title": "Is unsigned int a `simple-type-specifier`", "AcceptedAnswerId": "44188888", "LastEditDate": "2017-05-26T13:39:22.400", "Id": "44188769", "Score": "3", "Body": "<p>The reason I'm asking this is because, notwithstanding the fact that the title for <a href=\"http://eel.is/c++draft/dcl.type.simple#tab:simple.type.specifiers\" rel=\"nofollow noreferrer\">Table 11</a> is <em>simple-type-specifiers and the types they specify</em>, the grammar production <a href=\"http://eel.is/c++draft/dcl.type.simple#1\" rel=\"nofollow noreferrer\">simple-type-specifier</a> doesn't mention this combination of types, as a <em>simple-type-specifier</em>.  So is <code>unsigned int</code> a simple-type-specifier?</p>\n<p><strong>Edit</strong>: <strike>I don't think the answer given to the <a href=\"https://stackoverflow.com/questions/38977808\">aforementioned question</a> is correct. If that was true, one would not be able to say that the declaration <code>void* operator new(std::size_t);</code> is a <em>declaration</em> as defined in <a href=\"http://eel.is/c++draft/dcl.type.simple#1\" rel=\"nofollow noreferrer\">[dcl.dcl]/1</a>, as <code>size_t</code> is <code>typedef</code> defined (in my system) as <code>unsigned int</code>. To show this assertion, i.e., that <code>void* operator new(std::size_t);</code> is a <em>declaration</em>, I almost sure we need the fact that an <code>unsigned int</code> <strong>is</strong> a <em>simple-type-specifier</em>.</strike>. <strike>I was wrong. There is no problem in saying that <code>void* operator new(std::size_t);</code> is a <em>declaration</em>, if we use the definition of <em>type-name</em> given in <a href=\"http://eel.is/c++draft/dcl.type.simple#1\" rel=\"nofollow noreferrer\">[dcl.type.simple]/1</a></strike>. I think I was right the first time, except for the wrong example. That is, I believe that <code>unsigned int</code> <strong>has to be</strong> a <em><a href=\"http://eel.is/c++draft/dcl.type.simple#1\" rel=\"nofollow noreferrer\">simple-type-specifier</a></em>, otherwise one would not be able to say that <code>void f(unsigned int);</code> is a <a href=\"http://eel.is/c++draft/dcl.dcl#1\" rel=\"nofollow noreferrer\"><em>declaration</em></a>.</p>\n<p>.   </p>\n", "Tags": "<c++><types><language-lawyer>", "OwnerUserId": "5479741", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_44188769_44188888_0": {"section_id": 5438, "quality": 0.875, "length": 7}}, "n3337": {"so_44188769_44188888_0": {"section_id": 5233, "quality": 0.875, "length": 7}}, "n4659": {"so_44188769_44188888_0": {"section_id": 6865, "quality": 0.875, "length": 7}}}});