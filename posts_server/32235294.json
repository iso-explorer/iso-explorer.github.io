post_cb({"32235294": {"CommentCount": "3", "ViewCount": "454", "CreationDate": "2015-08-26T19:38:03.767", "LastActivityDate": "2015-08-26T20:05:27.913", "Title": "What is the default access of constructor in c++", "PostTypeId": "1", "Id": "32235294", "Score": "3", "Body": "<p><strong>What</strong> is the default access of constructor in c++ and <strong>why</strong> ?</p>\n<p>public, private or protected ?</p>\n<p>And how do I check it through the <em>code</em> ?</p>\n", "Tags": "<c++><constructor><default><public>", "OwnerUserId": "4494612", "AnswerCount": "4"}, "32235360": {"ParentId": "32235294", "CommentCount": "0", "CreationDate": "2015-08-26T19:41:44.753", "OwnerUserId": "493122", "PostTypeId": "2", "Id": "32235360", "Score": "4", "Body": "<blockquote>\n<p id=\"so_32235294_32235360_0\">What is the default access of constructor in C++ and why?</p>\n</blockquote>\n<p>The implicitly generated default constructor, copy constructor, move constructor, copy assignment, move assignment and destructors are all implicitly declared <code>public</code> for obvious reasons (otherwise by default all types would not be instanciable, copyable, movable and destructible).</p>\n<p>If you are to declare your own default constructor, then of course it depends on what kind of visibility you set for it, just like any other member function.</p>\n<blockquote>\n<p id=\"so_32235294_32235360_1\">And how do I check it through the code ?</p>\n</blockquote>\n<p>If your default constructor, for the type <code>T</code>, was declared <code>protected</code> or <code>private</code> the following would not compile:</p>\n<pre><code>T x;\n</code></pre>\n", "LastActivityDate": "2015-08-26T19:41:44.753"}, "32235321": {"ParentId": "32235294", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2015-08-26T19:39:38.313", "Score": "1", "LastEditorUserId": "560648", "LastEditDate": "2015-08-26T19:45:53.953", "Id": "32235321", "OwnerUserId": "871910", "Body": "<p>There's no default access for a constructor or any other member. In a class defined with the keyword <code>class</code> all members are private by default; in a class defined with the keyword <code>struct</code> they are public by default. That includes the constructor.</p>\n", "LastActivityDate": "2015-08-26T19:45:53.953"}, "32235317": {"ParentId": "32235294", "PostTypeId": "2", "CommentCount": "7", "CreationDate": "2015-08-26T19:39:17.063", "Score": "11", "LastEditorUserId": "1683939", "LastEditDate": "2015-08-26T20:05:27.913", "Id": "32235317", "OwnerUserId": "1683939", "Body": "<p>If you do not declare a constructor yourself, the compiler will always generate a <code>public</code> trivial one for you. They will also implicitly create a public copy constuctor and copy assignment operator.</p>\n<p>From c++ standard 12.1.5:</p>\n<blockquote>\n<p id=\"so_32235294_32235317_0\">If there is no user-declared constructor for class X, a constructor having no parameters is implicitly declared as defaulted. An implicitly-declared default constructor is an inline public member of its class.</p>\n</blockquote>\n<p>12.8.7 and 12.8.11:</p>\n<blockquote>\n<p id=\"so_32235294_32235317_1\">If the class definition does not explicitly declare a copy constructor, one is declared implicitly. [...]\n  An implicitly-declared copy/move constructor is an inline public member of its class.</p>\n</blockquote>\n<p>Finally 12.8.18, 12.8.20, 12.8.22:</p>\n<blockquote>\n<p id=\"so_32235294_32235317_2\">If the class definition does not explicitly declare a copy assignment operator, one is declared implicitly. [...]\n  If the definition of a class X does not explicitly declare a move assignment operator, one will be implicitly declared [...].\n  An implicitly-declared copy/move assignment operator is an inline public member of its class.</p>\n</blockquote>\n<p>If you are using <code>c++11</code> the move constructor will not always be generated. See section 12.8.20 for more information.</p>\n", "LastActivityDate": "2015-08-26T20:05:27.913"}, "32235352": {"ParentId": "32235294", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2015-08-26T19:41:25.853", "Score": "3", "LastEditorUserId": "4342498", "LastEditDate": "2015-08-26T19:53:14.633", "Id": "32235352", "OwnerUserId": "4342498", "Body": "<p>There is not default access to constructors.  You decide what the access is when you declare it in the class.  If you are talking about the default constructor that is created by the compiler then the C++ standard 12.1.4 has:</p>\n<blockquote>\n<p id=\"so_32235294_32235352_0\">[...]An implicitly-declared default constructor is an inline public member of its class.</p>\n</blockquote>\n", "LastActivityDate": "2015-08-26T19:53:14.633"}, "bq_ids": {"n4140": {"so_32235294_32235317_2": {"section_id": 467, "quality": 0.625, "length": 20}, "so_32235294_32235317_1": {"section_id": 456, "quality": 0.6666666666666666, "length": 12}, "so_32235294_32235317_0": {"section_id": 369, "quality": 1.0, "length": 18}, "so_32235294_32235352_0": {"section_id": 369, "quality": 1.0, "length": 8}}, "n3337": {"so_32235294_32235317_2": {"section_id": 458, "quality": 0.625, "length": 20}, "so_32235294_32235317_1": {"section_id": 447, "quality": 0.6666666666666666, "length": 12}, "so_32235294_32235317_0": {"section_id": 359, "quality": 1.0, "length": 18}, "so_32235294_32235352_0": {"section_id": 359, "quality": 1.0, "length": 8}}, "n4659": {"so_32235294_32235317_2": {"section_id": 490, "quality": 0.625, "length": 20}, "so_32235294_32235317_0": {"section_id": 381, "quality": 1.0, "length": 18}, "so_32235294_32235317_1": {"section_id": 479, "quality": 0.6666666666666666, "length": 12}, "so_32235294_32235352_0": {"section_id": 381, "quality": 1.0, "length": 8}}}});