post_cb({"8784923": {"Id": "8784923", "PostTypeId": "2", "Body": "<p>According to <strong>\u00a727.3/2</strong>:</p>\n<blockquote>\n<p id=\"so_8784892_8784923_0\">The objects [std::cin, std::cout, etc.] are constructed, and the\n  associations are established at some time prior to or during first\n  time an object of class ios_base::Init is constructed, and in any case\n  before the body of main begins execution.</p>\n</blockquote>\n", "LastEditorUserId": "2349936", "LastActivityDate": "2015-11-21T20:10:25.820", "Score": "10", "CreationDate": "2012-01-09T07:03:34.313", "ParentId": "8784892", "CommentCount": "7", "OwnerUserId": "619570", "LastEditDate": "2015-11-21T20:10:25.820"}, "8784892": {"ViewCount": "3310", "Body": "<p>What I know about C++ is that the order of the constructions (and destructions) of global instances should not be assumed.</p>\n<p>While I'm writing code with a global instance which uses <code>std::cout</code> in the constructor &amp; destructor, I got a question.</p>\n<p><code>std::cout</code> is also a global instance of iostream. Is <code>std::cout</code> guaranteed to be initialized before any other global instances?</p>\n<p>I wrote a simple test code and it works perfectly, but still I don't know why.</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct test\n{\n    test() { std::cout &lt;&lt; \"test::ctor\" &lt;&lt; std::endl; }\n    ~test() { std::cout &lt;&lt; \"test::dtor\" &lt;&lt; std::endl; }\n};\n\ntest t;\n\nint main()\n{\n    std::cout &lt;&lt; \"Hello world\" &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>\n<p>It prints</p>\n<pre><code>test::ctor\nHello world\ntest::dtor\n</code></pre>\n<p>Is there any possibility that the code doesn't run as expected?</p>\n", "AcceptedAnswerId": "8785008", "Title": "Is std::cout guaranteed to be initialized?", "CreationDate": "2012-01-09T06:59:59.763", "Id": "8784892", "CommentCount": "3", "FavoriteCount": "5", "PostTypeId": "1", "LastEditDate": "2015-12-03T13:55:35.133", "LastEditorUserId": "3777958", "LastActivityDate": "2015-12-03T13:55:35.133", "Score": "32", "OwnerUserId": "1030861", "Tags": "<c++><constructor><global-variables>", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_8784892_8784923_0": {"length": 20, "quality": 0.8333333333333334, "section_id": 1920}}, "n3337": {"so_8784892_8784923_0": {"length": 20, "quality": 0.8333333333333334, "section_id": 1909}}, "n4659": {"so_8784892_8784923_0": {"length": 20, "quality": 0.8333333333333334, "section_id": 2191}}}, "8785008": {"Id": "8785008", "PostTypeId": "2", "Body": "<p>The answer differs depending on if you're using C++03 or C++11.</p>\n<p>In C++11, your code is guaranteed to work, but in C++03 it's unspecified; your only guarantee is that by the time <code>main()</code> is entered, the standard streams had been initialized. (That said, all mainstream implementations initialize them prior to running any dynamic initialization, making them fine to use.)</p>\n<p>You can force initialization by constructing an <code>std::ios_base::Init</code> object, like so:</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct test\n{\n    test() { std::cout &lt;&lt; \"test::ctor\" &lt;&lt; std::endl; }\n    ~test() { std::cout &lt;&lt; \"test::dtor\" &lt;&lt; std::endl; }\n\nprivate:\n    std::ios_base::Init mInitializer;\n};\n\ntest t;\n\nint main()\n{\n    std::cout &lt;&lt; \"Hello world\" &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>\n<p>Now when <code>test</code> constructs, it initializes <code>mInitializer</code> and guarantees the streams are ready to use.</p>\n<p>C++11 fixed this slightly annoying behavior by acting as if every instance of <code>#include &lt;iostream&gt;</code> where followed by <code>static std::ios_base::Init __unspecified_name__;</code>. This automatically guarantees the streams are ready to use.</p>\n", "LastActivityDate": "2012-01-09T07:11:04.533", "CommentCount": "1", "CreationDate": "2012-01-09T07:11:04.533", "ParentId": "8784892", "Score": "35", "OwnerUserId": "87234"}, "8784945": {"Id": "8784945", "PostTypeId": "2", "Body": "<p>Your question is about the order of construction of static objects. I believe that the language specification leaves it undefined.</p>\n<p>GCC has the <a href=\"http://gcc.gnu.org/onlinedocs/gcc-4.6.2/gcc/C_002b_002b-Attributes.html\" rel=\"nofollow\">init_priority</a> attribute to play with the order.</p>\n<p>And I believe you should not worry that much in practice.</p>\n", "LastEditorUserId": "841108", "LastActivityDate": "2012-01-09T08:46:10.473", "Score": "2", "CreationDate": "2012-01-09T07:05:35.063", "ParentId": "8784892", "CommentCount": "0", "OwnerUserId": "841108", "LastEditDate": "2012-01-09T08:46:10.473"}});