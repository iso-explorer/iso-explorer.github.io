post_cb({"bq_ids": {"n4140": {"so_18868599_18868626_0": {"length": 17, "quality": 0.9444444444444444, "section_id": 5461}}, "n3337": {"so_18868599_18868626_0": {"length": 17, "quality": 0.9444444444444444, "section_id": 5248}}, "n4659": {"so_18868599_18868626_0": {"length": 17, "quality": 0.9444444444444444, "section_id": 6895}}}, "18868599": {"ViewCount": "120", "Body": "<p>Suppose we have followin declaration</p>\n<pre><code>enum visibility\n{\n   On  = 0,\n   Off = 1,\n   maxVisibility\n};\n</code></pre>\n<p>Is the guaranteed value of <code>maxVisibility</code> enumerator <code>2</code> in C++11/C++0x standard ?</p>\n", "AcceptedAnswerId": "18868626", "Title": "Uninitialized enumerator default values", "CreationDate": "2013-09-18T09:30:22.900", "Id": "18868599", "CommentCount": "4", "LastEditDate": "2013-09-18T11:23:26.833", "PostTypeId": "1", "LastEditorUserId": "426305", "LastActivityDate": "2013-09-18T11:23:26.833", "Score": "5", "OwnerUserId": "426305", "Tags": "<c++><c++11><language-lawyer>", "AnswerCount": "1"}, "18868626": {"Id": "18868626", "PostTypeId": "2", "Body": "<p>Yes, it is guaranteed.</p>\n<p>\u00a7 7.2.2 </p>\n<blockquote>\n<p id=\"so_18868599_18868626_0\">If the first enumerator has no initializer,the value of the corresponding constant is zero. An enumerator-definition without an initializer <strong>gives the enumerator the value obtained by increasing the value of the previous enumerator by one</strong>.</p>\n</blockquote>\n", "LastActivityDate": "2013-09-18T09:31:52.807", "Score": "8", "CreationDate": "2013-09-18T09:31:52.807", "ParentId": "18868599", "CommentCount": "1", "OwnerUserId": "951757"}});