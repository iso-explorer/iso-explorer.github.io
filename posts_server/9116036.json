post_cb({"9116104": {"Id": "9116104", "PostTypeId": "2", "Body": "<p>No.\nThe standard don't define the order of evaluation in that case, and each compiler may do whatever it wants.\nI think that most of them (and specially <code>gcc</code>) evaluate the rightest first.</p>\n", "LastActivityDate": "2012-02-02T16:36:05.663", "CommentCount": "1", "CreationDate": "2012-02-02T16:36:05.663", "ParentId": "9116036", "Score": "0", "OwnerUserId": "1055952"}, "9116081": {"Id": "9116081", "PostTypeId": "2", "Body": "<p>No, the order of evaluation of arguments with respect to each other is unspecified. The only guarantee that you have is that they will not be executed concurrently with each other.</p>\n", "LastActivityDate": "2012-02-02T16:35:12.047", "CommentCount": "1", "CreationDate": "2012-02-02T16:35:12.047", "ParentId": "9116036", "Score": "0", "OwnerUserId": "485561"}, "9116162": {"Id": "9116162", "PostTypeId": "2", "Body": "<p>See 1.9 Program execution:</p>\n<blockquote>\n<p id=\"so_9116036_9116162_0\">Certain other aspects and operations of the abstract machine are described in this International Standard as\n  unspecified (<strong>for example, order of evaluation of arguments to a function</strong>). Where possible, this International\n  Standard defines a set of allowable behaviors.</p>\n</blockquote>\n<p>and 8.3.6 Default arguments, 9:</p>\n<blockquote>\n<p id=\"so_9116036_9116162_1\">[...] Default arguments are evaluated each time the function is called. The order of evaluation of function\n  arguments is unspecified. Consequently, parameters of a function shall not be used in a default argument,\n  even if they are not evaluated. [...]</p>\n</blockquote>\n", "LastActivityDate": "2012-02-02T16:40:04.057", "CommentCount": "0", "CreationDate": "2012-02-02T16:40:04.057", "ParentId": "9116036", "Score": "1", "OwnerUserId": "76722"}, "bq_ids": {"n4140": {"so_9116036_9116162_1": {"length": 18, "quality": 0.8571428571428571, "section_id": 3260}, "so_9116036_9116162_0": {"length": 19, "quality": 0.8260869565217391, "section_id": 5799}, "so_9116036_9116036_0": {"length": 4, "quality": 0.6666666666666666, "section_id": 3260}}, "n3337": {"so_9116036_9116162_1": {"length": 20, "quality": 0.9523809523809523, "section_id": 3132}, "so_9116036_9116162_0": {"length": 21, "quality": 0.9130434782608695, "section_id": 5572}, "so_9116036_9116036_0": {"length": 4, "quality": 0.6666666666666666, "section_id": 3132}}, "n4659": {"so_9116036_9116162_0": {"length": 19, "quality": 0.8260869565217391, "section_id": 7258}}}, "9116074": {"Id": "9116074", "PostTypeId": "2", "Body": "<p>NO! There is no guarantee what order these are carried out in. Only that both g() and h() are carried out before f().\nSee this: <a href=\"http://www.gotw.ca/gotw/056.htm\" rel=\"nofollow noreferrer\">http://www.gotw.ca/gotw/056.htm</a>\nI think there's an updated C++11 version of that, I'll have a look.</p>\n<p>Edit: C++11 version <a href=\"http://herbsutter.com/gotw/_102/\" rel=\"nofollow noreferrer\">http://herbsutter.com/gotw/_102/</a></p>\n<p>Edit 2: If you really want to know what specific compilers do, try this: <a href=\"http://www.agner.org/optimize/calling_conventions.pdf\" rel=\"nofollow noreferrer\">http://www.agner.org/optimize/calling_conventions.pdf</a>\nSection 7 (page 16) may be relevant, though it's a bit over my head, but for instance __cdecl calling convention means arguments are passed from right to left (at least stored that way), whereas for __fastcall \"The first two DWORD or smaller arguments are passed in ECX and EDX registers; all other arguments are passed right to left.\" (<a href=\"http://msdn.microsoft.com/en-us/library/6xa169sk%28v=vs.71%29.aspx\" rel=\"nofollow noreferrer\">http://msdn.microsoft.com/en-us/library/6xa169sk%28v=vs.71%29.aspx</a>)</p>\n<p>So it does vary for different compilers.</p>\n<p><strong>Much later edit</strong>: It turns out that for constructors using the initializer list syntax (curly braces <code>{}</code>), order of evaluation <em>is</em> guaranteed (even if it is a call to a constructor that does not take a <code>std::initializer_list</code>. <a href=\"https://stackoverflow.com/questions/14058592/how-to-guarantee-order-of-argument-evaluation-when-calling-a-function-object\">See this question</a>.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2013-05-15T20:59:05.490", "Score": "8", "CreationDate": "2012-02-02T16:34:42.057", "ParentId": "9116036", "CommentCount": "0", "OwnerUserId": "1171191", "LastEditDate": "2017-05-23T12:34:56.783"}, "9116224": {"Id": "9116224", "PostTypeId": "2", "Body": "<p>No, it's not safe - if you need a guaranteed order of evaluation, e.g. because of side effects, then you will need to do something like this:</p>\n<pre><code>foo = g();\nbar = h();\nf(foo, bar);\n</code></pre>\n", "LastActivityDate": "2012-02-02T16:43:39.230", "CommentCount": "0", "CreationDate": "2012-02-02T16:43:39.230", "ParentId": "9116036", "Score": "1", "OwnerUserId": "253056"}, "9116036": {"ViewCount": "267", "Body": "<blockquote>\n<p id=\"so_9116036_9116036_0\"><strong>Possible Duplicate:</strong><br>\n<a href=\"https://stackoverflow.com/questions/6725706/order-of-evaluation-of-function-parameters\">order of evaluation of function parameters</a> </br></p>\n</blockquote>\n<p>Is it safe to use the following construction in C/C++?</p>\n<pre><code>f(g(), h());\n</code></pre>\n<p>where <code>g()</code> is expected to be evaluated <strong>first</strong>, then <code>h()</code>.</p>\n<p>Do all compilers show the same behavior on all architectures?</p>\n", "AcceptedAnswerId": "9116074", "Title": "C/C++ - evaluation of the arguments in a function call", "CreationDate": "2012-02-02T16:32:29.867", "LastActivityDate": "2013-05-15T20:59:05.490", "CommentCount": "3", "LastEditDate": "2017-05-23T10:34:18.200", "PostTypeId": "1", "Tags": "<c++><c><semantics><multiplatform>", "Id": "9116036", "AnswerCount": "5", "Score": "0", "OwnerUserId": "215571", "ClosedDate": "2012-02-02T20:10:43.733", "LastEditorUserId": "-1"}});