post_cb({"15465122": {"CommentCount": "8", "ViewCount": "169", "PostTypeId": "1", "LastEditorUserId": "1176973", "CreationDate": "2013-03-17T19:22:09.347", "LastActivityDate": "2013-03-17T19:33:28.440", "Title": "Default initialization", "AcceptedAnswerId": "15465223", "LastEditDate": "2013-03-17T19:33:28.440", "Id": "15465122", "Score": "0", "Body": "<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\nclass Apple\n{\n    public:\n       int i;\n       string s = \"HelloWorld\";\n       string s1;\n       bool b;\n};\n\nint main(int argc, char *argv[]) {\n    Apple a; //doesn't this trigger default initialization??\n    cout &lt;&lt; a.i &lt;&lt; a.s &lt;&lt; a.s1 &lt;&lt; a.b;\n\n}\n</code></pre>\n<p>If the object is a local variable, then the data members will be be default-initialised.\nBut here is the output: <code>0HelloWorld0</code>. Isn't this value initialization??</p>\n", "Tags": "<c++><c++11>", "OwnerUserId": "1390726", "AnswerCount": "2"}, "15465181": {"ParentId": "15465122", "CommentCount": "1", "Body": "<blockquote>\n<p id=\"so_15465122_15465181_0\">Isn't this value initialization??</p>\n</blockquote>\n<p>On my machine, your program outputs <code>-1219700747HelloWorld244</code>, a clear indicator for default initialisation.</p>\n<p>That you get <code>0HelloWorld0</code> isn't fully random and can have many reasons. For example, it has something to do with your os architecture. All new memory for each program is initially zeroed, and this is why in this simple example, everything is set to zero. Or the compiler initializes the struct statically for performance reasons.</p>\n<p>To quote the standard at 12.6.2/8:</p>\n<blockquote>\n<p id=\"so_15465122_15465181_1\">In a non-delegating constructor, if a given non-static data member or base class is not designated by a\n  mem-initializer-id (including the case where there is no mem-initializer-list because the constructor has no\n  ctor-initializer) and the entity is not a virtual base class of an abstract class (10.4), then</p>\n<p id=\"so_15465122_15465181_2\">\u2014 if the entity is a non-static data member that has a brace-or-equal-initializer, the entity is initialized\n  as specified in 8.5;</p>\n<p id=\"so_15465122_15465181_3\">\u2014 otherwise, if the entity is an anonymous union or a variant member (9.5), no initialization is performed;</p>\n<p id=\"so_15465122_15465181_4\">\u2014 otherwise, the entity is default-initialized (8.5).</p>\n</blockquote>\n", "OwnerUserId": "1176973", "PostTypeId": "2", "Id": "15465181", "Score": "2", "CreationDate": "2013-03-17T19:27:32.330", "LastActivityDate": "2013-03-17T19:27:32.330"}, "bq_ids": {"n4140": {"so_15465122_15465181_3": {"section_id": 435, "quality": 1.0, "length": 8}, "so_15465122_15465181_2": {"section_id": 435, "quality": 1.0, "length": 8}, "so_15465122_15465181_1": {"section_id": 435, "quality": 0.6538461538461539, "length": 17}}, "n3337": {"so_15465122_15465181_3": {"section_id": 427, "quality": 0.625, "length": 5}, "so_15465122_15465181_2": {"section_id": 427, "quality": 1.0, "length": 8}, "so_15465122_15465181_1": {"section_id": 427, "quality": 0.9615384615384616, "length": 25}}, "n4659": {"so_15465122_15465181_3": {"section_id": 454, "quality": 1.0, "length": 8}, "so_15465122_15465181_2": {"section_id": 454, "quality": 0.875, "length": 7}, "so_15465122_15465181_1": {"section_id": 454, "quality": 0.6538461538461539, "length": 17}}}, "15465223": {"ParentId": "15465122", "CommentCount": "1", "Body": "<p>Here's a <a href=\"http://liveworkspace.org/code/2iQK7b%242\" rel=\"nofollow\">simple test</a> that indicates no value initialization is being performed in your code.</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nusing namespace std;\nclass Apple\n{\n    public:\n       int i;\n       string s = \"HelloWorld\";\n       string s1;\n       bool b;\n};\n\nint main() \n{\n   {\n     Apple a; \n     a.i = 42;\n     a.b = true;\n     cout &lt;&lt; a.i &lt;&lt; a.s &lt;&lt; a.s1 &lt;&lt; a.b;\n   }\n   {\n     Apple a; \n     cout &lt;&lt; a.i &lt;&lt; a.s &lt;&lt; a.s1 &lt;&lt; a.b;\n   }\n   {\n     Apple a{}; \n     cout &lt;&lt; a.i &lt;&lt; a.s &lt;&lt; a.s1 &lt;&lt; a.b;\n   }\n}\n</code></pre>\n<p>Output:</p>\n<pre><code>42HelloWorld142HelloWorld10HelloWorld0\n</code></pre>\n<p>As you can see, in the second case those members still contain values from the previous assignment. Note that I'm not saying this is guaranteed or standard defined behavior. </p>\n<p>In the third case you are indicating that the object should be value-initialized by adding the braces.</p>\n<p>If your compiler doesn't support C++11's uniform initialization syntax, you can change it to the following to achieve the same effect.</p>\n<pre><code>Apple a = Apple();\n</code></pre>\n", "OwnerUserId": "241631", "PostTypeId": "2", "Id": "15465223", "Score": "2", "CreationDate": "2013-03-17T19:31:37.457", "LastActivityDate": "2013-03-17T19:31:37.457"}});