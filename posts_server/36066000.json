post_cb({"36066000": {"CommentCount": "4", "ViewCount": "63", "PostTypeId": "1", "LastEditorUserId": "5434231", "CreationDate": "2016-03-17T16:11:24.290", "LastActivityDate": "2016-03-17T16:45:14.300", "Title": "Are unused function arguments always instantiated?", "AcceptedAnswerId": "36066446", "LastEditDate": "2016-03-17T16:22:56.633", "Id": "36066000", "Score": "2", "Body": "<p>Given a function with an unused (and unnamed) argument:</p>\n<pre><code>template &lt;typename T&gt; void f(T&amp;&amp;) { /* do something, without using T */ }\n\nint main() \n{\n    std::mutex m;\n    f(std::lock_guard&lt;std::mutex&gt; { m });\n}\n</code></pre>\n<p>Is the argument guaranteed to be instantiated, or is the compiler allowed to optimize it away?</p>\n", "Tags": "<c++>", "OwnerUserId": "5434231", "AnswerCount": "1"}, "36066446": {"ParentId": "36066000", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>From [class.temp]:</p>\n<blockquote>\n<p id=\"so_36066000_36066446_0\">When an implementation introduces a temporary object of a class that has a non-trivial constructor (12.1, 12.8), <strong>it shall ensure that a constructor is called for the temporary object.</strong></p>\n</blockquote>\n<p>The standard also provides an out in [intro.execution]:</p>\n<blockquote>\n<p id=\"so_36066000_36066446_1\">Rather, conforming\n  implementations are required to emulate (only) the observable behavior of the abstract machine as explained\n  below.<sup>5</sup><br>\n<hr/>\n<sup>5</sup>This provision is sometimes called the \u201cas-if\u201d rule, because an implementation is free to disregard any requirement of this\n  International Standard as long as the result is as if the requirement had been obeyed, as far as can be determined from the\n  observable behavior of the program. For instance, an actual implementation need not evaluate part of an expression <strong>if it can\n  deduce that its value is not used and that no side effects affecting the observable behavior of the program are produced</strong>.</br></p>\n</blockquote>\n<p>Certainly, acquiring a lock qualifies as a side effect affecting observable behavior, so yes, the argument is guaranteed to be instantiated since it has a non-trivial constructor with observable side-effects. </p>\n", "OwnerUserId": "2069064", "LastEditorUserId": "2069064", "LastEditDate": "2016-03-17T16:45:14.300", "Id": "36066446", "Score": "4", "CreationDate": "2016-03-17T16:30:22.897", "LastActivityDate": "2016-03-17T16:45:14.300"}, "bq_ids": {"n4140": {"so_36066000_36066446_1": {"section_id": 5797, "quality": 0.9245283018867925, "length": 49}, "so_36066000_36066446_0": {"section_id": 380, "quality": 0.8666666666666667, "length": 13}}, "n3337": {"so_36066000_36066446_1": {"section_id": 5570, "quality": 0.9245283018867925, "length": 49}, "so_36066000_36066446_0": {"section_id": 371, "quality": 0.8666666666666667, "length": 13}}, "n4659": {"so_36066000_36066446_1": {"section_id": 7256, "quality": 0.9245283018867925, "length": 49}, "so_36066000_36066446_0": {"section_id": 395, "quality": 0.8666666666666667, "length": 13}}}});