post_cb({"bq_ids": {"n4140": {"so_4352880_4352936_0": {"length": 35, "quality": 1.0, "section_id": 278}}, "n3337": {"so_4352880_4352936_0": {"length": 35, "quality": 1.0, "section_id": 269}}, "n4659": {"so_4352880_4352936_0": {"length": 35, "quality": 1.0, "section_id": 285}}}, "4352936": {"Id": "4352936", "PostTypeId": "2", "Body": "<p>C++03 [$14.7.3/18] says</p>\n<blockquote>\n<p id=\"so_4352880_4352936_0\">In an explicit specialization declaration for a member of a class template or a member template that appears in namespace scope, the member template and some of its enclosing class templates may remain unspecialized, <strong>except that the declaration shall not explicitly specialize a class member template if its enclosing class templates  are  not  explicitly  specialized  as  well</strong>.  </p>\n</blockquote>\n<p>So you need to specialize the enclosing class too. </p>\n<p>Something like this would work.</p>\n<pre><code>template &lt;&gt;\ntemplate &lt;&gt;\nvoid MyClass&lt;E_1&gt;::myMethod&lt;int&gt;(int value)\n{\n    std::cout &lt;&lt; value &lt;&lt; '\\n';\n}\n</code></pre>\n", "LastActivityDate": "2010-12-04T09:49:43.330", "CommentCount": "1", "CreationDate": "2010-12-04T09:49:43.330", "ParentId": "4352880", "Score": "1", "OwnerUserId": "165520"}, "4352880": {"ViewCount": "715", "Body": "<p>I know this subject should be pretty much dated by now, but I'm having a tough time with this specific case.</p>\n<p>Straight to the point, this is what I want to do:</p>\n<pre><code>enum MyEnum\n{\n    E_1,\n    E_2\n};\n\ntemplate &lt;MyEnum T&gt;\nclass MyClass\n{\n    // method to be fully specialized\n    template &lt;typename U&gt;\n    void myMethod(U value);\n};\n\n// full specialization of method template from class template\n// (or is this in fact partial, since I'm leaving T alone?)\ntemplate &lt;MyEnum T&gt;\ntemplate &lt;&gt;\nvoid MyClass&lt;T&gt;::myMethod&lt;int&gt;(int value)\n{\n    std::cout &lt;&lt; value &lt;&lt; '\\n';\n}\n</code></pre>\n<p>Is this possible?</p>\n", "AcceptedAnswerId": "4352936", "Title": "Full specialization of method template from class template", "CreationDate": "2010-12-04T09:36:33.323", "Id": "4352880", "CommentCount": "0", "LastEditDate": "2010-12-04T11:51:41.967", "PostTypeId": "1", "LastEditorUserId": "165520", "LastActivityDate": "2010-12-04T11:51:41.967", "Score": "2", "OwnerUserId": "180581", "Tags": "<c++><templates><gcc><template-specialization>", "AnswerCount": "2"}, "4353004": {"Id": "4353004", "PostTypeId": "2", "Body": "<p>Since you leave T, while specializing only function template, then what you're trying to do would be called partial specialization, because T is still templated and you can use it in your function. But unfortunately, partial template specialization of function (whether be it member function or non-member function) is <strong>not</strong> allowed. So your code would give compilation error.</p>\n<p>Either you fully specialize by specializing the class template as well, or you don't at all.</p>\n", "LastActivityDate": "2010-12-04T10:03:01.363", "CommentCount": "1", "CreationDate": "2010-12-04T10:03:01.363", "ParentId": "4352880", "Score": "1", "OwnerUserId": "415784"}});