post_cb({"34500892": {"ParentId": "34497208", "PostTypeId": "2", "CommentCount": "3", "CreationDate": "2015-12-28T21:16:12.857", "Score": "2", "LastEditorUserId": "3723423", "LastEditDate": "2015-12-28T21:23:55.647", "Id": "34500892", "OwnerUserId": "3723423", "Body": "<p>The highlighted \"that\" statement means the <code>if</code>, <code>while</code>, <code>for</code>, and <code>switch</code> statement that has defined the name, and not the substatement controlled by the condition or the iteration.  </p>\n<p>This is explained in:  </p>\n<blockquote>\n<p id=\"so_34497208_34500892_0\"><strong>6.4/3:</strong> A name introduced by a declaration in a condition (either introduced by the decl-specifier-seq or the declara- tor of the\n  condition) is in scope from its point of declaration until the end of\n  the substatements controlled by the condition. <strong>If the name is\n  re-declared in the outermost block of a substatement controlled by the\n  condition</strong>, the declaration that re-declares the name is ill-formed.</p>\n</blockquote>\n<p>This is why the following statment is valid:  </p>\n<pre><code>if (int i=10)\n    if (int i=20)\n        ;\n</code></pre>\n<p>The compiler analyses the declaration of <code>if (int i=20)</code> not as a different condition of the same if-statement, but as a controlled substatement.  And as the second declaration of i takes place in the condition, it is not considered in the outer block of the constrolled statement.  </p>\n<p>By contrast, the following almost equivalent statement is not valid, as it breaks the outer block constraint:  </p>\n<pre><code>if (int k=10) {\n    int k=20;   // &lt;===== ouch ! redefinition in the outerblock \n    if (k)\n        cout &lt;&lt;\"oops\";\n}\n</code></pre>\n<p>Hence the only case where you can have a \"<em>subsequent condition of <strong>that</strong> statement</em>\" is the <code>for</code> statement.  The standandard highlights this special situation, by giving the rationale to the constraint that you've quoted with a clearer wording:</p>\n<blockquote>\n<p id=\"so_34497208_34500892_1\"><strong>6.5.3/1:</strong> (...) names declared in the <em>for-init-statement</em> are <strong>in the same declarative-region</strong> as those declared in the condition, </p>\n</blockquote>\n<p>i.e. declaring the same name in the init and in the condition would break the ODR.   </p>\n", "LastActivityDate": "2015-12-28T21:23:55.647"}, "bq_ids": {"n4140": {"so_34497208_34500892_0": {"section_id": 3884, "quality": 0.8709677419354839, "length": 27}, "so_34497208_34500892_1": {"section_id": 3903, "quality": 0.7777777777777778, "length": 7}, "so_34497208_34497208_0": {"section_id": 7064, "quality": 1.0, "length": 28}}, "n3337": {"so_34497208_34500892_0": {"section_id": 3744, "quality": 0.8387096774193549, "length": 26}, "so_34497208_34500892_1": {"section_id": 3763, "quality": 0.8888888888888888, "length": 8}, "so_34497208_34497208_0": {"section_id": 6808, "quality": 1.0, "length": 28}}, "n4659": {"so_34497208_34500892_0": {"section_id": 4763, "quality": 0.9032258064516129, "length": 28}, "so_34497208_34500892_1": {"section_id": 4774, "quality": 0.6666666666666666, "length": 6}, "so_34497208_34497208_0": {"section_id": 8561, "quality": 0.9642857142857143, "length": 27}}}, "34497208": {"CommentCount": "5", "AcceptedAnswerId": "34500892", "CreationDate": "2015-12-28T16:36:52.490", "LastActivityDate": "2015-12-28T21:23:55.647", "PostTypeId": "1", "ViewCount": "271", "FavoriteCount": "0", "Title": "What does the standard mean by \"a subsequent condition of that statement\"?", "Id": "34497208", "Score": "12", "Body": "<p>The standard as of N4567 forbids some kinds of re-declaration of a name previously declared in a <em>condition</em> as follows\u2014according to the standard(\u00a73.3.3/4):</p>\n<blockquote>\n<p id=\"so_34497208_34497208_0\">Names declared in the for-init-statement, the for-range-declaration, and in the condition of if, while, for, and switch statements are local to the if, while, for, or switch statement (including the controlled statement), and shall not be redeclared <strong>in a subsequent condition of that statement</strong> nor in the outermost block (or, for the if statement, any of the outermost blocks) of the controlled statement; see 6.4.</p>\n</blockquote>\n<p>However, considering the fact that the following code compiles fine,</p>\n<pre><code>int main(void) {\n    if (int i=10)\n        if (int i=20)\n            ;\n    return 0;\n}\n</code></pre>\n<p>it seems unclear to me what exactly \"a subsequent condition of that statement\" stands for.</p>\n", "Tags": "<c++><language-lawyer>", "OwnerUserId": "5645940", "AnswerCount": "1"}});