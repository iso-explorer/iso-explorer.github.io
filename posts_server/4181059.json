post_cb({"19501842": {"ParentId": "4181059", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>C++11 (draft N3337) \u00a73.5/4: (emphasis mine)</p>\n<blockquote>\n<blockquote>\n<p id=\"so_4181059_19501842_7\"><strong>An unnamed namespace or a namespace declared directly or indirectly within an unnamed namespace has internal linkage</strong>. All other namespaces have external linkage. A name having namespace scope that has not been given internal linkage above has the same linkage as the enclosing namespace if it is the name of</p>\n<p id=\"so_4181059_19501842_8\">\u2014 a variable; or</p>\n<p id=\"so_4181059_19501842_9\">\u2014 a function; or</p>\n<p id=\"so_4181059_19501842_10\">\u2014 a named class (Clause 9), or an unnamed class defined in a typedef declaration in which the class has the typedef name for linkage purposes (7.1.3); or</p>\n<p id=\"so_4181059_19501842_11\">\u2014 a named enumeration (7.2), or an unnamed enumeration defined in a typedef declaration in which the enumeration has the typedef name for linkage purposes (7.1.3); or</p>\n<p id=\"so_4181059_19501842_12\">\u2014 an enumerator belonging to an enumeration with linkage; or</p>\n<p id=\"so_4181059_19501842_13\">\u2014 a template.</p>\n</blockquote>\n</blockquote>\n<p>This guarentees that any unnamed namespace has internal linkage.</p>\n<blockquote>\n<p id=\"so_4181059_19501842_14\">What about an anonymous namespace within a normal namespace? Does it still guarantee internal linkage?</p>\n</blockquote>\n<p>Although within a named (normal) namespace, it's an unnamed (anonymous) namespace and thus is guaranteed to have internal linkage as per the C++11 standard.</p>\n<hr>\n<blockquote>\n<p id=\"so_4181059_19501842_15\">putting a function or a variable in an anonymous namespace makes its linkage internal, i. e. the same as declaring it static on a file-level, but idiomatic C++.</p>\n</blockquote>\n<p>In C++11 the usage of <code>static</code> in this context was <em>undeprecated</em>; although <a href=\"https://stackoverflow.com/q/4977252/183120\">unnamed namespace is a superior alternative to <code>static</code></a>, <a href=\"https://stackoverflow.com/q/8460327/183120\">there're instances where it fails</a> which is remedied by <code>static</code>; <a href=\"https://stackoverflow.com/q/11016220/183120\"><code>inline namespace</code> was introduced in C++11</a> to address this.</p>\n</hr>", "OwnerUserId": "183120", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:02:42.557", "Id": "19501842", "Score": "10", "CreationDate": "2013-10-21T18:20:41.470", "LastActivityDate": "2014-01-30T07:10:58.577"}, "4181059": {"CommentCount": "3", "AcceptedAnswerId": "19501842", "PostTypeId": "1", "LastEditorUserId": "418110", "CreationDate": "2010-11-15T02:53:55.070", "LastActivityDate": "2014-01-30T07:10:58.577", "LastEditDate": "2010-11-15T03:34:02.260", "ViewCount": "5055", "FavoriteCount": "6", "Title": "Linkage of symbols within anonymous namespace within a regular namespace", "Id": "4181059", "Score": "14", "Body": "<p>In C++, putting a function or a variable in an anonymous namespace makes its linkage internal, i. e. the same as declaring it <code>static</code> on a file-level, but idiomatic C++.</p>\n<p>What about an anonymous namespace within a normal namespace? Does it still guarantee internal linkage?</p>\n<pre><code>// foo.cpp\n\nvoid func1() {\n    // external linkage\n}\n\nstatic void func2() {\n    // internal linkage\n}\n\nnamespace {\n    void func3() {\n        // internal linkage\n    }\n}\n\nnamespace ns1 {\n    void func4() {\n        // external linkage\n    }\n\n    namespace {\n        void func3() {\n            // still internal linkage?\n        }\n    }\n}\n</code></pre>\n", "Tags": "<c++><namespaces><anonymous><linkage>", "OwnerUserId": "23643", "AnswerCount": "3"}, "4181072": {"ParentId": "4181059", "CommentCount": "2", "Body": "<p>It's not necessarily the case that entities in an anonymous namespace have internal linkage; they may actually have external linkage.</p>\n<p>Since the unnamed namespace has a name that is unique to the translation unit in which it was compiled, you just can't refer to the entities declared in it from outside of that translation unit, regardless of what their linkage is.</p>\n<p>The C++ standard says (C++03 7.3.1.1/note 82):</p>\n<blockquote>\n<p id=\"so_4181059_4181072_0\">Although entities in an unnamed namespace might have external linkage, they are effectively qualified by a name unique to their translation unit and therefore can never be seen from any other translation unit.</p>\n</blockquote>\n", "OwnerUserId": "151292", "PostTypeId": "2", "Id": "4181072", "Score": "15", "CreationDate": "2010-11-15T02:57:34.327", "LastActivityDate": "2010-11-15T02:57:34.327"}, "4181132": {"ParentId": "4181059", "PostTypeId": "2", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_4181059_4181132_0\">$3.5/3 - \"A name having namespace\n  scope (3.3.6) has internal linkage if\n  it is the name of </p>\n<p id=\"so_4181059_4181132_1\">\u2014 a variable,\n  function or function template that is\n  explicitly declared static; or, </p>\n<p id=\"so_4181059_4181132_2\">\u2014 a\n  variable that is explicitly declared\n  const and neither explicitly declared\n  extern nor previously declared to have\n  external linkage; or </p>\n<p id=\"so_4181059_4181132_3\">\u2014 a data member\n  of an anonymous union.</p>\n</blockquote>\n<p>So, I doubt if any of the names 'func3' and 'func4' in your program have internal linkage at all. They have external linkage. However, it is just that they can not be referred from other translation units in accordance with the quote from James.</p>\n", "OwnerUserId": "418110", "LastEditorUserId": "418110", "LastEditDate": "2010-11-15T03:25:54.693", "Id": "4181132", "Score": "5", "CreationDate": "2010-11-15T03:13:06.717", "LastActivityDate": "2010-11-15T03:25:54.693"}, "bq_ids": {"n4140": {"so_4181059_19501842_7": {"section_id": 7137, "quality": 1.0, "length": 31}, "so_4181059_19501842_11": {"section_id": 7137, "quality": 0.9230769230769231, "length": 12}, "so_4181059_19501842_5": {"section_id": 7137, "quality": 1.0, "length": 4}, "so_4181059_19501842_0": {"section_id": 7137, "quality": 1.0, "length": 31}, "so_4181059_4181132_1": {"section_id": 7136, "quality": 1.0, "length": 7}, "so_4181059_19501842_4": {"section_id": 7137, "quality": 0.9230769230769231, "length": 12}, "so_4181059_19501842_10": {"section_id": 7137, "quality": 0.9285714285714286, "length": 13}, "so_4181059_4181072_0": {"section_id": 5482, "quality": 0.9565217391304348, "length": 22}, "so_4181059_19501842_3": {"section_id": 7137, "quality": 0.9285714285714286, "length": 13}, "so_4181059_4181132_2": {"section_id": 7136, "quality": 1.0, "length": 14}, "so_4181059_4181132_0": {"section_id": 7136, "quality": 0.7777777777777778, "length": 7}, "so_4181059_19501842_12": {"section_id": 7137, "quality": 1.0, "length": 4}, "so_4181059_4181132_3": {"section_id": 369, "quality": 1.0, "length": 4}}, "n3337": {"so_4181059_19501842_7": {"section_id": 6881, "quality": 1.0, "length": 31}, "so_4181059_19501842_11": {"section_id": 6881, "quality": 0.9230769230769231, "length": 12}, "so_4181059_19501842_5": {"section_id": 6881, "quality": 1.0, "length": 4}, "so_4181059_4181132_1": {"section_id": 6880, "quality": 1.0, "length": 7}, "so_4181059_19501842_4": {"section_id": 6881, "quality": 0.9230769230769231, "length": 12}, "so_4181059_19501842_10": {"section_id": 6881, "quality": 0.9285714285714286, "length": 13}, "so_4181059_4181072_0": {"section_id": 5268, "quality": 0.9565217391304348, "length": 22}, "so_4181059_4181132_0": {"section_id": 6880, "quality": 0.7777777777777778, "length": 7}, "so_4181059_19501842_12": {"section_id": 6881, "quality": 1.0, "length": 4}, "so_4181059_4181132_2": {"section_id": 6880, "quality": 1.0, "length": 14}, "so_4181059_19501842_3": {"section_id": 6881, "quality": 0.9285714285714286, "length": 13}, "so_4181059_19501842_0": {"section_id": 6881, "quality": 1.0, "length": 31}, "so_4181059_4181132_3": {"section_id": 359, "quality": 1.0, "length": 4}}, "n4659": {"so_4181059_19501842_7": {"section_id": 8638, "quality": 1.0, "length": 31}, "so_4181059_19501842_11": {"section_id": 8638, "quality": 0.9230769230769231, "length": 12}, "so_4181059_4181132_0": {"section_id": 8637, "quality": 0.7777777777777778, "length": 7}, "so_4181059_4181132_2": {"section_id": 8637, "quality": 0.9285714285714286, "length": 13}, "so_4181059_4181132_1": {"section_id": 8637, "quality": 1.0, "length": 7}, "so_4181059_19501842_4": {"section_id": 8638, "quality": 0.9230769230769231, "length": 12}, "so_4181059_19501842_10": {"section_id": 8638, "quality": 0.9285714285714286, "length": 13}, "so_4181059_19501842_0": {"section_id": 8638, "quality": 1.0, "length": 31}, "so_4181059_4181132_3": {"section_id": 382, "quality": 1.0, "length": 4}, "so_4181059_19501842_3": {"section_id": 8638, "quality": 0.9285714285714286, "length": 13}}}});