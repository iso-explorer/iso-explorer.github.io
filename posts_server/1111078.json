post_cb({"1111099": {"ParentId": "1111078", "PostTypeId": "2", "CommentCount": "9", "Body": "<pre><code>std::vector&lt;T&gt;(v).swap(v);\n</code></pre>\n<p>Swapping the contents with another vector swaps the capacity.</p>\n<pre><code>  std::vector&lt;T&gt;(v).swap(v); ==&gt; is equivalent to \n\n std::vector&lt;T&gt; tmp(v);    // copy elements into a temporary vector\n         v.swap(tmp);              // swap internal vector data\n</code></pre>\n<p>Swap() would only change the internal data structure.</p>\n", "OwnerUserId": "64960", "LastEditorUserId": "64960", "LastEditDate": "2009-07-10T18:21:17.237", "Id": "1111099", "Score": "37", "CreationDate": "2009-07-10T18:06:51.493", "LastActivityDate": "2009-07-10T18:21:17.237"}, "1111426": {"ParentId": "1111078", "CommentCount": "1", "Body": "<p>If you're worried about about the overhead of your vector then maybe you should be looking to using another type of data structure.  You mentioned that once your code is done initializing the vector it becomes a read only process.  I would suggest going with an open ended array that will allow the program to decide its capacity at compile time.  Or perhaps a linked list would be more suitable to your needs.<br>\nLemme know if I completely misunderstood what you were getting at.</br></p>\n<p>-UBcse</p>\n", "OwnerUserId": "136466", "PostTypeId": "2", "Id": "1111426", "Score": "1", "CreationDate": "2009-07-10T19:10:27.713", "LastActivityDate": "2009-07-10T19:10:27.713"}, "1111311": {"ParentId": "1111078", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>With C++11, you can call the member function <code>shrink_to_fit()</code>.   The <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2798.pdf\" rel=\"noreferrer\">draft standard</a> section 23.2.6.2 says:</p>\n<blockquote>\n<p id=\"so_1111078_1111311_0\"><code>shrink_to_fit</code> is a non-binding request\n  to reduce <code>capacity()</code> to <code>size()</code>. <em>[Note: The request is non-binding to\n  allow latitude for\n  implementation-specific optimizations.\n  \u2014end note]</em></p>\n</blockquote>\n", "OwnerUserId": "46821", "LastEditorUserId": "1672783", "LastEditDate": "2014-06-13T21:50:52.597", "Id": "1111311", "Score": "31", "CreationDate": "2009-07-10T18:49:53.450", "LastActivityDate": "2014-06-13T21:50:52.597"}, "1111078": {"CommentCount": "5", "AcceptedAnswerId": "1111099", "PostTypeId": "1", "LastEditorUserId": "10897", "CreationDate": "2009-07-10T18:03:48.020", "LastActivityDate": "2014-06-13T21:50:52.597", "LastEditDate": "2009-07-10T18:37:05.737", "ViewCount": "13460", "FavoriteCount": "8", "Title": "reduce the capacity of an stl vector", "Id": "1111078", "Score": "25", "Body": "<p>Is there a way to reduce the capacity of a vector ?</p>\n<p>My code inserts values into a vector (not knowing their number beforehand), and\nwhen this finishes, the vectors are used only for read operations.</p>\n<p>I guess I could create a new vector, do a .reseve() with the size and copy\nthe items, but I don't really like the extra copy operation.</p>\n<p>PS: I don't care for a portable solution, as long as it works for gcc.</p>\n", "Tags": "<c++><stl><vector>", "OwnerUserId": "118958", "AnswerCount": "9"}, "1410914": {"ParentId": "1111078", "CommentCount": "0", "Body": "<p>Get the \"Effective STL\" book by Scott Myers. It has a complete item jus on reducing vector's capacity.</p>\n", "OwnerUserId": "115387", "PostTypeId": "2", "Id": "1410914", "Score": "0", "CreationDate": "2009-09-11T13:36:58.987", "LastActivityDate": "2009-09-11T13:36:58.987"}, "14738414": {"ParentId": "1111078", "CommentCount": "0", "Body": "<p>Old thread, I know, but in case anyone is viewing this in the future.. there's shrink_to_fit() in C++11 but since it is a non-binding request, the behaviour will depend on its implementation. </p>\n<p>See: <a href=\"http://en.cppreference.com/w/cpp/container/vector/shrink_to_fit\" rel=\"nofollow\">http://en.cppreference.com/w/cpp/container/vector/shrink_to_fit</a></p>\n", "OwnerUserId": "1558419", "PostTypeId": "2", "Id": "14738414", "Score": "1", "CreationDate": "2013-02-06T20:43:49.960", "LastActivityDate": "2013-02-06T20:43:49.960"}, "1111209": {"ParentId": "1111078", "CommentCount": "0", "Body": "<p>Go look at Scott Meyers Effective STL item 17.</p>\n<p>Basically you can't directly reduce the storage size of a std::vector. Resize and reseve will never reduce the actually memory footprint of a container. The \"trick\" is to create a new container of the right size, copy the data and swap that with the current container. If we would like to clear a container out this is simply:</p>\n<pre><code>std::vector&lt;T&gt;().swap(v);\n</code></pre>\n<p>If we have to copy the data over then we need to do the copy:</p>\n<pre><code>std::vector&lt;T&gt;(v).swap(v);\n</code></pre>\n<p>What this does is creates a new vector with the data from the old one, doing the copy that would be required in any operation that has the effect you need. Then calling swap will just swap the internal buffers between the objects. At the end of the line the temporary vector that was created is deleted, but it has the guts from the old vector and the old vector has the guts from the new copy that is the exact size we need.</p>\n", "OwnerUserId": "852", "PostTypeId": "2", "Id": "1111209", "Score": "13", "CreationDate": "2009-07-10T18:29:03.727", "LastActivityDate": "2009-07-10T18:29:03.727"}, "1111094": {"ParentId": "1111078", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>The idiomatic solution is to swap with a newly constructed vector.</p>\n<pre><code>vector&lt;int&gt;().swap(v);\n</code></pre>\n<p>Edit: I misread the question. The code above will clear the vector. OP wants to keep the elements untouched, only shrink <code>capacity()</code> to <code>size()</code>.</p>\n<p>It is difficult to say if aJ's code will do that. I doubt there's portable solution. For <code>gcc</code>, you'll have to take a look at their particular implementation of <code>vector</code>.</p>\n<p><strong>edit</strong>: So I've peeked at libstdc++ implementation. It seems that aJ's solution will indeed work.</p>\n<pre><code>vector&lt;int&gt;(v).swap(v);\n</code></pre>\n<p>See <a href=\"http://gcc.gnu.org/onlinedocs/libstdc++/latest-doxygen/a01335.html\" rel=\"nofollow noreferrer\">the source</a>, line 232.</p>\n", "OwnerUserId": "89847", "LastEditorUserId": "89847", "LastEditDate": "2009-07-10T18:25:31.067", "Id": "1111094", "Score": "6", "CreationDate": "2009-07-10T18:06:23.180", "LastActivityDate": "2009-07-10T18:25:31.067"}, "1111270": {"ParentId": "1111078", "CommentCount": "0", "Body": "<p>No, you cannot reduce the capacity of a vector without copying. However, you can control how much new allocation growth by checking capacity() and call reserve() every time you insert something. The default behavior for std::vector is to grow its capacity by a factor of 2 every time new capacity is needed. You can growth it by your own magic ratio:</p>\n<pre><code>template &lt;typename T&gt;\nvoid myPushBack(std::vector&lt;T&gt;&amp; vec, const T&amp; val) {\n    if (vac.size() + 1 == vac.capacity()) {\n        vac.reserve(vac.size() * my_magic_ratio);\n    }\n\n    vec.push_back(val);\n}\n</code></pre>\n<p>If you're into a bit hacky techniques, you can always pass in your own allocator and do whatever you need to do to reclaim the unused capacity. </p>\n", "OwnerUserId": "96885", "PostTypeId": "2", "Id": "1111270", "Score": "3", "CreationDate": "2009-07-10T18:41:05.700", "LastActivityDate": "2009-07-10T18:41:05.700"}, "bq_ids": {"n4140": {"so_1111078_1111311_0": {"section_id": 975, "quality": 0.75, "length": 12}}, "n3337": {"so_1111078_1111311_0": {"section_id": 962, "quality": 0.75, "length": 12}}, "n4659": {"so_1111078_1111311_0": {"section_id": 1036, "quality": 0.75, "length": 12}}}, "1111266": {"ParentId": "1111078", "CommentCount": "2", "Body": "<p>I'm not saying that GCC couldn't have some method for doing what you want without a copy, but it would be tricky to implement (I think) because vectors need to use an <code>Allocator</code> object to allocate and deallocate memory, and the interface for an <code>Allocator</code> doesn't include a <code>reallocate()</code> method.  I don't think it would be impossible to do, but it might be tricky.</p>\n", "OwnerUserId": "12711", "PostTypeId": "2", "Id": "1111266", "Score": "2", "CreationDate": "2009-07-10T18:40:15.623", "LastActivityDate": "2009-07-10T18:40:15.623"}});