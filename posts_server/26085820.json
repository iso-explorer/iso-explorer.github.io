post_cb({"26085890": {"ParentId": "26085820", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>\u00a7 3.10</p>\n<p>From how I interpret the standard, <code>lvalue</code>s, <code>xvalue</code>s and <code>prvalue</code>s are mutually exclusive.</p>\n<blockquote>\n<p id=\"so_26085820_26085890_0\">Every expression belongs to exactly one of the fundamental\n  classifications in this taxonomy: lvalue, xvalue, or prvalue.</p>\n</blockquote>\n<p>A literal such as <code>5</code> is a <code>prvalue</code>.</p>\n<blockquote>\n<p id=\"so_26085820_26085890_1\">\u2014 A prvalue (\u201cpure\u201d rvalue) is an rvalue that is not an xvalue. [\n  Example: The result of calling a function whose return type is not a\n  reference is a prvalue. The value of a literal such as 12, 7.3e5, or\n  true is also a prvalue. \u2014 end example ]</p>\n</blockquote>\n<p>And in your \"move\" function, you get an <code>xvalue</code> because:</p>\n<blockquote>\n<p id=\"so_26085820_26085890_2\">[ Example: The result of calling a function whose return type is an\n  rvalue reference is an xvalue. \u2014 end example ]</p>\n</blockquote>\n<p>As for why your assignment fails, see:</p>\n<blockquote>\n<p id=\"so_26085820_26085890_3\">5 An lvalue for an object is necessary in order to modify the object\n  except that an rvalue of class type can also be used to modify its\n  referent under certain circumstances. [ Example: a member function\n  called for aobject (9.3) can modify the object. \u2014 end example ]</p>\n</blockquote>\n<p><a href=\"http://en.cppreference.com/w/cpp/language/operator_assignment\" rel=\"nofollow\">cppreference's page on assigment operators</a> puts this in plainer language.</p>\n<blockquote>\n<p id=\"so_26085820_26085890_4\">The direct assignment operator expects a modifiable lvalue as its left\n  operand and an rvalue expression or a braced-init-list (since C++11)\n  as its right operand, and returns an lvalue identifying the left\n  operand after modification.</p>\n</blockquote>\n<p>So finally:</p>\n<pre><code>       move(5) =      10\nxvalue ^      prvalue ^\n</code></pre>\n<p>Reference:\n<a href=\"http://en.cppreference.com/w/cpp/language/value_category\" rel=\"nofollow\">Value categories</a></p>\n", "Id": "26085890", "LastEditDate": "2014-09-28T14:47:40.923", "OwnerDisplayName": "user3920237", "Score": "2", "CreationDate": "2014-09-28T14:30:17.280", "LastActivityDate": "2014-09-28T14:47:40.923", "LastEditorDisplayName": "user3920237"}, "26085820": {"CommentCount": "9", "ViewCount": "105", "PostTypeId": "1", "ClosedDate": "2014-09-28T15:42:42.257", "LastEditorUserId": "1530549", "CreationDate": "2014-09-28T14:20:12.683", "LastActivityDate": "2015-07-07T17:06:22.253", "Title": "c++11 about rvalue reference", "LastEditDate": "2015-07-07T17:06:22.253", "Id": "26085820", "Score": "-4", "Body": "<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint&amp;&amp; move(int&amp;&amp; t) {\n    return static_cast&lt;int &amp;&amp;&gt;(t);\n}\n\nint main() {\n    move(5) = 10;//why error? \n\n    return 0;\n}\n</code></pre>\n<p>Error</p>\n<pre><code>prog.cpp:9:13: error: using xvalue (rvalue reference) as lvalue\n</code></pre>\n<p><a href=\"http://ideone.com/qWx993\" rel=\"nofollow\">Here's the complete sample</a></p>\n<p>I can not understand. Does not move function return a rvalue reference?</p>\n", "Tags": "<c++><c++11><rvalue-reference>", "OwnerUserId": "2178911", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_26085820_26085890_2": {"section_id": 7230, "quality": 0.7692307692307693, "length": 10}, "so_26085820_26085890_3": {"section_id": 7234, "quality": 0.8571428571428571, "length": 24}, "so_26085820_26085890_0": {"section_id": 7230, "quality": 1.0, "length": 11}, "so_26085820_26085890_1": {"section_id": 7230, "quality": 0.8, "length": 20}}, "n3337": {"so_26085820_26085890_0": {"section_id": 6974, "quality": 1.0, "length": 11}, "so_26085820_26085890_3": {"section_id": 6978, "quality": 0.8571428571428571, "length": 24}, "so_26085820_26085890_1": {"section_id": 6974, "quality": 0.8, "length": 20}, "so_26085820_26085890_2": {"section_id": 6974, "quality": 0.7692307692307693, "length": 10}}, "n4659": {"so_26085820_26085890_2": {"section_id": 7424, "quality": 0.6923076923076923, "length": 9}, "so_26085820_26085890_0": {"section_id": 8741, "quality": 1.0, "length": 11}}}});