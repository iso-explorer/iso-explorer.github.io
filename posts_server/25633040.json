post_cb({"25633075": {"Id": "25633075", "PostTypeId": "2", "Body": "<p>What are called referred to as <em>Integer constants</em> in C are referred to as <em>integer literals</em> in C++. The rules used to determine the type of an <em>integer literal</em> are covered in the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3485.pdf\" rel=\"nofollow noreferrer\">draft C++ standard</a> section <code>2.14.2</code> <em>Integer literals</em> table <code>6</code> which says:</p>\n<blockquote>\n<p id=\"so_25633040_25633075_0\">The type of an integer literal is the first of the corresponding list\n  in Table 6 in which its value can be represented.</p>\n</blockquote>\n<p>and for <em>Octal or hexadecimal constant</em> with no suffix the table has the following order:</p>\n<blockquote id=\"so_25633040_25633075_1\">\n<pre><code>int\nunsigned int\nlong int\nunsigned long int\nlong long int\nunsigned long long int\n</code></pre>\n</blockquote>\n<p>So <code>0xFF</code> can be represented as an <em>int</em> while the first type that can represent <code>0xFFFFFFFF</code> would be <em>unsigned int</em>.</p>\n<p>The order for <em>Decimal Constants</em> is as follows:</p>\n<blockquote id=\"so_25633040_25633075_2\">\n<pre><code>int\nlong int\nlong long int\n</code></pre>\n</blockquote>\n<p>As we can see hexidecimal and octal literals behave differently, and we can see <a href=\"https://stackoverflow.com/a/24148306/1708801\">that C99 has the same table</a>. The <a href=\"http://www.open-std.org/jtc1/sc22/wg14/www/C99RationaleV5.10.pdf\" rel=\"nofollow noreferrer\"> Rationale for International Standard\u2014Programming Languages\u2014C</a> says the following about this:</p>\n<blockquote>\n<p id=\"so_25633040_25633075_3\">Unlike decimal constants, octal and hexadecimal constants too large to\n  be ints are typed as unsigned int if within range of that type, since\n  it is more likely that they represent bit patterns or masks, which are\n  generally best treated as unsigned, rather than \u201creal\u201d numbers.</p>\n</blockquote>\n<p><a href=\"http://en.cppreference.com/w/cpp/language/integer_literal\" rel=\"nofollow noreferrer\">cppreference integer literal section</a> also quotes table <code>6</code> in the <em>The type of the literal</em> sub-section.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2014-09-05T01:22:17.160", "Score": "6", "CreationDate": "2014-09-02T22:01:23.810", "ParentId": "25633040", "CommentCount": "2", "OwnerUserId": "1708801", "LastEditDate": "2017-05-23T12:05:47.803"}, "25633083": {"Id": "25633083", "PostTypeId": "2", "Body": "<p>There's a table in the standard, which is reproduced on cppreference.com: <a href=\"http://en.cppreference.com/w/cpp/language/integer_literal\" rel=\"noreferrer\">http://en.cppreference.com/w/cpp/language/integer_literal</a></p>\n<p>In particular, a hex or octal integer literal with no suffix is considered to have the first type in the following list in which its value can be represented:</p>\n<pre><code>int\nunsigned int\nlong int\nunsigned long int\nlong long int\nunsigned long long int\n</code></pre>\n<p><code>0xFFFFFFFF</code> is too big for <code>int</code> if <code>int</code> is 32 bits long, so <code>unsigned int</code> is chosen. But <code>0xFF</code> fits comfortably into an <code>int</code>, so <code>int</code> it is.</p>\n", "LastActivityDate": "2014-09-02T22:02:16.710", "CommentCount": "2", "CreationDate": "2014-09-02T22:02:16.710", "ParentId": "25633040", "Score": "12", "OwnerUserId": "481267"}, "25633086": {"Id": "25633086", "PostTypeId": "2", "Body": "<p><code>0xFF</code> is never negative. It is an alternative way of writing <code>255</code>. (It has type <code>int</code>).</p>\n<p><code>0xFFFFFFFF</code> is a large positive number. There is a table under [lex.icon] that specifies what the type is of an integer constant. For hex constants with no suffix, it is the first type in the following list that can hold that large positive number: <code>int</code>, <code>unsigned int</code>, <code>long int</code>, <code>unsigned long int</code>, <code>long long int</code>, <code>unsigned long long int</code>.  The implementation might add custom types ot this list.</p>\n", "LastActivityDate": "2014-09-02T22:02:19.057", "CommentCount": "1", "CreationDate": "2014-09-02T22:02:19.057", "ParentId": "25633040", "Score": "2", "OwnerUserId": "1505939"}, "bq_ids": {"n4140": {"so_25633040_25633075_2": {"length": 6, "quality": 1.0, "section_id": 22}, "so_25633040_25633075_1": {"length": 15, "quality": 1.0, "section_id": 22}, "so_25633040_25633075_0": {"length": 10, "quality": 0.8333333333333334, "section_id": 5341}}, "n3337": {"so_25633040_25633075_2": {"length": 6, "quality": 1.0, "section_id": 19}, "so_25633040_25633075_1": {"length": 15, "quality": 1.0, "section_id": 19}, "so_25633040_25633075_0": {"length": 10, "quality": 0.8333333333333334, "section_id": 5138}}, "n4659": {"so_25633040_25633075_2": {"length": 6, "quality": 1.0, "section_id": 22}, "so_25633040_25633075_1": {"length": 15, "quality": 1.0, "section_id": 22}, "so_25633040_25633075_0": {"length": 10, "quality": 0.8333333333333334, "section_id": 6762}}}, "25633040": {"ViewCount": "775", "Body": "<p>To give a little background (unrelated to the question, which will follow), in C++11 I noticed a narrowing issue:</p>\n<pre><code>int foo[] = { 0xFFFFFFFF };\n</code></pre>\n<p>This was failing to compile (narrowing conversion) because <code>0xFFFFFFFF</code> is an <code>unsigned int</code>. However, I've seen cases where <code>0xFF</code> is signed.</p>\n<p>I've looked over integer promotion rules, but this is mostly within the context of lvalues and not rvalues/constants. How does the compiler determine the type of constants (without literal suffixes)? Is there documentation or a nice little table / \"cheat sheet\" that shows the rules for this? I'm not even really sure what this is called, otherwise I'd have attempted to find it myself in the C++11 standard.</p>\n<p>Thanks in advance.</p>\n", "AcceptedAnswerId": "25633083", "Title": "Constant integer promotion rules?", "CreationDate": "2014-09-02T21:58:21.830", "Id": "25633040", "CommentCount": "2", "FavoriteCount": "2", "PostTypeId": "1", "LastActivityDate": "2014-09-05T01:22:17.160", "Score": "9", "OwnerUserId": "157971", "Tags": "<c++><c++11>", "AnswerCount": "3"}});