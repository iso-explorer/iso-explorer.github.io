post_cb({"33998748": {"CommentCount": "13", "ViewCount": "142", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2015-11-30T12:30:48.180", "LastActivityDate": "2015-12-01T09:22:07.557", "Title": "What's the reason for footnote 37 in 3.7.4.2[basic.stc.dynamic.deallocation]/2 in C++14?", "AcceptedAnswerId": "33999138", "LastEditDate": "2017-05-23T10:27:09.870", "Id": "33998748", "Score": "2", "Body": "<p>\u00a73.7.4.2/2 contains the following sentences:  </p>\n<blockquote>\n<p id=\"so_33998748_33998748_0\">The global <code>operator delete</code> with exactly two parameters, the second of\n  which has type <code>std::size_t</code>, is a usual deallocation function.\n  Similarly, the global <code>operator delete[]</code> with exactly one parameter is\n  a usual deallocation function. The global operator <code>delete[]</code> with\n  exactly two parameters, the second of which has type <code>std::size_t</code>, is a\n  usual deallocation function.<sup>37</sup></p>\n</blockquote>\n<p>37) This deallocation function precludes use of an allocation function <code>void operator new(std::size_t, std::size_t)</code> as a\nplacement allocation function.</p>\n<p>Not only did I not understand the reason for this footnote, but also I noticed that this placement form, alluded in the footnote, doesn't exist in <strong>\u00a718.6.1.3 Placement Forms [new.delete.placement]</strong>.</p>\n<p><strong>Edit</strong> In order to verify what <a href=\"https://stackoverflow.com/users/822669/sander-de-dycker\">@Sander De Dicker</a> is saying in his answer, I tested the following snippet:</p>\n<pre><code>#include &lt;iostream&gt;\n\nvoid* operator new  (std::size_t count, int i1, int i2, int i3){\n    void *p = malloc(count);\n    if (!p) throw std::bad_alloc{};\n    std::cout &lt;&lt; \"operator new\" &lt;&lt; '\\n';\n    return p;\n}\n\nvoid operator delete (void* p, int j1, int j2, int j3)\n{\n    free(p);\n    std::cout &lt;&lt; \"operator delete\" &lt;&lt; '\\n';\n}\n\nclass A {\npublic:\n    A() { std::cout &lt;&lt; \"A()\" &lt;&lt; '\\n'; };\n    ~A() { std::cout &lt;&lt; \"~A()\" &lt;&lt; '\\n'; }\n};\n\nint main()\n{\n    try\n    {\n        A *p = new(0, 0, 0) A;\n        delete p;\n    }\n    catch (std::bad_alloc&amp;) { exit(1); }\n}\n</code></pre>\n<p>In all 3 compilers that I have available (VS2015, clang and g++) the code invoked the placement <code>operator new(size_t, int, int, int)</code>, but didn't invoke the placement <code>operator delete(void*, int, int, int)</code>, but the <code>operator delete(void*)</code>. Now, I'm more confused than I was when I posted the question.</p>\n<p><a href=\"http://coliru.stacked-crooked.com/a/9c8fb1872168d868\" rel=\"nofollow noreferrer\">Live example</a></p>\n", "Tags": "<c++><memory-management><language-lawyer><c++14>", "OwnerUserId": "1042389", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_33998748_33999138_6": {"section_id": 6820, "quality": 1.0, "length": 5}, "so_33998748_33999138_5": {"section_id": 7181, "quality": 1.0, "length": 4}, "so_33998748_33998748_0": {"section_id": 7181, "quality": 0.9166666666666666, "length": 33}}, "n3337": {"so_33998748_33999138_6": {"section_id": 6575, "quality": 0.8, "length": 4}, "so_33998748_33998748_0": {"section_id": 6925, "quality": 0.8333333333333334, "length": 30}}, "n4659": {"so_33998748_33999138_6": {"section_id": 8312, "quality": 1.0, "length": 5}, "so_33998748_33999138_5": {"section_id": 8689, "quality": 1.0, "length": 4}}}, "33999138": {"ParentId": "33998748", "PostTypeId": "2", "CommentCount": "8", "Body": "<p><em>C.3.2 [diff.cpp11.basic]</em> explains that :</p>\n<blockquote>\n<p id=\"so_33998748_33999138_0\"><strong>C.3.2 Clause 3 : basic concepts [diff.cpp11.basic]</strong></p>\n<p id=\"so_33998748_33999138_1\">3.7.4.2</p>\n<p id=\"so_33998748_33999138_2\"><strong>Change</strong>: New usual (non-placement) deallocator</p>\n<p id=\"so_33998748_33999138_3\"><strong>Rationale</strong>: Required for sized deallocation.</p>\n<p id=\"so_33998748_33999138_4\"><strong>Effect on original feature</strong>: Valid C++ 2011 code could declare a global placement allocation function and deallocation function as follows:</p>\n<p id=\"so_33998748_33999138_5\"><code>void operator new(std::size_t, std::size_t);</code></p>\n<p id=\"so_33998748_33999138_6\"><code>void operator delete(void*, std::size_t) noexcept;</code></p>\n<p id=\"so_33998748_33999138_7\">In this International Standard, however, the declaration of <code>operator delete</code>\n  might match a predefined usual (non-placement) <code>operator delete</code> (3.7.4). If so, the program is ill-formed, as it was for class member allocation functions and deallocation functions (5.3.4).</p>\n</blockquote>\n<p>In other words, this is a breaking change with the previous standard (C++11). In C++11, it was allowed to define such <code>operator delete</code>, whereas in C++14 the program would be ill formed.</p>\n<h2><strong>Edit - some further clarification based on comments</strong> :</h2>\n<ul>\n<li><p><em>18.6.1.3 [new.delete.placement]</em> lists the reserved placement forms. You are however allowed to declare other (non-reserved) ones in your code. So, that part of the standard doesn't apply to your question.</p></li>\n<li><p><em>3.7.4.2 [basic.stc.dynamic.deallocation]</em> has the above mentioned change compared to C++11, which disallows the placement forms <code>operator new(std::size_t, std::size_t)</code> and <code>operator delete(void*, std::size_t)</code>, because the latter might match a predefined non-placement <code>operator delete</code>. This change is further documented in <em>C.3.2 [diff.cpp11.basic]</em>.</p></li>\n<li><p>Your edited question has already been addressed in comments (<a href=\"https://stackoverflow.com/questions/33998748/whats-the-reason-for-footnote-37-in-3-7-4-2basic-stc-dynamic-deallocation-2-i/33999138#comment55765926_33998748\">1</a>, <a href=\"https://stackoverflow.com/questions/33998748/whats-the-reason-for-footnote-37-in-3-7-4-2basic-stc-dynamic-deallocation-2-i/33999138#comment55766690_33998748\">2</a>) by <a href=\"https://stackoverflow.com/users/2756719/t-c\">@T.C.</a> , but I'll include it here for completeness :\nThe reason your custom <code>operator delete(void*, int, int, int)</code> is not called, is because the <code>operator new(std::size_t, int, int, int)</code> didn't throw an exception. <em>5.3.4 [expr.new]</em> explains that in <em>\u00a720-23</em>.</p></li>\n</ul>\n", "OwnerUserId": "822669", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T11:52:20.610", "Id": "33999138", "Score": "3", "CreationDate": "2015-11-30T12:53:24.117", "LastActivityDate": "2015-12-01T09:22:07.557"}});