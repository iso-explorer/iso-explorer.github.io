post_cb({"2718315": {"PostTypeId": "2", "ParentId": "92546", "Body": "<p><code>const</code> variables in C++ have internal linkage. So, using <code>static</code> has no effect. </p>\n<p><strong>a.h</strong></p>\n<pre><code>const int i = 10;\n</code></pre>\n<p><strong>one.cpp</strong></p>\n<pre><code>#include \"a.h\"\n\nfunc()\n{\n   cout &lt;&lt; i;\n}\n</code></pre>\n<p><strong>two.cpp</strong></p>\n<pre><code>#include \"a.h\"\n\nfunc1()\n{\n   cout &lt;&lt; i;\n}\n</code></pre>\n<p>If this were a C program, you would get 'multiple definition' error for <code>i</code> (due to external linkage).</p>\n", "CreationDate": "2010-04-27T02:18:06.607", "Score": "6", "LastEditDate": "2010-04-27T03:17:58.003", "CommentCount": "2", "Id": "2718315", "OwnerUserId": "326492", "LastEditorUserId": "56338", "LastActivityDate": "2010-04-27T03:17:58.003"}, "92611": {"PostTypeId": "2", "ParentId": "92546", "Body": "<p>Static prevents the compiler from adding multiple instances.  This becomes less important with #ifndef protection, but assuming the header is included in two seperate libraries, and the application is linked, two instances would be included.</p>\n", "CreationDate": "2008-09-18T13:40:11.280", "Score": "-2", "CommentCount": "1", "Id": "92611", "OwnerUserId": "16496", "LastActivityDate": "2008-09-18T13:40:11.280"}, "28106844": {"PostTypeId": "2", "ParentId": "92546", "Body": "<p><strong>const</strong> variables are by default static in C++, but extern C. So if you use C++ this no sense what construction to use.</p>\n<p>(7.11.6 C++ 2003, and Apexndix C has samples)</p>\n<p>Example in compare compile/link sources as C and C++ program:</p>\n<pre><code>bruziuz:~/test$ cat a.c\nconst int b = 22;\nint main(){return 0;}\nbruziuz:~/test$ cat b.c\nconst int b=2;\nbruziuz:~/test$ gcc -x c -std=c89 a.c b.c\n/tmp/ccSKKIRZ.o:(.rodata+0x0): multiple definition of `b'\n/tmp/ccDSd0V3.o:(.rodata+0x0): first defined here\ncollect2: error: ld returned 1 exit status\nbruziuz:~/test$ gcc -x c++ -std=c++03 a.c b.c \nbruziuz:~/test$ \nbruziuz:~/test$ gcc --version | head -n1\ngcc (Ubuntu 5.4.0-6ubuntu1~16.04.5) 5.4.0 20160609\n</code></pre>\n", "CreationDate": "2015-01-23T09:35:56.273", "Score": "1", "LastEditDate": "2017-11-15T01:56:54.283", "CommentCount": "5", "Id": "28106844", "OwnerUserId": "1154447", "LastEditorUserId": "1154447", "LastActivityDate": "2017-11-15T01:56:54.283"}, "92693": {"PostTypeId": "2", "ParentId": "92546", "Body": "<p>The static will mean you get one copy per file, but unlike others have said it's perfectly legal to do so. You can easily test this with a small code sample:</p>\n<p>test.h:</p>\n<pre><code>static int TEST = 0;\nvoid test();\n</code></pre>\n<p>test1.cpp:</p>\n<pre><code>#include &lt;iostream&gt;\n#include \"test.h\"\n\nint main(void) {\n    std::cout &lt;&lt; &amp;TEST &lt;&lt; std::endl;\n    test();\n}\n</code></pre>\n<p>test2.cpp:</p>\n<pre><code>#include &lt;iostream&gt;\n#include \"test.h\"\n\nvoid test() {\n    std::cout &lt;&lt; &amp;TEST &lt;&lt; std::endl;\n}\n</code></pre>\n<p>Running this gives you this output:</p>\n<blockquote>\n<p id=\"so_92546_92693_0\">0x446020<br>\n  0x446040</br></p>\n</blockquote>\n", "CreationDate": "2008-09-18T13:50:21.817", "Score": "38", "Id": "92693", "CommentCount": "1", "OwnerDisplayName": "slicedlime", "OwnerUserId": "11230", "LastActivityDate": "2008-09-18T13:50:21.817"}, "93663": {"LastEditDate": "2008-09-19T02:36:31.743", "Body": "<p>The <code>static</code> and <code>extern</code> tags on file-scoped variables determine whether they are accessible in other translation units (i.e. other <code>.c</code> or <code>.cpp</code> files). </p>\n<ul>\n<li><p><code>static</code> gives the variable internal linkage, hiding it from other translation units. However, variables with internal linkage can be defined in multiple translation units.</p></li>\n<li><p><code>extern</code> gives the variable external linkage, making it visible to other translation units. Typically this means that the variable must only be defined in one translation unit.</p></li>\n</ul>\n<p>The default (when you don't specify <code>static</code> or <code>extern</code>) is one of those areas in which C and C++ differ. </p>\n<ul>\n<li><p>In C, file-scoped variables are <code>extern</code> (external linkage) by default. If you're using C, <code>VAL</code> is <code>static</code> and <code>ANOTHER_VAL</code> is <code>extern</code>.</p></li>\n<li><p>In C++, file-scoped variables are <code>static</code> (internal linkage) by default if they are <code>const</code>, and <code>extern</code> by default if they are not. If you're using C++, both <code>VAL</code> and <code>ANOTHER_VAL</code> are <code>static</code>.</p></li>\n</ul>\n<p>From a draft of the <a href=\"http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1124.pdf\" rel=\"noreferrer\">C specification</a>:</p>\n<blockquote>\n<p id=\"so_92546_93663_0\">6.2.2 Linkages of identifiers\n  ... \n  -5- If the declaration of an identifier for a function has no storage-class specifier, its linkage\n  is determined exactly as if it were declared with the storage-class specifier extern. If\n  the declaration of an identifier for an object has file scope and no storage-class specifier,\n  its linkage is external.</p>\n</blockquote>\n<p>From a draft of the <a href=\"http://www.kuzbass.ru:8086/docs/isocpp/dcl.html\" rel=\"noreferrer\">C++ specification</a>:</p>\n<blockquote>\n<p id=\"so_92546_93663_1\">7.1.1 - Storage class specifiers [dcl.stc]\n  ...\n  -6- A name declared in a namespace scope without a storage-class-specifier has external linkage unless it has internal linkage because of a previous declaration and provided it is not declared const. Objects declared const and not explicitly declared extern have internal linkage. </p>\n</blockquote>\n", "LastEditorUserId": "8090", "LastEditorDisplayName": "bk1e", "CommentCount": "0", "OwnerUserId": "8090", "Score": "103", "PostTypeId": "2", "ParentId": "92546", "LastActivityDate": "2008-09-19T02:36:31.727", "OwnerDisplayName": "bk1e", "Id": "93663", "CreationDate": "2008-09-18T15:37:28.627"}, "92690": {"PostTypeId": "2", "ParentId": "92546", "Body": "<p>Assuming that these declarations are at global scope (i.e. aren't member variables), then:</p>\n<p><strong>static</strong> means 'internal linkage'. In this case, since it is declared <strong>const</strong> this can be optimised/inlined by the compiler. If you omit the <strong>const</strong> then the compiler must allocate storage in each compilation unit.</p>\n<p>By omitting <strong>static</strong> the linkage is <strong>extern</strong> by default. Again, you've been saved by the <strong>const</strong>ness - the compiler can optimise/inline usage. If you drop the <strong>const</strong> then you will get a <em>multiply defined symbols</em> error at link time.</p>\n", "CreationDate": "2008-09-18T13:49:53.830", "Score": "1", "Id": "92690", "CommentCount": "1", "OwnerDisplayName": "Seb Rose", "OwnerUserId": "12405", "LastActivityDate": "2008-09-18T13:49:53.830"}, "96783": {"PostTypeId": "2", "ParentId": "92546", "Body": "<p>To answer the question, \"does the static mean only one copy of VAL is created, in case the header is included by more than one source file?\"...</p>\n<p><strong>NO</strong>.  VAL will always be defined separately in every file that includes the header.</p>\n<p>The standards for C and C++ do cause a difference in this case.</p>\n<blockquote>\n<p id=\"so_92546_96783_0\">In C, file-scoped variables are extern by default. If you're using C, VAL is static and ANOTHER_VAL is extern.  </p>\n</blockquote>\n<p>Note that Modern linkers may complain about ANOTHER_VAL if the header is included in different files (same global name defined twice), and would definitely complain if ANOTHER_VAL was initialised to a different value in another file</p>\n<blockquote>\n<p id=\"so_92546_96783_1\">In C++, file-scoped variables are static by default if they are const, and extern by default if they are not. If you're using C++, both VAL and ANOTHER_VAL are static.</p>\n</blockquote>\n<p>You also need to take account of the fact that both variables are designated const.  Ideally the compiler would always choose to inline these variables and not include any storage for them. There is a whole host of reasons why storage can be allocated.  Ones I can think of...</p>\n<ul>\n<li>debug options</li>\n<li>address taken in the file</li>\n<li>compiler always allocates storage (complex const types can't easily be inlined, so becomes a special case for basic types)</li>\n</ul>\n", "CreationDate": "2008-09-18T20:47:42.877", "Score": "2", "Id": "96783", "CommentCount": "1", "OwnerDisplayName": "itj", "OwnerUserId": "888", "LastActivityDate": "2008-09-18T20:47:42.877"}, "92641": {"LastEditDate": "2017-11-15T02:46:52.963", "OwnerUserId": "13693", "Body": "<p>The <code>static</code> means that there will be one copy of <code>VAL</code> created for each source file it is included in.  But it also means that multiple inclusions will not result in multiple definitions of <code>VAL</code> that will collide at link time.  In C, without the <code>static</code> you would need to ensure that only one source file defined <code>VAL</code> while the other source files declared it <code>extern</code>. Usually one would do this by defining it (possibly with an initializer) in a source file and put the <code>extern</code> declaration in a header file.</p>\n<p><code>static</code> variables at global level are only visible in their own source file whether they got there via an include or were in the main file.</p>\n<hr>\n<p><em>Editor's note:</em> In C++, <code>const</code> objects with neither the <code>static</code> nor <code>extern</code> keywords in their declaration are implicitly <code>static</code>.</p>\n</hr>", "CreationDate": "2008-09-18T13:43:40.133", "CommentCount": "4", "Score": "94", "PostTypeId": "2", "ParentId": "92546", "LastActivityDate": "2017-11-15T02:46:52.963", "OwnerDisplayName": "Justsalt", "Id": "92641", "LastEditorUserId": "1505939"}, "92546": {"CreationDate": "2008-09-18T13:32:05.637", "Body": "<p>When refactoring away some <code>#defines</code> I came across declarations similar to the following in a C++ header file:</p>\n<pre><code>static const unsigned int VAL = 42;\nconst unsigned int ANOTHER_VAL = 37;\n</code></pre>\n<p>The question is, what difference, if any, will the static make?  Note that multiple inclusion of the headers isn't possible due to the classic <code>#ifndef HEADER</code> <code>#define HEADER</code> <code>#endif</code> trick (if that matters).</p>\n<p>Does the static mean only one copy of <code>VAL</code> is created, in case the header is included by more than one source file?</p>\n", "Score": "74", "LastEditorDisplayName": "Mark", "LastEditDate": "2014-06-17T15:12:10.667", "CommentCount": "0", "OwnerUserId": "9236", "Title": "Variable declarations in header files - static or not?", "LastActivityDate": "2017-11-15T02:46:52.963", "PostTypeId": "1", "Tags": "<c++><c><static>", "AcceptedAnswerId": "92641", "AnswerCount": "12", "Id": "92546", "FavoriteCount": "42", "OwnerDisplayName": "Rob", "ViewCount": "84710", "LastEditorUserId": "56338"}, "92568": {"PostTypeId": "2", "ParentId": "92546", "Body": "<p>Static prevents another compilation unit from externing that variable so that the compiler can just \"inline\" the variable's value where it is used and not create memory storage for it.</p>\n<p>In your second example, the compiler cannot assume that some other source file won't extern it, so it must actually store that value in memory somewhere.</p>\n", "CreationDate": "2008-09-18T13:35:38.623", "Score": "0", "Id": "92568", "CommentCount": "0", "OwnerDisplayName": "Jim Buck", "OwnerUserId": "2666", "LastActivityDate": "2008-09-18T13:35:38.623"}, "bq_ids": {"n3337": {"so_92546_93663_1": {"quality": 0.8275862068965517, "length": 24, "section_id": 5191}}}, "19077035": {"PostTypeId": "2", "ParentId": "92546", "Body": "<p>You can\u2019t declare a static variable without defining it as well (this is because the storage class modifiers static and extern are mutually exclusive). A static variable can be defined in a header file, but this would cause each source file that included the header file to have its own private copy of the variable, which is probably not what was intended.</p>\n", "CreationDate": "2013-09-29T10:34:49.687", "Score": "2", "CommentCount": "1", "Id": "19077035", "OwnerUserId": "2828177", "LastActivityDate": "2013-09-29T10:34:49.687"}, "92664": {"PostTypeId": "2", "ParentId": "92546", "Body": "<p>The static declaration at this level of code means that the variabel is only visible in the current compilation unit.  This means that only code within that module will see that variable.  </p>\n<p>if you have a header file that declares a variable static and that header is included in multiple C/CPP files, then that variable will be \"local\" to those modules.  There will be N copies of that variable for the N places that header is included.  They are not related to each other at all.  Any code within any of those source files will only reference the variable that is declared within that module.</p>\n<p>In this particular case, the 'static' keyword doesn't seem to be providing any benefit.  I might be missing something, but it seems to not matter -- I've never seen anything done like this before.</p>\n<p>As for inlining, in this case the variable is likely inlined, but that's only because it's declared const.  The compiler <em>might</em> be more likely to inline module static variables, but that's dependent on the situation and the code being compiled.  There is no guarantee that the compiler will inline 'statics'.</p>\n", "CreationDate": "2008-09-18T13:46:49.127", "Score": "5", "Id": "92664", "CommentCount": "2", "OwnerDisplayName": "Mark", "OwnerUserId": "4405", "LastActivityDate": "2008-09-18T13:46:49.127"}, "92749": {"PostTypeId": "2", "ParentId": "92546", "Body": "<p>The C book (free online) has a chapter about linkage, which explains the meaning of 'static' in more detail (although the correct answer is already given in other comments):\n<a href=\"http://publications.gbdirect.co.uk/c_book/chapter4/linkage.html\" rel=\"nofollow noreferrer\">http://publications.gbdirect.co.uk/c_book/chapter4/linkage.html</a></p>\n", "CreationDate": "2008-09-18T13:56:22.520", "Score": "2", "Id": "92749", "CommentCount": "0", "OwnerDisplayName": "Jan de Vos", "OwnerUserId": "11215", "LastActivityDate": "2008-09-18T13:56:22.520"}});