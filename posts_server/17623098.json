post_cb({"bq_ids": {"n4140": {"so_17623098_17623839_0": {"length": 29, "quality": 0.8529411764705882, "section_id": 6955}}, "n3337": {"so_17623098_17623839_0": {"length": 29, "quality": 0.8529411764705882, "section_id": 6702}}, "n4659": {"so_17623098_17623839_0": {"length": 29, "quality": 0.8529411764705882, "section_id": 8452}}}, "17623839": {"Id": "17623839", "PostTypeId": "2", "Body": "<p>From section 18.9 of the C++ Standard:</p>\n<blockquote>\n<p id=\"so_17623098_17623839_0\">An object of type initializer_list provides access to an array of\n  objects of type const E. [ Note: A pair of pointers or a pointer plus\n  a length would be obvious representations for initializer_list.\n  initializer_list is used to implement initializer lists as specified\n  in 8.5.4. Copying an initializer list does not copy the underlying\n  elements. \u2014 end note ]</p>\n</blockquote>\n<p>I think the reason for most of these things is that std::initializer_list isn't actually a container. It doesn't have value semantics, it has pointer semantics. Which is made obvious by the last portion of the quote: <em>Copying an initializer list does not copy the underlying elements.</em> Seeing as they were intended solely for the purpose of initializing things, I don't think it's that surprising that you don't get all the niceties of more <em>robust</em> containers such as tuples.</p>\n", "LastActivityDate": "2013-07-12T20:52:12.417", "CommentCount": "0", "CreationDate": "2013-07-12T20:52:12.417", "ParentId": "17623098", "Score": "3", "OwnerUserId": "583833"}, "17623098": {"ViewCount": "293", "Body": "<p>I have some questions regarding the design of <code>std::initializer_list</code>.\nI didn't find answers in <strong>[support.initlist]</strong>.</p>\n<p>Why does it have an explicitly defined default constructor?</p>\n<p>Why this constructor is not <code>constexpr</code>?</p>\n<p>Why the method <code>size()</code> is not <code>constexpr</code>?</p>\n<p>Why there's no traits giving the size of <code>initializer_list</code> (like specializing <code>std::tuple_size</code>)?</p>\n<p>Why it's not possible to statically access its elements (like specializing <code>std::get</code>)?</p>\n<p>What happens when <code>sizeof</code> is applied to <code>initializer_list</code>?</p>\n", "AcceptedAnswerId": "17623839", "Title": "questions regarding the design of std::initializer_list", "CreationDate": "2013-07-12T20:01:27.317", "Id": "17623098", "CommentCount": "10", "FavoriteCount": "3", "PostTypeId": "1", "LastActivityDate": "2013-07-12T20:52:12.417", "Score": "7", "OwnerUserId": "1003615", "Tags": "<c++><c++11>", "AnswerCount": "1"}});