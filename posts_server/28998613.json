post_cb({"28998613": {"CommentCount": "1", "ViewCount": "59", "CreationDate": "2015-03-11T22:29:51.587", "LastActivityDate": "2015-03-11T22:35:30.353", "Title": "actual value stored in a bool variable if a large value is assigned", "AcceptedAnswerId": "28998685", "PostTypeId": "1", "Id": "28998613", "Score": "0", "Body": "<p>what would be the value stored in a bool variable if I assign a value greater than 1 to it?</p>\n<pre><code>bool mySwitchVariable = false;\nmySwitchVariable = 3;\nif(mySwitchVariable == 3){\n    cout &lt;&lt; \"3 is stored in the bool\" &lt;&lt; endl;\n}\n</code></pre>\n<p>is this defined in spec?\ncan this behavior be compiler dependent?</p>\n<p>Thanks</p>\n", "Tags": "<c++><type-conversion>", "OwnerUserId": "512838", "AnswerCount": "1"}, "28998685": {"ParentId": "28998613", "CommentCount": "2", "Body": "<p>Bool is a standard defined build-in type. It supports assignment from numeric types for C compatibility.</p>\n<p>When assigning a numeric value different than zero the bool variable becomes true. When assigning zero, it becomes false.</p>\n<blockquote>\n<p id=\"so_28998613_28998685_0\">4.12 Boolean conversions [conv.bool] 1 A prvalue of arithmetic, unscoped enumeration, pointer, or pointer to member type can be\n  converted to a prvalue of type bool. A zero value, null pointer value,\n  or null member pointer value is converted to false; any other value is\n  converted to true. For direct-initialization (8.5), a prvalue of type\n  std::nullptr_t can be converted to a prvalue of type bool; the\n  resulting value is false.</p>\n</blockquote>\n", "OwnerUserId": "3037915", "PostTypeId": "2", "Id": "28998685", "Score": "4", "CreationDate": "2015-03-11T22:35:30.353", "LastActivityDate": "2015-03-11T22:35:30.353"}, "bq_ids": {"n4140": {"so_28998613_28998685_0": {"section_id": 44, "quality": 0.8888888888888888, "length": 40}}, "n3337": {"so_28998613_28998685_0": {"section_id": 41, "quality": 0.8666666666666667, "length": 39}}, "n4659": {"so_28998613_28998685_0": {"section_id": 45, "quality": 0.8888888888888888, "length": 40}}}});