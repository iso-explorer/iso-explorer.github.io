post_cb({"28118788": {"Id": "28118788", "PostTypeId": "2", "Body": "<p>So this note comes from <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3383.html#515\" rel=\"nofollow\">defect report 515</a> back in 2005 and back then the wording was different:</p>\n<blockquote>\n<p id=\"so_28118360_28118788_0\">When an id-expression (5.1.1 [expr.prim.general]) that is not part of\n  a class member access syntax (5.2.5 [expr.ref]) and not used to form a\n  pointer to member (5.3.1 [expr.unary.op]) is used in the body of a\n  non-static member function of class X or used in the mem-initializer\n  for a constructor of class X, if name lookup (3.4.1\n  [basic.lookup.unqual]) resolves the name in the id-expression to a\n  non-static non-type member of  some class C, the id-expression is\n  transformed into a class member access expression (5.2.5 [expr.ref])\n  using (*this) (9.3.2 [class.this]) as the postfix-expression to the\n  left of the . operator. [Note: If C is not X or a base class of X, the\n  class member access expression is ill-formed. \u2014end note]</p>\n</blockquote>\n<p>and has evolved, note that the current wording before the note:</p>\n<blockquote>\n<p id=\"so_28118360_28118788_1\">or C is X or a base class of X, the id-expression</p>\n</blockquote>\n<p>was not present in this earlier wording and so it made more sense to have the clarifying note, at this point the note seems redundant.</p>\n", "LastActivityDate": "2015-01-23T21:09:05.757", "CommentCount": "0", "CreationDate": "2015-01-23T21:09:05.757", "ParentId": "28118360", "Score": "1", "OwnerUserId": "1708801"}, "bq_ids": {"n4140": {"so_28118360_28118454_1": {"length": 8, "quality": 0.8888888888888888, "section_id": 6076}, "so_28118360_28118788_0": {"length": 40, "quality": 0.6557377049180327, "section_id": 5891}, "so_28118360_28118360_0": {"length": 77, "quality": 0.9058823529411765, "section_id": 5891}, "so_28118360_28118452_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 5891}, "so_28118360_28118454_0": {"length": 7, "quality": 0.875, "section_id": 7039}}, "n3337": {"so_28118360_28118454_1": {"length": 8, "quality": 0.8888888888888888, "section_id": 5844}, "so_28118360_28118788_0": {"length": 40, "quality": 0.6557377049180327, "section_id": 5662}, "so_28118360_28118360_0": {"length": 77, "quality": 0.9058823529411765, "section_id": 5662}, "so_28118360_28118452_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 5662}, "so_28118360_28118454_0": {"length": 7, "quality": 0.875, "section_id": 6785}}, "n4659": {"so_28118360_28118454_1": {"length": 8, "quality": 0.8888888888888888, "section_id": 7572}, "so_28118360_28118788_0": {"length": 40, "quality": 0.6557377049180327, "section_id": 7374}, "so_28118360_28118360_0": {"length": 77, "quality": 0.9058823529411765, "section_id": 7374}, "so_28118360_28118452_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 7374}, "so_28118360_28118454_0": {"length": 7, "quality": 0.875, "section_id": 8536}}}, "28118454": {"Id": "28118454", "PostTypeId": "2", "Body": "<p>The note basically implies that if you use <code>C::member</code> as a variable (and not just to determine its type, alignment or size) the program is obviously ill-formed.</p>\n<p>An example would be</p>\n<pre><code>class C \n{\n    int member;\n};\n\nclass X\n{\n    void memfun()\n    {\n        // Note that 'this' can be used here\n\n        C::member = 3; // member is potentially evaluated ([basic.def.odr]/2).\n                       // Thus the expression is transformed into \n                       // (*this).member\n                       // which is clearly ill-formed.\n    }\n};\n</code></pre>\n<p>The program is ill-formed because <code>member</code> doesn't have anything \"to do\" with <code>X</code> (it isn't a member of <code>X</code> or any base class thereof) and it is potentially evaluated.<br>\nThe quote is appropriate (though redundant).</br></p>\n<p>However, why would <code>sizeof(C::member)</code> not be ill-formed? Because <code>C::member</code> isn't potentially evaluated.</p>\n<blockquote>\n<p id=\"so_28118360_28118454_0\">An expression is <em>potentially evaluated</em> unless it is an unevaluated\n  operand (Clause 5) or a subexpression thereof.</p>\n</blockquote>\n<p>And [expr.sizeof]:</p>\n<blockquote>\n<p id=\"so_28118360_28118454_1\">The operand is either an expression, <strong>which is an unevaluated\n  operand</strong> (Clause 5), or a parenthesized <em>type-id</em>.</p>\n</blockquote>\n<p>Thus the id-expression isn't transformed.</p>\n", "LastEditorUserId": "3647361", "LastActivityDate": "2015-01-23T21:29:33.447", "Score": "1", "CreationDate": "2015-01-23T20:45:58.893", "ParentId": "28118360", "CommentCount": "10", "OwnerUserId": "3647361", "LastEditDate": "2015-01-23T21:29:33.447"}, "28118452": {"Id": "28118452", "PostTypeId": "2", "Body": "<p>The note is a bit ambiguous, but I think it is intended to be a note on the last part of the previous sentence, as if it had been written as:</p>\n<blockquote>\n<p id=\"so_28118360_28118452_0\">and if either the id-expression is potentially evaluated or C is X or a base class of X, then:</p>\n<ul>\n<li>the id-expression is transformed into a class member access expression (5.2.5) using (*this) (9.3.2) as the postfix-expression to the left of the . operator. [ Note: If C is not X or a base class of X, the class member access expression is ill-formed. \u2014 end note ]</li>\n</ul>\n</blockquote>\n<p>When read like this, the note is entirely correct.</p>\n<p>At any rate, notes aren't normative, so even if the wording leaves room for doubt, it doesn't really matter, because it has no impact whatsoever on any C++ program or implementation: no program becomes valid or invalid because of the wording of this note, and no implementation conforms or fails to conform because of this note. At worst, as happened here, it becomes harder to understand the standard, causing misinterpretations.</p>\n<p>And as Columbo mentioned in the comments, such misinterpretations by an implementor could possibly lead to non-conforming implementations, but that's not what happened here.</p>\n", "LastEditorUserId": "743382", "LastActivityDate": "2015-01-23T21:01:24.800", "Score": "6", "CreationDate": "2015-01-23T20:45:49.590", "ParentId": "28118360", "CommentCount": "2", "OwnerUserId": "743382", "LastEditDate": "2015-01-23T21:01:24.800"}, "28118360": {"ViewCount": "106", "Body": "<p>\u00a79.3.1/3 (emphasis is mine):  </p>\n<blockquote>\n<p id=\"so_28118360_28118360_0\">When an id-expression (5.1) that is not part of a class member access\n  syntax (5.2.5) and not used to form a pointer to member (5.3.1) is\n  used in a member of class X in a context where this can be used\n  (5.1.1), if name lookup (3.4) resolves the name in the id-expression\n  to a non-static non-type member of some class C, and if either the\n  id-expression is potentially evaluated <strong>or</strong> C is X or a base class of X,\n  the id-expression is transformed into a class member access expression\n  (5.2.5) using (*this) (9.3.2) as the postfix-expression to the left of\n  the . operator. [ Note: <strong>If C is not X or a base class of X, the class\n  member access expression is ill-formed</strong>. \u2014 end note ] Similarly during\n  name lookup, when an unqualified-id (5.1) used in the definition of a\n  member function for class X resolves to a static member, an enumerator\n  or a nested type of class X or of a base class of X, the\n  unqualified-id is transformed into a qualified-id (5.1) in which the\n  nested-name-specifier names the class of the member function.</p>\n</blockquote>\n<p>Shouldn't the Note above be more specific? I mean something like this: `If the id-expression is potentially evaluated and if C is not X or a base class of X, the class member access expression is ill-formed.\"</p>\n<p>Note that if the id-expression is an unevaluated operand the code will be valid even if C is not X, nor a base class of X, although in this case the transformation alluded in the paragraph will not take place.   </p>\n", "AcceptedAnswerId": "28118452", "Title": "Am I correct in my observation below about \u00a79.3.1/3 in the C++ Standard?", "CreationDate": "2015-01-23T20:39:26.443", "Id": "28118360", "CommentCount": "2", "PostTypeId": "1", "LastActivityDate": "2015-01-23T21:29:33.447", "Score": "1", "OwnerUserId": "411165", "Tags": "<c++><c++11><language-lawyer>", "AnswerCount": "3"}});