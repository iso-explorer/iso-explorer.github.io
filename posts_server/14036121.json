post_cb({"bq_ids": {"n4140": {"so_14036121_14036121_0": {"length": 29, "quality": 0.90625, "section_id": 289}}, "n3337": {"so_14036121_14036121_0": {"length": 29, "quality": 0.90625, "section_id": 280}}, "n4659": {"so_14036121_14036121_0": {"length": 29, "quality": 0.90625, "section_id": 296}}}, "14036142": {"Id": "14036142", "PostTypeId": "2", "Body": "<p>The conversion is taking place right here:</p>\n<pre><code>f&lt;Complex&gt;(1);\n</code></pre>\n<p>You are calling a function <code>f</code> that expects a <code>Complex</code>, but you are passing it an <code>int</code> instead. There is a <em>standard conversion</em> from <code>int</code> to <code>double</code> and a <em>user defined conversion</em> from <code>double</code> to <code>Complex</code>.</p>\n<p>What the standard is trying to say is that when you <em>explicitly</em> provide template arguments to a template function, those behave as if the function was declared with those types. That is, when you call <code>f&lt;Complex&gt;</code> it behaves as if declared:</p>\n<pre><code>void f( Complex );\n</code></pre>\n<p>Otherwise, had the template parameter not being explicitly specified, <code>T</code> would have been deduced to be <code>int</code> and no implicit conversion would have taken place.</p>\n", "LastEditorUserId": "927034", "LastActivityDate": "2012-12-26T05:17:02.797", "Score": "5", "CreationDate": "2012-12-26T04:55:50.570", "ParentId": "14036121", "CommentCount": "4", "LastEditDate": "2012-12-26T05:17:02.797", "OwnerUserId": "927034"}, "14036121": {"ViewCount": "420", "Body": "<p>Title of the topic is long and cryptic, but question is rather simple.</p>\n<p>I am reading <code>14.8.1 Explicit template argument specification</code> in the latest C++11 Specs draft(N3242=11-0012), page 375</p>\n<blockquote>\n<p id=\"so_14036121_14036121_0\">6 Implicit conversions (Clause 4) will be performed on a function\n  argument to convert it to the type of the corresponding function\n  parameter if the parameter type contains no template-parameters that\n  participate in template argument deduction. [ Note: Template\n  parameters do not participate in template argument deduction if they\n  are explicitly speci\ufb01ed. For example,</p>\n</blockquote>\n<pre><code>template&lt;class T&gt; void f(T);\nclass Complex {\n  Complex(double);\n};\nvoid g() {\n  f&lt;Complex&gt;(1); // OK, means f&lt;Complex&gt;(Complex(1))\n}\n</code></pre>\n<blockquote>\n<p id=\"so_14036121_14036121_1\">\u2014end note ]</p>\n</blockquote>\n<p>Could someone explain to me, what it trying to say and where is the conversion taking place in the example.<br>\nThanks !</br></p>\n", "AcceptedAnswerId": "14036142", "Title": "Explicit template function argument specification and Implicit conversion of function arguments in C++11", "CreationDate": "2012-12-26T04:52:57.563", "Id": "14036121", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2012-12-26T05:17:02.797", "Score": "4", "OwnerUserId": "465292", "Tags": "<c++><templates><stl><c++11>", "AnswerCount": "1"}});