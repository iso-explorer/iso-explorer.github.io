post_cb({"39132108": {"ParentId": "39118324", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>I was curious, so I made a few tests on Visual C++ 2015.</p>\n<pre><code>int f()\n{\n    if (false)\n        return 42;\n\n    // oops\n}\n\nint main()\n{\n    int i = f();\n}\n</code></pre>\n<p>I had to add the <code>if</code> to get a warning instead of a hard error:</p>\n<pre><code>&gt; cl /nologo /FAs /c a.cpp\na.cpp(6) : warning C4715: 'f': not all control paths return a value\n</code></pre>\n<p>The assembly code that's generated is pretty simple and I've removed the irrelevant parts. Here's the meat of <code>f()</code>:</p>\n<pre><code>f:\n    xor eax, eax\n    je label\n    mov eax, 42\nlabel:\n    ret\n</code></pre>\n<p>The <code>xor</code> line is basically <code>eax=0</code>. Because <code>if (false)</code> is a constant condition, the generated code doesn't even bother to do a comparison and will then jump unconditionally to <code>label</code>, which just returns from the function. You can see that the \"return value\" (<code>42</code>) would actually be stored in <code>eax</code>, but that this line won't ever be executed. Therefore, <code>eax == 0</code>.</p>\n<p>Here's what <code>main()</code> does:</p>\n<pre><code>    call f\n    mov _i$[ebp], eax\n    ret\n</code></pre>\n<p>It calls <code>f()</code> and blindly copies <code>eax</code> into a location on the stack (where <code>i</code> is). Therefore, <code>i == 0</code>.</p>\n<p>Let's try something more complicated with an object and a constructor:</p>\n<pre><code>struct S { int i=42; };\n\nS f()\n{\n    if (false)\n        return {};\n\n    // oops\n}\n\nint main()\n{\n    S s = f();\n}\n</code></pre>\n<p>What <code>main()</code> does is basically reserve <code>sizeof(S)</code> bytes on the stack, put the address of the first byte in <code>eax</code> and then call <code>f()</code>:</p>\n<pre><code>    lea eax, _s$[ebp]\n    push eax\n    call f\n</code></pre>\n<p>Again, <code>f()</code> won't do anything, as it will unconditionally jump to the end of the function:</p>\n<pre><code>f:\n    xor eax, eax\n    je label\n    ; some stuff\n    ; call S::S(), which would set i to 42\n    ; but none of that will happen\nlabel:\n    ret\n</code></pre>\n<p>So what happened to the <code>sizeof(S)</code> bytes in main? They were never changed. They contain whatever was already in memory at that particular location. They contain garbage.</p>\n<p>This is with an unoptimized build, on a given version of a given compiler. Change the compiler, change the behaviour. Enable the optimizer, <a href=\"https://stackoverflow.com/questions/36893251/why-does-the-enhanced-gcc-6-optimizer-break-practical-c-code/36893587\"><em>drastically</em> change the behaviour</a>.</p>\n<p>Don't do it.</p>\n", "OwnerUserId": "4885801", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T10:29:13.450", "Id": "39132108", "Score": "4", "CreationDate": "2016-08-24T20:01:29.920", "LastActivityDate": "2016-08-24T20:37:28.993"}, "39118324": {"CommentCount": "19", "AcceptedAnswerId": "39118529", "PostTypeId": "1", "LastEditorUserId": "3309790", "CreationDate": "2016-08-24T08:36:11.063", "LastActivityDate": "2016-08-24T20:37:28.993", "LastEditDate": "2016-08-24T08:57:10.823", "ViewCount": "2144", "FavoriteCount": "1", "Title": "What happens when a function that returns an object ends without a return statement", "Id": "39118324", "Score": "16", "Body": "<p>In C++, what happens when a function that is supposed to return an object ends without a return statement? What gets returned?</p>\n<p>e.g. </p>\n<pre><code>std::string func() {}\n</code></pre>\n", "Tags": "<c++><function><object><return><language-lawyer>", "OwnerUserId": "574733", "AnswerCount": "3"}, "39118529": {"ParentId": "39118324", "PostTypeId": "2", "CommentCount": "4", "Body": "<blockquote>\n<p id=\"so_39118324_39118529_0\">What gets returned?</p>\n</blockquote>\n<p>We don't know. According to the standard, the behavior is undefined.</p>\n<p><a href=\"http://eel.is/c++draft/stmt.return#2\">$6.6.3/2 The return statement\n[stmt.return]</a>:</p>\n<p>(emphasis mine)</p>\n<blockquote>\n<p id=\"so_39118324_39118529_1\">Flowing off the end of a constructor, a destructor, or a function with a cv <code>void</code> return type is equivalent to a <code>return</code> with no operand. Otherwise, flowing off the end of a function other than <code>main</code> (<a href=\"http://eel.is/c++draft/basic.start.main\">basic.start.main</a>) results in <strong>undefined behavior</strong>.</p>\n</blockquote>\n<p>In fact most compilers would give a warning for it, like <a href=\"http://rextester.com/VOZ49939\">Clang</a>:</p>\n<blockquote>\n<p id=\"so_39118324_39118529_2\">warning: control reaches end of non-void function [-Wreturn-type]</p>\n</blockquote>\n", "OwnerUserId": "3309790", "LastEditorUserId": "1364752", "LastEditDate": "2016-08-24T10:01:28.780", "Id": "39118529", "Score": "27", "CreationDate": "2016-08-24T08:45:25.313", "LastActivityDate": "2016-08-24T10:01:28.780"}, "bq_ids": {"n4140": {"so_39118324_39118529_2": {"section_id": 3360, "quality": 0.5714285714285714, "length": 4}}, "n3337": {"so_39118324_39118529_2": {"section_id": 3230, "quality": 0.5714285714285714, "length": 4}}, "n4659": {"so_39118324_39118529_2": {"section_id": 4126, "quality": 0.5714285714285714, "length": 4}, "so_39118324_39118529_1": {"section_id": 4799, "quality": 0.9166666666666666, "length": 22}}}, "39118370": {"ParentId": "39118324", "CommentCount": "10", "Body": "<blockquote>\n<p id=\"so_39118324_39118370_0\">In C++, what happens when a function that is supposed to return an object ends without a return statement?</p>\n</blockquote>\n<p>It causes undefined behavior. No one can tell what exactly will happen.</p>\n", "OwnerUserId": "1413395", "PostTypeId": "2", "Id": "39118370", "Score": "7", "CreationDate": "2016-08-24T08:38:45.260", "LastActivityDate": "2016-08-24T08:38:45.260"}});