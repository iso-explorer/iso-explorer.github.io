post_cb({"41935689": {"CommentCount": "5", "ViewCount": "122", "PostTypeId": "1", "LastEditorUserId": "485343", "CreationDate": "2017-01-30T12:14:05.623", "LastActivityDate": "2017-01-30T13:02:06.987", "Title": "Why does VC++ compile this code while Clang won't", "AcceptedAnswerId": "41935790", "LastEditDate": "2017-01-30T12:54:11.657", "Id": "41935689", "Score": "-1", "Body": "<p><a href=\"https://godbolt.org/g/kNlYxl\" rel=\"nofollow noreferrer\">https://godbolt.org/g/kNlYxl</a></p>\n<p>Clang version:  X86-64 clang 3.9.1<br>\nVC++ version: x86-64 CL 19 RC</br></p>\n<p>I would expect that it would compile since const char* is implicitely convertible to A and A is convertible to B. The interesting thing is that clang states that const char [5] is not convertible to A? Note: i understand now its not standard behavior, but i would still like to know the reason why VC++ accepts this code, i.e. which language extension is causing it?</p>\n<p>Error given by clang:</p>\n<pre><code>no viable conversion from 'const char [5]' to 'B'\n</code></pre>\n<p>Hints given by clang:</p>\n<pre><code>note: candidate constructor not viable: no known conversion from 'const char [5]' to 'A' for 1st argument   \nnote: candidate constructor (the implicit copy constructor) not viable: no known conversion from 'const char [5]' to 'const B &amp;' for 1st argument\n</code></pre>\n<pre><code>#include &lt;string&gt;\n#include &lt;vector&gt;\n\nstruct A\n{\n  std::string m_test;\n  A(const char* test)\n    : m_test(test)\n  {\n\n  }\n};\n\nstruct B\n{\n  A m_a;\n  B( A a )\n    : m_a(a)\n  {\n\n  }\n};\n\nint main()\n{\n  B test = \"test\";\n}\n</code></pre>\n", "Tags": "<c++><visual-c++><clang++>", "OwnerUserId": "3125562", "AnswerCount": "1"}, "41935790": {"ParentId": "41935689", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>Only one implicit user-defined conversion is allowed, see [class.conv]/4:</p>\n<blockquote>\n<p id=\"so_41935689_41935790_0\">At most one user-defined conversion (constructor or conversion function) is implicitly applied to a single value.</p>\n</blockquote>\n<p>So it seems to be a Microsoft C++ extension, indeed, if you disable MSVC extensions (<code>/Za</code>), you'll get the same error:</p>\n<pre><code>error C2440: 'initializing': cannot convert from 'const char [5]' to 'B'\n</code></pre>\n<p>As to the reason why - it looks like some kind of a \"multiple implicit conversions\" extension, but there is no mention of it in documentation. There was even a <a href=\"https://connect.microsoft.com/VisualStudio/feedback/details/1013248\" rel=\"nofollow noreferrer\">bug submitted</a>, and it was supposed to be fixed, but I guess that didn't work out.</p>\n", "OwnerUserId": "485343", "LastEditorUserId": "1889329", "LastEditDate": "2017-01-30T13:02:06.987", "Id": "41935790", "Score": "4", "CreationDate": "2017-01-30T12:18:52.337", "LastActivityDate": "2017-01-30T13:02:06.987"}, "bq_ids": {"n4140": {"so_41935689_41935790_0": {"section_id": 386, "quality": 1.0, "length": 11}}, "n3337": {"so_41935689_41935790_0": {"section_id": 377, "quality": 1.0, "length": 11}}, "n4659": {"so_41935689_41935790_0": {"section_id": 403, "quality": 1.0, "length": 11}}}});