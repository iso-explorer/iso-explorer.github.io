post_cb({"bq_ids": {"n4140": {"so_24356807_24357265_0": {"length": 29, "quality": 1.0, "section_id": 268}}, "n3337": {"so_24356807_24357265_0": {"length": 29, "quality": 1.0, "section_id": 259}}, "n4659": {"so_24356807_24357265_0": {"length": 29, "quality": 1.0, "section_id": 275}}}, "24357265": {"Id": "24357265", "PostTypeId": "2", "Body": "<p>The best solution is to declare that the library's explicit specializations exist.</p>\n<pre><code>// All in the same header file:\ntemplate &lt;typename T&gt; F* getF() { return 0; }\ntemplate &lt;&gt; F* getF&lt;int&gt;();\ntemplate &lt;&gt; F* getF&lt;float&gt;();\n</code></pre>\n<p>This satisfies the rule from Standard 14.7.3/6:</p>\n<blockquote>\n<p id=\"so_24356807_24357265_0\">If a template, a member template or a member of a class template is explicitly specialized then that specialization shall be declared before the first use of that specialization that would cause an implicit instantiation to take place, in every translation unit in which such a use occurs; no diagnostic is required.</p>\n</blockquote>\n", "LastActivityDate": "2014-06-23T01:11:25.667", "CommentCount": "0", "CreationDate": "2014-06-23T01:11:25.667", "ParentId": "24356807", "Score": "3", "OwnerUserId": "459640"}, "24357151": {"Id": "24357151", "PostTypeId": "2", "Body": "<p>Essentially you want the following: \"enable special cases of F when T is int or float\". It is exactly what constructs like boost::enable_if and std::enable_if are about. </p>\n<p>There are subtle differences in enabling/disabling functions vs. classes (classes are easier). See good examples here: <a href=\"https://stackoverflow.com/questions/8743159/boostenable-if-not-in-function-signature\">boost::enable_if not in function signature</a></p>\n<p>You might need some MPL (Boost Meta-programming Library) to express the \"or\" part of your rule.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2014-06-23T00:52:16.167", "Score": "0", "CreationDate": "2014-06-23T00:52:16.167", "ParentId": "24356807", "CommentCount": "2", "OwnerUserId": "2876861", "LastEditDate": "2017-05-23T12:27:18.597"}, "24356807": {"ViewCount": "156", "Body": "<p>So far, I had a setup where a certain function template <code>getF</code> was declared like this in the headers</p>\n<pre><code>template &lt;typename T&gt; F* getF();\n</code></pre>\n<p>leaving the function body undefined. Then on a shared library, <code>getF</code>has some specializations..</p>\n<pre><code>template&lt;&gt;\nF* getF&lt;int&gt;()\n{\n  static int r = 42;\n  static Finstance(r);\n  return &amp;Finstance;\n}\n\ntemplate&lt;&gt;\nF* getF&lt;float&gt;()\n{\n  static float r = 3.14159;\n  static Finstance(r);\n  return &amp;Finstance;\n}\n</code></pre>\n<p>The above has work so far nicely, as when on a client executable I invoke <code>getF&lt;float&gt;()</code>, the linker will replace with the appropriate references, and if the specialization doesn't exist in the library, then the compilation will fail with a linker error (which was the desired behavior)</p>\n<p>However, Now there should be a small change in the behavior: when the result is not specialized for a given template parameter, the code should build, but return 0 at run-time.\nSo what I did is change the declaration of <code>getF</code> like this:</p>\n<pre><code>template &lt;typename T&gt; F* getF() { return 0; }\n</code></pre>\n<p>The problem is that, now the compiler will use this definition for all cases, regardless if there is an specialization in the library</p>\n<blockquote>\n<p id=\"so_24356807_24356807_0\"><strong>Question:</strong> Is there some other way to provide some default behaviour for the function at runtime, without moving the\n  specializations to header files?</p>\n</blockquote>\n", "AcceptedAnswerId": "24357265", "Title": "Template function specialization symbol matching across libraries", "CreationDate": "2014-06-22T23:48:57.280", "Id": "24356807", "CommentCount": "1", "LastEditDate": "2014-06-22T23:55:26.893", "PostTypeId": "1", "LastEditorUserId": "170521", "LastActivityDate": "2014-06-23T01:11:25.667", "Score": "2", "OwnerUserId": "170521", "Tags": "<c++><linker><shared-libraries><template-specialization><function-templates>", "AnswerCount": "2"}});