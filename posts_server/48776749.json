post_cb({"48776798": {"Id": "48776798", "PostTypeId": "2", "Body": "<p>Edit: I was too quick and didn't notice the <code>const char[6]</code>. Since none of your checks involve <code>&amp;</code>:</p>\n<p>Quoting <a href=\"http://eel.is/c++draft/expr.prim#literal\" rel=\"nofollow noreferrer\">8.4.1 Literals</a>:</p>\n<blockquote>\n<p id=\"so_48776749_48776798_0\">A literal is a primary expression. Its type depends on its form. A\n  string literal is an <a href=\"http://en.cppreference.com/w/c/language/value_category\" rel=\"nofollow noreferrer\"><strong>lvalue</strong></a>; all other literals are prvalues.</p>\n</blockquote>\n<p>Hence, the type is <code>const char (&amp;)[6]</code>.</p>\n", "LastEditorUserId": "2812864", "LastActivityDate": "2018-02-13T22:44:41.587", "Score": "3", "CreationDate": "2018-02-13T22:33:33.987", "ParentId": "48776749", "CommentCount": "1", "OwnerUserId": "2812864", "LastEditDate": "2018-02-13T22:44:41.587"}, "48776832": {"Id": "48776832", "PostTypeId": "2", "Body": "<p>Type is <code>const char (&amp;)[6]</code> as you can see <a href=\"http://coliru.stacked-crooked.com/a/f87267ce33c85695\" rel=\"nofollow noreferrer\">here</a></p>\n", "LastActivityDate": "2018-02-13T22:36:29.497", "Score": "1", "CreationDate": "2018-02-13T22:36:29.497", "ParentId": "48776749", "CommentCount": "0", "OwnerUserId": "2684539"}, "48776749": {"ViewCount": "76", "Body": "<p>Consider the following program:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;type_traits&gt;\n\nint main(int argc, char* argv[])\n{\n    std::cout &lt;&lt; std::is_same&lt;decltype(\"hello\"), char*&gt;::value &lt;&lt; std::endl;\n    std::cout &lt;&lt; std::is_same&lt;decltype(\"hello\"), const char*&gt;::value &lt;&lt; std::endl;\n    std::cout &lt;&lt; std::is_same&lt;decltype(\"hello\"), char[5]&gt;::value &lt;&lt; std::endl;\n    std::cout &lt;&lt; std::is_same&lt;decltype(\"hello\"), const char[5]&gt;::value &lt;&lt; std::endl;\n    std::cout &lt;&lt; std::is_same&lt;decltype(\"hello\"), char[6]&gt;::value &lt;&lt; std::endl;\n    std::cout &lt;&lt; std::is_same&lt;decltype(\"hello\"), const char[6]&gt;::value &lt;&lt; std::endl;\n    std::cout &lt;&lt; std::is_same&lt;decltype(\"hello\"), char[]&gt;::value &lt;&lt; std::endl;\n    std::cout &lt;&lt; std::is_same&lt;decltype(\"hello\"), const char[]&gt;::value &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>\n<p>It returns only zeroes, while I would have expected <code>\"hello\"</code> to be a <code>const char[6]</code>. What is the type of <code>\"hello\"</code>?</p>\n", "AcceptedAnswerId": "48776798", "Title": "String literal type is not as expected", "CreationDate": "2018-02-13T22:28:40.817", "Id": "48776749", "CommentCount": "4", "PostTypeId": "1", "ClosedDate": "2018-02-13T22:44:24.457", "LastActivityDate": "2018-02-13T22:44:41.587", "Score": "1", "OwnerUserId": "882932", "Tags": "<c++><c++11><char><string-literals><decltype>", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_48776749_48776798_0": {"length": 15, "quality": 1.0, "section_id": 5947}}, "n3337": {"so_48776749_48776798_0": {"length": 15, "quality": 1.0, "section_id": 5717}}, "n4659": {"so_48776749_48776798_0": {"length": 15, "quality": 1.0, "section_id": 7433}}}});