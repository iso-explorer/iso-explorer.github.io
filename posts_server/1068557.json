post_cb({"1068863": {"ParentId": "1068557", "CommentCount": "0", "Body": "<p>Yes you can count on this.</p>\n<pre><code>// retrieve reference to string stored at \"x\"\n// note that since [] returns a reference, it must insert an element at \"x\" if \n// it doesn't exists (in this case an empty string)\nstd::string &amp;a= map[\"x\"];\n\n// retrieve reference for \"x\" again and set value to \"foo\"\nmap[\"x\"] = \"foo\";\n\n// use already stored reference\na = \"bar\";\n</code></pre>\n", "OwnerUserId": "106205", "PostTypeId": "2", "Id": "1068863", "Score": "0", "CreationDate": "2009-07-01T12:23:20.787", "LastActivityDate": "2009-07-01T12:23:20.787"}, "1069200": {"ParentId": "1068557", "CommentCount": "5", "Body": "<p>The Standard is clear on this in <code>23.1.2/8</code> about associative containers</p>\n<blockquote>\n<p id=\"so_1068557_1069200_0\">The insert members shall not affect the validity of iterators and references to the container, and the erase members shall invalidate only iterators and references to the erased elements.</p>\n</blockquote>\n", "OwnerUserId": "34509", "PostTypeId": "2", "Id": "1069200", "Score": "8", "CreationDate": "2009-07-01T13:40:18.357", "LastActivityDate": "2009-07-01T13:40:18.357"}, "1068695": {"ParentId": "1068557", "PostTypeId": "2", "CommentCount": "3", "Body": "<blockquote>\n<p id=\"so_1068557_1068695_0\">Map has the important property that inserting a new element into a map does not invalidate iterators that point to existing elements.\n  quote taken from <a href=\"http://www.sgi.com/tech/stl/Map.html\" rel=\"nofollow noreferrer\">sgi docs</a>.</p>\n</blockquote>\n<p>If the iterators are guaranteed not to change then the values they point at also cannot change.</p>\n<p>naveen previously had an answer that was similar to this. Unless there is a mistake in my logic what you are doing is safe.</p>\n<p>Edit 2:\nSee point 3 in <a href=\"http://www.sgi.com/tech/stl/Map.html#3\" rel=\"nofollow noreferrer\">sgi docs</a> to see how getting a value from operator [] is the same as getting the value from an iterator.</p>\n", "OwnerUserId": "70365", "LastEditorUserId": "70365", "LastEditDate": "2009-07-01T11:52:26.857", "Id": "1068695", "Score": "3", "CreationDate": "2009-07-01T11:45:28.367", "LastActivityDate": "2009-07-01T11:52:26.857"}, "1068557": {"CommentCount": "4", "ViewCount": "2498", "CreationDate": "2009-07-01T11:17:51.480", "LastActivityDate": "2009-07-01T13:40:18.357", "Title": "C++ Storing references to values in std::map", "AcceptedAnswerId": "1069200", "PostTypeId": "1", "Id": "1068557", "Score": "6", "Body": "<p>Am I right in assuming that adding/removing elements to an std::map does not effect the other elements (ie cause them to be relocated in memory) and so that the following is safe:</p>\n<p>I looked at various sites with info on the container but only found out about the cases where iterators are invalidated, which I already know...</p>\n<pre><code>std::map&lt;std::string,std::string&gt; map;\nPopulateMap(map);\nstd::string &amp;a= map[\"x\"];\nAddMoreData(map);\nRemoveRandomKeysExceptX(map);\nmap[\"x\"] = \"foo\";\nstd::cout &lt;&lt; a &lt;&lt; \" \" &lt;&lt; map[\"x\"] &lt;&lt; std::endl;//prints \"foo foo\"\na = \"bar\";\nstd::cout &lt;&lt; a &lt;&lt; \" \" &lt;&lt; map[\"x\"] &lt;&lt; std::endl;//prints \"bar bar\"\n</code></pre>\n<p>I tested some similar code on VC9, which seems to work however that doesn't mean I didn't just get lucky or that it doesn't vary across compilers.</p>\n", "Tags": "<c++><reference><stdmap>", "OwnerUserId": "6266", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_1068557_1069200_0": {"section_id": 745, "quality": 0.9333333333333333, "length": 14}}, "n3337": {"so_1068557_1069200_0": {"section_id": 734, "quality": 0.9333333333333333, "length": 14}}, "n4659": {"so_1068557_1069200_0": {"section_id": 803, "quality": 0.9333333333333333, "length": 14}}}});