post_cb({"bq_ids": {"n4140": {"so_34261861_34262158_0": {"length": 48, "quality": 0.9411764705882353, "section_id": 5907}}, "n3337": {"so_34261861_34262158_0": {"length": 48, "quality": 0.9411764705882353, "section_id": 5679}}, "n4659": {"so_34261861_34262158_0": {"length": 46, "quality": 0.9019607843137255, "section_id": 7389}}}, "34261861": {"ViewCount": "133", "Body": "<p>Answers in <a href=\"https://stackoverflow.com/questions/185844/initializing-private-static-members\">Initializing private static members</a> say that the private static member should be initialized in the source file.</p>\n<p>Hence, this is what I tried:</p>\n<p><strong>.h</strong></p>\n<pre><code>#ifndef MAINWINDOW_H\n#define MAINWINDOW_H\n\n#include &lt;QMainWindow&gt;\n#include &lt;QApplication&gt;\n\n#include &lt;pthread.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;sys/syscall.h&gt;\n#include &lt;iostream&gt;\n#include &lt;QDebug&gt;\n\nclass MainWindow : public QMainWindow\n{\n    Q_OBJECT\n\n    static pthread_mutex_t mutexVariable;\n    static pthread_cond_t  conditionVariable;\n    static QList &lt;int&gt; queueLIFO;\n\npublic:\n    MainWindow(QWidget *parent = 0);\n    ~MainWindow();\n\n    static void *producerThreadFunction (void *arg);\n    static void *consumerThreadFunction (void *arg);\n    int start ();\n};\n\n#endif // MAINWINDOW_H\n</code></pre>\n<p><strong>and .cpp</strong></p>\n<pre><code>#include \"mainwindow.h\"\n\nMainWindow::MainWindow(QWidget *parent)\n    : QMainWindow(parent)\n{\n    MainWindow::mutexVariable     = PTHREAD_MUTEX_INITIALIZER;\n    MainWindow::conditionVariable = PTHREAD_COND_INITIALIZER;\n}\n</code></pre>\n<p><strong>error: undefined reference to `MainWindow::mutexVariable'</strong> </p>\n<p><strong>error: undefined reference to `MainWindow::conditionVariable'</strong></p>\n<hr>\n<p>I also tried this:</p>\n<pre><code>#include \"mainwindow.h\"\n\nMainWindow::mutexVariable     = PTHREAD_MUTEX_INITIALIZER;\nMainWindow::conditionVariable = PTHREAD_COND_INITIALIZER;\n\n\nMainWindow::MainWindow(QWidget *parent)\n    : QMainWindow(parent)\n{\n}\n</code></pre>\n<p>It resulted in:</p>\n<p><strong>error: 'pthread_mutex_t MainWindow::mutexVariable' is private\n     static pthread_mutex_t mutexVariable;// = PTHREAD_MUTEX_INITIALIZER;</strong>\n                            ^</p>\n</hr>", "AcceptedAnswerId": "34262939", "Title": "Initializing private static member in .cpp gives me error: undefined reference", "CreationDate": "2015-12-14T07:39:23.923", "Id": "34261861", "CommentCount": "0", "LastEditDate": "2017-05-23T12:10:48.913", "PostTypeId": "1", "LastEditorUserId": "-1", "LastActivityDate": "2015-12-14T08:58:32.040", "Score": "-1", "OwnerUserId": "5571184", "Tags": "<c++><static>", "AnswerCount": "3"}, "34262158": {"Id": "34262158", "PostTypeId": "2", "Body": "<p>According to article 9.4.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf\" rel=\"nofollow\">N3797</a> a.k.a. [class\u200c\u200b.static.data]</p>\n<blockquote>\n<p id=\"so_34261861_34262158_0\">The declaration of a static data member in its class definition is not a definition and may be of an incomplete type other than cv-qualified void. The definition for a static data member shall appear in a namespace scope enclosing the member\u2019s class definition. In the definition at namespace scope, the name of the static data member shall be qualified by its class name using the :: operator. The initializer expression in the definition of a static data member is in the scope of its class </p>\n</blockquote>\n<p>You need to put these line of code outside of the constructor</p>\n<pre><code>pthread_mutex_t MainWindow::mutexVariable     = PTHREAD_MUTEX_INITIALIZER;\npthread_cond_t MainWindow::conditionVariable = PTHREAD_COND_INITIALIZER;\n</code></pre>\n<p><strong>Updated</strong></p>\n<p>End of the day, you can change that value later in constructor, of course I don't know why you need to change it:</p>\n<pre><code>#include \"mainwindow.h\"\n\npthread_mutex_t MainWindow::mutexVariable     = PTHREAD_MUTEX_INITIALIZER;\npthread_cond_t MainWindow::conditionVariable = PTHREAD_COND_INITIALIZER;\n\n\nMainWindow::MainWindow(QWidget *parent)\n    : QMainWindow(parent)\n{\n    MainWindow::mutexVariable     = /* another mutex */;\n    MainWindow::conditionVariable = /* another mutex */;\n}\n</code></pre>\n<p>By the way, I suggest you not use raw mutex and conditional variable. I suggest you use <code>std::mutex</code> and <code>std::condition_variable</code> instead, if you have access to C++11 or later. Or you can use <code>QMutex</code>, <code>QWaitCondition</code>, and <code>QReadWriteLock</code> in Qt instead</p>\n", "LastEditorUserId": "4115625", "LastActivityDate": "2015-12-14T08:44:04.380", "Score": "2", "CreationDate": "2015-12-14T08:02:36.887", "ParentId": "34261861", "CommentCount": "6", "LastEditDate": "2015-12-14T08:44:04.380", "OwnerUserId": "4115625"}, "34261946": {"Id": "34261946", "PostTypeId": "2", "Body": "<p>You should initialize it outside the constructor as separate data variables:</p>\n<pre><code>pthread_mutex_t MainWindow::mutexVariable     = PTHREAD_MUTEX_INITIALIZER;\npthread_cond_t MainWindow::conditionVariable = PTHREAD_COND_INITIALIZER;\n</code></pre>\n<p><strong>EDIT:</strong></p>\n<p>You can refer to <a href=\"https://stackoverflow.com/a/185848/5218277\">this post</a> in SO for explanation of static members initialization.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2015-12-14T07:58:48.703", "Score": "2", "CreationDate": "2015-12-14T07:44:44.733", "ParentId": "34261861", "CommentCount": "9", "LastEditDate": "2017-05-23T10:27:20.597", "OwnerUserId": "5218277"}, "34262939": {"Id": "34262939", "PostTypeId": "2", "Body": "<p>Assignment and initialization are two completely different things, though they often look confusingly similar. You have assignments, not initializations.</p>\n<p>But the error messages don't say \"uninitialized\", they say \"undefined\". Which means your program is missing <em>definitios</em>.</p>\n<pre><code>pthread_mutex_t MainWindow::mutexVariable     = PTHREAD_MUTEX_INITIALIZER;\n</code></pre>\n<p>This is a definition. You know it is because it starts with a type. You must have <em>exactly one</em> of those for each static data member in your entire program, outside of any function. Initialization is tied to definition and will be performed exactly once (if you use the variable).</p>\n<pre><code>MainWindow::mutexVariable     = PTHREAD_MUTEX_INITIALIZER;\n</code></pre>\n<p>This is an assignment. It is only legal inside a function. You can have as many of those as you want, and each one may be performed any number of times.</p>\n", "LastActivityDate": "2015-12-14T08:58:32.040", "Score": "1", "CreationDate": "2015-12-14T08:58:32.040", "ParentId": "34261861", "CommentCount": "0", "OwnerUserId": "775806"}});