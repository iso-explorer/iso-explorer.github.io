post_cb({"19728661": {"ParentId": "19728109", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>It looks like its the order of declaration. If you forward declare the relevant overload of foo above foo 2 then you will see the result you expected, i.e put this above foo 2:</p>\n<pre><code>template &lt;typename... A&gt;\nvoid foo(char a, A... args);\n</code></pre>\n<p>The relevant portion of the standard is in 3.4.1.4:</p>\n<blockquote>\n<p id=\"so_19728109_19728661_0\">A name used in global scope, outside of any function, class or\n  user-declared namespace, shall be declared before its use in global\n  scope.</p>\n</blockquote>\n<p>And in 14.6.4.1 Dependent name resolution:</p>\n<blockquote>\n<p id=\"so_19728109_19728661_1\">In resolving dependent names, names from the following sources are\n  considered:</p>\n<p id=\"so_19728109_19728661_2\">\u2014 Declarations that are visible at the point of definition\n  of the template.</p>\n<p id=\"so_19728109_19728661_3\">\u2014 Declarations from namespaces associated with the\n  types of the function arguments both from the instantiation context\n  (14.6.4.1) and from the definition context.</p>\n</blockquote>\n<p>As <code>args</code> is a dependent type, name resolution only considers names visible as the point of definition of the template. <code>foo 3</code> has not been declared by this point so can't be considered in overload resolution. On that basis Visual Studio appears to be wrong in allowing the use of <code>foo 3</code>.</p>\n", "OwnerUserId": "209549", "LastEditorUserId": "209549", "LastEditDate": "2013-11-01T14:58:17.077", "Id": "19728661", "Score": "3", "CreationDate": "2013-11-01T14:22:06.660", "LastActivityDate": "2013-11-01T14:58:17.077"}, "19728288": {"ParentId": "19728109", "CommentCount": "3", "Body": "<p><code>foo 2</code> cannot call <code>foo 3</code> because <code>foo 3</code> is not in scope of <code>foo 2</code>.</p>\n", "OwnerUserId": "775806", "PostTypeId": "2", "Id": "19728288", "Score": "1", "CreationDate": "2013-11-01T14:01:30.713", "LastActivityDate": "2013-11-01T14:01:30.713"}, "19728109": {"CommentCount": "0", "AcceptedAnswerId": "19728661", "PostTypeId": "1", "LastEditorUserId": "2895182", "CreationDate": "2013-11-01T13:51:56.320", "LastActivityDate": "2013-11-01T14:58:17.077", "LastEditDate": "2013-11-01T14:30:45.083", "ViewCount": "205", "FavoriteCount": "2", "Title": "Variadic template and type deduction issue", "Id": "19728109", "Score": "1", "Body": "<p>In question 15 of the <a href=\"http://www.pvv.org/~oma/PubQuiz_ACCU_Apr2012.pdf\" rel=\"nofollow\">2012 ACCU C++ Pub quiz</a>, I am stumped by the result. </p>\n<pre><code>#include &lt;iostream&gt;\n\ntemplate&lt;typename T&gt; void P(T x) { std::cout &lt;&lt; x; }\n\nvoid foo(char a) {  // foo 1\n    P(3);\n    P(a);\n}\n\ntemplate &lt;typename... A&gt;  // foo 2\nvoid foo(int a, A... args) {\n    foo(args...);\n    P(a);\n}\n\ntemplate &lt;typename... A&gt;\nvoid foo(char a, A... args) { // foo 3\n    P(a);\n    foo(args...);\n}\n\nint main()\n{\n    foo('1','2',48,'4','5');\n}\n</code></pre>\n<p>I reasoned that it would call <code>foo 3</code>, <code>foo 3</code>, <code>foo 2</code>, <code>foo 3</code>, <code>foo 1</code>, and thus give an output of <code>1243548</code>. The actual output is <code>12355248</code>, and confirmed in my debugger as following <code>foo 3</code>, <code>foo 3</code>, <code>foo 2</code>, <code>foo 2</code>, <code>foo 1</code>. I cannot work out why the fourth <code>foo</code> call is going to <code>foo 2</code> not <code>foo 3</code>.</p>\n<p>For reference, I compiled with gcc 4.8.1 <code>g++ -g -Wall -std=c++11 -Weffc++ -Wextra -O0 /tmp/foo.cpp -o /tmp/foo</code> and got no warnings at all.</p>\n<hr>\n<p>Edit: I've just tried it on Visual Studio Express 2013, and it gives <code>1243548</code>, also with no warnings.</p>\n<p>Is this a compiler bug in GCC / VS, or one of those awkward unspecified behaviour parts of the specification?</p>\n</hr>", "Tags": "<c++><c++11><type-conversion><variadic-templates>", "OwnerUserId": "2895182", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_19728109_19728661_1": {"section_id": 215, "quality": 1.0, "length": 6}, "so_19728109_19728661_3": {"section_id": 215, "quality": 0.9166666666666666, "length": 11}, "so_19728109_19728661_2": {"section_id": 215, "quality": 1.0, "length": 5}, "so_19728109_19728661_0": {"section_id": 7090, "quality": 1.0, "length": 14}}, "n3337": {"so_19728109_19728661_1": {"section_id": 209, "quality": 1.0, "length": 6}, "so_19728109_19728661_3": {"section_id": 209, "quality": 0.9166666666666666, "length": 11}, "so_19728109_19728661_2": {"section_id": 209, "quality": 1.0, "length": 5}, "so_19728109_19728661_0": {"section_id": 6834, "quality": 1.0, "length": 14}}, "n4659": {"so_19728109_19728661_1": {"section_id": 223, "quality": 1.0, "length": 6}, "so_19728109_19728661_3": {"section_id": 223, "quality": 0.9166666666666666, "length": 11}, "so_19728109_19728661_2": {"section_id": 223, "quality": 1.0, "length": 5}, "so_19728109_19728661_0": {"section_id": 8591, "quality": 1.0, "length": 14}}}});