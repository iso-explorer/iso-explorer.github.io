post_cb({"bq_ids": {"n4140": {"so_12131012_12131067_0": {"length": 33, "quality": 1.0, "section_id": 514}}, "n3337": {"so_12131012_12131067_0": {"length": 33, "quality": 1.0, "section_id": 505}}, "n4659": {"so_12131012_12131067_0": {"length": 33, "quality": 1.0, "section_id": 535}}}, "12131012": {"ViewCount": "173", "Body": "<p><a href=\"https://stackoverflow.com/questions/3046889/optional-parameters-with-c-macros\">Optional Parameters with C++ Macros</a></p>\n<p>Why is the author of one of the messages in this thread use additional comma in the macro here?</p>\n<pre><code>#define PRINT_STRING_MACRO_CHOOSER(...) \\\n    GET_4TH_ARG(__VA_ARGS__, PRINT_STRING_3_ARGS, \\\n                PRINT_STRING_2_ARGS, PRINT_STRING_1_ARGS, )\n</code></pre>\n", "AcceptedAnswerId": "12131067", "Title": "Additional comma in the macro", "CreationDate": "2012-08-26T14:40:25.613", "Id": "12131012", "CommentCount": "0", "LastEditDate": "2017-05-23T10:24:39.833", "PostTypeId": "1", "LastEditorUserId": "-1", "LastActivityDate": "2012-08-26T14:55:43.807", "Score": "4", "OwnerUserId": "1608835", "Tags": "<c++><c>", "AnswerCount": "1"}, "12131067": {"Id": "12131067", "PostTypeId": "2", "Body": "<p>This has been done so that <code>GET_4TH_ARG</code> will always be supplied with its vararg arguments (which is a requirement of the language).</p>\n<p>For example, without it,</p>\n<p><code>PRINT_STRING_MACRO_CHOOSER(\"Hello, World\")</code></p>\n<p>would expand to</p>\n<p><code>GET_4TH_ARG(\"Hello, World\", PRINT_STRING_3_ARGS, PRINT_STRING_2_ARGS, PRINT_STRING_1_ARGS)</code></p>\n<p>rather than</p>\n<p><code>GET_4TH_ARG(\"Hello, World\", PRINT_STRING_3_ARGS, PRINT_STRING_2_ARGS, PRINT_STRING_1_ARGS,)</code></p>\n<p>The first form does not provide any vararg arguments (and so would not be a valid call), where the second form does provide an empty vararg argument to <code>GET_4TH_ARG</code>.</p>\n<p>From the C++ standard: <code>[cpp.replace]/4</code>:</p>\n<blockquote>\n<p id=\"so_12131012_12131067_0\">If the identifier-list in the macro definition does not end with an ellipsis, the number of arguments (including those arguments consisting of no preprocessing tokens) in an invocation of a function-like macro shall equal the number of parameters in the macro definition. Otherwise, there shall be more arguments in the invocation than there are parameters in the macro definition (excluding the ...). ...</p>\n</blockquote>\n", "LastEditorUserId": "485561", "LastActivityDate": "2012-08-26T14:55:43.807", "Score": "5", "CreationDate": "2012-08-26T14:49:51.203", "ParentId": "12131012", "CommentCount": "0", "OwnerUserId": "485561", "LastEditDate": "2012-08-26T14:55:43.807"}});