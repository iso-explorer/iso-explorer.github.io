post_cb({"24716801": {"ViewCount": "596", "Body": "<p>I am verifying a statement on C++ Primer that:  </p>\n<blockquote>\n<p id=\"so_24716801_24716801_0\">Unlinke other functions, inline and constexpr functions may be defined multiple times in the program.  </p>\n</blockquote>\n<p>I used two definitions of a constexpr <code>cfunc()</code> below, expecting <code>foo_0()</code> will call the 1st def while <code>foo_1()</code> will call the 2nd def. However the attempt failed with compilation error (in the end). WHy?</p>\n<pre><code>constexpr int cfunc(){\n  return 42;\n}\n\nint foo_0(){\n  return cfunc();\n}\n\nconstexpr int cfunc(){\n  return 42;\n}\n\nint foo_1(){\n  return cfunc();\n}\n\n\nint main(int argc, char **argv) {\n\n  cout &lt;&lt; foo_0() &lt;&lt; endl;  \n  cout &lt;&lt; foo_1() &lt;&lt; endl;  \n\n  /* testconstexprfunc2.cpp:24:15: error: redefinition of \u2018constexpr int cfunc()\u2019 */\n  /* testconstexprfunc2.cpp:16:15: error: \u2018constexpr int cfunc()\u2019 previously defined here */\n\n  return 0;\n\n}\n</code></pre>\n", "AcceptedAnswerId": "24716833", "Title": "Can constexpr and inline functions be re-defined?", "CreationDate": "2014-07-12T19:57:50.167", "Id": "24716801", "CommentCount": "1", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2014-07-12T20:09:17.460", "LastEditorDisplayName": "user3792254", "OwnerDisplayName": "user3792254", "LastActivityDate": "2014-07-12T20:58:20.433", "Score": "9", "Tags": "<c++><function><inline><constexpr>", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_24716801_24716941_0": {"length": 22, "quality": 0.9565217391304348, "section_id": 7043}, "so_24716801_24716833_1": {"length": 19, "quality": 0.8636363636363636, "section_id": 7043}, "so_24716801_24716833_2": {"length": 11, "quality": 0.8461538461538461, "section_id": 5404}, "so_24716801_24716833_0": {"length": 6, "quality": 1.0, "section_id": 5418}}, "n3337": {"so_24716801_24716941_0": {"length": 22, "quality": 0.9565217391304348, "section_id": 6788}, "so_24716801_24716833_1": {"length": 19, "quality": 0.8636363636363636, "section_id": 6788}, "so_24716801_24716833_2": {"length": 11, "quality": 0.8461538461538461, "section_id": 5199}, "so_24716801_24716833_0": {"length": 6, "quality": 1.0, "section_id": 5213}}, "n4659": {"so_24716801_24716941_0": {"length": 22, "quality": 0.9565217391304348, "section_id": 8540}, "so_24716801_24716833_1": {"length": 19, "quality": 0.8636363636363636, "section_id": 8540}, "so_24716801_24716833_2": {"length": 11, "quality": 0.8461538461538461, "section_id": 6853}, "so_24716801_24716833_0": {"length": 4, "quality": 0.6666666666666666, "section_id": 6839}}}, "24716833": {"Id": "24716833", "PostTypeId": "2", "Body": "<p>Yes unlike other functions, inline and constexpr functions may be defined multiple times in the program. <strong>However, the definitions must match exactly.</strong></p>\n<h2><strong>Justification according to the standard:</strong></h2>\n<p>From <em>\u00a7 7.1.5/2 The constexpr speci\ufb01er [dcl.constexpr]:</em></p>\n<blockquote>\n<p id=\"so_24716801_24716833_0\"><em><code>constexpr</code> functions and <code>constexpr</code> constructors are implicitly <code>inline</code>.</em></p>\n</blockquote>\n<p>From <em>\u00a7 3.2/6  One de\ufb01nition rule [basic.def.odr]:</em></p>\n<blockquote>\n<p id=\"so_24716801_24716833_1\"><em>There can be more than one de\ufb01nition of a class type (Clause 9), enumeration type (7.2), <code>inline</code> function with external linkage ...  in a program provided that each de\ufb01nition\n  appears in a di\ufb00erent translation unit...</em></p>\n</blockquote>\n<p>From <em>\u00a7 7.1.2/4 Function speci\ufb01ers [dcl.fct.spec]:</em></p>\n<blockquote>\n<p id=\"so_24716801_24716833_2\"><em>An <code>inline</code> function shall be de\ufb01ned in every translation unit in which it is odr-used and shall have exactly the same de\ufb01nition in every case.</em></p>\n</blockquote>\n<p>Thus, since a <code>constexpr</code> function is implicitly <code>inline</code> it has all the attributes of an <code>inline</code> function. Therefore, <strong><code>constexpr</code> functions can have more than one definition provided that each definition appears in a different translation unit</strong>.</p>\n<h2>Why your program fails:</h2>\n<p>In your case the program fails because you are violating this rule. That is, you redefine the same <code>constexpr</code> function in the same translation unit (i.e., main.cpp).</p>\n", "LastEditorUserId": "2352671", "LastActivityDate": "2014-07-12T20:50:22.833", "Score": "9", "CreationDate": "2014-07-12T20:01:22.580", "ParentId": "24716801", "CommentCount": "5", "OwnerUserId": "2352671", "LastEditDate": "2014-07-12T20:50:22.833"}, "24717204": {"Id": "24717204", "PostTypeId": "2", "Body": "<p>An inline function can be defined multiple times in a program but only once in a translation unit. That means it can be defined only once in a header file. You can't have more than one definition in a translation unit even if they are identical. </p>\n", "LastActivityDate": "2014-07-12T20:51:02.257", "CommentCount": "0", "CreationDate": "2014-07-12T20:51:02.257", "ParentId": "24716801", "Score": "5", "OwnerUserId": "434551"}, "24716941": {"Id": "24716941", "PostTypeId": "2", "Body": "<p>It is true - regarding inline functions. This is the case to allow inline functions in a header, in order to make inlining possible at compile-time (instead at link time).</p>\n<p>The following citation does not mention <code>constexpr</code> at all, but as noted they are implicitly inlined.</p>\n<p>The key, as explained by @R Sahu, is <code>provided that each definition appears in a different translation unit</code>, which is not the case here.</p>\n<p>Citing the standard, \u00a73.2.6:</p>\n<blockquote>\n<p id=\"so_24716801_24716941_0\">There can be more than one definition of (...) inline function with external linkage (7.1.2) (...) in a program <strong>provided that each definition appears in a different translation unit</strong>, and provided the definitions satisfy the following requirements. (...)</p>\n</blockquote>\n", "LastEditorUserId": "2289509", "LastActivityDate": "2014-07-12T20:58:20.433", "Score": "2", "CreationDate": "2014-07-12T20:16:08.543", "ParentId": "24716801", "CommentCount": "1", "OwnerUserId": "2289509", "LastEditDate": "2014-07-12T20:58:20.433"}});