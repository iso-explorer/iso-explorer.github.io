post_cb({"bq_ids": {"n4140": {"so_43085359_43085658_0": {"length": 46, "quality": 0.8679245283018868, "section_id": 5923}}, "n3337": {"so_43085359_43085658_0": {"length": 46, "quality": 0.8679245283018868, "section_id": 5695}}, "n4659": {"so_43085359_43085658_0": {"length": 46, "quality": 0.8679245283018868, "section_id": 7397}}}, "43085658": {"Id": "43085658", "PostTypeId": "2", "Body": "<p>The main reason is because that's what the C++ standard says explicitly:</p>\n<p><a href=\"http://eel.is/c++draft/class.bit#3\" rel=\"noreferrer\">[class.bit] 12.2.4/3</a></p>\n<blockquote>\n<p id=\"so_43085359_43085658_0\"><strong>A bit-field shall not be a static member</strong>. A bit-field shall have integral or enumeration type ([basic.fundamental]). A bool value can successfully be stored in a bit-field of any nonzero size. The address-of operator &amp; shall not be applied to a bit-field, so there are no pointers to bit-fields. A non-const reference shall not be bound to a bit-field ([dcl.init.ref]). [\u2009Note: If the initializer for a reference of type const T&amp; is an lvalue that refers to a bit-field, the reference is bound to a temporary initialized to hold the value of the bit-field; the reference is not bound to the bit-field directly. See [dcl.init.ref]. \u2009\u2014\u2009end note\u2009]</p>\n</blockquote>\n<p>The reasoning for it? Well, bit-fields are a carry-over from C. They are allowed only as struct or union fields there to begin with. Personally, I can't think of a context where a static bit-field member can be useful.</p>\n<p>Furthermore, practically everything about bit-fields is implementation defined already, and letting static data behave in a completely implementation defined manner, is IMHO a very bad idea.</p>\n", "LastActivityDate": "2017-03-29T06:11:45.250", "CommentCount": "2", "CreationDate": "2017-03-29T06:11:45.250", "ParentId": "43085359", "Score": "6", "OwnerUserId": "817643"}, "43085359": {"ViewCount": "219", "Body": "<p>Can anyone explain the reason behind not allowing bit fields as static member of a class? For example, a class defined like:</p>\n<pre><code>class A{\npublic:\n    A() {}\n    ~A(){}\nprivate:\n    static int mem :10;\n};\nint A::mem;\n</code></pre>\n<p>doesn't compile.</p>\n<p>Compiling this class with different compilers:-</p>\n<p>1- g++ throws error:-</p>\n<p>error: static member 'mem' cannot be a bit-field</p>\n<pre><code>static int mem :10;\n</code></pre>\n<p>error: \u2018int A::mem\u2019 is not a static data member of \u2018class A\u2019</p>\n<p>int A::mem;</p>\n<p>2- clang throws error:-</p>\n<p>error: static member 'mem' cannot be a bit-field</p>\n<pre><code>static int mem :10;\n</code></pre>\n<p>3-Visual Studio 15 throws error:-</p>\n<p>'A::mem'::illegal storage class</p>\n<p>'int A::mem':member function redeclaration not allowed</p>\n", "AcceptedAnswerId": "43085658", "Title": "Why are bit fields not allowed as static data members of a class", "CreationDate": "2017-03-29T05:52:21.623", "Id": "43085359", "CommentCount": "2", "LastEditDate": "2017-03-29T06:52:25.073", "PostTypeId": "1", "LastEditorUserId": "5910058", "LastActivityDate": "2017-03-29T08:11:58.763", "Score": "4", "OwnerUserId": "4699294", "Tags": "<c++><bit-fields>", "AnswerCount": "2"}, "43087676": {"Id": "43087676", "PostTypeId": "2", "Body": "<p>The reason the standard prohibits it is because static data members need to be instantiated somewhere - in your example, a compilation unit somewhere would need to contain:</p>\n<pre><code>int A::mem :10;\n</code></pre>\n<p>which is invalid, in the same way that a standalone non-member bitfield variable such as:</p>\n<pre><code>int foo :10;\n</code></pre>\n<p>is invalid.</p>\n<p>Of course one can ask why this is prohibited, but that's a wider question not related to it being a class member.</p>\n", "LastEditorUserId": "193887", "LastActivityDate": "2017-03-29T08:11:58.763", "Score": "1", "CreationDate": "2017-03-29T07:59:32.793", "ParentId": "43085359", "CommentCount": "0", "OwnerUserId": "193887", "LastEditDate": "2017-03-29T08:11:58.763"}});