post_cb({"21365323": {"Id": "21365323", "PostTypeId": "2", "Body": "<p>It used to be the case that some national variants of ASCII, such as the Scandinavian languages, used accented alphabetic characters for the code points where US ASCII has punctuation such as <code>[</code>, <code>]</code>, <code>{</code>, <code>}</code>.  These are the reason that C89 included trigraphs \u2014 they allow code to be written in the 'invariant subset' of <a href=\"https://en.wikipedia.org/wiki/ISO/IEC_646\" rel=\"nofollow\">ISO 646</a>.  See the chart of the characters used in the national variants on the Wikipedia page.</p>\n<p>For example, someone in Scandinavia might have to read:</p>\n<pre><code>#include &lt;stdio.h&gt;\n\nint main(int argc, char **argv)\n\u00c5\n    for (int i = 1; i &lt; argc; i++)\n        printf(\"%s\\n\", argv\u00c6i\u00d8);\n    return 0;\n\u00f8\n</code></pre>\n<p>instead of:</p>\n<pre><code>#include &lt;stdio.h&gt;\n\nint main(int argc, char **argv)\n{\n    for (int i = 1; i &lt; argc; i++)\n        printf(\"%s\\n\", argv[i]);\n    return 0;\n}\n</code></pre>\n<p>Using trigraphs, you might write:</p>\n<pre><code>??=include &lt;stdio.h&gt;\n\nint main(int argc, char **argv)\n??&lt;\n    for (int i = 1; i &lt; argc; i++)\n        printf(\"%s??/n\", argv??(i??));\n    return 0;\n??&gt;\n</code></pre>\n<p>which is equally ghastly in any language.</p>\n<p>I'm not sure how much of an issue this still is, but that's why the comments are there.</p>\n", "LastActivityDate": "2014-01-26T15:32:01.323", "CommentCount": "6", "CreationDate": "2014-01-26T15:32:01.323", "ParentId": "21364673", "Score": "1", "OwnerUserId": "15168"}, "21364848": {"Id": "21364848", "PostTypeId": "2", "Body": "<ul>\n<li><p>The word \"byte\" seems to be used sloppily in the first quote. As far as C++ is concerned, a byte is always a char, but the number of bits it holds is platform-dependent (and available in <code>CHAR_BITS</code>). Sometimes you want to say \"a byte is eight bits\", in which case you get a different meaning, and that may have been the intended meaning in the phrase \"a char has four bytes\".</p></li>\n<li><p>The execution character set may very well be larger than or incompatible with the input character set provided by the environment. Trigraphs and alternate tokens exist to allow the representation of execution-set characters with fewer input characters on such restricted platforms (e.g. <code>not</code> is identical for all purposes to <code>!</code>, and the latter is not available in all character sets or keyboard layouts).</p></li>\n</ul>\n", "LastActivityDate": "2014-01-26T14:51:40.577", "CommentCount": "0", "CreationDate": "2014-01-26T14:51:40.577", "ParentId": "21364673", "Score": "1", "OwnerUserId": "596781"}, "21364673": {"ViewCount": "155", "Body": "<p>In The C++ Programming Language 6.2.3, it says:</p>\n<blockquote>\n<p id=\"so_21364673_21364673_0\">It is safe to assume that the implementation character set includes\n  the decimal digits, the 26 alphabetic characters of English, and some\n  of the basic punctuation characters. It is not safe to assume\n  that:</p>\n<ul>\n<li><p id=\"so_21364673_21364673_1\">There are no more than 127 characters in an 8-bit character set (e.g., some sets provide 255 characters).</p></li>\n<li><p id=\"so_21364673_21364673_2\">There are no more alphabetic characters than English provides (most European\n  languages provide more, e.g., \u00e6, \u00fe, and \u00df).</p></li>\n<li><p id=\"so_21364673_21364673_3\">The alphabetic characters are contiguous (EBCDIC leaves a gap between 'i' and 'j').</p></li>\n<li><p id=\"so_21364673_21364673_4\">Every character used to write C++ is available (e.g.,\n  some national character sets do not provide {, }, [, ], |, and\n  \\).</p></li>\n<li><p id=\"so_21364673_21364673_5\">A char fits in 1 byte. There are embedded processors\n  without byte accessing hardware for which a char is 4 bytes. Also, one\n  could reasonably use a 16-bit Unicode encoding for the basic chars.</p></li>\n</ul>\n</blockquote>\n<p>I'm not sure I understand the last two statements.</p>\n<p>In section 2.3 of the standard, it says:</p>\n<blockquote>\n<p id=\"so_21364673_21364673_6\">The basic source character set consists of 96 characters: the space\n  character, the control characters representing horizontal tab,\n  vertical tab, form feed, and new-line, plus the following 91 graphical\n  characters:</p>\n<p id=\"so_21364673_21364673_7\">a b c d e f g h i j k l m n o p q r s t u v w x y\n  z<br/> A B C D E F G H I J K L M N O P Q R S T U V W X Y Z<br/> 0 1 2\n  3 4 5 6 7 8 9<br/>\n  _ { } [ ] # ( ) &lt; &gt; % : ; . ? * + - / ^ &amp; |  ! = , \\ \" '<br/> ...<br/></p>\n<p id=\"so_21364673_21364673_8\">The basic execution character set and the basic execution wide-character set shall each contain all the members of the basic\n  source character set, plus control characters representing alert,\n  backspace, and carriage return, plus a null character (respectively,\n  null wide character), whose representation has all zero bits.</p>\n</blockquote>\n<p>We can see that it is stated by the standard that characters like { } [ ] | \\ are part of the basic execution character set.  Then why TC++PL says it's not safe to assume that those characters are available in the implementation's character set?</p>\n<p>And for the size of a char, in section 5.3.3 of the standard:</p>\n<blockquote>\n<p id=\"so_21364673_21364673_9\">The sizeof operator yields the number of bytes in the object\n  representation of its operand. ... ...  <code>sizeof(char)</code>, <code>sizeof(signed\n  char)</code> and <code>sizeof(unsigned char)</code> are 1.</p>\n</blockquote>\n<p>We can see that the standard states that a char is of 1 byte.  What is the point TC++PL trying to make here?</p>\n", "AcceptedAnswerId": "21364848", "Title": "What assumption is safe for a C++ implementation's character set?", "CreationDate": "2014-01-26T14:35:11.193", "Id": "21364673", "CommentCount": "9", "LastEditDate": "2014-01-26T14:42:56.240", "PostTypeId": "1", "LastEditorUserId": "3237645", "LastActivityDate": "2014-01-26T15:32:01.323", "Score": "2", "OwnerUserId": "3237645", "Tags": "<c++><character>", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_21364673_21364673_9": {"length": 14, "quality": 0.9333333333333333, "section_id": 6076}, "so_21364673_21364673_6": {"length": 22, "quality": 0.9565217391304348, "section_id": 5314}, "so_21364673_21364673_8": {"length": 36, "quality": 0.972972972972973, "section_id": 5316}}, "n3337": {"so_21364673_21364673_9": {"length": 14, "quality": 0.9333333333333333, "section_id": 5844}, "so_21364673_21364673_6": {"length": 22, "quality": 0.9565217391304348, "section_id": 5111}, "so_21364673_21364673_8": {"length": 36, "quality": 0.972972972972973, "section_id": 5113}}, "n4659": {"so_21364673_21364673_9": {"length": 14, "quality": 0.9333333333333333, "section_id": 7572}, "so_21364673_21364673_6": {"length": 20, "quality": 0.8695652173913043, "section_id": 6738}, "so_21364673_21364673_8": {"length": 24, "quality": 0.6486486486486487, "section_id": 6740}}}});