post_cb({"13567029": {"ViewCount": "161", "Body": "<blockquote>\n<p id=\"so_13567029_13567029_0\"><strong>Possible Duplicate:</strong><br>\n<a href=\"https://stackoverflow.com/questions/1758142/why-copy-constructor-is-not-called-in-this-case\">Why copy constructor is not called in this case?</a><br>\n<a href=\"https://stackoverflow.com/questions/12953127/what-are-copy-elision-and-return-value-optimization\">What are copy elision and return value optimization?</a> </br></br></p>\n</blockquote>\n<p>Can anybody explain to me why the following program yields output \"cpy: 0\" (at least when compiled with g++ 4.5.2):</p>\n<pre><code>#include&lt;iostream&gt;\n\nstruct A {\n\n    bool cpy;\n\n    A() : cpy (false) {\n    }\n\n    A (const A &amp; a) : cpy (true) {\n    }\n\n    A (A &amp;&amp; a) : cpy (true) {\n    };\n\n};\n\nA returnA () { return A (); }\n\nint main() {\n\n    A a ( returnA () );\n    std::cerr &lt;&lt; \"cpy: \" &lt;&lt; a.cpy &lt;&lt; \"\\n\";\n}\n</code></pre>\n<p>The question arised when I tried to figure out seemingly strange outcome of this example: <a href=\"https://stackoverflow.com/questions/13565594/move-ctor-of-class-with-constant-data-member-of-reference-member/13565811#comment18587907_13565811\">move ctor of class with a constant data member or a reference member</a></p>\n", "AcceptedAnswerId": "13567107", "Title": "Neither copy nor move constructor called", "CreationDate": "2012-11-26T14:36:57.753", "LastActivityDate": "2012-11-26T14:41:42.373", "CommentCount": "3", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2017-05-23T11:48:56.697", "ClosedDate": "2012-11-26T18:17:17.867", "Id": "13567029", "AnswerCount": "1", "Score": "0", "OwnerUserId": "1419315", "Tags": "<c++><copy-constructor><move-constructor>", "LastEditorUserId": "-1"}, "bq_ids": {"n4140": {"so_13567029_13567029_0": {"length": 7, "quality": 0.5384615384615384, "section_id": 480}}, "n3337": {"so_13567029_13567029_0": {"length": 7, "quality": 0.5384615384615384, "section_id": 471}}}, "13567107": {"PostTypeId": "2", "Body": "<p>The compiler is free to elide copy and move construction, even if these have side effects, for objects it creates on it own behalf. Temporary objects and return values are often directly constructed on the correct location, eliding copying or moving them. For return values you need to be a bit careful to have the elision kick in, though.</p>\n<p>If you want to prevent copy elision, you basically need to have two candidate objects conditionally be returned:</p>\n<pre><code>bool flag(false);\nA f() {\n    A a;\n    return flag? A(): a;\n}\n</code></pre>\n<p>Assuming you don't change <code>flag</code> this will always create a copy of <code>a</code> (unless compilers got smarter since I last tried).</p>\n", "LastActivityDate": "2012-11-26T14:41:42.373", "Id": "13567107", "CommentCount": "3", "CreationDate": "2012-11-26T14:41:42.373", "ParentId": "13567029", "Score": "6", "OwnerUserId": "1120273"}});