post_cb({"bq_ids": {"n4140": {"so_48713700_48713700_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 7189}, "so_48713700_48713700_1": {"length": 7, "quality": 0.875, "section_id": 7189}}, "n3337": {"so_48713700_48713700_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 6933}, "so_48713700_48713700_1": {"length": 7, "quality": 0.875, "section_id": 6933}}, "n4659": {"so_48713700_48713700_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 8697}, "so_48713700_48713700_1": {"length": 7, "quality": 0.875, "section_id": 8697}, "so_48713700_48713700_2": {"length": 8, "quality": 0.8888888888888888, "section_id": 8697}}}, "48713774": {"Id": "48713774", "PostTypeId": "2", "Body": "<p>I believe, by \"nested objects here\" the standard is simply referring to member subobjects here. Since formally, member subobjects occupy the storage of their container object, without this exception something like this code </p>\n<pre><code>struct X {\n    Y y;\n};\n\nvoid foo(X&amp; x) {\n    new (x.y) Y;\n}\n</code></pre>\n<p>Would end the storage of <code>x</code>.</p>\n<p>Another example of nested objects per Standard (<a href=\"http://eel.is/c++draft/intro.object#4\" rel=\"nofollow noreferrer\">http://eel.is/c++draft/intro.object#4</a>) is a case when one object provides storage for another. An <code>unsigned char</code> (or <code>std::byte</code>) array can provide storage for another object, if it is created inside it with placement new. This is almost your second example, with the exception that in your case the char could be signed or unsigned.</p>\n<p>Your example of unions is correct example of a non-nested object occupying the same storage.</p>\n", "LastEditorUserId": "5245033", "LastActivityDate": "2018-02-09T21:00:32.273", "Score": "5", "CreationDate": "2018-02-09T20:41:19.347", "ParentId": "48713700", "CommentCount": "8", "OwnerUserId": "5245033", "LastEditDate": "2018-02-09T21:00:32.273"}, "48713700": {"ViewCount": "181", "Body": "<p>In the <a href=\"http://eel.is/c++draft/basic.life\" rel=\"nofollow noreferrer\">basic.life</a> section of the C++ standard, one can find the following (emphasis mine):</p>\n<blockquote>\n<p id=\"so_48713700_48713700_0\">The lifetime of an object o of type T ends when:</p>\n<ul>\n<li><p id=\"so_48713700_48713700_1\">if T is a class type with a non-trivial destructor ([class.dtor]), the destructor call starts, or</p></li>\n<li><p id=\"so_48713700_48713700_2\">the storage which the object occupies is released, or is reused by an <strong>object that is not nested within o</strong> ([intro.object]).</p></li>\n</ul>\n</blockquote>\n<p>I am trying to find examples of the storage of the object <em>o</em> being reused by an object that <strong>is nested within <em>o</em></strong> (the opposite of what the standard says).</p>\n<p>First I need to make sure I understand what the standard means by \"the storage which the object occupies [...] is reused by an object that is nested within o\". First, in order for storage to be reused, a new object has to be created. Second, for <em>o</em>'s storage to be reused, the new object has to be created in the memory location used by <em>o</em>. And finally, the new object has to be created in a memory location that would make the new object \"nested within o\", for example in the location of an already existing object that is \"nesten within o\". Is this correct?</p>\n<p>I thought of some examples, such as:</p>\n<ul>\n<li><p>union member:</p>\n<pre><code>union U { double d; int n; }; U u = {1.0}; new (&amp;u.n) int;\n</code></pre></li>\n<li><p>object created inside array of chars:</p>\n<pre><code>char mem[sizeof(int)];\nnew (mem) int;\n</code></pre></li>\n</ul>\n<p>Are these correct? Are there other examples?</p>\n<p>Thank you.</p>\n", "Title": "C++ Standard: end of lifetime", "CreationDate": "2018-02-09T20:34:33.333", "LastActivityDate": "2018-02-09T21:00:32.273", "CommentCount": "0", "LastEditDate": "2018-02-09T20:39:03.263", "PostTypeId": "1", "LastEditorUserId": "4342498", "Id": "48713700", "Score": "4", "OwnerUserId": "3766405", "Tags": "<c++><language-lawyer><lifetime>", "AnswerCount": "1"}});