post_cb({"45461097": {"ParentId": "45460916", "CommentCount": "0", "CreationDate": "2017-08-02T12:36:19.423", "OwnerUserId": "982161", "PostTypeId": "2", "Id": "45461097", "Score": "2", "Body": "<p>This here</p>\n<pre><code>int fun(const T&amp;&amp;)\n</code></pre>\n<p>means you need to give as parameter a <code>rVal</code></p>\n<p>so </p>\n<pre><code>const int i = 10;\n</code></pre>\n<p>is not making <code>i</code> a candidate to be a <code>rVal</code> (because you can get the address of i)</p>\n", "LastActivityDate": "2017-08-02T12:36:19.423"}, "45461013": {"ParentId": "45460916", "CommentCount": "0", "CreationDate": "2017-08-02T12:32:59.407", "OwnerUserId": "817643", "PostTypeId": "2", "Id": "45461013", "Score": "16", "Body": "<p>It fails because adding the const prevents it from being a forwarding reference. It becomes a regular reference to a const rvalue:</p>\n<p><a href=\"https://timsong-cpp.github.io/cppwp/n4659/temp.deduct#call-3\" rel=\"noreferrer\">[temp.deduct.call/3]</a></p>\n<blockquote>\n<p id=\"so_45460916_45461013_0\">... A forwarding reference is an rvalue reference to a <strong>cv-unqualified</strong>\n  template parameter that does not represent a template parameter of a\n  class template (during class template argument deduction\n  ([over.match.class.deduct])). ...</p>\n</blockquote>\n<p>And you pass it an lvalue. It fails the match.</p>\n", "LastActivityDate": "2017-08-02T12:32:59.407"}, "45460916": {"CommentCount": "6", "AcceptedAnswerId": "45461013", "PostTypeId": "1", "LastEditorUserId": "6935629", "CreationDate": "2017-08-02T12:28:33.390", "LastActivityDate": "2017-08-09T11:02:10.927", "LastEditDate": "2017-08-09T11:02:10.927", "ViewCount": "441", "FavoriteCount": "2", "Title": "Template reference argument deduction failure in C++", "Id": "45460916", "Score": "10", "Body": "<p>Why following code doesn't compile in C++14 compiler? If I use</p>\n<pre><code>const int i = 10;\nint n = fun(i);\n</code></pre>\n<p>The compiler gives an error.</p>\n<p>But, If I use </p>\n<pre><code>int n = fun(10);\n</code></pre>\n<p>instead of above statements, it's working fine.</p>\n<p><strong>Example:</strong></p>\n<pre><code>template&lt;typename T&gt;\nint fun(const T&amp;&amp;)\n{\n    cout&lt;&lt;\"fun\"&lt;&lt;endl;\n}\n\nint main()\n{\n // int i = 10;         // Not work\n    const int i = 10;   // Not work\n    int n = fun(i);  \n // int n = fun(10);    // Working fine\n}\n</code></pre>\n", "Tags": "<c++><templates><const><c++14>", "OwnerUserId": "6935629", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_45460916_45461013_0": {"section_id": 341, "quality": 0.5263157894736842, "length": 10}}, "n3337": {"so_45460916_45461013_0": {"section_id": 331, "quality": 0.5263157894736842, "length": 10}}, "n4659": {"so_45460916_45461013_0": {"section_id": 311, "quality": 0.8947368421052632, "length": 17}}}});