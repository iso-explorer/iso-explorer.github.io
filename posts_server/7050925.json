post_cb({"7051154": {"ParentId": "7050925", "CommentCount": "0", "Body": "<p>They may refer to a program written for a freestanding implementation. The C++ Standard defines two sorts of implementations. One is a <em>hosted</em> implementation. Programs written for those implementations are required to have a <code>main</code> function. But otherwise, no <code>main</code> function is required if the freestanding implementation doesn't require one. This is useful for operation system kernels or embedded system programs that don't run under an operation system. </p>\n", "OwnerUserId": "34509", "PostTypeId": "2", "Id": "7051154", "Score": "8", "CreationDate": "2011-08-13T14:50:01.837", "LastActivityDate": "2011-08-13T14:50:01.837"}, "38597588": {"ParentId": "7050925", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>As long as you are using g++ you could change your entry point with linker option <code>-e</code>, so the following code and compile command may let you create a program without a <code>main()</code> function:</p>\n<pre><code>#import &lt;iostream&gt;\n\nclass NoMain\n{\npublic:\n    NoMain()\n    {\n        std::cout &lt;&lt; \"Hello World!\" &lt;&lt; std::endl;\n        exit(0);\n    }\n} mainClass;\n</code></pre>\n<p>I gave file name as <code>noname.cpp</code>, and the compile option is:</p>\n<pre><code>g++ nomain.cpp -Wl,-e,_mainClass -v\n</code></pre>\n<p>To tell the truth, I didn't fully understand why the code can works fine. I suspect that the address of global variable <code>mainClass</code> is the same to constructor of <code>NoMain</code> class. However, I also have several reasons that I could tell my guess may not correct.</p>\n", "OwnerUserId": "3971250", "LastEditorUserId": "3971250", "LastEditDate": "2016-07-26T19:09:26.847", "Id": "38597588", "Score": "2", "CreationDate": "2016-07-26T18:41:55.293", "LastActivityDate": "2016-07-26T19:09:26.847"}, "7055038": {"ParentId": "7050925", "PostTypeId": "2", "CommentCount": "0", "Body": "<p><code>main</code> means an entry point, a point from which your code will start executing. although <code>main</code> is not the first function to run. There are some more code which runs before <code>main</code> and prepares the environment to make your code run. This code then calls <code>main</code> . You can change the name of the <code>main</code> function by recompiling the code of the startup file <code>crt0.c</code> and changing the name of the <code>main</code> function. Or you can do the following:</p>\n<pre><code>#include &lt;stdio.h&gt;\n\nextern void _exit (register int code);\n\n_start()\n{\n  int retval;\n  retval = my_main ();\n  _exit(retval);\n}\n\nint my_main(void)\n{\n  printf(\"Hello\\n\");\n  return 0;\n}\n</code></pre>\n<p>Compile the code with:</p>\n<pre><code>gcc -o no_main no_main.c -nostartfiles\n</code></pre>\n<p>The <code>-nostartfiles</code> will not include the default startup file. You point to the main entry file with the <code>_start</code> .</p>\n<p><code>main</code> is nothing but a predefined entrypoint for the user code. Therefore you can name it whatever, but at the end of the day you do need an entry point. In C/C++ and other languages the name is selected as <code>main</code> if you make another language or hack the sources of these language compilers then you can change the name of <code>main</code> to <code>pain</code> but it will bring pain, as it will violate the standards.</p>\n<p>But manipulating the entry function name is useful for kernel code, the first function to run in the kernel, or code written for embedded systems.</p>\n", "OwnerUserId": "702361", "LastEditorUserId": "702361", "LastEditDate": "2011-08-14T04:47:35.797", "Id": "7055038", "Score": "10", "CreationDate": "2011-08-14T04:39:19.187", "LastActivityDate": "2011-08-14T04:47:35.797"}, "7051329": {"ParentId": "7050925", "CommentCount": "5", "Body": "<p>\"Without using <code>main</code>\" might also mean that no logic is allowed within <code>main</code>, but the <code>main</code> itself exists. I can imagine the question had this cleared out, but since it's not cleared here, this is another possible answer:</p>\n<pre><code>struct MainSub\n{\n   MainSub()\n   {\n      // do some stuff\n   }\n};\n\nMainSub mainSub;\n\nint main(int argc, char *argv[]) { return 0; }\n</code></pre>\n<p>What will happen here is that the stuff in <code>MainSub</code>'s constructor will execute before the unusable <code>main</code> is executed, and you can place the program's logic there. This of course requires C++, and not C (also not clear from the question).</p>\n", "OwnerUserId": "26039", "PostTypeId": "2", "Id": "7051329", "Score": "3", "CreationDate": "2011-08-13T15:20:34.553", "LastActivityDate": "2011-08-13T15:20:34.553"}, "7060757": {"ParentId": "7050925", "PostTypeId": "2", "CommentCount": "0", "Body": "<h3>Yes</h3>\n<pre><code>$ cat &gt; hwa.S\nwrite = 0x04\nexit  = 0xfc\n.text\n_start:\n        movl    $1, %ebx\n        lea     str, %ecx\n        movl    $len, %edx\n        movl    $write, %eax\n        int     $0x80\n        xorl    %ebx, %ebx\n        movl    $exit, %eax\n        int     $0x80\n.data\nstr:    .ascii \"Hello, world!\\n\"\nlen = . -str\n.globl  _start\n$ as -o hwa.o hwa.S\n$ ld hwa.o\n$ ./a.out\nHello, world!\n</code></pre>\n<p>The kernel that really runs an executable knows nothing about internal symbols, it just transfers to an entry point specified in binary in the executable image header.</p>\n<p>The reason you need a main is because normally your \"main program\" is really just another module. The entry point is in library-provided startup code written in some combination of C and assembly and that library code just happens to call <code>main</code> so you normally need to provide one. But run the linker directly and you don't.</p>\n<p>To include a C module<sup>1</sup>...</p>\n<pre><code>Mac:~/so$ cat &gt; nomain.S\n.text\n.globl start\nstart:\n        call   _notmain\nMac:~/so$ as -o nomain.o nomain.S\nMac:~/so$ cat &gt; notmain.c\n#include &lt;unistd.h&gt;\n\nvoid notmain(void) {\n  write(1, \"hi\\n\", 3);\n  _exit(0);\n}\nMac:~/so$ cc -c notmain.c\nMac:~/so$ ld -w nomain.o notmain.o -lc\nMac:~/so$ ./a.out\nhi\n</code></pre>\n<p><hr>\n<sup>1. And I'm also switching to x86-64 here.</sup></hr></p>\n", "OwnerUserId": "140740", "LastEditorUserId": "140740", "LastEditDate": "2016-06-14T19:42:51.033", "Id": "7060757", "Score": "4", "CreationDate": "2011-08-15T00:41:06.373", "LastActivityDate": "2016-06-14T19:42:51.033"}, "25748469": {"ParentId": "7050925", "CommentCount": "0", "Body": "<p>1) Using a macro that defines main</p>\n<pre><code>#include&lt;stdio.h&gt;\n#define fun main\nint fun(void)\n{\nprintf(\"stackoverfow\");\nreturn 0;\n}\n</code></pre>\n<p>Output:</p>\n<p>stackoverflow</p>\n<p>2) Using Token-Pasting Operator\nThe above solution has word \u2018main\u2019 in it. If we are not allowed to even write main, we ca use token-pasting operator (see this for details)</p>\n<pre><code>#include&lt;stdio.h&gt;\n#define fun m##a##i##n\nint fun()\n{\nprintf(\"stackoverflow\");\nreturn 0;\n}\n</code></pre>\n", "OwnerUserId": "3411933", "PostTypeId": "2", "Id": "25748469", "Score": "0", "CreationDate": "2014-09-09T15:26:52.683", "LastActivityDate": "2014-09-09T15:26:52.683"}, "7053697": {"ParentId": "7050925", "CommentCount": "0", "Body": "<p>Function main is only default label for address where program will start execution. So technically yes it`s possible, but you have to set name of function that will start execution in your environment.</p>\n", "OwnerUserId": "893433", "PostTypeId": "2", "Id": "7053697", "Score": "0", "CreationDate": "2011-08-13T22:26:43.167", "LastActivityDate": "2011-08-13T22:26:43.167"}, "7051059": {"ParentId": "7050925", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>Within standard C++ a <code>main</code> function is required, so the question does not make sense for standard C++.</p>\n<p>Outside of standard C++ you can for example write a Windows specific program and use one of Microsoft's custom startup functions (wMain, winMain, wWinmain). In Windows you can also write the program as a DLL and use rundll32 to run it.</p>\n<p>Apart from that you can make your own little runtime library. At one time that was a common sport.</p>\n<p>Finally, you can get clever and retort that according to the standard's ODR rule <code>main</code> isn't \"used\", so any program qualifies. Bah! Although unless the interviewers have unusual good sense of humor (and they wouldn't have asked the question if they had) they'll not think that that's a good answer.</p>\n", "OwnerUserId": "464581", "LastEditorUserId": "560648", "LastEditDate": "2016-06-14T19:58:01.957", "Id": "7051059", "Score": "15", "CreationDate": "2011-08-13T14:34:35.950", "LastActivityDate": "2016-06-14T19:58:01.957"}, "7050944": {"ParentId": "7050925", "CommentCount": "0", "Body": "<p>Yes it possible to compile with out main but you cannot pass the linking phase though.</p>\n<pre><code> g++ -c noMain.cpp -o noMain.o\n</code></pre>\n", "OwnerUserId": "528724", "PostTypeId": "2", "Id": "7050944", "Score": "5", "CreationDate": "2011-08-13T14:14:37.530", "LastActivityDate": "2011-08-13T14:14:37.530"}, "26618348": {"ParentId": "7050925", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>I realize this is an old question, but I just found this out and had to share. It will probably not work with all linkers, but it's at least possible to trick <code>ld</code> (I'm running version 2.24.51.20140918) into thinking there is a main-<em>function</em> by doing this:</p>\n<pre><code>int main[] {};\n</code></pre>\n<p>or even just</p>\n<pre><code>int main;\n</code></pre>\n<p>You can then apply one of the aforementioned tricks to let the program execute some code, e.g. through the use of a constructor:</p>\n<pre><code>struct Main\n{\n    Main()\n    {\n        cout &lt;&lt; \"Hello World!\\n\";\n        exit(0);\n    }\n} main_;\n</code></pre>\n<p>The <code>exit(0)</code> is to prevent the array from being \"called\". Good fun :-)</p>\n", "OwnerUserId": "1428839", "LastEditorUserId": "1428839", "LastEditDate": "2014-10-29T12:49:18.713", "Id": "26618348", "Score": "1", "CreationDate": "2014-10-28T20:58:12.033", "LastActivityDate": "2014-10-29T12:49:18.713"}, "7050925": {"CommentCount": "5", "AcceptedAnswerId": "7051059", "PostTypeId": "1", "LastEditorUserId": "452307", "CreationDate": "2011-08-13T14:11:47.833", "LastActivityDate": "2016-07-26T19:09:26.847", "LastEditDate": "2011-08-13T14:28:20.240", "ViewCount": "24828", "FavoriteCount": "10", "Title": "Is it possible to write a program without using main() function?", "Id": "7050925", "Score": "27", "Body": "<p>I keep getting this question asked in interviews:</p>\n<p><strong>Write a program without using <code>main()</code> function?</strong></p>\n<p>One of my friends showed me some code using Macros, but i could not understand it.</p>\n<p>So the question is:</p>\n<p><strong>Is it really possible to write and compile a program without <code>main()</code>?</strong></p>\n", "Tags": "<c++><c><compilation><main>", "OwnerUserId": "683104", "AnswerCount": "19"}, "7051708": {"ParentId": "7050925", "CommentCount": "0", "Body": "<p>It depends what they mean.</p>\n<p>Did they mean:</p>\n<blockquote>\n<p id=\"so_7050925_7051708_0\">Write a program with no main() function.</p>\n</blockquote>\n<p>Then generally speaking no.<br>\nBut there are ways to cheat.</br></p>\n<ul>\n<li>You can use the pre-processor to hide main() in plain sight.</li>\n<li>Most compiler allow you to specify the entry point into your code.<br>\nBy default it is main(int,char*[])</br></li>\n</ul>\n<p>Or did they mean:</p>\n<blockquote>\n<p id=\"so_7050925_7051708_1\">Write a program that runs code without using main (to run your code).</p>\n</blockquote>\n<p>This is a relatively simple trick. All objects in the global namespace run their constructors before main() is entered and destruction after main() exits. Thus all you need to do is define a class with a constructor that runs the code you want, then create an object in the global namespace.</p>\n<p>Note: The compiler is allowed to optimize these objects for delayed load (but usually does not) but to be safe just put the global in the same file as the main function (that can be empty).</p>\n", "OwnerUserId": "14065", "PostTypeId": "2", "Id": "7051708", "Score": "0", "CreationDate": "2011-08-13T16:19:33.073", "LastActivityDate": "2011-08-13T16:19:33.073"}, "7053547": {"ParentId": "7050925", "CommentCount": "5", "Body": "<p>According to standards, main() is required and the starting point of hosted environments. That's why you've to use tricks to hide the obvious looking main, like the trick posted above.</p>\n<pre><code>#include &lt;stdio.h&gt;\n#define decode(s,t,u,m,p,e,d) m##s##u##t\n#define begin decode(a,n,i,m,a,t,e)\n\nint begin()\n{\n    printf(\" hello \");\n}\n</code></pre>\n<p>Here, main is written by the macro tricks. It might not be clear at once, but it eventually leads to main. If this is the valid answer for your question, this could be done much easily, like this.</p>\n<pre><code># include &lt;stdio.h&gt;\n# define m main\n\nint m()\n{\n    printf(\"Hell0\");\n}\n</code></pre>\n", "OwnerUserId": "884819", "PostTypeId": "2", "Id": "7053547", "Score": "-4", "CreationDate": "2011-08-13T21:59:07.327", "LastActivityDate": "2011-08-13T21:59:07.327"}, "7050940": {"ParentId": "7050925", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>No you cannot unless you are writing a program in a <code>freestanding environment</code> (embedded environment OS kernel etc.) where the starting point need not be <code>main()</code>. As per the C++ standard <code>main()</code> is the starting point of any program in a <code>hosted environment</code>.    </p>\n<p>As per the:</p>\n<p>C++03 standard <strong>3.6.1 Main function</strong></p>\n<blockquote>\n<p id=\"so_7050925_7050940_0\">1 A program shall contain a global function called main, which is the designated start of the program. It is implementation-defined whether a program in a freestanding environment is required to define a main function. [ Note: In a freestanding environment, start-up and\n  termination is implementation-defined; startup contains the execution of constructors for objects of namespace scope with static storage duration; termination contains the execution of destructors for objects with static storage duration.</p>\n</blockquote>\n<hr>\n<p><strong>What is <code>freestanding Environment</code> &amp; What is <code>Hosted Environment</code>?</strong><br>\nThere are two kinds of conforming implementations defined in the C++ standard; <code>hosted</code> and <code>freestanding</code>. </br></p>\n<p>A <code>freestanding</code> implementation is one that is designed for programs that are executed without the benefit of an operating system.<br>\nFor Ex: An OS kernel or Embedded environment would be a freestanding environment.</br></p>\n<p>A program using the facilities of an operating system would normally be in a <code>hosted implementation</code>.</p>\n<p>From the C++03 Standard <strong>Section 1.4/7:</strong></p>\n<blockquote>\n<p id=\"so_7050925_7050940_1\">A freestanding implementation is one in which execution may take place without the benefit of an operating system, and has an implementation-defined set of libraries that includes certain language-support libraries.  </p>\n</blockquote>\n<p>Further,<br>\n<strong>Section: 17.4.1.3.2 Freestanding implementations</strong> quotes:  </br></p>\n<blockquote>\n<p id=\"so_7050925_7050940_2\">A freestanding implementation has an implementation-defined set of headers.  This set shall include at least the following headers, as shown in Table: </p>\n</blockquote>\n<pre><code>18.1 Types &lt;cstddef&gt;   \n18.2 Implementation properties &lt;limits&gt;   \n18.3 Start and termination &lt;cstdlib&gt; \n18.4 Dynamic memory management &lt;new&gt; \n18.5 Type identification &lt;typeinfo&gt; \n18.6 Exception handling &lt;exception&gt; \n18.7 Other runtime support &lt;cstdarg&gt;\n</code></pre>\n</hr>", "OwnerUserId": "452307", "LastEditorUserId": "327038", "LastEditDate": "2016-05-05T14:31:53.270", "Id": "7050940", "Score": "25", "CreationDate": "2011-08-13T14:14:17.970", "LastActivityDate": "2016-05-05T14:31:53.270"}, "7050982": {"ParentId": "7050925", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>Sample program without a <em>visible</em> main function.</p>\n<pre><code>/* \n    7050925.c \n    $ gcc -o 7050925 7050925.c\n*/\n\n#include &lt;stdio.h&gt;\n#define decode(s,t,u,m,p,e,d) m##s##u##t\n#define begin decode(a,n,i,m,a,t,e)\n\nint begin()\n{\n        printf(\"How mainless!\\n\");\n}\n</code></pre>\n<p>From: <a href=\"http://learnhacking.in/c-program-without-main-function/\">http://learnhacking.in/c-program-without-main-function/</a></p>\n", "OwnerUserId": "89391", "LastEditorUserId": "89391", "LastEditDate": "2011-08-13T14:29:01.070", "Id": "7050982", "Score": "14", "CreationDate": "2011-08-13T14:20:38.220", "LastActivityDate": "2011-08-13T14:29:01.070"}, "bq_ids": {"n4140": {"so_7050925_7050940_0": {"section_id": 7145, "quality": 0.9230769230769231, "length": 36}, "so_7050925_7050940_1": {"section_id": 5775, "quality": 0.9411764705882353, "length": 16}, "so_7050925_7050940_2": {"section_id": 6265, "quality": 0.6923076923076923, "length": 9}}, "n3337": {"so_7050925_7050940_0": {"section_id": 6889, "quality": 0.9230769230769231, "length": 36}, "so_7050925_7050940_1": {"section_id": 5548, "quality": 0.9411764705882353, "length": 16}, "so_7050925_7050940_2": {"section_id": 6025, "quality": 0.6923076923076923, "length": 9}}, "n4659": {"so_7050925_7050940_0": {"section_id": 8646, "quality": 0.8717948717948718, "length": 34}, "so_7050925_7050940_1": {"section_id": 7232, "quality": 0.9411764705882353, "length": 16}, "so_7050925_7050940_2": {"section_id": 7771, "quality": 0.6923076923076923, "length": 9}}}, "13958223": {"ParentId": "7050925", "CommentCount": "0", "Body": "<p>Write a class and print your name in the constructor of that class and declare a GLOBAL OBJECT of that class. So the class' constructor gets executed before main. So you can leave the main empty and still print your name.</p>\n<pre><code>class MyClass\n{\n   myClass()\n   {\n       cout &lt;&lt; \"printing my name...\" &lt;&lt;endl;\n   }\n};\n\nMyClass gObj; // this will trigger the constructor.\n\nint main()\n{\n   // nothing here...\n}\n</code></pre>\n", "OwnerUserId": "1916614", "PostTypeId": "2", "Id": "13958223", "Score": "0", "CreationDate": "2012-12-19T17:53:56.570", "LastActivityDate": "2012-12-19T17:53:56.570"}, "7050983": {"ParentId": "7050925", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2011-08-13T14:20:39.263", "OwnerUserId": "481572", "CommunityOwnedDate": "2011-08-13T14:20:39.263", "Id": "7050983", "Score": "2", "Body": "<p>I think the macro reference was to renaming the main function, the following is not my code, and demonstrates this. The compiler still sees a main function though, but technically there's no main from a source point of view. I got it here <a href=\"http://www.exforsys.com/forum/c-and-c/96849-without-main-function-how-post412181.html#post412181\" rel=\"nofollow\">http://www.exforsys.com/forum/c-and-c/96849-without-main-function-how-post412181.html#post412181</a></p>\n<pre><code>#include&lt;stdio.h&gt;\n#define decode(s,t,u,m,p,e,d) m##s##u##t\n#define begin decode(a,n,i,m,a,t,e)\n\nint begin()\n{\n  printf(\" hello \");\n}\n</code></pre>\n", "LastActivityDate": "2011-08-13T14:20:39.263"}, "7051270": {"ParentId": "7050925", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Disregarding specific language standards, most linking loader provides some means to declare a function name (entry point) which must be executed when the binary is loaded is loaded into memory.</p>\n<p>For old school c language, default was something like 'start' or '_start', defined in so-called crt (c runtime?), which does several householding jobs needed for c standard functions, such as preparing memory heap, initialising static variable areas, parsing command line into argc/argv, etc.</p>\n<p>Possibly you could override the entry point function if you take enough care not to use the standard functions which requires those household things (e.g. malloc(), free(), printf(), any class definitions have custom constructor, ...)\nQuite restrictive but not impossible if you use functions provided by o/s, not by standard c runtime.</p>\n<p>For example, you can make a simple helloworld using write() function on descriptor 1.</p>\n", "OwnerUserId": "496899", "LastEditorUserId": "496899", "LastEditDate": "2011-08-13T15:17:25.990", "Id": "7051270", "Score": "1", "CreationDate": "2011-08-13T15:11:59.520", "LastActivityDate": "2011-08-13T15:17:25.990"}, "7051459": {"ParentId": "7050925", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>When C or C++ code runs, it executes at a known start address, the code here initialises the run-time environment, initialises the stack pointer, performs data initialisation, calls static constructors, <em>then</em> jumps to main().</p>\n<p>The code that does this is linked with your code at build time by the linker.  In GCC it is usually in crt0.s, with a commercial compiler it is unlikely that this code will be available to you.</p>\n<p>In the end, it has to start somewhere and <code>main()</code> is just a symbolic name for that location.  It is specified by the language standard so that developers know what to call it, otherwise code would not be portable from one tool chain to another.</p>\n<p>If you are writing code for a 'bare-metal' system with no OS or at least no OS in the sense of a process loader (embedded systems often include an RTOS kernel that is started <em>after</em> main()) , then you can in theory call the C code entry point whatever you wish since you usually have complete control over run-time start-up code.  But do do so would be foolish and somewhat perverse.</p>\n<p>Some RTOS environments such as VxWorks, and most application frameworks in general include main() )or its equivalent) within their own library code so that it runs before the user application code.  For example VxWorks applications start from usrAppInit(), and Win32 applications start from WinMain().</p>\n", "OwnerUserId": "168986", "LastEditorUserId": "168986", "LastEditDate": "2011-08-19T19:27:47.370", "Id": "7051459", "Score": "1", "CreationDate": "2011-08-13T15:41:03.920", "LastActivityDate": "2011-08-19T19:27:47.370"}, "7050950": {"ParentId": "7050925", "CommentCount": "0", "Body": "<p>Maybe it's possible to compile a .data section and fill it with code?</p>\n", "OwnerUserId": "340457", "PostTypeId": "2", "Id": "7050950", "Score": "0", "CreationDate": "2011-08-13T14:15:40.773", "LastActivityDate": "2011-08-13T14:15:40.773"}});