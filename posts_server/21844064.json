post_cb({"21844108": {"ParentId": "21844064", "CommentCount": "2", "CreationDate": "2014-02-18T04:04:21.703", "OwnerUserId": "1707253", "PostTypeId": "2", "Id": "21844108", "Score": "1", "Body": "<p>By calling <code>sizeof()</code> on a string literal, you are literally trying to find the size of the string literal in memory.</p>\n<p>This included the null terminating character which is automatically appended to the string literal by your compiler.</p>\n", "LastActivityDate": "2014-02-18T04:04:21.703"}, "21844102": {"ParentId": "21844064", "PostTypeId": "2", "CommentCount": "1", "CreationDate": "2014-02-18T04:03:21.810", "Score": "6", "LastEditorUserId": "1708801", "LastEditDate": "2014-02-18T04:17:13.150", "Id": "21844102", "OwnerUserId": "1708801", "Body": "<p>The only difference here is that <a href=\"http://en.cppreference.com/w/cpp/string/byte/strlen\" rel=\"nofollow\">strlen</a> does not include the null terminating character while <a href=\"http://en.cppreference.com/w/cpp/language/sizeof\" rel=\"nofollow\">sizeof</a> will. The <a href=\"http://en.cppreference.com/w/c/string/byte/strlen\" rel=\"nofollow\">C documentation for strlen</a> is actually better in this case since it includes the statement:</p>\n<blockquote>\n<p id=\"so_21844064_21844102_0\">The null character is excluded from the length. </p>\n</blockquote>\n<p>For some clarification a string literal is an array which includes a null terminating character, from the the draft C++ standard section <code>2.14.5</code> <em>String literals</em> paragraph <em>8</em> says:</p>\n<blockquote>\n<p id=\"so_21844064_21844102_1\">Ordinary string literals and UTF-8 string literals are also referred to as narrow string literals. A narrow string literal has type \u201carray of n const char\u201d, where n is the size of the string as defined below, and has static storage duration (3.7).</p>\n</blockquote>\n<p>and paragraph <em>15</em> says:</p>\n<blockquote>\n<p id=\"so_21844064_21844102_2\">[...]The size of a narrow string literal is the total number of escape sequences and other characters, plus at least one for the multibyte encoding of each universal-character-name, plus one for the terminating \u2019\\0\u2019.</p>\n</blockquote>\n<p>and sizeof applied to an array will give you the total number of bytes in the array from section <code>5.3.3</code> <em>Sizeof</em> paragraph <em>3</em>:</p>\n<blockquote>\n<p id=\"so_21844064_21844102_3\">[...]When applied to an array, the result is the total number of bytes in the array. This implies that the size of an array of n elements is n times the size of an element.</p>\n</blockquote>\n", "LastActivityDate": "2014-02-18T04:17:13.150"}, "21844136": {"ParentId": "21844064", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2014-02-18T04:05:38.227", "Score": "2", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:24:14.737", "Id": "21844136", "OwnerUserId": "1608786", "Body": "<p>Strings are null terminated hence there is the null character <code>\\0</code> at the end.</p>\n<p><code>\\n</code>, <code>\\r</code>, <code>\\t</code>, and <code>\\0</code> are all a single byte in size and thus make 4 bytes in total!</p>\n<p>To take an excerpt from the selected answer to <a href=\"https://stackoverflow.com/questions/1392200/sizeof-string-literal\">this question</a> which dovetails quite well:</p>\n<blockquote>\n<p id=\"so_21844064_21844136_0\">The string literal has the type 'array of size N of [const] char' where N\n  includes the terminal null.</p>\n<p id=\"so_21844064_21844136_1\">Remember, arrays do not decay to pointers when passed to sizeof.</p>\n</blockquote>\n", "LastActivityDate": "2014-02-18T04:20:13.027"}, "21844064": {"CommentCount": "0", "AcceptedAnswerId": "21844154", "PostTypeId": "1", "LastEditorUserId": "1708801", "CreationDate": "2014-02-18T04:00:03.217", "LastActivityDate": "2014-02-18T04:30:40.380", "LastEditDate": "2014-02-18T04:30:40.380", "ViewCount": "1386", "FavoriteCount": "0", "Title": "Size of string literal consisting of escaped characters", "Id": "21844064", "Score": "4", "Body": "<p>Code in question:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\nusing namespace std;\n\nint main()\n{\n    cout &lt;&lt; sizeof(\"\\n\\r\\t\") &lt;&lt; endl; // prints 4\n    cout &lt;&lt; strlen(\"\\n\\r\\t\") &lt;&lt; endl; // print 3\n    return 0;\n}\n</code></pre>\n<p>I am confused because I always thought that it is standard that <code>sizeof</code> char is always 1 byte, but in the above code, it is printing 4.</p>\n<p>Is there an explanation for this or  is there an exception to this rule for escaped characters? Please enlighten me</p>\n", "Tags": "<c++><string><escaping><sizeof><strlen>", "OwnerUserId": "2089675", "AnswerCount": "4"}, "21844154": {"ParentId": "21844064", "PostTypeId": "2", "CommentCount": "1", "CreationDate": "2014-02-18T04:07:13.440", "Score": "4", "LastEditorUserId": "2877241", "LastEditDate": "2014-02-18T04:12:34.373", "Id": "21844154", "OwnerUserId": "2877241", "Body": "<p>This</p>\n<pre><code>\"\\n\\r\\t\"\n</code></pre>\n<p>is a so-called string literal. It is stored in memory as a constant character array with terminating zero. Each escape character is one character. </p>\n<p>So this string literal has three explicitly specified characters plus the terminatimg zero. In total there are four characters in the literal.</p>\n<p>As for function <code>strlen</code> then it does not take into account the terminating zero. So it will report only three characters that were specified explicitly in the string literal.</p>\n<p>The function <code>strlen</code> uses the terminating zero as the mark where it shall stop to count characters in a string.</p>\n<p>As for the operator <code>sizeof</code> then it returns total memory in bytes occupied by an object. As your string literal has type <code>const char[4]</code> then sizeof will return 4. It is the total memory in bytes occupied by the string literal.</p>\n", "LastActivityDate": "2014-02-18T04:12:34.373"}, "bq_ids": {"n4140": {"so_21844064_21844102_3": {"section_id": 6077, "quality": 0.9375, "length": 15}, "so_21844064_21844102_2": {"section_id": 5364, "quality": 0.9523809523809523, "length": 20}, "so_21844064_21844102_1": {"section_id": 5356, "quality": 1.0, "length": 26}, "so_21844064_21844136_0": {"section_id": 5356, "quality": 0.5833333333333334, "length": 7}}, "n3337": {"so_21844064_21844102_3": {"section_id": 5845, "quality": 0.9375, "length": 15}, "so_21844064_21844102_2": {"section_id": 5160, "quality": 0.9523809523809523, "length": 20}, "so_21844064_21844102_1": {"section_id": 5153, "quality": 1.0, "length": 26}, "so_21844064_21844136_0": {"section_id": 5153, "quality": 0.5833333333333334, "length": 7}}, "n4659": {"so_21844064_21844102_3": {"section_id": 7573, "quality": 0.9375, "length": 15}, "so_21844064_21844102_2": {"section_id": 6788, "quality": 0.9523809523809523, "length": 20}, "so_21844064_21844102_1": {"section_id": 6781, "quality": 1.0, "length": 26}}}});