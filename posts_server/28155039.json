post_cb({"bq_ids": {"n4140": {"so_28155039_28156035_0": {"length": 33, "quality": 0.9166666666666666, "section_id": 5811}}, "n3337": {"so_28155039_28156035_0": {"length": 33, "quality": 0.9166666666666666, "section_id": 5584}}, "n4659": {"so_28155039_28156035_0": {"length": 27, "quality": 0.75, "section_id": 7272}}}, "28155764": {"Id": "28155764", "PostTypeId": "2", "Body": "<pre><code>cout &lt;&lt; ++*ptr-- &lt;&lt; \", \" &lt;&lt; *ptr;\n</code></pre>\n<p>is</p>\n<pre><code>operator &lt;&lt;(cout.operator &lt;&lt;(++*ptr--), \", \").operator &lt;&lt;(*ptr);\n</code></pre>\n<p>The problem can be reduced to:</p>\n<pre><code>f(f(ptr--), ptr)\n</code></pre>\n<p>whereas order of evaluation between <code>f(ptr--)</code> and <code>ptr</code> is unspecified (and more specificaly between <code>ptr--</code> and <code>ptr</code>).</p>\n<p>So you got undefined behavior for the given code.</p>\n", "LastEditorUserId": "2684539", "LastActivityDate": "2015-01-26T18:03:57.110", "Score": "5", "CreationDate": "2015-01-26T17:49:32.840", "ParentId": "28155039", "CommentCount": "4", "OwnerUserId": "2684539", "LastEditDate": "2015-01-26T18:03:57.110"}, "28155039": {"ViewCount": "185", "Body": "<p>My teacher provided me with this code and it returns <strong>31,40</strong>, but I am unable to figure out why. What is the reason for it returning what it does?</p>\n<pre><code>void main() {\n    int *ptr;\n    int arr[5] = { 10, 20, 30, 40, 50 };\n    ptr = &amp;arr[3];\n    cout &lt;&lt; ++*ptr-- &lt;&lt; \", \" &lt;&lt; *ptr;\n}\n</code></pre>\n", "Title": "Increment and decrement with pointer arrays", "CreationDate": "2015-01-26T17:05:24.783", "Id": "28155039", "CommentCount": "16", "LastEditDate": "2015-01-26T18:16:37.433", "PostTypeId": "1", "LastEditorUserId": "2565202", "LastActivityDate": "2015-01-26T18:38:55.737", "Tags": "<c++><arrays><pointers>", "Score": "3", "OwnerUserId": "2105306", "ClosedDate": "2015-01-27T00:13:29.483", "AnswerCount": "2"}, "28156035": {"Id": "28156035", "PostTypeId": "2", "Body": "<p>The C++ standard states </p>\n<blockquote>\n<p id=\"so_28155039_28156035_0\"><strong>Section 1.9/15 [intro.execution]</strong> : Except where noted, evaluations of operands of individual operators and of subexpressions of individual\n  expressions are unsequenced. (...) If a side effect on a scalar object is unsequenced relative to either another side effect on the\n  same scalar object or a value computation using the value of the same\n  scalar object, the behavior is undefined.</p>\n</blockquote>\n<p><code>++*ptr--</code> and <code>*ptr</code> are unsequenced subexpressions of the same expression using the same object: nothing guarantees that they are evaluated from left to right.  So according to the standard, this results in undefined behaviour.  Your result tend to show that your compiler chooses to evaluate first <code>*ptr</code> and then <code>++*ptr--</code>.  </p>\n<p><em>Edit:</em> <code>++*ptr--</code> is <code>++(*ptr--))</code>.  Here the operand of operator <code>++</code> also uses object <code>ptr</code> on which <code>--</code> does a side effect.  So this is undefined behaviour as well.  It appears that in your case, the compiler first evaluates <code>*ptr--</code> which results in 40 and a decremented <code>ptr</code>, and then applies <code>++</code> on the dereferenced decremented pointer (i.e. 30 incremented by 1).   </p>\n", "LastEditorUserId": "3723423", "LastActivityDate": "2015-01-26T18:38:55.737", "Score": "3", "CreationDate": "2015-01-26T18:07:38.020", "ParentId": "28155039", "CommentCount": "0", "OwnerUserId": "3723423", "LastEditDate": "2015-01-26T18:38:55.737"}});