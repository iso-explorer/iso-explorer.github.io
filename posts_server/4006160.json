post_cb({"4006197": {"ParentId": "4006160", "CommentCount": "1", "CreationDate": "2010-10-23T21:37:26.117", "OwnerUserId": "20713", "PostTypeId": "2", "Id": "4006197", "Score": "1", "Body": "<p>This is supposed to work; in fact,</p>\n<pre><code>template&lt;class T&gt;\nclass Child {\nprivate:\n    T *parent;\npublic:\n    Child(T *parent) : parent(parent) {}\n};\nclass Parent {\nprivate:\n    Child&lt;Parent&gt; child;\npublic:\n    Parent() : child(this) {}\n};\n</code></pre>\n<p>compiles fine for me with both g++ 4.4.5 and clang++ 2.8.</p>\n<p>What is failing for you?</p>\n", "LastActivityDate": "2010-10-23T21:37:26.117"}, "4006301": {"ParentId": "4006160", "CommentCount": "0", "CreationDate": "2010-10-23T22:01:13.490", "OwnerUserId": "6345", "PostTypeId": "2", "Id": "4006301", "Score": "1", "Body": "<p>I don't think it's failing on you, unless you have the warning level set to 4 (or similar, I assume Visual Studio) and have enabled \"treat warnings as errors\".</p>\n<p>Basically, this warning is A Good Thing, since it won't let you accidentally <em>use</em> the <code>this</code> pointer when what it points at is yet to be constructed.</p>\n<p>However, when you know what you are doing wherever <code>this</code> is passed in the initialization list, the warning and error caused by this will be annoying.</p>\n<p>You can get rid of it (again, assuming Visual Studio) by decorating the constructor (unless it's defined in the class declaration - then you must decorate all the class):</p>\n<pre><code>// warning C4355: 'this' : used in base member initializer list\n#pragma warning (push)\n#pragma warning (disable : 4355)\nsome_class::some_class()\n: ...\n{\n}\n#pragma warning (pop)\n</code></pre>\n", "LastActivityDate": "2010-10-23T22:01:13.490"}, "4006295": {"ParentId": "4006160", "CommentCount": "1", "CreationDate": "2010-10-23T21:59:58.177", "OwnerUserId": "87234", "PostTypeId": "2", "Id": "4006295", "Score": "1", "Body": "<p>If you're looking to suppress the warning, just do this:</p>\n<pre><code>class Foo\n{\npublic:\n    Foo() :\n    Froozle(get_this())\n    {}\n\nprivate:\n    Foo* get_this()\n    {\n        return this;\n    }\n\n    TEvent&lt;Foo&gt; Froozle; // see below\n};\n</code></pre>\n<p>The indirection is enough to stop it.</p>\n", "LastActivityDate": "2010-10-23T21:59:58.177"}, "4006160": {"CommentCount": "0", "AcceptedAnswerId": "4006173", "CreationDate": "2010-10-23T21:28:49.773", "LastActivityDate": "2010-10-23T22:01:13.490", "PostTypeId": "1", "ViewCount": "4417", "FavoriteCount": "3", "Title": "In C++, initialize a class member with 'this' pointer during construction", "Id": "4006160", "Score": "6", "Body": "<p>I'd like to create a class that is associated to another class in some sort of parent-child relationship. For this the \"child\" class needs a reference to it's parent.</p>\n<p>For example:</p>\n<pre><code>template &lt;typename T&gt;\nclass TEvent {\n    private: T* Owner;\n    public: TEvent(T* parent) : Owner(parent) {}\n};\n\nclass Foo {\n    private: TEvent&lt;Foo&gt; Froozle; // see below\n};\n</code></pre>\n<p>Now the problem is that I can't initialize the <code>Froozle</code> instance directly, nor using the instanciation list of Foo's constructor, because <code>this</code> references are not allowed there. Apart from adding another method <code>setParent(T*)</code> (which I don't like too much because it means that I have to leave the <code>TEvent&lt;&gt;</code> instance in an invalid state), is there a way to achieve this?</p>\n", "Tags": "<c++><class><initialization><this>", "OwnerUserId": "195651", "AnswerCount": "5"}, "4006173": {"ParentId": "4006160", "PostTypeId": "2", "CommentCount": "3", "CreationDate": "2010-10-23T21:31:29.490", "Score": "11", "LastEditorUserId": "160206", "LastEditDate": "2010-10-23T21:56:59.163", "Id": "4006173", "OwnerUserId": "160206", "Body": "<p>It is OK to use <code>this</code> in the initialization list, as long as it is not used to access any members that may not have been initialized yet.</p>\n", "LastActivityDate": "2010-10-23T21:56:59.163"}, "bq_ids": {"n4140": {"so_4006160_4006252_3": {"section_id": 440, "quality": 0.8571428571428571, "length": 12}, "so_4006160_4006252_2": {"section_id": 440, "quality": 1.0, "length": 19}, "so_4006160_4006252_0": {"section_id": 440, "quality": 1.0, "length": 8}}, "n3337": {"so_4006160_4006252_3": {"section_id": 431, "quality": 0.8571428571428571, "length": 12}, "so_4006160_4006252_2": {"section_id": 431, "quality": 1.0, "length": 19}, "so_4006160_4006252_0": {"section_id": 431, "quality": 1.0, "length": 8}}, "n4659": {"so_4006160_4006252_3": {"section_id": 460, "quality": 0.8571428571428571, "length": 12}, "so_4006160_4006252_2": {"section_id": 460, "quality": 1.0, "length": 19}, "so_4006160_4006252_0": {"section_id": 460, "quality": 1.0, "length": 8}}}, "4006252": {"ParentId": "4006160", "CommentCount": "4", "CreationDate": "2010-10-23T21:49:45.983", "OwnerUserId": "12711", "PostTypeId": "2", "Id": "4006252", "Score": "10", "Body": "<p>From the standard 12.6.2/7 \"Initializing bases and members\" (emphasis mine):</p>\n<blockquote>\n<p id=\"so_4006160_4006252_0\">Names in the expression-list of a\n  mem-initializer are evaluated in the\n  scope of the constructor for which the\n  mem-initializer is specified. </p>\n<p id=\"so_4006160_4006252_1\">[Example: </p>\n<pre><code>class X {\n    int a;\n    int b;\n    int i;\n    int j;\n\npublic:\n    const int&amp; r;\n    X(int i): r(a), b(i), i(i), j(this-&gt;i) {}\n};\n</code></pre>\n<p id=\"so_4006160_4006252_2\">initializes <code>X::r</code> to refer to <code>X::a</code>,\n  initializes <code>X::b</code> with the value of the\n  constructor parameter <code>i</code>, initializes\n  <code>X::i</code> with  the  value  of  the \n  constructor  parameter <code>i</code>,  and \n  initializes <code>X::j</code> with  the  value  of\n  <code>X::i</code>;  this takes place each time an\n  object of <code>class X</code> is created.  ]</p>\n<p id=\"so_4006160_4006252_3\"><strong>[Note: because the mem-initializer are\n  evaluated in the  scope  of  the \n  constructor,  the <code>this</code> pointer  can \n  be  used  in  the expression-list of \n  a mem-initializer to refer to the\n  object being initialized.  ]</strong></p>\n</blockquote>\n", "LastActivityDate": "2010-10-23T21:49:45.983"}});