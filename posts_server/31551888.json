post_cb({"31552168": {"Id": "31552168", "PostTypeId": "2", "Body": "<p>The following cites the C11 standard (final draft).</p>\n<blockquote>\n<p id=\"so_31551888_31552168_0\"><a href=\"http://port70.net/~nsz/c/c11/n1570.html#6.3.1.2\" rel=\"noreferrer\"><strong>6.3.1.2:</strong></a> When any scalar value is converted to _Bool, the result is 0 if the value compares equal to 0; otherwise, the result is 1.</p>\n</blockquote>\n<p><code>bool</code> (mapped by <code>stdbool.h</code> to the internal name <code>_Bool</code> for C) itself is an <a href=\"http://port70.net/~nsz/c/c11/n1570.html#6.2.5p6\" rel=\"noreferrer\">unsigned integer type</a>:</p>\n<blockquote>\n<p id=\"so_31551888_31552168_1\">... The type _Bool and the unsigned integer types that correspond to the standard signed integer types are the standard unsigned integer types.</p>\n</blockquote>\n<p>According to  <a href=\"http://port70.net/~nsz/c/c11/n1570.html#6.2.5p2\" rel=\"noreferrer\">6.2.5p2</a>:</p>\n<blockquote>\n<p id=\"so_31551888_31552168_2\">An object declared as type _Bool is large enough to store the values 0 and 1.</p>\n</blockquote>\n<p>AFAIK these definitions are semantically identical to C++ - with the minor difference of the built-in(!) names. <code>bool</code> for C++ and <code>_Bool</code> for C.</p>\n<p>Note that C does not use the term <a href=\"http://port70.net/~nsz/c/c11/n1570.html#note64\" rel=\"noreferrer\"><em>rvalues</em></a> as C++ does. However, in C pointers are <em>scalars</em>, so assigning a pointer to a <code>_Bool</code> behaves as in C++.</p>\n", "LastEditorUserId": "4774918", "LastActivityDate": "2015-07-22T01:29:58.717", "Score": "7", "CreationDate": "2015-07-22T01:00:41.800", "ParentId": "31551888", "CommentCount": "9", "OwnerUserId": "4774918", "LastEditDate": "2015-07-22T01:29:58.717"}, "bq_ids": {"n4140": {"so_31551888_31552168_1": {"length": 10, "quality": 0.7692307692307693, "section_id": 7212}, "so_31551888_31552168_2": {"length": 5, "quality": 0.625, "section_id": 7210}}, "n3337": {"so_31551888_31552168_1": {"length": 10, "quality": 0.7692307692307693, "section_id": 6956}, "so_31551888_31552168_2": {"length": 5, "quality": 0.625, "section_id": 6954}}, "n4659": {"so_31551888_31552168_1": {"length": 10, "quality": 0.7692307692307693, "section_id": 8721}, "so_31551888_31552168_2": {"length": 5, "quality": 0.625, "section_id": 8719}}}, "31551979": {"Id": "31551979", "PostTypeId": "2", "Body": "<p>0 values of basic types <sup>(1)(2)</sup>map to <code>false</code>.</p>\n<p>Other values map to <code>true</code>.</p>\n<p>This convention was established in original C, via its flow control statements; C didn't have a boolean type at the time.</p>\n<hr>\n<p>It's a common error to assume that as function return values, <code>false</code> indicates failure. But in particular from <code>main</code> it's <code>false</code> that indicates success. I've seen this done wrong many times, including in the Windows starter code for the D language (when you have folks like Walter Bright and Andrei Alexandrescu getting it wrong, then it's just dang <em>easy</em> to get wrong), hence this heads-up beware beware.</p>\n<hr>\n<p>There's no need to cast to <code>bool</code> for built-in types because that conversion is implicit. However, Visual C++ (Microsoft's C++ compiler) has a tendency to issue a performance warning (!) for this, a pure silly-warning. A cast doesn't suffice to shut it up, but a conversion via double negation, i.e. <code>return !!x</code>, works nicely. One can read <code>!!</code> as a \u201cconvert to <code>bool</code>\u201d operator, much as <code>--&gt;</code> can be read as \u201cgoes to\u201d. For those who are deeply into readability of operator notation. ;-)</p>\n<hr>\n<p><sup>\n<sup>1)</sup> C++14 \u00a74.12/1 \u201cA zero value, null pointer value, or null member pointer value is converted to <code>false</code>; any other value is converted to <code>true</code>. For direct-initialization (8.5), a prvalue of type <code>std::nullptr_t</code> can be converted to a prvalue of type <code>bool</code>; the resulting value is <code>false</code>.\u201d<br>\n<sup>2)</sup> C99 and C11 \u00a76.3.1.2/1 \u201cWhen any scalar value is converted to <code>_Bool</code>, the result is 0 if the value compares equal to 0; otherwise, the result is 1.\u201d\n</br></sup></p>\n</hr></hr></hr>", "LastEditorUserId": "464581", "LastActivityDate": "2015-07-22T01:10:13.470", "Score": "19", "CreationDate": "2015-07-22T00:39:56.123", "ParentId": "31551888", "CommentCount": "10", "OwnerUserId": "464581", "LastEditDate": "2015-07-22T01:10:13.470"}, "31551888": {"ViewCount": "26109", "Body": "<p>I know that in C and C++, when casting bools to ints, <code>(int)true == 1</code> and <code>(int)false == 0</code>. I'm wondering about casting in the reverse direction...</p>\n<p>In the code below, all of the following assertions held true for me in .c files compiled with Visual Studio 2013 and Keil \u00b5Vision 5. Notice <code>(bool)2 == true</code>.</p>\n<p>What do the C and C++ standards say about casting non-zero, non-one integers to bools? Is this behavior specified? Please include citations.</p>\n<pre><code>#include &lt;stdbool.h&gt;\n#include &lt;assert.h&gt;\n\nvoid TestBoolCast(void)\n{\n    int i0 = 0, i1 = 1, i2 = 2;\n\n    assert((bool)i0 == false);\n    assert((bool)i1 == true);\n    assert((bool)i2 == true);\n\n    assert(!!i0 == false);\n    assert(!!i1 == true);\n    assert(!!i2 == true);\n}\n</code></pre>\n<p><strong>Not</strong> a duplicate of <a href=\"https://stackoverflow.com/questions/2725044\">Can I assume (bool)true == (int)1 for any C++ compiler?</a>:</p>\n<ol>\n<li>Casting in the reverse direction (int --&gt; bool).</li>\n<li>No discussion there of non-zero, non-one values.</li>\n</ol>\n", "AcceptedAnswerId": "31551979", "Title": "Casting int to bool in C/C++", "CreationDate": "2015-07-22T00:27:29.190", "Id": "31551888", "CommentCount": "11", "FavoriteCount": "5", "PostTypeId": "1", "LastEditDate": "2017-05-23T12:10:01.113", "LastEditorUserId": "-1", "LastActivityDate": "2017-03-05T04:54:29.153", "Score": "13", "OwnerUserId": "1995714", "Tags": "<c++><c><casting><boolean>", "AnswerCount": "2"}});