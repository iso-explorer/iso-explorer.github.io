post_cb({"bq_ids": {"n4140": {"so_1329191_1329232_1": {"length": 36, "quality": 0.972972972972973, "section_id": 5407}}, "n3337": {"so_1329191_1329232_1": {"length": 36, "quality": 0.972972972972973, "section_id": 5202}}, "n4659": {"so_1329191_1329232_1": {"length": 36, "quality": 0.972972972972973, "section_id": 6829}}}, "1329211": {"Id": "1329211", "PostTypeId": "2", "Body": "<p>Regardless of whether it is legal it's not the best of practices. Typedefs exist so you can change the base type and have it reflected all over your code and if you ever do so you'll find suddenly your program doesn't compile anymore. </p>\n", "LastActivityDate": "2009-08-25T15:56:32.870", "Score": "7", "CreationDate": "2009-08-25T15:56:32.870", "ParentId": "1329191", "CommentCount": "0", "OwnerUserId": "149364"}, "1329232": {"Id": "1329232", "PostTypeId": "2", "Body": "<p>Yes it is legal:</p>\n<blockquote>\n<p id=\"so_1329191_1329232_0\"><strong>7.1.3 The typedef specifier</strong></p>\n<p id=\"so_1329191_1329232_1\">A name declared with the typedef\n  specifier becomes a typedef-name.\n  Within the scope of its declaration, a\n  typedef-name is <strong>syntactically</strong>\n<strong>equivalent</strong> to a keyword and names the\n  type associated with the identifier in\n  the way described in clause 8. A\n  typedef-name is thus a synonym for\n  another type. <strong>A typedef-name does not</strong>\n<strong>introduce a new type the way a class</strong>\n<strong>declaration (9.1) or enum declaration</strong>\n<strong>does.</strong></p>\n</blockquote>\n", "LastEditorUserId": "127893", "LastActivityDate": "2009-08-25T17:03:09.397", "Score": "10", "CreationDate": "2009-08-25T15:58:42.587", "ParentId": "1329191", "CommentCount": "2", "LastEditDate": "2009-08-25T17:03:09.397", "OwnerUserId": "127893"}, "1329234": {"Id": "1329234", "PostTypeId": "2", "Body": "<p>Yes, it is legal.</p>\n<p>It is questionable, since it's not obvious anymore how declaration and definition match, but if you have a good reason, you can do it.</p>\n", "LastActivityDate": "2009-08-25T15:59:22.507", "Score": "1", "CreationDate": "2009-08-25T15:59:22.507", "ParentId": "1329191", "CommentCount": "0", "OwnerUserId": "127183"}, "1329191": {"ViewCount": "293", "Body": "<p>The GNU C++ (g++ -pedantic -Wall) accepts this:</p>\n<pre><code>typedef int MyInt;\n\nclass Test\n{\npublic:\n    MyInt foo();\n    void bar(MyInt baz);\n}; \n\nint Test::foo()\n{\n    return 10;\n}\n\nvoid Test::bar(int baz)\n{\n}\n\nint main(void)\n{\n    Test t;\n    t.bar(t.foo());\n    return 0;\n}\n</code></pre>\n<p>Is it legal C++? Are other compilers likely to accept it?</p>\n", "AcceptedAnswerId": "1329232", "Title": "Is it legal C++ to use a typedef in a method declaration but the canonical type in the method definition?", "CreationDate": "2009-08-25T15:53:20.007", "Id": "1329191", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2009-08-25T17:03:09.397", "Score": "3", "OwnerUserId": "139509", "Tags": "<c++><g++><standards><typedef><standards-compliance>", "AnswerCount": "3"}});