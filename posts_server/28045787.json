post_cb({"28045867": {"Id": "28045867", "PostTypeId": "2", "Body": "<p>There are macros for the number of decimal places each type supports. The <a href=\"http://www.gnu.org/software/libc/manual/html_node/Floating-Point-Parameters.html\" rel=\"nofollow\">gcc docs</a> explain what they are and also what they mean:</p>\n<blockquote>\n<p id=\"so_28045787_28045867_0\">FLT_DIG</p>\n<p id=\"so_28045787_28045867_1\">This is the number of decimal digits of precision for the float data type. Technically, if p and b are the precision and base (respectively) for the representation, then the decimal precision q is the maximum number of decimal digits such that any floating point number with q base 10 digits can be rounded to a floating point number with p base b digits and back again, without change to the q decimal digits.</p>\n<p id=\"so_28045787_28045867_2\">The value of this macro is supposed to be <strong>at least 6</strong>, to satisfy ISO C.</p>\n<p id=\"so_28045787_28045867_3\">DBL_DIG<br>\n  LDBL_DIG</br></p>\n<p id=\"so_28045787_28045867_4\">These are similar to FLT_DIG, but for the data types double and long double, respectively. The values of these macros are supposed to be <strong>at least 10</strong>.</p>\n</blockquote>\n<p>On both gcc 4.9.2 and clang 3.5.0, these macros yield 6 and 15, respectively. </p>\n", "LastActivityDate": "2015-01-20T12:52:23.610", "CommentCount": "0", "CreationDate": "2015-01-20T12:52:23.610", "ParentId": "28045787", "Score": "2", "OwnerUserId": "2069064"}, "28045787": {"ViewCount": "14568", "Body": "<p>I have read that double stores 15 digits and float stores 7 digits.</p>\n<p>My question is, are these numbers the number of decimal places supported or total number of digits in a number?</p>\n", "AcceptedAnswerId": "28045815", "Title": "How many decimal places does the primitive float and double support?", "CreationDate": "2015-01-20T12:48:39.893", "Id": "28045787", "CommentCount": "1", "PostTypeId": "1", "ClosedDate": "2015-01-23T19:07:43.363", "LastActivityDate": "2015-01-20T14:10:02.523", "Score": "0", "OwnerUserId": "521180", "Tags": "<c++>", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_28045787_28046896_1": {"length": 47, "quality": 0.9038461538461539, "section_id": 7217}}, "n3337": {"so_28045787_28046896_1": {"length": 47, "quality": 0.9038461538461539, "section_id": 6961}}, "n4659": {"so_28045787_28046896_1": {"length": 45, "quality": 0.8653846153846154, "section_id": 8726}}}, "28047413": {"Id": "28047413", "PostTypeId": "2", "Body": "<p>If you are on an architecture using IEEE-754 floating point arithmetic (as in most architectures), then the type <code>float</code> corresponds to single precision, and the type <code>double</code> corresponds to double precision, as described in the standard.</p>\n<p>Let's make some numbers:</p>\n<h3>Single precision:</h3>\n<p>32 bits to represent the number, out of which <strong>24 bits</strong> are for mantissa. This means that the least significant bit (LSB) has a relative value of <strong>2^(-24)</strong> respect to the MSB, which is the \"hidden 1\", and it is not represented. Therefore, for a fixed exponent, the minimum representable value is <strong>10^(-7.22)</strong> times the exponent. What this means is that for a representation in base exponent notation (3.141592653589 <em>E</em> 25), only \"7.22\" decimal numbers are significant, which in practice means that at least 7 decimals will be always correct.</p>\n<h3>Double precision:</h3>\n<p>64 bits to represent the number, out of which <strong>53 bits</strong> are for mantissa. Following the same reasoning, expressing <strong>2^(-53)</strong> as a power of 10 results in <strong>10^(-15.95)</strong>, which in term means that at least 15 decimals will be always correct.</p>\n", "LastActivityDate": "2015-01-20T14:10:02.523", "CommentCount": "2", "CreationDate": "2015-01-20T14:10:02.523", "ParentId": "28045787", "Score": "0", "OwnerUserId": "3531110"}, "28046896": {"Id": "28046896", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_28045787_28046896_0\">are these numbers the number of decimal places supported or total number of digits in a number?</p>\n</blockquote>\n<p>They are the <em>significant</em> digits contained in every number (although you may not need all of them, but they're still there). The mantissa of the same type always contains the same number of bits, so every number consequentially contains the same number of valid \"digits\" if you think in terms of decimal digits. You cannot store more digits than will fit into the mantissa.</p>\n<p>The number of \"supported\" digits is, however, much larger, for example <code>float</code> will usually support up to 38 decimal digits and <code>double</code> will support up to 308 decimal digits, but most of these digits are <em>not significant</em> (that is, \"unknown\").</p>\n<p>Although technically, this is wrong, since <code>float</code> and <code>double</code> do not have universally well-defined sizes like I presumed above (they're implementation-defined). Also, storage sizes are not necessarily the same as the sizes of intermediate results.</p>\n<p>The C++ standard is very reluctant at precisely defining any fundamental type, leaving almost everything to the implementation. Floating point types are no exception:</p>\n<blockquote>\n<p id=\"so_28045787_28046896_1\">3.9.1 / 8<br>\n  There are three floating point types: float, double, and long double. The type double provides at least as much precision as float, and the type long double provides at least as much precision as double. The set of values of the type float is a subset of the set of values of the type double; the set of values of the type double is a subset of the set of values of the type long double. The value representation of floating-point types is implementation-defined.</br></p>\n</blockquote>\n<p>Now of course all of this is not particularly helpful in practice.</p>\n<p>In practice, floating point is (usually) IEEE 754 compliant, with <code>float</code> having a width of 32 bits and <code>double</code> having a width of 64 bits (as stored in memory, registers have higher precision on some notable mainstream architectures).</p>\n<p>This is equivalent to 24 bits and 53 bits of matissa, respectively, or <strong>7 and 15 full decimals</strong>.</p>\n", "LastActivityDate": "2015-01-20T13:46:14.007", "CommentCount": "0", "CreationDate": "2015-01-20T13:46:14.007", "ParentId": "28045787", "Score": "1", "OwnerUserId": "572743"}, "28045815": {"Id": "28045815", "PostTypeId": "2", "Body": "<p>Those are the total number of \"significant figures\" if you will, counting from left to right, regardless of where the decimal point is.  Beyond those numbers of digits, accuracy is not preserved.</p>\n<p>The counts you listed are for the base 10 representation.</p>\n", "LastActivityDate": "2015-01-20T12:50:10.917", "CommentCount": "0", "CreationDate": "2015-01-20T12:50:10.917", "ParentId": "28045787", "Score": "3", "OwnerUserId": "4323"}});