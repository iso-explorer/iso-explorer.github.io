post_cb({"24335198": {"ParentId": "24333686", "PostTypeId": "2", "CommentCount": "0", "Body": "<h3>TOO LONG; DIDN'T READ</h3>\n<ul>\n<li><p><em>msvc 2012</em> is correctly rejecting the line marked <code>// error C2998</code>,</p></li>\n<li><p>the former diagnostic is however faulty and should be accepted; as it is in <a href=\"http://rextester.com/LKOTC73710\" rel=\"nofollow noreferrer\">newer versions</a> of the compiler.</p></li>\n</ul>\n<p><sup> <strong>Note</strong>: The bug report related to C2950 can be found, <a href=\"http://connect.microsoft.com/VisualStudio/feedback/details/753981\" rel=\"nofollow noreferrer\">here</a></sup>.</p>\n<hr>\n<h2>Regarding <a href=\"http://msdn.microsoft.com/en-us/library/9045w50z%28v=vs.71%29.aspx\" rel=\"nofollow noreferrer\">C2950</a></h2>\n<p><em>msvc 2012</em> is wrong to issue a diagnostic for the line in question.</p>\n<pre><code>template&lt;class T&gt; struct A;\n\ntemplate&lt;&gt;\nstruct A&lt;int&gt; { };\n\ntemplate struct A&lt;int&gt;; // legal\n\nint main () { }\n</code></pre>\n<p>The standard states that an explicit instantiation should contain a <em>simple-template-id</em>, which is exactly what <code>A&lt;int&gt;</code> is, and with that said; it is <strong>legal</strong> <em>C++</em>.</p>\n<blockquote>\n<p id=\"so_24333686_24335198_0\"><code>14.6.2p3</code> <strong>Explicit instantiation</strong> <code>[temp.explicit]</code></p>\n<blockquote>\n<p id=\"so_24333686_24335198_2\">If the explicit instantiation is for a class or member class, the <em>elaborated-type-specifier</em> in the <em>declaration</em> shall include a <em>simple-template-id</em>.</p>\n</blockquote>\n</blockquote>\n<p><sup></sup></p>\n<blockquote>\n<p id=\"so_24333686_24335198_3\"><code>14.2p1</code> <strong>Names of template specializations</strong> <code>[temp.names]</code></p>\n<blockquote>\n<p id=\"so_24333686_24335198_5\">A template specialization (14.7) can be referred to by a <em>template-id</em>:</p>\n<pre><code>simple-template-id:\n         template-name &lt; template-argument-list_opt &gt;\n</code></pre>\n</blockquote>\n</blockquote>\n<p><br/></p>\n<p><strong>Change of wording:</strong> <em>C++03</em> vs <em>C++11</em></p>\n<p><em>14.7.2p5</em> has some new wording starting from <em>C++11</em>, which was put in place after the following <em>defect report</em>:</p>\n<ul>\n<li><a href=\"http://www.open-std.org/JTC1/SC22/WG21/docs/cwg_defects.html#259\" rel=\"nofollow noreferrer\"><strong>259</strong>. Restrictions on explicit specialization and instantiation</a></li>\n</ul>\n<blockquote>\n<p id=\"so_24333686_24335198_6\"><code>14.7.2p5</code> <strong>Explicit instantiation</strong> <code>[temp.explicit]</code></p>\n<blockquote>\n<p id=\"so_24333686_24335198_8\">For a given set of template arguments, if an explicit instantiation of a template appears after a declaration of an explicit specialization for that template, the explicit instantiation has no effect.</p>\n</blockquote>\n</blockquote>\n<p><sup></sup></p>\n<blockquote>\n<p id=\"so_24333686_24335198_9\"><sup><strong>Note</strong>: Kudos to <em>@<a href=\"https://stackoverflow.com/users/420683/dyp\">dyp</a></em> for bringing attention to the previously linked <em>DR</em>.</sup></p>\n</blockquote>\n<hr>\n<h2>Regarding <a href=\"http://msdn.microsoft.com/en-us/library/01d7zzfy%28v=vs.90%29.aspx\" rel=\"nofollow noreferrer\">C2998</a></h2>\n<p>This error is accurate; you are not referring to something which depends on a template-parameter, this means that you should not use <code>template&lt;&gt;</code> on the definition in question.</p>\n<p>Newer versions of <code>gcc</code> issues a diagnostic regarding it,  and <em>clang</em> correctly rejects such a definition.</p>\n<pre><code>template&lt;class T&gt; struct A;\n\ntemplate&lt;&gt;\nstruct A&lt;int&gt; { \n  static int const value;\n};\n\ntemplate&lt;&gt; int const A&lt;int&gt;::value = 42; // ill-formed, `value` does not depend on\n                                         //              any template parameter since it's\n                                         //              explicitly a part of `A&lt;int&gt;`\n\nint main () { }\n</code></pre>\n<pre class=\"lang-none prettyprint-override\"><code>gcc   =&gt; foo.cpp:8:22: warning: too many template headers for A&lt;int&gt;::value (should be 0)\nclang =&gt; foo.cpp:8:1: error: extraneous 'template&lt;&gt;' in declaration of variable 'value'\nmsvc  =&gt; foo.cpp(8) : error C2998: 'const int A&lt;int&gt;::value' : cannot be a template definition\n</code></pre>\n<p>The above diagnostics are correct.</p>\n<p><br/></p>\n<p>The line in question is a violation of the following section of the Standard:</p>\n<blockquote>\n<p id=\"so_24333686_24335198_10\"><code>14.7.3p5</code> <strong>Explicit specialization</strong> <code>[temp.expl.spec]</code></p>\n<blockquote>\n<p id=\"so_24333686_24335198_12\">Members of an explicitly specialized class template are defined in the same manner as members of normal class, and not using the <code>template&lt;&gt;</code>syntax. The same is true when defining a member of an explicitly specialized member class.</p>\n</blockquote>\n</blockquote>\n</hr></hr>", "OwnerUserId": "1090079", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T11:33:14.057", "Id": "24335198", "Score": "8", "CreationDate": "2014-06-20T20:30:15.240", "LastActivityDate": "2014-06-20T21:55:00.293"}, "bq_ids": {"n4140": {"so_24333686_24335198_12": {"section_id": 267, "quality": 0.8695652173913043, "length": 20}, "so_24333686_24333686_0": {"section_id": 231, "quality": 1.0, "length": 13}, "so_24333686_24335198_7": {"section_id": 254, "quality": 0.9411764705882353, "length": 16}, "so_24333686_24335198_1": {"section_id": 252, "quality": 1.0, "length": 9}, "so_24333686_24335198_5": {"section_id": 69, "quality": 0.8333333333333334, "length": 5}, "so_24333686_24335198_8": {"section_id": 254, "quality": 0.9411764705882353, "length": 16}, "so_24333686_24335198_11": {"section_id": 267, "quality": 0.8695652173913043, "length": 20}, "so_24333686_24335198_2": {"section_id": 252, "quality": 1.0, "length": 9}, "so_24333686_24335198_4": {"section_id": 69, "quality": 0.8333333333333334, "length": 5}}, "n3337": {"so_24333686_24335198_12": {"section_id": 258, "quality": 0.8695652173913043, "length": 20}, "so_24333686_24333686_0": {"section_id": 224, "quality": 1.0, "length": 13}, "so_24333686_24335198_7": {"section_id": 245, "quality": 0.9411764705882353, "length": 16}, "so_24333686_24335198_1": {"section_id": 243, "quality": 1.0, "length": 9}, "so_24333686_24335198_5": {"section_id": 64, "quality": 0.8333333333333334, "length": 5}, "so_24333686_24335198_8": {"section_id": 245, "quality": 0.9411764705882353, "length": 16}, "so_24333686_24335198_11": {"section_id": 258, "quality": 0.8695652173913043, "length": 20}, "so_24333686_24335198_2": {"section_id": 243, "quality": 1.0, "length": 9}, "so_24333686_24335198_4": {"section_id": 64, "quality": 0.8333333333333334, "length": 5}}, "n4659": {"so_24333686_24335198_12": {"section_id": 274, "quality": 0.8695652173913043, "length": 20}, "so_24333686_24335198_11": {"section_id": 274, "quality": 0.8695652173913043, "length": 20}, "so_24333686_24335198_7": {"section_id": 261, "quality": 0.9411764705882353, "length": 16}, "so_24333686_24335198_1": {"section_id": 259, "quality": 1.0, "length": 9}, "so_24333686_24335198_5": {"section_id": 71, "quality": 0.8333333333333334, "length": 5}, "so_24333686_24335198_8": {"section_id": 261, "quality": 0.9411764705882353, "length": 16}, "so_24333686_24333686_0": {"section_id": 239, "quality": 1.0, "length": 13}, "so_24333686_24335198_2": {"section_id": 259, "quality": 1.0, "length": 9}, "so_24333686_24335198_4": {"section_id": 71, "quality": 0.8333333333333334, "length": 5}}}, "24333686": {"CommentCount": "8", "ViewCount": "1947", "PostTypeId": "1", "LastEditorUserId": "1090079", "CreationDate": "2014-06-20T18:40:37.927", "LastActivityDate": "2014-06-20T21:55:00.293", "Title": "Template static definition and explicit specialization instantiation errors in MSVC", "AcceptedAnswerId": "24335198", "LastEditDate": "2014-06-20T21:11:52.760", "Id": "24333686", "Score": "10", "Body": "<p>I'm wondering why the following code runs just fine in gcc</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\ntemplate&lt;typename T&gt;\nstruct F { \n  static T const value;\n};\n\ntemplate&lt;&gt; \nstruct F&lt;int&gt; { // Specialization\n    static int const value; \n}; \n\ntemplate struct F&lt;int&gt;;\n\ntemplate&lt;typename T&gt;\nT const F&lt;T&gt;::value = sizeof(T);\n\ntemplate&lt;&gt;\nint const F&lt;int&gt;::value = 42;\n\nint main() {\n\n    struct F&lt;int&gt; ma;\n    cout &lt;&lt; ma.value;\n\n    return 0;\n}\n</code></pre>\n<p><a href=\"http://ideone.com/wvrurz\">http://ideone.com/wvrurz</a></p>\n<p>while on MSVC 2012 I cannot get it to compile:</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\ntemplate&lt;typename T&gt;\nstruct F {\n  static T const value;\n};\n\ntemplate&lt;&gt; \nstruct F&lt;int&gt; { // Specialization\n    static int const value; \n};\n\n//template struct F&lt;int&gt;; // error C2950: 'F&lt;int&gt;' : cannot explicitly instantiate an explicit specialization\n\ntemplate&lt;typename T&gt;\nT const F&lt;T&gt;::value = sizeof(T);\n\n//template&lt;&gt;\n//int const F&lt;int&gt;::value = 42; // error C2998: 'const int F&lt;int&gt;::value' : cannot be a template definition\n\nint main() {\n\n    struct F&lt;int&gt; ma;\n    cout &lt;&lt; ma.value;\n\n    return 0;\n}\n</code></pre>\n<p>From what I read in n3242 \u00a714.7 5</p>\n<blockquote>\n<p id=\"so_24333686_24333686_0\">both an explicit instantiation and a declaration of an explicit\n  specialization shall not appear in a program unless the explicit\n  instantiation follows a declaration of the explicit specialization.</p>\n</blockquote>\n<p>and I believe this is the case. Am I missing something?</p>\n", "Tags": "<c++><templates><language-lawyer><explicit-specialization><explicit-instantiation>", "OwnerUserId": "1938163", "AnswerCount": "1"}});