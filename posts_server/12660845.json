post_cb({"12660915": {"ParentId": "12660845", "CommentCount": "0", "Body": "<p>I would expect that the functions are non-equal. The standard definitely does <strong>not</strong> require them to be identical although I suspect that it allows them to be identical (I wouldn't quite know where to look for the corresponding clause).</p>\n", "OwnerUserId": "1120273", "PostTypeId": "2", "Id": "12660915", "Score": "0", "CreationDate": "2012-09-30T11:32:05.843", "LastActivityDate": "2012-09-30T11:32:05.843"}, "12660845": {"CommentCount": "3", "ViewCount": "81", "PostTypeId": "1", "LastEditorUserId": "1554020", "CreationDate": "2012-09-30T11:21:35.633", "LastActivityDate": "2012-09-30T11:53:12.807", "Title": "Addresses of template function instantiations over T and T const", "AcceptedAnswerId": "12660897", "LastEditDate": "2012-09-30T11:27:45.587", "Id": "12660845", "Score": "2", "Body": "<p>Is it ever possible that in the following setup</p>\n<pre><code>template &lt;typename T&gt;\ninline void id() {\n    //...\n}\n\ntemplate &lt;typename T&gt;\nbool check() {\n    return &amp;id&lt;T&gt; == &amp;id&lt;T const&gt;;\n}\n</code></pre>\n<p><code>check</code> will return <code>true</code> for some <code>T</code>? Does it depend on what is being done inside <code>id</code>? What does the standard have to say about this?</p>\n", "Tags": "<c++><function-pointers><instantiation><function-templates>", "OwnerUserId": "1554020", "AnswerCount": "2"}, "12660897": {"ParentId": "12660845", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>Sure. Try <code>const int</code> or <code>int&amp;</code> or <code>void()</code>.</p>\n<hr>\n<p>There's a rule that top-level <code>const</code> qualifiers <em>collapse</em> if you get multiple of them through a <code>typedef</code> or a template argument, which means <code>check&lt;int const&gt;()</code> will return <code>true</code>.</p>\n<p>[normative text pending]</p>\n<p>Then there's a rule that ignores top-level <code>const</code> on things it doesn't work on, like references or function types. That means <code>check&lt;int&amp;&gt;</code> and <code>check&lt;int()&gt;</code> will return <code>true</code>.</p>\n<p><code>\u00a78.3.2 [dcl.ref] p1</code></p>\n<blockquote>\n<p id=\"so_12660845_12660897_0\">Cv-qualified references are ill-formed except when the cv-qualifiers are introduced through the use of a typedef (7.1.3) or of a template type argument (14.3), <strong>in which case the cv-qualifiers are ignored</strong>.</p>\n</blockquote>\n<p>and</p>\n<p><code>\u00a74.4 [conv.qual] p3</code></p>\n<blockquote>\n<p id=\"so_12660845_12660897_1\">[ <em>Note:</em> Function types (including those used in pointer to member function types) are never cv-qualified (8.3.5). <em>\u2014end note</em> ]</p>\n</blockquote>\n<p><code>\u00a78.5.3 [dcl.fct] p6</code></p>\n<blockquote>\n<p id=\"so_12660845_12660897_2\">The effect of a <em>cv-qualifier-seq</em> in a function declarator is not the same as adding cv-qualification on top of the function type. <strong>In the latter case, the cv-qualifiers are ignored.</strong></p>\n</blockquote>\n</hr>", "OwnerUserId": "34509", "LastEditorUserId": "500104", "LastEditDate": "2012-09-30T11:53:12.807", "Id": "12660897", "Score": "7", "CreationDate": "2012-09-30T11:29:03.463", "LastActivityDate": "2012-09-30T11:53:12.807"}, "bq_ids": {"n4140": {"so_12660845_12660897_0": {"section_id": 3218, "quality": 0.6666666666666666, "length": 12}, "so_12660845_12660897_2": {"section_id": 3242, "quality": 0.9333333333333333, "length": 14}, "so_12660845_12660897_1": {"section_id": 16, "quality": 0.7142857142857143, "length": 10}}, "n3337": {"so_12660845_12660897_0": {"section_id": 3092, "quality": 0.8888888888888888, "length": 16}, "so_12660845_12660897_2": {"section_id": 3115, "quality": 0.9333333333333333, "length": 14}, "so_12660845_12660897_1": {"section_id": 13, "quality": 0.7142857142857143, "length": 10}}, "n4659": {"so_12660845_12660897_0": {"section_id": 3975, "quality": 0.6666666666666666, "length": 12}, "so_12660845_12660897_2": {"section_id": 3999, "quality": 0.9333333333333333, "length": 14}, "so_12660845_12660897_1": {"section_id": 20, "quality": 0.7142857142857143, "length": 10}}}});