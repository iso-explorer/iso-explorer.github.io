post_cb({"26553062": {"ViewCount": "2230", "Body": "<p>I am trying to pass variable number of arguments to a lambda function. what is the prototype to accept variable number of arguments in lambda functions? should i write a named function instead of lambda?</p>\n<pre><code>std::once_flag flag;\n\ntemplate&lt;typename ...Args&gt;\nvoid gFunc(Args... args)\n{\n}\n\ntemplate&lt;typename ...Args&gt;\nvoid func(Args... args)\n{\n    std::call_once(flag,[](/*accept variable number of arguments*/... args)\n                        {\n                                // more code here\n                                gFunc( args...);\n                        }, \n                        args...\n                        );\n}\n</code></pre>\n<p>the below signatures give error:</p>\n<pre><code>[&amp;](){ }\n[&amp;args](){ }\n[&amp;args...](){ }\n[&amp;,args...](){ }\n[&amp;...args](){ }\n</code></pre>\n", "AcceptedAnswerId": "26553155", "Title": "How to pass variable number of arguments to lambda function", "CreationDate": "2014-10-24T17:21:41.023", "Id": "26553062", "CommentCount": "0", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2014-10-25T05:13:12.887", "LastEditorUserId": "2508038", "LastActivityDate": "2014-10-25T05:13:12.887", "Score": "7", "OwnerUserId": "2508038", "Tags": "<c++><lambda>", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_26553062_26553155_0": {"length": 4, "quality": 0.5714285714285714, "section_id": 83}}, "n3337": {"so_26553062_26553155_0": {"length": 5, "quality": 0.7142857142857143, "section_id": 5751}}, "n4659": {"so_26553062_26553155_0": {"length": 4, "quality": 0.5714285714285714, "section_id": 86}}}, "26554249": {"Id": "26554249", "PostTypeId": "2", "Body": "<p>In C++14 you can do</p>\n<pre><code>auto lambda = [](auto... args) {...};\n</code></pre>\n<p>But in your case I believe simple capture is enough:</p>\n<pre><code>std::call_once(flag, [&amp;] {\n                         gFunc(args...); // will implicitly capture all args\n                     }\n               );\n</code></pre>\n", "LastActivityDate": "2014-10-24T18:41:40.610", "Score": "4", "CreationDate": "2014-10-24T18:41:40.610", "ParentId": "26553062", "CommentCount": "3", "OwnerUserId": "3959454"}, "26553155": {"Id": "26553155", "PostTypeId": "2", "Body": "<p>Try this :</p>\n<pre><code>template&lt;typename ...Args&gt;\nvoid func(Args... args)\n{\n    std::call_once(flag,[&amp;, args...]( )\n                        {   \n                         gFunc( args...);\n                        }, \n                        args...\n                        );\n}\n</code></pre>\n<p>Stolen from <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf\" rel=\"nofollow\">here</a></p>\n<blockquote>\n<p id=\"so_26553062_26553155_0\"><strong>\u00a7 5.1.2</strong> A capture followed by an ellipsis is a pack expansion (14.5.3).</p>\n</blockquote>\n<pre><code>[ Example:\ntemplate&lt;class... Args&gt;\nvoid f(Args... args) {\nauto lm = [&amp;, args...] { return g(args...); };\nlm();\n}\n\u2014end example ]\n</code></pre>\n", "LastActivityDate": "2014-10-24T17:27:51.350", "Score": "2", "CreationDate": "2014-10-24T17:27:51.350", "ParentId": "26553062", "CommentCount": "3", "OwnerUserId": "1870232"}});