post_cb({"bq_ids": {"n4140": {"so_23928080_23928387_1": {"length": 6, "quality": 1.0, "section_id": 438}, "so_23928080_23928387_0": {"length": 16, "quality": 1.0, "section_id": 436}}, "n3337": {"so_23928080_23928387_1": {"length": 6, "quality": 1.0, "section_id": 429}, "so_23928080_23928387_0": {"length": 16, "quality": 1.0, "section_id": 428}}, "n4659": {"so_23928080_23928387_1": {"length": 6, "quality": 1.0, "section_id": 458}, "so_23928080_23928387_0": {"length": 14, "quality": 0.875, "section_id": 455}}}, "23928080": {"ViewCount": "110", "Body": "<p>In c++11 you can do this:</p>\n<pre><code>class Foo\n{\n    public:\n        Foo();\n        bool test = false;\n};\n\nFoo::Foo()\n{\n    // is test guaranteed to be false now? and is it surely not overriden later?\n    this-&gt;test = true;\n}\n</code></pre>\n<p>what I want to know is basically described in comments, I can verify this with my compiler, but is this mentioned in standard? Is it always same on all platforms and all compilers?</p>\n", "AcceptedAnswerId": "23928222", "Title": "c++11 what is first? constructor or default value?", "CreationDate": "2014-05-29T07:29:25.530", "Id": "23928080", "CommentCount": "3", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2014-05-30T10:26:30.607", "LastEditorUserId": "3235496", "LastActivityDate": "2014-05-30T10:26:30.607", "Score": "3", "OwnerUserId": "1514983", "Tags": "<c++11><constructor><initialization>", "AnswerCount": "3"}, "23928387": {"Id": "23928387", "PostTypeId": "2", "Body": "<p>From [<em>class.base.init</em>] <strong>12.6.2 - Initializing bases and members</strong></p>\n<blockquote>\n<p id=\"so_23928080_23928387_0\"><strong>9</strong> If a given non-static data member has both a <em>brace-or-equal-initializer</em> and\n  a <em>mem-initializer</em>, the initialization specified by the mem-initializer is performed,\n  and the non-static data member\u2019s <em>brace-or-equal-initializer</em> is ignored.</p>\n</blockquote>\n<p>Example</p>\n<pre><code>struct A\n{\n  int i = /\u2217 some integer expression with side effects \u2217/ ;\n  A(int arg) : i(arg) { } // ...\n};\n</code></pre>\n<p>the <code>A(int)</code> constructor will simply initialize <code>i</code> to the value of <code>arg</code>, and the side effects in <code>i</code>'s <em>brace-or-equal-initializer</em> will not take place.</p>\n<blockquote>\n<p id=\"so_23928080_23928387_1\"><strong>10</strong> In a non-delegating constructor, initialization proceeds in the following\n  order:</p>\n<ul>\n<li>First, and only for the constructor of the most derived class (1.8),\n  virtual base classes are initialized in the order they appear on a depth-first\n  left-to-right traversal of the directed acyclic graph of base classes, where\n  \u201cleft-to-right\u201d is the order of appearance of the base classes in the derived class\n  <em>base-specifier-list</em>.</li>\n<li>Then, direct base classes are initialized in declaration order as they\n  appear in the <em>base-specifier-list</em> (regardless of the order of the\n  <em>mem-initializers</em>).</li>\n<li>Then, non-static data members are initialized in the order they were declared in\n  the class definition (again regardless of the order of the <em>mem-initializers</em>).</li>\n<li>Finally, the compound-statement of the constructor body is executed.</li>\n</ul>\n</blockquote>\n<p>So</p>\n<pre><code>class Foo\n{\npublic:\n  Foo();\n  bool test = false;\n};\n\nFoo::Foo()\n{\n  // is test guaranteed to be false now? and is it surely not overriden later?\n  this-&gt;test = true;\n}\n</code></pre>\n<p><code>test</code> is guaranteed to be <code>false</code> and it won't be overwritten (<em>\"Finally, the compound-statement of the constructor body is executed\"</em>)</p>\n", "LastEditorUserId": "3235496", "LastActivityDate": "2014-05-29T07:54:22.027", "Score": "2", "CreationDate": "2014-05-29T07:48:48.073", "ParentId": "23928080", "CommentCount": "0", "OwnerUserId": "3235496", "LastEditDate": "2014-05-29T07:54:22.027"}, "23928222": {"Id": "23928222", "PostTypeId": "2", "Body": "<p>is test guaranteed to be false now? Yes.</p>\n<p>is it surely not overriden later? It will not be overriden. The default is set as part of the initializer list at the start of the constructor.</p>\n<p>If test is not included in the initializer list the compiler will put it in with the default. For your constructor the compiler would actually generate code for this:</p>\n<pre><code>Foo::Foo()\n    : test(false)\n{\n    // is test guaranteed to be false now?\n    this-&gt;test = true;\n    // is it surely not overriden later?\n}\n</code></pre>\n<p>With this constructor test would first be initialized to false and then later in the body set to true.</p>\n<p>If you had written:</p>\n<pre><code>Foo::Foo()\n    : test(true)\n{\n}\n</code></pre>\n<p>The test would be in the initialiser list already and the compiler won't put it there and test would be directly initialized to true.</p>\n", "LastActivityDate": "2014-05-29T07:38:06.180", "CommentCount": "2", "CreationDate": "2014-05-29T07:38:06.180", "ParentId": "23928080", "Score": "2", "OwnerUserId": "568635"}, "23928277": {"Id": "23928277", "PostTypeId": "2", "Body": "<p>In C++11, there are three places a non-static data member can be initialized:</p>\n<ul>\n<li>in the body of the class (a <em>brace-or-equal-initializer</em>)</li>\n<li>in the list of members before the constructor body (a <em>mem-initializer</em>)</li>\n<li>within the constructor body.</li>\n</ul>\n<p>If a non-static data member has both a <em>brace-or-equal-initializer</em> and a <em>mem-initializer</em>, then the <em>mem-initializer</em> overrides the <em>brace-or-equal-initializer</em>; this is specified in 12.6.2.p9.</p>\n<p>In either case, the initialization of the non-static data member occurs before the body of the constructor is entered, whereupon the constructor can alter the value of the member.</p>\n", "LastActivityDate": "2014-05-29T07:42:20.517", "CommentCount": "0", "CreationDate": "2014-05-29T07:42:20.517", "ParentId": "23928080", "Score": "2", "OwnerUserId": "567292"}});