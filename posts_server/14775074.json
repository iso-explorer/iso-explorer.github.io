post_cb({"14775182": {"ParentId": "14775074", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2013-02-08T14:51:48.817", "Score": "5", "LastEditorUserId": "452307", "LastEditDate": "2013-02-08T15:08:08.910", "Id": "14775182", "OwnerUserId": "452307", "Body": "<p>Member functions defined within class definition are implicitly <code>inline</code>(<em>C++03 7.1.2.3</em>).<br>\nWhether the function body actually gets inlined at point of calling is immaterial. But <code>inline</code> allows you to have multiple definitions of a function as long as all the definitions are same(<em>which is disallowed by One definition rule</em>)(<em>C++03 7.1.2.2</em>). The standard mandates that the linker should be able to link to (one or)many of these definitions.(<em>C++03 7.1.2.4</em>).      </br></p>\n<blockquote>\n<p id=\"so_14775074_14775182_0\"><strong>How does the linker do this?</strong> </p>\n</blockquote>\n<p>The standard provisions for this by:    </p>\n<ul>\n<li>It mandates that the function definition should be present in each translation unit. All the linker has to do is link to the definition found in that translation unit. </li>\n<li>It mandates that all definitions of this function should be exactly same, this removes any ambiguity of linking to a particular definition, if different definitions were to exist.</li>\n</ul>\n<hr>\n<p><strong>C++03 7.1.2 Function specifiers:</strong><br>\n<strong>Para 2:</strong></br></p>\n<blockquote>\n<p id=\"so_14775074_14775182_1\">A function declaration (8.3.5, 9.3, 11.4) with an inline specifier declares an inline function. The inline specifier indicates to the implementation that inline substitution of the function body at the point of call is to be preferred to the usual function call mechanism. An implementation is not required to perform this inline substitution at the point of call; however, even if this inline substitution is omitted, the other rules for inline functions defined by 7.1.2 shall still be respected.</p>\n</blockquote>\n<p><strong>Para 3:</strong> </p>\n<blockquote>\n<p id=\"so_14775074_14775182_2\">A function defined within a class definition is an inline function. The inline specifier shall not appear on a block scope function declaration</p>\n</blockquote>\n<p><strong>Para 4:</strong> </p>\n<blockquote>\n<p id=\"so_14775074_14775182_3\">An inline function shall be defined in every translation unit in which it is used and shall have exactly the same definition in every case (3.2).</p>\n</blockquote>\n</hr>", "LastActivityDate": "2013-02-08T15:08:08.910"}, "14775074": {"CommentCount": "10", "ViewCount": "357", "CreationDate": "2013-02-08T14:46:49.937", "LastActivityDate": "2013-02-08T15:08:08.910", "Title": "How does linker deal with virtual functions defined in multiple headers?", "AcceptedAnswerId": "14775182", "PostTypeId": "1", "Id": "14775074", "Score": "0", "Body": "<p>Suppose I have</p>\n<pre><code>Base.h\nclass Base\n{\n    virtual void foo() {...}\n};\n\n\nDerived1.h\nclass Derived1 : public Base\n{\n    virtual void foo() {...}\n};\n\n\nDerived2.h\nclass Derived2 : public Base\n{\n    virtual void foo() {...}\n};\n</code></pre>\n<p>Header <code>Derived1.h</code> is included in multiple source files and <code>Derived1</code> class is also used through <code>Base</code> interface. Since <code>foo</code> is <code>virtual</code> and is used <code>polymorphic</code> it can not be inlined. So it will be compiled in multiple <code>obj</code> files. How does linker then resolve this situation?</p>\n", "Tags": "<c++><linker><polymorphism>", "OwnerUserId": "444088", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_14775074_14775182_3": {"section_id": 5404, "quality": 1.0, "length": 12}, "so_14775074_14775182_2": {"section_id": 5403, "quality": 0.9333333333333333, "length": 14}, "so_14775074_14775182_1": {"section_id": 5402, "quality": 0.8888888888888888, "length": 40}}, "n3337": {"so_14775074_14775182_3": {"section_id": 5199, "quality": 1.0, "length": 12}, "so_14775074_14775182_2": {"section_id": 5198, "quality": 0.9333333333333333, "length": 14}, "so_14775074_14775182_1": {"section_id": 5197, "quality": 0.8888888888888888, "length": 40}}, "n4659": {"so_14775074_14775182_1": {"section_id": 6849, "quality": 0.8666666666666667, "length": 39}, "so_14775074_14775182_2": {"section_id": 7364, "quality": 0.5333333333333333, "length": 8}, "so_14775074_14775182_3": {"section_id": 6853, "quality": 1.0, "length": 12}}}});