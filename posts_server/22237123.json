post_cb({"bq_ids": {"n4140": {"so_22237123_22237155_1": {"length": 21, "quality": 1.0, "section_id": 6142}, "so_22237123_22237155_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 5986}}, "n3337": {"so_22237123_22237155_1": {"length": 21, "quality": 1.0, "section_id": 5906}, "so_22237123_22237155_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 5754}}, "n4659": {"so_22237123_22237155_1": {"length": 11, "quality": 0.5238095238095238, "section_id": 7638}, "so_22237123_22237155_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 7486}}}, "22237186": {"Id": "22237186", "PostTypeId": "2", "Body": "<p><code>str[-1]</code> is strictly equivalent to <code>*(str-1)</code>, the value you get is probably whatever is in memory before the address pointed to by <code>str</code>, even though it is technically undefined behaviour.</p>\n", "LastEditorUserId": "1710392", "LastActivityDate": "2014-03-06T22:21:52.850", "Score": "1", "CreationDate": "2014-03-06T22:11:30.903", "ParentId": "22237123", "CommentCount": "0", "OwnerUserId": "1710392", "LastEditDate": "2014-03-06T22:21:52.850"}, "22237150": {"Id": "22237150", "PostTypeId": "2", "Body": "<p>The behavior is strictly undefined.</p>\n", "LastActivityDate": "2014-03-06T22:10:07.310", "CommentCount": "1", "CreationDate": "2014-03-06T22:10:07.310", "ParentId": "22237123", "Score": "3", "OwnerUserId": "93558"}, "22237155": {"Id": "22237155", "PostTypeId": "2", "Body": "<p>Array indexing is just syntatic sugar for pointer arithmetic, from the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3485.pdf\" rel=\"nofollow\">draft C++ standard</a> section <code>5.2.1</code> <em>Subscripting</em>:</p>\n<blockquote>\n<p id=\"so_22237123_22237155_0\">[...]The expression E1[E2] is identical (by definition) to *((E1)+(E2))[...]</p>\n</blockquote>\n<p>Array indexes start at <code>0</code> in <em>C++</em> so what you have here is <a href=\"https://en.wikipedia.org/wiki/Undefined_behavior\" rel=\"nofollow\">undefined behavior</a> since you are accessing outside the array bounds as per section <code>5.7</code> <em>Additive operators</em> paragraph <em>5</em>:</p>\n<blockquote>\n<p id=\"so_22237123_22237155_1\">[...]If both the pointer operand and the result point to elements of the same array object, or one past the last element of the array object, the evaluation shall not produce an overflow; otherwise, the behavior is undefined.</p>\n</blockquote>\n", "LastEditorUserId": "1708801", "LastActivityDate": "2014-03-07T04:09:24.183", "Score": "2", "CreationDate": "2014-03-06T22:10:13.557", "ParentId": "22237123", "CommentCount": "0", "OwnerUserId": "1708801", "LastEditDate": "2014-03-07T04:09:24.183"}, "22237123": {"ViewCount": "91", "Body": "<p>I can't understand how I can access the -1 position of the <code>char</code> pointer here.\nWhen I run this code in Turbo C,it shows output 'f', but in modern compilers it just shows space.</p>\n<pre><code>#include&lt;iostream&gt;\nusing namespace std;\n\nvoid main()\n{\n    char *str=\"hello\";\n    cout&lt;&lt;str[-1]&lt;&lt;endl;\n\n    system(\"pause\");\n}\n</code></pre>\n", "AcceptedAnswerId": "22237155", "Title": "I am not able to understand indexing of char pointer operation in c++", "CreationDate": "2014-03-06T22:08:40.787", "Id": "22237123", "CommentCount": "1", "LastEditDate": "2014-03-06T22:16:35.717", "PostTypeId": "1", "LastEditorUserId": "2805305", "LastActivityDate": "2014-03-07T04:09:24.183", "Score": "2", "OwnerUserId": "2957956", "Tags": "<c++><pointers><char>", "AnswerCount": "3"}});