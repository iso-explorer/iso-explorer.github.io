post_cb({"33258249": {"ParentId": "33256589", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>I don't know if the following will be enlightening but I found <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#941\" rel=\"noreferrer\">defect report 941: Explicit specialization of deleted function template </a> with status <em>C++11</em>  that states the following <strong>(Emphasis Mine)</strong>:</p>\n<blockquote>\n<p id=\"so_33256589_33258249_0\">According to 14.7.3 [temp.expl.spec] paragraph 1, only non-deleted\n  function templates may be explicitly specialized. <strong>There doesn't\n  appear to be a compelling need for this restriction, however, and it\n  could be useful to forbid use of implicitly-instantiated\n  specializations while still allowing use of explicitly-specialized\n  versions.</strong></p>\n<p id=\"so_33256589_33258249_1\">Proposed resolution (February, 2010):</p>\n<p id=\"so_33256589_33258249_2\">Change 14.7.3 [temp.expl.spec] paragraph 1 as follows:</p>\n<p id=\"so_33256589_33258249_3\">An explicit specialization of any of the following:</p>\n<p id=\"so_33256589_33258249_4\"><del>non-deleted</del> function template</p>\n<p id=\"so_33256589_33258249_5\">class template</p>\n<p id=\"so_33256589_33258249_6\"><del>non-deleted</del> member function of a class template</p>\n<p id=\"so_33256589_33258249_7\">static data member of a class template</p>\n<p id=\"so_33256589_33258249_8\">member class of a class template</p>\n<p id=\"so_33256589_33258249_9\">member class template of a class or class template</p>\n<p id=\"so_33256589_33258249_10\"><del>non-deleted</del> member function template of a class or class\n  template</p>\n<p id=\"so_33256589_33258249_11\">can be declared...</p>\n</blockquote>\n<p>Now the current state of the draft standard <a href=\"http://open-std.org/JTC1/SC22/WG21/docs/papers/2015/n4527.pdf\" rel=\"noreferrer\">N4527</a> is <em>14.7.3 Explicit specialization [temp.expl.spec]:</em></p>\n<blockquote>\n<p id=\"so_33256589_33258249_12\">1 An explicit specialization of any of the following:</p>\n<p id=\"so_33256589_33258249_13\">(1.1) \u2014 function template</p>\n<p id=\"so_33256589_33258249_14\">(1.2) \u2014 class template</p>\n<p id=\"so_33256589_33258249_15\">(1.3) \u2014 variable template</p>\n<p id=\"so_33256589_33258249_16\">(1.4) \u2014 member function of a class template</p>\n<p id=\"so_33256589_33258249_17\">(1.5) \u2014 static data member of a class template</p>\n<p id=\"so_33256589_33258249_18\">(1.6) \u2014 member class of a class template</p>\n<p id=\"so_33256589_33258249_19\">(1.7) \u2014 member enumeration of a class template</p>\n<p id=\"so_33256589_33258249_20\">(1.8) \u2014 member class template of a class or class template</p>\n<p id=\"so_33256589_33258249_21\">(1.9) \u2014 member function template of a class or class template</p>\n<p id=\"so_33256589_33258249_22\">...</p>\n</blockquote>\n<p>So I guess:</p>\n<pre><code>template&lt;typename T&gt;\nvoid foo() = delete;\n\ntemplate&lt;&gt;\nvoid foo&lt;int&gt;(){}\n\nint main() {\n    foo&lt;int&gt;();\n    return 0;\n}\n</code></pre>\n<p>Is C++11 standard compatible code and should be accepted.</p>\n", "OwnerUserId": "2352671", "LastEditorUserId": "1708801", "LastEditDate": "2015-10-21T11:56:59.433", "Id": "33258249", "Score": "9", "CreationDate": "2015-10-21T11:33:42.183", "LastActivityDate": "2015-10-21T11:56:59.433"}, "bq_ids": {"n4140": {"so_33256589_33258249_21": {"section_id": 48, "quality": 1.0, "length": 6}, "so_33256589_33258249_20": {"section_id": 48, "quality": 1.0, "length": 6}, "so_33256589_33258249_6": {"section_id": 48, "quality": 0.8, "length": 4}, "so_33256589_33258249_18": {"section_id": 48, "quality": 1.0, "length": 4}, "so_33256589_33258249_16": {"section_id": 48, "quality": 1.0, "length": 4}, "so_33256589_33258249_19": {"section_id": 48, "quality": 1.0, "length": 4}, "so_33256589_33258249_7": {"section_id": 48, "quality": 1.0, "length": 5}, "so_33256589_33258249_8": {"section_id": 48, "quality": 1.0, "length": 4}, "so_33256589_33258249_10": {"section_id": 48, "quality": 0.8571428571428571, "length": 6}, "so_33256589_33258249_9": {"section_id": 48, "quality": 1.0, "length": 6}, "so_33256589_33258249_17": {"section_id": 48, "quality": 1.0, "length": 5}}, "n3337": {"so_33256589_33258249_21": {"section_id": 43, "quality": 1.0, "length": 6}, "so_33256589_33258249_20": {"section_id": 43, "quality": 1.0, "length": 6}, "so_33256589_33258249_6": {"section_id": 43, "quality": 0.8, "length": 4}, "so_33256589_33258249_8": {"section_id": 43, "quality": 1.0, "length": 4}, "so_33256589_33258249_16": {"section_id": 43, "quality": 1.0, "length": 4}, "so_33256589_33258249_19": {"section_id": 43, "quality": 1.0, "length": 4}, "so_33256589_33258249_7": {"section_id": 43, "quality": 1.0, "length": 5}, "so_33256589_33258249_18": {"section_id": 43, "quality": 1.0, "length": 4}, "so_33256589_33258249_10": {"section_id": 43, "quality": 0.8571428571428571, "length": 6}, "so_33256589_33258249_9": {"section_id": 43, "quality": 1.0, "length": 6}, "so_33256589_33258249_17": {"section_id": 43, "quality": 1.0, "length": 5}}, "n4659": {"so_33256589_33258249_20": {"section_id": 49, "quality": 1.0, "length": 6}, "so_33256589_33258249_6": {"section_id": 49, "quality": 0.8, "length": 4}, "so_33256589_33258249_8": {"section_id": 49, "quality": 1.0, "length": 4}, "so_33256589_33258249_16": {"section_id": 49, "quality": 1.0, "length": 4}, "so_33256589_33258249_18": {"section_id": 49, "quality": 1.0, "length": 4}, "so_33256589_33258249_10": {"section_id": 49, "quality": 0.8571428571428571, "length": 6}, "so_33256589_33258249_7": {"section_id": 49, "quality": 1.0, "length": 5}, "so_33256589_33258249_21": {"section_id": 49, "quality": 1.0, "length": 6}, "so_33256589_33258249_19": {"section_id": 49, "quality": 1.0, "length": 4}, "so_33256589_33258249_9": {"section_id": 49, "quality": 1.0, "length": 6}, "so_33256589_33258249_17": {"section_id": 49, "quality": 1.0, "length": 5}}}, "33256589": {"CommentCount": "3", "AcceptedAnswerId": "33258249", "PostTypeId": "1", "LastEditorUserId": "214671", "CreationDate": "2015-10-21T10:12:58.353", "LastActivityDate": "2015-10-21T11:56:59.433", "LastEditDate": "2015-10-21T10:39:30.570", "ViewCount": "826", "FavoriteCount": "2", "Title": "Specialized template function with deleted \"general\" case fails to compile with g++ <=4.8.0 and clang++", "Id": "33256589", "Score": "15", "Body": "<p>Compiling a project with an older version of g++ (4.8.0, MinGW) I found that this code fails to compile:</p>\n<pre><code>template&lt;typename T&gt;\nvoid foo() = delete;\n\ntemplate&lt;&gt;\nvoid foo&lt;int&gt;(){}\n\nint main() {\n    foo&lt;int&gt;();\n    return 0;\n}\n</code></pre>\n<p>It seems that g++ doesn't even try to look for explicit specializations if it sees that the base case is deleted.</p>\n<pre><code>mitalia@mitalia:~/scratch$ /opt/mingw32-dw2/bin/i686-w64-mingw32-g++ -std=c++11 buggy_deleted_template.cpp \nbuggy_deleted_template.cpp: In function 'int main()':\nbuggy_deleted_template.cpp:8:14: error: use of deleted function 'void foo() [with T = int]'\n     foo&lt;int&gt;();\n              ^\nbuggy_deleted_template.cpp:5:6: error: declared here\n void foo&lt;int&gt;(){}\n      ^\nmitalia@mitalia:~/scratch$ /opt/mingw32-dw2/bin/i686-w64-mingw32-g++ --version \ni686-w64-mingw32-g++ (rubenvb-4.8.0) 4.8.0\nCopyright (C) 2013 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n</code></pre>\n<p>Instead, g++ 4.8.4 and 5.2 (on Linux) do not complain. Is this a bug in the older version of the compiler or a gray area in the standard?</p>\n<hr>\n<p><strong><em>Addendum</em></strong></p>\n<p>clang 3.4.1 too seems not to like it:</p>\n<pre><code>mitalia@mitalia:~/scratch$ clang++ -std=c++11 buggy_deleted_template.cpp                                                             \nbuggy_deleted_template.cpp:5:6: error: redefinition of 'foo'                                                                         \nvoid foo&lt;int&gt;(){}\n     ^\nbuggy_deleted_template.cpp:5:6: note: previous definition is here\nbuggy_deleted_template.cpp:8:5: error: no matching function for call to 'foo'\n    foo&lt;int&gt;();\n    ^~~~~~~~\nbuggy_deleted_template.cpp:2:6: note: candidate template ignored: substitution failure [with T = int]\nvoid foo() = delete;\n     ^\n2 errors generated.\nmitalia@mitalia:~/scratch$ clang++ --version\nUbuntu clang version 3.4-1ubuntu3 (tags/RELEASE_34/final) (based on LLVM 3.4)\nTarget: x86_64-pc-linux-gnu\nThread model: posix\n</code></pre>\n<p>(and <em>@Baum mit Augen</em> in the comments reports that it still doesn't work in 3.7)</p>\n</hr>", "Tags": "<c++><templates><c++11><template-specialization><deleted-functions>", "OwnerUserId": "214671", "AnswerCount": "1"}});