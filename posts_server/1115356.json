post_cb({"bq_ids": {"n4140": {"so_1115356_1115415_1": {"length": 7, "quality": 1.0, "section_id": 705}}, "n3337": {"so_1115356_1115415_1": {"length": 7, "quality": 1.0, "section_id": 695}}, "n4659": {"so_1115356_1115415_1": {"length": 7, "quality": 1.0, "section_id": 734}}}, "1115365": {"Id": "1115365", "PostTypeId": "2", "Body": "<p>All of the implementations I've seen are O(1).</p>\n<p>The documentation you're looking for is the C++ standard -- I believe C++03 is the latest one at present. It isn't available online or in man format, it's sold commercially. There's a list of the places to find it, and recent prices, <a href=\"https://stackoverflow.com/questions/81656/where-do-i-find-the-current-x-standard/83763#83763\">here</a>.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2009-07-12T05:30:04.883", "Score": "5", "CreationDate": "2009-07-12T05:14:09.130", "ParentId": "1115356", "CommentCount": "0", "OwnerUserId": "12193", "LastEditDate": "2017-05-23T11:57:56.917"}, "1115415": {"Id": "1115415", "PostTypeId": "2", "Body": "<p>At present, time complexity of <code>size()</code> for <em>all</em> STL containers is underspecified. There's an <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#632\" rel=\"nofollow noreferrer\">open C++ defect report</a> for that.</p>\n<p>The present ISO C++ standard says that STL containers <em>should</em> have <code>size()</code> of constant complexity:</p>\n<blockquote>\n<h3>21.3[lib.basic.string]/2</h3>\n<p id=\"so_1115356_1115415_0\">The class template basic_string conforms to the requirements of a Sequence, as specified in (23.1.1). Additionally, because the iterators supported by basic_string are random access iterators (24.1.5), basic_string conforms to the the requirements of a Reversible Container, as specified in (23.1).</p>\n<h3>23.1[lib.container.requirements]/5</h3>\n<ul>\n<li>Expression: <code>a.size()</code></li>\n<li>Complexity: (Note A)</li>\n</ul>\n<p id=\"so_1115356_1115415_1\">Those entries marked \u2018\u2018(Note A)\u2019\u2019 <strong>should have constant complexity</strong></p>\n</blockquote>\n<p>However, \"should\" is not a binding requirement in the Standard parlance; indeed, the above applies to <code>std::list</code> as well, but in practice some implementations (notably g++) have O(N) <code>std::list::size()</code>.</p>\n<p>The only thing that can be guaranteed is that <code>(end() - begin())</code> for a string is (possibly amortized) O(1). This is because string iterators are guaranteed to be random-access, and random-access iterators are guaranteed to have constant time <code>operator-</code>.</p>\n<p>As a more practical issue, for all existing C++ implementations out there, the following holds:</p>\n<ul>\n<li><code>std::string::size()</code> is O(1)</li>\n<li><code>std::vector::size()</code> is O(1)</li>\n</ul>\n<p>They are fairly obvious, as both strings and vectors are most efficiently implemented as contiguous arrays with separately stored size: contiguous because it gives fastest element access while satisfying all other complexity requirements, and storing size is because Container requirements demand that <code>end()</code> be constant-time.</p>\n", "LastActivityDate": "2009-07-12T06:28:44.720", "CommentCount": "4", "CreationDate": "2009-07-12T06:28:44.720", "ParentId": "1115356", "Score": "5", "OwnerUserId": "111335"}, "1115356": {"ViewCount": "549", "Body": "<p>I am fairly new to C++, having much more C experience.</p>\n<p>I am writing a program that will use the string class, and began to wonder about the efficiency of the \"length()\" method.</p>\n<p>I realized though that I didn't have a good answer to this question, and so was wondering if the answer to this and similar questions exist somewhere. While I am more than capable of determining the runtime of my own code, I'm at a bit of a loss when it comes to provided code, and so I find I can't accurately judge the efficiency of my programs.</p>\n<p>Is there c++ documentation (online, or in \"man\" format) that includes information on the runtime of provided code?</p>\n<p>Edit: I'm interested in this in general, not just string::length.</p>\n", "AcceptedAnswerId": "1115415", "Title": "Efficiency of c++ built ins", "CreationDate": "2009-07-12T05:04:39.537", "Id": "1115356", "CommentCount": "2", "LastEditDate": "2009-07-12T05:24:20.700", "PostTypeId": "1", "LastEditorUserId": "119046", "LastActivityDate": "2009-07-12T06:28:44.720", "Score": "5", "OwnerUserId": "119046", "Tags": "<c++><documentation><performance>", "AnswerCount": "2"}});