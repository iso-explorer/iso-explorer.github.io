post_cb({"41243516": {"CommentCount": "5", "ViewCount": "140", "ClosedDate": "2016-12-20T13:43:15.110", "CreationDate": "2016-12-20T13:29:12.273", "LastActivityDate": "2016-12-20T13:39:15.267", "Title": "Neither clang nor g++ compile the snippet below. Why?", "PostTypeId": "1", "Id": "41243516", "Score": "13", "Body": "<p>Neither <code>clang</code> nor <code>g++</code> compile <a href=\"https://godbolt.org/g/3ttxIV\" rel=\"nofollow noreferrer\">this snippet</a>:</p>\n<pre><code>struct A{\nprotected:    \n    struct B{};\n};\n\nstruct D: A::B, A{};\n</code></pre>\n<p>According to <a href=\"http://eel.is/c++draft/class.access#7\" rel=\"nofollow noreferrer\">[class.access]/7</a>, we have:</p>\n<blockquote>\n<p id=\"so_41243516_41243516_0\">Similarly, the use of A::B as a base-specifier is well-formed because\n  D is derived from A, so checking of base-specifiers must be deferred\n  until the entire base-specifier-list has been seen.</p>\n</blockquote>\n<p>The example and the sentence above are part of [class.access]/7, at least since C++11.</p>\n", "Tags": "<c++><language-lawyer><c++1z><member-access>", "OwnerUserId": "4463557", "AnswerCount": "0"}, "bq_ids": {"n4140": {"so_41243516_41243516_0": {"section_id": 6670, "quality": 1.0, "length": 15}}, "n3337": {"so_41243516_41243516_0": {"section_id": 6425, "quality": 1.0, "length": 15}}, "n4659": {"so_41243516_41243516_0": {"section_id": 8145, "quality": 1.0, "length": 15}}}});