post_cb({"21154843": {"ParentId": "21150067", "CommentCount": "0", "Body": "<p>The first is the copy initialization, while the second is list initialization. </p>\n<p>But, usually copy initialization is less used. Because, if you're doing it by passing objects of user defined types, it just causes bitcopy &amp; hence may not produce intended results if the user defined class uses pointers.</p>\n", "OwnerUserId": "3124589", "PostTypeId": "2", "Id": "21154843", "Score": "1", "CreationDate": "2014-01-16T06:34:20.410", "LastActivityDate": "2014-01-16T06:34:20.410"}, "bq_ids": {"n4140": {"so_21150067_21169201_2": {"section_id": 3329, "quality": 1.0, "length": 4}, "so_21150067_21169201_5": {"section_id": 3329, "quality": 1.0, "length": 28}, "so_21150067_21169201_4": {"section_id": 3329, "quality": 1.0, "length": 30}, "so_21150067_21169201_0": {"section_id": 3293, "quality": 0.9473684210526315, "length": 18}, "so_21150067_21169201_3": {"section_id": 3329, "quality": 1.0, "length": 24}}, "n3337": {"so_21150067_21169201_2": {"section_id": 3199, "quality": 1.0, "length": 4}, "so_21150067_21169201_5": {"section_id": 3199, "quality": 0.8928571428571429, "length": 25}, "so_21150067_21169201_4": {"section_id": 3199, "quality": 1.0, "length": 30}, "so_21150067_21169201_0": {"section_id": 3163, "quality": 0.9473684210526315, "length": 18}, "so_21150067_21169201_3": {"section_id": 3199, "quality": 1.0, "length": 24}}, "n4659": {"so_21150067_21169201_5": {"section_id": 4095, "quality": 1.0, "length": 28}, "so_21150067_21169201_2": {"section_id": 37, "quality": 1.0, "length": 4}, "so_21150067_21169201_4": {"section_id": 4095, "quality": 1.0, "length": 30}, "so_21150067_21169201_3": {"section_id": 4095, "quality": 1.0, "length": 24}}}, "21169201": {"ParentId": "21150067", "CommentCount": "9", "Body": "<h3>Short version</h3>\n<p>Initialization via <code>{..}</code> is list-initialization, which prohibits narrowing conversions. For example, if <code>LLONG_MAX</code> is the maximum value of an <code>long long int</code>, and your <code>int</code> cannot represent that:</p>\n<pre><code>int x = LLONG_MAX;  // probably accepted with a warning\nint x {LLONG_MAX};  // error\n</code></pre>\n<p>Similarly:</p>\n<pre><code>long long y = /*something*/;\n\nint x = y;  // accepted, maybe with a warning\nint x {y};  // error\n</code></pre>\n<hr>\n<h3>Long version</h3>\n<p>An initialization of the form</p>\n<pre><code>T x = a;\n</code></pre>\n<p>is <em>copy-initialization</em>; an initialization of either form</p>\n<pre><code>T x(a);\nT x{a};\n</code></pre>\n<p>is <em>direct-initialization</em>, [dcl.init]/15-16.</p>\n<p>[dcl.init]/14 then says:</p>\n<blockquote>\n<p id=\"so_21150067_21169201_0\">The form of initialization (using parentheses or <code>=</code>) is generally insignificant, but does matter when the initializer or the entity being initialized has a class type; see below.</p>\n</blockquote>\n<p>So for non-class types, the <em>form</em> of the initialization doesn't matter. However, there's a difference between these two direct-initializations:</p>\n<pre><code>T x(a);  // 1\nT x{a};  // 2\n</code></pre>\n<p>and similarly, between these two copy-initializations:</p>\n<pre><code>T x = a;    // 1\nT x = {a};  // 2\n</code></pre>\n<p>Namely, the ones with <code>{..}</code> use list-initialization. The <code>{..}</code> is called a <em>braced-init-list</em>.</p>\n<p>So, when you compare <code>T x = a;</code> to <code>T x {a};</code>, there are <em>two</em> differences: copy- vs. direct-initialization, and \"non-list-\" vs. list-initialization. As already mentioned by others and in the quote above, for non-class types <code>T</code>, there's no difference between copy- and direct-init. However, there's a difference between list-init and no list-init. That is, we could as well compare</p>\n<pre><code>int x (a);\nint x {a};\n</code></pre>\n<p>List-initialization in this case prohibits narrowing conversions. Narrowing conversions are defined in [dcl.init.list]/7 as:</p>\n<blockquote>\n<p id=\"so_21150067_21169201_1\">A narrowing conversion is an implicit conversion</p>\n<ul>\n<li><p id=\"so_21150067_21169201_2\">from a floating-point type to an integer type, or</p></li>\n<li><p id=\"so_21150067_21169201_3\">from <code>long double</code> to <code>double</code> or <code>float</code>, or from <code>double</code> to <code>float</code>, except where the source is a constant expression and the actual value after conversion is within the range of values that can be represented\n  (even if it cannot be represented exactly), or</p></li>\n<li><p id=\"so_21150067_21169201_4\">from an integer type or unscoped enumeration type to a floating-point type, except where the source\n  is a constant expression and the actual value after conversion will fit into the target type and will\n  produce the original value when converted back to the original type, or</p></li>\n<li><p id=\"so_21150067_21169201_5\">from an integer type or unscoped enumeration type to an integer type that cannot represent all the\n  values of the original type, except where the source is a constant expression whose value after integral\n  promotions will fit into the target type.</p></li>\n</ul>\n</blockquote>\n</hr>", "OwnerUserId": "420683", "PostTypeId": "2", "Id": "21169201", "Score": "32", "CreationDate": "2014-01-16T17:50:28.917", "LastActivityDate": "2014-01-16T17:50:28.917"}, "21150067": {"CommentCount": "2", "CreationDate": "2014-01-15T22:58:27.180", "PostTypeId": "1", "AcceptedAnswerId": "21169201", "LastEditorUserId": "261217", "LastActivityDate": "2014-01-16T17:50:28.917", "LastEditDate": "2014-01-16T07:39:00.417", "ViewCount": "5945", "FavoriteCount": "9", "Title": "Initialization difference with or without Curly braces in C++11", "Id": "21150067", "Score": "23", "Body": "<p>We can initialize the variable in two ways in C++11</p>\n<p><strong>One:</strong></p>\n<pre><code>int abc = 7;\n</code></pre>\n<p><strong>Two:</strong></p>\n<pre><code>int abc {7};\n</code></pre>\n<p>What is the difference between these two methods?</p>\n<p>How compiler treats them differently or the way these codes are executed?</p>\n", "Tags": "<c++11><initialization><initializer-list>", "OwnerUserId": "1421109", "AnswerCount": "2"}});