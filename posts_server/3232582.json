post_cb({"bq_ids": {"n4140": {"so_3232582_3233045_2": {"length": 6, "quality": 0.8571428571428571, "section_id": 3321}, "so_3232582_3233045_3": {"length": 25, "quality": 0.9259259259259259, "section_id": 7234}, "so_3232582_3233045_0": {"length": 8, "quality": 0.8888888888888888, "section_id": 3321}}, "n3337": {"so_3232582_3233045_2": {"length": 6, "quality": 0.8571428571428571, "section_id": 3191}, "so_3232582_3233045_3": {"length": 25, "quality": 0.9259259259259259, "section_id": 6978}, "so_3232582_3233045_0": {"length": 8, "quality": 0.8888888888888888, "section_id": 3191}}, "n4659": {"so_3232582_3233045_2": {"length": 7, "quality": 1.0, "section_id": 4087}, "so_3232582_3233045_0": {"length": 8, "quality": 0.8888888888888888, "section_id": 4087}}}, "3232905": {"Id": "3232905", "PostTypeId": "2", "Body": "<p>After having used the swap-with-temporary idiom enough times, with lines like</p>\n<pre><code>std::vector&lt;int&gt;().swap(v); // clear and minimize capacity\n</code></pre>\n<p>or</p>\n<pre><code>std::vector&lt;int&gt;(v).swap(v); // shrink to fit\n</code></pre>\n<p>this does not seem so out of place. It's <em>normal</em> to call swap as a member function of a temporary object. Of course, it's not so idiomatic to use swap to fill in a default-constructed string instead of using a copy constructor, as already mentioned.</p>\n", "LastActivityDate": "2010-07-12T22:53:02.940", "CommentCount": "1", "CreationDate": "2010-07-12T22:53:02.940", "ParentId": "3232582", "Score": "2", "OwnerUserId": "273767"}, "3233045": {"Id": "3233045", "PostTypeId": "2", "Body": "<p>The reason that you cannot pass the temporary as argument to <code>swap</code> is that the argument is passed by non-const reference. And temporaries can only be bound by const-references. This is spread over \u00a78.5.3, with the appropriate being in paragraph 5, second bullet:</p>\n<blockquote>\n<p id=\"so_3232582_3233045_0\">\u00a78.5.3 A reference to type \u201ccv1 T1\u201d is initialized by an expression of type \u201ccv2 T2\u201d as follows:</p>\n<ul>\n<li><p id=\"so_3232582_3233045_1\">[bullet one, does not apply here: binding to non-const ref ]</p></li>\n<li><p id=\"so_3232582_3233045_2\">Otherwise, the reference shall be to a non-volatile const type (i.e., cv1 shall be const).</p></li>\n</ul>\n</blockquote>\n<p>The reason why writing the call in the opposite direction works is that the standard allows to call mutating member functions on temporary objects.</p>\n<blockquote>\n<p id=\"so_3232582_3233045_3\">\u00a73.10/10 An lvalue for an object is necessary in order to modify the object except that an rvalue of class type can also be used to modify its referent under certain circumstances. [Example: a member function called for an object (9.3) can modify the object. ]</p>\n</blockquote>\n<p>The line of reasoning that you request for the future is that, while you can modify a temporary through it's own functions, you cannot pass it to a function or method that could modify it (pass by non-const reference)</p>\n", "LastActivityDate": "2010-07-12T23:24:50.323", "CommentCount": "0", "CreationDate": "2010-07-12T23:24:50.323", "ParentId": "3232582", "Score": "1", "OwnerUserId": "36565"}, "3232582": {"ViewCount": "1525", "Body": "<p>The following segment demonstrates my issue: (compilation error on GCC)</p>\n<pre><code>stringstream ss;\nstring s;\nss &lt;&lt; \"Hello\";\n\n// This fails:\n// s.swap(ss.str());\n\n// This works:\nss.str().swap(s);\n</code></pre>\n<p>My error:</p>\n<pre><code>constSwap.cc:14: error: no matching function for call to 'std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::swap(std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)'\nbasic_string.tcc:496: note: candidates are: void std::basic_string&lt;_CharT, _Traits, _Alloc&gt;::swap(std::basic_string&lt;_CharT, _Traits, _Alloc&gt;&amp;) [with _CharT = char, _Traits = std::char_traits&lt;char&gt;, _Alloc = std::allocator&lt;char&gt;]\n</code></pre>\n<p>While I understand that str() in stringstream returns a temporary, it does not make sense and was not immediately apparent that I should have been calling the swap on the temporary with the local variable as parameter instead of my first instinct.</p>\n<p>Obviously straight assignment works better, and newer C++ standards have move semantics which is perfect, but these are not available for my implementation.</p>\n<p>Visual Studio does not give this problem due to it being relaxed about the C++ standard. I kinda already understand the whole const reference to a temporary thing (which I assume is the reason for my compilation errors).</p>\n<p>My question:\nCan anyone explain to me if this is the only solution, and perhaps explain to me the how to think about this in future so I can spot and work around similar issues?</p>\n<p>(If no-one has any great insights I'm at least posting this here for people with similar issues)</p>\n", "AcceptedAnswerId": "3232905", "Title": "Question about using string::swap() with temporaries", "CreationDate": "2010-07-12T21:53:50.387", "Id": "3232582", "CommentCount": "4", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2010-07-12T23:55:09.657", "Score": "5", "OwnerUserId": "174650", "Tags": "<c++><string><stl><stream><temporary>", "AnswerCount": "3"}, "3232866": {"Id": "3232866", "PostTypeId": "2", "Body": "<p>You can't bind a temporary to a non-const reference. For this reason the temporary returned from <code>ss.str()</code> can't be passed to <code>std::string::swap</code> which expects to modify its parameter (therefor it takes its argument using <code>non-const&amp;</code>).</p>\n<p>The second version works as you're calling a member function on the temporary object which is permitted.</p>\n<p>But why do you want to swap in the first place? Normally, a simple:</p>\n<pre><code>std::string s(ss.str());\n</code></pre>\n<p>should be good enough. This isn't less efficient than the swap (at least in C++0x with move semantics), but at the same time a lot more readable.</p>\n", "LastEditorUserId": "269943", "LastActivityDate": "2010-07-12T23:55:09.657", "Score": "7", "CreationDate": "2010-07-12T22:44:12.993", "ParentId": "3232582", "CommentCount": "3", "OwnerUserId": "269943", "LastEditDate": "2010-07-12T23:55:09.657"}});