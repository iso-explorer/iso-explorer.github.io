post_cb({"bq_ids": {"n4140": {"so_45284117_45284117_0": {"length": 61, "quality": 0.6559139784946236, "section_id": 378}}, "n3337": {"so_45284117_45284117_0": {"length": 76, "quality": 0.8172043010752689, "section_id": 369}}}, "45284333": {"PostTypeId": "2", "Body": "<p>There are certain contexts where you can type an expression that doesn't actually get executed at runtime. The arguments of <code>sizeof</code> and <code>decltype</code>, for example, don't actually get executed. They exist solely so that the compiler will compute the type of what the result <em>would have been</em>.</p>\n<p>These contexts are called \"<a href=\"https://stackoverflow.com/questions/35088599/what-are-unevaluated-contexts-in-c?noredirect=1&amp;lq=1\">unevaluated contexts</a>\". That's what it is talking about. And it's saying that, even in an unevaluated context, an expression that constructs an object still has to be a valid form of object initialization.</p>\n", "LastActivityDate": "2017-07-24T21:02:01.067", "LastEditorUserId": "734069", "Id": "45284333", "CommentCount": "0", "CreationDate": "2017-07-24T15:19:47.127", "ParentId": "45284117", "Score": "6", "OwnerUserId": "734069", "LastEditDate": "2017-07-24T21:02:01.067"}, "45284117": {"ViewCount": "95", "Body": "<p>I encountered the sentence, \"Even when the creation of the temporary object is unevaluated\", in the standard 12.2 and I do not get what they mean.</p>\n<p>So I read about expressions but I still do not get what they mean that the they meant by that. The reason, I suppose, is that I had a hard time trying to take their definition of unevaluated expressions and apply it the the quotation stated above.</p>\n<p>So could anybody please tell me what they mean by \"Even when the creation of the temporary object is unevaluated\"?</p>\n<p>The context:</p>\n<blockquote>\n<p id=\"so_45284117_45284117_0\">Temporaries of class type are created in various contexts: binding a\n  reference to a prvalue (8.5.3), returning a prvalue (6.6.3), a\n  conversion that creates a prvalue (4.1, 5.2.9, 5.2.11, 5.4), throwing\n  an exception (15.1), entering a handler (15.3), and in some\n  initializations (8.5). [ Note: The lifetime of exception objects is\n  described in 15.1. \u2014 end note ] Even when the creation of the\n  temporary object is unevaluated (Clause 5) or otherwise avoided\n  (12.8), all the semantic restrictions shall be respected as if the\n  temporary object had been created and later destroyed. [ Note: even if\n  there is no call to the destructor or copy/move constructor, all the\n  semantic restrictions, such as accessibility (Clause 11) and whether\n  the function is deleted (8.4.3), shall be satisfied. However, in the\n  special case of a function call used as the operand of a\n  decltype-specifier (5.2.2), no temporary is introduced, so the\n  foregoing does not apply to the prvalue of any such function call. \u2014\n  end note ]</p>\n</blockquote>\n", "Title": "What does it mean to evaluate the creation of an object?", "CreationDate": "2017-07-24T15:09:28.043", "LastActivityDate": "2017-07-24T21:02:01.067", "CommentCount": "8", "LastEditDate": "2017-07-24T16:53:03.123", "PostTypeId": "1", "LastEditorUserId": "734069", "Id": "45284117", "Score": "5", "OwnerUserId": "8221510", "Tags": "<c++><language-lawyer>", "AnswerCount": "1"}});