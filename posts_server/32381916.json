post_cb({"32382228": {"ParentId": "32381916", "PostTypeId": "2", "CommentCount": "1", "CreationDate": "2015-09-03T17:43:56.157", "Score": "0", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:02:27.067", "Id": "32382228", "OwnerUserId": "1012759", "Body": "<p>It is forbidden by standard to use pointers in copy constructors:</p>\n<p>C++ draft standard n3376 - section 12.8.2:</p>\n<blockquote>\n<p id=\"so_32381916_32382228_0\">A non-template constructor for class X is a copy constructor if its\n  first parameter is of type X&amp;, const X&amp;, volatile X&amp; or const volatile\n  X&amp;, and either there are no other parameters or else all other\n  parameters have default arguments</p>\n</blockquote>\n<p><a href=\"https://stackoverflow.com/questions/18611475/why-is-the-argument-of-the-copy-constructor-a-reference-rather-than-a-pointer/18611518#18611518\">Why is the argument of the copy constructor a reference rather than a pointer?</a></p>\n", "LastActivityDate": "2015-09-03T17:43:56.157"}, "32382678": {"ParentId": "32381916", "CommentCount": "4", "CreationDate": "2015-09-03T18:10:05.567", "OwnerUserId": "481267", "PostTypeId": "2", "Id": "32382678", "Score": "5", "Body": "<p>If you don't declare a copy constructor for your class, the compiler will declare one for you anyway. Classes <strong>have to</strong> have copy constructors. They're baked into the language and have special status. The language doesn't work without them.</p>\n<p>Possibly the best example is that copy constructors are needed when passing by value. The compiler is going to implicitly call the copy constructor when you pass by value. It's not going to call the constructor <code>B::B(B*)</code>.</p>\n<p>So if you want your class to be copyable, you should define the copying logic in the copy constructor. It's just easier.</p>\n", "LastActivityDate": "2015-09-03T18:10:05.567"}, "32382135": {"ParentId": "32381916", "PostTypeId": "2", "CommentCount": "2", "CreationDate": "2015-09-03T17:37:51.113", "Score": "4", "LastEditorUserId": "3723423", "LastEditDate": "2015-09-03T19:39:54.860", "Id": "32382135", "OwnerUserId": "3723423", "Body": "<p>Class A is flexible and safe: you create a copy from any A object you have, even if it's a temporary one.</p>\n<p>Class B is less safe as you could invoke the constructor with a <code>nullptr</code>. It's less flexible because you can only use ypur constructor to copy an object from which you can get the address and which is not const. </p>\n<pre><code>B b1(...);        \nconst B b2(...); \nB fb();        // function returning a B\n\nB b3(&amp;b1);      \nB b4(&amp;b2);     // error b2 is const\nB b5(&amp;fb());   // error you can't take adress of a temporary \n</code></pre>\n", "LastActivityDate": "2015-09-03T19:39:54.860"}, "32381916": {"CommentCount": "4", "ViewCount": "1261", "CreationDate": "2015-09-03T17:24:51.810", "LastActivityDate": "2015-09-03T19:39:54.860", "Title": "What are the benefits of using copy constructor?", "AcceptedAnswerId": "32382135", "PostTypeId": "1", "Id": "32381916", "Score": "3", "Body": "<p>I am new to object oriented programming, and this may be a silly question, but I don't understand why is using class A code better to use than class B if you want to create copy of one object.</p>\n<pre><code>class A {\n    int num;\npublic:\n    A(const A &amp;ref) : num(ref.num) {};\n};\n\nclass B { \n    int num;\npublic:\n    B(B *ptToClass) : num(ptToClass-&gt;num) {};\n};\n</code></pre>\n<p>If I got this right, copy constructor is used in class A.</p>\n", "Tags": "<c++><oop>", "OwnerUserId": "2315778", "AnswerCount": "4"}, "32382323": {"ParentId": "32381916", "CommentCount": "0", "CreationDate": "2015-09-03T17:49:29.710", "OwnerUserId": "578749", "PostTypeId": "2", "Id": "32382323", "Score": "2", "Body": "<p>The thing is that if a constructor is considered to be a copy constructor by the compiler, it is used in special ways. For instance, if you have a function that takes a parameter of your type <code>A</code> by copy, like this:</p>\n<pre><code>void function(A obj) {\n   // Do something with A\n   // ...\n}\n</code></pre>\n<p>And then you call that function:</p>\n<pre><code>int main() {\n   A a_obj;\n   function(a_obj);\n}\n</code></pre>\n<p>the object <code>obj</code> received by <code>function</code> will be created by the copy constructor you provided. So, it is a nice thing to provide copy constructor for your classes that are meant to be copied, so that them fits more nicely with the languages features and libraries.</p>\n<p>There is no problem in creating a constructor of the kind in your <code>class B</code>, if that fit your needs in your application, but that will not be understood by the compiler as a copy constructor, and won't be used when the compiler or libraries needs to copy your objects.</p>\n", "LastActivityDate": "2015-09-03T17:49:29.710"}, "bq_ids": {"n4140": {"so_32381916_32382228_0": {"section_id": 451, "quality": 1.0, "length": 24}}, "n3337": {"so_32381916_32382228_0": {"section_id": 442, "quality": 1.0, "length": 24}}, "n4659": {"so_32381916_32382228_0": {"section_id": 474, "quality": 1.0, "length": 24}}}});