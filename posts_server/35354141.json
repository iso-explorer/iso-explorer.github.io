post_cb({"bq_ids": {"n4140": {"so_35354141_35354234_0": {"length": 24, "quality": 0.96, "section_id": 6142}}, "n3337": {"so_35354141_35354234_0": {"length": 24, "quality": 0.96, "section_id": 5906}}, "n4659": {"so_35354141_35354234_0": {"length": 18, "quality": 0.72, "section_id": 7638}}}, "35354141": {"ViewCount": "88", "Body": "<pre><code>    #include &lt;stdio.h&gt;\n\n    int add(int a, int b)\n    {\n        int c =a+b;\n\n        return c;\n    }\n\n    int main()\n    {\n        int a=20,b=45;\n        int (*p)(int , int);\n        p=&amp;add;\n\n        printf(\"%d\\n%d\\n%d\\n\\n\",*add,&amp;add,add);\n        printf(\"%d\\n%d\\n%d\\n\\n\",*add+1,&amp;add+1,add+1);\n\n\n        return 0;\n    }\n</code></pre>\n<p>Outupt is</p>\n<p>4199392\n4199392\n4199392</p>\n<p>4199393\n4199393\n4199393</p>\n<p>So why the *add, &amp;add, add are same?\nI also doubt that 'add' act like an array, correct me if I am wrong, because, address of array and array itself are same.</p>\n", "Title": "why the function pointer, function address and function are same?", "CreationDate": "2016-02-12T03:04:54.240", "LastActivityDate": "2016-02-12T03:17:10.297", "CommentCount": "6", "PostTypeId": "1", "ClosedDate": "2016-02-12T03:17:40.750", "Id": "35354141", "Score": "5", "OwnerUserId": "4772477", "Tags": "<c++><c>", "AnswerCount": "2"}, "35354194": {"Id": "35354194", "PostTypeId": "2", "Body": "<p>In C the only things you can do with a function is to call it or taking its address. So if you aren't calling it, you're pretty much taking its address. </p>\n", "LastActivityDate": "2016-02-12T03:11:33.767", "CommentCount": "0", "CreationDate": "2016-02-12T03:11:33.767", "ParentId": "35354141", "Score": "0", "OwnerUserId": "2040863"}, "35354234": {"Id": "35354234", "PostTypeId": "2", "Body": "<p>\"C11 \u00a76.5.6 Additive operators\" /6 discusses adding to a pointer</p>\n<blockquote>\n<p id=\"so_35354141_35354234_0\">When an expression that has integer type is added to or subtracted from a pointer, the result has the type of the pointer operand. If the pointer operand points to an element of an <strong>array object</strong>, ... . If the result points <strong>one past</strong> the last element of the array object, ...</p>\n</blockquote>\n<p>Nowhere does the C spec define adding an integer type to a function pointer.  Thus undefined behavior.</p>\n", "LastActivityDate": "2016-02-12T03:17:10.297", "CommentCount": "0", "CreationDate": "2016-02-12T03:17:10.297", "ParentId": "35354141", "Score": "0", "OwnerUserId": "2410359"}});