post_cb({"46769981": {"ViewCount": "60", "Body": "<p>In C++ , <strong>without making my destructor virtual</strong> Is it still possible to downcast pointers/references of my non-polymorphic base class?</p>\n", "Title": "How to downcast with non-polymorphic base class", "CreationDate": "2017-10-16T12:08:12.733", "LastActivityDate": "2017-10-16T13:40:43.560", "CommentCount": "8", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2017-10-16T12:10:29.733", "LastEditorUserId": "440558", "Id": "46769981", "Score": "3", "OwnerUserId": "8784178", "Tags": "<c++><dynamic-cast><downcasting>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_46769981_46771164_0": {"length": 4, "quality": 0.5714285714285714, "section_id": 6016}}, "n3337": {"so_46769981_46771164_0": {"length": 5, "quality": 0.7142857142857143, "section_id": 5784}}, "n4659": {"so_46769981_46771164_0": {"length": 4, "quality": 0.5714285714285714, "section_id": 7515}}}, "46771164": {"Id": "46771164", "PostTypeId": "2", "Body": "<p>Virtual destructor has little to do with downcasting. The goal of making destructor virtual is to allow safe deletion through pointer to base.</p>\n<pre><code>Base * ptr = new Derived;\ndelete ptr; // undefined behavior if Base destructor isn't virtual\n</code></pre>\n<p>Downcasting can be performed using <code>static_cast</code>, on your own responsibility</p>\n<pre><code>void processBase(Base * ptr)\n{\n    // undefined behavior if ptr does not point to Derived\n    // object or some object that inherits from Derived\n    Derived * derived = static_cast&lt;Derived *&gt;(ptr);\n}\n</code></pre>\n<p>There is also <code>dynamic_cast</code> that will check if downcast is legal, but it requires that casted expression points (or refers) to a polymorphic object (i.e. object that has at least one virtual function declared or inherited). </p>\n<blockquote>\n<p id=\"so_46769981_46771164_0\">5.2.7.6 Otherwise, v shall be a pointer to or an lvalue of a polymorphic type (10.3)</p>\n</blockquote>\n<p>If the type of casted expression is not polymorphic, the program will fail to compile.</p>\n<p>To summarize - making destructor virtual will make your class polymorphic, but same will be achieved by declaring any other virtual member function. To use <code>dynamic_cast</code> you need a polymorphic type.</p>\n", "LastEditorUserId": "113662", "LastActivityDate": "2017-10-16T13:40:43.560", "Score": "1", "CreationDate": "2017-10-16T13:09:14.477", "ParentId": "46769981", "CommentCount": "2", "OwnerUserId": "113662", "LastEditDate": "2017-10-16T13:40:43.560"}});