post_cb({"bq_ids": {"n4140": {"so_37184970_37185665_0": {"length": 6, "quality": 0.6, "section_id": 744}}, "n3337": {"so_37184970_37185665_0": {"length": 6, "quality": 0.6, "section_id": 733}}, "n4659": {"so_37184970_37185665_0": {"length": 6, "quality": 0.6, "section_id": 802}}}, "37184970": {"ViewCount": "224", "Body": "<p>I have studied, at compile time linking takes place and at run time execution takes place. In inline function at each function call code is replaced by inline function definition but function call done at run time. But when i refereed some books, substitution of code done at compile time. can anyone tell me inline code replacement done at compile time or run time?  </p>\n", "AcceptedAnswerId": "37186349", "Title": "is Inline code replaced at compile time or run time?", "CreationDate": "2016-05-12T11:00:51.177", "LastActivityDate": "2016-05-13T03:55:22.057", "CommentCount": "3", "LastEditDate": "2016-05-12T14:09:01.447", "PostTypeId": "1", "Tags": "<c++><c>", "Id": "37184970", "AnswerCount": "4", "Score": "-1", "OwnerUserId": "6288948", "ClosedDate": "2016-05-12T14:35:19.387", "LastEditorUserId": "584518"}, "37185179": {"Id": "37185179", "PostTypeId": "2", "Body": "<p>You can think of inline code as text substitution that is made at compile time. It is a little more complicated than this, because this is exactly what a function-like macro does, but they are similar in idea.</p>\n<p>For example, take the following:</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\ninline int max(int a, int b)\n{\n    return a &gt; b ? a : b;\n}\n\nint main()\n{\n    cout &lt;&lt; max(5,9) &lt;&lt; endl;   // \"9\"\n    return 0;\n}\n</code></pre>\n<p>Rather than making a call to max, as it would without inline, it is substituted as it is into the code when it is compiled to become</p>\n<pre><code>int main()\n{\n    cout &lt;&lt; (5 &gt; 9 ? 5 : 9) &lt;&lt; endl;\n    return 0;\n}\n</code></pre>\n<p>So it is still working it out (is 5 greater than 9?, etc), and will end up printing <code>9</code> but it does not have to make a call to the function.</p>\n<p>Edit:\nThe reason it is different to a macro, is safety and expectation related. Imagine we have</p>\n<pre><code>#define MAX(a,b) ((a)&gt;(b) ? (a) : (b))\n</code></pre>\n<p>As a macro. If were to use</p>\n<pre><code>int a=5;\nint b=9;\n\ncout &lt;&lt; MAX(a++, b++) &lt;&lt; endl;   // \"10\"\ncout &lt;&lt; a &lt;&lt; ' ' &lt;&lt; b &lt;&lt; endl;   // \"6 11\"\n</code></pre>\n<p>We would expect <code>a</code> and <code>b</code> to print 6 and 10 respectively. However, in a macro, this is substituted as</p>\n<pre><code>((a++)&gt;(b++) ? (a++) : (b++))\n</code></pre>\n<p>When this is called, we will have post-increments to the <code>(a++)&gt;(b++)</code> section, which will give <code>a=6</code> and <code>b=10</code>. We then follow up with the if statement, and run <code>(b++)</code> (the else condition) which will then give <code>b=11</code>, one more than was expected.</p>\n<p>Using inline, we obtain the expected result, because it will perform these post increments after the statement has run.</p>\n<pre><code>int a=5;\nint b=9;\n\ncout &lt;&lt; max(a++, b++) &lt;&lt; endl;   // Inline: \"9\"\ncout &lt;&lt; a &lt;&lt; ' ' &lt;&lt; b &lt;&lt; endl;   // \"6 10\"\n</code></pre>\n", "LastEditorUserId": "4309934", "LastActivityDate": "2016-05-13T03:55:22.057", "Score": "-1", "CreationDate": "2016-05-12T11:10:03.220", "ParentId": "37184970", "CommentCount": "5", "OwnerUserId": "4309934", "LastEditDate": "2016-05-13T03:55:22.057"}, "37186145": {"Id": "37186145", "PostTypeId": "2", "Body": "<p>Technically speaking, inline code replacement, if any, should take place at compile time, because:</p>\n<ul>\n<li>It's entirely possible to be done at compile time.</li>\n<li>If it happens in runtime, the newly generated part of code must be compiled again to be executable, which make no sense.</li>\n</ul>\n<p>Also note that there is no guarantee that you'll get something like \"inline substitution\". According to N1570, 6.7.4 paragraph 6:</p>\n<blockquote>\n<p id=\"so_37184970_37186145_0\">A function declared with an inline function specifier is an inline\n  function. Making a function an inline function suggests that calls to\n  the function be as fast as possible. <strong>The extent to which such\n  suggestions are effective is implementation-defined.</strong></p>\n</blockquote>\n<p>As you can see, the only guarantee is that function calls to be \"as fast as possible\", which isn't very informative. The 139th footnote further points out:</p>\n<blockquote>\n<p id=\"so_37184970_37186145_1\">For example, an implementation might never perform inline\n  substitution, or might only perform inline substitutions to calls in\n  the scope of an inline declaration.</p>\n</blockquote>\n", "LastActivityDate": "2016-05-12T11:55:11.287", "CommentCount": "0", "CreationDate": "2016-05-12T11:55:11.287", "ParentId": "37184970", "Score": "2", "OwnerUserId": "5399734"}, "37185665": {"Id": "37185665", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_37184970_37185665_0\">at compile time linking takes place and at run time execution takes place</p>\n</blockquote>\n<p>Not quite.</p>\n<p>At <em>build</em> time, three stages happen:</p>\n<ol>\n<li><p>The <strong>preprocessor</strong> prepares each translation unit by text substitution (macro invocations are replaced by the literal text of the macro definition, <code>#include</code> is replaced by the contents of the included file, etc.).</p>\n<p>No non-textual processing is done (it doesn't understand anything of the program structure or meaning).</p></li>\n<li><p>The <strong>compiler</strong> parses the translation unit and emits object code.</p>\n<p>This includes optimization before, during and after code generation. Function inlining is traditionally one of these optimizations, since it happens when the call site code is generated.</p></li>\n<li><p>The <strong>linker</strong> links the compiled object files into an executable.</p>\n<p>In principle linking doesn't change the object code at all, except perhaps symbol tables and offsets.</p>\n<p>Some compilers <em>do</em> now offer link-time optimization, which blurs this picture a little. Amongst other things, functions with non-inline definitions might be inlined later in the build cycle.</p></li>\n</ol>\n<p>In either case, function inlining is performed at build time; this decision, and the generated code, are built into the executable.</p>\n<p>At runtime, when the call is actually executed, one of two things happens:</p>\n<ul>\n<li><p>the compiler didn't inline the call, meaning there is an actual call instruction. Control transfers to the function, it is executed, and when it returns control passes back to the instruction following the call</p></li>\n<li><p>the compiler did inline the call, and the body of the function code is present, and execution simply continues into (and through) it.</p></li>\n</ul>\n<p>In the second case, you wouldn't consider the inlining to have happened at runtime - it still happened at compile time, when the code was generated.</p>\n<hr>\n<p>Note that this compilation model isn't universal. For example in Java, the \"object code\" is bytecode for a virtual machine, rather than native machine code. This is generally compiled <em>at runtime</em>, which means inlining and other optimisations can also happen at runtime.</p>\n</hr>", "LastEditorUserId": "212858", "LastActivityDate": "2016-05-12T19:43:37.393", "Score": "2", "CreationDate": "2016-05-12T11:33:28.223", "ParentId": "37184970", "CommentCount": "2", "OwnerUserId": "212858", "LastEditDate": "2016-05-12T19:43:37.393"}, "37186349": {"Id": "37186349", "PostTypeId": "2", "Body": "<p>Complile time.\nThe compiler is actually free to ignore the inline keyword. It is only a hint (except that inline is necessary in order to allow a function to be defined in a header file without generating an error message due to the function being defined in more than one translation unit).</p>\n", "LastActivityDate": "2016-05-12T12:04:24.663", "CommentCount": "0", "CreationDate": "2016-05-12T12:04:24.663", "ParentId": "37184970", "Score": "0", "OwnerUserId": "5570477"}});