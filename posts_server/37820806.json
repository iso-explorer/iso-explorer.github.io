post_cb({"bq_ids": {"n4140": {"so_37820806_37821190_0": {"length": 15, "quality": 0.9375, "section_id": 462}, "so_37820806_37821190_1": {"length": 11, "quality": 0.9166666666666666, "section_id": 464}}, "n3337": {"so_37820806_37821190_0": {"length": 15, "quality": 0.9375, "section_id": 453}, "so_37820806_37821190_1": {"length": 11, "quality": 0.9166666666666666, "section_id": 455}}, "n4659": {"so_37820806_37821190_0": {"length": 15, "quality": 0.9375, "section_id": 485}, "so_37820806_37821190_1": {"length": 11, "quality": 0.9166666666666666, "section_id": 487}}}, "37821047": {"Id": "37821047", "PostTypeId": "2", "Body": "<p>The reason for the error message is that the default copy constructor calls the base class's copy constructor. Since that's deleted, the compiler can't generate a copy constructor. The solution is to write your own copy constructor for the derived class, and do whatever you think makes sense to construct a \"copy\" of the base class object.</p>\n", "LastActivityDate": "2016-06-14T20:00:01.860", "CommentCount": "1", "CreationDate": "2016-06-14T20:00:01.860", "ParentId": "37820806", "Score": "3", "OwnerUserId": "1593860"}, "37821190": {"Id": "37821190", "PostTypeId": "2", "Body": "<p>The default implementation of the Copy Constructor of a derived class will call the Copy Constructor's of its base class...</p>\n<p>Quoting relevant sections of the C++ standard draft... <em>partially reproduced here</em>:</p>\n<p><a href=\"http://eel.is/c++draft/class.copy\" rel=\"nofollow\">[class.copy]</a></p>\n<blockquote>\n<p id=\"so_37820806_37821190_0\"><a href=\"http://eel.is/c++draft/class.copy#13\" rel=\"nofollow\">13.</a> A copy/move constructor that is defaulted and not defined as deleted\n  is implicitly defined if it is odr-used ([basic.def.odr]) or when it\n  is explicitly defaulted after its first declaration.</p>\n</blockquote>\n<p>And </p>\n<blockquote>\n<p id=\"so_37820806_37821190_1\"><a href=\"http://eel.is/c++draft/class.copy#14\" rel=\"nofollow\">14.</a> The implicitly-defined copy/move constructor for a non-union class X performs a memberwise copy/move of its bases and members. ....</p>\n</blockquote>\n<p>So, you best bet is to manually define the copy constructor of the base class. But its generally not a good design to circumvent the copy constructor of the parent class.</p>\n<pre><code>class Parent{\npublic:\n    .....\n    Parent(const Parent&amp;) = delete;\n};\n\n\nclass Child : public Parent {\npublic:\n    .....\n    Child(const Child&amp;) /* use c'tor init list here except for base class */\n    {\n         .....\n    }\n};\n</code></pre>\n", "LastEditorUserId": "1621391", "LastActivityDate": "2016-06-14T20:17:39.173", "Score": "2", "CreationDate": "2016-06-14T20:09:13.250", "ParentId": "37820806", "CommentCount": "2", "LastEditDate": "2016-06-14T20:17:39.173", "OwnerUserId": "1621391"}, "37820806": {"ViewCount": "92", "Body": "<p>In the parent class I have:</p>\n<pre><code>Parent(const Parent&amp; p) = delete;\n</code></pre>\n<p>I want inherit to a child class, and within the class I want to use the default copy c'tor by doing:</p>\n<pre><code>Child(const Child&amp; c) = default;\n</code></pre>\n<p>However I'm getting an error: <code>\"use of deleted function Parent(const Parent&amp;)\"</code></p>\n<p>Why can I not create a default c'tor and is there a way around this?\nThanks!</p>\n", "AcceptedAnswerId": "37821047", "Title": "Implementing copy c'tor in child after deleting in parent in cpp", "CreationDate": "2016-06-14T19:45:34.283", "Id": "37820806", "CommentCount": "3", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2016-06-14T20:13:14.923", "LastEditorUserId": "1621391", "LastActivityDate": "2016-06-14T20:17:39.173", "Score": "1", "OwnerUserId": "5345165", "Tags": "<c++>", "AnswerCount": "2"}});