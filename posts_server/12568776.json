post_cb({"12568844": {"ParentId": "12568776", "CommentCount": "0", "Body": "<p>It's hiding, no overloading. Use</p>\n<pre><code>class C: public B\n{\npublic:\n   using B::foo;\n   template&lt;typename T&gt;\n   void foo(A&lt;T&gt;&amp; a) {}\n};\n</code></pre>\n", "OwnerUserId": "1498580", "PostTypeId": "2", "Id": "12568844", "Score": "2", "CreationDate": "2012-09-24T16:10:01.117", "LastActivityDate": "2012-09-24T16:10:01.117"}, "12568864": {"ParentId": "12568776", "CommentCount": "0", "Body": "<p>Correct, the base function is <em>hidden</em>. That's actually the proper term for it. Add <code>using B::foo;</code> to the class definition of <code>C</code> to unhide it.</p>\n", "OwnerUserId": "596781", "PostTypeId": "2", "Id": "12568864", "Score": "1", "CreationDate": "2012-09-24T16:11:15.570", "LastActivityDate": "2012-09-24T16:11:15.570"}, "12568847": {"ParentId": "12568776", "PostTypeId": "2", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_12568776_12568847_0\">It almost seems like the method overload for int is being hidden by the template overload.</p>\n</blockquote>\n<p>Exactly! You need to add a using declaration to class C:</p>\n<pre><code>class C: public B\n{\n public:\n  using B::foo;\n  template&lt;typename T&gt;\n  void foo(A&lt;T&gt;&amp; a) {}\n};\n</code></pre>\n<p>When you declare a member function in a derived class, all member functions in the base class with the same name are hidden. See \u00a73.3.10/3 of ISO/IEC 14882:2011:</p>\n<blockquote>\n<p id=\"so_12568776_12568847_1\">The declaration of a member in a derived class (Clause 10) hides the declaration of a member of a base class of the same name; see 10.2.</p>\n</blockquote>\n", "OwnerUserId": "150634", "LastEditorUserId": "150634", "LastEditDate": "2012-09-25T18:15:16.880", "Id": "12568847", "Score": "5", "CreationDate": "2012-09-24T16:10:05.877", "LastActivityDate": "2012-09-25T18:15:16.880"}, "12568776": {"CommentCount": "0", "AcceptedAnswerId": "12568847", "PostTypeId": "1", "LastEditorUserId": "1694918", "CreationDate": "2012-09-24T16:05:45.243", "LastActivityDate": "2012-09-25T18:15:16.880", "LastEditDate": "2012-09-24T17:05:58.190", "ViewCount": "84", "FavoriteCount": "1", "Title": "Moving Template Method to Derivative Breaks Compilation", "Id": "12568776", "Score": "5", "Body": "<p>Given the following code:</p>\n<pre><code>template&lt;typename T&gt;\nclass A\n{\npublic:\n   T t;\n};\n\nclass B\n{\npublic:\n   void foo(int i) {}\n\n   template&lt;typename T&gt;\n   void foo(A&lt;T&gt;&amp; a) {}\n};\n\nint main()\n{\n   A&lt;int&gt; a;\n   B      b;\n\n   b.foo(a  );\n   b.foo(a.t);\n}\n</code></pre>\n<p>This compiles and works fine; the correct overloaded versions of <code>B::foo()</code> are chosen and called for <code>a</code> and <code>a.t</code>.</p>\n<p>Now I introduce a new class <code>C</code> which derives from <code>B</code> and move the template version of <code>::foo()</code> out of <code>B</code> and into <code>C</code>:</p>\n<pre><code>template&lt;typename T&gt;\nclass A\n{\npublic:\n   T t;\n};\n\nclass B\n{\npublic:\n   void foo(int i) {}\n};\n\nclass C: public B\n{\npublic:\n   template&lt;typename T&gt;\n   void foo(A&lt;T&gt;&amp; a) {}\n};\n\nint main()\n{\n   A&lt;int&gt; a;\n   C      c;\n\n   c.foo(a  ); // Fine\n   c.foo(a.t); // Error\n}\n</code></pre>\n<p>And now the code won't compile anymore. Visual Studio 2005 is stating:</p>\n<pre><code>error C2784: 'void C::foo(A&lt;T&gt; &amp;)' : could not deduce template argument for 'A&lt;T&gt; &amp;' from 'int'\n</code></pre>\n<p>In fact, calling <code>C::foo()</code> with any <code>int</code> value results in this error. It almost seems like the method overload for <code>int</code> is being hidden by the template overload.</p>\n<p>Why is this happening? Is it some issue with Visual Studio 2005's compiler? Unfortunately, I cannot test it on any other compiler right now.</p>\n<p>Any information is appreciated.</p>\n", "Tags": "<c++><inheritance><method-overloading>", "OwnerUserId": "1694918", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_12568776_12568847_1": {"section_id": 7080, "quality": 0.8666666666666667, "length": 13}}, "n3337": {"so_12568776_12568847_1": {"section_id": 6824, "quality": 0.8666666666666667, "length": 13}}, "n4659": {"so_12568776_12568847_1": {"section_id": 8581, "quality": 0.8666666666666667, "length": 13}}}});