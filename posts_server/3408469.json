post_cb({"5054244": {"Id": "5054244", "PostTypeId": "2", "Body": "<p>I use the following trick all the time. The idea is to put your static in a function, and access it only from that function. This approach also allows you to avoid the need to declare your static in a <code>.cpp</code> file -- everything can live in the <code>.h</code> file. Following your example code:</p>\n<pre><code>template &lt; class T &gt;\nclass MyClass\n{\n  public:\n    static T * getObject() {\n      // Initialization goes here.\n      static T * object = NULL; // or whatever you want\n      return pointerObject;\n    }\n};\n</code></pre>\n", "LastActivityDate": "2011-02-19T23:38:57.500", "CommentCount": "0", "CreationDate": "2011-02-19T23:38:57.500", "ParentId": "3408469", "Score": "0", "OwnerUserId": "335756"}, "3408860": {"Id": "3408860", "PostTypeId": "2", "Body": "<p>Your first \"definition\" of static member is but a declaration - here is a quote from the standard.</p>\n<blockquote>\n<p id=\"so_3408469_3408860_0\">15 An explicit specialization of a\n  static data member of a template is a\n  definition if the declaration includes\n  an initializer; otherwise, it is a\n  declaration. [Note: there is no syntax\n  for the definition of a static data\n  member of a template that requires\n  default initialization. template&lt;&gt; X\n  Q::x; This is a declaration\n  regardless of whether X can be default\n  initialized (8.5). ]</p>\n</blockquote>\n<p>The second definition should work. Are you sure you have everything available in one compilation unit? What is teh exact text of error message?</p>\n<p>The following compiles/runs with g++ - all in one file</p>\n<pre><code>#include &lt;iostream&gt;\n\ntemplate &lt; class T &gt;\nclass MyClass\n{\n  public:\n    static T staticObject;\n    static T * staticPointerObject;\n};\n\ntemplate &lt; class T &gt;\nT MyClass&lt;T&gt;::staticObject;\n\ntemplate &lt; class T &gt;\nT * MyClass&lt;T&gt;::staticPointerObject = 0; \n\nint main(int argc, char **argv)\n{\n  int an_int = 5;\n  MyClass&lt;int&gt;::staticPointerObject = &amp;an_int;\n  std::cout &lt;&lt; *MyClass&lt;int&gt;::staticPointerObject &lt;&lt; std::endl;\n\n  char a_char = 'a';\n  MyClass&lt;char&gt;::staticPointerObject = &amp;a_char;\n  std::cout &lt;&lt; *MyClass&lt;char&gt;::staticPointerObject &lt;&lt; std::endl;\n}\n</code></pre>\n", "LastActivityDate": "2010-08-04T18:59:33.560", "CommentCount": "4", "CreationDate": "2010-08-04T18:59:33.560", "ParentId": "3408469", "Score": "0", "OwnerUserId": "3458"}, "3408687": {"Id": "3408687", "PostTypeId": "2", "Body": "<p>I have found two solutions. Neither of them are 100% what I was hoping for.</p>\n<ol>\n<li><p>Explicitely initialize the specific instance, e.g.</p>\n<pre><code>int * MyClass&lt;int&gt;::staticPointerObject = NULL;</code></pre></li>\n</ol>\n<p>This is not convinient especially when I have a lot of different types.</p>\n<ol start=\"2\">\n<li>Wrap the pointer inside the class, e.g.</li>\n</ol>\n<pre><code>\n    template &lt; class T &gt;   \n    class MyClass   \n    {   \n      private:   \n        struct PointerWrapper   \n        {   \n          T * pointer;   \n          PointerWrapper( void )   \n            : pointer( NULL )   \n          { }   \n        };   \n        T staticObject;   \n        PointerWrapper staticPointerObject;   \n    };   \n    ...   \n    template &lt; class T &gt;   \n    T MyClass&lt;T&gt;::staticObject; // &lt;-- works fine.   \n    ...   \n    template &lt; class T &gt;   \n    MyClass&lt;T&gt;::PointerWrapper MyClass&lt;T&gt;::staticPointerObject; // &lt;-- works fine.\n</code></pre>\n<p>This is a bit of a hassle, but at least usable. Why is it I can instansiate a variable object but not a pointer to a variable object? If anything I would think I'd have more problems the other way around (the compiler knows ahead of time what a pointer looks like, but not what my object looks like).</p>\n<p>If someone has a better answer I'd love to see it!</p>\n", "LastEditorUserId": "409103", "LastActivityDate": "2011-02-19T23:23:14.920", "Score": "0", "CreationDate": "2010-08-04T18:38:30.730", "ParentId": "3408469", "CommentCount": "0", "OwnerUserId": "409103", "LastEditDate": "2011-02-19T23:23:14.920"}, "8686069": {"Id": "8686069", "PostTypeId": "2", "Body": "<p>I suspect the reason your first example is the following (from the 2003 C++ std document). Note particularly the last sentence -- from your example, there  seems to be nothing \"that requires the member definition to exist\".</p>\n<blockquote>\n<p id=\"so_3408469_8686069_0\">14.7.1 Implicit instantiation [temp.inst] 1 Unless a class template specialization has been explicitly instantiated (14.7.2) or explicitly\n  specialized (14.7.3), the class template specialization is implicitly\n  instantiated when the specialization is referenced in a context that\n  requires a completely-defined object type or when the completeness of\n  the class type affects the semantics of the program. The implicit\n  instantiation of a class template specialization causes the implicit\n  instantiation of the declarations, but not of the definitions or\n  default arguments, of the class member functions, member classes,\n  static data members and member templates; and it causes the implicit\n  instantiation of the definitions of member anonymous unions. Unless a\n  member of a class template or a member template has been explicitly\n  instantiated or explicitly specialized, the specialization of the\n  member is implicitly instantiated when the specialization is\n  referenced in a context that requires the member definition to exist;\n  in particular, the initialization (and any associated side-effects) of\n  a static data member does not occur unless the static data member is\n  itself used in a way that requires the definition of the static data\n  member to exist.</p>\n</blockquote>\n", "LastEditorUserId": "479512", "LastActivityDate": "2011-12-31T03:54:39.190", "Score": "1", "CreationDate": "2011-12-31T03:18:33.733", "ParentId": "3408469", "CommentCount": "0", "OwnerUserId": "763266", "LastEditDate": "2011-12-31T03:54:39.190"}, "bq_ids": {"n4140": {"so_3408469_8686069_0": {"length": 60, "quality": 0.5555555555555556, "section_id": 233}, "so_3408469_3408860_0": {"length": 20, "quality": 0.6451612903225806, "section_id": 275}}, "n3337": {"so_3408469_8686069_0": {"length": 60, "quality": 0.5555555555555556, "section_id": 226}, "so_3408469_3408860_0": {"length": 20, "quality": 0.6451612903225806, "section_id": 266}}, "n4659": {"so_3408469_3408860_0": {"length": 18, "quality": 0.5806451612903226, "section_id": 282}}}, "3408502": {"Id": "3408502", "PostTypeId": "2", "Body": "<p>\"Cannot find symbol staticPointerObject\" - this looks like a <em>linker</em> error message. Is it? (Details like this have to be specified in your question).</p>\n<p>If it is, them most likely it happens because you put the definition(s) of your static member(s) into an <em>implementation</em> file (a .cpp file). In order for this to work correctly, the definitions should be placed into the header file (.h file). </p>\n<p>Again, details like this have to be specified in your question. Without them it turns into a random guess-fest.</p>\n", "LastActivityDate": "2010-08-04T18:19:22.677", "CommentCount": "1", "CreationDate": "2010-08-04T18:19:22.677", "ParentId": "3408469", "Score": "2", "OwnerUserId": "187690"}, "3408469": {"ViewCount": "1440", "Body": "<p>Consider a class like so:</p>\n<pre><code>template &lt; class T &gt;\nclass MyClass\n{\n  private:\n    static T staticObject;\n    static T * staticPointerObject;\n};\n...\ntemplate &lt; class T &gt;\nT MyClass&lt;T&gt;::staticObject; // &lt;-- works\n...\ntemplate &lt; class T &gt;\nT * MyClass&lt;T&gt;::staticPointerObject = NULL; // &lt;-- cannot find symbol staticPointerObject.\n</code></pre>\n<p>I am having trouble figuring out why I cannot successfully create that pointer object.</p>\n<p>The above code is all specified in the header, and the issue I mentioned is an error in the link step, so it is not finding the specific symbol.</p>\n", "AcceptedAnswerId": "3408687", "Title": "Initializing static pointer in templated class", "CreationDate": "2010-08-04T18:15:21.187", "Id": "3408469", "CommentCount": "0", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2012-11-03T20:21:59.337", "LastEditorUserId": "488657", "LastActivityDate": "2012-11-03T20:21:59.337", "Score": "2", "OwnerUserId": "409103", "Tags": "<c++><templates><static-members>", "AnswerCount": "5"}});