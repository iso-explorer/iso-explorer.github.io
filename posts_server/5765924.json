post_cb({"5767006": {"ParentId": "5765924", "CommentCount": "0", "Body": "<p>That's because the spec says in 14.p5:</p>\n<blockquote>\n<p id=\"so_5765924_5767006_0\">A class template shall not have the same name as any other template, class, function, variable, enumeration,\n  enumerator, namespace, or type in the same scope (3.3), except as speci\ufb01ed in (14.5.5). Except that a\n  function template can be overloaded either by (non-template) functions with the same name or by other\n  function templates with the same name (14.8.3), a template name declared in namespace scope or in class\n  scope shall be unique in that scope.</p>\n</blockquote>\n", "OwnerUserId": "34509", "PostTypeId": "2", "Id": "5767006", "Score": "4", "CreationDate": "2011-04-23T21:17:00.583", "LastActivityDate": "2011-04-23T21:17:00.583"}, "5765924": {"CommentCount": "0", "ViewCount": "336", "PostTypeId": "1", "LastEditorUserId": "153285", "CreationDate": "2011-04-23T18:02:29.553", "LastActivityDate": "2011-04-23T21:17:00.583", "Title": "function template cannot hide class name?", "AcceptedAnswerId": "5767006", "LastEditDate": "2011-04-23T18:12:52.810", "Id": "5765924", "Score": "4", "Body": "<p>This works in GCC and Comeau:</p>\n<pre><code>struct X {};\n\nvoid X() {}\n</code></pre>\n<p>This breaks in Comeau:</p>\n<pre><code>struct X {};\n\ntemplate&lt; typename T &gt;\nvoid X() {}\n</code></pre>\n<p>This breaks both:</p>\n<pre><code>template&lt; typename T &gt;\nstruct X {};\n\ntemplate&lt; typename T &gt;\nvoid X() {}\n</code></pre>\n<p>The rule is defined by \u00a73.3.7/2. Is the discrepancy simply because a function template is not a function? I can't make sense of GCC's behavior.</p>\n<blockquote>\n<p id=\"so_5765924_5765924_0\">A class name (9.1) or enumeration name (7.2) can be hidden by the name of a variable, data member, function, or enumerator declared in the same scope. If a class or enumeration name and a variable, data member, function, or enumerator are declared in the same scope (in any order) with the same name, the class or enumeration name is hidden wherever the variable, data member, function, or enumerator name is visible.</p>\n</blockquote>\n", "Tags": "<c++><name-hiding>", "OwnerUserId": "153285", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_5765924_5767006_0": {"section_id": 52, "quality": 0.9318181818181818, "length": 41}, "so_5765924_5765924_0": {"section_id": 7079, "quality": 1.0, "length": 41}}, "n3337": {"so_5765924_5767006_0": {"section_id": 47, "quality": 0.9318181818181818, "length": 41}, "so_5765924_5765924_0": {"section_id": 6823, "quality": 1.0, "length": 41}}, "n4659": {"so_5765924_5767006_0": {"section_id": 53, "quality": 0.9318181818181818, "length": 41}, "so_5765924_5765924_0": {"section_id": 8580, "quality": 1.0, "length": 41}}}});