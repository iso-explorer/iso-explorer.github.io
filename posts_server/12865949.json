post_cb({"12865977": {"Id": "12865977", "PostTypeId": "2", "Body": "<p>No, <code>int</code> is a built-in type. It is not a class. The compiler has built-in knowledge of how to deal with <code>int</code>.</p>\n", "LastActivityDate": "2012-10-12T19:41:34.050", "Score": "0", "CreationDate": "2012-10-12T19:41:34.050", "ParentId": "12865949", "CommentCount": "0", "OwnerUserId": "1568792"}, "12865974": {"Id": "12865974", "PostTypeId": "2", "Body": "<p><code>int</code> is not a class, its a native type.</p>\n<p>When you declare an int:</p>\n<pre><code>int x;\n</code></pre>\n<p>You do create an instance of <code>int</code>.</p>\n<p>C++ is different than many other languages in this respect where, like in Java or Ruby for instance, \"everything is an object.\"  This generally means that everything is derived from one root class, or at least appears to be.</p>\n<p>Consider for example Ruby, where everything is ultimately derived from <code>Object</code>.  <code>Object</code>, in turn, is implemented as a fully-fledged class.  It has methods on it like <code>to_s</code> and code that implements those methods.</p>\n<p>C++ isn't like that.  C++ has very basic types, like <code>int</code>, that aren't derived from anything.  There's no code behind these types, and they have no methods on them.  You can't do something like this:</p>\n<pre><code>int x = 42;\nstring s = x.to_s();\n</code></pre>\n<p>because there's no <code>to_s()</code> method on an <code>int</code>, or any methods.</p>\n<p>You also asked,</p>\n<blockquote>\n<p id=\"so_12865949_12865974_0\">If 'int' is a class , in which file it is stored??</p>\n</blockquote>\n<p><code>int</code> isn't \"stored\" in any file.  The meaning and definition of an <code>int</code> is built in to the compiler itself.  There's no file that you can open on your machine to see how an <code>int</code> is defined.  When you do something like:</p>\n<pre><code>int x = 42;\nx += 77;\n</code></pre>\n<p>...the compiler doesn't have to look in any header file to know how to add 77 to 42.  It already knows, because and <code>int</code> is something that the compiler already knows about.  Almost like a-priori knowledge, it's \"just there\".</p>\n<p>How does the compiler already know?  Because the people who wrote the compiler (probably using C or C++, by the way) coded that knowledge in.  How did the compiler writes know what to write?  They followed a document, called the C++ Standard, which explains exactly how a conformant compiler should behave.</p>\n", "LastEditorUserId": "241536", "LastActivityDate": "2012-10-12T19:59:32.417", "Score": "1", "CreationDate": "2012-10-12T19:41:21.347", "ParentId": "12865949", "CommentCount": "4", "LastEditDate": "2012-10-12T19:59:32.417", "OwnerUserId": "241536"}, "12865949": {"ViewCount": "140", "Body": "<p>I want to know wether the 'int' is defined as a class , means like somewhere in some header file their is a class named int </p>\n<pre><code>class int\n{\n\n}\n</code></pre>\n<p>And when we declare a variable , an instance of class int is created ?\nIf 'int' is a class , in which file it is stored??</p>\n", "Title": "Is \"int\" datatype is defined as a class?", "CreationDate": "2012-10-12T19:39:48.523", "LastActivityDate": "2012-10-12T19:59:32.417", "CommentCount": "1", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2012-10-12T19:50:56.003", "LastEditorUserId": "87234", "Id": "12865949", "Score": "0", "OwnerUserId": "1686794", "Tags": "<c++>", "AnswerCount": "4"}, "12866014": {"Id": "12866014", "PostTypeId": "2", "Body": "<p>No; <code>int</code> is <em>not</em> a type of \"class-type\". It is a so-called \"scalar\" type.</p>\n<p>To determine more generally whether a given object type <code>T</code> is of scalar, array, union or class type, you can <code>#include &lt;type_traits&gt;</code> and use <code>std::is_scalar&lt;T&gt;::value</code>, and similarly for the traits <code>is_array</code>, <code>is_union</code> and <code>is_class</code>.</p>\n<p>(Note further that not all types are object types; there are also reference types and function types. You can use <a href=\"http://en.cppreference.com/w/cpp/types/is_object\" rel=\"nofollow\"><code>std::is_object</code></a> and <code>is_function</code> and <code>is_reference</code> to make that distincition first.)</p>\n", "LastActivityDate": "2012-10-12T19:44:08.897", "Score": "4", "CreationDate": "2012-10-12T19:44:08.897", "ParentId": "12865949", "CommentCount": "1", "OwnerUserId": "596781"}, "bq_ids": {"n4140": {"so_12865949_12866041_0": {"length": 42, "quality": 1.0, "section_id": 7211}}, "n3337": {"so_12865949_12866041_0": {"length": 42, "quality": 1.0, "section_id": 6955}}, "n4659": {"so_12865949_12866041_0": {"length": 41, "quality": 0.9761904761904762, "section_id": 8720}}}, "12866041": {"Id": "12866041", "PostTypeId": "2", "Body": "<p>No, <code>int</code> is a fundamental type, as defined in:</p>\n<h3>3.9.1 Fundamental types [basic.fundamental]</h3>\n<blockquote>\n<p id=\"so_12865949_12866041_0\">2) There are five signed integer types : \u201c<code>signed char</code>\u201d, \u201c<code>short int</code>\u201d, \u201c<code>int</code>\u201d, \u201c<code>long int</code>\u201d., and \u201clong long int\u201d.\n  In this list, each type provides at least as much storage as those preceding it in the list. Plain ints have the natural size\n  suggested by the architecture of the execution environment); the other signed integer types are provided to meet special\n  needs.</p>\n</blockquote>\n", "LastActivityDate": "2012-10-12T19:45:42.073", "Score": "0", "CreationDate": "2012-10-12T19:45:42.073", "ParentId": "12865949", "CommentCount": "0", "OwnerUserId": "673730"}});