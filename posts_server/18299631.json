post_cb({"18299631": {"CommentCount": "0", "ViewCount": "320", "CreationDate": "2013-08-18T13:32:35.493", "LastActivityDate": "2013-08-18T13:43:51.243", "Title": "Accessing null-termination character in std::string (string subscript out of range)", "AcceptedAnswerId": "18299710", "PostTypeId": "1", "Id": "18299631", "Score": "2", "Body": "<p>Consider the following very simple text example:</p>\n<pre><code>#include &lt;stdio.h&gt;\n#include &lt;string&gt;\nint main() {\n    std::string x(\"ugabuga\");\n    int i=0;\n    while (x[i]) {\n        ++i;\n    }\n    printf(\"%d\\n\",i); //should print 7\n    return 0;\n}\n</code></pre>\n<p>I would expect the program to iterate over all characters of the string, then reach the null-terminating character breaking the loop and reach the program end correctly.\nHowever, when I tried compiling it in debug mode under Visual Studio 2010 I am reaching an exception \"string subscript out of range\".\nWhen compiling in release mode this program passes, but my bigger project depending on this behaviour crashes - perhaps because of this issue.</p>\n<p>However, when I checked the specification of <code>std::string::operator[]</code> at <a href=\"http://www.cplusplus.com/reference/string/string/operator%5B%5D/\" rel=\"nofollow\">www.cplusplus.com</a>, the end-character string is handled explicitly:</p>\n<blockquote>\n<p id=\"so_18299631_18299631_0\">If pos is equal to the string length, the function returns a reference to a null character ('\\0').</p>\n</blockquote>\n<p>I would like to ask here:</p>\n<ul>\n<li>Is my interpretation of specification of <code>std::string</code> correct? Or am I missing something?</li>\n<li>If the problem lies on VS side of implementation, how can I easily fix this - hopefully without calling <code>length()</code> each time I use the <code>operator[]</code>? e.g. will using <code>c_str()[i]</code> will be safe?</li>\n<li>If the problem lies on VS side of implementation - do you know if it is fixed in VS 2012 or pehaps will be fixed in the future?</li>\n</ul>\n", "Tags": "<c++><visual-c++>", "OwnerUserId": "635654", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_18299631_18299710_8": {"section_id": 1617, "quality": 0.6428571428571429, "length": 9}, "so_18299631_18299631_0": {"section_id": 3498, "quality": 0.5555555555555556, "length": 5}}, "n3337": {"so_18299631_18299710_8": {"section_id": 1613, "quality": 0.6428571428571429, "length": 9}, "so_18299631_18299631_0": {"section_id": 3363, "quality": 0.5555555555555556, "length": 5}}, "n4659": {"so_18299631_18299710_8": {"section_id": 1770, "quality": 0.7142857142857143, "length": 10}, "so_18299631_18299631_0": {"section_id": 4261, "quality": 0.5555555555555556, "length": 5}}}, "18299710": {"ParentId": "18299631", "CommentCount": "7", "Body": "<p>This is one of the things that changed between C++03 and C++11.</p>\n<p>It seems it is undefined behaviour in C++03:</p>\n<blockquote>\n<p id=\"so_18299631_18299710_0\"><strong>21.3.4 basic_string element access [lib.string.access]</strong></p>\n<p id=\"so_18299631_18299710_1\"><code>const_reference operator[](size_type pos) const;</code></p>\n<p id=\"so_18299631_18299710_2\"><code>reference operator[](size_type pos);</code></p>\n<p id=\"so_18299631_18299710_3\">1 Returns: If <code>pos &lt; size()</code>, returns <code>data()[pos]</code>. Otherwise, if <code>pos == size()</code>, the <code>const version returns charT()</code>. Otherwise, the behavior is undefined.</p>\n</blockquote>\n<p>while in C++11, it is OK.</p>\n<blockquote>\n<p id=\"so_18299631_18299710_4\"><strong>21.4.5 basic_string element access [string.access]</strong></p>\n<p id=\"so_18299631_18299710_5\"><code>const_reference operator[](size_type pos) const;</code></p>\n<p id=\"so_18299631_18299710_6\"><code>reference operator[](size_type pos);</code></p>\n<p id=\"so_18299631_18299710_7\">1 Requires: pos &lt;= size().</p>\n<p id=\"so_18299631_18299710_8\">2 Returns: <code>*(begin() + pos)</code> if <code>pos &lt; size()</code>, otherwise a reference to an object of type <code>T</code> with value <code>charT();</code> the referenced value shall not be modified.</p>\n</blockquote>\n", "OwnerUserId": "661519", "PostTypeId": "2", "Id": "18299710", "Score": "6", "CreationDate": "2013-08-18T13:41:57.470", "LastActivityDate": "2013-08-18T13:41:57.470"}});