post_cb({"27121591": {"ParentId": "27121395", "PostTypeId": "2", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_27121395_27121591_0\"><em>Am I correct that the only thing I can construct an object by using exclusively nullptr?</em></p>\n</blockquote>\n<p>No. This is covered in \u00a74.10 [conv.ptr]:</p>\n<blockquote>\n<p id=\"so_27121395_27121591_1\">A null pointer constant of integral type can be converted to a prvalue of type <code>std::nullptr_t</code>.</p>\n</blockquote>\n<p>where a <em>null pointer constant</em> is defined as follows:</p>\n<blockquote>\n<p id=\"so_27121395_27121591_2\">A <em>null pointer constant</em> is an integer literal (2.14.2) with value zero or a prvalue of type <code>std::nullptr_t</code>.</p>\n</blockquote>\n<p>In other words, your constructor can be invoked also with various integer literals of value 0:</p>\n<pre><code>CA{ 0 };\nCA{ 0u };\nCA{ 0LL };\nCA{ 0x0 };\n</code></pre>\n", "OwnerUserId": "3953764", "LastEditorUserId": "3953764", "LastEditDate": "2015-06-27T21:01:54.623", "Id": "27121591", "Score": "4", "CreationDate": "2014-11-25T08:11:15.533", "LastActivityDate": "2015-06-27T21:01:54.623"}, "27121474": {"ParentId": "27121395", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>According to the documentation:</p>\n<blockquote>\n<p id=\"so_27121395_27121474_0\">std::nullptr_t is the type of the null pointer literal, nullptr.</p>\n</blockquote>\n<p>Which means yes, you can construct this object only with <em>nullptr</em> or a corresponding integral value (as in the answer below explained).\nCheck out <a href=\"http://en.cppreference.com/w/cpp/types/nullptr_t\" rel=\"nofollow\">this</a> example as it shows a situation where u need it.</p>\n", "OwnerUserId": "4276486", "LastEditorUserId": "4276486", "LastEditDate": "2014-11-25T09:02:03.000", "Id": "27121474", "Score": "2", "CreationDate": "2014-11-25T08:02:31.393", "LastActivityDate": "2014-11-25T09:02:03.000"}, "27121395": {"CommentCount": "2", "ViewCount": "391", "CreationDate": "2014-11-25T07:57:55.390", "LastActivityDate": "2015-06-27T21:01:54.623", "Title": "C++ nullptrt_t as argument in a constructor", "AcceptedAnswerId": "27121591", "PostTypeId": "1", "Id": "27121395", "Score": "5", "Body": "<p>Reading some code I found a class accepting just the new C++11 <code>nullptr_t</code> as parameter. The class looks like the one below. </p>\n<p>Am I correct that the only thing I can construct an object by using exclusively <code>nullptr</code>? </p>\n<pre><code>class CA {\n public:\n CA(nullptr_t) {}  \n};\n</code></pre>\n", "Tags": "<c++11><nullptr>", "OwnerUserId": "245416", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_27121395_27121512_0": {"section_id": 5366, "quality": 0.9142857142857143, "length": 32}, "so_27121395_27121591_2": {"section_id": 39, "quality": 0.8181818181818182, "length": 9}, "so_27121395_27121512_1": {"section_id": 39, "quality": 0.8181818181818182, "length": 9}, "so_27121395_27121474_0": {"section_id": 91, "quality": 0.8333333333333334, "length": 5}, "so_27121395_27121591_1": {"section_id": 39, "quality": 1.0, "length": 10}}, "n3337": {"so_27121395_27121512_0": {"section_id": 5162, "quality": 0.9142857142857143, "length": 32}, "so_27121395_27121591_2": {"section_id": 5947, "quality": 0.7272727272727273, "length": 8}, "so_27121395_27121512_1": {"section_id": 5947, "quality": 0.7272727272727273, "length": 8}, "so_27121395_27121474_0": {"section_id": 36, "quality": 0.6666666666666666, "length": 4}, "so_27121395_27121591_1": {"section_id": 36, "quality": 1.0, "length": 10}}, "n4659": {"so_27121395_27121512_0": {"section_id": 6791, "quality": 0.9142857142857143, "length": 32}, "so_27121395_27121591_2": {"section_id": 39, "quality": 0.8181818181818182, "length": 9}, "so_27121395_27121512_1": {"section_id": 39, "quality": 0.8181818181818182, "length": 9}, "so_27121395_27121474_0": {"section_id": 39, "quality": 0.6666666666666666, "length": 4}, "so_27121395_27121591_1": {"section_id": 39, "quality": 1.0, "length": 10}}}, "27121512": {"ParentId": "27121395", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The standard specifies, at \u00a72.14.7.1, that:</p>\n<blockquote>\n<p id=\"so_27121395_27121512_0\">The pointer literal is the keyword <code>nullptr</code>. It is a prvalue of type <code>std::nullptr_t</code>. [ Note: <code>std::nullptr_t</code> is a distinct type that is neither a pointer type nor a pointer to member type; rather, a prvalue of this type is a null pointer constant and can be converted to a null pointer value or null member pointer value. \u2014endnote]</p>\n</blockquote>\n<p>The only prvalue of type <code>nullptr_t</code> is <code>nullptr</code> which is then convertible to other pointer type following the rules specified in \u00a74.10 and \u00a74.11.</p>\n<p>Other integer literals can be converted to a value of type <code>std::nullptr_t</code> as per \u00a74.10.1:</p>\n<blockquote>\n<p id=\"so_27121395_27121512_1\">A null pointer constant is an integer literal (2.14.2) with value zero or a prvalue of type <code>std::nullptr_t</code>.</p>\n</blockquote>\n<p>Therefore you can use an interger literal with value zero or <code>nullptr</code>. </p>\n<p>Specifically:</p>\n<ul>\n<li><code>0</code></li>\n<li><code>0u</code>, <code>0U</code></li>\n<li><code>0l</code>, <code>0L</code></li>\n<li><code>0ul</code>, <code>0uL</code>, <code>0Ul</code>, <code>0UL</code></li>\n<li><code>0ll</code>, <code>0LL</code></li>\n<li><code>0ull</code>, <code>0uLL</code>, <code>0ULL</code></li>\n<li><code>nullptr</code></li>\n<li><code>NULL</code></li>\n</ul>\n<p>I might be missing some cases, so fell free to correct me.</p>\n", "OwnerUserId": "493122", "LastEditorUserId": "493122", "LastEditDate": "2014-11-25T14:43:49.730", "Id": "27121512", "Score": "6", "CreationDate": "2014-11-25T08:04:45.193", "LastActivityDate": "2014-11-25T14:43:49.730"}});