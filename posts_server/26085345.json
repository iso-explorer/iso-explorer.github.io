post_cb({"26085345": {"CommentCount": "10", "ViewCount": "325", "PostTypeId": "1", "ClosedDate": "2014-09-28T14:09:36.610", "LastEditorUserId": "2548699", "CreationDate": "2014-09-28T13:28:16.050", "LastActivityDate": "2014-09-30T12:48:41.150", "Title": "Trying to understand \u00a73.3.1/4", "LastEditDate": "2014-09-30T12:48:41.150", "Id": "26085345", "Score": "11", "Body": "<p>Apparently from \u00a73.3.1/4, this snippet doesn't compile because it contains two different entities with the same name <code>A</code> in the global namespace, <code>extern int A;</code> and <code>static int A = 101;</code>. That is, one has external and the other has internal linkage.</p>\n<p><a href=\"http://coliru.stacked-crooked.com/a/91aab5a4a37ad8dd\" rel=\"nofollow\">live example</a></p>\n<pre><code>#include &lt;iostream&gt;\nextern int A;\nstatic int A = 101;\nclass A{};\nint main()\n{\n    std::cout &lt;&lt; A &lt;&lt; '\\n';\n}\n</code></pre>\n<p>Why then, does this code compile?</p>\n<pre><code>#include &lt;iostream&gt;\nstatic int A = 101;\nextern int A;\nclass A{};\nint main()\n{\n    std::cout &lt;&lt; A &lt;&lt; '\\n';\n}\n</code></pre>\n<p><strong>Edit</strong></p>\n<p>I think the accepted answer for the question, of which this one is considered a dup, basically says that in the second snippet, variable <code>A</code> still has internal linkage, despite the <code>extern</code> declaration. But this is in disagreement with paragraph \u00a73.5/4 that I mentioned below in a comment to @dyp.</p>\n<p>\u00a73.5/4:</p>\n<blockquote>\n<p id=\"so_26085345_26085345_0\">An unnamed namespace or a namespace declared directly or indirectly\n  within an unnamed namespace has internal linkage. All other namespaces\n  have external linkage. A name having namespace scope that has not been\n  given internal linkage above has the same linkage as the enclosing\n  namespace if it is the name of</p>\n<p id=\"so_26085345_26085345_1\">\u2014 a variable; or</p>\n<p id=\"so_26085345_26085345_2\">...</p>\n</blockquote>\n<p><strong>Edit 1:</strong></p>\n<p>The OP uses \u00a73.5/6 to justify his answer to the other question.</p>\n<p>\u00a73.5/6 (emphasis mine):</p>\n<blockquote>\n<p id=\"so_26085345_26085345_3\">The name of a function <strong>declared in block scope</strong> and the name of a\n  variable <strong>declared by a block scope</strong> extern declaration have\n  linkage. If there is a visible declaration of an entity with linkage\n  having the same name and type, ignoring entities declared outside the\n  innermost enclosing namespace scope, <strong>the block scope declaration</strong>\n  declares that same entity and receives the linkage of the previous\n  declaration. If there is more than one such matching entity, the\n  program is ill-formed. Otherwise, if no matching entity is found, the\n  <strong>block scope</strong> entity receives external linkage.</p>\n</blockquote>\n<p>It's clear this answer doesn't apply to the snippets shown on my question, as the declarations of the variable <code>A</code> are <strong>not</strong> block scope declarations.</p>\n<p><strong>Edit 2:</strong></p>\n<p><a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_active.html#1603\" rel=\"nofollow\">This issue</a> with \"ready\" status says that \u00a77.1.1/7 should be deleted because it's false. </p>\n", "Tags": "<c++><c++11><language-lawyer><linkage>", "OwnerUserId": "2548699", "AnswerCount": "1"}, "26085557": {"ParentId": "26085345", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>The <code>extern</code> specifier <em>does not</em> require that the name has external linkage.</p>\n<h2>The first example</h2>\n<p><code>extern int A;</code> is a declaration of a name <code>A</code> with external linkage - but the external linkage is implied since it's a declaration at namespace scope (outside of an unnamed namespace).</p>\n<p><code>static int A</code>; declares a name with <em>internal linkage</em>.</p>\n<p>The two declarations disagree about the linkage, hence the error.</p>\n<h2>The second example</h2>\n<p>Here, we first declare <code>static int A;</code>, i.e. a name <code>A</code> with <em>internal linkage</em>.</p>\n<p>The declaration <code>extern int A;</code> doesn't declare <code>A</code> with external linkage, it merely redeclares a name that is found via name lookup.</p>\n<p>[dcl.stc]/7</p>\n<blockquote>\n<p id=\"so_26085345_26085557_0\">The linkages implied by successive declarations for a given entity\n  shall agree. That is, within a given scope, each declaration declaring\n  the same variable name or the same overloading of a function name\n  shall imply the same linkage. Each function in a given set of\n  overloaded functions can have a different linkage, however.</p>\n<p id=\"so_26085345_26085557_1\">[ <em>Example</em>:</p>\n<pre><code>static char* f(); // f() has internal linkage\nchar* f() // f() still has internal linkage\n{ /* ... */ }\n\nchar* g(); // g() has external linkage\nstatic char* g() // error: inconsistent linkage\n{ /* ... */ }\n\n// [left out some examples with `inline`]\n\nstatic void n();\ninline void n(); // internal linkage\n\nstatic int a; // a has internal linkage\nint a; // error: two definitions\n\nstatic int b; // b has internal linkage\nextern int b; // b still has internal linkage\n\nint c; // c has external linkage\nstatic int c; // error: inconsistent linkage\n\nextern int d; // d has external linkage\nstatic int d; // error: inconsistent linkage\n</code></pre>\n<p id=\"so_26085345_26085557_2\">-- <em>end example</em> ]</p>\n</blockquote>\n", "OwnerUserId": "420683", "LastEditorUserId": "420683", "LastEditDate": "2014-09-28T13:57:13.163", "Id": "26085557", "Score": "4", "CreationDate": "2014-09-28T13:51:53.377", "LastActivityDate": "2014-09-28T13:57:13.163"}, "bq_ids": {"n4140": {"so_26085345_26085345_3": {"section_id": 7139, "quality": 0.9833333333333333, "length": 59}, "so_26085345_26085345_0": {"section_id": 7137, "quality": 1.0, "length": 31}, "so_26085345_26085557_0": {"section_id": 5397, "quality": 0.9444444444444444, "length": 34}}, "n3337": {"so_26085345_26085345_3": {"section_id": 6883, "quality": 0.9833333333333333, "length": 59}, "so_26085345_26085345_0": {"section_id": 6881, "quality": 1.0, "length": 31}, "so_26085345_26085557_0": {"section_id": 5192, "quality": 0.9444444444444444, "length": 34}}, "n4659": {"so_26085345_26085345_3": {"section_id": 8640, "quality": 0.9833333333333333, "length": 59}, "so_26085345_26085345_0": {"section_id": 8638, "quality": 1.0, "length": 31}, "so_26085345_26085557_0": {"section_id": 6822, "quality": 0.9444444444444444, "length": 34}}}});