post_cb({"20993147": {"CommentCount": "4", "ViewCount": "180", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2014-01-08T10:37:40.363", "LastActivityDate": "2014-01-08T11:12:32.437", "Title": "is reference in c++ internally compiled as pointers or alias?", "LastEditDate": "2017-05-23T10:30:51.207", "Id": "20993147", "Score": "2", "Body": "<p>This tutorial says,</p>\n<blockquote>\n<p id=\"so_20993147_20993147_0\">You're probably noticing a similarity to pointers here--and that's true, references are often implemented by the compiler writers as pointers</p>\n</blockquote>\n<p>In similar, one commented in</p>\n<p><a href=\"https://stackoverflow.com/questions/2765999/what-is-a-reference-variable-in-c\">What is a reference variable in C++?</a></p>\n<p>as </p>\n<blockquote>\n<p id=\"so_20993147_20993147_1\">Technically not. If bar was a variable you could get its address. A reference is an alias to another variable (not the address of as this would imply the compiler would need to insert a dereference operation). When this gets compiled out bar probably is just replaced by foo</p>\n</blockquote>\n<p>Which statement is true?</p>\n", "Tags": "<c++><pointers><reference>", "OwnerUserId": "2530921", "AnswerCount": "3"}, "20993504": {"ParentId": "20993147", "CommentCount": "0", "Body": "<p>The C++ Standard states, at \u00a78.3.2/4:</p>\n<blockquote>\n<p id=\"so_20993147_20993504_0\">It is unspecified whether or not a reference requires storage.</p>\n</blockquote>\n<p>And this non-specification is the main reason why both a pointer implementation and an aliasing implementation are <em>valid</em> implementations.</p>\n<p>Therefore, both can be right.</p>\n", "OwnerUserId": "493122", "PostTypeId": "2", "Id": "20993504", "Score": "1", "CreationDate": "2014-01-08T10:53:58.067", "LastActivityDate": "2014-01-08T10:53:58.067"}, "20993295": {"ParentId": "20993147", "LastEditDate": "2014-01-08T10:56:16.060", "CommentCount": "0", "CreationDate": "2014-01-08T10:44:15.597", "OwnerUserId": "52724", "LastEditorUserId": "52724", "PostTypeId": "2", "Id": "20993295", "Score": "1", "Body": "<p>They're both true, in a manner of speaking. Whether a reference gets compiled as a pointer is an implementation detail of the compiler, rather than a part of the C++ standard. Some compilers may use regular pointers, and some may use some other form or aliasing the referenced variable.</p>\n<p>Consider the folowing line:</p>\n<pre><code>int var = 0;\nint &amp;myRef = var;\n</code></pre>\n<p>Compiler \"A\" may compile <code>myRef</code> as a pointer, and compiler \"B\" might use some other method for using myRef.</p>\n<p>Of course, the same compiler may also compile the reference in different ways depending on the context. For example, in my example above, <code>myRef</code> may get optimized away completely, whereas in contexts where the reference is required to be present (such as a method parameter), it may be compiled to a pointer.</p>\n", "LastActivityDate": "2014-01-08T10:56:16.060"}, "bq_ids": {"n4140": {"so_20993147_20993504_0": {"section_id": 3221, "quality": 1.0, "length": 5}}, "n3337": {"so_20993147_20993504_0": {"section_id": 3095, "quality": 1.0, "length": 5}}, "n4659": {"so_20993147_20993504_0": {"section_id": 3978, "quality": 1.0, "length": 5}}}, "20993354": {"ParentId": "20993147", "LastEditDate": "2014-01-08T11:12:32.437", "CommentCount": "4", "CreationDate": "2014-01-08T10:47:12.473", "OwnerUserId": "404970", "LastEditorUserId": "404970", "PostTypeId": "2", "Id": "20993354", "Score": "2", "Body": "<p>Both are true, but under different circumstances.</p>\n<p>Semantically, a reference variable just introduces a new name for an object (in the C++ sense of \"object\").<br>\n(There's plenty of confusion around what \"variable\" and \"object\" mean, but I <em>think</em> that a \"variable\" in many other languages is called an \"object\" in C++, and that's what your second quote refers to as a \"variable\".)</br></p>\n<p>If this reference isn't stored anywhere or passed as a parameter, it doesn't necessarily have any representation at all (the compiler can just use whatever it refers to instead).</p>\n<p>If it is stored (e.g. as a member) or passed as a parameter, the compiler needs to give it a representation, and the most sensible one is to use the address of the object it refers to, which is exactly the same way as pointers are represented.</p>\n<p>Note that the standard explicitly says that it it unspecified whether a reference variable has any size at all.</p>\n", "LastActivityDate": "2014-01-08T11:12:32.437"}});