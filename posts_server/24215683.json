post_cb({"bq_ids": {"n4140": {"so_24215683_24215721_0": {"length": 17, "quality": 0.6296296296296297, "section_id": 6155}, "so_24215683_24215683_0": {"length": 22, "quality": 0.9166666666666666, "section_id": 5965}, "so_24215683_24215683_2": {"length": 20, "quality": 0.8695652173913043, "section_id": 5768}}, "n3337": {"so_24215683_24215721_0": {"length": 26, "quality": 0.9629629629629629, "section_id": 5917}, "so_24215683_24215683_0": {"length": 22, "quality": 0.9166666666666666, "section_id": 5734}, "so_24215683_24215683_2": {"length": 20, "quality": 0.8695652173913043, "section_id": 5541}}, "n4659": {"so_24215683_24215683_0": {"length": 22, "quality": 0.9166666666666666, "section_id": 7456}, "so_24215683_24215683_2": {"length": 20, "quality": 0.8695652173913043, "section_id": 7225}}}, "24215683": {"ViewCount": "318", "Body": "<p>C++11 \u00a75.1.2/6</p>\n<blockquote>\n<p id=\"so_24215683_24215683_0\">The closure type for a lambda-expression with no lambda-capture has a [...] conversion function [...]. The value returned by this conversion function shall be the address of a function that, when invoked, has the same effect as invoking the closure type\u2019s function call operator.</p>\n</blockquote>\n<p>Note: this doesn't say that the conversion will always return the <em>same</em> value for the same type. So, does the following program run afoul of UB <strong>and</strong> all the meaning destruction that it implies?</p>\n<pre><code>int main() {\n  auto f = []{};\n  return ((+f) == (+f));\n} \n</code></pre>\n<p>Note: I'd be thoroughly surprised if any real compiler were to give anything but <code>true</code>, but the question is about if a compiler could <em>legally</em> do anything else? </p>\n<hr>\n<p>Edit:</p>\n<p>C++11 \u00a71.3.24</p>\n<blockquote>\n<p id=\"so_24215683_24215683_1\">undefined behavior</p>\n<p id=\"so_24215683_24215683_2\">behavior for which this International Standard imposes no requirements\n  [ Note: Undefined behavior may be expected when this International Standard omits any explicit definition of behavior or when a program uses an erroneous construct or erroneous data</p>\n</blockquote>\n</hr>", "Title": "Does this c++11 lambda code invoke undefined behavior?", "CreationDate": "2014-06-14T01:06:57.073", "LastActivityDate": "2014-06-14T16:18:00.217", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2014-06-14T16:18:00.217", "LastEditorUserId": "1343", "Id": "24215683", "Score": "3", "OwnerUserId": "1343", "Tags": "<c++><c++11><lambda><language-lawyer><undefined-behavior>", "AnswerCount": "2"}, "24215721": {"Id": "24215721", "PostTypeId": "2", "Body": "<p>It is OK to test function pointers (of the same type) for equality, even when they are not equal to each other (otherwise what would be the point of <code>==</code> for function pointers).</p>\n<p>From <code>[expr.eq]</code>:</p>\n<blockquote>\n<p id=\"so_24215683_24215721_0\">Pointers of the same type (after pointer conversions) can be compared for equality. Two pointers of the same type compare equal if and only if they are both null, both point to the same function, or both represent the same address (3.9.2).</p>\n</blockquote>\n<p>There is nothing in your program that has undefined behavior. Your program has unspecified behavior, in that the equality check could return either <code>true</code> or <code>false</code>, but your program could not summon nasal demons, fire the missiles, wipe your harddrive, or any of the other nasty behaviours associated with undefined behaviour.</p>\n", "LastEditorUserId": "485561", "LastActivityDate": "2014-06-14T01:45:46.953", "Score": "1", "CreationDate": "2014-06-14T01:13:30.843", "ParentId": "24215683", "CommentCount": "12", "LastEditDate": "2014-06-14T01:45:46.953", "OwnerUserId": "485561"}, "24215764": {"Id": "24215764", "PostTypeId": "2", "Body": "<p>No, it's neither undefined nor unspecified. You don't know ahead of time whether it'll always be the <em>same</em> result (<code>true</code> or <code>false</code>), but there's nothing in that which means your program has undefined behaviour or that the result falls under the definition of an \"unspecified value\".</p>\n<p>Simply put, this is about as UB as a call to <code>rand()</code>, or even to <code>&amp;someVariable</code>.</p>\n", "LastActivityDate": "2014-06-14T01:21:04.513", "Score": "2", "CreationDate": "2014-06-14T01:21:04.513", "ParentId": "24215683", "CommentCount": "12", "OwnerUserId": "560648"}});