post_cb({"bq_ids": {"n4140": {"so_6930419_6930483_0": {"length": 12, "quality": 1.0, "section_id": 3913}, "so_6930419_6930463_0": {"length": 12, "quality": 1.0, "section_id": 3913}}, "n3337": {"so_6930419_6930483_0": {"length": 12, "quality": 1.0, "section_id": 3773}, "so_6930419_6930463_0": {"length": 12, "quality": 1.0, "section_id": 3773}}, "n4659": {"so_6930419_6930483_0": {"length": 9, "quality": 0.75, "section_id": 4799}, "so_6930419_6930463_0": {"length": 9, "quality": 0.75, "section_id": 4799}}}, "6930483": {"Id": "6930483", "PostTypeId": "2", "Body": "<p>From C++03 6.6.3/2 \"The return statement\":</p>\n<blockquote>\n<p id=\"so_6930419_6930483_0\">Flowing off the end of a function is equivalent to a return with no value; this results in undefined behavior in a value-returning function.</p>\n</blockquote>\n<p>Since your function flows \"off the end\", it's UB and you can expect nothing (or anything).</p>\n<p>As a side note: this is slightly different than in C, where flowing off the end of a function that is declared to return something is <em>not</em> UB in itself - it becomes UB only if the caller <em>uses</em> the result of a function that does that.</p>\n<p>In other words, using your example, in C++ you have UB at the moment <code>func()</code> returns, whether that result is assigned to <code>x</code> or not. In C it's UB only because you assign the result to <code>x</code>.</p>\n", "LastEditorUserId": "12711", "LastActivityDate": "2011-08-03T17:46:16.283", "Score": "2", "CreationDate": "2011-08-03T17:19:59.063", "ParentId": "6930419", "CommentCount": "0", "OwnerUserId": "12711", "LastEditDate": "2011-08-03T17:46:16.283"}, "6930504": {"Id": "6930504", "PostTypeId": "2", "Body": "<p>As everyone else has said, you have undefined behavior. As for how to fix/identify it, one way would be to use warning flags when compiling your program. If you run your code in codepad, it's easy to see the issue:</p>\n<p><a href=\"http://codepad.org/MXDSniWw\" rel=\"nofollow\">http://codepad.org/MXDSniWw</a></p>\n<pre><code>cc1plus: warnings being treated as errors\nIn function 'int func()':\nLine 5: warning: control reaches end of non-void function\n</code></pre>\n<p>In <code>func()</code>, your if loop is never true, but you haven't specified any other return value, so you have undefined behavior. Adding <code>return 0;</code> after the <code>if..</code> will fix the issue. </p>\n", "LastActivityDate": "2011-08-03T17:21:52.650", "CommentCount": "0", "CreationDate": "2011-08-03T17:21:52.650", "ParentId": "6930419", "Score": "0", "OwnerUserId": "389634"}, "6930450": {"Id": "6930450", "PostTypeId": "2", "Body": "<p>It is causing undefined behavior. The condition is false so there is no return value from the function.</p>\n", "LastActivityDate": "2011-08-03T17:17:30.103", "CommentCount": "0", "CreationDate": "2011-08-03T17:17:30.103", "ParentId": "6930419", "Score": "4", "OwnerUserId": "452307"}, "6930419": {"ViewCount": "293", "Body": "<p>I encountered this problem in my program which was creating problems. so let me explain it by a example:</p>\n<pre><code>#include&lt;iostream&gt;\n\nint func(){\n        if(1==0) return 100;\n}\n\nint main(){\n\n        int x=99;\n        x= func();\n        std::cout&lt;&lt;\"Value of x: \" &lt;&lt; x &lt;&lt;std::endl;\n}\n</code></pre>\n<p>I had thought the output will be <code>99</code> but output is <code>0</code>, so what's going on here?</p>\n", "AcceptedAnswerId": "6930463", "Title": "Assignment to non-void functions (returning nothing) can change the values?", "CreationDate": "2011-08-03T17:15:06.607", "Id": "6930419", "CommentCount": "1", "LastEditDate": "2012-11-14T20:12:34.660", "PostTypeId": "1", "OwnerDisplayName": "user72424", "LastEditorUserId": "1065190", "LastActivityDate": "2012-11-14T20:12:34.660", "Score": "3", "Tags": "<c++>", "AnswerCount": "6"}, "6930463": {"Id": "6930463", "PostTypeId": "2", "Body": "<p>You have <em>undefined behavior</em> because your function is declared to return an <code>int</code> but the execution path through the function never reaches a <code>return</code> statement.</p>\n<p>In C++ it is illegal to exit a function defined as returning a non-<code>void</code> type other than via a return statement with an argument.</p>\n<p>ISO/IEC 14882:2003 6.6.3 [stmt.return] / 2:</p>\n<blockquote>\n<p id=\"so_6930419_6930463_0\">[...] Flowing off the end of a function is equivalent to a return with no value; this results in undefined behavior in a value-returning function.</p>\n</blockquote>\n", "LastEditorUserId": "19563", "LastActivityDate": "2011-08-03T17:27:37.827", "Score": "3", "CreationDate": "2011-08-03T17:18:24.227", "ParentId": "6930419", "CommentCount": "0", "OwnerUserId": "19563", "LastEditDate": "2011-08-03T17:27:37.827"}, "6930566": {"Id": "6930566", "PostTypeId": "2", "Body": "<p>It depends on the compiler you are using.</p>\n<p>When you compile this code, a normal compiler will cause a warning similar to:</p>\n<blockquote>\n<p id=\"so_6930419_6930566_0\">warning C4715: 'func' : not all control paths return a value</p>\n</blockquote>\n<p>It looks like your compiler is placing a statement that returns <code>0</code> when it doesn't find a <code>return</code> statement on the way out.  So, <code>x</code> will be assigned <code>0</code>.</p>\n", "LastActivityDate": "2011-08-03T17:26:21.253", "CommentCount": "0", "CreationDate": "2011-08-03T17:26:21.253", "ParentId": "6930419", "Score": "1", "OwnerUserId": "493683"}, "6939990": {"Id": "6939990", "PostTypeId": "2", "Body": "<p>So you expect a 99, the safest bet is to pass x by reference:</p>\n<pre><code>#include&lt;iostream&gt;\n\nvoid func(int&amp; a){\n    if (1==0)\n        a = 100;\n}\n\nint main(){\n    int x(99);\n    func(x);\n    std::cout &lt;&lt; \"Value of x: \" &lt;&lt; x &lt;&lt; std::endl;\n}\n</code></pre>\n", "LastActivityDate": "2011-08-04T10:42:45.947", "CommentCount": "0", "CreationDate": "2011-08-04T10:42:45.947", "ParentId": "6930419", "Score": "0", "OwnerUserId": "870609"}});