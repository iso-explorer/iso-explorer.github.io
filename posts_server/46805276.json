post_cb({"bq_ids": {"n4140": {"so_46805276_46805276_0": {"length": 35, "quality": 1.0, "section_id": 5504}}, "n3337": {"so_46805276_46805276_0": {"length": 35, "quality": 1.0, "section_id": 5290}}, "n4659": {"so_46805276_46805276_0": {"length": 32, "quality": 0.9142857142857143, "section_id": 6938}}}, "46805276": {"ViewCount": "114", "Body": "<p>Consider an example:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\ntemplate &lt;class, class T&gt;\nusing alias = T;\n\ntemplate &lt;template &lt;class...&gt; class&gt;\nstruct tt_wrapper{};\n\ntemplate &lt;class...&gt;\nstruct t_wrapper{};\n\nstruct A {\n    template &lt;template &lt;class...&gt; class TT, class T&gt;\n    void foo(alias&lt;tt_wrapper&lt;TT&gt;, T&gt;) { std::cout &lt;&lt; \"A::foo invoked\" &lt;&lt; std::endl; }\n};\n\nstruct B: A {\n    using A::foo;\n    template &lt;class U, class T&gt;\n    void foo(alias&lt;t_wrapper&lt;U&gt;, T&gt;) { std::cout &lt;&lt; \"B::foo invoked\" &lt;&lt; std::endl; }\n};\n\nint main() {\n    B b;\n    b.foo&lt;std::vector&gt;(int{});\n}\n</code></pre>\n<p>According to <a href=\"https://timsong-cpp.github.io/cppwp/n3337/namespace.udecl#15\" rel=\"nofollow noreferrer\">[namespace.udecl]/15</a>: </p>\n<blockquote>\n<p id=\"so_46805276_46805276_0\">When a using-declaration brings names from a base class into a derived\n  class scope, member functions and member function templates in the\n  derived class override and/or hide <strong>member functions and member\n  function templates with the same name, parameter-type-list,\n  cv-qualification, and ref-qualifier (if any) in a base class (rather\n  than conflicting)</strong>.</p>\n</blockquote>\n<p>So apparently the template parameters should not be involved in member function hiding. However in our example the template parameters are brought to the signature using alias. Nevertheless <a href=\"https://wandbox.org/permlink/OP9vZVN6H3bbNqCC\" rel=\"nofollow noreferrer\">clang</a> doesn't seem to share the feeling that alias is part of the function <em>parameter-type-list</em> and claiming: </p>\n<pre><code>prog.cc:26:7: error: no matching member function for call to 'foo'\n    b.foo&lt;std::vector&gt;(int{});\n    ~~^~~~~~~~~~~~~~~~\nprog.cc:21:10: note: candidate template ignored: invalid explicitly-specified argument for template parameter 'U'\n    void foo(alias&lt;t_wrapper&lt;U&gt;, T&gt;) { std::cout &lt;&lt; \"B::foo invoked\" &lt;&lt; std::endl; }\n         ^\n1 error generated.\n</code></pre>\n<p>I've intensionally omitted gcc in consideration as it involve template parameter list in the hiding process. Is clang right?</p>\n", "AcceptedAnswerId": "46806016", "Title": "Are type aliases used as type of function parameter part of the function signature?", "CreationDate": "2017-10-18T07:53:59.610", "Id": "46805276", "CommentCount": "3", "PostTypeId": "1", "LastActivityDate": "2017-10-18T10:43:47.747", "Score": "3", "OwnerUserId": "4324224", "Tags": "<c++><templates><language-lawyer><alias><method-hiding>", "AnswerCount": "1"}, "46806016": {"Id": "46806016", "PostTypeId": "2", "Body": "<p><code>A::foo</code> and <code>B::foo</code> has</p>\n<ul>\n<li>same name (<code>foo</code>)</li>\n<li>parameter-type-list (<code>T</code> !!!)</li>\n<li>cv-qualification (not <code>const</code>, not volatile)</li>\n<li>ref-qualifier (None)</li>\n</ul>\n<p>template parameter list is not taken into account.</p>\n<p>The method in base class is not virtual, so hiding and not overriding.</p>\n<p><a href=\"http://coliru.stacked-crooked.com/a/d5d3a50c024cb764\" rel=\"nofollow noreferrer\">Demo</a> of the fact that the parameter-type-list is <code>T</code>.</p>\n", "LastEditorUserId": "2684539", "LastActivityDate": "2017-10-18T08:45:16.120", "Score": "1", "CreationDate": "2017-10-18T08:40:10.853", "ParentId": "46805276", "CommentCount": "5", "OwnerUserId": "2684539", "LastEditDate": "2017-10-18T08:45:16.120"}});