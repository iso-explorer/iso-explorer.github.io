post_cb({"35679165": {"CommentCount": "2", "ViewCount": "634", "LastActivityDate": "2016-02-29T05:48:22.883", "Body": "<p>It occurred to me that the fastest way to copy the array from one <code>std::vector</code> to another would be to swap their pointers, as long as you don't care anymore about the vector you are swapping from. So I went looking and found <code>std::vector::swap</code>. I assume that swapping pointers is how its implemented, but I didn't see an explanation in the reference. </p>\n", "PostTypeId": "1", "AcceptedAnswerId": "35679408", "FavoriteCount": "1", "Title": "How is std::vector::swap implemented?", "Id": "35679165", "Score": "0", "CreationDate": "2016-02-28T05:40:57.413", "Tags": "<c++><vector><swap>", "OwnerUserId": "574733", "AnswerCount": "2"}, "35679408": {"ParentId": "35679165", "CommentCount": "3", "Body": "<p>A simplified, minimal vector implementation might have something like the following members to manage the data in the vector:</p>\n<pre><code>template &lt;typename T&gt;\nclass simple_vector\n{\npublic:\n    // ...\n\n    static\n    void swap(simple_vector&lt;T&gt;&amp; x, simple_vector&lt;T&gt;&amp; y);\n\nprivate:\n    T* elements;    // a pointer to the block of memory holding the elements in the vector\n    size_t count;   // number of 'active' elements\n    size_t allocated;   // number of elements allocated (not all of which are necessarily used at the moment)\n};\n</code></pre>\n<p>A <code>swap()</code> operation would just swap the 'guts' of each simplified_vector, leaving all of the dynamically allocated buffers (and the elements contained in them) in place. Only the pointers to those dynamic allocations get move around:</p>\n<pre><code>template &lt;typename T&gt;\nvoid simple_vector&lt;T&gt;::swap(simple_vector&lt;T&gt;&amp; x, simple_vector&lt;T&gt;&amp; y)\n{\n    T* tmp_elements = x.elements;\n    size_t tmp_count = x.count;\n    size_t tmp_allocated = x.allocated;\n\n    x.elements = y.elements;\n    x.count = y.count;\n    x.allocated = y.allocated;\n\n    y.elements = tmp_elements;\n    y.count = tmp_count;\n    y.allocated = tmp_allocated;\n}\n</code></pre>\n<p>Note that the actual <code>std::vector</code> implementation might use techniques that aren't exactly the same (such as move constructing a temporary) as this simple example, but I think it conveys the general concept.</p>\n", "OwnerUserId": "12711", "PostTypeId": "2", "Id": "35679408", "Score": "2", "CreationDate": "2016-02-28T06:13:33.463", "LastActivityDate": "2016-02-28T06:13:33.463"}, "35679260": {"ParentId": "35679165", "LastEditDate": "2016-02-29T05:48:22.883", "CommentCount": "4", "CreationDate": "2016-02-28T05:53:41.757", "OwnerUserId": "434551", "LastEditorUserId": "434551", "PostTypeId": "2", "Id": "35679260", "Score": "2", "Body": "<p>From <a href=\"http://en.cppreference.com/w/cpp/container/vector/swap\" rel=\"nofollow\">http://en.cppreference.com/w/cpp/container/vector/swap</a>:</p>\n<blockquote>\n<p id=\"so_35679165_35679260_0\">Exchanges the contents of the container with those of other. Does not invoke any move, copy, or swap operations on individual elements. </p>\n</blockquote>\n<p>That seems clear enough to me.</p>\n<p><strong>Update, in response to comment by OP</strong></p>\n<p>I see the following with g++ 4.8.4:</p>\n<pre><code>      void\n      swap(vector&amp; __x)\n#if __cplusplus &gt;= 201103L\n            noexcept(_Alloc_traits::_S_nothrow_swap())\n#endif\n      {\n        this-&gt;_M_impl._M_swap_data(__x._M_impl);\n        Alloc_traits::_S_on_swap(_M_get_Tp_allocator(),\n                              __x._M_get_Tp_allocator());\n      }\n</code></pre>\n<p>And, here's the implementation of <code>_Vector_impl::M_swap_data</code>:</p>\n<pre><code>void _M_swap_data(_Vector_impl&amp; __x)\n{\n  std::swap(_M_start, __x._M_start);\n  std::swap(_M_finish, __x._M_finish);\n  std::swap(_M_end_of_storage, __x._M_end_of_storage);\n}\n</code></pre>\n", "LastActivityDate": "2016-02-29T05:48:22.883"}, "bq_ids": {"n4140": {"so_35679165_35679260_0": {"section_id": 710, "quality": 0.6153846153846154, "length": 8}}, "n3337": {"so_35679165_35679260_0": {"section_id": 699, "quality": 0.6153846153846154, "length": 8}}, "n4659": {"so_35679165_35679260_0": {"section_id": 739, "quality": 0.6153846153846154, "length": 8}}}});