post_cb({"38184647": {"ParentId": "38184129", "CommentCount": "0", "Body": "<p>When the compiler compiles this statement</p>\n<pre><code>  for ( auto &amp;&amp; i: s ) {\n    std::cout &lt;&lt; \" \" &lt;&lt; i &lt;&lt; std::endl;\n</code></pre>\n<p>it knows the type of the variable <code>s</code> that is <code>int[6]</code>.</p>\n<p>So for arrays the compiler uses expressions like <code>s</code> and <code>s + 6</code> to define the range.</p>\n", "OwnerUserId": "2877241", "PostTypeId": "2", "Id": "38184647", "Score": "4", "CreationDate": "2016-07-04T12:20:34.430", "LastActivityDate": "2016-07-04T12:20:34.430"}, "38184129": {"CommentCount": "0", "AcceptedAnswerId": "38185775", "LastEditDate": "2017-05-23T12:32:56.860", "LastEditorUserId": "-1", "CreationDate": "2016-07-04T11:54:08.613", "LastActivityDate": "2016-07-04T17:43:18.910", "PostTypeId": "1", "ViewCount": "187", "Title": "how can a for range loop infer a plain array size", "Id": "38184129", "OwnerUserId": "2870029", "Body": "<p>Consider this snippet:</p>\n<pre><code>#include &lt;iostream&gt;\n\nint main() {\n  int s[6] {0, 1, 2, 3, 4, 5};\n  for ( auto &amp;&amp; i: s ) {\n    std::cout &lt;&lt; \" \" &lt;&lt; i &lt;&lt; std::endl;\n  }\n}\n</code></pre>\n<p>This compiles and runs happily both under g++ and clang++.<br>\nIt is taken for granted in many posts(<a href=\"https://stackoverflow.com/questions/32297000/passing-array-to-a-function-and-using-it-in-for-range-loop]\">here</a> and <a href=\"https://stackoverflow.com/questions/26182907/range-based-for-loop-on-array-passed-to-non-main-function\">here</a>, for example), but it is unclear to me how the compiler can correctly infer the size of the array in the <code>for range</code> for a type without iterator.<br>\nCan anyone answer or add a link to the reference?</br></br></p>\n", "Tags": "<c++><arrays><c++11><for-loop><range>", "Score": "4", "AnswerCount": "2"}, "38185775": {"ParentId": "38184129", "CommentCount": "0", "Body": "<p>According to the working draft [<a href=\"http://eel.is/c++draft/stmt.ranged#1\">6.5.4/1</a>]:</p>\n<blockquote>\n<p id=\"so_38184129_38185775_0\">The range-based for statement</p>\n<pre><code>for ( for-range-declaration : for-range-initializer ) statement\n</code></pre>\n<p id=\"so_38184129_38185775_1\">is equivalent to</p>\n<pre><code>{\n  auto &amp;&amp;__range = for-range-initializer ;\n  auto __begin = begin-expr ;\n  auto __end = end-expr ;\n  for ( ; __begin != __end; ++__begin ) {\n      for-range-declaration = *__begin;\n      statement\n  }\n}\n</code></pre>\n<p id=\"so_38184129_38185775_2\">where</p>\n<p id=\"so_38184129_38185775_3\">[...]</p>\n<p id=\"so_38184129_38185775_4\">begin-expr and end-expr are determined as follows:</p>\n<ul>\n<li>if the for-range-initializer is an expression of array type R, begin-expr and end-expr are __range and __range + __bound, respectively, where __bound is the array bound. If R is an array of unknown size or an array of incomplete type, the program is ill-formed;</li>\n</ul>\n<p id=\"so_38184129_38185775_5\">[...]</p>\n</blockquote>\n<p>So it works mostly as @VladFromMoscow has already mentioned in his answer.</p>\n", "OwnerUserId": "4987285", "PostTypeId": "2", "Id": "38185775", "Score": "5", "CreationDate": "2016-07-04T13:18:59.473", "LastActivityDate": "2016-07-04T13:18:59.473"}, "bq_ids": {"n4659": {"so_38184129_38185775_4": {"section_id": 4792, "quality": 1.0, "length": 4}}}});