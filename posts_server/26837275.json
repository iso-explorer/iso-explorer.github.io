post_cb({"26837580": {"Id": "26837580", "PostTypeId": "2", "Body": "<p>After digging a bit into standards, I found following :</p>\n<p>Here, I am trying to initialize <code>vector&lt;char&gt;</code>  using two string literals, not two chars.\nusing <code>vector(initializer_list&lt;T&gt;)</code>. In this case, <code>vector(initializer_list&lt;char&gt;)</code>.</p>\n<p>But the type of a string literal is <em>\"array of n const char\"</em>, so the initializer-list constructor is not a match.</p>\n<p>This <em>doesn't</em> result in compiler error, since the compiler is able to find another constructor that <em>matches</em></p>\n<p>\u00a713.3.1.7\u00b61 explains the rules :</p>\n<blockquote>\n<p id=\"so_26837275_26837580_0\">\"When objects of\n  non-aggregate class type T are list-initialized, overload resolution\n  selects the constructor in two phases: </p>\n<p id=\"so_26837275_26837580_1\">\u2014 Initially, the candidate\n  functions are the initializer-list constructors of the class T and the\n  argument list consists of the initializer list as a single argument\n  [which we have seen didn't match]. </p>\n<p id=\"so_26837275_26837580_2\">\u2014 If no viable initializer-list\n  constructor is found, overload resolution is performed again, where\n  the candidate functions are all the constructors of the class T and\n  the argument list consists of the elements of the initializer list.\"</p>\n</blockquote>\n<p>And the match in this case is :</p>\n<pre><code>template &lt;class InputIterator&gt; vector(InputIterator first, InputIterator last)\n</code></pre>\n<p>The type of <code>InputIterator</code> has no info of <code>T</code> in the <code>vector&lt;T&gt;</code>. \nSo even if I'm initializing a <code>vector&lt;char&gt;</code>, the two arguments can be of arbitrary type. \nThe only requirement is that they stick to <code>InputIterator</code> property, which <code>const char[]</code> happens to do.</p>\n<p>The constructor believes it has been passed two iterators to the same sequence, \nbut it has actually been passed iterators to two completely different sequences, <code>\"y\"</code> and <code>\"z\"</code>.</p>\n<p>So the result of this program is <em><strong>undefined</strong></em> .</p>\n<p><sup>\n<em>Thanks to chris's <a href=\"https://stackoverflow.com/questions/26837275/initializing-a-vectorchar-using-string-literals/26837580#comment42240394_26837275\">comment</a> \nThis is post is exactly same as he mentioned over there. See <a href=\"http://cppquiz.org/quiz/question/129?result=UD&amp;answer=&amp;did_answer=Answer\" rel=\"nofollow noreferrer\">this</a></em></sup></p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2014-11-10T06:04:28.660", "Score": "10", "CreationDate": "2014-11-10T05:51:45.447", "ParentId": "26837275", "CommentCount": "0", "OwnerUserId": "1870232", "LastEditDate": "2017-05-23T12:07:11.253"}, "bq_ids": {"n4140": {"so_26837275_26837580_2": {"length": 20, "quality": 1.0, "section_id": 599}, "so_26837275_26837580_0": {"length": 12, "quality": 1.0, "section_id": 599}, "so_26837275_26837580_1": {"length": 13, "quality": 0.7647058823529411, "section_id": 599}}, "n3337": {"so_26837275_26837580_2": {"length": 20, "quality": 1.0, "section_id": 589}, "so_26837275_26837580_0": {"length": 12, "quality": 1.0, "section_id": 589}, "so_26837275_26837580_1": {"length": 13, "quality": 0.7647058823529411, "section_id": 589}}, "n4659": {"so_26837275_26837580_2": {"length": 20, "quality": 1.0, "section_id": 622}, "so_26837275_26837580_0": {"length": 12, "quality": 1.0, "section_id": 622}, "so_26837275_26837580_1": {"length": 13, "quality": 0.7647058823529411, "section_id": 622}}}, "26837275": {"ViewCount": "3595", "Body": "<p>What's correct behavior for following code ? </p>\n<pre><code>#include &lt;vector&gt;\n#include &lt;iostream&gt;\n\nint main() \n{\n  std::vector&lt;char&gt; v = { \"y\", \"z\" };  \n  std::cout &lt;&lt; v[0];\n\n  return 0;\n}\n</code></pre>\n<p>This is accepted by <a href=\"http://rextester.com/EKJM68892\"><em><code>Clang</code></em></a> but not by <a href=\"http://rextester.com/ZCPSM72798\"><em><code>GCC</code></em></a> and <a href=\"http://rextester.com/KMRN72944\"><em><code>VC++</code></em></a></p>\n<p>Is this not an undefined behavior ?</p>\n", "AcceptedAnswerId": "26837580", "Title": "Initializing a vector<char> using string literals", "CreationDate": "2014-11-10T05:22:30.563", "Id": "26837275", "CommentCount": "4", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2014-11-10T06:04:28.660", "Score": "8", "OwnerUserId": "1870232", "Tags": "<c++><c++11>", "AnswerCount": "1"}});