post_cb({"bq_ids": {"n4140": {"so_8445563_8447183_1": {"length": 18, "quality": 0.782608695652174, "section_id": 603}, "so_8445563_8447183_3": {"length": 18, "quality": 0.9, "section_id": 603}, "so_8445563_8447183_2": {"length": 31, "quality": 0.8611111111111112, "section_id": 603}}, "n3337": {"so_8445563_8447183_1": {"length": 18, "quality": 0.782608695652174, "section_id": 593}, "so_8445563_8447183_3": {"length": 18, "quality": 0.9, "section_id": 593}, "so_8445563_8447183_2": {"length": 31, "quality": 0.8611111111111112, "section_id": 593}}, "n4659": {"so_8445563_8447183_1": {"length": 18, "quality": 0.782608695652174, "section_id": 629}, "so_8445563_8447183_3": {"length": 18, "quality": 0.9, "section_id": 629}, "so_8445563_8447183_2": {"length": 31, "quality": 0.8611111111111112, "section_id": 629}}}, "8447183": {"Id": "8447183", "PostTypeId": "2", "Body": "<p>For the purpose of overload resolution, the parameter list of the two overloads are <code>class socket &amp;, bool</code> and <code>const class socket &amp;, boost::system::error_code &amp;</code>.</p>\n<p>The calling parameters are <code>class socket &amp;, boost::system::error_code &amp;</code></p>\n<p>To match the first overload, the following conversion is needed:</p>\n<pre><code>1.\nclass socket &amp;              -&gt; no conversion\nbool                        -&gt; user defined conversion\n2.\nclass socket &amp;              -&gt; qualification conversion\nboost::system::error_code &amp; -&gt; no conversion\n</code></pre>\n<p>In C++0x 13.3.3p1 :</p>\n<blockquote>\n<p id=\"so_8445563_8447183_0\">Define ICSi(F) as follows:</p>\n<p id=\"so_8445563_8447183_1\">\u2014 if F is a static member function, ICS1(F) is defined such that\n  ICS1(F) is neither better nor worse than ICS1(G) for any function G,\n  and, symmetrically, ICS1(G) is neither better nor worse than\n  ICS1(F); otherwise,</p>\n<p id=\"so_8445563_8447183_2\">\u2014 let ICSi(F) denote the implicit conversion sequence that converts\n  the i-th argument in the list to the type of the i-th parameter of\n  viable function F. 13.3.3.1 defines the implicit conversion sequences\n  and\n  13.3.3.2 defines what it means for one implicit conversion sequence to be a better conversion sequence or worse conversion sequence than\n  another.</p>\n<p id=\"so_8445563_8447183_3\">Given these definitions, a viable function F1 is defined to be a\n  better function than another viable function F2 if <strong>for all arguments\n  i, ICSi(F1) is not a worse conversion sequence than ICSi(F2)</strong>, and then</p>\n<p id=\"so_8445563_8447183_4\">....</p>\n</blockquote>\n<p>From this, we can see the neither of the match of the two overloads fits this requirement. For the one function, one conversion sequence is better and one conversion is worse than the corresponding conversion sequence of the other function, so the viable function cannot be determined.</p>\n<p>If the second overload is not <code>const</code>, then the conversion sequence for the second overload does not need any conversion (both are identical), so this is better than the other overload, thus no ambiguity.</p>\n", "LastActivityDate": "2011-12-09T14:47:41.480", "CommentCount": "0", "CreationDate": "2011-12-09T14:47:41.480", "ParentId": "8445563", "Score": "1", "OwnerUserId": "1058916"}, "8445774": {"Id": "8445774", "PostTypeId": "2", "Body": "<p>Two equally-ranked conversions are possible:</p>\n<ul>\n<li><p><code>socket &amp;</code> \u2192 <code>socket const &amp;</code></p></li>\n<li><p><code>boost::system::error_code</code> \u2192 <code>bool</code></p></li>\n</ul>\n<p>You can disambiguate manually:</p>\n<pre><code>bool result = static_cast&lt;socket const &amp;&gt;(s).non_blocking(ec);\n\ns.non_blocking(bool(ec));\n</code></pre>\n", "LastActivityDate": "2011-12-09T12:54:09.277", "CommentCount": "4", "CreationDate": "2011-12-09T12:54:09.277", "ParentId": "8445563", "Score": "3", "OwnerUserId": "596781"}, "8445563": {"ViewCount": "349", "Body": "<p>Could anyone help me understand why the below code doesn't compile (VS2010) when the getters are const ?</p>\n<p>Here's the test code:</p>\n<pre><code>#include &lt;boost/system/error_code.hpp&gt;\n\nclass socket {\npublic:\n\n    // setter - throw exception version\nvoid non_blocking(bool mode)\n    {\n        // ...\n    }\n\n    // getter - error code version      \n    bool non_blocking(boost::system::error_code&amp; ec) const\n    {\n        // ...\n    }\n\n    // setter - error code version\nvoid non_blocking(bool mode, boost::system::error_code&amp; ec)\n    {\n        // ...\n    }\n\n    // getter - throw exception version    \n    bool non_blocking() const\n    {\n        // ...\n    }\n};\n\nint main()\n{\n    socket s;\n    boost::system::error_code ec;\n    bool result = s.non_blocking(ec);\n\n    return 0;\n}\n</code></pre>\n<p>I know that boost::system::error_code is convertible to bool but can't understand why the const cause the ambiguity. Here's the error message from VS2010:</p>\n<pre><code>1&gt;c:\\projects\\pcap++\\trunk\\main.cpp(145): error C2666: 'socket::non_blocking' : 2 overloads have similar conversions\n1&gt;          c:\\projects\\pcap++\\trunk\\main.cpp(134): could be 'bool socket::non_blocking(boost::system::error_code &amp;) const'\n1&gt;          c:\\projects\\pcap++\\trunk\\main.cpp(129): or       'void socket::non_blocking(bool)'\n1&gt;          while trying to match the argument list '(boost::system::error_code)'\n1&gt;          note: qualification adjustment (const/volatile) may be causing the ambiguity\n</code></pre>\n", "AcceptedAnswerId": "8447183", "Title": "qualification adjustment (const/volatile) may be causing the ambiguity", "CreationDate": "2011-12-09T12:36:52.153", "Id": "8445563", "CommentCount": "6", "LastEditDate": "2011-12-09T13:04:32.803", "PostTypeId": "1", "LastEditorUserId": "1089692", "LastActivityDate": "2011-12-09T14:47:41.480", "Score": "4", "OwnerUserId": "1089692", "Tags": "<c++>", "AnswerCount": "2"}});