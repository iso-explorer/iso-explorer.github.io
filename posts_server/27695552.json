post_cb({"bq_ids": {"n4140": {"so_27695552_27695928_0": {"length": 15, "quality": 1.0, "section_id": 6030}}, "n3337": {"so_27695552_27695928_0": {"length": 15, "quality": 1.0, "section_id": 5798}}, "n4659": {"so_27695552_27695928_0": {"length": 10, "quality": 0.6666666666666666, "section_id": 2}}}, "27695552": {"ViewCount": "480", "Body": "<p>I am writing a simple wrapper class, and I want to provide explicit conversion operators to the wrapped type. The following code compiles fine with <code>gcc</code></p>\n<pre><code>class wrap\n{\n    double value;\npublic:\n    explicit wrap(double x) : value(x) {}\n    explicit operator double&amp;&amp;() &amp;&amp; { return std::move(value); }\n};\n\nint main() {\n    wrap w(5);\n    double &amp;&amp; x (std::move(w) ); //ok\n    double &amp;&amp; y = static_cast&lt;double&amp;&amp;&gt;(std::move(w)); //clang reports an error here\n}\n</code></pre>\n<p>But <code>clang</code> reports an <code>error: cannot cast from lvalue of type 'typename std::remove_reference&lt;wrap &amp;&gt;::type' (aka 'wrap') to rvalue reference type 'double &amp;&amp;'; types are not compatible</code>.</p>\n<p>As far as I know (see the latest draft, <strong>5.2.9 \u00a74</strong>) <code>static_cast&lt;T&gt;(e)</code> has the same semantic has <code>T t(e)</code>, but clang does not refuse the latter.</p>\n<p>Which compiler is right?</p>\n", "AcceptedAnswerId": "27695928", "Title": "static_cast with an explicit rvalue conversion operator", "CreationDate": "2014-12-29T20:28:54.143", "Id": "27695552", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2014-12-29T21:00:50.630", "Score": "4", "OwnerUserId": "666785", "Tags": "<c++><c++11><rvalue-reference>", "AnswerCount": "1"}, "27695928": {"Id": "27695928", "PostTypeId": "2", "Body": "<p>This is clang bug <a href=\"http://llvm.org/bugs/show_bug.cgi?id=19917\" rel=\"nofollow\">19917</a>. From the section of the standard you mentioned, \u00a75.2.9/4:</p>\n<blockquote>\n<p id=\"so_27695552_27695928_0\">An expression <code>e</code> can be explicitly converted to a type <code>T</code> using a <code>static_cast</code> of the form <code>static_cast&lt;T&gt;(e)</code>\n  if the declaration <code>T t(e);</code> is well-formed, for some invented temporary variable <code>t</code>.</p>\n</blockquote>\n<p>In this case, <code>T t(e);</code> is well-formed and compiles on both compilers, so <code>static_cast&lt;T&gt;(e)</code> should too. GCC correctly accepts it.</p>\n", "LastActivityDate": "2014-12-29T21:00:50.630", "CommentCount": "0", "CreationDate": "2014-12-29T21:00:50.630", "ParentId": "27695552", "Score": "3", "OwnerUserId": "2069064"}});