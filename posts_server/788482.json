post_cb({"bq_ids": {"n4140": {"so_788482_788497_0": {"length": 10, "quality": 0.9090909090909091, "section_id": 6106}}, "n3337": {"so_788482_788497_0": {"length": 10, "quality": 0.9090909090909091, "section_id": 5872}}, "n4659": {"so_788482_788497_0": {"length": 10, "quality": 0.9090909090909091, "section_id": 7603}}}, "810051": {"Id": "810051", "PostTypeId": "2", "Body": "<p>Yeah, recall how this is often implemented: new really calls malloc, which gives back a pointer to <code>(void*)(&amp;(((int*)p)[1]))</code>, where p is the actual start of the memory allocated, and the first int is the size of the actual memory we got back. </p>\n<p>The pointer we get back is one sizeof(int) (or whatever alignment requires) further along in the actual memory allocated. We lay down our object there, leaving the actual size undisturbed.</p>\n<p>Then when that pointer passed to delete, which passes it to free, free looks one int <em>before</em> the passed pointer, to find the size that's being given back. </p>\n<p>Passing back something other than what we got is going to mean that free thinks an arbitrary amount of actual memory is being passed back, and it'll screw up the free list accordingly.</p>\n<p>Again, this is how it's <em>often</em> implemented, not how new, delete, malloc, or free are required to be implemented.</p>\n", "LastActivityDate": "2009-05-01T03:21:08.430", "CommentCount": "0", "CreationDate": "2009-05-01T03:21:08.430", "ParentId": "788482", "Score": "3", "OwnerUserId": "85931"}, "788487": {"Id": "788487", "PostTypeId": "2", "Body": "<p>Yes, you must delete[] the original pointer you were given by new; in this case, that would be a pointer to the head of the array, rather than the tail. The code here is deleting some other unspecified random object.</p>\n", "LastActivityDate": "2009-04-25T07:54:12.940", "CommentCount": "1", "CreationDate": "2009-04-25T07:54:12.940", "ParentId": "788482", "Score": "4", "OwnerUserId": "53543"}, "788497": {"Id": "788497", "PostTypeId": "2", "Body": "<p>From the C++ Standard, section 5.3.5/2:</p>\n<blockquote>\n<p id=\"so_788482_788497_0\">the value of the operand of delete shall be the pointer value\n  which resulted from a previous array\n  new-expression. If not, the behaviour\n  is undefined</p>\n</blockquote>\n", "LastEditorDisplayName": "anon", "OwnerDisplayName": "anon", "LastActivityDate": "2009-04-25T08:39:30.103", "Score": "17", "CreationDate": "2009-04-25T07:59:03.787", "ParentId": "788482", "CommentCount": "0", "LastEditDate": "2009-04-25T08:39:30.103"}, "788482": {"ViewCount": "484", "Body": "<p>I saw some code as below during a peer-code-review session:</p>\n<pre><code>char *s = new char[3];\n*s++ = 'a';\n*s++ = 'b';\n*s++='\\0';\ndelete []s; // this may or may not crash on some or any day !!\n</code></pre>\n<p>Firstly, I know that in Standard C++, pointing to one-past the array-size is O.K. though accessing it results in undefined behaviour. So I believe the last line <code>*s++='\\0'</code> is fine. But if I recall correctly, the C++ standard mandates that <code>delete</code> should be supplied the same pointer that <code>new</code> returned. </p>\n<p>This I believe means that the returned pointer must not be tampered-with. I guess it is because <code>new</code> might keep some housekeeping info before the returned address that <code>delete</code> might use. Moving the <code>new</code>'d pointer might make this inaccessible.</p>\n<p>Is it undefined behaviour or implementation-defined or unspecified?\nCan anyone confirm this please? Preferably by pointing to the correct place in the C++ Standard.</p>\n<p><sub>In the freely available draft version of the draft C++ Standard (Draft_SC22-N-4411.pdf) has the details in section 5.3.5. I got it from Bjarne's homepage.</sub></p>\n", "AcceptedAnswerId": "788497", "Title": "delete[] supplied a modified new-ed pointer. Undefined Behaviour?", "CreationDate": "2009-04-25T07:50:57.880", "Id": "788482", "CommentCount": "3", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2014-08-10T11:44:44.933", "LastEditorUserId": "2246344", "LastActivityDate": "2014-08-10T11:44:44.933", "Score": "5", "OwnerUserId": "79298", "Tags": "<c++><memory-management><new-operator><standards-compliance>", "AnswerCount": "3"}});