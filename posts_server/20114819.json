post_cb({"20114975": {"ParentId": "20114819", "CommentCount": "0", "Body": "<p>Yes, they are, however it is not as obvious as it first seems.</p>\n<p>If you look at \u00a724.2.2 [iterator.iterators] (n3485), an <code>Iterator</code> (in general) is not required to be <code>DefaultConstructible</code>. Furthermore, looking at \u00a724.2.3 [input.iterators] and $24.2.4 [output.iterators], neither are <code>InputIterator</code> and <code>OutputIterator</code>.</p>\n<p>Once we get to \u00a724.2.5 [forward.iterators] though:</p>\n<blockquote>\n<p id=\"so_20114819_20114975_0\">1/ A class or pointer type X satisfies the requirements of a forward iterator if</p>\n<ul>\n<li>X satisfies the requirements of an input iterator (24.2.3),</li>\n<li>X satisfies the DefaultConstructible requirements (17.6.3.1)\n  [...]</li>\n</ul>\n</blockquote>\n<p>And since all Standard Containers have iterators that satisfy the <code>ForwardIterator</code> concept, they all have default constructible iterators.</p>\n", "OwnerUserId": "147192", "PostTypeId": "2", "Id": "20114975", "Score": "5", "CreationDate": "2013-11-21T07:31:51.913", "LastActivityDate": "2013-11-21T07:31:51.913"}, "20114908": {"ParentId": "20114819", "CommentCount": "1", "Body": "<p>Depends on the Iterator concept you're checking.</p>\n<p>If it's a regular <code>Iterator</code>, which is just the absolute bare minimum to be called an iterator then the answer is no because it has to only meet the constructibility requirements of CopyConstructible, CopyAssignable, and Destructible. (\u00a7 24.2.2 / 2)</p>\n<p>However most container iterators meet the requirement of a BidirectionalIterator (except <code>std::forward_list</code>, which is an anomaly). All BidirectionalIterators in turn also meet the requirement of ForwardIterator, which meets the requirements of InputIterator (quite a mouthful).</p>\n<p>The requirements for ForwardIterator explicitly state:</p>\n<blockquote>\n<p id=\"so_20114819_20114908_0\">A class or pointer type X satis\ufb01es the requirements of a forward\n  iterator if </p>\n<p id=\"so_20114819_20114908_1\">\u2014 X satis\ufb01es the requirements of an input iterator\n  (24.2.3),</p>\n<p id=\"so_20114819_20114908_2\">\u2014 X satis\ufb01es the DefaultConstructible requirements\n  (17.6.3.1),</p>\n</blockquote>\n<p>\u00a7 24.2.5 / 1 in N3376</p>\n<p>So yes, this is a valid assumption.</p>\n<p>You can find the iterator requirements in \u00a7 24.2 but they're nicely summarised in <a href=\"http://en.cppreference.com/w/cpp/concept\">cppreference</a></p>\n", "OwnerUserId": "1381108", "PostTypeId": "2", "Id": "20114908", "Score": "8", "CreationDate": "2013-11-21T07:28:16.503", "LastActivityDate": "2013-11-21T07:28:16.503"}, "20114819": {"CommentCount": "1", "ViewCount": "107", "CreationDate": "2013-11-21T07:22:31.177", "LastActivityDate": "2013-11-21T07:31:51.913", "Title": "Are iterators of standard containers DefaultConstructible?", "AcceptedAnswerId": "20114908", "PostTypeId": "1", "Id": "20114819", "Score": "4", "Body": "<p>Is this well formed?</p>\n<pre><code>int main() {\n    std::deque&lt; int &gt;::iterator x; // Or any container.\n}\n</code></pre>\n<p>Bonus questions:</p>\n<ul>\n<li>What about <code>auto y = x;</code> which potentially copies uninitialized state?</li>\n<li>What about <code>\u2026 x = {};</code> which requires a non-explicit default constructor?</li>\n<li>What about <code>x == y</code> if both are value-initialized (not default-initialized as illustrated)?</li>\n</ul>\n", "Tags": "<c++><iterator><initialization>", "OwnerUserId": "153285", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_20114819_20114908_0": {"section_id": 5573, "quality": 0.8571428571428571, "length": 6}, "so_20114819_20114975_0": {"section_id": 5573, "quality": 1.0, "length": 7}}, "n3337": {"so_20114819_20114908_0": {"section_id": 5355, "quality": 0.8571428571428571, "length": 6}, "so_20114819_20114975_0": {"section_id": 5355, "quality": 1.0, "length": 7}}, "n4659": {"so_20114819_20114908_0": {"section_id": 7020, "quality": 0.8571428571428571, "length": 6}, "so_20114819_20114975_0": {"section_id": 7020, "quality": 1.0, "length": 7}}}});