post_cb({"32686009": {"ParentId": "32685319", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>Within the member specification the class is considered complete within function bodies, from the draft C++ standard section <code>9.2</code> <em>[class.mem]</em>:</p>\n<blockquote>\n<p id=\"so_32685319_32686009_0\">A class is considered a completely-defined object type (3.9) (or\n  complete type) at the closing } of the class-specifier. <strong>Within the\n  class member-specification, the class is regarded as complete within\n  function bodies</strong>, default arguments, using-declarations introducing\n  inheriting constructors (12.9), exception-specifications, and\n  brace-or-equal-initializers for non-static data members (including\n  such things in nested classes). Otherwise it is regarded as incomplete\n  within its own class member-specification</p>\n</blockquote>\n<p>Which means you don't even have to forward declare <code>Bar</code> (<em><a href=\"http://melpon.org/wandbox/permlink/LwUlYn675n2f7Zvb\" rel=\"nofollow noreferrer\">see it live</a></em>):</p>\n<pre><code>struct Foo {\n    Foo()\n    {\n        Bar bar; \n    }\n    struct Bar {};  \n};\n</code></pre>\n<p>Forward declaring could be useful in avoiding violation of section <a href=\"https://stackoverflow.com/a/26682543/1708801\">3.3.7 paragraph 2 and 3</a>.</p>\n", "OwnerUserId": "1708801", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:30:19.230", "Id": "32686009", "Score": "8", "CreationDate": "2015-09-21T01:15:45.233", "LastActivityDate": "2015-09-21T17:36:10.123"}, "32685319": {"CommentCount": "2", "ViewCount": "265", "PostTypeId": "1", "LastEditorUserId": "3093378", "CreationDate": "2015-09-20T23:20:34.953", "LastActivityDate": "2015-10-05T03:11:42.663", "Title": "Why an inline declaration is not an incomplete type?", "AcceptedAnswerId": "32686009", "LastEditDate": "2015-10-05T03:11:42.663", "Id": "32685319", "Score": "14", "Body": "<p>Consider the code below:</p>\n<pre><code>struct Foo {\n    struct Bar;\n    Foo()\n    {\n        Bar bar; // Why isn't Bar an incomplete type?!\n    }\n    struct Bar {}; // Full definition\n};\n\n// struct Bar {}; // fails to compile due to incomplete type\n\nint main()\n{\n    Foo foo;\n}\n</code></pre>\n<p>It compiles fine under at least 2 compilers (gcc5.2, clang3.5). My question is:</p>\n<ul>\n<li>Why isn't <code>Bar</code> considered an incomplete type in the constructor <code>Foo::Foo</code>, as I forward-declare it above the constructor but fully use it inside the constructor? </li>\n</ul>\n<p>Whenever I move <code>Foo::Bar</code> outside the class, in other words <code>Bar</code> becomes a stand-alone class, I get the expected </p>\n<blockquote>\n<p id=\"so_32685319_32685319_0\">error: aggregate 'Foo::Bar bar' has incomplete type and cannot be defined</p>\n</blockquote>\n", "Tags": "<c++><incomplete-type>", "OwnerUserId": "3093378", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_32685319_32686009_0": {"section_id": 5862, "quality": 0.9761904761904762, "length": 41}}, "n3337": {"so_32685319_32686009_0": {"section_id": 5632, "quality": 0.8809523809523809, "length": 37}}, "n4659": {"so_32685319_32686009_0": {"section_id": 7345, "quality": 0.7619047619047619, "length": 32}}}});