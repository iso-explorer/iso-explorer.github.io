post_cb({"bq_ids": {"n4140": {"so_40434664_40436485_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 6307}}, "n3337": {"so_40434664_40436485_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 6064}}, "n4659": {"so_40434664_40436485_0": {"length": 13, "quality": 1.0, "section_id": 6756}}}, "40434701": {"Id": "40434701", "PostTypeId": "2", "Body": "<p>It's helper to compute the 2-based logarithm of integer number, i.e. it return the index of highest set bit in the number (or -1 for 0).</p>\n<p>I.e. for 1 it will return 0, for 16 it will return 4, for 1024 it will return 10, etc.</p>\n<p>This can be used to efficiently predict the pre-allocated size for arrays, round to the nearest power of 2 and thing like that.</p>\n<p>Note, that as any other function starting with <code>__</code>, it's internal function of the compiler or the library, so you should not rely on its existence, such code wouldn't be portable. Other implementations of std library can come with completely solution and different names of similar helpers (if they use something similar at all).</p>\n<p>POSIX provides similar function - <a href=\"http://man7.org/linux/man-pages/man3/ffs.3.html\" rel=\"nofollow noreferrer\"><code>ffs()</code></a>, there are also <code>ffsl</code> and ffsll (see the same page) which is GNU extension and work with long and long long respectively.</p>\n<p>For the question from comment - how to use it from Java. Because of the above it's not good idea first, secondly it would require JNI wrapper for this. And third but most important - there is no reason for this actually. Java already provides similar methods <a href=\"https://docs.oracle.com/javase/7/docs/api/java/lang/Integer.html#highestOneBit(int)\" rel=\"nofollow noreferrer\"><code>Integer.heghestOneBit()</code></a>, although note it returns +1 in comparison to described std::__lg, i.e. 0 for 0, 1 for 1, 11 for 1024, etc.</p>\n", "LastEditorUserId": "4787126", "LastActivityDate": "2016-11-05T15:44:24.593", "Score": "3", "CreationDate": "2016-11-05T04:16:15.737", "ParentId": "40434664", "CommentCount": "5", "OwnerUserId": "4787126", "LastEditDate": "2016-11-05T15:44:24.593"}, "40434664": {"ViewCount": "446", "Body": "<p>As title I don't know what is <code>std::__lg</code> mean after google it?And what exactly this line do : <code>int n = std::__lg(block_sz - pos_l + 1);</code></p>\n", "Title": "What is std::__lg?", "CreationDate": "2016-11-05T04:09:54.240", "LastActivityDate": "2016-11-05T15:44:24.593", "CommentCount": "0", "LastEditDate": "2016-11-05T09:07:08.847", "PostTypeId": "1", "LastEditorUserId": "3313064", "Id": "40434664", "Score": "0", "OwnerUserId": "4373501", "Tags": "<c++><std>", "AnswerCount": "2"}, "40436485": {"Id": "40436485", "PostTypeId": "2", "Body": "<p>It's an identifier used internally by your compiler (very likely GCC), because all identifiers with <strong>double underscores</strong> belong to the compiler implementation.</p>\n<p>Nowhere in your own code should something like <code>__lg</code> be seen or used. Use the <strong>interface</strong> of the standard library, not its implementation. If your own code directly uses <code>__lg</code>, then you have no guarantee that the code will compile or do the right thing with any other compiler or even with any other version of the <em>same</em> compiler.</p>\n<p>As the C++ standard says at \u00a72.10 <code>[lex.name]</code>:</p>\n<blockquote>\n<p id=\"so_40434664_40436485_0\">Each identifier that <strong>contains a double underscore</strong> __ or begins\n  with an underscore followed by an uppercase letter is reserved to the\n  implementation for any use.</p>\n</blockquote>\n<p>As for what that GCC thing actually is, just look at the <a href=\"https://gcc.gnu.org/onlinedocs/libstdc++/libstdc++-api-4.6/a01049_source.html\" rel=\"nofollow noreferrer\">source code</a> which a Google search for \"std::__lg\" turns up.</p>\n<p>Depending on the actual types of <code>block_sz</code> and <code>pos_l</code>, it should be either this:</p>\n<blockquote id=\"so_40434664_40436485_1\">\n<pre><code>/// This is a helper function for the sort routines and for random.tcc.\n//  Precondition: __n &gt; 0.\ntemplate&lt;typename _Size&gt;\n  inline _Size\n  __lg(_Size __n)\n  {\n    _Size __k;\n    for (__k = 0; __n != 0; __n &gt;&gt;= 1)\n  ++__k;\n    return __k - 1;\n  }\n</code></pre>\n</blockquote>\n<p>Or this:</p>\n<blockquote id=\"so_40434664_40436485_2\">\n<pre><code>inline int\n__lg(int __n)\n{ return sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }\n</code></pre>\n</blockquote>\n<p>Now, <code>__CHAR_BIT__</code> is like the standard <a href=\"http://en.cppreference.com/w/cpp/types/climits\" rel=\"nofollow noreferrer\"><code>CHAR_BIT</code></a> macro. As <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.5.4/cpp/Common-Predefined-Macros.html\" rel=\"nofollow noreferrer\">GCC documentation</a> says:</p>\n<blockquote>\n<p id=\"so_40434664_40436485_3\">Defined to the number of bits used in the representation of the char\n  data type. It exists to make the standard header given numerical\n  limits work correctly. You should not use this macro directly;\n  instead, include the appropriate headers.</p>\n</blockquote>\n<p><code>__builtin_clz</code> is another GCC-specific function. Again, <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.0.2/gcc/Other-Builtins.html\" rel=\"nofollow noreferrer\">GCC documentation</a> explains its purpose:</p>\n<blockquote>\n<p id=\"so_40434664_40436485_4\">Returns the number of leading 0-bits in x, starting at the most\n  significant bit position. If x is 0, the result is undefined.</p>\n</blockquote>\n<p>I think if you need such functionality, then it's trivial to write it yourself. In fact, the question is why you need it in the first place. The real answer to your actual problem probably lies in the code around the <code>int n = std::__lg(block_sz - pos_l + 1);</code> line.</p>\n<hr>\n<p>Things to keep in mind:</p>\n<ul>\n<li>Do not use anything with two consecutive underscores in your own code.</li>\n<li>GCC is open source, so the internal implementation of special functions or macros is not secret but can easily be browsed online.</li>\n</ul>\n</hr>", "LastEditorUserId": "3313064", "LastActivityDate": "2016-11-05T09:12:02.360", "Score": "2", "CreationDate": "2016-11-05T09:06:49.273", "ParentId": "40434664", "CommentCount": "0", "OwnerUserId": "3313064", "LastEditDate": "2016-11-05T09:12:02.360"}});