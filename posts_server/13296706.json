post_cb({"13297026": {"ParentId": "13296706", "CommentCount": "0", "Body": "<p>You can take addresses from named symbols (e.g. vs. temporary instances). That's what's making up an lvalue as far I understood this explanation.</p>\n", "OwnerUserId": "1413395", "PostTypeId": "2", "Id": "13297026", "Score": "0", "CreationDate": "2012-11-08T20:13:44.443", "LastActivityDate": "2012-11-08T20:13:44.443"}, "13297464": {"ParentId": "13296706", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>I think bitfields satisfy your conditions... I believe <code>f.x</code> is an lvalue, but you can't take the address of it. Interestingly, you also can't do <code>auto &amp; x = f.x</code>.</p>\n<blockquote>\n<p id=\"so_13296706_13297464_0\"><strong>C++11 Section 8.3.1 Part of Paragraph 4:</strong> Since the address of a bit-field (9.6) cannot be taken, a pointer can never point to a bit-field.</p>\n</blockquote>\n<pre><code>struct foo {\n    int x : 3;\n    int y : 3;\n    int z : 3;\n};\n\nint main() {\n    foo f;\n\n    f.x = 3;\n}\n</code></pre>\n<hr>\n<p><em>I'm even less sure about this other idea, but the standard says that you are not allowed to <strong>use</strong> the main function. If taking the address of main is using it, then that would also suffice. C++11 3.6.1 Paragraph 5.</em></p>\n<hr>\n<p><em>And from a comment I left, I know TI extends their C and C++ compilers such that there is a storage class called <code>cregister</code> that you can't take the address of. (Because it refers to a physical register, which doesn't have a concept of an address).</em></p>\n</hr></hr>", "OwnerUserId": "47453", "LastEditorUserId": "47453", "LastEditDate": "2012-11-08T21:04:15.420", "Id": "13297464", "Score": "7", "CreationDate": "2012-11-08T20:41:37.310", "LastActivityDate": "2012-11-08T21:04:15.420"}, "13296706": {"CommentCount": "4", "ViewCount": "461", "PostTypeId": "1", "LastEditorUserId": "748175", "CreationDate": "2012-11-08T19:54:18.063", "LastActivityDate": "2012-11-08T21:04:15.420", "Title": "Of what kind of lvalues can the address not be taken?", "AcceptedAnswerId": "13297464", "LastEditDate": "2012-11-08T20:28:22.373", "Id": "13296706", "Score": "4", "Body": "<p>In <a href=\"http://www.facebook.com/photo.php?v=10151094464083109&amp;set=vb.9445547199&amp;type=2\" rel=\"nofollow\">this conference</a>, Scott Meyers starts by saying \"lvalues are generally expressions you can take the address of\". I am stressing the word generally: what is an lvalue that you cannot take the address of? (if it exists).</p>\n<p><strong>EDIT</strong>:\nPlease provide code snippets with your answers, it make things clearer.</p>\n", "Tags": "<c++><c++11><lvalue>", "OwnerUserId": "748175", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_13296706_13297464_0": {"section_id": 3217, "quality": 0.6666666666666666, "length": 10}}, "n3337": {"so_13296706_13297464_0": {"section_id": 3091, "quality": 0.6666666666666666, "length": 10}}, "n4659": {"so_13296706_13297464_0": {"section_id": 3974, "quality": 0.6666666666666666, "length": 10}}}});