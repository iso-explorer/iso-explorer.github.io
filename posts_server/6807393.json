post_cb({"6807417": {"Id": "6807417", "PostTypeId": "2", "Body": "<p>Every non-zero value will be considered as <strong>true</strong>.</p>\n<p>So some people will suggest you write</p>\n<pre><code>5 == a\n</code></pre>\n<p>to avoid that you make mistake <strong>==</strong> by <strong>=</strong>.</p>\n", "LastActivityDate": "2011-07-24T14:33:26.410", "CommentCount": "7", "CreationDate": "2011-07-24T14:33:26.410", "ParentId": "6807393", "Score": "1", "OwnerUserId": "824501"}, "bq_ids": {"n4140": {"so_6807393_6807398_0": {"length": 19, "quality": 0.5428571428571428, "section_id": 6173}, "so_6807393_6807398_1": {"length": 10, "quality": 0.7142857142857143, "section_id": 3885}, "so_6807393_6807398_3": {"length": 6, "quality": 0.8571428571428571, "section_id": 3888}, "so_6807393_6807398_2": {"length": 25, "quality": 0.8928571428571429, "section_id": 44}}, "n3337": {"so_6807393_6807398_0": {"length": 19, "quality": 0.5428571428571428, "section_id": 5934}, "so_6807393_6807398_1": {"length": 10, "quality": 0.7142857142857143, "section_id": 3745}, "so_6807393_6807398_3": {"length": 6, "quality": 0.8571428571428571, "section_id": 3748}, "so_6807393_6807398_2": {"length": 25, "quality": 0.8928571428571429, "section_id": 41}}, "n4659": {"so_6807393_6807398_0": {"length": 18, "quality": 0.5142857142857142, "section_id": 7675}, "so_6807393_6807398_1": {"length": 11, "quality": 0.7857142857142857, "section_id": 4764}, "so_6807393_6807398_3": {"length": 6, "quality": 0.8571428571428571, "section_id": 4772}, "so_6807393_6807398_2": {"length": 25, "quality": 0.8928571428571429, "section_id": 45}}}, "6807487": {"Id": "6807487", "PostTypeId": "2", "Body": "<p>Yes, it is based on the zero/non-zero value which a is assigned. To some people (myself included) it is also considered bad practice to have expressions with side-effects in your code, so the mentioned code fragment would preferably be written as something like</p>\n<pre><code>a = 5;\n...\nif (a != 0) {\n    ...\n}\n</code></pre>\n", "LastActivityDate": "2011-07-24T14:45:54.830", "CommentCount": "1", "CreationDate": "2011-07-24T14:45:54.830", "ParentId": "6807393", "Score": "0", "OwnerUserId": "337149"}, "6807393": {"ViewCount": "6522", "Body": "<p>Consider:</p>\n<pre><code>if (a=5) {\n   /* do something */\n}\n</code></pre>\n<p>How does the assignment work as a condition?</p>\n<p>Is it based on non-zero value of l-value?</p>\n", "Title": "Using assignment as a condition expression?", "CreationDate": "2011-07-24T14:28:42.607", "LastActivityDate": "2011-07-24T15:14:50.730", "CommentCount": "7", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2011-07-24T14:32:14.883", "LastEditorUserId": "560648", "Id": "6807393", "Score": "3", "OwnerUserId": "860290", "Tags": "<c++><c>", "AnswerCount": "4"}, "6807398": {"Id": "6807398", "PostTypeId": "2", "Body": "<h3>C++ \u2014 ISO/IEC 14882:2003(E)</h3>\n<blockquote>\n<p id=\"so_6807393_6807398_0\"><code>[5.17/1]</code> There are several assignment operators, all of which group\n  right-to-left. All require a modifiable lvalue as their left operand,\n  and the type of an assignment expression is that of its left operand.\n  <strong>The result of the assignment operation is the value stored in the left\n  operand after the assignment has taken place</strong>; the result is an lvalue.</p>\n</blockquote>\n<p>The result of the expression <code>a = 5</code> is <code>5</code>.</p>\n<blockquote>\n<p id=\"so_6807393_6807398_1\"><code>[6.4/4]</code> [..] The value of a <em>condition</em> that is an expression is the value of the\n  expression, <strong>implicitly converted to <code>bool</code></strong> for statements other than\n  <code>switch</code>. [..]</p>\n</blockquote>\n<p>A conversion to <code>bool</code> takes place.</p>\n<blockquote>\n<p id=\"so_6807393_6807398_2\"><code>[4.12/1]</code> An rvalue of arithmetic, enumeration, pointer, or pointer to member\n  type can be converted to an rvalue of type <code>bool</code>. A zero value, null\n  pointer value, or null member pointer value is converted to <code>false</code>; <strong>any\n  other value is converted to <code>true</code>.</strong></p>\n</blockquote>\n<p><code>5</code> converts to boolean <code>true</code>.</p>\n<blockquote>\n<p id=\"so_6807393_6807398_3\"><code>[6.4.1/1]</code> <strong>If the condition (6.4) yields true the first\n  substatement is executed.</strong> [..]</p>\n</blockquote>\n<p><code>true</code> is treated as an <code>if</code> statement success.</p>\n<hr>\n<h3>C \u2014 ISO/IEC 9899:1999(E)</h3>\n<blockquote>\n<p id=\"so_6807393_6807398_4\"><code>[6.5.16/3]</code> An assignment operator stores a value in the object\n  designated by the left operand. <strong>An assignment expression has the value\n  of the left operand after the assignment</strong>, but is not an lvalue. [..]</p>\n</blockquote>\n<p>The result of the expression <code>a = 5</code> is <code>5</code>.</p>\n<blockquote>\n<p id=\"so_6807393_6807398_5\"><code>[6.8.4.1/2]</code> In both forms, <strong>the first substatement is executed if the\n  expression compares unequal to 0</strong>. [..]</p>\n</blockquote>\n<p><code>5</code> is treated as an <code>if</code> statement success.</p>\n<hr>\n<h2>General</h2>\n<p>Code like this is almost always a mistake; the author likely intended <code>if (a == 5) {}</code>. However, sometimes it is deliberate. You may see code like this:</p>\n<pre><code>if (x = foo()) {\n   cout &lt;&lt; \"I set x to the result of foo(), which is truthy\";\n   // ... stuff\n}\n</code></pre>\n</hr></hr>", "LastEditorUserId": "560648", "LastActivityDate": "2011-07-24T15:14:50.730", "Score": "19", "CreationDate": "2011-07-24T14:30:12.480", "ParentId": "6807393", "CommentCount": "8", "OwnerUserId": "560648", "LastEditDate": "2011-07-24T15:14:50.730"}, "6807413": {"Id": "6807413", "PostTypeId": "2", "Body": "<p><code>if(a=x)</code> is equivalent to <code>if(x)</code> in addition to <code>a</code> assigned with <code>x</code>. So if the expression <code>x</code> evaluates to a non-zero value, then <code>if(x)</code>  simply becomes <code>if(true)</code>. Otherwise, it becomes <code>if(false)</code>.</p>\n<p>In your case, since <code>x = 5</code>, that means <code>f(a=5)</code> is equivalent to <code>if(true)</code> in addition to <code>a</code> assigned with <code>5</code>.</p>\n", "LastEditorUserId": "415784", "LastActivityDate": "2011-07-24T14:39:54.450", "Score": "1", "CreationDate": "2011-07-24T14:33:08.037", "ParentId": "6807393", "CommentCount": "4", "OwnerUserId": "415784", "LastEditDate": "2011-07-24T14:39:54.450"}});