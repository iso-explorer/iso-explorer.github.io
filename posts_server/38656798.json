post_cb({"bq_ids": {"n4140": {"so_38656798_38657465_0": {"length": 56, "quality": 0.9180327868852459, "section_id": 6695}}, "n3337": {"so_38656798_38657465_0": {"length": 56, "quality": 0.9180327868852459, "section_id": 6450}}, "n4659": {"so_38656798_38657465_0": {"length": 56, "quality": 0.9180327868852459, "section_id": 8170}}}, "38656798": {"ViewCount": "149", "Body": "<pre><code>class safe_bool_base {\nprotected:\n  void this_type_does_not_support_comparisons() const {}\n};\n\ntemplate &lt;typename T=void&gt; class safe_bool : public safe_bool_base {\npublic:\n  void func() {\n    &amp;safe_bool::this_type_does_not_support_comparisons;\n    &amp;safe_bool_base::this_type_does_not_support_comparisons;\n  }\n};\n\ntemplate&lt;&gt; class safe_bool&lt;void&gt; : public safe_bool_base {\npublic:\n  void func() {\n    &amp;safe_bool::this_type_does_not_support_comparisons;\n    &amp;safe_bool_base::this_type_does_not_support_comparisons;\n  }\n};\n</code></pre>\n<p>Error Message:</p>\n<pre><code>zzz.cpp: In member function 'void safe_bool&lt;void&gt;::func()':\nzzz.cpp:7:10: error: 'void safe_bool_base::this_type_does_not_support_comparison\ns() const' is protected\n void this_type_does_not_support_comparisons() const {}\n      ^\nzzz.cpp:22:24: error: within this context\n   &amp;safe_bool_base::this_type_does_not_support_comparisons;\n                    ^\n</code></pre>\n<p>I wonder why protected member can not be visited in the template specialization. The codes are meaningless and just for testing.</p>\n", "AcceptedAnswerId": "38657465", "Title": "Protected member access error in template specialization", "CreationDate": "2016-07-29T10:42:09.387", "Id": "38656798", "CommentCount": "1", "LastEditDate": "2016-07-29T11:22:09.867", "PostTypeId": "1", "LastEditorUserId": "3309790", "LastActivityDate": "2016-07-29T11:28:00.803", "Score": "1", "OwnerUserId": "4999954", "Tags": "<c++><templates><inheritance><template-specialization><safe-bool-idiom>", "AnswerCount": "1"}, "38657465": {"Id": "38657465", "PostTypeId": "2", "Body": "<p>When public inherite from the base class, its protected members become the derived class' protect members, which could be accessed in derived class' member functions. Note they're only accessed through the derived class itself (and its derived classes). But the protected members can't be accessed through the base class. That why <code>&amp;safe_bool::this_type_does_not_support_comparisons;</code> works but <code>&amp;safe_bool_base::this_type_does_not_support_comparisons;</code> doesn't.</p>\n<p>From the standard, <a href=\"http://eel.is/c++draft/class.protected#1\" rel=\"nofollow\">$11.4/1 Protected member access\n[class.protected]</a>:</p>\n<p>(emphasie mine)</p>\n<blockquote>\n<p id=\"so_38656798_38657465_0\">An additional access check beyond those described earlier in Clause\n  [class.access] is applied when a non-static data member or non-static\n  member function is a protected member of its naming class\n  ([class.access.base])114 As described earlier, access to a protected\n  member is granted because the reference occurs in a friend or member\n  of some class C. <strong>If the access is to form a pointer to member\n  ([expr.unary.op]), the nested-name-specifier shall denote C or a class\n  derived from C.</strong> All other accesses involve a (possibly implicit)\n  object expression ([expr.ref]). In this case, the class of the object\n  expression shall be C or a class derived from C. [ Example:</p>\n<pre><code>class B {\nprotected:\n  int i;\n  static int j;\n};\n\nclass D1 : public B {\n};\n\nclass D2 : public B {\n  friend void fr(B*,D1*,D2*);\n  void mem(B*,D1*);\n};\n\n...\nvoid D2::mem(B* pb, D1* p1) {\n  pb-&gt;i = 1;                    // ill-formed\n  p1-&gt;i = 2;                    // ill-formed\n  i = 3;                        // OK (access through this)\n  B::i = 4;                     // OK (access through this, qualification ignored)\n  int B::* pmi_B = &amp;B::i;       // ill-formed\n  int B::* pmi_B2 = &amp;D2::i;     // OK\n  j = 5;                        // OK (because j refers to static member)\n  B::j = 6;                     // OK (because B::j refers to static member)\n}\n\n...\n</code></pre>\n<p id=\"so_38656798_38657465_1\">\u2014 end example ]</p>\n</blockquote>\n<p>Note the statement <code>int B::* pmi_B = &amp;B::i; // ill-formed</code> in the sample code from the standard, basically it's the same case of your code. BTW it has nothing to do with template specialization.</p>\n", "LastEditorUserId": "3309790", "LastActivityDate": "2016-07-29T11:28:00.803", "Score": "1", "CreationDate": "2016-07-29T11:16:29.417", "ParentId": "38656798", "CommentCount": "1", "OwnerUserId": "3309790", "LastEditDate": "2016-07-29T11:28:00.803"}});