post_cb({"bq_ids": {"n4140": {"so_36946856_36946928_1": {"length": 17, "quality": 0.8947368421052632, "section_id": 5581}}, "n3337": {"so_36946856_36946928_1": {"length": 17, "quality": 0.8947368421052632, "section_id": 5363}}, "n4659": {"so_36946856_36946928_1": {"length": 17, "quality": 0.8947368421052632, "section_id": 7028}}}, "36946905": {"Id": "36946905", "PostTypeId": "2", "Body": "<p>From the <a href=\"http://en.cppreference.com/w/cpp/concept/RandomAccessIterator\" rel=\"nofollow\">cppreference documentation</a> for RandomAccessIterator:</p>\n<blockquote>\n<p id=\"so_36946856_36946905_0\">Expression: <code>i[n]</code></p>\n<p id=\"so_36946856_36946905_1\">Operational semantics: <code>*(i+n)</code></p>\n</blockquote>\n<p>Since a <code>std::vector</code>'s iterators meet the requirements of RandomAccessIterator, indexing them is equivalent to addition and dereferencing, like an ordinary pointer. <code>iter[0]</code> is equivalent to <code>*(iter+0)</code>, or <code>*iter</code>.</p>\n", "LastEditorUserId": "2357112", "LastActivityDate": "2016-04-29T20:28:51.300", "Score": "5", "CreationDate": "2016-04-29T20:26:18.937", "ParentId": "36946856", "CommentCount": "0", "OwnerUserId": "2357112", "LastEditDate": "2016-04-29T20:28:51.300"}, "36946928": {"Id": "36946928", "PostTypeId": "2", "Body": "<p>This is <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/n4582.pdf\" rel=\"nofollow\"><strong>Standard</strong></a> conforming behavior</p>\n<blockquote>\n<p id=\"so_36946856_36946928_0\"><strong>24.2.7 Random access iterators [random.access.iterators]</strong> </p>\n<p id=\"so_36946856_36946928_1\">1 A class or pointer type X satisfies the requirements of a random access iterator\n  if, in addition to satisfying the requirements for bidirectional\n  iterators, the following expressions are valid as shown in Table 118.</p>\n<p id=\"so_36946856_36946928_2\"><code>a[n]</code> convertible to reference: <code>*(a + n)</code></p>\n</blockquote>\n<p>Note that it is <strong>not</strong> required that the particular iterator is implemented as a pointer. Any iterator class with an overloaded <code>operator[]</code>, <code>operator*</code> and <code>operator+</code> with the above semantics will work. For <code>std::vector</code>, the iterator category is random access iterator, and it it <strong>required</strong> to work.</p>\n", "LastEditorUserId": "819272", "LastActivityDate": "2016-04-29T20:33:33.693", "Score": "4", "CreationDate": "2016-04-29T20:27:24.617", "ParentId": "36946856", "CommentCount": "0", "OwnerUserId": "819272", "LastEditDate": "2016-04-29T20:33:33.693"}, "36946856": {"ViewCount": "340", "Body": "<p>Recently I came across this code in my codebase (Simplified for here, of course)</p>\n<pre><code>auto toDelete = std::make_shared&lt;std::string&gt;(\"FooBar\");\nstd::vector&lt;decltype(toDelete)&gt; myVec{toDelete};\nauto iter = std::find_if(std::begin(myVec), std::end(myVec), \n   [](const decltype(toDelete) _next)\n   {\n      return *_next == \"FooBar\";\n   });\n\nif (iter != std::end(myVec))\n{\n   std::shared_ptr&lt;std::string&gt; deletedString = iter[0];\n   std::cout &lt;&lt; *deletedString;\n   myVec.erase(iter);\n}\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/34b34c727341c25f\" rel=\"nofollow\">Online Example</a></p>\n<p>Now, I noticed that here we are accessing an iterator by indexing!</p>\n<pre><code>std::shared_ptr&lt;std::string&gt; deletedString = iter[0];\n</code></pre>\n<p>I've never seen anyone access an iterator by indexing before, so all I can guess at is that the iterator gets treated like a pointer, and then we access the first element pointed to at the pointer. So is that code actually equivalent to:</p>\n<pre><code>std::shared_ptr&lt;std::string&gt; deletedString = *iter;\n</code></pre>\n<p>Or is it Undefined Behavior?</p>\n", "AcceptedAnswerId": "36946905", "Title": "Accessing a vector iterator by index?", "CreationDate": "2016-04-29T20:23:05.137", "Id": "36946856", "CommentCount": "1", "LastEditDate": "2016-04-29T20:28:51.083", "PostTypeId": "1", "LastEditorUserId": "819272", "LastActivityDate": "2016-04-29T20:33:33.693", "Score": "2", "OwnerUserId": "27678", "Tags": "<c++><c++11><iterator><dereference><random-access>", "AnswerCount": "2"}});