post_cb({"19657590": {"CommentCount": "0", "AcceptedAnswerId": "19658180", "PostTypeId": "1", "LastEditorUserId": "701092", "CreationDate": "2013-10-29T11:58:11.807", "LastActivityDate": "2013-10-29T14:35:54.940", "LastEditDate": "2013-10-29T12:00:15.583", "ViewCount": "303", "FavoriteCount": "2", "Title": "new[] if element default constructor can throw?", "Id": "19657590", "Score": "18", "Body": "<p>consider the following code:</p>\n<pre><code>example_t* a = new example_t[8];\n</code></pre>\n<p>class <code>example_t</code> has default ctor that can throw, suppose construction of 5th element in array throws. Is there automatic call to destructor of the 4 first elements? Is it a well defined behavior?</p>\n", "Tags": "<c++>", "OwnerUserId": "1340604", "AnswerCount": "2"}, "19658180": {"ParentId": "19657590", "PostTypeId": "2", "CommentCount": "9", "Body": "<p>This is perfectly well-defined and well-behaved. All completely constructed subobjects are destroyed if the initialization of an object terminates with an exception, in reverse order of their construction. This is the same for arrays as it is for objects of user-defined type (think classes and class members).</p>\n<p>Formally, we have  C++11 15.2/2:</p>\n<blockquote>\n<p id=\"so_19657590_19658180_0\">An object of any storage duration whose initialization or destruction is terminated by an exception will\n  have destructors executed for all of its fully constructed subobjects (excluding the variant members of a\n  union-like class), that is, for subobjects for which the principal constructor (12.6.2) has completed execution\n  and the destructor has not yet begun execution.</p>\n</blockquote>\n", "OwnerUserId": "596781", "LastEditorUserId": "952747", "LastEditDate": "2013-10-29T14:35:54.940", "Id": "19658180", "Score": "14", "CreationDate": "2013-10-29T12:26:02.413", "LastActivityDate": "2013-10-29T14:35:54.940"}, "bq_ids": {"n4140": {"so_19657590_19657718_0": {"section_id": 6089, "quality": 0.8913043478260869, "length": 41}, "so_19657590_19658180_0": {"section_id": 3344, "quality": 0.96875, "length": 31}}, "n3337": {"so_19657590_19657718_0": {"section_id": 5857, "quality": 0.9130434782608695, "length": 42}, "so_19657590_19658180_0": {"section_id": 3214, "quality": 0.96875, "length": 31}}, "n4659": {"so_19657590_19657718_0": {"section_id": 7585, "quality": 0.9130434782608695, "length": 42}}}, "19657718": {"ParentId": "19657590", "PostTypeId": "2", "CommentCount": "8", "Body": "<p>Per \u00a7 5.3.4 / 8:</p>\n<blockquote>\n<p id=\"so_19657590_19657718_0\">A new-expression obtains storage for the object by calling an\n  allocation function (3.7.4.1). <strong>If the new-expression terminates by\n  throwing an exception, it may release storage by calling a\n  deallocation function</strong> (3.7.4.2). If the allocated type is a non-array\n  type, the allocation function\u2019s name is operator new and the\n  deallocation function\u2019s name is operator delete. If the allocated type\n  is an array type, the allocationfunction\u2019s name is operator new[] and\n  the deallocation function\u2019s name is operator delete[].</p>\n</blockquote>\n<p>They will be deleted since deallocation function will invokes destructors.</p>\n<p>\u00a0</p>\n<hr>\n<p>I know leaning on compiler's ouput is not trust-able, but it's at least a good observation: <a href=\"http://coliru.stacked-crooked.com/a/de09000d7a296fc8\" rel=\"nofollow\">Live Test</a></p>\n</hr>", "OwnerUserId": "952747", "LastEditorUserId": "1322972", "LastEditDate": "2013-10-29T12:25:39.800", "Id": "19657718", "Score": "9", "CreationDate": "2013-10-29T12:03:33.447", "LastActivityDate": "2013-10-29T12:25:39.800"}});