post_cb({"41200573": {"ParentId": "41167119", "CommentCount": "1", "Body": "<p>I believe the compiler might be wrong here: the type referred to by <code>CandidatesCollection</code> should in fact have external linkage.</p>\n<blockquote>\n<p id=\"so_41167119_41200573_0\"><strong>[basic.link]/4</strong> ...A name having namespace scope that has not been given internal linkage above has the same linkage as the enclosing namespace if it is the name of</p>\n<p id=\"so_41167119_41200573_1\">...</p>\n<p id=\"so_41167119_41200573_2\"><em>(4.3)</em> \u2014 a named class (Clause 9), or an unnamed class defined in a <code>typedef</code> declaration in which the class has the <code>typedef</code> name for linkage purposes (7.1.3); ...</p>\n<hr>\n<p id=\"so_41167119_41200573_3\"><strong>[dcl.typedef]/9</strong> If the <code>typedef</code> declaration defines an unnamed class (or enum), the first <em>typedef-name</em> declared by the declaration to be that class type (or enum type) is used to denote the class type (or enum type) for linkage purposes only (3.5). [ <em>Example:</em></p>\n<pre><code> typedef struct { } *ps, S; // S is the class name for linkage purposes\n</code></pre>\n<p id=\"so_41167119_41200573_4\"><em>\u2014end example</em> ]</p>\n</hr></blockquote>\n<p>Thus, if <code>CandidatesCollection</code> were defined as</p>\n<pre><code>typedef struct { ... } CandidatesCollection;\n</code></pre>\n<p>these two passages make it clear that the class named by <code>CandidatesCollection</code> would happily have external linkage.</p>\n<p>Then there's</p>\n<blockquote>\n<p id=\"so_41167119_41200573_5\"><strong>[dcl.typedef]/2</strong> A <em>typedef-name</em> can also be introduced by an <em>alias-declaration</em>. The identifier following the <code>using</code> keyword becomes a <em>typedef-name</em> and the optional <em>attribute-specifier-seq</em> following the identifier appertains to that <em>typedef-name</em>. It has <strong>the same semantics</strong> as if it were introduced by the <code>typedef</code> specifier.</p>\n</blockquote>\n<p>Emphasis mine. This suggests that the name introduced by <code>using</code> should give the unnamed class \"the name for linkage purposes\" just as well as the equivalent <code>typedef</code> declaration, thereby ensuring that the class has external linkage.</p>\n", "OwnerUserId": "1670129", "PostTypeId": "2", "Id": "41200573", "Score": "1", "CreationDate": "2016-12-17T16:17:20.960", "LastActivityDate": "2016-12-17T16:17:20.960"}, "bq_ids": {"n4140": {"so_41167119_41200573_3": {"section_id": 5415, "quality": 0.9130434782608695, "length": 21}, "so_41167119_41200573_2": {"section_id": 7137, "quality": 0.9285714285714286, "length": 13}, "so_41167119_41200573_5": {"section_id": 5408, "quality": 0.92, "length": 23}, "so_41167119_41200573_0": {"section_id": 7137, "quality": 0.9333333333333333, "length": 14}}, "n3337": {"so_41167119_41200573_3": {"section_id": 5210, "quality": 0.9130434782608695, "length": 21}, "so_41167119_41200573_2": {"section_id": 6881, "quality": 0.9285714285714286, "length": 13}, "so_41167119_41200573_0": {"section_id": 6881, "quality": 0.9333333333333333, "length": 14}, "so_41167119_41200573_5": {"section_id": 5203, "quality": 0.92, "length": 23}}, "n4659": {"so_41167119_41200573_3": {"section_id": 6837, "quality": 0.9130434782608695, "length": 21}, "so_41167119_41200573_2": {"section_id": 8638, "quality": 0.9285714285714286, "length": 13}, "so_41167119_41200573_0": {"section_id": 8638, "quality": 0.9333333333333333, "length": 14}, "so_41167119_41200573_5": {"section_id": 6830, "quality": 0.92, "length": 23}}}, "41167119": {"CommentCount": "3", "ViewCount": "209", "CreationDate": "2016-12-15T14:54:25.440", "LastActivityDate": "2016-12-17T16:17:20.960", "Title": "How to fix a -Wsubobject-linkage warning?", "AcceptedAnswerId": "41200573", "PostTypeId": "1", "Id": "41167119", "Score": "4", "Body": "<p>I'm getting a gcc warning for code which compiles fine and warning free in clang and VC++, so I assume it's something gcc specific. This is the code:</p>\n<pre><code>namespace myns {\n  using TokenList = std::vector&lt;size_t&gt;;\n  using RuleList = std::vector&lt;size_t&gt;;\n  using RulePathPair = std::pair&lt;size_t, TokenList&gt;;\n  using CandidatesCollection = struct { std::map&lt;size_t, TokenList&gt; tokens; std::set&lt;RulePathPair&gt; rules; };\n\n  class A {\n  private:\n    CandidatesCollection _candidates;\n  };\n} // namespace myns\n</code></pre>\n<p>and the warning is:</p>\n<blockquote>\n<p id=\"so_41167119_41167119_0\">warning: 'myns::A' has a field 'myns::A::_candidates' whose type has no linkage [-Wsubobject-linkage]</p>\n</blockquote>\n<p>What does this mean and how to get rid of the warning?</p>\n", "Tags": "<c++><c++11>", "OwnerUserId": "1137174", "AnswerCount": "1"}});