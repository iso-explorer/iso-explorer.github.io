post_cb({"14566795": {"ParentId": "14566341", "CommentCount": "0", "Body": "<p>The error message is compiler dependent, however, the problem is that Foo doesn't provide a default constructor.  That, and your rules are missing one:</p>\n<p>From the standard 12.1</p>\n<blockquote>\n<p id=\"so_14566341_14566795_0\">defaulted default constructor for class X is defined as deleted if: ...</p>\n<p id=\"so_14566341_14566795_1\">any direct or virtual base class, or non-static data member with no\n  brace-or-equal-initializer, has class type M (or array thereof) and\n  either M has no default constructor or overload resolution (13.3) as\n  applied to M\u2019s default constructor results in an ambiguity or in a\n  function that is deleted or inaccessible from the defaulted default\n  constructor.</p>\n</blockquote>\n<p>Since Foo has no default constructor, Bar's constructor is defined as deleted.</p>\n", "OwnerUserId": "862231", "PostTypeId": "2", "Id": "14566795", "Score": "1", "CreationDate": "2013-01-28T16:42:17.323", "LastActivityDate": "2013-01-28T16:42:17.323"}, "14566341": {"CommentCount": "0", "ViewCount": "397", "CreationDate": "2013-01-28T16:17:02.113", "LastActivityDate": "2013-01-28T19:51:47.233", "Title": "Missing rules for deleted default constructor (and copy control members)?", "AcceptedAnswerId": "14566807", "PostTypeId": "1", "Id": "14566341", "Score": "1", "Body": "<p>My c++ book (lippman, c++ primer, fifth ed., p. 508) provides these 4 rules for figuring out when the compiler will synthesize the copy control and default constructor as deleted members:</p>\n<blockquote>\n<ul>\n<li><p id=\"so_14566341_14566341_0\">The synthesized destructor is defined as deleted if the class has a member whose own destructor is deleted or inaccessible (e.g. private).</p></li>\n<li><p id=\"so_14566341_14566341_1\">The synthesized copy constructor is defined as deleted if the class has a member whose own copy constructor is deleted or inaccessible. It is also deleted if the class has a member with a deleted or inaccessible destructor.</p></li>\n<li><p id=\"so_14566341_14566341_2\">The synthesized copy-assignment operator is defined as deleted if a member has a deleted or inaccessible copy-assignment operator, or if the class has a const or reference member.</p></li>\n<li><p id=\"so_14566341_14566341_3\">The synthesized default constructor is defined as deleted if the class has a member with a deleted or inaccessible destructor; or has a reference member that does not have an in-class initializer; or has a const member whose type does not explicitly define a default constructor and that member does not have an in-class initializer.</p></li>\n</ul>\n</blockquote>\n<p>I'm failing to see how these rules explain the SECOND error here:</p>\n<pre><code>class Foo {\npublic:\n  Foo(int i) { }\n};\n\nclass Bar {\nprivate:\n  Foo foo;\n};\n\nint main() {\n  Foo foo; //error: no matching constructor in Foo\n  Bar bar; //error: implicitly deleted constructor in Bar\n  return 0;\n}\n</code></pre>\n<p>The first error is understandable and has nothing to do with this question directly. The second error is surprising because the above rules not explain why Bar should get its default constructor synthesized as deleted.</p>\n<p>what rules is my book missing, or am I not grasping the rules?</p>\n", "Tags": "<c++>", "OwnerUserId": "2015453", "AnswerCount": "4"}, "14566958": {"ParentId": "14566341", "CommentCount": "0", "Body": "<p>What would the default constructor of <code>Bar</code> possibly do? It has to construct a <code>Foo</code>, but can't default-construct it. How can the compiler know what value to give <code>Foo</code>'s constructor? It can't. So if any member or base is not default-constructible, the compiler cannot create a default constructor for that class. Therefore, the Standard rightly deletes <code>Bar</code>'s default constructor.</p>\n", "OwnerUserId": "298661", "PostTypeId": "2", "Id": "14566958", "Score": "0", "CreationDate": "2013-01-28T16:50:20.407", "LastActivityDate": "2013-01-28T16:50:20.407"}, "14566807": {"ParentId": "14566341", "PostTypeId": "2", "CommentCount": "5", "Body": "<p><code>Foo</code> has no default constructor because you declare a constructor; from C++11 12.1/5:</p>\n<blockquote>\n<p id=\"so_14566341_14566807_0\">If there is no user-declared constructor for class X, a constructor having no parameters is implicitly declared\n  as defaulted</p>\n</blockquote>\n<p><code>Bar</code> has a deleted default constructor because <code>Foo</code> has no default constructor; from C++11 12.1/5 (5th bullet point):</p>\n<blockquote>\n<p id=\"so_14566341_14566807_1\">A defaulted default constructor for class X is defined as deleted if [...] any [...] non-static data member [...] has no default constructor</p>\n</blockquote>\n<p>The \"rules\" you quote do seem to be missing that point, only mentioning the case of const-qualified members in the 3rd bullet point.</p>\n", "OwnerUserId": "204847", "LastEditorUserId": "204847", "LastEditDate": "2013-01-28T19:51:47.233", "Id": "14566807", "Score": "3", "CreationDate": "2013-01-28T16:42:54.837", "LastActivityDate": "2013-01-28T19:51:47.233"}, "14566784": {"ParentId": "14566341", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>\u00a9 ISO/IEC \u00a712.1 [Constructors]:</p>\n<blockquote>\n<p id=\"so_14566341_14566784_0\">An implicitly-declared default constructor for class <code>X</code> is de\ufb01ned as deleted if:</p>\n<ul>\n<li>any non-static data member of const-quali\ufb01ed type (or array thereof) does not have a user-provided default constructor,</li>\n<li>any non-static data member is of reference type,</li>\n<li><strong>X is a union-like class that has a variant member with a non-trivial default constructor</strong></li>\n</ul>\n</blockquote>\n<p><code>Bar</code> cannot be instantiated because <code>Foo</code> does not have a default constructor (you defined your own so the compiler elided the default one); and default-constructing <code>Bar</code> would cause the use of the deleted default-constructor of <code>Foo</code> which can't be done; so the compiler therefore implicitly deletes <code>Bar</code>'s constructor.</p>\n<p>The only way for this to work is to create a public <code>Bar</code> constructor and initialize the <code>Foo</code> object in the member initializer-list; so that default-construction of <code>Bar</code> calls the correct constructor of <code>foo</code>. For example:</p>\n<pre><code>class Bar {\n    Foo foo;\n    public:\n        Bar() : foo(0) {} // calls Foo::Foo(int) constructor\n};\n\nint main()\n{\n    Bar bar; // okay\n}\n</code></pre>\n", "OwnerUserId": "701092", "LastEditorUserId": "701092", "LastEditDate": "2013-01-28T17:38:57.733", "Id": "14566784", "Score": "1", "CreationDate": "2013-01-28T16:41:42.903", "LastActivityDate": "2013-01-28T17:38:57.733"}, "bq_ids": {"n4140": {"so_14566341_14566795_1": {"section_id": 369, "quality": 0.8620689655172413, "length": 25}, "so_14566341_14566807_0": {"section_id": 369, "quality": 1.0, "length": 10}, "so_14566341_14566341_0": {"section_id": 401, "quality": 0.6153846153846154, "length": 8}, "so_14566341_14566341_1": {"section_id": 369, "quality": 0.5238095238095238, "length": 11}, "so_14566341_14566784_0": {"section_id": 369, "quality": 0.8333333333333334, "length": 5}, "so_14566341_14566341_2": {"section_id": 472, "quality": 0.5333333333333333, "length": 8}, "so_14566341_14566795_0": {"section_id": 369, "quality": 1.0, "length": 6}, "so_14566341_14566807_1": {"section_id": 369, "quality": 1.0, "length": 11}}, "n3337": {"so_14566341_14566795_1": {"section_id": 359, "quality": 0.9655172413793104, "length": 28}, "so_14566341_14566807_0": {"section_id": 359, "quality": 1.0, "length": 10}, "so_14566341_14566341_0": {"section_id": 392, "quality": 0.6153846153846154, "length": 8}, "so_14566341_14566341_1": {"section_id": 451, "quality": 0.6190476190476191, "length": 13}, "so_14566341_14566784_0": {"section_id": 359, "quality": 0.8333333333333334, "length": 5}, "so_14566341_14566341_3": {"section_id": 359, "quality": 0.5161290322580645, "length": 16}, "so_14566341_14566341_2": {"section_id": 463, "quality": 0.6, "length": 9}, "so_14566341_14566795_0": {"section_id": 359, "quality": 1.0, "length": 6}, "so_14566341_14566807_1": {"section_id": 359, "quality": 1.0, "length": 11}}, "n4659": {"so_14566341_14566795_1": {"section_id": 382, "quality": 0.8275862068965517, "length": 24}, "so_14566341_14566807_0": {"section_id": 381, "quality": 1.0, "length": 10}, "so_14566341_14566341_0": {"section_id": 418, "quality": 0.6153846153846154, "length": 8}, "so_14566341_14566341_1": {"section_id": 382, "quality": 0.5238095238095238, "length": 11}, "so_14566341_14566784_0": {"section_id": 382, "quality": 0.6666666666666666, "length": 4}, "so_14566341_14566341_2": {"section_id": 495, "quality": 0.6, "length": 9}, "so_14566341_14566795_0": {"section_id": 382, "quality": 1.0, "length": 6}, "so_14566341_14566807_1": {"section_id": 382, "quality": 1.0, "length": 11}}}});