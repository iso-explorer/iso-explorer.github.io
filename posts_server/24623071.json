post_cb({"24623071": {"CommentCount": "17", "CreationDate": "2014-07-08T03:07:27.043", "PostTypeId": "1", "AcceptedAnswerId": "24623317", "LastEditorUserId": "-1", "LastActivityDate": "2015-02-20T14:13:40.440", "LastEditDate": "2017-05-23T11:52:19.697", "ViewCount": "1041", "FavoriteCount": "6", "Title": "Is Type(::x); valid?", "Id": "24623071", "Score": "21", "Body": "<p>While <a href=\"https://stackoverflow.com/questions/24622472/why-do-anonymous-objects-sometimes-require-a-default-constructor#comment38158615_24622522\">discussing</a> the <code>Type(identifier);</code> syntax and how it's a declaration, I came across <code>Type(::x);</code> not working with Clang. I would expect that given a global variable <code>x</code>, it would treat <code>::x</code> as an expression (<code>::x + 2</code> works) and cast <code>::x</code> to <code>Type</code>. However, it gives a compiler error.</p>\n<p>Here is <a href=\"http://coliru.stacked-crooked.com/a/bb8132793645d00c\" rel=\"nofollow noreferrer\">a short example</a>:</p>\n<pre><code>int x;\n\nint main() {\n    int(::x); //does not compile\n    int(::x + 2); //compiles\n}\n</code></pre>\n<p>The compiler error given by Clang 3.5 is:</p>\n<blockquote>\n<p id=\"so_24623071_24623071_0\">error: definition or redeclaration of 'x' cannot name the global scope</p>\n</blockquote>\n<p>GCC 4.9.0, however, compiles this just fine. Is this code valid or not?</p>\n", "Tags": "<c++><compiler-errors><expression><declaration><language-lawyer>", "OwnerUserId": "962089", "AnswerCount": "2"}, "24623193": {"ParentId": "24623071", "LastEditDate": "2014-07-08T03:31:35.660", "CommentCount": "4", "CreationDate": "2014-07-08T03:23:44.710", "OwnerUserId": "251738", "LastEditorUserId": "251738", "PostTypeId": "2", "Id": "24623193", "Score": "11", "Body": "<p>This looks like the most vexing parse to me. If it can be parsed as a declaration it will be. The first could be parsed as a declaration of an int variable (<code>int ::x;</code>), but the <code>::</code> is illegal in that context. The second <em>has</em> to be an expression and so the compiler does the math, casts it to int, and throws away the result.</p>\n<p>Was this a pedantic question, or is there another problem as well? If you have a specific problem you're trying to solve, additional information would allow a workaround for your use case.</p>\n", "LastActivityDate": "2014-07-08T03:31:35.660"}, "24623317": {"ParentId": "24623071", "LastEditDate": "2015-02-20T14:13:40.440", "CommentCount": "18", "CreationDate": "2014-07-08T03:41:19.393", "OwnerUserId": "1708801", "LastEditorUserId": "1708801", "PostTypeId": "2", "Id": "24623317", "Score": "18", "Body": "<p>As far as I can tell this is covered by <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3485.pdf\" rel=\"nofollow\">draft C++ standard</a> section <code>8.3</code> <em>Meaning of declarators</em> paragraph <em>6</em> which says (<em>emphasis mine going forward</em>):</p>\n<blockquote>\n<p id=\"so_24623071_24623317_0\">In a declaration T D where D has the form</p>\n<p id=\"so_24623071_24623317_1\">( D1 )</p>\n<p id=\"so_24623071_24623317_2\">the type of the contained declarator-id is the same as that of the contained declarator-id in\n  the declaration</p>\n<p id=\"so_24623071_24623317_3\">T D1</p>\n<p id=\"so_24623071_24623317_4\">Parentheses do not alter the type of the embedded declarator-id, but they can alter the binding of complex\n  declarators.</p>\n</blockquote>\n<p>so:</p>\n<pre><code>int(::x);\n</code></pre>\n<p>is equivalent to:</p>\n<pre><code>int ::x ;\n</code></pre>\n<p>which is clearly not valid, and this produces the same error as well. So <code>gcc 4.9</code> is not correct here but since this looks fixed in the <code>gcc 4.8.3</code> which was released later I would expect this to be fixed in later releases of <code>4.9</code> as well. Although I don't see any obvious matches for this issue in the <a href=\"https://gcc.gnu.org/bugzilla/buglist.cgi?bug_status=RESOLVED&amp;resolution=FIXED&amp;target_milestone=4.8.3\" rel=\"nofollow\">gcc 4.8.3 bugs fixed list</a> but they don't claim it is a complete list.</p>\n<p>The second case is a functional explicit type conversion which is covered in section <code>5.2.3</code> <em>Explicit type conversion (functional notation)</em> which says:</p>\n<blockquote>\n<p id=\"so_24623071_24623317_5\">A simple-type-specifier (7.1.6.2) or typename-specifier (14.6)\n  followed by a parenthesized expression-list constructs a value of the\n  specified type given the expression list. If the expression list is a\n  single expression, the type conversion expression is equivalent (in\n  definedness, and if defined in meaning) to the corresponding cast\n  expression (5.4).[...]</p>\n</blockquote>\n<p>This is unambiguous since <code>::x + 2</code> is an <em>expression</em>.</p>\n<p>The section that covers when a statement is considered a declaration or a expression is <code>6.8</code> <em>Ambiguity resolution</em> which says:</p>\n<blockquote>\n<p id=\"so_24623071_24623317_6\">There is an ambiguity in the grammar involving expression-statements\n  and declarations: An expressionstatement with a function-style\n  explicit type conversion (5.2.3) as its leftmost subexpression can be\n  indistinguishable from a declaration where the first declarator starts\n  with a (. <strong>In those cases the statement is a declaration.</strong> [ Note: To\n  disambiguate, the whole statement might have to be examined to\n  determine if it is an expression-statement or a declaration. This\n  disambiguates many examples.</p>\n</blockquote>\n<p>and provides the following examples:</p>\n<blockquote id=\"so_24623071_24623317_7\">\n<pre><code>T(a)-&gt;m = 7; // expression-statement\nT(a)++; // expression-statement\nT(a,5)&lt;&lt;c; // expression-statement\nT(*d)(int); // declaration\nT(e)[5]; // declaration\nT(f) = { 1, 2 }; // declaration\nT(*g)(double(3)); // declaration\n</code></pre>\n</blockquote>\n<p>Note: without the <code>()</code> then <code>T ::D</code> is a <em>qualified-id</em> in the case of <code>T</code> being a <em>class</em>, that is a covered in the grammar of <code>5.1</code> <em>Primary expressions</em>.</p>\n<p><b>Update</b></p>\n<p>Filed a <a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=62116\" rel=\"nofollow\">gcc bug report</a>.</p>\n<p>gcc's response is that:</p>\n<blockquote>\n<p id=\"so_24623071_24623317_8\">Current G++ and EDG both treat it as the valid expression (int)::x</p>\n</blockquote>\n<p>Since this response implies <code>clang</code> is incorrect(<em>I don't agree though</em>), I filed a <a href=\"http://llvm.org/bugs/show_bug.cgi?id=22633\" rel=\"nofollow\">clang bug report</a> and <a href=\"http://llvm.org/bugs/show_bug.cgi?id=4594\" rel=\"nofollow\">older bug report</a> looks similar and seems to disagree with the <code>gcc</code> response.</p>\n<p><b>Update 2</b></p>\n<p>In response to the <code>clang bug report</code> Richard Smith agrees this should be treated as a declaration and says:</p>\n<blockquote>\n<p id=\"so_24623071_24623317_9\">That does not imply clang is incorrect; in fact, Clang is correct\n  here, as far as I can see. (I've also sent a bug report to EDG.)</p>\n<p id=\"so_24623071_24623317_10\">That said, we should give a proper 'you hit a vexing parse, here's how\n  to disambiguate' error in this case.</p>\n</blockquote>\n<p><b>Update 3</b></p>\n<p><code>gcc</code> <a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=62116#c4\" rel=\"nofollow\">confirms</a> it is a bug.</p>\n", "LastActivityDate": "2015-02-20T14:13:40.440"}, "bq_ids": {"n4140": {"so_24623071_24623317_2": {"section_id": 3213, "quality": 1.0, "length": 7}, "so_24623071_24623317_4": {"section_id": 3213, "quality": 1.0, "length": 12}, "so_24623071_24623317_6": {"section_id": 3921, "quality": 0.625, "length": 25}, "so_24623071_24623317_5": {"section_id": 5999, "quality": 0.9285714285714286, "length": 26}, "so_24623071_24623071_0": {"section_id": 190, "quality": 0.5714285714285714, "length": 4}}, "n3337": {"so_24623071_24623317_2": {"section_id": 3087, "quality": 1.0, "length": 7}, "so_24623071_24623317_4": {"section_id": 3087, "quality": 1.0, "length": 12}, "so_24623071_24623317_6": {"section_id": 3781, "quality": 0.75, "length": 30}, "so_24623071_24623317_5": {"section_id": 5767, "quality": 0.9285714285714286, "length": 26}, "so_24623071_24623071_0": {"section_id": 184, "quality": 0.5714285714285714, "length": 4}}, "n4659": {"so_24623071_24623317_2": {"section_id": 3970, "quality": 1.0, "length": 7}, "so_24623071_24623317_4": {"section_id": 3970, "quality": 1.0, "length": 12}, "so_24623071_24623071_0": {"section_id": 180, "quality": 0.5714285714285714, "length": 4}, "so_24623071_24623317_6": {"section_id": 4807, "quality": 0.625, "length": 25}}}});