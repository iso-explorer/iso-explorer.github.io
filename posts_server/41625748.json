post_cb({"41625748": {"CommentCount": "5", "ViewCount": "150", "PostTypeId": "1", "LastEditorUserId": "5453417", "CreationDate": "2017-01-13T00:57:29.273", "LastActivityDate": "2017-01-13T02:15:03.867", "Title": "how to std::bind templated function?", "AcceptedAnswerId": "41626347", "LastEditDate": "2017-01-13T02:15:03.867", "Id": "41625748", "Score": "2", "Body": "<p>1) I have function declared as</p>\n<pre><code>    template&lt; unsigned ... N, typename ... T2&gt;\n    auto Foo(T2 ... args);\n</code></pre>\n<p>it works properly when it called for example as </p>\n<pre><code>double a = Foo&lt;1&gt;(1.0);\n</code></pre>\n<p>but doesn't even compile as</p>\n<pre><code>double a = Foo&lt;1,double&gt;(1.0);\n</code></pre>\n<p>Why it so?</p>\n<p>2) The actual problem is that neither of the following compiles, so how to <code>bind</code> it correctly?</p>\n<pre><code> std::function&lt;double(double)&gt; f = std::bind(&amp;Foo&lt;1&gt;,std::placeholders::_1); \n std::function&lt;double(double)&gt; g = std::bind(&amp;Foo&lt;1,double&gt;,std::placeholders::_1); \n</code></pre>\n<p><strong>Edit</strong><br>\nThanks to Jonathan Wakely\n3) The reason to <code>std::bind</code> it comes from</br></p>\n<pre><code>class Bar\n{\n    Bar(std::function&lt;T(T)&gt; &amp;f);\n};\n</code></pre>\n", "Tags": "<c++><templates><c++14><variadic-templates>", "OwnerUserId": "5453417", "AnswerCount": "1"}, "41626347": {"ParentId": "41625748", "CommentCount": "4", "CreationDate": "2017-01-13T02:11:51.377", "OwnerUserId": "6592023", "PostTypeId": "2", "Id": "41626347", "Score": "1", "Body": "<p>I'm only trying to cover <code>Why it so?</code> part assuming you are getting smth like</p>\n<blockquote>\n<p id=\"so_41625748_41626347_0\">note: candidate template ignored: invalid explicitly-specified\n  argument for 1st template parameter</p>\n</blockquote>\n<p><a href=\"http://open-std.org/JTC1/SC22/WG21/docs/papers/2016/n4618.pdf\" rel=\"nofollow noreferrer\">n4618</a> 14.1.11 says:</p>\n<blockquote>\n<p id=\"so_41625748_41626347_1\">A template parameter pack of a function template shall not be followed\n  by another template parameter unless that template parameter can be\n  deduced from the parameter-type-list (8.3.5) of the function template\n  or has a default argument (14.8.2).</p>\n</blockquote>\n<p><a href=\"http://en.cppreference.com/w/cpp/language/parameter_pack\" rel=\"nofollow noreferrer\">cppreference</a> alludes similarly:</p>\n<blockquote>\n<p id=\"so_41625748_41626347_2\">In a function template, the template parameter pack may appear earlier\n  in the list provided that all following parameters can be deduced from\n  the function arguments</p>\n</blockquote>\n<p>Your first parameter pack is not among function arguments so its impossible to deduce it properly  </p>\n", "LastActivityDate": "2017-01-13T02:11:51.377"}, "bq_ids": {"n4140": {"so_41625748_41626347_1": {"section_id": 64, "quality": 0.9, "length": 18}}, "n3337": {"so_41625748_41626347_1": {"section_id": 59, "quality": 0.75, "length": 15}}, "n4659": {"so_41625748_41626347_1": {"section_id": 66, "quality": 0.9, "length": 18}}}});