post_cb({"17481028": {"Id": "17481028", "PostTypeId": "2", "Body": "<p>By default 3.7 will be considered as <code>double</code> in java. If you want it treated as <code>float</code>, you need to append f, 3.7f.</p>\n<p>Please refer <a href=\"http://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html\" rel=\"nofollow\">java tutorial</a> and <a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-4.html#jls-4.2.3\" rel=\"nofollow\">Java Language Specification</a>.</p>\n", "LastActivityDate": "2013-07-05T04:22:56.103", "CommentCount": "2", "CreationDate": "2013-07-05T04:22:56.103", "ParentId": "17481015", "Score": "0", "OwnerUserId": "1094597"}, "17481727": {"Id": "17481727", "PostTypeId": "2", "Body": "<p>There seem to have been at least a couple of reasons for this.</p>\n<p>First of all, the PDP-11 floating point unit had a single precision mode and a double precision mode. Switching between modes was possible, but fairly slow. At the same time, execution in double precision mode was almost as fast as in single precision mode (if memory serves, even faster in a few cases).</p>\n<p>Second, early C didn't have a way to specify function parameter types. The standard library functions only accepted double precision floating point (since it gave extra precision almost for free). Writing the library to deal with both single and double precision floating point would have (approximately) doubled the effort, but provided little real advantage.</p>\n", "LastActivityDate": "2013-07-05T05:34:02.210", "CommentCount": "0", "CreationDate": "2013-07-05T05:34:02.210", "ParentId": "17481015", "Score": "3", "OwnerUserId": "179910"}, "bq_ids": {"n4140": {"so_17481015_17481021_0": {"length": 14, "quality": 0.875, "section_id": 5348}}, "n3337": {"so_17481015_17481021_0": {"length": 14, "quality": 0.875, "section_id": 5145}}, "n4659": {"so_17481015_17481021_0": {"length": 14, "quality": 0.875, "section_id": 6773}}}, "17481021": {"Id": "17481021", "PostTypeId": "2", "Body": "<p>This is because the <code>3.7</code> literal is a <code>double</code>. If you want <code>float</code>, use <code>3.7f</code>. In C++, it is specified in the standard, <strong>2.14.4 Floating Literals</strong>. The most relevant section is</p>\n<blockquote>\n<p id=\"so_17481015_17481021_0\">The type of a floating literal is <code>double</code> unless explicitly specified by a suffix. The suffixes <code>f</code> and <code>F</code> specify\n  <code>float</code>, the suffixes <code>l</code> and <code>L</code> specify long double. </p>\n</blockquote>\n<p>This doesn't answer <em>why</em> this is so. I imagine it is because the way it was in C, and the reason it is that way in C must be, to some level, arbitrary.</p>\n", "LastEditorUserId": "661519", "LastActivityDate": "2013-07-05T04:38:38.973", "Score": "5", "CreationDate": "2013-07-05T04:22:00.067", "ParentId": "17481015", "CommentCount": "6", "OwnerUserId": "661519", "LastEditDate": "2013-07-05T04:38:38.973"}, "17482164": {"Id": "17482164", "PostTypeId": "2", "Body": "<p>Floating point doesn't have an exact representation.  This means that 3.7d != 3.7f as these have different precision. As 3.7d has more precision it makes a better choice for the default value 3.7.  If you used 3.7f you can assign this to a <code>double</code> and be unaware that this lack the precision of a double e.g.</p>\n<pre><code>double d = 3.7f;\nSystem.out.println(d); // doesn't print 3.7 as expected!\n</code></pre>\n", "LastActivityDate": "2013-07-05T06:09:33.070", "CommentCount": "0", "CreationDate": "2013-07-05T06:09:33.070", "ParentId": "17481015", "Score": "0", "OwnerUserId": "57695"}, "17481015": {"ViewCount": "227", "Body": "<p>Please explain:</p>\n<p>I'm declaring a class with 2 constructors as following:</p>\n<pre><code>class A {\npublic :\n  A (double x) {cout &lt;&lt; \"DOUBLE \\n\";}\n  A (float x) {cout &lt;&lt; \"FLOAT \\n\";}\n};\n</code></pre>\n<p>Then:</p>\n<pre><code>A a (3.7);\n</code></pre>\n<p>This result with <em>DOUBLE</em> as output.\nI've tried this also on java - same result.\nCan anyone explain why?</p>\n<p>EDIT: I do realise double is the default type for number such as <em>3.7</em> My question is why and if there is a good reason for that.</p>\n", "AcceptedAnswerId": "17481021", "Title": "double prefered over float at constructortion", "CreationDate": "2013-07-05T04:21:18.353", "Id": "17481015", "CommentCount": "2", "LastEditDate": "2013-07-05T04:27:13.110", "PostTypeId": "1", "LastEditorUserId": "2260356", "LastActivityDate": "2013-07-05T06:09:33.070", "Score": "2", "OwnerUserId": "2260356", "Tags": "<java><c++><constructor><double>", "AnswerCount": "4"}});