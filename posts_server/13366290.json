post_cb({"13366879": {"ParentId": "13366290", "CommentCount": "0", "Body": "<p>I can't give a definitive answer, but my guess would be that it's because in the <code>for</code> loop case, there are three different expressions, each of which you may or may not need to use depending on the loop.</p>\n<p>In the <code>if</code> case, it would make no sense if there were no expression; it would need to always act as if the expression were true or false, and thus be equivalent to just one of the clauses alone. In the <code>while</code> case, there would be a meaningful interpretation of <code>while () { }</code>, which would be to evaluate to <code>while (1) { }</code> (giving you a loop that you can break out of with <code>break</code>), but I guess that the benefits of leaving out that single character are not worth the trouble.</p>\n<p>However, in the <code>for</code> loop case, there are three different expressions, each of which may or may not be needed. For instance, if you want to initialize and increment something on every loop, but will use <code>break</code> to break out of the loop, you can write <code>for (i = 0; ; ++i)</code>, or if you just want the test and increment, because your variable is already initialized, you could write <code>for (; i &gt; 0; --i)</code>. Given that each of these expressions may not be necessary depending on your loop, making you fill in a placeholder for all that you do not use seems a bit cumbersome; and for consistency, rather than requiring a placeholder in one of them, all of them are optional, and the condition is considered to be a constant non-zero value if omitted.</p>\n<p>Of course, it is sometimes easy to read too much intent into a design decision. Sometimes, the reason for a given standard is simply that that's how it was implemented in the first implementation, and everyone else just copied that. For an example, see <a href=\"https://plus.google.com/101960720994009339267/posts/R58WgWwN9jp\" rel=\"nofollow\">Rob Pike's explanation</a> of why files starting with <code>.</code> are hidden in Unix; it wasn't due to a deliberate design decision, but simply because someone took a shortcut when writing <code>ls</code> and didn't want to display the <code>.</code> and <code>..</code> directory entries every time.</p>\n", "OwnerUserId": "69755", "PostTypeId": "2", "Id": "13366879", "Score": "3", "CreationDate": "2012-11-13T18:53:33.913", "LastActivityDate": "2012-11-13T18:53:33.913"}, "13366758": {"ParentId": "13366290", "CommentCount": "0", "Body": "<p><a href=\"http://www.open-std.org/JTC1/SC22/WG14/www/docs/n1256.pdf\">http://www.open-std.org/JTC1/SC22/WG14/www/docs/n1256.pdf</a></p>\n<p>These are the iteration statements</p>\n<blockquote>\n<p id=\"so_13366290_13366758_0\">while ( expression ) statement </p>\n<p id=\"so_13366290_13366758_1\">do statement while ( expression ) ; </p>\n<p id=\"so_13366290_13366758_2\">for ( expression [opt] ; expression [opt] ; expression [opt] ) statement </p>\n<p id=\"so_13366290_13366758_3\">for ( declaration expression [opt] ; expression [opt] ) statement</p>\n</blockquote>\n<p>The while loop was designed to evaluate the controlling expression <strong>before</strong> each execution of the loop and the do loop was designed to evaluate <strong>after</strong> each execution.</p>\n<p>The for loop was designed as a more sophisticated iteration statement.</p>\n<blockquote>\n<p id=\"so_13366290_13366758_4\">6.8.5.3 The for statement</p>\n<p id=\"so_13366290_13366758_5\">The statement </p>\n<p id=\"so_13366290_13366758_6\">for ( clause-1 ; expression-2 ; expression-3 ) statement</p>\n<p id=\"so_13366290_13366758_7\">behaves as follows: The\n  expression expression-2 is the controlling expression that is\n  evaluated before each execution of the loop body. The expression\n  expression-3 is evaluated as a void expression after each execution of\n  the loop body. If clause-1 is a declaration, the scope of any\n  identi\ufb01ers it declares is the remainder of the declaration and the\n  entire loop, including the other two expressions; it is reached in the\n  order of execution before the \ufb01rst evaluation of the controlling\n  expression. If clause-1 is an expression, it is evaluated as a void\n  expression before the \ufb01rst evaluation of the controlling expression.</p>\n<p id=\"so_13366290_13366758_8\">Both clause-1 and expression-3 can be omitted. An omitted\n  expression-2 is replaced by a nonzero constant.</p>\n</blockquote>\n<p>The specification allows expression-2, the condition of the loop, to be omitted and is replaced by a nonzero constant. This means that the for loop will continue to execute indefinitely.</p>\n<p>This is useful for allowing a simple syntax for iterating with no end. </p>\n<pre><code>for(int i = 0;;i++) { //do stuff with i }\n</code></pre>\n<p>That's much simpler to write and understand than writing a while(1) loop with a variable declared outside the loop and then incremented inside the loop.</p>\n<p>The for loop specification then goes on to allow you to omit clause-1 so that you can declare or initialize variables elsewhere, and you can omit expression-3 so that you are not required to evaluate any expression upon completion of each loop.</p>\n<p>The for loop is a special case. The while loop and the do loop are strict and require an expression, but the for loop is a flexible iteration statement.</p>\n", "OwnerUserId": "1736092", "PostTypeId": "2", "Id": "13366758", "Score": "7", "CreationDate": "2012-11-13T18:46:17.297", "LastActivityDate": "2012-11-13T18:46:17.297"}, "13366290": {"CommentCount": "11", "ViewCount": "5302", "PostTypeId": "1", "ClosedDate": "2012-11-13T19:47:06.307", "LastEditorUserId": "-1", "CreationDate": "2012-11-13T18:12:20.927", "LastActivityDate": "2012-11-13T19:46:56.670", "LastEditDate": "2017-05-23T12:16:31.537", "FavoriteCount": "1", "Title": "Why can the condition of a for-loop be left empty?", "Id": "13366290", "Score": "4", "Body": "<blockquote>\n<p id=\"so_13366290_13366290_0\"><strong>Possible Duplicate:</strong><br>\n<a href=\"https://stackoverflow.com/questions/13146830/no-loop-condition-in-for-and-while-loop\">No loop condition in for and while loop</a> </br></p>\n</blockquote>\n<p>Why is the condition in a <code>for-loop</code> allowed to be left empty? For example</p>\n<pre><code>for (;;)\n</code></pre>\n<p>compiles fine. Why does this empty expression evaluate to <code>true</code> but the following</p>\n<pre><code>if () {}\nwhile () {}\n</code></pre>\n<p>will both fail? I want to know <strong>if/why</strong> the <code>for-loop</code> is an exception to this case.</p>\n", "Tags": "<c++><c><for-loop>", "OwnerUserId": "282474", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_13366290_13366758_2": {"section_id": 1, "quality": 0.5714285714285714, "length": 4}}, "n3337": {"so_13366290_13366758_2": {"section_id": 1, "quality": 0.5714285714285714, "length": 4}}, "n4659": {"so_13366290_13366758_2": {"section_id": 1, "quality": 0.5714285714285714, "length": 4}}}});