post_cb({"18474684": {"Id": "18474684", "PostTypeId": "2", "Body": "<p>It does look like your preprocessor is making the substitution you want, but you likely wouldn't get the behaviour you want - the preprocessor is normally just a single pass operation.  Example (with clang, but you should be able to reproduce by using the appropriate VS2008 flags):</p>\n<pre><code>$ cat example.c \n#define D #define\nD VALUE\n$ cc -P -E example.c \n\n #define VALUE\n</code></pre>\n<p>That <code>#define VALUE</code> is going straight through to the compiler, which won't know what to do with it - it's a preprocessor directive, after all.  Clang's error, for reference, is similar to yours:</p>\n<pre><code>$ cc -c example.c \nexample.c:2:1: error: expected identifier or '('\nD VALUE\n^\nexample.c:1:11: note: expanded from macro 'D'\n#define D #define\n          ^\n1 error generated.\n</code></pre>\n", "LastEditorUserId": "116908", "LastActivityDate": "2013-08-27T20:26:56.873", "Score": "11", "CreationDate": "2013-08-27T20:20:58.570", "ParentId": "18474622", "CommentCount": "2", "LastEditDate": "2013-08-27T20:26:56.873", "OwnerUserId": "116908"}, "bq_ids": {"n4140": {"so_18474622_18474985_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 492}}, "n3337": {"so_18474622_18474985_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 483}}, "n4659": {"so_18474622_18474985_0": {"length": 4, "quality": 0.6666666666666666, "section_id": 507}}}, "18474830": {"Id": "18474830", "PostTypeId": "2", "Body": "<p>Lines of code in the pre-processors eyes are either pre-processor statements (And thus don't have any replacements done on them) or normal text statements (And have replacements done). You can't have one be both, so once you have 'D' be replaced it's only going to look to see if there are any more macros to replace. Since there are none, it just leaves '#define' in the C++ code as it is and then the C++ compiler will error when it sees it (Since '#define' isn't valid C++ code).</p>\n<p>So show my point more, this is invalid code for the pre-processor:</p>\n<pre><code>#define D define\n#D value\n</code></pre>\n<p>Because the pre-processor doesn't do any macro replacement on pre-processor statements, and \"#D\" isn't a recognized pre-processor command. And this:</p>\n<pre><code>#define D #define\nD value\n</code></pre>\n<p>Results in this C++ code:</p>\n<pre><code>#define value\n</code></pre>\n<p>Which is invalid because the pre-processor is already done being run.</p>\n", "LastActivityDate": "2013-08-27T20:30:10.007", "Score": "1", "CreationDate": "2013-08-27T20:30:10.007", "ParentId": "18474622", "CommentCount": "0", "OwnerUserId": "2270873"}, "18474803": {"Id": "18474803", "PostTypeId": "2", "Body": "<p>C 2011 (N1570) 6.10.3.4 3: \u201cThe resulting completely macro-replaced preprocessing token sequence is not processed as a preprocessing directive even if it resembles one,\u2026\u201d</p>\n<p>C++ 2010 (N3092) 16.3.4 [cpp.rescan] 3 has exactly the same text.</p>\n", "LastEditorUserId": "298225", "LastActivityDate": "2013-08-27T20:46:22.420", "Score": "31", "CreationDate": "2013-08-27T20:28:32.640", "ParentId": "18474622", "CommentCount": "3", "LastEditDate": "2013-08-27T20:46:22.420", "OwnerUserId": "298225"}, "18474817": {"Id": "18474817", "PostTypeId": "2", "Body": "<p>This code is illegal because language specification says it is illegal. According to C and C++ preprocessor specification, whatever code you build using preprocessor will never be interpreted as another preprocessor directive. In short, you cannot build preprocessor directives using preprocessor. Period. </p>\n<p>(Also, you cannot build comments using preprocessor.)</p>\n", "LastActivityDate": "2013-08-27T20:29:25.577", "Score": "10", "CreationDate": "2013-08-27T20:29:25.577", "ParentId": "18474622", "CommentCount": "0", "OwnerUserId": "187690"}, "18474771": {"Id": "18474771", "PostTypeId": "2", "Body": "<p>That won't work because preprocessing is performed in a single pass. For example, consider the next code :</p>\n<pre><code>#define MYDEFINEWEIRD #define\n\nMYDEFINEWEIRD N 6\n\nint main() {\n\n  return 0;\n}\n</code></pre>\n<p>After preprocessing, your code will looks like : </p>\n<pre><code> #define N 6\nint main() {\n\n  return 0;\n}\n</code></pre>\n<p>and \"#define\" is not a valid syntax on C or C++. Also, since the resulting preprocessor directive is not going to be processed, it won't resolve subsequent references to the \"N\" macro in your code.</p>\n<p>Just for fun, you can call the preprocesor twice from the command line using g++/gcc. Consider the next code (define.cpp) :</p>\n<pre><code>#include &lt;iostream&gt;\n\n#define MYDEFINEWEIRD #define\nMYDEFINEWEIRD N 6\n\nusing namespace std;\n\nint main() {\n  cout &lt;&lt; N &lt;&lt; endl;\n  return 0;\n}\n</code></pre>\n<p>Then you can do:</p>\n<pre><code>$ g++ -E define.cpp | g++ -o define -x c++ - &amp;&amp; ./define\n</code></pre>\n<p>and will output:</p>\n<pre><code>6\n</code></pre>\n", "LastEditorUserId": "1294646", "LastActivityDate": "2013-08-28T03:20:09.313", "Score": "6", "CreationDate": "2013-08-27T20:26:02.170", "ParentId": "18474622", "CommentCount": "6", "LastEditDate": "2013-08-28T03:20:09.313", "OwnerUserId": "1294646"}, "18474622": {"ViewCount": "1739", "Body": "<p>I've been looking through <a href=\"http://codegolf.stackexchange.com\">code golf</a> and got an idea to try this code:</p>\n<p><code>#define D #define</code> after adding this line, everything worked fine, however I expanded it into this:</p>\n<pre><code>#define D #define\nD VALUE\n</code></pre>\n<p>And here I got 5 compilation error. If I change <code>D</code> into <code>#define</code> everything is fine, can someone explain, why this code is illegal?</p>\n<p><strong>NOTE:</strong>  I used VS2008 compiler.</p>\n<p><strong>EDIT:</strong>  After some answers I see that I needed to give compilations error list:</p>\n<ol>\n<li>error C2121: '#' : invalid character : possibly the result of a macro expansion</li>\n<li>error C2146: syntax error : missing ';' before identifier 'VALUE'</li>\n<li>error C4430: missing type specifier - int assumed. Note: C++ does not support default-int</li>\n<li>error C2144: syntax error : 'void' should be preceded by ';'</li>\n<li>error C4430: missing type specifier - int assumed. Note: C++ does not support default-int</li>\n</ol>\n<p>First error shows that <code>D</code> is not just <code>define</code> but also includes <code>#</code>.</p>\n", "AcceptedAnswerId": "18474817", "Title": "Is it possible to define another preprocessor directive?", "CreationDate": "2013-08-27T20:16:52.623", "Id": "18474622", "CommentCount": "7", "LastEditDate": "2015-11-30T16:42:43.630", "PostTypeId": "1", "LastEditorUserId": "4370109", "LastActivityDate": "2015-11-30T16:42:43.630", "Score": "19", "OwnerUserId": "1237747", "Tags": "<c++><c><c-preprocessor><preprocessor-directive>", "AnswerCount": "6"}, "18474985": {"Id": "18474985", "PostTypeId": "2", "Body": "<p>Looking at the grammar in 16 [cpp] paragraph 1, a <em>replacement-list</em> consists of <em>pp-tokens</em> which may include the production <em># no-directive</em> which is described in paragraph 2 of the same paragraph as</p>\n<blockquote>\n<p id=\"so_18474622_18474985_0\">A non-directive shall not begin with any of the directive names appearing in the list.</p>\n</blockquote>\n<p>That is, something of the form</p>\n<pre><code>#define NAME # define\n</code></pre>\n<p>happens to be illegal! Also note that the <code>#</code> in this context does <strong>not</strong> turn the next word into a string: the quoting following a <code>#</code> only happens shen the <code>#</code> is immediately followed by a macro parameter name in a function-style macro.</p>\n", "LastActivityDate": "2013-08-27T20:37:16.913", "Score": "1", "CreationDate": "2013-08-27T20:37:16.913", "ParentId": "18474622", "CommentCount": "1", "OwnerUserId": "1120273"}});