post_cb({"39577922": {"CommentCount": "9", "ViewCount": "80", "PostTypeId": "1", "ClosedDate": "2016-09-19T17:08:43.277", "LastEditorUserId": "4781940", "LastActivityDate": "2016-09-19T17:19:29.883", "Body": "<p><em>In the duplicate there is no answer to the points <strong>1</strong> and <strong>4</strong> of my question at least. And they are the most important. I can delete the other points but I ask not to close the whole question.</em></p>\n<p><strong>1.</strong> In code below obj1 is created normally. But if I try to uncomment obj2's and obj3's creations the compilation (-std=c++11, g++ 4.9.2) will fail. Why is it so? I thought that initialization should be performed identically regardless of whether an objct's memory was allocated on stack or on heap. </p>\n<hr>\n<pre><code>struct C\n{\n    int c;\n\n    C() = delete;\n};\n\nint main()\n{   \n    C obj1 { };\n\n    C *obj2 = (C *) malloc(sizeof(C));\n    //new ((void *) obj2) C{ };\n\n    //C* obj3 = new C{ };\n\n    return 0;\n}\n</code></pre>\n<p><strong>2.</strong> I tried to figure out which of the two kinds of behaviour (obj1-case or obj2,obj3-cases) is correct according to standard.\nIn standard it's said (#3242 and #3337, 8.5.4):</p>\n<blockquote>\n<p id=\"so_39577922_39577922_0\">List-initialization of an object or reference of type T is defined as\n  follows:</p>\n<p id=\"so_39577922_39577922_1\">\u2014 If the initializer list has no elements and T is a class\n  type with a default constructor, the object is value-initialized.</p>\n</blockquote>\n<p>Okay. So I go to value-initialization definition (#3242 and #3337, 8.5.0):</p>\n<blockquote>\n<p id=\"so_39577922_39577922_2\">if T is a (possibly cv-qualified) non-union class type without a\n  user-provided constructor, then the object is zero-initialized and, if\n  T\u2019s implicitly-declared default constructor is non-trivial, that\n  constructor is called. </p>\n</blockquote>\n<p>According to (#3242, 12.1)</p>\n<blockquote>\n<p id=\"so_39577922_39577922_3\">A default constructor is trivial if it is neither user-provided nor deleted and if: . . .</p>\n</blockquote>\n<p>and so deleted default constructor is <strong>non-trivial</strong> and, thus, the code <em>C obj1 { };</em> should fail to compile.</p>\n<p>But according to (#3337, 12.1)</p>\n<blockquote>\n<p id=\"so_39577922_39577922_4\">A default constructor is trivial if it is not user-provided and if: . . .</p>\n</blockquote>\n<p>and so deleted default constructor is <strong>trivial</strong> the code <em>C obj1 { };</em> should succeed to compile. </p>\n<p>Where is the truth?</p>\n<p><strong>3.</strong> But there is more. In the next version of standard it's said (#<strong>3367</strong>, 8.5.4):</p>\n<blockquote>\n<p id=\"so_39577922_39577922_5\">List-initialization of an object or reference of type T is defined as\n  follows:</p>\n<p id=\"so_39577922_39577922_6\">\u2014 If T is an aggregate, aggregate initialization is performed </p>\n<p id=\"so_39577922_39577922_7\">\u2014 Otherwise, if the initializer list has no elements and T is a class\n  type with a default constructor, the object is value-initialized.</p>\n</blockquote>\n<p>As I understand <strong><em>C</em></strong> is an aggregate. But here I have a problem: I failed to find info how an aggregate with a deleted defult constructor is created. There is no such info in <em>8.5.1 Aggregates</em>. But according to this</p>\n<blockquote>\n<p id=\"so_39577922_39577922_8\">When an aggregate is initialized by an initializer list, as specified\n  in 8.5.4, the elements of the initializer list are taken as\n  initializers for the members of the aggregate, in increasing subscript\n  or member order. Each member is copy-initialized from the\n  corresponding initializer-clause . . .  (#3367, 8.5.1)</p>\n</blockquote>\n<p>I can suppose that constructors [compiler-generated in aggregates' case] are just ignored during aggregate-initialization. So I can suppose that the deleted default constructor is also simply ignored and so <em>C obj { };</em> should be compiled successfully though for me it's weird to create an object with <strong>deleted</strong> default constructor. Still if I understand right, according to this version of standard obj1-case is okay and it's wrong that obj2,obj3-cases fail to compile. Am I right?</p>\n<p><strong>4.</strong> And the logical question is, anyway, which standard version #3242/#3337 or #3367 should I rely on? Version #3367 was made in 2012, so later than 2011, and I don't know if it can be called c++11. Which version is considered real c++11-standard? I compiled the code example above using g++ 4.9.2. What standard variant does the compiler use, how can I know? Because versions #3337 or #3367 differ much. </p>\n<p>For example, in #3367 the definition of value-initialization was changed dramatically:</p>\n<blockquote>\n<p id=\"so_39577922_39577922_9\">To value-initialize an object of type T means:</p>\n<p id=\"so_39577922_39577922_10\">\u2014  if T is a (possibly cv-qualified) class type (Clause 9) with either no default constructor (12.1) or a default constructor that is user-provided or deleted, then the object is default-initialized;</p>\n</blockquote>\n<p><strong>5.</strong> And the new value-initialization definition is strange, in my opinion, as I can't think up any case when we could create and value-initialize an object with <strong>deleted</strong> default constructor. I mean, for example, if I make <em>int c</em> member of C-class private  and, thus, C-class stops being an aggregate the expression </p>\n<pre><code>C obj1 { };\n</code></pre>\n<p>will be value-initialization (not aggregate-initialization as it was before) [#3367, 8.5.4 \"List-initialization\"] and will definitely fail to compile. \nCould you explain the moment about deleted constructors in the new value-initialization definition?</p>\n<p>I understand that there is much text here. If you answered some I would be so so so grateful. </p>\n</hr>", "LastEditDate": "2016-09-19T17:19:29.883", "FavoriteCount": "0", "Title": "Initialization of class with deleted default constructor in different c++11 standard versions", "Id": "39577922", "Score": "2", "CreationDate": "2016-09-19T16:33:27.490", "Tags": "<c++><c++11><standards><value-initialization><deleted-functions>", "OwnerUserId": "4781940", "AnswerCount": "0"}, "bq_ids": {"n4140": {"so_39577922_39577922_6": {"section_id": 3325, "quality": 1.0, "length": 4}, "so_39577922_39577922_10": {"section_id": 3287, "quality": 0.9375, "length": 15}, "so_39577922_39577922_3": {"section_id": 369, "quality": 0.5714285714285714, "length": 4}, "so_39577922_39577922_0": {"section_id": 3325, "quality": 1.0, "length": 6}, "so_39577922_39577922_9": {"section_id": 3287, "quality": 1.0, "length": 4}, "so_39577922_39577922_4": {"section_id": 369, "quality": 1.0, "length": 4}, "so_39577922_39577922_8": {"section_id": 3299, "quality": 0.88, "length": 22}, "so_39577922_39577922_2": {"section_id": 3287, "quality": 0.75, "length": 12}, "so_39577922_39577922_7": {"section_id": 3325, "quality": 1.0, "length": 10}, "so_39577922_39577922_1": {"section_id": 3325, "quality": 1.0, "length": 9}, "so_39577922_39577922_5": {"section_id": 3325, "quality": 1.0, "length": 6}}, "n3337": {"so_39577922_39577922_6": {"section_id": 3195, "quality": 1.0, "length": 4}, "so_39577922_39577922_4": {"section_id": 359, "quality": 1.0, "length": 4}, "so_39577922_39577922_5": {"section_id": 3195, "quality": 1.0, "length": 6}, "so_39577922_39577922_3": {"section_id": 359, "quality": 0.5714285714285714, "length": 4}, "so_39577922_39577922_0": {"section_id": 3195, "quality": 1.0, "length": 6}, "so_39577922_39577922_9": {"section_id": 3157, "quality": 1.0, "length": 4}, "so_39577922_39577922_8": {"section_id": 3169, "quality": 0.88, "length": 22}, "so_39577922_39577922_2": {"section_id": 3157, "quality": 1.0, "length": 16}, "so_39577922_39577922_7": {"section_id": 3195, "quality": 0.9, "length": 9}, "so_39577922_39577922_1": {"section_id": 3195, "quality": 1.0, "length": 9}, "so_39577922_39577922_10": {"section_id": 3157, "quality": 0.6875, "length": 11}}, "n4659": {"so_39577922_39577922_10": {"section_id": 4049, "quality": 0.9375, "length": 15}, "so_39577922_39577922_6": {"section_id": 4091, "quality": 1.0, "length": 4}, "so_39577922_39577922_3": {"section_id": 470, "quality": 0.5714285714285714, "length": 4}, "so_39577922_39577922_0": {"section_id": 4091, "quality": 1.0, "length": 6}, "so_39577922_39577922_8": {"section_id": 4065, "quality": 0.68, "length": 17}, "so_39577922_39577922_2": {"section_id": 4049, "quality": 0.6875, "length": 11}, "so_39577922_39577922_7": {"section_id": 4091, "quality": 1.0, "length": 10}, "so_39577922_39577922_1": {"section_id": 4091, "quality": 1.0, "length": 9}, "so_39577922_39577922_5": {"section_id": 4091, "quality": 1.0, "length": 6}}}});