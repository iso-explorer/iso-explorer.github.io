post_cb({"bq_ids": {"n4140": {"so_3802454_3806373_0": {"length": 6, "quality": 0.6666666666666666, "section_id": 6089}, "so_3802454_3806373_1": {"length": 36, "quality": 0.972972972972973, "section_id": 6090}, "so_3802454_3802454_0": {"length": 5, "quality": 0.7142857142857143, "section_id": 6290}}, "n3337": {"so_3802454_3806373_0": {"length": 7, "quality": 0.7777777777777778, "section_id": 5857}, "so_3802454_3806373_1": {"length": 36, "quality": 0.972972972972973, "section_id": 5858}, "so_3802454_3802454_0": {"length": 5, "quality": 0.7142857142857143, "section_id": 6050}}, "n4659": {"so_3802454_3806373_0": {"length": 6, "quality": 0.6666666666666666, "section_id": 7585}, "so_3802454_3806373_1": {"length": 36, "quality": 0.972972972972973, "section_id": 7586}, "so_3802454_3802454_0": {"length": 5, "quality": 0.7142857142857143, "section_id": 7797}}}, "3802454": {"ViewCount": "480", "Body": "<p><a href=\"http://en.wikipedia.org/wiki/C%2B%2B0x#Explicitly-defaulted_and_deleted_special_member_functions\" rel=\"noreferrer\">Wikipedia</a> states:</p>\n<blockquote>\n<p id=\"so_3802454_3802454_0\">A type can be made impossible to allocate with operator new:</p>\n<pre><code>struct NonNewable {\n    void *operator new(std::size_t) = delete;\n};\n</code></pre>\n<p id=\"so_3802454_3802454_1\">An object of this type can only ever be allocated as a stack object or as a member of another type. It cannot be directly heap-allocated without non-portable trickery. (Since placement new is the only way to call a constructor on user-allocated memory and this use has been forbidden as above, the object cannot be properly constructed.)</p>\n</blockquote>\n<p>Deleting operator new is similar to making it private in current C++, but isn't explicitly using global operator new, which avoids class-specific lookup, still valid C++0x?</p>\n<pre><code>NonNewable *p = ::new NonNewable();\n// neither non-portable nor trickery, though perhaps not widely known\n</code></pre>\n<p>Have I missed something in the draft?</p>\n<hr>\n<p>To be clear, this is valid C++03 and <a href=\"http://codepad.org/98y624e3\" rel=\"noreferrer\">works fine</a>:</p>\n<pre><code>struct NonNewable {\nprivate:\n  void *operator new(std::size_t);  // not defined\n};\n\nint main() {\n  // ignore the leaks, it's just an example\n\n  void *mem = operator new(sizeof(NonNewable));\n  NonNewable *p = ::new(mem) NonNewable();\n\n  p = ::new NonNewable();\n\n  return 0;\n}\n</code></pre>\n</hr>", "AcceptedAnswerId": "3806373", "Title": "Can C++0x still explicitly allocate with global operator new?", "CreationDate": "2010-09-27T09:21:22.040", "Id": "3802454", "CommentCount": "1", "FavoriteCount": "5", "PostTypeId": "1", "LastEditDate": "2010-10-01T10:52:12.547", "LastEditorDisplayName": "Roger Pate", "OwnerDisplayName": "Roger Pate", "LastActivityDate": "2010-10-02T19:33:19.253", "Score": "17", "Tags": "<c++><c++11><new-operator>", "AnswerCount": "1"}, "3806373": {"Id": "3806373", "PostTypeId": "2", "Body": "<p>I believe you are right and wikipedia is wrong.  The C++0x draft standard describes \"deleted functions\" (8.4p10) as functions which may not be used in any way (or else the program is ill-formed).  They play no part in scope or name lookup different from normal functions.  And the relevant paragraphs concerning new expressions have remained the same:</p>\n<blockquote>\n<p id=\"so_3802454_3806373_0\">[5.3.4p8]  A new-expression obtains storage for the object by calling an allocation function (3.7.4.1). ...</p>\n<p id=\"so_3802454_3806373_1\">[5.3.4p9] If the new-expression begins with a unary :: operator, the allocation function's name is looked up in the global scope.  Otherwise, if the allocated type is a class type T or array thereof, the allocation function's name is looked up in the scope of T.  If this lookup fails to find the name, or if the allocated type is not a class type, the allocation function's name is looked up in the global scope.</p>\n</blockquote>\n<p>So yes, the expression <code>::new NonNewable</code> [or <code>::new(mem) NonNewable</code>] would choose an overload of <code>::operator new</code>, ignoring the function <code>NonNewable::operator new</code>, and would not make the program ill-formed.</p>\n", "LastEditorUserId": "3848", "LastActivityDate": "2010-10-02T19:33:19.253", "Score": "6", "CreationDate": "2010-09-27T17:41:46.583", "ParentId": "3802454", "CommentCount": "0", "OwnerUserId": "459640", "LastEditDate": "2010-10-02T19:33:19.253"}});