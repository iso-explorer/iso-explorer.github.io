post_cb({"45557120": {"ParentId": "45557092", "CommentCount": "2", "Body": "<p>The structure is allocated on the stack, in one contigous block of memory (probably 64 bits in this case).  It is allocated when the function is called (unless your compiler does something tricky).</p>\n<p>All instance variables are allocated on the stack (although it's not specified how they're allocated in the standard, this is how all compilers do it).  The reason is, when you call a function recursively, it will get a new stack frame for more variables.  That way, if you have a variable \"me\" on the stack, and you call main() from within main(), you end up with a second \"me\" variable in the second stack frame.  When the second \"main()\" returns, the stack frame is released for other future calls.</p>\n", "OwnerUserId": "1361342", "PostTypeId": "2", "Id": "45557120", "Score": "2", "CreationDate": "2017-08-07T23:33:41.313", "LastActivityDate": "2017-08-07T23:33:41.313"}, "45557092": {"CommentCount": "3", "ViewCount": "111", "CreationDate": "2017-08-07T23:29:08.847", "LastActivityDate": "2017-08-07T23:45:22.857", "Title": "Structure memory allocation in c++", "AcceptedAnswerId": "45557211", "PostTypeId": "1", "Id": "45557092", "Score": "0", "Body": "<p>As we know that memory of structure is allocated when its variable is defined(or when creating an instance).</p>\n<p>Now</p>\n<pre><code>struct Programmer {\nint skills;\nint problemSolved;\n};\n\nint main(){\nProgrammer me;//Here the memory will be allocated but in what \n              //format(discrete or continuous block of memory)?\nme.skills = 10;\nme.problemSolved = 2000;\nreturn 0;\n}\n</code></pre>\n<p><strong>Is the memory allocated to structure instance or variable is in continuous blocks(as in array) or in discrete block of memory ? If yes then Why?</strong></p>\n", "Tags": "<c++><c><memory><structure><instance>", "OwnerUserId": "6102255", "AnswerCount": "2"}, "45557211": {"ParentId": "45557092", "CommentCount": "1", "Body": "<p>The memory allocated for a <code>struct</code> is contiguous. From <a href=\"http://port70.net/~nsz/c/c11/n1570.html#6.2.5p20\" rel=\"nofollow noreferrer\">\u00a76.2.5 \u00b620</a> of the C11 Draft Standard:</p>\n<blockquote>\n<p id=\"so_45557092_45557211_0\">A structure type describes a sequentially allocated nonempty set of\n  member objects....</p>\n</blockquote>\n<p>But, there may be padding within the storage allocated for a <code>struct</code>, according to <a href=\"http://port70.net/~nsz/c/c11/n1570.html#6.7.2.1p15\" rel=\"nofollow noreferrer\">\u00a76.7.2.1 \u00b615</a>:</p>\n<blockquote>\n<p id=\"so_45557092_45557211_1\">There may be unnamed padding within a structure object, but not at its\n  beginning.</p>\n</blockquote>\n<p>And, from <a href=\"http://port70.net/~nsz/c/c11/n1570.html#6.7.2.1p17\" rel=\"nofollow noreferrer\">6.7.2.1 \u00b617</a>:</p>\n<blockquote>\n<p id=\"so_45557092_45557211_2\">There may be unnamed padding at the end of a structure or union.</p>\n</blockquote>\n", "OwnerUserId": "6879826", "PostTypeId": "2", "Id": "45557211", "Score": "2", "CreationDate": "2017-08-07T23:45:22.857", "LastActivityDate": "2017-08-07T23:45:22.857"}, "bq_ids": {"n4140": {"so_45557092_45557211_1": {"section_id": 5879, "quality": 0.8, "length": 8}}, "n3337": {"so_45557092_45557211_1": {"section_id": 5650, "quality": 0.8, "length": 8}}, "n4659": {"so_45557092_45557211_1": {"section_id": 7363, "quality": 0.8, "length": 8}}}});