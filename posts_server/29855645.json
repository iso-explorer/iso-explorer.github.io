post_cb({"29855645": {"CommentCount": "6", "ViewCount": "105", "PostTypeId": "1", "LastEditorUserId": "4470935", "CreationDate": "2015-04-24T19:12:49.137", "LastActivityDate": "2015-04-24T19:21:43.583", "Title": "Trying to understand [class.qual]/2 in the C++14 Standard", "LastEditDate": "2015-04-24T19:21:43.583", "Id": "29855645", "Score": "1", "Body": "<p><strong>[class.qual]/2</strong>:</p>\n<blockquote>\n<p id=\"so_29855645_29855645_0\">In a lookup in which function names are not ignored<sup>33</sup> and\n  the <em>nested-name-specifier</em> nominates a class C:</p>\n<ol>\n<li>if the name specified after the <em>nested-name-specifier</em>, when looked up in C, is the <em>injected-class-name</em> of C (Clause 9), or</li>\n<li>in a <em>using-declaration</em> (7.3.3) that is a <em>member-declaration</em>, if the name specified after the <em>nested-namespecifier</em> is the same as\n  the <em>identifier</em> or the <em>simple-template-id</em>\u2019s <em>template-name</em> in the\n  last component of the <em>nested-name-specifier</em>,</li>\n</ol>\n<p id=\"so_29855645_29855645_1\">the name is instead considered to name the constructor of class C. [\n  Note: For example, the constructor is not an acceptable lookup result\n  in an <em>elaborated-type-specifier</em> so the constructor would not be used\n  in place of the <em>injected-class-name</em>. \u2014end note ] Such a constructor\n  name shall be used only in the <em>declarator-id</em> of a declaration that\n  names a constructor or in a <em>using-declaration</em>.  </p>\n<p id=\"so_29855645_29855645_2\"><sup>(33)</sup> Lookups in which function names are ignored include\n  names appearing in a <em>nested-name-specifier</em>, an\n  <em>elaborated-type-specifier</em>, or a <em>base-specifier</em>.</p>\n</blockquote>\n<p>If we consider the example below  </p>\n<pre><code>struct A { A(); };\nstruct B: public A { B(); };\nA::A() { }\n</code></pre>\n<p>is it correct to say that:  </p>\n<ul>\n<li>the lookup for the first <code>A</code> in <code>A::A() {}</code> <strong>ignores</strong> function names because <code>A</code> belongs to a <em>nested-name-specifier</em>?</li>\n<li>the lookup for the second <code>A</code> in <code>A::A() {}</code> <strong>doesn't ignore</strong> function names because <code>A</code> doesn't belong to a nested-name-specifier, nor to an elaborated-type-specifier, nor to a base-specifier?</li>\n</ul>\n", "Tags": "<c++><language-lawyer><c++14>", "OwnerUserId": "4470935", "AnswerCount": "0"}, "bq_ids": {"n4140": {"so_29855645_29855645_0": {"section_id": 7114, "quality": 0.8571428571428571, "length": 6}, "so_29855645_29855645_2": {"section_id": 7114, "quality": 0.9, "length": 9}, "so_29855645_29855645_1": {"section_id": 7114, "quality": 0.8518518518518519, "length": 23}}, "n3337": {"so_29855645_29855645_0": {"section_id": 5662, "quality": 0.5714285714285714, "length": 4}, "so_29855645_29855645_1": {"section_id": 6858, "quality": 0.8518518518518519, "length": 23}}, "n4659": {"so_29855645_29855645_0": {"section_id": 8615, "quality": 0.8571428571428571, "length": 6}, "so_29855645_29855645_2": {"section_id": 8615, "quality": 0.9, "length": 9}, "so_29855645_29855645_1": {"section_id": 8615, "quality": 0.8518518518518519, "length": 23}}}});