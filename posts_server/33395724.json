post_cb({"33396182": {"ParentId": "33395724", "PostTypeId": "2", "CommentCount": "0", "Body": "<p><a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1438\" rel=\"noreferrer\">CWG #1438</a> changed the semantics concerning invalid pointer values:</p>\n<blockquote>\n<p id=\"so_33395724_33396182_0\">The current Standard says that any use of an invalid pointer value\n  produces undefined behavior (3.7.4.2 [basic.stc.dynamic.deallocation]\n  paragraph 4). This includes not only dereferencing the pointer but\n  even just fetching its value. The reason for this draconian\n  restriction is that some architectures in the past used dedicated\n  address registers for pointer loads and stores and they could fault\n  if, for example, a segment number in a pointer was not currently\n  mapped. <br><br>It is not clear whether such restrictions are necessary with\n  architectures currently in use or reasonably foreseen. This should be\n  investigated to see if the restriction can be loosened to apply only\n  to dereferencing the pointer.</br></br></p>\n</blockquote>\n<p>The change in [conv.lval] is the resolution of <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#616\" rel=\"noreferrer\">CWG #616</a>, which essentially adopted the above.<br>\nLifting this from UB to implementation-defined behavior was intentional, so I presume the absence of this paragraph in the Index is an oversight. </br></p>\n", "OwnerUserId": "3647361", "LastEditorUserId": "3647361", "LastEditDate": "2015-10-28T16:19:49.837", "Id": "33396182", "Score": "9", "CreationDate": "2015-10-28T16:14:19.950", "LastActivityDate": "2015-10-28T16:19:49.837"}, "33395724": {"CommentCount": "5", "AcceptedAnswerId": "33396182", "PostTypeId": "1", "LastEditorUserId": "560648", "CreationDate": "2015-10-28T15:54:06.313", "LastActivityDate": "2015-10-28T16:20:43.077", "LastEditDate": "2015-10-28T16:20:43.077", "ViewCount": "183", "FavoriteCount": "1", "Title": "Documentation of \"invalid pointer value\" conversion in C++ implementations", "Id": "33395724", "Score": "13", "Body": "<p>According to the C++ Standard, it is mandatory for every implementation to document \"implementation-defined behavior\":</p>\n<blockquote>\n<p id=\"so_33395724_33395724_0\">1.3.11 <code>[defns.impl.defined]</code> <strong>implementation-defined behavior</strong></p>\n<p id=\"so_33395724_33395724_1\">behavior, for a well-formed program construct and correct data, that depends on the implementation and that each implementation documents</p>\n</blockquote>\n<p>And reading an invalid pointer value has implementation-defined behavior (see 4.1 Lvalue-to-rvalue conversion <code>[conv.lval]</code>):</p>\n<blockquote>\n<p id=\"so_33395724_33395724_2\">if the object to which the glvalue refers contains an invalid pointer value (3.7.4.2, 3.7.4.3), the behavior is implementation-defined.</p>\n</blockquote>\n<p>(quote from draft n4527, but verbiage that \"Indirection through an invalid pointer value and passing an invalid pointer value to a deallocation function have undefined behavior. Any other use of an invalid pointer value has implementation-defined behavior.\" has been in 3.7.4.2 Deallocation functions <code>[basic.stc.dynamic.deallocation]</code> since at least draft n3485)</p>\n<p>However, many popular implementations do not define this behavior, and many experts describe this as \"undefined behavior\" instead.</p>\n<p>A likely cause for omission of clear documentation is that, as far as I can determine, evaluation of \"invalid pointer values\" is missing from the \"Index of implementation-defined behavior\" which appears in Standard drafts following the appendices.</p>\n<p>Is this a defect in the Standard, and are there any open Defect Reports or committee actions taken since C++14 concerning it?</p>\n", "Tags": "<c++><pointers><language-lawyer>", "OwnerUserId": "103167", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_33395724_33395724_1": {"section_id": 5768, "quality": 1.0, "length": 10}, "so_33395724_33395724_2": {"section_id": 9, "quality": 0.8181818181818182, "length": 9}}, "n3337": {"so_33395724_33395724_1": {"section_id": 5541, "quality": 1.0, "length": 10}, "so_33395724_33395724_2": {"section_id": 5541, "quality": 0.5454545454545454, "length": 6}}, "n4659": {"so_33395724_33395724_1": {"section_id": 7225, "quality": 1.0, "length": 10}, "so_33395724_33395724_2": {"section_id": 10, "quality": 0.7272727272727273, "length": 8}}}});