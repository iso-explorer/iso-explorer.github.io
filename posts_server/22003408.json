post_cb({"bq_ids": {"n4140": {"so_22003408_22003408_0": {"length": 4, "quality": 0.6666666666666666, "section_id": 5881}}, "n3337": {"so_22003408_22003408_0": {"length": 4, "quality": 0.6666666666666666, "section_id": 5652}}, "n4659": {"so_22003408_22003408_0": {"length": 4, "quality": 0.6666666666666666, "section_id": 7364}}}, "22004002": {"Id": "22004002", "PostTypeId": "2", "Body": "<p><a href=\"http://msdn.microsoft.com/en-us/library/vstudio/hh567368.aspx\" rel=\"nofollow\">VC++ 2013</a> doesn't support constexpr. And from what I can tell <a href=\"http://msdn.microsoft.com/en-us/library/s086ab1z.aspx\" rel=\"nofollow\">they implement <code>max</code> and <code>min</code></a> as non-const <code>static</code> functions. You can't use them where constant expressions are required, i.e.:</p>\n<pre><code>#include &lt;limits&gt;\n#include &lt;array&gt;\n\nint main()\n{\n    std::array&lt;int, std::numeric_limits&lt;int&gt;::max()&gt; a;\n}\n\nerror C2975: '_Size' : invalid template argument for 'std::array', expected compile-time constant expression\n</code></pre>\n<p>As a workaround, I've tried to copy libstdc++'s implementation of <code>numeric_limits</code>, something like the following:</p>\n<pre><code>struct wrapper_base\n{\n  // member variables\n};\n\ntemplate &lt;typename T&gt;\nstruct wrapper : public wrapper_base\n{\n    static const T max()\n    {\n        return T();\n    }\n\n    static const T min()\n    {\n        return T();\n    }\n};\n\ntemplate &lt;&gt;\n    struct wrapper&lt;int&gt;\n{\n    static const int max()\n    {\n        return INT_MAX;\n    }\n\n    static const int min()\n    {\n        return INT_MIN;\n    }\n};\n</code></pre>\n<p>Unfortunately, this gives the same function template redefinition error. You can use <code>INT_MAX</code> and <code>INT_MIN</code> directly, but that would require specializing for 16 types (in libstdc++'s case.) It's better to probably avoid this approach altogether and follow <a href=\"https://stackoverflow.com/questions/22003408/c-11-stdenable-if-overloading-in-visual-c-2013/22004002#comment33350760_22003408\">Praetorian's</a> advice.</p>\n", "LastEditorDisplayName": "user1508519", "OwnerDisplayName": "user1508519", "LastActivityDate": "2014-02-25T10:10:20.490", "Score": "2", "CreationDate": "2014-02-25T03:30:41.277", "ParentId": "22003408", "CommentCount": "0", "LastEditDate": "2014-02-25T10:10:20.490"}, "22003408": {"ViewCount": "838", "Body": "<p>The following code snippet was taken from <a href=\"https://github.com/facebook/folly/blob/master/folly/Traits.h\" rel=\"nofollow\">folly</a>, checking whether one integer  is greater than the other in compile time.</p>\n<pre><code>#include &lt;limits&gt;\n#include &lt;type_traits&gt;\n\ntemplate &lt;typename RHS, RHS rhs, typename LHS&gt;\nbool greater_than_impl(\n  typename std::enable_if&lt;\n    (rhs &lt;= std::numeric_limits&lt;LHS&gt;::max()\n      &amp;&amp; rhs &gt;= std::numeric_limits&lt;LHS&gt;::min()),\n    LHS\n  &gt;::type const lhs\n) {\n  return lhs &gt; rhs;\n}\n\ntemplate &lt;typename RHS, RHS rhs, typename LHS&gt;\nbool greater_than_impl(\n  typename std::enable_if&lt;\n    (rhs &gt; std::numeric_limits&lt;LHS&gt;::max()),\n    LHS\n  &gt;::type const\n) {\n  return false;\n}\n\ntemplate &lt;typename RHS, RHS rhs, typename LHS&gt;\nbool greater_than_impl(\n  typename std::enable_if&lt;\n    (rhs &lt; std::numeric_limits&lt;LHS&gt;::min()),\n    LHS\n  &gt;::type const\n) {\n  return true;\n}\n\ntemplate &lt;typename RHS, RHS rhs, typename LHS&gt;\nbool greater_than(LHS const lhs) {\n  return greater_than_impl&lt;\n    RHS, rhs, typename std::remove_reference&lt;LHS&gt;::type\n  &gt;(lhs);\n}\n\nint test()\n{\n    auto v = greater_than&lt;int, 0, int&gt;(0);\n    std::cout &lt;&lt; v &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>\n<p>GCC 4.8.2 show me the expected compiling result, but Visual C++ 2013 gives me an error at the second template function <code>greater_than_impl</code>:</p>\n<blockquote>\n<p id=\"so_22003408_22003408_0\">C2995: function template has already been defined</p>\n</blockquote>\n<p>seems that std::enable_if overloading was not recognized, is Visual C++ 2013 lack of any SFINAE feature?</p>\n", "Title": "C++ 11 std::enable_if overloading in Visual C++ 2013", "CreationDate": "2014-02-25T02:27:17.377", "LastActivityDate": "2014-02-25T10:10:20.490", "CommentCount": "3", "LastEditDate": "2014-02-25T02:43:49.983", "PostTypeId": "1", "LastEditorUserId": "1065072", "Id": "22003408", "Score": "3", "OwnerUserId": "1065072", "Tags": "<c++><c++11><sfinae>", "AnswerCount": "1"}});