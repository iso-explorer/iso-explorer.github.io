post_cb({"34017257": {"ViewCount": "298", "Body": "<p>Why does the following code result in an infinite loop?</p>\n<pre><code>#include &lt;boost/regex.hpp&gt;\n\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nint main()\n{\n  const std::string formula = \"LAST_BID_EURUSD$ LAST_ASK_USDJPY$\";\n\n  boost::smatch matches;\n  boost::regex expr(\"(LAST_(?:BID|ASK)_.+?\\\\$)\");\n  while (boost::regex_search(formula, matches, expr))\n  {\n    std::cout &lt;&lt; std::string(matches[1].first, matches[1].second) &lt;&lt; std::endl;\n  }\n}\n</code></pre>\n<p>If I pass iterators to <code>begin</code> and <code>end</code> of <code>formula</code> instead of the <code>formula</code> itself and update the <code>start</code> one accordingly, all works as expected:</p>\n<pre><code>#include &lt;boost/regex.hpp&gt;\n\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nint main()\n{\n  const std::string formula = \"LAST_BID_EURUSD$ LAST_ASK_USDJPY$\";\n\n  auto start = formula.begin();\n  auto end = formula.end();\n\n  boost::smatch matches;\n  boost::regex expr(\"(LAST_(?:BID|ASK)_.+?\\\\$)\");\n  while (boost::regex_search(start, end, matches, expr))\n  {\n    std::cout &lt;&lt; std::string(matches[1].first, matches[1].second) &lt;&lt; std::endl;\n    start = matches[0].second;\n  }\n}\n</code></pre>\n<p><strong>Output</strong></p>\n<pre><code>LAST_BID_EURUSD$\nLAST_ASK_USDJPY$\n</code></pre>\n<p>The same goes for C++11 regex.</p>\n<p>How is it supposed to be used with <code>std::string</code> objects?</p>\n", "Title": "Infinite loop when using regex_search with std::string", "CreationDate": "2015-12-01T09:47:15.097", "LastActivityDate": "2015-12-01T14:59:17.793", "CommentCount": "3", "PostTypeId": "1", "Id": "34017257", "Score": "0", "OwnerUserId": "1608835", "Tags": "<c++><regex><c++11><boost><boost-regex>", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_34017257_34017446_0": {"length": 5, "quality": 0.625, "section_id": 5241}, "so_34017257_34017446_2": {"length": 4, "quality": 0.5714285714285714, "section_id": 5058}}, "n3337": {"so_34017257_34017446_0": {"length": 5, "quality": 0.625, "section_id": 5038}, "so_34017257_34017446_2": {"length": 4, "quality": 0.5714285714285714, "section_id": 4855}}, "n4659": {"so_34017257_34017446_0": {"length": 5, "quality": 0.625, "section_id": 6664}, "so_34017257_34017446_2": {"length": 4, "quality": 0.5714285714285714, "section_id": 6479}}}, "34021774": {"Id": "34021774", "PostTypeId": "2", "Body": "<p>In the first snippet, you're making the same call over and over again.</p>\n<pre><code>boost::regex_search(formula, matches, expr)\n</code></pre>\n<p>It's really not surprising that this call gives the same results (i.e, succeeds) each time you call it.</p>\n<p>In the second snippet, you are updating the <code>start</code> iterator each time through the loop, so the \"string\" that you're searching keeps getting smaller, until, eventually, the search fails, and the loop terminates.</p>\n<pre><code>boost::regex_search(start, end, matches, expr)\n</code></pre>\n", "LastEditorUserId": "992490", "LastActivityDate": "2015-12-01T14:59:17.793", "Score": "2", "CreationDate": "2015-12-01T13:35:56.073", "ParentId": "34017257", "CommentCount": "0", "LastEditDate": "2015-12-01T14:59:17.793", "OwnerUserId": "992490"}, "34017446": {"Id": "34017446", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_34017257_34017446_0\"><strong>Requires:</strong> Type BidirectionalIterator meets the requirements of a Bidirectional Iterator (24.1.4).</p>\n</blockquote>\n<p>This is the line written in <code>boost</code> documentation page. You need to provide <code>Iterators</code> not the object itself.</p>\n<p><a href=\"http://www.boost.org/doc/libs/1_59_0/libs/regex/doc/html/boost_regex/ref/regex_search.html\" rel=\"nofollow\"><strong>Boost Documentation</strong></a></p>\n<p>In c++11 documentation</p>\n<blockquote>\n<p id=\"so_34017257_34017446_1\"><strong>Parameters</strong></p>\n<p id=\"so_34017257_34017446_2\">first, last   -   a range identifying the target character sequence</p>\n</blockquote>\n<p>Means it needs <code>iterators</code> to define the range.</p>\n<p><a href=\"http://en.cppreference.com/w/cpp/regex/regex_search\" rel=\"nofollow\"><strong>C++11 Documentation Page</strong></a></p>\n<p><strong>For your convenience, here is snippet given in the documentation page</strong></p>\n<pre><code>#include &lt;string&gt;\n#include &lt;map&gt;\n#include &lt;boost/regex.hpp&gt;\n\n// purpose: \n// takes the contents of a file in the form of a string \n// and searches for all the C++ class definitions, storing \n// their locations in a map of strings/int's \ntypedef std::map&lt;std::string, int, std::less&lt;std::string&gt; &gt; map_type;\n\nboost::regex expression(\n   \"^(template[[:space:]]*&lt;[^;:{]+&gt;[[:space:]]*)?\"\n   \"(class|struct)[[:space:]]*\"\n   \"(\\\\&lt;\\\\w+\\\\&gt;([[:blank:]]*\\\\([^)]*\\\\))?\"\n   \"[[:space:]]*)*(\\\\&lt;\\\\w*\\\\&gt;)[[:space:]]*\"\n   \"(&lt;[^;:{]+&gt;[[:space:]]*)?(\\\\{|:[^;\\\\{()]*\\\\{)\");\n\nvoid IndexClasses(map_type&amp; m, const std::string&amp; file)\n{\n   std::string::const_iterator start, end;\n   start = file.begin();\n   end = file.end();\n      boost::match_results&lt;std::string::const_iterator&gt; what;\n   boost::match_flag_type flags = boost::match_default;\n   while(regex_search(start, end, what, expression, flags))\n   {\n      // what[0] contains the whole string \n      // what[5] contains the class name. \n      // what[6] contains the template specialisation if any. \n      // add class name and position to map: \n      m[std::string(what[5].first, what[5].second)\n            + std::string(what[6].first, what[6].second)]\n         = what[5].first - file.begin();\n      // update search position: \n      start = what[0].second;\n      // update flags: \n      flags |= boost::match_prev_avail;\n      flags |= boost::match_not_bob;\n   }\n}\n</code></pre>\n<p>Look at 2nd and 3rd line of the <code>IndexClasses</code> function</p>\n<p>Because you are not providing any <code>Iterators</code>, I think, you are running into some kind of infinite loop. </p>\n", "LastEditorUserId": "4037927", "LastActivityDate": "2015-12-01T10:08:43.430", "Score": "-1", "CreationDate": "2015-12-01T09:56:03.277", "ParentId": "34017257", "CommentCount": "1", "LastEditDate": "2015-12-01T10:08:43.430", "OwnerUserId": "4037927"}});