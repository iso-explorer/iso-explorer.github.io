post_cb({"8415207": {"ParentId": "8415016", "CommentCount": "3", "Body": "<p>25.3.8 in the N3290 speaks about remove function : </p>\n<blockquote>\n<p id=\"so_8415016_8415207_0\">Requires: The type of *first shall satisfy the MoveAssignable\n  requirements (Table 22).</p>\n</blockquote>\n<p>and</p>\n<blockquote>\n<p id=\"so_8415016_8415207_1\">Note: each element in the range [ret,last), where ret is the returned\n  value, has a valid but unspeci\ufb01ed state, because the algorithms can\n  eliminate elements by swapping with or moving from elements that were\n  originally in that range.</p>\n</blockquote>\n<p>This means that it depends on your predicate operator. Since your predicate doesn't create a copy, then the elements are not going to be copied.</p>\n", "OwnerUserId": "476681", "PostTypeId": "2", "Id": "8415207", "Score": "2", "CreationDate": "2011-12-07T12:18:06.373", "LastActivityDate": "2011-12-07T12:18:06.373"}, "8415016": {"CommentCount": "10", "AcceptedAnswerId": "8415207", "CreationDate": "2011-12-07T12:04:07.270", "LastActivityDate": "2011-12-07T12:18:06.373", "PostTypeId": "1", "ViewCount": "1553", "FavoriteCount": "2", "Title": "Can you use `std::remove_if` on a container of `std::unique_ptr`?", "Id": "8415016", "Score": "10", "Body": "<p>Given an <code>std::vector&lt;std::unique_ptr&lt;SomeType&gt; &gt;</code>, is it legal to use\n<code>remove_if</code> on it?  In other words, given this code:</p>\n<pre><code>std::vector&lt;std::unique_ptr&lt;SomeType&gt; &gt; v;\n//  fill v, all entries point to a valid instance of SomeType...\nv.erase( std::remove_if( v.begin(), v.end(), someCondition ), v.end() );\n</code></pre>\n<p>, am I guaranteed after the erase that all pointers still in <code>v</code> are\nvalid.  I know that given the intuitive implementation of\n<code>std::remove_if</code>, and given all of the implementations I've looked at,\nthey will be.  I'd like to know if there is anything in the standard\nwhich guarantees it; i.e. that <code>std::remove_if</code> is not allowed to copy\nany of the valid entries without recopying the copy into its final\nlocation. </p>\n<p>(I am, of course, supposing that the condition doesn't copy.  If the\ncondition has a signature like:</p>\n<pre><code>struct Condition\n{\n    bool operator()( std::unique_ptr&lt;SomeType&gt; ptr ) const;\n};\n</code></pre>\n<p>, then of course, all of the pointers will be invalid after\n<code>remove_if</code>.)</p>\n", "Tags": "<c++><c++11>", "OwnerUserId": "649665", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_8415016_8415207_0": {"section_id": 1336, "quality": 0.625, "length": 5}, "so_8415016_8415207_1": {"section_id": 1341, "quality": 0.8333333333333334, "length": 20}}, "n3337": {"so_8415016_8415207_0": {"section_id": 1330, "quality": 0.625, "length": 5}, "so_8415016_8415207_1": {"section_id": 1335, "quality": 0.875, "length": 21}}, "n4659": {"so_8415016_8415207_0": {"section_id": 1466, "quality": 0.625, "length": 5}, "so_8415016_8415207_1": {"section_id": 1471, "quality": 0.7916666666666666, "length": 19}}}, "8415050": {"ParentId": "8415016", "CommentCount": "6", "Body": "<p>Just like <code>erase()</code> and <code>resize()</code>, <code>remove_if()</code> will <em>move</em> elements (possibly via swapping), so the container elements do not need to be copyable. There's nothing special about <code>unique_ptr</code>, it's just another move-only type.</p>\n<p>As you point out, the predicate should of course take elements by const-reference. Again, just like for any movable type.</p>\n", "OwnerUserId": "596781", "PostTypeId": "2", "Id": "8415050", "Score": "5", "CreationDate": "2011-12-07T12:06:54.637", "LastActivityDate": "2011-12-07T12:06:54.637"}});