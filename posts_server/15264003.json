post_cb({"38432302": {"ParentId": "15264003", "CommentCount": "0", "Body": "<p>To add to the correct answer (that both forms are allowed).</p>\n<p>I think of the two binding options in analogy with function argument declaration, which may be \"passed by value\" or \"passed by reference\".</p>\n<p>In the case of <code>f1</code> (aka passing <code>my_foo</code> \"by value\") the result doesn't \"see\" any changes made to <code>my_foo</code> past the binding point. This may not be desired especially if <code>my_foo</code> evolves. \"By value\" binding has an additional \"cost\" of (several) calls to a copy constructor.</p>\n", "OwnerUserId": "1315320", "PostTypeId": "2", "Id": "38432302", "Score": "1", "CreationDate": "2016-07-18T08:49:14.903", "LastActivityDate": "2016-07-18T08:49:14.903"}, "15264003": {"CommentCount": "3", "CreationDate": "2013-03-07T05:46:57.170", "PostTypeId": "1", "AcceptedAnswerId": "15264126", "LastEditorUserId": "1619294", "LastActivityDate": "2016-10-16T22:43:18.963", "LastEditDate": "2013-03-07T05:48:36.967", "ViewCount": "43072", "FavoriteCount": "17", "Title": "Using std::bind with member function, use object pointer or not for this argument?", "Id": "15264003", "Score": "59", "Body": "<p>When using <code>std::bind</code> to bind a member function, the first argument is the objects <code>this</code> pointer. However it works passing the object both as a pointer and not.</p>\n<p>See for example the following program:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;functional&gt;\n\nstruct foo\n{\n    void bar(int v) { std::cout &lt;&lt; \"foo::bar - \" &lt;&lt; v &lt;&lt; '\\n'; }\n};\n\nint main()\n{\n    foo my_foo;\n\n    auto f1 = std::bind(&amp;foo::bar, my_foo, 1);\n    auto f2 = std::bind(&amp;foo::bar, &amp;my_foo, 2);\n\n    f1();\n    f2();\n}\n</code></pre>\n<p>Both clang and GCC compiles this without complaints, and the result works for both binds:</p>\n<pre>\nfoo::bar - 1\nfoo::bar - 2\n</pre>\n<p>I have been trying to wrap my head around the specification (section 20.8.9) but it's one of the places where it's far from clear to me.</p>\n<p>Should only one be correct, or are both correct?</p>\n", "Tags": "<c++><c++11><language-lawyer>", "OwnerUserId": "440558", "AnswerCount": "3"}, "15264126": {"ParentId": "15264003", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>Both are correct. 20.8.9.1.2 forwards to 20.8.2 to describe the requirements and the effect of your call to <code>bind</code>. 20.8.2 is:</p>\n<blockquote>\n<h3>20.8.2 Requirements [func.require]</h3>\n<p id=\"so_15264003_15264126_0\"><sup>1</sup> Define <em>INVOKE</em><code>(f, t1, t2, ..., tN)</code> as follows:</p>\n<p id=\"so_15264003_15264126_1\">\u2014 <code>(t1.*f)(t2, ..., tN)</code> when <code>f</code> is a pointer to a member function of a class <code>T</code> and <code>t1</code> is an object of type <code>T</code> or a reference to an object of type <code>T</code> or a reference to an object of a type derived from <code>T</code>;</p>\n<p id=\"so_15264003_15264126_2\">\u2014 <code>((*t1).*f)(t2, ..., tN)</code> when <code>f</code> is a pointer to a member function of a class <code>T</code> and <code>t1</code> is not one of the types described in the previous item;</p>\n<p id=\"so_15264003_15264126_3\">\u2014 <code>t1.*f</code> when <code>N == 1</code> and <code>f</code> is a pointer to member data of a class <code>T</code> and <code>t1</code> is an object of type <code>T</code> or a reference to an object of type <code>T</code> or a reference to an object of a type derived from <code>T</code>;</p>\n<p id=\"so_15264003_15264126_4\">\u2014 <code>(*t1).*f</code> when <code>N == 1</code> and <code>f</code> is a pointer to member data of a class <code>T</code> and <code>t1</code> is not one of the types described in the previous item;</p>\n<p id=\"so_15264003_15264126_5\">\u2014 <code>f(t1, t2, ..., tN)</code> in all other cases.</p>\n</blockquote>\n<p>The first two options allow both a reference and a pointer.</p>\n<p>The important thing to notice here is that the wording does <em>not</em> limit you to plain pointers. You could use a <code>std::shared_ptr</code> or some other smart pointer to keep your instance alive while bound and it would still work with <code>std::bind</code> as <code>t1</code> is dereferenced, no matter what it is (given, of course, that it's possible).</p>\n", "OwnerUserId": "2073257", "LastEditorUserId": "2073257", "LastEditDate": "2013-03-07T09:04:59.243", "Id": "15264126", "Score": "47", "CreationDate": "2013-03-07T05:56:05.140", "LastActivityDate": "2013-03-07T09:04:59.243"}, "bq_ids": {"n4140": {"so_15264003_15264126_5": {"section_id": 4560, "quality": 1.0, "length": 4}, "so_15264003_15264126_3": {"section_id": 4560, "quality": 1.0, "length": 15}, "so_15264003_15264126_1": {"section_id": 4560, "quality": 1.0, "length": 15}, "so_15264003_15264126_2": {"section_id": 4560, "quality": 1.0, "length": 11}, "so_15264003_15264126_4": {"section_id": 4560, "quality": 1.0, "length": 11}}, "n3337": {"so_15264003_15264126_5": {"section_id": 4390, "quality": 1.0, "length": 4}, "so_15264003_15264126_3": {"section_id": 4390, "quality": 1.0, "length": 15}, "so_15264003_15264126_1": {"section_id": 4390, "quality": 1.0, "length": 15}, "so_15264003_15264126_2": {"section_id": 4390, "quality": 1.0, "length": 11}, "so_15264003_15264126_4": {"section_id": 4390, "quality": 1.0, "length": 11}}, "n4659": {"so_15264003_15264126_3": {"section_id": 7709, "quality": 0.6, "length": 9}, "so_15264003_15264126_5": {"section_id": 5932, "quality": 1.0, "length": 4}, "so_15264003_15264126_1": {"section_id": 7709, "quality": 0.6, "length": 9}, "so_15264003_15264126_2": {"section_id": 5932, "quality": 0.6363636363636364, "length": 7}, "so_15264003_15264126_4": {"section_id": 5932, "quality": 0.6363636363636364, "length": 7}}}, "40076293": {"ParentId": "15264003", "CommentCount": "0", "Body": "<p>There is a difference. As rytis put forward, passing by value doesn't see the changes made to my_foo. For example, in case my_foo is a class, passing by value doesn't see a change made to a member data of my_foo. </p>\n", "OwnerUserId": "3626519", "PostTypeId": "2", "Id": "40076293", "Score": "-1", "CreationDate": "2016-10-16T22:43:18.963", "LastActivityDate": "2016-10-16T22:43:18.963"}});