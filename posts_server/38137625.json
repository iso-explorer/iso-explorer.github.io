post_cb({"39549779": {"ParentId": "38137625", "CommentCount": "1", "Body": "<p>The C standard specifies in 6.7.2.1:</p>\n<blockquote>\n<p id=\"so_38137625_39549779_0\">An implementation may allocate any addressable storage unit large enough to hold a bit-\n  field. If enough space remains, a bit-field that immediately follows another bit-field in a\n       structure shall be packed into adjacent bits of the same unit. If insufficient space remains,\n        whether a bit-field that does not fit is put into the next unit or overlaps adjacent units is\n           implementation-defined. The order of allocation of bit-fields within a unit (high-order to\n              low-order or low-order to high-order) is implementation-defined. The alignment of the\n               addressable storage unit is unspecified.</p>\n</blockquote>\n<p>The C++ standard is much more terse in 9.6:</p>\n<blockquote>\n<p id=\"so_38137625_39549779_1\">Allocation of bit-fields within a class\n  object is implementation-defined. Alignment of bit-fields is implementation-defined. Bit-fields are packed\n  into some addressable allocation unit.</p>\n</blockquote>\n<p>The upshot of both of these is that bitfields are always allocated with some implementation-defined allocation unit, and while multiple bitfields can be packed within a single allocation unit, the space allocated in a struct for bitfields will always be a multiple of that allocation unit.</p>\n<p>There is no standard defined constant or defined way of querying what that allocation unit size is, though the term \"implementation defined\" does imply that the implementation SHOULD document that size somewhere.</p>\n<p>In your particular case, it seems the compiler chooses an allocation unit of 4 bytes, so that's what the size ends up being.  It is possible for a different compiler to choose a different sized allocation unit, or even for a single compiler to choose different sized allocation units for different structs in the same program.  The spec is particularly non-constraining.</p>\n", "OwnerUserId": "16406", "PostTypeId": "2", "Id": "39549779", "Score": "1", "CreationDate": "2016-09-17T17:30:12.130", "LastActivityDate": "2016-09-17T17:30:12.130"}, "39549300": {"ParentId": "38137625", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>for int it is four byte that is reason struct is also giving the 4 byte</p>\n<p>for example </p>\n<pre><code>struct  \n{\n    unsigned int bit0: 1;\n    unsigned int bit1: 1;\n    unsigned int bit2: 1;\n    unsigned int bit3: 1;\n\n} bitField; \n</code></pre>\n<p>in this case also you will gate <strong>4</strong> byte for <code>struct</code>.</p>\n", "OwnerUserId": "6086458", "LastEditorUserId": "6382007", "LastEditDate": "2016-09-17T20:08:59.923", "Id": "39549300", "Score": "-1", "CreationDate": "2016-09-17T16:45:38.393", "LastActivityDate": "2016-09-17T20:08:59.923"}, "38138510": {"ParentId": "38137625", "CommentCount": "0", "Body": "<p>In <strong>union</strong>, the total memory space allocated is equal to the member with largest size. All other members share the same memory space.</p>\n<p>Size of the <code>structure</code> will depend on number of <code>bits</code> that is being used by the structure to store its variables.</p>\n<p>If we require <code>1 to 32 bits</code> to store the variables in a structure then the size of structure will be <code>4 bytes</code> in all cases.But as there will be requirement of more than <code>32 bits</code> (say 33 bit), then size of structure will be <code>8 byte</code>. This happens due to the fact that the natural alignment on <code>32-bit machine is 4 bytes</code>. When a data type is naturally aligned, the CPU fetches it in minimum read cycles. So size of structure will be 4 bytes upto requirement of 32 bit.But if we want to store 33 variables, that will require 33 bits, then it will take two memory read cycles... ie.. 8 bytes</p>\n", "OwnerUserId": "5612562", "PostTypeId": "2", "Id": "38138510", "Score": "0", "CreationDate": "2016-07-01T06:29:55.557", "LastActivityDate": "2016-07-01T06:29:55.557"}, "38137625": {"CommentCount": "3", "ViewCount": "100", "CreationDate": "2016-07-01T05:24:55.793", "LastActivityDate": "2016-09-17T20:08:59.923", "Title": "Questions about bitfield?", "PostTypeId": "1", "Id": "38137625", "Score": "1", "Body": "<p>Consider the following bitfield which I implemented with union</p>\n<pre><code>union \n{\n    char fullByte;\n    struct  \n    {\n        unsigned int bit0: 1;\n        unsigned int bit1: 1;\n        unsigned int bit2: 1;\n        unsigned int bit3: 1;\n        unsigned int bit4: 1;\n        unsigned int bit5: 1;\n        unsigned int bit6: 1;\n        unsigned int bit7: 1;\n    } bitField;\n    struct \n    {\n        unsigned int : 1;\n        unsigned int bit1to6 : 6;\n        unsigned int : 1;\n    } bitField2;\n} bitByte;\n\ncout &lt;&lt; sizeof(bitByte) &lt;&lt; endl; //prints 4\ncout &lt;&lt; sizeof(bitByte.fullByte) &lt;&lt; endl; //prints 1\ncout &lt;&lt; sizeof(bitByte.bitField) &lt;&lt; endl; //prints 4\ncout &lt;&lt; sizeof(bitByte.bitField2) &lt;&lt; endl; //prints 4\n</code></pre>\n<p>Why are the union and the structs both 4 bytes? I only defined 8 bits, shouldn't it be one byte? If a bit is 2 bytes by the definition of \"unsigned int\", shouldn't it be 16 bytes? It seems that either way of thinking doesn't work. Why is it 4 bytes? </p>\n<p>Also, I notice that I cannot do \"sizeof(bitByte.bitField.bit0)\", what would be the size of that? I defined it to be one bit, but unsigned int is 2 bytes by definition. How many bytes would bit0, bit1, etc be? </p>\n", "Tags": "<c++>", "OwnerUserId": "4099855", "AnswerCount": "6"}, "38137949": {"ParentId": "38137625", "PostTypeId": "2", "CommentCount": "4", "Body": "<blockquote>\n<p id=\"so_38137625_38137949_0\">Why are the union and the structs both 4 bytes?</p>\n</blockquote>\n<p>Size of Union  = the largest member.</p>\n<p>Size of Struct = sum of size of all members(with padding).</p>\n<p>So, in your code \nsizeof(bitByte) = sizeof(bitByte.bitField) OR sizeof(bitByte.bitField2)</p>\n<blockquote>\n<p id=\"so_38137625_38137949_1\">I only defined 8 bits, shouldn't it be one byte? </p>\n</blockquote>\n<p>Padding is done for the reason that processors require that certain types of data have particular alignments.</p>\n", "OwnerUserId": "1465553", "LastEditorUserId": "1465553", "LastEditDate": "2016-07-01T05:58:08.813", "Id": "38137949", "Score": "0", "CreationDate": "2016-07-01T05:51:42.920", "LastActivityDate": "2016-07-01T05:58:08.813"}, "38137805": {"ParentId": "38137625", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Please have a look at the following link: <a href=\"http://www.tutorialspoint.com/cprogramming/c_bit_fields.htm\" rel=\"nofollow\">http://www.tutorialspoint.com/cprogramming/c_bit_fields.htm</a></p>\n<p>The sizeof operator cannot be used on bitfields.\n<a href=\"http://en.cppreference.com/w/cpp/language/sizeof\" rel=\"nofollow\">http://en.cppreference.com/w/cpp/language/sizeof</a></p>\n", "OwnerUserId": "1079120", "LastEditorUserId": "418066", "LastEditDate": "2016-07-01T05:43:05.500", "Id": "38137805", "Score": "0", "CreationDate": "2016-07-01T05:41:07.947", "LastActivityDate": "2016-07-01T05:43:05.500"}, "bq_ids": {"n4140": {"so_38137625_39549779_1": {"section_id": 5921, "quality": 0.875, "length": 14}}, "n3337": {"so_38137625_39549779_1": {"section_id": 5693, "quality": 0.875, "length": 14}}, "n4659": {"so_38137625_39549779_1": {"section_id": 7395, "quality": 0.875, "length": 14}}}, "39549570": {"ParentId": "38137625", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>You told it to allocate the bits from an underlying <code>unsigned int</code>, which on your platform is apparently 4 bytes. </p>\n<p>edit: <a href=\"https://stackoverflow.com/a/39549779/1290731\">As Chris Dodd points out</a>, the compiler isn't actually required to do it that way, but I think you're going to have a hard time finding one that doesn't.  Network packet layout is important on most systems, so all the compilers for a particular architecture tend to settle on a convention pretty quickly.</p>\n", "OwnerUserId": "1290731", "LastEditorUserId": "1290731", "LastEditDate": "2016-09-17T17:55:33.913", "Id": "39549570", "Score": "0", "CreationDate": "2016-09-17T17:10:32.603", "LastActivityDate": "2016-09-17T17:55:33.913"}});