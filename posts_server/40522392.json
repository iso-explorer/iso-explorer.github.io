post_cb({"bq_ids": {"n4140": {"so_40522392_40522392_0": {"length": 13, "quality": 1.0, "section_id": 5975}}, "n3337": {"so_40522392_40522392_0": {"length": 13, "quality": 1.0, "section_id": 5743}}, "n4659": {"so_40522392_40522392_0": {"length": 13, "quality": 1.0, "section_id": 7475}}}, "40522392": {"ViewCount": "78", "Body": "<p>The following program compiles with trunk versions of Clang and GCC:</p>\n<pre><code>#include &lt;type_traits&gt;\n\nauto main() -&gt; int\n{\n    auto x = 42;\n    [&amp;x] { static_assert(std::is_same&lt;decltype(x), int&gt;::value, \"!\"); };\n}\n</code></pre>\n<p>However, the static assert fails with VC12 and VC14, where <code>decltype(x)</code> evaluates to <code>int&amp;</code> rather than <code>int</code>.</p>\n<p>I can see why this is happening: the compiler-generated closure type for the lambda has a data member of reference type which is bound to <code>x</code> upon construction. <code>decltype(x)</code> then refers to this data member and gives <code>int&amp;</code> as a result. </p>\n<p>Clang and GCC, on the other hand, seem to behave as if no data member were generated, and the <em>id-expression</em> <code>x</code> refers directly to the captured variable.</p>\n<p>Paragraph <a href=\"http://eel.is/c++draft/expr.prim.lambda#18\" rel=\"nofollow noreferrer\">[expr.prim.lambda]/18</a> of the C++ Standard says that:</p>\n<blockquote>\n<p id=\"so_40522392_40522392_0\">[...] It is unspecified whether additional unnamed non-static data members are declared in the closure type for entities captured by reference.</p>\n</blockquote>\n<p>This seems to imply the behavior is implementation-defined, but what I find more likely is that I'm missing something here. What is the correct behavior supposed to be and where does the Standard mandates it?</p>\n", "Title": "What is decltype(x) inside a lambda supposed to return when x is captured by reference?", "CreationDate": "2016-11-10T07:49:32.503", "LastActivityDate": "2016-11-10T07:49:32.503", "CommentCount": "0", "PostTypeId": "1", "ClosedDate": "2016-11-10T07:59:56.747", "Id": "40522392", "Score": "7", "OwnerUserId": "1932150", "Tags": "<c++><lambda><reference><language-lawyer><decltype>", "AnswerCount": "0"}});