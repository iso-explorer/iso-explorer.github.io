post_cb({"8404649": {"Id": "8404649", "PostTypeId": "2", "Body": "<p>I beieve that yes in practice, but perhaps no in theory.</p>\n<p>You are asking if <code>p + 3</code> is the same as <code>((p + 1) + 2)</code> but the standard says that pointer arithmetic only makes sense inside an array or just one element past its end.</p>\n", "LastActivityDate": "2011-12-06T18:11:18.333", "CommentCount": "5", "CreationDate": "2011-12-06T18:11:18.333", "ParentId": "8404598", "Score": "1", "OwnerUserId": "841108"}, "bq_ids": {"n4140": {"so_8404598_8404676_3": {"length": 5, "quality": 0.8333333333333334, "section_id": 6140}, "so_8404598_8404917_0": {"length": 18, "quality": 0.9, "section_id": 6142}, "so_8404598_8404676_1": {"length": 17, "quality": 0.9444444444444444, "section_id": 7185}}, "n3337": {"so_8404598_8404676_3": {"length": 5, "quality": 0.8333333333333334, "section_id": 5904}, "so_8404598_8404917_0": {"length": 18, "quality": 0.9, "section_id": 5906}, "so_8404598_8404676_1": {"length": 17, "quality": 0.9444444444444444, "section_id": 6929}}, "n4659": {"so_8404598_8404676_3": {"length": 5, "quality": 0.8333333333333334, "section_id": 7637}, "so_8404598_8404676_1": {"length": 16, "quality": 0.8888888888888888, "section_id": 8693}}}, "8404598": {"ViewCount": "265", "Body": "<p>If I say,</p>\n<pre><code>int a[] = {1, 2, 3, 4, 5};\nint *p = a;\n</code></pre>\n<p>Now, If I write <code>p + 1 + 2</code> will it be same as <code>((p + 1) + 2)</code>? Any standard reference which proves this wrong?</p>\n", "Title": "Is arithmetic on pointers associative?", "CreationDate": "2011-12-06T18:08:01.070", "LastActivityDate": "2014-03-25T02:59:39.740", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "Id": "8404598", "Score": "7", "OwnerUserId": "187543", "Tags": "<c++><pointers><pointer-arithmetic>", "AnswerCount": "5"}, "8404655": {"Id": "8404655", "PostTypeId": "2", "Body": "<p>Pointers are really just numbers, so yes addition will be associative in the way you are describing. </p>\n<p>EDIT: See comment below from delnan - while yes, the addition will be associative, my statement that pointers are just numbers is not quite correct.</p>\n", "LastEditorUserId": "490982", "LastActivityDate": "2011-12-06T19:10:51.933", "Score": "1", "CreationDate": "2011-12-06T18:11:34.927", "ParentId": "8404598", "CommentCount": "4", "OwnerUserId": "490982", "LastEditDate": "2011-12-06T19:10:51.933"}, "8404917": {"Id": "8404917", "PostTypeId": "2", "Body": "<p>Addition between a pointer and an integer is defined in C++11 as follows (5.7/5):</p>\n<blockquote>\n<p id=\"so_8404598_8404917_0\">if the expression P points to the i-th element of an array object, the\n  expressions (P)+N (equivalently, N+(P)) and (P)-N (where N has the\n  value n) point to, respectively, the i + n-th and i \u2212 n-th elements of\n  the array object, provided they exist.</p>\n</blockquote>\n<p>The next sentence talks about pointers one past the end of arrays.</p>\n<p>So, addition involving pointers is \"the same thing as\" addition involving indexes, which of course is associative. From this you can deduce that, provided the array elements exist (or are one past the end), then addition involving pointers is associative.</p>\n<p>If your arithmetic exceeds the bounds of the array that the pointer points into, then behavior is undefined, and hence in particular need not be associative.</p>\n", "LastActivityDate": "2011-12-06T18:31:36.633", "CommentCount": "0", "CreationDate": "2011-12-06T18:31:36.633", "ParentId": "8404598", "Score": "2", "OwnerUserId": "13005"}, "8404676": {"Id": "8404676", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_8404598_8404676_0\">\u00a73.7.4.3</p>\n<p id=\"so_8404598_8404676_1\">2 <code>A pointer value is a safely-derived pointer to a dynamic object only if it has pointer-to-object type and it is\n  one of the following: ... the result of well-defined pointer arithmetic (5.7) using a safely-derived pointer value;</code></p>\n<p id=\"so_8404598_8404676_2\">\u00a7 5.7</p>\n<p id=\"so_8404598_8404676_3\">3 <code>The result of the binary + operator is the sum of the operands.</code> </p>\n</blockquote>\n<p>Sounds legit to me.</p>\n", "LastEditorUserId": "112", "LastActivityDate": "2014-03-25T02:59:39.740", "Score": "3", "CreationDate": "2011-12-06T18:13:01.240", "ParentId": "8404598", "CommentCount": "4", "OwnerUserId": "845092", "LastEditDate": "2014-03-25T02:59:39.740"}, "8404833": {"Id": "8404833", "PostTypeId": "2", "Body": "<p>Only if you don't go out of range. For instance, in this:</p>\n<pre><code>int a[] = {1, 2, 3, 4, 5};\nint *p = (a + 10) - 9;\nint *q = a + (10 - 9);\n</code></pre>\n<p>The assignment to <code>p</code> invokes undefined behaviour, whereas the assignment to <code>q</code> doesn't.</p>\n<p>As long as you stay in range, though, you'd expect associativity to hold.</p>\n<p>Incidentally, note that in your question the two things you give are the same by definition, since addition (well, in-range addition anyway) is left-associative. That is, <code>x + y + z == (x + y) + z</code>, not <code>x + (y + z)</code>.</p>\n", "LastActivityDate": "2011-12-06T18:23:56.980", "CommentCount": "1", "CreationDate": "2011-12-06T18:23:56.980", "ParentId": "8404598", "Score": "4", "OwnerUserId": "499449"}});