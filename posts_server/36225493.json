post_cb({"36225623": {"ParentId": "36225493", "CommentCount": "3", "Body": "<blockquote>\n<p id=\"so_36225493_36225623_0\">is it defined to _write_ to a char*, then _read_ from an aliased nonchar*?</p>\n</blockquote>\n<p>Yes.</p>\n<blockquote>\n<p id=\"so_36225493_36225623_1\">Must the printed value reflect the change in [alias-write]?</p>\n</blockquote>\n<p>Yes.</p>\n<p>Strict aliasing says ((<code>un</code>)<code>signed</code>) <code>char*</code> can alias anything. The word \"access\" means both read and write operations.</p>\n", "OwnerUserId": "3425536", "PostTypeId": "2", "Id": "36225623", "Score": "1", "CreationDate": "2016-03-25T18:20:50.383", "LastActivityDate": "2016-03-25T18:20:50.383"}, "36225493": {"CommentCount": "0", "ViewCount": "102", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2016-03-25T18:12:24.250", "LastActivityDate": "2016-03-25T18:20:50.383", "Title": "With strict aliasing in C++11, is it defined to _write_ to a char*, then _read_ from an aliased nonchar*?", "AcceptedAnswerId": "36225623", "LastEditDate": "2017-05-23T12:31:27.297", "Id": "36225493", "Score": "2", "Body": "<p>There are many discussions of strict aliasing (notably \"<a href=\"https://stackoverflow.com/questions/98650/what-is-the-strict-aliasing-rule\">What is the strict aliasing rule?</a>\" and \"<a href=\"https://stackoverflow.com/questions/23848188/strict-aliasing-rule-and-char-pointers\">Strict aliasing rule and 'char *' pointers</a>\"), but this is a corner case I don't see explicitly addressed.</p>\n<p>Consider this code:</p>\n<pre><code>int x;\nchar *x_alias = reinterpret_cast&lt;char *&gt;(&amp;x);\nx = 1;\n*x_alias = 2;  // [alias-write]\nprintf(\"x is now %d\\n\", x);\n</code></pre>\n<p>Must the printed value reflect the change in [alias-write]? (Clearly there are endianness and representation considerations, that's not my concern here.)</p>\n<p>The famous [basic.lval] clause of the C++11 spec uses this language (emphasis mine):</p>\n<blockquote>\n<p id=\"so_36225493_36225493_0\">If a program attempts to <strong>access</strong> the stored value of an object through a glvalue of other than one of the following types the behavior is undefined:</p>\n<ul>\n<li>... various other conditions ...</li>\n<li>a <code>char</code> or <code>unsigned char</code> type.</li>\n</ul>\n</blockquote>\n<p>I can't figure out whether \"access\" refers only to read operations (read chars from a nonchar object) or also to write operations (write chars onto a nonchar object). If there's a formal definition of \"access\" in the spec, I can't find it, but in other places the spec seems to use \"access\" for reads and \"update\" for writes.</p>\n<p>This is of particular interest when deserializing; it's convenient and efficient to bring data directly from a wire into an object, without requiring an intermediate memcpy() from a char-buffer into the object.</p>\n", "Tags": "<c++><c++11><strict-aliasing>", "OwnerUserId": "6115070", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_36225493_36225493_0": {"section_id": 7239, "quality": 1.0, "length": 14}}, "n3337": {"so_36225493_36225493_0": {"section_id": 6983, "quality": 1.0, "length": 14}}, "n4659": {"so_36225493_36225493_0": {"section_id": 8748, "quality": 1.0, "length": 14}}}});