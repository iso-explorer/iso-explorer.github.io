post_cb({"bq_ids": {"n4140": {"so_11979153_11979192_3": {"length": 4, "quality": 0.6666666666666666, "section_id": 5850}, "so_11979153_11979192_0": {"length": 4, "quality": 1.0, "section_id": 4706}, "so_11979153_11979192_4": {"length": 4, "quality": 0.6666666666666666, "section_id": 5850}}, "n3337": {"so_11979153_11979192_3": {"length": 4, "quality": 0.6666666666666666, "section_id": 5620}, "so_11979153_11979192_0": {"length": 4, "quality": 1.0, "section_id": 4515}, "so_11979153_11979192_4": {"length": 4, "quality": 0.6666666666666666, "section_id": 5620}}, "n4659": {"so_11979153_11979192_0": {"length": 4, "quality": 1.0, "section_id": 6103}}}, "11979192": {"Id": "11979192", "PostTypeId": "2", "Body": "<p>No. The requirement is that the type be <em>trivially copyable</em> (\u00a73.9/2) which has <a href=\"https://stackoverflow.com/questions/4178175/what-are-aggregates-and-pods-and-how-why-are-they-special/7189821#7189821\">a few more requirements</a>, like the lack of a non-trivial copy constructor (\u00a79/6).</p>\n<blockquote>\n<p id=\"so_11979153_11979192_0\">A trivially copyable class is a class that:</p>\n<p id=\"so_11979153_11979192_1\">\u2014 has no non-trivial copy constructors (12.8),</p>\n<p id=\"so_11979153_11979192_2\">\u2014 has no non-trivial move constructors (12.8),</p>\n<p id=\"so_11979153_11979192_3\">\u2014 has no non-trivial copy assignment operators (13.5.3, 12.8),</p>\n<p id=\"so_11979153_11979192_4\">\u2014 has no non-trivial move assignment operators (13.5.3, 12.8), and</p>\n<p id=\"so_11979153_11979192_5\">\u2014 has a trivial destructor (12.4).</p>\n</blockquote>\n<p>So you should use <code>is_trivially_copyable</code> instead.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2012-08-16T01:12:08.347", "Score": "22", "CreationDate": "2012-08-16T00:38:59.733", "ParentId": "11979153", "CommentCount": "4", "OwnerUserId": "46642", "LastEditDate": "2017-05-23T12:08:27.283"}, "11979189": {"Id": "11979189", "PostTypeId": "2", "Body": "<p>Although it's generally rare in practice, there may be a situation where a class has a non-trivial copy constructor, along with a trivial destructor.  Consider a class with a static member variable that just counts how many times the class has been copied.  If you <code>memcpy</code> it, the counter would be inaccurate.</p>\n", "LastEditorUserId": "168288", "LastActivityDate": "2012-08-16T00:47:13.800", "Score": "5", "CreationDate": "2012-08-16T00:38:50.813", "ParentId": "11979153", "CommentCount": "4", "OwnerUserId": "168288", "LastEditDate": "2012-08-16T00:47:13.800"}, "11979193": {"Id": "11979193", "PostTypeId": "2", "Body": "<p>It is not sufficient that an object has a trivial destructor. It also needs to have trivial copy operations. The object may maintain pointers to internal buffers, for example. There is no need to destroy anything but copying would need to set up the pointers in the copied to object because they would otherwise point into the buffer of the source object.</p>\n", "LastActivityDate": "2012-08-16T00:39:02.277", "CommentCount": "1", "CreationDate": "2012-08-16T00:39:02.277", "ParentId": "11979153", "Score": "9", "OwnerUserId": "1120273"}, "11979190": {"Id": "11979190", "PostTypeId": "2", "Body": "<p>It seems to me that a class with a plain pointer would qualify as <code>has_trivial_destructor</code>, but you usually want to make a deep copy whereas <code>memcpy</code> would create a shallow copy.</p>\n", "LastActivityDate": "2012-08-16T00:38:53.633", "CommentCount": "1", "CreationDate": "2012-08-16T00:38:53.633", "ParentId": "11979153", "Score": "0", "OwnerUserId": "5987"}, "11979153": {"ViewCount": "933", "Body": "<p>I <em>do</em> realize <code>is_pod</code> is a sufficient condition for a type to be <code>memcpy</code>-able, but is <code>has_trivial_destructor</code> <em>also</em> sufficient for this purpose? If not, why?</p>\n", "AcceptedAnswerId": "11979192", "Title": "Can I memcpy() any type which has a trivial destructor?", "CreationDate": "2012-08-16T00:31:48.073", "Id": "11979153", "CommentCount": "5", "FavoriteCount": "2", "PostTypeId": "1", "LastActivityDate": "2012-08-16T01:12:08.347", "Score": "10", "OwnerUserId": "541686", "Tags": "<c++><c++11><memcpy><pod>", "AnswerCount": "4"}});