post_cb({"11245406": {"ParentId": "11245359", "PostTypeId": "2", "CommentCount": "2", "CreationDate": "2012-06-28T13:10:31.383", "Score": "0", "LastEditorUserId": "673730", "LastEditDate": "2012-06-28T13:14:16.107", "Id": "11245406", "OwnerUserId": "676897", "Body": "<p>No, it is not valid because <code>nth</code> has to be within the range <code>[first, last)</code>.</p>\n", "LastActivityDate": "2012-06-28T13:14:16.107"}, "11245359": {"CommentCount": "4", "AcceptedAnswerId": "11245427", "PostTypeId": "1", "LastEditorUserId": "851835", "CreationDate": "2012-06-28T13:07:44.337", "LastActivityDate": "2012-06-28T13:48:54.203", "LastEditDate": "2012-06-28T13:22:22.010", "ViewCount": "243", "FavoriteCount": "1", "Title": "What the effect of std::nth_element(a.begin(), a.end(), a.end())?", "Id": "11245359", "Score": "7", "Body": "<p>I read the description of <code>std::nth_element</code> at <a href=\"http://www.sgi.com/tech/stl/nth_element.html\" rel=\"noreferrer\">http://www.sgi.com/tech/stl/nth_element.html</a></p>\n<pre><code>template &lt;class RandomAccessIterator&gt;\nvoid nth_element(RandomAccessIterator first, RandomAccessIterator nth,\n                 RandomAccessIterator last);\n</code></pre>\n<p>Note that the preconditions are</p>\n<ol>\n<li>[first, nth) is a valid range.</li>\n<li>[nth, last) is a valid range.</li>\n</ol>\n<p>My question is: </p>\n<p>Is it valid to call <code>std::nth_element(a.begin(), a.end(), a.end())</code>? If so, what's its effect? It doesn't violate the preconditions above, anyway. Anywhere in the language standard (or other documents) stated that <code>nth</code> must be pointing to an element in <code>a</code>?</p>\n", "Tags": "<c++><stl>", "OwnerUserId": "851835", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_11245359_11245427_0": {"section_id": 1418, "quality": 0.84, "length": 21}}, "n3337": {"so_11245359_11245427_0": {"section_id": 1412, "quality": 0.84, "length": 21}}, "n4659": {"so_11245359_11245427_0": {"section_id": 1539, "quality": 0.84, "length": 21}}}, "11245486": {"ParentId": "11245359", "CommentCount": "4", "CreationDate": "2012-06-28T13:14:15.250", "OwnerUserId": "91757", "PostTypeId": "2", "Id": "11245486", "Score": "0", "Body": "<p>No, <code>std::nth_element(a.begin(), a.end(), a.end())</code> is not valid -  it violates the second precondition, which requires that the <code>nth</code> iterator (the second argument) points to a valid element. <code>a.end()</code> doesn't point to a valid element though.</p>\n", "LastActivityDate": "2012-06-28T13:14:15.250"}, "11245427": {"ParentId": "11245359", "PostTypeId": "2", "CommentCount": "10", "CreationDate": "2012-06-28T13:11:21.037", "Score": "5", "LastEditorUserId": "125672", "LastEditDate": "2012-06-28T13:48:54.203", "Id": "11245427", "OwnerUserId": "125672", "Body": "<p>It's valid and is probably, but not guaranteed by the standard, a null operation. With the given data, the two preconditions become:</p>\n<pre><code>[a.begin(), a.end()) is a valid range.\n[a.end(), a.end()) is a valid range.\n</code></pre>\n<p>Which are both true, the second interval is empty though. From the standard 25.3.2/1:</p>\n<blockquote>\n<p id=\"so_11245359_11245427_0\">After nth_element the element in the position pointed to by nth is the\n  element that would be in that position if the whole range were sorted.\n  Also for any iterator i in the range [first, nth) and any iterator j\n  in the range [nth, last) it holds that: !(*i &gt; *j) or comp(*j, *i) ==\n  false.</p>\n</blockquote>\n<p>If the whole range was sorted the original <code>a.end()</code> would be at <code>a.end()</code> and for the second part the range <code>[nth, last)</code> is empty so there are no elements for which to evaluate the <code>!(*i &gt; *j)</code> and <code>comp(*j, *i) == false</code> conditions.</p>\n", "LastActivityDate": "2012-06-28T13:48:54.203"}});