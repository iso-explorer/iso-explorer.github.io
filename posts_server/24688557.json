post_cb({"24688664": {"Id": "24688664", "PostTypeId": "2", "Body": "<p>The inner <code>foo</code> is just another forward deceleration of the same <code>foo()</code>. Consider the following example:</p>\n<pre><code> int foo();\n int foo();\n\n int main() {\n     cout &lt;&lt; foo() &lt;&lt; endl;\n }\n\n int foo() { // one definition\n    return 42;\n }\n</code></pre>\n<p>This will compile and run and there is no ambiguity because the compiler will replace the use of the same function with the same code. </p>\n<p>It is fine to re declare functions.</p>\n", "LastActivityDate": "2014-07-11T01:02:03.143", "CommentCount": "2", "CreationDate": "2014-07-11T01:02:03.143", "ParentId": "24688557", "Score": "2", "OwnerUserId": "1294207"}, "24688557": {"ViewCount": "150", "Body": "<p>Another newbie question: </p>\n<pre><code>int foo();  // outer foo function\nint main() {\n    int foo(); // inner foo function\n    cout &lt;&lt; foo() &lt;&lt; endl;\n}\n\nint foo() { // one definition\n    return 42;\n}\n</code></pre>\n<p>From my understanding, an inner declaration of either function or object will hide outer one, if any.<br>\nSo the above outer foo() and inner foo() should be two distinct functions.<br>\nBut they are sharing one definition, which seems confusing. \nIs it legal that two distinct functions share one definition? How about two distinct object variables? \n(This is C++ question but the syntax seems also fits C.)</br></br></p>\n<p><strong>Edit</strong>:</p>\n<p>It is verified that outer and inner foo are the same funciton using pointer to function: </p>\n<pre><code>pf_outer = 0x400792\n\npf_inner = 0x400792\n</code></pre>\n", "AcceptedAnswerId": "24688664", "Title": "Two functions declarations share one definition, is this legal?", "CreationDate": "2014-07-11T00:50:43.253", "LastActivityDate": "2014-07-11T04:08:04.680", "CommentCount": "6", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2014-07-11T04:08:04.680", "OwnerDisplayName": "user3424826", "LastEditorUserId": "1708801", "Id": "24688557", "Score": "3", "Tags": "<c++><declaration><language-lawyer>", "AnswerCount": "2"}, "24688652": {"Id": "24688652", "PostTypeId": "2", "Body": "<p>This is perfectly fine to redeclare a function like this, we can see this from draft C++ standard in two places, in section <code>3.1</code> <em>Declarations and definitions</em> which says:</p>\n<blockquote>\n<p id=\"so_24688557_24688652_0\">A declaration (Clause 7) may introduce one or more names into a\n  translation unit or redeclare names introduced by previous\n  declarations.[...]</p>\n</blockquote>\n<p>and goes on to say:</p>\n<blockquote>\n<p id=\"so_24688557_24688652_1\">A declaration is a definition unless it declares a function without\n  specifying the function\u2019s body [...]</p>\n</blockquote>\n<p>and in section <code>13.1</code> <em>Overloadable declarations</em> paragraph <em>3</em> which says:</p>\n<blockquote>\n<p id=\"so_24688557_24688652_2\">Parameter declarations that differ only in the use of equivalent\n  typedef \u201ctypes\u201d are equivalent. A typedef is not a separate type, but\n  only a synonym for another type (7.1.3). [ Example:</p>\n<pre><code> typedef int Int;\n\n void f(int i);\n void f(Int i); // OK: redeclaration of f(int)\n void f(int i) { /* ... */ }\n void f(Int i) { /* ... */ } // error: redefinition of f(int)\n</code></pre>\n<p id=\"so_24688557_24688652_3\">\u2014end example ]</p>\n</blockquote>\n<p>Both declarations will refer to the same definition, you are not allowed to redefine the function.</p>\n<p>The function declarations of are also allowed to differ by their <a href=\"https://stackoverflow.com/q/20659000/1708801\">outermost <em>cv-qualifiers</em> as well</a>.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2014-07-11T01:53:58.583", "Score": "2", "CreationDate": "2014-07-11T01:01:24.963", "ParentId": "24688557", "CommentCount": "3", "OwnerUserId": "1708801", "LastEditDate": "2017-05-23T11:51:03.993"}, "bq_ids": {"n4140": {"so_24688557_24688652_2": {"length": 15, "quality": 0.8823529411764706, "section_id": 558}, "so_24688557_24688652_0": {"length": 15, "quality": 1.0, "section_id": 7033}, "so_24688557_24688652_1": {"length": 6, "quality": 0.8571428571428571, "section_id": 7034}}, "n3337": {"so_24688557_24688652_2": {"length": 15, "quality": 0.8823529411764706, "section_id": 549}, "so_24688557_24688652_0": {"length": 15, "quality": 1.0, "section_id": 6779}, "so_24688557_24688652_1": {"length": 6, "quality": 0.8571428571428571, "section_id": 6780}}, "n4659": {"so_24688557_24688652_2": {"length": 15, "quality": 0.8823529411764706, "section_id": 581}, "so_24688557_24688652_0": {"length": 15, "quality": 1.0, "section_id": 8530}, "so_24688557_24688652_1": {"length": 6, "quality": 0.8571428571428571, "section_id": 8531}}}});