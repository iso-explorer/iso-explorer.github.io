post_cb({"3856712": {"CommentCount": "0", "ViewCount": "94", "PostTypeId": "1", "LastEditorUserId": "226476", "CreationDate": "2010-10-04T15:33:43.830", "LastActivityDate": "2010-10-04T16:04:19.853", "Title": "template and what is created during compilation", "AcceptedAnswerId": "3856965", "LastEditDate": "2010-10-04T15:36:10.293", "Id": "3856712", "Score": "0", "Body": "<p>if i have a template function:</p>\n<pre><code>template&lt;class T, class S&gt;\nvoid foo(T t, S s){..//do something//}\n</code></pre>\n<p>and then, inside the main i do this:</p>\n<pre><code>string str = \"something\";\nchar* ch = \"somthingelse\";\ndouble num = 1.5;\nfoo(ch, num);\nfoo(num, ch);\nfoo(str, num);\n..\n</code></pre>\n<p>my question is in the compilation what code will be written at the executable?\nis it will be: </p>\n<pre><code>foo&lt;char*, double&gt;(..);\nfoo&lt;double, char*&gt;(..);\nfoo&lt;string, double&gt;(..);\n</code></pre>\n<p>or the compile will know at the second call to foo to change the place of the classes.\nor in the 3rd one, in implicit way to use char* to create a string class? </p>\n", "Tags": "<c++><templates>", "OwnerUserId": "432679", "AnswerCount": "3"}, "3856832": {"ParentId": "3856712", "CommentCount": "0", "Body": "<p>il will not implicitly use </p>\n<pre><code>foo&lt;string, double&gt;(...) \n</code></pre>\n<p>for </p>\n<pre><code>foo(str, num)\n</code></pre>\n<p>but you can explicitly ask to use it, i.e. by calling</p>\n<pre><code>foo(string(str), num) \n</code></pre>\n", "OwnerUserId": "248949", "PostTypeId": "2", "Id": "3856832", "Score": "2", "CreationDate": "2010-10-04T15:47:07.410", "LastActivityDate": "2010-10-04T15:47:07.410"}, "3856742": {"ParentId": "3856712", "CommentCount": "0", "Body": "<p>Usually it will instantiate all three. They will not seek default-cast-workarounds to save binary image space.</p>\n", "OwnerUserId": "73656", "PostTypeId": "2", "Id": "3856742", "Score": "3", "CreationDate": "2010-10-04T15:37:10.310", "LastActivityDate": "2010-10-04T15:37:10.310"}, "3856965": {"ParentId": "3856712", "CommentCount": "3", "Body": "<p>I think the following quote from the Standard clarifies this:</p>\n<blockquote>\n<p id=\"so_3856712_3856965_0\">$14.9.1/6- \"Implicit conversions\n  (Clause 4) will be performed on a\n  function argument to convert it to the\n  type of the corresponding function\n  parameter if the parameter type\n  contains no template-parameters that\n  participate in template argument\n  deduction. [ Note: template parameters\n  do not participate in template\n  argument deduction if they are\n  explicitly specified.\"</p>\n</blockquote>\n<p>Since in this case the parameter types of the function template participate in function template argument deduction, no implicit conversion e.g. of string to char * take place.</p>\n", "OwnerUserId": "418110", "PostTypeId": "2", "Id": "3856965", "Score": "1", "CreationDate": "2010-10-04T16:04:19.853", "LastActivityDate": "2010-10-04T16:04:19.853"}, "bq_ids": {"n4140": {"so_3856712_3856965_0": {"section_id": 289, "quality": 0.9032258064516129, "length": 28}}, "n3337": {"so_3856712_3856965_0": {"section_id": 280, "quality": 0.9032258064516129, "length": 28}}, "n4659": {"so_3856712_3856965_0": {"section_id": 296, "quality": 0.9032258064516129, "length": 28}}}});