post_cb({"28887549": {"CommentCount": "11", "ViewCount": "201", "PostTypeId": "1", "LastEditorUserId": "343443", "CreationDate": "2015-03-05T20:56:23.487", "LastActivityDate": "2015-03-07T20:47:06.743", "Title": "How to call the idiom of using an array to apply a function to a variadic pack", "FavoriteCount": "1", "LastEditDate": "2015-03-05T21:22:20.580", "Id": "28887549", "Score": "5", "Body": "<p>Here is the idiom in question:</p>\n<pre><code>template&lt;typename... T&gt;\nvoid f(T... t) {\n    int temp[] = {(g(t), 0)...};\n}\n</code></pre>\n<p>This will be compiled as <code>g(t0); g(t1); ...</code>, order of function calls is guaranteed by C++11[dcl.init.list]/4.<br>\nA better version uses <code>std::initializer_list</code> instead of array, but it's not important here.</br></p>\n<p>The question is: <strong>how should we call this idiom?</strong></p>\n<p><strong>Upd:</strong><br>\nBasically, it's the idiom which we should advise to people to use it instead of recursion, i.e. to replace two overloads<br>\n<code>void f() {}</code><br>\n<code>void f(H head, T... tail) { g(head); f(tail...); }</code><br>\nwith single<br>\n<code>void f(T... t) { int temp[]{(g(t), 0)...}; }</code> </br></br></br></br></br></p>\n<p>Of course we can call it \"An idiom which will be replaced by the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4295.html\" rel=\"nofollow\">Fold Expressions</a>\" but I hope there is a proper term for it.</p>\n", "Tags": "<c++><c++11><variadic-templates><idioms>", "OwnerUserId": "343443", "AnswerCount": "3"}, "28887703": {"ParentId": "28887549", "CommentCount": "5", "CreationDate": "2015-03-05T21:06:30.720", "OwnerUserId": "464581", "PostTypeId": "2", "Id": "28887703", "Score": "1", "Body": "<p>Pack expansion.</p>\n<p>C++11 \u00a75.1.2/23 in [expr.prim.lambda]:</p>\n<blockquote>\n<p id=\"so_28887549_28887703_0\"><strong>\u201d</strong> A <em>capture</em> followed by an ellipsis is a pack expansion (14.5.3). [<em>Example:</em> </p>\n<pre><code>template&lt;class... Args&gt;\nvoid f(Args... args) {\n  auto lm = [&amp;, args...] { return g(args...); };\n  lm();\n}\n</code></pre>\n<p id=\"so_28887549_28887703_1\"><em>\u2014end example</em> ]</p>\n</blockquote>\n<p>I think that covers it. The pack expansion without applying a function can be viewed as one applying an identity function.</p>\n<p>C++11 \u00a714.5.3/4 in [temp.variadic]:</p>\n<blockquote>\n<p id=\"so_28887549_28887703_2\">A <em>pack expansion</em> consists of a <em>pattern</em> and an ellipsis, the instantiation of which produces zero or more\n  instantiations of the pattern in a list (described below). [\u2026]</p>\n</blockquote>\n", "LastActivityDate": "2015-03-05T21:06:30.720"}, "28919800": {"ParentId": "28887549", "CommentCount": "0", "CreationDate": "2015-03-07T20:47:06.743", "OwnerUserId": "2488993", "PostTypeId": "2", "Id": "28919800", "Score": "0", "Body": "<p>Let's distinguish folding and mapping.\nfold turns series of input data to a single value.\nmap turns series of inputs to series of outputs.\n(Of course, mapping may be expressed as folding series of scalars to a single list).</p>\n<p>Here we map all inputs to a nullary value.\nIf we highlight side effects of g(x0), g(x1), etc - we can talk about mapping.\nIf we highlight producing void, - we can talk about pure folding. But this is meaningless, I think.</p>\n<p>std::transform is mapping. std::accumulate is folding. What is std::for_each? Mapping or folding? (BTW, it is folding, because it returns a stateful function object with accumulated state).\nAs far as the input function is unary, not binary, it is mapping (fused with folding).</p>\n<p>So. I'd like to give this idiom \"variadic for-each\".</p>\n", "LastActivityDate": "2015-03-07T20:47:06.743"}, "bq_ids": {"n4140": {"so_28887549_28887703_2": {"section_id": 121, "quality": 0.8571428571428571, "length": 12}, "so_28887549_28887703_0": {"section_id": 83, "quality": 0.5714285714285714, "length": 4}}, "n3337": {"so_28887549_28887703_2": {"section_id": 116, "quality": 0.8571428571428571, "length": 12}, "so_28887549_28887703_0": {"section_id": 5751, "quality": 0.7142857142857143, "length": 5}}, "n4659": {"so_28887549_28887703_2": {"section_id": 125, "quality": 0.8571428571428571, "length": 12}, "so_28887549_28887703_0": {"section_id": 86, "quality": 0.5714285714285714, "length": 4}}}, "28887984": {"ParentId": "28887549", "CommentCount": "1", "CreationDate": "2015-03-05T21:22:49.817", "OwnerUserId": "103167", "PostTypeId": "2", "Id": "28887984", "Score": "0", "Body": "<p>Perhaps \"function call expanded across parameter pack\"?</p>\n", "LastActivityDate": "2015-03-05T21:22:49.817"}});