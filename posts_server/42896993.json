post_cb({"bq_ids": {"n4140": {"so_42896993_42897109_1": {"length": 30, "quality": 0.8823529411764706, "section_id": 6955}}, "n3337": {"so_42896993_42897109_1": {"length": 30, "quality": 0.8823529411764706, "section_id": 6702}}, "n4659": {"so_42896993_42897109_1": {"length": 30, "quality": 0.8823529411764706, "section_id": 8452}}}, "42897109": {"Id": "42897109", "PostTypeId": "2", "Body": "<p><strong>TL;DR</strong>: It is a <del>compiler</del> Standard issue, <del>as your code compiles fine with</del> <a href=\"https://godbolt.org/g/LAJROP\" rel=\"nofollow noreferrer\">gcc 6.3.1</a> and <a href=\"https://godbolt.org/g/XBGgV7\" rel=\"nofollow noreferrer\">clang 3.9.1</a> both compile your code though.</p>\n<hr>\n<p><del>In C++11, not one of the methods is marked <code>constexpr</code>, and so you can't use it in a <code>static_assert</code>.</del></p>\n<p><del>You have to note that Visual Studio 2015 doesn't have full <code>constexpr</code> support. See <a href=\"https://msdn.microsoft.com/en-us/library/hh567368.aspx\" rel=\"nofollow noreferrer\">the C++ 14 Core Language Features\n</a> table in the article. It has only the C++11 version of <code>std::initializer_list</code> implemented, which doesn't have any <code>constexpr</code> functions.</del></p>\n<p>Small update: It looks like a bad wording in the standard can result in a non-constant <code>std::initializer_list</code>:</p>\n<blockquote>\n<p id=\"so_42896993_42897109_0\">From \u00a7 18.9.2 (emphasis mine):</p>\n<p id=\"so_42896993_42897109_1\">An object of type <code>initializer_list&lt;E&gt;</code> provides access to an array of objects of type <code>const E</code>. [Note: <strong>A pair of pointers or a pointer plus a length</strong> would be obvious representations for <code>initializer_list</code>. <code>initializer_list</code> is used to implement initializer lists as specified in 8.5.4. Copying an initializer list does not copy the underlying elements.<br>\n  \u2014end note]</br></p>\n<p id=\"so_42896993_42897109_2\">So there is no requirement for the private members of the implementation of <code>initializer_list</code> to be non-volatile literal types; however, because they mention that they believe a pair of pointers or a pointer and a length would be the \"obvious representation,\" they probably didn't consider that someone might put something non-literal in the members of <code>initializer_list</code>.</p>\n</blockquote>\n<p>(Shamelessly copied from <a href=\"https://stackoverflow.com/a/28115954/3980929\">this</a> answer.) It goes a bit more in depth, about why you couldn't use <code>std::initializer_list</code> in a <code>constexpr</code> context.</p>\n<p>This has been \"fixed\" in Visual Studio 2017.</p>\n</hr>", "LastEditorUserId": "-1", "LastActivityDate": "2017-03-21T17:44:54.507", "Score": "7", "CreationDate": "2017-03-20T06:28:54.383", "ParentId": "42896993", "CommentCount": "5", "LastEditDate": "2017-05-23T12:17:24.440", "OwnerUserId": "3980929"}, "42896993": {"ViewCount": "195", "Body": "<p>Why does Microsoft Visual C++ fails when compile the following code? :</p>\n<pre><code>template &lt;typename T&gt;\nstruct slice\n{\n    size_t length;\n    T *ptr;\n\n    constexpr slice(std::initializer_list&lt;T&gt; list)\n        : length(list.size()), ptr(list.begin()) {}\n};\n\nstatic_assert(slice&lt;const int&gt;({ 1, 2, 3 }).length == 3, \"!!\");\n</code></pre>\n<p>The error I get is:</p>\n<pre><code>1&gt;test.cpp(12): error C2131: expression did not evaluate to a constant\n1&gt;         visual studio 14.0\\vc\\include\\initializer_list(50): note: failure was caused by an undefined arithmetic operation\n</code></pre>\n<p>The implementation of <code>initializer_list</code> has all methods marked <code>constexpr</code>, it looks like it should be fine to me... Maybe it's just a compiler issue?</p>\n", "AcceptedAnswerId": "42897109", "Title": "MSVC fails to compile when using a constexpr initializer_list constructor", "CreationDate": "2017-03-20T06:18:47.567", "Id": "42896993", "CommentCount": "0", "LastEditDate": "2017-03-21T17:47:50.993", "PostTypeId": "1", "LastEditorUserId": "1593077", "LastActivityDate": "2017-03-21T17:47:50.993", "Score": "3", "OwnerUserId": "1564223", "Tags": "<c++><c++11><visual-c++><constexpr><initializer-list>", "AnswerCount": "1"}});