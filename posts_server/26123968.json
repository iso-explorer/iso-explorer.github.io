post_cb({"bq_ids": {"n4140": {"so_26123968_26124465_0": {"length": 4, "quality": 1.0, "section_id": 4503}}, "n3337": {"so_26123968_26124465_0": {"length": 4, "quality": 1.0, "section_id": 4334}}}, "46696790": {"PostTypeId": "2", "Body": "<p>Add \"public\" before enable_shared_from_this</p>\n<p>class Test : public enable_shared_from_this\n{</p>\n<p>};</p>\n", "LastActivityDate": "2017-10-11T20:14:38.337", "Id": "46696790", "CommentCount": "0", "CreationDate": "2017-10-11T20:14:38.337", "ParentId": "26123968", "Score": "0", "OwnerUserId": "7722991"}, "26124465": {"PostTypeId": "2", "Body": "<p>This might be a (minor) defect in the C++ Standard!</p>\n<p>The difference between <code>struct</code> and <code>class</code> in the example is the default accessibility of base classes:</p>\n<pre><code>struct Test : enable_shared_from_this&lt;Test&gt;\n</code></pre>\n<p>derives <em>publicly</em> from <code>enable_shared_from_this</code>;</p>\n<pre><code>class Test : enable_shared_from_this&lt;Test&gt;\n</code></pre>\n<p>derives <em>privately</em> from <code>enable_shared_from_this</code>;</p>\n<p>However, I cannot find any (normative) requirement in the Standard that requires an accessible <code>enable_shared_from_this</code> base class for <em>constructing</em> a <code>shared_ptr</code>.</p>\n<p>[util.smartptr.enab]/6 about <code>enable_shared_from_this::shared_from_this()</code> requires:</p>\n<blockquote>\n<p id=\"so_26123968_26124465_0\"><code>enable_shared_from_this&lt;T&gt;</code> shall be an accessible base class of <code>T</code>.</p>\n</blockquote>\n<p>But I do not see where the Standard mandates using that function or any other explicit requirement about the accessibility of the <code>enable_shared_from_this</code> base class.</p>\n<p>The possible implementation given in [util.smartptr.enab]/10-11 does require an accessible base class; so I think the normative parts are intended to require accessibility.</p>\n", "LastActivityDate": "2014-09-30T15:21:38.573", "Id": "26124465", "CommentCount": "0", "CreationDate": "2014-09-30T15:21:38.573", "ParentId": "26123968", "Score": "3", "OwnerUserId": "420683"}, "26123968": {"ViewCount": "292", "Body": "<p>I have a question. I was playing with <code>enable_shared_from_this</code> and noticed a strange thing. This example works fine:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;memory&gt;\nusing namespace std;\n\nstruct Test : enable_shared_from_this&lt;Test&gt;\n{\n};\n\nint main() {\n    shared_ptr&lt;Test&gt; ptr(new Test);\n    return 0;\n}\n</code></pre>\n<p>But when I change <code>struct</code> to <code>class</code> it stops compiling!</p>\n<p>The error says:</p>\n<pre>\n/usr/include/c++/4.8/bits/shared_ptr_base.h:772:58: error:\n\u2018std::enable_shared_from_this\u2019 is an inaccessible base of \u2018Test\u2019\n    __enable_shared_from_this_helper(_M_refcount, __p, __p);\n</pre>\n<p>Does anyone have a clue why it is so?</p>\n", "Title": "Class vs struct with enable_shared_from_this", "CreationDate": "2014-09-30T14:57:19.000", "LastActivityDate": "2017-10-11T20:14:38.337", "CommentCount": "2", "LastEditDate": "2014-09-30T15:02:21.333", "PostTypeId": "1", "LastEditorUserId": "420683", "Id": "26123968", "Score": "2", "OwnerUserId": "4095512", "Tags": "<c++><c++11><shared-ptr><private-inheritance>", "AnswerCount": "2"}});