post_cb({"27375280": {"ParentId": "27375117", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The array-to-pointer (and other decay) conversions are applied when it's necessary to convert a glvalue to a prvalue, as per 5/8:</p>\n<blockquote>\n<p id=\"so_27375117_27375280_0\">Whenever a glvalue expression appears as an operand of an operator that expects a prvalue for that operand,\n  the lvalue-to-rvalue (4.1), array-to-pointer (4.2), or function-to-pointer (4.3) standard conversions are applied\n  to convert the expression to a prvalue.</p>\n</blockquote>\n<p>Notice that by your own quoting of 5.3.2, the operand of <code>++</code> must be a modifiable lvalue. The array-to-pointer conversion is used to turn a glvalue into a prvalue, which is NOT what <code>++</code> needs. Therefore, nothing calls for the array-to-pointer conversion. It would actually be invalid to apply it, as the result of that conversion is a prvalue, on which <code>++</code> can not act.</p>\n", "OwnerUserId": "1782465", "LastEditorUserId": "1782465", "LastEditDate": "2014-12-09T09:37:08.420", "Id": "27375280", "Score": "1", "CreationDate": "2014-12-09T09:20:42.160", "LastActivityDate": "2014-12-09T09:37:08.420"}, "bq_ids": {"n4140": {"so_27375117_27375117_0": {"section_id": 5356, "quality": 1.0, "length": 26}, "so_27375117_27375280_0": {"section_id": 5942, "quality": 1.0, "length": 17}, "so_27375117_27375117_2": {"section_id": 6074, "quality": 0.8857142857142857, "length": 31}, "so_27375117_27375117_1": {"section_id": 11, "quality": 0.9444444444444444, "length": 17}}, "n3337": {"so_27375117_27375117_0": {"section_id": 5153, "quality": 1.0, "length": 26}, "so_27375117_27375280_0": {"section_id": 5713, "quality": 1.0, "length": 17}, "so_27375117_27375117_2": {"section_id": 5842, "quality": 0.8857142857142857, "length": 31}, "so_27375117_27375117_1": {"section_id": 8, "quality": 0.9444444444444444, "length": 17}}, "n4659": {"so_27375117_27375117_0": {"section_id": 6781, "quality": 1.0, "length": 26}, "so_27375117_27375280_0": {"section_id": 7426, "quality": 1.0, "length": 17}, "so_27375117_27375117_2": {"section_id": 7570, "quality": 0.6857142857142857, "length": 24}, "so_27375117_27375117_1": {"section_id": 12, "quality": 0.9444444444444444, "length": 17}}}, "27375117": {"CommentCount": "0", "ViewCount": "56", "CreationDate": "2014-12-09T09:12:59.863", "LastActivityDate": "2014-12-09T09:37:08.420", "Title": "Pre-incrementing a string literal", "AcceptedAnswerId": "27375280", "PostTypeId": "1", "Id": "27375117", "Score": "1", "Body": "<p>\u00a7 2.14.5/8 of the N3337 draft standard states:</p>\n<blockquote>\n<p id=\"so_27375117_27375117_0\">Ordinary string literals and UTF-8 string literals are also referred\n  to as narrow string literals. A narrow string literal has type \u201carray\n  of n const char\u201d, where n is the size of the string as defined below,\n  and has static storage duration (3.7).</p>\n</blockquote>\n<p>\u00a7 4.2</p>\n<blockquote>\n<p id=\"so_27375117_27375117_1\">An lvalue or rvalue of type \u201carray of N T\u201d or \u201carray of unknown bound\n  of T\u201d can be converted to a prvalue of type \u201cpointer to T\u201d. The result\n  is a pointer to the first element of the array.</p>\n</blockquote>\n<p>I expected <code>++\"hello world!\"</code> to decay <code>\"hello world!\"</code> to a <code>char*</code> but this does not happen. It must be forced using an extra plus, <code>+++\"hello world!\"</code>. There are some cases where the array-to-pointer conversion is not applied, such as the <code>sizeof</code> operator. </p>\n<p>\u00a7 5.3.2 simply says:</p>\n<blockquote>\n<p id=\"so_27375117_27375117_2\">The operand of prefix ++ is modified by adding 1, or set to true if it\n  is bool (this use is deprecated). The operand shall be a modifiable\n  lvalue. The type of the operand shall be an arithmetic type or a\n  pointer to a completely-defined object type. The result is the updated\n  operand; it is an lvalue, and it is a bit-field if the operand is a\n  bit-field. If x is not of type bool, the expression ++x is equivalent\n  to x+=1</p>\n</blockquote>\n<p>So why doesn't this conversion happen?</p>\n", "Tags": "<c++><language-lawyer>", "OwnerUserId": "4340665", "AnswerCount": "1"}});