post_cb({"bq_ids": {"n4140": {"so_8762459_8762706_0": {"section_id": 3324, "quality": 0.8235294117647058, "length": 14}, "so_8762459_8762706_1": {"section_id": 3327, "quality": 1.0, "length": 29}}, "n3337": {"so_8762459_8762706_0": {"section_id": 3194, "quality": 0.8235294117647058, "length": 14}, "so_8762459_8762706_1": {"section_id": 3197, "quality": 1.0, "length": 29}}, "n4659": {"so_8762459_8762706_0": {"section_id": 4090, "quality": 0.8235294117647058, "length": 14}, "so_8762459_8762706_1": {"section_id": 4093, "quality": 0.896551724137931, "length": 26}}}, "8762706": {"ParentId": "8762459", "CommentCount": "2", "Body": "<p>It's tightly coupled as per standard. It's a wrapper around a compiler-constructed array (though the standard doesn't say how precisely \u2014 GCC uses constructor with pointer and size, MSVC uses constructor with two points). And yes, it's required to be in namespace <code>std</code>, and in header <code>&lt;initializer_list&gt;</code>.</p>\n<p>You'd have to see what constructors they use in each compiler you want to support and replicate that in your version, but TBH, I fail to see the point.</p>\n<blockquote>\n<p id=\"so_8762459_8762706_0\">The template <code>std::initializer_list</code> is not prede\ufb01ned; if the header <code>&lt;initializer_list&gt;</code> is not included prior to a use of <code>std::initializer_list</code> \u2014 even an implicit use in which the type is not named (7.1.6.4) \u2014 the program is ill-formed.</p>\n<p id=\"so_8762459_8762706_1\">An object of type <code>std::initializer_list&lt;E&gt;</code> is constructed from an initializer list as if the implementation allocated an array of N elements of type E, where N is the number of elements in the initializer list.\n  Each element of that array is copy-initialized with the corresponding element of the initializer list, and the <code>std::initializer_list&lt;E&gt;</code> object is constructed to refer to that array.</p>\n</blockquote>\n", "OwnerUserId": "16102", "PostTypeId": "2", "Id": "8762706", "Score": "4", "CreationDate": "2012-01-06T18:35:35.883", "LastActivityDate": "2012-01-06T18:35:35.883"}, "8762459": {"CommentCount": "3", "AcceptedAnswerId": "8762706", "PostTypeId": "1", "LastEditorUserId": "440119", "CreationDate": "2012-01-06T18:14:13.860", "LastActivityDate": "2012-01-06T18:35:35.883", "LastEditDate": "2012-01-06T18:20:34.553", "ViewCount": "495", "FavoriteCount": "0", "Title": "How tightly coupled is the compiler's brace-initializer-list to the type `std::initializer_list`?", "Id": "8762459", "Score": "2", "Body": "<p>Can I achieve the same effects without the C++ header <code>&lt;initializer_list&gt;</code>?</p>\n<p>Does <code>class initializer_list</code> have to live in <code>namespace std</code> (does the compiler require this)?</p>\n<p>I'm fine with a solution that works on the big five (GCC, MSVC, Intel, Clang, Comeau)</p>\n", "Tags": "<c++><c++11><initializer-list>", "OwnerUserId": "256138", "AnswerCount": "1"}});