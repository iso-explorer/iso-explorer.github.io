post_cb({"37010084": {"ParentId": "37009695", "Score": "3", "CreationDate": "2016-05-03T16:59:45.410", "LastActivityDate": "2016-05-03T17:06:40.450", "LastEditDate": "2016-05-03T17:06:40.450", "OwnerUserId": "14065", "LastEditorUserId": "14065", "Body": "<h2>From <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/n4582.pdf\" rel=\"nofollow\">n4582</a></h2>\n<h3>6.6.3 The return statement [stmt.return]</h3>\n<p>Paragraph 2</p>\n<blockquote>\n<p id=\"so_37009695_37010084_0\">The expr-or-braced-init-list of a return statement is called its operand. A return statement with no operand shall be used only in a function whose return type is cv void, a constructor (12.1), or a destructor (12.4). <strong>A return statement with an operand of type void shall be used only in a function whose return type is cv void.</strong> A return statement with any other operand shall be used only in a function whose return type is not cv void; the return statement initializes the object or reference to be returned by copy-initialization (8.5) from the operand.</p>\n</blockquote>\n<p>Questions:</p>\n<blockquote>\n<p id=\"so_37009695_37010084_1\">But I don't know if it applies to returning void return values.</p>\n</blockquote>\n<p>Yes its perfectly valid to return a void expression from a function that return void. This becomes very handy in templated code so you don't have to special case void functions.</p>\n<blockquote>\n<p id=\"so_37009695_37010084_2\">What do you think, does the code comply with the standard?</p>\n</blockquote>\n<p>Yes absolutely.</p>\n<blockquote>\n<p id=\"so_37009695_37010084_3\">And would you rather return dummy integers to make the code more readable? Or would the useless return values make the code harder to read?</p>\n</blockquote>\n<p>That's totally up to you and your aesthetics. Does it make the code look more readable to you (or do you have coding guidelines that you need to follow). Personally I would not return dummy values (as the user may expect some meaning from them).</p>\n", "Id": "37010084", "PostTypeId": "2", "CommentCount": "2"}, "37009990": {"ParentId": "37009695", "Score": "0", "CreationDate": "2016-05-03T16:54:53.280", "LastActivityDate": "2016-05-03T17:28:19.933", "LastEditDate": "2016-05-03T17:28:19.933", "OwnerUserId": "6286980", "LastEditorUserId": "6286980", "Body": "<p>If a function would return no value, it would be wiser to check if the function succeeded in doing what it had to do. A Little example: </p>\n<pre><code>        bool foo()\n        {\n        if (DoSomeThing() == true)\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n</code></pre>\n<p>Then you could the return value of foo():</p>\n<pre><code>        if (!foo())\n        {\n            Console.WriteLine(\"foo returned false!\");\n        }\n</code></pre>\n", "Id": "37009990", "PostTypeId": "2", "CommentCount": "0"}, "bq_ids": {"n4659": {"so_37009695_37010084_0": {"length": 38, "section_id": 4799, "quality": 0.8260869565217391}}}, "37009842": {"ParentId": "37009695", "Score": "2", "CreationDate": "2016-05-03T16:47:35.773", "LastActivityDate": "2016-05-03T16:53:19.713", "LastEditDate": "2016-05-03T16:53:19.713", "OwnerUserId": "103167", "LastEditorUserId": "103167", "Body": "<p>This is useful for perfect forwarding.  Imagine that you have a functor of type (template-parameter), so the return type can potentially be anything.  This permission to return a value of type <code>void</code> allows you to call the functor and expose its return value to your caller, without having to write separate code for the case of no return value.</p>\n<pre><code>template&lt;typename Functor, typename... Args&gt;\nauto forward(Functor what_to_call, Args... args) -&gt; decltype(what_to_call(std::forward&lt;Args&gt;(args)...))\n{\n    return what_to_call(std::forward&lt;Args&gt;(args)...);\n}\n</code></pre>\n<p>That's already pretty messy, but if not for the ability to propagate void return types using the <code>return</code> keyword, you'd need two variations controlled by <code>enable_if</code>.</p>\n<pre><code>template&lt;typename Functor, typename... Args&gt;\nauto forward(Functor what_to_call, Args... args) -&gt; enable_if&lt;is_same_type&lt;decltype(what_to_call(std::forward&lt;Args&gt;(args)...)), void&gt;::value, void&gt;::type\n{\n    what_to_call(std::forward&lt;Args&gt;(args)...);\n    return;\n}\n\ntemplate&lt;typename Functor, typename... Args&gt;\nauto forward(Functor what_to_call, Args... args) -&gt; enable_if&lt;!is_same_type&lt;decltype(what_to_call(std::forward&lt;Args&gt;(args)...)), void&gt;::value, decltype(what_to_call(std::forward&lt;Args&gt;(args)...))&gt;::type\n{\n    return what_to_call(std::forward&lt;Args&gt;(args)...);\n}\n</code></pre>\n<p>So, <code>return function_returning_void();</code> is designed for special circumstances where it is useful.  Don't feel that you have to return a dummy object of type <code>void</code> or any other type everywhere just because it is possible.  For example, don't do <code>return void();</code> or <code>return -1;</code> when simply <code>return;</code> will do.</p>\n", "Id": "37009842", "PostTypeId": "2", "CommentCount": "0"}, "37009695": {"Tags": "<c++><coding-style><standards-compliance>", "ViewCount": "351", "LastEditDate": "2017-05-23T12:07:43.563", "CreationDate": "2016-05-03T16:38:57.870", "LastEditorUserId": "-1", "Title": "C++: return the return value of a void function from a void function", "CommentCount": "8", "AcceptedAnswerId": "37010084", "Score": "0", "OwnerUserId": "1666729", "Id": "37009695", "LastActivityDate": "2016-05-03T17:28:19.933", "Body": "<p>I have several void functions (lets call them foo and bar) that share the same void function cleanup that, well, cleans up after them if they mess up:</p>\n<pre><code>#include &lt;iostream&gt;\n\nvoid cleanup() { std::cout &lt;&lt; \"doing cleanup\" &lt;&lt; std::endl; }\n\nvoid foo(int &amp; i) {\n    if(i == 0) { return cleanup(); }\n    --i;\n    if(i == 0) { return cleanup(); }\n    ++i;\n}\n\nvoid bar(int &amp; i) {\n    if(i == 0) { return cleanup(); }\n    ++i;\n    if(i == 0) { return cleanup(); }\n    --i;\n}\n\nint main() {\n    int i = 0;\n    foo(i);\n    bar(i);\n    return 0;\n}\n</code></pre>\n<p><a href=\"http://cpp.sh/8auw\" rel=\"nofollow noreferrer\">cpp.sh</a> happily compiles and runs the code.</p>\n<p>Thanks to <a href=\"https://stackoverflow.com/questions/2249108/can-i-return-in-void-function\">the answer to this question</a> I know that I can return an object of type void. But I don't know if it applies to returning void return values.</p>\n<p>What do you think, does the code comply with the standard?</p>\n<p>And would you rather return dummy integers to make the code more readable? Or would the useless return values make the code harder to read?</p>\n<p>edit: I feel like I need to add some clarification as to why e.g. 'cleanup(); return;' is not a solution. The actual code is more complex than the example and depending on where I leave the function some other stuff happens after the cleanup() call. 'return cleanup();' is just a convenient way of not putting all the stuff behind it in conditionals in instances where I can/have to leave immediately.</p>\n", "PostTypeId": "1", "AnswerCount": "4"}, "37009895": {"ParentId": "37009695", "Score": "2", "CreationDate": "2016-05-03T16:50:16.157", "LastActivityDate": "2016-05-03T17:04:53.250", "LastEditDate": "2016-05-03T17:04:53.250", "OwnerUserId": "2079303", "LastEditorUserId": "2079303", "Body": "<blockquote>\n<p id=\"so_37009695_37009895_0\">What do you think, does the code comply with the standard?</p>\n</blockquote>\n<p>Yes, it does. In a function returning <code>void</code>, you may use an expression in a return statement if the type of the expression is <code>void</code>. Which it is, if it is a call to a function that also returns <code>void</code>.</p>\n<blockquote>\n<p id=\"so_37009695_37009895_1\">And would you rather return dummy integers to make the code more readable? Or would the useless return values make the code harder to read?</p>\n</blockquote>\n<p>I don't think dummy integers would make the code more readable. Programmers expect return values to be meaningful.</p>\n<p>What I think would be more readable, is to split the function call and the return to separate statements:</p>\n<pre><code>cleanup();\nreturn;\n</code></pre>\n<p>Although I admit, that's entirely a matter of opinion.</p>\n", "Id": "37009895", "PostTypeId": "2", "CommentCount": "2"}});