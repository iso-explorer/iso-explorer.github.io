post_cb({"bq_ids": {"n4140": {"so_20119810_20121635_0": {"length": 17, "quality": 0.8947368421052632, "section_id": 6353}}, "n3337": {"so_20119810_20121635_0": {"length": 17, "quality": 0.8947368421052632, "section_id": 6110}}, "n4659": {"so_20119810_20121635_0": {"length": 17, "quality": 0.8947368421052632, "section_id": 7862}}}, "20121635": {"Id": "20121635", "PostTypeId": "2", "Body": "<p>As far as I understand the C++11 spec, all standard library functions have to perform all their operations sequentially, if their effects are visible to the user. In particular, all \"mutating sequence operations\" have to be perfomed sequentially.</p>\n<p>The relevant part of the standard is \u00a717.6.5.9/8:</p>\n<blockquote>\n<p id=\"so_20119810_20121635_0\">Unless otherwise specified, C++ standard library functions shall perform all operations solely within the current thread if those operations have effects that are visible (1.10) to users.</p>\n</blockquote>\n", "LastActivityDate": "2013-11-21T12:57:02.560", "CommentCount": "1", "CreationDate": "2013-11-21T12:57:02.560", "ParentId": "20119810", "Score": "3", "OwnerUserId": "1770418"}, "20119810": {"ViewCount": "336", "Body": "<p>Going through the standard documentation for <code>std::transform</code>, I noticed that until C++11 the functor argument was required not to have side effects, while from C++11 onwards the requirement has been made less restrictive - \"op and binary_op shall not invalidate iterators or subranges, or modify elements in the ranges\". See</p>\n<p><a href=\"http://en.cppreference.com/w/cpp/algorithm/transform\" rel=\"noreferrer\">http://en.cppreference.com/w/cpp/algorithm/transform</a></p>\n<p>and section 25.3.4 of the standard. The webpage on cppreference.com mentions as well that \"The intent of these requirements is to allow parallel or out-of-order implementations of <code>std::transform</code>\".</p>\n<p>I do not understand then if this snippet of code is legal or not in C++11:</p>\n<pre><code>std::vector&lt;int&gt; v(/* fill it with something */), v_transformed;\nint foo = 0;\nstd::transform(v.begin(),v.end(),std::back_inserter(v_transformed),[&amp;foo](const int &amp;n) -&gt; int {\n    foo += 1;\n    return n*2;\n});\n</code></pre>\n<p>Clearly, if <code>std::transform</code> is parallelised behind the scenes, we will have multiple concurrent calls to <code>foo += 1</code>, which is going to be UB. But the functor itself does not seem to violate the requirements outlined in the standard.</p>\n<p>This question can be asked for other standard algorithms (except I think <code>std::for_each</code>, which explicitly states that the iteration is to be performed in-order).</p>\n<p>Did I misunderstand something?</p>\n", "AcceptedAnswerId": "20121635", "Title": "Parallel implementations of std algorithms and side effects", "CreationDate": "2013-11-21T11:31:41.680", "Id": "20119810", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2013-11-21T14:05:26.020", "Score": "8", "OwnerUserId": "453925", "Tags": "<c++><algorithm><c++11>", "AnswerCount": "3"}, "20120204": {"Id": "20120204", "PostTypeId": "2", "Body": "<p>So C++11 now allows <code>std::transform</code> to be parallelised, but that's not a guarantee that your own code will be made parallelisation-safe. Now, yes, I suppose you have to protect your data variables. I can imagine a lot of MT bugs arising from this, if implementations ever do actually paralellise <code>std::transform</code>.</p>\n", "LastActivityDate": "2013-11-21T11:49:22.497", "CommentCount": "0", "CreationDate": "2013-11-21T11:49:22.497", "ParentId": "20119810", "Score": "0", "OwnerUserId": "560648"}, "20120136": {"Id": "20120136", "PostTypeId": "2", "Body": "<p>The way the algorithms are currently defined they have to be executed sequentially unless the implementation can prove that executing it concurrently doesn't change the semantics. I could imagine a future addition for algorithms which are explicitly allowed to be executed concurrently but they would be different algorithms.</p>\n", "LastEditorUserId": "9990", "LastActivityDate": "2013-11-21T14:05:26.020", "Score": "3", "CreationDate": "2013-11-21T11:46:24.857", "ParentId": "20119810", "CommentCount": "2", "OwnerUserId": "1120273", "LastEditDate": "2013-11-21T14:05:26.020"}});