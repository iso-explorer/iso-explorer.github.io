post_cb({"10212273": {"ParentId": "10212202", "PostTypeId": "2", "CommentCount": "0", "Body": "<p><code>char*</code> and <code>const char*</code> are scalar types, whereas <code>char[n]</code> and <code>const char[n]</code> are not.</p>\n<blockquote>\n<p id=\"so_10212202_10212273_0\">Arithmetic types, enumeration types, pointer types, pointer to member types, <code>std::nullptr_t</code>, and cv-qualified versions of these types are collectively called <em>scalar types</em>. (3.9 Types [basic.types] \u00a79)</p>\n</blockquote>\n", "OwnerUserId": "252000", "LastEditorUserId": "252000", "LastEditDate": "2012-04-18T15:53:21.177", "Id": "10212273", "Score": "5", "CreationDate": "2012-04-18T15:05:20.730", "LastActivityDate": "2012-04-18T15:53:21.177"}, "10212202": {"CommentCount": "1", "ViewCount": "1773", "CreationDate": "2012-04-18T15:01:55.207", "LastActivityDate": "2012-04-18T15:53:21.177", "Title": "Is the string type a scalar, and if so why?", "AcceptedAnswerId": "10212273", "PostTypeId": "1", "Id": "10212202", "Score": "2", "Body": "<p>A few websites claim that the string type is a scalar. As I understand it, scalars are single-value types, as opposed to array types. But isn't a string essentially an array of chars? So why would it be a scalar?</p>\n<p>EDIT: If the answer/explanation differs from C to C++, I'd like explanations to include both languages. I'm adding the C++ tag to this question.</p>\n", "Tags": "<c++><c><string><scalar>", "OwnerUserId": "860618", "AnswerCount": "4"}, "10212398": {"ParentId": "10212202", "CommentCount": "1", "Body": "<p>Generally, all basic primitive data types are considered scalar.</p>\n<p>However, because C++ has a STL which is part of the language, you can consider a string (NOT a char array) to be a scalar type.</p>\n<p>in C, there's no such string primitive (because the definition of a string in C is in essence a array of scalar char types) so it all depends how you're looking at it.</p>\n", "OwnerUserId": "310908", "PostTypeId": "2", "Id": "10212398", "Score": "0", "CreationDate": "2012-04-18T15:12:46.500", "LastActivityDate": "2012-04-18T15:12:46.500"}, "10212712": {"ParentId": "10212202", "CommentCount": "0", "Body": "<p>The distinction between scalar and aggregate types is fuzzy.  A 32-bit integer is also a  container of 32 bits. Even though a string is technically an aggregate of characters, we often manipulate them as we would manipulate scalars.  We treat them as immutable, compare them, pass them as arguments, etc.  In C the aggregate nature of strings is more apparent, but many other languages including C++ make them feel like scalars.</p>\n<p>Other examples of the fuzziness are complex numbers and 3D vectors.  They are really made up of several <code>doubles</code>, but numerical programs still allocate them on the stack, pass them by value, overload scalar operators on them, and so on.</p>\n", "OwnerUserId": "805659", "PostTypeId": "2", "Id": "10212712", "Score": "3", "CreationDate": "2012-04-18T15:27:19.160", "LastActivityDate": "2012-04-18T15:27:19.160"}, "bq_ids": {"n4140": {"so_10212202_10212273_0": {"section_id": 7207, "quality": 0.8947368421052632, "length": 17}}, "n3337": {"so_10212202_10212273_0": {"section_id": 6951, "quality": 0.8421052631578947, "length": 16}}, "n4659": {"so_10212202_10212273_0": {"section_id": 8716, "quality": 0.8947368421052632, "length": 17}}}, "10212406": {"ParentId": "10212202", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>In C a string is a data format and not a type. A C string is of type array <code>N+1</code> of  <code>char</code> where <code>N</code> is the length of the string. Array types are not a part of the scalar types but of the aggregate types.</p>\n<p>C++ also has a <code>string</code> type which is of a class type but which is not part of the scalar types.</p>\n", "OwnerUserId": "1119701", "LastEditorUserId": "1119701", "LastEditDate": "2012-04-18T15:19:47.130", "Id": "10212406", "Score": "0", "CreationDate": "2012-04-18T15:13:11.043", "LastActivityDate": "2012-04-18T15:19:47.130"}});