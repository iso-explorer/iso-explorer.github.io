post_cb({"21841041": {"ViewCount": "325", "Body": "<p>Somewhat related to <a href=\"https://stackoverflow.com/questions/7245235/syntax-of-c-templates-with-function-type-parameters\">Syntax of C++ templates with function type parameters</a> but couldn't get rid of all my doubts there.</p>\n<p>What is, if any, the difference between</p>\n<pre><code>template &lt;void F(int)&gt; \nvoid fun1 (int a) {F(a);}\n</code></pre>\n<p>and</p>\n<pre><code>template &lt;void (*F)(int)&gt; \nvoid fun2 (int a) {F(a);}\n</code></pre>\n<p>?</p>\n<p>I tried instantiating both with something like</p>\n<pre><code>void called (int arg)\n{\n ...\n}\n\nint main()\n{\n   fun1(10);\n   fun2(20);\n   return 0;\n}\n</code></pre>\n<p>And looking at the generated assembly code from both clang 3.4 and gcc-4.8 (-O0 for both) I couldn't see any difference.</p>\n<p>I know that the name of a function decays to a pointer to its type when passed as an argument, but couldn't find a clear explanation of what happens when it is used during a template instantiation as above.\nI'd say the \"F\" in the first template is the type of \"something\" that can be called with an argument of int and returns nothing, while \"F\" in the second template is a pointer to such a \"something\", and that in both implementations F can be used in the same way as it is the case when using a function name both directly and through a function pointer.\nI think this is strictly related to how function names decay into pointers, but I'm a bit confused as to what part of the standard formalizes this. </p>\n", "AcceptedAnswerId": "21841113", "Title": "Difference in using function type vs function pointer as C++ template function parameter?", "CreationDate": "2014-02-17T23:02:10.403", "Id": "21841041", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2017-05-23T12:23:59.453", "LastEditorUserId": "-1", "LastActivityDate": "2014-02-17T23:07:38.777", "Score": "3", "OwnerUserId": "41789", "Tags": "<c++><templates><function-pointers>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_21841041_21841113_0": {"length": 13, "quality": 1.0, "section_id": 61}}, "n3337": {"so_21841041_21841113_0": {"length": 13, "quality": 1.0, "section_id": 56}}, "n4659": {"so_21841041_21841113_0": {"length": 8, "quality": 0.6153846153846154, "section_id": 63}}}, "21841113": {"Id": "21841113", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_21841041_21841113_0\">A non-type <em>template-parameter</em> of type \u201carray of <code>T</code>\u201d or \u201cfunction returning <code>T</code>\u201d is adjusted to be of type\n  \u201cpointer to <code>T</code>\u201d or \u201cpointer to function returning <code>T</code>\u201d, respectively.</p>\n</blockquote>\n<p>[C++ 11 standard, section 14.1 [temp.param], paragraph 8]</p>\n", "LastActivityDate": "2014-02-17T23:07:38.777", "CommentCount": "1", "CreationDate": "2014-02-17T23:07:38.777", "ParentId": "21841041", "Score": "3", "OwnerUserId": "481267"}});