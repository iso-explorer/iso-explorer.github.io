post_cb({"41883474": {"ParentId": "41883379", "CommentCount": "3", "CreationDate": "2017-01-26T21:41:02.277", "OwnerUserId": "187690", "PostTypeId": "2", "Id": "41883474", "Score": "8", "Body": "<p>There's no meaningful reason for that. Moreover such explicit repetition of  <code>const</code> qualifiers is illegal in C++. The code is ill-formed.</p>\n<blockquote>\n<p id=\"so_41883379_41883474_0\"><strong>7.1.6.1 The cv-qualifiers [dcl.type.cv]</strong></p>\n<p id=\"so_41883379_41883474_1\"><strong>1</strong> There are two cv-qualifiers, const and volatile. Each cv-qualifier shall appear at most once in a cvqualifier-seq.</p>\n</blockquote>\n<p>It is possible to introduce redundant <code>const</code>s in a C++ declaration, but that would require \"hiding\" previous <code>const</code>s inside a typedef-name. In that form the declatration would be legal and the redundant qualifiers would be ignored.</p>\n", "LastActivityDate": "2017-01-26T21:41:02.277"}, "41883379": {"CommentCount": "9", "ViewCount": "117", "CreationDate": "2017-01-26T21:33:03.773", "LastActivityDate": "2017-01-26T21:41:14.093", "Title": "\"const T const\" in parameter declaration", "PostTypeId": "1", "Id": "41883379", "Score": "2", "Body": "<p>I came across this code the other day:</p>\n<pre><code>template&lt; class T &gt; \nT findMax(const T const * data, \n        const size_t const numItems) { \n// Obtain the minimum value for type T \nT largest = \n    std::numeric_limits&lt; T &gt;::min(); \nfor(unsigned int i=0; i&lt;numItems; ++i) \nif (data[i] &gt; largest) \nlargest = data[i]; \nreturn largest; \n}\n</code></pre>\n<p>Why do the parameters each contain two <code>const</code>s?</p>\n", "Tags": "<c++>", "OwnerUserId": "7109678", "AnswerCount": "2"}, "41883478": {"ParentId": "41883379", "CommentCount": "0", "CreationDate": "2017-01-26T21:41:14.093", "OwnerUserId": "1816262", "PostTypeId": "2", "Id": "41883478", "Score": "2", "Body": "<p>One of the <code>const</code> modifiers is redundant; having two here is doing nothing more than one on its own (I'd be surprised if this didn't emit a warning at least).</p>\n<p>What the author probably meant was <code>const T* const</code>, which is a constant pointer to a constant instance of <code>T</code>.</p>\n", "LastActivityDate": "2017-01-26T21:41:14.093"}, "bq_ids": {"n4140": {"so_41883379_41883474_1": {"section_id": 5430, "quality": 1.0, "length": 11}}, "n3337": {"so_41883379_41883474_1": {"section_id": 5225, "quality": 0.5454545454545454, "length": 6}}, "n4659": {"so_41883379_41883474_1": {"section_id": 6858, "quality": 1.0, "length": 11}}}});