post_cb({"36680972": {"ParentId": "36680781", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>It seems that the problem is related to the fact that you have no virtual destructor.  This is why the processing in g() is performed:  the crash happens when unique_ptr to destroy the object. </p>\n<p>Like this it should work: </p>\n<pre><code>struct Interface {\n    virtual void f () = 0;\n    virtual ~Interface() {};\n};\n</code></pre>\n<p><a href=\"http://ideone.com/djvWKO\" rel=\"nofollow\">Online demo</a></p>\n<p><strong><em>Standard reference:</em></strong> </p>\n<blockquote>\n<p id=\"so_36680781_36680972_0\"><strong>5.3.5/3:</strong> In the first alternative (delete object), if the static type of the object to be deleted is different from its dynamic type,\n  the static type shall be a base class of the dynamic type of the\n  object to be deleted <strong>and the static type shall have a virtual\n  destructor</strong> or the behavior is undefined.</p>\n</blockquote>\n", "OwnerUserId": "3723423", "LastEditorUserId": "3723423", "LastEditDate": "2016-04-17T19:48:28.433", "Id": "36680972", "Score": "4", "CreationDate": "2016-04-17T19:09:08.947", "LastActivityDate": "2016-04-17T19:48:28.433"}, "36680781": {"CommentCount": "9", "AcceptedAnswerId": "36680972", "CreationDate": "2016-04-17T18:52:05.007", "LastActivityDate": "2016-04-17T19:48:28.433", "PostTypeId": "1", "ViewCount": "57", "FavoriteCount": "0", "Title": "c++: polymorphism + multiple inheritance order. Is the inheritace order significant?", "Id": "36680781", "Score": "2", "Body": "<p>I'm trying to solve a little mystery about the code similar to the following:</p>\n<pre><code>struct Interface {\n    virtual void f () = 0;\n}\n\nstruct SomeClass {\n    virtual void additionalBehaviour () = 0;\n    void g () {\n        additionalBehavoiur ();\n        /*Some stuff with printing into a ostringstream*/\n    }\n}\n\nstruct Derived : public SomeClass, public Interface {\n    void additionalBehaviour () { /*Some printing to oss*/ }\n    void f () { g (); }\n}\n\nint main () {\n    unique_ptr&lt;Interface&gt; ifc (new Derived ());\n    ifc-&gt;f ();\n    cout &lt;&lt; \"HI!\" &lt;&lt; endl;\n    return 0;\n}\n</code></pre>\n<p>It works, but quits randomly causing \u04410000005 0a9e appcrash on Windows having done the things listed in <code>g ()</code> partly <em>and</em> having printed \"HI!\".<br>\nSo, at some point it stops printing into the file, finishes everything else and, finally, crashes. Some point means an indeed <em>some</em> point: for example, <code>file &lt;&lt; \"phrase\"</code> may produce <code>phra</code> and nothing after that.<br>\nAlso, it executes correctly and does not crash when executed in GDB. And there are no memory leaks according to Dr. Memory.</br></br></p>\n<p>The solution:</p>\n<pre><code>struct Derived : public Interface, public SomeClass {\n    void f () { g (); }\n}\n</code></pre>\n<p><strong>The question:</strong> why?!<br>\nI suppose it is something about the relative field positions in classes, but what about no crashing in GDB and no signs of memory problems then?</br></p>\n", "Tags": "<c++><polymorphism><multiple-inheritance>", "OwnerUserId": "4769035", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_36680781_36680972_0": {"section_id": 6107, "quality": 0.9285714285714286, "length": 26}}, "n3337": {"so_36680781_36680972_0": {"section_id": 5873, "quality": 0.9285714285714286, "length": 26}}, "n4659": {"so_36680781_36680972_0": {"section_id": 7604, "quality": 0.9285714285714286, "length": 26}}}});