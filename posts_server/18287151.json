post_cb({"18287422": {"ParentId": "18287151", "LastEditDate": "2013-08-17T10:35:40.397", "CommentCount": "0", "CreationDate": "2013-08-17T09:51:04.733", "OwnerUserId": "1394283", "LastEditorUserId": "1394283", "PostTypeId": "2", "Id": "18287422", "Score": "17", "Body": "<p><strong>There is absolutely no difference between both.</strong></p>\n<p>If you take a look at the standard :</p>\n<blockquote>\n<p id=\"so_18287151_18287422_0\"><strong>7.1.3 The typedef speci\ufb01er [dcl.typedef ]</strong></p>\n<p id=\"so_18287151_18287422_1\">A <em>typedef-name</em> can also be introduced by an <em>alias-declaration</em>. The <em>identifier</em> following the <code>using</code> keyword becomes a <em>typedef-name</em>. <strong>It has the same semantics as if it were introduced by the <code>typedef</code> specifier.</strong> In particular, it does not define a new type and it shall not appear in the <em>type-id</em>.</p>\n<p id=\"so_18287151_18287422_2\"><strong>7.3.3 The using declaration [namespace.udecl]</strong></p>\n<p id=\"so_18287151_18287422_3\">If a <em>using-declaration</em> uses the keyword <em>typename</em> and specifies a dependent name (14.6.2), the name introduced by the <em>using-declaration</em> is treated as a <em>typedef-name</em>.</p>\n</blockquote>\n<hr>\n<p>However from this page : <a href=\"http://en.cppreference.com/w/cpp/language/type_alias\">http://en.cppreference.com/w/cpp/language/type_alias</a></p>\n<p>It is said :</p>\n<blockquote>\n<p id=\"so_18287151_18287422_4\">Type aliases are similar to <a href=\"http://en.cppreference.com/w/cpp/language/typedef\">typedefs</a>, <strong>however, have the advantage of working with templates.</strong></p>\n</blockquote>\n<p>It is seems that this :</p>\n<pre><code>// template type alias\ntemplate&lt;class T&gt; using ptr = T*;\n// the name 'ptr&lt;T&gt;' is now an alias for pointer to T\nptr&lt;int&gt; x;\n</code></pre>\n<p>Is only possible with the <code>using</code> directive.</p>\n<hr>\n<p>And do not forget that this is a C++11 feature. Some compilers do not support it yet. </p>\n</hr></hr>", "LastActivityDate": "2013-08-17T10:35:40.397"}, "18287151": {"CreationDate": "2013-08-17T09:17:38.830", "CommentCount": "0", "ViewCount": "9624", "PostTypeId": "1", "ClosedDate": "2013-08-17T10:30:24.560", "LastEditorUserId": "1938163", "LastActivityDate": "2015-05-14T20:14:37.713", "LastEditDate": "2015-05-14T20:14:37.713", "AcceptedAnswerId": "18287422", "FavoriteCount": "3", "Title": "Difference between typedef and C++11 type alias", "Id": "18287151", "Score": "10", "Body": "<p>I'm reading template aliases here: <a href=\"http://en.cppreference.com/w/cpp/language/type_alias\" rel=\"nofollow\">http://en.cppreference.com/w/cpp/language/type_alias</a></p>\n<p>And I'm wondering, even if it's written on the very first line of the page I linked, what's the difference between a typedef and a type alias (<code>using mytype = T;</code>)</p>\n<p>Aren't they interchangeable?</p>\n", "Tags": "<c++11>", "OwnerUserId": "1938163", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_18287151_18287422_3": {"section_id": 5508, "quality": 0.9230769230769231, "length": 12}, "so_18287151_18287422_1": {"section_id": 5408, "quality": 0.96, "length": 24}}, "n3337": {"so_18287151_18287422_3": {"section_id": 5294, "quality": 0.9230769230769231, "length": 12}, "so_18287151_18287422_1": {"section_id": 5203, "quality": 0.96, "length": 24}}, "n4659": {"so_18287151_18287422_1": {"section_id": 6830, "quality": 0.88, "length": 22}, "so_18287151_18287422_3": {"section_id": 6943, "quality": 0.8461538461538461, "length": 11}}}, "18287561": {"ParentId": "18287151", "CommentCount": "0", "Body": "<p>There is no difference.</p>\n<p><strong>typedef gives an alias name for the type.</strong></p>\n", "OwnerUserId": "1501794", "PostTypeId": "2", "Id": "18287561", "Score": "2", "CreationDate": "2013-08-17T10:06:32.723", "LastActivityDate": "2013-08-17T10:06:32.723"}});