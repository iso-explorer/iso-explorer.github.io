post_cb({"17662413": {"CommentCount": "0", "AcceptedAnswerId": "17662966", "CreationDate": "2013-07-15T19:36:54.570", "LastActivityDate": "2013-07-15T20:09:01.823", "PostTypeId": "1", "ViewCount": "52", "FavoriteCount": "1", "Title": "why multiple input iterator will cause unexpected result?", "Id": "17662413", "Score": "1", "Body": "<p>Here is the sample code and the result compile using gcc4.8.1 in linux:</p>\n<pre><code>//content of test.txt\n1 2 3 4 5 \n\nint main()\n{\n    fstream fs (\"test.txt\", std::fstream::in );\n    istream_iterator&lt;string&gt; is1(fs),eof1;\n    istream_iterator&lt;string&gt; is2(fs),eof2;\n\n    while(is1!=eof1){\n        cout&lt;&lt;\"is1:\"&lt;&lt;*is1++&lt;&lt;endl;\n    }\n    while(is2!=eof2){\n        cout&lt;&lt;\"is2:\"&lt;&lt;*is2++&lt;&lt;endl;\n    }\n\n\n    return 0;\n}\n\n\n//result unexpected    \n$./m \nis1:1\nis1:3\nis1:4\nis1:5\nis2:2\n</code></pre>\n<p>From the result, we can see when using multiple input iterator , it will give unexpected result. \nCould some one give me a hint why this would happen?</p>\n", "Tags": "<c++><stl>", "OwnerUserId": "440403", "AnswerCount": "1"}, "17662966": {"ParentId": "17662413", "CommentCount": "0", "Body": "<p>This is answered in 24.6.1/1:</p>\n<blockquote>\n<p id=\"so_17662413_17662966_0\">The class template istream_iterator is an input iterator (24.2.3) that\n  reads (using operator&gt;&gt;) successive elements from the input stream for\n  which it was constructed. After it is constructed, and every time ++\n  is used, the iterator reads and stores a value of T.</p>\n</blockquote>\n<p>So when you create <code>is1</code> it reads <code>1</code>. When you create <code>is2</code> it reads <code>2</code> and then you iterate over the rest of the file with <code>is1</code>. Finally you print the single already-extracted value from <code>is2</code> and then end its iteration.</p>\n", "OwnerUserId": "251738", "PostTypeId": "2", "Id": "17662966", "Score": "3", "CreationDate": "2013-07-15T20:09:01.823", "LastActivityDate": "2013-07-15T20:09:01.823"}, "bq_ids": {"n4140": {"so_17662413_17662966_0": {"section_id": 5694, "quality": 0.9166666666666666, "length": 22}}, "n3337": {"so_17662413_17662966_0": {"section_id": 5477, "quality": 0.9166666666666666, "length": 22}}, "n4659": {"so_17662413_17662966_0": {"section_id": 7139, "quality": 0.9166666666666666, "length": 22}}}});