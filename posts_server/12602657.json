post_cb({"12602657": {"CommentCount": "2", "ViewCount": "189", "PostTypeId": "1", "LastEditorUserId": "567292", "CreationDate": "2012-09-26T13:17:36.223", "LastActivityDate": "2012-09-26T13:43:36.137", "Title": "istream_iterator cin initialization waits for input", "AcceptedAnswerId": "12602770", "LastEditDate": "2012-09-26T13:43:36.137", "Id": "12602657", "Score": "4", "Body": "<p>I've got this code snippet. The istream_iterator object is only defined and not used, so I expect that it won't do anything and application finish immediately. But when I run application, it will not finish before I provide some input. Why?</p>\n<p>I'm compiling it on ArchLinux with: gcc 4.7.1, with command: g++ -std=c++11 filename.cpp</p>\n<pre><code>#include &lt;iterator&gt;\n#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main(int argc, char *argv[])\n{\n    istream_iterator&lt;char&gt; input(cin);\n\n    return 0;\n}\n</code></pre>\n", "Tags": "<c++><istream-iterator>", "OwnerUserId": "255389", "AnswerCount": "3"}, "12602692": {"ParentId": "12602657", "CommentCount": "7", "Body": "<p>Presumably, the istream iterator will immediately call <code>cin &gt;&gt; x</code> to extract the first token and determine whether it should become equal to the end iterator. The extraction operation blocks until either the stream is closed, a token is extracted or a parsing failure is encountered.</p>\n<p>Note that your question title is wrong: You have not only <em>declared</em> <code>input</code>, but you have also <em>defined</em> it. If your code were to reflect the question accurately, it would say</p>\n<pre><code>extern istream_iterator&lt;char&gt; input;  // declaration only!\n</code></pre>\n<p>and there would be no blockage.</p>\n", "OwnerUserId": "596781", "PostTypeId": "2", "Id": "12602692", "Score": "3", "CreationDate": "2012-09-26T13:19:47.113", "LastActivityDate": "2012-09-26T13:19:47.113"}, "12602770": {"ParentId": "12602657", "LastEditDate": "2012-09-26T13:32:12.263", "CommentCount": "0", "CreationDate": "2012-09-26T13:23:29.533", "OwnerUserId": "567292", "LastEditorUserId": "567292", "PostTypeId": "2", "Id": "12602770", "Score": "4", "Body": "<p>Per the standard,</p>\n<blockquote>\n<h3>24.6.1.1 istream_iterator constructors and destructor [istream.iterator.cons]</h3>\n<pre><code>istream_iterator(istream_type&amp; s);\n</code></pre>\n<p id=\"so_12602657_12602770_0\">3 - <em>Effects</em>: Initializes <em>in-stream</em> with <code>&amp;s</code>. <em>value</em> may be initialized during construction or the first time it is referenced.</p>\n</blockquote>\n<p>So it is unspecified whether this program will wait for input.</p>\n<p>However, it's difficult to see how <code>istream_iterator</code> could be implemented otherwise; per 24.6.1:1, <em>after it is constructed [...] the iterator reads and stores a value of <code>T</code></em>, so if the read does not occur on construction then it would need to occur on <code>operator *() const</code> and on the free <code>operator==(const istream_iterator&lt;T&gt; &amp;, const istream_iterator&lt;T&gt; &amp;)</code>, so all of the internal state of the iterator would have to be <code>mutable</code>.</p>\n", "LastActivityDate": "2012-09-26T13:32:12.263"}, "bq_ids": {"n4140": {"so_12602657_12602770_0": {"section_id": 5698, "quality": 0.7272727272727273, "length": 8}}, "n3337": {"so_12602657_12602770_0": {"section_id": 5481, "quality": 0.7272727272727273, "length": 8}}, "n4659": {"so_12602657_12602770_0": {"section_id": 7143, "quality": 0.8181818181818182, "length": 9}}}, "12602747": {"ParentId": "12602657", "CommentCount": "0", "Body": "<p>From a stream, you can only \"get\" every value once, after that it's gone. However, a common need for iterators is to access a value multiple times without incrementing the iterator. As such, the <code>istream_iterator</code> will extract the first value on construction and copy it into an internal value which is then returned when dereferencing the iterator.\nThis also allows the iterator to determine whether it's at the end of input and become an end iterator. On incrementing, the next value is then read.</p>\n", "OwnerUserId": "500104", "PostTypeId": "2", "Id": "12602747", "Score": "2", "CreationDate": "2012-09-26T13:22:12.633", "LastActivityDate": "2012-09-26T13:22:12.633"}});