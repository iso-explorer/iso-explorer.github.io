post_cb({"6805571": {"Id": "6805571", "PostTypeId": "2", "Body": "<p>The first case is allowed by standard; I remember that was asked by @Johannes and answered by @Nawaz. (Edit: Here is the related <a href=\"https://stackoverflow.com/questions/5637679/default-argument-in-the-middle-of-parameter-list\">question</a>).</p>\n<p>Reason for not allowing the <code>template</code> version is because <code>template</code> functions are called only when instantiated explicitly. In your case, compiler looks at the declaration as,</p>\n<pre><code>test&lt;int&gt; t;\n</code></pre>\n<p>--&gt;<strong>Edit</strong>: It might differ from compiler to compiler. In gcc <a href=\"http://www.ideone.com/4ATLH\" rel=\"nofollow noreferrer\">it works fine</a>.&lt;--</p>\n<p>Why it may not work in some compiler <strong>might be</strong> Since you are not explicitly instantiating as <code>t(N)</code>, compiler will not be able to resolve <code>test&lt;T&gt;::test(int n = 666)</code>. Thus it looks for default constructor with no argument, which is not found; thus resulting in error.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2011-07-24T07:50:16.347", "Score": "1", "CreationDate": "2011-07-24T07:44:42.507", "ParentId": "6805507", "CommentCount": "1", "LastEditDate": "2017-05-23T11:55:33.793", "OwnerUserId": "514235"}, "bq_ids": {"n4140": {"so_6805507_6805528_0": {"length": 11, "quality": 0.9166666666666666, "section_id": 3255}}, "n3337": {"so_6805507_6805528_0": {"length": 11, "quality": 0.9166666666666666, "section_id": 3127}}, "n4659": {"so_6805507_6805528_0": {"length": 11, "quality": 0.9166666666666666, "section_id": 4013}}}, "6805528": {"Id": "6805528", "PostTypeId": "2", "Body": "<p>It looks like the C++ specification specifically allows the first case and disallows the second!</p>\n<p>Quote from the C++ spec (\u00a78.3.6/4):</p>\n<blockquote>\n<p id=\"so_6805507_6805528_0\">For non-template functions, default arguments can be added in later declarations of a function in the same scope.</p>\n</blockquote>\n<p>So it looks like for non-template functions, you can indeed introduce the default arguments later on.  No idea why this doesn't work for templates, though!</p>\n", "LastEditorUserId": "597607", "LastActivityDate": "2011-07-24T10:00:52.217", "Score": "4", "CreationDate": "2011-07-24T07:35:40.847", "ParentId": "6805507", "CommentCount": "1", "LastEditDate": "2011-07-24T10:00:52.217", "OwnerUserId": "501557"}, "6805507": {"ViewCount": "1096", "Body": "<p>I am aware this is bad form and that default-values should be specified in the declaration, but if you would please indulge me for a moment.. why does this compile? and what is happening exactly?</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass test\n{\npublic:\n    test(int n);\n};\n\ntest::test(int n = 666)\n{\n    cout &lt;&lt; n;\n}\n\nint main()\n{\n    test t;\n\n    cin.sync();\n    cin.ignore();\n\n    return 0;\n}\n</code></pre>\n<p><b>Output:</b> 666</p>\n<p>.. how do templates affect the same piece of code?</p>\n<pre><code>template &lt;class T&gt;\nclass test\n{\npublic:\n    test(int n);\n};\n\ntemplate &lt;class T&gt;\ntest&lt;T&gt;::test(int n = 666)\n{\n    cout &lt;&lt; n;\n}\n\nint main()\n{\n    test&lt;int&gt; t;\n\n    cin.sync();\n    cin.ignore();\n\n    return 0;\n}\n</code></pre>\n<p><b>Error:</b> no appropriate default constructor available</p>\n<p>Thank you for your time!</p>\n", "AcceptedAnswerId": "6805528", "Title": "Default constructor defined with default arguments outside the class definition, why does this work? and what happens with templates involved?", "CreationDate": "2011-07-24T07:30:19.453", "Id": "6805507", "CommentCount": "1", "PostTypeId": "1", "LastActivityDate": "2011-07-24T10:00:52.217", "Score": "5", "OwnerUserId": "859998", "Tags": "<c++><class><templates><default-value><default-constructor>", "AnswerCount": "2"}});