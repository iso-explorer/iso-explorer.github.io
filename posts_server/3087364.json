post_cb({"3087501": {"ParentId": "3087364", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>Why on earth would you use the top code instead of str.end() - 1?</p>\n<p>Edit: Or str.back(), which is far more container-generic.</p>\n", "OwnerUserId": "298661", "LastEditorUserId": "298661", "LastEditDate": "2010-06-21T19:17:10.817", "Id": "3087501", "Score": "0", "CreationDate": "2010-06-21T18:46:13.440", "LastActivityDate": "2010-06-21T19:17:10.817"}, "3087364": {"CommentCount": "1", "ViewCount": "379", "CreationDate": "2010-06-21T18:29:13.557", "LastActivityDate": "2010-06-21T19:17:10.817", "Title": "Iterating std::string elements", "AcceptedAnswerId": "3087378", "PostTypeId": "1", "Id": "3087364", "Score": "1", "Body": "<p>does it take constant time to move the iterator to elements of string in following:</p>\n<pre><code>std::string str // string of size 100 MB\nstd::string::iterator iter = str.begin();\nstd::advance(iter, str.size()-1);\n</code></pre>\n<p>would it take constant time as in searching by index?</p>\n<pre><code>char c = str[str.size()-1];\n</code></pre>\n", "Tags": "<c++><string>", "OwnerUserId": "372338", "AnswerCount": "2"}, "3087378": {"ParentId": "3087364", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Yes, that's correct.  This is guaranteed by the C++ standard (\u00a724.3, Iterator operations):</p>\n<blockquote>\n<p id=\"so_3087364_3087378_0\">Since only random access iterators\n  provide + and - operators, the library\n  provides two function templates\n  advance and distance. These function\n  templates use + and - for random\n  access iterators (and are, therefore,\n  constant time for them);</p>\n</blockquote>\n", "OwnerUserId": "47773", "LastEditorUserId": "47773", "LastEditDate": "2010-06-21T18:36:46.880", "Id": "3087378", "Score": "3", "CreationDate": "2010-06-21T18:31:10.603", "LastActivityDate": "2010-06-21T18:36:46.880"}, "bq_ids": {"n4140": {"so_3087364_3087378_0": {"section_id": 5593, "quality": 0.9583333333333334, "length": 23}}, "n3337": {"so_3087364_3087378_0": {"section_id": 5376, "quality": 0.9583333333333334, "length": 23}}, "n4659": {"so_3087364_3087378_0": {"section_id": 7037, "quality": 0.9583333333333334, "length": 23}}}});