post_cb({"25586060": {"ParentId": "25585950", "CommentCount": "3", "Body": "<p>You can't <code>reinterpret_cast</code> between two integer types, period. That's not what <code>reinterpret_cast</code> is for. If you want to cast between two integer types, use <code>static_cast</code>.</p>\n<p>If your goal is to really \"reinterpret the bit pattern\" then you'll have to cast to <em>reference</em>. That is, <code>reinterpret_cast&lt;unsigned long&amp;&gt;(x)</code> is valid if <code>x</code> is an lvalue of type <code>int</code>. But now you are getting into dangerous territory, as this is in general undefined behaviour, and will probably work on a 32-bit x86 platform but will do something bad on a 64-bit x86 platform where <code>unsigned long</code> is longer than <code>int</code>.</p>\n", "OwnerUserId": "481267", "PostTypeId": "2", "Id": "25586060", "Score": "4", "CreationDate": "2014-08-30T19:36:32.977", "LastActivityDate": "2014-08-30T19:36:32.977"}, "25586098": {"ParentId": "25585950", "CommentCount": "1", "Body": "<p>According to the C++ Standard (5.2.10 Reinterpret cast)</p>\n<blockquote>\n<p id=\"so_25585950_25586098_0\">2 The reinterpret_cast operator shall not cast away constness\n  (5.2.11). <strong>An expression of integral, enumeration, pointer, or\n  pointer-to-member type can be explicitly converted to its own type;\n  such a cast yields the value of its operand.</strong></p>\n</blockquote>\n<p>Use <code>static_cast</code> instead.</p>\n", "OwnerUserId": "2877241", "PostTypeId": "2", "Id": "25586098", "Score": "2", "CreationDate": "2014-08-30T19:40:13.697", "LastActivityDate": "2014-08-30T19:40:13.697"}, "bq_ids": {"n4140": {"so_25585950_25586098_0": {"section_id": 6041, "quality": 0.92, "length": 23}}, "n3337": {"so_25585950_25586098_0": {"section_id": 5809, "quality": 0.92, "length": 23}}, "n4659": {"so_25585950_25586098_0": {"section_id": 7540, "quality": 0.92, "length": 23}}}, "25585950": {"CommentCount": "5", "AcceptedAnswerId": "25586060", "ClosedDate": "2014-08-30T19:42:55.423", "CreationDate": "2014-08-30T19:21:21.277", "LastActivityDate": "2014-08-30T19:40:13.697", "PostTypeId": "1", "ViewCount": "310", "FavoriteCount": "1", "Title": "reinterpret_cast<unsigned long> Invalid Cast", "Id": "25585950", "Score": "0", "Body": "<p>I am working with a Hashtable in C++. The hash function:</p>\n<pre><code>// Default hash function class\ntemplate &lt;typename K&gt;\nstruct KeyHash {\n    unsigned long operator()(const K&amp; key) const {\n        return reinterpret_cast&lt;unsigned long&gt;(key) % TABLE_SIZE;\n    }\n};\n</code></pre>\n<p>Then when I declared hashtable as:</p>\n<pre><code>HashTable&lt;int, std::string&gt; hmap;\n</code></pre>\n<p>Its showing:</p>\n<blockquote>\n<p id=\"so_25585950_25585950_0\">Invalid cast from 'int' type to 'unsigned_long_int'</p>\n</blockquote>\n<p>Whats the problem with <code>reinterpret_cast&lt;unsigned long&gt;</code> here?</p>\n", "Tags": "<c++><c++11><stl>", "OwnerUserId": "1162233", "AnswerCount": "2"}});