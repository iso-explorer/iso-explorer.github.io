post_cb({"31468247": {"CommentCount": "0", "AcceptedAnswerId": "31468361", "CreationDate": "2015-07-17T04:08:39.457", "LastActivityDate": "2015-07-17T04:30:07.890", "PostTypeId": "1", "ViewCount": "301", "FavoriteCount": "1", "Title": "Should constexpr initialization happen before other initialization", "Id": "31468247", "Score": "6", "Body": "<p>I have the following piece of code, that behaves as expected on gcc and clang. However, MSVC gives me an unexpected result.</p>\n<p>Lets first look at the problematic code.</p>\n<pre><code>#include &lt;iostream&gt;\n\n// -----------------------------------------------\n\nclass Test // Dummy for MCVE\n{\npublic:\n    Test();\n    void Print();\nprivate:\n    int arr[5];\n};\n\nTest tst;\n\n// -----------------------------------------------\n\ntemplate&lt;typename T&gt;\nstruct range // some stuff not needed by example removed\n{\n    constexpr range(T n) : b(0), e(n) {}\n    constexpr range(T b, T e) : b(b), e(e) {}\n    struct iterator\n    {\n        T operator*() { return i; }\n        iterator&amp; operator++() { ++i; return *this; }\n        bool operator!=(iterator other) { return i != other.i ; }\n        T i;\n    };\n    iterator begin() const { return{ b }; }\n    iterator end() const { return{ e }; }\nprivate:\n    T b,e;\n};\n\nconstexpr range&lt;int&gt; coord(5);\n\n// -----------------------------------------------\n\nTest::Test()\n{\n    for(auto i : coord)\n        arr[i]=i;\n}\n\nvoid Test::Print()\n{\n    for(auto i : coord)\n        std::cout &lt;&lt; arr[i] &lt;&lt; std::endl;\n}\n\n// -----------------------------------------------\n\nint main()\n{\n    tst.Print();\n}\n</code></pre>\n<p><br>\nNow, on both clang and gcc this prints '0 1 2 3 4' <br>\nHowever, on MSVC this prints '0 0 0 0 0'<br>\nThe reason being that when the constructor on the global variable <code>tst</code>\nruns, 'coord' have yet not been initialized (to 0,5), but it is also not random, but rather (0,0).<br>\nTo me it would make sense that <code>constexpr</code> initialization happens before regular initialization. Is MSVC conformant in this behaviour?</br></br></br></br></p>\n<p>I should perhaps note that I'm using MSVC version 14.0.22823.1, and\nthat the expected result can be obtained by changing the order of\nthe declarations</p>\n", "Tags": "<c++>", "OwnerUserId": "3202093", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_31468247_31468361_0": {"section_id": 7151, "quality": 0.9019607843137255, "length": 46}, "so_31468247_31468361_1": {"section_id": 7151, "quality": 0.95, "length": 19}}, "n3337": {"so_31468247_31468361_0": {"section_id": 6895, "quality": 0.8431372549019608, "length": 43}}, "n4659": {"so_31468247_31468361_1": {"section_id": 8652, "quality": 0.9, "length": 18}}}, "31468361": {"ParentId": "31468247", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>For static storage duration objects initialization must happen in this order:</p>\n<ol>\n<li>Zero-initialization.</li>\n<li>Constant initialization (i.e. <code>constexpr</code>).</li>\n<li>Dynamic initialization.</li>\n</ol>\n<p>Relevant standardeese,</p>\n\nC++14 \u00a73.6.2/2:\n\n<blockquote>\n<p id=\"so_31468247_31468361_0\"><strong>\u201d</strong> Variables with static storage duration (3.7.1) or thread storage duration (3.7.2) shall be zero-initialized (8.5)\n  before any other initialization takes place. [\u2026] <em>Constant initialization</em> is performed: [\u2026]  if an object with static or thread storage duration is initialized by a constructor call, and if the\n  initialization full-expression is a constant initializer for the object; [\u2026] Together, zero-initialization and constant initialization are called <em>static initialization</em>; all other initialization is <em>dynamic initialization</em>. Static initialization shall be performed before any dynamic initialization takes place.</p>\n</blockquote>\n<p>The same paragraph defines (breaking the flow of text, so I removed it above)</p>\n<blockquote>\n<p id=\"so_31468247_31468361_1\"><strong>\u201d</strong>  A <em>constant initializer</em> for an object <code>o</code> is an expression that is a constant expression, except that it may also invoke <code>constexpr</code> constructors for <code>o</code> and its subobjects even if those objects are of non-literal class types.</p>\n</blockquote>\n<hr>\n<p>In the reported example, which I've verified with Visual C++ 2015, the dynamic initialization of the static storage duration object <code>tst</code> takes place before the constant initialization of the static storage duration object <code>coord</code>, and that's a compiler bug.</p>\n</hr>", "OwnerUserId": "464581", "LastEditorUserId": "464581", "LastEditDate": "2015-07-17T04:30:07.890", "Id": "31468361", "Score": "5", "CreationDate": "2015-07-17T04:24:06.267", "LastActivityDate": "2015-07-17T04:30:07.890"}});