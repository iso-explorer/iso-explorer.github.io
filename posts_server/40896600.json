post_cb({"40897181": {"ParentId": "40896600", "CommentCount": "2", "Body": "<p>Quoting from the Standard section 14.8.1.6:</p>\n<blockquote>\n<p id=\"so_40896600_40897181_0\">Implicit conversions (Clause 4) will be performed on a function\n  argument to convert it to the type of the corresponding function\n  parameter if the parameter type contains no template-parameters that\n  participate in template argument deduction.</p>\n</blockquote>\n<p>This does not work in your case because the template parameters have not been provided explicitly. The compiler needs to do a deduction. Thus as per the above, it will not do the implicit conversion from functor to <code>std::function</code>.</p>\n<p>So, you can do  (As mentioned by @flatmouse in the comment):</p>\n<p><code>foo&lt;int&gt;(plus&lt;int&gt;(), 13, 42);</code></p>\n<p>This works because there is no template argument deduction that needs to be performed since all the template parameters are explicitly specified. And as per the above quote from standard, the implicit conversion should work for this.</p>\n", "OwnerUserId": "434233", "PostTypeId": "2", "Id": "40897181", "Score": "2", "CreationDate": "2016-11-30T20:04:43.443", "LastActivityDate": "2016-11-30T20:04:43.443"}, "40896600": {"CommentCount": "12", "ViewCount": "42", "CreationDate": "2016-11-30T19:27:33.083", "LastActivityDate": "2016-11-30T20:04:43.443", "Title": "Converting a Functor to an Object of Type function", "AcceptedAnswerId": "40897181", "PostTypeId": "1", "Id": "40896600", "Score": "3", "Body": "<p>Say I have this function:</p>\n<pre><code>template &lt;typename T&gt;\nvoid foo(function&lt;T(const T&amp;, const T&amp;)&gt; op, const T&amp; lhs, const T&amp; rhs) {\n    cout &lt;&lt; op(lhs, rhs) &lt;&lt; endl;\n}\n</code></pre>\n<p>This is <a href=\"http://ideone.com/3Pxtd8\" rel=\"nofollow noreferrer\">legal code</a>:</p>\n<pre><code>function&lt;int(const int&amp;, const int&amp;)&gt; op = plus&lt;int&gt;();\n\nfoo(op, 13, 42);\n</code></pre>\n<p>But when I do this:</p>\n<pre><code>foo(plus&lt;int&gt;(), 13, 42)\n</code></pre>\n<p>I get the error:</p>\n<blockquote>\n<p id=\"so_40896600_40896600_0\">No matching function for call to <code>foo(std::plus&lt;int&gt;, int, int)</code></p>\n</blockquote>\n<p>Why can I initialize an object of type <code>function&lt;int(const int&amp;, const int&amp;)&gt;</code> from <code>plus&lt;int&gt;()</code> but I cannot pass <code>plus&lt;int&gt;()</code> into an parameter of type <code>function&lt;T(const T&amp;, const T&amp;)&gt;</code>? Is it something having to do with the template?</p>\n", "Tags": "<c++><templates><parameters><functor><function-object>", "OwnerUserId": "2642059", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_40896600_40897181_0": {"section_id": 289, "quality": 1.0, "length": 20}, "so_40896600_40896600_0": {"section_id": 6805, "quality": 0.6666666666666666, "length": 4}}, "n3337": {"so_40896600_40897181_0": {"section_id": 280, "quality": 1.0, "length": 20}, "so_40896600_40896600_0": {"section_id": 6560, "quality": 0.6666666666666666, "length": 4}}, "n4659": {"so_40896600_40897181_0": {"section_id": 296, "quality": 1.0, "length": 20}, "so_40896600_40896600_0": {"section_id": 8296, "quality": 0.6666666666666666, "length": 4}}}});