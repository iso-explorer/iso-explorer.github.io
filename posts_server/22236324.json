post_cb({"bq_ids": {"n4140": {"so_22236324_22236516_0": {"length": 28, "quality": 1.0, "section_id": 5455}}, "n4659": {"so_22236324_22236516_0": {"length": 28, "quality": 1.0, "section_id": 6881}}}, "22236516": {"Id": "22236516", "PostTypeId": "2", "Body": "<p>That should be [dcl.spec.auto]/11 (quoting n3797)</p>\n<blockquote>\n<p id=\"so_22236324_22236516_0\">If the type of an entity with an undeduced placeholder type is needed to determine the type of an expression,\n  the program is ill-formed. Once a <code>return</code> statement has been seen in a function, however, the return type\n  deduced from that statement can be used in the rest of the function, including in other <code>return</code> statements.</p>\n</blockquote>\n<p>So, by reverting the return-statements, the return type deduction can succeed:</p>\n<pre><code>#include &lt;iostream&gt;\n\nint main() {\n    auto append = [](auto &amp;&amp;cnt, auto &amp;&amp;me, \n                     auto &amp;&amp;a, auto &amp;&amp;p1, auto &amp;&amp;...p) -&gt; decltype(auto) \n    { \n        if(sizeof...(p) &lt;= cnt) \n            return a;\n        return me(++cnt, me, a &lt;&lt; p1, p..., 0);\n    };\n    append(0u, append, std::cout, 1, 2, 3, 4);\n}\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/7f125ee6b2c37e29\">Live example</a></p>\n", "Score": "10", "LastActivityDate": "2014-03-06T21:35:00.927", "CreationDate": "2014-03-06T21:35:00.927", "ParentId": "22236324", "CommentCount": "3", "OwnerUserId": "420683"}, "22236324": {"ViewCount": "365", "FavoriteCount": "2", "AcceptedAnswerId": "22236516", "Title": "What's wrong with this recursive polymorphic C++1y lambda call?", "CreationDate": "2014-03-06T21:24:44.687", "LastActivityDate": "2014-03-06T21:35:00.927", "CommentCount": "1", "Body": "<p>I was playing around with polymorphic variadic lambdas on Clang and noticed that Clang doesn't like this one</p>\n<pre><code>#include &lt;iostream&gt;\n\nint main() {\n    auto append = [](auto &amp;&amp;cnt, auto &amp;&amp;me, \n                     auto &amp;&amp;a, auto &amp;&amp;p1, auto &amp;&amp;...p) -&gt; decltype(auto) \n    { \n        if(sizeof...(p) &gt; cnt) \n            return me(++cnt, me, a &lt;&lt; p1, p..., 0);\n        return a;\n    };\n    append(0, append, std::cout, 1, 2, 3, 4);\n}\n</code></pre>\n<p>It's intended to putput \"1234\". A 0 is appended to the parameter list (and in turn one of the parameters from the front is taken away each time) and a counter watches when we need to stop because we would be hitting a dummy <code>0</code>. </p>\n<p>But Clang complains about </p>\n<pre><code>fatal error: recursive template instantiation exceeded maximum depth of 256\n</code></pre>\n<p>In its backtract, most of the function frames are</p>\n<pre><code>main.cpp:6:20: note: in instantiation of function template specialization 'main()::&lt;anonymous class&gt;::operator()&lt;int &amp;, &lt;lambda at main.cpp:4:19&gt; &amp;, std::basic_ostream&lt;char&gt; &amp;, int &amp;, int &amp;, int &amp;, int&gt;' requested here\n            return me(++cnt, me, a &lt;&lt; p1, p..., 0);\n                   ^\n</code></pre>\n<p>This seems like a recursive function template that calls itself, and I can't see the infinite template instantiation madness. Can someone please shed some light? Does the Standard perpahs forbid recursion like that for lambdas?</p>\n", "PostTypeId": "1", "Id": "22236324", "Score": "8", "OwnerUserId": "34509", "Tags": "<c++><lambda><variadic-templates><c++14>", "AnswerCount": "2"}, "22236509": {"Id": "22236509", "PostTypeId": "2", "Body": "<p>My guess would be it's looping forever trying to deduce your return type. When it sees <code>return me( ... )</code>, it tries to figure out what THAT function's return is, which is also <code>auto</code> which requires figuring out what <code>return me( ... )</code> is and so on.</p>\n<p>Maybe try</p>\n<pre><code>if(sizeof...(p) &lt;= cnt) return a;\nreturn me(++cnt, me, a &lt;&lt; p1, p..., 0);\n</code></pre>\n<p>or try <code>decltype(a)</code> as the return type.</p>\n<p>I don;t have a 1y compiler handy at the moment, or I'd be able to say for certain.</p>\n", "Score": "2", "LastActivityDate": "2014-03-06T21:34:37.570", "CreationDate": "2014-03-06T21:34:37.570", "ParentId": "22236324", "CommentCount": "2", "OwnerUserId": "86515"}});