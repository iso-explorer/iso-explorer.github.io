post_cb({"32713932": {"ParentId": "32712057", "PostTypeId": "2", "CommentCount": "2", "Body": "<p><code>struct B{};</code> defines a nested class, then <code>struct B;</code> is a re-declaration of the same nested class.</p>\n<p>GCC is wrong to accept the code (<a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=67678\">bug report</a>), because the standard says in [class.mem]:</p>\n<blockquote>\n<p id=\"so_32712057_32713932_0\">A member shall not be declared twice in the <em>member-specification</em>, except that a nested class or member class template can be declared and then later defined,</p>\n</blockquote>\n<p>In your case the nested class is defined <em>then</em> declared, which is not allowed, so Clang and ICC are correct to give a diagnostic. However, when I test it they only give a warning, not an error, so maybe you are using <code>-Werror</code>, in which case stop doing that and the code should compile.</p>\n<p>The problem in the Boost.Bimap code is a <a href=\"https://svn.boost.org/trac/boost/ticket/8743\">known bug</a>.</p>\n", "OwnerUserId": "981959", "LastEditorUserId": "981959", "LastEditDate": "2015-09-22T10:13:26.787", "Id": "32713932", "Score": "10", "CreationDate": "2015-09-22T09:57:45.687", "LastActivityDate": "2015-09-22T10:13:26.787"}, "bq_ids": {"n4140": {"so_32712057_32713932_0": {"section_id": 5861, "quality": 1.0, "length": 15}}, "n3337": {"so_32712057_32713932_0": {"section_id": 5631, "quality": 1.0, "length": 15}}, "n4659": {"so_32712057_32713932_0": {"section_id": 7344, "quality": 1.0, "length": 15}}}, "32712057": {"CommentCount": "6", "ViewCount": "184", "PostTypeId": "1", "LastEditorUserId": "4370109", "CreationDate": "2015-09-22T08:28:15.703", "LastActivityDate": "2016-07-06T08:29:12.737", "Title": "Is it legal to re-declare a member class after defining it?", "LastEditDate": "2016-07-06T08:29:12.737", "Id": "32712057", "Score": "0", "Body": "<p>I have a problem with compiling boost.bimap library. My test program is a blank main function and only one include directive(like <code>#include &lt;boost/bimap.hpp&gt;</code>). \nAfter some investigations I found out that preprocessor had made some interesting constructions from header file like:  </p>\n<pre><code>struct A { struct B{}; struct B; };\n</code></pre>\n<p>I don't know if this is correct or not, but gcc accepts it while clang and icc don't. Who is right and what can I do to compile programs with bimap library? Unfortunately, I can't use gcc in this case.</p>\n", "Tags": "<c++><c-preprocessor><bimap><boost-bimap>", "OwnerUserId": "4896863", "AnswerCount": "1"}});