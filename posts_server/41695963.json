post_cb({"41696136": {"ParentId": "41695963", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_41695963_41696136_0\">Is this the normal way when we declare static generic methods that\n  uses template variable not available through the class template?</p>\n</blockquote>\n<p>Yes, it is normal.</p>\n<blockquote>\n<p id=\"so_41695963_41696136_1\">Can anyone point me out some clauses in the standard?</p>\n</blockquote>\n<p>From the n4296, <em>14.5.2 Member templates</em>:</p>\n<blockquote>\n<p id=\"so_41695963_41696136_2\">A template can be declared within a class or class template; such a\n  template is called a member template. A member template can be defined\n  within or outside its class definition or class template definition. A\n  member template of a class template that is defined outside of its\n  class template definition shall be specified with the\n  template-parameters of the class template followed by the\n  template-parameters of the member template. [ Example:</p>\n<pre><code>template&lt;class T&gt; struct string {\n    template&lt;class T2&gt; int compare(const T2&amp;);\n    template&lt;class T2&gt; string(const string&lt;T2&gt;&amp; s) { / ... / }\n};\n\ntemplate&lt;class T&gt; template&lt;class T2&gt; int string&lt;T&gt;::compare(const T2&amp; s) {\n}\n</code></pre>\n<p id=\"so_41695963_41696136_3\">\u2014end example ]</p>\n</blockquote>\n", "OwnerUserId": "5507349", "PostTypeId": "2", "Id": "41696136", "Score": "3", "CreationDate": "2017-01-17T11:37:17.897", "LastActivityDate": "2017-01-17T11:37:17.897"}, "41695963": {"CommentCount": "2", "ViewCount": "79", "PostTypeId": "1", "LastEditorUserId": "5507349", "CreationDate": "2017-01-17T11:28:36.013", "LastActivityDate": "2017-01-17T12:25:55.483", "Title": "Double `template` keyword in static member definition", "AcceptedAnswerId": "41696136", "LastEditDate": "2017-01-17T12:25:55.483", "Id": "41695963", "Score": "3", "Body": "<p>I was not using the latest C++ standard for a while, today I want to implement a Haskell style <code>List</code> in C++ and come up with something like the following:</p>\n<pre><code>template&lt;typename T&gt;\nclass List {\nprivate:\n    std::function&lt;std::tuple&lt;T,List&lt;T&gt;&gt;()&gt; f;\n    List() {}\n    List(T h, List&lt;T&gt; t) :f([h, t]() { return std::make_tuple(h, t); }) {}\npublic:\n    typedef T item_type;\n\n    static List&lt;T&gt; empty();\n\n    static List&lt;T&gt; cons(T h, List&lt;T&gt; t);\n\n    template&lt;typename N, typename C&gt;\n    static auto on(N n, C c) -&gt; decltype(N());\n};\n\ntemplate&lt;typename T&gt;\nList&lt;T&gt; List&lt;T&gt;::empty() {\n    return List();\n}\ntemplate&lt;typename T&gt;\nList&lt;T&gt; List&lt;T&gt;::cons(T h, List&lt;T&gt; t) {\n    return List([h, t](std::function&lt;void(T, List&lt;T&gt;)&gt; c) {f(c); });\n}\n\ntemplate&lt;typename T&gt;\ntemplate&lt;typename N, typename C&gt;\nauto List&lt;T&gt;::on(N n, C c) -&gt; decltype(N()) {\n    if (f == nullptr) return n();\n    else {\n        T h;\n        List&lt;T&gt; t;\n        std::tie(h, t) = f();\n        return c(h, t);\n    }\n}\n\ntemplate&lt;typename T, typename R, typename F&gt;\nR foldr(List&lt;T&gt; l, F f, R b) {\n    return l.on([b]() { return b; }, [f, b](T h, List&lt;T&gt; t) { return foldr(t, f, f(t, b)); });\n}\n</code></pre>\n<p>The code compiles (VC 2015, not tested yet), but makes me a while to figure out the correct grammar for the function <code>on</code>. This is the first time I saw something like this in C++, and the double <code>template</code> keyword looks strange enough to me.</p>\n<p><strong>Question</strong></p>\n<p>Is this the normal way when we declare static generic methods that uses template variable not available through the class template? Can anyone point me out some clauses in the standard?</p>\n", "Tags": "<c++><c++11><templates><static-methods>", "OwnerUserId": "812034", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_41695963_41696136_2": {"section_id": 110, "quality": 0.9767441860465116, "length": 42}}, "n3337": {"so_41695963_41696136_2": {"section_id": 105, "quality": 0.9767441860465116, "length": 42}}, "n4659": {"so_41695963_41696136_2": {"section_id": 114, "quality": 0.9767441860465116, "length": 42}}}});