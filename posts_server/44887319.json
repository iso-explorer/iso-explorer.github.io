post_cb({"44890501": {"ParentId": "44887319", "CommentCount": "5", "Body": "<p>Not the strongest reason per se, but leaving this up to the implementation allows for more optimizations. E.g.:</p>\n<pre><code>class Foo { /*...*/ };\n\nvoid f();\n\nint main()\n{\n    for ( int i = 0; i &lt; 1000000; ++i )\n    {\n        Foo myFoo;\n        f();\n    }\n}\n</code></pre>\n<p>Here, an implementation may choose not to destroy <code>myFoo</code> if <code>f()</code> throws, which may reduce code size and/or increase performance. The rationale would be if you don't write an exception handler, you don't expect <code>f()</code> to throw anyway, and shortcuts may be taken. This may sound a bit weak, but this is similar to <code>noexcept</code> (C++11) vs. <code>throw()</code> clause (C++98) \u2013 removing the requirement to unwind the stack allows for more aggressive optimization.</p>\n", "OwnerUserId": "4083309", "PostTypeId": "2", "Id": "44890501", "Score": "2", "CreationDate": "2017-07-03T16:41:19.863", "LastActivityDate": "2017-07-03T16:41:19.863"}, "44887457": {"ParentId": "44887319", "PostTypeId": "2", "CommentCount": "10", "Body": "<p>If an exception isn't caught, <code>std::terminate</code> is called. We failed so bad the host environment needs to step in and (maybe) clean up after us. Unwinding the stack in this case is like giving a helmet to a kamikaze pilot.</p>\n<p>So for a hosted environment, it may make more sense to just do nothing and let the host clean up.</p>\n<p>Now, if you are in a stand alone implementation, and are throwing exceptions, then there is no one to clean up after you. An implementation should preform stack unwinding in this case, because that's what is supposed to clean up the mess.</p>\n<p>The standard leaves it to the implementation to facilitate these two very different execution environments.</p>\n<hr>\n<p>Like @Matteo pointed out, <code>std::terminate</code> is called before any potential unwinding because you can setup a handler for it. And that handler can do something useful with the stack state, so long as the stack isn't unwound yet.</p>\n</hr>", "OwnerUserId": "817643", "LastEditorUserId": "817643", "LastEditDate": "2017-07-03T14:13:57.003", "Id": "44887457", "Score": "10", "CreationDate": "2017-07-03T13:57:12.197", "LastActivityDate": "2017-07-03T14:13:57.003"}, "44887319": {"CommentCount": "0", "ViewCount": "321", "PostTypeId": "1", "LastEditorUserId": "2842166", "CreationDate": "2017-07-03T13:51:42.867", "LastActivityDate": "2017-07-03T16:41:19.863", "Title": "Why is stack unwinding guaranteed only for handled exceptions?", "FavoriteCount": "0", "LastEditDate": "2017-07-03T14:09:06.457", "Id": "44887319", "Score": "7", "Body": "<p>C++ <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/n4659.pdf\" rel=\"noreferrer\">standard</a> says (<code>[except.handle]/9</code>):</p>\n<blockquote>\n<p id=\"so_44887319_44887319_0\">If no matching handler is found, the function std::terminate() is called; whether or not the stack is unwound before this call to std::terminate() is implementation-defined</p>\n</blockquote>\n<p>For example, behavior of code below (will it print <code>S::~S()</code> or not) is implementation defined:</p>\n<pre><code>struct S {\n    S() { std::cout &lt;&lt; \"S::S()\" &lt;&lt; std::endl; }\n    ~S() { std::cout &lt;&lt; \"S::~S()\" &lt;&lt; std::endl; }\n};\n\nint main() {\n    S s;\n    throw std::runtime_error(\"exception\");\n}\n</code></pre>\n<p>I would like to know <em>in-depth</em>: why is it implementation defined? Why a context cannot be unwinded up to its entry before <code>std::terminate()</code> is called if an exception is uncaught (which is similar to <code>try{ ... } catch(...) { throw; }</code> in the top-level function)? At a glance, such behavior is much clearer and safer in consistence with RAII.</p>\n", "Tags": "<c++><exception>", "OwnerUserId": "2842166", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_44887319_44887319_0": {"section_id": 3354, "quality": 0.9230769230769231, "length": 12}}, "n3337": {"so_44887319_44887319_0": {"section_id": 3224, "quality": 0.9230769230769231, "length": 12}}, "n4659": {"so_44887319_44887319_0": {"section_id": 4121, "quality": 0.9230769230769231, "length": 12}}}});