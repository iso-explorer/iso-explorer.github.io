post_cb({"bq_ids": {"n4140": {"so_37413895_37415174_0": {"length": 4, "quality": 0.8, "section_id": 24}}, "n3337": {"so_37413895_37415174_0": {"length": 4, "quality": 0.8, "section_id": 21}}, "n4659": {"so_37413895_37415174_0": {"length": 5, "quality": 1.0, "section_id": 4091}}}, "37415174": {"Id": "37415174", "PostTypeId": "2", "Body": "<p>The wording in question comes from <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0138r2.pdf\" rel=\"nofollow\">P0138R2</a>: Construction Rules for enum class Values. As you can see, the paper is dated March 2016 - quite a few years too late for C++11! </p>\n<p>The wording is included in the latest working draft <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/n4582.pdf\" rel=\"nofollow\">N4582</a> in [dcl.init.list] as suggested:</p>\n<blockquote>\n<p id=\"so_37413895_37415174_0\">Otherwise, if T is an enumeration with a fixed underlying type (7.2), [...]</p>\n</blockquote>\n<p>clang 3.9 apparently has already implemented this example, but I wouldn't be surprised that such new features aren't supported by compilers yet. Give it a while. </p>\n", "LastActivityDate": "2016-05-24T13:31:28.010", "CommentCount": "0", "CreationDate": "2016-05-24T13:31:28.010", "ParentId": "37413895", "Score": "1", "OwnerUserId": "2069064"}, "37413895": {"ViewCount": "175", "Body": "<p>I am reading the <code>Scoped enumerations</code> page from <a href=\"http://en.cppreference.com/w/cpp/language/enum\" rel=\"nofollow noreferrer\">here</a>:</p>\n<p><a href=\"https://i.stack.imgur.com/diYV5.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/diYV5.png\"/></a>\nSo I decided to give it a try:</p>\n<pre><code>$ cat e.cxx \n#include &lt;cstdint&gt;\nenum class Handle : uint32_t { Invalid = 0 };\nint main()\n{\n  Handle h { 42 }; // OK\n  return 0;\n}\n$ g++ -std=c++11 e.cxx\ne.cxx: In function \u2018int main()\u2019:\ne.cxx:5:17: error: cannot convert \u2018int\u2019 to \u2018Handle\u2019 in initialization\n   Handle h { 42 }; // OK\n\n             ^\n</code></pre>\n<p>Using:</p>\n<pre><code>$ g++ --version\ng++ (Debian 5.3.1-14) 5.3.1 20160409\nCopyright (C) 2015 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n</code></pre>\n<p>If I now check the C++11 support in GCC, it appears as if everything is supported since <a href=\"https://gcc.gnu.org/projects/cxx-status.html#cxx11\" rel=\"nofollow noreferrer\">GCC 4.8</a>.</p>\n<p>So which page am I reading it wrong ? The example for <code>Score enumertions</code> is not 100% correct, or the support for C++11 in GCC is still incomplete ?</p>\n", "AcceptedAnswerId": "37414121", "Title": "Scoped enumerations: error: cannot convert \u2018int\u2019 to \u2018Handle\u2019 in initialization", "CreationDate": "2016-05-24T12:40:36.687", "Id": "37413895", "CommentCount": "1", "LastEditDate": "2016-05-24T12:50:48.973", "PostTypeId": "1", "LastEditorUserId": "136285", "LastActivityDate": "2016-05-24T13:31:28.010", "Score": "3", "OwnerUserId": "136285", "Tags": "<c++><c++11><gcc><language-lawyer>", "AnswerCount": "2"}, "37414121": {"Id": "37414121", "PostTypeId": "2", "Body": "<p><code>enum class</code> (or <code>enum struct</code>) creates a <em>strong</em> type. It can not naively be initialized using the underlying integer type, it needs to be explicitly casted, at least in C++11 and C++14.</p>\n<p>The reference screenshot you show is from the upcoming C++17 standard, which relaxes the the requirements a little, and allows that type of initialization.</p>\n", "LastEditorUserId": "440558", "LastActivityDate": "2016-05-24T13:00:50.007", "Score": "3", "CreationDate": "2016-05-24T12:49:08.707", "ParentId": "37413895", "CommentCount": "6", "OwnerUserId": "440558", "LastEditDate": "2016-05-24T13:00:50.007"}});