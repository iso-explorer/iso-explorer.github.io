post_cb({"40307531": {"CommentCount": "6", "ViewCount": "126", "PostTypeId": "1", "LastEditorUserId": "68571", "CreationDate": "2016-10-28T14:41:19.387", "LastActivityDate": "2016-10-28T15:04:18.147", "Title": "Does float size depend on operating system?", "AcceptedAnswerId": "40307938", "LastEditDate": "2016-10-28T14:52:15.477", "Id": "40307531", "Score": "1", "Body": "<p>I'm sorry but I couldn't find an answer for this question using Google. I'm not an English speaker and maybe I haven't searched using the right words.</p>\n<p>I remember that a data type's size depends on the size of the word of the architecture (or maybe I'm wrong). But, I'm not sure if the size also depends on operating system.</p>\n<p>Now I'm working with Windows 7 32 bits and I'm not sure if a float will change its size when I use Windows 7 64bits.</p>\n<p>I'm using Visual Studio 2012 to compile my solution using Win32 project.</p>\n<p>Will the size change if I change windows version from 32 to 64bits?</p>\n<p>I'm not asking about what is the different between float and double. I'm asking if float will have the same size in memory (number of bits in memory) on the same computer if I change operating system from Windows 7 32 bits to Windows 7 64 bits (or viceversa).</p>\n", "Tags": "<c++><windows>", "OwnerUserId": "68571", "AnswerCount": "2"}, "40307938": {"ParentId": "40307531", "CommentCount": "0", "Body": "<p>Formally, the size of floating-point types depends on the particular compiler used.</p>\n<p>In practice, though, for systems based on chips with built-in floating-point hardware (i.e. all except for some embedded systems), the compiler will use the floating-point hardware, and all compilers that target that chip will use the same sizes for <code>float</code> and <code>double</code>.</p>\n<p>Further, desktop hardware has settled in on the IEEE 754 floating-point standard, which sets out the size of <code>float</code> and <code>double</code> (<code>long double</code> is a rather different matter). So when you're targeting desktop systems, it's safe to assume that <code>float</code> will be the same size everywhere, and that <code>double</code> will be the same size everywhere.</p>\n<p>If you're concerned about that, you can use <code>std::numeric_limits&lt;float&gt;::is_iec559</code> and <code>std::numeric_limits&lt;double&gt;::is_iec559</code> to check whether the floating-point implementation that your compiler uses conforms to IEEE 754 (IEC 559 is an older name for the IEEE 754 standard).</p>\n", "OwnerUserId": "1593860", "PostTypeId": "2", "Id": "40307938", "Score": "5", "CreationDate": "2016-10-28T15:04:18.147", "LastActivityDate": "2016-10-28T15:04:18.147"}, "bq_ids": {"n4140": {"so_40307531_40307869_1": {"section_id": 7217, "quality": 0.9019607843137255, "length": 46}}, "n3337": {"so_40307531_40307869_1": {"section_id": 6961, "quality": 0.9019607843137255, "length": 46}}, "n4659": {"so_40307531_40307869_1": {"section_id": 8726, "quality": 0.8823529411764706, "length": 45}}}, "40307869": {"ParentId": "40307531", "CommentCount": "1", "Body": "<blockquote>\n<p id=\"so_40307531_40307869_0\">3.9.1 Fundamental types</p>\n<p id=\"so_40307531_40307869_1\">There are three floating point types: float, double, and long double.\n  The type double provides at least as much precision as float, and the\n  type long double provides at least as much precision as double. The\n  set of values of the type float is a subset of the set of values of\n  the type double; the set of values of the type double is a subset of\n  the set of values of the type long double. <strong><em>The value representation of\n  floating-point types is implementation-defined.</em></strong></p>\n</blockquote>\n<p>Emphasis is mine. The C++ standard does not require any particular representation of floating point types. The size of a floating data type can change, or may remain the same, between different operating systems, different versions of the operating system, or even different compilers for the same operating system, or even different compilation options with the same compiler.</p>\n", "OwnerUserId": "3943312", "PostTypeId": "2", "Id": "40307869", "Score": "1", "CreationDate": "2016-10-28T15:00:47.830", "LastActivityDate": "2016-10-28T15:00:47.830"}});