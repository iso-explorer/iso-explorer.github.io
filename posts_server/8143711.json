post_cb({"8143711": {"ViewCount": "148", "Body": "<p>Consider this code</p>\n<pre><code>class Foo {\nprivate:\n    Bar bar; //note: no reference\n\npublic:\n   Foo(Bar&amp; b) : bar(b) { }\n};\n</code></pre>\n<p>Will Bar get copy-constructed?</p>\n", "AcceptedAnswerId": "8143817", "Title": "Copy-construct from reference", "CreationDate": "2011-11-15T21:56:01.300", "Id": "8143711", "CommentCount": "2", "PostTypeId": "1", "LastActivityDate": "2011-11-15T22:54:02.473", "Score": "2", "OwnerUserId": "595189", "Tags": "<c++><constructor><reference><copy-constructor>", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_8143711_8143817_0": {"length": 10, "quality": 0.7692307692307693, "section_id": 558}, "so_8143711_8143817_1": {"length": 24, "quality": 1.0, "section_id": 451}}, "n3337": {"so_8143711_8143817_0": {"length": 10, "quality": 0.7692307692307693, "section_id": 549}, "so_8143711_8143817_1": {"length": 24, "quality": 1.0, "section_id": 442}}, "n4659": {"so_8143711_8143817_0": {"length": 10, "quality": 0.7692307692307693, "section_id": 581}, "so_8143711_8143817_1": {"length": 24, "quality": 1.0, "section_id": 474}}}, "8143994": {"Id": "8143994", "PostTypeId": "2", "Body": "<p>Yes your member variable <code>bar</code> will be copy constructed, that's one of the benefits of using an initializer list as opposed to assigning the value in the body of the constructor.</p>\n<p>If the <code>Bar</code> class does not have an accessible copy constructor and the compiler can't generate a default one, the code will fail to compile.</p>\n<p>When you pass a reference to a copy constructor, you should generally make it a <code>const</code> reference.</p>\n", "LastActivityDate": "2011-11-15T22:20:49.090", "CommentCount": "0", "CreationDate": "2011-11-15T22:20:49.090", "ParentId": "8143711", "Score": "1", "OwnerUserId": "5987"}, "8143817": {"Id": "8143817", "PostTypeId": "2", "Body": "<p>That depends on the signatures of <code>Bar</code>'s public constructors, either explicitly or implicitly defined.</p>\n<p>To start with, the C++ standard allows for implicit conversion of references as long as the only difference in the underlying type is that the destination type is at least as <em>cv-qualified</em> than the source type, using the partial ordering defined in this table (C++11, \u00a73.9.3/4):</p>\n<blockquote>\n<p id=\"so_8143711_8143817_0\"><em>no cv-quali\ufb01er</em> &lt; <code>const</code><br>\n<em>no cv-quali\ufb01er</em> &lt; <code>volatile</code><br>\n<em>no cv-quali\ufb01er</em> &lt; <code>const volatile</code><br>\n<code>const</code>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt; <code>const volatile</code><br>\n<code>volatile</code>\u00a0\u00a0\u00a0\u00a0&lt; <code>const volatile</code> </br></br></br></br></p>\n</blockquote>\n<p>So, taking that into account as well as \u00a712.8/2:</p>\n<blockquote>\n<p id=\"so_8143711_8143817_1\">A non-template constructor for class <code>X</code> is a copy constructor if its first parameter is of type <code>X&amp;</code>, <code>const X&amp;</code>, <code>volatile X&amp;</code> or <code>const volatile X&amp;</code>, and either there are no other parameters or else all other parameters have default arguments.</p>\n</blockquote>\n<p>if Bar has a constructor with <em>any</em> of the following signatures:</p>\n<pre><code>Bar(Bar&amp;);\nBar(Bar const&amp;);\nBar(Bar volatile&amp;);\nBar(Bar const volatile&amp;);\n</code></pre>\n<p>then yes, <code>b</code> will be copy-constructed into <code>Foo::bar</code>.</p>\n<hr>\n<p><strong>EDIT:</strong> <em>This was incorrect, I was thinking of <code>operator=</code> and the details of qualifying as a move-assignment operator.</em></p>\n<p><s>Note that it's possible to have an eligible constructor that is not a copy constructor:</s></p>\n<pre><code>Bar(Bar);\n</code></pre>\n<p>This will work (read: compile), but it is not technically a copy constructor.</p></hr>\n", "LastEditorUserId": "636019", "LastActivityDate": "2011-11-15T22:54:02.473", "Score": "3", "CreationDate": "2011-11-15T22:06:19.640", "ParentId": "8143711", "CommentCount": "8", "OwnerUserId": "636019", "LastEditDate": "2011-11-15T22:54:02.473"}});