post_cb({"3649023": {"ParentId": "3648797", "CommentCount": "0", "CreationDate": "2010-09-06T04:36:39.183", "OwnerUserId": "11296", "PostTypeId": "2", "Id": "3649023", "Score": "3", "Body": "<p>Very cool.  Looks like a good way to pass <em>hints</em> to the copy constructor. Some example situations I can think of where this might be useful:</p>\n<ul>\n<li><p>Copying a data structure where the copy will then be populated with additional data</p>\n<p>The additional parameter would <em>hint</em> at the likely soon -to-be-needed capacity to optimize allocation.  The default capacity would be a sentinel value to indicate just use the default capacity or the capacity of the original data structure.</p></li>\n<li><p>Whether to do a deep copy or shallow copy of member values</p>\n<p>The default might be to do a deep copy for safety, but advanced uses could take advantage of specifying rare occasions of when its safe to do a shallow copy.</p></li>\n<li><p>Verbatim copy vs logical copy</p>\n<p>Hint whether the data structure's copy constructor should copy the original data structure's internal structure verbatim or whether its safe to optimize or consolidate it.  For example, the hint could indicate a tree should be balanced as it is copied.</p></li>\n</ul>\n", "LastActivityDate": "2010-09-06T04:36:39.183"}, "3648797": {"CommentCount": "0", "AcceptedAnswerId": "3648916", "PostTypeId": "1", "LastEditorUserId": "151292", "CreationDate": "2010-09-06T03:04:05.520", "LastActivityDate": "2010-09-07T03:02:50.713", "LastEditDate": "2010-09-06T03:11:16.073", "ViewCount": "1900", "FavoriteCount": "5", "Title": "Why would a copy constructor have more than one parameter?", "Id": "3648797", "Score": "12", "Body": "<blockquote>\n<p id=\"so_3648797_3648797_0\">$12.8/2 - 'A non-template constructor\n  for class X is a copy constructor if\n  its first parameter is of type X&amp;,\n  const X&amp;, volatile X&amp; or const\n  volatile X&amp;, and either there are no\n  other parameters or else all other\n  parameters have default arguments\n  (8.3.6).106)'</p>\n</blockquote>\n<p>So far, I have not come across any example of a situation where there is a need to declare a copy constructor with additional default parameters.</p>\n<p>Would like to know any real time use of such a copy constructor which take more than one parameter.</p>\n", "Tags": "<c++><copy-constructor>", "OwnerUserId": "418110", "AnswerCount": "4"}, "3648916": {"ParentId": "3648797", "CommentCount": "3", "CreationDate": "2010-09-06T03:54:20.217", "OwnerUserId": "66692", "PostTypeId": "2", "Id": "3648916", "Score": "11", "Body": "<p>The old <code>std::basic_string</code> does have one too:</p>\n<pre><code>basic_string(const basic_string&amp; s, \n         size_type pos = 0, size_type n = npos)\n</code></pre>\n", "LastActivityDate": "2010-09-06T03:54:20.217"}, "3648806": {"ParentId": "3648797", "PostTypeId": "2", "CommentCount": "7", "CreationDate": "2010-09-06T03:08:48.183", "Score": "10", "LastEditorUserId": "151292", "LastEditDate": "2010-09-06T03:10:22.660", "Id": "3648806", "OwnerUserId": "13430", "Body": "<p><a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1850.pdf\" rel=\"noreferrer\">The BDE allocator</a> [PDF Link] used this quirk. For example their array allocator looked like this:</p>\n<pre><code>template &lt;typename T&gt;\nclass bde::Array {\npublic:\n    Array(bde::Allocator *allocator = 0);\n    Array(const Array &amp;rhs, bde::Allocator *allocator = 0);\n};\n</code></pre>\n", "LastActivityDate": "2010-09-06T03:10:22.660"}, "bq_ids": {"n4140": {"so_3648797_3648797_0": {"section_id": 451, "quality": 0.9230769230769231, "length": 24}}, "n3337": {"so_3648797_3648797_0": {"section_id": 442, "quality": 0.9230769230769231, "length": 24}}, "n4659": {"so_3648797_3648797_0": {"section_id": 474, "quality": 0.9230769230769231, "length": 24}}}, "3652740": {"ParentId": "3648797", "PostTypeId": "2", "CommentCount": "4", "CreationDate": "2010-09-06T15:54:30.850", "Score": "0", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T10:26:59.283", "Id": "3652740", "OwnerUserId": "104473", "Body": "<p>I have a situation where I require the copy constructor to have more than one parameter in one of my class involving deep copy. </p>\n<p>Basically the problem is that an object contains another object that need to keep track of it through a pointer, but a normal deep copy would only copy the pointer value and not the correct memory location of the new object.</p>\n<p>By disabling the normal copy constructor and using the variant with two parameters I'm able to deep copy correctly my object. </p>\n<p>[Edit]: looking through my code it seems that it is even more common than I though as I use it at a couple of place elsewhere too. </p>\n<p>Here is a code sample for the curious (this is a simplified version and is actually a little more complicated)</p>\n<pre><code>//----------------------------------------------------------------------------- \nscan_point::scan_point(scan_point const&amp; rhs, simulation* sim_)\n: m(rhs.m), sim(sim_)\n//----------------------------------------------------------------------------- \n{    \n\n}\n</code></pre>\n<p>--</p>\n<pre><code>simulation_(simulation_ const&amp; rhs)\n{\n    //...\n    for(typename ContainerType::const_iterator it = rhs.spContainer-&gt;begin(), endIt = rhs.spContainer-&gt;end();\n        it != endIt; it++)\n    {\n        spContainer-&gt;push_back(new scan_point(*it, this));\n    }\n}\n</code></pre>\n<p>--</p>\n<p>To makes things less painful during copy I use smart_ptr class that allow deep copy and (in this case specifically) embed my members in a struct to makes the compiler auto-generate the copying for about all other members (see for a try to a short example: <a href=\"https://stackoverflow.com/questions/469696/what-is-your-most-useful-c-c-utility/1609496#1609496\">https://stackoverflow.com/questions/469696/what-is-your-most-useful-c-c-utility/1609496#1609496</a>).</p>\n", "LastActivityDate": "2010-09-07T03:02:50.713"}});