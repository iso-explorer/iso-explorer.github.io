post_cb({"193051": {"Body": "<p>The problem is, the standard permits you a <em>declaration</em> inside parenthesis. What you want to do is to get a declaration as part of expression, which is something that standard will not let you do.</p>\n<p>while() can have one of two syntaxes: while(&lt;declaration&gt;) or while(&lt;expression&gt;). The declaration uses \"=\", and looks like expression, but it's a different syntactical entity. </p>\n<p>When you write</p>\n<pre><code>while(int i = 1) {\n}\n</code></pre>\n<p>, that's perfectly fine. \"int i=1\" is a declaration. However, what you want is </p>\n<pre><code>while ( (int i = 1) + 3) {\n}\n</code></pre>\n<p>This is a very different animal. You want an expression inside while(), where one of the terms of the expression is a declaration. Now, declaration is a statement, and as such cannot be part of expression. That's why what you need to be done cannot be done.</p>\n<p>(after writing the whole rant, I noticed that 2 other people wrote the same thing. Oh well, the more the merrier. The accepted answer is still wrong at the time of my writing.)</p>\n", "CreationDate": "2008-10-10T21:14:51.420", "ParentId": "190748", "CommentCount": "0", "LastEditDate": "2012-08-01T10:20:56.367", "PostTypeId": "2", "OwnerDisplayName": "Arkadiy", "LastEditorUserId": "4086", "LastActivityDate": "2012-08-01T10:20:56.367", "Id": "193051", "Score": "9", "OwnerUserId": "3458"}, "190753": {"Id": "190753", "PostTypeId": "2", "Body": "<p>It might be because the contents of the while clause are evaluated each loop, thus it would try and declare \"ch\" multiple times.</p>\n<p>The if, switch, and for loop examples you gave will all have \"ch\" being defined only once.</p>\n", "OwnerDisplayName": "RB", "LastActivityDate": "2008-10-10T10:34:59.057", "Score": "2", "CreationDate": "2008-10-10T10:34:59.057", "ParentId": "190748", "CommentCount": "0", "OwnerUserId": "15393"}, "bq_ids": {"n4140": {"so_190748_190768_0": {"length": 17, "quality": 0.8947368421052632, "section_id": 3900}}, "n3337": {"so_190748_190768_0": {"length": 17, "quality": 0.8947368421052632, "section_id": 3760}}, "n4659": {"so_190748_190768_0": {"length": 18, "quality": 0.9473684210526315, "section_id": 4786}}}, "190768": {"Body": "<p>This doesn't appear to be compliant behaviour. Part 6.5.1.2 of the standard states: </p>\n<blockquote>\n<p id=\"so_190748_190768_0\">When the condition of a while statement is a declaration, the scope of the variable that is declared extends\n  from its point of declaration (3.3.1) to the end of the while statement. A while statement of the form</p>\n<p id=\"so_190748_190768_1\">while (T t = x) statement</p>\n<p id=\"so_190748_190768_2\">is equivalent to</p>\n</blockquote>\n<pre><code>label:\n{ //start of condition scope\n    T t = x;\n    if (t) {\n        statement\n        goto label;\n    }\n}\n</code></pre>\n<p>So in your example, ch should be declared within the scope of the loop and work correctly (with it being recreated through each loop iteration). Reason for the observed behaviour is most likely due to the compiler not scoping the variable correctly and then declaring it multiple times.</p>\n", "CreationDate": "2008-10-10T10:40:56.143", "ParentId": "190748", "CommentCount": "1", "LastEditDate": "2008-10-10T10:47:55.053", "PostTypeId": "2", "LastEditorDisplayName": "workmad3", "LastActivityDate": "2008-10-10T10:47:55.053", "LastEditorUserId": "16035", "Id": "190768", "OwnerDisplayName": "workmad3", "Score": "10", "OwnerUserId": "16035"}, "191550": {"Id": "191550", "PostTypeId": "2", "Body": "<p>You <em>can</em> put a variable declaration in the test expression  of a while loop. What you <em>cannot</em> do is put a declaration statement in other expressions. For instance, in the expression a+b+c, you cannot replace b by <code>int i = f()</code>. And the same hold for the expression <code>(a)</code>; you can't insert <code>int i=f()</code> to get an expression <code>(int i=f())</code>.</p>\n<p>So, in <code>while (int i = foo())</code>, the outermost brackets are part of the while statement, and not of the text-expression, and everything is legal. In <code>while ((int i = foo()))</code>, the outermost brackets are still part of the while statement. The test-expression would have the form <code>\"(\" expr \")\"</code>, and you end up with a syntax error.</p>\n", "OwnerDisplayName": "MSalters", "LastActivityDate": "2008-10-10T14:22:29.180", "Score": "2", "CreationDate": "2008-10-10T14:22:29.180", "ParentId": "190748", "CommentCount": "4", "OwnerUserId": "15416"}, "190748": {"ViewCount": "11442", "Body": "<p>You can, obviously, put a variable declaration in a for loop:</p>\n<pre><code>for (int i = 0; ...\n</code></pre>\n<p>and I've noticed that you can do the same thing in if and switch statements as well:</p>\n<pre><code>if ((int i = f()) != 0) ...\n\nswitch (int ch = stream.get()) ...\n</code></pre>\n<p>But when I try to do the same thing in a while loop:</p>\n<pre><code>while ((int ch = stream.get()) != -1) ...\n</code></pre>\n<p>The compiler (VC++ 9.0) does not like it at all.</p>\n<p>Is this compliant behavior? Is there a reason for it?</p>\n<p><strong>EDIT</strong>: I found I can do this:</p>\n<pre><code>while (int ch = stream.get() != -1) ...\n</code></pre>\n<p>but because of precedence rules, that's interpreted as:</p>\n<pre><code>while (int ch = (stream.get() != -1)) ...\n</code></pre>\n<p>which is not what I want.</p>\n", "AcceptedAnswerId": "191876", "Title": "Why can't I put a variable declaration in the test portion of a while loop?", "CreationDate": "2008-10-10T10:33:06.627", "Id": "190748", "CommentCount": "5", "FavoriteCount": "3", "PostTypeId": "1", "LastEditDate": "2016-07-03T21:32:49.487", "LastEditorDisplayName": "Ferruccio", "OwnerDisplayName": "Ferruccio", "LastEditorUserId": "4086", "LastActivityDate": "2016-07-03T21:32:49.487", "Score": "14", "OwnerUserId": "4086", "Tags": "<c++>", "AnswerCount": "6"}, "191876": {"Id": "191876", "PostTypeId": "2", "Body": "<p>The grammar for a condition in the '03 standard is defined as follows:</p>\n<pre><code>condition:\n  expression\n  type-specifier-seq declarator = assignment-expression\n</code></pre>\n<p>The above will therefore only allow conditions such as:</p>\n<pre><code>if ( i &amp;&amp; j &amp;&amp; k ) {}\nif ( (i = j) ==0 ) {}\nif ( int i = j ) {}\n</code></pre>\n<p>The standard allows the condition to declare a variable, however, they have done so by adding a new grammar rule called 'condition' that can be an expression or a declarator with an initializer.  The result is that just because you are in the condition of an <code>if</code>, <code>for</code>, <code>while</code>, or <code>switch</code> does not mean that you can declare a variable inside an expression.</p>\n", "OwnerDisplayName": "Richard Corden", "LastActivityDate": "2008-10-10T15:29:24.240", "Score": "12", "CreationDate": "2008-10-10T15:29:24.240", "ParentId": "190748", "CommentCount": "1", "OwnerUserId": "11698"}, "191737": {"Body": "<p><strike>Try</strike> <strong>This doesn't work</strong></p>\n<pre><code>while (int ch = stream.get(), ch != -1) ...\n</code></pre>\n<p><strike>I've never tried it, but if the comment in your edit is correct, this should work.</strike><br>\nVS 2005 won't even compile it.</br></p>\n", "CreationDate": "2008-10-10T14:59:59.697", "ParentId": "190748", "CommentCount": "2", "LastEditDate": "2008-10-10T22:05:49.807", "PostTypeId": "2", "LastEditorDisplayName": "Mark Ransom", "LastActivityDate": "2008-10-10T22:05:49.807", "LastEditorUserId": "5987", "Id": "191737", "OwnerDisplayName": "Mark Ransom", "Score": "0", "OwnerUserId": "5987"}});