post_cb({"22405182": {"ParentId": "22405031", "PostTypeId": "2", "CommentCount": "0", "Body": "<p><strong>EDIT::</strong> The explanation below is only to shed light on the usage of Post and Pre-Decrement for OP's better understanding of them. <strong>The correct answer for OP's code is,</strong> <code>n*facto(n - 1)</code>. @OP: You should not do any pre-drecrement in that part of your code because it will invoke Undefined Behavior due to unsequenced modification of variable <code>n</code>.</p>\n<p><strong>Pre And Post-Decrement::</strong>\nYou have to use pre-decrement (<a href=\"http://en.wikipedia.org/wiki/Increment_and_decrement_operators\" rel=\"nofollow noreferrer\">wiki-link</a>) if you want to decrement the variable before the value is passed. On the other hand, a post-decrement evaluates the expression before the variable is decremented:</p>\n<pre><code>int n = 10, x;\nx = --n;                // both are 9\n</code></pre>\n<p>and</p>\n<pre><code>int n = 10, x;\nx = n--;                // x = 10, i = 9\n</code></pre>\n<p><strong>Why not to use pre-decrement in your case?::</strong> <code>n*facto(n--)</code> causes <a href=\"https://stackoverflow.com/questions/4176328/undefined-behavior-and-sequence-points\">UB</a>.\n<strong>Why?</strong></p>\n<blockquote>\n<p id=\"so_22405031_22405182_0\">The Standard in \u00a75/4 says</p>\n<p id=\"so_22405031_22405182_1\">Between the previous and next sequence point a scalar object shall\n  have its stored value modified at most once by the evaluation of an\n  expression.</p>\n</blockquote>\n<p>and</p>\n<blockquote>\n<p id=\"so_22405031_22405182_2\">The prior value shall be accessed only to determine the value to be\n  stored.</p>\n</blockquote>\n<p>It means, that between two sequence points a variable must not be modified more than once and, if an object is written to within a full expression, any and all accesses to it within the same expression must be directly involved in the computation of the value to be written.</p>\n", "OwnerUserId": "1182192", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:15:15.653", "Id": "22405182", "Score": "5", "CreationDate": "2014-03-14T12:36:18.697", "LastActivityDate": "2014-03-14T13:07:58.847"}, "22405061": {"ParentId": "22405031", "PostTypeId": "2", "CommentCount": "10", "Body": "<p>Currently, by using <code>n--</code> you are passing the original and therefore unmodified value of <code>n</code> into <code>facto</code> which is causing a loop.</p>\n<p>You need to use <code>n - 1</code> instead. It would, on the face of it, be tempting to use <code>--n</code> since that would decrement <code>n</code> and evaluate to the new (lower) value. But <code>--n</code> will give you <em>undefined behaviour</em> since you are pre-multiplying the function return value by <code>n</code> and since <code>*</code> is not a <em>sequence point</em>, the value of <code>n</code> is not well-defined.</p>\n<p>(By the way, the behaviour in C would have been identical).</p>\n<p>[Edit: acknowledge Mike Seymour on the undefined behaviour point].</p>\n", "OwnerUserId": "2380830", "LastEditorUserId": "2380830", "LastEditDate": "2014-03-14T12:54:14.333", "Id": "22405061", "Score": "12", "CreationDate": "2014-03-14T12:31:33.680", "LastActivityDate": "2014-03-14T12:54:14.333"}, "22405031": {"CommentCount": "11", "ViewCount": "234", "PostTypeId": "1", "LastEditorUserId": "3296146", "CreationDate": "2014-03-14T12:30:13.723", "LastActivityDate": "2014-03-14T13:14:07.787", "Title": "Decrement Operator in C++", "AcceptedAnswerId": "22405182", "LastEditDate": "2014-03-14T13:14:07.787", "Id": "22405031", "Score": "3", "Body": "<p>I am from C background, and now I am learning OOP using C++</p>\n<p>Below is a program that calculates factorial. </p>\n<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nvoid main ()\n{\n    char dummy;\n    _int16 numb;\n    cout &lt;&lt; \"Enter a number: \";\n    cin &gt;&gt; numb;\n\n    double facto(_int16);\n\n    cout &lt;&lt; \"factorial = \" &lt;&lt;facto(numb);\n    cin &gt;&gt; dummy;\n}\n\ndouble facto( _int16 n )\n{\n    if ( n&gt;1 )\n        return ( n*facto(n-1) );\n    else\n        return 1;\n}\n</code></pre>\n<p>The above code works fine.</p>\n<p>But if I replace the return statement</p>\n<pre><code>    return ( n*facto(n-1) );  \n</code></pre>\n<p>with this  </p>\n<pre><code>    return ( n*facto(n--) );\n</code></pre>\n<p>then it doesn't work. The <strong><em>n--</em></strong> won't decrement <em>n</em> by 1. Why?</p>\n<p>I am using Visual Studio 2012</p>\n<p><strong>Edit:Got it! thanks :)</strong><br>\n*<em>also, I would like to add to the answers below: using --n will cause the <code>n</code> to decrement before the statement is executed. So, due to pre-decrement, the expression will become <code>(n-1)*facto(n-1)</code> . That is why it is better not to use pre-decrement in this case *</em></br></p>\n", "Tags": "<c++><function><recursion><operator-keyword>", "OwnerUserId": "3296146", "AnswerCount": "3"}, "22405104": {"ParentId": "22405031", "CommentCount": "2", "Body": "<p><code>return ( n*facto(n--) );</code></p>\n<p>You are  using the post decrement operator. \nWhat happens is, You pass the value of <code>n</code> to the function and then decrement it. That doesn't affect the value that is already passed to the function</p>\n", "OwnerUserId": "2087705", "PostTypeId": "2", "Id": "22405104", "Score": "0", "CreationDate": "2014-03-14T12:33:14.670", "LastActivityDate": "2014-03-14T12:33:14.670"}, "bq_ids": {"n4140": {"so_22405031_22405182_2": {"section_id": 6536, "quality": 0.5714285714285714, "length": 4}}, "n3337": {"so_22405031_22405182_2": {"section_id": 6291, "quality": 0.5714285714285714, "length": 4}}, "n4659": {"so_22405031_22405182_2": {"section_id": 8018, "quality": 0.5714285714285714, "length": 4}}}});