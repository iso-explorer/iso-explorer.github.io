post_cb({"7258363": {"CommentCount": "0", "ViewCount": "620", "CreationDate": "2011-08-31T14:21:29.893", "LastActivityDate": "2011-08-31T14:50:12.243", "Title": "Why can I call the private constructor from ?global scope?", "AcceptedAnswerId": "7258397", "PostTypeId": "1", "Id": "7258363", "Score": "9", "Body": "<p>this code compiles and runs without errors:</p>\n<pre><code>class foo{\n  static foo *ref;\n  foo(){}\n  public:\n    static foo *getRef(){\n      return ref;\n    }\n    void bar(){}\n};\n\nfoo* foo::ref = new foo; // the construcrtor is private!\n\nint main(int argc, const char *argv[])\n{\n  foo* f = foo::getRef();\n  f-&gt;bar();\n  return 0;\n}\n</code></pre>\n<p>could somebody explain why can the constructor be called?</p>\n", "Tags": "<c++>", "OwnerUserId": "907828", "AnswerCount": "3"}, "7258467": {"ParentId": "7258363", "CommentCount": "0", "Body": "<p>The answer is that it is not available in the global scope. The initializer of a static member is defined to be <em>inside</em> the class scope, so it has access to the private members.</p>\n<blockquote>\n<p id=\"so_7258363_7258467_0\">\u00a79.4.2/2 [...]The initializer expression in the definition of a static data member is in the scope of its class (3.3.6).</p>\n</blockquote>\n", "OwnerUserId": "36565", "PostTypeId": "2", "Id": "7258467", "Score": "10", "CreationDate": "2011-08-31T14:27:09.823", "LastActivityDate": "2011-08-31T14:27:09.823"}, "7258397": {"ParentId": "7258363", "CommentCount": "1", "Body": "<p>That scope isn't global - static members are at class scope, and so their initialization expression is also at class scope.</p>\n", "OwnerUserId": "298661", "PostTypeId": "2", "Id": "7258397", "Score": "15", "CreationDate": "2011-08-31T14:23:35.723", "LastActivityDate": "2011-08-31T14:23:35.723"}, "bq_ids": {"n4140": {"so_7258363_7258467_0": {"section_id": 5907, "quality": 0.75, "length": 9}}, "n3337": {"so_7258363_7258467_0": {"section_id": 5679, "quality": 0.75, "length": 9}}, "n4659": {"so_7258363_7258467_0": {"section_id": 7389, "quality": 0.75, "length": 9}}}, "7258511": {"ParentId": "7258363", "LastEditDate": "2011-08-31T14:50:12.243", "CommentCount": "3", "CreationDate": "2011-08-31T14:30:52.270", "OwnerUserId": "598824", "LastEditorUserId": "598824", "PostTypeId": "2", "Id": "7258511", "Score": "-2", "Body": "<p>This form of initialization of static members are not necessary in older c++. They are made compulsary in  later release of c++.</p>\n<p>And, this form of static member initialization will generally used to initialize the static members before creation of any class objects.</p>\n<pre><code>(E.g)  int MyClass::objectsCounter=0;\n</code></pre>\n<p>But by, </p>\n<pre><code>foo* foo::ref = new foo;\n</code></pre>\n<p>this statement you are just initializing a static member (which is of pointer type) by creating a new object.</p>\n<p>And in this case you are intializing a private member by calling a private method of its own class. </p>\n<p>Hence there is no role of globe scope here.</p>\n", "LastActivityDate": "2011-08-31T14:50:12.243"}});