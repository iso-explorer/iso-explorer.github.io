post_cb({"bq_ids": {"n4140": {"so_5566245_5566410_0": {"section_id": 7210, "quality": 1.0, "length": 9}, "so_5566245_5566373_0": {"section_id": 7210, "quality": 1.0, "length": 9}, "so_5566245_5566314_1": {"section_id": 7210, "quality": 1.0, "length": 15}}, "n3337": {"so_5566245_5566410_0": {"section_id": 6954, "quality": 1.0, "length": 9}, "so_5566245_5566373_0": {"section_id": 6954, "quality": 1.0, "length": 9}, "so_5566245_5566314_1": {"section_id": 6954, "quality": 1.0, "length": 15}}, "n4659": {"so_5566245_5566410_0": {"section_id": 8719, "quality": 1.0, "length": 9}, "so_5566245_5566373_0": {"section_id": 8719, "quality": 1.0, "length": 9}, "so_5566245_5566314_1": {"section_id": 8719, "quality": 1.0, "length": 15}}}, "5566373": {"ParentId": "5566245", "PostTypeId": "2", "CommentCount": "16", "Body": "<p><code>char</code>, <code>signed char</code> and <code>unsigned char</code> are three <strong>distinct</strong> types, even if <code>char</code> is interpreted in the same way as <code>signed char</code> is interpreted by your compiler. </p>\n<p>\u00a73.9.1/1 from the C++ Standard says</p>\n<blockquote>\n<p id=\"so_5566245_5566373_0\">Plain char, signed char, and unsigned char are three <strong>distinct</strong> types.</p>\n</blockquote>\n<p>In other words,  dont think of <code>char</code>  as short-form of <code>signed char</code>, because it's not.</p>\n<p>Just to emphasize how types could be <em>different</em> despite their bit interpretation being <em>same</em>, consider these two structs:</p>\n<pre><code>struct A\n{\n   int i;\n};\n\nstruct B\n{\n   int i;\n};\n</code></pre>\n<p>Are they same? Of course not. Exactly in the same way, <code>char</code> and <code>signed char</code> are distinct types.</p>\n<p>Try this:</p>\n<pre><code> cout &lt;&lt; std::is_same&lt;A,B&gt;::value;\n</code></pre>\n", "OwnerUserId": "415784", "LastEditorUserId": "415784", "LastEditDate": "2011-04-06T12:44:50.127", "Id": "5566373", "Score": "2", "CreationDate": "2011-04-06T12:30:20.793", "LastActivityDate": "2011-04-06T12:44:50.127"}, "5566463": {"ParentId": "5566245", "CommentCount": "0", "Body": "<p>The three types were introduced at different times. </p>\n<p>From the C99 Rational:</p>\n<blockquote>\n<p id=\"so_5566245_5566463_0\">Three types of <code>char</code> are specified:<br>\n<code>signed</code>, plain, and <code>unsigned</code>. A plain <code>char</code> may be represented as either signed or unsigned\n  depending upon the implementation, as in prior practice. The type <code>signed char</code> was\n  introduced in C89 to make available a one-byte signed integer type on those systems which\n  implement plain <code>char</code> as <code>unsigned char</code>.</br></p>\n</blockquote>\n<p>They have to stay separate types in C++, to allow overloading on <code>char</code> to be portable.</p>\n", "OwnerUserId": "597607", "PostTypeId": "2", "Id": "5566463", "Score": "6", "CreationDate": "2011-04-06T12:38:08.493", "LastActivityDate": "2011-04-06T12:38:08.493"}, "5566282": {"ParentId": "5566245", "CommentCount": "1", "Body": "<p>That depends on the implementation, but if I remember correctly I read somewhere that these two should be different, in order to differentiate c type strings from a 8-bit signed number.</p>\n", "OwnerUserId": "476681", "PostTypeId": "2", "Id": "5566282", "Score": "0", "CreationDate": "2011-04-06T12:24:14.963", "LastActivityDate": "2011-04-06T12:24:14.963"}, "5566245": {"CommentCount": "0", "ViewCount": "147", "PostTypeId": "1", "LastEditorUserId": "377953", "CreationDate": "2011-04-06T12:22:18.817", "LastActivityDate": "2011-04-06T12:44:50.127", "Title": "Why same types are different?", "AcceptedAnswerId": "5566463", "LastEditDate": "2011-04-06T12:25:07.163", "Id": "5566245", "Score": "3", "Body": "<p>Why this (char is signed on my implementation):  </p>\n<p><code>\ncout &lt;&lt; std::is_same&lt; char,signed char&gt;::value; \n</code></p>\n<p>outputs false?</p>\n", "Tags": "<c++><metaprogramming>", "OwnerUserId": "207177", "AnswerCount": "5"}, "5566314": {"ParentId": "5566245", "CommentCount": "0", "Body": "<p>In case you are using Visual Studio, see here: <a href=\"http://msdn.microsoft.com/en-us/library/cc953fe1.aspx\" rel=\"nofollow\">http://msdn.microsoft.com/en-us/library/cc953fe1.aspx</a></p>\n<blockquote>\n<p id=\"so_5566245_5566314_0\">The C++ compiler treats variables of\n  type char, <strong>signed</strong> char, and unsigned\n  char as having different types.\n  Variables of type char are promoted to\n  int as if they are type signed char by\n  default, unless the /J compilation\n  option is used. In this case they are\n  treated as type unsigned char and are\n  promoted to int without sign\n  extension.</p>\n</blockquote>\n<p><strong>[Edit]</strong> Straight from the ISO C++0x Standard, paragraph 3.9.1 (page 71, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3092.pdf\" rel=\"nofollow\">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3092.pdf</a>):</p>\n<blockquote>\n<p id=\"so_5566245_5566314_1\">Characters can be explicitly declared\n  unsigned or signed. Plain char, signed\n  char, and unsigned char are three\n  distinct types.</p>\n</blockquote>\n", "OwnerUserId": "255803", "PostTypeId": "2", "Id": "5566314", "Score": "4", "CreationDate": "2011-04-06T12:26:36.303", "LastActivityDate": "2011-04-06T12:26:36.303"}, "5566410": {"ParentId": "5566245", "CommentCount": "0", "Body": "<p>C++ Standard (quoting Working Draft \u21163225, 2010-11-27)</p>\n<p>3.9.1 Fundamental types</p>\n<blockquote>\n<p id=\"so_5566245_5566410_0\">Plain char, signed char, and unsigned\n  char are three distinct types.</p>\n</blockquote>\n", "OwnerUserId": "23252", "PostTypeId": "2", "Id": "5566410", "Score": "1", "CreationDate": "2011-04-06T12:32:56.043", "LastActivityDate": "2011-04-06T12:32:56.043"}});