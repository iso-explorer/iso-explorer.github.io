post_cb({"bq_ids": {"n4140": {"so_32945739_32946005_0": {"length": 24, "quality": 0.8275862068965517, "section_id": 3341}, "so_32945739_32946005_1": {"length": 13, "quality": 0.9285714285714286, "section_id": 3341}, "so_32945739_32946005_3": {"length": 8, "quality": 0.6666666666666666, "section_id": 3342}}, "n3337": {"so_32945739_32946005_0": {"length": 22, "quality": 0.7586206896551724, "section_id": 3211}, "so_32945739_32946005_1": {"length": 13, "quality": 0.9285714285714286, "section_id": 3211}, "so_32945739_32946005_3": {"length": 8, "quality": 0.6666666666666666, "section_id": 3212}}, "n4659": {"so_32945739_32946005_0": {"length": 18, "quality": 0.6206896551724138, "section_id": 7673}, "so_32945739_32946005_1": {"length": 11, "quality": 0.7857142857142857, "section_id": 7673}, "so_32945739_32946005_3": {"length": 7, "quality": 0.5833333333333334, "section_id": 7674}}}, "32945739": {"ViewCount": "209", "Body": "<p>I have the following structure in the legacy codebase:</p>\n<pre><code>try{\n...\n}\ncatch(Type1&amp;){\n...\n}\ncatch(Type2&amp;){\n...\n}\n...\n</code></pre>\n<p>And with copy-paste development, the same catch blocks show up everywhere.\nNow, I would write a function like this:</p>\n<pre><code>void catchErrors(){\n  try{\n    throw;\n  }\n  catch(Type1&amp;){\n    ...\n  }\n  ...\n}\n</code></pre>\n<p>and put it into the code like this:</p>\n<pre><code>try{\n  ...\n}\ncatch(...){\n  catchErrors();\n}\n</code></pre>\n<p>Will this be a valid refactor, resulting in the same functionality?<br>\n(And do you have any better suggestion for the refactor?)</br></p>\n", "AcceptedAnswerId": "32946005", "Title": "Can I still rethrow an exception from within a function called within a catch block?", "CreationDate": "2015-10-05T09:56:43.680", "Id": "32945739", "CommentCount": "10", "LastEditDate": "2015-10-05T10:11:06.917", "PostTypeId": "1", "LastEditorUserId": "560648", "LastActivityDate": "2015-10-05T10:27:44.107", "Score": "2", "OwnerUserId": "1031191", "Tags": "<c++><try-catch><rethrow>", "AnswerCount": "2"}, "32946350": {"Id": "32946350", "PostTypeId": "2", "Body": "<p>Yes, your refactoring is valid.  In fact, it is a fairly old technique, designed precisely to move the set of exception handlers into another function, and allow their reuse.</p>\n<p>Note that calling your <code>CatchErrors()</code> will call <code>std::terminate()</code> if it is called outside of an exception handling block.   That is required from a <code>throw;</code> statement if no exception is being handled.</p>\n<p>Just don't rely on the technique too much.    It is better to design the majority of your functions with some exception safety guarantees (i.e. they will not malfunction if an exception is thrown and they don't call it).  That allows more chance of centralising your exception handling (e.g. in <code>main()</code>) rather than having lots of distinct functions that must each process exceptions separately.  Doing that reduces the need to reuse exception handling code, since most exceptions will be handled in only one place.</p>\n", "LastActivityDate": "2015-10-05T10:27:44.107", "CommentCount": "0", "CreationDate": "2015-10-05T10:27:44.107", "ParentId": "32945739", "Score": "3", "OwnerUserId": "4706785"}, "32946005": {"Id": "32946005", "PostTypeId": "2", "Body": "<p><strong>Yes, that's valid.</strong></p>\n<blockquote>\n<p id=\"so_32945739_32946005_0\"><code>[C++14: 15.1/8]</code>: A <em>throw-expression</em> with no operand rethrows the currently handled exception (15.3). The exception is reactivated with the existing exception object; no new exception object is created. The exception is no\n  longer considered to be caught; therefore, the value of <code>std::uncaught_exception()</code> will again be true.</p>\n<p id=\"so_32945739_32946005_1\"><em>[ Example:</em> code that must be executed because of an exception yet cannot completely handle the exception can be written like this:</p>\n<pre><code>try {\n  // ...\n} catch (...) { // catch all exceptions\n  // respond (partially) to exception\n  throw; // pass the exception to some\n  // other handler\n}\n</code></pre>\n<p id=\"so_32945739_32946005_2\"><em>\u2014end example ]</em></p>\n<p id=\"so_32945739_32946005_3\"><code>[C++14: 15.1/9]:</code> If no exception is presently being handled, executing a throw-expression with no operand calls <code>std::terminate()</code> (15.5.1).</p>\n</blockquote>\n<p>Although the <em>throw-expression</em> has been moved into its own function, during its execution an exception is still being handled, so it still works:</p>\n<pre><code>#include &lt;iostream&gt;\n\nvoid bar()\n{\n    try {\n        throw;\n    }\n    catch (int x) {\n        std::cerr &lt;&lt; \"Damn \" &lt;&lt; x &lt;&lt; \"!\\n\";\n    }\n}\n\nvoid foo()\n{\n    try {\n        throw 42;\n    }\n    catch (...) {\n        bar();\n    }\n}\n\nint main()\n{\n    foo();\n}\n\n// Output: Damn 42!\n</code></pre>\n<h3>(<a href=\"http://coliru.stacked-crooked.com/a/c2fc88ca8a5f89c8\" rel=\"noreferrer\">live demo</a>)</h3>\n", "LastActivityDate": "2015-10-05T10:09:20.093", "CommentCount": "0", "CreationDate": "2015-10-05T10:09:20.093", "ParentId": "32945739", "Score": "5", "OwnerUserId": "560648"}});