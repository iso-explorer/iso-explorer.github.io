post_cb({"bq_ids": {"n4140": {"so_29787673_29788014_11": {"length": 5, "quality": 0.8333333333333334, "section_id": 5058}, "so_29787673_29788014_5": {"length": 4, "quality": 0.5714285714285714, "section_id": 506}, "so_29787673_29788014_12": {"length": 5, "quality": 0.8333333333333334, "section_id": 5058}}, "n3337": {"so_29787673_29788014_11": {"length": 5, "quality": 0.8333333333333334, "section_id": 4855}, "so_29787673_29788014_5": {"length": 4, "quality": 0.5714285714285714, "section_id": 497}, "so_29787673_29788014_12": {"length": 5, "quality": 0.8333333333333334, "section_id": 4855}}, "n4659": {"so_29787673_29788014_11": {"length": 5, "quality": 0.8333333333333334, "section_id": 6479}, "so_29787673_29788014_5": {"length": 4, "quality": 0.5714285714285714, "section_id": 527}, "so_29787673_29788014_12": {"length": 5, "quality": 0.8333333333333334, "section_id": 6479}}}, "29788014": {"Id": "29788014", "PostTypeId": "2", "Body": "<p>Currently, this is an issue with the specification, as described in <a href=\"http://cplusplus.github.io/LWG/lwg-active.html#2343\" rel=\"nofollow\">LWG issue 2343</a>.</p>\n<p>In summary, there is currently no portable way to enable multiline mode in C++ regex.</p>\n<blockquote>\n<p id=\"so_29787673_29788014_0\"><strong>2343. Is the value of the ECMA-262 RegExp object's multiline property really false?</strong></p>\n<p id=\"so_29787673_29788014_1\">In the following \"Multiline\" is the value of the ECMA-262 RegExp object's multiline property.</p>\n<p id=\"so_29787673_29788014_2\">In ECMA-262, there are some definitions that relate to <code>Multiline</code>:</p>\n<ul>\n<li><p id=\"so_29787673_29788014_3\">ECMA-262 15.10.2.6:</p>\n<ul>\n<li><p id=\"so_29787673_29788014_4\">If <code>Multiline</code> is true, <code>^</code> matches just after <code>LineTerminator</code>.</p></li>\n<li><p id=\"so_29787673_29788014_5\">If <code>Multiline</code> is false, <code>^</code> does not match just after <code>LineTerminator</code>.</p></li>\n<li><p id=\"so_29787673_29788014_6\">If <code>Multiline</code> is true, <code>$</code> matches just before <code>LineTerminator</code>.</p></li>\n<li><p id=\"so_29787673_29788014_7\">If <code>Multiline</code> is false, <code>$</code> does not match just before <code>LineTerminator</code>.</p></li>\n</ul></li>\n<li><p id=\"so_29787673_29788014_8\">ECMA-262 15.10.4.1, 15.10.7.4:</p>\n<ul>\n<li>By default, <code>Multiline</code> is <code>false</code>. </li>\n</ul></li>\n</ul>\n<p id=\"so_29787673_29788014_9\">So, the C++11 standard says that <code>Multiline</code> is <code>false</code>. As it is <code>false</code>, <code>^</code> matches only the beginning of the string, and <code>$</code> matches only the end of the string.</p>\n<p id=\"so_29787673_29788014_10\">However, two flags are defined in 28.5.2 [re.matchflag] Table 139:</p>\n<ul>\n<li><p id=\"so_29787673_29788014_11\"><code>match_not_bol</code>: the character <code>^</code> in the regular expression shall not match [first,first).</p></li>\n<li><p id=\"so_29787673_29788014_12\"><code>match_not_eol</code>: the character <code>$</code> in the regular expression shall not match [last,last).</p></li>\n</ul>\n<p id=\"so_29787673_29788014_13\">As <code>Multiline</code> is false, the <code>match_not_bol</code> and the <code>match_not_eol</code> are meaningless because they only make <code>^</code> and <code>$</code> match none.</p>\n<p id=\"so_29787673_29788014_14\">In my opinion, <code>Multiline</code> should be <code>true</code>.</p>\n<p id=\"so_29787673_29788014_15\">FYI, <code>Multiline</code> of the existing implementations are as follows:</p>\n<p id=\"so_29787673_29788014_16\"><code>Multiline=false</code>:</p>\n<ul>\n<li>libstdc++ r206594</li>\n<li>libc++ r199174</li>\n</ul>\n<p id=\"so_29787673_29788014_17\"><code>Multiline=true</code>:</p>\n<ul>\n<li>Visual Studio Express 2013</li>\n<li>boost 1.55</li>\n</ul>\n</blockquote>\n<p>Read more about the <a href=\"http://en.cppreference.com/w/cpp/regex/ecmascript\" rel=\"nofollow\">Modified ECMAScript regular expression grammar</a> on cppreference.</p>\n", "LastEditorUserId": "1400768", "LastActivityDate": "2015-04-22T05:02:36.620", "Score": "1", "CreationDate": "2015-04-22T04:53:10.433", "ParentId": "29787673", "CommentCount": "2", "OwnerUserId": "1400768", "LastEditDate": "2015-04-22T05:02:36.620"}, "29787673": {"ViewCount": "76", "Body": "<p>I want to use <code>^</code> and <code>$</code> to match strings at the beginning and end of lines, respectively. For example:</p>\n<pre><code>std::string multiline = \"fifth\\nsixth\\nseventh\\neighth\\nninth\";\nstd::cout &lt;&lt; regex_search(multiline, std::regex(\"^s\")) &lt;&lt; endl;\n</code></pre>\n<p>prints <code>0</code>. In Python one could use <code>re.compile('^s', re.MULTILINE)</code>; is there a good way to do this in C++?</p>\n", "AcceptedAnswerId": "29788014", "Title": "Does C++'s std::regex have an equivalent to Python's re.MULTILINE?", "CreationDate": "2015-04-22T04:17:27.007", "Id": "29787673", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2015-04-22T05:02:36.620", "Score": "2", "OwnerUserId": "3161525", "Tags": "<c++><regex>", "AnswerCount": "1"}});