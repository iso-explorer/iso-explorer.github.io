post_cb({"bq_ids": {"n4140": {"so_10480359_10480474_0": {"length": 20, "quality": 0.8695652173913043, "section_id": 5962}}, "n3337": {"so_10480359_10480474_0": {"length": 20, "quality": 0.8695652173913043, "section_id": 5731}}, "n4659": {"so_10480359_10480474_0": {"length": 17, "quality": 0.7391304347826086, "section_id": 7451}}}, "10480474": {"Id": "10480474", "PostTypeId": "2", "Body": "<p>The result of a lambda expression is a closure object, and the type of the closure object is unknowable. You can <em>only</em> use <code>auto</code> to declare a variable of its exact type.</p>\n<p>However, you can <strong>convert</strong> a closure object into a suitable instance of an <code>std::function</code>, and if the lambda is non-capturing, you can even convert it to a function pointer. However, this conversion may come at a (significant) cost, so you should prefer using <code>auto</code> as much as possible to handle the actual closure type.</p>\n<p>The same goes for <code>bind</code> expressions.</p>\n<p>The relevant standard section is 5.1.2(3):</p>\n<blockquote>\n<p id=\"so_10480359_10480474_0\">The type of the lambda-expression (which is also the type of the closure object) is a unique, unnamed non-union class type \u2014 called the closure type \u2014 whose properties are described below. This class type is not an aggregate.</p>\n</blockquote>\n<p>That said, I'm not sure how the special AMP extensions behave in this context, and it's conceivable that AMP-restricted lambdas are <em>not</em> convertible to anything else. I'll try and look this up in the AMP specification.</p>\n<p><strong>Update:</strong> Sections 2.2.3 and 2.3 of the <a href=\"http://download.microsoft.com/download/4/0/E/40EA02D8-23A7-4BD2-AD3A-0BFFFB640F28/CppAMPLanguageAndProgrammingModel.pdf\" rel=\"nofollow\">AMP Specification</a> seem to apply to this question.</p>\n", "LastEditorUserId": "596781", "LastActivityDate": "2012-05-07T10:56:38.660", "Score": "5", "CreationDate": "2012-05-07T10:28:23.413", "ParentId": "10480359", "CommentCount": "3", "OwnerUserId": "596781", "LastEditDate": "2012-05-07T10:56:38.660"}, "10480359": {"ViewCount": "481", "Body": "<p>I can create <code>restrict(amp)</code> function as follows:</p>\n<pre><code>auto f = [](int&amp; item) restrict(amp) {item += 1;};\n</code></pre>\n<p>And I can use this function in other <code>restrict(amp)</code> functions, for example:</p>\n<pre><code>concurrency::parallel_for_each(av.extent,\n    [=](concurrency::index&lt;1&gt; idx) restrict(amp) \n    { \n      f(av[idx]); \n    }\n);\n</code></pre>\n<p>What type of substituted instead \"<code>auto</code>\" after compilation? I tried to use the \"std::function\":</p>\n<pre><code>std::function&lt;void (int&amp;) restrict(amp)&gt; f\n           = [](int&amp; item) restrict(amp) {item += 1;};\n</code></pre>\n<p>but received a compile error.</p>\n<p>Thank you for your attention!</p>\n", "AcceptedAnswerId": "10480474", "Title": "restrict(amp) function type", "CreationDate": "2012-05-07T10:18:42.383", "Id": "10480359", "CommentCount": "6", "LastEditDate": "2012-05-07T10:48:26.833", "PostTypeId": "1", "LastEditorUserId": "193128", "LastActivityDate": "2012-05-07T10:56:38.660", "Score": "2", "OwnerUserId": "1967661", "Tags": "<c++><lambda><gpgpu><ppl><c++-amp>", "AnswerCount": "1"}});