post_cb({"28470089": {"ParentId": "28469604", "LastEditDate": "2015-02-14T05:35:35.297", "CommentCount": "4", "CreationDate": "2015-02-12T05:38:10.877", "OwnerUserId": "434551", "LastEditorUserId": "434551", "PostTypeId": "2", "Id": "28470089", "Score": "1", "Body": "<p>Question:</p>\n<blockquote>\n<p id=\"so_28469604_28470089_0\">What's the definition of the instantiation of the template specialization, not just the instantiation of a template?</p>\n</blockquote>\n<p>My understanding:</p>\n<p>There is no such thing as instantiation of a template. You always instantiate a template specialization.</p>\n<p>If you have:</p>\n<pre><code>template &lt;typename T&gt; struct Foo {};\n\nFoo&lt;int&gt; foo;\n</code></pre>\n<p>you have instantiated the template specialization <code>Foo&lt;int&gt;</code>, not the template <code>Foo</code>.</p>\n<h2>Update</h2>\n<p>Say you have the following class template:</p>\n<pre><code>template &lt;typename T&gt; struct Foo\n{\n   static int a;\n};\n\nint getNext()\n{\n   static int n = 0;\n   return ++n;\n}\n\ntemplate &lt;class T&gt; int Foo&lt;T&gt;::a = getNext();\n</code></pre>\n<p><strong>Explicit template instantiation</strong></p>\n<p>You can create explicit instantiations of <code>Foo&lt;char&gt;</code> and <code>Foo&lt;int&gt;</code> by using:</p>\n<pre><code>template struct Foo&lt;char&gt;;\ntemplate struct Foo&lt;int&gt;;\n</code></pre>\n<p>Even if <code>Foo&lt;char&gt;</code> and <code>Foo&lt;int&gt;</code> are not used anywhere else in your code, the class template is instantiated for <code>char</code> and <code>int</code>.</p>\n<p><strong>Explicit template specialization</strong></p>\n<p>You can create explicit specializations of the class template by using:</p>\n<pre><code>template &lt;&gt; Foo&lt;double&gt; {};\n</code></pre>\n<p><strong>Use of <code>Foo</code></strong></p>\n<p>Now, let's see the use of <code>Foo</code>.</p>\n<pre><code>Foo&lt;int&gt; f1;    // An explicit instantiation has already been created.\n                // No need for any further code creation.\n\nFoo&lt;double&gt; f2; // An explicit specialization has already been created.\n                // No need for any further code creation.\n\nFoo&lt;long&gt; f3;   // There is no explicit instantiation or explicit specialization\n                // Code needs to be created for Foo&lt;long&gt;\n</code></pre>\n<p>The third case, <code>Foo&lt;long&gt; f3;</code> triggers creation of the template specialization <code>Foo&lt;long&gt;</code>. I interpret the phrase <em>\"class template specialization is implicitly instantiated\"</em> to mean <em>\"creation of <code>Foo&lt;long&gt;</code> from the class template.\"</em>.</p>\n", "LastActivityDate": "2015-02-14T05:35:35.297"}, "28470316": {"ParentId": "28469604", "CommentCount": "0", "Body": "<p>Yes,I think Sahu is right.</p>\n<p>Let me explain,\nA template is a type of infinite, so we cannot instantiate a template, we can only be instantiated template specialization.</p>\n<p>N4140,14.7 [temp.spec]:</p>\n<blockquote>\n<p id=\"so_28469604_28470316_0\"><strong>An instantiated template specialization</strong> can be either implicitly instantiated (14.7.1) for a given argument list or be explicitly\n  instantiated (14.7.2). A specialization is a class, function, or class\n  member that is either instantiated or explicitly specialized (14.7.3).</p>\n</blockquote>\n", "OwnerUserId": "2593814", "PostTypeId": "2", "Id": "28470316", "Score": "0", "CreationDate": "2015-02-12T05:55:46.587", "LastActivityDate": "2015-02-12T05:55:46.587"}, "28472083": {"ParentId": "28469604", "LastEditDate": "2017-09-15T17:27:02.483", "CommentCount": "0", "CreationDate": "2015-02-12T07:52:47.727", "OwnerUserId": "3647361", "LastEditorUserId": "3647361", "PostTypeId": "2", "Id": "28472083", "Score": "-1", "Body": "<p>\"Instantiating a template specialization\" typically refers to the process of implicit instantiation: substituting specific template arguments into a template definition to obtain an instantiated class, function, etc. Instantiating a template means instantiating a specialization of that template. Usually, the less precise phrasing is used when we're talking about some arbitrary instantiation in the context of language lawyering. You will also find the expression \"instantiation of a template\", which is synonymous with the instantiated specialization. </p>\n", "LastActivityDate": "2017-09-15T17:27:02.483"}, "28469604": {"CommentCount": "1", "CreationDate": "2015-02-12T04:57:34.800", "PostTypeId": "1", "AcceptedAnswerId": "28472083", "LastEditorUserId": "434551", "LastActivityDate": "2017-09-15T17:27:02.483", "AnswerCount": "3", "LastEditDate": "2015-02-12T05:11:31.850", "ViewCount": "1207", "FavoriteCount": "1", "Title": "Template specialization and instantiation", "Id": "28469604", "Score": "6", "Body": "<p>These concepts is a bit unclear to me. Well, template instantiation's defined pretty well by <code>N4296::14.7 [temp.spec]</code>:</p>\n<blockquote>\n<p id=\"so_28469604_28469604_0\">The act of instantiating a function, a class, a member of a class\n  template or a member template is referred to as template\n  instantiation.</p>\n</blockquote>\n<p>That's if we have a function/variable/class template, instantiation of the template is just creating an object or function. For instance:</p>\n<pre><code>template&lt;typename T&gt; class U{ };\nU&lt;int&gt; a; //instantiation\n</code></pre>\n<p>But <code>N4296:14.7.1 [temp.inst]</code> says (Emphasize mine):</p>\n<blockquote>\n<p id=\"so_28469604_28469604_1\">Unless <em>a class template specialization has been explicitly</em>\n<em>instantiated</em> (14.7.2) or explicitly specialized (14.7.3), the class\n  template specialization is implicitly instantiated when the\n  specialization is referenced in a context that requires a\n  completely-defined object type or when the completeness of the class\n  type affects the semantics of the program.</p>\n</blockquote>\n<p>What's the definition of the instantiation of the <em>template specialization</em>, not just the instantiation of a template?</p>\n", "Tags": "<c++><templates>", "OwnerDisplayName": "user2953119"}, "bq_ids": {"n4140": {"so_28469604_28470316_0": {"section_id": 230, "quality": 0.875, "length": 21}, "so_28469604_28470089_0": {"section_id": 143, "quality": 0.625, "length": 5}, "so_28469604_28469604_0": {"section_id": 227, "quality": 0.8461538461538461, "length": 11}, "so_28469604_28469604_1": {"section_id": 233, "quality": 0.9, "length": 27}}, "n3337": {"so_28469604_28470316_0": {"section_id": 223, "quality": 0.875, "length": 21}, "so_28469604_28470089_0": {"section_id": 137, "quality": 0.625, "length": 5}, "so_28469604_28469604_0": {"section_id": 220, "quality": 0.8461538461538461, "length": 11}, "so_28469604_28469604_1": {"section_id": 226, "quality": 0.9, "length": 27}}, "n4659": {"so_28469604_28470316_0": {"section_id": 238, "quality": 0.875, "length": 21}, "so_28469604_28470089_0": {"section_id": 147, "quality": 0.625, "length": 5}, "so_28469604_28469604_0": {"section_id": 235, "quality": 0.8461538461538461, "length": 11}, "so_28469604_28469604_1": {"section_id": 242, "quality": 0.9, "length": 27}}}});