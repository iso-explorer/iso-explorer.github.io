post_cb({"bq_ids": {"n4140": {"so_37005295_37005512_0": {"length": 41, "quality": 0.9318181818181818, "section_id": 5879}}, "n3337": {"so_37005295_37005619_0": {"length": 23, "quality": 0.575, "section_id": 5650}}, "n4659": {"so_37005295_37005512_0": {"length": 41, "quality": 0.9318181818181818, "section_id": 7363}}}, "37005295": {"ViewCount": "115", "Body": "<p>inside a definition like this</p>\n<pre><code>typedef struct \n{\n    myType array[N];\n} myStruct;\n\nmyStruct obj;\n</code></pre>\n<p>can I always assume that ([edit] assuming proper casting will happen which is not the focus of the question here [/edit])</p>\n<pre><code>(&amp;obj == &amp;obj.array[0])\n</code></pre>\n<p>will return TRUE or the should I worry about the compiler introducing extra padding to accomodate the myType alignment requisites? In theory this shouldn't happen as the struct has a single field but I'm not entirely sure about this.</p>\n", "AcceptedAnswerId": "37005619", "Title": "Address of an array declared inside a new struct", "CreationDate": "2016-05-03T13:17:56.550", "Id": "37005295", "CommentCount": "7", "LastEditDate": "2016-05-03T13:53:15.503", "PostTypeId": "1", "LastEditorUserId": "5325067", "LastActivityDate": "2016-05-03T17:27:05.583", "Score": "5", "OwnerUserId": "5325067", "Tags": "<c++><c><compilation>", "AnswerCount": "2"}, "37005512": {"Id": "37005512", "PostTypeId": "2", "Body": "<p>According to the current C++ standard draft <a href=\"http://eel.is/c++draft/class.mem#24\" rel=\"nofollow\">[class.mem] \u00a720 (N4527)</a>, emphasis added:</p>\n<blockquote>\n<p id=\"so_37005295_37005512_0\">If a standard-layout class object has any non-static data members, <strong><em>its address is the same as the address\n  of its first non-static data member</em></strong>. Otherwise, its address is the same as the address of its first base class\n  subobject (if any). [ Note: There might therefore be unnamed padding within a standard-layout struct\n  object, <strong><em>but not at its beginning, as necessary to achieve appropriate alignment</em></strong>. \u2014 end note ]</p>\n</blockquote>\n<p>Whether <code>myStruct</code> is standard-layout, depends on whether <code>myType</code> is standard-layout. If it is, then what you're asking is guaranteed by the c++ standard.</p>\n<p>Note that <code>&amp;obj</code> and <code>&amp;obj.array[0]</code> have unrelated pointer types, so the expression is not legal in c++.</p>\n", "LastEditorUserId": "2079303", "LastActivityDate": "2016-05-03T17:27:05.583", "Score": "6", "CreationDate": "2016-05-03T13:27:02.257", "ParentId": "37005295", "CommentCount": "0", "OwnerUserId": "2079303", "LastEditDate": "2016-05-03T17:27:05.583"}, "37005619": {"Id": "37005619", "PostTypeId": "2", "Body": "<p>With a proper cast, this will always return true.</p>\n<p>From section 6.7.2.1 of the <a href=\"http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf\">C standard</a>:</p>\n<blockquote>\n<p id=\"so_37005295_37005619_0\"><em>13.</em> Within  a  structure  object,  the  non-bit-field  members  and  the  units  in  which  bit-fields reside have addresses that increase\n  in the order in which they are declared.  <strong>A pointer to a structure \n  object,  suitably  converted,  points  to  its  initial  member</strong>  (or \n  if  that  member  is  a bit-field,  then  to  the  unit  in  which  it\n  resides),  and  vice  versa.   <strong>There may  be  unnamed padding within a\n  structure object, but not at its beginning.</strong></p>\n</blockquote>\n", "LastActivityDate": "2016-05-03T13:30:42.947", "CommentCount": "1", "CreationDate": "2016-05-03T13:30:42.947", "ParentId": "37005295", "Score": "6", "OwnerUserId": "1687119"}});