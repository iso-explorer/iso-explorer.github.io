post_cb({"bq_ids": {"n4140": {"so_20810378_20810439_2": {"length": 17, "quality": 0.6071428571428571, "section_id": 3271}, "so_20810378_20810439_0": {"length": 12, "quality": 0.8, "section_id": 370}, "so_20810378_20810439_1": {"length": 6, "quality": 0.6666666666666666, "section_id": 5419}}, "n3337": {"so_20810378_20810439_2": {"length": 25, "quality": 0.8928571428571429, "section_id": 3143}, "so_20810378_20810439_0": {"length": 12, "quality": 0.8, "section_id": 360}, "so_20810378_20810439_1": {"length": 6, "quality": 0.6666666666666666, "section_id": 5214}}, "n4659": {"so_20810378_20810439_2": {"length": 17, "quality": 0.6071428571428571, "section_id": 4029}, "so_20810378_20810439_0": {"length": 12, "quality": 0.8, "section_id": 384}, "so_20810378_20810439_1": {"length": 5, "quality": 0.5555555555555556, "section_id": 6841}}}, "20810439": {"Id": "20810439", "PostTypeId": "2", "Body": "<p>Since the implicit constructor is actually <code>constexpr</code> in your case\u2026</p>\n<blockquote>\n<p id=\"so_20810378_20810439_0\"><code>[C++11: 12.1/6]:</code> <em>[..]</em> If that user-written default constructor would satisfy the requirements of a <code>constexpr</code> constructor (7.1.5), the implicitly-defined default constructor is <code>constexpr</code>. <em>[..]</em></p>\n<p id=\"so_20810378_20810439_1\"><code>[C++11: 7.1.5/3]:</code> The definition of a <code>constexpr</code> function shall satisfy the following constraints:</p>\n<ul>\n<li>it shall not be virtual (10.3);</li>\n<li>its return type shall be a literal type;</li>\n<li>each of its parameter types shall be a literal type;</li>\n<li><strong>its function-body shall be</strong> <code>= delete</code>, <strong><code>= default</code></strong>, or a <em>compound-statement</em> that contains only\n  <ul>\n<li>null statements,</li>\n<li><em>static_assert-declarations</em></li>\n<li><code>typedef</code> declarations and <em>alias-declarations</em> that do not define classes or enumerations,</li>\n<li><em>using-declarations</em>,</li>\n<li><em>using-directives</em>,</li>\n<li>and exactly one return statement;</li>\n</ul></li>\n<li>every constructor call and implicit conversion used in initializing the return value (6.6.3, 8.5) shall be one of those allowed in a constant expression (5.19).</li>\n</ul>\n</blockquote>\n<p>\u2026 the declarations are actually equivalent:</p>\n<blockquote>\n<p id=\"so_20810378_20810439_2\"><code>[C++11: 8.4.2/2]:</code> An explicitly-defaulted function may be declared <code>constexpr</code> only if it would have been implicitly declared as <code>constexpr</code>, and may have an explicit <em>exception-specification</em> only if it is compatible (15.4) with the <em>exception-specification</em>\n  on the implicit declaration. <strong>If a function is explicitly defaulted on its first declaration,</strong></p>\n<ul>\n<li><strong>it is implicitly considered to be <code>constexpr</code> if the implicit declaration would be</strong>,</li>\n<li>it is implicitly considered to have the same <em>exception-specification</em> as if it had been implicitly declared (15.4), and</li>\n<li>in the case of a copy constructor, move constructor, copy assignment operator, or move assignment operator, it shall have the same parameter type as if it had been implicitly declared.</li>\n</ul>\n</blockquote>\n<p>So do either \u2014 it doesn't matter.</p>\n<p>In the general case, if you definitely want a constructor to be <code>constexpr</code>, though, it may be wise to leave the keyword in so that you at least get a compiler error if it does not meet the criteria; leaving it out, you may get a non-<code>constexpr</code> constructor without realising it.</p>\n", "LastEditorUserId": "560648", "LastActivityDate": "2013-12-28T02:47:00.700", "Score": "25", "CreationDate": "2013-12-28T02:36:36.937", "ParentId": "20810378", "CommentCount": "0", "OwnerUserId": "560648", "LastEditDate": "2013-12-28T02:47:00.700"}, "20810378": {"ViewCount": "1001", "Body": "<p>Is there a difference between doing:</p>\n<pre><code>X() = default;\n</code></pre>\n<p>and</p>\n<pre><code>constexpr X() = default;\n</code></pre>\n<p>Default-constructing the class within constant expressions work fine, so is there a difference between these two examples? Should I use one over the other?</p>\n", "AcceptedAnswerId": "20810439", "Title": "Should I mark a compiler-generated constructor as constexpr?", "CreationDate": "2013-12-28T02:26:22.867", "Id": "20810378", "CommentCount": "5", "FavoriteCount": "3", "PostTypeId": "1", "LastActivityDate": "2013-12-28T02:47:00.700", "Score": "24", "OwnerUserId": "1935708", "Tags": "<c++><c++11>", "AnswerCount": "1"}});