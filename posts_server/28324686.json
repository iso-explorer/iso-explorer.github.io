post_cb({"bq_ids": {"n4140": {"so_28324686_28324791_0": {"length": 17, "quality": 0.9444444444444444, "section_id": 5908}, "so_28324686_28324791_1": {"length": 10, "quality": 0.5555555555555556, "section_id": 7040}}, "n3337": {"so_28324686_28324791_0": {"length": 17, "quality": 0.9444444444444444, "section_id": 5680}, "so_28324686_28324791_1": {"length": 16, "quality": 0.8888888888888888, "section_id": 6785}}, "n4659": {"so_28324686_28324791_0": {"length": 12, "quality": 0.6666666666666666, "section_id": 7390}, "so_28324686_28324791_1": {"length": 10, "quality": 0.5555555555555556, "section_id": 8537}}}, "28324686": {"ViewCount": "284", "Body": "<p>The following code compiles ok with Intel-2015 but fails with gcc 4.8.3\nWho is right?</p>\n<pre><code>#include &lt;iostream&gt;\n\nvoid f( int const&amp; x ) { std::cout &lt;&lt; x &lt;&lt; std::endl; }\n\nstruct S\n{\n    static constexpr int ce = 42;\n};\n\nint main()\n{\n    f(S::ce);\n\n    return 0;\n}\n</code></pre>\n<p>g++ error:</p>\n<pre><code>/tmp/ccOIxa2V.o: In function `main':\ntest_constexpr.cpp:(.text+0x36): undefined reference to `S::ce'\ncollect2: error: ld returned 1 exit status\n</code></pre>\n", "AcceptedAnswerId": "28324855", "Title": "Intel vs GCC on constexpr", "CreationDate": "2015-02-04T15:09:25.290", "Id": "28324686", "CommentCount": "11", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2015-02-04T16:09:31.557", "LastEditorUserId": "2052436", "LastActivityDate": "2015-02-04T16:09:31.557", "Score": "3", "OwnerUserId": "2052436", "Tags": "<c++><gcc><intel><static-members><constexpr>", "AnswerCount": "2"}, "28324855": {"Id": "28324855", "PostTypeId": "2", "Body": "<p>Because the function <code>f</code> takes a reference argument, there has to be a definition of <code>S::ce</code> that a reference can point to at runtime; the compiler can't just replace the argument with a literal 42.  So you have to add an out-of-class definition:</p>\n<pre><code>const int S::ce;\n</code></pre>\n<p>just like you would with a non-<code>constexpr</code> variable.  This allocates a memory location for the value at runtime, for use by references and other things that couldn't be computed at compile time.</p>\n<p>See <a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=50785\" rel=\"nofollow\">this GCC bug report</a> (which has comments explaining why it isn't actually a bug) for more information.</p>\n", "LastEditorUserId": "146041", "LastActivityDate": "2015-02-04T15:46:41.930", "Score": "4", "CreationDate": "2015-02-04T15:17:17.833", "ParentId": "28324686", "CommentCount": "3", "OwnerUserId": "226975", "LastEditDate": "2015-02-04T15:46:41.930"}, "28324791": {"Id": "28324791", "PostTypeId": "2", "Body": "<p>I think GCC is right. BTW, CLang 3.5.1 gives the same error.</p>\n<p>The thing is that constant static variables are allowed not to be defined only if their address is not taken and they are not bound to references.</p>\n<p>Your example bounds a reference to it, so the explicit definition is needed.</p>\n<p>From the C++11 draft (9.4.2.3), conveniently edited:</p>\n<blockquote>\n<p id=\"so_28324686_28324791_0\">A static data member of literal type can be declared in the class definition with the constexpr specifier; [...] The member shall still be defined in a namespace scope if it is odr-used (3.2) in the program [...].</p>\n</blockquote>\n<p>And in 3.2:</p>\n<blockquote>\n<p id=\"so_28324686_28324791_1\">A variable [...] whose name appears as a potentially-evaluated expression is odr-used unless it is an object that satisfies the requirements for appearing in a constant expression (5.19) and the lvalue-to-rvalue conversion (4.1) is immediately applied.</p>\n</blockquote>\n<p>That lvalue-to-rvalue conversion stuff is, roughly speaking, done everytime the variable is used except when binding a reference or as argument to the unary take-address operator <code>&amp;</code>.</p>\n", "LastEditorUserId": "865874", "LastActivityDate": "2015-02-04T15:22:52.350", "Score": "4", "CreationDate": "2015-02-04T15:14:22.733", "ParentId": "28324686", "CommentCount": "3", "OwnerUserId": "865874", "LastEditDate": "2015-02-04T15:22:52.350"}});