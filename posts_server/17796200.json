post_cb({"17796238": {"ParentId": "17796200", "PostTypeId": "2", "CommentCount": "0", "Body": "<p><strong>23.2.1 General container requirements</strong>, specifically Table 96 <strong>Container Requirements</strong> has</p>\n<blockquote>\n<p id=\"so_17796200_17796238_0\"><code>a.empty()</code> convertible to <code>bool</code>, operational semantics <code>a.begin() == a.end()</code></p>\n</blockquote>\n<p>Then</p>\n<blockquote>\n<p id=\"so_17796200_17796238_1\">6 <code>begin()</code> returns an iterator referring to the first element in the container. <code>end()</code> returns an iterator which\n  is the past-the-end value for the container. <strong>If the container is empty, then <code>begin() == end();</code></strong></p>\n</blockquote>\n<p>(emphasis mine)</p>\n", "OwnerUserId": "661519", "LastEditorUserId": "661519", "LastEditDate": "2013-07-22T19:59:34.830", "Id": "17796238", "Score": "22", "CreationDate": "2013-07-22T19:54:03.753", "LastActivityDate": "2013-07-22T19:59:34.830"}, "17796229": {"ParentId": "17796200", "CommentCount": "1", "Body": "<p>Yes, that is true. Here is the <a href=\"http://en.cppreference.com/w/cpp/container/vector/begin\" rel=\"nofollow\">proof</a>. And, of course, <code>std::distance(a.begin(), a.end()) == 0</code> for an empty vector. </p>\n", "OwnerUserId": "2159939", "PostTypeId": "2", "Id": "17796229", "Score": "0", "CreationDate": "2013-07-22T19:53:43.063", "LastActivityDate": "2013-07-22T19:53:43.063"}, "17796259": {"ParentId": "17796200", "CommentCount": "1", "Body": "<p><a href=\"http://www.cplusplus.com/reference/vector/vector/end/\" rel=\"nofollow\">http://www.cplusplus.com/reference/vector/vector/end/</a></p>\n<p>If the container is empty, end() is the same as begin().</p>\n", "OwnerUserId": "2587816", "PostTypeId": "2", "Id": "17796259", "Score": "1", "CreationDate": "2013-07-22T19:55:09.347", "LastActivityDate": "2013-07-22T19:55:09.347"}, "17796230": {"ParentId": "17796200", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Yes, that's what the standard requires it to be for <code>empty()</code> for any container.</p>\n<p>\u00a7 23.2.1 Table 96 of the C++11 standard says:</p>\n<pre class=\"lang-none prettyprint-override\"><code> +----------+---------------+----------------------+\n |Expression|  Return Type  | Operational Semantics|\n |----------|---------------|----------------------|\n |a.empty() |Convertible    |a.begin() == a.end()  |\n |          |to bool        |                      |\n |          |               |                      |\n +-------------------------------------------------+\n</code></pre>\n", "OwnerUserId": "1381108", "LastEditorUserId": "1381108", "LastEditDate": "2013-07-22T19:59:39.460", "Id": "17796230", "Score": "79", "CreationDate": "2013-07-22T19:53:44.183", "LastActivityDate": "2013-07-22T19:59:39.460"}, "17796200": {"CommentCount": "3", "AcceptedAnswerId": "17796230", "CreationDate": "2013-07-22T19:50:59.230", "LastActivityDate": "2013-07-22T19:59:39.460", "PostTypeId": "1", "ViewCount": "12720", "FavoriteCount": "3", "Title": "Is begin() == end() for any empty() vector?", "Id": "17796200", "Score": "58", "Body": "<p>I have long assumed that for any empty <code>std::vector</code> <em>V</em>, <code>V.begin() == V.end()</code>. Yet I see nothing in the C++ specification that states this to <em>always</em> be true. Is it necessarily true or does it just happen to be true on most implementations?</p>\n", "Tags": "<c++><stdvector>", "OwnerUserId": "358475", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_17796200_17796238_1": {"section_id": 707, "quality": 1.0, "length": 18}, "so_17796200_17796238_0": {"section_id": 705, "quality": 0.7142857142857143, "length": 5}}, "n3337": {"so_17796200_17796238_1": {"section_id": 697, "quality": 1.0, "length": 18}, "so_17796200_17796238_0": {"section_id": 695, "quality": 0.7142857142857143, "length": 5}}, "n4659": {"so_17796200_17796238_1": {"section_id": 736, "quality": 1.0, "length": 18}, "so_17796200_17796238_0": {"section_id": 734, "quality": 0.7142857142857143, "length": 5}}}});