post_cb({"49203480": {"Id": "49203480", "PostTypeId": "2", "Body": "<p>Arrays of zero size are definitely not standard C++.  From <a href=\"http://eel.is/c++draft/dcl.array#1\" rel=\"nofollow noreferrer\">[dcl.array]</a>:</p>\n<blockquote>\n<p id=\"so_49203358_49203480_0\">In a declaration <code>T</code> <code>D</code> where <code>D</code> has the form</p>\n<p id=\"so_49203358_49203480_1\"><code>D1 [ <em>constant-expression</em><sub>opt</sub> ] <em>attribute-specifier-seq</em><sub>opt</sub></code></p>\n<p id=\"so_49203358_49203480_2\">[...]</p>\n<p id=\"so_49203358_49203480_3\">If the constant-expression is present, it shall be a converted constant expression of type <code>std\u200b::\u200bsize_\u00adt</code> and its value shall be greater than zero.</p>\n</blockquote>\n<p>GCC however provides arrays of zero length as an <a href=\"https://gcc.gnu.org/onlinedocs/gcc/Zero-Length.html\" rel=\"nofollow noreferrer\">extension</a> but since they are non-standard you can't expect them to work together with other language features, such as template argument deduction.  You could make an explicit overload of the function for zero length arrays.</p>\n<pre><code>#include &lt;cstdlib&gt;\n\ntemplate&lt;typename T, std::size_t N&gt;\nvoid someFun(T (&amp;)[N]) {}\n\ntemplate&lt;typename T&gt;\nvoid someFun(T (&amp;)[0]) {}\n\nint main() {\n    int arr[0];\n    someFun(arr);\n}\n</code></pre>\n<p>This compiles on GCC (7.2.0) but not on Clang (6.0.0).</p>\n", "LastEditorUserId": "1944004", "LastActivityDate": "2018-03-09T23:18:21.770", "Score": "2", "CreationDate": "2018-03-09T23:04:40.007", "ParentId": "49203358", "CommentCount": "1", "OwnerUserId": "1944004", "LastEditDate": "2018-03-09T23:18:21.770"}, "bq_ids": {"n4140": {"so_49203358_49203480_3": {"length": 11, "quality": 0.9166666666666666, "section_id": 3228}}, "n3337": {"so_49203358_49203480_3": {"length": 9, "quality": 0.75, "section_id": 3101}}, "n4659": {"so_49203358_49203480_3": {"length": 12, "quality": 1.0, "section_id": 3985}}}, "49203358": {"ViewCount": "51", "Body": "<p>I have an example function which takes a reference to an array. The number of elements in the function definition is unknown.</p>\n<pre><code>template&lt;typename T, std::size_t N&gt;\nvoid someFun(T (&amp;)[N])\n{\n    /* ... */\n}\n</code></pre>\n<p>Calling this function for an array of one element is compiling fine.\nDeduced param type is <code>int (&amp;)[1]</code>.</p>\n<pre><code>int main()\n{\n    int arr[1];\n    someFun(arr);\n}\n</code></pre>\n<p>The problem is, when I'm trying to pass an array of zero elements. Example below shows the code and error.</p>\n<pre><code>int main()\n{\n    int arr[0];\n    someFun(arr);\n}\n</code></pre>\n<p>Compilation error (using g++ 7.2):</p>\n<pre><code>../src/main.cpp: In function 'int main()':\n../src/main.cpp:24:13: error: no matching function for call to 'someFun(int  [0])'\nsomeFun(arr);\n         ^\n../src/main.cpp:9:6: note: candidate: template&lt;class T, long unsigned int N&gt;  void someFun(T (&amp;)[N])\nvoid someFun(T (&amp;a)[N])\n  ^~~~~~~\n../src/main.cpp:9:6: note:   template argument deduction/substitution failed:\nmake: *** [src/main.o] Error 1\n</code></pre>\n<p>I assume that deduced template param type is <code>int (&amp;)[0]</code>, however the substitution of this argument failed. I can go around by overloading <code>someFun</code>. Here is my working example:</p>\n<pre><code>template&lt;typename T, std::size_t N&gt;\nvoid someFun(T (&amp;)[N])\n{\n    /* ... */\n}\n\ntemplate&lt;typename T&gt;\nvoid someFun(T (&amp;)[0])\n{\n    /* ... */\n}\n\nint main()\n{\n    int arr[0];\n    someFun(arr);\n}\n</code></pre>\n<p>Running this code leads to a call to <code>void someFun(T (&amp;)[0])</code> function and deduced param type is <code>int (&amp;)[0]</code>. Could you please explain why I can't use more generic solution for an array of zero elements? Please don't judge the reason of this code. It is just an example for learning purposes.</p>\n", "AcceptedAnswerId": "49203480", "Title": "How to pass an array of zero size to template function", "CreationDate": "2018-03-09T22:51:49.270", "Id": "49203358", "CommentCount": "6", "PostTypeId": "1", "LastActivityDate": "2018-03-09T23:18:21.770", "Score": "2", "OwnerUserId": "1917070", "Tags": "<c++><arrays><templates><template-deduction>", "AnswerCount": "1"}});