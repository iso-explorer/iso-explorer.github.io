post_cb({"bq_ids": {"n4140": {"so_37846565_37846719_1": {"length": 14, "quality": 1.0, "section_id": 3252}, "so_37846565_37846954_0": {"length": 4, "quality": 0.8, "section_id": 336}, "so_37846565_37846679_0": {"length": 13, "quality": 1.0, "section_id": 554}, "so_37846565_37846719_3": {"length": 13, "quality": 1.0, "section_id": 3253}, "so_37846565_37846719_4": {"length": 7, "quality": 0.7, "section_id": 3253}}, "n3337": {"so_37846565_37846719_1": {"length": 14, "quality": 1.0, "section_id": 3124}, "so_37846565_37846954_0": {"length": 4, "quality": 0.8, "section_id": 326}, "so_37846565_37846679_0": {"length": 13, "quality": 1.0, "section_id": 545}, "so_37846565_37846719_3": {"length": 13, "quality": 1.0, "section_id": 3125}, "so_37846565_37846719_4": {"length": 7, "quality": 0.7, "section_id": 3125}}, "n4659": {"so_37846565_37846719_1": {"length": 14, "quality": 1.0, "section_id": 4010}, "so_37846565_37846954_0": {"length": 4, "quality": 0.8, "section_id": 345}, "so_37846565_37846679_0": {"length": 13, "quality": 1.0, "section_id": 577}, "so_37846565_37846719_3": {"length": 13, "quality": 1.0, "section_id": 4011}, "so_37846565_37846719_4": {"length": 7, "quality": 0.7, "section_id": 4011}}}, "37847607": {"Id": "37847607", "PostTypeId": "2", "Body": "<p>The answer to your question is relative to these three follow-up questions:</p>\n<ol>\n<li>Before C++ 11, C++ 11, or C++14 and beyond?</li>\n<li>Do the implicitly defined constructors count?</li>\n<li>What are the members? The presence of a non-copyable member will delete the implicit copy constructor.</li>\n</ol>\n<p>The explicit definition is only one constructor; the compiler will insert a three-argument call regardless of whether the call explicitly supplies 0, 1, or 2 arguments.</p>\n<p>In pre-'11 there are no move constructors, in '11 there are two implicit constructor definitions, <code>Fraction(const Fraction &amp;) noexcept</code> and <code>Fraction(Fraction &amp;&amp;) noexcept</code>, check the accessible <a href=\"http://en.cppreference.com/w/cpp/language/move_constructor#Implicitly-declared_move_constructor\">cppreference</a>, in '14 the rules of when there is an implicitly defined move constructor change.</p>\n<p>The question you got is unfortunately innocently looking but quite technical; I hope your class does not insist on oversimplifying C++, it is the worst way to learn it.</p>\n", "LastEditorUserId": "4988044", "LastActivityDate": "2016-06-16T19:27:50.447", "Score": "18", "CreationDate": "2016-06-15T23:46:51.427", "ParentId": "37846565", "CommentCount": "1", "OwnerUserId": "4988044", "LastEditDate": "2016-06-16T19:27:50.447"}, "37846954": {"Id": "37846954", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_37846565_37846954_0\"><strong>Is a function with default values an overloaded function?</strong></p>\n</blockquote>\n<p>No. Overloads look like</p>\n<pre><code>Fraction();\nFraction(int numerator);\nFraction(int numerator, int denominator);\n</code></pre>\n<p>and have each their own implementation (definition), while a function with default parameters has a single implementation.</p>\n<hr>\n<blockquote>\n<p id=\"so_37846565_37846954_1\">I thought it's only one, but they suggested there are 3: ...</p>\n<p id=\"so_37846565_37846954_2\"><strong>\"How many constructors does the class Fraction have?\"</strong></p>\n</blockquote>\n<h1>It's a trick question, designed to fool you showing the available call variants for a <em>single constructor</em> declaration.</h1>\n<p>The <strong>definite</strong> answer for the given code snippet is <strong>3</strong> (in words <strong>three</strong>).</p>\n<p>There's one specialized constructor (which serves three variants of calling), and the compiler generates a copy and move constructor automatically if you don't <code>delete</code> them, or provide a custom implementation:</p>\n<pre><code>Fraction(int numerator = 0, int denominator = 1); // (1)\n// Redundant, just for demonstration:\nFraction(const Fraction&amp; rhs) = default; // (2)\nFraction(Fraction&amp;&amp; rhs) = default; // (3)\n</code></pre>\n<hr>\n<p>So for such exam, if you will answer </p>\n<blockquote>\n<p id=\"so_37846565_37846954_3\">The class has one constructor</p>\n</blockquote>\n<p>That's wrong anyways. If you will answer </p>\n<blockquote>\n<p id=\"so_37846565_37846954_4\">The class has three constructors <em>(as you wrote that is the accepted answer)</em></p>\n</blockquote>\n<p>you'll need to explain in depth, why you think so (as explained above).<br>\nIn any oral exam I'd ask you to backup why exactly, so I'd do in an apprentice test.</br></p>\n</hr></hr>", "LastEditorUserId": "1413395", "LastActivityDate": "2016-06-16T17:54:31.230", "Score": "27", "CreationDate": "2016-06-15T22:36:32.273", "ParentId": "37846565", "CommentCount": "0", "OwnerUserId": "1413395", "LastEditDate": "2016-06-16T17:54:31.230"}, "37846565": {"ViewCount": "4997", "Body": "<p>I'm preparing for an upcoming C++ exam and came across this question about classes and constructors:</p>\n<blockquote id=\"so_37846565_37846565_0\">\n<h3>How many constructors does the class Fraction have?\"</h3>\n<pre><code>class Fraction {\n//...\npublic:\n   Fraction(int numerator = 0, int denominator = 1);\n//...\n};\n</code></pre>\n</blockquote>\n<p>I thought it's only one, but they suggested there are three:</p>\n<pre><code>Fraction();\nFraction(n);\nFraction(n, d);\n</code></pre>\n<p>Or in other words:<br>\n<strong>Is a function with default values an overloaded function?</strong></br></p>\n", "Title": "How many constructors does the class have?", "CreationDate": "2016-06-15T22:03:19.373", "LastActivityDate": "2016-07-07T03:25:47.193", "CommentCount": "5", "FavoriteCount": "6", "PostTypeId": "1", "LastEditDate": "2016-07-07T03:25:47.193", "LastEditorUserId": "908939", "Id": "37846565", "Score": "57", "OwnerUserId": "2387406", "Tags": "<c++><oop><constructor>", "AnswerCount": "7"}, "37850370": {"Id": "37850370", "PostTypeId": "2", "Body": "<p>Because it depends on the arguments you pass:</p>\n<pre><code>Fraction() --&gt; Fraction(0,1)\nFraction(n)---&gt; Fraction(n,1)\nFraction(n,m)\n</code></pre>\n<p>So it gives 3 constructors. No overloading is taking place here.</p>\n", "LastEditorUserId": "209139", "LastActivityDate": "2016-06-16T09:28:09.077", "Score": "-5", "CreationDate": "2016-06-16T05:15:02.213", "ParentId": "37846565", "CommentCount": "1", "OwnerUserId": "4985258", "LastEditDate": "2016-06-16T09:28:09.077"}, "37846719": {"Id": "37846719", "PostTypeId": "2", "Body": "<p>There is only one constructor corresponding to the posted declaration, not three overloads.</p>\n<p>The calls</p>\n<pre><code>Fraction();\nFraction(n);\n</code></pre>\n<p>are equivalent to:</p>\n<pre><code>Fraction(0, 1);\nFraction(n, 1);\n</code></pre>\n<p>One more way to convince yourself that there is only one constructor corresponding to the declaration is that you only need to define one constructor, not three.</p>\n<p>The section of the C++11 standard on default arguments has this:</p>\n<blockquote>\n<p id=\"so_37846565_37846719_0\"><strong>8.3.6 Default arguments</strong></p>\n<p id=\"so_37846565_37846719_1\">1 If an <em>initializer-clause</em> is specified in a <em>parameter-declaration</em> this <em>initializer-clause</em> is used as a default argument. Default arguments will be used in calls where trailing arguments are missing.</p>\n<p id=\"so_37846565_37846719_2\">2 [ <em>Example:</em> the declaration</p>\n<pre><code>void point(int = 3, int = 4);\n</code></pre>\n<p id=\"so_37846565_37846719_3\">declares a function that can be called with zero, one, or two arguments of\\ type <code>int</code>. It can be called in any of these ways:</p>\n<pre><code>point(1,2); point(1); point();\n</code></pre>\n<p id=\"so_37846565_37846719_4\">The last two calls are equivalent to <code>point(1,4)</code> and <code>point(3,4)</code>, respectively. <em>\u2014end example</em> ]</p>\n</blockquote>\n<p>Now the main question.</p>\n<blockquote>\n<p id=\"so_37846565_37846719_5\"><strong>How many constructors does the class Fraction have?</strong></p>\n</blockquote>\n<p>If the person that framed the question wants to include the move constructor and the copy constructor, which are implicitly generated by the compiler unless explicitly deleted, in the set of constructors, then <strong>the answer is three</strong>. In that case, the question is a trick question.</p>\n", "LastEditorUserId": "434551", "LastActivityDate": "2016-06-16T19:34:32.880", "Score": "55", "CreationDate": "2016-06-15T22:15:33.760", "ParentId": "37846565", "CommentCount": "14", "OwnerUserId": "434551", "LastEditDate": "2016-06-16T19:34:32.880"}, "37854202": {"Id": "37854202", "PostTypeId": "2", "Body": "<p>This kind of function definition defines a single function but 2 additional calling syntaxes.  The subtle difference becomes apparent when taking function pointers or matching a template function argument to overloaded functions: in that case you only have a function with full argument list as the available overloaded type.</p>\n<p>Now the tricky thing is that we are talking about a constructor here, and a constructor does not engage in the same kind of overloading resolution as an ordinary function and is, for all purposes, not accessible other than syntactically.  In particular, this definition <em>does</em> count separately as a default constructor.  It also counts separately as a converting constructor from int and can be used as ((Fraction)3).</p>\n<p>So for all practical purposes, it creates three different <em>syntactic</em> entities in the constructor category.  And as opposed to ordinary functions, there is no functional context where overload resolution would expose the difference between three actual function signatures and three merely syntactical calling conventions.</p>\n<p>This is not a good question for a written test.  This is really something for an oral exam since there are so many subtleties involved that the difference between a formally correct answer (if any) and a formally wrong answer is not likely to correlate well with actual knowledge and skill, and the reasoning behind any answer is more important than the answer itself.</p>\n", "LastActivityDate": "2016-06-16T08:46:57.820", "CommentCount": "2", "CreationDate": "2016-06-16T08:46:57.820", "ParentId": "37846565", "Score": "-4", "OwnerUserId": "6473721"}, "37846679": {"Id": "37846679", "PostTypeId": "2", "Body": "<p>You have only one declaration of a constructor.<br>\nOn the other side:</br></p>\n<blockquote>\n<p id=\"so_37846565_37846679_0\">When two or more different declarations are specified for a single name in the same scope, that name is said to be\u00a0overloaded</p>\n</blockquote>\n<p>Because of that, I'd not use the term <em>overloaded</em> here.</p>\n", "LastActivityDate": "2016-06-15T22:12:37.357", "CommentCount": "0", "CreationDate": "2016-06-15T22:12:37.357", "ParentId": "37846565", "Score": "6", "OwnerUserId": "4987285"}, "37848421": {"Id": "37848421", "PostTypeId": "2", "Body": "<p>You can create the Fraction object in three different ways using the single constructor declared int the above class. Constructor has default parameters. If you don't pass any argument, it assumes the respective value for the argument.</p>\n<ol>\n<li><p><code>Fraction a;</code>\n// numerator will be 0 and denominator will be 1</p></li>\n<li><p><code>Fraction a(10);</code>\n// numerator will be 10 and denominator will be 1</p></li>\n<li><p><code>Fraction a(10, 20);</code>\n// numerator will be 10 and denominator will be 20</p></li>\n</ol>\n", "LastEditorUserId": "209139", "LastActivityDate": "2016-06-16T09:29:13.047", "Score": "-6", "CreationDate": "2016-06-16T01:26:20.807", "ParentId": "37846565", "CommentCount": "3", "OwnerUserId": "6207098", "LastEditDate": "2016-06-16T09:29:13.047"}});