post_cb({"bq_ids": {"n4140": {"so_28336366_28336366_0": {"length": 13, "quality": 0.8666666666666667, "section_id": 71}, "so_28336366_28336366_1": {"length": 13, "quality": 1.0, "section_id": 71}}, "n3337": {"so_28336366_28336366_0": {"length": 13, "quality": 0.8666666666666667, "section_id": 66}, "so_28336366_28336366_1": {"length": 13, "quality": 1.0, "section_id": 66}}, "n4659": {"so_28336366_28336366_0": {"length": 15, "quality": 1.0, "section_id": 73}, "so_28336366_28336366_1": {"length": 13, "quality": 1.0, "section_id": 73}}}, "28336366": {"ViewCount": "35", "Body": "<p>Consider the following code:</p>\n<pre><code>#include &lt;iostream&gt;\n\nusing std::cout;\nusing std::endl;\n\nstruct A\n{\n    constexpr int operator[](int a)\n    {\n        return a;\n    }\n\n    constexpr operator int()\n    {\n        return 1;\n    }\n} a;\n\ntemplate &lt;int a&gt;\nint foo()\n{\n    return a;\n};\n\nint main(){ cout &lt;&lt; foo&lt;a[4 &gt;&gt; 1]&gt;() &lt;&lt; endl; }\n</code></pre>\n<p><strong><a href=\"http://coliru.stacked-crooked.com/a/f8e148415db7fefa\" rel=\"nofollow\">DEMO</a></strong></p>\n<p>The thing is the Standard said <code>N4286::14.2/3 [temp.names]</code></p>\n<blockquote>\n<p id=\"so_28336366_28336366_0\">Similarly, the first non-nested <code>&gt;&gt;</code> is treated as two consecutive but\n  distinct <code>&gt;</code> tokens, the first of which is taken as the end of the\n  template-argument-list and completes the template-id.</p>\n</blockquote>\n<p>Where the definition of the nested &lt;&lt; is the following <code>N4286::14.2/3 [temp.names]</code> (footnote 137):</p>\n<blockquote>\n<p id=\"so_28336366_28336366_1\">A <code>&gt;</code> that encloses the <code>type-id</code> of a <code>dynamic_cast</code>, <code>static_cast</code>,\n  <code>reinterpret_cast</code> or <code>const_cast</code>, or which encloses the\n  template-arguments of a subsequent template-id, is considered nested\n  for the purpose of this description.</p>\n</blockquote>\n<p>In my case <code>&gt;&gt;</code> is non-nested, therefore the first <code>&lt;</code> should have been considered as the end of the template arguments. But it's not true, actually. Why?</p>\n", "Title": "Understanding nested >> in a template function call", "CreationDate": "2015-02-05T04:42:38.690", "LastActivityDate": "2015-02-05T04:42:38.690", "CommentCount": "3", "PostTypeId": "1", "OwnerDisplayName": "user2953119", "Id": "28336366", "Score": "0", "Tags": "<c++><templates>", "AnswerCount": "0"}});