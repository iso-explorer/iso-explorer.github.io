post_cb({"32738281": {"CommentCount": "0", "ViewCount": "59", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2015-09-23T11:24:55.103", "LastActivityDate": "2015-09-23T13:00:14.860", "Title": "Const reference doesn't prolongs the life of temp due to RVO?", "AcceptedAnswerId": "32738442", "LastEditDate": "2017-05-23T12:31:08.127", "Id": "32738281", "Score": "2", "Body": "<p>This is follow up of question <a href=\"https://stackoverflow.com/questions/32665221/is-there-a-sequence-point-between-return-and-expression-in-return-statement\">Is there a sequence point between return and expression in return statement?</a> . The answer-er isn't replying to my comments , neither I'm unable to understand from his answer, nor I know how to bump the thread. So I created this question, my sincere apologies for doing this.</p>\n<p>Consider the below code :</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nstruct foo{const char* bar ; foo(): bar(\"This is foo\"){} };\n\nfoo returnByValue(){ return foo(); }\nconst foo&amp; returnByConstRef() { return returnByValue();  } // *\n\nint main() {\nstd::cout&lt;&lt; returnByConstRef().bar  &lt;&lt;std::endl; // is life of temp is extended in while this expression?\nreturn 0;\n}\n</code></pre>\n<p>My understanding is that <code>returnByValue()</code> expression (inside <code>returnByConstRef()</code>) is the copy of temporary object <code>foo()</code> (using copy ctor) . Now <code>returnByConstRef()</code> which is const reference to temp object returned by <code>returnByValue()</code> (copy of original <code>temp()</code> object in the code) , Now when I invoke <code>returnByConstRef().bar</code> why is it undefined behavior ?</p>\n<p>Where is my thinking wrong? , does RVO does this?</p>\n", "Tags": "<c++>", "OwnerUserId": "4882052", "AnswerCount": "1"}, "32738442": {"ParentId": "32738281", "PostTypeId": "2", "CommentCount": "10", "Body": "<p>This isn't due to RVO, the standard specifies that temporaries bound to returned values do not have their lifetime extended:</p>\n<blockquote>\n<p id=\"so_32738281_32738442_0\"><code>N3337 [class.temporary]/5:</code> [...] The temporary to which the reference is bound or the temporary that is the complete object of a subobject to which the reference is bound persists for the lifetime of the reference except:</p>\n<ul>\n<li><p id=\"so_32738281_32738442_1\">[...]</p></li>\n<li><p id=\"so_32738281_32738442_2\"><strong>The lifetime of a temporary bound to the returned value in a function return statement (6.6.3) is not\n  extended; the temporary is destroyed at the end of the full-expression in the return statement.</strong></p></li>\n<li><p id=\"so_32738281_32738442_3\">[...]</p></li>\n</ul>\n</blockquote>\n<p>For your example:</p>\n<pre><code>const foo&amp; returnByConstRef() \n{ \n    return returnByValue();  \n}\n</code></pre>\n<p><code>returnByValue()</code> is a temporary which is being bound to the return value, kind of like this:</p>\n<pre><code>const foo&amp; returnByConstRef() \n{ \n    const foo&amp; _temporary_object = returnByValue();\n    return _temporary_object;  \n    //object referenced by _temporary_object is destroyed\n}    \n</code></pre>\n<p>Such temporaries do <em>not</em> have their lifetime extended; they are destroyed on function exit. Maybe it would help you to think of it like this:</p>\n<pre><code>function returnByConstRef\n    call returnByValue, put value on the stack\n    put pointer to value in return register\n    clear up stack, invalidating pointer to the value\n</code></pre>\n", "OwnerUserId": "496161", "LastEditorUserId": "496161", "LastEditDate": "2015-09-23T13:00:14.860", "Id": "32738442", "Score": "3", "CreationDate": "2015-09-23T11:31:47.227", "LastActivityDate": "2015-09-23T13:00:14.860"}, "bq_ids": {"n4140": {"so_32738281_32738442_2": {"section_id": 382, "quality": 0.8823529411764706, "length": 15}, "so_32738281_32738442_0": {"section_id": 382, "quality": 0.8125, "length": 13}}, "n3337": {"so_32738281_32738442_0": {"section_id": 373, "quality": 0.8125, "length": 13}, "so_32738281_32738442_2": {"section_id": 373, "quality": 0.8823529411764706, "length": 15}}, "n4659": {"so_32738281_32738442_2": {"section_id": 397, "quality": 0.8823529411764706, "length": 15}, "so_32738281_32738442_0": {"section_id": 397, "quality": 0.8125, "length": 13}}}});