post_cb({"39728792": {"ParentId": "38065676", "PostTypeId": "2", "CommentCount": "8", "Body": "<p><strong>Actually, Visual Studio is correct.</strong></p>\n<p>Your class is not an aggregate, so aggregate initialisation may not be used on it:</p>\n<blockquote>\n<p id=\"so_38065676_39728792_0\"><code>[C++11: 8.5.1/1]:</code> An aggregate is an array or a class (Clause 9) with no user-provided constructors (12.1), no <em>brace-or-equal-initializers</em> for non-static data members (9.2), no private or protected non-static data members (Clause 11), no base classes (Clause 10), and no virtual functions (10.3).</p>\n<hr>\n<p id=\"so_38065676_39728792_1\"><code>[C++11: 8.5.1/15]:</code> The initialization that occurs in the forms</p>\n<pre><code>T x(a);\nT x{a};\n</code></pre>\n<p id=\"so_38065676_39728792_2\">as well as in <code>new</code> expressions (5.3.4), <code>static_cast</code> expressions (5.2.9), functional notation type conversions (5.2.3), and base and member initializers (12.6.2) is called <em>direct-initialization</em>.</p>\n<hr>\n<p id=\"so_38065676_39728792_3\"><code>[C++11: 8.5.1/16]:</code> The semantics of initializers are as follows. The <em>destination type</em> is the type of the object or reference being initialized and the <em>source type</em> is the type of the initializer expression. The source type is not defined when the initializer is a <em>braced-init-list</em> or when it is a parenthesized list of expressions.</p>\n<ul>\n<li>If the initializer is a <em>braced-init-list</em>, the object is <em>list-initialized</em> (8.5.4).</li>\n<li>[...]</li>\n</ul>\n</hr></hr></blockquote>\n<p>And I shan't quote it all, but <code>[C++11: 8.5.4/3]</code>, where <em>list-initialization</em> is defined, is where our story ends. It shows that without an initializer-list constructor, and given that your list has two elements (not one and not zero), your program is ill-formed.</p>\n<p>GCC actually <em>doesn't</em> accept your program (<a href=\"http://rextester.com/MRC69655\" rel=\"nofollow\">example</a> thanks to Igor), though clang erroneously does (<a href=\"http://rextester.com/SND40913\" rel=\"nofollow\">example</a>, same credit).</p>\n<blockquote>\n<p id=\"so_38065676_39728792_4\">If you are right, these are some terrible news for simple structures because I tend to use default initialization everywhere: <code>struct A { double x{}, y{}; };</code></p>\n</blockquote>\n<p>Yep, time to stop doing that, if you want your C++11 classes to be aggregates. :)</p>\n<p>C++14 actually removed the <em>brace-or-equal-initializers</em> restriction from <code>8.5.1/1</code>, so switching to a newer standard will get you where you want to be.</p>\n", "OwnerUserId": "560648", "LastEditorUserId": "560648", "LastEditDate": "2016-09-27T16:41:13.563", "Id": "39728792", "Score": "5", "CreationDate": "2016-09-27T15:35:26.620", "LastActivityDate": "2016-09-27T16:41:13.563"}, "38065676": {"CommentCount": "13", "AcceptedAnswerId": "39728792", "PostTypeId": "1", "LastEditorUserId": "1032277", "CreationDate": "2016-06-28T01:28:06.100", "LastActivityDate": "2016-09-27T16:41:13.563", "LastEditDate": "2016-09-27T15:28:11.660", "ViewCount": "187", "FavoriteCount": "2", "Title": "Possible MSVC 2013 bug when initializing struct members", "Id": "38065676", "Score": "4", "Body": "<p>MSVC 2013 complains about the following code, while it works as expected in g++. Does this look like a bug in MSVC?</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nstruct A\n{\n    double x = 0.0, y = 0.0;\n};\n\nint main()\n{\n    A a{ 1.0, 2.0 };\n    return 0;\n}\n</code></pre>\n<p>Note that changing the <code>struct</code> as follows resolves the issue.</p>\n<pre><code>struct A\n{\n    double x, y;\n};\n</code></pre>\n<p>The error message is:</p>\n<blockquote>\n<p id=\"so_38065676_38065676_0\">Error 1   error C2440: 'initializing' : cannot convert from\n  'initializer-list' to 'A'</p>\n</blockquote>\n", "Tags": "<c++><c++11><visual-c++><initializer-list>", "OwnerUserId": "2229960", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_38065676_39728792_3": {"section_id": 3296, "quality": 0.6, "length": 18}, "so_38065676_39728792_0": {"section_id": 3298, "quality": 0.64, "length": 16}, "so_38065676_39728792_2": {"section_id": 3295, "quality": 0.7777777777777778, "length": 14}}, "n3337": {"so_38065676_39728792_3": {"section_id": 3166, "quality": 0.6, "length": 18}, "so_38065676_39728792_0": {"section_id": 3168, "quality": 0.8, "length": 20}, "so_38065676_39728792_2": {"section_id": 3165, "quality": 0.7777777777777778, "length": 14}}, "n4659": {"so_38065676_39728792_3": {"section_id": 4058, "quality": 0.6, "length": 18}, "so_38065676_39728792_2": {"section_id": 4057, "quality": 0.5555555555555556, "length": 10}}}});