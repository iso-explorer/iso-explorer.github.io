post_cb({"bq_ids": {"n4140": {"so_1364309_1366028_3": {"length": 26, "quality": 0.9285714285714286, "section_id": 2312}, "so_1364309_1366028_2": {"length": 4, "quality": 1.0, "section_id": 2311}}, "n3337": {"so_1364309_1366028_3": {"length": 26, "quality": 0.9285714285714286, "section_id": 2300}, "so_1364309_1366028_2": {"length": 4, "quality": 1.0, "section_id": 2299}}, "n4659": {"so_1364309_1366028_3": {"length": 25, "quality": 0.8928571428571429, "section_id": 2586}, "so_1364309_1366028_2": {"length": 4, "quality": 1.0, "section_id": 2585}}}, "1364309": {"ViewCount": "1288", "Body": "<p>Consider the following:</p>\n<pre><code>std::basic_fstream&lt;char&gt; testfile;\ntestfile.write(reinterpret_cast&lt;const char*&gt;(&amp;someInt), sizeof(int));\ntestfile.close();\n</code></pre>\n<p>This runs with no complaint when built with VC 8.0, but crashes when built with VC 10.0 beta.</p>\n<p>I have some legacy code that actually relies on the VC 8 behavior, where we inherit from basic_fstream to add functionality:</p>\n<pre><code>class myFile : public basic_fstream&lt;char&gt; {\n    public:\n    void myWrite(const char* data, std::streamsize len) {\n       write(data, len);\n       // update some state variables (checksum, etc)\n    }\n};\n</code></pre>\n<p>There are cases where it is beneficial to inspect the additional state without incurring the disk I/O (e.g. test writes).</p>\n<p>I'm assuming this is undefined behavior, and I'm lucky it doesn't crash in VC 8.  That said, I've had enough issues evaluating VS 2010 beta that I'd like to be sure.  Can anyone out there say definitively?</p>\n<p>EDIT: Call stack in VS 2010:</p>\n<pre><code>ostream::write\nostream::sentry ctor\nistream::_Sentry_base ctor\nfstream::_Lock\n_file.c::_lock_file\ncrashes on EnterCriticalSection( &amp;(((_FILEX *)pf)-&gt;lock) ), pf is null\n</code></pre>\n<p>Call stack on VS 2005:</p>\n<pre><code>ostream::write\nostream::sentry ctor\nostream::_Sentry_base ctor // different\nstreambuf::_Lock\n_Mutex::_Lock()\n_Mtxlock in xmtx.c\nEnterCriticalSection(_Mtx), where _Mtx is valid\n</code></pre>\n<p>Also, compiles and runs with no errors with gcc-4.3.3 on Ubuntu.</p>\n<p>*** EDIT:</p>\n<p>After more digging, it appears that this in fact is a bug in Visual Studio 2010 Beta 1.</p>\n<p><a href=\"https://connect.microsoft.com/VisualStudio/feedback/ViewFeedback.aspx?FeedbackID=456890\" rel=\"nofollow noreferrer\">https://connect.microsoft.com/VisualStudio/feedback/ViewFeedback.aspx?FeedbackID=456890</a></p>\n<p>According to this report, it has been fixed for the official release.</p>\n<p>Thanks for all of your input.</p>\n", "Title": "Writing to default-constructed fstream: Undefined Behavior?", "CreationDate": "2009-09-01T19:47:29.957", "LastActivityDate": "2009-09-03T11:05:18.113", "CommentCount": "5", "LastEditDate": "2009-09-03T11:05:18.113", "PostTypeId": "1", "LastEditorUserId": "99376", "Id": "1364309", "Score": "2", "OwnerUserId": "99376", "Tags": "<c++><file-io><fstream>", "AnswerCount": "1"}, "1366028": {"Id": "1366028", "PostTypeId": "2", "Body": "<p>Have you checked whether throwing exceptions are enabled when the stream state is set to fail or bad? Because the C++ Standard says the following abt 'write' methdod :-</p>\n<blockquote>\n<p id=\"so_1364309_1366028_0\">27.6.2.7. Unformatted output functions</p>\n<p id=\"so_1364309_1366028_1\">Point:-5</p>\n<p id=\"so_1364309_1366028_2\"><code>basic_ostream&amp; write(const char_type* s, streamsize n);</code></p>\n<p id=\"so_1364309_1366028_3\">Effects: Behaves as an unformatted\n  output function (as described in\n  27.6.2.7, paragraph 1). After constructing a sentry object, obtains\n  characters to insert from successive\n  locations of an array whose first\n  element is designated by s.\n  Characters are inserted until either\n  of the following occurs: </p>\n</blockquote>\n<ul>\n<li>n characters are inserted; </li>\n<li>inserting in the output sequence fails (in which case the function calls setstate badbit), which may throw ios_base::failure (27.4.4.3)).</li>\n</ul>\n<p>This means that at most <code>testfile.fail()</code> returns true. It should ideally not crash.\nI suspect an exception is being thrown and not caught (But maybe i am totally wrong).</p>\n", "LastActivityDate": "2009-09-02T05:55:40.817", "CommentCount": "4", "CreationDate": "2009-09-02T05:55:40.817", "ParentId": "1364309", "Score": "2", "OwnerUserId": "79298"}});