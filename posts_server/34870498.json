post_cb({"34871856": {"CommentCount": "1", "Body": "<blockquote>\n<p id=\"so_34870498_34871856_0\">Will we ever fall into where we practically need to use a function whose return type is an rvalue reference, which is an xvalue?</p>\n</blockquote>\n<p>It used in container classes, for instance <code>tuple</code> has a <code>get</code> overload that looks like this:</p>\n<pre><code>template&lt; std::size_t I, class... Types &gt;\ntypename std::tuple_element&lt;I, tuple&lt;Types...&gt; &gt;::type&amp;&amp;\n    get( tuple&lt;Types...&gt;&amp;&amp; t );\n</code></pre>\n<p>I assume that <code>std::optional</code> and <code>std::variant</code> in C++17 will both have a similar overloads.</p>\n<p>Granted, the only point is to avoid to type <code>std::move</code> in some very specific situations, like:</p>\n<pre><code> auto x = std::get&lt;1&gt;( f() );\n</code></pre>\n<p>Where <code>f</code> returns a tuple by value.</p>\n", "CreationDate": "2016-01-19T08:31:05.070", "ParentId": "34870498", "Id": "34871856", "LastActivityDate": "2016-01-19T08:31:05.070", "PostTypeId": "2", "Score": "3", "OwnerUserId": "666785"}, "34870749": {"LastActivityDate": "2016-01-19T07:24:28.700", "CreationDate": "2016-01-19T07:21:36.730", "CommentCount": "3", "Body": "<p>That's exactly what <a href=\"http://en.cppreference.com/w/cpp/utility/move\">std::move</a> is \u2014 the result of <code>std::move</code> execution is an xvalue. Other than that it is hard to tell since in the main returning a reference from the function is a bad thing most of the time. But maybe someone will come up with another clever usage of such a function. </p>\n", "Id": "34870749", "LastEditDate": "2016-01-19T07:24:28.700", "ParentId": "34870498", "OwnerUserId": "643393", "PostTypeId": "2", "Score": "5", "LastEditorUserId": "643393"}, "34872092": {"LastActivityDate": "2016-01-19T09:50:41.937", "CreationDate": "2016-01-19T08:43:16.003", "CommentCount": "2", "Body": "<p>Returning rvalue references can be of use for functions that already take rvalues as parameters. A simple example:</p>\n<pre><code>struct X {\n    X() = default;\n    X(X&amp;&amp; other) { std::cout &lt;&lt; \"move ctor\\n\"; }\n    X(X const&amp;) = delete;\n    void log(std::string const&amp; s){ std::cout &lt;&lt; \"log: \" &lt;&lt; s &lt;&lt; \"\\n\"; }\n};\n\nvoid sink(X&amp;&amp; x) { \n    x.log(\"sink\"); \n}\n\nX&amp;&amp; passOn(X&amp;&amp; in) {\n    in.log(\"pass\");\n    return std::move(in);\n}\n\nX moveOn(X&amp;&amp; in) {\n    in.log(\"move\");\n    return std::move(in);\n}\n\nint main() {\n    sink(passOn(X()));\n    std::cout &lt;&lt; \"===============================\\n\";\n    sink(moveOn(X()));\n}\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/2b44626687977e15\" rel=\"nofollow\">Live demo \u2192</a></p>\n<p>The second function will call the move constructor to create the returned object, while the first will pass on the reference it already got. This is more useful if we don't return the original reference but instead a reference to a part of the referred object, e.g.</p>\n<pre><code>template&lt;class T&gt;\nT&amp;&amp; getHead(std::vector&lt;T&gt;&amp;&amp; input) {\n    return std::move(input.front());\n}\n</code></pre>\n", "Id": "34872092", "LastEditDate": "2016-01-19T09:50:41.937", "ParentId": "34870498", "OwnerUserId": "1838266", "PostTypeId": "2", "Score": "4", "LastEditorUserId": "1838266"}, "34870498": {"FavoriteCount": "1", "ViewCount": "841", "Id": "34870498", "AcceptedAnswerId": "34872092", "Score": "13", "Title": "When do we practically need 'explicit xvalues'?", "LastEditorUserId": "703016", "CommentCount": "2", "Body": "<p>The definition of <strong>xvalue</strong> is as follows:</p>\n<blockquote>\n<p id=\"so_34870498_34870498_0\">\u2014 An xvalue (an \u201ceXpiring\u201d value) also refers to an object, usually near the end of its lifetime (so that its resources may be moved, for example). An xvalue is the result of certain kinds of expressions involving rvalue references (8.3.2). [ Example: The result of calling a function whose return type is an rvalue reference is an xvalue. \u2014end example ]</p>\n</blockquote>\n<p>Will we ever fall into where we practically need to use a function whose return type is an rvalue reference, which is an xvalue?</p>\n<pre><code>const int &amp;&amp; Foo()\n{\n    // ...\n}\n</code></pre>\n<p>Move semantics take an rvalue reference as a parameter, not a return value. So I don't think that's the case.</p>\n", "Tags": "<c++><c++11>", "CreationDate": "2016-01-19T07:07:09.310", "LastEditDate": "2016-01-19T08:07:58.833", "LastActivityDate": "2016-01-19T15:49:10.977", "PostTypeId": "1", "AnswerCount": "3", "OwnerUserId": "921070"}, "bq_ids": {"n4140": {"so_34870498_34870498_0": {"length": 33, "quality": 0.868421052631579, "section_id": 7230}}, "n3337": {"so_34870498_34870498_0": {"length": 33, "quality": 0.868421052631579, "section_id": 6974}}}});