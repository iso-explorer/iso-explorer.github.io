post_cb({"17016244": {"ViewCount": "747", "Body": "<p>I have a C++ map, called tableMap, with is a <code>std::map&lt;int, std::string&gt;</code>.</p>\n<pre><code>void processMap(int key) {\n  std::map&lt;int, std::string&gt;::const_iterator iter;\n  while (true) {\n     // key is an argument to the function\n     iter = tableMap.upper_bound(key);\n     --iter;\n     std::string value = iter-&gt;second;\n     // do something else  \n     ...\n  }\n}\n</code></pre>\n<p>The point is I'm not handling the <code>upper_bound</code> function call correctly. Also, I can't just check that </p>\n<pre><code>if (iter != tableMap.end())\n</code></pre>\n<p>because if the key is on the last element, then <code>upper_bound</code> would return <code>end()</code>. From the <code>C++</code> API, we have:</p>\n<blockquote>\n<p id=\"so_17016244_17016244_0\"><strong>Return iterator to upper bound\n  Returns an iterator pointing to the first element in the container whose key is considered to go after k.</strong></p>\n</blockquote>\n<p>I'm clearly not handling the corner cases, and that piece of code is buggy. What should I do in other to cover the corner cases? Should I replace <code>upper_bound()</code> by <code>find()</code> or <code>lower_bound()</code> ?</p>\n<p>The goal is to to find the next element greater than <code>key</code>, so that's why I'm decreasing <code>iter</code>. The reason was some overlapping ranges in the map.</p>\n<pre><code>Program received signal SIGSEGV, Segmentation fault.\n0x0000003d3ba69eea in std::_Rb_tree_decrement(std::_Rb_tree_node_base*) () from /usr/lib64/libstdc++.so.6\nMissing separate debuginfos, use: debuginfo-install glibc-2.12-1.47.el6_2.5.x86_64 keyutils-libs-1.4-4.el6.x86_64 krb5-libs-1.8.2-3.el6_0.3.x86_64 libcom_err-1.41.12-3.el6.x86_64 libgcc-4.4.6-3.el6.x86_64 libibverbs-1.1.5mlnx1-1.32.gc42bcbf.x86_64 libselinux-2.0.94-2.el6.x86_64 libstdc++-4.4.6-3.el6.x86_64 openssl-1.0.0-4.el6_0.2.x86_64 pcre-7.8-3.1.el6.x86_64 zlib-1.2.3-27.el6.x86_64\n(gdb) bt\n#0  0x0000003d3ba69eea in std::_Rb_tree_decrement(std::_Rb_tree_node_base*) () from /usr/lib64/libstdc++.so.6\n#1  0x0000000000da8a41 in std::_Rb_tree_const_iterator&lt;int, std::string &gt;::operator-- (this=0x7fffffffb8b0)\n    at /usr/lib/gcc/x86_64-redhat-linux/4.4.6/../../../../include/c++/4.4.6/bits/stl_tree.h:274\n#2  0x0000000000de18db in processMap (\n    this=0x17107b8,key=0)\n</code></pre>\n", "Title": "How to correctly handle an iterator for upper_bound", "CreationDate": "2013-06-10T02:45:58.190", "LastActivityDate": "2013-06-10T07:23:27.630", "CommentCount": "4", "LastEditDate": "2013-06-10T06:50:15.267", "PostTypeId": "1", "LastEditorUserId": "726300", "Id": "17016244", "Score": "0", "OwnerUserId": "1040718", "Tags": "<c++><map><iterator>", "AnswerCount": "1"}, "17018742": {"Id": "17018742", "PostTypeId": "2", "Body": "<p>Compare these two: </p>\n<blockquote>\n<p id=\"so_17016244_17018742_0\">The goal is to to find <strong>the next element greater than key</strong>, so that's why I'm decreasing iter. The reason was some overlapping ranges in the map.</p>\n<p id=\"so_17016244_17018742_1\">Returns an iterator pointing to the first element in the container <strong>whose key is considered to go after k</strong></p>\n</blockquote>\n<p>That means, <code>upper_bound</code> already does what you need. So don't decrement the iterator. There are three corner cases:</p>\n<ol>\n<li>The map is empty, then there is only one iterator, namely <code>end()</code>/<code>begin()</code>. Decrement, increment and dereferencing of iter wil give UB.</li>\n<li>The map contains no value with a key greater than your argument. <code>upper_bound</code> will return <code>end()</code>, so don't dereference it.</li>\n<li>The map contains only values with keys greater than your argument. <code>upper_bound</code> will return <code>begin()</code>. Your decrement is UB then, but since it's wrong anyways, you can just use it and dereference it.</li>\n</ol>\n<p>So you only have to handle the first two cases, where <code>upper_bound</code> returns <code>end()</code>:</p>\n<pre><code>void processMap(int key) {\n  while (true) {\n     auto iter = tableMap.upper_bound(key);\n     if (iter == tableMap.end())\n       break; //there is no entry with a greater key\n\n     // use iter...\n  }\n}\n</code></pre>\n", "LastActivityDate": "2013-06-10T07:23:27.630", "Score": "2", "CreationDate": "2013-06-10T07:23:27.630", "ParentId": "17016244", "CommentCount": "0", "OwnerUserId": "1838266"}, "bq_ids": {"n4140": {"so_17016244_17016244_0": {"length": 7, "quality": 0.5384615384615384, "section_id": 744}, "so_17016244_17018742_1": {"length": 6, "quality": 0.6666666666666666, "section_id": 763}}, "n3337": {"so_17016244_17016244_0": {"length": 7, "quality": 0.5384615384615384, "section_id": 733}, "so_17016244_17018742_1": {"length": 6, "quality": 0.6666666666666666, "section_id": 750}}, "n4659": {"so_17016244_17016244_0": {"length": 8, "quality": 0.6153846153846154, "section_id": 802}, "so_17016244_17018742_1": {"length": 6, "quality": 0.6666666666666666, "section_id": 802}}}});