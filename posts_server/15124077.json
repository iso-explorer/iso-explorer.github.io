post_cb({"bq_ids": {"n4140": {"so_15124077_15124077_1": {"length": 8, "quality": 0.8888888888888888, "section_id": 5490}, "so_15124077_15124077_0": {"length": 18, "quality": 0.9473684210526315, "section_id": 5413}}, "n3337": {"so_15124077_15124077_1": {"length": 8, "quality": 0.8888888888888888, "section_id": 5276}, "so_15124077_15124077_0": {"length": 18, "quality": 0.9473684210526315, "section_id": 5208}}, "n4659": {"so_15124077_15124077_1": {"length": 7, "quality": 0.7777777777777778, "section_id": 6924}, "so_15124077_15124077_0": {"length": 18, "quality": 0.9473684210526315, "section_id": 6835}}}, "15124255": {"Id": "15124255", "PostTypeId": "2", "Body": "<p>That's right and what you have shown makes the code invalid. There is also 3.3.1p4 which makes it invalid too (see 7.3.3p13).</p>\n<p>For a reality test, I tested with ICC and it rejects it as expected.</p>\n", "LastActivityDate": "2013-02-27T23:04:17.460", "CommentCount": "4", "CreationDate": "2013-02-27T23:04:17.460", "ParentId": "15124077", "Score": "4", "OwnerUserId": "34509"}, "15124077": {"ViewCount": "1358", "Body": "<p>I scoured the C++11 standard (well, the n3242 draft) and the internet but could not find a precise answer. The code below compiles fine with clang 3.2 and g++ 4.7.2 as well as Visual Studio 2010, but I would expect to get an error instead.</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;typeinfo&gt;\n\n\ntypedef int a_t;\n\n\nnamespace a_ns\n{\nclass a_t {};\n}\n\n\nusing a_ns::a_t;\n\n\nint main()\n{\n    a_t a;\n    std::cout &lt;&lt; typeid(a).name() &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>\n<p>Built with:</p>\n<pre><code>clang -std=c++11 -pedantic -Wall -o a a.cpp -lstdc++\ng++ -std=c++11 -pedantic -Wall -o a a.cpp -lstdc++\ncl -EHsc -GR a.cpp\n</code></pre>\n<p>clang and g++ generated executables print \"i\", which seems to indicate that the <i>a</i> is of type int and the typedef prevailed. cl generated executable prints \"class a_ns::a_t\" which seems to indicate that Visual Studio liked the using declaration more.</p>\n<p>I would expect the code not to compile according to the following standard excerpts. I would expect an error similar to \"target of using declaration conflicts with declaration already in scope\".</p>\n<blockquote>\n<p id=\"so_15124077_15124077_0\">7.1.3.6 Similarly, in a given scope, a class or enumeration shall not be declared with the same name as a typedef-name that is declared in\n  that scope and refers to a type other than the class or enumeration\n  itself.</p>\n<p id=\"so_15124077_15124077_1\">7.3.3.1 A using-declaration introduces a name into the declarative region in which the using-declaration appears.</p>\n<p id=\"so_15124077_15124077_2\">7.3.3.2 Every using-declaration is a declaration [...]</p>\n</blockquote>\n<p>There's probably something I am missing in the standard that explains this behavior (or I am just too tired to see the obvious), but I cannot seem to find it.</p>\n<p>Thank you.</p>\n", "AcceptedAnswerId": "15124255", "Title": "typedef and using declaration for same name at same scope", "CreationDate": "2013-02-27T22:50:37.363", "Id": "15124077", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2013-02-27T23:04:17.460", "Score": "10", "OwnerUserId": "2117330", "Tags": "<c++><typedef><using-declaration>", "AnswerCount": "1"}});