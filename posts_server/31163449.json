post_cb({"31163665": {"Id": "31163665", "PostTypeId": "2", "Body": "<p>MSVC is mistakenly treating <code>false</code> as a null pointer constant. However, according to N4140, \u00a74.10 [conv.ptr]/1 (emphasis mine):</p>\n<blockquote>\n<p id=\"so_31163449_31163665_0\">A null pointer constant is an <strong>integer literal</strong> with value zero\n  or a <strong>prvalue of type std::nullptr_t</strong>. A null pointer constant can be\n  converted to a pointer type; the result is the null pointer value of\n  that type and is distinguishable from every other value of object\n  pointer or function pointer type.</p>\n</blockquote>\n<p>The wording changed a bit from C++11, and you can <a href=\"https://stackoverflow.com/q/17501942/962089\">find that discussion here</a>. The verdict there was that it was an error in C++11 as well.</p>\n<p>For visibility, TartanLlama provided the definition of \"integer literal\" below, according to [lex.icon]/1:</p>\n<blockquote>\n<p id=\"so_31163449_31163665_1\">An integer literal is a sequence of digits that has no period or exponent part, with optional separating single quotes that are ignored when determining its value.</p>\n</blockquote>\n", "LastEditorUserId": "-1", "LastActivityDate": "2015-07-01T14:16:09.547", "Score": "5", "CreationDate": "2015-07-01T14:06:23.223", "ParentId": "31163449", "CommentCount": "4", "OwnerUserId": "962089", "LastEditDate": "2017-05-23T12:06:04.323"}, "bq_ids": {"n4140": {"so_31163449_31163665_1": {"length": 16, "quality": 1.0, "section_id": 5340}, "so_31163449_31163665_0": {"length": 31, "quality": 1.0, "section_id": 39}}, "n3337": {"so_31163449_31163665_0": {"length": 29, "quality": 0.9354838709677419, "section_id": 36}}, "n4659": {"so_31163449_31163665_1": {"length": 15, "quality": 0.9375, "section_id": 6761}, "so_31163449_31163665_0": {"length": 31, "quality": 1.0, "section_id": 39}}}, "31163449": {"ViewCount": "125", "Body": "<p>I have the following code, which compiles in Visual C++ 2012.</p>\n<pre><code>#include &lt;string&gt;\n\nvoid func(std::string str)\n{\n}\n\nvoid my_func()\n{\n    func(false);\n}\n</code></pre>\n<p>The boolean 'false' is implicity passed into the string constructor</p>\n<pre><code>string(const char* _Ptr)\n</code></pre>\n<p>And then the pointer is null (because false = 0). Why does this compile, and should it compile according to the C++11 standard?</p>\n", "AcceptedAnswerId": "31163665", "Title": "C++ Implicit conversion from bool to string", "CreationDate": "2015-07-01T13:56:50.147", "Id": "31163449", "CommentCount": "5", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2015-07-01T14:16:09.547", "Score": "4", "OwnerUserId": "3628115", "Tags": "<c++>", "AnswerCount": "1"}});