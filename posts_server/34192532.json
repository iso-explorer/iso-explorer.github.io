post_cb({"34192532": {"CommentCount": "1", "ViewCount": "266", "CreationDate": "2015-12-10T02:09:15.253", "LastActivityDate": "2015-12-10T03:57:06.203", "Title": "uniform_int_distribution a(), b(), min(), and max()", "AcceptedAnswerId": "34193353", "PostTypeId": "1", "Id": "34192532", "Score": "3", "Body": "<p><a href=\"http://en.cppreference.com/w/cpp/numeric/random/uniform_int_distribution/params\" rel=\"nofollow\">http://en.cppreference.com/w/cpp/numeric/random/uniform_int_distribution/params</a>\n<a href=\"http://en.cppreference.com/w/cpp/numeric/random/uniform_int_distribution/min\" rel=\"nofollow\">http://en.cppreference.com/w/cpp/numeric/random/uniform_int_distribution/min</a>\n<a href=\"http://en.cppreference.com/w/cpp/numeric/random/uniform_int_distribution/max\" rel=\"nofollow\">http://en.cppreference.com/w/cpp/numeric/random/uniform_int_distribution/max</a></p>\n<p>It looks like member function <code>a()</code> is equivalent to member function <code>min()</code>, and member function <code>b()</code> is equivalent to <code>max()</code>.</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;random&gt;\n\nint main() {\n    std::uniform_int_distribution&lt;int&gt; dist(5, 10);\n    std::cout &lt;&lt; \"a \" &lt;&lt; dist.a() &lt;&lt; '\\n';\n    std::cout &lt;&lt; \"b \" &lt;&lt; dist.b() &lt;&lt; '\\n';\n    std::cout &lt;&lt; \"min \" &lt;&lt; dist.min() &lt;&lt; '\\n';\n    std::cout &lt;&lt; \"max \" &lt;&lt; dist.max() &lt;&lt; '\\n';\n}\n</code></pre>\n<p>prints</p>\n<pre><code>a 5\nb 10\nmin 5\nmax 10\n</code></pre>\n<p>When compiled using gcc's standard library. Are these functions really identical, and if so, why are <code>a()</code> and <code>b()</code> defined?</p>\n", "Tags": "<c++><c++11><std>", "OwnerUserId": "852254", "AnswerCount": "3"}, "34192603": {"ParentId": "34192532", "PostTypeId": "2", "CommentCount": "2", "Body": "<p><code>a()</code> and <code>b()</code> return distribution parameters while <code>min()</code> and <code>max()</code> return minimum and maximum potentially generated value. For the uniform distribution the value returned by <code>min()</code> and <code>a()</code> are equal, and same for <code>max()</code> and <code>b()</code>. In general, for other distributions there may not be such correspondence, so I guess <code>a()</code> and <code>b()</code> are there for consistency.</p>\n", "OwnerUserId": "471164", "LastEditorUserId": "471164", "LastEditDate": "2015-12-10T02:19:47.320", "Id": "34192603", "Score": "1", "CreationDate": "2015-12-10T02:15:26.960", "LastActivityDate": "2015-12-10T02:19:47.320"}, "34193353": {"ParentId": "34192532", "PostTypeId": "2", "CommentCount": "4", "Body": "<blockquote>\n<p id=\"so_34192532_34193353_0\">Are these functions really identical</p>\n</blockquote>\n<p>They are identical, because it is reasonable and practical to always assume so. It would be true but pedantic and misleading to say it is not an absolute guarantee.</p>\n<p>I only have access to MinGW 4.7.1, which I assume its standard library is the same as GCC one. Inside it, the class template <code>uniform_int_distribution</code> has members:</p>\n<pre><code>  /**\n   * @brief Returns the inclusive lower bound of the distribution range.\n   */\n  result_type\n  min() const\n  { return this-&gt;a(); }\n\n  /**\n   * @brief Returns the inclusive upper bound of the distribution range.\n   */\n  result_type\n  max() const\n  { return this-&gt;b(); }\n</code></pre>\n<p>So, after function inlining, (<code>a</code> and <code>min</code>) and (<code>b</code> and <code>max</code>) should be tanslated into identical code.</p>\n<p>Reading the standard section 26.5.8.2.1, you will find that it (only indirectly) says they should return the same value. As a result, a sane library implementer will make them effectively identical or at least not-so-different.</p>\n<hr>\n<blockquote>\n<p id=\"so_34192532_34193353_1\">why are a() and b() defined?</p>\n</blockquote>\n<p>I can only guess. It may be about consistency, but the consistency is in a less formal sense.</p>\n<p>Mathematically, a uniform distribution is like this:</p>\n<pre><code>P(i|a,b) = 1/(b-a+1)\n</code></pre>\n<p>And in <code>uniform_int_distribution</code>, we have</p>\n<pre><code>uniform_int_distribution::a()\nuniform_int_distribution::b()\n</code></pre>\n<p>For Bernoulli distribution and <code>bernoulli_distribution</code>:</p>\n<pre><code>P(i|p) = [complicated]\n\nbernoulli_distribution::p()\n</code></pre>\n<p>Poisson:</p>\n<pre><code>P(i|mean) = [complicated]\n\npoisson_distribution::mean()\n</code></pre>\n<p>Normal:</p>\n<pre><code>P(x|mean, standard-deviation) = [complicated]\n\nnormal_distribution::mean()\nnormal_distribution::stddev()\n</code></pre>\n<p>We can observe that they all tell their parameters. It is not useful to generic code, but that may be helpful in some situations.</p>\n</hr>", "OwnerUserId": "2486888", "LastEditorUserId": "2486888", "LastEditDate": "2015-12-10T03:57:06.203", "Id": "34193353", "Score": "2", "CreationDate": "2015-12-10T03:48:42.483", "LastActivityDate": "2015-12-10T03:57:06.203"}, "bq_ids": {"n4140": {"so_34192532_34192994_0": {"section_id": 3518, "quality": 0.9736842105263158, "length": 37}}, "n3337": {"so_34192532_34192994_0": {"section_id": 3383, "quality": 0.9736842105263158, "length": 37}}, "n4659": {"so_34192532_34192994_0": {"section_id": 4281, "quality": 0.9736842105263158, "length": 37}}}, "34192994": {"ParentId": "34192532", "CommentCount": "0", "Body": "<p>Every random number distribution <code>D</code> must have methods</p>\n<pre><code>D::result_type D::min();\nD::result_type D::max();\n</code></pre>\n<p>which return the \"greatest lower bound and the least upper bound on the values potentially returned by <code>d</code>\u2019s <code>operator()</code>, as determined by the current values of <code>d</code>\u2019s parameters\" (\u00a725.1.6, <code>[rand.req.dist]</code>; quote is from paragraph 3(d); the requirement is in Table 117).</p>\n<p>Also, there is an expectation that a distribution <code>D</code> and its associated parameter type <code>D::param_type</code> (called <code>P</code> in the following quote) will have corresponding constructors and parameter accessors. Paragraph 9 of the same section:</p>\n<blockquote>\n<p id=\"so_34192532_34192994_0\">For each of the constructors of <code>D</code> taking arguments corresponding to parameters of the distribution, <code>P</code> shall have a corresponding constructor subject to the same requirements and taking arguments identical in number, type, and default values. Moreover, for each of the member functions of <code>D</code> that return values corresponding to parameters of the distribution, <code>P</code> shall have a corresponding member function with the identical name, type, and semantics.</p>\n</blockquote>\n<p>So <code>std::uniform_int_distribution::min</code> and <code>std::uniform_int_distribution::max</code> are the bounds of a particular distribution instance's possible return values, while <code>std::uniform_int_distribution::a</code> and <code>std::uniform_int_distribution::b</code> are the parameter values which constructed that particular instance. As it happens, in the particular case of <code>std::uniform_{int,real}_distribution</code>, the parameters precisely correspond to the bounds, but the requirements suggest that both bounds and parameters should be provided.</p>\n<p>I suppose it would have been possible to also call the parameter accessors <code>min</code> and <code>max</code>, but the committee chose not to do that.</p>\n", "OwnerUserId": "1566221", "PostTypeId": "2", "Id": "34192994", "Score": "1", "CreationDate": "2015-12-10T03:01:31.800", "LastActivityDate": "2015-12-10T03:01:31.800"}});