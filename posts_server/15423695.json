post_cb({"15423695": {"ViewCount": "2717", "Body": "<p>I'm in a situation in a multithreaded environment where I have a thread that receives data from a socket, and I want to send that data into a messaging queue.</p>\n<p>For instance, something like this:</p>\n<pre><code>char buf[N];\nsize_t len = ::recv(buf, ...);\nqueue.send([buf,len] {\n    //stuff\n});\n</code></pre>\n<p>But that won't work since <code>buf</code> could go out of scope, or get overwritten by the next <code>::recv()</code>. Now I <em>COULD</em> copy it into a <code>string</code>/<code>std::vector</code>/whatever and pass <em>THAT</em> thing by value:</p>\n<pre><code>char buf[N];\nsize_t len = ::recv(buf, ...);\nstd::string my_data(buf, len);\nqueue.send([my_data](){ /* stuff */ });\n</code></pre>\n<p>But there I'm incurring an extra copy, right? Is there a way to get that same functionality without the extra overhead?</p>\n", "AcceptedAnswerId": "15423723", "Title": "Can you capture arrays in a lambda?", "CreationDate": "2013-03-15T02:26:07.100", "Id": "15423695", "CommentCount": "2", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2016-12-20T20:28:52.090", "LastEditorUserId": "3155639", "LastActivityDate": "2016-12-20T20:28:52.090", "Score": "12", "OwnerUserId": "2069064", "Tags": "<c++><c++11><lambda>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_15423695_15423723_0": {"length": 23, "quality": 0.9583333333333334, "section_id": 5981}}, "n3337": {"so_15423695_15423723_0": {"length": 23, "quality": 0.9583333333333334, "section_id": 5749}}, "n4659": {"so_15423695_15423723_0": {"length": 23, "quality": 0.9583333333333334, "section_id": 7478}}}, "15423723": {"Id": "15423723", "PostTypeId": "2", "Body": "<p>Yes, you can.  The Standard says that (5.1.2p21):</p>\n<blockquote>\n<p id=\"so_15423695_15423723_0\">When the lambda-expression is evaluated, the entities that are captured by copy are used to direct-initialize each corresponding non-static data member of the resulting closure object.  (For array members, the array elements are direct-initialized in increasing subscript order.) </p>\n</blockquote>\n<p>which makes it clear that a lambda can capture an array by copy.</p>\n", "LastActivityDate": "2013-03-15T02:30:08.967", "CommentCount": "2", "CreationDate": "2013-03-15T02:30:08.967", "ParentId": "15423695", "Score": "17", "OwnerUserId": "103167"}});