post_cb({"bq_ids": {"n4140": {"so_36640883_36640883_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 302}, "so_36640883_48455845_1": {"length": 12, "quality": 1.0, "section_id": 302}, "so_36640883_48455845_2": {"length": 12, "quality": 0.9230769230769231, "section_id": 286}}, "n3337": {"so_36640883_36640883_0": {"length": 7, "quality": 0.5384615384615384, "section_id": 293}, "so_36640883_48455845_1": {"length": 7, "quality": 0.5833333333333334, "section_id": 293}, "so_36640883_48455845_2": {"length": 12, "quality": 0.9230769230769231, "section_id": 277}}, "n4659": {"so_36640883_36640883_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 309}, "so_36640883_48455845_1": {"length": 12, "quality": 1.0, "section_id": 309}, "so_36640883_48455845_2": {"length": 12, "quality": 0.9230769230769231, "section_id": 293}}}, "36642414": {"Id": "36642414", "PostTypeId": "2", "Body": "<p>There's a DR for this specific issue <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1388\" rel=\"nofollow\">DR1388</a>. Aparently, it seems that GCC and CLANG haven't implemented it yet <a href=\"http://clang.llvm.org/cxx_dr_status.html\" rel=\"nofollow\">CLANG DR1388</a>.</p>\n<blockquote>\n<p id=\"so_36640883_36642414_0\">Does it mean that any instantiation of the templates will be\n  ill-formed, even if you specify the template args explicitly?</p>\n<pre><code>f1&lt;int&gt;(1, 2); // ill-formed?\nf2&lt;int&gt;(1, 2); // ill-formed?\n</code></pre>\n<p id=\"so_36640883_36642414_1\">If that's the case, why allow such declarations at first place?</p>\n</blockquote>\n<p>No if you specify explicitly the template arguments, no deduction occurs and as such the code showed above is legal.</p>\n", "LastActivityDate": "2016-04-15T08:48:09.723", "CommentCount": "8", "CreationDate": "2016-04-15T08:48:09.723", "ParentId": "36640883", "Score": "2", "OwnerUserId": "2352671"}, "36640883": {"ViewCount": "180", "Body": "<p>Is the deduction for <code>f1</code> and <code>f2</code> ill-formed?</p>\n<pre><code>template&lt;class... T, class U&gt;\nvoid f1(T..., U){}\n\ntemplate&lt;class... T&gt;\nvoid f2(T..., int){}\n\nint main()\n{\n    f1(1);\n    f2(1);\n    return 0;\n}\n</code></pre>\n<p>g++ accepts both, clang only accepts <code>f2</code>, and msvc rejects both.</p>\n<p>Related standard wording:</p>\n<p><a href=\"http://eel.is/c++draft/temp.deduct.call\">[temp.deduct.call]</a></p>\n<blockquote>\n<p id=\"so_36640883_36640883_0\">When a function parameter pack appears in a non-deduced context ([temp.deduct.type]), the type of that parameter pack is never deduced.</p>\n</blockquote>\n<p><a href=\"http://eel.is/c++draft/temp.deduct.type#5\">[temp.deduct.type]p5</a></p>\n<blockquote>\n<p id=\"so_36640883_36640883_1\">The non-deduced contexts are:</p>\n<ul>\n<li>A function parameter pack that does not occur at the end of the parameter-declaration-list.</li>\n</ul>\n</blockquote>\n<p>So it seems that MSVC is correct in rejecting both?</p>\n<p>Does it mean that any instantiation of the templates will be ill-formed, even if you specify the template args explicitly?</p>\n<pre><code>f1&lt;int&gt;(1, 2); // ill-formed?\nf2&lt;int&gt;(1, 2); // ill-formed?\n</code></pre>\n<p>If that's the case, why allow such declarations at first place?</p>\n", "Title": "Template arguments deduction for function parameter pack followed by other parameters", "CreationDate": "2016-04-15T07:30:34.887", "LastActivityDate": "2016-04-15T08:48:09.723", "CommentCount": "0", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2016-04-15T08:01:14.473", "LastEditorUserId": "2969631", "Id": "36640883", "Score": "7", "OwnerUserId": "2969631", "Tags": "<c++><c++11><variadic-templates><template-deduction>", "AnswerCount": "1"}});