post_cb({"bq_ids": {"n4140": {"so_48332111_48332288_1": {"length": 9, "quality": 0.9, "section_id": 5386}, "so_48332111_48332288_0": {"length": 13, "quality": 0.8666666666666667, "section_id": 7150}, "so_48332111_48332224_0": {"length": 6, "quality": 0.75, "section_id": 7150}, "so_48332111_48332224_1": {"length": 12, "quality": 0.9230769230769231, "section_id": 7165}}, "n3337": {"so_48332111_48332224_0": {"length": 6, "quality": 0.75, "section_id": 6894}, "so_48332111_48332288_0": {"length": 13, "quality": 0.8666666666666667, "section_id": 6894}, "so_48332111_48332288_1": {"length": 9, "quality": 0.9, "section_id": 5180}, "so_48332111_48332224_1": {"length": 12, "quality": 0.9230769230769231, "section_id": 6909}}, "n4659": {"so_48332111_48332224_0": {"length": 7, "quality": 0.875, "section_id": 8651}, "so_48332111_48332288_0": {"length": 15, "quality": 1.0, "section_id": 8651}, "so_48332111_48332288_1": {"length": 9, "quality": 0.9, "section_id": 6811}, "so_48332111_48332224_1": {"length": 12, "quality": 0.9230769230769231, "section_id": 8673}}}, "48332288": {"Id": "48332288", "PostTypeId": "2", "Body": "<p>The object <code>_</code> is guaranteed to be initialized. According to [basic.start.static]/1,</p>\n<blockquote>\n<p id=\"so_48332111_48332288_0\">Variables with static storage duration are initialized as a consequence of program initiation. Variables with\n  thread storage duration are initialized as a consequence of thread execution.</p>\n</blockquote>\n<p>In case you were wondering whether that could be read only as guaranteeing that static initialization shall occur, and not guaranteeing that dynamic initialization shall occur, see [dcl.dcl]/11,</p>\n<blockquote>\n<p id=\"so_48332111_48332288_1\">A definition causes the appropriate amount of storage to be\n  reserved and any appropriate initialization (11.6) to be done.</p>\n</blockquote>\n<p>Thus, all initialization required by the semantics of the initializer <code>{init()}</code> shall be performed on the object <code>_</code>.</p>\n<p>As usual, the as-if rule applies. If <code>init()</code> has any observable behaviour, such behaviour must occur. It has any side effects that affect observable behaviour, such side effects must occur.</p>\n<p>The fact that <code>_</code> is not odr-used is irrelevant. The tangent about <code>main</code> is irrelevant too.</p>\n", "LastActivityDate": "2018-01-19T00:07:24.367", "CommentCount": "0", "CreationDate": "2018-01-19T00:07:24.367", "ParentId": "48332111", "Score": "1", "OwnerUserId": "481267"}, "48332224": {"Id": "48332224", "PostTypeId": "2", "Body": "<p>It's supposedly the linker's job to collate all objects with <em>static storage-duration</em> from all translation units for initialization during <em>program initiation</em> - however, its a bit more than that, the guarantee is that those objects will be initialized before the <a href=\"https://stackoverflow.com/questions/1421671/when-are-static-c-class-members-initialized\">use of any function within that translation unit</a>.</p>\n<blockquote>\n<p id=\"so_48332111_48332224_0\"><a href=\"http://eel.is/c++draft/basic.start.static#1\" rel=\"nofollow noreferrer\">basic.start.static/1</a>: Variables with static storage duration are initialized as a\n  consequence of program initiation....</p>\n</blockquote>\n<p>Also see:</p>\n<blockquote>\n<p id=\"so_48332111_48332224_1\"><a href=\"http://eel.is/c++draft/basic.stc.static#2\" rel=\"nofollow noreferrer\">basic.stc.static/2</a>: If a variable with static storage duration has initialization or a\n  destructor with side effects, it shall not be eliminated even if it\n  appears to be unused...</p>\n</blockquote>\n", "LastEditorUserId": "1621391", "LastActivityDate": "2018-01-19T00:16:20.353", "Score": "4", "CreationDate": "2018-01-19T00:00:21.233", "ParentId": "48332111", "CommentCount": "5", "OwnerUserId": "1621391", "LastEditDate": "2018-01-19T00:16:20.353"}, "48332111": {"ViewCount": "67", "Body": "<p>Consider the following complete program consisting of two <code>TU</code>'s:</p>\n<pre><code>// 1.cpp\nbool init() { /* ... */ }\nconst auto _{init()};\n\n// 2.cpp\nint main() {}\n</code></pre>\n<p>Question: is there any guarantee that _ is initialized at some point (I do not care when)?</p>\n<p>Now consider the program consisting of one <code>TU</code>:</p>\n<pre><code>// 1.cpp\nbool init() { /* ... */ }\nconst auto _{init()};\nint main() {}\n</code></pre>\n<p>Note that _ is not <em>odr-used</em>.</p>\n<p>However, can <code>main()</code>, in the second case, be said to be <code>odr-used</code>, since it gets (sort of) \"referred by the implementation\" as it gets called when the program is run?</p>\n<p>And if <code>main()</code> is <code>odr-used</code>, does this imply that _ is guaranteed to be initialized even if it's not <code>odr-used</code>?</p>\n<p>EDIT:</p>\n<p>This is what <a href=\"http://en.cppreference.com/w/cpp/language/initialization\" rel=\"nofollow noreferrer\">en.cppreference.com</a> says about <strong>Deferred dynamic initialization</strong>:</p>\n<blockquote>\n<p id=\"so_48332111_48332111_0\">If no variable or function is odr-used from a given translation unit,\n  the non-local variables defined in that translation unit may never be\n  initialized (this models the behavior of an on-demand dynamic library)</p>\n</blockquote>\n<p>Can you answer my questions considering the above when reading my two examples?</p>\n", "Title": "Guarantee of deferred dynamic initialization of non odr-used global variable", "CreationDate": "2018-01-18T23:47:39.133", "LastActivityDate": "2018-01-19T01:02:49.400", "CommentCount": "1", "LastEditDate": "2018-01-19T01:02:49.400", "PostTypeId": "1", "LastEditorUserId": "989331", "Id": "48332111", "Score": "3", "OwnerUserId": "989331", "Tags": "<c++><std><c++17>", "AnswerCount": "2"}});