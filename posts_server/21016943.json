post_cb({"21017482": {"PostTypeId": "2", "ParentId": "21016943", "Body": "<p>It looks like you'll need to write your own custom reverse iterator implementation for this specific case since your iterator type is not compatible with this specific implementation of reverse_iterator.  </p>\n<p>According to <a href=\"http://en.cppreference.com/w/cpp/iterator/reverse_iterator\" rel=\"nofollow\">http://en.cppreference.com/w/cpp/iterator/reverse_iterator</a>, some implementations do also store a decremented copy of the iterator but not all.  Boost::reverse_iterator does not appear to store an additional copy.</p>\n", "CreationDate": "2014-01-09T10:22:58.897", "Score": "1", "CommentCount": "0", "Id": "21017482", "OwnerUserId": "853665", "LastActivityDate": "2014-01-09T10:22:58.897"}, "21016943": {"AcceptedAnswerId": "21017482", "OwnerUserId": "1182921", "LastActivityDate": "2014-01-09T10:28:17.093", "CreationDate": "2014-01-09T10:01:14.970", "Score": "3", "CommentCount": "4", "Title": "How can you use a reverse iterator with an iterator that is a proxy", "AnswerCount": "2", "PostTypeId": "1", "Tags": "<c++><iterator><reverse-iterator>", "Body": "<p>Given you have an iterator that is effectively a proxy and contains the data that it returns, how can you make a reverse iterator?</p>\n<p>std::reverse_iterator implementation of the dereferencing operator creates a temporary object which it then decrements and dereferences, with code that is something like:</p>\n<pre><code>  reference operator*() const {\n    iterator tmp = current;\n    return *--tmp;\n  }\n</code></pre>\n<p>with the result that what it returns to you is a pointer to data that goes out of scope before you get hold of it.</p>\n<p>This has rather unfortunate results.</p>\n<p>How can you get round this?</p>\n", "Id": "21016943", "ViewCount": "108"}, "21017615": {"PostTypeId": "2", "ParentId": "21016943", "Body": "<p>I think the standard library implementation is incorrect. If you look at 24.5.1.3.4 [reverse.iter.op.star] in the C++11 standard you'll find the following:</p>\n<pre><code>deref_tmp = current;\n--deref_tmp;\nreturn *deref_tmp;\n</code></pre>\n<blockquote>\n<p id=\"so_21016943_21017615_0\">Note: This operation must use an auxillary member variable rather than a temporary variable to avoid returning a reference that persists beyond the lifetime of the associated iterator.</p>\n</blockquote>\n<p>In the standard <code>deref_tmp</code> is a for-exposition-only data member of <code>reverse_iterator</code>.</p>\n", "CreationDate": "2014-01-09T10:28:17.093", "Score": "1", "CommentCount": "3", "Id": "21017615", "OwnerUserId": "2491746", "LastActivityDate": "2014-01-09T10:28:17.093"}, "bq_ids": {"n3337": {"so_21016943_21017615_0": {"quality": 0.85, "length": 17, "section_id": 5393}}}});