post_cb({"43782361": {"CommentCount": "2", "AcceptedAnswerId": "43782808", "CreationDate": "2017-05-04T12:01:25.717", "LastActivityDate": "2017-05-04T12:29:13.380", "PostTypeId": "1", "ViewCount": "75", "FavoriteCount": "1", "Title": "What are rules for a class static variable initialization?", "Id": "43782361", "Score": "3", "Body": "<p>I have some legacy code and I need to add a new class for the message (which is irrelevant to my question). But it turns out that I need to declare an empty constructor in order for some static to be initialized. Not a default constructor or compiler-provided, but empty user-defined. I tried to reduce the code to MWE and here what I get:</p>\n<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nstruct Test\n{\n    Test() {cout &lt;&lt; \"Test::Test()\" &lt;&lt; \"\\n\";}\n    void dummy(){}\n};\n\ntemplate&lt;typename T&gt;\nstruct Message\n{\n    Message()\n    {\n        test.dummy(); // this call have to be here in order to initialize Test, but why?\n    }\n\n    static Test test;\n};\n\ntemplate&lt;typename T&gt;\nTest Message&lt;T&gt;::test;\n\nstruct A : public Message&lt;A&gt;\n{\n    //A(){} // uncomment this (and comment the default one) to call the Test constructor\n    A() = default;\n};\n\nint main()\n{\n}\n</code></pre>\n<p>This is what happening:</p>\n<ul>\n<li>The program itself is empty, i.e. no instances are created.</li>\n<li>There's a CRTP for an <code>A</code> class, which seems to be critical to the example.</li>\n<li>There's a static declaration for the base of <code>A</code> and I'm expecting it's constructor to be called.</li>\n<li>There's a dummy call to the function that does nothing, but also critical.</li>\n</ul>\n<p>The problem is that if I don't provide a custom constructor then the static constructor never gets called. And I can't understand why do I need this? What's the difference with defaulted or compiler generated? And why do I need to call a dummy function?</p>\n<p>I believe there's a rule for that. I checked it with different versions of gcc and clang - the behavior is the same. I very appreciate links to the standard/documentation.</p>\n", "Tags": "<c++><static><crtp>", "OwnerUserId": "1341942", "AnswerCount": "2"}, "43782947": {"ParentId": "43782361", "CommentCount": "1", "Body": "<p>C++14 [temp.inst]/2:</p>\n<blockquote>\n<p id=\"so_43782361_43782947_0\">Unless a member of a class template or a member template has been explicitly instantiated or explicitly specialized, the specialization of the member is implicitly instantiated when the specialization is referenced in a context that requires the member definition to exist; in particular, the initialization (and any associated side-effects) of a static data member does not occur unless the static data member is itself used in a way that requires the definition of the static data member to exist.</p>\n</blockquote>\n<p>This says clearly that <code>Message&lt;A&gt;::test</code> will not be initialized unless it is used in a way that requires its definition to exist.</p>\n<p>The only expression in your program that would require the definition is <code>test.dummy()</code> in the constructor of <code>Message&lt;A&gt;</code> ; so if that expression is removed then <code>test</code> must not be initialized.</p>\n<p>For the case where <code>test.dummy()</code> is present, note that it is inside a template function, the constructor of <code>Message&lt;A&gt;</code>.  If this constructor is never instantiated, then <code>test.dummy()</code> will not be considered.</p>\n<p>As pointed out by VTT, [class.ctor] says that the explicitly-defaulted constructor for <code>A</code> means that no constructor is defined unless an <code>A</code> is odr-used.</p>\n<p>Your code doesn't odr-use an <code>A</code>, therefore <code>A</code>'s constructor is not defined, therefore there is no invocation of base class constructor (which would only happen if if <code>A</code>'s constructor was defined), therefore the constructor template <code>Message&lt;A&gt;()</code> is not instantiated, therefore <code>test</code> is not required to exist.</p>\n", "OwnerUserId": "1505939", "PostTypeId": "2", "Id": "43782947", "Score": "3", "CreationDate": "2017-05-04T12:29:13.380", "LastActivityDate": "2017-05-04T12:29:13.380"}, "bq_ids": {"n4140": {"so_43782361_43782808_1": {"section_id": 370, "quality": 0.9523809523809523, "length": 20}, "so_43782361_43782947_0": {"section_id": 234, "quality": 0.9767441860465116, "length": 42}}, "n3337": {"so_43782361_43782808_1": {"section_id": 360, "quality": 0.9523809523809523, "length": 20}, "so_43782361_43782947_0": {"section_id": 227, "quality": 0.9767441860465116, "length": 42}}, "n4659": {"so_43782361_43782808_1": {"section_id": 384, "quality": 0.9523809523809523, "length": 20}, "so_43782361_43782947_0": {"section_id": 244, "quality": 0.9534883720930233, "length": 41}}}, "43782808": {"ParentId": "43782361", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>If you leave <code>A</code> constructor defaulted and never call it then there is no need to generate it and therefore no need to create <code>test</code>. If you explicitly default it at definition, call <code>A</code> constructor or access <code>A::test</code> it will be initialized properly.</p>\n<blockquote>\n<p id=\"so_43782361_43782808_0\">12.1 Constructors [class.ctor]</p>\n<p id=\"so_43782361_43782808_1\">7\n  A default constructor that is defaulted and not defined as deleted is implicitly defined when it is odr-used (3.2) to create an object of its class type (1.8) or when it is explicitly defaulted after its first declaration.</p>\n</blockquote>\n<pre><code>struct A : public Message&lt;A&gt;\n{\n    A() = default; // no constructor is emitted unless A is instantiated\n\n    A(); // declaration\n};\n\nA::A() = default; // explicit default definition\n\nint\nmain()\n{\n    A a; // instantiation\n    A::test; // just explicitly access test so it is initialized regardless of A constructor\n}\n</code></pre>\n", "OwnerUserId": "7860670", "LastEditorUserId": "7860670", "LastEditDate": "2017-05-04T12:24:07.523", "Id": "43782808", "Score": "4", "CreationDate": "2017-05-04T12:22:59.843", "LastActivityDate": "2017-05-04T12:24:07.523"}});