post_cb({"bq_ids": {"n4140": {"so_4950125_4950186_1": {"length": 9, "quality": 0.6923076923076923, "section_id": 3286}, "so_4950125_4950186_2": {"length": 5, "quality": 1.0, "section_id": 3286}, "so_4950125_4950186_0": {"length": 4, "quality": 1.0, "section_id": 3286}, "so_4950125_4950186_5": {"length": 6, "quality": 0.8571428571428571, "section_id": 3290}}, "n3337": {"so_4950125_4950186_1": {"length": 9, "quality": 0.6923076923076923, "section_id": 3156}, "so_4950125_4950186_2": {"length": 5, "quality": 1.0, "section_id": 3156}, "so_4950125_4950186_0": {"length": 4, "quality": 1.0, "section_id": 3156}, "so_4950125_4950186_5": {"length": 6, "quality": 0.8571428571428571, "section_id": 3160}}, "n4659": {"so_4950125_4950186_1": {"length": 8, "quality": 0.6153846153846154, "section_id": 4058}, "so_4950125_4950186_2": {"length": 5, "quality": 1.0, "section_id": 4048}, "so_4950125_4950186_5": {"length": 6, "quality": 0.8571428571428571, "section_id": 4052}}}, "4950186": {"Id": "4950186", "PostTypeId": "2", "Body": "<p>The \"default constructors\" of primitive types (including pointers) produce 0-filled memory, much like global variables.</p>\n<p>Here is the relevant standard language (from dcl.init):</p>\n<blockquote>\n<p id=\"so_4950125_4950186_0\">To default-initialize an object of\n  type T means:</p>\n<p id=\"so_4950125_4950186_1\">--if  T is a non-POD class type\n  (<em>class</em>), the default constructor for\n      T is called (and the initialization is ill-formed if T has\n  no acces-\n      sible default constructor);</p>\n<p id=\"so_4950125_4950186_2\">--if T is an array type, each\n  element is default-initialized;</p>\n<p id=\"so_4950125_4950186_3\">--otherwise, the storage for the\n  object is zero-initialized.</p>\n<p id=\"so_4950125_4950186_4\">...</p>\n<p id=\"so_4950125_4950186_5\">7 An  object whose initializer is an\n  empty set of parentheses, i.e., (),<br>\n  shall be default-initialized.</br></p>\n</blockquote>\n<p>Also, from lib.map.access:</p>\n<blockquote>\n<p id=\"so_4950125_4950186_6\">23.3.1.2  map element access                          [lib.map.access]</p>\n<p id=\"so_4950125_4950186_7\">reference operator[](const key_type&amp;\n  x);</p>\n<p id=\"so_4950125_4950186_8\">Returns:\n      (*((insert(make_pair(x, T()))).first)).second.</p>\n</blockquote>\n", "LastEditorUserId": "3458", "LastActivityDate": "2011-02-09T20:56:54.503", "Score": "10", "CreationDate": "2011-02-09T20:37:58.103", "ParentId": "4950125", "CommentCount": "0", "OwnerUserId": "3458", "LastEditDate": "2011-02-09T20:56:54.503"}, "4950125": {"ViewCount": "477", "Body": "<p>I have something like this:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;map&gt;\n\nint main() {\n\n    std::map&lt;int, int*&gt; mapaString;\n    int* teste = mapaString[0];\n    std::cout &lt;&lt; teste &lt;&lt; std::endl;\n    if(!teste)\n        mapaString[0] = new int(0);\n\n    std::cout &lt;&lt; mapaString[0] &lt;&lt; std::endl;\n    std::cout &lt;&lt; mapaString[1] &lt;&lt; std::endl;\n\n    return 0;\n}\n</code></pre>\n<p>In documentation at <a href=\"http://gcc.gnu.org/onlinedocs/libstdc++/latest-doxygen/a00592.html#a4a4a9f95131baf0713596d672ec36b5f\" rel=\"nofollow\">gcc</a> and <a href=\"http://www.cplusplus.com/reference/stl/map/operator%5B%5D/\" rel=\"nofollow\">cpluplus.com</a> it's just said that will be called the default constructor of the element, but when a pointer is declared without initializing it, its value will be undefined.</p>\n<p>Is it guaranteed that the value returned will be a NULL pointer when calling subscript operator([]) when there is no mapped value assigned to the key and return type is a pointer?</p>\n", "AcceptedAnswerId": "4950186", "Title": "Behavior of calling operator [] when no mapped value is assigned to the key", "CreationDate": "2011-02-09T20:33:03.313", "Id": "4950125", "CommentCount": "2", "LastEditDate": "2013-06-26T17:06:24.763", "PostTypeId": "1", "LastEditorUserId": "335858", "LastActivityDate": "2013-06-26T17:06:24.763", "Score": "2", "OwnerUserId": "174605", "Tags": "<c++><pointers><map><operators><g++>", "AnswerCount": "2"}, "4950230": {"Id": "4950230", "PostTypeId": "2", "Body": "<p>Just like any uninitialized variable, you cannot assume this will be initialized properly to value. It will depend on your build, release or debug, your compiler, your platform, etc. I would probably do this:</p>\n<pre><code>if(mapaString.find(key) == mapaString.end()) { mapaString[0] = 0; }\n</code></pre>\n<p>Then you can be sure the pointer for key was initialized to 0 / NULL.</p>\n", "LastActivityDate": "2011-02-09T20:43:51.013", "CommentCount": "2", "CreationDate": "2011-02-09T20:43:51.013", "ParentId": "4950125", "Score": "-1", "OwnerUserId": "610140"}});