post_cb({"bq_ids": {"n4140": {"so_29392234_29392868_0": {"length": 14, "quality": 0.875, "section_id": 7049}, "so_29392234_29392868_1": {"length": 12, "quality": 1.0, "section_id": 7054}}, "n3337": {"so_29392234_29392868_0": {"length": 14, "quality": 0.875, "section_id": 6794}, "so_29392234_29392868_1": {"length": 12, "quality": 1.0, "section_id": 6798}}, "n4659": {"so_29392234_29392868_0": {"length": 14, "quality": 0.875, "section_id": 8546}, "so_29392234_29392868_1": {"length": 12, "quality": 1.0, "section_id": 8551}}}, "29392234": {"ViewCount": "182", "Body": "<p>At work, I'm experimenting a bit to bring some reflection into our codebase. Basically what I want to achieve, is to capture a pointer to data-member inside the type of the data-member's initializer:</p>\n<pre class=\"lang-cpp prettyprint-override\"><code>template&lt;class Class, int Class::*dataMember&gt;\nstruct Reflect\n{\n  operator int() {return 0;}\n};\n\nclass Foo\n{\npublic:\n  int bar = Reflect&lt;Foo, &amp;Foo::bar&gt;{};\n};\n</code></pre>\n<p>Although clang 3.4.1 (<a href=\"http://gcc.godbolt.org/\">http://gcc.godbolt.org/</a>) and Intel C++ XE 14.0 are able to compile this piece of code, when using MSVC12 I get the following error message:</p>\n<blockquote>\n<p id=\"so_29392234_29392234_0\">error C2065: 'bar' : undeclared identifier</p>\n<p id=\"so_29392234_29392234_1\">error C2975: 'dataMember' : invalid template argument for 'Reflect', expected compile-time constant expression</p>\n</blockquote>\n<p>Furthermore, gcc 4.9.2 also seems to have trouble with it: <a href=\"http://ideone.com/ZUVOMO\">http://ideone.com/ZUVOMO</a>.</p>\n<p><strong>So my questions are:</strong></p>\n<ol>\n<li>Is the above piece of code valid C++11?</li>\n<li>If yes, are there any work arounds for the failing compilers?</li>\n</ol>\n", "AcceptedAnswerId": "29392868", "Title": "Inline member initializer containing pointer to member", "CreationDate": "2015-04-01T13:34:43.000", "Id": "29392234", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2015-04-01T13:39:23.320", "LastEditorUserId": "3953764", "LastActivityDate": "2015-04-01T14:30:23.033", "Score": "7", "OwnerUserId": "2524853", "Tags": "<c++><templates><c++11><initializer><pointer-to-member>", "AnswerCount": "1"}, "29392868": {"Id": "29392868", "PostTypeId": "2", "Body": "<p>What VC++ complains about is certainly not a problem; [basic.scope.pdecl]/1,6:</p>\n<blockquote>\n<p id=\"so_29392234_29392868_0\">The point of declaration for a name is immediately after its complete\n  declarator (Clause 8) <strong>and before its initializer</strong> (if any), except as\n  noted below.[\u2026] <br/></p>\n<p id=\"so_29392234_29392868_1\"><strong>After the point of declaration of a class member, the member name can\n  be looked up in the scope of its class.</strong></p>\n</blockquote>\n<p>This implies that the name lookup is fine. However, as pointed out by @hvd in the comments, there are certain ambiguities in the grammar of such constructs.<br>\nPresumably GCC parses the above line until the comma:</br></p>\n<pre><code>int bar = Reflect&lt;Foo,\n// at this point Reflect &lt; Foo can be a perfectly fine relational-expression.\n// stuff after the comma could be a declarator for a second member.\n</code></pre>\n<p>And bails out once the rest is encountered.</p>\n<p><hr>\nA workaround that makes GCC happy is</hr></p>\n<pre><code>    int bar = decltype( Reflect&lt;Foo, &amp;Foo::bar&gt;{} )();\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/25f78764225465e5\" rel=\"nofollow\"><strong>Demo</strong></a>. This does not help with VC++ though, which apparently confuses the point of declaration as indicated by the error message.\nThus moving the initializer into a constructor will work:</p>\n<pre><code>int bar;\n\nFoo() : bar( Reflect&lt;Foo, &amp;Foo::bar&gt;{} ) {}\n// (also works for GCC)\n</code></pre>\n<p>... while providing an initializer at the declaration of <code>bar</code> cannot. <a href=\"http://rextester.com/GBOY65984\" rel=\"nofollow\"><strong>Demo #2</strong></a> on rextester.</p>\n", "LastEditorUserId": "3647361", "LastActivityDate": "2015-04-01T14:30:23.033", "Score": "2", "CreationDate": "2015-04-01T14:02:33.200", "ParentId": "29392234", "CommentCount": "12", "OwnerUserId": "3647361", "LastEditDate": "2015-04-01T14:30:23.033"}});