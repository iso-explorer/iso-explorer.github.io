post_cb({"bq_ids": {"n4140": {"so_4027154_4027336_0": {"length": 118, "quality": 0.8740740740740741, "section_id": 91}}, "n3337": {"so_4027154_4027336_0": {"length": 118, "quality": 0.8740740740740741, "section_id": 86}}}, "4027154": {"CreationDate": "2010-10-26T19:14:51.247", "ViewCount": "920", "Id": "4027154", "AcceptedAnswerId": "4027336", "Score": "5", "Title": "Why can't I downcast pointer to members in template arguments?", "CommentCount": "0", "Body": "<p>If I make a pointer-to-base-member, I can convert it to a pointer-to-derived-member usually, but not when used within a template like Buzz below, where the first template argument influences the second one. Am I fighting compiler bugs or does the standard really mandate this not work?</p>\n<pre><code>struct Foo\n{\n    int x;\n};\n\nstruct Bar : public Foo\n{\n};\n\ntemplate&lt;class T, int T::* z&gt;\nstruct Buzz\n{\n};\n\nstatic int Bar::* const workaround = &amp;Foo::x;\n\nint main()\n{\n    // This works. Downcasting of pointer to members in general is fine.\n    int Bar::* y = &amp;Foo::x;\n\n    // But this doesn't, at least in G++ 4.2 or Sun C++ 5.9. Why not?\n    // Error: could not convert template argument '&amp;Foo::x' to 'int Bar::*'\n    Buzz&lt;Bar, &amp;Foo::x&gt; test;\n\n    // Sun C++ 5.9 accepts this but G++ doesn't because '&amp;' can't appear in\n    // a constant expression\n    Buzz&lt;Bar, static_cast&lt;int Bar::*&gt;(&amp;Foo::x)&gt; test;\n\n    // Sun C++ 5.9 accepts this as well, but G++ complains \"workaround cannot\n    // appear in a constant expression\"\n    Buzz&lt;Bar, workaround&gt; test;\n\n    return 0;\n}\n</code></pre>\n", "Tags": "<c++><templates><implicit-cast><pointer-to-member><downcasting>", "LastActivityDate": "2010-10-26T19:38:34.960", "PostTypeId": "1", "AnswerCount": "1", "OwnerUserId": "50385"}, "4027336": {"CommentCount": "2", "Body": "<p>It simply isn't allowed. According to \u00a714.3.2/5:</p>\n<blockquote>\n<p id=\"so_4027154_4027336_0\">The following conversions are performed on each expression used as a non-type template-argument. If a non-type template-argument cannot be converted to the type of the corresponding template-parameter then the program is ill-formed.<br>\n  \u2014 for a non-type template-parameter of integral or enumeration type, integral promotions (4.5) and integral conversions (4.7) are applied.<br>\n  \u2014 for a non-type template-parameter of type pointer to object, qualification conversions (4.4) and the array-to-pointer conversion (4.2) are applied.\n  \u2014 For a non-type template-parameter of type reference to object, no conversions apply. The type referred to by the reference may be more cv-qualified than the (otherwise identical) type of the template argument. The template-parameter is bound directly to the template-argument, which must be an lvalue.<br>\n  \u2014 For a non-type template-parameter of type pointer to function, only the function-to-pointer conversion (4.3) is applied. If the template-argument represents a set of overloaded functions (or a pointer to such), the matching function is selected from the set (13.4).<br>\n  \u2014 For a non-type template-parameter of type reference to function, no conversions apply. If the template-argument represents a set of overloaded functions, the matching function is selected from the set (13.4).<br>\n  \u2014 For a non-type template-parameter of type pointer to member function, no conversions apply. If the template-argument represents a set of overloaded member functions, the matching member function is selected from the set (13.4).<br>\n  \u2014 <strong>For a non-type template-parameter of type pointer to data member, qualification conversions (4.4) are applied.</strong></br></br></br></br></br></br></p>\n</blockquote>\n<p>I've emphasized the conversion regarding pointer to data members. Note that your conversion (\u00a74.11/2) is not listed. In C++0x, it remains the same in this regard.</p>\n", "CreationDate": "2010-10-26T19:35:49.973", "ParentId": "4027154", "Id": "4027336", "LastActivityDate": "2010-10-26T19:35:49.973", "PostTypeId": "2", "Score": "5", "OwnerUserId": "87234"}});