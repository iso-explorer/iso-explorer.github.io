post_cb({"7357103": {"ParentId": "7357078", "PostTypeId": "2", "CommentCount": "9", "CreationDate": "2011-09-09T04:17:38.633", "Score": "10", "LastEditorUserId": "103167", "LastEditDate": "2011-09-09T04:22:40.397", "Id": "7357103", "OwnerUserId": "103167", "Body": "<p>The standard says (section 3.3.7):</p>\n<blockquote>\n<p id=\"so_7357078_7357103_0\">The potential scope of a name declared in a class consists not only of the declarative region following the name\u2019s point of declaration, but also of all function bodies, brace-or-equal-initializers of non-static data members, and default arguments in that class (including such things in nested classes).</p>\n</blockquote>\n<p>This is probably accomplished by delaying processing bodies of inline member functions until after parsing the entire class definition.</p>\n", "LastActivityDate": "2011-09-09T04:22:40.397"}, "7357100": {"ParentId": "7357078", "CommentCount": "3", "CreationDate": "2011-09-09T04:17:05.950", "OwnerUserId": "5987", "PostTypeId": "2", "Id": "7357100", "Score": "2", "Body": "<p>Just guessing: the compiler saves the body of the function and doesn't actually process it until the class declaration is complete.</p>\n", "LastActivityDate": "2011-09-09T04:17:05.950"}, "7357922": {"ParentId": "7357078", "CommentCount": "0", "CreationDate": "2011-09-09T06:32:16.193", "OwnerUserId": "191596", "PostTypeId": "2", "Id": "7357922", "Score": "0", "Body": "<p>unlike a namespace, a class' scope cannot be reopened. it is bound.</p>\n<p>imagine implementing a class in a header if everything needed to be declared in advance. i presume that since it is bound, it was more logical to write the language as it is, rather than requiring the user to write forwards in the class (or requiring definitions separate from declarations).</p>\n", "LastActivityDate": "2011-09-09T06:32:16.193"}, "7357773": {"ParentId": "7357078", "CommentCount": "2", "CreationDate": "2011-09-09T06:12:34.900", "OwnerUserId": "147192", "PostTypeId": "2", "Id": "7357773", "Score": "3", "Body": "<p>Actually, I think you need to reverse the question to understand it.</p>\n<p><em>Why does C++ require forward declaration ?</em></p>\n<p>Because of the way C++ works (include files, not modules), it would otherwise need to wait for the whole Translation Unit before being able to assess, for sure, what the functions are. There are several downsides here:</p>\n<ul>\n<li>compilation time would take yet another hit</li>\n<li>it would be nigh impossible to provide any guarantee for code in headers, since any introduction of a later function could invalidate it all</li>\n</ul>\n<p><em>Why is a class different ?</em></p>\n<p>A class is by definition contained. It's a small unit (or should be...). Therefore:</p>\n<ul>\n<li>there is little compilation time issue, you can wait until the class end to start analyzing</li>\n<li>there is no risk of dependency hell, since all dependencies are clearly identified and isolated</li>\n</ul>\n<p>Therefore we can eschew this annoying forward-declaration rule for classes.</p>\n", "LastActivityDate": "2011-09-09T06:12:34.900"}, "7357078": {"CommentCount": "0", "AcceptedAnswerId": "7357103", "PostTypeId": "1", "LastEditorUserId": "541686", "CreationDate": "2011-09-09T04:11:58.277", "LastActivityDate": "2011-09-09T06:32:16.193", "LastEditDate": "2011-09-09T04:23:17.633", "ViewCount": "669", "FavoriteCount": "2", "Title": "Why doesn't C++ need forward declarations for class members?", "Id": "7357078", "Score": "12", "Body": "<p>I was under the impression that everything in C++ must be declared before being used.</p>\n<p>In fact, I remember reading that <em>this is the reason</em> why the use of <code>auto</code> in return types is not valid C++0x without something like <code>decltype</code>: the compiler must know the declared type <strong>before</strong> evaluating the function body.</p>\n<p>Imagine my surprise when I noticed (after a long time) that the following code is in fact perfectly legal:</p>\n<p><em>[Edit: Changed example.]</em></p>\n<pre><code>class Foo\n{\n    Foo(int x = y);\n    static const int y = 5;\n};\n</code></pre>\n<p>So now I don't understand:</p>\n<h3>Why doesn't the compiler require a forward declaration inside classes, when it requires them in other places?</h3>\n", "Tags": "<c++><forward-declaration>", "OwnerUserId": "541686", "AnswerCount": "5"}, "bq_ids": {"n4140": {"so_7357078_7357103_0": {"section_id": 7070, "quality": 0.9, "length": 27}}, "n3337": {"so_7357078_7357103_0": {"section_id": 6814, "quality": 0.9666666666666667, "length": 29}}, "n4659": {"so_7357078_7357103_0": {"section_id": 8567, "quality": 0.9, "length": 27}}}, "7357097": {"ParentId": "7357078", "PostTypeId": "2", "CommentCount": "4", "CreationDate": "2011-09-09T04:16:42.473", "Score": "6", "LastEditorUserId": "927034", "LastEditDate": "2011-09-09T05:01:11.707", "Id": "7357097", "OwnerUserId": "927034", "Body": "<p>Function definitions within the class body are treated as if they were actually defined after the class has been defined. So your code is equivalent to:</p>\n<pre><code>class Foo\n{\n    Foo();\n    int x, *p;\n};\ninline Foo::Foo() { p = &amp;x; }\n</code></pre>\n", "LastActivityDate": "2011-09-09T05:01:11.707"}});