post_cb({"34994058": {"Id": "34994058", "PostTypeId": "2", "Body": "<p>I would say CLang is correct here - even if I would <strong>never</strong> use this.</p>\n<p>C++ 14 draft N4296 says in <em>7.1 Specifiers [dcl.spec] 3</em></p>\n<blockquote>\n<p id=\"so_34450095_34994058_0\">If a type-name is encountered while parsing a decl-specifier-seq, it is interpreted as part of the decl-specifier-\n  seq if and only if there is no previous type-specifier other than a cv-qualifier in the decl-specifier-seq. The\n  sequence shall be self-consistent as described below. [ Example:</p>\n<blockquote>\n<p id=\"so_34450095_34994058_6\"><strong>typedef char* Pc;</strong>\n<br>static Pc;     // error: name missing</br></p>\n</blockquote>\n<p id=\"so_34450095_34994058_2\">Here, the declaration static Pc is ill-formed because no name was specified for the static variable of type Pc.</p>\n<p id=\"so_34450095_34994058_3\">To get a variable called Pc, a type-specifier (other than const or volatile) has to be present to indicate that\n  the typedef-name Pc is the name being (re)declared, rather than being part of the decl-specifier sequence.</p>\n<p id=\"so_34450095_34994058_4\">For another example,</p>\n<blockquote>\n<p id=\"so_34450095_34994058_7\">void f(const Pc); // void f(char* const) (not const char*)\n    <br>\n<strong>void g(const int Pc); // void g(const int)</strong></br></p>\n</blockquote>\n</blockquote>\n<p>(emphasize mine)</p>\n<p>Even if an example is not normative, it let think that for the writers of C++ specification, a variable can redeclare the name of a typedef.</p>\n<p>But g++ is simply more conservative what looks more <em>reasonable</em>. If I ever see such a construct in production code, the programmer would soon learn not to do it again, even I the compiler accepted it...</p>\n", "LastActivityDate": "2016-01-25T13:39:43.590", "CommentCount": "2", "CreationDate": "2016-01-25T13:39:43.590", "ParentId": "34450095", "Score": "0", "OwnerUserId": "3545273"}, "bq_ids": {"n4140": {"so_34450095_34994058_3": {"length": 20, "quality": 1.0, "section_id": 5389}, "so_34450095_34994058_0": {"length": 18, "quality": 0.8181818181818182, "section_id": 5389}, "so_34450095_34994058_2": {"length": 11, "quality": 1.0, "section_id": 5389}}, "n3337": {"so_34450095_34994058_3": {"length": 20, "quality": 1.0, "section_id": 5183}, "so_34450095_34994058_0": {"length": 18, "quality": 0.8181818181818182, "section_id": 5183}, "so_34450095_34994058_2": {"length": 11, "quality": 1.0, "section_id": 5183}}, "n4659": {"so_34450095_34994058_3": {"length": 20, "quality": 1.0, "section_id": 6815}, "so_34450095_34994058_0": {"length": 17, "quality": 0.7727272727272727, "section_id": 6815}, "so_34450095_34994058_2": {"length": 11, "quality": 1.0, "section_id": 6815}}}, "34993087": {"Id": "34993087", "PostTypeId": "2", "Body": "<p>The code is wrong. <code>typedef</code> is a new name for a existing type. So you can not create a variable with a type's name like <code>foo foo;</code> is equal to <code>int int</code>.</p>\n<p><code>g++ -std=c++14</code> is the correct one. </p>\n<p><a href=\"https://stackoverflow.com/questions/13374497/can-i-name-a-variable-with-the-same-name-as-a-typedefd-structure-name\">Also refer this question</a></p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2016-01-25T12:50:46.777", "Score": "6", "CreationDate": "2016-01-25T12:50:46.777", "ParentId": "34450095", "CommentCount": "0", "OwnerUserId": "5837095", "LastEditDate": "2017-05-23T10:30:18.597"}, "34450095": {"ViewCount": "771", "Body": "<p>In this code:</p>\n<pre><code>typedef int foo;\n\nstruct S\n{\n  foo foo;\n};\n\nint main() {}\n</code></pre>\n<p>all versions of <code>clang -std=c++14</code> accept this code, however all versions of <code>g++ -std=c++14</code> report:</p>\n<pre><code>5 : error: declaration of 'foo S::foo' [-fpermissive]\nfoo foo;\n^\n1 : error: changes meaning of 'foo' from 'typedef int foo' [-fpermissive]\n</code></pre>\n<p>Is the code correct?</p>\n", "Title": "Variable with same name as type - which compiler is right?", "CreationDate": "2015-12-24T09:05:56.690", "LastActivityDate": "2016-01-25T13:39:43.590", "CommentCount": "5", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2016-01-25T12:58:42.180", "LastEditorUserId": "3545273", "Id": "34450095", "Score": "12", "OwnerUserId": "1505939", "Tags": "<c++><compiler-errors><clang><language-lawyer><variable-names>", "AnswerCount": "2"}});