post_cb({"28669262": {"CommentCount": "1", "ViewCount": "375", "PostTypeId": "1", "LastEditorUserId": "1374704", "CreationDate": "2015-02-23T08:06:31.687", "LastActivityDate": "2015-02-23T10:00:53.557", "LastEditDate": "2015-02-23T08:31:42.490", "AcceptedAnswerId": "28669550", "OwnerDisplayName": "user2953119", "Title": "What does template's implicit specialization mean?", "Id": "28669262", "Score": "1", "Body": "<p>In the chapter <code>N3797::14/4 [temp]</code> (emphasis mine)</p>\n<blockquote>\n<p id=\"so_28669262_28669262_0\">A template name has linkage (3.5). A non-member function template can\n  have internal linkage; any other template name shall have external\n  linkage. Specializations (explicit or <em>implicit</em>) of a template that\n  has internal linkage are distinct from all specializations in other\n  translation units.</p>\n</blockquote>\n<p>was mentioned about implicit specialization. As far as I understand from the context, that concept is different from the template explicit specialization which has </p>\n<p><code>template &lt; &gt;</code> <em>declaration</em></p>\n<p>grammar. So, I'm guessing that implicit specialization has something to do with a partial class template specialization. Unfortunately, I couldn't normative reference defining the implicit specialization concept in the current working draft.</p>\n", "Tags": "<c++><templates>", "AnswerCount": "2"}, "28669550": {"ParentId": "28669262", "CommentCount": "3", "Body": "<p>There is no normative term called \"implicit specialization\".<br>\nHowever, I believe that in this context, it means the complement of \"explicit specialization\": Every specialization that was not explicitly specialized by the user, in other (normative) words, <strong>instantiated specializations</strong>.<br>\nConsider that there are</br></br></p>\n<ul>\n<li>Explicit specializations</li>\n<li>Implicit instantiations</li>\n<li>Explicit instantiations</li>\n</ul>\n<p>Specializations instantiated through the latter two one could refer to as \"implicit specializations\".</p>\n", "OwnerUserId": "3647361", "PostTypeId": "2", "Id": "28669550", "Score": "2", "CreationDate": "2015-02-23T08:29:33.940", "LastActivityDate": "2015-02-23T08:29:33.940"}, "bq_ids": {"n4140": {"so_28669262_28669262_0": {"section_id": 51, "quality": 1.0, "length": 28}, "so_28669262_28669321_2": {"section_id": 150, "quality": 0.96, "length": 24}, "so_28669262_28669321_1": {"section_id": 150, "quality": 1.0, "length": 20}, "so_28669262_28669321_4": {"section_id": 150, "quality": 0.8, "length": 16}, "so_28669262_28669321_0": {"section_id": 150, "quality": 0.9428571428571428, "length": 33}}, "n3337": {"so_28669262_28669321_4": {"section_id": 144, "quality": 0.8, "length": 16}, "so_28669262_28669321_2": {"section_id": 144, "quality": 0.96, "length": 24}, "so_28669262_28669321_1": {"section_id": 144, "quality": 1.0, "length": 20}, "so_28669262_28669262_0": {"section_id": 46, "quality": 1.0, "length": 28}, "so_28669262_28669321_0": {"section_id": 144, "quality": 0.9428571428571428, "length": 33}}, "n4659": {"so_28669262_28669262_0": {"section_id": 52, "quality": 0.5357142857142857, "length": 15}, "so_28669262_28669321_2": {"section_id": 154, "quality": 0.96, "length": 24}, "so_28669262_28669321_1": {"section_id": 154, "quality": 1.0, "length": 20}, "so_28669262_28669321_4": {"section_id": 154, "quality": 0.8, "length": 16}, "so_28669262_28669321_0": {"section_id": 154, "quality": 0.9428571428571428, "length": 33}}}, "28669321": {"ParentId": "28669262", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>The term isn't used much in the Standard, but we can deduce what it means from \u00a714.5.5.3 - reproduced below - which I've broken into paragraphs (A), (B) and (C) for ease of reference (boldfacing mine):</p>\n<blockquote>\n<p id=\"so_28669262_28669321_0\">(A) If a member template of a class template is partially specialized, the member template partial specializations are member templates of the enclosing class template; if the enclosing class template is instantiated (14.7.1, 14.7.2), a declaration for every member template partial specialization is also instantiated as part of creating the members of the class template specialization.</p>\n<p id=\"so_28669262_28669321_1\">(B) If the primary member template is explicitly specialized for a given <strong>(implicit) specialization</strong> of the enclosing class template, the partial specializations of the member template are ignored for this specialization of the enclosing class template.</p>\n<p id=\"so_28669262_28669321_2\">(C) If a partial specialization of the member template is explicitly specialized for a given <strong>(implicit) specialization</strong> of the enclosing class template, the primary member template and its other partial specializations are still considered for this specialization of the enclosing class template. [ Example:</p>\n</blockquote>\n<pre><code>template&lt;class T&gt; struct A {\n    template&lt;class T2&gt; struct B {}; // #1\n    template&lt;class T2&gt; struct B&lt;T2*&gt; {}; // #2\n};\ntemplate&lt;&gt; template&lt;class T2&gt; struct A&lt;short&gt;::B {}; // #3\n\nA&lt;char&gt;::B&lt;int*&gt; abcip; // uses #2\nA&lt;short&gt;::B&lt;int*&gt; absip; // uses #3\nA&lt;char&gt;::B&lt;int&gt; abci; // uses #1\n</code></pre>\n<blockquote>\n<p id=\"so_28669262_28669321_3\">-- end example]</p>\n</blockquote>\n<p>Repeating (B) with my cross-references to the example in parentheses:</p>\n<blockquote>\n<p id=\"so_28669262_28669321_4\"><em>\"if the primary member template</em> (i.e. #1) <em>is explicitly specialised (as at #3) for a given (implicit) specialisation of the enclosing class template</em> (<code>A</code>)<em>, the partial specialisations of the member template</em> (#2) <em>are ignored for this specialisation of the enclosing class template</em>\".</p>\n</blockquote>\n<p>We see the specialisation  at #3 results in the ignoring of #2 for <code>absip;</code>.  We can therefore conclude that the following line...</p>\n<pre><code>template&lt;&gt; template&lt;class T2&gt; struct A&lt;short&gt;::B {}; // #3\n</code></pre>\n<p>...performs an implicit specialisation of the enclosing class template, namely <code>A&lt;short&gt;</code>.</p>\n<p>So, <strong><em>implicit specialisation</em></strong> is when specialisation of a member function implicitly involves specialisation of the class template that it's a member of.  Put another way, the class template <code>A</code> didn't require a separate earlier specialisation for <code>short</code> before the member template at #1 was specialised, because it could be specialised implicitly.</p>\n", "OwnerUserId": "410767", "LastEditorUserId": "410767", "LastEditDate": "2015-02-23T10:00:53.557", "Id": "28669321", "Score": "0", "CreationDate": "2015-02-23T08:10:26.217", "LastActivityDate": "2015-02-23T10:00:53.557"}});