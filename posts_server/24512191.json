post_cb({"24512804": {"ParentId": "24512191", "PostTypeId": "2", "CommentCount": "6", "Body": "<p>This answer assumes that you know what  <em>static storage duration</em> means.</p>\n<p>In C++03 this is specified as (3.6.2):</p>\n<blockquote>\n<p id=\"so_24512191_24512804_0\">Objects with static storage duration (3.7.1) shall be zero-initialized\n  (8.5) before any other initialization takes place. Zero-initialization\n  and initialization with a constant expression are collectively called\n  static initialization; all other initialization is dynamic\n  initialization.</p>\n</blockquote>\n<p>In practice, a program has different memory segments where it stores variables with static storage duration: </p>\n<ul>\n<li>One segment is usually called <code>.bss</code>, where all static storage variables that are initialized to zero are stored. </li>\n<li>Another segment is usually called <code>.data</code>, where all static storage variables that are explicitly initialized to a value are stored. </li>\n<li>And further, there is a segment called <code>.rodata</code> where all <code>const</code> variables are stored.</li>\n</ul>\n<p>(The reason why these are two different segments is mainly program startup performance, you can read more about that <a href=\"https://stackoverflow.com/questions/9535250/why-is-the-bss-segment-required\">here</a>.)</p>\n<p>Zero initialization applies to all variables stored in <code>.bss</code> and constant initialization applies to all variables stored in <code>.data</code>. (And perhaps constant initialization applies to <code>.rodata</code> as well, depending on whether your system is RAM-based or if it has true ROM).</p>\n<p>Collectively, all of this is called static initialization, since it applies to objects with static storage duration.</p>\n", "OwnerUserId": "584518", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T10:32:22.493", "Id": "24512804", "Score": "1", "CreationDate": "2014-07-01T14:29:18.443", "LastActivityDate": "2014-07-01T14:29:18.443"}, "24512949": {"ParentId": "24512191", "CommentCount": "0", "Body": "<p>It's just vocabulary.  There are clearly three phases of\ninitialization (for variables with static lifetime): zero\ninitialization, initialization using constant expressions, and\ndynamic initialization.  I find it convenient when talking about\nthis to use the term <em>static initialization</em> for the second step\n(because it does take place statically, without the execution of\nany user written code), even if the standard uses a somewhat\ndifferent terminology.  In the end, it comes down to the same\nthing: </p>\n<pre><code>int a;\nint b = 42;\nint c = someFunction();\n</code></pre>\n<p>Formally, all three variables will be zero-initialized.  Then\n<code>b</code> will be initialized with the constant expression <code>42</code>; in\nall likelyhood, it will never actually be zero-initialized,\nbecause there's no way your code can ever see it before the\nconstant initialization.  Finally, <code>c</code> will be initialized by\ncalling <code>someFunction()</code>.</p>\n<p>This order is true regardless of the order of the definitions,\nand is guaranteed by the standard.</p>\n", "OwnerUserId": "649665", "PostTypeId": "2", "Id": "24512949", "Score": "0", "CreationDate": "2014-07-01T14:35:31.700", "LastActivityDate": "2014-07-01T14:35:31.700"}, "24512191": {"CommentCount": "7", "ViewCount": "168", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2014-07-01T14:00:32.100", "LastActivityDate": "2014-07-01T14:47:38.093", "Title": "Why zero-initialization is not a static Initialization", "FavoriteCount": "0", "LastEditDate": "2017-05-23T11:55:17.967", "Id": "24512191", "Score": "3", "Body": "<p>In <a href=\"https://stackoverflow.com/questions/24507913/static-reinitialization\">this</a> topic they said that zero initialization is not static initialization.</p>\n<p>Can anyone explain why?</p>\n<p>3.6.2/2 said:</p>\n<blockquote>\n<p id=\"so_24512191_24512191_0\">Together, zero-initialization and constant initialization are called\n  static initialization;</p>\n</blockquote>\n<p>It is definition of Static initialization, means that zero-initialization is static initialization and constant-initialization is static Initialization</p>\n", "Tags": "<c++><initialization>", "OwnerUserId": "2786156", "AnswerCount": "4"}, "24512866": {"ParentId": "24512191", "CommentCount": "0", "Body": "<p>The post you link to says that <em>zero-initialization is not static initialization</em>. This is correct.</p>\n<p>That is <em>very</em> different from <em>zero-initialization is not <strong>a</strong> static initialization</em>! This is not correct.</p>\n", "OwnerUserId": "560648", "PostTypeId": "2", "Id": "24512866", "Score": "-2", "CreationDate": "2014-07-01T14:31:45.033", "LastActivityDate": "2014-07-01T14:31:45.033"}, "24512301": {"ParentId": "24512191", "CommentCount": "2", "Body": "<p>You forgot to notify the word \"Together\", very important in this sentence.</p>\n<p>Zero-initialization + constant initialization = static initialization. Is that clearer ?</p>\n", "OwnerUserId": "3636959", "PostTypeId": "2", "Id": "24512301", "Score": "0", "CreationDate": "2014-07-01T14:05:25.057", "LastActivityDate": "2014-07-01T14:05:25.057"}, "bq_ids": {"n4140": {"so_24512191_24512191_0": {"section_id": 7151, "quality": 1.0, "length": 7}, "so_24512191_24512804_0": {"section_id": 7151, "quality": 0.7916666666666666, "length": 19}}, "n3337": {"so_24512191_24512191_0": {"section_id": 6895, "quality": 1.0, "length": 7}, "so_24512191_24512804_0": {"section_id": 6895, "quality": 0.7916666666666666, "length": 19}}, "n4659": {"so_24512191_24512191_0": {"section_id": 8652, "quality": 1.0, "length": 7}}}});