post_cb({"12162893": {"ViewCount": "330", "Body": "<p>My question: When a structure has c-tor, why can't I statically initialize it ?</p>\n<p>My compiler claims :</p>\n<pre><code>type `myStruct' must be initialized by constructor, not by `{...}'\n</code></pre>\n<p>Why is that ? I'm using gcc version 3.4.4 (cygming special, gdc 0.12, using dmd 0.125)</p>\n<p>To illustrate, here is the <code>struct</code> that is rejected by the compiler.</p>\n<pre><code>struct myStruct\n{\n    int a;\n    double b;\n\n    myStruct() { a= 0; b = 0.0; }\n}\n\nvoid main()\n{\n    myStruct ms = {7, 7.7}; // Now this compiler does not accept.\n} \n</code></pre>\n", "AcceptedAnswerId": "12162938", "Title": "when a structure has c-tor, why can't I statically initialize it?", "CreationDate": "2012-08-28T15:45:31.380", "Id": "12162893", "CommentCount": "8", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2012-08-28T15:54:55.567", "LastEditorUserId": "131407", "LastActivityDate": "2012-08-28T16:21:06.160", "Score": "3", "OwnerUserId": "1630736", "Tags": "<c++><static><constructor><initialization><structure>", "AnswerCount": "4"}, "12163119": {"Id": "12163119", "PostTypeId": "2", "Body": "<p>Only aggregates may be initialized with an initializer list.  Per 8.5.1:1, the inclusion of a user-provided constructor prevents a struct or class from being an aggregate:</p>\n<blockquote>\n<p id=\"so_12162893_12163119_0\"><a class=\"post-tag\" href=\"/questions/tagged/c%2b%2b11\" rel=\"tag\" title=\"show questions tagged 'c++11'\">c++11</a></p>\n<h3>8.5.1 Aggregates [dcl.init.aggr]</h3>\n<p id=\"so_12162893_12163119_1\">1 - An aggregate is an array or a class (Clause 9) with no user-provided constructors [...]</p>\n</blockquote>\n<p>In C++03,</p>\n<blockquote>\n<p id=\"so_12162893_12163119_2\"><a class=\"post-tag\" href=\"/questions/tagged/c%2b%2b03\" rel=\"tag\" title=\"show questions tagged 'c++03'\">c++03</a></p>\n<h3>8.5.1 - Aggregates [dcl.init.aggr]</h3>\n<p id=\"so_12162893_12163119_3\">1 - An aggregate is an array or a class (clause class) with no user-declared constructors [...]</p>\n</blockquote>\n<p>Aggregates are distinct from PODs (<a class=\"post-tag\" href=\"/questions/tagged/c%2b%2b11\" rel=\"tag\" title=\"show questions tagged 'c++11'\">c++11</a> 9:10); not all aggregates are POD and not all PODs are aggregates; a class with a user-provided destructor could be an aggregate but not a POD, while a class with a non-copy non-default constructor could be POD but not an aggregate.</p>\n<p>Demonstration:</p>\n<pre><code>#include &lt;type_traits&gt;\n#include &lt;iostream&gt;\n\nstruct non_pod_aggregate { int i, j; ~non_pod_aggregate() {} };\nstruct non_aggregate_pod { int i, j; non_aggregate_pod(int) {}\n    non_aggregate_pod() = default; };\n\nint main() {\n    std::cout &lt;&lt; std::is_pod&lt;non_pod_aggregate&gt;::value &lt;&lt; '\\n'; // false\n    std::cout &lt;&lt; std::is_pod&lt;non_aggregate_pod&gt;::value &lt;&lt; '\\n'; // true\n    non_pod_aggregate{0, 0};\n    // non_aggregate_pod{0, 0}; // does not compile\n}\n</code></pre>\n<p>In C++03, all PODs (<a class=\"post-tag\" href=\"/questions/tagged/c%2b%2b03\" rel=\"tag\" title=\"show questions tagged 'c++03'\">c++03</a> 9:4) are aggregates, but it is still possible to have aggregates that are not PODs; as above, a user-provided destructor is enough to disqualify a struct from being POD.</p>\n", "LastEditorUserId": "567292", "LastActivityDate": "2012-08-28T16:17:54.667", "Score": "3", "CreationDate": "2012-08-28T15:57:37.873", "ParentId": "12162893", "CommentCount": "3", "OwnerUserId": "567292", "LastEditDate": "2012-08-28T16:17:54.667"}, "12162994": {"Id": "12162994", "PostTypeId": "2", "Body": "<p>Because the language specifies it that way...</p>\n<p>The reason is that the constructor is the designated way to initialize the object to a valid state, so just dumping values into fields directly makes no sense.The ideas is that you either have a collection of values, or a self contained object but what you want to do would make it a little of both.</p>\n", "LastActivityDate": "2012-08-28T15:50:38.497", "CommentCount": "0", "CreationDate": "2012-08-28T15:50:38.497", "ParentId": "12162893", "Score": "4", "OwnerUserId": "417292"}, "12162960": {"Id": "12162960", "PostTypeId": "2", "Body": "<p>In C++03 list-initialization only works for aggregates. You need to change your code to call the constructor:</p>\n<pre><code>myStruct ms;\n</code></pre>\n<p>If you want to be able to specify values for all of the members, you need to add a constructor taking enough arguments:</p>\n<pre><code>struct myStruct\n{\n    int a;\n    double b;\n\n    myStruct() : a(), b() { }\n    myStruct(int a, double b) : a(a), b(b) { }\n};\n\nvoid main()\n{\n    myStruct ms(7, 7.7);\n} \n</code></pre>\n", "LastEditorUserId": "485561", "LastActivityDate": "2012-08-28T15:54:54.053", "Score": "1", "CreationDate": "2012-08-28T15:48:38.703", "ParentId": "12162893", "CommentCount": "0", "OwnerUserId": "485561", "LastEditDate": "2012-08-28T15:54:54.053"}, "bq_ids": {"n4140": {"so_12162893_12163119_3": {"length": 4, "quality": 0.5714285714285714, "section_id": 369}, "so_12162893_12163119_1": {"length": 6, "quality": 1.0, "section_id": 3298}}, "n3337": {"so_12162893_12163119_3": {"length": 4, "quality": 0.5714285714285714, "section_id": 359}, "so_12162893_12163119_1": {"length": 6, "quality": 1.0, "section_id": 3168}}, "n4659": {"so_12162893_12163119_3": {"length": 4, "quality": 0.5714285714285714, "section_id": 4076}, "so_12162893_12163119_1": {"length": 5, "quality": 0.8333333333333334, "section_id": 4063}}}, "12162938": {"Id": "12162938", "PostTypeId": "2", "Body": "<p>The inclusion of a user-defined c-tor means it's no longer an aggregate type.  This would also be the case if there was no user-defined c-tor for the <code>struct</code> itself, but you have a non-static data-member of the <code>struct</code> that is not a POD or aggregate type.</p>\n", "LastEditorUserId": "649233", "LastActivityDate": "2012-08-28T16:21:06.160", "Score": "7", "CreationDate": "2012-08-28T15:47:37.470", "ParentId": "12162893", "CommentCount": "12", "OwnerUserId": "649233", "LastEditDate": "2012-08-28T16:21:06.160"}});