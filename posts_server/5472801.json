post_cb({"5499274": {"Id": "5499274", "PostTypeId": "2", "Body": "<p>Found it finally! @Mike Seymour was right in his comment - it turns out that in a file nr3.h (part of <a href=\"http://www.nr.com/\" rel=\"nofollow\">Numerical Recepies</a> code) there is a macro <code>throw(message)</code> defined. </p>\n<p>What I don't understand is why it impacts compilation of files that don't include this .h file...</p>\n<p>Anyway, I think Visual Studio had a different compilation order or something, so it was pure luck that it compiled there and not under gcc.</p>\n", "LastActivityDate": "2011-03-31T11:43:43.867", "CommentCount": "0", "CreationDate": "2011-03-31T11:43:43.867", "ParentId": "5472801", "Score": "0", "OwnerUserId": "5363"}, "5472801": {"ViewCount": "2786", "Body": "<p>I am trying to define a really simple exception class. Because it is so simple I want to keep it in the .h file only, but the compiler doesn't like <code>throw()</code>. The code:</p>\n<pre><code>#include &lt;exception&gt;\n#include &lt;string&gt;\n\nclass PricingException : public virtual std::exception\n{\nprivate:\n    std::string msg;\npublic:\n        PricingException(std::string message) : msg(message) {}\n        const char* what() const throw() { return msg.c_str(); }\n        ~PricingException() throw() {}\n};\n</code></pre>\n<p>GCC gives the following errors:</p>\n<pre><code>/home/ga/dev/CppGroup/MonteCarlo/PricingException.h:13: error: expected unqualified-id before \u2018{\u2019 token\n/home/ga/dev/CppGroup/MonteCarlo/PricingException.h:14: error: expected unqualified-id before \u2018{\u2019 token\n</code></pre>\n<p>for lines with <code>throw()</code>. Any idea how to fix it?</p>\n<p><strong>EDIT</strong></p>\n<p>I tried to remove the bodies of the problematic methods, i.e.</p>\n<pre><code>virtual ~PricingException() throw();// {}\n</code></pre>\n<p>And now I get even more weird error message:</p>\n<pre><code>/home/ga/dev/CppGroup/MonteCarlo/PricingException.h:14: error: looser throw specifier for \u2018virtual PricingException::~PricingException()\u2019\n/usr/include/c++/4.5/exception:65: error:   overriding \u2018virtual std::exception::~exception() throw ()\u2019\n</code></pre>\n<p>It just ignored my throw specifier!</p>\n", "AcceptedAnswerId": "5499274", "Title": "Inline throw() method in C++", "CreationDate": "2011-03-29T12:52:46.507", "Id": "5472801", "CommentCount": "13", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2011-03-29T13:44:05.830", "LastEditorUserId": "5363", "LastActivityDate": "2011-03-31T11:43:43.867", "Score": "6", "OwnerUserId": "5363", "Tags": "<c++><gcc><throw>", "AnswerCount": "5"}, "5473209": {"Id": "5473209", "PostTypeId": "2", "Body": "<p>The closest I have found in the C++0x is:</p>\n<p><strong>15.4 Exception specifications [except.spec]</strong></p>\n<blockquote>\n<p id=\"so_5472801_5473209_0\">2  An exception-specification shall appear only on a function declarator for a function type, pointer to function type, reference to function type, or pointer to member function type that is the top-level type of a declaration or definition, or on such a type appearing as a parameter or return type in a function declarator.</p>\n</blockquote>\n<p>It looks to me like it could disallow the use of exception specifications on definitions.</p>\n", "LastActivityDate": "2011-03-29T13:23:10.730", "CommentCount": "7", "CreationDate": "2011-03-29T13:23:10.730", "ParentId": "5472801", "Score": "3", "OwnerUserId": "147192"}, "bq_ids": {"n4140": {"so_5472801_5473209_0": {"length": 28, "quality": 1.0, "section_id": 3364}, "so_5472801_5474713_1": {"length": 21, "quality": 1.0, "section_id": 3367}, "so_5472801_5474713_2": {"length": 27, "quality": 0.9642857142857143, "section_id": 3374}}, "n3337": {"so_5472801_5473209_0": {"length": 28, "quality": 1.0, "section_id": 3234}, "so_5472801_5474713_1": {"length": 21, "quality": 1.0, "section_id": 3237}, "so_5472801_5474713_2": {"length": 27, "quality": 0.9642857142857143, "section_id": 3244}}, "n4659": {"so_5472801_5473209_0": {"length": 16, "quality": 0.5714285714285714, "section_id": 8605}, "so_5472801_5474713_1": {"length": 13, "quality": 0.6190476190476191, "section_id": 4132}}}, "5474090": {"Id": "5474090", "PostTypeId": "2", "Body": "<p>I wasn't able to reproduce this in several versions of g++. The most likely problem is that a previously included header file has a problem that's finally causing the compiler trouble when it sees the <code>throw</code> but not before.</p>\n", "LastActivityDate": "2011-03-29T14:24:46.583", "CommentCount": "0", "CreationDate": "2011-03-29T14:24:46.583", "ParentId": "5472801", "Score": "1", "OwnerUserId": "251738"}, "5474713": {"Id": "5474713", "PostTypeId": "2", "Body": "<p>Try the C++0x syntax instead, g++ 4.5 may be recent enough to support it:</p>\n<pre><code>const char* what() const noexcept { return msg.c_str(); }\n</code></pre>\n<p>However, this shouldn't matter (wording from draft 3242, section <code>[except.spec]</code>:</p>\n<blockquote>\n<p id=\"so_5472801_5474713_0\">Two <em>exception-specifications</em> are <em>compatible</em> if:</p>\n<ul>\n<li>both are non-throwing (see below), regardless of their form,</li>\n<li>both have the form <code>noexcept(</code><em>constant-expression</em><code>)</code> and the <em>constant-expressions</em> are equivalent,</li>\n<li>one <em>exception-specification</em> is a <em>noexcept-specification</em> allowing all exceptions and the other is of the form <code>throw(</code><em>type-id-list</em><code>)</code>, or</li>\n<li>both are <em>dynamic-exception-specifications</em> that have the same set of adjusted types.</li>\n</ul>\n</blockquote>\n<p>.</p>\n<blockquote>\n<p id=\"so_5472801_5474713_1\">If a virtual function has an <em>exception-specification</em>, all declarations, including the definition, of any function that overrides that virtual function in any derived class shall only allow exceptions that are allowed by the <em>exception-specification</em> of the base class virtual function.</p>\n</blockquote>\n<p>.</p>\n<blockquote>\n<p id=\"so_5472801_5474713_2\">A function with no <em>exception-specification</em> or with an <em>exception-specification</em> of the form <code>noexcept(</code><em>constant-expression</em><code>)</code> where the <em>constant-expression</em> yields false allows all exceptions. An <em>exception-specification</em> is\n  <em>non-throwing</em> if it is of the form <code>throw()</code>, <code>noexcept</code>, or <code>noexcept(</code><em>constant-expression</em><code>)</code> where the <em>constant-expression</em> yields <code>true</code>. A function with a non-throwing <em>exception-specification</em> does not allow any exceptions.</p>\n</blockquote>\n<p>So try a newer build of g++, where these changes may be more completely implemented.</p>\n", "LastEditorUserId": "103167", "LastActivityDate": "2011-03-29T15:39:47.013", "Score": "4", "CreationDate": "2011-03-29T15:05:23.927", "ParentId": "5472801", "CommentCount": "1", "OwnerUserId": "103167", "LastEditDate": "2011-03-29T15:39:47.013"}, "5473604": {"Id": "5473604", "PostTypeId": "2", "Body": "<p>Have you tried <code>throw</code> with out the ()? in this example (i know its in the .cpp file) but you see that the throws all do not have a parenthesis</p>\n<p><a href=\"http://www.glenmccl.com/eh_cmp.htm\" rel=\"nofollow\">http://www.glenmccl.com/eh_cmp.htm</a></p>\n", "LastActivityDate": "2011-03-29T13:49:15.003", "CommentCount": "2", "CreationDate": "2011-03-29T13:49:15.003", "ParentId": "5472801", "Score": "0", "OwnerUserId": "340537"}});