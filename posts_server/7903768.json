post_cb({"7905195": {"ParentId": "7903768", "CommentCount": "7", "Body": "<p>clang gives:</p>\n<pre><code>test.cpp:1:25: error: exception specifications are not allowed in typedefs\ntypedef void (*fptr)()  noexcept;\n                        ^\n1 error generated.\n</code></pre>\n<p>This is backed up in the C++11 standard in 15.4 [except.spec]/p2:</p>\n<blockquote>\n<p id=\"so_7903768_7905195_0\">... An <em>exception-specification</em> shall not appear in a typedef declaration\n  or <em>alias-declaration</em>.</p>\n</blockquote>\n", "OwnerUserId": "576911", "PostTypeId": "2", "Id": "7905195", "Score": "8", "CreationDate": "2011-10-26T15:43:15.140", "LastActivityDate": "2011-10-26T15:43:15.140"}, "7903768": {"CommentCount": "0", "ViewCount": "1132", "CreationDate": "2011-10-26T14:03:04.247", "LastActivityDate": "2011-10-26T15:43:15.140", "Title": "noexcept specifiers in function typedefs", "AcceptedAnswerId": "7905195", "PostTypeId": "1", "Id": "7903768", "Score": "15", "Body": "<p>Are noexcept specifiers accepted in function typedefs?</p>\n<p>as in:</p>\n<pre><code> typedef void (*fptr)()  noexcept;\n</code></pre>\n<p>Intuitively, noexcept specifiers seem to make sense since they would allow some optimisations at the caller's side.</p>\n<p>I got a mixed answer from gcc 4.6.1. </p>\n<pre><code> typedef void (*fptr)()  noexcept;\n</code></pre>\n<p>results in:\n    error: \u2018fptr\u2019 declared with an exception specification</p>\n<p>but:</p>\n<pre><code>template&lt;void (*FPtr)()  noexcept&gt;\nstruct A{};\n</code></pre>\n<p>compiles without warning.</p>\n", "Tags": "<c++><function-pointers><c++11><noexcept>", "OwnerUserId": "291417", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_7903768_7905195_0": {"section_id": 3364, "quality": 1.0, "length": 5}}, "n3337": {"so_7903768_7905195_0": {"section_id": 3234, "quality": 1.0, "length": 5}}, "n4659": {"so_7903768_7905195_0": {"section_id": 3998, "quality": 0.8, "length": 4}}}});