post_cb({"45914957": {"Id": "45914957", "PostTypeId": "2", "Body": "<p>Conversion of <code>T&amp;</code> to <code>T</code> in expressions is a fundamental aspect of C++. It's one of the first things that happens during expression evaluation.\nSee <a href=\"http://eel.is/c++draft/expr#5\" rel=\"nofollow noreferrer\">[expr]/5</a>:</p>\n<blockquote>\n<p id=\"so_45913725_45914957_0\">If an expression initially has the type \u201creference to <code>T</code>\u201d ([dcl.ref],\n  [dcl.init.ref]), the type is adjusted to <code>T</code> prior to any further\n  analysis. The expression designates the object or function denoted by\n  the reference, and the expression is an lvalue or an xvalue, depending\n  on the expression.</p>\n</blockquote>\n<p>Since the result of <code>map[\"new entry\"]</code> is <code>Animal*&amp;</code> (and the assignment expression returns an <a href=\"http://eel.is/c++draft/expr.ass#1\" rel=\"nofollow noreferrer\">lvalue referring to the left operand</a>), the <code>&amp;</code> in the <code>return</code> expression disappears, leaving an <em>lvalue</em> <code>Animal*</code>. After that, since the expected return type of <code>createNewMapEntry()</code> is <code>Animal*</code>, an lvalue-to-rvalue conversion takes place and a <em>copy</em> of the pointer is returned.</p>\n<p>Note - the return type is always <code>Animal*</code> as declared, you never \"<em>return a reference</em>\" in this example. In both cases <em>a pointer</em> is returned.</p>\n", "LastEditorUserId": "485343", "LastActivityDate": "2017-08-28T09:06:22.590", "Score": "0", "CreationDate": "2017-08-28T08:40:24.267", "ParentId": "45913725", "CommentCount": "4", "OwnerUserId": "485343", "LastEditDate": "2017-08-28T09:06:22.590"}, "45913725": {"ViewCount": "71", "Body": "<p>I have a feeling that the two examples in the following are equivalent, that is, returning a reference to a pointer and returning a pointer are the same thing. It sounds strange to say this, that a reference to pointer and pointer are the same thing, but I think it is the case in this example:</p>\n<pre><code>#include &lt;unordered_map&gt;\n\nstruct Animal{};\n\nstd::unordered_map&lt;std::string, Animal*&gt; map;\n\nAnimal* createNewMapEntry()\n{\n    return map[\"new entry\"] = new Animal; // map subscript operator will return a reference to the mapped type\n                                        // in this case the mapped type is a pointer to Animal\n    // Is this the equivalent of doing:\n    auto p = new Animal;\n    map[\"new entry\"] = p;\n    return p;\n    // In this case I am returning a pointer to Animal, not a reference to the pointer to animal.\n    // That's why I was afraid that in the first example, which returns a \"reference\" to the Animal pointer\n    // that it was returning the \"address\" of the pointer instead of the pointer, equivalent to returning \n    // a pointer to pointer, which is just like the address to a pointer.\n}\n</code></pre>\n<p>If this is true, I think this is a really confusing part of the language, at least for me.</p>\n", "Title": "Returning a reference to a pointer from a function same as returning a pointer?", "CreationDate": "2017-08-28T07:22:33.327", "LastActivityDate": "2017-08-28T09:06:22.590", "CommentCount": "9", "LastEditDate": "2017-08-28T07:31:45.007", "PostTypeId": "1", "LastEditorUserId": "4696802", "Id": "45913725", "Score": "0", "OwnerUserId": "4696802", "Tags": "<c++><pointers><dictionary><reference>", "AnswerCount": "3"}, "45913804": {"Id": "45913804", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_45913725_45913804_0\">I have a feeling that the two examples in the following are equivalent.</p>\n</blockquote>\n<p><em>No</em>, they are not.</p>\n<p>The first inserts to the map, with key \"new entry\" and value an <code>Animal</code> object.</p>\n<p>The second one doesn't do this, since it just returns the pointer.</p>\n<hr>\n<p>As MM said: \"If a function returns by value and you return an lvalue, the lvalue is converted to prvalue , so the return statement just returns the pointer\".</p>\n</hr>", "LastEditorUserId": "2411320", "LastActivityDate": "2017-08-28T07:37:17.023", "Score": "1", "CreationDate": "2017-08-28T07:27:18.630", "ParentId": "45913725", "CommentCount": "4", "OwnerUserId": "2411320", "LastEditDate": "2017-08-28T07:37:17.023"}, "bq_ids": {"n4140": {"so_45913725_45914957_0": {"length": 20, "quality": 0.8695652173913043, "section_id": 5938}}, "n3337": {"so_45913725_45914957_0": {"length": 20, "quality": 0.8695652173913043, "section_id": 5710}}, "n4659": {"so_45913725_45914957_0": {"length": 20, "quality": 0.8695652173913043, "section_id": 7422}}}, "45913974": {"Id": "45913974", "PostTypeId": "2", "Body": "<p>The contents of the compound statement that is the function body have no effect on the return type of the function (unless the return type is <code>auto</code>).</p>\n<p>The return type is <code>Animal*</code>, which is not a reference type. The examples are semantically equivalent.</p>\n", "LastEditorUserId": "2079303", "LastActivityDate": "2017-08-28T07:45:30.650", "Score": "1", "CreationDate": "2017-08-28T07:38:22.720", "ParentId": "45913725", "CommentCount": "3", "OwnerUserId": "2079303", "LastEditDate": "2017-08-28T07:45:30.650"}});