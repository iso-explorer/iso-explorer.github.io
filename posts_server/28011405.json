post_cb({"28011588": {"ParentId": "28011405", "CommentCount": "3", "Body": "<p>C++ Standard section \u00a720.9.11.2.1 [func.wrap.func]</p>\n<blockquote>\n<p id=\"so_28011405_28011588_0\"><code>template&lt;class F&gt; function(F f);</code></p>\n<p id=\"so_28011405_28011588_1\"><code>template &lt;class F, class A&gt; function(allocator_arg_t, const A&amp; a, F\n  f);</code></p>\n<p id=\"so_28011405_28011588_2\">Requires: F shall be <strong>CopyConstructible</strong>. f shall be Callable for\n  argument types ArgTypes and return type R. The copy constructor and\n  destructor of A shall not throw exceptions.</p>\n</blockquote>\n<p>Your lambda function <code>boundFunctor</code> is a move only type (because it captures move only types, since <code>std::unique_ptr</code> cannot be copied)</p>\n<p>Hence, <code>boundFunctor</code> is not copyable and not suitable as an argument to an <code>std::function</code></p>\n", "OwnerUserId": "3510483", "PostTypeId": "2", "Id": "28011588", "Score": "2", "CreationDate": "2015-01-18T15:47:28.860", "LastActivityDate": "2015-01-18T15:47:28.860"}, "28011405": {"CommentCount": "3", "ViewCount": "408", "PostTypeId": "1", "LastEditorUserId": "4467156", "CreationDate": "2015-01-18T15:29:48.237", "LastActivityDate": "2015-01-18T16:56:16.613", "Title": "can't pass std::vector<std::unique_ptr<>> to std::thread", "FavoriteCount": "1", "LastEditDate": "2015-01-18T16:56:16.613", "Id": "28011405", "Score": "2", "Body": "<p>I created a <strong>threadpool</strong> which captures a function and arguments into tuples and then perfect forwards when the task is dequeued.</p>\n<p>However I am unable to pass a vector of unique_ptr's to the thread by rvalue. A simplified project is below:</p>\n<pre><code>#include &lt;future&gt;\n#include &lt;memory&gt;\n#include &lt;vector&gt;\n\ntemplate &lt;typename F, typename... Args&gt;\ntypename std::result_of&lt;F(Args...)&gt;::type pushTask(F&amp;&amp; f, Args&amp;&amp;... args)\n{\n    using result_type = typename std::result_of&lt;F(Args...)&gt;::type;\n\n    // create a functional object of the passed function with the signature std::function&lt;result_type(void)&gt; by creating a\n    // bound Functor lambda which will bind the arguments to the function call through perfect forwarding and lambda capture\n    auto boundFunctor = [func = std::move(std::forward&lt;F&gt;(f)),\n                         argsTuple = std::move(std::make_tuple(std::forward&lt;Args&gt;(args)...))](void) mutable-&gt;result_type\n    {\n        // forward function and turn variadic arguments into a tuple\n        return result_type();\n    };\n\n    // create a packaged task of the function object\n    std::packaged_task&lt;result_type(void)&gt; taskFunctor{ std::move(boundFunctor) };\n}\n\n int main(int argc, char *argv [])\n {\n     auto testvup = [](std::vector&lt;std::unique_ptr&lt;int&gt;&gt;&amp;&amp; vup)\n    {\n\n    };\n    std::vector&lt;std::unique_ptr&lt;int&gt;&gt; vup;\n    pushTask(testvup, std::move(vup));\n}\n</code></pre>\n<p>I get the following compiler error with VS2015 rather I use the std::function or std::packaged_task</p>\n<p>Severity    Description Project File    Line</p>\n<pre><code>Error   error C2280: 'std::unique_ptr&lt;int,std::default_delete&lt;_Ty&gt;&gt;::unique_ptr(const std::unique_ptr&lt;_Ty,std::default_delete&lt;_Ty&gt;&gt; &amp;)': attempting to reference a deleted function Stack   xmemory0    659\n</code></pre>\n<p>passing other arguments by rvalue including <code>std::vector</code> works.</p>\n<p>Has anyone else run across this or have suggestions.</p>\n", "Tags": "<multithreading><c++11><unique-ptr>", "OwnerUserId": "4467156", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_28011405_28011588_1": {"section_id": 4658, "quality": 1.0, "length": 5}}, "n3337": {"so_28011405_28011588_2": {"section_id": 4470, "quality": 0.8571428571428571, "length": 12}, "so_28011405_28011588_1": {"section_id": 4469, "quality": 1.0, "length": 5}}, "n4659": {"so_28011405_28011588_1": {"section_id": 853, "quality": 0.8, "length": 4}}}});