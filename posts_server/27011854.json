post_cb({"27011882": {"ParentId": "27011854", "CommentCount": "6", "CreationDate": "2014-11-19T08:11:38.370", "OwnerUserId": "2380830", "PostTypeId": "2", "Id": "27011882", "Score": "3", "Body": "<p>From C++ Standard, 6.6.3:</p>\n<blockquote>\n<p id=\"so_27011854_27011882_0\">Flowing off the end of a function is equivalent to a return with no\n  value; this results in undefined behaviour in a value-returning\n  function.</p>\n</blockquote>\n<p>So not having an explicit return value is <em>undefined behaviour</em>.</p>\n", "LastActivityDate": "2014-11-19T08:11:38.370"}, "27011854": {"CommentCount": "2", "ViewCount": "1362", "PostTypeId": "1", "ClosedDate": "2014-11-19T21:09:36.647", "LastEditorUserId": "1708801", "CreationDate": "2014-11-19T08:09:57.017", "LastActivityDate": "2014-11-19T15:38:45.740", "Title": "Why is 'control reaches end of non-void function' only a warning? Is it legal?", "AcceptedAnswerId": "27011982", "LastEditDate": "2014-11-19T13:37:05.470", "Id": "27011854", "Score": "4", "Body": "<p>Is it legal C++ to define a function with a non-void return type that allows control to reach the end of the function instead of reaching a <em>return</em> statement?</p>\n<p><code>gcc</code> and <code>clang</code> only issue warnings for this. Is code that does this legal or are these compilers just being generous?</p>\n<p>gcc:</p>\n<blockquote>\n<p id=\"so_27011854_27011854_0\">warning: no return statement in function returning non-void\n  [-Wreturn-type]</p>\n</blockquote>\n<p>clang:</p>\n<blockquote>\n<p id=\"so_27011854_27011854_1\">warning: control reaches end of non-void function [-Wreturn-type]</p>\n</blockquote>\n<p>If this is legal, is there a defined behavior for what value will be returned?</p>\n", "Tags": "<c++><return-value><compiler-warnings><undefined-behavior>", "OwnerUserId": "1128289", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_27011854_27011854_0": {"section_id": 3913, "quality": 0.5714285714285714, "length": 4}, "so_27011854_27011882_0": {"section_id": 3913, "quality": 0.9166666666666666, "length": 11}, "so_27011854_27011854_1": {"section_id": 3360, "quality": 0.5714285714285714, "length": 4}}, "n3337": {"so_27011854_27011854_0": {"section_id": 3773, "quality": 0.5714285714285714, "length": 4}, "so_27011854_27011882_0": {"section_id": 3773, "quality": 0.9166666666666666, "length": 11}, "so_27011854_27011854_1": {"section_id": 3230, "quality": 0.5714285714285714, "length": 4}}, "n4659": {"so_27011854_27011882_0": {"section_id": 4799, "quality": 0.6666666666666666, "length": 8}, "so_27011854_27011854_1": {"section_id": 4126, "quality": 0.5714285714285714, "length": 4}}}, "27011982": {"ParentId": "27011854", "PostTypeId": "2", "CommentCount": "6", "CreationDate": "2014-11-19T08:18:33.787", "Score": "4", "LastEditorUserId": "3002139", "LastEditDate": "2014-11-19T15:38:45.740", "Id": "27011982", "OwnerUserId": "3002139", "Body": "<p>As already stated by Bathsheba, flowing off the end of a non-void function is indeed undefined behavior. The reason why this is a warning, not an error, is that you might be able to proof that this will never happen. For example consider this:</p>\n<pre><code>// My magic function.\n// It is forbidden to call it with values between -5 and 5\nbool fun (int i) {\n    if (i &gt;= 5)\n        return true;\n    if (i &lt;= -5)\n        return false;\n}\n</code></pre>\n<p>Now you have well defined behavior as long as the users of the function read the comment carefully. This is obviously a dangerous thing to do, so the compiler warns you not to do it.</p>\n<p><strong>Edit:</strong>\nAs MSalters mentioned, this is less dangerous for <em>private</em> member functions because the class invariant can guarantee that the function is never used incorrectly. Consider this example:</p>\n<pre><code>// Every member function of SomeClass makes sure \n// that i_ is in the legal range when it's done\nclass SomeClass {\n    public:\n        SomeClass () : i_{27} {}\n    // Possibly more public or private functions that all make sure i_ stays valid\n    private:\n        bool foo () {if (i_ &gt; 3) return true;}\n        int i_;\n};\n</code></pre>\n<p>Now you (as the class maintainer) can make sure that <code>i_</code> is always at least <code>4</code> and <code>foo</code> will always work fine. Personally, I would still avoid that because it hurts maintainability and readability, but it is better than the free version because now <em>\"only\"</em> all class maintainers need to worry about this invariant/can make a mistake.</p>\n", "LastActivityDate": "2014-11-19T15:38:45.740"}});