post_cb({"26098900": {"CommentCount": "6", "ViewCount": "321", "PostTypeId": "1", "LastEditorUserId": "820657", "CreationDate": "2014-09-29T11:31:17.980", "LastActivityDate": "2014-09-29T12:41:41.260", "Title": "Initialising base classes when using virtual inheritance", "LastEditDate": "2014-09-29T12:41:41.260", "Id": "26098900", "Score": "1", "Body": "<p>I'm getting unexpected errors when compiling the following code using Xcode 5.1 on OS X. \nApple LLVM version 5.1 (clang-503.0.40) (based on LLVM 3.4svn)</p>\n<pre><code>class GrandParent\n{\npublic:\n    GrandParent(int age) : m_age(age)\n    {\n    }\n\n    virtual ~GrandParent() {}\n\nprivate:\n    GrandParent();\n    GrandParent(const GrandParent&amp;);\n    const GrandParent&amp; operator=(const GrandParent&amp;);\n\n    int m_age;\n};\n\nclass Parent1 : public virtual GrandParent\n{\npublic:\n    Parent1(int age) : m_age(age)\n    {\n    }\n\n    virtual ~Parent1() {}\n\nprivate:\n    Parent1();\n    Parent1(const Parent1&amp;);\n    const Parent1&amp; operator=(const Parent1&amp;);\n\n    int m_age;\n};\n\nclass Parent2 : public virtual GrandParent\n{\npublic:\n    Parent2(int age) : m_age(age)\n    {\n    }\n\n    virtual ~Parent2() {}\n\nprivate:\n    Parent2();\n    Parent2(const Parent2&amp;);\n    const Parent2&amp; operator=(const Parent2&amp;);\n\n    int m_age;\n};\n\nclass Child : public Parent1, public Parent2\n{\npublic:\n    Child(int grandParentAge, int parent1Age, int parent2Age, int childAge) :\n        GrandParent(grandParentAge),\n        Parent1(parent1Age),\n        Parent2(parent2Age),\n        m_age(childAge)\n    {\n    }\n\n    virtual ~Child() {}\n\nprivate:\n    Child();\n    Child(const Child&amp;);\n    const Child&amp; operator=(const Child&amp;);\n\n    int m_age;\n};\n</code></pre>\n<p>The errors reported are:</p>\n<pre><code>error: inherited virtual base class 'GrandParent' has private default constructor\n    Parent1(int age) : m_age(age)\n    ^\nnote: declared private here\n    GrandParent();\n    ^\nerror: inherited virtual base class 'GrandParent' has private default constructor\n    Parent2(int age) : m_age(age)\n    ^\nnote: declared private here\n    GrandParent();\n</code></pre>\n<p>My understanding is that the constructor for the virtual base class (GrandParent) is not called by the class that inherits from it (Parent1 or Parent2). Instead, the constructor is called by the constructor of the concrete class (Child). </p>\n<p>Is this correct? </p>\n<p>If I supply a default constructor for GrandParent it compiles OK. However, if I construct a child object:</p>\n<pre><code>Child child(80, 50, 49, 20);\n</code></pre>\n<p>and inspect it I can see:</p>\n<pre><code>Child) child = {\n  Parent1 = {\n    GrandParent = (m_age = 49)\n    m_age = 50\n  }\n  Parent2 = {\n    GrandParent = (m_age = 80)\n    m_age = 49\n  }\n  m_age = 20\n</code></pre>\n<p>So the age of GrandParent when using Parent1 is incorrect but for Parent2 it is correct.</p>\n<p>Have I misunderstood something? Or could the error be a compiler bug?</p>\n<p><strong>UPDATE</strong></p>\n<p>If I update the ctor of Parent1 (and do the same for Parent2)to:</p>\n<p>Parent1(int age) : GrandParent(100), m_age(age)\n{\n}</p>\n<p>it now compiles. Inspecting the values reveals:</p>\n<pre><code>(Child) child = {\n  Parent1 = {\n    GrandParent = (m_age = 49)\n    m_age = 50\n  }\n  Parent2 = {\n    GrandParent = (m_age = 80)\n    m_age = 49\n  }\n  m_age = 20\n</code></pre>\n<p>This is clearly not right. Furthermore, the modified code compiles on Windows using VS 2013 Express and the values on inspection are correct.</p>\n", "Tags": "<c++><xcode5><virtual-inheritance>", "OwnerUserId": "820657", "AnswerCount": "2"}, "26099123": {"ParentId": "26098900", "CommentCount": "2", "Body": "<p>When the compiler executes the line </p>\n<pre><code> Parent1(int age) : m_age(age) \n</code></pre>\n<p>it tries to create a Parent1 object where it is a derived class of type GrandParent. And as can be seen from the constructor definition of the Parent1 class, it does nothing but tries to create a GrandParent object by calling the default constructor of it.</p>\n<pre><code>Parent1(int age) : m_age(age)   // Here the default constructor of GrandParent is called implicitly.\n{\n}\n</code></pre>\n<p>However since you have defined the default contructor of GranParent class as private, the comp\u0131ler gives that error.</p>\n", "OwnerUserId": "2066822", "PostTypeId": "2", "Id": "26099123", "Score": "1", "CreationDate": "2014-09-29T11:44:00.823", "LastActivityDate": "2014-09-29T11:44:00.823"}, "26099873": {"ParentId": "26098900", "CommentCount": "0", "Body": "<p>All defined ctors, defaulted or not, must be valid.</p>\n<p>While the initialization of virtual bases is skipped <em>at runtime</em> in all but the most-derived ctor, it must still be valid.</p>\n<p>Quote from C++14 final draft (n3936):</p>\n<blockquote>\n<h3>12.6.2 Initializing bases and members <code>[class.base.init]</code></h3>\n<p id=\"so_26098900_26099873_0\">7 The <em>expression-list</em> or <em>braced-init-list</em> in a <em>mem-initializer</em> is used to initialize the designated subobject (or, in the case of a delegating constructor, the complete class object) according to the initialization rules of 8.5 for direct-initialization.<br>\n  [ example omitted ]<br>\n  The initialization performed by each <em>mem-initializer</em> constitutes a full-expression. Any expression in a <em>mem-initializer</em> is evaluated as part of the full-expression that performs the initialization. <strong>A <em>mem-initializer</em> where the <em>mem-initializer-id</em> denotes a virtual base class is ignored during execution of a constructor of any class that is not the most derived class.</strong><br>\n  8 In a non-delegating constructor, if a given potentially constructed subobject is not designated by a <em>meminitializer-id</em> (including the case where there is no <em>mem-initializer-list</em> because the constructor has no <em>ctor-initializer</em>), then</br></br></br></p>\n<ul>\n<li>if the entity is a non-static data member that has a <em>brace-or-equal-initializer</em> and either\n  <ul>\n<li>the constructor\u2019s class is a union (9.5), and no other variant member of that union is designated by a <em>mem-initializer-id</em> or</li>\n<li>the constructor\u2019s class is not a union, and, if the entity is a member of an anonymous union, no other member of that union is designated by a <em>mem-initializer-id</em>,\n  the entity is initialized as specified in 8.5;</li>\n</ul></li>\n<li>otherwise, if the entity is an anonymous union or a variant member (9.5), no initialization is performed;</li>\n<li><strong>otherwise, the entity is default-initialized (8.5)</strong>.</li>\n</ul>\n<p id=\"so_26098900_26099873_1\">[ Note: An abstract class (10.4) is never a most derived class, thus its constructors never initialize virtual base classes, therefore the corresponding mem-initializers may be omitted. \u2014end note ]</p>\n</blockquote>\n<p>I especially commend the last note to your attention, which you might have used as justification.<br>\nTrouble is, notes are non-normative, and this note is flatly contradicted by the normative text preceding it.</br></p>\n<p>Seems clang++-3.5.0 took the note as gospel, while g++-4.9.0 did not:<br>\n<a href=\"http://coliru.stacked-crooked.com/a/ded8d46cc29ac79f\" rel=\"nofollow\">http://coliru.stacked-crooked.com/a/ded8d46cc29ac79f</a></br></p>\n", "OwnerUserId": "3204551", "PostTypeId": "2", "Id": "26099873", "Score": "1", "CreationDate": "2014-09-29T12:23:51.240", "LastActivityDate": "2014-09-29T12:23:51.240"}, "bq_ids": {"n4140": {"so_26098900_26099873_1": {"section_id": 435, "quality": 0.8260869565217391, "length": 19}, "so_26098900_26099873_0": {"section_id": 434, "quality": 0.6666666666666666, "length": 44}}, "n3337": {"so_26098900_26099873_1": {"section_id": 427, "quality": 0.8260869565217391, "length": 19}, "so_26098900_26099873_0": {"section_id": 426, "quality": 0.6666666666666666, "length": 44}}, "n4659": {"so_26098900_26099873_1": {"section_id": 454, "quality": 0.8260869565217391, "length": 19}, "so_26098900_26099873_0": {"section_id": 452, "quality": 0.6666666666666666, "length": 44}}}});