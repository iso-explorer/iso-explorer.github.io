post_cb({"17381573": {"CommentCount": "1", "AcceptedAnswerId": "17381687", "PostTypeId": "1", "ClosedDate": "2014-03-02T17:58:35.320", "LastEditorUserId": "1932150", "CreationDate": "2013-06-29T15:05:08.433", "LastActivityDate": "2013-06-29T15:20:41.080", "LastEditDate": "2013-06-29T15:20:41.080", "ViewCount": "388", "FavoriteCount": "2", "Title": "order of evaluation of arguments to a constructor", "Id": "17381573", "Score": "4", "Body": "<p>Say I have this class:</p>\n<pre><code>struct A\n{\n  A(int, int, int) {}\n};\n</code></pre>\n<p>and I initialize it like this:</p>\n<pre><code>A{ a(), b(), c() };\n</code></pre>\n<p>Where the functions <code>a()</code>, <code>b()</code> and <code>c()</code> all return <code>int</code>. Should <code>a()</code> be called before <code>b()</code> and <code>b()</code> before <code>c()</code>?</p>\n<p>I am mystified by the following paragraph from the standard (8.5.4 [dcl.init.list] p4):</p>\n<blockquote>\n<p id=\"so_17381573_17381573_0\">Within the initializer-list of a braced-init-list, the initializer-clauses, including any that result from pack\n  expansions (14.5.3), are evaluated in the order in which they appear. That is, every value computation and\n  side effect associated with a given initializer-clause is sequenced before every value computation and side\n  effect associated with any initializer-clause that follows it in the comma-separated list of the initializer-list.\n  [ Note: This evaluation ordering holds regardless of the semantics of the initialization; for example, it applies\n  when the elements of the initializer-list are interpreted as arguments of a constructor call, even though\n  ordinarily there are no sequencing constraints on the arguments of a call. \u2014 end note ]</p>\n</blockquote>\n<p>According to the quote, the functions would be called in order they appear, but when I've tested this with my compiler (g++-4.8.1), it did not hold. Have I misunderstood something?</p>\n", "Tags": "<c++><c++11>", "OwnerUserId": "1095108", "AnswerCount": "2"}, "17381687": {"ParentId": "17381573", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>This is a <a href=\"http://gcc.gnu.org/bugzilla/show_bug.cgi?id=51253\" rel=\"nofollow noreferrer\">bug in GCC</a> (thanks to <a href=\"https://stackoverflow.com/questions/17381573/order-of-evaluation-of-arguments-to-a-constructor/17381687?noredirect=1#comment25231543_17381687\">Casey</a> for the link). The paragraph you quoted applies in general to list initialization, where the terms are defined pretty clearly in paragraph 8.5.4/1:</p>\n<blockquote>\n<p id=\"so_17381573_17381687_0\"><em>List-initialization</em> is initialization of an object or reference from a <em>braced-init-list</em>. Such an initializer is\n  called an <em>initializer list</em>, and the comma-separated <em>initializer-clauses</em> of the list are called the <em>elements</em> of the\n  initializer list.</p>\n</blockquote>\n<p>There is no reason to believe this should apply only to the invocation of an initializer list constructor. Also, the note in the paragraph you quoted clarifies that:</p>\n<blockquote>\n<p id=\"so_17381573_17381687_1\"><strong>This evaluation ordering</strong> holds regardless of the semantics of the initialization; for example, it <strong>applies when the elements of the initializer-list are interpreted as arguments of a constructor call</strong>, even though ordinarily there are no sequencing constraints on the arguments of a call. </p>\n</blockquote>\n", "OwnerUserId": "1932150", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T11:52:09.333", "Id": "17381687", "Score": "6", "CreationDate": "2013-06-29T15:17:48.427", "LastActivityDate": "2013-06-29T15:17:48.427"}, "17381594": {"ParentId": "17381573", "CommentCount": "3", "Body": "<p>Be careful what you're dealing with. The quote you are quoting, as far as I can see, holds only for <em>initializer lists</em>. The feature you are using is <em>uniform initialization</em>. It is required for initializer lists, but I doubt it is for uniform initialization.</p>\n", "OwnerUserId": "298661", "PostTypeId": "2", "Id": "17381594", "Score": "2", "CreationDate": "2013-06-29T15:08:05.853", "LastActivityDate": "2013-06-29T15:08:05.853"}, "bq_ids": {"n4140": {"so_17381573_17381687_0": {"section_id": 3323, "quality": 0.8823529411764706, "length": 15}, "so_17381573_17381573_0": {"section_id": 3326, "quality": 0.9032258064516129, "length": 56}, "so_17381573_17381687_1": {"section_id": 3326, "quality": 0.9583333333333334, "length": 23}}, "n3337": {"so_17381573_17381687_0": {"section_id": 3193, "quality": 0.8823529411764706, "length": 15}, "so_17381573_17381573_0": {"section_id": 3196, "quality": 0.9032258064516129, "length": 56}, "so_17381573_17381687_1": {"section_id": 3196, "quality": 0.9583333333333334, "length": 23}}, "n4659": {"so_17381573_17381687_0": {"section_id": 4089, "quality": 0.8235294117647058, "length": 14}, "so_17381573_17381573_0": {"section_id": 4092, "quality": 0.9032258064516129, "length": 56}, "so_17381573_17381687_1": {"section_id": 4092, "quality": 0.9583333333333334, "length": 23}}}});