post_cb({"25517664": {"CreationDate": "2014-08-27T01:39:12.207", "ViewCount": "899", "Id": "25517664", "AcceptedAnswerId": "25517738", "Score": "3", "Title": "What is the output of the following code snippet? What does it mean?", "CommentCount": "4", "Body": "<p>I'm studying for a C++/OOP exam and am a little confused with this question on my practice test.</p>\n<p>What is the output of the following code snippet?</p>\n<pre><code>int *list = new int[5];\nint *ptr;\nfor (int i = 0; i &lt; 5; i ++)\nlist [ i] = i+ 1;\nptr = list;\ndelete [ ] list;\ncout &lt;&lt; *ptr\n</code></pre>\n<ol>\n<li>1</li>\n<li>Address of list</li>\n<li>Address of ptr</li>\n<li>Error \u2013 ptr references memory that no longer belongs to the program</li>\n</ol>\n<p>I found the output, which is -17891602, but am I correct in assuming this is just a reference to memory that no longer belongs to the program? Because I'm not necessarily getting an error.</p>\n<p>It's been a while since I worked with pointers, so I'm getting a but twisted up trying to follow what the code is actually doing. (I know it's simple compared to some stuff you guys are working on, but I'm just getting started learning this stuff   :)   )</p>\n", "Tags": "<c++>", "LastActivityDate": "2014-08-27T05:52:27.820", "PostTypeId": "1", "AnswerCount": "3", "OwnerUserId": "3850431"}, "bq_ids": {"n4140": {"so_25517664_25517738_0": {"length": 30, "quality": 0.8823529411764706, "section_id": 7183}}, "n3337": {"so_25517664_25517738_0": {"length": 32, "quality": 0.9411764705882353, "section_id": 6927}}}, "25517762": {"LastActivityDate": "2014-08-27T01:51:08.787", "CommentCount": "1", "Body": "<p>The person writing that question either doesn't understand or wrote it poorly.  It could be fixed by inserting one word on each line:</p>\n<ol>\n<li><em>Definitely</em> 1</li>\n<li><em>Definitely</em> the Address of list</li>\n<li><em>Definitely</em> the Address of ptr</li>\n<li><em>Programmer</em> Error \u2013 ptr references memory that no longer belongs to the program</li>\n</ol>\n<p>The issue touches upon something called \"Undefined Behavior\", which you can read about here:</p>\n<p><a href=\"https://softwareengineering.stackexchange.com/questions/99692/philosophy-behind-undefined-behavior\">https://softwareengineering.stackexchange.com/questions/99692/philosophy-behind-undefined-behavior</a></p>\n<p>That lays out some of the reasons why--for instance--the compiler has not given you a \"compile-time error\" or \"run-time exception\".  It is a mistake that in the general case may be impossible to detect a priori, and that checking at run-time would add undesirable overhead.</p>\n", "CreationDate": "2014-08-27T01:51:08.787", "LastEditDate": "2017-04-12T07:31:17.070", "ParentId": "25517664", "Id": "25517762", "LastEditorUserId": "-1", "PostTypeId": "2", "Score": "1", "OwnerUserId": "211160"}, "25517911": {"LastActivityDate": "2014-08-27T05:30:02.827", "CommentCount": "1", "Body": "<p>I wasn't going to weight in on this, but HostileFork's answer (which I +1ed) digs in while missing a couple points - too much to comment on easily, so here I am...</p>\n<p>Firstly the question:</p>\n<blockquote>\n<p id=\"so_25517664_25517911_0\">What is the output of the following code snippet?</p>\n</blockquote>\n<p>For the code given, the <em>output</em> may be <strong><em>anything or nothing</em></strong>, which is not one of the answers.  Still, the intended answer is obviously 4:</p>\n<blockquote>\n<p id=\"so_25517664_25517911_1\">Error \u2013 ptr references memory that no longer belongs to the program</p>\n</blockquote>\n<p>That said:</p>\n<ul>\n<li><p>the memory <em>probably</em> still belongs to the program/process (most C++ implementations don't release memory used to satisfy small memory allocations to the OS until program termination), but it's no longer \"owned\" by the application-level code you've listed, as <code>delete[]</code> returns ownership to the memory allocation library</p></li>\n<li><p>the problem is not just what <code>ptr</code> references, but specifically that <code>ptr</code> is being dereferenced while pointing to released memory</p></li>\n</ul>\n<p>Summarily, the question is poorly worded, but the intent behind it is fairly clear.</p>\n<p>I won't repeat the explanation of undefined behaviour that addresses your \"Because I'm not necessarily getting an error.\" observation, as HostileFork's answer does that well.</p>\n<p>Still, computer programs don't tend to go out of their way to do weird things arbitrarily, even when the compiler's not obliged by the C++ Standard to provide any particular behaviour, and in this particular case the observation I made above that the memory's likely still owned by the program, combined with noticing that the value of <code>*ptr</code> before <code>delete[] list;</code> executed must have been <code>1</code>, leads to the question...</p>\n<h2>Why did you see -17891602 and not 1?</h2>\n<p>On a hunch I converted it to unsigned 32 bit hexadecimal (as one does): the value's then <code>FEEEFEEE</code>.  Wikipedia says of this <a href=\"http://en.wikipedia.org/wiki/Magic_number_%28programming%29\" rel=\"nofollow\">\"magic number\"</a>:</p>\n<blockquote>\n<p id=\"so_25517664_25517911_2\">Used by Microsoft's debug HeapFree() to mark freed heap memory.</p>\n</blockquote>\n<p>So, Microsoft's <code>delete[]</code> function triggered overwriting of the five <code>int</code> locations with <code>0xFEEEFEEE</code>, intended to make it easier for you - the programmer - to see you had undefined behaviour.  As overwriting the memory takes time while the programm is running, and is only helpful if the program's actually broken anyway which you'll hopefully realise and fix before making and distributing a \"release\" build, this <code>FEEEFEEE</code>-fill behaviour is only done in MS's \"debug\" builds.  Other compilers or malloc libraries often offer similar behaviour enabled by compiler flags / environment variables etc..</p>\n", "CreationDate": "2014-08-27T02:12:28.080", "LastEditDate": "2014-08-27T05:30:02.827", "ParentId": "25517664", "Id": "25517911", "LastEditorUserId": "410767", "PostTypeId": "2", "Score": "2", "OwnerUserId": "410767"}, "25517738": {"LastActivityDate": "2014-08-27T05:52:27.820", "CommentCount": "1", "Body": "<p>The <em>output</em> could be anything (including <code>-17891602</code>) since you're invoking undefined behaviour by dereferencing a pointer that has had its backing memory deallocated.</p>\n<p>The relevant part of the standard is <code>C++11 3.7.4.2 Deallocation functions /4</code> (my bold):</p>\n<blockquote>\n<p id=\"so_25517664_25517738_0\">If the argument given to a deallocation function in the standard library is a pointer that is not the null pointer value, the deallocation function shall deallocate the storage referenced by the pointer, <strong>rendering invalid all pointers referring to any part of the deallocated storage. The effect of using an invalid pointer value (including passing it to a deallocation function) is undefined.</strong></p>\n</blockquote>\n<p>On my system, the following program (modelled on your snippet):</p>\n<pre><code>#include &lt;iostream&gt;\n\nint main (void) {\n    int *list = new int[5];\n    int *ptr;\n    for (int i = 0; i &lt; 5; i ++)\n        list [ i] = i+ 1;\n    ptr = list;\n    delete [ ] list;\n    std::cout &lt;&lt; *ptr;\n    return 0;\n}\n</code></pre>\n<p>outputs <code>1</code> but it is by no means required to.</p>\n<p>The correct answer to your question is most likely 4, though that's not technically the <em>output</em> (you may not see the \"error\" string sent to the output stream) - it is, however, the <em>result</em> of executing the code.</p>\n", "CreationDate": "2014-08-27T01:48:36.583", "LastEditDate": "2014-08-27T05:52:27.820", "ParentId": "25517664", "Id": "25517738", "LastEditorUserId": "14860", "PostTypeId": "2", "Score": "3", "OwnerUserId": "14860"}});