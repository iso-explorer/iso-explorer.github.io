post_cb({"bq_ids": {"n4140": {"so_10854354_10854430_0": {"length": 65, "quality": 0.9285714285714286, "section_id": 562}}, "n3337": {"so_10854354_10854430_0": {"length": 65, "quality": 0.9285714285714286, "section_id": 553}}, "n4659": {"so_10854354_10854430_0": {"length": 65, "quality": 0.9285714285714286, "section_id": 585}}}, "10854354": {"ViewCount": "437", "Body": "<p>First, a tiny example that demonstrates the problem:</p>\n<pre><code>struct Bar {\n    enum Baz {aa, bb, cc};\n    Baz baz_;\n\n    operator Baz() const { return baz_; }\n    private:\n        template&lt;typename T&gt; operator T() const;\n};\n\nint main() {\n    Bar bar;\n    switch (bar) {\n        case Bar::aa:\n            break;\n        case Bar::bb:\n            break;\n        case Bar::cc:\n            break;\n        default:\n            break;\n    }\n    return 0;\n}\n</code></pre>\n<p>Compiling this code with g++ 4.7.0 gives the following error:</p>\n<pre><code>foo.cpp: In function \u2018int main()\u2019:\nfoo.cpp:12:16: error: ambiguous default type conversion from \u2018Bar\u2019\nfoo.cpp:12:16: error:   candidate conversions include \u2018template&lt;class T&gt; Bar::operator T() const\u2019\n</code></pre>\n<p>My understanding is that, since the struct object is being \"switched\" on, the compiler will try to find a conversion function to an integral or enum type. I explicitly provide a public conversion function to the Bar::Baz enum type and would like it to use that.</p>\n<p>The confusing part to me is that the compiler also finds the <em>private</em> conversion function and then cannot decide which to use. Why is it even considering the private function? If I add an explicit cast, say <code>switch((int)bar)</code>, then <em>only</em> the private conversion function matches and the compiler rightly complains that it cannot use it since it's private. So, since the private conversion function can't be used in this context, why isn't the choice between the two unambiguous?</p>\n<p>Interestingly, I believe (though I'm not 100% sure) this code compiles without error on g++ 4.6.</p>\n<p><strong>edit:</strong> As pointed out by James McNellis in the comments, the fact that the private conversion function is templated is also relevant here.</p>\n", "AcceptedAnswerId": "10854430", "Title": "Private conversion function results in \"ambiguous default type conversion\" error (c++)", "CreationDate": "2012-06-01T16:49:05.657", "Id": "10854354", "CommentCount": "8", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2012-06-01T18:10:46.997", "LastEditorUserId": "541373", "LastActivityDate": "2012-07-01T08:09:14.100", "Score": "5", "OwnerUserId": "541373", "Tags": "<c++><g++><type-conversion>", "AnswerCount": "2"}, "10854415": {"Id": "10854415", "PostTypeId": "2", "Body": "<pre><code>switch(expression)\n</code></pre>\n<p>The expression must be of an integral type or of a class type for which there is an unambiguous conversion to integral type.</p>\n", "LastEditorUserId": "1225337", "LastActivityDate": "2012-07-01T08:09:14.100", "Score": "-1", "CreationDate": "2012-06-01T16:54:33.090", "ParentId": "10854354", "CommentCount": "0", "OwnerUserId": "1253401", "LastEditDate": "2012-07-01T08:09:14.100"}, "10854430": {"Id": "10854430", "PostTypeId": "2", "Body": "<p>Access control comes <em>after</em> overload resolution. This is specified in the standard, \u00a713.3</p>\n<blockquote>\n<p id=\"so_10854354_10854430_0\">Overload resolution is a mechanism for selecting the best function to call given a list of expressions that are\n  to be the arguments of the call and a set of candidate functions that can be called based on the context of the\n  call. The selection criteria for the best function are the number of arguments, how well the arguments\n  match the types of the parameters of the candidate function, how well (for nonstatic member functions) the\n  object matches the implied object parameter, and certain other properties of the candidate function. [Note:\n  the function selected by overload resolution is not guaranteed to be appropriate for the context. Other\n  restrictions, such as the accessibility of the function, can make its use in the calling context ill-formed. ]</p>\n</blockquote>\n<p>So the overload resolution can chose a function that is not appropriate for the given context.</p>\n", "LastActivityDate": "2012-06-01T16:55:21.100", "CommentCount": "5", "CreationDate": "2012-06-01T16:55:21.100", "ParentId": "10854354", "Score": "3", "OwnerUserId": "661519"}});