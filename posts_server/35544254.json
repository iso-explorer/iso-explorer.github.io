post_cb({"35544445": {"Id": "35544445", "PostTypeId": "2", "Body": "<p>You want to get the pointers to <code>Foo</code>'s methods, but <code>Foo</code> is a class, and you could call this in a derived class (where the methods are different).</p>\n", "LastActivityDate": "2016-02-22T01:32:21.223", "CommentCount": "2", "CreationDate": "2016-02-22T01:32:21.223", "ParentId": "35544254", "Score": "0", "OwnerUserId": "1839777"}, "35544976": {"Id": "35544976", "PostTypeId": "2", "Body": "<p>You are storing addresses of non-static-storage-duration temporaries, which is not allowed in constant expressions. The current version of this rule is in <a href=\"http://eel.is/c++draft/expr.const#5\" rel=\"noreferrer\">[expr.const]/5</a> (emphasis mine):</p>\n<blockquote>\n<p id=\"so_35544254_35544976_0\">A <em>constant expression</em> is either a glvalue core constant expression\n  whose value refers to an entity that is a permitted result of a\n  constant expression (as defined below), or a prvalue core constant\n  expression whose value is an object where, for that object and its\n  subobjects:</p>\n<ul>\n<li><p id=\"so_35544254_35544976_1\">each non-static data member of reference type refers to an entity that is a permitted result of a constant expression, and</p></li>\n<li><p id=\"so_35544254_35544976_2\"><strong>if the object or subobject is of pointer type, it contains the address of an object with static storage duration, the address past\n  the end of such an object ([expr.add]), the address of a function, or\n  a null pointer value</strong>.</p></li>\n</ul>\n</blockquote>\n<p>(C++11 contains similar rules (via the definition of <em>address constant expression</em>), but the constant expression rules were changed by multiple DRs before it was replaced by C++14 generalized <code>constexpr</code>, and I'm not really feeling like doing standard archaeology today.)</p>\n<p>In fact, since every temporary <code>Node</code> created in <code>GetMethods()</code> except for the <code>Node</code> that got returned is destroyed at the <code>;</code>, the <code>Node</code> returned would contain a dangling pointer.</p>\n", "LastActivityDate": "2016-02-22T02:41:37.940", "CommentCount": "3", "CreationDate": "2016-02-22T02:41:37.940", "ParentId": "35544254", "Score": "6", "OwnerUserId": "2756719"}, "35544991": {"Id": "35544991", "PostTypeId": "2", "Body": "<p>You are returning a pointer to a temparary variable that goes out of scope.</p>\n<p>Pointers to temporary objects are clearly not compile time constant values.  Dangling pointers doubly so.</p>\n", "LastActivityDate": "2016-02-22T02:43:32.290", "CommentCount": "4", "CreationDate": "2016-02-22T02:43:32.290", "ParentId": "35544254", "Score": "0", "OwnerUserId": "1774667"}, "bq_ids": {"n4140": {"so_35544254_35544976_2": {"length": 20, "quality": 0.9523809523809523, "section_id": 6187}, "so_35544254_35544976_0": {"length": 21, "quality": 0.75, "section_id": 6187}, "so_35544254_35544976_1": {"length": 7, "quality": 0.5833333333333334, "section_id": 6187}}, "n3337": {"so_35544254_35544976_2": {"length": 14, "quality": 0.6666666666666666, "section_id": 5947}}, "n4659": {"so_35544254_35544976_2": {"length": 19, "quality": 0.9047619047619048, "section_id": 7690}, "so_35544254_35544976_0": {"length": 23, "quality": 0.8214285714285714, "section_id": 7690}, "so_35544254_35544976_1": {"length": 12, "quality": 1.0, "section_id": 7690}}}, "35544676": {"Id": "35544676", "PostTypeId": "2", "Body": "<p>There are bugs in this area with gcc.  <a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=52892\" rel=\"nofollow\">See this link</a></p>\n<p>I've checking std::is_literal_type&lt; Node &gt;() in Visual Studio 2013 and 2015 and I get different answers. Clearly, regardless of the standard, this is still a dark corner of the language...</p>\n<p>You have actually taken the address of a temporary and placed it into the list.  So, even if you could do this in a const Expr, the Node * points to an invalid object.  (You only have one Node object that survives the expression, but you have pointers to two more.)</p>\n<p>However, you'll still have problems with a later version because your structure is not a <a href=\"http://en.cppreference.com/w/cpp/concept/LiteralType\" rel=\"nofollow\">LiteralType</a>.</p>\n", "LastEditorUserId": "3072225", "LastActivityDate": "2016-02-22T02:51:18.403", "Score": "0", "CreationDate": "2016-02-22T02:03:04.057", "ParentId": "35544254", "CommentCount": "1", "OwnerUserId": "3072225", "LastEditDate": "2016-02-22T02:51:18.403"}, "35544254": {"ViewCount": "663", "Body": "<p>I am attempting to write a linked list of pointer-to-member-functions using constexpr. Mostly for fun but it may have a useful application.</p>\n<pre><code>struct Foo;\n\nusing MethodPtr = void (Foo::*)();\n\nstruct Node\n{\n    constexpr Node(MethodPtr method, const Node* next)\n        : Method(method)\n        , Next(next)\n    {}\n\n    constexpr Node Push(MethodPtr method)\n    {\n        return Node(method, this);\n    }\n\n    MethodPtr Method;\n    const Node* Next;\n};\n\nstruct Foo\n{\n    constexpr static Node GetMethods()\n    {\n        return Node{&amp;Foo::Method1, nullptr}\n            .Push(&amp;Foo::Method2)\n            .Push(&amp;Foo::Method3);\n    }\n\n    void Method1() {}\n    void Method2() {}\n    void Method3() {}\n};\n\nint main(void)\n{\n    constexpr Node node = Foo::GetMethods();\n}\n</code></pre>\n<p>The above code gives me the following error in main on the call to GetMethods():</p>\n<pre><code>const Node{MethodPtr{Foo::Method3, 0}, ((const Node*)(&amp; Node{MethodPtr{Foo::Method2, 0}, ((const Node*)(&amp; Node{MethodPtr{Foo::Method1, 0}, 0u}))}))}' is not a constant expression\n</code></pre>\n<p>Will someone please explain why this is not a constant expression? Or is there an alternate/correct way to achieve the goal of building a list of PTMFs at compile time?</p>\n<p>EDIT: I am using the C++ compiler from avr-gcc 4.9.2. I will try this code on another compiler.</p>\n", "AcceptedAnswerId": "35544976", "Title": "Can someone tell me why this is not a constant expression?", "CreationDate": "2016-02-22T01:04:39.680", "Id": "35544254", "CommentCount": "2", "LastEditDate": "2016-02-22T01:15:07.467", "PostTypeId": "1", "LastEditorUserId": "560648", "LastActivityDate": "2016-02-22T02:51:18.403", "Score": "3", "OwnerUserId": "1778832", "Tags": "<c++><c++11><constexpr>", "AnswerCount": "4"}});