post_cb({"24384910": {"ParentId": "24384412", "CommentCount": "0", "Body": "<p>Please don't include <code>.cpp</code> files.</p>\n<p>In the first example, the function is defined out of class, you need to add <code>inline</code>, otherwise it's a multiple definition.</p>\n<p>In the second example, the function is defined in the class definition, so it's an implicit inline function (it's like the compiler added the <code>inline</code> for you), that's why it's not causing multiple definitions.</p>\n", "OwnerUserId": "3088756", "PostTypeId": "2", "Id": "24384910", "Score": "2", "CreationDate": "2014-06-24T11:00:59.283", "LastActivityDate": "2014-06-24T11:00:59.283"}, "24384412": {"CommentCount": "6", "ViewCount": "87", "PostTypeId": "1", "LastEditorUserId": "3141258", "CreationDate": "2014-06-24T10:35:38.847", "LastActivityDate": "2014-06-24T19:40:14.840", "Title": "Compilation error while including cpp file in main: Inline versus non-inline functions", "LastEditDate": "2014-06-24T19:04:13.467", "Id": "24384412", "Score": "1", "Body": "<p>I have a conceptual doubt which i'll try to put across using an example:</p>\n<p>main.cpp</p>\n<pre><code>#include \"array_list.cpp\"\nint main() \n{\n  array_list list1;\n  return 0;\n}\n</code></pre>\n<p>Scenario1:\narray_list.cpp-&gt;</p>\n<pre><code>class array_list\n{\n    private:\n    int list[10];\npublic:\n    array_list () {};\n    ~array_list () {};\n    void set_element (int,int);\n\n};\n\nvoid array_list::set_element (int i,int a) {\nlist[i] = a;\n}\n</code></pre>\n<p>Error:</p>\n<blockquote>\n<p id=\"so_24384412_24384412_0\">main.obj : error LNK2005: \"public: void __thiscall array_list::set_element(int,int)\" (?set_element@array_list@@QAEXHH@Z) already defined in array_list.obj\n  1&gt;C:\\Users\\vrastog\\Documents\\Visual Studio 2012\\Projects\\C++ learning\\Debug\\list using arrays.exe : fatal error LNK1169: one or more multiply defined symbols found</p>\n</blockquote>\n<p>Scenario 2:\narray_list.cpp-&gt;</p>\n<pre><code>class array_list\n{\nprivate:\n    int list[10];\npublic:\n    array_list () {};\n    ~array_list () {};\n    void set_element (int i,int a) {\n        list[i] = a;\n    }\n};\n</code></pre>\n<p>Error: No error!!</p>\n<p>Question: I understand the reason for error. The same method has been defined twice, once in main.obj and second in array_list.obj and hence, it should be an error.\nMy question is why does the second scenario work? Here also, since we have includes array_list.cpp in the main file, 'set_element' should have been defined twice here as well. What am I missing here?</p>\n", "Tags": "<c++><compilation><linker><inline><redefinition>", "OwnerUserId": "3141258", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_24384412_24384629_0": {"section_id": 5404, "quality": 0.6363636363636364, "length": 7}}, "n3337": {"so_24384412_24384629_0": {"section_id": 5199, "quality": 0.6363636363636364, "length": 7}}, "n4659": {"so_24384412_24384629_0": {"section_id": 6853, "quality": 0.6363636363636364, "length": 7}}}, "24384629": {"ParentId": "24384412", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>In-class definition makes a method inline, and therefore it does not cause a multiple definition error in the object file.</p>\n<hr>\n<p>An <code>inline</code> method should be implemented in every translation unit it is used in, so the <code>inline</code> method compiles into <em>both</em> object files.</p>\n<blockquote>\n<p id=\"so_24384412_24384629_0\"><strong>C++ Standard Draft (n3797) 3.2.4</strong>: An inline function shall be defined in every translation unit in which it is odr-used.</p>\n</blockquote>\n<p>Also <strong>3.2.6</strong> requires that these function should be exactly the same.</p>\n<p><code>g++</code> implements this using weak symbols: inline functions are special exported functions that do not cause multiple definition error when linking.</p>\n<p>Use a tool like <code>nm</code> under Linux and see for yourself. It emits a weak symbol into the object file:</p>\n<pre><code>$ nm arraylist.o\n00000000 W _ZN10array_list11set_elementEii\n(... ctors, dtors ...)\n00000000 T main\n</code></pre>\n<p>Also, if you do not use the function, or the compiler inlines all occurrences, it may get optimized out.</p>\n</hr>", "OwnerUserId": "680982", "LastEditorUserId": "680982", "LastEditDate": "2014-06-24T19:40:14.840", "Id": "24384629", "Score": "2", "CreationDate": "2014-06-24T10:45:26.293", "LastActivityDate": "2014-06-24T19:40:14.840"}});