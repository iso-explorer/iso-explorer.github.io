post_cb({"bq_ids": {"n4140": {"so_33842988_33842988_0": {"length": 16, "quality": 1.0, "section_id": 367}}, "n3337": {"so_33842988_33842988_0": {"length": 16, "quality": 1.0, "section_id": 356}}, "n4659": {"so_33842988_33842988_0": {"length": 16, "quality": 1.0, "section_id": 379}}}, "33843078": {"Id": "33843078", "PostTypeId": "2", "Body": "<p>Your intuition is correct. This is a known Clang bug <a href=\"https://llvm.org/bugs/show_bug.cgi?id=13403\">13403</a> with status <code>NEW</code>.</p>\n", "LastEditorUserId": "2352671", "LastActivityDate": "2015-11-21T12:12:04.250", "Score": "14", "CreationDate": "2015-11-21T11:58:54.270", "ParentId": "33842988", "CommentCount": "0", "OwnerUserId": "2352671", "LastEditDate": "2015-11-21T12:12:04.250"}, "33842988": {"ViewCount": "777", "Body": "<p>While trying to understand the phrase \"constructors do not have names\" in the C++ Standard, it seems like I found an error in clang. Could someone confirm this?</p>\n<p><s><code>VS2015</code></s> <s>and</s> <code>gcc</code> rejects this code, and I think <s>they</s> it <s>are</s> is correct. At least, this is the impression I get from \u00a712.1[class.ctor]/2 in N4140:</p>\n<pre><code>#include &lt;iostream&gt;\nclass A {\npublic:\n    A() { std::cout &lt;&lt; \"A()\" &lt;&lt; '\\n'; }\n};\n\nint main()\n{\n  A::A();\n}\n</code></pre>\n<p><strong>\u00a712.1[class.ctor]/2</strong> in N4140:</p>\n<blockquote>\n<p id=\"so_33842988_33842988_0\">A constructor is used to initialize objects of its class type. Because\n  constructors do not have names, they are never found during name\n  lookup; ...</p>\n</blockquote>\n<p>With the expression <code>A::A();</code> above, clang finds the constructor by name lookup, when it should find the type name <code>A</code> instead. See <a href=\"http://rextester.com/SMAQ78852\" rel=\"noreferrer\">live example</a>. </p>\n", "AcceptedAnswerId": "33843078", "Title": "Meaning of phrase \"constructors do not have names\" in the C++ Standard", "CreationDate": "2015-11-21T11:51:14.477", "Id": "33842988", "CommentCount": "26", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2015-11-21T16:15:40.183", "LastEditorUserId": "1042389", "LastActivityDate": "2015-11-21T16:15:40.183", "Score": "22", "OwnerUserId": "1042389", "Tags": "<c++><clang><language-lawyer><c++14>", "AnswerCount": "2"}, "33843051": {"Id": "33843051", "PostTypeId": "2", "Body": "<p>I agree that this should not compile.</p>\n<p>It's actually more bizzare than you thought. Try this:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nclass A {\npublic:\n    A() {\n        std::cout &lt;&lt; \"A() \" &lt;&lt; this &lt;&lt; '\\n';\n    }\n\n    void foo() {\n        std::cout &lt;&lt; _message &lt;&lt; std::endl;\n    }\n\n    std::string _message = \"hello\";\n};\n\nint main()\n{\n    A::A().foo();\n}\n</code></pre>\n<p>example output:</p>\n<pre><code>A() 0x7fff5cd105f8\nhello\n</code></pre>\n<p>It looks to me as if an un-named A is being implicitly created.</p>\n", "LastActivityDate": "2015-11-21T11:57:02.490", "CommentCount": "2", "CreationDate": "2015-11-21T11:57:02.490", "ParentId": "33842988", "Score": "6", "OwnerUserId": "2015579"}});