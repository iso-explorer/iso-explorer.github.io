post_cb({"38953809": {"ParentId": "38953734", "PostTypeId": "2", "CommentCount": "9", "Body": "<p>This rule still applies, reference as member variable you have to initialize in constructor-s initilization list. Example:</p>\n<pre><code>class X {\npublic:\n    X(int&amp; ri) : mri(ri) {}\n    // X()  {} // ERROR! no explicit initialization of mri\n    int&amp; mri; \n};\n\nint main() {\n    int i;\n    X x(i);\n}\n</code></pre>\n<p>without initilizing it you will get compiler error.</p>\n<hr>\n<p>(I decided to sum up other good clarifications from comments to make this answer more usefull)</p>\n<p>According to standard 8.5.3/3(emphasis mine ) :</p>\n<blockquote>\n<p id=\"so_38953734_38953809_0\">The initializer can be omitted for a reference only in a parameter declaration (8.3.5), in the declaration of\n  a function return type, <strong><em>in the declaration of a class member within its class definition (9.2)</em></strong>, and where the\n  extern specifier is explicitly used.</p>\n</blockquote>\n<p>So the following code is only definition of <code>struct X</code> where <code>mri</code> variable is only declared.</p>\n<pre><code>struct X {  \n   int &amp;mri; // declaration of mri (ERROR if you define variable of this struct)\n};\n</code></pre>\n<p>Utill you create (define) an object of type X, compiler will not show any error. When you write:</p>\n<pre><code>int main() {\n    X x; // error, `x.r` is not bound to any object\n}\n</code></pre>\n<p>compiler will complain, this is because you have defined <code>x</code> and this is where you must also bind x.r to some object. The only place where you can do it is in constructors initialization list.</p>\n<p>You may notice also that compiler will mark (among others) default constructor as deleted when you add a reference as non static data member. </p>\n</hr>", "OwnerUserId": "471160", "LastEditorUserId": "471160", "LastEditDate": "2016-08-15T15:14:47.730", "Id": "38953809", "Score": "6", "CreationDate": "2016-08-15T10:59:02.233", "LastActivityDate": "2016-08-15T15:14:47.730"}, "38953734": {"CommentCount": "15", "ViewCount": "120", "PostTypeId": "1", "ClosedDate": "2016-08-15T11:30:11.827", "LastEditorUserId": "1413395", "CreationDate": "2016-08-15T10:54:54.840", "LastActivityDate": "2016-08-15T15:14:47.730", "Title": "C++ Reference intialization", "AcceptedAnswerId": "38953809", "LastEditDate": "2016-08-15T11:20:53.267", "Id": "38953734", "Score": "1", "Body": "<p>I'm confused with the reference initialization in C++.\nNormally reference should be initialized when it is declared but I found that when it is a class member reference is declared without being initialized.</p>\n<p>It is a special case?</p>\n<p>What is the correct rule?</p>\n", "Tags": "<c++><reference>", "OwnerUserId": "1832564", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_38953734_38953809_0": {"section_id": 3319, "quality": 0.9130434782608695, "length": 21}}, "n3337": {"so_38953734_38953809_0": {"section_id": 3189, "quality": 0.9130434782608695, "length": 21}}, "n4659": {"so_38953734_38953809_0": {"section_id": 4085, "quality": 0.9130434782608695, "length": 21}}}});