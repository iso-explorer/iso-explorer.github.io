post_cb({"bq_ids": {"n4140": {"so_34746160_34749021_2": {"length": 21, "quality": 1.0, "section_id": 455}, "so_34746160_34749021_0": {"length": 4, "quality": 0.8, "section_id": 458}, "so_34746160_34749021_1": {"length": 24, "quality": 1.0, "section_id": 451}}, "n3337": {"so_34746160_34749021_2": {"length": 21, "quality": 1.0, "section_id": 446}, "so_34746160_34749021_0": {"length": 4, "quality": 0.8, "section_id": 449}, "so_34746160_34749021_1": {"length": 24, "quality": 1.0, "section_id": 442}}, "n4659": {"so_34746160_34749021_2": {"length": 21, "quality": 1.0, "section_id": 478}, "so_34746160_34749021_0": {"length": 4, "quality": 0.8, "section_id": 481}, "so_34746160_34749021_1": {"length": 24, "quality": 1.0, "section_id": 474}}}, "34749021": {"Id": "34749021", "PostTypeId": "2", "Body": "<blockquote>\n<pre><code>Point(const Point p)\n</code></pre>\n<p id=\"so_34746160_34749021_0\">Why is it considered as copy constructor, instead of a constructor?</p>\n</blockquote>\n<p>It's not.</p>\n<p>As the standard says in \u00a712.8/2:</p>\n<blockquote>\n<p id=\"so_34746160_34749021_1\">A non-template constructor for class <code>X</code> is a copy constructor if its\n  first parameter is of type <code>X&amp;</code>, <code>const X&amp;</code>, <code>volatile X&amp;</code> or <code>const volatile X&amp;</code>, and either there are no other parameters or else all other\n  parameters have default arguments (...).</p>\n</blockquote>\n<p>In fact, your declaration is <strong>ill-formed</strong>. \u00a712.8/6 says:</p>\n<blockquote>\n<p id=\"so_34746160_34749021_2\">A declaration of a constructor for a class <code>X</code> is ill-formed if its\n  first parameter is of type (optionally cv-qualified) <code>X</code> and either\n  there are no other parameters or else all other parameters have\n  default arguments.</p>\n</blockquote>\n<p>You do have exactly that: a constructor for a class <code>Point</code> whose first parameter is of type <code>const Point</code> and there are no other arguments.</p>\n<p>This is of course the formal explanation. As others have explained, the practical implication of such a constructor would be infinite recursion.</p>\n<p>Perhaps you are concerned about the error message you got. However, there are absolutely <strong>no rules regarding the contents of a diagnostic message</strong> produced by a compiler. It's a quality-of-implementation issue; if your compiler thinks that <em>copy constructor for class \"Point\" may not have a parameter of type \"Point\"</em> is a good way to convey the problem to its users, then so be it.</p>\n", "LastActivityDate": "2016-01-12T16:35:43.230", "CommentCount": "0", "CreationDate": "2016-01-12T16:35:43.230", "ParentId": "34746160", "Score": "3", "OwnerUserId": "3313064"}, "34746160": {"ViewCount": "286", "Body": "<p>If I have a Point class, the copy constructor should look like this:</p>\n<pre><code>Point(const Point &amp;p);\nPoint(Point &amp;p);\n</code></pre>\n<p>However, what if I want to create a constructor, which requires a Point? Why is it considered as copy constructor, instead of a constructor?</p>\n<pre><code>Point(const Point p)\n</code></pre>\n<p>Compiler error: \"copy constructor for class \"Point\" may not have a parameter of type \"Point\"</p>\n", "AcceptedAnswerId": "34749021", "Title": "Copy constructor's signature without reference", "CreationDate": "2016-01-12T14:22:34.563", "Id": "34746160", "CommentCount": "6", "PostTypeId": "1", "LastActivityDate": "2016-01-12T16:35:43.230", "Score": "2", "OwnerUserId": "1290385", "Tags": "<c++><c++11><constructor><copy-constructor>", "AnswerCount": "2"}, "34746546": {"Id": "34746546", "PostTypeId": "2", "Body": "<p>You can not have a copy constructor signature to accept the argument by value. The reason is simple - in order to pass parameter by value, you need to invoke copy constructor, which will require to pass parameter by value, and will invoke copy constructor... Welcome to endless recursion.</p>\n<p>Compiler is saving you a lot of trouble by not allowing this construct.</p>\n", "LastActivityDate": "2016-01-12T14:39:20.223", "CommentCount": "0", "CreationDate": "2016-01-12T14:39:20.223", "ParentId": "34746160", "Score": "10", "OwnerUserId": "5245033"}});