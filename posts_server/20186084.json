post_cb({"bq_ids": {"n4140": {"so_20186084_20186870_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 3326}}, "n3337": {"so_20186084_20186870_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 3196}}, "n4659": {"so_20186084_20186870_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 4092}}}, "20186084": {"ViewCount": "538", "Body": "<p>I like c++11 variadic templates, so I often write some little codes with it.</p>\n<p>See this example:</p>\n<pre><code>#include &lt;cstdio&gt;\n#include &lt;type_traits&gt;\n#include &lt;vector&gt;\n\ntemplate&lt; typename ... T &gt;\nauto make_vector(T ... t ) -&gt; std::vector&lt; typename std::common_type&lt;T...&gt;::type &gt;\n{\n    std::vector&lt; typename  std::common_type&lt;T...&gt;::type &gt; v;\n    v.reserve( sizeof...(T) );\n\n    using list = int[];\n    (void)list{ 0, ( (void)v.push_back(std::move(t)) ,0)... };\n    //                |/ / / /\n    //                --------\n    //                 \\-- How are evaluated v.push_back()s, sequentially or arbitrary ?\n    return v;\n}\n\nint main()\n{\n    auto v = make_vector(2, 3.0, 'a', 7UL );\n\n    for(auto e : v )\n      printf(\"%.2lf \", e);\n\n    printf(\"\\n\");\n\n}\n</code></pre>\n<p><strong>Q: Is evaluation order of initialization of array   sequentially or arbitrary (or implementation defined, undefined behavior) ?</strong></p>\n<p>If <code>make_vector</code>  is wrong, how me fix its?</p>\n", "AcceptedAnswerId": "20186870", "Title": "evaluation order initialization array in c++", "CreationDate": "2013-11-25T06:28:55.030", "Id": "20186084", "CommentCount": "3", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2013-11-25T06:34:18.750", "LastEditorUserId": "2542308", "LastActivityDate": "2013-11-25T07:36:58.027", "Score": "9", "OwnerUserId": "2542308", "Tags": "<c++><c++11><variadic-templates><array-initialization>", "AnswerCount": "1"}, "20186870": {"Id": "20186870", "PostTypeId": "2", "Body": "<p>They are evaluated sequentially. C++11 \u00a7 8.5.4 [dcl.init.list] paragraph 4:</p>\n<blockquote>\n<p id=\"so_20186084_20186870_0\">Within the <em>initializer-list</em> of a <em>braced-init-list</em>, the <em>initializer-clauses</em>, including any that result from pack\n  expansions (14.5.3), are evaluated in the order in which they appear.</p>\n</blockquote>\n<p>Given that <code>vector</code> has an <code>initializer_list</code> constructor, you could simplify your function to:</p>\n<pre><code>template &lt;typename ... T&gt;\nauto make_vector(T ... t) -&gt;\n  std::vector&lt; typename std::common_type&lt;T...&gt;::type &gt;\n{\n  return { static_cast&lt;typename std::common_type&lt;T...&gt;::type&gt;(t)... };\n}\n</code></pre>\n<p>and not have to worry about arcane initialization semantics ;)</p>\n", "LastEditorUserId": "923854", "LastActivityDate": "2013-11-25T07:36:58.027", "Score": "11", "CreationDate": "2013-11-25T07:27:21.323", "ParentId": "20186084", "CommentCount": "2", "OwnerUserId": "923854", "LastEditDate": "2013-11-25T07:36:58.027"}});