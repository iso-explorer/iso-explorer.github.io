post_cb({"9889989": {"Id": "9889989", "PostTypeId": "2", "Body": "<p><code>_FILE_</code> expands to the file name.</p>\n<p><code>_LINE_</code> expands to the line number.</p>\n<p><code>s</code> is the parameter you pass to the macro.</p>\n<p>When you write:</p>\n<pre><code>//file.cpp\n//...\nLOG_TRACE_ERROR(\"error here\"); //line 13\n</code></pre>\n<p>the preprocessor will transform it to:</p>\n<pre><code>//file.cpp\n//...\nLOG_traceError( _T(\"file.cpp\"), \"13\", \"error here\" );\n</code></pre>\n<p><code>_T()</code> is a macro related to UNICODE. If in a unicode environment, it will transform your string to a <code>wchar_t*</code>.</p>\n", "LastActivityDate": "2012-03-27T12:58:25.977", "CommentCount": "0", "CreationDate": "2012-03-27T12:58:25.977", "ParentId": "9889955", "Score": "5", "OwnerUserId": "673730"}, "9890055": {"Id": "9890055", "PostTypeId": "2", "Body": "<p><code>_FILE_</code> and <code>_LINE_</code> come from your preprocessor. A macro like this is the only way to access these values for the line where you call Log_traceError(...) if you don't want the user to type <code>_FILE_</code> and <code>_LINE_</code> every time when he calls LOG_traceError(...).</p>\n", "LastActivityDate": "2012-03-27T13:01:45.177", "CommentCount": "0", "CreationDate": "2012-03-27T13:01:45.177", "ParentId": "9889955", "Score": "0", "OwnerUserId": "915743"}, "9890208": {"Id": "9890208", "PostTypeId": "2", "Body": "<p><code>__FILE__</code> and <code>__LINE__</code>, along with <code>__DATE__</code>, <code>__TIME__</code> and a few others, are pre-defined macros first defined in the ISO/IEC 9899:1990 (C89) standard for the C programming language, section <em>\u00a76.10.8</em>:</p>\n<blockquote>\n<p id=\"so_9889955_9890208_0\"><strong>6.10.8 Prede\ufb01ned macro names</strong> </p>\n<p id=\"so_9889955_9890208_1\">The following macro names shall be de\ufb01ned by the implementation:</p>\n<p id=\"so_9889955_9890208_2\">__DATE__ The date of translation of the preprocessing translation unit: a character \n  string literal of the form \"Mmm dd yyyy\", where the names of the months are the same as \n  those generated by the asctime \n  function, and the \ufb01rst character of dd is a space character if the\n  value is less than 10. If the date of translation is not available, an\n  implementation-de\ufb01ned valid date shall be supplied.</p>\n<p id=\"so_9889955_9890208_3\">__FILE__ The presumed name of the current source \ufb01le (a character string literal).</p>\n<p id=\"so_9889955_9890208_4\">__LINE__ The presumed line number (within the current source \ufb01le) of the current source line (an integer constant).</p>\n<p id=\"so_9889955_9890208_5\">__STDC__ The integer constant 1, intended to indicate a conforming implementation.</p>\n<p id=\"so_9889955_9890208_6\">__STDC_HOSTED__ The integer constant 1 if the implementation is a hosted implementation or the integer constant 0 if it is not.</p>\n<p id=\"so_9889955_9890208_7\">__STDC_VERSION__ The integer constant 199901L.</p>\n<p id=\"so_9889955_9890208_8\">__TIME__ The time of translation of the preprocessing translation unit: a character string literal of the form \"hh:mm:ss\" as in the time\n  generated by the asctime function. If the time of translation is not\n  available, an implementation-de\ufb01ned valid time shall be supplied.</p>\n</blockquote>\n<p>Like all macros, they are evaluated by the preprocessor before your code is compiled.</p>\n", "LastActivityDate": "2012-03-27T13:11:40.303", "CommentCount": "0", "CreationDate": "2012-03-27T13:11:40.303", "ParentId": "9889955", "Score": "2", "OwnerUserId": "492901"}, "bq_ids": {"n4140": {"so_9889955_9890208_2": {"length": 26, "quality": 0.7428571428571429, "section_id": 550}, "so_9889955_9890208_4": {"length": 10, "quality": 0.7142857142857143, "section_id": 550}, "so_9889955_9890208_1": {"length": 4, "quality": 0.6666666666666666, "section_id": 550}, "so_9889955_9890208_3": {"length": 7, "quality": 0.7, "section_id": 550}, "so_9889955_9890208_8": {"length": 17, "quality": 0.7391304347826086, "section_id": 550}, "so_9889955_9890208_6": {"length": 5, "quality": 0.5555555555555556, "section_id": 550}}, "n3337": {"so_9889955_9890208_2": {"length": 26, "quality": 0.7428571428571429, "section_id": 541}, "so_9889955_9890208_4": {"length": 11, "quality": 0.7857142857142857, "section_id": 541}, "so_9889955_9890208_6": {"length": 7, "quality": 0.7777777777777778, "section_id": 541}, "so_9889955_9890208_3": {"length": 7, "quality": 0.7, "section_id": 541}, "so_9889955_9890208_5": {"length": 5, "quality": 0.625, "section_id": 542}, "so_9889955_9890208_8": {"length": 17, "quality": 0.7391304347826086, "section_id": 541}, "so_9889955_9890208_1": {"length": 4, "quality": 0.6666666666666666, "section_id": 541}}, "n4659": {"so_9889955_9890208_2": {"length": 26, "quality": 0.7428571428571429, "section_id": 571}, "so_9889955_9890208_4": {"length": 10, "quality": 0.7142857142857143, "section_id": 571}, "so_9889955_9890208_6": {"length": 5, "quality": 0.5555555555555556, "section_id": 571}, "so_9889955_9890208_3": {"length": 7, "quality": 0.7, "section_id": 571}, "so_9889955_9890208_8": {"length": 17, "quality": 0.7391304347826086, "section_id": 571}, "so_9889955_9890208_1": {"length": 4, "quality": 0.6666666666666666, "section_id": 571}}}, "9890003": {"Id": "9890003", "PostTypeId": "2", "Body": "<p><code>__FILE__</code> and <code>__LINE__</code> are internal values defined by your compiler which expand to the file being compiled and the current line (the macro is being expanded at).</p>\n<p>With macros, when you say (for example):</p>\n<pre><code>#define YOUR_MACRO(param1, param2) some_function_here(param1 + param2, 0)\n</code></pre>\n<p>you are defining a macro with two parameters <code>param1</code> and <code>param2</code> (in your case there is only one parameter and its name is <code>s</code>). You can then use those parameters in your macro definition anyway you see fit.</p>\n<p><strong>Note:</strong> you should be careful when writing macros as they can get tricky. In the example above, if you invoke:</p>\n<pre><code>YOUR_MACRO(x &lt;&lt; 2, y &lt;&lt; 2)\n</code></pre>\n<p>it would expand to:</p>\n<pre><code>some_function_here(x &lt;&lt; 2 + y &lt;&lt; 2, 0);\n</code></pre>\n<p>which is actually:</p>\n<pre><code>some_function_here(x &lt;&lt; (2 + y) &lt;&lt; 2, 0);\n</code></pre>\n<p>certainly not what you meant! Writing good macros involves a lot of parentheses and perhaps use of non-standard features of your compiler to make them safe.</p>\n", "LastActivityDate": "2012-03-27T12:59:09.883", "CommentCount": "0", "CreationDate": "2012-03-27T12:59:09.883", "ParentId": "9889955", "Score": "3", "OwnerUserId": "912144"}, "9889955": {"ViewCount": "194", "Body": "<p>I have some legacy C++ code that I am trying to understand a bit better. One issue I am getting confused with is this with a line like this:</p>\n<pre><code>#define LOG_TRACE_ERROR(s)  LOG_traceError( _T(__FILE__), __LINE__, s )\n</code></pre>\n<p>which is in a header file. I can see the <strong>LOG_TRACE_ERROR</strong> is what the code is calling and it passes it a string, and I can see that <strong>LOG_traceError</strong> is a function that actually does the work, so I assume this line is mapping the two different names for the function together? What is confusing me is why is the parameter list different (just a string for LOG_TRACE_ERROR and (_T(<strong>FILE</strong>), <strong>LINE</strong>, s ) for LOG_traceError). Also I cant find <strong>_<em>FILE</em>_</strong> or <strong>_<em>LINE</em>_</strong> or <strong>s</strong> defined anywhere so how does the program know what they are?</p>\n", "AcceptedAnswerId": "9889989", "Title": "Understanding legacy C++ #define", "CreationDate": "2012-03-27T12:56:27.920", "Id": "9889955", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2012-03-27T13:11:40.303", "Score": "0", "OwnerUserId": "678011", "Tags": "<c++><legacy>", "AnswerCount": "4"}});