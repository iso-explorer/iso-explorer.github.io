post_cb({"bq_ids": {"n4140": {"so_31751138_31751468_1": {"length": 41, "quality": 0.9761904761904762, "section_id": 269}, "so_31751138_31751468_0": {"length": 50, "quality": 1.0, "section_id": 268}}, "n3337": {"so_31751138_31751468_1": {"length": 41, "quality": 0.9761904761904762, "section_id": 260}, "so_31751138_31751468_0": {"length": 50, "quality": 1.0, "section_id": 259}}, "n4659": {"so_31751138_31751468_1": {"length": 41, "quality": 0.9761904761904762, "section_id": 276}, "so_31751138_31751468_0": {"length": 50, "quality": 1.0, "section_id": 275}}}, "31751468": {"Id": "31751468", "PostTypeId": "2", "Body": "<p>From [temp.expl.spec]:</p>\n<blockquote>\n<p id=\"so_31751138_31751468_0\">If a template, a member template or a member of a class template is explicitly specialized then that specialization\n  shall be declared <strong>before the first use of that specialization</strong> that would cause an implicit instantiation\n  to take place, <strong>in every translation unit</strong> in which such a use occurs; no diagnostic is required. If the program\n  does not provide a definition for an explicit specialization and either the specialization is used in a way\n  that would cause an implicit instantiation to take place or the member is a virtual member function, the\n  program is ill-formed, no diagnostic required.</p>\n</blockquote>\n<p>We're explicitly specializing <code>C</code> in temp.cpp, but in test.cpp, it is not declared before it is used. Thus, your code is ill-formed, no diagnostic required. You'll have to simply move the declaration of <code>C&lt;float&gt;</code> into temp.hpp</p>\n<p>Always be careful with explicit specializations. The standard takes them <em>very</em> seriously:</p>\n<blockquote>\n<p id=\"so_31751138_31751468_1\">The placement of explicit specialization declarations for function templates, class templates, [...], can affect whether a program is well-formed according\n  to the relative positioning of the explicit specialization declarations and their points of instantiation\n  in the translation unit as specified above and below. <strong>When writing a specialization, be careful about its\n  location; or to make it compile will be such a trial as to kindle its self-immolation.</strong></p>\n</blockquote>\n", "LastEditorUserId": "2069064", "LastActivityDate": "2015-07-31T17:47:36.110", "Score": "6", "CreationDate": "2015-07-31T17:00:30.237", "ParentId": "31751138", "CommentCount": "7", "OwnerUserId": "2069064", "LastEditDate": "2015-07-31T17:47:36.110"}, "31751138": {"ViewCount": "358", "Body": "<p>I'm getting consistent behavior from both gcc 4.8.3 and clang 3.2, but do not understand why it is happening. Despite the fact that I have an explicit instantiation for a class template, the code is not being generated and I get an undefined symbol when I am using a fully specialized instance of the template.</p>\n<p>I have a simple class template definition in a file 'temp.hpp'</p>\n<pre><code>#pragma once\n\ntemplate &lt;typename T1&gt;\nclass C \n{\npublic:\n  C (T1 c) : d_c(c) {};\n  ~C () = default;\n\n  void print ();\nprivate:\n  T1 d_c;\n};\n</code></pre>\n<p>Note that the method 'print()' is declared, but not defined here. I want the definition in the .cpp file and it will be specialized for different types.</p>\n<p>So in the temp.cpp file I have the default definition of the print() method</p>\n<pre><code>#include \"temp.hpp\"\n#include &lt;iostream&gt;\n\ntemplate&lt;typename T1&gt;\nvoid\nC&lt;T1&gt;::print ()\n{\n  std::cout &lt;&lt; \"Printing: \" &lt;&lt; d_c &lt;&lt; std::endl;\n}\n</code></pre>\n<p>followed by a specialization of the class for the type 'float':</p>\n<pre><code>template &lt;&gt;\nclass C &lt;float&gt;\n{\npublic:\n  C (float f) : d_f(f) {};\n  ~C () = default;\n\n  void print ()\n  {\n    std::cout &lt;&lt; \"float: \" &lt;&lt; d_f &lt;&lt; std::endl;\n  }\n\nprivate:\n  float d_f;\n};\n</code></pre>\n<p>and since the definitions are in the .cpp file I must explicitly instantiate all the specializations that I will be using. So I have:</p>\n<pre><code>template class C&lt;int&gt;;\ntemplate class C&lt;float&gt;;\n</code></pre>\n<p>The driver for my test looks like this in test.cpp:</p>\n<pre><code>#include \"temp.hpp\"\n\nint main()\n{\n  int i = 1;\n  C&lt;int&gt; c_int(i);\n\n  float f = 1.2;\n  C&lt;float&gt; c_float(f);\n\n  c_int.print();\n  c_float.print();\n}\n</code></pre>\n<p>Upon compiling and linking this I get error:</p>\n<pre><code>test.cpp: undefined reference to `C&lt;float&gt;::print()'\n</code></pre>\n<p>The object code for the C&lt; int &gt; is properly generated. I can see it using nm:</p>\n<pre><code>nm -C temp.o\n...\n0000000000000000 W C&lt;int&gt;::print()\n0000000000000000 W C&lt;int&gt;::C(int)\n0000000000000000 W C&lt;int&gt;::C(int)\n...\n</code></pre>\n<p>As I mentioned earlier, this is consistent with gcc and clang so I'm assuming there is some language rule I don't understand here.</p>\n<p>Note that if I add a usage of the print() method in file temp.cpp, then the code is generated, but that is silly and in my real code would be impossible. For this simple test case it would look like:</p>\n<pre><code>void foo () \n{\n  C&lt;float&gt; s(1.3);\n  s.print();\n}\n</code></pre>\n<p>In the real code which motivated this little test my template has 3 template arguments which combine to expand into about 30 permutations of the code. There are one or two of those for which I need a specialization which does something different, but the other 28 I can leave alone.</p>\n<p>Any pointers on where I've gone wrong or a language reference for why the explicit instantiation of  should not generate code are greatly appreciated. I've spent 1/2 a day reading all the other stackoverflow posts on explicit instantiation and believe I am using it correctly.</p>\n", "AcceptedAnswerId": "31751468", "Title": "No generated code for explicitly specialized template even with explicit instantiation", "CreationDate": "2015-07-31T16:40:03.113", "Id": "31751138", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2015-07-31T19:40:45.567", "LastEditorUserId": "2069064", "LastActivityDate": "2015-07-31T19:40:45.567", "Score": "5", "OwnerUserId": "5178460", "Tags": "<c++><templates><c++11><instantiation><specialization>", "AnswerCount": "1"}});