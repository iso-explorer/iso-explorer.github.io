post_cb({"bq_ids": {"n4140": {"so_12626414_12626698_0": {"length": 16, "quality": 0.8888888888888888, "section_id": 2466}}, "n3337": {"so_12626414_12626698_0": {"length": 16, "quality": 0.8888888888888888, "section_id": 2451}}, "n4659": {"so_12626414_12626698_0": {"length": 17, "quality": 0.9444444444444444, "section_id": 2742}}}, "12626414": {"ViewCount": "3932", "Body": "<p>In C++, is there a case where <code>std::ifstream open()</code> can be successful, but <code>std::ifstream good()</code> can be false ?</p>\n<p>EDIT : tested with g++ 4.7.1</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;fstream&gt;\nint main(int argc, char *argv[])\n{\n    std::ifstream filestream(\"testfile\");\n    std::cout&lt;&lt;filestream.good()&lt;&lt;std::endl;\n    std::cout&lt;&lt;filestream.eof()&lt;&lt;std::endl;\n    std::cout&lt;&lt;filestream.fail()&lt;&lt;std::endl;\n    std::cout&lt;&lt;filestream.bad()&lt;&lt;std::endl;\n    return 0;\n}\n</code></pre>\n<p>will return : 1, 0, 0, 0 for an empty file which means <code>good = TRUE</code> and <code>eof = fail = bad = FALSE</code>. Is it normal ?</p>\n", "AcceptedAnswerId": "12626470", "Title": "Successfully open but not good?", "CreationDate": "2012-09-27T16:55:27.947", "Id": "12626414", "CommentCount": "0", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2012-09-27T20:46:26.930", "LastEditorUserId": "882932", "LastActivityDate": "2012-10-06T10:09:06.813", "Score": "6", "OwnerUserId": "882932", "Tags": "<c++><file><stream>", "AnswerCount": "3"}, "12626470": {"Id": "12626470", "PostTypeId": "2", "Body": "<p>After verifying the actual text in the standard, I don't think <code>eofbit</code> is allowed to be set after an <code>open</code>: <code>badbit</code> may be set if the actual open throws an exception (I think\u2014the standard doesn't really say what should happen in this case); <code>failbit</code> should be set if the open fails, or if the seek after the open (if <code>ate</code> is set) fails; but there doesn't seem to be any case where <code>eofbit</code> may be set.</p>\n<p>Not that calling <code>std::istream::good()</code> is a good solution in this case.  (It would be interesting to know what the OP is trying to achieve.  Whatever it is, calling <code>std::istream::good()</code> is probably not the right solution.)</p>\n<p>If <code>std::ifstream::good()</code> returns <code>false</code>, the next input will fail.\nIf it returns <code>true</code>, it tells you nothing: the next input may succeed,\nbut it might also fail. </p>\n", "LastEditorUserId": "13005", "LastActivityDate": "2012-10-06T10:09:06.813", "Score": "3", "CreationDate": "2012-09-27T16:58:27.977", "ParentId": "12626414", "CommentCount": "4", "OwnerUserId": "649665", "LastEditDate": "2012-10-06T10:09:06.813"}, "12626451": {"Id": "12626451", "PostTypeId": "2", "Body": "<p>If the file is empty the eofbit will be triggered but the file will still be open so yes.</p>\n", "LastActivityDate": "2012-09-27T16:57:06.207", "CommentCount": "4", "CreationDate": "2012-09-27T16:57:06.207", "ParentId": "12626414", "Score": "2", "OwnerUserId": "583833"}, "12626698": {"Id": "12626698", "PostTypeId": "2", "Body": "<p><code>ifstream::open</code> returns void, so be careful exactly what you mean by saying it's \"successful\".</p>\n<p>The standard says for <code>basic_ifstream::open</code> (27.9.1.9):</p>\n<blockquote>\n<p id=\"so_12626414_12626698_0\">Effects: Calls rdbuf()-&gt;open(s, mode | ios_base::in). If that function\n  does not return a null pointer calls clear(), otherwise calls\n  setstate(failbit) (which may throw ios_base::failure)</p>\n</blockquote>\n<p>So, if the call to open on the filebuf returns a value indicating success, then <code>ifstream::open</code> clears all the error bits, and so <code>good()</code> necessarily returns true.</p>\n<p>If the call to open on the filebuf returns a value indicating failure, then <code>ifstream::open</code> can nevertheless return without throwing an exception. This behavior could be confused with \"success\", but in this case <code>good()</code> returns false because the failbit is set.</p>\n<p>It's not entirely clear to me why this sets the failbit rather than the badbit, but I don't think my lack of understanding gets in the way of reporting the facts :-)</p>\n", "LastEditorUserId": "13005", "LastActivityDate": "2012-09-27T17:20:14.637", "Score": "1", "CreationDate": "2012-09-27T17:12:03.997", "ParentId": "12626414", "CommentCount": "0", "OwnerUserId": "13005", "LastEditDate": "2012-09-27T17:20:14.637"}});