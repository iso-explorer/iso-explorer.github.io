post_cb({"bq_ids": {"n4140": {"so_9649005_9649031_2": {"length": 6, "quality": 0.8571428571428571, "section_id": 3242}, "so_9649005_9649031_1": {"length": 11, "quality": 0.6875, "section_id": 3238}}, "n3337": {"so_9649005_9649031_2": {"length": 7, "quality": 1.0, "section_id": 3115}, "so_9649005_9649031_1": {"length": 11, "quality": 0.6875, "section_id": 3111}}, "n4659": {"so_9649005_9649031_2": {"length": 6, "quality": 0.8571428571428571, "section_id": 3998}, "so_9649005_9649031_1": {"length": 11, "quality": 0.6875, "section_id": 3994}}}, "9649033": {"Id": "9649033", "PostTypeId": "2", "Body": "<p>They are the same thing. </p>\n<p>However, some prefer calling methods functions that are part of a <code>class</code>, and functions, free functions.</p>\n<pre><code>//function overloading\nvoid foo(int x);\nvoid foo(int x, int y);\n\n//method overloading\nclass A\n{\n   void foo(int x);\n   void foo(int x, int y);\n};\n</code></pre>\n<p>A method/function is overloaded by modifying the signature but keeping its name. The signature consists of:</p>\n<ul>\n<li>name</li>\n<li>parameter types</li>\n<li>cv-qualifiers</li>\n</ul>\n<p>So, to overload, you need only change the parameters or the cv-qualifiers. I.e. if the method is part of a class, you could also overload like so:</p>\n<pre><code>class A\n{\n   void foo(int x);\n   void foo(int x) const;\n   void foo(int x, int y);\n};\n</code></pre>\n<p>The prototype <code>foo(int x) const</code> will be called when operating on an immutable object.</p>\n", "LastEditorUserId": "673730", "LastActivityDate": "2012-03-10T18:35:29.863", "Score": "2", "CreationDate": "2012-03-10T18:30:00.790", "ParentId": "9649005", "CommentCount": "0", "OwnerUserId": "673730", "LastEditDate": "2012-03-10T18:35:29.863"}, "9649201": {"Id": "9649201", "PostTypeId": "2", "Body": "<p>On a general sense, functions <em>return</em> values. Methods simply <em>do</em> actions.</p>\n<p>The textbook example you'll see a lot is <code>door.open()</code> and <code>hood.open()</code> (yes, we all hate the awful car -&gt; OO analogies, but it's clear in this case). These are methods. You open the door, and there is no by-product. But, it does come down to <em>how</em> the door must be opened, versus how the hood is opened; they are similar enough to share the action, but differ in the detailed implementation (that'd you'd rightfully wish to hide from the user...doors open <strong>out</strong>, while hoods open <strong>up</strong>).</p>\n<p>Functions, however, replace the original call to the function with the value returned by the function. If I understand correctly, you might show this by measuring a <code>car.exhaust(30, 0)</code>, which returns the weight of the carbon, oxygen, and other gasses emitted in 30 seconds, travelling at 0 mph. However, a <code>car.exhaust(30, 60)</code> function would include details not used with a <code>speed</code> variable of 0, and would change the output accordingly.</p>\n<p>There are lots of examples of function overloading, this one simply demonstrates how different parameters can affect the logic and output of the function used.</p>\n", "LastActivityDate": "2012-03-10T18:53:56.460", "CommentCount": "0", "CreationDate": "2012-03-10T18:53:56.460", "ParentId": "9649005", "Score": "-1", "OwnerUserId": "881224"}, "9649005": {"ViewCount": "5626", "Body": "<p>Hi I am trying to understand the difference between function overloading and method overloading in c++. After googling I came across this. not sure if this is correct. If wrong pls help in correction. </p>\n<blockquote>\n<p id=\"so_9649005_9649005_0\">Method overloading and function overloading are related concepts. The term method overloading is defined as a feature which is found in various programming languages such as C++ and Java. It permits the creation of various functions with the same name. However all these functions differ from each other in terms of the type of input and the type of output of the function.</p>\n<p id=\"so_9649005_9649005_1\">On the other hand, the term function overloading is used in object-oriented programming. It is defined as a technique in which two or more functions which have the same name are distinguished from one another using different numbers and/or types of parameters.</p>\n</blockquote>\n<p>Source : <a href=\"http://www.blurtit.com/q662319.html\" rel=\"nofollow\">http://www.blurtit.com/q662319.html</a></p>\n", "Title": "Difference between function overloading and method overloading", "CreationDate": "2012-03-10T18:25:04.180", "LastActivityDate": "2012-03-10T19:10:51.620", "CommentCount": "5", "PostTypeId": "1", "Id": "9649005", "Score": "2", "OwnerUserId": "995487", "Tags": "<c++><c><oop><overloading>", "AnswerCount": "3"}, "9649031": {"Id": "9649031", "PostTypeId": "2", "Body": "<p>In C++ <strong>Method</strong> is usually used to refer a member function for class or structure while,<br>\n<strong>Function</strong> is a freestanding non member function.   </br></p>\n<hr>\n<p><strong>How does the standard declare a Function and Method?</strong></p>\n<p>As per the C++ standard, A function declaration is defined in:\n<strong>8.3.5 Functions   [dcl.fct]</strong> </p>\n<blockquote>\n<p id=\"so_9649005_9649031_0\">In a declaration <code>T D</code> where <code>D</code> has the form</p>\n<pre><code>D1 ( parameter-declaration-clause ) cv-qualifier-seqopt exception-specificationopt\n</code></pre>\n<p id=\"so_9649005_9649031_1\">and the type of the <code>contained declarator-id</code> in the declaration <code>T D1</code> is <em>\u201cderived-declarator-type-listT,\u201d</em> the type of the declarator-id in <code>D</code> is <em>\u201cderived-declarator-type-list function</em> of (<code>parameter-declaration-clause</code>) <code>cv-qualifier-seqopt</code> returning <code>T</code>\u201d; a type of this form is a function type86).</p>\n</blockquote>\n<p>Note that the standard further states in #4:</p>\n<blockquote>\n<p id=\"so_9649005_9649031_2\"><strong>A <code>cv-qualifier-seq</code> shall only be part of the function type for a nonstatic member function</strong></p>\n</blockquote>\n<p>To Summarize only methods(member functions) can be <code>const</code> or <code>volatile</code>. </p>\n<hr>\n<p><strong>Overloading Criteria for Function &amp; Method Overloading:</strong></p>\n<p>Thus, overloading a function and overloading a method(member function) have different criteria</p>\n<p>Function overloading is possible if and only if:</p>\n<ul>\n<li>Different number of arguments.</li>\n<li>Different sequence of arguments or </li>\n<li>Different arguments</li>\n</ul>\n<p>While method(member function) Overloading is possible if and only if:</p>\n<ul>\n<li>Different number of arguments.</li>\n<li>Different sequence of arguments or </li>\n<li>Different arguments or </li>\n<li>Different <code>cv-qualifer-seq</code></li>\n</ul>\n<hr>\n<p>Note that Return type is not a criteria for overloading. Because C++ allows implementations to ignore the return value from functions/methods.</p>\n<hr>\n<p><strong>Code Examples:</strong> </p>\n<p><strong>Function Overloading:</strong> </p>\n<pre><code>void doSomething(int i);\nvoid doSomething(std::string,int x);\n</code></pre>\n<p><strong>Method Overloading:</strong> </p>\n<pre><code>class Myclass\n{\n     public:\n           void doSomething(int i);\n           void doSomething(std::string,int x);\n           void doSomething(int i) const;\n           void doSomething(int i) volatile;\n};\n</code></pre>\n<p>Above is an example of how <code>doSomething()</code> can be overloaded as a free standing function and as a method/member function.</p>\n</hr></hr></hr></hr>", "LastEditorUserId": "452307", "LastActivityDate": "2012-03-10T19:10:51.620", "Score": "4", "CreationDate": "2012-03-10T18:29:50.190", "ParentId": "9649005", "CommentCount": "3", "OwnerUserId": "452307", "LastEditDate": "2012-03-10T19:10:51.620"}});