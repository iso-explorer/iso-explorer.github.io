post_cb({"25465703": {"ViewCount": "145", "Body": "<p>I am reading on C++11 and I had the following question. Suppose I have the following rough code</p>\n<pre><code>class foo\n{\npublic:\n    foo()\n    {std::cout &lt;&lt; \"Regular constructor \\n\";}\n\n    foo(const foo&amp; a) \n    {std::cout &lt;&lt; \"Copy constructor \\n\";}\n\n    foo&amp; operator=(const foo&amp; a) \n    {std::cout &lt;&lt; \"Copy Assignment operator \\n\";}\n\n    foo(foo&amp;&amp; a)\n    {\n        std::cout &lt;&lt; \"Move constructor \\n\";\n    }\n\n    foo&amp; operator=(foo&amp;&amp; a) \n    {std::cout &lt;&lt; \"Move Assignment operator \\n\";}\n\n    int a;\n};\n\n\nfoo myfunction()\n{\n    foo d;\n    d.a =120;\n    return d;\n}\n</code></pre>\n<p>Now if I do something like this</p>\n<pre><code>foo a = myfunction();\n</code></pre>\n<p>I know that the move constructor will be called since myfunction() returns an rvalue type.\nNow I noticed that if I remove the move constructor code from my class then the copy constructor is called. My question is why does that happen ? If the return type of myfunction is foo&amp;&amp; and copy constructor takes in a foo&amp; then why is the copy constructor being called ? I am using Vs2012.</p>\n", "AcceptedAnswerId": "25465763", "Title": "In abscence of move constructor the copy constructor is called ? Why is that?", "CreationDate": "2014-08-23T19:36:00.483", "Id": "25465703", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2014-08-23T19:41:57.327", "LastEditorUserId": "1305891", "LastActivityDate": "2014-08-23T19:52:11.467", "Score": "2", "OwnerUserId": "1305891", "Tags": "<c++><c++11><move-constructor>", "AnswerCount": "2"}, "25465753": {"Id": "25465753", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_25465703_25465753_0\">If the return type of myfunction is <code>foo&amp;&amp;</code></p>\n</blockquote>\n<p>But it isn't! The return type is <code>foo</code>. And <code>const foo&amp;</code> happily binds to a <code>foo</code> rvalue.</p>\n<p>Hint: \"rvalue\" and \"rvalue reference\" are two related, but distinct concepts. (Remember that C++ already had rvalues for decades before rvalue references were introduced into the language.)</p>\n", "LastActivityDate": "2014-08-23T19:45:21.403", "CommentCount": "3", "CreationDate": "2014-08-23T19:45:21.403", "ParentId": "25465703", "Score": "7", "OwnerUserId": "252000"}, "bq_ids": {"n4140": {"so_25465703_25465763_0": {"length": 12, "quality": 1.0, "section_id": 458}, "so_25465703_25465763_1": {"length": 21, "quality": 1.0, "section_id": 458}, "so_25465703_25465763_2": {"length": 21, "quality": 1.0, "section_id": 458}}, "n3337": {"so_25465703_25465763_0": {"length": 12, "quality": 1.0, "section_id": 449}, "so_25465703_25465763_2": {"length": 21, "quality": 1.0, "section_id": 449}, "so_25465703_25465763_1": {"length": 21, "quality": 1.0, "section_id": 449}}, "n4659": {"so_25465703_25465763_0": {"length": 12, "quality": 1.0, "section_id": 481}, "so_25465703_25465763_2": {"length": 21, "quality": 1.0, "section_id": 481}, "so_25465703_25465763_1": {"length": 21, "quality": 1.0, "section_id": 481}}}, "25465763": {"Id": "25465763", "PostTypeId": "2", "Body": "<p>Per paragraph \u00a712.8/9 of the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_25465703_25465763_0\">If the definition of a class <code>X</code> does not explicitly declare a move constructor, one will be implicitly declared as defaulted if and only if</p>\n<blockquote>\n<p id=\"so_25465703_25465763_2\">\u2014 <strong><code>X</code> does not have a user-declared copy constructor,</strong><br>\n    \u2014 <code>X</code> does not have a user-declared copy assignment operator,<br>\n    \u2014 <code>X</code> does not have a user-declared move assignment operator, and<br>\n    \u2014 <code>X</code> does not have a user-declared destructor.</br></br></br></p>\n</blockquote>\n</blockquote>\n<p>Since you have a user-declared copy-constructor, the move-constructor is inaccessible and it falls back to invoking the copy-constructor.</p>\n<blockquote>\n<p id=\"so_25465703_25465763_3\">If the return type of <code>myfunction</code> is <code>foo&amp;&amp;</code> and copy constructor takes in a <code>foo&amp;</code> then why is the copy constructor being called?</p>\n</blockquote>\n<p>Two things wrong here: <code>myfunction</code> returns a <code>foo</code> by value, not a <code>foo&amp;&amp;</code>. Furthermore, your constructor takes <code>const foo&amp;</code> which can in fact bind to rvalues  (which is not what's happening here).</p>\n", "LastEditorUserId": "701092", "LastActivityDate": "2014-08-23T19:52:11.467", "Score": "4", "CreationDate": "2014-08-23T19:46:35.383", "ParentId": "25465703", "CommentCount": "7", "OwnerUserId": "701092", "LastEditDate": "2014-08-23T19:52:11.467"}});