post_cb({"14425188": {"CreationDate": "2013-01-20T13:55:19.350", "ViewCount": "951", "FavoriteCount": "1", "Id": "14425188", "Score": "0", "Title": "C++: anything wrong with the following code?", "LastEditorUserId": "809230", "CommentCount": "0", "Body": "<p>I got the the following code:</p>\n<pre><code>T *p = new T[10];\ndelete p;\n</code></pre>\n<p>It should be delete [] p, I think. I tried it on T=int type, no error. Then I created a simple class, exception. Any clear explanation?</p>\n<pre><code>T *p = 0;\ndelete p;\n</code></pre>\n<p>What's wrong with them? [I looked it up, it seems that although delete p will lead to error, but program resume because compiler thinks p==0 in the first place, so this error does not matter.]</p>\n", "Tags": "<c++><templates><pointers><memory-management><memory-leaks>", "LastEditDate": "2013-01-20T14:02:42.410", "LastActivityDate": "2013-01-20T15:52:26.667", "PostTypeId": "1", "AnswerCount": "2", "OwnerUserId": "1866880"}, "bq_ids": {"n4140": {"so_14425188_14425206_1": {"length": 61, "quality": 0.9838709677419355, "section_id": 7182}}, "n3337": {"so_14425188_14425206_1": {"length": 61, "quality": 0.9838709677419355, "section_id": 6926}}}, "14425206": {"LastActivityDate": "2013-01-20T15:52:26.667", "CommentCount": "0", "Body": "<p>Yes,<br>\nYou should call  <code>delete [] p;</code> </br></p>\n<blockquote>\n<p id=\"so_14425188_14425206_0\"><strong>Any clear explanation?</strong></p>\n</blockquote>\n<p>It is undefined behavior to:      </p>\n<ul>\n<li>Call <code>delete</code> if allocation was through <code>new []</code> </li>\n<li>Call <code>delete</code> on non dynamically allocated pointer.</li>\n</ul>\n<p>Note that <strong>Undefined Behavior</strong> means that anything can happen, it does not mandate a crash. It simply means your program can show any behavior(including working as expected).</p>\n<p>It is perfectly valid to call <code>delete</code> on a <code>NULL</code> pointer. The standard allows that. The <code>delete</code> operator internally takes core of that, the caller does not have to bother about the <code>NULL</code> check.</p>\n<hr>\n<p><strong>References:</strong> </p>\n<p><strong>C++03 standard \u00a73.7.4.2-3:</strong></p>\n<blockquote>\n<p id=\"so_14425188_14425206_1\"><em>If a deallocation function terminates by throwing an exception, the behavior is undefined. The value of the first argument supplied to a deallocation function may be a null pointer value; if so, and if the deallocation function is one supplied in the standard library, the call has no effect. Otherwise, the value supplied\n  to operator <code>delete(void*)</code> in the standard library shall be one of the values returned by a previous invocation of either operator <code>new(std::size_t)</code> or <code>operator new(std::size_t, const std::nothrow_-t&amp;)</code> in the standard library, and the value supplied to operator <code>delete[](void*)</code> in the standard library shall be one of the values returned by a previous invocation of either <code>operator new[](std::size_t)</code> or\n  <code>operator new[](std::size_t, const std::nothrow_t&amp;)</code> in the standard library.</em></p>\n</blockquote>\n</hr>", "CreationDate": "2013-01-20T13:56:49.150", "LastEditDate": "2013-01-20T15:52:26.667", "ParentId": "14425188", "Id": "14425206", "LastEditorUserId": "452307", "PostTypeId": "2", "Score": "5", "OwnerUserId": "452307"}, "14425227": {"LastActivityDate": "2013-01-20T14:34:37.040", "CommentCount": "2", "Body": "<p>When you allocate an array of objects with <code>new[]</code>, you must delete it with <code>delete[]</code>. Failing to do so results in <strong>Undefined Behavior</strong>. </p>\n<p>The main behavioral difference between <code>delete</code> and <code>delete[]</code> is that the latter, apart from deallocating the memory, also invokes the destructor of each object in the array.</p>\n<p>Considering your second point:</p>\n<pre><code>T *p = 0;\ndelete p;\n</code></pre>\n<p>This will not cause an error, but rather do nothing, because that's the expected behavior of <code>delete</code> when the pointer is null.</p>\n", "CreationDate": "2013-01-20T13:59:57.997", "LastEditDate": "2013-01-20T14:34:37.040", "ParentId": "14425188", "Id": "14425227", "LastEditorUserId": "1932150", "PostTypeId": "2", "Score": "1", "OwnerUserId": "1932150"}});