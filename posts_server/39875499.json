post_cb({"39875499": {"CommentCount": "3", "AcceptedAnswerId": "39875640", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2016-10-05T13:35:39.673", "LastActivityDate": "2016-10-05T14:13:21.143", "LastEditDate": "2017-05-23T11:59:58.680", "ViewCount": "161", "FavoriteCount": "1", "Title": "Friend class, inheritance and typedef -- which behavior is correct?", "Id": "39875499", "Score": "8", "Body": "<p>I've stumbled upon an error which manifestates itself only on GCC 6.2.0, but not on Clang 3.9.0 (both in <code>-std=c++14</code> mode). I'm unsure which behavior is correct (and whether I should file a bug).</p>\n<p>Here's the code:</p>\n<pre class=\"lang-cpp prettyprint-override\"><code>template&lt;typename type_t&gt;\nclass foo_t\n{\n};\n\nclass bar_t\n{\npublic:\n    using foo_t = int;\n};\n\nclass baz_t:\n    public bar_t\n{\nprivate:\n    template&lt;typename type_t&gt;\n    friend class foo_t;\n};\n</code></pre>\n<p>On GCC this gives the following error:</p>\n<pre><code>test.cpp:17:15: error: using typedef-name \u2018using foo_t = int\u2019 after \u2018class\u2019\n  friend class foo_t;\n               ^~~~~\ntest.cpp:9:19: note: \u2018using foo_t = int\u2019 has a previous declaration here\n  using foo_t = int;\n                   ^\n</code></pre>\n<p>From what I know of C++ standard, parent <code>typedef</code>'s (or <code>using</code>s) should not leak into scope of the child and you need to explicitly qualify the name: see for example <a href=\"https://stackoverflow.com/questions/1643035/propagating-typedef-from-based-to-derived-class-for-template\">Propagating 'typedef' from based to derived class for 'template'</a>. So it seems to me that GCC is incorrect here, but I'm not so sure of my C++ knowledge to say with confidence.</p>\n<p>Thanks for any help!</p>\n", "Tags": "<c++><gcc><clang>", "OwnerUserId": "6926586", "AnswerCount": "2"}, "39875640": {"ParentId": "39875499", "PostTypeId": "2", "CommentCount": "6", "CreationDate": "2016-10-05T13:42:08.740", "Score": "4", "LastEditorUserId": "1782465", "LastEditDate": "2016-10-05T14:13:21.143", "Id": "39875640", "OwnerUserId": "1782465", "Body": "<blockquote>\n<p id=\"so_39875499_39875640_0\">From what I know of C++ standard, parent <code>typedef</code>'s (or <code>using</code>s) should not leak into scope of the child and you need to explicitly qualify the name</p>\n</blockquote>\n<p>That is incorrect. Members (including type aliases) declared in base classes are visible in derived classes normally. The question you linked to specifically deals with templates with a dependent base class, where two-phase name lookup applies (and again, applies to everything, not just type aliases).</p>\n<p>This aside, the relevant part of the standard is C++14 (N4140) [dcl.type.elab] 7.1.6.3/2 (emphasis mine):</p>\n<blockquote>\n<p id=\"so_39875499_39875640_1\">3.4.4 describes how name lookup proceeds for the <em>identifier</em> in an <em>elaborated-type-specifier.</em> If the <em>identifier</em>\n  resolves to a <em>class-name</em> or <em>enum-name,</em> the <em>elaborated-type-specifier</em> introduces it into the declaration the\n  same way a <em>simple-type-specifier</em> introduces its <em>type-name.</em> <strong>If the <em>identifier</em> resolves to a <em>typedef-name</em> or\n  the <em>simple-template-id</em> resolves to an alias template specialization, the <em>elaborated-type-specifier</em> is ill-formed.</strong></p>\n</blockquote>\n<p>(Note: <em>elaborated-type-specifier</em> is the construct <code>class T</code> for some <code>T</code> that we're dealing with).</p>\n<p>3.4.4, in turn, says that when resolving the identifier in an elaborated-type-specifier into a name, non-type names are ignored (but type names are found normally).</p>\n<p>GCC is therefore actually right, since the typedef-name <code>foo_t</code> in scope <code>bar_t</code> is \"closer\" in scope than the global-scope template-name <code>foo_t</code>. The unqualified name <code>foo_t</code> inside <code>baz_t</code> therefore resolves to <code>bar_t::foo_t</code>, which is a <em>typedef-name</em> and therefore makes the elaborated-type-specifier ill-formed.</p>\n<p>The problem is with the resolution of the <strong>unqualified</strong> name <code>foo_t</code>. As you note yourself in comments to the question, explicitly stating which <code>foo_t</code> you mean should solve the issue:</p>\n<pre><code>tempalte &lt;typename type_t&gt;\nfriend class ::foo_t;\n</code></pre>\n", "LastActivityDate": "2016-10-05T14:13:21.143"}, "39876028": {"ParentId": "39875499", "CommentCount": "1", "CreationDate": "2016-10-05T13:58:58.270", "OwnerUserId": "5405790", "PostTypeId": "2", "Id": "39876028", "Score": "1", "Body": "<p>Members' declaration DO visible to its subclass. The problem for your question is about duplicate declaration. Please check the following code</p>\n<pre><code>template&lt;typename type_t&gt;\nclass foo_t\n{\n};\n\nclass bar_t\n{\npublic:\n    using foo_t = int;\n};\n\nclass baz_t :\n    public bar_t\n{\npublic:\n    foo_t val; // Here, the foo_t refers to the int\n};\n\nint main()\n{\n    baz_t().val; // this works\n}\n</code></pre>\n<p>The error code you post <code>test.cpp:9:19: note: \u2018using foo_t = int\u2019 has a previous declaration here</code> already mentioned this problem.</p>\n<hr>\n<p>On the other hands, friend class cannot be applied to simple data type, please check the following code:</p>\n<pre><code>using foo_t = int;\n\nclass bar_t\n{\npublic:\n\n};\n\nclass baz_t :\n    public bar_t\n{\npublic:\n    template&lt;typename type_t&gt;\n    friend class foo_t; \n    //error: using typedef-name \u2018using foo_t = int\u2019 after \u2018class\u2019\n};\n</code></pre>\n<hr>\n<p>Here is the workaround if you really need to have the duplicated name of declaration:</p>\n<pre><code>template&lt;typename type_t&gt;\nclass foo_t\n{\n};\n\nclass bar_t\n{\npublic:\n    using foo_t = int;\n};\n\nclass baz_t:\n    public bar_t\n{\npublic:\n    template&lt;typename type_t&gt;\n    friend class ::foo_t;   // The global scope\n\n    foo_t val; // The int\n};\n</code></pre>\n</hr></hr>", "LastActivityDate": "2016-10-05T13:58:58.270"}, "bq_ids": {"n4140": {"so_39875499_39875640_1": {"section_id": 5443, "quality": 0.96875, "length": 31}}, "n3337": {"so_39875499_39875640_1": {"section_id": 5238, "quality": 0.96875, "length": 31}}, "n4659": {"so_39875499_39875640_1": {"section_id": 6870, "quality": 0.96875, "length": 31}}}});