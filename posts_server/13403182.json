post_cb({"13403216": {"ParentId": "13403182", "PostTypeId": "2", "CommentCount": "9", "CreationDate": "2012-11-15T17:45:37.360", "Score": "10", "LastEditorUserId": "251153", "LastEditDate": "2014-05-22T19:46:49.750", "Id": "13403216", "OwnerUserId": "251153", "Body": "<p>You cannot change the associativity or priority of an operator in C++ by overloading it. These rules are hardwired into the language syntax.</p>\n<p>The C++ standard says (\u00a713.5.6, emphasis mine):</p>\n<blockquote>\n<p id=\"so_13403182_13403216_0\">An operator function shall either be a non-static member function or be a non-member function and have\n  at least one parameter whose type is a class, a reference to a class, an enumeration, or a reference to an\n  enumeration. <strong>It is not possible to change the precedence, grouping, or number of operands of operators.</strong>\n  The meaning of the operators =, (unary) &amp;, and , (comma), prede\ufb01ned for each type, can be changed [...]</p>\n</blockquote>\n<p>Not only is the <code>^</code> operator left-associative, but <a href=\"http://en.cppreference.com/w/cpp/language/operator_precedence\" rel=\"nofollow noreferrer\">it also has a very low precedence</a>. The correct precedence for a power operator should be higher than the multiplication (so priority 4 or better on this table), but it has priority 10--this means that even additions and subtractions are evaluated before it. <code>1 + 2 ^ 3 * 4</code> will be parsed as <code>(1 + 2) ^ (3 * 4)</code>, while a mathematically correct power operator should parse as <code>1 + (2 ^ 3) * 4</code>.</p>\n<p>If the associativity or priority of an operator could be modified, a huge, huge syntactical mess would ensue. My humble opinion is that you should not try to overload the <code>^</code> operator to use it as a power operator. I would rather make a <code>power</code> method on the class.</p>\n", "LastActivityDate": "2014-05-22T19:46:49.750"}, "13403182": {"CommentCount": "5", "ViewCount": "1107", "PostTypeId": "1", "LastEditorUserId": "1673391", "CreationDate": "2012-11-15T17:42:42.183", "LastActivityDate": "2014-05-22T19:46:49.750", "Title": "Overload power with correctly in c++?", "AcceptedAnswerId": "13403216", "LastEditDate": "2012-11-15T18:56:15.503", "Id": "13403182", "Score": "3", "Body": "<p>In c++ I implemented an <code>integer</code> class and I overloaded <code>operator ^</code> to be the power  function.</p>\n<pre><code>integer integer::operator^ (const integer&amp; rhs){\n       return integer(pow(this-&gt;.i, rhs.i));\n}\n</code></pre>\n<p>This is working correctly for two operands.   </p>\n<pre><code>integer i1, i2, i3 ;   \n i4 = i1 ^ i2 ^ i3;  \n</code></pre>\n<p>The value of <code>i4</code> is wrong mathematically because associativity required right-to-left. How can I solve this problem? How do I change associativity?     </p>\n<p><strong>I got reasonable answers and I learn:</strong> </p>\n<pre><code>-We can't change  associativity or priority of an operator.   \n-Good is Not to overload operators to do something conceptually different to \n the built-in versions  \n-Even compiler can't support; it hard to implement!  \n</code></pre>\n", "Tags": "<c++><operators><operator-overloading><xor>", "OwnerUserId": "1673391", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_13403182_13403216_0": {"section_id": 653, "quality": 0.918918918918919, "length": 34}}, "n3337": {"so_13403182_13403216_0": {"section_id": 643, "quality": 0.9459459459459459, "length": 35}}, "n4659": {"so_13403182_13403216_0": {"section_id": 681, "quality": 0.918918918918919, "length": 34}}}});