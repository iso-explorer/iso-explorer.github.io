post_cb({"7801370": {"ParentId": "7801228", "CommentCount": "2", "CreationDate": "2011-10-18T01:01:16.187", "OwnerUserId": "576911", "PostTypeId": "2", "Id": "7801370", "Score": "9", "Body": "<pre><code>$ clang++ -std=c++0x test.cpp\ntest.cpp:6:1: error: explicit specialization of alias templates is not permitted\ntemplate &lt;&gt;\n^~~~~~~~~~~\n1 error generated.\n</code></pre>\n<p>Reference: 14.1 [temp.decls]/p3:</p>\n<blockquote>\n<p id=\"so_7801228_7801370_0\">3 Because an alias-declaration cannot declare a template-id, it is not\n  possible to partially or explicitly specialize an alias template.</p>\n</blockquote>\n", "LastActivityDate": "2011-10-18T01:01:16.187"}, "7801350": {"ParentId": "7801228", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2011-10-18T00:58:30.377", "Score": "7", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:16:33.530", "Id": "7801350", "OwnerUserId": "46642", "Body": "<p>According to \u00a714.7.3/1 of the standard (also referred to in this <a href=\"https://stackoverflow.com/questions/6622452/alias-template-specialisation/6622494#6622494\">other answer</a>), aliases are not allowed as explicit specializations :(</p>\n<blockquote>\n<p id=\"so_7801228_7801350_0\">An explicit specialization of any of the following:</p>\n<ul>\n<li>function template</li>\n<li>class template</li>\n<li>member function of a class template </li>\n<li>static data member of a class template</li>\n<li>member class of a class template</li>\n<li>member class template of a class or class template</li>\n<li>member function template of a class or class template</li>\n</ul>\n<p id=\"so_7801228_7801350_1\">can be declared[...]</p>\n</blockquote>\n", "LastActivityDate": "2011-10-18T00:58:30.377"}, "7801228": {"CommentCount": "8", "AcceptedAnswerId": "7801370", "PostTypeId": "1", "LastEditorUserId": "46642", "CreationDate": "2011-10-18T00:38:23.787", "LastActivityDate": "2012-03-19T11:38:15.413", "LastEditDate": "2011-10-18T00:48:41.457", "ViewCount": "2115", "FavoriteCount": "4", "Title": "Can I specialize a class template with an alias template?", "Id": "7801228", "Score": "9", "Body": "<p>Here's a simple example:</p>\n<pre><code>class bar {};\n\ntemplate &lt;typename&gt;\nclass foo {};\n\ntemplate &lt;&gt;\nusing foo&lt;int&gt; = bar;\n</code></pre>\n<p>Is this allowed?</p>\n", "Tags": "<c++><c++11><template-specialization><template-aliases>", "OwnerUserId": "46642", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_7801228_7801370_0": {"section_id": 99, "quality": 1.0, "length": 11}}, "n3337": {"so_7801228_7801370_0": {"section_id": 94, "quality": 1.0, "length": 11}}, "n4659": {"so_7801228_7801370_0": {"section_id": 103, "quality": 1.0, "length": 11}}}, "9769458": {"ParentId": "7801228", "CommentCount": "3", "CreationDate": "2012-03-19T11:38:15.413", "OwnerUserId": "1195768", "PostTypeId": "2", "Id": "9769458", "Score": "7", "Body": "<p>Although direct specialization of the alias is impossible, here is a workaround.\n(I know this is an old post but it's a useful one.)</p>\n<p>You can create a template struct with a typedef member, and specialize the struct.\nYou can then create an alias that refers to the typedef member.</p>\n<pre><code>template &lt;typename T&gt;\nstruct foobase {};\n\ntemplate &lt;typename T&gt;\nstruct footype\n  { typedef foobase&lt;T&gt; type; };\n\nstruct bar {};\n\ntemplate &lt;&gt;\nstruct footype&lt;int&gt;\n  { typedef bar type; };\n\ntemplate &lt;typename T&gt;\nusing foo = typename footype::type;\n\nfoo&lt;int&gt; x; // x is a bar.\n</code></pre>\n<p>This lets you specialize foo indirectly by specializing footype.</p>\n<p>You could even tidy it up further by inheriting from a remote class that automatically provides the typedef. However, some may find this more of a hassle. Personally, I like it.</p>\n<pre><code>template &lt;typename T&gt;\nstruct remote\n  { typedef T type; };\n\ntemplate &lt;&gt;\nstruct footype&lt;float&gt; :\n  remote&lt;bar&gt; {};\n\nfoo&lt;float&gt; y; // y is a bar.\n</code></pre>\n", "LastActivityDate": "2012-03-19T11:38:15.413"}});