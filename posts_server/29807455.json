post_cb({"bq_ids": {"n4140": {"so_29807455_29807455_0": {"length": 4, "quality": 0.5714285714285714, "section_id": 300}}, "n3337": {"so_29807455_29807455_0": {"length": 4, "quality": 0.5714285714285714, "section_id": 291}}, "n4659": {"so_29807455_29807455_0": {"length": 4, "quality": 0.5714285714285714, "section_id": 307}}}, "29809783": {"Id": "29809783", "PostTypeId": "2", "Body": "<p>Prefer <code>unique_ptr&lt;T[]&gt;</code> if you can, because you get <code>operator[]</code> for free (\u00a7 20.7.1.3.3):</p>\n<p><img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/gTXcJ.png\"/></p>\n<p>Quick demo:</p>\n<p><strong><kbd><a href=\"http://coliru.stacked-crooked.com/a/ec08b974e5006b5d\" rel=\"nofollow noreferrer\">Live On Coliru</a></kbd></strong></p>\n<pre><code>#include &lt;memory&gt;\n#include &lt;iostream&gt;\n\nint main() {\n    std::unique_ptr&lt;int[]&gt; p(new int[3] { 1,2,3 });\n\n    std::cout &lt;&lt; \"Before: \" &lt;&lt; p[0] &lt;&lt; \", \" &lt;&lt; p[1] &lt;&lt; \", \" &lt;&lt; p[2] &lt;&lt; \";\\n\";\n    p[1] = 42;\n    std::cout &lt;&lt; \"After:  \" &lt;&lt; p[0] &lt;&lt; \", \" &lt;&lt; p[1] &lt;&lt; \", \" &lt;&lt; p[2] &lt;&lt; \";\\n\";\n}\n</code></pre>\n<p>Prints:</p>\n<pre><code>Before: 1, 2, 3;\nAfter:  1, 42, 3;\n</code></pre>\n<h1>UPDATE</h1>\n<p>In response to the comment, just make a small wrapper:</p>\n<p><strong><kbd><a href=\"http://coliru.stacked-crooked.com/a/58007b98bdacfe47\" rel=\"nofollow noreferrer\">Live On Coliru</a></kbd></strong></p>\n<pre><code>#include &lt;memory&gt;\n\ntemplate &lt;typename RAContainer&gt; struct shared_randomaccess_container\n{\n    template &lt;typename... A&gt; shared_randomaccess_container(A&amp;&amp;... args) \n        : _ptr(new RAContainer{ std::forward&lt;A&gt;(args)... })\n    { }\n    template &lt;typename T&gt; shared_randomaccess_container(std::initializer_list&lt;T&gt; init)\n        : _ptr(std::make_shared&lt;RAContainer&gt;(init))\n    { }\n\n    auto begin() const -&gt; typename RAContainer::const_iterator { return _ptr-&gt;begin(); }\n    auto end  () const -&gt; typename RAContainer::const_iterator { return _ptr-&gt;end  (); }\n    auto begin()       -&gt; typename RAContainer::iterator       { return _ptr-&gt;begin(); }\n    auto end  ()       -&gt; typename RAContainer::iterator       { return _ptr-&gt;end  (); }\n\n    template &lt;typename Idx&gt;\n    typename RAContainer::value_type const&amp; operator[](Idx i) const { return (*_ptr)[i]; }\n    template &lt;typename Idx&gt;\n    typename RAContainer::value_type&amp; operator[](Idx i) { return (*_ptr)[i]; }\n\n    template &lt;typename Idx&gt;\n    typename RAContainer::value_type const&amp; at(Idx i) const { return _ptr-&gt;at(i); }\n    template &lt;typename Idx&gt;\n    typename RAContainer::value_type&amp; at(Idx i) { return _ptr-&gt;at(i); }\n\n  protected:\n    using Ptr = std::shared_ptr&lt;RAContainer&gt;;\n    Ptr _ptr;\n};\n\n////////////////////////////////////////////////////\n// demo intances\n#include &lt;vector&gt;\n\ntemplate &lt;typename... Ts&gt; using shared_vector = shared_randomaccess_container&lt;std::vector&lt;Ts...&gt; &gt;;\n</code></pre>\n<p>You can use it like:</p>\n<pre><code>shared_vector&lt;int&gt; sv {1,2,3};\n\nstd::cout &lt;&lt; \"Before: \";\nfor (auto i : sv) std::cout &lt;&lt; i &lt;&lt; \" \";\n\nsv[1] = 42;\nstd::cout &lt;&lt; \"\\nAfter:  \";\nfor (auto i : sv) std::cout &lt;&lt; i &lt;&lt; \" \";\n</code></pre>\n<p>Prints:</p>\n<pre><code>Before: 1 2 3 \nAfter:  1 42 3 \n</code></pre>\n<hr>\n<h2>Bonus</h2>\n<p>Let's also support aggregate initializing containers with the same technique</p>\n<p><strong><kbd><a href=\"http://coliru.stacked-crooked.com/a/e035859266a13a1f\" rel=\"nofollow noreferrer\">Live On Coliru</a></kbd></strong></p>\n<p>Output:</p>\n<pre><code>void test() [with With = std::vector&lt;int&gt;]\nBefore: 1 2 3 \nAfter:  1 42 3 \n\nvoid test() [with With = std::array&lt;int, 3ul&gt;]\nBefore: 1 2 3 \nAfter:  1 42 3 \n\nvoid test() [with With = shared_randomaccess_container&lt;std::vector&lt;int&gt;, false&gt;]\nBefore: 1 2 3 \nAfter:  1 42 3 \n\nvoid test() [with With = shared_randomaccess_container&lt;std::array&lt;int, 3ul&gt;, true&gt;]\nBefore: 1 2 3 \nAfter:  1 42 3 \n</code></pre>\n</hr>", "LastEditorUserId": "85371", "LastActivityDate": "2015-04-23T09:29:51.193", "Score": "2", "CreationDate": "2015-04-22T22:06:28.377", "ParentId": "29807455", "CommentCount": "5", "OwnerUserId": "85371", "LastEditDate": "2015-04-23T09:29:51.193"}, "29807455": {"ViewCount": "291", "Body": "<p>I have a struct that looks like this.</p>\n<pre><code>typedef struct superCellBoxStruct {\n    float_tt cmx,cmy,cmz;  /* fractional center of mass coordinates */\n    float_tt ax,by,cz;\n    boost::shared_ptr&lt;std::vector&lt;atom&gt;&gt; atoms; /* contains all the atoms within the super cell */\n} superCellBox;\n</code></pre>\n<p>now when I want to access <code>atoms[i]</code> I get </p>\n<blockquote>\n<p id=\"so_29807455_29807455_0\">error: invalid use of \u2018boost::detail::sp_array_access &gt;::type {aka void}\u2019</p>\n</blockquote>\n<p>What is the proper way of passing around a shared vector in my application, or what is the correct way to access its operator[]?</p>\n", "AcceptedAnswerId": "29809783", "Title": "boost::shared_ptr<std::vector<something>> usage of operator[]", "CreationDate": "2015-04-22T19:49:37.967", "Id": "29807455", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2015-04-23T09:29:51.193", "Score": "1", "OwnerUserId": "1068019", "Tags": "<c++11><boost>", "AnswerCount": "2"}, "29807562": {"Id": "29807562", "PostTypeId": "2", "Body": "<p>Pick one:</p>\n<pre><code>(*atoms)[i]    \natoms-&gt;operator[](i);\n</code></pre>\n<p>I usually go with the first, but they are all equivalent.</p>\n<p>As a side note, in my experience a <code>shared_ptr&lt;vector&gt;</code> like that is usually a symptom of a bad design, maybe you want to put the entire <code>superCellBox</code> in a <code>shared_ptr</code>?</p>\n<p>Also, this is not C, use <code>struct name {};</code> instead <code>typedef struct tagName {} name;</code> </p>\n", "LastActivityDate": "2015-04-22T19:56:11.063", "CommentCount": "1", "CreationDate": "2015-04-22T19:56:11.063", "ParentId": "29807455", "Score": "3", "OwnerUserId": "666785"}});