post_cb({"5973670": {"ParentId": "5973427", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Actually the C++ standard (i.e. <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3242.pdf\" rel=\"nofollow\">C++ 0x draft</a>) says (tnx to @Xeo &amp; @Ben Voigt for pointing that out to me):</p>\n<blockquote>\n<p id=\"so_5973427_5973670_0\"><strong>23.2.4</strong> Associative containers<br>\n<strong>5</strong> For set and multiset the value type\n  is the same as the key type. For map\n  and multimap it is equal to pair. Keys in an associative\n  container are immutable.<br>\n<strong>6</strong> iterator of\n  an associative container is of the\n  bidirectional iterator category. For\n  associative containers where the value\n  type is the same as the key type, both\n  iterator and const_iterator are\n  constant iterators. It is unspecified\n  whether or not iterator and\n  const_iterator are the same type.</br></br></p>\n</blockquote>\n<p>So VC++ 2008 Dinkumware implementation is faulty.</p>\n<hr>\n<p><strong>Old answer:</strong></p>\n<p>You got that error because in certain implementations of the std lib the <code>set::iterator</code> is the same as <code>set::const_iterator</code>.  </p>\n<p>For example libstdc++ (shipped with g++) has it (see <a href=\"http://gcc.gnu.org/onlinedocs/libstdc++/latest-doxygen/a01063_source.html#l00126\" rel=\"nofollow\">here</a> for the entire source code):</p>\n<pre><code>typedef typename _Rep_type::const_iterator            iterator;\ntypedef typename _Rep_type::const_iterator            const_iterator;\n</code></pre>\n<p>And in SGI's <a href=\"http://www.sgi.com/tech/stl/set.html\" rel=\"nofollow\">docs</a> it states:</p>\n<pre><code>iterator       Container  Iterator used to iterate through a set.\nconst_iterator Container  Const iterator used to iterate through a set. (Iterator and const_iterator are the same type.)\n</code></pre>\n<p>On the other hand VC++ 2008 Express compiles your code without complaining that you're calling non const methods on <code>set::iterator</code>s.</p>\n</hr>", "OwnerUserId": "153861", "LastEditorUserId": "153861", "LastEditDate": "2011-05-18T05:02:02.927", "Id": "5973670", "Score": "3", "CreationDate": "2011-05-12T05:31:20.193", "LastActivityDate": "2011-05-18T05:02:02.927"}, "5973485": {"ParentId": "5973427", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>The objects in the <code>std::set</code> are stored as <code>const StudentT</code>. So when you try to call <code>getId()</code> with the <code>const</code> object the compiler  detects a problem, namely you're calling a non-const member function on const object which is not allowed because non-const member functions make NO PROMISE not to modify the object; so the compiler is going to make a <em>safe</em> assumption that <code>getId()</code> might attempt to modify the object but at the same time, it also notices that the object is const; so any attempt to modify the const object should be an error. Hence compiler generates error message. </p>\n<p>The solution is simple: make the functions const as:</p>\n<pre><code>int getId() const {\n    return id;\n}\nstring getName() const {\n    return name;\n}\n</code></pre>\n<p>This is necessary because now you can call <code>getId()</code> and <code>getName()</code> on const objects as:</p>\n<pre><code>void f(const StudentT &amp; s)\n{\n     cout &lt;&lt; s.getId();   //now okay, but error with your versions\n     cout &lt;&lt; s.getName(); //now okay, but error with your versions\n}\n</code></pre>\n<p>As a sidenote, you should implement <code>operator&lt;</code> as : </p>\n<pre><code>inline bool operator&lt; (const StudentT &amp; s1, const StudentT &amp; s2)\n{\n    return  s1.getId() &lt; s2.getId();\n}\n</code></pre>\n<p>Note parameters are now <code>const</code> reference.</p>\n", "OwnerUserId": "415784", "LastEditorUserId": "415784", "LastEditDate": "2011-05-13T04:45:30.767", "Id": "5973485", "Score": "316", "CreationDate": "2011-05-12T05:02:35.513", "LastActivityDate": "2011-05-13T04:45:30.767"}, "5973427": {"CommentCount": "4", "AcceptedAnswerId": "5973485", "PostTypeId": "1", "LastEditorUserId": "24874", "CreationDate": "2011-05-12T04:52:56.860", "LastActivityDate": "2012-05-08T11:51:57.017", "LastEditDate": "2012-05-08T11:51:57.017", "ViewCount": "230085", "FavoriteCount": "71", "Title": "error: passing xxx as 'this' argument of xxx discards qualifiers", "Id": "5973427", "Score": "268", "Body": "<pre><code>#include &lt;iostream&gt;\n#include &lt;set&gt;\n\nusing namespace std;\n\nclass StudentT {\n\npublic:\n    int id;\n    string name;\npublic:\n    StudentT(int _id, string _name) : id(_id), name(_name) {\n    }\n    int getId() {\n        return id;\n    }\n    string getName() {\n        return name;\n    }\n};\n\ninline bool operator&lt; (StudentT s1, StudentT s2) {\n    return  s1.getId() &lt; s2.getId();\n}\n\nint main() {\n\n    set&lt;StudentT&gt; st;\n    StudentT s1(0, \"Tom\");\n    StudentT s2(1, \"Tim\");\n    st.insert(s1);\n    st.insert(s2);\n    set&lt;StudentT&gt; :: iterator itr;\n    for (itr = st.begin(); itr != st.end(); itr++) {\n        cout &lt;&lt; itr-&gt;getId() &lt;&lt; \" \" &lt;&lt; itr-&gt;getName() &lt;&lt; endl;\n    }\n    return 0;\n}\n</code></pre>\n<p>In line:</p>\n<pre><code>cout &lt;&lt; itr-&gt;getId() &lt;&lt; \" \" &lt;&lt; itr-&gt;getName() &lt;&lt; endl;\n</code></pre>\n<p>It give an error that:</p>\n<blockquote>\n<p id=\"so_5973427_5973427_0\">../main.cpp:35: error: passing 'const StudentT' as 'this' argument of 'int StudentT::getId()' discards qualifiers</p>\n<p id=\"so_5973427_5973427_1\">../main.cpp:35: error: passing 'const StudentT' as 'this' argument of 'std::string StudentT::getName()' discards qualifiers</p>\n</blockquote>\n<p>What's wrong with this code? Thank you!</p>\n", "Tags": "<c++>", "OwnerUserId": "670631", "AnswerCount": "3"}, "5973442": {"ParentId": "5973427", "CommentCount": "10", "Body": "<p>Member functions that do not modify the class instance should be declared as <code>const</code>:</p>\n<pre><code>int getId() const {\n    return id;\n}\nstring getName() const {\n    return name;\n}\n</code></pre>\n<p>Anytime you see \"discards qualifiers\", it's talking about <code>const</code> or <code>volatile</code>.</p>\n", "OwnerUserId": "10077", "PostTypeId": "2", "Id": "5973442", "Score": "55", "CreationDate": "2011-05-12T04:55:36.770", "LastActivityDate": "2011-05-12T04:55:36.770"}, "bq_ids": {"n4140": {"so_5973427_5973670_0": {"section_id": 742, "quality": 0.5434782608695652, "length": 25}}, "n3337": {"so_5973427_5973670_0": {"section_id": 731, "quality": 0.5434782608695652, "length": 25}}, "n4659": {"so_5973427_5973670_0": {"section_id": 800, "quality": 0.5434782608695652, "length": 25}}}});