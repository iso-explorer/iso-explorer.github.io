post_cb({"bq_ids": {"n4140": {"so_31729985_31731551_3": {"length": 42, "quality": 0.9333333333333333, "section_id": 5520}, "so_31729985_31731551_1": {"length": 10, "quality": 0.625, "section_id": 5483}, "so_31729985_31731551_5": {"length": 5, "quality": 0.8333333333333334, "section_id": 7067}, "so_31729985_31735140_0": {"length": 21, "quality": 0.9545454545454546, "section_id": 3208}, "so_31729985_31731551_2": {"length": 30, "quality": 0.967741935483871, "section_id": 5484}}, "n3337": {"so_31729985_31731551_3": {"length": 42, "quality": 0.9333333333333333, "section_id": 5306}, "so_31729985_31731551_1": {"length": 10, "quality": 0.625, "section_id": 5269}, "so_31729985_31731551_5": {"length": 5, "quality": 0.8333333333333334, "section_id": 6811}, "so_31729985_31735140_0": {"length": 21, "quality": 0.9545454545454546, "section_id": 3082}, "so_31729985_31731551_2": {"length": 30, "quality": 0.967741935483871, "section_id": 5270}}, "n4659": {"so_31729985_31731551_3": {"length": 42, "quality": 0.9333333333333333, "section_id": 6955}, "so_31729985_31731551_2": {"length": 30, "quality": 0.967741935483871, "section_id": 6919}, "so_31729985_31735140_0": {"length": 21, "quality": 0.9545454545454546, "section_id": 3965}, "so_31729985_31731551_5": {"length": 5, "quality": 0.8333333333333334, "section_id": 8564}}}, "31735140": {"Id": "31735140", "PostTypeId": "2", "Body": "<p>T.C. directed me to [dcl.meaning]p1</p>\n<blockquote>\n<p id=\"so_31729985_31735140_0\">\u2026 When the declarator-id is qualified, the declaration shall refer to a previously declared member of the class or namespace to which the qualifier refers (or, in the case of a namespace, of an element of the inline namespace set of that namespace (7.3.1)) or to a specialization thereof \u2026</p>\n</blockquote>\n<p>It seems to me that this is a case where the standard is not faithfully represented by the implementations.</p>\n", "LastActivityDate": "2015-07-30T22:27:48.117", "CommentCount": "1", "CreationDate": "2015-07-30T22:27:48.117", "ParentId": "31729985", "Score": "2", "OwnerUserId": "2549876"}, "31729985": {"ViewCount": "174", "Body": "<p>Why is it that qualified names cannot be re-declared inside functions?</p>\n<p>The following code fails to compile (in MSVC2015 and clang)</p>\n<pre><code>int i;\n\nnamespace N\n{\nint j;\n}\n\nvoid foo()\n{\n    extern int i;\n    extern int i;\n    extern int N::j;\n    extern int N::j;\n}\n\nint main()\n{\n    return 0;\n}\n</code></pre>\n<p>However, if we move the two lines <code>extern int N::j;</code> to just before <code>void foo()</code> then the code compiles fine. </p>\n<hr>\n<p><strong>UPDATE</strong> It is noteworthy that </p>\n<ol>\n<li>repeated declarations of unqualified names do work,</li>\n<li>both <code>::i</code> and <code>::N::j</code> were already defined in their respective declarations,</li>\n<li><code>::N::j</code> is not visible to <code>foo</code></li>\n<li>the grammar does allow <code>extern int ::N::j</code> and <em>it is not a definition</em></li>\n<li>the following code also fails (thank to T.C. for pointing this out)</li>\n</ol>\n<p>.</p>\n<pre><code>int i;\nvoid foo()\n{\n    extern int ::i;\n}\n</code></pre>\n<ol start=\"6\">\n<li>the following code works in MSVC but it gives a warning in clang</li>\n</ol>\n<p>.</p>\n<pre><code>int i;\nextern int ::i;\n</code></pre>\n</hr>", "AcceptedAnswerId": "31735140", "Title": "repeated extern declarations of qualified identifiers C++", "CreationDate": "2015-07-30T17:07:15.097", "Id": "31729985", "CommentCount": "3", "LastEditDate": "2015-07-30T22:07:21.613", "PostTypeId": "1", "LastEditorUserId": "2549876", "LastActivityDate": "2015-08-03T17:19:29.830", "Score": "4", "OwnerUserId": "2549876", "Tags": "<c++><c++11><language-lawyer>", "AnswerCount": "2"}, "31731551": {"Id": "31731551", "PostTypeId": "2", "Body": "<p>It is the namespace member definition vs. declaration issue here.  Please see C++11 spec:</p>\n<blockquote>\n<p id=\"so_31729985_31731551_0\">7.3.1.2 Namespace member definitions [namespace.memdef] </p>\n<p id=\"so_31729985_31731551_1\">1 Members (including explicit specializations of templates (14.7.3)) of a\n  namespace can be defined within that namespace. \n  [ Example: namespace X\n  { void f() { / ... / } } \u2014end example ] </p>\n<p id=\"so_31729985_31731551_2\">2 Members of a named\n  namespace can also be defined outside that namespace by explicit\n  qualification (3.4.3.2) of the name being defined, provided that the\n  entity being defined was already declared in the namespace and the\n  definition appears after the point of declaration in a namespace that\n  encloses the declaration\u2019s namespace.</p>\n</blockquote>\n<p>Therefore, the revised code below compiles.</p>\n<pre><code>int i;\n\nnamespace N\n{\n    int j;\n\n    void foo()\n    {\n        extern int i;\n        extern int j;\n    }\n}\n\nvoid foo()\n{\n    extern int i;\n\n    using namespace N;\n    extern int j;\n}\n\nint main()\n{\n    return 0;\n}\n</code></pre>\n<p>Here is a generic example of using <code>extern</code> with <code>namespace</code>:\nIn one CPP file:</p>\n<pre><code>namespace N\n{\n    int j;\n}\n</code></pre>\n<p>In its header file:</p>\n<pre><code>namespace N\n{\n    extern int j;\n}\n</code></pre>\n<hr>\n<p>Update:  </p>\n<h2>More on extern, namespace, declaration and definition</h2>\n<p>The :: scope resolution operator cannot be use for declaration.  It may be used for definition. Using :: for <code>extern</code> declaration would be ill-formed.\nPlease see C++11 spec:</p>\n<blockquote>\n<p id=\"so_31729985_31731551_3\">7.5 Linkage specifications [dcl.link] \n  ... ...<br>\n  4 Linkage specifications nest. When linkage specifications nest, the innermost\n  one determines the language linkage. <strong>A linkage specification does not\n  establish a scope. A linkage-specification shall occur only in\n  namespace scope (3.3).</strong> In a linkage-specification, the specified\n  language linkage applies to the function types of all function\n  declarators, function names with external linkage, and variable names\n  with external linkage declared within the linkage-specification.</br></p>\n<p id=\"so_31729985_31731551_4\">3.3.6 Namespace scope [basic.scope.namespace] </p>\n<p id=\"so_31729985_31731551_5\">1 The declarative region of a namespace-definition is its namespace-body. \u2026</p>\n</blockquote>\n<pre><code>// Compiled with VC2013.\n// extern int ::i;   // error C2039: 'i' : is not a member of '`global namespace''\nextern int i;     // declaration  \nint i;  // definition\n\nnamespace N\n{\n    extern int j;  // declaration\n}\nint N::j;  // definition\nnamespace N\n{\n     // int j;  // definition\n}\n\nvoid foo()\n{\n    // extern int ::i;  // fatal error C1506: unrecoverable block scoping error\n    extern int i;     // declaration  \n    // extern int N::j;  // error C2086: 'int N::j' : redefinition\n}\n\nint main()\n{\n    return 0;\n}\n</code></pre>\n</hr>", "LastEditorUserId": "3896299", "LastActivityDate": "2015-08-03T17:19:29.830", "Score": "1", "CreationDate": "2015-07-30T18:36:25.797", "ParentId": "31729985", "CommentCount": "5", "OwnerUserId": "3896299", "LastEditDate": "2015-08-03T17:19:29.830"}});