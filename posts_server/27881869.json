post_cb({"bq_ids": {"n4140": {"so_27881869_27881899_0": {"length": 10, "quality": 0.9090909090909091, "section_id": 825}}, "n3337": {"so_27881869_27881899_0": {"length": 10, "quality": 0.9090909090909091, "section_id": 814}}, "n4659": {"so_27881869_27881899_0": {"length": 10, "quality": 0.9090909090909091, "section_id": 884}}}, "27882011": {"Id": "27882011", "PostTypeId": "2", "Body": "<p>In the good old tradition of the STL, you could have your template accept a pair of forward iterators and count the distance as it sums up the elements.</p>\n<pre><code>#include &lt;cstddef&gt;\n#include &lt;iterator&gt;\n\ntemplate&lt;typename FwdIter,\n         typename value_type = typename std::iterator_traits&lt;FwdIter&gt;::value_type&gt;\nvalue_type\nmean(const FwdIter begin, const FwdIter end)\n{\n  std::size_t count {0};\n  value_type sum {};\n  for (auto it = begin; it != end; ++it)\n    {\n      sum += *it;\n      ++count;\n    }\n  return sum / count;\n}\n</code></pre>\n<p>This will work for standard library containers, arrays, pointers, whatever you want.  For containers, you can simply define a convenience forwarding template that calls <code>cbegin</code> and <code>cend</code> if you want.</p>\n<p>Note that I have left out any type constraints from the above example.  In practice, you should probably <code>std::enable_if</code> the template only under special conditions such as if <code>std::is_arithmetic&lt;value_type&gt;</code>.</p>\n", "LastActivityDate": "2015-01-10T22:49:33.460", "CommentCount": "1", "CreationDate": "2015-01-10T22:49:33.460", "ParentId": "27881869", "Score": "2", "OwnerUserId": "1392132"}, "27882297": {"Id": "27882297", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_27881869_27882297_0\">Do all containers have a .size() function?</p>\n</blockquote>\n<p>No. Most of them do, and before C++11, all of them did. However, C++11 saw the introduction of the singly-linked list class template <code>std::forward_list</code>, which <strong>does not</strong> have a <code>size()</code> member function. All of the other containers do, and the current standard specifies that the algorithmic complexity is O(1). Pre-C++11, <code>std::list</code> was allowed to have linear complexity.</p>\n", "LastActivityDate": "2015-01-10T23:30:58.880", "CommentCount": "3", "CreationDate": "2015-01-10T23:30:58.880", "ParentId": "27881869", "Score": "2", "OwnerUserId": "661519"}, "27881869": {"ViewCount": "149", "Body": "<p>For a homework assignment I have to create a templatized standard deviation function that can be performed on any container.  Here's what I have:</p>\n<pre><code>template &lt;typename Container&gt;\ndouble findMean(Container c, int count){\n    double sum = 0;\n    for (auto&amp;&amp; e : c){\n        sum += e;\n    }\n    sum /= count;\n    return sum;\n}\n\ntemplate &lt;typename Container&gt;\ndouble findStDev(Container c){\n    double mean = findMean(c, c.size());\n    std::cout &lt;&lt; mean &lt;&lt; std::endl;\n    for (auto&amp;&amp; e : c){\n        e -= mean;\n        e *= e;\n    }\n    mean = sqrt(findMean(c, c.size()));\n    return mean;\n}\n</code></pre>\n<p>The first time I find the mean I want to divide by the full size of the container (n), but when I find it the second time for the standard deviation, I need to divide by size-1 (n-1).</p>\n<p>Is the .size() function available for all c++ containers?</p>\n", "AcceptedAnswerId": "27881899", "Title": "Do all containers have a .size() function?", "CreationDate": "2015-01-10T22:28:10.610", "Id": "27881869", "CommentCount": "2", "PostTypeId": "1", "LastActivityDate": "2015-01-10T23:57:43.777", "Score": "-1", "OwnerUserId": "3528082", "Tags": "<c++><math><size><containers><standard-deviation>", "AnswerCount": "3"}, "27881899": {"Id": "27881899", "PostTypeId": "2", "Body": "<p>Almost. By table 96 - container requirements in N3797, all containers in  the standard library must provide a member function <code>size</code>. It shall have constant execution time and return the value of <code>distance(a.begin(),a.end())</code> for a container <code>a</code>.</p>\n<p>However, there is one (and only one) exception mentioned later on: </p>\n<blockquote>\n<p id=\"so_27881869_27881899_0\">A forward_list satisfies all of the requirements of a container (Table 96), except that the size() member\n  function is not provided.</p>\n</blockquote>\n<p>(N3797 23.3.4.1 Clause 2)</p>\n<p>That means that <code>std::forward_list</code> is indeed a standard container that does <em>not</em> have a member function <code>size</code>.</p>\n", "LastEditorUserId": "3002139", "LastActivityDate": "2015-01-10T23:57:43.777", "Score": "6", "CreationDate": "2015-01-10T22:33:18.403", "ParentId": "27881869", "CommentCount": "0", "OwnerUserId": "3002139", "LastEditDate": "2015-01-10T23:57:43.777"}});