post_cb({"30459773": {"CommentCount": "1", "ViewCount": "231", "PostTypeId": "1", "LastEditorUserId": "1708801", "CreationDate": "2015-05-26T13:18:43.473", "LastActivityDate": "2015-08-06T15:05:08.050", "Title": "Floating point division by zero not constexpr", "AcceptedAnswerId": "30459947", "LastEditDate": "2015-08-06T15:05:08.050", "Id": "30459773", "Score": "3", "Body": "<p>When compiling this:</p>\n<pre><code>constexpr double x {123.0};\nconstexpr double y = x / 0.0;\nstd::cout &lt;&lt; x &lt;&lt; \" / 0 = \" &lt;&lt; y &lt;&lt; \"\\n\";\n</code></pre>\n<p>The compiler (gcc 4.9.2, -std=c++11 or c++14) fails, giving error:</p>\n<pre><code>(1.23e+2 / 0.0)' is not a constant expression\n  constexpr double y = x / 0.0;\n</code></pre>\n<p>How is the result (Inf) relevant when deciding if <code>y</code> can be a <em>constexpr</em> or not?</p>\n<p>For reference, this seems to be the way to do it:</p>\n<pre><code>static constexpr double z = std::numeric_limits&lt;double&gt;::quiet_NaN();\nstatic constexpr double w = std::numeric_limits&lt;double&gt;::infinity();\n</code></pre>\n", "Tags": "<c++11><c++14><undefined-behavior><constexpr>", "OwnerUserId": "4662607", "AnswerCount": "1"}, "30459947": {"ParentId": "30459773", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>Infinity is an implementation defined result, the standard does not require <a href=\"http://en.wikipedia.org/wiki/IEEE_floating_point\" rel=\"nofollow noreferrer\">IEEE floating point</a> and division by zero is formally <a href=\"http://en.wikipedia.org/wiki/Undefined_behavior\" rel=\"nofollow noreferrer\">undefined behavior</a> and <a href=\"https://stackoverflow.com/q/21319413/1708801\">constant expression have an exclusion for undefined behavior</a>. </p>\n<p>From the draft C++ standard section <code>5.6</code> <em>[expr.mul]</em>:</p>\n<blockquote>\n<p id=\"so_30459773_30459947_0\">The binary / operator yields the quotient, and the binary % operator\n  yields the remainder from the division of the first expression by the\n  second. <strong>If the second operand of / or % is zero the behavior is\n  undefined.</strong></p>\n</blockquote>\n", "OwnerUserId": "1708801", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:22:56.590", "Id": "30459947", "Score": "4", "CreationDate": "2015-05-26T13:27:04.810", "LastActivityDate": "2015-05-27T14:22:01.983"}, "bq_ids": {"n4140": {"so_30459773_30459947_0": {"section_id": 6137, "quality": 0.5555555555555556, "length": 10}}, "n3337": {"so_30459773_30459947_0": {"section_id": 5901, "quality": 0.5555555555555556, "length": 10}}, "n4659": {"so_30459773_30459947_0": {"section_id": 7634, "quality": 0.5555555555555556, "length": 10}}}});