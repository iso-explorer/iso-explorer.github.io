post_cb({"42761747": {"ParentId": "42761285", "CommentCount": "2", "Body": "<p>Clang is correct; see [conv.array]:</p>\n<blockquote>\n<p id=\"so_42761285_42761747_0\">An lvalue or rvalue of type \u201carray of <code>N</code> <code>T</code>\u201d or \u201carray of unknown bound of <code>T</code>\u201d can be converted to a prvalue\n  of type \u201cpointer to <code>T</code>\u201d. The result is a pointer to the first element of the array.</p>\n</blockquote>\n<p>Even if the array is a temporary, and therefore a prvalue, it is legal to perform the array-to-pointer conversion on it.</p>\n<p>It appears that the restriction on converting array prvalues into pointers was introduced in a patch that resolved <a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=53220\" rel=\"noreferrer\">gcc bug 53220</a>. It seems that a consensus emerged on the thread that allowing the conversion was dangerous since initializing a pointer variable from the array would not extend the lifetime of the array. However, treating such code as though it is ill-formed is not the correct solution, since, as pointed out later in the thread, it is possible to use this conversion in a safe way, <em>e.g.,</em> if the array is being passed to a function that takes a pointer (and therefore will live until the function returns).</p>\n<p>You would probably have to file a new bug against gcc in order to get them to fix the issue.</p>\n", "OwnerUserId": "481267", "PostTypeId": "2", "Id": "42761747", "Score": "6", "CreationDate": "2017-03-13T10:49:12.867", "LastActivityDate": "2017-03-13T10:49:12.867"}, "42761604": {"ParentId": "42761285", "CommentCount": "1", "Body": "<p>Actually, both compilers might be right! Although I'm not sure about the specific case (anybody willing to look up?), there are many situations the C++ standard just requires to give any diagnostic at all, but does not mandate a specific one of them, so both error or warning only can comply with the standard.</p>\n<p>Additionally, have a look at your compiler flags - most (including <a href=\"https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html\" rel=\"nofollow noreferrer\">GCC</a>) compilers allow to turn warnings into errors via flags...</p>\n", "OwnerUserId": "1312382", "PostTypeId": "2", "Id": "42761604", "Score": "0", "CreationDate": "2017-03-13T10:41:15.853", "LastActivityDate": "2017-03-13T10:41:15.853"}, "42761285": {"CommentCount": "0", "ViewCount": "130", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2017-03-13T10:24:03.000", "LastActivityDate": "2017-03-13T10:49:12.867", "Title": "Auto Rvalue Reference (without &&) to an Array in C++14", "AcceptedAnswerId": "42761747", "LastEditDate": "2017-05-23T10:29:54.663", "Id": "42761285", "Score": "3", "Body": "<p>Answer 1 of the post\n<a href=\"https://stackoverflow.com/questions/16949016/how-to-declare-array-with-auto\">How to declare array with auto</a> works fine:</p>\n<pre><code>template&lt;typename T&gt; using unsized_raw_array = T[];\nauto &amp;&amp;z = unsized_raw_array&lt;int&gt;{1, 2, 3};\n</code></pre>\n<p>Trying out the same but without the double ampersand (<code>&amp;&amp;</code>) results in different behavior of clang and gcc:</p>\n<pre><code>template&lt;typename T&gt; using unsized_raw_array = T[];\nauto   z = unsized_raw_array&lt;int&gt;{1, 2, 3};\n</code></pre>\n<p>I expected this to be an error because it is an rvalue (universal/forwarding/temporary-object) reference and the double ampersand is missing (<code>&amp;&amp;</code>). And that is what happens with gcc 6.3.0:</p>\n<ul>\n<li><code>error: taking address of temporary array</code></li>\n</ul>\n<p>However, clang 3.9.1 compiles and executes it successfully, allowing printing the values of the array in the next statements. I only get this warning (in some scenarios I don't even get the warning):</p>\n<ul>\n<li><code>warning: pointer is initialized by a temporary array, which will be destroyed at the end of the full-expression [-Waddress-of-array-temporary]</code></li>\n</ul>\n<p>Which compiler is correct? </p>\n", "Tags": "<c++><arrays><c++14><rvalue-reference><auto>", "OwnerUserId": "6892577", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_42761285_42761747_0": {"section_id": 11, "quality": 0.9444444444444444, "length": 17}}, "n3337": {"so_42761285_42761747_0": {"section_id": 8, "quality": 0.9444444444444444, "length": 17}}, "n4659": {"so_42761285_42761747_0": {"section_id": 12, "quality": 0.9444444444444444, "length": 17}}}});