post_cb({"21076225": {"CommentCount": "7", "AcceptedAnswerId": "21076476", "PostTypeId": "1", "ClosedDate": "2014-01-12T15:37:41.893", "LastEditorUserId": "2589776", "CreationDate": "2014-01-12T15:08:38.317", "LastActivityDate": "2014-01-12T15:37:54.950", "LastEditDate": "2014-01-12T15:21:25.650", "ViewCount": "173", "FavoriteCount": "0", "Title": "Are static variables internal or external in C++", "Id": "21076225", "Score": "-1", "Body": "<p>Are static variables in C++ internal variables or external variables? Or can be both? </p>\n<hr>\n<p>PS: It seems to me that (not sure it's correct):</p>\n<ul>\n<li><p>Internal variables are assigned their values at compile time.</p></li>\n<li><p>External variables are assigned their values at link time. </p></li>\n</ul>\n</hr>", "Tags": "<c++><static-variables>", "OwnerUserId": "2589776", "AnswerCount": "2"}, "21076476": {"ParentId": "21076225", "CommentCount": "0", "Body": "<p>Initialization depends on the type of the static variable.</p>\n<ol>\n<li><p>With fundamental types and initial values that can be computed at compile time, the variables initial value should be layed down in a section of the executable that is mapped into memory with copy on write semantics.</p></li>\n<li><p>However, the compiler can also decide to initialize <code>static</code> variables at runtime, typically before <code>main()</code> gets executed. But afaik, the only constraint is that initialization is finished when the variable is first used, and that static variables within a compilation unit are initialized in the order they are written (in case their initializers depend on one another).</p></li>\n</ol>\n<p>The point is, that <code>static</code> variables are initialized before they are used by code called from <code>main()</code>, but it is not specified when this initialization happens. The compiler can do what it deems most efficient.</p>\n<p>In any case, static variables live at least until <code>main()</code> exits or <code>exit()</code> is called. I am pretty sure that C++ will also call the destructors before terminating the process, but I don't know about that.</p>\n", "OwnerUserId": "2445184", "PostTypeId": "2", "Id": "21076476", "Score": "2", "CreationDate": "2014-01-12T15:27:37.997", "LastActivityDate": "2014-01-12T15:27:37.997"}, "bq_ids": {"n4140": {"so_21076225_21076378_0": {"section_id": 7136, "quality": 0.9333333333333333, "length": 14}}, "n3337": {"so_21076225_21076378_0": {"section_id": 6880, "quality": 0.9333333333333333, "length": 14}}, "n4659": {"so_21076225_21076378_0": {"section_id": 8637, "quality": 0.9333333333333333, "length": 14}}}, "21076378": {"ParentId": "21076225", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>According to the C++ Standard</p>\n<blockquote>\n<p id=\"so_21076225_21076378_0\">3 A name having namespace scope (3.3.6) has internal linkage if it is\n  the name of \u2014 a variable, function or function template that is\n  <strong>explicitly declared static</strong>; or,</p>\n</blockquote>\n<p>As for your statement that</p>\n<blockquote>\n<p id=\"so_21076225_21076378_1\">PS: I learned that  \u2022 Internal variables are assigned their values at\n  compile time.</p>\n<p id=\"so_21076225_21076378_2\">\u2022 External variables are assigned their values at link time.</p>\n</blockquote>\n<p>then it is wrong. </p>\n<p>In my opinion you are trying to mix up two notions: static storage duration and program linkage.</p>\n", "OwnerUserId": "2877241", "LastEditorUserId": "2877241", "LastEditDate": "2014-01-12T15:37:54.950", "Id": "21076378", "Score": "2", "CreationDate": "2014-01-12T15:18:45.127", "LastActivityDate": "2014-01-12T15:37:54.950"}});