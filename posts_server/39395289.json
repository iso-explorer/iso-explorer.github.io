post_cb({"39395845": {"Id": "39395845", "PostTypeId": "2", "Body": "<p>You have wandered into one of the murkier areas of C++ (and C).  Quoting from <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4296.pdf\" rel=\"nofollow\">n4296</a> (which is the latest freely available draft of C++14):</p>\n<blockquote>\n<p id=\"so_39395289_39395845_0\">4.10 Pointer conversions [conv.ptr]</p>\n<p id=\"so_39395289_39395845_1\">1 A <em>null pointer constant</em> is an integer literal (2.13.2) with value zero or a prvalue of type <code>std::nullptr_t</code>.\n  A null pointer constant can be converted to a pointer type; the result is the null pointer value of that type</p>\n</blockquote>\n<p>I am <em>slightly</em> surprised that <code>(int)0</code> is accepted as \"an integer literal\" - in fact, I think that is a bug in the compiler (but it is very much a corner case).</p>\n<p>Ah-ha!  I have just remembered:  Older versions of C and C++ didn't say \"integer literal\", they said \"integer constant expression\".  <code>int(0)</code> <em>is</em> an integer constant expression, so it is allowed on older compilers.</p>\n<p>This means your problem with g++ could depend on whether you specified C++14 or an earlier version.</p>\n", "LastEditorUserId": "771073", "LastActivityDate": "2016-09-08T16:19:26.677", "Score": "4", "CreationDate": "2016-09-08T16:15:34.887", "ParentId": "39395289", "CommentCount": "5", "OwnerUserId": "771073", "LastEditDate": "2016-09-08T16:19:26.677"}, "bq_ids": {"n4140": {"so_39395289_39395845_1": {"length": 22, "quality": 0.9565217391304348, "section_id": 39}}, "n3337": {"so_39395289_39395845_1": {"length": 20, "quality": 0.8695652173913043, "section_id": 36}}, "n4659": {"so_39395289_39395845_1": {"length": 22, "quality": 0.9565217391304348, "section_id": 39}}}, "39395289": {"ViewCount": "105", "Body": "<p>I have stumbled upon the following problem, if I compile (using Visual Studio 2010)</p>\n<pre><code>int main()\n{\n    double* d_ptr = int(0);\n    if(d_ptr == nullptr)\n         cout &lt;&lt; \"I am a nullptr\" &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>\n<p>I get the result \"I am a nullptr\"</p>\n<p>This also works if I substitute the pointer assignment with:</p>\n<pre><code>double* ptr = (int) 0;\n</code></pre>\n<p>I would have expected both to fail since they both explicitly cast to integer which has not a pointer type. Could someone help me in understanding what is going on?</p>\n<p>EDIT: Tried again with g++ and worked. Do not know what I did wrong the first time. Now I am only still troubled why it works in the first place.</p>\n", "AcceptedAnswerId": "39395845", "Title": "Strange behavior with null pointers", "CreationDate": "2016-09-08T15:47:15.833", "Id": "39395289", "CommentCount": "5", "LastEditDate": "2016-09-08T15:59:10.537", "PostTypeId": "1", "LastEditorUserId": "4290866", "LastActivityDate": "2016-09-08T16:19:26.677", "Score": "2", "OwnerUserId": "4290866", "Tags": "<c++>", "AnswerCount": "2"}, "39395526": {"Id": "39395526", "PostTypeId": "2", "Body": "<p>By assigning the value of <code>0</code>, to the pointer, you are setting it to null, so it is a <code>nullptr</code>. To make the pointer have the value of 0, do this:</p>\n<pre><code>double * dbl = new double{0};\n</code></pre>\n", "LastActivityDate": "2016-09-08T15:59:19.360", "CommentCount": "0", "CreationDate": "2016-09-08T15:59:19.360", "ParentId": "39395289", "Score": "0", "OwnerUserId": "6525260"}});