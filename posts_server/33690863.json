post_cb({"33690863": {"CommentCount": "0", "ViewCount": "118", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2015-11-13T10:40:10.460", "LastActivityDate": "2015-11-13T11:00:28.520", "Title": "Non-last default template arguments for function templates", "AcceptedAnswerId": "33691081", "LastEditDate": "2017-05-23T12:00:58.883", "Id": "33690863", "Score": "8", "Body": "<p>C++11 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#226\" rel=\"nofollow noreferrer\">introduced</a> default template arguments for function templates. See also <a href=\"https://stackoverflow.com/questions/2447458/default-template-arguments-for-function-templates\">Default template arguments for function templates</a>.</p>\n<p>But reading the C++ standard I could not find that it is legal to define a function template which use default template arguments for the first template argument, but not the other template arguments.</p>\n<p>This would be the opposite of how <a href=\"http://en.cppreference.com/w/cpp/language/default_arguments\" rel=\"nofollow noreferrer\">default arguments</a> are handled where all subsequent parameters must have a default argument supplied; or be a function parameter pack.</p>\n<p>The difference between default arguments and default template arguments seems strange at a first glance, but allows for constructs as:</p>\n<pre><code>template &lt;typename TException = std::exception, typename TObjectBuilder&gt;\nauto SwallowExceptions(const TObjectBuilder&amp; rObjectBuilder) -&gt; decltype(rObjectBuilder())\n{\n   try\n   {\n      return rObjectBuilder();\n   }\n   catch (const TException&amp;)\n   {\n      return decltype(rObjectBuilder())();\n   }\n}\n</code></pre>\n<p>Is this legal C++ code and where in the standard can this be found?</p>\n", "Tags": "<c++><templates><c++11><language-lawyer>", "OwnerUserId": "19100", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_33690863_33691081_0": {"section_id": 64, "quality": 0.9361702127659575, "length": 44}}, "n3337": {"so_33690863_33691081_0": {"section_id": 59, "quality": 0.9361702127659575, "length": 44}}, "n4659": {"so_33690863_33691081_0": {"section_id": 66, "quality": 0.9361702127659575, "length": 44}}}, "33691081": {"ParentId": "33690863", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>I can't see a direct quote which allows it, but it is certainly allowed by omission:</p>\n<blockquote>\n<p id=\"so_33690863_33691081_0\"><code>N3337 [temp.param]/11:</code> <strong>If a template-parameter of a class template or alias template has a default template-argument, each subsequent template-parameter shall either have a default template-argument supplied or be a template parameter\n  pack.</strong> If a template-parameter of a primary class template or alias template is a template parameter pack,\n  it shall be the last template-parameter. A template parameter pack of a function template shall not be\n  followed by another template parameter unless that template parameter can be deduced or has a default\n  argument (14.8.2).</p>\n</blockquote>\n<p>So this is disallowed for class templates and alias templates, but allowed for function templates as the parameters which follow those with defaults could be deduced from the function arguments. </p>\n", "OwnerUserId": "496161", "LastEditorUserId": "496161", "LastEditDate": "2015-11-13T11:00:28.520", "Id": "33691081", "Score": "8", "CreationDate": "2015-11-13T10:53:06.193", "LastActivityDate": "2015-11-13T11:00:28.520"}});