post_cb({"14404153": {"Id": "14404153", "PostTypeId": "2", "Body": "<p>This is specifically given as an example in the C++ standard when it's discussing the intricacies of declaring external or internal linkage. It's in section 7.1.1.7, which has this exert:</p>\n<pre><code>static int b ; // b has internal linkage\nextern int b ; // b still has internal linkage\n\nextern int d ; // d has external linkage\nstatic int d ; // error: inconsistent linkage\n</code></pre>\n<p>Section 3.5.6 discusses how <code>extern</code> should behave in this case. </p>\n<p>What's happening is this: <code>static int i</code> (in this case) is a definition, where the <code>static</code> indicates that <code>i</code> has internal linkage. When <code>extern</code> occurs after the <code>static</code> the compiler sees that the symbol already exists and accepts that it already has internal linkage and carries on. Which is why your second example compiles.</p>\n<p>The <code>extern</code> on the other hand is a declaration, it implicitly states that the symbol has external linkage but doesn't actually create anything. Since there's no <code>i</code> in your first example the compiler registers <code>i</code> as having external linkage but when it gets to your <code>static</code> it finds the incompatible statement that it has internal linkage and gives an error.</p>\n<p>In other words it's because declarations are 'softer' than definitions. For example, you could declare the same thing multiple times without error, but you can only define it once.</p>\n<p>Whether this is the same in C, I do not know (but netcoder's answer below informs us that the C standard contains the same requirement). </p>\n", "LastEditorUserId": "1502345", "LastActivityDate": "2013-01-19T00:33:59.627", "Score": "16", "CreationDate": "2013-01-18T17:17:45.413", "ParentId": "14403796", "CommentCount": "2", "OwnerUserId": "1502345", "LastEditDate": "2013-01-19T00:33:59.627"}, "14404180": {"Id": "14404180", "PostTypeId": "2", "Body": "<p>In Microsoft Visual Studio, both versions compile just fine.\nOn Gnu C++ you get an error.</p>\n<p>I'm not sure which compiler is \"correct\". Either way, having both lines doesn't make much sense.</p>\n<p><code>extern int i</code> means that the integer <code>i</code> is defined in some other module (object file or library). This is a declaration. The compiler will <em>not</em> allocate storage the <code>i</code> in this object, but it will recognize the variable when you are using it somewhere else in the program.</p>\n<p><code>int i</code> tells the compiler to allocate storage for <code>i</code>. This is a definition. If other C++ (or C) files have <code>int i</code>, the linker will complain, that int i is defined twice.</p>\n<p><code>static int i</code> is similar to the above, with the extra functionality that <code>i</code> is local. It cannot be accessed from other module, even if they declare <code>extern int i</code>. People are using the keyword static (in this context) to keep i localize.</p>\n<p>Hence having <code>i</code> both declared as being defined somewhere else, AND defined as static within the module seems like an error. Visual Studio is silent about it, and g++ is silent only in a specific order, but either way you just shouldn't have both lines in the same source code.</p>\n", "LastActivityDate": "2013-01-18T17:19:02.453", "CommentCount": "2", "CreationDate": "2013-01-18T17:19:02.453", "ParentId": "14403796", "Score": "1", "OwnerUserId": "341971"}, "bq_ids": {"n4140": {"so_14403796_14404206_0": {"length": 13, "quality": 0.5416666666666666, "section_id": 7136}, "so_14403796_14404244_2": {"length": 7, "quality": 0.5833333333333334, "section_id": 7043}, "so_14403796_14404206_1": {"length": 34, "quality": 0.918918918918919, "section_id": 5397}}, "n3337": {"so_14403796_14404206_0": {"length": 24, "quality": 1.0, "section_id": 5191}, "so_14403796_14404244_2": {"length": 7, "quality": 0.5833333333333334, "section_id": 6788}, "so_14403796_14404206_1": {"length": 34, "quality": 0.918918918918919, "section_id": 5192}}, "n4659": {"so_14403796_14404244_2": {"length": 8, "quality": 0.6666666666666666, "section_id": 8640}, "so_14403796_14404206_1": {"length": 34, "quality": 0.918918918918919, "section_id": 6822}}}, "14404244": {"Id": "14404244", "PostTypeId": "2", "Body": "<p>For C, quoting the standard, in C11 6.2.2: <em>Linkage of identifiers</em>:</p>\n<blockquote>\n<p id=\"so_14403796_14404244_0\">3) If the declaration of a file scope identifier for an object or a function contains the storage-class specifier <code>static</code>, the identifier has internal linkage.</p>\n<p id=\"so_14403796_14404244_1\">4) <strong>For an identifier declared with the storage-class specifier <code>extern</code> in a scope in which a prior declaration of that identifier is visible</strong>, if the prior declaration specifies internal or external linkage, <strong>the linkage of the identifier at the later declaration is the same as the\n  linkage specified at the prior declaration</strong>. If no prior declaration is visible, or if the prior declaration specifies no linkage, then the identifier has external linkage.</p>\n</blockquote>\n<p>(emphasis-mine)</p>\n<p>That explains the second example (<code>i</code> will have internal linkage). As for the first one, I'm pretty sure it's undefined behavior:</p>\n<blockquote>\n<p id=\"so_14403796_14404244_2\">7) If, within a translation unit, the same identifier appears with both internal and external  linkage, the behavior is undefined.</p>\n</blockquote>\n<p>...because <code>extern</code> appears <em>before</em> the identifier is declared with internal linkage, 6.2.2/4 does not apply. As such, <code>i</code> has both internal and external linkage, so it's UB.</p>\n<p>If the compiler issues a diagnostic, well lucky you I guess. It could compile both without errors and still be compliant to the standard.</p>\n", "LastEditorUserId": "492901", "LastActivityDate": "2013-01-18T17:27:41.737", "Score": "10", "CreationDate": "2013-01-18T17:22:21.140", "ParentId": "14403796", "CommentCount": "0", "OwnerUserId": "492901", "LastEditDate": "2013-01-18T17:27:41.737"}, "14404206": {"Id": "14404206", "PostTypeId": "2", "Body": "<p>C++:</p>\n<h3>7.1.1 Storage class specifiers [dcl.stc]</h3>\n<blockquote>\n<p id=\"so_14403796_14404206_0\">7) <strong>A name declared in a namespace scope without a storage-class-specifier has external linkage unless it has\n  internal linkage because of a previous declaration</strong> and provided it is not declared const. Objects declared\n  const and not explicitly declared extern have internal linkage.</p>\n</blockquote>\n<p>So, the first one attempts to first gives <code>i</code> external linkage, and internal afterwards.</p>\n<p>The second one gives it internal linkage first, and the second line doesn't attempt to give it external linkage because it was previously declared as internal.</p>\n<blockquote>\n<p id=\"so_14403796_14404206_1\">8) The linkages implied by successive declarations for a given entity shall agree. That is, within a given scope,\n  each declaration declaring the same variable name or the same overloading of a function name shall imply\n  the same linkage. Each function in a given set of overloaded functions can have a different linkage, however. <br/>\n  [ Example:</p>\n</blockquote>\n<pre><code>[...]\nstatic int b; // b has internal linkage\nextern int b; // b still has internal linkage\n[...]\nextern int d; // d has external linkage\nstatic int d; // error: inconsistent linkage\n[...]\n</code></pre>\n", "LastEditorUserId": "673730", "LastActivityDate": "2013-01-18T17:26:56.537", "Score": "1", "CreationDate": "2013-01-18T17:20:15.893", "ParentId": "14403796", "CommentCount": "3", "OwnerUserId": "673730", "LastEditDate": "2013-01-18T17:26:56.537"}, "14403796": {"ViewCount": "6644", "Body": "<p>Why the following doesn't compile?</p>\n<pre><code>...\nextern int i;\nstatic int i;\n...\n</code></pre>\n<p>but if you reverse the order, it compiles fine.</p>\n<pre><code>...\nstatic int i;\nextern int i;\n...\n</code></pre>\n<p>What is going on here?</p>\n", "AcceptedAnswerId": "14404153", "Title": "Can a variable be declared both static and extern?", "CreationDate": "2013-01-18T16:58:12.087", "LastActivityDate": "2016-07-12T23:40:58.483", "CommentCount": "3", "FavoriteCount": "3", "PostTypeId": "1", "LastEditDate": "2016-07-12T23:40:58.483", "OwnerDisplayName": "user1252446", "LastEditorUserId": "608639", "Id": "14403796", "Score": "20", "Tags": "<c++><c><linkage><storage-class-specifier>", "AnswerCount": "4"}});