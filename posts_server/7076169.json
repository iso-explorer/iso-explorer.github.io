post_cb({"7076326": {"ParentId": "7076169", "PostTypeId": "2", "CommentCount": "4", "Body": "<h3>C++03 14.6.2 Dependent names</h3>\n<blockquote>\n<p id=\"so_7076169_7076326_0\">In the definition of a class template or a member of a class template,\n  if a base class of the class template depends on a template-parameter,\n  the base class scope is <strong><em>not examined</em></strong> during unqualified name\n  lookup either at the point of definition of the class template or\n  member or during an instantiation of the class template or member.</p>\n</blockquote>\n<p>The following code should work.</p>\n<pre><code>template &lt;typename InterfaceType&gt;\nvoid ChildClass&lt;InterfaceType&gt;::set()\n{\n   Base&lt;std::vector&lt;InterfaceType&gt; &gt;::myOption = 10;\n}\n</code></pre>\n", "OwnerUserId": "419391", "LastEditorUserId": "560648", "LastEditDate": "2011-08-16T10:03:53.263", "Id": "7076326", "Score": "12", "CreationDate": "2011-08-16T09:45:34.510", "LastActivityDate": "2011-08-16T10:03:53.263"}, "7076169": {"CommentCount": "1", "AcceptedAnswerId": "7076312", "PostTypeId": "1", "ClosedDate": "2014-10-20T15:02:28.093", "LastEditorUserId": "560648", "CreationDate": "2011-08-16T09:33:01.390", "LastActivityDate": "2011-08-16T10:03:53.263", "LastEditDate": "2011-08-16T09:48:05.940", "ViewCount": "15254", "FavoriteCount": "5", "Title": "\"not declared in this scope\" error with templates and inheritance", "Id": "7076169", "Score": "23", "Body": "<p>Here is code sample which reproduces my problem:</p>\n<pre><code>template &lt;typename myType&gt;\nclass Base {\npublic:\n    Base() {}\n    virtual ~Base() {}\nprotected:\n    int myOption;\n    virtual void set() = 0;\n};\n\ntemplate &lt;typename InterfaceType&gt;\nclass ChildClass : public Base &lt; std::vector&lt;InterfaceType&gt; &gt;\n{\npublic:\n    ChildClass() {}\n    virtual ~ChildClass() {}\n protected:\n    virtual void set();\n};\n\ntemplate &lt;typename InterfaceType&gt;\nvoid ChildClass&lt;InterfaceType&gt;::set()\n{\n     myOption = 10;\n}\n</code></pre>\n<p>My usage in <code>main()</code>:</p>\n<pre><code>ChildClass&lt;int&gt; myObject;\n</code></pre>\n<p>I get the following error (gcc 4.4.3 on ubuntu):</p>\n<blockquote>\n<p id=\"so_7076169_7076169_0\">\u2018myOption\u2019 was not declared in this scope</p>\n</blockquote>\n<p>If my ChildClass would be without new template parameter this would work fine, i.e.: </p>\n<pre><code>class ChildClass : public Base &lt; std::vector&lt;SomeConcreteType&gt; &gt;\n</code></pre>\n<hr>\n<h2>Edit</h2>\n<p>I've managed to solve it, if my set method looks like:</p>\n<pre><code>Base&lt;std::vector&lt;InterfaceType&gt; &gt;::myOption = 10;\n</code></pre>\n<p>It works fine. Still though not sure why I need to specify all template parameters.</p>\n</hr>", "Tags": "<c++><templates><inheritance><g++><compiler-errors>", "OwnerUserId": "788314", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_7076169_7076326_0": {"section_id": 190, "quality": 0.8709677419354839, "length": 27}}, "n3337": {"so_7076169_7076326_0": {"section_id": 184, "quality": 0.8709677419354839, "length": 27}}, "n4659": {"so_7076169_7076326_0": {"section_id": 195, "quality": 0.7096774193548387, "length": 22}}}, "7076312": {"ParentId": "7076169", "CommentCount": "6", "Body": "<p><code>myOption</code> is not a dependent name, i.e. it doesn't depend on the template arguments explicitly so the compiler tries to look it up early. You must make it a dependent name:</p>\n<pre><code>template &lt;typename InterfaceType&gt;\nvoid ChildClass&lt;InterfaceType&gt;::set()\n{\n     this-&gt;myOption = 10;\n}\n</code></pre>\n<p>Now it depends on the type of <code>this</code> and thus on the template arguments. Therefore the compiler will bind it at the time of instantiation.</p>\n<p>This is called <a href=\"http://womble.decadent.org.uk/c++/template-faq.html#two-phase\" rel=\"noreferrer\">Two-phase name lookup</a>.</p>\n", "OwnerUserId": "277176", "PostTypeId": "2", "Id": "7076312", "Score": "35", "CreationDate": "2011-08-16T09:44:22.473", "LastActivityDate": "2011-08-16T09:44:22.473"}});