post_cb({"10654019": {"ParentId": "10653903", "PostTypeId": "2", "CommentCount": "16", "Body": "<p>Semantics of the compound assignment operators is different in C and C++:</p>\n<p>C99 standard, 6.5.16, part 3:</p>\n<blockquote>\n<p id=\"so_10653903_10654019_0\">An assignment operator stores a value in the object designated by the left operand. An\n  assignment expression has the value of the left operand after the assignment, but is not an\n  lvalue.</p>\n</blockquote>\n<p>In C++ 5.17.1:</p>\n<blockquote>\n<p id=\"so_10653903_10654019_1\">The assignment operator (=) and the compound assignment operators all group right-to-left. All require a modi\ufb01able\n  lvalue as their left operand and return an lvalue with the type and value of the left operand after the assignment has taken place.</p>\n</blockquote>\n<p><strong>EDIT :</strong> The behavior of <code>(i+=10)+=10</code> in C++ is undefined in C++98, but well defined in C++11. See <a href=\"https://stackoverflow.com/a/10655884/335858\">this answer</a> to the question by <a href=\"https://stackoverflow.com/users/367273/npe\">NPE</a> for the relevant portions of the standards.</p>\n", "OwnerUserId": "335858", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T11:46:43.070", "Id": "10654019", "Score": "133", "CreationDate": "2012-05-18T13:57:58.457", "LastActivityDate": "2017-03-29T10:08:49.240"}, "10653903": {"CommentCount": "7", "AcceptedAnswerId": "10654019", "PostTypeId": "1", "LastEditorUserId": "4284627", "CreationDate": "2012-05-18T13:50:54.030", "LastActivityDate": "2017-03-29T10:08:49.240", "LastEditDate": "2017-02-11T13:47:40.020", "ViewCount": "6024", "FavoriteCount": "9", "Title": "What's the result of += in C and C++?", "Id": "10653903", "Score": "91", "Body": "<p>I've got the following code:</p>\n<pre><code>#include &lt;stdio.h&gt;\nint main(int argc, char **argv) {\n    int i = 0;\n    (i+=10)+=10;\n    printf(\"i = %d\\n\", i);\n    return 0;\n}\n</code></pre>\n<p>If I try to compile it as a C source using gcc I get an error:</p>\n<pre><code>error: lvalue required as left operand of assignment\n</code></pre>\n<p>But if I compile it as a C++ source using g++ I get no error and when i run the executable:</p>\n<pre><code>i = 20\n</code></pre>\n<p>Why the different behavior?</p>\n", "Tags": "<c++><c>", "OwnerUserId": "1274367", "AnswerCount": "2"}, "10653994": {"ParentId": "10653903", "PostTypeId": "2", "CommentCount": "14", "Body": "<p>In addition to being invalid C code, the line</p>\n<blockquote id=\"so_10653903_10653994_0\">\n<pre><code>(i+=10)+=10;\n</code></pre>\n</blockquote>\n<p>would result in undefined behaviour in both C and C++03 because it would modify <code>i</code> twice between sequence points.</p>\n<p>As to why it's allowed to compile in C++:</p>\n<blockquote>\n<p id=\"so_10653903_10653994_1\">[C++N3242 5.17.1] The assignment operator (=) and the compound assignment operators all group right-to-left. All require a\n  modifiable lvalue as their left operand <strong>and return an lvalue referring to the left operand.</strong></p>\n</blockquote>\n<p>The same paragraph goes on to say that</p>\n<blockquote>\n<p id=\"so_10653903_10653994_2\">In all cases, the assignment is sequenced after the value\n  computation of the right and left operands, and before the value computation of the assignment expression.</p>\n</blockquote>\n<p>This suggests that in C++11, the expression no longer has undefined behaviour.</p>\n", "OwnerUserId": "367273", "LastEditorUserId": "367273", "LastEditDate": "2012-05-18T19:40:28.340", "Id": "10653994", "Score": "51", "CreationDate": "2012-05-18T13:56:06.507", "LastActivityDate": "2012-05-18T19:40:28.340"}, "bq_ids": {"n4140": {"so_10653903_10653994_2": {"section_id": 6173, "quality": 1.0, "length": 15}, "so_10653903_10654019_1": {"section_id": 6173, "quality": 0.7692307692307693, "length": 20}, "so_10653903_10653994_1": {"section_id": 6173, "quality": 0.8695652173913043, "length": 20}}, "n3337": {"so_10653903_10653994_2": {"section_id": 5934, "quality": 1.0, "length": 15}, "so_10653903_10654019_1": {"section_id": 5934, "quality": 0.7692307692307693, "length": 20}, "so_10653903_10653994_1": {"section_id": 5934, "quality": 0.8695652173913043, "length": 20}}, "n4659": {"so_10653903_10654019_1": {"section_id": 7675, "quality": 0.7692307692307693, "length": 20}, "so_10653903_10654019_0": {"section_id": 7675, "quality": 0.5294117647058824, "length": 9}, "so_10653903_10653994_2": {"section_id": 7675, "quality": 1.0, "length": 15}, "so_10653903_10653994_1": {"section_id": 7675, "quality": 0.8695652173913043, "length": 20}}}});