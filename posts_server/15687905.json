post_cb({"bq_ids": {"n4140": {"so_15687905_15688216_0": {"length": 23, "quality": 0.8214285714285714, "section_id": 3242}}, "n3337": {"so_15687905_15688216_0": {"length": 23, "quality": 0.8214285714285714, "section_id": 3115}}, "n4659": {"so_15687905_15688216_0": {"length": 23, "quality": 0.8214285714285714, "section_id": 3999}}}, "15687905": {"ViewCount": "169", "Body": "<pre><code>#ifndef SHAPEFACTORY_H_\n#define SHAPEFACTORY_H_\n\n#include &lt;istream&gt;\n#include &lt;map&gt;\n#include &lt;string&gt;\n\n#include \"shape.h\"\n\ntypedef Shape *(createShapeFunction)(void);\n/* thrown when a shape cannot be read from a stream */\nclass WrongFormatException { };\n\nclass ShapeFactory {\n\npublic:\n\n    static void registerFunction(const std::string &amp;string, const createShapeFunction *shapeFunction);\n    static Shape *createShape(const std::string &amp;string);\n    static Shape *createShape(std::istream &amp;ins);\n\nprivate:\n\n    std::map&lt;std::string, createShapeFunction *&gt; creationFunctions;\n    ShapeFactory();\n    static ShapeFactory *getShapeFactory();\n};\n\n#endif\n</code></pre>\n<p>This is the header, I have not implemented any method yet, but I am getting the following warning:</p>\n<pre><code>Qualifier on function type 'createShapeFunction' (aka 'Shape *()') has unspecified behavior\n</code></pre>\n<p>ps: this header was given by my teacher and as a homework I have to implement the methods</p>\n", "AcceptedAnswerId": "15687976", "Title": "Qualifier on function type .. has unspecified behavior", "CreationDate": "2013-03-28T17:05:31.327", "Id": "15687905", "CommentCount": "5", "LastEditDate": "2013-03-28T17:07:05.740", "PostTypeId": "1", "LastEditorUserId": "129570", "LastActivityDate": "2013-03-28T17:26:52.503", "Score": "0", "OwnerUserId": "2096285", "Tags": "<c++><factory>", "AnswerCount": "2"}, "15688216": {"Id": "15688216", "PostTypeId": "2", "Body": "<p>The warning is being issued because the type <code>const createShapeFunction*</code> attempts to create a <code>const</code>-qualified function type (since <code>createShapeFunction</code> is defined as the type of a function which returns a <code>Shape*</code> and accepts no argument). This is what the C++11 Standard has to say about it (Paragraph 8.5.3/6):</p>\n<blockquote>\n<p id=\"so_15687905_15688216_0\"><strong>The effect of a cv-qualifier-seq in a function declarator is not the same as adding cv-qualification on top\n  of the function type. In the latter case, the cv-qualifiers are ignored</strong>. [ Note: a function type that has a\n  cv-qualifier-seq is not a cv-qualified type; there are no cv-qualified function types. \u2014end note ] [ Example:</p>\n<pre><code>typedef void F();\nstruct S {\n    const F f; // OK: equivalent to: void f();\n};\n</code></pre>\n<p id=\"so_15687905_15688216_1\">\u2014end example ]</p>\n</blockquote>\n<p>Therefore, the compiler is warning you that you may have meant something else rather than what you actually wrote, because <code>const</code> qualifications on function types would just be ignored.</p>\n", "LastEditorUserId": "1932150", "LastActivityDate": "2013-03-28T17:26:52.503", "Score": "0", "CreationDate": "2013-03-28T17:21:50.447", "ParentId": "15687905", "CommentCount": "0", "OwnerUserId": "1932150", "LastEditDate": "2013-03-28T17:26:52.503"}, "15687976": {"Id": "15687976", "PostTypeId": "2", "Body": "<p>That's a silly warning message. It's not unspecified, but the <code>const</code> qualification you've put on the second argument to <code>registerFunction</code> will be ignored.</p>\n<p>Let's look at the <code>typedef</code> of <code>createShapeFunction</code>:</p>\n<pre><code>typedef Shape *(createShapeFunction)(void);\n</code></pre>\n<p>You can read this type as \"a function that takes no arguments and returns a <code>Shape*</code>\". So then you have an argument of this type:</p>\n<pre><code>const createShapeFunction*\n</code></pre>\n<p>This would be a pointer to a <code>const</code> function type. There's no such thing as a <code>const</code> function type, so the <code>const</code> is ignored and the argument type is equivalent to <code>createShapeFunction*</code>. That is, a pointer to the function type defined above.</p>\n<p>It's possible that you meant for <code>createShapeFunction</code> to be a function pointer type itself:</p>\n<pre><code>typedef Shape *(*createShapeFunction)(void);\n</code></pre>\n<p>Now you can read this type as \"pointer to function taking no arguments and returning <code>Shape*</code>\". Then that would make the argument <code>const createShapeFunction*</code> a pointer to a <code>const</code> function pointer.</p>\n", "LastEditorUserId": "150634", "LastActivityDate": "2013-03-28T17:16:30.507", "Score": "3", "CreationDate": "2013-03-28T17:09:06.477", "ParentId": "15687905", "CommentCount": "0", "OwnerUserId": "150634", "LastEditDate": "2013-03-28T17:16:30.507"}});