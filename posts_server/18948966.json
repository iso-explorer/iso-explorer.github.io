post_cb({"18949137": {"ParentId": "18948966", "PostTypeId": "2", "CommentCount": "10", "CreationDate": "2013-09-22T21:52:37.273", "Score": "11", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:28:13.203", "Id": "18949137", "OwnerUserId": "420683", "Body": "<p>[expr.type.conv]</p>\n<blockquote>\n<p id=\"so_18948966_18949137_0\">2 The expression <code>T()</code>, where <code>T</code> is a <em>simple-type-specifier</em> or <em>typename-specifier</em> for a non-array complete object type or the (possibly <em>cv</em>-qualified) <code>void</code> type, creates a prvalue of the specified type, whose value is that produced by value-initializing (8.5) an object of type <code>T</code>; no initialization is done for the <code>void()</code> case. [...]</p>\n</blockquote>\n<p>N.B. <code>void</code> <strong>is</strong> a <em>simple-type-specifier</em>.</p>\n<blockquote>\n<p id=\"so_18948966_18949137_1\">3 Similarly, a <em>simple-type-specifier</em> or <em>typename-specifier</em> followed by a <em>braced-init-list</em> creates a temporary object of the specified type direct-list-initialized (8.5.4) with the specified <em>braced-init-list</em>, and its value is that temporary object as a prvalue.</p>\n</blockquote>\n<p>Thanks to <a href=\"https://stackoverflow.com/users/827263/keith-thompson\">Keith Thompson</a> for pointing out that a <strong>temporary object</strong> is created in /3, whereas a <strong>value</strong> is created in /2.</p>\n<p>When we take a look at [basic.types]/5</p>\n<blockquote>\n<p id=\"so_18948966_18949137_2\">Incompletely-defined object types and the <code>void</code> types are incomplete types (3.9.1). Objects shall not be defined to have an incomplete type.</p>\n</blockquote>\n<p>It now becomes clear that <code>void{}</code> is not allowed as it would create a (temporary) object. <code>void()</code> however \"only\" creates a (pr)value. I don't think there's a difference in the implementation (behaviour) for those two cases, but different language rules apply to them. One of those rules forbids creation of an object of type <code>void</code>, hence the error.</p>\n<hr>\n<p>Ad <code>decltype(void())</code>: <code>decltype(e)</code> takes an expression <code>e</code>. In [dcl.type.simple]/4, the applicable definition of <code>decltype(e)</code> is:</p>\n<blockquote>\n<p id=\"so_18948966_18949137_3\">otherwise, <code>decltype(e)</code> is the type of <code>e</code></p>\n</blockquote>\n<p>(as <code>void()</code> yields a prvalue and is not an <em>id-expression</em>).</p>\n<p>Therefore, <code>decltype(void())</code> yields <code>void</code>.</p>\n</hr>", "LastActivityDate": "2013-09-22T23:15:15.190"}, "18948966": {"CommentCount": "6", "AcceptedAnswerId": "18949137", "PostTypeId": "1", "LastEditorUserId": "1865077", "CreationDate": "2013-09-22T21:33:04.417", "LastActivityDate": "2013-09-22T23:15:15.190", "LastEditDate": "2013-09-22T21:51:02.620", "ViewCount": "407", "FavoriteCount": "1", "Title": "What's the difference between void() and void{}?", "Id": "18948966", "Score": "9", "Body": "<p>Basically, I'd like to know why the compiler rejects <code>ptr2</code> declaration:</p>\n<pre><code>int main() {\n    // this one works\n    decltype(void())* ptr1;\n\n    // this one does not\n    decltype(void{})* ptr2;\n}\n</code></pre>\n<p>Take a look at <a href=\"http://ideone.com/6IsZe9\">this code</a> if you think that <code>ptr1</code> is a function pointer:</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\ntemplate &lt;class T&gt;\nvoid f(T t) {\n    cout &lt;&lt; __PRETTY_FUNCTION__ &lt;&lt; endl;\n}\n\nint main() {\n    decltype(void())* ptr;\n    f(ptr);\n}\n</code></pre>\n<p>The output is <code>void f(T) [with T = void*]</code>.</p>\n", "Tags": "<c++><c++11>", "OwnerUserId": "1641779", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_18948966_18949137_0": {"section_id": 6000, "quality": 0.9629629629629629, "length": 26}, "so_18948966_18949137_2": {"section_id": 7203, "quality": 0.8461538461538461, "length": 11}, "so_18948966_18949137_1": {"section_id": 6001, "quality": 0.9473684210526315, "length": 18}}, "n3337": {"so_18948966_18949137_0": {"section_id": 5768, "quality": 0.7037037037037037, "length": 19}, "so_18948966_18949137_2": {"section_id": 6947, "quality": 0.9230769230769231, "length": 12}, "so_18948966_18949137_1": {"section_id": 5769, "quality": 0.9473684210526315, "length": 18}}, "n4659": {"so_18948966_18949137_2": {"section_id": 8712, "quality": 0.6153846153846154, "length": 8}}}});