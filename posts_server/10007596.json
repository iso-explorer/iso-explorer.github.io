post_cb({"10007596": {"AcceptedAnswerId": "10007932", "Tags": "<c++><g++><const><volatile><rtti>", "AnswerCount": "1", "OwnerUserId": "1073006", "Body": "<p>Is it the correct behaviour or is it a quirk of g++4.5 that this code prints 1?</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;typeinfo&gt;\nusing namespace std;\n\nint main(){\n    struct A{};\n    cout&lt;&lt;(typeid(A)==typeid(const A)&amp;&amp;typeid(A)==typeid(const volatile A)&amp;&amp;typeid(A)==typeid(volatile A));\n}\n</code></pre>\n<p>I thought that types differing for cv-qualifiers were threated as very distinct types, even though less cv-qualified types could be implicitly cast to more cv-qualified types.</p>\n", "CommentCount": "0", "PostTypeId": "1", "CreationDate": "2012-04-04T08:37:19.360", "ViewCount": "183", "LastActivityDate": "2012-04-04T08:57:48.207", "Id": "10007596", "LastEditorUserId": "1073006", "Title": "type_info doesn't account for cv qualifiers: is this right?", "Score": "3", "LastEditDate": "2012-04-04T08:54:41.053"}, "10007932": {"LastActivityDate": "2012-04-04T08:56:55.250", "ParentId": "10007596", "Id": "10007932", "Score": "4", "Body": "<p><code>typeid</code> ignores cv qualifiers, as per the C++ standard (taken from \u00a75.2.8 from ISO/IEC 14882:2003) :</p>\n<blockquote>\n<p id=\"so_10007596_10007932_0\">The top-level cv-qualifiers of the lvalue expression or the type-id that is the operand of typeid are always\n  ignored. [Example:</p>\n</blockquote>\n<pre><code>class D { ... };\nD d1;\nconst D d2;\n\ntypeid(d1) == typeid(d2);       // yields true\ntypeid(D) == typeid(const D);   // yields true\ntypeid(D) == typeid(d2);        // yields true\ntypeid(D) == typeid(const D&amp;);  // yields true\n</code></pre>\n<blockquote>\n<p id=\"so_10007596_10007932_1\">\u2014end example]</p>\n</blockquote>\n<p>So, the result you're seeing is expected.</p>\n", "CommentCount": "0", "PostTypeId": "2", "OwnerUserId": "822669", "CreationDate": "2012-04-04T08:56:55.250"}, "bq_ids": {"n3337": {"so_10007596_10007932_0": {"section_id": 5792, "quality": 0.7272727272727273, "length": 8}}}});