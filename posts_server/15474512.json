post_cb({"15474512": {"ViewCount": "670", "Body": "<p>Why does the assignment operator is allowed to return void? And why does assignment chaining works in this case? Take a look at the code, it will be very clear what am I talking about.</p>\n<p><strong>Code:</strong></p>\n<pre><code>struct Foo\n{\n   std::string str;\n\n   Foo(const std::string&amp; _str)\n   : str(_str)\n   {\n   }\n\n   Foo&amp; operator=(const Foo&amp; _foo)\n   {    \n      str = _foo.str;\n      //return *this; /* NO RETURN! */\n   }\n};\n\nint main()\n{\n   Foo f1(\"1\");\n   Foo f2(\"2\");\n   Foo f3(\"3\");\n   f1 = f2 = f3 = Foo(\"4\");\n\n   std::cout &lt;&lt; \"f1: \" &lt;&lt; f1.str &lt;&lt; std::endl;\n   std::cout &lt;&lt; \"f2: \" &lt;&lt; f2.str &lt;&lt; std::endl;\n   std::cout &lt;&lt; \"f3: \" &lt;&lt; f3.str &lt;&lt; std::endl;\n\n   return 0;\n}\n</code></pre>\n<p><strong>Questions:</strong></p>\n<ol>\n<li>Why is this legal? (why does it compile at all)</li>\n<li>Why does it work?</li>\n</ol>\n<p>I've read in many places \"assignment operator should return *<em>this</em> so that you can have assignment chaining\" which totally makes sense, but then why does the above work?</p>\n<p><strong>Try it out:</strong>\n<br/>\n<a href=\"http://liveworkspace.org/code/1ghzjD%246\" rel=\"nofollow\">online c++ workspace with the code from above</a></p>\n", "AcceptedAnswerId": "15474559", "Title": "Overloading assignment operator without return statement", "CreationDate": "2013-03-18T10:26:06.597", "Id": "15474512", "CommentCount": "1", "LastEditDate": "2013-03-18T10:27:40.183", "PostTypeId": "1", "LastEditorUserId": "635608", "LastActivityDate": "2013-03-18T10:40:37.980", "Score": "4", "OwnerUserId": "1862759", "Tags": "<c++><assignment-operator>", "AnswerCount": "4"}, "15474559": {"Id": "15474559", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_15474512_15474559_0\">Why is this legal? (why does it compile at all)</p>\n</blockquote>\n<p>This is <strong>not</strong> legal, and injects <strong>Undefined Behavior</strong> in your program. Your compiler should at least warn you about that (and I believe it does, if you set a sufficiently high warning level).</p>\n<p>Per Paragraph 6.6.3/2 of the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_15474512_15474559_1\">Flowing off the end of a function is equivalent to a return with no value; <strong>this results in undefined\n  behavior in a value-returning function</strong>.</p>\n</blockquote>\n<p>The only exception is the <code>main()</code> function, which is allowed to have a missing <code>return</code> statement. Per Paragraph 3.6.1/5:</p>\n<blockquote>\n<p id=\"so_15474512_15474559_2\">A return statement in <code>main</code> has the effect of leaving the <code>main</code> function (destroying any objects with automatic\n  storage duration) and calling <code>std::exit</code> with the return value as the argument. <strong>If control reaches the end\n  of <code>main</code> without encountering a return statement, the effect is that of executing</strong></p>\n<pre><code>return 0;\n</code></pre>\n</blockquote>\n<p>Finally:</p>\n<blockquote>\n<p id=\"so_15474512_15474559_3\">Why does it work?</p>\n</blockquote>\n<p>Undefined Behavior means that your program may run on some machines but not on others; or it may run on all machines today, but not tomorrow; or it will cause your program to have some bizarre, unpredictable outcome; including (which is the <em>worst</em> case) seeming to run perfectly fine.</p>\n", "LastEditorUserId": "1932150", "LastActivityDate": "2013-03-18T10:34:23.287", "Score": "7", "CreationDate": "2013-03-18T10:27:58.577", "ParentId": "15474512", "CommentCount": "3", "OwnerUserId": "1932150", "LastEditDate": "2013-03-18T10:34:23.287"}, "15474566": {"Id": "15474566", "PostTypeId": "2", "Body": "<p>What you have is <em>undefined behaviour</em>, because you  are flowing off the end of a function that promises to return something. </p>\n<p>The only function for which it is legal to do this in C++ is <code>int main()</code> (and version with arguments), because it implicitly returns <code>0</code> in the absence of a return statement.</p>\n", "LastActivityDate": "2013-03-18T10:28:24.847", "CommentCount": "0", "CreationDate": "2013-03-18T10:28:24.847", "ParentId": "15474512", "Score": "2", "OwnerUserId": "661519"}, "15474827": {"Id": "15474827", "PostTypeId": "2", "Body": "<p>Its illegal and if it compiles then in a way it is storing something weird for the runtime. And you must return *this from this function.  The correct function definition will look like</p>\n<pre><code>Foo&amp; operator=(const Foo&amp; _foo)\n{    \n  if(this == &amp;_foo) /* check for self-assignment */\n     return *this;\n\n  str = _foo.str;\n\n  return *this;\n}\n</code></pre>\n<p>Returning *this is must for chain assignments like</p>\n<pre><code>Foo  x, y, z;\nx = y = z;     /* *this is necessary for this statement */    \n</code></pre>\n", "LastActivityDate": "2013-03-18T10:40:37.980", "CommentCount": "0", "CreationDate": "2013-03-18T10:40:37.980", "ParentId": "15474512", "Score": "0", "OwnerUserId": "646210"}, "bq_ids": {"n4140": {"so_15474512_15474559_2": {"length": 26, "quality": 1.0, "section_id": 7149}, "so_15474512_15474559_1": {"length": 12, "quality": 1.0, "section_id": 3913}}, "n3337": {"so_15474512_15474559_2": {"length": 26, "quality": 1.0, "section_id": 6893}, "so_15474512_15474559_1": {"length": 12, "quality": 1.0, "section_id": 3773}}, "n4659": {"so_15474512_15474559_2": {"length": 21, "quality": 0.8076923076923077, "section_id": 8650}, "so_15474512_15474559_1": {"length": 9, "quality": 0.75, "section_id": 4799}}}, "15474756": {"Id": "15474756", "PostTypeId": "2", "Body": "<p>Check what asm code is produced after compiling. My guess is that this function returns what happens to be in register AX (this is c-call standard function implementation if I'm not mistaken). In your case, it happens to be what you are wanting it to be... if you add some functionality to function you might break it...</p>\n", "LastActivityDate": "2013-03-18T10:37:22.917", "CommentCount": "0", "CreationDate": "2013-03-18T10:37:22.917", "ParentId": "15474512", "Score": "0", "OwnerUserId": "2181927"}});