post_cb({"43849659": {"ViewCount": "202", "Body": "<p>There is a clear and comprehensible list of contexts in which a pack expansion can occur on <a href=\"http://en.cppreference.com/w/cpp/language/parameter_pack\" rel=\"nofollow noreferrer\">cppreference.com</a>. What I am trying to do is to derive the same information from the standard, partly to gain experience in using the standard. However, I am unable to derive all pack expansion contexts listed on cppreference.com from the standard.</p>\n<p>cppreference.com lists, among others, the following four contexts: function argument lists, template argument lists, function parameter lists and template parameter lists.</p>\n<p>On the other hand, the standard says (14.5.3.4):</p>\n<blockquote>\n<p id=\"so_43849659_43849659_0\">A pack expansion consists of a pattern and an ellipsis, the instantiation of which produces zero or more instantiations of the pattern in a list (described below). The form of the pattern depends on the context in which the expansion occurs. Pack expansions can occur in the following contexts:</p>\n<ul>\n<li>In a function parameter pack (8.3.5); the pattern is the parameter-declaration without the ellipsis.</li>\n<li>In a template parameter pack that is a pack expansion (14.1):\n  \n  <ul>\n<li>if the template parameter pack is a parameter-declaration; the pattern is the parameter-declaration without the ellipsis;</li>\n<li>if the template parameter pack is a type-parameter with a template-parameter-list; the pattern is the corresponding type-parameter without the ellipsis.</li>\n</ul></li>\n<li>...</li>\n<li>In a template-argument-list (14.3); the pattern is a template-argument.</li>\n<li>...</li>\n</ul>\n</blockquote>\n<p>I am unable to find out where the standard says that pack expansion can occur in function argument lists. I suppose this context is somehow covered by one of the three bullet points quoted above.</p>\n<p>Just in case it is unclear what I mean by pack expansions in function argument lists, consider the following example:</p>\n<pre><code>template &lt;typename ...Args&gt; void f(Args ...args) {}\ntemplate &lt;typename ...Args&gt; void g(Args ...args) {\n  f(args...); // Pack expansion in a function argument list.\n}\n</code></pre>\n", "AcceptedAnswerId": "43852552", "Title": "Contexts in which pack expansions can occur", "CreationDate": "2017-05-08T13:59:46.147", "Id": "43849659", "CommentCount": "4", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2017-05-08T14:32:28.467", "LastEditorUserId": "1494080", "LastActivityDate": "2017-05-09T06:44:51.640", "Score": "5", "OwnerUserId": "1494080", "Tags": "<c++><c++11><variadic-templates>", "AnswerCount": "1"}, "43852552": {"Id": "43852552", "PostTypeId": "2", "Body": "<p>A function argument list is syntactically an <em>initializer-list</em><sup>1</sup>, so it's covered by <a href=\"http://eel.is/c++draft/temp.variadic#4.4\" rel=\"nofollow noreferrer\">[temp.variadic]/(4.4)</a>:</p>\n<blockquote>\n<p id=\"so_43849659_43852552_0\">In an <em>initializer-list</em>; the pattern is an <em>initializer-clause</em>.</p>\n</blockquote>\n<hr>\n<p><sub>1. The grammar of a function call is <em>postfix-expression</em> <strong>(</strong> <em>expression-list</em><sub>opt</sub> <strong>)</strong>. And an <em>expression-list</em> is just an <em>initializer-list</em>. (<a href=\"http://eel.is/c++draft/expr.post\" rel=\"nofollow noreferrer\">[expr.post]</a>)</sub></p>\n</hr>", "LastEditorUserId": "4672588", "LastActivityDate": "2017-05-09T06:44:51.640", "Score": "5", "CreationDate": "2017-05-08T16:18:31.517", "ParentId": "43849659", "CommentCount": "0", "LastEditDate": "2017-05-09T06:44:51.640", "OwnerUserId": "4672588"}, "bq_ids": {"n4140": {"so_43849659_43849659_0": {"length": 26, "quality": 0.9629629629629629, "section_id": 121}}, "n3337": {"so_43849659_43849659_0": {"length": 26, "quality": 0.9629629629629629, "section_id": 116}}, "n4659": {"so_43849659_43849659_0": {"length": 24, "quality": 0.8888888888888888, "section_id": 125}}}});