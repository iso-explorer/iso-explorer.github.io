post_cb({"41769636": {"ParentId": "41769510", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>This part of your quote is more definitive than the note you emphasized:</p>\n<blockquote>\n<p id=\"so_41769510_41769636_0\">The friend declaration does not by itself make the name visible to unqualified lookup ([basic.lookup.unqual]) or qualified lookup ([basic.lookup.qual]).</p>\n</blockquote>\n<p>Your definition relies on qualified lookup to find a function already declared inside the namespace.  But the name is not visible to qualified lookup.  This code should be rejected.</p>\n<p>Here's a related rule, found in secion 8.3 <code>[dcl.meaning]</code>:</p>\n<blockquote>\n<p id=\"so_41769510_41769636_1\">When the declarator-id is qualified, the declaration shall refer to a previously declared member of the class or namespace to which the quali\ufb01er refers (or, in the case of a namespace, of an element of the inline namespace set of that namespace) or to a specialization thereof; the member shall not merely have been introduced by a using-declaration in the scope of the class or namespace nominated by the nested-name-specifier of the declarator-id .</p>\n</blockquote>\n", "OwnerUserId": "103167", "LastEditorUserId": "103167", "LastEditDate": "2017-01-20T17:59:29.933", "Id": "41769636", "Score": "6", "CreationDate": "2017-01-20T17:52:58.550", "LastActivityDate": "2017-01-20T17:59:29.933"}, "41769510": {"CommentCount": "1", "ViewCount": "183", "CreationDate": "2017-01-20T17:44:40.930", "LastActivityDate": "2017-01-20T17:59:29.933", "Title": "VS2015 and clang compile this code, but g++ rejects it. Which one is correct?", "AcceptedAnswerId": "41769636", "PostTypeId": "1", "Id": "41769510", "Score": "9", "Body": "<p><code>VS2015</code> and <code>clang</code> compile this code, but <a href=\"http://coliru.stacked-crooked.com/a/a59ce39b08701fab\"><code>g++</code> rejects it</a>.</p>\n<pre><code>namespace A {\n   struct B {\n      friend void f();\n   };\n}\nvoid A::f() {}\n\nint main(){\n}\n</code></pre>\n<p>I think g++ is right because of this Note in <a href=\"http://eel.is/c++draft/namespace.memdef#3\">7.3.1.2/3</a>:</p>\n<blockquote>\n<p id=\"so_41769510_41769510_0\">If a friend declaration in a non-local class first declares a class,\n  function, class template or function template<sup>97</sup> the friend is a member\n  of the innermost enclosing namespace. The friend declaration does not\n  by itself make the name visible to unqualified lookup\n  ([basic.lookup.unqual]) or qualified lookup ([basic.lookup.qual]).\n  [\u2009Note: <strong>The name of the friend will be visible in its namespace if a\n  matching declaration is provided at namespace scope (either before or\n  after the class definition granting friendship).</strong> \u2009\u2014\u2009end note\u2009] If a\n  friend function or function template is called, its name may be found\n  by the name lookup that considers functions from namespaces and\n  classes associated with the types of the function arguments\n  ([basic.lookup.argdep]). If the name in a friend declaration is\n  neither qualified nor a template-id and the declaration is a function\n  or an elaborated-type-specifier, the lookup to determine whether the\n  entity has been previously declared shall not consider any scopes\n  outside the innermost enclosing namespace. [\u2009Note: The other forms of\n  friend declarations cannot declare a new member of the innermost\n  enclosing namespace and thus follow the usual lookup rules. \u2009\u2014\u2009end\n  note\u2009]</p>\n</blockquote>\n", "Tags": "<c++><namespaces><language-lawyer><friend>", "OwnerUserId": "4463557", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_41769510_41769636_1": {"section_id": 3208, "quality": 0.9696969696969697, "length": 32}, "so_41769510_41769636_0": {"section_id": 5485, "quality": 0.7857142857142857, "length": 11}, "so_41769510_41769510_0": {"section_id": 5485, "quality": 0.8869565217391304, "length": 102}}, "n3337": {"so_41769510_41769636_1": {"section_id": 3082, "quality": 0.9696969696969697, "length": 32}, "so_41769510_41769510_0": {"section_id": 5271, "quality": 0.7565217391304347, "length": 87}}, "n4659": {"so_41769510_41769636_1": {"section_id": 3965, "quality": 0.9696969696969697, "length": 32}, "so_41769510_41769510_0": {"section_id": 6920, "quality": 0.8869565217391304, "length": 102}, "so_41769510_41769636_0": {"section_id": 6920, "quality": 0.7857142857142857, "length": 11}}}});