post_cb({"bq_ids": {"n4140": {"so_37493026_38714121_1": {"length": 9, "quality": 1.0, "section_id": 336}, "so_37493026_38714121_0": {"length": 18, "quality": 0.9473684210526315, "section_id": 336}}, "n3337": {"so_37493026_38714121_1": {"length": 9, "quality": 1.0, "section_id": 326}, "so_37493026_38714121_0": {"length": 18, "quality": 0.9473684210526315, "section_id": 326}}, "n4659": {"so_37493026_38714121_1": {"length": 9, "quality": 1.0, "section_id": 345}, "so_37493026_38714121_0": {"length": 18, "quality": 0.9473684210526315, "section_id": 345}}}, "38714121": {"Id": "38714121", "PostTypeId": "2", "Body": "<p>I believe that this code is incorrect. The function parameter to <code>Log</code> cannot be used for template argument deduction in this case because the argument is a non-deduced context.</p>\n<p>From [temp.deduct.type] in the standard, p5 lists the non-deduced contexts, and p5.5 says:</p>\n<blockquote>\n<p id=\"so_37493026_38714121_0\">A function parameter for which argument deduction cannot be done\n  because the associated function argument is a function, or a set of\n  overloaded functions (13.4), and one or more of the following apply:</p>\n</blockquote>\n<p>and p5.5.3 says:</p>\n<blockquote>\n<p id=\"so_37493026_38714121_1\">the set of functions supplied as an argument contains one or more\n  function templates.</p>\n</blockquote>\n<p>My interpretation is that you have a function parameter for which the function argument is a (pointer to) a function and that function is a function template.</p>\n<p>Arguably, because this isn't an overload set, this might be something that could be allowed in the future, but I read the standard as not guaranteeing that this technique will work.</p>\n", "LastActivityDate": "2016-08-02T07:21:04.180", "CommentCount": "0", "CreationDate": "2016-08-02T07:21:04.180", "ParentId": "37493026", "Score": "3", "OwnerUserId": "552038"}, "37493026": {"ViewCount": "1271", "Body": "<p>This code works perfectly fine with gcc/g++ and msvc but not with clang.\nIt keeps complaining that no matching function for Log was found, what is going on?</p>\n<pre><code>#include &lt;iostream&gt;\n\ntemplate &lt;typename Function, typename... Args&gt;\nauto Call(Function func, Args&amp;&amp;... args) -&gt; typename std::result_of&lt;Function&amp;(Args&amp;&amp;...)&gt;::type\n{\n    return func(std::forward&lt;Args&gt;(args)...);\n}\n\ntemplate &lt;typename T, typename... Args&gt;\nT (*Log( T (*FuncPtr)(Args...) ))(Args...)\n{\n    return FuncPtr;\n}\n\nint main()\n{\n    auto r = Log(Call&lt;int(int), int&gt;)([](int x){\n        return x*10;\n    }, 10);\n    std::cerr &lt;&lt; r &lt;&lt; std::endl;\n}\n</code></pre>\n<p>Error:</p>\n<pre><code>&gt; error: no matching function for call to 'Log'\n&gt;     auto r = Log(Call&lt;int(int), int&gt;)([](int x){\n&gt;              ^~~ test7.cpp:15:5: note: candidate template ignored: couldn't infer template argument 'T' T (*Log( T (*FuncPtr)(Args...)\n&gt; ))(Args...)\n&gt;     ^ 1 error generated.\n</code></pre>\n", "Title": "Why does this code compile with gcc but not with clang", "CreationDate": "2016-05-27T22:16:34.353", "LastActivityDate": "2016-08-02T07:21:04.180", "CommentCount": "9", "FavoriteCount": "6", "PostTypeId": "1", "LastEditDate": "2016-08-01T23:12:26.753", "LastEditorDisplayName": "user6175963", "OwnerDisplayName": "user6175963", "LastEditorUserId": "1848578", "Id": "37493026", "Score": "30", "Tags": "<c++><c++11><g++><clang++>", "AnswerCount": "1"}});