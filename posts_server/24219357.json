post_cb({"bq_ids": {"n4140": {"so_24219357_24219411_1": {"length": 15, "quality": 0.8823529411764706, "section_id": 165}, "so_24219357_24219411_2": {"length": 15, "quality": 0.8823529411764706, "section_id": 165}}, "n3337": {"so_24219357_24219411_1": {"length": 15, "quality": 0.8823529411764706, "section_id": 159}, "so_24219357_24219411_2": {"length": 15, "quality": 0.8823529411764706, "section_id": 159}}, "n4659": {"so_24219357_24219411_1": {"length": 15, "quality": 0.8823529411764706, "section_id": 169}, "so_24219357_24219411_2": {"length": 15, "quality": 0.8823529411764706, "section_id": 169}}}, "24219357": {"ViewCount": "731", "Body": "<p>I want to alias a type so that it can be given a template argument if necessary. </p>\n<pre><code>template&lt;typename T, unsigned d&gt;\nstruct value\n{\n    T a[d];\n};\n\ntemplate&lt;typename T=float&gt;\nusing val=value&lt;T, 2&gt;;\n\nint main()\n{\n    val v;      //should now be equal to val&lt;float&gt; v;\n    val&lt;int&gt; w; //should also be valid.\n    return 0;\n}\n</code></pre>\n<p>G++ does not approve for some reason:</p>\n<pre><code>test.cpp: In function \u2018int main()\u2019:\ntest.cpp:12:13: error: missing template arguments before \u2018v\u2019\n         val v;      //should now be equal to val&lt;float&gt; v;\n             ^\ntest.cpp:12:13: error: expected \u2018;\u2019 before \u2018v\u2019\n</code></pre>\n<p>Do default template arguments not work with 'using'?\nIf so, why does it not say so on the line the default argument is specified on?</p>\n", "AcceptedAnswerId": "24219411", "Title": "Default template arguments for the C++11 'using' type alias", "CreationDate": "2014-06-14T11:15:01.017", "Id": "24219357", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2014-06-15T13:28:37.927", "Score": "4", "OwnerUserId": "1534958", "Tags": "<templates><c++11><using>", "AnswerCount": "2"}, "24219411": {"Id": "24219411", "PostTypeId": "2", "Body": "<h3>Introduction</h3>\n<p>Having default values for <em>template-parameters</em> in a <em>alias-template</em> <strong>is</strong> legal, but you cannot leave out <code>&lt;</code>, and <code>&gt;</code>, when you are later using said alias.</p>\n<pre class=\"lang-cpp prettyprint-override\"><code>template&lt;class T = float&gt;\nusing val = value&lt;T, 2&gt;;\n\nval&lt;&gt;    v; // legal, decltype(v) =&gt; value&lt;float, 2&gt;\nval&lt;int&gt; w; // legal, decltype(w) =&gt; value&lt;int,   2&gt;\n</code></pre>\n<hr>\n<h3>What does the Standard say? (<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf\">n3337</a>)</h3>\n<blockquote>\n<p id=\"so_24219357_24219411_0\"><code>14.5.7p1</code> <strong>Alias templates</strong> <code>[temp.alias]</code></p>\n<blockquote>\n<p id=\"so_24219357_24219411_2\">A <em>template-declaration</em> in which the <em>declaration</em> is an <em>alias-declaration</em> (Clause 7) declares the <em>identifier</em> to be a <em>alias-template</em>. An alias template is a name for a family of types. The name of the alias template is a <em>template-name</em>.</p>\n</blockquote>\n</blockquote>\n<p>The above states that the name introduced by a <em>template-alias</em> is a <em>template-name</em>, and a <em>template-name</em> must be followed by a <em>template-argument-list</em>.</p>\n<blockquote>\n<p id=\"so_24219357_24219411_3\"><code>14.2p1</code> <strong>Names of template specialization</strong> <code>[temp.names]</code></p>\n<blockquote id=\"so_24219357_24219411_4\">\n<pre class=\"lang-none prettyprint-override\"><code>simple-template-id:\n  template-name &lt; template-argument-list_opt &gt;\n\ntemplate-name:\n  identifier\n</code></pre>\n</blockquote>\n</blockquote>\n<p><sup><strong>Note</strong>: Notice how the two <code>&lt;&gt;</code> are not optional when referring to a <em>simple-template-id</em>, and that a <em>template-name</em> by itself is merely an identifier, not a type.</sup></p>\n</hr>", "LastEditorUserId": "1090079", "LastActivityDate": "2014-06-14T11:36:18.553", "Score": "10", "CreationDate": "2014-06-14T11:22:34.083", "ParentId": "24219357", "CommentCount": "0", "OwnerUserId": "1090079", "LastEditDate": "2014-06-14T11:36:18.553"}, "24219399": {"Id": "24219399", "PostTypeId": "2", "Body": "<p>You can use only function templates without <code>&lt;&gt;</code>. For classes empty list of template parameters is necessary:</p>\n<pre><code>    val&lt;&gt; v;    //should now be equal to val&lt;float&gt; v;\n</code></pre>\n", "LastEditorUserId": "3175480", "LastActivityDate": "2014-06-15T13:28:37.927", "Score": "3", "CreationDate": "2014-06-14T11:20:35.870", "ParentId": "24219357", "CommentCount": "0", "OwnerUserId": "3175480", "LastEditDate": "2014-06-15T13:28:37.927"}});