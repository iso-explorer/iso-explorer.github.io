post_cb({"39770060": {"Id": "39770060", "PostTypeId": "2", "Body": "<p>Per <strong>[expr.prim.lambda]</strong>:</p>\n<blockquote>\n<p id=\"so_39766467_39770060_0\">8 - [...] [For] purposes of name lookup (3.4) [...] the compound-statement is considered in the context of the lambda-expression. [...]</p>\n</blockquote>\n<p><a href=\"https://godbolt.org/g/EG9Zv0\">MCVE</a>:</p>\n<pre><code>template&lt;int&gt;\nstruct S {\n  template&lt;int&gt; static void f();\n  S() { void(*g)(char) = [](auto) { f&lt;0&gt;; }; }\n};\nS&lt;0&gt; s;\n</code></pre>\n<p>Hoisting the compound-statement to the context of the lambda-expression gives a clearly valid program:</p>\n<pre><code>template&lt;int&gt;\nstruct S {\n  template&lt;int&gt; static void f();\n  S() { f&lt;0&gt;; }\n};\nS&lt;0&gt; s;\n</code></pre>\n<p>So yes, this is a bug in gcc.</p>\n", "LastActivityDate": "2016-09-29T12:15:01.560", "CommentCount": "0", "CreationDate": "2016-09-29T12:15:01.560", "ParentId": "39766467", "Score": "8", "OwnerUserId": "567292"}, "bq_ids": {"n4140": {"so_39766467_39770060_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 5966}}, "n3337": {"so_39766467_39770060_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 5735}}, "n4659": {"so_39766467_39770060_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 7460}}}, "39766467": {"ViewCount": "251", "Body": "<p>I found a problem that I guess is due to a bug in GCC.<br>\nAnyway, before opening an issue, I would like to be sure.</br></p>\n<p>Consider the code below:</p>\n<pre><code>#include&lt;algorithm&gt;\n#include&lt;list&gt;\n\ntemplate&lt;typename U&gt;\nstruct S {\n    using FT = void(*)(); \n    struct T { FT func; };\n\n    template&lt;typename&gt; \n    static void f() { } \n\n    std::list&lt;T&gt; l{ { &amp;f&lt;int&gt; }, { &amp;f&lt;char&gt; } };\n\n    void run() {  \n        l.remove_if([](const T &amp;t) { return t.func == &amp;f&lt;int&gt;; }); // (1)\n        l.remove_if([](const auto &amp;t) { return t.func == &amp;f&lt;int&gt;; }); // (2)\n    }\n};\n\nint main() {\n    S&lt;void&gt; s;\n    s.run();\n}\n</code></pre>\n<p>clang v3.9 <a href=\"https://godbolt.org/g/I7wdmG\" rel=\"nofollow\">compiles both <em>(1)</em> and <em>(2)</em></a> as expected.<br>\nGCC v6.2 <a href=\"https://godbolt.org/g/jaJtZo\" rel=\"nofollow\">compiles <em>(1)</em></a>, but it <a href=\"https://godbolt.org/g/2vMl5o\" rel=\"nofollow\">doesn't compile <em>(2)</em></a>.<br>\nThe returned error is:</br></br></p>\n<blockquote>\n<p id=\"so_39766467_39766467_0\">error: 'f' was not declared in this scope</p>\n</blockquote>\n<p>Moreover, note that GCC <a href=\"https://godbolt.org/g/eqwx1C\" rel=\"nofollow\">compiles <em>(2)</em></a> if it is modified as it follows:</p>\n<pre><code>l.remove_if([](const auto &amp;t) { return t.func == &amp;S&lt;U&gt;::f&lt;int&gt;; }); // (2)\n</code></pre>\n<p>As far as I know, using an <code>const auto &amp;</code> instead of <code>const T &amp;</code> should not alter the behavior in this case.</p>\n<p>Is it a bug of GCC?</p>\n", "AcceptedAnswerId": "39770060", "Title": "std::list::remove_if goes crazy if combined with a generic lambda", "CreationDate": "2016-09-29T09:25:25.230", "Id": "39766467", "CommentCount": "17", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2016-09-29T11:25:44.460", "LastEditorUserId": "2883245", "LastActivityDate": "2016-09-29T12:15:01.560", "Score": "12", "OwnerUserId": "4987285", "Tags": "<gcc><lambda><clang><c++14><language-lawyer>", "AnswerCount": "1"}});