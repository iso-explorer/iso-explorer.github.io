post_cb({"bq_ids": {"n4140": {"so_20192064_20192160_0": {"section_id": 21, "quality": 0.9743589743589743, "length": 38}}, "n3337": {"so_20192064_20192160_0": {"section_id": 18, "quality": 0.9743589743589743, "length": 38}}, "n4659": {"so_20192064_20192160_0": {"section_id": 21, "quality": 0.9743589743589743, "length": 38}}}, "20192064": {"CommentCount": "2", "ViewCount": "213", "PostTypeId": "1", "LastEditorUserId": "205233", "CreationDate": "2013-11-25T11:34:24.003", "LastActivityDate": "2013-11-25T11:42:50.730", "Title": "compare 8bit value against 16bit value", "AcceptedAnswerId": "20192160", "LastEditDate": "2013-11-25T11:36:01.433", "Id": "20192064", "Score": "1", "Body": "<p>I was wondering what happens when an 8bit value is compared against a 16bit value.</p>\n<p>I'll try to explain the problem by a code example:</p>\n<pre><code>bool result;\nunsigned char a_8bit = 0xcd;\nunsigned short b_16bit = 0xabcd;\nresult = a_8bit &lt; b_16bit;\n</code></pre>\n<p>Possible results can be: </p>\n<ul>\n<li>a_8bit is casted to unsigned short implicitly and compared to b_16bit as a 16bit value. Result is true</li>\n<li>b_16bit is casted to unsigned char implicitly and compared to a_8bit as an 8bit value. Result is false</li>\n</ul>\n<p>Does anybody has a clue what the compiler will do with this piece of code? Sure, i can try it out, but are there different interpretations by different compilers of this code?</p>\n", "Tags": "<c++><compiler-construction><compare>", "OwnerUserId": "1846901", "AnswerCount": "3"}, "20192199": {"ParentId": "20192064", "CommentCount": "0", "Body": "<p>Normal integer promotion rules apply, see for example: <a href=\"http://www.idryman.org/blog/2012/11/21/integer-promotion/\" rel=\"nofollow\">http://www.idryman.org/blog/2012/11/21/integer-promotion/</a></p>\n", "OwnerUserId": "2675156", "PostTypeId": "2", "Id": "20192199", "Score": "0", "CreationDate": "2013-11-25T11:42:50.730", "LastActivityDate": "2013-11-25T11:42:50.730"}, "20192139": {"ParentId": "20192064", "CommentCount": "0", "Body": "<p>The first, although to be precise, both are converted to unsigned and then compared.</p>\n", "OwnerUserId": "882003", "PostTypeId": "2", "Id": "20192139", "Score": "1", "CreationDate": "2013-11-25T11:39:06.600", "LastActivityDate": "2013-11-25T11:39:06.600"}, "20192160": {"ParentId": "20192064", "CommentCount": "4", "Body": "<blockquote>\n<p id=\"so_20192064_20192160_0\"><sup>1</sup> A prvalue of an integer type other than bool, char16_t, char32_t, or wchar_t whose integer conversion rank (4.13) is less than the rank of int can be converted to a prvalue of type int if int can represent all the values of the source type; otherwise, the source prvalue can be converted to a prvalue of type unsigned int. [\u00a7 4.5]</p>\n</blockquote>\n<p>So, compiler can promote both of them to <code>unsigned int</code> and then do the comparison.</p>\n", "OwnerUserId": "952747", "PostTypeId": "2", "Id": "20192160", "Score": "2", "CreationDate": "2013-11-25T11:40:29.900", "LastActivityDate": "2013-11-25T11:40:29.900"}});