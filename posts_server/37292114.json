post_cb({"37292160": {"Id": "37292160", "PostTypeId": "2", "Body": "<p>The binary expression:</p>\n<pre><code>x[y]\n</code></pre>\n<p>is defined to be equal to:</p>\n<pre><code>*(x+y)\n</code></pre>\n<p>(in the absence of <code>operator []</code> overloads). </p>\n<p><code>3+a</code> is the same as <code>a+3</code> so <code>3[a]</code> is the same as <code>a[3]</code>.</p>\n<p>In the context of <code>3+a</code>, the name of array <code>a</code> decays to a pointer to its first element, so we are trying to add a pointer and an integer using the builtin addition operator.  <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4296.pdf\" rel=\"nofollow\">The latest draft of C++14</a> says in section 5.7 [expr.add] para 4:</p>\n<blockquote>\n<p id=\"so_37292114_37292160_0\">When an expression that has integral type is added to or subtracted from a pointer, the result has the type\n  of the pointer operand. If the pointer operand points to an element of an array, and the array is\n  large enough, the result points to an element offset from the original element such that the difference of the subscripts of the resulting and original array elements equals the integral expression. In other words, if\n  the expression P points to the i-th element of an array object, the expressions (P)+N (equivalently, N+(P))\n  and (P)-N (where N has the value n) point to, respectively, the i + n-th and i \u2212 n-th elements of the array\n  object, provided they exist</p>\n</blockquote>\n<p>This is very close to the text of the C++14 standard, but this behaviour has been stable since C89 (and actually since BCPL in the '70s).</p>\n<p>Having said that, if you find code like this hunt down the author and beat him over the head with a clue-bat.  It is very easy to write C++ that nobody (including yourself after a week) can read - and that is no use to anyone.</p>\n", "LastEditorUserId": "771073", "LastActivityDate": "2016-05-18T07:02:29.687", "CommentCount": "6", "CreationDate": "2016-05-18T06:47:09.983", "ParentId": "37292114", "Score": "10", "OwnerUserId": "771073", "LastEditDate": "2016-05-18T07:02:29.687"}, "bq_ids": {"n4140": {"so_37292114_37292160_0": {"length": 55, "quality": 0.9649122807017544, "section_id": 6142}}, "n3337": {"so_37292114_37292160_0": {"length": 55, "quality": 0.9649122807017544, "section_id": 5906}}}, "37292114": {"ViewCount": "91", "Body": "<p>Can anyone explain me why this is possible ?.\nI understand that a is the same as &amp;a[0] and for example i also understand that \n*(a+1) is second a element and  i am able to use *((a+i)+j) techniques, but first time in my life i saw code like this and i am confused now.\nI know that output is fourth element of the a array. But can anyone explain me why this is possible ?</p>\n<pre><code>#include&lt;iostream&gt;\nint a[] = {1,2,3,4,5};\nstd::cout &lt;&lt; (3)[a] &lt;&lt; std::endl; \n</code></pre>\n", "Title": "C++ issue about arrays", "CreationDate": "2016-05-18T06:44:32.943", "LastActivityDate": "2016-05-18T07:02:29.687", "CommentCount": "1", "LastEditDate": "2016-05-18T06:45:13.173", "PostTypeId": "1", "LastEditorUserId": "2455888", "Id": "37292114", "ClosedDate": "2016-05-18T07:04:43.547", "Score": "2", "OwnerUserId": "2667455", "Tags": "<c++><c++11><include>", "AnswerCount": "1"}});