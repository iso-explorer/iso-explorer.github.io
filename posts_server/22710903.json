post_cb({"22711000": {"Id": "22711000", "PostTypeId": "2", "Body": "<p>You cannot change the signature of the main method.  All code that invokes a process uses the same interface with a single int returned - how would you expect to retrieve these extra ints in whatever code is invoking the process?</p>\n<p>However - if you need to combine multiple pieces of information, you can still encode them into a single int value.  For example you could interpret the decimal digits separately, allowing you to return ten or more values each taking values from 0-9.  Or for a different example, you may combine 32 binary flags to make up the integer value.  Whether this is useful depends on your use case.</p>\n", "LastActivityDate": "2014-03-28T11:01:38.337", "CommentCount": "0", "CreationDate": "2014-03-28T11:01:38.337", "ParentId": "22710903", "Score": "0", "OwnerUserId": "1823225"}, "22711012": {"Id": "22711012", "PostTypeId": "2", "Body": "<p>In C++ main must indeed return an int. It is the error code of the program. 0 if everything went well, a positive number otherwise.</p>\n<p>If you want to display an array of int. you can use <code>&lt;iostream&gt;</code>.</p>\n<pre><code>#include &lt;iostream&gt;\n\nint main()\n{\n   int a[]={1,2,3,4,5,6,7,8};\n   for (int i = 0; i &lt; 9; i++)\n       std::cout &lt;&lt; a[i] &lt;&lt; std::endl;\n}\n</code></pre>\n<p>You can also choose to write to a file that is going to be read by another program.  </p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;fstream&gt;\n\nint main()\n{\n   int a[]={1,2,3,4,5,6,7,8};\n   ofstream myfile;\n   myfile.open (\"out.txt\");\n   for (int i = 0; i &lt; 9; i++)\n       myfile &lt;&lt; a[i] &lt;&lt; std::endl;\n   myfile.close()\n}\n</code></pre>\n<p>then in the other program</p>\n<pre><code>   std::vector&lt;int&gt; a;\n   ifstream myfile;\n   myfile.open (\"out.txt\");\n   for (int i = 0; i &lt; 9; i++)\n   {\n       int ai;\n       myfile &gt;&gt; ai;\n       a.push_back(ai);\n   }\n   myfile.close()\n</code></pre>\n", "LastEditorUserId": "323547", "LastActivityDate": "2014-03-28T11:13:40.413", "Score": "1", "CreationDate": "2014-03-28T11:01:59.943", "ParentId": "22710903", "CommentCount": "3", "OwnerUserId": "323547", "LastEditDate": "2014-03-28T11:13:40.413"}, "bq_ids": {"n4140": {"so_22710903_22711108_1": {"length": 18, "quality": 0.75, "section_id": 7146}, "so_22710903_22711108_0": {"length": 35, "quality": 0.8536585365853658, "section_id": 7145}, "so_22710903_22710975_0": {"length": 15, "quality": 0.8823529411764706, "section_id": 7146}}, "n3337": {"so_22710903_22711108_1": {"length": 22, "quality": 0.9166666666666666, "section_id": 6890}, "so_22710903_22711108_0": {"length": 35, "quality": 0.8536585365853658, "section_id": 6889}, "so_22710903_22710975_0": {"length": 15, "quality": 0.8823529411764706, "section_id": 6890}}, "n4659": {"so_22710903_22711108_1": {"length": 18, "quality": 0.75, "section_id": 8647}, "so_22710903_22711108_0": {"length": 33, "quality": 0.8048780487804879, "section_id": 8646}, "so_22710903_22710975_0": {"length": 15, "quality": 0.8823529411764706, "section_id": 8647}}}, "22711108": {"Id": "22711108", "PostTypeId": "2", "Body": "<p>main is a special function and C++ standard is specific about its signature:</p>\n<p><strong>C++ Standard n3337 3.6.1</strong></p>\n<blockquote>\n<p id=\"so_22710903_22711108_0\">A program shall contain a global function called main, which is the\n  designated start of the program. It is implementation-defined whether\n  a program in a freestanding environment is required to define a main\n  function. [ Note: In a freestanding environment, start-up and\n  termination is implementation-defined; start- up contains the\n  execution of constructors for objects of namespace scope with static\n  storage duration; termination contains the execution of destructors\n  for objects with static storage duration. \u2014 end note ] </p>\n<p id=\"so_22710903_22711108_1\">An\n  implementation shall not predefine the main function. This function\n  shall not be overloaded. It shall have a return type of type int, but\n  otherwise its type is implementation-defined. All implementations\n  shall allow both of the following definitions of main: </p>\n<p id=\"so_22710903_22711108_2\">int main() { /*\n  ...\n  */ } </p>\n<p id=\"so_22710903_22711108_3\">and </p>\n<p id=\"so_22710903_22711108_4\">int main(int argc, char* argv[]) { /* ...\n  */ }</p>\n</blockquote>\n<hr>\n<blockquote>\n<p id=\"so_22710903_22711108_5\">Is there other way to do this?</p>\n</blockquote>\n<p>Print to a file or display using stream:</p>\n<pre><code>int a[]={1,2,3,4,5,6,7,8};\nfor (int i = 0; i &lt; 9; i++) {\n    std::cout &lt;&lt; a[i] &lt;&lt; std::endl;\n}\n</code></pre>\n<p>or:</p>\n<pre><code>#include &lt;algorithm&gt;\n\nint a[]={1,2,3,4,5,6,7,8};\nstd::copy( a, a + 8, std::ostream_iterator&lt;int&gt;( std::cout,\", \"));\n</code></pre>\n</hr>", "LastEditorUserId": "1141471", "LastActivityDate": "2014-03-28T11:12:02.460", "Score": "1", "CreationDate": "2014-03-28T11:06:08.163", "ParentId": "22710903", "CommentCount": "0", "OwnerUserId": "1141471", "LastEditDate": "2014-03-28T11:12:02.460"}, "22710903": {"ViewCount": "191", "Body": "<p>I want my C++ executable to return int array.</p>\n<pre><code>int* main()\n{\n    int a[]={1,2,3,4,5,6,7,8};\n    return *a;\n}\n</code></pre>\n<p>This will give <code>error: '::main' must return 'int'</code>.\nIs there other way to do this?</p>\n", "AcceptedAnswerId": "22711012", "Title": "Creating executable in c++ which returns int array", "CreationDate": "2014-03-28T10:57:33.867", "Id": "22710903", "CommentCount": "6", "LastEditDate": "2014-03-28T11:02:19.230", "PostTypeId": "1", "LastEditorUserId": "1213934", "LastActivityDate": "2014-03-28T12:11:47.013", "Score": "2", "OwnerUserId": "3153014", "Tags": "<c++>", "AnswerCount": "6"}, "22710956": {"Id": "22710956", "PostTypeId": "2", "Body": "<p>The error is very explicit. <code>main</code>must return an <code>int</code>, not an array. It is simply not possible.</p>\n", "LastActivityDate": "2014-03-28T10:59:52.650", "CommentCount": "0", "CreationDate": "2014-03-28T10:59:52.650", "ParentId": "22710903", "Score": "0", "OwnerUserId": "1213934"}, "22710959": {"Id": "22710959", "PostTypeId": "2", "Body": "<p>You can not do this. The return type of the <code>main</code> function normally indicates only an error code. To output the result of some computation, write your array to a file.</p>\n<p>For example:</p>\n<pre><code>#include &lt;fstream&gt;\nint main()\n{\n    int a[]={1,2,3,4,5,6,7,8};\n    std::ofstream ofs(\"data.tsv\");\n    for(int i=0; i&lt;9; i++) {\n        ofs &lt;&lt; a[i] &lt;&lt; \"\\t\";\n    }\n    return 1;\n}\n</code></pre>\n", "LastEditorUserId": "316448", "LastActivityDate": "2014-03-28T12:11:47.013", "Score": "3", "CreationDate": "2014-03-28T11:00:08.540", "ParentId": "22710903", "CommentCount": "0", "OwnerUserId": "316448", "LastEditDate": "2014-03-28T12:11:47.013"}, "22710975": {"Id": "22710975", "PostTypeId": "2", "Body": "<p>There is no way of doing this. According to the C++ standard, main() has to return <code>int</code>.\nSee section 3.6.1.2 of the standard:</p>\n<blockquote>\n<p id=\"so_22710903_22710975_0\">An implementation shall not predefine the main function. \n     This function shall not be overloaded. \n     It shall have a return type of type int, but otherwise its type is implementation-defined.</p>\n</blockquote>\n", "LastActivityDate": "2014-03-28T11:00:38.863", "CommentCount": "0", "CreationDate": "2014-03-28T11:00:38.863", "ParentId": "22710903", "Score": "0", "OwnerUserId": "3198247"}});