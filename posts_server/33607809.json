post_cb({"33608071": {"ParentId": "33607809", "CommentCount": "0", "Body": "<p>I think [expr.static.cast]/10 answers this. In the current working draft, this reads:</p>\n<blockquote>\n<p id=\"so_33607809_33608071_0\">A value of integral or enumeration type can be explicitly converted to a complete enumeration type. The value is unchanged if the original value is within the range of the enumeration values (7.2). <strong>Otherwise, the behavior\n  is undefined.</strong></p>\n</blockquote>\n<p>In other words, your program has undefined behaviour, since the range of an enumeration type with fixed underlying type (in your case: <code>bool</code>) is the range of that type.</p>\n<p>The change from your quote was affected by the <a href=\"https://github.com/cplusplus/draft/commit/b416ec442dad103d57661007030bca096bd0fd0f\">resolution of CWG1766</a> (<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1766\">issues link</a>); note that the issue is recognized as a defect (so you should forget the original wording).</p>\n", "OwnerUserId": "596781", "PostTypeId": "2", "Id": "33608071", "Score": "6", "CreationDate": "2015-11-09T11:24:49.117", "LastActivityDate": "2015-11-09T11:24:49.117"}, "33607809": {"CommentCount": "4", "AcceptedAnswerId": "33608071", "CreationDate": "2015-11-09T11:08:13.040", "LastActivityDate": "2015-11-09T11:24:49.117", "PostTypeId": "1", "ViewCount": "821", "FavoriteCount": "0", "Title": "Can an out-of-range enum conversion produce a value outside the underlying type?", "Id": "33607809", "Score": "10", "Body": "<p>Consider the following:</p>\n<pre><code>#include &lt;iostream&gt;\n\nenum class E : bool { A, B };\n\nvoid foo(E e)\n{\n    switch(e)\n    {\n    case E::A: break;\n    case E::B: break;\n    default: std::cout &lt;&lt; \"aha\\n\";\n    }\n}\n\nint main()\n{\n    foo( static_cast&lt;E&gt;(3) );\n}\n</code></pre>\n<p>My question is: Can the <code>default</code> case be triggered, i.e. this program generates output?</p>\n<p>The tricky point in N3936 seems to be the specification of <code>static_cast</code> when converting an out-of-range integer to enumeration type, [expr.static.cast]/10:</p>\n<blockquote>\n<p id=\"so_33607809_33607809_0\">A value of integral or enumeration type can be explicitly converted to an enumeration type. The value is unchanged if the original value is within the range of the enumeration values. Otherwise, the resulting\n  value is unspecified <strong>(and might not be in that range)</strong>.</p>\n</blockquote>\n<p>The bolded text does not explicitly say that the value must still be within the range of the underlying type, but I am wondering if it were intended that it did.</p>\n", "Tags": "<c++><language-lawyer><c++14>", "OwnerUserId": "1505939", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_33607809_33608071_0": {"section_id": 6036, "quality": 0.8181818181818182, "length": 18}, "so_33607809_33607809_0": {"section_id": 6036, "quality": 0.9583333333333334, "length": 23}}, "n3337": {"so_33607809_33608071_0": {"section_id": 5804, "quality": 0.8181818181818182, "length": 18}, "so_33607809_33607809_0": {"section_id": 5804, "quality": 0.9583333333333334, "length": 23}}, "n4659": {"so_33607809_33608071_0": {"section_id": 7535, "quality": 0.9545454545454546, "length": 21}, "so_33607809_33607809_0": {"section_id": 7535, "quality": 0.8333333333333334, "length": 20}}}});