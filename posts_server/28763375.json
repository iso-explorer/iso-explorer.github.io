post_cb({"28763375": {"ViewCount": "239", "Body": "<p><code>GCC</code> and <code>Clang</code> do compile the following code:</p>\n<pre><code>void Test()\n{\n   constexpr int Size = 3;\n   auto Lambda = [Size]{ int Dim[Size]; };\n}\n</code></pre>\n<p>However, <code>VisualStudio 2015 CTP 6</code> does not. Nevertheless, all 3 compilers are happy with this code:</p>\n<pre><code>void Test()\n{\n   static constexpr int Size = 3;\n   auto Lambda = []{ int Dim[Size]; };\n}\n</code></pre>\n<p>Which snippet is actually doing it in the correct way? What does the C++ standard say?</p>\n<p>This question is related to <a href=\"https://stackoverflow.com/q/13468989/1065190\">Lambda capturing constexpr object</a></p>\n", "AcceptedAnswerId": "28763570", "Title": "Using lambda captured constexpr value as an array dimension", "CreationDate": "2015-02-27T10:54:40.367", "Id": "28763375", "CommentCount": "6", "LastEditDate": "2017-05-23T11:48:20.587", "PostTypeId": "1", "LastEditorUserId": "-1", "LastActivityDate": "2015-02-27T11:16:40.680", "Score": "4", "OwnerUserId": "1065190", "Tags": "<arrays><c++11><lambda><c++14><constexpr>", "AnswerCount": "1"}, "28763570": {"Id": "28763570", "PostTypeId": "2", "Body": "<p>C++11 [expr.prim.lambda]/12</p>\n<blockquote>\n<p id=\"so_28763375_28763570_0\">If a lambda-expression odr-uses this or a variable with automatic storage duration from its reaching scope, that entity shall be captured by the lambda-expression. </p>\n</blockquote>\n<p>and /17</p>\n<blockquote>\n<p id=\"so_28763375_28763570_1\">Every <em>id-expression</em> that is an odr-use of an entity captured by copy is transformed into an access to the corresponding unnamed data member of the closure type. [ <em>Note:</em> An <em>id-expression</em> that is not an odr-use\n  refers to the original entity, never to a member of the closure type. [...] \n   \u2014 <em>end note</em> ]</p>\n</blockquote>\n<p>So we don't even need to capture <code>Size</code> in the first example (where it is not <code>static</code>), since reading from that variable is not an odr-use since it can appear in a constant expression and the lvalue-to-rvalue conversion is immediately applied to it, [basic.def.odr]/2</p>\n<blockquote>\n<p id=\"so_28763375_28763570_2\">A variable whose name appears as a potentially-evaluated expression is odr-used unless it is an object that satisfies the requirements for appearing in a constant expression and the lvalue-to-rvalue\n  conversion is immediately applied.</p>\n</blockquote>\n<p>(It is not clear to me if the array bounds require an l-t-r conversion, though.)</p>\n<p>The same applies when capturing <code>Size</code> by reference, or when capturing <code>Size</code> explicitly (by copy) but not odr-using it: the use of the <em>id-expression</em> <code>Size</code> within the lambda accesses the <code>constexpr</code> variable declared in <code>Test</code>, not any captured member (for capture-by-copy: IFF the access does not constitute an odr-use).</p>\n<p>C++14 [expr.prim.lamda]/12 adds some wording for polymorphic lambdas that is irrelevant here, and moves /17 to /18. The rules for odr-use are more complicated, but I'd argue it's not an odr-use for the same underlying reason (reading a compile-time constant).</p>\n", "LastEditorUserId": "420683", "LastActivityDate": "2015-02-27T11:16:40.680", "Score": "5", "CreationDate": "2015-02-27T11:04:34.927", "ParentId": "28763375", "CommentCount": "2", "OwnerUserId": "420683", "LastEditDate": "2015-02-27T11:16:40.680"}, "bq_ids": {"n4140": {"so_28763375_28763570_2": {"length": 10, "quality": 0.5882352941176471, "section_id": 7040}, "so_28763375_28763570_1": {"length": 24, "quality": 0.8888888888888888, "section_id": 5977}, "so_28763375_28763570_0": {"length": 12, "quality": 1.0, "section_id": 5972}}, "n3337": {"so_28763375_28763570_2": {"length": 16, "quality": 0.9411764705882353, "section_id": 6785}, "so_28763375_28763570_1": {"length": 24, "quality": 0.8888888888888888, "section_id": 5745}, "so_28763375_28763570_0": {"length": 12, "quality": 1.0, "section_id": 5740}}, "n4659": {"so_28763375_28763570_2": {"length": 10, "quality": 0.5882352941176471, "section_id": 8537}, "so_28763375_28763570_1": {"length": 24, "quality": 0.8888888888888888, "section_id": 7474}, "so_28763375_28763570_0": {"length": 12, "quality": 1.0, "section_id": 7471}}}});