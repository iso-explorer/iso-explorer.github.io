post_cb({"6038295": {"Id": "6038295", "PostTypeId": "2", "Body": "<p>This makes no sense to me. Regardless of which pointer you call <code>doSomething()</code>, you would still wind up with the method defined in most derived class. Consider the following scenario:</p>\n<pre><code>class BaseInterface\n{\n  public:\n    virtual void doSomething() = 0;\n    ~BaseInterface(){}\n};\n\nclass Derived : public BaseInterface\n{\n  public:\n    Derived() {}\n    ~Derived(){}\n\n      virtual void doSomething(){}\n\n  private:\n    int x;\n};\n\nclass SecondDerived : public Derived\n{\n  public:\n    SecondDerived() {}\n    ~SecondDerived(){}\n\n  private:\n    int x;\n};\n\nint main(int argc, char* argv[])\n{\n    SecondDerived derived;\n    derived.doSomething(); //Derived::doSomething is called\n\n    BaseInterface* pInt = &amp;derived;\n    pInt-&gt;doSomething(); //Derived::doSomething is called\n\n    return 0;\n}\n</code></pre>\n", "LastActivityDate": "2011-05-17T23:25:58.380", "CommentCount": "1", "CreationDate": "2011-05-17T23:25:58.380", "ParentId": "6038160", "Score": "0", "OwnerUserId": "129404"}, "6038160": {"ViewCount": "579", "Body": "<p>In C++, let's say I have a class <strong>Derived</strong> that implements an interface class <strong>BaseInterface</strong>, where <strong>BaseInterface</strong> has only pure virtual functions and a virtual destructor:</p>\n<pre><code>class BaseInterface\n{\n  public:\n    virtual void doSomething() = 0;\n    ~BaseInterface(){}\n};\n\nclass Derived : public BaseInterface\n{\n  public:\n    Derived() {}\n    ~Derived(){}\n\n  protected:\n    virtual void doSomething();\n\n  private:\n    int x;\n};\n</code></pre>\n<p>No classes outside the Derived class hierarchy should call Derived::doSomething() directly, i.e., it should only be accessed polymorphically through the BaseInterface class.  To enforce this rule, I have made Derived::doSomething() protected.  This works well, but I'm looking for opinions pro/con regarding this approach.</p>\n<p>Thanks!</p>\n<p>Ken</p>\n", "AcceptedAnswerId": "6038248", "Title": "A way to enforce use of interface in C++", "CreationDate": "2011-05-17T23:05:39.217", "Id": "6038160", "CommentCount": "5", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2011-05-17T23:10:35.813", "LastEditorUserId": "726393", "LastActivityDate": "2012-01-30T04:12:53.390", "Score": "3", "OwnerUserId": "726393", "Tags": "<c++><interface>", "AnswerCount": "5"}, "6038253": {"Id": "6038253", "PostTypeId": "2", "Body": "<p>If it is part of the interface, why would you not want users to call it? Note that as it is, they can call it: <code>static_cast&lt;BaseInterface&amp;&gt;(o).doSomething()</code> is just an awkward way of saying <code>o.doSomething()</code>. What is the point of <em>using the interface</em>... if the object fulfills the interface, then you should be able to use it, or am I missing something?</p>\n<p>Since you are not actually blocking anyone from calling the methods, I don't see a point in making the code more complex (both the class and users of the class) for no particular reason. Note that this is completely different from the Non-Virtual Interface in that in this idiom virtual functions are not accessible publicly (at any level) while in your case, the intention is allowing access, and making it cumbersome.</p>\n", "LastActivityDate": "2011-05-17T23:19:05.033", "CommentCount": "2", "CreationDate": "2011-05-17T23:19:05.033", "ParentId": "6038160", "Score": "3", "OwnerUserId": "36565"}, "6038304": {"Id": "6038304", "PostTypeId": "2", "Body": "<p>What you are doing is also mentioned in standard ISO/IEC 14882:2003(E) 11.6.1 and believe you are correct. Other than the fact, the member function isn't pure virtual in the given example. It should hold for pure virtual functions too, AFAIK.</p>\n<blockquote>\n<p id=\"so_6038160_6038304_0\">The access rules (clause 11) for a virtual function are determined by its declaration and are not affected by the rules for a function that later overrides it. </p>\n</blockquote>\n<pre><code>[Example:\n\n   class B \n   { \n     public:\n     virtual int f();\n   };\n\n   class D : public B \n   { \n     private:\n     int f();\n   };\n\n   void f() \n   {\n     D d; \n     B* pb = &amp;d; \n     D* pd = &amp;d;\n\n     pb-&gt;f(); // OK: B::f() is public, \n              // D::f() is invoked\n\n     pd-&gt;f(); // error: D::f() is private\n   }\n\n\u2014end example]\n</code></pre>\n<blockquote>\n<p id=\"so_6038160_6038304_1\">Access is checked at the call point using the type of the expression used to denote the\n  object for which the member function is called (B* in the example above). The access of the member function in the class in which it was defined (D in the example above) is in general not known.</p>\n</blockquote>\n", "LastEditorUserId": "528724", "LastActivityDate": "2011-05-17T23:32:15.663", "Score": "2", "CreationDate": "2011-05-17T23:26:44.200", "ParentId": "6038160", "CommentCount": "0", "OwnerUserId": "528724", "LastEditDate": "2011-05-17T23:32:15.663"}, "bq_ids": {"n4140": {"so_6038160_6038304_0": {"length": 12, "quality": 0.8571428571428571, "section_id": 6696}, "so_6038160_6038304_1": {"length": 24, "quality": 0.96, "section_id": 6697}}, "n3337": {"so_6038160_6038304_0": {"length": 12, "quality": 0.8571428571428571, "section_id": 6451}, "so_6038160_6038304_1": {"length": 24, "quality": 0.96, "section_id": 6452}}, "n4659": {"so_6038160_6038304_0": {"length": 12, "quality": 0.8571428571428571, "section_id": 8171}, "so_6038160_6038304_1": {"length": 24, "quality": 0.96, "section_id": 8172}}}, "6038248": {"Id": "6038248", "PostTypeId": "2", "Body": "<p>I think you're looking for the non-virtual interface (NVI) pattern: a <code>public</code> non-virtual interface that calls a protected or private <code>virtual</code> implementation:</p>\n<pre><code>class BaseInterface\n{\n  public:\n    virtual ~BaseInterface(){}\n    void doSomething() { doSomethingImpl(); }\n\nprotected:\n    virtual void doSomethingImpl() = 0;\n};\n\nclass Derived : public BaseInterface\n{\n  public:\n    Derived() {}\n    virtual ~Derived(){}\n\n  protected:\n    virtual void doSomethingImpl();\n\n  private:\n    int x;\n};\n</code></pre>\n", "LastEditorUserId": "251738", "LastActivityDate": "2012-01-30T04:12:53.390", "Score": "8", "CreationDate": "2011-05-17T23:18:32.220", "ParentId": "6038160", "CommentCount": "2", "OwnerUserId": "251738", "LastEditDate": "2012-01-30T04:12:53.390"}, "6038251": {"Id": "6038251", "PostTypeId": "2", "Body": "<p>The key is the rest of your code.  Only accept a BaseInterface* as an argument to any methods that require the doSomething() call.  The client programmer is forced to derive from the interface to make his code compile.</p>\n", "LastActivityDate": "2011-05-17T23:18:54.530", "CommentCount": "1", "CreationDate": "2011-05-17T23:18:54.530", "ParentId": "6038160", "Score": "1", "OwnerUserId": "17034"}});