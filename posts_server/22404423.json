post_cb({"22404543": {"ParentId": "22404423", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>There is <strong>NO</strong> guarantees about the memory layout of derived members and the cast is <strong>NOT</strong> safe.</p>\n<p>As you have inheritance, also there could be padding, this is <strong>NOT</strong> trivial.</p>\n<p><strong>\u00a7 9 Classes</strong></p>\n<blockquote>\n<p id=\"so_22404423_22404543_0\">1 A POD struct109 is a class that is <strong>both a trivial class and a standard-layout class</strong>, and has no non-static data members of type non-POD struct, non-POD union (or array of such types). Similarly, a POD union is a union that is both a trivial class and a standard layout class, and has no non-</p>\n</blockquote>\n<p>Also <code>std::is_pod&lt;RGBA&gt;</code> is not a POD</p>\n<pre><code>std::cout &lt;&lt; std::boolalpha;\nstd::cout &lt;&lt; std::is_pod&lt;RGBA&gt;::value &lt;&lt; '\\n';\n</code></pre>\n<p>result is false. see <a href=\"https://ideone.com/PiZpNF\" rel=\"noreferrer\">live demo</a></p>\n", "OwnerUserId": "951757", "LastEditorUserId": "951757", "LastEditDate": "2014-03-14T12:14:23.000", "Id": "22404543", "Score": "7", "CreationDate": "2014-03-14T12:06:56.230", "LastActivityDate": "2014-03-14T12:14:23.000"}, "22404659": {"ParentId": "22404423", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>No, the layout is not guaranteed. The only guarantees are for standard-layout classes; and one of the conditions of such a class is that it</p>\n<blockquote>\n<p id=\"so_22404423_22404659_0\">either has no non-static data members in the most derived class and at most one base class with non-static data members, or has no base classes with non-static data members</p>\n</blockquote>\n<p>In other words, all data members must be in the same class, not in more than one.</p>\n", "OwnerUserId": "204847", "LastEditorUserId": "204847", "LastEditDate": "2014-03-14T13:29:15.633", "Id": "22404659", "Score": "10", "CreationDate": "2014-03-14T12:11:23.907", "LastActivityDate": "2014-03-14T13:29:15.633"}, "22404423": {"CommentCount": "3", "ViewCount": "3209", "PostTypeId": "1", "LastEditorUserId": "4095830", "CreationDate": "2014-03-14T12:01:11.477", "LastActivityDate": "2014-11-18T18:57:14.843", "Title": "C++ POD struct inheritance? Are there any guarantees about the memory layout of derived members", "FavoriteCount": "2", "LastEditDate": "2014-11-18T18:57:14.843", "Id": "22404423", "Score": "18", "Body": "<p>Let's say, I have a <code>struct RGB</code> and I want to create <code>struct RGBA</code>, which inherits <code>RGB</code>:</p>\n<pre><code>struct RGB {\n    unsigned char r;\n    unsigned char g;\n    unsigned char b;\n};\n\nstruct RGBA: RGB {\n    unsigned char a;\n};\n</code></pre>\n<p>Both will be used for reading uncompressed image data: </p>\n<pre><code>RGBA *pixel=static_cast&lt;RGBA *&gt;(image-&gt;uncompressed_data);\n</code></pre>\n<p>Question: Is this safe, regarding the memory layout of <code>struct RGBA</code>? Does anyone guarantee, that:</p>\n<ul>\n<li><code>unsigned char a</code> comes after the <code>RGB struct</code> (not before)</li>\n<li>There is no padding between <code>struct RGB</code> and the a parameter from <code>struct RGBA</code>?</li>\n</ul>\n<p>will <code>#pragma pack</code> help here? It's all about memory layout during inheritance.</p>\n", "Tags": "<c++><inheritance><pod>", "OwnerUserId": "935512", "AnswerCount": "3"}, "22404573": {"ParentId": "22404423", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>It's easy to check for padding: Print <code>sizeof(RGB)</code> and <code>sizeof(RGBA)</code>. If it's not 3 respective 4 then the structures are padded, and you need to remove it.</p>\n<p>As for if the member <code>a</code> comes after <code>b</code>, you can use <a href=\"http://en.cppreference.com/w/cpp/types/offsetof\" rel=\"nofollow\"><code>offsetof</code></a> to check each members offset. If the offset for <code>a</code> is one larger than the offset of <code>b</code> then <code>a</code> comes directly after <code>b</code>.</p>\n", "OwnerUserId": "440558", "LastEditorUserId": "440558", "LastEditDate": "2014-03-14T12:22:01.857", "Id": "22404573", "Score": "1", "CreationDate": "2014-03-14T12:08:07.540", "LastActivityDate": "2014-03-14T12:22:01.857"}, "bq_ids": {"n4140": {"so_22404423_22404543_0": {"section_id": 5854, "quality": 0.8620689655172413, "length": 25}, "so_22404423_22404659_0": {"section_id": 5851, "quality": 1.0, "length": 19}}, "n3337": {"so_22404423_22404543_0": {"section_id": 5624, "quality": 0.896551724137931, "length": 26}, "so_22404423_22404659_0": {"section_id": 5621, "quality": 1.0, "length": 19}}, "n4659": {"so_22404423_22404543_0": {"section_id": 7333, "quality": 0.8620689655172413, "length": 25}, "so_22404423_22404659_0": {"section_id": 7330, "quality": 0.7894736842105263, "length": 15}}}});