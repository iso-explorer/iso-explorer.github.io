post_cb({"14945564": {"CommentCount": "6", "CreationDate": "2013-02-18T21:26:48.010", "PostTypeId": "1", "AcceptedAnswerId": "14945668", "LastEditorUserId": "650233", "LastActivityDate": "2013-02-18T22:16:58.467", "LastEditDate": "2013-02-18T21:33:09.873", "ViewCount": "128", "FavoriteCount": "1", "Title": "function-pointers and class-templates", "Id": "14945564", "Score": "2", "Body": "<p>I have a template class CFoo using the following types</p>\n<pre><code>enum My_Types {t1,t2};\n</code></pre>\n<p>with the specialization given by</p>\n<pre><code>template&lt;My_Types T&gt;\nclass CFoo\n{\n    public:\n    CFoo()\n    {\n        std::cerr&lt;&lt;\"ERROR:....\";\n        exit(1);\n    }\n};\n\ntemplate&lt;&gt;\nclass CFoo&lt;t1&gt;\n{\n    ....\n};\n</code></pre>\n<p>In addition I have a function which uses a CFoo object as an argument</p>\n<pre><code>template&lt;class T&gt;\nvoid foo1 ( const T &amp;CfooObj,...);\n</code></pre>\n<p>Now I need a pointer to foo1, so I have to specify the template argument</p>\n<pre><code>void (*foo1_pointer) ( const CFoo&lt; t1 &gt;&amp;,...);\n</code></pre>\n<p>But the following seems not to be correct (\" no matches converting function foo1...\"):</p>\n<pre><code>foo1_pointer=&amp;foo1;\n</code></pre>\n<p>How to pass the pointer of this template function correctly?</p>\n", "Tags": "<c++><templates><function-pointers>", "OwnerUserId": "773017", "AnswerCount": "3"}, "14945641": {"ParentId": "14945564", "CommentCount": "0", "Body": "<p>The assignment should be like this:</p>\n<pre><code>foo1_pointer = &amp;foo1&lt;CFoo&lt;t1&gt;&gt;;\n</code></pre>\n", "OwnerUserId": "1610015", "PostTypeId": "2", "Id": "14945641", "Score": "0", "CreationDate": "2013-02-18T21:32:26.183", "LastActivityDate": "2013-02-18T21:32:26.183"}, "14945628": {"ParentId": "14945564", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>You can just write <code>foo1&lt;CFoo&lt;t1&gt;&gt;</code>. Or just <code>foo1</code> (works with g++ 4.7.2).</p>\n", "OwnerUserId": "464581", "LastEditorUserId": "464581", "LastEditDate": "2013-02-18T21:36:45.323", "Id": "14945628", "Score": "0", "CreationDate": "2013-02-18T21:30:44.080", "LastActivityDate": "2013-02-18T21:36:45.323"}, "14945668": {"ParentId": "14945564", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>This is probably due to the old version of your GCC compiler. This code compiles fine on GCC 4.7.2, Clang 3.2, ICC 13.0.1, and VS10:</p>\n<pre><code>#include &lt;iostream&gt;\n\nenum My_Types {t1,t2};\n\ntemplate&lt;My_Types T&gt;\nclass CFoo { /* ... */ };\n\ntemplate&lt;&gt; class CFoo&lt;t1&gt; { /* ... */ };\n\ntemplate&lt;class T&gt;\nvoid foo1 (const T &amp;, ...) { /* ... */ }\n\nint main()\n{\n    void (*foo1_pointer) (const CFoo&lt; t1 &gt;&amp;, ...);\n    foo1_pointer = &amp;foo1;\n}\n</code></pre>\n<p>The compiler should be able to deduce the template arguments of <code>foo1</code> when taking its address from the type of the function pointer it is assigned to. Per Paragraph 14.8.2.3/1 of the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_14945564_14945668_0\">Template arguments can be deduced from the type specified when taking the address of an overloaded function (13.4). The function template\u2019s function type and the specified type are used as the types of P and A, and the deduction is done as described in 14.8.2.5.</p>\n</blockquote>\n<p>And also, per Paragraph 13.4/1:</p>\n<blockquote>\n<p id=\"so_14945564_14945668_1\">A use of an overloaded function name without arguments is resolved in certain contexts to a function, a pointer to function or a pointer to member function for a specific function from the overload set. <em>A function template name is considered to name a set of overloaded functions in such contexts. The function selected is the one whose type is identical to the function type of the target type required in the context.</em> [...]</p>\n</blockquote>\n", "OwnerUserId": "1932150", "LastEditorUserId": "1932150", "LastEditDate": "2013-02-18T22:16:58.467", "Id": "14945668", "Score": "1", "CreationDate": "2013-02-18T21:33:58.617", "LastActivityDate": "2013-02-18T22:16:58.467"}, "bq_ids": {"n4140": {"so_14945564_14945668_0": {"section_id": 311, "quality": 0.875, "length": 21}, "so_14945564_14945668_1": {"section_id": 641, "quality": 0.975, "length": 39}}, "n3337": {"so_14945564_14945668_0": {"section_id": 302, "quality": 0.875, "length": 21}, "so_14945564_14945668_1": {"section_id": 631, "quality": 0.975, "length": 39}}, "n4659": {"so_14945564_14945668_0": {"section_id": 319, "quality": 0.875, "length": 21}, "so_14945564_14945668_1": {"section_id": 669, "quality": 0.825, "length": 33}}}});