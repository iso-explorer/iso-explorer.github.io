post_cb({"17912424": {"Id": "17912424", "PostTypeId": "2", "Body": "<p>C++11 random number engines are required to implement a member function <code>discard(unsigned long long z)</code> (\u00a726.5.1.4) that advances the random number sequence by <code>z</code> steps. The complexity guarantee is quite weak: \"no worse than\nthe complexity of <code>z</code> consecutive calls <code>e()</code>\". This member obviously exists solely to make it possible to expose more performant implementations when possible as note 274 states: </p>\n<blockquote>\n<p id=\"so_17908425_17912424_0\">This operation is common in user code, and can often be implemented\n  in an engine-specific manner so as to provide significant performance\n  improvements over an equivalent naive loop that makes <code>z</code> consecutive\n  calls <code>e()</code>.</p>\n</blockquote>\n<p>Given <code>discard</code> you can easily implement your requirement to retrieve the <code>n</code>th number in sequence by reseeding a generator, discarding <code>n-1</code> values and using the next generated value.</p>\n<p>I'm unaware of which - if any - of the standard RNG engines are amenable to efficient implementations of <code>discard</code>. It may be worth your time to do a bit of investigation and profiling.</p>\n", "LastEditorUserId": "2372604", "LastActivityDate": "2016-09-03T04:13:09.067", "Score": "1", "CreationDate": "2013-07-28T20:13:49.427", "ParentId": "17908425", "CommentCount": "0", "OwnerUserId": "923854", "LastEditDate": "2016-09-03T04:13:09.067"}, "17908425": {"ViewCount": "711", "Body": "<p>Is there a way using the C++ standard library built in random generator to get a specific random number in a sequence, without saving them all? </p>\n<p>Like</p>\n<pre><code>srand(cTime);\ngetRand(1); // 10\ngetRand(2); // 8995\ngetRand(3); // 65464456\ngetRand(1); // 10\ngetRand(2); // 8995\ngetRand(1); // 10\ngetRand(3); // 65464456\n</code></pre>\n", "AcceptedAnswerId": "17912424", "Title": "Get random number in sequence C++", "CreationDate": "2013-07-28T12:56:17.863", "Id": "17908425", "CommentCount": "1", "PostTypeId": "1", "LastActivityDate": "2016-09-03T04:13:09.067", "Score": "0", "OwnerUserId": "2558778", "Tags": "<c++><random><generator>", "AnswerCount": "5"}, "17908983": {"Id": "17908983", "PostTypeId": "2", "Body": "<p>Implement <code>getRand()</code> to always seed and then return the given number. This will interfere with all other random numbers in a system, though, and will be slow, especially for large indexes. Assuming a 1-based index:</p>\n<pre><code>int getRand(int index)\n{\n    srand(999);  // fix the seed\n    for (int loop=1; loop&lt;index; ++loop)\n        rand();\n    return rand();\n}\n</code></pre>\n", "LastActivityDate": "2013-07-28T14:01:20.470", "CommentCount": "1", "CreationDate": "2013-07-28T14:01:20.470", "ParentId": "17908425", "Score": "0", "OwnerUserId": "198083"}, "bq_ids": {"n4140": {"so_17908425_17912424_0": {"length": 20, "quality": 0.9523809523809523, "section_id": 3498}}, "n3337": {"so_17908425_17912424_0": {"length": 20, "quality": 0.9523809523809523, "section_id": 3363}}, "n4659": {"so_17908425_17912424_0": {"length": 20, "quality": 0.9523809523809523, "section_id": 4261}}}, "17911553": {"Id": "17911553", "PostTypeId": "2", "Body": "<p>Check out: \n<a href=\"http://www.deshawresearch.com/resources_random123.html\" rel=\"nofollow\">Random123</a></p>\n<p>From the documentation:</p>\n<blockquote>\n<p id=\"so_17908425_17911553_0\">Random123 is a library of \"counter-based\" random number generators (CBRNGs), in which the Nth random number can be obtained by applying a stateless mixing function to N..</p>\n</blockquote>\n", "LastActivityDate": "2013-07-28T18:42:25.823", "CommentCount": "0", "CreationDate": "2013-07-28T18:42:25.823", "ParentId": "17908425", "Score": "0", "OwnerUserId": "234784"}, "17908543": {"Id": "17908543", "PostTypeId": "2", "Body": "<p>You have to save the numbers. There may be other variants, but it still requires saving a list of numbers (e.g. using different seeds based on the argument to <code>getRand()</code> - but that wouldn't really be beneficial over saving them). </p>\n<p>Something like this would work reasonably well, I'd say:</p>\n<pre><code>int getRand(int n)\n{\n    static std::map&lt;int, int&gt; mrand;\n    // Check if it's there. \n    if ((std::map::iterator it = mrand.find(n)) != mrand.end())\n    {\n        return it-&gt;second;\n    }\n\n    int r = rand();\n    mrand[n] = r;\n    return r;\n}\n</code></pre>\n<p>(I haven't compiled this code, just written it up as a \"this sort of thing might work\")</p>\n", "LastActivityDate": "2013-07-28T13:08:44.333", "CommentCount": "3", "CreationDate": "2013-07-28T13:08:44.333", "ParentId": "17908425", "Score": "0", "OwnerUserId": "1919155"}, "17909155": {"Id": "17909155", "PostTypeId": "2", "Body": "<p>Similar to cdmh's post, </p>\n<p>Following from C++11 could also be used :</p>\n<pre><code>#include&lt;random&gt;\n\nlong getrand(int index)\n{\n std::default_random_engine e;\n for(auto i=1;i&lt;index;i++)\n     e();\n  return e();\n}\n</code></pre>\n", "LastActivityDate": "2013-07-28T14:21:12.443", "CommentCount": "0", "CreationDate": "2013-07-28T14:21:12.443", "ParentId": "17908425", "Score": "0", "OwnerUserId": "1870232"}});