post_cb({"bq_ids": {"n4140": {"so_39855810_39855810_1": {"section_id": 304, "quality": 0.9, "length": 9}, "so_39855810_39855810_0": {"section_id": 304, "quality": 1.0, "length": 6}}, "n3337": {"so_39855810_39855810_1": {"section_id": 295, "quality": 0.9, "length": 9}, "so_39855810_39855810_0": {"section_id": 295, "quality": 1.0, "length": 6}}, "n4659": {"so_39855810_39855810_1": {"section_id": 311, "quality": 1.0, "length": 10}, "so_39855810_39855810_0": {"section_id": 311, "quality": 1.0, "length": 6}}}, "39855810": {"CommentCount": "8", "ViewCount": "47", "CreationDate": "2016-10-04T15:06:49.213", "LastActivityDate": "2016-10-04T15:06:49.213", "Title": "Regarding function template argument deduction", "PostTypeId": "1", "Id": "39855810", "Score": "0", "Body": "<p>Here is the example from 14.8.2.1, paragraph 3:</p>\n<pre><code>template &lt;class T&gt; int f(T&amp;&amp; heisenreference);\ntemplate &lt;class T&gt; int g(const T&amp;&amp;);\nint i;\nint n1 = f(i); // #1\nint n2 = f(0);\nint n3 = g(i);\n</code></pre>\n<p>In the case of #1, the <strong>final</strong> function template parameter type would be <code>T</code> because the same paragraph suggests</p>\n<blockquote>\n<p id=\"so_39855810_39855810_0\">... If P is a\n  reference type, the type referred to by P is used for type deduction...</p>\n</blockquote>\n<p>At the same time, the <strong>final</strong> argument would be <code>lvalue reference to int</code> because, again, the same paragraph suggests</p>\n<blockquote>\n<p id=\"so_39855810_39855810_1\">... If P is a forwarding reference and the argument is an lvalue,\n  the type \u201clvalue reference to A\u201d is used in place of A for type deduction.</p>\n</blockquote>\n<p>In conclusion, <code>T</code> is identical to <code>lvalue reference to int</code>. However, once <code>lvalue reference to int</code> fit into the place of <code>T</code>, the type no longer makes sense because <code>T&amp;&amp; heisenreference</code> will be <code>rvalue reference to lvalue reference to int heisenreference</code>. In fact, I already know the right answer is <code>lvalue reference to int</code>, but I don't know how to get to that conclusion strictly by the standard.</p>\n", "Tags": "<c++><language-lawyer>", "OwnerUserId": "5645940", "AnswerCount": "0"}});