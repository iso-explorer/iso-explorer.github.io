post_cb({"48262974": {"ViewCount": "354", "LastEditDate": "2018-01-15T13:26:34.417", "AcceptedAnswerId": "48263092", "Title": "Are cv-qualifiers allowed on decltype(auto) variables?", "CreationDate": "2018-01-15T12:23:28.097", "LastActivityDate": "2018-01-15T13:31:20.290", "CommentCount": "0", "FavoriteCount": "2", "OwnerUserId": "7860670", "PostTypeId": "1", "LastEditorUserId": "4832499", "Id": "48262974", "Score": "12", "Body": "<p>The standard states that</p>\n<blockquote>\n<p id=\"so_48262974_48262974_0\">If the placeholder is the <code>decltype(auto)</code> type-specifier, <code>T</code> shall be the placeholder alone.</p>\n<p id=\"so_48262974_48262974_1\"><code>decltype(auto)*x7d = &amp;i;</code> // error, declared type is not plain <code>decltype(auto)</code></p>\n</blockquote>\n<p>It is not clear whether cv-qualifiers are still allowed though. It would make sense if they are allowed. Compilers seem to disagree on this matter. The following code <a href=\"https://wandbox.org/permlink/GNdV7wy3YK8xcDyA\" rel=\"noreferrer\">is accepted by g++</a> but <a href=\"https://wandbox.org/permlink/wu5MsJjymyzNaejO\" rel=\"noreferrer\">rejected by clang++</a>, vc++ does not seem to support <code>decltype(auto)</code> variables at all:</p>\n<pre><code>int main()\n{\n    const decltype(auto) sz_text{\"test\"};\n}\n</code></pre>\n", "Tags": "<c++><language-lawyer><auto><decltype><c++17>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_48262974_48262974_0": {"length": 4, "quality": 0.8, "section_id": 5451}, "so_48262974_48263092_0": {"length": 5, "quality": 0.625, "section_id": 5451}}, "n4659": {"so_48262974_48262974_0": {"length": 5, "quality": 1.0, "section_id": 6890}, "so_48262974_48263092_0": {"length": 8, "quality": 1.0, "section_id": 6887}}}, "48263092": {"PostTypeId": "2", "Body": "<p>To answer that, we need to quote the previous paragraph, which specifies what <code>T</code> is. In this case, <a href=\"https://timsong-cpp.github.io/cppwp/n4659/dcl.type.auto.deduct#2\" rel=\"noreferrer\">[dcl.type.auto.deduct]/2</a> says (emphasis mine):</p>\n<blockquote>\n<p id=\"so_48262974_48263092_0\">A type T containing a placeholder type, and a corresponding\n  initializer e, are determined as follows:</p>\n<ul>\n<li>for a variable declared with <strong>a type that contains a placeholder type, T is the declared type of the variable</strong> and e is the\n  initializer. If the initialization is direct-list-initialization, the\n  initializer shall be a braced-init-list containing only a single\n  assignment-expression and e is the assignment-expression;</li>\n</ul>\n</blockquote>\n<p>In this case, <code>T</code> is the <em>whole</em> declared type of <code>sz_text</code>, cv-qualifiers and all. And the paragraph you quoted is quite clear that if it contains <code>decltype(auto)</code> as placeholder, it must be that and nothing more.</p>\n<p>So a GCC bug. <a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=79815\" rel=\"noreferrer\">And an already reported one</a>.</p>\n", "LastActivityDate": "2018-01-15T13:31:20.290", "LastEditorUserId": "817643", "Score": "9", "Id": "48263092", "CreationDate": "2018-01-15T12:30:47.930", "ParentId": "48262974", "CommentCount": "3", "OwnerUserId": "817643", "LastEditDate": "2018-01-15T13:31:20.290"}});