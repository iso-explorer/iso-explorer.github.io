post_cb({"bq_ids": {"n4140": {"so_11812687_11812718_1": {"length": 11, "quality": 1.0, "section_id": 3286}, "so_11812687_11812718_5": {"length": 7, "quality": 1.0, "section_id": 3290}, "so_11812687_11812718_0": {"length": 4, "quality": 1.0, "section_id": 3286}, "so_11812687_11812718_3": {"length": 20, "quality": 0.9523809523809523, "section_id": 3287}, "so_11812687_11812718_4": {"length": 5, "quality": 1.0, "section_id": 3285}, "so_11812687_11812718_2": {"length": 4, "quality": 1.0, "section_id": 3287}}, "n3337": {"so_11812687_11812718_1": {"length": 11, "quality": 1.0, "section_id": 3156}, "so_11812687_11812718_5": {"length": 7, "quality": 1.0, "section_id": 3160}, "so_11812687_11812718_0": {"length": 4, "quality": 1.0, "section_id": 3156}, "so_11812687_11812718_3": {"length": 20, "quality": 0.9523809523809523, "section_id": 3157}, "so_11812687_11812718_4": {"length": 5, "quality": 1.0, "section_id": 3155}, "so_11812687_11812718_2": {"length": 4, "quality": 1.0, "section_id": 3157}}, "n4659": {"so_11812687_11812718_1": {"length": 7, "quality": 0.6363636363636364, "section_id": 382}, "so_11812687_11812718_5": {"length": 7, "quality": 1.0, "section_id": 4052}, "so_11812687_11812718_4": {"length": 4, "quality": 0.8, "section_id": 653}}}, "11812706": {"Id": "11812706", "PostTypeId": "2", "Body": "<p>It is done just for efficiency. Not in all occasions arrays have to be pre-filled with a value, so C++ does not do it by default.</p>\n<p>If you use <code>std::vector&lt;int&gt;</code> instead of plain arrays (I recommend you to), you have a constructor to set an initial value that can be 0:</p>\n<pre><code>std::vector&lt;int&gt; v(10,0);  // 10 elements with 0\n</code></pre>\n", "LastActivityDate": "2012-08-04T23:17:45.147", "CommentCount": "2", "CreationDate": "2012-08-04T23:17:45.147", "ParentId": "11812687", "Score": "3", "OwnerUserId": "62365"}, "11812687": {"ViewCount": "3530", "Body": "<p>I have a basic program in C++ which lists a given number of primes. The class which does the work is below - my question is, when the input for \"amount\" is 10 (specifically 10 - it works fine for all other numbers I've tried), the array that is generated just below is not initialized to an array of zeros. Hence, \"the last element of the array is empty\" returns false, and my code does not get to run properly.</p>\n<p>I don't know whether I've misunderstood, but shouldn't the int array initialize to zeros? If not, what is special about the integer 10 which causes it to initialize to strange values?</p>\n<pre><code>int* primecalc(int amount) {\n\nint* primes = new (nothrow) int [amount];\n\n//Throw an error if we can't allocated enough memory for the array.\nif (primes==0) {\ncout&lt;&lt; \"Error allocating memory.\";\nreturn 0;\n}\n\n//Otherwise, start iterating through the numbers.\nelse {\nprimes[0] = 2;\nprimes[1] = 3;\n\nint p = 2;\n\nfor (int i=4;primes[amount]==0;i++) {\nint j = 0;\nint k = 0;\n\n    while ((primes[j]&lt;=floor(i/2)) &amp;&amp; !(primes[j]==0) &amp;&amp; (k==0)) {\n\n        if ((i % primes[j]) == 0) {\n        k=1;\n        } \n    j++;\n    } //end the while loop\n\nif (k==0) {\n        primes[p] = i;\n        p++;\n\n}\n\n} //end the for loop\n\n} //end the \"else\" part (this was only necessary in case memory could not be allocated)\n\nreturn primes;\n}\n</code></pre>\n<p>I also tried without (nothrow), with the same result. Thanks in advance for any help!</p>\n", "AcceptedAnswerId": "11812718", "Title": "Why is int array not initialized to zeros in C++?", "CreationDate": "2012-08-04T23:15:12.863", "Id": "11812687", "CommentCount": "3", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2012-08-05T18:06:38.860", "Score": "4", "OwnerUserId": "1576713", "Tags": "<c++><arrays><initialization>", "AnswerCount": "2"}, "11812718": {"Id": "11812718", "PostTypeId": "2", "Body": "<p><code>int* primes = new (nothrow) int[amount];</code> is using <em>default-initialization</em>, which for scalars like <code>int</code> is a noop (i.e. no actual initialization is performed).</p>\n<p>If you want explicit initialization, use <em>value-initialization</em> instead:</p>\n<pre><code>int* primes = new (nothrow) int[amount]();\n</code></pre>\n<hr>\n<p>From the C++11 standard, \u00a78.5/6:</p>\n<blockquote>\n<p id=\"so_11812687_11812718_0\">To <em>default-initialize</em> an object of type <code>T</code> means:</p>\n<ul>\n<li>if <code>T</code> is a (possibly cv-qualified) class type, the default constructor for T is called (and the initialization is ill-formed if T has no accessible default constructor);</li>\n<li><strong>if <code>T</code> is an array type, each element is default-initialized</strong>;</li>\n<li><strong>otherwise, no initialization is performed</strong>.</li>\n</ul>\n<p id=\"so_11812687_11812718_1\">If a program calls for the default initialization of an object of a const-qualified type <code>T</code>, <code>T</code> shall be a class type with a user-provided default constructor.</p>\n</blockquote>\n<p>\u00a78.5/7:</p>\n<blockquote>\n<p id=\"so_11812687_11812718_2\">To <em>value-initialize</em> an object of type <code>T</code> means:</p>\n<ul>\n<li>if <code>T</code> is a (possibly cv-qualified) class type with a user-provided constructor, then the default constructor for <code>T</code> is called (and the initialization is ill-formed if T has no accessible default constructor);</li>\n<li>if <code>T</code> is a (possibly cv-qualified) non-union class type without a user-provided constructor, then the object is zero-initialized and, if <code>T</code>\u2019s implicitly-declared default constructor is non-trivial, that constructor is called.</li>\n<li><strong>if <code>T</code> is an array type, then each element is value-initialized</strong>;</li>\n<li><strong>otherwise, the object is zero-initialized</strong>.</li>\n</ul>\n<p id=\"so_11812687_11812718_3\">An object that is value-initialized is deemed to be constructed and thus subject to provisions of this International Standard applying to \u201cconstructed\u201d objects, objects \u201cfor which the constructor has completed,\u201d etc., even if no constructor is invoked for the object\u2019s initialization.</p>\n</blockquote>\n<p>\u00a78.5/6:</p>\n<blockquote>\n<p id=\"so_11812687_11812718_4\">To <em>zero-initialize</em> an object or reference of type <code>T</code> means:</p>\n<ul>\n<li><strong>if <code>T</code> is a scalar type, the object is set to the value <code>0</code> (zero), taken as an integral constant expression, converted to <code>T</code></strong>;</li>\n<li>if <code>T</code> is a (possibly cv-qualified) non-union class type, each non-static data member and each base-class subobject is zero-initialized and padding is initialized to zero bits;</li>\n<li>if <code>T</code> is a (possibly cv-qualified) union type, the object\u2019s first non-static named data member is zero-initialized and padding is initialized to zero bits;</li>\n<li><strong>if <code>T</code> is an array type, each element is zero-initialized</strong>;</li>\n<li>if <code>T</code> is a reference type, no initialization is performed.</li>\n</ul>\n</blockquote>\n<p>And finally from \u00a78.5/10:</p>\n<blockquote>\n<p id=\"so_11812687_11812718_5\"><strong>An object whose initializer is an empty set of parentheses, i.e., <code>()</code>, shall be value-initialized.</strong></p>\n</blockquote>\n<p>(All emphasis mine.)</p>\n</hr>", "LastEditorUserId": "636019", "LastActivityDate": "2012-08-05T07:40:22.190", "Score": "13", "CreationDate": "2012-08-04T23:19:10.817", "ParentId": "11812687", "CommentCount": "1", "OwnerUserId": "636019", "LastEditDate": "2012-08-05T07:40:22.190"}});