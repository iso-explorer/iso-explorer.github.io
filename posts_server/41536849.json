post_cb({"41536849": {"CommentCount": "2", "ViewCount": "98", "PostTypeId": "1", "LastEditorUserId": "2279977", "CreationDate": "2017-01-08T19:26:59.123", "LastActivityDate": "2017-01-09T07:22:11.230", "Title": "Use abstract class as template argument when using `std::function` like syntax", "AcceptedAnswerId": "41537018", "LastEditDate": "2017-01-08T19:37:32.760", "Id": "41536849", "Score": "0", "Body": "<p>Suppose I have a class that define template arguments like <code>std::function</code> syntax.</p>\n<pre><code>// Class that accept template arguments like std::function\ntemplate&lt; class T &gt;\nclass abstraction;\n\ntemplate&lt; class TAbstract, class ...TDeriveds &gt;\nclass abstraction&lt; TAbstract(TDeriveds...) &gt;\n{\npublic:\n    using abstract_component_t = TAbstract;\n\n    abstraction()\n    {\n        int i = 0;\n    }\n};\n\n// Abstract base class\nclass base\n{\npublic:\n    virtual void func() = 0;\n};\n\n// Derived class\nclass derived : public base\n{\npublic:\n    void func() override\n    {\n\n    }\n};\n</code></pre>\n<p>When I use an abstract class as template parameter to this class (<code>abstraction&lt;base(derived)&gt;</code>) I get these errors:</p>\n<pre><code>VC++ 2015.3 error: C2259: 'base': cannot instantiate abstract class\nGCC 4.9.2 error: invalid abstract return type 'base'\n</code></pre>\n<p>I want to know is it a bug in compilers or it's forbidden to use abstract types with this syntax?</p>\n<p><a href=\"http://cpp.sh/7z5q\" rel=\"nofollow noreferrer\">Link</a> to sample source.</p>\n", "Tags": "<c++><c++11><templates><abstract-class>", "OwnerUserId": "2279977", "AnswerCount": "2"}, "41537060": {"ParentId": "41536849", "CommentCount": "0", "Body": "<p>Actually, using TAbstract&amp; (or a pointer type) as a type argument for your class will solve the problem. </p>\n<p>The problem is trivial: you cannot return an instance of an abstract class. Instead, you can return a reference or a pointer of type TAbstract. </p>\n", "OwnerUserId": "1779278", "PostTypeId": "2", "Id": "41537060", "Score": "1", "CreationDate": "2017-01-08T19:45:05.703", "LastActivityDate": "2017-01-08T19:45:05.703"}, "bq_ids": {"n4140": {"so_41536849_41537018_0": {"section_id": 7020, "quality": 1.0, "length": 10}}, "n3337": {"so_41536849_41537018_0": {"section_id": 6766, "quality": 1.0, "length": 10}}, "n4659": {"so_41536849_41537018_0": {"section_id": 8517, "quality": 1.0, "length": 10}}}, "41537018": {"ParentId": "41536849", "LastEditDate": "2017-01-09T07:22:11.230", "CommentCount": "8", "CreationDate": "2017-01-08T19:41:58.153", "OwnerUserId": "1120273", "LastEditorUserId": "1120273", "PostTypeId": "2", "Id": "41537018", "Score": "3", "Body": "<p>The template argument <code>TAbstract(TDeriveds...)</code> is a function type declaring a function taking <code>TDeriveds...</code> as arguments and returning a <code>TAbstract</code> by value. When returning by value it is necessary that objects of the value type can be instantiated. Objects of an abstract class <em>cannot</em> be instantiated, i.e., returning them by value is illegal (as is taking them as parameters). The relevant clause is 10.4 [class.abstract] paragraph 3:</p>\n<blockquote>\n<p id=\"so_41536849_41537018_0\">An abstract class shall not be used as a parameter type, as a function return type, or as the type of an explicit conversion. ...</p>\n</blockquote>\n<p>You can, however, return abstract base classes by reference:</p>\n<pre><code> template&lt; class TAbstract, class ...TDeriveds &gt;\n class abstraction&lt; TAbstract&amp;(TDeriveds...) &gt;\n // ...\n</code></pre>\n<p>Sadly, that means that users of the class need to mention the <code>&amp;</code> when using the class.</p>\n", "LastActivityDate": "2017-01-09T07:22:11.230"}});