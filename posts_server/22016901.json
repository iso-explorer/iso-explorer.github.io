post_cb({"22016901": {"CommentCount": "0", "AcceptedAnswerId": "22017381", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2014-02-25T14:20:08.877", "LastActivityDate": "2014-02-25T14:52:17.593", "LastEditDate": "2017-05-23T11:50:24.707", "ViewCount": "696", "FavoriteCount": "1", "Title": "Explicit template specialization for templated constructor of templated class", "Id": "22016901", "Score": "3", "Body": "<p>This question might overlap with this one: <a href=\"https://stackoverflow.com/questions/2563165/c-explicit-template-specialization-of-templated-constructor-of-templated-class\">C++ explicit template specialization of templated constructor of templated class</a> .\nHowever, I didn't find a solution in that thread.</p>\n<p>I have a templated class with templated constructor:</p>\n<pre><code>template&lt;typename First, typename ... Rest&gt; class var {\n    public:\n        template&lt;typename T&gt; var(T&amp; t) {\n            std::cout &lt;&lt; \"general\" &lt;&lt; std::endl;\n        }\n};\n</code></pre>\n<p>But in case this class is instantiated with an object of the same class as parameter (i.e., we'd like to call the copy- (or move-) constructor) something specific should be done. So I tried the following:</p>\n<pre><code>template&lt;typename First, typename ... Rest&gt; template&lt;&gt; \nvar&lt;First, Rest...&gt;::var(var&lt;First, Rest...&gt;&amp; v) {\n    std::cout &lt;&lt; \"copy\" &lt;&lt; std::endl;\n}\n</code></pre>\n<p>When trying to compile this with g++ 4.6 I get\n    error: invalid explicit specialization before \u2018&gt;\u2019 token\n    error: enclosing class templates are not explicitly specialized\n    confused by earlier errors, bailing out</p>\n<p>I see the problem, I would have to say explicitly for which class I would like to specialize the constructor...</p>\n<p>However, I hope it became clear what I want to do. Any ideas how?</p>\n", "Tags": "<c++><templates>", "OwnerUserId": "1693677", "AnswerCount": "2"}, "22017381": {"ParentId": "22016901", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>A template constructor is no copy constructor:</p>\n<pre><code>template&lt;typename First, typename ... Rest&gt; class var {\n    public:\n    var() {};\n    var(const var&amp; v) {\n        std::cout &lt;&lt; \"copy\" &lt;&lt; std::endl;\n    }\n    template&lt;typename T&gt;\n    var(const T&amp; t) {\n        std::cout &lt;&lt; \"general\" &lt;&lt; std::endl;\n    }\n};\n\nint main()\n{\n    var&lt;int&gt; i0;\n    var&lt;int&gt; i1(i0);\n    var&lt;int&gt; i2(\"Hello\");\n}\n</code></pre>\n<p>Gives</p>\n<pre><code>copy\ngeneral\n</code></pre>\n<p>Note: Added some const</p>\n<p>Your attempt to specialize a non copy constructor as copy constructor is failing.</p>\n<p>12.8:</p>\n<blockquote>\n<p id=\"so_22016901_22017381_0\">A non-template constructor for class X is a copy constructor if its\n  first parameter is of type X&amp;, const X&amp;, volatile X&amp; or const volatile\n  X&amp;, and either there are no other parameters or else all other\n  parameters have default arguments (8.3.6).</p>\n</blockquote>\n", "OwnerUserId": "2249683", "LastEditorUserId": "2249683", "LastEditDate": "2014-02-25T14:52:17.593", "Id": "22017381", "Score": "1", "CreationDate": "2014-02-25T14:38:39.280", "LastActivityDate": "2014-02-25T14:52:17.593"}, "bq_ids": {"n4140": {"so_22016901_22017381_0": {"section_id": 451, "quality": 0.96, "length": 24}}, "n3337": {"so_22016901_22017381_0": {"section_id": 442, "quality": 0.96, "length": 24}}, "n4659": {"so_22016901_22017381_0": {"section_id": 474, "quality": 0.96, "length": 24}}}, "22017501": {"ParentId": "22016901", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>You cannot specialize templated method without fully specializing the class. It is prohibited by C++ standard.</p>\n<p>Typical workaround for that is function/method overloading as Dieter L\u00fccking showed in his answer.</p>\n<p><a href=\"https://stackoverflow.com/questions/2097811/c-syntax-for-explicit-specialization-of-a-template-function-in-a-template-clas\">Also answered here</a></p>\n", "OwnerUserId": "1772573", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:28:44.600", "Id": "22017501", "Score": "0", "CreationDate": "2014-02-25T14:43:03.463", "LastActivityDate": "2014-02-25T14:51:14.940"}});