post_cb({"7043195": {"ParentId": "7042858", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>It doesn't seem to be an operator. From N3092 (sorry I don't have a more recent draft handy)</p>\n<blockquote>\n<p id=\"so_7042858_7043195_0\">[14.5.3] 4/ A pack expansion is a sequence of tokens that names one or\n  more parameter packs, followed by an ellipsis. The sequence of tokens\n  is called the pattern of the expansion; its syntax depends on the\n  context in which the expansion occurs. Pack expansions can occur in\n  the following contexts:</p>\n<ul>\n<li>In an initializer-list (8.5); the pattern is an\n  initializer-clause.</li>\n<li>In a base-specifier-list (10); the pattern is a base-specifier.</li>\n<li>In a mem-initializer-list (12.6.2); the pattern is a\n  mem-initializer.</li>\n<li>In a template-argument-list (14.3); the pattern is a\n  template-argument.</li>\n<li>In a dynamic-exception-specification (15.4); the pattern is a\n  type-id.</li>\n<li>In an attribute-list (7.6.1); the pattern is an attribute.</li>\n<li><p id=\"so_7042858_7043195_1\">In a capture-list (5.1.2); the pattern is a capture. <em>[Example:</em></p>\n<pre><code>template&lt;class ... Types&gt; void f(Types ... rest);\ntemplate&lt;class ... Types&gt; void g(Types ... rest) {\n    f(&amp;rest ...); // \u201c&amp;rest ...\u201d is a pack expansion; \u201c&amp;rest\u201d is its pattern\n}\n</code></pre>\n<p id=\"so_7042858_7043195_2\"><em>\u2014 end example]</em></p></li>\n</ul>\n</blockquote>\n", "OwnerUserId": "373025", "LastEditorUserId": "308661", "LastEditDate": "2011-08-12T16:29:38.297", "Id": "7043195", "Score": "5", "CreationDate": "2011-08-12T16:20:39.450", "LastActivityDate": "2011-08-12T16:29:38.297"}, "7049959": {"ParentId": "7042858", "CommentCount": "0", "Body": "<p>According to the handy <a href=\"http://www.nongnu.org/hcb/\" rel=\"nofollow\">Hyperlinked C++ BNF Grammar</a>, a function call looks like this:</p>\n<blockquote>\n<p id=\"so_7042858_7049959_0\">postfix-expression ( expression-list<sub>opt</sub> )</p>\n</blockquote>\n<p><em>expression-list</em> is just an <a href=\"http://www.nongnu.org/hcb/#initializer-list\" rel=\"nofollow\"><em>initializer-list</em></a>, which looks like this:</p>\n<blockquote>\n<p id=\"so_7042858_7049959_1\">initializer-clause ...<sub>opt</sub><br>\n    initializer-list , initializer-clause ...<sub>opt</sub></br></p>\n</blockquote>\n<p>where the ellipses are the pack expansion notation.</p>\n<p><em>initializer-clause</em>, in turn, can be either <a href=\"http://www.nongnu.org/hcb/#assignment-expression\" rel=\"nofollow\"><em>assignment-expression</em></a> or <a href=\"http://www.nongnu.org/hcb/#braced-init-list\" rel=\"nofollow\"><em>braced-init-list</em></a>.</p>\n<p>All this is to say, then, that the ellipsis has a lower grammatical precedence than any actual operator, so for instance the following are equivalent:</p>\n<pre><code>foo(args ^= 0x1234...) and foo((args ^= 0x1234)...)\n\nfoo(x ? args : 42...) and foo((x ? args : 42)...) \n</code></pre>\n", "OwnerUserId": "279597", "PostTypeId": "2", "Id": "7049959", "Score": "1", "CreationDate": "2011-08-13T10:44:14.387", "LastActivityDate": "2011-08-13T10:44:14.387"}, "7042858": {"CommentCount": "8", "AcceptedAnswerId": "7043195", "PostTypeId": "1", "LastEditorUserId": "252000", "CreationDate": "2011-08-12T15:56:19.187", "LastActivityDate": "2011-08-13T10:44:14.387", "LastEditDate": "2011-08-12T17:21:34.970", "ViewCount": "342", "FavoriteCount": "3", "Title": "What is the precedence of the meta-operator ...?", "Id": "7042858", "Score": "7", "Body": "<p>What is the precedence of the meta-operator <code>...</code> whose job is to unpack template type parameter packs? I imagine it's pretty low, but how low is it? The C++ standard says:</p>\n<blockquote>\n<p id=\"so_7042858_7042858_0\">The precedence of operators is not directly specified, but it can be derived from the syntax.</p>\n</blockquote>\n<p>Anyone up for the challenge? Of course, <code>...</code> does not appear in C++03 operator precedence tables.</p>\n<hr>\n<p>Okay, if <code>...</code> is not an operator, what exactly determines that <code>std::forward&lt;Args&gt;(args)...</code> applies to the the entire sequence <code>std::forward&lt;Args&gt;(args)</code> and not just <code>(args)</code>, for example?</p>\n</hr>", "Tags": "<c++><c++11><operator-precedence><ellipsis><variadic-templates>", "OwnerUserId": "252000", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_7042858_7042858_0": {"section_id": 5934, "quality": 0.8888888888888888, "length": 8}}, "n3337": {"so_7042858_7042858_0": {"section_id": 5706, "quality": 0.8888888888888888, "length": 8}}, "n4659": {"so_7042858_7042858_0": {"section_id": 7418, "quality": 0.8888888888888888, "length": 8}}}});