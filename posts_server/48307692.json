post_cb({"bq_ids": {"n4140": {"so_48307692_48308234_0": {"length": 23, "quality": 0.92, "section_id": 3296}}, "n3337": {"so_48307692_48308234_0": {"length": 23, "quality": 0.92, "section_id": 3166}}, "n4659": {"so_48307692_48308234_0": {"length": 23, "quality": 0.92, "section_id": 4058}}}, "48308234": {"Id": "48308234", "PostTypeId": "2", "Body": "<p>It is ill-formed, and GCC has a bug. You specify GCC 4.4.7, so I'm going to base this answer on C++11. The meaning of an initializer is determined by <a href=\"https://timsong-cpp.github.io/cppwp/n3337/dcl.init#16\" rel=\"nofollow noreferrer\">[dcl.init]/16</a>:</p>\n<blockquote>\n<p id=\"so_48307692_48308234_0\">The semantics of initializers are as follows. The destination type is\n  the type of the object or reference being initialized and the source\n  type is the type of the initializer expression. If the initializer is\n  not a single (possibly parenthesized) expression, the source type is\n  not defined.</p>\n<ul>\n<li>the initializer is a (non-parenthesized) braced-init-list, the object or reference is list-initialized ([dcl.init.list]).</li>\n<li>If the destination type is a reference type, see [dcl.init.ref].</li>\n<li>If the destination type is an array of characters, an array of char16_t, an array of char32_t, or an array of wchar_t, and the\n  initializer is a string literal, see [dcl.init.string].</li>\n<li>If the initializer is <code>()</code>, the object is value-initialized.</li>\n<li><strong>Otherwise, if the destination type is an array, the program is ill-formed.</strong></li>\n<li>[... Continued but irrelevant here ... ]</li>\n</ul>\n</blockquote>\n<p>The bullets must be checked in order to determine the meaning of an initializer for a target type. Since you use <code>(other.bs)</code> as an initializer, and the target type is an array, the only applicable bullet is the one I highlighted. The program is ill-formed.</p>\n", "LastActivityDate": "2018-01-17T19:04:40.287", "Score": "3", "CreationDate": "2018-01-17T19:04:40.287", "ParentId": "48307692", "CommentCount": "0", "OwnerUserId": "817643"}, "48307692": {"ViewCount": "89", "Body": "<p>I am having a hard time trying to figure out why this code seems to work. Shouldn't I get an \"array initializer must be an initializer list\" error?</p>\n<pre><code>#include &lt;iostream&gt;\n\nclass B {\npublic:\n  B() { std::cout &lt;&lt; \"B Constructor \" &lt;&lt; std::endl ; }\n  B(const B&amp;) { std::cout &lt;&lt; \"B Copy Constructor \" &lt;&lt; std::endl ; }\n  ~B() { std::cout &lt;&lt; \"B Destructor \" &lt;&lt; std::endl ; }\n} ;\n\nclass A {\npublic:\n  A() { std::cout &lt;&lt; \"A Constructor \" &lt;&lt; std::endl ; }\n  A(const A&amp; other) : bs(other.bs)\n        { std::cout &lt;&lt; \"A Copy Constructor \" &lt;&lt; std::endl ;}\n  ~A() { std::cout &lt;&lt; \"A Destructor \" &lt;&lt; std::endl ; }\nprivate:\n  B bs[12] ;\n};\n\n\nint main() {\n    A a ;\n    A b(a) ;\n    return 0 ;\n}\n</code></pre>\n<p>The output of <code>g++ --version</code> is <code>g++ (GCC) 4.4.7 20120313 (Red Hat 4.4.7-18)</code></p>\n", "Title": "Array initializer must be an initializer list error not shown", "CreationDate": "2018-01-17T18:27:05.253", "LastActivityDate": "2018-01-18T10:27:47.700", "CommentCount": "3", "LastEditDate": "2018-01-18T10:27:47.700", "PostTypeId": "1", "LastEditorUserId": "9231164", "Id": "48307692", "Score": "3", "OwnerUserId": "9231164", "Tags": "<c++>", "AnswerCount": "1"}});