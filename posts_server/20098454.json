post_cb({"20098478": {"ParentId": "20098454", "CommentCount": "7", "Body": "<p><code>vector</code> iterators (and previous references to elements) can possibly be invalidated after the vector is modified. Using them is unsafe.</p>\n", "OwnerUserId": "673730", "PostTypeId": "2", "Id": "20098478", "Score": "4", "CreationDate": "2013-11-20T14:23:52.697", "LastActivityDate": "2013-11-20T14:23:52.697"}, "20098536": {"ParentId": "20098454", "PostTypeId": "2", "CommentCount": "0", "Body": "<p><a href=\"http://en.cppreference.com/w/cpp/container/vector/push_back\" rel=\"nofollow\">push_back</a> can cause reallocation, if we look at the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3485.pdf\" rel=\"nofollow\">draft C++ standard</a> section <code>23.3.6.5</code> <em>vector modifiers</em> says:</p>\n<blockquote>\n<p id=\"so_20098454_20098536_0\">void push_back(const T&amp; x);</p>\n<p id=\"so_20098454_20098536_1\">void push_back(T&amp;&amp; x);</p>\n<blockquote>\n<blockquote>\n<p id=\"so_20098454_20098536_4\">Remarks: Causes reallocation if the new size is greater than the old capacity. <em>If <strong>no</strong> reallocation happens, all the iterators <strong>and references</strong> before the insertion point remain valid</em>.</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>we can see that <a href=\"http://en.cppreference.com/w/cpp/container/vector/back\" rel=\"nofollow\">back</a> gives us a <em>reference</em> and so if there is a reallocation it will not be <em>valid</em> anymore.</p>\n", "OwnerUserId": "1708801", "LastEditorUserId": "1708801", "LastEditDate": "2013-11-20T14:45:21.043", "Id": "20098536", "Score": "7", "CreationDate": "2013-11-20T14:26:12.517", "LastActivityDate": "2013-11-20T14:45:21.043"}, "20098454": {"CommentCount": "0", "ViewCount": "281", "CreationDate": "2013-11-20T14:23:04.140", "LastActivityDate": "2013-11-20T14:45:21.043", "Title": "Weird behavior of reference to vector.back() after vector is modified", "AcceptedAnswerId": "20098536", "PostTypeId": "1", "Id": "20098454", "Score": "5", "Body": "<p>Let's start with this sample code in C++:</p>\n<pre><code>#include &lt;vector&gt;\n#include &lt;iostream&gt;\n\nint main()\n{\n    std::vector&lt;int&gt; vec;\n    vec.push_back(0);\n    for (int i = 1; i &lt; 5; i++)\n    {\n        const auto &amp;x = vec.back();\n        std::cout &lt;&lt; \"Before: \" &lt;&lt; x &lt;&lt; \", \";\n        vec.push_back(i);\n        std::cout &lt;&lt; \"After: \" &lt;&lt; x &lt;&lt; std::endl;\n    }\n    return 0;\n}\n</code></pre>\n<p>The code is compiled with <code>g++ test.cc -std=c++11 -O0</code> and below is the result:</p>\n<pre><code>Before: 0, After: 0\nBefore: 1, After: 0  \nBefore: 2, After: 2\nBefore: 3, After: 3\n</code></pre>\n<p>I was expecting the second line of output to be </p>\n<pre><code>Before: 1, After: 1\n</code></pre>\n<p>since <code>x</code> is reference to an item in the vector, which shall not be modified by appending items to the vector.</p>\n<p>However I haven't read the disassembled code or done any other investigations for now. Also I don't know whether this is an undefined behavior in the language standard.</p>\n<p>I want this to be explained. Thanks.</p>\n", "Tags": "<c++><c++11><vector><reference>", "OwnerUserId": "466611", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_20098454_20098536_2": {"section_id": 986, "quality": 0.9473684210526315, "length": 18}, "so_20098454_20098536_3": {"section_id": 986, "quality": 0.9473684210526315, "length": 18}, "so_20098454_20098536_4": {"section_id": 986, "quality": 0.9473684210526315, "length": 18}}, "n3337": {"so_20098454_20098536_2": {"section_id": 971, "quality": 0.9473684210526315, "length": 18}, "so_20098454_20098536_3": {"section_id": 971, "quality": 0.9473684210526315, "length": 18}, "so_20098454_20098536_4": {"section_id": 971, "quality": 0.9473684210526315, "length": 18}}, "n4659": {"so_20098454_20098536_2": {"section_id": 1049, "quality": 0.9473684210526315, "length": 18}, "so_20098454_20098536_3": {"section_id": 1049, "quality": 0.9473684210526315, "length": 18}, "so_20098454_20098536_4": {"section_id": 1049, "quality": 0.9473684210526315, "length": 18}}}});