post_cb({"1490666": {"ParentId": "1490262", "CommentCount": "0", "Body": "<p>i think your are flushing out the wrong stuff , try flushing scanf using stdin not using stdout,just like this </p>\n<p>#include</p>\n<p>main()\n{\n      int i, j,sums;\n      printf(\"enter the first integer\\n\");</p>\n<pre><code>  scanf(\"%d\",&amp;i);\n  fflush(stdin);\n  printf(\"enter the second integer\\n\");\n\n  scanf(\"%d\",&amp;j);\n  fflush(stdin);\n  sums = i + j;\n  printf(\"sum is %d\\n\",sums);\n  //fflush(stdin);\n  getchar();\n</code></pre>\n<p>}</p>\n", "OwnerUserId": "180898", "PostTypeId": "2", "Id": "1490666", "Score": "0", "CreationDate": "2009-09-29T05:10:38.713", "LastActivityDate": "2009-09-29T05:10:38.713"}, "1490282": {"ParentId": "1490262", "LastEditDate": "2009-09-29T03:43:02.333", "CommentCount": "3", "CreationDate": "2009-09-29T02:23:22.527", "OwnerUserId": "14860", "LastEditorUserId": "14860", "PostTypeId": "2", "Id": "1490282", "Score": "1", "Body": "<p>The following works fine for me:</p>\n<pre><code>#include &lt;stdio.h&gt;\nint main() {\n    int i1, i2, sums;\n\n    printf( \"Enter first integer\\n\" );\n    scanf( \"%d\", &amp;i1 );\n\n    printf( \"Enter second integer\\n\" );\n    scanf( \"%d\", &amp;i2 );\n\n    sums = i1 + i2;\n    printf( \"Sum is %d\\n\", sums );\n\n    return 0;\n}\n</code></pre>\n<p>and gives:</p>\n<pre><code>Enter first integer\n1\nEnter second integer\n6\nSum is 7\n</code></pre>\n<p>This is using Cygwin under XP. What platform and compiler are you using?</p>\n<p><em>Update:</em> One possibility is that, because you're running from within the Eclipse environment, it may be doing some weird stuff that interferes with the normal I/O rules.</p>\n<p>I'm pretty certain that stdout, even if it's not line buffered like stderr, will autoflush if you attempt to read from stdin (at least in most environments I've used, which is a few).</p>\n<p>Eclipse may be fiddling around with the way it attaches the console to the program's actual I/O. I would try to compile the code to a standalone executable and then run it outside the Eclipse environment. If it runs fine there, then it's probably the interaction between Eclipse and the program.</p>\n<p>As I stated, your program works fine under XP with Cygwin, even without the flushes.</p>\n<p>Further explanation is warranted. As Jerry Coffin rightly points out in a comment, the C standard (c1x, 2009/03/01 draft) states:</p>\n<blockquote>\n<p id=\"so_1490262_1490282_0\"><em>5.1.2.1 para 6</em>: The input and output dynamics of interactive devices shall take place as specified in 7.19.3. The intent of these requirements is that unbuffered or line-buffered output appear as soon as possible, to ensure that prompting messages actually appear prior to a program waiting for input.</p>\n<p id=\"so_1490262_1490282_1\"><em>5.1.2.1 para 7</em>: What constitutes an interactive device is implementation-defined.</p>\n<p id=\"so_1490262_1490282_2\"><em>7.9.13 para 3</em>: When a stream is unbuffered, characters are intended to appear from the source or at the destination as soon as possible. Otherwise characters may be accumulated and transmitted to or from the host environment as a block. When a stream is fully buffered, characters are intended to be transmitted to or from the host environment as a block when a buffer is filled. When a stream is line buffered, characters are intended to be transmitted to or from the host environment as a block when a new-line character is encountered.</p>\n<p id=\"so_1490262_1490282_3\"><em>7.9.13 para 7</em>: At program startup, three text streams are predefined and need not be opened explicitly - standard input (for reading conventional input), standard output (for writing conventional output), and standard error (for writing diagnostic output). As initially opened, the standard error stream is not fully buffered; the standard input and standard output streams are fully buffered if and only if the stream can be determined not to refer to an interactive device.</p>\n</blockquote>\n<p>What may be happening is that the way Eclipse interacts with the programs input and output may be causing the program to not recognize stdout as an interactive device. It would then be fully buffered, meaning that you wouldn't see the output until the buffer is full, or the program terminates.</p>\n", "LastActivityDate": "2009-09-29T03:43:02.333"}, "1490270": {"ParentId": "1490262", "CommentCount": "1", "Body": "<p>I think you need \"\\n\" in side the \"scanf\". Like this.</p>\n<pre><code>scanf( \"%d\\n\", &amp;i2; );</code></pre>\n<p>Try it.</p>\n", "OwnerUserId": "176180", "PostTypeId": "2", "Id": "1490270", "Score": "0", "CreationDate": "2009-09-29T02:19:35.527", "LastActivityDate": "2009-09-29T02:19:35.527"}, "1490262": {"CommentCount": "8", "ViewCount": "460", "PostTypeId": "1", "LastEditorUserId": "572", "CreationDate": "2009-09-29T02:15:40.600", "LastActivityDate": "2009-09-29T10:48:32.807", "Title": "Simple C Program", "OwnerDisplayName": "agorski", "LastEditDate": "2009-09-29T10:48:32.807", "Id": "1490262", "Score": "0", "Body": "<p>Ok so I am trying to learn C and I want my user to input a value so I am using scanf.  I started off not having the flushes, because nothing was comming up until I typed in two values.  Now that I have them though I get the same problem there still is no output until after I type in two numbers.  Here is my code:</p>\n<pre><code>#include &lt;stdio.h&gt;\nusing namespace std;\n\nint main()\n{\n\n    int i1, i2, sums;\n\n    printf( \"Enter first integer\\n\" );\n    fflush(stdout);\n    scanf( \"%d\", &amp;i1 );\n\n    printf( \"Enter second integer\\n\" );\n    fflush(stdout);\n    scanf( \"%d\", &amp;i2 );\n    sums = i1 + i2;\n\n    printf( \"Sum is %d\\n\", sums );\n    fflush(stdout);\n    return 0;\n}\n</code></pre>\n<p>Any help would be greatly appreciated.</p>\n", "Tags": "<c++><scanf><flush>", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_1490262_1490282_1": {"section_id": 5804, "quality": 0.5714285714285714, "length": 4}}, "n3337": {"so_1490262_1490282_1": {"section_id": 5577, "quality": 0.5714285714285714, "length": 4}}, "n4659": {"so_1490262_1490282_1": {"section_id": 7262, "quality": 0.5714285714285714, "length": 4}}}});