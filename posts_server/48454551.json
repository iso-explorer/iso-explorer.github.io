post_cb({"bq_ids": {"n4140": {"so_48454551_48454646_0": {"length": 13, "quality": 0.9285714285714286, "section_id": 582}, "so_48454551_48454646_1": {"length": 33, "quality": 1.0, "section_id": 583}, "so_48454551_48454559_0": {"length": 19, "quality": 1.0, "section_id": 653}}, "n3337": {"so_48454551_48454646_0": {"length": 13, "quality": 0.9285714285714286, "section_id": 572}, "so_48454551_48454646_1": {"length": 33, "quality": 1.0, "section_id": 573}, "so_48454551_48454559_0": {"length": 19, "quality": 1.0, "section_id": 643}}, "n4659": {"so_48454551_48454646_0": {"length": 13, "quality": 0.9285714285714286, "section_id": 605}, "so_48454551_48454646_1": {"length": 33, "quality": 1.0, "section_id": 606}, "so_48454551_48454559_0": {"length": 19, "quality": 1.0, "section_id": 681}}}, "48454576": {"Id": "48454576", "PostTypeId": "2", "Body": "<p>There is no \"pointer assignment operator\". This is the assignment operator and you are using it with pointer operands.</p>\n<p>It's not possible to overload an operator unless at least one operand has class or enum type. (Pointer type is not class type).</p>\n", "LastEditorUserId": "1505939", "LastActivityDate": "2018-01-26T01:28:08.640", "Score": "0", "CreationDate": "2018-01-26T01:27:26.310", "ParentId": "48454551", "CommentCount": "2", "OwnerUserId": "1505939", "LastEditDate": "2018-01-26T01:28:08.640"}, "48454551": {"ViewCount": "60", "Body": "<p>Is there a way to overload the pointer assignment operator?\ne.g.\noverload pointer assignment operator for class A when</p>\n<pre><code>A *x, *y;\nx = y;\n</code></pre>\n", "Title": "c++ pointer assignment operator overload(not just object assignment but pointer assignment)", "CreationDate": "2018-01-26T01:22:16.803", "LastActivityDate": "2018-01-26T01:37:09.857", "CommentCount": "6", "PostTypeId": "1", "Id": "48454551", "Score": "-1", "OwnerUserId": "2465273", "Tags": "<c++>", "AnswerCount": "3"}, "48454646": {"Id": "48454646", "PostTypeId": "2", "Body": "<p>No, because overloaded operators are only considered when at least one argument has a class or enum type.  (A pointer to class type is considered a fundamental type and does not count as a \"class type\" itself.)</p>\n<p>C++ Standard [over.match.oper]/1-2:</p>\n<blockquote>\n<p id=\"so_48454551_48454646_0\">If no operand of an operator in an expression has a type that is a class or an enumeration, the operator is assumed to be a built-in operator and interpreted according to Clause [expr].</p>\n<p id=\"so_48454551_48454646_1\">If either operand has a type that is a class or enumeration, a user-defined operator function might be declared that implements this operator or a user-defined conversion can be necessary to convert the operand to a type that is appropriate for a built-in operator. In this case, overload resolution is used to determine which operator function or built-in operator is to be invoked to implement the operator.</p>\n</blockquote>\n<p>(Though you might instead encourage users of <code>A</code> to use some smart pointer-like class <code>APtr</code> instead of raw pointers to get the desired behavior.)</p>\n", "LastActivityDate": "2018-01-26T01:37:09.857", "Score": "0", "CreationDate": "2018-01-26T01:37:09.857", "ParentId": "48454551", "CommentCount": "0", "OwnerUserId": "459640"}, "48454559": {"Id": "48454559", "PostTypeId": "2", "Body": "<p>No, this is not possible. Pointer types are scalar types, but overloading operators requires a non-scalar parameter. In particular ([over.oper]p6):</p>\n<blockquote>\n<p id=\"so_48454551_48454559_0\">An operator function shall either be a non-static member function or be a non-member function that has\n  at least one parameter whose type is a class, a reference to a class, an enumeration, or a reference to an\n  enumeration.</p>\n</blockquote>\n<p>If you had a binary operator where one parameter was a user-defined type and the other a pointer, that would work, but in the situation you're asking about, <em>both</em> operands are pointers.</p>\n", "LastEditorUserId": "596781", "LastActivityDate": "2018-01-26T01:28:52.243", "Score": "2", "CreationDate": "2018-01-26T01:23:36.750", "ParentId": "48454551", "CommentCount": "0", "OwnerUserId": "596781", "LastEditDate": "2018-01-26T01:28:52.243"}});