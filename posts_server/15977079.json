post_cb({"15977148": {"ParentId": "15977079", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Other issues aside, the use of <code>bool auto_delete=true</code> is standard C++.</p>\n<p>Officially, this is known as a <em>default template-argument</em>. From C++11 <strong>14.1 Template parameters</strong>:</p>\n<blockquote>\n<p id=\"so_15977079_15977148_0\">9 A <em>default template-argument</em> is a <em>template-argument</em> (14.3) speci\ufb01ed after <code>=</code> in a <em>template-parameter</em>. A <em>default template-argument</em> may be speci\ufb01ed for any kind of <em>template-parameter</em> (type, non-type, template) that\n  is not a template parameter pack (14.5.3).</p>\n</blockquote>\n", "OwnerUserId": "367273", "LastEditorUserId": "367273", "LastEditDate": "2013-04-12T17:15:46.127", "Id": "15977148", "Score": "3", "CreationDate": "2013-04-12T17:09:53.913", "LastActivityDate": "2013-04-12T17:15:46.127"}, "15977415": {"ParentId": "15977079", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>The code is standard C++; it is sometimes useful to declare a default template argument. For example, if you define a class <code>Vector3D&lt;T&gt;</code> (in the sense of a mathematical 3D vector) it may make sense to default <code>T</code> to <code>double</code>. As for the Standard Library <code>std::vector</code> template, it is declared as follows:</p>\n<pre><code>template &lt; class T, class Alloc = allocator&lt;T&gt; &gt; class vector;\n</code></pre>\n<p>Notice how the allocator used by the class defaults to the specific allocator provided by a traits class; most of us normally specify only the <code>class T</code> and let the default allocator handle the underlying data structure. Most other templates in the C++ Standard Library are similarly defined with some default parameters.</p>\n<p>That brings me to the specific case you illustrate. Other style issues aside, the purpose seems to be suitable for type traits: the type <code>T</code> could have an associated <code>auto_delete_trait</code> declared as follows:</p>\n<p><a href=\"http://liveworkspace.org/code/1eZZ21%240\" rel=\"nofollow\">Live Code Example</a></p>\n<pre><code>#include&lt;iostream&gt;\n\ntemplate&lt;typename T&gt;\nstruct auto_delete_trait {\n  static const bool value = true;\n};\n\ntemplate&lt;typename T&gt;\nstruct myclass {\n  void method(T val) {\n    std::cout&lt;&lt;\"value: \"&lt;&lt;val&lt;&lt;std::endl;\n    if(auto_delete_trait&lt;T&gt;::value) {\n      std::cout&lt;&lt;\"auto_delete enabled\"&lt;&lt;std::endl;\n    } else {\n      std::cout&lt;&lt;\"auto_delete disabled\"&lt;&lt;std::endl;\n    }\n  }\n};\n\n// suppose that ints are not supposed to be auto-deleted (obviously\n// this is an example; the concept of \"auto-delete\" does not make\n// sense here)\ntemplate&lt;&gt; \nstruct auto_delete_trait&lt;int&gt; {\n  static const bool value = false;  \n};\n\nint main() {\n  myclass&lt;double&gt; c1;\n  myclass&lt;int&gt; c2;\n  c1.method(1.234);\n  c2.method(1);\n\n  // expected output:\n  // value: 1.234\n  // auto_delete enabled\n  // value: 1\n  // auto_delete disabled\n\n  return 0;\n}\n</code></pre>\n", "OwnerUserId": "104427", "LastEditorUserId": "104427", "LastEditDate": "2013-04-12T17:45:02.707", "Id": "15977415", "Score": "1", "CreationDate": "2013-04-12T17:27:37.430", "LastActivityDate": "2013-04-12T17:45:02.707"}, "bq_ids": {"n4140": {"so_15977079_15977148_0": {"section_id": 62, "quality": 0.7, "length": 14}}, "n3337": {"so_15977079_15977148_0": {"section_id": 57, "quality": 0.7, "length": 14}}, "n4659": {"so_15977079_15977148_0": {"section_id": 64, "quality": 0.75, "length": 15}}}, "15977079": {"CommentCount": "10", "ViewCount": "148", "CreationDate": "2013-04-12T17:06:41.697", "LastActivityDate": "2013-04-12T17:45:02.707", "Title": "What is the name for this template programming technique, and is this standard C++?", "AcceptedAnswerId": "15977148", "PostTypeId": "1", "Id": "15977079", "Score": "1", "Body": "<p>My boss who has written this code calls it a default template parameter, but I'm not sure it's the name. This looks somewhat like partial specialization, but with more intuitive syntax. Is it even standard C++?</p>\n<pre><code>template&lt;class T, bool auto_delete=true&gt; class ArrayPtr : public  Array&lt;T*&gt; {\npublic:\n    ArrayPtr(){}\n    ~ArrayPtr(){Done();}\n\n    bool    Done() { \n                if (auto_delete){\n                    FOR(i, Array&lt;T*&gt;::GetSize()) delete (*this);\n                }\n                return Array&lt;T*&gt;::Done();}\n} ;\n</code></pre>\n", "Tags": "<c++><templates>", "OwnerUserId": "634821", "AnswerCount": "2"}});