post_cb({"46066732": {"ParentId": "46066263", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>Checking the standard library sources installed with my MSVC, <code>std::experimental::filesystem::remove</code> calls its internal <code>_Unlink</code> helper, which simply calls <a href=\"https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/remove-wremove\" rel=\"nofollow noreferrer\"><code>_wremove</code></a>, which simply calls Windows <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/aa363915(v=vs.85).aspx\" rel=\"nofollow noreferrer\"><code>DeleteFileW</code></a>. Similarly, <code>boost::filesystem::remove</code> also just calls <code>DeleteFileW</code> on Windows.</p>\n<hr>\n<p><code>std::filesystem::remove</code> <a href=\"https://timsong-cpp.github.io/cppwp/fs.op.remove#1\" rel=\"nofollow noreferrer\">is specified by reference to POSIX <code>remove</code></a>, but the global wording in <a href=\"https://timsong-cpp.github.io/cppwp/fs.conform.9945#2\" rel=\"nofollow noreferrer\">[fs.conform.9945]</a> makes clear that implementations are not required to provide the exact POSIX behavior:</p>\n<blockquote>\n<p id=\"so_46066263_46066732_0\">Implementations should provide such behavior as it is defined by\n  POSIX. Implementations shall document any behavior that differs from\n  the behavior defined by POSIX. Implementations that do not support\n  exact POSIX behavior should provide behavior as close to POSIX\n  behavior as is reasonable given the limitations of actual operating\n  systems and file systems. If an implementation cannot provide any reasonable behavior, the implementation shall report an error as specified in [fs.err.report]. [\u2009Note: [...] ]</p>\n<p id=\"so_46066263_46066732_1\">Implementations are not required to provide behavior that is not supported by a particular file system. [\u2009Example: [...]\u2009]</p>\n</blockquote>\n<p>Any quirks in <code>::remove</code> (that is about the actual act of removing rather than identification of the file to be removed) are likely due to limitations of the underlying OS API. I see no reason to think that an implementation of <code>std::filesystem::remove</code> on the same operating system will magically do better.</p>\n</hr>", "OwnerUserId": "2756719", "LastEditorUserId": "2756719", "LastEditDate": "2017-09-06T19:43:53.450", "Id": "46066732", "Score": "2", "CreationDate": "2017-09-06T04:21:21.480", "LastActivityDate": "2017-09-06T19:43:53.450"}, "46066263": {"CommentCount": "11", "AcceptedAnswerId": "46066732", "CreationDate": "2017-09-06T03:21:34.890", "LastActivityDate": "2017-09-06T19:43:53.450", "Title": "Difference between std::remove and boost::filesystem::remove?", "ViewCount": "102", "PostTypeId": "1", "Id": "46066263", "Score": "2", "Body": "<p>In the C++17 filesystem library, we got <code>std::filesystem::remove(path)</code>, which \u2014 as I understand it \u2014 is a direct port of <code>boost::filesystem::remove(path)</code> from Boost.Filesystem.</p>\n<p>But C++ inherited from C89 a very similar function called <code>std::remove(path)</code>, which is <em>also</em> documented as a way to remove a file from the filesystem. I'm vaguely aware of some pitfalls with this function, e.g. I believe I have heard that on Windows <code>std::remove</code> cannot be used to remove a file that is still being held open by the current process.</p>\n<p>Does <code>std::filesystem::remove</code> fix these issues with <code>std::remove</code>?  Should I prefer <code>std::filesystem::remove</code> over <code>std::remove</code>? Or is the former just a namespaced synonym for the latter, with the same warts and pitfalls?</p>\n<p>The title of my question asks for the difference between <code>boost::filesystem::remove(path)</code> and <code>std::remove(path)</code> because I figure that <code>std::filesystem::remove(path)</code> may not have been implemented by a lot of library vendors yet, but my understanding is that it's supposed to be basically a direct copy of the Boost version. So if you know about Boost.Filesystem on Windows, you probably know enough to answer this question too.</p>\n", "Tags": "<c++><visual-studio><boost><file-handling>", "OwnerUserId": "1424877", "AnswerCount": "1"}, "bq_ids": {"n4659": {"so_46066263_46066732_0": {"section_id": 2776, "quality": 0.9523809523809523, "length": 40}, "so_46066263_46066732_1": {"section_id": 2777, "quality": 0.8888888888888888, "length": 8}}}});