post_cb({"bq_ids": {"n4140": {"so_16370924_16371110_0": {"length": 8, "quality": 1.0, "section_id": 5694}}, "n3337": {"so_16370924_16371110_0": {"length": 8, "quality": 1.0, "section_id": 5477}}, "n4659": {"so_16370924_16371110_0": {"length": 8, "quality": 1.0, "section_id": 7139}}}, "16371110": {"Id": "16371110", "PostTypeId": "2", "Body": "<p>According to the Standard, C++11 \u00a724.6.1/1,</p>\n<blockquote>\n<p id=\"so_16370924_16371110_0\">After it is constructed, and every time ++ is used, the iterator reads and stores a value of T.</p>\n</blockquote>\n<p>So it's actually prompting you for input before <code>main</code> is entered, when the global variable is initialized. Moving the declaration of <code>ii</code> to the second line of <code>main</code> fixes the problem.</p>\n", "LastActivityDate": "2013-05-04T06:03:50.163", "Score": "2", "CreationDate": "2013-05-04T06:03:50.163", "ParentId": "16370924", "CommentCount": "0", "OwnerUserId": "153285"}, "16370924": {"ViewCount": "113", "Body": "<p>I am trying the following code,</p>\n<pre><code>#include&lt;iostream&gt;\n#include&lt;string&gt;\n#include&lt;iterator&gt;\nusing namespace std;\nostream_iterator&lt;string&gt; oo(cout);\nistream_iterator&lt;string&gt; ii(cin);\nistream_iterator&lt;string&gt; eos;\nint main()\n{\n    **oo = \"Some string ..\\n\";\n    string s1 = *ii;\n    cout &lt;&lt; s1; \n    return 0;\n}\n</code></pre>\n<p>It first asks for input, and then prints the output, opposite to what was expected.</p>\n<p>How come?</p>\n", "Title": "cin does not flush cout when using stream iterators", "CreationDate": "2013-05-04T05:32:50.823", "LastActivityDate": "2013-05-04T06:03:50.163", "CommentCount": "6", "LastEditDate": "2013-05-04T05:59:02.683", "PostTypeId": "1", "LastEditorUserId": "153285", "Id": "16370924", "Score": "-1", "OwnerUserId": "2349014", "Tags": "<c++><stream>", "AnswerCount": "1"}});