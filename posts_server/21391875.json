post_cb({"bq_ids": {"n4140": {"so_21391875_21469719_0": {"length": 39, "quality": 0.9512195121951219, "section_id": 1535}}, "n3337": {"so_21391875_21469719_0": {"length": 39, "quality": 0.9512195121951219, "section_id": 1529}}, "n4659": {"so_21391875_21469719_0": {"length": 39, "quality": 0.9512195121951219, "section_id": 1685}}}, "21391875": {"ViewCount": "144", "Body": "<p>I want to make a custom <code>char_traits</code> class for my own type. I have declared all the functions, but I am having some confusion regarding vague semantics given in the standard.</p>\n<ol>\n<li><p>What are <code>fpos_type</code>, <code>off_type</code> and <code>state_type</code> expected to do? Where are they required, if at all?</p></li>\n<li><p>Standard says to keep <code>traits::eof()</code> and valid code points separate and thus asks to use an <code>int_type</code> which is bigger than the <code>char_type</code>. But can I then make my <code>char_type</code> as a signed number where I know valid code points are only in the non-negative range. It leaves me with negative values as possible values of <code>traits::eof()</code>. Or should it be that <code>int_type</code> should be a proper superset of <code>char_type</code> so that no <code>char_type</code> can ever take the value of <code>eof()</code>? Being more to the point, can I make <code>int_type</code> and <code>char_type</code> to be same?</p></li>\n</ol>\n", "Title": "How do I declare a custom char_traits<> for my own type?", "CreationDate": "2014-01-27T21:17:56.837", "LastActivityDate": "2014-01-31T00:48:05.813", "CommentCount": "0", "LastEditDate": "2014-01-30T22:58:56.043", "PostTypeId": "1", "LastEditorUserId": "387076", "Id": "21391875", "Score": "1", "OwnerUserId": "605618", "Tags": "<c++><iostream><streambuf>", "AnswerCount": "1"}, "21469719": {"Id": "21469719", "PostTypeId": "2", "Body": "<ol>\n<li><p><code>std::fpos</code> is a class that encapsulates file positioning semantics for file streams. It uses the current conversion state to identify file positions. <code>off_type</code> and <code>pos_type</code> are types defined in <code>std::char_traits</code> that are types for offset types and position types respectively. <code>pos_type</code> is used as arguments to seek functions and is the type returned from the tell functions. It is a type denoting absolute positions. <code>off_type</code> is used in the overloads of the seek functions for specifying offsets from a provided file position.</p>\n<p><code>state_type</code> is also defined in <code>std::char_traits</code>. It is used for specifying the conversion state of a multibyte sequence.</p>\n<p>You can look up all the requirements for these types in <code>[char.traits.require]</code>.</p></li>\n<li><p>This is the definition of <code>traits::int_type</code> - <code>[char.traits.typedef]</code></p>\n<blockquote>\n<pre><code>typedef INT_T int_type\n</code></pre>\n<p id=\"so_21391875_21469719_0\">For a certain character container type <code>char_type</code>, a related container type <code>INT_T</code> shall be a type or class which can represent all of the valid characters converted from the corresponding <code>char_type</code> values, as well as an end-of-file value, <code>eof()</code>. The type <code>int_type</code> represents a character container type which can hold end-of-file to be used as a return type of the iostream class member functions.</p>\n</blockquote>\n<p>This definition carries with it the implication that <code>int_type</code> merely be able to to represent values of type <code>char_type</code>, and also the <code>eof()</code> value. It defines no further requirements for the type other than what types it aliases for certain specializations of <code>std::char_traits</code></p></li>\n</ol>\n", "LastEditorUserId": "701092", "LastActivityDate": "2014-01-31T00:48:05.813", "Score": "0", "CreationDate": "2014-01-30T23:32:52.757", "ParentId": "21391875", "CommentCount": "0", "OwnerUserId": "701092", "LastEditDate": "2014-01-31T00:48:05.813"}});