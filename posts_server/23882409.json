post_cb({"23882409": {"CommentCount": "9", "AcceptedAnswerId": "23883036", "PostTypeId": "1", "LastEditorUserId": "251153", "CreationDate": "2014-05-27T06:24:43.383", "LastActivityDate": "2014-05-27T12:09:29.803", "LastEditDate": "2014-05-27T06:47:13.473", "ViewCount": "2060", "FavoriteCount": "7", "Title": "C++14 value-initialization with deleted constructor", "Id": "23882409", "Score": "38", "Body": "<p>I have some misunderstanding:</p>\n<p>Let's mark default constructor of struct A as deleted:</p>\n<pre><code>struct A\n{\n  A() = delete;\n};\n</code></pre>\n<p>The next instruction is well-formed and what's that effect?:</p>\n<pre><code>A a{};\n</code></pre>\n<p>From <a href=\"http://en.cppreference.com/w/cpp/language/value_initialization\">cppreference <em>value initilization</em></a>:</p>\n<blockquote>\n<p id=\"so_23882409_23882409_0\">1) If T is a class type with no default constructor or with a\n  user-provided default constructor or with a deleted default\n  constructor, the object is default-initialized.</p>\n</blockquote>\n<p>but then the effect of default initialization is:</p>\n<blockquote>\n<p id=\"so_23882409_23882409_1\">If T is a class type, the default constructor is called to provide the\n  initial value for the new object.</p>\n</blockquote>\n<p>Or it's aggregate initialization?\nThanks!</p>\n", "Tags": "<c++><language-lawyer><c++14>", "OwnerUserId": "3120079", "AnswerCount": "2"}, "23883035": {"ParentId": "23882409", "PostTypeId": "2", "CommentCount": "10", "Body": "<p>It is well formed. <code>A</code> is an aggregate<sup><strong>1</strong></sup>, and, according to <a href=\"https://github.com/cplusplus/draft/blob/master/papers/N3936.pdf\">draft N3936</a>, an empty initializer list used in <em>direct-list initialization</em> of an aggregate results in aggregate initialization:</p>\n<p>From <strong>\u00a7 8.5.4/3 List-initialization [dcl.init.list]</strong>:</p>\n<blockquote>\n<p id=\"so_23882409_23883035_0\">List-initialization of an object or reference of type T is defined as follows:</p>\n<p id=\"so_23882409_23883035_1\">\u2014 If T is an aggregate, aggregate initialization is performed (8.5.1).</p>\n<p id=\"so_23882409_23883035_2\">[ Example:</p>\n<p id=\"so_23882409_23883035_3\"><code>struct S2 { int m1; double m2, m3; };</code></p>\n<p id=\"so_23882409_23883035_4\">....  </p>\n<p id=\"so_23882409_23883035_5\"><code>S2 s23{};   // OK: default to 0,0,0</code></p>\n<p id=\"so_23882409_23883035_6\">....</p>\n<p id=\"so_23882409_23883035_7\">\u2014 end example ]</p>\n<p id=\"so_23882409_23883035_8\">....</p>\n</blockquote>\n<p>The relevant changes between C++11 and C++1y are a change in the precedence of aggregate vs. value initialization for the case of aggregates:</p>\n<p>C++11 leads with</p>\n<blockquote>\n<p id=\"so_23882409_23883035_9\">List-initialization of an object or reference of type T is defined as\n  follows: </p>\n<p id=\"so_23882409_23883035_10\">\u2014 If the initializer list has no elements and T is a class\n  type with a default constructor, the object is value-initialized.</p>\n<p id=\"so_23882409_23883035_11\">\u2014 Otherwise, if T is an aggregate, aggregate initialization is performed (8.5.1)....</p>\n</blockquote>\n<p>followed by the example above.</p>\n<p>C++1y gives priority to aggregate initialization:</p>\n<blockquote>\n<p id=\"so_23882409_23883035_12\">List-initialization of an object or reference of type T is defined as follows:</p>\n<p id=\"so_23882409_23883035_13\">\u2014 If T is an aggregate, aggregate initialization is performed (8.5.1).</p>\n<p id=\"so_23882409_23883035_14\">....</p>\n<p id=\"so_23882409_23883035_15\">\u2014 Otherwise, if the initializer list has no elements and T is a class type with a default constructor, the object is value-initialized.</p>\n</blockquote>\n<hr>\n<p><sup><strong>1</strong></sup> Why is <code>A</code> an aggregate?</p>\n<p>It is an aggregate both in C++11 and C++14.</p>\n<p>C++1y:</p>\n<blockquote>\n<p id=\"so_23882409_23883035_16\"><strong>8.5.1 Aggregates [dcl.init.aggr]</strong></p>\n<p id=\"so_23882409_23883035_17\">An aggregate is an array or a class (Clause 9) with no user-provided constructors (12.1), no private or protected non-static data members (Clause 11), no base classes (Clause 10), and no virtual functions (10.3).</p>\n</blockquote>\n<p>The only part that is not obvious is whether the defaulted constructor is user-provided or not. It isn't:</p>\n<p>In <strong>\u00a7 8.4.2 [dcl.fct.def.default]</strong>: </p>\n<blockquote>\n<p id=\"so_23882409_23883035_18\">A function is user-provided if it is user-declared and not explicitly\n  defaulted or deleted on its first declaration.</p>\n</blockquote>\n</hr>", "OwnerUserId": "661519", "LastEditorUserId": "661519", "LastEditDate": "2014-05-27T09:51:28.813", "Id": "23883035", "Score": "19", "CreationDate": "2014-05-27T07:03:28.627", "LastActivityDate": "2014-05-27T09:51:28.813"}, "bq_ids": {"n4140": {"so_23882409_23882409_0": {"section_id": 3287, "quality": 0.9166666666666666, "length": 11}, "so_23882409_23883035_11": {"section_id": 633, "quality": 0.6666666666666666, "length": 4}, "so_23882409_23883035_12": {"section_id": 3325, "quality": 1.0, "length": 6}, "so_23882409_23883035_9": {"section_id": 3325, "quality": 1.0, "length": 6}, "so_23882409_23882409_1": {"section_id": 3296, "quality": 0.7, "length": 7}, "so_23882409_23883035_17": {"section_id": 3298, "quality": 0.8421052631578947, "length": 16}, "so_23882409_23883035_0": {"section_id": 3325, "quality": 1.0, "length": 6}, "so_23882409_23883035_18": {"section_id": 3274, "quality": 0.8888888888888888, "length": 8}, "so_23882409_23883035_13": {"section_id": 3325, "quality": 0.8, "length": 4}, "so_23882409_23883036_1": {"section_id": 3274, "quality": 0.8888888888888888, "length": 8}, "so_23882409_23883036_0": {"section_id": 3325, "quality": 1.0, "length": 6}, "so_23882409_23883035_10": {"section_id": 3325, "quality": 1.0, "length": 9}, "so_23882409_23883035_15": {"section_id": 3325, "quality": 1.0, "length": 10}, "so_23882409_23883035_1": {"section_id": 3325, "quality": 0.8, "length": 4}}, "n3337": {"so_23882409_23883035_11": {"section_id": 3195, "quality": 0.8333333333333334, "length": 5}, "so_23882409_23882409_0": {"section_id": 359, "quality": 0.75, "length": 9}, "so_23882409_23883035_12": {"section_id": 3195, "quality": 1.0, "length": 6}, "so_23882409_23883035_9": {"section_id": 3195, "quality": 1.0, "length": 6}, "so_23882409_23882409_1": {"section_id": 3166, "quality": 0.7, "length": 7}, "so_23882409_23883035_17": {"section_id": 3168, "quality": 0.8421052631578947, "length": 16}, "so_23882409_23883035_0": {"section_id": 3195, "quality": 1.0, "length": 6}, "so_23882409_23883035_18": {"section_id": 3145, "quality": 0.8888888888888888, "length": 8}, "so_23882409_23883035_13": {"section_id": 3195, "quality": 0.8, "length": 4}, "so_23882409_23883036_1": {"section_id": 3145, "quality": 0.8888888888888888, "length": 8}, "so_23882409_23883036_0": {"section_id": 3195, "quality": 1.0, "length": 6}, "so_23882409_23883035_10": {"section_id": 3195, "quality": 1.0, "length": 9}, "so_23882409_23883035_15": {"section_id": 3195, "quality": 0.9, "length": 9}, "so_23882409_23883035_1": {"section_id": 3195, "quality": 0.8, "length": 4}}, "n4659": {"so_23882409_23882409_0": {"section_id": 4049, "quality": 0.9166666666666666, "length": 11}, "so_23882409_23883035_11": {"section_id": 4091, "quality": 0.8333333333333334, "length": 5}, "so_23882409_23883035_12": {"section_id": 4091, "quality": 1.0, "length": 6}, "so_23882409_23883035_9": {"section_id": 4091, "quality": 1.0, "length": 6}, "so_23882409_23883035_18": {"section_id": 4032, "quality": 0.8888888888888888, "length": 8}, "so_23882409_23883035_17": {"section_id": 4063, "quality": 0.631578947368421, "length": 12}, "so_23882409_23883035_0": {"section_id": 4091, "quality": 1.0, "length": 6}, "so_23882409_23883035_13": {"section_id": 4091, "quality": 0.8, "length": 4}, "so_23882409_23882409_1": {"section_id": 4058, "quality": 0.8, "length": 8}, "so_23882409_23883036_1": {"section_id": 4032, "quality": 0.8888888888888888, "length": 8}, "so_23882409_23883036_0": {"section_id": 4091, "quality": 1.0, "length": 6}, "so_23882409_23883035_10": {"section_id": 4091, "quality": 1.0, "length": 9}, "so_23882409_23883035_15": {"section_id": 4091, "quality": 1.0, "length": 10}, "so_23882409_23883035_1": {"section_id": 4091, "quality": 0.8, "length": 4}}}, "23883036": {"ParentId": "23882409", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>Your <code>struct A</code> is :</p>\n<ul>\n<li>a class type that has:\n<ul>\n<li>no user-provided constructors<sup>1</sup>,</li>\n<li>no private or protected non-static data members,</li>\n<li>no base classes,</li>\n<li>no virtual member functions.</li>\n</ul></li>\n</ul>\n<p>It therefore qualifies as an <em>aggregate type</em>, according to the definition provided by \u00a7 8.5.1/1.</p>\n<p>Then comes the priority of aggregate initialization over value initialization. The standard says that aggregate initialization has precedence over value intialization (draft N3936, \u00a7 8.5.4/3, page 201) (emphasis mine)</p>\n<blockquote>\n<p id=\"so_23882409_23883036_0\">List-initialization of an object or reference of type T is defined as follows:</p>\n<ul>\n<li><strong>If T is an aggregate, aggregate initialization is performed</strong> (8.5.1).</li>\n<li>Otherwise, if the initializer list has no elements and T is a class type with a default constructor, the object is value-initialized.</li>\n<li>[... more rules...]</li>\n</ul>\n</blockquote>\n<p><sup><strong>(1)</strong> </sup>As requested in the comments on why a deleted constructor does not count as <em>user-defined</em>, here is what the standard says (draft N3936, \u00a7 8.4.2/5, page 198):</p>\n<blockquote>\n<p id=\"so_23882409_23883036_1\">A function is user-provided if it is user-declared and not explicitly defaulted or deleted on its first declaration.</p>\n</blockquote>\n", "OwnerUserId": "703016", "LastEditorUserId": "703016", "LastEditDate": "2014-05-27T12:09:29.803", "Id": "23883036", "Score": "29", "CreationDate": "2014-05-27T07:03:37.863", "LastActivityDate": "2014-05-27T12:09:29.803"}});