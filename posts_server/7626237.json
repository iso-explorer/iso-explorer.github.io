post_cb({"bq_ids": {"n4140": {"so_7626237_7626342_0": {"section_id": 369, "quality": 0.9615384615384616, "length": 25}}, "n3337": {"so_7626237_7626342_0": {"section_id": 359, "quality": 0.9615384615384616, "length": 25}}, "n4659": {"so_7626237_7626342_0": {"section_id": 381, "quality": 0.8846153846153846, "length": 23}}}, "7626342": {"ParentId": "7626237", "CommentCount": "0", "Body": "<p>A class that conforms to the concept <code>DefaultConstrutible</code> allows the following expressions (paragraph 17.6.3.1 of N3242):</p>\n<pre><code>T u; // object is default initialized\nT u{}: // object is value intialized\nT(); T{}; // value initialized temporary\n</code></pre>\n<p>So much for the concept. Paragraph 12.1/5 actually tells us what a default constructor is</p>\n<blockquote>\n<p id=\"so_7626237_7626342_0\">A default constructor for a class X is a constructor of class X that\n  can be called without an argument. If there is no user-declared\n  constructor for class X, a constructor having no parameters is\n  implicitly declared as defaulted (8.4). An implicitly-declared default\n  constructor is an inline public member of its class. ...</p>\n</blockquote>\n<p>With the introduction of deleted special member functions, the standard also defines a list of cases where no implicit default constructor is available and the distinction of trivial and non-trivial default constructors.</p>\n", "OwnerUserId": "105672", "PostTypeId": "2", "Id": "7626342", "Score": "2", "CreationDate": "2011-10-02T12:35:34.593", "LastActivityDate": "2011-10-02T12:35:34.593"}, "7626237": {"CommentCount": "5", "ViewCount": "2572", "PostTypeId": "1", "LastEditorUserId": "374752", "CreationDate": "2011-10-02T12:14:34.240", "LastActivityDate": "2011-10-02T12:54:18.203", "Title": "What is the concept of default constructor?", "AcceptedAnswerId": "7626342", "LastEditDate": "2011-10-02T12:54:18.203", "Id": "7626237", "Score": "-1", "Body": "<p>help me in getting the concept of default constructor with example.\ni don't know when to use default constructor in the program and when not to.\nhelp me coming over this problem.explain it with an example for me.\nwhen it is necessary to use it?</p>\n<pre><code>#include&lt;iostream&gt;\nusing namespace std;\n\nclass abc\n{\npublic:\n    abc()\n    {\n        cout&lt;&lt;\"hello\";\n    }\n};\n\nint main()\n{\n    abc a;\n    system(\"pause\");\n    return 0;\n}\n</code></pre>\n<p>so actually what is the use of default constructor and when it is necessary to use it?</p>\n", "Tags": "<c++><programming-languages>", "OwnerUserId": "975336", "AnswerCount": "4"}, "7626325": {"ParentId": "7626237", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>Default constructor is constructor with no argument and will be called on these situations:</p>\n<ul>\n<li><p>Instancing or newing an object of a class without any constructor, like:</p>\n<pre><code>abc a;\nabc* aptr=new abc;\n</code></pre></li>\n<li><p>Declaring an array of a class, like:</p>\n<pre><code>abc a_array[10];\n</code></pre></li>\n<li><p>When you have a inherited class which does not call one of base class constructors</p></li>\n<li>When you have a feature in your class from another class and you don't call a definite constructor of that feature's class.</li>\n<li><p>When you use some containers of standard library such as vector, for example:</p>\n<pre><code>vector &lt;abc&gt; abc_list;\n</code></pre></li>\n</ul>\n<p>In these situations you have to have a default constructor, otherwise if you do not have any constructor, the compiler will make an implicit default constructor with no operation, and if you have some constructors the compiler will show you a compile error.\nIf you want to do one of the above things, use a default constructor to make sure every object is being instantiated correctly.  </p>\n", "OwnerUserId": "374752", "LastEditorUserId": "374752", "LastEditDate": "2011-10-02T12:38:36.963", "Id": "7626325", "Score": "-1", "CreationDate": "2011-10-02T12:33:11.253", "LastActivityDate": "2011-10-02T12:38:36.963"}, "7626277": {"CommentCount": "13", "CreationDate": "2011-10-02T12:24:48.040", "LastEditorUserId": "-1", "LastActivityDate": "2011-10-02T12:45:28.857", "ParentId": "7626237", "LastEditDate": "2017-05-23T11:53:10.763", "LastEditorDisplayName": "user586399", "PostTypeId": "2", "Id": "7626277", "Score": "1", "Body": "<ul>\n<li>Constructor is a special function, without return type. Its name <strong>must</strong> be as the class\\struct name. It doesn't have an actual name as a function, as <a href=\"https://stackoverflow.com/users/596781/kerrek-sb\">Kerrek-SB</a> pointed out.</li>\n<li>Default constructor is the one that has no parameters, or has parameters all with a default value.</li>\n<li>Constructor function is being called <strong>only once</strong> - when an object is instantiated</li>\n<li>Constructor is called through a <code>new</code> expression or an initialization expression. It cannot be called \"manually\".</li>\n<li>Useful for initializing object's fields, usually with a <code>member initializer list</code>.</li>\n</ul>\n<p>Check <a href=\"http://www.fredosaurus.com/notes-cpp/oop-condestructors/constructors.html\" rel=\"nofollow noreferrer\">this.</a></p>\n", "OwnerDisplayName": "user586399"}, "7626280": {"ParentId": "7626237", "CommentCount": "2", "Body": "<p>If you don't need to do anything as your class is instantiated. Use the default constructor, any situation else you will have to use your own constructor as the default constructor basically does nothing.\nYou also don't need to write any \"default\" constructor.</p>\n<pre><code>class abc {\n};\n\nint main() {\nabc a;  //don't want to do anything on instatiation\nsystem(\"pause\");\nreturn 0;\n}\n</code></pre>\n<hr>\n<pre><code>class abc {\nprivate:\nint a;\npublic:\nabc(int x) { a = x };\n}\n\n\nint main() {\nabc a(1); //setting x to 1 on instantiation\nsystem(\"pause\");\nreturn 0;\n}\n</code></pre>\n</hr>", "OwnerUserId": "919434", "PostTypeId": "2", "Id": "7626280", "Score": "1", "CreationDate": "2011-10-02T12:24:56.297", "LastActivityDate": "2011-10-02T12:24:56.297"}});