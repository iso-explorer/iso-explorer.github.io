post_cb({"bq_ids": {"n4140": {"so_7405839_7405874_3": {"length": 15, "quality": 1.0, "section_id": 438}, "so_7405839_7405874_1": {"length": 28, "quality": 0.875, "section_id": 438}, "so_7405839_7405874_2": {"length": 13, "quality": 1.0, "section_id": 438}, "so_7405839_7405897_0": {"length": 17, "quality": 0.5666666666666667, "section_id": 438}}, "n3337": {"so_7405839_7405874_3": {"length": 15, "quality": 1.0, "section_id": 429}, "so_7405839_7405874_1": {"length": 28, "quality": 0.875, "section_id": 429}, "so_7405839_7405874_2": {"length": 13, "quality": 1.0, "section_id": 429}, "so_7405839_7405897_0": {"length": 17, "quality": 0.5666666666666667, "section_id": 429}}, "n4659": {"so_7405839_7405874_3": {"length": 15, "quality": 1.0, "section_id": 458}, "so_7405839_7405874_1": {"length": 28, "quality": 0.875, "section_id": 458}, "so_7405839_7405874_2": {"length": 13, "quality": 1.0, "section_id": 458}, "so_7405839_7405897_0": {"length": 16, "quality": 0.5333333333333333, "section_id": 458}}}, "7405897": {"Id": "7405897", "PostTypeId": "2", "Body": "<p>This is answered in: <a href=\"http://www.parashift.com/c++-faq-lite/multiple-inheritance.html#faq-25.14\" rel=\"nofollow\">http://www.parashift.com/c++-faq-lite/multiple-inheritance.html#faq-25.14</a></p>\n<blockquote>\n<p id=\"so_7405839_7405897_0\">The very first constructors to be executed are the virtual base classes anywhere in the hierarchy. They are executed in the order they appear in a depth-first left-to-right traversal of the graph of base classes, where left to right refer to the order of appearance of base class names.</p>\n</blockquote>\n<p>Since your multiple inheritance declaration lists <code>DerivedBaseTwo</code> first, its construction order will be executed before <code>DerivedBaseOne</code>'s.</p>\n<p>So in your <code>Derived</code> class, <code>DerivedBaseTwo</code> and its chain is created first, that is:</p>\n<p>1 - <code>Base</code> then <code>DerivedBaseTwo</code></p>\n<p>And then <code>DerivedBaseOne</code> and its chain:</p>\n<p>2 - <code>Base</code> then <code>DerivedBaseOne</code></p>\n<p>And then:</p>\n<p>3 - <code>Derived</code> is created after everything else.</p>\n<p>Also, with multiple inheritance be mindful of the <a href=\"http://en.wikipedia.org/wiki/Diamond_problem\" rel=\"nofollow\">Diamond Inheritance Problem</a></p>\n", "LastEditorUserId": "297696", "LastActivityDate": "2011-09-13T17:36:03.157", "Score": "3", "CreationDate": "2011-09-13T17:21:57.827", "ParentId": "7405839", "CommentCount": "2", "OwnerUserId": "297696", "LastEditDate": "2011-09-13T17:36:03.157"}, "7405839": {"ViewCount": "9581", "Body": "<p>Are multiple-inherited constructors called multiple times? And in what order are constructors called? Does this depend on the order in the inheritance list?</p>\n<p>Here is an example (it's only for making the situation clear, no real-life example).</p>\n<pre><code>class Base {};\nclass DerivedBaseOne : public Base {};\nclass DerivedBaseTwo : public Base {};\nclass Derived : public DerivedBaseTwo, public DerivedBaseOne \n{};\n\n//somewhere in the code, is Base() called two times here?\nDerived * foo = new Derived();\n</code></pre>\n<p>Is the Base() constructor called twice? And in what order are the constructors called? Base first? Or DerivedBaseOne() or DerivedBaseTwo() first?</p>\n<p>Thanks.</p>\n", "AcceptedAnswerId": "7405898", "Title": "C++, are multiple-inherited constructors called multiple times?", "CreationDate": "2011-09-13T17:17:46.423", "Id": "7405839", "CommentCount": "6", "FavoriteCount": "3", "PostTypeId": "1", "LastEditDate": "2013-06-27T20:19:36.920", "LastEditorUserId": "963864", "LastActivityDate": "2015-04-01T17:02:38.203", "Score": "18", "OwnerUserId": "667146", "Tags": "<c++><inheritance><constructor><order><multiple-inheritance>", "AnswerCount": "3"}, "7405898": {"Id": "7405898", "PostTypeId": "2", "Body": "<p>The way you write it, <code>Derived</code> has <strong>two</strong> distinct subobjects of type <code>Base</code>, and each gets their own constructor called from the respective <code>DerivedBaseXXX</code> constructor of which it is the subobject. The order of calls follows the order of declaration.</p>\n<p>By contrast, of you declare <code>DerivedBaseXXX : virtual public Base</code>, then there is only <strong>one</strong> <code>Base</code> subobject, and its constructor is called from the most derived object, i.e. from the <code>Derived</code> object.</p>\n<p>(To explain in a bit more detail: A (possibly singly-inheriting) class is constructed by first 1) calling the base class's constructor, then 2) calling the constructors of all member objects in their order of declaration, and finally 3) executing the constructor function body. This applies recursively, and for multiple inheritance, you just replace (1) by calling all the base class's constructors in the order in which the inheritance was declared. Only virtual inheritance adds a genuine extra layer of complication here.)</p>\n", "LastEditorUserId": "596781", "LastActivityDate": "2011-09-13T17:35:56.057", "Score": "13", "CreationDate": "2011-09-13T17:21:58.193", "ParentId": "7405839", "CommentCount": "0", "OwnerUserId": "596781", "LastEditDate": "2011-09-13T17:35:56.057"}, "7405874": {"Id": "7405874", "PostTypeId": "2", "Body": "<p>The order of constructor calls for your inheritance hierarchy will be:</p>\n<pre><code>Base()  \nDerivedBaseTwo()  \nBase()\nDerivedBaseOne()  \nDerived()\n</code></pre>\n<p>The order is indeed well-defined and depends on the order in which you mention the derivation for base classes and the order in which you declare members in the class for members.  (See the reference from the C++ Standard below.)   </p>\n<p><strong>Does the Base() constructor get called twice?</strong><br>\n<strong>YES</strong></br></p>\n<p>The <code>Base()</code> class constructor gets called here twice, because two classes <code>DerivedBaseTwo()</code> and <code>DerivedBaseOne()</code> derive from it, so the base class constructor gets called once for each of them.  Your <code>Derived</code> class has two distinct <code>Base</code> subobjects through multiple paths (one through <code>DerivedBaseOne()</code> and the other though <code>DerivedBaseTwo()</code>).</p>\n<p>The hierarchy of classes you have with multiple inheritance is unusual and it leads to a problem called the <strong><a href=\"http://en.wikipedia.org/wiki/Diamond_problem\" rel=\"noreferrer\">Diamond Shaped Inheritance Problem</a></strong>.  To avoid this problem C++ introduces the concept of <strong><a href=\"http://publib.boulder.ibm.com/infocenter/comphelp/v8v101/index.jsp?topic=/com.ibm.xlcpp8a.doc/language/ref/cplr135.htm\" rel=\"noreferrer\">Virtual base class</a></strong>.</p>\n<hr>\n<p>Reference:   </p>\n<p><strong>C++03 Standard:  12.6.2/5, Initializing bases and members</strong> </p>\n<blockquote>\n<p id=\"so_7405839_7405874_0\">Initialization shall proceed in the following order:</p>\n<p id=\"so_7405839_7405874_1\">\u2014 First, and only for the constructor of the most derived class as described below, virtual base classes shall be initialized in the order they appear on a depth-first left-to-right traversal of the directed acyclic graph of base classes, where \u201cleft-to-right\u201d is the order of appearance of the base class names in the derived class base-specifier-list.</p>\n<p id=\"so_7405839_7405874_2\">\u2014 Then, direct base classes shall be initialized in declaration order as they appear in the base-specifier-list (regardless of the order of the mem-initializers).</p>\n<p id=\"so_7405839_7405874_3\">\u2014 Then, nonstatic data members shall be initialized in the order they were declared in the class definition (again regardless of the order of the mem-initializers).</p>\n<p id=\"so_7405839_7405874_4\">\u2014 Finally, the body of the constructor is executed.</p>\n</blockquote>\n</hr>", "LastEditorUserId": "731240", "LastActivityDate": "2015-04-01T17:02:38.203", "Score": "17", "CreationDate": "2011-09-13T17:20:16.073", "ParentId": "7405839", "CommentCount": "10", "OwnerUserId": "452307", "LastEditDate": "2015-04-01T17:02:38.203"}});