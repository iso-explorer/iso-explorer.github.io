post_cb({"33323932": {"CommentCount": "5", "ViewCount": "90", "CreationDate": "2015-10-24T22:14:19.283", "LastActivityDate": "2015-10-24T22:24:21.097", "Title": "Status of statement (void)f() in C++14, is it ill-formed? if not, is the f() part discard-value?", "AcceptedAnswerId": "33324009", "PostTypeId": "1", "Id": "33323932", "Score": "3", "Body": "<p>Is the following program ill-formed according to the C++14 standard?</p>\n<pre><code>int f() { return 42; }\n\nint main() {\n  (void)f();\n}\n</code></pre>\n<p>If not, is the sole function call expression contained within a discard-value expression?  (note that is the subexpression, not the whole expression statement)</p>\n", "Tags": "<c++><c++14>", "OwnerUserId": "1131467", "AnswerCount": "1"}, "33324009": {"ParentId": "33323932", "CommentCount": "1", "Body": "<blockquote>\n<p id=\"so_33323932_33324009_0\">Is the following program ill-formed according to the C++14 standard?</p>\n</blockquote>\n<p>No. If you have some specific reason for thinking this might be invalid, you might be able to get a more detailed answer, but quoting each and every sentence of the standard in an attempt to point out that that sentence doesn't render the program invalid is not productive.</p>\n<blockquote>\n<p id=\"so_33323932_33324009_1\">If not, is the sole function call expression contained within a discard-value expression?</p>\n</blockquote>\n<p>The sole function call expression <em>is</em> the discarded-value expression.</p>\n<blockquote>\n<p id=\"so_33323932_33324009_2\"><strong>5.2.9 Static cast [expr.static.cast]</strong></p>\n<p id=\"so_33323932_33324009_3\">6 Any expression can be explicitly converted to type <em>cv</em> <code>void</code>, in which case it becomes a discarded-value expression (Clause 5). [...]</p>\n</blockquote>\n<p>I am assuming you are already aware that a C-style cast performs a <code>static_cast</code> if possible.</p>\n", "OwnerUserId": "743382", "PostTypeId": "2", "Id": "33324009", "Score": "8", "CreationDate": "2015-10-24T22:24:21.097", "LastActivityDate": "2015-10-24T22:24:21.097"}, "bq_ids": {"n4140": {"so_33323932_33324009_3": {"section_id": 6032, "quality": 0.9166666666666666, "length": 11}}, "n3337": {"so_33323932_33324009_3": {"section_id": 5800, "quality": 0.9166666666666666, "length": 11}}, "n4659": {"so_33323932_33324009_3": {"section_id": 7531, "quality": 0.8333333333333334, "length": 10}}}});