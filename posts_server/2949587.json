post_cb({"2949587": {"CommentCount": "0", "CreationDate": "2010-06-01T12:07:26.383", "PostTypeId": "1", "AcceptedAnswerId": "2949655", "LastEditorUserId": "4370109", "LastActivityDate": "2016-02-24T19:51:57.307", "LastEditDate": "2016-02-24T19:51:57.307", "ViewCount": "795", "FavoriteCount": "2", "Title": "Why are argument substitutions not replaced during rescanning?", "Id": "2949587", "Score": "12", "Body": "<p>Consider the following macro definitions and invocation:</p>\n<pre><code>#define x x[0]\n#define y(arg) arg\n\ny(x)\n</code></pre>\n<p>This invocation expands to <code>x[0]</code> (tested on Visual C++ 2010, g++ 4.1, mcpp 2.7.2, and Wave).</p>\n<p><strong>Why?</strong>  Specifically, why does it not expand to <code>x[0][0]</code>?</p>\n<p>During macro replacement,</p>\n<blockquote>\n<p id=\"so_2949587_2949587_0\">A parameter in the replacement list...is replaced by the corresponding argument after all macros contained therein have been expanded.  Before being substituted, each argument\u2019s preprocessing tokens are completely macro replaced (C++03 \u00a716.3.1/1).</p>\n</blockquote>\n<p>Evaluating the macro invocation, we take the following steps:</p>\n<ul>\n<li>The function-like macro <code>y</code> is invoked with <code>x</code> as the argument for its <code>arg</code> parameter</li>\n<li>The <code>x</code> in the argument is macro-replaced to become <code>x[0]</code></li>\n<li>The <code>arg</code> in the replacement list is replaced by the macro-replaced value of the argument, <code>x[0]</code></li>\n</ul>\n<p>The replacement list after substitution of all the parameters is <code>x[0]</code>.</p>\n<blockquote>\n<p id=\"so_2949587_2949587_1\">After all parameters in the replacement list have been substituted, the resulting preprocessing token sequence is rescanned...for more macro names to replace (C++03 \u00a716.3.4/1).</p>\n<p id=\"so_2949587_2949587_2\">If the name of the macro being replaced is found during this scan of the replacement list...it is not replaced.  Further, if any nested replacements encounter the name of the macro being replaced, it is not replaced (C++03 \u00a716.3.4/2).</p>\n</blockquote>\n<p>The replacement list <code>x[0]</code> is rescanned (note that <em>the name of the macro being replaced</em> is <code>y</code>):</p>\n<ul>\n<li><code>x</code> is identified as an object-like macro invocation</li>\n<li><code>x</code> is replaced by <code>x[0]</code></li>\n</ul>\n<p>Replacement stops at this point because of the rule in \u00a716.3.4/2 preventing recursion.  The replacement list after rescanning is <code>x[0][0]</code>.</p>\n<p>I have clearly misinterpreted something since all of the preprocessors I've tested say I am wrong.  In addition, this example is a piece of a larger example in the C++0x FCD (at \u00a716.3.5/5) and it too says that the expected replacement is <code>x[0]</code>.</p>\n<p>Why is <code>x</code> not replaced during rescanning?</p>\n<p><em>C99 and C++0x effectively have the same wording as C++03 in the quoted sections.</em></p>\n", "Tags": "<c++><c-preprocessor>", "OwnerUserId": "151292", "AnswerCount": "1"}, "2949655": {"ParentId": "2949587", "LastEditDate": "2010-06-01T12:26:47.663", "CommentCount": "1", "CreationDate": "2010-06-01T12:19:30.367", "OwnerUserId": "13005", "LastEditorUserId": "13005", "PostTypeId": "2", "Id": "2949655", "Score": "17", "Body": "<p>I believe you've quoted the crucial paragraph, you just stopped too soon. 16.3.4/2 (emphasis mine):</p>\n<blockquote>\n<p id=\"so_2949587_2949655_0\">If the name of the macro being replaced is found during this scan of\n  the replacement list (not including\n  the rest of the source file\u2019s\n  preprocessing tokens), it is not\n  replaced. Further, if any nested\n  replacements encounter\n  the name of the macro being replaced,\n  it is not replaced. <strong>These nonreplaced\n  macro name preprocessing tokens are no\n  longer available for further\n  replacement</strong> even if they are later\n  (re)examined in contexts in which that\n  macro name preprocessing token would\n  otherwise have been replaced.</p>\n</blockquote>\n<p>So, when <code>x</code> is replaced with <code>x[0]</code> during the parameter substitution of <code>y</code>, it is fully macro replaced, meaning that it is rescanned at that point, and <code>x</code> is caught by the recursion rule. This means that the <code>x</code> in <code>x[0]</code> is no longer eligible for further replacement, including during the rescanning of the partly-expanded result of <code>y(x)</code>.</p>\n", "LastActivityDate": "2010-06-01T12:26:47.663"}, "bq_ids": {"n4140": {"so_2949587_2949655_0": {"section_id": 531, "quality": 0.9591836734693877, "length": 47}, "so_2949587_2949587_0": {"section_id": 523, "quality": 0.8846153846153846, "length": 23}, "so_2949587_2949587_1": {"section_id": 530, "quality": 0.8421052631578947, "length": 16}, "so_2949587_2949587_2": {"section_id": 531, "quality": 0.8095238095238095, "length": 17}}, "n3337": {"so_2949587_2949655_0": {"section_id": 522, "quality": 0.9591836734693877, "length": 47}, "so_2949587_2949587_0": {"section_id": 514, "quality": 0.8846153846153846, "length": 23}, "so_2949587_2949587_1": {"section_id": 521, "quality": 0.8421052631578947, "length": 16}, "so_2949587_2949587_2": {"section_id": 522, "quality": 0.8095238095238095, "length": 17}}, "n4659": {"so_2949587_2949655_0": {"section_id": 552, "quality": 0.9591836734693877, "length": 47}, "so_2949587_2949587_1": {"section_id": 551, "quality": 0.8421052631578947, "length": 16}, "so_2949587_2949587_0": {"section_id": 544, "quality": 0.8846153846153846, "length": 23}, "so_2949587_2949587_2": {"section_id": 552, "quality": 0.8095238095238095, "length": 17}}}});