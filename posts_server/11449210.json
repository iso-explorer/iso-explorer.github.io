post_cb({"11449210": {"CommentCount": "9", "AcceptedAnswerId": "11451408", "PostTypeId": "1", "LastEditorUserId": "147192", "CreationDate": "2012-07-12T09:47:58.627", "LastActivityDate": "2012-07-12T12:02:33.760", "LastEditDate": "2012-07-12T11:57:19.597", "ViewCount": "1541", "FavoriteCount": "1", "Title": "c++11 Uniform initialization does not work with clang++", "Id": "11449210", "Score": "4", "Body": "<p>I copied the following example from <a href=\"http://en.wikipedia.org/wiki/C++11#Uniform_initialization\" rel=\"nofollow\">this wikipedia page</a>:</p>\n<pre><code>struct BasicStruct {\n    int x;\n    double y;\n};\n\nstruct AltStruct {\n    AltStruct(int x, double y) : x_{x}, y_{y} {}\n\nprivate:\n    int x_;\n    double y_;\n};\n\nBasicStruct var1{5, 3.2};\nAltStruct var2{2, 4.3};\n\nint main (int argc, char const *argv[])\n{\n    return 0;\n}\n</code></pre>\n<p>I then tried to compile it with </p>\n<pre><code>clang++ -Wall -std=c++11 test.cpp \n</code></pre>\n<p>but I get this error:</p>\n<pre><code>test.cpp:17:11: error: non-aggregate type 'AltStruct' cannot be initialized with\n      an initializer list\nAltStruct var2{2, 4.3};\n          ^   ~~~~~~~~\n1 error generated.\n</code></pre>\n<p>My clang version <code>clang++ --version</code> is</p>\n<pre><code>Apple clang version 3.1 (tags/Apple/clang-318.0.61) (based on LLVM 3.1svn)\nTarget: x86_64-apple-darwin11.4.0\nThread model: posix\n</code></pre>\n<p>Shouldn't this example work? Maybe clang just isn't fully c++11 compatible yet?</p>\n<p>What's going on?</p>\n", "Tags": "<c++><c++11><clang>", "OwnerUserId": "1281122", "AnswerCount": "2"}, "11451408": {"ParentId": "11449210", "CommentCount": "2", "Body": "<p>The hint is actually here:</p>\n<pre><code>Apple clang version 3.1 (tags/Apple/clang-318.0.61) (based on LLVM 3.1svn)\n                                                                   ^~~~~~\n</code></pre>\n<p>This means that it is not the 3.1 version proper, but somewhere between 3.0 and 3.1.</p>\n<p>The support for uniform initialization was implemented somewhere between those two versions so the version that Apple has probably has either absolutely no support or just partial support.</p>\n", "OwnerUserId": "147192", "PostTypeId": "2", "Id": "11451408", "Score": "7", "CreationDate": "2012-07-12T12:02:33.760", "LastActivityDate": "2012-07-12T12:02:33.760"}, "bq_ids": {"n4140": {"so_11449210_11449654_1": {"section_id": 3325, "quality": 1.0, "length": 6}}, "n3337": {"so_11449210_11449654_1": {"section_id": 3195, "quality": 1.0, "length": 6}}, "n4659": {"so_11449210_11449654_1": {"section_id": 4091, "quality": 1.0, "length": 6}}}, "11449654": {"ParentId": "11449210", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_11449210_11449654_0\">error: non-aggregate type 'AltStruct' cannot be initialized with an initializer list</p>\n</blockquote>\n<p>That's definitely wrong, see 8.5.4 List-initialization [dcl.init.list] \u00a73:</p>\n<blockquote>\n<p id=\"so_11449210_11449654_1\">List-initialization of an object or reference of type T is defined as follows:</p>\n<ul>\n<li>If T is an aggregate, aggregate initialization is performed</li>\n<li>[...]</li>\n<li>Otherwise, <strong>if T is a class type, constructors are considered</strong></li>\n</ul>\n</blockquote>\n<p>And since <code>AltStruct</code> has a constructor taking <code>int</code> and <code>double</code>, <code>AltStruct var2{2, 4.3};</code> should compile and have the same semantics as <code>AltStruct var2(2, 4.3);</code> (direct initialization).</p>\n", "OwnerUserId": "252000", "PostTypeId": "2", "Id": "11449654", "Score": "0", "CreationDate": "2012-07-12T10:12:41.817", "LastActivityDate": "2012-07-12T10:12:41.817"}});