post_cb({"32274802": {"CommentCount": "2", "ViewCount": "46", "PostTypeId": "1", "LastEditorUserId": "2069064", "CreationDate": "2015-08-28T15:37:45.250", "LastActivityDate": "2015-08-28T23:58:05.630", "Title": "Function matching in vector constructors", "AcceptedAnswerId": "32274900", "LastEditDate": "2015-08-28T15:43:11.893", "Id": "32274802", "Score": "1", "Body": "<pre><code>#include &lt;string&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nclass HasPtrValue {\npublic:\n    HasPtrValue(const HasPtrValue&amp; h): ps(new std::string(*h.ps)) { std::cout &lt;&lt; \"copy\" &lt;&lt; std::endl;}\n    HasPtrValue(const std::string &amp;s = std::string()): ps(new std::string(s)) { std::cout &lt;&lt; \"string/default\" &lt;&lt; std::endl;}\n    ~HasPtrValue() { delete ps; }\nprivate:\n    std::string *ps;\n};\n\nusing namespace std;\n\nint main(){\n    string s = \"stackoverflow\";\n    vector&lt;HasPtrValue&gt; a(5, s);\n}\n</code></pre>\n<p>The above code compiles fine outputting:</p>\n<pre><code>string/default\ncopy\ncopy\ncopy\ncopy\ncopy\n</code></pre>\n<p>This suggests to me the vector first directly initialises a temporary HasPtrValue object using the string object (doing HasPtrValue(s))and then copy-constructs the 5 elements from this temporary. How come, then, the following code does not compile:</p>\n<pre><code>int main(){\n    vector&lt;HasPtrValue&gt; a(5, \"stackoverflow\");\n}\n</code></pre>\n<p>If it was directly initialising the HasPtrValue (doing HasPtrValue(\"stackoverflow\")) then there would be no issue in the const string&amp; constructor taking up the role of creating the temporary. I get the error;</p>\n<pre><code> error: no matching function for call to 'std::vector&lt;HasPtrValue&gt;::vector(int, const char [14])'|\n</code></pre>\n<p>I thought I'd try it with a simpler class that uses an int constructor and converts from a double:</p>\n<pre><code>class A{\npublic:\n    A(const int&amp; a): x(a) { }\n    int x = 2;\n};\n\nint main(){\n    vector&lt;A&gt; a(5, 5.5);\n\n}\n</code></pre>\n<p>Except this compiles fine. What part of the vector implementation prevents using a const char* conversion in the constructor?        </p>\n", "Tags": "<c++><vector><constructor>", "OwnerUserId": "3348786", "AnswerCount": "2"}, "32274987": {"ParentId": "32274802", "CommentCount": "0", "Body": "<pre><code>int main(){\n    vector&lt;HasPtrValue&gt; a(5, string(\"stackoverflow\"));\n}\n</code></pre>\n<p>Your constructor requires <code>std::string</code> and \"stackoverflow\" is <code>char</code> array.\nAlternatively you can define additional constructor accepting <code>char[]</code>.</p>\n", "OwnerUserId": "1894478", "PostTypeId": "2", "Id": "32274987", "Score": "0", "CreationDate": "2015-08-28T15:47:58.610", "LastActivityDate": "2015-08-28T15:47:58.610"}, "bq_ids": {"n4140": {"so_32274802_32274900_0": {"section_id": 620, "quality": 0.9333333333333333, "length": 14}}, "n3337": {"so_32274802_32274900_0": {"section_id": 610, "quality": 0.9333333333333333, "length": 14}}, "n4659": {"so_32274802_32274900_0": {"section_id": 646, "quality": 0.9333333333333333, "length": 14}}}, "32274900": {"ParentId": "32274802", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>Because it needs two user defined conversions, <code>const char*</code> -&gt; <code>std::string</code>, and then <code>std::string</code> -&gt; <code>HasPtrValue</code>, but only once user defined implicit conversion is permitted in an implicit conversion sequence.</p>\n<p>13.3.3.1.2$1 User-defined conversion sequences [over.ics.user]</p>\n<blockquote>\n<p id=\"so_32274802_32274900_0\">A user-defined conversion sequence consists of an initial standard\n  conversion sequence followed by a userdefined conversion (12.3)\n  followed by a second standard conversion sequence.</p>\n</blockquote>\n<p>Note here only one level of user defined implicit conversion is legal. For your case this must be handled by explicit conversions; So you can:</p>\n<pre><code>vector&lt;HasPtrValue&gt; a(5, std::string(\"stackoverflow\"));\n</code></pre>\n", "OwnerUserId": "3309790", "LastEditorUserId": "3309790", "LastEditDate": "2015-08-28T23:58:05.630", "Id": "32274900", "Score": "3", "CreationDate": "2015-08-28T15:43:31.043", "LastActivityDate": "2015-08-28T23:58:05.630"}});