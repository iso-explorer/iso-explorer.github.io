post_cb({"bq_ids": {"n4140": {"so_10446907_10446961_1": {"length": 8, "quality": 1.0, "section_id": 6077}, "so_10446907_10446961_0": {"length": 9, "quality": 1.0, "section_id": 6077}}, "n3337": {"so_10446907_10446961_1": {"length": 8, "quality": 1.0, "section_id": 5845}, "so_10446907_10446961_0": {"length": 9, "quality": 1.0, "section_id": 5845}}, "n4659": {"so_10446907_10446961_1": {"length": 8, "quality": 1.0, "section_id": 7573}, "so_10446907_10446961_0": {"length": 9, "quality": 1.0, "section_id": 7573}}}, "10446961": {"Id": "10446961", "PostTypeId": "2", "Body": "<p>The standard is pretty clear on <code>sizeof</code> (C++11, 5.3.3/4):</p>\n<blockquote>\n<p id=\"so_10446907_10446961_0\">When applied to a reference or a reference type, the result is the\n  size of the referenced type.</p>\n</blockquote>\n<p>So if you really are taking <code>sizeof(double&amp;)</code>, the compiler is telling you that <code>sizeof(double)</code> is 4.</p>\n<p><strong>Update:</strong> So, what you really are doing is applying <code>sizeof</code> to a class type. In that case,</p>\n<blockquote>\n<p id=\"so_10446907_10446961_1\">When applied to a class, the result is the number of bytes in an\n  object of that class [...]</p>\n</blockquote>\n<p>So we know that the presence of the reference inside <code>A</code> causes it to take up 4 bytes. That's because even though the standard does not mandate how references are to be implemented, the compiler still has to implement them somehow. This somehow might be very different depending on the context, but for a reference member of a class type the only approach that makes sense is sneaking in a <code>double*</code> behind your back and calling it a <code>double&amp;</code> in your face.</p>\n<p>So if your architecture is 32-bit (in which pointers are 4 bytes long) that would explain the result.</p>\n<p>Just keep in mind that <em>the concept</em> of a reference is not tied to any specific implementation. The standard allows the compiler to implement references however it wants.</p>\n", "LastEditorUserId": "50079", "LastActivityDate": "2012-05-04T10:45:21.743", "Score": "28", "CreationDate": "2012-05-04T10:21:59.927", "ParentId": "10446907", "CommentCount": "0", "OwnerUserId": "50079", "LastEditDate": "2012-05-04T10:45:21.743"}, "10446907": {"ViewCount": "8164", "Body": "<p>On a 32-bit machine  I always get the <code>sizeof</code> of a reference 4 bytes even if it's a reference to a double, so what does it really store in this 4 bytes. </p>\n<p><b> EDIT :</b></p>\n<pre><code>class A{\npublic:\n  double&amp;  a;\n};\n\nint main(){\n  cout &lt;&lt; sizeof(A) &lt;&lt; endl; // this will print out 4\n}\n</code></pre>\n", "AcceptedAnswerId": "10446961", "Title": "why reference size is always 4 bytes - c++", "CreationDate": "2012-05-04T10:18:14.477", "Id": "10446907", "CommentCount": "5", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2012-05-04T10:57:03.097", "LastEditorUserId": "267885", "LastActivityDate": "2012-05-04T10:57:03.097", "Score": "8", "OwnerUserId": "869277", "Tags": "<c++><reference>", "AnswerCount": "2"}, "10446973": {"Id": "10446973", "PostTypeId": "2", "Body": "<p>You can't, and it isn't.</p>\n<p>A C++ reference is <em>not</em> a pointer. It is an alias of an object. <em>Sometimes</em>, the compiler chooses to implement this by using a pointer. But often, it implements it by <em>doing nothing at all</em>. By simply generate code which refers directly to the original object.</p>\n<p>In any case, <code>sizeof</code> applied to a reference type <em>does not give you the size of a reference</em>. So it's not really clear what you're doing, making it impossible to explain what is happening.</p>\n<p><strong>Edit</strong> </p>\n<p>Now that you've shown some code, we can answer the question:</p>\n<p>You are taking the size of a class containing a reference. As I said above, a reference is not a pointer, but when necessary, the compiler may fall back to using a pointer to represent it. When you create a class containing a reference, the only (sane) way the compiler can implement it is by defining a class which holds the address of an object. On 32-bit systems, addresses are 32 bits, or 4 bytes, wide. So <code>sizeof</code> such a class will (typically) be 4.</p>\n", "LastEditorUserId": "33213", "LastActivityDate": "2012-05-04T10:36:58.803", "Score": "20", "CreationDate": "2012-05-04T10:22:49.087", "ParentId": "10446907", "CommentCount": "5", "OwnerUserId": "33213", "LastEditDate": "2012-05-04T10:36:58.803"}});