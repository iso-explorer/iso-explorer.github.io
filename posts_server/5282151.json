post_cb({"11872610": {"ParentId": "5282151", "CommentCount": "0", "Body": "<p>As per me <strong>global main function(main function outside all classes) cannot in overloaded in c++,</strong> But if you write main function inside a class then it will compile fine however it will not be treated as program entry point\nfor example the following code will not compile file name mainoverloaderror.cpp</p>\n<pre><code>#include&lt;iostream&gt;\nusing namespace std;\nint main(int noofarg,char *values[])\n{\n    std::cout&lt;&lt;\"hello \"&lt;&lt;endl&lt;&lt;values[0]&lt;&lt;endl&lt;&lt;values[1]&lt;&lt;endl&lt;&lt;noofarg;\n    return 0;\n}\nint main()\n{\n std::cout&lt;&lt;\"hello main()\";\n    return 0;\n}\n</code></pre>\n<p>compilation error :\nmainoverloaderror.cpp: In function \u2018int main()\u2019:\nmainoverloaderror.cpp:13: error: declaration of C function \u2018int main()\u2019 conflicts with\nmainoverloaderror.cpp:7: error: previous declaration \u2018int main(int, char**)\u2019 here</p>\n<p>Look at this code main function inside a class. Although it will not have multiple entry point but will compile fine:</p>\n<pre><code>#include&lt;iostream&gt;\n\nusing namespace std;\n\nclass MainClass{\n\n        int main1()\n    {\n\n        std::cout&lt;&lt;\"hello main()\"&lt;&lt;endl;\n        return 0;\n    }\n    int main(int noofarg,char *values[])\n    {\n\n        std::cout&lt;&lt;\"hello \"&lt;&lt;endl&lt;&lt;values[0]&lt;&lt;endl&lt;&lt;values[1]&lt;&lt;endl&lt;&lt;noofarg;\n        return 0;\n    }\n    int main()\n    {\n\n     std::cout&lt;&lt;\"hello main()\";\n        return 0;\n\n    }\n};\n\nint main()\n{\n\n std::cout&lt;&lt;\"hello main()\";\n    return 0;\n\n}\n</code></pre>\n<p><strong>so to conclude</strong>: in c++ global main cannot be overloaded it will generate compile time error, in is because you cannot have multiple entry point for the same program as said above.</p>\n", "OwnerUserId": "1585829", "PostTypeId": "2", "Id": "11872610", "Score": "0", "CreationDate": "2012-08-08T20:26:47.700", "LastActivityDate": "2012-08-08T20:26:47.700"}, "5282153": {"ParentId": "5282151", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>Yes it explicitly forbids that. Refer to 3.6.1p2</p>\n<blockquote>\n<p id=\"so_5282151_5282153_0\">An implementation shall not predefine the main function. This function shall not be overloaded. </p>\n</blockquote>\n<hr>\n<p>This way, the main function's name can stay unmangled. That is, the runtime library can call a symbol having a fixed name (e.g <code>main</code> or <code>_main</code>) to jump to the main function. The libraries' code will not need to depend on what parameter list the program's <code>main</code> function has. </p>\n<p>The implementation is also allowed to define additional valid parameter lists for the <code>main</code> function (The POSIX spec specifies a <code>char **env</code> parameter for the environment variables, for example). It would not be clear when an overload of <code>main</code> is a \"non-main function\" or whether it's a \"main function\", thus an entry point. Presumably, you would want to get an error if you would declare more than one entry point, so such issues are important. </p>\n</hr>", "OwnerUserId": "34509", "LastEditorUserId": "34509", "LastEditDate": "2011-03-12T11:30:32.497", "Id": "5282153", "Score": "21", "CreationDate": "2011-03-12T11:16:57.897", "LastActivityDate": "2011-03-12T11:30:32.497"}, "5282171": {"ParentId": "5282151", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>What you've done is declare two entry points to the program's execution. This is forbidden by the compiler since when you run the program the program will not know where to begin!</p>\n<p>I also can't see any reason why you would want to do this in your application's design.</p>\n", "OwnerUserId": "407757", "LastEditorUserId": "505088", "LastEditDate": "2011-03-12T11:59:02.800", "Id": "5282171", "Score": "0", "CreationDate": "2011-03-12T11:20:15.660", "LastActivityDate": "2011-03-12T11:59:02.800"}, "bq_ids": {"n4140": {"so_5282151_5282153_0": {"section_id": 7146, "quality": 0.8571428571428571, "length": 6}}, "n3337": {"so_5282151_5282153_0": {"section_id": 6890, "quality": 0.8571428571428571, "length": 6}}, "n4659": {"so_5282151_5282153_0": {"section_id": 8647, "quality": 0.8571428571428571, "length": 6}}}, "5282151": {"CommentCount": "0", "AcceptedAnswerId": "5282153", "ClosedDate": "2017-02-13T07:06:55.500", "CreationDate": "2011-03-12T11:16:18.550", "LastActivityDate": "2014-07-10T04:36:06.030", "PostTypeId": "1", "ViewCount": "6021", "Title": "Can we overload main() function in C++?", "Id": "5282151", "Score": "11", "Body": "<p>Since C+++ allows function overloading, can we overload <code>main()</code>?</p>\n<p>For example,</p>\n<pre><code>int main(const std::string &amp;)\n{\n   return 0;\n}\nint main(int argc, char *argv[])\n{\n  return main(\"calling overloaded main\");\n}\n</code></pre>\n<p><code>gcc-4.3.4</code> doesn't compile this, and gives these errors: (see at <a href=\"http://ideone.com/73cpy\" rel=\"noreferrer\">ideone</a>)</p>\n<blockquote>\n<p id=\"so_5282151_5282151_0\">prog.cpp:4: error: first argument of \u2018int main(const std::string&amp;)\u2019 should be \u2018int\u2019<br>\n  prog.cpp:4: error: \u2018int main(const std::string&amp;)\u2019 takes only zero or two arguments<br>\n  prog.cpp: In function \u2018int main(int, char**)\u2019:<br>\n  prog.cpp:8: error: declaration of C function \u2018int main(int, char**)\u2019 conflicts with<br>\n  prog.cpp:4: error: previous declaration \u2018int main(const std::string&amp;)\u2019 here<br>\n  prog.cpp: In function \u2018int main(int, char**)\u2019:<br>\n  prog.cpp:10: error: invalid conversion from \u2018const char*\u2019 to \u2018int\u2019<br>\n  prog.cpp:8: error: too few arguments to function \u2018int main(int, char**)\u2019<br>\n  prog.cpp:10: error: at this point in file   </br></br></br></br></br></br></br></br></p>\n</blockquote>\n<p>So I'm wondering if the C++ Standard <em>explicitly</em> forbids overloading of <code>main</code>? If so, which statement?</p>\n", "Tags": "<c++><overloading><main><standards>", "OwnerUserId": "415784", "AnswerCount": "3"}});