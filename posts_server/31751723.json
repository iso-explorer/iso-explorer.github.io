post_cb({"bq_ids": {"n4140": {"so_31751723_31763916_0": {"length": 27, "quality": 1.0, "section_id": 6331}, "so_31751723_31763916_1": {"length": 9, "quality": 0.8181818181818182, "section_id": 6305}}, "n3337": {"so_31751723_31763916_0": {"length": 27, "quality": 1.0, "section_id": 6088}, "so_31751723_31763916_1": {"length": 9, "quality": 0.8181818181818182, "section_id": 6062}}, "n4659": {"so_31751723_31763916_1": {"length": 9, "quality": 0.8181818181818182, "section_id": 7816}, "so_31751723_31763916_0": {"length": 27, "quality": 1.0, "section_id": 7841}}}, "31765468": {"Id": "31765468", "PostTypeId": "2", "Body": "<p>It's a bug (or a \"wart\" if you want to be generous).</p>\n<p>All the rest of this answer refers only to GCC and the Gnu standard C library headers. The <code>man</code> page references are to a linux system (but I've added links to <a href=\"http://man7.org/linux/man-pages/\" rel=\"nofollow\">man7.org</a>).</p>\n<p>The <code>DOMAIN</code> macro comes from <code>math.h</code>'s System V support. (See <a href=\"http://man7.org/linux/man-pages/man3/matherr.3.html\" rel=\"nofollow\"><code>man matherr</code></a>.) System V support is normally enabled by defining the <code>_SVID_SOURCE</code> feature-test macro (see <a href=\"http://man7.org/linux/man-pages/man7/feature_test_macros.7.html\" rel=\"nofollow\"><code>man feature_test_macros</code></a>), but it is enabled along with a raft of other extensions if <code>_GNU_SOURCE</code> is defined, or by default if no feature test macros are defined.</p>\n<p><code>gcc</code> predefines <code>_GNU_SOURCE</code> for C programs if the <code>--std</code> option is omitted or set to <code>gnu##</code>. The various <code>--std=c##</code> options cause <code>__STRICT_ANSI__</code> to be defined. Consequently, compiling C code with some explicit C standard will suppress the System V extensions. That needs to be done because the System V extensions are not standards-compatible, not even with Posix, because they pollute the global namespace. (<code>DOMAIN</code> is just one example of this pollution.)</p>\n<p>However, <code>g++</code> defines <code>_GNU_SOURCE</code> even if <code>--std=c++##</code> is specified, and consequently the System V extensions will sneak in. (Thanks to @dyp for the link to this <a href=\"https://gcc.gnu.org/onlinedocs/libstdc++/faq.html#faq.predefined\" rel=\"nofollow\">libstdc++ FAQ entry.</a> and this <a href=\"https://gcc.gnu.org/ml/gcc/2001-06/msg00223.html\" rel=\"nofollow\">long and inconclusive discussion from 2001 on the GCC mailing list</a>)</p>\n<p>An ugly workaround is to set up the features yourself, and then undefine <code>__USE_SVID</code>:</p>\n<pre><code>#include &lt;features.h&gt;\n#undef __USE_SVID\n\n#include &lt;random&gt;\n#include &lt;iostream&gt;\n\nint main(){   \n    std::cout &lt;&lt; DOMAIN &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>\n<p>(<a href=\"http://coliru.stacked-crooked.com/a/a9ffcc3c6cf6cd5f\" rel=\"nofollow\">Live on coliru</a>)</p>\n<p>IMHO, this should not be necessary. But there it is.</p>\n", "LastEditorUserId": "1566221", "LastActivityDate": "2015-08-01T20:14:36.460", "Score": "6", "CreationDate": "2015-08-01T19:37:12.217", "ParentId": "31751723", "CommentCount": "3", "OwnerUserId": "1566221", "LastEditDate": "2015-08-01T20:14:36.460"}, "31751723": {"ViewCount": "469", "Body": "<p>Macro <code>DOMAIN</code> in math.h collides with enums and possibly other types. I don't know what to make of it.</p>\n<pre><code>#include &lt;algorithm&gt;\n\nenum Type { DOMAIN };\n\n\nint main(){\n    Type t = Type::DOMAIN;\n    return 0;\n\n}\n</code></pre>\n<p>Compile with flag -std=c++11. The C99 version of this code compiles perfectly fine though:</p>\n<pre><code>#include &lt;algorithm&gt;\n\nenum Type { DOMAIN };\n\n\nint main(){\n    Type t = DOMAIN;\n    return 0;\n\n}\n</code></pre>\n<p>I checked the source code and the  library is to blame. algorithm includes stl_algo.h, in which there is ifdef:</p>\n<pre><code>#if __cplusplus &gt;= 201103L\n#include &lt;random&gt;     // for std::uniform_int_distribution \n#include &lt;functional&gt; // for std::bind\n#endif\n</code></pre>\n<p>The following code compiles fine on c++11 compiler:</p>\n<pre><code>#include &lt;random&gt;\n#include &lt;iostream&gt;\nint main(){\n    std::cout &lt;&lt; DOMAIN &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>\n<p>Is it a feature or a bug?</p>\n<h1>EDIT* dirty fix:</h1>\n<pre><code>#ifdef DOMAIN\n#undef DOMAIN\n#endif\n</code></pre>\n", "AcceptedAnswerId": "31765468", "Title": "math.h macro collisions", "CreationDate": "2015-07-31T17:17:32.897", "Id": "31751723", "CommentCount": "2", "LastEditDate": "2015-08-01T20:01:35.863", "PostTypeId": "1", "LastEditorUserId": "420683", "LastActivityDate": "2015-08-01T20:14:36.460", "Score": "5", "OwnerUserId": "2941369", "Tags": "<c++><c++11><g++><glibc>", "AnswerCount": "2"}, "31763916": {"Id": "31763916", "PostTypeId": "2", "Body": "<p>\u00a7 17.6.5.2 [res.on.headers] / 1 of N4140 says:</p>\n<blockquote>\n<p id=\"so_31751723_31763916_0\">A C++ header may include other C++ headers.  A C++ header shall provide the declarations and definitions that appear in its synopsis.  A C++ header shown in its synopsis as including other C++ headers shall provide\n  the declarations and definitions that appear in the synopses of those other headers.</p>\n</blockquote>\n<p>Therefore, it is valid for <code>&lt;algorithm&gt;</code> to <code>#include &lt;cmath&gt;</code> which injects the offending macro constant into your namespace.</p>\n<p>Note, however, that your \u201cquick and dirty fix\u201d is disallowed by the standard (\u00a7 17.6.4.3.1 [macro.names] / 1):</p>\n<blockquote>\n<p id=\"so_31751723_31763916_1\">A translation unit that includes a standard library header shall not <code>#define</code> or <code>#undef</code> names declared in any standard library header.</p>\n</blockquote>\n<p>You'll have to choose a name different from <code>DOMAIN</code> for your <code>enum</code> constant.</p>\n", "LastActivityDate": "2015-08-01T16:45:59.600", "CommentCount": "4", "CreationDate": "2015-08-01T16:45:59.600", "ParentId": "31751723", "Score": "0", "OwnerUserId": "1392132"}});