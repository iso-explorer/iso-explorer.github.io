post_cb({"37582629": {"ParentId": "37582510", "CommentCount": "0", "CreationDate": "2016-06-02T04:23:06.297", "Id": "37582629", "PostTypeId": "2", "OwnerDisplayName": "user6169399", "Score": "0", "Body": "<p>it is ok,<br>\nfinally it uses swap(*_Left, *_Right); so it changes the original string s<br>\nsee the source:</br></br></p>\n<pre><code>template&lt;class _BidIt&gt; inline\n    void reverse(_BidIt _First, _BidIt _Last)\n    {   // reverse elements in [_First, _Last)\n    _DEBUG_RANGE(_First, _Last);\n    _Reverse(_Unchecked(_First), _Unchecked(_Last), _Iter_cat(_First));\n    }\ntemplate&lt;class _BidIt&gt; inline\n    void _Reverse(_BidIt _First, _BidIt _Last, bidirectional_iterator_tag)\n    {   // reverse elements in [_First, _Last), bidirectional iterators\n    for (; _First != _Last &amp;&amp; _First != --_Last; ++_First)\n        _STD iter_swap(_First, _Last);\n    }\ntemplate&lt;class _FwdIt1,\n    class _FwdIt2&gt; inline\n    void iter_swap(_FwdIt1 _Left, _FwdIt2 _Right)\n    {   // swap *_Left and *_Right\n    swap(*_Left, *_Right);\n    }\n</code></pre>\n", "LastActivityDate": "2016-06-02T04:23:06.297"}, "37582863": {"ParentId": "37582510", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>In this case, the swapping operations are symmetric, so it doesn't matter whether you go from <code>s.begin()</code> to <code>s.end()</code> or from <code>s.rbegin()</code> to <code>s.rend()</code>.</p>\n<p>To visualize this, first consider what happens when going forwards (from <code>s.begin()</code> to <code>s.end()</code>), using your example of <kbd>abcde</kbd>:</p>\n<ul>\n<li><kbd>a</kbd> is swapped with <kbd>e</kbd>. The string is now <kbd>ebcda</kbd>.</li>\n<li><kbd>b</kbd> is swapped with <kbd>d</kbd>. The string is now <kbd>edcba</kbd>.</li>\n</ul>\n<p>The reversal is now finished (<kbd>c</kbd> is in the middle and doesn't need to move).</p>\n<p>Now consider what happens when going backwards (from <code>s.rbegin()</code> to <code>s.rend()</code>):</p>\n<ul>\n<li><kbd>e</kbd> is swapped with <kbd>a</kbd>. The string is now <kbd>ebcda</kbd>.</li>\n<li><kbd>d</kbd> is swapped with <kbd>b</kbd>. The string is now <kbd>edcba</kbd>.</li>\n</ul>\n<p>The end result is the same, since the swaps are symmetric.</p>\n<p>According to the C++ standard:</p>\n<blockquote>\n<p id=\"so_37582510_37582863_0\"><strong>25.3.10 Reverse</strong> [alg.reverse]</p>\n<pre><code>template&lt;class BidirectionalIterator&gt;\nvoid reverse(BidirectionalIterator first, BidirectionalIterator last);\n</code></pre>\n<p id=\"so_37582510_37582863_1\"><em>Effects:</em> For each non-negative integer <code>i &lt; (last - first) / 2</code>, applies <code>iter_swap</code> to all pairs of iterators <code>first + i</code>, <code>(last - i) - 1</code>.</p>\n</blockquote>\n", "OwnerUserId": "4698882", "LastEditorUserId": "4698882", "LastEditDate": "2016-06-02T04:53:21.730", "Id": "37582863", "Score": "1", "CreationDate": "2016-06-02T04:47:56.890", "LastActivityDate": "2016-06-02T04:53:21.730"}, "37582510": {"CommentCount": "3", "ViewCount": "58", "CreationDate": "2016-06-02T04:09:30.300", "LastActivityDate": "2016-06-28T06:31:36.790", "Title": "std::reverse with reverse iterators, why isn't it a no-op?", "PostTypeId": "1", "Id": "37582510", "Score": "-1", "Body": "<p>Take this minimal example:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;algorithm&gt;\n\nint main()\n{\n    std::string s{\"abcde\"};\n    std::reverse(s.rbegin(), s.rend());\n    std::cout &lt;&lt; s;\n}\n</code></pre>\n<p>Since we are reversing a range of reverse iterators, I expect it to be a no-op. But it prints <code>edcba</code>. What don't I understand about reverse iterators or <code>std::reverse</code>?</p>\n", "Tags": "<c++>", "OwnerUserId": "6412665", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_37582510_37582863_1": {"section_id": 1355, "quality": 0.7857142857142857, "length": 11}}, "n3337": {"so_37582510_37582863_1": {"section_id": 1349, "quality": 0.7857142857142857, "length": 11}}, "n4659": {"so_37582510_37582863_1": {"section_id": 1486, "quality": 0.8571428571428571, "length": 12}}}, "37582584": {"ParentId": "37582510", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Algorithms operate on ranges. <code>std::reverse</code> did its job and [<code>s.rbegin()</code>, <code>s.rend()</code>) is now <code>\"abcde\"</code>. <code>std::cout &lt;&lt; s;</code> will print it from the other end, so <code>\"edcba\"</code>.</p>\n", "OwnerUserId": "3552770", "LastEditorUserId": "3552770", "LastEditDate": "2016-06-28T06:31:36.790", "Id": "37582584", "Score": "1", "CreationDate": "2016-06-02T04:17:18.847", "LastActivityDate": "2016-06-28T06:31:36.790"}});