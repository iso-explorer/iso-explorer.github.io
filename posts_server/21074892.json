post_cb({"bq_ids": {"n4140": {"so_21074892_21074979_0": {"length": 48, "quality": 1.0, "section_id": 5854}}, "n3337": {"so_21074892_21074979_0": {"length": 47, "quality": 0.9791666666666666, "section_id": 5624}}, "n4659": {"so_21074892_21074979_0": {"length": 48, "quality": 1.0, "section_id": 7333}}}, "21074892": {"ViewCount": "181", "Body": "<p>I try to understand the POD concept in terms of other type predicates.</p>\n<p>Is there a complete list of type predicates that would correspond to <code>std::is_pod&lt;&gt;</code>?</p>\n<p>Here is my current attempt which does not hold (VS2013).</p>\n<pre><code>struct C { // Does not assert as POD class\n    int value;\n\n    C() = default;\n\n    C(int v) : value(v) { // Offends is_pod&lt;&gt;\n    }\n};\n\nstatic_assert(std::is_trivial&lt;C&gt;::value, \"\"); // Assert OK\nstatic_assert(std::is_trivially_copyable&lt;C&gt;::value, \"\"); // Assert OK\nstatic_assert(std::is_standard_layout&lt;C&gt;::value, \"\"); // Assert OK\nstatic_assert(std::is_pod&lt;C&gt;::value, \"\");  // Assert fails. Why?\n</code></pre>\n", "Title": "Is there a conjunction of type predicates that correspond to std::is_pod<>?", "CreationDate": "2014-01-12T13:00:44.047", "LastActivityDate": "2014-01-12T15:36:30.003", "CommentCount": "5", "LastEditDate": "2014-01-12T13:34:31.513", "PostTypeId": "1", "LastEditorUserId": "1942629", "Id": "21074892", "Score": "7", "OwnerUserId": "1942629", "Tags": "<layout><c++11><typetraits><pod><trivial>", "AnswerCount": "1"}, "21074979": {"Id": "21074979", "PostTypeId": "2", "Body": "<p>The combination of <code>is_trivial</code> and <code>is_standard_layout</code> is equal to <code>is_pod</code>, modulo some other restrictions on non-static members that are not captured by one of the type traits in <code>&lt;type_traits&gt;</code>. </p>\n<p>Relevant quote from <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3691.pdf\" rel=\"nofollow\">the draft Standard</a>:</p>\n<p><strong>[class]</strong></p>\n<blockquote>\n<p id=\"so_21074892_21074979_0\">10 A POD struct is a non-union class that is both a <strong>trivial class</strong>\n  and a <strong>standard-layout class</strong>, and has no non-static data members of\n  type non-POD struct, non-POD union (or array of such types).\n  Similarly, a POD union is a union that is both a trivial class and a\n  standard-layout class, and has no non-static data members of type\n  non-POD struct, non-POD union (or array of such types). A POD class is\n  a class that is either a POD struct or a POD union.</p>\n</blockquote>\n", "LastEditorUserId": "819272", "LastActivityDate": "2014-01-12T15:36:30.003", "Score": "4", "CreationDate": "2014-01-12T13:07:41.290", "ParentId": "21074892", "CommentCount": "26", "OwnerUserId": "819272", "LastEditDate": "2014-01-12T15:36:30.003"}});