post_cb({"13300026": {"ParentId": "13300019", "Score": "6", "CreationDate": "2012-11-08T23:56:55.247", "Id": "13300026", "OwnerUserId": "1119701", "LastActivityDate": "2012-11-08T23:56:55.247", "Body": "<p>In all compilers. This is guaranteed by the C Standard and the C++ Standard.</p>\n<p>For example, for C here is the relevant paragraph:</p>\n<blockquote>\n<p id=\"so_13300019_13300026_0\">(C99, 6.7.8p21) \"If there are fewer initializers in a brace-enclosed list than there are elements or members of an aggregate, or fewer characters in a string literal used to initialize an array of known size than there are elements in the array, the remainder of the aggregate shall be initialized implicitly the same as objects that have static storage      duration.\"</p>\n</blockquote>\n<p>and</p>\n<blockquote>\n<p id=\"so_13300019_13300026_1\">(C99, 6.7.8p10) \"If an object that has automatic storage duration is not initialized explicitly, its value is indeterminate. If an object that has static storage duration is not initialized explicitly, then: [...] if it has arithmetic type, it is initialized to (positive or unsigned) zero; [...]\"</p>\n</blockquote>\n", "PostTypeId": "2", "CommentCount": "3"}, "13300019": {"Tags": "<c++><c>", "ViewCount": "217", "AnswerCount": "2", "CreationDate": "2012-11-08T23:56:02.533", "FavoriteCount": "0", "Title": "array initialization in C/C++", "CommentCount": "1", "AcceptedAnswerId": "13300026", "Score": "2", "OwnerUserId": "395573", "Id": "13300019", "LastActivityDate": "2012-11-09T06:16:30.900", "Body": "<p>does this code initialize <strong>all</strong> the elements of the array in <strong>all</strong> major C and C++ compilers or not?</p>\n<pre><code>int arr[100] = {0};\n</code></pre>\n", "PostTypeId": "1"}, "13301405": {"ParentId": "13300019", "Score": "1", "CreationDate": "2012-11-09T02:47:19.647", "LastActivityDate": "2012-11-09T06:16:30.900", "LastEditDate": "2012-11-09T06:16:30.900", "OwnerUserId": "318716", "LastEditorUserId": "318716", "Body": "<p><em>If</em> the array happens to be an array of <em>structs,</em> you'll quickly run into problems. Heck, you can't even do a single struct.  </p>\n<p>This simple example shows that two <em>major</em> compilers (gcc and msvc) <em>do not</em> follow the specifications as quoted in ouah's answer (gcc <em>seemingly,</em> from its warning, and msvc from its error msg).</p>\n<p>Consider this source, foo.c / foo.cpp:</p>\n<pre><code>void foo(void) {\n   struct A {\n      int i;\n      int j;\n   };\n   struct A single = {0};\n}\n</code></pre>\n<p>Compile, with both gcc and g++:</p>\n<pre><code>$ gcc -Wall -W -c foo.c\nfoo.c: In function 'foo':\nfoo.c:6:14: warning: missing initializer\nfoo.c:6:14: warning: (near initialization for 'single.j')\n\n$ g++ -Wall -W -c foo.cpp\nfoo.cpp: In function 'void foo()':\nfoo.cpp:6:27: warning: missing initializer for member 'foo()::A::j'\n</code></pre>\n<p>The same warnings are given for arrays. This gcc is only two years old: <code>gcc --version</code> --&gt; <code>gcc (GCC) 4.5.3</code>.</p>\n<p>Plain <code>{}</code> without the <em>0</em> works fine in gcc, including for arrays. And you could always compile with <code>-w</code> (lower case) to disable all warnings.</p>\n<p>But MSVS 2012 has the <em>equal and opposite problem</em> with this example (including arrays). </p>\n<p>It <em>likes</em> <code>{0},</code> and treats <code>{}</code> as an <em>error</em> :</p>\n<pre><code>Error C2059: syntax error : '}'\n</code></pre>\n", "Id": "13301405", "PostTypeId": "2", "CommentCount": "5"}, "bq_ids": {"n4659": {"so_13300019_13300026_1": {"length": 13, "section_id": 4053, "quality": 0.5416666666666666}}}});