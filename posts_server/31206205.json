post_cb({"31206626": {"ParentId": "31206205", "CommentCount": "2", "Body": "<p>The expression is guaranteed that is evaluated only once by the flow of control. This  is justified in the standard N4431 <em>\u00a76.4.2/6 The switch statement [stmt.switch]</em> (<strong>Emphasis mine</strong>):</p>\n<blockquote>\n<p id=\"so_31206205_31206626_0\"><strong>case and default labels in themselves do not alter the flow of\n  control, which continues unimpeded across such labels.</strong> To exit from a\n  switch, see break, 6.6.1. [ Note: Usually, the substatement that is\n  the subject of a switch is compound and case and default labels appear\n  on the top-level statements contained within the (compound)\n  substatement, but this is not required. Declarations can appear in the\n  substatement of a switch-statement. \u2014 end note ]</p>\n</blockquote>\n", "OwnerUserId": "2352671", "PostTypeId": "2", "Id": "31206626", "Score": "0", "CreationDate": "2015-07-03T12:14:32.020", "LastActivityDate": "2015-07-03T12:14:32.020"}, "31206606": {"ParentId": "31206205", "PostTypeId": "2", "CommentCount": "10", "Body": "<p>I think it is guaranteed that <code>f</code> is only called once.</p>\n<p>First we have</p>\n<blockquote>\n<p id=\"so_31206205_31206606_0\">The condition shall be of integral type, enumeration type, or class type.</p>\n</blockquote>\n<p>[6.4.2 (1)] (the non-integral stuff does not apply here), and</p>\n<blockquote>\n<p id=\"so_31206205_31206606_1\">The value of a condition that is an expression is the value of the\n  expression</p>\n</blockquote>\n<p>[6.4 (4)]. Furthermore,</p>\n<blockquote>\n<p id=\"so_31206205_31206606_2\">The value of the condition will be referred to as simply \u201cthe condition\u201d where the\n  usage is unambiguous.</p>\n</blockquote>\n<p>[6.4 (4)] That means in our case, the \"condition\" is just a plain value of type  <code>int</code>, not <code>f</code>. <code>f</code> is only used to find the value for the condition. Now when control reaches the <code>switch</code> statement</p>\n<blockquote>\n<p id=\"so_31206205_31206606_3\">its condition is evaluated</p>\n</blockquote>\n<p>[6.4.2 (5)], i.e. we use the value of the <code>int</code> that is returned by <code>f</code> as our \"condition\". Then finally the condition (which is a value of type <code>int</code>, not <code>f</code>), is</p>\n<blockquote>\n<p id=\"so_31206205_31206606_4\">compared with each case constant</p>\n</blockquote>\n<p>[6.4.2 (5)]. This will not trigger side effects from <code>f</code> again.</p>\n<p>All quotes from N3797. (Also checked N4140, no difference)</p>\n", "OwnerUserId": "3002139", "LastEditorUserId": "3002139", "LastEditDate": "2015-07-03T12:46:56.627", "Id": "31206606", "Score": "36", "CreationDate": "2015-07-03T12:13:30.833", "LastActivityDate": "2015-07-03T12:46:56.627"}, "31206205": {"CommentCount": "5", "AcceptedAnswerId": "31206606", "PostTypeId": "1", "LastEditorUserId": "3959454", "CreationDate": "2015-07-03T11:52:20.860", "LastActivityDate": "2015-07-03T16:47:25.227", "LastEditDate": "2015-07-03T11:56:19.003", "ViewCount": "2334", "FavoriteCount": "3", "Title": "C++ switch statement expression evaluation guarantee", "Id": "31206205", "Score": "53", "Body": "<p>Regarding switch the standard states the following. <em>\"When the switch statement is executed, its condition is evaluated and compared with each case constant.\"</em></p>\n<p>Does it mean that the condition expression evaluated once and once only, and it is guaranteed by the standard for each compiler?</p>\n<p>For example, when a function is used in the switch statement head, with a side effect.</p>\n<pre><code>int f() { ... }\nswitch (f())\n{\n    case ...;\n    case ...;\n}\n</code></pre>\n", "Tags": "<c++><standards><language-lawyer>", "OwnerUserId": "1794113", "AnswerCount": "6"}, "31206579": {"ParentId": "31206205", "CommentCount": "0", "Body": "<p>Section 6.4.4:</p>\n<blockquote>\n<p id=\"so_31206205_31206579_0\">...The value of a condition that is an expression is the value of the\n  expression, contextually converted to bool for statements other than\n  switch;...The value of the condition will be referred to as simply \u201cthe condition\u201d where the\n  usage is unambiguous</p>\n</blockquote>\n<p>In my understanding, the quote above is equivalent to the following pseudo-code:</p>\n<pre><code>switchCondition := evaluate(expression)\n</code></pre>\n<p>Now add your quote </p>\n<blockquote>\n<p id=\"so_31206205_31206579_1\">...its condition is evaluated and compared with each case constant.</p>\n</blockquote>\n<p>Which should be translated to:</p>\n<pre><code>foreach case in cases\n    if case.constant == switchCondition\n         goto case.block\n</code></pre>\n<p>So yeah, it looks like this is the case.</p>\n", "OwnerUserId": "1115693", "PostTypeId": "2", "Id": "31206579", "Score": "2", "CreationDate": "2015-07-03T12:11:51.200", "LastActivityDate": "2015-07-03T12:11:51.200"}, "31206741": {"ParentId": "31206205", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Yes the expression is evaluated only once when the switch statement is executed:</p>\n<p><strong>\u00a7 6.4 Selection statements</strong></p>\n<blockquote>\n<p id=\"so_31206205_31206741_0\">4 [...] The value of a condition that is an expression is the value of the\n  expression [...] The value of the condition will be referred to as simply \u201cthe condition\u201d where the usage is unambiguous.</p>\n</blockquote>\n<p>This means that the expression is evaluated and its value is considered the <code>condition</code> to be evaluated against each <code>case</code> statement.</p>\n", "OwnerUserId": "3426025", "LastEditorUserId": "3426025", "LastEditDate": "2015-07-03T12:33:17.700", "Id": "31206741", "Score": "3", "CreationDate": "2015-07-03T12:20:36.973", "LastActivityDate": "2015-07-03T12:33:17.700"}, "31207046": {"ParentId": "31206205", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Does this code print <code>hello</code> once or twice?</p>\n<pre><code>int main() {\n    printf(\"hello\\n\");\n}\n</code></pre>\n<p>Well, I think the answer is in the more general understanding of what the standard describes rather than in the specific <code>switch</code> statement wording.</p>\n<p>As per <strong>Program execution [intro.execution]</strong> the standard describes the behaviour of some <em>abstract machine</em> that <em>executes</em> the program parsed according to the C++ <em>grammar</em>. It does not really define what 'abstract machine' or 'executes' mean, but they are assumed to mean their obvious computer science concepts, i.e. a computer that goes through the abstract syntax tree and evaluates every part of it according to the semantics described by the standard. This implies that if you wrote something once, then when the <em>execution</em> gets to that point, it is evaluated only once.</p>\n<p>The more relevant question is \"when the implementation may evaluate something not the way written in the program\"? For this there is the as-if rule and a bunch of undefined behaviours which permit the implementation to deviate from this abstract interpretation.</p>\n", "OwnerUserId": "277176", "LastEditorUserId": "277176", "LastEditDate": "2015-07-03T12:40:37.463", "Id": "31207046", "Score": "2", "CreationDate": "2015-07-03T12:35:27.073", "LastActivityDate": "2015-07-03T12:40:37.463"}, "bq_ids": {"n4140": {"so_31206205_31207433_2": {"section_id": 3893, "quality": 0.6875, "length": 11}, "so_31206205_31206606_2": {"section_id": 3885, "quality": 0.9, "length": 9}, "so_31206205_31207433_0": {"section_id": 5810, "quality": 1.0, "length": 18}, "so_31206205_31206741_0": {"section_id": 3885, "quality": 0.8125, "length": 13}, "so_31206205_31206579_0": {"section_id": 3885, "quality": 0.8636363636363636, "length": 19}, "so_31206205_31206606_0": {"section_id": 3890, "quality": 0.875, "length": 7}, "so_31206205_31206606_1": {"section_id": 715, "quality": 0.6666666666666666, "length": 4}, "so_31206205_31206579_1": {"section_id": 3893, "quality": 1.0, "length": 7}, "so_31206205_31206626_0": {"section_id": 3894, "quality": 0.9047619047619048, "length": 38}, "so_31206205_31207433_1": {"section_id": 5806, "quality": 0.8, "length": 4}, "so_31206205_31206606_4": {"section_id": 3893, "quality": 1.0, "length": 4}}, "n3337": {"so_31206205_31207433_2": {"section_id": 3753, "quality": 0.6875, "length": 11}, "so_31206205_31206606_2": {"section_id": 3745, "quality": 0.9, "length": 9}, "so_31206205_31206741_0": {"section_id": 3745, "quality": 0.8125, "length": 13}, "so_31206205_31206579_0": {"section_id": 3745, "quality": 0.8636363636363636, "length": 19}, "so_31206205_31207433_0": {"section_id": 5583, "quality": 1.0, "length": 18}, "so_31206205_31206579_1": {"section_id": 3753, "quality": 1.0, "length": 7}, "so_31206205_31206606_4": {"section_id": 3753, "quality": 1.0, "length": 4}, "so_31206205_31206606_1": {"section_id": 3745, "quality": 0.6666666666666666, "length": 4}, "so_31206205_31207433_1": {"section_id": 5579, "quality": 0.8, "length": 4}, "so_31206205_31206606_0": {"section_id": 3750, "quality": 0.875, "length": 7}, "so_31206205_31206626_0": {"section_id": 3754, "quality": 0.9047619047619048, "length": 38}}, "n4659": {"so_31206205_31207433_1": {"section_id": 7267, "quality": 0.8, "length": 4}, "so_31206205_31206606_2": {"section_id": 4764, "quality": 0.9, "length": 9}, "so_31206205_31206579_0": {"section_id": 4764, "quality": 0.9090909090909091, "length": 20}, "so_31206205_31207433_0": {"section_id": 7271, "quality": 1.0, "length": 18}, "so_31206205_31206741_0": {"section_id": 4764, "quality": 0.875, "length": 14}, "so_31206205_31206606_4": {"section_id": 4779, "quality": 1.0, "length": 4}, "so_31206205_31207433_2": {"section_id": 4779, "quality": 0.6875, "length": 11}, "so_31206205_31206606_1": {"section_id": 4764, "quality": 0.8333333333333334, "length": 5}, "so_31206205_31206579_1": {"section_id": 4779, "quality": 1.0, "length": 7}, "so_31206205_31206606_0": {"section_id": 4776, "quality": 0.875, "length": 7}, "so_31206205_31206626_0": {"section_id": 4780, "quality": 0.8809523809523809, "length": 37}}}, "31207433": {"ParentId": "31206205", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>Reading <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4296.pdf\" rel=\"nofollow\">N4296</a></p>\n<p>Page 10 para 14:</p>\n<blockquote>\n<p id=\"so_31206205_31207433_0\">Every value computation and side effect associated with a full-expression is sequenced before every value\n  computation and side effect associated with the next full-expression to be evaluated.</p>\n</blockquote>\n<p>When I read the first line of para. 10 (above that):</p>\n<blockquote>\n<p id=\"so_31206205_31207433_1\">A full-expression is an expression that is not a sub-expression of\n  another expression.</p>\n</blockquote>\n<p>I have to believe that the condition of a <code>switch</code> statement is a full-expression and each condition expression is a full expression (albeit trivial at execution).</p>\n<p>A <code>switch</code> is a statement not an expression (see 6.4.2 and many other places).</p>\n<p>So by that reading the evaluation of the <code>switch</code> must take place before the evaluation of the <code>case</code> constants. </p>\n<p>As ever many points boil down to tortuous reading of the specification to come to an obvious conclusion.</p>\n<p>If I peer reviewed that sentence I would propose the following amendment (in <strong>bold</strong>):</p>\n<blockquote>\n<p id=\"so_31206205_31207433_2\">When the switch statement is executed, its condition is evaluated\n  <strong>once per execution of the switch statement</strong> and compared with each case constant.</p>\n</blockquote>\n", "OwnerUserId": "4213662", "LastEditorUserId": "4213662", "LastEditDate": "2015-07-03T16:47:25.227", "Id": "31207433", "Score": "5", "CreationDate": "2015-07-03T12:56:57.487", "LastActivityDate": "2015-07-03T16:47:25.227"}});