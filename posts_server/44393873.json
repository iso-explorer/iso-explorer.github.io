post_cb({"44393913": {"ParentId": "44393873", "CommentCount": "2", "Body": "<p>No.</p>\n<p>The semicolon is not even \"attached\" to the loop; it's just an empty statement sitting there, effectively on its own.</p>\n", "OwnerUserId": "560648", "PostTypeId": "2", "Id": "44393913", "Score": "0", "CreationDate": "2017-06-06T15:19:49.263", "LastActivityDate": "2017-06-06T15:19:49.263"}, "44393928": {"ParentId": "44393873", "LastEditDate": "2017-06-06T15:30:54.007", "CommentCount": "4", "CreationDate": "2017-06-06T15:20:34.367", "OwnerUserId": "1687119", "LastEditorUserId": "1687119", "PostTypeId": "2", "Id": "44393928", "Score": "1", "Body": "<p>The semicolon is an empty expression statement.</p>\n<p>From section 6.2 of the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf\" rel=\"nofollow noreferrer\">C++ standard</a></p>\n<blockquote>\n<p id=\"so_44393873_44393928_0\">The expression is a discarded-value expression (Clause 5). All side\n  effects from an expression statement are completed before the next\n  statement is executed. <strong>An expression statement with the expression\n  missing is called a null statement.</strong> [ Note: Most statements are\n  expression statements \u2014 usually assignments or function calls. A null\n  statement is useful to carry a label just before the } of a compound\n  statement and to supply a null body to an iteration statement such as\n  a while statement (6.5.1). \u2014end note ]</p>\n</blockquote>\n<p>This will be more clear with some reformatting:</p>\n<pre><code>#include &lt;iostream&gt;\n\nint main(){\n    for(int i=0; i&lt;5; ++i){\n        std::cout &lt;&lt;\"Hello\"&lt;&lt;std::endl;\n    }\n    ;\n}\n</code></pre>\n<p>The presence of this null statement has no effect on the program.</p>\n", "LastActivityDate": "2017-06-06T15:30:54.007"}, "44393937": {"ParentId": "44393873", "CommentCount": "0", "Body": "<p>It doesn't change anything. It just evaluates to an empty statement.</p>\n<p>It's completely harmless. Just a bit of pointless clutter.</p>\n", "OwnerUserId": "5910058", "PostTypeId": "2", "Id": "44393937", "Score": "0", "CreationDate": "2017-06-06T15:20:53.017", "LastActivityDate": "2017-06-06T15:20:53.017"}, "44393873": {"CommentCount": "5", "ViewCount": "150", "PostTypeId": "1", "ClosedDate": "2017-06-06T15:35:20.220", "LastEditorUserId": "8120513", "CreationDate": "2017-06-06T15:17:39.613", "LastActivityDate": "2017-06-06T15:34:48.617", "LastEditDate": "2017-06-06T15:34:48.617", "AcceptedAnswerId": "44393928", "Title": "semicolon after the for loop block", "Id": "44393873", "Score": "0", "Body": "<pre><code>#include &lt;iostream&gt;\n\nint main() {\n    for( int i = 0; i &lt; 5; ++i) {\n        std::cout &lt;&lt; \"Hello\" &lt;&lt; std::endl;\n    };\n}\n</code></pre>\n<p>Is there any case that the semicolon after the <code>for</code> loop would affect the program ?</p>\n", "Tags": "<c++>", "OwnerUserId": "8120513", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_44393873_44393928_0": {"section_id": 3880, "quality": 0.9019607843137255, "length": 46}}, "n3337": {"so_44393873_44393928_0": {"section_id": 3740, "quality": 0.9019607843137255, "length": 46}}, "n4659": {"so_44393873_44393928_0": {"section_id": 4769, "quality": 0.8823529411764706, "length": 45}}}});