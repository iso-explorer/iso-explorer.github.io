post_cb({"44187483": {"ParentId": "44187467", "Score": "-1", "CreationDate": "2017-05-25T18:29:29.403", "Id": "44187483", "OwnerUserId": "301883", "LastActivityDate": "2017-05-25T18:29:29.403", "Body": "<p>Maybe.  A compiler should do that.  It doesn't have to.</p>\n", "PostTypeId": "2", "CommentCount": "0"}, "44187574": {"ParentId": "44187467", "Score": "2", "CreationDate": "2017-05-25T18:35:13.900", "LastActivityDate": "2017-05-25T18:40:43.327", "LastEditDate": "2017-05-25T18:40:43.327", "OwnerUserId": "2877241", "LastEditorUserId": "2877241", "Body": "<p>From the C++ Standard (2.13.5 String literals)</p>\n<blockquote>\n<p id=\"so_44187467_44187574_0\">16 Evaluating a string-literal results in a string literal object with\n  static storage duration, initialized from the given characters as\n  specified above. <strong>Whether all string literals are distinct (that is,\n  are stored in nonoverlapping objects) and whether successive\n  evaluations of a string-literal yield the same or a different object\n  is unspecified</strong></p>\n</blockquote>\n<p>So it is implementation defined whether the same string literals are distinct objects or not. Usually it depends on compiler options.</p>\n<p>If you have for example such a call like this</p>\n<pre><code>someMethod(\"hello World\");\n</code></pre>\n<p>in a loop then there is used only one string literal. So the function will get the same address of the first character of the string literal in each iteration of the loop.</p>\n<p>However if you will write</p>\n<pre><code>if ( \"hello World\" == \"hello World\" )\n{\n    //...\n}\n</code></pre>\n<p>then the condition can yield either true or false depending on the corresponding compiler option.</p>\n", "Id": "44187574", "PostTypeId": "2", "CommentCount": "4"}, "bq_ids": {"n4659": {"so_44187467_44187574_0": {"length": 31, "section_id": 6789, "quality": 1.0}}}, "44187467": {"Tags": "<c++><string><memory><c-strings><string-literals>", "ViewCount": "34", "LastEditDate": "2017-05-25T19:18:14.110", "CreationDate": "2017-05-25T18:28:41.850", "LastEditorUserId": "2118290", "Title": "Are repeated constant c_strings duplicated?", "CommentCount": "0", "AnswerCount": "2", "Score": "1", "OwnerUserId": "2118290", "Id": "44187467", "LastActivityDate": "2017-05-25T19:18:14.110", "Body": "<p>So lets say for instance in my program I pass a string to a method.</p>\n<p>someMethod(\"hello World\");</p>\n<p>On compilation, i'm assuming the literal, \"Hello world\" recognized as constant without directly declaring it so.</p>\n<p>If it does recognize it as constant, does it store duplicates as the same address?</p>\n<p>More specifically c++11?</p>\n<p>So, lets have a case scenario, Lets say I populate a map with a Object to String List.</p>\n<pre><code>map&lt;std::string,Shader&gt; list;\nlist[\"shaders/sprite.vs\"] = Shader(\"shaders/sprite.vs\");\n... (Sometime later in another file)\n//Some call that needs a shader, that I have stored in a map.\nSomeGLFunction(\"shaders/sprite.vs\");\n</code></pre>\n<p>Excuse the obvious need to use a variable to hold it.</p>\n<p>Without out the compiler option of \"/GF\" to enable string pooling, The compiler will commonly take all three literals and store them separately?</p>\n", "PostTypeId": "1"}});