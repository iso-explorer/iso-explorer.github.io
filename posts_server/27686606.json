post_cb({"bq_ids": {"n4140": {"so_27686606_27686690_0": {"length": 16, "quality": 0.9411764705882353, "section_id": 3254}}, "n3337": {"so_27686606_27686690_0": {"length": 16, "quality": 0.9411764705882353, "section_id": 3126}}, "n4659": {"so_27686606_27686690_0": {"length": 16, "quality": 0.9411764705882353, "section_id": 4012}}}, "27686690": {"Id": "27686690", "PostTypeId": "2", "Body": "<p>It`s explicitly forbidden by C++ standard, you cannot do such thing.\nN3376 8.3.6/3</p>\n<blockquote>\n<p id=\"so_27686606_27686690_0\">A default argument shall be specified only in the\n  parameter-declaration-clause of a function declaration or in a\n  template-parameter (14.1); in the latter case, the initializer-clause\n  shall be an assignment-expression. <strong>A default argument shall not be\n  specified for a parameter pack.</strong></p>\n</blockquote>\n", "LastEditorUserId": "1498580", "LastActivityDate": "2014-12-29T10:32:29.587", "Score": "2", "CreationDate": "2014-12-29T09:59:03.960", "ParentId": "27686606", "CommentCount": "2", "OwnerUserId": "1498580", "LastEditDate": "2014-12-29T10:32:29.587"}, "27686606": {"ViewCount": "900", "Body": "<p><strong>Can I default initialize a parameter pack to the respective value initialization of each type ?</strong></p>\n<p>To elaborate a bit more, take the example of a simple function template</p>\n<pre><code>template&lt;typename T&gt;\nvoid f(T arg = T())\n{ \n  // eg for T=int, arg is 0 (value initialization) when default initialized\n}\n</code></pre>\n<p>Would it be possible to express its variadic counterpart, ie </p>\n<pre><code>template&lt;typename... Args&gt;\nvoid F(Args... args /* how can I value initialize the parameter pack? */)\n{\n}\n</code></pre>\n", "AcceptedAnswerId": "27687037", "Title": "Default initialized (with value initialization) parameter pack", "CreationDate": "2014-12-29T09:52:24.987", "Id": "27686606", "CommentCount": "3", "PostTypeId": "1", "LastActivityDate": "2014-12-29T15:41:46.030", "Score": "3", "OwnerUserId": "4224575", "Tags": "<c++><variadic-templates>", "AnswerCount": "3"}, "27686996": {"Id": "27686996", "PostTypeId": "2", "Body": "<p>You can create two parameter packs, one representing the types corresponding to function parameters and one representing \"defaulted parameters.\"</p>\n<pre><code>template&lt; typename ... aux, typename ... arg &gt;\nvoid fn( arg ... a ) {\n    std::tuple&lt; aux ... &gt; more {}; // The tuple elements are value-initialized.\n}\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/1baac4b877dce4eb\" rel=\"nofollow\">http://coliru.stacked-crooked.com/a/1baac4b877dce4eb</a></p>\n<p>There is no way to explicitly mention the deduced template parameters for this function. Anything inside the angle braces of the call will go into <code>aux</code>, not <code>arg</code>.</p>\n<p>Note, the initialization you get with <code>{}</code> is value-initialization, not default-initialization. Objects of fundamental type get zeroed, not left uninitialized.</p>\n", "LastActivityDate": "2014-12-29T10:20:45.203", "CommentCount": "4", "CreationDate": "2014-12-29T10:20:45.203", "ParentId": "27686606", "Score": "3", "OwnerUserId": "153285"}, "27687037": {"Id": "27687037", "PostTypeId": "2", "Body": "<pre><code>#include &lt;iostream&gt;\n#include &lt;utility&gt;\n#include &lt;tuple&gt;\n#include &lt;cstddef&gt;\n#include &lt;type_traits&gt;\n\ntemplate &lt;typename... Args&gt;\nvoid F(Args... args)\n{\n    // target function, arbitrary body\n    using expander = int[];\n    (void)expander{ 0, (void(std::cout &lt;&lt; args &lt;&lt; \" \"), 0)... };\n    std::cout &lt;&lt; std::endl;\n}\n\ntemplate &lt;typename... Args, typename... Params, std::size_t... Is&gt;\nvoid F(std::index_sequence&lt;Is...&gt;, Params&amp;&amp;... params)\n{\n    F&lt;Args...&gt;(std::forward&lt;Params&gt;(params)...\n             , std::decay_t&lt;typename std::tuple_element&lt;sizeof...(Params) + Is, std::tuple&lt;Args...&gt;&gt;::type&gt;{}...);\n}\n\ntemplate &lt;typename... Args, typename... Params&gt;\nauto F(Params&amp;&amp;... params)\n    -&gt; std::enable_if_t&lt;(sizeof...(Args) &gt; sizeof...(Params))&gt;\n{\n    F&lt;Args...&gt;(std::make_index_sequence&lt;sizeof...(Args) - sizeof...(Params)&gt;{}\n             , std::forward&lt;Params&gt;(params)...);\n}\n</code></pre>\n<p><em>Tests:</em></p>\n<pre><code>#include &lt;string&gt;\n\nint main()\n{\n    // F(int, char, float = float{}, double = double{})\n    F&lt;int, char, float, double&gt;(1, 'c');\n\n    // F(int = int{}, char = char{}, float = float{}, double = double{})     \n    F&lt;int, char, float, double&gt;();\n\n    // F(const std::string&amp;, const std::string&amp; = std::string{})\n    F&lt;const std::string&amp;, const std::string&amp;&gt;(\"foo\");\n\n    // F(int, int, int)\n    F(1, 2, 3);\n}\n</code></pre>\n<p><em>Output:</em></p>\n<pre><code>1 'c' 0 0 \n0 '\\0' 0 0\n\"foo\" \"\"\n1 2 3\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/84646ebb2ab2c25f\" rel=\"nofollow\"><strong>DEMO</strong></a></p>\n", "LastEditorUserId": "3953764", "LastActivityDate": "2014-12-29T15:41:46.030", "Score": "3", "CreationDate": "2014-12-29T10:22:59.220", "ParentId": "27686606", "CommentCount": "5", "OwnerUserId": "3953764", "LastEditDate": "2014-12-29T15:41:46.030"}});