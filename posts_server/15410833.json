post_cb({"bq_ids": {"n4140": {"so_15410833_15411030_0": {"length": 5, "quality": 1.0, "section_id": 87}, "so_15410833_15411030_3": {"length": 15, "quality": 0.9375, "section_id": 87}, "so_15410833_15411030_1": {"length": 10, "quality": 0.9090909090909091, "section_id": 87}}, "n3337": {"so_15410833_15411030_0": {"length": 5, "quality": 1.0, "section_id": 82}, "so_15410833_15411030_3": {"length": 15, "quality": 0.9375, "section_id": 82}, "so_15410833_15411030_1": {"length": 10, "quality": 0.9090909090909091, "section_id": 82}}, "n4659": {"so_15410833_15411030_1": {"length": 7, "quality": 0.6363636363636364, "section_id": 90}}}, "15410963": {"Id": "15410963", "PostTypeId": "2", "Body": "<p>You may try</p>\n<pre><code>template&lt;size_t B1,size_t B2,size_t B3,size_t B4,size_t B5,size_t B6,size_t B7,size_t B8,size_t B9,size_t B10&gt;\nclass clsid_t{};\n\ntypedef clsid_t&lt;0x96b9d0ed, 0x8d13, 0x4171,  0xa9, 0x83, 0xb8, 0x4d, 0x88, 0xd6, 0x27, 0xbe&gt; CLSID_EH264VD;\n\ntemplate&lt;&gt;\nstruct dll&lt;CLSID_EH264VD&gt;\n{\n    char const* static name(){return \"mc_dec_avc_ds.ax\";};\n}\n</code></pre>\n", "LastActivityDate": "2013-03-14T13:41:01.120", "CommentCount": "3", "CreationDate": "2013-03-14T13:41:01.120", "ParentId": "15410833", "Score": "0", "OwnerUserId": "1904007"}, "15410833": {"ViewCount": "1154", "Body": "<p>This is a follow up to <a href=\"https://stackoverflow.com/questions/15392553/why-arent-fields-from-constant-pod-object-constants-themselves\">Why aren't fields from constant POD object constants themselves?</a></p>\n<p>A header from a library declares class GUIDs like</p>\n<pre><code>static const GUID CLSID_EH264VD = \n{ 0x96b9d0ed, 0x8d13, 0x4171, { 0xa9, 0x83, 0xb8, 0x4d, 0x88, 0xd6, 0x27, 0xbe } };\n</code></pre>\n<p>I want to write a function that creates an object directly from the dll, without requiring the dll to be registered, so I need to map each CLSID to the dll name.  Something like</p>\n<pre><code>Create&lt;CLSID_EH264VD&gt;()\n</code></pre>\n<p>which would depend on a specialization such as</p>\n<pre><code>template&lt;&gt;\nstruct dll&lt;CLSID_EH264VD&gt;\n{\n    char const* filename = \"\"mc_dec_avc_ds.ax\";\n}\n</code></pre>\n<p>so that it's a compile time error to try to instantiate an unregistered class with an unknown dll.</p>\n<p>The problem is that templates can't be specialized for GUIDs.  The linked question says that constexpr would allow to declare the GUID in a way that allows specialization, but Visual C++ doesn't support constexpr in the latest version (2012).  Any workaround?</p>\n", "AcceptedAnswerId": "15411030", "Title": "Specialize a template for a GUID value", "CreationDate": "2013-03-14T13:35:56.850", "Id": "15410833", "CommentCount": "2", "LastEditDate": "2017-05-23T12:23:04.613", "PostTypeId": "1", "LastEditorUserId": "-1", "LastActivityDate": "2013-03-14T13:44:17.940", "Score": "3", "OwnerUserId": "65569", "Tags": "<c++><templates><com><clsid>", "AnswerCount": "2"}, "15411030": {"Id": "15411030", "PostTypeId": "2", "Body": "<p>Per Paragraph 14.3.2/1 of the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_15410833_15411030_0\">A template-argument for a non-type, non-template template-parameter shall be <strong>one of</strong>:</p>\n<p id=\"so_15410833_15411030_1\">\u2014 for a non-type template-parameter of integral or enumeration type, a converted constant expression\n  (5.19) of the type of the template-parameter; or</p>\n<p id=\"so_15410833_15411030_2\">\u2014 the name of a non-type template-parameter; or</p>\n<p id=\"so_15410833_15411030_3\">\u2014 a constant expression (5.19) that designates <strong>the address of an object with static storage duration and\n  external or internal linkage</strong> or a function with external or internal linkage, [...]</p>\n<p id=\"so_15410833_15411030_4\">\u2014 [...]</p>\n</blockquote>\n<p>This means that even though the <code>GUID</code> itself cannot be used as a template argument, you can use the <em>address</em> of the global <code>GUID</code> as an argument, and a pointer to <code>GUID</code> as the corresponding non-type parameter:</p>\n<pre><code>template&lt;GUID const* pGuid&gt;\nstruct dll { };\n\ntemplate&lt;&gt;\nstruct dll&lt;&amp;CLSID_EH264VD&gt;\n//       ^^^^^^^^^^^^^^\n//       This is a constant expression\n{\n    char const* filename = \"\"mc_dec_avc_ds.ax\";\n}\n\n// ...\n\ndll&lt;&amp;CLSID_EH264VD&gt; x;\n</code></pre>\n", "LastActivityDate": "2013-03-14T13:44:17.940", "CommentCount": "3", "CreationDate": "2013-03-14T13:44:17.940", "ParentId": "15410833", "Score": "6", "OwnerUserId": "1932150"}});