post_cb({"bq_ids": {"n4140": {"so_24637514_24637563_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 6006}}, "n3337": {"so_24637514_24637563_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 5774}}, "n4659": {"so_24637514_24637563_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 7505}}}, "24637514": {"ViewCount": "220", "Body": "<p>The term \"object expression\" first appears in the C++11 draft standard in:</p>\n<blockquote>\n<p id=\"so_24637514_24637514_0\"><strong>3.4.5 Class member access</strong> [basic.lookup.classref]</p>\n<ol>\n<li>In a class member access expression (5.2.5), if the . or -&gt; token is immediately followed by an identifier followed by a &lt;, the identifier must be looked up to determine whether the &lt; is the beginning of a template argument list (14.2) or a less-than operator. The identifier is first looked up in the class of the object expression. If the identifier is not found, it is then looked up in the context of the entire postfix-expression and shall name a class template. </li>\n</ol>\n</blockquote>\n<p>I could find the definition of \"Object Expression\" on the web for <a href=\"http://msdn.microsoft.com/en-us/library/dd233237.aspx\" rel=\"nofollow\">F#</a> but not for C++.</p>\n<p>Is this a commonly understood term? What does it mean?</p>\n", "AcceptedAnswerId": "24637563", "Title": "What does \"object expression\" mean in C++", "CreationDate": "2014-07-08T16:54:53.260", "Id": "24637514", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2014-07-08T17:18:15.703", "Score": "3", "OwnerUserId": "434551", "Tags": "<c++><c++11><language-lawyer>", "AnswerCount": "1"}, "24637563": {"Id": "24637563", "PostTypeId": "2", "Body": "<p>If you follow to 5.2.5 [expr.ref], you'll read in paragraph 3:</p>\n<blockquote>\n<p id=\"so_24637514_24637563_0\">3 Abbreviating <em>postfix-expression</em>.<em>id-expression</em> as <code>E1.E2</code>, <code>E1</code> is called the <em>object expression.</em> ...</p>\n</blockquote>\n<p>Previously, paragraph 2 of that section defines <code>E1 -&gt; E2</code> in terms of <code>(*(E1)).E2</code>, so this quote from paragraph 3 actually covers both <code>.</code> and <code>-&gt;</code> operators.</p>\n", "LastEditorUserId": "1782465", "LastActivityDate": "2014-07-08T17:18:15.703", "Score": "10", "CreationDate": "2014-07-08T16:57:34.973", "ParentId": "24637514", "CommentCount": "7", "OwnerUserId": "1782465", "LastEditDate": "2014-07-08T17:18:15.703"}});