post_cb({"bq_ids": {"n4140": {"so_27829806_27829863_0": {"length": 16, "quality": 0.8421052631578947, "section_id": 6326}}, "n3337": {"so_27829806_27829863_0": {"length": 16, "quality": 0.8421052631578947, "section_id": 6083}}, "n4659": {"so_27829806_27829863_0": {"length": 16, "quality": 0.8421052631578947, "section_id": 7836}}}, "27829806": {"ViewCount": "1023", "Body": "<p>I'm trying to design a message queue for an object. There is a set of X threads that can all send message (to be processed later) to this object. If I have a <code>std::map&lt;thread_id_t, message&gt;</code>, is this thread safe, assuming thread one only adds messages with a key of 1, thread 2 to key 2, etc..?</p>\n", "AcceptedAnswerId": "27829837", "Title": "Can different threads insert into a map if they always use different keys?", "CreationDate": "2015-01-07T22:28:34.923", "Id": "27829806", "CommentCount": "4", "PostTypeId": "1", "LastActivityDate": "2015-01-07T22:45:51.840", "Score": "1", "OwnerUserId": "649140", "Tags": "<c++><multithreading><thread-safety><std>", "AnswerCount": "2"}, "27829837": {"Id": "27829837", "PostTypeId": "2", "Body": "<p><code>std::map</code> is not thread safe for multiple simultaneous writers.</p>\n<p>One of the many reasons why STL maps are not thread safe is that the underlying implementation of an STL map is an AVL tree that needs to be rebalanced every once in a while after a number of insertions. Rebalancing the map affects multiple nodes and is definitely not thread safe.</p>\n<p>Refer to the excellent <a href=\"http://www.drdobbs.com/lock-free-data-structures/184401865\" rel=\"nofollow\">Dr. Dobb's article on lock-free data structures</a> if any of this sounds interesting to you.</p>\n", "LastEditorUserId": "864313", "LastActivityDate": "2015-01-07T22:45:51.840", "Score": "4", "CreationDate": "2015-01-07T22:31:16.960", "ParentId": "27829806", "CommentCount": "11", "OwnerUserId": "864313", "LastEditDate": "2015-01-07T22:45:51.840"}, "27829863": {"Id": "27829863", "PostTypeId": "2", "Body": "<p>The general rule for classes in the standard C++ library is this: if you call a non-<code>const</code> method on an object (with the exception of some methods like <code>std::vector&lt;T&gt;::operator[]()</code>) you cannot have any other thread accessing this object in any way concurrently. If you need to use the operations you need to make synchronize the accesses between the different threads somehow. The relevant clauses in the standard are 17.6.4.10 [res.on.objects] paragraph 1:</p>\n<blockquote>\n<p id=\"so_27829806_27829863_0\">The behavior of a program is undefined if calls to standard library functions from different threads may\n  introduce a data race. The conditions under which this may occur are specified in 17.6.5.9.</p>\n</blockquote>\n<p>... and 17.6.5.9 [res.on.data.races] which describes that the standard C++ library isn't allowed to do mutate objects except when a non-<code>const</code> member function is called on them.</p>\n<p>Since inserting an object into a <code>std::map&lt;...&gt;</code> is clearly a non-<code>const</code> operations, you cannot do it concurrently from multiple threads without synchronization.</p>\n", "LastEditorUserId": "1120273", "LastActivityDate": "2015-01-07T22:40:30.337", "Score": "1", "CreationDate": "2015-01-07T22:32:57.737", "ParentId": "27829806", "CommentCount": "0", "OwnerUserId": "1120273", "LastEditDate": "2015-01-07T22:40:30.337"}});