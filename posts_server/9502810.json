post_cb({"bq_ids": {"n4140": {"so_9502810_9502847_1": {"length": 24, "quality": 0.9230769230769231, "section_id": 3286}, "so_9502810_9502847_2": {"length": 4, "quality": 0.5714285714285714, "section_id": 2182}, "so_9502810_9502847_0": {"length": 9, "quality": 0.8181818181818182, "section_id": 6098}}, "n3337": {"so_9502810_9502847_1": {"length": 25, "quality": 0.9615384615384616, "section_id": 3156}, "so_9502810_9502847_2": {"length": 4, "quality": 0.5714285714285714, "section_id": 2170}, "so_9502810_9502847_0": {"length": 9, "quality": 0.8181818181818182, "section_id": 5864}}, "n4659": {"so_9502810_9502847_1": {"length": 17, "quality": 0.6538461538461539, "section_id": 4049}, "so_9502810_9502847_2": {"length": 4, "quality": 0.5714285714285714, "section_id": 2455}, "so_9502810_9502847_0": {"length": 9, "quality": 0.8181818181818182, "section_id": 7595}}}, "9502810": {"ViewCount": "133", "Body": "<p>For example:</p>\n<pre><code>char *p=new char[100];\n</code></pre>\n<p>Must the character array pointed to by <code>p</code> be initialized to zeroes per the C++ standard? Or, is this behavior completely compiler dependant?</p>\n<p>gcc seems to call the default constructor on each character, which of course initializes them to zero. Visual C++ 2010 does not.</p>\n", "AcceptedAnswerId": "9502847", "Title": "Does a dynamic allocation of characters using new require for the compiler to initialize them to zero", "CreationDate": "2012-02-29T16:23:44.577", "Id": "9502810", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2012-02-29T16:43:06.257", "Score": "2", "OwnerUserId": "473798", "Tags": "<c++><c++11>", "AnswerCount": "1"}, "9502847": {"Id": "9502847", "PostTypeId": "2", "Body": "<p>No, POD types are left uninitialised when they are created by <code>new</code>. You could value-initialise them to zero if you want:</p>\n<pre><code>char * p = new char[100]();\n                        ^^\n</code></pre>\n<p>This is specified by the standard:</p>\n<blockquote>\n<p id=\"so_9502810_9502847_0\">C++11, 5.3.4/15: If the <em>new-initializer</em> is omitted, the object is <em>default-initialized</em> (8.5); if no initialization is performed, the object has indeterminate value.</p>\n<p id=\"so_9502810_9502847_1\">8.5/6: To <em>default-initialize</em> an object of type T means:<br>\n   \u2014 if T is a (possibly cv-qualified) class type (Clause 9), the default constructor for T is called (and the initialization is ill-formed if T has no accessible default constructor);<br>\n   \u2014 if T is an array type, <strong>each element is <em>default-initialized</em></strong>;<br>\n   \u2014 otherwise, <strong>no initialization is performed</strong>.</br></br></br></p>\n</blockquote>\n<p>Your other observation:</p>\n<blockquote>\n<p id=\"so_9502810_9502847_2\">gcc seems to call the default constructor on each character</p>\n</blockquote>\n<p>It shouldn't do - especially as <code>char</code> doesn't have a constructor. If you replace it with a type with a default constructor, then that <em>will</em> be called for each element.</p>\n<p>I get the following disassembly, with no sign of any initialisation:</p>\n<pre><code>int main() {\n    char * p = new char[100];\n    return p[0];\n}\n\n00000000004005f4 &lt;main&gt;:\n  # set up stack frame\n  push   %rbp\n  mov    %rsp,%rbp\n  sub    $0x10,%rsp\n\n  # call `operator new[]` with an argument of 100\n  mov    $0x64,%edi\n  callq  4004e0 &lt;operator new[](unsigned long)@plt&gt;\n\n  # put the return value into %eax\n  mov    %rax,-0x8(%rbp)\n  mov    -0x8(%rbp),%rax\n  movzbl (%rax),%eax\n  movsbl %al,%eax\n\n  # return\n  leaveq \n  retq   \n</code></pre>\n", "LastEditorUserId": "204847", "LastActivityDate": "2012-02-29T16:43:06.257", "Score": "9", "CreationDate": "2012-02-29T16:25:50.393", "ParentId": "9502810", "CommentCount": "5", "OwnerUserId": "204847", "LastEditDate": "2012-02-29T16:43:06.257"}});