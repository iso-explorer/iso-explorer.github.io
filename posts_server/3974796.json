post_cb({"3974834": {"ParentId": "3974796", "CommentCount": "0", "Body": "<p>If you are on VS2010, <a href=\"http://msdn.microsoft.com/en-us/library/f9t8842e.aspx\" rel=\"noreferrer\">this</a> could give you some idea</p>\n<p>As it is easy to understand, this is not mandated by the C++ standard and falls in the domain of 'implemenation specific behavior'.</p>\n", "OwnerUserId": "418110", "PostTypeId": "2", "Id": "3974834", "Score": "6", "CreationDate": "2010-10-20T04:48:15.320", "LastActivityDate": "2010-10-20T04:48:15.320"}, "3980941": {"ParentId": "3974796", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>For Solaris Based Systems I have found <a href=\"http://gcc.gnu.org/onlinedocs/gcc-4.5.4/gcc/Solaris-Pragmas.html\" rel=\"nofollow\">this</a>. You can use the <code>.init</code> section for every platforms I guess:</p>\n<pre><code>   pragma init (function [, function]...)\n</code></pre>\n<p>Source:</p>\n<blockquote>\n<p id=\"so_3974796_3980941_0\">This pragma causes each listed function to be called during initialization (before main) or during shared module loading, by adding a call to the .init section. </p>\n</blockquote>\n", "OwnerUserId": "2308801", "LastEditorUserId": "447356", "LastEditDate": "2012-08-30T11:35:32.967", "Id": "3980941", "Score": "1", "CreationDate": "2010-10-20T18:09:24.427", "LastActivityDate": "2012-08-30T11:35:32.967"}, "16849662": {"ParentId": "3974796", "CommentCount": "0", "Body": "<p>Yes,\nWe can change the main function name to any other name for eg. Start, bob, rem etc.</p>\n<p>How does the compiler knows that it has to search for the main() in the entire code ?</p>\n<p>Nothing is automatic in programming.\nsomebody has done some work to make it looks automatic for us.</p>\n<p>so it has been defined in the start up file that the compiler should search for main().</p>\n<p>we can change the name main to anything else eg. Bob and then the compiler will be searching for Bob() only.</p>\n", "OwnerUserId": "2438997", "PostTypeId": "2", "Id": "16849662", "Score": "0", "CreationDate": "2013-05-31T04:16:35.323", "LastActivityDate": "2013-05-31T04:16:35.323"}, "bq_ids": {"n4140": {"so_3974796_3974896_0": {"section_id": 7145, "quality": 0.9333333333333333, "length": 14}}, "n3337": {"so_3974796_3974896_0": {"section_id": 6889, "quality": 0.9333333333333333, "length": 14}}, "n4659": {"so_3974796_3974896_0": {"section_id": 8646, "quality": 0.8, "length": 12}}}, "3976608": {"ParentId": "3974796", "CommentCount": "0", "Body": "<p>On windows there is another (rather unorthodox) way to change the entry point of a program: <code>TLS</code>. See this for more explanations: <a href=\"http://isc.sans.edu/diary.html?storyid=6655\" rel=\"nofollow\">http://isc.sans.edu/diary.html?storyid=6655</a></p>\n", "OwnerUserId": "395626", "PostTypeId": "2", "Id": "3976608", "Score": "1", "CreationDate": "2010-10-20T09:56:29.123", "LastActivityDate": "2010-10-20T09:56:29.123"}, "40898537": {"ParentId": "3974796", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>I think it is easy to remove the undesired main() symbol from the object before linking. </p>\n<p>Unfortunately the entry point option for g++ is not working for me(the binary crashes before entering the entry point). So I strip undesired entry-point from  object file. </p>\n<p>Suppose we have two sources that contain entry point function.</p>\n<ol>\n<li>target.c contains the main() we do not want.</li>\n<li>our_code.c contains the testmain() we want to be the entry point.</li>\n</ol>\n<p>After compiling(g++ -c option) we can get the following object files.</p>\n<ol>\n<li>target.o, that contains the main() we do not want.</li>\n<li>our_code.o that contains the testmain() we want to be the entry point.</li>\n</ol>\n<p>So we can use the objcopy to strip undesired main() function.</p>\n<blockquote>\n<p id=\"so_3974796_40898537_0\">objcopy --strip-symbol=main target.o</p>\n</blockquote>\n<p>We can redefine testmain() to main() using objcopy too.</p>\n<blockquote>\n<p id=\"so_3974796_40898537_1\">objcopy --redefine-sym testmain=main our_code.o</p>\n</blockquote>\n<p>And then we can link both of them into binary.</p>\n<blockquote>\n<p id=\"so_3974796_40898537_2\">g++ target.o our_code.o -o our_binary.bin</p>\n</blockquote>\n<p>This works for me. Now when we run <code>our_binary.bin</code> the entry point is <code>our_code.c:main()</code> function.</p>\n", "OwnerUserId": "289483", "LastEditorUserId": "289483", "LastEditDate": "2016-11-30T21:39:00.403", "Id": "40898537", "Score": "0", "CreationDate": "2016-11-30T21:28:03.923", "LastActivityDate": "2016-11-30T21:39:00.403"}, "20246217": {"ParentId": "3974796", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>It's very simple:</p>\n<p>As you should know when you use constants in c, the compiler execute a kind of 'macro' changing the name of the constant for the respective value.</p>\n<p>just include a <code>#define</code> argument in the beginning of your code with the name of start-up function followed by the name <code>main</code>:</p>\n<p>Example:</p>\n<pre><code>#define my_start-up_function (main)\n</code></pre>\n", "OwnerUserId": "3042365", "LastEditorUserId": "498705", "LastEditDate": "2013-11-27T15:45:19.397", "Id": "20246217", "Score": "1", "CreationDate": "2013-11-27T15:17:31.127", "LastActivityDate": "2013-11-27T15:45:19.397"}, "32953260": {"ParentId": "3974796", "CommentCount": "0", "Body": "<p>With gcc, declare the function with attribute((constructor)) and gcc will execute this function before any other code including main.  </p>\n", "OwnerUserId": "4684709", "PostTypeId": "2", "Id": "32953260", "Score": "1", "CreationDate": "2015-10-05T16:21:36.347", "LastActivityDate": "2015-10-05T16:21:36.347"}, "38092589": {"ParentId": "3974796", "CommentCount": "0", "Body": "<p>This is highly speculative, but you might have a static initializer instead of main:</p>\n<h1>include </h1>\n<pre><code>int mymain()\n{\n    std::cout &lt;&lt; \"mymain\";\n    exit(0);\n}\n\nstatic int sRetVal = mymain();\n\nint main()\n{\n    std::cout &lt;&lt; \"never get here\";\n}\n</code></pre>\n<p>You might even make it 'Java-like', by putting the stuff in a constructor:</p>\n<pre><code>#include &lt;iostream&gt;\n\nclass MyApplication\n{\npublic:\n    MyApplication()\n    {\n        std::cout &lt;&lt; \"mymain\";\n        exit(0);\n    }\n};\n\nstatic MyApplication sMyApplication;\n\nint main()\n{\n    std::cout &lt;&lt; \"never get here\";\n}\n</code></pre>\n<p>Now. The interviewer might have thought about these, but I'd personally never use them. The reasons are:</p>\n<ul>\n<li>It's non-conventional. People won't understand it, it's nontrivial to find the entry point.</li>\n<li>Static initialization order is nondeterministic. Put in another static variable and you'll never now if it gets initialized.</li>\n</ul>\n<p>That said, I've seen it being used in production instead of <code>init()</code> for library initializers. The caveat is, on windows, (from experience) your statics in a DLL might or might not get initialized based on usage.</p>\n", "OwnerUserId": "6292621", "PostTypeId": "2", "Id": "38092589", "Score": "3", "CreationDate": "2016-06-29T07:05:27.230", "LastActivityDate": "2016-06-29T07:05:27.230"}, "3974851": {"ParentId": "3974796", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>In standard C (and, I believe, C++ as well), you can't, at least not for a hosted environment (but see below). The standard specifies that the starting point for the C code is <code>main</code>. The standard (c99) doesn't leave much scope for argument:</p>\n<blockquote>\n<p id=\"so_3974796_3974851_0\">5.1.2.2.1 Program startup: (1) The function called at program startup is named main.</p>\n</blockquote>\n<p>That's it. It then waffles on a bit about parameters and return values but there's really no leeway there for changing the name.</p>\n<p>That's for a hosted environment. The standard also allows for a freestanding environment (i.e., no OS, for things like embedded systems). For a freestanding environment:</p>\n<blockquote>\n<p id=\"so_3974796_3974851_1\">In a freestanding environment (in which C program execution may take place without any benefit of an operating system), the name and type of the function called at program startup are implementation-defined. Any library facilities available to a freestanding program, other than the minimal set required by clause 4, are implementation-defined.</p>\n</blockquote>\n<p>You can use \"trickery\" in C <em>implementations</em> so that you can make it look like <code>main</code> isn't the entry point. This is in fact what early Windows compliers did to mark <code>WinMain</code> as the start point.</p>\n<hr>\n<p>First way: a linker may include some pre-main startup code in a file like <code>start.o</code> and it is this piece of code which runs to set up the C environment then call <code>main</code>. There's nothing to stop you replacing that with something that calls <code>bob</code> instead.</p>\n<hr>\n<p>Second way: some linkers provide that very option with a command-line switch so that you can change it without recompiling the startup code.</p>\n<hr>\n<p>Third way: you can link with this piece of code:</p>\n<pre><code>int main (int c, char *v[]) { return bob (c, v); }\n</code></pre>\n<p>and then your entry point for <em>your</em> code is seemingly <code>bob</code> rather than <code>main</code>.</p>\n<hr>\n<p>However, all this, while of possibly academic interest, doesn't change the fact that I can't think of one single solitary situation in my many decades of cutting code, where this would be either necessary or desirable.</p>\n<p>I would be asking the interviewer: why would you <em>want</em> to do this?</p>\n</hr></hr></hr></hr>", "OwnerUserId": "14860", "LastEditorUserId": "14860", "LastEditDate": "2010-11-06T02:28:09.420", "Id": "3974851", "Score": "37", "CreationDate": "2010-10-20T04:51:27.370", "LastActivityDate": "2010-11-06T02:28:09.420"}, "12195861": {"ParentId": "3974796", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The entry point is actually the <code>_start</code> function (implemented in <em>crt1.o</em>) .</p>\n<p>The <code>_start</code> function prepares the command line arguments and then calls <code>main(int,char*[])</code>, \nyou can change the entry point from <code>_start</code> to <code>mystart</code> by setting a linker parameter:</p>\n<pre><code>g++ file.o -Wl,-emystart -o runme\n</code></pre>\n<p>Of course, this is a replacement for the entry point <code>_start</code> so you won't get the command line arguments: </p>\n<pre><code>void mystart(){\n\n}\n</code></pre>\n", "OwnerUserId": "1017417", "LastEditorUserId": "1017417", "LastEditDate": "2012-08-30T12:44:42.970", "Id": "12195861", "Score": "5", "CreationDate": "2012-08-30T11:27:51.697", "LastActivityDate": "2012-08-30T12:44:42.970"}, "3974859": {"ParentId": "3974796", "CommentCount": "1", "Body": "<p>Modify the crt object that actually calls the <code>main()</code> function, or provide your own (don't forget to disable linking of the normal one).</p>\n", "OwnerUserId": "20862", "PostTypeId": "2", "Id": "3974859", "Score": "3", "CreationDate": "2010-10-20T04:53:08.183", "LastActivityDate": "2010-10-20T04:53:08.183"}, "3974796": {"CommentCount": "6", "AcceptedAnswerId": "3974851", "PostTypeId": "1", "LastEditorUserId": "1105514", "CreationDate": "2010-10-20T04:37:47.543", "LastActivityDate": "2016-11-30T21:39:00.403", "LastEditDate": "2012-08-30T11:45:09.580", "ViewCount": "23366", "FavoriteCount": "6", "Title": "in c++ main function is the entry point to program how i can change it to an other function?", "Id": "3974796", "Score": "22", "Body": "<p>I was asked an interview question to change the entry point of a C or C++ program from <code>main()</code> to any other function. How is it possible?</p>\n", "Tags": "<c++><c><main>", "OwnerUserId": "233572", "AnswerCount": "12"}, "3974896": {"ParentId": "3974796", "PostTypeId": "2", "CommentCount": "7", "Body": "<p>From C++ standard docs <em>3.6.1 Main Function</em>,</p>\n<blockquote>\n<p id=\"so_3974796_3974896_0\">A program shall contain a global function called main, which is the designated start of the program. <strong>It is implementation-defined</strong>\n  whether a program in a freestanding environment is required to define a main function.</p>\n</blockquote>\n<p>So, it <strong>does depend</strong> on your compiler/linker...</p>\n", "OwnerUserId": "249490", "LastEditorUserId": "249490", "LastEditDate": "2010-10-20T05:05:51.553", "Id": "3974896", "Score": "7", "CreationDate": "2010-10-20T04:59:55.607", "LastActivityDate": "2010-10-20T05:05:51.553"}});