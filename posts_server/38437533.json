post_cb({"38437714": {"ParentId": "38437533", "CommentCount": "1", "Body": "<p>From <a href=\"http://eel.is/c++draft/basic.def.odr#4\">[basic.def.odr]</a>:</p>\n<blockquote>\n<p id=\"so_38437533_38437714_0\">Every program shall contain exactly one definition of every non-inline function or variable that is odr-used in\n  that program; no diagnostic required.</p>\n</blockquote>\n<p><code>foo</code> is odr-used, but doesn't have a definition (presumably - otherwise the question is moot). The program is ill-formed, but since no diagnostic is required, it's valid to compile.</p>\n<p>Typically, it's the linker that catches the lack of definition - not the compiler, since the definition could easily appear in a different translation unit. The canonical example being trying to pass a <code>static const int</code> which lacks a definition into a call to <code>std::max()</code> or <code>std::min()</code>. </p>\n", "OwnerUserId": "2069064", "PostTypeId": "2", "Id": "38437714", "Score": "5", "CreationDate": "2016-07-18T13:16:16.570", "LastActivityDate": "2016-07-18T13:16:16.570"}, "38437842": {"ParentId": "38437533", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Your example is working because the address is never used, so the linker never searches for the symbol.</p>\n<p>If you try to print <code>bar</code>, the linking fails.</p>\n<pre><code>void foo(int);\nauto bar = &amp;foo;\ncout &lt;&lt; (void*) bar;\n</code></pre>\n<p><a href=\"http://ideone.com/97Eo6Z\" rel=\"nofollow\">http://ideone.com/97Eo6Z</a></p>\n", "OwnerUserId": "5293824", "LastEditorUserId": "5293824", "LastEditDate": "2016-07-18T13:27:22.320", "Id": "38437842", "Score": "1", "CreationDate": "2016-07-18T13:21:45.433", "LastActivityDate": "2016-07-18T13:27:22.320"}, "38437533": {"CommentCount": "3", "ViewCount": "94", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2016-07-18T13:08:02.827", "LastActivityDate": "2016-07-18T13:53:20.200", "Title": "Why is Taking the Address of a Function That is Declared Only Working?", "AcceptedAnswerId": "38437714", "LastEditDate": "2017-05-23T12:32:42.507", "Id": "38437533", "Score": "0", "Body": "<p>I've asked a <a href=\"https://stackoverflow.com/q/38402133/2642059\">question here</a> about whether taking the address of a function forces the compilation of said function specifically with regard to Substitution-Failure-Is-Not-An-Error. The most direct answer to this can be found <a href=\"http://en.cppreference.com/w/cpp/language/definition\" rel=\"nofollow noreferrer\">here</a>:</p>\n<blockquote>\n<p id=\"so_38437533_38437533_0\">Informally, an object is odr-used if its address is taken, or a reference is bound to it, and a function is odr-used if a function call to it is made or its address is taken. If an object or a function is odr-used, its definition must exist somewhere in the program; a violation of that is a link-time error.</p>\n</blockquote>\n<p>But all the compilers I've tested show this as perfectly doable:</p>\n<pre><code>void foo(int);\nauto bar = &amp;foo;\n</code></pre>\n<p><a href=\"http://ideone.com/GFPzKb\" rel=\"nofollow noreferrer\"><kbd>Live Example</kbd></a></p>\n<p>This isn't legal is it? But if not, why is it building?</p>\n", "Tags": "<c++><function-pointers><function-declaration><addressof><function-definition>", "OwnerUserId": "2642059", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_38437533_38437714_0": {"section_id": 7041, "quality": 1.0, "length": 12}}, "n3337": {"so_38437533_38437714_0": {"section_id": 6786, "quality": 1.0, "length": 12}}, "n4659": {"so_38437533_38437714_0": {"section_id": 8538, "quality": 1.0, "length": 12}}}});