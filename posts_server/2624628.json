post_cb({"2624949": {"ParentId": "2624628", "CommentCount": "0", "Body": "<p>The latest C++ spec draft says this is ok, as long as the class qualifies as a <em>standard layout class</em>, which just requires</p>\n<ul>\n<li>has no non-static data members of type non-standard-layout class (or array of such types) or reference,</li>\n<li>has no virtual functions (10.3) and no virtual base classes (10.1),</li>\n<li>has the same access control (Clause 11) for all non-static data members,</li>\n<li>has no non-standard-layout base classes,</li>\n<li>either has no non-static data members in the most-derived class and at most one base class with\nnon-static data members, or has no base classes with non-static data members, and</li>\n<li>has no base classes of the same type as the first non-static data member.</li>\n</ul>\n<p>Depending on the definition of <code>MyContained</code>, your class might or might not be <em>standard layout</em></p>\n<p>Note that POD-classes are the intersection of <em>standard layout</em> and <em>trivially copyable</em> classes</p>\n", "OwnerUserId": "16406", "PostTypeId": "2", "Id": "2624949", "Score": "2", "CreationDate": "2010-04-12T19:55:51.020", "LastActivityDate": "2010-04-12T19:55:51.020"}, "2624628": {"CommentCount": "4", "ViewCount": "286", "CreationDate": "2010-04-12T19:05:24.607", "LastActivityDate": "2010-04-12T19:55:51.020", "Title": "In a class with no virtual methods or superclass, is it safe to assume (address of first member variable) == this?", "AcceptedAnswerId": "2624947", "PostTypeId": "1", "Id": "2624628", "Score": "4", "Body": "<p>I made a private API that assumes that the address of the first member-object in the class will be the same as the class's this-pointer... that way the member-object can trivially derive a pointer to the object that it is a member of, without having to store a pointer explicitly.</p>\n<p>Given that I am willing to make sure that the container class won't inherit from any superclass, won't have any virtual methods, and that the member-object that does this trick will be the first member object declared, will that assumption hold valid for any C++ compiler, or do I need to use the offsetof() operator (or similar) to guarantee correctness?</p>\n<p>To put it another way, the code below does what I expect under g++, but will it work everywhere?</p>\n<pre><code>class MyContainer\n{\npublic:\n   MyContainer() {}\n   ~MyContainer() {}  // non-virtual dtor\n\nprivate:\n   class MyContained\n   {\n   public:\n      MyContained() {}\n      ~MyContained() {}\n\n      // Given that the only place Contained objects are declared is m_contained\n      // (below), will this work as expected on any C++ compiler?\n      MyContainer * GetPointerToMyContainer()\n      {\n         return reinterpret_cast&lt;MyContainer *&gt;(this);\n      }\n   };\n\n   MyContained m_contained;  // MUST BE FIRST MEMBER ITEM DECLARED IN MyContainer\n   int m_foo;                // other member items may be declared after m_contained\n   float m_bar;\n};\n</code></pre>\n", "Tags": "<c++><casting><pointers>", "OwnerUserId": "131930", "AnswerCount": "3"}, "2624677": {"ParentId": "2624628", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>It is not guaranteed for non-POD types. C++ Standard 9.2/12:</p>\n<blockquote>\n<p id=\"so_2624628_2624677_0\">Nonstatic data members of a\n  (non-union) class declared without an\n  intervening access-specifier are allo-\n  cated so that later members have\n  higher addresses within a class\n  object.  The order of allocation of\n  nonstatic data members separated by an\n  access-specifier is unspecified\n  (11.1).  Implementation alignment\n  require- ments might cause two\n  adjacent members not to be allocated\n  immediately after each other; so might\n  requirements for space for managing\n  virtual functions (10.3) and virtual\n  base classes (10.1).</p>\n</blockquote>\n<p>In your case you have non-POD type since it contains custom destructor. More about POD types you could read <a href=\"https://stackoverflow.com/questions/146452/what-are-pod-types-in-c\">here</a>.</p>\n", "OwnerUserId": "123111", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T10:33:16.907", "Id": "2624677", "Score": "3", "CreationDate": "2010-04-12T19:13:44.347", "LastActivityDate": "2010-04-12T19:27:20.680"}, "2624947": {"ParentId": "2624628", "CommentCount": "0", "Body": "<p>It seems the current standard guarantees this only for POD types.</p>\n<p>9.2.17</p>\n<blockquote>\n<p id=\"so_2624628_2624947_0\">A pointer to a POD-struct object,\n  suitably converted, points to its\n  initial member (or if that member is a\n  bit-field, then to the unit in which\n  it resides) and vice versa. [Note:\n  There might therefore be unnamed\n  padding within a POD-struct object,\n  but not at its beginning, as necessary\n  to achieve appropriate alignment. ]</p>\n</blockquote>\n<p>However, the C++0x standard seems to extend this guarantee to \"standard-layout struct object\"</p>\n<blockquote>\n<p id=\"so_2624628_2624947_1\">A standard-layout class is a class\n  that:</p>\n<p id=\"so_2624628_2624947_2\">\u2014 has no non-static data members of\n  type non-standard-layout class (or\n  array of such types) or reference,</p>\n<p id=\"so_2624628_2624947_3\">\u2014 has no virtual functions (10.3) and\n  no virtual base classes (10.1),</p>\n<p id=\"so_2624628_2624947_4\">\u2014 has the same access control (Clause\n  11) for all non-static data members,</p>\n<p id=\"so_2624628_2624947_5\">\u2014 has no non-standard-layout base\n  classes,</p>\n<p id=\"so_2624628_2624947_6\">\u2014 either has no non-static data\n  members in the most-derived class and\n  at most one base class with non-static\n  data members, or has no base classes\n  with non-static data members, and </p>\n<p id=\"so_2624628_2624947_7\">\u2014 has no base classes of the same type\n  as the first non-static data member.</p>\n<p id=\"so_2624628_2624947_8\">A standard-layout struct is a\n  standard-layout class defined with the\n  class-key struct or the class-key\n  class.</p>\n</blockquote>\n<p>It is probably likely that the assumption holds in practice (and the former didn't just have these distinctions, though this could have been the intention)?</p>\n", "OwnerUserId": "155693", "PostTypeId": "2", "Id": "2624947", "Score": "5", "CreationDate": "2010-04-12T19:55:44.160", "LastActivityDate": "2010-04-12T19:55:44.160"}, "bq_ids": {"n4140": {"so_2624628_2624677_0": {"section_id": 5873, "quality": 0.7547169811320755, "length": 40}, "so_2624628_2624947_7": {"section_id": 5851, "quality": 1.0, "length": 8}, "so_2624628_2624947_2": {"section_id": 5851, "quality": 1.0, "length": 10}, "so_2624628_2624947_8": {"section_id": 5852, "quality": 1.0, "length": 9}, "so_2624628_2624947_6": {"section_id": 5851, "quality": 0.9444444444444444, "length": 17}, "so_2624628_2624947_4": {"section_id": 5851, "quality": 1.0, "length": 8}, "so_2624628_2624947_3": {"section_id": 369, "quality": 0.7142857142857143, "length": 5}, "so_2624628_2624947_0": {"section_id": 5879, "quality": 0.53125, "length": 17}}, "n3337": {"so_2624628_2624677_0": {"section_id": 5644, "quality": 0.7547169811320755, "length": 40}, "so_2624628_2624947_7": {"section_id": 5621, "quality": 1.0, "length": 8}, "so_2624628_2624947_2": {"section_id": 5621, "quality": 1.0, "length": 10}, "so_2624628_2624947_8": {"section_id": 5622, "quality": 1.0, "length": 9}, "so_2624628_2624947_6": {"section_id": 5621, "quality": 0.9444444444444444, "length": 17}, "so_2624628_2624947_4": {"section_id": 5621, "quality": 1.0, "length": 8}, "so_2624628_2624947_3": {"section_id": 359, "quality": 0.7142857142857143, "length": 5}, "so_2624628_2624947_0": {"section_id": 5650, "quality": 0.90625, "length": 29}}, "n4659": {"so_2624628_2624677_0": {"section_id": 7356, "quality": 0.7547169811320755, "length": 40}, "so_2624628_2624947_7": {"section_id": 7330, "quality": 1.0, "length": 8}, "so_2624628_2624947_4": {"section_id": 7330, "quality": 1.0, "length": 8}, "so_2624628_2624947_8": {"section_id": 7331, "quality": 0.8888888888888888, "length": 8}, "so_2624628_2624947_6": {"section_id": 7330, "quality": 0.8333333333333334, "length": 15}, "so_2624628_2624947_2": {"section_id": 7330, "quality": 1.0, "length": 10}, "so_2624628_2624947_3": {"section_id": 383, "quality": 0.7142857142857143, "length": 5}, "so_2624628_2624947_0": {"section_id": 7363, "quality": 0.53125, "length": 17}}}});