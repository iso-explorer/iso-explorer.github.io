post_cb({"33111934": {"Id": "33111934", "PostTypeId": "2", "Body": "<p>Modify the code to the following:</p>\n<pre><code>struct foo\n{\n    foo() = default;\n    foo(const foo&amp;) = delete;\n    foo(foo&amp;&amp;) = default;\n};\n\nint main()\n{\n    throw foo();\n}\n</code></pre>\n<p>Read <a href=\"http://en.cppreference.com/w/cpp/language/move_constructor\">this</a>, the section \"Implicitly-declared move constructor\". </p>\n", "LastActivityDate": "2015-10-13T20:22:57.600", "Score": "6", "CreationDate": "2015-10-13T20:22:57.600", "ParentId": "33111800", "CommentCount": "0", "OwnerUserId": "5380314"}, "33111880": {"Id": "33111880", "PostTypeId": "2", "Body": "<p>Because    <code>foo(foo&amp;&amp; );</code> is missing. By <code>delete</code>ing the copy constructor you've supressed move constructor as well.</p>\n", "LastEditorUserId": "5245033", "LastActivityDate": "2015-10-13T20:25:28.790", "Score": "4", "CreationDate": "2015-10-13T20:19:23.450", "ParentId": "33111800", "CommentCount": "7", "LastEditDate": "2015-10-13T20:25:28.790", "OwnerUserId": "5245033"}, "33111887": {"Id": "33111887", "PostTypeId": "2", "Body": "<p>It can't be move constructed because the type has no move constructor. A deleted copy constructor suppresses the implicit move constructor.</p>\n", "LastActivityDate": "2015-10-13T20:19:48.050", "Score": "9", "CreationDate": "2015-10-13T20:19:48.050", "ParentId": "33111800", "CommentCount": "0", "OwnerUserId": "981959"}, "33112112": {"Id": "33112112", "PostTypeId": "2", "Body": "<p>The applicable phrasing from the standard (\u00a7[class.copy]/9) looks roughly like this (well, exactly like this, as of N4296):</p>\n<blockquote>\n<p id=\"so_33111800_33112112_0\">If the definition of a class X does not explicitly declare a move constructor, one will be implicitly declared as defaulted if and only if:</p>\n<ul>\n<li>X does not have a user-declared copy ctor,</li>\n</ul>\n</blockquote>\n<p>[...]</p>\n<p>This applies because defining the copy ctor as deleted still means you've declared the copy ctor.</p>\n", "LastActivityDate": "2015-10-13T20:33:22.470", "Score": "3", "CreationDate": "2015-10-13T20:33:22.470", "ParentId": "33111800", "CommentCount": "0", "OwnerUserId": "179910"}, "33111800": {"ViewCount": "244", "Body": "<p>Exceptions use the statical type of an object to <em>copy-initialize</em> the thrown object. For instance:</p>\n<pre><code>struct foo\n{\n    foo() = default;\n    foo(const foo&amp;) = delete;\n};\n\nint main()\n{\n    throw foo();\n}\n</code></pre>\n<p><code>Clang++ --std=c++14</code> complains that the explicitly-deleted copy constructor can't be used. Why can't it be move-initialized instead?</p>\n", "AcceptedAnswerId": "33111887", "Title": "Why must thrown objects be copy-initialized?", "CreationDate": "2015-10-13T20:14:17.170", "Id": "33111800", "CommentCount": "2", "PostTypeId": "1", "LastActivityDate": "2015-10-13T20:33:22.470", "Score": "8", "OwnerUserId": "251153", "Tags": "<c++><exception><c++14>", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_33111800_33112112_0": {"length": 12, "quality": 1.0, "section_id": 458}}, "n3337": {"so_33111800_33112112_0": {"length": 12, "quality": 1.0, "section_id": 449}}, "n4659": {"so_33111800_33112112_0": {"length": 12, "quality": 1.0, "section_id": 481}}}});