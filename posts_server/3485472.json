post_cb({"bq_ids": {"n4140": {"so_3485472_24560240_0": {"length": 8, "quality": 0.6666666666666666, "section_id": 7141}}, "n3337": {"so_3485472_24560240_0": {"length": 8, "quality": 0.6666666666666666, "section_id": 6885}}, "n4659": {"so_3485472_24560240_0": {"length": 8, "quality": 0.6666666666666666, "section_id": 8642}}}, "24560240": {"Id": "24560240", "PostTypeId": "2", "Body": "<p>Yes, there are restrictions. For example, you cannot use an anonymous enum as a template argument according to C++03 <code>14.3.1[temp.arg.type]/2</code></p>\n<blockquote>\n<p id=\"so_3485472_24560240_0\">A local type, a type with no linkage, an unnamed type or a type compounded from any of these types shall not be used as a template-argument for a template type-parameter.</p>\n</blockquote>\n<p>So the following code is not valid in C++03:</p>\n<pre><code>template &lt;typename T&gt;\nvoid f(T) {}\n\nenum {A};\n\nint main() {\n  f(A);\n}\n</code></pre>\n<p>It is valid in C++11 though.</p>\n", "LastActivityDate": "2014-07-03T17:49:10.213", "CommentCount": "0", "CreationDate": "2014-07-03T17:49:10.213", "ParentId": "3485472", "Score": "7", "OwnerUserId": "471164"}, "3487847": {"Id": "3487847", "PostTypeId": "2", "Body": "<p>Referring to the original question:</p>\n<blockquote>\n<p id=\"so_3485472_3487847_0\">are there any restrictions / problems using an enum as template (type) argument in C++?</p>\n</blockquote>\n<p>I didn't find any - and I don't think there are any. It might turn out to be a bad idea because this technique it is not used that often, so there might be a few (more) compiler bugs relating to this, just as Potatoswatter said.<br>\nConsider the following example:</br></p>\n<pre><code>enum MyEnum : int\n{\n    A, B, C, D\n};\n\ntemplate &lt;typename _t&gt; class MyTemplate\n{\npublic:\n    void print()\n    {\n        cout &lt;&lt; \"not using any specialisation\" &lt;&lt; endl;\n    }\n};\n    template &lt;&gt; class MyTemplate &lt;MyEnum&gt;\n    {\n    public:\n        void print()\n        {\n            cout &lt;&lt; \"MyEnum specialisation\" &lt;&lt; endl;\n        }\n    };\n    template&lt;&gt; class MyTemplate &lt;int&gt;\n    {\n    public:\n        void print()\n        {\n            cout &lt;&lt; \"int specialisation\" &lt;&lt; endl;\n        }\n    };\n\ntemplate &lt;typename _t&gt; void print(_t param)\n{\n    MyTemplate&lt;_t&gt; m;\n    m.print();\n}\n\n\nint main()\n{\n    print(A);\n    print(5);\n\n    return 0;\n}\n</code></pre>\n<p>The output is:</p>\n<blockquote>\n<p id=\"so_3485472_3487847_1\">MyEnum specialisation<br>\n  int specialisation</br></p>\n</blockquote>\n<p>For these simple examples, <strong>everything works fine and as expected</strong> and the enum works perfectly as any other type as template type argument (= I don't see any reason for problems).<br>\n<br/>\nOriginally, I introduced the example in the question to show what I meant with that question (enum as template type argument, show possible usages as member or method argument type and so on). To provide a bit of background, i.e. <strong>why</strong> I asked that question (imagine I asked \"are there any problems with int\"), I mentioned these strange problems compiling my actual project.<br>\nI'm sorry I could not extract a snippet of it that is complete in itself and reproducing the errors, the least I could get were 2k lines of code splitted into 4 files, where a \"syntax error : 'public'\" and some other syntax error were raised when I compiled the project, and they appeared / disappeared under certain circumstances, when deleting a comment or re-building (= deleting the intermediate files). Unfortunately, rebuilding does not help with the original project, where I had to replace a specialisation from an enum type to int.<br>\n<br/></br></br></br></p>\n<p>So, thanks everyone for your hints and tips. The underlying problem seems to me to be a compiler bug, what makes the question a bit pointless, as the answer seems to be just <em>\"no - there are no restrictions using an enum as template type argument\"</em>. Sorry for the inconvenience.</p>\n", "LastActivityDate": "2010-08-15T14:47:33.170", "CommentCount": "0", "CreationDate": "2010-08-15T14:47:33.170", "ParentId": "3485472", "Score": "4", "OwnerUserId": "420683"}, "3485472": {"ViewCount": "23732", "Body": "<p>are there any restrictions / problems using an enum as template (type) argument in C++?</p>\n<p>Example:</p>\n<pre><code>enum MyEnum\n{\n    A, B, C, D, E\n};\n\ntemplate &lt;typename _t&gt;\nclass MyTemplate\n{\npublic:\n   _t value;\n\n   void func(const _t&amp; param) { /* .... */ }\n};\n\n// ....\n\nMyTemplate&lt;MyEnum&gt; MyInstance;\n</code></pre>\n<hr>\n<p>My actual problem using MSVC++ via VS 2008 (SP1) on Win32/x86 are several compilation errors (= errors reported by the compiler) in association with classes using enums as template arguments. As my project unfortunately has become a bit complex (you can consider that as a design error :P), the template classes raising these errors are derived, nested and even specialised on a class with enum template parameter.  </p>\n<p>Trying to build, the compiler reports many wrong/useless errors such as \"C2059: syntax error: 'public'\" in lines where there is only a comment. Many of them I could fix by replacing in methods similar to the one in the example the const _t&amp; param by _t (i.e. copying the parameter), but neither could I fix all of these errors nor do I have a clue why this \"helps\". **I know, the simple example above compiles w/o errors.</p>\n<p>Using int instead of enum, my project compiles w/o errors.  </p>\n<p>Thanks in advance for any hint or tip!</p>\n<hr>\n<p><strong>Edit</strong>:</p>\n<p>After all, I seriously consider this as a compiler bug. When I tried to reproduce the errors with simplified code, I got them only in 50 % of all \"builds\", not very deterministic:<br>\nE.g. tried to compile, and it reported these errors. Rebuild - no change. Deleted a comment, build - no change. Rebuild - and then: no errors, compiles fine.</br></p>\n<p>I've already met a few compiler bugs (2 or 3 I guess within 20k lines of code), but this one seems to me very strange.<br>\nAny suggestions how to figure out if it <strong>is</strong> the compiler?  </br></p>\n</hr></hr>", "AcceptedAnswerId": "3487847", "Title": "Using enum as template type argument in C++", "CreationDate": "2010-08-14T23:04:42.000", "Id": "3485472", "CommentCount": "7", "FavoriteCount": "3", "PostTypeId": "1", "LastEditDate": "2017-08-05T10:38:54.880", "LastEditorUserId": "608639", "LastActivityDate": "2017-08-05T10:38:54.880", "Score": "15", "OwnerUserId": "420683", "Tags": "<c++><templates><enums><visual-c++-2008>", "AnswerCount": "3"}, "3485754": {"Id": "3485754", "PostTypeId": "2", "Body": "<p>MSVC handles enum (value) template parameters strangely. Enums are promoted to <code>int</code> improperly sometimes and the operators aren't defined properly. It seems that they don't really test the template engine with <code>enum</code> types.</p>\n<p>Proving it's a compiler bug is simple: put valid code in and observe whether it successfully compiles. <s>Your example is obviously compliant, so the problem (or the mistake, anyway) is theirs.</s></p>\n<p><strong>Edit</strong>: on closer inspection you say that the example does <em>not</em> reproduce the bug. Neither we nor anyone else can help you until you produce an example that does.</p>\n", "LastActivityDate": "2010-08-15T00:46:48.853", "CommentCount": "2", "CreationDate": "2010-08-15T00:46:48.853", "ParentId": "3485472", "Score": "0", "OwnerUserId": "153285"}});