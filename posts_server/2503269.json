post_cb({"2503288": {"Id": "2503288", "PostTypeId": "2", "Body": "<p>The C++ language definition requres that the code-point values of the numerals be consecutive. Therefore, ASCII Arithmetic is perfectly acceptable.</p>\n", "LastActivityDate": "2010-03-23T20:18:19.497", "CommentCount": "0", "CreationDate": "2010-03-23T20:18:19.497", "ParentId": "2503269", "Score": "5", "OwnerUserId": "10174"}, "2503269": {"ViewCount": "396", "Body": "<p>I've got a string value of the form <code>10123X123456</code> where <code>10</code> is the year, <code>123</code> is the day number within the year, and the rest is unique system-generated stuff. Under certain circumstances, I need to add 400 to the day number, so that the number above, for example, would become <code>10523X123456</code>.</p>\n<p>My first idea was to substring those three characters, convert them to an integer, add 400 to it, convert them back to a string and then call <code>replace</code> on the original string. That works.</p>\n<p>But then it occurred to me that the only character I actually need to change is the third one, and that the original value would always be 0-3, so there would never be any \"carrying\" problems. It further occurred to me that the ASCII code points for the numbers are consecutive, so adding the number 4 to the character \"0\", for example, would result in \"4\", and so forth. So that's what I ended up doing.</p>\n<p>My question is, is there any reason that won't always work? I generally avoid \"ASCII arithmetic\" on the grounds that it's not cross-platform or internationalization friendly. But it seems reasonable to assume that the code points for numbers will always be sequential, i.e., \"4\" will always be 1 more than \"3\". Anybody see any problem with this reasoning?</p>\n<p>Here's the code.</p>\n<pre><code>string input = \"10123X123456\";\ninput[2] += 4;\n//Output should be 10523X123456\n</code></pre>\n", "AcceptedAnswerId": "2503303", "Title": "Is this an acceptable use of \"ASCII arithmetic\"?", "CreationDate": "2010-03-23T20:15:29.673", "Id": "2503269", "CommentCount": "5", "PostTypeId": "1", "LastActivityDate": "2010-03-23T21:55:16.463", "Score": "4", "OwnerUserId": "44586", "Tags": "<c++>", "AnswerCount": "5"}, "2503296": {"Id": "2503296", "PostTypeId": "2", "Body": "<p>It sounds like altering the string as you describe is easier than parsing the number out in the first place. So if your algorithm works (and it certainly does what you describe), I wouldn't consider it premature optimization.</p>\n<p>Of course, after you add 400, it's no longer a day number, so you couldn't apply this process recursively.</p>\n<p>And, <code>&lt;</code>obligatory Year 2100 warning<code>&gt;</code>.</p>\n", "LastActivityDate": "2010-03-23T20:19:30.533", "CommentCount": "0", "CreationDate": "2010-03-23T20:19:30.533", "ParentId": "2503269", "Score": "1", "OwnerUserId": "153285"}, "2503912": {"Id": "2503912", "PostTypeId": "2", "Body": "<p>Very long time ago I saw some x86 processor <a href=\"http://en.wikipedia.org/wiki/Intel_BCD_opcode\" rel=\"nofollow noreferrer\">instructions for ASCII and BCD</a>.\nThose are AAA (ASCII Adjust for Addition), AAS (subtraction), AAM (mult), AAD (div).<br/>\nBut even if you are not sure about target platform you can refer to specification of characters set you are using and I guess you'll find that first 127 characters of ASCII is always have the same meaning for all characters set (for unicode that is first characters page).</p>\n", "LastActivityDate": "2010-03-23T21:55:16.463", "CommentCount": "0", "CreationDate": "2010-03-23T21:55:16.463", "ParentId": "2503269", "Score": "1", "OwnerUserId": "230744"}, "bq_ids": {"n4140": {"so_2503269_2503303_0": {"length": 19, "quality": 1.0, "section_id": 5316}}, "n3337": {"so_2503269_2503303_0": {"length": 19, "quality": 1.0, "section_id": 5113}}, "n4659": {"so_2503269_2503303_0": {"length": 19, "quality": 1.0, "section_id": 6740}}}, "2503299": {"Id": "2503299", "PostTypeId": "2", "Body": "<p>Always keep in mind that if this is generated by something that you do not entirely control (such as users and third-party system), that something can and will go wrong with it. (Check out Murphy's laws)</p>\n<p>So I think you should at least put on some validations before doing so.</p>\n", "LastActivityDate": "2010-03-23T20:20:04.317", "CommentCount": "1", "CreationDate": "2010-03-23T20:20:04.317", "ParentId": "2503269", "Score": "3", "OwnerUserId": "164377"}, "2503303": {"Id": "2503303", "PostTypeId": "2", "Body": "<p>From the C++ standard, section 2.2.3:</p>\n<blockquote>\n<p id=\"so_2503269_2503303_0\">In both the source and execution basic character sets, the value of each character after 0 in the\n  above list of decimal digits shall be one greater than the value of the previous.</p>\n</blockquote>\n<p>So yes, if you're guaranteed to never need a carry, you're good to go.</p>\n", "LastActivityDate": "2010-03-23T20:20:26.000", "CommentCount": "1", "CreationDate": "2010-03-23T20:20:26.000", "ParentId": "2503269", "Score": "9", "OwnerUserId": "46821"}});