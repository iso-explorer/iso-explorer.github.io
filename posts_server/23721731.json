post_cb({"bq_ids": {"n4140": {"so_23721731_23721731_0": {"length": 10, "quality": 0.9090909090909091, "section_id": 7047}, "so_23721731_23721731_1": {"length": 12, "quality": 0.7058823529411765, "section_id": 7059}}, "n3337": {"so_23721731_23721731_0": {"length": 10, "quality": 0.9090909090909091, "section_id": 6792}, "so_23721731_23721731_1": {"length": 12, "quality": 0.7058823529411765, "section_id": 6803}}, "n4659": {"so_23721731_23721731_0": {"length": 10, "quality": 0.9090909090909091, "section_id": 8544}, "so_23721731_23721731_1": {"length": 12, "quality": 0.7058823529411765, "section_id": 8556}}}, "23721731": {"ViewCount": "93", "Body": "<p>I'm considering N3797 working draft. There is a quote from 3.3.1/4</p>\n<blockquote>\n<p id=\"so_23721731_23721731_0\">friend declarations (11.3) may introduce a (possibly not visible) name\n  into an enclosing namespace</p>\n</blockquote>\n<p>And further in 3.3.2/11 I found</p>\n<blockquote>\n<p id=\"so_23721731_23721731_1\">Friend declaration refer to function or classes that are member of the\n  nearest enclosing namespace, but they don't introduce new name into\n  that namespace.</p>\n</blockquote>\n<p>So the name declared by friend declaration is not visible or doesn't introduce at all?</p>\n", "AcceptedAnswerId": "23721881", "Title": "Name which introduced by friend declaration", "CreationDate": "2014-05-18T12:10:40.590", "Id": "23721731", "CommentCount": "3", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2014-05-18T12:35:26.920", "Score": "3", "OwnerUserId": "2786156", "Tags": "<c++><friend>", "AnswerCount": "1"}, "23721881": {"Id": "23721881", "PostTypeId": "2", "Body": "<p>It can be found by Argument Dependent Lookup, but only that way.</p>\n<p>E.g. you can implement a comparison operator that way:</p>\n<pre><code>struct Point\n{\n    int x, y;\n\n    friend\n    auto operator&lt;( Point const a, Point const b )\n        -&gt; bool\n    {\n        // compare and return true or false\n    }\n};\n</code></pre>\n<p>The name (here <code>operator&lt;</code>) is not visible in the enclosing scope, but is found when the function is invoked with arguments of type <code>Point</code>.</p>\n<hr>\n<p>The current rules are designed to be backward-compatible with the so called <strong><a href=\"http://en.wikipedia.org/wiki/Barton%E2%80%93Nackman_trick\" rel=\"nofollow\">Barton-Nackman trick</a></strong>.</p>\n<p>Quoting the Wikpedia article on that:</p>\n<blockquote>\n<p id=\"so_23721731_23721881_0\">\u201cWhen investigating the possibility of removing friend name injection from the C++ programming language, Barton and Nackman\u2019s idiom was found to be the only reasonable use of that language rule. Eventually, the rules for argument-dependent lookup were adjusted to replace friend name injection by a less drastic mechanism, described above, that maintained the validity of Barton and Nackman\u2019s technique\u201d</p>\n</blockquote>\n<p>where <strong>\u201cfriend name injection\u201d</strong> refers to earlier rules where the name did become visible in the enclosing scope.</p>\n</hr>", "LastEditorUserId": "464581", "LastActivityDate": "2014-05-18T12:35:26.920", "Score": "4", "CreationDate": "2014-05-18T12:28:24.293", "ParentId": "23721731", "CommentCount": "7", "LastEditDate": "2014-05-18T12:35:26.920", "OwnerUserId": "464581"}});