post_cb({"43016708": {"ParentId": "13889467", "LastEditDate": "2017-03-26T15:00:22.397", "CommentCount": "3", "CreationDate": "2017-03-25T13:06:29.707", "Score": "4", "LastEditorUserId": "1016716", "PostTypeId": "2", "Id": "43016708", "OwnerUserId": "3022583", "Body": "<p><strong>Since this post is a bit old I wanted to share the following:</strong></p>\n<hr>\n<h2>Looking at code:</h2>\n<pre><code>Using X.h   // Compatible with C language standard\n---------------\n#include &lt;X.h&gt;\n\nint main() {\n    // Invoke X's corresponding function\n    return 0;\n}\n\nUsing X    // Not compatible with C language standard\n--------------\n#include &lt;X&gt;\n\nint main() {\n    // Invoke X's corresponding function\n    return 0;\n}\n</code></pre>\n<h2>They both compile and execute ok!</h2>\n<hr>\n<h2>Which one is better in C++?</h2>\n<h2>Regarding <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3242.pdf\" rel=\"noreferrer\">C++11</a>'s and <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/n4660.pdf\" rel=\"noreferrer\">C++17</a>'s specification:</h2>\n<blockquote>\n<p id=\"so_13889467_43016708_0\"><strong>C.5.1</strong> (section from C++17 document)<br>\n<strong>Modifications to headers [diff.mods.to.headers]</strong></br></p>\n<ol>\n<li><p id=\"so_13889467_43016708_1\">For compatibility with the C standard library, the C++ standard library provides the C headers enumerated in D.5, but their use is\n  deprecated in C++.</p></li>\n<li><p id=\"so_13889467_43016708_2\">There are no C++ headers for the C headers <code>&lt;stdatomic.h&gt;</code>, <code>&lt;stdnoreturn.h&gt;</code>, and <code>&lt;threads.h&gt;</code>, nor are the C headers themselves\n  part of C++.</p></li>\n<li><p id=\"so_13889467_43016708_3\">The C++ headers <code>&lt;ccomplex&gt;</code> (D.4.1) and <code>&lt;ctgmath&gt;</code> (D.4.4), as well as their corresponding C headers <code>&lt;complex.h&gt;</code> and <code>&lt;tgmath.h&gt;</code>, do not\n  contain any of the content from the C standard library and instead\n  merely include other headers from the C++ standard library.</p></li>\n</ol>\n</blockquote>\n<hr>\n<blockquote>\n<p id=\"so_13889467_43016708_4\"><strong>D.5</strong>\n<strong>C standard library headers [depr.c.headers]</strong> \n  1. For compatibility with the C standard library, the C++ standard  library provides the C headers shown in Table 141.</p>\n</blockquote>\n<p><a href=\"https://i.stack.imgur.com/WaaPa.png\" rel=\"noreferrer\"><img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/WaaPa.png\"/></a></p>\n<p>Both <strong>C++11</strong> and <strong>C++17</strong> standard specifications documents state the use of <code>&lt;X.h&gt;</code> remains for compatibility with the C standard, although their use is regarded as <strong>deprecated</strong>.</p>\n<hr>\n<h2>Regarding <a href=\"http://open-std.org/JTC1/SC22/WG21/docs/papers/2017/p0619r0.html#3.5\" rel=\"noreferrer\">C++ 20 standard proposal</a></h2>\n<p>They are reviewing <strong>\"undeprecating\"</strong> the use of the C library headers in C++20. <code>&lt;X.h&gt;</code> appear highlighted in green. C++11 and C++17 deprecation, as of now, is stated as a <strong>\"weak recommendation\"</strong> and a \"tweak\" for keeping the \"<strong>C standard library headers (c.headers)</strong>\" is displayed below:</p>\n<blockquote>\n<p id=\"so_13889467_43016708_5\"><strong>\"The basic C library headers are an essential compatibility feature, and not going anywhere anytime soon.\"</strong> (from <a href=\"http://open-std.org/JTC1/SC22/WG21/docs/papers/2017/p0619r0.html#3.5\" rel=\"noreferrer\">C++ 20 review document</a>)</p>\n</blockquote>\n<hr>\n<blockquote>\n<p id=\"so_13889467_43016708_6\"><strong>D.5 C standard</strong><br>\n<strong>library headers [depr.c.headers]</strong></br></p>\n<p id=\"so_13889467_43016708_7\"><strong>Weak recommendation:</strong> In addition to the above, also remove the\n  corresponding C headers from the C++ standard, much as we have no\n  corresponding <code>&lt;stdatomic.h&gt;</code>, <code>&lt;stdnoreturn.h&gt;</code>, or <code>&lt;threads.h&gt;</code>, headers.\n  As above, but with the following tweaks:\n  20.5.5.2.1 C standard library headers [c.headers]</p>\n<p id=\"so_13889467_43016708_8\">For compatibility with the C standard library, the C++ standard\n  library provides the C headers shown in Table 141. Table 141 \u2014 C\n  headers</p>\n</blockquote>\n<pre><code> &lt;assert.h&gt;  &lt;inttypes.h&gt;   &lt;signal.h&gt;      &lt;stdio.h&gt;   &lt;wchar.h&gt;\n &lt;complex.h&gt; &lt;iso646.h&gt;     &lt;stdalign.h&gt;    &lt;stdlib.h&gt;  &lt;wctype.h&gt;\n &lt;ctype.h&gt;   &lt;limits.h&gt;     &lt;stdarg.h&gt;      &lt;string.h&gt;  \n &lt;errno.h&gt;   &lt;locale.h&gt;     &lt;stdbool.h&gt;     &lt;tgmath.h&gt;\n &lt;fenv.h&gt;    &lt;math.h&gt;       &lt;stddef.h&gt;      &lt;time.h&gt;\n &lt;float.h&gt;   &lt;setjmp.h&gt;     &lt;stdint.h&gt;      &lt;uchar.h&gt;\n</code></pre>\n<blockquote>\n<p id=\"so_13889467_43016708_9\">The header <code>&lt;complex.h&gt;</code>\n  behaves as if it simply includes the header . \n  The header <code>&lt;tgmath.h&gt;</code> behaves as if it simply includes the headers <code>&lt;complex&gt;</code> and <code>&lt;cmath&gt;</code>.</p>\n</blockquote>\n<hr>\n<blockquote>\n<p id=\"so_13889467_43016708_10\"><a href=\"http://www.stroustrup.com/compat_short.pdf\" rel=\"noreferrer\">Bjarne Stroustrup</a> recommends <strong>maximising inter-operability</strong> between\n  the <strong>C and C++ languages</strong>, by <strong>reducing imcompatibilities</strong> as much as\n  possible. Others argue otherwise, as it complicates things.</p>\n</blockquote>\n<p>So, it seems <code>&lt;X.h&gt;</code> aren't <strong>going anywhere</strong>. Ultimately, you can use both.  Personally, I would make the decision of which one I would use boil  down to having your code <strong>backwards compatible with C code</strong> or not.</p>\n</hr></hr></hr></hr></hr></hr>", "LastActivityDate": "2017-03-26T15:00:22.397"}, "13889467": {"CommentCount": "0", "ViewCount": "6664", "CreationDate": "2012-12-15T05:00:29.860", "LastActivityDate": "2017-03-26T15:00:22.397", "PostTypeId": "1", "AcceptedAnswerId": "13889472", "FavoriteCount": "21", "Title": "Should I include <xxxx.h> or <cxxxx> in C++ programs?", "Id": "13889467", "Score": "41", "Body": "<ul>\n<li>What should I include in C++ programs, <code>stdio.h</code> or <code>cstdio</code>? and Why?       </li>\n<li>Why two header files which provide the same functionality?     </li>\n<li>What does the standard say regarding this?              </li>\n<li>How should I go about including other such headers, Is there a base rule that I should follow?</li>\n</ul>\n", "Tags": "<c++><include><c++-faq>", "OwnerUserId": "452307", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_13889467_43016708_1": {"section_id": 2511, "quality": 0.9090909090909091, "length": 10}}, "n4659": {"so_13889467_43016708_1": {"section_id": 3239, "quality": 0.9090909090909091, "length": 10}, "so_13889467_43016708_3": {"section_id": 3241, "quality": 0.8571428571428571, "length": 18}, "so_13889467_43016708_9": {"section_id": 6315, "quality": 0.6875, "length": 11}, "so_13889467_43016708_2": {"section_id": 3240, "quality": 1.0, "length": 10}}}, "13889472": {"ParentId": "13889467", "LastEditDate": "2017-05-23T11:47:08.153", "CommentCount": "14", "CreationDate": "2012-12-15T05:01:10.267", "Score": "49", "LastEditorUserId": "-1", "PostTypeId": "2", "Id": "13889472", "OwnerUserId": "452307", "Body": "<p>Consider the following programs:</p>\n<p><strong><a href=\"http://codepad.org/aThyzsXv\" rel=\"nofollow noreferrer\">Sample 1: </a></strong></p>\n<pre><code>#include&lt;stdio.h&gt;\n\nint main()\n{\n    printf(\"Hello World\");\n    return 0;\n}\n</code></pre>\n<p><strong><a href=\"http://codepad.org/TDbD60fx\" rel=\"nofollow noreferrer\">Sample 2: </a></strong></p>\n<pre><code>#include&lt;cstdio&gt;\n\nint main()\n{\n    printf(\"Hello World\");\n    return 0;\n}\n</code></pre>\n<p>Both work as expected. <strong>So which usage is more appropriate?</strong>\nThe answer is: <strong>Neither!</strong> Surprised? Read on. </p>\n<p>The C++ Standard library provides all standard C headers for compatibility reason, while C++ as a language also provides all the equivalent headers. As a convention, </p>\n<ul>\n<li>No C++ standard library headers(apart from ones include for C compatibility) have any file extensions, and</li>\n<li>All C++ equivalent of C headers begin with <code>cxxxxx</code>.</li>\n</ul>\n<p>The C++ Standard mentions this under <em>Annex D (normative) Compatibility features</em>:</p>\n<p><img alt=\"Standard Citation\" src=\"https://i.stack.imgur.com/QQ4Uk.png\"/></p>\n<p>\u00a72 mentions the important distinguishing point. This rule applied to the examples above means:</p>\n<ul>\n<li>Including <strong>cstdio</strong> imports the symbol names in the std namespace and <strong>possibly</strong> in the Global namespace.</li>\n<li>Including <strong>stdio.h</strong> imports the symbol names in the Global namespace and <strong>possibly</strong> in the std namespace. </li>\n</ul>\n<p>Let us apply this rule to our sample codes and measure the pros and cons:</p>\n<p><strong>Sample 1:</strong>\nThis brings all the symbols from stdio.h in the global namespace. Advantage is that you can use the symbols without any qualification since they are imported in the global namespace. Downside is that you end up polluting the global namespace with many symbol names that you will probably never use. This might lead to symbol name collision. In C++ always consider the global namespace as a minefield and avoid it as much as possible.</p>\n<p><strong>Sample 2:</strong>\nThis is a very bad practice because there is no guarantee that the implementation will put the symbols in global namespace, the standard simply does not demand to do so. We are simply relying on the behavior of one particular compiler implementation. We cannot and should not assume that all compilers will do so. So strictly speaking the program is not standard approved and this usage is not portable across all implementations.</p>\n<h2>So what is the correct usage?</h2>\n<p>The correct usage is to use <code>cstdio</code> and fully qualify the symbol names or else bring them in scope with <strong><a href=\"http://msdn.microsoft.com/en-us/library/was37tzw%28v=vs.80%29.aspx\" rel=\"nofollow noreferrer\"><code>using</code> declarations</a></strong>. This guarantees all symbols we use are present in <code>std</code> namespace and we are not polluting the global namespace. Example of correct usage:</p>\n<p><strong><a href=\"http://codepad.org/axJ8tJ0z\" rel=\"nofollow noreferrer\">Sample 3: </a></strong></p>\n<pre><code>#include&lt;cstdio&gt;\n\nusing std::printf;\n\nint main()\n{\n    printf(\u201cHello World\u201d);\n    return 0;\n}\n</code></pre>\n<p>Note that the directive <a href=\"https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-a-bad-practice-in-c\"><code>using namespace std;</code>, especially in a header, is not a good option</a> and you should always use <code>using</code> declarations.</p>\n<p>Note that we consider <code>stdio.h</code> vs. <code>cstdio</code> here just a sample use case, in practice it applies to <strike>all</strike> most <code>cxxxx</code> and <code>xxxx.h</code> headers, <a href=\"https://stackoverflow.com/questions/8734230/math-interface-vs-cmath-in-c/8734292#8734292\">except a few like <code>&lt;math.h&gt;</code> and <code>&lt;cmath&gt;</code></a>.</p>\n", "LastActivityDate": "2016-09-09T21:46:58.230"}});