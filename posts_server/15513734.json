post_cb({"15513995": {"ParentId": "15513734", "CommentCount": "3", "Body": "<p>The reference does <em>not</em> extend the lifetime. The code is legal, but only because you never access <code>ref_m</code> after the constructor finishes.</p>\n<p>The temporary is bound to the constructor parameter, <code>ref</code>. Binding another reference to it later, <code>ref_m</code>, doesn't extend the lifetime. If it did, you'd have an object on the stack which has to persist as long as the reference member it's bound to, which could be allocated on the heap, so the compiler would be unable to unwind the stack when the constructor returns.</p>\n<p>It would be nice to get a warning, but compilers aren't perfect and some things are difficult to warn about. The temporary is created in a different context from where it's bound to a reference, so the compiler can only tell there's a problem with inlinging turned on, or some clever static analysis.</p>\n", "OwnerUserId": "981959", "PostTypeId": "2", "Id": "15513995", "Score": "5", "CreationDate": "2013-03-20T02:02:44.483", "LastActivityDate": "2013-03-20T02:02:44.483"}, "15514013": {"ParentId": "15513734", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>The <strong>C++ standard</strong> states:</p>\n<blockquote>\n<p id=\"so_15513734_15514013_0\">The second context is when a reference is bound to a temporary. The\n  temporary to which the reference is bound or the temporary that is the\n  complete object to a subobject of which the temporary is bound\n  persists for the lifetime of the reference except as specified below.\n  <strong>A temporary bound to a reference member in a constructor\u2019s\n  ctor-initializer (12.6.2) persists until the constructor exits.</strong> A\n  temporary bound to a reference parameter in a function call (5.2.2)\n  persists until the completion of the full expression containing the\n  call.</p>\n</blockquote>\n<p><strong>NOTE</strong>: And by the way, this is duplicate (<a href=\"https://stackoverflow.com/questions/2784262/does-a-const-reference-prolong-the-life-of-a-temporary\">1</a>, <a href=\"https://stackoverflow.com/questions/2604206/c-constant-reference-lifetime\">2</a>), you should search better, next time... :)</p>\n", "OwnerUserId": "1743860", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T11:44:00.243", "Id": "15514013", "Score": "3", "CreationDate": "2013-03-20T02:05:51.287", "LastActivityDate": "2013-03-20T02:10:59.220"}, "15513734": {"CommentCount": "5", "ViewCount": "7799", "PostTypeId": "1", "LastEditorUserId": "1174378", "CreationDate": "2013-03-20T01:33:38.643", "LastActivityDate": "2013-03-20T02:10:59.220", "Title": "Const reference as class member", "AcceptedAnswerId": "15513995", "LastEditDate": "2013-03-20T02:03:04.380", "Id": "15513734", "Score": "5", "Body": "<p>Even if the subject was discussed many times around here, I can't find a conclusive explanation regarding my particular case. Will <code>const</code> extend the lifetime of the <code>RefTest</code> temporary? Is the below example legal?</p>\n<pre><code>#include &lt;iostream&gt;\n\nclass RefTest\n{\npublic:\n    RefTest(const std::string &amp;input) : str(input) {}\n    ~RefTest () {std::cout &lt;&lt; \"RefTest\" &lt;&lt; std::endl;}\nprivate:\n    std::string str;\n};\n\nclass Child\n{\npublic:\n    Child (const RefTest &amp;ref) : ref_m(ref) {}\n    ~Child () {std::cout &lt;&lt; \"Test\" &lt;&lt; std::endl;}\nprivate:\n    const RefTest &amp;ref_m;\n};\n\nclass Test\n{\npublic:\n    Test () : child(RefTest(\"child\")) {}//Will the temporary get destroyed here?\n    ~Test () {std::cout &lt;&lt; \"Test\" &lt;&lt; std::endl;}\nprivate:\n    const Child child;\n};\n\nint main ()\n{\n   Test test;\n}\n</code></pre>\n", "Tags": "<c++><class><reference><const><member>", "OwnerUserId": "1174378", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_15513734_15514013_0": {"section_id": 382, "quality": 0.8333333333333334, "length": 40}}, "n3337": {"so_15513734_15514013_0": {"section_id": 373, "quality": 0.8333333333333334, "length": 40}}, "n4659": {"so_15513734_15514013_0": {"section_id": 397, "quality": 0.6041666666666666, "length": 29}}}});