post_cb({"11704388": {"ParentId": "11699083", "CommentCount": "6", "Body": "<p>The document you've linked to, the n3337 draft standard, can be treated as official. It's the C++11 standard plus minor editorial changes.</p>\n<p>You just need to learn to read the standard, which is understandable because it's not intended to be easy reading.</p>\n<p>To find the exception guarantees for any particular library operation, check that operation's specification for remarks and comments on exceptions. If the function is a member function then check the specification of the type for comments on exception safety and what requirements it fulfills. Then check the fulfilled requirements for exception guarantees that must be made by objects to fulfill those requirements.</p>\n<p>For generic types and algorithms also check the requirements placed on the template parameters in order to see what requirements those types have to meet in order for all the exception guarantees made by the type or algorithm or member function to hold (if the template parameters don't meet the specified requirements then using the template with those parameters has undefined behavior and none of the template's specifications apply).</p>\n", "OwnerUserId": "365496", "PostTypeId": "2", "Id": "11704388", "Score": "2", "CreationDate": "2012-07-28T20:25:20.500", "LastActivityDate": "2012-07-28T20:25:20.500"}, "11699456": {"ParentId": "11699083", "CommentCount": "10", "Body": "<h1>n3376</h1>\n<h2>23.2.1 General container requirements [container.requirements.general]</h2>\n<h3>Paragraph 10</h3>\n<blockquote>\n<p id=\"so_11699083_11699456_0\">Unless otherwise specified (see 23.2.4.1, 23.2.5.1, 23.3.3.4, and 23.3.6.5) all container types defined in this Clause meet the following additional requirements:<br>\n  \u2014 if an exception is thrown by an insert() or emplace() function while inserting a single element, that function has no effects.<br>\n  \u2014 if an exception is thrown by a push_back() or push_front() function, that function has no effects.<br>\n  \u2014 no erase(), clear(), pop_back() or pop_front() function throws an exception.<br>\n  \u2014 no copy constructor or assignment operator of a returned iterator throws an exception.<br>\n  \u2014 no swap() function throws an exception.<br>\n  \u2014 no swap() function invalidates any references, pointers, or iterators referring to the elements of the containers being swapped.<br>\n  [Note: The end() iterator does not refer to any element, so it may be invalidated. \u2014endnote]</br></br></br></br></br></br></br></p>\n</blockquote>\n<h2>23.2.4 Associative containers [associative.reqmts]</h2>\n<h2>23.2.4.1 Exception safety guarantees [associative.reqmts.except]</h2>\n<blockquote>\n<p id=\"so_11699083_11699456_1\">1 For associative containers, no clear() function throws an exception. erase(k) does not throw an exception unless that exception is thrown by the container\u2019s Compare object (if any).<br>\n  2 For associative containers, if an exception is thrown by any operation from within an insert or emplace function inserting a single element, the insertion has no effect.<br>\n  3 For associative containers, no swap function throws an exception unless that exception is thrown by the swap of the container\u2019s Compare object (if any).</br></br></p>\n</blockquote>\n<h2>23.2.5 Unordered associative containers [unord.req]</h2>\n<h2>23.2.5.1 Exception safety guarantees [unord.req.except]</h2>\n<blockquote>\n<p id=\"so_11699083_11699456_2\">1 For unordered associative containers, no clear() function throws an exception. erase(k) does not throw an exception unless that exception is thrown by the container\u2019s Hash or Pred object (if any).<br>\n  2 For unordered associative containers, if an exception is thrown by any operation other than the container\u2019s hash function from within an insert or emplace function inserting a single element, the insertion has no effect.<br>\n  3 For unordered associative containers, no swap function throws an exception unless that exception is thrown by the swap of the container\u2019s Hash or Pred object (if any).<br>\n  4 For unordered associative containers, if an exception is thrown from within a rehash() function other than by the container\u2019s hash function or comparison function, the rehash() function has no effect.</br></br></br></p>\n</blockquote>\n<h2>23.3.3.4 deque modifiers [deque.modifiers]</h2>\n<h3>void push_back(T&amp;&amp; x); Paragraph 2</h3>\n<blockquote>\n<p id=\"so_11699083_11699456_3\">Remarks: If an exception is thrown other than by the copy constructor, move constructor, assignment operator, or move assignment operator of T there are no effects. If an exception is thrown by the move constructor of a non-CopyInsertable T, the effects are unspecified.</p>\n</blockquote>\n<h3>iterator erase(const_iterator first, const_iterator last); Paragraph 6</h3>\n<blockquote>\n<p id=\"so_11699083_11699456_4\">Throws: Nothing unless an exception is thrown by the copy constructor, move constructor, assignment operator, or move assignment operator of T.</p>\n</blockquote>\n<h2>23.3.6.5 vector modifiers [vector.modifiers]</h2>\n<h3>void push_back(T&amp;&amp; x); Paragraph 2</h3>\n<blockquote>\n<p id=\"so_11699083_11699456_5\">If an exception is thrown by the move constructor of a non-CopyInsertable T, the effects are unspecified.</p>\n</blockquote>\n<h3>iterator erase(const_iterator first, const_iterator last); Paragraph 5</h3>\n<blockquote>\n<p id=\"so_11699083_11699456_6\">Throws: Nothing unless an exception is thrown by the copy constructor, move constructor, assignment operator, or move assignment operator of T.</p>\n</blockquote>\n", "OwnerUserId": "14065", "PostTypeId": "2", "Id": "11699456", "Score": "8", "CreationDate": "2012-07-28T08:27:58.797", "LastActivityDate": "2012-07-28T08:27:58.797"}, "11699271": {"ParentId": "11699083", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>Reading the standard can be scary (let's come back to the standard), but Bjarne Stroustrup has written a really nice appendix on this subject in his book 'The C++ Programming Language'. He posted this appendix at</p>\n<p><a href=\"http://www.stroustrup.com/3rd_safe0.html\" rel=\"nofollow\">http://www.stroustrup.com/3rd_safe0.html</a> , at \n<a href=\"http://www.stroustrup.com/3rd_safe.pdf\" rel=\"nofollow\">http://www.stroustrup.com/3rd_safe.pdf</a></p>\n<p>It's pretty long and detailed (and well written). You may for example find section E.4 interesting, quote:</p>\n<blockquote>\n<p id=\"so_11699083_11699271_0\"><em>E.4 Standard Container Guarantees</em> </p>\n<p id=\"so_11699083_11699271_1\">If a library operation itself throws an exception, it can \u2013 and does \u2013\n  make sure that the objects on which it operates are left in a\n  well-defined state. For example, at() throwing out_of_range for a\n  vector (\u00a716.3.3) is not a problem with exception safety for the vector\n  . The writer of at() has no problem making sure that a vector is in a\n  well-defined state before throwing.</p>\n</blockquote>\n<p>In addition, section E.4.1 states</p>\n<blockquote>\n<p id=\"so_11699083_11699271_2\">In addition to the basic guarantee, the standard library offers the\n  strong guarantee for a few operations that insert or remove elements.</p>\n</blockquote>\n<p>have a look at page 956. It contains a table of guarantees for various operations for vector, deque, list and map.\n<strong>In summary, all operations on those containers are either nothrow or strong, except for <em>N - element insert into map</em> which offers the basic guarantees.</strong> </p>\n<p>Note: the above text is old and does not address C++11, but should still be correct enough for most aims and purposes. </p>\n<h2>When it comes to C++11...</h2>\n<p>the standard first states, about the containers\n<code>array, deque, forward_list, list, vector, map, set, unordered_map, unordered_set, queue,stack</code>:\n at </p>\n<p><strong>23.2.1/10</strong>:</p>\n<blockquote>\n<p id=\"so_11699083_11699271_3\">Unless otherwise specified (see 23.2.4.1, 23.2.5.1, 23.3.3.4, and\n  23.3.6.5) all container types defined in this Clause meet the following additional requirements: </p>\n<p id=\"so_11699083_11699271_4\">\u2014 if an exception is thrown by an insert() or emplace() function while\n  inserting a single element, that function has no effects.<br>\n  \u2014 if an exception is thrown by a push_back() or push_front() function,\n  that function has no effects.<br>\n  \u2014 no erase(), clear(), pop_back() or pop_front() function throws an\n  exception.<br>\n  \u2014 no copy constructor or assignment operator of a returned iterator\n  throws an exception.<br>\n  \u2014 no swap() function throws an exception.<br>\n  \u2014 no swap() function invalidates any references, pointers, or\n  iterators referring to the elements of the containers being swapped.</br></br></br></br></br></p>\n</blockquote>\n<p>The quirks pointed out in the respective sections referred to above (each called Exception safety guarantees) are mostly about special against-the-wall cases like when dealing with exceptions from the contained types' hashing, comparison operations as well as throwing swap and throwing move operations. </p>\n", "OwnerUserId": "1149664", "LastEditorUserId": "16287", "LastEditDate": "2015-03-12T18:08:26.277", "Id": "11699271", "Score": "14", "CreationDate": "2012-07-28T07:48:58.777", "LastActivityDate": "2015-03-12T18:08:26.277"}, "11699083": {"CommentCount": "7", "AcceptedAnswerId": "11699271", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2012-07-28T07:12:22.187", "LastActivityDate": "2015-03-12T18:08:26.277", "LastEditDate": "2017-05-23T12:26:15.053", "ViewCount": "2924", "FavoriteCount": "10", "Title": "Where can I find all the exception guarantees for the Standard Containers and Algorithms?", "Id": "11699083", "Score": "18", "Body": "<p>Yes, I've looked at the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf\" rel=\"nofollow noreferrer\">C++ standards</a> that I could find (or the drafts), but I'm not finding any comprehensive of the exception guarantees given by STL containers. All I can find are occasional sections with incomplete descriptions on <em>some</em> of the functions for <em>some</em> of the types. Or perhaps it's there but I'm just not finding it, I don't know.</p>\n<p><strong>Note:</strong> I'm <strong><em>not</em></strong> asking for a list of all the guarantees people can think of, which is basically in <a href=\"https://stackoverflow.com/questions/7403227/where-can-i-find-information-about-c-stl-method-exception-guarantees\">this question</a>.<br>\nI'm looking for the <em>authoritative source</em> of this information itself -- or preferably, a free version of the source (e.g. a draft of the standard) where I can more or less treat as official.</br></p>\n", "Tags": "<c++><exception><standard-library><c++-faq><exception-safety>", "OwnerUserId": "541686", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_11699083_11699271_4": {"section_id": 712, "quality": 1.0, "length": 48}, "so_11699083_11699271_3": {"section_id": 712, "quality": 0.7058823529411765, "length": 12}, "so_11699083_11699456_0": {"section_id": 712, "quality": 0.8933333333333333, "length": 67}, "so_11699083_11699456_6": {"section_id": 822, "quality": 0.9230769230769231, "length": 12}, "so_11699083_11699456_5": {"section_id": 818, "quality": 1.0, "length": 7}, "so_11699083_11699456_3": {"section_id": 818, "quality": 0.9565217391304348, "length": 22}, "so_11699083_11699456_4": {"section_id": 822, "quality": 0.9230769230769231, "length": 12}}, "n3337": {"so_11699083_11699271_4": {"section_id": 701, "quality": 1.0, "length": 48}, "so_11699083_11699271_3": {"section_id": 701, "quality": 0.7058823529411765, "length": 12}, "so_11699083_11699456_0": {"section_id": 701, "quality": 0.8933333333333333, "length": 67}, "so_11699083_11699456_6": {"section_id": 811, "quality": 0.9230769230769231, "length": 12}, "so_11699083_11699456_5": {"section_id": 807, "quality": 1.0, "length": 7}, "so_11699083_11699456_3": {"section_id": 807, "quality": 0.9565217391304348, "length": 22}, "so_11699083_11699456_4": {"section_id": 811, "quality": 0.9230769230769231, "length": 12}}, "n4659": {"so_11699083_11699271_4": {"section_id": 741, "quality": 1.0, "length": 48}, "so_11699083_11699271_3": {"section_id": 741, "quality": 0.7058823529411765, "length": 12}, "so_11699083_11699456_0": {"section_id": 741, "quality": 0.8933333333333333, "length": 67}, "so_11699083_11699456_6": {"section_id": 881, "quality": 0.9230769230769231, "length": 12}, "so_11699083_11699456_4": {"section_id": 881, "quality": 0.9230769230769231, "length": 12}, "so_11699083_11699456_3": {"section_id": 877, "quality": 0.9565217391304348, "length": 22}, "so_11699083_11699456_5": {"section_id": 877, "quality": 1.0, "length": 7}}}});