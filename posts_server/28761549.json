post_cb({"28761757": {"ParentId": "28761549", "CommentCount": "10", "Body": "<p>According to the C++ Standard (3.5 Program and linkage)</p>\n<blockquote>\n<p id=\"so_28761549_28761757_0\">3 A name having namespace scope (3.3.6) has internal linkage if it is\n  the name of</p>\n<p id=\"so_28761549_28761757_1\"><strong>\u2014 a non-volatile variable that is explicitly declared const or constexpr and neither explicitly declared extern nor previously\n  declared to have external linkage; or</strong></p>\n</blockquote>\n<p>and</p>\n<blockquote>\n<p id=\"so_28761549_28761757_2\">4 An unnamed namespace or a namespace declared directly or indirectly\n  within an unnamed namespace has internal linkage. <strong>All other\n  namespaces have external linkage.</strong> A name having namespace scope that\n  has not been given internal linkage above has the same linkage as the\n  enclosing namespace if it is the name of \u2014 a variable; or</p>\n</blockquote>\n<p>In this namespace definition</p>\n<pre><code>namespace Dv\n{\n    const int MAX = 10;\n    const std::string NAME = \"bobo\";\n\n    const char* NAME2 = \"fred\";  // &lt;-- ERROR: multiple definition of `Dv::NAME2'\n}\n</code></pre>\n<p>(the only) variable <code>NAME2</code> is not a constant and hence has external linkage. </p>\n<p>You could make it as having internal linkage defining it for example with keyword static. For example</p>\n<pre><code>namespace Dv\n{\n    const int MAX = 10;\n    const std::string NAME = \"bobo\";\n\n    static const char* NAME2 = \"fred\";\n}\n</code></pre>\n<p>Or could define it as a constant</p>\n<pre><code>namespace Dv\n{\n    const int MAX = 10;\n    const std::string NAME = \"bobo\";\n\n    const char * const NAME2 = \"fred\";\n}\n</code></pre>\n", "OwnerUserId": "2877241", "PostTypeId": "2", "Id": "28761757", "Score": "2", "CreationDate": "2015-02-27T09:37:25.353", "LastActivityDate": "2015-02-27T09:37:25.353"}, "28761549": {"CommentCount": "1", "ViewCount": "516", "CreationDate": "2015-02-27T09:28:07.487", "LastActivityDate": "2015-02-27T09:37:25.353", "Title": "C++ Linker complains multiple definition of char* but not std::string", "AcceptedAnswerId": "28761757", "PostTypeId": "1", "Id": "28761549", "Score": "3", "Body": "<p>In a big project, I have a .h file which defines a lot of constants within a namespace. Introducing const char*   constants results in linker errors complaining of multiple definitions.</p>\n<p><strong>ex.h</strong></p>\n<pre><code>#include &lt;string&gt;\nnamespace Dv\n{\n    const int MAX = 10;\n    const std::string NAME = \"bobo\";\n\n    const char* NAME2 = \"fred\";  // &lt;-- ERROR: multiple definition of `Dv::NAME2'\n}\n</code></pre>\n<p><strong>exA.cpp</strong></p>\n<pre><code>#include \"ex.h\"\nvoid aFunction() { printf(\"this is aFunction\\n\"); }\n</code></pre>\n<p><strong>exB.cpp</strong></p>\n<pre><code>#include \"ex.h\"    \nvoid aFunction(void);\n\nint main(int argc, char **argv)\n{\n    aFunction();\n    return 0;\n}\n</code></pre>\n<p><strong>Compile and Link</strong></p>\n<pre><code>g++ -c exA.cpp\ng++ -c exB.cpp\ng++ exA.o exB.o -o ex\nexB.o:(.data+0x0): multiple definition of `Dv::NAME2'\nexA.o:(.data+0x0): first defined here\ncollect2: ld returned 1 exit status\n</code></pre>\n<p>The linker error happens if NAME2 is included in the .h file.  Why?</p>\n<p>If MAX is also a POD (like char[]?), why does the linker not complain of multiple <em>int MAX</em> definitions?  (or multiple <em>std::string NAME</em> definitions for that matter?)</p>\n<p>I don't understand what's special about char[] in this situation.</p>\n<p>Thanks</p>\n", "Tags": "<c++><linker-errors>", "OwnerUserId": "883572", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_28761549_28761757_0": {"section_id": 7136, "quality": 0.875, "length": 7}, "so_28761549_28761757_1": {"section_id": 7136, "quality": 1.0, "length": 16}, "so_28761549_28761757_2": {"section_id": 7137, "quality": 1.0, "length": 32}}, "n3337": {"so_28761549_28761757_0": {"section_id": 6880, "quality": 0.875, "length": 7}, "so_28761549_28761757_1": {"section_id": 6880, "quality": 0.9375, "length": 15}, "so_28761549_28761757_2": {"section_id": 6881, "quality": 1.0, "length": 32}}, "n4659": {"so_28761549_28761757_0": {"section_id": 8637, "quality": 0.875, "length": 7}, "so_28761549_28761757_1": {"section_id": 8637, "quality": 0.8125, "length": 13}, "so_28761549_28761757_2": {"section_id": 8638, "quality": 1.0, "length": 32}}}});