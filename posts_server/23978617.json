post_cb({"23978617": {"CommentCount": "0", "ViewCount": "108", "PostTypeId": "1", "LastEditorUserId": "635608", "CreationDate": "2014-06-01T09:53:20.960", "LastActivityDate": "2014-06-01T10:37:43.853", "LastEditDate": "2014-06-01T09:55:36.880", "AcceptedAnswerId": "23978689", "OwnerDisplayName": "user2953119", "Title": "Can the :: operator appear in the context different from scope resolution in qualified name lookup?", "Id": "23978617", "Score": "6", "Body": "<p>As known scope resolution operator used for the purposes of qualified name lookup. But what is  the value returned by <code>::</code>? As I understood it is postfix unary operator. Consider the following:</p>\n<pre><code>namespace A\n{\n    //something\n}\n\nA:: //error: expected unqualified-id before \u2018int\u2019\n\nint main(){ }\n</code></pre>\n<p>Can you explain that behavior?</p>\n", "Tags": "<c++><operator-keyword><scope-resolution>", "AnswerCount": "4"}, "23978689": {"ParentId": "23978617", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>The scope resolution operator <code>::</code> is only a syntatic operator, has no other semantics. That is, there are operators that only contribute to the syntax of the language, and others that contribute to the semantics/runtime behaviour of the program too, and that semantics could be customized. Thats operators overloading.</p>\n", "OwnerUserId": "1609356", "LastEditorUserId": "1609356", "LastEditDate": "2014-06-01T10:37:43.853", "Id": "23978689", "Score": "5", "CreationDate": "2014-06-01T10:03:24.650", "LastActivityDate": "2014-06-01T10:37:43.853"}, "23978712": {"ParentId": "23978617", "CommentCount": "1", "Body": "<p>The <code>::</code> scope resolution operator is only used as, well... scope resolution operator. </p>\n<p>Specifically the C++ grammar, as specified by the standard at \u00a75.1.1/8, is:</p>\n<pre><code>qualified-id:\n    nested-name-specifier template(opt) unqualified-id \nnested-name-specifier:\n    ::\n    type-name ::\n    namespace-name ::\n    decltype-specifier ::\n    nested-name-specifier identifier ::\n    nested-name-specifier templateopt simple-template-id ::\n</code></pre>\n<p>In your case <code>nested-name-specifier</code> is in the form of <code>namespace-name ::</code>, specifically <code>A ::</code>. For a <code>qualified-id</code> you need <em>at least</em> and <code>unqualified-id</code>.</p>\n<p>An <code>unqualified-id</code> has the following grammar, as per \u00a75.1.1:</p>\n<pre><code>unqualified-id:\n    identifier \n    operator-function-id \n    conversion-function-id \n    literal-operator-id\n    ~ class-name\n    ~ decltype-specifier template-id\n</code></pre>\n", "OwnerUserId": "493122", "PostTypeId": "2", "Id": "23978712", "Score": "2", "CreationDate": "2014-06-01T10:07:19.793", "LastActivityDate": "2014-06-01T10:07:19.793"}, "23978793": {"ParentId": "23978617", "CommentCount": "0", "Body": "<p>The scope resolution operator :: is not a function call, it is built in the language and it is used by the compiler to look up names, it will return the type that is find at its right. </p>\n<p>Excerpt from the standard:</p>\n<blockquote>\n<p id=\"so_23978617_23978793_0\">A nested-name-specifier that denotes a class, optionally followed by\n  the keyword template (14.2), and then followed by the name of a member\n  of either that class (9.2) or one of its base classes (Clause 10), is\n  a qualified-id; 3.4.3.1 describes name lookup for class members that\n  appear in qualified-ids. The result is the member. The type of the\n  result is the type of the member.</p>\n</blockquote>\n<p>In your case the compiler is looking up \n   A::int\nwhich is obviously not what you'd like.</p>\n<p>A simple example:</p>\n<pre><code>int count = 0;\n\nint main(void) {\n  int count = 0;\n  ::count = 1;  // set global count to 1\n  count = 2;    // set local count to 2\n  return 0;\n}\n</code></pre>\n", "OwnerUserId": "1001195", "PostTypeId": "2", "Id": "23978793", "Score": "0", "CreationDate": "2014-06-01T10:16:04.237", "LastActivityDate": "2014-06-01T10:16:04.237"}, "23978687": {"ParentId": "23978617", "CommentCount": "0", "Body": "<p>As far as I know the only meaning of the (not overloaded) <code>::</code> operator is scope resolution.\nYour code is interpreted as <code>A::int main()</code> which generates the error.</p>\n", "OwnerUserId": "598465", "PostTypeId": "2", "Id": "23978687", "Score": "2", "CreationDate": "2014-06-01T10:03:14.170", "LastActivityDate": "2014-06-01T10:03:14.170"}, "bq_ids": {"n4140": {"so_23978617_23978793_0": {"section_id": 5955, "quality": 0.8888888888888888, "length": 32}}, "n3337": {"so_23978617_23978793_0": {"section_id": 5724, "quality": 0.8888888888888888, "length": 32}}, "n4659": {"so_23978617_23978793_0": {"section_id": 7443, "quality": 0.8888888888888888, "length": 32}}}});