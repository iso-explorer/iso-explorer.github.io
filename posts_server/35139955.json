post_cb({"35160075": {"ParentId": "35139955", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>This is precisely covered by <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#2091\" rel=\"nofollow noreferrer\"><strong>CWG 2091</strong></a>:</p>\n<blockquote>\n<p id=\"so_35139955_35160075_0\">According to 14.8.2.5 [temp.deduct.type] paragraph 17,</p>\n<blockquote>\n<p id=\"so_35139955_35160075_6\">If <code>P</code> has a form that contains <code>&lt;i&gt;</code>, and if the type of the corresponding value of <code>A</code> differs from the type of <code>i</code>, deduction\n    fails.</p>\n</blockquote>\n<p id=\"so_35139955_35160075_2\">This gives the wrong result for an example like:</p>\n<pre><code>template&lt;int &amp;&gt; struct X;\ntemplate&lt;int &amp;N&gt; void f(X&lt;N&gt;&amp;);\nint n;\nvoid g(X&lt;n&gt; &amp;x) { f(x); }\n</code></pre>\n<p id=\"so_35139955_35160075_3\">Here, <code>P</code> is <code>X&lt;N&gt;</code>, which contains <code>&lt;i&gt;</code>. The type of <code>i</code> is <code>int&amp;</code>.\n  The corresponding value from <code>A</code> is <code>n</code>, which is a glvalue of type\n  <code>int</code>. Presumably this should be valid.</p>\n<p id=\"so_35139955_35160075_4\">I think this rule means to say something like,</p>\n<blockquote>\n<p id=\"so_35139955_35160075_7\">If <code>P</code> has a form that contains <code>&lt;i&gt;</code>, and the type of <code>i</code> differs from the type of the corresponding template parameter of the template\n    named by the enclosing <em>simple-template-id</em>, deduction fails.</p>\n</blockquote>\n</blockquote>\n<p>As noted by @dyp, <a href=\"http://eel.is/c++draft/temp.deduct.type#17\" rel=\"nofollow noreferrer\">[temp.deduct.type]/17</a> should be more permissive. In your example, the argument in <code>FooClass&lt;F&gt;</code> (<code>F</code>) does not have reference type - it's an lvalue of type <code>foo</code>. The template parameter of <code>FooClass</code> is a reference. The DR was resolved last year.</p>\n", "OwnerUserId": "3647361", "LastEditorUserId": "3647361", "LastEditDate": "2017-03-14T14:05:23.703", "Id": "35160075", "Score": "6", "CreationDate": "2016-02-02T17:31:46.753", "LastActivityDate": "2017-03-14T14:05:23.703"}, "35139955": {"CommentCount": "11", "AcceptedAnswerId": "35160075", "PostTypeId": "1", "LastEditorUserId": "98038", "CreationDate": "2016-02-01T20:45:09.600", "LastActivityDate": "2017-03-14T14:05:23.703", "LastEditDate": "2016-02-03T07:33:09.793", "ViewCount": "232", "FavoriteCount": "3", "Title": "Can an lvalue reference non-type template parameter be inferred?", "Id": "35139955", "Score": "11", "Body": "<p>I have the following code, which I cannot get to work:</p>\n<pre><code>struct foo {};\nfoo foo1 = {};\n\ntemplate &lt;foo&amp; F&gt;\nclass FooClass {};\n\ntemplate &lt;foo&amp; F&gt;\nvoid foobar(FooClass&lt;F&gt; arg) {\n}\n\nint main() {\n    FooClass&lt;foo1&gt; f;\n    foobar(f);\n}\n</code></pre>\n<p>The error is:</p>\n<blockquote>\n<p id=\"so_35139955_35139955_0\">main.cpp:14:5: error: no matching function for call to 'foobar'</p>\n<p id=\"so_35139955_35139955_1\">note: candidate template ignored: substitution failure : deduced non-type template argument does not have the same type as the its corresponding template parameter ('foo' vs 'foo &amp;')</p>\n</blockquote>\n<p>Is it at all <strong>possible</strong> to infer <em>lvalue</em> reference template parameters? If so, how should it be done?</p>\n", "Tags": "<c++><templates><c++11><language-lawyer><lvalue>", "OwnerUserId": "98038", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_35139955_35160075_7": {"section_id": 341, "quality": 0.6428571428571429, "length": 9}, "so_35139955_35160075_1": {"section_id": 348, "quality": 1.0, "length": 9}, "so_35139955_35160075_6": {"section_id": 348, "quality": 1.0, "length": 9}, "so_35139955_35160075_5": {"section_id": 341, "quality": 0.6428571428571429, "length": 9}}, "n3337": {"so_35139955_35160075_7": {"section_id": 331, "quality": 0.6428571428571429, "length": 9}, "so_35139955_35160075_1": {"section_id": 331, "quality": 0.7777777777777778, "length": 7}, "so_35139955_35160075_6": {"section_id": 331, "quality": 0.7777777777777778, "length": 7}, "so_35139955_35160075_5": {"section_id": 331, "quality": 0.6428571428571429, "length": 9}}, "n4659": {"so_35139955_35160075_7": {"section_id": 358, "quality": 1.0, "length": 14}, "so_35139955_35160075_1": {"section_id": 350, "quality": 0.7777777777777778, "length": 7}, "so_35139955_35160075_6": {"section_id": 350, "quality": 0.7777777777777778, "length": 7}, "so_35139955_35160075_5": {"section_id": 358, "quality": 1.0, "length": 14}}}});