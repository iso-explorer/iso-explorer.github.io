post_cb({"17110852": {"Id": "17110852", "PostTypeId": "2", "Body": "<p>As someone who programs in both C and C++, unless there's a good reason to use different alternatives in each language, I prefer to keep it consistent. Although <code>and</code> has been a part of the C standard for close to two decades, it requires a header file instead of being built into the language. Especially when a piece of code may be used in multiple projects, the hassle is just not worth it.</p>\n<p>I've never seen a situation where  using <code>and</code> over <code>&amp;&amp;</code> would be advantageous. I can't imagine a modern development system without a <kbd>&amp;</kbd> key, though maybe if you're trying to do something on an unusual platform (like directly programming on a severely limited mobile/embedded system) it would be useful. I also think it reduces the readability of my code for people who are very used to seeing <code>&amp;&amp;</code> as the logical and operator.</p>\n", "LastActivityDate": "2013-06-14T14:29:47.967", "Score": "4", "CreationDate": "2013-06-14T14:29:47.967", "ParentId": "17110294", "CommentCount": "0", "OwnerUserId": "1270168"}, "17110365": {"Id": "17110365", "PostTypeId": "2", "Body": "<p>I would prefer \n    if(a and b)\n, because there is always the chance to mix up accidently\n    if(a &amp;&amp; b)\nwith \n    if(a &amp; b)\n, causing you a lot of trouble..</p>\n", "LastActivityDate": "2013-06-14T14:03:38.157", "Score": "5", "CreationDate": "2013-06-14T14:03:38.157", "ParentId": "17110294", "CommentCount": "5", "OwnerUserId": "2388912"}, "17110426": {"Id": "17110426", "PostTypeId": "2", "Body": "<p>I prefer <code>&amp;&amp;</code> instead of <code>and</code>.</p>\n<ul>\n<li><code>&amp;&amp;</code> is widely known and accepted, <a href=\"https://stackoverflow.com/questions/2419805/when-did-and-become-an-operator-in-c\">while many don't even know that <code>and</code> is valid C++</a>.</li>\n<li>Some IDEs don't accept <code>and</code> (and friends) by default. For example <a href=\"https://stackoverflow.com/questions/555505/c-alternative-tokens\">MSVC++</a>.</li>\n<li>At least for me, the operator precedence of <code>&amp;&amp;</code> and <code>||</code> is ingrained into my head. While <code>and</code> and <code>or</code> have the same precedences as <code>&amp;&amp;</code> and <code>||</code>, the simple fact that I'm much less used to them makes it harder to read a condition.</li>\n</ul>\n<p>On the other hand, <code>and</code> is more verbose and might be easier to use for programmers who have learned programming with languages that don't use <code>&amp;&amp;</code>. But one could argue that these people should learn C++ rather than try to change it's snytax.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2013-06-14T14:06:56.363", "Score": "7", "CreationDate": "2013-06-14T14:06:56.363", "ParentId": "17110294", "CommentCount": "0", "LastEditDate": "2017-05-23T12:18:33.263", "OwnerUserId": "1038629"}, "17110423": {"Id": "17110423", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_17110294_17110423_0\">2.6 Alternative tokens [lex.digraph]</p>\n<p id=\"so_17110294_17110423_1\">1 Alternative token representations are provided for\n  some operators and punctuators.16</p>\n<p id=\"so_17110294_17110423_2\">2 <strong>In all respects of the language, each alternative token behaves the\n  same, respectively, as its primary token</strong>, except for its spelling.17\n  The set of alternative tokens is defined in Table 2.</p>\n</blockquote>\n<p>Can't paste table 2, but it explicitly states Alternative: <code>and</code>, Primary <code>&amp;&amp;</code> (same for <code>or</code> and <code>||</code>).</p>\n<p>So they are absolutely identical.\nIf you want to try and convince yourself one is \"better\" than the other, that's your business. If someone else is trying to argue such, they'd better have a good reason.</p>\n<p>Edit: The aforementioned Table 2:</p>\n<pre><code>Table 2 \u2014 Alternative tokens\nAlternative Primary\n&lt;%          {\n%&gt;          }\n&lt;:          [\n:&gt;          ]\n%:          #\n%:%:        ##\nand         &amp;&amp;\nbitor       |\nor          ||\nxor         \u02c6\ncompl       ~\nbitand      &amp;\nand_eq      &amp;=\nor_eq       |=\nxor_eq      \u02c6=\nnot         !\nnot_eq      !=\n</code></pre>\n<p>Edit: Maybe worth noting, according to <a href=\"https://stackoverflow.com/questions/17110294/should-i-use-or-and-logic/17110423#comment24755456_17110294\">Sebastian Redl</a>, MS break the rules here.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2013-06-14T14:54:01.607", "Score": "17", "CreationDate": "2013-06-14T14:06:34.760", "ParentId": "17110294", "CommentCount": "2", "LastEditDate": "2017-05-23T10:29:14.723", "OwnerUserId": "1171191"}, "bq_ids": {"n4140": {"so_17110294_17110423_2": {"length": 18, "quality": 0.8571428571428571, "section_id": 5326}, "so_17110294_17110423_1": {"length": 6, "quality": 0.8571428571428571, "section_id": 5325}}, "n3337": {"so_17110294_17110423_2": {"length": 18, "quality": 0.8571428571428571, "section_id": 5123}, "so_17110294_17110423_1": {"length": 6, "quality": 0.8571428571428571, "section_id": 5122}}, "n4659": {"so_17110294_17110423_2": {"length": 18, "quality": 0.8571428571428571, "section_id": 6747}, "so_17110294_17110423_1": {"length": 6, "quality": 0.8571428571428571, "section_id": 6746}}}, "17110294": {"ViewCount": "942", "Body": "<p>I'm using C++11 and both are compiling without any warning, witch one is the best way to do it?</p>\n<pre><code>if(a &amp;&amp; b)\n</code></pre>\n<p>or </p>\n<pre><code>if(a and b)\n</code></pre>\n", "AcceptedAnswerId": "17110423", "Title": "Should I use \"&&\" or \"and\"?", "CreationDate": "2013-06-14T14:00:00.450", "Id": "17110294", "CommentCount": "13", "FavoriteCount": "4", "PostTypeId": "1", "LastEditDate": "2016-09-13T12:40:56.110", "LastEditorUserId": "2307070", "LastActivityDate": "2016-09-13T12:40:56.110", "ClosedDate": "2013-06-14T15:59:09.043", "Score": "15", "OwnerUserId": "2307070", "Tags": "<c++><language-lawyer><boolean-logic>", "AnswerCount": "4"}});