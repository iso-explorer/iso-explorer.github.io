post_cb({"30015149": {"CommentCount": "3", "ViewCount": "94", "PostTypeId": "1", "LastEditorUserId": "2069064", "CreationDate": "2015-05-03T14:43:55.010", "LastActivityDate": "2015-05-03T14:50:54.313", "Title": "Why can static member functions only be called at global scope if they have a return value?", "AcceptedAnswerId": "30015191", "LastEditDate": "2015-05-03T14:50:48.710", "Id": "30015149", "Score": "4", "Body": "<p>I found a peculiar thing: static member functions of a class/struct cannot be called a global scope, unless they have a return value.</p>\n<p>This program does not compile:</p>\n<pre><code>struct test\n{\n  static void dostuff()\n  {\n      std::cout &lt;&lt; \"dostuff was called.\" &lt;&lt; std::endl;\n  }\n};\n\ntest::dostuff();\n\nint main()\n{  \n   return 0;\n}\n</code></pre>\n<p>Giving us the following under GCC v4.8.3:</p>\n<blockquote id=\"so_30015149_30015149_0\">\n<pre><code>main.cpp:12:16: error: expected constructor, destructor, or type conversion before ';' token\ntest::dostuff();\n               ^\n</code></pre>\n</blockquote>\n<p>However, by adding a return value to <code>dostuff()</code> and assigning it to a global variable, the program compiles and works as intended:</p>\n<pre><code>struct test\n{\n  static int dostuff()\n  {\n      std::cout &lt;&lt; \"dostuff was called.\" &lt;&lt; std::endl;\n      return 0;\n  }\n};\n\nint i = test::dostuff();\n\nint main()\n{\n   return 0;\n}\n</code></pre>\n<p>This yields the expected output:</p>\n<blockquote id=\"so_30015149_30015149_1\">\n<pre><code>dostuff was called.\n</code></pre>\n</blockquote>\n<p>Can anyone explain to me why this is the case and if there is a work-around that doesn't involve creating global variables?</p>\n", "Tags": "<c++><static><member-functions>", "OwnerUserId": "1514515", "AnswerCount": "2"}, "30015213": {"ParentId": "30015149", "CommentCount": "2", "Body": "<p>That's how C++ works\u2014normally, code belongs into functions. \"Global\" code belongs into the main function, <code>main</code>, which begins execution when the program starts.</p>\n<p>The only code potentially executed before the start of <code>main</code> are initialisers of global (static and namespace-scope) variables, such as the <code>i</code> in your example. But you shouldn't use this as \"this is how to execute code at <em>global scope.\"</em> Use is as what it's intended for: \"this is how to initialise a global variable.\"</p>\n<p>If you need code to run at program start, put it at the beginning of <code>main</code>. It is quite rare you'd need code to run <em>before</em> that on its own, without caring for its return value. If you do find yourself in such a situation, faking initialisation is a possible workaround. But remember the caveats, such as the generally unspecified order of such before-<code>main</code> code execution.</p>\n", "OwnerUserId": "1782465", "PostTypeId": "2", "Id": "30015213", "Score": "2", "CreationDate": "2015-05-03T14:50:54.313", "LastActivityDate": "2015-05-03T14:50:54.313"}, "30015191": {"ParentId": "30015149", "CommentCount": "0", "Body": "<p>You cannot call functions at global scope because, from [basic.link]</p>\n<blockquote>\n<p id=\"so_30015149_30015191_0\">A <em>program</em> consists of one or more <em>translation units</em> (Clause 2) linked together. A translation unit consists\n  of a sequence of declarations.</p>\n</blockquote>\n<p><code>test::dostuff();</code> is not a declaration - so you cannot have it as a standalone function call (the fact that it's a static member function is irrelevant - could be a free function, a non-static member function called on a global object, etc.). On the other hand, <code>int i = test::dostuff();</code> <em>is</em> a declaration: of a variable <code>i</code> of type <code>int</code> at global scope. That's why it is allowed. Note that it's not the fact that <code>dostuff()</code> has a return value that is relevant - it's the fact that you're declaring a variable with that return value.</p>\n", "OwnerUserId": "2069064", "PostTypeId": "2", "Id": "30015191", "Score": "4", "CreationDate": "2015-05-03T14:48:45.013", "LastActivityDate": "2015-05-03T14:48:45.013"}, "bq_ids": {"n4140": {"so_30015149_30015191_0": {"section_id": 7134, "quality": 0.9230769230769231, "length": 12}}, "n3337": {"so_30015149_30015191_0": {"section_id": 6878, "quality": 0.9230769230769231, "length": 12}}, "n4659": {"so_30015149_30015191_0": {"section_id": 8635, "quality": 0.8461538461538461, "length": 11}}}});