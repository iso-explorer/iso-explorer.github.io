post_cb({"26384927": {"ParentId": "26384746", "CommentCount": "8", "Body": "<p>Yes, as per \u00a75.2.7 [expr.dynamic.cast], for <code>dynamic_cast&lt;T&gt;(v)</code> (emphasis mine):</p>\n<blockquote>\n<p id=\"so_26384746_26384927_0\">If C is the class type to which T points or refers, the run-time check logically executes as follows:  </p>\n<p id=\"so_26384746_26384927_1\">\u2014 If, in the most derived object pointed (referred) to by v, v points (refers) to a public base class\n  subobject of a C object, and if only one object of type C is derived from the subobject pointed (referred) to by v the result points (refers) to that C object.  </p>\n<p id=\"so_26384746_26384927_2\">\u2014 <strong>Otherwise, if v points (refers) to a public base class subobject of the most derived object, and the\n  type of the most derived object has a base class, of type C, that is unambiguous and public, the result points (refers) to the C subobject of the most derived object.</strong></p>\n<p id=\"so_26384746_26384927_3\">\u2014 Otherwise, the run-time check fails.</p>\n</blockquote>\n<p>In your case, <code>v</code> refers to a most derived object that is an instance of your <code>C</code>, but the static type of <code>v</code> is a pointer to the public base class <code>A</code>. The <code>C</code> base class mentioned in the quotation is your <code>B</code>.</p>\n", "OwnerUserId": "962089", "PostTypeId": "2", "Id": "26384927", "Score": "7", "CreationDate": "2014-10-15T14:20:22.790", "LastActivityDate": "2014-10-15T14:20:22.790"}, "bq_ids": {"n4140": {"so_26384746_26384927_2": {"section_id": 6018, "quality": 1.0, "length": 26}, "so_26384746_26384927_1": {"section_id": 6018, "quality": 1.0, "length": 23}, "so_26384746_26384927_0": {"section_id": 6018, "quality": 1.0, "length": 9}}, "n3337": {"so_26384746_26384927_2": {"section_id": 5786, "quality": 1.0, "length": 26}, "so_26384746_26384927_1": {"section_id": 5786, "quality": 1.0, "length": 23}, "so_26384746_26384927_0": {"section_id": 5786, "quality": 1.0, "length": 9}}, "n4659": {"so_26384746_26384927_1": {"section_id": 7517, "quality": 1.0, "length": 23}, "so_26384746_26384927_2": {"section_id": 7517, "quality": 1.0, "length": 26}, "so_26384746_26384927_0": {"section_id": 7517, "quality": 1.0, "length": 9}}}, "26384746": {"CommentCount": "7", "AcceptedAnswerId": "26384927", "CreationDate": "2014-10-15T14:11:53.023", "LastActivityDate": "2014-10-15T14:21:10.367", "PostTypeId": "1", "ViewCount": "196", "FavoriteCount": "1", "Title": "Is it valid to cast from A* to B* via dynamic_cast when A and B haven't a common ancestor?", "Id": "26384746", "Score": "7", "Body": "<p>Both <em>clang 3.5.0</em> and <em>g++ 4.9.0</em> <a href=\"http://coliru.stacked-crooked.com/a/4e039d1b802c2a8e\">compile the following code fine</a> (with <code>-std=c++11 -Wall -Wextra -pedantic-errors</code>) and the program outputs <code>true</code>:</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct A\n{\n    virtual ~A() = default;\n};\n\nstruct B\n{\n    virtual ~B() = default;\n};\n\nstruct C : A, B\n{\n    virtual ~C() = default;\n};\n\nint main()\n{\n    C c;\n    A* ap = &amp;c;\n    B* bp = dynamic_cast&lt;B*&gt;(ap);\n\n    std::cout &lt;&lt; std::boolalpha &lt;&lt; (bp != nullptr) &lt;&lt; std::endl;\n}\n</code></pre>\n", "Tags": "<c++><inheritance><c++11><casting><dynamic-cast>", "OwnerUserId": "3043539", "AnswerCount": "2"}, "26384815": {"ParentId": "26384746", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>Yes. That's sometimes known as <em>cross-casting</em>, and will succeed if they are both base sub-objects of the same derived object, as they are here.</p>\n<p><code>dynamic_cast</code> is necessary, since the conversion needs the run-time information that both are part of a <code>C</code> object. To statically cast, you'd have to explicitly convert to <code>C*</code> first.</p>\n", "OwnerUserId": "204847", "LastEditorUserId": "204847", "LastEditDate": "2014-10-15T14:21:10.367", "Id": "26384815", "Score": "8", "CreationDate": "2014-10-15T14:15:13.080", "LastActivityDate": "2014-10-15T14:21:10.367"}});