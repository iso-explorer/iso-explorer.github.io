post_cb({"bq_ids": {"n4140": {"so_44988879_44988959_0": {"length": 18, "quality": 1.0, "section_id": 5810}}, "n3337": {"so_44988879_44988959_0": {"length": 18, "quality": 1.0, "section_id": 5583}}, "n4659": {"so_44988879_44988959_0": {"length": 18, "quality": 1.0, "section_id": 7271}}}, "44988879": {"ViewCount": "88", "Body": "<p>I was under the impression that the following is prone to leaks </p>\n<pre><code>class Something {\n    std::unique_ptr&lt;A&gt; a;\n    std::unique_ptr&lt;int&gt; b{new int{3}};\n    std::unique_ptr&lt;C&gt; c;\npublic:\n    Something() : a{new A{}}, c{new C{}} {};\n};\n</code></pre>\n<p>if the order of evaluation was the following</p>\n<ol>\n<li><code>new A{}</code></li>\n<li><code>new int{3}</code></li>\n<li><code>new C{}</code></li>\n<li><code>a{}</code></li>\n<li><code>b{}</code></li>\n<li><code>c{}</code></li>\n</ol>\n<p>I was taking a look at the new C++17 feature (<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0145r3.pdf\" rel=\"nofollow noreferrer\">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0145r3.pdf</a>) that fixes order of evaluation faults in previous versions of C++, but it only seems to talk about function argument evaluations. </p>\n<p>I took a look at the cppreference documentation on order of evaluation (<a href=\"http://en.cppreference.com/w/cpp/language/eval_order\" rel=\"nofollow noreferrer\">http://en.cppreference.com/w/cpp/language/eval_order</a>) and it does not seem to mention this either.  </p>\n<p>Does the above have a well defined order of evaluation? (either now in C++17 or in previous versions of C++)</p>\n", "AcceptedAnswerId": "44988959", "Title": "Is the order of evaluation for initialization lists in constructors fixed?", "CreationDate": "2017-07-08T17:21:42.090", "Id": "44988879", "CommentCount": "3", "LastEditDate": "2017-07-09T02:59:47.817", "PostTypeId": "1", "LastEditorUserId": "5501675", "LastActivityDate": "2017-07-09T02:59:47.817", "Score": "0", "OwnerUserId": "5501675", "Tags": "<c++><language-lawyer><c++1z><order-of-evaluation>", "AnswerCount": "2"}, "44988959": {"Id": "44988959", "PostTypeId": "2", "Body": "<p>No, that order is not allowed; the language isn't that insane.</p>\n<p>These are completely distinct full-expressions, so it's controlled by <a href=\"https://timsong-cpp.github.io/cppwp/intro.execution#16\" rel=\"noreferrer\">[intro.execution]/16</a>:</p>\n<blockquote>\n<p id=\"so_44988879_44988959_0\">Every value computation and side effect associated with a\n  full-expression is sequenced before every value computation and side\n  effect associated with the next full-expression to be evaluated.</p>\n</blockquote>\n", "LastActivityDate": "2017-07-08T17:30:06.580", "CommentCount": "14", "CreationDate": "2017-07-08T17:30:06.580", "ParentId": "44988879", "Score": "5", "OwnerUserId": "2756719"}, "44988978": {"Id": "44988978", "PostTypeId": "2", "Body": "<p>Each member initialisation is treated as a separate statement, and the order between these statements is strictly defined.</p>\n<p>So in your example, the order is going to be defined as:</p>\n<ol>\n<li>new A{}</li>\n<li>a{}</li>\n<li>new int{3}</li>\n<li>b{}</li>\n<li>new C{}</li>\n<li>c{}</li>\n</ol>\n", "LastActivityDate": "2017-07-08T17:31:39.510", "CommentCount": "0", "CreationDate": "2017-07-08T17:31:39.510", "ParentId": "44988879", "Score": "1", "OwnerUserId": "4442671"}});