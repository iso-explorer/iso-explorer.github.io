post_cb({"7416317": {"ParentId": "7416227", "CommentCount": "0", "Body": "<p>If you are using VS 2010 you can use the <a href=\"http://msdn.microsoft.com/en-us/magazine/dd434652.aspx\" rel=\"nofollow\">Parallel Patterns</a> library to achieve the multi-threading.</p>\n", "OwnerUserId": "416574", "PostTypeId": "2", "Id": "7416317", "Score": "0", "CreationDate": "2011-09-14T12:28:45.237", "LastActivityDate": "2011-09-14T12:28:45.237"}, "7416291": {"ParentId": "7416227", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>1) Yes</p>\n<p>2) You can use OpenMP to paralellize vector handling. If you are working with Microsoft VC++ 2010, Concurrency library has parallel_for and parallel_for_each algorithms.</p>\n", "OwnerUserId": "279313", "LastEditorUserId": "279313", "LastEditDate": "2011-09-14T13:27:20.863", "Id": "7416291", "Score": "4", "CreationDate": "2011-09-14T12:26:26.340", "LastActivityDate": "2011-09-14T13:27:20.863"}, "18346942": {"ParentId": "7416227", "CommentCount": "0", "Body": "<p>If you are using g++, you can use gnu parallel mode <a href=\"http://gcc.gnu.org/onlinedocs/libstdc++/manual/parallel_mode.html\" rel=\"nofollow\">http://gcc.gnu.org/onlinedocs/libstdc++/manual/parallel_mode.html</a>\nusing the standard stl algorithms in combination with lambda's which are auto parallelized.</p>\n", "OwnerUserId": "652604", "PostTypeId": "2", "Id": "18346942", "Score": "0", "CreationDate": "2013-08-21T00:17:27.020", "LastActivityDate": "2013-08-21T00:17:27.020"}, "7416227": {"CommentCount": "4", "ViewCount": "1050", "CreationDate": "2011-09-14T12:21:06.027", "LastActivityDate": "2013-08-21T00:17:27.020", "Title": "Operating on different elements of std::vector in parallel", "AcceptedAnswerId": "7416291", "PostTypeId": "1", "Id": "7416227", "Score": "4", "Body": "<p>Say I have a <code>std::vector&lt;Object*&gt;</code>.  The vector is large ( &gt; 1000 elements) and each <code>Object*</code> needs to have extensive computation done on it.  The for loop that runs each the computation on each element then, can be easily parallelized. In fact, I could process all 1000 elements in parallel for maximum speedup (\"embarrassingly parallel?\")</p>\n<p>Now I'm wondering 2 things:</p>\n<p>1)  Is it safe to read and write to <em>different elements</em> of a <code>std::vector</code> without a lock? (<strong><em>not</em></strong> modifying the vector itself!) </p>\n<p>2)  Are there easy ways or conventions or patterns to follow to cut a for loop and dispatch to threads?</p>\n", "Tags": "<c++><multithreading><thread-safety><parallel-processing>", "OwnerUserId": "111307", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_7416227_7416284_1": {"section_id": 718, "quality": 0.8947368421052632, "length": 17}}, "n3337": {"so_7416227_7416284_1": {"section_id": 707, "quality": 0.9473684210526315, "length": 18}}, "n4659": {"so_7416227_7416284_1": {"section_id": 749, "quality": 0.8947368421052632, "length": 17}}}, "7416284": {"ParentId": "7416227", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>For 1, see my answer <a href=\"https://stackoverflow.com/questions/7372258/are-stl-container-classes-of-same-type-thread-safe/7372354#7372354\">here</a>:</p>\n<blockquote>\n<p id=\"so_7416227_7416284_0\"><strong>\u00a7 23.2.2 Container data races</strong></p>\n<p id=\"so_7416227_7416284_1\">2/ Notwithstanding (17.6.5.9), implementations are required to avoid data races when the contents of the contained object in different elements in the same sequence, excepting <code>vector&lt;bool&gt;</code>, are modified concurrently.</p>\n</blockquote>\n<p>Obviously this is C++11 (as C++98/03 made no mention of threads), however most implementations already comply.</p>\n<p>I am afraid I don't know any convention. OpenMP could probably automate this.</p>\n<p>To do it manually, I would probably use a queue-like system, as not all objects may require the same time, you could have one thread finish well after the others if you split in \"equal\" portions, whereas a queue feeding the threads would alleviate this issue by maximizing the parallelism up until the very end.</p>\n", "OwnerUserId": "147192", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:16:19.817", "Id": "7416284", "Score": "4", "CreationDate": "2011-09-14T12:25:59.373", "LastActivityDate": "2011-09-14T12:30:55.710"}});