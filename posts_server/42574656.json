post_cb({"42574656": {"CommentCount": "2", "ViewCount": "66", "PostTypeId": "1", "LastEditorUserId": "5038088", "CreationDate": "2017-03-03T09:06:39.503", "LastActivityDate": "2017-03-03T11:09:21.507", "Title": "Try to use a single class variable in template class", "AcceptedAnswerId": "42574862", "LastEditDate": "2017-03-03T11:09:21.507", "Id": "42574656", "Score": "2", "Body": "<p>I have the following:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;utility&gt;\n#include &lt;type_traits&gt;\n\nenum Creature { human, dog };\n\ntemplate &lt;Creature Cr, unsigned AGE=0, typename T = void&gt;\nstruct has_drive_perm {\n\n    constexpr static bool perm = false;\n};\n\ntemplate&lt;unsigned AGE&gt;\nstruct has_drive_perm&lt;Creature::human, AGE, typename std::enable_if&lt;!(AGE&lt;=17),void&gt;::type&gt; {\n\n    constexpr static bool perm = true;\n};\n\n\ntemplate &lt;typename CrT&gt;\nvoid check_drive_perm(CrT&amp; creature);\n\ntemplate &lt;unsigned AGE&gt;\nclass Dog {\n\n    public:\n        typedef has_drive_perm&lt;Creature::dog,AGE&gt; tag;\n\n        Dog(const std::string&amp; name): name{name} {};\n        static unsigned not_allowed_count;\n        friend void check_drive_perm&lt;Dog&lt;AGE&gt;&gt;(Dog&lt;AGE&gt;&amp;);\n\n    private:\n        typename std::enable_if&lt;!tag::perm,void&gt;::type check_can_drive() { std::cout&lt;&lt;\"Dogs can't drive, stupid... and so does \"&lt;&lt;name&lt;&lt;\". It's the \"&lt;&lt;not_allowed_count++&lt;&lt;\"th time you ask smth like that!\"&lt;&lt;std::endl; }\n        //typename std::enable_if&lt;!tag::perm,void&gt;::type check_can_drive() { std::cout&lt;&lt;\"Dogs can't drive, stupid... and so does \"&lt;&lt;name&lt;&lt;std::endl; };//std::cout&lt;&lt;\"It's the \"&lt;&lt;not_allowed_count++&lt;&lt;\"th time you ask smth like that!\"&lt;&lt;std::endl; }\n        const std::string name;\n};\n\ntemplate &lt;unsigned AGE, bool B=has_drive_perm&lt;Creature::human,AGE&gt;::perm&gt;//=std::enable&lt;has_drive_perm&lt;Creature::human,AGE&gt;::perm&gt;\nclass Human {\n\n    public:\n        typedef has_drive_perm&lt;Creature::human,AGE&gt; tag;\n\n        Human(const std::string&amp; name): name{name} {};\n        //static unsigned not_allowed_count;\n        friend void check_drive_perm&lt;Human&lt;AGE,B&gt;&gt;(Human&lt;AGE,B&gt;&amp;);\n\n    private:\n        void check_can_drive() { std::cout&lt;&lt;\"Nope, \"&lt;&lt;name &lt;&lt;\" does not have a licence\"&lt;&lt;std::endl; };\n        const std::string name;\n};\n\ntemplate &lt;unsigned AGE&gt;\nclass Human&lt;AGE, true&gt; {\n\n    public:\n        typedef has_drive_perm&lt;Creature::human,AGE&gt; tag;\n\n        Human(const std::string&amp; name): name{name} {};\n        //static unsigned not_allowed_count;\n        friend void check_drive_perm&lt;Human&lt;AGE,true&gt;&gt;(Human&lt;AGE,true&gt;&amp;);\n\n    private:\n        void check_can_drive() { std::cout&lt;&lt;\"Yep, \"&lt;&lt;name &lt;&lt;\" has a licence\"&lt;&lt;std::endl; };\n        const std::string name;\n};\n\ntemplate &lt;unsigned AGE&gt;\nunsigned Dog&lt;AGE&gt;::not_allowed_count;\n//template &lt;unsigned AGE&gt;\n//unsigned Human&lt;AGE&gt;::not_allowed_count;\n\ntemplate &lt;typename CrT&gt;\nvoid check_drive_perm(CrT&amp; creature) {\n\n       creature.check_can_drive();\n}\n\nint main() {\n\n    Dog&lt;5&gt; d1(\"John\");\n    Dog&lt;10&gt; d2(\"Jim\");\n    Human&lt;18&gt; h1(\"Marcus\");\n    Human&lt;7&gt; h2(\"Frank\");\n\n    check_drive_perm(d1);\n    check_drive_perm(d2);\n    check_drive_perm(h1);\n    check_drive_perm(h2);\n}\n</code></pre>\n<p>This gives me:</p>\n<pre><code>Dogs can't drive, stupid... and so does John. It's the 0th time you ask smth like that!\nDogs can't drive, stupid... and so does Jim. It's the 0th time you ask smth like that!\nYep, Marcus has a licence\nNope, Frank does not have a licence\n</code></pre>\n<p>I want to use the static class variable not_allowed_count only once, so that it would count up. But as I am instantiating the <code>dog class</code> with two different <code>AGE</code> params, I get two variants of the same class (is that true? Wouldn't the compiler then complain that I have a redefinition of the class dog?).\nSo my question is:</p>\n<p><strong><em>How is it possible to use only one static class variable not_allowed_count?</em></strong></p>\n<p>I thought of the CRTP-pattern but that only works on types and not on non-type template parameters (?)</p>\n", "Tags": "<c++><c++11><templates>", "OwnerUserId": "5038088", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_42574656_42574862_0": {"section_id": 232, "quality": 1.0, "length": 11}}, "n3337": {"so_42574656_42574862_0": {"section_id": 225, "quality": 1.0, "length": 11}}, "n4659": {"so_42574656_42574862_0": {"section_id": 240, "quality": 1.0, "length": 11}}}, "42574862": {"ParentId": "42574656", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>You cannot use static members of templated class to calculate usage of this class with any template arguments.</p>\n<p>n3242 14.7.1/6</p>\n<blockquote>\n<p id=\"so_42574656_42574862_0\">Each class template specialization instantiated from a template has\n  its own copy of any static members.</p>\n</blockquote>\n<p>If you want use static variable you can use inheritance for example.</p>\n<pre><code> class not_allowed_counter\n {\n public:\n    static unsigned not_allowed_count;\n };\n\n unsigned not_allowed_counter::not_allowed_count;\n\n template &lt;unsigned AGE&gt;\n class Dog : public not_allowed_counter {\n    //\n         typename std::enable_if&lt;!tag::perm,void&gt;::type check_can_drive() \n         {\n            const unsigned not_allowed_count = static_cast&lt;not_allowed_counter*&gt;(this)-&gt;not_allowed_count++;\n            std::cout&lt;&lt;\"Dogs can't drive, stupid... and so does \"&lt;&lt;name&lt;&lt;\". It's the \"&lt;&lt;not_allowed_count &lt;&lt;\"th time you ask smth like that!\"&lt;&lt;std::endl; \n         }\n  }\n</code></pre>\n", "OwnerUserId": "1498580", "LastEditorUserId": "1498580", "LastEditDate": "2017-03-03T09:24:23.917", "Id": "42574862", "Score": "1", "CreationDate": "2017-03-03T09:15:48.477", "LastActivityDate": "2017-03-03T09:24:23.917"}});