post_cb({"31187325": {"CommentCount": "0", "ViewCount": "114", "OwnerDisplayName": "user2953119", "CreationDate": "2015-07-02T14:28:45.827", "LastActivityDate": "2015-07-02T14:43:44.153", "PostTypeId": "1", "AcceptedAnswerId": "31187433", "Title": "Understanding reference binding", "Id": "31187325", "Score": "1", "Body": "<p>We can't bind non-const lvalue reference to an rvalue, but it can be bound to the const one. We can't bind rvalue reference to an lvalue also. Actually the Standard say so:</p>\n<p>8.5.3/5.2:</p>\n<blockquote>\n<p id=\"so_31187325_31187325_0\">the reference shall be an lvalue reference to a non-volatile const\n  type (i.e., cv1 shall be const), or the reference shall be an rvalue reference.</p>\n</blockquote>\n<p>But is there a better explanation for the things than \"The Standard say so\"?</p>\n", "Tags": "<c++><reference>", "AnswerCount": "2"}, "31187433": {"ParentId": "31187325", "PostTypeId": "2", "CommentCount": "3", "CreationDate": "2015-07-02T14:32:28.057", "Score": "3", "LastEditorUserId": "496161", "LastEditDate": "2015-07-02T14:39:49.193", "Id": "31187433", "OwnerUserId": "496161", "Body": "<p>Because it doesn't make semantic sense.</p>\n<p>You can't bind a non-const lvalue reference to an rvalue, because what does it mean to modify an rvalue? By definition nothing else will see the result, so this doesn't make sense.</p>\n<pre><code>int&amp; i = 3;\n//should change referenced location, but we aren't referencing a memory location\ni = 5; \n</code></pre>\n<p>You can't bind an rvalue reference to an lvalue because rvalue references exist to facilitate destructive optimizations on their referencee. You wouldn't want your objects to be arbitrarily moved out from under you, so the standard doesn't allow it.</p>\n<pre><code>void process_string (std::string&amp;&amp;);\nstd::string foo = \"foo\";\n//foo could be made garbage without us knowing about it\nprocess_string (foo); \n//this is fine\nprocess_string (std::move(foo));\n</code></pre>\n", "LastActivityDate": "2015-07-02T14:39:49.193"}, "31187686": {"ParentId": "31187325", "CommentCount": "0", "CreationDate": "2015-07-02T14:43:44.153", "OwnerUserId": "2508150", "PostTypeId": "2", "Id": "31187686", "Score": "3", "Body": "<p>Think to some real cases:</p>\n<pre><code>#include &lt;vector&gt;\n\nvoid f1( int&amp; i ){i = 1;}\nvoid f2( const int&amp; i ){i = 1;}\nvoid f3( std::vector&lt;int&gt;&amp;&amp; v ){auto v_move{v};}\n\nint main()\n{\n    f1(3); // error: how can you set the value of \"3\" to \"1\"?\n    f2(3); // ok, the compiler extend the life of the rvalue \"into\" f2\n    std::vector&lt;int&gt; v{10};\n    f3(v); // error: an innocent looking call to f3 would let your v very different from what you would imagine\n    f3(std::vector&lt;int&gt;{10}); // ok, nobody cares if the rvalue passed as an argument get modified\n}\n</code></pre>\n", "LastActivityDate": "2015-07-02T14:43:44.153"}, "bq_ids": {"n4140": {"so_31187325_31187325_0": {"section_id": 3321, "quality": 0.9090909090909091, "length": 10}}, "n3337": {"so_31187325_31187325_0": {"section_id": 3191, "quality": 0.9090909090909091, "length": 10}}, "n4659": {"so_31187325_31187325_0": {"section_id": 4087, "quality": 0.9090909090909091, "length": 10}}}});