post_cb({"17736828": {"ParentId": "17736745", "PostTypeId": "2", "CommentCount": "0", "Body": "<p><code>std::setw</code> determines the width of the <em>next</em> output field only, but <code>std::setfill</code> sets the fill character used for <em>all</em> further print operations of the stream object it is passed to.</p>\n<p>So the fill character does not actually suddenly stop working on the third line of output. But because there is no <code>std::setw</code> manipulator before that output is generated, the fill character is simple not used.</p>\n<p><code>std::left</code>, like <code>std::setfill</code>, takes effect until cancelled. So, after being set for the second line of output, it still takes effect when the fourth line is generated. Since in the fourth line, the fill character is <code>-</code>, this character is appended to the end of the line. (The <code>-</code> at the beginning is due to its being explicitly specified as part of the output string.)</p>\n<hr>\n<p>Quotes from the Standard (C++11) for reference.</p>\n<ol>\n<li><p><code>std::setfill</code> is described in 27.7.4/5:</p>\n<blockquote>\n<p id=\"so_17736745_17736828_0\"><code>unspecified setfill(char_type c);</code> </p>\n<p id=\"so_17736745_17736828_1\">Returns: An object of unspecified type such that if out is an object of type basic_ostream and c has type <code>charT</code> then the expression <code>out &lt;&lt; setfill(c)</code> behaves as if it called <code>f(out, c)</code>, where the function <code>f</code> is defined as:</p>\n<pre><code>template&lt;class charT, class traits&gt;\nvoid f(basic_ios&lt;charT,traits&gt;&amp; str, charT c) {\n    // set fill character\n    str.fill(c);\n}\n</code></pre>\n<p id=\"so_17736745_17736828_2\">The expression <code>out &lt;&lt; setfill(c)</code> shall have type <code>basic_ostream&lt;charT, traits&gt;&amp;</code> and value <code>out</code>.</p>\n</blockquote>\n<p>So calls the <code>fill()</code> function of the stream, which in turn is described in 27.5.5.3/14:</p>\n<blockquote>\n<p id=\"so_17736745_17736828_3\"><code>char_type fill(char_type fillch);</code><br>\n  Postcondition: <code>traits::eq(fillch, fill())</code></br></p>\n</blockquote>\n<p>In other words, it modifies a property that is part of the <em>traits</em> of the stream. Suffice it to say that traits are valid until explicitly modified (and not only for the next output field).</p></li>\n<li><p>The situation is similar for <code>std::left</code>, which sets the <em>adjustfield</em> parameter of the stream, as described in 27.5.6.2/3:</p>\n<blockquote>\n<p id=\"so_17736745_17736828_4\"><code>ios_base&amp; left(ios_base&amp; str);</code><br>\n  Effects: Calls <code>str.setf(ios_base::left, ios_base::adjustfield).</code></br></p>\n</blockquote></li>\n<li><p><code>std::setw</code>, on the other hand, is described in 27.7.5/7</p>\n<blockquote>\n<p id=\"so_17736745_17736828_5\">unspecified <code>setw(int n);</code><br>\n  Returns: An object of unspecified type such that if out is an instance of <code>basic_ostream&lt;charT, traits&gt;</code> then the expression <code>out &lt;&lt; setw(n)</code> behaves as if it called <code>f(out, n)</code>, or if in is an object of type <code>basic_istream&lt;charT, traits&gt;</code> then the expression <code>in &gt;&gt; setw(n)</code> behaves as if it called <code>f(in, n)</code>, where the function <code>f</code> is defined as:</br></p>\n<pre><code>void f(ios_base&amp; str, int n) {\n  // set width\n  str.width(n);\n}\n</code></pre>\n<p id=\"so_17736745_17736828_6\">The expression out &lt;&lt; setw(n) shall have type basic_ostream&amp; and value out.\n  The expression in &gt;&gt; setw(n) shall have type basic_istream&amp; and value in.</p>\n</blockquote>\n<p>And indeed, the property <code>width</code> is reset to <code>0</code> after the occurrence of a formatted output operation. E.g. in the description of <code>operator&lt;&lt;</code> when applied to strings (i.e. when you use the <code>&lt;&lt;</code>-syntax to output a string), the order of operations in described by 27.7.3.6.4/5 (emphasis mine):</p>\n<blockquote>\n<p id=\"so_17736745_17736828_7\">Padding is determined as described in 22.4.2.2.2. The n characters starting at s are widened using <code>out.widen</code> (27.5.5.3). The widened characters and any required padding are inserted into out. <strong>Calls <code>width(0)</code></strong>.</p>\n</blockquote>\n<p>In the case of a formatted output operation for a numeric types (27.7.3.6.2/1,2,3), the <code>std::num_put</code> (which is a <code>std::locale::facet</code>) template is used to convert the number into a string and print it. 22.4.2.2 describes in detail how that operation is performed, and its final step (after the string has been outputted) resets the width to <code>0</code> (22.4.2.2.2/5, stage 3, at the end):</p>\n<blockquote>\n<p id=\"so_17736745_17736828_8\"><code>str.width(0)</code> is called</p>\n</blockquote></li>\n</ol>\n<p>Further study of the effects of the various IO manipulators reveals that in fact, <code>std:setw</code> is <em>the only</em> manipulator that takes effect only on the following (formatted) output operation. See also <a href=\"https://stackoverflow.com/questions/1532640/which-iomanip-manipulators-are-sticky\">Which iomanipulators are 'sticky'?</a>, especially Charles Bailey's answer, for a comparison of the \"stickiness\" of the different manipulators.</p>\n</hr>", "OwnerUserId": "777186", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T10:32:10.783", "Id": "17736828", "Score": "0", "CreationDate": "2013-07-19T01:43:55.633", "LastActivityDate": "2013-07-19T02:49:16.280"}, "17736745": {"CommentCount": "2", "AcceptedAnswerId": "17736914", "PostTypeId": "1", "LastEditorUserId": "131433", "CreationDate": "2013-07-19T01:32:57.177", "LastActivityDate": "2013-07-19T02:49:16.280", "LastEditDate": "2013-07-19T01:50:29.380", "ViewCount": "764", "FavoriteCount": "1", "Title": "Exploring C++, Exploring Formatting Challenge, using fill and setw, confused about the output", "Id": "17736745", "Score": "0", "Body": "<p>So the challenge is to write a program with this output:</p>\n<pre><code>000042\n420000\n42\n-42-\n</code></pre>\n<p>My first attempt was something like this:</p>\n<pre><code>int fortyTwo = 42;\n\ncout &lt;&lt; setfill('0') &lt;&lt; setw(6) &lt;&lt; fortyTwo &lt;&lt; endl;\ncout &lt;&lt; fortyTwo &lt;&lt; setfill('0') &lt;&lt; setw(6) &lt;&lt; endl;\ncout &lt;&lt; fortyTwo &lt;&lt; endl;\ncout &lt;&lt; setfill('-') &lt;&lt; setw(4) &lt;&lt; fortyTwo &lt;&lt; setfill('-') &lt;&lt; endl;\n</code></pre>\n<p>Which gave me something like this:</p>\n<pre><code>000042\n42\n000042\n42-- (sometimes just -42)\n</code></pre>\n<p>Here is the author's solution:</p>\n<pre><code>cout &lt;&lt; setfill('0') &lt;&lt; setw(6) &lt;&lt; 42 &lt;&lt; endl;\ncout &lt;&lt; left &lt;&lt; setw(6) &lt;&lt; 42 &lt;&lt; endl;\ncout &lt;&lt; 42 &lt;&lt; endl;\ncout &lt;&lt; setfill('-') &lt;&lt; setw(4) &lt;&lt; -42 &lt;&lt; endl;\n</code></pre>\n<p>Why does the author only use setfill once?\nHow does setfill work for the first two lines but stop all of a sudden at line 3?\nHow does putting setfill('-') and setw(4) before -42 produce -42- instead of --42?\nWhat is the left alignment operator needed for?</p>\n<p>Finally why doesn't my version produce the correct output? </p>\n", "Tags": "<c++>", "OwnerUserId": "1181657", "AnswerCount": "3"}, "17736812": {"ParentId": "17736745", "CommentCount": "0", "Body": "<p>setw() only affects the next output. Every other question is pretty much a consequence of this behaviour. That is, unless you try to widen the output, no fill character or alignment will take place.</p>\n", "OwnerUserId": "1484212", "PostTypeId": "2", "Id": "17736812", "Score": "0", "CreationDate": "2013-07-19T01:41:56.957", "LastActivityDate": "2013-07-19T01:41:56.957"}, "bq_ids": {"n4140": {"so_17736745_17736828_7": {"section_id": 2306, "quality": 0.5238095238095238, "length": 11}, "so_17736745_17736828_1": {"section_id": 2328, "quality": 0.9047619047619048, "length": 19}, "so_17736745_17736828_5": {"section_id": 2330, "quality": 0.9032258064516129, "length": 28}, "so_17736745_17736828_2": {"section_id": 2328, "quality": 0.9, "length": 9}, "so_17736745_17736828_6": {"section_id": 2330, "quality": 0.75, "length": 12}}, "n3337": {"so_17736745_17736828_7": {"section_id": 2294, "quality": 0.8095238095238095, "length": 17}, "so_17736745_17736828_1": {"section_id": 2316, "quality": 0.9047619047619048, "length": 19}, "so_17736745_17736828_5": {"section_id": 2318, "quality": 0.9032258064516129, "length": 28}, "so_17736745_17736828_2": {"section_id": 2316, "quality": 0.9, "length": 9}, "so_17736745_17736828_6": {"section_id": 2318, "quality": 0.75, "length": 12}}, "n4659": {"so_17736745_17736828_7": {"section_id": 2580, "quality": 0.5238095238095238, "length": 11}, "so_17736745_17736828_1": {"section_id": 2603, "quality": 0.9047619047619048, "length": 19}, "so_17736745_17736828_5": {"section_id": 2605, "quality": 0.9032258064516129, "length": 28}, "so_17736745_17736828_2": {"section_id": 2603, "quality": 0.9, "length": 9}, "so_17736745_17736828_6": {"section_id": 2605, "quality": 0.75, "length": 12}}}, "17736914": {"ParentId": "17736745", "CommentCount": "1", "Body": "<p><code>setfill</code> (like most <code>ostream</code> modifiers, e.g. <code>hex</code>, <code>dec</code>, <code>left</code>, the binary one, precision IIRC too) keep their value once you change them.</p>\n<p>Let me back up a bit.</p>\n<p><code>std::ostream</code> (the class <code>cout</code> is an instance of) has internal formatting values. Internal variables that tell it what the filler char is, whether to print in hex etc.</p>\n<p>Most of these values (maybe all except for <code>width</code>) don't change unless YOU change them. So once you set the <code>fill</code>, it stays that way until YOU change it to something else.</p>\n<p><code>width</code> is different (unfortunately :( I'm sure they had their reasons). After you set it, it only stays for the next item you write - then it resets to 0.</p>\n<p>Second thing you seem to have missed, is that the <code>width</code> and <code>fill</code> etc. don't print anything, they only change the internal state and hence <strong>apply to what comes after them</strong>.</p>\n<p>So lets analyze your solution:</p>\n<p>You set the <code>fill</code> to 0, set the <code>width</code> to 6, print 42 - which is 2 characters and hence expanded to 6 by adding four 0-s (to the left, because the default is right justified text). Now you're printed something, so <code>width</code> resets (!)</p>\n<p>Now you started a new line (<code>endl</code>), printed 42 (bit the width is reset, so it just prints it at whatever width, no need to fill!), set the <code>fill</code> to 0 (it already was! <code>fill</code> stays until you change it), set the width to 6 (but for the <strong>next</strong> value, not the one already printed!) and go for a new line.</p>\n<p>Now you print 42 (<code>width</code> is 6, so it fills the 4 extra chars needed with 0) (the <code>width</code> reset after your print) and go for a new line.</p>\n<p>You set the fill to - and the width to 4, and print 42 - which is expanded to 4 characters by adding two - on the left side (not like you wrote... weird that), and set the fill again to - (unneeded, and also unused as you don't print anything after that - <code>setfill</code> and other formattings only affects things that happen after them!)</p>\n", "OwnerUserId": "1268551", "PostTypeId": "2", "Id": "17736914", "Score": "0", "CreationDate": "2013-07-19T01:53:05.200", "LastActivityDate": "2013-07-19T01:53:05.200"}});