post_cb({"bq_ids": {"n4659": {"so_45841511_45841617_1": {"length": 11, "section_id": 5016, "quality": 1.0}, "so_45841511_45841617_0": {"length": 12, "section_id": 5016, "quality": 1.0}}}, "45841638": {"ParentId": "45841511", "Score": "0", "CreationDate": "2017-08-23T13:50:14.383", "LastActivityDate": "2017-08-23T13:57:06.833", "LastEditDate": "2017-08-23T13:57:06.833", "OwnerUserId": "5245033", "LastEditorUserId": "5245033", "Body": "<p>Because </p>\n<blockquote>\n<p id=\"so_45841511_45841638_0\">If an optional contains a value, the value is guaranteed to be\n  allocated as part of the optional object footprint, i.e. no dynamic\n  memory allocation ever takes place. Thus, an optional object models an\n  object, not a pointer, even though the operator*() and operator-&gt;()\n  are defined.</p>\n</blockquote>\n<p><a href=\"http://en.cppreference.com/w/cpp/utility/optional\" rel=\"nofollow noreferrer\">http://en.cppreference.com/w/cpp/utility/optional</a></p>\n<p>On the other hand, <code>std::variant</code> used to support allocators in earlier edition of the Standard, so I have the feeling this specialization is a remnant of those days.</p>\n", "Id": "45841638", "PostTypeId": "2", "CommentCount": "2"}, "45841511": {"Tags": "<c++><allocator>", "ViewCount": "57", "CreationDate": "2017-08-23T13:44:54.217", "Title": "Why there is no std::uses_allocator<std::optional>?", "CommentCount": "1", "AnswerCount": "2", "Score": "2", "OwnerUserId": "5329481", "Id": "45841511", "LastActivityDate": "2017-08-23T14:11:45.353", "Body": "<p>There is an specialization of uses_allocator for std::variant, but not for std::optional. Why?</p>\n", "PostTypeId": "1"}, "45841617": {"ParentId": "45841511", "Score": "0", "CreationDate": "2017-08-23T13:49:13.710", "LastActivityDate": "2017-08-23T14:11:45.353", "LastEditDate": "2017-08-23T14:11:45.353", "OwnerUserId": "135862", "LastEditorUserId": "135862", "Body": "<p>From the <a href=\"http://eel.is/c++draft/optional.optional#1\" rel=\"nofollow noreferrer\">Standard 23.6.3.1</a>:  </p>\n<blockquote>\n<p id=\"so_45841511_45841617_0\"><em>Implementations are not permitted to use additional storage, such as dynamic memory, to allocate its contained value.</em></p>\n</blockquote>\n<p>So there is no need for an allocator.</p>\n<p>Though the same is true for variant <a href=\"http://eel.is/c++draft/variant#variant-1\" rel=\"nofollow noreferrer\">23.7.3.1</a>:  </p>\n<blockquote>\n<p id=\"so_45841511_45841617_1\"><em>Implementations are not permitted to use additional storage, such as dynamic memory, to allocate the contained value.</em></p>\n</blockquote>\n<p>Apparently, the <code>uses_allocator</code> specialization for <code>std::variant</code> <a href=\"http://cplusplus.github.io/LWG/lwg-defects.html#2901\" rel=\"nofollow noreferrer\">was removed for C++17</a> (HT: @K-ballo!). </p>\n", "Id": "45841617", "PostTypeId": "2", "CommentCount": "0"}});