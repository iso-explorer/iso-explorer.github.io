post_cb({"28778746": {"ParentId": "28778672", "PostTypeId": "2", "CommentCount": "2", "CreationDate": "2015-02-28T06:07:00.327", "Score": "0", "LastEditorUserId": "2877241", "LastEditDate": "2015-02-28T06:12:38.193", "Id": "28778746", "OwnerUserId": "2877241", "Body": "<p>From the C++ Standard</p>\n<blockquote>\n<p id=\"so_28778672_28778746_0\">1.3.14 [defns.parameter]</p>\n<p id=\"so_28778672_28778746_1\">parameter formal argument\n  <strong>formal parameter</strong></p>\n<p id=\"so_28778672_28778746_2\"> object or reference declared as part of a\n  function declaration or definition or in the catch clause of an\n  exception handler that acquires a value on entry to the function or\n  handler </p>\n</blockquote>\n<p>From the C Standard</p>\n<blockquote>\n<p id=\"so_28778672_28778746_3\">3.16 1 parameter\n  <strong>formal parameter</strong> formal argument (deprecated)</p>\n<p id=\"so_28778672_28778746_4\">object declared as part of a function declaration or definition that\n  acquires a value on entry to the function, or an identifier from the\n  comma-separated list bounded by the parentheses immediately following\n  the macro name in a function-like macro definition</p>\n</blockquote>\n<p>Thus for example in this function declaration</p>\n<pre><code>void push(struct stack *stack1,int data);\n</code></pre>\n<p><code>stack1</code> and <code>data</code> are formal parameters. They require values (arguments) on entry to the function.\nTake into account that because stack1 is declared as pointer to struct stack then any changes of the object pointed to by the pointer will be keep in the object after exiting the function.</p>\n", "LastActivityDate": "2015-02-28T06:12:38.193"}, "28778672": {"CommentCount": "0", "ViewCount": "45", "PostTypeId": "1", "LastEditorUserId": "2877241", "CreationDate": "2015-02-28T05:57:51.617", "LastActivityDate": "2015-02-28T06:12:38.193", "Title": "WIll the stack pointer in the function would be formal parameter?", "LastEditDate": "2015-02-28T06:01:31.283", "Id": "28778672", "Score": "-1", "Body": "<pre><code>    #include&lt;iostream&gt;\n    #include&lt;stdio.h&gt;\n    #include&lt;stdlib.h&gt;\n\n    using namespace std;\n\nstruct node\n\n{\n\n  int data;\n\n  struct node *next;\n\n};\n\n\n\nstruct stack\n\n{\n\nnode *head;\n\n};\n\nvoid push(struct stack *stack1,int data)\n{\n\n   struct node *new_node= new node;\n\n   new_node-&gt;data=data;\n\n   if(stack1-&gt;head!=NULL)\n\n   new_node-&gt;next=stack1-&gt;head;\n\n   else\n\n    new_node-&gt;next=NULL;\n\n    stack1-&gt;head=new_node;\n\n }\n\n\nvoid pop(struct stack *stack1)\n\n{  \n\n  node *temp= new node;\n\n  if(stack1-&gt;head==NULL)\n\n   cout&lt;&lt;\"EMPTY\"&lt;&lt;endl;\n\n   else\n\n   {\n\n     temp=stack1-&gt;head;\n\n     stack1-&gt;head=(stack1-&gt;head)-&gt;next;\n\n     int t;\n\n     t=temp-&gt;data;\n\n     free(temp);\n\n     cout&lt;&lt;t&lt;&lt;\" \";\n\n   }\n\n}\n\n\n\nvoid show(struct stack *stack1)\n\n{\n\n  node *new_node=new node;\n\n  new_node=stack1-&gt;head;\n\n   if(stack1-&gt;head==NULL)\n\n  {\n\n    cout&lt;&lt;\"EMPTY\"&lt;&lt;endl;\n\n    return;\n\n  }\n\n   while(new_node!=NULL)\n\n  {\n\n     cout&lt;&lt;new_node-&gt;data&lt;&lt;\" \";\n\n     new_node=new_node-&gt;next;\n\n  }\n\n}\n\n\n\nvoid peek(struct stack *stack1)\n\n{\n\n   if(stack1-&gt;head==NULL)\n\n   cout&lt;&lt;\"EMPTY\";\n\n   else\n\n   cout&lt;&lt;stack1-&gt;head-&gt;data&lt;&lt;\" \";\n\n}\n\n\n\n\n\nint main()\n\n{\n\n  int temp,temp2;\n\n  struct stack *stack1=new stack;\n\n  stack1-&gt;head=NULL;\n\n  while(1)\n\n  { \n\n     cin&gt;&gt;temp;\n\n     switch(temp) \n\n   {\n\n     case 0: exit(0);\n\n\n\n     case 1: cin&gt;&gt;temp2;\n\n             cout&lt;&lt;endl;\n\n             push(stack1,temp2);\n\n             break;\n\n\n\n     case 2: pop(stack1);\n\n             cout&lt;&lt;endl;\n\n             break;\n\n\n\n     case 3: peek(stack1);\n\n             cout&lt;&lt;endl;\n\n             break;\n\n\n\n     case 4: show(stack1);\n\n             cout&lt;&lt;endl;\n\n             break;\n\n   }\n\n  }\n\n  return 0;\n\n }       \n</code></pre>\n", "Tags": "<c++><c><stack>", "OwnerUserId": "4516275", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_28778672_28778746_2": {"section_id": 5768, "quality": 1.0, "length": 16}, "so_28778672_28778746_4": {"section_id": 5768, "quality": 0.9090909090909091, "length": 20}}, "n3337": {"so_28778672_28778746_3": {"section_id": 5541, "quality": 0.7142857142857143, "length": 5}, "so_28778672_28778746_2": {"section_id": 5541, "quality": 1.0, "length": 16}, "so_28778672_28778746_1": {"section_id": 5541, "quality": 1.0, "length": 5}, "so_28778672_28778746_4": {"section_id": 5541, "quality": 0.9090909090909091, "length": 20}}, "n4659": {"so_28778672_28778746_2": {"section_id": 7225, "quality": 1.0, "length": 16}, "so_28778672_28778746_4": {"section_id": 7225, "quality": 0.9090909090909091, "length": 20}}}});