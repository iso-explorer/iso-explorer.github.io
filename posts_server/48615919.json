post_cb({"bq_ids": {"n4140": {"so_48615919_48616046_1": {"length": 17, "quality": 0.9444444444444444, "section_id": 5440}, "so_48615919_48616046_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 5440}, "so_48615919_48616046_3": {"length": 5, "quality": 1.0, "section_id": 5440}}, "n3337": {"so_48615919_48616046_1": {"length": 17, "quality": 0.9444444444444444, "section_id": 5235}, "so_48615919_48616046_3": {"length": 5, "quality": 1.0, "section_id": 5235}, "so_48615919_48616046_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 5235}}, "n4659": {"so_48615919_48616046_1": {"length": 17, "quality": 0.9444444444444444, "section_id": 6867}, "so_48615919_48616046_3": {"length": 5, "quality": 1.0, "section_id": 6867}, "so_48615919_48616046_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 6867}}}, "48616046": {"Id": "48616046", "PostTypeId": "2", "Body": "<p>Quotation from C++0x specification:</p>\n<blockquote>\n<p id=\"so_48615919_48616046_0\">The type denoted by decltype(e) is defined as follows:</p>\n<p id=\"so_48615919_48616046_1\">\u2014 if e is an unparenthesized id-expression or a class member access (5.2.5), decltype(e) is the type of the entity named by e. If there is no such entity, or if e names a set of overloaded functions, the program is ill-formed;</p>\n<p id=\"so_48615919_48616046_2\">\u2014 otherwise, if e is a function call (5.2.2) or an invocation of an overloaded operator (parentheses around e are ignored), decltype(e) is the return type of the statically chosen function;</p>\n<p id=\"so_48615919_48616046_3\">\u2014 otherwise, if e is an lvalue, decltype(e) is T&amp;, where T is the type of e;</p>\n<p id=\"so_48615919_48616046_4\">\u2014 otherwise, decltype(e) is the type of e.</p>\n</blockquote>\n<p>I guess the usage of reference (T&amp;) make it more efficient.</p>\n<p>From discussion result in <a href=\"https://juanchopanzacpp.wordpress.com/2014/05/11/want-speed-dont-always-pass-by-value/\" rel=\"nofollow noreferrer\">WANT SPEED? DON\u2019T (ALWAYS) PASS BY VALUE.</a> </p>\n<blockquote>\n<p id=\"so_48615919_48616046_5\">Involving only lvalues, in the absence of move semantics, the \u201cpass by value\u201d version results in one extra object being created, via a copy construction. </p>\n</blockquote>\n<p>Therefore, the use of `decltype', i.e. 'pass by reference' improved the efficiency of your code.</p>\n", "LastEditorUserId": "2890575", "LastActivityDate": "2018-02-05T06:08:40.377", "Score": "2", "CreationDate": "2018-02-05T04:51:59.060", "ParentId": "48615919", "CommentCount": "4", "OwnerUserId": "2890575", "LastEditDate": "2018-02-05T06:08:40.377"}, "48615919": {"ViewCount": "50", "Body": "<p>(Updated to remove decltype and replace with static_cast, same results)</p>\n<p>In the code example, Adding in the cast in the macro MAX, the code performs faster. I can't figure out why as it seems that it should be identical. This happens with two different ARM compilers, GCC (and armclang in larger codebase). Any thoughts on this would be very helpful.</p>\n<p>In the code below, when defining WITH_CAST, the results of the compilation are significantly improved (with identical results in my larger codebase). The cast performed appears to be superfluous. I am running this within Keil 5.25pre2 (only as a simulator). I've used Keil simulator to check performance speed, by looking at what the t1 timer shows in terms of micro-seconds passed.</p>\n<p>Snippet from code:</p>\n<pre><code>#if defined (WITH_CAST)\n#define MAX(a,b) (((a) &gt; (b)) ? (static_cast&lt;mytype&gt;(a)) : (static_cast&lt;mytype&gt;(b)))\n#else\n#define MAX(a,b) (((a) &gt; (b)) ? ((a)) : ((b)))\n#endif\n</code></pre>\n<p>GNU Arm Tools Embedded v. 7 2017-q4-major.</p>\n<p>Compiler options:\n-c -mcpu=cortex-m4 -mthumb -gdwarf-2 -MD -Wall -O -mapcs-frame -mthumb-interwork -std=c++14 -Ofast -I./RTE/_Target_1 -IC:/Keil_v525pre/ARM/PACK/ARM/CMSIS/5.2.0/CMSIS/Include -IC:/Keil_v525pre/ARM/PACK/ARM/CMSIS/5.2.0/Device/ARM/ARMCM4/Include -I\"C:/Program Files (x86)/GNU Tools ARM Embedded/7 2017-q4-major/arm-none-eabi/include\" -I\"C:/Program Files (x86)/GNU Tools ARM Embedded/7 2017-q4-major/lib/gcc/arm-none-eabi/7.2.1/include\" -I\"C:/Program Files (x86)/GNU Tools ARM Embedded/7 2017-q4-major/arm-none-eabi/include/c++/7.2.1\" -I\"C:/Program Files (x86)/GNU Tools ARM Embedded/7 2017-q4-major/arm-none-eabi/include/c++/7.2.1/arm-none-eabi\" -D__UVISION_VERSION=\"525\" -D__GCC -D__GCC_VERSION=\"721\" -D_RTE_ -DARMCM4 -Wa,-alhms=\"*.lst\" -o *.o</p>\n<p>Assembler options:\n-mcpu=cortex-m4 -mthumb --gdwarf-2 -mthumb-interwork --MD <em>.d -I./RTE/_Target_1 -IC:/Keil_v525pre/ARM/PACK/ARM/CMSIS/5.2.0/CMSIS/Include -IC:/Keil_v525pre/ARM/PACK/ARM/CMSIS/5.2.0/Device/ARM/ARMCM4/Include -I\"C:/Program Files (x86)/GNU Tools ARM Embedded/7 2017-q4-major/arm-none-eabi/include\" -I\"C:/Program Files (x86)/GNU Tools ARM Embedded/7 2017-q4-major/lib/gcc/arm-none-eabi/7.2.1/include\" -I\"C:/Program Files (x86)/GNU Tools ARM Embedded/7 2017-q4-major/arm-none-eabi/include/c++/7.2.1\" -I\"C:/Program Files (x86)/GNU Tools ARM Embedded/7 2017-q4-major/arm-none-eabi/include/c++/7.2.1/arm-none-eabi\" -alhms=\"</em>.lst\" -o *.o</p>\n<p>Linker options:\n-T ./RTE/Device/ARMCM4/gcc_arm.ld -mcpu=cortex-m4 -mthumb -mthumb-interwork -Wl,-Map=\"./Optimization.map\"\n-o Optimization.elf\n*.o -lm</p>\n<pre><code>#include &lt;cstdlib&gt;\n#include &lt;cstring&gt;\n#include &lt;cstdint&gt;\n\n#define WITH_CAST\nstruct mytype {\n uint32_t value;\n __attribute__((const, always_inline)) constexpr friend bool operator&gt;(const mytype &amp; t, const mytype &amp; a) {\n  return t.value &gt; a.value;\n }\n};\nstatic mytype output_buf [32];\nstatic mytype * output_memory_ptr = output_buf;\nstatic mytype * volatile * output_memory_tmpp = &amp;output_memory_ptr;\nstatic mytype input_buf [32];\nstatic mytype * input_memory_ptr = input_buf;\nstatic mytype * volatile * input_memory_tmpp = &amp;input_memory_ptr;\n#if defined (WITH_CAST)\n#define MAX(a,b) (((a) &gt; (b)) ? (static_cast&lt;mytype&gt;(a)) : (static_cast&lt;mytype&gt;(b)))\n#else\n#define MAX(a,b) (((a) &gt; (b)) ? ((a)) : ((b)))\n#endif\nint main (void) {\n const mytype * input = *input_memory_tmpp;\n mytype * output = *output_memory_tmpp;\n mytype p = input[0];\n mytype c = input[1];\n mytype pc = MAX(p, c);\n output[0] = pc;\n for (int i = 1; i &lt; 31; i ++) {\n  mytype n = input[i + 1];\n  mytype cn = MAX(c, n);\n  output[i] = MAX(pc, cn);\n  p = c;\n  c = n;\n  pc = cn;\n }\n output[31] = pc;\n}\n</code></pre>\n", "Title": "Arm GNU Compiler: Assembly generated from ternary optimized by superfluous cast", "CreationDate": "2018-02-05T04:33:32.620", "LastActivityDate": "2018-02-05T06:29:13.633", "CommentCount": "3", "LastEditDate": "2018-02-05T06:29:13.633", "PostTypeId": "1", "LastEditorUserId": "832745", "Id": "48615919", "Score": "0", "OwnerUserId": "832745", "Tags": "<c++><gcc><assembly>", "AnswerCount": "1"}});