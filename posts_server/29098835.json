post_cb({"29098835": {"CommentCount": "1", "AcceptedAnswerId": "29098959", "PostTypeId": "1", "LastEditorUserId": "2756719", "CreationDate": "2015-03-17T12:16:03.510", "LastActivityDate": "2015-03-17T21:21:31.727", "LastEditDate": "2015-03-17T18:45:44.957", "ViewCount": "1807", "FavoriteCount": "2", "Title": "Can parameter pack function arguments be defaulted?", "Id": "29098835", "Score": "20", "Body": "<p>This is a point about which gcc 4.9.2 and clang 3.5.2 are in sharp\ndisagreement. The program:</p>\n<pre><code>template&lt;typename ...Ts&gt;\nint foo(int i = 0, Ts &amp;&amp;... args)\n{\n    return i + sizeof...(Ts);\n}\n\nint main()\n{\n    return foo();\n}\n</code></pre>\n<p>compiles without comment from gcc (<code>-std=c++11 -Wall -pedantic</code>). Clang says:</p>\n<pre><code>error: missing default argument on parameter 'args'\n</code></pre>\n<p>With <code>foo</code> amended to:</p>\n<pre><code>template&lt;typename ...Ts&gt;\nint foo(int i = 0, Ts &amp;&amp;... args = 0)\n{\n    return i + sizeof...(Ts);\n}\n</code></pre>\n<p>clang has no complaints, but gcc says:</p>\n<pre><code>error: parameter pack \u2018args\u2019 cannot have a default argument\n</code></pre>\n<p>Which compiler is right?</p>\n", "Tags": "<c++><c++11><gcc><clang><variadic-templates>", "OwnerUserId": "1362568", "AnswerCount": "2"}, "29098959": {"ParentId": "29098835", "PostTypeId": "2", "CommentCount": "7", "Body": "<p>From 8.3.6 ([dcl.fct.default])/3:</p>\n<blockquote>\n<p id=\"so_29098835_29098959_0\">A default argument shall not be specified for a parameter pack.</p>\n</blockquote>\n<p>From 8.3.6 ([dcl.fct.default])/4:</p>\n<blockquote>\n<p id=\"so_29098835_29098959_1\">In a given function declaration, each parameter subsequent to a parameter with a default argument shall have a default argument supplied in this or a previous declaration or shall be a function parameter pack.</p>\n</blockquote>\n<p>So this allows code like <code>void f(int a = 10, Args ... args)</code>, or indeed like your first snippet. (Thanks to @T.C. for looking up the second sentence!)</p>\n", "OwnerUserId": "596781", "LastEditorUserId": "596781", "LastEditDate": "2015-03-17T21:21:31.727", "Id": "29098959", "Score": "15", "CreationDate": "2015-03-17T12:21:57.207", "LastActivityDate": "2015-03-17T21:21:31.727"}, "bq_ids": {"n4140": {"so_29098835_29098959_0": {"section_id": 3254, "quality": 1.0, "length": 5}, "so_29098835_29098959_1": {"section_id": 3255, "quality": 1.0, "length": 18}}, "n3337": {"so_29098835_29098959_0": {"section_id": 3126, "quality": 1.0, "length": 5}, "so_29098835_29098959_1": {"section_id": 3127, "quality": 1.0, "length": 18}}, "n4659": {"so_29098835_29098959_1": {"section_id": 4013, "quality": 1.0, "length": 18}, "so_29098835_29098959_0": {"section_id": 4012, "quality": 1.0, "length": 5}}}, "29099245": {"ParentId": "29098835", "CommentCount": "0", "Body": "<p>A Kerrek SB says, it's not possible. What you could do, instead, is using a <code>std::tuple</code></p>\n<pre><code>template &lt;class ... Args&gt;\nvoid foo( std::tuple&lt;Args...&gt; t = std::tuple&lt;int&gt;(0) )\n{}\n</code></pre>\n", "OwnerUserId": "2692339", "PostTypeId": "2", "Id": "29099245", "Score": "1", "CreationDate": "2015-03-17T12:35:46.887", "LastActivityDate": "2015-03-17T12:35:46.887"}});