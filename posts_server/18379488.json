post_cb({"18380021": {"ParentId": "18379488", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The <code># operator</code> replace the parameter given to him by a <em>string literal</em>.</p>\n<p>It means that :</p>\n<pre><code>#define TO_STR(arg) #arg\n\nconst char* ch1 = \"1\";\nTO_STR(ch1)    // &lt;- Will give \"ch1\"\n</code></pre>\n<p>From the standard :</p>\n<blockquote>\n<p id=\"so_18379488_18380021_0\"><strong>16.3.2 The # operator [cpp.stringize]</strong></p>\n<p id=\"so_18379488_18380021_1\">A <em>character string literal</em> is a <em>string-literal</em> with no prefix. If, in the replacement list, a <strong>parameter is immediately preceded by a <code>#</code> preprocessing token, both are replaced by a single character string literal preprocessing token that contains the spelling of the preprocessing token sequence for the corresponding argument.</strong></p>\n</blockquote>\n<p>So in you case, you try to concatenate (with the <code>## operator</code>) :</p>\n<pre><code>\"ch1\" ## \";\" ## \"ch2\"\n</code></pre>\n<p>That explains the result you get.</p>\n<p>As the MACRO are evaluted at preprocessing time, you cannot concatenate variables in the way you want to do it.</p>\n<p>If you are in C, you should use <a href=\"http://en.cppreference.com/w/c/string/byte/strcat\" rel=\"nofollow\"><code>strcat</code></a> for example.</p>\n<p>If you are in C++, why don't you use <a href=\"http://en.cppreference.com/w/cpp/string/basic_string\" rel=\"nofollow\"><code>std::string</code></a> or in C++11 you can use <a href=\"http://en.cppreference.com/w/cpp/io/c/snprintf\" rel=\"nofollow\"><code>snprintf</code></a>.</p>\n", "OwnerUserId": "1394283", "LastEditorDisplayName": "user283145", "LastEditDate": "2013-08-29T11:55:12.343", "Id": "18380021", "Score": "2", "CreationDate": "2013-08-22T12:09:09.243", "LastActivityDate": "2013-08-29T11:55:12.343"}, "18379555": {"ParentId": "18379488", "CommentCount": "0", "Body": "<p>Unfortunately since macros are eveluated at compile time you cannot use the values of your variables, this is the main limiting factor with macros. I.e. they cannot evaluate run-time values.</p>\n", "OwnerUserId": "2298137", "PostTypeId": "2", "Id": "18379555", "Score": "1", "CreationDate": "2013-08-22T11:47:34.683", "LastActivityDate": "2013-08-22T11:47:34.683"}, "bq_ids": {"n4140": {"so_18379488_18380021_1": {"section_id": 526, "quality": 0.9629629629629629, "length": 26}}, "n3337": {"so_18379488_18380021_1": {"section_id": 517, "quality": 0.9629629629629629, "length": 26}}, "n4659": {"so_18379488_18380021_1": {"section_id": 547, "quality": 0.9629629629629629, "length": 26}}}, "18379488": {"CommentCount": "1", "ViewCount": "372", "CreationDate": "2013-08-22T11:44:45.823", "LastActivityDate": "2013-08-29T11:55:12.343", "Title": "Use value of char* variable in macros", "AcceptedAnswerId": "18379555", "PostTypeId": "1", "Id": "18379488", "Score": "1", "Body": "<p>Can i have somethig like this?</p>\n<pre><code>#include &lt;stdio.h&gt;\n\n#define CAT2(a1, a2) #a1 ## \";\" ## #a2\n\nint main(void)\n{\n    const char *ch1 = \"1\";\n    const char *ch2 = \"2\";\n    puts(CAT2(ch1, ch2));\n}\n</code></pre>\n<p>Output: </p>\n<blockquote>\n<p id=\"so_18379488_18379488_0\">1;2</p>\n</blockquote>\n<p>But currently i have </p>\n<blockquote>\n<p id=\"so_18379488_18379488_1\">ch1;ch2</p>\n</blockquote>\n", "Tags": "<c++><c><macros><c-strings>", "OwnerUserId": "312896", "AnswerCount": "3"}, "18379650": {"ParentId": "18379488", "CommentCount": "0", "Body": "<p>You cannot do string concatenation using macros in the way you want. </p>\n<p>Use snprintf in order to prepare your string:</p>\n<pre><code>char tmp[20];\nsnprintf(tmp, sizeof(tmp), \"%s;%s\", ch1, ch2);\n</code></pre>\n<p>Macros are expanded in the compile time, before actual compilation, and it can't know the runtime values.</p>\n<p>You can wrap above code into the function that will return tmp (just don't forget to make tmp static variable to prevent leaking).</p>\n<pre><code>char* cat2(char *ch1, char* ch2)\n{\n    static char tmp[50];\n    snprintf(tmp, sizeof(tmp), \"%s;%s\", ch1, ch2);\n    return tmp;\n}\n\n// inside main\nputs(cat2(ch1, ch2));\n</code></pre>\n", "OwnerUserId": "133707", "PostTypeId": "2", "Id": "18379650", "Score": "1", "CreationDate": "2013-08-22T11:52:13.777", "LastActivityDate": "2013-08-22T11:52:13.777"}});