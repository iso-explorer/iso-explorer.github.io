post_cb({"26029456": {"ParentId": "26029277", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>The standard defines <em>new-type-id</em> as the longest sequence of <em>new-declarators</em>. There is also a note, which illustrates a similar situation (although it allocates pointers to functions):</p>\n<blockquote>\n<p id=\"so_26029277_26029456_0\"><strong>5.3.4 New [expr.new]</strong></p>\n<p id=\"so_26029277_26029456_1\">....</p>\n<p id=\"so_26029277_26029456_2\"><em>new-type-id:</em><br>\n  \u00a0\u00a0\u00a0\u00a0<em>type-specifier-seq</em> <em>new-declarator</em><sub><em>opt</em></sub></br></p>\n<p id=\"so_26029277_26029456_3\"><em>new-declarator:</em><br>\n  \u00a0\u00a0\u00a0\u00a0<em>ptr-operator new-declarator</em><sub><em>opt</em></sub><br>\n  \u00a0\u00a0\u00a0\u00a0<em>noptr-new-declarator</em></br></br></p>\n<p id=\"so_26029277_26029456_4\"><em>noptr-new-declarator:</em><br>\n  \u00a0\u00a0\u00a0\u00a0[\u00a0<em>expression</em>\u00a0]\u00a0\n  <em>attribute-specifier-seq</em><sub><em>opt</em></sub><br>\n  \u00a0\u00a0\u00a0\u00a0<em>noptr-new-declarator</em>\u00a0\n  [\u00a0<em>constant-expression</em>\u00a0]\u00a0\n  <em>attribute-specifier-seq</em>\n<sub><em>opt</em></sub></br></br></p>\n<p id=\"so_26029277_26029456_5\">....</p>\n<p id=\"so_26029277_26029456_6\">The <em>new-type-id</em> in a <em>new-expression</em> is the longest possible sequence of <em>new-declarators</em>.\n  [ <em>Note</em>: this prevents ambiguities between the declarator operators <code>&amp;</code>, <code>&amp;&amp;</code>, <code>*</code>, and <code>[]</code> and\n  their expression counterparts. \u2014\u00a0<em>end note</em> ] [ <em>Example</em>:</p>\n<pre><code>new int * i; // syntax error: parsed as (new int*) i, not as (new int)*i\n</code></pre>\n<p id=\"so_26029277_26029456_7\">The <code>*</code> is the pointer declarator and not the multiplication operator. \u2014\u00a0<em>end example</em> ]</p>\n<p id=\"so_26029277_26029456_8\">[ <em>Note</em>: parentheses in a <em>new-type-id</em> of a <em>new-expression</em> can\n  have surprising effects. [ <em>Example</em>:</p>\n<pre><code>new int(*[10])(); // error\n</code></pre>\n<p id=\"so_26029277_26029456_9\">is ill-formed because the binding is</p>\n<pre><code>(new int) (*[10])(); // error\n</code></pre>\n<p id=\"so_26029277_26029456_10\">Instead, the explicitly parenthesized version of the <code>new</code> operator\n  can be used to create objects of compound types (3.9.2):</p>\n<pre><code>new (int (*[10])());\n</code></pre>\n<p id=\"so_26029277_26029456_11\">allocates an array of 10 pointers to functions (taking no argument and\n  returning <code>int</code>. \u2014\u00a0<em>end example</em> ] \u2014\u00a0<em>end note</em> ]</p>\n</blockquote>\n", "OwnerUserId": "3246555", "LastEditorUserId": "3246555", "LastEditDate": "2014-09-26T01:20:24.900", "Id": "26029456", "Score": "10", "CreationDate": "2014-09-25T02:18:51.413", "LastActivityDate": "2014-09-26T01:20:24.900"}, "26029277": {"CommentCount": "4", "AcceptedAnswerId": "26029456", "CreationDate": "2014-09-25T01:57:04.200", "LastActivityDate": "2014-09-26T01:20:24.900", "PostTypeId": "1", "ViewCount": "363", "FavoriteCount": "1", "Title": "Why is new int (*)[3] an error?", "Id": "26029277", "Score": "8", "Body": "<pre><code>typedef int (*A)[3];\n\nint (**p)[3] = new A;              // OK\nint (**q)[3] = new (int(*)[3]);    // OK\nint (**r)[3] = new int (*)[3];     // error\n</code></pre>\n<p>The error from GCC is <code>error: expected primary-expression before ')' token</code> . Why are the extra parentheses required in this expression?</p>\n", "Tags": "<c++><syntax-error><new-operator>", "OwnerUserId": "1505939", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_26029277_26029456_10": {"section_id": 6085, "quality": 0.9166666666666666, "length": 11}, "so_26029277_26029456_6": {"section_id": 6084, "quality": 0.7368421052631579, "length": 14}, "so_26029277_26029456_7": {"section_id": 393, "quality": 0.5714285714285714, "length": 4}, "so_26029277_26029456_8": {"section_id": 6085, "quality": 0.7777777777777778, "length": 7}, "so_26029277_26029456_4": {"section_id": 6082, "quality": 0.7142857142857143, "length": 5}, "so_26029277_26029456_11": {"section_id": 6085, "quality": 0.6666666666666666, "length": 8}}, "n3337": {"so_26029277_26029456_10": {"section_id": 5853, "quality": 0.9166666666666666, "length": 11}, "so_26029277_26029456_6": {"section_id": 5852, "quality": 0.7368421052631579, "length": 14}, "so_26029277_26029456_7": {"section_id": 384, "quality": 0.5714285714285714, "length": 4}, "so_26029277_26029456_8": {"section_id": 5853, "quality": 0.7777777777777778, "length": 7}, "so_26029277_26029456_4": {"section_id": 5850, "quality": 0.7142857142857143, "length": 5}, "so_26029277_26029456_11": {"section_id": 5853, "quality": 0.6666666666666666, "length": 8}}, "n4659": {"so_26029277_26029456_10": {"section_id": 7581, "quality": 0.9166666666666666, "length": 11}, "so_26029277_26029456_6": {"section_id": 7580, "quality": 0.7368421052631579, "length": 14}, "so_26029277_26029456_7": {"section_id": 410, "quality": 0.5714285714285714, "length": 4}, "so_26029277_26029456_8": {"section_id": 7581, "quality": 0.6666666666666666, "length": 6}, "so_26029277_26029456_4": {"section_id": 7578, "quality": 0.7142857142857143, "length": 5}, "so_26029277_26029456_11": {"section_id": 7581, "quality": 0.6666666666666666, "length": 8}}}});