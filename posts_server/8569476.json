post_cb({"bq_ids": {"n4140": {"so_8569476_8569519_0": {"length": 26, "quality": 1.0, "section_id": 252}}, "n3337": {"so_8569476_8569519_0": {"length": 26, "quality": 1.0, "section_id": 243}}, "n4659": {"so_8569476_8569519_0": {"length": 26, "quality": 1.0, "section_id": 259}}}, "8569530": {"Id": "8569530", "PostTypeId": "2", "Body": "<p>Use a <code>constexpr</code> or a <code>typedef</code> for your common value. Then you only have to change the common value once and all the explicit instantiations will change.</p>\n<p>That's about the best you can do. You are not allowed to do an explicit instantiation using a <code>tyepdef</code> name.</p>\n", "LastActivityDate": "2011-12-20T00:50:17.893", "CommentCount": "1", "CreationDate": "2011-12-20T00:50:17.893", "ParentId": "8569476", "Score": "2", "OwnerUserId": "167958"}, "8569476": {"ViewCount": "1595", "Body": "<p>I am trying to instantiate a template externaly however I would like o use a typedef in the instantiation clause. I think the example says more than thousand words:</p>\n<pre><code>typedef myTemplate_base&lt;commonValue&gt; myTemplate; //in 99% of the cases I use this so I want a shorthand\nextern template class myTemplate; //wont work/compiler error class infront of typedef\n</code></pre>\n<p>I get the same error if I try to actually instantiate the template like this:</p>\n<pre><code>template class myTemplate;\n</code></pre>\n<p>I know I can write <code>(extern) template class myTemplate_base&lt;commonValue&gt;</code> instead, however I think this is uglier, since I need to adjust my common Value in 3 places instead of one.</p>\n<p>So how do I have to put this, to use the typedef in the extern declaration/instantiation?</p>\n<p>I am ussing gcc 4.6.1 on Ubunutu</p>\n", "AcceptedAnswerId": "8569519", "Title": "c++ extern template instantiation and typedef (gcc)", "CreationDate": "2011-12-20T00:41:54.317", "Id": "8569476", "CommentCount": "2", "PostTypeId": "1", "LastActivityDate": "2011-12-20T00:50:17.893", "Score": "4", "OwnerUserId": "258418", "Tags": "<c++><templates><c++11><typedef>", "AnswerCount": "2"}, "8569519": {"Id": "8569519", "PostTypeId": "2", "Body": "<p><em>typedef-name</em> cannot be used in explicit instantiation. </p>\n<p>From 14.7.2/3</p>\n<blockquote>\n<p id=\"so_8569476_8569519_0\">If the explicit instantiation is for a class or member class, the\n  <em>elaborated-type-specifier</em> in the <em>declaration</em> shall include a\n  <em>simple-template-id</em>. If the explicit instantiation is for a function or\n  member function, the <em>unqualifiedid</em> in the declaration shall be either\n  a <em>template-id</em> or, where all template arguments can be deduced, a\n  <em>template-name</em> or <em>operator-function-id</em>. ...</p>\n</blockquote>\n", "LastActivityDate": "2011-12-20T00:48:57.940", "CommentCount": "1", "CreationDate": "2011-12-20T00:48:57.940", "ParentId": "8569476", "Score": "7", "OwnerUserId": "1058916"}});