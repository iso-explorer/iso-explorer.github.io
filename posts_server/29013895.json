post_cb({"29013895": {"ViewCount": "65", "Body": "<pre><code>#include&lt;iostream&gt;\n#include &lt;stdlib.h&gt;\n#include&lt;cmath&gt;\n#include&lt;algorithm&gt; \nusing namespace std;\n\nclass A\n{\nprotected: \nint x,y;\npublic:\n    A():x(0),y(0){}\n    A(double vx, double vy):x(vx), y(vy){}\n~A(){}\n};\nclass B: public A\nprotected:\n    double ct;\npublic:\n    B(): A(0,0), ct(0){}\n    B(double x, double y, double ctin): A(x,y), ct(ctin){} \n    B calculate(B &amp;v3,A &amp;v2);\n    ~B(){}\n};\n    B B::calculate(B &amp;v4,A &amp;v3)\n    {\n\n    x = v4.x*v3.x;\n\n\n    B temp_R(x,y,ct);\n    return temp_R;\n    }\n</code></pre>\n<p>I am trying to access the first component of v3 which is class A, but the code will not compile, the error messages on the </p>\n<pre><code>    v3.x;\n</code></pre>\n<p>states: \"protected member\"A::x\" is not accessible through a \"A\" pointer or object. </p>\n<p>I thought x and y are inherited from class A to class B, so why is it not possible to access them ? </p>\n", "AcceptedAnswerId": "29014122", "Title": "Can't seems to inherit a protected variable", "CreationDate": "2015-03-12T15:30:12.660", "Id": "29013895", "CommentCount": "10", "LastEditDate": "2015-03-12T15:44:10.897", "PostTypeId": "1", "LastEditorUserId": "4639075", "LastActivityDate": "2015-03-12T18:27:17.470", "Score": "-6", "OwnerUserId": "4639075", "Tags": "<c++><class><c++11>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_29013895_29014122_0": {"length": 14, "quality": 0.8235294117647058, "section_id": 6695}}, "n3337": {"so_29013895_29014122_0": {"length": 14, "quality": 0.8235294117647058, "section_id": 6450}}, "n4659": {"so_29013895_29014122_0": {"length": 14, "quality": 0.8235294117647058, "section_id": 8170}}}, "29014122": {"Id": "29014122", "PostTypeId": "2", "Body": "<p>Yes, a <code>B</code> can access protected members of an <code>A</code>. But it's the fact that you're going <em>through</em> <code>v3</code> that makes it essentially irrelevant that this attempt is made from within a member function of <code>B</code>. It's <code>v3</code> trying to make the access, not <code>B::calculate</code>, and <code>v3</code> is not a <code>B&amp;</code>.</p>\n<blockquote>\n<p id=\"so_29013895_29014122_0\"><code>[C++11: 11.4/1]:</code> <em>[..]</em> All other accesses involve a (possibly implicit) object expression (5.2.5). <strong>In this case, the class of the object expression shall be <code>C</code> or a class derived from <code>C</code>.</strong></p>\n</blockquote>\n<p>\u2026 followed by a bunch of examples showing exactly your problem.</p>\n", "LastEditorUserId": "560648", "LastActivityDate": "2015-03-12T18:27:17.470", "Score": "1", "CreationDate": "2015-03-12T15:40:30.300", "ParentId": "29013895", "CommentCount": "2", "OwnerUserId": "560648", "LastEditDate": "2015-03-12T18:27:17.470"}});