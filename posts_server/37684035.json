post_cb({"bq_ids": {"n4140": {"so_37684035_37684098_0": {"length": 12, "quality": 1.0, "section_id": 810}}, "n3337": {"so_37684035_37684098_0": {"length": 7, "quality": 0.5833333333333334, "section_id": 801}}, "n4659": {"so_37684035_37684098_0": {"length": 7, "quality": 0.5833333333333334, "section_id": 868}}}, "37684098": {"Id": "37684098", "PostTypeId": "2", "Body": "<p>Yes, it is safe.</p>\n<p>From \u00a723.3.6.5:</p>\n<blockquote>\n<p id=\"so_37684035_37684098_0\">If <code>sz &lt;= size()</code>, equivalent to calling <code>pop_back()</code> <code>size() - sz</code> times. If <code>size() &lt; sz</code>, appends <code>sz - size()</code> default-inserted elements to the sequence.</p>\n</blockquote>\n<p>So basically, when you call <code>resize(0)</code>, it calls <code>pop_back()</code> until every element is removed from the vector.</p>\n<p>It doesn't matter that you moved <code>vec</code>, because even though the state of <code>vec</code> is unspecified, it is still a valid vector that you can modify.</p>\n<p>So, the <code>std::vector</code> will be empty after a call to <code>resize(0)</code>.</p>\n", "LastEditorUserId": "3980929", "LastActivityDate": "2016-06-07T16:03:59.663", "Score": "9", "CreationDate": "2016-06-07T15:58:43.760", "ParentId": "37684035", "CommentCount": "2", "LastEditDate": "2016-06-07T16:03:59.663", "OwnerUserId": "3980929"}, "37684262": {"Id": "37684262", "PostTypeId": "2", "Body": "<p>After having moved from an object, you can generally not make any assumptions about the object's state. That means that you can only call member functions that do not have any preconditions. Happily, <code>std::vector::resize</code> does not have value-dependent preconditions, so you can call <code>resize</code> on a moved-from vector.</p>\n", "LastActivityDate": "2016-06-07T16:07:42.053", "Score": "5", "CreationDate": "2016-06-07T16:07:42.053", "ParentId": "37684035", "CommentCount": "9", "OwnerUserId": "596781"}, "37684035": {"ViewCount": "284", "Body": "<p>In other words is the following code  sound(defined behavior,portable,...)</p>\n<pre><code>   std::vector&lt;int&gt; vec(100,42);\n   std::vector&lt;int&gt; other = std::move(vec);\n   vec.resize(0);//is this sound\n\n   //using vec like an empty vector\n</code></pre>\n", "AcceptedAnswerId": "37684098", "Title": "Is it safe to call vector.resize(0) after moving its content", "CreationDate": "2016-06-07T15:54:33.470", "Id": "37684035", "CommentCount": "1", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2016-06-07T16:11:32.217", "LastEditorUserId": "434551", "LastActivityDate": "2016-06-07T16:11:32.217", "ClosedDate": "2016-06-07T16:06:52.420", "Score": "11", "OwnerUserId": "1235183", "Tags": "<c++><language-lawyer>", "AnswerCount": "2"}});