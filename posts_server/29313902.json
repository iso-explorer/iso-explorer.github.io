post_cb({"bq_ids": {"n4140": {"so_29313902_29313902_0": {"length": 15, "quality": 1.0, "section_id": 6173}}, "n3337": {"so_29313902_29313902_0": {"length": 15, "quality": 1.0, "section_id": 5934}}, "n4659": {"so_29313902_29313902_0": {"length": 15, "quality": 1.0, "section_id": 7675}}}, "29314192": {"Id": "29314192", "PostTypeId": "2", "Body": "<p>a ^= b ^= a ^= b\nThere are 3 left operands with no clear rule of which should be used first in computa</p>\n", "LastActivityDate": "2015-03-28T05:58:53.270", "CommentCount": "1", "CreationDate": "2015-03-28T05:58:53.270", "ParentId": "29313902", "Score": "-2", "OwnerUserId": "1513962"}, "29313902": {"ViewCount": "144", "Body": "<p>Let's just take for example the specific compound assignment operator <code>^=</code>. <a href=\"https://stackoverflow.com/questions/17475166/are-there-sequence-points-in-the-expression-a-b-a-b-or-is-it-undefined\">This stackoverflow page</a> says modification of the left operand may have not been done after the evaluation of <code>^=</code>, and thus making the code <code>a ^= b ^= a ^= b</code> undefined behaivor. But this does not seem to be the case. The standard says in 5.17 [expr.ass] that</p>\n<blockquote>\n<p id=\"so_29313902_29313902_0\">In all cases, the assignment is sequenced after the value computation\n  of the right and left operands, and before the value computation of\n  the assignment expression.</p>\n</blockquote>\n<p>There are two keypoints in this statement. 1) What does the subject <em>assignment</em> refers to? In my opinion, it refers just to the modification of the left operand. 2) What does <em>value computation of the assignment expression</em> refers to? <a href=\"http://en.cppreference.com/w/cpp/language/eval_order\" rel=\"nofollow noreferrer\">cppreference</a> says it refers to returning the reference to the <em>modified</em> object (emphasis mine).</p>\n<p>As a conclusion, the left operand should have already been modified after the evaluation of <code>^=</code>, which is a contradiction to what (most) people think. Am I missing something here?</p>\n", "AcceptedAnswerId": "29314237", "Title": "Sequence point within assignment operators", "CreationDate": "2015-03-28T05:09:52.493", "Id": "29313902", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2017-05-23T11:50:43.910", "LastEditorUserId": "-1", "LastActivityDate": "2015-03-28T11:12:31.713", "Score": "2", "OwnerUserId": "1348273", "Tags": "<c++><assignment-operator><sequence-points><compound-assignment>", "AnswerCount": "2"}, "29314237": {"Id": "29314237", "PostTypeId": "2", "Body": "<p>You link to a C question. However, this is irrelevant as C and C++ are different languages. </p>\n<p>Also, sequence points no longer exist as of C11 and C++11; instead the relations <em>sequenced before</em>, <em>unsequenced</em>, and <em>indeterminately sequenced</em> exist.</p>\n<p>In that quote:</p>\n<ul>\n<li><em>the assignment</em> means the write to the memory location of <code>a</code>.</li>\n<li><em>value computation</em> of an expression means the computation of the value of that expression. (Example - the value of <code>2 + 2</code> is <code>4</code>, and the value computation is the process of determining that <code>4</code> was the value).</li>\n</ul>\n<p>There are two value computations here: <code>a ^ b</code>,  and <code>a =</code> (that result).</p>\n<p>In the quoted text, for <code>a = a ^ b</code>, things must occur in this order:</p>\n<ol>\n<li><p>Retrieve values from <code>a</code> and <code>b</code> (in either order), and determine the memory location in which to store the result  (value computation of right and left operand, respectively)</p></li>\n<li><p>Store the result in <code>a</code>  (the assignment). The involves value computation of <code>a ^ b</code>, which isn't mentioned in the quote but clearly the result must be calculated before it is stored</p></li>\n<li><p>Perform value computation of the assignment expression. This means yielding up the value stored in <code>a</code> ready for a surrounding expression to use (value computation).</p></li>\n</ol>\n<p>You're right that 2 and 3 seem \"backwards\" compared to the order you might do things on paper. But remember that in general, <code>y</code> is different to the value of <code>x = y</code>. The value of the assignment expression is the same as the value stored in <code>x</code> . (Example: <code>int x; double y = (x = 6.5);</code>  - then <code>y</code> is <code>6</code>, not <code>6.5</code>).  So we can do this by storing the result in <code>a</code> and then offering <code>a</code> as the result.</p>\n", "LastEditorUserId": "1505939", "LastActivityDate": "2015-03-28T11:12:31.713", "Score": "2", "CreationDate": "2015-03-28T06:06:40.407", "ParentId": "29313902", "CommentCount": "6", "OwnerUserId": "1505939", "LastEditDate": "2015-03-28T11:12:31.713"}});