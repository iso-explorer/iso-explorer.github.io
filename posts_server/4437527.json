post_cb({"bq_ids": {"n4140": {"so_4437527_4437555_1": {"length": 16, "quality": 1.0, "section_id": 5436}}, "n3337": {"so_4437527_4437555_1": {"length": 16, "quality": 1.0, "section_id": 5231}}, "n4659": {"so_4437527_4437555_1": {"length": 16, "quality": 1.0, "section_id": 6863}}}, "4437555": {"Id": "4437555", "PostTypeId": "2", "Body": "<p>Consider this code,</p>\n<pre><code>int some_int = 100;\n\nwhile(some_int == 100)\n{\n   //your code\n}\n</code></pre>\n<p>When this program gets compiled, the compiler may optimize this code, if it finds that the program <strong>never</strong> ever makes any attempt to change the value of <code>some_int</code>, so it may be tempted to optimize the <code>while</code> loop by changing it from <code>while(some_int == 100)</code> to simply <code>while(true)</code> so that the execution could be fast (since the condition in <code>while</code> loop appears to be <code>true</code> always). <em>(if the compiler doesn't optimize it, then it has to fetch the value of <code>some_int</code> (if it's not loaded on a register) and compare it with 100, each time which obviously is a little bit slow.)</em></p>\n<p>However, sometimes, optimization (of some parts of your program) may be <strong>undesirable</strong>, because it may be that someone else is changing the value of <code>some_int</code> from <strong>outside the program which compiler is not aware of</strong>, since it can't see it; but it's how you've designed it. In that case, compiler's optimization would <strong>not</strong> produce the desired result!</p>\n<p>So, to ensure the desired result, you need to somehow stop the compiler from optimizing the <code>while</code> loop. That is where the <code>volatile</code> keyword plays its role. All you need to do is this,</p>\n<pre><code>volatile int some_int = 100; //note the 'volatile' qualifier now!\n</code></pre>\n<hr>\n<p>In others words I would explain this as follows:</p>\n<p><code>volatile</code> tells the compiler that, </p>\n<blockquote>\n<p id=\"so_4437527_4437555_0\">\"Hey compiler, I'm volatile and, you\n  know, I can be changed by some XYZ\n  that you're not even aware of. That\n  XYZ could be anything. Maybe some\n  alien outside this planet called\n  program. Maybe some lighting, some\n  form of interrupt, volcanoes, etc can\n  mutate me. Maybe. You never know who\n  is going to change me! So O you\n  ignorant, stop playing an all-knowing\n  god, and don't dare touch the code\n  where I'm present. Okay?\"</p>\n</blockquote>\n<p>Well, that is how <code>volatile</code> prevents compiler from optimizing code. Now google it to see some sample examples.</p>\n<hr>\n<p>Quoting from the C++ Standard ($7.1.5.1/8)</p>\n<blockquote>\n<p id=\"so_4437527_4437555_1\">[..] volatile is a hint to the\n  implementation to <strong>avoid aggressive\n  optimization involving the object</strong>\n  because the value of the object might\n  be changed by means undetectable by an\n  implementation.[...]</p>\n</blockquote>\n<p>Related topic:</p>\n<p><a href=\"https://stackoverflow.com/questions/4479597/does-making-a-struct-volatile-make-all-its-members-volatile/4479652\">Does making a struct volatile make all its members volatile?</a></p>\n</hr></hr>", "LastEditorUserId": "1407170", "LastActivityDate": "2017-09-16T04:26:44.320", "Score": "757", "CreationDate": "2010-12-14T09:18:14.667", "ParentId": "4437527", "CommentCount": "20", "OwnerUserId": "415784", "LastEditDate": "2017-09-16T04:26:44.320"}, "4437527": {"ViewCount": "165185", "Body": "<blockquote>\n<p id=\"so_4437527_4437527_0\"><strong>Possible Duplicate:</strong><br>\n<a href=\"https://stackoverflow.com/questions/72552/c-when-has-the-volatile-keyword-ever-helped-you\">C++: When Has The volatile Keyword Ever Helped You?</a> </br></p>\n</blockquote>\n<p>I have never used it but I wonder why people use it? What does it exactly do? I searched the forum, I found it only C# or Java topics.</p>\n", "AcceptedAnswerId": "4437555", "Title": "Why do we use volatile keyword in C++?", "CreationDate": "2010-12-14T09:14:42.620", "Id": "4437527", "CommentCount": "2", "FavoriteCount": "132", "PostTypeId": "1", "LastEditDate": "2017-05-23T12:18:24.603", "LastEditorUserId": "-1", "LastActivityDate": "2017-09-16T04:26:44.320", "ClosedDate": "2010-12-15T18:50:44.603", "Score": "224", "OwnerUserId": "415784", "Tags": "<c++><volatile><compiler-optimization>", "AnswerCount": "3"}, "4437552": {"Id": "4437552", "PostTypeId": "2", "Body": "<p>The volatile keyword is a type qualifier used to declare that an object can be modified in the program by something such as the operating system, the hardware, or a concurrently executing thread.</p>\n<p>volatile declarator ;</p>\n", "LastActivityDate": "2010-12-14T09:18:02.420", "CommentCount": "1", "CreationDate": "2010-12-14T09:18:02.420", "ParentId": "4437527", "Score": "-4", "OwnerUserId": "447363"}, "4437546": {"Id": "4437546", "PostTypeId": "2", "Body": "<p>In computer programming, particularly in the C, C++, and C# programming languages, a variable or object declared with the <code>volatile</code> keyword usually has special properties related to optimization and/or threading. Generally speaking, the <code>volatile</code> keyword is intended to prevent the (pseudo)compiler from applying any optimizations on the code that assume values of variables cannot change \"on their own.\"   (c) Wikipedia</p>\n<p><a href=\"http://en.wikipedia.org/wiki/Volatile_variable\" rel=\"nofollow noreferrer\">http://en.wikipedia.org/wiki/Volatile_variable</a> </p>\n", "LastEditorUserId": "1611389", "LastActivityDate": "2016-12-11T22:33:24.930", "Score": "8", "CreationDate": "2010-12-14T09:17:19.730", "ParentId": "4437527", "CommentCount": "4", "OwnerUserId": "509597", "LastEditDate": "2016-12-11T22:33:24.930"}});