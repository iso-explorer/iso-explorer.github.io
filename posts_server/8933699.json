post_cb({"bq_ids": {"n4140": {"so_8933699_8934121_0": {"length": 14, "quality": 0.9333333333333333, "section_id": 6689}, "so_8933699_8934121_1": {"length": 16, "quality": 0.8888888888888888, "section_id": 6690}}, "n3337": {"so_8933699_8934121_0": {"length": 14, "quality": 0.9333333333333333, "section_id": 6444}, "so_8933699_8934121_1": {"length": 16, "quality": 0.8888888888888888, "section_id": 6445}}, "n4659": {"so_8933699_8934121_0": {"length": 14, "quality": 0.9333333333333333, "section_id": 8164}, "so_8933699_8934121_1": {"length": 16, "quality": 0.8888888888888888, "section_id": 8165}}}, "8933699": {"ViewCount": "1155", "Body": "<p>When we define an operator function inside a class an we also define it inside a class then that function is NOT part of the class.</p>\n<p>but also the same task is achived when that function is outside the class and we declare it as a friend inside a class but not define it.</p>\n<p>consider this code which have two identical operator definitions where one is inside the class an another ouside the class:</p>\n<p><strong>version 1 (inside of a class)</strong></p>\n<pre><code>class MyClass\n{\n    // version 1 inside a class\n    friend MyClass&amp;&amp; operator +(MyClass&amp; a, MyClass&amp; b)\n    {\n        return move(MyClass(a.x + b.x, a.y + b.y));\n    }\n    int x,y;\n\npublic:\n    MyClass() {}\n    MyClass(int,int){}\n};\n\nint main()\n{\n    MyClass a, b, c;\n    c = a + b;\n    cin.ignore();\n    return 0;\n}\n</code></pre>\n<p><strong>version 2 (outside of a class)</strong></p>\n<pre><code>class MyClass\n{\n      friend MyClass&amp;&amp; operator +(MyClass&amp; a, MyClass&amp; b);\n    int x,y;\n\npublic:\n    MyClass() {}\n    MyClass(int,int){}\n};\n\nMyClass&amp;&amp; operator +(MyClass&amp; a, MyClass&amp; b)\n{\n    return move(MyClass(a.x + b.x, a.y + b.y));\n}\n\nint main()\n{\n    MyClass a, b, c;\n    c = a + b;\n    cin.ignore();\n    return 0;\n}\n</code></pre>\n<p>what's the difference in those two approaches?</p>\n", "AcceptedAnswerId": "8933762", "Title": "C++ Class, What's the difference in friend operator vs outside operator", "CreationDate": "2012-01-19T21:39:49.723", "Id": "8933699", "CommentCount": "8", "LastEditDate": "2012-01-19T21:49:11.950", "PostTypeId": "1", "LastEditorUserId": "1044776", "LastActivityDate": "2012-01-19T22:11:00.287", "Score": "0", "OwnerUserId": "1044776", "Tags": "<c++><class><operator-keyword><friend>", "AnswerCount": "2"}, "8933762": {"Id": "8933762", "PostTypeId": "2", "Body": "<p><s>At the moment, you are defining <code>MyClass&amp;&amp; operator +(MyClass&amp; a, MyClass&amp; b)</code> twice in the first snippet and once in the second.  If you remove the second definition, the two will be semantically equivalent.</s></p>\n<p>The two will do the same thing.  In some cases one may be preferred over the other (for example, the second can be placed in a <code>cpp</code> file and the first may be more natural with templates).</p>\n<p>Note that the first is implicitly marked inline, the second is not.</p>\n<p>(You should be passing <code>MyClass</code> by const reference, though.)</p>\n", "LastEditorUserId": "559931", "LastActivityDate": "2012-01-19T21:55:20.590", "Score": "1", "CreationDate": "2012-01-19T21:44:05.613", "ParentId": "8933699", "CommentCount": "4", "OwnerUserId": "559931", "LastEditDate": "2012-01-19T21:55:20.590"}, "8934121": {"Id": "8934121", "PostTypeId": "2", "Body": "<p>In your case, both versions do the same thing (return a dangling reference, actually, causing undefined behavior), although one is <code>inline</code> and two isn't.</p>\n<p>In general, the friend function whose body is defined inside the class also may use class members without qualification (those would be static members, possibly in base classes, since there's no <code>this</code> pointer in a friend function).</p>\n<p>Here's the relevant text in the standard (section 11.3 <code>[class.friend]</code>):</p>\n<blockquote>\n<p id=\"so_8933699_8934121_0\">A function can be de\ufb01ned in a friend declaration of a class if and only if the class is a non-local class (9.8),\n  the function name is unqualified, and the function has namespace scope.</p>\n<p id=\"so_8933699_8934121_1\">Such a function is implicitly <code>inline</code>.  A <code>friend</code> function defined in a class is in the (lexical) scope of the class in which it is de\ufb01ned. A <code>friend</code> function defined outside the class is not (3.4.1).</p>\n</blockquote>\n", "LastActivityDate": "2012-01-19T22:11:00.287", "CommentCount": "0", "CreationDate": "2012-01-19T22:11:00.287", "ParentId": "8933699", "Score": "4", "OwnerUserId": "103167"}});