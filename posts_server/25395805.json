post_cb({"25396756": {"ParentId": "25395805", "CommentCount": "14", "Body": "<p>It appears that the implementation of <code>stored_edge_property</code> (a under-the-hood class to store edge properties) was updated for C++11 rvalue references between the version 1.55 to 1.56 (you can see it clearly by diff'ing the files). It appears that they forgot to provide a move-assignment operator for its base class <code>stored_edge</code> (and the default one is implicitly disabled by the presence of a copy-assignment operator).</p>\n<p>This is definitely a bug and should be reported to Boost. I remember that they made a virtually identical mistake with <code>shared_ptr</code> around the 1.48 version. I guess people don't always learn from their own mistakes. The fix is trivial, but this really should have been caught before release (it seems like a very easy bug to catch in a unit-test). Please report your findings to <a href=\"http://www.boost.org/development/bugs.html\">their bug tracker</a>.</p>\n<p>N.B.: I use BGL a lot, but I have learned to distrust their <code>adjacency_list</code> implementation, especially after looking through it extensively. I now use my own implementation of it (see <a href=\"https://github.com/mikael-s-persson/boost_graph_ext_mp\">here</a>) which cuts through a lot of the fat of the monstrous implementation that the BGL carries around.</p>\n", "OwnerUserId": "491645", "PostTypeId": "2", "Id": "25396756", "Score": "5", "CreationDate": "2014-08-20T04:31:13.363", "LastActivityDate": "2014-08-20T04:31:13.363"}, "bq_ids": {"n4140": {"so_25395805_25395805_2": {"section_id": 469, "quality": 0.6153846153846154, "length": 8}}, "n3337": {"so_25395805_25395805_2": {"section_id": 460, "quality": 0.6153846153846154, "length": 8}}, "n4659": {"so_25395805_25395805_2": {"section_id": 492, "quality": 0.6153846153846154, "length": 8}}}, "25395805": {"CommentCount": "3", "ViewCount": "725", "PostTypeId": "1", "LastEditorUserId": "341133", "CreationDate": "2014-08-20T02:21:52.303", "LastActivityDate": "2014-08-20T04:31:13.363", "Title": "Compile error with boost.graph 1.56.0 and g++ 4.6.4", "AcceptedAnswerId": "25396756", "LastEditDate": "2014-08-20T04:03:07.720", "Id": "25395805", "Score": "5", "Body": "<p>Got a savage few compile errors while trying to use Boost.Graph. The error is a regression as it is not present when compiling 1.55.0. I've dug a bit but can't fix it, does anyone know what is going wrong here?</p>\n<p>Notes:\nUsing the -std=c++0x compile flag</p>\n<p>Code that will generate the errors.</p>\n<pre><code>#include \"boost/graph/adjacency_list.hpp\"\n\nint main(int argc, char** argv)\n{\n  using boost::adjacency_list;\n  using boost::vecS;\n  using boost::directedS;\n  typedef adjacency_list&lt;vecS, vecS, directedS, boost::default_color_type&gt; Graph;\n\n  std::vector&lt; std::pair&lt;int, int&gt; &gt; testVec;\n  auto graph = Graph( begin(testVec), end(testVec), testVec.size());\n\n  return 0;\n}\n</code></pre>\n<p>Errors copied out of my IDE</p>\n<blockquote>\n<p id=\"so_25395805_25395805_0\">/usr/include/c++/4.6/bits/vector.tcc:319: error: use of deleted\n  function \u2018boost::detail::stored_edge_property::self&amp;\n  boost::detail::stored_edge_property::operator=(boost::detail::stored_edge_property::self&amp;&amp;) [with Vertex = long unsigned int, Property =\n  boost::no_property, boost::detail::stored_edge_property::self = boost::detail::stored_edge_property]\u2019</p>\n<p id=\"so_25395805_25395805_1\">.../boost/boost/graph/detail/adjacency_list.hpp:318:\n  error: \u2018boost::detail::stored_edge_property::self&amp;\n  boost::detail::stored_edge_property::operator=(boost::detail::stored_edge_property::self&amp;&amp;) [with Vertex = long unsigned int, Property =\n  boost::no_property, boost::detail::stored_edge_property::self = boost::detail::stored_edge_property]\u2019 is implicitly deleted because the default\n  definition would be ill-formed:</p>\n<p id=\"so_25395805_25395805_2\">.../boost/boost/graph/detail/adjacency_list.hpp:318: error: base\n  \u2018boost::detail::stored_edge\u2019 does not have a move\n  assignment operator or trivial copy assignment operator</p>\n<p id=\"so_25395805_25395805_3\">/usr/include/c++/4.6/bits/stl_algobase.h:546: error: use of deleted\n  function \u2018boost::detail::stored_edge_property::self&amp;\n  boost::detail::stored_edge_property::operator=(boost::detail::stored_edge_property::self&amp;&amp;) [with Vertex = long unsigned int, Property =\n  boost::no_property, boost::detail::stored_edge_property::self = boost::detail::stored_edge_property]\u2019</p>\n</blockquote>\n", "Tags": "<c++><gcc><c++11><boost><compiler-errors>", "OwnerUserId": "341133", "AnswerCount": "1"}});