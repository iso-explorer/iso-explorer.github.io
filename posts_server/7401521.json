post_cb({"7401521": {"CommentCount": "0", "CreationDate": "2011-09-13T12:02:01.073", "PostTypeId": "1", "AcceptedAnswerId": "7401764", "LastEditorUserId": "-1", "LastActivityDate": "2011-09-13T13:43:04.490", "LastEditDate": "2017-05-23T10:34:29.843", "ViewCount": "236", "FavoriteCount": "2", "Title": "Can copy elision occur in catch statements?", "Id": "7401521", "Score": "8", "Body": "<p>Consider an exception class with a copy constructor with side-effects.</p>\n<p>Can a compiler skip calling the copy constructor here:</p>\n<pre><code>try {\n    throw ugly_exception();\n}\ncatch(ugly_exception) // ignoring the exception, so I'm not naming it\n{ }\n</code></pre>\n<p>What about this:</p>\n<pre><code>try {\n    something_that_throws_ugly_exception();\n}\ncatch(ugly_exception) // ignoring the exception, so I'm not naming it\n{ }\n</code></pre>\n<p>(yes, I know this is all very ugly, this was inspired by <a href=\"https://stackoverflow.com/q/7401269/46642\">another question</a>)</p>\n", "Tags": "<c++><exception><optimization><copy-elision>", "OwnerUserId": "46642", "AnswerCount": "3"}, "7401782": {"ParentId": "7401521", "LastEditDate": "2011-09-13T12:43:05.683", "CommentCount": "0", "CreationDate": "2011-09-13T12:22:44.800", "OwnerUserId": "13005", "LastEditorUserId": "13005", "PostTypeId": "2", "Id": "7401782", "Score": "4", "Body": "<p>I think this is specifically permitted. For C++03, 15.1/3 says:</p>\n<blockquote>\n<p id=\"so_7401521_7401782_0\">A throw-expression initializes a temporary object, called the\n  exception object,</p>\n</blockquote>\n<p>and 12/15 says:</p>\n<blockquote>\n<p id=\"so_7401521_7401782_1\">when a temporary class object that has not been bound to a reference\n  (12.2) would be copied to a class object with the same cv-unqualified\n  type, the copy operation can be omitted by constructing the tempo-\n  rary object directly into the target of the omitted copy</p>\n</blockquote>\n<p>So, the secret hiding place where in-flight exceptions are kept, is defined by the standard to be a temporary, and hence is valid for copy-elision.</p>\n<p>Edit: oops, I've now read further. 15.1/5:</p>\n<blockquote>\n<p id=\"so_7401521_7401782_2\">If the use of the temporary object can be eliminated without changing\n  the meaning of the program except for the execution of constructors\n  and destructors associated with the use of the temporary object\n  (12.2), then the exception in the handler can be initialized directly\n  with the argument of the throw expression.</p>\n</blockquote>\n<p>Doesn't get much clearer.</p>\n<p>Whether it actually will... if the catch clause were to re-raise the exception (including if it called non-visible code that might do so), then the implementation needs that \"temporary object called the exception object\" still to be around. So there might be some restrictions on when that copy elision is possible. Clearly an empty catch clause can't re-raise it, though.</p>\n", "LastActivityDate": "2011-09-13T12:43:05.683"}, "7401652": {"ParentId": "7401521", "LastEditDate": "2011-09-13T12:25:35.317", "CommentCount": "5", "CreationDate": "2011-09-13T12:11:14.833", "OwnerUserId": "415784", "LastEditorUserId": "415784", "PostTypeId": "2", "Id": "7401652", "Score": "0", "Body": "<p>Yes. If the <code>catch</code> catches the exception by <em>reference</em>, then there will not be copy (well, that is by definition).</p>\n<p>But I think that is not your question, and I believe the code which you've written is written on purpose  with no mention of <em>reference</em>.  If that is the case, then yes, even in this case, copy can be elided. Actually initialization of the variable in the <code>catch</code> is <em>direct-initialization</em> in theory. And copy in a direct-initialization can be elided by the compiler where it's possible.</p>\n<p>C++03 \u00a78.5/14 reads,</p>\n<blockquote>\n<p id=\"so_7401521_7401652_0\">[...] In certain cases, an implementation is permitted to eliminate the copying inherent in this direct-initialization by constructing the intermediate result directly into the object being initialized;</p>\n</blockquote>\n", "LastActivityDate": "2011-09-13T12:25:35.317"}, "7401764": {"ParentId": "7401521", "LastEditDate": "2011-09-13T12:46:06.490", "CommentCount": "4", "CreationDate": "2011-09-13T12:21:08.567", "OwnerUserId": "381333", "LastEditorUserId": "381333", "PostTypeId": "2", "Id": "7401764", "Score": "9", "Body": "<p>Yes, it can be elided both during throwing and catching. For catching it can be elided only when the type specified in the catch clause is the same (save for cv-qualifications) as the type of the exception object. For more formal and detailed description see C++11 12.8/31.</p>\n<blockquote>\n<p id=\"so_7401521_7401764_0\">...This elision of copy/move operations, called copy elision, is permitted in the following circumstances (which may be combined to eliminate multiple copies):</p>\n<p id=\"so_7401521_7401764_1\">...</p>\n<ul>\n<li>in a throw-expression, when the operand is the name of a non-volatile automatic object (other than a function or catch-clause parameter) whose scope does not extend beyond the end of the innermost enclosing try-block (if there is one), the copy/move operation from the operand to the exception object (15.1) can be omitted by constructing the automatic object directly into the exception object</li>\n</ul>\n<p id=\"so_7401521_7401764_2\">...</p>\n<ul>\n<li>when the exception-declaration of an exception handler (Clause 15) declares an object of the same type (except for cv-qualification) as the exception object (15.1), the copy/move operation can be omitted by treating the exception-declaration as an alias for the exception object if the meaning of the program will be unchanged except for the execution of constructors and destructors for the object declared by the exception-declaration.</li>\n</ul>\n</blockquote>\n", "LastActivityDate": "2011-09-13T12:46:06.490"}, "bq_ids": {"n4140": {"so_7401521_7401764_0": {"section_id": 480, "quality": 0.9333333333333333, "length": 14}, "so_7401521_7401652_0": {"section_id": 3296, "quality": 1.0, "length": 16}, "so_7401521_7401782_0": {"section_id": 380, "quality": 0.7142857142857143, "length": 5}, "so_7401521_7401782_1": {"section_id": 480, "quality": 0.8214285714285714, "length": 23}}, "n3337": {"so_7401521_7401764_0": {"section_id": 471, "quality": 0.9333333333333333, "length": 14}, "so_7401521_7401652_0": {"section_id": 3166, "quality": 1.0, "length": 16}, "so_7401521_7401782_0": {"section_id": 3206, "quality": 1.0, "length": 7}, "so_7401521_7401782_1": {"section_id": 471, "quality": 0.8214285714285714, "length": 23}}, "n4659": {"so_7401521_7401782_0": {"section_id": 395, "quality": 0.7142857142857143, "length": 5}, "so_7401521_7401764_0": {"section_id": 502, "quality": 0.9333333333333333, "length": 14}, "so_7401521_7401782_1": {"section_id": 502, "quality": 0.6071428571428571, "length": 17}}}});