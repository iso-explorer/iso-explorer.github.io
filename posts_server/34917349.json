post_cb({"34917464": {"Id": "34917464", "PostTypeId": "2", "Body": "<p>Another solution is to use raw strings:</p>\n<pre><code>#include &lt;string&gt;\n#include &lt;iostream&gt;\n\nint main()\n{\n    std::cout &lt;&lt; R\"_(A raw string with \" inside (and \\ as well))_\" &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/cad51755a66ec1b9\" rel=\"nofollow\"><kbd>Live example</kbd></a></p>\n<p>Output: </p>\n<blockquote>\n<p id=\"so_34917349_34917464_0\">A raw string with \" inside (and \\ as well)</p>\n</blockquote>\n<hr>\n<h3>Quotes from the Standard:</h3>\n<p>According to the Standard 2.14.5 [lex.string]:</p>\n<pre>\n<strong>string-literal</strong>:\n    <strong>encoding-prefix<sub>opt</sub></strong> \"<strong>s-char-sequence<sub>opt</sub></strong>\"\n    <strong>encoding-prefix<sub>opt</sub></strong> R <strong>raw-string</strong>\n\n<strong>encoding-prefix</strong>:\n    u8\n    u\n    U\n    L\n\n<strong>s-char-sequence</strong>:\n    <strong>s-char</strong>\n    <strong>s-char-sequence</strong> <strong>s-char</strong>\n\n<strong>s-char</strong>:\n    any member of the source character set except\n        the double-quote <strong>\"</strong>, backslash <strong>\\</strong>, or new-line character\n    <strong>escape-sequence</strong>\n    <strong>universal-character-name</strong>\n\n<strong>raw-string</strong>:\n    \" <strong>d-char-sequence<sub>opt</sub></strong> ( <strong>r-char-sequence<sub>opt</sub></strong>) <strong>d-char-sequence<sub>opt</sub></strong> \"\n\n<strong>r-char-sequence</strong>:\n    <strong>r-char</strong>\n    <strong>r-char-sequence</strong> <strong>r-char</strong>\n\n<strong>r-char</strong>:\n    any member of the source character set, except\n        a right parenthesis <strong>)</strong> followed by the initial <strong>d-char-sequence</strong>\n        (which may be empty) followed by a double quote <strong>\"</strong>.\n\n<strong>d-char-sequence</strong>:\n    <strong>d-char</strong>\n    <strong>d-char-sequence</strong> <strong>d-char</strong>\n\n<strong>d-char</strong>:\n    any member of the basic source character set except:\n        space, the left parenthesis <strong>(</strong>, the right parenthesis <strong>)</strong>, the backslash <strong>\\</strong>,\n        and the control characters representing horizontal tab,\n        vertical tab, form feed, and newline.\n</pre>\n<blockquote>\n<ol>\n<li><p id=\"so_34917349_34917464_1\">A string literal is a sequence of characters (as defined in 2.14.3) surrounded by double quotes, optionally prefixed by <code>R</code>, <code>u8</code>, <code>u8R</code>,\n  <code>u</code>, <code>uR</code>, <code>U</code>, <code>UR</code>, <code>L</code>, or <code>LR</code>, as in <code>\"...\"</code>, <code>R\"(...)\"</code>,\n  <code>u8\"...\"</code>, <code>u8R\"**(...)**\"</code>, <code>u\"...\"</code>, <code>uR\"*\u02dc(...)*\u02dc\"</code>, <code>U\"...\"</code>,\n  <code>UR\"zzz(...)zzz\"</code>, <code>L\"...\"</code>, or <code>LR\"(...)\"</code>, respectively.</p></li>\n<li><p id=\"so_34917349_34917464_2\">A string literal that has an <code>R</code> in the prefix is a <em>raw string literal</em>. The <code>d-char-sequence</code> serves as a delimiter. The terminating\n  <code>d-char-sequence</code> of a raw-string is the same sequence of characters\n  as the initial <code>d-char-sequence</code>. A <code>d-char-sequence</code> shall consist of\n  at most 16 characters.</p></li>\n<li>[Note: The characters <code>(</code> and <code>)</code> are permitted in a raw-string. Thus, <code>R\"delimiter((a|b))delimiter\"</code> is equivalent to <code>\"(a|b)\"</code>. \u2014end\n  note ]</li>\n<li><p id=\"so_34917349_34917464_3\">[Note: A source-file new-line in a raw string literal results in a new-line in the resulting execution <code>string-literal</code>. Assuming no\n  whitespace at the beginning of lines in the following example, the\n  assert will succeed:</p>\n<pre><code>const char *p = R\"(a\\\nb\nc)\";\nassert(std::strcmp(p, \"a\\\\\\nb\\nc\") == 0);\n</code></pre>\n<p id=\"so_34917349_34917464_4\">\u2014 end note ]</p></li>\n<li><p id=\"so_34917349_34917464_5\">[Example: The raw string</p>\n<pre><code>R\"a(\n)\\\na\"\n)a\"\n</code></pre>\n<p id=\"so_34917349_34917464_6\">is equivalent to <code>\"\\n)\\\\\\na\\\"\\n\"</code>. The raw string</p>\n<pre><code>R\"(??)\"\n</code></pre>\n<p id=\"so_34917349_34917464_7\">is equivalent to <code>\"\\?\\?\"</code>. The raw string</p>\n<pre><code>R\"#(\n)??=\"\n)#\"\n</code></pre>\n<p id=\"so_34917349_34917464_8\">is equivalent to <code>\"\\n)\\?\\?=\\\"\\n\"</code>. \u2014end example ]</p></li>\n</ol>\n</blockquote>\n</hr>", "LastEditorUserId": "1532460", "LastActivityDate": "2016-01-21T07:40:01.117", "Score": "4", "CreationDate": "2016-01-21T07:11:25.950", "ParentId": "34917349", "CommentCount": "3", "OwnerUserId": "1532460", "LastEditDate": "2016-01-21T07:40:01.117"}, "34917349": {"ViewCount": "363", "Body": "<p>I was trying to make a simple calculator and I would like to display quotes in the instruction when you first run the program. </p>\n", "Title": "Is there a way to put quotes in a cout?", "CreationDate": "2016-01-21T07:05:21.420", "LastActivityDate": "2016-01-21T07:40:01.117", "CommentCount": "1", "PostTypeId": "1", "ClosedDate": "2016-01-21T07:17:08.027", "Id": "34917349", "Score": "-3", "OwnerUserId": "5787634", "Tags": "<c++>", "AnswerCount": "2"}, "34917397": {"Id": "34917397", "PostTypeId": "2", "Body": "<p>Use <code>\\\"</code>. Also known as <a href=\"http://en.cppreference.com/w/cpp/language/escape\" rel=\"nofollow\">escape sequences</a>.</p>\n", "LastActivityDate": "2016-01-21T07:07:37.593", "CommentCount": "0", "CreationDate": "2016-01-21T07:07:37.593", "ParentId": "34917349", "Score": "3", "OwnerUserId": "4987285"}, "bq_ids": {"n4140": {"so_34917349_34917464_3": {"length": 19, "quality": 0.95, "section_id": 5352}, "so_34917349_34917464_1": {"length": 14, "quality": 0.9333333333333333, "section_id": 5349}, "so_34917349_34917464_2": {"length": 20, "quality": 0.8695652173913043, "section_id": 5350}}, "n3337": {"so_34917349_34917464_1": {"length": 14, "quality": 0.9333333333333333, "section_id": 5146}, "so_34917349_34917464_3": {"length": 19, "quality": 0.95, "section_id": 5149}, "so_34917349_34917464_2": {"length": 20, "quality": 0.8695652173913043, "section_id": 5147}}, "n4659": {"so_34917349_34917464_1": {"length": 13, "quality": 0.8666666666666667, "section_id": 6774}, "so_34917349_34917464_3": {"length": 18, "quality": 0.9, "section_id": 6777}, "so_34917349_34917464_2": {"length": 18, "quality": 0.782608695652174, "section_id": 6775}}}});