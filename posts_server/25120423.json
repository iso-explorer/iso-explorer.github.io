post_cb({"bq_ids": {"n4140": {"so_25120423_25120423_0": {"length": 33, "quality": 0.9166666666666666, "section_id": 6299}}, "n3337": {"so_25120423_25120423_0": {"length": 33, "quality": 0.9166666666666666, "section_id": 6056}}, "n4659": {"so_25120423_25120423_0": {"length": 33, "quality": 0.9166666666666666, "section_id": 7808}}}, "25120423": {"ViewCount": "146", "Body": "<p>I have been successfully using <em><a href=\"http://louisdx.github.io/cxx-prettyprint/\" rel=\"nofollow noreferrer\">cxx-prettyprint: A C++ Container Pretty-Printer</a></em> to log container values. (See also <a href=\"https://stackoverflow.com/questions/4850473/pretty-print-c-stl-containers\">Pretty-print C++ STL containers</a>) It's working like a charm on our VS-2005 (VC8) compiler. (with the prettyprint98.hpp header)</p>\n<p>While studying its interoperability with Boost.Format, I found to my surprise that it simply works out of the box, when <a href=\"https://stackoverflow.com/questions/10808446/boostformat-and-custom-printing-a-std-containers\">other questions suggest it shouldn't</a> because ADL should fail for a user provided output operator.</p>\n<p>Looking into the <a href=\"https://raw.githubusercontent.com/louisdx/cxx-prettyprint/master/prettyprint.hpp\" rel=\"nofollow noreferrer\">cxx-pp header</a> I found that it simply works because the library does <strong>define its output operator(s) <em>inside</em> the <code>std</code> namespace</strong>:</p>\n<pre><code>namespace std\n{\n    // Prints a print_container_helper to the specified stream.\n\n    template&lt;typename T, typename TChar, typename TCharTraits, typename TDelimiters&gt;\n    inline basic_ostream&lt;TChar, TCharTraits&gt; &amp; operator&lt;&lt;(basic_ostream&lt;TChar, TCharTraits&gt; &amp; stream,\n                                                          const ::pretty_print::print_container_helper&lt;T, TChar, TCharTraits, TDelimiters&gt; &amp; helper)\n    {\n        helper(stream);\n        return stream;\n    }\n....\n</code></pre>\n<p>Adding something to the <code>std</code> namespace is <a href=\"https://stackoverflow.com/a/9149437/321013\">formally UB</a>:</p>\n<blockquote>\n<p id=\"so_25120423_25120423_0\"><code>[C++11: 17.6.4.2.1/1]:</code> The behavior of a C++ program is undefined if it adds declarations or definitions to namespace <code>std</code> or to a namespace within namespace <code>std</code> unless otherwise specified. A program may add a template specialization for any standard library template to namespace std only if the declaration depends on a user-defined type and the specialization meets the standard library requirements for the original template and is not explicitly prohibited.</p>\n</blockquote>\n<p>So, is this in cxx-pp formally UB, or is it a template specialization (It doesn't seem like one to me).</p>\n<p>Comments as to the practical impact of this, iff UB, would be very welcome.</p>\n", "Title": "Cxx-prettyprint (for standard containers) defines its output operators inside namespace std - is this a standard violation?", "CreationDate": "2014-08-04T13:56:43.130", "LastActivityDate": "2014-08-04T14:01:58.463", "CommentCount": "4", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2017-05-23T10:28:30.040", "LastEditorUserId": "-1", "Id": "25120423", "Score": "2", "OwnerUserId": "321013", "Tags": "<c++><namespaces><operator-overloading><pretty-print><argument-dependent-lookup>", "AnswerCount": "0"}});