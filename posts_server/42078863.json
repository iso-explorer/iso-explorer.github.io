post_cb({"42079254": {"ParentId": "42078863", "PostTypeId": "2", "CommentCount": "7", "Body": "<p>Aha!</p>\n<p>From [class]:</p>\n<blockquote>\n<p id=\"so_42078863_42079254_0\">A POD struct is a non-union class that is both <strong>a trivial class</strong> and a standard-layout class</p>\n</blockquote>\n<p>where a trivial class is:</p>\n<blockquote>\n<p id=\"so_42078863_42079254_1\">A <em>trivial class</em> is a class that is trivially copyable and <strong>has one or more default constructors (12.1), all of which\n  are either trivial or deleted and at least one of which is not deleted.</strong></p>\n</blockquote>\n<p>But in [class.copy]:</p>\n<blockquote>\n<p id=\"so_42078863_42079254_2\"><strong>If there is\n  no user-declared constructor</strong> for class <code>X</code>, a non-explicit constructor having no parameters is implicitly declared as defaulted (8.4).</p>\n</blockquote>\n<p>Your <code>podTest</code>, when you explicitly deleted the copy constructor, has no default constructor. So it's not a trivial class, so it's not a POD. If you add in:</p>\n<pre><code>podTest() = default;\n</code></pre>\n<p>Then it'll become a POD again.</p>\n", "OwnerUserId": "2069064", "LastEditorUserId": "2069064", "LastEditDate": "2017-02-06T23:47:53.480", "Id": "42079254", "Score": "9", "CreationDate": "2017-02-06T23:38:06.733", "LastActivityDate": "2017-02-06T23:47:53.480"}, "42078917": {"ParentId": "42078863", "CommentCount": "12", "Body": "<p>Because deleted copy constructors are allowed for POD types only after C++14. I would assume, you are compiling your code in C++11 mode.</p>\n", "OwnerUserId": "5245033", "PostTypeId": "2", "Id": "42078917", "Score": "2", "CreationDate": "2017-02-06T23:06:02.757", "LastActivityDate": "2017-02-06T23:06:02.757"}, "bq_ids": {"n4140": {"so_42078863_42079254_0": {"section_id": 5854, "quality": 0.8888888888888888, "length": 8}, "so_42078863_42079254_2": {"section_id": 369, "quality": 0.9090909090909091, "length": 10}}, "n3337": {"so_42078863_42079254_0": {"section_id": 5624, "quality": 0.8888888888888888, "length": 8}, "so_42078863_42079254_2": {"section_id": 359, "quality": 0.9090909090909091, "length": 10}}, "n4659": {"so_42078863_42079254_0": {"section_id": 7333, "quality": 0.8888888888888888, "length": 8}, "so_42078863_42079254_1": {"section_id": 7329, "quality": 0.9411764705882353, "length": 16}, "so_42078863_42079254_2": {"section_id": 381, "quality": 1.0, "length": 11}}}, "42078863": {"CommentCount": "4", "AcceptedAnswerId": "42079254", "PostTypeId": "1", "LastEditorUserId": "2069064", "CreationDate": "2017-02-06T23:01:54.970", "LastActivityDate": "2017-02-06T23:51:49.500", "LastEditDate": "2017-02-06T23:51:49.500", "ViewCount": "422", "FavoriteCount": "1", "Title": "Why is a struct with a deleted copy constructor not a POD type?", "Id": "42078863", "Score": "9", "Body": "<p>We have the following method to test if our structure is a POD or not.  It always returns true:</p>\n<pre><code>bool podTest() {\n  struct podTest {\n    int count;\n    int x[];\n  };\n\n  return std::is_pod&lt;podTest&gt;::value;  //Always returns true\n}\n</code></pre>\n<p>So far so good.  Now we make one change and delete the copy constructor:</p>\n<pre><code>bool podTest() {\n  struct podTest {\n    podTest(const podTest&amp;) = delete;\n    int count;\n    int x[];\n  };\n\n  return std::is_pod&lt;podTest&gt;::value;  //Always returns false\n}\n</code></pre>\n<p>This always returns false.  After reading over the definition of <code>is_pod</code> I am still struggling to understand what requirement it violates.  What am I missing?</p>\n<p>This is being compiled on godbolt using gcc 6.1, with <code>-std=c++14</code></p>\n", "Tags": "<c++><struct><c++14><copy-constructor>", "OwnerUserId": "459975", "AnswerCount": "2"}});