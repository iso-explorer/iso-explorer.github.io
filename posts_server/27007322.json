post_cb({"bq_ids": {"n4140": {"so_27007322_27007359_0": {"length": 21, "quality": 0.84, "section_id": 37}, "so_27007322_27007359_1": {"length": 13, "quality": 0.9285714285714286, "section_id": 8}}, "n3337": {"so_27007322_27007359_0": {"length": 21, "quality": 0.84, "section_id": 34}, "so_27007322_27007359_1": {"length": 13, "quality": 0.9285714285714286, "section_id": 5}}, "n4659": {"so_27007322_27007359_0": {"length": 19, "quality": 0.76, "section_id": 37}, "so_27007322_27007359_1": {"length": 13, "quality": 0.9285714285714286, "section_id": 8}}}, "27007322": {"ViewCount": "2283", "Body": "<p>So I have a const float that has a range from 0.0 to 1.0. What is the correct way to cast this to an unsigned int either by rounding or truncating?</p>\n<p>Would this be acceptable?</p>\n<pre><code>const float f=0.5f;\nunsigned int i=static_cast&lt;unsigned int&gt;(f);\n</code></pre>\n", "AcceptedAnswerId": "27007359", "Title": "C++ How to correctly round a const float to unsigned int", "CreationDate": "2014-11-19T01:21:12.043", "Id": "27007322", "CommentCount": "2", "LastEditDate": "2014-11-19T01:27:38.607", "PostTypeId": "1", "LastEditorUserId": "3537800", "LastActivityDate": "2014-11-19T01:39:50.860", "Score": "2", "OwnerUserId": "3537800", "Tags": "<c++>", "AnswerCount": "2"}, "27007359": {"Id": "27007359", "PostTypeId": "2", "Body": "<p>Yes, that's perfectly acceptable if you want to truncate, and if you don't care what happens with negative numbers or overflow.</p>\n<p>If you want to round, call <code>roundf</code> first (or, if you want a different rounding rule than \"half rounds away from zero\", write your own code).</p>\n<p>If you want to deal with negative numbers or overflow, you need to check before converting.</p>\n<p>According to 5.2.9 in the standard, <code>static_cast</code> in this case is defined to give you the same value as <code>unsigned int i(f)</code>. And I think most style guides would agree that the <code>static_cast</code> is preferred (as making casts explicit and noticeable is usually a good thing).</p>\n<p>In more detail:</p>\n<p>According to 4.9.1:</p>\n<blockquote>\n<p id=\"so_27007322_27007359_0\">A prvalue of a floating point type can be converted to a prvalue of an integer type. The conversion trun- cates; that is, the fractional part is discarded. The behavior is undefined if the truncated value cannot be represented in the destination type.</p>\n</blockquote>\n<p>I'm not sure exactly how the const-away works in C++14, but I believe it's not a qualification conversion, but part of the lvalue-to-rvalue conversion from 4.1.1:</p>\n<blockquote>\n<p id=\"so_27007322_27007359_1\">A glvalue (3.10) of a non-function, non-array type T can be converted to a prvalue \u2026\u00a0If T is a non-class type, the type of the prvalue is the cv-unqualified version of T.</p>\n</blockquote>\n<p>So, <code>f</code> has one lvalue-to-rvalue conversion from lvalue <code>const float</code> to rvalue <code>float</code>, then one floating-integral conversion from <code>float</code> to <code>unsigned int</code>, so by 4.0.1 it's a standard conversion, so by 5.2.9 it's valid as a <code>static_cast</code>.</p>\n", "LastEditorUserId": "908494", "LastActivityDate": "2014-11-19T01:39:50.860", "Score": "3", "CreationDate": "2014-11-19T01:26:06.097", "ParentId": "27007322", "CommentCount": "3", "LastEditDate": "2014-11-19T01:39:50.860", "OwnerUserId": "908494"}, "27007344": {"Id": "27007344", "PostTypeId": "2", "Body": "<p>Just add one half to round:</p>\n<pre><code>unsigned int i = static_cast&lt;unsigned int&gt;(f + 0.5);\n</code></pre>\n<p>Or nothing to truncate - what you have is fine (assuming <code>f &gt;= 0</code>)</p>\n<pre><code>unsigned int i = static_cast&lt;unsigned int&gt;(f);\n</code></pre>\n", "LastEditorUserId": "2069064", "LastActivityDate": "2014-11-19T01:31:13.753", "Score": "2", "CreationDate": "2014-11-19T01:23:42.563", "ParentId": "27007322", "CommentCount": "2", "LastEditDate": "2014-11-19T01:31:13.753", "OwnerUserId": "2069064"}});