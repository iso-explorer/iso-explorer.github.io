post_cb({"26307698": {"CommentCount": "4", "AcceptedAnswerId": "26307877", "CreationDate": "2014-10-10T20:38:27.053", "LastActivityDate": "2014-10-24T19:43:44.023", "PostTypeId": "1", "ViewCount": "512", "FavoriteCount": "0", "Title": "C++ Pseudo Destructor on Array Type", "Id": "26307698", "Score": "1", "Body": "<p>I'm using <code>std::aligned_storage</code> and need to store array types in the <code>aligned_storage</code>. The following code compiles in visual cpp but not Clang.</p>\n<pre><code>template &lt;typename T&gt;\nstruct Foo\n{\n    typename std::aligned_storage&lt;sizeof(T), std::alignment_of&lt;T&gt;::value&gt;::type store;\n\n    template &lt;typename... Args&gt;\n    Foo(Args&amp;&amp;... args)\n    {\n        new (&amp;store) T { std::forward&lt;Args&gt;(args)... };\n    }\n\n    void Release()\n    {\n        reinterpret_cast&lt;T*&gt;(&amp;store)-&gt;~T(); // Clang problems here\n    }\n};\n\nFoo&lt;int&gt; a(2); // ok\nFoo&lt;int[3]&gt; b(1, 2, 3); // error in clang\n</code></pre>\n<p>The specific error is:</p>\n<pre><code> expression of non-scalar type 'T' (aka 'int [3]') cannot be used in a pseudo-destructor expression\n</code></pre>\n<p>Is this valid C++ and how should I properly destruct array types manually?</p>\n", "Tags": "<c++><templates><c++11><stl>", "OwnerUserId": "306149", "AnswerCount": "1"}, "26307877": {"ParentId": "26307698", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>The program is ill-formed, you may not use a pseudo destructor call on an array type. \u00a75.2.4 Pseudo destructor call [expr.pseudo]:</p>\n<blockquote id=\"so_26307698_26307877_0\">\n<ol>\n<li>The use of a <em>pseudo-destructor-name</em> after a dot <code>.</code> or arrow <code>-&gt;</code> operator represents the destructor for the non-class type denoted by <em>type-name</em> or <em>decltype-specifier</em>. ...</li>\n<li>The left-hand side of the dot operator shall be of scalar type. The left-hand side of the arrow operator shall be of pointer to scalar type. ...</li>\n</ol>\n</blockquote>\n<p>An overloaded function can handle the destruction appropriately for both array and non-array types by manually destroying each of the array elements (<a href=\"http://coliru.stacked-crooked.com/a/352f491ff4374780\" rel=\"nofollow\">Live code</a>):</p>\n<pre><code>template &lt;typename T&gt;\nvoid destroy(T&amp; t)\n{\n    t.~T();\n}\n\ntemplate &lt;typename T, std::size_t N&gt;\nvoid destroy(T (&amp;t)[N])\n{\n    for (auto i = N; i-- &gt; 0;) {\n        destroy(t[i]);\n    }\n}\n\ntemplate &lt;typename T&gt;\nstruct Foo\n{\n    typename std::aligned_storage&lt;sizeof(T), std::alignment_of&lt;T&gt;::value&gt;::type store;\n\n    template &lt;typename... Args&gt;\n    Foo(Args&amp;&amp;... args)\n    {\n        new (&amp;store) T { std::forward&lt;Args&gt;(args)... };\n    }\n\n    void Release()\n    {\n        destroy(reinterpret_cast&lt;T&amp;&gt;(store));\n    }\n};\n</code></pre>\n", "OwnerUserId": "923854", "LastEditorUserId": "923854", "LastEditDate": "2014-10-24T19:43:44.023", "Id": "26307877", "Score": "2", "CreationDate": "2014-10-10T20:53:54.847", "LastActivityDate": "2014-10-24T19:43:44.023"}, "bq_ids": {"n4140": {"so_26307698_26307877_0": {"section_id": 6002, "quality": 0.5172413793103449, "length": 15}}, "n3337": {"so_26307698_26307877_0": {"section_id": 5770, "quality": 0.5172413793103449, "length": 15}}, "n4659": {"so_26307698_26307877_0": {"section_id": 7501, "quality": 0.5172413793103449, "length": 15}}}});