post_cb({"31810394": {"ParentId": "31807052", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Using <code>operator&gt;&gt;(double &amp;)</code> will first skip any whitespace characters, and then read character by character until a character is found that is not part of a number (e.g. a <code>p</code> or <code>x</code>, but not an <code>e</code> in case of <code>double</code>). This character is <strong>left inside the stream</strong> and the until then converted number returned. No error or failure is indicated.</p>\n<p>(<a href=\"http://ideone.com/nPVMLU\" rel=\"nofollow\">Example here</a>, unfortunately I couldn't find formal proof for my argument.)</p>\n<p>To achieve the desired behaviour, you need to split reading and converting:</p>\n<ol>\n<li>Read a token, probably terminated by whitespace, and</li>\n<li>convert it into the desired value.</li>\n</ol>\n<p>.</p>\n<pre><code>double read_side(std::istream &amp; in) {\n std::string token;\n std::string::size_type next;\n in &gt;&gt; token;\n double result = std::stod(token, &amp;next);\n if (next != token.size()) {\n  throw std::invalid_argument(\"trailing characters\");\n }\n return result;\n}\n</code></pre>\n<p><a href=\"http://ideone.com/X2NtsM\" rel=\"nofollow\">Live example here.</a></p>\n<hr>\n<p><em>I just noticed that you're now using <code>std::numeric_limits&lt;double&gt;::max()</code>, so the following does no longer apply to your code.</em></p>\n<p>Considering your question about the comparison: Your variables are of type <code>double</code>, so when you compare them to an integer value, that integer will first be converted to a <code>double</code>:</p>\n<blockquote>\n<p id=\"so_31807052_31810394_0\">[...] if either operand is <code>double</code>, the other shall be converted to <code>double</code>.</p>\n<p id=\"so_31807052_31810394_1\">[N4431 \u00a75/10.3]</p>\n</blockquote>\n<p>And a <code>double</code> is able to store larger values than <code>std::numeric_limits&lt;int&gt;::max()</code>.</p>\n</hr>", "OwnerUserId": "1116364", "LastEditorUserId": "1116364", "LastEditDate": "2015-08-04T14:32:18.847", "Id": "31810394", "Score": "0", "CreationDate": "2015-08-04T13:15:46.693", "LastActivityDate": "2015-08-04T14:32:18.847"}, "31808593": {"ParentId": "31807052", "CommentCount": "0", "Body": "<p><code>cin.fail()</code> returns true if the last cin call failed.\nConsider the input <code>2p 3p 4p</code>. This will work if you use <code>cin.ignore()</code> in between readings. <code>FirstSide</code> will be 2, <code>SecondSide</code> will be 3 and <code>ThirdSide</code> will be 4.</p>\n<p>You could try clearing the stream and prompt the user for another input instead of throwing an exception.</p>\n", "OwnerUserId": "5064389", "PostTypeId": "2", "Id": "31808593", "Score": "0", "CreationDate": "2015-08-04T11:52:11.937", "LastActivityDate": "2015-08-04T11:52:11.937"}, "bq_ids": {"n4140": {"so_31807052_31810394_0": {"section_id": 5943, "quality": 1.0, "length": 6}}, "n3337": {"so_31807052_31810394_0": {"section_id": 5714, "quality": 1.0, "length": 6}}, "n4659": {"so_31807052_31810394_0": {"section_id": 7428, "quality": 1.0, "length": 6}}}, "31807052": {"CommentCount": "8", "ViewCount": "108", "PostTypeId": "1", "LastEditorUserId": "3763293", "CreationDate": "2015-08-04T10:37:58.280", "LastActivityDate": "2015-08-04T14:32:18.847", "Title": "Checking if cin fails for strings that start with numbers", "LastEditDate": "2015-08-04T11:08:47.383", "Id": "31807052", "Score": "0", "Body": "<p>I am sure I am missing on a very simple thing here. My code looks something like this. It just checks what is the type of triangle.</p>\n<pre><code>try\n    {\n        double FirstSide,SecondSide,ThirdSide;\n        cout&lt;&lt;\"Enter the first side: \";\n        cin&gt;&gt;FirstSide;\n\n        if(cin.fail())\n        {\n\n            throw invalid_argument(\"Your input doesn't look to be a number.\");\n        }\n\n        if(FirstSide &gt; numeric_limits&lt;double&gt;::max() || FirstSide&lt;0)\n        {\n            throw invalid_argument(\"Input is out of range.\");\n        }\n        cin.ignore(); // Used afterwards, just to check\n\n        cout&lt;&lt;\"Enter the second side: \";\n        cin&gt;&gt;SecondSide;\n\n        if(cin.fail())\n        {\n            throw invalid_argument(\"Your input doesn't look to be a number.\");\n        }\n\n        if(SecondSide &gt; numeric_limits&lt;double&gt;::max() || SecondSide&lt;0 )\n        {\n            throw invalid_argument(\"Input is out of range.\");\n        }\n\n        cout&lt;&lt;\"Enter the third side: \";\n        cin&gt;&gt;ThirdSide;\n\n        if(cin.fail())\n        {\n            throw invalid_argument(\"Your input doesn't look to be a number.\");\n        }\n\n        if(ThirdSide &gt; numeric_limits&lt;double&gt;::max() || ThirdSide &lt; 0)\n        {\n            throw invalid_argument(\"Input is out of range.\");\n        }\n\n        // Check for equilateral\n        if(FirstSide == SecondSide == ThirdSide)\n        {\n            cout&lt;&lt;\"The triangle is equilateral. \";\n        }\n\n        else if(FirstSide == SecondSide || SecondSide == ThirdSide || FirstSide == ThirdSide)\n        {\n            cout&lt;&lt;\"The triangle is isosceles.\";\n        }\n        else\n        {\n            cout&lt;&lt;\"The triangle is scalene. \";\n        }\n\n\n    }\n    catch(invalid_argument&amp; error)\n    {\n        cerr&lt;&lt;error.what()&lt;&lt;\" Will now exit. \"&lt;&lt;endl;\n        return -1;\n    }\n</code></pre>\n<p>If I input <code>2p</code>, I get the output: <code>Enter the second side: Your input doesn't look to be a number. Will now exit.</code></p>\n<p>Since the input is invalid for FirstSide, <code>Enter second side:</code> should not actually be printed. I am aware of the fact that compiler might be taking <code>2</code> for <code>FirstSide</code> and trying to assign <code>p</code> to <code>SecondSide</code> and hence the behaviour. If I ignore the values in stream (by using <code>cin.ignore()</code>, I actually get no error).</p>\n<p>My question is how do I get my input correct for such cases like <code>2p</code> or <code>1k</code>?</p>\n<p>Thanks.</p>\n<p><strong>EDIT:</strong></p>\n<p>Another question has popped up from the comments, How is the <code>FirstNumber &gt; numeric_limits&lt;int&gt;::max()</code> comparison actually working if the value has already been assigned to <code>FirstNumber</code> ? \nReference: <a href=\"https://msdn.microsoft.com/en-IN/library/hh279678.aspx\" rel=\"nofollow\">https://msdn.microsoft.com/en-IN/library/hh279678.aspx</a></p>\n", "Tags": "<c++>", "OwnerUserId": "3763293", "AnswerCount": "2"}});