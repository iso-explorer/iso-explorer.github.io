post_cb({"25086235": {"ParentId": "25085615", "CommentCount": "0", "CreationDate": "2014-08-01T18:13:41.697", "OwnerUserId": "1774667", "PostTypeId": "2", "Id": "25086235", "Score": "1", "Body": "<p>Table 143 leaks extra information.</p>\n<p>If a match was not found, then <code>m.size()</code> is zero, and hence <code>m[0]</code> returns the unmatched sub expression (as <code>0</code> &gt;= <code>m.size()</code>), in which case <code>m[0].matched</code> is false.</p>\n<p>If a match was found, then <code>m.size()</code> is non-zero, and hence <code>m[0]</code> is the entire matched expression, hence <code>m[0].matched</code> is true.  If <code>m.size()</code> is greater than 1, then <code>m[i]</code> for <code>i&lt;m.size()</code> are sub-expressions that are matched by your regular expression.</p>\n<p>Had they stated \"<code>m[0].matched</code>\" is always true, then the reference to Table 143 would still be true (as the reference only occurs when there is a match), but it would be overly confusing.</p>\n<p>If you examine <code>re.results</code> (28.10/4) you'll see that unlike most containers, accessing <code>[]</code> beyond <code>.size()</code> is valid on a match.</p>\n", "LastActivityDate": "2014-08-01T18:13:41.697"}, "25086165": {"ParentId": "25085615", "CommentCount": "4", "CreationDate": "2014-08-01T18:09:22.073", "OwnerUserId": "241631", "PostTypeId": "2", "Id": "25086165", "Score": "5", "Body": "<p>You're misunderstanding the post-conditions information because the C++11 standard (N3337) contains redundant wording in that section.</p>\n<p>If <code>regex_search</code> returns <code>false</code>, meaning a match was not found anywhere within the input string, then the state of the <code>match_results</code> object is unspecified, except for the member functions <code>match_results::ready</code>, which returns <code>true</code>, <code>match_results::size</code>, which returns <code>0</code>, and <code>match_results::empty</code>, which returns <code>true</code>. </p>\n<p>The result of <code>match_results::operator[]</code> is unspecified in that case, and you should not be calling it.</p>\n<p>On the other hand, if <code>regex_search</code> returns <code>true</code>, that means a match was found, in which case <code>m[0].matched</code> <strong>will always be <code>true</code></strong>. There is no case where it can be <code>false</code> in this situation.</p>\n<p>This is clarified in the latest draft N3936, which simply states in Table 143:</p>\n<blockquote>\n<p id=\"so_25085615_25086165_0\">m[0].matched | true</p>\n</blockquote>\n<p>The issue report that brought about this wording change can be <a href=\"http://wg21.cmeerw.net/lwg/issue2205\">viewed here</a>. Quoting from it:</p>\n<blockquote>\n<p id=\"so_25085615_25086165_1\">There's an analogous probem in Table 143: the condition for <code>m[0].matched</code> is \"true if a match was found, false otherwise.\" But Table 143 gives post-conditions for a successful match, so the condition should be simply \"true\". </p>\n</blockquote>\n", "LastActivityDate": "2014-08-01T18:09:22.073"}, "bq_ids": {"n4140": {"so_25085615_25085615_3": {"section_id": 2681, "quality": 0.6666666666666666, "length": 4}, "so_25085615_25085615_2": {"section_id": 5235, "quality": 0.8333333333333334, "length": 20}, "so_25085615_25085615_1": {"section_id": 5242, "quality": 0.8888888888888888, "length": 24}}, "n3337": {"so_25085615_25085615_3": {"section_id": 5032, "quality": 1.0, "length": 6}, "so_25085615_25085615_2": {"section_id": 5032, "quality": 0.8333333333333334, "length": 20}, "so_25085615_25085615_1": {"section_id": 5039, "quality": 0.8888888888888888, "length": 24}}, "n4659": {"so_25085615_25085615_3": {"section_id": 3421, "quality": 0.6666666666666666, "length": 4}, "so_25085615_25085615_2": {"section_id": 6658, "quality": 0.8333333333333334, "length": 20}, "so_25085615_25085615_1": {"section_id": 6665, "quality": 0.8888888888888888, "length": 24}}}, "25085615": {"CommentCount": "0", "ViewCount": "293", "PostTypeId": "1", "LastEditorUserId": "1997715", "CreationDate": "2014-08-01T17:29:55.250", "LastActivityDate": "2014-08-01T18:13:41.697", "Title": "Does zero match always \"matches\" when regex_search returns true?", "AcceptedAnswerId": "25086165", "LastEditDate": "2014-08-01T17:49:24.000", "Id": "25085615", "Score": "4", "Body": "<p>Here are some quotes from C++11 standard:</p>\n<blockquote>\n<p id=\"so_25085615_25085615_0\">28.11.3 regex_search [re.alg.search]</p>\n</blockquote>\n<p><code>m</code> is a an argument of <code>regex_search</code> of type <code>match_results</code>.</p>\n<blockquote>\n<p id=\"so_25085615_25085615_1\">2 E\ufb00ects: Determines whether the re is some sub-sequence within [first,last) that matches the regular expression e. The parameter flags is used to control how the expression is matched against the character sequence. Returns true if such a sequence exists, false otherwise. </p>\n<p id=\"so_25085615_25085615_2\">3 Postconditions: m.ready() == true in all cases. If the function returns false, then the effect on parameter m is unspeci\ufb01ed except that m.size() returns 0 and m.empty() returns true. Otherwise the effects on parameter m are given in Table 143. </p>\n</blockquote>\n<p>The table 143 states the following about <code>m[0].matched</code>:</p>\n<blockquote>\n<p id=\"so_25085615_25085615_3\">true if a match was found, and false otherwise. </p>\n</blockquote>\n<p>The above seems to imply that it is possible for <code>regex_search</code> to return <code>true</code> and at the same time <code>m[0].matched</code> to be <code>false</code>. Can someone please provide an example (of regex pattern and text to match) that shows when it is possible?</p>\n<p>In other words, with what values of <code>text</code> and <code>re</code> the following program will not assert:</p>\n<pre><code>#include &lt;regex&gt;\n#include &lt;cassert&gt;\nint main()\n{\n    char re[] = \"\"; // what kind of regular expression must it be?\n    char text[] = \"\"; // what kind of input text must it be?\n    std::cmatch m;\n    assert(std::regex_search(text, m, std::regex(re)) == true);\n    assert(m[0].matched == false);\n}\n</code></pre>\n", "Tags": "<c++><regex><c++11>", "OwnerUserId": "1997715", "AnswerCount": "2"}});