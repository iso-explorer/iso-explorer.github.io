post_cb({"45628592": {"CommentCount": "0", "ViewCount": "34", "PostTypeId": "1", "LastEditorUserId": "731310", "CreationDate": "2017-08-11T06:41:37.667", "LastActivityDate": "2017-08-11T07:16:55.777", "Title": "class parametrized with classes and confusion with helper functions", "AcceptedAnswerId": "45628827", "LastEditDate": "2017-08-11T07:16:55.777", "Id": "45628592", "Score": "3", "Body": "<p>I'm learning some new concepts about c++ and I'm playing with them.\nI wrote some piece of code that really confuses me in terms of how it works.</p>\n<pre><code>#include &lt;iostream&gt;\n\nclass aid {\npublic:\n    using aid_t = std::string;\n    void setaid(const std::string&amp; s) {\n        aid_ = s;\n    }\n    const aid_t&amp; getaid() const {\n        return aid_;\n    }\nprivate:\n    aid_t aid_;\n};\n\nclass c {\npublic:\n    using c_t = std::string;\n    void setc(const aid::aid_t&amp; aid_val) {\n        if (aid_val.size() &lt; 4)\n            c_ = \"yeah\";\n        else\n            c_ = aid_val + aid_val;\n    }\n    const c_t&amp; getc() {\n        return c_;\n    }\nprivate:\n    c_t c_;\n};\n\ntemplate&lt;typename ...Columns&gt;\nclass table : public Columns... {\n};\n\ntemplate &lt;typename... Columns&gt;\nvoid f(table&lt;Columns...&gt;&amp; t) {\n    t.setaid(\"second\");\n    std::cout &lt;&lt; t.getaid() &lt;&lt; \"\\n\";\n}\n\nvoid f2(table&lt;aid&gt;&amp; t) {\n    t.setaid(\"third\");\n    std::cout &lt;&lt; t.getaid() &lt;&lt; \"\\n\";\n}\n\nint main() {\n    table&lt;aid, c&gt; tb;\n    tb.setaid(\"first\");\n    std::cout &lt;&lt; tb.getaid() &lt;&lt; \" \" &lt;&lt; \"\\n\";\n    // f&lt;c&gt;(tb); // (1) doesnt compile, that seem obvious\n    f&lt;aid&gt;(tb);  // (2) works?\n    f(tb); // (3) works too -- template parameter deduction\n    // f2(tb); // (4) doesnt work? worked with (2)...\n}\n</code></pre>\n<p>The idea here is simple, I have some table with columns. And then I would like to create some functions that require only some set of columns and doesn't care if passed argument has some extra columns.</p>\n<p>My confusion is mostly about points (2) and (4) in code... My intuition says it should be the same, why it isn't and (2) compiles and (4) doesn't?  Is there any major topic I'm missing and should read up?\nIs there a way to achieve this particular functionality? Cheers</p>\n", "Tags": "<c++><templates>", "OwnerUserId": "731310", "AnswerCount": "1"}, "45628827": {"ParentId": "45628592", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2017-08-11T06:56:21.027", "Score": "3", "LastEditorUserId": "3552770", "LastEditDate": "2017-08-11T07:06:43.100", "Id": "45628827", "OwnerUserId": "3552770", "Body": "<p>In the second case, the compiler still deduces the rest of the template parameter pack, so that you get <code>table&lt;aid, c&gt; &amp;</code> as the function parameter. This is different from (4) (<code>table&lt;aid&gt; &amp;</code>).</p>\n<p><a href=\"http://eel.is/c++draft/temp.arg.explicit#3\" rel=\"nofollow noreferrer\"><code>[temp.arg.explicit]/3</code></a>:</p>\n<blockquote>\n<p id=\"so_45628592_45628827_0\"><strong>Trailing template arguments that can be deduced (14.8.2) or obtained\n  from default template-arguments may be omitted from the list of\n  explicit template-arguments.</strong> A trailing template parameter pack\n  (14.5.3) not otherwise deduced will be deduced to an empty sequence of\n  template arguments. If all of the template arguments can be deduced,\n  they may all be omitted; in this case, the empty template argument\n  list &lt;&gt; itself may also be omitted. In contexts where deduction is\n  done and fails, or in contexts where deduction is not done, if a\n  template argument list is specified and it, along with any default\n  template arguments, identifies a single function template\n  specialization, then the template-id is an lvalue for the function\n  template specialization.</p>\n</blockquote>\n", "LastActivityDate": "2017-08-11T07:06:43.100"}, "bq_ids": {"n4140": {"so_45628592_45628827_0": {"section_id": 286, "quality": 0.9726027397260274, "length": 71}}, "n3337": {"so_45628592_45628827_0": {"section_id": 277, "quality": 0.9726027397260274, "length": 71}}, "n4659": {"so_45628592_45628827_0": {"section_id": 293, "quality": 0.9726027397260274, "length": 71}}}});