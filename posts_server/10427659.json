post_cb({"10427742": {"ParentId": "10427659", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>At insertion <code>n</code>, there are <code>n</code> elements currently in the vector that needs to be shifted.</p>\n<pre><code>vector&lt;int&gt; values;\nfor (size_t i = 0; i &lt; N; ++i)\n{\n     //At this point there are `i` elements in the vector that need to be moved\n     //to make room for the new element\n     values.insert(values.begin(), 0); \n}\n</code></pre>\n", "OwnerUserId": "125672", "LastEditorUserId": "125672", "LastEditDate": "2012-05-03T08:40:35.807", "Id": "10427742", "Score": "1", "CreationDate": "2012-05-03T08:30:37.230", "LastActivityDate": "2012-05-03T08:40:35.807"}, "10427710": {"ParentId": "10427659", "CommentCount": "0", "Body": "<p>The first Value is shifted N-1 times, each time a new value is inserted it has to move. The second value is shifted N-2 times because only N-2 values are added after it. Next value is shifted N-3 and so on. The last value is not shifted. </p>\n<p>I don't know why the author speaks about N and not N-1. But the reason for your confusion is, that the author counts the shifts of a single value and you count the amount of shift prozesses involving more than one single value shift. </p>\n", "OwnerUserId": "991425", "PostTypeId": "2", "Id": "10427710", "Score": "0", "CreationDate": "2012-05-03T08:28:14.017", "LastActivityDate": "2012-05-03T08:28:14.017"}, "10427659": {"CommentCount": "1", "ViewCount": "1435", "PostTypeId": "1", "LastEditorUserId": "991425", "CreationDate": "2012-05-03T08:24:00.433", "LastActivityDate": "2012-05-03T11:59:26.963", "Title": "Insertion into STL vector", "AcceptedAnswerId": "10427814", "LastEditDate": "2012-05-03T11:59:26.963", "Id": "10427659", "Score": "0", "Body": "<p>With a C++ STL vector we are building a vector of N elements and for some\nreason we chose to insert them at the front of the vector. Every element insertion at the front of a vector forces the shift of all existing elements by 1. This results in (1+2+3+...+N) overall shifts of vector elements, which is (N/2)(N+1) shifts.</p>\n<p>My question is how the author came with (1+2+3+...N), I thought it should be 1+1+1..N as we are moving one element at one position to get empty at beginning?</p>\n<p>Thanks!</p>\n", "Tags": "<c++>", "OwnerUserId": "519882", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_10427659_10427814_0": {"section_id": 987, "quality": 0.8181818181818182, "length": 9}}, "n3337": {"so_10427659_10427814_0": {"section_id": 972, "quality": 0.8181818181818182, "length": 9}}, "n4659": {"so_10427659_10427814_0": {"section_id": 1050, "quality": 0.8181818181818182, "length": 9}}}, "10427814": {"ParentId": "10427659", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>From <code>[vector.modifiers]/2</code> (which describes <code>vector::insert</code>):</p>\n<blockquote>\n<p id=\"so_10427659_10427814_0\">Complexity: The complexity is linear in the number of elements inserted plus the distance to the end of the vector.</p>\n</blockquote>\n<p>Each time that you add an element the distance to the end of the vector is increased by one.</p>\n<p>The first time that you add an element, there is 1 to be inserted and the distance to the end is 0, so the complexity is 1 + 0 = 1. The second time, there is 1 to be inserted, and the distance to the end is 1, so the complexity is 1 + 1 = 2. The third time, the distance to the end is 2, so the complexity is 1 + 2 = 3. This is what creates the 1 + 2 + 3 + ... + N pattern that the author is describing.</p>\n", "OwnerUserId": "485561", "LastEditorUserId": "485561", "LastEditDate": "2012-05-03T08:45:20.530", "Id": "10427814", "Score": "4", "CreationDate": "2012-05-03T08:36:41.003", "LastActivityDate": "2012-05-03T08:45:20.530"}});