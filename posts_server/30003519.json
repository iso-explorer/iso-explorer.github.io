post_cb({"30003618": {"ParentId": "30003519", "PostTypeId": "2", "CommentCount": "6", "Body": "<p><code>5.5</code> is a <code>double</code>, but none of your functions take a <code>double</code> argument. So, the compiler gets confused on whether to call the function with the <code>int</code> parameter, or the function with the <code>float</code> parameter. So, you get a an error saying it is ambiguous.</p>\n<p>That is why when you changed the function to have a <code>double</code> parameter, the error no longer came, because now there is a function which can take a <code>double</code> argument, and thus there is ambiguity there.</p>\n<p>You can also fix the problem by calling the function as</p>\n<pre><code>obj.add(5.5f);\n</code></pre>\n<p>Adding the <code>f</code> after a number makes it to a float.</p>\n<p>Let's look at the C++ Standard</p>\n<p><strong>\u00a7 2.13.4</strong></p>\n<blockquote>\n<p id=\"so_30003519_30003618_0\">1 A floating literal consists of an integer part, a decimal point, a\n  fraction part, an e or E, an optionally signed integer exponent, and\n  an optional type suffix. The integer and fraction parts both consist\n  of a sequence of decimal (base ten) digits. Optional separating single\n  quotes in a digit-sequence are ignored when determining its value. [\n  Example: The literals 1.602\u2019176\u2019565e-19 and 1.602176565e-19 have the\n  same value. \u2014end example ] Either the integer part or the fraction\n  part (not both) can be omitted; either the decimal point or the letter\n  e (or E ) and the exponent (not both) can be omitted. The integer\n  part, the optional decimal point and the optional fraction part form\n  the significant part of the floating literal. The exponent, if\n  present, indicates the power of 10 by which the significant part is to\n  be scaled. If the scaled value is in the range of representable values\n  for its type, the result is the scaled value if representable, else\n  the larger or smaller representable value nearest the scaled value,\n  chosen in an implementation-defined manner. <strong>The type of a floating\n  literal is double unless explicitly specified by a suffix. The\n  suffixes f and F specify float, the suffixes l and L specify long\n  double.</strong> If the scaled value is not in the range of representable\n  values for its type, the program is ill-formed.</p>\n</blockquote>\n<p>( Sorry for posting all of it, but you can learn more about <code>float</code>s this way )</p>\n", "OwnerUserId": "4516316", "LastEditorUserId": "1155000", "LastEditDate": "2015-05-02T15:19:34.360", "Id": "30003618", "Score": "5", "CreationDate": "2015-05-02T14:46:02.633", "LastActivityDate": "2015-05-02T15:19:34.360"}, "30003519": {"CommentCount": "4", "ViewCount": "1411", "PostTypeId": "1", "ClosedDate": "2016-07-07T10:54:00.330", "LastEditorUserId": "366904", "CreationDate": "2015-05-02T14:35:45.380", "LastActivityDate": "2016-02-20T13:18:49.540", "Title": "Using float gives \"call to overloaded function is ambiguous\" error", "AcceptedAnswerId": "30003618", "LastEditDate": "2016-02-20T13:18:49.540", "Id": "30003519", "Score": "4", "Body": "<p>I'm overloading the function <code>add()</code>, but when I used the <code>float</code> datatype it is showing an error. However, when I change it to <code>double</code>, then it's working fine. Why is <code>float</code> causing the error?</p>\n<p>Code is:</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nclass students{\n    private:\n        int i;\n        float f;\n\n    public:\n        void add(int b){\n            i=b;\n            cout &lt;&lt; \"First Int: \" &lt;&lt; i;\n        }\n        void add(float c){\n            f=c;\n            cout &lt;&lt; \"Second Int: \" &lt;&lt; f;\n        }\n\n};\n\nint main(){\n    students obj;\n    obj.add(9);\n    obj.add(5.5);\n}\n</code></pre>\n<p>Errors:</p>\n<pre><code>In function 'int main()':\n[Error] call of overloaded 'add(double)' is ambiguous\n[Note] candidates are:\n[Note] void students::add(int)\n[Note] void students::add(float)\n</code></pre>\n", "Tags": "<c++><overloading><ambiguous>", "OwnerUserId": "2769917", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_30003519_30003618_0": {"section_id": 5348, "quality": 0.916030534351145, "length": 120}}, "n3337": {"so_30003519_30003618_0": {"section_id": 5145, "quality": 0.7938931297709924, "length": 104}}, "n4659": {"so_30003519_30003618_0": {"section_id": 6773, "quality": 0.8625954198473282, "length": 113}}}});