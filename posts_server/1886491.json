post_cb({"1886525": {"CommentCount": "0", "Body": "<p>When you <code>throw</code> an exception, it keeps unwinding the stack until it reaches an appropriate <code>catch</code> block.  As part of the stack unwinding process, destructors are called for every object in each frame's scope.</p>\n<p>Now, when a destructor throws an exception in this case, there's a dilemma -- which <code>catch</code> block is the program supposed to stop at?  The original exception, or the new exception?  Either way, there's an unprocessed exception involved.</p>\n<p>Program's aren't good at making decisions like this, so the standard says it won't even try to resolve the issue and just gives up.</p>\n<p>Check out <a href=\"http://www.parashift.com/c++-faq-lite/exceptions.html#faq-17.3\" rel=\"nofollow noreferrer\">the FAQ-Lite entry</a> explaining this exact situation for further details.</p>\n", "CreationDate": "2009-12-11T08:02:43.897", "ParentId": "1886491", "Id": "1886525", "LastActivityDate": "2009-12-11T08:02:43.897", "PostTypeId": "2", "Score": "1", "OwnerUserId": "64918"}, "1886585": {"CommentCount": "0", "Body": "<p><code>Item 8</code> of <a href=\"http://rads.stackoverflow.com/amzn/click/0201924889\" rel=\"nofollow noreferrer\">Effective C++</a> says that you shouldn't ever allow an exception to leave a destructor.</p>\n", "CreationDate": "2009-12-11T08:18:37.193", "ParentId": "1886491", "Id": "1886585", "LastActivityDate": "2009-12-11T08:18:37.193", "PostTypeId": "2", "Score": "1", "OwnerUserId": "82320"}, "1886503": {"CommentCount": "0", "Body": "<p>This post has an explanation of the problem:\n<a href=\"http://web.tiscali.it/fanelia/cpp-faq-en/exceptions.html#faq-17.3\" rel=\"nofollow noreferrer\">http://web.tiscali.it/fanelia/cpp-faq-en/exceptions.html#faq-17.3</a></p>\n", "CreationDate": "2009-12-11T07:57:16.573", "ParentId": "1886491", "Id": "1886503", "LastActivityDate": "2009-12-11T07:57:16.573", "PostTypeId": "2", "Score": "1", "OwnerUserId": "11758"}, "1886502": {"CommentCount": "0", "Body": "<p>The reason is simple... if an exception is thrown during exception propagation, then which exception should be propagated? The original exception or the new exception? If the new exception is propagated and then handled, how will the program know that the other exception occurred?  Or will the original exception be ignored? This and many other complications lead to the simple rule that only one exception may be propagated at a time, and multiple failures will result in the application being terminated.</p>\n", "CreationDate": "2009-12-11T07:56:36.633", "ParentId": "1886491", "Id": "1886502", "LastActivityDate": "2009-12-11T07:56:36.633", "PostTypeId": "2", "Score": "3", "OwnerUserId": "136540"}, "1886491": {"FavoriteCount": "2", "ViewCount": "3192", "Id": "1886491", "AcceptedAnswerId": "1886499", "Score": "4", "Title": "Why does my program terminate when an exception is thrown by a destructor?", "LastEditorUserId": "11208", "CommentCount": "2", "Body": "<p>I am not getting why if there is an active exception then if an exception is raised again, it leads to termination of program. Could someone explain?</p>\n", "Tags": "<c++><exception><destructor>", "CreationDate": "2009-12-11T07:52:38.953", "LastEditDate": "2009-12-11T15:02:21.013", "LastActivityDate": "2016-08-14T19:10:50.180", "PostTypeId": "1", "AnswerCount": "6", "OwnerUserId": "303986"}, "1886499": {"CreationDate": "2009-12-11T07:55:36.170", "CommentCount": "2", "Body": "<p>What is it suppose to do? It can't \"double catch\" or anything, nor does it make sense to simply ignore one. The standard specifies that if, during stack unwinding, another exception escapes, then <code>terminate</code> shall be called.</p>\n<p>There is more discussion in the <a href=\"http://www.parashift.com/c++-faq-lite/exceptions.html#faq-17.3\" rel=\"nofollow noreferrer\">C++ FAQ</a>. One \"solution\" is to wrap your destructor code in a try/catch block, and simply don't let exceptions escape.</p>\n<p>Another is to come up with some sort of custom exception chaining scheme. You'd do the above, but instead of ignoring an exception, you would append it to the currently thrown exception, and at the catch site handle both by hand.</p>\n<p>The best solution, I think, it to try to remove the exceptional code from your destructor.</p>\n", "Id": "1886499", "OwnerUserId": "87234", "LastEditDate": "2009-12-11T08:01:58.980", "ParentId": "1886491", "LastActivityDate": "2009-12-11T08:01:58.980", "PostTypeId": "2", "Score": "14", "LastEditorUserId": "87234"}, "bq_ids": {"n4140": {"so_1886491_1886554_0": {"length": 28, "quality": 0.7777777777777778, "section_id": 3345}}, "n3337": {"so_1886491_1886554_0": {"length": 29, "quality": 0.8055555555555556, "section_id": 3215}}}, "1886554": {"CreationDate": "2009-12-11T08:09:22.897", "CommentCount": "0", "Body": "<p>Quoth the standard (15.2.3):</p>\n<blockquote>\n<p id=\"so_1886491_1886554_0\">The process of calling destructors for automatic objects constructed on the path from a try block to a throw-expression is called ``stack unwinding.'' [Note: If a destructor called during stack unwinding exits with an exception, terminate is called (except.terminate). So destructors should generally catch exceptions and not let them propagate out of the destructor. \n  --- end note]</p>\n</blockquote>\n<p>Basically C++ (as most other popular programming languages) has no good support for handling multiple errors using exceptions. Exceptions, as a mechanism, is simply deficient in that respect. </p>\n<p>The FAQ has some suggestion on <a href=\"http://www.parashift.com/c++-faq-lite/exceptions.html#faq-17.3\" rel=\"nofollow noreferrer\">How to handle a destructor that fails?</a></p>\n<p>Stroustroup has this to say on the matter (<a href=\"http://www2.research.att.com/~bs/3rd.html\" rel=\"nofollow noreferrer\">TCPL 14.7</a>):</p>\n<blockquote>\n<p id=\"so_1886491_1886554_1\">The reason for <strong><em>terminate()</em></strong> is that exception handling must occasionally be abandoned for less subtle error-handling techniques. For example, <strong><em>terminate()</em></strong> could be used to abort a process or maybe to re-initialize a system. The intent is for <strong><em>terminate()</em></strong> to be a drastic measure to applied when the error-recovery strategy implemented by the exception-handling mechanism has failed and it is time to go to another level of a fault tolerance strategy.</p>\n</blockquote>\n<p>See also previous related discussion on SO: basically <a href=\"https://stackoverflow.com/questions/tagged/exception+destructor\">any question about exceptions and destructors</a>.</p>\n", "Id": "1886554", "OwnerUserId": "11208", "LastEditDate": "2017-05-23T11:54:22.623", "ParentId": "1886491", "LastActivityDate": "2009-12-11T08:22:09.720", "PostTypeId": "2", "Score": "2", "LastEditorUserId": "-1"}});