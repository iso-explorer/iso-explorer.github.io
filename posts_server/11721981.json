post_cb({"11722281": {"ParentId": "11721981", "CommentCount": "0", "Body": "<p>You can't do it for the following reasoning. Let's assume it <em>is</em> possible. </p>\n<p>So you created a macro that replaces itself with <code>/*</code>, and another for <code>*/</code>. What happens then? First, the comments are removed from the code. After that, the preprocessor replaces your macros with the comments. After that, the compiler will choke: it doesn't know what to do with <code>/*</code> and <code>*/</code> because it simply never faces such things: the comments are <em>always</em> delete before the compilation, so it doesn't even know what a \"comment\" is. It will probably think it's a division followed by multiplication. </p>\n<p>So our assumption is wrong and you can't do it. </p>\n", "OwnerUserId": "1490355", "PostTypeId": "2", "Id": "11722281", "Score": "5", "CreationDate": "2012-07-30T13:10:07.363", "LastActivityDate": "2012-07-30T13:10:07.363"}, "36851184": {"ParentId": "11721981", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>If you are using an IDE, you can simply press <kbd>ctrl</kbd><kbd>/</kbd> for Windows or <kbd>command</kbd><kbd>/</kbd> on Mac. You should select the lines you want to comment first.</p>\n", "OwnerUserId": "5947406", "LastEditorUserId": "1950231", "LastEditDate": "2016-07-21T01:07:51.563", "Id": "36851184", "Score": "0", "CreationDate": "2016-04-25T21:13:58.927", "LastActivityDate": "2016-07-21T01:07:51.563"}, "11722479": {"ParentId": "11721981", "CommentCount": "0", "Body": "<p>Comment processing happens before macro expansion:</p>\n<blockquote>\n<p id=\"so_11721981_11722479_0\"><a class=\"post-tag\" href=\"/questions/tagged/c%2b%2b11\" rel=\"tag\" title=\"show questions tagged 'c++11'\">c++11</a></p>\n<h3>2.2 Phases of translation [lex.phases]</h3>\n<p id=\"so_11721981_11722479_1\">1 - The precedence among the syntax rules of translation is speci\ufb01ed by the following phases. [...]<br/>\n  \u00a0 3. [...] Each comment is replaced by one space character. [...]<br/>\n  \u00a0 4. Preprocessing directives are executed, macro invocations are expanded [...]</p>\n</blockquote>\n<p>Perhaps you could try preprocessing your source file twice? (Note: don't do this.)</p>\n", "OwnerUserId": "567292", "PostTypeId": "2", "Id": "11722479", "Score": "4", "CreationDate": "2012-07-30T13:21:21.500", "LastActivityDate": "2012-07-30T13:21:21.500"}, "11722231": {"ParentId": "11721981", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_11721981_11722231_0\">But sure enough, this approach doesn't work.</p>\n</blockquote>\n<p>It can't work. The comment in your <code>#define C_BEGIN</code> is not a part of and cannot be a part of your macro definition. As far as the language is concerned, your <code>#define C_END</code> is not a macro definition. It just a part of that multiline comment. In other words, it is whitespace. Comments are processed (turned into whitespace) before the preprocessor / compiler gets to the stage of interpreting your macro definitions.</p>\n", "OwnerUserId": "774499", "PostTypeId": "2", "Id": "11722231", "Score": "2", "CreationDate": "2012-07-30T13:06:24.513", "LastActivityDate": "2012-07-30T13:06:24.513"}, "11721981": {"CommentCount": "3", "ViewCount": "1311", "CreationDate": "2012-07-30T12:51:17.447", "LastActivityDate": "2016-07-21T01:07:51.563", "Title": "Macros and multi-line comments", "AcceptedAnswerId": "11722281", "PostTypeId": "1", "Id": "11721981", "Score": "1", "Body": "<p>I need to have multi-line comments within a group of macros so that one of the macros initiates a comment block and another concludes it, like this:</p>\n<pre><code>#define C_BEGIN /*\n#define C_END */\n... other macros\n</code></pre>\n<p>But sure enough, this approach doesn't work.</p>\n", "Tags": "<c++><macros>", "OwnerUserId": "1472641", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_11721981_11722479_1": {"section_id": 5313, "quality": 0.9047619047619048, "length": 19}}, "n3337": {"so_11721981_11722479_1": {"section_id": 5110, "quality": 0.9047619047619048, "length": 19}}, "n4659": {"so_11721981_11722479_1": {"section_id": 6737, "quality": 0.9047619047619048, "length": 19}}}});