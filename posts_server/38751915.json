post_cb({"bq_ids": {"n4140": {"so_38751915_38751991_2": {"length": 16, "quality": 0.8888888888888888, "section_id": 5945}}, "n3337": {"so_38751915_38751991_2": {"length": 16, "quality": 0.8888888888888888, "section_id": 5716}}, "n4659": {"so_38751915_38751991_2": {"length": 16, "quality": 0.8888888888888888, "section_id": 7430}}}, "38751991": {"Id": "38751991", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_38751915_38751991_0\">Is the right hand side expression in the first case not calculated as <code>double</code> first, before being cast into <code>unsigned int</code>.</p>\n</blockquote>\n<p>Not necessarily. It might be computed as <code>long double</code>, which might result in a different truncation than <code>double</code>. Different compilers or different compiler options might produce a different result.</p>\n<blockquote>\n<p id=\"so_38751915_38751991_1\">Is there a way to get the shorter expression (the first one) to work?</p>\n</blockquote>\n<p>Rounding is often a much better strategy than truncation, particularly if you are expecting the result to be very close to an integer.</p>\n<h3>Standard reference:</h3>\n<p>\u00a76.3.1.8 (Usual arithmetic conversions), paragraph 2, with relevant footnote:</p>\n<blockquote>\n<p id=\"so_38751915_38751991_2\">The values of floating operands and of the results of floating expressions may be represented in greater range and precision than that required by the type; the types are not changed thereby. (63)</p>\n<p id=\"so_38751915_38751991_3\">63) The cast and assignment operators are still required to remove extra range and precision.</p>\n</blockquote>\n", "LastActivityDate": "2016-08-03T19:19:58.530", "CommentCount": "0", "CreationDate": "2016-08-03T19:19:58.530", "ParentId": "38751915", "Score": "2", "OwnerUserId": "1566221"}, "38751915": {"ViewCount": "107", "Body": "<p>What is the difference between</p>\n<pre><code>unsigned int n = (n2-n1)/n3 + 1;\n</code></pre>\n<p>and</p>\n<pre><code>double N = (n2-n1)/n3 + 1;\n\nunsigned int n = (unsigned int)(N);\n</code></pre>\n<p>where <code>n1</code>, <code>n2</code>, and <code>n3</code> are <code>double</code>s? I am asking this because with <code>n1=3</code>, <code>n2=4</code> and <code>n3=0.1</code>, <code>n</code> gets 10 in the first case and 11 in the second (at least on my computer). The correct answer is 11 so the result of the first one is wrong. I am guessing it has something to do with truncation to <code>unsigned int</code>. Is that right? Is the right hand side expression in the first case not calculated as <code>double</code> first, before being cast into <code>unsigned int</code> (in which case it would be equivalent to the second piece of code)? Also, is there a way to get the shorter expression (the first one) to work? </p>\n", "AcceptedAnswerId": "38751991", "Title": "Getting wrong result when casting from double to unsigned int", "CreationDate": "2016-08-03T19:15:39.380", "LastActivityDate": "2016-08-03T19:19:58.530", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "Tags": "<c++><casting>", "Id": "38751915", "Score": "1", "OwnerUserId": "2021470", "ClosedDate": "2016-08-03T19:28:29.010", "AnswerCount": "1"}});