post_cb({"24248828": {"ViewCount": "180", "Body": "<p>So I started learning C++ last week and naturally, I want to become familiar with the whole pointer and object-oriented business and so on and so forth.</p>\n<p>To do that, I'm writing a very simple program for some basic matrix calculations:</p>\n<pre><code># include &lt;iostream&gt;\nusing std::cout;\nusing std::cin;\n\nclass Matrix {\n        int columns; // x\n        int rows; // y\n        double* matrix;\n    public:\n        Matrix (int*);\n        void printMatrix();\n        void free() {\n            delete[] matrix;\n            return;\n            };\n};\n\nMatrix::Matrix(int* dim){\n    rows = *dim;\n    columns = *(dim + 1);\n    matrix = new double [columns*rows];\n}\n\nvoid Matrix::printMatrix(){ \n    int i, j;\n    for(i = 0; i &lt; columns; i++){\n        for(j=0; j &lt; rows; j++){\n            cout &lt;&lt; matrix[columns*i + j] &lt;&lt; \" \";\n        }\n        cout &lt;&lt; \"\\n\";\n    }\n    return;         \n}\n\n\nint* getMatrix ();\n\nint main () {\n    Matrix matrix (getMatrix());\n    matrix.printMatrix();\n    matrix.free();\n    return 0;\n}\n\nint* getMatrix (){\n    int* dim = new int [2];\n    cout &lt;&lt; \"(m x n)-Matrix, m? \";\n    cin &gt;&gt; dim[0];\n    cout &lt;&lt; \"n? \";\n    cin &gt;&gt; dim[1];\n    return dim;\n}\n</code></pre>\n<p>The problem (as I see it) occurs when I choose a (4,2) matrix. As I understand from various tutorials, </p>\n<pre><code>matrix = new double [columns*rows];\n</code></pre>\n<p>should allocate this much memory: <strong>columns*rows</strong> times <strong>sizeof(double)</strong>. Also, every 'cell' should be initialized with a <strong>0</strong>.</p>\n<p>But, choosing a (4,2) matrix, I get the following output, of the function printMatrix():</p>\n<pre><code>0 0 \n0 0 \n0 6.6727e-319 \n0 0 \n</code></pre>\n<p>Why is the (3,2) entry not initialized with <strong>0</strong>?</p>\n<p>Thanks!</p>\n", "Title": "Dynamic memory allocation has undesired output", "CreationDate": "2014-06-16T17:13:33.003", "LastActivityDate": "2014-06-16T18:27:41.163", "CommentCount": "5", "PostTypeId": "1", "ClosedDate": "2014-06-16T17:17:49.940", "Id": "24248828", "Score": "2", "OwnerUserId": "3289389", "Tags": "<c++>", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_24248828_24248894_3": {"length": 15, "quality": 0.8823529411764706, "section_id": 6082}, "so_24248828_24248894_2": {"length": 7, "quality": 0.7777777777777778, "section_id": 6098}}, "n3337": {"so_24248828_24248894_3": {"length": 15, "quality": 0.8823529411764706, "section_id": 5850}, "so_24248828_24248894_2": {"length": 7, "quality": 0.7777777777777778, "section_id": 5864}}, "n4659": {"so_24248828_24248894_3": {"length": 15, "quality": 0.8823529411764706, "section_id": 7578}, "so_24248828_24248894_2": {"length": 7, "quality": 0.7777777777777778, "section_id": 7595}}}, "24248894": {"Id": "24248894", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_24248828_24248894_0\">Also, every 'cell' should be initialized with a 0.</p>\n</blockquote>\n<p>Nope. The language does not do that for you, when you write <code>new double[N]</code>.</p>\n<blockquote>\n<p id=\"so_24248828_24248894_1\">Why is the (3,2) entry not initialized with 0?</p>\n</blockquote>\n<p>It will if, you write <code>new double[N]()</code> instead!</p>\n<blockquote>\n<p id=\"so_24248828_24248894_2\"><code>[C++11: 5.3.4/15]:</code> A <em>new-expression</em> that creates an object of type <code>T</code> initializes that object as follows:</p>\n<ul>\n<li>If the <em>new-initializer</em> is omitted, the object is <em>default-initialized</em> (8.5); if no initialization is performed, the object has indeterminate value.</li>\n<li>Otherwise, the <em>new-initializer</em> is interpreted according to the initialization rules of 8.5 for <em>direct-initialization</em>.</li>\n</ul>\n</blockquote>\n<p>Granted, this is slightly ambiguous in that it would seem to be talking about the non-array versions of <code>new</code>, but in fact it means both; <code>T</code> is <code>double[4]</code>.</p>\n<p>In fact, we can see that the same section of wording talks about \"object\" in both the array and non-array cases, setting the perfect precedent:</p>\n<blockquote>\n<p id=\"so_24248828_24248894_3\"><code>[C++11: 5.3.4/1]:</code> <em>[..]</em> If the entity is a non-array object, the <em>new-expression</em> returns a pointer to the object created. If it is an array, the new-expression\n  returns a pointer to the initial element of the array.</p>\n</blockquote>\n<p>Now, it's essentially impossible to <em>prove</em> this rule, because you can strike unlucky and get all-zeroes even when those values are in fact indeterminate, but the following code entirely unconvincingly makes a good start:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nint main() {\n    const std::size_t n = 4;\n\n    {\n        std::vector&lt;double&gt; hack;\n        hack.push_back(5);\n        hack.push_back(6);\n        hack.push_back(7);\n        hack.push_back(8);\n        hack.push_back(9);\n        hack.push_back(10);\n        hack.push_back(11);\n        hack.push_back(12);\n    }\n\n    double* a = new double [n];\n    double* b = new double [n]();\n\n    for (std::size_t i = 0; i &lt; n; i++)\n        std::cout &lt;&lt; a[i] &lt;&lt; '/' &lt;&lt; b[i] &lt;&lt; ' ';\n    std::cout &lt;&lt; '\\n';\n\n    delete[] a;\n    delete[] b;\n}\n</code></pre>\n<p>I managed to get <code>0/0 6/0 7/0 8/0</code> from it, thanks to some heap hackery, but it's still only just pure chance and doesn't really demonstrate anything (<a href=\"http://coliru.stacked-crooked.com/a/eb3a81f60b84727d\" rel=\"nofollow\">live demo</a>).</p>\n<p>Unfortunately, <code>new double[4](316)</code> isn't valid (providing a value inside the <code>()</code> is explicitly banned for arrays during <em>direct-initialization</em>, per <code>[C++11: 8.5/16]</code> ) so we can't suggest that <code>new double[4](0)</code> would be reliable and use the example with <code>316</code> to convince you of it.</p>\n", "LastEditorUserId": "560648", "LastActivityDate": "2014-06-16T18:27:41.163", "Score": "3", "CreationDate": "2014-06-16T17:17:56.777", "ParentId": "24248828", "CommentCount": "3", "OwnerUserId": "560648", "LastEditDate": "2014-06-16T18:27:41.163"}, "24248900": {"Id": "24248900", "PostTypeId": "2", "Body": "<p>Only static variables are initialized to 0 in C++.<br>\n Auto and dynamic variables should be initialized by you.</br></p>\n", "LastActivityDate": "2014-06-16T17:18:49.583", "CommentCount": "6", "CreationDate": "2014-06-16T17:18:49.583", "ParentId": "24248828", "Score": "2", "OwnerUserId": "806299"}});