post_cb({"26947680": {"ParentId": "26947599", "CommentCount": "0", "Body": "<p>That's because c++ can compare two <code>const char*</code> variable <code>p1</code> and <code>p2</code> (in other words, <code>p1==p2</code> is a valid c++ statement without any to string conversion), and the semantic is see whether they are the same physical address or not (in your example, they are not, and therefore a <code>false</code> is returned).</p>\n", "OwnerUserId": "4195568", "PostTypeId": "2", "Id": "26947680", "Score": "2", "CreationDate": "2014-11-15T15:57:10.760", "LastActivityDate": "2014-11-15T15:57:10.760"}, "26947994": {"ParentId": "26947599", "CommentCount": "0", "Body": "<p>The compiler doesn't call that <code>operator==</code> overload because it can't - overload resolution for operators only kicks in if at least one of the types in the expression has class or enumeration type.</p>\n<p>From C++11 draft n3290 \u00a713.3.1.2 <em>Operator expressions</em>:</p>\n<blockquote>\n<p id=\"so_26947599_26947994_0\">If no operand of an operator in an expression has a type that is a class or an enumeration, the operator is assumed to be a built-in operator and interpreted according to Clause 5.</p>\n</blockquote>\n<p>(And clause 5 defines <code>==</code> in section \u00a75.10, with the usual pointer comparison semantics among other things.)</p>\n<p>So that overload is not even considered. You simply can't overload operators on only built-in types.</p>\n", "OwnerUserId": "635608", "PostTypeId": "2", "Id": "26947994", "Score": "1", "CreationDate": "2014-11-15T16:28:57.557", "LastActivityDate": "2014-11-15T16:28:57.557"}, "26947599": {"CommentCount": "0", "AcceptedAnswerId": "26947680", "CreationDate": "2014-11-15T15:49:44.283", "LastActivityDate": "2014-11-15T16:28:57.557", "PostTypeId": "1", "ViewCount": "297", "FavoriteCount": "1", "Title": "string class relational operator overload", "Id": "26947599", "Score": "0", "Body": "<p><code>p1</code> and <code>p2</code> point to the same string content, the following codes compare their addresses which are different.</p>\n<pre><code>const char *p1 = \"abc\";\nconst char p2[] = {'a', 'b', 'c', '\\0'};\ncout &lt;&lt; (p1 == p2) &lt;&lt; endl;                   // 0  (false)\n</code></pre>\n<p>But when I construct a string variable based on <code>p2</code>, then comparing <code>p1</code> and the string variable yields <code>1</code> instead of <code>0</code>.</p>\n<pre><code>string s1(p2);\ncout &lt;&lt; (p1 == s1) &lt;&lt; endl;                  //  1  (true)\n</code></pre>\n<p>My question is : the string class has constructor that takes a <code>const char*</code> as its <strong>only</strong> argument, which tells the compiler to <strong>convert</strong> a <code>const char*</code> to string when possible:</p>\n<pre><code>string (const char* s);\n</code></pre>\n<p>Why doesn't the compiler convert <code>p2</code> to a temporary string variable, and then compare it to <code>p1</code> using the operator defined in string class:</p>\n<pre><code>bool operator== (const char*   lhs, const string&amp; rhs);\n</code></pre>\n", "Tags": "<c++><operator-overloading>", "OwnerUserId": "1822803", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_26947599_26947994_0": {"section_id": 582, "quality": 1.0, "length": 13}}, "n3337": {"so_26947599_26947994_0": {"section_id": 572, "quality": 1.0, "length": 13}}, "n4659": {"so_26947599_26947994_0": {"section_id": 605, "quality": 1.0, "length": 13}}}});