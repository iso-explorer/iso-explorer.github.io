post_cb({"bq_ids": {"n4140": {"so_35069224_35069579_0": {"length": 8, "quality": 0.7272727272727273, "section_id": 391}, "so_35069224_35069579_1": {"length": 14, "quality": 1.0, "section_id": 391}, "so_35069224_35069579_2": {"length": 22, "quality": 0.9166666666666666, "section_id": 3222}}, "n3337": {"so_35069224_35069579_1": {"length": 14, "quality": 1.0, "section_id": 382}, "so_35069224_35069579_0": {"length": 8, "quality": 0.7272727272727273, "section_id": 382}, "so_35069224_35069579_2": {"length": 20, "quality": 0.8333333333333334, "section_id": 3096}}, "n4659": {"so_35069224_35069579_1": {"length": 11, "quality": 0.7857142857142857, "section_id": 408}, "so_35069224_35069579_0": {"length": 8, "quality": 0.7272727272727273, "section_id": 408}, "so_35069224_35069579_2": {"length": 22, "quality": 0.9166666666666666, "section_id": 3979}}}, "35069579": {"Id": "35069579", "PostTypeId": "2", "Body": "<p>The operator <code>operator Derived &amp;()</code> is a conversion operator:  </p>\n<blockquote>\n<p id=\"so_35069224_35069579_0\"><strong>12.3.2/1</strong> A member function of a class X having no parameters with a name of the form\n      conversion-function-id:\n          operator conversion-type-id\n      (...)</p>\n<p id=\"so_35069224_35069579_1\">specifies a conversion from X to the type specified by the\n  conversion-type-id. Such functions are called conversion functions. No\n  return type can be specified.</p>\n</blockquote>\n<p>So it converts a <code>Base</code> object into a reference to <code>Derived</code>. </p>\n<p><strong>Attention:</strong> This kind of construct seems extremely weird and dangerous: it is a downcasting without care. If the object on which you use this operator would not be a <code>Derived</code> (for example a \"pure\" <code>Base</code> object or a another class derived from <code>Base</code> but not from <code>Derived</code>) the <code>dynamic_cast</code> would return a <code>nullptr</code>, which would cause UB:</p>\n<blockquote>\n<p id=\"so_35069224_35069579_2\"><strong>8.3.2/5:</strong>  (...) <em>Note:</em> in particular, a null reference cannot exist in a well-defined program, because the only way to create such a\n  reference would be to bind it to the \u201cobject\u201d obtained by indirection\n  through a null pointer, which causes undefined behavior.</p>\n</blockquote>\n", "LastEditorUserId": "3723423", "LastActivityDate": "2016-01-28T19:01:05.540", "Score": "1", "CreationDate": "2016-01-28T18:47:59.817", "ParentId": "35069224", "CommentCount": "1", "OwnerUserId": "3723423", "LastEditDate": "2016-01-28T19:01:05.540"}, "35069224": {"ViewCount": "52", "Body": "<p>Can someone explain how this overloaded operator is called? I understand what the dynamic cast and the conditional ternary do, but I don't understand the operator.</p>\n<p>header file:</p>\n<pre><code> // ------------------------------------------------------\nClass Base\n{\npublic:\n  Base ();\n  operator Derived &amp;();\nprivate:\n  Base * me;\n}\n//--------------------------------------------------\nClass Derived : public Base\n{\npublic:\nDerived ()\n}\n//----------------------------------------------------\ninline Base::operator Derived &amp;() {return *(dynamic_cast&lt;Derived *&gt;(me?me:this));}\n</code></pre>\n<p>Source file:</p>\n<pre><code>Base::Base()\n{\nme = new Derived()\n}\n</code></pre>\n", "AcceptedAnswerId": "35069579", "Title": "Overloading operator", "CreationDate": "2016-01-28T18:28:04.387", "Id": "35069224", "CommentCount": "7", "PostTypeId": "1", "ClosedDate": "2016-01-29T09:01:57.777", "LastActivityDate": "2016-01-28T19:01:05.540", "Score": "0", "OwnerUserId": "4271198", "Tags": "<c++><operator-overloading><dynamic-cast>", "AnswerCount": "1"}});