post_cb({"bq_ids": {"n4140": {"so_34581372_34581372_2": {"length": 28, "quality": 0.7567567567567568, "section_id": 5914}, "so_34581372_34581372_1": {"length": 5, "quality": 0.625, "section_id": 3376}}, "n3337": {"so_34581372_34581372_2": {"length": 28, "quality": 0.7567567567567568, "section_id": 5686}, "so_34581372_34581372_1": {"length": 5, "quality": 0.625, "section_id": 3246}}, "n4659": {"so_34581372_34581372_2": {"length": 28, "quality": 0.7567567567567568, "section_id": 7406}}}, "34582606": {"Id": "34582606", "PostTypeId": "2", "Body": "<p>X is not a pod type because is not trivially copiable as it have destructor\nAlso U is not a pod type.</p>\n<p><code>U s2;</code>\ntry to call the default costructor that is deleted so the error</p>\n<p><code>U s1 {};</code>\nuse member wise initialization and don't  call any costructor </p>\n<p>In union with non pod member the default  costructor of union is deleted because it would call the default costructor of members ie the compiler doesn't know which member to call the default costructor </p>\n<pre><code> Union XX{\n   string m1; \n   vector &lt;int&gt; m2;\n}\n</code></pre>\n<p>default costructor of XX cannot call default costructor of m1 AND m2 so it is deleted</p>\n", "LastEditorUserId": "698679", "LastActivityDate": "2016-01-03T23:22:07.323", "Score": "1", "CreationDate": "2016-01-03T22:58:05.463", "ParentId": "34581372", "CommentCount": "4", "OwnerUserId": "698679", "LastEditDate": "2016-01-03T23:22:07.323"}, "34582112": {"Id": "34582112", "PostTypeId": "2", "Body": "<p>The cppreference quote is unclear.  What happens is that if <em>ANY</em> memeber of the union defines <em>ANY</em> of those non-trivial special member functions, then <em>ALL</em> of them will be deleted by default in the union.</p>\n<p>So since you have a non-trivial destructor for <code>X</code>, the <code>U</code> default constructor is deleted.</p>\n", "LastActivityDate": "2016-01-03T22:00:52.283", "CommentCount": "5", "CreationDate": "2016-01-03T22:00:52.283", "ParentId": "34581372", "Score": "2", "OwnerUserId": "16406"}, "34581372": {"ViewCount": "1312", "Body": "<p>I am trying to understand how unions were extended by C++11. One thing that changed is the ability to use now non-static data members with non-trivial special member functions. From <a href=\"http://en.cppreference.com/w/cpp/language/union\" rel=\"nofollow\">cppreference.com</a></p>\n<blockquote>\n<p id=\"so_34581372_34581372_0\">If a union contains a non-static data member with a non-trivial special member function (default constructor, copy/move constructor, copy/move assignment, or destructor), that function is deleted by default in the union and needs to be defined explicitly by the programmer.\n  At most one data member can have a default member initializer.</p>\n</blockquote>\n<p>I am trying the following code:</p>\n<pre><code>struct X\n{\n    ~X() {};\n};\n\nunion U\n{\n    X x;\n    ~U() {};\n};\n\nint main()\n{\n    U s1{};  // works, probably aggregate initialization\n    U s2;    // DOES NOT compile, why?\n}\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/ca4eb5bf342aa96b\" rel=\"nofollow\"><kbd>Live on Coliru</kbd></a></p>\n<p>Here <code>X</code> (which is used as a data member of the union) has a user provided destructor, hence the destructor of the union is by default deleted. Therefore I provide one explicitly. However, the code fails to compile, with the error</p>\n<blockquote>\n<p id=\"so_34581372_34581372_1\">note: 'U::U()' is implicitly deleted because the default definition would be ill-formed:</p>\n</blockquote>\n<p>The code compiles if I remove the last line <code>U s2;</code>. </p>\n<p><strong>Question</strong> What is going on here? Why <code>U s1{};</code> compiles, but <code>U s2;</code> does not? Is the default ctor of the union marked as deleted (if so, why?!), and in the first case we have just aggregate initialization? Note that if I provide <code>U(){}; // not U() = default;</code> the code compiles (but not if I only provide a ctor of <code>X</code>).</p>\n<p><strong>EDIT</strong></p>\n<p>After digging into the standard (N4527):</p>\n<p><strong>Unions: 9.5/2 [class.union]</strong></p>\n<blockquote>\n<p id=\"so_34581372_34581372_2\">[Note: If any non-static data member of a union has a non-trivial default constructor (12.1), copy constructor (12.8), move constructor (12.8), copy assignment operator (12.8), move assignment operator (12.8), or destructor (12.4), the corresponding member function of the union must be user-provided or it will be implicitly deleted (8.4.3) for the union. \u2014endnote]</p>\n</blockquote>\n<p>it seems that this is a gcc bug (now reported <a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=69131\" rel=\"nofollow\">here</a>). The code compiles on clang and gcc 4.8.2 or earlier, it breaks on gcc4.9 and later (thanks @T.C. for pointing out).</p>\n<p>Compiler: g++5.3, <code>-std=c++11</code> used.</p>\n", "Title": "Unions in C++11: default constructor seems to be deleted", "CreationDate": "2016-01-03T20:43:35.120", "LastActivityDate": "2016-01-04T00:01:39.960", "CommentCount": "7", "FavoriteCount": "3", "PostTypeId": "1", "LastEditDate": "2016-01-04T00:01:39.960", "LastEditorUserId": "3093378", "Id": "34581372", "Score": "10", "OwnerUserId": "3093378", "Tags": "<c++><c++11><language-lawyer><unions>", "AnswerCount": "2"}});