post_cb({"22538568": {"CommentCount": "2", "CreationDate": "2014-03-20T16:00:46.133", "PostTypeId": "1", "AcceptedAnswerId": "22539346", "LastEditorUserId": "25324", "LastActivityDate": "2014-03-20T16:31:07.167", "LastEditDate": "2014-03-20T16:02:09.343", "ViewCount": "164", "FavoriteCount": "1", "Title": "Does std::stringstream operator<< use strcat?", "Id": "22538568", "Score": "2", "Body": "<p>I have just learned of the \"Schlemiel the painter\" algorithm (<a href=\"http://en.wikipedia.org/wiki/Joel_Spolsky#Schlemiel_the_Painter.27s_algorithm\" rel=\"nofollow\">http://en.wikipedia.org/wiki/Joel_Spolsky#Schlemiel_the_Painter.27s_algorithm</a>) and realized I might be Schlemiel.</p>\n<p>In my code I do a lot of string concatenation with <code>std::stringstream</code>'s <code>operator&lt;&lt;</code>. I was embarrassed to learn that heavy use of c-style concatenation with <code>strcat</code> has a pretty large inefficiency.</p>\n<p>Does C++'s <code>std::stringstream</code>'s <code>operator&lt;&lt;</code> uses <code>strcat</code>? Or does it use a more efficient method?</p>\n", "Tags": "<c++><string><std>", "OwnerUserId": "308843", "AnswerCount": "1"}, "22539346": {"ParentId": "22538568", "CommentCount": "0", "Body": "<p><code>ostringstream</code> is backed by a <code>stringbuf</code>, which inherits from <code>streambuf</code>; when writing to an <code>ostringstream</code> you are writing to the <em>controlled output sequence</em> of the <code>streambuf</code>.  According to 27.6.2:</p>\n<blockquote>\n<p id=\"so_22538568_22539346_0\">2 - Each sequence is characterized by three pointers [...]</p>\n<ul>\n<li>the <em>beginning pointer</em>, or lowest element address in the array [...]</li>\n<li>the <em>next pointer</em>, or next element address that is a current candidate for reading or writing [...]</li>\n<li>the <em>end pointer</em>, or first element address beyond the end of the array [...]</li>\n</ul>\n</blockquote>\n<p>So an <code>ostringstream</code> effectively has constant time access to the current end of its output sequence.</p>\n<p>Note that using <code>strlen</code> on the output sequence would not work, anyway, as C++ strings are allowed to contain embedded nul characters.</p>\n<p>Also note that direct string concatenation (<code>string::operator+=(const string &amp;)</code>) is likely to be more efficient than <code>ostream</code> operators, as there is no requirement to go via virtual methods.</p>\n", "OwnerUserId": "567292", "PostTypeId": "2", "Id": "22539346", "Score": "2", "CreationDate": "2014-03-20T16:31:07.167", "LastActivityDate": "2014-03-20T16:31:07.167"}, "bq_ids": {"n4140": {"so_22538568_22539346_0": {"section_id": 2087, "quality": 1.0, "length": 5}}, "n3337": {"so_22538568_22539346_0": {"section_id": 2075, "quality": 1.0, "length": 5}}, "n4659": {"so_22538568_22539346_0": {"section_id": 2360, "quality": 1.0, "length": 5}}}});