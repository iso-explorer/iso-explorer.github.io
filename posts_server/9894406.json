post_cb({"9894406": {"CommentCount": "6", "ViewCount": "1292", "PostTypeId": "1", "LastEditorUserId": "611562", "CreationDate": "2012-03-27T17:16:31.230", "LastActivityDate": "2012-11-29T11:28:59.890", "Title": "Initializing arrays when using templates", "AcceptedAnswerId": "9894479", "LastEditDate": "2012-03-28T08:27:58.753", "Id": "9894406", "Score": "2", "Body": "<p>Let's say I have the class <code>Foo</code>. The following works fine:</p>\n<pre><code>class Foo\n{\n    public:\n        const int* bar;\n\n        Foo()\n        {\n            bar = new int[2] {1, 2};\n        }\n};\n</code></pre>\n<p>However, I tried to change this very slightly to use a template:</p>\n<pre><code>template&lt;int A, int B&gt;\nclass Foo\n{\n    public:\n        const int* bar;\n\n        Foo()\n        {\n            bar = new int[2] {A, B};\n        }\n};\n</code></pre>\n<p>My understanding of the way templates work is that <code>A</code> and <code>B</code> are essentially compile time constants, so it should still work the same.</p>\n<p>The error message I get when compiling <a href=\"http://ideone.com/h7K7y\" rel=\"nofollow\">with g++</a> (4.5 in the link, same error with 4.6.3) is:</p>\n<blockquote>\n<p id=\"so_9894406_9894406_0\">error: ISO C++ forbids initialization in array new [-fpermissive]</p>\n</blockquote>\n<p><a href=\"http://pastie.org/3679616\" rel=\"nofollow\">With 4.7</a> a similar error occurs, though slightly different:</p>\n<blockquote>\n<p id=\"so_9894406_9894406_1\">error: parenthesized initializer in array new [-fpermissive]</p>\n</blockquote>\n<p>The problem also occurs in template functions, and not just when template parameters are used within the braces for initialization, <a href=\"https://gist.github.com/2220810\" rel=\"nofollow\">code and output</a>. (thanks Philipp)</p>\n", "Tags": "<c++><class><gcc><g++><c++11>", "OwnerUserId": "611562", "AnswerCount": "1"}, "9894479": {"ParentId": "9894406", "PostTypeId": "2", "CommentCount": "8", "Body": "<p>Looks like this is a GCC bug. Clang accepts it, and the standard allows it:</p>\n<blockquote>\n<p id=\"so_9894406_9894479_0\"><em>new-initializer:</em> </p>\n<blockquote>\n<p id=\"so_9894406_9894479_2\"><code>(</code> <em>expression-list<sub>opt</sub></em><code>)</code><br>\n<em>braced-init-list</em></br></p>\n</blockquote>\n</blockquote>\n<p>And the rules for this initialization are not special:</p>\n<blockquote>\n<p id=\"so_9894406_9894479_3\">A <em>new-expression</em> that creates an object of type <code>T</code> initializes that\n  object as follows:</p>\n<p id=\"so_9894406_9894479_4\">\u2014 If the <em>new-initializer</em> is omitted, the object is\n  <em>default-initialized</em> (8.5); if no initialization is performed, the\n  object has indeterminate value.</p>\n<p id=\"so_9894406_9894479_5\">\u2014 Otherwise, the <em>new-initializer</em> is\n  interpreted according to the initialization rules of 8.5 for <em>direct-initialization</em>.</p>\n</blockquote>\n", "OwnerUserId": "46642", "LastEditorUserId": "46642", "LastEditDate": "2012-03-27T18:31:19.770", "Id": "9894479", "Score": "5", "CreationDate": "2012-03-27T17:22:03.483", "LastActivityDate": "2012-03-27T18:31:19.770"}, "bq_ids": {"n4140": {"so_9894406_9894479_4": {"section_id": 6098, "quality": 1.0, "length": 9}, "so_9894406_9894479_3": {"section_id": 6098, "quality": 1.0, "length": 7}, "so_9894406_9894479_5": {"section_id": 6098, "quality": 1.0, "length": 7}}, "n3337": {"so_9894406_9894479_4": {"section_id": 5864, "quality": 1.0, "length": 9}, "so_9894406_9894479_3": {"section_id": 5864, "quality": 1.0, "length": 7}, "so_9894406_9894479_5": {"section_id": 5864, "quality": 1.0, "length": 7}}, "n4659": {"so_9894406_9894479_4": {"section_id": 7595, "quality": 1.0, "length": 9}, "so_9894406_9894479_3": {"section_id": 7595, "quality": 1.0, "length": 7}, "so_9894406_9894479_5": {"section_id": 7595, "quality": 1.0, "length": 7}}}});