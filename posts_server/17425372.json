post_cb({"17425464": {"ParentId": "17425372", "PostTypeId": "2", "CommentCount": "0", "Body": "<p><code>char* perms = \"-----\"</code> creates a pointer pointing to the string, which is located in a protected segment. Trying to write to it will cause a crash.</p>\n<p><code>char perms[] = \"-----\"</code> creates a character array on the stack and populates it with the relevant characters from \"-----\".</p>\n<p>This is an example of arrays and pointers being inequivalent.</p>\n", "OwnerUserId": "2464207", "LastEditorUserId": "560648", "LastEditDate": "2013-07-02T13:59:38.290", "Id": "17425464", "Score": "0", "CreationDate": "2013-07-02T12:19:10.060", "LastActivityDate": "2013-07-02T13:59:38.290"}, "17425428": {"ParentId": "17425372", "CommentCount": "0", "Body": "<p>String literals are stored in read only section of memory. Any attempt to modify the contents of a string literal invokes Undefined Behaviour and segmentation fault on most implementations.\nSO if you need to have a modifiable char array then declare it as <code>char perms[10]</code> instead of <code>char* perms</code></p>\n", "Id": "17425428", "PostTypeId": "2", "OwnerDisplayName": "user2045557", "Score": "2", "CreationDate": "2013-07-02T12:17:33.197", "LastActivityDate": "2013-07-02T12:17:33.197"}, "17425429": {"ParentId": "17425372", "PostTypeId": "2", "CommentCount": "10", "Body": "<p>That's right.</p>\n<p>String literals are <em>immutable</em>, and <code>\"---------\"</code> is a string literal. Your <code>static char*</code> points to that string literal.</p>\n<p>The immutability is not inherently enforced at compile-time, so when you try to write to the literal, you get <em>undefined behaviour</em> instead. This may result in a runtime crash.</p>\n<blockquote>\n<p id=\"so_17425372_17425429_0\"><code>[C++11: 2.14.5/12]:</code> Whether all string literals are distinct (that is, are stored in nonoverlapping objects) is implementation-defined. <strong>The effect of attempting to modify a string literal is undefined.</strong></p>\n</blockquote>\n<p>C++ actually requires that this pointer be a <code>static char const*</code>, though some compilers only <em>warn</em> about that.</p>\n<p><strong>However</strong>, initialising an <em>array</em> with a string literal will <em>copy</em> the string. The array is your own, to do with as you please. That's why you can modify the <code>static char[10]</code> without a crash.</p>\n<blockquote>\n<p id=\"so_17425372_17425429_1\"><code>[C++11: 8.5.2/1]:</code> A char array (whether plain <code>char</code>, <code>signed char</code>, or <code>unsigned char</code>), <code>char16_t</code> array, <code>char32_t</code> array, or <code>wchar_t</code> array can be initialized by a narrow character literal, <code>char16_t</code> string literal, <code>char32_t</code> string literal, or wide string literal, respectively, or by an appropriately-typed string literal enclosed in braces. <strong>Successive characters of the value of the string literal initialize the elements of the array.</strong></p>\n</blockquote>\n", "OwnerUserId": "560648", "LastEditorUserId": "560648", "LastEditDate": "2013-07-02T12:23:37.473", "Id": "17425429", "Score": "3", "CreationDate": "2013-07-02T12:17:37.620", "LastActivityDate": "2013-07-02T12:23:37.473"}, "17425445": {"ParentId": "17425372", "CommentCount": "1", "Body": "<p>It's normal and nothing to do with c++ (you will have the same results with C). <code>static char* perms = \"---------\";</code> is const because <code>\"---------\"</code> is a part of your binary (you can see it with <code>objdump</code> programm)</p>\n", "OwnerUserId": "2432477", "PostTypeId": "2", "Id": "17425445", "Score": "0", "CreationDate": "2013-07-02T12:18:26.310", "LastActivityDate": "2013-07-02T12:18:26.310"}, "17425442": {"ParentId": "17425372", "CommentCount": "0", "Body": "<p>String literals are <code>const char *</code>. You are not allowed to modify them in C++ or C.</p>\n<p>For legacy reasons they can be converted to <code>char *</code>, however this does not make it legal to modify them.</p>\n", "OwnerUserId": "365496", "PostTypeId": "2", "Id": "17425442", "Score": "2", "CreationDate": "2013-07-02T12:18:15.860", "LastActivityDate": "2013-07-02T12:18:15.860"}, "17425430": {"ParentId": "17425372", "CommentCount": "1", "Body": "<p>When you write the following:</p>\n<pre><code>const char *X = \"....\"\n</code></pre>\n<p>You have <code>\"....\"</code> in read-only memory and <code>X</code> pointing to it. In fact, type of <code>X</code> should be <code>const char *</code>, not just <code>char *</code>.</p>\n<p>On the other hand, when you write:</p>\n<pre><code>char X[] = \"....\"\n</code></pre>\n<p>This is equivalent to:</p>\n<pre><code>char X[] = {'.', '.', '.', '.', '\\0'}\n</code></pre>\n<p>which is an array initializer. In other words, <code>X</code> would be an array (not a pointer) and it would contain the contents of <code>\"....\"</code>. Since it's not <code>const</code>, you can change it without problem.</p>\n", "OwnerUserId": "912144", "PostTypeId": "2", "Id": "17425430", "Score": "2", "CreationDate": "2013-07-02T12:17:43.523", "LastActivityDate": "2013-07-02T12:17:43.523"}, "bq_ids": {"n4140": {"so_17425372_17425429_1": {"section_id": 3314, "quality": 0.7555555555555555, "length": 34}, "so_17425372_17425429_0": {"section_id": 5361, "quality": 0.7777777777777778, "length": 14}}, "n3337": {"so_17425372_17425429_1": {"section_id": 3184, "quality": 0.9555555555555556, "length": 43}, "so_17425372_17425429_0": {"section_id": 5157, "quality": 0.7777777777777778, "length": 14}}, "n4659": {"so_17425372_17425429_1": {"section_id": 4080, "quality": 0.7555555555555555, "length": 34}, "so_17425372_17425429_0": {"section_id": 6789, "quality": 0.7777777777777778, "length": 14}}}, "17425372": {"CommentCount": "2", "AcceptedAnswerId": "17425429", "ClosedDate": "2013-07-02T12:19:45.327", "CreationDate": "2013-07-02T12:14:21.713", "LastActivityDate": "2013-07-02T13:59:38.290", "PostTypeId": "1", "ViewCount": "1610", "Title": "static char* vs static char[] memory access", "Id": "17425372", "Score": "0", "Body": "<p>I'm making a bit of C code compile as C++ and have come across something that's puzzling me. Consider the following function taken from LuaFileSystem.</p>\n<pre><code>static const char *perm2string (unsigned short mode) {\n  static char perms[10] = \"---------\";\n  //static char* perms = \"---------\";\n  int i;\n  for (i=0;i&lt;9;i++) perms[i]='-';\n  if (mode  &amp; _S_IREAD)\n   { perms[0] = 'r'; perms[3] = 'r'; perms[6] = 'r'; }\n  if (mode  &amp; _S_IWRITE)\n   { perms[1] = 'w'; perms[4] = 'w'; perms[7] = 'w'; }\n  if (mode  &amp; _S_IEXEC)\n   { perms[2] = 'x'; perms[5] = 'x'; perms[8] = 'x'; }\n  return perms;\n}\n</code></pre>\n<p>This code will work correctly, however if I uncomment the commented line, it crashes. I've stepped over this with a debugger and it seems that with <code>static char* perms</code> the string is placed in read-only memory and so the first loop will cause an access violation, using the static array causes no such issues. I'm curious as to why this is happening when the string isn't declared const.</p>\n", "Tags": "<c++>", "OwnerUserId": "1520427", "AnswerCount": "6"}});