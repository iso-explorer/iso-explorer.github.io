post_cb({"45834990": {"CommentCount": "3", "ViewCount": "153", "PostTypeId": "1", "LastEditorUserId": "4284627", "CreationDate": "2017-08-23T08:52:14.050", "LastActivityDate": "2017-08-23T09:32:11.293", "Title": "C++11 default class member initialization with initializer list , simultaneously", "AcceptedAnswerId": "45835907", "LastEditDate": "2017-08-23T09:08:47.553", "Id": "45834990", "Score": "5", "Body": "<p>Can someone point me please, to a corresponding paragraph of the C++ standard, or maybe can provide some explanation why my code does not compile if I uncomment the text <code>({123})</code>? </p>\n<p>Generally speaking I understand what something wrong with usage of default member initialization and initialization via initializer list, but I can't refer to exact reasons.</p>\n<pre><code>enum class MY: int\n{\n    A = 1\n};\n\nstruct abc\n{\n    int a;/*{123};*/  //compilation failed if uncommented\n    MY m;\n};\n\nabc a = {1, MY::A};\n</code></pre>\n<p>Compiler error, in case of uncommented text:</p>\n<blockquote>\n<p id=\"so_45834990_45834990_0\">error: could not convert \u2018{1, A}\u2019 from \u2018&lt;brace-enclosed initializer list&gt;\u2019 to \u2018abc\u2019</p>\n</blockquote>\n", "Tags": "<c++><c++11>", "OwnerUserId": "8281645", "AnswerCount": "1"}, "45835907": {"ParentId": "45834990", "CommentCount": "0", "CreationDate": "2017-08-23T09:32:11.293", "OwnerUserId": "3953764", "PostTypeId": "2", "Id": "45835907", "Score": "5", "Body": "<p>The below syntax:</p>\n<pre><code>abc a = {1, MY::A};\n</code></pre>\n<p>is a list-initialization which may perform differently depending on the type being initialized. Without the non-static data member initializer (<code>/*{123};*/</code>), your struct is an aggregate and the case falls under <a href=\"http://eel.is/c++draft/dcl.init.list#3.4\" rel=\"noreferrer\">[dcl.init.list]/p3</a>:</p>\n<blockquote id=\"so_45834990_45835907_0\">\n<ul>\n<li>Otherwise, if <code>T</code> is an aggregate, aggregate initialization is performed.</li>\n</ul>\n</blockquote>\n<p>However, to be an aggregate type, the following conditions must be met in C++11:</p>\n<blockquote>\n<p id=\"so_45834990_45835907_1\">An aggregate is an array or a class (Clause 9) with no user-provided constructors (12.1), <strong>no brace-or-equal-initializers for non-static data members (9.2)</strong>, no private or protected non-static data members (Clause 11), no base classes (Clause 10), and no virtual functions (10.3).</p>\n</blockquote>\n<p>That is, the usage of NSDMI (non-static data member initialization) breaks the above set of rules, and as a result, an instance of this type can no longer be list-initialized.</p>\n<p>This rule has changed in C++14, and the current wording reads <a href=\"http://eel.is/c++draft/dcl.init.aggr#1\" rel=\"noreferrer\">[dcl.init.aggr]/p1</a>:</p>\n<blockquote>\n<p id=\"so_45834990_45835907_2\">An aggregate is an array or a class with</p>\n<ul>\n<li><p id=\"so_45834990_45835907_3\">(1.1) no user-provided, explicit, or inherited constructors ([class.ctor]),</p></li>\n<li><p id=\"so_45834990_45835907_4\">(1.2) no private or protected non-static data members ([class.access]),</p></li>\n<li><p id=\"so_45834990_45835907_5\">(1.3) no virtual functions, and</p></li>\n<li><p id=\"so_45834990_45835907_6\">(1.4) no virtual, private, or protected base classes ([class.mi]).</p></li>\n</ul>\n<p id=\"so_45834990_45835907_7\">[\u2009<em>Note</em>: Aggregate initialization does not allow accessing protected and private base class' members or constructors. \u2014\u2009<em>end note</em>\u2009]</p>\n</blockquote>\n", "LastActivityDate": "2017-08-23T09:32:11.293"}, "bq_ids": {"n4140": {"so_45834990_45835907_0": {"section_id": 633, "quality": 0.8, "length": 4}, "so_45834990_45835907_4": {"section_id": 3298, "quality": 0.8333333333333334, "length": 5}, "so_45834990_45835907_1": {"section_id": 3298, "quality": 0.6956521739130435, "length": 16}, "so_45834990_45835907_6": {"section_id": 3298, "quality": 0.6666666666666666, "length": 4}}, "n3337": {"so_45834990_45835907_1": {"section_id": 3168, "quality": 0.8695652173913043, "length": 20}, "so_45834990_45835907_4": {"section_id": 3168, "quality": 0.8333333333333334, "length": 5}, "so_45834990_45835907_0": {"section_id": 3195, "quality": 1.0, "length": 5}, "so_45834990_45835907_6": {"section_id": 3168, "quality": 0.6666666666666666, "length": 4}}, "n4659": {"so_45834990_45835907_1": {"section_id": 4063, "quality": 0.5217391304347826, "length": 12}, "so_45834990_45835907_3": {"section_id": 4063, "quality": 0.8, "length": 4}, "so_45834990_45835907_7": {"section_id": 4063, "quality": 0.7857142857142857, "length": 11}, "so_45834990_45835907_4": {"section_id": 4063, "quality": 0.8333333333333334, "length": 5}, "so_45834990_45835907_0": {"section_id": 4091, "quality": 1.0, "length": 5}, "so_45834990_45835907_6": {"section_id": 4063, "quality": 0.8333333333333334, "length": 5}}}});