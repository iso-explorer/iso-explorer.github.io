post_cb({"11458958": {"Id": "11458958", "PostTypeId": "2", "Body": "<p>Even more specifically than the C++03 standard's section on jump statements, it says this about try-blocks in the \"Exception handling\" clause (15/2):</p>\n<blockquote>\n<p id=\"so_11458830_11458958_0\">A goto, break, return, or continue statement can be used to transfer\n  control out of a try block or handler.  When this happens, each\n  variable declared in the try block will be destroyed in the context\n  that directly contains its declaration.</p>\n</blockquote>\n<p>C++11 contains the same wording. </p>\n<p>Note however, that's it's <em>not</em> OK to jump into a try-block using a <code>goto</code> (or <code>switch</code>):</p>\n<blockquote>\n<p id=\"so_11458830_11458958_1\">A goto or switch statement shall not be used to transfer control into a try block or into a handler.</p>\n</blockquote>\n", "LastActivityDate": "2012-07-12T19:12:35.490", "CommentCount": "0", "CreationDate": "2012-07-12T19:12:35.490", "ParentId": "11458830", "Score": "5", "OwnerUserId": "12711"}, "11458882": {"Id": "11458882", "PostTypeId": "2", "Body": "<p>It's legal. It's bad code. Don't do it. Don't use <code>goto</code>.</p>\n", "LastActivityDate": "2012-07-12T19:07:13.653", "CommentCount": "4", "CreationDate": "2012-07-12T19:07:13.653", "ParentId": "11458830", "Score": "3", "OwnerUserId": "265530"}, "bq_ids": {"n4140": {"so_11458830_11458901_0": {"length": 50, "quality": 0.7692307692307693, "section_id": 3909}, "so_11458830_11458958_1": {"length": 10, "quality": 1.0, "section_id": 3332}, "so_11458830_11458958_0": {"length": 26, "quality": 1.0, "section_id": 3332}}, "n3337": {"so_11458830_11458901_0": {"length": 50, "quality": 0.7692307692307693, "section_id": 3769}, "so_11458830_11458958_1": {"length": 10, "quality": 1.0, "section_id": 3202}, "so_11458830_11458958_0": {"length": 26, "quality": 1.0, "section_id": 3202}}, "n4659": {"so_11458830_11458901_0": {"length": 50, "quality": 0.7692307692307693, "section_id": 4795}, "so_11458830_11458958_1": {"length": 10, "quality": 1.0, "section_id": 4098}, "so_11458830_11458958_0": {"length": 26, "quality": 1.0, "section_id": 4098}}}, "11458830": {"ViewCount": "1989", "Body": "<p>I have some code that I've inherited from someone very clever where they like to use gotos to leave the try block, jumping completely around the catch blocks. </p>\n<p>It definitely works, and I suspect this is legal (I think that the C++ standard says that on exit from a scope, everything gets cleaned up properly, and I assume that applies to whatever the compiler had to do to implement exceptions on my platform).</p>\n<p>Is this really legit? It's NOT something I'd ever write (it's too clever by half), but it's clearly working, and I just want to understand why this is OK.</p>\n", "AcceptedAnswerId": "11458958", "Title": "Is it legal to goto out of try block?", "CreationDate": "2012-07-12T19:03:36.070", "Id": "11458830", "CommentCount": "7", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2012-07-12T20:58:37.613", "Score": "2", "OwnerUserId": "5801", "Tags": "<c++><standards>", "AnswerCount": "4"}, "11458953": {"Id": "11458953", "PostTypeId": "2", "Body": "<p>It can be legit and it depends on what the code does. For example I have written code that jumps out of a catch block, and it's used in a language's runtime library (for simplicity, the code that uses the runtime library does not implement the itanium exception handling, but is implemented using longjmp/setjmp). The runtime library however, through the C++ exceptions, <em>does</em> use it; and a mechanism is needed to cleanly transfer control between them.</p>\n<pre><code>try {\n  doSomethingThatMayFail();\n} catch(DiagnosticException&amp;) {\n  goto unwind;\n}\n\nif(0) {\nunwind:\n  longjmp(&amp;lastSafePoint, 0);\n}\n</code></pre>\n<p>I put this into a macro so that it's very convenient to write. The <code>goto</code> here is necessary to cleanup resources allocated during exception handling of the diagnostic exception. </p>\n<p>As always, don't say \"NEVER use this feature\". Every use must be carefully thought about, instead.</p>\n", "LastEditorUserId": "34509", "LastActivityDate": "2012-07-12T20:58:37.613", "Score": "8", "CreationDate": "2012-07-12T19:12:16.380", "ParentId": "11458830", "CommentCount": "4", "LastEditDate": "2012-07-12T20:58:37.613", "OwnerUserId": "34509"}, "11458901": {"Id": "11458901", "PostTypeId": "2", "Body": "<p>Standard Says yes, it's legal &amp; well-defined:</p>\n<h2>C++2003: 6.6 Jump Statements</h2>\n<blockquote>\n<p id=\"so_11458830_11458901_0\">On exit from a scope (however accomplished), destructors (12.4) are\n  called for all constructed objects with automatic storage duration\n  (3.7.2) (named objects or temporaries) that are declared in that\n  scope, in the reverse order of their declaration. Transfer out of a\n  loop, out of a block, or back past an initialized variable with\n  automatic storage duration involves the destruction of variables with\n  automatic storage duration that are in scope at the point transferred\n  from but not at the point transferred to. (See 6.7 for transfers into\n  blocks). [Note: However, the program can be terminated (by calling\n  exit() or abort()(18.3), for example) without destroying class objects\n  with automatic storage duration. ]</p>\n</blockquote>\n<p>I choose not to comment on the religious implications of using <code>goto</code> in the first place.</p>\n", "LastActivityDate": "2012-07-12T19:08:21.703", "CommentCount": "0", "CreationDate": "2012-07-12T19:08:21.703", "ParentId": "11458830", "Score": "9", "OwnerUserId": "241536"}});