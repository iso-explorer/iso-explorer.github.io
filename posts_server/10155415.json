post_cb({"10155467": {"ParentId": "10155415", "CommentCount": "0", "Body": "<p>You <em>cannot</em> pass C-style arrays by value. End of story.</p>\n<p>You <em>can</em> however pass variables of class-type by value which <em>contain</em> arrays. The easiest way to exploit this is to use <code>std::array</code>:</p>\n<pre><code>void f(std::array&lt;int, 10&gt; a);\n\nstd::array&lt;int, 10&gt; a;\nf(a);\n</code></pre>\n<p>The class is basically just something like <code>struct { int data[10]; };</code>, so you could even roll this yourself if you really wanted to.</p>\n", "OwnerUserId": "596781", "PostTypeId": "2", "Id": "10155467", "Score": "3", "CreationDate": "2012-04-14T16:55:35.153", "LastActivityDate": "2012-04-14T16:55:35.153"}, "10155415": {"CommentCount": "0", "ViewCount": "773", "PostTypeId": "1", "LastEditorUserId": "15168", "CreationDate": "2012-04-14T16:46:19.647", "LastActivityDate": "2012-04-14T18:03:39.807", "Title": "C++ sending array to function by value, not by reference", "AcceptedAnswerId": "10155432", "LastEditDate": "2012-04-14T17:00:17.067", "Id": "10155415", "Score": "1", "Body": "<p>I have a problem with C++.</p>\n<p>I have a function which sorts the array, but I don't want to work on an original array. I want to send the array to the function by value not by reference. Please help me. </p>\n<pre><code>int bogoSort(int tab[], int n){\nint iloscOperacjiDominujacych = 0;\n    cout&lt;&lt;\"rozpoczalem algorytm BogoSort\"&lt;&lt;endl;\n\n    srand (time(NULL));\n    named (outer)\n    while(true){\n //       cout&lt;&lt;\"Zaczal sie while\"&lt;&lt;endl;\n        named (inner)\n        for(int i = 0; i &lt; n; i++){\n            if(i == n-1){\n                break (outer);\n            }\n            if (tab[i] &gt; tab[i+1]){\n                break (inner);\n            }\n        }\n        for(int i = n-1; i &gt; 0; i--){\n            iloscOperacjiDominujacych++;\n            //operacja dominujaca to zamiana dwoch elementow w tablicy, wykonuje sie ZAWSZE najwiecej razy i jest najbardziej zlozona\n            int swapPostition =  rand() % (i+1); //wylosowanie liczby miedzy &lt;0;i&gt; nalezacej do calkowitych\n            int temp = tab[i];\n            tab[i] = tab[swapPostition];\n            tab[swapPostition] = temp;\n        }\n    }\n//    cout&lt;&lt;\"Wykonal sie while\"&lt;&lt;endl;\n    show(tab,n);\n    return iloscOperacjiDominujacych;\n}\n</code></pre>\n", "Tags": "<c++>", "OwnerUserId": "1123020", "AnswerCount": "3"}, "10155608": {"ParentId": "10155415", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>C++ Says about function declarations</p>\n<blockquote>\n<p id=\"so_10155415_10155608_0\">After determining the type of each parameter, any parameter of type \u201carray of T\u201d or \u201cfunction returning T\u201d is adjusted to be \u201cpointer to T\u201d or \u201cpointer to function returning T,\u201d <em><strong>[dcl.fct] 8.3.5/5</strong></em></p>\n</blockquote>\n<p>So when you want to pass an array C++ ends up passing a pointer to the first element of the original array, instead of making a copy and passing it by value as would be consistent with other types. This is an unfortunate consequence of C compatibility, and I have no idea why C thought this inconsistency was a good idea.</p>\n<p>In any case, C++ offers <code>std::array</code> for statically sized arrays and <code>std::vector</code> for dynamically sized arrays. Because of the oddities with C arrays you should avoid them whenever possible. (There's rarely a situation where you can't avoid them)</p>\n<p><code>int tab[]</code> is an array with an unknown bound, so you can't use a statically sized <code>std::array</code> and must use <code>std::vector</code>:</p>\n<pre><code>int bogoSort(std::vector&lt;int&gt; tab){\n</code></pre>\n<p>Not that you no longer need the <code>n</code> parameter because the vector knows its own size. This is one of the ways std::vector and std::array are safer than an array. And even though a vector does have extra overhead associated with remembering that size, it's really zero overhead because it's saving you from having to do that work elsewhere.</p>\n<hr>\n<p>If you really want to take a C array (which you should not) you can simply copy it manually.</p>\n<pre><code>int bogoSort(int const *tab,int n) {\n    std::vector&lt;int&gt; tab_copy(tab,tab+n);\n    bogoSort(tab_copy);\n}\n\nint bogoSort(std::vector&lt;int&gt; tab) {\n    ...\n}\n</code></pre>\n<p>As you can see, internally I'm using a vector and I have an overload of bogoSort that takes a vector. Compare this with making the copy a raw array:</p>\n<pre><code>int bogoSort(int const *tab,int n) {\n  int *tab_copy = new int[n];\n  std::copy(tab,tab+n,tab_copy);             // manual copying\n  bogoSort_impl(tab_copy,n);                 // not overloading, hidden internal function\n  delete [] tab_copy;                        // resource cleanup. We're not exception safe!\n}\n\n// or\n\nint bogoSort(int const *tab,int n) {\n  // unqiue_ptr for exception safety\n  std::unqiue_ptr&lt;int[]&gt; tab_copy = std::unqiue_ptr&lt;int[]&gt;(new int[n]);\n  std::copy(tab,tab+n,tab_copy.get());\n  bogoSort_impl(tab_copy.get(),n);\n}\n</code></pre>\n<p>So again, you really should not be using C arrays. They're too much trouble and there's no benefit.</p>\n</hr>", "OwnerUserId": "365496", "LastEditorUserId": "365496", "LastEditDate": "2012-04-14T18:03:39.807", "Id": "10155608", "Score": "4", "CreationDate": "2012-04-14T17:12:41.673", "LastActivityDate": "2012-04-14T18:03:39.807"}, "10155432": {"ParentId": "10155415", "CommentCount": "2", "Body": "<p>There is no way to pass an array by value in C++. If you don't want to modify the original array, then you either have to make a separate copy yourself and manipulate the copy, or use <code>std::vector</code> or <code>std::array</code> (if you have C++11) and pass and return it by value (because you <em>can</em> copy <code>std::vector</code> or <code>array</code>).</p>\n", "OwnerUserId": "726361", "PostTypeId": "2", "Id": "10155432", "Score": "8", "CreationDate": "2012-04-14T16:49:14.973", "LastActivityDate": "2012-04-14T16:49:14.973"}, "bq_ids": {"n4140": {"so_10155415_10155608_0": {"section_id": 3241, "quality": 0.8823529411764706, "length": 15}}, "n3337": {"so_10155415_10155608_0": {"section_id": 3114, "quality": 0.8823529411764706, "length": 15}}, "n4659": {"so_10155415_10155608_0": {"section_id": 3997, "quality": 0.7058823529411765, "length": 12}}}});