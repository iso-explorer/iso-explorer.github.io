post_cb({"47490236": {"ParentId": "47489881", "CommentCount": "3", "Body": "<p>The spec says</p>\n<blockquote>\n<p id=\"so_47489881_47490236_0\">During the lookup for a base class name, non-type names are ignored ([basic.scope.hiding])</p>\n</blockquote>\n<p>The name is <code>Foo&lt;Type&gt;</code>, it's a type name. And the name <code>N::Foo</code> is not a type name, so it must be ignored. In similar situations where certain names are ignored, the wording is more explicit though</p>\n<blockquote>\n<p id=\"so_47489881_47490236_1\">If a \u200b::\u200b scope resolution operator in a nested-name-specifier is not preceded by a decltype-specifier, lookup of the name preceding that \u200b::\u200b considers only namespaces, types, and templates whose specializations are types</p>\n</blockquote>\n<p>Here, it doesn't only say <em>\"type names\"</em> or <em>\"non-type names\"</em> when it wants to allow <code>type-template&lt;arguments&gt;</code>. But it specifically says <em>\"templates whose specializations are types\"</em>. I think this confusion is the reason why there's implementation divergence here. The name <code>Foo&lt;Type&gt;</code> is what I would call a \"composite name\", because it consists of nested names inside of it. So it may be unclear <em>which</em> exact names in it are to be ignored and which not. </p>\n", "OwnerUserId": "34509", "PostTypeId": "2", "Id": "47490236", "Score": "4", "CreationDate": "2017-11-25T20:29:54.577", "LastActivityDate": "2017-11-25T20:29:54.577"}, "bq_ids": {"n4140": {"so_47489881_47490236_0": {"section_id": 6975, "quality": 0.8888888888888888, "length": 8}, "so_47489881_47490236_1": {"section_id": 7107, "quality": 1.0, "length": 16}}, "n3337": {"so_47489881_47490236_0": {"section_id": 6721, "quality": 0.8888888888888888, "length": 8}, "so_47489881_47490236_1": {"section_id": 6851, "quality": 1.0, "length": 16}}, "n4659": {"so_47489881_47490236_0": {"section_id": 8474, "quality": 0.8888888888888888, "length": 8}, "so_47489881_47490236_1": {"section_id": 8608, "quality": 1.0, "length": 16}}}, "47489881": {"CommentCount": "0", "ViewCount": "201", "PostTypeId": "1", "LastEditorUserId": "3043539", "CreationDate": "2017-11-25T19:46:38.790", "LastActivityDate": "2017-11-25T20:29:54.577", "Title": "Name conflict between namespace and class template: different compiler behavior", "AcceptedAnswerId": "47490236", "LastEditDate": "2017-11-25T19:55:00.120", "Id": "47489881", "Score": "5", "Body": "<p>Different compilers <a href=\"https://godbolt.org/g/4mY7jY\" rel=\"nofollow noreferrer\">show different behavior</a> compiling the following code:</p>\n<pre><code>namespace N\n{\n    namespace Foo\n    {\n        template &lt;typename&gt;\n        struct Foo\n        {\n        };\n    }\n}\n\ntemplate &lt;typename Type&gt;\nusing Foo = N::Foo::Foo&lt;Type&gt;;\n\nnamespace N\n{\n    template &lt;typename Type&gt;\n    struct Bar : Foo&lt;Type&gt;\n    {\n    };\n}\n\n\nint main()\n{\n}\n</code></pre>\n<p>Compilers tested and their compilation flags:</p>\n<ul>\n<li><em>clang++ 5.0.0</em>: <code>-std=c++14 -Wall -Wextra -Werror -pedantic-errors</code></li>\n<li><em>g++ 7.2</em>: <code>-std=c++14 -Wall -Wextra -Werror -pedantic-errors</code></li>\n<li><em>vc++ 19.10.25017</em> (VS 2017): <code>/EHsc /Za /std:c++14 /permissive-</code></li>\n<li><em>icc 18.0.0</em>: <code>-std=c++14 -Wall -Werror</code></li>\n</ul>\n<p>Results of the compilation:</p>\n<ul>\n<li><p><em>clang++</em>:</p>\n<blockquote id=\"so_47489881_47489881_0\">\n<pre><code>18 : &lt;source&gt;:18:15: error: expected class name\n        struct Bar : Foo\n                     ^\n</code></pre>\n</blockquote></li>\n<li><p><em>g++</em>: successful compilation</p></li>\n<li><p><em>vc++</em>:</p>\n<blockquote id=\"so_47489881_47489881_1\">\n<pre><code>18 : &lt;source&gt;(18): error C2516: 'Foo': is not a legal base class\n13 : &lt;source&gt;(13): note: see declaration of 'Foo'\n20 : &lt;source&gt;(20): note: see reference to class template instantiation 'N::Bar&lt;Type&gt;' being compiled\n18 : &lt;source&gt;(18): error C2143: syntax error: missing ',' before '&lt;'\n</code></pre>\n</blockquote></li>\n<li><p><em>icc</em>: successful compilation</p></li>\n</ul>\n<p>Which compiler behavior is standard compliant?</p>\n<p>Additional information:</p>\n<ul>\n<li><a href=\"https://godbolt.org/g/kz7RVW\" rel=\"nofollow noreferrer\">same code with anonymous namespaces</a></li>\n<li><a href=\"https://godbolt.org/g/qqgSRu\" rel=\"nofollow noreferrer\">same code without templates</a></li>\n<li><a href=\"https://godbolt.org/g/gCRwoF\" rel=\"nofollow noreferrer\">same code without templates and with anonymous namespaces</a></li>\n</ul>\n", "Tags": "<c++><templates><namespaces><c++14><name-resolution>", "OwnerUserId": "3043539", "AnswerCount": "1"}});