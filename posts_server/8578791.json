post_cb({"8579314": {"ParentId": "8578791", "PostTypeId": "2", "CommentCount": "1", "CreationDate": "2011-12-20T17:18:20.223", "Score": "11", "LastEditorUserId": "76722", "LastEditDate": "2011-12-20T17:25:02.700", "Id": "8579314", "OwnerUserId": "76722", "Body": "<p>From <strong>Assignment and compound assignment operators <em>[expr.ass]</em></strong></p>\n<blockquote>\n<p id=\"so_8578791_8579314_0\">The\n  meaning of x={v}, where T is the scalar type of the expression x, is that of x=T(v) except that no\n  narrowing conversion (8.5.4) is allowed.</p>\n</blockquote>\n<p>and from <strong>List-initialization <em>[dcl.ini.list]</em></strong></p>\n<blockquote>\n<p id=\"so_8578791_8579314_1\">If a narrowing conversion (see below) is required to convert any of the arguments, the program is ill-formed.</p>\n</blockquote>\n<p>So basically you can't ignore it, your program is ill-formed in presence of narrowing conversions.</p>\n<p>From <strong>Implementation compliance</strong>:</p>\n<blockquote>\n<p id=\"so_8578791_8579314_2\">Implementations are required to diagnose programs that\n  use such extensions that are ill-formed according to this International Standard. Having done so, however, they can compile and execute such programs.</p>\n</blockquote>\n<p>Bjarne Stroustroup say <a href=\"http://www2.research.att.com/~bs/C++0xFAQ.html#narrowing\" rel=\"noreferrer\">this</a>:</p>\n<blockquote>\n<p id=\"so_8578791_8579314_3\"><em>Preventing narrowing</em></p>\n<p id=\"so_8578791_8579314_4\">The problem: C and C++ implicitly truncates:</p>\n</blockquote>\n<pre>   int x = 7.3;        // Ouch!\n    void f(int);\n    f(7.3);         // Ouch!</pre>\n<blockquote>\n<p id=\"so_8578791_8579314_5\">However, in C++0x, {} initialization doesn't narrow:</p>\n</blockquote>\n<pre><code>int x0 {7.3};   // error: narrowing\nint x1 = {7.3}; // error: narrowing\ndouble d = 7;\nint x2{d};      // error: narrowing (double to int)\nchar x3{7};     // ok: even though 7 is an int, this is not narrowing\nvector&lt;int&gt; vi = { 1, 2.3, 4, 5.6 };    // error: double to int narrowing\n</code></pre>\n<blockquote>\n<p id=\"so_8578791_8579314_6\">The way C++0x avoids a lot of incompatibilities is by relying on the actual values of initializers (such as 7 in the example above) when it can (and not just type) when deciding what is a narrowing conversion. If a value can be represented exactly as the target type, the conversion is not narrowing.</p>\n</blockquote>\n<pre><code>char c1{7};      // OK: 7 is an int, but it fits in a char\nchar c2{77777};  // error: narrowing \n</code></pre>\n<blockquote>\n<p id=\"so_8578791_8579314_7\">Note that floating-point to integer conversions are always considered narrowing -- even 7.0 to 7. </p>\n</blockquote>\n<p>So in a way, narrowing also increases type safety.</p>\n", "LastActivityDate": "2011-12-20T17:25:02.700"}, "bq_ids": {"n4140": {"so_8578791_8579314_1": {"section_id": 3325, "quality": 1.0, "length": 8}, "so_8578791_8579314_2": {"section_id": 5776, "quality": 0.95, "length": 19}}, "n3337": {"so_8578791_8579314_1": {"section_id": 3195, "quality": 1.0, "length": 8}, "so_8578791_8579314_2": {"section_id": 5549, "quality": 0.95, "length": 19}, "so_8578791_8579314_0": {"section_id": 5942, "quality": 0.8333333333333334, "length": 10}}, "n4659": {"so_8578791_8579314_1": {"section_id": 4091, "quality": 1.0, "length": 8}, "so_8578791_8579314_2": {"section_id": 7233, "quality": 0.95, "length": 19}}}, "8578791": {"CommentCount": "5", "AcceptedAnswerId": "8579314", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2011-12-20T16:39:26.087", "LastActivityDate": "2011-12-20T17:25:02.700", "LastEditDate": "2017-05-23T11:52:59.887", "ViewCount": "4226", "FavoriteCount": "1", "Title": "What are the consequences of ignoring narrowing conversions in C++0x", "Id": "8578791", "Score": "7", "Body": "<p>Since switching on the C++0x standard in g++, I've started seeing 'narrowing conversion' errors, particularly when converting from an 'int' to a 'short' although I understand the error covers a much broader swath of <a href=\"https://stackoverflow.com/questions/4434140/narrowing-conversions-in-c0x-is-it-just-me-or-does-this-sound-like-a-breakin\">conversions</a>.</p>\n<p>Can anyone shed some light on the rational for introducing this extra level of safety?, What are the possible consequences of disabling this error? (apart from the potential loss of precision).</p>\n<p>Thanks.</p>\n", "Tags": "<c++><g++><c++11><narrowing>", "OwnerUserId": "300745", "AnswerCount": "1"}});