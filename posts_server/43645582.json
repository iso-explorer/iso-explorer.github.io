post_cb({"43645582": {"CommentCount": "3", "ViewCount": "63", "CreationDate": "2017-04-26T22:31:36.877", "LastActivityDate": "2017-04-26T22:52:30.880", "Title": "Resolution of function arguments/parameters in C++", "AcceptedAnswerId": "43645824", "PostTypeId": "1", "Id": "43645582", "Score": "0", "Body": "<p>I am currently working my way through 'Effective Modern C++' to update my knowledge of the language, and have just finished item 27, which deals with overloading functions which take forwarding (or universal as the book calls them) references. Using the following code I wrote:</p>\n<pre><code>#include &lt;iostream&gt;\n\ntemplate &lt;typename T&gt;\nvoid func(T&amp;&amp; param) {\n    std::cout &lt;&lt; \"forwarding reference version\\n\";\n}\n\nvoid func(int param) {\n    std::cout &lt;&lt; \"int version\\n\";\n}\n\nint main() {\n    func(29);\n}\n</code></pre>\n<p>Please can someone explain why the int version is called, even though 29 is an rvalue and therefore the template should instantiate to \"void func(int&amp;&amp; param)\" and the call should be to the forwarding version? Obviously it is what it is so my understanding is clearly lacking, but clarification on this point would be helpful. I understand that the standard says in the case of identical function signatures, a non-templated function should be preferred, but (in my mind at least) this doesn't apply here? Many thanks.</p>\n<p>Regards,\nPhil</p>\n", "Tags": "<c++><templates><rvalue><perfect-forwarding>", "OwnerUserId": "902544", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_43645582_43645824_2": {"section_id": 126, "quality": 1.0, "length": 6}, "so_43645582_43645824_0": {"section_id": 603, "quality": 1.0, "length": 9}}, "n3337": {"so_43645582_43645824_2": {"section_id": 120, "quality": 1.0, "length": 6}, "so_43645582_43645824_0": {"section_id": 593, "quality": 1.0, "length": 9}}, "n4659": {"so_43645582_43645824_2": {"section_id": 131, "quality": 1.0, "length": 6}, "so_43645582_43645824_0": {"section_id": 629, "quality": 1.0, "length": 9}}}, "43645824": {"ParentId": "43645582", "CommentCount": "0", "CreationDate": "2017-04-26T22:52:30.880", "OwnerUserId": "1505939", "PostTypeId": "2", "Id": "43645824", "Score": "5", "Body": "<p>The call <code>func(29)</code> matches the function  <code>void func(int)</code> with no conversions required. This is known as <em>identity conversion</em> for overload resolution, which is in the ranking category <em>Exact Match</em>.</p>\n<p>The ranking rules for <em>best viable function</em> in [over.match.best] specify when functions are a better match than other functions during overload resolution.</p>\n<p>An identity conversion is never a worse conversion sequence than any other conversion sequence, according to [over.ics.rank], so <code>void func(int)</code> can never be beaten under the first 5 rules.  Rule 6 is:</p>\n<blockquote>\n<p id=\"so_43645582_43645824_0\">F1 is defined to be a better function than another viable function\n  F2 if for all arguments   </p>\n<p id=\"so_43645582_43645824_1\">[...]</p>\n<p id=\"so_43645582_43645824_2\">F1 is not a function template specialization and F2 is a function template specialization, [...]</p>\n</blockquote>\n<p>So a non-template identity conversion always wins over any template instantiation.</p>\n", "LastActivityDate": "2017-04-26T22:52:30.880"}});