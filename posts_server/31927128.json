post_cb({"bq_ids": {"n4140": {"so_31927128_31927151_0": {"length": 7, "quality": 1.0, "section_id": 373}, "so_31927128_31927151_1": {"length": 16, "quality": 0.8888888888888888, "section_id": 3913}}, "n3337": {"so_31927128_31927151_0": {"length": 7, "quality": 1.0, "section_id": 364}, "so_31927128_31927151_1": {"length": 16, "quality": 0.8888888888888888, "section_id": 3773}}, "n4659": {"so_31927128_31927151_0": {"length": 7, "quality": 1.0, "section_id": 387}}}, "31927151": {"Id": "31927151", "PostTypeId": "2", "Body": "<p>Per the C++11 standard 12.1.8</p>\n<blockquote>\n<p id=\"so_31927128_31927151_0\">A return statement in the body of a constructor shall not specify a return value.</p>\n</blockquote>\n<p>So it should be an error if you are returning a value from a constructor.</p>\n<p>I believe the reason <code>return (void)0;</code> as a return in a constructor cannot be used is spelled out in 6.6.3.2</p>\n<blockquote>\n<p id=\"so_31927128_31927151_1\">A return statement with neither an expression nor a braced-init-list can be used only in functions that do not return a value, that is, a function with the return type cv void, a constructor (12.1), or a destructor (12.4).</p>\n</blockquote>\n<p>Since <code>(void)0</code> is considered an expression it cannot be used in a constructor.</p>\n", "LastEditorUserId": "4342498", "LastActivityDate": "2015-08-10T19:32:27.800", "Score": "4", "CreationDate": "2015-08-10T19:02:17.370", "ParentId": "31927128", "CommentCount": "10", "OwnerUserId": "4342498", "LastEditDate": "2015-08-10T19:32:27.800"}, "31927128": {"ViewCount": "72", "Body": "<p>I have a couple of macros, one returning a value and the other returning for void function case, basically calling the other one with its arguments and <code>(void)0</code>. When compiling it both with VS and GCC, I had some unexpected compilation issues for the cases where it's called from within a constructor.</p>\n<p>I tried running the following, un-commenting each of the 5 cases with <code>gcc b.cpp</code> (gcc version 4.8.4), <code>clang c.bpp</code>(clang version 3.4-1) on ubuntu 14.04 and some VS2013 on win7,</p>\n<pre><code>#include &lt;cstdio&gt;\n\nstruct A {\n    A() {\n        return ((void)0);   // case 0 =&gt; gcc err,   clang ok,   msvc err\n        //return (void)0;   // case 1 =&gt; gcc err,   clang ok,   msvc ok\n        //return ();        // case 2 =&gt; gcc err,   clang err,  msvc err\n        //return;           // case 3 =&gt; gcc ok,    clang ok,   msvc ok\n        //;                 // case 4 =&gt; gcc ok,    clang ok,   msvc ok\n    }\n} a;\n\nint main()\n{\n    printf(\"%p\\n\", &amp;a);\n}\n</code></pre>\n<p>I expected all to have a similar effect (Well I'm not sure about case 2) but instead I got some odd failiures...</p>\n<p>case 2:</p>\n<pre><code>$ gcc b.cpp\nb.cpp: In constructor \u2018A::A()\u2019:\nb.cpp:7:17: error: expected primary-expression before \u2018)\u2019 token\n         return ();\n                 ^\nb.cpp:7:17: error: returning a value from a constructor\n$ clang b.cpp\nb.cpp:7:17: error: expected expression\n        return ();\n                ^\n1 error generated.\n</code></pre>\n<p>case 1:</p>\n<pre><code>$ gcc b.cpp\nb.cpp: In constructor \u2018A::A()\u2019:\nb.cpp:6:22: error: returning a value from a constructor\n         return (void)0;\n</code></pre>\n<p>case 0:</p>\n<pre><code>$ gcc b.cpp\nb.cpp: In constructor \u2018A::A()\u2019:\nb.cpp:5:24: error: returning a value from a constructor\n         return ((void)0);\n</code></pre>\n<p>What's the correct behavior here? And how can I adjust say a couple of macros like</p>\n<pre><code>#define MOO(a, b, retVal) \\\n    do                    \\\n        ...               \\\n        return (retVal);  \\\n   while(0)\n\n#define FOO(a, b) MOO((a), (b), (void)0)\n</code></pre>\n<p>to work for c'tors as well? Is there a more c++-ish way to use decltype to return (void)0, -1, SOME_NONE and other default values for error handling aborts in such macros?</p>\n<p>(A somewhat unrelated question is, approximately where in the code does gcc decide I'm returning a value from the c'tor?)</p>\n", "AcceptedAnswerId": "31927151", "Title": "c++ return from c'tor + default return values for err handling", "CreationDate": "2015-08-10T19:00:39.643", "Id": "31927128", "CommentCount": "8", "LastEditDate": "2015-08-10T19:43:37.413", "PostTypeId": "1", "LastEditorUserId": "1413395", "LastActivityDate": "2015-08-10T19:43:37.413", "Score": "1", "OwnerUserId": "3352623", "Tags": "<c++><gcc><language-lawyer><return-type><clang++>", "AnswerCount": "1"}});