post_cb({"28103318": {"CommentCount": "0", "ViewCount": "66", "OwnerDisplayName": "user2953119", "CreationDate": "2015-01-23T05:00:44.327", "LastActivityDate": "2015-01-23T05:12:31.450", "PostTypeId": "1", "AcceptedAnswerId": "28103433", "Title": "Understanding namespace using directive", "Id": "28103318", "Score": "2", "Body": "<p>In the following program we have two namespaces:</p>\n<pre><code>#include &lt;iostream&gt;\nnamespace B\n{\n    int c = 42;\n}\n\nnamespace A\n{\n    using namespace B;\n    int a = 442;\n}\n\nnamespace B\n{\n    int b = 24;\n}\n\nint main()\n{ \n    std::cout &lt;&lt; A::a &lt;&lt; std::endl; //442\n    std::cout &lt;&lt; A::b &lt;&lt; std::endl; //24\n    std::cout &lt;&lt; A::c &lt;&lt; std::endl; //42\n}\n</code></pre>\n<p><strong><a href=\"http://coliru.stacked-crooked.com/a/925f39473ff26382\" rel=\"nofollow\">DEMO</a></strong></p>\n<p>I thought the behavior of the program is being covered by <code>N4296::3.3.6/1 [basic.scope.namespace]</code>:</p>\n<blockquote>\n<p id=\"so_28103318_28103318_0\">A namespace member name has namespace scope. Its potential scope\n  includes its namespace from the name\u2019s point of declaration (3.3.2)\n  onwards; and <em>for each using-directive</em> (7.3.4) that nominates the\n  member\u2019s namespace, the member\u2019s potential scope includes that portion\n  of the potential scope of the using-directive <em>that follows the</em>\n<em>member\u2019s point of declaration</em>.</p>\n</blockquote>\n<p>So, in the case of the <code>namespace A</code>, the potential scope of the member <code>b</code> shouldn't have included any portion of the program, because the member was declared later then the <code>using directive</code>. But actually it can be found by qualified name lookup. What's wrong?</p>\n", "Tags": "<c++><namespaces>", "AnswerCount": "1"}, "28103433": {"ParentId": "28103318", "CommentCount": "1", "Body": "<p>If you read this fragment again:</p>\n<blockquote>\n<p id=\"so_28103318_28103433_0\">the member\u2019s [<code>b</code>'s] potential scope includes that portion of the potential scope of the using-directive [in <code>A</code>] that follows the member\u2019s point of declaration.</p>\n</blockquote>\n<p>I believe you have to read it as stating that <code>b</code> is in the scope of <code>A</code> from the point of <code>b</code>'s declaration onward. Where you print <code>A::b</code>, that does in fact \"follow the member's point of declaration\", so for that line, <code>b</code> can be found in the scope of <code>A</code>. This is perfectly valid.</p>\n", "OwnerUserId": "2069064", "PostTypeId": "2", "Id": "28103433", "Score": "2", "CreationDate": "2015-01-23T05:12:31.450", "LastActivityDate": "2015-01-23T05:12:31.450"}, "bq_ids": {"n4140": {"so_28103318_28103318_0": {"section_id": 7067, "quality": 0.9411764705882353, "length": 32}, "so_28103318_28103433_0": {"section_id": 7067, "quality": 1.0, "length": 12}}, "n3337": {"so_28103318_28103318_0": {"section_id": 6811, "quality": 0.9411764705882353, "length": 32}, "so_28103318_28103433_0": {"section_id": 6811, "quality": 1.0, "length": 12}}, "n4659": {"so_28103318_28103318_0": {"section_id": 8564, "quality": 0.9411764705882353, "length": 32}, "so_28103318_28103433_0": {"section_id": 8564, "quality": 1.0, "length": 12}}}});