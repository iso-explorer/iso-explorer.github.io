post_cb({"21771985": {"ParentId": "21771901", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>by using reference <a href=\"https://stackoverflow.com/a/7762741/3110262\">What's the difference between \u201cstatic\u201d and \u201cstatic inline\u201d function?</a>:</p>\n<p><code>inline</code> instructs the compiler to attempt to embed the function content into the calling code instead of executing an actual call.</p>\n<p>For small functions that are called frequently that can make a big performance difference.</p>\n<p>However, this is only a \"hint\", and the compiler may ignore it, and most compilers will try to \"<code>inline</code>\" even when the keyword is not used, as part of the optimizations, where its possible.</p>\n<p>for example:</p>\n<pre><code>static int Inc(int i) {return i+1};\n.... // some code\nint i;\n.... // some more code\nfor (i=0; i&lt;999999; i = Inc(i)) {/*do something here*/};\n</code></pre>\n<p>This tight loop will perform a function call on each iteration, and the function content is actually significantly less than the code the compiler needs to put to perform the call. inline will essentially instruct the compiler to convert the code above into an equivalent of:</p>\n<pre><code> int i;\n ....\n for (i=0; i&lt;999999; i = i+1) { /* do something here */};\n</code></pre>\n<p>Skipping the actual function call and return</p>\n<p>Obviously this is an example to show the point, not a real piece of code.</p>\n<p><code>static</code> refers to the scope. In C it means that the function/variable can only be used within the same translation unit.</p>\n", "OwnerUserId": "3110262", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T11:58:59.360", "Id": "21771985", "Score": "-1", "CreationDate": "2014-02-14T06:05:40.023", "LastActivityDate": "2014-02-14T06:05:40.023"}, "21772170": {"ParentId": "21771901", "CommentCount": "0", "Body": "<p>Your first use of inline function without static, is undefined behaviour.</p>\n<p>Standard 3.2.6,</p>\n<blockquote>\n<p id=\"so_21771901_21772170_0\">There can be more than one definition of ..., ..., inline function\n  with external linkage (7.1.2), ..., in a program provided that each\n  definition appears in a different translation unit, and provided the\n  definitions satisfy the following requirements:</p>\n<p id=\"so_21771901_21772170_1\">\u2014 each definition of D shall consist of the same sequence of tokens; and </p>\n<p id=\"so_21771901_21772170_2\">\u2014 in each definition of D, corresponding names, looked up\n  according to 3.4, shall refer to an entity defined within the\n  definition of D, or shall refer to the same entity,</p>\n<p id=\"so_21771901_21772170_3\">\u2014 ...</p>\n<p id=\"so_21771901_21772170_4\">If the definitions of D satisfy all these requirements, then the\n  program shall behave as if there were a single definition of D. If the\n  definitions of D do not satisfy these requirements, then the behavior\n  is undefined.</p>\n</blockquote>\n<p>For your first use of external inline function (without static), the name of ply, after name lookup, refer to different entity for different translation unit.</p>\n", "OwnerUserId": "534498", "PostTypeId": "2", "Id": "21772170", "Score": "0", "CreationDate": "2014-02-14T06:19:39.703", "LastActivityDate": "2014-02-14T06:19:39.703"}, "21771948": {"ParentId": "21771901", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>It's because the static variable will be defined separately in all translation units where the header file have been included, but the (non-static) function will only be defined once. So you have multiple copies of the variable but only one copy of the functions. Which copy of the variable will the function use? I don't know, I think it's either undefined behavior or implementation defined (have to read the specification for that).</p>\n<p>What differs when you declare the function to be <code>static</code> too, is that then it will be defined in each translation unit the same as the variable, and so access the variable for only that translation unit.</p>\n", "OwnerUserId": "440558", "LastEditorUserId": "440558", "LastEditDate": "2014-02-14T06:11:39.850", "Id": "21771948", "Score": "5", "CreationDate": "2014-02-14T06:02:28.537", "LastActivityDate": "2014-02-14T06:11:39.850"}, "21771901": {"CommentCount": "4", "ViewCount": "786", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2014-02-14T05:59:29.207", "LastActivityDate": "2014-02-14T06:26:36.853", "Title": "Difference between an inline function and static inline function when accessing a static variable", "AcceptedAnswerId": "21771948", "LastEditDate": "2017-05-23T12:33:02.230", "Id": "21771901", "Score": "0", "Body": "<p>I encountered an interesting case while reading others code.</p>\n<p>In the head file, defined a static variable and an inline function are simplified as following: </p>\n<pre><code>static int ply;\n\ninline int WTM(){return ply;}\n</code></pre>\n<p>and the function is called in some other <code>cpp</code> file that include this head.</p>\n<pre><code>cout &lt;&lt; ply &lt;&lt; \" \" &lt;&lt; WTM();\n</code></pre>\n<p>The strange thing is that at where this function is called, the variable <code>ply</code> inside that inline function has different value from the same variable just before it outside the function. </p>\n<p>The output is 0 1;</p>\n<p>I checked all the file and both <code>ply</code> and <code>WTM()</code> just have this single definition.</p>\n<p>After that I have changed the code to the following:</p>\n<pre><code>static int ply;\n\nstatic inline int WTM(){return ply;}\n</code></pre>\n<p>The two value became the same.</p>\n<p>My compiler is <code>g++ (GCC) 4.4.7</code> with default setting.</p>\n<p>I searched about this phenomenon and get to this two link:\n<a href=\"https://stackoverflow.com/questions/12836171/difference-between-an-inline-function-and-static-inline-function\">Difference between an inline function and static inline function</a>\nand\n<a href=\"http://gcc.gnu.org/onlinedocs/gcc/Inline.html\" rel=\"nofollow noreferrer\">http://gcc.gnu.org/onlinedocs/gcc/Inline.html</a>\nbut still don't understand why this could happen (especially for why they could have different values in the first situation). I wonder if someone can tell me how the compiler will expand those two pieces of code (I tried using <code>-E</code> but it seems not working on inline function).</p>\n", "Tags": "<c++><gcc><static><inline>", "OwnerUserId": "2450629", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_21771901_21772170_4": {"section_id": 7043, "quality": 0.9375, "length": 15}, "so_21771901_21772170_1": {"section_id": 7043, "quality": 1.0, "length": 6}, "so_21771901_21772170_2": {"section_id": 7043, "quality": 1.0, "length": 14}, "so_21771901_21772170_0": {"section_id": 7043, "quality": 0.9565217391304348, "length": 22}}, "n3337": {"so_21771901_21772170_4": {"section_id": 6788, "quality": 1.0, "length": 16}, "so_21771901_21772170_1": {"section_id": 6788, "quality": 1.0, "length": 6}, "so_21771901_21772170_2": {"section_id": 6788, "quality": 1.0, "length": 14}, "so_21771901_21772170_0": {"section_id": 6788, "quality": 0.9565217391304348, "length": 22}}, "n4659": {"so_21771901_21772170_4": {"section_id": 8540, "quality": 0.9375, "length": 15}, "so_21771901_21772170_1": {"section_id": 8540, "quality": 1.0, "length": 6}, "so_21771901_21772170_2": {"section_id": 8540, "quality": 1.0, "length": 14}, "so_21771901_21772170_0": {"section_id": 8540, "quality": 0.9565217391304348, "length": 22}}}, "21772273": {"ParentId": "21771901", "CommentCount": "0", "Body": "<p>There is also one more explanation of this:</p>\n<p>By declaring a function <code>inline</code>,\nyou can direct compiler to integrate that function's code into the code for its callers.</p>\n<p>This makes execution faster by eliminating the function-call overhead;\nin addition, if any of the actual argument values are constant, their known values may permit simplifications at compile time so that not all of the inline function's code needs to be included. </p>\n<p>The effect on code size is less predictable; object code may be larger or smaller with function <code>inline</code>, depending on the particular case.</p>\n<p><code>Inline</code> functions is an optimization and it really \u201cworks\u201d only in optimizing compilation. If you don't use -O, no function is really <code>inline</code>.</p>\n<p>and For <code>static inline function</code>:</p>\n<p>When a function is both <code>inline</code> and <code>static</code>, </p>\n<p>if all calls to the function are integrated into the caller, and the function's address is never used, then the function's own assembler code is never referenced. </p>\n<p>In this case, <code>compiler</code> does not actually output assembler code for the function, unless you specify the option <code>-fkeep-inline-functions.</code> </p>\n<p>Some calls cannot be integrated for various reasons <em>(in particular, calls that precede the function's definition cannot be integrated, and neither can recursive calls within the definition)</em>.</p>\n<p>If there is a non integrated call, then the function is compiled to assembler code as usual. The function must also be compiled as usual if the program refers to its address, because that can't be <code>inlined</code>.</p>\n", "OwnerUserId": "3110262", "PostTypeId": "2", "Id": "21772273", "Score": "0", "CreationDate": "2014-02-14T06:26:36.853", "LastActivityDate": "2014-02-14T06:26:36.853"}});