post_cb({"25634043": {"ParentId": "25633852", "PostTypeId": "2", "CommentCount": "5", "CreationDate": "2014-09-02T23:43:45.777", "Score": "2", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T10:26:22.627", "Id": "25634043", "OwnerUserId": "15168", "Body": "<p>Applied 'common sense' suggests that you can't reliably include C++ standard headers inside your own namespace.  The standard library code is meant to be in the <code>std</code> namespace, not the <code>library::std</code> namespace. If there are any non-templated functions, the system library will provide <code>std::non_templated_function</code> and not <code>library::std::non_templated_function</code>, so your code won't link. If everything is a template, you may get away with it, but it is (unnecessarily) risky at best so don't do it.</p>\n<p>Further (as noted by <a href=\"https://stackoverflow.com/users/2756719/t-c\">T.C.</a> in a <a href=\"https://stackoverflow.com/questions/25633852/should-i-include-in-my-librarys-namespace/25634043?noredirect=1#comment40051442_25634043\">comment</a>), the C++11 standard (ISO/IEC 14882:2011) standard explicitly says in \u00a717.6.2.2 <em>Headers [using.headers]</em>:</p>\n<blockquote>\n<p id=\"so_25633852_25634043_0\">\u00b63 A translation unit shall include a header only outside of any external declaration or definition, and shall\n  include the header lexically before the first reference in that translation unit to any of the entities declared\n  in that header.</p>\n</blockquote>\n<p>This refers to a header from the C++ standard library, of course; it makes no such proscription for your own headers.</p>\n<p>In theory, your library's internal headers could be included inside your <code>library</code> namespace if you want (but they shouldn't be \u2014 see below):</p>\n<pre><code>namespace library {\n    #include \"library/internal-header.h\"\n    \u2026other declarations or definitions\u2026\n}\n</code></pre>\n<p>However (as <a href=\"https://stackoverflow.com/users/1505939/matt-mcnabb\">Matt McNabb</a> noted in a <a href=\"https://stackoverflow.com/questions/25633852/should-i-include-in-my-librarys-namespace/25634043?noredirect=1#comment40051826_25634043\">comment</a>), doing so would mean that the internal header could not include any new standard headers, and yet it is quite plausible that an internal header would need to use some (extra) standard headers.</p>\n<p>You might care to think about including them inside your own internal sub-namespace (for example, <code>library::internal</code>). If your internal headers do not contain their own <code>namespace library { \u2026 }</code> block, ensure you always include them inside the scope of your namespace <code>library { \u2026 }</code> brackets in the headers that include them, but note that the internal headers are no longer completely standalone.</p>\n<p>Alternatively, and much more reliably, your library's internal headers <s>could</s> should be made standalone, with their contents defined inside your <code>library</code> namespace (since namespaces are extensible).</p>\n<pre><code>#include \"library/internal-header.h\"\nnamespace library {\n    \u2026other declarations or definitions\u2026\n}\n</code></pre>\n<p>where <code>\"library/internal-header.h\"</code> would contain:</p>\n<pre><code>namespace library {\n    namespace internal {\n        \u2026internal declarations or definitions\u2026\n    }\n}\n</code></pre>\n<p>where the <code>namespace internal {</code> and matching <code>}</code> are optional \u2014 and you might want a <code>using namespace library::internal;</code> directive as well.</p>\n<p>Either mechanism could be made to work. On the whole, though, standalone headers are much the better (I agree with <a href=\"https://stackoverflow.com/users/1413395/%cf%80%ce%ac%ce%bd%cf%84%ce%b1-%e1%bf%a5%ce%b5%e1%bf%96\">\u03c0\u03ac\u03bd\u03c4\u03b1 \u1fe5\u03b5\u1fd6</a> and his <a href=\"https://stackoverflow.com/questions/25633852/should-i-include-in-my-librarys-namespace#comment40050940_25633852\">comment</a> and Matt McNabb).</p>\n", "LastActivityDate": "2014-09-03T00:37:08.183"}, "bq_ids": {"n4140": {"so_25633852_25634043_0": {"section_id": 6270, "quality": 1.0, "length": 19}}, "n3337": {"so_25633852_25634043_0": {"section_id": 6030, "quality": 1.0, "length": 19}}, "n4659": {"so_25633852_25634043_0": {"section_id": 7776, "quality": 0.9473684210526315, "length": 18}}}, "25633852": {"CommentCount": "5", "ViewCount": "283", "CreationDate": "2014-09-02T23:20:36.913", "LastActivityDate": "2014-09-03T00:37:08.183", "Title": "Should I #include in my library's namespace?", "AcceptedAnswerId": "25634043", "PostTypeId": "1", "Id": "25633852", "Score": "0", "Body": "<p>I have a library that lives in its own namespace. Every file is wrapped by this namespace. When I use the standard library, should I include it into the global namespace or the one of my library? Moreover, what about library intern includes. Should they go inside or outside the namespace?</p>\n<pre><code>#include &lt;vector&gt; // This allows reuse\n\nnamespace library {\n    #include &lt;vector&gt; // This would not leak anything\n    #include \"cart.h\"\n    using namespace std;\n\n    class Train {\n        vector&lt;cart&gt; carts;\n    };\n}\n</code></pre>\n<p>Including into the global namespace would make sense when the user needs vectors, too, so that the compiler doesn't need to integrate two versions of the standard library. On the other hand, including into the library's namespace makes sure that nothing leaks outside.</p>\n", "Tags": "<c++><namespaces>", "OwnerUserId": "1079110", "AnswerCount": "1"}});