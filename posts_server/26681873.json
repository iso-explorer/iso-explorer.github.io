post_cb({"26681873": {"CommentCount": "1", "AcceptedAnswerId": "26682543", "PostTypeId": "1", "LastEditorUserId": "4122880", "CreationDate": "2014-10-31T19:14:01.083", "LastActivityDate": "2014-11-10T16:37:14.373", "LastEditDate": "2014-10-31T20:55:06.610", "ViewCount": "283", "FavoriteCount": "2", "Title": "Interaction between decltype and class member name shadowing an external name", "Id": "26681873", "Score": "8", "Body": "<p>This code</p>\n<pre><code>int clash;\n\nstruct Foo {\n  decltype(clash) clash;\n};\n</code></pre>\n<p>compiles silently on clang, but fails to compile on gcc giving the errors</p>\n<blockquote>\n<p id=\"so_26681873_26681873_0\">error: declaration of 'int Foo::clash' [-fpermissive]</p>\n<p id=\"so_26681873_26681873_1\">error: changes meaning of 'clash' from 'int clash' [-fpermissive]</p>\n</blockquote>\n<p>It seems that 2 ingredients are required for the error to arise:</p>\n<ol>\n<li><p>The shadowing must be done by a class member (no problem if it's a function's local scope).</p></li>\n<li><p>decltype([shadowed name]) must be used in the shadowing scope before the declaration of [shadowing name].</p></li>\n</ol>\n<p>My question is twofold:</p>\n<ol>\n<li>Is gcc justified in rejecting this code?</li>\n<li>Where does it say so in the standard?</li>\n</ol>\n", "Tags": "<c++><gcc><scope><language-lawyer><decltype>", "OwnerUserId": "4122880", "AnswerCount": "1"}, "26682543": {"ParentId": "26681873", "PostTypeId": "2", "CommentCount": "2", "Body": "<p><code>gcc</code> is correct the program is ill-formed, although this particular violation does not require a diagnostic so <code>clang</code> does not have to provide one.</p>\n<p>If we look at the C++11 standard(<em>The closest draft would be <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf\" rel=\"nofollow noreferrer\">N3337</a></em>) section <code>3.3.7</code> <em>Class scope</em> it says:</p>\n<blockquote>\n<p id=\"so_26681873_26682543_0\">A name N used in a class S shall refer to the same declaration in its\n  context and when re-evaluated in the completed scope of S. No\n  diagnostic is required for a violation of this rule.</p>\n</blockquote>\n<p>and the next rule says:</p>\n<blockquote>\n<p id=\"so_26681873_26682543_1\">If reordering member declarations in a class yields an alternate valid\n  program under (1) and (2), the program is ill-formed, no diagnostic is\n  required.</p>\n</blockquote>\n<p>It makes sense we would want to prevent situations where reordering the declarations in a class give a different program. It is curious whether <a href=\"https://stackoverflow.com/q/26761385/1708801\">these two rules are redundant or not</a>.</p>\n<p>The section also provides the following example:</p>\n<pre><code>enum { i = 1 };\n\nclass X {\n  char v[i]; // error: i refers to ::i\n             // but when reevaluated is X::i\n  int f() { return sizeof(c); } // OK: X::c\n  char c;\n  enum { i = 2 };\n};\n</code></pre>\n<p>and if we try this example with <code>gcc</code> (<em><a href=\"http://coliru.stacked-crooked.com/a/97971da06b99038c\" rel=\"nofollow noreferrer\">see it live</a></em>), we get an almost identical error to one your code produces:</p>\n<pre><code> error: declaration of 'i' [-fpermissive]\n enum { i = 2 };\n          ^\n\n error: changes meaning of 'i' from '&lt;anonymous enum&gt; i' [-fpermissive]\n enum { i = 1 };\n</code></pre>\n", "OwnerUserId": "1708801", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T11:44:31.033", "Id": "26682543", "Score": "9", "CreationDate": "2014-10-31T20:00:23.360", "LastActivityDate": "2014-11-10T16:37:14.373"}, "bq_ids": {"n4140": {"so_26681873_26682543_1": {"section_id": 7070, "quality": 1.0, "length": 11}, "so_26681873_26682543_0": {"section_id": 7070, "quality": 1.0, "length": 15}}, "n3337": {"so_26681873_26682543_1": {"section_id": 6814, "quality": 1.0, "length": 11}, "so_26681873_26682543_0": {"section_id": 6814, "quality": 1.0, "length": 15}}, "n4659": {"so_26681873_26682543_0": {"section_id": 8568, "quality": 1.0, "length": 15}}}});