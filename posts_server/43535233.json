post_cb({"bq_ids": {"n4140": {"so_43535233_43535233_0": {"length": 10, "quality": 0.8333333333333334, "section_id": 5425}}, "n3337": {"so_43535233_43535233_0": {"length": 10, "quality": 0.8333333333333334, "section_id": 5220}}}, "43535233": {"CreationDate": "2017-04-21T06:14:47.443", "ViewCount": "116", "FavoriteCount": "1", "Id": "43535233", "AcceptedAnswerId": "43535487", "Score": "4", "Title": "constexpr reference to non-const object", "CommentCount": "7", "Body": "<p>Is it permitted to declare a non-const reference as <code>constexpr</code>? Example code:</p>\n<pre><code>int x = 1;\nconstexpr int&amp; r = x;\n</code></pre>\n<p>This is accepted by gcc and clang (I tried several current and past versions of both, back to C++11, and all accepted it).  However I think it should not be accepted because C++14 [dcl.constexpr/9] says:</p>\n<blockquote>\n<p id=\"so_43535233_43535233_0\">if a constexpr specifier is used in a reference declaration, every full-\n  expression that appears in its initializer shall be a constant expression</p>\n</blockquote>\n<p>and <code>x</code> is not a constant expression. </p>\n<p>The language in the latest C++17 draft of [dcl.constexpr] changed and doesn't even mention <code>constexpr</code> references explicitly any more, I can't make head nor tail of what it is trying to say about them.</p>\n", "Tags": "<c++><reference><c++14><language-lawyer><constexpr>", "LastActivityDate": "2017-04-21T06:32:09.587", "PostTypeId": "1", "AnswerCount": "1", "OwnerUserId": "1505939"}, "43535487": {"CommentCount": "2", "Body": "<p>Assuming that <code>x</code> has static storage duration, the lvalue expression <code>x</code> is a perfectly valid constant expression.</p>\n<p>If you use <code>x</code> in a context that requires a prvalue, which causes the lvalue-to-rvalue conversion to be applied to it, then the resulting prvalue expression - call it <code>TO_RVALUE(x)</code> - would not be a constant expression, for obvious reasons. But in the case of reference binding, there is no such conversion.</p>\n", "CreationDate": "2017-04-21T06:32:09.587", "ParentId": "43535233", "Id": "43535487", "LastActivityDate": "2017-04-21T06:32:09.587", "PostTypeId": "2", "Score": "4", "OwnerUserId": "2756719"}});