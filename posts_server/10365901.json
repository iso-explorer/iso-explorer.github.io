post_cb({"10365901": {"CommentCount": "4", "ViewCount": "211", "PostTypeId": "1", "LastEditorUserId": "1288", "CreationDate": "2012-04-28T17:34:23.703", "LastActivityDate": "2013-02-09T16:10:56.097", "Title": "Variable declaration in the switch head?", "AcceptedAnswerId": "10365916", "LastEditDate": "2013-02-09T16:10:56.097", "Id": "10365901", "Score": "1", "Body": "<p>While browsing the code of my friend I came to notice this:</p>\n<pre><code>switch(State &amp;state = getState()) {\ncase Begin: state = Search; break;\n// other stuff similar\n}\n</code></pre>\n<p>What is with the variable in the switch header? He is using GCC so I think this might be a GCC extension. Any idea?</p>\n", "Tags": "<c++>", "OwnerUserId": "34509", "AnswerCount": "1"}, "10365916": {"ParentId": "10365901", "PostTypeId": "2", "CommentCount": "11", "Body": "<p>It's not a secret or a GCC extension. Variables are allowed to be declared in the conditions of things like <code>if</code>s, <code>while</code>s, and <code>switch</code>es. For example:</p>\n<pre><code>while (char c = cin.get()) { ... }\n</code></pre>\n<p>or</p>\n<pre><code>if (int* something = (int*)malloc(4)) { // but don't use malloc in C++\n    // ...\n}\n</code></pre>\n<p>After they are declared an initialised, they are converted to a <code>bool</code> value and if they evaluate to <code>true</code> the block is executed, and the block is skipped otherwise. Their scope is that of the construct whose condition they are declared in (and in the case of <code>if</code>, the scope is also over all the <code>else if</code> and <code>else</code> blocks too).</p>\n<p>In \u00a76.4.1 of the C++03 standard, it says</p>\n<blockquote>\n<p id=\"so_10365901_10365916_0\">Selection statements choose one of several flows of control.</p>\n<pre><code>selection-statement:\n\n    if ( condition ) statement\n    if ( condition ) statement else statement\n    switch ( condition ) statement\n\ncondition:\n\n    expression\n    type-specifier-seq declarator = assignment-expression\n</code></pre>\n</blockquote>\n<p>So as you can see, it allows <code>type-specifier-seq declarator = assignment-expression</code> in the condition of an <code>if</code> or <code>switch</code>. And you'd find something similar in the section for the \"repetition constructs\".</p>\n<p>Also, <code>switch</code>es work on integral or <code>enum</code> types <em>or</em> instances of classes that can be implicitly converted to an integral or <code>enum</code> type (\u00a76.4.4):</p>\n<blockquote>\n<p id=\"so_10365901_10365916_1\">The value of a condition that is an initialized declaration in a\n  switch statement is the value of the declared variable if it has\n  integral or enumeration type, or of that variable implicitly converted\n  to integral or enumeration type otherwise.</p>\n</blockquote>\n<p>I actually learned of this <a href=\"https://stackoverflow.com/a/312449/726361\"><strong>FROM AN ANSWER YOU POSTED</strong></a> on the \"Hidden Features of C++\" question. So I'm glad I could remind you of it :)</p>\n", "OwnerUserId": "726361", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:03:18.010", "Id": "10365916", "Score": "9", "CreationDate": "2012-04-28T17:36:31.820", "LastActivityDate": "2012-04-28T18:09:26.713"}, "bq_ids": {"n4140": {"so_10365901_10365916_1": {"section_id": 3885, "quality": 0.9, "length": 18}, "so_10365901_10365916_0": {"section_id": 3882, "quality": 1.0, "length": 7}}, "n3337": {"so_10365901_10365916_1": {"section_id": 3745, "quality": 0.9, "length": 18}, "so_10365901_10365916_0": {"section_id": 3742, "quality": 1.0, "length": 7}}, "n4659": {"so_10365901_10365916_1": {"section_id": 4764, "quality": 0.95, "length": 19}, "so_10365901_10365916_0": {"section_id": 4771, "quality": 1.0, "length": 7}}}});