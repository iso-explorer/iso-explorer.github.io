post_cb({"695653": {"Id": "695653", "PostTypeId": "2", "Body": "<p>Check if:</p>\n<ul>\n<li>You forgot the ';' after class declaration.</li>\n<li>MyType should've been declared accordingly.</li>\n<li>No default constructor there...</li>\n</ul>\n<p>The std::map declaration seems correct, I think.</p>\n", "OwnerDisplayName": "Hern&#225;n", "LastActivityDate": "2009-03-29T23:54:57.757", "Score": "-1", "CreationDate": "2009-03-29T23:54:57.757", "ParentId": "695645", "CommentCount": "1", "OwnerUserId": "48026"}, "696470": {"Body": "<p>Check requirements of stored type of the stl::map. Many stl collection require that stored type contains some specific properties (default constructor, copy constructor, etc.).</p>\n<p>Constructor without arguments is needed by the stl::map, because it's used, when operator[] is invoked with the key, which hasn't already been kept by the map. In this case the operator[] inserts the new entry consisting of the new key and value constructed using parameterless constructor. And this new value is then returned.</p>\n", "CreationDate": "2009-03-30T08:53:46.807", "ParentId": "695645", "CommentCount": "0", "LastEditDate": "2009-03-30T15:07:34.817", "PostTypeId": "2", "LastEditorDisplayName": "o-l-o", "LastActivityDate": "2009-03-30T15:07:33.630", "LastEditorUserId": "76857", "Id": "696470", "OwnerDisplayName": "o-l-o", "Score": "1", "OwnerUserId": "76857"}, "695663": {"Body": "<p>This issue comes with operator[]. Quote from SGI documentation:  </p>\n<blockquote>\n<p id=\"so_695645_695663_0\"><code>data_type&amp; operator[](const key_type&amp; k)</code> - Returns a reference to the object\n  that is associated with a particular\n  key. If the map does not already\n  contain such an object, <code>operator[]</code>\n  inserts the default object\n  <code>data_type()</code>.</p>\n</blockquote>\n<p>If you don't have default constructor you can use insert/find functions.\nFollowing example works fine:</p>\n<pre><code>myMap.insert( std::map&lt; int, MyClass &gt;::value_type ( 1, MyClass(1) ) );\nmyMap.find( 1 )-&gt;second;\n</code></pre>\n", "CreationDate": "2009-03-30T00:01:41.000", "ParentId": "695645", "CommentCount": "4", "LastEditDate": "2016-07-08T00:30:51.947", "PostTypeId": "2", "LastEditorDisplayName": "bb", "LastActivityDate": "2016-07-08T00:30:51.947", "LastEditorUserId": "72000", "Id": "695663", "OwnerDisplayName": "bb", "Score": "113", "OwnerUserId": "72000"}, "695659": {"Id": "695659", "PostTypeId": "2", "Body": "<p>Most likely because std::pair requires it. std::pair holds two values using value semantics so you need to be able to instantiate them without parameters. So the code uses std::pair in various places to return the map values to the caller and this is commonly done by instantiating an empty pair and assigning the values into it before returning the local pair.</p>\n<p>You could get around this with smart pointers using a map&lt;int, smartptr&lt;MyClass&gt; &gt; but that adds the overhead of checking for null pointers.</p>\n", "LastActivityDate": "2009-03-29T23:58:54.657", "CommentCount": "1", "CreationDate": "2009-03-29T23:58:54.657", "ParentId": "695645", "Score": "-1", "OwnerUserId": "44065"}, "bq_ids": {"n4140": {"so_695645_695652_0": {"length": 14, "quality": 0.7777777777777778, "section_id": 6276}}, "n3337": {"so_695645_695652_0": {"length": 14, "quality": 0.7777777777777778, "section_id": 6036}}, "n4659": {"so_695645_695652_0": {"length": 14, "quality": 0.7777777777777778, "section_id": 7783}}}, "695652": {"Body": "<p><strike>Yes. Values in STL containers need to maintain copy semantics. IOW, they need to behave like primitive types (e.g. int) which means, among other things, they should be default-constructible.</strike></p>\n<p>Without this (and others requirements) it would be needlessly hard to implement the various internal copy/move/swap/compare operations on the data structures with which STL containers are implemented.\n</p>\n<p>Upon reference to the C++ Standard, I see my answer was not accurate. <strong>Default-construction is, in fact, not a requirement</strong>:</p>\n<p>From 20.1.4.1:</p>\n<blockquote>\n<p id=\"so_695645_695652_0\">The default constructor is not\n  required. Certain container class\n  member function signatures specify the\n  default constructor as a default\n  argument. T() must be a well-defined\n  expression ...</p>\n</blockquote>\n<p>So, strictly speaking, your value type only needs to be default constructible if you happen to be using a function of the container that uses the default constructor in its signature.</p>\n<p>The real requirements (23.1.3) from all values stored in STL containers are <code>CopyConstructible</code> and <code>Assignable</code>. </p>\n<p>There are also other specific requirements for particular containers as well, such as being <code>Comparable</code> (e.g. for keys in a map).</p>\n<hr>\n<p>Incidentally, the following compiles with no error on <a href=\"http://www.comeaucomputing.com/tryitout/\" rel=\"nofollow noreferrer\">comeau</a>:</p>\n<pre><code>#include &lt;map&gt;\n\nclass MyClass\n{\npublic:\n    MyClass(int t);\n};\n\nint main()\n{\n    std::map&lt;int, MyClass&gt; myMap;\n}\n</code></pre>\n<p>So this might be a g++ problem.</p>\n</hr>", "CreationDate": "2009-03-29T23:54:51.890", "ParentId": "695645", "CommentCount": "2", "LastEditDate": "2009-03-30T00:16:23.507", "PostTypeId": "2", "LastEditorDisplayName": "Assaf", "LastActivityDate": "2009-03-30T00:16:23.507", "LastEditorUserId": "11208", "Id": "695652", "OwnerDisplayName": "Assaf", "Score": "6", "OwnerUserId": "11208"}, "695645": {"ViewCount": "24777", "Body": "<blockquote>\n<p id=\"so_695645_695645_0\">See also\n  <a href=\"https://stackoverflow.com/questions/695372/c-standard-list-and-default-constructible-types\">C++ standard list and default-constructible types</a></p>\n</blockquote>\n<p>Not a major issue, just annoying as I don't want my class to ever be instantiated without the particular arguments.</p>\n<pre><code>class MyClass\n{\npublic:\n    MyClass(MyType1 t);\n    MyType2 &amp;operator[](int index);\n}\n\nmap&lt;int, MyClass&gt; myMap;\n</code></pre>\n<p>This gives me the following g++ error:</p>\n<blockquote>\n<p id=\"so_695645_695645_1\">/usr/include/c++/4.3/bits/stl_map.h:419: error: no matching function for call to \u2018MyClass()\u2019</p>\n</blockquote>\n<p>This compiles fine if I add a default constructor; I am certain it's not caused by incorrect syntax.</p>\n", "AcceptedAnswerId": "695663", "Title": "Why does the C++ map type argument require an empty constructor when using []?", "CreationDate": "2009-03-29T23:49:59.343", "Id": "695645", "CommentCount": "3", "FavoriteCount": "19", "PostTypeId": "1", "LastEditDate": "2017-05-23T10:30:55.803", "LastEditorDisplayName": "Nick Bolton", "OwnerDisplayName": "Nick Bolton", "LastEditorUserId": "-1", "LastActivityDate": "2016-07-08T00:30:51.947", "Score": "64", "OwnerUserId": "47775", "Tags": "<c++><map>", "AnswerCount": "5"}});