post_cb({"7049601": {"ParentId": "7049528", "CommentCount": "0", "Body": "<p>It's the same. However, \"this\" can be used to disambiguate in certain cases.</p>\n<pre><code>class C\n{\npublic:\n    void set_x(int x){ x = x; } // does nothing\n    void set_this_x(int x){ this-&gt;x = x; } // sets the variable\n\nprivate:\n    int x;\n};\n</code></pre>\n", "OwnerUserId": "274757", "PostTypeId": "2", "Id": "7049601", "Score": "3", "CreationDate": "2011-08-13T09:26:34.560", "LastActivityDate": "2011-08-13T09:26:34.560"}, "7049595": {"ParentId": "7049528", "CommentCount": "0", "Body": "<p>No difference, the compiler already automatically generates code for this-&gt;  While it is superfluous syntax, there are two good reasons to use it:</p>\n<ul>\n<li><p>using an editor that supports auto-completion.  When you type \"this-&gt;\", the editor pops up a tool window that presents a list of class members to choose from.  This can speed up typing and helps avoid silly compile errors due to typing mistakes.</p></li>\n<li><p>it helps avoiding having to come up with artificial argument names.  You can give the argument the same name as the class member: void set_x(int x) { this-&gt;x = x; }.</p></li>\n</ul>\n", "OwnerUserId": "17034", "PostTypeId": "2", "Id": "7049595", "Score": "2", "CreationDate": "2011-08-13T09:26:01.770", "LastActivityDate": "2011-08-13T09:26:01.770"}, "7049591": {"ParentId": "7049528", "CommentCount": "0", "Body": "<p>No. </p>\n<p>If you stumbled over that expression in someone's code, it's probably originated in something like this:</p>\n<pre><code>struct A\n{\n    int x;\n\n    void set_X(int x)\n    {\n        this-&gt;x = x;\n    }\n};\n</code></pre>\n", "OwnerUserId": "544621", "PostTypeId": "2", "Id": "7049591", "Score": "2", "CreationDate": "2011-08-13T09:24:58.177", "LastActivityDate": "2011-08-13T09:24:58.177"}, "7049624": {"ParentId": "7049528", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>One of the times it matters is when you are giving a local variable the same name as a class member. For example:</p>\n<pre><code>class Example {\n\npublic:\n\n    int something();\n    int somethingElse();\n\n}\n\n\nint Example::somethingElse() {\n    int something = something(); // ERROR\n    int something = this-&gt;something(); // OK\n    // ...\n}\n</code></pre>\n", "OwnerUserId": "561309", "LastEditorUserId": "561309", "LastEditDate": "2011-08-13T09:38:02.500", "Id": "7049624", "Score": "1", "CreationDate": "2011-08-13T09:30:18.430", "LastActivityDate": "2011-08-13T09:38:02.500"}, "7049539": {"ParentId": "7049528", "CommentCount": "0", "Body": "<p>No, there is no difference.<br>\nwhen you refer a member directly, the compiler actually derefers it through the <code>this</code>.</br></p>\n", "OwnerUserId": "452307", "PostTypeId": "2", "Id": "7049539", "Score": "3", "CreationDate": "2011-08-13T09:14:28.960", "LastActivityDate": "2011-08-13T09:14:28.960"}, "7049632": {"ParentId": "7049528", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>The <code>this-&gt;member</code> syntax is required if you inherit from a class template:</p>\n<pre><code>template&lt;typename T&gt;\nclass Base\n{\nprotected:\n    T x;\n};\n\ntemplate&lt;typename T&gt;\nclass Derived : Base&lt;T&gt;\n{\npublic:\n    void whatever()\n    {\n        T a = x;         // error\n        T b = this-&gt;x;   // ok\n    }\n};\n</code></pre>\n", "OwnerUserId": "252000", "LastEditorUserId": "252000", "LastEditDate": "2011-08-13T12:02:26.443", "Id": "7049632", "Score": "6", "CreationDate": "2011-08-13T09:31:36.883", "LastActivityDate": "2011-08-13T12:02:26.443"}, "7049537": {"ParentId": "7049528", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>No, it doesn't make a runtime difference, it's just syntax. The <code>this</code> pointer is still accessed in the first function, it's only specified implicitly instead of explicitly.</p>\n<p>By the way, this smells like a premature optimization - write clean code first, fast code later.</p>\n", "OwnerUserId": "391850", "LastEditorUserId": "391850", "LastEditDate": "2011-08-13T09:44:40.007", "Id": "7049537", "Score": "9", "CreationDate": "2011-08-13T09:13:40.143", "LastActivityDate": "2011-08-13T09:44:40.007"}, "7049629": {"ParentId": "7049528", "CommentCount": "0", "Body": "<p>That you can say <code>foo</code> instead of <code>this-&gt;foo</code> is just syntactic sugar. There is no difference in the compiled code. Like all syntactic sugar, a small handful decry it but most love it. To see where you stand on the issue, try using a language like perl or python that doesn't provide this syntactic sugar. Python code is peppered with <code>self.foo</code>; in perl OO code you'll see <code>self-&gt;foo</code> all over the place. It can be a bit distracting.</p>\n", "OwnerUserId": "774499", "PostTypeId": "2", "Id": "7049629", "Score": "2", "CreationDate": "2011-08-13T09:31:09.540", "LastActivityDate": "2011-08-13T09:31:09.540"}, "7049528": {"CommentCount": "0", "ViewCount": "2053", "PostTypeId": "1", "LastEditorUserId": "852604", "CreationDate": "2011-08-13T09:12:28.663", "LastActivityDate": "2011-08-13T12:02:26.443", "Title": "Is there a difference between using \"this\" pointer and not using it?", "AcceptedAnswerId": "7049548", "LastEditDate": "2011-08-13T10:25:57.220", "Id": "7049528", "Score": "11", "Body": "<p>Does using \"this\" pointer adds another operation to the program at runtime?</p>\n<p>Just to give an example to explain the question better:</p>\n<pre><code>class C\n{\npublic:\n    void set_x(int val){ x = val; }\n    void set_this_x(int val){ this-&gt;x = val; }\n\nprivate:\n    int x;\n};\n</code></pre>\n<p>Does the function \"C::set_x()\", during runtime, performs 1 less operation than \"C::set_this_x()\" ?</p>\n<p>Thanks! :-)</p>\n", "Tags": "<c++><performance><this>", "OwnerUserId": "324827", "AnswerCount": "9"}, "bq_ids": {"n4140": {"so_7049528_7049548_3": {"section_id": 6005, "quality": 0.9, "length": 9}, "so_7049528_7049548_1": {"section_id": 5891, "quality": 0.7407407407407407, "length": 40}}, "n3337": {"so_7049528_7049548_3": {"section_id": 5773, "quality": 0.9, "length": 9}, "so_7049528_7049548_1": {"section_id": 5662, "quality": 0.7407407407407407, "length": 40}}, "n4659": {"so_7049528_7049548_3": {"section_id": 7504, "quality": 0.9, "length": 9}, "so_7049528_7049548_1": {"section_id": 7374, "quality": 0.7407407407407407, "length": 40}}}, "7049548": {"ParentId": "7049528", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>There is no difference between the two member functions. It has to be, since this is what the C++ Standard (ISO/IEC 14882:2003) has to say:</p>\n<blockquote>\n<p id=\"so_7049528_7049548_0\"><strong>9.3.1 Nonstatic member functions [class.mfct.nonstatic]</strong></p>\n<p id=\"so_7049528_7049548_1\"><em>2.</em> When an <code>id-expression</code> (5.1) that is not part of a class member\n  access syntax (5.2.5) and not used to form a pointer to member (5.3.1)\n  is used in the body of a nonstatic member function of class <code>X</code> or\n  used in the <code>mem-initializer</code> for a constructor of class <code>X</code>, if name\n  lookup (3.4.1) resolves the name in the <code>id-expression</code> to a nonstatic\n  nontype member of class <code>X</code> or of a base class of <code>X</code>, the\n  <code>id-expression</code> is transformed into a class member access expression\n  (5.2.5) using <code>(*this)</code> (9.3.2) as the postfix-expression to the left\n  of the <code>.</code> operator. The member name then refers to the member of the\n  object for which the function is called.</p>\n<p id=\"so_7049528_7049548_2\"><strong>5.2.5 Class member access [expr.ref]</strong></p>\n<p id=\"so_7049528_7049548_3\"><em>3.</em> If <code>E1</code> has the type \u201cpointer to class <code>X</code>,\u201d then the expression\n  <code>E1-&gt;E2</code> is converted to the equivalent form <code>(*(E1)).E2;</code> ...</p>\n</blockquote>\n<p>So that means the following code:</p>\n<pre><code>class C\n{\npublic:\n    void set_x(int val) { x = val; }\n    void set_this_x(int val) { this-&gt;x = val; }\nprivate:\n    int x;\n};\n</code></pre>\n<p>would've been transformed to the following code according to 9.3.1/2 and 5.2.5/3:</p>\n<pre><code>class C\n{\npublic:\n    void set_x(int val)      { (*this).x = val; }   // as per 9.3.1/2\n    void set_this_x(int val) { (*(this)).x = val; } // as per 5.2.5/3\nprivate:\n    int x;\n};\n</code></pre>\n<p>To show that there really is no difference, at least for one compiler, here's a side-by-side comparison of the disassembly of the <code>C::set_x()</code> and <code>C::set_this_x()</code> function the VC++ compiler emits with optimizations disabled (<code>/Od</code>):</p>\n<pre><code>  void set_x(int val){ x = val; }      void set_this_x(int val){ this-&gt;x = val; }\npush      ebp                        push      ebp\nmov       ebp,esp                    mov       ebp,esp\nsub       esp,0CCh                   sub       esp,0CCh\npush      ebx                        push      ebx\npush      esi                        push      esi\npush      edi                        push      edi\npush      ecx                        push      ecx\nlea       edi,[ebp-0CCh]             lea       edi,[ebp-0CCh]\nmov       ecx,33h                    mov       ecx,33h\nmov       eax,0CCCCCCCCh             mov       eax,0CCCCCCCCh\nrep stos  dword ptr es:[edi]         rep stos  dword ptr es:[edi]\npop       ecx                        pop       ecx\nmov       dword ptr [ebp-8],ecx      mov       dword ptr [ebp-8],ecx\nmov       eax,dword ptr [this]       mov       eax,dword ptr [this]\nmov       ecx,dword ptr [val]        mov       ecx,dword ptr [val]\nmov       dword ptr [eax],ecx        mov       dword ptr [eax],ecx\npop       edi                        pop       edi\npop       esi                        pop       esi\npop       ebx                        pop       ebx\nmov       esp,ebp                    mov       esp,ebp\npop       ebp                        pop       ebp\nret       4                          ret       4\n</code></pre>\n<p>Note that the compiler produces <em>the exact same assembly</em> for both member functions.</p>\n", "OwnerUserId": "308661", "LastEditorUserId": "308661", "LastEditDate": "2011-08-13T10:24:20.340", "Id": "7049548", "Score": "19", "CreationDate": "2011-08-13T09:15:40.587", "LastActivityDate": "2011-08-13T10:24:20.340"}});