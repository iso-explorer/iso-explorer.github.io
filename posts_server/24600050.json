post_cb({"24600050": {"ViewCount": "801", "Body": "<p>I have a class which has a friend function declared and defined inside the class and I'm calling this function from another function within the class. Clang compiler (3.3) complains for undeclared identifier for the friend function. I have compiled this code with MSVC and gcc and it works on both compilers but now with Clang port I'm getting this problem. Here's a simplified example case of the problem:</p>\n<pre><code>class foo\n{\n  friend void bar() {}\n  void asd() {bar();}\n};\n</code></pre>\n<p>In Clang I get: <code>error : use of undeclared identifier 'bar'</code>. If I declare/define pla() outside the class, it works fine, but I have some macros which force me to define the function within the class. Is this some known issue in Clang or is Clang somehow more pedantic about the C++ name lookup while still conforming the C++ standard? Is there some known workaround for it while defining/declaring the function within the class?</p>\n", "Title": "Clang: a friend function defined within a class", "CreationDate": "2014-07-06T20:29:48.730", "LastActivityDate": "2014-08-03T09:24:05.707", "CommentCount": "7", "PostTypeId": "1", "Id": "24600050", "Score": "1", "OwnerUserId": "3716988", "Tags": "<c++><clang>", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_24600050_24600424_0": {"length": 55, "quality": 0.873015873015873, "section_id": 5485}, "so_24600050_24600138_0": {"length": 17, "quality": 0.9444444444444444, "section_id": 6690}}, "n3337": {"so_24600050_24600138_0": {"length": 17, "quality": 0.9444444444444444, "section_id": 6445}, "so_24600050_24600424_0": {"length": 59, "quality": 0.9365079365079365, "section_id": 5271}}, "n4659": {"so_24600050_24600138_0": {"length": 17, "quality": 0.9444444444444444, "section_id": 8165}, "so_24600050_24600424_0": {"length": 48, "quality": 0.7619047619047619, "section_id": 6920}}}, "24600138": {"Id": "24600138", "PostTypeId": "2", "Body": "<p>According to the C++ Standard</p>\n<blockquote>\n<p id=\"so_24600050_24600138_0\">7 Such a function is implicitly inline. A friend function defined in a\n  class is in the (lexical) scope of the class in which it is defined. A\n  friend function defined outside the class is not (3.4.1).</p>\n</blockquote>\n<p>I understand words \"lexical scope\" such a way that its name is visible in the class scope. So taking this into account it seems that there is a bug in Clang.</p>\n<p>Though I did not find the definition of the term \"lexical scope\". So this paragraph can be interpretated as that the friend function itself can access members of the class without their qualification or the way I said about above.</p>\n<p>For example such code is compiled without problem</p>\n<pre><code>struct A\n{\n    friend void f() { x = 20; }\n    static int x;\n};\n\nint A::x;\n\nint main() {}\n</code></pre>\n<p>But this one is not compiled</p>\n<pre><code>struct A\n{\n    friend void f();\n    static int x;\n};\n\nint A::x;\n\nvoid f() { x = 20; }\n\nint main() {}\n</code></pre>\n", "LastEditorUserId": "2877241", "LastActivityDate": "2014-07-06T21:14:28.470", "Score": "1", "CreationDate": "2014-07-06T20:41:31.097", "ParentId": "24600050", "CommentCount": "2", "LastEditDate": "2014-07-06T21:14:28.470", "OwnerUserId": "2877241"}, "24600424": {"Id": "24600424", "PostTypeId": "2", "Body": "<p>The relevant rule is found in \u00a77.3.1.2 [namespace.memdef]/p3:</p>\n<blockquote>\n<p id=\"so_24600050_24600424_0\">Every name first declared in a namespace is a member of that\n  namespace. If a friend declaration in a non-local class first declares\n  a class or function the friend class or function is a member of the\n  innermost enclosing namespace. The name of the friend is not found by\n  unqualified lookup (3.4.1) or by qualified lookup (3.4.3) until a\n  matching declaration is provided in that namespace scope (either\n  before or after the class definition granting friendship). If a friend\n  function is called, its name may be found by the name lookup that\n  considers functions from namespaces and classes associated with the\n  types of the function arguments (3.4.2).</p>\n</blockquote>\n<p>In other words, when a <code>friend</code> function is only defined inline inside a class and never declared outside it, the only way it can be found is through ADL, which does not apply here as <code>bar()</code> takes no arguments. There must be a matching declaration of the function in the innermost enclosing namespace before it can be found by non-ADL name lookup.</p>\n", "LastEditorUserId": "2756719", "LastActivityDate": "2014-08-03T09:24:05.707", "Score": "5", "CreationDate": "2014-07-06T21:21:42.867", "ParentId": "24600050", "CommentCount": "0", "LastEditDate": "2014-08-03T09:24:05.707", "OwnerUserId": "2756719"}});