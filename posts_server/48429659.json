post_cb({"bq_ids": {"n4140": {"so_48429659_48436333_1": {"length": 11, "quality": 1.0, "section_id": 303}}, "n3337": {"so_48429659_48436333_1": {"length": 11, "quality": 1.0, "section_id": 294}}, "n4659": {"so_48429659_48436333_1": {"length": 11, "quality": 1.0, "section_id": 310}}}, "48436333": {"Id": "48436333", "PostTypeId": "2", "Body": "<p>As n.m. pointed out in the comment, the reason is that type <code>T*</code> cannot be deduced from type <code>char (&amp;buf)[invented_N]</code>.</p>\n<p>In <code>is_template_II_more_specialized</code>, an extra array-to-pointer conversion is applied according to <a href=\"http://eel.is/c++draft/temp.fct.spec#temp.deduct.call-2.1\" rel=\"nofollow noreferrer\">[temp.deduct.call]/2.1</a>:</p>\n<blockquote>\n<p id=\"so_48429659_48436333_0\">If P is not a reference type: </p>\n<ul>\n<li><p id=\"so_48429659_48436333_1\">If A is an array type, the pointer type produced by the array-to-pointer standard conversion is used in place of A for type deduction; otherwise,</p></li>\n<li><p id=\"so_48429659_48436333_2\">...</p></li>\n</ul>\n</blockquote>\n<p>This rule only applies for deducing template arguments <strong>from a function call</strong>. For deducing template arguments <strong>during partial ordering</strong>, there is no such conversion applying.</p>\n<p><sub> Conversions that can be applied during partial ordering are described in [temp.deduct.partial]/<a href=\"http://eel.is/c++draft/temp.deduct.partial#5\" rel=\"nofollow noreferrer\">5</a>,<a href=\"http://eel.is/c++draft/temp.deduct.partial#6\" rel=\"nofollow noreferrer\">6</a>,<a href=\"http://eel.is/c++draft/temp.deduct.partial#7\" rel=\"nofollow noreferrer\">7</a>. </sub></p>\n", "LastEditorUserId": "5376789", "LastActivityDate": "2018-01-25T08:45:07.167", "Score": "2", "CreationDate": "2018-01-25T05:42:07.883", "ParentId": "48429659", "CommentCount": "2", "OwnerUserId": "5376789", "LastEditDate": "2018-01-25T08:45:07.167"}, "48429659": {"ViewCount": "164", "Body": "<p><sub> In reference to <a href=\"https://stackoverflow.com/questions/48405963/why-c-template-accepting-array-is-not-more-specialized-than-one-accepting-poin\">this question</a>, which has indeed the same title but for which I found an answer in the standard. I have continued to dig the subject and finaly find out an example code for which this answer does not apply.</sub></p>\n<p>Let's consider this piece of code:</p>\n<pre><code>template&lt;class T&gt; void func(T* buf);           //template I\ntemplate&lt;size_t N&gt; void func(char (&amp;buf) [N]); //template II\n\nvoid g(char (&amp;buf)[3])\n   {\n   func(buf) //Error: ambiguous function call (Clang, GCC, ICC, MSVC)\n   }\n</code></pre>\n<p>According to the partial ordering rules in <a href=\"https://timsong-cpp.github.io/cppwp/n4659/temp.func.order\" rel=\"noreferrer\">[temp.func.order]</a> and <a href=\"https://timsong-cpp.github.io/cppwp/n4659/temp.deduct.partial\" rel=\"noreferrer\">[temp.deduct.partial]</a>, <em>template II</em> shall be more specialized than <em>template I</em> if one interpreted this rules through the execution of this piece of code:</p>\n<pre><code>template &lt;class T&gt; void func1(T* buf) {}\ntemplate &lt;std::size_t N&gt; void func2(char (&amp;buf)[N]) {}\n\nstruct invented_T{};\nconstexpr std::size_t invented_N=42;\n\nvoid is_template_I_more_specialized(invented_T* buf)\n  {\n  func2(buf);\n  //DO NOT COMPILE\n  // =&gt; template I is not more specialized than func2\n  }\n\nvoid is_template_II_more_specialized(char (&amp;buf)[invented_N])\n  {\n  func1(buf);\n  //DO COMPILE\n  // =&gt; template II is more specialized than func1\n  }\n</code></pre>\n<p>So according to this interpretation, <em>template II</em> should be <em>more specialized</em>. Why would it not be the case?</p>\n", "AcceptedAnswerId": "48436333", "Title": "Why C++ template accepting array is not more specialized than one accepting pointer (bis)?", "CreationDate": "2018-01-24T18:50:42.367", "LastActivityDate": "2018-01-25T08:45:07.167", "CommentCount": "10", "LastEditDate": "2018-01-24T18:55:51.117", "PostTypeId": "1", "LastEditorUserId": "5632316", "Id": "48429659", "Score": "6", "OwnerUserId": "5632316", "Tags": "<c++><templates><language-lawyer><partial-ordering>", "AnswerCount": "1"}});