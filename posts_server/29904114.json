post_cb({"29904114": {"CommentCount": "0", "AcceptedAnswerId": "29904347", "CreationDate": "2015-04-27T19:15:25.973", "LastActivityDate": "2015-04-28T19:33:56.613", "PostTypeId": "1", "ViewCount": "242", "FavoriteCount": "1", "Title": "Can't understand the declaration #3 in the Example of [basic.link]/6 C++14", "Id": "29904114", "Score": "12", "Body": "<p>[basic.link]/6</p>\n<blockquote>\n<p id=\"so_29904114_29904114_0\">The name of a function declared in block scope and the name of a\n  variable declared by a block scope <code>extern</code> declaration have linkage.\n  If there is a <strong>visible</strong> declaration of an entity with linkage having the\n  same name and type, ignoring entities declared outside the innermost\n  enclosing namespace scope, the block scope declaration declares that\n  same entity and receives the linkage of the previous declaration. If\n  there is more than one such matching entity, the program is\n  ill-formed. Otherwise, if no matching entity is found, the block scope\n  entity receives external linkage.[ Example:</p>\n<pre><code>static void f();\nstatic int i = 0; // #1\nvoid g() {\n    extern void f(); // internal linkage\n    int i; // #2 i has no linkage\n    {\n        extern void f(); // internal linkage\n        extern int i; // #3 external linkage\n    }\n}\n</code></pre>\n<p id=\"so_29904114_29904114_1\">There are three objects named <code>i</code> in this program. The object with internal linkage introduced by the declaration in global scope (line #1), the object with automatic storage duration and no linkage introduced by the declaration on line #2, and the object with <strong>static storage duration and external linkage</strong> introduced by the declaration on line #3. \u2014end example ]</p>\n</blockquote>\n<p>I have two comments about this paragraph:</p>\n<ol>\n<li>The <code>static int i = 0;</code>declaration in the global scope is <strong>not</strong> visible inside the block containing the declaration <code>extern int i;</code> (#3). Therefore we can only say that this latter declaration has external linkage, i.e., we can't associate it with declaration #1.</li>\n<li>Otherwise, if the declaration <code>static int i;</code> is considered visible by the declaration #3, than according to the text in the paragraph, the block scope declaration declares the same entity and receives the linkage of the previous declaration, that is, internal linkage, and not external linkage, as stated in the Example.</li>\n</ol>\n<p>What am I missing here? </p>\n", "Tags": "<c++><declaration><language-lawyer><c++14><extern>", "OwnerUserId": "4470935", "AnswerCount": "1"}, "29904347": {"ParentId": "29904114", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>This is subject to <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_active.html#426\" rel=\"nofollow\">active issue 426</a> which says:</p>\n<blockquote>\n<p id=\"so_29904114_29904347_0\">An example in 3.5 [basic.link] paragraph 6 creates two file-scope\n  variables with the same name, one with internal linkage and one with\n  external.</p>\n<pre><code>static void f();\nstatic int i = 0;                       //1\nvoid g() {\n      extern void f();                // internal linkage\n      int i;                          //2: i has no linkage\n      {\n              extern void f();        // internal linkage\n              extern int i;           //3: external linkage\n      }\n}  \n</code></pre>\n<p id=\"so_29904114_29904347_1\">Is this really what we want? C99 has 6.2.2.7/7, which gives undefined\n  behavior for having an identifier appear with internal and external\n  linkage in the same translation unit. C++ doesn't seem to have an\n  equivalent.</p>\n</blockquote>\n<p>The original proposal was to make it undefined behavior:</p>\n<blockquote>\n<p id=\"so_29904114_29904347_2\">We agree that this is an error. We propose to leave the example but\n  change the comment to indicate that line //3 has undefined behavior,\n  and elsewhere add a normative rule giving such a case undefined\n  behavior.</p>\n</blockquote>\n<p>but the last two comments say:</p>\n<blockquote>\n<p id=\"so_29904114_29904347_3\">According to 3.5 [basic.link] paragraph 9, the two variables with\n  linkage in the proposed example are not \u201cthe same entity\u201d because they\n  do not have the same linkage. Some other formulation will be needed to\n  describe the relationship between those two variables.</p>\n</blockquote>\n<p>and:</p>\n<blockquote>\n<p id=\"so_29904114_29904347_4\">The CWG decided that it would be better to make a program with this\n  kind of linkage mismatch ill-formed instead of having undefined\n  behavior.</p>\n</blockquote>\n<p>The latest comments did not propose a new wording and it has not been updated since 2006, so at best we can say the current thinking is that this is ill-formed.</p>\n<p>For reference the draft C99 standard <code>6.2.2.7/7</code> says:</p>\n<blockquote>\n<p id=\"so_29904114_29904347_5\">If, within a translation unit, the same identifier appears with both internal and external\n  linkage, the behavior is undefined.</p>\n</blockquote>\n", "OwnerUserId": "1708801", "LastEditorUserId": "1708801", "LastEditDate": "2015-04-28T19:33:56.613", "Id": "29904347", "Score": "9", "CreationDate": "2015-04-27T19:29:40.527", "LastActivityDate": "2015-04-28T19:33:56.613"}, "bq_ids": {"n4140": {"so_29904114_29904114_0": {"section_id": 7139, "quality": 0.9672131147540983, "length": 59}, "so_29904114_29904114_1": {"section_id": 7139, "quality": 0.90625, "length": 29}, "so_29904114_29904347_5": {"section_id": 7043, "quality": 0.5833333333333334, "length": 7}}, "n3337": {"so_29904114_29904114_0": {"section_id": 6883, "quality": 0.9672131147540983, "length": 59}, "so_29904114_29904114_1": {"section_id": 6883, "quality": 0.90625, "length": 29}, "so_29904114_29904347_5": {"section_id": 6788, "quality": 0.5833333333333334, "length": 7}}, "n4659": {"so_29904114_29904114_0": {"section_id": 8640, "quality": 0.9672131147540983, "length": 59}, "so_29904114_29904347_5": {"section_id": 8640, "quality": 0.6666666666666666, "length": 8}}}});