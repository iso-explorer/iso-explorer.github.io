post_cb({"16698905": {"ParentId": "16698813", "CommentCount": "5", "Body": "<p>That's not even valid C++ <em>syntax</em>.</p>\n", "OwnerUserId": "596781", "PostTypeId": "2", "Id": "16698905", "Score": "1", "CreationDate": "2013-05-22T18:16:33.403", "LastActivityDate": "2013-05-22T18:16:33.403"}, "16698813": {"CommentCount": "0", "ViewCount": "251", "PostTypeId": "1", "LastEditorUserId": "203458", "CreationDate": "2013-05-22T18:11:33.367", "LastActivityDate": "2013-05-30T19:18:37.753", "Title": "function call with default parameter", "AcceptedAnswerId": "16699002", "LastEditDate": "2013-05-30T19:17:01.823", "Id": "16698813", "Score": "4", "Body": "<p>I wrote an examination about C++ programming. There was one question where I and my professor didn't agree. The question was, does the following function work or not:</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nvoid f(int=4, long=10, double=3.14);\n\nint main( int argc , char ** argv )\n{\n    f( , ,8);\n      return EXIT_SUCCESS;\n}\n\nvoid f(int i, long l, double d) {\n    cout &lt;&lt; i &lt;&lt; \" \" &lt;&lt; \" \" &lt;&lt; l &lt;&lt; \" \" &lt;&lt; d;\n}\n</code></pre>\n<p>I said it would not work, but my professor said it will definitely work because of the default parameter in the function declaration. I tried it with MSVC and it didn't work. Is that compiler-specific? How can I convince my professor it doesn't work in any compiler, to raise my mark in the examination?</p>\n", "Tags": "<c++><c++11><function-call><default-parameters>", "OwnerUserId": "2372782", "AnswerCount": "4"}, "16698959": {"ParentId": "16698813", "CommentCount": "1", "Body": "<p>From the Standard (emphasis mine, note particularly the word <strong>trailing</strong>) :</p>\n<blockquote>\n<p id=\"so_16698813_16698959_0\">8.3.6 Default arguments [dcl.fct.default]</p>\n<ol>\n<li><p id=\"so_16698813_16698959_1\">If an initializer-clause is specified in a parameter-declaration this initializer-clause is used as a default argument. <strong>Default arguments will be used in calls where trailing arguments are missing.</strong></p></li>\n<li><p id=\"so_16698813_16698959_2\">[ Example: the declaration</p></li>\n</ol>\n<p id=\"so_16698813_16698959_3\"><code>void point(int = 3, int = 4);</code></p>\n<p id=\"so_16698813_16698959_4\">declares a function that can be called with zero, one, or two arguments of type int. It can be called in any of these ways:</p>\n<pre><code>point(1,2); point(1); point();\n</code></pre>\n<p id=\"so_16698813_16698959_5\">The last two calls are equivalent to <code>point(1,4)</code> and <code>point(3,4)</code>, respectively.</p>\n<p id=\"so_16698813_16698959_6\">\u2014 end example ]</p>\n</blockquote>\n<p>Enjoy getting your points back. ;)</p>\n", "OwnerUserId": "2070725", "PostTypeId": "2", "Id": "16698959", "Score": "4", "CreationDate": "2013-05-22T18:18:55.820", "LastActivityDate": "2013-05-22T18:18:55.820"}, "16698945": {"ParentId": "16698813", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>It's probably because it only works for omitted trailing parameters, as said by <a href=\"http://msdn.microsoft.com/en-us/library/91563f79%28v=vs.80%29.aspx\" rel=\"nofollow\">msdn</a>. Try calling the function like this:</p>\n<pre><code>f(); // should use all default values for arguments\nf(3); // should use 3 for the first, default for the last two \nf(2, 5); // uses 2 for first, 5 for second, default for last\nf(5, 6, 3.4); // does not use any default values\n</code></pre>\n", "OwnerUserId": "2152957", "LastEditorUserId": "203458", "LastEditDate": "2013-05-30T19:18:37.753", "Id": "16698945", "Score": "1", "CreationDate": "2013-05-22T18:18:19.407", "LastActivityDate": "2013-05-30T19:18:37.753"}, "16699002": {"ParentId": "16698813", "CommentCount": "2", "Body": "<p>To begin with, you're right, the professor is wrong. And the fact that he claims that this should work (when it's trivial to show that it doesn't) means he probably shouldn't be teaching C++. But how to show him?</p>\n<p>Just try to compile it with at least two different compilers. If both fail to compile it, then there's a very good chance it's not valid code. That's the fastest way.</p>\n<p>If that fails, quote the C++ standard. Here's the syntax for a call expression, as described in [expr.post]p1 and following the non-terminal references:</p>\n<pre><code>postfix-expression:\n    ...\n    postfix-expression ( expression-list[opt] )\n\nexpression-list:\n    initializer-list\n\ninitializer-list: ([dcl.init]p1)\n    initializer-clause ...[opt]\n    initializer-list , initializer-clause ...[opt]\n\ninitializer-clause:\n    assignment-expression\n    braced-init-list\n\nbraced-init-list:\n    { initializer-list ,[opt] }\n    { }\n</code></pre>\n<p>I'm not going to list assignment-expression, but note that an expression cannot ever be nothing, there has to be at least one token. Which means that an initializer-clause can never be nothing, and thus there always has to be something between the commas in the function arguments.</p>\n", "OwnerUserId": "8922", "PostTypeId": "2", "Id": "16699002", "Score": "6", "CreationDate": "2013-05-22T18:21:34.110", "LastActivityDate": "2013-05-22T18:21:34.110"}, "bq_ids": {"n4140": {"so_16698813_16698959_5": {"section_id": 3253, "quality": 0.875, "length": 7}, "so_16698813_16698959_4": {"section_id": 3253, "quality": 1.0, "length": 13}, "so_16698813_16698959_1": {"section_id": 3252, "quality": 1.0, "length": 14}}, "n3337": {"so_16698813_16698959_5": {"section_id": 3125, "quality": 0.875, "length": 7}, "so_16698813_16698959_4": {"section_id": 3125, "quality": 1.0, "length": 13}, "so_16698813_16698959_1": {"section_id": 3124, "quality": 1.0, "length": 14}}, "n4659": {"so_16698813_16698959_5": {"section_id": 4011, "quality": 0.875, "length": 7}, "so_16698813_16698959_4": {"section_id": 4011, "quality": 1.0, "length": 13}, "so_16698813_16698959_1": {"section_id": 4010, "quality": 1.0, "length": 14}}}});