post_cb({"bq_ids": {"n4140": {"so_3698043_3698139_0": {"length": 15, "quality": 0.8823529411764706, "section_id": 5910}}, "n3337": {"so_3698043_3698139_0": {"length": 15, "quality": 0.8823529411764706, "section_id": 5682}}, "n4659": {"so_3698043_3698139_0": {"length": 14, "quality": 0.8235294117647058, "section_id": 7392}}}, "3698139": {"Id": "3698139", "PostTypeId": "2", "Body": "<p><strong>Static variable in a header file:</strong> </p>\n<p>say <code>'common.h'</code> has</p>\n<pre><code>static int zzz;\n</code></pre>\n<p>This variable <code>'zzz'</code> has internal linkage (This same variable can not be accessed in other translation units). Each translation unit which includes <code>'common.h'</code> has it's own unique object of name <code>'zzz'</code>.</p>\n<p><strong>Static variable in a class:</strong></p>\n<p>Static variable in a class is not a part of the subobject of the class. There is only one copy of a static data member shared by all the objects of the class.</p>\n<blockquote>\n<p id=\"so_3698043_3698139_0\">$9.4.2/6 - \"Static data members of a\n  class in namespace scope have external\n  linkage (3.5).A local class shall not\n  have static data members.\"</p>\n</blockquote>\n<p>So let's say <code>'myclass.h'</code> has</p>\n<pre><code>struct myclass{\n   static int zzz;        // this is only a declaration\n};\n</code></pre>\n<p>and <code>myclass.cpp</code> has </p>\n<pre><code>#include \"myclass.h\"\n\nint myclass::zzz = 0           // this is a definition, \n                               // should be done once and only once\n</code></pre>\n<p>and <code>\"hisclass.cpp\"</code> has</p>\n<pre><code>#include \"myclass.h\"\n\nvoid f(){myclass::zzz = 2;}    // myclass::zzz is always the same in any \n                               // translation unit\n</code></pre>\n<p>and <code>\"ourclass.cpp\"</code> has</p>\n<pre><code>#include \"myclass.h\"\nvoid g(){myclass::zzz = 2;}    // myclass::zzz is always the same in any \n                               // translation unit\n</code></pre>\n<p>So, class static members are not limited to only 2 translation units. They need to be defined only once in any one of the translation units.</p>\n<blockquote>\n<p id=\"so_3698043_3698139_1\">Note: usage of 'static' to declare\n  file scope variable is deprecated and\n  unnamed namespace is a superior\n  alternate</p>\n</blockquote>\n", "LastEditorUserId": "215546", "LastActivityDate": "2013-04-30T07:08:04.857", "Score": "38", "CreationDate": "2010-09-13T06:09:38.643", "ParentId": "3698043", "CommentCount": "4", "OwnerUserId": "418110", "LastEditDate": "2013-04-30T07:08:04.857"}, "3698179": {"Id": "3698179", "PostTypeId": "2", "Body": "<p>Excuse me when I answer your questions out-of-order, it makes it easier to understand this way.</p>\n<blockquote>\n<p id=\"so_3698043_3698179_0\">When static variable is declared in a header file is its scope limited to .h file or across all units.</p>\n</blockquote>\n<p>There is no such thing as a \"header file scope\". The header file gets <em>included</em> into source files. The translation unit is the source file <em>including</em> the text from the header files. Whatever you write in a header file gets <em>copied</em> into each including source file.</p>\n<p>As such, a static variable declared in a header file is like a static variable in each individual source file.</p>\n<p>Since declaring a variable <code>static</code> this way means internal linkage, every translation unit <code>#include</code>ing your header file gets its <strong>own</strong>, <strong>individual</strong> variable (which is not visible outside your translation unit). This is usually not what you want.</p>\n<blockquote>\n<p id=\"so_3698043_3698179_1\">I would like to know what is the difference between static variables in a header file vs declared in a class.</p>\n</blockquote>\n<p>In a class declaration, <code>static</code> means that all instances of the class <em>share</em> this member variable; i.e., you might have hundreds of objects of this type, but whenever one of these objects refers to the <code>static</code> (or \"class\") variable, it's the same value for all objects. You could think of it as a \"class global\".</p>\n<blockquote>\n<p id=\"so_3698043_3698179_2\">Also generally static variable is initialized in .cpp file when declared in a class right ?</p>\n</blockquote>\n<p>Yes, <em>one</em> (and only <em>one</em>) translation unit must initialize the class variable.</p>\n<blockquote>\n<p id=\"so_3698043_3698179_3\">So that does mean static variable scope is limited to 2 compilation units ?</p>\n</blockquote>\n<p>As I said:</p>\n<ul>\n<li>A header is not a compilation unit,</li>\n<li><code>static</code> means completely different things depending on context.</li>\n</ul>\n<p>Global <code>static</code> limits scope to the translation unit. Class <code>static</code> means global to all instances.</p>\n<p>I hope this helps.</p>\n<p><strong>PS:</strong> Check the last paragraph of Chubsdad's answer, about how you shouldn't use <code>static</code> in C++ for indicating internal linkage, but anonymous namespaces. (Because he's right. ;-) )</p>\n", "LastEditorUserId": "60281", "LastActivityDate": "2010-09-13T07:32:56.180", "Score": "62", "CreationDate": "2010-09-13T06:19:47.763", "ParentId": "3698043", "CommentCount": "4", "OwnerUserId": "60281", "LastEditDate": "2010-09-13T07:32:56.180"}, "3698163": {"Id": "3698163", "PostTypeId": "2", "Body": "<p>A static variable declared in a header file outside of the class would be <code>file-scoped</code> in every .c file which includes the header. That means separate copy of a variable with same name is accessible in each of the .c files where you include the header file.</p>\n<p>A static class variable on the other hand is <code>class-scoped</code> and the same static variable is available to every compilation unit that includes the header containing the class with static variable.</p>\n", "LastActivityDate": "2010-09-13T06:14:49.307", "CommentCount": "0", "CreationDate": "2010-09-13T06:14:49.307", "ParentId": "3698043", "Score": "12", "OwnerUserId": "440410"}, "3698043": {"ViewCount": "90619", "Body": "<p>I would like to know what is the difference between static variables in a header file vs declared in a class. When static variable is declared in a header file is its scope limited to .h file or across all units. Also generally static variable is initialized in .cpp file when declared in a class right? So that does mean static variable scope is limited to 2 compilation units?</p>\n", "AcceptedAnswerId": "3698179", "Title": "Static variables in C++", "CreationDate": "2010-09-13T05:43:24.917", "Id": "3698043", "CommentCount": "2", "FavoriteCount": "17", "PostTypeId": "1", "LastEditDate": "2010-09-13T06:41:46.773", "LastEditorUserId": "50846", "LastActivityDate": "2017-03-30T07:45:51.060", "Score": "41", "OwnerUserId": "384252", "Tags": "<c++><static><scope>", "AnswerCount": "3"}});