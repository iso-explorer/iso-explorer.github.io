post_cb({"25964025": {"ParentId": "25963952", "CommentCount": "5", "Body": "<p>Your function does not return a value on failure. That's a bug:</p>\n<blockquote>\n<h3>6.6.3 The return statement <code>[stmt.return]</code></h3>\n<p id=\"so_25963952_25964025_0\">[...]<br>\n  Flowing off the end of a function is equivalent to a return with no value; this results in undefined\n  behavior in a value-returning function.  </br></p>\n</blockquote>\n<p>Side-observation:</p>\n<p>Instead of returning error-success with an out-parameter, consider using a <a href=\"http://en.cppreference.com/w/cpp/utility/tuple\" rel=\"nofollow\"><code>std::tuple&lt;bool, valueType&gt;</code></a>.</p>\n<p>If construction of the primary return-value on failure is not acceptable, grab a pre-release of <a href=\"http://en.cppreference.com/w/cpp/experimental/optional\" rel=\"nofollow\"><code>std::experimental::optional</code></a> (Will follow C++14 in a TC sometime).</p>\n<p>Boost-implementation already good-to-go: <a href=\"http://www.boost.org/doc/libs/master/libs/optional/doc/html/index.html\" rel=\"nofollow\">http://www.boost.org/doc/libs/master/libs/optional/doc/html/index.html</a></p>\n<p>A third alternative is throwing an exception on failure.</p>\n", "OwnerUserId": "3204551", "PostTypeId": "2", "Id": "25964025", "Score": "0", "CreationDate": "2014-09-21T21:25:32.747", "LastActivityDate": "2014-09-21T21:25:32.747"}, "bq_ids": {"n4140": {"so_25963952_25964025_0": {"section_id": 3913, "quality": 1.0, "length": 12}}, "n3337": {"so_25963952_25964025_0": {"section_id": 3773, "quality": 1.0, "length": 12}}, "n4659": {"so_25963952_25964025_0": {"section_id": 4799, "quality": 0.75, "length": 9}}}, "25963952": {"CommentCount": "4", "ViewCount": "35", "PostTypeId": "1", "LastEditorUserId": "426671", "CreationDate": "2014-09-21T21:15:50.673", "LastActivityDate": "2014-10-28T08:18:18.403", "Title": "Templated function is crashing upon returning values", "AcceptedAnswerId": "25964025", "LastEditDate": "2014-10-28T08:18:18.403", "Id": "25963952", "Score": "0", "Body": "<p>I have created a double-linked list templated class called Map which takes in a struct called MapItem that has two templated variables (key and value), and performs certain functions on them. As of now, all of my functions work except this function called get which takes in a key and boolean variable as parameters and either: returns the value associated with the key and sets the boolean variable to true if the key is found, OR does not return anything and sets the boolean variable to false. When I call this function in main it continually crashes and my mind is stumped on what is wrong. Let me know what you guys think!</p>\n<pre><code>template &lt;class keyType, class valueType&gt;\nvalueType Map&lt;keyType, valueType&gt;::get(keyType key, bool &amp; success) const\n{\n    if(sizeList == 0) //if the list is empty, set success to false since there is nothing to return\n        success = false;\n    else if(sizeList == 1) //if one item, check it to see if it's the one we're looking for\n    {\n        if(head-&gt;key == key) //if it is the item, return the value\n        {\n            success = true;\n            return head-&gt;value;\n        }\n        else\n            success = false;\n    }\n    else //if the size of the list is greater than 1, increment through it\n    {\n        int i = 1; \n        struct MapItem&lt;keyType, valueType&gt; *temp = head; //store head in temp as the first item to check and increment through all the items\n\n        while(i &lt;= sizeList)\n        {\n            if(temp-&gt;key == key) //if we found it\n            {\n                success = true;\n                return temp-&gt;value;\n            }\n\n            temp = temp-&gt;next; //get the next item\n            i++;\n        }\n    }\n    success = false;\n}\n</code></pre>\n<p>And here is the struct MapItem I was talking about that is used in the Map class to store items:</p>\n<pre><code>template &lt;class keyType, class valueType&gt;\nstruct MapItem\n{\n  keyType key;\n  valueType value;\n  MapItem&lt;keyType, valueType&gt; *prev, *next;\n};\n</code></pre>\n<p>And yes, I know that the function get does not have a return statement that is needed if it does not actually find the key but our professor said it should be OKAY but at this point I'm starting to think otherwise. Could an error exception be implemented to handle this? Thanks.</p>\n", "Tags": "<c++><pointers><memory><get><crash>", "OwnerUserId": "3367265", "AnswerCount": "1"}});