post_cb({"2320948": {"ParentId": "2319663", "CommentCount": "3", "Body": "<p>It compiles because the language standard specifically says it must compile. There's no other answer. This is one of the bits that make C++ different from C. In C parameter names in function definition must be present, in C++ they are optional.</p>\n<p>I actually wonder why you ask your \"why\" question. Do you see anything unnatural, unusual or illogical in this behavior?</p>\n", "OwnerUserId": "187690", "PostTypeId": "2", "Id": "2320948", "Score": "2", "CreationDate": "2010-02-23T19:09:57.483", "LastActivityDate": "2010-02-23T19:09:57.483"}, "2319663": {"CommentCount": "0", "AcceptedAnswerId": "2319692", "CreationDate": "2010-02-23T16:08:08.113", "LastActivityDate": "2017-10-06T09:16:45.043", "PostTypeId": "1", "ViewCount": "10608", "FavoriteCount": "9", "Title": "Why does C++ code missing a formal argument name in a function definition compile without warnings?", "Id": "2319663", "Score": "30", "Body": "<p>While getting started with some VS2005-generated MFC code, I noticed it overrode a method with something like this:</p>\n<pre><code>void OnDraw(CDC* /*pDC*/)\n{\n    ...\n    // TODO: Add your code here\n}\n</code></pre>\n<p>So of course, as soon as I added something I realized I needed to un-comment the pDC formal argument in order to compile, but I'm confused as to how/why a C++ function can compile (with no warnings) when the formal argument only has a type and not a name:</p>\n<pre><code>void foo(int)\n{\n    int x = 3;\n}\nint main()\n{\n    foo(5);\n    return 0;\n}\n</code></pre>\n<p>Shouldn't this generate at least a warning (with -Wall or /W4)? It doesn't seem to. Am I missing something? Is there a case where this is useful or is it just because the compiler can't tell the difference between a function declaration (only types required) and a definition (fully specified) until after the line has been processed?</p>\n", "Tags": "<c++><compiler-warnings>", "OwnerUserId": "2072", "AnswerCount": "4"}, "2319692": {"ParentId": "2319663", "PostTypeId": "2", "CommentCount": "2", "CreationDate": "2010-02-23T16:10:27.957", "Score": "37", "LastEditorUserId": "12711", "LastEditDate": "2010-02-23T16:17:01.950", "Id": "2319692", "OwnerUserId": "12711", "Body": "<p>Because sometimes you have a parameter that's required by an interface but the function doesn't use it. Maybe the parameter is no longer necessary, is only necessary in other functions that must use the same signature (especially so they can be called through pointers) or the functionality hasn't been implemented yet.  Having parameters that aren't used can be particularly common in generated or framework code for this reason (and that's probably why the MFC generated code has the name commented out).</p>\n<p>As to why there's no warning - I guess it's because whether this is a problem is a subjective thing and other people (particularly compiler implementers) don't see it as a problem. Once you actually go to use the parameter, you'll get the compiler to complain if you forget to uncomment the name so you get the compiler complaining only when you really need it to (the compiler's version of the agile YAGNI: \"You Aren\u2019t Gonna Neet It\" philosophy).</p>\n<p>The opposite does seem to generally occur when you crank up warnings - named parameters that aren't used generate warnings - again that's probably why the generated function has the name commented out.</p>\n", "LastActivityDate": "2010-02-23T16:17:01.950"}, "2319682": {"ParentId": "2319663", "PostTypeId": "2", "CommentCount": "8", "CreationDate": "2010-02-23T16:09:31.963", "Score": "14", "LastEditorUserId": "102", "LastEditDate": "2010-02-23T19:06:30.697", "Id": "2319682", "OwnerUserId": "102", "Body": "<p>The most common reason I've seen is to suppress the unused variable warnings the compiler will throw up for:</p>\n<pre><code>#include &lt;iostream&gt;\n\nvoid foo(int source)\n{\n  std::cout &lt;&lt; \"foo()\" &lt;&lt; std::endl;\n}\n\nint main()\n{\n  foo(5);\n  return 0;\n}\n</code></pre>\n<p>gcc says: <code>main.cc:3: warning: unused parameter 'source'</code></p>\n<p>There are two common ways to get rid of the warning: comment the variable name or remove it entirely:</p>\n<pre><code>void foo(int /*source*/)\n{\n  std::cout &lt;&lt; \"foo()\" &lt;&lt; std::endl;\n}\n</code></pre>\n<p>versus</p>\n<pre><code>void foo(int)\n{\n  std::cout &lt;&lt; \"foo()\" &lt;&lt; std::endl;\n}\n</code></pre>\n<p>I highly recommend commenting over removing.  Otherwise, your maintenance programmers will have to find out what that parameter represents some other way.</p>\n<p>Qt (and probably other frameworks) provides a macro that suppresses the warning without needed to comment or remove the variable name: <code>Q_UNUSED(&lt;variable&gt;)</code>:</p>\n<pre><code>void foo(int source)\n{\n  Q_UNUSED(source); // Removed in version 4.2 due to locusts\n  std::cout &lt;&lt; \"foo()\" &lt;&lt; std::endl;\n}\n</code></pre>\n<p>This lets you call out in the function body that the variable is not used, and gives a great place to document <strong>why</strong> it isn't used.</p>\n", "LastActivityDate": "2010-02-23T19:06:30.697"}, "31159628": {"ParentId": "2319663", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2015-07-01T11:10:04.347", "Score": "4", "LastEditorUserId": "895245", "LastEditDate": "2017-10-06T09:16:45.043", "Id": "31159628", "OwnerUserId": "895245", "Body": "<p><strong>C++11 N3337 standard draft</strong></p>\n<p><a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf\" rel=\"nofollow noreferrer\">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf</a> says it is legal at 8.4.1/6 \n \"Function definitions &gt; In general\":</p>\n<blockquote>\n<p id=\"so_2319663_31159628_0\">Note: Unused parameters need not be named. For example,</p>\n<pre><code>void print(int a, int) {\n    std::printf(\"a = %d\\n\",a);\n}\n</code></pre>\n</blockquote>\n<p>More precisely, 8.4.1/1 says that the grammar for function definitions is</p>\n<pre><code>function-definition:\n    attribute-specifier-seqopt decl-specifier-seqopt\n    declarator virt-specifier-seqopt function-body\n</code></pre>\n<p>Then if you follow the grammar definitions, e.g. under \"Annex A Grammar summary\", you will see that the names are optional.</p>\n", "LastActivityDate": "2017-10-06T09:16:45.043"}, "bq_ids": {"n4140": {"so_2319663_31159628_0": {"section_id": 3267, "quality": 0.7142857142857143, "length": 5}}, "n3337": {"so_2319663_31159628_0": {"section_id": 3139, "quality": 0.7142857142857143, "length": 5}}, "n4659": {"so_2319663_31159628_0": {"section_id": 4025, "quality": 0.7142857142857143, "length": 5}}}});