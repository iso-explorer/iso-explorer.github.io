post_cb({"bq_ids": {"n4140": {"so_9576112_9576112_0": {"length": 33, "quality": 0.9705882352941176, "section_id": 6299}}, "n3337": {"so_9576112_9576112_0": {"length": 33, "quality": 0.9705882352941176, "section_id": 6056}}, "n4659": {"so_9576112_9576112_0": {"length": 33, "quality": 0.9705882352941176, "section_id": 7808}}}, "9576112": {"ViewCount": "3156", "Body": "<p>I was trying to compile some code that uses Boost (1.49), with Clang(&amp; libc++) from trunk.\nThe problematic code boils down to the following:</p>\n<pre><code>#include &lt;memory&gt;\n#include &lt;boost/signals2.hpp&gt;\n\nint main()\n{\n    std::shared_ptr&lt;int&gt; s;\n}\n</code></pre>\n<p>When compiled with Clang, the following message is emmited:</p>\n<pre><code>$ clang++ -I/home/alexander/usr/local/include --stdlib=libc++ -std=c++0x signals2-bug.cpp   -o signals2-bug\nsignals2-bug.cpp:6:26: error: implicit instantiation of undefined template\n      'std::shared_ptr&lt;int&gt;'\n    std::shared_ptr&lt;int&gt; s;\n                         ^\n/home/alexander/usr/local/include/boost/signals2/detail/foreign_ptr.hpp:24:30: note: \n      template is declared here\n  template&lt;typename T&gt; class shared_ptr;\n                         ^\n</code></pre>\n<p>The offending lines in boost/signals2/detail/foreign_ptr.hpp are:</p>\n<pre><code>#if !defined(BOOST_INTEL_STDCXX0X)\nnamespace std\n{\n  template&lt;typename T&gt; class shared_ptr;\n  template&lt;typename T&gt; class weak_ptr;\n}\n#endif\n</code></pre>\n<p>Now who's to blame?</p>\n<p>Two things come to mind:</p>\n<ol>\n<li>Why does the Boost.Signals header feel the need to declare an own shared_ptr? What's the gain?</li>\n<li>The line in Boost.Signals looks like a simple forward declaration. Why would that be problematic, if it comes after the template definition?</li>\n</ol>\n<p><strong>EDIT</strong></p>\n<p>This appears to be a Boost.Signals2 bug, because the declaration of things in the std:: namespace results in undefined behaviour, according to the ISO/IEC C++ 2011 Standard, section 17.6.4.2.1:</p>\n<blockquote>\n<p id=\"so_9576112_9576112_0\">The behavior of a C++ program is undefined if it adds declarations or\n  definitions to namespace std or to a    namespace within namespace std\n  unless otherwise specified. A program may add a template\n  specialization\n      for any standard library template to namespace std only if the declaration depends on a user-defined type\n       and the specialization meets the standard library requirements for the original template and is not explicitly\n      prohibited.</p>\n</blockquote>\n<p>A ticket in the Boost bug tracker has been created: <a href=\"https://svn.boost.org/trac/boost/ticket/6655\" rel=\"nofollow\">https://svn.boost.org/trac/boost/ticket/6655</a></p>\n<p>Please note, that a Clang bug also exists here: <a href=\"http://llvm.org/bugs/show_bug.cgi?id=10521\" rel=\"nofollow\">http://llvm.org/bugs/show_bug.cgi?id=10521</a> , however the implementor points to violation.</p>\n<p><strong>Follow-up for Googlers</strong>:</p>\n<p>The problem was indeed a Boost bug. This <a href=\"https://svn.boost.org/trac/boost/changeset/77289\" rel=\"nofollow\">changeset 77289</a> should fix the issue for Boost 1.50.\nThe corresponding Bug in Clang was marked invalid.</p>\n", "AcceptedAnswerId": "9576360", "Title": "implicit instantiation of undefined template: Boost Bug or Clang Bug?", "CreationDate": "2012-03-06T00:13:38.943", "Id": "9576112", "CommentCount": "9", "LastEditDate": "2014-01-26T12:58:06.840", "PostTypeId": "1", "LastEditorUserId": "1128737", "LastActivityDate": "2014-01-26T12:58:06.840", "Score": "1", "OwnerUserId": "429322", "Tags": "<c++><boost><clang><shared-ptr>", "AnswerCount": "1"}, "9576360": {"Id": "9576360", "PostTypeId": "2", "Body": "<p>The code in <code>foreign_ptr.hpp</code> is a redeclaration (if <code>shared_ptr</code> has already been defined), and as such not likely to cause problems (adding declarations to <code>std</code> is technically undefined behavior, but most compilers don't care since they don't really distinguish between standard library headers and other files).  So the error can only be caused by <code>shared_ptr</code> being actually undefined.</p>\n<p>Now <code>libc++</code> obviously has a definition <code>shared_ptr</code>, so I can only suspect some C++03 library made it to the include path somehow and got preferred over libc++.</p>\n", "LastActivityDate": "2012-03-06T00:50:29.790", "CommentCount": "3", "CreationDate": "2012-03-06T00:50:29.790", "ParentId": "9576112", "Score": "-1", "OwnerUserId": "178761"}});