post_cb({"bq_ids": {"n4140": {"so_28060247_28060247_0": {"length": 21, "quality": 1.0, "section_id": 7065}}, "n3337": {"so_28060247_28060247_0": {"length": 21, "quality": 1.0, "section_id": 6809}}, "n4659": {"so_28060247_28060247_0": {"length": 21, "quality": 1.0, "section_id": 8562}}}, "28060247": {"ViewCount": "65", "Body": "<p>The standard <code>N4296::3.3.4/1 [basic.scope.proto]</code>:</p>\n<blockquote>\n<p id=\"so_28060247_28060247_0\">In a function declaration, or in any function declarator except the\n  declarator of a function definition (8.4), names of parameters (if\n  supplied) have function prototype scope, which terminates at the end\n  of the nearest enclosing function declarator.</p>\n</blockquote>\n<p>I tried the following examples:</p>\n<p>1.</p>\n<pre><code>template&lt;const int a&gt;\nclass A{ };\n\nconst int a = 4;\n\nA&lt;a&gt; b; // OK\n\nvoid foo(const int a = 4, A&lt;a&gt;); //non-type template argument is \n                                 //not a constant expression\n</code></pre>\n<p><strong><a href=\"http://coliru.stacked-crooked.com/a/46a6c880467d005c\" rel=\"nofollow\">DEMO</a></strong></p>\n<p>2.</p>\n<pre><code>void foo(const int a = 4, int b = a); //default argument references parameter 'a'\n</code></pre>\n<p><strong><a href=\"http://coliru.stacked-crooked.com/a/d1531ea7698c51d4\" rel=\"nofollow\">DEMO</a></strong></p>\n<p>How can we use this scope's feature? What is it introduced for?</p>\n", "AcceptedAnswerId": "28060413", "Title": "How can we use function arguments within a function declaration?", "CreationDate": "2015-01-21T05:31:01.240", "Id": "28060247", "CommentCount": "0", "PostTypeId": "1", "OwnerDisplayName": "user2953119", "LastActivityDate": "2015-01-21T06:39:59.140", "Score": "1", "Tags": "<c++>", "AnswerCount": "3"}, "28061030": {"Id": "28061030", "PostTypeId": "2", "Body": "<p>To add to user657267's example, <em>trailing-return-type</em>s often depend on this feature:</p>\n<pre><code>template&lt;class A, class F&gt;\nauto foo(const A&amp; a, const F&amp; f) -&gt; decltype(f(a));\n</code></pre>\n", "LastActivityDate": "2015-01-21T06:39:59.140", "CommentCount": "0", "CreationDate": "2015-01-21T06:39:59.140", "ParentId": "28060247", "Score": "1", "OwnerUserId": "2756719"}, "28060358": {"Id": "28060358", "PostTypeId": "2", "Body": "<p>I think the point of this is to say that the following code is valid:</p>\n<pre><code>extern int somefunc(int a, char *b, int c);\nint somefunc(int, char *, int);\n\nint somefunc(int number, char *bytes, int ipv4_address)\n{\n    \u2026\n}\n</code></pre>\n<p>The name <code>a</code>, <code>b</code> and <code>c</code> lose their significance at the closing parenthesis of the <code>extern</code> declaration.  Within the declarator, the names are significant to the extent that <code>int somefunc(int a, char *a, int a);</code> is invalid because the same name <code>a</code> is used where distinct identifiers are required.</p>\n<p>The names <code>number</code>, <code>bytes</code> and <code>ipv4_address</code> do not lose their significance at the close parenthesis because that is the 'declarator of a function definition'; they become the names of variables within the function.</p>\n<p>Note that Stroustrup explicitly declined to tie parameter names in function declarations to parameter names in function definitions.  There's a section in <a href=\"http://www.stroustrup.com/dne.html\" rel=\"nofollow\">Design and Evolution of C++</a> that discusses this.</p>\n", "LastActivityDate": "2015-01-21T05:41:21.077", "CommentCount": "1", "CreationDate": "2015-01-21T05:41:21.077", "ParentId": "28060247", "Score": "3", "OwnerUserId": "15168"}, "28060413": {"Id": "28060413", "PostTypeId": "2", "Body": "<p>Here's a contrived example:</p>\n<pre><code>void foo(overly::long_type::which_should_be_a_typedef_anyway a, decltype(a) b); // fine\n\ndecltype(a) c; // oops, a not declared\n</code></pre>\n", "LastActivityDate": "2015-01-21T05:46:01.680", "CommentCount": "0", "CreationDate": "2015-01-21T05:46:01.680", "ParentId": "28060247", "Score": "4", "OwnerUserId": "657267"}});