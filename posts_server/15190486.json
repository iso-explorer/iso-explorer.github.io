post_cb({"15190614": {"ParentId": "15190486", "CommentCount": "0", "CreationDate": "2013-03-03T20:42:51.733", "OwnerUserId": "1932150", "PostTypeId": "2", "Id": "15190614", "Score": "2", "Body": "<blockquote>\n<p id=\"so_15190486_15190614_0\">Does the compiler use the copy-and-swap idiom with a unified operator= (with its strong exception-safety guarantee), or does it implement a member-wise move?</p>\n</blockquote>\n<p>Per Paragraph 12.8/15 of the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_15190486_15190614_1\">The implicitly-defined copy/move constructor for a non-union class X performs a <strong>memberwise copy/move of its bases and members</strong>. [...]</p>\n</blockquote>\n<p>Moreover, per Paragraph 12.8/28:</p>\n<blockquote>\n<p id=\"so_15190486_15190614_2\">The implicitly-defined copy/move assignment operator for a non-union class X performs <strong>memberwise copy-\n  /move assignment of its subobjects</strong>. [...]</p>\n</blockquote>\n", "LastActivityDate": "2013-03-03T20:42:51.733"}, "15190486": {"CommentCount": "0", "ViewCount": "153", "CreationDate": "2013-03-03T20:30:07.997", "LastActivityDate": "2013-03-03T20:42:51.733", "Title": "Implementation of compiler-generated moves", "AcceptedAnswerId": "15190614", "PostTypeId": "1", "Id": "15190486", "Score": "4", "Body": "<p>How are the implicitly compiler-generated move constructors and move assigment operator implemented by the compiler?</p>\n<p>Does the compiler use the copy-and-swap idiom with a unified <code>operator=</code> (with its strong exception-safety guarantee), or does it implement a member-wise move?</p>\n", "Tags": "<c++><c++11><move-semantics>", "OwnerUserId": "1629821", "AnswerCount": "2"}, "15190519": {"ParentId": "15190486", "CommentCount": "0", "CreationDate": "2013-03-03T20:32:45.043", "OwnerUserId": "981959", "PostTypeId": "2", "Id": "15190519", "Score": "4", "Body": "<p>It's a memberwise move, just as the implicitly-defined copy operations do a memberwise copy. See 12.8 [class.copy] paragraphs 15 and 25.</p>\n<p>Copy-and-swap wouldn't be possible for a non-copyable type or non-swappable type, you don't want the move operations to depend on another special member or a <code>swap</code> member that might not exist or might not work as required.</p>\n", "LastActivityDate": "2013-03-03T20:32:45.043"}, "bq_ids": {"n4140": {"so_15190486_15190614_1": {"section_id": 464, "quality": 0.9166666666666666, "length": 11}, "so_15190486_15190614_2": {"section_id": 477, "quality": 0.7857142857142857, "length": 11}}, "n3337": {"so_15190486_15190614_1": {"section_id": 455, "quality": 0.9166666666666666, "length": 11}, "so_15190486_15190614_2": {"section_id": 468, "quality": 0.7857142857142857, "length": 11}}, "n4659": {"so_15190486_15190614_1": {"section_id": 487, "quality": 0.9166666666666666, "length": 11}, "so_15190486_15190614_2": {"section_id": 500, "quality": 0.7857142857142857, "length": 11}}}});