post_cb({"bq_ids": {"n4140": {"so_27951537_27951602_0": {"length": 12, "quality": 0.5714285714285714, "section_id": 599}, "so_27951537_27951602_3": {"length": 9, "quality": 1.0, "section_id": 636}, "so_27951537_27951602_1": {"length": 6, "quality": 0.8571428571428571, "section_id": 599}, "so_27951537_27951602_2": {"length": 20, "quality": 1.0, "section_id": 599}}, "n3337": {"so_27951537_27951602_3": {"length": 9, "quality": 1.0, "section_id": 626}, "so_27951537_27951602_0": {"length": 12, "quality": 0.5714285714285714, "section_id": 589}, "so_27951537_27951602_1": {"length": 6, "quality": 0.8571428571428571, "section_id": 589}, "so_27951537_27951602_2": {"length": 20, "quality": 1.0, "section_id": 589}}, "n4659": {"so_27951537_27951602_3": {"length": 9, "quality": 1.0, "section_id": 664}, "so_27951537_27951602_0": {"length": 20, "quality": 0.9523809523809523, "section_id": 622}, "so_27951537_27951602_1": {"length": 6, "quality": 0.8571428571428571, "section_id": 622}, "so_27951537_27951602_2": {"length": 20, "quality": 1.0, "section_id": 622}}}, "27951602": {"Id": "27951602", "PostTypeId": "2", "Body": "<pre><code>return (vch, vch + size());\n</code></pre>\n<p>This uses the comma operator - long story short, write</p>\n<pre><code>return std::vector&lt;unsigned char&gt;(vch, vch + size());\n</code></pre>\n<p>or</p>\n<pre><code>std::vector&lt;unsigned char&gt; vec(vch, vch + size())\nreturn vec;\n</code></pre>\n<p>instead. (The latter is semantically equivalent but preferable in terms of readability)\nOr with C++11:</p>\n<pre><code>return {vch, vch + size()};\n</code></pre>\n<p>This does work because a braced-init-list with pointers cannot be converted to <code>initializer_list&lt;unsigned char&gt;</code>. [over.match.list]/1:</p>\n<blockquote>\n<p id=\"so_27951537_27951602_0\">When objects of non-aggregate class type <code>T</code> are list-initialized such\n  that 8.5.4 specifies that overload resolution is performed according\n  to the rules in this section, overload resolution selects the\n  constructor in two phases:</p>\n<ul>\n<li><p id=\"so_27951537_27951602_1\">Initially, the candidate functions are the initializer-list constructors (8.5.4) of the class <code>T</code> [..]</p></li>\n<li><p id=\"so_27951537_27951602_2\"><strong>If no viable initializer-list constructor is found, overload resolution is performed again, where the\n     candidate functions are all the constructors of the class <code>T</code> and the argument list consists of the elements\n    of the initializer list.</strong></p></li>\n</ul>\n</blockquote>\n<p>Now, is there a viable initializer-list constructor? [over.ics.list]:</p>\n<blockquote>\n<ol start=\"4\">\n<li>Otherwise, if the parameter type is <code>std::initializer_list&lt;X&gt;</code> <strong>and all the elements of the initializer list can be implicitly converted\n  to <code>X</code></strong>, [..]</li>\n</ol>\n<p id=\"so_27951537_27951602_3\">\u00a010. In all cases other than those enumerated above, <strong>no conversion is possible.</strong></p>\n</blockquote>\n<p>There is clearly no implicit conversion from <code>unsigned char*</code> to <code>unsigned char</code>, so the iterator-pair constructor template is chosen. <a href=\"http://coliru.stacked-crooked.com/a/8ffe0704f82d9574\" rel=\"noreferrer\"><strong>Demo</strong></a>.</p>\n", "LastEditorUserId": "3647361", "LastActivityDate": "2015-01-14T21:21:59.500", "Score": "9", "CreationDate": "2015-01-14T20:12:55.887", "ParentId": "27951537", "CommentCount": "5", "OwnerUserId": "3647361", "LastEditDate": "2015-01-14T21:21:59.500"}, "27951537": {"ViewCount": "3352", "Body": "<p>I am trying to pass this to another part of my project that requires it be a vector   </p>\n<pre><code>unsigned char vch[65];\n\nunsigned int size() const { return GetLen(vch[0]); }\nconst unsigned char* begin() const { return vch; }\nconst unsigned char* end() const { return vch + size(); \n\n\nstd::vector&lt;unsigned char&gt; Raw() const\n{\n        return (vch, vch + size());\n}\n</code></pre>\n<p>I get the error </p>\n<pre><code> could not convert '(const unsigned char*)(&amp;((const CPubKey*)this)-\nCPubKey::vch)' from 'const unsigned char*' to 'std::vector&lt;unsigned char*&gt;'\n</code></pre>\n", "AcceptedAnswerId": "27951602", "Title": "How to convert unsigned char[] to std::vector<unsigned char>", "CreationDate": "2015-01-14T20:09:23.067", "Id": "27951537", "CommentCount": "4", "LastEditDate": "2015-01-14T20:12:00.247", "PostTypeId": "1", "LastEditorUserId": "3647361", "LastActivityDate": "2015-01-14T21:21:59.500", "Score": "3", "OwnerUserId": "4454712", "Tags": "<c++>", "AnswerCount": "2"}, "27951788": {"Id": "27951788", "PostTypeId": "2", "Body": "<p>It is may not answering directly to the answer.</p>\n<p>But the question is why to use a vector when you can use  <code>std::string</code>, or <code>std::basic_string&lt;unsigned char&gt;</code> instead of std::vector, like this:</p>\n<pre><code>unsigned char a[]=\"1234\";\nstd::basic_string&lt;unsigned char&gt; v=a;\n</code></pre>\n", "LastActivityDate": "2015-01-14T20:25:01.880", "CommentCount": "1", "CreationDate": "2015-01-14T20:25:01.880", "ParentId": "27951537", "Score": "0", "OwnerUserId": "2852165"}});