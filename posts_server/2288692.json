post_cb({"2288692": {"ViewCount": "5837", "Body": "<p>Here's the setup.</p>\n<p>I have a C++ program which calls several functions, all of which potentially throw the same exception set, and I want the same behaviour for the exceptions in each function\n(e.g. print error message &amp; reset all the data to the default for exceptionA; simply print for exceptionB; shut-down cleanly for all other exceptions).</p>\n<p>It seems like I should be able to set the catch behaviour to call a private function which simply rethrows the error, and performs the catches, like so:</p>\n<pre><code>void aFunction()\n{\n    try{ /* do some stuff that might throw */ }\n    catch(...){handle();}\n}\n\nvoid bFunction()\n{\n    try{ /* do some stuff that might throw */ }\n    catch(...){handle();}\n}\n\nvoid handle()\n{\n    try{throw;}\n    catch(anException)\n    {\n        // common code for both aFunction and bFunction\n        // involving the exception they threw\n    }\n    catch(anotherException)\n    {\n        // common code for both aFunction and bFunction\n        // involving the exception they threw\n    }\n    catch(...)\n    {\n        // common code for both aFunction and bFunction\n        // involving the exception they threw\n    }\n}\n</code></pre>\n<p>Now, what happens if \"handle\" is called outside of the exception class.\nI'm aware that this should never happen, but I'm wondering if the behaviour is undefined by the C++ standard.</p>\n", "AcceptedAnswerId": "2288727", "Title": "What happens if I use \"throw;\" without an exception to throw?", "CreationDate": "2010-02-18T12:55:06.790", "Id": "2288692", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2012-05-02T19:33:06.253", "LastEditorUserId": "995926", "LastActivityDate": "2012-05-02T19:33:06.253", "Score": "9", "OwnerUserId": "14250", "Tags": "<c++><exception><refactoring>", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_2288692_2288727_0": {"length": 8, "quality": 0.8888888888888888, "section_id": 3342}}, "n3337": {"so_2288692_2288727_0": {"length": 8, "quality": 0.8888888888888888, "section_id": 3212}}, "n4659": {"so_2288692_2288727_0": {"length": 7, "quality": 0.7777777777777778, "section_id": 7674}}}, "2288868": {"Id": "2288868", "PostTypeId": "2", "Body": "<p>Never, never, never use catch(...) as you might catch application errors that you don't want to catch, e.g. bugs, access violations (depending on how you compiled).</p>\n<p>Read the great John Robbins book (Debugging Windows Applications) in which he explains more in detail why you shouldn't do it.</p>\n", "LastActivityDate": "2010-02-18T13:27:46.217", "CommentCount": "2", "CreationDate": "2010-02-18T13:27:46.217", "ParentId": "2288692", "Score": "1", "OwnerUserId": "163551"}, "2288727": {"Id": "2288727", "PostTypeId": "2", "Body": "<p>If <code>handle()</code> is called outside the context of an exception, you will <code>throw</code> without an exception being handled. In this case, the standard (see section 15.5.1) specifies that</p>\n<blockquote>\n<p id=\"so_2288692_2288727_0\">If no exception is presently being handled, executing a <code>throw-expression</code> with no operand calls <code>terminate()</code>.</p>\n</blockquote>\n<p>so your application will terminate. That's probably not what you want here.</p>\n", "LastActivityDate": "2010-02-18T13:01:11.893", "CommentCount": "1", "CreationDate": "2010-02-18T13:01:11.893", "ParentId": "2288692", "Score": "16", "OwnerUserId": "75170"}, "2288708": {"Id": "2288708", "PostTypeId": "2", "Body": "<p>If you use throw inside of a catch block, it will rethrow the exception.  If you use throw outside of a catch block, it will terminate the application.</p>\n", "LastActivityDate": "2010-02-18T12:57:41.677", "CommentCount": "1", "CreationDate": "2010-02-18T12:57:41.677", "ParentId": "2288692", "Score": "5", "OwnerUserId": "3153"}});