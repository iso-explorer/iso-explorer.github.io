post_cb({"32946596": {"ParentId": "32945923", "CommentCount": "0", "Body": "<p>According to 27.7.2.2.1 [istream.formatted.reqmts] paragraph 1 the first things for the formatted input function is to construct an <code>std::istream::senty</code> object. Further processing depends on whether this object converts to <code>true</code> or <code>false</code>: nothing happens to the value if the <code>sentry</code> converts to <code>false</code>.</p>\n<p>According to 27.7.2.1.3 [istream::sentry] paragraphs 5 and 7 the <code>sentry</code> will convert to <code>false</code> if the stream's flags are not <code>std::ios_base::goodbit</code>. That is, if either a failure happend or EOF is reached the <code>sentry</code> will convert to <code>false</code>. As a result, the <code>value</code> stays at <code>5</code> when EOF is reached after skipping whitespace, assuming <code>std::ios_base::skipws</code> is set. Unsetting <code>std::ios_base::skipws</code> should result in the value becoming <code>0</code> if there is, at least, one space.</p>\n<p>Once parsing is actually done, the applies logic is defined in 22.4.2.1.2 [facet.num.get.virtuals] paragraph 3, Stage 3. The key section on the affected value is</p>\n<blockquote>\n<p id=\"so_32945923_32946596_0\">...</p>\n<p id=\"so_32945923_32946596_1\">The numeric value to be stored can be one of:</p>\n<p id=\"so_32945923_32946596_2\">\u2014 zero, if the conversion function fails to convert the entire field. <code>ios_base::failbit</code> is assigned to <code>err</code>.</p>\n<p id=\"so_32945923_32946596_3\">\u2014 the most positive representable value, if the field represents a value too large positive to be represented in <code>val</code>. <code>ios_base::failbit</code> is assigned to <code>err</code>.</p>\n<p id=\"so_32945923_32946596_4\">\u2014 the most negative representable value or zero for an unsigned integer type, if the field represents a value too large negative to be represented in <code>val</code>. <code>ios_base::failbit</code> is assigned to <code>err</code>.</p>\n<p id=\"so_32945923_32946596_5\">\u2014 the converted value, otherwise.</p>\n<p id=\"so_32945923_32946596_6\">The resultant numeric value is stored in <code>val</code>.</p>\n</blockquote>\n<p>So, the observed behavior is correct.</p>\n<p>With pre-C++11 the value was left unchanged in all cases. It was considered desirable to tell errors apart and indicate with the value which value should be represented. The discussions on how to change the behavior went on for a rather long time and were actually quite contentious.</p>\n<p>That the value isn't changed if EOF is reached before attempting a conversion may be considered an error. I don't recall that case to be considered while the change was discussed.</p>\n", "OwnerUserId": "1120273", "PostTypeId": "2", "Id": "32946596", "Score": "1", "CreationDate": "2015-10-05T10:40:52.603", "LastActivityDate": "2015-10-05T10:40:52.603"}, "32946167": {"ParentId": "32945923", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Yes, this is the correct behaviour since C++11.</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/q/19522504/560648\">istream behavior change in C++ upon failure</a></li>\n</ul>\n<p>The difference in what you're seeing is that a zero is written \"when extraction fails\", but extraction is not even attempted if EOF is already set on the stream\u2026 so nothing happens.</p>\n", "OwnerUserId": "560648", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:01:37.873", "Id": "32946167", "Score": "3", "CreationDate": "2015-10-05T10:17:27.920", "LastActivityDate": "2015-10-05T10:17:27.920"}, "32945923": {"CommentCount": "0", "ViewCount": "113", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2015-10-05T10:05:13.143", "LastActivityDate": "2015-10-05T10:40:52.603", "Title": "Value stored when istream read fails", "AcceptedAnswerId": "32946596", "LastEditDate": "2017-05-23T11:53:08.997", "Id": "32945923", "Score": "1", "Body": "<p>Sample code:</p>\n<pre><code>#include &lt;iostream&gt;\n\nint main()\n{\n    int x = 5;\n    std::cin &gt;&gt; x;\n    std::cout &lt;&lt; x &lt;&lt; '\\n';\n}\n</code></pre>\n<p>On <a href=\"https://stackoverflow.com/questions/32944448/cin-val-sometimes-reads-0-depending-on-ctrl-z\">one particular implementation</a> the following behaviour occurs:</p>\n<ul>\n<li>Input: <code>6</code>; output <code>6</code></li>\n<li>Input: <code>a</code>; output: <code>0</code></li>\n<li>Input: (end-of-file); output <code>5</code></li>\n<li>Input: (whitespace followed by end-of-file); output <code>5</code></li>\n</ul>\n<p>So, on failure, the <code>cin &gt;&gt; x</code> is assigning <code>0</code> to <code>x</code> if it was a failure to convert text to int; but it is not assigning <code>0</code> if the failure was due to end-of-file.</p>\n<p>Is this correct behaviour?   If not, what is the correct behaviour, according to the C++ Standard?</p>\n<p>I have a recollection from previously discussing on SO that all cases should write <code>0</code> since C++11, but I could not find anything using the search feature; and the iostreams section of the C++ standard is pretty heavy going.</p>\n", "Tags": "<c++><c++11><language-lawyer><iostream>", "OwnerUserId": "1505939", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_32945923_32946596_4": {"section_id": 6536, "quality": 1.0, "length": 19}, "so_32945923_32946596_2": {"section_id": 6536, "quality": 1.0, "length": 10}, "so_32945923_32946596_3": {"section_id": 6536, "quality": 1.0, "length": 15}, "so_32945923_32946596_1": {"section_id": 6536, "quality": 0.8333333333333334, "length": 5}, "so_32945923_32946596_6": {"section_id": 6536, "quality": 0.8333333333333334, "length": 5}}, "n3337": {"so_32945923_32946596_4": {"section_id": 6291, "quality": 1.0, "length": 19}, "so_32945923_32946596_2": {"section_id": 6291, "quality": 1.0, "length": 10}, "so_32945923_32946596_3": {"section_id": 6291, "quality": 1.0, "length": 15}, "so_32945923_32946596_1": {"section_id": 6291, "quality": 0.8333333333333334, "length": 5}, "so_32945923_32946596_6": {"section_id": 6291, "quality": 0.8333333333333334, "length": 5}}, "n4659": {"so_32945923_32946596_2": {"section_id": 8018, "quality": 0.9, "length": 9}, "so_32945923_32946596_4": {"section_id": 8018, "quality": 0.7368421052631579, "length": 14}, "so_32945923_32946596_3": {"section_id": 8018, "quality": 1.0, "length": 15}, "so_32945923_32946596_1": {"section_id": 8018, "quality": 0.8333333333333334, "length": 5}, "so_32945923_32946596_6": {"section_id": 8018, "quality": 0.8333333333333334, "length": 5}}}});