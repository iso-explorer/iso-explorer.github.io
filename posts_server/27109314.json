post_cb({"27109314": {"CommentCount": "0", "ViewCount": "137", "CreationDate": "2014-11-24T16:19:19.097", "LastActivityDate": "2014-11-24T16:23:48.713", "Title": "Does joining a std::thread flush memory?", "AcceptedAnswerId": "27109410", "PostTypeId": "1", "Id": "27109314", "Score": "2", "Body": "<p>Consider this example:</p>\n<pre><code>#include &lt;string&gt;\n#include &lt;chrono&gt;\n#include &lt;atomic&gt;\n#include &lt;thread&gt;\n#include &lt;iostream&gt;\n\nstd::string some_variable;\n\nvoid writer_thread()\n{\n    std::this_thread::sleep_for( std::chrono::seconds( 1 ) );\n    some_variable = \"done\";\n}\n\nint main()\n{\n    {\n        std::thread w( &amp;writer_thread );\n        w.join();\n    }\n\n    std::cout &lt;&lt; some_variable;\n}\n</code></pre>\n<p>Is it necessary for me to add a synchronization mechanism to ensure that <code>some_variable</code> is correctly read from <code>main()</code> ?</p>\n<p>Said differently: does joining or destructing a <code>std::thread</code> object imply that the memory associated to its local variable is flushed?</p>\n", "Tags": "<c++><multithreading><c++11><synchronization><c++-standard-library>", "OwnerUserId": "748175", "AnswerCount": "1"}, "27109410": {"ParentId": "27109314", "CommentCount": "0", "Body": "<p><code>join</code> provides the necessary syncronisation. Anything you do after a successful <code>join</code> will be correctly synchronised with anything the thread did before ending.</p>\n<p>From the standard (C++11 30.3.1.5 [thread.thread.member]/5), specifying the behaviour of <code>thread::join</code>:</p>\n<blockquote>\n<p id=\"so_27109314_27109410_0\"><em>Synchronization:</em> The completion of the thread represented by <code>*this</code> synchronizes with the corresponding successful <code>join()</code> return. </p>\n</blockquote>\n", "OwnerUserId": "204847", "PostTypeId": "2", "Id": "27109410", "Score": "9", "CreationDate": "2014-11-24T16:23:48.713", "LastActivityDate": "2014-11-24T16:23:48.713"}, "bq_ids": {"n4140": {"so_27109314_27109410_0": {"section_id": 2725, "quality": 0.8, "length": 8}}, "n3337": {"so_27109314_27109410_0": {"section_id": 2686, "quality": 0.8, "length": 8}}, "n4659": {"so_27109314_27109410_0": {"section_id": 3464, "quality": 0.8, "length": 8}}}});