post_cb({"21626236": {"CommentCount": "13", "AcceptedAnswerId": "21626576", "ClosedDate": "2014-02-07T13:17:56.557", "CreationDate": "2014-02-07T11:11:04.170", "LastActivityDate": "2014-02-07T17:01:40.423", "PostTypeId": "1", "ViewCount": "712", "Title": "Is std::chrono::seconds lightweight?", "Id": "21626236", "Score": "5", "Body": "<p>For a embedded project I'd like to use <code>std::chrono::seconds</code> to represent timeout values, especially for the reason of typesaftyness. This requires <code>std::chrono::seconds</code> to be fast constructible from an unsigned int type and also passing by value has to be very fast. Is that the case?</p>\n", "Tags": "<c++><c++11>", "OwnerUserId": "3265278", "AnswerCount": "2"}, "21626576": {"ParentId": "21626236", "PostTypeId": "2", "CommentCount": "6", "Body": "<p>Update. It seems that I can be bothered to check the standard sometimes.</p>\n<p>Here's what the standard says about copy construction of duration.</p>\n<p>20.11.5.1\nduration constructors</p>\n<pre><code>template &lt;class Rep2, class Period2&gt;\nconstexpr duration(const duration&lt;Rep2, Period2&gt;&amp; d);\n</code></pre>\n<blockquote>\n<p id=\"so_21626236_21626576_0\">Effects: Constructs an object of type <code>duration</code>, constructing <code>rep_</code> from</p>\n</blockquote>\n<pre><code>duration_cast&lt;duration&gt;(d).count()\n</code></pre>\n<p>20.11.5.7 duration_cast</p>\n<pre><code>template &lt;class ToDuration, class Rep, class Period&gt;\nconstexpr ToDuration duration_cast(const duration&lt;Rep, Period&gt;&amp; d);\n</code></pre>\n<blockquote>\n<p id=\"so_21626236_21626576_1\">2 Returns: Let CF be</p>\n</blockquote>\n<pre><code>ratio_divide&lt;Period, typename ToDuration::period&gt;\n</code></pre>\n<blockquote>\n<p id=\"so_21626236_21626576_2\">\u2014 If <code>CF::num == 1</code> and <code>CF::den == 1</code>, returns</p>\n</blockquote>\n<pre><code>ToDuration(static_cast&lt;typename ToDuration::rep&gt;(d.count()))\n</code></pre>\n<p>20.11.5.2 duration observer</p>\n<blockquote>\n<p id=\"so_21626236_21626576_3\">constexpr rep count() const; 1 Returns: rep_.</p>\n</blockquote>\n<p>From all this, unless I'm mistaken, copy constructor should get the rep from original, static_casts it to new rep type (which is the same in this case) and constructs the new duration object with the rep constructor. At least, in effect. If the implementation does something incredibly heavy in addition to that, consider throwing it away.</p>\n<p>Unfortunately, I couldn't find limitations to member data in the standard but the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2661.htm\" rel=\"nofollow\">document</a> linked by Howard Hinnant is probably more credible source than cppreference.com and it states:</p>\n<blockquote>\n<p id=\"so_21626236_21626576_4\">The representation stores a count of ticks. This count is the only\n  data member stored in a duration</p>\n</blockquote>\n<p>As nice as this sounds, if the performance matters, profile your code. If it doesn't matter, this question is pointless.</p>\n<p>Old answer...</p>\n<p>According to <a href=\"http://en.cppreference.com/w/cpp/chrono/duration\" rel=\"nofollow\">cppreference.com</a></p>\n<blockquote>\n<p id=\"so_21626236_21626576_5\">The only data stored in a duration is a tick count of type Rep.</p>\n</blockquote>\n<p>So, yes, it seems to be fast for value passing. And as I suggested in the comment, <code>std::chrono::duration&lt;unsigned int&gt;</code> should be slightly more efficient and you shouldn't then need to worry about overflows as long as the original <code>unsigned int</code> doesn't overflow.</p>\n", "OwnerUserId": "2079303", "LastEditorUserId": "2079303", "LastEditDate": "2014-02-07T17:01:40.423", "Id": "21626576", "Score": "10", "CreationDate": "2014-02-07T11:28:19.043", "LastActivityDate": "2014-02-07T17:01:40.423"}, "bq_ids": {"n4140": {"so_21626236_21626576_0": {"section_id": 4764, "quality": 0.8571428571428571, "length": 6}}, "n3337": {"so_21626236_21626576_0": {"section_id": 4570, "quality": 0.8571428571428571, "length": 6}}, "n4659": {"so_21626236_21626576_0": {"section_id": 6174, "quality": 0.8571428571428571, "length": 6}}}, "21628769": {"ParentId": "21626236", "CommentCount": "2", "Body": "<p>What follows is a possible partial implementation of <code>seconds</code> that can be slower than using integers directly.</p>\n<pre><code>template &lt;typename T&gt;\nstruct duration&lt;T, ratio&lt;1&gt;&gt; {\n    using rep = T;\n    using period = ratio&lt;1&gt;;\n\n    duration(T r) : r(r) { this_thread::sleep_for(hours(1)); }\n\nprivate:\n    T r;\n};\n</code></pre>\n", "OwnerUserId": "46642", "PostTypeId": "2", "Id": "21628769", "Score": "4", "CreationDate": "2014-02-07T13:16:12.793", "LastActivityDate": "2014-02-07T13:16:12.793"}});