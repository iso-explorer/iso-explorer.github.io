post_cb({"bq_ids": {"n4140": {"so_33180114_33180114_0": {"length": 16, "quality": 1.0, "section_id": 3271}}, "n3337": {"so_33180114_33180114_0": {"length": 16, "quality": 1.0, "section_id": 3143}}, "n4659": {"so_33180114_33180114_0": {"length": 16, "quality": 1.0, "section_id": 4029}}}, "33180114": {"ViewCount": "317", "Body": "<p>I found it quite odd that the following program still compiled fine despite the default constructor being <code>private</code> (4.8.1 g++):</p>\n<pre><code> class A{\n private:\n     A() = default;\n     A(const A&amp;) = default;\n };\n\n int main(){\n\n     A a;\n\n }\n</code></pre>\n<p>Actually from 8.4.2[2] of the standard (N3242)</p>\n<blockquote>\n<p id=\"so_33180114_33180114_0\">An explicitly-defaulted function may be declared constexpr only if it would have been implicitly declared as constexpr. If it is explicitly defaulted on its first declaration,</p>\n<p id=\"so_33180114_33180114_1\">\u2014 it shall be public,</p>\n<p id=\"so_33180114_33180114_2\">..........</p>\n</blockquote>\n<p>What exactly is the purpose for the default specifier to ignore the access specification? I feel like that could cause an interface issue unwarranted by the class designer that didn't want users to create default values but needed the default constructor in the implementation. I thought that maybe it's because the default constructor is normally <code>public</code> and so the <code>default</code> aims to replicate it - but that doesn't answer why <code>=default</code> on the copy constructor doesn't ignore the <code>private</code> specification. </p>\n<pre><code> class A{\n private:\n     A() = default;\n     A(const A&amp;) = default;\n };\n\n int main(){\n\n     A a;\n     A b(a); //error: constexpr A::A(const A&amp;) is private\n\n }\n</code></pre>\n<p>Actually I can't see from the standard where it mentions that explicitly-defaulted <code>copy/move</code> constructors/assignments aren't made <code>public</code>. </p>\n", "AcceptedAnswerId": "33180202", "Title": "=default ignores access specifier?", "CreationDate": "2015-10-16T21:52:15.977", "Id": "33180114", "CommentCount": "0", "LastEditDate": "2015-10-16T22:13:21.947", "PostTypeId": "1", "LastEditorUserId": "4338785", "LastActivityDate": "2015-10-16T22:13:21.947", "Score": "16", "OwnerUserId": "4338785", "Tags": "<c++><c++11><constructor><defaulted-functions>", "AnswerCount": "1"}, "33180202": {"Id": "33180202", "PostTypeId": "2", "Body": "<p>This is a gcc bug. <a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=57913\">Bug 57913</a> contains an example almost identical to yours. <a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=56429\">Bug 56429</a> contains links to several related bug reports, of which <a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=54812\">bug 54812</a> has been fixed in gcc 4.9, which indeed rejects your code.</p>\n<pre><code>error: 'constexpr A::A()' is private\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/a3bac6d22382bff2\">Live demo</a></p>\n", "LastEditorUserId": "241631", "LastActivityDate": "2015-10-16T22:03:09.647", "Score": "15", "CreationDate": "2015-10-16T21:59:58.030", "ParentId": "33180114", "CommentCount": "5", "OwnerUserId": "241631", "LastEditDate": "2015-10-16T22:03:09.647"}});