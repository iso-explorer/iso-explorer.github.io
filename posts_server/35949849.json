post_cb({"bq_ids": {"n4140": {"so_35949849_35950168_4": {"length": 17, "quality": 0.8947368421052632, "section_id": 7189}, "so_35949849_35950168_2": {"length": 28, "quality": 0.8484848484848485, "section_id": 7189}, "so_35949849_35950168_3": {"length": 17, "quality": 0.9444444444444444, "section_id": 7189}}, "n3337": {"so_35949849_35950168_4": {"length": 17, "quality": 0.8947368421052632, "section_id": 6933}, "so_35949849_35950168_2": {"length": 28, "quality": 0.8484848484848485, "section_id": 6933}, "so_35949849_35950168_3": {"length": 17, "quality": 0.9444444444444444, "section_id": 6933}}, "n4659": {"so_35949849_35950168_4": {"length": 16, "quality": 0.8421052631578947, "section_id": 8697}, "so_35949849_35950168_2": {"length": 24, "quality": 0.7272727272727273, "section_id": 8697}, "so_35949849_35950168_3": {"length": 16, "quality": 0.8888888888888888, "section_id": 8697}}}, "35949849": {"ViewCount": "147", "Body": "<p>I have a problem with understanding the concepts of variables lifetime and binding lifetime.</p>\n<p>consider the following arbitrary function </p>\n<p>Variable lifetime </p>\n<blockquote>\n<p id=\"so_35949849_35949849_0\">Lifetime is the time duration where an object/variable has memory allocated to it.</p>\n</blockquote>\n<p>binding lifetime.</p>\n<blockquote>\n<p id=\"so_35949849_35949849_1\">The period of time between the creation and destruction\n  of a name-to-object binding is called the binding\u2019s lifetime.</p>\n</blockquote>\n<p>by considering the following arbitrary function. I will put my questions as comments</p>\n<pre><code>void foo (int j)\n\n{ // Does i's lifetime start here?\n\n    int i; // Or does i's lifetime start her? \n\n    i = j; // does binding lifetime start here?\n\n} // i's lifetime ends\n</code></pre>\n<p>-In other words, does i's lifetime start and end with the blocks\"{ }\" or start with the decleration (int i;) and end with \"}\".</p>\n", "AcceptedAnswerId": "35952634", "Title": "C++ Understanding the difference between Variables lifetime,and binding lifetime", "CreationDate": "2016-03-11T21:02:48.823", "Id": "35949849", "CommentCount": "8", "PostTypeId": "1", "LastActivityDate": "2016-03-12T01:28:01.423", "Score": "0", "OwnerUserId": "3382285", "Tags": "<c++><binding><lifetime>", "AnswerCount": "2"}, "35950168": {"Id": "35950168", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_35949849_35950168_0\">does i's lifetime start and end with the blocks \"{ }\" or start with the declaration (<code>int i;</code>) and end with \"}\".</p>\n</blockquote>\n<p>From the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_35949849_35950168_1\"><strong>3.8 Object lifetime [basic.life]</strong></p>\n<p id=\"so_35949849_35950168_2\">1 The <em>lifetime</em> of an object is a runtime property of the object. An object is said to have non-trivial initialization if it is of a class or aggregate type and it or one of its members is initialized by a constructor other than a trivial default constructor. [ <em>Note:</em> initialization by a trivial copy/move constructor is non-trivial initialization. \u2014 <em>end note</em> ] </p>\n<p id=\"so_35949849_35950168_3\">The lifetime of an object of type <code>T</code> begins when:<br>\n  \u2014 storage with the proper alignment and size for type <code>T</code> is obtained, and<br>\n  \u2014 if the object has non-trivial initialization, its initialization is complete.</br></br></p>\n<p id=\"so_35949849_35950168_4\">The lifetime of an object of type <code>T</code> ends when:<br>\n  \u2014 if <code>T</code> is a class type with a non-trivial destructor (12.4), the destructor call starts, or<br>\n  \u2014 the storage which the object occupies is reused or released.</br></br></p>\n</blockquote>\n<p>Here's an example program and its output:</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct Foo\n{\n   Foo() : id(getNextID()) {}\n\n   ~Foo()\n   {\n      std::cout &lt;&lt; \"Destroying object \" &lt;&lt; id &lt;&lt; std::endl;\n   }\n\n   int id;\n\n   static int getNextID()\n   {\n      static int nexID = 0;\n      return ++nexID;\n   }\n};\n\nFoo bar()\n{\n   throw(10);\n   return Foo();\n}\n\nint main()\n{\n   int i = 10;         // Lifetime starts as soon as function is entered.\n   try\n   {\n      Foo f1;          // Lifetime starts after initialization is completed.\n      Foo f2 = bar();  // Lifetime does not start at all\n      int k = 20;      // Lifetime starts as soon as function is entered\n                       // even though it is not initialized.\n   }\n   catch ( ... )\n   {\n   }\n   return 0;\n}\n</code></pre>\n<p>Output:</p>\n<pre class=\"lang-none prettyprint-override\"><code>Destroying object 1\n</code></pre>\n", "LastEditorUserId": "434551", "LastActivityDate": "2016-03-11T22:11:21.260", "Score": "1", "CreationDate": "2016-03-11T21:22:49.240", "ParentId": "35949849", "CommentCount": "1", "OwnerUserId": "434551", "LastEditDate": "2016-03-11T22:11:21.260"}, "35952634": {"Id": "35952634", "PostTypeId": "2", "Body": "<p>Variable/object lifetime and binding time can sometimes be the same. You will typically see a difference when, for example, a variable/object is <strong>passed by reference</strong> to a subroutine. The variable/object still retains it value but you can no longer access it by <strong>name</strong>. In other words the time between parameter name and the variable that was passed has a shorter lifetime than the variable itself. </p>\n<pre><code>01 void addOne(int &amp;y) // y created here\n02 { \n03     y = y + 1;\n04 } // y is destroyed here\n05  \n06 int main()\n07 {\n08     int x = 5;\n09     std::cout &lt;&lt; \"x = \" &lt;&lt; x &lt;&lt; '\\n';\n10     addOne(x);\n11     std::cout &lt;&lt; \"x = \" &lt;&lt; x &lt;&lt; '\\n'; //y's value is displayed here\n12     return 0;\n13 }\n</code></pre>\n<blockquote>\n<p id=\"so_35949849_35952634_0\">Results: <br>x = 5 <br> x = 6</br></br></p>\n</blockquote>\n<p>y has a variable lifetime includes main() and addone() but y has a binding lifetime between lines 01 and 04.</p>\n", "LastActivityDate": "2016-03-12T01:28:01.423", "CommentCount": "0", "CreationDate": "2016-03-12T01:28:01.423", "ParentId": "35949849", "Score": "1", "OwnerUserId": "3117491"}});