post_cb({"1994207": {"ParentId": "1994186", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>Assuming I'm right about what this is supposed to be, it should look like this:</p>\n<pre><code>int main()\n{\n  int *p, *c;\n  // Something that creates whatever p and c point to goes here, a trivial example would be.\n  int pValue, cValue;\n  p = &amp;pValue;\n  c = &amp;cValue;\n  // The &amp; operator retrieves the memory address of pValue and cValue. \n\n  *p = 10;\n  *c = 20;\n  cout &lt;&lt; *p &lt;&lt; *c;\n}\n</code></pre>\n<p>In order to assign or retrieve a value to a variable referenced by a pointer, you need to <a href=\"http://cplus.about.com/od/glossar1/g/dereference.htm\" rel=\"nofollow noreferrer\">dereference</a> it. </p>\n<p>What your code is doing is casting 10 into pointer to int (which is the memory address where the actual int resides).</p>\n", "OwnerUserId": "216420", "LastEditorUserId": "216420", "LastEditDate": "2010-01-03T07:59:50.247", "Id": "1994207", "Score": "1", "CreationDate": "2010-01-03T06:44:56.340", "LastActivityDate": "2010-01-03T07:59:50.247"}, "1994195": {"ParentId": "1994186", "PostTypeId": "2", "CommentCount": "6", "Body": "<p>The fact that <code>int</code> and pointer data types are not required to have the same number of bits, according to the C++ standard, is one thing - that means you could lose precision.</p>\n<p>In addition, casting an <code>int</code> to an <code>int</code> pointer then back again is silly. Why not just leave it as an <code>int</code>?</p>\n<p>I actually <em>did</em> try to compile this under gcc and it worked fine but that's probably more by accident than good design.</p>\n", "OwnerUserId": "14860", "LastEditorUserId": "14860", "LastEditDate": "2010-01-03T06:45:10.443", "Id": "1994195", "Score": "9", "CreationDate": "2010-01-03T06:39:29.813", "LastActivityDate": "2010-01-03T06:45:10.443"}, "1994384": {"ParentId": "1994186", "PostTypeId": "2", "CommentCount": "6", "Body": "<p>Some wanted a quote from the C++ standard (I'd have put this in the comments of that answer if the format of comments wasn't so restricted), here are two from the 1999 one:</p>\n<p>5.2.10/3</p>\n<blockquote>\n<p id=\"so_1994186_1994384_0\">The mapping performed by <code>reinterpret_cast</code> is implementation defined.</p>\n</blockquote>\n<p>5.2.10/5</p>\n<blockquote>\n<p id=\"so_1994186_1994384_1\">A value of integral type or enumeration type can be explicitly converted to a pointer.\n  A pointer converted to an integer of sufficient size (if ant such exists on the implementation)\n  and back to the same pointer type will have its original value; mappings between pointers and\n  integers are otherwise implementation-defined.</p>\n</blockquote>\n<p>And I see nothing mandating that such implementation-defined mapping must give a valid representation for all input.  Otherwise said, an implementation on an architecture with address registers can very well trap when executing </p>\n<pre><code>p = (int*)10;\n</code></pre>\n<p>if the mapping does not give a representation valid at that time (yes, what is a valid representation for a pointer may depend of time.  For instance <code>delete</code> may make invalid the representation of the deleted pointer).</p>\n", "OwnerUserId": "136208", "LastEditorUserId": "136208", "LastEditDate": "2010-01-03T10:52:00.510", "Id": "1994384", "Score": "8", "CreationDate": "2010-01-03T09:04:34.347", "LastActivityDate": "2010-01-03T10:52:00.510"}, "1994213": {"ParentId": "1994186", "CommentCount": "3", "Body": "<p>there is more or less everything wrong with it:</p>\n<pre><code>int *p,*c;\np=(int*)10;\nc=(int*)20;\n</code></pre>\n<ul>\n<li>afterwards p is pointing to memory address 10</li>\n<li>afterwards c is pointing to memory address 20</li>\n</ul>\n<p>This doesn't look very intentional.</p>\n<p>And I suppose that the whole program will simply crash.</p>\n", "Id": "1994213", "PostTypeId": "2", "OwnerDisplayName": "anon", "Score": "-1", "CreationDate": "2010-01-03T06:50:34.380", "LastActivityDate": "2010-01-03T06:50:34.380"}, "1994208": {"ParentId": "1994186", "CommentCount": "3", "Body": "<p>addresses p and c may be larger than int.</p>\n", "OwnerUserId": "236975", "PostTypeId": "2", "Id": "1994208", "Score": "0", "CreationDate": "2010-01-03T06:45:55.563", "LastActivityDate": "2010-01-03T06:45:55.563"}, "2040758": {"ParentId": "1994186", "CommentCount": "0", "Body": "<p>The problem on some platforms you need </p>\n<pre><code>p = (int*) (long) 10;\n</code></pre>\n<p>See GLIB documentation on <a href=\"http://library.gnome.org/devel/glib/stable/glib-Type-Conversion-Macros.html\" rel=\"nofollow noreferrer\">type conversion macros</a>.</p>\n<p>And for the people who might not find a use for this type of expressions, it is possible to return data inside pointer value returning functions. You can find real-world examples, where this case it is better to use this idiom, instead of allocating a new integer on the heap, and return it back - poor performance, memory fragmentation, just ugly.</p>\n", "OwnerUserId": "247897", "PostTypeId": "2", "Id": "2040758", "Score": "0", "CreationDate": "2010-01-11T09:02:38.823", "LastActivityDate": "2010-01-11T09:02:38.823"}, "1994186": {"CommentCount": "3", "AcceptedAnswerId": "1994384", "PostTypeId": "1", "LastEditorUserId": "33213", "CreationDate": "2010-01-03T06:35:49.290", "LastActivityDate": "2014-06-16T22:14:32.623", "LastEditDate": "2010-01-03T13:02:05.790", "ViewCount": "502", "FavoriteCount": "2", "Title": "Casting between integers and pointers in C++", "Id": "1994186", "Score": "7", "Body": "<pre><code>#include&lt;iostream&gt;\nusing namespace std;\n\nint main()\n{\n  int *p,*c;\n  p=(int*)10;\n  c=(int*)20;\n  cout&lt;&lt;(int)p&lt;&lt;(int)c;\n}\n</code></pre>\n<p>Somebody asked me \"What is wrong with the above code?\" and I couldn't figure it out. Someone please help me.</p>\n", "Tags": "<c++><pointers>", "OwnerUserId": "165520", "AnswerCount": "7"}, "bq_ids": {"n4140": {"so_1994186_1994384_1": {"section_id": 6044, "quality": 0.9393939393939394, "length": 31}}, "n3337": {"so_1994186_1994384_1": {"section_id": 5812, "quality": 0.9393939393939394, "length": 31}}, "n4659": {"so_1994186_1994384_1": {"section_id": 7543, "quality": 0.9393939393939394, "length": 31}}}, "1994205": {"ParentId": "1994186", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>You're assigning values (10 and 20) to the pointers which obviously is a potential problem if you try to read the data at those addresses. Casting the pointer to an integer is also really ugly. And your main function does not have a return statement. That is just a few things.</p>\n", "OwnerUserId": "83327", "LastEditorUserId": "759866", "LastEditDate": "2014-06-16T22:14:32.623", "Id": "1994205", "Score": "0", "CreationDate": "2010-01-03T06:44:35.420", "LastActivityDate": "2014-06-16T22:14:32.623"}});