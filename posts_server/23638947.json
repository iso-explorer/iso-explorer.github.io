post_cb({"23639329": {"Id": "23639329", "PostTypeId": "2", "Body": "<p>The ISO/IEC 14882:2011 \u00a74.10/1 (and \u00a74.11/1 for member pointers) only says that a _constant integer expression that <em>integral constant expression prvalue of integer type that evaluates to zero</em> is a null pointer constant.</p>\n<p>For integer <em>values</em>, the only requirement is in \u00a75.2.10/5, which says that:</p>\n<blockquote>\n<p id=\"so_23638947_23639329_0\">A pointer converted to an integer of sufficient size (if any such exists on the implementation) and back to the same pointer type will have its original value; mappings between pointers and integers are otherwise implementation-defined.</p>\n</blockquote>\n<p>So it is also implementation defined whether integer value 0 converts to null pointer or not. In most implementations it does, because it is easier that way.</p>\n", "LastActivityDate": "2014-05-13T18:52:22.800", "CommentCount": "1", "CreationDate": "2014-05-13T18:52:22.800", "ParentId": "23638947", "Score": "2", "OwnerUserId": "201725"}, "23639052": {"Id": "23639052", "PostTypeId": "2", "Body": "<p>Let's try to answer your question:</p>\n<p><strong>It is possible</strong> that <code>reinterpret_cast&lt;void*&gt;(x) != nullptr</code> if <code>int x = 0</code>. But it is not mandated. Actually, <code>reinterpret_cast&lt;void*&gt;(x) == nullptr</code> <em>in most platforms</em> but depending on either one is Undefined Behaviour.</p>\n", "LastActivityDate": "2014-05-13T18:37:16.050", "CommentCount": "0", "CreationDate": "2014-05-13T18:37:16.050", "ParentId": "23638947", "Score": "1", "OwnerUserId": "80754"}, "23639209": {"Id": "23639209", "PostTypeId": "2", "Body": "<p>From C++11 5.2.10/5 Reinterpret cast [expr.reinterpret.cast] (emphasis added):</p>\n<blockquote>\n<p id=\"so_23638947_23639209_0\">A value of integral type or enumeration type can be explicitly\n  converted to a pointer. A pointer converted to an integer of suffcient\n  size (if any such exists on the implementation) and back to the same\n  pointer type will have its original value; <strong>mappings between pointers\n  and integers are otherwise implementation-defined</strong>.</p>\n</blockquote>\n<p>A related bit from 5.2.10/4:</p>\n<blockquote>\n<p id=\"so_23638947_23639209_1\">A value of type std::nullptr_t can be converted to an integral type;\n  the conversion has the same meaning and validity as a conversion of\n  (void*)0 to the integral type. [ Note: A reinterpret_cast cannot be\n  used to convert a value of any type to the type std::nullptr_t. \u2014end\n  note ]</p>\n</blockquote>\n", "LastActivityDate": "2014-05-13T18:44:43.410", "CommentCount": "0", "CreationDate": "2014-05-13T18:44:43.410", "ParentId": "23638947", "Score": "11", "OwnerUserId": "12711"}, "bq_ids": {"n4140": {"so_23638947_23639329_0": {"length": 22, "quality": 0.9565217391304348, "section_id": 6044}, "so_23638947_23639209_0": {"length": 30, "quality": 0.9375, "section_id": 6044}, "so_23638947_23639209_1": {"length": 22, "quality": 0.88, "section_id": 6043}}, "n3337": {"so_23638947_23639329_0": {"length": 22, "quality": 0.9565217391304348, "section_id": 5812}, "so_23638947_23639209_0": {"length": 30, "quality": 0.9375, "section_id": 5812}, "so_23638947_23639209_1": {"length": 22, "quality": 0.88, "section_id": 5811}}, "n4659": {"so_23638947_23639329_0": {"length": 22, "quality": 0.9565217391304348, "section_id": 7543}, "so_23638947_23639209_0": {"length": 30, "quality": 0.9375, "section_id": 7543}, "so_23638947_23639209_1": {"length": 22, "quality": 0.88, "section_id": 7542}}}, "23638947": {"ViewCount": "342", "Body": "<p>Reading <a href=\"https://stackoverflow.com/q/16563114/952747\">this</a> Q&amp;A, I thought <code>p</code> shouldn't be a <code>nullptr</code> even if <code>x</code> is <code>0</code>. Have I understood it right?</p>\n<pre><code>int main()\n{\n    int x = 0;\n\n    std::cin &gt;&gt; x; // Enter `0`\n\n    void *p = (void *)x; // or: void *p = reinterpret_cast&lt;void*&gt;(x);\n\n\n    if (!p)\n        std::cout &lt;&lt; \"p is nullptr\" &lt;&lt; std::endl;\n}\n</code></pre>\n<p>After entering <code>0</code> in the standard input, the message <code>p is nullptr</code> will be shown in my GCC.\nAccording to the <a href=\"https://stackoverflow.com/q/16563114/952747\">link</a>, it shouldn't evaluate to <code>nullptr</code>, but the result is not as my expectation.</p>\n<p><strong>Is the code undefined behavior? or unspecified result? Why does it evaluate to <code>nullptr</code>?</strong> </p>\n", "AcceptedAnswerId": "23639209", "Title": "Is this a nullptr?", "CreationDate": "2014-05-13T18:29:44.157", "Id": "23638947", "CommentCount": "15", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2017-05-23T12:27:13.823", "LastEditorUserId": "-1", "LastActivityDate": "2014-05-13T19:09:04.450", "Score": "5", "OwnerUserId": "952747", "Tags": "<c++>", "AnswerCount": "3"}});