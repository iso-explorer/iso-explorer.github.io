post_cb({"bq_ids": {"n4140": {"so_9046946_9047060_0": {"length": 11, "quality": 0.9166666666666666, "section_id": 723}}, "n3337": {"so_9046946_9047060_0": {"length": 11, "quality": 0.9166666666666666, "section_id": 712}}, "n4659": {"so_9046946_9047060_0": {"length": 11, "quality": 0.9166666666666666, "section_id": 754}}}, "9047060": {"Id": "9047060", "PostTypeId": "2", "Body": "<p>23.2.3 \u00a74 says:</p>\n<blockquote>\n<p id=\"so_9046946_9047060_0\"><code>a.clear()</code> [...] <strong>invalidates all references, pointers, and iterators</strong> referring to the elements of <code>a</code> and may invalidate the past-the-end iterator.</p>\n</blockquote>\n<p>Since there is no such thing as \"un-invalidation\", using <code>ptr</code> after <code>clear</code> results in undefined behavior.</p>\n<p>On a side note, the parenthesis in <code>&amp;(myvector[0])</code> are not needed. Postfix operators always have higher precedence than prefix operators in C++, so writing <code>&amp;myvector[0]</code> is just fine.</p>\n", "LastActivityDate": "2012-01-28T16:59:22.393", "CommentCount": "1", "CreationDate": "2012-01-28T16:59:22.393", "ParentId": "9046946", "Score": "7", "OwnerUserId": "252000"}, "9046946": {"ViewCount": "377", "Body": "<p>For example if I do something like this:</p>\n<pre><code>vector&lt;int&gt; myvector;\nmyvector.push_back(100);\nint * ptr = &amp;(myvector[0]);\nmyvector.clear();\nmyvector.push_back(10);\n</code></pre>\n<p>Will ptr still be valid?  Or could it now be pointing to garbage?</p>\n", "AcceptedAnswerId": "9047060", "Title": "Is the address of the first element of a vector fixed?", "CreationDate": "2012-01-28T16:44:23.203", "Id": "9046946", "CommentCount": "0", "LastEditDate": "2012-01-28T16:47:29.717", "PostTypeId": "1", "LastEditorUserId": "456", "LastActivityDate": "2012-01-28T16:59:22.393", "Score": "1", "OwnerUserId": "256062", "Tags": "<c++><pointers><stl><vector>", "AnswerCount": "2"}, "9046957": {"Id": "9046957", "PostTypeId": "2", "Body": "<p>It could be pointing to garbage. <code>vector</code> reallocates memory as needed when an instance grows or shrinks so you can't rely on the address not changing. That's why the types used for <code>vector</code> have to obey STL-compatible constraints like copy-ability. That's also why <code>auto_ptr</code> isn't safe in STL containers.</p>\n", "LastActivityDate": "2012-01-28T16:45:43.187", "CommentCount": "0", "CreationDate": "2012-01-28T16:45:43.187", "ParentId": "9046946", "Score": "3", "OwnerUserId": "191215"}});