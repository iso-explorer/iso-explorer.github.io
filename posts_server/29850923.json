post_cb({"bq_ids": {"n4140": {"so_29850923_29854565_2": {"length": 17, "quality": 0.6296296296296297, "section_id": 3366}, "so_29850923_29854565_1": {"length": 49, "quality": 0.9423076923076923, "section_id": 3376}, "so_29850923_29854565_0": {"length": 19, "quality": 0.95, "section_id": 3271}}, "n3337": {"so_29850923_29854565_2": {"length": 17, "quality": 0.6296296296296297, "section_id": 3236}, "so_29850923_29854565_1": {"length": 52, "quality": 1.0, "section_id": 3246}, "so_29850923_29854565_0": {"length": 19, "quality": 0.95, "section_id": 3143}}, "n4659": {"so_29850923_29854565_0": {"length": 11, "quality": 0.55, "section_id": 4029}}}, "29854565": {"Id": "29854565", "PostTypeId": "2", "Body": "<p>The rules governing the exception specification for your two examples are covered in <em>\u00a78.4.2/2 <strong>[dcl.fct.def.default]</strong></em></p>\n<blockquote>\n<p id=\"so_29850923_29854565_0\">... If a function is explicitly defaulted on its first declaration,<br/>\n  \u2014 it is implicitly considered to be <code>constexpr</code> if the implicit declaration would be,<br/>\n  \u2014 <strong>it is implicitly considered to have the same <em>exception-specification</em> as if it had been implicitly declared</strong> (15.4), and<br/>\n  \u2014 ...</p>\n</blockquote>\n<p><code>Bar</code>'s move constructor is <code>noexcept(true)</code> because in <em>\u00a715.4/14 <strong>[except.spec]</strong></em></p>\n<blockquote>\n<p id=\"so_29850923_29854565_1\">An implicitly declared special member function (Clause 12) shall have an <em>exception-specification</em>. <strong>If <code>f</code> is an implicitly declared</strong> default constructor, copy constructor, <strong>move constructor</strong>, destructor, copy assignment operator, or move assignment operator, its implicit <em>exception-specification</em> specifies the <em>type-id</em> <code>T</code> if and only if <code>T</code> is allowed by the <em>exception-specification</em> of a function directly invoked by <code>f</code>'s implicit definition; <code>f</code> shall allow all exceptions if any function it directly invokes allows all exceptions, and <strong><code>f</code> shall allow no exceptions\n  if every function it directly invokes allows no exceptions</strong>.</p>\n</blockquote>\n<p>The rules in \u00a78.4.2/2 do not apply to special member functions that have been explicitly defaulted after the initial declaration, except destructors, which are special cased in \u00a712.4/3 to be <code>noexcept(true)</code> unless you declare it <code>noexcept(false)</code> or the destructors of one of the data members or base classes can throw.</p>\n<p>Thus, unless you specify <code>Foo(Foo&amp;&amp;)</code> to be <code>noexcept(true)</code>, it is assumed to be <code>noexcept(false)</code>.</p>\n<p>The reason you needed to add the <code>noexcept</code> specification to both the declaration and later explicit default declaration is found in <em>\u00a715.4</em></p>\n<blockquote>\n<p id=\"so_29850923_29854565_2\"><em>3</em> \u00a0 Two <em>exception-specifications</em> are <em>compatible</em> if:<br/>\n  \u2014 both are non-throwing (see below), regardless of their form,<br/>\n  \u2014 ...<br/>\n<em>4</em> \u00a0 If any declaration of a function has an <em>exception-specification</em> that is not a <em>noexcept-specification</em> allowing all exceptions, all declarations, including the definition and any explicit specialization, of that function shall have a compatible <em>exception-specification</em>. ...</p>\n</blockquote>\n", "LastActivityDate": "2015-04-24T18:09:02.093", "CommentCount": "2", "CreationDate": "2015-04-24T18:09:02.093", "ParentId": "29850923", "Score": "2", "OwnerUserId": "241631"}, "29851014": {"Id": "29851014", "PostTypeId": "2", "Body": "<p>I realized now that I can do this, it didn't cross my mind until now:</p>\n<pre><code>struct Foo\n{\n    Foo() = default;\n    Foo(Foo&amp;&amp;) noexcept;\n};\nFoo::Foo(Foo&amp;&amp;) noexcept = default; // now it is noexcept\n</code></pre>\n<p>Still the second question <em>Why is it <code>noexcept(false)</code> by default?</em> applies.</p>\n", "LastActivityDate": "2015-04-24T15:06:14.440", "CommentCount": "0", "CreationDate": "2015-04-24T15:06:14.440", "ParentId": "29850923", "Score": "4", "OwnerUserId": "3093378"}, "29850923": {"ViewCount": "197", "Body": "<p>I know that a constructor marked as <code>=default</code> will \"try\" to be <code>noexcept</code> whenever possible. However, if I define it <strong>outside</strong> the class, it is not <code>noexcept</code> anymore, as you can see from this code:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;utility&gt;\n#include &lt;type_traits&gt;\n\nstruct Bar\n{\n    Bar() = default;\n    Bar(Bar&amp;&amp;) = default; // noexcept\n};\n\nstruct Foo\n{\n    Foo() = default;\n    Foo(Foo&amp;&amp;);\n};\n// moving the definition outside makes it noexcept(false)\nFoo::Foo(Foo&amp;&amp;) = default; // not noexcept anymore\n\nint main()\n{\n    Foo foo;\n    Bar bar;\n    std::cout &lt;&lt; std::boolalpha;\n    // checks\n    std::cout &lt;&lt; std::is_nothrow_move_constructible&lt;Bar&gt;::value &lt;&lt; std::endl;\n    std::cout &lt;&lt; std::is_nothrow_move_constructible&lt;Foo&gt;::value &lt;&lt; std::endl;\n}\n</code></pre>\n<p>How can I define such a <code>=default</code> constructor outside a class and make it <code>noexcept</code>? And why is such a constructor <code>noexcept(false)</code> if defined outside the class? This issue arises when implementing <a href=\"https://stackoverflow.com/questions/8972588/is-the-pimpl-idiom-really-used-in-practice\">PIMPL</a> via smart pointers.</p>\n", "AcceptedAnswerId": "29854565", "Title": "How to make default constructor defined outside the class noexcept?", "CreationDate": "2015-04-24T15:02:32.930", "Id": "29850923", "CommentCount": "0", "LastEditDate": "2017-05-23T11:58:13.247", "PostTypeId": "1", "LastEditorUserId": "-1", "LastActivityDate": "2015-04-24T18:09:02.093", "Score": "6", "OwnerUserId": "3093378", "Tags": "<c++><c++11><default-constructor><noexcept>", "AnswerCount": "2"}});