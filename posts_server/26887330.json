post_cb({"bq_ids": {"n4140": {"so_26887330_26887976_1": {"length": 11, "quality": 0.8461538461538461, "section_id": 2468}}, "n3337": {"so_26887330_26887976_1": {"length": 11, "quality": 0.8461538461538461, "section_id": 2453}}, "n4659": {"so_26887330_26887976_1": {"length": 11, "quality": 0.8461538461538461, "section_id": 2744}}}, "26887330": {"ViewCount": "68", "Body": "<p>I've got an <code>ofstream</code> object which I'm periodically reopening, with a new filename. I know that <code>.clear()</code> resets the <code>iostate</code> to <code>goodbit</code>. However, it's not exactly clear to me if this state is affected by <code>.close</code> and <code>.open</code>.</p>\n<p>In particular, can I check <code>.fail()</code> after <code>.close()</code> to determine whether I should <code>::remove</code> the file? I don't want to keep corrupted or partial files.</p>\n<p><strike>And if <code>badbit</code> and/or <code>failbit</code> are unaffected by <code>.close</code>, should I explicitly <code>.clear</code> them before calling <code>.open(newPath)</code> ?</strike> I already found out that the bits are cleared by <code>.open</code>, formally since C++11 but informally most implementations did it anyway.</p>\n", "AcceptedAnswerId": "26887976", "Title": "How are the iostate bits affected by fstream.close() and subsequent .open()?", "CreationDate": "2014-11-12T12:43:46.350", "Id": "26887330", "CommentCount": "1", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2014-11-13T00:16:01.007", "Score": "2", "OwnerUserId": "15416", "Tags": "<c++>", "AnswerCount": "1"}, "26887976": {"Id": "26887976", "PostTypeId": "2", "Body": "<p>From [ifstream.members] / 5:</p>\n<blockquote>\n<p id=\"so_26887330_26887976_0\"><code>void close();</code></p>\n<p id=\"so_26887330_26887976_1\">Effects: Calls <code>rdbuf()-&gt;close()</code> and, <strong>if that function returns a null pointer, calls <code>setstate(failbit)</code></strong> (which may throw <code>ios_base::failure</code> (27.5.5.4)).</p>\n</blockquote>\n<p>Summing up [filebuf.members] / 6:</p>\n<blockquote>\n<p id=\"so_26887330_26887976_2\"><code>basic_filebuf&lt;charT,traits&gt;* close();</code></p>\n<ul>\n<li>If <code>is_open() == false</code>, returns a null pointer.</li>\n<li>If any of the calls made by the function [...] fails, <code>close</code> fails by returning a null pointer.</li>\n<li>If a put area exists, calls <strong><code>overflow(traits::eof())</code></strong> to flush characters.</li>\n<li>If the last virtual member function called on <code>*this</code> (between <code>underflow</code>, <code>overflow</code>, <code>seekoff</code>, and <code>seekpos</code>) was <code>overflow</code> then calls <strong><code>a_codecvt.unshift</code></strong></li>\n<li>Finally [...] the function closes the file (as if by calling <code>std::fclose(file)</code>)</li>\n</ul>\n</blockquote>\n<p><code>overflow</code> ([filebuf.members] / 10) fails when:</p>\n<ul>\n<li><code>codecvt::out</code> fails if <code>codecvt</code> \"encountered a character it could not convert\" ([locale.codecvt.virtuals] / 5).</li>\n<li>File output fails (unspecified, probably if <code>fwrite</code> fails on most implementations).</li>\n</ul>\n<p><code>codecvt::unshift</code> fails if \"an unspecified error has occurred\" ([locale.codecvt.virtuals] / 8).</p>\n<p><code>std::fclose</code> fails \"if any errors were detected.\" (C11 7.21.5.1).</p>\n<blockquote>\n<p id=\"so_26887330_26887976_3\">In particular, can I check .fail() after .close() to determine whether I should ::remove the file?</p>\n</blockquote>\n<p>As we have seen, <code>close</code> can fail if there is a problem with the file itself, or if codecvt comes across a character it cannot convert (or in the unlikely event that <code>unshift</code> fails). If you need to be absolutely sure that <code>close</code> failed because of a file issue, you will need to do something like <code>os.seekp(0, os.end).clear();</code> before closing to make sure that the only thing <code>close</code> does is call <code>std::fclose</code>.</p>\n", "LastEditorUserId": "657267", "LastActivityDate": "2014-11-13T00:16:01.007", "Score": "3", "CreationDate": "2014-11-12T13:19:37.257", "ParentId": "26887330", "CommentCount": "2", "OwnerUserId": "657267", "LastEditDate": "2014-11-13T00:16:01.007"}});