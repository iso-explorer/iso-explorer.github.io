post_cb({"28965673": {"Id": "28965673", "PostTypeId": "2", "Body": "<p>The term \"user declared\" doesn't have a formal definition in the standard. It is meant to be the opposite of \"implicitly declared\" in the context of special member functions. [dcl.fct.def.default]/4 could be a bit clearer about this fact, but the intention is there:</p>\n<blockquote>\n<p id=\"so_28963577_28965673_0\">Explicitly-defaulted functions and implicitly-declared functions are collectively called <em>defaulted</em> functions, and the implementation shall provide implicit definitions for them (12.1 12.4, 12.8), which might mean defining them as deleted. A special member function is <em>user-provided</em> if it is user-declared and not explicitly defaulted or deleted on its first declaration. A user-provided explicitly-defaulted function (i.e., explicitly defaulted after its first declaration) is defined at the point where it is explicitly defaulted; if such a function is implicitly defined as deleted, the program is ill-formed.</p>\n</blockquote>\n<p>Both <code>NoCopy(NoCopy&amp;) = delete;</code> and <code>NoCopy&amp; operator=(const NoCopy&amp;) = delete;</code> are declarations of special member functions. Since <em>you</em> are explicitly declaring them, as opposed to allowing the compiler to declare them implicitly, they are user-declared. Those declarations will therefore suppress the implicit declarations of the move constructor and move assignment operator per [class.copy]/9:</p>\n<blockquote>\n<p id=\"so_28963577_28965673_1\">If the definition of a class <code>X</code> does not explicitly declare a move constructor, one will be implicitly declared as defaulted if and only if</p>\n<p id=\"so_28963577_28965673_2\">\u2014 <code>X</code> does not have a user-declared copy constructor,</p>\n<p id=\"so_28963577_28965673_3\">\u2014 <code>X</code> does not have a user-declared copy assignment operator,</p>\n<p id=\"so_28963577_28965673_4\">\u2014 <code>X</code> does not have a user-declared move assignment operator,</p>\n<p id=\"so_28963577_28965673_5\">\u2014 <code>X</code> does not have a user-declared destructor, and</p>\n<p id=\"so_28963577_28965673_6\">\u2014 the move constructor would not be implicitly defined as deleted.</p>\n</blockquote>\n", "LastEditorUserId": "923854", "LastActivityDate": "2015-03-10T14:02:46.410", "Score": "8", "CreationDate": "2015-03-10T13:56:56.837", "ParentId": "28963577", "CommentCount": "0", "OwnerUserId": "923854", "LastEditDate": "2015-03-10T14:02:46.410"}, "28963774": {"Id": "28963774", "PostTypeId": "2", "Body": "<p>According to slide 14 of your presentation, a deleted copy constructor is \"user declared\" thus inhibiting the move generation.</p>\n", "LastActivityDate": "2015-03-10T12:28:47.807", "CommentCount": "1", "CreationDate": "2015-03-10T12:28:47.807", "ParentId": "28963577", "Score": "6", "OwnerUserId": "3153883"}, "28963577": {"ViewCount": "790", "Body": "<p>Per <a href=\"http://www.slideshare.net/ripplelabs/howard-hinnant-accu2014\" rel=\"nofollow\">this presentation</a>, if either the copy constructor or copy assignment operator is \"user declared\", then no implicit move operations will be generated. Does <code>delete</code>ing the copy constructor or copy assignment operator count as \"user declared\"?</p>\n<pre><code>struct NoCopy {\n    NoCopy(NoCopy&amp;) = delete;\n    NoCopy&amp; operator=(const NoCopy&amp;) = delete;\n};\n</code></pre>\n<p>Will implicit move operations be generated for the <code>NoCopy</code> class? Or does deleting the relevant copy operations count as \"user declared\" and thus inhibit implicit move generation?</p>\n<p>If possible, I'd prefer an answer referencing the relevant parts of the standard.</p>\n", "AcceptedAnswerId": "28963774", "Title": "Does deleting a copy constructor or copy assignment operator count as \"user declared\"?", "CreationDate": "2015-03-10T12:20:09.563", "Id": "28963577", "CommentCount": "0", "LastEditDate": "2015-07-25T20:09:48.120", "PostTypeId": "1", "LastEditorUserId": "3204551", "LastActivityDate": "2015-07-25T20:09:48.120", "Score": "6", "OwnerUserId": "776473", "Tags": "<c++><c++11><move><language-lawyer><copy-constructor>", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_28963577_28965673_4": {"length": 6, "quality": 1.0, "section_id": 458}, "so_28963577_28965673_1": {"length": 12, "quality": 1.0, "section_id": 458}, "so_28963577_28965673_2": {"length": 5, "quality": 1.0, "section_id": 458}, "so_28963577_28965673_0": {"length": 45, "quality": 0.8653846153846154, "section_id": 3274}, "so_28963577_28965673_6": {"length": 5, "quality": 0.8333333333333334, "section_id": 456}, "so_28963577_28965673_3": {"length": 6, "quality": 1.0, "section_id": 458}}, "n3337": {"so_28963577_28965673_4": {"length": 6, "quality": 1.0, "section_id": 449}, "so_28963577_28965673_1": {"length": 12, "quality": 1.0, "section_id": 449}, "so_28963577_28965673_3": {"length": 6, "quality": 1.0, "section_id": 449}, "so_28963577_28965673_0": {"length": 47, "quality": 0.9038461538461539, "section_id": 3145}, "so_28963577_28965673_2": {"length": 5, "quality": 1.0, "section_id": 449}, "so_28963577_28965673_6": {"length": 6, "quality": 1.0, "section_id": 449}, "so_28963577_28965673_5": {"length": 4, "quality": 1.0, "section_id": 449}}, "n4659": {"so_28963577_28965673_4": {"length": 6, "quality": 1.0, "section_id": 481}, "so_28963577_28965673_1": {"length": 12, "quality": 1.0, "section_id": 481}, "so_28963577_28965673_0": {"length": 45, "quality": 0.8653846153846154, "section_id": 4032}, "so_28963577_28965673_2": {"length": 5, "quality": 1.0, "section_id": 481}, "so_28963577_28965673_6": {"length": 5, "quality": 0.8333333333333334, "section_id": 479}, "so_28963577_28965673_3": {"length": 6, "quality": 1.0, "section_id": 481}}}});