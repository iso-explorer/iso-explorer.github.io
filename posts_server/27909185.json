post_cb({"bq_ids": {"n4140": {"so_27909185_27909355_0": {"length": 35, "quality": 0.9722222222222222, "section_id": 278}}, "n3337": {"so_27909185_27909355_0": {"length": 35, "quality": 0.9722222222222222, "section_id": 269}}, "n4659": {"so_27909185_27909355_0": {"length": 35, "quality": 0.9722222222222222, "section_id": 285}}}, "27909185": {"ViewCount": "71", "Body": "<p>I read in many articles, that for class template when specializing\nmember template, the class that containing specialized member template also shall be explicitly specialized. Is there a point about it in standard and is there any reason to have such restriction? \nI mean under the hood.</p>\n<p>Why this is not allowed. </p>\n<pre><code>template &lt;typename T&gt;\nclass A\n{\n   template &lt;typename U&gt;\n   void foo()\n   {}\n};\n\ntemplate &lt;typename T&gt;\n template &lt;&gt;\nvoid A&lt;T&gt;::foo&lt;int&gt;()\n{}\n</code></pre>\n", "Title": "Explicitly specialized members need their containing class templates to be explicitly specialized as well", "CreationDate": "2015-01-12T19:18:55.360", "LastActivityDate": "2015-01-12T19:31:28.910", "CommentCount": "1", "FavoriteCount": "1", "PostTypeId": "1", "Id": "27909185", "Score": "3", "OwnerUserId": "1758528", "Tags": "<c++><templates><member><explicit-specialization>", "AnswerCount": "1"}, "27909355": {"Id": "27909355", "PostTypeId": "2", "Body": "<p>[temp.expl.spec]/16:</p>\n<blockquote>\n<p id=\"so_27909185_27909355_0\">In an explicit specialization declaration for a member of a class\n  template or a member template that appears in namespace scope, <strong>the\n  member template and some of its enclosing class templates may remain\n  unspecialized, except that the declaration shall not explicitly\n  specialize a class member template if its enclosing class templates\n  are not explicitly specialized as well.</strong>  [ <em>Example:</em></p>\n<pre><code>template &lt;class T1&gt; class A {\n    template&lt;class T2&gt; class B {\n        template&lt;class T3&gt; void mf1(T3);\n        void mf2();\n    };\n};\n\ntemplate &lt;&gt; template &lt;class X&gt;\nclass A&lt;int&gt;::B {\n    template &lt;class T&gt; void mf1(T);\n};\n\ntemplate &lt;&gt; template &lt;&gt; template&lt;class T&gt;\nvoid A&lt;int&gt;::B&lt;double&gt;::mf1(T t) { }\ntemplate &lt;class Y&gt; template &lt;&gt;\nvoid A&lt;Y&gt;::B&lt;double&gt;::mf2() { } // ill-formed; B&lt;double&gt; is specialized \n                                // but its enclosing class template A is not\n</code></pre>\n<p id=\"so_27909185_27909355_1\">\u2014 <em>end example</em> ]</p>\n</blockquote>\n", "LastActivityDate": "2015-01-12T19:31:28.910", "CommentCount": "0", "CreationDate": "2015-01-12T19:31:28.910", "ParentId": "27909185", "Score": "1", "OwnerUserId": "3647361"}});