post_cb({"29550788": {"CommentCount": "0", "AcceptedAnswerId": "29550817", "CreationDate": "2015-04-09T23:27:28.803", "LastActivityDate": "2015-04-09T23:47:26.903", "PostTypeId": "1", "ViewCount": "113", "FavoriteCount": "1", "Title": "How to specialize a template sub-class?", "Id": "29550788", "Score": "5", "Body": "<p>I'm trying to specialize a template class inside another class but the compiler won't let me. The code works outside of class Foo but not inside and I want struct Bla to be private to class Foo.</p>\n<pre><code>class Foo {\n   template&lt;typename ... Ts&gt; struct Bla; \n   template&lt;&gt; struct Bla&lt;&gt; { static constexpr int x = 1; };\n};\n\nerror: explicit specialization in non-namespace scope 'class Foo'\n</code></pre>\n", "Tags": "<c++><templates><template-specialization>", "OwnerUserId": "4262344", "AnswerCount": "2"}, "29550808": {"ParentId": "29550788", "CommentCount": "3", "CreationDate": "2015-04-09T23:29:48.880", "OwnerUserId": "2069064", "PostTypeId": "2", "Id": "29550808", "Score": "4", "Body": "<p>You simply cannot do that. The error sums it up nicely. Class templates can only be specialized in namespace scope. <code>class Foo</code> is not a namespace. </p>\n<p>You can do it external to the class, as per this example from the standard [temp.class.spec]:</p>\n<blockquote>\n<p id=\"so_29550788_29550808_0\">A class template partial specialization may be declared or redeclared in any namespace scope in which its\n  definition may be defined (14.5.1 and 14.5.2). [ Example:  </p>\n<pre><code> template&lt;class T&gt; struct A {  \n     struct C {\n         template&lt;class T2&gt; struct B { };\n     };\n };\n\n // partial specialization of A&lt;T&gt;::C::B&lt;T2&gt;\n template&lt;class T&gt; template&lt;class T2&gt;\n   struct A&lt;T&gt;::C::B&lt;T2*&gt; { };\n\nA&lt;short&gt;::C::B&lt;int*&gt; absip; // uses partial specialization\n</code></pre>\n<p id=\"so_29550788_29550808_1\">\u2014end example ]</p>\n</blockquote>\n", "LastActivityDate": "2015-04-09T23:29:48.880"}, "bq_ids": {"n4140": {"so_29550788_29550808_0": {"section_id": 139, "quality": 0.8125, "length": 13}}, "n3337": {"so_29550788_29550808_0": {"section_id": 133, "quality": 0.8125, "length": 13}}, "n4659": {"so_29550788_29550808_0": {"section_id": 143, "quality": 0.5625, "length": 9}}}, "29550817": {"ParentId": "29550788", "PostTypeId": "2", "CommentCount": "5", "CreationDate": "2015-04-09T23:30:53.683", "Score": "3", "LastEditorUserId": "3093378", "LastEditDate": "2015-04-09T23:47:26.903", "Id": "29550817", "OwnerUserId": "3093378", "Body": "<p>You cannot specialize inside the class, use:</p>\n<pre><code>class Foo {\npublic: // so we can test it easily\n   template&lt;typename ... Ts&gt; struct Bla; \n};\n\n// specialize it outside the class\ntemplate&lt;&gt; class Foo::Bla&lt;&gt; { static constexpr int x = 1; }; \n\nint main()\n{\n    std::cout &lt;&lt; Foo::Bla&lt;&gt;::x;\n}\n</code></pre>\n", "LastActivityDate": "2015-04-09T23:47:26.903"}});