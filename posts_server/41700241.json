post_cb({"41700241": {"CommentCount": "3", "ViewCount": "340", "PostTypeId": "1", "ClosedDate": "2017-02-05T19:50:41.723", "LastEditorUserId": "3309790", "CreationDate": "2017-01-17T14:54:56.763", "LastActivityDate": "2017-01-18T01:28:38.933", "LastEditDate": "2017-01-17T15:28:17.277", "FavoriteCount": "1", "Title": "C++ nested struct inheritance rules (access to protected member)", "Id": "41700241", "Score": "8", "Body": "<p>Can anyone explain to me why (as in, \"why is the language this way?\") the following code has a compile error at the second line of <code>B::C::bar</code>?</p>\n<pre><code>class A\n{\npublic:\n    struct D\n    {\n        void call_foo (A &amp;a)\n        {\n            a.foo ();\n        }\n    };\n\nprotected:\n    void foo () {}\n};\n\nclass B : public A\n{\n    struct C : public A::D\n    {\n        void bar (A &amp;a, B &amp;b)\n        {\n            b.foo (); // OK\n            a.foo (); // Error. Huh?\n            call_foo (a); // Ugly workaround\n        }\n    };\n};\n</code></pre>\n<p>It seems that a method can safely use a protected method in a parent class if and only if the type of the base pointer is exactly the enclosing type (rather than some parent type).</p>\n<p>This seems kind of odd. Why is the language that way?</p>\n", "Tags": "<c++><inheritance><language-lawyer><protected>", "OwnerUserId": "7019464", "AnswerCount": "1"}, "41700345": {"ParentId": "41700241", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The struct <code>C</code> is nested inside class <code>B</code>, it's regared as a member so it has the same access rights as any other member. So yes it could access the <code>protected</code> members of the base class <code>A</code>. But note that you could only access the <code>protected</code> members of <code>A</code> through an object of type <code>B</code>; you can't do that through a <code>A</code>. That makes sense, because the members of derived class should only be possible to access the <code>protected</code> members inherited from the base class; these members belong to the derived class. But accessing the <code>protected</code> members of the base class directly should not be allowed; they belong to the base class (or the other derived class).</p>\n<p>The rule is not special for the inner class, it's also true for the member functions of <code>B</code>.</p>\n<p><a href=\"http://eel.is/c++draft/class.protected#1\" rel=\"nofollow noreferrer\">$11.4/1 Protected member access [class.protected]</a></p>\n<p>(emphasis mine)</p>\n<blockquote>\n<p id=\"so_41700241_41700345_0\">An additional access check beyond those described earlier in Clause\n  [class.access] is applied when a non-static data member or non-static\n  member function is a protected member of its naming class\n  ([class.access.base])115 As described earlier, <strong>access to a protected\n  member is granted because the reference occurs in a friend or member\n  of some class C</strong>. If the access is to form a pointer to member\n  ([expr.unary.op]), the nested-name-specifier shall denote C or a class\n  derived from C. <strong>All other accesses involve a (possibly implicit)\n  object expression ([expr.ref]). In this case, the class of the object\n  expression shall be C or a class derived from C</strong>. [\u2009Example:</p>\n<pre><code>class B {\nprotected:\n  int i;\n  static int j;\n};\n\nclass D1 : public B {\n};\n\nclass D2 : public B {\n  friend void fr(B*,D1*,D2*);\n  void mem(B*,D1*);\n};\n\n...\n\nvoid D2::mem(B* pb, D1* p1) {\n  pb-&gt;i = 1;                    // ill-formed\n  p1-&gt;i = 2;                    // ill-formed\n  i = 3;                        // OK (access through this)\n  B::i = 4;                     // OK (access through this, qualification ignored)\n  int B::* pmi_B = &amp;B::i;       // ill-formed\n  int B::* pmi_B2 = &amp;D2::i;     // OK\n  j = 5;                        // OK (because j refers to static member)\n  B::j = 6;                     // OK (because B\u200b::\u200bj refers to static member)\n}\n\n...\n\n\u2009\u2014\u2009end example\u2009]\n</code></pre>\n</blockquote>\n", "OwnerUserId": "3309790", "LastEditorUserId": "3309790", "LastEditDate": "2017-01-18T01:28:38.933", "Id": "41700345", "Score": "7", "CreationDate": "2017-01-17T14:59:16.193", "LastActivityDate": "2017-01-18T01:28:38.933"}, "bq_ids": {"n4140": {"so_41700241_41700345_0": {"section_id": 6695, "quality": 0.9180327868852459, "length": 56}}, "n3337": {"so_41700241_41700345_0": {"section_id": 6450, "quality": 0.9180327868852459, "length": 56}}, "n4659": {"so_41700241_41700345_0": {"section_id": 8170, "quality": 0.9180327868852459, "length": 56}}}});