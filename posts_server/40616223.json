post_cb({"bq_ids": {"n4140": {"so_40616223_40616839_0": {"length": 16, "quality": 1.0, "section_id": 142}}, "n3337": {"so_40616223_40616839_0": {"length": 16, "quality": 1.0, "section_id": 136}}}, "40616839": {"PostTypeId": "2", "Body": "<p>N4140 [temp.class.spec]/8.1:</p>\n<blockquote>\n<p id=\"so_40616223_40616839_0\">A partially specialized non-type argument expression shall not involve\n  a template parameter of the partial specialization except when the\n  argument expression is a simple <em>identifier</em>.</p>\n</blockquote>\n<p>This has since been relaxed by <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0263r1.html#1315\" rel=\"nofollow noreferrer\">core issue 1315</a>. Presumably GCC hasn't gotten around to implementing that yet.</p>\n", "LastActivityDate": "2016-11-15T18:11:45.750", "Id": "40616839", "CommentCount": "0", "CreationDate": "2016-11-15T18:11:45.750", "ParentId": "40616223", "Score": "4", "OwnerUserId": "2756719"}, "40616223": {"ViewCount": "147", "Body": "<p>Check of correcteness during compilation of the following code (metafunction for selection of a type from a type list by right to left 1-based index) failed on <em>GCC</em>, whereas <em>clang</em> accepts this code:</p>\n<pre><code>#include &lt;cstdlib&gt;\n\ntemplate&lt; std::size_t i, typename ...types &gt;\nstruct at_index\n{\n\n};\n\ntemplate&lt; typename first, typename ...rest &gt;\nstruct at_index&lt; (1 + sizeof...(rest)), first, rest... &gt;\n{\n    using type = first;\n};\n\ntemplate&lt; std::size_t i, typename first, typename ...rest &gt;\nstruct at_index&lt; i, first, rest... &gt;\n        : at_index&lt; i, rest... &gt;\n{\n\n}; \n\nint main()\n{\n}\n</code></pre>\n<p>Which compiler is right?</p>\n<p>GCC error message:</p>\n<pre><code>error: template argument '(1 + sizeof... (rest))' involves template parameter(s)\n struct at_index&lt; (1 + sizeof...(rest)), first, rest... &gt;\n        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n</code></pre>\n<p>I think the types from parameter pack in <code>sizeof...</code> operator should not be resolved into some parts of symbol names. Therefore no name mangling problems should be here.</p>\n<p>Is this a <em>clang</em> extension to allow above code?</p>\n", "AcceptedAnswerId": "40616839", "Title": "Using sizeof template parameters pack in class template specialization", "CreationDate": "2016-11-15T17:35:37.877", "Id": "40616223", "CommentCount": "3", "LastEditDate": "2016-11-15T18:12:35.733", "PostTypeId": "1", "LastEditorUserId": "2756719", "LastActivityDate": "2016-11-15T18:12:35.733", "Score": "3", "OwnerUserId": "1430927", "Tags": "<c++><c++11><c++14><language-lawyer><variadic-templates>", "AnswerCount": "1"}});