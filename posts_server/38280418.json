post_cb({"38280562": {"ParentId": "38280418", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Yes, <code>iterator</code> of std containers is (and must be) convertible to <code>const_iterator</code>.</p>\n<p>From the standard, <a href=\"http://eel.is/c++draft/container.requirements.general#tab:containers.container.requirements\" rel=\"nofollow\">$23.2.1/4 General container requirements [container.requirements.general] Table 100 \u2014 Container requirements</a>:</p>\n<p>(Emphasis mine)</p>\n<blockquote>\n<p id=\"so_38280418_38280562_0\">X::iterator </p>\n<p id=\"so_38280418_38280562_1\">any iterator category that meets the forward iterator requirements.\n  <strong>convertible to X::const_iterator</strong>.</p>\n</blockquote>\n", "OwnerUserId": "3309790", "LastEditorUserId": "3309790", "LastEditDate": "2016-07-09T10:02:17.363", "Id": "38280562", "Score": "3", "CreationDate": "2016-07-09T09:55:37.033", "LastActivityDate": "2016-07-09T10:02:17.363"}, "38280418": {"CommentCount": "2", "ViewCount": "60", "CreationDate": "2016-07-09T09:38:37.830", "LastActivityDate": "2016-07-09T10:02:17.363", "Title": "erase gets const_iterator but is called with iterator (non-const)", "AcceptedAnswerId": "38280562", "PostTypeId": "1", "Id": "38280418", "Score": "2", "Body": "<p>In C++11 <code>std::vector::erase</code> gets as first argument <code>const_iterator</code> (older one was with iterator):</p>\n<p><a href=\"http://www.cplusplus.com/reference/vector/vector/erase/\" rel=\"nofollow\">http://www.cplusplus.com/reference/vector/vector/erase/</a></p>\n<p>But as you can see in the example it uses with not <code>cbegin</code>. Instead it uses with <code>begin</code>. Is there an implicit conversion between <code>const_iterator</code> and <code>iterator</code>?</p>\n", "Tags": "<c++><c++11><stl><std><stdvector>", "OwnerUserId": "163394", "AnswerCount": "2"}, "38280541": {"ParentId": "38280418", "CommentCount": "0", "Body": "<p>The requirement on <code>containers</code> is that <code>iterator</code> type must be implcitly convertible to <code>const_iterator</code>.</p>\n<p>See: <a href=\"http://en.cppreference.com/w/cpp/concept/Container\" rel=\"nofollow\">http://en.cppreference.com/w/cpp/concept/Container</a></p>\n<p>So, something like below will work:</p>\n<pre><code>std::vector&lt;int&gt; v;\n.....\nstd::vector&lt;int&gt;::const_iterator cit = v.begin();\n</code></pre>\n", "OwnerUserId": "434233", "PostTypeId": "2", "Id": "38280541", "Score": "3", "CreationDate": "2016-07-09T09:53:13.917", "LastActivityDate": "2016-07-09T09:53:13.917"}, "bq_ids": {"n4140": {"so_38280418_38280562_1": {"section_id": 705, "quality": 1.0, "length": 8}}, "n3337": {"so_38280418_38280562_1": {"section_id": 695, "quality": 1.0, "length": 8}}, "n4659": {"so_38280418_38280562_1": {"section_id": 734, "quality": 1.0, "length": 8}}}});