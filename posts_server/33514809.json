post_cb({"33514888": {"ParentId": "33514809", "CommentCount": "5", "Body": "<p>It may be legal, but it's incredibly poor style. The argument to placement new is a void*, so you're telling C++ to reinterpret_cast the address of f as a void*, then using that as the location to construct something new - overwriting the original f.</p>\n<p>Basically, don't do that.</p>\n", "OwnerUserId": "1772828", "PostTypeId": "2", "Id": "33514888", "Score": "0", "CreationDate": "2015-11-04T06:13:16.280", "LastActivityDate": "2015-11-04T06:13:16.280"}, "33514809": {"CommentCount": "3", "ViewCount": "139", "CreationDate": "2015-11-04T06:06:46.073", "LastActivityDate": "2015-11-04T06:45:43.663", "Title": "Using placement new to update a reference member?", "AcceptedAnswerId": "33515129", "PostTypeId": "1", "Id": "33514809", "Score": "2", "Body": "<p>Is the following code legal in C++? </p>\n<pre><code>template&lt;typename T&gt;\nclass Foo {\npublic:\n    Foo(T&amp; v) : v_(v) {}\n\nprivate:\n    T&amp; v_;\n};\n\nint a = 10;\nFoo&lt;int&gt; f(a);\n\nvoid Bar(int&amp; a) {\n    new (&amp;f)Foo&lt;int&gt;(a);\n}\n</code></pre>\n<p>References are not supposed to be bound twice, right?</p>\n", "Tags": "<c++>", "OwnerUserId": "633684", "AnswerCount": "2"}, "33515129": {"ParentId": "33514809", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>This is perfectly invalid.</p>\n<p>[basic.life]/1, emphasis mine:</p>\n<blockquote>\n<p id=\"so_33514809_33515129_0\">The lifetime of an object of type <code>T</code> ends when:</p>\n<ul>\n<li>if <code>T</code> is a class type with a non-trivial destructor (12.4), the destructor call starts, or</li>\n<li><strong>the storage which the object occupies is reused or released.</strong></li>\n</ul>\n</blockquote>\n<p>The placement new reuses the storage, ending the lifetime of the object denoted by <code>f</code>.</p>\n<p>[basic.life]/7:</p>\n<blockquote>\n<p id=\"so_33514809_33515129_1\">If, after the lifetime of an object has ended and before the storage\n  which the object occupied is reused or released, a new object is\n  created at the storage location which the original object occupied, a\n  pointer that pointed to the original object, a reference that referred\n  to the original object, or the name of the original object will\n  automatically refer to the new object and, once the lifetime of the\n  new object has started, can be used to manipulate the new object, if:</p>\n<ul>\n<li>the storage for the new object exactly overlays the storage location which the original object occupied, and</li>\n<li>the new object is of the same type as the original object (ignoring the top-level cv-qualifiers), and</li>\n<li><strong>the type of the original object is not const-qualified, and, if a class type, does not contain any non-static data member whose type is\n  const-qualified or a reference type</strong>, and</li>\n<li>the original object was a most derived object (1.8) of type <code>T</code> and the new object is a most derived object of type <code>T</code> (that is, they are\n  not base class subobjects).</li>\n</ul>\n</blockquote>\n<p>Since the third bullet point is not satisfied, after a call to <code>Bar</code>, <code>f</code> does not refer to the object created by the placement <code>new</code>, but to the no-longer-living object previously there, and attempting to use it results in undefined behavior.</p>\n<p>See also <a href=\"http://wg21.link/CWG1776\" rel=\"nofollow\">CWG1776</a> and <a href=\"http://wg21.link/P0137R0\" rel=\"nofollow\">P0137R0</a>.</p>\n", "OwnerUserId": "2756719", "LastEditorUserId": "2756719", "LastEditDate": "2015-11-04T06:45:43.663", "Id": "33515129", "Score": "5", "CreationDate": "2015-11-04T06:30:52.737", "LastActivityDate": "2015-11-04T06:45:43.663"}, "bq_ids": {"n4140": {"so_33514809_33515129_0": {"section_id": 7189, "quality": 0.8333333333333334, "length": 5}, "so_33514809_33515129_1": {"section_id": 7195, "quality": 1.0, "length": 43}}, "n3337": {"so_33514809_33515129_0": {"section_id": 6933, "quality": 0.8333333333333334, "length": 5}, "so_33514809_33515129_1": {"section_id": 6939, "quality": 1.0, "length": 43}}, "n4659": {"so_33514809_33515129_0": {"section_id": 8697, "quality": 0.8333333333333334, "length": 5}, "so_33514809_33515129_1": {"section_id": 8704, "quality": 1.0, "length": 43}}}});