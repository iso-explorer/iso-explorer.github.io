post_cb({"bq_ids": {"n4140": {"so_29225448_29225695_1": {"length": 16, "quality": 0.8421052631578947, "section_id": 956}}, "n3337": {"so_29225448_29225695_1": {"length": 16, "quality": 0.8421052631578947, "section_id": 944}}, "n4659": {"so_29225448_29225695_1": {"length": 16, "quality": 0.8421052631578947, "section_id": 1017}}}, "29225695": {"Id": "29225695", "PostTypeId": "2", "Body": "<p>pop_back() will make your iterator invalid.</p>\n<p>Following explains more in detail (<a href=\"https://stackoverflow.com/questions/62340/does-pop-back-really-invalidate-all-iterators-on-an-stdvector\">Does pop_back() really invalidate *all* iterators on an std::vector?</a>):</p>\n<blockquote>\n<p id=\"so_29225448_29225695_0\"><em>Here is your answer, directly from The Holy Standard:</em></p>\n<p id=\"so_29225448_29225695_1\"><strong>23.2.4.2</strong> A vector satisfies all of the requirements of a container and of a reversible container (given in two tables in 23.1) and of a\n  sequence, including most of the optional sequence requirements\n  (23.1.1).</p>\n<p id=\"so_29225448_29225695_2\"><strong>23.1.1.12</strong> Table 68 expressiona.<strong>pop_back()</strong> return typevoid operational semanticsa.<strong>erase(--a.end())</strong> containervector, list, deque </p>\n<p id=\"so_29225448_29225695_3\"><em>Notice that\n  a.pop_back is equivalent to a.erase(--a.end()). Looking at vector's\n  specifics on erase:</em></p>\n<p id=\"so_29225448_29225695_4\"><strong>23.2.4.3.3</strong> - iterator erase(iterator position) - effects - <strong>Invalidates all the iterators and references after the point of the erase</strong></p>\n<p id=\"so_29225448_29225695_5\"><em>Therefore, once you call pop_back, any iterators to the previously\n  final element (which now no longer exists) are invalidated.</em></p>\n</blockquote>\n<hr>\n<p>More information: FAQ \"Iterator invalidation rules\":\n<a href=\"https://stackoverflow.com/questions/6438086/iterator-invalidation-rules\">Iterator invalidation rules</a></p>\n</hr>", "LastEditorUserId": "-1", "LastActivityDate": "2015-03-24T05:35:31.417", "Score": "0", "CreationDate": "2015-03-24T05:35:31.417", "ParentId": "29225448", "CommentCount": "1", "LastEditDate": "2017-05-23T12:12:55.317", "OwnerUserId": "1686856"}, "29225825": {"Id": "29225825", "PostTypeId": "2", "Body": "<p>Based on your comments, it seems you want to move through both iterator ranges in tandem - that only needs one <code>for</code> loop, like this:</p>\n<pre><code>auto an = a.rbegin();\nfor (auto bn = b.rbegin();\n     an != a.rend() &amp;&amp; bn != b.rend();\n     ++an, ++bn, indexA--)\n    if (*an - *bn &gt;= 0)\n        returnVal.push_back(*an - *bn);\n    else\n    {\n        brrow = *an + 10;\n        --(a.at(indexA - 1)); // remove 1 from the spot ahead of current digit\n                              // shouldn't you check for rend() first????\n        returnVal.push_back(brrow - *bn);\n    }\n</code></pre>\n<p>Note that both iterators can be declared as <code>for</code>-loop local <em>if</em> you know they'll be of the exact same type:</p>\n<pre><code>for (auto an = a.rbegin(), bn = b.rbegin(); ...\n</code></pre>\n", "LastActivityDate": "2015-03-24T05:47:29.703", "CommentCount": "1", "CreationDate": "2015-03-24T05:47:29.703", "ParentId": "29225448", "Score": "1", "OwnerUserId": "410767"}, "29225448": {"ViewCount": "758", "Body": "<p>Can some one shed some light on why this code snipit will run though the loop once but then give an assertion failure Expression: vector iterator not decrementable?</p>\n<pre><code>for (auto an = a.rbegin(); an != a.rend(); ++an, indexA--) //first number \n{\n        for (auto bn = b.rbegin(); bn != b.rend(); ++bn) //second number\n        {\n            if (*an - *bn &gt;= 0)\n            {\n                returnVal.push_back(*an - *bn);\n                a.pop_back();\n                b.pop_back();\n            }\n            else\n            {\n                brrow = *an + 10;\n                a.at(indexA - 1) = a.at(indexA - 1) - 1; // remove 1 from the spot ahead of current digit\n                returnVal.push_back(brrow - *bn);\n                a.pop_back();\n                b.pop_back();\n            }\n        }   \n}\n</code></pre>\n", "AcceptedAnswerId": "29225825", "Title": "Vector Iterator not decrementable?", "CreationDate": "2015-03-24T05:13:03.757", "Id": "29225448", "CommentCount": "6", "PostTypeId": "1", "LastActivityDate": "2015-03-24T06:00:04.630", "Score": "0", "OwnerUserId": "4196849", "Tags": "<c++><vector>", "AnswerCount": "2"}});