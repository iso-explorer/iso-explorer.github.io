post_cb({"22233551": {"ParentId": "22233148", "CommentCount": "5", "Body": "<p>The final effects are almost the same.  In C++03, the use of <em>default-initialize</em> was restricted to non-POD class type, so the last point never applied.  In C++11, the standard simplifies the wording by eliminating the condition with regards to where default-initialization was used, and changes the definition of default-initialization to cover all of the cases in a way to correspond what happened before.</p>\n", "OwnerUserId": "649665", "PostTypeId": "2", "Id": "22233551", "Score": "21", "CreationDate": "2014-03-06T19:01:17.390", "LastActivityDate": "2014-03-06T19:01:17.390"}, "22234327": {"ParentId": "22233148", "CommentCount": "0", "CreationDate": "2014-03-06T19:41:04.440", "Id": "22234327", "PostTypeId": "2", "OwnerDisplayName": "user1508519", "Score": "3", "Body": "<p>According to <a href=\"http://en.cppreference.com/w/cpp/language/default_initialization\" rel=\"nofollow\">cppreference.com</a> (because it uses friendlier language than the standard):</p>\n<blockquote>\n<p id=\"so_22233148_22234327_0\">Default initialization is performed in three situations:</p>\n<blockquote>\n<p id=\"so_22233148_22234327_4\">3) when a base class or a non-static data member is not mentioned in a\n    constructor initializer list and that constructor is called.</p>\n</blockquote>\n<p id=\"so_22233148_22234327_2\">Value initialization is performed in three situations:</p>\n<blockquote>\n<p id=\"so_22233148_22234327_5\">3,7) when a non-static data member or a base class is initialized\n    using a member initializer with an empty pair of parentheses <code>or braces (since C++11)</code></p>\n</blockquote>\n</blockquote>\n<p>Note that the C++11 part belongs with the <code>or braces</code>, not with the entire paragraph.</p>\n<p>And:</p>\n<blockquote>\n<p id=\"so_22233148_22234327_6\">To value-initialize an object of type T means:<br>\n  \u2014 if T is an array type, then each element is value-initialized;<br>\n  \u2014 otherwise, the object is zero-initialized </br></br></p>\n</blockquote>\n<p>So in C++11 <em>default-initialization</em> does not zero-initialize members but <em>value-initialization</em> does.</p>\n", "LastActivityDate": "2014-03-06T19:41:04.440"}, "23955849": {"ParentId": "22233148", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Strictly speaking, the definition of <em>default-initialize</em> has changed from C++03 to C++11. But one has also to take into account that the situations when an object is _default-initialize_d changed:</p>\n<p>\u00a78.5p9 C++03 states:</p>\n<blockquote>\n<p id=\"so_22233148_23955849_0\">If no initializer is specified for an object, and the object is of (possibly cv-qualified) non-POD class type (or array thereof), the object shall be default-initialized; if the object is of const-qualified type, the underlying class type shall have a user-declared default constructor. Otherwise, if no initializer is specified for a nonstatic object, the object and its subobjects, if any, have an indeterminate initial value; if the object or any of its subobjects are of const-qualified type, the program is ill-formed.</p>\n</blockquote>\n<p>\u00a78.5p11 C++11 states:</p>\n<blockquote>\n<p id=\"so_22233148_23955849_1\">If no initializer is specified for an object, the object is default-initialized; if no initialization is performed, an object with automatic or dynamic storage duration has indeterminate value.</p>\n</blockquote>\n<p>As @JamesKanze already pointed out, <em>default-initialization</em> is performed in C++03 when no initializer for an object of non-POD class type is specified. In C++11 an object (of arbitrary type) is <em>default-initialized</em> if no initializer is specified. Because of this change, the definition of <em>default-initialize</em> had also to be changed in order to be compatible with C++03.</p>\n<hr>\n<p>Your example has nothing to do with <em>default-initialization</em>. It has been always the case that an object whose initializer is an empty set of parentheses is <em>value-initialized</em>.</p>\n</hr>", "OwnerUserId": "1770418", "LastEditorUserId": "1770418", "LastEditDate": "2014-05-30T13:51:15.070", "Id": "23955849", "Score": "2", "CreationDate": "2014-05-30T13:31:58.240", "LastActivityDate": "2014-05-30T13:51:15.070"}, "bq_ids": {"n4140": {"so_22233148_23955849_1": {"section_id": 3291, "quality": 0.8571428571428571, "length": 12}, "so_22233148_22233148_0": {"section_id": 3286, "quality": 1.0, "length": 4}, "so_22233148_22233148_2": {"section_id": 3286, "quality": 1.0, "length": 5}, "so_22233148_22234327_6": {"section_id": 3287, "quality": 1.0, "length": 13}, "so_22233148_22233148_1": {"section_id": 3286, "quality": 0.75, "length": 9}, "so_22233148_22234327_1": {"section_id": 461, "quality": 0.5833333333333334, "length": 7}, "so_22233148_22234327_4": {"section_id": 461, "quality": 0.5833333333333334, "length": 7}}, "n3337": {"so_22233148_23955849_1": {"section_id": 3161, "quality": 1.0, "length": 14}, "so_22233148_22233148_0": {"section_id": 3156, "quality": 1.0, "length": 4}, "so_22233148_22233148_2": {"section_id": 3156, "quality": 1.0, "length": 5}, "so_22233148_22234327_1": {"section_id": 451, "quality": 0.5833333333333334, "length": 7}, "so_22233148_22233148_1": {"section_id": 3156, "quality": 0.8333333333333334, "length": 10}, "so_22233148_22234327_6": {"section_id": 3157, "quality": 1.0, "length": 13}, "so_22233148_22234327_4": {"section_id": 451, "quality": 0.5833333333333334, "length": 7}}, "n4659": {"so_22233148_23955849_1": {"section_id": 4053, "quality": 0.8571428571428571, "length": 12}, "so_22233148_22233148_2": {"section_id": 4048, "quality": 1.0, "length": 5}, "so_22233148_22234327_1": {"section_id": 484, "quality": 0.5833333333333334, "length": 7}, "so_22233148_22234327_4": {"section_id": 484, "quality": 0.5833333333333334, "length": 7}, "so_22233148_22234327_6": {"section_id": 4049, "quality": 0.9230769230769231, "length": 12}, "so_22233148_22233148_1": {"section_id": 384, "quality": 0.5833333333333334, "length": 7}}}, "22233148": {"CommentCount": "4", "AcceptedAnswerId": "22233551", "PostTypeId": "1", "LastEditorUserId": "140719", "CreationDate": "2014-03-06T18:39:09.687", "LastActivityDate": "2014-05-30T13:51:15.070", "LastEditDate": "2014-05-30T12:20:35.773", "ViewCount": "2914", "FavoriteCount": "4", "Title": "Meaning of default initialization changed in C++11?", "Id": "22233148", "Score": "28", "Body": "<p>C++2003 8.5/5 says:</p>\n<blockquote>\n<p id=\"so_22233148_22233148_0\">To <em>default-initialize</em> an object of type T means:</p>\n<p id=\"so_22233148_22233148_1\">\u2014 if T is a non-POD class type (clause 9), the default constructor for T is called (and the initialization is\n  ill-formed if T has no accessible default constructor);</p>\n<p id=\"so_22233148_22233148_2\">\u2014 if T is an array type, each element is default-initialized;</p>\n<p id=\"so_22233148_22233148_3\">\u2014 otherwise, the object is <strong>zero-initialized</strong>.</p>\n</blockquote>\n<p>[Emphasis added.]</p>\n<p>The C++2011 standard changed that last item to</p>\n<blockquote>\n<p id=\"so_22233148_22233148_4\">\u2014 otherwise, <strong>no initialization is performed</strong>.</p>\n</blockquote>\n<p>This seems like it would be a breaking change for some programs.  Was this intentional?</p>\n<p><strong>Edit</strong></p>\n<p>Here's some code to motivate this question:</p>\n<pre><code>class Foo {\n  public:\n    Foo() : m_values() {}\n\n    int m_values[3];\n};\n</code></pre>\n<p>Before C++11, I thought the explicit mention of <code>m_values</code> in the default constructor would <em>default-initialize</em> that array.  And since the elements of the array are scalar, I expected that to mean the values were all set to 0.</p>\n<p>In C++11, it seems there's no longer a guarantee that this will happen.  But maybe, as Mooing Duck pointed out in the comments, perhaps this is no longer a case of default initialization but some other form which preserves the expected behavior.  Citations welcome.</p>\n", "Tags": "<c++><c++11><initialization><language-lawyer><c++-faq>", "OwnerUserId": "1386054", "AnswerCount": "3"}});