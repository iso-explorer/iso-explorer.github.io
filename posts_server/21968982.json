post_cb({"bq_ids": {"n4140": {"so_21968982_21969764_1": {"length": 25, "quality": 0.9615384615384616, "section_id": 7023}, "so_21968982_21969764_0": {"length": 71, "quality": 0.9594594594594594, "section_id": 447}}, "n3337": {"so_21968982_21969764_1": {"length": 25, "quality": 0.9615384615384616, "section_id": 6769}, "so_21968982_21969764_0": {"length": 71, "quality": 0.9594594594594594, "section_id": 438}}, "n4659": {"so_21968982_21969764_1": {"length": 25, "quality": 0.9615384615384616, "section_id": 8520}, "so_21968982_21969764_0": {"length": 71, "quality": 0.9594594594594594, "section_id": 469}}}, "21968982": {"ViewCount": "159", "Body": "<p>My sample code is as follows:</p>\n<pre><code>class Base {\npublic:\n    Base() { callVirtualfunc(); } \n\n    virtual void funca() = 0;\n\n    void callVirtualfunc() { funca(); }\n};\n// -----------------------------------------\nclass Derived : public Base{\npublic:\n    Derived() : Base() {}\n\n    void funca() { cout&lt;&lt;\"Hello world\"&lt;&lt;endl; }\n};\n</code></pre>\n<p>I understand that I cannot call pure virtual function inside the constructor/destructor. I am calling them inside a function <code>callVirtualfunc()</code>.\nI am getting ::  <code>C++ runtime abort: an undefined pure virtual function was called</code>.</p>\n<p>I am doing this to:</p>\n<ul>\n<li>Enforce all the derived classes to implement <code>funca()</code>.</li>\n<li>I also want to guarantee derived classes to call <code>funca()</code>.</li>\n</ul>\n<p>I am not able to understand my mistake here please help.\nIs there a workaround to achieve what I want.</p>\n", "AcceptedAnswerId": "21969764", "Title": "How to access derived class pure virtual implementation in base class?", "CreationDate": "2014-02-23T13:42:24.083", "Id": "21968982", "CommentCount": "12", "LastEditDate": "2014-02-23T14:52:04.497", "PostTypeId": "1", "LastEditorUserId": "2684539", "LastActivityDate": "2014-02-23T14:52:04.497", "Score": "0", "OwnerUserId": "2666007", "Tags": "<c++>", "AnswerCount": "1"}, "21969764": {"Id": "21969764", "PostTypeId": "2", "Body": "<p>According to the C++ Standard</p>\n<blockquote>\n<p id=\"so_21968982_21969764_0\">4 Member functions, including virtual functions (10.3), can be called\n  during construction or destruction (12.6.2). When a virtual function\n  is called directly or indirectly from a constructor or from a\n  destructor, including during the construction or destruction of the\n  class\u2019s non-static data members, and the object to which the call\n  applies is the object (call it x) under construction or destruction,\n  the function called is the final overrider in the constructor\u2019s or\n  destructor\u2019s class and not one overriding it in a more-derived class.\n  If the virtual function call uses an explicit class member access\n  (5.2.5) and the object expression refers to the complete object of x\n  or one of that object\u2019s base class subobjects but not x or one of its\n  base class subobjects, the behavior is undefined.</p>\n</blockquote>\n<p>and</p>\n<blockquote>\n<p id=\"so_21968982_21969764_1\">6 Member functions can be called from a constructor (or destructor) of\n  an abstract class; the effect of making a virtual call (10.3) to a\n  pure virtual function directly or indirectly for the object being\n  created (or destroyed) from such a constructor (or destructor) is\n  undefined</p>\n</blockquote>\n<p>So in your example when the base class constructor will be called it in turn will call its pure virtual function not the overriden function of the derived class. And according to the second quote of the Standard the behaviour of the program in such a case is undefined.</p>\n", "LastActivityDate": "2014-02-23T14:51:14.140", "Score": "1", "CreationDate": "2014-02-23T14:51:14.140", "ParentId": "21968982", "CommentCount": "0", "OwnerUserId": "2877241"}});