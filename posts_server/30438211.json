post_cb({"30438211": {"CommentCount": "0", "ViewCount": "346", "PostTypeId": "1", "LastEditorUserId": "2069064", "CreationDate": "2015-05-25T12:17:31.423", "LastActivityDate": "2015-05-25T12:22:35.630", "Title": "Single line comment continuation", "AcceptedAnswerId": "30438305", "LastEditDate": "2015-05-25T12:21:47.350", "Id": "30438211", "Score": "1", "Body": "<p>From the C++ standard (going back to at least C++98) \u00a7 2.2, note 2 states:</p>\n<blockquote id=\"so_30438211_30438211_0\">\nEach instance of a backslash character (\\) immediately followed by a new-line character is deleted, splicing physical source lines to form logical source lines. Only the last backslash on any physical source line shall be eligible for being part of such a splice. Except for splices reverted in a raw string literal, if a splice results in a character sequence that matches the syntax of a universal-character-name, the behavior is unde\ufb01ned. A source \ufb01le that is not empty and that does not end in a new-line character, or that ends in a new-line character immediately preceded by a backslash character before any such splicing takes place, shall be processed as if an additional new-line character were appended to the \ufb01le. \n</blockquote>\n<p>And, section \u00a7 2.7 states:</p>\n<blockquote id=\"so_30438211_30438211_1\">\nThe characters /* start a comment, which terminates with the characters */. These comments do not nest. The characters // start a comment, which terminates with the next new-line character. If there is a form-feed or a vertical-tab character in such a comment, only white-space characters shall appear between it and the new-line that terminates the comment; no diagnostic is required. [Note: The comment characters //, /*, and */ have no special meaning within a // comment and are treated just like other characters. Similarly, the comment characters // and /* have no special meaning within a /* comment. ] \n</blockquote>\n<p>I would take these two together to mean that the following:</p>\n<pre><code>// My comment \\\nis valid\n\n// My comment \\ still valid \\\nis valid\n</code></pre>\n<p>are legal in C++98. In GCC 4.9.2, these both compile without any diagnostic messages. In MSVC 2013, these both produce the following:</p>\n<pre><code>warning C4010: single-line comment contains line-continuation character\n</code></pre>\n<p>If you have warnings as errors enabled (which, I do), this causes the program to not compile successfully (without warnings-as-errors, it works just fine). Is there something in the standard that disallows single-line comment continuations, or is this a case of MSVC non-compliance with the standard?</p>\n", "Tags": "<c++><comments>", "OwnerUserId": "3493731", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_30438211_30438211_1": {"section_id": 5328, "quality": 0.9074074074074074, "length": 49}, "so_30438211_30438211_0": {"section_id": 5313, "quality": 0.9420289855072463, "length": 65}}, "n3337": {"so_30438211_30438211_1": {"section_id": 5125, "quality": 0.9074074074074074, "length": 49}, "so_30438211_30438211_0": {"section_id": 5110, "quality": 0.8260869565217391, "length": 57}}, "n4659": {"so_30438211_30438211_0": {"section_id": 6737, "quality": 0.9420289855072463, "length": 65}, "so_30438211_30438211_1": {"section_id": 6749, "quality": 0.9074074074074074, "length": 49}}}, "30438305": {"ParentId": "30438211", "CommentCount": "5", "Body": "<p>I'd say it's MS being sensitive to the fact that if you do something like:</p>\n<pre><code>#define macro() \\\n    some stuff \\\n    // Intended as comment \\\n    more stuff\n</code></pre>\n<p>then you get VERY interesting errors when you use <code>macro()</code> in the code.</p>\n<p>Or other simply accidentally typing a comment like this:</p>\n<pre><code>// The files for foo-project are in c:\\projects\\foo\\\nint blah;\n</code></pre>\n<p>(Strange errors for \"undefined variable blah\" occurs)</p>\n<p>I would NEVER use line continuation in a single-line comment, but if you have some good reason to, just turn THAT warning off in MSVC.</p>\n<p>Also as Mike says: Warnings are not even covered by the standard - it only says what needs to be an error. If you enable \"warnings are errors\", you will have to either be selective about what warnings you enable, or accept that some constructs that are technically valid (but dubious) will be unacceptable in the build, because the compiler maker has decided to warn about it. Try writing <code>if (c = getchar())</code> in gcc or clang and see how far you get with much -Werror and warnings on \"high\". Yet it is perfectly valid according to the standard.</p>\n", "OwnerUserId": "1919155", "PostTypeId": "2", "Id": "30438305", "Score": "1", "CreationDate": "2015-05-25T12:22:35.630", "LastActivityDate": "2015-05-25T12:22:35.630"}, "30438291": {"ParentId": "30438211", "CommentCount": "2", "Body": "<p>It's not a question of compliance. You've specifically asked the compiler to treat a valid construct as an error, so that's what it does.</p>\n<p>GCC will give the same warning (or error, if requested) if you specify <code>-Wcomment</code> or <code>-Wall</code>.</p>\n", "OwnerUserId": "204847", "PostTypeId": "2", "Id": "30438291", "Score": "3", "CreationDate": "2015-05-25T12:21:39.473", "LastActivityDate": "2015-05-25T12:21:39.473"}});