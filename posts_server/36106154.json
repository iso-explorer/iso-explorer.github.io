post_cb({"36106154": {"CommentCount": "4", "AcceptedAnswerId": "36258868", "PostTypeId": "1", "LastEditorUserId": "2069064", "CreationDate": "2016-03-19T19:28:13.390", "LastActivityDate": "2016-07-29T08:45:47.807", "LastEditDate": "2016-03-24T02:37:30.160", "ViewCount": "862", "FavoriteCount": "3", "Title": "How to handle or avoid exceptions from C++11 <regex> matching functions (\u00a728.11)?", "Id": "36106154", "Score": "10", "Body": "<p>Starting from C++11 the <code>&lt;regex&gt;</code> headers defines the functions <code>std::regex_match</code>, <code>std::regex_search</code> and <code>std::regex_replace</code> in <a href=\"http://eel.is/c++draft/re.alg\">\u00a728.11</a>. I guess there is a valid reason for these functions not to be <code>noexcept</code>, but I couldn't find any reference about what these might throw or why.</p>\n<ol>\n<li><strong>What types of exceptions may these functions throw?</strong></li>\n<li><strong>What runtime conditions cause these exceptions to be thrown?</strong>\n<ul>\n<li>Does the standard ensure that for some sets of arguments these functions never throw, e.g. does it ensure that <code>regex_match(anyString, regex(\".\"))</code> never throws?</li>\n</ul></li>\n</ol>\n<p>PS: Since some of these exceptions probably inherit from <code>std::runtime_error</code>, they <a href=\"https://stackoverflow.com/questions/36106747/how-to-construct-a-stdexcept-exception-without-throwing\">might throw <code>std::bad_alloc</code> during their construction.</a></p>\n", "Tags": "<c++><regex><c++11><exception><language-lawyer>", "OwnerUserId": "3919155", "AnswerCount": "5"}, "36214300": {"ParentId": "36106154", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>I believe this is what exceptions you should be handling.<br>\nFor compiling there is 3 exceptions.<br>\nFor search/match/replace you probably only need to handle 2.  </br></br></p>\n<p>Btw, if you <em>don't</em> handle exceptions the way described below, then your<br>\ncode will be flying blind, and not meant for human consumption.</br></p>\n<pre><code>std::regex Regex;\n\nbool CompileRegex( std::string&amp; strRx, unsigned int rxFlags )\n{\n    try \n    {\n        Regex.assign( strRx, rxFlags );\n    }\n    catch ( std::regex_error &amp; e )\n    {\n            // handle e\n        return false;\n    }\n    catch ( std::out_of_range &amp; e )\n    {\n            // handle e\n        return false;\n    }\n    catch ( std::runtime_error &amp; e )\n    {\n            // handle e\n        return false;\n    }\n    return true;\n}\n\nbool  UseRegex( std::string&amp; strSource, std::string&amp; strOut, std::string strReplace )\n{\n    try\n    {\n    if ( std::regex::regex_search( strSource, _match, Regex )\n    {}\n    // or\n    if ( strOut = std::regex::regex_replace( strSource, Regex, strReplace ) )\n    {}\n    }\n    catch ( std::out_of_range &amp; e )\n    {\n            // handle e\n        return false;\n    }\n    catch ( std::runtime_error &amp; e )\n    {\n            // handle e\n        return false;\n    }\n    return true;    \n}\n</code></pre>\n", "OwnerUserId": "557597", "LastEditorUserId": "557597", "LastEditDate": "2016-03-27T22:29:41.690", "Id": "36214300", "Score": "1", "CreationDate": "2016-03-25T05:02:09.800", "LastActivityDate": "2016-03-27T22:29:41.690"}, "36166656": {"ParentId": "36106154", "PostTypeId": "2", "CommentCount": "10", "Body": "<p><code>regex_error</code> is the only exception mentioned as being thrown from any of the classes or algorithms in <code>&lt;regex&gt;</code>. There are two basic categories of errors: malformed regular expressions and failure to process the match. </p>\n<p>The constructors for <code>basic_regex</code> can throw a <code>regex_error</code> (as per [re.regex.construct]<a href=\"http://eel.is/c++draft/re.regex.construct#3\" rel=\"nofollow\">\\3</a>, <a href=\"http://eel.is/c++draft/re.regex.construct#7\" rel=\"nofollow\">\\7</a>, <a href=\"http://eel.is/c++draft/re.regex.construct#14\" rel=\"nofollow\">\\14</a>, and <a href=\"http://eel.is/c++draft/re.regex.construct#17\" rel=\"nofollow\">\\17</a>) if the argument (or sequence) passed in is \"not a valid regular expression.\" The same is true if you try to assign a <code>basic_regex</code> to an invalid regular expression (<a href=\"http://eel.is/c++draft/re.regex#re.regex.assign-15\" rel=\"nofollow\">[re.regex.assign]/15</a>).</p>\n<p>Separately from that, the algorithms can also throw <code>regex_error</code>(<a href=\"http://eel.is/c++draft/re.except#1\" rel=\"nofollow\">[re.except]/1</a>):</p>\n<blockquote>\n<p id=\"so_36106154_36166656_0\">The functions described in this Clause report errors by throwing exceptions of type <code>regex_error</code>. If such an exception <code>e</code> is thrown, <code>e.code()</code> shall return either <code>regex_constants::error_complexity</code> or <code>regex_constants::error_stack</code>.</p>\n</blockquote>\n<p>where those two error codes mean (<a href=\"http://eel.is/c++draft/re#re.err-1\" rel=\"nofollow\">[re.err]</a>):</p>\n<blockquote>\n<p id=\"so_36106154_36166656_1\"><code>error_complexity</code>: The complexity of an attempted match against a regular expression exceeded a pre-set level.<br>\n<code>error_stack</code>: There was insufficient memory to determine whether the regular expression could match the specified character sequence.</br></p>\n</blockquote>\n", "OwnerUserId": "2069064", "LastEditorUserId": "2069064", "LastEditDate": "2016-03-24T01:02:28.553", "Id": "36166656", "Score": "4", "CreationDate": "2016-03-22T22:46:28.630", "LastActivityDate": "2016-03-24T01:02:28.553"}, "36258868": {"ParentId": "36106154", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>C++11 <a href=\"http://eel.is/c++draft/re.badexp\" rel=\"nofollow\">\u00a728.6</a> states</p>\n<blockquote>\n<p id=\"so_36106154_36258868_0\">The class <code>regex_error</code> defines the type of objects thrown as exceptions\n  to report errors from the regular expression library.</p>\n</blockquote>\n<p>Which means that the <code>&lt;regex&gt;</code> library should not throw anything else by itself. You are correct that constructing a <code>regex_error</code> which inherits from <code>runtime_error</code> may throw <code>bad_alloc</code> during construction due to out-of-memory conditions, therefore you must also check for this in your error handling code. Unfortunately this makes it impossible to determine which <code>regex_error</code> construction actually throws <code>bad_alloc</code>.</p>\n<p>For regular expressions algorithms in \u00a728.11 it is stated in <a href=\"http://eel.is/c++draft/re.except#1\" rel=\"nofollow\">\u00a728.11.1</a> that</p>\n<blockquote>\n<p id=\"so_36106154_36258868_1\">The algorithms described in this subclause may throw an exception of type <code>regex_error</code>. If such an exception <code>e</code> is thrown, <code>e.code()</code> shall return either <code>regex_constants::error_complexity</code> or <code>regex_-constants::error_stack</code>.</p>\n</blockquote>\n<p>This means that if the functions in \u00a728.11  ever throw a <code>regex_error</code>, it shall hold one of these codes and nothing else. However, note also that things you pass to the <code>&lt;regex&gt;</code> library, such as allocators etc might also throw, e.g. the allocator of <code>match_results</code> which may trigger if results are added to the given <code>match_results</code> container. Also note that \u00a728.11 has shorthand functions which <em>\"as if\"</em> construct <code>match_results</code>, such as</p>\n<pre><code>template &lt;class BidirectionalIterator, class charT, class traits&gt;\nbool regex_match(BidirectionalIterator first, BidirectionalIterator last,\n                 const basic_regex&lt;charT, traits&gt; &amp; e,\n                 regex_constants::match_flag_type flags =\n                 regex_constants::match_default);\n\ntemplate &lt;class BidirectionalIterator, class charT, class traits&gt;\nbool regex_search(BidirectionalIterator first, BidirectionalIterator last,\n                  const basic_regex&lt;charT, traits&gt; &amp; e,\n                  regex_constants::match_flag_type flags =\n                  regex_constants::match_default); \n</code></pre>\n<p>and possibly others. Since such might construct and use <code>match_results</code> with the standard <code>allocator</code> internally, they might throw anything <code>std::allocator</code> throws. Therefore your simple example of <code>regex_match(anyString, regex(\".\"))</code> might also throw due to construction and usage of the default allocator.</p>\n<p>Another caveat to note that for some <code>&lt;regex&gt;</code> functions and classes it is currently impossible to determine whether a <code>bad_alloc</code> was thrown by some allocator or during construction of a <code>regex_error</code> exception.</p>\n<p>In general, if you need something with a better exception specifications avoid using <code>&lt;regex&gt;</code>. If you require simple pattern matching you're better off rolling your own safe match/search/replace functions, because it is impossible to constrain your regular expressions to avoid these exceptions in a portable nor forwards-compatible manner, even using an empty regular expression <code>\"\"</code> might give you an exception.</p>\n<p>PS: Note that the C++11 standard is rather poorly written in some aspects, lacking complete cross referencing. E.g. there's no explicit notice under the clauses for the methods of <code>match_results</code> to throw anything, whereas <a href=\"http://eel.is/c++draft/re.results#re.results.const-1\" rel=\"nofollow\">\u00a728.10.1.1</a> states (emphasis mine):</p>\n<blockquote>\n<p id=\"so_36106154_36258868_2\">In all <code>match_results</code> constructors, <strong>a copy of the <code>Allocator</code></strong> argument shall be used <strong>for any memory allocation performed</strong> by the constructor or member functions during the lifetime of the object.</p>\n</blockquote>\n<p>So take care when browsing the standards like a lawyer! ;-)</p>\n", "OwnerUserId": "6123289", "LastEditorUserId": "6123289", "LastEditDate": "2016-07-29T08:45:47.807", "Id": "36258868", "Score": "2", "CreationDate": "2016-03-28T08:44:02.520", "LastActivityDate": "2016-07-29T08:45:47.807"}, "36106219": {"ParentId": "36106154", "PostTypeId": "2", "CommentCount": "5", "Body": "<p><a href=\"http://www.cplusplus.com/reference/regex/regex_error/\" rel=\"nofollow\">This link here might help</a>. As you can see most of these are about invalid regular expression, more so than invalid inputs (which should and don't throw any errors, they just don't match.</p>\n<p>Going through the <a href=\"http://en.cppreference.com/w/cpp/regex/regex_replace\" rel=\"nofollow\">here</a>, I can see that regex_replace and regex constructor may throw one of the regex_error types of exception. I also seen some memory related exceptions, but as said these are runtime and could be thrown from any piece of code. Since documentation does not provide anything else, the only way to find out this would be from the code itself.</p>\n", "OwnerUserId": "1643676", "LastEditorUserId": "418748", "LastEditDate": "2016-03-21T09:39:09.260", "Id": "36106219", "Score": "0", "CreationDate": "2016-03-19T19:33:50.937", "LastActivityDate": "2016-03-21T09:39:09.260"}, "36106226": {"ParentId": "36106154", "CommentCount": "1", "Body": "<p>See pp735-6 of Josuttis' \"The C++ Standard Library\" 2nd Edition. Here's a list of exceptions, each with a text explanation on the next two lines</p>\n<pre><code>std::regex_constants::error_collate:\n\"error_collate: \"\n\"regex has invalid collating element name\";\nstd::regex_constants::error_ctype:\n\"error_ctype: \"\n\"regex has invalid character class name\";\nstd::regex_constants::error_escape:\n\"error_escape: \"\n\"regex has invalid escaped char. or trailing escape\";\nstd::regex_constants::error_backref:\n\"error_backref: \"\n\"regex has invalid back reference\";\nstd::regex_constants::error_brack:\n\"error_brack: \"\n\"regex has mismatched \u2019[\u2019 and \u2019]\u2019\";\nstd::regex_constants::error_paren:\n\"error_paren: \"\n\"regex has mismatched \u2019(\u2019 and \u2019)\u2019\";\nstd::regex_constants::error_brace:\n\"error_brace: \"\n\"regex has mismatched \u2019{\u2019 and \u2019}\u2019\";\nstd::regex_constants::error_badbrace:\n\"error_badbrace: \"\n\"regex has invalid range in {} expression\";\nstd::regex_constants::error_range:\n\"error_range: \"\n\"regex has invalid character range, such as \u2019[b-a]\u2019\";\nstd::regex_constants::error_space:\n\"error_space: \"\n\"insufficient memory to convert regex into finite state\";\nstd::regex_constants::error_badrepeat:\n\"error_badrepeat: \"\n\"one of *?+{ not preceded by valid regex\";\nstd::regex_constants::error_complexity:\n\"error_complexity: \"\n\"complexity of match against regex over pre-set level\";\nstd::regex_constants::error_stack:\n\"error_stack: \"\n\"insufficient memory to determine regex match\";\n</code></pre>\n", "OwnerUserId": "5699329", "PostTypeId": "2", "Id": "36106226", "Score": "0", "CreationDate": "2016-03-19T19:34:32.460", "LastActivityDate": "2016-03-19T19:34:32.460"}, "bq_ids": {"n4140": {"so_36106154_36166656_0": {"section_id": 5232, "quality": 0.6111111111111112, "length": 11}, "so_36106154_36258868_2": {"section_id": 5189, "quality": 1.0, "length": 15}, "so_36106154_36166656_1": {"section_id": 5059, "quality": 0.96, "length": 24}, "so_36106154_36258868_1": {"section_id": 5232, "quality": 0.9411764705882353, "length": 16}, "so_36106154_36258868_0": {"section_id": 5060, "quality": 0.9230769230769231, "length": 12}}, "n3337": {"so_36106154_36166656_0": {"section_id": 5029, "quality": 0.6111111111111112, "length": 11}, "so_36106154_36258868_2": {"section_id": 4986, "quality": 1.0, "length": 15}, "so_36106154_36166656_1": {"section_id": 4856, "quality": 0.96, "length": 24}, "so_36106154_36258868_1": {"section_id": 5029, "quality": 0.9411764705882353, "length": 16}, "so_36106154_36258868_0": {"section_id": 4857, "quality": 0.9230769230769231, "length": 12}}, "n4659": {"so_36106154_36166656_0": {"section_id": 6655, "quality": 0.6111111111111112, "length": 11}, "so_36106154_36258868_2": {"section_id": 6612, "quality": 1.0, "length": 15}, "so_36106154_36166656_1": {"section_id": 6480, "quality": 0.96, "length": 24}, "so_36106154_36258868_1": {"section_id": 6655, "quality": 0.9411764705882353, "length": 16}, "so_36106154_36258868_0": {"section_id": 6481, "quality": 0.9230769230769231, "length": 12}}}});