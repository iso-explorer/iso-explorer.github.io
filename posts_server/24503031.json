post_cb({"24503031": {"CommentCount": "2", "AcceptedAnswerId": "24503406", "PostTypeId": "1", "LastEditorUserId": "434551", "CreationDate": "2014-07-01T05:29:23.957", "LastActivityDate": "2014-07-01T17:04:37.683", "LastEditDate": "2014-07-01T17:04:37.683", "ViewCount": "170", "FavoriteCount": "1", "Title": "Trying to understand how an overloaded function is chosen", "Id": "24503031", "Score": "4", "Body": "<p>I have the following program:</p>\n<pre><code>#include &lt;iostream&gt;\n\nnamespace detail {\n\n    template &lt;class T&gt; char test(int T::*)\n    {\n       std::cout &lt;&lt; \"Came to one\\n\";\n       return 0;\n    }\n\n    template &lt;class T&gt; int test(...)\n    {\n       std::cout &lt;&lt; \"Came to two\\n\";\n       return 0;\n    }\n}\n\nstruct A {};\n\nint main()\n{\n   detail::test&lt;A&gt;(0);\n   detail::test&lt;int&gt;(0);\n}\n</code></pre>\n<p>When tested with g++ 4.8.2, it produces the following output:</p>\n<pre>\nCame to one\nCame to two\n</pre>\n<p>My question: why is the first version of <code>detail::test</code> unambiguously chosen for the first call?</p>\n<p><strong>Update</strong></p>\n<p>In the absence of the first version of <code>details::test</code>, the code from <code>main</code> compiles fine. When it is there, the compiler thinks it's a better match for <code>detail::test&lt;A&gt;()</code> than the second one.</p>\n<p><strong>Update 2</strong></p>\n<p>After reading about <em>a pointer to member is well-formed even for incomplete types or without members of the designated type.</em>, I tried the following and it works.</p>\n<pre><code>struct A;\n\nint main()\n{\n   detail::test&lt;A&gt;(0);\n   detail::test&lt;int&gt;(0);\n}\n</code></pre>\n<p>The C++11 standard has quite a few places to uncover concepts that I wouldn't have thought of.</p>\n", "Tags": "<c++><templates><c++11><g++><overload-resolution>", "OwnerUserId": "434551", "AnswerCount": "2"}, "24503231": {"ParentId": "24503031", "CommentCount": "0", "Body": "<p>In this instance, the first overload gets picked over the second because it is a better fit as far as the <a href=\"http://en.cppreference.com/w/cpp/language/overload_resolution\" rel=\"nofollow\">parameter conversion sequences</a> are concerned - ellipsis conversion sequences rank last.</p>\n", "OwnerUserId": "862351", "PostTypeId": "2", "Id": "24503231", "Score": "2", "CreationDate": "2014-07-01T05:48:58.223", "LastActivityDate": "2014-07-01T05:48:58.223"}, "bq_ids": {"n4140": {"so_24503031_24503406_0": {"section_id": 300, "quality": 1.0, "length": 8}, "so_24503031_24503406_3": {"section_id": 638, "quality": 0.9230769230769231, "length": 12}, "so_24503031_24503406_2": {"section_id": 638, "quality": 0.8888888888888888, "length": 8}, "so_24503031_24503406_1": {"section_id": 300, "quality": 1.0, "length": 7}, "so_24503031_24503406_4": {"section_id": 638, "quality": 0.8333333333333334, "length": 10}}, "n3337": {"so_24503031_24503406_0": {"section_id": 291, "quality": 1.0, "length": 8}, "so_24503031_24503406_3": {"section_id": 628, "quality": 0.9230769230769231, "length": 12}, "so_24503031_24503406_2": {"section_id": 628, "quality": 0.8888888888888888, "length": 8}, "so_24503031_24503406_1": {"section_id": 291, "quality": 1.0, "length": 7}, "so_24503031_24503406_4": {"section_id": 628, "quality": 0.8333333333333334, "length": 10}}, "n4659": {"so_24503031_24503406_0": {"section_id": 307, "quality": 1.0, "length": 8}, "so_24503031_24503406_2": {"section_id": 666, "quality": 0.8888888888888888, "length": 8}, "so_24503031_24503406_1": {"section_id": 307, "quality": 1.0, "length": 7}, "so_24503031_24503406_3": {"section_id": 666, "quality": 0.9230769230769231, "length": 12}, "so_24503031_24503406_4": {"section_id": 666, "quality": 0.8333333333333334, "length": 10}}}, "24503406": {"ParentId": "24503031", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>The compiler goes through the Holy Trinity of Name Lookup, Argument Deduction and Overload Resolution. Name lookup finds two overloads for <code>test</code>, and the argument deduction of a pointer to member will fail for a non-class type, but not for incomplete types or missing members. Finally, out of the viable candidates, overload resolution picks the best match (the ellipsis conversion being the lowest rank).</p>\n<hr>\n<p>There are three relevant Standard quotes here:</p>\n<p>According to the Example in <strong>8.3.3 Pointers to members [dcl.mptr]/2</strong> a pointer to member is well-formed even for incomplete types or without members of the designated type. </p>\n<p>According to <strong>14.8.2 Template argument deduction [temp.deduct]/8</strong>: </p>\n<blockquote>\n<p id=\"so_24503031_24503406_0\">If a substitution results in an invalid type or expression, type\n  deduction fails.</p>\n</blockquote>\n<p>One of the many examples listed is: </p>\n<blockquote>\n<p id=\"so_24503031_24503406_1\">Attempting to create \u201cpointer to member of T\u201d when T is not a class\n  type.</p>\n</blockquote>\n<p>Finally, according to <strong>13.3.3.2 Ranking implicit conversion sequences [over.ics.rank]</strong> the ellipsis <code>(...)</code> overload has the lowest rank of all implicit conversion sequences during overload resolution:</p>\n<blockquote>\n<p id=\"so_24503031_24503406_2\">2 When comparing the basic forms of implicit conversion sequences (as\n  defined in 13.3.3.1) </p>\n<p id=\"so_24503031_24503406_3\">\u2014 a standard conversion sequence (13.3.3.1.1) is\n  a better conversion sequence than a user-defined conversion sequence\n  or an ellipsis conversion sequence, and </p>\n<p id=\"so_24503031_24503406_4\">\u2014 a user-defined conversion\n  sequence (13.3.3.1.2) is a better conversion sequence than an ellipsis\n  conversion sequence (13.3.3.1.3).</p>\n</blockquote>\n<p>Your first call <code>detail::test&lt;A&gt;(0);</code> has two viable candidates, but it picks the first overload because it is a better match . The second call <code>detail::test&lt;int&gt;(0);</code> gives a substition error on the first overload and therefore picks the second match.</p>\n</hr>", "OwnerUserId": "819272", "LastEditorUserId": "924727", "LastEditDate": "2014-07-01T07:58:34.660", "Id": "24503406", "Score": "10", "CreationDate": "2014-07-01T06:04:15.623", "LastActivityDate": "2014-07-01T07:58:34.660"}});