post_cb({"39057240": {"CommentCount": "8", "ViewCount": "74", "PostTypeId": "1", "LastEditorUserId": "718379", "CreationDate": "2016-08-20T18:05:38.693", "LastActivityDate": "2017-02-05T16:53:45.737", "Title": "Initialize more than one non static data member of union", "AcceptedAnswerId": "39057301", "LastEditDate": "2017-02-05T16:53:45.737", "Id": "39057240", "Score": "-1", "Body": "<p>Consider following program which is ill formed according to standard</p>\n<pre><code>union Test {\n    int s{3};\n    float f;\n    Test() {}            \n    Test(float f) : f(f) {} // this should be error\n  };\n\nint main() {\n\n}\n</code></pre>\n<p>C++11 standard <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3376.pdf\" rel=\"nofollow\">N3376</a> clause 12 section 6.2.8 says that ( emphasis mine):</p>\n<blockquote>\n<p id=\"so_39057240_39057240_0\">An attempt to initialize more than one non-static data member of a\n  union renders the program <strong>ill-formed</strong>.</p>\n</blockquote>\n<p>But all the popular 3 compilers ( g++, clang++, MSVC++ ) compiles above program without producing any compiler error or warning. I think it is necessary for a compiler to give diagnosis in this program &amp; program should fail in compilation. </p>\n<p>See live demo tested on g++ <a href=\"http://coliru.stacked-crooked.com/a/308dd3241e2a6b04\" rel=\"nofollow\">here</a>.</p>\n<p>See live demo tested on clang++ <a href=\"http://coliru.stacked-crooked.com/a/378733972e2d2ea3\" rel=\"nofollow\">here</a>.</p>\n<p>Are all the compilers broken here according to standard ? Is this compiler bug ? </p>\n", "Tags": "<c++><c++11><initialization><unions><member-initialization>", "OwnerUserId": "3777958", "AnswerCount": "2"}, "39057268": {"ParentId": "39057240", "CommentCount": "3", "Body": "<p>It is not ill formed as <code>s</code> is a parameter to the constructor </p>\n", "OwnerUserId": "892256", "PostTypeId": "2", "Id": "39057268", "Score": "0", "CreationDate": "2016-08-20T18:09:08.960", "LastActivityDate": "2016-08-20T18:09:08.960"}, "bq_ids": {"n4140": {"so_39057240_39057240_0": {"section_id": 435, "quality": 1.0, "length": 11}, "so_39057240_39057301_0": {"section_id": 435, "quality": 1.0, "length": 17}, "so_39057240_39057301_1": {"section_id": 369, "quality": 0.625, "length": 5}}, "n3337": {"so_39057240_39057240_0": {"section_id": 427, "quality": 1.0, "length": 11}, "so_39057240_39057301_0": {"section_id": 427, "quality": 0.8235294117647058, "length": 14}, "so_39057240_39057301_1": {"section_id": 359, "quality": 0.625, "length": 5}}, "n4659": {"so_39057240_39057240_0": {"section_id": 454, "quality": 1.0, "length": 11}, "so_39057240_39057301_0": {"section_id": 454, "quality": 1.0, "length": 17}, "so_39057240_39057301_1": {"section_id": 454, "quality": 1.0, "length": 8}}}, "39057301": {"ParentId": "39057240", "PostTypeId": "2", "CommentCount": "11", "Body": "<p>The default constructor lets the <code>s</code> member be initialized, so only one member is initialized there.</p>\n<p>The parameterized constructor only initializes the <code>f</code> member, so only one member is initialized there too.</p>\n<p>Each constructor lets only one member be initialized, so the program is well-formed.</p>\n<hr>\n<p>From \u00a712.6.2/9 of <a href=\"http://open-std.org/JTC1/SC22/WG21/docs/papers/2016/n4594.pdf\" rel=\"nofollow\">N4594 (the upcoming C++17 standard)</a>:</p>\n<blockquote>\n<p id=\"so_39057240_39057301_0\">In a non-delegating constructor, if a given potentially constructed subobject is not designated by a <em>mem-initializer-id</em> (including the case where there is no <em>mem-initializer-list</em> because the constructor has no\n  <em>ctor-initializer</em>), then</p>\n<ul>\n<li><p id=\"so_39057240_39057301_1\">(9.1) \u2014 if the entity is a non-static data member that has a default member initializer (9.2) and either</p>\n<ul>\n<li>(9.1.1) \u2014 the constructor\u2019s class is a union (9.3), and no other variant member of that union is designated\n  by a <em>mem-initializer-id</em>...</li>\n</ul>\n<p id=\"so_39057240_39057301_2\">[Unrelated text]</p></li>\n</ul>\n</blockquote>\n<p>What the above quote basically says, is that <em>brace-or-equal-initializer</em> will only execute if there are no <em>mem-initializer-id</em>.</p>\n<p>There is also language in the standard that says a union may only have a single <em>brace-or-equal-initializer</em>.</p>\n</hr>", "OwnerUserId": "440558", "LastEditorUserId": "440558", "LastEditDate": "2016-08-20T19:09:56.363", "Id": "39057301", "Score": "4", "CreationDate": "2016-08-20T18:13:05.317", "LastActivityDate": "2016-08-20T19:09:56.363"}});