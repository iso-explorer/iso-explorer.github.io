post_cb({"48227334": {"Id": "48227334", "PostTypeId": "2", "Body": "<p>From <a href=\"http://en.cppreference.com/w/cpp/types/numeric_limits/is_exact\" rel=\"noreferrer\"><code>is_exact</code></a> <em>cppreference</em> page:</p>\n<blockquote>\n<p id=\"so_48227296_48227334_0\"><strong>Notes</strong></p>\n<p id=\"so_48227296_48227334_1\">While all fundamental types T for which\n  <code>std::numeric_limits&lt;T&gt;::is_exact==true</code> are integer types, <em>a library\n  may define exact types that aren't integers</em>, e.g. a rational\n  arithmetics type representing fractions.</p>\n</blockquote>\n<hr>\n<p>And, as @Holt has mentioned, the standard describes it as well:</p>\n<blockquote>\n<p id=\"so_48227296_48227334_2\">21.3.4.1 numeric_limits members [numeric.limits.members]</p>\n<p id=\"so_48227296_48227334_3\">static constexpr bool is_exact;</p>\n<p id=\"so_48227296_48227334_4\">true if the type uses an exact representation. <em>All integer types are exact, but not all exact types are integer. For example, rational and fixed-exponent representations are exact but not integer.</em></p>\n</blockquote>\n</hr>", "LastEditorUserId": "5507349", "LastActivityDate": "2018-01-12T13:51:56.853", "Score": "13", "CreationDate": "2018-01-12T13:32:08.297", "ParentId": "48227296", "CommentCount": "4", "OwnerUserId": "5507349", "LastEditDate": "2018-01-12T13:51:56.853"}, "bq_ids": {"n4140": {"so_48227296_48227334_4": {"length": 20, "quality": 0.9090909090909091, "section_id": 6737}, "so_48227296_48227334_3": {"length": 4, "quality": 1.0, "section_id": 6736}}, "n3337": {"so_48227296_48227334_4": {"length": 20, "quality": 0.9090909090909091, "section_id": 6492}, "so_48227296_48227334_3": {"length": 4, "quality": 1.0, "section_id": 6491}}, "n4659": {"so_48227296_48227334_4": {"length": 21, "quality": 0.9545454545454546, "section_id": 8231}, "so_48227296_48227334_3": {"length": 4, "quality": 1.0, "section_id": 8230}}}, "48227296": {"ViewCount": "134", "Body": "<p><code>std::numeric_limits</code> provides 2 constants that are mutually exclusive:</p>\n<ul>\n<li><p><a href=\"http://en.cppreference.com/w/cpp/types/numeric_limits/is_integer\" rel=\"nofollow noreferrer\"><code>is_integer</code> </a>: <em>\"<code>true</code> for all integer arithmetic types <code>T</code>\"</em></p></li>\n<li><p><a href=\"http://en.cppreference.com/w/cpp/types/numeric_limits/is_exact\" rel=\"nofollow noreferrer\"><code>is_exact</code></a>: <em>\"<code>true</code> for all arithmetic types <code>T</code> that use exact representation\"</em></p></li>\n</ul>\n<p>Is there the possibility of a non-exact integral type? What is trying to be allowed for here? </p>\n<p>In all my templates where I to know if I am dealing with precise numbers, I used <code>is_integer</code>, do I need to go add a check for <code>is_exact</code> as well now?</p>\n", "Title": "Why does the standard provide both is_integer and is_exact?", "CreationDate": "2018-01-12T13:29:54.127", "LastActivityDate": "2018-01-12T15:01:33.673", "CommentCount": "5", "LastEditDate": "2018-01-12T15:01:33.673", "PostTypeId": "1", "LastEditorUserId": "2642059", "Id": "48227296", "Score": "6", "OwnerUserId": "2642059", "Tags": "<c++><floating-point><integer><fixed-point><numeric-limits>", "AnswerCount": "1"}});