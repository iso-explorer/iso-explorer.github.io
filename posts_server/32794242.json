post_cb({"bq_ids": {"n4140": {"so_32794242_32794242_0": {"length": 16, "quality": 0.8, "section_id": 2023}}, "n3337": {"so_32794242_32794242_0": {"length": 16, "quality": 0.8, "section_id": 2011}}, "n4659": {"so_32794242_32794242_0": {"length": 15, "quality": 0.75, "section_id": 2296}}}, "32939741": {"Id": "32939741", "PostTypeId": "2", "Body": "<p>Boost is an open source project so the way I see it there are 2 options:</p>\n<ol>\n<li>Complain. Either write a bug report or get on the mailing list and suggest an enhancement or both. If the community thinks you have a good point, someone might take it on</li>\n<li>Do 1, then do something about it. You'll probably get some support from the community. You might no be a library writer, but maybe the people behind boost were not either, until they were.</li>\n</ol>\n<p>There is no magic way to fix it, someone has to do the work.</p>\n", "LastActivityDate": "2015-10-05T00:20:37.783", "CommentCount": "0", "CreationDate": "2015-10-05T00:20:37.783", "ParentId": "32794242", "Score": "3", "OwnerUserId": "2036161"}, "32794242": {"ViewCount": "598", "Body": "<h3>The problem</h3>\n<p>As of right now, the exception support for streams are terrible. When the Boost.System library was adopted into C++11, one was given the impression that <em>maybe</em> exceptions would improve. All the change did was replace <code>std::exception</code> with <code>std::system_error</code>. While <code>&lt;system_error&gt;</code> is a good library on its own for developers, the standard committee and standard library implementors have not taken any steps towards using it to improve exception messages.</p>\n<p>To give an idea of how terrible it is, here's a brief summary of what goes down:</p>\n<ul>\n<li><p>An error occurs.</p></li>\n<li><p><code>setstate</code> is used to set <code>badbit</code> or <code>failbit</code>.</p></li>\n<li><p><code>clear</code> is called by <code>setstate</code>.</p></li>\n<li><p>If exceptions are enabled, <code>clear</code> will throw an <code>ios_base::failure</code>.</p></li>\n</ul>\n<p>Yes, that means for ALL errors the same useless exception message is thrown. This is specified at the <code>basic_ios</code> level, so all derived classes suffer from this issue. The offending quote:</p>\n<blockquote>\n<p id=\"so_32794242_32794242_0\">[iostate.flags]/4 <em>Effects</em>: If <code>((state | (rdbuf() ? goodbit : badbit)) &amp; exceptions()) == 0</code>, returns. Otherwise, the function\n  throws an object <code>fail</code> of class <code>basic_ios::failure</code> (27.5.3.1.1),\n  constructed with implementation-defined argument values.</p>\n</blockquote>\n<p>Here's an example of what \"implementation-defined argument values\" gives us:</p>\n<pre><code>ios_base::clear: unspecified iostream_category error\n</code></pre>\n<p><strong>Is there an easy fix?</strong></p>\n<p>Neither <code>Boost.Filesystem</code> nor <code>Boost.Iostreams</code> are replacements for <code>&lt;iostream&gt;</code>. The former is a library for portably dealing with a <em>filesystem</em> (and is likely to appear in the next revision of C++) while the latter has something to do with..Sources and Sinks. The documentation states that it delegates exceptions to <code>ios_base::failure</code> anyways. <code>Boost.Filesystem</code> <em>does</em> provide <code>&lt;boost/filesystem/fstream.hpp&gt;</code> which uses <code>path</code> instead of <code>const char*</code> arguments to <code>open()</code>. It shows an example of how one might inherit from standard library classes:</p>\n<pre><code>  template &lt; class charT, class traits = std::char_traits&lt;charT&gt; &gt;\n  class basic_ifstream : public std::basic_ifstream&lt;charT,traits&gt;\n  {\n  private: // disallow copying\n    basic_ifstream(const basic_ifstream&amp;);\n    const basic_ifstream&amp; operator=(const basic_ifstream&amp;);\n\n  public:\n    basic_ifstream() {}\n\n    // use two signatures, rather than one signature with default second\n    // argument, to workaround VC++ 7.1 bug (ID VSWhidbey 38416)\n\n    explicit basic_ifstream(const path&amp; p)\n      : std::basic_ifstream&lt;charT,traits&gt;(p.BOOST_FILESYSTEM_C_STR, std::ios_base::in) {}\n\n    basic_ifstream(const path&amp; p, std::ios_base::openmode mode)\n      : std::basic_ifstream&lt;charT,traits&gt;(p.BOOST_FILESYSTEM_C_STR, mode) {}\n\n    void open(const path&amp; p)\n      { std::basic_ifstream&lt;charT,traits&gt;::open(p.BOOST_FILESYSTEM_C_STR, std::ios_base::in); }\n\n    void open(const path&amp; p, std::ios_base::openmode mode)\n      { std::basic_ifstream&lt;charT,traits&gt;::open(p.BOOST_FILESYSTEM_C_STR, mode); }\n\n    virtual ~basic_ifstream() {}\n  };\n</code></pre>\n<p>This is a neat trick, except since our offending function is non-virtual and all the way up in <code>basic_ios</code>, there's a combinatorial explosion of what we have to reimplement:</p>\n<p><a href=\"https://i.stack.imgur.com/dXhXP.png\" rel=\"noreferrer\"><img alt=\"iostream inheritance diagram\" src=\"https://i.stack.imgur.com/dXhXP.png\"/></a></p>\n<p>I suspect an entire rewrite is needed because simply replacing <code>clear()</code> won't be enough. The stream can fail for multiple reasons but there's only <em>one</em> type of exception thrown. While <code>std::system_error</code> gives us better tools of expressing errors, that doesn't help if, again, there's no way to distinguish the source of the error.</p>\n<p>However I'm not a library writer and don't feel like taking on this task. Are there any other options than the ones I listed?</p>\n", "Title": "How do I give streams better exception messages?", "CreationDate": "2015-09-26T06:14:26.550", "LastActivityDate": "2015-10-05T00:20:37.783", "CommentCount": "5", "FavoriteCount": "4", "PostTypeId": "1", "LastEditDate": "2015-09-26T06:37:59.083", "LastEditorUserId": "5378483", "Id": "32794242", "Score": "38", "OwnerUserId": "5378483", "Tags": "<c++><c++11><c++-standard-library>", "AnswerCount": "1"}});