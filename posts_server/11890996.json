post_cb({"11891084": {"ParentId": "11890996", "CommentCount": "0", "Body": "<p>Smart compilers will exclude it most likely. Long time ago when I played with Borland C++ Builder, I think, it did not throw out unused template class methods. Can not confirm though</p>\n", "OwnerUserId": "1560833", "PostTypeId": "2", "Id": "11891084", "Score": "0", "CreationDate": "2012-08-09T20:01:21.480", "LastActivityDate": "2012-08-09T20:01:21.480"}, "11891953": {"ParentId": "11890996", "CommentCount": "0", "Body": "<p>A template is not instantiated unless it is used, so there is actually no code to discard. </p>\n<p>The standard says (14.7.1/10)</p>\n<blockquote>\n<p id=\"so_11890996_11891953_0\">An implementation shall not implicitly instantiate a function template, a member template, a non-virtual member function, a member class, or a static data member of a class template that does not require instantiation. It is unspecified whether or not an implementation implicitly instantiates a virtual member function of a class template if the virtual member function would not otherwise be instantiated. The use of a template specialization in a default argument shall not cause the template to be implicitly instantiated except that a class template may be instantiated where its complete type is needed to determine the correctness of the default argument. The use of a default argument in a function call causes specializations in the default argument to be implicitly instantiated.</p>\n</blockquote>\n<p>So if you can avoid making the template's member functions virtual, the compiler will not generate any code for them (and that might work for virtual functions as well, if the compiler is smart enough).</p>\n", "OwnerUserId": "597607", "PostTypeId": "2", "Id": "11891953", "Score": "6", "CreationDate": "2012-08-09T21:05:23.633", "LastActivityDate": "2012-08-09T21:05:23.633"}, "11890996": {"CommentCount": "9", "ViewCount": "674", "PostTypeId": "1", "LastEditorUserId": "15416", "CreationDate": "2012-08-09T19:56:01.423", "LastActivityDate": "2012-08-10T07:16:30.653", "Title": "Will the compiler exclude unused template code?", "AcceptedAnswerId": "11891953", "LastEditDate": "2012-08-10T07:16:30.653", "Id": "11890996", "Score": "6", "Body": "<p>When you use a template with numerous methods (like vector) and compile your code, will the compiler discard the code from the unused methods?</p>\n", "Tags": "<c++><compiler-construction>", "OwnerUserId": "995813", "AnswerCount": "4"}, "11891039": {"ParentId": "11890996", "CommentCount": "0", "Body": "<p>It depends on your optimization level. At higher optimization settings, yes, dead code elimination will most likely occur.</p>\n", "Id": "11891039", "PostTypeId": "2", "OwnerDisplayName": "user529758", "Score": "4", "CreationDate": "2012-08-09T19:58:44.393", "LastActivityDate": "2012-08-09T19:58:44.393"}, "11891042": {"ParentId": "11890996", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>the compiler, optimizers, and the linker can omit and/or reduce that information. each mature tool likely has options specific to dead code elimination.</p>\n<p>with templates, the code may not really be created in the first place (unless instantiated).</p>\n<p>certainly not all of it will be removed in every scenario, however (rtti is a silent killer). a bit of caution and testing using your build settings can go a long way to help you reduce the binary sizes and dead code.</p>\n", "OwnerUserId": "191596", "LastEditorUserId": "191596", "LastEditDate": "2012-08-09T20:04:23.157", "Id": "11891042", "Score": "1", "CreationDate": "2012-08-09T19:58:59.163", "LastActivityDate": "2012-08-09T20:04:23.157"}, "bq_ids": {"n4140": {"so_11890996_11891953_0": {"section_id": 243, "quality": 0.9722222222222222, "length": 70}}, "n3337": {"so_11890996_11891953_0": {"section_id": 235, "quality": 0.9722222222222222, "length": 70}}, "n4659": {"so_11890996_11891953_0": {"section_id": 250, "quality": 0.9444444444444444, "length": 68}}}});