post_cb({"16397091": {"ParentId": "16394959", "CommentCount": "0", "Body": "<p>I recommend you never use</p>\n<p><code>if ( is_active == false )</code></p>\n<p>Instead you could use:</p>\n<p><code>if ( false == is_active )</code> or <code>if ( !is_active )</code></p>\n<p>but not for efficiency reason.</p>\n<p>A common mistake for beginners is write <code>==</code> as <code>=</code>. (Sometimes I also have such typo too). In the former case, this mistake results in a legal assignment. In the latter, the compiler will complain about the mistake, because you can never assign anything to <code>false</code></p>\n<p>Hope this also helps :)</p>\n", "OwnerUserId": "1570458", "PostTypeId": "2", "Id": "16397091", "Score": "0", "CreationDate": "2013-05-06T10:46:34.240", "LastActivityDate": "2013-05-06T10:46:34.240"}, "16395023": {"ParentId": "16394959", "CommentCount": "0", "Body": "<p>Unoptimized, the first is a negation followed by a comparison to zero; the second is a comparison followed by a comparison to zero.</p>\n<p>Optimized they are almost certainly the same.</p>\n", "OwnerUserId": "207421", "PostTypeId": "2", "Id": "16395023", "Score": "0", "CreationDate": "2013-05-06T08:42:39.703", "LastActivityDate": "2013-05-06T08:42:39.703"}, "16395006": {"ParentId": "16394959", "CommentCount": "0", "Body": "<p>There is no easier way, than try for yourself :) Write simple program tha uses both and measure time. I think, that It can be compiler and optimalization specific . </p>\n<p>However... trying to optimize this piece of code is useless... you are focusing on wrong optimalization :)</p>\n", "OwnerUserId": "1130231", "PostTypeId": "2", "Id": "16395006", "Score": "0", "CreationDate": "2013-05-06T08:41:05.423", "LastActivityDate": "2013-05-06T08:41:05.423"}, "16395029": {"ParentId": "16394959", "CommentCount": "0", "Body": "<p>The answer to this question is highly dependent on the compiler's ability to understand code - compilation templates.\nBasically, you are asking the same binary question - is the variable is_active equal 0; yet you are asking it in two different manners:</p>\n<ol>\n<li>is it equal the fixed value of 0</li>\n<li>is it anything other than 0</li>\n</ol>\n<p>A smart compiler (and a supporting Assembly ISA) will not perform the logical not and then compare to 0, rather it will compare to the value not equaling 0 in the first place.</p>\n<p>To make a long story short, assuming your compiler is even semi-intelligent and the ISA supports comparing to a value not being 0; it should be the exact same</p>\n", "OwnerUserId": "2176845", "PostTypeId": "2", "Id": "16395029", "Score": "0", "CreationDate": "2013-05-06T08:42:53.550", "LastActivityDate": "2013-05-06T08:42:53.550"}, "16395032": {"ParentId": "16394959", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>Both are equivalent. You can test this yourself by using the <code>-S</code> option, which produces assembler output into <code>file.s</code>. With gcc on amd64 you get for example </p>\n<p>file.cpp:</p>\n<pre><code>void f()\n{\n    bool is_active = false;\n    if(!is_active) { dosomething(); }\n\n    if(is_active == false) { dosomething(); }\n}\n</code></pre>\n<p>file.s:</p>\n<pre><code>...\n    movzbl  -1(%rbp), %eax\n    xorl    $1, %eax\n    testb   %al, %al\n    je  .L3\n    call    _Z11dosomethingv\n.L3:\n    movzbl  -1(%rbp), %eax\n    xorl    $1, %eax\n    testb   %al, %al\n    je  .L2\n    call    _Z11dosomethingv\n.L2:\n...\n</code></pre>\n<p>You can easily see that the code is the same for both instances.</p>\n<p><strong>Update</strong> to Charles Bailey's comment including compiler optimization <code>-O2</code> </p>\n<p>file.cpp:</p>\n<pre><code>extern bool is_active;\n\nvoid f()\n{\n    if(!is_active) { dosomething(); }\n}\n\nvoid g()\n{\n    if(is_active == false) { dosomething(); }\n}\n</code></pre>\n<p>file.s:</p>\n<pre><code>    cmpb    $0, is_active(%rip)\n    je    .L4\n    rep\n    ret\n    .p2align 4,,10\n    .p2align 3\n.L4:\n    jmp    _Z11dosomethingv\n...\n    cmpb    $0, is_active(%rip)\n    je    .L7\n    rep\n    ret\n    .p2align 4,,10\n    .p2align 3\n.L7:\n    jmp    _Z11dosomethingv\n</code></pre>\n<p>The produced assembler code is different this time, but as expected it's same for both <code>if</code> statements.</p>\n", "OwnerUserId": "1741542", "LastEditorUserId": "1741542", "LastEditDate": "2013-05-06T09:12:23.937", "Id": "16395032", "Score": "4", "CreationDate": "2013-05-06T08:43:18.893", "LastActivityDate": "2013-05-06T09:12:23.937"}, "16394995": {"ParentId": "16394959", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>When your compiler does not optimize it to be exaclty the same you have a really dumb compiler.</p>\n<p>But if one of them is faster, then <code>if(!is_active)</code>, because it only needs one ASM <code>INV</code> command instead of <code>LOAD</code> and <code>CMP</code>.</p>\n", "OwnerUserId": "2256700", "LastEditorUserId": "1838266", "LastEditDate": "2013-05-06T08:42:20.437", "Id": "16394995", "Score": "0", "CreationDate": "2013-05-06T08:40:41.077", "LastActivityDate": "2013-05-06T08:42:20.437"}, "16395063": {"ParentId": "16394959", "CommentCount": "0", "Body": "<p>It's a bad practice to write like this:</p>\n<p><code>if(is_active == false)</code></p>\n<p>Don't do this.</p>\n<p>And about speed of <strong>such</strong> operation... We're in 2013. ;-)</p>\n", "OwnerUserId": "331344", "PostTypeId": "2", "Id": "16395063", "Score": "-1", "CreationDate": "2013-05-06T08:45:22.863", "LastActivityDate": "2013-05-06T08:45:22.863"}, "16394987": {"ParentId": "16394959", "CommentCount": "4", "Body": "<p>When compiled, they'll produce the same machine code. It's just a matter of syntax.</p>\n<p>From the standard (5.3.1):</p>\n<blockquote>\n<p id=\"so_16394959_16394987_0\">The operand of the logical negation operator ! is implicitly converted\n  to bool (clause 4); its value is true if the converted operand is\n  false and false otherwise. The type of the result is bool.</p>\n</blockquote>\n", "OwnerUserId": "293048", "PostTypeId": "2", "Id": "16394987", "Score": "8", "CreationDate": "2013-05-06T08:40:03.850", "LastActivityDate": "2013-05-06T08:40:03.850"}, "bq_ids": {"n4140": {"so_16394959_16394987_0": {"section_id": 6072, "quality": 0.8095238095238095, "length": 17}}, "n3337": {"so_16394959_16394987_0": {"section_id": 5840, "quality": 0.8095238095238095, "length": 17}}, "n4659": {"so_16394959_16394987_0": {"section_id": 7568, "quality": 0.8095238095238095, "length": 17}}}, "16394959": {"CommentCount": "9", "ViewCount": "143", "PostTypeId": "1", "LastEditorUserId": "350272", "CreationDate": "2013-05-06T08:37:57.907", "LastActivityDate": "2013-05-06T10:46:34.240", "Title": "Is operation if(!is_active) faster than if(is_active == false)?", "AcceptedAnswerId": "16395032", "LastEditDate": "2013-05-06T08:41:30.897", "Id": "16394959", "Score": "-2", "Body": "<p><strong>I confuse between 2 operation:</strong></p>\n<pre><code>if(!is_active)\n{\n  do something here...\n}\n</code></pre>\n<p><strong>AND</strong></p>\n<pre><code>if(is_active == false)\n{\n  do something here...\n}\n</code></pre>\n<p>Which is it faster than another?\nAnd if faster, then why is it faster. Can you explain in bit operator with 0 and 1.</p>\n", "Tags": "<c++>", "OwnerUserId": "2353925", "AnswerCount": "8"}});