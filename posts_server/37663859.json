post_cb({"37664484": {"ParentId": "37663859", "CommentCount": "1", "Body": "<p>All standard containers with an allocator are using the allocator to construct or destroy elements:</p>\n<p>23.2.1 [3] General container requirements (N4296)</p>\n<blockquote>\n<p id=\"so_37663859_37664484_0\">For the components affected by this subclause that declare an\n  allocator_type, objects stored in these components shall be\n  constructed using the allocator_traits::construct\n  function and destroyed using the\n  allocator_traits::destroy function</p>\n</blockquote>\n<p>The default allocator in the standard library is using placement new to construct and invokes the destructor to destroy an element:</p>\n<p>20.7.9 [11] and [12] The default allocator  (N4296)</p>\n<pre><code>template &lt;class U, class... Args&gt;\nvoid construct(U* p, Args&amp;&amp;... args);\n</code></pre>\n<p>Effects: ::new((void *)p) U(std::forward(args)...)</p>\n<pre><code>template &lt;class U&gt;\nvoid destroy(U* p);\n</code></pre>\n<p>Effects: p-&gt; ~ U()</p>\n", "OwnerUserId": "2249683", "PostTypeId": "2", "Id": "37664484", "Score": "4", "CreationDate": "2016-06-06T18:31:18.580", "LastActivityDate": "2016-06-06T18:31:18.580"}, "37663859": {"CommentCount": "9", "ViewCount": "572", "PostTypeId": "1", "ClosedDate": "2016-06-20T06:08:23.070", "LastEditorUserId": "6189761", "CreationDate": "2016-06-06T17:53:05.143", "LastActivityDate": "2016-06-09T17:40:32.077", "Title": "Implementation of push_back and pop_back", "AcceptedAnswerId": "37664484", "LastEditDate": "2016-06-09T17:40:32.077", "Id": "37663859", "Score": "2", "Body": "<p>I want to understand how <code>std::vector&lt;T&gt;::push_back</code> and <code>std::vector&lt;T&gt;::pop_back</code> create and destroy objects in an allocated memory ?</p>\n<p>I used google and all I find is people just play with  <code>size</code>  and  <code>capacity</code>  to limit the access to the internal dynamic array but I don't think that's how things really work in the standard implementation</p>\n<p><strong>Note:</strong> I'm not asking for the standard implementation because it would be complex but I would appreciate a basic implementation for this approach</p>\n<hr>\n<p><strong>EDIT:</strong>  I figured out how to implement my own custom allocator</p>\n<p>For simplicity I'll show only important functions out of my custom allocator</p>\n<pre><code>template &lt;typename T&gt;\nT* allocate(std::size_t count) {\n    return static_cast&lt;T*&gt;(::operator new(count * sizeof(T)));\n}\n\ntemplate &lt;typename T&gt;\nvoid deallocate(T* ptr, std::size_t count) {\n    operator delete(ptr);\n}\n\n\ntemplate &lt;typename U, typename... Args&gt;\nvoid construct(U* ptr, Args&amp;&amp;... args) {\n    new(ptr) U(std::forward&lt;Args&gt;(args)...);\n}\n\ntemplate &lt;typename U&gt;\nvoid destroy(U* ptr) {\n    ptr-&gt;~U();\n}\n</code></pre>\n<p>then I use then in my own defined vector something like this</p>\n<pre><code>int* buff = allocate&lt;int&gt;(8);\n// This is like:\n// std::vector&lt;int&gt; vec;\n// vec.reserve(8);\n\nint* last = &amp;buff[0];\nconstruct&lt;int&gt;(last, 32);\n// This is like:\n// vec.push_back(32);\n\n++last;\nconstruct&lt;int&gt;(last, 12);\n// This is another push\n// vec.push_back(12);\n\ndestroy(last);\n--last;\n// This is like: \n// vec.pop_back();\n\n\ndeallocate(buff, 8);\n// This shoud be in:\n// ~vector();\n</code></pre>\n<p>Please check it out if missed something ... thanks</p>\n</hr>", "Tags": "<c++><push-back>", "OwnerUserId": "6189761", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_37663859_37664484_0": {"section_id": 704, "quality": 0.8235294117647058, "length": 14}}, "n3337": {"so_37663859_37664484_0": {"section_id": 694, "quality": 0.8235294117647058, "length": 14}}, "n4659": {"so_37663859_37664484_0": {"section_id": 733, "quality": 0.8235294117647058, "length": 14}}}});