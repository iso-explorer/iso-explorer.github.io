post_cb({"16781910": {"ParentId": "16781886", "PostTypeId": "2", "CommentCount": "6", "Body": "<p>Insertion of an item invalidates all iterators only if a rehashing occurs (ie. if the new number of elements is greater than or equal to <code>max_load_factor()*bucket_count()</code>). Otherwise no iterators are invalidated.</p>\n<p>Removal of an item only invalidates the iterators to the removed element(s) not to other unrelated elements.</p>\n<p>Source: <a href=\"http://en.cppreference.com/w/cpp/container/unordered_map/insert\" rel=\"nofollow\"><code>std::unordered_map::insert</code></a> and <a href=\"http://en.cppreference.com/w/cpp/container/unordered_map/erase\" rel=\"nofollow\"><code>std::unordered_map::erase</code></a>.</p>\n<p>Of course these rules apply only to <code>std::unordered_map</code>. Other containers may have different invalidation rules, it's up to you to look it up in the documentation.</p>\n", "OwnerUserId": "2070725", "LastEditorUserId": "2070725", "LastEditDate": "2013-05-28T01:36:07.647", "Id": "16781910", "Score": "5", "CreationDate": "2013-05-27T23:45:34.683", "LastActivityDate": "2013-05-28T01:36:07.647"}, "16781886": {"CommentCount": "1", "ViewCount": "3510", "CreationDate": "2013-05-27T23:41:19.870", "LastActivityDate": "2013-06-01T01:27:18.450", "Title": "Can we store unordered_map<T>::iterator?", "PostTypeId": "1", "Id": "16781886", "Score": "7", "Body": "<p>Reference <a href=\"http://www.careercup.com/question?id=17188673\" rel=\"noreferrer\">http://www.careercup.com/question?id=17188673</a> by chetan.j9</p>\n<pre><code>void Insert( string s ) {\n    if( IsElementPresent(s) )\n        return;\n\n    myMap[s] = myMapVector.size();\n    unordered_map&lt;string,int&gt;::iterator it = myMap.find(s);\n    myMapVector.push_back(it);      \n}\n</code></pre>\n<p>Question&gt; Can we store the iterator of unordered_map for later retrieval? Based on my understanding, the iterator will be invalidated after the insertion or deletion of an element.</p>\n<p>Thank you</p>\n", "Tags": "<c++>", "OwnerUserId": "391104", "AnswerCount": "2"}, "16782536": {"ParentId": "16781886", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>@syam's answer is correct (+1), but I think it's useful to quote from the only authoritative source, the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_16781886_16782536_0\">(\u00a723.2.5/13) The <code>insert</code> and <code>emplace</code> members shall not affect the validity of references to container elements, but may invalidate all iterators to the container. The erase members shall invalidate only iterators and references to the erased elements.</p>\n<p id=\"so_16781886_16782536_1\">(\u00a723.2.5/14) The <code>insert</code> and <code>emplace</code> members shall not affect the validity of iterators if (N+n) &lt; z * B, where N is the number of elements in the container prior to the insert operation, n is the number of elements inserted, B is the container\u2019s bucket count, and z is the container\u2019s maximum load factor.</p>\n</blockquote>\n<p>(To put this in context: \u00a723.2.5 is the section on unordered associative containers, so it applies to <code>std::unordered_set</code>, <code>std::unordered_map</code>, <code>std::unordered_multiset</code> and <code>std::unordered_multimap</code>.)\nThis means:</p>\n<ol>\n<li><p>If you want to insert <code>n</code> elements into an <code>unordered_map</code> called <code>hash</code>, you can check whether</p>\n<pre><code>hash.size() + n &lt; hash.max_load_factor() * hash.bucket_count()\n</code></pre>\n<p>is true. If it is false, all iterators will be invalidated during the insert. If true, iterators will remain valid.</p></li>\n<li><p>Even if iterators are invalidated in this operation, <em>references</em> to the elements themselves will remain valid.</p></li>\n<li><p>If you <code>erase</code> elements, only iterators pointing to those will be invalidated; other iterators will remain valid.</p></li>\n</ol>\n", "OwnerUserId": "777186", "LastEditorUserId": "777186", "LastEditDate": "2013-06-01T01:27:18.450", "Id": "16782536", "Score": "14", "CreationDate": "2013-05-28T01:25:20.560", "LastActivityDate": "2013-06-01T01:27:18.450"}, "bq_ids": {"n4140": {"so_16781886_16782536_1": {"section_id": 767, "quality": 0.92, "length": 23}, "so_16781886_16782536_0": {"section_id": 766, "quality": 0.875, "length": 21}}, "n3337": {"so_16781886_16782536_1": {"section_id": 754, "quality": 0.92, "length": 23}, "so_16781886_16782536_0": {"section_id": 753, "quality": 0.875, "length": 21}}, "n4659": {"so_16781886_16782536_0": {"section_id": 826, "quality": 0.875, "length": 21}, "so_16781886_16782536_1": {"section_id": 827, "quality": 0.92, "length": 23}}}});