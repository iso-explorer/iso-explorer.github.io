post_cb({"bq_ids": {"n4140": {"so_11164394_11164416_1": {"length": 4, "quality": 1.0, "section_id": 3287}, "so_11164394_11164416_0": {"length": 7, "quality": 1.0, "section_id": 3290}, "so_11164394_11164416_2": {"length": 4, "quality": 1.0, "section_id": 3285}}, "n3337": {"so_11164394_11164416_1": {"length": 4, "quality": 1.0, "section_id": 3157}, "so_11164394_11164416_0": {"length": 7, "quality": 1.0, "section_id": 3160}, "so_11164394_11164416_2": {"length": 4, "quality": 1.0, "section_id": 3155}}, "n4659": {"so_11164394_11164416_0": {"length": 7, "quality": 1.0, "section_id": 4052}}}, "11164416": {"Id": "11164416", "PostTypeId": "2", "Body": "<p>This is known as <em>value-initialization</em>. From the C++03 standard, \u00a78.5/7:</p>\n<blockquote>\n<p id=\"so_11164394_11164416_0\">An object whose initializer is an empty set of parentheses, i.e., (), shall be value-initialized.</p>\n</blockquote>\n<p>And from \u00a78.5/5:</p>\n<blockquote>\n<p id=\"so_11164394_11164416_1\">To <em>value-initialize</em> an object of type <code>T</code> means:</p>\n<ul>\n<li>if <code>T</code> is a class type with a user-declared constructor, then the default constructor for <code>T</code> is called (and the initialization is ill-formed if <code>T</code> has no accessible default constructor);</li>\n<li>if <code>T</code> is a non-union class type without a user-declared constructor, then every non-static data member and base-class component of <code>T</code> is value-initialized;</li>\n<li>if <code>T</code> is an array type, then each element is value-initialized;</li>\n<li>otherwise, the object is zero-initialized</li>\n</ul>\n<p id=\"so_11164394_11164416_2\">To <em>zero-initialize</em> an object of type <code>T</code> means:</p>\n<ul>\n<li>if <code>T</code> is a scalar type, the object is set to the value of <code>0</code> (zero) converted to <code>T</code>;</li>\n<li>if <code>T</code> is a non-union class type, each nonstatic data member and each base-class subobject is zero-initialized;</li>\n<li>if <code>T</code> is a union type, the object\u2019s first named data member) is zero-initialized;</li>\n<li>if <code>T</code> is an array type, each element is zero-initialized;</li>\n<li>if <code>T</code> is a reference type, no initialization is performed.</li>\n</ul>\n</blockquote>\n<p>So in your case, it depends on the definition of <code>SpiHandleT</code>:</p>\n<ul>\n<li>If it's a scalar, it will be zero-initialized</li>\n<li>If it's a class type <em>without</em> a user-declared constructor, its subobjects will be (recursively) value-initialized</li>\n<li>If it's a class type <em>with</em> a user-declared constructor, it will be default-constructed</li>\n</ul>\n", "LastEditorUserId": "636019", "LastActivityDate": "2012-06-22T21:37:01.010", "Score": "17", "CreationDate": "2012-06-22T21:31:58.577", "ParentId": "11164394", "CommentCount": "0", "OwnerUserId": "636019", "LastEditDate": "2012-06-22T21:37:01.010"}, "11164394": {"ViewCount": "3891", "Body": "<p>What does _currentHandle() mean below?</p>\n<pre><code>template&lt;class SpiHandleT&gt;\nclass SpiHandleIterator : public ISpiHandleIterator&lt;SpiHandleT&gt;\n{\npublic:\n    SpiHandleIterator() : _currentHandle()\n    {\n    }\n    ...\nprotected:\n    SpiHandleT _currentHandle;\n};\n</code></pre>\n", "AcceptedAnswerId": "11164416", "Title": "Constructor initialization list with empty initialization", "CreationDate": "2012-06-22T21:29:37.890", "Id": "11164394", "CommentCount": "0", "FavoriteCount": "5", "PostTypeId": "1", "LastActivityDate": "2012-06-22T21:37:01.010", "Score": "6", "OwnerUserId": "607846", "Tags": "<c++>", "AnswerCount": "1"}});