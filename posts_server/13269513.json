post_cb({"13270173": {"ParentId": "13269513", "CommentCount": "0", "Body": "<p>I use <code>not</code>, <code>and</code> and <code>or</code> almost exclusively in C++ (I find them more readable and less error prone than their sigils counterparts). They are <strong>strictly</strong> equivalent.</p>\n<blockquote>\n<p id=\"so_13269513_13270173_0\"><strong>\u00a72.6 Alternative tokens [lex.digraph]</strong></p>\n<p id=\"so_13269513_13270173_1\"><strong>1/</strong> Alternative token representations are provided for some operators and punctuators.</p>\n<p id=\"so_13269513_13270173_2\"><strong>2/</strong> In all respects of the language, each alternative token behaves the same, respectively, as its primary token, except for its spelling. The set of alternative tokens is defined in Table 2.</p>\n</blockquote>\n<p>Look elsewhere.</p>\n", "OwnerUserId": "147192", "PostTypeId": "2", "Id": "13270173", "Score": "2", "CreationDate": "2012-11-07T12:51:42.710", "LastActivityDate": "2012-11-07T12:51:42.710"}, "13269513": {"CommentCount": "12", "ViewCount": "121", "PostTypeId": "1", "LastEditorUserId": "490338", "CreationDate": "2012-11-07T12:09:42.017", "LastActivityDate": "2012-11-07T14:53:56.080", "Title": "Strange error while using word variation C++ not operator", "LastEditDate": "2012-11-07T14:53:56.080", "Id": "13269513", "Score": "3", "Body": "<p>I have the following check in my C++ code:</p>\n<pre><code>if (not obj.someBoolean) {\n      // some code\n} else {\n      // some other code\n}   \n</code></pre>\n<p>A print statement or gdb confirms that <code>obj.someBoolean</code> (a <code>bool</code> variable) is <code>false</code>.<br>\nYet the control goes to the <code>else</code> block while using <code>not</code> operator.  </br></p>\n<p>Interestingly, the <code>!</code> variety of the operator works correctly when used in the above scenario (goes into the <code>if</code> block).  </p>\n<p>Is this an issue with the way I am using <code>not</code>?  </p>\n<p><em>Update (some more details on the scenario):</em> </p>\n<p>Throughout the code I have used <code>not</code> in many places. But this is one scenario where this issue comes up (consistently).   </p>\n<p>Even the following code works (goes to <code>if</code> block):  </p>\n<pre><code>bool temp = not obj.someBoolean;\nif (temp) {\n      // some code\n} else {\n      // some other code\n}     \n</code></pre>\n<p>This is more like a single random point where it is happening.<br>\nI was curious as to why this behavior is caused.</br></p>\n", "Tags": "<c++><boolean>", "OwnerUserId": "490338", "AnswerCount": "2"}, "13269598": {"ParentId": "13269513", "CommentCount": "7", "Body": "<p>I don't see what's wrong with your code. Try this:</p>\n<pre><code>#include &lt;iostream&gt;\n\nint main()\n{\n  if(not false) std::cout&lt;&lt; \"true!\"; \n}\n</code></pre>\n<p>If it prints \"true!\", the problem is somewhere else.</p>\n", "OwnerUserId": "227755", "PostTypeId": "2", "Id": "13269598", "Score": "1", "CreationDate": "2012-11-07T12:14:44.610", "LastActivityDate": "2012-11-07T12:14:44.610"}, "bq_ids": {"n4140": {"so_13269513_13270173_2": {"section_id": 5326, "quality": 0.9047619047619048, "length": 19}, "so_13269513_13270173_1": {"section_id": 5325, "quality": 1.0, "length": 7}}, "n3337": {"so_13269513_13270173_2": {"section_id": 5123, "quality": 0.9047619047619048, "length": 19}, "so_13269513_13270173_1": {"section_id": 5122, "quality": 1.0, "length": 7}}, "n4659": {"so_13269513_13270173_1": {"section_id": 6746, "quality": 1.0, "length": 7}, "so_13269513_13270173_2": {"section_id": 6747, "quality": 0.9047619047619048, "length": 19}}}});