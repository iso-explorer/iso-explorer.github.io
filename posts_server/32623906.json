post_cb({"32624191": {"ParentId": "32623906", "PostTypeId": "2", "CommentCount": "8", "Body": "<p>Slightly rephrasing your program:</p>\n<pre><code>static constexpr auto gma = get_max_arenas();\n\nsize_t current_colour[gma]; // error\n</code></pre>\n<p>gives the Clang error:</p>\n<blockquote>\n<p id=\"so_32623906_32624191_0\">read of member 'bits' of union with active member 'value' is not\n  allowed in a constant expression</p>\n</blockquote>\n<p>The reason you get this error is that the constructor sets the <code>value</code>, and then you try to read <code>bits</code>. This is not allowed, as commented by @gurka.</p>\n<p><a href=\"http://open-std.org/JTC1/SC22/WG21/docs/papers/2015/n4527.pdf\"><strong>Standard</strong></a> quote:</p>\n<blockquote>\n<p id=\"so_32623906_32624191_1\"><strong>[expr.const]</strong></p>\n<p id=\"so_32623906_32624191_2\">2 A conditional-expression e is a core constant expression <strong>unless</strong> the\n  evaluation of e, following the rules of the abstract machine (1.9),\n  would evaluate one of the following expressions:</p>\n<p id=\"so_32623906_32624191_3\">(2.8) \u2014 an lvalue-to-rvalue conversion (4.1) or modification (5.18,\n  5.2.6, 5.3.2) that is applied to a glvalue that refers to <strong>a non-active member of a union</strong> or a subobject thereof;</p>\n</blockquote>\n", "OwnerUserId": "819272", "LastEditorUserId": "819272", "LastEditDate": "2015-09-17T07:00:00.950", "Id": "32624191", "Score": "7", "CreationDate": "2015-09-17T06:54:13.970", "LastActivityDate": "2015-09-17T07:00:00.950"}, "32623906": {"CommentCount": "12", "ViewCount": "276", "PostTypeId": "1", "LastEditorUserId": "718379", "CreationDate": "2015-09-17T06:35:00.203", "LastActivityDate": "2016-05-02T16:31:00.920", "Title": "Why is this not a constexpr?", "AcceptedAnswerId": "32624191", "LastEditDate": "2016-05-02T16:31:00.920", "Id": "32623906", "Score": "6", "Body": "<pre><code>#include &lt;iostream&gt;\n\nunion gc_bits {\n    size_t value;\n    struct {\n        size_t arena : 2;\n    } bits;\n\n    constexpr gc_bits(size_t value_) : value(value_) {\n    }\n};\n\nstatic constexpr size_t get_max_arenas() {\n    return gc_bits(~0ULL).bits.arena;\n}\n\nsize_t current_colour[get_max_arenas()]; // error\n\nint main() {\n    std::cout &lt;&lt; get_max_arenas() &lt;&lt; std::endl;\n}\n</code></pre>\n<p>The array declaration errors out because get_max_arenas is not a constexpr. I'm not clear on why this should be so. </p>\n", "Tags": "<c++><c++11><unions><constexpr>", "OwnerUserId": "2131", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_32623906_32624191_2": {"section_id": 6185, "quality": 0.9285714285714286, "length": 13}, "so_32623906_32624191_3": {"section_id": 6185, "quality": 0.7857142857142857, "length": 11}}, "n3337": {"so_32623906_32624191_3": {"section_id": 5946, "quality": 0.7142857142857143, "length": 10}}, "n4659": {"so_32623906_32624191_0": {"section_id": 7687, "quality": 0.6, "length": 6}, "so_32623906_32624191_2": {"section_id": 7687, "quality": 0.7857142857142857, "length": 11}, "so_32623906_32624191_3": {"section_id": 7687, "quality": 0.7142857142857143, "length": 10}}}});