post_cb({"bq_ids": {"n4140": {"so_38721485_38721608_2": {"length": 20, "quality": 0.8, "section_id": 5834}, "so_38721485_38721608_3": {"length": 15, "quality": 0.9375, "section_id": 5817}}, "n3337": {"so_38721485_38721608_2": {"length": 22, "quality": 0.88, "section_id": 5605}, "so_38721485_38721608_3": {"length": 15, "quality": 0.9375, "section_id": 5588}}, "n4659": {"so_38721485_38721608_2": {"length": 20, "quality": 0.8, "section_id": 7296}, "so_38721485_38721608_3": {"length": 14, "quality": 0.875, "section_id": 7278}}}, "38721485": {"ViewCount": "57", "Body": "<p>I have an iterative process coded in C++ which takes a long time and am considering converting my code to use multiple threads. But I am concerned that it could be very complicated and risk lock-ups and bugs. However I suspect that for this particular problem it may be trivial, but I would like confirmation.</p>\n<p>I am hoping I can use threading code which is a s simple as this <a href=\"https://stackoverflow.com/questions/266168/simple-example-of-threading-in-c\">here</a>.</p>\n<p>My program employs large amounts of global arrays and structures. I assume that the individual threads need not concern themselves if other threads are attempting to <em>read</em> the same data at the same time.</p>\n<p>I would also assume that if one thread wanted to increment a global float variable by say 1.5 and another thread wanted to decrement it by 0.1 then so long as I didn't care about the order of events then both threads would succeed in their task without any special code (like mutexs and locks etc) and the float would eventually end up larger by 1.4. If all my assumptions are correct then my task will be easy - Please advise.</p>\n<p><strong>EDIT:</strong> just to make it absolutely clear - it doesn't matter at all the order in which the float is incremented / decremented. So long as its value ends up larger by 1.4 then I am happy. The value of the float is not <em>read</em> until after all the threads have completed their task.</p>\n<p><strong>EDIT:</strong> As a more concrete example, imaging we had the task of finding the total donations made to a charity from different states in the US. We could have a global like this:</p>\n<pre><code>float total_donations= 0;\n</code></pre>\n<p>Then we could have 50 separate threads, each of which calculated a local float called donations_from_this_state. And each thread would separately perform:</p>\n<pre><code>total_donations += donations_from_this_state;\n</code></pre>\n<p>Obviously which order the threads performed their task in would make no difference to the end result.</p>\n", "AcceptedAnswerId": "38721608", "Title": "Multithreading - hopefully a simple task", "CreationDate": "2016-08-02T13:15:13.890", "Id": "38721485", "CommentCount": "3", "LastEditDate": "2017-05-23T12:16:31.860", "PostTypeId": "1", "LastEditorUserId": "-1", "LastActivityDate": "2016-10-12T12:20:28.477", "Score": "0", "OwnerUserId": "169774", "Tags": "<c++><multithreading><visual-studio-2015>", "AnswerCount": "1"}, "38721608": {"Id": "38721608", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_38721485_38721608_0\">I assume that the individual threads need not concern themselves if other threads are attempting to read the same data at the same time.</p>\n</blockquote>\n<p>Correct.  As long as all threads are readers no synchronization is needed as no values are changed in the shared data.</p>\n<blockquote>\n<p id=\"so_38721485_38721608_1\">I would also assume that if one thread wanted to increment a global float variable by say 1.5 and another thread wanted to decrement it by 0.1 then so long as I didn't care about the order of events then both threads would succeed in their task without any special code (like mutexs and locks etc) and the float would eventually end up larger by 1.4</p>\n</blockquote>\n<p>This assumption is not correct.  If you have two or more threads writing to the same shared variable and that variable is not internally synchronized then you need external synchronization otherwise your code has undefined behavior per [intro.multithread]/21</p>\n<blockquote>\n<p id=\"so_38721485_38721608_2\">The execution of a program contains a data race if it contains two conflicting actions in different threads, at least one of which is not atomic, and neither happens before the other. Any such data race results in undefined behavior.</p>\n</blockquote>\n<p>Where conflicting action is specified by [intro.multithread]/4</p>\n<blockquote>\n<p id=\"so_38721485_38721608_3\">Two expression evaluations conflict if one of them modifies a memory location (1.7) and the other one accesses or modifies the same memory location.</p>\n</blockquote>\n", "LastEditorUserId": "4342498", "LastActivityDate": "2016-08-02T13:28:22.430", "Score": "5", "CreationDate": "2016-08-02T13:19:44.480", "ParentId": "38721485", "CommentCount": "4", "OwnerUserId": "4342498", "LastEditDate": "2016-08-02T13:28:22.430"}});