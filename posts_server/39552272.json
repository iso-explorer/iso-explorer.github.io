post_cb({"bq_ids": {"n4140": {"so_39552272_39552345_1": {"length": 14, "quality": 0.8235294117647058, "section_id": 304}}, "n3337": {"so_39552272_39552345_1": {"length": 14, "quality": 0.8235294117647058, "section_id": 295}}, "n4659": {"so_39552272_39552345_1": {"length": 16, "quality": 0.9411764705882353, "section_id": 311}}}, "39552328": {"Id": "39552328", "PostTypeId": "2", "Body": "<p>Unfortunately, it's confusing, but they are nothing more than two names for the same thing.<br>\nUniversal reference was proposed (I guess) by Meyers far ago (see <a href=\"https://isocpp.org/blog/2012/11/universal-references-in-c11-scott-meyers\">here</a> as an example).<br>\nForwarding reference is picked up directly from the <em>standardese</em>. That's all.</br></br></p>\n", "LastActivityDate": "2016-09-17T22:32:19.993", "Score": "8", "CreationDate": "2016-09-17T22:32:19.993", "ParentId": "39552272", "CommentCount": "0", "OwnerUserId": "4987285"}, "39552345": {"Id": "39552345", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_39552272_39552345_0\">Do they mean the same thing?</p>\n</blockquote>\n<p><a href=\"https://isocpp.org/blog/2012/11/universal-references-in-c11-scott-meyers\">Universal reference</a> was a term Scott Meyers coined to describe the concept of taking an rvalue reference to a cv-unqualified template parameter, which can then be deduced as either a value or an lvalue reference. </p>\n<p>At the time the C++ standard didn't have a special term for this, which was an oversight in C++11 and makes it hard to teach. This oversight was remedied by  <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4164.pdf\">N4164</a>, which added the following definition to <a href=\"http://eel.is/c++draft/temp.deduct#call-3\">[temp.deduct]</a>:</p>\n<blockquote>\n<p id=\"so_39552272_39552345_1\">A <em>forwarding reference</em> is an rvalue reference to a cv-unqualified template parameter. If <code>P</code> is a forwarding reference and the argument is an lvalue, the type \u201clvalue reference to A\u201d is used in place of A for type deduction.</p>\n</blockquote>\n<p>Hence, the two mean the same thing, and the current C++ standard term is forwarding reference. The paper itself articulates why \"forwarding reference\" is a better term than \"universal reference.\"</p>\n<blockquote>\n<p id=\"so_39552272_39552345_2\">Is it only a forwarding reference if the function body calls <code>std::forward</code>?</p>\n</blockquote>\n<p>Nope, what you do with a forwarding reference is irrelevant to the name. The concept forwarding reference simply refers to how the type <code>T</code> is deduced in:</p>\n<pre><code>template &lt;class T&gt; void foo(T&amp;&amp; ); // &lt;== \n</code></pre>\n<p>It does not need to be subsequently forwarded .</p>\n", "LastEditorUserId": "2069064", "LastActivityDate": "2016-09-17T22:41:14.160", "Score": "23", "CreationDate": "2016-09-17T22:34:25.123", "ParentId": "39552272", "CommentCount": "6", "LastEditDate": "2016-09-17T22:41:14.160", "OwnerUserId": "2069064"}, "39552272": {"ViewCount": "3776", "Body": "<p>An argument to this function will bind to an rvalue reference:  </p>\n<pre><code>void f(int &amp;&amp; i);\n</code></pre>\n<p>However, an argument to this function will bind to either an rvalue or an lvalue reference:  </p>\n<pre><code>template &lt;typename T&gt;  \nvoid f(T &amp;&amp; t);\n</code></pre>\n<p>I've often heard this referred to as a universal reference.<br>\nI've also heard it been called a forwarding reference.<br>\nDo they mean the same thing?<br>\nIs it only a forwarding reference if the function body calls <code>std::forward</code>?</br></br></br></p>\n", "AcceptedAnswerId": "39552345", "Title": "Is there a difference between universal references and forwarding references?", "CreationDate": "2016-09-17T22:24:44.297", "Id": "39552272", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2016-09-18T02:57:05.333", "LastEditorUserId": "2069064", "LastActivityDate": "2016-09-18T02:57:05.333", "Score": "21", "OwnerUserId": "908939", "Tags": "<c++><templates><perfect-forwarding><universal-reference><forwarding-reference>", "AnswerCount": "2"}});