post_cb({"11478962": {"CommentCount": "6", "ViewCount": "2234", "CreationDate": "2012-07-13T22:03:20.883", "LastActivityDate": "2012-07-13T22:34:29.343", "Title": "Can typedef names be used to declare or define constructors?", "AcceptedAnswerId": "11479069", "PostTypeId": "1", "Id": "11478962", "Score": "12", "Body": "<h3>Standardese:</h3>\n<p>[class.ctor] 12.1/1 says</p>\n<blockquote>\n<p id=\"so_11478962_11478962_0\">A special declarator syntax is used to declare or define the constructor. The syntax uses:</p>\n<p id=\"so_11478962_11478962_1\">\u00a0\u00a0\u00a0\u00a0\u2014 an optional <em>decl-specifier-seq</em> in which each <em>decl-specifier</em> is either a <em>function-specifier</em> or <strong>constexpr</strong>,</p>\n<p id=\"so_11478962_11478962_2\">\u00a0\u00a0\u00a0\u00a0\u2014 the constructor\u2019s class name, and</p>\n<p id=\"so_11478962_11478962_3\">\u00a0\u00a0\u00a0\u00a0\u2014 a parameter list</p>\n<p id=\"so_11478962_11478962_4\">in that order.</p>\n</blockquote>\n<p>[class.name] 9.1/4 says</p>\n<blockquote>\n<p id=\"so_11478962_11478962_5\">A <em>typedef-name</em> (7.1.3) that names a class type, or a cv-qualified\n  version thereof, is also a <em>class-name</em>. If a <em>typedef-name</em> that names a\n  cv-qualified class type is used where a <em>class-name</em> is required, the\n  cv-qualifiers are ignored. A <em>typedef-name</em> shall not be used as the\n  <em>identifier</em> in a <em>class-head</em>.</p>\n</blockquote>\n<p>Also [expr.prim.general] 5.1.1/8 says</p>\n<blockquote>\n<p id=\"so_11478962_11478962_6\">Where <em>class-name</em> :: <em>class-name</em> is used, and the two class-names refer\n  to the same class, this notation names the constructor (12.1).</p>\n</blockquote>\n<hr>\n<h3>Application:</h3>\n<p>This seems to me to say that declaring a constructor should be allowed using typedef names (despite the fact that 12.1/1 doesn't use an italicized <em>class-name</em>).</p>\n<p>For example, given:</p>\n<pre><code>struct Foo;\ntypedef Foo Bar;\n</code></pre>\n<p>then</p>\n<pre><code>struct Foo { Bar() {} }; // defines Foo's constructor. - 1\n</code></pre>\n<p>or instead given</p>\n<pre><code>struct Foo;\nstruct Foo { Foo() };\ntypedef Foo Bar;\n</code></pre>\n<p>then</p>\n<pre><code>Foo::Bar() {}; // defines Foo's constructor - 2\n</code></pre>\n<p>or</p>\n<pre><code>Bar::Bar() {}; // defines Foo's constructor - 3\n</code></pre>\n<p>or</p>\n<pre><code>Bar::Foo() {}; // defines Foo's constructor - 4\n</code></pre>\n<p>Any of these should be legal. However nobody seems to accept definitions 2 or 3, MSVC accepts 1, and MSVC, clang, and gcc all accept 4.</p>\n<p>Is my analysis correct, and are all these compilers wrong?</p>\n</hr>", "Tags": "<c++><language-lawyer>", "OwnerUserId": "365496", "AnswerCount": "1"}, "11479069": {"ParentId": "11478962", "PostTypeId": "2", "CommentCount": "7", "Body": "<p>\u00a712.1/3 of <a href=\"http://open-std.org/JTC1/SC22/WG21/docs/papers/2012/n3337.pdf\">the working draft N3337 (Feb 2012)</a> states</p>\n<blockquote>\n<p id=\"so_11478962_11479069_0\">A <em>typedef-name</em> shall not be used as the <em>class-name</em> in the <em>declarator-id</em> for a constructor declaration.</p>\n</blockquote>\n<p>This rules out (1).</p>\n<p>\u00a712.1/1 seems to use the term \"declaration\" for both declarations and definitions:</p>\n<blockquote>\n<p id=\"so_11478962_11479069_1\">A special declarator syntax is used to declare or define the constructor. [\u2026] In such a declaration, [\u2026]</p>\n</blockquote>\n<p>(without referring to \"definitions\" explicitly). I think it's a bit unclear whether this applies to out-of-class definitions or only to inline definitions. If it applies to all kinds of definitions, this would rule out (2) and (3) as well. (4) should be legal in any case.</p>\n", "OwnerUserId": "178761", "LastEditorUserId": "178761", "LastEditDate": "2012-07-13T22:34:29.343", "Id": "11479069", "Score": "12", "CreationDate": "2012-07-13T22:15:21.527", "LastActivityDate": "2012-07-13T22:34:29.343"}, "bq_ids": {"n4140": {"so_11478962_11479069_0": {"section_id": 5414, "quality": 0.8, "length": 4}, "so_11478962_11478962_5": {"section_id": 5860, "quality": 0.9565217391304348, "length": 22}, "so_11478962_11478962_1": {"section_id": 3887, "quality": 0.7142857142857143, "length": 5}, "so_11478962_11478962_6": {"section_id": 5955, "quality": 0.75, "length": 9}}, "n3337": {"so_11478962_11478962_5": {"section_id": 5630, "quality": 0.9565217391304348, "length": 22}, "so_11478962_11478962_0": {"section_id": 355, "quality": 0.8888888888888888, "length": 8}, "so_11478962_11479069_1": {"section_id": 355, "quality": 1.0, "length": 8}, "so_11478962_11478962_1": {"section_id": 355, "quality": 1.0, "length": 7}, "so_11478962_11478962_6": {"section_id": 5724, "quality": 0.9166666666666666, "length": 11}, "so_11478962_11479069_0": {"section_id": 357, "quality": 1.0, "length": 5}}, "n4659": {"so_11478962_11478962_5": {"section_id": 7339, "quality": 0.9565217391304348, "length": 22}, "so_11478962_11478962_6": {"section_id": 7443, "quality": 0.75, "length": 9}, "so_11478962_11479069_0": {"section_id": 6836, "quality": 0.8, "length": 4}, "so_11478962_11478962_1": {"section_id": 4766, "quality": 0.7142857142857143, "length": 5}}}});