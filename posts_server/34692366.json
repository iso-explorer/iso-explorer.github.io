post_cb({"bq_ids": {"n4140": {"so_34692366_34692862_3": {"length": 17, "quality": 0.8947368421052632, "section_id": 505}, "so_34692366_34692862_0": {"length": 20, "quality": 0.8, "section_id": 5329}}, "n3337": {"so_34692366_34692862_3": {"length": 17, "quality": 0.8947368421052632, "section_id": 496}, "so_34692366_34692862_0": {"length": 20, "quality": 0.8, "section_id": 5126}}, "n4659": {"so_34692366_34692862_3": {"length": 17, "quality": 0.8947368421052632, "section_id": 526}, "so_34692366_34692862_0": {"length": 20, "quality": 0.8, "section_id": 6750}}}, "34692366": {"ViewCount": "188", "Body": "<p>there. As title saying.<br><br>\nUse <code>#include\"test.h\"</code> is legal.<br>\nUse <code>#include\"test/test.h\"</code> is also legal.<br>\nBut is it legal to use <code>#include\"../test.h\"</code>?<br/></br></br></br></br></p>\n<p>For example, <code>#pragma once</code> is legal in almost every compilers.<br>\nBut this is not standard in C++.</br></p>\n<p>I cannot find any documents which saying .. \"guarantee\" to be meaning of parent directory.<br>\nCan anyone help me?</br></p>\n", "AcceptedAnswerId": "34692862", "Title": "C++ Is it legal to use .. (dot dot) in #include directive?", "CreationDate": "2016-01-09T10:31:17.630", "Id": "34692366", "CommentCount": "5", "LastEditDate": "2016-01-09T11:09:49.403", "PostTypeId": "1", "LastEditorUserId": "3313064", "LastActivityDate": "2016-01-09T11:25:41.827", "Score": "2", "OwnerUserId": "5642738", "Tags": "<c++><include><include-path>", "AnswerCount": "1"}, "34692862": {"Id": "34692862", "PostTypeId": "2", "Body": "<p>The C++ standard says in \u00a72.8/1:</p>\n<blockquote>\n<p id=\"so_34692366_34692862_0\">Header name preprocessing tokens shall only appear within a <code>#include</code>\n  preprocessing directive (16.2). The sequences in both forms of\n  header-names are mapped in an <strong>implementation-defined manner to headers\n  or to external source file names</strong> as specified in 16.2.</p>\n</blockquote>\n<p>So here you have it: It's all implementation-defined. \u00a716.2 then says, among some other things not directly related to your question:</p>\n<blockquote>\n<p id=\"so_34692366_34692862_1\">A preprocessing directive of the form</p>\n<p id=\"so_34692366_34692862_2\"><code>#include</code> <code>\"</code><em>q-char-sequence</em><code>\"</code> <em>new-line</em></p>\n<p id=\"so_34692366_34692862_3\">causes the replacement of that directive by the entire contents of the\n  source file identified by the specified sequence between the <code>\"</code>\n  delimiters. <strong>The named source file is searched for in an\n  implementation-defined manner.</strong></p>\n</blockquote>\n<p>And this makes a lot of sense. Why shouldn't you be able to create a C++ compiler for file systems that do not use the \"..\" convention?</p>\n<p>In summary, to answer your question: Yes, it is legal according to the C++ standard, but that's not surprising because almost everything is technically legal for an <code>#include</code> directive.</p>\n<p>The more interesting question is what the documentation of your C++ implementation has to say about this. But even then you may be left with a rather generic explanation on the topic. For example, the <a href=\"https://msdn.microsoft.com/en-us/library/36k2cdd4.aspx\" rel=\"nofollow\">MSVC 2015 documentation for <code>#include</code></a> says:</p>\n<blockquote>\n<p id=\"so_34692366_34692862_4\">The <em>path-spec</em> is a file name that may optionally be preceded by a\n  directory specification. The file name must name an existing file. The\n  syntax of the <em>path-spec</em> <strong>depends on the operating system</strong> on which the\n  program is compiled.</p>\n</blockquote>\n", "LastActivityDate": "2016-01-09T11:25:41.827", "CommentCount": "0", "CreationDate": "2016-01-09T11:25:41.827", "ParentId": "34692366", "Score": "3", "OwnerUserId": "3313064"}});