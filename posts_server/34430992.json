post_cb({"bq_ids": {"n4140": {"so_34430992_34431070_1": {"length": 29, "quality": 0.9354838709677419, "section_id": 738}, "so_34430992_34431070_2": {"length": 30, "quality": 0.9090909090909091, "section_id": 739}, "so_34430992_34431070_3": {"length": 11, "quality": 0.7857142857142857, "section_id": 1032}}, "n3337": {"so_34430992_34431070_1": {"length": 28, "quality": 0.9032258064516129, "section_id": 727}, "so_34430992_34431070_2": {"length": 30, "quality": 0.9090909090909091, "section_id": 728}, "so_34430992_34431070_3": {"length": 11, "quality": 0.7857142857142857, "section_id": 1017}}, "n4659": {"so_34430992_34431070_1": {"length": 29, "quality": 0.9354838709677419, "section_id": 796}, "so_34430992_34431070_2": {"length": 30, "quality": 0.9090909090909091, "section_id": 797}, "so_34430992_34431070_3": {"length": 11, "quality": 0.7857142857142857, "section_id": 1104}}}, "34432172": {"Id": "34432172", "PostTypeId": "2", "Body": "<p><strong>Copy from comment to continue discussion</strong></p>\n<p>You passed the comparer <code>CLwObjCompare</code>, <code>set</code> use that comparer to determine if 2 object is the same.</p>\n<p>See <a href=\"http://en.cppreference.com/w/cpp/container/set\" rel=\"nofollow\">http://en.cppreference.com/w/cpp/container/set</a></p>\n<blockquote>\n<p id=\"so_34430992_34432172_0\">Everywhere the standard library uses the Compare concept, uniqueness is determined by using the equivalence relation. In imprecise terms, two objects a and b are considered equivalent (not unique) if neither compares less than the other: !comp(a, b) &amp;&amp; !comp(b, a)</p>\n</blockquote>\n<p><strong>Continue in discussion</strong></p>\n<p>Here below is my suggestion:</p>\n<pre><code>class CLwObj {\nprivate:\n    string name ;\n    int type ;\n\npublic:\n    CLwObj() {}\n    CLwObj(string val, int typ) { name =val ; type = typ; }\n\n    string getName() const { return name; }\n    int getType() const { return type; }\n};\n\nclass CLwObjCompare\n{\npublic:\n    bool operator () (const CLwObj&amp; obj1, const CLwObj&amp; obj2) const\n    {\n        return lhs.getName() &lt; rhs.getName() &amp;&amp; lhs.getType() &lt; rhs.getType();\n    }\n};\n\nint main ()\n{\n    set&lt;CLwObj, CLwObjCompare&gt; myset ;\n\n    myset.emplace(\"hello\", 1);\n    myset.emplace(\"kello\", 1);\n    myset.emplace(\"hello\", 2);\n    return 0;\n}\n</code></pre>\n", "LastActivityDate": "2015-12-23T09:15:27.077", "CommentCount": "0", "CreationDate": "2015-12-23T09:15:27.077", "ParentId": "34430992", "Score": "0", "OwnerUserId": "4115625"}, "34431070": {"Id": "34431070", "PostTypeId": "2", "Body": "<p>From <a href=\"http://www.cplusplus.com/reference/set/set/\" rel=\"nofollow\">http://www.cplusplus.com/reference/set/set/</a> (on the <code>Compare</code> template argument):</p>\n<blockquote>\n<p id=\"so_34430992_34431070_0\">The set object uses this expression to determine both the order the elements follow in the container <strong>and whether two element keys are equivalent</strong> (by comparing them reflexively: they are equivalent if !comp(a,b) &amp;&amp; !comp(b,a)). No two elements in a set container can be equivalent.\n  This can be a function pointer or a function object (see constructor for an example). </p>\n</blockquote>\n<p>From the <a href=\"https://isocpp.org/std/the-standard\" rel=\"nofollow\">standard</a>, \u00a723.2.4:</p>\n<blockquote>\n<ol start=\"2\">\n<li><p id=\"so_34430992_34431070_1\">Each associative container is parameterized on Key and an ordering\n  relation Compare that induces a strict weak ordering (25.4) on\n  elements of Key. In addition, map and multimap associate an arbitrary\n  mapped type T with the Key. The object of type Compare is called the\n  comparison object of a container. </p></li>\n<li><p id=\"so_34430992_34431070_2\">The phrase \u201cequivalence of keys\u201d\n  means the equivalence relation imposed by the comparison and not the\n  operator== on keys. That is, two keys k1 and k2 are considered to be\n  equivalent if for the comparison object comp, comp(k1, k2) == false &amp;&amp;\n  comp(k2, k1) == false. For any two keys k1 and k2 in the same\n  container, calling comp(k1, k2) shall always return the same value.</p></li>\n</ol>\n</blockquote>\n<p>And \u00a723.4.6.1 (emphasis is mine):</p>\n<blockquote id=\"so_34430992_34431070_3\">\n<ol start=\"2\">\n<li>A set satisfies all of the requirements of a container, of a reversible container (23.2), <strong>of an associative\n  container (23.2.4)</strong>, and of an allocator-aware container (Table 99).</li>\n</ol>\n</blockquote>\n", "LastEditorUserId": "2666289", "LastActivityDate": "2015-12-23T08:07:36.670", "Score": "2", "CreationDate": "2015-12-23T07:55:30.570", "ParentId": "34430992", "CommentCount": "0", "OwnerUserId": "2666289", "LastEditDate": "2015-12-23T08:07:36.670"}, "34430992": {"ViewCount": "67", "Body": "<p>I am wring one set of pointers </p>\n<pre><code>class CLwObj {\nprivate:\nstring name ;\nint type ;\n\npublic:\nCLwObj() {}\nCLwObj(string val, int typ) { name =val ; type = typ; }\n\nstring getName() { return name; }\nint getType() { return type; }\n};\n\nclass CLwObjCompare\n{\n    public:\n    bool operator () (CLwObj* obj1, CLwObj* obj2) const\n    {\n        bool val =  ((obj1-&gt;getName().compare(obj2-&gt;getName()) &lt; 0) ) ;\n        return val;\n    }\n};\n\nint main ()\n{\n    set&lt;CLwObj*, CLwObjCompare&gt; myset ;\n\n    CLwObj *obj1 = new CLwObj(\"hello\", 1);\n    CLwObj *obj2 = new CLwObj(\"kello\", 1);\n    CLwObj *obj3 = new CLwObj(\"hello\", 1);\n\n    myset.insert(obj1);\n    myset.insert(obj2);\n    myset.insert(obj3);\n    return 0;\n}\n</code></pre>\n<p>Please explain how insert work with custom comparator , i am getting only two entry since two having same name.    </p>\n<p>I thought compare function only decided orders.<br>\nAll object will have different address so 3 entry should be there .    </br></p>\n", "AcceptedAnswerId": "34431070", "Title": "How C++ set insert work with custom comparator", "CreationDate": "2015-12-23T07:50:20.630", "Id": "34430992", "CommentCount": "14", "PostTypeId": "1", "LastActivityDate": "2015-12-23T09:15:27.077", "Score": "-1", "OwnerUserId": "2885277", "Tags": "<c++><c++11>", "AnswerCount": "2"}});