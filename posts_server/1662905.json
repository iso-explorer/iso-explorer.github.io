post_cb({"1663245": {"ParentId": "1662905", "CommentCount": "3", "Body": "<p>Both compilers are right here; the behavior for your case is unspecified. ISO C++ 14.7.1[temp.inst]/9:</p>\n<blockquote>\n<p id=\"so_1662905_1663245_0\">An implementation shall not implicitly instantiate a function template, a member template, a non-virtual member function, a member class or a static data member of a class template that does not require instantiation. <strong>It is unspecified whether or not an implementation implicitly instantiates a virtual member function of a class template</strong> if the virtual member function would not otherwise be instantiated.</p>\n</blockquote>\n<p>The reasoning for this is fairly simple: a virtual function requires a vtable entry, and with virtual dispatch, it may be tricky for the compiler to determine whether a given virtual function is actually called or not. Therefore, ISO C++ permits the compilers to do such advanced analysis for the sake of generating smaller code, but does not require it of them - so, as a C++ programmer, you should always assume that all virtual functions will always be instantiated.</p>\n", "OwnerUserId": "111335", "PostTypeId": "2", "Id": "1663245", "Score": "3", "CreationDate": "2009-11-02T19:41:56.800", "LastActivityDate": "2009-11-02T19:41:56.800"}, "1662921": {"ParentId": "1662905", "PostTypeId": "2", "CommentCount": "6", "CreationDate": "2009-11-02T18:43:15.867", "Score": "1", "LastEditorUserId": "8123", "LastEditDate": "2009-11-02T19:59:54.683", "Id": "1662921", "OwnerUserId": "8123", "Body": "<p>The removal of unused functions will occur at <strong>linking</strong> not at compilation where you are having your error. MSVC may not know who amongst all the compilation units being compiled who will ultimately call that method. It can't know until compilation is complete and until linking occurs. Naturally different compilers may be smarter about this, but I suspect this may be what is happening.</p>\n<p>I suspect your specific compiler errors sounds like it is caused by you having only forward declared</p>\n<pre><code>template&lt;typename C&gt;\nstruct c_traits;\n</code></pre>\n<p>you have not fully specified the class. Did you try something as simple as:</p>\n<pre><code>template&lt;typename C&gt;\nstruct c_traits \n{\n    // some default/dummy int type\n};\n</code></pre>\n<p>I suspect this would at least stop the compiler from complaining. </p>\n<p><strong>EDIT</strong></p>\n<blockquote>\n<p id=\"so_1662905_1662921_0\">this is generally wrong for class\n  templates. Member functions of class\n  templates aren't supposed to be\n  compiled (and any errors in their\n  bodies aren't supposed to be\n  triggered) unless they're instantiated</p>\n</blockquote>\n<p>The template is instantiated in this case in the form of:</p>\n<pre><code> foo&lt;short&gt;\n</code></pre>\n<p>The compiler will treat this as any other class who's methods have potential for external linkage. I haven't heard any special language rule that says that external linkage doesn't apply to templates...?</p>\n", "LastActivityDate": "2009-11-02T19:59:54.683"}, "bq_ids": {"n4140": {"so_1662905_1663245_0": {"section_id": 243, "quality": 1.0, "length": 36}}, "n3337": {"so_1662905_1663245_0": {"section_id": 235, "quality": 1.0, "length": 36}}, "n4659": {"so_1662905_1663245_0": {"section_id": 250, "quality": 0.9444444444444444, "length": 34}}}, "1662905": {"CommentCount": "1", "AcceptedAnswerId": "1663245", "CreationDate": "2009-11-02T18:40:05.600", "LastActivityDate": "2009-11-02T19:59:54.683", "PostTypeId": "1", "ViewCount": "208", "FavoriteCount": "1", "Title": "Using valid STATIC member function of class that can't be installed", "Id": "1662905", "Score": "6", "Body": "<p>I have following piece of code:</p>\n<p>It compiles without problems under gcc-3.4, gcc-4.3, intel compiler, but fails under MSVC9.</p>\n<p>MSVC tells \"use of undefined type <code>c_traits&lt;C&gt;</code>, while compiling class template member function <code>void foo&lt;C&gt;::go(void)</code> with C=short.</p>\n<p>The point it the compiler tries to install unused member function of unused class, because\nthis class is just not used at all.</p>\n<p>I can work-around the issue by specializing entire class foo instead of specializing \nits member function. But the point it that specializing entire class is little bit problematic for me for different reasons. </p>\n<p><strong>The big question:</strong> what is right?</p>\n<ul>\n<li>Is my code wrong and gcc and intel compiler just ignore the issue because they do not install foo fully, or</li>\n<li>The code is correct and this is bug of MSVC9 (VC 2008) that it tries to install unused member functions?</li>\n</ul>\n<p>The code:</p>\n<pre><code>class base_foo {\npublic:\n    virtual void go() {};\n    virtual ~base_foo() {}\n};\ntemplate&lt;typename C&gt;\nstruct c_traits;\n\ntemplate&lt;&gt;\nstruct c_traits&lt;int&gt; {\n    typedef unsigned int_type;\n};\n\ntemplate&lt;typename C&gt;\nclass foo : public base_foo {\npublic:\n    static base_foo *create()\n    {\n        return new foo&lt;C&gt;();\n    }\n    virtual void go() \n    {\n        typedef typename c_traits&lt;C&gt;::int_type int_type;\n        int_type i;\n        i=1;\n    }\n};\n\ntemplate&lt;&gt;\nbase_foo *foo&lt;short&gt;::create()\n{\n    return new base_foo();\n}\n\nint main()\n{\n    base_foo *a;\n    a=foo&lt;short&gt;::create(); delete a;\n    a=foo&lt;int&gt;::create(); delete a;\n}\n</code></pre>\n", "Tags": "<c++><visual-c++><specialization>", "OwnerUserId": "66522", "AnswerCount": "2"}});