post_cb({"bq_ids": {"n4140": {"so_8509712_8509712_1": {"length": 8, "quality": 0.8888888888888888, "section_id": 661}, "so_8509712_8509712_0": {"length": 15, "quality": 0.7894736842105263, "section_id": 661}}, "n3337": {"so_8509712_8509712_1": {"length": 8, "quality": 0.8888888888888888, "section_id": 651}, "so_8509712_8509712_0": {"length": 15, "quality": 0.7894736842105263, "section_id": 651}}, "n4659": {"so_8509712_8509712_1": {"length": 8, "quality": 0.8888888888888888, "section_id": 689}, "so_8509712_8509712_0": {"length": 15, "quality": 0.7894736842105263, "section_id": 689}}}, "8509862": {"Id": "8509862", "PostTypeId": "2", "Body": "<p>Question 1.\nFor <code>B</code>, the copy assignment operator  is <code>B::operator=(const B&amp;)</code> or similar.  For <code>D</code> it's <code>D::operator=(const D&amp;)</code>. One cannot override the other because argument types are different.</p>\n", "LastActivityDate": "2011-12-14T18:38:06.430", "CommentCount": "2", "CreationDate": "2011-12-14T18:38:06.430", "ParentId": "8509712", "Score": "1", "OwnerUserId": "775806"}, "8509712": {"ViewCount": "89", "Body": "<pre><code>#include \"stdafx.h\"\n#include &lt;iostream&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nstruct B {\n    virtual int operator= (int rhs)\n    {\n        m_iValue = rhs;\n        return m_iValue;\n    }\n\n    virtual B&amp; operator= (const B&amp; rhs)\n    {\n        m_iValue = rhs.m_iValue;\n        return *this;\n    }\n\n    int m_iValue;\n};\nstruct D : B {\n    virtual int operator= (int rhs)\n    {\n        m_iValue = rhs;\n        return m_iValue;\n    }\n\n    virtual D&amp; operator= (const B&amp; rhs)\n    {\n        m_iValue = rhs.m_iValue;\n        return *this;\n    }\n};\n\nint _tmain(int argc, _TCHAR* argv[])\n{\n    D dobj1;\n    D dobj2;\n    B* bptr = &amp;dobj1;\n\n    bptr-&gt;operator=(99);     // calls D::operator=(int)\n    *bptr = 99;              // ditto\n    bptr-&gt;operator=(dobj2);  // calls D::operator=(const B&amp;)\n    *bptr = dobj2;           // ditto\n    dobj1 = dobj2;           // calls implicitly-declared\n                             // D::operator=(const D&amp;)\n    return 0;\n}\n</code></pre>\n<p><strong>Question 1</strong>&gt; This question maybe is related to the question 2&amp;3.</p>\n<p>Reference: C++03 13.5.3/2</p>\n<blockquote>\n<p id=\"so_8509712_8509712_0\">Note: for a derived class D with a base class B for which a virtual\n  copy assignment has been declared, the copy assignment operator in D\n  does not override B\u2019s virtual copy assignment operator.</p>\n</blockquote>\n<p>What does the following statement mean in plain English?</p>\n<blockquote>\n<p id=\"so_8509712_8509712_1\">the copy assignment operator in D does not override B\u2019s virtual copy\n  assignment operator.</p>\n</blockquote>\n<p><strong>Question 2</strong>&gt;  why the following statement call `D::operator=(int)</p>\n<pre><code>    *bptr = 99;              // ditto\n</code></pre>\n<p><strong>Question 3</strong>&gt; Why the following statement call implicit <code>D::operator=(const D&amp;)</code></p>\n<pre><code>    dobj1 = dobj2;           // calls implicitly D::operator=(const D&amp;)\n</code></pre>\n", "Title": "How to understanding the meaning of C++03 13.5.3/2", "CreationDate": "2011-12-14T18:25:20.567", "LastActivityDate": "2011-12-14T18:43:27.360", "CommentCount": "1", "PostTypeId": "1", "Id": "8509712", "Score": "0", "OwnerUserId": "391104", "Tags": "<c++>", "AnswerCount": "1"}});