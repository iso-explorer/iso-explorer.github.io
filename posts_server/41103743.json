post_cb({"bq_ids": {"n4140": {"so_41103743_41104716_0": {"length": 29, "quality": 0.7837837837837838, "section_id": 1243}}, "n3337": {"so_41103743_41104716_0": {"length": 29, "quality": 0.7837837837837838, "section_id": 1241}}, "n4659": {"so_41103743_41104716_0": {"length": 29, "quality": 0.7837837837837838, "section_id": 1331}}}, "41103743": {"ViewCount": "162", "Body": "<p>So I've written a nasty lambda to <a href=\"https://stackoverflow.com/a/41101145/2642059\">satisfy a \"shortest amount of code necessary to achieve this\" question</a>:</p>\n<pre><code>values.resize(distance(\n    begin(values),\n    remove_if(begin(values), end(values),\n        [i = 0U, it = cbegin(intervals), end = cend(intervals)](const auto&amp;) mutable {\n        return it != end &amp;&amp; ++i &gt; it-&gt;first &amp;&amp; (i &lt;= it-&gt;second || (++it, true));\n    })\n));\n</code></pre>\n<p>My problem is that on Visual Studio Community 2015 Update 3 version 14.0.25425.01 this outputs the desired:</p>\n<blockquote>\n<p id=\"so_41103743_41103743_0\">4.2 9.1 2.3 0.6 6.4 3.6 1.4 7.5</p>\n</blockquote>\n<p>But on <a href=\"http://ideone.com/UOhuvO\" rel=\"nofollow noreferrer\">all the other compilers I've tried</a> I get:</p>\n<blockquote>\n<p id=\"so_41103743_41103743_1\">4.2 2.3 0.6 1.2 0.3 1.4 2.5 7.5</p>\n</blockquote>\n<p>Can anyone tell me what's causing the different behavior?</p>\n", "AcceptedAnswerId": "41104716", "Title": "Lambda Works on Latest Visual Studio, but Doesn't Work Elsewhere", "CreationDate": "2016-12-12T15:05:48.560", "Id": "41103743", "CommentCount": "12", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2017-05-23T12:08:47.680", "LastEditorUserId": "-1", "LastActivityDate": "2016-12-12T16:00:34.940", "Score": "8", "OwnerUserId": "2642059", "Tags": "<c++><visual-studio><visual-studio-2015><lambda><compiler-bug>", "AnswerCount": "1"}, "41104716": {"Id": "41104716", "PostTypeId": "2", "Body": "<p>You are relying on the fact that the exact closure you pass into the algorithm is the one used as the predicate, but the standard allows it to be copied:</p>\n<blockquote>\n<p id=\"so_41103743_41104716_0\"><code>[algorithms.general]/10 (N4140)</code>: [Note: Unless otherwise specified, algorithms that take function objects as arguments are permitted to copy\n  those function objects freely. Programmers for whom object identity is important should consider using a\n  wrapper class that points to a noncopied implementation object such as reference_wrapper (20.9.3),\n  or some equivalent solution. \u2014end note ]</p>\n</blockquote>\n<p>This is exactly what libstdc++ does. From v6.2.1:</p>\n<pre><code>template&lt;typename _ForwardIterator, typename _Predicate&gt;\n_ForwardIterator\n__remove_if(_ForwardIterator __first, _ForwardIterator __last,\n            _Predicate __pred)\n{\n    __first = std::__find_if(__first, __last, __pred);\n    if (__first == __last)\n    return __first;\n    _ForwardIterator __result = __first;\n    ++__first;\n    for (; __first != __last; ++__first)\n    if (!__pred(__first))\n        {\n        *__result = _GLIBCXX_MOVE(*__first);\n        ++__result;\n        }\n    return __result;\n}\n</code></pre>\n<p>That call to <code>std::__find_if</code> at the start of the function copies <code>__pred</code>, which means that the value of <code>i</code> is incremented a bit within <code>std::__find_if</code>, but this doesn't change what's going on at the call site.</p>\n<p>To fix this problem, you could use <code>std::ref</code>:</p>\n<pre><code>auto clos = [i = 0U, it = cbegin(intervals), end = cend(intervals)](const auto&amp;) mutable {\n    return it != end &amp;&amp; ++i &gt; it-&gt;first &amp;&amp; (i &lt;= it-&gt;second || (++it, true));\n};\nvalues.resize(distance(begin(values), std::remove_if(begin(values), end(values), std::ref(clos))));\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/7b102ebf777ce671\" rel=\"nofollow noreferrer\">Live demo</a></p>\n", "LastActivityDate": "2016-12-12T16:00:34.940", "Score": "10", "CreationDate": "2016-12-12T16:00:34.940", "ParentId": "41103743", "CommentCount": "5", "OwnerUserId": "496161"}});