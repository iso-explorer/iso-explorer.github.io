post_cb({"bq_ids": {"n4140": {"so_44613079_44613183_2": {"length": 47, "quality": 0.94, "section_id": 1920}, "so_44613079_44613293_2": {"length": 4, "quality": 0.6666666666666666, "section_id": 7151}, "so_44613079_44613293_3": {"length": 16, "quality": 0.7272727272727273, "section_id": 7151}, "so_44613079_44613293_1": {"length": 36, "quality": 0.8780487804878049, "section_id": 1920}}, "n3337": {"so_44613079_44613183_2": {"length": 47, "quality": 0.94, "section_id": 1909}, "so_44613079_44613293_2": {"length": 4, "quality": 0.6666666666666666, "section_id": 6895}, "so_44613079_44613293_3": {"length": 15, "quality": 0.6818181818181818, "section_id": 6895}, "so_44613079_44613293_1": {"length": 36, "quality": 0.8780487804878049, "section_id": 1909}}, "n4659": {"so_44613079_44613183_2": {"length": 35, "quality": 0.7, "section_id": 2191}, "so_44613079_44613293_2": {"length": 4, "quality": 0.6666666666666666, "section_id": 8655}, "so_44613079_44613293_3": {"length": 22, "quality": 1.0, "section_id": 8655}, "so_44613079_44613293_1": {"length": 36, "quality": 0.8780487804878049, "section_id": 2191}}}, "44613206": {"Id": "44613206", "PostTypeId": "2", "Body": "<p>Take a look at the header <a href=\"http://en.cppreference.com/w/cpp/header/iostream\" rel=\"nofollow noreferrer\"><code>&lt;iostream&gt;</code></a>.</p>\n<p>The standard says it acts like it defined a TU-local object of type <a href=\"http://en.cppreference.com/w/cpp/io/ios_base/Init\" rel=\"nofollow noreferrer\"><code>std::ios_base::Init</code></a>, which handles initializing and at the end flushing the standard streams.</p>\n", "LastActivityDate": "2017-06-18T08:39:24.310", "CommentCount": "0", "CreationDate": "2017-06-18T08:39:24.310", "ParentId": "44613079", "Score": "1", "OwnerUserId": "3204551"}, "44613079": {"ViewCount": "144", "Body": "<p>In C++ static-storage-duration objects are initialized in unspecified order (except in the same compilation unit).</p>\n<p>With code like:</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct Foo {\n    Foo() {\n        std::cout &lt;&lt; \"Hello, world.\\n\";\n    }\n} foo_instance;\n\nint main(int argc, const char *argv[]) {\n    return 0;\n}\n</code></pre>\n<p>where is stated in the standard I can already use <code>std::cout</code> during initialization of <code>foo_instance</code>?</p>\n<p>I know I can ensure things will work by adding some trickery in <code>&lt;iostream&gt;</code>, for example by having it containing something like</p>\n<pre><code>int __ensure_stdout_initialization_call();\nnamespace {\n    int __ensure_stdout_initialization\n      = __ensure_stdout_initialization_call();\n}\n</code></pre>\n<p>the question is however about where it's guaranteed that this is done for all initialization needed by the standard library.</p>\n", "AcceptedAnswerId": "44613293", "Title": "Static-storage-duration initialization", "CreationDate": "2017-06-18T08:24:14.037", "Id": "44613079", "CommentCount": "0", "LastEditDate": "2017-06-18T08:40:41.290", "PostTypeId": "1", "LastEditorUserId": "3204551", "LastActivityDate": "2017-06-19T10:41:40.247", "Score": "2", "OwnerUserId": "320726", "Tags": "<c++><initialization><language-lawyer><iostream>", "AnswerCount": "3"}, "44613183": {"Id": "44613183", "PostTypeId": "2", "Body": "<p>I am not sure whether it is explicitly stated in the standard (*), but usually <em>std::cin</em>, <em>std::cout</em> and <em>std::cerr</em> are implemented with a help of <a href=\"https://en.wikibooks.org/wiki/More_C%2B%2B_Idioms/Nifty_Counter\" rel=\"nofollow noreferrer\">Nifty Counter</a> idiom.</p>\n<p>The basic idea is to include in the header file a helper static object, which, during its initialisation, check whether stream object has been already initialised and, if no, initialises it. As includes usually come first, such helper static object is initialised before any other static objects in the same translation unit and ensure proper initialisation of a stream object before any other static object may reference it.</p>\n<p>(*) <strong>EDIT:</strong></p>\n<p>Here is an appropriate wording from the standard draft <em>N3936</em>:</p>\n<blockquote>\n<p id=\"so_44613079_44613183_0\">27.4 Standard iostream objects</p>\n<p id=\"so_44613079_44613183_1\">27.4.1.2</p>\n<p id=\"so_44613079_44613183_2\">The objects are constructed and the associations are established at\n  some time prior to or during the first time an object of class\n  ios_base::Init is constructed, and in any case before the body of main\n  begins execution. The objects are not destroyed during program\n  execution. The results of including &lt; iostream &gt; in a translation unit\n  shall be as if  defined an instance of ios_base::Init with\n  static storage duration. Similarly, the entire program shall behave as\n  if there were at least one instance of ios_base::Init with static\n  storage duration.</p>\n</blockquote>\n", "LastEditorUserId": "5507349", "LastActivityDate": "2017-06-19T10:41:40.247", "Score": "2", "CreationDate": "2017-06-18T08:36:18.850", "ParentId": "44613079", "CommentCount": "0", "OwnerUserId": "5507349", "LastEditDate": "2017-06-19T10:41:40.247"}, "44613293": {"Id": "44613293", "PostTypeId": "2", "Body": "<p>tl;dr; You should not use <code>std::cout</code> during initialization of <code>foo_instance</code>.</p>\n<p>The only requirement regardless initialization of standard streams in standards is</p>\n<blockquote>\n<p id=\"so_44613079_44613293_0\">27.4.1 Overview [iostream.objects.overview]</p>\n<p id=\"so_44613079_44613293_1\">3 The objects are constructed and the associations are established at some time prior to or during the first time an object of class <code>ios_base::Init</code> is constructed, and in any case before the body of main begins execution. 291 The objects are not destroyed during program execution. 292 The results of including <code>&lt;iostream&gt;</code> in a translation unit shall be as if <code>&lt;iostream&gt;</code> defined an instance of <code>ios_base::Init</code> with static storage duration.</p>\n</blockquote>\n<p>So if you include <code>&lt;iostream&gt;</code> before declaring your static variable you are save because according to standard</p>\n<blockquote>\n<p id=\"so_44613079_44613293_2\">3.6.3 Dynamic initialization of non-local variables [basic.start.dynamic]</p>\n<p id=\"so_44613079_44613293_3\">2 Dynamic initialization of non-local variables V and W with static storage duration are ordered as follows:\n  (2.1) If V and W have ordered initialization and V is defined before W within a single translation unit, the initialization of V is sequenced before the initialization of W.</p>\n</blockquote>\n<p>so <code>ios_base::Init</code> will be initialized before your variable and standard streams will be ready, but it seems that you can still shot yourself in the leg if you declare your variable <em>before</em> including <code>&lt;iostream&gt;</code>:</p>\n<pre><code>struct Foo\n{\n    Foo();\n} foo_instance; // uses ::std::cout\n\n#include &lt;iostream&gt; // declares ios_base::Init variable that will init ::std::cout\n\nFoo::Foo()\n{\n    std::cout &lt;&lt; \"Hello, world.\\n\";\n}\n\nint main(int argc, const char *argv[]) {\n    return 0;\n}\n</code></pre>\n<p><a href=\"http://ideone.com/7dJG1J\" rel=\"nofollow noreferrer\">dying example</a></p>\n<p>So I can conclude that you can not use std::cout during dynamic initialization of non-local variables.</p>\n", "LastEditorUserId": "7860670", "LastActivityDate": "2017-06-18T08:55:46.340", "Score": "2", "CreationDate": "2017-06-18T08:50:15.023", "ParentId": "44613079", "CommentCount": "1", "OwnerUserId": "7860670", "LastEditDate": "2017-06-18T08:55:46.340"}});