post_cb({"13246425": {"ParentId": "13223486", "CommentCount": "0", "Body": "<p>Change the declaration like ...</p>\n<p>GameObject* SphereObstacle::cloneNew(const Vector&amp; position, double charge, Vector dipole, ...)</p>\n", "OwnerUserId": "1145335", "PostTypeId": "2", "Id": "13246425", "Score": "0", "CreationDate": "2012-11-06T07:34:43.273", "LastActivityDate": "2012-11-06T07:34:43.273"}, "13223486": {"CommentCount": "0", "ViewCount": "182", "CreationDate": "2012-11-04T22:14:57.173", "LastActivityDate": "2012-11-06T07:34:43.273", "Title": "C++ va_list returning odd values", "AcceptedAnswerId": "13223529", "PostTypeId": "1", "Id": "13223486", "Score": "0", "Body": "<p>I'm trying to implement a form of reflection in C++ for a project. The idea is that you register classes with tags into a map as a sort of template, then call the cloneNew method of the shared base class to actually create the object that you want. However when I try to use a va_list to implement this functionality I get weird results. The problem code is:</p>\n<pre><code>GameObject* SphereObstacle::cloneNew(const Vector&amp; position, double charge, const Vector&amp;         dipole, ...)\n{\n    va_list v1;\n    va_start(v1, dipole);\n    double radius = va_arg(v1, double);\n    va_end(v1);\n    return new SphereObstacle(position, charge, dipole, radius);\n}\n</code></pre>\n<p>Every time I try to read from the va_list it returns a value that is huge. It almost seems like its a pointer. My only thought is that the issue is caused by the fact that this is an implementation of a virtual method in the base class, but I haven't found anything online to suggest that that is the issue. What is it that I am doing wrong?</p>\n", "Tags": "<c++>", "OwnerUserId": "894333", "AnswerCount": "2"}, "13223529": {"ParentId": "13223486", "CommentCount": "1", "Body": "<p>The problem is with <code>dipole</code> being of a reference type. Regarding <code>va_start</code>, citing [support.runtime]/3:</p>\n<blockquote>\n<p id=\"so_13223486_13223529_0\">The parameter parmN is the identifier of the rightmost parameter\n  in the variable parameter list of the function definition (the one just before the ...). If the parameter\n  parmN is declared with a function, array, or reference type, or with a type that is not compatible with the\n  type that results when passing an argument for which there is no parameter, the behavior is undefined.</p>\n</blockquote>\n", "OwnerUserId": "89847", "PostTypeId": "2", "Id": "13223529", "Score": "4", "CreationDate": "2012-11-04T22:20:00.557", "LastActivityDate": "2012-11-04T22:20:00.557"}, "bq_ids": {"n4140": {"so_13223486_13223529_0": {"section_id": 6966, "quality": 0.875, "length": 28}}, "n3337": {"so_13223486_13223529_0": {"section_id": 6713, "quality": 0.96875, "length": 31}}, "n4659": {"so_13223486_13223529_0": {"section_id": 8465, "quality": 0.84375, "length": 27}}}});