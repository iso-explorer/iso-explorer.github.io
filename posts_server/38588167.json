post_cb({"38588425": {"ParentId": "38588167", "PostTypeId": "2", "CommentCount": "5", "CreationDate": "2016-07-26T11:17:37.960", "Score": "1", "LastEditorUserId": "2877241", "LastEditDate": "2016-07-26T11:30:50.230", "Id": "38588425", "OwnerUserId": "2877241", "Body": "<p>Whether a function has the extern specifier or not in any case it has external linkage (if it is not explicitly declared as having internal linkage).</p>\n<p>However a local function declaration can hide other function declarations with the same name in the outer scope.</p>\n<p>Consider the following demonstrative program</p>\n<pre><code>#include &lt;iostream&gt;\n\nvoid f( int ) { std::cout &lt;&lt; \"F( int )\" &lt;&lt; std::endl; }\nvoid f( short ) { std::cout &lt;&lt; \"f( short )\" &lt;&lt; std::endl; }\n\nint main() \n{\n    void f( short );\n\n    f( 10 );\n\n    return 0;\n}\n</code></pre>\n<p>Its output is</p>\n<pre><code>f( short )\n</code></pre>\n<p>If to comment the local declaration then the output will be</p>\n<pre><code>F( int )\n</code></pre>\n", "LastActivityDate": "2016-07-26T11:30:50.230"}, "38588167": {"CommentCount": "4", "ViewCount": "80", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2016-07-26T11:05:06.110", "LastActivityDate": "2016-07-26T12:14:55.607", "Title": "Difference between local/block-scope declaration of function with extern and without it", "AcceptedAnswerId": "38589645", "LastEditDate": "2017-05-23T12:17:30.827", "Id": "38588167", "Score": "2", "Body": "<p>It appears that in C++ <code>extern</code> (NOT followed by a language-linkage string literal) makes no difference on function declarations at namespace scope (<a href=\"https://stackoverflow.com/questions/7866576/difference-between-declaration-of-function-with-extern-and-without-it\">Difference between declaration of function with extern and without it</a>).  But does it have any effect whatsoever on block scope function declarations?  Or is a local function declaration without <code>extern</code> always equivalent to one with <code>extern</code>?</p>\n<pre><code>namespace {\n  void f() {\n     extern void g(); // has external linkage\n     g();\n  }\n  void f2() {\n     void g();        // always the same, as if, without extern\n     g();\n  }\n}\n</code></pre>\n<p>Thanks!</p>\n", "Tags": "<c++><scope><extern><linkage><function-declaration>", "OwnerUserId": "6639352", "AnswerCount": "2"}, "38589645": {"ParentId": "38588167", "CommentCount": "0", "CreationDate": "2016-07-26T12:14:55.607", "OwnerUserId": "2069064", "PostTypeId": "2", "Id": "38589645", "Score": "2", "Body": "<p>The rules here come from [basic.link]:</p>\n<blockquote>\n<p id=\"so_38588167_38589645_0\">The name of a function declared in block scope and the name of a variable declared by a block scope <code>extern</code>\n  declaration have linkage. If there is a visible declaration of an entity with linkage having the same name and\n  type, ignoring entities declared outside the innermost enclosing namespace scope, the block scope declaration\n  declares that same entity and receives the linkage of the previous declaration. If there is more than one such\n  matching entity, the program is ill-formed. Otherwise, if no matching entity is found, the block scope entity\n  receives external linkage.</p>\n</blockquote>\n<p>So there is no difference between a block scope function declaration with and without <code>external</code>. But note the interesting example:</p>\n<blockquote id=\"so_38588167_38589645_1\">\n<pre><code>static void f();\n\nvoid g() {\n    extern void f(); // internal linkage\n}\n</code></pre>\n</blockquote>\n<p>Here, the block scope <code>f</code> redeclares <code>::f</code> and receives its same linkage: internal. Even though it's marked <code>extern</code>. But the presence of absence of the <code>extern</code> keyword is immaterial</p>\n", "LastActivityDate": "2016-07-26T12:14:55.607"}, "bq_ids": {"n4140": {"so_38588167_38589645_0": {"section_id": 7139, "quality": 0.9833333333333333, "length": 59}}, "n3337": {"so_38588167_38589645_0": {"section_id": 6883, "quality": 0.9833333333333333, "length": 59}}, "n4659": {"so_38588167_38589645_0": {"section_id": 8640, "quality": 0.9833333333333333, "length": 59}}}});