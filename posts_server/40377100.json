post_cb({"bq_ids": {"n4140": {"so_40377100_40377459_2": {"length": 32, "quality": 1.0, "section_id": 234}, "so_40377100_40377459_1": {"length": 36, "quality": 0.9473684210526315, "section_id": 233}}, "n3337": {"so_40377100_40377459_2": {"length": 32, "quality": 1.0, "section_id": 227}, "so_40377100_40377459_1": {"length": 36, "quality": 0.9473684210526315, "section_id": 226}}, "n4659": {"so_40377100_40377459_2": {"length": 31, "quality": 0.96875, "section_id": 244}, "so_40377100_40377459_1": {"length": 36, "quality": 0.9473684210526315, "section_id": 243}}}, "40377210": {"Id": "40377210", "PostTypeId": "2", "Body": "<p>This is because the standard mandates that <code>test</code> will be instantiated only when it is used. Member variables/member functions/static members of a template class aren't instantiated without them being used.</p>\n<p>In your case the moment you try to do a <code>x.test</code> compiler tries to find <code>test</code> and subsequently cannot do it as <code>x::size</code> is missing.</p>\n<p>The behaviour is pretty much accepted and common and ofcourse as per the standard.</p>\n", "LastActivityDate": "2016-11-02T10:08:12.040", "CommentCount": "3", "CreationDate": "2016-11-02T10:08:12.040", "ParentId": "40377100", "Score": "8", "OwnerUserId": "2777063"}, "40377100": {"ViewCount": "61", "Body": "<p>I am trying to find an easy way (with pre C++11, ie no <code>decltype</code>) to document what requirements a template has on a type to work properly. Maybe there are better ways to do this. However, this is my question:</p>\n<pre><code>#include &lt;iostream&gt;\n\ntemplate &lt;typename T&gt; struct Foo {\n    static const int test = sizeof(T::size);\n};\n\ntemplate &lt;typename T&gt; struct DetectAndError {\n    DetectAndError() { int test = sizeof(T::size); }\n};\n\nstruct Bar {};\n\nint main() {\n    Foo&lt;Bar&gt; x;                            // NO ERROR ? :/\n    // std::cout &lt;&lt; x.test &lt;&lt; std::endl;   // ERROR :)\n    // DetectAndError&lt;Bar&gt; y;              // ERROR :)\n}\n</code></pre>\n<p>Why is <code>Foo&lt;Bar&gt; x;</code> not an error? \nFor the other lines I get what I want: </p>\n<pre><code>error: 'size' is not a member of 'Bar' \n</code></pre>\n", "AcceptedAnswerId": "40377210", "Title": "Why instantiation fails for local variable but not for static?", "CreationDate": "2016-11-02T10:03:02.073", "Id": "40377100", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2016-11-02T10:20:28.473", "Score": "3", "OwnerUserId": "4117728", "Tags": "<c++><templates><compiler-errors>", "AnswerCount": "2"}, "40377459": {"Id": "40377459", "PostTypeId": "2", "Body": "<p>The other answer is valid, but here's some standardese for it:</p>\n<blockquote>\n<p id=\"so_40377100_40377459_0\">N4140 \u00a7 14.7.1 [temp.inst]/ 1 and 2</p>\n<p id=\"so_40377100_40377459_1\">The implicit instantiation of a class template specialization causes\n  the implicit instantiation of the declarations, but not of the\n  definitions, default arguments, or <em>exception-specification</em> s of the\n  class member functions, member classes, scoped member enumerations,\n  static data members and member templates; and it causes the implicit\n  instantiation of the definitions of unscoped member enumerations and\n  member anonymous unions.</p>\n<p id=\"so_40377100_40377459_2\">the specialization of the member is implicitly instantiated when the\n  specialization is referenced in a context that requires the member\n  definition to exist; in particular, the initialization (and any\n  associated side-effects) of a static data member does not occur unless\n  the static data member is itself used in a way that requires the\n  definition of the static data member to exist.</p>\n</blockquote>\n<p>Thus, <code>test</code> is only declared in the first line, but yields an error when instantiation is attempted. As for <code>DetectAndError</code>, you're implicitly calling its default constructor. <code>typedef DetectAndError&lt;Foo&gt; foo</code> or <code>DetectAndError&lt;Foo&gt;* ptr</code> should compile with no problems</p>\n", "LastActivityDate": "2016-11-02T10:20:28.473", "CommentCount": "0", "CreationDate": "2016-11-02T10:20:28.473", "ParentId": "40377100", "Score": "5", "OwnerUserId": "2456565"}});