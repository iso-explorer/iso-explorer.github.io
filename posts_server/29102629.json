post_cb({"29102749": {"ParentId": "29102629", "CommentCount": "2", "Body": "<p>Quoting C++11, 8.3.2/1:</p>\n<blockquote>\n<p id=\"so_29102629_29102749_0\">... Cv-qualified references are ill-formed except when the cv-qualifiers are introduced through the use of a typedef (7.1.3) or of a template type argument (14.3), in which case the cv-qualifiers\n  are ignored. ...</p>\n</blockquote>\n", "OwnerUserId": "1782465", "PostTypeId": "2", "Id": "29102749", "Score": "4", "CreationDate": "2015-03-17T15:12:09.640", "LastActivityDate": "2015-03-17T15:12:09.640"}, "29102629": {"CommentCount": "4", "ViewCount": "193", "CreationDate": "2015-03-17T15:05:48.187", "LastActivityDate": "2015-03-17T15:12:09.640", "Title": "What's the formal of C++ const reference (not reference to const, but const reference)", "AcceptedAnswerId": "29102749", "PostTypeId": "1", "Id": "29102629", "Score": "3", "Body": "<p>Given</p>\n<pre><code>template&lt; class Type &gt;\nvoid constref( Type const ) {}\n\nvoid constref_call() { double x; constref&lt;double&amp;&gt;( x ); }      // OK\n\ntemplate&lt; class Type &gt;\nusing reference = Type&amp;;\n\nvoid foo( reference&lt; const int &gt; const x ) { (void) x; }        // OK\n\ntemplate&lt; class Type &gt;\nvoid foot( reference&lt; const Type &gt; arg ) { (void) arg; }\n\nvoid foot_call() { foot( 3.14 ); }      // Deduces arg type no problem.\n\nvoid foo2( int const&amp; const x ) { (void) x; }                   // !\n</code></pre>\n<p>With both Visual C++ and g++ this code compiles as indicated in the comments, with only <code>foo2</code> provoking a compilation error.</p>\n<p>I would have liked <code>foo</code> to similarly result in compilation error, in order to be able to use that notation with the same constraints as the core language's \u201cfailed experiment\u201d operator notation.</p>\n<p>I suspect that the reason that <code>foo</code> compiles is the same as the reason why the call in <code>constref_call</code> compiles, some exemption to do with templates, but is that really so \u2013 what are the standard's formal rules here?</p>\n", "Tags": "<c++><templates><c++11><language-lawyer><template-aliases>", "OwnerUserId": "464581", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_29102629_29102749_0": {"section_id": 3218, "quality": 0.6666666666666666, "length": 12}}, "n3337": {"so_29102629_29102749_0": {"section_id": 3092, "quality": 0.8888888888888888, "length": 16}}, "n4659": {"so_29102629_29102749_0": {"section_id": 3975, "quality": 0.6666666666666666, "length": 12}}}});