post_cb({"28614591": {"CommentCount": "0", "AcceptedAnswerId": "28614655", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2015-02-19T18:54:13.977", "LastActivityDate": "2015-02-19T19:24:41.327", "LastEditDate": "2017-05-23T12:34:14.043", "ViewCount": "3181", "FavoriteCount": "2", "Title": "how to initialize a constexpr reference", "Id": "28614591", "Score": "16", "Body": "<p>I am trying to initialize a <code>constexpr</code> reference with no success. I tried</p>\n<pre><code>#include &lt;iostream&gt;\n\nconstexpr int&amp; f(int&amp; x) // can define functions returning constexpr references\n{\n    return x;\n}\n\nint main()\n{\n    constexpr int x{20};\n    constexpr const int&amp; z = x; // error here\n}\n</code></pre>\n<p>but I'm getting a compile time error</p>\n<blockquote>\n<p id=\"so_28614591_28614591_0\">error: constexpr variable 'z' must be initialized by a constant expression</p>\n</blockquote>\n<p>Dropping the <code>const</code> results in </p>\n<blockquote>\n<p id=\"so_28614591_28614591_1\">error: binding of reference to type 'int' to a value of type 'const int' drops qualifiers</p>\n</blockquote>\n<p>even though I had the feeling that <code>constexpr</code> automatically implies <code>const</code> for variable declarations.</p>\n<p>So my questions are:</p>\n<ol>\n<li>Are <code>constexpr</code> references ever useful? (i.e., \"better\" than <code>const</code> references)</li>\n<li>If yes, how can I effectively define them?</li>\n</ol>\n<p>PS: I've seen a couple of questions related to mine, such as <a href=\"https://stackoverflow.com/q/26121939/3093378\">Which values can be assigned to a `constexpr` reference?</a> , but I don't think they address my questions.</p>\n", "Tags": "<c++><c++11><reference><constexpr>", "OwnerUserId": "3093378", "AnswerCount": "3"}, "28614776": {"ParentId": "28614591", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>So the problem is that a constexpr reference needs to bind to an object with static storage duration, which is covered in the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf\" rel=\"nofollow\">draft C++11 standard: N3337</a> section <code>5.19</code> <em>[expr.const]</em> (<em>emphasis mine</em>):</p>\n<blockquote>\n<p id=\"so_28614591_28614776_0\">A reference constant expression is an lvalue\n  core constant expression that designates an object <strong>with static storage duration</strong> or a function</p>\n</blockquote>\n<p>The <a href=\"https://github.com/cplusplus/draft/blob/b7b8ed08ba4c111ad03e13e8524a1b746cb74ec6/papers/N3936.pdf\" rel=\"nofollow\">draft C++14 standard: N3936</a> changes the wording:</p>\n<blockquote>\n<p id=\"so_28614591_28614776_1\">A constant expression is either a glvalue core constant expression whose value refers to an object with static\n  storage duration or to a function, or a prvalue core constant expression whose value is an object where, for\n  that object and its subobjects:</p>\n<ul>\n<li>each non-static data member of reference type refers to an object with static storage duration or to a\n  function, and</li>\n<li>if the object or subobject is of pointer type, it contains the address of an object with static storage\n  duration, the address past the end of such an object (5.7), the address of a function, or a null pointer\n  value.</li>\n</ul>\n</blockquote>\n<p>So changing the declaration of <code>x</code> like so would work:</p>\n<pre><code>constexpr static int x{20};\n</code></pre>\n", "OwnerUserId": "1708801", "LastEditorUserId": "1708801", "LastEditDate": "2015-02-19T19:15:58.730", "Id": "28614776", "Score": "7", "CreationDate": "2015-02-19T19:04:14.300", "LastActivityDate": "2015-02-19T19:15:58.730"}, "28614655": {"ParentId": "28614591", "PostTypeId": "2", "CommentCount": "12", "Body": "<blockquote id=\"so_28614591_28614655_0\">\n<ol>\n<li>Are constexpr references ever useful? (i.e., \"better\" than const references)</li>\n</ol>\n</blockquote>\n<p>They are guaranteed to be initiailized before the program starts, whereas a reference to const can be initialized during dynamic initialization, after the program starts running.</p>\n<blockquote id=\"so_28614591_28614655_1\">\n<ol start=\"2\">\n<li>If yes, how can I effectively define them?</li>\n</ol>\n</blockquote>\n<p>A <code>constexpr</code>  reference has to bind to a global, not a local variable (or more formally, it has to bind to something with static storage duration).</p>\n<p>A reference is conceptually equivalent to taking the address of the variable, and the address of a local variable is not a constant (even in <code>main</code> which can only be called once and so its local variables are only initialized once).</p>\n", "OwnerUserId": "981959", "LastEditorUserId": "981959", "LastEditDate": "2015-02-19T19:04:27.353", "Id": "28614655", "Score": "18", "CreationDate": "2015-02-19T18:58:26.800", "LastActivityDate": "2015-02-19T19:04:27.353"}, "28614785": {"ParentId": "28614591", "CommentCount": "0", "Body": "<p>Like <a href=\"https://stackoverflow.com/questions/28614591/how-to-initialize-a-constexpr-reference#comment45532536_28614655\">T.C.</a> says, the initializer needs to be an object with static storage duration.</p>\n<blockquote>\n<p id=\"so_28614591_28614785_0\">N4140/\u00a75.19/4 A <em>constant expression</em> is either a glvalue core\n  constant expression whose value refers to an object with static\n  storage duration [...]</p>\n<p id=\"so_28614591_28614785_1\">N4140/\u00a77.1.5/9  A <code>constexpr</code> specifier used in an object declaration\n  declares the object as const. Such an object shall have literal type\n  and shall be initialized. [...] Otherwise, or if a <code>constexpr</code>\n  specifier is used in a reference declaration, every full-expression\n  that appears in its initializer shall be a constant expression.</p>\n</blockquote>\n<p>In N3337, the wording is different.</p>\n", "Id": "28614785", "PostTypeId": "2", "OwnerDisplayName": "user3920237", "Score": "5", "CreationDate": "2015-02-19T19:05:11.383", "LastActivityDate": "2015-02-19T19:05:11.383"}, "bq_ids": {"n4140": {"so_28614591_28614785_1": {"section_id": 5425, "quality": 0.9615384615384616, "length": 25}, "so_28614591_28614776_0": {"section_id": 87, "quality": 0.7692307692307693, "length": 10}, "so_28614591_28614776_1": {"section_id": 6187, "quality": 0.9615384615384616, "length": 25}, "so_28614591_28614591_0": {"section_id": 6185, "quality": 0.7142857142857143, "length": 5}, "so_28614591_28614785_0": {"section_id": 6187, "quality": 0.8666666666666667, "length": 13}}, "n3337": {"so_28614591_28614785_1": {"section_id": 5220, "quality": 0.9615384615384616, "length": 25}, "so_28614591_28614591_0": {"section_id": 5946, "quality": 0.7142857142857143, "length": 5}, "so_28614591_28614776_1": {"section_id": 5947, "quality": 0.5769230769230769, "length": 15}, "so_28614591_28614776_0": {"section_id": 5947, "quality": 0.9230769230769231, "length": 12}, "so_28614591_28614785_0": {"section_id": 5947, "quality": 0.6, "length": 9}}, "n4659": {"so_28614591_28614591_0": {"section_id": 7687, "quality": 0.7142857142857143, "length": 5}, "so_28614591_28614785_1": {"section_id": 6847, "quality": 0.6923076923076923, "length": 18}, "so_28614591_28614776_1": {"section_id": 7690, "quality": 0.6538461538461539, "length": 17}, "so_28614591_28614776_0": {"section_id": 217, "quality": 0.6923076923076923, "length": 9}, "so_28614591_28614785_0": {"section_id": 7690, "quality": 0.8666666666666667, "length": 13}}}});