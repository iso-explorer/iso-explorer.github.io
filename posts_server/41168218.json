post_cb({"bq_ids": {"n4140": {"so_41168218_41168586_5": {"length": 7, "quality": 1.0, "section_id": 6937}, "so_41168218_41168586_1": {"length": 6, "quality": 0.8571428571428571, "section_id": 6933}, "so_41168218_41168586_6": {"length": 16, "quality": 0.9411764705882353, "section_id": 6939}, "so_41168218_41168586_3": {"length": 12, "quality": 1.0, "section_id": 6935}, "so_41168218_41168586_2": {"length": 4, "quality": 0.8, "section_id": 6934}, "so_41168218_41168586_4": {"length": 7, "quality": 0.875, "section_id": 6936}}, "n3337": {"so_41168218_41168586_5": {"length": 7, "quality": 1.0, "section_id": 6685}, "so_41168218_41168586_1": {"length": 6, "quality": 0.8571428571428571, "section_id": 6681}, "so_41168218_41168586_6": {"length": 16, "quality": 0.9411764705882353, "section_id": 6687}, "so_41168218_41168586_3": {"length": 12, "quality": 1.0, "section_id": 6683}, "so_41168218_41168586_2": {"length": 4, "quality": 0.8, "section_id": 6682}, "so_41168218_41168586_4": {"length": 7, "quality": 0.875, "section_id": 6684}}, "n4659": {"so_41168218_41168586_5": {"length": 7, "quality": 1.0, "section_id": 8434}, "so_41168218_41168586_1": {"length": 6, "quality": 0.8571428571428571, "section_id": 8430}, "so_41168218_41168586_6": {"length": 16, "quality": 0.9411764705882353, "section_id": 8436}, "so_41168218_41168586_3": {"length": 12, "quality": 1.0, "section_id": 8432}, "so_41168218_41168586_2": {"length": 4, "quality": 0.8, "section_id": 8431}, "so_41168218_41168586_4": {"length": 7, "quality": 0.875, "section_id": 8433}}}, "41168218": {"ViewCount": "170", "Body": "<p>I have an object of type <code>std::exception_ptr</code>, and I want to call <code>what()</code> on it, but it seems there is no way to do this (As explaned in this answer: <a href=\"https://stackoverflow.com/questions/14232814/how-do-i-make-a-call-to-what-on-stdexception-ptr\">How do I make a call to what() on std::exception_ptr</a>).</p>\n<p>After searching over internet, it seems that I can not do anything with it other than re-throwing it and catching it in a <code>std::exception&amp;</code> to be able to do this.</p>\n<p>It is a bit strange for me, but I want to check: What can do with a <code>std::exception_ptr</code> other then re-throwing it to get the detail of expectation?</p>\n<p>Is there any change in C++14 or other versions of C++</p>\n", "Title": "What can I do with an std::exception_ptr other than rethrowing it", "CreationDate": "2016-12-15T15:53:03.317", "LastActivityDate": "2016-12-15T16:28:51.733", "CommentCount": "5", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2017-05-23T12:08:47.427", "LastEditorUserId": "-1", "Id": "41168218", "Score": "4", "OwnerUserId": "654019", "Tags": "<c++><c++11><exception><exception-handling>", "AnswerCount": "1"}, "41168586": {"Id": "41168586", "PostTypeId": "2", "Body": "<p>Unfortunately, no. The standard only guarantees the following for <code>std::exception_ptr</code>:</p>\n<blockquote>\n<p id=\"so_41168218_41168586_0\">18.8.5 Exception propagation</p>\n<p id=\"so_41168218_41168586_1\">1 The type exception_ptr can be used to refer to an exception object.</p>\n<p id=\"so_41168218_41168586_2\">2 exception_ptr shall satisfy the requirements of NullablePointer (17.6.3.3).</p>\n<p id=\"so_41168218_41168586_3\">3 Two non-null values of type exception_ptr are equivalent and compare equal if and only if they refer\n  to the same exception.</p>\n<p id=\"so_41168218_41168586_4\">4 The default constructor of exception_ptr produces the null value of the type.</p>\n<p id=\"so_41168218_41168586_5\">5 exception_ptr shall not be implicitly convertible to any arithmetic, enumeration, or pointer type.</p>\n<p id=\"so_41168218_41168586_6\">7 For purposes of determining the presence of a data race, operations on exception_ptr objects shall\n  access and modify only the exception_ptr objects themselves and not the exceptions they refer to.</p>\n</blockquote>\n<p>Additionally, noted <a href=\"http://www.cplusplus.com/reference/exception/exception_ptr/\" rel=\"nofollow noreferrer\">here</a>,</p>\n<blockquote>\n<p id=\"so_41168218_41168586_7\">Performing any other operation on the object (such as dereferencing it), if at all supported by the library implementation, causes <em>undefined behavior</em>.</p>\n</blockquote>\n", "LastActivityDate": "2016-12-15T16:11:06.793", "CommentCount": "0", "CreationDate": "2016-12-15T16:11:06.793", "ParentId": "41168218", "Score": "1", "OwnerUserId": "1020484"}});