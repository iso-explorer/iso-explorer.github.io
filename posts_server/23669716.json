post_cb({"23669832": {"Id": "23669832", "PostTypeId": "2", "Body": "<p>I don't know what compiler is referred in the book. In general it will depend on the actual compiler, what can be inlined or when a function body will be generated.</p>\n<p>The statements doesn't exclude each other as you might assume. The general condition to inhihbit inline is a branch in the function except a simple if statement. The branches in (1) are the loops and the <code>goto</code>. The branch in (2) is the jump to the end of the function on  <code>return;</code></p>\n<p><em>Edit</em>:</p>\n<p>It is highly dependent on the compiler. Nested <code>if</code> might work. But <code>switch</code> statements differs, as they are often implemented with a jump table instead of several <code>if</code> statements. The jump table includes location similar to the <code>goto</code> labels. That might be more difficult for the actual compiler. Therefore it might be sensible to make a distinction.</p>\n", "LastEditorUserId": "266487", "LastActivityDate": "2014-05-15T12:18:49.050", "Score": "1", "CreationDate": "2014-05-15T05:21:29.040", "ParentId": "23669716", "CommentCount": "1", "OwnerUserId": "266487", "LastEditDate": "2014-05-15T12:18:49.050"}, "bq_ids": {"n4140": {"so_23669716_23669716_2": {"length": 4, "quality": 0.5714285714285714, "section_id": 3913}, "so_23669716_23671261_0": {"length": 29, "quality": 0.9666666666666667, "section_id": 5402}}, "n3337": {"so_23669716_23669716_2": {"length": 4, "quality": 0.5714285714285714, "section_id": 3773}, "so_23669716_23671261_0": {"length": 29, "quality": 0.9666666666666667, "section_id": 5197}}, "n4659": {"so_23669716_23671261_0": {"length": 29, "quality": 0.9666666666666667, "section_id": 6849}}}, "23669864": {"Id": "23669864", "PostTypeId": "2", "Body": "<p>Inline functions are basically written when the code is small and the stack push/pop takes up much of the overhead. What they do is, they expand the function where they are written. Since there is no push/pop associated, you cannot expect value to be returned. Although, C++ can convert simple functions with only a return statement to inline functions.</p>\n<p>Here's a C++ code:</p>\n<pre><code>inline int max(int a, int b)\n{\n  return (a &gt; b) ? a : b;\n}\n</code></pre>\n<p>Then, a statement such as the following:</p>\n<pre><code>a = max(x, y);\n</code></pre>\n<p>may be transformed into a more direct computation:</p>\n<pre><code>a = (x &gt; y) ? x : y;\n</code></pre>\n", "LastActivityDate": "2014-05-15T05:23:03.843", "CommentCount": "4", "CreationDate": "2014-05-15T05:23:03.843", "ParentId": "23669716", "Score": "0", "OwnerUserId": "1519469"}, "23669716": {"ViewCount": "2262", "Body": "<p>I'm a newbie programmer. There are these line in our text book, sumitha arora class 12 ix edition:</p>\n<blockquote>\n<p id=\"so_23669716_23669716_0\">The inlining does not work for the following situations:</p>\n<ol>\n<li><p id=\"so_23669716_23669716_1\">For functions that return values and are having a loop or switch or goto.</p></li>\n<li><p id=\"so_23669716_23669716_2\">For functions not returning values, if a return statement exists.</p></li>\n</ol>\n</blockquote>\n<p>If 1 and 2 are true then how are inline functions possible to create?</p>\n<p>P.S. the lines are exactly the same from the book no alterations</p>\n", "Title": "When does inline functions not work?", "CreationDate": "2014-05-15T05:10:46.753", "LastActivityDate": "2014-05-15T12:18:49.050", "CommentCount": "3", "LastEditDate": "2014-05-15T05:14:30.960", "PostTypeId": "1", "LastEditorUserId": "1493698", "Id": "23669716", "Score": "1", "OwnerUserId": "3211362", "Tags": "<c++><inline>", "AnswerCount": "3"}, "23671261": {"Id": "23671261", "PostTypeId": "2", "Body": "<p>IMHO, the C++ standard does not define restrictions for inlining. Inline functions are defined in section 7.1.2.2:</p>\n<blockquote>\n<p id=\"so_23669716_23671261_0\">A function declaration with an inline specifier declares an inline\n  function . The inline specifier indicates to the implementation that\n  inline substitution of the function body at the point of call is to be\n  preferred to the usual function call mechanism. An implementation is\n  not required to perform this inline substitution at the point of call;</p>\n</blockquote>\n<p>Compilers usually have some heuristics to decide if a function will be inlined or not. This balances the cost to perform an actual function call (push arguments on the stack, jump etc) with the effects of having a larger function (the most obvious drawback is an increased size of the resulting binary), but the concrete rules are left open for the compiler implementer. </p>\n<p>If the book is not talking about a specific compiler, I see not reason why this statement is true in general. It may a rule of thumb, though.</p>\n", "LastActivityDate": "2014-05-15T06:57:44.453", "CommentCount": "0", "CreationDate": "2014-05-15T06:57:44.453", "ParentId": "23669716", "Score": "0", "OwnerUserId": "2169853"}});