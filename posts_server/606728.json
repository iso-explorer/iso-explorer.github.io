post_cb({"bq_ids": {"n4140": {"so_606728_609661_1": {"section_id": 6044, "quality": 0.9, "length": 9}, "so_606728_609661_2": {"section_id": 6044, "quality": 0.9565217391304348, "length": 22}, "so_606728_606889_5": {"section_id": 6044, "quality": 1.0, "length": 9}, "so_606728_609661_0": {"section_id": 6043, "quality": 0.7857142857142857, "length": 11}, "so_606728_606889_2": {"section_id": 7216, "quality": 1.0, "length": 12}}, "n3337": {"so_606728_609661_1": {"section_id": 5812, "quality": 0.9, "length": 9}, "so_606728_609661_2": {"section_id": 5812, "quality": 0.9565217391304348, "length": 22}, "so_606728_606889_5": {"section_id": 5812, "quality": 1.0, "length": 9}, "so_606728_609661_0": {"section_id": 5811, "quality": 0.7857142857142857, "length": 11}, "so_606728_606889_2": {"section_id": 6960, "quality": 1.0, "length": 12}}, "n4659": {"so_606728_609661_1": {"section_id": 7543, "quality": 0.9, "length": 9}, "so_606728_609661_2": {"section_id": 7543, "quality": 0.9565217391304348, "length": 22}, "so_606728_606889_5": {"section_id": 7543, "quality": 1.0, "length": 9}, "so_606728_609661_0": {"section_id": 7542, "quality": 0.7857142857142857, "length": 11}, "so_606728_606889_2": {"section_id": 8725, "quality": 1.0, "length": 12}}}, "606744": {"ParentId": "606728", "CommentCount": "0", "Body": "<p>It fails because the cast makes no sense - you are taking a boolean true/false value, and asking the compilre to interpret this as a pointer, which in blunt terms is a memory location. The two arent even remotely related.</p>\n", "OwnerUserId": "71399", "Id": "606744", "PostTypeId": "2", "OwnerDisplayName": "Visage", "Score": "0", "CreationDate": "2009-03-03T15:09:07.643", "LastActivityDate": "2009-03-03T15:09:07.643"}, "609661": {"ParentId": "606728", "CommentCount": "0", "Body": "<p>In some situations, it is highly desirable to have the compiler warn or error on code like <code>reinterpret_cast&lt;void*&gt;(true)</code>, even though this code is apparently legal C++. For example, it aids in porting to 64-bit platforms. </p>\n<p>Casting a 64-bit pointer into an integral type that is smaller than a pointer (such as <code>int</code> or <code>bool</code>) is often a bug: you're truncating the pointer's value. Furthermore, the C++ specification doesn't seem to guarantee that you can directly cast a pointer into a smaller integral type (emphasis added):</p>\n<blockquote>\n<p id=\"so_606728_609661_0\">5.2.10.4. A pointer can be explicitly converted to any integral type <em>large enough to hold it</em>. The mapping function is implementation-defined.</p>\n</blockquote>\n<p>Likewise, casting a smaller integral type into a 64-bit pointer (as with <code>reinterpret_cast&lt;void*&gt;(true)</code>) is often a bug as well: the compiler has to fill in the pointer's upper bits with something; does it zero-fill or sign-extend? Unless you're writing low-level platform-specific code for memory mapped I/O access or DMA, you usually don't want to be doing this at all, unless you're doing something hacky (like stuffing a Boolean into a pointer). But the C++ specification doesn't seem to say much about this case other than that it is implementation-defined (footnote omitted):</p>\n<blockquote>\n<p id=\"so_606728_609661_1\">5.2.10.5. A value of integral type or enumeration type can be explicitly converted to a pointer.*</p>\n<p id=\"so_606728_609661_2\">A pointer converted to an integer of sufficient size (if any such exists on the implementation) and back to the same pointer type will have its original value; mappings between pointers and integers are otherwise implementation-defined. </p>\n</blockquote>\n<p>@monjardin suggested <code>reinterpret_cast&lt;void*&gt;(static_cast&lt;int&gt;(true))</code>. If the origin of the error was the mismatch between the integral type's size and the pointer size, then this will work on most 32-bit platforms (where both <code>int</code> and <code>void*</code> are 32 bits) but fail on most 64-bit platforms (where <code>int</code> is 32 bits and <code>void*</code> is 64 bits). In that case, replacing <code>int</code> in this expression with a pointer-sized integer type such as <code>uintptr_t</code> or <code>DWORD_PTR</code> (on Windows) should work, since conversions between <code>bool</code> and pointer-sized integers are allowed, and so are conversions between pointer-sized integers and pointers.</p>\n<p>Later versions of GCC have the following <a href=\"http://gcc.gnu.org/onlinedocs/gcc-4.3.3/gcc/Warning-Options.html\" rel=\"nofollow noreferrer\">warning suppression options</a>, but <a href=\"http://osdir.com/ml/solaris.opensolaris.tools.general/2006-08/msg00014.html\" rel=\"nofollow noreferrer\">not for C++</a>:</p>\n<blockquote>\n<p id=\"so_606728_609661_3\">-Wno-int-to-pointer-cast (C and Objective-C only)<br>\n  Suppress warnings from casts to pointer type of an integer of a different size.</br></p>\n<p id=\"so_606728_609661_4\">-Wno-pointer-to-int-cast (C and Objective-C only)<br>\n  Suppress warnings from casts from a pointer to an integer type of a different size.</br></p>\n</blockquote>\n", "OwnerUserId": "8090", "Id": "609661", "PostTypeId": "2", "OwnerDisplayName": "bk1e", "Score": "0", "CreationDate": "2009-03-04T08:08:36.867", "LastActivityDate": "2009-03-04T08:08:36.867"}, "606889": {"CommentCount": "0", "CreationDate": "2009-03-03T15:42:24.847", "LastEditorUserId": "-1", "LastActivityDate": "2009-03-03T15:42:24.847", "ParentId": "606728", "LastEditDate": "2017-05-23T12:20:37.303", "OwnerDisplayName": "Michael Burr", "PostTypeId": "2", "Id": "606889", "Score": "1", "Body": "<p>The only compiler I have that complains about this is GCC (MinGW with GCC 3.4.5) - and I'm not sure why.  The standard seems to clearly indicate this is permitted:</p>\n<blockquote>\n<p id=\"so_606728_606889_0\">3.9.1 Fundamental types</p>\n<p id=\"so_606728_606889_1\">...</p>\n<p id=\"so_606728_606889_2\">Types bool, char, wchar_t, and the\n  signed and unsigned integer types are\n  collectively called integral types.</p>\n<p id=\"so_606728_606889_3\">5.2.10 Reinterpret cast:</p>\n<p id=\"so_606728_606889_4\">...</p>\n<p id=\"so_606728_606889_5\">A value of integral type or\n  enumeration type can be explicitly\n  converted to a pointer.</p>\n</blockquote>\n<p>That said, <a href=\"https://stackoverflow.com/questions/606728/how-to-cast-from-bool-to-void/606742#606742\">monjardin's workaround</a> of using <code>reinterpret_cast&lt;void *&gt; (static_cast&lt;int&gt; (true))</code> or <code>reinterpret_cast&lt;void *&gt; (1)</code> are reasonable workarounds.</p>\n", "OwnerUserId": "12711"}, "606798": {"ParentId": "606728", "CommentCount": "1", "Body": "<p>Try a newer version of your compiler. I just tested and this cast works on at least gcc 4.1 and above. I don't know exactly how gcc versions map to mingw versions though.</p>\n", "OwnerUserId": "5963", "Id": "606798", "PostTypeId": "2", "OwnerDisplayName": "Greg Rogers", "Score": "0", "CreationDate": "2009-03-03T15:18:26.030", "LastActivityDate": "2009-03-03T15:18:26.030"}, "606758": {"ParentId": "606728", "CommentCount": "3", "CreationDate": "2009-03-03T15:11:42.770", "Id": "606758", "PostTypeId": "2", "OwnerDisplayName": "Sasha", "Score": "1", "Body": "<p>reinterpret_cast is a <a href=\"http://www.gotw.ca/gotw/017.htm\" rel=\"nofollow noreferrer\">bad idea</a>. Tell us more about the problem you're trying to solve, and perhaps we'll find a solution without resorting to reinterpret. Why do you want to convert bool to void*?</p>\n", "LastActivityDate": "2009-03-03T15:11:42.770"}, "606742": {"CommentCount": "3", "CreationDate": "2009-03-03T15:08:19.890", "LastEditorUserId": "1491", "LastActivityDate": "2009-03-04T17:29:27.033", "ParentId": "606728", "PostTypeId": "2", "LastEditorDisplayName": "monjardin", "LastEditDate": "2009-03-04T17:29:27.033", "Id": "606742", "Score": "13", "Body": "<p>I see this is user data and you have control over what is done with the value, cast the bool to an int first: <code>reinterpret_cast&lt;void *&gt; (static_cast&lt;int&gt; (true))</code>. Doing this makes sense in that the void* parameter takes the place of template functions in this ANSI-C library. All you need is a true/false value. So, there should be no danger in temporarily encoding this as a pointer as long as it is well documented as such. Really, you would be better off with this: <code>reinterpret_cast&lt;void *&gt; (1)</code> or <code>reinterpret_cast&lt;void *&gt; (+true)</code>.</p>\n", "OwnerUserId": "1491", "OwnerDisplayName": "monjardin"}, "606832": {"ParentId": "606728", "CommentCount": "0", "Body": "<p>It looks like it should work, according to the standard.  Section 3.9.1-7 says bool is an integral type, and 5.2.10-5 says a value of integral type can be explicitly converted to a pointer using reinterpret_cast.  It appears that your compiler is not fully standard.</p>\n<p>Could you get away with changing the \"true\" to a 1?  Converting between integers and pointer types is an old and dishonorable tradition in C and hence C++, and it would be surprising to find a compiler that wouldn't do it.</p>\n<p>Or, if you really really have to do this, try (void *)true.  Then wash your hands.</p>\n", "OwnerUserId": "14148", "Id": "606832", "PostTypeId": "2", "OwnerDisplayName": "David Thornley", "Score": "3", "CreationDate": "2009-03-03T15:28:17.863", "LastActivityDate": "2009-03-03T15:28:17.863"}, "606728": {"CommentCount": "1", "AcceptedAnswerId": "606742", "OwnerDisplayName": "sahas", "CreationDate": "2009-03-03T15:04:45.127", "LastActivityDate": "2009-03-04T17:29:27.033", "PostTypeId": "1", "ViewCount": "4595", "FavoriteCount": "0", "Title": "How to cast from bool to void*?", "Id": "606728", "Score": "2", "Body": "<p>I'm trying to build cairomm for gtkmm on windows using mingw. Compilation breaks at a function call which has a parameter which does a reinterpret_cast of a bool to a void*.</p>\n<pre><code>cairo_font_face_set_user_data(cobj(), &amp;USER_DATA_KEY_DEFAULT_TEXT_TO_GLYPHS, reinterpret_cast&lt;void*&gt;(true), NULL);\n</code></pre>\n<p>This is where the code breaks, and reason is \"invalid reinterpret_cast from bool to void*\". Why is this happening, and how can I modify this line to get it to compile? Need help</p>\n", "Tags": "<c++><type-conversion>", "OwnerUserId": "73249", "AnswerCount": "7"}});