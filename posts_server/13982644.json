post_cb({"bq_ids": {"n4140": {"so_13982644_13982644_0": {"length": 9, "quality": 1.0, "section_id": 6174}, "so_13982644_13982644_1": {"length": 12, "quality": 1.0, "section_id": 6175}}, "n3337": {"so_13982644_13982644_0": {"length": 9, "quality": 1.0, "section_id": 5935}, "so_13982644_13982644_1": {"length": 12, "quality": 1.0, "section_id": 5936}}, "n4659": {"so_13982644_13982644_0": {"length": 9, "quality": 1.0, "section_id": 7676}, "so_13982644_13982644_1": {"length": 12, "quality": 1.0, "section_id": 7677}}}, "13982644": {"ViewCount": "153", "Body": "<p>In my copy of the C++11 standard (ISO/IEC 14882:2011(E)), the assignment operator definition includes:</p>\n<blockquote>\n<p id=\"so_13982644_13982644_0\">In simple assignment (<code>=</code>), the value of the expression replaces that of the object referred to by the left operand.</p>\n</blockquote>\n<p>Shouldn't this say \"value of the right operand\" instead of \"value of the expression\"? At the moment it seems ambiguous and could easily be interpreted as meaning the \"value of the assignment expression\".</p>\n<p>The phrase \"the expression\" is also used ambiguously in another paragraph of [expr.ass]:</p>\n<blockquote>\n<p id=\"so_13982644_13982644_1\">If the left operand is not of class type, the expression is implicitly converted (Clause 4) to the cv-unqualified type of the left operand</p>\n</blockquote>\n<p>I think it means \"right operand\" here too, right?</p>\n<p>This is also the only definition of the assignment operator's effects I can find. Am I missing something?</p>\n", "Title": "Is there a defect in the definition of the assignment operator?", "CreationDate": "2012-12-21T00:27:44.633", "LastActivityDate": "2012-12-21T02:36:12.820", "CommentCount": "5", "PostTypeId": "1", "Id": "13982644", "Score": "0", "OwnerUserId": "150634", "Tags": "<c++><c++11><standards><variable-assignment>", "AnswerCount": "2"}, "13982694": {"Id": "13982694", "PostTypeId": "2", "Body": "<p>The \"left operand\" is correct in both cases:</p>\n<ol>\n<li>The value being replaced is the object referred to by the left operand. It will get the value of the right operand but this isn't part of what the first quote describes.</li>\n<li>When assigning a value to a non-class type the value is clearly converted to the type of the assigned to object, i.e., the left operand.</li>\n</ol>\n", "LastActivityDate": "2012-12-21T00:32:41.613", "CommentCount": "4", "CreationDate": "2012-12-21T00:32:41.613", "ParentId": "13982644", "Score": "3", "OwnerUserId": "1120273"}, "13983545": {"Id": "13983545", "PostTypeId": "2", "Body": "<p>The standard often assumes some <strong>common sense</strong> on the part of the reader.</p>\n<p>For example, in places it apparently conflates the concepts of object and class.</p>\n<p>This is done to avoid reducing readability via needless redundancies in the text, in keeping with the DRY principle: Don't Repeat Yourself.</p>\n", "LastActivityDate": "2012-12-21T02:36:12.820", "CommentCount": "4", "CreationDate": "2012-12-21T02:36:12.820", "ParentId": "13982644", "Score": "4", "OwnerUserId": "464581"}});