post_cb({"27697796": {"Id": "27697796", "PostTypeId": "2", "Body": "<p>From cppference.com's <a href=\"http://en.cppreference.com/w/cpp/preprocessor/replace\" rel=\"nofollow\">C++ preprocessor</a></p>\n<p>has this predefined macro:\n<strong>STDCPP_STRICT_POINTER_SAFETY</strong> (C++11)</p>\n<p>expands to 1 if the implementation has strict std::pointer_safety \n(macro constant)</p>\n<p>I suspect this might be implemented first (and set to 0) before they implement the library/compiler support.</p>\n", "LastActivityDate": "2014-12-30T00:00:50.473", "CommentCount": "0", "CreationDate": "2014-12-30T00:00:50.473", "ParentId": "25228351", "Score": "0", "OwnerUserId": "1176361"}, "bq_ids": {"n4140": {"so_25228351_25228351_0": {"length": 27, "quality": 0.9310344827586207, "section_id": 7187}}, "n3337": {"so_25228351_25228351_0": {"length": 22, "quality": 0.7586206896551724, "section_id": 6931}}, "n4659": {"so_25228351_25228351_0": {"length": 27, "quality": 0.9310344827586207, "section_id": 8695}}}, "25228351": {"ViewCount": "385", "Body": "<p>I've come across with the <code>relaxed/strict pointer safety</code> concepts and that it is implementation defined whether an implementation has relaxed or strict pointer safety. My question is about modern implementations:\nDoes clang and g++ have strict or relaxed pointer safety?</p>\n<p>I would like to clarify the following thing about strict pointer safety concept. There is a quote (sec. 3.7.4.3/4):</p>\n<blockquote>\n<p id=\"so_25228351_25228351_0\">Alternatively, an implementation may have strict pointer safety, in\n  which case a pointer value referring to an object with dynamic storage\n  duration that is not a safely-derived pointer value is an invalid\n  pointer value unless the referenced complete object has previously\n  been declared reachable (20.7.4).</p>\n</blockquote>\n<p>That restriction is completely unclear for me. Moreover, I've tried to experiments with the concept with <a href=\"http://www.cplusplus.com/reference/memory/undeclare_reachable/\" rel=\"nofollow\">cplusplus.com example</a></p>\n<pre><code>// declare_reachable / undeclare_reachable example\n#include &lt;iostream&gt;\n#include &lt;memory&gt;\n#include &lt;cstdint&gt;\n\nint main() {\n  int * p = new int (1);    // dynamic object\n\n  std::declare_reachable(p);\n\n  p = (int*)((std::uintptr_t)p ^ UINTPTR_MAX);  // scrambling p\n\n  // dynamic object not reachable by any live safely-derived pointer\n\n  p = std::undeclare_reachable((int*)((std::uintptr_t)p ^ UINTPTR_MAX));\n  // p is back again a safely-derived pointer to the dynamic object\n\n  std::cout &lt;&lt; \"p: \" &lt;&lt; *p &lt;&lt; '\\n';\n  delete p;\n\n  return 0;\n}\n</code></pre>\n<p>The code even does not compile.</p>\n<p><a href=\"http://coliru.stacked-crooked.com/a/dd1a9a486c043959\" rel=\"nofollow\">demo</a></p>\n", "AcceptedAnswerId": "25228436", "Title": "Relaxed or strict pointer safety?", "CreationDate": "2014-08-10T11:57:22.123", "LastActivityDate": "2014-12-30T00:00:50.473", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2014-08-11T04:41:03.933", "OwnerDisplayName": "user2953119", "LastEditorUserId": "273767", "Id": "25228351", "Score": "4", "Tags": "<c++><pointers>", "AnswerCount": "2"}, "25228436": {"Id": "25228436", "PostTypeId": "2", "Body": "<p>This stuff is to allow garbage-collected implementations, though I'm not aware of any compilers (at least in the mainstream) that make any use of this.</p>\n<p>Ostensibly you can find out whether yours does, using <a href=\"http://en.cppreference.com/w/cpp/memory/gc/get_pointer_safety\" rel=\"nofollow\"><code>std::get_pointer_safety</code></a>, but <a href=\"http://coliru.stacked-crooked.com/a/422772c519682488\" rel=\"nofollow\">this appears ill-supp</a><a href=\"http://coliru.stacked-crooked.com/a/2f17bbf7c8cf4578\" rel=\"nofollow\">orted as well</a>.</p>\n<p>I'd say just ignore it.</p>\n", "LastActivityDate": "2014-08-10T12:06:24.283", "CommentCount": "10", "CreationDate": "2014-08-10T12:06:24.283", "ParentId": "25228351", "Score": "1", "OwnerUserId": "560648"}});