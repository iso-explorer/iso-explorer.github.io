post_cb({"45744673": {"CommentCount": "8", "ViewCount": "220", "PostTypeId": "1", "LastEditorUserId": "3766405", "CreationDate": "2017-08-17T20:44:06.617", "LastActivityDate": "2017-08-18T14:36:48.253", "Title": "C++ full-expression standard wording", "LastEditDate": "2017-08-18T14:36:48.253", "Id": "45744673", "Score": "4", "Body": "<p>In <a href=\"http://eel.is/c++draft/intro.execution#12\" rel=\"nofollow noreferrer\">paragraph 12</a> of [intro.execution] in the current (C++ 17) C++ standard draft there is written:</p>\n<blockquote>\n<p id=\"so_45744673_45744673_0\">A <em>full-expression is:</em> </p>\n<p id=\"so_45744673_45744673_1\">[...] </p>\n<ul>\n<li>an expression that is not a subexpression of another expression and that is not otherwise part of a full-expression. </li>\n</ul>\n<p id=\"so_45744673_45744673_2\">If a language construct is defined to produce an implicit call of a function, <strong>a use</strong> of the language construct is considered to be an expression for the purposes of this definition. [...]</p>\n</blockquote>\n<p>The \"use of the language construct\" wording refers to the fact that the construct itself is to be considered an expression or the implicit calls that the construct \"uses\" are to be considered as expressions?</p>\n<p>I am asking this because in the same paragraph there is this code sample:</p>\n<pre><code>S s1(1);                   // full-expression is call of S\u200b::\u200bS(int)\n</code></pre>\n<p>The comment would indicate that the second interpretation is correct. </p>\n<p>However, the paragraph explicitly says that an <em>init-declarator</em> is a <em>full-expression</em>, which would indicate that the comment is wrong.</p>\n<p>In the past (I believe even before C++03), this paragraph looked like this (taken from <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#392\" rel=\"nofollow noreferrer\">this defect report</a>):</p>\n<blockquote>\n<p id=\"so_45744673_45744673_3\">A full-expression is an expression that is not a subexpression of another expression. If a language construct is defined to produce an implicit call of a function, a use of the language construct is considered to be an expression for the purposes of this definition.</p>\n<p id=\"so_45744673_45744673_4\">[Note: certain contexts in C++ cause the evaluation of a full-expression that results from a syntactic construct other than expression (5.19 [expr.comma]). For example, in 8.6 [dcl.init] one syntax for initializer is</p>\n<p id=\"so_45744673_45744673_5\">( expression-list )</p>\n<p id=\"so_45744673_45744673_6\">but the resulting construct is a function call upon a constructor function with expression-list as an argument list; <strong>such a function call is a full-expression</strong>. For example, in 8.6 [dcl.init], another syntax for initializer is</p>\n<p id=\"so_45744673_45744673_7\">= initializer-clause</p>\n<p id=\"so_45744673_45744673_8\">but again the resulting construct might be a function call upon a constructor function with one assignment-expression as an argument; again, <strong>the function call is a full-expression</strong>. ]</p>\n</blockquote>\n<p>This is another reason for believing that the second interpretation is the one intended.</p>\n<p>I know that it makes no difference to the understanding of the language, but I just want to know what was the intention of the person who initially wrote that paragraph. </p>\n", "Tags": "<c++><language-lawyer><standards>", "OwnerUserId": "3766405", "AnswerCount": "0"}, "bq_ids": {"n4140": {"so_45744673_45744673_2": {"section_id": 5806, "quality": 1.0, "length": 13}, "so_45744673_45744673_3": {"section_id": 5806, "quality": 0.9444444444444444, "length": 17}}, "n3337": {"so_45744673_45744673_2": {"section_id": 5579, "quality": 1.0, "length": 13}, "so_45744673_45744673_3": {"section_id": 5579, "quality": 0.9444444444444444, "length": 17}}, "n4659": {"so_45744673_45744673_2": {"section_id": 7267, "quality": 1.0, "length": 13}, "so_45744673_45744673_3": {"section_id": 7267, "quality": 0.9444444444444444, "length": 17}}}});