post_cb({"33511384": {"ParentId": "33498101", "CommentCount": "1", "CreationDate": "2015-11-03T23:56:02.170", "OwnerUserId": "2756719", "PostTypeId": "2", "Id": "33511384", "Score": "3", "Body": "<p><a href=\"http://eel.is/c++draft/class.base.init#12\" rel=\"nofollow\">[class.base.init]/12</a>:</p>\n<blockquote>\n<p id=\"so_33498101_33511384_0\">In a non-delegating constructor, the destructor for each direct or\n  virtual base class and for each non-static data member of class type\n  is potentially invoked (12.4). [ <em>Note</em>: This provision ensures that\n  destructors can be called for fully-constructed sub-objects in case an\n  exception is thrown (15.2). \u2014<em>end note</em> ]</p>\n</blockquote>\n<p><a href=\"http://eel.is/c++draft/class.dtor#11v\" rel=\"nofollow\">[class.dtor]/11</a>:</p>\n<blockquote>\n<p id=\"so_33498101_33511384_1\">A program is ill-formed if a destructor that is potentially invoked is\n  deleted or not accessible from the context of the invocation.</p>\n</blockquote>\n<p>No exception is made for a constructor that doesn't throw. See also <a href=\"http://wg21.link/cwg1915\" rel=\"nofollow\">CWG 1915</a>.</p>\n", "LastActivityDate": "2015-11-03T23:56:02.170"}, "33498101": {"CommentCount": "6", "ViewCount": "336", "CreationDate": "2015-11-03T11:34:40.103", "LastActivityDate": "2015-11-03T23:56:02.170", "PostTypeId": "1", "AcceptedAnswerId": "33511384", "FavoriteCount": "1", "Title": "Implicit use of destructor", "Id": "33498101", "Score": "6", "Body": "<p>I have a class with a deleted destructor (in practice, it needs outside help to be destroyed):</p>\n<pre><code>struct indestructible {\n    indestructible(indestructible&amp;&amp;);\n    ~indestructible() = delete;\n};\n</code></pre>\n<p>When I try to use its move constructor, the compiler complains:</p>\n<pre><code>struct user {\n   indestructible ind;\n   user(indestructible&amp;&amp; ind) : ind(std::move(ind)) {}\n};\n\nindestructible.cc:11:3: error: attempt to use a deleted function\nuser(indestructible&amp;&amp; ind) : ind(std::move(ind)) {}\n^\nindestructible.cc:6:3: note: '~indestructible' has been explicitly marked  deleted here\n    ~indestructible() = delete;\n</code></pre>\n<p>What's going on? there are no other members that could throw, and neither does the constructor body, so why is there any cause for the move constructor to invoke the destructor?</p>\n", "Tags": "<c++><c++11>", "OwnerUserId": "4717332", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_33498101_33511384_0": {"section_id": 437, "quality": 0.5625, "length": 18}, "so_33498101_33511384_1": {"section_id": 407, "quality": 1.0, "length": 8}}, "n4659": {"so_33498101_33511384_0": {"section_id": 457, "quality": 0.5625, "length": 18}, "so_33498101_33511384_1": {"section_id": 425, "quality": 1.0, "length": 8}}}, "33498168": {"ParentId": "33498101", "CommentCount": "4", "CreationDate": "2015-11-03T11:38:31.733", "OwnerUserId": "1419315", "PostTypeId": "2", "Id": "33498168", "Score": "7", "Body": "<p>When your <code>user</code> object gets out of scope, it is destructed. Its members are destructed, including the <code>indestructible</code> member, and that's impossible since its destructor is deleted.</p>\n", "LastActivityDate": "2015-11-03T11:38:31.733"}});