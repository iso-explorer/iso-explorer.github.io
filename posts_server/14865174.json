post_cb({"bq_ids": {"n4140": {"so_14865174_14865174_0": {"length": 18, "quality": 1.0, "section_id": 3244}}, "n3337": {"so_14865174_14865174_0": {"length": 18, "quality": 1.0, "section_id": 3117}}, "n4659": {"so_14865174_14865174_0": {"length": 18, "quality": 1.0, "section_id": 4002}}}, "14865320": {"Id": "14865320", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_14865174_14865320_0\">Is there some syntax that would even allow returning a function as opposed to a function pointer?</p>\n</blockquote>\n<p>A syntax? Sure there is:</p>\n<pre><code>using fun = int (int);\n\nfun function_that_returns_a_function();\n</code></pre>\n<p>That doesn\u2019t compile because the rule in \u00a78.3.5/8 forbids it. I don\u2019t know why the rule specifically exists \u2013 but consider that the type \u201cfunction\u201d doesn\u2019t have any size so you cannot create objects of function type in C++.</p>\n", "LastActivityDate": "2013-02-13T23:37:33.657", "Score": "1", "CreationDate": "2013-02-13T23:37:33.657", "ParentId": "14865174", "CommentCount": "0", "OwnerUserId": "1968"}, "14865231": {"Id": "14865231", "PostTypeId": "2", "Body": "<p>I know this probably does not answer your question completely but it does so partially</p>\n<p>You can return a function from another function (that's what lambdas are)</p>\n<pre><code>std::function&lt;int (int)&gt; retLambda() {\n    return [](int x) { return x; };\n}\n</code></pre>\n", "LastActivityDate": "2013-02-13T23:30:27.130", "Score": "1", "CreationDate": "2013-02-13T23:30:27.130", "ParentId": "14865174", "CommentCount": "1", "OwnerUserId": "1680957"}, "14865174": {"ViewCount": "4450", "Body": "<p><code>8.3.5/8 Functions [dcl.fct]</code> says </p>\n<blockquote>\n<p id=\"so_14865174_14865174_0\">[...] <strong>Functions shall not have a return type of\n  type</strong> array or <strong>function</strong>, although they may have a return type of type pointer or reference to such things. [...]</p>\n</blockquote>\n<p>Why so explicit of a rule? Is there some syntax that would even allow returning a function as opposed to a function pointer?</p>\n<p>Am I miss-interpreting the quote?</p>\n<pre><code>typedef void (*fp)();\n\nvoid foo(){}\nfp goo()\n{\n    return foo; //automatically converted to function pointer\n}\n</code></pre>\n", "AcceptedAnswerId": "14865323", "Title": "Not allowed to return a function from a function. How could I?", "CreationDate": "2013-02-13T23:23:29.000", "Id": "14865174", "CommentCount": "3", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2013-02-14T00:00:33.317", "Score": "4", "OwnerUserId": "673730", "Tags": "<c++><function><function-pointers><language-lawyer>", "AnswerCount": "3"}, "14865323": {"Id": "14865323", "PostTypeId": "2", "Body": "<p>This is quite a contrived example of a function trying to return a function:</p>\n<pre><code>void foo() { }\n\ntemplate&lt;typename T&gt;\nT f() { return foo; }\n\nint main(){\n    f&lt;decltype(foo)&gt;();\n}\n</code></pre>\n<p>This is the error I get from Clang 3.2:</p>\n<pre><code>Compilation finished with errors:\nsource.cpp:7:5: error: no matching function for call to 'f'\n    f&lt;decltype(foo)&gt;();\n    ^~~~~~~~~~~~~~~~\nsource.cpp:4:3: note: candidate template ignored: substitution failure \n[with T = void ()]: function cannot return function type 'void ()'\nT f() { return foo; }\n~ ^\n1 error generated.\n</code></pre>\n", "LastEditorUserId": "1932150", "LastActivityDate": "2013-02-14T00:00:33.317", "Score": "3", "CreationDate": "2013-02-13T23:38:00.367", "ParentId": "14865174", "CommentCount": "3", "LastEditDate": "2013-02-14T00:00:33.317", "OwnerUserId": "1932150"}});