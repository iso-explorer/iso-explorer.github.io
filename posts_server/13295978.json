post_cb({"13296009": {"ParentId": "13295978", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>No. <code>-&gt;</code> just says to access the struct as a pointer. <code>.</code> acts as if it's just a struct. It's synactic - there's no difference in terms of functionality.</p>\n<p>Edit: You can overload <code>-&gt;</code> to make it do something different, although assuming you don't do that it's the same. Not sure why you'd do that, but if you did then you'd have to dereference your struct again using an additional <code>*</code>.</p>\n", "OwnerUserId": "1633305", "LastEditorUserId": "1633305", "LastEditDate": "2012-11-08T19:24:38.017", "Id": "13296009", "Score": "2", "CreationDate": "2012-11-08T19:08:17.380", "LastActivityDate": "2012-11-08T19:24:38.017"}, "13296423": {"ParentId": "13295978", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>They are equivalent: as defined the standard (for pointers)</p>\n<blockquote>\n<p id=\"so_13295978_13296423_0\">5.2.5 Class member access [expr.ref]<br>\n  2: For the first option (dot) the first expression shall have complete class type. For the second option (arrow) the first expression shall have pointer to complete class type. <strong>The expression E1-&gt;E2 is converted to the equivalentform(*(E1)).E2</strong>; the remainder of 5.2.5 will address only the first option (dot).65 In either case, the id-expression shall name a member of the class or of one of its base classes.</br></p>\n</blockquote>\n<p>Classes and overriding the -&gt; and * operator are not relevant here as the container contains pointers.</p>\n<p>Thus:</p>\n<pre><code>(*it)-&gt;method();\n\n// Is equivelent to:\n\n(*((*it))).method();\n\n// This is equivelent too:\n\n(**it).method(); // thus both expressions are identical in this context.\n</code></pre>\n", "OwnerUserId": "14065", "LastEditorUserId": "14065", "LastEditDate": "2012-11-08T19:41:57.573", "Id": "13296423", "Score": "3", "CreationDate": "2012-11-08T19:35:52.080", "LastActivityDate": "2012-11-08T19:41:57.573"}, "13296017": {"ParentId": "13295978", "PostTypeId": "2", "CommentCount": "10", "Body": "<p>In the C language, there is no difference. However, in C++, the <code>-&gt;</code> operator can be overloaded, whereas the member selection <code>.</code> operator cannot.</p>\n<p>So in <code>(*foo)-&gt;bar</code> <code>*foo</code> could designate a class object which acts as a smart pointer, though this won't happen if <code>foo</code> is an iterator over a standard C++ container of pointers, which means that <code>*foo</code> evaluates to a pointer.</p>\n<p>And in <code>(**foo).bar</code>, <code>**foo</code> has to be a class object with a member called <code>bar</code> (which is accessible). </p>\n<p>The unary <code>*</code> can also be overloaded (which is how the iterator <code>foo</code>, a class object, returns the object which it references).</p>\n<p>In other words, the expressions <em>can</em> diverge in meaning, but if <code>*foo</code> is a pointer to a class/struct, then the equivalence inherited from the C language applies: <code>(*ptr).member</code> is equivalent to <code>ptr-&gt;member</code>.</p>\n", "OwnerUserId": "1250772", "LastEditorUserId": "1250772", "LastEditDate": "2012-11-08T19:57:57.927", "Id": "13296017", "Score": "10", "CreationDate": "2012-11-08T19:08:45.553", "LastActivityDate": "2012-11-08T19:57:57.927"}, "13295978": {"CommentCount": "4", "ViewCount": "265", "PostTypeId": "1", "LastEditorUserId": "1561378", "CreationDate": "2012-11-08T19:05:55.130", "LastActivityDate": "2012-11-08T19:57:57.927", "Title": "(*it)->method() vs (**it).method", "AcceptedAnswerId": "13296017", "LastEditDate": "2012-11-08T19:11:11.277", "Id": "13295978", "Score": "7", "Body": "<p>When iterating over an vector (or other container) of pointers, is there any difference between and/or over advantage using:</p>\n<pre><code>for (it = v.begin(); it != v.end(); ++it) {\n    (*it)-&gt;method();\n}\n</code></pre>\n<p>or</p>\n<pre><code>for (it = v.begin(); it != v.end(); ++it) {\n    (**it).method();\n}\n</code></pre>\n", "Tags": "<c++><vector><iterator><dot-operator>", "OwnerUserId": "179015", "AnswerCount": "5"}, "13296007": {"ParentId": "13295978", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>They're the same. You can use one or the other depending on the coding conventions you use, for example.</p>\n<p><code>-&gt;</code> and <code>*</code> operators can be overloaded, while <code>.</code> operator cannot.</p>\n", "OwnerUserId": "1261432", "LastEditorUserId": "1261432", "LastEditDate": "2012-11-08T19:13:56.587", "Id": "13296007", "Score": "0", "CreationDate": "2012-11-08T19:08:10.453", "LastActivityDate": "2012-11-08T19:13:56.587"}, "bq_ids": {"n4140": {"so_13295978_13296423_0": {"section_id": 6005, "quality": 0.75, "length": 36}}, "n3337": {"so_13295978_13296423_0": {"section_id": 5773, "quality": 0.75, "length": 36}}, "n4659": {"so_13295978_13296423_0": {"section_id": 7504, "quality": 0.7083333333333334, "length": 34}}}, "13296303": {"ParentId": "13295978", "CommentCount": "0", "Body": "<p>On Ubuntu 12.04 a list iterator implemented in the following way:</p>\n<pre><code>template&lt;typename _Tp&gt;\nstruct _List_iterator\n{\n\n  // ...\n  reference\n  operator*() const\n  { return static_cast&lt;_Node*&gt;(_M_node)-&gt;_M_data; }\n\n  pointer\n  operator-&gt;() const\n  { return std::__addressof(static_cast&lt;_Node*&gt;(_M_node)-&gt;_M_data); }\n\n  // ...\n</code></pre>\n", "OwnerUserId": "534381", "PostTypeId": "2", "Id": "13296303", "Score": "0", "CreationDate": "2012-11-08T19:28:38.230", "LastActivityDate": "2012-11-08T19:28:38.230"}});