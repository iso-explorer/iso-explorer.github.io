post_cb({"bq_ids": {"n4140": {"so_12340105_12340271_7": {"length": 6, "quality": 1.0, "section_id": 48}, "so_12340105_12340271_8": {"length": 6, "quality": 1.0, "section_id": 48}, "so_12340105_12340271_4": {"length": 5, "quality": 1.0, "section_id": 48}, "so_12340105_12340271_3": {"length": 4, "quality": 1.0, "section_id": 48}, "so_12340105_12340271_5": {"length": 4, "quality": 1.0, "section_id": 48}, "so_12340105_12340271_6": {"length": 4, "quality": 1.0, "section_id": 48}, "so_12340105_12340271_9": {"length": 5, "quality": 1.0, "section_id": 263}}, "n3337": {"so_12340105_12340271_7": {"length": 6, "quality": 1.0, "section_id": 43}, "so_12340105_12340271_8": {"length": 6, "quality": 1.0, "section_id": 43}, "so_12340105_12340271_9": {"length": 5, "quality": 1.0, "section_id": 254}, "so_12340105_12340271_3": {"length": 4, "quality": 1.0, "section_id": 43}, "so_12340105_12340271_5": {"length": 4, "quality": 1.0, "section_id": 43}, "so_12340105_12340271_6": {"length": 4, "quality": 1.0, "section_id": 43}, "so_12340105_12340271_4": {"length": 5, "quality": 1.0, "section_id": 43}}, "n4659": {"so_12340105_12340271_7": {"length": 6, "quality": 1.0, "section_id": 49}, "so_12340105_12340271_8": {"length": 6, "quality": 1.0, "section_id": 49}, "so_12340105_12340271_9": {"length": 5, "quality": 1.0, "section_id": 270}, "so_12340105_12340271_3": {"length": 4, "quality": 1.0, "section_id": 49}, "so_12340105_12340271_5": {"length": 4, "quality": 1.0, "section_id": 49}, "so_12340105_12340271_6": {"length": 4, "quality": 1.0, "section_id": 49}, "so_12340105_12340271_4": {"length": 5, "quality": 1.0, "section_id": 49}}}, "12340271": {"Id": "12340271", "PostTypeId": "2", "Body": "<p>Here is the standard quote about what may be specialized <em>expliclitly</em>, from 14.7.3/1:</p>\n<blockquote>\n<p id=\"so_12340105_12340271_0\">An explicit specialization of any of the following:</p>\n<p id=\"so_12340105_12340271_1\">\u2014 function template</p>\n<p id=\"so_12340105_12340271_2\">\u2014 class template</p>\n<p id=\"so_12340105_12340271_3\">\u2014 <strong>member function of a class template</strong></p>\n<p id=\"so_12340105_12340271_4\">\u2014 static data member of a class template</p>\n<p id=\"so_12340105_12340271_5\">\u2014 member class of a class template</p>\n<p id=\"so_12340105_12340271_6\">\u2014 member enumeration of a class template</p>\n<p id=\"so_12340105_12340271_7\">\u2014 member class template of a class or class template</p>\n<p id=\"so_12340105_12340271_8\">\u2014 member function template of a class or class template</p>\n<p id=\"so_12340105_12340271_9\">can be declared by a declaration introduced by <code>template&lt;&gt;;</code></p>\n</blockquote>\n<p>Unless explicitly allowed, you cannot partially specialize anything, and member functions of class templates are not explicitly allowed. Only class templates may be specialized partially (as described in 14.5.5).</p>\n<p>(Note that a member class template of an explicitly specialized class template is itself a class template.)</p>\n", "LastActivityDate": "2012-09-09T15:14:34.957", "CommentCount": "4", "CreationDate": "2012-09-09T15:14:34.957", "ParentId": "12340105", "Score": "1", "OwnerUserId": "596781"}, "12340105": {"ViewCount": "292", "Body": "<pre><code>template&lt;typename T&gt;\nclass C\n{\n   void f() { }\n};\n\n/*template&lt;typename T&gt;\nvoid C&lt;T*&gt;::f() { }*/\n\ntemplate&lt;&gt;\nvoid C&lt;int*&gt;::f() { }\n</code></pre>\n<p>If we remove comment, code will not compile. I know this (and i also know, that we should have <code>partial specialization</code> for <code>C&lt;T*&gt;</code>), but I cannot find words in standard, which explains such behaviour. I reread <code>14 par</code> of standard few times. Can you give me a quote or par of standard, that explains this?</p>\n<p><strong>EDIT.</strong></p>\n<pre><code>template&lt;typename T&gt;\nclass C\n{\n   template&lt;typename U&gt;\n   struct S { };\n};\n// #1\n/*template&lt;typename T&gt;\nclass C&lt;T*&gt;\n{\n   template&lt;typename U&gt;\n   struct S { };\n};*/\n// #2\n/*template&lt;typename T&gt;\ntemplate&lt;typename U&gt;\nstruct C&lt;T*&gt;::S&lt;U*&gt; { };*/\n\ntemplate&lt;&gt;\ntemplate&lt;typename U&gt;\nstruct C&lt;int*&gt;::S&lt;U*&gt; { };\n</code></pre>\n<p>If we remove only comment next then #2 - code will not compile.</p>\n", "AcceptedAnswerId": "12340271", "Title": "member-template specialization", "CreationDate": "2012-09-09T14:54:09.293", "Id": "12340105", "CommentCount": "0", "LastEditDate": "2012-09-09T15:29:29.357", "PostTypeId": "1", "LastEditorUserId": "1498580", "LastActivityDate": "2012-09-09T15:29:29.357", "Score": "1", "OwnerUserId": "1498580", "Tags": "<c++><templates><template-specialization><partial-specialization>", "AnswerCount": "1"}});