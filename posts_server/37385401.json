post_cb({"37385556": {"ParentId": "37385401", "PostTypeId": "2", "CommentCount": "4", "CreationDate": "2016-05-23T07:57:11.867", "Score": "9", "LastEditorUserId": "3309790", "LastEditDate": "2016-05-23T08:40:44.733", "Id": "37385556", "OwnerUserId": "3309790", "Body": "<p>I suppose you meant to overload <code>operator==</code> with c-style string, then the answer is <strong>No</strong>. The <a href=\"http://en.cppreference.com/w/cpp/language/operators\" rel=\"nofollow\">operator overloading</a> is supposed to be used for customizing operators for operands of <strong>user-defined types</strong>. </p>\n<p>From the standard, $13.5/6 Overloaded operators [over.oper] (emphasis mine)</p>\n<blockquote>\n<p id=\"so_37385401_37385556_0\">An operator function shall either be a non-static member function or\n  be a non-member function that has <strong>at least one parameter whose type is\n  a class, a reference to a class, an enumeration, or a reference to an\n  enumeration</strong>.</p>\n</blockquote>\n<p>Note if you meant <a href=\"http://en.cppreference.com/w/cpp/string/basic_string\" rel=\"nofollow\"><code>std::string</code></a>, the answer is still <strong>No</strong>. STL has provided the implementation of <a href=\"http://en.cppreference.com/w/cpp/string/basic_string/operator_cmp\" rel=\"nofollow\"><code>operator==</code></a> for <code>std::string</code> and you can't modify it. In fact, you don't need to overload it at all, just using it will be fine.</p>\n<p><strong>EDIT</strong></p>\n<p>If you want to overload it for your own class, it's fine. Such as</p>\n<pre><code>Class X {\n    //...\n};\nbool operator==(const X&amp; lhs, const X&amp; rhs) { \n    // do the comparison and return the result\n}\n</code></pre>\n<p>then</p>\n<pre><code>X x1, x2;\n//...\nif (x1 == x2) {\n    //...\n}\n</code></pre>\n", "LastActivityDate": "2016-05-23T08:40:44.733"}, "37386064": {"ParentId": "37385401", "CommentCount": "0", "CreationDate": "2016-05-23T08:24:55.303", "OwnerUserId": "6370180", "PostTypeId": "2", "Id": "37386064", "Score": "2", "Body": "<p>Isn't it already overloaded? </p>\n<pre><code>#include&lt;iostream&gt;\n#include&lt;cstring&gt;\nint main()\n{\n    std::string a = \"Ala\";\n    std::string b = \"Ala\";\n    if(a==b)\n        std::cout&lt;&lt;\"same\\n\";\n    else\n        std::cout&lt;&lt;\"but different\\n\";\n}\n</code></pre>\n<p>The code above worked for me (CodeBlocks)</p>\n", "LastActivityDate": "2016-05-23T08:24:55.303"}, "bq_ids": {"n4140": {"so_37385401_37385556_0": {"section_id": 653, "quality": 1.0, "length": 19}}, "n3337": {"so_37385401_37385556_0": {"section_id": 643, "quality": 1.0, "length": 19}}, "n4659": {"so_37385401_37385556_0": {"section_id": 681, "quality": 1.0, "length": 19}}}, "37385401": {"CommentCount": "2", "ViewCount": "1057", "PostTypeId": "1", "LastEditorUserId": "3309790", "CreationDate": "2016-05-23T07:49:11.023", "LastActivityDate": "2016-05-23T08:40:44.733", "Title": "Can we overload `==` operator in C++ to compare two strings?", "AcceptedAnswerId": "37385556", "LastEditDate": "2016-05-23T08:37:54.513", "Id": "37385401", "Score": "3", "Body": "<p>If we want to compare two strings without using <code>strcmp()</code> function, then can we overload <code>==</code> operator to compare two strings ?</p>\n", "Tags": "<c++><string><operator-overloading>", "OwnerUserId": "5889270", "AnswerCount": "2"}});