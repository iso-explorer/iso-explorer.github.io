post_cb({"bq_ids": {"n4140": {"so_30603512_30603673_0": {"length": 4, "quality": 0.6666666666666666, "section_id": 367}, "so_30603512_30603673_3": {"length": 4, "quality": 1.0, "section_id": 3286}, "so_30603512_30603512_0": {"length": 4, "quality": 0.5714285714285714, "section_id": 5559}, "so_30603512_30603673_5": {"length": 5, "quality": 1.0, "section_id": 3286}, "so_30603512_30603673_4": {"length": 9, "quality": 0.75, "section_id": 3286}, "so_30603512_30603673_1": {"length": 20, "quality": 0.8, "section_id": 6000}}, "n3337": {"so_30603512_30603673_0": {"length": 4, "quality": 0.6666666666666666, "section_id": 356}, "so_30603512_30603673_3": {"length": 4, "quality": 1.0, "section_id": 3156}, "so_30603512_30603512_0": {"length": 4, "quality": 0.5714285714285714, "section_id": 5341}, "so_30603512_30603673_5": {"length": 5, "quality": 1.0, "section_id": 3156}, "so_30603512_30603673_4": {"length": 10, "quality": 0.8333333333333334, "section_id": 3156}, "so_30603512_30603673_1": {"length": 17, "quality": 0.68, "section_id": 5768}}, "n4659": {"so_30603512_30603673_0": {"length": 4, "quality": 0.6666666666666666, "section_id": 379}, "so_30603512_30603673_5": {"length": 5, "quality": 1.0, "section_id": 4048}, "so_30603512_30603673_4": {"length": 7, "quality": 0.5833333333333334, "section_id": 384}, "so_30603512_30603512_0": {"length": 4, "quality": 0.5714285714285714, "section_id": 7006}}}, "30603512": {"ViewCount": "314", "Body": "<p>Please read the question entirely before you think to mark it as duplicate. The statement like </p>\n<p><code>int i=int();</code> </p>\n<p>most programmers will say that there is value initialization here &amp; i will be value initialized. (0 as output). But it also prints 0 as output on C++98 compiler.\nFollowing program that I tested on C++98 implementation and gives me 0 as output.</p>\n<pre><code>#include &lt;iostream&gt;\nint main()\n{\n     int i=int();\n     std::cout&lt;&lt;i;\n}\n</code></pre>\n<p>Don't say that i is value initialized in above C++98 program ,because value initialization introduced in C++03. So How i is initialized here? Is it really constructor call? int() looks like  constructor call. Primitive types have also default constructors in C++ as said by Bjarne stroustrup in his book C++ programming language &amp; TC++PL.\nThe C++ programming language Bjarne stroustrup:</p>\n<blockquote>\n<p id=\"so_30603512_30603512_0\">10.4.2 Built in types also have default constructors</p>\n</blockquote>\n<p>also read section 6.2.8 of same book.</p>\n<p>The following links also says that built in types have default constructors in C++.</p>\n<p>1) <a href=\"http://www.informit.com/guides/content.aspx?g=cplusplus&amp;seqNum=15\">http://www.informit.com/guides/content.aspx?g=cplusplus&amp;seqNum=15</a> </p>\n<p>2) <a href=\"http://www.geeksforgeeks.org/c-default-constructor-built-in-types/\">http://www.geeksforgeeks.org/c-default-constructor-built-in-types/</a></p>\n<p>So can I really say that it is constructor call of integer type?</p>\n", "AcceptedAnswerId": "30603673", "Title": "int a=int(); what happens in C++98?", "CreationDate": "2015-06-02T18:11:44.777", "Id": "30603512", "CommentCount": "8", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2015-06-02T18:14:11.313", "LastEditorUserId": "2296458", "LastActivityDate": "2015-06-02T18:20:48.380", "Score": "8", "OwnerUserId": "3777958", "Tags": "<c++><constructor><c++98><built-in-types>", "AnswerCount": "1"}, "30603673": {"Id": "30603673", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_30603512_30603673_0\"><strong>5.2.3 Explicit type conversion (functional notation)</strong></p>\n<p id=\"so_30603512_30603673_1\">2 The expression <code>T()</code>, where <code>T</code> is a simple-type-specifier (7.1.5.2) for a non-array complete object type or the (possibly cv-qualified) void type, creates an rvalue of the specified type, whose value is determined by\n  default-initialization (8.5; no initialization is done for the <code>void()</code> case). [...]</p>\n<p id=\"so_30603512_30603673_2\"><strong>8.5 Initializers</strong></p>\n<p id=\"so_30603512_30603673_3\">5 [...] To <em>default-initialize</em> an object of type <code>T</code> means:</p>\n<p id=\"so_30603512_30603673_4\">-- if <code>T</code> is a non-POD class type (clause 9), the default constructor for\n  <code>T</code> is called (and the initialization is ill-formed if <code>T</code> has no accessible default constructor);</p>\n<p id=\"so_30603512_30603673_5\">-- if <code>T</code> is an array type, each element is default-initialized;</p>\n<p id=\"so_30603512_30603673_6\">-- otherwise, the storage for the object is zero-initialized.</p>\n</blockquote>\n<p>There is no problem. <code>int()</code> has been guaranteed to evaluate to zero right from the very first C++ standard. The fact that it happened through default-initialization, rather than value-initialization, is a technical detail that is completely irrelevant for your question.</p>\n", "LastActivityDate": "2015-06-02T18:20:48.380", "CommentCount": "7", "CreationDate": "2015-06-02T18:20:48.380", "ParentId": "30603512", "Score": "9", "OwnerUserId": "743382"}});