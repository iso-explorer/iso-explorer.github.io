post_cb({"bq_ids": {"n4140": {"so_17804293_17805437_0": {"length": 6, "quality": 1.0, "section_id": 438}}, "n3337": {"so_17804293_17805437_0": {"length": 6, "quality": 1.0, "section_id": 429}}, "n4659": {"so_17804293_17805437_0": {"length": 6, "quality": 1.0, "section_id": 458}}}, "17805437": {"Id": "17805437", "PostTypeId": "2", "Body": "<p>Base on following quota from standard 12.6.2/10, so the constructor body will be called in following orde: A-&gt;B-&gt;C-&gt;D, so the final value of a will be 40.</p>\n<blockquote>\n<p id=\"so_17804293_17805437_0\">In a non-delegating constructor, initialization proceeds in the\n  following order: </p>\n<pre><code> \u2014 First, and only for the constructor of the most\n   derived class (1.8), virtual base classes are initialized in the order\n   they appear on a depth-first left-to-right traversal of the directed\n   acyclic graph of base classes, where \u201cleft-to-right\u201d is the order of\n   appearance of the base classes in the derived class\n   base-specifier-list. \n\n \u2014 Then, direct base classes are initialized in\n   declaration order as they appear in the base-specifier-list\n   (regardless of the order of the mem-initializers). \n</code></pre>\n</blockquote>\n", "LastActivityDate": "2013-07-23T08:46:23.357", "CommentCount": "0", "CreationDate": "2013-07-23T08:46:23.357", "ParentId": "17804293", "Score": "2", "OwnerUserId": "2428052"}, "17804293": {"ViewCount": "1376", "Body": "<p>In the following code the <code>Multi Path Inheritance</code> was resolved by using <code>Virtual Class</code>\nHow did the constructor work?\nA Constructor cannot be inherited or virtual or static.</p>\n<pre><code>/*Multi Path Inheritance*/\n\nclass A{\n\npublic:\n    int a;\n    A(){\n        a=50;\n    }\n};\n\n\nclass B:virtual public A{\n\npublic:\n    /*B(){\n        a = 40;\n    }*/\n\n};\n\nclass C:virtual public A{\n\npublic:\n    /*C(){\n        a = 30;\n    }*/\n\n};\n\nclass E:virtual public A{\n\npublic:\n    E(){\n        a = 40;\n    }\n\n};\n\nclass D : public B, public C, public E{\n\npublic:\n    D(){\n        cout&lt;&lt;\"The value of a is : \"&lt;&lt;a&lt;&lt;endl;  \n    }\n\n};\n\nint main(int argc, char *argv[]){\n\n    D d;\n    return 0;\n}\n</code></pre>\n", "AcceptedAnswerId": "17804363", "Title": "Multipath Inheritance and", "CreationDate": "2013-07-23T07:46:02.170", "Id": "17804293", "CommentCount": "3", "PostTypeId": "1", "LastActivityDate": "2013-07-23T08:46:23.357", "Score": "0", "OwnerUserId": "1180245", "Tags": "<c++><visual-c++>", "AnswerCount": "2"}, "17804363": {"Id": "17804363", "PostTypeId": "2", "Body": "<p>You can find a lot of informations and examples about virtual inheritance <a href=\"http://msdn.microsoft.com/en-us/library/wcz57btd%28v=vs.80%29.aspx\" rel=\"nofollow\">here</a> (yes, it's actually on msdn, how strange :) )</p>\n<p>As for the constructors, constructors get called as you specify them. If you don't specify a call for a virtua-base class constructor,</p>\n<blockquote>\n<p id=\"so_17804293_17804363_0\">constructors for virtual base classes anywhere in your class's\n  inheritance hierarchy are called by the \"most derived\" class's\n  constructor.</p>\n</blockquote>\n<p>(read it <a href=\"http://www.parashift.com/c++-faq-lite/virtual-inheritance-ctors.html\" rel=\"nofollow\">here</a>).</p>\n", "LastEditorUserId": "2528057", "LastActivityDate": "2013-07-23T07:57:31.183", "Score": "1", "CreationDate": "2013-07-23T07:50:03.827", "ParentId": "17804293", "CommentCount": "0", "OwnerUserId": "2528057", "LastEditDate": "2013-07-23T07:57:31.183"}});