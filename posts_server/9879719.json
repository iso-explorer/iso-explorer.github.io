post_cb({"9880459": {"ParentId": "9879719", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The code is correct but it has nothing to do with argument dependent look-up. Also, the using declaration only affects finding of <code>usesFoo</code> and not <code>foo</code>: once you have uttered the name of a class member, other names are looked up in the context of this class. Since <code>foo</code> is a member of test::usesFoo` it found. Without the using directive you'd need to define the member function like this:</p>\n<pre><code>void test::usesFoo::memberFunction(foo&amp; input) {\n    (void)input;\n}\n</code></pre>\n<p>The relevant clause for this is 3.4.1 Unqualified Name Look-up [basic.lookup.unqual] paragraph 6:</p>\n<blockquote>\n<p id=\"so_9879719_9880459_0\">A name used in the definition of a function following the function\u2019s declarator-id that is a member of namespace N (where, only for the purpose of exposition, N could represent the global scope) shall be declared before its use in the block in which it is used or in one of its enclosing blocks (6.3) or, shall be declared before its use in namespace N or, if N is a nested namespace, shall be declared before its use in one of N\u2019s enclosing namespaces.</p>\n</blockquote>\n<p>Argument dependent lookup only enters the picture when a function is called, not when it is defined. These things have nothing to do with each other at all.</p>\n", "OwnerUserId": "1120273", "LastEditorUserId": "1120273", "LastEditDate": "2012-03-26T22:05:00.610", "Id": "9880459", "Score": "1", "CreationDate": "2012-03-26T21:56:19.227", "LastActivityDate": "2012-03-26T22:05:00.610"}, "9879719": {"CommentCount": "3", "ViewCount": "304", "CreationDate": "2012-03-26T20:55:20.603", "LastActivityDate": "2012-03-26T22:05:00.610", "Title": "How does the using directive affect function arguments in C++?", "AcceptedAnswerId": "9880459", "PostTypeId": "1", "Id": "9879719", "Score": "3", "Body": "<p>I have the following code that works fine using g++ 4.4.6, but fails to compile using Visual Studio 2008.  It seems related to Argument Dependent Lookup, so I think g++ is correct. </p>\n<pre><code>// testClass.hpp\nnamespace test {\n    class foo {\n      public:\n        foo(){}\n     };\n\n    class usesFoo {\n      public:\n        usesFoo() {}\n\n        void memberFunc(foo &amp;input);\n    };\n}\n\n// testClass.cpp\n#include \"testClass.hpp\"\n\nusing test::usesFoo;\n\nvoid usesFoo::memberFunc(foo &amp;input) {\n    (void) input;\n}\n</code></pre>\n<p>The error I get when compiling in Visual Studio is,</p>\n<p>1&gt;Compiling...<br>\n1&gt;testClass.cpp\n1&gt;c:\\work\\testproject\\testproject\\testclass.cpp(6) : error C2065: 'foo' : undeclared identifier \n1&gt;c:\\work\\testproject\\testproject\\testclass.cpp(6) : error C2065: 'input' : undeclared identifier \n1&gt;c:\\work\\testproject\\testproject\\testclass.cpp(6) : error C2448: 'test::usesFoo::memberFunc' : function-style initializer appears to be a function definition</br></p>\n<p>I realize that either putting the namespace directly on the member function in the cpp file, or \"using namespace test\" will fix the problem, I'm more curious on what exactly the standard says in this case.</p>\n", "Tags": "<c++><visual-c++><g++>", "OwnerUserId": "49514", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_9879719_9880459_0": {"section_id": 7092, "quality": 1.0, "length": 38}}, "n3337": {"so_9879719_9880459_0": {"section_id": 6836, "quality": 1.0, "length": 38}}, "n4659": {"so_9879719_9880459_0": {"section_id": 8593, "quality": 0.7105263157894737, "length": 27}}}});