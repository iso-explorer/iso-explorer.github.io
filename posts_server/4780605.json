post_cb({"bq_ids": {"n4140": {"so_4780605_4780865_2": {"length": 9, "quality": 1.0, "section_id": 6077}, "so_4780605_4780605_0": {"length": 9, "quality": 0.8181818181818182, "section_id": 763}, "so_4780605_4780865_1": {"length": 9, "quality": 0.9, "section_id": 6076}}, "n3337": {"so_4780605_4780865_2": {"length": 9, "quality": 1.0, "section_id": 5845}, "so_4780605_4780605_0": {"length": 9, "quality": 0.8181818181818182, "section_id": 750}, "so_4780605_4780865_1": {"length": 9, "quality": 0.9, "section_id": 5844}}, "n4659": {"so_4780605_4780865_2": {"length": 9, "quality": 1.0, "section_id": 7573}, "so_4780605_4780605_0": {"length": 8, "quality": 0.7272727272727273, "section_id": 307}, "so_4780605_4780865_1": {"length": 9, "quality": 0.9, "section_id": 7572}}}, "4780605": {"ViewCount": "103", "Body": "<p>Point from ISO Standard C++ specification  :  \u00a73.9 /9th point</p>\n<blockquote>\n<p id=\"so_4780605_4780605_0\">An object type is a (possibly cv qualified) type that is not a function type, not a reference type, and not a void type.</p>\n</blockquote>\n<p>Any one can able to explain this point with programming .(how it fails )</p>\n", "Title": "basic.types \u00a73.9 /9th point,ISO Standard C++ specification", "CreationDate": "2011-01-24T09:50:05.733", "LastActivityDate": "2016-04-05T10:04:33.213", "CommentCount": "0", "LastEditDate": "2016-04-05T10:04:33.213", "PostTypeId": "1", "LastEditorUserId": "560648", "Id": "4780605", "Score": "1", "OwnerUserId": "526255", "Tags": "<c++>", "AnswerCount": "2"}, "4780780": {"Id": "4780780", "PostTypeId": "2", "Body": "<p>Are you making it harder than you have to?</p>\n<p>There are various \"things\" in C++, such as functions, references, pointers, classes, and so forth.  Almost everything has a type (e.g. variables) or is a type (e.g. classes), and some of those types are said to be \"object types\".  Function types, reference types, and void are not \"object types\".</p>\n<p>Note that void is a special type with several special cases around it.  In particular, it's used to mean \"nothing\" in function return types, and to mean \"unknown type\" when used as void* (a \"pointer to an unknown type\").</p>\n<p>\"Reference types\" should be fairly self-explanatory: add a &amp; to an existing type to get a reference type.  (You can't do this with all types.)</p>\n<p>Function types is also exactly as it sounds: the type of a function.  For example:</p>\n<pre><code>void f();\nint h(double);\n</code></pre>\n<p>Here, f has type void() and h has type int(double).  (Function types look weird compared to most other types.)</p>\n", "LastEditorUserId": "511601", "LastActivityDate": "2011-01-24T10:15:30.573", "Score": "1", "CreationDate": "2011-01-24T10:10:01.057", "ParentId": "4780605", "CommentCount": "0", "OwnerUserId": "511601", "LastEditDate": "2011-01-24T10:15:30.573"}, "4780865": {"Id": "4780865", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_4780605_4780865_0\">Any one can able to explain this point with programming .(how it fails )</p>\n</blockquote>\n<p>Bending over backwards, I came up with the following program:</p>\n<pre><code>std::cout &lt;&lt; sizeof(bool(int)) &lt;&lt; std::endl;\n// invalid application of 'sizeof' to a function type\n\nstd::cout &lt;&lt; sizeof(void) &lt;&lt; std::endl;\n// invalid application of 'sizeof' to a void type\n</code></pre>\n<p>That is because:</p>\n<blockquote>\n<p id=\"so_4780605_4780865_1\">The <code>sizeof</code> operator yields the number of bytes in the <strong>object</strong> representation of its operand.</p>\n</blockquote>\n<p>I cannot apply the same reasoning for references because:</p>\n<blockquote>\n<p id=\"so_4780605_4780865_2\">When applied to a reference or a reference type, the result is the size of the referenced type.</p>\n</blockquote>\n<p>But we can use the fact that arrays are sequences of <strong>objects</strong>:</p>\n<pre><code>int&amp; array[10];\n// error: declaration of 'array' as array of references\n</code></pre>\n<p>This is an error because references are not objects. Happy now? ;)</p>\n", "LastActivityDate": "2011-01-24T10:19:28.530", "CommentCount": "3", "CreationDate": "2011-01-24T10:19:28.530", "ParentId": "4780605", "Score": "4", "OwnerUserId": "252000"}});