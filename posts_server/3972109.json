post_cb({"3972179": {"CreationDate": "2010-10-19T19:52:49.943", "LastActivityDate": "2010-10-19T20:38:54.360", "LastEditorUserId": "210102", "ParentId": "3972109", "Score": "2", "Id": "3972179", "OwnerUserId": "210102", "Body": "<p>Any variable defined at global scope has memory reserved for it at compile time. That does not mean it's guaranteed to be properly initialized, but it's there all the same.</p>\n<p>At link-time, Visual C++ offers the option to <a href=\"http://msdn.microsoft.com/en-us/library/bxwfs976%28v=VS.100%29.aspx\" rel=\"nofollow\">strip unused data and functions via /OPT</a> - see here.</p>\n", "CommentCount": "10", "PostTypeId": "2", "LastEditDate": "2010-10-19T20:38:54.360"}, "3972109": {"AcceptedAnswerId": "3972179", "Tags": "<c++><class><memory><compiler-construction>", "AnswerCount": "3", "OwnerUserId": "388056", "Body": "<p>I have following two classes:</p>\n<pre><code>template &lt;size_t size&gt;\nclass Cont{\n public:\n char charArray[size];\n};\ntemplate &lt;size_t size&gt;\nclass ArrayToUse{\n public:\n Cont&lt;size&gt; container;\n inline ArrayToUse(const Cont&lt;size+1&gt; &amp; input):container(reinterpret_cast&lt;const Cont&lt;size&gt; &amp;&gt;(input)){}\n};\n</code></pre>\n<p>I have three following lines of code at global scope:</p>\n<pre><code>const Cont&lt;12&gt; container={\"hello world\"};\nArrayToUse&lt;11&gt; temp(container);\nchar (&amp;charArray)[11]=temp.container.charArray;\n</code></pre>\n<p>In totality of my code The only usage of \"container\" object is for initialization of an object of \"ArrayToUse\" class as mentioned and after initialization of \"charArray\" reference to \"temp.container.charArray\" I'll use that reference in rest of my code, now I'm wondering does compiler reserve memory for \"container\" object since that's got a temporary usage?</p>\n", "CommentCount": "5", "PostTypeId": "1", "CreationDate": "2010-10-19T19:45:44.583", "ViewCount": "213", "LastActivityDate": "2010-10-20T07:21:17.280", "Id": "3972109", "LastEditorUserId": "388056", "Title": "will compiler reserve memory for this object?", "Score": "0", "LastEditDate": "2010-10-20T06:24:03.887"}, "3972267": {"CreationDate": "2010-10-19T20:05:24.583", "LastActivityDate": "2010-10-20T07:21:17.280", "LastEditorUserId": "6610", "ParentId": "3972109", "Score": "0", "Id": "3972267", "OwnerUserId": "6610", "Body": "<p>The compiler <em>should</em> create the <code>container</code> variable in the compiled object file.  The linker is the one that can tell if it's needed or not (for an <code>export</code>ed symbol, or from another compilation unit if declared <code>extern</code>).</p>\n<p>But...</p>\n<p>The type <code>Cont&lt;x&gt;</code> is unrelated to <code>Cont&lt;x+1&gt;</code>.  You cannot depend on the memory of a member variable being layed out in similar fashions.  Heck, you cannot even know if it looks the same, since there is this thing called 'template specialization':</p>\n<pre><code>// your code\ntemplate &lt;size_t size&gt;\nclass Cont{\n public:\n char charArray[size];\n};\n\n// my evil tweak\n// I'm the worst compiler ever but I feel that this\n// array would better be represented as a map...\ntemplate&lt;&gt; class Cont&lt;12&gt; {\n   std::map&lt;int,char&gt; charArray;\n};\n\n// your screwed up result\nCont&lt;12&gt; c12;\nCont&lt;11&gt;&amp; c11( reinterpret_cast&lt;Cont&lt;11&gt;&amp;&gt;(c12) );\nchar (&amp;s11)[11] = c11.charArray; // points to the first byte of a list object...\n</code></pre>\n<p>EDIT --  @UncleBen's comment insinuates I'm overdoing here.  And he's right.</p>\n<p>according to <a href=\"http://en.wikipedia.org/wiki/C%2B%2B_classes#cite_note-C.2B.2B03_9.2.2F17-7\" rel=\"nofollow\">wikipedia</a>, </p>\n<blockquote id=\"so_3972109_3972267_0\">\n<ul>\n<li>A pointer to a POD-struct\n  object, suitably converted using a\n  reinterpret cast, points to its\n  initial member and vice versa,\n  implying that there is no padding at\n  the beginning of a POD-struct.</li>\n</ul>\n</blockquote>\n<p>So in this case, </p>\n<ul>\n<li><p>where the <code>charArray</code> is the first member of a <code>Cont&lt;n&gt;</code>, and there are no non-POD members</p></li>\n<li><p>there is no assignment operator, nor a destructor </p></li>\n</ul>\n<p>It is safe.</p>\n", "CommentCount": "2", "PostTypeId": "2", "LastEditDate": "2010-10-20T07:21:17.280"}, "3972178": {"CreationDate": "2010-10-19T19:52:47.657", "LastActivityDate": "2010-10-19T20:03:50.003", "LastEditorUserId": "323285", "ParentId": "3972109", "Score": "0", "Id": "3972178", "OwnerUserId": "323285", "Body": "<p>it totaly depends on your particular compiler so i'd say inspect the assembly and find out!\nthe compiler could optimize container out, or it could neglect to do so.</p>\n", "CommentCount": "0", "PostTypeId": "2", "LastEditDate": "2010-10-19T20:03:50.003"}, "bq_ids": {"n3337": {"so_3972109_3972267_0": {"section_id": 5650, "quality": 0.6842105263157895, "length": 13}}}});