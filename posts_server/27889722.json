post_cb({"bq_ids": {"n4140": {"so_27889722_27889810_0": {"length": 15, "quality": 0.9375, "section_id": 745}}, "n3337": {"so_27889722_27889810_0": {"length": 15, "quality": 0.9375, "section_id": 734}}, "n4659": {"so_27889722_27889810_0": {"length": 15, "quality": 0.9375, "section_id": 803}}}, "27889722": {"ViewCount": "642", "Body": "<p>I'm trying to delete all entries in a map where value == 50 for any key.</p>\n<p>This code is working fine for me.</p>\n<pre><code> while (itr != mymap.end())\n {\n    if ((*itr).second == 50)\n        mymap.erase(itr++);\n     else\n        itr++;\n\n }\n</code></pre>\n<p>But this code is giving run time error.</p>\n<pre><code>while (itr != mymap.end())\n{\n    if ((*itr).second == 50)\n    {    \n        mymap.erase(itr);\n        itr++\n    }\n    else\n        itr++;\n\n}\n</code></pre>\n<p>My doubt is aren't both logic is same? why run time error in second case?</p>\n", "AcceptedAnswerId": "27889810", "Title": "Delete all entries in STL Map which matches value", "CreationDate": "2015-01-11T17:06:05.837", "Id": "27889722", "CommentCount": "4", "PostTypeId": "1", "ClosedDate": "2015-01-11T17:40:27.717", "LastActivityDate": "2015-01-11T17:21:13.323", "Score": "0", "OwnerUserId": "1216931", "Tags": "<c++><dictionary><stl>", "AnswerCount": "1"}, "27889810": {"Id": "27889810", "PostTypeId": "2", "Body": "<p>No, the logic is not the same. \nIn the first case the iterator is postincremented before erasing the element when it is a valid iterator.\nIn the second case the iterator is postincremented after erasing the element when it is an invalid iterator.</p>\n<p>The common approach to this operation is the following</p>\n<pre><code>while ( itr != mymap.end() )\n{\n    if ( (*itr).second == 50 )\n        itr = mymap.erase( itr );\n     else\n        itr++;\n}\n</code></pre>\n<p>According to the C++ Standard (23.2.4 Associative containers)</p>\n<blockquote>\n<p id=\"so_27889722_27889810_0\">9 The insert and emplace members shall not affect the validity of\n  iterators and references to the container, and <strong>the erase members\n  shall invalidate only iterators and references to the erased\n  elements</strong>.</p>\n</blockquote>\n", "LastEditorUserId": "2877241", "LastActivityDate": "2015-01-11T17:21:13.323", "Score": "2", "CreationDate": "2015-01-11T17:15:14.970", "ParentId": "27889722", "CommentCount": "0", "OwnerUserId": "2877241", "LastEditDate": "2015-01-11T17:21:13.323"}});