post_cb({"15191275": {"ParentId": "15191127", "PostTypeId": "2", "CommentCount": "8", "Body": "<p>Because of the way that type aliases work, it looks to your compiler like you're trying to define <code>MyClass::String</code> inside of itself. It gets all confused.</p>\n<blockquote>\n<p id=\"so_15191127_15191275_0\"><code>[C++11: 7.1.3/6]:</code> In a given scope, a <code>typedef</code> specifier shall not be used to redefine the name of any type declared in that scope to refer to a different type. <em>[..]</em></p>\n</blockquote>\n<p>Here's a complete example:</p>\n<pre><code>typedef int alias_t;\n\nclass T\n{\n  typedef alias_t alias_t;\n};\n</code></pre>\n<p><a href=\"http://codepad.org/X9Jl9dzH\" rel=\"nofollow\">Output</a>:</p>\n<blockquote>\n<p id=\"so_15191127_15191275_1\">test.cpp:4: error: declaration of 'typedef alias_t T::alias_t'<br>\n  test.cpp:1: error: changes meaning of 'alias_t' from 'typedef int alias_t'</br></p>\n</blockquote>\n<hr>\n<p>I can <a href=\"http://codepad.org/9FapZA4g\" rel=\"nofollow\">fix this example</a> by adding the <code>::</code> prefix to the existing type:</p>\n<pre><code>typedef int alias_t;\n\nclass T\n{\n  typedef ::alias_t alias_t;\n};\n</code></pre>\n<hr>\n<p>In your code, that translates to the following:</p>\n<pre><code>class MyClass\n{\n   typedef ::String String;\n};\n</code></pre>\n</hr></hr>", "OwnerUserId": "560648", "LastEditorUserId": "560648", "LastEditDate": "2013-03-03T21:51:21.813", "Id": "15191275", "Score": "2", "CreationDate": "2013-03-03T21:45:40.990", "LastActivityDate": "2013-03-03T21:51:21.813"}, "15191127": {"CommentCount": "0", "ViewCount": "1043", "PostTypeId": "1", "ClosedDate": "2014-05-30T16:31:52.393", "LastEditorUserId": "1594394", "CreationDate": "2013-03-03T21:29:02.450", "LastActivityDate": "2013-03-03T21:53:20.957", "Title": "changes meaning from typedef", "AcceptedAnswerId": "15191275", "LastEditDate": "2013-03-03T21:42:42.157", "Id": "15191127", "Score": "1", "Body": "<p>I have the following declaration in my code:</p>\n<pre><code>typedef QString                          String;\n</code></pre>\n<p>Then in another header I do:</p>\n<pre><code>class MyClass {\n  typedef String String;\n};\n</code></pre>\n<p>and the following error occurs:</p>\n<pre><code>error: changes meaning of 'String' from 'typedef class QString String' [-fpermissive]\n</code></pre>\n<p>What is wrong with using this redeclaration?</p>\n", "Tags": "<c++><typedef>", "OwnerUserId": "1594394", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_15191127_15191275_0": {"section_id": 5412, "quality": 0.8571428571428571, "length": 12}}, "n3337": {"so_15191127_15191275_0": {"section_id": 5207, "quality": 0.8571428571428571, "length": 12}}, "n4659": {"so_15191127_15191275_0": {"section_id": 6834, "quality": 0.8571428571428571, "length": 12}}}});