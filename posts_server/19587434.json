post_cb({"19587657": {"ParentId": "19587434", "CommentCount": "0", "Body": "<p>usually I would prefer to keep your function names different from what is defined as a standard .\nFor ex here one could use function name as myRandom instead of random so that I can inform  the people , who would be maintaining my code later on , that the function being used is NOT the one defined as a standard.  </p>\n", "OwnerUserId": "1636300", "PostTypeId": "2", "Id": "19587657", "Score": "0", "CreationDate": "2013-10-25T10:42:52.317", "LastActivityDate": "2013-10-25T10:42:52.317"}, "19587607": {"ParentId": "19587434", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>You can declare your functions in their own namespaces to prevent declaration collision.</p>\n<pre><code>namespace MyFunc\n{\nfloat random() { return 0.0f; }\n};\n</code></pre>\n", "OwnerUserId": "1496443", "LastEditorUserId": "1496443", "LastEditDate": "2013-10-25T10:48:03.020", "Id": "19587607", "Score": "6", "CreationDate": "2013-10-25T10:40:02.600", "LastActivityDate": "2013-10-25T10:48:03.020"}, "19587873": {"ParentId": "19587434", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>In general you should try to avoid redeclaring in the first place.\nYou can do this by either using namespaces or by splitting up your source into files which can include <code>cstdlib</code> and others which can use a <code>static</code> version of your (name clashing) function.</p>\n<p><strong>If this is not an options then go on reading. But be aware that the following might be very platform specific.</strong></p>\n<p>By just having a look at my <code>cstdlib</code> and <code>stdlib.h</code> here at my place I noticed that there is a switch by which <code>cstdlib</code> decides if it includes <code>stdlib.h</code> or just declares <code>abort</code>, <code>atext</code> and <code>exit</code> in the <code>std</code> namespace.</p>\n<p>Obviously you pull in the <code>stdlib.h</code> branch. Looking further into this file I noticed the macro <code>__BEGIN_NAMESPACE_STD</code> and later on <code>__END_NAMESPACE_STD</code>. Maybe you could use this, but it is (as the name suggests) some implementation internal macro and should not be set directly by you. However, it should be there for some reason so you might have luck with searching for it.</p>\n<p>After some more search it turned out that <code>random</code> is one of several functions (and declarations) which are not wrapped into <code>__BEGIN_NAMESPACE_STD</code>. Therefore, this is not a solution to the problem. (I found another macro <code>_GLIBCPP_USE_NAMESPACES</code> which seems to be used internally as well to <code>#define __BEGIN_NAMESPACE_STD namespace std {</code>).</p>\n<p>So to sum it up: This is no viable path and you should use one of the described workarounds.</p>\n", "OwnerUserId": "760746", "LastEditorUserId": "760746", "LastEditDate": "2013-10-25T11:18:14.610", "Id": "19587873", "Score": "3", "CreationDate": "2013-10-25T10:54:28.700", "LastActivityDate": "2013-10-25T11:18:14.610"}, "19587434": {"CommentCount": "2", "AcceptedAnswerId": "19588293", "PostTypeId": "1", "LastEditorUserId": "1737", "CreationDate": "2013-10-25T10:32:00.497", "LastActivityDate": "2013-10-25T11:18:14.610", "LastEditDate": "2013-10-25T10:59:53.343", "ViewCount": "971", "FavoriteCount": "2", "Title": "Prevent standard functions outside of std namespace", "Id": "19587434", "Score": "15", "Body": "<p>I am using only header files specific to C++ (e.g. <code>&lt;cstdlib&gt;</code>), however I still get globally-declared functions, and not just functions in the <code>std</code> namespace. Is there a way, perhaps a compiler switch, to prevent that?</p>\n<p>For example, the following code:</p>\n<pre><code>#include &lt;cstdlib&gt;\nfloat random() { return 0.0f; }\nint main() { return 0; }\n</code></pre>\n<p>Fails to compile under linux, with the following error:</p>\n<pre><code>&gt; g++ -c main.cpp main.o\nmain.cpp: In function \u2018float random()\u2019:\nmain.cpp:2:14: error: new declaration \u2018float random()\u2019\n/usr/include/stdlib.h:327:17: error: ambiguates old declaration \u2018long int random()\u2019\n</code></pre>\n<p>or</p>\n<pre><code>&gt; clang++ main.cpp -o main.o\nmain.cpp:2:7: error: functions that differ only in their return type cannot be overloaded\nfloat random() { return 0.0f; }\n/usr/include/stdlib.h:327:17: note: previous declaration is here\nextern long int random (void) __THROW;\n</code></pre>\n<p>which is caused that <code>stdlib.h</code> \"pollutes\" the global namespace with its own <code>random</code> function.</p>\n<p>Note, that I am not facing these problems when compiling on Windows, using Visual Studio.</p>\n", "Tags": "<c++><g++><clang++>", "OwnerUserId": "635654", "AnswerCount": "5"}, "19588293": {"ParentId": "19587434", "CommentCount": "1", "Body": "<ol>\n<li><p><code>&lt;cstdlib&gt;</code> will always populate std namespace, and sometimes define global symbols, while <code>&lt;stdlib.h&gt;</code> will always define global symbols, and sometimes populate std namespace. This varies from implementation to implementation.</p></li>\n<li><p>The standard writes:</p>\n<blockquote>\n<p id=\"so_19587434_19588293_0\">Every C header, each of which has a name of the form <code>name.h</code>, behaves as if each name placed in the standard library namespace by the corresponding <code>cname</code> header is placed within the global namespace scope. <strong>It is unspecified whether</strong> these names are first declared or defined within namespace scope (3.3.6) of the namespace <code>std</code> and are then injected into the global namespace scope by explicit using-declarations (7.3.3).</p>\n</blockquote>\n<p>Which means, that the compiler <strong>is allowed</strong> to put those symbols into global scope and <code>std</code> namespace <strong>at the same time</strong>.</p></li>\n<li><p>Therefore, we see no advantages to prefer one header file over the other. Because <strong>they are both very likely to pollute the global scope</strong>.</p>\n<p>However, it is still necessary to use <code>std</code> namespace when <code>#include &lt;cstdlib&gt;</code>, and do not use <code>std</code> when <code>#include &lt;stdlib.h&gt;</code>, to make sure your code can compile for all compiler implementations.</p></li>\n<li><p>Advice: <strong>Do not use names in standard libraries</strong>. First, they are not guaranteed to work. (Note: Few compiler implementations actually keep the global scope clean when you <code>#include  &lt;csomething&gt;</code>, so never depend on this.) Second, it will confuse code readers and maintainers, because almost everyone will assume standard names are actually standard, no matter where they come from.</p></li>\n</ol>\n", "OwnerUserId": "2138864", "PostTypeId": "2", "Id": "19588293", "Score": "10", "CreationDate": "2013-10-25T11:14:58.400", "LastActivityDate": "2013-10-25T11:14:58.400"}, "19587770": {"ParentId": "19587434", "CommentCount": "2", "Body": "<p>The standard explicitly permits <code>&lt;c???&gt;</code> headers to bring names of C standard functions to the global namespace.</p>\n", "OwnerUserId": "775806", "PostTypeId": "2", "Id": "19587770", "Score": "2", "CreationDate": "2013-10-25T10:49:12.397", "LastActivityDate": "2013-10-25T10:49:12.397"}, "bq_ids": {"n4140": {"so_19587434_19588293_0": {"section_id": 4907, "quality": 0.926829268292683, "length": 38}}, "n3337": {"so_19587434_19588293_0": {"section_id": 4702, "quality": 0.926829268292683, "length": 38}}, "n4659": {"so_19587434_19588293_0": {"section_id": 6316, "quality": 0.926829268292683, "length": 38}}}});