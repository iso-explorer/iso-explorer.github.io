post_cb({"32894445": {"ParentId": "32894131", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>The draft standard in section <code>8.3.5</code> <em>[dcl.fct]</em> says <code>, ...</code> is synonymous with <code>...</code> unless <code>...</code> is part of abstract-declarator (<em>emphasis mine</em>):</p>\n<blockquote>\n<p id=\"so_32894131_32894445_0\">[...]If the parameter-declaration-clause terminates with an ellipsis\n  or a function parameter pack (14.5.3), the number of arguments shall\n  be equal to or greater than the number of parameters that do not have\n  a default argument and are not function parameter packs. <strong>Where\n  syntactically correct and where \u201c...\u201d is not part of an\n  abstract-declarator, \u201c, ...\u201d is synonymous with \u201c...\u201d</strong>.[...]</p>\n</blockquote>\n<p>So it is a <a href=\"https://stackoverflow.com/q/1657883/1708801\">variadic function</a> and as far as I can tell without additional arguments this is also a valid copy constructor, from section <code>12.8</code> <em>[class.copy]</em>:</p>\n<blockquote>\n<p id=\"so_32894131_32894445_1\">A non-template constructor for class X is a copy constructor if its\n  first parameter is of type X&amp;, const X&amp;, volatile X&amp; or const volatile\n  X&amp;, and either there are no other parameters or else all other\n  parameters have default arguments (8.3.6).</p>\n</blockquote>\n<p>and this note says that ellipses are not parameters:</p>\n<blockquote id=\"so_32894131_32894445_2\">\n<pre><code>void g(int = 0, ...); // OK, ellipsis is not a parameter so it can follow\n                      // a parameter with a default argument\n</code></pre>\n</blockquote>\n<p>which is backed up by the normative text above which says:</p>\n<blockquote>\n<p id=\"so_32894131_32894445_3\">If the parameter-declaration-clause terminates with an ellipsis[...]</p>\n</blockquote>\n<p>Note, since it was asked an <em>abstract-declarator</em> is a declarator without an identifier.</p>\n", "OwnerUserId": "1708801", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:07:22.060", "Id": "32894445", "Score": "5", "CreationDate": "2015-10-01T18:28:45.623", "LastActivityDate": "2015-10-05T19:46:38.897"}, "32895094": {"ParentId": "32894131", "PostTypeId": "2", "CommentCount": "2", "Body": "<blockquote>\n<p id=\"so_32894131_32895094_0\">What is the use of it? What does it mean?</p>\n</blockquote>\n<p>Yes, it introduces a variadic function.</p>\n<blockquote>\n<p id=\"so_32894131_32895094_1\">In C++ If I am not wrong they are used in variadic templates.</p>\n</blockquote>\n<p>The syntax and semantics are different. It's a \"C-style\" variadic function, not a variadic <em>template</em> function. A copy constructor, moreover, cannot be a template function. </p>\n<blockquote>\n<p id=\"so_32894131_32895094_2\">A <strong>non-template</strong> constructor for class X is a <strong>copy constructor</strong> if its\n   first parameter is of type X&amp;, const X&amp;, volatile X&amp; or const volatile\n   X&amp;, and either <strong>there are no other parameters</strong> or else all other\n   parameters have default arguments (8.3.6).   </p>\n</blockquote>\n<p>Per \u00a712.8.2 in the final draft (emphasis mine)</p>\n<blockquote>\n<p id=\"so_32894131_32895094_3\">Is this code well formed? Is this variadic copy constructor that can take any number of arguments?</p>\n</blockquote>\n<p>If the ellipsis contains parameters, it is no more a copy constructor but a simple constructor. If there aren't, then it is a valid copy constructor.</p>\n<pre><code> X(const X&amp;, int = 1, double = 5); // copy-ctor\n X(const X&amp;, int = 1, double); // constructor\n</code></pre>\n", "OwnerUserId": "2692339", "LastEditorUserId": "2692339", "LastEditDate": "2015-10-01T19:20:49.957", "Id": "32895094", "Score": "5", "CreationDate": "2015-10-01T19:11:10.173", "LastActivityDate": "2015-10-01T19:20:49.957"}, "32894131": {"CommentCount": "5", "AcceptedAnswerId": "32894445", "PostTypeId": "1", "LastEditorUserId": "2692339", "CreationDate": "2015-10-01T18:09:25.680", "LastActivityDate": "2015-10-05T19:46:38.897", "LastEditDate": "2015-10-01T19:17:29.973", "ViewCount": "487", "FavoriteCount": "2", "Title": "What is the meaning of ellipses in a copy constructor?", "Id": "32894131", "Score": "15", "Body": "<p>Consider the following program:</p>\n<pre><code>#include &lt;iostream&gt;\nstruct Test\n{\n    int a;\n    Test() : a(3)\n    { }\n    Test(const Test&amp; t...)\n    {\n        std::cout&lt;&lt;\"Copy constructor called\\n\";\n        a=t.a;\n    }\n    int get_a()\n    {\n        return a;\n    }\n    ~Test()\n    {\n        std::cout&lt;&lt;\"Destructor is called\\n\";\n    }\n};\nint main()\n{\n    Test t;\n    Test* t1=new Test(t);\n    std::cout&lt;&lt;t.get_a()&lt;&lt;'\\n';\n    std::cout&lt;&lt;t1-&gt;get_a()&lt;&lt;'\\n';\n    delete t1;\n}\n</code></pre>\n<p>Closely observe the three dots in parameter of copy constructor\nI was really surprised when I tried this program. What is the use of it? What does it mean?</p>\n<p>What the language specification says about this? </p>\n<p>I know that three dots are used to represent variable length arguments in variadic functions \nlike <code>printf()</code> and <code>scanf()</code> etc and also variadic macros introduced by C99. In C++, if I am not wrong, they are used in variadic templates.<br>\nIs this code well formed? Is this variadic copy constructor that can take any number of arguments?</br></p>\n<p>It compiles &amp; runs fine on g++ 4.8.1 &amp; MSVS 2010. </p>\n", "Tags": "<c++><copy-constructor><variadic-functions>", "OwnerUserId": "3777958", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_32894131_32894445_1": {"section_id": 451, "quality": 0.96, "length": 24}, "so_32894131_32895094_2": {"section_id": 451, "quality": 0.96, "length": 24}, "so_32894131_32894445_2": {"section_id": 482, "quality": 0.5555555555555556, "length": 5}, "so_32894131_32894445_0": {"section_id": 3240, "quality": 0.9629629629629629, "length": 26}}, "n3337": {"so_32894131_32894445_1": {"section_id": 442, "quality": 0.96, "length": 24}, "so_32894131_32895094_2": {"section_id": 442, "quality": 0.96, "length": 24}, "so_32894131_32894445_2": {"section_id": 3113, "quality": 0.6666666666666666, "length": 6}, "so_32894131_32894445_0": {"section_id": 3113, "quality": 0.9629629629629629, "length": 26}}, "n4659": {"so_32894131_32894445_1": {"section_id": 474, "quality": 0.96, "length": 24}, "so_32894131_32895094_2": {"section_id": 474, "quality": 0.96, "length": 24}, "so_32894131_32894445_2": {"section_id": 66, "quality": 0.5555555555555556, "length": 5}, "so_32894131_32894445_0": {"section_id": 3996, "quality": 0.9629629629629629, "length": 26}}}});