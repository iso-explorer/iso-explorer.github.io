post_cb({"bq_ids": {"n4140": {"so_25723736_25724185_0": {"length": 26, "quality": 0.9285714285714286, "section_id": 6967}}, "n3337": {"so_25723736_25724185_0": {"length": 26, "quality": 0.9285714285714286, "section_id": 6714}}, "n4659": {"so_25723736_25724185_0": {"length": 26, "quality": 0.9285714285714286, "section_id": 8467}}}, "29609678": {"Id": "29609678", "PostTypeId": "2", "Body": "<p>If you are doing a long jump from a catch block, you are at least going to leak the memory used to store the exception object. The compiler generates the code freeing this memory on the control flow paths leading out of the catch block scope. If you do a long jump, none of these paths is taken.</p>\n<p><a href=\"http://docs.oracle.com/cd/E19205-01/819-5267/bkahg/index.html\" rel=\"nofollow\">Sun Studio's documentation</a> forbids mixing exceptions and longjmp explicitly:</p>\n<blockquote>\n<p id=\"so_25723736_29609678_0\">In particular, you must not longjmp into or out of a try-block or catch-block (directly or indirectly), or longjmp past the initialization or non-trivial destruction of auto variables or temporary variables.</p>\n</blockquote>\n", "LastActivityDate": "2015-04-13T15:50:34.130", "CommentCount": "2", "CreationDate": "2015-04-13T15:50:34.130", "ParentId": "25723736", "Score": "1", "OwnerUserId": "1991979"}, "25723736": {"ViewCount": "144", "Body": "<p>I have the following lua_CFunction, written in C++:</p>\n<pre><code>int my_function(lua_State* L) {\n    int x = 0;\n    try {\n        x = do_cpp_stuff_that_invokes_lua_API_as_well();\n    } catch(const std::exception&amp; ex) {\n        lua_pushstring(ex.what().c_str());\n        lua_error(L);\n    }\n    return x;\n}\n</code></pre>\n<p>My question is the following: Is it OK to do a lua_error(L) or call any lua function that might longjmp:</p>\n<ul>\n<li>in the try block?</li>\n<li>in the catch block?</li>\n</ul>\n<p>I take care of variables allocated on the stack simply by not allocating anything that would rely on a destructor (string, etc...). If I need to do that, than all the lua functions in that scope are wrapped in a pcall and if that pcall fails an exception is thrown to this function that I posted. <em>Simply I am concerned with try-catch blocks.</em></p>\n<p>Many thanks</p>\n", "AcceptedAnswerId": "25724185", "Title": "Is it safe to longjmp through a try block?", "CreationDate": "2014-09-08T11:57:54.290", "Id": "25723736", "CommentCount": "5", "PostTypeId": "1", "LastActivityDate": "2015-04-13T15:50:34.130", "Score": "1", "OwnerUserId": "1101889", "Tags": "<c++><lua><try-catch><longjmp>", "AnswerCount": "2"}, "25724185": {"Id": "25724185", "PostTypeId": "2", "Body": "<p>The relevant rule is (\u00a718.10 [support.runtime]/p4):</p>\n<blockquote>\n<p id=\"so_25723736_25724185_0\">The function signature <code>longjmp(jmp_buf jbuf, int val)</code> has more\n  restricted behavior in this International Standard. A <code>setjmp/longjmp</code>\n  call pair has undefined behavior if replacing the <code>setjmp</code> and\n  <code>longjmp</code> by <code>catch</code> and <code>throw</code> would invoke any non-trivial\n  destructors for any automatic objects.</p>\n</blockquote>\n<p>The C++ standard does not otherwise restrict the use of <code>setjmp</code> and <code>longjmp</code>.</p>\n", "LastActivityDate": "2014-09-08T12:23:47.397", "CommentCount": "1", "CreationDate": "2014-09-08T12:23:47.397", "ParentId": "25723736", "Score": "3", "OwnerUserId": "2756719"}});