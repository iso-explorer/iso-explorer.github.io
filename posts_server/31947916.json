post_cb({"bq_ids": {"n4140": {"so_31947916_31947990_1": {"length": 23, "quality": 0.9583333333333334, "section_id": 6164}, "so_31947916_31947990_0": {"length": 25, "quality": 0.8928571428571429, "section_id": 6163}}, "n3337": {"so_31947916_31947990_1": {"length": 23, "quality": 0.9583333333333334, "section_id": 5925}, "so_31947916_31947990_0": {"length": 25, "quality": 0.8928571428571429, "section_id": 5924}}, "n4659": {"so_31947916_31947990_1": {"length": 23, "quality": 0.9583333333333334, "section_id": 7661}, "so_31947916_31947990_0": {"length": 25, "quality": 0.8928571428571429, "section_id": 7660}}}, "31947990": {"Id": "31947990", "PostTypeId": "2", "Body": "<p>From the standard</p>\n<p><strong>\u00a75.14 Logical AND operator</strong></p>\n<blockquote>\n<p id=\"so_31947916_31947990_0\">The <code>&amp;&amp;</code> operator groups left-to-right. The operands are both contextually converted to <code>bool</code>. The result is true if both operands are true and false otherwise. Unlike <code>&amp;</code>, <code>&amp;&amp;</code> guarantees left-to-right evaluation: the second operand is not evaluated if the first operand is false. </p>\n<p id=\"so_31947916_31947990_1\">The result is a <code>bool</code>. If the second expression is evaluated, <strong>every value computation and side effect associated with the first expression is sequenced before every value computation and side effect associated with the second expression</strong>.</p>\n</blockquote>\n<p>So, in your example:</p>\n<pre><code>(++j &amp;&amp; ++k)\n</code></pre>\n<p>The first evaluation will be</p>\n<pre><code>++j\n</code></pre>\n<p>Then (assuming <code>j</code> hasn't become <code>0</code> and therefore falsey)</p>\n<pre><code>++k\n</code></pre>\n<p>Then</p>\n<pre><code>j &amp;&amp; k // with both values incremented\n</code></pre>\n", "LastEditorUserId": "2296458", "LastActivityDate": "2015-08-11T17:17:09.407", "Score": "1", "CreationDate": "2015-08-11T17:13:20.660", "ParentId": "31947916", "CommentCount": "2", "OwnerUserId": "2296458", "LastEditDate": "2015-08-11T17:17:09.407"}, "31947916": {"ViewCount": "140", "Body": "<p>I was reading this post \n<a href=\"https://stackoverflow.com/questions/17432730/precedence-of-over\">Precedence of &amp;&amp; over ||</a>\n. It says that even though the precedence of &amp;&amp; is more than ||, we need to evaluate the expression from left to right and if the first expression turns out to be true, then we don't need to evaluate the second expression. \nBut precedence is the order of evaluation and accordingly all pre increments should be evaluated first and then (++j &amp;&amp; ++k) should be evaluated. The post seems to be ambiguous on this point. Is it not?</p>\n", "Title": "Precedence of && over ||", "CreationDate": "2015-08-11T17:10:11.553", "Id": "31947916", "CommentCount": "8", "LastEditDate": "2017-05-23T11:57:58.907", "PostTypeId": "1", "LastEditorUserId": "-1", "LastActivityDate": "2015-08-11T17:17:09.407", "Tags": "<c++><c><c++11>", "Score": "-3", "OwnerUserId": "5215284", "ClosedDate": "2015-08-11T17:17:52.477", "AnswerCount": "1"}});