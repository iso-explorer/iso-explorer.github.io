post_cb({"6178320": {"ParentId": "6177617", "CommentCount": "1", "Body": "<p>Yes, they are arrays of pointers. Arrays of arrays are different:</p>\n<pre><code>// array of 6 pointers into one-dimensional arrays 7 elements each\nint** mp = new int*[6];\nfor (int x = 0; x &lt; 6; x++)\n    mp[x] = new int[7];\n\n// array of 6 arrays of 7 elements each (two-dimensional 6x6 array)\n// (all dimensions except the 1st must be known at compile time)\nint (*mp)[7] = new int[6][7];\n// or, more commonly, when all dimensions are known at compile time,\nint mp[6][7];\n</code></pre>\n<p>Arrays of pointers are commonly used in C since there is no other way to create multi-indexed data structures at run time in that language.</p>\n", "OwnerUserId": "273767", "PostTypeId": "2", "Id": "6178320", "Score": "2", "CreationDate": "2011-05-30T15:49:26.733", "LastActivityDate": "2011-05-30T15:49:26.733"}, "6177649": {"ParentId": "6177617", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>If I understand correctly, your question is about semantics.  As far as the standard is concerned, <code>new []</code> does create an array, but returns a pointer to the first element.  From 5.3.4/5 of the standard:</p>\n<blockquote>\n<p id=\"so_6177617_6177649_0\">When the allocated object is an array\n  ... the new-expression yields a\n  pointer to the initial element (if\n  any) of the array.</p>\n</blockquote>\n<p>So in your case, what we colloquially call \"an array of arrays\" is really an array of pointers, which is distinct from e.g. <code>int x[6][6]</code>, which is truly an array of arrays.</p>\n", "OwnerUserId": "129570", "LastEditorUserId": "129570", "LastEditDate": "2011-05-30T14:46:03.860", "Id": "6177649", "Score": "2", "CreationDate": "2011-05-30T14:40:34.487", "LastActivityDate": "2011-05-30T14:46:03.860"}, "6177617": {"CommentCount": "5", "ViewCount": "544", "PostTypeId": "1", "LastEditorUserId": "776426", "CreationDate": "2011-05-30T14:37:57.823", "LastActivityDate": "2011-05-30T15:49:26.733", "Title": "Dynamic multidimensional arrays", "AcceptedAnswerId": "6177649", "LastEditDate": "2011-05-30T15:43:58.037", "Id": "6177617", "Score": "1", "Body": "<p>Is it appropriate to call dynamic multidimesional array, an array of arrays?</p>\n<pre><code>int **mp = 0;\n\n// Create an array of pointers\nmp = new int*[6];\n\n// Where each element of type pointer, points to dynamic array.\nfor (int x = 0; x &lt; 6; x++)\n    mp[x] = new int[7];\n</code></pre>\n<p>Looking at this, I would say they are array of pointers pointing to arrays of size 7 ints.\nBut are dynamic arrays even considered arrays or just a chuck of memory returned by pointer?</p>\n", "Tags": "<c++><dynamic-arrays>", "OwnerUserId": "776426", "AnswerCount": "4"}, "6178172": {"ParentId": "6177617", "CommentCount": "4", "Body": "<p>I think of arrays as pointers, because in practice a variable that holds an array is just a pointer to the first element of the array. Furthermore, you can use <strong>operator[]</strong> in any pointer, even if it's not pointing to an array.\nWith that line of thought:</p>\n<p><em>mp</em> is a pointer to a \"chunk of integer pointers\", and <em>mp[x]</em> is a pointer to a \"chunk of integers\".</p>\n<p>Now, these \"chunks of memory\" is what I would think of as the array, so you've got:</p>\n<p><em>mp</em> is a pointer to an array of integer pointers, and <em>mp[x]</em> is a pointer to an array of integers.</p>\n<p>In your example you've got a total of 7 arrays (chunks of memory), one for every <em>new</em> statement. Don't forget to <em>delete[]</em> every one of them after you're done using the structure.</p>\n", "OwnerUserId": "776480", "PostTypeId": "2", "Id": "6178172", "Score": "0", "CreationDate": "2011-05-30T15:32:30.073", "LastActivityDate": "2011-05-30T15:32:30.073"}, "6178011": {"ParentId": "6177617", "CommentCount": "1", "Body": "<p>C++ (and C) treat ragged arrays and contiguous multidimensional arrays quite differently. Access an element appears to be the same, but is quite different underneath the hood.</p>\n<pre><code>void do_something (\n    double matrix[3][3],\n    double ** ragged_array)\n{\n    double x = matrix[1][2];\n    double y = ragged_array[1][2];\n    ...\n}\n</code></pre>\n<p>The first access requires going through a pointer only once while the second requires going through two pointers.</p>\n", "OwnerUserId": "774499", "PostTypeId": "2", "Id": "6178011", "Score": "0", "CreationDate": "2011-05-30T15:14:41.283", "LastActivityDate": "2011-05-30T15:14:41.283"}, "bq_ids": {"n4140": {"so_6177617_6177649_0": {"section_id": 6086, "quality": 1.0, "length": 10}}, "n3337": {"so_6177617_6177649_0": {"section_id": 5854, "quality": 1.0, "length": 10}}, "n4659": {"so_6177617_6177649_0": {"section_id": 7582, "quality": 1.0, "length": 10}}}});