post_cb({"26173403": {"ViewCount": "37", "Body": "<p>N3797::8.3.5/6</p>\n<blockquote>\n<p id=\"so_26173403_26173403_0\">A function type with a cv-qualifier-seq or a ref-qualifier (including\n  a type named by typedef-name (7.1.3, 14.1)) shall appear only as:</p>\n<p id=\"so_26173403_26173403_1\">[...]</p>\n<p id=\"so_26173403_26173403_2\">\u2014 the function type to which a pointer to member refers </p>\n<p id=\"so_26173403_26173403_3\">[...]</p>\n</blockquote>\n<p>Could you get an example? I'm trying the following:</p>\n<pre><code>struct A\n{\n    int foo();\n};\n\nint A::* foo() &amp;; //ill-formed.\n\nstruct B\n{\n    int (*bar)() &amp;; //ill-formed\n};\n</code></pre>\n", "AcceptedAnswerId": "26173614", "Title": "Function type to which a pointer to member refers", "CreationDate": "2014-10-03T04:45:37.330", "Id": "26173403", "CommentCount": "0", "LastEditDate": "2014-10-03T05:17:26.050", "PostTypeId": "1", "OwnerDisplayName": "user2953119", "LastEditorUserId": "201725", "LastActivityDate": "2014-10-03T05:17:26.050", "Score": "2", "Tags": "<c++><pointers><reference>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_26173403_26173403_2": {"length": 5, "quality": 1.0, "section_id": 12}, "so_26173403_26173403_0": {"length": 9, "quality": 0.8181818181818182, "section_id": 3242}, "so_26173403_26173614_0": {"length": 5, "quality": 0.625, "section_id": 579}}, "n3337": {"so_26173403_26173403_2": {"length": 5, "quality": 1.0, "section_id": 9}, "so_26173403_26173614_0": {"length": 5, "quality": 0.625, "section_id": 569}}, "n4659": {"so_26173403_26173403_2": {"length": 5, "quality": 1.0, "section_id": 13}, "so_26173403_26173403_0": {"length": 9, "quality": 0.8181818181818182, "section_id": 3998}, "so_26173403_26173614_0": {"length": 5, "quality": 0.625, "section_id": 602}}}, "26173614": {"Id": "26173614", "PostTypeId": "2", "Body": "<p>I've tried to put it <a href=\"http://coliru.stacked-crooked.com/a/b79eaef7e68435af\" rel=\"nofollow\">through a compiler</a>.</p>\n<p>The former,</p>\n<pre><code>int A::* foo() &amp;;\n</code></pre>\n<p>is incorrect syntax. To create a pointer to member function, you still need to put in the parenthesis:</p>\n<pre><code>int (A::*foo)() &amp;;\n</code></pre>\n<p>and then it is accepted just fine.</p>\n<p>The other,</p>\n<pre><code>int (*bar)() &amp;;\n</code></pre>\n<p>is accepted by gcc, but my local <code>clang</code> rejects it with</p>\n<blockquote>\n<p id=\"so_26173403_26173614_0\">13 col 10 error: pointer to function type cannot have '&amp;' qualifier</p>\n</blockquote>\n<p>and rightfully so. It is a pointer to non-member function and there is nothing to qualify as reference. Gcc apparently just ignores the <code>&amp;</code> instead.</p>\n", "LastActivityDate": "2014-10-03T05:16:38.860", "CommentCount": "0", "CreationDate": "2014-10-03T05:16:38.860", "ParentId": "26173403", "Score": "1", "OwnerUserId": "201725"}});