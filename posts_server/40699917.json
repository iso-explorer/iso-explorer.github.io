post_cb({"40699917": {"CommentCount": "1", "ViewCount": "65", "ClosedDate": "2016-11-20T18:15:05.960", "CreationDate": "2016-11-20T01:59:41.487", "LastActivityDate": "2016-11-20T02:30:05.510", "Title": "The assignment operator in C++", "PostTypeId": "1", "Id": "40699917", "Score": "-1", "Body": "<ol>\n<li>The assignment operator in C++ ( x= 5, for instance) returns a value, besides copying that value to the variable. What is the value returned by (that is. what is the result of ) the assignment operator?</li>\n</ol>\n", "Tags": "<c++>", "OwnerUserId": "7184075", "AnswerCount": "2"}, "40699964": {"ParentId": "40699917", "LastEditDate": "2016-11-20T02:15:44.620", "CommentCount": "0", "CreationDate": "2016-11-20T02:10:18.263", "OwnerUserId": "2877241", "LastEditorUserId": "2877241", "PostTypeId": "2", "Id": "40699964", "Score": "0", "Body": "<p>According to the C++ Standard (5.18 Assignment and compound assignment operator)</p>\n<blockquote>\n<p id=\"so_40699917_40699964_0\">1 The assignment operator (=) and the compound assignment operators\n  all group right-to-left. All require a modi\ufb01able lvalue as their left\n  operand and <strong>return an lvalue referring to the left operand</strong></p>\n</blockquote>\n<p>and</p>\n<blockquote>\n<p id=\"so_40699917_40699964_1\">2 In simple assignment (=), the value of the expression replaces that\n  of the object referred to by the left operand.</p>\n</blockquote>\n<p>Thus if you the following code snippet</p>\n<pre><code>int x;\nx = 5;\n</code></pre>\n<p>then x get the value 5 and the assignment expression returns the <code>lvalue</code> of x. This allows to combine assignment operators for example the following way</p>\n<pre><code>( x = 5 ) += y;\n</code></pre>\n<p>because expression <code>x = 5</code> returns lvalue of <code>x</code>.</p>\n<p>In C this code will be invalid because in C the assignment expression returns <code>rvalue</code>.</p>\n", "LastActivityDate": "2016-11-20T02:15:44.620"}, "40699969": {"ParentId": "40699917", "LastEditDate": "2016-11-20T02:30:05.510", "CommentCount": "0", "CreationDate": "2016-11-20T02:11:19.660", "OwnerUserId": "464581", "LastEditorUserId": "464581", "PostTypeId": "2", "Id": "40699969", "Score": "1", "Body": "<p>In C++ the <em>built-in</em> copy assignment operator produces an lvalue expression, which can be assigned to. Effectively that is as if it were declared with a reference type result.</p>\n<p>A user-defined copy assignment operator, for a class type, can have any return type, including (which IMO would be ideal) <code>void</code>.</p>\n<p>However, if a class is to be used as item type of a standard container, then it's subject to the requirements of the standard library, and then the class' copy assignment operator must return a reference to the object assigned to.</p>\n<b>C++11 \u00a717.6.3.1/2 (utility.arg.requirements/2), tables 22 &amp; 23</b> (from N3290):\n\n<blockquote>\n<p id=\"so_40699917_40699969_0\"><strong>\u201d</strong> <a href=\"https://i.stack.imgur.com/kKXl6.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/kKXl6.png\"/></a></p>\n</blockquote>\n<hr>\n<p>In order to declare a copy assignment operator as deleted or defaulted, it must return a reference to the assigned object's type, e.g.</p>\n<pre><code>struct S\n{\n    auto operator=( S const&amp; ) -&gt; S&amp; = delete;\n};\n</code></pre>\n<hr>\n<p>A user-defined copy assignment operator can only be defined for a class type, not for an enum type, because it's required to be a non-static member function.</p>\n</hr></hr>", "LastActivityDate": "2016-11-20T02:30:05.510"}, "bq_ids": {"n4140": {"so_40699917_40699964_0": {"section_id": 6173, "quality": 0.9047619047619048, "length": 19}, "so_40699917_40699964_1": {"section_id": 6174, "quality": 1.0, "length": 9}}, "n3337": {"so_40699917_40699964_0": {"section_id": 5934, "quality": 0.9047619047619048, "length": 19}, "so_40699917_40699964_1": {"section_id": 5935, "quality": 1.0, "length": 9}}, "n4659": {"so_40699917_40699964_0": {"section_id": 7675, "quality": 0.9047619047619048, "length": 19}, "so_40699917_40699964_1": {"section_id": 7676, "quality": 1.0, "length": 9}}}});