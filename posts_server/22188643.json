post_cb({"bq_ids": {"n4140": {"so_22188643_22189404_1": {"length": 20, "quality": 0.6896551724137931, "section_id": 481}}, "n3337": {"so_22188643_22189404_1": {"length": 29, "quality": 1.0, "section_id": 472}}, "n4659": {"so_22188643_22189404_1": {"length": 16, "quality": 0.5517241379310345, "section_id": 504}}}, "22188643": {"ViewCount": "128", "Body": "<p>I've been educated from several sources that in C++11 the return value of a function can be move-constructed from a return statement consisting of a named local variable.  For example:</p>\n<pre><code>class A {};\n\nA f() {\n    A a;\n    return a;\n}\n\nint main() {\n    f();\n}\n</code></pre>\n<p>That is, in C++11, the prvalue temporary designated by the function call expression <code>f()</code> is move-constructed from the function's local variable <code>a</code>, instead of copy-constructed as in C++03.  Of course, this is all semantically speaking, before any level of optimization is taken, copy elision, NRVO, etc.</p>\n<p>My question is, the argument of <code>A</code>'s move constructor is of type <code>A&amp;&amp;</code>, which can only bind to a prvalue or xvalue, right?  So which specific rule of exception allow its binding to the lvalue <code>a</code> here?  Thanks.</p>\n", "AcceptedAnswerId": "22189404", "Title": "return statement binding rvalue reference to an lvalue?", "CreationDate": "2014-03-05T04:36:00.277", "Id": "22188643", "CommentCount": "2", "LastEditDate": "2014-03-05T05:26:14.220", "PostTypeId": "1", "LastEditorUserId": "3237645", "LastActivityDate": "2014-03-05T05:32:51.760", "Score": "1", "OwnerUserId": "3237645", "Tags": "<c++><c++11><language-lawyer>", "AnswerCount": "1"}, "22189404": {"Id": "22189404", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_22188643_22189404_0\">which specific rule of exception allow its binding to the lvalue a here?</p>\n</blockquote>\n<p>That's <code>12.8[class.copy]/32</code></p>\n<blockquote>\n<p id=\"so_22188643_22189404_1\">When the criteria for elision of a copy operation are met or would be met save for the fact that the source object is a function parameter, and the object to be copied is designated by an lvalue, overload resolution to select the constructor for the copy is first performed as if the object were designated by an rvalue.</p>\n</blockquote>\n", "LastActivityDate": "2014-03-05T05:32:51.760", "Score": "5", "CreationDate": "2014-03-05T05:32:51.760", "ParentId": "22188643", "CommentCount": "2", "OwnerUserId": "273767"}});