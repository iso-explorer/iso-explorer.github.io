post_cb({"bq_ids": {"n4140": {"so_23588574_23588653_0": {"length": 14, "quality": 0.8235294117647058, "section_id": 4641}, "so_23588574_23588574_1": {"length": 6, "quality": 0.6, "section_id": 4634}, "so_23588574_23588574_0": {"length": 36, "quality": 0.9, "section_id": 4638}}, "n3337": {"so_23588574_23588653_0": {"length": 14, "quality": 0.8235294117647058, "section_id": 4452}, "so_23588574_23588574_0": {"length": 33, "quality": 0.825, "section_id": 4449}}, "n4659": {"so_23588574_23588653_0": {"length": 13, "quality": 0.7647058823529411, "section_id": 6011}, "so_23588574_23588574_0": {"length": 26, "quality": 0.65, "section_id": 6004}}}, "23588653": {"Id": "23588653", "PostTypeId": "2", "Body": "<p>... are determined as specified below:</p>\n<blockquote>\n<p id=\"so_23588574_23588653_0\">The values of the bound arguments v1, v2, ..., vN and their\n  corresponding types V1, V2, ..., VN depend on the types TiD derived\n  from the call to bind and the cv -qualifiers cv of the call wrapper g\n  as follows: </p>\n<ul>\n<li>if TiD is reference_wrapper, the argument is tid.get() and its type Vi is T&amp;; </li>\n<li>if the value of is_bind_expression::value is true, the argument is\n    tid(std::forward(uj)...) and its type Vi is result_of::type; </li>\n<li>if the value j of is_placeholder::value is not zero, the argument is std::forward(uj) and its type Vi is Uj&amp;&amp;; </li>\n<li>otherwise, the value is tid and its type Vi is TiD cv &amp;.</li>\n</ul>\n</blockquote>\n<p>In other words:  </p>\n<ul>\n<li>If you bound a reference wrapper, it unwraps that and passes it into the wrapped function object</li>\n<li>If you bound another result of <code>std::bind</code>, or anything else which <code>std::is_bind_expression</code> evaluates as true, it passes all of the arguments from the call site to that and passes the result to the wrapped function object</li>\n<li>If you bound a placeholder object, then it passes in the appropriate call site argument</li>\n<li>Otherwise, it passes the bound argument</li>\n</ul>\n", "LastActivityDate": "2014-05-11T03:41:02.983", "CommentCount": "1", "CreationDate": "2014-05-11T03:41:02.983", "ParentId": "23588574", "Score": "2", "OwnerUserId": "862231"}, "23588574": {"ViewCount": "139", "Body": "<p>In the C++ standard (N3797) 20.9.9.1.3 has the following statements about <code>bind</code>.</p>\n<blockquote>\n<p id=\"so_23588574_23588574_0\">Returns: A forwarding call wrapper <code>g</code> with a nested type <code>result_type</code> defined as a synonym for <code>R</code>. The effect of <code>g(u1, u2, ..., uM)</code> shall be <code>INVOKE(fd, std::forward&lt;V1&gt;(v1), std::forward&lt;V2&gt;(v2), ..., std::forward&lt;VN&gt;(vN), R)</code>, where the values and types of the bound arguments <code>v1, v2, ..., vN</code> are determined as specified below. The copy constructor and move constructor of the forwarding call wrapper shall throw an exception if and only if the corresponding constructor of <code>FD</code> or of any of the types <code>TiD</code> throws an exception.</p>\n</blockquote>\n<p>But there's no mention of the unbound arguments <code>u1 u2 ... uM</code> in the call wrapper. Am I missing something? Shouldn't the statement in the middle read as follows?</p>\n<blockquote>\n<p id=\"so_23588574_23588574_1\">... The effect of <code>g(u1, u2, ..., uM)</code> shall be <code>INVOKE(fd, std::forward&lt;V1&gt;(v1), std::forward&lt;V2&gt;(v2), ..., std::forward&lt;VN&gt;(vN), std::forward&lt;U1&gt;(u1), ... std::forward&lt;UM&gt;(um), R)</code>, where ...</p>\n</blockquote>\n", "AcceptedAnswerId": "23588653", "Title": "C++ standard and bind function", "CreationDate": "2014-05-11T03:26:00.407", "Id": "23588574", "CommentCount": "4", "LastEditDate": "2014-05-11T22:44:22.520", "PostTypeId": "1", "LastEditorUserId": "1988435", "LastActivityDate": "2014-05-11T22:44:22.520", "Score": "2", "OwnerUserId": "1988435", "Tags": "<c++><c++11><standards>", "AnswerCount": "1"}});