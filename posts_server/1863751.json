post_cb({"1864037": {"ParentId": "1863751", "CommentCount": "0", "Body": "<p>You can also use templates like the following:</p>\n<pre><code>template &lt;typename T, std::size_t N&gt;\ninline std::size_t number_of_elements(T (&amp;ary)[N]) {\n    return N;\n}\n</code></pre>\n<p>This little trick will cause compile errors if the function is used on a non-array type.</p>\n", "OwnerUserId": "41747", "PostTypeId": "2", "Id": "1864037", "Score": "1", "CreationDate": "2009-12-08T01:35:07.323", "LastActivityDate": "2009-12-08T01:35:07.323"}, "1863765": {"ParentId": "1863751", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>Depending on your use case, you can work around that <a href=\"https://stackoverflow.com/questions/1745942/c-template-parameter-in-array-dimension/1745963#1745963\">using references</a>:</p>\n<pre><code>template&lt;typename T&gt;\nvoid f(const T&amp; x) {\n    std::cout &lt;&lt; sizeof(T);\n}\n\nchar a[27];\nf(a);\n</code></pre>\n<p>That prints <code>27</code>, as desired.</p>\n", "OwnerUserId": "168225", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T11:46:11.760", "Id": "1863765", "Score": "1", "CreationDate": "2009-12-08T00:13:39.500", "LastActivityDate": "2009-12-08T02:03:28.953"}, "33734010": {"ParentId": "1863751", "CommentCount": "0", "Body": "<p>The behaviour of this code is explained by C++14 [temp.deduct.call]:</p>\n<blockquote>\n<p id=\"so_1863751_33734010_0\"><strong>Deducing template arguments from a function call</strong></p>\n<p id=\"so_1863751_33734010_1\">Template argument deduction is done by comparing each function template parameter type (call it <code>P</code>) with the type of the corresponding argument of the call (call it <code>A</code>) as described below</p>\n</blockquote>\n<p>and then below:</p>\n<blockquote>\n<p id=\"so_1863751_33734010_2\">If <code>P</code> is not a reference type:</p>\n<ul>\n<li>If <code>A</code> is an array type, the pointer type produced by the array-to-pointer standard conversion (4.2) is used in place of <code>A</code> for type deduction;</li>\n</ul>\n</blockquote>\n<p>For the call <code>f(array);</code>, we have <code>A</code> = <code>int[27]</code>. <code>A</code> is an array type. So the deduced type <code>T</code> is <code>int *</code>, according to this last bullet point.</p>\n<p>We can see from the qualifier \"If <code>P</code> is not a reference type\" that this behaviour could perhaps be avoided by making <code>P</code> a reference type. For the code:</p>\n<pre><code>template&lt;typename T, size_t N&gt;\nvoid f(T (&amp;x)[N])\n</code></pre>\n<p>the symbol <code>P</code> means <code>T(&amp;)[N]</code>, which is a reference type; and it turns out that there are no conversions applied here. <code>T</code> is deduced to <code>int</code>, with the type of <code>x</code> being <code>int(&amp;)[N]</code>. </p>\n<hr>\n<p>Note that this only applies to function templates where the type is deduced from the argument. The behaviour is covered by separate parts of the specification for explicitly-provided function template parameters, and class templates.</p>\n</hr>", "OwnerUserId": "1505939", "PostTypeId": "2", "Id": "33734010", "Score": "2", "CreationDate": "2015-11-16T11:13:35.633", "LastActivityDate": "2015-11-16T11:13:35.633"}, "1863767": {"ParentId": "1863751", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>Use the reference type for the parameter</p>\n<pre><code>template&lt;typename T&gt; void f(const T&amp; x) \n{\n  std::cout &lt;&lt; sizeof(T);\n}\n</code></pre>\n<p>in which case the array type will not decay. </p>\n<p>Similarly, you can also prevent decay in your original version of <code>f</code> if you explicitly specify the template agument <code>T</code> as a reference-to-array type</p>\n<pre><code>f&lt;int (&amp;)[27]&gt;(array);\n</code></pre>\n<p>In your original code sample, forcing the argument <code>T</code> to have the array type (i.e. non-reference array type, by using <code>typeof</code> or by specifying the type explicitly), will not prevent array type decay. While <code>T</code> itself will stand for array type (as you observed), the parameter <code>x</code> will still be declared as a pointer and <code>sizeof x</code> will still evaluate to pointer size.</p>\n", "OwnerUserId": "187690", "LastEditorUserId": "187690", "LastEditDate": "2009-12-08T00:20:16.367", "Id": "1863767", "Score": "9", "CreationDate": "2009-12-08T00:14:09.143", "LastActivityDate": "2009-12-08T00:20:16.367"}, "1863751": {"CommentCount": "4", "AcceptedAnswerId": "1863767", "PostTypeId": "1", "LastEditorUserId": "1505939", "CreationDate": "2009-12-08T00:08:01.183", "LastActivityDate": "2015-11-16T11:13:35.633", "LastEditDate": "2015-11-16T10:54:42.623", "ViewCount": "1626", "FavoriteCount": "4", "Title": "Array decay to pointers in templates", "Id": "1863751", "Score": "6", "Body": "<p>Please consider this code:</p>\n<pre><code>#include &lt;iostream&gt;\n\ntemplate&lt;typename T&gt;\nvoid f(T x) {\n    std::cout &lt;&lt; sizeof(T) &lt;&lt; '\\n';\n}\n\nint main()\n{\n    int array[27];\n    f(array);\n    f&lt;decltype(array)&gt;(array);\n}\n</code></pre>\n<p><em>Editor's Note:</em> the original code used <code>typeof(array)</code>, however that is a GCC extension. </p>\n<p>This will print</p>\n<pre><code>8 (or 4)\n108\n</code></pre>\n<p>In the first case, the array obviously decays to a pointer and T becomes <code>int*</code>. In the second case, T is forced to <code>int[27]</code>.\nIs the order of decay/substitution implementation defined? Is there a more elegant way to force the type to <code>int[27]</code>? Besides using std::vector?</p>\n", "Tags": "<c++><templates>", "OwnerUserId": "154980", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_1863751_33734010_1": {"section_id": 302, "quality": 1.0, "length": 18}, "so_1863751_33734010_0": {"section_id": 282, "quality": 0.8, "length": 4}}, "n3337": {"so_1863751_33734010_1": {"section_id": 293, "quality": 1.0, "length": 18}, "so_1863751_33734010_0": {"section_id": 273, "quality": 0.8, "length": 4}}, "n4659": {"so_1863751_33734010_1": {"section_id": 309, "quality": 1.0, "length": 18}, "so_1863751_33734010_0": {"section_id": 289, "quality": 0.8, "length": 4}}}});