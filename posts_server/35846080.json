post_cb({"bq_ids": {"n4140": {"so_35846080_35846423_1": {"length": 27, "quality": 1.0, "section_id": 7064}}, "n3337": {"so_35846080_35846423_1": {"length": 27, "quality": 1.0, "section_id": 6808}}, "n4659": {"so_35846080_35846423_1": {"length": 26, "quality": 0.9629629629629629, "section_id": 8561}}}, "35846080": {"ViewCount": "113", "Body": "<p>What does variable defintion do if I use it as the control structure of the <code>if</code>,<code>while</code>,<code>for</code> statements?</p>\n<p>Consider these two fragments of code from <a href=\"http://rads.stackoverflow.com/amzn/click/0321714113\" rel=\"nofollow\">C++ Primer(5th Edition)</a>:</p>\n<pre><code>    while (int i = get_num())  //i is created and initialized on each iteration\n    cout &lt;&lt; i &lt;&lt; endl;\n</code></pre>\n<p>and</p>\n<pre><code>    while(bool status = find(word)) {/*...*/}  //assume that find(word) returns a bool type\n</code></pre>\n<p>I do not know whether variable definition \"returns\" a <code>bool</code> type to indicate the success of the definition,or variable definition returns the variable itself when used as the condition of control structure.\nAnd I think the second fragment works fine,for <code>status</code> is the result of the \n<code>=</code> operator.The condition tests whether <code>status</code> is <code>true</code>.\nA friend of mine says the second fragment is in error,for the variable <code>status</code> is undeclared.</p>\n", "AcceptedAnswerId": "35846423", "Title": "What does variable definition do in control structure in c++?", "CreationDate": "2016-03-07T14:20:06.457", "Id": "35846080", "CommentCount": "5", "PostTypeId": "1", "LastActivityDate": "2016-03-07T14:36:43.517", "Score": "1", "OwnerUserId": "5402133", "Tags": "<c++>", "AnswerCount": "2"}, "35846231": {"Id": "35846231", "PostTypeId": "2", "Body": "<p>The statements are both fine.</p>\n<p>In the first case get_num() returns a value that is assigned to the newly declared variable i. ints are evaluated as true if they are not zero and evaluated as false if they are zero. So, this loop will run as long as i is not zero.</p>\n<p>In the second statement find seems to return a bool which is assigned to status. As long as status is true, the loop will run.</p>\n<p>Within the brackets of while the corresponding variable can be used, i.e. you can use i in the first loop and status in the second one, which really is the advantage of writing in like that. However, it does not really make sense in the second code snippet because you already know that status is true... otherwise the loop would just not be executed anymore. And if you change status here this does not work, either, because there will be a new locally declared status variable for each loop run.</p>\n", "LastActivityDate": "2016-03-07T14:27:58.260", "CommentCount": "1", "CreationDate": "2016-03-07T14:27:58.260", "ParentId": "35846080", "Score": "0", "OwnerUserId": "2573127"}, "35846423": {"Id": "35846423", "PostTypeId": "2", "Body": "<p>While loops expect a <code>bool</code> expression.</p>\n<pre><code>while({BOOL}) {...}\n</code></pre>\n<p>In the case of the code above</p>\n<pre><code>while(bool status = find(word)) {...}\n</code></pre>\n<p>simplifies down to </p>\n<pre><code>while(status) {...}\n</code></pre>\n<p>Status is initialized to the result of <code>find(word)</code> at the start of each execution of the loop.</p>\n<p><code>status</code> is then available within the loop.</p>\n<blockquote>\n<p id=\"so_35846080_35846423_0\">\u00a7 3.3.3 Block Scope</p>\n<p id=\"so_35846080_35846423_1\">Names declared in the for-init-statement, the for-range-declaration, and in the condition of if, while, for,\n  and switch statements are local to the if, while, for, or switch statement (including the controlled\n  statement), and shall not be redeclared in a subsequent condition of that statement nor in the outermost\n  block (or, for the if statement, any of the outermost blocks) of the controlled statement;</p>\n</blockquote>\n<p>Regarding your second question:</p>\n<blockquote>\n<p id=\"so_35846080_35846423_2\">do not know whether variable definition \"returns\" a bool type to indicate the success of the definition,or variable definition returns the variable itself when used as the condition of control structure.</p>\n</blockquote>\n<p>As long as the variable is convertible to bool, there is no issue.</p>\n<p>Given</p>\n<pre><code>while(Foo x = Expression()) {...}\n</code></pre>\n<p>can be expressed as </p>\n<pre><code>while(static_cast&lt;bool&gt;(x)) {...}\n</code></pre>\n<p>as long as <code>Foo</code> is convertible to bool, it can be declared and used in the <code>while</code> conditional.</p>\n", "LastActivityDate": "2016-03-07T14:36:43.517", "CommentCount": "0", "CreationDate": "2016-03-07T14:36:43.517", "ParentId": "35846080", "Score": "2", "OwnerUserId": "1020484"}});