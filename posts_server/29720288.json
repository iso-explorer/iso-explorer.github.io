post_cb({"29720411": {"ParentId": "29720288", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The <a href=\"https://isocpp.org/std/the-standard\" rel=\"nofollow\">C++ standard</a> makes no mention of the term <code>method</code>. It should be noted that the <a href=\"https://isocpp.org/wiki/faq/strange-inheritance\" rel=\"nofollow\">official C++ FAQ</a> <em>does</em> make use of this term, but to describe a <code>virtual</code> function; a <a href=\"https://www.google.gg/?gws_rd=ssl#q=site:https:%2F%2Fisocpp.org%20%27method%27\" rel=\"nofollow\">simple Google search</a> reveals more occurrences of this term.</p>\n<p>I've never seen the term <code>method</code> in an IDE (Visual Studio), but I've seen the term <code>member function</code>. In my opinion <code>method</code> is a 'one size fits all' term.</p>\n", "OwnerUserId": "2422013", "LastEditorUserId": "2422013", "LastEditDate": "2015-04-18T17:28:11.687", "Id": "29720411", "Score": "1", "CreationDate": "2015-04-18T17:17:53.013", "LastActivityDate": "2015-04-18T17:28:11.687"}, "29720288": {"CommentCount": "1", "AcceptedAnswerId": "29720461", "PostTypeId": "1", "LastEditorUserId": "492336", "CreationDate": "2015-04-18T17:05:15.267", "LastActivityDate": "2015-09-29T14:13:17.853", "LastEditDate": "2015-04-18T17:15:25.710", "ViewCount": "653", "FavoriteCount": "4", "Title": "Is the term \"method\" defined by the C++ Standard?", "Id": "29720288", "Score": "17", "Body": "<p>The term \"method\" is often used to discuss C++ code. Does the standalone term have a well-defined meaning in C++ or is it ambiguous? Is it acceptable to use the term by itself, or should it be qualified (e.g. a \"class method\" or \"virtual method\"), or should it be simply avoided altogether?</p>\n", "Tags": "<c++><terminology><language-lawyer>", "OwnerUserId": "2069064", "AnswerCount": "5"}, "bq_ids": {"n4140": {"so_29720288_29720461_6": {"section_id": 2436, "quality": 1.0, "length": 12}, "so_29720288_29720461_3": {"section_id": 6191, "quality": 0.6666666666666666, "length": 6}, "so_29720288_29720461_1": {"section_id": 7222, "quality": 0.8571428571428571, "length": 6}, "so_29720288_29720461_2": {"section_id": 506, "quality": 0.8947368421052632, "length": 17}, "so_29720288_29720461_4": {"section_id": 6549, "quality": 0.875, "length": 14}, "so_29720288_29720461_5": {"section_id": 869, "quality": 1.0, "length": 17}}, "n3337": {"so_29720288_29720461_4": {"section_id": 6304, "quality": 0.875, "length": 14}, "so_29720288_29720461_6": {"section_id": 2421, "quality": 1.0, "length": 12}, "so_29720288_29720461_3": {"section_id": 5951, "quality": 0.6666666666666666, "length": 6}, "so_29720288_29720461_1": {"section_id": 6966, "quality": 0.8571428571428571, "length": 6}, "so_29720288_29720461_2": {"section_id": 497, "quality": 0.8947368421052632, "length": 17}}, "n4659": {"so_29720288_29720461_4": {"section_id": 8031, "quality": 0.875, "length": 14}, "so_29720288_29720461_6": {"section_id": 2712, "quality": 0.9166666666666666, "length": 11}, "so_29720288_29720461_3": {"section_id": 7694, "quality": 0.6666666666666666, "length": 6}, "so_29720288_29720461_1": {"section_id": 8731, "quality": 0.8571428571428571, "length": 6}, "so_29720288_29720461_2": {"section_id": 527, "quality": 0.8947368421052632, "length": 17}}}, "29720543": {"ParentId": "29720288", "PostTypeId": "2", "CommentCount": "6", "Body": "<p>The term method had been historically used as a synonym of the procedure of an object. Considering, an object has both data and behaviour, it is this behaviour which was referred as method. \nTracing backward, I could find a reference to the usage of the term method when referring to an MIT ALGOL version, AED-0</p>\n<p><a href=\"http://en.wikipedia.org/wiki/Object-oriented_programming#History\" rel=\"nofollow\">Quoting wikipedia</a></p>\n<blockquote>\n<p id=\"so_29720288_29720543_0\">MIT ALGOL version, AED-0, linked data structures (\"plexes\", in that\n  dialect) directly with procedures, prefiguring what were later termed\n  \"messages\", \"methods\", and \"member functions\".</p>\n</blockquote>\n<p>Over the years method had been an integral part of Object Oriented Analysis and Design and Object-oriented programming. Now C++ evolved as a procedural language where it extended C a procedural language to have object oriented capabilities. C had the concept of structure, and the data elements were called members. Refer <a href=\"http://en.wikipedia.org/wiki/Method_(computer_programming)#Methods_in_C.2B.2B\" rel=\"nofollow\">Methods in C++</a>.\nTo not break the lineage, C++ continued to call the elements of structured and the newer genre class as members. </p>\n<p>Now, to differentiate between data and functions, instead of introducing a new terminology, it extended this terminology to call data members and member functions. Member functions which supported dynamic binding were called virtual functions.</p>\n<p>So, strictly speaking, official references refrains from using the terminology methods when referring to member functions. The terminology is most prevalent among the people who have a more Object Oriented background. So if you want to remain unambiguous, it is best to use the terminology as</p>\n<ul>\n<li>data member</li>\n<li>member function</li>\n<li>virtual functions</li>\n</ul>\n", "OwnerUserId": "977038", "LastEditorUserId": "977038", "LastEditDate": "2015-04-18T17:33:46.253", "Id": "29720543", "Score": "1", "CreationDate": "2015-04-18T17:30:41.123", "LastActivityDate": "2015-04-18T17:33:46.253"}, "29720356": {"ParentId": "29720288", "CommentCount": "8", "Body": "<p>The term <strong><em>method</em></strong> is not defined in the C++ standard.  The terminology uses <strong><em>member function</em></strong> instead.</p>\n<p>Bjarne Stroustrup however defines the term <em>method</em> in his own <a href=\"http://www.stroustrup.com/glossary.html\">glossary</a> as <em>virtual member function</em>. So this shows evidence that the term is acceptable.   </p>\n", "OwnerUserId": "3723423", "PostTypeId": "2", "Id": "29720356", "Score": "14", "CreationDate": "2015-04-18T17:12:55.703", "LastActivityDate": "2015-04-18T17:12:55.703"}, "32570389": {"ParentId": "29720288", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Here my analysis regarding the word <strong><em>method</em></strong>. </p>\n<p>I did a scan on official documentation (standards, specifications, etc.) on several programming languages.</p>\n<p><a href=\"http://componentsprogramming.com/using-the-right-terms-method/\" rel=\"nofollow\">http://componentsprogramming.com/using-the-right-terms-method/</a></p>\n<p>Adequate taxonomy (not dependent on any programming languages) will be published in a future article.</p>\n<p>Regarding to C++, the correct terminology is: <em>member/non-member function</em>.\nSome people use member/free functions.</p>\n", "OwnerUserId": "1006264", "LastEditorUserId": "1006264", "LastEditDate": "2015-09-29T14:13:17.853", "Id": "32570389", "Score": "1", "CreationDate": "2015-09-14T17:22:21.957", "LastActivityDate": "2015-09-29T14:13:17.853"}, "29720461": {"ParentId": "29720288", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>I would avoid this term entirely, as it is clear what you mean by \"member function\", but not \"method\" - that you asked this question is proof enough.</p>\n<p>However, normative appearances of the word \"method\" in the C++14 standard are</p>\n<ul>\n<li><p>In the content list:</p>\n<blockquote>\n<p id=\"so_29720288_29720461_0\">17.5 <strong>Method of description</strong> (Informative)</p>\n</blockquote>\n<p>This is repeated in the title of that section.</p></li>\n<li><p>[basic.compound]:</p>\n<blockquote>\n<p id=\"so_29720288_29720461_1\"><strong>These methods</strong> of constructing types can be applied recursively;</p>\n</blockquote></li>\n<li><p>[cpp.include]</p>\n<blockquote>\n<p id=\"so_29720288_29720461_2\"><strong>The method</strong> by which a sequence\n  of preprocessing tokens between a <code>&lt;</code> and a <code>&gt;</code> preprocessing token pair or a pair of <code>\"</code> characters is combined\n  into a single header name preprocessing token is implementation-defined.</p>\n</blockquote></li>\n<li><p>[library.general]</p>\n<blockquote>\n<p id=\"so_29720288_29720461_3\">The following subclauses describe the definitions (17.3), <strong>method of description (17.5)</strong>, [..]</p>\n</blockquote></li>\n<li><p>In table 32, <code>FLT_EVAL_METHOD</code> is mentioned. </p></li>\n<li><p>In stage 2 of <code>num_get</code>'s <code>do_get</code>:</p>\n<blockquote>\n<p id=\"so_29720288_29720461_4\">For arithmetic types, <code>punct.thousands_sep()</code> characters are inserted\n  into the sequence as determined by the value returned by\n  <code>punct.do_grouping()</code> using <strong>the method</strong> described in 22.4.3.1.2</p>\n</blockquote></li>\n<li><p>[forwardlist.modifiers]:</p>\n<blockquote>\n<p id=\"so_29720288_29720461_5\">Otherwise, inserts <code>sz - distance(begin(), end())</code> elements at the end of\n  the list such that each new element, <code>e</code>, is initialized by <strong>a method</strong> equivalent to calling <code>allocator_traits&lt;allocator_type&gt;::construct(get_allocator(), std::addressof(e), c)</code>.</p>\n</blockquote></li>\n<li><p>[filebuf.virtuals]:</p>\n<blockquote>\n<p id=\"so_29720288_29720461_6\">Behaves according to the description of\n  <code>basic_streambuf&lt;charT,traits&gt;::uflow()</code>, with the specialization that a\n  sequence of characters is read from the input with <strong>the same method</strong> as\n  used by <code>underflow</code>.</p>\n</blockquote></li>\n</ul>\n<p>The term is clearly never referring to a \"member function\". </p>\n", "OwnerUserId": "3647361", "LastEditorUserId": "3647361", "LastEditDate": "2015-05-13T16:18:55.230", "Id": "29720461", "Score": "5", "CreationDate": "2015-04-18T17:22:42.710", "LastActivityDate": "2015-05-13T16:18:55.230"}});