post_cb({"30739478": {"ParentId": "30726423", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Yes, but please <em>don't</em>. Just as English and German have conventional word orders for adjectives and adverbs (e.g. time - manner - place), so do C and C++. Varying from the conventional order won't confuse the compiler, but it will confuse your fellow developers. I would suggest that the conventional order is roughly along the lines of</p>\n<ol>\n<li><code>static</code>/<code>extern</code> (linkage)</li>\n<li><code>const</code>/<code>volatile</code> (modification)</li>\n<li><code>signed</code>/<code>unsigned</code> (signedness)</li>\n<li><code>short</code>/<code>long</code> (length)</li>\n<li>Basic type (head noun)</li>\n</ol>\n<p>although there's certainly some wiggle room.</p>\n", "OwnerUserId": "152948", "LastEditorUserId": "152948", "LastEditDate": "2015-06-10T01:00:18.967", "Id": "30739478", "Score": "40", "CreationDate": "2015-06-09T17:59:15.487", "LastActivityDate": "2015-06-10T01:00:18.967"}, "30726614": {"ParentId": "30726423", "PostTypeId": "2", "CommentCount": "1", "Body": "<blockquote>\n<p id=\"so_30726423_30726614_0\">Is the type identical...</p>\n</blockquote>\n<p>Yes.</p>\n<p>C++11 \u00a77.1.6.2/3</p>\n<blockquote>\n<p id=\"so_30726423_30726614_1\"><strong>\u201d</strong> When multiple <em>simple-type-specifier</em>s are allowed, they can be freely intermixed with other <em>decl-specifiers</em> in\n  any order.</p>\n</blockquote>\n", "OwnerUserId": "464581", "LastEditorUserId": "16287", "LastEditDate": "2015-06-10T15:32:53.463", "Id": "30726614", "Score": "106", "CreationDate": "2015-06-09T08:20:32.167", "LastActivityDate": "2015-06-10T15:32:53.463"}, "30726423": {"CommentCount": "6", "ViewCount": "8795", "PostTypeId": "1", "LastEditorUserId": "1698143", "CreationDate": "2015-06-09T08:11:11.157", "LastActivityDate": "2016-06-24T11:09:36.710", "Title": "Is \"long long\" = \"long long int\" = \"long int long\" = \"int long long\"?", "FavoriteCount": "19", "LastEditDate": "2016-06-24T11:09:36.710", "Id": "30726423", "Score": "144", "Body": "<p>I found both <code>long int long</code> and <code>int long long</code> can compile for a variable type. Is there any difference between <code>long int long</code>, <code>int long long</code> , <code>long long</code> and <code>long long int</code>?</p>\n<p>In general, is the type identical if it has the same number of <code>long</code>?</p>\n<p><strong>1 long:</strong></p>\n<pre><code>long l;\nint long il;\nlong int li;\n</code></pre>\n<p><strong>2 long:</strong></p>\n<pre><code>long long ll;\nint long long ill;\nlong int long lil;\nlong long int lli;\n</code></pre>\n<p>Also if above is right, are the following declarations also identical?</p>\n<pre><code>long long* llp;\nint long long* illp;\nlong int long* lilp;\nlong long int* llip;\n</code></pre>\n", "Tags": "<c++><syntax><long-integer>", "OwnerUserId": "4822120", "AnswerCount": "4"}, "30729298": {"ParentId": "30726423", "PostTypeId": "2", "CommentCount": "4", "Body": "<blockquote>\n<p id=\"so_30726423_30729298_0\">Is \u201clong long\u201d = \u201clong long int\u201d = \u201clong int long\u201d = \u201cint long long\u201d?  </p>\n</blockquote>\n<p>All other answers here talked about the second part of your question. For the first part: <em>Is \u201clong long\u201d = \u201clong long int\u201d ?</em>, answer is <strong>yes</strong>.     </p>\n<h3>C++11 7.1.6.2 Simple type specifiers (table 10)</h3>\n<pre><code>Specifier(s)            Type\n...                     ...\nlong long int           \u201clong long int\u201d\nlong long               \u201clong long int\u201d\nlong int                \u201clong int\u201d\nlong                    \u201clong int\u201d  \n...                     ...  \n</code></pre>\n<p>For the second part of your question: <em>Is \u201clong int long\u201d = \u201cint long long\u201d?</em>, answer is yes again.  </p>\n<p>The type-specifiers <strong>may occur in any order and can be intermixed</strong> with the other declaration specifiers. Therefore, all of the following  </p>\n<pre><code>long long  \nlong long int  \nlong int long  \nint long long  \n</code></pre>\n<p>are valid and equivalent.</p>\n", "OwnerUserId": "2455888", "LastEditorUserId": "2455888", "LastEditDate": "2015-06-10T14:54:51.003", "Id": "30729298", "Score": "27", "CreationDate": "2015-06-09T10:21:18.140", "LastActivityDate": "2015-06-10T14:54:51.003"}, "bq_ids": {"n4140": {"so_30726423_30729298_0": {"section_id": 5341, "quality": 1.0, "length": 11}, "so_30726423_30726896_0": {"section_id": 5439, "quality": 1.0, "length": 11}, "so_30726423_30726614_1": {"section_id": 5439, "quality": 1.0, "length": 11}}, "n3337": {"so_30726423_30729298_0": {"section_id": 5138, "quality": 1.0, "length": 11}, "so_30726423_30726896_0": {"section_id": 5234, "quality": 1.0, "length": 11}, "so_30726423_30726614_1": {"section_id": 5234, "quality": 1.0, "length": 11}}, "n4659": {"so_30726423_30729298_0": {"section_id": 6762, "quality": 1.0, "length": 11}, "so_30726423_30726896_0": {"section_id": 6866, "quality": 1.0, "length": 11}, "so_30726423_30726614_1": {"section_id": 6866, "quality": 1.0, "length": 11}}}, "30726896": {"ParentId": "30726423", "PostTypeId": "2", "CommentCount": "17", "Body": "<p>According to the C++ Standard (7.1.6.2 Simple type specifiers)</p>\n<blockquote>\n<p id=\"so_30726423_30726896_0\">3 When multiple simple-type-specifiers are allowed, they can be freely\n  intermixed with other decl-specifiers in any order.</p>\n</blockquote>\n<p>So for example the following declaration is valid</p>\n<pre><code>long static long const int x = 10;\n</code></pre>\n<p>You may even use <code>constexpr</code> specifier along with <code>const</code> qualifier. For example</p>\n<pre><code>constexpr long static long const int x = 10;\n</code></pre>\n<p>By the way, we forgot about specifier <code>signed</code>! Let's add it for example before declarator <code>x</code></p>\n<pre><code>constexpr long static long const int signed x = 10;\n</code></pre>\n<p>In C you may also use several type qualifiers in the same declare specifier sequence. According to the C Standard (6.7.3 Type qualifiers)</p>\n<blockquote>\n<p id=\"so_30726423_30726896_1\">5 If the same qualifier appears more than once in the same\n  specifier-qualifier-list, either directly or via one or more typedefs,\n  the behavior is the same as if it appeared only once....</p>\n</blockquote>\n<p>So for example in C the following declaration is also valid</p>\n<pre><code>const long const long static const int const signed x = 10;\n</code></pre>\n<p>So if you are paid according to the number of symbols typed in the program then I advise you to use such declarations. :)</p>\n", "OwnerUserId": "2877241", "LastEditorUserId": "119775", "LastEditDate": "2015-06-11T07:56:25.130", "Id": "30726896", "Score": "127", "CreationDate": "2015-06-09T08:34:32.213", "LastActivityDate": "2015-06-11T07:56:25.130"}});