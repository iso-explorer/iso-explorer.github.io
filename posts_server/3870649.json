post_cb({"bq_ids": {"n4140": {"so_3870649_3870711_3": {"length": 15, "quality": 0.8333333333333334, "section_id": 382}, "so_3870649_3870711_2": {"length": 31, "quality": 0.9117647058823529, "section_id": 380}, "so_3870649_3870711_0": {"length": 16, "quality": 0.8, "section_id": 374}}, "n3337": {"so_3870649_3870711_3": {"length": 15, "quality": 0.8333333333333334, "section_id": 373}, "so_3870649_3870711_2": {"length": 31, "quality": 0.9117647058823529, "section_id": 371}, "so_3870649_3870711_0": {"length": 16, "quality": 0.8, "section_id": 365}}, "n4659": {"so_3870649_3870711_3": {"length": 15, "quality": 0.8333333333333334, "section_id": 397}, "so_3870649_3870711_2": {"length": 31, "quality": 0.9117647058823529, "section_id": 395}, "so_3870649_3870711_0": {"length": 16, "quality": 0.8, "section_id": 388}}}, "3870670": {"Id": "3870670", "PostTypeId": "2", "Body": "<p>You're returning a reference, not an actual object - note the <code>&amp;</code> here:</p>\n<pre><code>SparseMatrix&amp; SparseMatrix::transpose()const{\n</code></pre>\n<p>If you want to return the actual object, remove that <code>&amp;</code>.</p>\n<p>The last line does indeed call the constructor, but it doesn't return the resulting object.  That object immediately gets destroyed, and an invalid reference to it gets returned.</p>\n", "LastActivityDate": "2010-10-06T08:26:27.560", "CommentCount": "2", "CreationDate": "2010-10-06T08:26:27.560", "ParentId": "3870649", "Score": "12", "OwnerUserId": "21886"}, "3870649": {"ViewCount": "25168", "Body": "<blockquote>\n<p id=\"so_3870649_3870649_0\"><strong>Possible Duplicate:</strong><br>\n<a href=\"https://stackoverflow.com/questions/2862494/c-warning-address-of-local-variable\">c++ warning: address of local variable</a> </br></p>\n</blockquote>\n<p>Hi,\nWhen i write this code:</p>\n<pre><code>//Returns the transpose matrix of this one\nSparseMatrix&amp; SparseMatrix::transpose()const{\n    vector&lt;Element&gt; result;\n    size_t i;\n    for(i=0;i&lt;_matrix.size();++i){\n        result.push_back(Element(_matrix.at(i)._col, _matrix.at(i)._row, _matrix.at(i)._val));\n    }\n\n    return SparseMatrix(numCol,numRow,result);\n}\n</code></pre>\n<p>I get the warning \"returning address or local variable or temporary\". The last line calls the SparseMatrix constructor. I don't understand what's wrong with this code, and how can i fix it so i can return a SparseMatrix object as i want.</p>\n", "Title": "returning address or local variable or temporary C++ warning", "CreationDate": "2010-10-06T08:24:00.580", "Id": "3870649", "CommentCount": "0", "LastEditDate": "2017-05-23T12:25:39.707", "PostTypeId": "1", "LastEditorUserId": "-1", "LastActivityDate": "2010-10-06T08:51:25.050", "Tags": "<c++><warnings>", "Score": "10", "OwnerUserId": "464778", "ClosedDate": "2010-10-10T01:22:19.807", "AnswerCount": "3"}, "3870703": {"Id": "3870703", "PostTypeId": "2", "Body": "<p>In C++, local variables are 'automatically' destructed when going out of scope.  Your <code>return</code> statement will create a nameless, temporary variable of type <code>SparseMatrix</code> that will immediately go out of scope.  Hence, returning a reference to it doesn't make sense.</p>\n<p>It may be easier to return by value: then a copy of the temporary will be returned.  The compiler can optimize that away (copy elision).</p>\n<p>If you really want to pass an object out of a function, you should create it on the heap, using <code>new</code>:</p>\n<pre><code>SparseMatrix* SparseMartix::transopse()const{\n\n\n     //...\n     return new SparseMatrix(...);\n\n}\n</code></pre>\n<p>But then, you need to take care of the lifetime of the returned object yourself.</p>\n", "LastActivityDate": "2010-10-06T08:30:30.373", "CommentCount": "0", "CreationDate": "2010-10-06T08:30:30.373", "ParentId": "3870649", "Score": "10", "OwnerUserId": "6610"}, "3870711": {"Id": "3870711", "PostTypeId": "2", "Body": "<p>The construct 'T()' creates a temporary of type 'T' which is basically not an Lvalue (but an Rvalue).</p>\n<blockquote>\n<p id=\"so_3870649_3870711_0\">$12.1/11 - \"A functional notation type\n  conversion (5.2.3) can be used to\n  create new objects of its type. [\n  Note: The syntax looks like an\n  explicit call of the constructor.</p>\n<p id=\"so_3870649_3870711_1\">12 An object created in this way is unnamed. [ Note: 12.2 describes the lifetime of &gt;temporary objects. \u2014end\n  note ] [ Note: explicit constructor calls do not yield lvalues, see 3.10. \u2014end note ]\n  The lifetime of this temporary is the end of the full expression i.e. the ending semicolon after the expression.</p>\n<p id=\"so_3870649_3870711_2\">$12.2/3 - \"Temporary objects are\n  destroyed as the last step in\n  evaluating the full-expression (1.9)\n  that (lexically) contains the point\n  where they were created. This is true\n  even if that evaluation ends in\n  throwing an exception. The value\n  computations and side effects of\n  destroying a temporary object are\n  associated only with the\n  full-expression, not with any specific\n  subexpression.\"</p>\n<p id=\"so_3870649_3870711_3\">$12.2/5- 'The lifetime of a temporary\n  bound to the returned value in a\n  function return statement (6.6.3) is\n  not extended; the temporary is\n  destroyed at the end of the\n  full-expression in the return\n  statement.\"</p>\n</blockquote>\n<p>Therefore your function tries to return a reference to a memory location whose storage duration is already over and the object has been destroyed.</p>\n<p>Therefore a warning. Note that this situation is not required to be explicitly diagnosed by the Standard and hence a warning.</p>\n", "LastEditorUserId": "418110", "LastActivityDate": "2010-10-06T08:48:32.090", "Score": "0", "CreationDate": "2010-10-06T08:31:36.217", "ParentId": "3870649", "CommentCount": "0", "OwnerUserId": "418110", "LastEditDate": "2010-10-06T08:48:32.090"}});