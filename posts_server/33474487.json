post_cb({"33474550": {"Id": "33474550", "PostTypeId": "2", "Body": "<p>See this standard reference (bold emphasis mine):</p>\n<p><strong>C++11 \u00a74.12 Boolean conversions</strong></p>\n<blockquote>\n<p id=\"so_33474487_33474550_0\">A prvalue of arithmetic, unscoped enumeration, pointer, or pointer to\n  member type can be converted to a prvalue of type bool. <strong>A zero value,\n  null pointer value, or null member pointer value is converted to\n  false; any other value is converted to true.</strong> A prvalue of type\n  std::nullptr_t can be converted to a prvalue of type bool; the\n  resulting value is false.</p>\n</blockquote>\n<p>The middle sentence is relevant: it is telling you that the null pointer value (<code>foo = nullptr</code>) <em>can</em> be implicitly cast to <code>false</code> which itself has type <code>bool</code>. Therefore <code>if (!foo)</code> is well-defined.</p>\n", "LastEditorUserId": "2380830", "LastActivityDate": "2015-11-02T09:51:01.453", "Score": "15", "CreationDate": "2015-11-02T09:35:50.993", "ParentId": "33474487", "CommentCount": "0", "OwnerUserId": "2380830", "LastEditDate": "2015-11-02T09:51:01.453"}, "33474578": {"Id": "33474578", "PostTypeId": "2", "Body": "<pre><code>if (!foo)\n</code></pre>\n<p>This works fine.</p>\n<pre><code>if (foo == nullptr)\n</code></pre>\n<p>This would look more clear to someone reading your code.</p>\n", "LastActivityDate": "2015-11-02T09:37:27.303", "CommentCount": "1", "CreationDate": "2015-11-02T09:37:27.303", "ParentId": "33474487", "Score": "-1", "OwnerUserId": "4411577"}, "33474487": {"ViewCount": "418", "Body": "<p>Suppose I have <code>Foo* foo = nullptr;</code></p>\n<p>If I'm checking whether or not <code>foo</code> is <code>nullptr</code>, am I permitted to write</p>\n<pre><code>if (!foo)\n</code></pre>\n<p>or should I write</p>\n<pre><code>if (foo == nullptr)\n</code></pre>\n", "AcceptedAnswerId": "33474550", "Title": "Implicit cast of null pointer to bool", "CreationDate": "2015-11-02T09:31:58.047", "Id": "33474487", "CommentCount": "1", "LastEditDate": "2015-11-02T09:41:51.547", "PostTypeId": "1", "OwnerDisplayName": "user5363114", "LastEditorUserId": "2380830", "LastActivityDate": "2015-11-02T09:51:01.453", "Score": "8", "Tags": "<c++>", "AnswerCount": "3"}, "33474557": {"Id": "33474557", "PostTypeId": "2", "Body": "<p>In C++, the null pointer is defined as</p>\n<blockquote>\n<p id=\"so_33474487_33474557_0\">A null pointer constant is an integral constant expression (5.19)\n  rvalue of integer type that evaluates to zero.</p>\n</blockquote>\n<p>That's why,</p>\n<pre><code>Foo* foo = nullptr;\n</code></pre>\n<p>is like:</p>\n<pre><code>Foo* foo = 0;\n</code></pre>\n<p>Moreover, in C++ zero(0) count as boolean <code>false</code>. So your statement <code>if (foo == nullptr)</code> is valid and same as <code>if (!foo)</code>.</p>\n", "LastEditorUserId": "1743849", "LastActivityDate": "2015-11-02T09:43:47.393", "Score": "2", "CreationDate": "2015-11-02T09:36:13.680", "ParentId": "33474487", "CommentCount": "0", "OwnerUserId": "1743849", "LastEditDate": "2015-11-02T09:43:47.393"}, "bq_ids": {"n4140": {"so_33474487_33474550_0": {"length": 39, "quality": 1.0, "section_id": 44}}, "n3337": {"so_33474487_33474550_0": {"length": 39, "quality": 1.0, "section_id": 41}, "so_33474487_33474557_0": {"length": 10, "quality": 0.8333333333333334, "section_id": 36}}, "n4659": {"so_33474487_33474550_0": {"length": 39, "quality": 1.0, "section_id": 45}}}});