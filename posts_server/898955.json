post_cb({"898974": {"ParentId": "898955", "CommentCount": "1", "Body": "<p>The <code>ppObj</code> parameter to RemoveObj is a reference to a Parent*.  What if the the <code>RemoveObj()</code> method replaced the pointer with a pointer to a new <code>Parent</code> object?  When the method returned your the <code>pCObj</code> <code>Child*</code> would not be pointing to a <code>Child</code> object any more.</p>\n", "OwnerUserId": "12711", "PostTypeId": "2", "Id": "898974", "Score": "16", "CreationDate": "2009-05-22T17:21:56.980", "LastActivityDate": "2009-05-22T17:21:56.980"}, "899072": {"ParentId": "898955", "CommentCount": "0", "Body": "<p>ppobj is the reference for the pointer.\n*ppobj dereferences what the variable points to, so you get the variable the pointer. </p>\n<p>Since the dereference is not of the correct type you are seeing the error. </p>\n", "OwnerUserId": "83298", "PostTypeId": "2", "Id": "899072", "Score": "0", "CreationDate": "2009-05-22T17:43:25.253", "LastActivityDate": "2009-05-22T17:43:25.253"}, "898981": {"ParentId": "898955", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>This is not authoritative, but I believe the problem is the polymorphic nature of C++ classes does not extend to their pointers; what you are expecting to be done here is for a <code>Child *</code> to be cast to a <code>Parent *</code>; while you can cast a <code>Child</code> to a <code>Parent</code>, you cannot cast the pointer <strong>reference</strong>.  That is, the classes are polymorphic, but the pointers to the classes are not when taken as references.  This is for the reason that Michael Burr gives above; the <code>Child *</code> implies a certain memory structure that the <code>Parent *</code> does not.</p>\n", "OwnerUserId": "28053", "LastEditorUserId": "28053", "LastEditDate": "2009-05-22T17:39:31.500", "Id": "898981", "Score": "-2", "CreationDate": "2009-05-22T17:23:14.670", "LastActivityDate": "2009-05-22T17:39:31.500"}, "898955": {"CommentCount": "0", "ViewCount": "4724", "PostTypeId": "1", "OwnerDisplayName": "UbiGeek", "FavoriteCount": "2", "CreationDate": "2009-05-22T17:17:30.713", "LastActivityDate": "2010-01-06T15:41:17.597", "LastEditDate": "2009-05-22T17:23:00.847", "LastEditorDisplayName": "UbiGeek", "Title": "Reference to pointers and C++ polymorphism", "Id": "898955", "Score": "11", "Body": "<p>does anyone know why this gives a compiler error ? I tried VS 2005 and Codewarrior:</p>\n<pre><code>class Parent {\n   protected:\n      int m_Var;\n   public:\n      Parent() : m_Var(0) {}\n      virtual ~Parent() {}\n      void PubFunc();\n};\n\nclass Child : public Parent {\n   protected:\n      bool m_Bool;\n   public:\n      Child() : m_Bool(false) {}\n      virtual ~Child() {}\n      void ChildFunc();\n};\n\nvoid RemoveObj(Parent *&amp; ppObj)\n{\n   delete ppObj;\n   ppObj = 0;\n}\n\nint main()\n{\n   Parent* pPObj = 0;\n   Child*  pCObj = 0;\n   pPObj = new Parent();\n   pCObj = new Child();\n\n   RemoveObj(pPObj);\n   RemoveObj(pCObj);\n   return 1;\n}\n</code></pre>\n<p>Visual studio says:</p>\n<blockquote>\n<p id=\"so_898955_898955_0\">refptr.cpp(33) : error C2664:\n  'RemoveObj' : cannot convert parameter\n  1 from 'Child *' to 'Parent *&amp;'</p>\n</blockquote>\n<p>Thanks</p>\n", "Tags": "<c++><reference><polymorphism><pointers><parameters>", "AnswerCount": "5"}, "898975": {"ParentId": "898955", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>From the C++ standard (1998)</p>\n<blockquote>\n<p id=\"so_898955_898975_0\">Except in the context of an\n  initialization by user-defined\n  conversion (13.3.1.4, 13.3.1.5), a\n  well-formed  implicit conversion\n  sequence is one of the following\n  forms:  \u2014a standard conversion\n  sequence(13.3.3.1.1), -a user\n  defined...</p>\n</blockquote>\n<p>13.3.3.1.1</p>\n<blockquote>\n<p id=\"so_898955_898975_1\">At most one  conversion from each\n  category is allowed in a single\n  standard conversion sequence</p>\n</blockquote>\n<p>So c++ can NOT convert implicitly two times in a row: from pointer to pointer and then again from pointer.</p>\n<p>To clear this up consider such declaration of the RemoveObj</p>\n<pre><code>void RemoveObj(Parent ** ppObj)\n</code></pre>\n<p>And you will see this error</p>\n<pre><code>error: invalid conversion from 'Child**' to 'Parent**'\n</code></pre>\n<p>You have to use explicit conversion like</p>\n<pre><code>   RemoveObj((Parent**)&amp;pCObj);\n   RemoveObj((Parent*&amp;)&amp;pCObj);\n</code></pre>\n<p>or have to change </p>\n<pre><code>void RemoveObj(Parent *&amp; ppObj)\n</code></pre>\n<p>to</p>\n<pre><code>void RemoveObj(Parent * ppObj)\n</code></pre>\n<p>or to</p>\n<pre><code>template &lt;typename T&gt;\nvoid RemoveObj(T *&amp; pObj)\n{\n   delete pObj;\n   pObj = 0;\n}\n</code></pre>\n", "OwnerUserId": "54684", "LastEditorUserId": "54684", "LastEditDate": "2009-05-22T20:28:24.290", "Id": "898975", "Score": "4", "CreationDate": "2009-05-22T17:22:19.350", "LastActivityDate": "2009-05-22T20:28:24.290"}, "bq_ids": {"n4140": {"so_898955_898975_1": {"section_id": 618, "quality": 1.0, "length": 9}}, "n3337": {"so_898955_898975_1": {"section_id": 608, "quality": 1.0, "length": 9}}, "n4659": {"so_898955_898975_1": {"section_id": 593, "quality": 0.5555555555555556, "length": 5}}}, "2014079": {"ParentId": "898955", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>A pointer to a reference allows the pointer value to change in the function. As noted by <a href=\"https://stackoverflow.com/users/12711/michael-burr\">Michael Burr</a> there would be the potential to assign an incorrect class reference and return it. Imagine your entire program incorrectly using *pchickens as *peggs :)</p>\n<p>I thought it was worth adding (although not explicitly what you asked):\nMy preference for a polymorphic implementation is to move common functions inside as a methods. If they all share a function, simple add it the base class.</p>\n<p>Then either way you could simply call\nFoo-&gt;Bar() and achieve the desired result. But for the specific implementation example you give, simply delete Foo would call the appropriate destructor.</p>\n", "OwnerUserId": "51700", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:03:30.680", "Id": "2014079", "Score": "0", "CreationDate": "2010-01-06T15:41:17.597", "LastActivityDate": "2010-01-06T15:41:17.597"}});