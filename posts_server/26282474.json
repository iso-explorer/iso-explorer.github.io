post_cb({"bq_ids": {"n4140": {"so_26282474_26282755_0": {"length": 29, "quality": 0.90625, "section_id": 3202}}, "n3337": {"so_26282474_26282755_0": {"length": 29, "quality": 0.90625, "section_id": 3076}}}, "26282505": {"PostTypeId": "2", "Body": "<p><code>td()</code> is <code>int()</code>: a function returning <code>int</code> taking no parameter.</p>\n", "LastActivityDate": "2014-10-09T15:37:59.857", "Id": "26282505", "CommentCount": "2", "CreationDate": "2014-10-09T15:37:59.857", "ParentId": "26282474", "Score": "4", "OwnerUserId": "2684539"}, "26282474": {"ViewCount": "143", "Body": "<p>How come I can always add a pair of parentheses to a typedef and what does it mean?</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;typeinfo&gt;\n\nint main() {\n    typedef int td;\n    std::cout &lt;&lt; typeid(td).name() &lt;&lt; std::endl;\n    std::cout &lt;&lt; typeid(td()).name() &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>\n<p>Outputs:</p>\n<pre><code>i\nFivE\n</code></pre>\n", "AcceptedAnswerId": "26282755", "Title": "C++ non-function typedef with parentheses", "CreationDate": "2014-10-09T15:36:28.990", "Id": "26282474", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2014-10-09T15:57:41.513", "Score": "1", "OwnerUserId": "440472", "Tags": "<c++><function><typedef>", "AnswerCount": "2"}, "26282755": {"PostTypeId": "2", "Body": "<p><code>td()</code> can be one of two things according to the grammar:</p>\n<ul>\n<li>It can be a <em>type-id</em>, naming the type \"function taking no parameter and returning <code>td</code>\"</li>\n<li>It can be an <em>expression</em>, meaning a value-initialized <code>td</code>.</li>\n</ul>\n<p>The <code>typeid</code> operator can be used with both a <em>type-id</em> and an <em>expression</em>. This ambiguity is resolved by the standard in favor of it being a <em>type-id</em> (\u00a78.2 [dcl.ambig.res]/p2):</p>\n<blockquote>\n<p id=\"so_26282474_26282755_0\">The ambiguity arising from the similarity between a function-style\n  cast and a <em>type-id</em> can occur in different contexts. The ambiguity\n  appears as a choice between a function-style cast expression and a\n  declaration of a type. The resolution is that any construct that could\n  possibly be a <em>type-id</em> in its syntactic context shall be considered a\n  <em>type-id</em>.</p>\n</blockquote>\n<p>In contexts where a <em>type-id</em> is not allowed, <code>td()</code> would be a value-initialized <code>td</code> object. For instance:</p>\n<pre><code>void foo(int i = int()); \n</code></pre>\n<p>is equivalent to </p>\n<pre><code>void foo(int i = 0); \n</code></pre>\n", "LastActivityDate": "2014-10-09T15:57:41.513", "LastEditorUserId": "2756719", "Id": "26282755", "CommentCount": "4", "CreationDate": "2014-10-09T15:51:00.590", "ParentId": "26282474", "Score": "3", "OwnerUserId": "2756719", "LastEditDate": "2014-10-09T15:57:41.513"}});