post_cb({"bq_ids": {"n4140": {"so_38763282_38763282_0": {"length": 6, "quality": 0.75, "section_id": 121}}, "n3337": {"so_38763282_38763282_0": {"length": 6, "quality": 0.75, "section_id": 116}}, "n4659": {"so_38763282_38763282_0": {"length": 6, "quality": 0.75, "section_id": 125}}}, "38763282": {"ViewCount": "44", "Body": "<pre><code>template&lt;typename... T&gt;\nvoid foo(T... args);\n</code></pre>\n<p>In the above example, <code>T</code> is expanded according to <em>\u00a714.5.3 - (4.1)</em> of the standard.</p>\n<blockquote>\n<p id=\"so_38763282_38763282_0\">\u00a714.5.3 - (4.1) \u2014 In a function parameter pack (8.3.5); the pattern is the parameter-declaration without the ellipsis.</p>\n</blockquote>\n<p>What exactly is happening here? Let's say I call the function with 3 integers.</p>\n<pre><code>foo(1, 2, 3);\n</code></pre>\n<p>Is the parameter pack being expanded like</p>\n<pre><code>foo(int arg1, int arg2, int arg3);\n</code></pre>\n<p>where arg1, arg2, and arg3 are just arbitrary names given to by the compiler?</p>\n<p>The standard says how \"the pattern is the parameter-declaration without the ellipsis\"</p>\n<p>The other way I interpret that is <code>args</code> gets a single parameter-declartion.Is <code>args</code> getting its own type? I've tried doing</p>\n<pre><code>std::cout &lt;&lt; typeid(args).name;\n</code></pre>\n<p>but that doesn't work, and throws compiler errors. So I could assume it's not getting its own type. Could someone \"dumb down\" what really is happening here, and the behavior of the function parameter pack?</p>\n", "AcceptedAnswerId": "38765391", "Title": "Behavior of a function parameter pack", "CreationDate": "2016-08-04T09:17:34.243", "Id": "38763282", "CommentCount": "1", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2016-08-04T09:23:59.137", "LastEditorUserId": "4152273", "LastActivityDate": "2016-08-04T10:54:44.217", "Score": "1", "OwnerUserId": "4152273", "Tags": "<c++><function><templates><variadic-templates>", "AnswerCount": "1"}, "38765391": {"Id": "38765391", "PostTypeId": "2", "Body": "<p>Alright, I think I've figured it out. Correct me if I'm wrong.</p>\n<p>A parameter expansion happens when the ellipsis is on the right on the pattern. Our pattern here is simply just <code>T</code>:</p>\n<pre><code>foo(T... args);\n</code></pre>\n<p>The standard states that the result of this will be a <code>parameter-declaration</code>. This decays into:</p>\n<blockquote>\n<p id=\"so_38763282_38765391_0\"><em>attribute-specifier-seq<sub>opt</sub> decl-specifier-seq declarator</em></p>\n</blockquote>\n<p><code>attribute-specifier-seq</code> can be ignored.</p>\n<p><code>decl-specifier-seq</code> is the type, <code>T</code>;</p>\n<p><code>declarator</code> is <code>... args</code></p>\n<p>Semantically, this is a function parameter pack declaration. Nothing special.</p>\n<p>Once again, my curiosity causes me to go insane for a little... heh.</p>\n", "LastActivityDate": "2016-08-04T10:54:44.217", "CommentCount": "0", "CreationDate": "2016-08-04T10:54:44.217", "ParentId": "38763282", "Score": "0", "OwnerUserId": "4152273"}});