post_cb({"bq_ids": {"n4140": {"so_17823693_17823693_1": {"length": 10, "quality": 0.9090909090909091, "section_id": 6504}}, "n3337": {"so_17823693_17823693_1": {"length": 10, "quality": 0.9090909090909091, "section_id": 6259}}, "n4659": {"so_17823693_17823693_1": {"length": 10, "quality": 0.9090909090909091, "section_id": 7986}}}, "17823693": {"ViewCount": "92", "Body": "<p>There are a few standard base class facets in the C++ Standard library whose default behavior is dependent on the classic \"C\" locale (<code>std::locale::classic()</code>). This would make it reasonable to switch to derived class facets (aka <code>byname</code> facets) whose behavior depends on the locale specified at its construction if your program requires culturally-specific functionality.</p>\n<p>For example, <code>std::ctype</code> provides classic \"C\" character classification:</p>\n<blockquote>\n<p id=\"so_17823693_17823693_0\">\u00a722.4.1.3.3</p>\n<pre><code>   static const mask* classic_table() noexcept;\n</code></pre>\n<p id=\"so_17823693_17823693_1\">Returns: A pointer to the initial element of an array of size <code>table_size</code> which represents the classifications of characters in the \"C\" locale</p>\n</blockquote>\n<p>Does this mean that the behavior of <code>std::ctype</code>  is functionally distinct from that of the locale to which it is installed? For instance, say I have a Japanese locale:</p>\n<pre><code>std::locale loc(\"ja_JP\");\n</code></pre>\n<p>and I wanted to use a facet that performed character classification on Japanese characters. Character classification is what <code>std::ctype</code> is for:</p>\n<pre><code>auto&amp; f = std::use_facet&lt;std::ctype&lt;char&gt;&gt;(loc);\n</code></pre>\n<p>Will <code>f</code>'s <code>ctype</code> methods classify characters based on the Japanese locale, or the classic \"C\" one? My first guess is the \"C\" locale based on the Standard quote above, but in fact it is the Japanese locale. I'm wondering why the quote doesn't agree with what is happening here.</p>\n<p>Here are my questions:</p>\n<ul>\n<li><p>Why does the Standard say that <code>ctype</code> performs \"C\" character classification when ctype actually classifies based on the locale with which it is being used?</p></li>\n<li><p>Since the above is true, where do derived class facets come in? Why should I use a derived class facet when the base class already uses the locale I want?</p></li>\n</ul>\n", "AcceptedAnswerId": "17823729", "Title": "When should I use a derived class facet in lieu of a base class facet?", "CreationDate": "2013-07-24T01:23:18.790", "Id": "17823693", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2013-07-24T01:27:24.617", "Score": "0", "OwnerUserId": "701092", "Tags": "<c++><locale>", "AnswerCount": "1"}, "17823729": {"Id": "17823729", "PostTypeId": "2", "Body": "<p>Only the <strong>default-constructed</strong> <code>std::ctype&lt;char&gt;</code> facet uses <code>classic_table</code> for its classification. The facet obtained from the system-provided <code>\"ja_JP\"</code> is not an example of that.</p>\n<p>When talking about derived facets, people generally refer to user-defined facets that are derived from std::ctype and the like, not the system-provided<code>byname</code> facets. You may use a derived <code>ctype</code> facet if you want to redefine some character class, for example, to treat commas as whitespace to parse a comma-separated input stream, or stop treating spaces and tabs as whitespace, to parse a stream line-by-line.</p>\n", "LastActivityDate": "2013-07-24T01:27:24.617", "CommentCount": "6", "CreationDate": "2013-07-24T01:27:24.617", "ParentId": "17823693", "Score": "1", "OwnerUserId": "273767"}});