post_cb({"30085929": {"ParentId": "30084577", "CommentCount": "2", "Body": "<p>The solution was to explicitly <code>#include &lt;cstdlib&gt;</code> on the OS X machine, as for some reason Visual Studio finds it in our dependencies and includes it, but clang does not. I will try to reproduce a similar chain of includes that our project has and reproduce the error in a minimalist way, as it may still be a problem either with Xcode or Visual Studio.</p>\n", "OwnerUserId": "2673386", "PostTypeId": "2", "Id": "30085929", "Score": "2", "CreationDate": "2015-05-06T19:33:24.753", "LastActivityDate": "2015-05-06T19:33:24.753"}, "30084577": {"CommentCount": "6", "CreationDate": "2015-05-06T18:16:42.923", "PostTypeId": "1", "AcceptedAnswerId": "30084734", "LastEditorUserId": "2673386", "LastActivityDate": "2016-08-23T00:00:38.183", "LastEditDate": "2016-08-23T00:00:38.183", "ViewCount": "8352", "FavoriteCount": "1", "Title": "Ambiguous call to abs", "Id": "30084577", "Score": "6", "Body": "<p>I have a custom data type that in practice can be either <code>float</code> or <code>double</code>. On every OS except OSX, I am able to successfully build this C++11 template:</p>\n<pre><code>#include &lt;cmath&gt;\n#include &lt;cstdlib&gt;\n#include &lt;cstdint&gt;\n\ntemplate&lt; class REAL_T &gt;\ninline REAL_T inhouse_abs(REAL_T i_val)\n{\n    return std::abs((REAL_T)i_val);\n}\n\nint main()\n{\n    int32_t ui = 2;\n    inhouse_abs(ui);\n    return 0;\n}\n</code></pre>\n<p>However, clang 6.0 (3.5 LLVM) reports an ambiguous function call. If I change <code>abs</code> to <code>fabs</code>, the error is resolved on OSX, but now an identical error shows up on my Linux clang, gcc, and Visual Studio.</p>\n<p>Error on Visual Studio with fabs:</p>\n<pre><code>349 error C2668: 'fabs' : ambiguous call to overloaded function\n</code></pre>\n<p><strong>UPDATE</strong></p>\n<p>This example compiled on our OS X systems, although in the <em>nearly</em> identical project it does not. The solution was including <code>&lt;cstdlib&gt;</code> explicitly in the source, rather than back in another header. The reason is unclear, but seems to be xcode/clang not following our header includes properly.</p>\n", "Tags": "<c++><osx><c++11><cmath>", "OwnerUserId": "2673386", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_30084577_30084734_1": {"section_id": 3876, "quality": 1.0, "length": 18}, "so_30084577_30084734_0": {"section_id": 3876, "quality": 1.0, "length": 6}}, "n3337": {"so_30084577_30084734_1": {"section_id": 3736, "quality": 1.0, "length": 18}, "so_30084577_30084734_0": {"section_id": 3736, "quality": 1.0, "length": 6}}, "n4659": {"so_30084577_30084734_1": {"section_id": 4690, "quality": 1.0, "length": 18}, "so_30084577_30084734_0": {"section_id": 4690, "quality": 0.8333333333333334, "length": 5}}}, "30084734": {"ParentId": "30084577", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The issue is that <code>libc++</code> is not entirely C++11 compliant with the integral overload for <a href=\"http://en.cppreference.com/w/cpp/numeric/math/fabs\" rel=\"nofollow noreferrer\">std::abs in cmath</a>:</p>\n<pre><code>double      fabs( Integral arg ); (7)   (since C++11)\n</code></pre>\n<p>Including <a href=\"http://en.cppreference.com/w/cpp/numeric/math/abs\" rel=\"nofollow noreferrer\">cstdlib</a> solves your problem since that header has overloads specifically for integer types.</p>\n<p>For reference the draft C++11 standard section <code>26.8</code> <em>[c.math]</em> paragraph <code>11</code> says:</p>\n<blockquote>\n<p id=\"so_30084577_30084734_0\">Moreover, there shall be additional overloads sufficient to ensure:</p>\n</blockquote>\n<p>and includes the following item:</p>\n<blockquote id=\"so_30084577_30084734_1\">\n<ol start=\"2\">\n<li>Otherwise, if any argument corresponding to a double parameter has type double or an integer type, then all arguments corresponding to\n  double parameters are effectively cast to double.</li>\n</ol>\n</blockquote>\n<p>This is situation very likely to change due to <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#2192\" rel=\"nofollow noreferrer\">LWG active issue 2192: Validity and return type of std::abs(0u) is unclear</a>. I am guessing <code>libc++</code> choose not to provide the overloads in <code>cmath</code> due to the issue brought up in this defect report.</p>\n<p>See <a href=\"https://stackoverflow.com/q/29750946/1708801\">Is std::abs(0u) ill-formed?</a> for more details on this.</p>\n", "OwnerUserId": "1708801", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T11:54:18.733", "Id": "30084734", "Score": "5", "CreationDate": "2015-05-06T18:25:06.987", "LastActivityDate": "2015-05-06T20:37:15.220"}});