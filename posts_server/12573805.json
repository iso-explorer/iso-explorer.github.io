post_cb({"12573941": {"ParentId": "12573805", "CommentCount": "1", "CreationDate": "2012-09-24T22:42:45.683", "OwnerUserId": "1120273", "PostTypeId": "2", "Id": "12573941", "Score": "1", "Body": "<p>I'd venture the guess that we got bitten last time by the Unicode guys: C++ initially made <code>wchar_t</code> such that it can hold every possibly Unicode character. For this it was required to hold at least 16 bits because Unicode was meant to use at most 16 bits. Shortly after a popular implementation decided to actually use a 16 bit <code>wchar_t</code> type it was found that 16 bits actually isn't enough. Last time I looked Unicode used 20 bit but why gamble on being too short again? It is unlikely that there will be widespread use of 24 bit types and if you need to use a specific code point it is most like using only 16 bit, i.e., you can use <code>\\uNNNN</code>.</p>\n<p>The description in 2.3 [lex.charset] paragraph 2 seems to indicate that universal-character-names refers to code points. At the same time, universal-character-name is used to refer to character short name. I'm not an expert for Unicode but I'd think code points are meant.</p>\n", "LastActivityDate": "2012-09-24T22:42:45.683"}, "12573963": {"ParentId": "12573805", "CommentCount": "2", "CreationDate": "2012-09-24T22:45:01.827", "OwnerUserId": "636019", "PostTypeId": "2", "Id": "12573963", "Score": "6", "Body": "<p>In the <a href=\"http://www.unicode.org/charts/\">Unicode character code charts</a>, each character has a full name and a short name. For example the character <code>/</code> has the full name <code>SOLIDUS</code> and the short name <code>002F</code>. Not coincidentally, all of the character short names are representable in hex.</p>\n<p>As to why 8 digits must be specified, I suspect that's for forward-compatibility with future versions of the Unicode standard that may use larger/more character blocks.</p>\n", "LastActivityDate": "2012-09-24T22:45:01.827"}, "12573805": {"CommentCount": "2", "ViewCount": "235", "CreationDate": "2012-09-24T22:26:31.793", "LastActivityDate": "2012-09-24T22:45:01.827", "Title": "What is a \"character short name\" in ISO/IE 10646?", "PostTypeId": "1", "Id": "12573805", "Score": "4", "Body": "<p>C++11 2.3/2 says:</p>\n<blockquote>\n<p id=\"so_12573805_12573805_0\">The character designated by the universal-character-name \\UNNNNNNNN is\n  that character whose character short name in ISO/IEC 10646 is NNNNNNNN</p>\n</blockquote>\n<p>So I downloaded <a href=\"http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=56921\" rel=\"nofollow\">ISO/IEC 10646</a>, but I was unable to find a definition of \"character short name.\" Can somebody please clarify what this is supposed to refer to?</p>\n<p>My original goal was to find out why 8 hex digits are required when specifying a code point with \\U, given that six digits always suffice.  So I'd also be interested to know why C++11 specifies that we use \\UNNNNNNNN instead of \\UNNNNNN.</p>\n", "Tags": "<c++><unicode><c++11>", "OwnerUserId": "1426649", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_12573805_12573805_0": {"section_id": 5315, "quality": 0.9230769230769231, "length": 12}}, "n3337": {"so_12573805_12573805_0": {"section_id": 5112, "quality": 0.9230769230769231, "length": 12}}, "n4659": {"so_12573805_12573805_0": {"section_id": 6739, "quality": 0.9230769230769231, "length": 12}}}});