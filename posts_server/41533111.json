post_cb({"41533111": {"CommentCount": "4", "ViewCount": "306", "PostTypeId": "1", "ClosedDate": "2017-01-08T19:08:46.977", "LastEditorUserId": "5507349", "CreationDate": "2017-01-08T13:14:42.210", "LastActivityDate": "2017-01-08T14:47:31.173", "Title": "Why catch block of base class is catching the exception when I am throwing object of derived class?", "AcceptedAnswerId": "41533197", "LastEditDate": "2017-01-08T14:47:31.173", "Id": "41533111", "Score": "6", "Body": "<p>if I am passing object of derived class, then the derived class catch block should be invoked. But the output says that the exception is caught by the base class. Why? </p>\n<pre><code>#include&lt;iostream&gt;\nusing namespace std;\n\nclass Base {};\nclass Derived: public Base {};\nint main()\n{\n   Derived d;\n   // some other stuff\n   try {\n       // Some monitored code\n       throw d;\n   }\n   catch(Base b) { \n        cout&lt;&lt;\"Caught Base Exception\";\n   }\n   catch(Derived d) {  //This catch block is NEVER executed\n        cout&lt;&lt;\"Caught Derived Exception\";\n   }\n   getchar();\n   return 0;\n}\n</code></pre>\n", "Tags": "<c++><inheritance><exception-handling>", "OwnerUserId": "7354852", "AnswerCount": "3"}, "41533182": {"ParentId": "41533111", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>There is a little to be said about this.</p>\n<p>Firstly, it is good practice to catch exceptions by reference instead of value. This prevents slicing of the exception object in the case that it is derived. This is not specific to exceptions but a general feature of inheritance. </p>\n<p>A description of this phenomena is discussed <a href=\"https://stackoverflow.com/questions/2522299/c-catch-blocks-catch-exception-by-value-or-reference\">here</a></p>\n<p>Also, as pointed out by another answer, if you insist on doing things this way you need to change the order of catches, as a derived class satisfies the base catch block. There is another way of doing this though that uses this property explicitly: Just have the base class catch everything. You can use this unless there is a very specific feature of the derived exception that needs to be treated separately</p>\n", "OwnerUserId": "3684792", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T10:29:17.767", "Id": "41533182", "Score": "3", "CreationDate": "2017-01-08T13:26:17.393", "LastActivityDate": "2017-01-08T13:26:17.393"}, "41533150": {"ParentId": "41533111", "CommentCount": "0", "Body": "<p>The catch clauses are checked in order - you get first match, not best match.</p>\n<p>So checking the derived type first would catch that.</p>\n", "OwnerUserId": "597607", "PostTypeId": "2", "Id": "41533150", "Score": "1", "CreationDate": "2017-01-08T13:21:06.877", "LastActivityDate": "2017-01-08T13:21:06.877"}, "bq_ids": {"n4140": {"so_41533111_41533197_0": {"section_id": 3349, "quality": 0.7931034482758621, "length": 23}}, "n3337": {"so_41533111_41533197_0": {"section_id": 3219, "quality": 0.7931034482758621, "length": 23}}, "n4659": {"so_41533111_41533197_0": {"section_id": 4116, "quality": 0.896551724137931, "length": 26}}}, "41533197": {"ParentId": "41533111", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>The standard says (see <a href=\"http://eel.is/c++draft/except#handle-4\">[except.handle]/4</a>] of the working draft as an example, emphasis mine):</p>\n<blockquote>\n<p id=\"so_41533111_41533197_0\">The handlers for a try block are tried in order of appearance. [\u00a0Note:\u00a0This makes it possible to write <strong>handlers that can never be executed</strong>, for example by placing <strong>a handler for a final derived class after a handler for a corresponding unambiguous public base class</strong>.</p>\n</blockquote>\n<p>This is exactly what you did in your code.<br>\nTherefore I'd say that's the intended behavior, no matter what was your expectations.</br></p>\n<p>Note that you can swap the two handlers to solve the issue.</p>\n", "OwnerUserId": "4987285", "LastEditorUserId": "4987285", "LastEditDate": "2017-01-08T13:35:46.473", "Id": "41533197", "Score": "10", "CreationDate": "2017-01-08T13:27:56.573", "LastActivityDate": "2017-01-08T13:35:46.473"}});