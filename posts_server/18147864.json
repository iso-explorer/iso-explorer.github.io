post_cb({"bq_ids": {"n4140": {"so_18147864_18149769_2": {"length": 15, "quality": 1.0, "section_id": 7002}, "so_18147864_18149769_0": {"length": 19, "quality": 0.95, "section_id": 6021}, "so_18147864_18149769_1": {"length": 18, "quality": 1.0, "section_id": 6022}}, "n3337": {"so_18147864_18149769_2": {"length": 15, "quality": 1.0, "section_id": 6748}, "so_18147864_18149769_1": {"length": 18, "quality": 1.0, "section_id": 5790}, "so_18147864_18149769_0": {"length": 19, "quality": 0.95, "section_id": 5789}}, "n4659": {"so_18147864_18149769_2": {"length": 15, "quality": 1.0, "section_id": 8499}, "so_18147864_18149769_1": {"length": 18, "quality": 1.0, "section_id": 7521}, "so_18147864_18149769_0": {"length": 19, "quality": 0.95, "section_id": 7520}}}, "18148712": {"Id": "18148712", "PostTypeId": "2", "Body": "<p>Having thought about it while mowing the lawn... A pointer cannot know what type of object it is pointing at. The type information is stored with the pointer and this is not changed by pointing at a derived class (B).  So you need a typecast to change the type of a pointer and the output IS as expected.</p>\n", "LastActivityDate": "2013-08-09T14:11:48.167", "CommentCount": "0", "CreationDate": "2013-08-09T14:11:48.167", "ParentId": "18147864", "Score": "0", "OwnerUserId": "1456073"}, "18149769": {"Id": "18149769", "PostTypeId": "2", "Body": "<p>The object it points to must be polymorphic for this to work as you expect. If <code>A</code> had <code>virtual</code> methods than your code would have work as expected, for example adding a virtual destructor, which I <a href=\"http://rextester.com/PPI9073\" rel=\"nofollow\">demo live here using gcc</a>.</p>\n<p>Quote form the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3485.pdf\" rel=\"nofollow\">C++ draft standard</a> section <code>5.2.8</code> <em>Type identification</em> paragraph <em>2</em> says:</p>\n<blockquote>\n<p id=\"so_18147864_18149769_0\">When typeid is applied to a glvalue expression whose type is a\n  polymorphic class type (10.3), the result refers to a std::type_info\n  object representing the type of the most derived object (1.8) [...]</p>\n</blockquote>\n<p>Which applies to the case where we have a <code>virtual</code> method, in your case you do not have a polymorphic type so paragraph <em>3</em> applies:</p>\n<blockquote>\n<p id=\"so_18147864_18149769_1\">When typeid is applied to an expression other than a glvalue of a\n  polymorphic class type, the result refers to a std::type_info object\n  representing the static type of the expression</p>\n</blockquote>\n<p>So you will get the <code>static</code> type back which is <code>A</code>.</p>\n<p>Just to be a little more complete section <code>10.3</code> <em>Virtual functions</em> says:</p>\n<blockquote>\n<p id=\"so_18147864_18149769_2\">Virtual functions support dynamic binding and object-oriented\n  programming. A class that declares or inherits a virtual function is\n  called a polymorphic class.</p>\n</blockquote>\n", "LastEditorUserId": "1708801", "LastActivityDate": "2015-01-22T16:05:06.640", "Score": "8", "CreationDate": "2013-08-09T15:00:52.530", "ParentId": "18147864", "CommentCount": "0", "OwnerUserId": "1708801", "LastEditDate": "2015-01-22T16:05:06.640"}, "18147864": {"ViewCount": "1649", "Body": "<p>I cannot get typeid function correctly.\nAm I missing something</p>\n<p>Code:</p>\n<pre><code>class A\n{\n     public:\n     int a1;\n     A()\n    {\n    }\n};\n\n\nclass B: public A\n{\n    public:\n    int b1;\n    B()\n    {\n    }\n};\n\n\nint main()\n{\n     B tempb;\n     A tempa;\n     A * ptempa;\n     ptempa = &amp;tempb;\n\n     std::cout &lt;&lt; typeid(tempb).name() &lt;&lt; std::endl;\n     std::cout &lt;&lt; typeid(tempa).name() &lt;&lt; std::endl;\n     std::cout &lt;&lt; typeid(*ptempa).name() &lt;&lt; std::endl;\n\n     return 0;\n}\n</code></pre>\n<p>It always prints:</p>\n<p>Class B\nClass A\nClass A</p>\n<p>I am using VS2010 for my project</p>\n", "AcceptedAnswerId": "18149769", "Title": "Typeid not functioning correcly", "CreationDate": "2013-08-09T13:32:55.003", "Id": "18147864", "CommentCount": "1", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2015-01-22T16:05:06.640", "Score": "7", "OwnerUserId": "2600393", "Tags": "<c++><typeid>", "AnswerCount": "3"}, "18147955": {"Id": "18147955", "PostTypeId": "2", "Body": "<p>The problem is that <code>A</code> has no virtual functions, so is not treated as a polymorphic type. As a result, <code>typeid</code> looks up the declared type of the pointer, not the actual type of the object that it points to.</p>\n", "LastActivityDate": "2013-08-09T13:36:36.483", "CommentCount": "4", "CreationDate": "2013-08-09T13:36:36.483", "ParentId": "18147864", "Score": "19", "OwnerUserId": "1593860"}});