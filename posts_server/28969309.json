post_cb({"28969777": {"ParentId": "28969309", "CommentCount": "0", "Body": "<p>You could use <a href=\"http://www.cplusplus.com/reference/algorithm/fill/?kw=fill\" rel=\"nofollow\"><code>std::fill</code></a></p>\n<pre><code>std::fill( &amp;array[0][0], &amp;array[0][0] + sizeof(array), '/' );\n</code></pre>\n", "OwnerUserId": "3658660", "PostTypeId": "2", "Id": "28969777", "Score": "0", "CreationDate": "2015-03-10T17:02:34.067", "LastActivityDate": "2015-03-10T17:02:34.067"}, "28969621": {"ParentId": "28969309", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>When you use:</p>\n<pre><code>char array[10][10] = {'/'};\n</code></pre>\n<p>Only one of the array elements is initialized to <code>'/'</code> and rest are initialized to zero. You can work around this by:</p>\n<ol>\n<li><p>Use <code>memset</code> to set the values of the all the elements.</p>\n<pre><code>memset(&amp;array[0][0], '/', sizeof(array));\n</code></pre></li>\n<li><p>Use <code>for</code> loops to initialize each member.</p>\n<pre><code>for (int i = 0; i &lt; 10; ++i )\n   for (int j = 0; j &lt; 10; ++j )\n      array[i][j] = '/';\n</code></pre></li>\n<li><p>Use <code>std::fill</code> to fill the data</p>\n<pre><code>std::fill(std::begin(array[0]), std::end(array[9]), '/');\n</code></pre>\n<p>or</p>\n<pre><code>std::fill(std::begin(*std::begin(array)), std::end(*std::end(array)), '/');\n</code></pre></li>\n<li><p>Use <code>std::vector</code> instead of arrays.</p>\n<pre><code>std::vector&lt;std::vector&lt;char&gt;&gt; array(10, std::vector(10, '/'));\n</code></pre></li>\n</ol>\n", "OwnerUserId": "434551", "LastEditorUserId": "434551", "LastEditDate": "2015-03-10T17:04:42.813", "Id": "28969621", "Score": "1", "CreationDate": "2015-03-10T16:55:48.410", "LastActivityDate": "2015-03-10T17:04:42.813"}, "28969576": {"ParentId": "28969309", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>According to the C++ Standard *8.5.1 Aggregates)</p>\n<blockquote>\n<p id=\"so_28969309_28969576_0\">7 If there are fewer initializer-clauses in the list than there are\n  members in the aggregate, then each member not explicitly initialized\n  shall be initialized from its brace-or-equal-initializer or, if there\n  is no brace-or-equalinitializer, <strong>from an empty initializer list</strong>\n  (8.5.4).</p>\n</blockquote>\n<p>and (8.5.4 List-initialization)</p>\n<blockquote>\n<p id=\"so_28969309_28969576_1\">\u2014 Otherwise, if the initializer list has no elements, <strong>the object is\n  value-initialized.</strong></p>\n</blockquote>\n<p>and (8.5 Initializers)</p>\n<blockquote>\n<p id=\"so_28969309_28969576_2\">\u2014 if T is an array type, then each element is value-initialized; \u2014\n  otherwise, <strong>the object is zero-initialized</strong>.</p>\n</blockquote>\n<p>Thus in both these definitions</p>\n<pre><code>char array[10][10] = {'/'}\nint array[10][10] = {0}\n</code></pre>\n<p>all elements that do not have a corresponding initializer are value initialized that for fundamentals types means zero initialization. All elements except first elements of the arrays will be set to zero. That means that the both arrays from your example \"work\" the same way.:)</p>\n", "OwnerUserId": "2877241", "LastEditorUserId": "2877241", "LastEditDate": "2015-03-10T16:59:18.447", "Id": "28969576", "Score": "1", "CreationDate": "2015-03-10T16:53:35.423", "LastActivityDate": "2015-03-10T16:59:18.447"}, "bq_ids": {"n4140": {"so_28969309_28969576_2": {"section_id": 3287, "quality": 1.0, "length": 9}, "so_28969309_28969576_0": {"section_id": 3304, "quality": 0.9545454545454546, "length": 21}, "so_28969309_28969576_1": {"section_id": 3325, "quality": 1.0, "length": 6}}, "n3337": {"so_28969309_28969576_2": {"section_id": 3157, "quality": 1.0, "length": 9}, "so_28969309_28969576_0": {"section_id": 3174, "quality": 0.7727272727272727, "length": 17}, "so_28969309_28969576_1": {"section_id": 3195, "quality": 1.0, "length": 6}}, "n4659": {"so_28969309_28969576_2": {"section_id": 4049, "quality": 1.0, "length": 9}, "so_28969309_28969576_0": {"section_id": 4070, "quality": 0.7272727272727273, "length": 16}, "so_28969309_28969576_1": {"section_id": 4091, "quality": 1.0, "length": 6}}}, "28969309": {"CommentCount": "4", "ViewCount": "62", "CreationDate": "2015-03-10T16:39:41.753", "LastActivityDate": "2015-03-10T17:04:42.813", "Title": "initialize multidimensional array with a char?", "AcceptedAnswerId": "28969576", "PostTypeId": "1", "Id": "28969309", "Score": "1", "Body": "<p>I want to initialize a 10x10 array of chars with '/'.\nthis is what I made:</p>\n<pre><code>char array[10][10] = {'/'}\n</code></pre>\n<p>But the result is an array with 1 '/' and the others are all blank spaces...</p>\n<p>Why with int array works and with chars not?\nIf I write:</p>\n<pre><code>int array[10][10] = {0}\n</code></pre>\n<p>the result is an array full of 0.</p>\n<p>thanks in advance for your answers! :)</p>\n", "Tags": "<c++><arrays><multidimensional-array>", "OwnerUserId": "4304800", "AnswerCount": "3"}});