post_cb({"14604018": {"ParentId": "14603752", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2013-01-30T12:27:52.353", "Score": "2", "LastEditorUserId": "819272", "LastEditDate": "2013-01-30T12:33:23.653", "Id": "14604018", "OwnerUserId": "819272", "Body": "<p>Annex B of the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3376.pdf\" rel=\"nofollow\">Standard</a> specifies only a minimum level of direct and indirect base classes and nested template instantiations, and it's a quality of implementation issue whether a specific compiler goes beyond that. Consult your specific compilers own documentation for the precies numbers. Below follow the minimum quantities required by the Standard.</p>\n<p><strong>Annex B (informative)\nImplementation quantities [implimits]</strong></p>\n<blockquote>\n<p id=\"so_14603752_14604018_0\">1 Because computers are \ufb01nite, C++ implementations are inevitably\n  limited in the size of the programs they can successfully process.\n  Every implementation shall document those limitations where known.\n  This documentation may cite \ufb01xed limits where they exist, say how to\n  compute variable limits as a function of available resources, or say\n  that \ufb01xed limits do not exist or are unknown.</p>\n<p id=\"so_14603752_14604018_1\">2 The limits may constrain quantities that include those described\n  below or others. The bracketed number following each quantity is\n  recommended as the minimum for that quantity. However, these\n  quantities are only guidelines and do not determine compliance.</p>\n<p id=\"so_14603752_14604018_2\">\u2014 Direct and indirect base classes [16 384].</p>\n<p id=\"so_14603752_14604018_3\">\u2014 Direct base classes for a single class [1 024]. </p>\n<p id=\"so_14603752_14604018_4\">\u2014 Recursively nested template instantiations, including substitution\n  during template argument deduction (14.8.2) [1 024].</p>\n</blockquote>\n", "LastActivityDate": "2013-01-30T12:33:23.653"}, "14603752": {"CommentCount": "1", "ViewCount": "569", "PostTypeId": "1", "LastEditorUserId": "819272", "CreationDate": "2013-01-30T12:13:34.427", "LastActivityDate": "2013-01-30T12:33:23.653", "Title": "Metaprogramming inheritance limitiations", "AcceptedAnswerId": "14604018", "LastEditDate": "2013-01-30T12:29:24.537", "Id": "14603752", "Score": "3", "Body": "<p>I am using template metaprogramming in c++ to generate a hierarchy of classes from using a typelist like so: </p>\n<pre><code>//! Basic typelist class\ntemplate&lt;class H, class T&gt;\nclass Typelist\n{\npublic:\n    typedef H Head;\n    typedef T Tail;\n};\n\n//! Terminating type\nclass NullType {};\n\n//! Forward declaration\ntemplate&lt;class Types&gt;\nclass Recur;\n\n//! Specialisation to terminate the recursion\ntemplate&lt;&gt;\nclass Recur&lt;NullType&gt;\n{\n};\n\n//! General recursive class \ntemplate&lt;class Types&gt;\nclass Recur: public Recur&lt;typename Types::Tail&gt;\n{\n};\n\n// Dummy classes \nclass Type1{};\nclass Type2{};\nclass Type3{};\nint main()\n{\n    // Defines the typelist\n    typedef Typelist&lt;Type1,Typelist&lt;Type2,Typelist&lt;Type3,NullType&gt;&gt;&gt; Types;\n\n    // Instantiate the recursion\n    Recur&lt;Types&gt; recur;\n    return 1;\n}\n</code></pre>\n<p>This would produce a class hierarchy like so:</p>\n<p><code>Recur&lt;Typelist&lt;Type2,Typelist&lt;Type3,NullType&gt;&gt;&gt;</code> which derives from:\n<code>Recur&lt;Typelist&lt;Type3,NullType&gt;&gt;</code> which derives from:</p>\n<pre><code>Recur&lt;NullType&gt; (base class)\n</code></pre>\n<p><strong>Question: Are there any Visual Studio 2010 compiler limits to the depth of class derivation using this recursive technique? In other words if my typelist contained N types would the code above compile and construct N classes even if N equals say 100,000?</strong></p>\n", "Tags": "<c++><visual-studio-2010><stl><metaprogramming><instantiation>", "OwnerUserId": "1028523", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_14603752_14604018_3": {"section_id": 47, "quality": 0.8333333333333334, "length": 5}, "so_14603752_14604018_2": {"section_id": 47, "quality": 0.8, "length": 4}, "so_14603752_14604018_1": {"section_id": 47, "quality": 0.9166666666666666, "length": 22}, "so_14603752_14604018_0": {"section_id": 46, "quality": 0.9024390243902439, "length": 37}, "so_14603752_14604018_4": {"section_id": 47, "quality": 0.8333333333333334, "length": 10}}, "n3337": {"so_14603752_14604018_3": {"section_id": 468, "quality": 0.6666666666666666, "length": 4}}, "n4659": {"so_14603752_14604018_2": {"section_id": 48, "quality": 0.8, "length": 4}, "so_14603752_14604018_3": {"section_id": 48, "quality": 0.8333333333333334, "length": 5}, "so_14603752_14604018_1": {"section_id": 48, "quality": 0.9166666666666666, "length": 22}, "so_14603752_14604018_0": {"section_id": 47, "quality": 0.9024390243902439, "length": 37}, "so_14603752_14604018_4": {"section_id": 48, "quality": 0.8333333333333334, "length": 10}}}});