post_cb({"bq_ids": {"n4140": {"so_43604746_43604876_3": {"length": 14, "quality": 0.7777777777777778, "section_id": 1443}}, "n3337": {"so_43604746_43604876_3": {"length": 14, "quality": 0.7777777777777778, "section_id": 1437}}, "n4659": {"so_43604746_43604876_3": {"length": 14, "quality": 0.7777777777777778, "section_id": 1581}}}, "43604876": {"Id": "43604876", "PostTypeId": "2", "Body": "<p>Simple solution: you can merge all the sets (linear complexity) an then count the numbers which occur n times in the final set (again linear complexity).</p>\n<p>Use std::multiset (to have duplicates) and <a href=\"http://www.cplusplus.com/reference/algorithm/merge/\" rel=\"nofollow noreferrer\">merge in algorithm</a>.</p>\n<p>Try it out <a href=\"http://ideone.com/bQAOC7\" rel=\"nofollow noreferrer\">here</a>:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;set&gt;\n#include &lt;algorithm&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main() {\n    // your code goes here\n    std::multiset&lt;int&gt; a {1,2,3};\n    std::multiset&lt;int&gt; b {1,2,3};\n\n    std::multiset&lt;int&gt; result;\n    merge( a.begin(), a.end(), b.begin(), b.end(),  \n    std::inserter(result, result.begin()));\n    std::cout&lt;&lt;result.size()&lt;&lt;std::endl;\n    return 0;\n}\n</code></pre>\n<p>Result:</p>\n<blockquote>\n<p id=\"so_43604746_43604876_0\">Success   time: 0 memory: 16064 signal:0</p>\n<p id=\"so_43604746_43604876_1\">6</p>\n</blockquote>\n<p>The set-union semantics extend to multiset (as discussed <a href=\"https://stackoverflow.com/questions/3195973/set-union-with-multiset-containers\">here</a>) but not in the way I always tought they <a href=\"http://stdcxx.apache.org/doc/stdlibug/8-2.html\" rel=\"nofollow noreferrer\">would</a>. </p>\n<blockquote>\n<p id=\"so_43604746_43604876_2\">The operation of taking the union of two multisets should be\n  distinguished from the operation of merging two sets. Imagine that one\n  argument set contains three instances of the element 7, and the second\n  set contains two instances of the same value. The union will contain\n  only three such values, while the merge will contain five.</p>\n</blockquote>\n<p>From the standard, 25.3.5:</p>\n<blockquote>\n<p id=\"so_43604746_43604876_3\">The semantics of the set operations are generalised to multisets in a standard way by defining union() to contain the maximum number of\n  occurrences of every element, intersection() to contain the minimum,\n  and so on.</p>\n</blockquote>\n", "LastEditorUserId": "-1", "LastActivityDate": "2017-04-25T13:12:30.353", "Score": "5", "CreationDate": "2017-04-25T08:00:37.843", "ParentId": "43604746", "CommentCount": "7", "OwnerUserId": "3867787", "LastEditDate": "2017-05-23T12:02:14.820"}, "43604746": {"ViewCount": "61", "Body": "<p>I have a problem for which I have tried a lot of ideas but could not find an optimal solution.</p>\n<p>The problem is this:</p>\n<p>Given a sequence of n numbers all sorted in increasing order but of different lengths, find the largest subsequence common to each one of them.</p>\n<p>For examples let's say there are 3 sequences A, B and C,</p>\n<p>where </p>\n<pre><code>A = {1 3 5 7 9 10 11 15 30 43 44 45 50}\nB = {1 2 3 7 8 10 11 12 23 27 30 38 40 41 45 50 51 53 }\nC = {0 1 3 7 9 11 12 13 14 19 20 24 28 30  50 51 61 90 99}\n</code></pre>\n<p>So the largest common subsequence to all of them is:</p>\n<pre><code>Answer = {1 3 7 11 30 50}\n</code></pre>\n<p>The above example illustrates the idea I am trying to convey. How can I find such a largest common subsequence which is all in increasing order?</p>\n<p>Thanks for your time and consideration to read this post. I will be really thankful if you could also offer suggestions.</p>\n", "AcceptedAnswerId": "43604876", "Title": "Given sequence of different length find the largest sequence of numbers common to every one of them", "CreationDate": "2017-04-25T07:52:23.627", "Id": "43604746", "CommentCount": "6", "LastEditDate": "2017-04-25T12:22:02.527", "PostTypeId": "1", "LastEditorUserId": "3867787", "LastActivityDate": "2017-04-25T13:12:30.353", "Score": "0", "OwnerUserId": "5699895", "Tags": "<c++><algorithm>", "AnswerCount": "1"}});