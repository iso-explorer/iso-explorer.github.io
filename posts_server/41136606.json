post_cb({"41136606": {"CommentCount": "1", "CreationDate": "2016-12-14T07:00:35.323", "PostTypeId": "1", "AcceptedAnswerId": "41136662", "LastEditorUserId": "3309790", "LastActivityDate": "2016-12-14T10:51:30.367", "LastEditDate": "2016-12-14T07:31:30.790", "ViewCount": "192", "FavoriteCount": "2", "Title": "If a private virtual function is overridden as a public function in the derived class, what are the problems?", "Id": "41136606", "Score": "2", "Body": "<pre><code>using namespace std;\n#include &lt;cstdio&gt;\n#include &lt;iostream&gt;\n\nclass One{\n    private:\n        virtual void func(){\n            cout&lt;&lt;\"bark!\"&lt;&lt;endl;\n        }\n};\n\nclass Two: public One{\n    public:\n        void func(){\n            cout&lt;&lt;\"two!\"&lt;&lt;endl;\n        }\n};\n\nint main(){\n    One *o = new Two();\n    o-&gt;func();\n}\n</code></pre>\n<p>Why is there an error on <code>o-&gt;func()</code>?</p>\n<p>I don't know the mechanism behind it... In my opinion, <code>o-&gt;func()</code> should call the <code>func()</code> in the derived class, which is public, so there wouldn't be problems, but it says:</p>\n<pre><code> error: \u2018virtual void One::func()\u2019 is private\n</code></pre>\n", "Tags": "<c++><override><private><virtual-functions>", "OwnerUserId": "6862273", "AnswerCount": "3"}, "41136721": {"ParentId": "41136606", "LastEditDate": "2017-05-23T11:55:16.990", "CommentCount": "1", "CreationDate": "2016-12-14T07:08:12.527", "OwnerUserId": "6835804", "LastEditorUserId": "-1", "PostTypeId": "2", "Id": "41136721", "Score": "1", "Body": "<p>A subclass can't ease inheritance restriction,\neven though func is virtual, it is still the inheritance restrictions remain.</p>\n<p>please see this answer for compliated view of inheritance restrictions :</p>\n<p><a href=\"https://stackoverflow.com/questions/860339/difference-between-private-public-and-protected-inheritance\">Difference between private, public, and protected inheritance</a></p>\n", "LastActivityDate": "2016-12-14T07:08:12.527"}, "41136662": {"ParentId": "41136606", "LastEditDate": "2016-12-14T10:51:30.367", "CommentCount": "5", "CreationDate": "2016-12-14T07:04:24.967", "OwnerUserId": "3309790", "LastEditorUserId": "3309790", "PostTypeId": "2", "Id": "41136662", "Score": "11", "Body": "<p>Accessibility check is performed based on the static type of the object. The type of <code>o</code> is <code>One*</code>. This means that if <code>One::func()</code> is <code>private</code>, then <code>o-&gt;func()</code> won't compile.</p>\n<p>On the other hand, which virtual member function will be called (i.e. dynamic dispatch) happens at run-time, based on the dynamic type of the object. So if <code>One::func()</code> is <code>public</code>, <code>o-&gt;func()</code> will call <code>Two::func()</code>, because <code>o</code> is pointing to an object of type <code>Two</code>.</p>\n<p>For your sample code and use case, making <code>One::func()</code> <code>private</code> is just meaningless. But note that there's a famous idiom called <a href=\"https://en.wikibooks.org/wiki/More_C%2B%2B_Idioms/Non-Virtual_Interface\" rel=\"nofollow noreferrer\">Non-Virtual Interface</a>, which makes use of <code>private</code> virtual member functions of base class.</p>\n<hr>\n<p>Other suggestions:</p>\n<ol>\n<li>Don't forget to <code>delete o;</code></li>\n<li><p>Add a virtual destructor in the base class <code>One</code>. Otherwise <code>delete o;</code> will lead to undefined behavior; e.g. the destructor of <code>Two</code> might not be invoked.</p>\n<pre><code>class One {\n    public:\n        virtual ~One() {}\n    // ...\n};\n</code></pre></li>\n</ol>\n</hr>", "LastActivityDate": "2016-12-14T10:51:30.367"}, "bq_ids": {"n4140": {"so_41136606_41136930_0": {"section_id": 6696, "quality": 0.8125, "length": 13}, "so_41136606_41136930_1": {"section_id": 6697, "quality": 0.9523809523809523, "length": 20}}, "n3337": {"so_41136606_41136930_0": {"section_id": 6451, "quality": 0.8125, "length": 13}, "so_41136606_41136930_1": {"section_id": 6452, "quality": 0.9523809523809523, "length": 20}}, "n4659": {"so_41136606_41136930_0": {"section_id": 8171, "quality": 0.8125, "length": 13}, "so_41136606_41136930_1": {"section_id": 8172, "quality": 0.9523809523809523, "length": 20}}}, "41136930": {"ParentId": "41136606", "LastEditDate": "2017-05-23T10:30:52.590", "CommentCount": "0", "CreationDate": "2016-12-14T07:20:29.243", "OwnerUserId": "6936090", "LastEditorUserId": "-1", "PostTypeId": "2", "Id": "41136930", "Score": "1", "Body": "<p>Please check <a href=\"https://stackoverflow.com/questions/3786134/access-specifiers-and-virtual-functions\">Access specifiers and virtual functions</a>.</p>\n<p>From standard :</p>\n<blockquote>\n<p id=\"so_41136606_41136930_0\">\u00a711.5 [class.access.virt] The access rules (Clause 11) for a virtual\n  function are determined by its declaration and are not affected by the\n  rules for a function that later overrides it.</p>\n<p id=\"so_41136606_41136930_1\">Access is checked at the call point using the type of the expression\n  used to denote the object for which the member function is called. The\n  access of the member function in the class in which it was defined is\n  in general not known.</p>\n</blockquote>\n<p>If name lookup determines a viable function to be a virtual function, the access specifier of the virtual function is checked in the scope of the static type of the object expression used to name the function. At run time, the actual function to be called could be defined in the derived class with a completely different access specifier. This is because 'access specifiers' are a compile time phenomenon.</p>\n<p>Since access specifier of function <code>func()</code> is checked in the scope of <code>One *o</code>, and it is private in class <code>One</code>, it produces error.</p>\n<p>If <code>One</code>declares <code>func()</code> as public, and <code>Two</code> declares it private, there won't be any errors. See this <a href=\"https://stackoverflow.com/questions/20905213/private-function-invoked-and-it-works-could-any-of-you-reason-it-please\">Private function invoked and it works. Could any of you reason it please</a></p>\n", "LastActivityDate": "2016-12-14T07:30:06.070"}});