post_cb({"bq_ids": {"n4140": {"so_25156901_25157251_0": {"length": 19, "quality": 1.0, "section_id": 169}}, "n3337": {"so_25156901_25157251_0": {"length": 19, "quality": 1.0, "section_id": 163}}, "n4659": {"so_25156901_25157251_0": {"length": 19, "quality": 1.0, "section_id": 174}}}, "25157251": {"Id": "25157251", "PostTypeId": "2", "Body": "<p><code>std::vector&lt;NonLinearConstraint&gt;::const_iterator</code> is a dependent name - it depends on the template parameter <code>ConstraintData</code>. The standard says that (\u00a714.6 [name.res]/p2):</p>\n<blockquote>\n<p id=\"so_25156901_25157251_0\">A name used in a template declaration or definition and that is\n  dependent on a <em>template-parameter</em> is assumed not to name a type\n  unless the applicable name lookup finds a type name or the name is\n  qualified by the keyword <code>typename</code>.</p>\n</blockquote>\n<p>Therefore, you need to use</p>\n<pre><code>  typename std::vector&lt;NonLinearConstraint&gt;::const_iterator iter;\n//^^^^^^^^\n</code></pre>\n<p>Otherwise, the compiler considers <code>std::vector&lt;NonLinearConstraint&gt;::const_iterator</code> to not name a type (for all it knows, there can be a specialization of <code>std::vector</code> that defines a member variable called <code>const_iterator</code>).</p>\n<p>Modern compilers tend to give better error messages for this, though. g++ 4.8, for instance, produces:</p>\n<pre><code>test.cpp:46:2: error: need 'typename' before 'std::vector&lt;typename NloptSpace&lt;ConstraintData&gt;::NonlinearConstraint&gt;::const_iterator' because 'std::vector&lt;typename NloptSpace&lt;ConstraintData&gt;::NonlinearConstraint&gt;' is a dependent scope\n  std::vector&lt;NonLinearConstraint&gt;::const_iterator iter;\n  ^\ntest.cpp:46:51: error: expected ';' before 'iter'\n  std::vector&lt;NonLinearConstraint&gt;::const_iterator iter;\n</code></pre>\n", "LastEditorUserId": "2756719", "LastActivityDate": "2014-08-06T10:06:02.663", "Score": "1", "CreationDate": "2014-08-06T09:53:02.473", "ParentId": "25156901", "CommentCount": "2", "OwnerUserId": "2756719", "LastEditDate": "2014-08-06T10:06:02.663"}, "25156901": {"ViewCount": "214", "Body": "<p>In the context of creating a hopefully better OO wrapper around the <a href=\"http://ab-initio.mit.edu/wiki/index.php/NLopt\" rel=\"nofollow\">nlopt</a> optimization library where the objective and constraint functions signature and implementation can be defined using <a href=\"http://eigen.tuxfamily.org/index.php?title=Main_Page\" rel=\"nofollow\">Eigen</a> types I have the following problem:    </p>\n<p>This compiles:</p>\n<pre><code>namespace nlopt {\ntemplate &lt;class Data&gt;\nstruct Oracle {\n    typedef boost::tuple&lt;double, VectorXd&gt;   (*f_t) (const VectorXd&amp;, Data&amp; data);\n    typedef boost::tuple&lt;VectorXd, MatrixXd&gt; (*mf_t)(const VectorXd&amp;, Data&amp; data);\n};\n};\n\n/// Concrete Nlopt adapter search space implementation.\n/**\n * Concrete Nlopt adapter search space implementation.\n */\ntemplate &lt;class ConstraintData&gt;\nclass NloptSpace : public ContinuousSpaceInterface&lt;double, VectorXd&gt; {\npublic:\n    /// nonlinear constraints\n    struct NonlinearConstraint {\n        typename nlopt::Oracle&lt;ConstraintData&gt;::f_t func_; ConstraintData* data_; double tol_;\n        NonlinearConstraint(typename nlopt::Oracle&lt;ConstraintData&gt;::f_t func, ConstraintData* data, double tol) {\n            func_ = func;\n            data_ = data;\n            tol_ = tol;\n        }\n    };\n    // ...\n};\n\ntypedef typename NloptSpace&lt;ConstraintData&gt;::NonlinearConstraint NonLinearConstraint;\nconst std::vector&lt;NonLinearConstraint&gt;&amp; inequality_constraints = space.inequality_constraints();\n</code></pre>\n<p>However, this extra line does not compile and gives me the following totally uninformative error:</p>\n<pre><code>std::vector&lt;NonLinearConstraint&gt;::const_iterator iter;\n\nerror: expected a \";\"\n     std::vector&lt;NonLinearConstraint&gt;::const_iterator iter;\n                                                 ^\n</code></pre>\n<p>btw just in case you are wondering whether I have the correct includes this also compiles:</p>\n<pre><code>std::vector&lt;int&gt;::const_iterator iter;\n</code></pre>\n<p>and this also compiles:</p>\n<pre><code>inequality_constraints.begin(); // can't assign it to anything without the compiler error\n</code></pre>\n<p>Somehow the compiler doesn't like the <code>NonLinearConstraint</code> template as a vector const iterator but it really doesn't give any hint as to what's wrong. </p>\n<p>I don't expect anyone to help me fix the issue here but to give me a pointer how to get more information on this compiler error.</p>\n", "AcceptedAnswerId": "25157251", "Title": "error: expected a \";\" using std::vector<...>::const_iterator uninformative compilation error?", "CreationDate": "2014-08-06T09:36:08.347", "LastActivityDate": "2014-08-06T10:06:02.663", "CommentCount": "6", "LastEditDate": "2014-08-06T09:47:47.170", "PostTypeId": "1", "Tags": "<c++>", "Id": "25156901", "AnswerCount": "1", "Score": "1", "OwnerUserId": "1142881", "ClosedDate": "2014-08-06T10:36:43.977", "LastEditorUserId": "1142881"}});