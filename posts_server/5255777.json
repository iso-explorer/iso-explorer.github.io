post_cb({"bq_ids": {"n4140": {"so_5255777_5255839_5": {"length": 6, "quality": 0.75, "section_id": 3359}, "so_5255777_5255839_1": {"length": 27, "quality": 0.9310344827586207, "section_id": 3913}, "so_5255777_5255839_3": {"length": 8, "quality": 0.6153846153846154, "section_id": 3913}}, "n3337": {"so_5255777_5255839_5": {"length": 6, "quality": 0.75, "section_id": 3229}, "so_5255777_5255839_1": {"length": 27, "quality": 0.9310344827586207, "section_id": 3773}, "so_5255777_5255839_3": {"length": 13, "quality": 1.0, "section_id": 364}}, "n4659": {"so_5255777_5255839_5": {"length": 6, "quality": 0.75, "section_id": 4125}, "so_5255777_5255839_3": {"length": 7, "quality": 0.5384615384615384, "section_id": 387}}}, "5255839": {"Id": "5255839", "PostTypeId": "2", "Body": "<p>Yes, using return statements in constructors is perfectly standard. </p>\n<p>Constructors are functions that <em>do not return a value</em>. The family of functions that <em>do not return a value</em> consists of: void functions, constructors and destructors. It is stated in 6.6.3/2 in the C++ standard. The very same 6.6.3/2 states that it is illegal to use <code>return</code> with an argument in a function that does not return a value.</p>\n<blockquote>\n<p id=\"so_5255777_5255839_0\"><strong>6.6.3 The return statement</strong></p>\n<p id=\"so_5255777_5255839_1\"><strong>2</strong> A return statement without an\n  expression can be used only in\n  functions that do not return a value,\n  that is, a function with the return\n  type void, a constructor (12.1), or a\n  destructor (12.4). A return statement\n  with an expression of non-void type\n  can be used only in functions\n  returning a value; the value of the\n  expression is returned to the caller\n  of the function.</p>\n</blockquote>\n<p>Additionally, 12.1/12 states that </p>\n<blockquote>\n<p id=\"so_5255777_5255839_2\"><strong>12.1 Constructors</strong></p>\n<p id=\"so_5255777_5255839_3\"><strong>12</strong> No return type (not even void) shall\n  be specified for a constructor. A\n  return statement in the body of a\n  constructor shall not specify a return\n  value.</p>\n</blockquote>\n<p>Note, BTW, that in C++ it is legal to use <code>return</code> with an argument in a void function, as long as the argument of <code>return</code> has type <code>void</code></p>\n<pre><code>void foo() {\n  return (void) 0; // Legal in C++ (but not in C)\n}\n</code></pre>\n<p>This is not allowed in constructors though, since constructors are not void functions.</p>\n<p>There's also one relatively obscure restriction relevant to the usage of <code>return</code> with constructors: it is illegal to use <code>return</code> in function-try-block of a constructor (with other functions it is OK)</p>\n<blockquote>\n<p id=\"so_5255777_5255839_4\"><strong>15.3 Handling an exception</strong></p>\n<p id=\"so_5255777_5255839_5\"><strong>15</strong> If a return statement appears in a\n  handler of the function-try-block of a\n  constructor, the program is ill formed.</p>\n</blockquote>\n", "LastEditorUserId": "187690", "LastActivityDate": "2011-03-10T06:00:16.600", "Score": "62", "CreationDate": "2011-03-10T05:27:02.713", "ParentId": "5255777", "CommentCount": "5", "OwnerUserId": "187690", "LastEditDate": "2011-03-10T06:00:16.600"}, "5255777": {"ViewCount": "36154", "Body": "<p>What if I write return statement in constructor? Is it standard conformant?</p>\n<pre><code>struct A\n{ \n     A() { return; } \n};\n</code></pre>\n<p>The above code compiles fine, without any error at <a href=\"http://www.ideone.com/fmpsg\" rel=\"noreferrer\">ideone</a>. But the following code doesn't:</p>\n<pre><code>struct A\n{ \n   A() { return 100; } \n};\n</code></pre>\n<p>It gives this error at <a href=\"http://www.ideone.com/50kxf\" rel=\"noreferrer\">ideone</a>:</p>\n<blockquote>\n<p id=\"so_5255777_5255777_0\">error: returning a value from a constructor</p>\n</blockquote>\n<p>I understand that returning value from constructor doesn't make sense at all, because it doesn't <em>explicitly</em> mention return type, and we cannot store the returned value after all. But I'm curious to know :</p>\n<ul>\n<li>Which statement from the C++ Standard allows the first example  but forbids the second one? Is there any <em>explicit</em> statement?</li>\n<li>Is the return <em>type</em> in the first example <code>void</code>? </li>\n<li>Is there any <em>implicit</em> return type at all?</li>\n</ul>\n", "AcceptedAnswerId": "5255839", "Title": "What if I write return statement in constructor?", "CreationDate": "2011-03-10T05:18:51.003", "Id": "5255777", "CommentCount": "1", "FavoriteCount": "10", "PostTypeId": "1", "LastActivityDate": "2011-03-10T06:00:16.600", "Score": "35", "OwnerUserId": "415784", "Tags": "<c++><constructor><return-value><return><return-type>", "AnswerCount": "2"}, "5255875": {"Id": "5255875", "PostTypeId": "2", "Body": "<p>Perhaps the notion of having typeless return in constructors is to control the termination of constructor function.</p>\n<pre><code>struct A\n{ \n// more definitions     \nA() \n{ \nif( !goodToGoOn)  \n return;\n// the rest of the stuffs go here\n} \n};\n</code></pre>\n", "LastActivityDate": "2011-03-10T05:32:16.817", "CommentCount": "2", "CreationDate": "2011-03-10T05:32:16.817", "ParentId": "5255777", "Score": "4", "OwnerUserId": "326820"}});