post_cb({"31441541": {"ViewCount": "170", "Body": "<p>Cause if I define the <code>operator==</code> then comparison will be possible:</p>\n<pre><code>class My\n{\n    int x;\n    // ...\npublic:\n    My(int);\n\n    bool operator==(const My &amp; y);\n        // ...\n};\n\n//...\n\nMy one = 1;\nswitch (one)\n{\n    case 1 : // anything\n\n    default : // ...\n}\n</code></pre>\n<p>But it's possible only for integer types. Why?</p>\n", "AcceptedAnswerId": "31441831", "Title": "Why can't I use non-integral types with switch", "CreationDate": "2015-07-15T21:33:57.513", "LastActivityDate": "2015-07-16T02:07:05.447", "CommentCount": "3", "LastEditDate": "2015-07-15T22:01:17.487", "PostTypeId": "1", "Tags": "<c++><switch-statement>", "Id": "31441541", "AnswerCount": "3", "Score": "2", "OwnerUserId": "5008381", "ClosedDate": "2015-07-16T06:57:41.930", "LastEditorUserId": "3425536"}, "31441994": {"Id": "31441994", "PostTypeId": "2", "Body": "<p>You can use classes in the switch statement. </p>\n<p>According to the C++ Standard (6.4.2 The switch statement):</p>\n<blockquote>\n<p id=\"so_31441541_31441994_0\">2 The condition shall be of integral type, enumeration type, or class\n  type. If of class type, the condition is contextually implicitly\n  converted (Clause 4) to an integral or enumeration type.</p>\n</blockquote>\n<p>Here is a demonstrative program</p>\n<pre><code>#include &lt;iostream&gt;\n\nclass A\n{\n    int x;\n\npublic:\n    A( int x ) : x( x ) {}\n\n    operator int() const { return x; }\n};\n\nint main()\n{\n    A a( 2 );\n\n    switch ( a )\n    {\n        case 1:\n            std::cout &lt;&lt; \"past by\" &lt;&lt; std::endl;\n            break;\n        case 2:\n            std::cout &lt;&lt; \"Bingo!\" &lt;&lt; std::endl;\n            break;\n    }            \n}\n</code></pre>\n<p>The program output is</p>\n<pre><code>Bingo!\n</code></pre>\n", "LastEditorUserId": "19405", "LastActivityDate": "2015-07-15T22:09:53.930", "Score": "2", "CreationDate": "2015-07-15T22:05:10.997", "ParentId": "31441541", "CommentCount": "0", "OwnerUserId": "2877241", "LastEditDate": "2015-07-15T22:09:53.930"}, "31441831": {"Id": "31441831", "PostTypeId": "2", "Body": "<p>The BCPL and C languages implemented <code>switch</code> (<code>switchon</code> in BCPL) as a higher-level implementation of an <a href=\"https://en.wikipedia.org/wiki/Branch_table\" rel=\"nofollow\">assembly branch table</a>.</p>\n<p>A branch table is a very efficient implementation of an if/else chain that uses a single integer to index into an array of addresses (or address offsets).  Program control <em>jumps</em> to the address at the specified index of the table.</p>\n<p><strong><code>switch</code> requires an integer type (or a type implicitly convertible to an integer) because array-indexing requires an integer type.</strong></p>\n<p>C++ inherited the same language properties of <code>switch</code> without making significant changes.</p>\n<p>It would be <em>possible</em> to redefine the language to implement <code>switch</code> using <code>operator ==</code>, but that same behavior can already be implemented as an if/else chain.</p>\n", "LastEditorUserId": "16287", "LastActivityDate": "2015-07-16T02:07:05.447", "Score": "3", "CreationDate": "2015-07-15T21:54:07.210", "ParentId": "31441541", "CommentCount": "0", "OwnerUserId": "16287", "LastEditDate": "2015-07-16T02:07:05.447"}, "bq_ids": {"n4140": {"so_31441541_31441994_0": {"length": 17, "quality": 0.9444444444444444, "section_id": 3890}}, "n3337": {"so_31441541_31441994_0": {"length": 12, "quality": 0.6666666666666666, "section_id": 3750}}, "n4659": {"so_31441541_31441994_0": {"length": 17, "quality": 0.9444444444444444, "section_id": 4776}}}, "31442065": {"Id": "31442065", "PostTypeId": "2", "Body": "<p>You can add an <a href=\"http://en.cppreference.com/w/cpp/language/cast_operator\" rel=\"nofollow\">implicit <em>conversion operator</em></a> to your class to make this possible:</p>\n<pre><code>operator int() const { return x; }\n</code></pre>\n", "LastActivityDate": "2015-07-15T22:10:25.123", "CommentCount": "0", "CreationDate": "2015-07-15T22:10:25.123", "ParentId": "31441541", "Score": "1", "OwnerUserId": "3425536"}});