post_cb({"48032907": {"ViewCount": "377", "Body": "<p>Consider this code:</p>\n<pre><code>template &lt;typename T&gt;\nclass A {\n    T x;\n    // A bunch of functions\n};\n\nstd::size_t s = sizeof(A&lt;double&gt;);\n</code></pre>\n<p>Assume the <code>sizeof</code> operator is the only place where an instantiation of <code>A&lt;double&gt;</code> is required. Is it possible that the compiled program does <strong>not</strong> contain relevant code for <code>A&lt;double&gt;</code> (e.g. <code>A&lt;double&gt;::~A()</code>)?</p>\n", "AcceptedAnswerId": "48033000", "Title": "Is it possible that a compiled program does not contain an instantiated template class?", "CreationDate": "2017-12-30T10:10:15.563", "Id": "48032907", "CommentCount": "7", "PostTypeId": "1", "LastActivityDate": "2017-12-30T12:32:54.563", "Score": "11", "OwnerUserId": "5958455", "Tags": "<c++><template-instantiation>", "AnswerCount": "4"}, "48033684": {"Id": "48033684", "PostTypeId": "2", "Body": "<p>I have built this code:</p>\n<pre><code>#include &lt;cstddef&gt;\n\n\ntemplate &lt;typename T&gt;\nclass A {\n    T x;\n    // A bunch of functions\n};\n\n\nint main(const int argc, const char* argv[])\n{\n    std::size_t s = sizeof(A&lt;double&gt;);\n}\n</code></pre>\n<p>And launching objdump I get this output:</p>\n<pre><code>$ objdump -t a.out \n\na.out:  file format Mach-O 64-bit x86-64\n\nSYMBOL TABLE:\n0000000100000000 g     F __TEXT,__text  __mh_execute_header\n0000000100000f90 g     F __TEXT,__text  _main\n0000000000000000         *UND*  dyld_stub_binder\n</code></pre>\n<p>Where we can see that no symbols associated to constructor/destructor have been generated.</p>\n", "LastActivityDate": "2017-12-30T11:52:36.433", "Score": "0", "CreationDate": "2017-12-30T11:52:36.433", "ParentId": "48032907", "CommentCount": "0", "OwnerUserId": "4207183"}, "48033000": {"Id": "48033000", "PostTypeId": "2", "Body": "<p>The class will be instantiated, but the compiler must not instantiate any member function definition, [temp.inst]/1:</p>\n<blockquote>\n<p id=\"so_48032907_48033000_0\">[...] the class template specialization is <strong>implicitly instantiated when</strong> the specialization is referenced in a context that <strong>requires a completely-defined object type</strong>[...]</p>\n</blockquote>\n<p>[temp.inst]/2:</p>\n<blockquote>\n<p id=\"so_48032907_48033000_1\">The implicit instantiation of a class template specialization causes the <strong>implicit instantiation of the declarations, but not of the definitions</strong>, default arguments, or noexcept-specifiers <strong>of the class member functions</strong>, [...]</p>\n</blockquote>\n", "LastEditorUserId": "5632316", "LastActivityDate": "2017-12-30T12:32:54.563", "Score": "12", "CreationDate": "2017-12-30T10:22:37.567", "ParentId": "48032907", "CommentCount": "6", "OwnerUserId": "5632316", "LastEditDate": "2017-12-30T12:32:54.563"}, "bq_ids": {"n4140": {"so_48032907_48033000_1": {"length": 16, "quality": 0.8888888888888888, "section_id": 233}, "so_48032907_48033000_0": {"length": 13, "quality": 1.0, "section_id": 233}}, "n3337": {"so_48032907_48033000_1": {"length": 16, "quality": 0.8888888888888888, "section_id": 226}, "so_48032907_48033000_0": {"length": 13, "quality": 1.0, "section_id": 226}}, "n4659": {"so_48032907_48033000_1": {"length": 17, "quality": 0.9444444444444444, "section_id": 243}, "so_48032907_48033000_0": {"length": 13, "quality": 1.0, "section_id": 242}}}, "48032940": {"Id": "48032940", "PostTypeId": "2", "Body": "<p>Yes, sizeof() does not need the member functions and so they may well not be generated. All sizeof needs are the data members.</p>\n", "LastActivityDate": "2017-12-30T10:14:10.060", "Score": "0", "CreationDate": "2017-12-30T10:14:10.060", "ParentId": "48032907", "CommentCount": "0", "OwnerUserId": "7594711"}, "48032939": {"Id": "48032939", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_48032907_48032939_0\">Is it possible that the compiled program does not contain relevant code for <code>A&lt;double&gt;</code> (e.g. <code>A&lt;double&gt;::~A()</code>)?</p>\n</blockquote>\n<p>Sure that's possible. </p>\n<pre><code>std::size_t s = sizeof(A&lt;double&gt;);\n</code></pre>\n<p>is just a compile time operation, and doesn't need any runtime instance of <code>A&lt;double&gt;</code>, so there's no need for constructors, destructors, or other <em>relevant code</em>.</p>\n<hr>\n<p>Even if there would be explicit instantiations of template function code like follows</p>\n<pre><code> if(sizeof(A&lt;double&gt;) &lt;= 4) {\n      A&lt;double&gt; a; // Instantiation of constructor and destructor\n      a.x = 3.5;\n }\n</code></pre>\n<p>the compiler is allowed to optimize that code away.</p>\n</hr>", "LastEditorUserId": "8242698", "LastActivityDate": "2017-12-30T11:25:50.597", "Score": "2", "CreationDate": "2017-12-30T10:14:04.967", "ParentId": "48032907", "CommentCount": "0", "OwnerUserId": "8242698", "LastEditDate": "2017-12-30T11:25:50.597"}});