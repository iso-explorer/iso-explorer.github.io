post_cb({"bq_ids": {"n4140": {"so_32186277_32186340_0": {"length": 9, "quality": 0.8181818181818182, "section_id": 987}}, "n3337": {"so_32186277_32186340_0": {"length": 9, "quality": 0.8181818181818182, "section_id": 972}}, "n4659": {"so_32186277_32186340_0": {"length": 9, "quality": 0.8181818181818182, "section_id": 1050}}}, "32186277": {"ViewCount": "68", "Body": "<p>I am not a user of custom allocator, but I was wondering whether a custom allocator can be used to redefine the growing strategy. For example, in most implementations, a <code>std::vector</code> grows geometrically. Would it be possible to change this strategy for an arithmetic growth, like adding 10 elements everytime a reallocation is necessary. And if the answer if yes, then how to do that?</p>\n", "AcceptedAnswerId": "32186340", "Title": "Modifying growing strategy using custom allocator", "CreationDate": "2015-08-24T15:37:43.903", "Id": "32186277", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2015-08-24T15:40:15.060", "Score": "1", "OwnerUserId": "882932", "Tags": "<c++><c++11><vector><allocation><allocator>", "AnswerCount": "1"}, "32186340": {"Id": "32186340", "PostTypeId": "2", "Body": "<p>No. The reallocation strategy is defined by <code>vector</code>, not by the allocator it uses. The allocator is there only to provide the memory - it is up to the <code>vector</code> itself to tell it how much memory to provide. </p>\n<p>The standard mandates that <code>push_back</code> is amortized constant time. From [vector.modifiers]</p>\n<blockquote>\n<p id=\"so_32186277_32186340_0\">Complexity: The complexity is linear in the number of elements inserted plus the distance to the end\n  of the vector.</p>\n</blockquote>\n<p>Since <code>push_back</code> must be <code>O(1)</code>, the growth strategy of <code>vector</code> must not be arithmetic - otherwise we'd have linear-time insertion. </p>\n<p>To do what you want, you'd have to provide your own <code>vector</code>-like container and implement your own <code>push_back()</code> member function. </p>\n", "LastActivityDate": "2015-08-24T15:40:15.060", "CommentCount": "0", "CreationDate": "2015-08-24T15:40:15.060", "ParentId": "32186277", "Score": "6", "OwnerUserId": "2069064"}});