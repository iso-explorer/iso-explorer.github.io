post_cb({"bq_ids": {"n4140": {"so_16927259_16927339_0": {"length": 9, "quality": 1.0, "section_id": 705}}, "n3337": {"so_16927259_16927339_0": {"length": 9, "quality": 1.0, "section_id": 695}}, "n4659": {"so_16927259_16927339_0": {"length": 9, "quality": 1.0, "section_id": 734}}}, "16927327": {"Id": "16927327", "PostTypeId": "2", "Body": "<p>Checking if your iterator is different from <code>myContainer.end()</code> is fine. <code>cend</code>and <code>cbegin</code> methods are only here to explicitely obtain const iterators, so that makes no difference in your case.</p>\n<p>Note that you could do <code>auto found = myContainer.find(value)</code> in c++11 to infer the iterator type, and that some people will argue that <em>Standard library</em> is the correct name (not STL).</p>\n", "LastActivityDate": "2013-06-04T20:56:20.917", "CommentCount": "10", "CreationDate": "2013-06-04T20:56:20.917", "ParentId": "16927259", "Score": "1", "OwnerUserId": "1119972"}, "16927339": {"Id": "16927339", "PostTypeId": "2", "Body": "<p>All standard library containers satisfy the requirement that <code>Container::iterator</code> is convertible to <code>Container::const_iterator</code>. So both comparisons are valid and will yield the same result.</p>\n<p>From <em>\u00a723.2.1 - Table 96</em></p>\n<blockquote>\n<p id=\"so_16927259_16927339_0\"><code>X::iterator</code> <code>...</code> any iterator category that meets the forward iterator\n  requirements. convertible to <code>X::const_iterator</code>.</p>\n</blockquote>\n", "LastActivityDate": "2013-06-04T20:57:11.503", "CommentCount": "2", "CreationDate": "2013-06-04T20:57:11.503", "ParentId": "16927259", "Score": "8", "OwnerUserId": "241631"}, "16927259": {"ViewCount": "1022", "Body": "<p>I'm currently learning STL and I got some uncertainities about find and const iterators.\nLet's say I have a find function:</p>\n<pre><code>some_stl_container::const_iterator found = myContainer.find(value);\n</code></pre>\n<p>After that should I check what I got for <code>found</code> against another const_iterator, or is it \nvalid to make a check against simply an iterator.\nBasically would there be any difference between doing this:</p>\n<pre><code>if(found!=myContainer.cend())\n</code></pre>\n<p>and this:</p>\n<pre><code>if(found!=myContainer.end())\n</code></pre>\n<p>The first looks more accurate(at least to me), but the second should work fine too, right?</p>\n", "AcceptedAnswerId": "16927339", "Title": "C++ STL, constant iterators, find()", "CreationDate": "2013-06-04T20:51:54.940", "Id": "16927259", "CommentCount": "2", "PostTypeId": "1", "LastActivityDate": "2013-06-04T20:57:11.503", "Score": "6", "OwnerUserId": "2448032", "Tags": "<c++><stl><iterator><find><constants>", "AnswerCount": "2"}});