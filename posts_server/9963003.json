post_cb({"9963092": {"ParentId": "9963003", "CommentCount": "2", "Body": "<p>GCC is wrong in this case. Your integer is an rvalue and taking the address of an rvalue is illegal. </p>\n<blockquote>\n<p id=\"so_9963003_9963092_0\">\u00a75.3.1 Unary operators, Section 3</p>\n<p id=\"so_9963003_9963092_1\">The result of the unary &amp; operator is a pointer to its operand. The\n  operand shall be an lvalue or a qualified-id.</p>\n</blockquote>\n<p>Clang gives an error in this case:</p>\n<pre><code>error: taking the address of a temporary object of type 'Integer' [-Waddress-of-temporary]\n    foo( &amp;Integer(12) );\n         ^~~~~~~~~~~~\n</code></pre>\n", "OwnerUserId": "155670", "PostTypeId": "2", "Id": "9963092", "Score": "4", "CreationDate": "2012-04-01T08:47:12.267", "LastActivityDate": "2012-04-01T08:47:12.267"}, "9963036": {"ParentId": "9963003", "LastEditDate": "2012-04-01T08:47:19.840", "CommentCount": "8", "CreationDate": "2012-04-01T08:39:41.763", "OwnerUserId": "635608", "LastEditorUserId": "635608", "PostTypeId": "2", "Id": "9963036", "Score": "10", "Body": "<pre><code>Integer i(12);\nfoo(&amp;i);\n</code></pre>\n<p>That gets rid of the \"taking the address of a temporary\" problem, which is what you have. You're not passing the address of a local variable (which the above does, and is indeed ok in this case), you're grabbing the address of a temporary.</p>\n<p>Obviously, if <code>foo</code> tries to hold on to that pointer one way or another, you'll have issues down the line.</p>\n", "LastActivityDate": "2012-04-01T08:47:19.840"}, "9963003": {"CommentCount": "2", "CreationDate": "2012-04-01T08:34:58.770", "PostTypeId": "1", "AcceptedAnswerId": "9963036", "LastEditorUserId": "78712", "LastActivityDate": "2014-08-31T07:41:20.430", "LastEditDate": "2014-08-31T07:41:20.430", "ViewCount": "14181", "FavoriteCount": "1", "Title": "Taking address of temporary - workaround needed", "Id": "9963003", "Score": "8", "Body": "<p>I am facing a GCC warning that I want to fix. Basically I am passing to a method a pointer to a local variable, which in my case is perfectly OK. I understand why the compiler tells me that this is a potential problem, but in my case this is OK.</p>\n<p>How can I workaround it, on a local space? Passing <code>-fpermissive</code> when compiling will make me fail to find future problems. I want to fix this specific problem, or workaround it.</p>\n<p>Code is available here:</p>\n<pre><code>#include &lt;cstdio&gt;\n\nclass Integer{\npublic:\n    Integer(int i ){ v = i; };\n    int value(){ return v; };\nprivate:\n    int v;\n};\n\nint foo(Integer *i);\n\nint main()\n{\n    foo( &amp;Integer(12) );\n}\n\nint foo(Integer *i)\n{\n    std::printf(\"Integer = %d\\n\", i-&gt;value());\n}\n</code></pre>\n<p>And compilation gives me:</p>\n<pre><code>$ g++ test-reference.cpp -O test-reference\ntest-reference.cpp: In function \u2018int main()\u2019:\ntest-reference.cpp:15:18: error: taking address of temporary [-fpermissive]\n\n$ g++ --version\ng++ (Ubuntu/Linaro 4.6.3-1ubuntu3) 4.6.3\nCopyright (C) 2011 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n</code></pre>\n<p>EDIT:</p>\n<p>Using <code>const</code> (as in making <code>foo</code> take a const pointer, and marking <code>value()</code> as const) gives the same error.</p>\n", "Tags": "<c++><gcc><pass-by-reference>", "OwnerUserId": "78712", "AnswerCount": "3"}, "9963084": {"ParentId": "9963003", "CommentCount": "1", "Body": "<pre><code>template&lt;typename T&gt; const T* rvalue_address(const T&amp; in) {\n    return &amp;in;\n}\n</code></pre>\n<p>In my opinion, it should be just as legal to take a <code>const T*</code> as a <code>const T&amp;</code>, but this trivial function will handily perform the conversion.</p>\n", "OwnerUserId": "298661", "PostTypeId": "2", "Id": "9963084", "Score": "2", "CreationDate": "2012-04-01T08:46:04.400", "LastActivityDate": "2012-04-01T08:46:04.400"}, "bq_ids": {"n4140": {"so_9963003_9963092_1": {"section_id": 6066, "quality": 0.8181818181818182, "length": 9}}, "n3337": {"so_9963003_9963092_1": {"section_id": 5834, "quality": 0.8181818181818182, "length": 9}}, "n4659": {"so_9963003_9963092_1": {"section_id": 7562, "quality": 0.8181818181818182, "length": 9}}}});