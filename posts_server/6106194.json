post_cb({"bq_ids": {"n4140": {"so_6106194_6106240_0": {"length": 28, "quality": 0.7368421052631579, "section_id": 5908}}, "n3337": {"so_6106194_6106240_0": {"length": 28, "quality": 0.7368421052631579, "section_id": 5680}}, "n4659": {"so_6106194_6106240_0": {"length": 24, "quality": 0.631578947368421, "section_id": 7390}}}, "6106194": {"ViewCount": "2916", "Body": "<p>Should we define a <code>static const</code> member outside of the class definition even if it is initialised inside the class?</p>\n<pre><code>#include&lt;iostream&gt;  \nusing namespace std;  \nclass abc  \n{  \n    static const int period=5;  \n    int arr[period];  \n  public:  \n    void display()   \n    {   \n        cout&lt;&lt;period&lt;&lt;endl;  \n    }  \n};\n\nconst int abc::period;   \n\nint main()   \n{   \n    abc a;  \n    a.display();   \n    return 0;  \n}\n</code></pre>\n<p>After commenting <code>// const int abc::period;</code>, both versions of the code run fine on gcc 4.3.4. So I want to ask why do both versions work and which one is standard compliant?</p>\n", "AcceptedAnswerId": "6106240", "Title": "definition of static const outside the class definition", "CreationDate": "2011-05-24T05:45:21.267", "Id": "6106194", "CommentCount": "0", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2011-05-24T07:36:17.667", "LastEditorUserId": "592182", "LastActivityDate": "2011-05-24T17:42:24.507", "Score": "6", "OwnerUserId": "766438", "Tags": "<c++><c++11>", "AnswerCount": "1"}, "6106240": {"Id": "6106240", "PostTypeId": "2", "Body": "<p>You are <em>defining</em> the static member<code>period</code> by writing <code>const int abc::period;</code>. You are allowed to provide an in class initializer for <code>static const</code> member of a class but that's not definition, but that's merely a declaration.</p>\n<blockquote>\n<p id=\"so_6106194_6106240_0\">9.4.2/4 - If a static data member is of const integral or const enumeration type, its declaration in the class definition can specify a constant-initializer which shall be an integral constant expression (5.19). In that case, the member can appear in integral constant expressions. The member shall still be defined in a namespace scope if it is used in the program and the namespace scope definition shall not contain an initializer.</p>\n</blockquote>\n<p>Your code compiles even without the definition because you are not taking the address of the static member. Bjarne Stroustrup mentions in the C++-FAQ <a href=\"http://www2.research.att.com/~bs/bs_faq2.html#in-class\" rel=\"nofollow\">here</a> that <em>You can take the address of a static member if (and only if) it has an out-of-class definition</em></p>\n", "LastEditorUserId": "165520", "LastActivityDate": "2011-05-24T17:42:24.507", "Score": "8", "CreationDate": "2011-05-24T05:50:47.787", "ParentId": "6106194", "CommentCount": "10", "OwnerUserId": "165520", "LastEditDate": "2011-05-24T17:42:24.507"}});