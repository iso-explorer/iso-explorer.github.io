post_cb({"18278613": {"ParentId": "18278329", "CommentCount": "2", "Body": "<p>C++11 \u00a712.1/5 states:</p>\n<blockquote>\n<p id=\"so_18278329_18278613_0\">A <em>default</em> constructor for a class <code>X</code> is a constructor of class <code>X</code> that can be called without an argument. If there is no user-declared constructor for class <code>X</code>, a constructor having no parameters is implicitly declared as defaulted (8.4).</p>\n</blockquote>\n<p>Your <code>Base(const Base&amp;) = delete;</code> counts as a user-declared constructor, so it suppresses generation of the implicit default constructor. The workaround is of course to declare it:</p>\n<pre><code>Base() = default;\n</code></pre>\n", "OwnerUserId": "923854", "PostTypeId": "2", "Id": "18278613", "Score": "8", "CreationDate": "2013-08-16T17:03:29.633", "LastActivityDate": "2013-08-16T17:03:29.633"}, "18278329": {"CommentCount": "2", "AcceptedAnswerId": "18278613", "PostTypeId": "1", "LastEditorUserId": "500104", "CreationDate": "2013-08-16T16:46:25.457", "LastActivityDate": "2013-08-16T17:04:54.957", "LastEditDate": "2013-08-16T17:04:54.957", "ViewCount": "303", "FavoriteCount": "1", "Title": "Deleted copy constructor results in deleted default constructor", "Id": "18278329", "Score": "3", "Body": "<p>This code will not compile with gcc 4.7.0:</p>\n<pre><code>class Base\n{\npublic:\n    Base(const Base&amp;) = delete;\n}; \n\nclass Derived : Base\n{\npublic:\n    Derived(int i) : m_i(i) {}\n\n    int m_i;\n};\n</code></pre>\n<p>The error is:</p>\n<pre><code>c.cpp: In constructor \u00e2\u20ac\u02dcDerived::Derived(int)\u00e2\u20ac\u2122:\nc.cpp:10:24: error: no matching function for call to \u00e2\u20ac\u02dcBase::Base()\u00e2\u20ac\u2122\nc.cpp:10:24: note: candidate is:\nc.cpp:4:2: note: Base::Base(const Base&amp;) &lt;deleted&gt;\nc.cpp:4:2: note:   candidate expects 1 argument, 0 provided\n</code></pre>\n<p>In other words, the compiler does not generate a default constructor for the base class, and instead tries to call the <em>deleted</em> copy constructor as the only available overload.</p>\n<p>Is that normal behavior?</p>\n", "Tags": "<c++><c++11><deleted-functions>", "OwnerUserId": "865594", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_18278329_18278613_0": {"section_id": 369, "quality": 0.9444444444444444, "length": 17}}, "n3337": {"so_18278329_18278613_0": {"section_id": 359, "quality": 0.9444444444444444, "length": 17}}, "n4659": {"so_18278329_18278613_0": {"section_id": 381, "quality": 0.8333333333333334, "length": 15}}}});