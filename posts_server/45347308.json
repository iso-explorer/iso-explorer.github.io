post_cb({"45347356": {"ParentId": "45347308", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>With the preincrement you are incrementing and <strong>assigning</strong> the value to the variable again. It is like:</p>\n<pre><code>x=x+1\n</code></pre>\n<p>As the gcc documentation says:</p>\n<blockquote>\n<p id=\"so_45347308_45347356_0\">-Wunused-variable:\n      Warn whenever a local or static variable is unused aside from its declaration.</p>\n</blockquote>\n<p>If you comment that line you are not using the variable aside of the line in which you declare it</p>\n", "OwnerUserId": "8041414", "LastEditorUserId": "8041414", "LastEditDate": "2017-07-27T10:03:13.480", "Id": "45347356", "Score": "4", "CreationDate": "2017-07-27T09:57:21.073", "LastActivityDate": "2017-07-27T10:03:13.480"}, "45349486": {"ParentId": "45347308", "CommentCount": "3", "Body": "<p>As per C standard <strong>ISO/IEC 9899:201x</strong>, expressions evaluation are always executed to allow for expression's side effects to be produced unless the compiler can't be sufficiently sure that removing it the program execution is not altered.</p>\n<blockquote>\n<p id=\"so_45347308_45349486_0\"><strong>5.1.2.3 Program execution</strong></p>\n<p id=\"so_45347308_45349486_1\">In the abstract machine, all expressions are evaluated as specified by the semantics. An actual implementation need not evaluate part of an expression if it can deduce that its value is not used and that no needed side effects are produced (including any caused by calling a function or accessing a volatile object).</p>\n</blockquote>\n<p>When removing the line</p>\n<pre><code>++x;\n</code></pre>\n<p>The compiler can deduce that the local variable <code>x</code> is defined and initialized, but not used.</p>\n<p>When you add it, the expression itself can be considered a <code>void</code> expression, that <strong>must be evaluated for side effects</strong>, as stated in:</p>\n<blockquote>\n<p id=\"so_45347308_45349486_2\"><strong>6.8.3 Expression and null statements</strong></p>\n<p id=\"so_45347308_45349486_3\">The expression in an expression statement is evaluated as a void expression for its side effects.</p>\n</blockquote>\n<p>On the other hand to remove compiler warnings relative to unused variable is very common to cast the expression to void. I.e. for an unused parameter in a function you can write:</p>\n<pre><code>int MyFunc(int unused)\n{\n   (void)unused;\n   ...\n   return a;\n}\n</code></pre>\n<p>In this case we have a void expression that reference the symbol <code>unused</code>.</p>\n", "OwnerUserId": "5157478", "PostTypeId": "2", "Id": "45349486", "Score": "0", "CreationDate": "2017-07-27T11:27:42.360", "LastActivityDate": "2017-07-27T11:27:42.360"}, "45347571": {"ParentId": "45347308", "CommentCount": "0", "Body": "<p>I think there is a misconception about the word 'using' and what the compiler means with that. When you have a <code>++i</code> you are not only accessing the variable, you are even modifying it, and AFAIK this counts as 'use'.</p>\n<p>There are limitations to what the compiler can identify as 'how' variables are being used, and if the statements make any sense. In fact both clang and gcc will try to remove unnecessary statements, depending on the <code>-O</code>-flag (sometimes too aggressively). But these optimizations happen without warnings.</p>\n<p>Detecting a variable that is never ever accessed or used though (there is no further statement mentioning that variable) is rather easy.</p>\n", "OwnerUserId": "804796", "PostTypeId": "2", "Id": "45347571", "Score": "1", "CreationDate": "2017-07-27T10:05:24.820", "LastActivityDate": "2017-07-27T10:05:24.820"}, "45347308": {"CommentCount": "6", "ViewCount": "178", "PostTypeId": "1", "LastEditorUserId": "2173917", "CreationDate": "2017-07-27T09:55:17.847", "LastActivityDate": "2017-07-27T11:27:42.360", "Title": "Why gcc and clang both don't emit any warning?", "AcceptedAnswerId": "45347349", "LastEditDate": "2017-07-27T10:32:42.277", "Id": "45347308", "Score": "6", "Body": "<p>Suppose we have code like this:</p>\n<pre><code>int check(){\n    int x = 5;\n\n    ++x; /* line 1.*/\n\n    return 0;\n}\n\nint main(){\n    return check();\n}\n</code></pre>\n<p>If <code>line 1</code> is commented out and the compiler is started with all warnings enabled, it emits:</p>\n<pre class=\"lang-none prettyprint-override\"><code>warning: unused variable \u2018x\u2019 [-Wunused-variable]\n</code></pre>\n<p>However if we un-comment <code>line 1</code>, i.e. increase x, then no warning is emitted.</p>\n<p>Why is that? Increasing the variable is not really using it.</p>\n<p>This happen in both GCC and Clang for both <a class=\"post-tag\" href=\"/questions/tagged/c\" rel=\"tag\" title=\"show questions tagged 'c'\">c</a> and <a class=\"post-tag\" href=\"/questions/tagged/c%2b%2b\" rel=\"tag\" title=\"show questions tagged 'c++'\">c++</a>.</p>\n", "Tags": "<c++><c><gcc><clang><compiler-warnings>", "OwnerUserId": "964080", "AnswerCount": "7"}, "45347491": {"ParentId": "45347308", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_45347308_45347491_0\">increasing variable not really using it.</p>\n</blockquote>\n<p>Sure this is <em>using it</em>. It's doing a read and a write access on the stored object. This operation doesn't have any effect <em>in your simple toy code</em>, and the optimizer might notice that and remove the variable altogether. But the logic behind the warning is much simpler: warn <strong>iff</strong> the variable is never used.</p>\n<p>This has actually the benefit that you can silence that warning in cases where it makes sense:</p>\n<pre><code>void someCallback(void *data)\n{\n    (void)data; // &lt;- this \"uses\" data\n\n    // [...] handler code that doesn't need data\n}\n</code></pre>\n", "OwnerUserId": "2371524", "PostTypeId": "2", "Id": "45347491", "Score": "3", "CreationDate": "2017-07-27T10:02:49.733", "LastActivityDate": "2017-07-27T10:02:49.733"}, "45347530": {"ParentId": "45347308", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_45347308_45347530_0\">Why is that? increasing variable not really using it.</p>\n</blockquote>\n<p>Yes, it is really using it. At least from the language point of view. I would hope that an optimizer removes all trace of the variable.</p>\n<p>Sure, that particular use has no effect on the rest of the program, so the variable is indeed redundant. I would agree that warning in this case would be helpful. But that is not the purpose of the warning about being unused, that you mention.</p>\n<p>However, consider that analyzing whether a particular variable has any effect on the execution of the program in general is quite difficult. There has to be a point where the compiler stops checking whether a variable is actually useful. It appears that the stages that generate warnings of the compilers that you tested only check whether the variable is used at least once. That once was the increment operation.</p>\n", "OwnerUserId": "2079303", "PostTypeId": "2", "Id": "45347530", "Score": "1", "CreationDate": "2017-07-27T10:03:56.167", "LastActivityDate": "2017-07-27T10:03:56.167"}, "45347349": {"ParentId": "45347308", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Yes.</p>\n<p><code>x++</code> is the same as <code>x = x+1;</code>, the assignment. When you are assigning to something, you possibly can not <em>skip</em> using it. The result is <em>not</em> discarded.</p>\n<p>Also, from the <a href=\"https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#Warning-Options\" rel=\"nofollow noreferrer\">online gcc manual</a>, regarding <code>-Wunused-variable</code> option</p>\n<blockquote>\n<p id=\"so_45347308_45347349_0\">Warn whenever a local or static variable is <strong>unused aside from its declaration.</strong> </p>\n</blockquote>\n<p>So, when you comment the <code>x++;</code>, it satisfies the condition to generate and emit the warning message. When you uncomment, the usage is visible to the compiler (the \"usefulness\" of this particular \"usage\" is questionable, but, it's an usage, nonetheless) and no warning.</p>\n", "OwnerUserId": "2173917", "LastEditorUserId": "2173917", "LastEditDate": "2017-07-27T10:34:20.817", "Id": "45347349", "Score": "5", "CreationDate": "2017-07-27T09:57:05.860", "LastActivityDate": "2017-07-27T10:34:20.817"}, "bq_ids": {"n4140": {"so_45347308_45349486_1": {"section_id": 5797, "quality": 0.5357142857142857, "length": 15}}, "n3337": {"so_45347308_45349486_1": {"section_id": 5570, "quality": 0.5357142857142857, "length": 15}}, "n4659": {"so_45347308_45349486_1": {"section_id": 7256, "quality": 0.5357142857142857, "length": 15}}}, "45347877": {"ParentId": "45347308", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>I agree with you, it could generate a warning about this. I think it doesn't generate a warning, because developers of the compilers just didn't bothered handling this case (yet). Maybe it is because it is too complicated to do. But maybe they will do this in the future (hint: you can suggest them this warning).</p>\n<p>Compilers getting more and more warnings. For example, there is <code>-Wunused-but-set-variable</code> in GCC (which is a \"new\" warning, introduced in GCC 4.6 in 2011), which warns about this:</p>\n<pre><code>void fn() {\n    int a;\n    a = 2;\n}\n</code></pre>\n<p>So it is completely fine to expect that this emits a warning too (there is nothing different here, neither codes do anything useful):</p>\n<pre><code>void fn() {\n    int a = 1;\n    a++;\n}\n</code></pre>\n<p>Maybe they could add a new warning, like <code>-Wmeaningless-variable</code></p>\n", "OwnerUserId": "8157187", "LastEditorUserId": "8157187", "LastEditDate": "2017-07-27T10:23:00.033", "Id": "45347877", "Score": "1", "CreationDate": "2017-07-27T10:17:34.710", "LastActivityDate": "2017-07-27T10:23:00.033"}});