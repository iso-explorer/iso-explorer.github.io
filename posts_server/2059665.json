post_cb({"2060703": {"Id": "2060703", "PostTypeId": "2", "Body": "<p>I suppose it's for the same reason you cannot declare nested namespaces in one go like this:</p>\n<pre><code>namespace Company::Communications::Sockets {\n}\n</code></pre>\n<p>and you have to do this:</p>\n<pre><code>namespace Company {\n  namespace Communications {\n    namespace Sockets {\n    }\n  }\n}\n</code></pre>\n", "LastEditorUserId": "61061", "LastActivityDate": "2014-05-29T11:24:21.057", "Score": "17", "CreationDate": "2010-01-13T22:18:10.403", "ParentId": "2059665", "CommentCount": "5", "OwnerUserId": "129404", "LastEditDate": "2014-05-29T11:24:21.057"}, "2060691": {"Id": "2060691", "PostTypeId": "2", "Body": "<p>You're getting correct answers, let me just try re-wording:</p>\n<p><code>class Namespace::Class;</code></p>\n<blockquote>\n<p id=\"so_2059665_2060691_0\">Why do I have to do this?</p>\n</blockquote>\n<p>You have to do this because the term <code>Namespace::Class</code> is telling the compiler:</p>\n<blockquote>\n<p id=\"so_2059665_2060691_1\">...OK, compiler.  Go find the\n  namespace named Namespace, and within\n  that refer to the class named Class.</p>\n</blockquote>\n<p>But the compiler doesn't know what you're talking about because it doesn't know any namespace named <code>Namespace</code>.  Even if there were a namespace named <code>Namespace</code>, as in:</p>\n<pre><code>namespace Namespace\n{\n};\n\nclass Namespace::Class;\n</code></pre>\n<p>it still wouldn't work, because you can't declare a class within a namespace from outside that namespace.  You have to be in the namespace.</p>\n<p>So, you can in fact forward declare a class within a namespace.  Just do this:</p>\n<pre><code>namespace Namespace\n{\n    class Class;\n};\n</code></pre>\n", "LastEditorUserId": "6357360", "LastActivityDate": "2017-09-21T09:36:31.247", "Score": "161", "CreationDate": "2010-01-13T22:14:31.500", "ParentId": "2059665", "CommentCount": "1", "OwnerUserId": "241536", "LastEditDate": "2017-09-21T09:36:31.247"}, "47778538": {"Id": "47778538", "PostTypeId": "2", "Body": "<p>There's a lot of excellent answers about the rationale involved in disallowing it. I just want to provide the boring standardese clause the specifically prohibits it. This holds true for C++17 (n4659).</p>\n<p>The paragraph in question is <a href=\"https://timsong-cpp.github.io/cppwp/n4659/class.name#2\" rel=\"nofollow noreferrer\">[class.name]/2</a>:</p>\n<blockquote>\n<p id=\"so_2059665_47778538_0\">A declaration consisting solely of <em>class-key identifier</em>; is either a\n  redeclaration of the name in the current scope or a forward\n  declaration of the identifier as a class name. It introduces the class\n  name into the current scope.</p>\n</blockquote>\n<p>The above defines what constitutes a forward declaration (or redclaration of a class). Essentially, it must be one of <code>class identifier;</code>, <code>struct identifier;</code> or <code>union identifier;</code> where <em>identifer</em> is the common lexical definition in <a href=\"https://timsong-cpp.github.io/cppwp/n4659/lex.name\" rel=\"nofollow noreferrer\">[lex.name]</a>:</p>\n<blockquote id=\"so_2059665_47778538_1\">\n<pre><code>identifier:\n  identifier-nondigit\n  identifier identifier-nondigit\n  identifier digit\nidentifier-nondigit:\n  nondigit\n  universal-character-name\nnondigit: one of\n  a b c d e f g h i j k l m\n  n o p q r s t u v w x y z\n  A B C D E F G H I J K L M\n  N O P Q R S T U V W X Y Z _\ndigit: one of\n  0 1 2 3 4 5 6 7 8 9\n</code></pre>\n</blockquote>\n<p>Which is the production of the common scheme <code>[a-zA-Z_][a-zA-Z0-9_]*</code> we are all familiar with. As you can see, this precludes <code>class foo::bar;</code> from being a valid forward declaration, because <code>foo::bar</code> is not an identifier. It's a fully qualified name, something different.</p>\n", "LastEditorUserId": "817643", "LastActivityDate": "2017-12-12T17:50:16.480", "Score": "0", "CreationDate": "2017-12-12T17:42:57.027", "ParentId": "2059665", "CommentCount": "0", "OwnerUserId": "817643", "LastEditDate": "2017-12-12T17:50:16.480"}, "2059705": {"Id": "2059705", "PostTypeId": "2", "Body": "<p>Because you can't. In C++ language fully-qualified names are only used to refer to <em>existing</em> (i.e. previously declared) entities. They can't be used to introduce <em>new</em> entities.</p>\n<p>And you <em>are</em> in fact \"reopening\" the namespace to declare new entities. If the class <code>Class</code> is later defined as a member of different namespace - it is a completely different class that has nothing to do with the one you declared here.</p>\n<p>Once you get to the point of <em>defining</em> the pre-declared class, you don't need to \"reopen\" the namespace again. You can define it in the global namespace (or any namespace enclosing your <code>Namespace</code>) as</p>\n<pre><code>class Namespace::Class {\n  /* whatever */\n};\n</code></pre>\n<p>Since you are referring to an entity that has already been declared in namespace <code>Namespace</code>, you can use qualified name <code>Namespace::Class</code>.</p>\n", "LastEditorUserId": "187690", "LastActivityDate": "2014-08-22T04:19:32.847", "Score": "72", "CreationDate": "2010-01-13T19:46:16.543", "ParentId": "2059665", "CommentCount": "3", "OwnerUserId": "187690", "LastEditDate": "2014-08-22T04:19:32.847"}, "bq_ids": {"n4140": {"so_2059665_47778538_0": {"length": 21, "quality": 1.0, "section_id": 5857}}, "n3337": {"so_2059665_47778538_0": {"length": 21, "quality": 1.0, "section_id": 5627}}, "n4659": {"so_2059665_47778538_0": {"length": 21, "quality": 1.0, "section_id": 7336}}}, "2059665": {"ViewCount": "56790", "Body": "<pre><code>class Namespace::Class;\n</code></pre>\n<p>Why do I have to do this?:</p>\n<pre><code>namespace Namespace {\n    class Class;\n}\n</code></pre>\n<p>Using VC++ 8.0, the compiler issues:</p>\n<blockquote>\n<p id=\"so_2059665_2059665_0\">error C2653: 'Namespace' : is not a class or namespace name</p>\n</blockquote>\n<p>I assume that the problem here is that the compiler cannot tell whether <code>Namespace</code> is a class or a namespace?  But why does this matter since it's just a forward declaration?</p>\n<p>Is there another way to forward-declare a class defined in some namespace?  The syntax above feels like I'm \"reopening\" the namespace and extending its definition.  What if <code>Class</code> were not actually defined in <code>Namespace</code>?  Would this result in an error at some point?</p>\n", "AcceptedAnswerId": "2059705", "Title": "Why can't I forward-declare a class in a namespace using double colons?", "CreationDate": "2010-01-13T19:41:01.030", "LastActivityDate": "2017-12-12T18:29:07.577", "CommentCount": "4", "FavoriteCount": "32", "PostTypeId": "1", "LastEditDate": "2017-12-12T18:29:07.577", "OwnerDisplayName": "user123456", "LastEditorUserId": "5184632", "Id": "2059665", "Score": "131", "Tags": "<c++><namespaces>", "AnswerCount": "4"}});