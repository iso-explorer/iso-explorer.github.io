post_cb({"37166131": {"CommentCount": "5", "ViewCount": "2934", "PostTypeId": "1", "LastEditorUserId": "635608", "CreationDate": "2016-05-11T14:47:14.683", "LastActivityDate": "2016-05-18T16:21:36.063", "Title": "Why does the compiler match \"char\" to \"int\" but not \"short\"?", "FavoriteCount": "9", "LastEditDate": "2016-05-11T20:06:36.280", "Id": "37166131", "Score": "65", "Body": "<p>I've got a small program:</p>\n<pre><code>#include&lt;iostream&gt;\nusing namespace std;\n\nvoid f(int)   { cout &lt;&lt; \"int\\n\";   }\nvoid f(short) { cout &lt;&lt; \"short\\n\"; }\n\nint main(void){\n    char c = 0;\n    f(c);\n    return 0;\n}\n</code></pre>\n<p>It prints <code>int</code>. I felt that, if this is because of \"Integer promotion\", why  is not <code>short</code> preferred? </p>\n<p>I also know that integer promotion happens in an expression (like A=B). But I don't have expression in call to <code>f(),</code> right?</p>\n<p>If this is related to overload resolution rule, why passing <code>char</code> to f will result into compilers preferring <code>int</code> to <code>short</code>?</p>\n<p>If I delete <code>f(int)</code>, then <code>f(c)</code> will call <code>f(short)</code>!</p>\n<p>So in summary, my question is, is it related to \"Integer promotion\" or just \"overload resolution rule\"? And why?</p>\n", "Tags": "<c++><type-conversion><overloading>", "OwnerUserId": "5890784", "AnswerCount": "2"}, "37166537": {"ParentId": "37166131", "CommentCount": "3", "Body": "<p>From <a href=\"http://en.cppreference.com/w/cpp/language/implicit_conversion\">Implicit conversion</a> (cppreference):</p>\n<blockquote>\n<p id=\"so_37166131_37166537_0\">The following implicit conversions are classified as integral promotions:</p>\n<ul>\n<li>[...]</li>\n<li><code>char</code> can be converted to <code>int</code> or <code>unsigned int</code> depending on the underlying type: <code>signed char</code> or <code>unsigned char</code> (see above);</li>\n<li>[...]</li>\n</ul>\n</blockquote>\n<p>So, if there is a function <code>f(int)</code> and <code>f(short)</code>, the compiler will try to do an <b>integer promotion</b> first, if it is not possible, it will fallback to a <b>integer conversion</b>.</p>\n<p><code>char</code> to <code>int</code> is an <b>integer promotion</b> (see above), so the compiler will choose it.</p>\n<p>If there isn't any <code>f(int)</code>, the compiler will fail to find a function where it can do integer promotion, and will fallback to integer conversion. It finds a <code>f(short)</code>, and a <code>char</code> can be converted into a <code>short</code>, so it will choose it.</p>\n", "OwnerUserId": "3980929", "PostTypeId": "2", "Id": "37166537", "Score": "21", "CreationDate": "2016-05-11T15:02:41.853", "LastActivityDate": "2016-05-11T15:02:41.853"}, "bq_ids": {"n4140": {"so_37166131_37166556_1": {"section_id": 640, "quality": 0.5263157894736842, "length": 10}, "so_37166131_37166556_3": {"section_id": 611, "quality": 0.5263157894736842, "length": 10}, "so_37166131_37166556_9": {"section_id": 24, "quality": 1.0, "length": 13}, "so_37166131_37166556_5": {"section_id": 5427, "quality": 0.7142857142857143, "length": 5}, "so_37166131_37166556_4": {"section_id": 6186, "quality": 0.5714285714285714, "length": 4}, "so_37166131_37166537_0": {"section_id": 6186, "quality": 0.5714285714285714, "length": 4}, "so_37166131_37166556_7": {"section_id": 45, "quality": 0.5333333333333333, "length": 8}}, "n3337": {"so_37166131_37166556_1": {"section_id": 630, "quality": 0.5263157894736842, "length": 10}, "so_37166131_37166556_3": {"section_id": 601, "quality": 0.5263157894736842, "length": 10}, "so_37166131_37166556_9": {"section_id": 21, "quality": 1.0, "length": 13}, "so_37166131_37166556_5": {"section_id": 5222, "quality": 0.7142857142857143, "length": 5}, "so_37166131_37166556_4": {"section_id": 5947, "quality": 0.5714285714285714, "length": 4}, "so_37166131_37166537_0": {"section_id": 5947, "quality": 0.5714285714285714, "length": 4}, "so_37166131_37166556_7": {"section_id": 42, "quality": 0.5333333333333333, "length": 8}}, "n4659": {"so_37166131_37166556_4": {"section_id": 7689, "quality": 0.5714285714285714, "length": 4}, "so_37166131_37166556_3": {"section_id": 637, "quality": 0.5263157894736842, "length": 10}, "so_37166131_37166556_9": {"section_id": 24, "quality": 1.0, "length": 13}, "so_37166131_37166556_5": {"section_id": 6855, "quality": 0.7142857142857143, "length": 5}, "so_37166131_37166556_1": {"section_id": 668, "quality": 0.5263157894736842, "length": 10}, "so_37166131_37166537_0": {"section_id": 7689, "quality": 0.5714285714285714, "length": 4}, "so_37166131_37166556_7": {"section_id": 46, "quality": 0.5333333333333333, "length": 8}}}, "37166556": {"ParentId": "37166131", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2016-05-11T15:03:25.267", "Score": "61", "LastEditorUserId": "2079303", "LastEditDate": "2016-05-18T16:21:36.063", "Id": "37166556", "OwnerUserId": "2079303", "Body": "<p>(Integral) Promotion is preferred to (integral) conversion by <a href=\"http://en.cppreference.com/w/cpp/language/overload_resolution\" rel=\"nofollow\">overload resolution</a></p>\n<blockquote>\n<p id=\"so_37166131_37166556_0\"><strong>Ranking of implicit conversion sequences</strong></p>\n<p id=\"so_37166131_37166556_1\">1) Exact match: no conversion required, lvalue-to-rvalue conversion, qualification conversion, function pointer conversion, (since C++17) user-defined conversion of class type to the same class</p>\n<p id=\"so_37166131_37166556_2\"><strong>2) Promotion</strong>: integral promotion, floating-point promotion</p>\n<p id=\"so_37166131_37166556_3\"><strong>3) Conversion</strong>: integral conversion, floating-point conversion, floating-integral conversion, pointer conversion, pointer-to-member conversion, boolean conversion, user-defined conversion of a derived class to its base</p>\n</blockquote>\n<p>So, the promotion from <code>char</code> to <code>int</code> is preferred over conversion from <code>char</code> to <code>short</code>.</p>\n<hr>\n<p><em>What is promotion?</em> you may ask. It is a special kind of conversion described by the standard.</p>\n<p><em>Why is <code>char</code> to <code>short</code> not a promotion?</em>, you may continue. <a href=\"http://en.cppreference.com/w/cpp/language/implicit_conversion#Integral_promotion\" rel=\"nofollow\">Integral promotion</a> is always to <code>int</code> or a larger type. There are no promotions to <code>short</code>.</p>\n<blockquote>\n<p id=\"so_37166131_37166556_4\">The following implicit conversions are classified as integral promotions:</p>\n<ul>\n<li><p id=\"so_37166131_37166556_5\">signed char or signed short can be converted to int;</p></li>\n<li><p id=\"so_37166131_37166556_6\">unsigned char or unsigned short can be converted to int if it can hold its entire value range, and unsigned int otherwise;</p></li>\n<li><p id=\"so_37166131_37166556_7\"><strong>char can be converted to int or unsigned int</strong> depending on the underlying type: signed char or unsigned char (see above);</p></li>\n<li><p id=\"so_37166131_37166556_8\">wchar_t, char16_t, and char32_t can be converted to the first type from the following list able to hold their entire value range: int, unsigned int, long, unsigned long, long long, unsigned long long;\n      an unscoped enumeration type whose underlying type is not fixed can be converted to the first type from the following list able to hold their entire value range: int, unsigned int, long, unsigned long, long long, or unsigned long long. If the value range is greater, no integral promotions apply; </p></li>\n<li><p id=\"so_37166131_37166556_9\">an unscoped enumeration type whose underlying type is fixed can be converted to its promoted underlying type; </p>\n<p id=\"so_37166131_37166556_10\">(since C++11)</p></li>\n<li><p id=\"so_37166131_37166556_11\">a bit field type can be converted to int if it can represent entire value range of the bit field, otherwise to unsigned int if it can represent entire value range of the bit field, otherwise no integral promotions apply;\n      the type bool can be converted to int with the value false becoming \u200b0\u200b and true becoming 1. </p></li>\n</ul>\n</blockquote>\n<hr>\n<p>Standard references (current standard draft):</p>\n<p><a href=\"http://eel.is/c++draft/over.best.ics#over.ics.scs-3\" rel=\"nofollow\">[over.ics.scs] \u00a7 3</a></p>\n<p><a href=\"http://eel.is/c++draft/conv.prom#1\" rel=\"nofollow\">[conv.prom] \u00a7 1</a></p>\n</hr></hr>", "LastActivityDate": "2016-05-18T16:21:36.063"}});