post_cb({"bq_ids": {"n4140": {"so_13895989_13896077_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 532}}, "n3337": {"so_13895989_13896077_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 523}}, "n4659": {"so_13895989_13896077_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 553}}}, "13895989": {"ViewCount": "307", "Body": "<p>I know I will be punished after asking this, still I'd like to do something like this:</p>\n<pre><code>#define DEF_CLASS(x) \\ \n  #define CLASS x \\\n  #define CONSTRUCTOR CLASS::CLASS \\\n  #define COPY_CONSTRUCTOR(x) CONSTRUCTOR(const CLASS&amp; x)\n</code></pre>\n<p>That is I'd like to have a \"#define\" function which dynamically defines other \"#defines\".</p>\n<p>I have an IDE which is not capable of refactoring, furthermore I'd like to make constructors, especially copy constructor to stand out due to its special role.<br>\nTherefore I aim to program my c++ class definitions like this:</br></p>\n<pre><code>CONSTRUCTOR(int i):i(i){}\nCOPY_CONSTRUCTOR(other):i(other.i){}\nvoid CLASS::fun1()\n{\n  //...\n}\n</code></pre>\n<p>For that, currently I need to copy&amp;paste three #define lines. I would rather do those automatically. Is there any way to pull this off using the preprocessor?</p>\n", "AcceptedAnswerId": "13896036", "Title": "Can I create other #define's with a preprocessor function?", "CreationDate": "2012-12-15T20:38:17.420", "Id": "13895989", "CommentCount": "3", "LastEditDate": "2012-12-15T21:09:04.183", "PostTypeId": "1", "LastEditorUserId": "1031191", "LastActivityDate": "2012-12-15T21:09:04.183", "Score": "1", "OwnerUserId": "1031191", "Tags": "<c++><preprocessor-directive>", "AnswerCount": "2"}, "13896036": {"Id": "13896036", "PostTypeId": "2", "Body": "<p>No, such a <code>DEF_CLASS(x)</code> macro is not possible. Macros aren't stateful. The best you can do is:</p>\n<pre><code>#define CONSTRUCTOR CLASS::CLASS\n#define COPY_CONSTRUCTOR(x) CONSTRUCTOR(const CLASS&amp; x)\n\n...\n\n#define CLASS X\n    CONSTRUCTOR(int i):i(i){}\n    COPY_CONSTRUCTOR(other):i(other.i){}\n    void CLASS::fun1()\n    {\n      //...\n    }\n#undef CLASS\n\n#define CLASS Y\n    CONSTRUCTOR(int i):i(i){}\n    COPY_CONSTRUCTOR(other):i(other.i){}\n    void CLASS::fun1()\n    {\n      //...\n    }\n#undef CLASS\n</code></pre>\n<p>But I <strong>strongly</strong> urge you not to abuse the preprocessor like this. Why obfuscate the normal C++ syntax with these macros? Accept C++ for what it is; don't try to make it into a different, friendlier language.</p>\n", "LastEditorUserId": "68587", "LastActivityDate": "2012-12-15T20:58:05.630", "Score": "1", "CreationDate": "2012-12-15T20:44:31.530", "ParentId": "13895989", "CommentCount": "4", "OwnerUserId": "68587", "LastEditDate": "2012-12-15T20:58:05.630"}, "13896077": {"Id": "13896077", "PostTypeId": "2", "Body": "<p>No -- \u00a716.3.4/3: </p>\n<blockquote>\n<p id=\"so_13895989_13896077_0\">The resulting completely macro-replaced preprocessing token sequence is not processed as a preprocessing directive even if it resembles one [...]</p>\n</blockquote>\n", "LastActivityDate": "2012-12-15T20:50:01.017", "CommentCount": "0", "CreationDate": "2012-12-15T20:50:01.017", "ParentId": "13895989", "Score": "2", "OwnerUserId": "179910"}});