post_cb({"4713262": {"ParentId": "4713131", "CommentCount": "3", "Body": "<p>As they said, vector's iterators get invalidated on <code>vector::erase()</code> no matter which form of iterator increment you use. Use an integer index instead.</p>\n", "OwnerUserId": "412080", "PostTypeId": "2", "Id": "4713262", "Score": "0", "CreationDate": "2011-01-17T12:41:52.287", "LastActivityDate": "2011-01-17T12:41:52.287"}, "4713162": {"ParentId": "4713131", "CommentCount": "2", "Body": "<p>You can do that but you will have to reshuffle your <code>while()</code> a bit, I think. The <code>erase()</code> function returns an iterator to the element next after the erased one: <code>iterator erase(iterator position);</code>. Quoting from the standard from 23.1.1/7:</p>\n<blockquote>\n<p id=\"so_4713131_4713162_0\">The iterator returned from a.erase(q)\n  points to the element immediately\n  following q prior to the element being\n  erased. If no such element exists,\n  a.end() is returned.</p>\n</blockquote>\n<p>Though maybe you should be using the <a href=\"http://en.wikipedia.org/wiki/Erase-remove_idiom\">Erase-remove idiom</a> instead.</p>\n", "OwnerUserId": "341065", "PostTypeId": "2", "Id": "4713162", "Score": "13", "CreationDate": "2011-01-17T12:31:48.860", "LastActivityDate": "2011-01-17T12:31:48.860"}, "4713588": {"ParentId": "4713131", "LastEditDate": "2016-10-29T15:55:19.797", "CommentCount": "3", "CreationDate": "2011-01-17T13:20:22.520", "OwnerUserId": "437768", "LastEditorUserId": "6810625", "PostTypeId": "2", "Id": "4713588", "Score": "44", "Body": "<p>The most readable way I've done this in the past is to use <code>std::vector::erase</code> combined with <code>std::remove_if</code>.  In the example below, I use this combination to remove any number less than 10 from a vector.</p>\n<p>(<strong>For non-c++0x, you can just replace the lambda below with your own predicate:</strong>)</p>\n<pre><code>// a list of ints\nint myInts[] = {1, 7, 8, 4, 5, 10, 15, 22, 50. 29};\nstd::vector v(myInts, myInts + sizeof(myInts) / sizeof(int));\n\n// get rid of anything &lt; 10\nv.erase(std::remove_if(v.begin(), v.end(), \n                       [](int i) { return i &lt; 10; }), v.end());\n</code></pre>\n", "LastActivityDate": "2016-10-29T15:55:19.797"}, "4713131": {"CommentCount": "1", "ViewCount": "41368", "CreationDate": "2011-01-17T12:27:46.317", "LastActivityDate": "2016-10-29T15:55:19.797", "Title": "Removing item from vector while iterating?", "FavoriteCount": "6", "PostTypeId": "1", "Id": "4713131", "Score": "32", "Body": "<p>I have a vector that holds items that are either active or inactive. I want the size of this vector to stay small for performance issues, so I want items that have been marked inactive to be erased from the vector. I tried doing this while iterating but I am getting the error \"vector iterators incompatible\".</p>\n<pre><code>vector&lt;Orb&gt;::iterator i = orbsList.begin();\n\n    while(i != orbsList.end()) {\n        bool isActive = (*i).active;\n\n        if(!isActive) {\n            orbsList.erase(i++);\n        }\n        else {\n            // do something with *i\n            ++i;\n        }\n    }\n</code></pre>\n", "Tags": "<c++><stl><iterator>", "OwnerUserId": "578521", "AnswerCount": "7"}, "4713151": {"ParentId": "4713131", "LastEditDate": "2011-01-17T12:43:48.913", "CommentCount": "1", "CreationDate": "2011-01-17T12:30:36.783", "OwnerUserId": "129570", "LastEditorUserId": "129570", "PostTypeId": "2", "Id": "4713151", "Score": "2", "Body": "<p>Removing items from the middle of a vector will invalidate all iterators to that vector, so you cannot do this (<strong>update</strong>: without resorting to Wilx's suggestion).</p>\n<p>Also, if you're worried about performance, erasing items from the middle of a vector is a bad idea anyway.  Perhaps you want to use an <code>std::list</code>?</p>\n", "LastActivityDate": "2011-01-17T12:43:48.913"}, "13102374": {"ParentId": "4713131", "LastEditDate": "2015-03-12T21:57:47.383", "CommentCount": "0", "CreationDate": "2012-10-27T17:18:59.823", "OwnerUserId": "491827", "LastEditorUserId": "991816", "PostTypeId": "2", "Id": "13102374", "Score": "32", "Body": "<p>I agree with wilx's answer. Here is an implementation:</p>\n<pre><code>// curFiles is: vector &lt; string &gt; curFiles;\n\nvector&lt; string &gt;::iterator it = curFiles.begin();\n\nwhile(it != curFiles.end()) {\n\n    if(aConditionIsMet) {\n\n        it = curFiles.erase(it);\n    }\n    else ++it;\n}\n</code></pre>\n", "LastActivityDate": "2015-03-12T21:57:47.383"}, "4713424": {"ParentId": "4713131", "CommentCount": "0", "Body": "<p>You might want to consider using a <code>std::list</code> instead of a <code>std::vector</code> for your data structure. It is safer (less bug prone) to use when combining erasure with iteration.</p>\n", "OwnerUserId": "545127", "PostTypeId": "2", "Id": "4713424", "Score": "2", "CreationDate": "2011-01-17T13:02:50.820", "LastActivityDate": "2011-01-17T13:02:50.820"}, "bq_ids": {"n4140": {"so_4713131_4713162_0": {"section_id": 731, "quality": 0.9411764705882353, "length": 16}}, "n3337": {"so_4713131_4713162_0": {"section_id": 720, "quality": 0.9411764705882353, "length": 16}}, "n4659": {"so_4713131_4713162_0": {"section_id": 761, "quality": 0.9411764705882353, "length": 16}}}, "17956637": {"ParentId": "4713131", "CommentCount": "2", "Body": "<p>If someone need working on indexes</p>\n<pre><code>vector&lt;int&gt; vector;\nfor(int i=0;i&lt;10;++i)vector.push_back(i);\n\nint size = vector.size();\nfor (int i = 0; i &lt; size; ++i)\n{\n    assert(i &gt; -1 &amp;&amp; i &lt; (int)vector.size());\n    if(vector[i] % 3 == 0)\n    {\n        printf(\"Removing %d, %d\\n\",vector[i],i);\n        vector.erase(vector.begin() + i);\n    }\n\n    if (size != (int)vector.size())\n    {\n        --i;\n        size = vector.size();\n        printf(\"Go back %d\\n\",size);\n    }\n}\n</code></pre>\n", "OwnerUserId": "1052261", "PostTypeId": "2", "Id": "17956637", "Score": "4", "CreationDate": "2013-07-30T20:21:21.723", "LastActivityDate": "2013-07-30T20:21:21.723"}});