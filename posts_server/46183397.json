post_cb({"46183457": {"ParentId": "46183397", "CommentCount": "0", "Body": "<p>Yes, it will be destructed even before <code>c</code> is created, on account of being a temporary. It's lifetime is the full expression involving the function call.</p>\n<p><a href=\"http://eel.is/c++draft/class.temporary#4\" rel=\"nofollow noreferrer\">[class.temporary]/4</a>:</p>\n<blockquote>\n<p id=\"so_46183397_46183457_0\">When an implementation introduces a temporary object of a class that\n  has a non-trivial constructor ([class.ctor], [class.copy]), it shall\n  ensure that a constructor is called for the temporary object.\n  Similarly, the destructor shall be called for a temporary with a\n  non-trivial destructor ([class.dtor]). <strong>Temporary objects are\n  destroyed as the last step in evaluating the full-expression that\n  (lexically) contains the point where they were created.</strong> This is true\n  even if that evaluation ends in throwing an exception. The value\n  computations and side effects of destroying a temporary object are\n  associated only with the full-expression, not with any specific\n  subexpression.</p>\n</blockquote>\n", "OwnerUserId": "817643", "PostTypeId": "2", "Id": "46183457", "Score": "2", "CreationDate": "2017-09-12T18:46:25.810", "LastActivityDate": "2017-09-12T18:46:25.810"}, "bq_ids": {"n4140": {"so_46183397_46183457_0": {"section_id": 380, "quality": 0.9090909090909091, "length": 50}}, "n3337": {"so_46183397_46183457_0": {"section_id": 371, "quality": 0.9090909090909091, "length": 50}}, "n4659": {"so_46183397_46183457_0": {"section_id": 395, "quality": 0.9090909090909091, "length": 50}}}, "46183397": {"CommentCount": "2", "AcceptedAnswerId": "46183457", "ClosedDate": "2017-09-12T18:46:27.990", "CreationDate": "2017-09-12T18:42:49.377", "LastActivityDate": "2017-09-12T18:46:25.810", "PostTypeId": "1", "ViewCount": "41", "Title": "Scope of callee-returned object w.r.t. caller local variables?", "Id": "46183397", "Score": "0", "Body": "<p>Consider the following code example:</p>\n<pre><code>SomeClass Callee() {\n  // Option 1:\n  return SomeClass(/* initializer here */);\n\n  // Option 2:\n  SomeClass tmp(/* initializer here */);\n  // Do something to tmp here\n  return tmp;\n}\n\nvoid Caller() {\n SomeClass a(/* initializer here */);\n SomeClass b = Callee();\n SomeClass c(/* initializer here */);\n}\n</code></pre>\n<p>AFAIK, <code>b</code> will live longer than <code>c</code> in the above example, but not longer than <code>a</code>.</p>\n<p>However, what happens if the return value of <code>Callee()</code> is not assigned to any variable in <code>Caller()</code>? Will the returned object behave like <code>b</code> in the example above? Or will it be destructed before <code>c</code> is created? I guess it's the latter, just want to be sure.</p>\n<p>The code example is:</p>\n<pre><code>void Caller() {\n SomeClass a(/* initializer here */);\n Callee(); // what is the scope for the object returned by it?\n SomeClass c(/* initializer here */);\n}\n</code></pre>\n", "Tags": "<c++><scope><return-value><c++1z><local-variables>", "OwnerUserId": "1915854", "AnswerCount": "1"}});