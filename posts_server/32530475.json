post_cb({"bq_ids": {"n4140": {"so_32530475_32530759_2": {"length": 17, "quality": 1.0, "section_id": 7211}, "so_32530475_32530759_1": {"length": 38, "quality": 0.9743589743589743, "section_id": 21}, "so_32530475_32530759_0": {"length": 20, "quality": 1.0, "section_id": 5943}}, "n3337": {"so_32530475_32530759_2": {"length": 17, "quality": 1.0, "section_id": 6955}, "so_32530475_32530759_1": {"length": 38, "quality": 0.9743589743589743, "section_id": 18}, "so_32530475_32530759_0": {"length": 20, "quality": 1.0, "section_id": 5714}}, "n4659": {"so_32530475_32530759_2": {"length": 17, "quality": 1.0, "section_id": 8720}, "so_32530475_32530759_1": {"length": 38, "quality": 0.9743589743589743, "section_id": 21}, "so_32530475_32530759_0": {"length": 20, "quality": 1.0, "section_id": 7428}}}, "32530575": {"Id": "32530575", "PostTypeId": "2", "Body": "<p>integral types smaller than int are promoted to int when operations are performed on them</p>\n", "LastActivityDate": "2015-09-11T19:09:58.277", "CommentCount": "7", "CreationDate": "2015-09-11T19:09:58.277", "ParentId": "32530475", "Score": "8", "OwnerUserId": "173397"}, "32530759": {"Id": "32530759", "PostTypeId": "2", "Body": "<p>C++ Standard:\n5.10</p>\n<blockquote>\n<p id=\"so_32530475_32530759_0\">\u2014 Otherwise, the integral promotions (4.5) shall be performed on both\n  operands. Then the following rules shall be applied to the promoted\n  operands: \n  \u2014 If both operands have the same type, no further conversion\n  is needed.</p>\n</blockquote>\n<p>4.5.1  Integral promotions</p>\n<blockquote>\n<p id=\"so_32530475_32530759_1\">A prvalue of an integer type other than bool, char16_t, char32_t, or\n  wchar_t whose integer conversion rank (4.13) is less than the rank of\n  int can be converted to a prvalue of type int if int can represent all\n  the values of the source type; otherwise, the source prvalue can be\n  converted to a prvalue of type unsigned int.</p>\n</blockquote>\n<p>This is most probably the reason:</p>\n<p>3.9.1 Fundamental types</p>\n<blockquote>\n<p id=\"so_32530475_32530759_2\">Plain ints have the natural size suggested by the architecture of the\n  execution environment; the other signed integer types are provided\n  to meet special needs.</p>\n</blockquote>\n", "LastEditorUserId": "432358", "LastActivityDate": "2015-09-11T19:29:59.150", "Score": "1", "CreationDate": "2015-09-11T19:23:15.823", "ParentId": "32530475", "CommentCount": "3", "OwnerUserId": "432358", "LastEditDate": "2015-09-11T19:29:59.150"}, "32530475": {"ViewCount": "78", "Body": "<h2>Update</h2>\n<p>Can anyone explain the reason for promoting <code>uint8_t</code> to <code>int</code>? What are the use cases for this behavior? And can I prevent the promoting?</p>\n<hr>\n<p>I have these very simple code snippets which add two integer types together and print the result. I have compiled those <em>without any optimization</em> with <code>g++ --std=c++11 main.cpp -o test</code></p>\n<pre><code>int main()\n{\n    uint8_t a = 200, b = 100;\n    uint16_t result = (a + b);\n\n    printf(\"result is %d\\n\", result);\n}\n</code></pre>\n<p>Outputs:</p>\n<blockquote>\n<p id=\"so_32530475_32530475_0\">result is 300</p>\n</blockquote>\n<p>I would have expected <code>(a + b)</code> to evaluate to <code>44</code> because they are both of an 8-bit type and should overflow. But instead I get the unexpected result of <code>300</code>.</p>\n<hr>\n<p>If I re-run the same test with <code>uint32_t</code> and <code>uint64_t</code>, it is overflowing as expected:</p>\n<pre><code>int main()\n{\n    uint32_t a = UINT_MAX, b = UINT_MAX;\n    uint64_t result = (a + b);\n\n    printf(\"result is %ld\\n\", result);\n}\n</code></pre>\n<p>Outputs:</p>\n<blockquote>\n<p id=\"so_32530475_32530475_1\">result is 4294967294</p>\n</blockquote>\n<p>Now I can't tell why <code>uint8_t</code> is treated differently to <code>uint32_t</code>.</p>\n</hr></hr>", "AcceptedAnswerId": "32530575", "Title": "Overflow expected but adding two bytes does not", "CreationDate": "2015-09-11T19:04:15.357", "Id": "32530475", "CommentCount": "5", "LastEditDate": "2015-09-11T19:19:10.210", "PostTypeId": "1", "LastEditorUserId": "1683939", "LastActivityDate": "2015-09-11T19:29:59.150", "Score": "2", "OwnerUserId": "1683939", "Tags": "<c++><integer-overflow>", "AnswerCount": "2"}});