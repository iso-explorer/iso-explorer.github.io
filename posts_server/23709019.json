post_cb({"bq_ids": {"n4140": {"so_23709019_23720793_1": {"section_id": 7047, "quality": 1.0, "length": 10}, "so_23709019_23720793_4": {"section_id": 5465, "quality": 0.9736842105263158, "length": 37}, "so_23709019_23709019_1": {"section_id": 7047, "quality": 1.0, "length": 22}, "so_23709019_23720793_3": {"section_id": 7079, "quality": 1.0, "length": 41}, "so_23709019_23720793_0": {"section_id": 7047, "quality": 1.0, "length": 11}, "so_23709019_23720793_5": {"section_id": 5462, "quality": 0.9215686274509803, "length": 47}, "so_23709019_23709019_0": {"section_id": 7047, "quality": 1.0, "length": 11}, "so_23709019_23720793_2": {"section_id": 7047, "quality": 1.0, "length": 28}}, "n3337": {"so_23709019_23720793_1": {"section_id": 6792, "quality": 1.0, "length": 10}, "so_23709019_23720793_0": {"section_id": 6792, "quality": 1.0, "length": 11}, "so_23709019_23709019_0": {"section_id": 6792, "quality": 1.0, "length": 11}, "so_23709019_23720793_3": {"section_id": 6823, "quality": 1.0, "length": 41}, "so_23709019_23709019_1": {"section_id": 6792, "quality": 1.0, "length": 22}, "so_23709019_23720793_5": {"section_id": 5249, "quality": 0.9215686274509803, "length": 47}, "so_23709019_23720793_2": {"section_id": 6792, "quality": 1.0, "length": 28}}, "n4659": {"so_23709019_23720793_1": {"section_id": 8544, "quality": 1.0, "length": 10}, "so_23709019_23720793_4": {"section_id": 6899, "quality": 0.9736842105263158, "length": 37}, "so_23709019_23709019_1": {"section_id": 8544, "quality": 1.0, "length": 22}, "so_23709019_23720793_3": {"section_id": 8580, "quality": 1.0, "length": 41}, "so_23709019_23720793_0": {"section_id": 8544, "quality": 1.0, "length": 11}, "so_23709019_23720793_5": {"section_id": 6896, "quality": 0.9215686274509803, "length": 47}, "so_23709019_23709019_0": {"section_id": 8544, "quality": 1.0, "length": 11}, "so_23709019_23720793_2": {"section_id": 8544, "quality": 1.0, "length": 28}}}, "23709019": {"CommentCount": "4", "ViewCount": "344", "PostTypeId": "1", "OwnerDisplayName": "user2953119", "CreationDate": "2014-05-17T08:01:57.827", "LastActivityDate": "2014-05-20T15:19:01.213", "LastEditDate": "2014-05-17T18:39:38.323", "AcceptedAnswerId": "23720793", "LastEditorDisplayName": "user2953119", "Title": "More than one enum declaration", "Id": "23709019", "Score": "4", "Body": "<p>There is the quote from the sec. 3.3.1/4 of N3797 working draft:</p>\n<blockquote>\n<p id=\"so_23709019_23709019_0\">Given a set of declarations in a single declarative region, each of\n  which specifies the same unqualified name,</p>\n<p id=\"so_23709019_23709019_1\">\u2014 exactly one declaration shall declare a class name or enumeration\n  name that is not a typedef name and the other declarations shall all\n  refer to the same variable or enumerator, or all refer to functions\n  and function templates;</p>\n</blockquote>\n<p>We can declare <code>enum</code> type name several times in a single declarative region:</p>\n<pre><code>enum A; // declared first time, the other declaration with the same\n        // unqualified name shall all refer to the same variable or enumeration.\nenum A; // This and the other declarations shall all refer to the that enumeration\nextern int A; // Fail, now enum A is hidden and we can access it\n              // via elaborated-type-specifier only\n</code></pre>\n<p>I'm confused. Can you explain this behavior? I would like to find corresponding references to the current working draft.</p>\n", "Tags": "<c++><enums><language-lawyer>", "AnswerCount": "2"}, "23713269": {"ParentId": "23709019", "CommentCount": "1", "Body": "<p>I think you are doing it wrong. Enumerator (enum) is a type, if you write<br>\n<code>enum A;</code><br>\n You are giving a name to this type, but still you don't have any variables. There are two possible ways for declaration.\n1. You can write:<br>\n<code>enum A { a, b, c };</code><br>\n, now you have 3 variables { a, b, c }, their type is enum and the name of the type is A. The second way is:<br>\n<code>enum NAME; \nNAME var1;\nNAME var2;</code><br>\nYou also can have unnamed variables:<br>\n<code>enum { a, b, c };</code><br>\nThis is used when you want names for constants but don't plan to use the type to declare variables, function arguments, etc. </br></br></br></br></br></br></br></br></p>\n", "OwnerUserId": "3311754", "PostTypeId": "2", "Id": "23713269", "Score": "0", "CreationDate": "2014-05-17T15:48:38.290", "LastActivityDate": "2014-05-17T15:48:38.290"}, "23720793": {"ParentId": "23709019", "LastEditDate": "2014-05-20T15:19:01.213", "CommentCount": "7", "CreationDate": "2014-05-18T10:08:20.447", "OwnerUserId": "1105562", "LastEditorUserId": "1105562", "PostTypeId": "2", "Id": "23720793", "Score": "2", "Body": "<p>The full quote n3797 3.3.1/4 is:</p>\n<blockquote>\n<p id=\"so_23709019_23720793_0\">Given a set of declarations in a single declarative region, each of which specifies the same unqualified name,</p>\n<p id=\"so_23709019_23720793_1\">\u2014 they shall all refer to the same entity, or all refer to functions and function templates; or</p>\n<p id=\"so_23709019_23720793_2\">\u2014 exactly one declaration shall declare a class name or enumeration name that is not a typedef name\n  and the other declarations shall all refer to the same variable or enumerator, or all refer to functions and function templates; in this case the class name or enumeration name is hidden.</p>\n</blockquote>\n<p>The code you wrote is wrong. See S7.2 for the required syntax, which may be any of these:</p>\n<pre><code>enum A : int; // declaration (and it is an enumeration name)\nenum A : int; // refers to the same entity\n\nenum struct A; // declaration (and it is an enumeration name)\nenum struct A; // refers to the same entity\n\nenum A {}; // declaration (and it is an enumeration name)\nenum A {}; // refers to the same entity\n</code></pre>\n<p>Then the following may occur later in the translation unit.</p>\n<pre><code>extern int A; // declaration hides enumeration name\n\nvoid f() {\n  A j = A.a; // illegal. A is hidden\n  int k = A; // legal\n}\n</code></pre>\n<p>See n3797 3.3.10/2:</p>\n<blockquote>\n<p id=\"so_23709019_23720793_3\">A class name (9.1) or enumeration name (7.2) can be hidden by the name of a variable, data member,\n  function, or enumerator declared in the same scope. If a class or enumeration name and a variable, data member, function, or enumerator are declared in the same scope (in any order) with the same name, the class or enumeration name is hidden wherever the variable, data member, function, or enumerator name is visible.</p>\n</blockquote>\n<p>So the last A hides the earlier ones. Is that what you were asking?</p>\n<hr>\n<p>Re the question: is the program well-formed? Obviously these are just fragments, and no complete program has been presented, but would it be legal if these were the only references to <code>A</code>? My answer is yes. S7.2/6 says:</p>\n<blockquote>\n<p id=\"so_23709019_23720793_4\">An enumeration whose underlying type is fixed is an incomplete type from its point of declaration (3.3.2) to immediately after its enum-base (if any), at which point it becomes a complete type. An enumeration whose underlying type is not fixed is an incomplete type from its point of declaration to immediately after the closing } of its enum-specifier, at which point it becomes a complete type.</p>\n</blockquote>\n<p>So in each of the examples given A is a complete type as shown. The 7.2/3 says:</p>\n<blockquote>\n<p id=\"so_23709019_23720793_5\">An opaque-enum-declaration is either a redeclaration of an enumeration in the current scope or a declaration of a new enumeration. [ Note: An enumeration declared by an opaque-enum-declaration has fixed underlying type and is a complete type. The list of enumerators can be provided in a later redeclaration with an enumspecifier. \u2014end note ] A scoped enumeration shall not be later redeclared as unscoped or with a different underlying type. An unscoped enumeration shall not be later redeclared as scoped and each redeclaration shall include an enum-base specifying the same underlying type as in the original declaration.</p>\n</blockquote>\n<p>So it seems that these declarations can be repeated as long as the attributes and base are the same, but perhaps not once the list of enumerators has been provided.</p>\n<p>For the first two it would seem the program is well-formed, but perhaps not for the last.</p>\n</hr>", "LastActivityDate": "2014-05-20T15:19:01.213"}});