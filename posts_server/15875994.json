post_cb({"15876116": {"CommentCount": "1", "Body": "<p>This should be safe from a memory perspective. </p>\n<p>Just bear in mind that if the content of your vector is not a plain data type, you shouldn't be doing this sort of thing. </p>\n", "CreationDate": "2013-04-08T09:50:49.740", "ParentId": "15875994", "Id": "15876116", "LastActivityDate": "2013-04-08T09:50:49.740", "PostTypeId": "2", "Score": "1", "OwnerUserId": "1919155"}, "bq_ids": {"n4140": {"so_15875994_15876040_1": {"length": 16, "quality": 0.8888888888888888, "section_id": 955}}, "n3337": {"so_15875994_15876040_1": {"length": 16, "quality": 0.8888888888888888, "section_id": 943}}}, "15876267": {"CommentCount": "0", "Body": "<p>memset fails with vector of bool type, just try below example, though as other mentioned it work for other plain data type.I shared it just to make it explicit its not true for all plain data types.</p>\n<pre><code>#include &lt;vector&gt;\nusing namespace std;\nint _tmain(int argc, _TCHAR* argv[])\n{\n    vector&lt;bool&gt;vec;\n    vec.push_back(0);\n    vec.push_back(1);\n    memset(&amp;vec[0], 0, sizeof(vec[0]) * vec.size());\n    return 0;\n}\n</code></pre>\n", "CreationDate": "2013-04-08T09:57:56.597", "ParentId": "15875994", "Id": "15876267", "LastActivityDate": "2013-04-08T09:57:56.597", "PostTypeId": "2", "Score": "1", "OwnerUserId": "1012551"}, "15876040": {"LastActivityDate": "2013-04-08T09:56:36.110", "CommentCount": "5", "Body": "<blockquote>\n<p id=\"so_15875994_15876040_0\">would std::vector implementations always guarantee that memory\n  allocation for the data will be contiguous</p>\n</blockquote>\n<p>Yes. <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf\" rel=\"nofollow\">23.3.6.1/1</a>. In C++03 standard there are equal strings at 23.2.4/1\n<blockquote><p id=\"so_15875994_15876040_1\">\n<strong>The elements of a\nvector are stored contiguously</strong>, meaning that if v is a vector where T is some type other\nthan bool, then it obeys the identity &amp;v[n] == &amp;v[0] + n for all 0 &lt;= n &lt; v.size()</p></blockquote></p>\n<blockquote>\n<p id=\"so_15875994_15876040_2\">Is it possible that in a future(or different) implementation of the\n  stl library that this might change and break my code later?</p>\n</blockquote>\n<p>No. Vector should be contiguous always.</p>\n<p>However, in gcc 4.6.3 there is only one optimization of fill, using memset. This optimization is for char types</p>\n<pre><code>  // Specialization: for char types we can use memset.\n  template&lt;typename _Tp&gt;\n    inline typename\n    __gnu_cxx::__enable_if&lt;__is_byte&lt;_Tp&gt;::__value, void&gt;::__type\n    __fill_a(_Tp* __first, _Tp* __last, const _Tp&amp; __c)\n    {\n      const _Tp __tmp = __c;\n      __builtin_memset(__first, static_cast&lt;unsigned char&gt;(__tmp),\n               __last - __first);\n    }\n</code></pre>\n", "CreationDate": "2013-04-08T09:47:32.033", "LastEditDate": "2013-04-08T09:56:36.110", "ParentId": "15875994", "Id": "15876040", "LastEditorUserId": "1498580", "PostTypeId": "2", "Score": "4", "OwnerUserId": "1498580"}, "15875994": {"CreationDate": "2013-04-08T09:45:12.507", "ViewCount": "2889", "FavoriteCount": "2", "Id": "15875994", "AcceptedAnswerId": "15876040", "Score": "4", "Title": "memset on vector<int>", "LastEditorUserId": "-1", "CommentCount": "2", "Body": "<p>As per <a href=\"https://stackoverflow.com/a/1665038/409263\">Mark Ransoms answer</a> on using memset, i am using memset on a <code>vector&lt;int&gt;</code> to assign values to all the elements.     </p>\n<pre><code>memset(&amp;match_begin[0], 0xff , sizeof(match_begin[0]) * match_begin.size());\n</code></pre>\n<p>It does have a significant performance improvement over <code>std::fill</code> and it works fine(g++ 4.3.2, 64bit linux). Is this code safe , as in , would std::vector implementations always guarantee that memory allocation for the data will be contiguous? Is it possible that in a future(or different) implementation of the stl library that this might change and break my code later?</p>\n", "Tags": "<c++><vector><stl><memset>", "LastEditDate": "2017-05-23T12:13:01.563", "LastActivityDate": "2013-04-08T09:57:56.597", "PostTypeId": "1", "AnswerCount": "3", "OwnerUserId": "409263"}});