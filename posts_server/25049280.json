post_cb({"25049280": {"CommentCount": "10", "ViewCount": "69", "PostTypeId": "1", "LastEditorUserId": "14860", "CreationDate": "2014-07-31T00:52:22.857", "LastActivityDate": "2014-07-31T01:35:52.277", "Title": "Function with no return statement but compiled and returned right answer", "AcceptedAnswerId": "25049289", "LastEditDate": "2014-07-31T01:34:39.230", "Id": "25049280", "Score": "0", "Body": "<p>In the section of the code below, there is no return statement in the function but it still compiled and gave the right answer. Is this a normal behavior?</p>\n<pre><code>#include &lt;iostream&gt;\n\nint multiply (int x, int y) {\n    int product = x * y;\n}\n\nint main (int argc, char **argv) {\n    std::cout &lt;&lt; multiply(4, 5) &lt;&lt; std::endl;\n    return 0;\n }\n</code></pre>\n", "Tags": "<c++>", "OwnerUserId": "3067055", "AnswerCount": "1"}, "25049289": {"ParentId": "25049280", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>No, getting the correct answer from the function is not normal behaviour, it's a coincidence. You should <em>not</em> rely on this. </p>\n<p>From C++03, <code>6.6.3 The return statement /2</code> (and the same section for C++11 as well):</p>\n<blockquote>\n<p id=\"so_25049280_25049289_0\">Flowing off the end of a function is equivalent to a return with no value; this results in undefined behavior in a value-returning function.</p>\n</blockquote>\n<p>You'll <em>probably</em> find that you're getting the correct answer simply because of the side effects of your calling convention.</p>\n<p>For example, if a function value is returned in the (mtyhical) <code>r0</code> register, it may be that the <em>calculation</em> uses that register within the function to hold the value, before storing it into the memory representing the <code>product</code> variable. So the fact it's in <code>r0</code> when you return is just a hang-over from the way things are done.</p>\n<p>Compiling with different levels of optimisation, or using another compiler, or even compiling on a Tuesday evening during a blue moon may affect the outcome, that's the main problem with undefined behaviour - it's untrustworthy. At a bare minimum, a good compiler would have warned you about this.</p>\n", "OwnerUserId": "14860", "LastEditorUserId": "14860", "LastEditDate": "2014-07-31T01:35:52.277", "Id": "25049289", "Score": "5", "CreationDate": "2014-07-31T00:53:34.657", "LastActivityDate": "2014-07-31T01:35:52.277"}, "bq_ids": {"n4140": {"so_25049280_25049289_0": {"section_id": 3913, "quality": 1.0, "length": 12}}, "n3337": {"so_25049280_25049289_0": {"section_id": 3773, "quality": 1.0, "length": 12}}, "n4659": {"so_25049280_25049289_0": {"section_id": 4799, "quality": 0.75, "length": 9}}}});