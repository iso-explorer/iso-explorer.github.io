post_cb({"bq_ids": {"n4140": {"so_8436856_8436955_1": {"length": 28, "quality": 0.9333333333333333, "section_id": 455}, "so_8436856_8436955_0": {"length": 23, "quality": 0.92, "section_id": 451}, "so_8436856_8436953_0": {"length": 7, "quality": 0.7, "section_id": 451}}, "n3337": {"so_8436856_8436955_1": {"length": 28, "quality": 0.9333333333333333, "section_id": 446}, "so_8436856_8436955_0": {"length": 23, "quality": 0.92, "section_id": 442}, "so_8436856_8436953_0": {"length": 9, "quality": 0.9, "section_id": 448}}, "n4659": {"so_8436856_8436955_1": {"length": 28, "quality": 0.9333333333333333, "section_id": 478}, "so_8436856_8436955_0": {"length": 23, "quality": 0.92, "section_id": 474}, "so_8436856_8436953_0": {"length": 8, "quality": 0.8, "section_id": 474}}}, "8436955": {"Id": "8436955", "PostTypeId": "2", "Body": "<p><code>complex(complex)</code> is not a copy constructor. It's ill-formed, and should be rejected by compiler. There is no infinite recursion, because you simply cannot define a constructor like that.</p>\n<blockquote>\n<p id=\"so_8436856_8436955_0\">A non-template constructor for class X is a copy constructor if its \ufb01rst parameter is of type X&amp;, const X&amp;, volatile X&amp; or const volatile X&amp;, and either there are no other parameters or else all other parameters have default arguments (8.3.6).</p>\n<p id=\"so_8436856_8436955_1\">A declaration of a constructor for a class X is ill-formed if its \ufb01rst parameter is of type (optionally cv-quali\ufb01ed)\n  X and either there are no other parameters or else all other parameters have default arguments. A member\n  function template is never instantiated to produce such a constructor signature.</p>\n</blockquote>\n", "LastActivityDate": "2011-12-08T20:05:19.137", "CommentCount": "6", "CreationDate": "2011-12-08T20:05:19.137", "ParentId": "8436856", "Score": "2", "OwnerUserId": "16102"}, "8436856": {"ViewCount": "509", "Body": "<p>Consider this piece of code:</p>\n<pre><code>class complex{\n        private:\n                double re, im;\n        public:\n                complex(double _re, double _im):re(_re),im(_im){}\n                complex(complex c):re(c.re),im(c.im){}\n};\n</code></pre>\n<p>I already knew that the copy constructor <code>complex(complex c)</code> will cause infinite recursion.</p>\n<p>However, it should only pick const reference copy constructor <code>complex(const complex &amp;c)</code> as the function for copying, since this is the default behavior if it is not explicitly specified. Every thing else is excluded, such as <code>complex(complex c)</code>.</p>\n<p>Why does it apply the function with pass by value here? Or both are copy constructors, except the pass by value cannot be modified and is used to pass to other functions rather than its constructor?</p>\n<p>I think in Java, it is permitted to do like that, since it will just copy the object into the constructor.</p>\n", "Title": "C++ has two copy constructors, both by reference and by value?", "CreationDate": "2011-12-08T19:57:59.637", "LastActivityDate": "2011-12-08T20:18:08.210", "CommentCount": "4", "LastEditDate": "2011-12-08T20:04:52.950", "PostTypeId": "1", "LastEditorUserId": "496700", "Id": "8436856", "Score": "1", "OwnerUserId": "496700", "Tags": "<c++><copy-constructor>", "AnswerCount": "3"}, "8436953": {"Id": "8436953", "PostTypeId": "2", "Body": "<p>A copy constructor <em>must</em> be in on of the following forms:</p>\n<pre><code>T(T&amp;);\nT(const T&amp;);\n</code></pre>\n<p>That is, a constructor is a <em>copy constructor</em> <strong>only</strong> if it takes a single parameter of reference class type.  A constructor that takes a single parameter of class type by-value is, by definition, not a copy constructor (edit) -- and in fact is illegal, as pointed out by Cat Plus Plus.</p>\n<h2>12.1 : Constructors</h2>\n<blockquote>\n<p id=\"so_8436856_8436953_0\">10/A copy constructor for a class X is a constructor with a first parameter of type X&amp; or of type const X&amp;</p>\n</blockquote>\n<p>Beyond this Standardese, however, is a fundamental error in your understanding of the copy constructor.  Consider the following code:</p>\n<pre><code>class Foo\n{\npublic:\n  Foo() {}\n  Foo(Foo f) {/*...*/};\n};\n\nint main()\n{\n  Foo f1;\n  Foo f2(f1);\n}\n</code></pre>\n<p>When <code>f2</code> is constructed <code>f1</code> is passed by-value.  In order to evaluate the parameters for the constructor call, <code>f1</code> must be copied.  So, you see there is a paradox here.  In order to call the copy constructor, you must make a copy.  In order to make a copy, you must call the copy constructor...</p>\n<p>The above must call the constructor with an argument by-value simply because that is what the type of the parameter <strong>is</strong>:  it's a <code>Foo</code> by-value.  It it were not by-value, it would have to be either by reference, which looks like this:</p>\n<pre><code>Foo(Foo&amp; rhs)\n/* or like this: */ Foo(const Foo&amp; rhs);\n</code></pre>\n<p>...or it must take it by pointer, which looks like this:</p>\n<pre><code>Foo(Foo* prhs)\n</code></pre>\n<p>...but, in the latter case, this is obviously not a copy constructor given the definition above.</p>\n", "LastEditorUserId": "46642", "LastActivityDate": "2011-12-08T20:14:06.517", "Score": "3", "CreationDate": "2011-12-08T20:05:09.953", "ParentId": "8436856", "CommentCount": "11", "OwnerUserId": "241536", "LastEditDate": "2011-12-08T20:14:06.517"}, "8437124": {"Id": "8437124", "PostTypeId": "2", "Body": "<p>Answer to Java question since all other possible explanations are given:</p>\n<pre><code>//java code\n\npublic class Bar{\n  private int foo;\n\n  public Bar() { } // public no-args constructor\n  public Bar(Bar b) { foo = b.foo; }  // copy constructor\n}\n</code></pre>\n<p>In Java objects are references and not value objects like they are in C++. In C++ when you copy an object you create a copy of the object's state, internal variables etc. In Java it simply copies the reference. The object's state is not copied so there is actually no need to call the copy constructor like you do it in C++.</p>\n", "LastActivityDate": "2011-12-08T20:18:08.210", "CommentCount": "3", "CreationDate": "2011-12-08T20:18:08.210", "ParentId": "8436856", "Score": "1", "OwnerUserId": "880096"}});