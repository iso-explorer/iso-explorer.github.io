post_cb({"bq_ids": {"n4140": {"so_8108117_8108117_0": {"length": 5, "quality": 0.625, "section_id": 3913}}, "n3337": {"so_8108117_8108117_0": {"length": 5, "quality": 0.625, "section_id": 3773}}, "n4659": {"so_8108117_8108117_0": {"length": 6, "quality": 0.75, "section_id": 7709}}}, "8108117": {"ViewCount": "1135", "Body": "<p>I am using Microsoft Visual Studio 2010 and the OpenCV 2.3.0 libraries to write up an application for image processing.</p>\n<p>I have a piece of code that is erroneous for me and I am not sure how to fix it. I am implementing an application where there will be 2 or 3 windows open at the same time and I want each one of them to be assigned with a different <strong>CvMouseCallback</strong> function. I want all these <strong>CvMouseCallback</strong> functions to be in a different class together with another function that returns a pointer to one of these functions according to what the user selects.</p>\n<p>My <strong>Window.h</strong> contains this piece of code.</p>\n<pre><code>class Window\n{\npublic:\n   ... // constructors and destructors\n   void setMouseHandler( CvMouseCallback mouseHandler );\nprivate:\n   ... // other stuff\n};\n</code></pre>\n<p>and <strong>Window.cpp</strong></p>\n<pre><code>#include \"stdafx.h\"\n\nvoid Window::setMouseHandler( CvMouseCallback mouseHandler )\n{\n    cvSetMouseCallback( win, mouseHandler, NULL );\n}\n</code></pre>\n<p>Now, the <strong>MouseHandler.h</strong> file</p>\n<pre><code>class MouseHandler\n{\npublic:\n   ...\n   CvMouseCallback selectHandler( int option );\n   void __cdecl selectROI( int event, int x, int y, int flags, void *param );\n\nprivate:\n   Image *in;\n   Window *win;\n   void ( CV_CDECL MouseHandler::*callback )( int event, int x, int y, int flags, void *param );\n};\n</code></pre>\n<p>and lastly, in <strong>MouseHandler.cpp</strong> I contain</p>\n<pre><code>void __cdecl MouseHandler::selectROI( int event, int x, int y, int flags, void *param )\n{\n   //do something\n}\n\nCvMouseCallback MouseHandler::selectHandler( int option )\n{\n   callback = (MouseHandler::selectROI);\n   return callback;\n}\n</code></pre>\n<p>The last bit of information you might need is the definition of CvMouseCallback from the OpenCV library which is</p>\n<pre><code>typedef void (CV_CDECL *CvMouseCallback )(int event, int x, int y, int flags, void* param);\n</code></pre>\n<p>Now, the question is: When I return the callback from the last function in MouseHandler.cpp it is underlined with an error saying:</p>\n<blockquote>\n<p id=\"so_8108117_8108117_0\">Error: return value type does not match the function type.</p>\n</blockquote>\n<p>I know what it says is that I am trying to impose to that function to return something that does not look like the object it is being asking for. However, it's just a function and if I could do that in the main class it would be ok. My problem is how can selectHandler return a pointer to the selectROI function so that it can be used by another class?</p>\n", "AcceptedAnswerId": "8108154", "Title": "Function pointers and callbacks", "CreationDate": "2011-11-12T22:41:25.260", "Id": "8108117", "CommentCount": "0", "LastEditDate": "2011-11-12T22:50:07.493", "PostTypeId": "1", "LastEditorUserId": "743214", "LastActivityDate": "2011-11-12T22:50:19.837", "Score": "0", "OwnerUserId": "1043609", "Tags": "<c++><function><pointers><callback>", "AnswerCount": "2"}, "8108154": {"Id": "8108154", "PostTypeId": "2", "Body": "<p>I think that you need to use a <code>static</code> function here:</p>\n<pre><code>static void __cdecl selectROI( int event, int x, int y, int flags, void *param );\n</code></pre>\n<p>and</p>\n<pre><code>void ( CV_CDECL *callback )( int event, int x, int y, int flags, void *param );\n</code></pre>\n<p>accordingly.</p>\n<p>The thing is that this definition:</p>\n<pre><code>typedef void (CV_CDECL *CvMouseCallback )(int event, int x, int y, int flags, void* param);\n</code></pre>\n<p>Is not a class member function, while yours is a member of class <code>MouseHandler</code>, which means its a different signature and different parameter list (to accommodate for <code>this</code>). Using <code>static</code> class member function solves it for you.</p>\n<p>You'll have to figure out how to pass the object context data to the <code>static</code> function of course.</p>\n", "LastActivityDate": "2011-11-12T22:49:14.827", "CommentCount": "3", "CreationDate": "2011-11-12T22:49:14.827", "ParentId": "8108117", "Score": "1", "OwnerUserId": "618400"}, "8108161": {"Id": "8108161", "PostTypeId": "2", "Body": "<p>Your <code>selectROI()</code> method, since it is not static, requires an implicit <code>this</code> parameter as its first argument.  If you try making it static, you will have a better chance at getting it working, though really if you are passing it to a C API as you are, you technically need to pass an <code>extern \"C\"</code> function pointer for everything to be fully proper and portable.  That might be a trivial forwarding function like this:</p>\n<pre><code>extern \"C\" void selectROI( int event, int x, int y, int flags, void *param );\n</code></pre>\n<p>Then, if you want your C++ class method to not be static (so it can access class member variables), you just need to pass a pointer to a MouseHandler object as the third argument to <code>cvSetMouseCallback()</code> and you will then receive the same in your callback, which can then look like this:</p>\n<pre><code>extern \"C\" void selectROI( int event, int x, int y, int flags, void *param )\n{\n    static_cast&lt;MouseHandler*&gt;(param)-&gt;selectROI( event, x, y, flags);\n}\n</code></pre>\n", "LastActivityDate": "2011-11-12T22:50:19.837", "CommentCount": "6", "CreationDate": "2011-11-12T22:50:19.837", "ParentId": "8108117", "Score": "1", "OwnerUserId": "4323"}});