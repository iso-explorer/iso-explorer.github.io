post_cb({"4641068": {"ParentId": "4640989", "CommentCount": "2", "Body": "<p>Static members are resolved by the compiler at compile-time.  In many ways static variables are no different than global variables under the hood.  The differences only lie in how you refer to them in your code, the scope where they are visible, and how and when they get initialized. </p>\n", "OwnerUserId": "468495", "PostTypeId": "2", "Id": "4641068", "Score": "6", "CreationDate": "2011-01-09T18:54:20.690", "LastActivityDate": "2011-01-09T18:54:20.690"}, "4640989": {"CommentCount": "3", "AcceptedAnswerId": "4640999", "PostTypeId": "1", "LastEditorUserId": "3745896", "CreationDate": "2011-01-09T18:39:31.780", "LastActivityDate": "2017-10-21T21:43:15.017", "LastEditDate": "2017-10-21T21:42:58.930", "ViewCount": "3460", "FavoriteCount": "2", "Title": "How do static member variables affect object size?", "Id": "4640989", "Score": "12", "Body": "<p>I'm wondering how static member variables are typically implemented in languages like C++ and if their use affects the size of instantiated objects.</p>\n<p>I know that a static members are shared by all instances of that class, but how is it shared?  If it affects object size, would having 10 static variables add more size than 1?</p>\n<p>I'm asking because I can think of two ways it might be implemented:</p>\n<ul>\n<li>adding a pointer to static data to each object similar to the way some implementations add a pointer to the virtual function table</li>\n<li>the static data is just referenced directly like a global variable with the offset being resolved by the linker / loader</li>\n</ul>\n", "Tags": "<c++><static-members>", "OwnerUserId": "71074", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_4640989_4640999_0": {"section_id": 5906, "quality": 0.9375, "length": 15}, "so_4640989_4640999_2": {"section_id": 5911, "quality": 0.7272727272727273, "length": 8}, "so_4640989_4640999_1": {"section_id": 5907, "quality": 0.9285714285714286, "length": 13}}, "n3337": {"so_4640989_4640999_0": {"section_id": 5678, "quality": 0.9375, "length": 15}, "so_4640989_4640999_2": {"section_id": 5683, "quality": 0.7272727272727273, "length": 8}, "so_4640989_4640999_1": {"section_id": 5679, "quality": 0.9285714285714286, "length": 13}}, "n4659": {"so_4640989_4640999_0": {"section_id": 7388, "quality": 0.9375, "length": 15}, "so_4640989_4640999_2": {"section_id": 7393, "quality": 0.7272727272727273, "length": 8}, "so_4640989_4640999_1": {"section_id": 7389, "quality": 0.9285714285714286, "length": 13}}}, "4640999": {"ParentId": "4640989", "PostTypeId": "2", "CommentCount": "13", "Body": "<p>In C++, static members don't belong to the instances of class. they don't increase size of instances and class even by 1 bit!</p>\n<pre><code>struct A\n{\n    int i;\n    static int j;\n};\nstruct B\n{\n    int i;\n};\nstd::cout &lt;&lt; (sizeof(A) == sizeof(B)) &lt;&lt; std::endl;\n</code></pre>\n<p>Output:</p>\n<pre><code>1\n</code></pre>\n<p>That is, size of <code>A</code> and <code>B</code> is exactly same. static members are more like global objects accessed through <code>A::j</code>. </p>\n<p>See demonstration at ideone : <a href=\"http://www.ideone.com/YeYxe\" rel=\"nofollow noreferrer\">http://www.ideone.com/YeYxe</a></p>\n<hr>\n<p>$9.4.2/1 from the C++ Standard (2003),</p>\n<blockquote>\n<p id=\"so_4640989_4640999_0\">A static data member <strong>is not part of</strong>\n  the subobjects of a class. There <strong>is\n  only one copy of</strong> a static data member\n  shared by all the objects of the\n  class.</p>\n</blockquote>\n<p>$9.4.2/3 and 7 from the Standard,</p>\n<blockquote>\n<p id=\"so_4640989_4640999_1\">once the static data member has been\n  defined, it exists even if no objects\n  of its class have been created.</p>\n<p id=\"so_4640989_4640999_2\">Static data members are initialized\n  and destroyed exactly like non-local\n  objects (3.6.2, 3.6.3).</p>\n</blockquote>\n<p>As I said, static members are more like  global objects!</p>\n</hr>", "OwnerUserId": "415784", "LastEditorUserId": "3745896", "LastEditDate": "2017-10-21T21:43:15.017", "Id": "4640999", "Score": "23", "CreationDate": "2011-01-09T18:41:38.230", "LastActivityDate": "2017-10-21T21:43:15.017"}});