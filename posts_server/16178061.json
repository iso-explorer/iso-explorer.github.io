post_cb({"16178163": {"ParentId": "16178061", "CommentCount": "2", "CreationDate": "2013-04-23T20:04:06.407", "OwnerUserId": "5987", "PostTypeId": "2", "Id": "16178163", "Score": "4", "Body": "<p>You're seeing an artifact of the way C++ is defined. Member functions automatically add a hidden <code>this</code> parameter to every function. If the object is <code>const</code> then the pointer is <code>const</code> as well, and a non-const member function must receive a non-const <code>this</code> pointer.</p>\n", "LastActivityDate": "2013-04-23T20:04:06.407"}, "16178160": {"ParentId": "16178061", "CommentCount": "0", "CreationDate": "2013-04-23T20:03:47.477", "OwnerUserId": "596781", "PostTypeId": "2", "Id": "16178160", "Score": "3", "Body": "<p>The instance argument for member functions is <em>implicit</em>. That is, it is never part of the function declaration, but it is nonetheless there.</p>\n<p>Remember that (non-static) member functions are not functions. You cannot just <em>call</em> them. Instead, you must always invoke them on an <em>instance</em> object. This instance object is implicitly an argument of the member function, but never spelled out. It is available inside the function via the <code>this</code> expression.</p>\n<p>If the implicit instance argument binds to a constant object, then the type of <code>this</code> is <code>T const *</code>, and only member functions which are qualified as <code>const</code> may be called. Similarly for <code>volatile</code>, and there is also a similar rule for binding the implicit instance argument to an rvalue reference.</p>\n", "LastActivityDate": "2013-04-23T20:03:47.477"}, "16178186": {"ParentId": "16178061", "CommentCount": "0", "CreationDate": "2013-04-23T20:05:23.587", "OwnerUserId": "697009", "PostTypeId": "2", "Id": "16178186", "Score": "0", "Body": "<p>In the actual code as run on the computer, the code for <code>func2</code> needs to know which instance of <code>foo</code> to look at/do things to. So it is passed a pointer (<code>this</code>) to the instance.</p>\n", "LastActivityDate": "2013-04-23T20:05:23.587"}, "16178162": {"ParentId": "16178061", "PostTypeId": "2", "CommentCount": "1", "CreationDate": "2013-04-23T20:04:00.583", "Score": "1", "LastEditorUserId": "65863", "LastEditDate": "2013-04-23T20:28:00.917", "Id": "16178162", "OwnerUserId": "159145", "Body": "<p>In OOP (generally), all instance methods are silently converted to static functions by the compiler, and a pointer to a struct that constaints instance-state (i.e. <code>this</code>) is added as a hidden first parameter.</p>\n<p>So this:</p>\n<pre><code>class Foo\n{\n    private:\n        Int32 _bar;\n\n    public:\n        void Add(Int32 x)\n        {\n            this-&gt;_bar += x;\n        }\n};\n\nvoid Main()\n{\n    Foo foo;\n    foo.Add(3);\n}\n</code></pre>\n<p>Is actually implemented like this:</p>\n<pre><code>struct Foo {\n    Int32 _bar;\n}\n\nstatic void Foo_Add(Foo *thisPtr, Int32 x)\n{\n    thisPtr-&gt;_bar += x;\n}\n\nvoid Main()\n{\n    Foo foo;\n    Foo_Add( &amp;foo, 3 );\n}\n</code></pre>\n", "LastActivityDate": "2013-04-23T20:28:00.917"}, "16178061": {"CommentCount": "1", "ViewCount": "163", "PostTypeId": "1", "LastEditorUserId": "1410669", "CreationDate": "2013-04-23T19:57:38.917", "LastActivityDate": "2013-04-23T21:31:30.863", "Title": "How is the 'this' pointer used as an argument of a member function", "LastEditDate": "2013-04-23T21:31:30.863", "Id": "16178061", "Score": "1", "Body": "<p>I have this simple class</p>\n<pre><code>class foo {\npublic:\n  void func() const;\n  void func2();\n};\n\nvoid foo::func() const {}\nvoid foo::func2() {}\n\nint main() {\n  const foo f;\n  f.func();\n  f.func2();\n}\n</code></pre>\n<p>When I attempt to compile I get this message:</p>\n<blockquote>\n<p id=\"so_16178061_16178061_0\">error: passing \u2018const foo\u2019 as \u2018this\u2019 argument of \u2018void foo::func2()\u2019 discards qualifiers \n  [-fpermissive]</p>\n</blockquote>\n<p>I understand the use of a non-const member of a const object, my question is how is the \n'this' pointer used as an argument to func2? </p>\n", "Tags": "<c++>", "OwnerUserId": "2050326", "AnswerCount": "7"}, "16178103": {"ParentId": "16178061", "CommentCount": "0", "CreationDate": "2013-04-23T20:00:27.297", "OwnerUserId": "1662800", "PostTypeId": "2", "Id": "16178103", "Score": "0", "Body": "<p>your member function func2() should be const. see <a href=\"http://www.learncpp.com/cpp-tutorial/810-const-class-objects-and-member-functions/\" rel=\"nofollow\">here</a>. </p>\n", "LastActivityDate": "2013-04-23T20:00:27.297"}, "16178093": {"ParentId": "16178061", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2013-04-23T19:59:42.207", "Score": "2", "LastEditorUserId": "1760345", "LastEditDate": "2013-04-23T20:13:48.417", "Id": "16178093", "OwnerUserId": "1760345", "Body": "<p>You cannot call non-const function <code>func2</code> on a const object <code>f</code>.</p>\n<p>Since your question is: </p>\n<blockquote>\n<p id=\"so_16178061_16178093_0\">how is the <code>this</code> pointer used as an argument to func2</p>\n</blockquote>\n<p>here is some information quoted from <a href=\"http://publib.boulder.ibm.com/infocenter/lnxpcomp/v8v101/index.jsp?topic=/com.ibm.xlcpp8l.doc/language/ref/cplr035.htm\" rel=\"nofollow\">IBM C++ documentation: this pointer</a>:</p>\n<blockquote>\n<p id=\"so_16178061_16178093_1\">The keyword <code>this</code> identifies a special type of pointer. Suppose that\n  you create an object named <code>x</code> of class <code>A</code>, and class <code>A</code> has a\n  nonstatic member function <code>f()</code>. If you call the function <code>x.f()</code>, the\n  keyword <code>this</code> in the body of <code>f()</code> stores the address of <code>x</code>. You\n  cannot declare the this pointer or make assignments to it.</p>\n<p id=\"so_16178061_16178093_2\">A <code>static</code> member function does not have a <code>this</code> pointer.</p>\n<p id=\"so_16178061_16178093_3\">The type of the <code>this</code> pointer for a member function of a class type\n  <code>X</code>, is <code>X* const</code>. If the member function is declared with the<code>\n  const</code> qualifier, the type of the <code>this</code> pointer for that member\n  function for class <code>X</code>, is <code>const X* const</code>.</p>\n<p id=\"so_16178061_16178093_4\">A <code>const this</code> pointer can by used only with <code>const member functions</code>.\n  Data members of the class will be constant within that function. The\n  function is still able to change the value, but requires a \n  <code>const_cast</code> to do so:</p>\n<pre><code>void foo::p() const{    \n    member = 1;                       // illegal    \n    const_cast &lt;int&amp;&gt; (member) = 1;   // a bad practice but legal \n} \n</code></pre>\n<p id=\"so_16178061_16178093_5\">A better technique would be to declare member mutable</p>\n</blockquote>\n<p>.</p>\n", "LastActivityDate": "2013-04-23T20:13:48.417"}, "16178094": {"ParentId": "16178061", "PostTypeId": "2", "CommentCount": "2", "CreationDate": "2013-04-23T19:59:45.900", "Score": "7", "LastEditorUserId": "2254782", "LastEditDate": "2013-04-23T20:17:09.143", "Id": "16178094", "OwnerUserId": "2254782", "Body": "<p><code>void foo::func2()</code> is non const, which means that it may change the object. Thus the compiler doesn't allow you to call it for a const object. Even if you don't actually change anything in <code>func2</code>'s implementation. <code>this</code> is implicit argument for any non static member function. That is how it knows what exact object it was called for. </p>\n<h1>9.3.2 The this pointer [class.this]</h1>\n<blockquote>\n<p id=\"so_16178061_16178094_0\">1 In the body of a non-static (9.3) member function, the keyword this is a prvalue expression whose value\n  is the address of the object for which the function is called.</p>\n</blockquote>\n", "LastActivityDate": "2013-04-23T20:17:09.143"}, "bq_ids": {"n4140": {"so_16178061_16178093_3": {"section_id": 5892, "quality": 0.6, "length": 12}, "so_16178061_16178094_0": {"section_id": 5895, "quality": 1.0, "length": 13}, "so_16178061_16178093_2": {"section_id": 5905, "quality": 1.0, "length": 6}}, "n3337": {"so_16178061_16178093_3": {"section_id": 5663, "quality": 0.6, "length": 12}, "so_16178061_16178094_0": {"section_id": 5666, "quality": 1.0, "length": 13}, "so_16178061_16178093_2": {"section_id": 5677, "quality": 1.0, "length": 6}}, "n4659": {"so_16178061_16178093_3": {"section_id": 7375, "quality": 0.6, "length": 12}, "so_16178061_16178094_0": {"section_id": 7378, "quality": 1.0, "length": 13}, "so_16178061_16178093_2": {"section_id": 7387, "quality": 1.0, "length": 6}}}});