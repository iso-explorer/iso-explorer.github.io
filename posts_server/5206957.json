post_cb({"5206957": {"ViewCount": "942", "Body": "<p>To be specific, my program uses pointers to char. The program itself runs smooth, but every loop i leak about 8kb of data. As i found out, my mistake lies in my style of using these char pointers. It goes like this:</p>\n<pre><code>Draw(char *what1, char* onWhat1);  //this is declaration\nDrawAgain(char *what2, char* onWhat2); //declaration too\n\n// both take two directories to two images, so i call it like this:\n\nDraw(\"C:\\a.bmp\", \"C:\\b.bmp\"){\n\n//so what is pointer to a.bmp onWhat is pointer to b.bmp so i use them like this:\n\nDrawAgain(what1, onWhat1);\n}\n</code></pre>\n<p>There are no other leaks in program (i removed almost everything to find this out). So my question is: \"How do i free this *char memory? And can i free it if i did not allocate it, just typed in.\"</p>\n", "Title": "Memory leak in char pointer", "CreationDate": "2011-03-05T21:40:09.033", "LastActivityDate": "2014-04-10T03:30:23.870", "CommentCount": "5", "LastEditDate": "2014-04-10T03:30:23.870", "PostTypeId": "1", "LastEditorUserId": "321731", "Id": "5206957", "Score": "1", "OwnerUserId": "646406", "Tags": "<c++><pointers><memory><memory-leaks>", "AnswerCount": "4"}, "5207081": {"PostTypeId": "2", "Body": "<p>Please post your complete code so we can find the problem. </p>\n<p>Also you might want to check:</p>\n<pre><code>Draw(\"C:\\a.bmp\", \"C:\\b.bmp\")\n</code></pre>\n<p>The '\\' escapes the 'a' respective 'b'.</p>\n", "LastActivityDate": "2011-03-05T22:02:10.603", "Id": "5207081", "CommentCount": "0", "CreationDate": "2011-03-05T22:02:10.603", "ParentId": "5206957", "Score": "0", "OwnerUserId": "618598"}, "bq_ids": {"n4140": {"so_5206957_5206967_0": {"length": 12, "quality": 0.6, "section_id": 5360}}, "n3337": {"so_5206957_5206967_0": {"length": 12, "quality": 0.6, "section_id": 5156}}}, "5207009": {"PostTypeId": "2", "Body": "<p>There is one more problem in the code. I created an OpenCV point and then returned value to it from function, it looks like this:</p>\n<pre><code>CvPoint Value;\n\nbool Calculations( CvPoint &amp;worker); //declaration\n//So i give this function Value and take it out like this:\nCalculations(Value){\nworker = someValue;\n}\n</code></pre>\n<p>The value goes out, but i do not call any free() or any deallocator;</p>\n", "LastActivityDate": "2011-03-05T21:51:00.170", "Id": "5207009", "CommentCount": "2", "CreationDate": "2011-03-05T21:51:00.170", "ParentId": "5206957", "Score": "0", "OwnerUserId": "646415"}, "5206967": {"Id": "5206967", "PostTypeId": "2", "Body": "<p><a href=\"http://www.open-std.org/jtc1/sc22/open/n2356/lex.html#lex.string\" rel=\"nofollow\">String literals</a> should not be freed, as they aren't dynamically allocated. The leak doesn't lie in the sample code. From C++03, \u00a7 5.13.4-1 String literals:</p>\n<blockquote>\n<p id=\"so_5206957_5206967_0\">An ordinary string literal has type \u201carray of <em>n</em> <code>const char</code>\u201d and <em>static</em> storage duration (3.7) [...] A wide string literal has type \u201carray of <em>n</em> <code>const wchar_t</code>\u201d and has static storage duration</p>\n</blockquote>\n", "LastEditorUserId": "90527", "LastActivityDate": "2011-03-05T21:52:28.893", "CommentCount": "0", "CreationDate": "2011-03-05T21:42:28.100", "ParentId": "5206957", "Score": "4", "OwnerUserId": "90527", "LastEditDate": "2011-03-05T21:52:28.893"}, "5207076": {"PostTypeId": "2", "Body": "<p>There is no leak. If you don't allocate memory using <code>new</code>, it's not your responsibility to <code>delete</code> it unless explicitly stated otherwise. In general, whoever allocates memory is responsible for freeing it. That said, many popular libraries still have leaks in them. If <code>char*</code> would be an array or similar which was dynamically allocated on the heap, you need to delete it from where it was allocated (not in these functions).</p>\n<p>Regards,<br/>\nDennis M.</p>\n", "LastActivityDate": "2011-03-05T22:01:22.650", "Id": "5207076", "CommentCount": "0", "CreationDate": "2011-03-05T22:01:22.650", "ParentId": "5206957", "Score": "1", "OwnerUserId": "388182"}});