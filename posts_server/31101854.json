post_cb({"bq_ids": {"n4140": {"so_31101854_31102112_1": {"length": 28, "quality": 0.875, "section_id": 423}, "so_31101854_31102112_0": {"length": 29, "quality": 0.9666666666666667, "section_id": 6110}}, "n3337": {"so_31101854_31102112_1": {"length": 28, "quality": 0.875, "section_id": 415}, "so_31101854_31102112_0": {"length": 29, "quality": 0.9666666666666667, "section_id": 5876}}, "n4659": {"so_31101854_31102112_1": {"length": 28, "quality": 0.875, "section_id": 441}, "so_31101854_31102112_0": {"length": 29, "quality": 0.9666666666666667, "section_id": 7607}}}, "31102112": {"Id": "31102112", "PostTypeId": "2", "Body": "<p>The array elements will be destructed in reverse order of construction, with element <code>99</code> being the first destructed, then element <code>98</code>, <code>97</code>, <code>96</code>... etc. and element <code>0</code> being the last.</p>\n<p>See the <a href=\"https://isocpp.org/wiki/faq/dtors#order-dtors-for-arrays\" rel=\"nofollow\">isocpp</a> destructor FAQ.</p>\n<p>From 5.3.5.6 of the latest draft:</p>\n<blockquote>\n<p id=\"so_31101854_31102112_0\">If the value of the operand of the delete-expression is not a null pointer value, the delete-expression will\n  invoke the destructor (if any) for the object or the elements of the array being deleted. <strong>In the case of an\n  array, the elements will be destroyed in order of decreasing address (that is, in reverse order of the completion\n  of their constructor</strong>; see 12.6.2).</p>\n</blockquote>\n<p>There's also this from 12.6.3 (which is not specific to the <code>delete</code> keyword):</p>\n<blockquote>\n<p id=\"so_31101854_31102112_1\">When an array of class objects is initialized (either explicitly or implicitly) and the elements are initialized\n  by constructor, the constructor shall be called for each element of the array, following the subscript order;\n  see 8.3.4. [ <strong>Note: Destructors for the array elements are called in reverse order of their construction. \u2014 end\n  note</strong> ]</p>\n</blockquote>\n", "LastEditorUserId": "3973558", "LastActivityDate": "2015-06-28T17:13:56.337", "Score": "3", "CreationDate": "2015-06-28T16:32:39.607", "ParentId": "31101854", "CommentCount": "0", "OwnerUserId": "3973558", "LastEditDate": "2015-06-28T17:13:56.337"}, "31101854": {"ViewCount": "68", "Body": "<p>Considering following code:</p>\n<pre><code>struct A{...};\n\nA a[100];\nA* pa = new A[100];\ndelete[] pa;\n</code></pre>\n<p>Is the order of destruction for the elements of <code>a</code>/<code>pa</code> defined by the standard or it is implementation defined (for the second case <code>operator delete[]</code> is not user defined).</p>\n", "AcceptedAnswerId": "31102112", "Title": "Order of destruction for stack/heap allocated arrays", "CreationDate": "2015-06-28T16:05:48.787", "Id": "31101854", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2015-06-28T17:13:56.337", "Score": "1", "OwnerUserId": "336578", "Tags": "<c++>", "AnswerCount": "1"}});