post_cb({"bq_ids": {"n4140": {"so_24603894_24604101_0": {"length": 33, "quality": 0.9705882352941176, "section_id": 6114}}, "n3337": {"so_24603894_24604101_0": {"length": 18, "quality": 0.5294117647058824, "section_id": 6925}}}, "24604101": {"PostTypeId": "2", "Body": "<p>The selection of deallocation functions is explained in:</p>\n<p><strong>5.3.5 Delete [expr.delete]</strong></p>\n<blockquote>\n<p id=\"so_24603894_24604101_0\">10 If the type is complete and if deallocation function lookup \ufb01nds\n  both a usual deallocation function with only a pointer parameter and a\n  usual deallocation function with both a pointer parameter and a size\n  parameter, then the selected deallocation function shall be the one\n  with two parameters. Otherwise, the selected deallocation function\n  shall be the function with one parameter.</p>\n</blockquote>\n", "LastActivityDate": "2014-07-07T06:29:12.887", "LastEditorUserId": "819272", "Id": "24604101", "CommentCount": "0", "CreationDate": "2014-07-07T06:19:08.143", "ParentId": "24603894", "Score": "9", "OwnerUserId": "819272", "LastEditDate": "2014-07-07T06:29:12.887"}, "24603894": {"ViewCount": "279", "Body": "<p>According to <a href=\"http://en.cppreference.com/w/cpp/memory/new/operator_delete\" rel=\"nofollow\">this</a></p>\n<pre><code>void operator delete  (void*);                                    (1)   \nvoid operator delete[](void*);                                    (2)   \nvoid operator delete  (void*, const std::nothrow_t&amp;);             (3)   \nvoid operator delete[](void*, const std::nothrow_t&amp;);             (4)   \nvoid operator delete(void*, std::size_t)                          (5)\nvoid operator delete[](void*, std::size_t)                        (6)\nvoid operator delete(void*, std::size_t, const std::nothrow_t&amp;)   (7)\nvoid operator delete[](void*, std::size_t, const std::nothrow_t&amp;) (8)\n</code></pre>\n<blockquote>\n<p id=\"so_24603894_24603894_0\">(5-8) Called instead of (1-4) if a user-defined replacement is\n  provided. The standard library implementations are identical to (1-4).</p>\n</blockquote>\n<p>I believe the cited statement is correct; however, I cannot confirm it as per the draft C++14 standard n3797 .</p>\n<p>I examined 3.7.4 and 18.6, and found nothing to explicitly require the delete expression must call <code>void ::operator delete(void*, std::size_t)</code> instead of <code>void ::operator delete(void*)</code> if the former exists.</p>\n<p>Could you refer me to the right page of the draft standard?</p>\n", "AcceptedAnswerId": "24604101", "Title": "Does C++14 require that the delete expression must call `void operator ::delete(void*, std::size_t)` instead of `void ::operator delete(void*)`?", "CreationDate": "2014-07-07T06:00:40.913", "Id": "24603894", "CommentCount": "0", "LastEditDate": "2014-08-11T07:06:37.407", "PostTypeId": "1", "LastEditorUserId": "3622940", "LastActivityDate": "2014-08-11T07:06:37.407", "Score": "5", "OwnerUserId": "508343", "Tags": "<c++><memory-management><new-operator><c++14>", "AnswerCount": "1"}});