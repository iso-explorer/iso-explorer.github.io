post_cb({"bq_ids": {"n4140": {"so_25959633_25960570_1": {"length": 14, "quality": 0.9333333333333333, "section_id": 242}, "so_25959633_25960570_3": {"length": 18, "quality": 1.0, "section_id": 239}}, "n3337": {"so_25959633_25960570_1": {"length": 14, "quality": 0.9333333333333333, "section_id": 234}, "so_25959633_25960570_3": {"length": 18, "quality": 1.0, "section_id": 231}}, "n4659": {"so_25959633_25960570_1": {"length": 14, "quality": 0.9333333333333333, "section_id": 249}, "so_25959633_25960570_3": {"length": 13, "quality": 0.7222222222222222, "section_id": 248}}}, "25959633": {"ViewCount": "824", "Body": "<p>A default member initialisation needs to reference an existing constructor, no matter if it is ever used or not. So, looking at a struct <code>Foo</code> which has no default constructor:</p>\n<pre><code>struct Foo{\n    Foo(int x) : x_(x){}\n    int x_;\n};\n</code></pre>\n<p>It is clear that the following wouldn't work, and leads to a compilation error:</p>\n<pre><code>class Bar0{\n    Foo foo = Foo(); #constructor Foo() doesn't exist\n    Bar0() : foo(0){}\n}\n</code></pre>\n<p>But, it is a different story with <code>std::unique_ptr</code> and <code>std::make_unique</code>:</p>\n<pre><code>class Bar1{\n    unique_ptr&lt;Foo&gt; foo = make_unique&lt;Foo&gt;(); #compiler doesn't complain\n    Bar1() : foo(make_unique&lt;Foo&gt;(0)){}\n}\n</code></pre>\n<p>This is puzzling, as the compilation fails as soon as <code>Bar1</code> contains one constructor where <code>foo</code> is not in the initialiser list.</p>\n<p>I can confirm this to be true of MSVC12. Could it be a compiler bug?</p>\n", "AcceptedAnswerId": "25960570", "Title": "Why does std::make_unique not require an argument in a default member initialisation if it is never called?", "CreationDate": "2014-09-21T13:21:04.530", "Id": "25959633", "CommentCount": "3", "LastEditDate": "2014-09-21T15:02:35.737", "PostTypeId": "1", "LastEditorUserId": "2533467", "LastActivityDate": "2014-09-21T17:16:48.507", "Score": "0", "OwnerUserId": "2533467", "Tags": "<c++><c++11><initialization><default><unique-ptr>", "AnswerCount": "1"}, "25960570": {"Id": "25960570", "PostTypeId": "2", "Body": "<p>Here is a self-contained sample demonstrating the problem:</p>\n<pre><code>template &lt;typename T&gt;\nint f() {\n  return T();\n}\n\nstruct S {\n  int i = f&lt;void&gt;();\n  S() : i(0) { }\n};\n</code></pre>\n<p>In your example, <code>f</code> is named <code>make_unique</code>, and it doesn't return <code>int</code>, but that doesn't fundamentally change anything.</p>\n<p>Yes, Visual Studio's compiler accepts that, and other compilers don't. Visual Studio delays instantiating the templates it doesn't yet need. Other compilers instantiate <code>f&lt;void&gt;</code> as soon as they spot the reference.</p>\n<p>Quoting from C++11:</p>\n<blockquote>\n<p id=\"so_25959633_25960570_0\"><strong>14.7.1 Implicit instantiation [temp.inst]</strong></p>\n<p id=\"so_25959633_25960570_1\">9 If a function template or a member function template specialization is used in a way that involves overload resolution, a declaration of the specialization is implicitly instantiated (14.8.3).</p>\n</blockquote>\n<p>This supports the compilers that issue an error: <code>f&lt;void&gt;()</code> requires overload resolution, so this instantiates <code>f&lt;void&gt;</code>. There's some leeway for class template instantiations:</p>\n<blockquote>\n<p id=\"so_25959633_25960570_2\"><strong>14.7.1 Implicit instantiation [temp.inst]</strong></p>\n<p id=\"so_25959633_25960570_3\">6 If the overload resolution process can determine the correct function to call without instantiating a class template definition, it is unspecified whether that instantiation actually takes place.</p>\n</blockquote>\n<p>but (contrary to what I initially wrote in my answer) I don't think it applies to whole function bodies.</p>\n<p>Unless there is a similar exception for function templates, and I haven't been able to find one, I think compilers are required to diagnose the error, and lazy instantiation is not actually currently allowed for function templates.</p>\n", "LastEditorUserId": "743382", "LastActivityDate": "2014-09-21T17:16:48.507", "Score": "4", "CreationDate": "2014-09-21T15:06:09.803", "ParentId": "25959633", "CommentCount": "5", "OwnerUserId": "743382", "LastEditDate": "2014-09-21T17:16:48.507"}});