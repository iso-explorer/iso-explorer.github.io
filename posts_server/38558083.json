post_cb({"38558083": {"CommentCount": "1", "ViewCount": "69", "CreationDate": "2016-07-25T00:07:50.300", "LastActivityDate": "2016-07-25T00:17:48.467", "Title": "Long enum with bitwise", "AcceptedAnswerId": "38558103", "PostTypeId": "1", "Id": "38558083", "Score": "1", "Body": "<p>I've been facing a problem with my <code>enum</code> after getting past the 32nd flag:</p>\n<pre><code>enum ConditionType_t {\n    CONDITION_NONE                          = 0,\n    CONDITION_LIGHT                         = 1 &lt;&lt; 0,\n    CONDITION_INFIGHT                       = 1 &lt;&lt; 1,\n    CONDITION_MUTED                         = 1 &lt;&lt; 2,\n    ...\n    CONDITION_LUCKY                         = 1 &lt;&lt; 32,\n}\n</code></pre>\n<p>Knowing that <code>enums</code> are basically <code>8bit</code>, <code>CONDITION_LUCKY</code> will be equal to the <code>CONDITION_NONE</code>. So I implemented <code>C++11</code>'s <code>enum classes</code>:</p>\n<pre><code>enum class ConditionType_t : uint64_t {\n    CONDITION_NONE                          = 0,\n    CONDITION_LIGHT                         = 1 &lt;&lt; 0,\n    CONDITION_INFIGHT                       = 1 &lt;&lt; 1,\n    CONDITION_MUTED                         = 1 &lt;&lt; 2,\n    ...\n    CONDITION_LUCKY                         = 1 &lt;&lt; 32,\n}\n</code></pre>\n<p>Now I get millions of warnings like:</p>\n<pre><code>warning C4293: '&lt;&lt;' : shift count negative or too big, undefined behavior\n</code></pre>\n<p>And errors like:</p>\n<pre><code>error C2065: 'CONDITION_NONE' : undeclared identifier\n</code></pre>\n<p>Apparently, bit shifting doesn't get along with <code>enum classes</code>.</p>\n<p>Any thoughts?</p>\n", "Tags": "<c++><c++11><enums><bit-manipulation><flags>", "OwnerUserId": "2797746", "AnswerCount": "1"}, "38558103": {"ParentId": "38558083", "CommentCount": "0", "Body": "<p>The expression <code>1 &lt;&lt; 32</code> is undefined behavior. From [expr.shift]:</p>\n<blockquote>\n<p id=\"so_38558083_38558103_0\">The behavior is undefined if the right operand\n  is negative, or greater than or equal to the length in bits of the promoted left operand.</p>\n</blockquote>\n<p>Since <code>1</code> is an <code>int</code>, it only has 32 bits. Even if this wasn't undefined, you wouldn't get the value you wanted either, since the type of <code>1 &lt;&lt; 32</code> is <code>int</code>, which can't hold a 33-bit value anyway. </p>\n<p>You'll need to use an <code>uint64_t</code> from the start:</p>\n<pre><code>enum class ConditionType_t : uint64_t {\n    CONDITION_NONE                          = 0,\n    CONDITION_LIGHT                         = 1ULL &lt;&lt; 0,\n    CONDITION_INFIGHT                       = 1ULL &lt;&lt; 1,\n    CONDITION_MUTED                         = 1ULL &lt;&lt; 2,\n    ...\n    CONDITION_LUCKY                         = 1ULL &lt;&lt; 32,\n};\n</code></pre>\n", "OwnerUserId": "2069064", "PostTypeId": "2", "Id": "38558103", "Score": "4", "CreationDate": "2016-07-25T00:11:05.903", "LastActivityDate": "2016-07-25T00:11:05.903"}, "bq_ids": {"n4140": {"so_38558083_38558103_0": {"section_id": 6146, "quality": 0.9285714285714286, "length": 13}}, "n3337": {"so_38558083_38558103_0": {"section_id": 5909, "quality": 0.9285714285714286, "length": 13}}, "n4659": {"so_38558083_38558103_0": {"section_id": 7642, "quality": 0.9285714285714286, "length": 13}}}});