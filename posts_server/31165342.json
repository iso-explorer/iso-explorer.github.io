post_cb({"31165453": {"ParentId": "31165342", "CommentCount": "5", "Body": "<p>Yes.</p>\n<p>You can value-initialize it (i.e set it to zero for an <code>int</code>) by using <code>new int()</code>.</p>\n", "OwnerUserId": "5044954", "PostTypeId": "2", "Id": "31165453", "Score": "4", "CreationDate": "2015-07-01T15:21:37.920", "LastActivityDate": "2015-07-01T15:21:37.920"}, "31165342": {"CommentCount": "0", "ViewCount": "37", "CreationDate": "2015-07-01T15:16:55.593", "LastActivityDate": "2015-07-01T15:25:15.960", "Title": "Creating built-in types with the new expression", "AcceptedAnswerId": "31165533", "PostTypeId": "1", "Id": "31165342", "Score": "2", "Body": "<p>Let's consider the following simple program:</p>\n<pre><code>int main()\n{\n    int *a = new int;\n}\n</code></pre>\n<p>Is it reliable that the value of <code>*a</code> is <code>0</code>. I'm <strong>not</strong> sure about that because primitives don't have default-initialization:</p>\n<blockquote>\n<p id=\"so_31165342_31165342_0\">To default-initialize an object of type T means:</p>\n<p id=\"so_31165342_31165342_1\">(7.1) \u2014 If T is a (possibly cv-qualified) class type (Clause 9),\n  constructors are considered. The applicable constructors are\n  enumerated (13.3.1.3), and the best one for the initializer () is\n  chosen through overload resolution (13.3). The constructor thus\n  selected is called, with an empty argument list, to initialize the\n  object.</p>\n<p id=\"so_31165342_31165342_2\">(7.2) \u2014 If T is an array type, each element is default-initialized.</p>\n<p id=\"so_31165342_31165342_3\">(7.3) \u2014 <strong>Otherwise, no initialization is performed</strong>.</p>\n</blockquote>\n<p>I'd say that <code>*a</code> is not initializaed so accessing it would lead to UB. Is that correct?</p>\n", "Tags": "<c++><initialization>", "OwnerUserId": "2786156", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_31165342_31165342_1": {"section_id": 3296, "quality": 0.6551724137931034, "length": 19}, "so_31165342_31165342_0": {"section_id": 3286, "quality": 1.0, "length": 4}, "so_31165342_31165342_2": {"section_id": 3286, "quality": 1.0, "length": 5}}, "n3337": {"so_31165342_31165342_1": {"section_id": 3166, "quality": 0.6551724137931034, "length": 19}, "so_31165342_31165342_0": {"section_id": 3156, "quality": 1.0, "length": 4}, "so_31165342_31165342_2": {"section_id": 3156, "quality": 1.0, "length": 5}}, "n4659": {"so_31165342_31165342_1": {"section_id": 4048, "quality": 0.8620689655172413, "length": 25}, "so_31165342_31165342_2": {"section_id": 4048, "quality": 1.0, "length": 5}}}, "31165533": {"ParentId": "31165342", "CommentCount": "2", "Body": "<p>To be absolutely clear, consider</p>\n<pre><code>int *a = new int;\n\nint *b = new int();\n</code></pre>\n<p><code>*a</code> is <strong>not initialised</strong>, <code>*b</code> is initialised to 0.</p>\n<p>Use of <code>*a</code> prior to initialisation is undefined behaviour.</p>\n", "OwnerUserId": "2380830", "PostTypeId": "2", "Id": "31165533", "Score": "7", "CreationDate": "2015-07-01T15:25:15.960", "LastActivityDate": "2015-07-01T15:25:15.960"}});