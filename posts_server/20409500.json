post_cb({"20409911": {"ParentId": "20409500", "CommentCount": "1", "Body": "<p>12.6.2, [class.base.init], item 6, lists the steps of initialization, and this is the final one:</p>\n<blockquote>\n<p id=\"so_20409500_20409911_0\">Finally, the <em>compound-statement</em> of the constructor body is executed.</p>\n</blockquote>\n<p>So once the body has executed, initialization is complete.</p>\n", "OwnerUserId": "404970", "PostTypeId": "2", "Id": "20409911", "Score": "3", "CreationDate": "2013-12-05T20:23:01.397", "LastActivityDate": "2013-12-05T20:23:01.397"}, "20409532": {"ParentId": "20409500", "PostTypeId": "2", "CommentCount": "2", "Body": "<blockquote>\n<p id=\"so_20409500_20409532_0\">when constructor body has finished running</p>\n</blockquote>\n<p>This. An object that throws during construction is not guaranteed to have its invariants established, hence its lifetime doesn't start. A consequence of this is that the destructor will not get called:</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct Stillborn\n{\n    Stillborn()\n    {\n        std::cout &lt;&lt; \"inside constructor\\n\";\n        throw 42;\n    }\n\n    ~Stillborn()\n    {\n        std::cout &lt;&lt; \"inside destructor\\n\";\n    }\n};\n\nint main()\n{\n    try\n    {\n        Stillborn x;\n    }\n    catch (...)\n    {\n        std::cout &lt;&lt; \"inside catch block\\n\";\n    }\n}\n</code></pre>\n<p><a href=\"http://ideone.com/a0wBNM\" rel=\"nofollow\">live demo</a>. Note how \"inside destructor\" does not appear in the output.</p>\n", "OwnerUserId": "252000", "LastEditorUserId": "252000", "LastEditDate": "2013-12-05T22:20:50.183", "Id": "20409532", "Score": "0", "CreationDate": "2013-12-05T20:03:24.010", "LastActivityDate": "2013-12-05T22:20:50.183"}, "20409633": {"ParentId": "20409500", "CommentCount": "1", "Body": "<p>There is a note:</p>\n<blockquote>\n<p id=\"so_20409500_20409633_0\">\"[ Note: initialization by a trivial copy/move constructor is\n  non-trivial initialization. \u2014 end note ]\"</p>\n</blockquote>\n<p>It means when the trivial constructor will finish its execution.</p>\n", "OwnerUserId": "2877241", "PostTypeId": "2", "Id": "20409633", "Score": "0", "CreationDate": "2013-12-05T20:09:02.063", "LastActivityDate": "2013-12-05T20:09:02.063"}, "bq_ids": {"n4140": {"so_20409500_20409911_0": {"section_id": 438, "quality": 1.0, "length": 5}, "so_20409500_20409633_0": {"section_id": 7189, "quality": 0.6666666666666666, "length": 6}}, "n3337": {"so_20409500_20409911_0": {"section_id": 429, "quality": 1.0, "length": 5}, "so_20409500_20409633_0": {"section_id": 6933, "quality": 0.6666666666666666, "length": 6}}, "n4659": {"so_20409500_20409911_0": {"section_id": 458, "quality": 1.0, "length": 5}}}, "20409500": {"CommentCount": "10", "ViewCount": "99", "PostTypeId": "1", "LastEditorUserId": "332733", "CreationDate": "2013-12-05T20:02:11.233", "LastActivityDate": "2013-12-05T22:20:50.183", "Title": "What does the C++ standard mean regarding object lifetime begins?", "AcceptedAnswerId": "20409911", "LastEditDate": "2013-12-05T20:05:17.180", "Id": "20409500", "Score": "0", "Body": "<p>In the n3690 C++ standard in section 3.8.1 there is this text:</p>\n<pre><code>The lifetime of an object of type T begins when:\n\u2014 storage with the proper alignment and size for type T is obtained, and\n\u2014 if the object has non-trivial initialization, its initialization is complete.\n</code></pre>\n<p>Assume that there is a user defined constructor.</p>\n<p>What does the last sentence mean? Is it when the initializer list has finished initializing or is it when constructor body has finished running? Or does the last sentence mean something else?</p>\n", "Tags": "<c++><standards><language-lawyer>", "OwnerUserId": "1013384", "AnswerCount": "3"}});