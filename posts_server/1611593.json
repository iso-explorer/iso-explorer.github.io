post_cb({"1611630": {"ParentId": "1611593", "CommentCount": "0", "Body": "<p>\"No inlining for functions with loops\" is probably a bit of some inline heuristic from some particular compiler. It doesn't apply universally.</p>\n<p>Every compiler uses some heuristics to determine whether the function should be inlined or not, but normally every compiler uses its own ones. So, to say that a loop will have some universal effect on inlining is not correct. It won't. There's absolutely nothing in your function that would somehow fundamentally preclude inlining. Most modern compilers can easily inline this function, if they deem it reasonable or if you force them to do it.</p>\n<p>Yes, some compilers offer non-standard declaration specifiers (or compiler options) that will actually <em>force</em> the inlining, i.e. override the heuristic analysis, except for a number of situation when the inlining is truly beyond the capabilities of the compiler. For example, many modern C/C++ compilers normally can't inline functions with variable number of parameters (variadic functions).</p>\n<p>It also commonly believed that recursive function can't be inlined. In reality, in many compilers recursive functions can be inlined to certain fixed recursion depth, thus \"compressing\" the recursion.</p>\n", "OwnerUserId": "187690", "PostTypeId": "2", "Id": "1611630", "Score": "2", "CreationDate": "2009-10-23T06:07:48.453", "LastActivityDate": "2009-10-23T06:07:48.453"}, "1611617": {"ParentId": "1611593", "CommentCount": "4", "Body": "<p>I wonder if the inline keyword is even necessary anymore.  Don't modern compilers mostly just ignore it and do whatever they think is best, anyway?</p>\n", "OwnerUserId": "131930", "PostTypeId": "2", "Id": "1611617", "Score": "0", "CreationDate": "2009-10-23T06:02:02.567", "LastActivityDate": "2009-10-23T06:02:02.567"}, "1611642": {"ParentId": "1611593", "CommentCount": "0", "Body": "<p>Most likely compilers will not inline a function with a loop, since what would be the point?  If the code is looping, generally the cost of a function call will be unmeasurable noise compared to the looping.</p>\n<p>But if a compiler wants to inline it (maybe the compiler is sophisticated enough to determine the loop bounds and can even unroll the loop), it's certainly allowed to.</p>\n<p>But I wouldn't bet on it.</p>\n", "OwnerUserId": "12711", "PostTypeId": "2", "Id": "1611642", "Score": "0", "CreationDate": "2009-10-23T06:14:41.513", "LastActivityDate": "2009-10-23T06:14:41.513"}, "1611598": {"ParentId": "1611593", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>Simply, no.</p>\n<p>\"<code>inline</code>\" is just a hint to the compiler.</p>\n<p>There are ways to <em>force</em> a compiler to <code>inline</code> something, but these ways are compiler-specific.  Your code looks mobile to me, so here's some ways on some C++ compilers used on various mobile phone platforms:</p>\n<p>Windows CE/ Windows Mobile VC++ ARM compiler uses the <code>__forceinline</code> keyword instead of the hint '<em>inline</em>'. </p>\n<p>A better compiler (i.e. makes faster output) for Windows CE/ Windows Mobile is <a href=\"http://cegcc.sourceforge.net/\" rel=\"nofollow noreferrer\">cegcc</a>, which uses the very latest GCC 4.4.  In GCC, you write <code>__attribute__((always_inline))</code> <em>after</em> the function name and before the body.</p>\n<p>The bigger thing is if it's a good idea to inline this loop.  I program mobile phones for a living, and they don't have much CPU budget generally.  But I'd be really surprised if this loop is a bottleneck.  Strip your program of all the 'inline' decorations and when you're approaching shipping, if the program is slow, profile it!</p>\n<p>Some compilers allow 'profile guided optimisation' where they can make an instrumented binary that you run in a realistic way, and then they use the data so gathered to make a production binary where they make informed decisions about code speed vs code size in the various parts of your program to give the very best mix of both.</p>\n", "OwnerUserId": "15721", "LastEditorUserId": "15721", "LastEditDate": "2009-10-23T06:15:01.043", "Id": "1611598", "Score": "3", "CreationDate": "2009-10-23T05:55:13.003", "LastActivityDate": "2009-10-23T06:15:01.043"}, "1611613": {"ParentId": "1611593", "CommentCount": "0", "Body": "<p>You can specify \"inline\" and the compiler can ignore it if it feels like that.</p>\n", "OwnerUserId": "57428", "PostTypeId": "2", "Id": "1611613", "Score": "5", "CreationDate": "2009-10-23T06:00:45.363", "LastActivityDate": "2009-10-23T06:00:45.363"}, "1612402": {"ParentId": "1611593", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>To summarize a previous <a href=\"https://stackoverflow.com/questions/1271335/inline-function-when-to-insert/1271523#1271523\">answer</a> I gave to this, the things you should watch out for when choosing a function for inlining are:</p>\n<pre><code>* local static variables\n* loop constructs\n* switch statements\n* try/catch\n* goto\n* recursion\n* and of course too much complexity (whatever that means)\n</code></pre>\n<p>Having said that as the other answers here point out, it's basically unspecified if the compiler inlines the function or not.  7.1.2/2 has:</p>\n<blockquote>\n<p id=\"so_1611593_1612402_0\">A function declaration (8.3.5, 9.3, 11.4) with an inline specifier declares an inline function. The inline specifier indicates to the implementation that inline substitution of the function body at the point of call is to be preferred to the usual function call mechanism. An implementation is not required to perform this inline substitution at the point of call; however, even if this inline substitution is omitted, the other rules for inline functions defined by 7.1.2 shall still be respected.</p>\n</blockquote>\n<p>An interesting detail on this, is that the compiler would normally label the kind of behaviour that's involved here.  For example:  \"it is unspecified\" or \"the behaviour is undefined\" etc.  </p>\n", "OwnerUserId": "11698", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:11:21.787", "Id": "1612402", "Score": "0", "CreationDate": "2009-10-23T09:46:47.843", "LastActivityDate": "2009-10-23T09:46:47.843"}, "bq_ids": {"n4140": {"so_1611593_1612402_0": {"section_id": 5402, "quality": 0.8888888888888888, "length": 40}}, "n3337": {"so_1611593_1612402_0": {"section_id": 5197, "quality": 0.8888888888888888, "length": 40}}, "n4659": {"so_1611593_1612402_0": {"section_id": 6849, "quality": 0.8666666666666667, "length": 39}}}, "1611593": {"CommentCount": "5", "ViewCount": "387", "PostTypeId": "1", "LastEditorUserId": "60777", "CreationDate": "2009-10-23T05:52:27.627", "LastActivityDate": "2009-10-23T09:46:47.843", "Title": "Is it okay to have a method declared an inline method if its has a for loop in C++", "LastEditDate": "2009-10-23T05:55:16.077", "Id": "1611593", "Score": "1", "Body": "<p>I have a method like the one shown below.\nWill the for loop always make the compiler for go the \"inline request\" ?</p>\n<pre><code>inline void getImsiGsmMapFrmImsi\n  (\n    const string&amp; imsiForUEDir, \n    struct ImsiGsmMap&amp; imsiGsmMap\n  )\n{\n    for (int i = 0 ; (unsigned)i &lt; imsiForUEDir.length() - 1 ; i++)\n    {\n         imsiGsmMap.value[i] = imsiForUEDir[i] - '0' ;\n    }\n    imsiGsmMap.length = imsiForUEDir.length() - 1 ;\n}\n</code></pre>\n", "Tags": "<c++><optimization><loops><inline>", "OwnerUserId": "195094", "AnswerCount": "6"}});