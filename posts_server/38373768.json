post_cb({"38373961": {"ParentId": "38373768", "PostTypeId": "2", "CommentCount": "10", "Body": "<p>Expressions in <code>decltype</code> are defined by the standard to not be evaluated, they are only parsed to get the type of the expression.</p>\n", "OwnerUserId": "5910058", "LastEditorUserId": "5910058", "LastEditDate": "2016-07-14T12:27:48.433", "Id": "38373961", "Score": "5", "CreationDate": "2016-07-14T12:15:27.807", "LastActivityDate": "2016-07-14T12:27:48.433"}, "38373768": {"CommentCount": "8", "ViewCount": "501", "PostTypeId": "1", "LastEditorUserId": "3393505", "CreationDate": "2016-07-14T12:05:49.480", "LastActivityDate": "2016-07-14T13:27:14.810", "Title": "Shouldn't decltype Trigger Compilation of its Argument?", "AcceptedAnswerId": "38374157", "LastEditDate": "2016-07-14T13:27:14.810", "Id": "38373768", "Score": "16", "Body": "<p>So I'm perplexed as to how this works. Given:</p>\n<pre><code>template &lt;typename T&gt;\nint foo(T t) { t.foo(); }\n</code></pre>\n<p>It seems like this call should fail:</p>\n<pre><code>decltype(foo(int{ 13 })) fail = 42;\n\ncout &lt;&lt; fail &lt;&lt; endl;\n</code></pre>\n<p>Instead <a href=\"http://ideone.com/NVQrli\">it just prints</a>:</p>\n<blockquote>\n<p id=\"so_38373768_38373768_0\">42</p>\n</blockquote>\n<p>It works this way on all the compilers I have access to. Is this correct behavior? I request a quote from the C++ Standard.</p>\n", "Tags": "<c++><templates><compilation><language-lawyer><decltype>", "OwnerUserId": "2642059", "AnswerCount": "2"}, "38374157": {"ParentId": "38373768", "CommentCount": "5", "Body": "<p>In <a href=\"http://eel.is/c++draft/dcl.spec\" rel=\"noreferrer\">[dcl.spec]</a> :</p>\n<blockquote>\n<p id=\"so_38373768_38374157_0\">For an expression e, the type denoted by decltype(e) is defined as\n  follows:</p>\n<p id=\"so_38373768_38374157_1\">if e is an unparenthesized id-expression naming an lvalue or reference introduced from the identifier-list of a decomposition\n  declaration, decltype(e) is the referenced type as given in the\n  specification of the decomposition declaration ([dcl.decomp]);</p>\n<p id=\"so_38373768_38374157_2\">otherwise, if e is an unparenthesized id-expression or an unparenthesized class member access ([expr.ref]), decltype(e) is the\n  type of the entity named by e. If there is no such entity, or if e\n  names a set of overloaded functions, the program is ill-formed;</p>\n<p id=\"so_38373768_38374157_3\">otherwise, if e is an xvalue, decltype(e) is T&amp;&amp;, where T is the type of e;</p>\n<p id=\"so_38373768_38374157_4\">otherwise, if e is an lvalue, decltype(e) is T&amp;, where T is the type of e;</p>\n<p id=\"so_38373768_38374157_5\">otherwise, decltype(e) is the type of e. </p>\n<p id=\"so_38373768_38374157_6\"><strong>The operand of the decltype specifier is an unevaluated operand</strong>\n  (Clause [expr]).</p>\n</blockquote>\n<p>(Emphasis mine)</p>\n<p>So your <code>foo(int{ 13 })</code> is never evaluated.</p>\n", "OwnerUserId": "1870760", "PostTypeId": "2", "Id": "38374157", "Score": "17", "CreationDate": "2016-07-14T12:26:26.657", "LastActivityDate": "2016-07-14T12:26:26.657"}, "bq_ids": {"n4140": {"so_38373768_38374157_0": {"section_id": 5440, "quality": 0.8571428571428571, "length": 6}, "so_38373768_38374157_4": {"section_id": 5440, "quality": 1.0, "length": 5}, "so_38373768_38374157_3": {"section_id": 5440, "quality": 1.0, "length": 5}, "so_38373768_38374157_6": {"section_id": 5440, "quality": 0.75, "length": 6}, "so_38373768_38374157_2": {"section_id": 5440, "quality": 0.9, "length": 18}}, "n3337": {"so_38373768_38374157_2": {"section_id": 5235, "quality": 0.9, "length": 18}, "so_38373768_38374157_0": {"section_id": 5235, "quality": 0.7142857142857143, "length": 5}, "so_38373768_38374157_6": {"section_id": 5235, "quality": 0.75, "length": 6}, "so_38373768_38374157_3": {"section_id": 5235, "quality": 1.0, "length": 5}, "so_38373768_38374157_4": {"section_id": 5235, "quality": 1.0, "length": 5}}, "n4659": {"so_38373768_38374157_6": {"section_id": 6867, "quality": 0.75, "length": 6}, "so_38373768_38374157_4": {"section_id": 6867, "quality": 1.0, "length": 5}, "so_38373768_38374157_0": {"section_id": 6867, "quality": 0.8571428571428571, "length": 6}, "so_38373768_38374157_3": {"section_id": 6867, "quality": 1.0, "length": 5}, "so_38373768_38374157_1": {"section_id": 6867, "quality": 0.5294117647058824, "length": 9}, "so_38373768_38374157_2": {"section_id": 6867, "quality": 0.95, "length": 19}}}});