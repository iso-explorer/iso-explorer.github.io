post_cb({"bq_ids": {"n4140": {"so_29879834_29880264_0": {"length": 30, "quality": 0.8823529411764706, "section_id": 3277}}, "n3337": {"so_29879834_29880264_0": {"length": 30, "quality": 0.8823529411764706, "section_id": 3148}}, "n4659": {"so_29879834_29880264_0": {"length": 30, "quality": 0.8823529411764706, "section_id": 4035}}}, "29880264": {"Id": "29880264", "PostTypeId": "2", "Body": "<p>A function with a deleted definition is still declared. Among other things, it participates in overload resolution normally - but if the overload resolution actually selects it, the program is ill-formed (<strong>[dcl.fct.def.delete]/2</strong>):</p>\n<blockquote>\n<p id=\"so_29879834_29880264_0\">A program that refers to a deleted function implicitly or explicitly, other than to declare it, is ill-formed.\n  <em>[ Note:</em> This includes calling the function implicitly or explicitly and forming a pointer or pointer-to-member\n  to the function. It applies even for references in expressions that are not potentially-evaluated. If a function\n  is overloaded, it is referenced only if the function is selected by overload resolution. <em>\u2014end note ]</em></p>\n</blockquote>\n<p>This is different from a function that was never declared at all. A declaration that does not exist does not, of course, participate in overload resolution.</p>\n", "LastEditorUserId": "2069064", "LastActivityDate": "2015-04-26T16:39:57.060", "Score": "1", "CreationDate": "2015-04-26T16:27:48.757", "ParentId": "29879834", "CommentCount": "1", "OwnerUserId": "1670129", "LastEditDate": "2015-04-26T16:39:57.060"}, "29879834": {"ViewCount": "164", "Body": "<p>I thought that when I delete the move constructor in <code>B</code> then the following code will still compile fine since it should still take the copy constructor to construct <code>B</code> objects. Why does the compiler now complain. Without the <code>=delete</code> it did not and called the copy constructor anyway since it was not allowed to provide a default move constructor!)</p>\n<pre><code>class B{\n    public:\n    B(){}\n    ~B(){}\n    B &amp; operator=(const B &amp; b){\n        std::cout &lt;&lt; \" cannot move -&gt; copy \" &lt;&lt; std::endl; \n        return *this;\n    }\n    B(const B &amp; v){\n        std::cout &lt;&lt; \" cannot move -&gt; copy \" &lt;&lt; std::endl;        \n    }\n\n    // B(B &amp;&amp; b) = delete; // uncomment this!\n};\n\n\nint main()\n{\n    B b( B{} ); \n}\n</code></pre>\n<p>Compiler Output with clang 3.6 (<a href=\"http://coliru.stacked-crooked.com/a/e5c3a0a5eaca2af1\" rel=\"nofollow\">Live code</a>)</p>\n<pre><code>main.cpp:27:7: error: call to deleted constructor of 'B'\n\n    B b( B{} );\n\n      ^  ~~~\n\nmain.cpp:21:5: note: 'B' has been explicitly marked deleted here\n\n    B(B &amp;&amp; b) = delete;\n\n    ^\n\n1 error generated.\n</code></pre>\n", "AcceptedAnswerId": "29880264", "Title": "Fallback to copy constructor not working?", "CreationDate": "2015-04-26T15:49:12.240", "Id": "29879834", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2015-04-26T16:39:57.060", "Score": "4", "OwnerUserId": "293195", "Tags": "<c++><c++11><copy-constructor><c++14><move-semantics>", "AnswerCount": "1"}});