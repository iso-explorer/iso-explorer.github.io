post_cb({"15441835": {"ParentId": "15441294", "CommentCount": "5", "CreationDate": "2013-03-15T20:48:10.267", "OwnerUserId": "16287", "PostTypeId": "2", "Id": "15441835", "Score": "1", "Body": "<p>As Kerrek SB mentions, you <em>need</em> to initialize <code>A</code> in the constructor for <code>D</code>.</p>\n<p>However, you must also explicitly  tell the compiler that you are <strong>not</strong> accessing <code>A</code> from its (privately) derived context by using the scope operator.</p>\n<pre><code>class D : public C {\npublic:\n    D(void) : ::A(3), C(3) { }\n//            ^^ Access this constructor from a global context\n    using C::getVirt;\n};\n</code></pre>\n<p>This also means that your constructor must be public, as is already the case with your code.</p>\n", "LastActivityDate": "2013-03-15T20:48:10.267"}, "15441379": {"ParentId": "15441294", "PostTypeId": "2", "CommentCount": "3", "CreationDate": "2013-03-15T20:17:08.457", "Score": "6", "LastEditorUserId": "596781", "LastEditDate": "2013-03-15T21:08:44.567", "Id": "15441379", "OwnerUserId": "596781", "Body": "<p>That has nothing to do with access control (at least not primarily). Rather, you have to understand how virtual bases work: The virtual base subobject is initialized by the <em>most derived</em> class. Since you don't mention <code>A</code> in the constructor initializer list of <code>D</code>, the default constructor is tried, but doesn't exist.</p>\n<p>To fix this, initalize <code>A</code> properly in <code>D</code>:</p>\n<pre><code> D() : A(3), C(3) { }\n</code></pre>\n<p>When you say <code>A(3)</code>, name lookup is performed according to 12.6.2/2:</p>\n<blockquote>\n<p id=\"so_15441294_15441379_0\">In a <em>mem-initializer-id</em> an initial unqualified identifier is looked up in the scope of the constructor\u2019s class and, if not found in that scope, it is looked up in the scope containing the constructor\u2019s definition.</p>\n</blockquote>\n<p>As Drew Dorman rightly points out, you can force a direct path to the virtual base class by calling it <code>::A</code> and thus obtaining the desired access.</p>\n", "LastActivityDate": "2013-03-15T21:08:44.567"}, "15441294": {"CommentCount": "2", "AcceptedAnswerId": "15441835", "PostTypeId": "1", "LastEditorUserId": "963864", "CreationDate": "2013-03-15T20:11:52.580", "LastActivityDate": "2013-06-20T21:28:08.137", "LastEditDate": "2013-06-20T21:28:08.137", "ViewCount": "241", "FavoriteCount": "1", "Title": "Do all derived classes from a hierarchy require access to the virtual base class?", "Id": "15441294", "Score": "6", "Body": "<p>When I try to compile the following code:</p>\n<pre><code>class A {\npublic:\n    A(int v) : virt(v) { }\n    int virt;\n    int getVirt(void) const { return virt; }\n};\n\nclass B : private virtual A {\nprotected:\n    B(int v) : A(v) { }\n    using A::getVirt;\n};\n\nclass C : public B, private virtual A {\nprotected:\n    C(int v) : A(v), B(v) { }\n    using A::getVirt;\n};\n\nclass D : public C {\npublic:\n    D(void) : C(3) { }\n    using C::getVirt;\n};\n\n#include &lt;iostream&gt;\n\nint main(int argc, char *argv[]) {\n    D d;\n    std::cout &lt;&lt; \"The number is: \" &lt;&lt; d.getVirt() &lt;&lt; std::endl;\n\n    return 0;\n}\n</code></pre>\n<p>I get an error about D not instantiating A; is that correct?  If a virtual base is embedded in the hierarchy do all derived classes also need to derive from that base, virtually, so they can call the parametric constructor of the virtual base?</p>\n<p>BTW, here are the errors produced by G++:</p>\n<pre><code>Main.cpp: In constructor \u2018D::D()\u2019:\nMain.cpp:22:18: error: no matching function for call to \u2018A::A()\u2019\nMain.cpp:22:18: note: candidates are:\nMain.cpp:3:5: note: A::A(int)\nMain.cpp:3:5: note:   candidate expects 1 argument, 0 provided\nMain.cpp:1:7: note: A::A(const A&amp;)\nMain.cpp:1:7: note:   candidate expects 1 argument, 0 provided\n</code></pre>\n", "Tags": "<c++><constructor><virtual-inheritance>", "OwnerUserId": "390628", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_15441294_15441379_0": {"section_id": 429, "quality": 1.0, "length": 15}}, "n3337": {"so_15441294_15441379_0": {"section_id": 421, "quality": 1.0, "length": 15}}, "n4659": {"so_15441294_15441379_0": {"section_id": 447, "quality": 1.0, "length": 15}}}});