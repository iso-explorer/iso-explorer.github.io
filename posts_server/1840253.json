post_cb({"bq_ids": {"n4140": {"so_1840253_1840318_0": {"length": 25, "quality": 0.8620689655172413, "section_id": 72}}, "n3337": {"so_1840253_1840318_0": {"length": 25, "quality": 0.8620689655172413, "section_id": 67}}}, "1840380": {"PostTypeId": "2", "Body": "<p>Could you specify what compiler you are using? The code in the question, with</p>\n<pre><code>int main() {\n   g&lt;int&gt;();\n}\n</code></pre>\n<p>added compiled without problem using cl.exe from Microsoft Visual Studio 9;</p>\n<p>It failed on various versions of G++ I tried, and the <a href=\"http://www.comeaucomputing.com/tryitout/\" rel=\"nofollow noreferrer\">Comeau</a> online compiler too.</p>\n", "LastActivityDate": "2009-12-03T14:52:14.553", "Id": "1840380", "CommentCount": "0", "CreationDate": "2009-12-03T14:52:14.553", "ParentId": "1840253", "Score": "0", "OwnerUserId": "8516"}, "1840318": {"PostTypeId": "2", "Body": "<p>Try the following code:</p>\n<pre><code>template&lt;class T&gt; void g()\n{\n   A&lt;T&gt; a;\n   a.template f&lt;3&gt;();  // add `template` keyword here\n}\n</code></pre>\n<p>According to C++'03 Standard 14.2/4:</p>\n<blockquote>\n<p id=\"so_1840253_1840318_0\">When the name of a member template specialization appears after <code>.</code> or <code>-&gt;</code> in a <em>postfix</em>-expression, or after <em>nested-name-specifier</em> in a <em>qualified-id</em>, and the postfix-expression or qualified-id explicitly depends on a template-parameter (14.6.2), the member template name must be prefixed by the keyword <code>template</code>. Otherwise the name is assumed to name a non-template.</p>\n</blockquote>\n<p>Future C++ Standard seems to be still require this keyword according to draft n2857 14.3/4. Some compilers has special mode that allows to compile original code without errors (Comeau compiles it in so called <em>relaxed mode</em>).</p>\n", "LastActivityDate": "2009-12-04T06:02:01.623", "LastEditorUserId": "123111", "Id": "1840318", "CommentCount": "10", "CreationDate": "2009-12-03T14:45:03.553", "ParentId": "1840253", "Score": "72", "OwnerUserId": "123111", "LastEditDate": "2009-12-04T06:02:01.623"}, "1840253": {"ViewCount": "15348", "Body": "<p>This doesn't compile:</p>\n<pre><code>template&lt;class X&gt; struct A {\n   template&lt;int I&gt; void f() {}\n};\n\ntemplate&lt;class T&gt; void g()\n{\n   A&lt;T&gt; a;\n   a.f&lt;3&gt;();  // Compilation fails here (Line 18)\n}\n\nint main(int argc, char *argv[])\n{\n   g&lt;int&gt;();  // Line 23\n}\n</code></pre>\n<p>The compiler (gcc) says:</p>\n<blockquote>\n<p id=\"so_1840253_1840253_0\">hhh.cpp: In function 'void g()':</p>\n<p id=\"so_1840253_1840253_1\">hhh.cpp:18: error: expected primary-expression before ')' token</p>\n<p id=\"so_1840253_1840253_2\">hhh.cpp: In function 'void g() [with T = int]':</p>\n<p id=\"so_1840253_1840253_3\">hhh.cpp:23:   instantiated from here</p>\n<p id=\"so_1840253_1840253_4\">hhh.cpp:18: error: invalid use of member (did you forget the '&amp;' ?)</p>\n</blockquote>\n<p>Can anyone explain why this is?  Is there a way to get it to work?</p>\n", "AcceptedAnswerId": "1840318", "Title": "template member function of template class called from template function", "CreationDate": "2009-12-03T14:37:17.260", "Id": "1840253", "CommentCount": "3", "FavoriteCount": "25", "PostTypeId": "1", "LastEditDate": "2017-01-17T06:11:14.153", "LastEditorUserId": "3980929", "LastActivityDate": "2017-01-17T06:11:14.153", "Score": "40", "OwnerUserId": "82570", "Tags": "<c++><templates>", "AnswerCount": "3"}, "1840289": {"PostTypeId": "2", "Body": "<p>Where is the type T defined ? </p>\n<p>When you call function g() at that time type T must be known else get ready for compiler error saying that T is undefined.</p>\n", "LastActivityDate": "2009-12-03T14:42:29.233", "Id": "1840289", "CommentCount": "2", "CreationDate": "2009-12-03T14:42:29.233", "ParentId": "1840253", "Score": "0", "OwnerUserId": "303986"}});