post_cb({"20603028": {"ParentId": "20602859", "CommentCount": "1", "Body": "<p>As-written the way you're doing this is undefined behavior. If you wanted to see the effects of <code>const_cast&lt;&gt;</code> in a defined manner:</p>\n<pre><code>int a = 5;                  // note: not const. regular object.\nconst int&amp; cref = a;        // const-reference to same object.\ncref = 7;                   // illegal. cref is a const reference.\nconst_cast&lt;int&amp;&gt;(cref) = 7; // legal. the original object a is not const.\n</code></pre>\n<p>The <em>only</em> reason this is defined behavior is due to the non-const nature of the original variable, <code>a</code>. You cannot take an outright-const <em>object</em> and simply cast away the const-ness, which is what your posted code did. (at least as it has been explained to me on several occasions).</p>\n", "OwnerUserId": "1322972", "PostTypeId": "2", "Id": "20603028", "Score": "7", "CreationDate": "2013-12-16T03:35:08.367", "LastActivityDate": "2013-12-16T03:35:08.367"}, "20602915": {"ParentId": "20602859", "PostTypeId": "2", "CommentCount": "7", "Body": "<p>The compiler is cheating you, since this (<em>edit: the way you used it above exactly.</em>) is explicitly undefined behavior. When it sees the <code>a</code> constant defined in the same scope as the <code>cout</code> statement, it's not bothering to even look at memory, most likely.</p>\n<p>You could make a more contrived example to fool your compiler, but the following modification gives me the results you want in gcc at least:</p>\n<pre><code>volatile const int a = 5;\n</code></pre>\n<p>To clarify, not all const_cast usage is undefined behavior, see WhozCraig's example.</p>\n", "OwnerUserId": "334932", "LastEditorUserId": "334932", "LastEditDate": "2013-12-16T03:44:00.657", "Id": "20602915", "Score": "1", "CreationDate": "2013-12-16T03:20:12.800", "LastActivityDate": "2013-12-16T03:44:00.657"}, "20602859": {"CommentCount": "6", "ViewCount": "290", "PostTypeId": "1", "ClosedDate": "2017-07-31T11:22:22.713", "LastEditorUserId": "1708801", "CreationDate": "2013-12-16T03:13:03.220", "LastActivityDate": "2015-05-07T18:32:09.513", "Title": "behavior of const_cast in C++", "AcceptedAnswerId": "20603028", "LastEditDate": "2015-05-07T18:32:09.513", "Id": "20602859", "Score": "4", "Body": "<p>Here is my problem, the problem is in comments</p>\n<pre><code>const int a = 5;\nconst_cast&lt;int&amp;&gt;(a)=7; //throw over const attribute in a,and assign to 7\nstd::cout&lt;&lt;a&lt;&lt;std::endl; //why still out put 5!!!!!!!!!!\n</code></pre>\n<p>Who can tell me why, and some books account these problems to recommend ?\nThanks!</p>\n", "Tags": "<c++><undefined-behavior><const-cast>", "OwnerUserId": "2248425", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_20602859_20602929_0": {"section_id": 5433, "quality": 1.0, "length": 10}}, "n3337": {"so_20602859_20602929_0": {"section_id": 5228, "quality": 1.0, "length": 10}}, "n4659": {"so_20602859_20602929_0": {"section_id": 6861, "quality": 1.0, "length": 10}}}, "20602929": {"ParentId": "20602859", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3485.pdf\" rel=\"nofollow noreferrer\">draft C++ standard</a> section <code>7.1.6.1</code> <em>The cv-qualifiers</em>  paragraph <em>4</em> says:</p>\n<blockquote>\n<p id=\"so_20602859_20602929_0\">[...]any attempt to modify a const object during its lifetime (3.8) results in <a href=\"http://en.wikipedia.org/wiki/Undefined_behavior\" rel=\"nofollow noreferrer\">undefined behavior</a></p>\n</blockquote>\n<p>So any behavior is possible but you should not be doing this and you definitely can not rely on this behavior. Of course <em>const_cast</em> does have valid uses as the accepted answer in <a href=\"https://stackoverflow.com/questions/357600/is-const-cast-safe\">Is const_cast safe?</a> says:</p>\n<blockquote>\n<p id=\"so_20602859_20602929_1\">const_cast is safe only if you're casting a variable that was originally non-const.[...]</p>\n</blockquote>\n<p>We can see one way the results you are seeing can happen from this <a href=\"http://coliru.stacked-crooked.com/a/dd5728d5a0e01b59\" rel=\"nofollow noreferrer\">live example</a> that <code>gcc 4.8.1</code> without any optimization is just using the value <code>5</code> instead of reading the current value:</p>\n<pre><code>movl    $7, (%rax)\nmovl    $5, %esi\nmovl    $_ZSt4cout, %edi\n</code></pre>\n<p>in the <code>non const</code> case we will see something like this:</p>\n<pre><code>movl    $7, -4(%rbp)\nmovl    -4(%rbp), %eax\nmovl    %eax, %esi\nmovl    $_ZSt4cout, %edi\n</code></pre>\n", "OwnerUserId": "1708801", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:15:34.097", "Id": "20602929", "Score": "3", "CreationDate": "2013-12-16T03:21:15.450", "LastActivityDate": "2013-12-16T03:45:02.580"}});