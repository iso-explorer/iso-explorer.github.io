post_cb({"12084224": {"Id": "12084224", "PostTypeId": "2", "Body": "<p>In this context, if you get MSVC++ warning C4819, just change the source file coding to \"UTF-8 with Bom\".</p>\n<p>GCC 4.1 doesn't support this, but GCC 4.4 does, and the latest Qt version uses GCC 4.4, so use \"UTF-8 with Bom\" as source file coding.</p>\n", "LastEditorUserId": "777186", "LastActivityDate": "2012-08-23T04:42:30.407", "Score": "2", "CreationDate": "2012-08-23T03:10:58.187", "ParentId": "331690", "CommentCount": "0", "OwnerUserId": "665323", "LastEditDate": "2012-08-23T04:42:30.407"}, "331982": {"Id": "331982", "PostTypeId": "2", "Body": "<p>It's also worth noting that wide characters in C++ aren't really Unicode strings as such. They are just strings of larger characters, usually 16, but sometimes 32 bits. This is implementation-defined, though, IIRC you can have an 8-bit <code>wchar_t</code> You have no real guarantee as to the encoding in them, so if you are trying to do something like text processing, you will probably want a typedef to the most suitable integer type to your Unicode entity.</p>\n<p>C++1x has additional unicode support in the form of UTF-8 encoding string literals (<code>u8\"text\"</code>), and UTF-16 and UTF-32 data types (<code>char16_t</code> and <code>char32_t</code> IIRC) as well as corresponding string constants (<code>u\"text\"</code> and <code>U\"text\"</code>). The encoding on characters specified without <code>\\uxxxx</code> or <code>\\Uxxxxxxxx</code> constants is still implementation-defined, though (and there is no encoding support for complex string types outside the literals)</p>\n", "OwnerDisplayName": "coppro", "LastActivityDate": "2008-12-01T19:51:50.647", "Score": "2", "CreationDate": "2008-12-01T19:51:50.647", "ParentId": "331690", "CommentCount": "1", "OwnerUserId": "16855"}, "331935": {"Body": "<p>Encoding in C++ is quite a bit complicated. Here is my understanding of it.</p>\n<p>Every implementation has to support characters from the <em>basic source character set</em>. These include common characters listed in \u00a72.2/1 (\u00a72.3/1 in C++11). These characters should all fit into one <code>char</code>. In addition implementations have to support a way to name other characters using a way called <code>universal-character-names</code> and look like <code>\\uffff</code> or <code>\\Uffffffff</code> and can be used to refer to Unicode characters. A subset of them are usable in identifiers (listed in Annex E). </p>\n<p>This is all nice, but the mapping from characters in the file, to source characters (used at compile time) is implementation defined. This constitutes the encoding used. Here is what it says literally (C++98 version):</p>\n<blockquote>\n<p id=\"so_331690_331935_0\">Physical source file characters are\n  mapped, in an implementation-defined\n  manner, to the basic source character\n  set (introducing new-line characters\n  for end-of-line indicators) if\n  necessary. Trigraph sequences (2.3)\n  are replaced by corresponding\n  single-character internal\n  representations. Any source file\n  character not in the basic source\n  character set (2.2) is replaced by the\n  universal-character-name that des-\n  ignates that character. (An\n  implementation may use any internal\n  encoding, so long as an actual\n  extended character encountered in the\n  source file, and the same extended\n  character expressed in the source file\n  as a universal-character-name (i.e.\n  using the \\uXXXX notation), are\n  handled equivalently.)</p>\n</blockquote>\n<p>For gcc, you can change it using the option <code>-finput-charset=charset</code>. Additionally, you can change the execution character used to represet values at runtime. The proper option for this is <code>-fexec-charset=charset</code> for char (it defaults to <code>utf-8</code>) and <code>-fwide-exec-charset=charset</code> (which defaults to either <code>utf-16</code> or <code>utf-32</code> depending on the size of <code>wchar_t</code>). </p>\n", "CreationDate": "2008-12-01T19:38:42.700", "ParentId": "331690", "CommentCount": "0", "LastEditDate": "2014-04-01T19:31:50.090", "PostTypeId": "2", "OwnerDisplayName": "litb", "LastEditorUserId": "719662", "LastActivityDate": "2014-04-01T19:31:50.090", "Id": "331935", "Score": "33", "OwnerUserId": "34509"}, "331690": {"ViewCount": "29639", "Body": "<p>What is the standard encoding of C++ source code? Does the C++ standard even say something about this? Can I write C++ source in Unicode?</p>\n<p>For example, can I use non-ASCII characters such as Chinese characters in comments? If so, is full Unicode allowed or just a subset of Unicode? (e.g., that 16-bit first page or whatever it's called.)</p>\n<p>Furthermore, can I use Unicode for strings? For example:</p>\n<pre><code>Wstring str=L\"Strange chars: \u00e2\u00c2 \u010c\u0161\u0111 \u011b \u20ac\u20ac\";\n</code></pre>\n", "AcceptedAnswerId": "331935", "Title": "Using Unicode in C++ source code", "CreationDate": "2008-12-01T18:09:45.347", "LastActivityDate": "2016-10-18T03:29:59.823", "CommentCount": "1", "FavoriteCount": "10", "PostTypeId": "1", "LastEditDate": "2015-05-03T02:38:14.637", "OwnerDisplayName": "Kresimir Cosic", "LastEditorUserId": "15168", "Id": "331690", "Score": "43", "OwnerUserId": "30187", "Tags": "<c++><unicode><character-encoding><standards>", "AnswerCount": "8"}, "331727": {"Id": "331727", "PostTypeId": "2", "Body": "<p>AFAIK It's not standardized as you can put any type of characters in wide strings.\nYou just have to check that your compiler is set to Unicode source code to make it work right.</p>\n", "OwnerDisplayName": "Klaim", "LastActivityDate": "2008-12-01T18:27:16.683", "Score": "0", "CreationDate": "2008-12-01T18:27:16.683", "ParentId": "331690", "CommentCount": "0", "OwnerUserId": "2368"}, "bq_ids": {"n4140": {"so_331690_331935_0": {"length": 55, "quality": 0.9016393442622951, "section_id": 5313}}, "n3337": {"so_331690_331935_0": {"length": 55, "quality": 0.9016393442622951, "section_id": 5110}}, "n4659": {"so_331690_331935_0": {"length": 49, "quality": 0.8032786885245902, "section_id": 6737}}}, "337423": {"Id": "337423", "PostTypeId": "2", "Body": "<p>In addition to litb's post, MSVC++ supports Unicode too. I understand it gets the Unicode encoding from the BOM. It definitely supports code like <code>int (*\u266b)();</code> or <code>const std::set&lt;int&gt; \u2205;</code>\nIf you're really into code obfuscuation:</p>\n<pre><code>typedef void \u203c; // Also known as \\u203C\nclass oo\u025f {\n    operator \u203c() {}\n};\n</code></pre>\n", "OwnerDisplayName": "MSalters", "LastActivityDate": "2008-12-03T15:03:03.270", "Score": "10", "CreationDate": "2008-12-03T15:03:03.270", "ParentId": "331690", "CommentCount": "1", "OwnerUserId": "15416"}, "331725": {"Id": "331725", "PostTypeId": "2", "Body": "<p>For encoding in strings I think you are meant to use the <strong>\\u</strong> notation, e.g.:</p>\n<pre><code>std::wstring str = L\"\\u20AC\"; // Euro character\n</code></pre>\n", "OwnerDisplayName": "Rob", "LastActivityDate": "2008-12-01T18:26:42.130", "Score": "3", "CreationDate": "2008-12-01T18:26:42.130", "ParentId": "331690", "CommentCount": "0", "OwnerUserId": "9236"}, "331724": {"Body": "<p>The C++ standard doesn't say anything about source-code file encoding, so far as I know.</p>\n<p>The usual encoding is (or used to be) 7-bit ASCII -- some compilers (Borland's, for instance) would balk at ASCII characters that used the high-bit. There's no technical reason that Unicode characters can't be used, if your compiler and editor accept them -- most modern Linux-based tools, and many of the better Windows-based editors, handle UTF-8 encoding with no problem, though I'm not sure that Microsoft's compiler will.</p>\n<p>EDIT: It looks like Microsoft's compilers will accept Unicode-encoded files, but will sometimes produce errors on 8-bit ASCII too:</p>\n<pre><code>warning C4819: The file contains a character that cannot be represented\nin the current code page (932). Save the file in Unicode format to prevent\ndata loss.\n</code></pre>\n", "CreationDate": "2008-12-01T18:26:21.443", "ParentId": "331690", "CommentCount": "4", "LastEditDate": "2008-12-01T18:32:36.970", "PostTypeId": "2", "LastEditorDisplayName": "Head Geek", "LastActivityDate": "2008-12-01T18:32:36.953", "LastEditorUserId": "12193", "Id": "331724", "OwnerDisplayName": "Head Geek", "Score": "9", "OwnerUserId": "12193"}, "332663": {"Id": "332663", "PostTypeId": "2", "Body": "<p>There are two issues at play here.  The first is what characters are allowed in C++ code (and comments), such as variable names.  The second is what characters are allowed in strings and string literals.</p>\n<p>As noted, C++ compilers <strong>must</strong> support a very restricted ASCII-based character set for the characters allowed in code and comments.  In practice, this character set didn't work very well with some European character sets (and especially with some European keyboards that didn't have a few characters -- like square brackets -- available), so the concept of digraphs and trigraphs was introduced.  Many compilers accept more than this character set at this time, but there isn't any guarantee.</p>\n<p>As for strings and string literals, C++ has the concept of a wide character and wide character string.  However, the encoding for that character set is undefined.  In practice it's almost always Unicode, but I don't think there's any guarantee here.  Wide character string literals look like L\"string literal\", and these can be assigned to std::wstring's.</p>\n<hr>\n<p>C++11 added explicit support for Unicode strings and string literals, encoded as UTF-8, UTF-16 big endian, UTF-16 little endian, UTF-32 big endian and UTF-32 little endian.</p>\n</hr>", "LastEditorUserId": "10593", "LastActivityDate": "2015-04-22T15:12:08.043", "Score": "6", "CreationDate": "2008-12-02T00:14:49.227", "ParentId": "331690", "CommentCount": "0", "OwnerUserId": "10593", "LastEditDate": "2015-04-22T15:12:08.043"}});