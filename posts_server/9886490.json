post_cb({"9886696": {"Id": "9886696", "PostTypeId": "2", "Body": "<p>From C++ 03 standard section <em>23.1.2 Associative containers [lib.associative.reqmts]</em>, point 8 states:</p>\n<blockquote>\n<p id=\"so_9886490_9886696_0\">The insert members shall not affect the validity of iterators and references to the container, and the erase members shall\n  invalidate only iterators and references to the erased elements.</p>\n</blockquote>\n<p>From C++11 standard section <em>23.2.4 Associative containers [associative.reqmts]</em>, point 9 states:</p>\n<blockquote>\n<p id=\"so_9886490_9886696_1\">The insert members shall not affect the validity of iterators and references to the container, and the erase\n  members shall invalidate only iterators and references to the erased elements.</p>\n</blockquote>\n<p>Based on this, the <code>assert()</code> in the posted code will be <code>true</code>.</p>\n<p>EDIT:</p>\n<p>These quotes are not true for <code>unordered</code> containers: see answer from <a href=\"https://stackoverflow.com/users/906773/jesse\">Jesse</a>.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2012-03-27T09:34:31.077", "Score": "1", "CreationDate": "2012-03-27T09:26:07.423", "ParentId": "9886490", "CommentCount": "4", "OwnerUserId": "1033896", "LastEditDate": "2017-05-23T12:27:49.383"}, "9886490": {"ViewCount": "253", "Body": "<p>Does this code work across all standard compliant C++ compilers (it works with g++)? Why (please give c++11 reference, if possible)? How about std::unordered_map and associative containers in general?</p>\n<pre><code>std::map&lt;std::string, std::string&gt; map;\n\nstd::map&lt;std::string, std::string&gt;::iterator i(map.end());\n\nmap.insert({\"bla\", \"\"});\nmap.insert({\"hah\", \"\"});\n\nassert(map.end() == i);\n</code></pre>\n", "AcceptedAnswerId": "9886841", "Title": "end() iterator in associative containers", "CreationDate": "2012-03-27T09:13:39.067", "Id": "9886490", "CommentCount": "0", "LastEditDate": "2012-03-27T09:14:52.203", "PostTypeId": "1", "LastEditorUserId": "1100080", "LastActivityDate": "2012-03-27T09:59:47.457", "Score": "2", "OwnerUserId": "1095108", "Tags": "<c++><stl>", "AnswerCount": "5"}, "9886841": {"Id": "9886841", "PostTypeId": "2", "Body": "<p>For map, yes -- virtually nothing but deletion of the referred-to object invalidates an iterator in a map.</p>\n<p>For unordered_map, in practice, maybe yes for this specific case -- the <code>end</code> iterator is often a bit different from other iterators, so it may not contain any actual address or anything like that -- it's just a special sentinel value that other iterators will compare equal to after you've iterated across an entire container.</p>\n<p>That's not really guaranteed though. Specifically, your insertions could cause rehashing, [Edit: here I'm more or less assuming that your two insertions are intended as a place-holder for some arbitrary number of insertions. You can figure out whether re-hashing happens for a specific load factor, number of insertions, etc., but you generally don't want to -- depending on it leads to fragile code] and rehashing invalidates iterators (\u00a723.2.5/8). Although (as mentioned above) the iterator returned by <code>end()</code> is often \"special\", the standard doesn't require that, so after the insertions, what you previously got from <code>end</code> may be invalid, so virtually nothing is required about it (including comparing equal to anything in particular).</p>\n", "LastEditorUserId": "179910", "LastActivityDate": "2012-03-27T09:45:21.540", "Score": "2", "CreationDate": "2012-03-27T09:33:59.913", "ParentId": "9886490", "CommentCount": "3", "OwnerUserId": "179910", "LastEditDate": "2012-03-27T09:45:21.540"}, "9886608": {"Id": "9886608", "PostTypeId": "2", "Body": "<p>The code uses extended initialiazer lists over here:</p>\n<pre><code>map.insert({\"bla\", \"\"}); // the {\"bla\", \"\"}\n</code></pre>\n<p>This is a C++ 11 feature, hence won't work on non-C++ 11 compilers.</p>\n<p>Working on Compilers:</p>\n<ul>\n<li>GCC 4.4.1 and all later versions</li>\n</ul>\n<p>Not working:</p>\n<ul>\n<li>Digital Mars C++</li>\n<li>Borland C++ (Not exactly mainstream, but still checked)</li>\n<li>Visual C++</li>\n<li>Obviously most compilers that don't support C++ 11</li>\n</ul>\n", "LastActivityDate": "2012-03-27T09:20:35.907", "CommentCount": "2", "CreationDate": "2012-03-27T09:20:35.907", "ParentId": "9886490", "Score": "0", "OwnerUserId": "753341"}, "bq_ids": {"n4140": {"so_9886490_9886696_1": {"length": 14, "quality": 0.9333333333333333, "section_id": 745}, "so_9886490_9886852_1": {"length": 22, "quality": 0.9565217391304348, "section_id": 767}, "so_9886490_9886852_0": {"length": 14, "quality": 0.9333333333333333, "section_id": 745}, "so_9886490_9886696_0": {"length": 14, "quality": 0.9333333333333333, "section_id": 745}}, "n3337": {"so_9886490_9886696_1": {"length": 14, "quality": 0.9333333333333333, "section_id": 734}, "so_9886490_9886852_1": {"length": 22, "quality": 0.9565217391304348, "section_id": 754}, "so_9886490_9886852_0": {"length": 14, "quality": 0.9333333333333333, "section_id": 734}, "so_9886490_9886696_0": {"length": 14, "quality": 0.9333333333333333, "section_id": 734}}, "n4659": {"so_9886490_9886696_1": {"length": 14, "quality": 0.9333333333333333, "section_id": 803}, "so_9886490_9886852_1": {"length": 22, "quality": 0.9565217391304348, "section_id": 827}, "so_9886490_9886852_0": {"length": 14, "quality": 0.9333333333333333, "section_id": 803}, "so_9886490_9886696_0": {"length": 14, "quality": 0.9333333333333333, "section_id": 803}}}, "9886852": {"Id": "9886852", "PostTypeId": "2", "Body": "<p>It seems you are looking for quotes from the standard concerning interator invalidation:</p>\n<p>For <code>set, multiset, map and multimap</code></p>\n<blockquote>\n<p id=\"so_9886490_9886852_0\">The insert members shall not affect the validity of iterators and references to the container, and the erase\n  members shall invalidate only iterators and references to the erased elements.</p>\n</blockquote>\n<p>For <code>unordered_set, unordered_map, unordered_multiset, and unordered_multimap</code></p>\n<blockquote>\n<p id=\"so_9886490_9886852_1\">The insert members shall not affect the validity of iterators if (N+n) &lt; z * B, where N is the number\n  of elements in the container prior to the insert operation, n is the number of elements inserted, B is the\n  container\u2019s bucket count, and z is the container\u2019s maximum load factor.</p>\n</blockquote>\n<p>So, for <code>map</code> insertion does not invalidate the <code>end</code> iterator, however, for <code>unordered_map</code> it will if the number of elements added to the existing number of elements exceeds <code>bucket_count * max_load_factor</code>.</p>\n", "LastActivityDate": "2012-03-27T09:34:32.743", "CommentCount": "0", "CreationDate": "2012-03-27T09:34:32.743", "ParentId": "9886490", "Score": "2", "OwnerUserId": "906773"}, "9887275": {"Id": "9887275", "PostTypeId": "2", "Body": "<p>The <code>end</code> iterator indicates that one cannot iterate further through a contained and therefore should be expected to change when new elements are inserted into the container.</p>\n<p><code>maps</code> are normally implemented as a binary tree and may use a special value (such as NULL) to indicate that further iteration is impossible. But this is a result of the underlying implementation and has nothing to do with specified behaviour.</p>\n", "LastActivityDate": "2012-03-27T09:59:47.457", "CommentCount": "0", "CreationDate": "2012-03-27T09:59:47.457", "ParentId": "9886490", "Score": "0", "OwnerUserId": "232918"}});