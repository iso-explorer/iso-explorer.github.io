post_cb({"45880827": {"ParentId": "45880561", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>Your destructor has a logical error, since you print that a copy is destructed when <code>copy</code> is wrong.</p>\n<p>Change this:</p>\n<pre><code>~B(){ std::cout &lt;&lt; (copy?\"B-destructed\":\"B-(copy)-destructed\") &lt;&lt; std::endl;}\n</code></pre>\n<p>to this:</p>\n<pre><code>~B(){ std::cout &lt;&lt; (copy?\"B-(copy)-destructed\":\"B-destructed\") &lt;&lt; std::endl;}\n</code></pre>\n<p>which now outputs:</p>\n<pre><code>B-constructed\nB-copy-constructed\nA-constructed\nB-(copy)-destructed\nf over\nA-destructed\nB-destructed\nmain over\n</code></pre>\n<p>nice and clear (<a href=\"https://stackoverflow.com/questions/2254263/order-of-member-constructor-and-destructor-calls\">Order of member constructor and destructor calls</a>).</p>\n<hr>\n<p>Does the standard say anything about binding member references to constructor parameters?</p>\n<blockquote>\n<p id=\"so_45880561_45880827_0\">Similarly, before the lifetime of an object has started but after the\n  storage which the object will occupy has been allocated or, after the\n  lifetime of an object has ended and before the storage which the\n  object occupied is reused or released, any glvalue that refers to the\n  original object may be used but only in limited ways. For an object\n  under construction or destruction, see [class.cdtor]. Otherwise, such\n  a glvalue refers to allocated storage\n  ([basic.stc.dynamic.deallocation]), and using the properties of the\n  glvalue that do not depend on its value is well-defined.</p>\n</blockquote>\n<p><a href=\"http://eel.is/c++draft/basic.life#7\" rel=\"nofollow noreferrer\">Source</a></p>\n</hr>", "OwnerUserId": "2411320", "LastEditorUserId": "2411320", "LastEditDate": "2017-08-25T12:12:55.043", "Id": "45880827", "Score": "1", "CreationDate": "2017-08-25T11:54:03.060", "LastActivityDate": "2017-08-25T12:12:55.043"}, "45880561": {"CommentCount": "4", "ViewCount": "60", "PostTypeId": "1", "LastEditorUserId": "2411320", "CreationDate": "2017-08-25T11:39:28.630", "LastActivityDate": "2017-08-25T12:21:44.830", "Title": "C++ bind reference member to constructor parameter", "AcceptedAnswerId": "45880827", "LastEditDate": "2017-08-25T12:21:44.830", "Id": "45880561", "Score": "1", "Body": "<p>When running the following code on gcc 8 (<a href=\"https://wandbox.org/\" rel=\"nofollow noreferrer\">https://wandbox.org/</a>, with \"g++ prog.cc -Wall -Wextra -std=c++1z\"):</p>\n<pre><code>#include &lt;iostream&gt;\n\nclass B{\npublic:\n    B(): copy(false){ std::cout &lt;&lt; \"B-constructed\" &lt;&lt; std::endl;}\n    B(const B&amp; b): copy(true){ std::cout &lt;&lt; \"B-copy-constructed\" &lt;&lt; std::endl; }\n    ~B(){ std::cout &lt;&lt; (copy?\"B-destructed\":\"B-(copy)-destructed\") &lt;&lt; std::endl;}\n\n    bool copy;\n};\n\nclass A{\npublic:\n    A(B b): bref(b){std::cout &lt;&lt; \"A-constructed\" &lt;&lt; std::endl;}\n    ~A() {std::cout &lt;&lt; \"A-destructed\" &lt;&lt; std::endl;}\n    B &amp;bref;\n};\n\n\nvoid f(){\n    B b;\n    A a(b);\n\n    std::cout &lt;&lt; \"f over\" &lt;&lt; std::endl;\n}\n\nint main()\n{\n    f();\n\n    std::cout &lt;&lt; \"main over\" &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>\n<p>the following output is yielded:</p>\n<pre><code>B-constructed\nB-copy-constructed\nA-constructed\nB-destructed\nf over\nA-destructed\nB-(copy)-destructed\nmain over\n</code></pre>\n<p>The order of object destructions seems unusual. It is as if the lifetime of the constructor's parameter is extended. Does the standard say anything about binding member references to constructor parameters?</p>\n<p>I don't think that this quote from the standard applies, as the parameter is not a temporary object (however I do not know the definition of a \"temporary expression\"):</p>\n<blockquote>\n<p id=\"so_45880561_45880561_0\">A temporary expression bound to a reference member in a mem-initializer is ill-formed. [ Example:</p>\n<p id=\"so_45880561_45880561_1\">struct A {</p>\n<p id=\"so_45880561_45880561_2\">A() : v(42) { } // error</p>\n<p id=\"so_45880561_45880561_3\">const int&amp; v;</p>\n<p id=\"so_45880561_45880561_4\">};</p>\n<p id=\"so_45880561_45880561_5\">\u2014end example ]</p>\n</blockquote>\n", "Tags": "<c++><class><oop><reference><lifetime>", "OwnerUserId": "3766405", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_45880561_45880827_0": {"section_id": 7194, "quality": 0.9423076923076923, "length": 49}}, "n3337": {"so_45880561_45880827_0": {"section_id": 6938, "quality": 0.9423076923076923, "length": 49}}, "n4659": {"so_45880561_45880827_0": {"section_id": 8703, "quality": 0.9423076923076923, "length": 49}, "so_45880561_45880561_0": {"section_id": 453, "quality": 0.875, "length": 7}}}});