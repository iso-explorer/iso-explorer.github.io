post_cb({"33523640": {"Id": "33523640", "PostTypeId": "2", "Body": "<p>It only works if <code>arr</code> has not been decayed into a pointer, that is, it is an array type, <em>not</em> a pointer type.</p>\n<p><code>sizeof(arr)</code> is the total size occupied by the array.</p>\n<p><code>sizeof(arr[0])</code> is the size of the first element in the array. (Note that zero length arrays are not permitted in C++ so this element always exists if the array itself exists).</p>\n<p>Since all the elements will be of the same size, the number of elements is <code>sizeof(arr) / sizeof(arr[0])</code>.</p>\n", "LastEditorUserId": "2380830", "LastActivityDate": "2015-11-04T14:14:55.920", "Score": "3", "CreationDate": "2015-11-04T13:53:39.440", "ParentId": "33523585", "CommentCount": "0", "LastEditDate": "2015-11-04T14:14:55.920", "OwnerUserId": "2380830"}, "33523585": {"ViewCount": "7211", "Body": "<p>When looking for a size of an array in a for loop I've seen people write</p>\n<pre><code>for(int i = 0; i &lt; sizeof(arr) / sizeof(arr[0]); i++){}\n</code></pre>\n<p>How is <code>sizeof(arr) / sizeof(arr[0])</code> the length of the array? How does it technically work?</p>\n", "Title": "How do sizeof(arr) / sizeof(arr[0]) work?", "CreationDate": "2015-11-04T13:50:24.057", "LastActivityDate": "2017-10-23T16:26:38.387", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2015-11-04T13:59:17.073", "LastEditorUserId": "1364007", "Id": "33523585", "Score": "9", "OwnerUserId": "4392781", "Tags": "<c++><sizeof>", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_33523585_33523811_0": {"length": 17, "quality": 0.8947368421052632, "section_id": 6076}}, "n3337": {"so_33523585_33523811_0": {"length": 17, "quality": 0.8947368421052632, "section_id": 5844}}, "n4659": {"so_33523585_33523811_0": {"length": 17, "quality": 0.8947368421052632, "section_id": 7572}}}, "33523811": {"Id": "33523811", "PostTypeId": "2", "Body": "<p>As it is described in the C++ Standard (5.3.3 Sizeof)</p>\n<blockquote>\n<p id=\"so_33523585_33523811_0\">1 The sizeof operator yields the number of bytes in the object\n  representation of its operand. The operand is either an expression,\n  which is an unevaluated operand (Clause 5), or a parenthesized\n  type-id.</p>\n</blockquote>\n<p>In this expression</p>\n<pre><code>sizeof(arr) / sizeof(arr[0])\n</code></pre>\n<p>there are used two subexpressions with the sizeof operator.</p>\n<p>This subexpression</p>\n<pre><code>sizeof(arr)\n</code></pre>\n<p>yields the number of bytes occupied by array <code>arr</code> (I suppose that <code>arr</code> is an array).</p>\n<p>For example if you declared an array like</p>\n<pre><code>int arr[10];\n</code></pre>\n<p>then the compiler has to reserve memory that to hold 10 elements of type int. If for example <code>sizeof( int )</code> is equal to 4 then the compiler will reserve 10 * 4 = 40 bytes of memory.</p>\n<p>Subexpression</p>\n<pre><code>sizeof(arr[0])\n</code></pre>\n<p>gives the number of bytes occupied by one element in the array. You could use any index as for example</p>\n<pre><code>sizeof(arr[1000])\n</code></pre>\n<p>because the expression is unevaluated. It is only important the size in bytes of the object (an element of the array) used inside the operator.</p>\n<p>Thus if you know the total bytes that were reserved for an array</p>\n<pre><code>sizeof(arr)\n</code></pre>\n<p>and know how many bytes each element of the array occupies (all elements of an array have the same size) then you can calculate the number of elements in the array by using the formula</p>\n<pre><code>sizeof(arr) / sizeof(arr[0])\n</code></pre>\n<p>Here is a simple relation. If you have an array of N elements of type T</p>\n<pre><code>T arr[N];\n</code></pre>\n<p>and you know the size of the memory occupied by the array then you can calculate the size of its element by using formula</p>\n<pre><code>sizeof( arr ) / N == size of an element of the array. \n</code></pre>\n<p>And vice verse</p>\n<p>If you know the size of the memory occupied by the array and the size of its element you can calculate the number of elements in the array</p>\n<pre><code>sizeof( arr ) / sizeof( a[0] ) == N - number of elements in the array\n</code></pre>\n<p>The last expression you can rewrite also the following way</p>\n<pre><code>sizeof( arr ) / sizeof( T ) == N - number of elements in the array\n</code></pre>\n<p>because the elements of the array have type T and each element of the array occupies exactly the number of bytes that are required to allocate an object of type T.</p>\n<p>Take into acccount that usually beginners make such an error. They pass an array as an argument to a function. For example let's assume that you have a function</p>\n<pre><code>void f( int a[] )\n{\n   //...\n}\n</code></pre>\n<p>And you pass to the function your array</p>\n<pre><code>int arr[10];\n\nf( a );\n</code></pre>\n<p>then the function uses the pointer to the first element of the array. In fact the function has declaration</p>\n<pre><code>void f( int *a )\n{\n   //...\n}\n</code></pre>\n<p>So if you write for example within the function</p>\n<pre><code>void f( int *a )\n{\n   size_t n = sizeof( a ) / sizeof( a[0] );\n   //...\n}\n</code></pre>\n<p>then as <code>a</code> within the function is a pointer (it is not an array) then you will get something like</p>\n<pre><code>void f( int *a )\n{\n   size_t n = sizeof( int * ) / sizeof( int );\n   //...\n}\n</code></pre>\n<p>Usually the size of a pointer equal to either 8 or 4 bytes depending of the used environment. And you won't get the number of elements. You will get some weird value.</p>\n", "LastEditorUserId": "2877241", "LastActivityDate": "2015-11-04T14:19:50.200", "Score": "3", "CreationDate": "2015-11-04T14:01:35.600", "ParentId": "33523585", "CommentCount": "0", "LastEditDate": "2015-11-04T14:19:50.200", "OwnerUserId": "2877241"}, "33523644": {"Id": "33523644", "PostTypeId": "2", "Body": "<p>When dealing with an array (<code>some_type name[some_size]</code>) <code>sizeof(name)</code> is how many bytes the array occupies.  Dividing the total size of the array by the size of one element (<code>sizeof(name[0])</code>) gives you how many elements are in the array.</p>\n", "LastActivityDate": "2015-11-04T13:54:01.437", "Score": "1", "CreationDate": "2015-11-04T13:54:01.437", "ParentId": "33523585", "CommentCount": "0", "OwnerUserId": "4342498"}, "33523623": {"Id": "33523623", "PostTypeId": "2", "Body": "<p>If you have an <code>array</code> then <code>sizeof(array)</code> returns the number of bytes the array occupies. Since each element can take more than 1 byte of space, you have to divide the result with the size of one element (<code>sizeof(array[0])</code>). This gives you number of elements in the array.</p>\n<p>Example:</p>\n<pre><code>std::uint32_t array[10];\n\nauto sizeOfInt = sizeof(std::uint32_t); // 4\nauto numOfBytes = sizeof(array); // 10*sizeOfInt = 40\nauto sizeOfElement = sizeof(array[0]); // sizeOfInt = 4\nauto numOfElements = sizeof(array) / sizeof(array[0]); // numOfBytes / sizeOfElement = 40 / 4 = 10\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/a4537c23520c15e7\" rel=\"noreferrer\"><strong>LIVE EXAMPLE</strong></a></p>\n<p>Note that if you pass an array to a function, the above won't work since the array decays to a pointer and <code>sizeof(array)</code> returns the size of the pointer.</p>\n<pre><code>std::size_t function(std::uint32_t a[]) // same for void function(std::uint32_t a[10])\n{\n    return sizeof(a); // sizeof(std::uint32_t*)!\n}\n\nstd::uint32_t array[10];\nauto sizeOfArray = function(array); // array decays to a pointer inside function()\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/0d523b6b3e413dbe\" rel=\"noreferrer\"><strong>LIVE EXAMPLE #2</strong></a></p>\n", "LastEditorUserId": "597607", "LastActivityDate": "2015-11-04T14:46:43.933", "Score": "16", "CreationDate": "2015-11-04T13:52:32.607", "ParentId": "33523585", "CommentCount": "0", "LastEditDate": "2015-11-04T14:46:43.933", "OwnerUserId": "1771055"}});