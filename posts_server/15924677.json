post_cb({"15925410": {"ParentId": "15924677", "CommentCount": "0", "Body": "<p>Because a pointer to character is not an <code>array</code> and a <code>low-level const</code>. You could do </p>\n<pre><code>char cp[] = {'o', 'v', 'e', 'r', 'f', 'l', 'o', 'w', '\\0'};\n\nchar *pcp = cp;\n\n*++pcp = 'p';\n</code></pre>\n<p>However, <code>\"overflow\"</code> is a constant sequence of characters that is not modifiable, Hence you can only perform pointer arithmetic and dereference the pointer for a value.</p>\n<pre><code>char *cp = \"overflow\";\n\nstd::cout &lt;&lt; *++cp std::endl;\n</code></pre>\n", "OwnerUserId": "2172135", "PostTypeId": "2", "Id": "15925410", "Score": "0", "CreationDate": "2013-04-10T12:09:13.983", "LastActivityDate": "2013-04-10T12:09:13.983"}, "15924726": {"ParentId": "15924677", "PostTypeId": "2", "CommentCount": "8", "Body": "<p>String literals are lvalues of type <code>char const[]</code>, where the <code>const</code> is the important part. Trying to modify an object whose type is <code>const</code> is <strong>Undefined Behavior</strong>.</p>\n<p>Per Paragraph 2.14.5/8 of the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_15924677_15924726_0\">Ordinary string literals and UTF-8 string literals are also referred to as narrow string literals. <strong>A narrow\n  string literal has type \u201carray of <em>n</em> <code>const char</code>\u201d</strong>, where <em>n</em> is the size of the string as defined below, and has\n  static storage duration (3.7).</p>\n</blockquote>\n<p>In the second case (supposing your meant <code>char cps[] = \"overflow\";</code>, with square brackets), you are initializing a non-<code>const</code> <em>copy</em> of the string literal. Modifying that copy is OK.</p>\n<p>Also notice, that the conversion from a string literal to non<code>-const</code> <code>char *</code> is deprecated in C++03 and <strong>illegal</strong> in C++11. This, on the other hand, is legal:</p>\n<pre><code>char const* cp = \"overflow\";\n//   ^^^^^\n</code></pre>\n", "OwnerUserId": "1932150", "LastEditorUserId": "1932150", "LastEditDate": "2013-04-10T11:45:27.173", "Id": "15924726", "Score": "9", "CreationDate": "2013-04-10T11:35:46.410", "LastActivityDate": "2013-04-10T11:45:27.173"}, "15924677": {"CommentCount": "2", "ViewCount": "101", "PostTypeId": "1", "LastEditorUserId": "2257618", "CreationDate": "2013-04-10T11:33:10.697", "LastActivityDate": "2013-04-10T12:09:13.983", "Title": "accessing character pointer", "AcceptedAnswerId": "15924726", "LastEditDate": "2013-04-10T11:46:09.533", "Id": "15924677", "Score": "2", "Body": "<p>In C++, why compilers do not allows to modify the following character pointer as following</p>\n<pre><code>#include &lt;iostream&gt;\n\nint main()\n{\nchar* cp = \"overflow\";\ncp[1]='p';\nreturn 0;\n}\n</code></pre>\n<p>Output : crashes at runtime.</p>\n<p>but character array allows,</p>\n<pre><code>#include &lt;iostream&gt;\n\nint main()\n{\nchar cps[] = \"overflow\";\ncp[1]='p'; // this compiles fine and output is operflow\nreturn 0;\n}\n</code></pre>\n<p>just want to know what is happening at runtime and why it is crashing. Thank you.</p>\n", "Tags": "<c++>", "OwnerUserId": "2257618", "AnswerCount": "4"}, "15924749": {"ParentId": "15924677", "CommentCount": "0", "Body": "<p>When you set <code>char* cp = \"overflow\";</code> you are creating a read-only block of memory containing <code>\"overflow\"</code> (followed by a NULL terminating byte), so you cannot write there. Trying to change <code>c[x]</code> requires writing there.</p>\n<p>As to your second block of code -- something is missing so that part of the question is unclear.</p>\n", "OwnerUserId": "749284", "PostTypeId": "2", "Id": "15924749", "Score": "0", "CreationDate": "2013-04-10T11:36:32.053", "LastActivityDate": "2013-04-10T11:36:32.053"}, "15924731": {"ParentId": "15924677", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>This: <code>char* str=\"\";</code>, is a string literal and may be stored in read only section of memory hence may crash. Use <code>const char* const str=\"string\";</code> (both the pointer and data are constant OR atleast the data should be constant: <code>const char* str=\"string\";</code> or <code>char const* str=\"string\";</code>)</p>\n<p>If you try to change the the contents of a string literal it is undefined behavior and segmentation fault resulting in crash can happen.</p>\n", "OwnerUserId": "1063250", "LastEditorUserId": "1063250", "LastEditDate": "2013-04-10T12:02:56.970", "Id": "15924731", "Score": "2", "CreationDate": "2013-04-10T11:35:55.087", "LastActivityDate": "2013-04-10T12:02:56.970"}, "bq_ids": {"n4140": {"so_15924677_15924726_0": {"section_id": 5356, "quality": 1.0, "length": 26}}, "n3337": {"so_15924677_15924726_0": {"section_id": 5153, "quality": 1.0, "length": 26}}, "n4659": {"so_15924677_15924726_0": {"section_id": 6781, "quality": 1.0, "length": 26}}}});