post_cb({"9679247": {"ParentId": "9679116", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>The choice of <code>int</code> was probably a bad idea, it makes a difference for pointers though:</p>\n<pre><code>class A\n{\npublic:\n    int Counter;\n};\n\nA a;\n\n\ntemplate &lt;A* a&gt;\nstruct Coin\n{\n    static void DoStuff()\n    {\n        ++a-&gt;Counter; // won't compile if using const A* !!\n    }\n};\n\nCoin&lt;&amp;a&gt;::DoStuff();\ncout &lt;&lt; a.Counter &lt;&lt; endl;\n</code></pre>\n", "OwnerUserId": "628361", "LastEditorUserId": "628361", "LastEditDate": "2012-03-13T06:26:31.990", "Id": "9679247", "Score": "2", "CreationDate": "2012-03-13T06:20:39.997", "LastActivityDate": "2012-03-13T06:26:31.990"}, "9679237": {"ParentId": "9679116", "CommentCount": "7", "Body": "<p>No.</p>\n<p><code>\u00a714.1 [temp.param] p5</code></p>\n<blockquote>\n<p id=\"so_9679116_9679237_0\">[...] The top-level <em>cv-qualifiers</em> on the <em>template-parameter</em> are ignored when determining its type.</p>\n</blockquote>\n", "OwnerUserId": "500104", "PostTypeId": "2", "Id": "9679237", "Score": "22", "CreationDate": "2012-03-13T06:19:40.670", "LastActivityDate": "2012-03-13T06:19:40.670"}, "9679116": {"CommentCount": "0", "ViewCount": "1974", "CreationDate": "2012-03-13T06:05:32.423", "LastActivityDate": "2012-03-13T06:26:31.990", "Title": "Is there any difference between \"T\" and \"const T\" in template parameter?", "AcceptedAnswerId": "9679237", "PostTypeId": "1", "Id": "9679116", "Score": "22", "Body": "<p>Is there any difference between following 2 syntax:</p>\n<pre><code>template&lt;int N&gt; struct A;         // (1)\n</code></pre>\n<p>and</p>\n<pre><code>template&lt;const int N&gt; struct A;   // (2)\n</code></pre>\n<p>Any general guideline for when to use each syntax ?</p>\n", "Tags": "<c++><templates><syntax><const>", "OwnerUserId": "514235", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_9679116_9679237_0": {"section_id": 58, "quality": 0.8888888888888888, "length": 8}}, "n3337": {"so_9679116_9679237_0": {"section_id": 53, "quality": 0.8888888888888888, "length": 8}}, "n4659": {"so_9679116_9679237_0": {"section_id": 60, "quality": 0.8888888888888888, "length": 8}}}, "9679228": {"ParentId": "9679116", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>I found this doing a quick search of the standard:</p>\n<pre><code>template&lt;const short cs&gt; class B { };\ntemplate&lt;short s&gt; void g(B&lt;s&gt;);\nvoid k2() {\n    B&lt;1&gt; b;\n    g(b); // OK: cv-quali\ufb01ers are ignored on template parameter types\n}\n</code></pre>\n<p>The comment says they are ignored.</p>\n<p>I'll recommend not using <code>const</code> in template parameters as it's unnecessary. Note that it's not 'implied' either - they're constant expressions which is different from <code>const</code>. </p>\n", "OwnerUserId": "964135", "LastEditorUserId": "500104", "LastEditDate": "2012-03-13T06:25:40.453", "Id": "9679228", "Score": "5", "CreationDate": "2012-03-13T06:18:34.907", "LastActivityDate": "2012-03-13T06:25:40.453"}});