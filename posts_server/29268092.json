post_cb({"29268092": {"CommentCount": "2", "ViewCount": "79", "CreationDate": "2015-03-25T22:59:27.437", "LastActivityDate": "2015-03-25T23:12:47.037", "Title": "Why can't an infinite loop be eliminated?", "PostTypeId": "1", "Id": "29268092", "Score": "1", "Body": "<p>The \"as-if\" rule is covered by these rules:</p>\n<blockquote>\n<p id=\"so_29268092_29268092_0\">The least requirements on a conforming implementation are:</p>\n<ul>\n<li><p id=\"so_29268092_29268092_1\">Access to volatile objects are evaluated strictly according to the rules of the abstract machine.</p></li>\n<li><p id=\"so_29268092_29268092_2\">At program termination, all data written into files shall be identical to one of the possible results that execution of the program\n  according to the abstract semantics would have produced.</p></li>\n<li><p id=\"so_29268092_29268092_3\">The input and output dynamics of interactive devices shall take place in such a fashion that prompting output is actually delivered\n  before a program waits for input. What constitutes an interactive\n  device is implementation-defined.</p></li>\n</ul>\n<p id=\"so_29268092_29268092_4\">These collectively are referred to as the observable behavior of the program. </p>\n<p id=\"so_29268092_29268092_5\">... Accessing an object designated by a volatile glvalue (3.10),\n  modifying an object, calling a library I/O function, or calling a\n  function that does any of those operations are all side effects, which\n  are changes in the state of the execution environment. ...</p>\n</blockquote>\n<p>But let us take a program like the following:</p>\n<pre><code>while (1) { }\n// or\nfor (;;) { }\n</code></pre>\n<p>The fact is there are no objects or calls to functions and therefore no side effects and therefore no \"changes in state of the execution environment\". What's preventing the compiler from compiling this code to</p>\n<pre><code>xorl    %eax, %eax\nretq\n</code></pre>\n<p>Is it all that non-deterministic? An infinite loop is essentially \"Here's a label, jump to it over and over\" and will continue until the computer is shut off. The code does nothing interesting, no calculations, no I/O output, etc. </p>\n<p>In kernel code, an infinite loop becomes interesting. But in userspace code, an infinite loop is generally a sign of a badly written program. So what's the flaw in my logic?</p>\n", "Tags": "<c++><halting-problem><as-if>", "OwnerUserId": "4714342", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_29268092_29268092_2": {"section_id": 5804, "quality": 1.0, "length": 17}, "so_29268092_29268092_0": {"section_id": 5804, "quality": 0.8, "length": 4}, "so_29268092_29268092_1": {"section_id": 5804, "quality": 1.0, "length": 9}, "so_29268092_29268092_3": {"section_id": 5804, "quality": 0.9090909090909091, "length": 20}, "so_29268092_29268092_5": {"section_id": 5808, "quality": 0.9130434782608695, "length": 21}, "so_29268092_29268268_0": {"section_id": 5838, "quality": 0.8888888888888888, "length": 8}}, "n3337": {"so_29268092_29268092_2": {"section_id": 5577, "quality": 1.0, "length": 17}, "so_29268092_29268092_0": {"section_id": 5577, "quality": 0.8, "length": 4}, "so_29268092_29268092_1": {"section_id": 5577, "quality": 1.0, "length": 9}, "so_29268092_29268268_0": {"section_id": 5608, "quality": 0.8888888888888888, "length": 8}, "so_29268092_29268092_5": {"section_id": 5581, "quality": 0.9130434782608695, "length": 21}, "so_29268092_29268092_3": {"section_id": 5577, "quality": 0.9090909090909091, "length": 20}}, "n4659": {"so_29268092_29268092_2": {"section_id": 7262, "quality": 1.0, "length": 17}, "so_29268092_29268092_0": {"section_id": 7262, "quality": 0.8, "length": 4}, "so_29268092_29268092_1": {"section_id": 7262, "quality": 0.7777777777777778, "length": 7}, "so_29268092_29268268_0": {"section_id": 7300, "quality": 0.8888888888888888, "length": 8}, "so_29268092_29268092_5": {"section_id": 7269, "quality": 0.8695652173913043, "length": 20}, "so_29268092_29268092_3": {"section_id": 7262, "quality": 0.9090909090909091, "length": 20}}}, "29268268": {"ParentId": "29268092", "CommentCount": "1", "Body": "<p>It can, because of [intro.multithread]/p27 (quoting N4140; this is p24 in N3337):</p>\n<blockquote>\n<p id=\"so_29268092_29268268_0\">The implementation may assume that any thread will eventually do one\n  of the following:</p>\n<ul>\n<li>terminate,</li>\n<li>make a call to a library I/O function,</li>\n<li>access or modify a volatile object, or</li>\n<li>perform a synchronization operation or an atomic operation.</li>\n</ul>\n</blockquote>\n<p>Empty infinite loops are UB in C++11 and later.</p>\n", "OwnerUserId": "2756719", "PostTypeId": "2", "Id": "29268268", "Score": "3", "CreationDate": "2015-03-25T23:12:47.037", "LastActivityDate": "2015-03-25T23:12:47.037"}});