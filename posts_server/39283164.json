post_cb({"bq_ids": {"n4140": {"so_39283164_39283179_1": {"length": 26, "quality": 0.9285714285714286, "section_id": 3261}}, "n3337": {"so_39283164_39283179_1": {"length": 26, "quality": 0.9285714285714286, "section_id": 3133}}, "n4659": {"so_39283164_39283179_1": {"length": 26, "quality": 0.9285714285714286, "section_id": 4019}}}, "39283164": {"ViewCount": "43", "Body": "<p>The output of this code is <code>15</code> and I really don't know why. I think that it uses <code>x=5</code> in the <code>foo</code> function but I don't know why. Can anyone help me ?</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\n\nstruct A\n{\n    virtual int foo(int x = 5)\n    {\n        return x*2;\n    }\n};\n\nstruct B : public A\n{\n    int foo(int x = 10)\n    {\n        return x*3;\n    }\n};\n\n\n\nint main(int argc, char** argv)\n{\n  A* a = new B;\n  cout &lt;&lt; a-&gt;foo();\n  return 0;\n}\n</code></pre>\n", "Title": "Virtual function with default argument, weird output", "CreationDate": "2016-09-02T01:43:25.673", "LastActivityDate": "2016-09-02T02:14:09.823", "CommentCount": "1", "LastEditDate": "2016-09-02T02:07:08.447", "PostTypeId": "1", "LastEditorUserId": "3309790", "Id": "39283164", "Score": "3", "OwnerUserId": "6654117", "Tags": "<c++><language-lawyer><virtual-functions><default-arguments>", "AnswerCount": "2"}, "39283179": {"Id": "39283179", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_39283164_39283179_0\">I think that it uses <code>x=5</code> in the <code>foo</code> function but I don't know why.</p>\n</blockquote>\n<p>Yes, the default argument from the base class <code>A</code>'s declaration (i.e. <code>5</code>) is used here, because you're calling <code>foo()</code> on an object with static type <code>A*</code>. The <a href=\"http://en.cppreference.com/w/cpp/language/default_arguments\" rel=\"nofollow\">default arguments</a> are decided based on the static type, other than the dynamic type.</p>\n<p>The standard has a clear explanation about this, <a href=\"http://eel.is/c++draft/dcl.fct.default#10\" rel=\"nofollow\">$8.3.6/10 Default arguments\n[dcl.fct.default]</a>:</p>\n<p>(emphasis mine)</p>\n<blockquote>\n<p id=\"so_39283164_39283179_1\">A virtual function call (<a href=\"http://eel.is/c++draft/class.virtual\" rel=\"nofollow\">[class.virtual]</a>) uses the default arguments\n  in the declaration of the virtual function determined by the <strong>static\n  type of the pointer or reference denoting the object</strong>. An overriding\n  function in a derived class does not acquire default arguments from\n  the function it overrides. [ Example:</p>\n<pre><code>struct A {\n  virtual void f(int a = 7);\n};\nstruct B : public A {\n  void f(int a);\n};\nvoid m() {\n  B* pb = new B;\n  A* pa = pb;\n  pa-&gt;f();          // OK, calls pa-&gt;B::f(7)\n  pb-&gt;f();          // error: wrong number of arguments for B::f()\n}\n</code></pre>\n<p id=\"so_39283164_39283179_2\">\u2014 end example ]</p>\n</blockquote>\n", "LastEditorUserId": "3309790", "LastActivityDate": "2016-09-02T02:14:09.823", "Score": "6", "CreationDate": "2016-09-02T01:45:53.103", "ParentId": "39283164", "CommentCount": "0", "OwnerUserId": "3309790", "LastEditDate": "2016-09-02T02:14:09.823"}, "39283193": {"Id": "39283193", "PostTypeId": "2", "Body": "<p>There are two parts to this invocation:</p>\n<ul>\n<li><strong>Deciding what value to pass to <code>x</code></strong> - this is the default parameter of <code>A::foo</code>, i.e. 5, because that is the <em>static</em> type of <code>a</code>, i.e. the type known at compile time. If you think about it, this is the only choice the compiler has, because it must not make assumptions about the type assigned to <code>a</code>.</li>\n<li><strong>Deciding which class receives the call</strong> - this is <code>B::foo</code>, because the dynamic type of the object pointed to by <code>a</code> is <code>struct B</code>.</li>\n</ul>\n<p>Hence you get 3*5 as your output.</p>\n", "LastActivityDate": "2016-09-02T01:47:57.483", "CommentCount": "0", "CreationDate": "2016-09-02T01:47:57.483", "ParentId": "39283164", "Score": "3", "OwnerUserId": "335858"}});