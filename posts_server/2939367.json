post_cb({"2939459": {"PostTypeId": "2", "Body": "<p>Every object in C++ has two nested time-periods associated with it: <em>storage duration</em> and <em>lifetime</em>. <em>Storage duration</em> is the period for which the raw memory occupied by the object is allocated. <em>Lifetime</em> is the period between construction and destruction of an actual object in that memory. (For objects of POD-types construction-destruction either doesn't matter or not applicable, so their lifetime matches their storage duration).</p>\n<p>When someone says \"allocated\" they usually refer to <em>storage duration</em>. The language doesn't actually specify exactly when the object's storage duration begins. It is sufficient to require that shall begin at some point before the object's <em>lifetime</em> begins. </p>\n<p>For this reason, in general case a static object defined inside a function might never begin its lifetime and, theoretically, it's storage duration does not have to begin either. So, in theory, in might not even get \"allocated\".</p>\n<p>In practice though, all objects with static storage duration (\"globals\", local statics, etc.) are normally treated equally: they are assigned a specific amount of storage early, at the program's startup.</p>\n<hr>\n<p>As an additional note, if a local object with static storage duration requires a non-trivial initialization, this initialization is carried out when the control passes over the definition for the very first time. So in this example</p>\n<pre><code>void foo() {\n  static int *p = new int[100];\n}\n</code></pre>\n<p>the dynamic array will never be allocated if the function is never called. And it will be allocated only once if the function is called. This doesn't look like what you are asking about, but I mention this just in case.</p>\n</hr>", "LastActivityDate": "2010-05-30T17:52:31.493", "LastEditorUserId": "187690", "Id": "2939459", "CommentCount": "1", "CreationDate": "2010-05-30T16:32:27.513", "ParentId": "2939367", "Score": "4", "OwnerUserId": "187690", "LastEditDate": "2010-05-30T17:52:31.493"}, "2939440": {"PostTypeId": "2", "Body": "<p>Depends. If you mean, never called, as in, the function is literally never invoked, then your compiler will probably not allocate it, or even put in the function code. If, however, you made it dependent on, say, user input, and that user input just happened to never come up, then it will probably be pre-allocated. However, you're treading in a minefield here, and it's best just to assume that it is always created by the time control enters the function(s) that refer to it.</p>\n", "LastActivityDate": "2010-05-30T16:28:30.137", "Id": "2939440", "CommentCount": "0", "CreationDate": "2010-05-30T16:28:30.137", "ParentId": "2939367", "Score": "0", "OwnerUserId": "298661"}, "2939407": {"Id": "2939407", "PostTypeId": "2", "Body": "<p>The C++ Standard, section 6.7 says:</p>\n<blockquote>\n<p id=\"so_2939367_2939407_0\">The zero-initialization (8.5) of all\n  local objects with static storage\n  duration (3.7.1) is performed before\n  any other initialization takes place.\n  A local object of POD type (3.9) with\n  static storage duration initialized\n  with constant-expressions is\n  initialized before its block is first\n  entered. An implementation is\n  permitted to per- form early\n  initialization of other local objects\n  with static storage duration under the\n  same conditions that an implementation\n  is permitted to statically initialize\n  an object with static storage duration\n  in namespace scope (3.6.2). Otherwise\n  such an object is initialized the\n  first time control passes through its\n  declaration; such an object is\n  considered initialized upon the\n  completion of its initialization.</p>\n</blockquote>\n<p>Which indicates that local static objects are normally initialised the first time the control flow encounters them. However, they may well be allocated before this - the standard is somewhat reticent on what static storage actually is, except with reference to static object lifetimes.</p>\n", "OwnerDisplayName": "anon", "LastEditorUserId": "80074", "LastActivityDate": "2010-05-30T16:26:02.280", "CommentCount": "0", "CreationDate": "2010-05-30T16:17:17.460", "ParentId": "2939367", "Score": "8", "LastEditDate": "2010-05-30T16:26:02.280"}, "2939545": {"PostTypeId": "2", "Body": "<p>Static variables defined on classes (members) or functions are not allocated dynamically on stack during function call, like non static ones. They are allocated in another area of generated code reserved for global and static data. So, if you call the function or not, instantiate classes that contain static members or not, a space to their data will be reserved on program data area anyway.</p>\n", "LastActivityDate": "2010-05-30T17:07:31.397", "Id": "2939545", "CommentCount": "0", "CreationDate": "2010-05-30T17:07:31.397", "ParentId": "2939367", "Score": "0", "OwnerUserId": "353378"}, "bq_ids": {"n4140": {"so_2939367_2939407_0": {"length": 55, "quality": 0.7432432432432432, "section_id": 3919}}, "n3337": {"so_2939367_2939407_0": {"length": 55, "quality": 0.7432432432432432, "section_id": 3779}}}, "2939432": {"PostTypeId": "2", "Body": "<p>If the function is never called, it is likely that your linker will <em>deadstrip</em> both the function and the static variable, preventing it from entering <code>.rodata</code>, <code>.data</code>, or <code>.bss</code> segments (or your executable file format's equivalents).</p>\n<p>However, there are various reasons why a linker might not deadstrip (flags telling it not to, an inability to determine what depends on the symbol, etc).</p>\n<p>It's worth checking your linker map file (sometimes just a text file!), or using <code>objdump</code>, <code>nm</code>, or <code>dumpbin</code> utilities on the final executable to see if the symbol or related symbols (such as static initializer code) survived.</p>\n", "LastActivityDate": "2010-05-30T16:25:06.400", "Id": "2939432", "CommentCount": "4", "CreationDate": "2010-05-30T16:25:06.400", "ParentId": "2939367", "Score": "16", "OwnerUserId": "80074"}, "2939412": {"PostTypeId": "2", "Body": "<p>Yes, actual allocation is compiler dependent, although I think that every compiler just reserves the space in the .static segment of the executable (or the equivalent in its executable file format).<br>\nThe initialization, however takes place only the firs time that the execution flow encounters the static object, and that is required by the standard.<br>\nBeware that initialization of <i>global</i> static objects works in a different way, though.\nYou can get very good answers to almost every question at the <a href=\"http://www.parashift.com/c++-faq-lite/index.html\" rel=\"nofollow noreferrer\">C++ FAQ lite</a> site.\nI am also fond of Scott Meyers's \"Effective C++\".</br></br></p>\n", "LastActivityDate": "2010-05-30T16:20:19.590", "Id": "2939412", "CommentCount": "0", "CreationDate": "2010-05-30T16:20:19.590", "ParentId": "2939367", "Score": "0", "OwnerUserId": "332698"}, "2939367": {"ViewCount": "903", "Body": "<p>I've been reading up on C++ on the Internet, and here's one thing that I haven't been quite able to find an answer to.</p>\n<p>I know that static variables used within functions are akin to globals, and that subsequent invocations of that function will have the static variable retain its value between calls.</p>\n<p>However, if the function is never called, does the static variable get allocated?</p>\n<p>Thanks</p>\n", "AcceptedAnswerId": "2939432", "Title": "Static variables within functions in C++ - allocated even if function doesn't run?", "CreationDate": "2010-05-30T16:06:16.957", "Id": "2939367", "CommentCount": "3", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2010-05-30T19:56:04.950", "LastEditorUserId": "140719", "LastActivityDate": "2010-05-30T19:56:04.950", "Score": "17", "OwnerUserId": "354059", "Tags": "<c++><static><memory-management>", "AnswerCount": "7"}, "2939388": {"PostTypeId": "2", "Body": "<p>Im sure that thats going to be up to the implementation. What MSVC does is - static objects are allocated in the automatic data segment of the EXE or DLL. However, the constructor is only executed the first time the function containing the static is executed.</p>\n", "LastActivityDate": "2010-05-30T16:12:40.170", "Id": "2939388", "CommentCount": "0", "CreationDate": "2010-05-30T16:12:40.170", "ParentId": "2939367", "Score": "1", "OwnerUserId": "27491"}});