post_cb({"15114758": {"Id": "15114758", "PostTypeId": "2", "Body": "<p>From C++ Standard, Chapter 11: Member Access Control:</p>\n<blockquote>\n<p id=\"so_15114505_15114758_0\"><strong>private</strong>; that is, its name can be used only by members and friends of\n  the class in which it is declared.</p>\n</blockquote>\n<p>That means a <strong>private member</strong> could be accessed by <strong>any members of that class</strong></p>\n<p>Here <code>ListData::ListData(const ListData&amp; newlist)</code> is a copy constructor of ListData, which is a member function thus could access class ListData's private member.</p>\n", "LastActivityDate": "2013-02-27T14:37:58.530", "Score": "1", "CreationDate": "2013-02-27T14:37:58.530", "ParentId": "15114505", "CommentCount": "0", "OwnerUserId": "70198"}, "15114534": {"Id": "15114534", "PostTypeId": "2", "Body": "<p>Members with <code>private</code> visibility are members that can only be accessed <em>within member functions</em> of the same <strong>class</strong> they are members of, without restrictions on <em>objects</em>. </p>\n<p>If function <code>f()</code> is a member function of class <code>C</code>, it can access the <code>private</code> members of <strong>any</strong> instance of <code>C</code>, not just those pointed by the implicit <code>this</code> pointer (which, of course, makes this valid for <code>static</code> functions as well, which do not receive a <code>this</code> pointer at all).</p>\n", "LastEditorUserId": "1932150", "LastActivityDate": "2013-02-27T14:33:09.053", "Score": "1", "CreationDate": "2013-02-27T14:28:08.227", "ParentId": "15114505", "CommentCount": "0", "LastEditDate": "2013-02-27T14:33:09.053", "OwnerUserId": "1932150"}, "15114542": {"Id": "15114542", "PostTypeId": "2", "Body": "<p>An interesting thing about private members is that two objects of the same type can access each others private members freely. You can think of it as a class is always friends with itself. Since this is the constructor for <code>ListData</code> and <code>newlist</code> is also a <code>ListData</code>, you can access its privates just fine.</p>\n<p><a href=\"http://ideone.com/dq2Z8w\" rel=\"nofollow\">Here's an example of this</a>:</p>\n<pre><code>#include &lt;iostream&gt;\n\nclass foo\n{\n  public:\n    foo() { }\n    foo(std::string secret) : secret(secret) { }\n    void steal_secret(const foo&amp; other) { secret = other.secret; }\n    std::string get_secret() { return secret; }\n  private:\n    std::string secret;\n};\n\nint main() {\n    foo f1(\"I'm actually a bar\");\n    foo f2;\n    f2.steal_secret(f1);\n    std::cout &lt;&lt; f2.get_secret() &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>\n<p><code>f2</code> happily and easily steals the <code>secret</code> from <code>f1</code>, despite it being private.</p>\n<p>The reason for this being allowed is simply because <code>private</code> doesn't mean private to an object - it means private to a class. This eases the implementation of functions such as copy constructors that require doing some work to the internals of two objects of the same class.</p>\n<p>The rule comes from the definition of <code>private</code> (\u00a711/1):</p>\n<blockquote>\n<p id=\"so_15114505_15114542_0\">A member of a class can be</p>\n<ul>\n<li><code>private</code>; that is, its name can be used only by members and friends of the class in which it is declared.</li>\n<li>[...]</li>\n</ul>\n</blockquote>\n<p>Note that it is defined in terms of classes and not objects.</p>\n", "LastEditorUserId": "150634", "LastActivityDate": "2013-02-27T14:50:12.583", "Score": "7", "CreationDate": "2013-02-27T14:28:33.297", "ParentId": "15114505", "CommentCount": "5", "LastEditDate": "2013-02-27T14:50:12.583", "OwnerUserId": "150634"}, "15114505": {"ViewCount": "1653", "Body": "<p>I have this project in our signals class which uses C++. I was tinkering with our instructors code when I saw this:</p>\n<pre><code>ListData::ListData(const ListData&amp; newlist) \n    : Data(), nbNodes(newlist.nbNodes) {}\n</code></pre>\n<p>This is a \"copy constructor\" as he says, and should be roughly equivalent to the following:</p>\n<pre><code>ListData::ListData(const ListData&amp; newlist){\n  Data = \"\";\n  //copy nbNodes of newList to current instance\n  nbNodes = newlist.nbNodes;\n}\n</code></pre>\n<p>But what bothers me is that <code>nbNodes</code> is a private member. <strong>How could this constructor access the <code>nbNodes</code> of the passed <code>newList</code> if it's private?</strong></p>\n", "AcceptedAnswerId": "15114542", "Title": "C++ private members accessible?", "CreationDate": "2013-02-27T14:26:43.440", "LastActivityDate": "2013-02-27T14:50:12.583", "CommentCount": "1", "FavoriteCount": "0", "PostTypeId": "1", "Tags": "<c++>", "Id": "15114505", "Score": "4", "OwnerUserId": "575527", "ClosedDate": "2013-02-28T15:50:17.660", "AnswerCount": "6"}, "bq_ids": {"n4140": {"so_15114505_15114758_0": {"length": 8, "quality": 1.0, "section_id": 6664}}, "n3337": {"so_15114505_15114758_0": {"length": 8, "quality": 1.0, "section_id": 6419}}, "n4659": {"so_15114505_15114758_0": {"length": 8, "quality": 1.0, "section_id": 8139}}}, "15114533": {"Id": "15114533", "PostTypeId": "2", "Body": "<p><code>nbNodes</code> is private to the <code>ListData</code> <strong>class</strong>, not to a particular instance of that class. So, inside the code of the class, you can see the private data of other instances of that class.</p>\n<p>If it weren't so, every class would have to export \"getters\" for every single data member in order to perform copy construction and copy assignment.</p>\n", "LastActivityDate": "2013-02-27T14:28:06.050", "Score": "3", "CreationDate": "2013-02-27T14:28:06.050", "ParentId": "15114505", "CommentCount": "0", "OwnerUserId": "661519"}, "15114561": {"Id": "15114561", "PostTypeId": "2", "Body": "<p>A copy constructor is just like any other method: as you can access private members of a class from a method of that class, you can do the same with your copy constructor (else, how could you copy the state of an instance to the class to another one?).</p>\n", "LastActivityDate": "2013-02-27T14:29:23.710", "Score": "1", "CreationDate": "2013-02-27T14:29:23.710", "ParentId": "15114505", "CommentCount": "0", "OwnerUserId": "1629821"}, "15114531": {"Id": "15114531", "PostTypeId": "2", "Body": "<p>The <code>private</code> keyword has class semantics not object semantics. So private members of an object of a class are accessible to other objects of the same class.</p>\n", "LastActivityDate": "2013-02-27T14:27:56.987", "Score": "5", "CreationDate": "2013-02-27T14:27:56.987", "ParentId": "15114505", "CommentCount": "0", "OwnerUserId": "922712"}});