post_cb({"bq_ids": {"n4140": {"so_19897484_19897554_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 1575}, "so_19897484_19897554_1": {"length": 8, "quality": 1.0, "section_id": 1532}}, "n3337": {"so_19897484_19897554_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 1641}, "so_19897484_19897554_1": {"length": 8, "quality": 1.0, "section_id": 1526}}, "n4659": {"so_19897484_19897554_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 1728}, "so_19897484_19897554_1": {"length": 6, "quality": 0.75, "section_id": 1682}}}, "19897529": {"Id": "19897529", "PostTypeId": "2", "Body": "<p>It's undefined behavior to assign a C++ string from a NULL \"C string\", because a null pointer is not actually pointing to a C string at all.  I could find no reference saying that std::string should check for NULL--you need to do it yourself.</p>\n", "LastActivityDate": "2013-11-11T01:32:16.873", "CommentCount": "1", "CreationDate": "2013-11-11T01:32:16.873", "ParentId": "19897484", "Score": "1", "OwnerUserId": "4323"}, "19897484": {"ViewCount": "104", "Body": "<p>Does anyone know what the behaviour of std::string.assign(NULL) is? Assigning NULL (using operator) or constructing from NULL is undefined. Does the same apply for this function?</p>\n", "AcceptedAnswerId": "19897554", "Title": "Behaviour of std::string.assign(NULL)?", "CreationDate": "2013-11-11T01:26:30.160", "Id": "19897484", "CommentCount": "0", "LastEditDate": "2013-11-11T01:46:17.093", "PostTypeId": "1", "LastEditorUserId": "1311670", "LastActivityDate": "2013-11-11T01:46:17.093", "Score": "1", "OwnerUserId": "2977520", "Tags": "<c++><std>", "AnswerCount": "2"}, "19897554": {"Id": "19897554", "PostTypeId": "2", "Body": "<p>The standard says this in 21.4.6.3 paragraph 12:</p>\n<blockquote>\n<p id=\"so_19897484_19897554_0\">Requires: s points to an array of at least traits::length(s) + 1 elements of charT.</p>\n</blockquote>\n<p>In the character traits requirements Table 62 is says:</p>\n<blockquote>\n<p id=\"so_19897484_19897554_1\">X::length(p) std::size_t yields: the smallest i such that X::eq(p[i],charT()) is true. linear</p>\n</blockquote>\n<p>That implies that <code>traits::length()</code> will dereference <code>s</code> and, thus, <code>s</code> can't be a pointer to null. You get undefined behavior.</p>\n", "LastActivityDate": "2013-11-11T01:34:58.397", "CommentCount": "2", "CreationDate": "2013-11-11T01:34:58.397", "ParentId": "19897484", "Score": "4", "OwnerUserId": "1120273"}});