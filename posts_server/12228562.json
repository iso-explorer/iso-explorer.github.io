post_cb({"bq_ids": {"n4140": {"so_12228562_12228616_2": {"length": 9, "quality": 0.6, "section_id": 6042}}, "n3337": {"so_12228562_12228616_2": {"length": 9, "quality": 0.6, "section_id": 5810}}, "n4659": {"so_12228562_12228616_2": {"length": 9, "quality": 0.6, "section_id": 7541}}}, "12228607": {"Id": "12228607", "PostTypeId": "2", "Body": "<p>Because regular enum underlying type is <code>int</code>, there is nothing to <a href=\"http://en.cppreference.com/w/cpp/language/reinterpret_cast\" rel=\"nofollow\"><em>reinterpret</em></a>. Static cast is proper conversion for this case. </p>\n", "LastActivityDate": "2012-09-01T14:33:53.377", "CommentCount": "10", "CreationDate": "2012-09-01T14:33:53.377", "ParentId": "12228562", "Score": "3", "OwnerUserId": "1599260"}, "12228562": {"ViewCount": "2347", "Body": "<p>Why i can't use reinterpret_cast operator for such a cast?</p>\n<pre><code>enum Foo { bar, baz };\n\nvoid foo(Foo)\n{\n}\n\nint main()\n{\n   // foo(0); // error: invalid conversion from 'int' to 'Foo'\n   // foo(reinterpret_cast&lt;Foo&gt;(0)); // error: invalid cast from type 'int' to type 'Foo'\n   foo(static_cast&lt;Foo&gt;(0)); \n   foo((Foo)0);\n}\n</code></pre>\n", "AcceptedAnswerId": "12228616", "Title": "reinterpret_cast error for enum", "CreationDate": "2012-09-01T14:26:29.147", "Id": "12228562", "CommentCount": "4", "LastEditDate": "2012-09-01T19:33:17.150", "PostTypeId": "1", "LastEditorUserId": "1561378", "LastActivityDate": "2012-09-01T19:33:17.150", "Score": "9", "OwnerUserId": "1608835", "Tags": "<c++><enums><static-cast>", "AnswerCount": "2"}, "12228616": {"Id": "12228616", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_12228562_12228616_0\">I think that <code>reinterpret_cast</code> can be use for all types of casts, because it's force any type casts to another type with all side-effects of this conversion. </p>\n</blockquote>\n<p>That is a common misconception. Conversions which can be performed with <code>reinterpret_cast</code> are listed explicitly in 5.2.10 of the standard. <code>int</code>-to-<code>enum</code> and <code>enum</code>-to-<code>int</code> conversions are not in the list:</p>\n<ul>\n<li>Pointer to integral type, so long as the integer is large enough to hold it</li>\n<li><code>nullptr_t</code> to integer</li>\n<li>integral type or <code>enum</code> to pointer</li>\n<li>function pointer to another function pointer of different type</li>\n<li>object pointer to another object pointer of different type</li>\n<li><code>nullptr_t</code> to other pointer type</li>\n<li>pointer-to-member of <code>T1</code> to a different pointer-to-member of <code>T2</code> in cases where both <code>T1</code> and <code>T2</code> are objects or functions</li>\n</ul>\n<p><code>reinterpret_cast</code> is typically used to tell the compiler: Hey, I know you think this region of memory is a <code>T</code>, but I'd like you to interpret it as a <code>U</code> (where <code>T</code> and <code>U</code> are unrelated types).</p>\n<p>It is also worth noting that <code>reinterpret_cast</code> can have effects on the bits:</p>\n<blockquote>\n<p id=\"so_12228562_12228616_1\"><strong>5.2.10.3</strong></p>\n<p id=\"so_12228562_12228616_2\">[ Note: The mapping performed by reinterpret_cast might, or might not, produce a representation dif-\n  ferent from the original value. \u2014 end note ]</p>\n</blockquote>\n<p>The C-style cast always works, because it included <code>static_cast</code> in its attempts.</p>\n", "LastEditorUserId": "254306", "LastActivityDate": "2012-09-01T15:43:56.623", "Score": "18", "CreationDate": "2012-09-01T14:34:21.037", "ParentId": "12228562", "CommentCount": "0", "OwnerUserId": "254306", "LastEditDate": "2012-09-01T15:43:56.623"}});