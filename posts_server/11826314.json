post_cb({"bq_ids": {"n4140": {"so_11826314_11826361_0": {"length": 21, "quality": 0.9130434782608695, "section_id": 3875}}, "n3337": {"so_11826314_11826361_0": {"length": 21, "quality": 0.9130434782608695, "section_id": 3735}}, "n4659": {"so_11826314_11826361_0": {"length": 13, "quality": 0.5652173913043478, "section_id": 4695}}}, "11826419": {"Id": "11826419", "PostTypeId": "2", "Body": "<p><code>isgreater</code> et al. were incorporated into C++11 from C99.  They are defined to not raise the invalid floating-point exception when <code>x</code> and/or <code>y</code> are signalling <code>NaN</code> values.</p>\n<p>The rationale given is:</p>\n<blockquote>\n<p id=\"so_11826314_11826419_0\">This macro is a quiet (non-floating-point exception raising) version of a relational operator. It facilitates writing efficient code that accounts for NaNs without suffering the invalid floating-point exception.</p>\n</blockquote>\n<p>The numeric value of the macro on <code>NaN</code> is the same as always; <code>NaN</code> values compare false to  all other values including <code>NaN</code> values under all relational operators and the new macros.</p>\n", "LastActivityDate": "2012-08-06T10:22:01.037", "CommentCount": "0", "CreationDate": "2012-08-06T10:22:01.037", "ParentId": "11826314", "Score": "13", "OwnerUserId": "567292"}, "11826361": {"Id": "11826361", "PostTypeId": "2", "Body": "<p>Unlike the relational operators, these macros do really only return a boolean value and do never raise any floating point exception.</p>\n<p>In short: You only have to deal with <code>true</code>/<code>false</code> and nothing else.</p>\n<hr>\n<p><em>references</em>:</p>\n<p><strong>The Open Group</strong> descriptions (<em>not the C or C++ standard, but highly relevant in the Unix/Linux world and almost always similar to the standards</em>):</p>\n<ul>\n<li><a href=\"http://pubs.opengroup.org/onlinepubs/009695399/functions/islessgreater.html\" rel=\"noreferrer\">http://pubs.opengroup.org/onlinepubs/009695399/functions/islessgreater.html</a></li>\n<li><a href=\"http://pubs.opengroup.org/onlinepubs/009695399/functions/isgreater.html\" rel=\"noreferrer\">http://pubs.opengroup.org/onlinepubs/009695399/functions/isgreater.html</a></li>\n<li><a href=\"http://pubs.opengroup.org/onlinepubs/009695399/functions/isgreaterequal.html\" rel=\"noreferrer\">http://pubs.opengroup.org/onlinepubs/009695399/functions/isgreaterequal.html</a></li>\n<li><a href=\"http://pubs.opengroup.org/onlinepubs/009695399/functions/isless.html\" rel=\"noreferrer\">http://pubs.opengroup.org/onlinepubs/009695399/functions/isless.html</a></li>\n<li><a href=\"http://pubs.opengroup.org/onlinepubs/009695399/functions/islessequal.html\" rel=\"noreferrer\">http://pubs.opengroup.org/onlinepubs/009695399/functions/islessequal.html</a></li>\n<li><a href=\"http://pubs.opengroup.org/onlinepubs/009695399/functions/islessgreater.html\" rel=\"noreferrer\">http://pubs.opengroup.org/onlinepubs/009695399/functions/islessgreater.html</a></li>\n<li><a href=\"http://pubs.opengroup.org/onlinepubs/009695399/functions/isunordered.html\" rel=\"noreferrer\">http://pubs.opengroup.org/onlinepubs/009695399/functions/isunordered.html</a></li>\n</ul>\n<p><strong>C++</strong> standard:</p>\n<blockquote>\n<h3>C Library [c.math]:</h3>\n<p id=\"so_11826314_11826361_0\">The classification/comparison functions behave the same as the C macros with the corresponding names defined in 7.12.3, Classification macros, and 7.12.14, Comparison macros in the C Standard. Each function is overloaded for the three floating-point types, as follows [...]</p>\n</blockquote>\n<p><strong>C</strong> standard:</p>\n<blockquote>\n<h3>7.12.14 Comparison macros</h3>\n<p id=\"so_11826314_11826361_1\">[...] For any ordered pair of numeric values exactly one of the\n  relationships \u2014 less, greater, and equal \u2014 is true. Relational <strong>operators</strong> may raise the\n  \u2018\u2018invalid\u2019\u2019 floating-point exception when argument values are NaNs. <strong>For a NaN and a\n  numeric value, or for two NaNs, just the unordered relationship is true</strong>.\n  The following subclauses provide macros that are quiet (non floating-point exception raising) versions of the relational operators, and other comparison macros that facilitate <strong>writing efficient code that accounts for NaNs without suffering the \u2018\u2018invalid\u2019\u2019 floating-point exception</strong>. In\n  the synopses in this subclause, real-floating indicates that the argument shall be an\n  expression of real floating type.</p>\n</blockquote>\n</hr>", "LastEditorUserId": "76722", "LastActivityDate": "2012-08-06T10:24:05.077", "Score": "39", "CreationDate": "2012-08-06T10:18:27.107", "ParentId": "11826314", "CommentCount": "4", "OwnerUserId": "76722", "LastEditDate": "2012-08-06T10:24:05.077"}, "11826314": {"ViewCount": "2347", "Body": "<p>In the latest C++ standard, I noticed the following macros :</p>\n<pre><code>bool isgreater(float x, float y);\nbool isgreaterequal(float x, float y);\nbool isless(float x, float y);\nbool islessequal(float x, float y);\nbool islessgreater(float x, float y);\nbool isunordered(float x, float y);\n</code></pre>\n<p>These macros are from C (7.12.14 and 7.12.14).</p>\n<p>So, why would someone use these macros, instead of operators? Is there anything special that these macros are doing (like checking for <code>inf</code>), or are they the same as their corresponding operator?</p>\n<p>C++ example :</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;cmath&gt;\n\nint main()\n{\n  float x=0.2;\n  float y=0.5;\n  std::cout &lt;&lt; x &lt;&lt; \" &lt; \" &lt;&lt; y &lt;&lt; \" : \" &lt;&lt; std::boolalpha &lt;&lt; std::islessequal( x, y ) &lt;&lt; std::endl;\n  std::cout &lt;&lt; x &lt;&lt; \" &lt; \" &lt;&lt; y &lt;&lt; \" : \" &lt;&lt; std::boolalpha &lt;&lt; ( x &lt;= y ) &lt;&lt; std::endl;\n}\n</code></pre>\n", "AcceptedAnswerId": "11826361", "Title": "When to use C float comparison functions?", "CreationDate": "2012-08-06T10:15:16.420", "Id": "11826314", "CommentCount": "0", "FavoriteCount": "10", "PostTypeId": "1", "LastEditDate": "2012-08-06T12:48:04.247", "LastEditorUserId": "1288", "LastActivityDate": "2012-08-08T10:30:19.787", "Score": "34", "OwnerUserId": "476681", "Tags": "<c++><c><c++11>", "AnswerCount": "2"}});