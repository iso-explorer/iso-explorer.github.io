post_cb({"bq_ids": {"n4140": {"so_3383090_3383099_0": {"length": 18, "quality": 1.0, "section_id": 3914}, "so_3383090_3383099_1": {"length": 7, "quality": 0.7777777777777778, "section_id": 7218}}, "n3337": {"so_3383090_3383099_0": {"length": 18, "quality": 1.0, "section_id": 3774}, "so_3383090_3383099_1": {"length": 7, "quality": 0.7777777777777778, "section_id": 6962}}, "n4659": {"so_3383090_3383099_1": {"length": 7, "quality": 0.7777777777777778, "section_id": 4799}}}, "3383101": {"Id": "3383101", "PostTypeId": "2", "Body": "<p>Yes, it is valid code.  This is necessary when you have template functions so that you can use uniform code.  For example,</p>\n<pre><code>template&lt;typename T, typename P&gt;\nT f(int x, P y)\n{\n  return g(x, y);\n}\n</code></pre>\n<p>Now, <code>g</code> might be overloaded to return void when the second argument is some particular type.  If \"returning void\" were invalid, the call to <code>f</code> would then break.</p>\n", "LastEditorUserId": "2583", "LastActivityDate": "2010-08-01T17:58:52.730", "Score": "49", "CreationDate": "2010-08-01T17:53:10.387", "ParentId": "3383090", "CommentCount": "4", "OwnerUserId": "2583", "LastEditDate": "2010-08-01T17:58:52.730"}, "3383090": {"ViewCount": "7227", "Body": "<p>I found out that the following code gets accepted by Visual C++ 2008 and GCC 4.3 compilers:</p>\n<pre><code>void foo()\n{\n\n}\n\nvoid bar()\n{\n  return foo();\n}\n</code></pre>\n<p>I am a bit surprised that it compiles. Is this a language feature or is it a bug in the compilers? What do the C/C++ standards say about this?</p>\n", "AcceptedAnswerId": "3383099", "Title": "Is returning void valid code?", "CreationDate": "2010-08-01T17:49:40.347", "Id": "3383090", "CommentCount": "0", "FavoriteCount": "6", "PostTypeId": "1", "LastEditDate": "2014-04-07T14:53:07.003", "LastEditorUserId": "239916", "LastActivityDate": "2015-10-11T15:06:18.017", "Score": "49", "OwnerUserId": "391850", "Tags": "<c++><c><compiler-construction>", "AnswerCount": "4"}, "27495102": {"Id": "27495102", "PostTypeId": "2", "Body": "<p>This is valid and can be quite useful for example to create cleaner code in situations when you want to do some error handling before returning:</p>\n<pre><code>void ErrRet(int code, char* msg)\n{\n   // code logging/handling error\n}\nvoid f()\n{\n   if (...) return ErrRet(5, \"Error Message !\");\n   // code continue\n}\n</code></pre>\n", "LastActivityDate": "2014-12-15T23:33:15.783", "CommentCount": "0", "CreationDate": "2014-12-15T23:33:15.783", "ParentId": "3383090", "Score": "5", "OwnerUserId": "460084"}, "3383099": {"Id": "3383099", "PostTypeId": "2", "Body": "<p>It's a language feature of C++</p>\n<p>C++ (ISO 14882:2003) 6.6.3/3</p>\n<blockquote>\n<p id=\"so_3383090_3383099_0\">A return statement with an expression of type \u201ccv void\u201d can be used only in functions with a return type of cv void; the expression is evaluated just before the function returns to its caller.</p>\n</blockquote>\n<p>C (ISO 9899:1999) 6.8.6.4/1</p>\n<blockquote>\n<p id=\"so_3383090_3383099_1\">A return statement with an expression shall not appear in a function whose return type\n  is void.</p>\n</blockquote>\n", "LastActivityDate": "2010-08-01T17:52:25.287", "CommentCount": "1", "CreationDate": "2010-08-01T17:52:25.287", "ParentId": "3383090", "Score": "66", "OwnerUserId": "273767"}, "33066508": {"Id": "33066508", "PostTypeId": "2", "Body": "<p>Valid indeed. I use it often for input validation macros:</p>\n<pre><code>#define ASSERT_AND_RETURN_IF_NULL(p,r) if (!p) { assert(p &amp;&amp; \"#p must not be null\"); return r; }\n\nbool func1(void* p) {\n  ASSERT_AND_RETURN_IF_NULL(p, false);\n  ...\n}\n\nvoid func2(void* p) {\n  ASSERT_AND_RETURN_IF_NULL(p, void());\n  ...\n}\n</code></pre>\n", "LastActivityDate": "2015-10-11T15:06:18.017", "CommentCount": "0", "CreationDate": "2015-10-11T15:06:18.017", "ParentId": "3383090", "Score": "1", "OwnerUserId": "308421"}});