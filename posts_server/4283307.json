post_cb({"4283307": {"ViewCount": "2391", "Body": "<p>If I declare a class with default constructor and define a instance of this class with initializer list as below, will the default constructor be called for this definition? And why been called or not been called?</p>\n<pre><code>class Sample\n{\n// this should be any aggregate type in c++\n};\n\nint main()\n{\n  Sample s = {0};\n  return 0;\n}\n</code></pre>\n", "AcceptedAnswerId": "4283362", "Title": "Does initializer list suppress the call to constructor?", "CreationDate": "2010-11-26T07:35:37.460", "Id": "4283307", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2010-11-26T07:54:52.660", "Score": "3", "OwnerUserId": "396383", "Tags": "<c++>", "AnswerCount": "5"}, "4283354": {"Id": "4283354", "PostTypeId": "2", "Body": "<p>When you provide an brace enclosed initializer all the members of the class are copy-initialized from the corresponding expression of the brace enclosed initializer.</p>\n<p>Such initialization is only valid for aggregates which cannot have user-declared constructors so the suppression of the compiler generated constructor is almost academic.</p>\n", "LastActivityDate": "2010-11-26T07:42:30.507", "CommentCount": "0", "CreationDate": "2010-11-26T07:42:30.507", "ParentId": "4283307", "Score": "3", "OwnerUserId": "19563"}, "4283348": {"Id": "4283348", "PostTypeId": "2", "Body": "<p>In C++ you may only initialize POD (plain old data) with ={0} (at least pre C++0x). So the default constructor will not be called because this won't compile.</p>\n", "LastActivityDate": "2010-11-26T07:42:04.877", "CommentCount": "2", "CreationDate": "2010-11-26T07:42:04.877", "ParentId": "4283307", "Score": "1", "OwnerUserId": "105643"}, "4283334": {"Id": "4283334", "PostTypeId": "2", "Body": "<p>The corresponding constructor is called:\n<a href=\"http://en.wikipedia.org/wiki/C%2B%2B0x#Initializer_lists\" rel=\"nofollow\">http://en.wikipedia.org/wiki/C%2B%2B0x#Initializer_lists</a></p>\n", "LastActivityDate": "2010-11-26T07:40:29.383", "CommentCount": "0", "CreationDate": "2010-11-26T07:40:29.383", "ParentId": "4283307", "Score": "1", "OwnerUserId": "211659"}, "4283357": {"Id": "4283357", "PostTypeId": "2", "Body": "<ul>\n<li>In C++03, only <a href=\"https://stackoverflow.com/questions/4178175/what-are-aggregates-and-pods-and-how-why-are-they-special\">aggregate classes</a> may be initialized with curly braces, and an aggregate class may not have a user defined constructor</li>\n<li>In C++0x, this syntax is supported for non aggregate types through <a href=\"http://en.wikipedia.org/wiki/C%2B%2B0x#Initializer_lists\" rel=\"nofollow noreferrer\">initializer lists</a> and calls the appropriate constructor (taking a <code>std::initializer_list</code>)</li>\n</ul>\n", "LastEditorUserId": "-1", "LastActivityDate": "2010-11-26T07:43:26.557", "Score": "5", "CreationDate": "2010-11-26T07:43:26.557", "ParentId": "4283307", "CommentCount": "0", "OwnerUserId": "451980", "LastEditDate": "2017-05-23T12:11:49.523"}, "bq_ids": {"n4140": {"so_4283307_4283362_3": {"length": 14, "quality": 0.7777777777777778, "section_id": 3310}, "so_4283307_4283362_0": {"length": 19, "quality": 0.6785714285714286, "section_id": 3296}, "so_4283307_4283362_1": {"length": 9, "quality": 0.6428571428571429, "section_id": 3296}}, "n3337": {"so_4283307_4283362_3": {"length": 14, "quality": 0.7777777777777778, "section_id": 3180}, "so_4283307_4283362_0": {"length": 19, "quality": 0.6785714285714286, "section_id": 3166}, "so_4283307_4283362_1": {"length": 9, "quality": 0.6428571428571429, "section_id": 3166}}, "n4659": {"so_4283307_4283362_3": {"length": 13, "quality": 0.7222222222222222, "section_id": 4076}, "so_4283307_4283362_0": {"length": 19, "quality": 0.6785714285714286, "section_id": 4058}, "so_4283307_4283362_1": {"length": 8, "quality": 0.5714285714285714, "section_id": 4058}}}, "4283362": {"Id": "4283362", "PostTypeId": "2", "Body": "<p>The Standard says ($8.5/14)</p>\n<blockquote>\n<p id=\"so_4283307_4283362_0\">The semantics of initializers are as follows.  The destination type is the type of the object or reference being initialized and the source type is the type of the initializer expression.  The source type is not defined when the initializer is brace-enclosed or when it is a parenthesized list of expressions.</p>\n<p id=\"so_4283307_4283362_1\">If the destination type is a (possibly cv-qualified) class type:\n  \u2014  If the class is an aggregate (8.5.1), and the initializer is a brace-enclosed list, see 8.5.1.\n  .</p>\n</blockquote>\n<p>.</p>\n<blockquote>\n<p id=\"so_4283307_4283362_2\">8.5.1/13</p>\n<p id=\"so_4283307_4283362_3\">[Note: An aggregate array or an aggregate class may contain members of a class type with a user-declared constructor (12.1).  Initialization of these aggregate objects is described in 12.6.1.  ]</p>\n</blockquote>\n<p>Also 12.6.1/2 says</p>\n<blockquote>\n<p id=\"so_4283307_4283362_4\">When an aggregate (whether class or array) contains members of class type and is initialized by a brace-enclosed  initializer-list  (8.5.1),  <strong>each  such  member  is  copy-initialized  (see  8.5)  by  the  corresponding assignment-expression</strong>.  If there are fewer initializers in the initializer-list than members of the aggregate,\n  each  member  not  explicitly  initialized  shall  be  value-initialized  (8.5).</p>\n</blockquote>\n", "LastEditorUserId": "165520", "LastActivityDate": "2010-11-26T07:54:52.660", "Score": "1", "CreationDate": "2010-11-26T07:43:55.933", "ParentId": "4283307", "CommentCount": "5", "OwnerUserId": "165520", "LastEditDate": "2010-11-26T07:54:52.660"}});