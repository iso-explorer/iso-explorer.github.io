post_cb({"8516635": {"ParentId": "8516565", "PostTypeId": "2", "CommentCount": "2", "Body": "<pre><code>if(rval == 1 ? DoThis1() : (rval == 2 ? DoThis2() : (rval == 3 ? DoThis3() : /*do nothing*/)))\n{\n    // The if-body.\n}\n</code></pre>\n<p>But I think using the if-statment or the switch statment is more better</p>\n", "OwnerUserId": "688912", "LastEditorUserId": "688912", "LastEditDate": "2011-12-19T03:00:03.427", "Id": "8516635", "Score": "0", "CreationDate": "2011-12-15T07:40:36.710", "LastActivityDate": "2011-12-19T03:00:03.427"}, "8516740": {"ParentId": "8516565", "CommentCount": "0", "Body": "<p>There are many cases indeed when you need to use an expression (e.g., in a macro expanded where an expression is expected). </p>\n<p>They're all valid, and when used wisely will improve the readability. </p>\n<p>It is a shame that this distinction between statements and expressions exist (it is very unnatural and was not present in Algol, a grandfather of all the modern imperative structural languages), but there are non-standard extensions to leverage such an injustice: <a href=\"http://gcc.gnu.org/onlinedocs/gcc/Statement-Exprs.html#Statement-Exprs\" rel=\"nofollow\">http://gcc.gnu.org/onlinedocs/gcc/Statement-Exprs.html#Statement-Exprs</a></p>\n<p>So, an answer to your question, using this extension, would be the following:</p>\n<p><code>rval==1?({DO-THIS}):(?rval==2:({...}):...)</code></p>\n<p>But make sure that the last statement of <code>DO-THIS</code> is always an expression yielding a value.</p>\n", "OwnerUserId": "293147", "PostTypeId": "2", "Id": "8516740", "Score": "0", "CreationDate": "2011-12-15T07:49:43.007", "LastActivityDate": "2011-12-15T07:49:43.007"}, "8516599": {"ParentId": "8516565", "PostTypeId": "2", "CommentCount": "15", "Body": "<p>You can't. What you have there looks like a use-case for a <code>switch</code>-statement:</p>\n<pre><code>switch(rval) {\n    case -1: DO THIS 1; break;\n    case  2: DO THIS 2; break;\n    case  3: DO THIS 3; break;\n    default: ERROR;\n}\n</code></pre>\n<p><strong>Edit</strong> I was over-eager here. As <a href=\"https://stackoverflow.com/users/673730/luchian-grigore\">@Luchian Grigore</a> points out in the comments, you can do this (as he demonstrates in <a href=\"https://stackoverflow.com/a/8516597/160206\">his answer</a>). Note that this is also well defined for cases where one or both expressions are of the type <code>void</code>, as specified in \u00a75.16/2 [expr.cond]:</p>\n<blockquote>\n<p id=\"so_8516565_8516599_0\">If either the second or the third operand has type (possibly\n  cv-qualified) void, then the lvalue-to-rvalue (4.1), array-to-pointer\n  (4.2), and function-to-pointer (4.3) standard conversions are\n  performed on the second and third operands, and one of the following\n  shall hold: </p>\n<p id=\"so_8516565_8516599_1\">\u2014 The second or the third operand (but not both) is a\n  throw-expression (15.1); the result is of the type of the other and is\n  an rvalue. </p>\n<p id=\"so_8516565_8516599_2\">\u2014 Both the second and the third operands have type void;\n  the result is of type void and is an rvalue. </p>\n<p id=\"so_8516565_8516599_3\">[Note: this includes the\n  case where both operands are throw-expressions. ]</p>\n</blockquote>\n", "OwnerUserId": "160206", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T10:08:26.053", "Id": "8516599", "Score": "6", "CreationDate": "2011-12-15T07:37:55.273", "LastActivityDate": "2011-12-15T07:59:22.440"}, "8516636": {"ParentId": "8516565", "CommentCount": "5", "Body": "<p>That would look ugly, and defies every coding standard I've seen.  Nevertheless, it would look like this:</p>\n<pre><code>int rval;\nint foo = rval == -1 ? DoThis1() : (rval == 2 ? DoThis2() : DoThis3());\n</code></pre>\n<p>I'm assuming that rval == 3 is the only other possible option.  And if that assumption is wrong, it makes this whole mess that much more a statement of DON'T DO THIS!!!</p>\n", "OwnerUserId": "284758", "PostTypeId": "2", "Id": "8516636", "Score": "0", "CreationDate": "2011-12-15T07:40:39.247", "LastActivityDate": "2011-12-15T07:40:39.247"}, "8516565": {"CommentCount": "4", "ViewCount": "229", "PostTypeId": "1", "LastEditorUserId": "160206", "CreationDate": "2011-12-15T07:35:06.673", "LastActivityDate": "2011-12-19T03:00:03.427", "Title": "How to express three cases with the conditional operator?", "AcceptedAnswerId": "8516599", "LastEditDate": "2011-12-15T08:11:22.170", "Id": "8516565", "Score": "0", "Body": "<p>Is it possible to express the cases using the conditional operator? For Example : </p>\n<pre><code> if(rval==1)\n     DO THIS 1;\n else if(rval==2)\n     DO THIS 2;\n else if (rval ==3)\n     DO THIS 3;\n</code></pre>\n", "Tags": "<c++><c><conditional-operator>", "OwnerUserId": "1053621", "AnswerCount": "9"}, "8516622": {"ParentId": "8516565", "PostTypeId": "2", "CommentCount": "4", "Body": "<pre><code>#include \"stdafx.h\"\n\n\nint _tmain(int argc, _TCHAR* argv[])\n{\n    int rval = 2;\n\n    (rval==-1)? (printf(\"-1\")) :( ((rval==2) ?(printf(\"2\")) : ((rval ==3) ? (printf(\"3\")) : (1)) ));\n\n    return 0;\n}\n</code></pre>\n", "OwnerUserId": "1008217", "LastEditorUserId": "-1", "LastEditDate": "2011-12-18T08:36:35.097", "Id": "8516622", "Score": "0", "CreationDate": "2011-12-15T07:39:41.697", "LastActivityDate": "2011-12-18T08:36:35.097"}, "8516650": {"ParentId": "8516565", "CommentCount": "2", "Body": "<pre><code>switch ( rval ) {\n  case 1 : \n    // Process for rval = 1\n    ...\n    break;\n  case 2 : \n    // Process for rval = 2\n    ...\n    break;\n  case 3 :\n    // Process for rval = 3\n    ... \n  default : \n    throw new InvalidStateException()\n    // Process for all other cases.\n    ...\n}\n</code></pre>\n", "OwnerUserId": "465736", "PostTypeId": "2", "Id": "8516650", "Score": "0", "CreationDate": "2011-12-15T07:41:30.743", "LastActivityDate": "2011-12-15T07:41:30.743"}, "8516597": {"ParentId": "8516565", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>Although this isn't the usual use for the ternary operator, this is how you do it:</p>\n<pre><code>( rval == 1 ) ? (expression1) : \n( rval == 2 ) ? (expression2) : \n( rval == 3 ) ? (expression3) : (default);\n</code></pre>\n<p>However, for the sake of code readability, I suggest you stick to the <code>if</code> statements.</p>\n<p>Or better yet, it seems a <code>switch</code> would be even more appropriate here.</p>\n<p>EDIT:</p>\n<p>This is the code I used for the test:</p>\n<pre><code>void foo() {};\nvoid goo() {}\n\nint main()\n{\n   int x = 0;\n   x == 0  ? foo() : x == 1 ? goo() : foo();\n}\n</code></pre>\n<p>EDIT2:</p>\n<p>For all nay-sayers - see section <code>5.16</code> - the second and third operands are expressions; section <code>5.16.2</code> deals with expressions that have type void.</p>\n", "OwnerUserId": "673730", "LastEditorUserId": "673730", "LastEditDate": "2011-12-15T07:56:22.040", "Id": "8516597", "Score": "5", "CreationDate": "2011-12-15T07:37:47.907", "LastActivityDate": "2011-12-15T07:56:22.040"}, "8516714": {"ParentId": "8516565", "CommentCount": "3", "Body": "<p>Like this:</p>\n<pre><code>    void MySwitch(int rval)\n    {\n             (rval==-1) ? DoThis(-1),0 :\n            ((rval==2) ? DoThis(2),0 :\n            ((rval==3) ? DoThis(3),0 : 0));\n    }\n</code></pre>\n<p>Full Example:</p>\n<pre><code>    #include &lt;stdio.h&gt;\n\n    void DoThis(int j)\n    {\n     printf(\"DoThis(%d)\\n\", j);\n    }\n\n    void MySwitch(int rval)\n    {\n             (rval==-1) ? DoThis(-1),0 :\n            ((rval==2) ? DoThis(2),0 :\n            ((rval==3) ? DoThis(3),0 : 0));\n    }\n\n    int main(void)\n    {\n     printf(\"Calling MySwitch(-1)\\n\");\n     MySwitch(-1);\n     printf(\"Calling MySwitch(2)\\n\");\n     MySwitch(2);\n     printf(\"Calling MySwitch(3)\\n\");\n     MySwitch(3);\n     printf(\"Calling MySwitch(4)\\n\");\n     MySwitch(4);\n    }\n</code></pre>\n<p>Output:</p>\n<pre><code>Calling MySwitch(-1)\nDoThis(-1)\nCalling MySwitch(2)\nDoThis(2)\nCalling MySwitch(3)\nDoThis(3)\nCalling MySwitch(4)\n</code></pre>\n<p>Of course, this is silly. Don't ever do this.</p>\n", "OwnerUserId": "721269", "PostTypeId": "2", "Id": "8516714", "Score": "0", "CreationDate": "2011-12-15T07:47:37.310", "LastActivityDate": "2011-12-15T07:47:37.310"}, "bq_ids": {"n4140": {"so_8516565_8516599_2": {"section_id": 6168, "quality": 0.9090909090909091, "length": 10}, "so_8516565_8516599_3": {"section_id": 6168, "quality": 0.8571428571428571, "length": 6}, "so_8516565_8516599_1": {"section_id": 6168, "quality": 0.75, "length": 9}}, "n3337": {"so_8516565_8516599_2": {"section_id": 5929, "quality": 0.9090909090909091, "length": 10}, "so_8516565_8516599_3": {"section_id": 5929, "quality": 0.8571428571428571, "length": 6}, "so_8516565_8516599_0": {"section_id": 5929, "quality": 0.9, "length": 18}, "so_8516565_8516599_1": {"section_id": 5929, "quality": 0.75, "length": 9}}, "n4659": {"so_8516565_8516599_3": {"section_id": 7665, "quality": 0.8571428571428571, "length": 6}, "so_8516565_8516599_2": {"section_id": 7665, "quality": 0.9090909090909091, "length": 10}, "so_8516565_8516599_0": {"section_id": 7667, "quality": 0.7, "length": 14}, "so_8516565_8516599_1": {"section_id": 7665, "quality": 0.75, "length": 9}}}, "8516610": {"ParentId": "8516565", "PostTypeId": "2", "CommentCount": "4", "Body": "<pre><code>int lval = (rval==-1) ? 1 : ( (rval==2) ? 2 : 3 );\n</code></pre>\n", "OwnerUserId": "791998", "LastEditorUserId": "791998", "LastEditDate": "2011-12-15T09:19:24.217", "Id": "8516610", "Score": "0", "CreationDate": "2011-12-15T07:38:53.947", "LastActivityDate": "2011-12-15T09:19:24.217"}});