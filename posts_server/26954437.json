post_cb({"26954437": {"CommentCount": "1", "AcceptedAnswerId": "26954625", "PostTypeId": "1", "LastEditorUserId": "701092", "CreationDate": "2014-11-16T06:17:03.960", "LastActivityDate": "2015-02-16T17:48:19.550", "AnswerCount": "1", "LastEditDate": "2014-11-16T06:40:48.000", "ViewCount": "158", "FavoriteCount": "1", "Title": "A case when a user-provided explicitly-defaulted function defined as deleted", "Id": "26954437", "Score": "1", "Body": "<p>There is the following quote from <code>N3797::8.4.2/4 [dcl.fct.def.default]</code>:</p>\n<blockquote>\n<p id=\"so_26954437_26954437_0\">A function is user-provided if it is user-declared and not explicitly\n  defaulted or deleted on its first declaration. A user-provided\n  explicitly-defaulted function (i.e., explicitly defaulted after its\n  first declaration) is defined at the point where it is explicitly\n  defaulted; <em>if such a function is implicitly defined as deleted, the</em>\n<em>program is ill-formed.</em></p>\n</blockquote>\n<p>I tried to invent an example reflecting that rule. Since, the Standard says:</p>\n<blockquote>\n<p id=\"so_26954437_26954437_1\">If the class definition does not explicitly declare a copy\n  constructor, one is declared implicitly. If the class definition\n  declares a move constructor or move assignment operator, <em>the</em>\n<em>implicitly declared copy constructor is defined as deleted</em>;</p>\n</blockquote>\n<p>the following code should throw an error about deleted function call:</p>\n<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nstruct A\n{ \n    A(){ }\n    A(const A&amp;&amp;){ cout &lt;&lt; \"A(const&amp;&amp;)\" &lt;&lt; endl; }\n    A(const A&amp;) = default;\n};\n\nA a;\n\nA b = a;\n\nint main() {\n}\n</code></pre>\n<p>But it works fine. Can you provide an actual example reflecting this?</p>\n<p><strong><a href=\"http://coliru.stacked-crooked.com/a/2ae86f3f26d5d842\" rel=\"nofollow\">DEMO</a></strong></p>\n", "Tags": "<c++>", "OwnerDisplayName": "user2953119"}, "26954625": {"ParentId": "26954437", "PostTypeId": "2", "CommentCount": "4", "Body": "\n<p>My other answer was incorrect. In your case, <code>A</code>'s copy-constructor isn't user-provided since it is explicitly-defaulted on its first declaration. A user-provided explicitly-defaulted function would look like this:</p>\n<pre class=\"lang-c++ prettyprint-override\"><code>struct X\n{\n    X();\n};\n\nX::X() = default;\n</code></pre>\n<p>The clause is pertaining to when the constructor is implicitly-deleted at the point where it's defaulted. Take this example:</p>\n<pre class=\"lang-c++ prettyprint-override\"><code>struct X\n{\n    X(X&amp;&amp;); // user-declared move-constructor, deletes X's copy-constructor\n};\n\nstruct Y\n{\n    X x; // data member with deleted copy-constructor deletes Y's\n         // copy-constructor\n    Y(Y const&amp;);\n};\n\n// program is ill-formed. Y's copy-constructor was implicitly deleted\nY::Y(Y const&amp;) = default;\n</code></pre>\n<p>Since <code>X</code> has an implicitly-deleted copy-constructor it follows that <code>Y</code> has an implicitly-deleted copy-constructor by virtue of <code>x</code> being its data member. Explicitly defaulting the constructor after its declaration is ill-formed.</p>\n", "OwnerUserId": "701092", "LastEditorUserId": "701092", "LastEditDate": "2015-02-16T17:48:19.550", "Id": "26954625", "Score": "0", "CreationDate": "2014-11-16T06:51:06.183", "LastActivityDate": "2015-02-16T17:48:19.550"}, "bq_ids": {"n4140": {"so_26954437_26954437_0": {"section_id": 3274, "quality": 0.9655172413793104, "length": 28}, "so_26954437_26954437_1": {"section_id": 456, "quality": 0.9583333333333334, "length": 23}}, "n3337": {"so_26954437_26954437_0": {"section_id": 3145, "quality": 0.9655172413793104, "length": 28}, "so_26954437_26954437_1": {"section_id": 447, "quality": 0.9583333333333334, "length": 23}}, "n4659": {"so_26954437_26954437_0": {"section_id": 4032, "quality": 0.9655172413793104, "length": 28}, "so_26954437_26954437_1": {"section_id": 479, "quality": 0.9583333333333334, "length": 23}}}});