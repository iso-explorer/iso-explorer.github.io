post_cb({"20380274": {"CommentCount": "5", "AcceptedAnswerId": "20382471", "CreationDate": "2013-12-04T16:10:10.010", "LastActivityDate": "2013-12-05T09:40:27.283", "PostTypeId": "1", "ViewCount": "141", "FavoriteCount": "2", "Title": "Why does std::num_put take the ios_base parameter by non-const reference?", "Id": "20380274", "Score": "1", "Body": "<p>I'm experimenting with the iostreams / locale numeric facet and I've hit something quite curious:</p>\n<p>The \"canonical example\" of using the <a href=\"http://en.cppreference.com/w/cpp/locale/num_put\" rel=\"nofollow\">std::num_put facet</a> to directly format a number goes like this:</p>\n<pre><code>std::string f(double value) {\n    using namespace std;\n    stringstream ss;\n    num_put&lt;char&gt; const&amp; npf = use_facet&lt;num_put&lt;char&gt; &gt;(ss.getloc());\n    npf.put(/*out=*/ss, /*format=*/ss, /*fill=*/' ', value);\n    return ss.str();\n}\n</code></pre>\n<p>The <strong>first parameter</strong> to <a href=\"http://en.cppreference.com/w/cpp/locale/num_put/put\" rel=\"nofollow\"><code>put</code></a> is the thing where the output is written to.</p>\n<p>We can also have code like this and it works:</p>\n<pre><code>std::string g(double value) {\n    using namespace std;\n    stringstream ss;\n    typedef char* CharBufOutIt;\n    num_put&lt;char, CharBufOutIt&gt; const&amp; npf = use_facet&lt;num_put&lt;char, CharBufOutIt&gt; &gt;(ss.getloc());\n    char big_enough_buf[100];\n    npf.put(/*out=*/big_enough_buf, /*format=*/ss, /*fill=*/' ', value);\n    return big_enough_buf;\n}\n</code></pre>\n<p>The <strong>second parameter</strong> to <code>put()</code> is a stream object that determines the specific formatting to be applied. The second parameter is <em>not modified</em> at all. (Not in my implementation, and not according to what <a href=\"http://en.cppreference.com/w/cpp/locale/num_put/put\" rel=\"nofollow\">the docs</a> <a href=\"http://stdcxx.apache.org/doc/stdlibref/num-put.html#idx1009\" rel=\"nofollow\">describe</a> this parameter to be for.)</p>\n<p>However, the signature of <code>put</code>looks like this: </p>\n<blockquote>\n<p id=\"so_20380274_20380274_0\">iter_type put( iter_type out, <strong>std::ios_base&amp;</strong> str, char_type fill, long\n  double v ) const;</p>\n</blockquote>\n<p>That is, it is taking the ios_base object by <em>non-const</em> reference, even though it wouild appear it should really take it by <strong>const</strong> reference.</p>\n<p>Am I missing something? Is this just a (historical?) peculiarity in the C++ iostreams spec? Has this ever been discussed by the C++ std committee?</p>\n", "Tags": "<c++><formatting><iostream><facet><const-correctness>", "OwnerUserId": "321013", "AnswerCount": "1"}, "20382471": {"ParentId": "20380274", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2013-12-04T17:55:23.797", "Score": "2", "LastEditorUserId": "498424", "LastEditDate": "2013-12-05T09:40:27.283", "Id": "20382471", "OwnerUserId": "498424", "Body": "<p>From the <a href=\"http://isocpp.org/files/papers/N3797.pdf\" rel=\"nofollow\">Standard</a> (22.4.2.2.2) the implementation of <code>put</code> is at one point as such:</p>\n<blockquote>\n<p id=\"so_20380274_20382471_0\">Stage 3:</p>\n<p id=\"so_20380274_20382471_1\">If <code>str.width()</code> is nonzero and the number of <code>charT\u2019s</code> in the sequence after stage 2 is less than <code>str.width()</code>, then enough fill characters are added to the sequence at the position indicated for padding to bring the length of the sequence to <code>str.width()</code>. <code>str.width(0)</code> is called.`</p>\n</blockquote>\n<p>Also, <code>str.width(0)</code> calls <code>width</code> declared without <code>const</code> (see <a href=\"http://www.cplusplus.com/reference/ios/ios_base/width/\" rel=\"nofollow\">this link</a>):</p>\n<pre><code>streamsize ios_base::width (streamsize wide);\n</code></pre>\n", "LastActivityDate": "2013-12-05T09:40:27.283"}, "bq_ids": {"n4140": {"so_20380274_20380274_0": {"section_id": 6549, "quality": 0.5454545454545454, "length": 6}, "so_20380274_20382471_1": {"section_id": 6549, "quality": 0.96, "length": 24}}, "n3337": {"so_20380274_20380274_0": {"section_id": 6304, "quality": 0.5454545454545454, "length": 6}, "so_20380274_20382471_1": {"section_id": 6304, "quality": 0.96, "length": 24}}, "n4659": {"so_20380274_20380274_0": {"section_id": 8031, "quality": 0.5454545454545454, "length": 6}, "so_20380274_20382471_1": {"section_id": 8031, "quality": 0.96, "length": 24}}}});