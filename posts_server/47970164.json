post_cb({"bq_ids": {"n4140": {"so_47970164_47970250_1": {"length": 19, "quality": 1.0, "section_id": 5562}}, "n3337": {"so_47970164_47970250_1": {"length": 19, "quality": 1.0, "section_id": 5344}}, "n4659": {"so_47970164_47970250_1": {"length": 19, "quality": 1.0, "section_id": 7009}}}, "47970250": {"Id": "47970250", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_47970164_47970250_0\">24.2.1 [iterator.requirements.general]</p>\n<p id=\"so_47970164_47970250_1\">All the categories of iterators require only those functions that are\n  realizable for a given category in constant time (amortized).\n  Therefore, requirement tables for the iterators do not have a complexity\n  column.</p>\n</blockquote>\n<p>The first part of this might be slightly confusing, but all it says is that not all iterator types support all operations (i.e., no random access with forward iterators); but those functions that are defined, they always <a href=\"https://stackoverflow.com/questions/200384/constant-amortized-time\">have amortized constant complexity</a>. The standard does not explicitly specify the complexity of each individual iterator method; it appears to indicate, in this clause, that those iterator methods that are defined must have amortized constant complexity.</p>\n", "LastActivityDate": "2017-12-25T16:15:44.687", "CommentCount": "0", "CreationDate": "2017-12-25T16:15:44.687", "ParentId": "47970164", "Score": "1", "OwnerUserId": "3943312"}, "47970164": {"ViewCount": "40", "Body": "<p>As the title says, I know that cbegin() to an unordered_map has a constant complexity, but is the iteration of the iterator of constant complexity. e.g.: cbegin()++; cbegin() + 10; cbegin() + i; cend()--; \nAre all these o(1) ??? </p>\n", "Title": "unordered_map cbegin() + number //constant complexity?", "CreationDate": "2017-12-25T16:01:40.900", "LastActivityDate": "2017-12-25T16:15:44.687", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "Id": "47970164", "Score": "1", "OwnerUserId": "6744345", "Tags": "<c++><dictionary><iterator><complexity-theory><unordered>", "AnswerCount": "1"}});