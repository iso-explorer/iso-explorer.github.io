post_cb({"28656806": {"ParentId": "28656779", "CommentCount": "0", "Body": "<p>It is a C-style cast to <code>void</code>. What the standard means to say is that <code>r++</code> and <code>++r</code> must be equivalent if their return value is not used, i.e., that they have the same side effect.</p>\n", "OwnerUserId": "4301306", "PostTypeId": "2", "Id": "28656806", "Score": "5", "CreationDate": "2015-02-22T10:28:26.673", "LastActivityDate": "2015-02-22T10:28:26.673"}, "28656823": {"ParentId": "28656779", "CommentCount": "3", "Body": "<p>It basically means that the pre- or post-incrementation of an iterator shall produce the same effect, though returned values might (and will in the general case) differ.</p>\n<p>That's just the way of C++ specs to state the obvious in the most obfuscated possible way :).</p>\n", "OwnerUserId": "2960823", "PostTypeId": "2", "Id": "28656823", "Score": "3", "CreationDate": "2015-02-22T10:31:05.157", "LastActivityDate": "2015-02-22T10:31:05.157"}, "bq_ids": {"n4140": {"so_28656779_28656779_0": {"section_id": 391, "quality": 0.5714285714285714, "length": 4}}, "n3337": {"so_28656779_28656779_0": {"section_id": 382, "quality": 0.5714285714285714, "length": 4}}, "n4659": {"so_28656779_28656779_0": {"section_id": 408, "quality": 0.5714285714285714, "length": 4}}}, "28656779": {"CommentCount": "2", "ViewCount": "87", "CreationDate": "2015-02-22T10:25:51.723", "LastActivityDate": "2015-02-22T10:31:05.157", "Title": "(void)r++ requirement of input iterator", "AcceptedAnswerId": "28656806", "PostTypeId": "1", "Id": "28656779", "Score": "3", "Body": "<p>Under <code>24.2.3 Input iterators</code>, the C++ standard specifies one of the requirements of input iterator as the expression <code>(void)r++</code> being equivalent to <code>(void)++r</code>.</p>\n<p>You can also see this at <a href=\"http://en.cppreference.com/w/cpp/concept/InputIterator\" rel=\"nofollow\">cppreference</a>.</p>\n<p>What is that expression? What is the significance of this requirement? Why is it needed?</p>\n<p>It looks like a C style cast to void of the result of <code>r++</code> or <code>++r</code> but I don't think that's what it really is. That said, to digress a bit, it looks like I can define a <code>void</code> conversion operator inside a class. Both gcc and clang compile it but clang gives the warning:</p>\n<blockquote>\n<p id=\"so_28656779_28656779_0\">warning: conversion function converting 'C' to 'void' will never be\n  used</p>\n</blockquote>\n", "Tags": "<c++><iterator>", "OwnerUserId": "1128289", "AnswerCount": "2"}});