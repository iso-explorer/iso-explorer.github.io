post_cb({"48388510": {"ViewCount": "246", "Body": "<p>Deferencing pointer leads to using the value of the object indirectly. But I've never really understood what does the \"using\" means. I started to think the question until my compiler yield an error for the following code</p>\n<pre><code>int i = 0, *pi = &amp;i;\ndecltype(*pi) c; // error: 'c' declared as reference but not initialized.\n</code></pre>\n<p>I looked at the error for a very long time and searched some questions I can only give out the following arguments. I don't know if they are correct or not.</p>\n<p><strong>Arguments 1:</strong></p>\n<p>1) <code>*p</code> is an expression that is not a variable (or non-variable expression)</p>\n<p>2) dereferencing pointer expression yields a reference, we are in fact using a reference to access the value of the object</p>\n<p><strong>Arguments 2:</strong></p>\n<p>the dereferencing expression only for which <code>decltype</code> returns a reference, it is not a general case</p>\n<p>Please points out any incorrectness or inaccurate descriptions of the above arguments.</p>\n", "AcceptedAnswerId": "48388647", "Title": "Generally, is dereference pointer expression results a reference type?", "CreationDate": "2018-01-22T18:58:19.677", "LastActivityDate": "2018-01-22T19:14:25.427", "CommentCount": "3", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2018-01-22T19:02:44.690", "LastEditorUserId": "3004698", "Id": "48388510", "Score": "9", "OwnerUserId": "3004698", "Tags": "<c++><c++11><pointers><reference><dereference>", "AnswerCount": "3"}, "48388687": {"Id": "48388687", "PostTypeId": "2", "Body": "<p>As a matter of fact, standard says following in 8.5.2.1:</p>\n<blockquote>\n<p id=\"so_48388510_48388687_0\">The unary * operator performs indirection: the expression to which it\n  is applied shall be a pointer to an object type, or a pointer to a\n  function type and the result is an lvalue referring to the object or\n  function to which the expression points. If the type of the expression\n  is \u201cpointer to T\u201d, the type of the result is \u201cT\u201d.</p>\n</blockquote>\n<p>So it is not the reference, but <code>decltype()</code> gives you something which actually has a representation in the C++ types system, and reference is the closest thing to it.</p>\n", "LastActivityDate": "2018-01-22T19:11:06.470", "Score": "3", "CreationDate": "2018-01-22T19:11:06.470", "ParentId": "48388510", "CommentCount": "0", "OwnerUserId": "5245033"}, "48388647": {"Id": "48388647", "PostTypeId": "2", "Body": "<p><a href=\"https://timsong-cpp.github.io/cppwp/expr.unary.op#1\" rel=\"noreferrer\">Dereferencing a pointer yields an lvalue expression of the pointed-to type designating the object or function pointed to.</a> It does not yield a reference.<sup>*</sup> <code>*pi</code> is an lvalue of type <code>int</code>.</p>\n<p><code>decltype</code> (with an exception not relevant here) reports both an expression's <em>type</em> and its <em>value category</em>, <a href=\"https://timsong-cpp.github.io/cppwp/dcl.type.simple#4\" rel=\"noreferrer\">the latter being encoded with reference types</a>. Since <code>*pi</code> is an lvalue, it's encoded as an lvalue reference type, so <code>decltype(*pi)</code> is <code>int &amp;</code>: <code>int</code> for the type, <code>&amp;</code> for the value category.</p>\n<p>Expressions never have reference type because any referenceness is adjusted away <a href=\"https://timsong-cpp.github.io/cppwp/expr.type#1\" rel=\"noreferrer\">\"prior to any further analysis\"</a>.</p>\n<hr>\n<p><sub><sup>*</sup> This isn't a merely technical distinction: per the direction of <a href=\"https://wg21.link/cwg232\" rel=\"noreferrer\">core issue 232</a> and <a href=\"https://wg21.link/cwg453\" rel=\"noreferrer\">core issue 453</a>, there are valid dereference expressions you can write where binding its result to a reference would cause undefined behavior. </sub></p>\n</hr>", "LastEditorUserId": "2756719", "LastActivityDate": "2018-01-22T19:14:25.427", "Score": "12", "CreationDate": "2018-01-22T19:08:08.407", "ParentId": "48388510", "CommentCount": "0", "OwnerUserId": "2756719", "LastEditDate": "2018-01-22T19:14:25.427"}, "bq_ids": {"n4140": {"so_48388510_48388687_0": {"length": 24, "quality": 0.96, "section_id": 6064}}, "n3337": {"so_48388510_48388687_0": {"length": 24, "quality": 0.96, "section_id": 5832}}, "n4659": {"so_48388510_48388687_0": {"length": 23, "quality": 0.92, "section_id": 7560}}}, "48388694": {"Id": "48388694", "PostTypeId": "2", "Body": "<p>To answer your title question: as T.C. answered too, no. Expressions never have reference type. Given an <code>int a; int &amp;b = a;</code>, both the expression <code>a</code> and the expression <code>b</code> have type <code>int</code>, and both expressions are lvalues.</p>\n<blockquote>\n<p id=\"so_48388510_48388694_0\">1) <code>*p</code> is an expression that is not a variable (or non-variable expression)</p>\n</blockquote>\n<p>Correct.</p>\n<blockquote>\n<p id=\"so_48388510_48388694_1\">2) dereferencing pointer expression yields a reference, we are in fact using a reference to access the value of the object</p>\n</blockquote>\n<p>Dereferencing a pointer gives an lvalue, which <code>decltype</code> changes into an lvalue reference.</p>\n<blockquote>\n<p id=\"so_48388510_48388694_2\">the dereferencing expression only for which decltype returns a reference, it is not a general case</p>\n</blockquote>\n<p>I'm not entirely sure what you mean here. If you mean that when <code>decltype</code> doesn't produce a reference, having a declaration <code>decltype(...) c;</code> without an initialiser can be valid, then yes, indeed. If you mean that aside from dereferenced pointers, <code>decltype</code> never produces a reference type, then no. For instance,</p>\n<pre><code>int a;\ndecltype((a)) b; // not okay - decltype((a)) is int &amp; because (a) is not the name of the\n                 // variable, and the expression (a) is an lvalue\ndecltype(a) c;   // okay - decltype(a) is int because a is the name of the variable\ndecltype(+a) d;  // okay - decltype(+a) is int because the +a is a prvalue of type int\n</code></pre>\n", "LastActivityDate": "2018-01-22T19:11:25.360", "Score": "4", "CreationDate": "2018-01-22T19:11:25.360", "ParentId": "48388510", "CommentCount": "0", "OwnerUserId": "743382"}});