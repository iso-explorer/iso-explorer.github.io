post_cb({"26660618": {"CommentCount": "6", "ViewCount": "1149", "ClosedDate": "2014-10-30T18:47:45.340", "CreationDate": "2014-10-30T18:25:50.187", "LastActivityDate": "2014-10-30T18:53:40.257", "Title": "Simple linked list Vs STL::list. which one is best?", "PostTypeId": "1", "Id": "26660618", "Score": "0", "Body": "<p>Simple Linked list:</p>\n<pre><code>struct Node { \nint x;\nNode *next;\n};\n</code></pre>\n<p>What are the major pros/cons of using user defined simple linked list and list container from STL? What about list performance for LL with vast number of data?</p>\n", "Tags": "<c++><stl><linked-list>", "OwnerUserId": "1212903", "AnswerCount": "4"}, "26660710": {"ParentId": "26660618", "PostTypeId": "2", "CommentCount": "2", "CreationDate": "2014-10-30T18:30:18.207", "Score": "5", "LastEditorUserId": "464581", "LastEditDate": "2014-10-30T18:47:09.843", "Id": "26660710", "OwnerUserId": "464581", "Body": "<p>On the surface the question might appear to be a no-brainer, with answer \u201c<code>std::list</code> is safer, more efficient, blah blah blah\u201d.</p>\n<p>But those aspects are irrelevant.</p>\n<p><code>std::list</code> generally has no advantage over other standard library containers. Up till and including C++03 it <em>could</em> provide constant time splicing, depending on the implementation. But that possible advantage was removed in C++11 by requiring its <code>size()</code> to be constant time (you can have one or the other be constant time, but not both).</p>\n<p>So if you want constant time splicing, or other possible advantages of linked lists, you <em>have</em> to use something other than <code>std::list</code>.</p>\n<p>Such as, your DIY home-grown list.</p>\n<hr>\n<p>Constant time size requirement: C++11 \u00a723.2.1/4 table 96:</p>\n<blockquote>\n<p id=\"so_26660618_26660710_0\"><strong>\u201d</strong> <code>a.size()</code> <code>size_type</code> <code>distance(a.begin(), a.end())</code> constant</p>\n</blockquote>\n<p>where the columns are <em>expression</em>, <em>return type</em>, <em>operational semantics</em> and <em>complexity</em>.</p>\n</hr>", "LastActivityDate": "2014-10-30T18:47:09.843"}, "26660764": {"ParentId": "26660618", "PostTypeId": "2", "CommentCount": "4", "CreationDate": "2014-10-30T18:33:02.290", "Score": "7", "LastEditorUserId": "560648", "LastEditDate": "2014-10-30T18:53:40.257", "Id": "26660764", "OwnerUserId": "2877241", "Body": "<p>In most cases it is better to use standard containers because they are tested and well-known among programmers. Take into account that standard C++ library has its own single linked list named like</p>\n<pre><code>std::forward_list\n</code></pre>\n<p>So your question can sound as what is better to use a user-defined single linked list or <code>std::forward_list</code>. I would advice to use <code>std::forward_list</code></p>\n<p>Nevertheless, the standard C++ library needs a single linked list with method <code>push_back</code>. And <a href=\"https://groups.google.com/a/isocpp.org/forum/#!topic/std-discussion/LmgvApmDGZA\" rel=\"nofollow\">I already suggested that the C++ Committee should add such a container to the C++ standard library</a>. I even gave a name for it! :)</p>\n<pre><code>std::x_forward_list\n</code></pre>\n", "LastActivityDate": "2014-10-30T18:53:40.257"}, "26660780": {"ParentId": "26660618", "CommentCount": "0", "CreationDate": "2014-10-30T18:33:47.757", "OwnerUserId": "3987536", "PostTypeId": "2", "Id": "26660780", "Score": "2", "Body": "<p>Personally, I find that I am way more productive just using STL containers than having to design a linked list every time I wish to use one. That is probably the best benefit. Time is money.</p>\n", "LastActivityDate": "2014-10-30T18:33:47.757"}, "bq_ids": {"n4140": {"so_26660618_26660710_0": {"section_id": 705, "quality": 1.0, "length": 5}}, "n3337": {"so_26660618_26660710_0": {"section_id": 695, "quality": 1.0, "length": 5}}, "n4659": {"so_26660618_26660710_0": {"section_id": 734, "quality": 0.8, "length": 4}}}, "26660774": {"ParentId": "26660618", "CommentCount": "0", "CreationDate": "2014-10-30T18:33:38.733", "OwnerUserId": "2774358", "PostTypeId": "2", "Id": "26660774", "Score": "1", "Body": "<p>The STL is standard, heavily documented, already exists and has been used and tested, it is generic and works with most types, performance of STL containers is usually part of the standard so you will get the performance guaranteed from the standard or better.</p>\n<p>A homegrown list can be specifically customized to your needs and in some cases that may allow you to have a gain in performance based on any unique aspects of your data, but there are no guarantees, the performance is only as good as you make it yourself for your data. You must perform your own tests and write your own implementation.</p>\n", "LastActivityDate": "2014-10-30T18:33:38.733"}});