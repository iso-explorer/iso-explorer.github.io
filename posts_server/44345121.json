post_cb({"bq_ids": {"n4140": {"so_44345121_44345121_0": {"section_id": 5382, "quality": 0.8571428571428571, "length": 30}}, "n3337": {"so_44345121_44345121_0": {"section_id": 5176, "quality": 0.8571428571428571, "length": 30}}, "n4659": {"so_44345121_44345121_0": {"section_id": 6806, "quality": 1.0, "length": 35}}}, "44345121": {"CommentCount": "5", "ViewCount": "85", "PostTypeId": "1", "LastEditorUserId": "440558", "CreationDate": "2017-06-03T14:45:51.757", "LastActivityDate": "2017-06-03T15:12:37.703", "Title": "Are compilers allowed to evaluate tautologies in static assert", "FavoriteCount": "1", "LastEditDate": "2017-06-03T15:12:37.703", "Id": "44345121", "Score": "4", "Body": "<p>I like providing error messages in SFINAE constructs, as they can be rather difficult to understand especially to anyone other than the author.</p>\n<p>Example of spitting out an error message</p>\n<pre><code>template&lt;typename T, typename = void&gt;\nstruct S\n{\n    //S() {static_assert(false, \"Me not helpful\");}\n    S() {static_assert(sizeof(T) != sizeof(T), \"Me is helpful!\");}\n};\n\ntemplate&lt;typename T&gt;\nstruct S&lt;T, std::enable_if_t&lt;std::is_integral_v&lt;T&gt;&gt;&gt;\n{\n    // do stuff\n};\n</code></pre>\n<p>The first <code>static_assert</code> will fail instantly, even without an instantiation of <code>S</code>, while the second will succeed if no instantiations will result in the primary template.</p>\n<p>Therefore, I've come to rely on using tautologies \"depending\" on <code>T</code> such that the intended effect is achieved. But is this guaranteed? Are compilers allowed to evaluate these tautologies?</p>\n<p>Standard on <code>static_assert</code>. Don't think I saw anything related <a href=\"http://eel.is/c++draft/dcl.dcl#6\" rel=\"nofollow noreferrer\">[dcl.dcl]</a></p>\n<blockquote>\n<p id=\"so_44345121_44345121_0\">In a static_assert-declaration, the constant-expression shall be a contextually converted constant expression of type bool. If the value of the expression when so converted is true, the declaration has no effect. Otherwise, the program is ill-formed, and the resulting diagnostic message shall include the text of the string-literal, if one is supplied, except that characters not in the basic source character set are not required to appear in the diagnostic message. </p>\n</blockquote>\n", "Tags": "<c++><language-lawyer><static-assert>", "OwnerUserId": "4832499", "AnswerCount": "0"}});