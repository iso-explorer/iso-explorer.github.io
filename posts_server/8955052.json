post_cb({"8955172": {"Id": "8955172", "PostTypeId": "2", "Body": "<p>I don't know if this is the actual reason, but <code>add_rvalue_reference</code> has different behavior for <code>void</code>.</p>\n<p><code>add_rvalue_reference&lt;void&gt;::type</code> is simply <code>void</code>.</p>\n<p><code>void&amp;&amp;</code> is an error.</p>\n", "LastActivityDate": "2012-01-21T17:48:08.440", "CommentCount": "4", "CreationDate": "2012-01-21T17:48:08.440", "ParentId": "8955052", "Score": "14", "OwnerUserId": "964135"}, "bq_ids": {"n4140": {"so_8955052_8955207_0": {"length": 8, "quality": 0.8888888888888888, "section_id": 4706}, "so_8955052_8955220_1": {"length": 5, "quality": 0.7142857142857143, "section_id": 300}}, "n3337": {"so_8955052_8955207_0": {"length": 8, "quality": 0.8888888888888888, "section_id": 4515}, "so_8955052_8955220_1": {"length": 5, "quality": 0.7142857142857143, "section_id": 291}}, "n4659": {"so_8955052_8955207_0": {"length": 8, "quality": 0.8888888888888888, "section_id": 6103}, "so_8955052_8955220_1": {"length": 5, "quality": 0.7142857142857143, "section_id": 307}}}, "8955052": {"ViewCount": "1069", "Body": "<p><code>\u00a720.2.4 [declval]</code></p>\n<pre><code>template &lt;class T&gt;\ntypename add_rvalue_reference&lt;T&gt;::type declval() noexcept; // as unevaluated operand\n</code></pre>\n<p>Why use <code>add_rvalue_reference</code> here?</p>\n<p>From <code>\u00a720.9.7.2 [meta.trans.ref]</code> on <code>add_rvalue_reference</code>:</p>\n<blockquote>\n<p id=\"so_8955052_8955052_0\">If <code>T</code> names an object or function type then the member typedef <code>type</code> shall name <code>T&amp;&amp;</code>; otherwise, <code>type</code> shall name <code>T</code>. [ <em>Note:</em> This rule reflects the semantics of reference collapsing (8.3.2). For example, when a type <code>T</code> names a type <code>T1&amp;</code>, the type <code>add_rvalue_reference&lt;T&gt;::type</code> is not an rvalue reference. <em>\u2014end note</em> ]</p>\n</blockquote>\n<p>Since <code>add_rvalue_reference</code> is meant to reflect reference collapsing anyways, why not just use <code>T&amp;&amp;</code> like the following?</p>\n<pre><code>template&lt;class T&gt;\nT&amp;&amp; declval();\n</code></pre>\n<p>What could go wrong? What exactly are the differences between the two versions?</p>\n", "AcceptedAnswerId": "8955172", "Title": "Why is 'declval' specified in terms of 'add_rvalue_reference<T>::type' and not 'T&&'?", "CreationDate": "2012-01-21T17:30:54.297", "Id": "8955052", "CommentCount": "8", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2012-01-21T22:02:26.457", "LastEditorUserId": "560648", "LastActivityDate": "2012-01-21T22:02:26.457", "Score": "17", "OwnerUserId": "500104", "Tags": "<c++><c++11>", "AnswerCount": "3"}, "8955220": {"Id": "8955220", "PostTypeId": "2", "Body": "<p>The difference is that <code>add_rvalue_reference&lt;&gt;</code> only really adds the <code>&amp;&amp;</code> part if <code>T</code> is an object or function type. If <code>T</code> isn't an object or function type (e.g. <code>void</code>) you don't want to add <code>&amp;&amp;</code>.</p>\n<p>See <a href=\"http://ideone.com/as8Bi\">this example on Ideone</a>.<br>\n<a href=\"http://www.boost.org/doc/libs/1_45_0/libs/utility/doc/html/declval.html\">This webpage of Boost's implementation</a> explains:</br></p>\n<blockquote>\n<p id=\"so_8955052_8955220_0\">The role of the function template <code>declval()</code> is a transformation of a type <code>T</code> into a value without using or evaluating this function. The name is supposed to direct the reader's attention to the fact that the expression <code>declval&lt;T&gt;()</code> is an lvalue if and only if <code>T</code> is an lvalue-reference, otherwise an rvalue. To extend the domain of this function we can do a bit better by changing its declaration to</p>\n<pre><code>template&lt;class T&gt;\ntypename std::add_rvalue_reference&lt;T&gt;::type declval(); // not used\n</code></pre>\n<p id=\"so_8955052_8955220_1\">which ensures that we can also use cv <code>void</code> as template parameter.</p>\n</blockquote>\n", "LastEditorDisplayName": "user142019", "OwnerDisplayName": "user142019", "LastActivityDate": "2012-01-21T18:08:48.550", "Score": "10", "CreationDate": "2012-01-21T17:54:43.980", "ParentId": "8955052", "CommentCount": "0", "LastEditDate": "2012-01-21T18:08:48.550"}, "8955207": {"Id": "8955207", "PostTypeId": "2", "Body": "<p>Several definitions depend upon <code>declval</code> giving reasonable results for <em>cv-qualified</em> <code>void</code>.  An example is <code>is_assignable</code>:</p>\n<pre><code>template &lt;class T, class U&gt;\nstruct is_assignable;\n</code></pre>\n<blockquote>\n<p id=\"so_8955052_8955207_0\">The expression <code>declval&lt;T&gt;() = declval&lt;U&gt;()</code> is well-formed when treated\n  as an unevaluated operand ...</p>\n</blockquote>\n<p>The intent is that \"well-formed\" refers to the well-formed-ness of the assignment expression, and not whether <code>declval&lt;T&gt;</code> itself is well-formed.  I.e. we want to worry about just one thing at a time.</p>\n", "LastEditorUserId": "576911", "LastActivityDate": "2012-01-21T17:59:07.163", "Score": "10", "CreationDate": "2012-01-21T17:53:18.513", "ParentId": "8955052", "CommentCount": "0", "OwnerUserId": "576911", "LastEditDate": "2012-01-21T17:59:07.163"}});