post_cb({"29494419": {"ParentId": "7991490", "CommentCount": "0", "Body": "<p>As of C++11 (which has the concept of a data race) the standard guarantees that <code>new/delete</code>, <code>calloc/malloc/realloc/free</code>will occur in a single total order.</p>\n<p>From n3690 18.6.1.4:</p>\n<blockquote>\n<p id=\"so_7991490_29494419_0\">For purposes of determining the existence of data races, the library versions of operator new, user replacement\n  versions of global operator new, the C standard library functions calloc and malloc, the library\n  versions of operator delete, user replacement versions of operator delete, the C standard library function\n  free, and the C standard library function realloc shall not introduce a data race (17.6.5.9). Calls to\n  these functions that allocate or deallocate a particular unit of storage shall occur in a single total order, and\n  each such deallocation call shall happen before (1.10) the next allocation (if any) in this order.</p>\n</blockquote>\n<p>I could not find any such guarantees in previous versions of the standard, but (like others have said) I believe most implementations provide multi-threading support for memory allocation.</p>\n", "OwnerUserId": "1707560", "PostTypeId": "2", "Id": "29494419", "Score": "0", "CreationDate": "2015-04-07T14:45:02.497", "LastActivityDate": "2015-04-07T14:45:02.497"}, "7991546": {"ParentId": "7991490", "CommentCount": "0", "Body": "<p>It will depend on implementation. For example, Visual C++ runtime had both a signle-threaded and a multithreaded version of heap in earlier version, but starting with Visual C++ 2005 it only has a multithreaded version. <a href=\"http://msdn.microsoft.com/en-us/library/abx4dbyh%28v=vs.80%29.aspx\">This MSDN article</a> has a nice summary table.</p>\n<p>When a multithreaded heap is used calls to memory allocation and deallocation are thread-safe at expense of additional overhead.</p>\n", "OwnerUserId": "57428", "PostTypeId": "2", "Id": "7991546", "Score": "6", "CreationDate": "2011-11-03T07:38:49.563", "LastActivityDate": "2011-11-03T07:38:49.563"}, "bq_ids": {"n4140": {"so_7991490_29494419_0": {"section_id": 6869, "quality": 0.95, "length": 57}}, "n3337": {"so_7991490_29494419_0": {"section_id": 6615, "quality": 0.9, "length": 54}}, "n4659": {"so_7991490_29494419_0": {"section_id": 8361, "quality": 0.95, "length": 57}}}, "7991490": {"CommentCount": "2", "CreationDate": "2011-11-03T07:31:51.053", "PostTypeId": "1", "AcceptedAnswerId": "7991546", "LastEditorUserId": "160206", "LastActivityDate": "2015-04-07T14:45:02.497", "LastEditDate": "2011-11-03T07:41:21.810", "ViewCount": "2102", "FavoriteCount": "1", "Title": "new and delete handles multithreading issues", "Id": "7991490", "Score": "4", "Body": "<p>I am reading a book <a href=\"http://rads.stackoverflow.com/amzn/click/0201379503\" rel=\"nofollow\">Efficient C++: Performance Programming Techniques</a> Authors is saying following regarding global new and delete operators:</p>\n<blockquote>\n<p id=\"so_7991490_7991490_0\">They manage memory in the process context, and since a process may\n  spawn multiple threads, <code>new()</code> and <code>delete()</code> must be able to operate in\n  a multithreaded environment. In addition, the size of memory requests\n  may vary from one request to the next.</p>\n</blockquote>\n<p>in <em>Chapter 6. Single-Threaded Memory Pooling</em>.</p>\n<p>Is this true? I thought C++ does not have a notion of a <em>Multi-threading environment</em>, programmer need to handle is by using some means of mutual exclusion.</p>\n", "Tags": "<c++><multithreading><new-operator>", "OwnerUserId": "92568", "AnswerCount": "3"}, "7991545": {"ParentId": "7991490", "LastEditDate": "2017-05-23T12:14:17.707", "CommentCount": "1", "CreationDate": "2011-11-03T07:38:43.910", "OwnerUserId": "514235", "LastEditorUserId": "-1", "PostTypeId": "2", "Id": "7991545", "Score": "3", "Body": "<p>C++ (C++03 standard) doesn't talk about multi-threading. However most of the platforms support thread-safe <code>new/malloc</code>. Here is a <a href=\"https://stackoverflow.com/questions/796099/c-new-operator-thread-safety-in-linux-and-gcc-4\">previous post</a> discussing same kind of question.</p>\n<p>In C++11, the threads are introduced.</p>\n", "LastActivityDate": "2011-11-03T07:38:43.910"}});