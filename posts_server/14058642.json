post_cb({"14058642": {"CommentCount": "0", "ViewCount": "336", "PostTypeId": "1", "LastEditorUserId": "918414", "CreationDate": "2012-12-27T17:25:24.673", "LastActivityDate": "2013-02-03T05:34:48.660", "Title": "Are Forward-Iterators Output-Iterators?", "AcceptedAnswerId": "14058712", "LastEditDate": "2013-02-03T05:34:48.660", "Id": "14058642", "Score": "7", "Body": "<p>Are ForwardIterators required to be OutputIterators? My current STL-implementation (VS2012) derives <code>forward_iterator_tag</code> from both <code>input_iterator_tag</code> and <code>output_iterator_tag</code>, but I can't find this requirement in the standard [N3485].</p>\n", "Tags": "<c++><iterator-traits>", "OwnerUserId": "507433", "AnswerCount": "1"}, "14058712": {"ParentId": "14058642", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>In C++11, no, forward iterators are not required to be output iterators. The output iterator requirements are like an extra set of requirements that an iterator can have, regardless of the rest of the iterator requirements it meets. Forward iterators are only required to be input iterators (\u00a724.2.5/1):</p>\n<blockquote>\n<p id=\"so_14058642_14058712_0\">A class or pointer type X satisfies the requirements of a forward iterator if:  </p>\n<ul>\n<li>X satisfies the requirements of an input iterator</li>\n<li>...</li>\n</ul>\n</blockquote>\n<p>In fact, a forward iterator meets the output iterator requirements only if it is a mutable iterator to a sequence of copy-assignable types<sup>\u2020</sup>.</p>\n<p><sup>\u2020 or a constant iterator to a sequence of types with <code>operator=(...) const</code> defined with mutable members.</sup></p>\n<p>More to the point, the iterator tags are defined specifically by the standard as (\u00a724.4.3/2):</p>\n<pre><code>namespace std {\n  struct input_iterator_tag { };\n  struct output_iterator_tag { };\n  struct forward_iterator_tag: public input_iterator_tag { };\n  struct bidirectional_iterator_tag: public forward_iterator_tag { };\n  struct random_access_iterator_tag: public bidirectional_iterator_tag { };\n}\n</code></pre>\n<p>As you can see, <code>forward_iterator_tag</code> should only inherit from <code>input_iterator_tag</code>.</p>\n<hr>\n<p>In C++03, it is stated that forward iterators satisfy the requirements of input and output iterators:</p>\n<blockquote>\n<p id=\"so_14058642_14058712_1\">Forward iterators satisfy all the requirements of the input and output iterators and can be used whenever either kind is specified.</p>\n</blockquote>\n<p>But this is then contradicted in the following paragraph, stating that a constant forward iterator would not satisfy the requirements for output iterators:</p>\n<blockquote>\n<p id=\"so_14058642_14058712_2\">Besides its category, a forward, bidirectional, or random access iterator can also be mutable or constant depending on whether the result of the expression *i behaves as a reference or as a reference to a constant. Constant iterators do not satisfy the requirements for output iterators, and the result of the expression *i (for constant iterator i) cannot be used in an expression where an lvalue is required.</p>\n</blockquote>\n<p>However, the definition of the iterator tags is identical to as in C++11. There was a <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1808.html#476\">defect report</a> for this contradictory wording, but it was closed as Not a Defect because the first quote is in the \"introductory text\" of the section and would likely be reworded in the future (which it was).</p>\n<hr>\n<p>The <a href=\"http://www.sgi.com/tech/stl/ForwardIterator.html\">SGI definition of a forward iterator</a> is given as a refinement of both input and output iterators (thanks to @BenVoigt in the comments).</p>\n<p>Nonetheless, if we take a look at the <a href=\"http://www.sgi.com/tech/stl/stl_iterator_base.h\">implementation of the iterator tags</a>, we find that <code>forward_iterator_tag</code> still only inherits from <code>input_iterator_tag</code>.</p>\n<p>Looks like this has been an area of quite a bit of confusion in the past, but if VS2012 is defining <code>forward_iterator_tag</code> as inheriting from both <code>output_</code>- and <code>input_iterator_tag</code>, I can only assume it is a bug.</p>\n</hr></hr>", "OwnerUserId": "150634", "LastEditorUserId": "150634", "LastEditDate": "2012-12-27T18:01:30.880", "Id": "14058712", "Score": "11", "CreationDate": "2012-12-27T17:30:35.797", "LastActivityDate": "2012-12-27T18:01:30.880"}, "bq_ids": {"n4140": {"so_14058642_14058712_1": {"section_id": 5557, "quality": 0.7692307692307693, "length": 10}, "so_14058642_14058712_0": {"section_id": 5573, "quality": 1.0, "length": 7}}, "n3337": {"so_14058642_14058712_1": {"section_id": 5339, "quality": 0.7692307692307693, "length": 10}, "so_14058642_14058712_0": {"section_id": 5355, "quality": 1.0, "length": 7}}, "n4659": {"so_14058642_14058712_1": {"section_id": 7002, "quality": 0.7692307692307693, "length": 10}, "so_14058642_14058712_0": {"section_id": 7020, "quality": 1.0, "length": 7}}}});