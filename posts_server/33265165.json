post_cb({"33265165": {"CommentCount": "8", "ViewCount": "704", "PostTypeId": "1", "LastEditorUserId": "1412888", "CreationDate": "2015-10-21T17:01:10.833", "LastActivityDate": "2015-10-21T20:27:55.317", "Title": "Does std::allocator_traits define rebind_alloc if rebind not present in custom allocator?", "AcceptedAnswerId": "33267132", "LastEditDate": "2015-10-21T17:21:09.157", "Id": "33265165", "Score": "6", "Body": "<p>I'm trying to rebind my custom allocator type, <code>MyAllocator&lt;foo&gt;</code>, for use in a <code>basic_string</code> class, e.g.:</p>\n<p><code>std::basic_string&lt;char, std::char_traits&lt;char&gt;, MyAllocator&lt;char&gt;&gt; ...</code></p>\n<p>The allocator is passed to the context as <code>MyAllocator&lt;void&gt;</code>, so I need to rebind the allocator.</p>\n<p>From the cppreference page for <code>std::allocator_traits</code>, <a href=\"http://en.cppreference.com/w/cpp/memory/allocator_traits\">http://en.cppreference.com/w/cpp/memory/allocator_traits</a>:</p>\n<blockquote>\n<p id=\"so_33265165_33265165_0\">Member alias templates:</p>\n<p id=\"so_33265165_33265165_1\"><code>rebind_alloc&lt;T&gt;</code>:    <code>Alloc::rebind&lt;T&gt;::other</code> if present, otherwise <code>Alloc&lt;T, Args&gt;</code> if this Alloc is <code>Alloc&lt;U, Args&gt;</code></p>\n</blockquote>\n<p>My custom allocator implements <code>allocator_traits</code>, but does not define the rebind struct (which doesn't appear to be a requirement to implement <code>allocator_traits</code>). My understanding of the documentation is that it <code>allocator_traits</code> should understand <code>rebind_alloc</code>. However, if I try calling <code>rebind_alloc</code> on my custom allocator type:</p>\n<pre><code>template&lt;typename T&gt;\nusing RebindAlloc =\n  typename std::allocator_traits&lt;MyAllocator&lt;void&gt;&gt;::template rebind_alloc&lt;T&gt;;\n</code></pre>\n<p>I get various compiler errors when I try to pass <code>RebindAlloc&lt;char&gt;</code> to the <code>basic_string</code> type:</p>\n<pre><code>In file included from /usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/string:52:\n/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/basic_string.h:114:41: error: \n  'rebind' following the 'template' keyword does not refer to a template\n  typedef typename _Alloc::template rebind&lt;_CharT&gt;::other _CharT_alloc_type;\n</code></pre>\n<p>Clearly the documentation has misled me. Should I just give up on <code>rebind_alloc</code> and implement rebind in the custom allocator, or is there a correct way of doing this using <code>allocator_traits</code>?</p>\n<p>I am using gcc 4.8 with C++11. 14 is not an option at the moment.</p>\n<p>Here's a code snippet of what I'm trying to do:\n<a href=\"https://gist.github.com/jacquelinekay/0cee73d1d2d78d8edd31\">https://gist.github.com/jacquelinekay/0cee73d1d2d78d8edd31</a></p>\n", "Tags": "<c++><templates><c++11><allocator>", "OwnerUserId": "1412888", "AnswerCount": "2"}, "33266918": {"ParentId": "33265165", "PostTypeId": "2", "CommentCount": "0", "Body": "<p><a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3376.pdf\" rel=\"nofollow\">n3376</a> says in [allocator.traits.types]/10:</p>\n<blockquote>\n<pre><code>template &lt;class T&gt; using rebind_alloc = see below;\n</code></pre>\n<p id=\"so_33265165_33266918_0\"><em>Alias template:</em> <code>Alloc::rebind&lt;T&gt;::other</code> if such a type exists; otherwise, <code>Alloc&lt;T, Args&gt;</code> if <code>Alloc</code> is a class template instantiation of the form <code>Alloc&lt;U, Args&gt;</code>, where <code>Args</code> is zero or more type arguments; otherwise, the instantiation of <code>rebind_alloc</code> is ill-formed.</p>\n</blockquote>\n<p>which agrees with cppreference.  It (allocator traits) seem to have been added in C++11, so it does not appear in <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1905.pdf\" rel=\"nofollow\">n1905</a>.  Further archaeology could detect where it arrived, but that isn't all that relevant.</p>\n<p>It appears as if your compiler is not a compliant C++11 compiler in this regard.</p>\n<p>With minor fixes, <a href=\"http://coliru.stacked-crooked.com/a/7629a3afcd3913e7\" rel=\"nofollow\">both gcc 5.2.0 and clang 3.7.0 in C++11 mode</a> will compile your code without error.</p>\n<p>It appears the only reasonable response, if you cannot change your compiler, is to implement a simple <code>rebind</code>.</p>\n", "OwnerUserId": "1774667", "LastEditorUserId": "3953764", "LastEditDate": "2015-10-21T20:27:55.317", "Id": "33266918", "Score": "1", "CreationDate": "2015-10-21T18:45:53.907", "LastActivityDate": "2015-10-21T20:27:55.317"}, "bq_ids": {"n4140": {"so_33265165_33266918_0": {"section_id": 4226, "quality": 0.9230769230769231, "length": 24}, "so_33265165_33265165_1": {"section_id": 4226, "quality": 0.7777777777777778, "length": 7}}, "n3337": {"so_33265165_33266918_0": {"section_id": 4067, "quality": 0.9230769230769231, "length": 24}, "so_33265165_33265165_1": {"section_id": 4067, "quality": 0.7777777777777778, "length": 7}}, "n4659": {"so_33265165_33266918_0": {"section_id": 5487, "quality": 0.8461538461538461, "length": 22}, "so_33265165_33265165_1": {"section_id": 5487, "quality": 0.7777777777777778, "length": 7}}}, "33267132": {"ParentId": "33265165", "PostTypeId": "2", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_33265165_33267132_0\">I am using gcc 4.8 with C++11.</p>\n</blockquote>\n<p>Then you need to define <code>rebind</code> in your allocator, GCC's <code>basic_string</code> doesn't support the C++11 allocator requirements until version 5.1 (and then only for the new ABI string, i.e. <code>std::__cxx::basic_string</code>).</p>\n<p>So your allocator must meet the C++03 Allocator requirements, defining all the members, because <code>allocator_traits</code> isn't used by string in 4.8</p>\n", "OwnerUserId": "981959", "LastEditorUserId": "981959", "LastEditDate": "2015-10-21T19:05:52.903", "Id": "33267132", "Score": "4", "CreationDate": "2015-10-21T18:58:18.450", "LastActivityDate": "2015-10-21T19:05:52.903"}});