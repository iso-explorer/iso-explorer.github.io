post_cb({"6318819": {"Id": "6318819", "PostTypeId": "2", "Body": "<pre><code>extern const int &amp;ri;\n</code></pre>\n<p>Its a <em>declaration</em> ONLY with no definition, which indicates that the variable is <em>defined</em> elsewhere.</p>\n<p>Such code is <em>usually</em> found in <code>.h</code> file, and its definition is found in <code>.cpp</code> file. This approach is used to avoid multiple-redefinition error if you include the header file in multiple files. Something like this:</p>\n<pre><code>//lib.h\nextern Type object; //declaration Only;\n\n//lib.cpp\n#include \"lib.h\"\nType object = /*some initialization - optional*/; //definition\n\n//A.cpp\n#include \"lib.h\"\nType oA = object;\n\n//B.cpp\n#include \"lib.h\"\nType oB = object;\n</code></pre>\n<hr>\n<p>The usage of <code>const</code>at namespace level makes the variable being declared or defined to have internal-linkage, it becomes like an <em>immutable</em> <code>static</code> variable, which exists only in its own translation unit.</p>\n<p><code>extern const</code> makes the variable to have external-linkage, at the same time, the  variable is constant.</p>\n<pre><code>namespace N\n{\n    const int i = 10;         //i has internal linkage\n    extern const int j = 10;  //j has external linkage\n}\n</code></pre>\n<p>In this case, <code>extern</code> is used to make the variable to have external-linkage!</p>\n<p>\u00a73.5/3 [basic.link]: </p>\n<blockquote>\n<p id=\"so_6318779_6318819_0\">A name having namespace scope (3.3.5)\n  has <strong>internal linkage</strong> if it is the name\n  of<br>\n  \u2014 an object, reference, function or\n  function template that is explicitly\n  declared static or,<br>\n  \u2014 an object or\n  reference that is <strong>explicitly declared\n  const and neither explicitly declared\n  extern nor previously declared to have\n  external linkage</strong>; or<br>\n  \u2014 a data member\n  of an anonymous union.</br></br></br></p>\n</blockquote>\n</hr>", "LastEditorUserId": "415784", "LastActivityDate": "2011-06-11T22:35:40.963", "Score": "1", "CreationDate": "2011-06-11T22:10:11.973", "ParentId": "6318779", "CommentCount": "1", "OwnerUserId": "415784", "LastEditDate": "2011-06-11T22:35:40.963"}, "6318788": {"Id": "6318788", "PostTypeId": "2", "Body": "<p>It's a declaration- the \"extern\" means that it lives somewhere else.</p>\n", "LastActivityDate": "2011-06-11T22:03:52.253", "CommentCount": "3", "CreationDate": "2011-06-11T22:03:52.253", "ParentId": "6318779", "Score": "4", "OwnerUserId": "298661"}, "6318928": {"Id": "6318928", "PostTypeId": "2", "Body": "<p>Apart from anything else, it is almost certainly a misuse of a reference. References are intended to be used as function parameters and and return values. THe fact that you can create \"reference variables\" (I don't know how else to describe them) seems to have been an accident of the C++ grammar. Yes, you can do tricks with them, but no, you shouldn't.</p>\n<p>Bottom line - if you have a reference that isn't a parameter or a return value, you are probably doing something wrong. Unless you really, really know what you are doing, in which case you wouldn't be asking about it here, would you?</p>\n", "LastActivityDate": "2011-06-11T22:36:06.513", "CommentCount": "5", "CreationDate": "2011-06-11T22:36:06.513", "ParentId": "6318779", "Score": "1", "OwnerUserId": "2100815"}, "6318792": {"Id": "6318792", "PostTypeId": "2", "Body": "<p>Using <code>extern</code> would indicate that the object is not defined here, but somewhere else. </p>\n", "LastActivityDate": "2011-06-11T22:04:42.503", "CommentCount": "0", "CreationDate": "2011-06-11T22:04:42.503", "ParentId": "6318779", "Score": "0", "OwnerUserId": "597607"}, "bq_ids": {"n4140": {"so_6318779_6318819_0": {"length": 30, "quality": 0.8571428571428571, "section_id": 7136}, "so_6318779_6318850_0": {"length": 8, "quality": 0.7272727272727273, "section_id": 7034}}, "n3337": {"so_6318779_6318819_0": {"length": 30, "quality": 0.8571428571428571, "section_id": 6880}, "so_6318779_6318850_0": {"length": 8, "quality": 0.7272727272727273, "section_id": 6780}}, "n4659": {"so_6318779_6318819_0": {"length": 27, "quality": 0.7714285714285715, "section_id": 8637}, "so_6318779_6318850_0": {"length": 8, "quality": 0.7272727272727273, "section_id": 8531}}}, "6318779": {"ViewCount": "366", "Body": "<p>Is this, <em>line of code that is presented below and under this sentence</em>, considered a declaration or definition? </p>\n<pre><code>extern const int &amp;ri;\n</code></pre>\n", "Title": "Declaration or Definition", "CreationDate": "2011-06-11T22:00:56.200", "LastActivityDate": "2011-06-11T22:40:47.590", "CommentCount": "0", "LastEditDate": "2011-06-11T22:07:44.177", "PostTypeId": "1", "LastEditorUserId": "435800", "Id": "6318779", "Score": "2", "OwnerUserId": "794328", "Tags": "<c++>", "AnswerCount": "6"}, "6318850": {"Id": "6318850", "PostTypeId": "2", "Body": "<p>C++03, \u00a73.1, \u00b62:</p>\n<blockquote>\n<p id=\"so_6318779_6318850_0\">A declaration is a definition unless ... it contains the extern specifier or a linkage- specification and neither an initializer nor a function-body ...</p>\n</blockquote>\n<p>So, <code>extern const int &amp;ri;</code>, which contains the <code>extern</code> specifier and not an initializer is a declaration but not a definition.</p>\n", "LastActivityDate": "2011-06-11T22:18:03.217", "CommentCount": "0", "CreationDate": "2011-06-11T22:18:03.217", "ParentId": "6318779", "Score": "3", "OwnerUserId": "8747"}, "6318817": {"Id": "6318817", "PostTypeId": "2", "Body": "<p>Firstly, <em>declaration</em> and <em>definition</em> are not mutually exclusive concepts. Every definition is a declaration at the same time (with few exceptions). Which means that the proper way to ask the question would be: \"Is this a defining declaration or a non-defining declaration?\". </p>\n<p>Note that I'm not saying that the question the way it is now is meaningless. The question is fine, because everybody understands what is really meant by it. I just wanted to say this as an introductory note.</p>\n<p>Secondly, what you have here is a non-defining declaration, meaning that this declaration is not a definition (a reference or object declaration with <code>extern</code> specifier but without an initializer is not a definition).</p>\n<p>In case of</p>\n<pre><code>extern const int &amp;ri = 5;\n</code></pre>\n<p>we'd also have a <em>declaration</em>, but this would be a <em>defining</em> declaration (i.e. a declaration that happens to be a definition).</p>\n", "LastEditorUserId": "187690", "LastActivityDate": "2011-06-11T22:35:48.587", "Score": "3", "CreationDate": "2011-06-11T22:10:06.980", "ParentId": "6318779", "CommentCount": "6", "OwnerUserId": "187690", "LastEditDate": "2011-06-11T22:35:48.587"}});