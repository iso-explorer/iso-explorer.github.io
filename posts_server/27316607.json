post_cb({"27316980": {"ParentId": "27316607", "CommentCount": "0", "Body": "<p>I think that these quotes from the C++ Standard will be relevant:</p>\n<p>From the C++ Standard (7.3.3 The using declaration)</p>\n<blockquote>\n<p id=\"so_27316607_27316980_0\">13 Since a using-declaration is a declaration, the restrictions on\n  declarations of the same name in the same declarative region (3.3)\n  also apply to using-declarations.</p>\n</blockquote>\n<p>And (3.3.7 Class scope)</p>\n<blockquote>\n<p id=\"so_27316607_27316980_1\">4) A name declared within a member function hides a declaration of the\n  same name whose scope extends to or past the end of the member\n  function\u2019s class.</p>\n</blockquote>\n", "OwnerUserId": "2877241", "PostTypeId": "2", "Id": "27316980", "Score": "1", "CreationDate": "2014-12-05T13:29:06.133", "LastActivityDate": "2014-12-05T13:29:06.133"}, "27316662": {"ParentId": "27316607", "CommentCount": "0", "Body": "<p>Because the <code>using</code> declaration brings <code>x::f</code> into the scope of <code>f</code>, which is narrower than that of <code>C</code>. Unqualified lookup considers the local block scope, finds a match, and stops before considering the wider class scope. There is no argument-dependent lookup since there are no function arguments, so no further scopes are considered.</p>\n", "OwnerUserId": "204847", "PostTypeId": "2", "Id": "27316662", "Score": "10", "CreationDate": "2014-12-05T13:11:09.077", "LastActivityDate": "2014-12-05T13:11:09.077"}, "27316852": {"ParentId": "27316607", "CommentCount": "0", "Body": "<p>@MikeSeymour's answer is spot on; here are the relevant standard quotes (C++11, emphasis mine):</p>\n<p>13.3.1.1.1/3:</p>\n<blockquote>\n<p id=\"so_27316607_27316852_0\">In unqualified function calls, the name is not qualified by an <code>-&gt;</code> or <code>.</code> operator and has the more general form\n  of a <em>primary-expression.</em> The name is looked up in the context of the function call following the normal rules\n  for name lookup in function calls (3.4). The function declarations found by that lookup constitute the set of\n  candidate functions. <strong>Because of the rules for name lookup, the set of candidate functions consists (1) entirely\n  of non-member functions or (2) entirely of member functions of some class <code>T</code>.</strong> ...</p>\n</blockquote>\n<p>3.4.1/1:</p>\n<blockquote>\n<p id=\"so_27316607_27316852_1\">In all the cases listed in 3.4.1, the scopes are searched for a declaration in the order listed in each of the\n  respective categories; name lookup ends as soon as a declaration is found for the name. If no declaration is\n  found, the program is ill-formed.</p>\n</blockquote>\n<p>3.4.1/8</p>\n<blockquote>\n<p id=\"so_27316607_27316852_2\">A name used in the definition of a member function (9.3) of class <code>X</code> following the function's <em>declarator-id</em>\n  ... shall be declared in one of\n  the following ways:</p>\n<ul>\n<li>before its use in the block in which it is used or in an enclosing block (6.3), or</li>\n<li>shall be a member of class <code>X</code> or be a member of a base class of <code>X</code> (10.2), or</li>\n<li>...</li>\n</ul>\n</blockquote>\n<p>From 3.4.1/8, we see that a declaration for the name <code>f</code> (such as the declaration <code>using x::f;</code>) in the block in which it's used is listed earlier than <code>f</code> as the member of class <code>C</code>. As per 3.4.1/1, the earlier one is chosen, so the entire lookup resolves to <code>x::f</code> introduced by the <code>using</code> declaration.</p>\n", "OwnerUserId": "1782465", "PostTypeId": "2", "Id": "27316852", "Score": "7", "CreationDate": "2014-12-05T13:20:04.133", "LastActivityDate": "2014-12-05T13:20:04.133"}, "bq_ids": {"n4140": {"so_27316607_27316980_0": {"section_id": 5502, "quality": 1.0, "length": 13}, "so_27316607_27316980_1": {"section_id": 7070, "quality": 1.0, "length": 17}, "so_27316607_27316852_0": {"section_id": 577, "quality": 0.9583333333333334, "length": 46}, "so_27316607_27316852_2": {"section_id": 7093, "quality": 0.8333333333333334, "length": 10}, "so_27316607_27316852_1": {"section_id": 7087, "quality": 0.9545454545454546, "length": 21}}, "n3337": {"so_27316607_27316980_1": {"section_id": 6814, "quality": 1.0, "length": 17}, "so_27316607_27316980_0": {"section_id": 5288, "quality": 1.0, "length": 13}, "so_27316607_27316852_0": {"section_id": 567, "quality": 0.9583333333333334, "length": 46}, "so_27316607_27316852_2": {"section_id": 6838, "quality": 1.0, "length": 12}, "so_27316607_27316852_1": {"section_id": 6831, "quality": 0.9545454545454546, "length": 21}}, "n4659": {"so_27316607_27316980_1": {"section_id": 8569, "quality": 1.0, "length": 17}, "so_27316607_27316980_0": {"section_id": 6936, "quality": 1.0, "length": 13}, "so_27316607_27316852_0": {"section_id": 600, "quality": 0.9583333333333334, "length": 46}, "so_27316607_27316852_2": {"section_id": 8594, "quality": 0.8333333333333334, "length": 10}, "so_27316607_27316852_1": {"section_id": 8588, "quality": 0.9545454545454546, "length": 21}}}, "27316607": {"CommentCount": "0", "CreationDate": "2014-12-05T13:07:36.043", "PostTypeId": "1", "AcceptedAnswerId": "27316662", "LastEditorUserId": "2069064", "LastActivityDate": "2015-12-14T19:06:16.943", "LastEditDate": "2015-12-14T19:06:16.943", "ViewCount": "107", "FavoriteCount": "0", "Title": "Overload Resolution: How is this not ambiguous?", "Id": "27316607", "Score": "3", "Body": "<p>Suppose we have this code, copied from a separate question:</p>\n<pre><code>namespace x \n{\n    void f()\n    {\n    }\n\n    class C \n    {\n        void f() \n        {\n            using x::f;\n            f();         // &lt;==\n        }\n    };\n}\n</code></pre>\n<p>The name <code>f</code> on the indicated line unambiguously refers to <code>x::f</code> (at least according to both gcc and clang). Why is <code>x::f</code> preferred over <code>x::C::f</code> in this case? Shouldn't it be ambiguous as both names are visible? </p>\n", "Tags": "<c++><language-lawyer><overload-resolution>", "OwnerUserId": "2069064", "AnswerCount": "3"}});