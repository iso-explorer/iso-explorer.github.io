post_cb({"27081344": {"CommentCount": "9", "AcceptedAnswerId": "27081436", "PostTypeId": "1", "LastEditorDisplayName": "user3920237", "CreationDate": "2014-11-22T19:09:13.577", "LastActivityDate": "2014-11-22T19:48:12.613", "LastEditDate": "2014-11-22T19:22:32.677", "ViewCount": "357", "FavoriteCount": "0", "Title": "I believe this to be a (minor) defect in the C++11 Standard", "Id": "27081344", "Score": "7", "Body": "<p>I believe this to be a (minor) defect in the C++11 Standard. In [dcl.dcl] we have:</p>\n<blockquote>\n<p id=\"so_27081344_27081344_0\"><em>simple-declaration</em>:</p>\n<p id=\"so_27081344_27081344_1\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<em>decl-specifier-seq<sub>opt</sub></em> <em>init-declarator-list<sub>opt</sub></em> <strong>;</strong></p>\n</blockquote>\n<p>The <em>decl-specifier-seq</em> can't be optional.</p>\n<p>For instance the snippet below doesn't compile:</p>\n<pre><code>x;\n</code></pre>\n<p>If I'm correct here, then the beginning of paragraph \u00a78.3/1 should also be altered:</p>\n<p>From:</p>\n<blockquote>\n<p id=\"so_27081344_27081344_2\">A list of declarators appears after an optional (Clause 7)\n  <em>decl-specifier-seq</em> (7.1).</p>\n</blockquote>\n<p>To: </p>\n<blockquote>\n<p id=\"so_27081344_27081344_3\">A list of declarators appears after a <em>decl-specifier-seq</em> (7.1).</p>\n</blockquote>\n", "Tags": "<c++><c++11><language-lawyer>", "OwnerUserId": "2548699", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_27081344_27081436_0": {"section_id": 5381, "quality": 0.9245283018867925, "length": 49}, "so_27081344_27081344_3": {"section_id": 3208, "quality": 1.0, "length": 5}, "so_27081344_27081344_2": {"section_id": 3208, "quality": 1.0, "length": 7}, "so_27081344_27081436_1": {"section_id": 5387, "quality": 0.9, "length": 9}}, "n3337": {"so_27081344_27081436_0": {"section_id": 5175, "quality": 1.0, "length": 53}, "so_27081344_27081344_3": {"section_id": 3082, "quality": 1.0, "length": 5}, "so_27081344_27081344_2": {"section_id": 3082, "quality": 1.0, "length": 7}, "so_27081344_27081436_1": {"section_id": 5181, "quality": 0.9, "length": 9}}, "n4659": {"so_27081344_27081436_0": {"section_id": 6805, "quality": 0.9245283018867925, "length": 49}}}, "27081436": {"ParentId": "27081344", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>Too long for a comment</p>\n<p>In clause 7, paragraph 3:</p>\n<blockquote>\n<p id=\"so_27081344_27081436_0\"><strong>In a <em>simple-declaration</em>, the optional <em>init-declarator-list</em> can be\n  omitted only when declaring a class (Clause 9) or enumeration (7.2),\n  that is, when the <em>decl-specifier-seq</em> contains either a\n  <em>class-specifier</em>, an <em>elaborated-type-specifier</em> with a <em>class-key</em> (9.1),\n  or an <em>enum-specifier</em>.</strong> In these cases and whenever a <em>class-specifier</em> or\n  <em>enum-specifier</em> is present in the <em>decl-specifier-seq</em>, the identifiers\n  in these specifiers are among the names being declared by the\n  declaration (as <em>class-names</em>, <em>enum-names</em>, or <em>enumerators</em>, depending on\n  the syntax). In such cases, and except for the declaration of an\n  unnamed bit-field (9.6), the <em>decl-specifier-seq</em> shall introduce one or\n  more names into the program, or shall redeclare a name introduced by a\n  previous declaration.</p>\n</blockquote>\n<p>And in clause 7, paragraph 9</p>\n<blockquote>\n<p id=\"so_27081344_27081436_1\"><strong>Only in function declarations for constructors, destructors, and type\n  conversions can the <em>decl-specifier-seq</em> be omitted.</strong></p>\n</blockquote>\n", "OwnerUserId": "2249683", "LastEditorUserId": "2249683", "LastEditDate": "2014-11-22T19:48:12.613", "Id": "27081436", "Score": "11", "CreationDate": "2014-11-22T19:18:05.133", "LastActivityDate": "2014-11-22T19:48:12.613"}});