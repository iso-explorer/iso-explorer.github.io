post_cb({"14423482": {"Id": "14423482", "PostTypeId": "2", "Body": "<p>The shifts are not legal but the compiler only catches the first one:</p>\n<blockquote>\n<p id=\"so_14423453_14423482_0\">6.5.7</p>\n<p id=\"so_14423453_14423482_1\">The integer promotions are performed on each of the operands. The type\n  of the result is that of the promoted left operand. If the value of\n  the right operand is negative <strong>or is greater than or equal to the width\n  of the promoted left operand</strong>, the behavior is undefined.</p>\n</blockquote>\n", "LastActivityDate": "2013-01-20T10:11:46.777", "CommentCount": "3", "CreationDate": "2013-01-20T10:11:46.777", "ParentId": "14423453", "Score": "7", "OwnerUserId": "714501"}, "14423491": {"Id": "14423491", "PostTypeId": "2", "Body": "<p>Firstly, that's not an error, that's a warning. The reason why the compiler doesn't warn in the second case is that it's probably not smart enough to deduce from the first assignment that the result is going to be undefined behavior, while in the first case, the constant left shift by 32 bits is \"obviously\" a problem which is caught by the compiler.</p>\n", "OwnerDisplayName": "user529758", "LastActivityDate": "2013-01-20T10:12:37.087", "Score": "4", "CreationDate": "2013-01-20T10:12:37.087", "ParentId": "14423453", "CommentCount": "2"}, "14423453": {"ViewCount": "147", "Body": "<p>Could any one please help me in understanding the following behaviour.</p>\n<pre><code>    1    #include &lt;iostream&gt;\n    2\n    3    using namespace std;\n    4\n    5    main()\n    6    {\n    7        uint32_t i = 32;\n    8\n    9        // cout &lt;&lt; \"(1&lt;&lt;32): \" &lt;&lt; (1&lt;&lt;32) &lt;&lt; endl; // - This leads to a compilation error.\n    10       cout &lt;&lt; \"(1&lt;&lt;32): \" &lt;&lt; (1&lt;&lt;i) &lt;&lt; endl; // - This compiles and prints 1 - Why?\n    11\n    12        return 0;\n    13    }\n</code></pre>\n<p>If I un-comment the line number 9 above - I see the following compilation error (which makes sense to me)</p>\n<pre><code>BitWiseLeftShift.c++: In function 'int main()':\nBitWiseLeftShift.c++:9: warning: left shift count &gt;= width of type\n</code></pre>\n<p>But the line number 10 is where my question is. It compiles successfully and prints </p>\n<pre><code>(1&lt;&lt;32): 1\n</code></pre>\n<p>something like a circular bit shift. Why would it print 1? \nAnd I have seen that for <code>i == 33</code>, <code>(1&lt;&lt;i)</code> prints 2.</p>\n<p>I did search the forum and could not find a relevant question. If this is a duplicate question - please help me with a link.</p>\n", "AcceptedAnswerId": "14423480", "Title": "Difference between (1<<32) and (1<<i) where i == 32", "CreationDate": "2013-01-20T10:07:37.340", "LastActivityDate": "2013-01-20T10:29:49.453", "CommentCount": "2", "LastEditDate": "2013-01-20T10:10:34.013", "PostTypeId": "1", "Tags": "<c++><c>", "Id": "14423453", "AnswerCount": "4", "Score": "-2", "OwnerUserId": "1990351", "ClosedDate": "2013-01-20T10:30:49.540", "LastEditorUserId": "635608"}, "bq_ids": {"n4140": {"so_14423453_14423482_1": {"length": 16, "quality": 0.64, "section_id": 6146}}, "n3337": {"so_14423453_14423482_1": {"length": 16, "quality": 0.64, "section_id": 5909}}, "n4659": {"so_14423453_14423482_1": {"length": 16, "quality": 0.64, "section_id": 7642}}}, "14423480": {"Id": "14423480", "PostTypeId": "2", "Body": "<p>As pointed out in other answers, if the shift amount is larger or equal to the size of the shifted data in bits (or is negative), the result is undefined.</p>\n<p>However, to explain the behavior you are seeing -</p>\n<p>Some computer architectures (including x86) treat the shift amount as modulo the size of the data being shifted, so shifting by 32 is equivalent to not shifting at all. To put it another way, they simply mask out the higher bits and use the lower bits.</p>\n", "LastEditorDisplayName": "user2048753", "OwnerDisplayName": "user2048753", "LastActivityDate": "2013-01-20T10:29:49.453", "Score": "5", "CreationDate": "2013-01-20T10:11:21.067", "ParentId": "14423453", "CommentCount": "0", "LastEditDate": "2013-01-20T10:29:49.453"}, "14423600": {"Id": "14423600", "PostTypeId": "2", "Body": "<p>The constant shift is evaluated by the pro-processor during constant folding, while the second one is deferred to runtime by most compilers. This would explain the different response by the consecutive passes of the compiler.</p>\n<p>It is possible with static analysis to determine that both do have the same result and could be detected during compilation.</p>\n", "LastActivityDate": "2013-01-20T10:29:35.090", "CommentCount": "0", "CreationDate": "2013-01-20T10:29:35.090", "ParentId": "14423453", "Score": "1", "OwnerUserId": "111598"}});