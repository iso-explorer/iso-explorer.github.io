post_cb({"4826719": {"ViewCount": "15050", "Body": "<pre><code>class MyClass\n{\n    int x, y;\n    void foo() volatile {\n        // do stuff with x\n        // do stuff with y\n    }   \n};\n</code></pre>\n<p>Do I need to declare 'x' and 'y' as volatile or will be all member variables treated as volatile automatically?</p>\n<p>I want to make sure that \"stuff with 'x'\" is not reordered with \"stuff with 'y'\" by the compiler.</p>\n<p>EDIT:\nWhat happens if I'm casting a normal type to a volatile type? Would this instruct the compiler to not reorder access to that location? I want to pass a normal variable in a special situation to a function which parameter is volatile. I must be sure compiler doesn't reorder that call with prior or followed reads and writes.</p>\n", "AcceptedAnswerId": "4826751", "Title": "C++ volatile member functions", "CreationDate": "2011-01-28T09:40:33.403", "Id": "4826719", "CommentCount": "2", "FavoriteCount": "9", "PostTypeId": "1", "LastEditDate": "2011-01-28T10:10:32.977", "LastEditorUserId": "547231", "LastActivityDate": "2014-09-03T20:54:31.663", "Score": "24", "OwnerUserId": "547231", "Tags": "<c++><volatile><member-functions>", "AnswerCount": "5"}, "4826761": {"Id": "4826761", "PostTypeId": "2", "Body": "<p><a href=\"http://publib.boulder.ibm.com/infocenter/comphelp/v8v101/index.jsp?topic=%2Fcom.ibm.xlcpp8a.doc%2Flanguage%2Fref%2Fcplr028.htm\" rel=\"nofollow\">IBM implies</a> it works exactly like const functions.</p>\n", "LastActivityDate": "2011-01-28T09:44:14.040", "CommentCount": "0", "CreationDate": "2011-01-28T09:44:14.040", "ParentId": "4826719", "Score": "1", "OwnerUserId": "168175"}, "bq_ids": {"n4140": {"so_4826719_4826944_0": {"length": 14, "quality": 0.9333333333333333, "section_id": 5896}}, "n3337": {"so_4826719_4826944_0": {"length": 14, "quality": 0.9333333333333333, "section_id": 5668}}, "n4659": {"so_4826719_4826944_0": {"length": 14, "quality": 0.9333333333333333, "section_id": 7379}}}, "4826751": {"Id": "4826751", "PostTypeId": "2", "Body": "<p>Marking a member function <code>volatile</code> is like marking it <code>const</code>; it means that the receiver object is treated as though it were declared as a <code>volatile T*</code>.  Consequentially, any reference to <code>x</code> or <code>y</code> will be treated as a <code>volatile</code> read in the member function.  Moreover, a <code>volatile</code> object can only call <code>volatile</code> member functions.</p>\n<p>That said, you may want to mark <code>x</code> and <code>y</code> <code>volatile</code> anyway if you really do want all accesses to them to be treated as <code>volatile</code>.</p>\n", "LastEditorUserId": "501557", "LastActivityDate": "2011-01-28T09:58:12.493", "Score": "21", "CreationDate": "2011-01-28T09:43:36.930", "ParentId": "4826719", "CommentCount": "0", "OwnerUserId": "501557", "LastEditDate": "2011-01-28T09:58:12.493"}, "25653478": {"Id": "25653478", "PostTypeId": "2", "Body": "<p>So using the original example:</p>\n<pre><code>class MyClass\n{\n    int x, y;\n    void foo() volatile {\n        // do stuff with x\n        // do stuff with y\n        // with no \"non-volatile\" optimization of the stuff done with x, y (or anything else)\n    }   \n    void foo() {\n        // do stuff with x\n        // do stuff with y\n        // the stuff done with x, y (and anything else) may be optimized\n    } \n};\n</code></pre>\n", "LastActivityDate": "2014-09-03T20:54:31.663", "CommentCount": "0", "CreationDate": "2014-09-03T20:54:31.663", "ParentId": "4826719", "Score": "1", "OwnerUserId": "4005650"}, "4826944": {"Id": "4826944", "PostTypeId": "2", "Body": "<p>You <strong>don't</strong> have to declare the member variables explicitly..</p>\n<p>From Standard docs <em>9.3.2.3</em>,</p>\n<blockquote>\n<p id=\"so_4826719_4826944_0\">Similarly, <strong>volatile semantics</strong> (7.1.6.1) <strong>apply in volatile member functions when accessing the object and its nonstatic\n  data members.</strong></p>\n</blockquote>\n", "LastActivityDate": "2011-01-28T10:04:05.940", "CommentCount": "0", "CreationDate": "2011-01-28T10:04:05.940", "ParentId": "4826719", "Score": "6", "OwnerUserId": "249490"}, "4826755": {"Id": "4826755", "PostTypeId": "2", "Body": "<p>The following code:</p>\n<pre><code>#include &lt;iostream&gt;\n\nclass Bar\n{\n    public:\n\n        void test();\n};\n\nclass Foo\n{\n    public:\n\n        void test() volatile { x.test(); }\n\n    private:\n\n        Bar x;\n};\n\nint main()\n{\n    Foo foo;\n\n    foo.test();\n\n    return 0;\n}\n</code></pre>\n<p>Raises an error upon compilation with gcc:</p>\n<pre><code>main.cpp: In member function 'void Foo::test() volatile':\nmain.cpp:14:33: error: no matching function for call to 'Bar::test() volatile'\nmain.cpp:7:8: note: candidate is: void Bar::test() &lt;near match&gt;\n</code></pre>\n<p>And since a <code>volatile</code> instance can't call a <code>non-volatile</code> method, we can assume that, yes, <code>x</code> and <code>y</code> will be <code>volatile</code> in the method, even if the instance of <code>MyClass</code> is not declared <code>volatile</code>.</p>\n<p>Note: you can remove the <code>volatile</code> qualifier using a <code>const_cast&lt;&gt;</code> if you ever need to; however be careful because just like <code>const</code> doing so can lead to undefined behavior under some cases.</p>\n", "LastEditorUserId": "279259", "LastActivityDate": "2011-01-28T10:02:31.237", "Score": "4", "CreationDate": "2011-01-28T09:43:58.093", "ParentId": "4826719", "CommentCount": "6", "OwnerUserId": "279259", "LastEditDate": "2011-01-28T10:02:31.237"}});