post_cb({"28447047": {"ParentId": "28447030", "CommentCount": "0", "Body": "<p><code>true+1</code> is an integer arithmetic operation. <code>true</code> is converted to <code>1</code> and you get <code>2</code>.</p>\n", "OwnerUserId": "434551", "PostTypeId": "2", "Id": "28447047", "Score": "2", "CreationDate": "2015-02-11T05:12:54.103", "LastActivityDate": "2015-02-11T05:12:54.103"}, "28447030": {"CommentCount": "2", "ViewCount": "159", "CreationDate": "2015-02-11T05:11:07.813", "LastActivityDate": "2015-02-11T05:51:26.380", "Title": "C++: Why does bool arithmetic make sense?", "AcceptedAnswerId": "28447446", "PostTypeId": "1", "Id": "28447030", "Score": "0", "Body": "<p>For example, what on earth does true+1 means?\nIf it doesn't make sense, why doesn't my G++ raise an error even in -Wall mode?</p>\n", "Tags": "<c++>", "OwnerUserId": "3262785", "AnswerCount": "4"}, "28447049": {"ParentId": "28447030", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>From the standard:</p>\n<p>According to 4.7 (Integral conversions), </p>\n<blockquote>\n<p id=\"so_28447030_28447049_0\">4 If the destination type\n  is bool, If the source type is bool, <strong>the value false is\n  converted to zero and the value true is converted to one</strong>.</p>\n</blockquote>\n<p>In 4.12,</p>\n<blockquote>\n<p id=\"so_28447030_28447049_1\">An rvalue of arithmetic, enumeration, pointer, or pointer to member\n  type can be converted to an rvalue of type bool. A zero value, null\n  pointer value, or null member pointer value is converted to false; any\n  other value is converted to true.</p>\n</blockquote>\n<p>So <code>true + 1</code> means <code>1 + 1</code> and <code>false + 1</code> means <code>0 + 1</code>.</p>\n", "OwnerUserId": "418729", "LastEditorDisplayName": "user3920237", "LastEditDate": "2015-02-11T05:14:26.657", "Id": "28447049", "Score": "3", "CreationDate": "2015-02-11T05:13:02.220", "LastActivityDate": "2015-02-11T05:14:26.657"}, "28447446": {"ParentId": "28447030", "CommentCount": "0", "Body": "<p>In the declaration</p>\n<pre><code>bool x = true + 1;\n</code></pre>\n<p><code>true</code>is first promoted to <code>int</code>; then the addition produces 2; finally the 2 is converted to <code>true</code> by the rule that any basic type value <code>X</code> converts to <code>(X != 0)</code>.</p>\n<p>The above also covers update expressions such as <code>x += 1</code> when <code>x</code> is of type <code>bool</code>, because <code>+=</code> is <em>defined</em> in terms of <code>=</code> and <code>+</code>.</p>\n<p>However, the use of postfix or prefix <code>++</code> on <code>bool</code> is deprecated. And the use of postfix of prefix <code>--</code> is invalid. Quoting the <sup>1</sup>Holy Standard, \u201cthe operand shall not be of type <code>bool</code>.\u201d.</p>\n<p><hr>\n<sup><sup>1</sup>) C++11 \u00a75.3.2/2 in [expr.pre.incr] and \u00a75.2.6/2 in [expr.post.incr].</sup></hr></p>\n", "OwnerUserId": "464581", "PostTypeId": "2", "Id": "28447446", "Score": "1", "CreationDate": "2015-02-11T05:51:26.380", "LastActivityDate": "2015-02-11T05:51:26.380"}, "28447044": {"ParentId": "28447030", "CommentCount": "0", "Body": "<p>booleans are implicitly converted to ints in C++</p>\n", "OwnerUserId": "2252950", "PostTypeId": "2", "Id": "28447044", "Score": "1", "CreationDate": "2015-02-11T05:12:50.780", "LastActivityDate": "2015-02-11T05:12:50.780"}, "bq_ids": {"n4140": {"so_28447030_28447049_0": {"section_id": 33, "quality": 1.0, "length": 14}, "so_28447030_28447049_1": {"section_id": 44, "quality": 0.9259259259259259, "length": 25}}, "n3337": {"so_28447030_28447049_0": {"section_id": 30, "quality": 1.0, "length": 14}, "so_28447030_28447049_1": {"section_id": 41, "quality": 0.9259259259259259, "length": 25}}, "n4659": {"so_28447030_28447049_0": {"section_id": 33, "quality": 1.0, "length": 14}, "so_28447030_28447049_1": {"section_id": 45, "quality": 0.9259259259259259, "length": 25}}}});