post_cb({"47557493": {"ParentId": "27430640", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2017-11-29T16:30:53.883", "Score": "0", "LastEditorUserId": "1729784", "LastEditDate": "2017-12-01T01:14:08.987", "Id": "47557493", "OwnerUserId": "1729784", "Body": "<p>Add this</p>\n<pre><code>#define do(cond) switch (cond) do default:\n</code></pre>\n<p>at the beginning of your code.</p>\n<p>Now, you can write</p>\n<pre><code>do (int i = get_data()) \n{\n\n    // your code\n\n} while ((i = get_data()));\n</code></pre>\n<p>It is important that this <code>#define</code> does not break the original syntax of the <code>do</code> keyword in do-while loop.</p>\n<p>However, I admit that it is obscure.</p>\n", "LastActivityDate": "2017-12-01T01:14:08.987"}, "27430737": {"ParentId": "27430640", "CommentCount": "0", "CreationDate": "2014-12-11T19:21:33.363", "OwnerUserId": "2587908", "PostTypeId": "2", "Id": "27430737", "Score": "8", "Body": "<p>It would be very unnatural to have a declaration of <code>i</code> after the block and to then be able to access it in the block. Declaration in <code>for</code> and <code>while</code> are nice short-hands that give limited-scope use to a variable that is needed in the loop logic. </p>\n<p>Cleaner to do it this way:</p>\n<pre><code>int i;\ndo {\n  i = get_data();\n  // whatever you want to do with i;\n} while (i != 0);\n</code></pre>\n", "LastActivityDate": "2014-12-11T19:21:33.363"}, "27430680": {"ParentId": "27430640", "PostTypeId": "2", "CommentCount": "4", "CreationDate": "2014-12-11T19:18:21.333", "Score": "38", "LastEditorUserId": "85371", "LastEditDate": "2014-12-14T00:41:26.823", "Id": "27430680", "OwnerUserId": "1708801", "Body": "<p>It seems like scoping would be the issue, what would be the scope of <code>i</code> declared in the <code>while</code> portion of a <code>do while</code> statement? It would seem rather unnatural to have a variable available within the loop when the declaration is actually below the loop itself. You don't have this issue with the other loops since the declarations comes before the body of the loop.</p>\n<p>If we look at the <a href=\"https://github.com/cplusplus/draft/blob/master/papers/n4140.pdf\" rel=\"noreferrer\">draft C++ standard</a> we see from section <code>6.5.1</code> <em>The while statement</em> that for the <em>while statement</em> that:</p>\n<pre><code>while (T t = x) statement\n</code></pre>\n<p>is equivalent to:</p>\n<pre><code>label:\n{ // start of condition scope\n    T t = x;\n    if (t) {\n        statement\n    goto label;\n    }\n} // end of condition scope\n</code></pre>\n<p>and:</p>\n<blockquote>\n<p id=\"so_27430640_27430680_0\">The variable created in a condition is destroyed and created with each iteration of the loop.</p>\n</blockquote>\n<p>How would we formulate this for the <code>do while</code> case?</p>\n<p>and as cdhowie points out if we look at section <code>6.5.2</code> <em>The do statement</em> it says (<em>emphasis mine</em>):</p>\n<blockquote>\n<p id=\"so_27430640_27430680_1\">In the do statement the substatement is executed repeatedly until the\n  value of the expression becomes false. <strong>The test takes place after each\n  execution of the statement.</strong></p>\n</blockquote>\n<p>which means the body of the loop is evaluated before we would even reach the declaration.</p>\n<p>While we could create an exception for this case it would violate our intuitive sense that in general the point of declaration for a name is after we see the complete declaration(<em>with some exceptions for example class member variables</em>) with unclear benefits. <em>Point of declaration</em> is covered in section <code>3.3.2</code>.</p>\n", "LastActivityDate": "2014-12-14T00:41:26.823"}, "27430743": {"ParentId": "27430640", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2014-12-11T19:22:16.023", "Score": "20", "LastEditorUserId": "187690", "LastEditDate": "2014-12-12T04:50:09.957", "Id": "27430743", "OwnerUserId": "187690", "Body": "<p>There are several reasons for why it would be difficult to allow.</p>\n<p>The language sticks to the general rule that everything should be declared <em>above</em> the point of usage. In this case the variable declared in <code>do-while</code> would be declared <em>below</em> its expected natural scope (the cycle body). Making this variable accessible inside the cycle would've required a special treatment for <code>do-while</code> cycles. Even though we know examples of such special treatment (e.g. in-class member function bodies can see all class members, including the ones declared <em>below</em>), there's probably not much practical sense in doing it for <code>do-while</code> cycles.</p>\n<p>In case of <code>do-while</code> these special treatment rules would also require finding a meaningful way of handling initialization of variables declared in this fashion. Note that in C++ language the lifetime of such variable is limited to one iteration of the loop, i.e. the variable is created and destroyed on each iteration. That means that for <code>do-while</code> cycle the variable will always remain uninitialized, unless you introduce some rule that would somehow move the initialization to the <em>beginning</em> of the loop body. That would be quite confusing in my opinion.</p>\n", "LastActivityDate": "2014-12-12T04:50:09.957"}, "27444846": {"ParentId": "27430640", "CommentCount": "0", "CreationDate": "2014-12-12T13:37:05.343", "OwnerUserId": "383986", "PostTypeId": "2", "Id": "27444846", "Score": "5", "Body": "<p>This is because everything else follows the practice of declaring variables before you use them, eg:</p>\n<pre><code>public static void main(String[] args){ \n  // scope of args\n}\n\nfor(int i=1; i&lt;10; i++){\n  // scope of i\n}\n\n\n{\n...\nint somevar;\n//begin scope of var\n\n...\n\n//end of scope of var\n}\n</code></pre>\n<p>This is because things are parsed top down, and because following this convention keeps things intuitive, thus why you can declare a while(int var &lt; 10) because the scope of that var will be the area inside the loop, after the declaration.</p>\n<p>The do while doesn't make any sense to declare a variable because the scope would end at the same time it would be checked because that's when that block is finished.</p>\n", "LastActivityDate": "2014-12-12T13:37:05.343"}, "35446585": {"ParentId": "27430640", "CommentCount": "1", "CreationDate": "2016-02-17T02:02:25.870", "OwnerUserId": "5925700", "PostTypeId": "2", "Id": "35446585", "Score": "-2", "Body": "<p>Your first syntax is valid while the second is not.\nHowever, your while loop will loop forever, even if your function get_data() returns 0.\nNot sure if that's exactly what you want to happen.</p>\n", "LastActivityDate": "2016-02-17T02:02:25.870"}, "bq_ids": {"n4140": {"so_27430640_27430680_1": {"section_id": 3902, "quality": 0.9411764705882353, "length": 16}, "so_27430640_27430640_2": {"section_id": 3883, "quality": 0.75, "length": 6}, "so_27430640_27430640_4": {"section_id": 3895, "quality": 1.0, "length": 4}, "so_27430640_27430680_0": {"section_id": 3900, "quality": 0.8888888888888888, "length": 8}}, "n3337": {"so_27430640_27430680_1": {"section_id": 3762, "quality": 0.9411764705882353, "length": 16}, "so_27430640_27430640_2": {"section_id": 3743, "quality": 0.75, "length": 6}, "so_27430640_27430640_4": {"section_id": 3755, "quality": 1.0, "length": 4}, "so_27430640_27430680_0": {"section_id": 3760, "quality": 0.8888888888888888, "length": 8}}, "n4659": {"so_27430640_27430680_1": {"section_id": 4788, "quality": 0.9411764705882353, "length": 16}, "so_27430640_27430640_2": {"section_id": 4762, "quality": 0.875, "length": 7}, "so_27430640_27430640_4": {"section_id": 4782, "quality": 1.0, "length": 4}, "so_27430640_27430680_0": {"section_id": 4786, "quality": 0.8888888888888888, "length": 8}}}, "27430640": {"CommentCount": "5", "AcceptedAnswerId": "27430680", "PostTypeId": "1", "LastEditorUserId": "1708801", "CreationDate": "2014-12-11T19:15:16.310", "LastActivityDate": "2017-12-01T01:14:08.987", "LastEditDate": "2015-01-08T16:07:25.183", "ViewCount": "4902", "FavoriteCount": "4", "Title": "Why can't you declare a variable inside the expression portion of a do while loop?", "Id": "27430640", "Score": "32", "Body": "<p>The following syntax is valid:</p>\n<pre><code>while (int i = get_data())\n{\n}\n</code></pre>\n<p>But the following is not:</p>\n<pre><code>do\n{\n} while (int i = get_data());\n</code></pre>\n<p>We can see why via the draft standard:</p>\n<blockquote>\n<p id=\"so_27430640_27430640_0\"><code>[N4140/6.4]</code></p>\n<p id=\"so_27430640_27430640_1\"><code>1</code> [...]</p>\n<pre><em>condition</em>:\n     <em>expression</em>\n     <em>attribute-specifier-seq</em><sub>opt</sub> <em>decl-specifier-seq declarator</em> = <em>initializer-clause</em>\n     <em>attribute-specifier-seq</em><sub>opt</sub> <em>decl-specifier-seq declarator braced-init-list</em></pre>\n<p id=\"so_27430640_27430640_2\"><code>2</code> The rules for conditions apply both to <em>selection-statements</em> and\n  to the <code>for</code> and <code>while</code> statements (6.5). [...]</p>\n<p id=\"so_27430640_27430640_3\"><code>[N4140/6.5]</code></p>\n<p id=\"so_27430640_27430640_4\"><code>1</code> Iteration statements specify looping.</p>\n<pre>      <em>iteration-statement:</em> \n             <code>while</code> ( <em>condition</em> ) <em>statement</em>\n             <code>do</code> <em>statement</em> <code>while</code> ( <em>expression</em> ) ;</pre>\n</blockquote>\n<p>Instead, you're forced to do something ugly like:</p>\n<pre><code>int i = get_data();\ndo\n{\n} while ((i = get_data())); // double parentheses sic\n</code></pre>\n<p>What is the rationale for this?</p>\n", "Tags": "<c++><declaration><do-while>", "OwnerUserId": "4351360", "AnswerCount": "6"}});