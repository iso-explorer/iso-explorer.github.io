post_cb({"1447554": {"CommentCount": "0", "ViewCount": "1555", "CreationDate": "2009-09-19T02:36:11.417", "LastActivityDate": "2009-09-19T03:06:07.610", "Title": "Class constructor with non-argument template type", "AcceptedAnswerId": "1447560", "PostTypeId": "1", "Id": "1447554", "Score": "2", "Body": "<p>For a normal C++ function, it's possible to have template parameters not appearing in the argument list:</p>\n<pre><code>template&lt;typename T&gt;\nT default_construct()\n{\n    return T();\n}\n</code></pre>\n<p>and call this with</p>\n<pre><code>some_type x = default_construct&lt;some_type&gt;();\n</code></pre>\n<p>Even though the type I'm using is not in the argument list, I can still pass it to the function. Now, I want to do this in a class constructor:</p>\n<pre><code>struct Base;\n\ntemplate&lt;typename T&gt;\nBase* allocate()\n{\n    return new T; //Assume T derives from Base...\n}\n\nstruct factory {\n    template&lt;typename T&gt;\n    factory()\n        : func(allocate&lt;T&gt;)\n    {}\n\n    std::tr1::function&lt;Base*()&gt; func;\n};\n</code></pre>\n<p>but I can't find a way to supply the parameter to the constructor when I want to construct an instance of <code>factory</code>.</p>\n<p>Is there a way to do this <strong>without</strong> turning the class into a templated class or sending some unused <code>T</code> object to the constructor?</p>\n", "Tags": "<c++><templates>", "OwnerUserId": "30579", "AnswerCount": "3"}, "1447561": {"ParentId": "1447554", "CommentCount": "0", "Body": "<p>No, you can't.  The use of an unused object of a given type is called using a \"type tag object\".  You can either create globals of each type, or use the default constructor every time.</p>\n<p>You can reasonably hope that if the constructor is inlined, the type tag will never actually be created.</p>\n", "OwnerUserId": "123862", "PostTypeId": "2", "Id": "1447561", "Score": "3", "CreationDate": "2009-09-19T02:40:11.430", "LastActivityDate": "2009-09-19T02:40:11.430"}, "1447611": {"ParentId": "1447554", "CommentCount": "0", "Body": "<p>litb's and wrang-wrang's answers are good.  As one more possibility, you might consider declaring all your (non-copy-) constructors private or protected and creating one or more static member function templates <code>factory create&lt;T&gt;()</code>.  Then, to define a factory instance, instead of</p>\n<pre><code>factory&lt;SomeType&gt; f;                      // 1 (doesn't compile)\n</code></pre>\n<p>You would write</p>\n<pre><code>factory f(factory::create&lt;SomeType&gt;());   // 2\n</code></pre>\n<p>Clearly not as pretty as (1), but IMHO slightly clearer than using type tags.  (The compiler will eliminate the copy in practice.)</p>\n<p>BTW is there a reason why you could not simply make <code>factory</code> a class template?  Then the syntax from (1) would compile.  (It would mean however that factories of different types could not be assigned to one another.)</p>\n", "OwnerUserId": "47984", "PostTypeId": "2", "Id": "1447611", "Score": "0", "CreationDate": "2009-09-19T03:06:07.610", "LastActivityDate": "2009-09-19T03:06:07.610"}, "1447560": {"ParentId": "1447554", "CommentCount": "1", "Body": "<p>No, there is no way to do that. The note at <code>14.8.1/5</code> in the Standard explains why</p>\n<blockquote>\n<p id=\"so_1447554_1447560_0\">[Note: because the explicit template argument list follows the function template name, and because conversion member function templates and constructor member function templates are called without using a function name, there is no way to provide an explicit template argument list for these function templates. ]</p>\n</blockquote>\n<p>Of course, it doesn't need to be a <code>T</code> object you send. It can be any object that has <code>T</code> encoded in its type</p>\n<pre><code>template&lt;typename T&gt; struct type2type { };\n\nstruct factory {\n    template&lt;typename T&gt;\n    factory(type2type&lt;T&gt;)\n        : func(allocate&lt;T&gt;)\n    {}\n\n    std::tr1::function&lt;Base*()&gt; func;\n};\n\nfactory f((type2type&lt;Foo&gt;()));\n</code></pre>\n", "OwnerUserId": "34509", "PostTypeId": "2", "Id": "1447560", "Score": "9", "CreationDate": "2009-09-19T02:39:58.400", "LastActivityDate": "2009-09-19T02:39:58.400"}, "bq_ids": {"n4140": {"so_1447554_1447560_0": {"section_id": 114, "quality": 0.9375, "length": 30}}, "n3337": {"so_1447554_1447560_0": {"section_id": 109, "quality": 0.9375, "length": 30}}, "n4659": {"so_1447554_1447560_0": {"section_id": 118, "quality": 0.9375, "length": 30}}}});