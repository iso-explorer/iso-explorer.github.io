post_cb({"39423059": {"CommentCount": "0", "AcceptedAnswerId": "39423195", "LastEditDate": "2016-09-10T06:00:36.063", "LastEditorUserId": "908939", "CreationDate": "2016-09-10T05:54:53.123", "LastActivityDate": "2016-09-10T06:17:25.293", "PostTypeId": "1", "ViewCount": "231", "FavoriteCount": "1", "Title": "When do I use node_type with std::map::insert?", "Id": "39423059", "OwnerUserId": "908939", "Body": "<p>I'm accustomed to the existing interface of <code>std::map</code>.<br>\nInserting elements returns a bool describing successful insertion,<br>\nas well the iterator as to where the inserted element would be.</br></br></p>\n<pre><code>template&lt; class P &gt;\nstd::pair&lt;iterator,bool&gt; insert( P&amp;&amp; value ); //(since C++11)\n</code></pre>\n<p>C++17 adds what looks to be a similar call, but with different type names:  </p>\n<pre><code>insert_return_type insert(node_type&amp;&amp; nh);   //(since C++17)\n</code></pre>\n<p>I tried looking up what a <code>node_type</code> is, but it is primarily unspecified:  </p>\n<pre><code>template&lt;/*unspecified*/&gt;\nclass /*unspecified*/\n</code></pre>\n<p><strong>Why was this function added in C++17, and when would I use it over the older call?</strong></p>\n", "Tags": "<c++><stl><iterator><containers><c++1z>", "Score": "8", "AnswerCount": "2"}, "39423195": {"ParentId": "39423059", "CommentCount": "0", "Body": "<p>It's not just <code>std::map</code>, similar functions have been added to all associative and unordered associative containers. They are explained in the standard in <a href=\"http://eel.is/c++draft/container.node#overview-1\" rel=\"noreferrer\"><em>[container.node]/1</em></a></p>\n<blockquote>\n<p id=\"so_39423059_39423195_0\">A <em>node handle</em> is an object that accepts ownership of a single element from an associative container (23.2.4) or an unordered associative container (23.2.5). It may be used to transfer that ownership to another container\n  with compatible nodes. Containers with compatible nodes have the same node handle type. ...</p>\n</blockquote>\n<p>The table following the section above shows the containers with compatible nodes.</p>\n<p>What the node handle interface allows you to do is transfer elements (nodes) from one container to another (compatible) container without having to copy/move the elements. Instead, the individual internal nodes maintained by the container are transferred as a whole.</p>\n<p>This becomes necessary when dealing with a container that contains a non-copyable, non-moveable type.</p>\n", "OwnerUserId": "241631", "PostTypeId": "2", "Id": "39423195", "Score": "6", "CreationDate": "2016-09-10T06:17:25.293", "LastActivityDate": "2016-09-10T06:17:25.293"}, "39423182": {"ParentId": "39423059", "CommentCount": "0", "Body": "<p>You can obtain a node from a <code>std::map</code> using its <a href=\"http://en.cppreference.com/w/cpp/container/map/extract\" rel=\"nofollow\">extract()</a> function. Then you can put that node into another map (or into the same map after changing its key).</p>\n<blockquote>\n<pre><code>node_type extract(const_iterator position); (1)   (since C++17)\nnode_type extract(const key_type&amp; x);       (2)   (since C++17)\n</code></pre>\n<p id=\"so_39423059_39423182_0\">1) Unlinks the node that contains the element pointed to by position\n  and returns a node handle that owns it<br>\n  2) If the container has an\n  element with key equivalent to <code>x</code>, unlinks the node that contains\n  that element from the container and returns a node handle that owns\n  it. Otherwise, returns an empty node handle.</br></p>\n<p id=\"so_39423059_39423182_1\">In either case, no elements are copied or moved, only the internal\n  pointers of the container nodes are repointed (rebalancing may occur,\n  as with erase()) Extracting a node invalidates the iterators to the\n  extracted element. Pointers and references to the extracted element\n  remain valid, but cannot be used while element is owned by a node\n  handle: they become usable if the element is inserted into a\n  container.</p>\n<p id=\"so_39423059_39423182_2\">Example:</p>\n<pre><code>map&lt;int, string&gt; m{{1,\u201dmango\u201d}, {2,\u201dpapaya\u201d}, {3,\u201dguava\u201d}};\nauto nh = m.extract(2);\nnh.key() = 4;\nm.insert(move(nh));\n// m == {{1,\u201dmango\u201d}, {3,\u201dguava\u201d}, {4,\u201dpapaya\u201d}}\n</code></pre>\n</blockquote>\n", "OwnerUserId": "6394138", "PostTypeId": "2", "Id": "39423182", "Score": "4", "CreationDate": "2016-09-10T06:16:18.233", "LastActivityDate": "2016-09-10T06:16:18.233"}, "bq_ids": {"n4659": {"so_39423059_39423195_0": {"section_id": 766, "quality": 0.896551724137931, "length": 26}}}});