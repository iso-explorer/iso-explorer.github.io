post_cb({"10050863": {"CommentCount": "0", "CreationDate": "2012-04-07T01:10:16.227", "PostTypeId": "1", "AcceptedAnswerId": "10050911", "LastEditorUserId": "382818", "LastActivityDate": "2012-04-07T08:09:43.800", "LastEditDate": "2012-04-07T08:09:43.800", "ViewCount": "1952", "FavoriteCount": "4", "Title": "Scope resolution operator", "Id": "10050863", "Score": "32", "Body": "<p>I accidentally happened to find this in one of the source codes I was looking at. So, I'm giving a similar smaller example here.</p>\n<p>In the file <em>test.h</em>:</p>\n<pre><code>#include&lt;iostream&gt;\n\nclass test{\n    int i;\npublic:\n    test(){}\n    //More functions here\n};\n</code></pre>\n<p>In the file <em>test.cpp</em>:</p>\n<pre><code>#include \"test.h\"\n\nint main()\n{\n    test test1;\n    test::test test2;\n    test::test::test test3;\n    return 0;\n}\n</code></pre>\n<p>First of all, is there a reason to declare <code>test2</code> that way? Secondly, this code compiles just fine in g++ version 4.4.3 and lower versions. Is there something in the C++ standard, saying, scope resolution operators are ignored when there is no need to resolve scope?</p>\n", "Tags": "<c++><scope><g++>", "OwnerUserId": "579783", "AnswerCount": "2"}, "10050911": {"ParentId": "10050863", "CommentCount": "8", "Body": "<p>This code is not valid.</p>\n<p>It was a bug in g++ that it accepted the code.  See <a href=\"http://gcc.gnu.org/bugzilla/show_bug.cgi?id=11764\" rel=\"noreferrer\">\"g++ does not treat injected class name correctly.\"</a>  The bug was resolved as fixed in 2009, so it should be fixed in any recent version of g++.</p>\n", "OwnerUserId": "151292", "PostTypeId": "2", "Id": "10050911", "Score": "41", "CreationDate": "2012-04-07T01:19:47.070", "LastActivityDate": "2012-04-07T01:19:47.070"}, "10050964": {"ParentId": "10050863", "CommentCount": "3", "Body": "<p>To clarify the situation, as specified in \u00a79/2:</p>\n<blockquote>\n<p id=\"so_10050863_10050964_0\">A class-name is inserted into the scope in which it is declared immediately after the class-name is seen. The class-name is also inserted into the scope of the class itself; this is known as the injected-class-name. For purposes of access checking, the injected-class-name is treated as if it were a public member name.</p>\n</blockquote>\n<p>However, as specified in \u00a73.4.3.1/1: </p>\n<blockquote>\n<p id=\"so_10050863_10050964_1\">If the nested-name-specifier of a qualified-id nominates a class, the name specified after the nested-namespecifier is looked up in the scope of the class (10.2), except for the cases listed below.</p>\n<p id=\"so_10050863_10050964_2\">[ ... \u00a73.4.3.1/2]: </p>\n<p id=\"so_10050863_10050964_3\">In a lookup in which the constructor is an acceptable lookup result and the nested-name-specifier nominates a class C: </p>\n<p id=\"so_10050863_10050964_4\">\u2014 if the name specified after the nested-name-specifier, when looked up in C, is the injected-class-name of C (Clause 9) [ ... ] the name is instead considered to name the constructor of class C. </p>\n<p id=\"so_10050863_10050964_5\">[ ... example: ]</p>\n</blockquote>\n<pre><code>struct A { A(); };\n[ ... ]\nA::A a; // error, A::A is not a type name\nstruct A::A a2; // object of type A\n</code></pre>\n", "OwnerUserId": "179910", "PostTypeId": "2", "Id": "10050964", "Score": "16", "CreationDate": "2012-04-07T01:29:22.007", "LastActivityDate": "2012-04-07T01:29:22.007"}, "bq_ids": {"n4140": {"so_10050863_10050964_3": {"section_id": 7114, "quality": 0.625, "length": 5}, "so_10050863_10050964_1": {"section_id": 7113, "quality": 0.9375, "length": 15}, "so_10050863_10050964_4": {"section_id": 7114, "quality": 1.0, "length": 13}, "so_10050863_10050964_0": {"section_id": 5846, "quality": 0.9310344827586207, "length": 27}}, "n3337": {"so_10050863_10050964_3": {"section_id": 6858, "quality": 1.0, "length": 8}, "so_10050863_10050964_1": {"section_id": 6857, "quality": 0.9375, "length": 15}, "so_10050863_10050964_4": {"section_id": 6858, "quality": 1.0, "length": 13}, "so_10050863_10050964_0": {"section_id": 5616, "quality": 0.9310344827586207, "length": 27}}, "n4659": {"so_10050863_10050964_1": {"section_id": 8614, "quality": 0.9375, "length": 15}, "so_10050863_10050964_3": {"section_id": 8615, "quality": 0.625, "length": 5}, "so_10050863_10050964_4": {"section_id": 8615, "quality": 1.0, "length": 13}, "so_10050863_10050964_0": {"section_id": 7325, "quality": 0.9310344827586207, "length": 27}}}});