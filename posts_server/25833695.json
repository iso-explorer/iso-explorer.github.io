post_cb({"25833722": {"ParentId": "25833695", "PostTypeId": "2", "CommentCount": "6", "CreationDate": "2014-09-14T13:25:12.240", "Score": "7", "LastEditorUserId": "866732", "LastEditDate": "2014-09-14T13:44:06.027", "Id": "25833722", "OwnerUserId": "866732", "Body": "<p>Because pass by value requires a copy constructor in the first place.</p>\n<p>So to avoid infinite recursion, the pass by reference copy constructor has to be defined before the pass by value version if we really want to have a pass by value one. As it does not make much sense to have a pass by value copy constructor, the standard forbids it.</p>\n", "LastActivityDate": "2014-09-14T13:44:06.027"}, "25833695": {"CommentCount": "3", "ViewCount": "100", "ClosedDate": "2014-09-14T14:46:14.077", "CreationDate": "2014-09-14T13:22:04.267", "LastActivityDate": "2014-09-14T13:44:06.027", "Title": "Why is the argument to a copy ctor passed by reference?", "PostTypeId": "1", "Id": "25833695", "Score": "0", "Body": "<p>Why isn't the argument passed by value ?</p>\n<p>When I tried it, my compiler just gave me a message saying \"you probably meant <code>Foo(const Foo&amp;)</code> .\"</p>\n<p>What is the reason for this ?</p>\n", "Tags": "<c++><constructor><initialization><copy-constructor>", "OwnerUserId": "3834059", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_25833695_25833795_0": {"section_id": 455, "quality": 1.0, "length": 30}}, "n3337": {"so_25833695_25833795_0": {"section_id": 446, "quality": 1.0, "length": 30}}, "n4659": {"so_25833695_25833795_0": {"section_id": 478, "quality": 1.0, "length": 30}}}, "25833795": {"ParentId": "25833695", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2014-09-14T13:32:21.240", "Score": "5", "LastEditorUserId": "2756719", "LastEditDate": "2014-09-14T13:38:13.047", "Id": "25833795", "OwnerUserId": "2756719", "Body": "<p>You are simply not allowed to pass it by value - \u00a712.8 [class.copy]/p6 of the standard explicitly prohibits it :</p>\n<blockquote>\n<p id=\"so_25833695_25833795_0\">A declaration of a constructor for a class <code>X</code> is ill-formed if its\n  first parameter is of type (optionally cv-qualified) <code>X</code> and either\n  there are no other parameters or else all other parameters have\n  default arguments. A member function template is never instantiated to\n  produce such a constructor signature.</p>\n</blockquote>\n<p>The reason for this prohibition, as explained in the comments, is infinite recursion - \"to make a copy, you have to make a copy\" doesn't make much sense.</p>\n", "LastActivityDate": "2014-09-14T13:38:13.047"}});