post_cb({"24034296": {"ViewCount": "743", "Body": "<blockquote>\n<p id=\"so_24034296_24034296_0\"><strong>README</strong><br/><br/>\n  A <em>\"trap value\"</em>, or <em>\"trap representation\"</em> for type <code>T</code>, is a bit combination (of the underlying storage) that yields an invalid value of <code>T.</code> Trying to interpret the representation of an invalid value will cause <em>undefined behavior</em>.</p>\n</blockquote>\n<hr>\n<h2>Let the battle begin..</h2>\n<p>Another <a href=\"https://stackoverflow.com/q/24032322/1090079\">question</a> has started a heated discussion regarding <code>char</code>, and the possibility of an implementation having <a href=\"https://stackoverflow.com/questions/6725809/trap-representation/6725981#6725981\"><em>trap representations</em></a> for it.</p>\n<p><strong>Question</strong>:</p>\n<ul>\n<li>Can <code>char</code> possibly have trap values?</li>\n</ul>\n<hr>\n<h3>Quotes that has been mentioned in the previous discussion:</h3>\n<p>These sections are the most quoted ones during the previous argumentation, are they contradicting?</p>\n<blockquote>\n<p id=\"so_24034296_24034296_1\"><code>3.9.1p1</code> <strong>Fundamental types</strong> <code>[basic.fundamental]</code></p>\n<blockquote>\n<p id=\"so_24034296_24034296_6\">It is implementation-defined whether a <code>char</code> can hold negative values. Characters can be explicitly declared <code>signed</code> or <code>unsigned</code>.</p>\n<p id=\"so_24034296_24034296_7\">A <code>char,</code> a <code>signed char,</code> and an <code>unsigned char</code> occupy the same amount of storage and have the same alignment requirements (3.11); that is, they have the same object representation. For character types, all bits of the object representation participate in the value representation.</p>\n<p id=\"so_24034296_24034296_8\">For unsigned character types, all possible bit patterns of the value representation represent numbers. These requirements do not hold for other types.</p>\n<p id=\"so_24034296_24034296_9\">In any particular implementation, a plain <code>char</code> object can take on either the same values as a <code>signed char</code> or an <code>unsigned char;</code> which one is implementation-defined.</p>\n</blockquote>\n</blockquote>\n<p><sup></sup></p>\n<blockquote>\n<p id=\"so_24034296_24034296_10\">3.9p2 <strong>Types</strong> <code>[basic.types]</code></p>\n<blockquote>\n<p id=\"so_24034296_24034296_13\">For any object (other than a base-class subobject) of trivially copyable type <code>T,</code> whether or not the object holds a valid value of type <code>T</code>, the underlying bytes (1.7) making up the object can be copied into an array of <code>char</code> or <code>unsigned char.</code></p>\n<p id=\"so_24034296_24034296_14\">If the content of the array of <code>char</code> or <code>unsigned char</code> is copied back into the object, the object shall subsequently hold its original value.</p>\n</blockquote>\n</blockquote>\n</hr></hr>", "Title": "Can a plain `char` possibly have trap values?", "CreationDate": "2014-06-04T09:53:42.450", "LastActivityDate": "2014-06-05T05:17:41.487", "CommentCount": "5", "FavoriteCount": "3", "PostTypeId": "1", "LastEditDate": "2017-05-23T12:15:00.423", "LastEditorUserId": "-1", "Id": "24034296", "Score": "20", "OwnerUserId": "1090079", "Tags": "<c++><c++11><language-lawyer><c++14>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_24034296_24034296_9": {"length": 15, "quality": 0.9375, "section_id": 7210}, "so_24034296_24034296_12": {"length": 15, "quality": 1.0, "section_id": 7200}, "so_24034296_24034296_5": {"length": 15, "quality": 0.9375, "section_id": 7210}, "so_24034296_24034296_7": {"length": 27, "quality": 0.9310344827586207, "section_id": 7210}, "so_24034296_24034296_4": {"length": 15, "quality": 0.8823529411764706, "section_id": 7210}, "so_24034296_24034296_3": {"length": 27, "quality": 0.9310344827586207, "section_id": 7210}, "so_24034296_24034296_2": {"length": 12, "quality": 0.9230769230769231, "section_id": 7210}, "so_24034296_24034296_14": {"length": 15, "quality": 1.0, "section_id": 7200}, "so_24034296_24034296_13": {"length": 25, "quality": 0.9615384615384616, "section_id": 7200}, "so_24034296_24034296_11": {"length": 25, "quality": 0.9615384615384616, "section_id": 7200}, "so_24034296_24034296_8": {"length": 15, "quality": 0.8823529411764706, "section_id": 7210}, "so_24034296_24034296_6": {"length": 12, "quality": 0.9230769230769231, "section_id": 7210}}, "n3337": {"so_24034296_24034296_9": {"length": 15, "quality": 0.9375, "section_id": 6954}, "so_24034296_24034296_12": {"length": 15, "quality": 1.0, "section_id": 6944}, "so_24034296_24034296_5": {"length": 15, "quality": 0.9375, "section_id": 6954}, "so_24034296_24034296_7": {"length": 27, "quality": 0.9310344827586207, "section_id": 6954}, "so_24034296_24034296_4": {"length": 15, "quality": 0.8823529411764706, "section_id": 6954}, "so_24034296_24034296_3": {"length": 27, "quality": 0.9310344827586207, "section_id": 6954}, "so_24034296_24034296_2": {"length": 12, "quality": 0.9230769230769231, "section_id": 6954}, "so_24034296_24034296_14": {"length": 15, "quality": 1.0, "section_id": 6944}, "so_24034296_24034296_13": {"length": 25, "quality": 0.9615384615384616, "section_id": 6944}, "so_24034296_24034296_11": {"length": 25, "quality": 0.9615384615384616, "section_id": 6944}, "so_24034296_24034296_8": {"length": 15, "quality": 0.8823529411764706, "section_id": 6954}, "so_24034296_24034296_6": {"length": 12, "quality": 0.9230769230769231, "section_id": 6954}}, "n4659": {"so_24034296_24034296_9": {"length": 15, "quality": 0.9375, "section_id": 8719}, "so_24034296_24034296_12": {"length": 14, "quality": 0.9333333333333333, "section_id": 8709}, "so_24034296_24034296_5": {"length": 15, "quality": 0.9375, "section_id": 8719}, "so_24034296_24034296_7": {"length": 27, "quality": 0.9310344827586207, "section_id": 8719}, "so_24034296_24034296_4": {"length": 12, "quality": 0.7058823529411765, "section_id": 8719}, "so_24034296_24034296_3": {"length": 27, "quality": 0.9310344827586207, "section_id": 8719}, "so_24034296_24034296_2": {"length": 12, "quality": 0.9230769230769231, "section_id": 8719}, "so_24034296_24034296_14": {"length": 14, "quality": 0.9333333333333333, "section_id": 8709}, "so_24034296_24034296_13": {"length": 25, "quality": 0.9615384615384616, "section_id": 8709}, "so_24034296_24034296_11": {"length": 25, "quality": 0.9615384615384616, "section_id": 8709}, "so_24034296_24034296_8": {"length": 12, "quality": 0.7058823529411765, "section_id": 8719}, "so_24034296_24034296_6": {"length": 12, "quality": 0.9230769230769231, "section_id": 8719}}}, "24052128": {"Id": "24052128", "PostTypeId": "2", "Body": "<p>The standard tells us there must be:</p>\n<ul>\n<li>char, signed char, unsigned char, all the same size</li>\n<li>the sizeof(char) is 1</li>\n<li>char has at least 8 bits</li>\n<li>every bit combination is meaningful and valid</li>\n<li>array of char is packed (or behaves is if it is).</li>\n</ul>\n<p>There isn't much wiggle room.</p>\n<p>Nevertheless there are suggestions that during certain kinds of operations such as loading uninitialised memory or conversions as trap might occur.</p>\n<p>Yes, I think an implementation could have a trap representation where trap values could occur as a result of some kind of undefined or unspecified behaviour, including evaluating expressions that involve unspecified/uninitialised values. The actual bit pattern leading to a trap value would be invisible to the implementation.</p>\n<p>Such a CPU could have 9 bit bytes where only 8 bits are visible to the compiler and runtime, and the 9th bit is used to detect uninitialised memory, and will trigger a trap if loaded by (unprivileged) instructions.</p>\n", "LastActivityDate": "2014-06-05T05:17:41.487", "CommentCount": "3", "CreationDate": "2014-06-05T05:17:41.487", "ParentId": "24034296", "Score": "5", "OwnerUserId": "1105562"}});