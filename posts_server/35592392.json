post_cb({"bq_ids": {"n4140": {"so_35592392_35592630_0": {"length": 28, "quality": 0.9655172413793104, "section_id": 562}, "so_35592392_35592630_1": {"length": 18, "quality": 0.9473684210526315, "section_id": 579}}, "n3337": {"so_35592392_35592630_0": {"length": 28, "quality": 0.9655172413793104, "section_id": 553}, "so_35592392_35592630_1": {"length": 18, "quality": 0.9473684210526315, "section_id": 569}}, "n4659": {"so_35592392_35592630_0": {"length": 28, "quality": 0.9655172413793104, "section_id": 585}, "so_35592392_35592630_1": {"length": 18, "quality": 0.9473684210526315, "section_id": 602}}}, "35592542": {"Id": "35592542", "PostTypeId": "2", "Body": "<p>I think what you want is to be able to write <code>int i = m1 + m2;</code>, which means you should create a conversion operator.</p>\n<pre><code>class MyClass\n{\n    operator int()\n    {\n        return n;\n    }\n};\n\nint i = m1 + m2; //creates temporary, calls operator int, saves value in i\n</code></pre>\n<p>It will still create a temporary, but that's how <code>operator+</code> works. You could always write <code>int i = m1.getn() + m2.getn();</code>, too.</p>\n", "LastActivityDate": "2016-02-24T03:13:41.463", "CommentCount": "0", "CreationDate": "2016-02-24T03:13:41.463", "ParentId": "35592392", "Score": "2", "OwnerUserId": "4756309"}, "35592392": {"ViewCount": "53", "Body": "<p>I'm given to understand, thanks to the VC++ compiler, that you cannot overload functions with only a differing return type. </p>\n<pre><code>class MyClass {\npublic:\n    MyClass MyClass::operator+(MyClass other) {\n        return MyClass(n + other.getn());\n    }\n    MyClass() = default;\n    MyClass(int my_n) : n{ my_n } {}\n    int getn() {\n        return n;\n    }\nprivate:\n    int n{ 0 };\n};\n\nint main(){\n    MyClass m1(7), m2(5);\n    MyClass m3 = m1 + m2;\n    return 0;\n}\n</code></pre>\n<p>However, what if I would like to return an integer, say 12, when I add them, I cannot simply add them together and overload the operator+ again because it doesn't allow overloading where the only difference is the return type. I'm very new to C++. The only solution I could come up with is:</p>\n<pre><code>int i = (m1+m2).getn();\n</code></pre>\n<p>But that seems wasteful to create an instance when you will never use it again.</p>\n", "Title": "Overloading Multiple Functions with Same Parameters", "CreationDate": "2016-02-24T02:56:46.583", "LastActivityDate": "2016-02-24T03:28:40.360", "CommentCount": "2", "PostTypeId": "1", "Id": "35592392", "Score": "-2", "OwnerUserId": "3124409", "Tags": "<c++><operator-overloading><overloading><return-type>", "AnswerCount": "2"}, "35592630": {"Id": "35592630", "PostTypeId": "2", "Body": "<p>Overloading doesn't consider about return type.</p>\n<p>From the standard, $13.3/1 Overload resolution [over.match]</p>\n<blockquote>\n<p id=\"so_35592392_35592630_0\">The selection criteria for the best function are the number of arguments, how well the arguments\n  match the parameter-type-list of the candidate function, how well (for non-static member functions) the object matches the implicit object parameter, and certain other properties of the candidate function.</p>\n</blockquote>\n<p>and</p>\n<blockquote>\n<p id=\"so_35592392_35592630_1\">128) ... candidate call functions that cannot be differentiated one from the other by overload\n  resolution because they have identical declarations or differ only in their return type. </p>\n</blockquote>\n<p>You might want to provide two <code>operator+</code> for <code>MyClass</code>, they only differ at the return type of <code>MyClass</code> and <code>int</code>, and use them as</p>\n<pre><code>MyClass m1(7), m2(5);\nMyClass m3 = m1 + m2;\nint x = m1 + m2;\n</code></pre>\n<p>but the return value could be omitted, then which one should be invoked? It's ill-formed.</p>\n<pre><code>m1 + m2;\n// or m1.operator+(m2);\n</code></pre>\n<p>You could provide another named member function for it, such as</p>\n<pre><code>class MyClass { public:\n    int add_return_int(MyClass other) {\n        return n + other.getn();\n    }\n...\n</code></pre>\n<p>or as free function</p>\n<pre><code>int add_return_int(MyClass lhs, MyClass rhs) {\n    return lhs.getn() + rhs.getn();\n}\n</code></pre>\n", "LastEditorUserId": "3309790", "LastActivityDate": "2016-02-24T03:28:40.360", "Score": "0", "CreationDate": "2016-02-24T03:23:15.473", "ParentId": "35592392", "CommentCount": "0", "OwnerUserId": "3309790", "LastEditDate": "2016-02-24T03:28:40.360"}});