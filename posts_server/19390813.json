post_cb({"19390813": {"CommentCount": "4", "ViewCount": "180", "CreationDate": "2013-10-15T20:51:15.297", "LastActivityDate": "2013-10-15T21:46:19.657", "Title": "What does this mean \"!somePointer\"?", "AcceptedAnswerId": "19390822", "PostTypeId": "1", "Id": "19390813", "Score": "3", "Body": "<p>So reading some code, and there is a syntax I don't understand.</p>\n<p>The code is like this</p>\n<pre><code>int * aPtr = new int();\nif(!aPtr)               // this part I don't understand\n{\n //some code here\n}\n</code></pre>\n<p>I'm guessing the syntax is asking whether the pointer is pointing to null, but\nin most of the books I read, usually are stated like this </p>\n<pre><code>if(aPtr == NULL)\n{\n\n}\n</code></pre>\n", "Tags": "<c++><pointers>", "OwnerUserId": "2521501", "AnswerCount": "4"}, "19390826": {"ParentId": "19390813", "PostTypeId": "2", "CommentCount": "4", "CreationDate": "2013-10-15T20:52:12.243", "Score": "2", "LastEditorUserId": "701092", "LastEditDate": "2013-10-15T20:59:51.917", "Id": "19390826", "OwnerUserId": "701092", "Body": "<p><code>aptr</code> will be non-zero if it is something other than <code>nullptr</code>. It's basically a shorter way of saying:</p>\n<pre><code>if (aptr == nullptr)\n</code></pre>\n", "LastActivityDate": "2013-10-15T20:59:51.917"}, "19390822": {"ParentId": "19390813", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2013-10-15T20:51:56.000", "Score": "6", "LastEditorUserId": "952747", "LastEditDate": "2013-10-15T21:46:19.657", "Id": "19390822", "OwnerUserId": "952747", "Body": "<p>There're three important points in your question</p>\n<p>\u00a0</p>\n<h2>1. Is it null ?</h2>\n<p>A null pointer evaluates to zero:</p>\n<blockquote>\n<p id=\"so_19390813_19390822_0\">A null pointer constant is an integral constant expression (5.19)\n  prvalue of integer type that evaluates to <strong>zero</strong> ... (\u00a7 4.10 /1)</p>\n</blockquote>\n<p>So to check if a pointer is null or not, you can check it against <strong>zero</strong>.\nTraditional way (legacy from C) to check a variable against zero is</p>\n<pre><code>if (!var)  // if (var == 0)\n</code></pre>\n<hr>\n<p>\u00a0</p>\n<h2>2. What is macro <code>NULL</code>?</h2>\n<p>It is an integral constant expression which evaluates to zero, but.. forget using <code>NULL</code>, use <code>0</code> or <code>nullptr</code> instead. For more information read <a href=\"http://www.stroustrup.com/bs_faq2.html#null\" rel=\"nofollow\"><em>\"Should I use NULL or 0?\"</em></a></p>\n<hr>\n<p>\u00a0</p>\n<h2>3. How to check <code>new</code> failed or not?</h2>\n<blockquote>\n<p id=\"so_19390813_19390822_1\">... it is called by a placement\n  version of a new-expression when a C++ program prefers a null pointer\n  result as an error indication, instead of a bad_alloc exception.\n  (18.6.1.1 / 5)</p>\n</blockquote>\n<pre><code>int *aPtr = new int();\nif(!aPtr)\n</code></pre>\n<p>It seems you want to check whether <code>new</code> succeeded or failed. It's wrong, because if it fails it throws an exception and the program will not reach to the <code>if (!aPtr)</code>. Therefore, you should handle it by <code>try/catch</code>.</p>\n<p>Also, you can force compiler to stop throwing exception and return null instead. For this, you should try:</p>\n<pre><code>int* aPtr = new(std::nothrow) int();\n</code></pre>\n<p>\u00a0</p>\n</hr></hr>", "LastActivityDate": "2013-10-15T21:46:19.657"}, "19390994": {"ParentId": "19390813", "PostTypeId": "2", "CommentCount": "8", "CreationDate": "2013-10-15T21:01:19.437", "Score": "1", "LastEditorUserId": "2864275", "LastEditDate": "2013-10-15T21:42:30.203", "Id": "19390994", "OwnerUserId": "2864275", "Body": "<p>operator <code>!</code> negates its argument</p>\n<p>NULL value in most c++ compilers/libraries is defined as integer zero (0), which is not quite right, but anyway</p>\n<p>so operator ! negates integer value, and if this value is 0 (ie pointer is NULL) - then we have <code>true</code></p>\n<p>but in general case - it is bad practice to depend on this, you should compare with nullptr</p>\n<p>UPDATE: as per comments and standard - you can expect that NULL is evaluated as 0, so you can safely use <code>if (pointer)</code> or <code>if (!pointer)</code>, but I personally prefer to compare it with proper consts, as it then clearly seen that it is pointer and not just integral value</p>\n", "LastActivityDate": "2013-10-15T21:42:30.203"}, "bq_ids": {"n4140": {"so_19390813_19390822_1": {"section_id": 6816, "quality": 0.9333333333333333, "length": 14}}, "n3337": {"so_19390813_19390822_0": {"section_id": 36, "quality": 0.7692307692307693, "length": 10}, "so_19390813_19390822_1": {"section_id": 6571, "quality": 0.9333333333333333, "length": 14}}, "n4659": {"so_19390813_19390822_1": {"section_id": 8308, "quality": 0.9333333333333333, "length": 14}}}, "19390843": {"ParentId": "19390813", "CommentCount": "0", "CreationDate": "2013-10-15T20:53:10.520", "OwnerUserId": "1938828", "PostTypeId": "2", "Id": "19390843", "Score": "1", "Body": "<p>! is for logical NOT operator. when attached to a pointer, it returns true if the pointer is null.</p>\n", "LastActivityDate": "2013-10-15T20:53:10.520"}});