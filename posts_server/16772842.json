post_cb({"30695442": {"Id": "30695442", "PostTypeId": "2", "Body": "<p><strong>cerr</strong> does not require a buffer, so it is faster than the other ones and does not use the memory that <strong>cout</strong> uses, but because <strong>cout</strong> is buffered, it's more useful in some cases. So:</p>\n<ul>\n<li>Use <strong>cout</strong> for the standard output.</li>\n<li>Use <strong>cerr</strong> to show errors.</li>\n<li>Use <strong>clog</strong> for logging.</li>\n</ul>\n", "LastActivityDate": "2015-06-07T15:41:53.493", "Score": "9", "CreationDate": "2015-06-07T15:41:53.493", "ParentId": "16772842", "CommentCount": "0", "OwnerUserId": "4598461"}, "45616564": {"Id": "45616564", "PostTypeId": "2", "Body": "<p>Both <strong>cout</strong> and <strong>clog</strong> are buffered but <strong>cerr</strong> is un-buffered and all of these are predefined objects which are instances of class ostream.\nThe basic use of these three are <strong>cout</strong> is used for standard input whereas <strong>clog</strong> and <strong>cerr</strong> is used for showing errors.\nThe main point why <strong>cerr</strong> is un-buffered is may be because suppose you have several outputs in the buffer and an error exception is mentioned in the code then you need to display that error immediately which can be done by <strong>cerr</strong> effectively.</p>\n<p>Please correct me if I am wrong.</p>\n", "LastActivityDate": "2017-08-10T14:30:39.463", "Score": "0", "CreationDate": "2017-08-10T14:30:39.463", "ParentId": "16772842", "CommentCount": "0", "OwnerUserId": "7018546"}, "47048410": {"Id": "47048410", "PostTypeId": "2", "Body": "<p>The difference of these 3 streams is buffering. </p>\n<ol>\n<li>With cerr, the output flushs\n\n<ul>\n<li>immediately (because cerr does not use buffer). </li>\n</ul></li>\n<li>With clog, the output flushs \n\n<ul>\n<li>after you finish your current function.</li>\n<li>explicitly call the function flush. </li>\n</ul></li>\n<li>With cout, the output flushs \n\n<ul>\n<li>after you have call to any output streams (cout, cerr, clog).</li>\n<li>after you finish your current function.</li>\n<li>explicitly call the function flush. </li>\n</ul></li>\n</ol>\n<p>Please check the following code, and run DEBUG through 3 lines: f(std::clog), f(std::cerr), f(std::out), then open 3 output files to see what happened. You can swap these 3 lines to see what will happen. </p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;fstream&gt;\n#include &lt;string&gt;\n\nvoid f(std::ostream &amp;os)\n{\n    std::cin.clear(); // clear EOF flags\n    std::cin.seekg(0, std::cin.beg); // seek to begin\n\n    std::string line;\n    while(std::getline(std::cin, line))   //input from the file in.txt\n        os &lt;&lt; line &lt;&lt; \"\\n\";   //output to the file out.txt\n}\n\nvoid test()\n{\n    std::ifstream in(\"in.txt\");\n    std::ofstream out(\"out.txt\"), err(\"err.txt\"), log(\"log.txt\");\n    std::streambuf *cinbuf = std::cin.rdbuf(), *coutbuf = std::cout.rdbuf(), *cerrbuf = std::cerr.rdbuf(),\n                    *clogbuf = std::clog.rdbuf();\n\n    std::cin.rdbuf(in.rdbuf()); //redirect std::cin to in.txt!\n    std::cout.rdbuf(out.rdbuf()); //redirect std::cout to out.txt!\n    std::cerr.rdbuf(err.rdbuf());\n    std::clog.rdbuf(log.rdbuf());\n\n\n    f(std::clog);\n    f(std::cerr);\n    f(std::cout);\n\n    std::cin.rdbuf(cinbuf);\n    std::cout.rdbuf(coutbuf);\n    std::cerr.rdbuf(cerrbuf);\n    std::clog.rdbuf(clogbuf);\n}\n\nint main()\n{\n    test();\n    std::cout &lt;&lt; \"123\";\n}\n</code></pre>\n", "LastActivityDate": "2017-11-01T04:47:00.707", "Score": "1", "CreationDate": "2017-11-01T04:47:00.707", "ParentId": "16772842", "CommentCount": "0", "OwnerUserId": "8731081"}, "48987445": {"Id": "48987445", "PostTypeId": "2", "Body": "<p>From a draft C++17 standard document:</p>\n<blockquote>\n<p id=\"so_16772842_48987445_0\">30.4.3  Narrow stream objects  [narrow.stream.objects]</p>\n<p id=\"so_16772842_48987445_1\"><code>istream cin;</code></p>\n<p id=\"so_16772842_48987445_2\">1 The object <code>cin</code> controls input from a stream buffer associated with the object <code>stdin</code>, declared in <code>&lt;cstdio&gt;</code> (30.11.1).</p>\n<p id=\"so_16772842_48987445_3\">2 After the object <code>cin</code> is initialized, <code>cin.tie()</code> returns <code>&amp;cout</code>. Its state is otherwise the same as required for <code>basic_ios&lt;char&gt;::init</code> (30.5.5.2).</p>\n<p id=\"so_16772842_48987445_4\"><code>ostream cout;</code></p>\n<p id=\"so_16772842_48987445_5\">3 The object <code>cout</code> controls output to a stream buffer associated with the object <code>stdout</code>, declared in <code>&lt;cstdio&gt;</code> (30.11.1).</p>\n<p id=\"so_16772842_48987445_6\"><code>ostream cerr;</code></p>\n<p id=\"so_16772842_48987445_7\">4 The object <code>cerr</code> controls output to a stream buffer associated with the object <code>stderr</code>, declared in<code>&lt;cstdio&gt;</code> (30.11.1).</p>\n<p id=\"so_16772842_48987445_8\">5 After the object <code>cerr</code> is initialized, <code>cerr.flags() &amp; unitbuf</code> is nonzero and <code>cerr.tie()</code> returns <code>&amp;cout</code>. Its state is otherwise the same as required for <code>basic_ios&lt;char&gt;::init</code> (30.5.5.2).</p>\n<p id=\"so_16772842_48987445_9\"><code>ostream clog;</code></p>\n<p id=\"so_16772842_48987445_10\">6 The object <code>clog</code> controls output to a stream buffer associated with the object <code>stderr</code>, declared in <code>&lt;cstdio&gt;</code> (30.11.1).</p>\n</blockquote>\n<h2>Discussion...</h2>\n<p><strong><code>cout</code> writes to <code>stdout</code>; <code>cerr</code> and <code>clog</code> to <code>stderr</code></strong></p>\n<p>Standard Out (<code>stdout</code>) is intended to receive non-error, non-diagnostic output from the program, such as output from successful processing that can be displayed to the end-user or streamed into some further processing stage.</p>\n<p>Standard Error (<code>stderr</code>) is intended for diagnostic output, such as warning and error messages that indicate the program hasn't or may not have produced the output the user might expect.  This input may be displayed to the end user even if the output data is piped to a further processing stage. </p>\n<p><strong><code>cin</code> and <code>cerr</code> are tied to <code>cout</code></strong></p>\n<p>They both flush <code>cout</code> before handling I/O operations themselves.  This ensures prompts sent to <code>cout</code> are visible before the program blocks to read input from <code>cin</code>, and that earlier output to <code>cout</code> is flushed before writing an error through <code>cerr</code>, which keeps the messages in chronological order of their generation when both are directed to the same terminal/file/etc..</p>\n<p>This contrasts with <code>clog</code> - if you write there it won't be buffered and isn't tied to anything, so it will buffer decent sized amounts of logging before flushing.  This yields the highest throughput of messages, but means the messages may not be quickly visible to a would-be consumer reading the terminal or tailing the log.</p>\n", "LastActivityDate": "2018-02-26T11:28:21.583", "Score": "0", "CreationDate": "2018-02-26T11:28:21.583", "ParentId": "16772842", "CommentCount": "0", "OwnerUserId": "410767"}, "46303402": {"Id": "46303402", "PostTypeId": "2", "Body": "<p>cout is usually used to display some statements on user screen.\nex-\n:\ncout&lt;&lt;\"Arlene Batada\";</p>\n<p>output:</p>\n<p>Arlene Batada</p>\n", "LastActivityDate": "2017-09-19T14:43:11.993", "Score": "-2", "CreationDate": "2017-09-19T14:43:11.993", "ParentId": "16772842", "CommentCount": "4", "OwnerUserId": "8634618"}, "16772842": {"ViewCount": "39510", "Body": "<p>I tried researching the difference between <code>cout</code>, <code>cerr</code> and <code>clog</code> on the internet but couldn't find a perfect answer. I still am not clear on when to use which. Can anyone explain to me, through simple programs and illustrate a perfect situation on when to use which one?</p>\n<p>I visited <a href=\"http://www.tutorialspoint.com/cplusplus/cpp_basic_input_output.htm\" rel=\"noreferrer\">this site</a> which shows a small program on <code>cerr</code> and <code>clog</code>, but the output obtained over there can also be obtained using <code>cout</code>. So, I'm confused over each one's exact use.</p>\n", "AcceptedAnswerId": "16773043", "Title": "What is the difference between cout, cerr, clog of iostream header in c++? When to use which one?", "CreationDate": "2013-05-27T12:04:59.770", "LastActivityDate": "2018-02-26T11:28:21.583", "CommentCount": "1", "FavoriteCount": "28", "PostTypeId": "1", "LastEditDate": "2017-08-11T07:30:52.900", "LastEditorUserId": "7018546", "Id": "16772842", "Score": "55", "OwnerUserId": "2172349", "Tags": "<c++><iostream><cout><clog>", "AnswerCount": "8"}, "bq_ids": {"n4140": {"so_16772842_48987445_8": {"length": 15, "quality": 0.8823529411764706, "section_id": 1927}, "so_16772842_48987445_10": {"length": 11, "quality": 0.8461538461538461, "section_id": 1928}, "so_16772842_48987445_2": {"length": 11, "quality": 0.8461538461538461, "section_id": 1923}, "so_16772842_48987445_7": {"length": 10, "quality": 0.7692307692307693, "section_id": 1926}, "so_16772842_48987445_3": {"length": 12, "quality": 0.8571428571428571, "section_id": 1924}, "so_16772842_48987445_5": {"length": 11, "quality": 0.8461538461538461, "section_id": 1925}}, "n3337": {"so_16772842_48987445_8": {"length": 15, "quality": 0.8823529411764706, "section_id": 1916}, "so_16772842_48987445_2": {"length": 11, "quality": 0.8461538461538461, "section_id": 1912}, "so_16772842_48987445_10": {"length": 11, "quality": 0.8461538461538461, "section_id": 1917}, "so_16772842_48987445_7": {"length": 10, "quality": 0.7692307692307693, "section_id": 1915}, "so_16772842_48987445_3": {"length": 12, "quality": 0.8571428571428571, "section_id": 1913}, "so_16772842_48987445_5": {"length": 11, "quality": 0.8461538461538461, "section_id": 1914}}, "n4659": {"so_16772842_48987445_8": {"length": 15, "quality": 0.8823529411764706, "section_id": 2198}, "so_16772842_48987445_2": {"length": 11, "quality": 0.8461538461538461, "section_id": 2194}, "so_16772842_48987445_10": {"length": 11, "quality": 0.8461538461538461, "section_id": 2199}, "so_16772842_48987445_7": {"length": 10, "quality": 0.7692307692307693, "section_id": 2197}, "so_16772842_48987445_3": {"length": 12, "quality": 0.8571428571428571, "section_id": 2195}, "so_16772842_48987445_5": {"length": 11, "quality": 0.8461538461538461, "section_id": 2196}}}, "46169665": {"Id": "46169665", "PostTypeId": "2", "Body": "<p><strong>Standard output stream (cout):</strong>\n<code>cout</code> is the instance of the <code>ostream</code> class. <code>cout</code> is used to produce output on the standard output device which is usually the display screen. The data needed to be displayed on the screen is inserted in the standard output stream (<code>cout</code>) using the insertion operator (<code>&lt;&lt;</code>).</p>\n<p><strong>Un-buffered standard error stream (cerr):</strong> <code>cerr</code> is the standard error stream which is used to output the errors. This is also an instance of the <code>ostream</code> class. As <code>cerr</code> is <strong>un-buffered</strong> so it is used when we need to display the error message immediately. It does not have any buffer to store the error message and display later.</p>\n<p><strong>Buffered standard error stream (clog):</strong> This is also an instance of <code>ostream</code> class and used to display errors but unlike <code>cerr</code> the error is first inserted into a <strong>buffer</strong> and is stored in the buffer until it is not fully filled. </p>\n<p>further reading : <a href=\"http://www.geeksforgeeks.org/basic-input-output-c/\" rel=\"noreferrer\">basic-input-output-c</a></p>\n", "LastActivityDate": "2017-09-12T06:45:20.653", "Score": "5", "CreationDate": "2017-09-12T06:45:20.653", "ParentId": "16772842", "CommentCount": "0", "OwnerUserId": "5167682"}, "16773043": {"Id": "16773043", "PostTypeId": "2", "Body": "<p>stdout and stderr are different streams, even though they both refer to console output by default. Redirecting (piping) one of them (e.g. <code>program.exe &gt;out.txt</code>) would not affect the other.</p>\n<p>Generally, stdout should be used for actual program output, while all information and error messages should be printed to stderr, so that if the user redirects output to a file, information messages are still printed on the screen and not to the output file.</p>\n", "LastActivityDate": "2013-05-27T12:17:19.777", "Score": "38", "CreationDate": "2013-05-27T12:17:19.777", "ParentId": "16772842", "CommentCount": "1", "OwnerUserId": "1537403"}, "16772906": {"Id": "16772906", "PostTypeId": "2", "Body": "<p>Generally you use <code>std::cout</code> for normal output, <code>std::cerr</code> for errors, and <code>std::clog</code> for \"logging\" (which can mean whatever you want it to mean).</p>\n<p>The major difference is that <code>std::cerr</code> is not buffered like the other two.</p>\n<hr>\n<p>In relation to the old C <code>stdout</code> and <code>stderr</code>, <code>std::cout</code> corresponds to <code>stdout</code>, while <code>std::cerr</code> and <code>std::clog</code> both corresponds to <code>stderr</code> (except that <code>std::clog</code> is buffered).</p>\n</hr>", "LastActivityDate": "2013-05-27T12:09:18.963", "Score": "70", "CreationDate": "2013-05-27T12:09:18.963", "ParentId": "16772842", "CommentCount": "3", "OwnerUserId": "440558"}});