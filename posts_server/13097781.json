post_cb({"13097794": {"ParentId": "13097781", "CommentCount": "1", "Body": "<p>It is not necessary , that you set it to NULL\nIf you wont the array will be having garbage values</p>\n", "OwnerUserId": "824301", "PostTypeId": "2", "Id": "13097794", "Score": "0", "CreationDate": "2012-10-27T06:20:25.320", "LastActivityDate": "2012-10-27T06:20:25.320"}, "bq_ids": {"n4140": {"so_13097781_13097841_2": {"section_id": 3287, "quality": 0.5365853658536586, "length": 22}, "so_13097781_13097841_1": {"section_id": 3304, "quality": 0.9, "length": 9}, "so_13097781_13097841_0": {"section_id": 3304, "quality": 0.8, "length": 12}}, "n3337": {"so_13097781_13097841_2": {"section_id": 3157, "quality": 0.7317073170731707, "length": 30}, "so_13097781_13097841_1": {"section_id": 3174, "quality": 0.9, "length": 9}, "so_13097781_13097841_0": {"section_id": 3174, "quality": 0.8, "length": 12}}, "n4659": {"so_13097781_13097841_2": {"section_id": 4049, "quality": 0.5121951219512195, "length": 21}, "so_13097781_13097841_1": {"section_id": 4070, "quality": 0.9, "length": 9}, "so_13097781_13097841_0": {"section_id": 4070, "quality": 0.6666666666666666, "length": 10}}}, "13097781": {"CommentCount": "2", "AcceptedAnswerId": "13097841", "CreationDate": "2012-10-27T06:16:38.923", "LastActivityDate": "2012-10-27T06:29:12.663", "PostTypeId": "1", "ViewCount": "136", "FavoriteCount": "1", "Title": "Is it C++ standard to set a whole array to NULL on this initializer method?", "Id": "13097781", "Score": "1", "Body": "<pre><code>class Foo {};\n\nint main()\n{\n   Foo *foo[500] = { NULL}; \n}\n</code></pre>\n<p>Regardless of O.S/compiler is it standard that the whole array will be set to <code>NULL</code>?</p>\n", "Tags": "<c++><arrays><standards>", "OwnerUserId": "1513286", "AnswerCount": "4"}, "13097841": {"ParentId": "13097781", "CommentCount": "4", "Body": "<p>Yes it is valid and guaranteed by the C++ Standard.</p>\n<p><strong>Reference:</strong></p>\n<p><strong>C++03 Standard 8.5.1 Aggregates</strong><br>\n<strong>Para 7:</strong> </br></p>\n<blockquote>\n<p id=\"so_13097781_13097841_0\">If there are fewer initializers in the list than there are members in the aggregate, then each member not explicitly initialized shall be <strong>value-initialized</strong> (8.5). \n  [Example:</p>\n<pre><code> struct S { int a; char* b; int c; };\n S ss = { 1, \"asdf\" };\n</code></pre>\n<p id=\"so_13097781_13097841_1\">initializes <code>ss.a</code> with <code>1</code>, <code>ss.b</code> with <code>\"asdf\"</code>, and <code>ss.c</code> with the value of an expression of the form <code>int()</code>, that is,<code>0</code>. ]</p>\n</blockquote>\n<p>Value Initialization is defined under:       </p>\n<p><strong>C++03 8.5 Initializers</strong><br>\n<strong>Para 5:</strong> </br></p>\n<blockquote>\n<p id=\"so_13097781_13097841_2\">To <strong>value-initialize</strong> an object of type T means:<br>\n  \u2014 if T is a class type (clause 9) with a user-declared constructor (12.1), then the default constructor for T is called (and the initialization is ill-formed if T has no accessible \n    default constructor);<br>\n  \u2014 if T is a non-union class type without a user-declared constructor, then every non-static \n    data member and base-class component of T is value-initialized;<br>\n  \u2014 if T is an array type, then each element is value-initialized;<br>\n  \u2014 otherwise, the object is zero-initialized  </br></br></br></br></p>\n</blockquote>\n", "OwnerUserId": "452307", "PostTypeId": "2", "Id": "13097841", "Score": "5", "CreationDate": "2012-10-27T06:25:15.110", "LastActivityDate": "2012-10-27T06:25:15.110"}, "13097801": {"ParentId": "13097781", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>\"Plain old C\" structures and aggregates which are initialized are fully initialized. That comes from C. The members which do not have an initializer are initialized to zero. (Whatever zero means for their type: null pointer, or 0.0 floating-point value).</p>\n<p>In C++, the members can be of class type with constructors.  Such members which have no initializer are initialized by their default constructors.</p>\n", "OwnerUserId": "1250772", "LastEditorUserId": "1250772", "LastEditDate": "2012-10-27T06:29:12.663", "Id": "13097801", "Score": "0", "CreationDate": "2012-10-27T06:20:59.797", "LastActivityDate": "2012-10-27T06:29:12.663"}, "13097825": {"ParentId": "13097781", "CommentCount": "1", "Body": "<p>If you mean the construct with a single <code>{NULL}</code> where you would have expected to see 500 <code>NULL</code>s, yes, that is valid.</p>\n<p>(Personally I make it a habit to end such lists with a comma <code>{NULL,}</code> to make it obvious that there are more implicit values, but that's just a matter of style.)</p>\n", "OwnerUserId": "1016716", "PostTypeId": "2", "Id": "13097825", "Score": "1", "CreationDate": "2012-10-27T06:23:14.130", "LastActivityDate": "2012-10-27T06:23:14.130"}});