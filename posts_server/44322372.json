post_cb({"bq_ids": {"n4140": {"so_44322372_44323802_0": {"length": 13, "quality": 0.52, "section_id": 5999}}, "n3337": {"so_44322372_44323802_0": {"length": 13, "quality": 0.52, "section_id": 5767}}, "n4659": {"so_44322372_44323802_0": {"length": 23, "quality": 0.92, "section_id": 7500}}}, "44323802": {"Id": "44323802", "PostTypeId": "2", "Body": "<p>Technically, this is a type cast. The phrase used in the standard to describe the syntax is \"Explicit type conversion (functional notation)\". The description of the effect from the standard ([expr.type.conv]/2) is as follows:</p>\n<blockquote>\n<p id=\"so_44322372_44323802_0\">If the initializer is a parenthesized single expression, the type conversion expression is equivalent (in definedness,\n  and if defined in meaning) to the corresponding cast expression (8.4). [...] [T]he expression is a prvalue of the specified type whose result object is direct-initialized (11.6) with the initializer.</p>\n</blockquote>\n<p>In this case, you're starting with 'A' (a character literal), which already has type <code>char</code><sup>1</sup>, and casting it to <code>char</code> (so the cast has no effect and accomplishes nothing).</p>\n<p>If you did this for a type that had a constructor that took the correct argument type, the constructor for that type could be used to do the conversion. But that's also the case for other cast notations, such as using <code>(T)x</code> or <code>static_cast&lt;T&gt;(x)</code>. There's nothing about this syntax that makes it any more about using a ctor than any other other syntax that can do a conversion. Since you have made the conversion explicit, it can be used to invoke a ctor that's marked <code>explicit</code>, but other than that, it's not really any different (in terms of whether it uses a ctor or not) than just <code>T ch = value;</code> (without a cast, but possibly including a conversion anyway).</p>\n<hr>\n<p><sup>\n1. Note that this is one place that C++ differs from C. In C, a character literal has type <code>int</code>, not <code>char</code>.\n</sup></p>\n</hr>", "LastEditorUserId": "179910", "LastActivityDate": "2017-06-02T08:12:37.200", "Score": "11", "CreationDate": "2017-06-02T08:04:17.317", "ParentId": "44322372", "CommentCount": "2", "LastEditDate": "2017-06-02T08:12:37.200", "OwnerUserId": "179910"}, "44322694": {"Id": "44322694", "PostTypeId": "2", "Body": "<p>The statement:</p>\n<pre><code> char ch = char('A'); \n</code></pre>\n<p>Is calling the <strong>constructor</strong> of <code>char</code> type which takes a <code>char</code>. It is not a function or any system call. In reality, for basic datatypes, it is not even a call and it's just a syntactic sugar so that any type <code>T</code> can be initialized this way:</p>\n<pre><code>T var = T(arg);\n</code></pre>\n<p>And this approach comes useful and handy when writing template functions and classes. So, whenever type <code>T</code> (a template type parameter) comes in, the compiler wouldn't complain about <code>char(arg)</code> being invalid. </p>\n", "LastActivityDate": "2017-06-02T06:59:14.080", "Score": "4", "CreationDate": "2017-06-02T06:59:14.080", "ParentId": "44322372", "CommentCount": "3", "OwnerUserId": "264325"}, "44322372": {"ViewCount": "337", "Body": "<p>I have compiled and run the following code snippets in <code>GCC</code> compiler. It's successfully worked.</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n{\n    char ch = char('A'); \n    cout&lt;&lt;ch&lt;&lt;endl;\n    return 0;\n}\n</code></pre>\n<p><strong>Output:</strong></p>\n<pre><code>A\n</code></pre>\n<p>So, <strong>Is char() build-in type function or system call?</strong></p>\n", "AcceptedAnswerId": "44323802", "Title": "What is the char() type in C++?", "CreationDate": "2017-06-02T06:38:41.850", "Id": "44322372", "CommentCount": "2", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2017-06-03T06:01:10.803", "LastEditorUserId": "6935629", "LastActivityDate": "2017-06-03T06:01:10.803", "Score": "4", "OwnerUserId": "6935629", "Tags": "<c++><c++11><char><g++><c++14>", "AnswerCount": "3"}, "44322802": {"Id": "44322802", "PostTypeId": "2", "Body": "<p><code>char()</code> is a function <strong>type</strong> with no parameters, returning a <code>char</code>.</p>\n<p>The <code>char</code> is the default type for representing characters.</p>\n<p>It matters in contexts where types are expected. Other contexts are different, <strong>e.g.</strong> <code>char a = char();</code> <a href=\"https://stackoverflow.com/questions/34879454/what-is-the-difference-between-char-and-char-in-c\">value-initializes a.</a></p>\n", "LastEditorUserId": "6935629", "LastActivityDate": "2017-06-02T10:11:21.170", "Score": "-3", "CreationDate": "2017-06-02T07:05:26.047", "ParentId": "44322372", "CommentCount": "0", "LastEditDate": "2017-06-02T10:11:21.170", "OwnerUserId": "5478462"}});