post_cb({"5560415": {"ParentId": "5560363", "CommentCount": "0", "Body": "<p>This really has nothing to do with constructors; what you're seeing is a combination of default function arguments and value-initialization.</p>\n<p>The latter is described in the C++03 standard, \u00a78.5/5:</p>\n<blockquote>\n<p id=\"so_5560363_5560415_0\">To value-initialize an object of type T means:</p>\n<ul>\n<li>if T is a class type (clause 9) with a user-declared constructor (12.1), then the default constructor for T is called (and the initialization is ill-formed if T has no accessible default constructor);</li>\n<li>if T is a non-union class type without a user-declared constructor, then every non-static data member and base-class component of T is value-initialized;</li>\n<li>if T is an array type, then each element is value-initialized;</li>\n<li>otherwise, the object is zero-initialized</li>\n</ul>\n</blockquote>\n<p>and</p>\n<blockquote>\n<p id=\"so_5560363_5560415_1\">To zero-initialize an object of type T means:</p>\n<ul>\n<li>if T is a scalar type (3.9), the object is set to the value of 0 (zero) converted to T;</li>\n<li>if T is a non-union class type, each nonstatic data member and each base-class subobject is zero-initialized;</li>\n<li>if T is a union type, the object\u2019s first named data member89) is zero-initialized;</li>\n<li>if T is an array type, each element is zero-initialized;</li>\n<li>if T is a reference type, no initialization is performed.</li>\n</ul>\n</blockquote>\n<p>And lastly, piecing it together, \u00a78.5/7:</p>\n<blockquote>\n<p id=\"so_5560363_5560415_2\">An object whose initializer is an empty set of parentheses, i.e., (), shall be value-initialized.</p>\n</blockquote>\n", "OwnerUserId": "636019", "PostTypeId": "2", "Id": "5560415", "Score": "3", "CreationDate": "2011-04-06T01:07:23.820", "LastActivityDate": "2011-04-06T01:07:23.820"}, "5560363": {"CommentCount": "4", "AcceptedAnswerId": "5560395", "PostTypeId": "1", "LastEditorUserId": "4987285", "CreationDate": "2011-04-06T00:57:18.593", "LastActivityDate": "2016-02-18T23:01:40.137", "LastEditDate": "2016-02-18T23:01:40.137", "ViewCount": "1922", "FavoriteCount": "2", "Title": "c++ template constructor initialization", "Id": "5560363", "Score": "4", "Body": "<pre><code>template&lt;class T&gt;\nclass Node\n{\n    public:\n    Node(Node&lt;T&gt;* next=NULL, T data=T()) : _next(next), _data(data)\n    {\n    } \n    Node&lt;T&gt;* _next;\n    T _data;\n};\n</code></pre>\n<p>I'm new to c++ template. For default parameters, is <code>T data = T()</code> the standard way to do it? Maybe <code>T data = 0</code> is ok too? </p>\n", "Tags": "<c++>", "OwnerUserId": "606769", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_5560363_5560415_1": {"section_id": 3285, "quality": 1.0, "length": 4}, "so_5560363_5560415_0": {"section_id": 3287, "quality": 1.0, "length": 4}, "so_5560363_5560415_2": {"section_id": 3290, "quality": 1.0, "length": 7}}, "n3337": {"so_5560363_5560415_1": {"section_id": 3155, "quality": 1.0, "length": 4}, "so_5560363_5560415_0": {"section_id": 3157, "quality": 1.0, "length": 4}, "so_5560363_5560415_2": {"section_id": 3160, "quality": 1.0, "length": 7}}, "n4659": {"so_5560363_5560415_2": {"section_id": 4052, "quality": 1.0, "length": 7}}}, "5560395": {"ParentId": "5560363", "CommentCount": "4", "Body": "<p>That's not \"constructor initialization\", that's a default parameter.  It allows the caller to provide fewer arguments than the function has, the unspecified arguments will take on the default value.</p>\n<p>Another way to do it would be:</p>\n<pre><code>template&lt;class T&gt;\nclass Node\n{\n    public:\n    Node(Node&lt;T&gt;* next, T data) : m_next(next), m_data(data) {} \n    Node(Node&lt;T&gt;* next) : m_next(next), m_data() {} \n    Node(void) : m_next(NULL), m_data() {} \n\n    Node&lt;T&gt;* m_next;\n    T m_data;\n};\n</code></pre>\n<p>Where using fewer than two arguments is also allowed, but calls different constructors (that have <em>almost</em> the same behavior).</p>\n<p>There are a number of advantages to using separate overloads:</p>\n<ul>\n<li>Doesn't require a copy-constructor, if the <code>data</code> parameter is always omitted.</li>\n<li>Doesn't require a default constructor, if the <code>data</code> parameter is always provided.</li>\n</ul>\n", "OwnerUserId": "103167", "PostTypeId": "2", "Id": "5560395", "Score": "6", "CreationDate": "2011-04-06T01:03:47.647", "LastActivityDate": "2011-04-06T01:03:47.647"}});