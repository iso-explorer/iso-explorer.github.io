post_cb({"28859452": {"CommentCount": "4", "ViewCount": "118", "CreationDate": "2015-03-04T16:19:09.093", "LastActivityDate": "2015-03-04T16:27:39.557", "Title": "Aggregate initialization of non-POD class types?", "AcceptedAnswerId": "28859535", "PostTypeId": "1", "Id": "28859452", "Score": "0", "Body": "<p>Is it legal to aggregate initialize non-POD class types in ISO C++?</p>\n<p>For example if we have a structure with a single method like this:</p>\n<pre><code>struct T\n{\n   operator double();\n\n   int a;\n\n   int b;\n} ;\n</code></pre>\n<p>And we initialize an instance of it:</p>\n<pre><code>T tObj { 56, 92 };\n</code></pre>\n<p>using aggregate initialization. Is this legal?</p>\n<p>Under Clang 3.7 it compiles fine although in VC++ 15 CTP 3 it doesn't.</p>\n<p>Any insights on the question and a quote from the standard please?</p>\n", "Tags": "<c++><initialization><iso>", "OwnerUserId": "4031604", "AnswerCount": "1"}, "28859535": {"ParentId": "28859452", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>You can aggregate-initialise any aggregate, whether or not it's POD. C++11 defines an aggregate thusly:</p>\n<blockquote>\n<p id=\"so_28859452_28859535_0\">[dcl.init.aggr] An <em>aggregate</em> is an array or a class with no user-provided constructors, no brace-or-equal-initializers for non-static data members, no private or protected non-static data members, no base classes, and no virtual functions</p>\n</blockquote>\n<p>and your class meets that description.</p>\n<p>C++14 relaxes the restrictions on aggregates, removing \"no brace-or-equal-initializers for non-static data members\"; that doesn't affect this question.</p>\n<p>Note that your class is also POD; simply having a member function doesn't disqualify it. But being POD is largely unrelated to whether or not it's an aggregate.</p>\n", "OwnerUserId": "204847", "LastEditorUserId": "204847", "LastEditDate": "2015-03-04T16:27:39.557", "Id": "28859535", "Score": "2", "CreationDate": "2015-03-04T16:22:22.463", "LastActivityDate": "2015-03-04T16:27:39.557"}, "bq_ids": {"n4140": {"so_28859452_28859535_0": {"section_id": 3298, "quality": 0.6842105263157895, "length": 13}}, "n3337": {"so_28859452_28859535_0": {"section_id": 3168, "quality": 0.8947368421052632, "length": 17}}, "n4659": {"so_28859452_28859535_0": {"section_id": 4063, "quality": 0.5263157894736842, "length": 10}}}});