post_cb({"5013739": {"Id": "5013739", "PostTypeId": "2", "Body": "<p>I don't the precise location off the top of my head, but I do recall reading through the specs and finding that any private data in a class is hidden from all other classes, including nested classes.</p>\n<p>Basically, nesting a class defines a certain scope, not access priviledges.</p>\n", "LastActivityDate": "2011-02-16T07:40:35.300", "CommentCount": "2", "CreationDate": "2011-02-16T07:40:35.300", "ParentId": "5013717", "Score": "3", "OwnerUserId": "616815"}, "5013781": {"Id": "5013781", "PostTypeId": "2", "Body": "<p><strong>This answer pertains to the (outdated) C++03 specification.</strong> The accepted answer at this question is more up to date.</p>\n<p>Well, I feel silly for asking this question now because I just found the relevant part of the spec that covers this: \u00a711.8/1:</p>\n<blockquote>\n<p id=\"so_5013717_5013781_0\"><strong>The members of a nested class have no special access to members of an enclosing class, nor to classes or functions that have granted friendship to an enclosing class; the usual access rules (clause 11) shall be obeyed.</strong> The members of an enclosing class have no special access to members of a nested class; the usual access rules (clause 11) shall be obeyed</p>\n</blockquote>\n<p>(My emphasis)</p>\n<p>So it looks like no, inner classes do not have special access privileges.</p>\n", "LastEditorUserId": "501557", "LastActivityDate": "2016-09-19T12:52:53.160", "Score": "3", "CreationDate": "2011-02-16T07:46:29.217", "ParentId": "5013717", "CommentCount": "4", "OwnerUserId": "501557", "LastEditDate": "2016-09-19T12:52:53.160"}, "5013717": {"ViewCount": "12253", "Body": "<p>If I define an inner class in C++, is it automatically a friend of the class that contains it?  For example, is this legal:</p>\n<pre><code>class Outer {\npublic:\n    class Inner {\n    public:\n        void mutateOuter(Outer&amp; o);\n    };\n\nprivate:\n    int value;\n};\n\nvoid Outer::Inner::mutateOuter(Outer&amp; o) {\n    o.value ++; // Legal?  Or not?\n}\n</code></pre>\n<p>I ask because on some compilers I've tried (VS2003) this code won't work, but I've heard at least anecdotally that it does work on some compilers.  I can't find a relevant section in the C++ spec about this, and if anyone can cite something specific that would say that it is or is not legal that would be great.</p>\n", "AcceptedAnswerId": "14759603", "Title": "Are inner classes in C++ automatically friends?", "CreationDate": "2011-02-16T07:37:05.057", "Id": "5013717", "CommentCount": "8", "FavoriteCount": "8", "PostTypeId": "1", "LastEditDate": "2015-08-07T14:37:53.770", "LastEditorUserId": "5640", "LastActivityDate": "2017-06-29T08:50:12.157", "Score": "57", "OwnerUserId": "501557", "Tags": "<c++><friend><nested-class>", "AnswerCount": "5"}, "bq_ids": {"n4140": {"so_5013717_14759603_3": {"length": 9, "quality": 1.0, "section_id": 6665}, "so_5013717_5014618_1": {"length": 9, "quality": 1.0, "section_id": 6700}, "so_5013717_14759603_1": {"length": 22, "quality": 0.9565217391304348, "section_id": 6700}, "so_5013717_14759603_2": {"length": 4, "quality": 1.0, "section_id": 261}}, "n3337": {"so_5013717_14759603_3": {"length": 9, "quality": 1.0, "section_id": 6420}, "so_5013717_14759603_1": {"length": 22, "quality": 0.9565217391304348, "section_id": 6455}, "so_5013717_5014618_1": {"length": 9, "quality": 1.0, "section_id": 6455}, "so_5013717_14759603_2": {"length": 4, "quality": 1.0, "section_id": 252}}, "n4659": {"so_5013717_14759603_3": {"length": 9, "quality": 1.0, "section_id": 8140}, "so_5013717_14759603_1": {"length": 22, "quality": 0.9565217391304348, "section_id": 8174}, "so_5013717_5014618_1": {"length": 9, "quality": 1.0, "section_id": 8174}, "so_5013717_14759603_2": {"length": 4, "quality": 1.0, "section_id": 268}}}, "14759603": {"Id": "14759603", "PostTypeId": "2", "Body": "<p>After having asked more or less the same question <a href=\"https://stackoverflow.com/q/14758881/1984137\">here</a> myself, I wanted to share the (apparently) updated answer for C++11: </p>\n<p>Quoted from <a href=\"https://stackoverflow.com/a/14759027/1984137\">https://stackoverflow.com/a/14759027/1984137</a>:</p>\n<blockquote>\n<p id=\"so_5013717_14759603_0\">standard $11.7.1</p>\n<p id=\"so_5013717_14759603_1\">\"A nested class is a member and as such has the same access rights as\n  any other member. The members of an enclosing class have no special\n  access to members of a nested class; the usual access rules shall be\n  obeyed\"</p>\n<p id=\"so_5013717_14759603_2\">and the usual access rules specify that:</p>\n<p id=\"so_5013717_14759603_3\">\"A member of a class can also access all the names to which the class\n  has access...\"</p>\n<p id=\"so_5013717_14759603_4\">specific examples has been given in the standard:</p>\n</blockquote>\n<pre><code>class E {\n    int x;\n    class B { };\n\n    class I {\n        B b; // OK: E::I can access E::B\n        int y;\n        void f(E* p, int i) {\n            p-&gt;x = i; // OK: E::I can access E::x\n        }\n    };\n}\n</code></pre>\n", "LastEditorUserId": "-1", "LastActivityDate": "2013-02-07T19:41:22.750", "Score": "60", "CreationDate": "2013-02-07T19:41:22.750", "ParentId": "5013717", "CommentCount": "3", "OwnerUserId": "1984137", "LastEditDate": "2017-05-23T10:30:55.877"}, "5013735": {"Id": "5013735", "PostTypeId": "2", "Body": "<h1>Until C++11 (i.e C++98 and C++03)</h1>\n<p>In C++98 and C++03, nested class <strong>cannot</strong> access <code>private</code> and <code>protected</code> members of enclosing class by default.</p>\n<p>The C++ Standard (2003) says in $11.8/1 [class.access.nest],</p>\n<blockquote>\n<p id=\"so_5013717_5013735_0\"><strong>The members of a nested class have no\n  special access to members of an\n  enclosing class</strong>, nor to classes or\n  functions that have granted friendship\n  to an enclosing class; the usual\n  access rules (clause 11) shall be\n  obeyed. <strong>The members of an enclosing\n  class have no special access to\n  members of a nested class;</strong> the usual\n  access rules (clause 11) shall be\n  obeyed.</p>\n</blockquote>\n<p>Example from the Standard itself:</p>\n<pre><code>class E \n{\n    int x;\n    class B { };\n    class I \n    {\n        B b; // error: E::B is private\n        int y;\n        void f(E* p, int i)\n        {\n           p-&gt;x = i; // error: E::x is private\n        }\n   };\n   int g(I* p)\n   {\n       return p-&gt;y; // error: I::y is private\n   }\n};\n</code></pre>\n<h1>Since C++11</h1>\n<p>The above restriction has been removed since C++11. Now the nested classes <strong>can</strong> access the <code>private</code> and <code>protected</code> members of the enclosing class:</p>\n<pre><code>class E \n{\n    int x;\n    class B { };\n    class I \n    {\n        B b; // ok: even though E::B is private\n        int y;\n        void f(E* p, int i)\n        {\n           p-&gt;x = i; // ok: even though E::x is private\n        }\n   };\n   int g(I* p)\n   {\n       return p-&gt;y; // ok: even though I::y is private\n   }\n};\n</code></pre>\n<p>Hope that helps.</p>\n", "LastEditorUserId": "415784", "LastActivityDate": "2017-06-29T08:50:12.157", "Score": "33", "CreationDate": "2011-02-16T07:40:21.620", "ParentId": "5013717", "CommentCount": "4", "OwnerUserId": "415784", "LastEditDate": "2017-06-29T08:50:12.157"}, "5014618": {"Id": "5014618", "PostTypeId": "2", "Body": "<p>Since the questioner seems to have accepted one of the answer, this is just\na supplementation.<br>\nThe standard seems to have changed the specification about the accessibility.</br></p>\n<p>\u00a711.8/1 in C++98 states:</p>\n<blockquote>\n<p id=\"so_5013717_5014618_0\">The members of a nested class have no\n  special access to members of an\n  enclosing class, nor to classes or\n  functions that have granted friendship\n  to an enclosing class; the usual\n  access rules shall be obeyed.</p>\n</blockquote>\n<p>\u00a711.8/1 in N1804(after TR1) states:</p>\n<blockquote>\n<p id=\"so_5013717_5014618_1\">A nested class is a member and as such\n  has the same access rights as any\n  other member.</p>\n</blockquote>\n<p>I think current C++ compilers obey newer specification.</p>\n", "LastEditorUserId": "547710", "LastActivityDate": "2011-02-16T09:40:32.360", "Score": "16", "CreationDate": "2011-02-16T09:23:05.527", "ParentId": "5013717", "CommentCount": "6", "OwnerUserId": "547710", "LastEditDate": "2011-02-16T09:40:32.360"}});