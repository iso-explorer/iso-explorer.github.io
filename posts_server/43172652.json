post_cb({"bq_ids": {"n4140": {"so_43172652_43174512_1": {"length": 13, "quality": 1.0, "section_id": 5425}, "so_43172652_43174512_2": {"length": 58, "quality": 0.9354838709677419, "section_id": 5908}, "so_43172652_43174512_0": {"length": 32, "quality": 0.9696969696969697, "section_id": 5417}}, "n3337": {"so_43172652_43174512_1": {"length": 13, "quality": 1.0, "section_id": 5220}, "so_43172652_43174512_2": {"length": 58, "quality": 0.9354838709677419, "section_id": 5680}, "so_43172652_43174512_0": {"length": 27, "quality": 0.8181818181818182, "section_id": 5212}}, "n4659": {"so_43172652_43174512_1": {"length": 13, "quality": 1.0, "section_id": 6847}, "so_43172652_43174512_0": {"length": 26, "quality": 0.7878787878787878, "section_id": 6839}}}, "43174512": {"Id": "43174512", "PostTypeId": "2", "Body": "<h3>The Right Way</h3>\n<p>Before we begin the language-lawyering, the correct approach is to do it the other way around.  In the header file:</p>\n<pre><code>class Foo\n{\n     static constexpr int IntArray[] = { 1, 2, 3, 4 };\n};\n</code></pre>\n<p>And then in a source file:</p>\n<pre><code>constexpr int Foo::IntArray[];\n</code></pre>\n<p>If you declare a <code>static constexpr</code> class data member in the class definition, you must initialize it then and there.  This is optional for <code>static const</code> data members.  If you use the <code>static constexpr</code> data member anywhere in the program, you must give a definition like the one above, in exactly one source file, with no initializer.</p>\n<h3>What the (Draft) Standard Says</h3>\n<p>The example code in the question is bad style, and apparently at least one compiler rejects it, but it does in fact seem to comply with the C++14 draft standard.  [<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3797.pdf#subsection.7.1.5\" rel=\"nofollow noreferrer\">dcl/constexpr</a>] says:</p>\n<blockquote>\n<p id=\"so_43172652_43174512_0\">The <code>constexpr</code> specifier shall be applied only to the definition of a variable or variable template, the declaration of a function or function template, or the declaration of a <code>static</code> data member of a literal type.  If any declaration of a function, function template, or variable template has a <code>constexpr</code> specifier, then all its declarations shall contain the <code>constexpr</code> specifier.</p>\n</blockquote>\n<p>Notice whose declarations are, by omission, <strong>not</strong> all required to contain the <code>constexpr</code> specifier.</p>\n<p>Later in the same section:</p>\n<blockquote>\n<p id=\"so_43172652_43174512_1\">A <code>constexpr</code> specifier used in an object declaration declares the object as <code>const</code>. Such an object shall have literal type and shall be initialized. [...]</p>\n</blockquote>\n<p>But see also [<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3797.pdf#subsection.9.4.2\" rel=\"nofollow noreferrer\">class.static.data</a>]:</p>\n<blockquote>\n<p id=\"so_43172652_43174512_2\">If a non-<code>volatile</code> <code>const</code> <code>static</code> data member is of integral or enumeration type, its declaration in the class definition can specify a <em>brace-or-equal-initializer</em> in which every <em>initializer-clause</em> that is an <em>assignment-expression</em> is a constant expression. A <code>static</code> data member of literal type can be declared in the class definition with the <code>constexpr</code> specifier; if so, its declaration shall specify a <em>brace-or-equal-initializer</em> in which every <em>initializer-clause</em> that is an <em>assignment-expression</em> is a constant expression. [Note: In both these cases, the member may appear in constant expressions. \u2014 end note ] The member shall still be defined in a namespace scope if it is odr-used in the program and the namespace scope definition shall not contain an initializer.</p>\n</blockquote>\n<p>In this context, the odr in \u201codr-used\u201d stands for the <em>one-definition-rule</em> and means \u201cwhose name appears as a potentially-evaluated expression.\u201d ([basic.def.odr])  The last sentence means that, if you declare, <code>static constexpr int foo = 0;</code> in the class definition, and you will later use it in an expression, such as <code>int x = MyClass::foo;</code>, then one and only one source file needs to have a line like <code>constexpr int MyClass::foo;</code> in it, so the linker knows which object file to put it in.</p>\n", "LastEditorUserId": "4474419", "LastActivityDate": "2017-04-02T23:18:20.547", "Score": "2", "CreationDate": "2017-04-02T23:08:56.013", "ParentId": "43172652", "CommentCount": "3", "OwnerUserId": "4474419", "LastEditDate": "2017-04-02T23:18:20.547"}, "43172652": {"ViewCount": "238", "Body": "<p>Example:\nIn header file:</p>\n<pre><code>class Foo\n{\n     static const int IntArray[];                         \n};\n</code></pre>\n<p>In source file:</p>\n<pre><code>constexpr int Foo::IntArray[] = { 1, 2, 3, 4 };\n</code></pre>\n<p>This compiles on g++ and allows me to put the initializer list in the source file in stead of the header. (if it were constexpr in the header the compiler requires immediate initialization in the header). While still allowing the array to be used in constexpr evaluations...</p>\n<p>Is this valid, portable C++ ?</p>\n", "AcceptedAnswerId": "43174512", "Title": "Static const declaration, constexpr definition of variable, valid c++?", "CreationDate": "2017-04-02T19:33:07.387", "Id": "43172652", "CommentCount": "6", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2017-04-02T23:18:20.547", "Score": "4", "OwnerUserId": "1320881", "Tags": "<c++>", "AnswerCount": "2"}, "43173033": {"Id": "43173033", "PostTypeId": "2", "Body": "<p>I doubt it's compliant. The declaration and definition are required to be identical AFAIK.</p>\n<p>It's certainly not portable. Although gcc, clang and microsoft cl 2017 accept it,</p>\n<p>ICC reports:</p>\n<pre><code>&lt;source&gt;(6): error: member \"Foo::IntArray\" (declared at line 3) was previously not declared constexpr\n  constexpr int Foo::IntArray[] = { 1, 2, 3, 4 };\n  ^\ncompilation aborted for &lt;source&gt; (code 2)\nCompiler exited with result code 2\n</code></pre>\n", "LastActivityDate": "2017-04-02T20:10:06.073", "CommentCount": "0", "CreationDate": "2017-04-02T20:10:06.073", "ParentId": "43172652", "Score": "4", "OwnerUserId": "2015579"}});