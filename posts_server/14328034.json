post_cb({"bq_ids": {"n4140": {"so_14328034_14328034_0": {"length": 6, "quality": 0.5454545454545454, "section_id": 22}, "so_14328034_14328143_0": {"length": 29, "quality": 1.0, "section_id": 6169}}, "n3337": {"so_14328034_14328034_0": {"length": 6, "quality": 0.5454545454545454, "section_id": 19}, "so_14328034_14328143_0": {"length": 29, "quality": 1.0, "section_id": 5930}}, "n4659": {"so_14328034_14328034_0": {"length": 6, "quality": 0.5454545454545454, "section_id": 22}, "so_14328034_14328143_0": {"length": 28, "quality": 0.9655172413793104, "section_id": 7667}}}, "14328034": {"ViewCount": "94", "Body": "<p>Below is one of the specializations of <a href=\"http://en.cppreference.com/w/cpp/types/common_type\" rel=\"nofollow\"><code>std::common_type</code></a>.</p>\n<pre><code>template &lt;class T, class U&gt;\nstruct common_type&lt;T, U&gt; {\n    typedef decltype(true ? declval&lt;T&gt;() : declval&lt;U&gt;()) type;\n};\n</code></pre>\n<p>My notion is that the conditional statement is unnecessary. If it's checking against <code>true</code>, won't the expression invariably resolve to <code>declval&lt;T&gt;()</code>? And if so, how does the returned typedef justify the definition...</p>\n<blockquote>\n<p id=\"so_14328034_14328034_0\">\"Determines the common type among all types <code>T...</code>, that is the type all <code>T...</code> can be implicitly converted to.\"</p>\n</blockquote>\n<p>Can someone please explain the conditional statement? Is it accurate that the check against <code>true</code> is superfluous, and that the condition will <em>always</em> resolve to the first operand? And if so, how does the type that is returned satisfy the definition?</p>\n", "AcceptedAnswerId": "14328143", "Title": "What is the point of this condition found in the implementation of std::common_type?", "CreationDate": "2013-01-14T22:35:33.897", "Id": "14328034", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2013-01-14T22:59:02.640", "Score": "3", "OwnerUserId": "701092", "Tags": "<c++>", "AnswerCount": "3"}, "14328143": {"Id": "14328143", "PostTypeId": "2", "Body": "<p>The ternary operator's type isn't just the type of the branch the compiler knows it has to take. It is the type which is common to both branches if there is such a type. If there is no such type, the compilation fails. The ternary operator is the only operator with the property that it converts to the common type of the expressions rather than to the result of an expression on two values. That is, the ternary operator is just abused to obtain the common type. The condition is immaterial, however.</p>\n<p>The relevant section in the standard is 5.16 [expr.cond] paragraph 3:</p>\n<blockquote>\n<p id=\"so_14328034_14328143_0\">Otherwise, if the second and third operand have different types and either has (possibly cv-qualified) class type, or if both are glvalues of the same value category and the same type except for cv-qualification, an attempt is made to convert each of those operands to the type of the other.</p>\n</blockquote>\n<p>Following the paragraph are the rules of how the common type is provided. The <em>otherwise</em> refers to the case that either the second or the third expression is  <em>throw-expression</em> or one or both of the second or the third expression have type <code>void</code>.</p>\n", "LastEditorUserId": "1120273", "LastActivityDate": "2013-01-14T22:47:38.603", "Score": "4", "CreationDate": "2013-01-14T22:42:29.910", "ParentId": "14328034", "CommentCount": "0", "OwnerUserId": "1120273", "LastEditDate": "2013-01-14T22:47:38.603"}, "14328367": {"Id": "14328367", "PostTypeId": "2", "Body": "<p>The other explanations are correct, but I thought a simple example program will show how the ternary operator works better:</p>\n<pre><code>int main() {\n    std::cout &lt;&lt; demangle(typeid(true ? 1 : 3.14).name()) &lt;&lt; std::endl;\n}\n</code></pre>\n<p>The above program on <a href=\"http://liveworkspace.org/code/4CT82W%245\" rel=\"nofollow\">liveworkspace</a> prints <code>double</code> although the second operand is an <code>int</code>. This is because the result of the ternary operator is the <em>common type</em> between the second and third operand (which in this case is <code>int</code> and <code>double</code>). When you apply <code>decltype</code> to this operator this is what you get.</p>\n", "LastActivityDate": "2013-01-14T22:59:02.640", "CommentCount": "3", "CreationDate": "2013-01-14T22:59:02.640", "ParentId": "14328034", "Score": "2", "OwnerUserId": "906773"}, "14328047": {"Id": "14328047", "PostTypeId": "2", "Body": "<p>The type of the ternary conditional expression <em>is</em> the common type of the two argument types. Hence the ternary expression can be used as a <em>definition</em> of the common type.</p>\n<p>Note that <code>decltype</code> doesn't evaluate its argument, and whether the condition is true or false is immaterial.</p>\n", "LastEditorUserId": "701092", "LastActivityDate": "2013-01-14T22:51:52.480", "Score": "6", "CreationDate": "2013-01-14T22:36:24.383", "ParentId": "14328034", "CommentCount": "1", "OwnerUserId": "596781", "LastEditDate": "2013-01-14T22:51:52.480"}});