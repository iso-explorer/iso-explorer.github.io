post_cb({"32243289": {"ParentId": "32240444", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>The result of dereferencing a pointer is an lvalue (and itself is an expression), thus <code>decltype(*this)</code> gives you type <code>S&amp;</code>:</p>\n<p>\u00a7 7.1.6.2 [dcl.type.simple]/p4:</p>\n<blockquote>\n<p id=\"so_32240444_32243289_0\">The type denoted by <code>decltype(e)</code> is defined as follows:</p>\n<p id=\"so_32240444_32243289_1\">\u2014 [...]</p>\n<p id=\"so_32240444_32243289_2\">\u2014 otherwise, if <code>e</code> is an lvalue, <code>decltype(e)</code> is <code>T&amp;</code>, where <code>T</code> is the type of <code>e</code>;</p>\n</blockquote>\n<p>To use it as an argument to <code>offsetof</code>, you'd need to remove a reference from a type obtained from the <code>decltype()</code> specifier:</p>\n<pre><code>offsetof(std::remove_reference&lt;decltype(*this)&gt;::type, i)\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/e80eb98d53edb9bd\" rel=\"nofollow\"><strong>DEMO</strong></a></p>\n", "OwnerUserId": "3953764", "LastEditorUserId": "3953764", "LastEditDate": "2015-08-27T18:18:52.637", "Id": "32243289", "Score": "6", "CreationDate": "2015-08-27T07:34:17.083", "LastActivityDate": "2015-08-27T18:18:52.637"}, "32240444": {"CommentCount": "0", "ViewCount": "259", "PostTypeId": "1", "LastEditorUserId": "1329652", "CreationDate": "2015-08-27T03:57:04.793", "LastActivityDate": "2015-08-27T18:18:52.637", "Title": "Can offsetof be used with a struct type obtained from decltype?", "AcceptedAnswerId": "32243289", "LastEditDate": "2015-08-27T04:03:10.800", "Id": "32240444", "Score": "4", "Body": "<p>Can <code>offsetof</code> be used with a type obtained through <code>decltype</code>? Is either of those cases valid C++11?</p>\n<pre><code>struct S {\n  int i;\n  int j { offsetof(decltype(*this), i) };  // case 1\n  S() : i(offsetof(decltype(*this), j)) {}; // case 2\n} inst1;\n\nint main() {\n  struct {\n    int i;\n    int j { offsetof(decltype(*this), i) }; // case 3\n  } inst2;\n  return 0;\n}\n</code></pre>\n<p>None of it compiles under Apple LLVM version 6.0 (clang-600.0.57) (based on LLVM 3.5svn), with the error</p>\n<pre><code>error: offsetof requires struct, union, or class type, \n'decltype(*this)' (aka '&lt;anonymous struct at ../qxjs3uu/main.cpp:4:4&gt; &amp;') invalid\n</code></pre>\n<p>It also seems to crash MSVC 19.00.23106.0(x86) with an internal error:</p>\n<pre><code>Compiled with  /EHsc /nologo /W4 /c\nmain.cpp\nmain.cpp(3): error C2062: type 'S &amp;' unexpected\n[...]\nmain.cpp(4): fatal error C1903: unable to recover from previous error(s); stopping compilation\nInternal Compiler Error in c:\\tools_root\\cl\\bin\\i386\\cl.exe.  You will be prompted to send an error report to Microsoft later.\n</code></pre>\n<p>Did I think of something that no test case writers thought of?</p>\n", "Tags": "<c++><c++11>", "OwnerUserId": "1329652", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_32240444_32243289_0": {"section_id": 5440, "quality": 0.8333333333333334, "length": 5}, "so_32240444_32243289_2": {"section_id": 5440, "quality": 1.0, "length": 5}}, "n3337": {"so_32240444_32243289_0": {"section_id": 5235, "quality": 0.8333333333333334, "length": 5}, "so_32240444_32243289_2": {"section_id": 5235, "quality": 1.0, "length": 5}}, "n4659": {"so_32240444_32243289_0": {"section_id": 6867, "quality": 0.8333333333333334, "length": 5}, "so_32240444_32243289_2": {"section_id": 6867, "quality": 1.0, "length": 5}}}, "32240791": {"ParentId": "32240444", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>They can be used together. Take the example:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;stddef.h&gt;\n\nint main()\n{\n  struct S {\n   int a;\n   int b;\n  };\n  S instance;\n  std::cout &lt;&lt; \"offset: \" &lt;&lt; offsetof(decltype(instance), b) &lt;&lt; \"\\n\";\n  return 0;\n}\n</code></pre>\n<p>Which prints offset: 4</p>\n<p>I think your problem stems from using decltype(*this), which I'm not sure will do what you're expecting according to 5.1.1 of the C++11 standard.</p>\n", "OwnerUserId": "52534", "LastEditorUserId": "52534", "LastEditDate": "2015-08-27T04:41:19.083", "Id": "32240791", "Score": "2", "CreationDate": "2015-08-27T04:33:51.337", "LastActivityDate": "2015-08-27T04:41:19.083"}});