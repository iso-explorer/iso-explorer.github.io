post_cb({"25690636": {"CommentCount": "13", "ViewCount": "754", "CreationDate": "2014-09-05T16:57:08.063", "LastActivityDate": "2014-09-05T17:06:30.827", "PostTypeId": "1", "AcceptedAnswerId": "25690637", "FavoriteCount": "4", "Title": "Is it valid to construct an `std::ostream` from a null buffer?", "Id": "25690636", "Score": "18", "Body": "<p>Consider the following:</p>\n<pre><code>std::ostream out(nullptr);\n</code></pre>\n<p>Is this legal and well-defined?</p>\n<hr>\n<p>How about if I now do:</p>\n<pre><code>out &lt;&lt; \"hello world\\n\";\n</code></pre>\n<p>Is this legal and well-defined? If so, presumably it's a no-op of sorts?</p>\n</hr>", "Tags": "<c++><c++11><std><iostream>", "OwnerUserId": "560648", "AnswerCount": "1"}, "25690637": {"ParentId": "25690636", "LastEditDate": "2017-05-23T12:00:01.803", "CommentCount": "1", "CreationDate": "2014-09-05T16:57:08.063", "OwnerUserId": "560648", "LastEditorUserId": "-1", "PostTypeId": "2", "Id": "25690637", "Score": "21", "Body": "<p>Yes, it is legal and well-defined to instantiate that stream. You can safely swap it with another stream, or give it a new pointer (this time to an extant buffer) at a later time. The output operation itself is indeed a no-op.</p>\n<p>Here's why:</p>\n<ol>\n<li><p>The construction has no non-null precondition, and has only this postcondition:</p>\n<blockquote>\n<p id=\"so_25690636_25690637_0\"><code>[C++11: 27.7.3.2/2]:</code> Postcondition: <code>rdbuf() == sb</code>.</p>\n</blockquote></li>\n<li><p>Interestingly, it makes an explicit point that no operation shall be performed on <code>sb</code> within the constructor:</p>\n<blockquote>\n<p id=\"so_25690636_25690637_1\"><code>[C++11: 27.7.3.2/4]:</code> Remarks: Does not perform any operations on <code>rdbuf()</code>.</p>\n</blockquote></li>\n<li><p>But note also:</p>\n<blockquote>\n<p id=\"so_25690636_25690637_2\"><code>[C++11: 27.7.3.2/1]:</code> Effects: Constructs an object of class <code>basic_ostream</code>, assigning initial values to the base class by calling <code>basic_ios&lt;charT,traits&gt;::init(sb)</code> (27.5.5.2).</p>\n</blockquote></li>\n<li><p>That <code>init(sb)</code> call has the effect of setting <code>badbit</code> on the stream when <code>sb</code> is NULL:</p>\n<blockquote>\n<p id=\"so_25690636_25690637_3\"><code>[C++11: 27.5.5.2/3]:</code> Postconditions: The postconditions of this function are indicated in Table 128.</p>\n<p id=\"so_25690636_25690637_4\"><code>[C++11: Table 128]:</code> <em>[..]</em> <code>rdstate()</code>: <code>goodbit</code> if <code>sb</code> is not a null pointer, otherwise\n  <code>badbit</code>. <em>[..]</em></p>\n</blockquote></li>\n<li><p>The output operation <em>would</em> result in actions equivalent to dereferencing a null pointer:</p>\n<blockquote>\n<p id=\"so_25690636_25690637_5\"><code>[C++11: 27.7.3.1/2]:</code> Two groups of member function signatures share common properties: the formatted output functions (or inserters) and the unformatted output functions. <strong>Both groups of output functions generate (or insert) output characters by actions equivalent to calling <code>rdbuf()-&gt;sputc(int_type)</code>.</strong> They may use other public members of <code>basic_ostream</code> except that they shall not invoke any virtual members of <code>rdbuf()</code> except <code>overflow()</code>, <code>xsputn()</code>, and <code>sync()</code>.</p>\n</blockquote>\n<p>except it never gets this far, because for <code>basic_ostream::sentry</code> construction:</p>\n<blockquote>\n<p id=\"so_25690636_25690637_6\"><code>[C++11: 27.7.3.4/3]:</code> If, after any preparation is completed, <code>os.good()</code> is <code>true</code>, <code>ok_ == true</code> otherwise, <code>ok_ == false</code>.</p>\n</blockquote>\n<p>and, for <code>explicit operator basic_ostream::sentry::bool() const;</code>:</p>\n<blockquote>\n<p id=\"so_25690636_25690637_7\"><code>[C++11: 27.7.3.4/5]:</code> Effects: Returns <code>ok_</code>.</p>\n</blockquote>\n<p>and:</p>\n<blockquote>\n<p id=\"so_25690636_25690637_8\"><code>[C++11: 27.7.3.7/1]:</code> Each unformatted output function begins execution by constructing an object of class <code>sentry</code>. If this object returns <code>true</code>, while converting to a value of type <code>bool</code>, the function endeavors to generate the requested output. <em>[..]</em></p>\n</blockquote>\n<p>\u2026the implication being that no output operation takes place at all when <code>badbit</code> is already set.</p></li>\n</ol>\n<p><a href=\"https://stackoverflow.com/a/6240980/560648\">This was also the case in C++03.</a></p>\n", "LastActivityDate": "2014-09-05T17:06:30.827"}, "bq_ids": {"n4140": {"so_25690636_25690637_4": {"section_id": 1993, "quality": 0.6666666666666666, "length": 6}, "so_25690636_25690637_1": {"section_id": 2177, "quality": 0.5714285714285714, "length": 4}, "so_25690636_25690637_5": {"section_id": 2266, "quality": 0.8478260869565217, "length": 39}, "so_25690636_25690637_6": {"section_id": 2278, "quality": 0.8333333333333334, "length": 10}, "so_25690636_25690637_8": {"section_id": 2308, "quality": 0.92, "length": 23}, "so_25690636_25690637_2": {"section_id": 2268, "quality": 0.7333333333333333, "length": 11}}, "n3337": {"so_25690636_25690637_4": {"section_id": 1981, "quality": 0.6666666666666666, "length": 6}, "so_25690636_25690637_1": {"section_id": 2165, "quality": 0.5714285714285714, "length": 4}, "so_25690636_25690637_5": {"section_id": 2254, "quality": 0.8478260869565217, "length": 39}, "so_25690636_25690637_6": {"section_id": 2266, "quality": 0.8333333333333334, "length": 10}, "so_25690636_25690637_8": {"section_id": 2296, "quality": 0.92, "length": 23}, "so_25690636_25690637_2": {"section_id": 2256, "quality": 0.7333333333333333, "length": 11}}, "n4659": {"so_25690636_25690637_1": {"section_id": 2450, "quality": 0.5714285714285714, "length": 4}, "so_25690636_25690637_5": {"section_id": 2539, "quality": 0.8478260869565217, "length": 39}, "so_25690636_25690637_6": {"section_id": 2551, "quality": 0.8333333333333334, "length": 10}, "so_25690636_25690637_8": {"section_id": 2582, "quality": 0.92, "length": 23}, "so_25690636_25690637_4": {"section_id": 2266, "quality": 0.6666666666666666, "length": 6}}}});