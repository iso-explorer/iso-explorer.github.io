post_cb({"12655337": {"Id": "12655337", "PostTypeId": "2", "Body": "<p>It is standard, even in the old C++ 98 version of the language:</p>\n<p><img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/KKGLL.png\"/></p>\n", "OwnerDisplayName": "user529758", "LastActivityDate": "2012-09-29T18:28:28.593", "Score": "18", "CreationDate": "2012-09-29T18:28:28.593", "ParentId": "12655284", "CommentCount": "0"}, "12655865": {"Id": "12655865", "PostTypeId": "2", "Body": "<p>Not really an answer (but comments are not well suited to code samples), more a reason why it's incredibly handy:</p>\n<pre><code>if (int* x = f()) {\n    std::cout &lt;&lt; *x &lt;&lt; \"\\n\";\n}\n</code></pre>\n<p>Whenever an API returns an \"option\" type (which also happens to have a boolean conversion available), this type of construct can be leveraged so that the variable is only accessible within a context where it is sensible to use its value. It's a really powerful idiom.</p>\n", "LastActivityDate": "2012-09-29T19:39:38.620", "CommentCount": "4", "CreationDate": "2012-09-29T19:39:38.620", "ParentId": "12655284", "Score": "13", "OwnerUserId": "147192"}, "12655284": {"ViewCount": "8969", "Body": "<p>I was just shocked, that this is allowed:</p>\n<pre><code>if( int* x = new int( 20 ) )\n{\n    std::cout &lt;&lt; *x &lt;&lt; \"!\\n\";\n    // delete x;\n}\nelse\n{\n    std::cout &lt;&lt; *x &lt;&lt; \"!!!\\n\";\n    // delete x;\n}\n// std:cout &lt;&lt; *x; // error - x is not defined in this scope\n</code></pre>\n<p>So, is this allowed by the standard or it's just a compiler extension?</p>\n<hr>\n<p><sub>P.S. As there were several comments about this - please <em>ignore</em> that this example is \"bad\" or dangerous. I know what. This is just the first thing, that came to my mind, as an example.</sub></p>\n</hr>", "AcceptedAnswerId": "12655339", "Title": "Defining a variable in the condition part of an if-statement?", "CreationDate": "2012-09-29T18:22:55.093", "Id": "12655284", "CommentCount": "11", "FavoriteCount": "8", "PostTypeId": "1", "LastEditDate": "2012-09-30T01:15:16.130", "LastEditorUserId": "435800", "LastActivityDate": "2013-04-17T02:30:27.643", "Score": "68", "OwnerUserId": "435800", "Tags": "<c++><variables><if-statement><standards>", "AnswerCount": "5"}, "12655339": {"Id": "12655339", "PostTypeId": "2", "Body": "<p>This is allowed by the specification, since C++98.</p>\n<p>From Section 6.4 \"Selection statements\":</p>\n<blockquote>\n<p id=\"so_12655284_12655339_0\">A name introduced by a declaration in a condition (either introduced by the type-specifier-seq or the declarator of the condition) is in scope from its point of declaration until the end of the substatements controlled by the condition.</p>\n</blockquote>\n<p>The following example is from the same section:</p>\n<pre><code>if (int x = f()) {\n    int x;    // ill-formed, redeclaration of x\n}\nelse {\n    int x;    // ill-formed, redeclaration of x\n}\n</code></pre>\n", "LastEditorUserId": "275567", "LastActivityDate": "2012-10-01T17:46:53.240", "Score": "69", "CreationDate": "2012-09-29T18:28:45.753", "ParentId": "12655284", "CommentCount": "1", "OwnerUserId": "275567", "LastEditDate": "2012-10-01T17:46:53.240"}, "16050426": {"Id": "16050426", "PostTypeId": "2", "Body": "<p>Here is an example demonstrating non typical use of a variable declared in an <em>if</em> condition.</p>\n<p>Type of variable is <code>int &amp;</code> which is both convertible to boolean and useable in the <em>then</em> and <em>else</em> branches.</p>\n<pre><code>#include &lt;string&gt;\n#include &lt;map&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nvector&lt;string&gt; names {\"john\", \"john\", \"jack\", \"john\", \"jack\"};\nnames.push_back(\"bill\"); // without this push_back, my g++ generated exe fails :-(\nmap&lt;string, int&gt; ages;\nint babies = 0;\nfor (const auto &amp; name : names) {\n    if (int &amp; age = ages[name]) {\n        cout &lt;&lt; name &lt;&lt; \" is already \" &lt;&lt; age++ &lt;&lt; \" year-old\" &lt;&lt; endl;\n    } else {\n        cout &lt;&lt; name &lt;&lt; \" was just born as baby #\" &lt;&lt; ++babies &lt;&lt; endl;\n        ++age;\n    }\n}\n</code></pre>\n<p>output is</p>\n<pre><code>john was just born as baby #1\njohn is already 1 year-old\njack was just born as baby #2\njohn is already 2 year-old\njack is already 1 year-old\nbill was just born as baby #3\n</code></pre>\n<p>Unfortunately, the variable in the condition may only be declared with the '=' declaration syntax.</p>\n<p>This rules out other possibly useful cases of types with an explicit constructor.</p>\n<p>For instance, next example using an <code>std::ifstream</code> won't compile ...</p>\n<pre><code>if (std::ifstream is (\"c:/tmp/input1.txt\")) { // won't compile!\n    std::cout &lt;&lt; \"true: \" &lt;&lt; is.rdbuf();\n} else {\n    is.open(\"c:/tmp/input2.txt\");\n    std::cout &lt;&lt; \"false: \" &lt;&lt; is.rdbuf();\n}\n</code></pre>\n", "LastActivityDate": "2013-04-17T02:30:27.643", "CommentCount": "0", "CreationDate": "2013-04-17T02:30:27.643", "ParentId": "12655284", "Score": "0", "OwnerUserId": "1661298"}, "bq_ids": {"n4140": {"so_12655284_12655339_0": {"length": 15, "quality": 0.8333333333333334, "section_id": 3884}}, "n3337": {"so_12655284_12655339_0": {"length": 16, "quality": 0.8888888888888888, "section_id": 3744}}, "n4659": {"so_12655284_12655339_0": {"length": 17, "quality": 0.9444444444444444, "section_id": 4763}}}, "12655330": {"Id": "12655330", "PostTypeId": "2", "Body": "<p>Definition of a variable in the conditional part of a <code>while</code>, <code>if</code>, and <code>switch</code> statement are standard. The relevant clause is 6.4 [stmt.select] paragraph 1 which defines the syntax for the condition.</p>\n<p>BTW, your use is pointless: if <code>new</code> fails it throws a <code>std::bad_alloc</code> exception.</p>\n", "LastEditorUserId": "1120273", "LastActivityDate": "2012-09-29T18:38:42.340", "Score": "7", "CreationDate": "2012-09-29T18:27:22.370", "ParentId": "12655284", "CommentCount": "2", "OwnerUserId": "1120273", "LastEditDate": "2012-09-29T18:38:42.340"}});