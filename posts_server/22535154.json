post_cb({"bq_ids": {"n4140": {"so_22535154_22535349_0": {"length": 15, "quality": 0.9375, "section_id": 5907}}, "n3337": {"so_22535154_22535349_0": {"length": 15, "quality": 0.9375, "section_id": 5679}}, "n4659": {"so_22535154_22535349_0": {"length": 13, "quality": 0.8125, "section_id": 7389}}}, "22535349": {"Id": "22535349", "PostTypeId": "2", "Body": "<p>C++11 9.4.2/2:</p>\n<blockquote>\n<p id=\"so_22535154_22535349_0\">The declaration of a static data member in its class definition is not a definition and may be of an incomplete type other than cv-qualified <code>void</code>.</p>\n</blockquote>\n", "LastActivityDate": "2014-03-20T14:02:18.287", "CommentCount": "4", "CreationDate": "2014-03-20T14:02:18.287", "ParentId": "22535154", "Score": "10", "OwnerUserId": "204847"}, "22535154": {"ViewCount": "193", "Body": "<p>Where specifically is this covered in the Standard? I found \u00a79.2/10: <code>Non-static (9.4) data members shall not have incomplete types. In particular, a class C shall not contain a non-static member of class C, but it can contain a pointer or reference to an object of class C.</code>, but this doesn't seem to directly support the issue at hand.</p>\n<pre><code>#include &lt;iostream&gt;\nstruct A{\n    int i;\n    static A a;\n};\n\nA A::a{10};\n\nint main() {\n    std::cout &lt;&lt; A::a.i &lt;&lt; '\\n';\n}\n</code></pre>\n", "AcceptedAnswerId": "22535349", "Title": "The Standard seems to support (the snippet below compiles) a static data member having the same type as the class itself", "CreationDate": "2014-03-20T13:55:25.863", "LastActivityDate": "2014-03-20T14:02:18.287", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "Tags": "<c++><c++11><static-members><language-lawyer>", "Id": "22535154", "Score": "7", "OwnerUserId": "2548699", "ClosedDate": "2014-03-20T19:49:11.027", "AnswerCount": "1"}});