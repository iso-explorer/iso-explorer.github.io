post_cb({"bq_ids": {"n4140": {"so_11794318_11795127_1": {"length": 14, "quality": 0.7777777777777778, "section_id": 391}, "so_11794318_11795127_2": {"length": 11, "quality": 0.9166666666666666, "section_id": 6032}}, "n3337": {"so_11794318_11795127_1": {"length": 14, "quality": 0.7777777777777778, "section_id": 382}, "so_11794318_11795127_2": {"length": 11, "quality": 0.9166666666666666, "section_id": 5800}}, "n4659": {"so_11794318_11795127_1": {"length": 14, "quality": 0.7777777777777778, "section_id": 408}, "so_11794318_11795127_2": {"length": 10, "quality": 0.8333333333333334, "section_id": 7531}}}, "11794387": {"Id": "11794387", "PostTypeId": "2", "Body": "<p>Adding an</p>\n<pre><code>operator void() {}\n</code></pre>\n<p>takes care of it.</p>\n", "LastActivityDate": "2012-08-03T10:58:23.483", "CommentCount": "0", "CreationDate": "2012-08-03T10:58:23.483", "ParentId": "11794318", "Score": "8", "OwnerUserId": "50079"}, "11794318": {"ViewCount": "335", "Body": "<p>I have this code and GCC prints \"what!?\". How can I avoid that, so that the void cast simply has the C meaning \"Ignore the lonely 'a;'\"?</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct A {\n  template&lt;typename T&gt;\n  operator T() { \n    std::cout &lt;&lt; \"what!?\";\n  }\n};\n\nint main() {\n  A a;\n  (void)a;\n}\n</code></pre>\n", "AcceptedAnswerId": "11795127", "Title": "How to avoid \"(void)a\" cast causing side-effects?", "CreationDate": "2012-08-03T10:54:02.910", "Id": "11794318", "CommentCount": "3", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2012-08-03T15:42:52.943", "Score": "12", "OwnerUserId": "34509", "Tags": "<c++><gcc><void>", "AnswerCount": "2"}, "11795127": {"Id": "11795127", "PostTypeId": "2", "Body": "<p>As you've observed, this is a <a href=\"http://gcc.gnu.org/bugzilla/show_bug.cgi?id=54165\">bug in gcc</a>.  The standard reads:</p>\n<blockquote>\n<p id=\"so_11794318_11795127_0\"><a class=\"post-tag\" href=\"/questions/tagged/c%2b%2b11\" rel=\"tag\" title=\"show questions tagged 'c++11'\">c++11</a></p>\n<h3>12.3.2 Conversion functions [class.conv.fct]</h3>\n<p id=\"so_11794318_11795127_1\">(1) A \n  conversion function is never used to convert a (possibly cv-quali\ufb01ed) object to [...] (possibly cv-quali\ufb01ed) void.<br/>\n  116) A conversion to void does not invoke any conversion function (5.2.9).</p>\n<h3>5.2.9 Static cast [expr.static.cast]</h3>\n<p id=\"so_11794318_11795127_2\">(6) Any expression can be explicitly converted to type cv void, in which case it becomes a discarded-value \n  expression (Clause 5).</p>\n</blockquote>\n<p>As a workaround, you could write:</p>\n<pre><code>a, void();\n</code></pre>\n<p>It's impossible to overload <code>operator,(void)</code> so there is zero chance of this invoking user-defined behaviour from a conformant implementation.</p>\n", "LastEditorUserId": "567292", "LastActivityDate": "2012-08-03T15:42:52.943", "Score": "10", "CreationDate": "2012-08-03T11:47:31.497", "ParentId": "11794318", "CommentCount": "3", "OwnerUserId": "567292", "LastEditDate": "2012-08-03T15:42:52.943"}});