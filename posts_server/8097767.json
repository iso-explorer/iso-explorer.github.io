post_cb({"8097767": {"CommentCount": "0", "AcceptedAnswerId": "8098362", "PostTypeId": "1", "LastEditorUserId": "305885", "CreationDate": "2011-11-11T17:33:44.813", "LastActivityDate": "2011-11-11T18:34:09.927", "LastEditDate": "2011-11-11T18:29:32.827", "ViewCount": "1251", "FavoriteCount": "1", "Title": "User defined literals for variadic char template", "Id": "8097767", "Score": "1", "Body": "<p>Recently, in the gcc-trunk sources was implemented the \"user defined literals\".\nTell me please, do I understand correctly that I can`t define a \"user defined literals\" for variadic char template?</p>\n<pre><code>template&lt;char... chars&gt;\nint operator\"\" _call() { return sizeof...(chars); }\n...\nstd::cout &lt;&lt; \"method\"_call;\n</code></pre>\n<p><strong>Up.</strong></p>\n<p>I don`t understand why this expression is allowed:</p>\n<pre><code>template&lt;char... chars&gt;\nint operator\"\" _call() { return sizeof...(chars); }\n...\nstd::cout &lt;&lt; 12345566_call;\n</code></pre>\n<p>and this one is disallowed:</p>\n<pre><code>template&lt;char... chars&gt;\nint operator\"\" _call() { return sizeof...(chars); }\n...\nstd::cout &lt;&lt; method_call;\n</code></pre>\n<p>?</p>\n<p>What's the point?</p>\n<p><strong>Up.</strong>\nthis is because of the ambiguity?</p>\n<p>Thanks.</p>\n", "Tags": "<c++><c++11><variadic-templates>", "OwnerUserId": "305885", "AnswerCount": "2"}, "8098362": {"ParentId": "8097767", "CommentCount": "0", "Body": "<p><code>method_call</code> is a valid identifier As is for example <code>some_call</code> or <code>my_call</code>. Now imagine how much code would be broken if such identifiers were allowed to be redefined by <code>operator\"\"</code>.</p>\n", "OwnerUserId": "1032073", "PostTypeId": "2", "Id": "8098362", "Score": "1", "CreationDate": "2011-11-11T18:30:29.270", "LastActivityDate": "2011-11-11T18:30:29.270"}, "bq_ids": {"n4140": {"so_8097767_8098054_0": {"section_id": 5371, "quality": 0.782608695652174, "length": 18}}, "n3337": {"so_8097767_8098054_0": {"section_id": 5167, "quality": 0.782608695652174, "length": 18}}, "n4659": {"so_8097767_8098054_0": {"section_id": 6796, "quality": 0.782608695652174, "length": 18}}}, "8098054": {"ParentId": "8097767", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>No, it doesn't really make sense. String literals are passed as two arguments to <code>operator\"\"</code>, and one of them is size, so what you want is:</p>\n<pre><code>size_t operator\"\" _call(const char*, size_t len) {\n    return len;\n}\n</code></pre>\n<p>Standard quote time (2.14.8.5):</p>\n<blockquote>\n<p id=\"so_8097767_8098054_0\">5 If L is a <em>user-de\ufb01ned-string-literal</em>, let <em>str</em> be the literal without its <em>ud-suffix</em> and let <em>len</em> be the number of code units in <em>str</em> (i.e., its length excluding the terminating null character). The literal L is treated as a call of the form</p>\n<pre><code>operator \"\" X (str, len)\n</code></pre>\n</blockquote>\n<p>The variadic template forms are considered only for <em>user-de\ufb01ned-integer-literal</em> (2.14.8.3) and <em>user-de\ufb01ned-floating-literal</em> (2.14.8.4).</p>\n<p>As for <code>method_call</code>, <code>method</code> is not a literal.</p>\n", "OwnerUserId": "16102", "LastEditorUserId": "16102", "LastEditDate": "2011-11-11T18:34:09.927", "Id": "8098054", "Score": "8", "CreationDate": "2011-11-11T18:01:43.030", "LastActivityDate": "2011-11-11T18:34:09.927"}});