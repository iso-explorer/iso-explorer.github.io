post_cb({"14737680": {"CommentCount": "0", "AcceptedAnswerId": "14737742", "CreationDate": "2013-02-06T20:00:02.877", "LastActivityDate": "2013-02-07T08:56:51.093", "PostTypeId": "1", "ViewCount": "114", "FavoriteCount": "1", "Title": "on a fn call in c++, args are copied to the corresponding parameter. Is this initialization or assignment?", "Id": "14737680", "Score": "4", "Body": "<p>on a function call in c++, arguments are copied to the corresponding parameter. Is this initialization or assignment?</p>\n", "Tags": "<c++><function-call>", "OwnerUserId": "1539741", "AnswerCount": "3"}, "14737742": {"ParentId": "14737680", "CommentCount": "4", "Body": "<p>Argument passing semantics are that of initialization. Meaning, your classes' copy/move constructors will be invoked.</p>\n", "Id": "14737742", "PostTypeId": "2", "OwnerDisplayName": "user2033018", "Score": "7", "CreationDate": "2013-02-06T20:04:13.347", "LastActivityDate": "2013-02-06T20:04:13.347"}, "14737791": {"ParentId": "14737680", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Initialization: (please check the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3485.pdf\" rel=\"nofollow\">original-draft</a>)</p>\n<blockquote>\n<p id=\"so_14737680_14737791_0\">5.2.2 Function call </p>\n<p id=\"so_14737680_14737791_1\">When a function is called, each parameter shall be <strong>initialized</strong> with its corresponding argument. [Such initializations are\n  indeterminately sequenced with respect to each other] When a function\n  is called, the parameters that have object type shall have\n  completely-defined object type. [this still allows a parameter to be a\n  pointer or reference to an incomplete class type. However, it prevents\n  a passed-by-value parameter to have an incomplete class type.] <em>During\n  the initialization of a parameter, an implementation may avoid the\n  construction of extra temporaries by combining the conversions on the\n  associated argument and/or the construction of temporaries with the\n  initialization of the parameter.</em> The lifetime of a parameter ends when\n  the function in which it is defined returns. <em>The initialization and\n  destruction of each parameter occurs within the context of the calling\n  function.</em> [the access of the constructor, conversion functions or\n  destructor is checked at the point of call in the calling function. If\n  a constructor or destructor for a function parameter throws an\n  exception, the search for a handler starts in the scope of the calling\n  function; in particular, if the function called has a\n  function-try-block with a handler that could handle the exception,\n  this handler is not considered.]</p>\n</blockquote>\n", "OwnerUserId": "1458030", "LastEditorUserId": "1458030", "LastEditDate": "2013-02-07T08:56:51.093", "Id": "14737791", "Score": "0", "CreationDate": "2013-02-06T20:07:00.807", "LastActivityDate": "2013-02-07T08:56:51.093"}, "bq_ids": {"n4140": {"so_14737680_14737791_1": {"section_id": 5991, "quality": 0.9818181818181818, "length": 108}}, "n3337": {"so_14737680_14737791_1": {"section_id": 5759, "quality": 0.9818181818181818, "length": 108}}, "n4659": {"so_14737680_14737791_1": {"section_id": 7491, "quality": 0.7636363636363637, "length": 84}}}, "14737731": {"ParentId": "14737680", "CommentCount": "0", "Body": "<p>Then the arguments are <em>by value</em> they are copy-constructed (i.e. initialization).</p>\n", "OwnerUserId": "36565", "PostTypeId": "2", "Id": "14737731", "Score": "1", "CreationDate": "2013-02-06T20:03:17.220", "LastActivityDate": "2013-02-06T20:03:17.220"}});