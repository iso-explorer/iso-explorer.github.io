post_cb({"20905296": {"ParentId": "20905213", "CommentCount": "0", "Body": "<p>Access to a virtual function is determined by its declaration in the static type of the object, and not by the declaration of the overriding function in the dynamic type.</p>\n<blockquote>\n<p id=\"so_20905213_20905296_0\"><em>\u00a711.5 [class.access.virt]</em> The access rules (Clause 11) for a virtual function are determined by its declaration and are not affected by the rules for a function that later overrides it.</p>\n<p id=\"so_20905213_20905296_1\">Access is checked at the call point using the type of the expression used to denote the object for which the member function is called. The access of the member function in the class in which it was defined is in general not known.</p>\n</blockquote>\n<p>Since <code>A::func</code> is <code>public</code>, calling <code>B::func</code> polymorphically through a pointer to <code>A</code> is fine.</p>\n", "OwnerUserId": "150634", "PostTypeId": "2", "Id": "20905296", "Score": "7", "CreationDate": "2014-01-03T13:58:13.403", "LastActivityDate": "2014-01-03T13:58:13.403"}, "20905302": {"ParentId": "20905213", "CommentCount": "0", "Body": "<p>Access specifiers are checked at the level of the static type of the object, pointer or reference on which the call is made even if the call is dispatched to the dynamic type of the object pointed/referenced. In your case, <code>a-&gt;func()</code> is called through a pointer of type <code>A*</code>, and thus access specifiers are checked at the <code>A</code> level, where <code>func()</code> is public.</p>\n", "OwnerUserId": "36565", "PostTypeId": "2", "Id": "20905302", "Score": "6", "CreationDate": "2014-01-03T13:58:34.837", "LastActivityDate": "2014-01-03T13:58:34.837"}, "20905213": {"CommentCount": "0", "ViewCount": "107", "PostTypeId": "1", "ClosedDate": "2014-01-03T13:59:34.877", "LastEditorUserId": "2684539", "CreationDate": "2014-01-03T13:53:55.973", "LastActivityDate": "2014-01-03T14:07:36.107", "Title": "Private function invoked and it works. Could any of you reason it please", "AcceptedAnswerId": "20905302", "LastEditDate": "2014-01-03T14:07:36.107", "Id": "20905213", "Score": "2", "Body": "<p>I am able to invoke the private function of the derived class. Is this Ok?</p>\n<pre><code>#include &lt;iostream&gt;\nclass A {\npublic:\n    virtual ~A() {}\n\n    virtual void func()\n    {\n        std::cout &lt;&lt; \" Printing from A\" &lt;&lt; std::endl;\n    }\n};\n\nclass B : public A {\nprivate:\n    virtual void func()\n    {\n        std::cout&lt;&lt; \" Printing from B\"&lt;&lt;std::endl;\n    }\n};\n\nmain()\n{\n    B b;\n    A* a = &amp;b;\n\n    a-&gt;func();\n    // b.func(); Not possible as expected.\n}\n</code></pre>\n<p><strong>Below is the output</strong></p>\n<blockquote>\n<p id=\"so_20905213_20905213_0\">Printing from B</p>\n</blockquote>\n", "Tags": "<c++>", "OwnerUserId": "3157434", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_20905213_20905296_0": {"section_id": 6696, "quality": 0.8125, "length": 13}, "so_20905213_20905296_1": {"section_id": 6697, "quality": 0.9523809523809523, "length": 20}}, "n3337": {"so_20905213_20905296_0": {"section_id": 6451, "quality": 0.8125, "length": 13}, "so_20905213_20905296_1": {"section_id": 6452, "quality": 0.9523809523809523, "length": 20}}, "n4659": {"so_20905213_20905296_0": {"section_id": 8171, "quality": 0.8125, "length": 13}, "so_20905213_20905296_1": {"section_id": 8172, "quality": 0.9523809523809523, "length": 20}}}});