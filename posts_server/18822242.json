post_cb({"18823082": {"ParentId": "18822242", "CommentCount": "3", "Body": "<p>The value of <code>true ? f1() : f2()</code> is <code>void</code>. From your edited part, your main question is whether a void type can be seen as an expression, the answer is YES.</p>\n<blockquote>\n<h2>C++11 \u00a73.9.1 <em>Fundamental types</em> Section 9</h2>\n<p id=\"so_18822242_18823082_0\">The <code>void</code> type has an empty set of values. The <code>void</code> type is an incomplete type that cannot be completed. It is used as the return type for functions that do not return a value. Any expression can be explicitly converted to type <code>cv void</code> (5.4). An expression of type void shall be used only as an expression statement (6.2), as an operand of a comma expression\n  (5.18), <strong>as a second or third operand of <code>?:</code></strong> (5.16), as the operand of <code>typeid</code>, or as the expression in a return statement (6.6.3) for a function with the return type <code>void</code>.</p>\n</blockquote>\n<p>It doesn't make much sense to compare Lisp's concepts with C++. You can, at best, compare the concepts of C++ with other C family languages, such as C, Objective C, Java, etc. Lisp is like the on the other end of \"language pool\" from the C family languages.</p>\n", "OwnerUserId": "1009479", "PostTypeId": "2", "Id": "18823082", "Score": "1", "CreationDate": "2013-09-16T08:03:27.383", "LastActivityDate": "2013-09-16T08:03:27.383"}, "18822315": {"ParentId": "18822242", "CommentCount": "1", "Body": "<p>The value is <code>f1()</code>. However I don't get what you want to say about the relation between this and <code>operator+</code>.</p>\n", "OwnerUserId": "341291", "PostTypeId": "2", "Id": "18822315", "Score": "0", "CreationDate": "2013-09-16T07:15:24.993", "LastActivityDate": "2013-09-16T07:15:24.993"}, "18822242": {"CommentCount": "9", "ViewCount": "290", "PostTypeId": "1", "LastEditorUserId": "508343", "CreationDate": "2013-09-16T07:11:06.887", "LastActivityDate": "2013-09-16T09:54:47.380", "Title": "Is ?: expression not always evaluated?", "FavoriteCount": "2", "LastEditDate": "2013-09-16T09:04:27.420", "Id": "18822242", "Score": "0", "Body": "<p>In Lisp, any expression can be evaluated. C++ adopts the concepts: \"Expression\", \"Value\", \"Evaluation\".</p>\n<p><strong>Please refer to the C++ standard 5.1 if you don't know the relations between \"Expression\", \"Value\", and \"Evaluation\".</strong></p>\n<p>I know ?: is an expression as same as + expression. </p>\n<p>Any expression must be able to be evaluated and give a value. However <code>?:</code> expression seems not always so.</p>\n<pre><code>void f1() {}\nvoid f2() {}\n\nvoid test(bool b)\n{\n    b ? f1() : f2(); // OK. What's the value of this expression?\n}\n</code></pre>\n<p>Any expression should have a value; <code>b ? f1() : f2();</code> is an expression; What's its value?</p>\n<p>Any explanation?</p>\n<p><strong>Updates and my own answer:</strong></p>\n<p>Excerpted from the C++ standard 5.1:</p>\n<blockquote>\n<p id=\"so_18822242_18822242_0\">An expression can result in a value and can cause side effects.</p>\n</blockquote>\n", "Tags": "<c++><c><expression><ternary-operator><evaluation>", "OwnerUserId": "508343", "AnswerCount": "5"}, "18822313": {"ParentId": "18822242", "PostTypeId": "2", "CommentCount": "8", "Body": "<p>The value of the expression <code>b ? f1() : f2()</code> is either <code>f1()</code> or <code>f2()</code> depending on the value of <code>b</code>. In your case, both functions return <code>void</code>, so the value of the expression is <em>nothing</em>.</p>\n", "OwnerUserId": "415784", "LastEditorUserId": "415784", "LastEditDate": "2013-09-16T09:54:47.380", "Id": "18822313", "Score": "5", "CreationDate": "2013-09-16T07:15:24.200", "LastActivityDate": "2013-09-16T09:54:47.380"}, "18824628": {"ParentId": "18822242", "CommentCount": "1", "Body": "<p>An expression <em>can</em> have a value.  Not all expressions have\na value, just as not all expressions have side effects.  An\nexpression does have a type; an expression of type <code>void</code>\ndoesn't have a value (since the set of values for <code>void</code> is\nempty).</p>\n<p>In an expression of the form <code>cond ? expr1 : expr2</code>, the type\nis determined based on the types of <code>expr1</code> and <code>expr2</code>.  If\nboth <code>expr1</code> and <code>expr2</code> are <code>void</code>, then the type of the\nconditional expression is <code>void</code>, and it has no value. </p>\n", "OwnerUserId": "649665", "PostTypeId": "2", "Id": "18824628", "Score": "2", "CreationDate": "2013-09-16T09:29:09.683", "LastActivityDate": "2013-09-16T09:29:09.683"}, "bq_ids": {"n4140": {"so_18822242_18822242_0": {"section_id": 5934, "quality": 1.0, "length": 8}, "so_18822242_18823082_0": {"section_id": 7218, "quality": 0.875, "length": 42}}, "n3337": {"so_18822242_18822242_0": {"section_id": 5706, "quality": 1.0, "length": 8}, "so_18822242_18823082_0": {"section_id": 6962, "quality": 0.875, "length": 42}}, "n4659": {"so_18822242_18822242_0": {"section_id": 7418, "quality": 1.0, "length": 8}, "so_18822242_18823082_0": {"section_id": 8727, "quality": 0.6875, "length": 33}}}, "18822348": {"ParentId": "18822242", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The ternary operator <em>evaluates</em> expressions - in this case it means that <code>true</code> is evaluated to <code>true</code> and then <code>f1()</code> is evaluated, which does nothing (the expression is evaluated to <code>void</code>).</p>\n<p>I think this is one of the reasons why we have <code>void</code> in the language.</p>\n<p>Please see this nice <a href=\"http://www.cplusplus.com/articles/1AUq5Di1/\" rel=\"nofollow\">article</a> for details.</p>\n", "OwnerUserId": "2583876", "LastEditorUserId": "2583876", "LastEditDate": "2013-09-16T07:37:23.597", "Id": "18822348", "Score": "0", "CreationDate": "2013-09-16T07:17:23.280", "LastActivityDate": "2013-09-16T07:37:23.597"}});