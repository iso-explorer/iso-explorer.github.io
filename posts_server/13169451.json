post_cb({"bq_ids": {"n4140": {"so_13169451_13169473_1": {"length": 18, "quality": 0.6923076923076923, "section_id": 7212}, "so_13169451_13169473_0": {"length": 68, "quality": 0.9577464788732394, "section_id": 7212}}, "n3337": {"so_13169451_13169473_1": {"length": 18, "quality": 0.6923076923076923, "section_id": 6956}, "so_13169451_13169473_0": {"length": 68, "quality": 0.9577464788732394, "section_id": 6956}}, "n4659": {"so_13169451_13169473_1": {"length": 18, "quality": 0.6923076923076923, "section_id": 8721}, "so_13169451_13169473_0": {"length": 67, "quality": 0.9436619718309859, "section_id": 8721}}}, "13169473": {"Id": "13169473", "PostTypeId": "2", "Body": "<p>The C++11 Standard says about integer types:</p>\n<blockquote>\n<p id=\"so_13169451_13169473_0\">(\u00a73.9.1/3) For each of the standard signed integer types, there exists a corresponding (but different) standard unsigned integer type: \u201cunsigned char\u201d, \u201cunsigned short int\u201d, \u201cunsigned int\u201d, \u201cunsigned long int\u201d, and \u201cunsigned long long int\u201d, each of which occupies the same amount of storage and has the same alignment requirements (3.11) as the corresponding signed integer type; that is, each signed integer type has the same object representation as its corresponding unsigned integer type. Likewise, for each of the extended signed integer types there exists a corresponding extended unsigned integer type with the same amount of storage and alignment requirements. [...]</p>\n</blockquote>\n<p>So the answer is yes.</p>\n<p>For C11, there is a corresponding statement here (this is from N1570):</p>\n<blockquote>\n<p id=\"so_13169451_13169473_1\">(\u00a76.2.5/6) For each of the signed integer types, there is a corresponding (but different) unsigned\n  integer type (designated with the keyword unsigned) that uses the same amount of\n  storage (including sign information) and has the same alignment requirements [...]</p>\n</blockquote>\n", "LastEditorUserId": "777186", "LastActivityDate": "2012-11-01T00:52:52.310", "Score": "40", "CreationDate": "2012-11-01T00:45:01.977", "ParentId": "13169451", "CommentCount": "0", "OwnerUserId": "777186", "LastEditDate": "2012-11-01T00:52:52.310"}, "13169451": {"ViewCount": "2739", "Body": "<p>The sizeof char, int, long double... can vary from one compiler to another. But do I have the guarantee according to the C++11 or C11 standard that the size of any signed and unsigned fundamental integral type is the same ?</p>\n", "AcceptedAnswerId": "13169473", "Title": "Do I have the guarantee that sizeof(type) == sizeof(unsigned type)?", "CreationDate": "2012-11-01T00:42:08.273", "Id": "13169451", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2012-11-01T00:55:03.457", "LastEditorUserId": "636019", "LastActivityDate": "2017-08-14T18:34:02.423", "Score": "23", "OwnerUserId": "882932", "Tags": "<c++><c><sizeof><language-lawyer><standards-compliance>", "AnswerCount": "2"}, "45680849": {"Id": "45680849", "PostTypeId": "2", "Body": "<p>Yes, there is a full guarantee that <strong>sizeof(signed type) is equal to sizeof(unsigned type)</strong> since unsigned is only taking the space of negative numbers of signed type to increase its range.</p>\n", "LastActivityDate": "2017-08-14T18:34:02.423", "CommentCount": "1", "CreationDate": "2017-08-14T18:34:02.423", "ParentId": "13169451", "Score": "0", "OwnerUserId": "8459014"}});