post_cb({"47191759": {"ParentId": "47190568", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>IMO, the wording in <a href=\"http://eel.is/c++draft/stmt.ambig\" rel=\"noreferrer\">[stmt.ambig]</a> is clear enough on this:</p>\n<blockquote>\n<p id=\"so_47190568_47191759_0\"><strong>An <em>expression-statement</em></strong> with a function-style explicit type conversion as its leftmost subexpression <strong>can be indistinguishable from a declaration where the first declarator starts with a <code>(</code></strong>. <strong>In those cases</strong> the statement is a declaration.</p>\n<p id=\"so_47190568_47191759_1\">[<em>Note</em>: <strong>If the statement cannot syntactically be a declaration, there is no ambiguity, so this rule does not apply. The whole statement might need to be examined to determine whether this is the case.</strong> </p>\n</blockquote>\n<p>The wording speaks of an entire (expression-)statement.\nYour statement cannot be parsed as a declaration, because the lexeme <code>1</code> is grammatically not a <em>declarator</em>. There is no ambiguity: it might look  ambiguous if we looked solely at <code>int(x)</code>, but the standard quite explicitly denies that if some prefix of the statement parses as a declaration, the entire statement is considered a potential declaration.</p>\n<p>In fact, core experts had a highly similar discussion back in 2002 over <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_closed.html#340\" rel=\"noreferrer\">core issue 340</a>---I highlighted the important bits. Here, again, we have a supposed declaration that contains an incompatible sub-construct. </p>\n<blockquote>\n<p id=\"so_47190568_47191759_2\">Consider the following program:</p>\n<pre><code>struct Point   {\n  Point(int){}   \n};\nstruct Lattice    {\n  Lattice(Point, Point, int){}   \n};\nint main(void)   {\n  int a, b;\n  Lattice latt(Point(a), Point(b), 3);   /* Line X */   \n} \n</code></pre>\n<p id=\"so_47190568_47191759_3\">The problem concerns the line marked <code>/* Line X */</code>, which is an ambiguous\n  declarations for either an object or a function. The clause that\n  governs this ambiguity is 8.2 [dcl.ambig.res] paragraph 1, and reads:</p>\n<blockquote>\n<p id=\"so_47190568_47191759_12\">The ambiguity arising from the similarity between a function-style\n    cast and a declaration mentioned in 6.8 [stmt.ambig] [..]</p>\n</blockquote>\n<p id=\"so_47190568_47191759_5\">Based on this clause there are two\n  possible interpretations of the declaration in line <code>X</code>:</p>\n<ul>\n<li><strong>The declaration of <code>latt</code> declares a function with a return value of the\n  type <code>Lattice</code> and taking three arguments. The type of the first two\n  arguments is <code>Point</code> and each of these arguments is followed by a\n  parameter name in redundant parentheses. The type of the third\n  argument can not be determined, because it is a literal.</strong> This will\n  result in a syntax error. </li>\n<li>The declaration of latt declares an object,\n  because the other option (a function declaration) would result in a\n  syntax error. Note that the last sentence before the \"[Note:\" is not\n  much help, because both options are declarations.</li>\n</ul>\n<p id=\"so_47190568_47191759_6\"><strong>Steve Adamczyk: a number of people replied to this posting on\n  comp.std.c++ saying that they did not see a problem.</strong> </p>\n<p id=\"so_47190568_47191759_7\">The original\n  poster replied:</p>\n<p id=\"so_47190568_47191759_8\">I can't do anything but agree with your argumentation. So there is\n  only one correct interpretation of clause 8.2 [dcl.ambig.res]\n  paragraph 1, but I have to say that with some rewording, the clause\n  can be made a lot clearer, like stating explicitly that the entire\n  declaration must be taken into account and that function declarations\n  are preferred over object declarations.</p>\n<p id=\"so_47190568_47191759_9\">I would like to suggest the following as replacement for the current\n  clause 8.2 [dcl.ambig.res] paragraph 1:</p>\n<blockquote>\n<p id=\"so_47190568_47191759_13\">The ambiguity arising from the similarity between a functionstyle cast\n    and a declaration mentioned in 6.8 [stmt.ambig] [\u2026]</p>\n</blockquote>\n<p id=\"so_47190568_47191759_11\"><strong>The working group felt that the current wording is clear enough.</strong></p>\n</blockquote>\n", "OwnerUserId": "3647361", "LastEditorUserId": "3647361", "LastEditDate": "2017-11-09T15:32:59.560", "Id": "47191759", "Score": "16", "CreationDate": "2017-11-08T23:57:37.557", "LastActivityDate": "2017-11-09T15:32:59.560"}, "47190568": {"CommentCount": "13", "AcceptedAnswerId": "47191759", "PostTypeId": "1", "LastEditorUserId": "3647361", "CreationDate": "2017-11-08T22:10:51.053", "LastActivityDate": "2017-11-09T22:12:19.180", "LastEditDate": "2017-11-09T22:12:19.180", "ViewCount": "336", "FavoriteCount": "4", "Title": "Is \"int (x), 1;\" an ambiguous statement?", "Id": "47190568", "Score": "14", "Body": "<pre><code>void f(int x) {\n    int (x), 1;\n}\n</code></pre>\n<p>Clang compiles it, GCC doesn't. Which compiler is correct?</p>\n", "Tags": "<c++><expression><language-lawyer><variable-declaration>", "OwnerUserId": "8157187", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_47190568_47191759_12": {"section_id": 3201, "quality": 0.8, "length": 8}, "so_47190568_47191759_10": {"section_id": 3201, "quality": 0.8, "length": 8}, "so_47190568_47191759_4": {"section_id": 3201, "quality": 0.8, "length": 8}, "so_47190568_47191759_1": {"section_id": 3922, "quality": 0.8947368421052632, "length": 17}, "so_47190568_47191759_13": {"section_id": 3201, "quality": 0.8, "length": 8}, "so_47190568_47191759_0": {"section_id": 3921, "quality": 1.0, "length": 19}}, "n3337": {"so_47190568_47191759_12": {"section_id": 3075, "quality": 0.8, "length": 8}, "so_47190568_47191759_4": {"section_id": 3075, "quality": 0.8, "length": 8}, "so_47190568_47191759_13": {"section_id": 3075, "quality": 0.8, "length": 8}, "so_47190568_47191759_10": {"section_id": 3075, "quality": 0.8, "length": 8}, "so_47190568_47191759_0": {"section_id": 3781, "quality": 0.7894736842105263, "length": 15}}, "n4659": {"so_47190568_47191759_12": {"section_id": 3962, "quality": 0.8, "length": 8}, "so_47190568_47191759_4": {"section_id": 3962, "quality": 0.8, "length": 8}, "so_47190568_47191759_10": {"section_id": 3962, "quality": 0.8, "length": 8}, "so_47190568_47191759_1": {"section_id": 4808, "quality": 0.8947368421052632, "length": 17}, "so_47190568_47191759_13": {"section_id": 3962, "quality": 0.8, "length": 8}, "so_47190568_47191759_0": {"section_id": 4807, "quality": 1.0, "length": 19}}}});