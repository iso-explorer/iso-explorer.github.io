post_cb({"bq_ids": {"n4140": {"so_26007869_26008040_0": {"section_id": 438, "quality": 1.0, "length": 6}}, "n3337": {"so_26007869_26008040_0": {"section_id": 429, "quality": 1.0, "length": 6}}, "n4659": {"so_26007869_26008040_0": {"section_id": 458, "quality": 1.0, "length": 6}}}, "26008040": {"ParentId": "26007869", "PostTypeId": "2", "CommentCount": "4", "CreationDate": "2014-09-24T03:26:20.220", "Score": "2", "LastEditorUserId": "2756719", "LastEditDate": "2014-09-24T04:05:43.893", "Id": "26008040", "OwnerUserId": "2756719", "Body": "<p>Here's the rule (\u00a712.6.2 [class.base.init]/p11):</p>\n<blockquote>\n<p id=\"so_26007869_26008040_0\">In a non-delegating constructor, initialization proceeds in the\n  following order:</p>\n<ul>\n<li>First, and only for the constructor of the most derived class (1.8), virtual base classes are initialized in the order they appear on a\n  depth-first left-to-right traversal of the directed acyclic graph of\n  base classes, where \u201cleft-to-right\u201d is the order of appearance of the\n  base classes in the derived class <em>base-specifier-list</em>.</li>\n<li>Then, direct base classes are initialized in declaration order as they appear in the <em>base-specifier-list</em> (regardless of the order of the\n  <em>mem-initializers</em>).</li>\n<li>Then, non-static data members are initialized in the order they were declared in the class definition (again regardless of the order of the\n  <em>mem-initializers</em>).</li>\n<li>Finally, the <em>compound-statement</em> of the constructor body is executed.</li>\n</ul>\n</blockquote>\n<p>So, if V1 and V2 are virtual bases, then the construction goes V1 -&gt; V2 -&gt; D1 -&gt; D2 -&gt; X's compound statement. V1's constructor will construct a B1 first, then execute its body. V2's constructor will construct a B1 and a B2, then execute its body. D2's constructor will construct a B3 before executing its body. (Because neither D1 nor D2 is the most derived class, their constructors don't construct the virtual bases V1 or V2.) Hence the overall printout order is B1 -&gt; V1 -&gt; B1 -&gt; B2 -&gt; V2 -&gt; D1 -&gt; B3 -&gt; D2 -&gt; X.</p>\n<p>If V1 and V2 aren't virtual bases, then X's constructions is simply D1 -&gt; D2 -&gt; X. D1 has a single direct base V1, V1 has a single direct base B1, so you get B1 -&gt; V1 -&gt; D1 for the first part. Similarly, you construct B3 -&gt; B1 -&gt; B2 -&gt; V2 -&gt; D2 for the second part, so the overall order is B1 -&gt; V1 -&gt; D1 -&gt; B3 -&gt; B1 -&gt; B2 -&gt; V2 -&gt; D2 -&gt; X.</p>\n", "LastActivityDate": "2014-09-24T04:05:43.893"}, "26007869": {"CommentCount": "3", "ViewCount": "53", "CreationDate": "2014-09-24T03:06:47.047", "LastActivityDate": "2014-09-24T04:05:43.893", "Title": "Complicated Order of construction - involving virtual inheritance", "AcceptedAnswerId": "26008040", "PostTypeId": "1", "Id": "26007869", "Score": "0", "Body": "<p>I came across this question which has me confused.</p>\n<p>The code for this is :</p>\n<pre><code>  struct B1 { B1(){std::cout &lt;&lt; \"B1\\n\";} };\n  struct V1 : public B1 {  V1(){std::cout &lt;&lt; \"V1\\n\";} };\n  struct D1 : virtual public V1 {D1(){std::cout &lt;&lt; \"D1\\n\";} };\n\n  struct B2 {B2(){std::cout &lt;&lt; \"B2\\n\";} };\n  struct B3 {B3(){std::cout &lt;&lt; \"B3\\n\";} };\n  struct V2 : public B1, public B2 {V2(){std::cout &lt;&lt; \"V2\\n\";} };\n  struct D2 : public B3, virtual public V2 {D2(){std::cout &lt;&lt; \"D2\\n\";} };\n  struct X : public D1, public D2 { };\n</code></pre>\n<p>Question : What is the order of construction of X ?</p>\n<p>Here is a diagram that i constructed with the aim of simplifying it</p>\n<p><img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/yLE4R.png\"/></p>\n<p>First I would like to answer this question with the fact considering there is no virtual inheritance.  The keyword <code>virtual</code> is replaced by <code>public</code> I would get</p>\n<pre><code>B1,V1,D1, [B3,B1,B2,V2,D2] , X\n</code></pre>\n<p>However I am not sure how I would approach this question when virtual inheritance comes along. The code as it is mentioned. I read that it is solved exactly the same except that <a href=\"http://www.informit.com/guides/content.aspx?g=cplusplus&amp;seqNum=169\" rel=\"nofollow noreferrer\">virtual bases</a> are given precedence. Which are the virtual bases here ? Any suggestions on how to tackle such a problem ?</p>\n", "Tags": "<c++><virtual-inheritance>", "OwnerUserId": "1305891", "AnswerCount": "1"}});