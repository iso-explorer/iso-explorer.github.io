post_cb({"6826021": {"Id": "6826021", "PostTypeId": "2", "Body": "<p>Another example which doesn't use <code>extern</code> keyword:</p>\n<pre><code>//demo.cpp\n\nint i = 100;\nnamespace N\n{\n    int i = 200;\n    struct A\n    {\n        static int m;\n    };\n}\n\nint N::A::m = i; //i is 100 or 200?\n\nint main()\n{\n   cout &lt;&lt; N::A::m &lt;&lt; endl; //what will it print?\n}\n</code></pre>\n<p>Output:</p>\n<pre><code>200\n</code></pre>\n<p>Online demo : <a href=\"http://www.ideone.com/pRVAb\" rel=\"nofollow\">http://www.ideone.com/pRVAb</a></p>\n", "LastEditorUserId": "415784", "LastActivityDate": "2011-07-26T06:25:16.953", "Score": "4", "CreationDate": "2011-07-26T06:13:49.703", "ParentId": "6825801", "CommentCount": "3", "OwnerUserId": "415784", "LastEditDate": "2011-07-26T06:25:16.953"}, "6825854": {"Id": "6825854", "PostTypeId": "2", "Body": "<pre><code>// header.h\nstruct X { void bar () {} };\nnamespace N {\n struct X { void bar () {} };\n void foo(X *p = new X);\n}\n\n// implementation.cpp\n#include\"header.h\"\n\nN::foo(X* p) { p-&gt;bar(); } // N::X::bar() called\n</code></pre>\n<p>This example is without using <code>extern</code>. (though it's implied).</p>\n", "LastEditorUserId": "514235", "LastActivityDate": "2011-07-26T06:57:13.283", "Score": "0", "CreationDate": "2011-07-26T05:55:09.643", "ParentId": "6825801", "CommentCount": "9", "OwnerUserId": "514235", "LastEditDate": "2011-07-26T06:57:13.283"}, "6826071": {"Id": "6826071", "PostTypeId": "2", "Body": "<p>Another example is regarding the definition of a <strong>static member in class</strong>.</p>\n<pre><code>// header\nnamespace N {\n  const int i = 4;\n  class A\n  {\n  public:\n    static int m_i;\n  };\n}\n\n// source file\nint i = 2;\nint N::A::m_i = i;  // N::A::m_i == 4\n\nint main(int argc, char* argv[])\n{\n  cout &lt;&lt; N::A::m_i &lt;&lt; endl;\n  return 0;\n}\n</code></pre>\n", "LastEditorUserId": "419391", "LastActivityDate": "2011-07-26T06:52:01.183", "Score": "1", "CreationDate": "2011-07-26T06:20:29.597", "ParentId": "6825801", "CommentCount": "2", "OwnerUserId": "419391", "LastEditDate": "2011-07-26T06:52:01.183"}, "bq_ids": {"n4140": {"so_6825801_6825801_1": {"length": 21, "quality": 1.0, "section_id": 7100}, "so_6825801_6825801_0": {"length": 21, "quality": 1.0, "section_id": 7100}}, "n3337": {"so_6825801_6825801_1": {"length": 21, "quality": 1.0, "section_id": 6844}, "so_6825801_6825801_0": {"length": 21, "quality": 1.0, "section_id": 6844}}, "n4659": {"so_6825801_6825801_1": {"length": 21, "quality": 1.0, "section_id": 8601}, "so_6825801_6825801_0": {"length": 21, "quality": 1.0, "section_id": 8601}}}, "6825990": {"Id": "6825990", "PostTypeId": "2", "Body": "<p>This code doesn't use <code>extern</code> yet it <em>more or less</em> proves the point. Note that it doesn't define <em>variable</em> outside the namespace, it instead defines <em>function</em> outside the namespace.</p>\n<pre><code>//demo.cpp\n\nint i = 100;\nnamespace N\n{\n   int i = 200;\n   struct X{};\n   void f(const X&amp;);\n\n}\n\nvoid N::f(const X&amp;)\n{\n   cout &lt;&lt; i &lt;&lt; endl; //what will it print?\n}\n\nint main()\n{\n    N::X x;\n    f(x); //use argument-dependent lookup (ADL) to find the function!\n}\n</code></pre>\n<p>Output:</p>\n<pre><code>200\n</code></pre>\n<p>Online demo : <a href=\"http://www.ideone.com/KCqUV\" rel=\"nofollow\">http://www.ideone.com/KCqUV</a></p>\n<p>I added ADL to make it more interesting!</p>\n", "LastEditorUserId": "415784", "LastActivityDate": "2011-07-26T06:24:18.560", "Score": "1", "CreationDate": "2011-07-26T06:10:13.413", "ParentId": "6825801", "CommentCount": "4", "OwnerUserId": "415784", "LastEditDate": "2011-07-26T06:24:18.560"}, "6825801": {"ViewCount": "133", "Body": "<p>A point from ISO draft N3290 :\nUnqualified Name Lookup :section 3.4.1, para 14:</p>\n<blockquote>\n<blockquote>\n<p id=\"so_6825801_6825801_1\">If a variable member of a namespace is defined outside of the scope of its \n       namespace then any name that appears in the definition of the member \n       (after the declarator-id) is looked up as if the definition of the member\n       occurred in its namespace.</p>\n</blockquote>\n</blockquote>\n<p>ex:</p>\n<pre><code>namespace N {\n   int i = 4;\n   extern int j;\n}\nint i = 2;\nint N::j = i;       // N::j == 4\n</code></pre>\n<p>Is there any other possiblitly to prove this point other than using 'extern' keyword</p>\n<p>can u give some other examples ... other than extern </p>\n", "AcceptedAnswerId": "6826021", "Title": "Is there any other possiblitly to prove this point other than using 'extern' keyword :n3290 draft", "CreationDate": "2011-07-26T05:47:55.657", "Id": "6825801", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2011-07-26T06:01:16.777", "LastEditorDisplayName": "user166390", "LastActivityDate": "2011-07-26T06:57:13.283", "Score": "8", "OwnerUserId": "751747", "Tags": "<c++><namespaces><c++11><scope>", "AnswerCount": "4"}});