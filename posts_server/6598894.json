post_cb({"6600512": {"ParentId": "6598894", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>Defines to control actions\neither define these or not\nIf HARD_P1 is not defined block of code are excluded. So a function can be taken out of the compiled result.\nIf SOFT_P1 is defined lines of code are included. \nIf SOFT_P1 is not defined these lines are commented out.</p>\n<pre><code>#define HARD_P1\n#define SOFT_P1\n</code></pre>\n<p>Then</p>\n<pre><code>#ifdef HARD_P1\n#define P1\n#ifdef SOFT_P1\n#define USEP1\n#else\n#define USEP1 /##/\n#endif\n#endif\n</code></pre>\n<p>Note the use of /##/, the preprocessor will replace USEP1 with /##/ paste the / together to produce //\nthe // will then comment out the rest of the line. So this can be used to exclude individual lines of code.</p>\n<p>Code</p>\n<pre><code>#ifdef P1\nvoid test()\n{\nUSEP1 if(project==1)\n    {\n    }\n}\n#endif\n</code></pre>\n", "OwnerUserId": "832009", "LastEditorUserId": "832009", "LastEditDate": "2011-07-09T14:19:27.880", "Id": "6600512", "Score": "0", "CreationDate": "2011-07-06T17:28:13.730", "LastActivityDate": "2011-07-09T14:19:27.880"}, "6599121": {"ParentId": "6598894", "CommentCount": "1", "Body": "<p>And what's wrong with having a nightly automated sanity that rebuilds all projects and runs an automated test suite on each one and you'll know if something is broken?</p>\n<p>What I see here will likely end up in a #ifdef clusterfuck or additional code complexity + errors for nothing.</p>\n", "OwnerUserId": "193481", "PostTypeId": "2", "Id": "6599121", "Score": "0", "CreationDate": "2011-07-06T15:36:44.543", "LastActivityDate": "2011-07-06T15:36:44.543"}, "6598894": {"CommentCount": "5", "AcceptedAnswerId": "6599255", "PostTypeId": "1", "LastEditorUserId": "4370109", "CreationDate": "2011-07-06T15:23:42.933", "LastActivityDate": "2016-06-22T11:28:12.013", "LastEditDate": "2016-06-22T11:28:12.013", "ViewCount": "2485", "FavoriteCount": "1", "Title": "Is it possible to conditionally compile / run code based on a macro OR a variable?", "Id": "6598894", "Score": "3", "Body": "<p>We have several projects in development sharing the same codebase. Certain pieces of code are only relevant to one or other of those projects.</p>\n<p>We have a couple of requirements:</p>\n<p>The first requirement is that we want our final releases not to compile in code from the other projects.</p>\n<p>One solution (the one we like) is to use the preprocessor to remove that code:  (this is what we do in some places).</p>\n<pre><code>#if defined PROJECT1\n{\n    // some code\n}\n#endif\n</code></pre>\n<p>The second requirement is, that while we are developing, it is helpful to make sure that a change of code still works across all projects, so we would like to compile ALL the project code at once, and be able to switch between projects without a recompile - so in other places in our code, we use a variable to determine the project instead:</p>\n<pre><code>if (project == 1)\n{\n    // some code\n}\n</code></pre>\n<p>What I'd like to be able to do is to combine the benefits of both - code which in some situations (let's say determined by a #define REMOVECODE) is not included in the final exe at all, but in other situations (determined by the non-definition of the REMOVECODE define) to include the code in the compiled .exe</p>\n<p>One more thing - sometimes we have code which exists in a couple of projects, so the solution would need to handle tests like \"if project == 1 || project == 2\"</p>\n<p>I'm thinking it would look something like the following (this doesn't work because I don't think you can nest preprocessor directives), but I'm not sure if it is even possible with macros.  Maybe there's some kind of template solution?</p>\n<pre><code>#ifdef REMOVECODE\n    #define BEGINTEST #if\n    #define ENDTEST   #endif\n    #define CONDITION1 defined PROJECT1\n#else\n    #define BEGINTEST if\n    #define ENDTEST\n    #define CONDITION1 project == 1\n#endif\n\nBEGINTEST(CONDITION1)\n{\n    // some code\n}\nENDTEST\n</code></pre>\n<p>If anyone can help out, I'd be much obliged.</p>\n", "Tags": "<c++><macros><c-preprocessor><conditional-compilation>", "OwnerUserId": "16676", "AnswerCount": "6"}, "6599092": {"ParentId": "6598894", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>It won't work; you can't generate 'pre-processor directives' from inside macros, etc.</p>\n<p>Or, more accurately (since you <em>can</em> generate what looks a pre-processor directive, as shown), if you do generate what looks like a pre-processor directive via a macro, a standard-conforming preprocessor will not recognize it as a directive.</p>\n<p>The same comments apply to C and C++:</p>\n<p>ISO/IEC 14882:1998 (C++ Standard)</p>\n<blockquote>\n<h3>16.3.4 Rescanning and further replacement [cpp.rescan]</h3>\n<p id=\"so_6598894_6599092_0\">\u00b63 The resulting completely macro-replaced\n  preprocessing token sequence is not processed as a preprocessing\n  directive even if it resembles one.</p>\n</blockquote>\n<p>ISO/IEC 9899:1999 (C Standard)</p>\n<blockquote>\n<h3>6.10.3.4 Rescanning and further replacement</h3>\n<p id=\"so_6598894_6599092_1\">\u00b63 The resulting completely macro-replaced preprocessing token sequence is not processed\n  as a preprocessing directive even if it resembles one, ...</p>\n</blockquote>\n<p>(The ellipsis goes on to mention the C99 <code>_Pragma</code> feature.)</p>\n", "OwnerUserId": "15168", "LastEditorUserId": "15168", "LastEditDate": "2011-07-06T15:54:26.593", "Id": "6599092", "Score": "1", "CreationDate": "2011-07-06T15:34:43.077", "LastActivityDate": "2011-07-06T15:54:26.593"}, "6599844": {"ParentId": "6598894", "CommentCount": "0", "Body": "<p>Refactor your design. Break the code into smaller, independent libraries. Only link in what you need to each project. Otherwise, you're going to end up with a very complex mess.</p>\n", "OwnerUserId": "53089", "PostTypeId": "2", "Id": "6599844", "Score": "0", "CreationDate": "2011-07-06T16:29:01.617", "LastActivityDate": "2011-07-06T16:29:01.617"}, "6599255": {"ParentId": "6598894", "CommentCount": "8", "Body": "<p>If the condition in the test is a compile-time constant, any half-decent optimizing compiler will remove the dead code completely from the object file.</p>\n<p>So something as simple as this should work fine:</p>\n<pre><code>#ifdef REMOVECODE\n\n#ifdef PROJECT1\n#define CONDITION1 1\n#else\n#define CONDITION1 0\n#endif\n\n#else\n#define CONDITION1 project == 1\n#endif\n\n...\n\nif (CONDITION1)\n{\n    ...\n}\n</code></pre>\n<p>Run your compiler with <code>-S</code> (or equivalent) and look at the generated assembly to confirm.</p>\n", "OwnerUserId": "768469", "PostTypeId": "2", "Id": "6599255", "Score": "4", "CreationDate": "2011-07-06T15:44:40.213", "LastActivityDate": "2011-07-06T15:44:40.213"}, "bq_ids": {"n4140": {"so_6598894_6599092_0": {"section_id": 532, "quality": 0.9230769230769231, "length": 12}, "so_6598894_6599092_1": {"section_id": 532, "quality": 0.9230769230769231, "length": 12}}, "n3337": {"so_6598894_6599092_0": {"section_id": 523, "quality": 0.9230769230769231, "length": 12}, "so_6598894_6599092_1": {"section_id": 523, "quality": 0.9230769230769231, "length": 12}}, "n4659": {"so_6598894_6599092_0": {"section_id": 553, "quality": 0.9230769230769231, "length": 12}, "so_6598894_6599092_1": {"section_id": 553, "quality": 0.9230769230769231, "length": 12}}}, "6599697": {"ParentId": "6598894", "CommentCount": "0", "Body": "<p>How about having another define saying \"build everything\". And then use</p>\n<pre><code>#if defined(PROJECT1) || defined(BUILDALL)\n    ...\n#endif\n</code></pre>\n<p>Or to avoid adding <code>|| defined(BUILDALL)</code> everywhere you could stick this somewhere where it will be visible:</p>\n<pre><code>#ifdef BUILDALL\n    #define PROJECT1\n    #define PROJECT2\n    //...\n#endif\n</code></pre>\n<p>Or just compile with all project macros defined</p>\n", "OwnerUserId": "169828", "PostTypeId": "2", "Id": "6599697", "Score": "1", "CreationDate": "2011-07-06T16:19:29.657", "LastActivityDate": "2011-07-06T16:19:29.657"}});