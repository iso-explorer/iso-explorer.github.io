post_cb({"11247654": {"ViewCount": "2379", "Body": "<p>It is often said that in C++11 it is sane to return <code>std::vector</code> by value.</p>\n<p>In C++03 this was mostly true as RVO should optimize away the copy.  But that <em>should</em> scared most developers away.</p>\n<ul>\n<li>In C++11 will a returned <code>std::vector</code> local variable always be moved?  </li>\n<li>What if that vector is a member of a local variable instead of a local variable itself?</li>\n<li>Obviously returning a global variable will not be moved.  What other cases will it not be moved?</li>\n</ul>\n", "AcceptedAnswerId": "11247752", "Title": "Returning std::vector by value", "CreationDate": "2012-06-28T15:14:05.640", "Id": "11247654", "CommentCount": "1", "FavoriteCount": "6", "PostTypeId": "1", "LastEditDate": "2012-06-28T15:23:28.180", "LastEditorUserId": "500104", "LastActivityDate": "2012-06-28T15:38:21.447", "Score": "18", "OwnerUserId": "28817", "Tags": "<c++><c++11><return-value><move-semantics>", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_11247654_11247831_1": {"length": 64, "quality": 0.8311688311688312, "section_id": 481}}, "n3337": {"so_11247654_11247831_1": {"length": 73, "quality": 0.948051948051948, "section_id": 472}}, "n4659": {"so_11247654_11247831_1": {"length": 60, "quality": 0.7792207792207793, "section_id": 504}}}, "11247831": {"Id": "11247831", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_11247654_11247831_0\">In C++11 will a returned <code>std::vector</code> local variable always be moved? </p>\n</blockquote>\n<p>For a local variable, even a by-value parameter, the compiler has to always <em>attempt</em> to move it first (if neither the move nor the copy can be elided for whatever reason, even if the criteria are met). If that fails, it tries again with a copy:</p>\n<p><code>\u00a712.8 [class.copy] p32</code></p>\n<blockquote>\n<p id=\"so_11247654_11247831_1\">When the criteria for elision of a copy operation are met or would be met save for the fact that the source object is a function parameter, <strong>and the object to be copied is designated by an lvalue, overload resolution to select the constructor for the copy is first performed as if the object were designated by an rvalue</strong>. If overload resolution fails, or if the type of the first parameter of the selected constructor is not an rvalue reference to the object\u2019s type (possibly cv-qualified), overload resolution is performed again, considering the object as an lvalue. [ <em>Note:</em> This two-stage overload resolution must be performed regardless of whether copy elision will occur. It determines the constructor to be called if elision is not performed, and the selected constructor must be accessible even if the call is elided. <em>\u2014end note</em> ]</p>\n<p id=\"so_11247654_11247831_2\">What if that vector is a member of a local variable instead of a local variable itself?</p>\n</blockquote>\n<p>A subobject will not be tried to be moved, as that doesn't meet the criteria for copy elision. (Which is dumb, IMHO, but that's how it currently is. I don't think the two should be linked, since a subobject can perfectly fine be moved if it's local.)</p>\n<blockquote>\n<p id=\"so_11247654_11247831_3\">Obviously returning a global variable will not be moved. What other cases will it not be moved?</p>\n</blockquote>\n<p>A reference will obviously not be moved. Other than that, I can't really think of anything else.</p>\n", "LastEditorUserId": "46642", "LastActivityDate": "2012-06-28T15:25:31.850", "Score": "8", "CreationDate": "2012-06-28T15:22:45.247", "ParentId": "11247654", "CommentCount": "2", "LastEditDate": "2012-06-28T15:25:31.850", "OwnerUserId": "500104"}, "11247752": {"Id": "11247752", "PostTypeId": "2", "Body": "<p>First, every time a copy could be elided before, it can still be elided now, and moves can be elided in the same situations. For the rest of this post I'll assume that elision doesn't happen for some reason (pretend the compiler writer was lazy in a bad way).</p>\n<blockquote>\n<p id=\"so_11247654_11247752_0\">In C++11 will a returned std::vector local variable always be moved?</p>\n</blockquote>\n<p>Every time the criteria for copy elision are met, or the variable is explicitly <code>std::move</code>d.</p>\n<blockquote>\n<p id=\"so_11247654_11247752_1\">What if that vector is a member of a local variable instead of a local variable itself?</p>\n</blockquote>\n<p>It won't be moved unless explicitly <code>std::move</code>d.</p>\n<blockquote>\n<p id=\"so_11247654_11247752_2\">Obviously returning a global variable will not be moved. What other cases will it not be moved?</p>\n</blockquote>\n<p>Every time the criteria for copy elision are not met and the variable is not explicitly <code>std::move</code>d.</p>\n<p>None of those is a valid reason to not to return by value. Return by value is ok, because even when the value is not automatically moved you can force it with <code>std::move</code>.</p>\n", "LastEditorUserId": "46642", "LastActivityDate": "2012-06-28T15:38:21.447", "Score": "15", "CreationDate": "2012-06-28T15:18:44.067", "ParentId": "11247654", "CommentCount": "6", "LastEditDate": "2012-06-28T15:38:21.447", "OwnerUserId": "46642"}});