post_cb({"23483028": {"ParentId": "23482297", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>Just use</p>\n<pre><code>L(__FUNCTION__    L\" : A diagnostic message\");\n</code></pre>\n<p>When adjacent string literals get combined, the result will be a wide string if any of the components were.</p>\n<p>There's nothing immediately wrong with using <code>L</code> as the name of a function... it's rather meaningless however.  Good variable and function identifiers should be descriptive in order to help the reader understand the code.  But the compiler doesn't care.</p>\n<hr>\n<p>Since your <code>L</code> function wraps vsprintf, you may also use:</p>\n<pre><code>L(L\"%hs : A diagnostic message\", __func__);\n</code></pre>\n<p>since <code>__func__</code> is standardized as a narrow string, the <code>%hs</code> format specifier is appropriate.</p>\n<hr>\n<p>The rule is found in 2.14.5p13:</p>\n<blockquote>\n<p id=\"so_23482297_23483028_0\">In translation phase 6 (2.2), adjacent string literals are concatenated.  If both string literals have the same <em>encoding-prefix</em>, the resulting concatenated string literal has that <em>encoding-prefix</em>.  <strong>If one string literal has no <em>encoding-prefix</em>,  it is treated as a string literal of the same <em>encoding-prefix</em> as the other operand</strong>.  If a UTF-8 string literal token is adjacent to a wide string literal token, the program is ill-formed.  Any other concatenations are conditionally-supported with implementation-de\ufb01ned behavior. </p>\n</blockquote>\n</hr></hr>", "OwnerUserId": "103167", "LastEditorUserId": "103167", "LastEditDate": "2014-05-05T22:47:07.997", "Id": "23483028", "Score": "1", "CreationDate": "2014-05-05T22:33:24.393", "LastActivityDate": "2014-05-05T22:47:07.997"}, "23483065": {"ParentId": "23482297", "CommentCount": "2", "Body": "<p>I think the definition of <code>__FUNCTIONW__</code> is incorrect. (I know you did not write it.)</p>\n<p>From: <a href=\"http://gcc.gnu.org/onlinedocs/gcc/Function-Names.html\" rel=\"nofollow\">http://gcc.gnu.org/onlinedocs/gcc/Function-Names.html</a></p>\n<blockquote>\n<p id=\"so_23482297_23483065_0\">These identifiers are not preprocessor macros. In GCC 3.3 and earlier,\n  in C only, <code>__FUNCTION__</code> and <code>__PRETTY_FUNCTION__</code> were treated as string\n  literals; they could be used to initialize char arrays, and they could\n  be concatenated with other string literals. GCC 3.4 and later treat\n  them as variables, like <code>__func__</code>. In C++, <code>__FUNCTION__</code> and\n  <code>__PRETTY_FUNCTION__</code> have always been variables.</p>\n</blockquote>\n<p>At least in current GCC then you cannot prepend <code>L</code> to <code>__FUNCTION__</code>, because it is like trying to prepend <code>L</code> to a variable. There probably was a version of VC++ (like there was of GCC) where this would have worked, but you are not using that version.</p>\n", "OwnerUserId": "3318517", "PostTypeId": "2", "Id": "23483065", "Score": "0", "CreationDate": "2014-05-05T22:36:29.427", "LastActivityDate": "2014-05-05T22:36:29.427"}, "23482500": {"ParentId": "23482297", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>You list the error as this:</p>\n<pre><code>identifier \"L__FUNCTION__\" is undefined.\n</code></pre>\n<p>Note it's saying \"<code>L__FUNCTION__</code>\" is not defined, not \"<code>__FUNCTION__</code>\".</p>\n<p>Don't use <code>__FUNCTIONW__</code> in your code. MS didn't document that in the page you linked, they documented <code>__FUNCTION__</code>. And you don't need to widen <code>__FUNCTION__</code>. </p>\n<p>ETA: I also note that you're not assigning that string to anything or printing it in anyway in <code>f()</code>. </p>\n", "OwnerUserId": "53089", "LastEditorUserId": "65863", "LastEditDate": "2014-05-05T22:31:04.947", "Id": "23482500", "Score": "1", "CreationDate": "2014-05-05T21:49:55.613", "LastActivityDate": "2014-05-05T22:31:04.947"}, "23482297": {"CommentCount": "11", "ViewCount": "1933", "PostTypeId": "1", "LastEditorUserId": "103167", "CreationDate": "2014-05-05T21:34:03.203", "LastActivityDate": "2014-05-05T22:48:30.893", "Title": "Why would __FUNCTION__ be undefined?", "AcceptedAnswerId": "23483028", "LastEditDate": "2014-05-05T22:48:30.893", "Id": "23482297", "Score": "1", "Body": "<p>I have a C++ library that uses the predefined macro <code>__FUNCTION__</code>, by way of crtdefs.h. The macro is documented <a href=\"http://msdn.microsoft.com/en-us/library/b0084kay.aspx\" rel=\"nofollow\">here</a>. Here is my usage:</p>\n<p><em>my.cpp</em></p>\n<pre><code>#include &lt;crtdefs.h&gt;\n...\nvoid f()\n{\n    L(__FUNCTIONW__ L\" : A diagnostic message\");\n}\n\nstatic void L(const wchar_t* format, ...)\n{\n    const size_t BUFFERLENGTH = 1024;\n    wchar_t buf[BUFFERLENGTH] = { 0 };\n    va_list args;\n    va_start(args, format);\n    int count = _vsnwprintf_s(buf, BUFFERLENGTH, _TRUNCATE, format, args);\n    va_end(args);\n    if (count != 0)\n    {\n        OutputDebugString(buf);\n    }\n}\n</code></pre>\n<p><em>crtdefs.h</em></p>\n<pre><code>#define __FUNCTIONW__ _STR2WSTR(__FUNCTION__) \n</code></pre>\n<p>The library (which is compiled as a static library, if that matters) is consumed by another project in the same solution, a WPF app written in C#. </p>\n<p>When I compile the lib, I get this error:</p>\n<blockquote>\n<p id=\"so_23482297_23482297_0\">identifier \"L__FUNCTION__\" is undefined.</p>\n</blockquote>\n<p>According to the docs, the macro isn't expanded if /P or /EP are passed to the compiler. I have verified that they are not. Are there other conditions where this macro is unavailable? </p>\n", "Tags": "<c++><visual-c++><macros><predefined-macro>", "OwnerUserId": "4593", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_23482297_23483028_0": {"section_id": 5362, "quality": 0.9545454545454546, "length": 42}}, "n3337": {"so_23482297_23483028_0": {"section_id": 5158, "quality": 0.9318181818181818, "length": 41}}, "n4659": {"so_23482297_23483028_0": {"section_id": 6786, "quality": 0.7727272727272727, "length": 34}}}});