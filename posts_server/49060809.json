post_cb({"bq_ids": {"n4140": {"so_49060809_49061144_0": {"length": 23, "quality": 0.8518518518518519, "section_id": 6041}}, "n3337": {"so_49060809_49061144_0": {"length": 23, "quality": 0.8518518518518519, "section_id": 5809}}, "n4659": {"so_49060809_49061144_0": {"length": 23, "quality": 0.8518518518518519, "section_id": 7540}}}, "49061144": {"Id": "49061144", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_49060809_49061144_0\"><code>[C++14: 5.2.10/2]:</code> The <code>reinterpret_cast</code> operator shall not cast away constness (5.2.11). An expression of integral, enumeration, pointer, or pointer-to-member type can be explicitly converted to its own type; such a cast yields the value of its operand.</p>\n</blockquote>\n<p>Since <code>std::size_t</code> is an integral type, and <code>Alias</code> <em>is</em> <code>std::size_t</code>, I'd say that this is an amusing Visual Studio bug.</p>\n", "LastActivityDate": "2018-03-02T00:55:32.240", "Score": "7", "CreationDate": "2018-03-02T00:55:32.240", "ParentId": "49060809", "CommentCount": "2", "OwnerUserId": "560648"}, "49060809": {"ViewCount": "73", "Body": "<p>I have some code(see below), and curiously it compiles fine when I run the code through gcc, but when I open up the same file in Visual Studio 2017, I get a compiler error to the tune of:</p>\n<pre><code>Error   C2440   'reinterpret_cast': cannot convert from '::size_t' to 'Alias'\n</code></pre>\n<p>Here's a minimal example that you can try if you want. Just hit \"new project\", and select the C++ windows console application, insert this code, and try to compile in the default x86-debug mode:</p>\n<pre><code>#include \"stdafx.h\"\n#include &lt;cstddef&gt;\n\ntypedef std::size_t Alias;\n\nAlias makeAlias(std::size_t n)\n{\n    return reinterpret_cast&lt;Alias&gt;(n);\n}\n\nint main()\n{\n    std::size_t x = 1;\n    Alias t = makeAlias(x);\n    return 0;\n}\n</code></pre>\n<p>Oddly enough if you change the return statement to this slightly more convoluted variant, it indeed compiles, so it seems like Visual Studio decided to allow <code>reinterpret_cast</code> only for pointer types:</p>\n<pre><code>return *(reinterpret_cast&lt;Alias*&gt;(&amp;n));\n</code></pre>\n<p>This strikes me as a strange decision by Visual Studio, because, according to <a href=\"http://en.cppreference.com/w/cpp/language/reinterpret_cast\" rel=\"nofollow noreferrer\">cpp reference</a>:</p>\n<blockquote>\n<p id=\"so_49060809_49060809_0\">Unlike static_cast, but like const_cast, the reinterpret_cast expression does not compile to any CPU instructions. It is purely a compiler directive which instructs the compiler to treat the sequence of bits (object representation) of expression as if it had the type new_type.</p>\n</blockquote>\n<p>So it would seem, at least to me, that if I attempt to <code>reinterpret_cast</code> between two types that occupy memory in the exact same way, then reinterpret_cast is really what is called for. After all, I am, as the name suggests, \"reinterpreting\" the same bit pattern to another type.</p>\n<p>I realize that <code>reinterpret_cast</code> is mainly targeted toward converting between pointer types, but I don't see why I should be barred from using it in situations like this. In a sort of \"use the right tool for the right job\" sense, wouldn't it make more sense to allow programmers to use <code>reinterpret_cast</code> for its intended purpose, rather than forcing them to use <code>static_cast</code> when that's not necessary (not to mention needlessly burning a few clock cycles in the process)?</p>\n<p>Is there some sort of danger in allowing <code>reinterpret_cast</code> between aliased types that would cause Visual Studio to disallow this? <code>Reinterpret_cast</code> can definitely be dangerous when used incorrectly, but I can't see why it would have to fail if used properly (unless of course I'm missing something in the definition of \"proper\" use in this case).</p>\n", "AcceptedAnswerId": "49061144", "Title": "Why this reinterpret_cast fails in Visual Studio?", "CreationDate": "2018-03-02T00:12:54.850", "LastActivityDate": "2018-03-02T01:07:32.130", "CommentCount": "8", "LastEditDate": "2018-03-02T01:07:32.130", "PostTypeId": "1", "LastEditorUserId": "5975045", "Id": "49060809", "Score": "3", "OwnerUserId": "5975045", "Tags": "<c++><visual-studio><alias><reinterpret-cast>", "AnswerCount": "1"}});