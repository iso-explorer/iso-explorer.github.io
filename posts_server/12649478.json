post_cb({"12649478": {"CreationDate": "2012-09-29T02:39:15.957", "ViewCount": "272", "Id": "12649478", "Score": "2", "Title": "Understanding floating point variables and operators in c++ (Also a possible book error)", "LastEditorUserId": "-1", "CommentCount": "2", "Body": "<p>I am working through a beginning C++ class and my book(Starting Out with C++ Early Objects 7th edition) has a very poor example of how to check the value of a floating point variable.</p>\n<p>The book example in question(filename pr4-04.cpp):</p>\n<pre><code>// This program demonstrates how to safely test a floating-point number\n// to see if it is, for all practical purposes, equal to some value.\n#include &lt;iostream&gt;\n#include &lt;cmath&gt;\nusing namespace std;\n\nint main()\n{\n    double result = .666667 * 6.0; \n\n    // 2/3 of 6 should be 4 and, if you print result, 4 is displayed.\n    cout &lt;&lt; \"result = \" &lt;&lt; result &lt;&lt; endl;\n\n    // However, internally result is NOT precisely equal to 4.\n    // So test to see if it is \"close\" to 4.\n    if (abs(result - 4.0 &lt; .0001))\n        cout &lt;&lt; \"result DOES equal 4!\" &lt;&lt; endl;\n    else\n        cout &lt;&lt; \"result DOES NOT equal 4!\" &lt;&lt; endl;\n\nreturn 0;\n}\n</code></pre>\n<p>And I use g++ in Ubuntu to compile my code like this:</p>\n<pre><code>g++ pr4-04.cpp -o pr4-04 &amp;&amp; ./pr4-04\n</code></pre>\n<p>And I get this error:</p>\n<pre><code>error: call of overloaded \u2018abs(bool)\u2019 is ambiguous\n</code></pre>\n<p>I am able to fix this by changing abs() to fabs(), but this is still super confusing! Why is the book giving us things which won't compile, or is this just me? Why does the cout of 'result' give 4 instead of 4.000002? Why does this value seem to change when it is used in the if{} statement?</p>\n<p>I get that we can't just use == to check for equivalence, but why do I need to use the absolute value? I get the same answer whether or not I use it. So what is the point?</p>\n<p>Not to mention, this seems like a very poor way to check for floating point equivalence. Is there a better way to do this? <a href=\"http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html\" rel=\"nofollow noreferrer\">This topic seems awfully important</a>.</p>\n<p>I found <a href=\"https://stackoverflow.com/questions/6873615/c-floating-point-gotcha\">this topic</a> here on stackoverflow, but their solution:</p>\n<pre><code>fabs(f1 - f2) &lt; precision-requirement\nfabs(f1 - f2) &lt; max(fabs(f1), fabs(f2)) * percentage-precision-requirement\n</code></pre>\n<p>Doesn't make much sense to me in the context of my 4 chapters worth of C++ experience. I would greatly appreciate some help. Our book has given me a whopping 6 sentences of text to explain all of this.</p>\n<p>Edit: As suggested by some I tried to find an errata page, but after 30mins of searching the textbook, internet, and my course website I was only able to find <a href=\"http://www.pearsonhighered.com/educator/product/Starting-Out-with-C-From-Control-Structures-through-Objects-7E/9780132576253.page\" rel=\"nofollow noreferrer\">this downloadable zip file</a>, which required a login -_-</p>\n<p>I also copied the code perfectly. That was not <strong>MY</strong> typo, I copied it directly from a CD with the code on it. It is also typed that way in the book.</p>\n", "Tags": "<c++><floating-point><g++><cmath><pearson>", "LastEditDate": "2017-05-23T12:18:49.367", "LastActivityDate": "2012-09-29T03:24:00.430", "PostTypeId": "1", "AnswerCount": "2", "OwnerUserId": "1707631"}, "12649495": {"LastActivityDate": "2012-09-29T02:49:48.870", "CommentCount": "2", "Body": "<p>The problem is clearly the line</p>\n<pre><code>if (abs(result - 4.0 &lt; .0001))\n</code></pre>\n<p>which should be written as</p>\n<pre><code>if (abs(result - 4.0) &lt; .0001)\n</code></pre>\n<p>I would assume that this is a simple typo. Report the error to the author of the book!</p>\n<p>BTW, the original code does compile on my system without any problem, giving the expected result! That is, even if the author tested the code he may not have noticed that it is problematic!</p>\n<p>Also answering the question on why <code>abs()</code> is needed: some decimal numbers are rounded to a floating point value which is slightly smaller than the expected result while others are rounded to number which are slightly bigger. In which direction the values are round (if at all: some decimal numbers can be represented exactly using binary floating points) is somewhat hard to predict. Thus, the <code>result</code> may be slightly bigger or slightly smaller than the expectation and the difference, thus, positive or negative, respectively.</p>\n", "PostTypeId": "2", "LastEditDate": "2012-09-29T02:49:48.870", "ParentId": "12649478", "Id": "12649495", "OwnerUserId": "1120273", "Score": "3", "CreationDate": "2012-09-29T02:42:54.727", "LastEditorUserId": "1120273"}, "12649494": {"LastActivityDate": "2012-09-29T02:52:33.783", "CommentCount": "3", "Body": "<pre><code>if (abs(result - 4.0 &lt; .0001))\n</code></pre>\n<p>The parenthesis are wrong, you probably mean: <code>if (abs(result-4.0) &lt; .0001)</code>. </p>\n<p>As to why it did not compile, the standard determines in \u00a726.8p8 that</p>\n<blockquote>\n<p id=\"so_12649478_12649494_0\">In addition to the double versions of the math functions in , C++ adds float and long double overloaded versions of these functions, with the same semantics.</p>\n</blockquote>\n<p>The expression <code>(result-4.0 &lt; .0001)</code> yields a <code>bool</code>, and there is no overload of <code>abs</code> that takes a <code>bool</code> argument, but there are multiple versions of <code>abs</code> for which the argument is implicitly convertible from <code>bool</code>. The compiler does not find one of the conversion sequences better than the rest and bails out with the ambiguity error.</p>\n", "PostTypeId": "2", "LastEditDate": "2012-09-29T02:52:33.783", "ParentId": "12649478", "Id": "12649494", "OwnerUserId": "36565", "Score": "5", "CreationDate": "2012-09-29T02:42:35.943", "LastEditorUserId": "36565"}, "bq_ids": {"n4140": {"so_12649478_12649494_0": {"length": 14, "quality": 1.0, "section_id": 3873}}, "n3337": {"so_12649478_12649494_0": {"length": 14, "quality": 1.0, "section_id": 3733}}}});