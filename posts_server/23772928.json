post_cb({"23772928": {"CommentCount": "1", "ViewCount": "206", "CreationDate": "2014-05-21T02:13:27.007", "LastActivityDate": "2014-05-21T02:22:05.563", "Title": "Recursive noexcept specification", "AcceptedAnswerId": "23772980", "PostTypeId": "1", "Id": "23772928", "Score": "6", "Body": "<p>Testing with g++ 4.9 and clang 3.4, why does this code not compile:</p>\n<pre><code>namespace {\n\ntemplate&lt;typename T&gt;\nconstexpr auto f(T &amp;&amp; t) noexcept {\n    return true;\n}\n\ntemplate&lt;typename T, typename... Ts&gt;\nconstexpr auto f(T &amp;&amp; t, Ts &amp;&amp; ... ts) noexcept(noexcept(f(ts...))) {\n    return f(ts...);\n}\n\n}   // namespace\n\nint main() {\n    f(true, 0, 5u);\n}\n</code></pre>\n<p>But this code does:</p>\n<pre><code>namespace {\n\ntemplate&lt;typename T&gt;\nconstexpr auto f(T &amp;&amp; t) noexcept {\n    return true;\n}\n\ntemplate&lt;typename T&gt;\nconstexpr auto f_helper(T &amp;&amp; t) noexcept(noexcept(f(t))) {\n    return f(t);\n}\n\ntemplate&lt;typename T, typename... Ts&gt;\nconstexpr auto f_helper(T &amp;&amp; t, Ts &amp;&amp; ... ts) noexcept(noexcept(f(ts...))) {\n    return f(ts...);\n}\n\ntemplate&lt;typename T, typename... Ts&gt;\nconstexpr auto f(T &amp;&amp; t, Ts &amp;&amp; ... ts) noexcept(noexcept(f_helper(ts...))) {\n    return f(ts...);\n}\n\n}   // namespace\n\nint main() {\n    f(true, 0, 5u);\n}\n</code></pre>\n<p>The f_helper function does not have to be defined, it just has to have the correct return type specified by way of decltype in that case.</p>\n<p>The first code also compiles for 1 or 2 arguments, but once I try to call it with 3 or more, I get errors about no matching functions to call. The clang error for the first code is:</p>\n<pre><code>source/main.cpp:9:59: error: call to function 'f' that is neither visible in the template definition nor\n      found by argument-dependent lookup\n        constexpr auto f(T &amp;&amp; t, Ts &amp;&amp; ... ts) noexcept(noexcept(f(ts...))) {\n                                                                 ^\nsource/main.cpp:9:17: note: in instantiation of exception specification for 'f&lt;bool, int, unsigned int&gt;'\n      requested here\n        constexpr auto f(T &amp;&amp; t, Ts &amp;&amp; ... ts) noexcept(noexcept(f(ts...))) {\n                       ^\nsource/main.cpp:16:3: note: in instantiation of function template specialization '&lt;anonymous\n      namespace&gt;::f&lt;bool, int, unsigned int&gt;' requested here\n                f(true, 0, 5u);\n                ^\nsource/main.cpp:9:17: note: 'f' should be declared prior to the call site\n        constexpr auto f(T &amp;&amp; t, Ts &amp;&amp; ... ts) noexcept(noexcept(f(ts...))) {\n                       ^\n1 error generated.\n</code></pre>\n", "Tags": "<c++><c++11><c++14><noexcept>", "OwnerUserId": "852254", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_23772928_23772980_0": {"section_id": 7049, "quality": 0.7857142857142857, "length": 11}}, "n3337": {"so_23772928_23772980_0": {"section_id": 6794, "quality": 0.7857142857142857, "length": 11}}, "n4659": {"so_23772928_23772980_0": {"section_id": 8546, "quality": 0.7857142857142857, "length": 11}}}, "23772980": {"ParentId": "23772928", "CommentCount": "3", "Body": "<blockquote>\n<p id=\"so_23772928_23772980_0\"><strong>3.3.2/1</strong> The point of declaration for a name is immediately after its complete declarator (Clause 8) and before its initializer (if any)...</p>\n</blockquote>\n<p><em>exception-specification</em> is syntactically part of the declarator. Thus, the function name is not in scope within its own exception-specification.</p>\n", "OwnerUserId": "1670129", "PostTypeId": "2", "Id": "23772980", "Score": "5", "CreationDate": "2014-05-21T02:22:05.563", "LastActivityDate": "2014-05-21T02:22:05.563"}});