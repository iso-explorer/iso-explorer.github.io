post_cb({"30130834": {"ViewCount": "57", "Body": "<p>Given the following definitions:</p>\n<pre class=\"lang-cpp prettyprint-override\"><code>template &lt;typename T&gt;\nclass A {\n\npublic:\n\n   void f();\n\n};\n\ntemplate &lt;typename T&gt;\nvoid\nA&lt;T&gt;::f()\n{}\n\ntemplate &lt;typename T&gt;\nclass B {};\n</code></pre>\n<p>How would I partially specialize <code>A&lt;B&lt;T&gt;&gt;::f</code>, i.e. <code>f</code> for some <code>B&lt;T&gt;</code>? I'm basically looking for the <em>right magic</em> to substitute the <code>???</code> below</p>\n<pre class=\"lang-cpp prettyprint-override\"><code>template &lt;???&gt;\nvoid\nA&lt;B&lt;T&gt;&gt;::f()\n{}\n</code></pre>\n", "AcceptedAnswerId": "30131033", "Title": "partial template member specialization", "CreationDate": "2015-05-08T18:48:29.790", "Id": "30130834", "CommentCount": "0", "LastEditDate": "2015-05-08T19:07:27.470", "PostTypeId": "1", "LastEditorUserId": "2069064", "LastActivityDate": "2015-05-08T19:51:32.267", "Score": "3", "OwnerUserId": "2548439", "Tags": "<c++><templates><partial-specialization>", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_30130834_30131033_0": {"length": 12, "quality": 1.0, "section_id": 263}}, "n3337": {"so_30130834_30131033_0": {"length": 12, "quality": 1.0, "section_id": 254}}, "n4659": {"so_30130834_30131033_0": {"length": 12, "quality": 1.0, "section_id": 270}}}, "30131033": {"Id": "30131033", "PostTypeId": "2", "Body": "<p>You can have an <em>explicit</em> specialization, from [temp.expl.spec]:</p>\n<blockquote>\n<p id=\"so_30130834_30131033_0\">An explicit specialization of any of the following:<br>\n  \u2014 ...<br>\n  \u2014 member function of a class template<br>\n  \u2014 ...<br>\n  can be declared by a declaration introduced by <code>template&lt;&gt;</code></br></br></br></br></p>\n</blockquote>\n<p>That is:</p>\n<pre><code>template &lt;&gt;\nvoid A&lt;B&lt;int&gt;&gt;::f() {\n    std::cout &lt;&lt; \"B\\n\";\n}\n</code></pre>\n<p>But you cannot have a partial specialization of a member function of a class template. You would have to partially specialize the entire class:</p>\n<pre><code>template &lt;typename T&gt;\nclass A&lt;B&lt;T&gt;&gt; {\npublic:\n    void f() {\n        std::cout &lt;&lt; \"B\\n\";\n    }\n\n    // ... all other members you want in A&lt;B&lt;T&gt;&gt; ...\n};\n</code></pre>\n", "LastEditorUserId": "2069064", "LastActivityDate": "2015-05-08T19:05:04.413", "Score": "3", "CreationDate": "2015-05-08T19:00:57.693", "ParentId": "30130834", "CommentCount": "4", "OwnerUserId": "2069064", "LastEditDate": "2015-05-08T19:05:04.413"}, "30130975": {"Id": "30130975", "PostTypeId": "2", "Body": "<p>C++11 has <a href=\"http://en.cppreference.com/w/cpp/language/type_alias\" rel=\"nofollow noreferrer\">Alias Templates</a>, allowing you do do something like:</p>\n<pre><code>template&lt;T&gt;\nusing AB = A&lt;B&lt;T&gt;&gt;;\n</code></pre>\n<p>Then you can refer to <code>AB&lt;T&gt;</code> instead of <code>A&lt;B&lt;T&gt;&gt;</code>.</p>\n<p>Unfortunately, <a href=\"https://stackoverflow.com/a/7801370/871910\">you can't use that for specialization.</a>. </p>\n<p>So seems to me the answer to your question is: You can't do that, but it's a shame.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2015-05-08T18:57:09.950", "Score": "-2", "CreationDate": "2015-05-08T18:57:09.950", "ParentId": "30130834", "CommentCount": "3", "OwnerUserId": "871910", "LastEditDate": "2017-05-23T11:43:39.010"}, "30130865": {"Id": "30130865", "PostTypeId": "2", "Body": "<p>You cannot partially specialize a member function (nor in fact any function). You need to partially specialize the whole class:</p>\n<pre><code>template&lt;typename T&gt;\nclass A&lt;B&lt;T&gt;&gt;\n{\n    // implement member functions for this specialization here\n};\n</code></pre>\n", "LastEditorUserId": "3093378", "LastActivityDate": "2015-05-08T19:51:32.267", "Score": "1", "CreationDate": "2015-05-08T18:50:55.207", "ParentId": "30130834", "CommentCount": "0", "OwnerUserId": "3093378", "LastEditDate": "2015-05-08T19:51:32.267"}, "30131182": {"Id": "30131182", "PostTypeId": "2", "Body": "<p>If you must have:</p>\n<pre><code>template &lt;typename T&gt;\nvoid A&lt;B&lt;typename T&gt;&gt;::f() {}\n</code></pre>\n<p>then your only choice is to partially specialize <code>A</code>.</p>\n<pre><code>template &lt;typename T&gt; class A&lt;B&lt;T&gt;&gt;\n{\n   public:\n      void f();\n};\n</code></pre>\n", "LastActivityDate": "2015-05-08T19:09:46.857", "CommentCount": "0", "CreationDate": "2015-05-08T19:09:46.857", "ParentId": "30130834", "Score": "0", "OwnerUserId": "434551"}});