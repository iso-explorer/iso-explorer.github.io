post_cb({"bq_ids": {"n4140": {"so_46395724_46395975_1": {"length": 18, "quality": 0.75, "section_id": 233}}, "n3337": {"so_46395724_46395975_1": {"length": 18, "quality": 0.75, "section_id": 226}}, "n4659": {"so_46395724_46395975_4": {"length": 6, "quality": 0.5454545454545454, "section_id": 8540}, "so_46395724_46395975_1": {"length": 17, "quality": 0.7083333333333334, "section_id": 243}}}, "46395975": {"Id": "46395975", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_46395724_46395975_0\">Now, I'm not sure what the standard says;</p>\n</blockquote>\n<p>This case has in fact been clarified with an example in the upcoming C++17</p>\n<blockquote>\n<p id=\"so_46395724_46395975_1\">[temp.inst]/2 The implicit instantiation of a class template specialization ... [snip] ... for the purpose of determining whether an instantiated redeclaration of a member is valid according to 3.2 [basic.def.odr] and 9.2 [class.mem], a declaration that corresponds to a definition in the template is considered to be a definition. [\u2009Example:</p>\n<p id=\"so_46395724_46395975_2\">... [snip (another example)] ...</p>\n<pre><code>template&lt;typename T&gt; struct Friendly {\n  template&lt;typename U&gt; friend int f(U) { return sizeof(T); }\n};\nFriendly&lt;char&gt; fc;\nFriendly&lt;float&gt; ff; // ill-formed: produces second definition of f(U)\n</code></pre>\n<p id=\"so_46395724_46395975_3\">\u2014\u2009end example \u2009]</p>\n</blockquote>\n<p>Admittedly as you point out, the example of the standard does produce a <em>different</em> definition for each instantiation, but that is not necessary for the example to be ill-formed according to that rule.</p>\n<blockquote>\n<p id=\"so_46395724_46395975_4\">So why can't it apply the \"oh, all inline copies of the same definition of a function are the same\" rule?</p>\n</blockquote>\n<p>This question seems to apply to the a much simpler situation as well:</p>\n<pre><code>inline void foo(){}\ninline void foo(){}\n</code></pre>\n<p>Surely a compiler can see that the definitions are identical, just as much as a compiler can see that the definition of your <code>::bar</code> depends not on the template argument of <code>Foo</code>.</p>\n<p>Yet, odr says that the re-definition is ill-formed. This is true for definitions outside a class template, as well as definitions that are caused by instantiation of a class template.</p>\n<hr>\n<p>Perhaps odr <em>could</em> be relaxed for the case that you demonstrate, but that would require complicating the standard with a special case rule, and complicate the compilers that then would have to analyse whether template arguments are used within the definition, so such relaxation certainly isn't without compromise.</p>\n</hr>", "LastEditorUserId": "2079303", "LastActivityDate": "2017-09-25T00:25:39.953", "Score": "5", "CreationDate": "2017-09-25T00:03:14.733", "ParentId": "46395724", "CommentCount": "7", "LastEditDate": "2017-09-25T00:25:39.953", "OwnerUserId": "2079303"}, "46395724": {"ViewCount": "121", "Body": "<p>MCVE's speak louder than words:</p>\n<pre><code>// int bar();\ntemplate &lt;bool B&gt; class Foo {\n    friend int ::bar() { return 123; }\n};\n\nint main()\n{\n    Foo&lt;false&gt; f1;\n    Foo&lt;true&gt; f2;\n}\n</code></pre>\n<p>with GCC 6 and <code>--std=c++14</code>, this gives me:</p>\n<pre><code>a.cpp: In instantiation of \u2018class Foo&lt;true&gt;\u2019:\na.cpp:9:12:   required from here\na.cpp:3:13: error: redefinition of \u2018int bar()\u2019\n  friend int ::bar() { return 123; }\n             ^~\na.cpp:3:13: note: \u2018int bar()\u2019 previously defined here\n</code></pre>\n<p>Now, I'm not sure what the standard says; but I know that the compiler knows that the friend is not templated on <code>B</code>, nor does its definition use <code>B</code>. So why can't it apply the \"oh, all inline copies of the same definition of a function are the same\" rule?</p>\n", "AcceptedAnswerId": "46395975", "Title": "Why can't I inline-define a non-templated friend within a templated class?", "CreationDate": "2017-09-24T23:14:36.380", "Id": "46395724", "CommentCount": "8", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2017-09-24T23:42:01.653", "LastEditorUserId": "509868", "LastActivityDate": "2017-09-25T00:25:39.953", "Score": "7", "OwnerUserId": "1593077", "Tags": "<c++><templates><language-lawyer><inline><friend>", "AnswerCount": "1"}});