post_cb({"26516944": {"ParentId": "26516278", "CommentCount": "5", "Body": "<p>It seems a <a href=\"http://webcache.googleusercontent.com/search?q=cache:NgADGku05cwJ:https://groups.google.com/d/topic/comp.lang.c%252B%252B/DJpywE3Y6Y4%20&amp;cd=10&amp;hl=it&amp;ct=clnk&amp;gl=it\" rel=\"nofollow\">long-standing MSVC design issue</a> by Dinkumware (the STL-provider for Microsoft) when setting a 0-position with seekp on a stream associated with an empty content. Apparently they did this to have the compiler conform to the <a href=\"http://www.peren.com/pages/cppvs_set.htm\" rel=\"nofollow\">Perennial C++ test suite</a> and that the standard dictated that.</p>\n<p>I find this not very clear with N3797 since <em>\u00a727.7.3.5 basic_ostream seek members/p3</em> says</p>\n<blockquote>\n<p id=\"so_26516278_26516944_0\">basic_ostream&amp; seekp(pos_type pos); </p>\n<p id=\"so_26516278_26516944_1\">3 Effects: If fail()\n  != true, executes </p>\n<blockquote>\n<p id=\"so_26516278_26516944_4\"><strong>rdbuf()-&gt;pubseekpos(pos, ios_base::out)</strong>. In case of\n    failure, the function calls setstate(failbit) (which may throw\n    ios_base::failure). </p>\n</blockquote>\n<p id=\"so_26516278_26516944_3\">4 Returns: *this.</p>\n</blockquote>\n<p>And calling <code>pubseekpos</code> (equivalent) directly doesn't trigger any bug.</p>\n<p>Tested with MSVC2013Update4:</p>\n<pre><code>int main() {\n    std::stringstream s;\n    s.str(\"\");\n    if (s.fail())\n        cout &lt;&lt; \"bad\"; // not printed\n    s.seekp(0);\n    // s.rdbuf()-&gt;pubseekpos(0, ios_base::out); // Equivalent as per 27.7.3.5/3\n    if (s.fail())\n        cout &lt;&lt; \"bad\"; // printed\n}\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/0d1ba9703fae7337\" rel=\"nofollow\">Clang</a> and <a href=\"http://coliru.stacked-crooked.com/a/a1afde8a073739a5\" rel=\"nofollow\">gcc</a> work just fine.</p>\n", "OwnerUserId": "1938163", "PostTypeId": "2", "Id": "26516944", "Score": "0", "CreationDate": "2014-10-22T20:54:55.063", "LastActivityDate": "2014-10-22T20:54:55.063"}, "26516278": {"CommentCount": "7", "ViewCount": "265", "PostTypeId": "1", "LastEditorUserId": "1938163", "CreationDate": "2014-10-22T20:12:42.843", "LastActivityDate": "2014-10-23T13:28:14.183", "Title": "reuse stringstream after rdbuf", "AcceptedAnswerId": "26516944", "LastEditDate": "2014-10-23T13:28:14.183", "Id": "26516278", "Score": "1", "Body": "<p>Is it possible to reuse a stringstream <code>s</code> after pushing the buffer to another stream <code>stream</code> with the <code>.rdbuf()</code> function?</p>\n<p>I reconstructed the circumstances:</p>\n<p><a href=\"http://ideone.com/JoPJ1E\" rel=\"nofollow\">http://ideone.com/JoPJ1E</a></p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n#include &lt;fstream&gt;\n#include &lt;sstream&gt;\n#include &lt;assert.h&gt;\n\nofstream f(\"t.txt\");\n\nvoid dump(stringstream &amp; s){\n    f &lt;&lt; s.rdbuf();\n    assert(f.good()); // THIS ASSERT FAILS IN my code (see main)\n}\n\nvoid doit1(){\n\n  static std::stringstream s;\n\n  s.str(\"\");\n  s.clear();\n  s.seekp(0);\n  s.seekg(0);\n\n  s &lt;&lt; \"1\";\n  dump(s);\n\n}\n\nvoid doit2(){\n  // your code goes here\n  std::stringstream s;\n  s &lt;&lt; \"2\";\n  dump(s);\n\n}\n\nint main() {\n    // your code goes here\n    doit2();\n    doit1(); // ASSERT FAILS HERE\n}\n</code></pre>\n<p>My program does not crash, and there is no output in the text file!\n<strong>The assert fails exactly by calling doit1(), why does doit2 set the stream <code>f</code> in a bad state??</strong></p>\n<p>Any idea what could be wrong here?</p>\n", "Tags": "<c++><stringstream>", "OwnerUserId": "293195", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_26516278_26516944_4": {"section_id": 2283, "quality": 1.0, "length": 10}, "so_26516278_26516944_2": {"section_id": 2283, "quality": 1.0, "length": 10}}, "n3337": {"so_26516278_26516944_4": {"section_id": 2271, "quality": 1.0, "length": 10}, "so_26516278_26516944_2": {"section_id": 2271, "quality": 1.0, "length": 10}}, "n4659": {"so_26516278_26516944_4": {"section_id": 2556, "quality": 1.0, "length": 10}, "so_26516278_26516944_2": {"section_id": 2556, "quality": 1.0, "length": 10}}}});