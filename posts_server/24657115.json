post_cb({"24657269": {"Id": "24657269", "PostTypeId": "2", "Body": "<p>First of all, the provided code is not valid, since you cannot initialize non-constant reference with constant reference.</p>\n<p>Regarding your question, it might be easier to consider reference as a special kind of <em>pointer</em> to the object, which is automatically referenced (the sentence you quoted is quite misleading).</p>\n", "LastActivityDate": "2014-07-09T15:05:57.847", "CommentCount": "2", "CreationDate": "2014-07-09T15:05:57.847", "ParentId": "24657115", "Score": "0", "OwnerUserId": "935152"}, "24657115": {"ViewCount": "89", "Body": "<p>I often see statements like below in C++ books regarding reference:  </p>\n<blockquote>\n<p id=\"so_24657115_24657115_0\">Reference is just another name of the original object. When it is used, it is replaced by the original object (in most cases).  </p>\n</blockquote>\n<p>Here is the question: \nIf I bind a const ref to a non-const object, when this const ref being used and replaced by the original object, does the const-ness goes away? </p>\n<pre><code>int i = 42;  \nconst int &amp; r1 = i;  \nint &amp; r2 = r1; // Question: shouldn't r1 here just be replaced by the original object, which is **non-const**?\n</code></pre>\n", "AcceptedAnswerId": "24657806", "Title": "When const ref being replaced by the original object (non-const), does the const-ness goes away?", "CreationDate": "2014-07-09T14:59:37.320", "Id": "24657115", "CommentCount": "0", "LastEditDate": "2014-07-09T15:09:26.880", "PostTypeId": "1", "OwnerDisplayName": "user3424826", "LastEditorUserId": "3808886", "LastActivityDate": "2014-07-15T05:25:40.683", "Score": "1", "Tags": "<c++><const><object-reference>", "AnswerCount": "5"}, "24657378": {"Id": "24657378", "PostTypeId": "2", "Body": "<p>Simple answer: No</p>\n<p>Longer answer: You cannot do that. Once you have a <code>const &amp;</code> it will always stay const (unless you do const casting or some other explicit things). This is by design as otherwise const-correctness wouldn't really mean much and also the reason why you cannot compile your code.</p>\n", "LastActivityDate": "2014-07-09T15:10:49.567", "CommentCount": "0", "CreationDate": "2014-07-09T15:10:49.567", "ParentId": "24657115", "Score": "2", "OwnerUserId": "2725719"}, "24657420": {"Id": "24657420", "PostTypeId": "2", "Body": "<p>Your question is confused, anyway, assigning to a reference does <em>not</em> change the constness of the original object.</p>\n<p>And your code won't compile without <a href=\"http://en.cppreference.com/w/cpp/language/const_cast\" rel=\"nofollow\">const_cast</a>.</p>\n<pre><code>int&amp; r2 = const_cast&lt;int&amp;&gt;(r1);\n</code></pre>\n<p>You can use <code>const_cast</code> for casting away the constness.</p>\n", "LastEditorUserId": "3309790", "LastActivityDate": "2014-07-09T15:17:44.980", "Score": "0", "CreationDate": "2014-07-09T15:12:29.570", "ParentId": "24657115", "CommentCount": "4", "OwnerUserId": "3309790", "LastEditDate": "2014-07-09T15:17:44.980"}, "bq_ids": {"n4140": {"so_24657115_24657806_0": {"length": 7, "quality": 0.875, "section_id": 3321}}, "n3337": {"so_24657115_24657806_0": {"length": 7, "quality": 0.875, "section_id": 3191}}, "n4659": {"so_24657115_24657806_0": {"length": 8, "quality": 1.0, "section_id": 4086}}}, "24657806": {"Id": "24657806", "PostTypeId": "2", "Body": "<p>The reason why <code>int &amp; r2 = r1;</code> fails is because you dropped cv-qualifier <code>const</code> when reference-relate r2 to r1.</p>\n<p>See C++ standard working draft, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3797.pdf\" rel=\"nofollow\">n3797</a>, 8.5.3/5:  </p>\n<blockquote>\n<p id=\"so_24657115_24657806_0\">If T1 is reference-related to T2, cv1 shall be the same cv-qualification as, or greater\n  cv-qualification than, cv2.</p>\n</blockquote>\n", "LastActivityDate": "2014-07-09T15:30:08.700", "CommentCount": "0", "CreationDate": "2014-07-09T15:30:08.700", "ParentId": "24657115", "Score": "0", "OwnerUserId": "3701346"}, "24657231": {"Id": "24657231", "PostTypeId": "2", "Body": "<p>The books are lying. C++ references are <code>* const</code> pointers in disguise with some special syntax. A const reference can extend the life of a temporary, which pointers can't. That's it.</p>\n<p>References were only invented to allow convenient syntax for operator overloading. I still like references and use them, but I'm under no illusions that they are \"magical\" and \"totally different to pointers\".</p>\n", "LastEditorUserId": "229044", "LastActivityDate": "2014-07-15T05:25:40.683", "Score": "-1", "CreationDate": "2014-07-09T15:04:25.867", "ParentId": "24657115", "CommentCount": "14", "OwnerUserId": "2068573", "LastEditDate": "2014-07-15T05:25:40.683"}});