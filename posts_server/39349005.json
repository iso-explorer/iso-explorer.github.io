post_cb({"bq_ids": {"n4140": {"so_39349005_39349199_0": {"length": 4, "quality": 0.8, "section_id": 568}, "so_39349005_39349199_1": {"length": 4, "quality": 0.5714285714285714, "section_id": 5991}}, "n3337": {"so_39349005_39349199_0": {"length": 4, "quality": 0.8, "section_id": 106}, "so_39349005_39349199_1": {"length": 4, "quality": 0.5714285714285714, "section_id": 5759}}, "n4659": {"so_39349005_39349199_0": {"length": 4, "quality": 0.8, "section_id": 204}, "so_39349005_39349199_1": {"length": 5, "quality": 0.7142857142857143, "section_id": 7709}}}, "39349199": {"Id": "39349199", "PostTypeId": "2", "Body": "<p>As mentioned in <a href=\"http://eel.is/c++draft/class.this#1\">[9.2.2.1/1]</a> of the working draft (the this pointer):</p>\n<blockquote>\n<p id=\"so_39349005_39349199_0\">The type of\u00a0<strong>this</strong>\u00a0in a member function of a class\u00a0X\u00a0is\u00a0X*.</p>\n</blockquote>\n<p>Note that the constructor is a <em>special member function</em> and <code>A</code> is a subobject of <code>B</code>, thus the <code>this</code> pointer within the body of the member functions of <code>A</code> is of type <code>A*</code>, while it is of type <code>B*</code> within the member functions of <code>B</code>.<br>\nNote also that the <code>this</code> from <code>A</code> and the <code>this</code> from <code>B</code> can also have different values, that is they can point to different subobjects.<br>\nAs an example:</br></br></p>\n<pre><code>#include&lt;iostream&gt;\n\nstruct A {\n    A() { std::cout &lt;&lt; this &lt;&lt; std::endl; }\n    int i{0};\n};\n\nstruct B: A {\n    B() { std::cout &lt;&lt; this &lt;&lt; std::endl; }\n    virtual void f() {}\n};\n\nint main() {\n    B b;\n}\n</code></pre>\n<hr>\n<p>That said:</p>\n<blockquote>\n<p id=\"so_39349005_39349199_1\">Does this mean the type of\u00a0<strong>this</strong>\u00a0pointer passed to constructor <code>A()</code> is of type\u00a0<code>A</code>?</p>\n</blockquote>\n<p>No, it isn't. It's of type <code>A*</code>.</p>\n<hr>\n<p><strong>EDIT</strong></p>\n<p>Despite the OP edited the question and changed its meaning, I'd rather leave in this answer the quote from the original question.<br>\nA rollback would be a proper action for that edit maybe.<br>\nAnyway, the answer still applies.</br></br></p>\n</hr></hr>", "LastEditorUserId": "4987285", "LastActivityDate": "2016-09-06T13:08:20.090", "Score": "8", "CreationDate": "2016-09-06T12:37:02.983", "ParentId": "39349005", "CommentCount": "0", "LastEditDate": "2016-09-06T13:08:20.090", "OwnerUserId": "4987285"}, "39349023": {"Id": "39349023", "PostTypeId": "2", "Body": "<p>Yes, that is precisely what it means.</p>\n", "LastActivityDate": "2016-09-06T12:26:52.223", "Score": "4", "CreationDate": "2016-09-06T12:26:52.223", "ParentId": "39349005", "CommentCount": "7", "OwnerUserId": "596781"}, "39349005": {"ViewCount": "659", "Body": "<p>I have this code:</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nstruct A;\nstruct B;\n\nvoid g(A* a){ cout &lt;&lt; \"A\";}\nvoid g(B* b){ cout &lt;&lt; \"B\";}\n\nstruct A{\n    A(){ g(this); }\n};\n\nstruct B : A{\n    B(){}\n};\n\n\nint main() {\n    B* b=new B();\n    return 0;\n}\n</code></pre>\n<p>in which the output is :</p>\n<blockquote>\n<p id=\"so_39349005_39349005_0\">A</p>\n</blockquote>\n<p>Does this mean the type of <code>this</code> pointer passed to constructor <code>A()</code> is of type <code>A*</code>? </p>\n", "AcceptedAnswerId": "39349041", "Title": "Calling global function from constructor", "CreationDate": "2016-09-06T12:25:43.697", "Id": "39349005", "CommentCount": "6", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2016-09-06T12:47:07.770", "LastEditorUserId": "2660756", "LastActivityDate": "2016-09-06T13:08:20.090", "Score": "10", "OwnerUserId": "2660756", "Tags": "<c++><oop>", "AnswerCount": "3"}, "39349041": {"Id": "39349041", "PostTypeId": "2", "Body": "<p>Yes.</p>\n<p>The thing is a <code>B</code> object is also a <code>A</code> object. While you are inside of the functions of <code>A</code> the class does not know if it is a <code>B</code> or not. So the <code>this</code>-ptr will be of type <code>A*</code>. </p>\n<p>When you are calling functions inside of <code>B</code> it is <code>B*</code>.</p>\n", "LastEditorUserId": "152359", "LastActivityDate": "2016-09-06T12:47:43.313", "Score": "12", "CreationDate": "2016-09-06T12:28:05.450", "ParentId": "39349005", "CommentCount": "7", "LastEditDate": "2016-09-06T12:47:43.313", "OwnerUserId": "152359"}});