post_cb({"32172210": {"Id": "32172210", "PostTypeId": "2", "Body": "<p>Yes, it's always the same object. By [dcl.fct.spec]/4:</p>\n<blockquote>\n<p id=\"so_32172137_32172210_0\">An <code>inline</code> function with external linkage shall have the same address in all translation units. A <code>static</code> local variable in an <code>extern inline</code> function always refers to the same object. A type defined within the body of an <code>extern inline</code> function is the same type in every translation unit.</p>\n</blockquote>\n", "LastActivityDate": "2015-08-23T22:33:08.893", "CommentCount": "2", "CreationDate": "2015-08-23T22:33:08.893", "ParentId": "32172137", "Score": "9", "OwnerUserId": "596781"}, "bq_ids": {"n4140": {"so_32172137_32172210_0": {"length": 32, "quality": 1.0, "section_id": 5404}}, "n3337": {"so_32172137_32172210_0": {"length": 32, "quality": 1.0, "section_id": 5199}}, "n4659": {"so_32172137_32172210_0": {"length": 30, "quality": 0.9375, "section_id": 6853}}}, "32172137": {"ViewCount": "372", "Body": "<p>If I have a static local variable or thread_local local variable that is within an inline function that is defined in different translation units, in the final program are they guaranteed by the standard to have the same address?</p>\n<pre><code>// TU1:\ninline int* f() { static int x; return &amp;x; }\nextern int* a;\nvoid sa() { a = f(); }\n\n// TU2:\ninline int* f() { static int x; return &amp;x; }\nextern int* b;\nvoid sb() { b = f(); }\n\n// TU3:\nint *a, *b;\nvoid sa();\nvoid sb();\nint main() { sa(); sb(); return a == b; }\n</code></pre>\n<p>Will the above always return 1?</p>\n", "AcceptedAnswerId": "32172210", "Title": "Local static/thread_local variables of inline functions?", "CreationDate": "2015-08-23T22:22:58.523", "Id": "32172137", "CommentCount": "0", "FavoriteCount": "3", "PostTypeId": "1", "LastEditDate": "2015-08-24T00:20:42.287", "LastEditorUserId": "1535629", "LastActivityDate": "2015-08-24T00:20:42.287", "Score": "11", "OwnerUserId": "1131467", "Tags": "<c++><c++11><c++14>", "AnswerCount": "1"}});