post_cb({"bq_ids": {"n4140": {"so_26164094_26164236_0": {"length": 23, "quality": 0.92, "section_id": 1173}}, "n3337": {"so_26164094_26164236_0": {"length": 23, "quality": 0.92, "section_id": 1171}}, "n4659": {"so_26164094_26164236_0": {"length": 23, "quality": 0.92, "section_id": 1262}}}, "26164236": {"Id": "26164236", "PostTypeId": "2", "Body": "<p><em>[atomics.types.generic]/p9</em></p>\n<blockquote>\n<p id=\"so_26164094_26164236_0\">Note: The representation of an atomic specialization need not have the same size as its corresponding\n  argument type. Specializations should have the same size whenever possible, as this reduces the effort\n  required to port existing code</p>\n</blockquote>\n<p>No, you can't assume that. It's a <em>best-effort</em> endeavor but no guarantees.</p>\n", "LastActivityDate": "2014-10-02T15:28:07.847", "Score": "6", "CreationDate": "2014-10-02T15:28:07.847", "ParentId": "26164094", "CommentCount": "0", "OwnerUserId": "1938163"}, "26164094": {"ViewCount": "542", "Body": "<p>Does the standard say that <code>sizeof(std::atomic&lt;T&gt;)</code> is equal to <code>sizeof(T)</code>?</p>\n<p>(I'm investigating building union of atomic and other types for use across an ABI that ideally should not have STL types. If the sizes are identical then this could work).</p>\n", "AcceptedAnswerId": "26164236", "Title": "Size of atomic types", "CreationDate": "2014-10-02T15:19:29.533", "Id": "26164094", "CommentCount": "1", "PostTypeId": "1", "LastActivityDate": "2014-10-02T15:28:07.847", "Score": "2", "OwnerUserId": "3415258", "Tags": "<c++>", "AnswerCount": "1"}});