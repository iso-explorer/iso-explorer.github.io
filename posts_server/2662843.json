post_cb({"2662843": {"ViewCount": "667", "Body": "<p>I would like to know if the following is allowed:</p>\n<pre><code>template &lt; class C &gt;\nvoid function(C&amp;);\n\nvoid function() {\n  class {} local;\n  function(local);\n}\n</code></pre>\n<p>thanks</p>\n", "AcceptedAnswerId": "2662848", "Title": "C++ can local class reference be passed to a function?", "CreationDate": "2010-04-18T15:55:23.193", "Id": "2662843", "CommentCount": "0", "LastEditDate": "2010-04-18T21:59:31.793", "PostTypeId": "1", "LastEditorUserId": "168225", "LastActivityDate": "2010-04-18T21:59:31.793", "Score": "4", "OwnerUserId": "206328", "Tags": "<c++><local-class>", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_2662843_2662848_0": {"length": 8, "quality": 0.6666666666666666, "section_id": 7141}}, "n3337": {"so_2662843_2662848_0": {"length": 8, "quality": 0.6666666666666666, "section_id": 6885}}, "n4659": {"so_2662843_2662848_0": {"length": 8, "quality": 0.6666666666666666, "section_id": 8642}}}, "2663124": {"Id": "2663124", "PostTypeId": "2", "Body": "<p>It's allowed if you use polymorphism instead of templates. Or if you don't need to extend the interface seen by <code>function</code>, simple inheritance will do.</p>\n<pre><code>void function( ABC &amp; );\n\nvoid function() {\n  class special : public ABC {\n      virtual void moof() {}\n  } local;\n  function(local);\n}\n</code></pre>\n", "LastActivityDate": "2010-04-18T17:12:24.057", "CommentCount": "0", "CreationDate": "2010-04-18T17:12:24.057", "ParentId": "2662843", "Score": "0", "OwnerUserId": "153285"}, "2662848": {"Id": "2662848", "PostTypeId": "2", "Body": "<p>It's not allowed right now. But it's supported in C++0x. The current Standard says at <code>14.3.1/2</code></p>\n<blockquote>\n<p id=\"so_2662843_2662848_0\">A local type, a type with no linkage, an unnamed type or a type compounded from any of these types shall not be used as a template-argument for a template type-parameter.</p>\n</blockquote>\n<p>That said, if the function is also local, there's no problem</p>\n<pre><code>void f() {\n  class L {} local;\n  struct C {\n    static void function(L &amp;l) {\n      // ...\n    }\n  };\n  C::function(local);\n}\n</code></pre>\n", "LastEditorUserId": "34509", "LastActivityDate": "2010-04-18T16:03:07.517", "Score": "6", "CreationDate": "2010-04-18T15:56:32.887", "ParentId": "2662843", "CommentCount": "3", "OwnerUserId": "34509", "LastEditDate": "2010-04-18T16:03:07.517"}});