post_cb({"26721182": {"ParentId": "26721092", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>For function templates you may only write the default arguments in the <em>first</em> declaration in any given scope; and, indeed, there is another rule that prohibits writing the default arguments in the friend declaration:</p>\n<blockquote>\n<p id=\"so_26721092_26721182_0\"><code>[C++11: 8.3.6/4]:</code> For non-template functions, default arguments can be added in later declarations of a function in the same scope. <em>[..]</em> If a friend declaration speci\ufb01es a default argument expression, that declaration shall be a de\ufb01nition and shall be the only declaration of the function or function template in the translation unit.</p>\n</blockquote>\n<p>However, there's nothing stopping you from adding yet another declaration, this time not a friend declaration, before everything else, and put your default arguments on that.</p>\n<p>So, in order:</p>\n<ol>\n<li>Declaration of function template, with default arguments</li>\n<li>Class definition with friend declaration</li>\n<li>Definition of function template</li>\n</ol>\n", "OwnerUserId": "560648", "LastEditorUserId": "560648", "LastEditDate": "2014-11-03T20:27:43.413", "Id": "26721182", "Score": "2", "CreationDate": "2014-11-03T19:04:11.487", "LastActivityDate": "2014-11-03T20:27:43.413"}, "26721678": {"ParentId": "26721092", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>I think if you declare the template function before friending it that would work, but I can't figure out what your main.cpp has to test. Did you try this (EDIT: this seems to work on coliru but I can't test your real-world scenario).</p>\n<pre><code>template &lt;class T&gt;\nvoid f(T t = T());\n\nstruct X\n{\n    template &lt;class T&gt;\n    friend void f(T t);\n};\n\ntemplate &lt;class T&gt;\nvoid f(T t) {}\n</code></pre>\n", "OwnerUserId": "251738", "LastEditorUserId": "251738", "LastEditDate": "2014-11-03T19:41:32.837", "Id": "26721678", "Score": "1", "CreationDate": "2014-11-03T19:34:41.807", "LastActivityDate": "2014-11-03T19:41:32.837"}, "26721092": {"CommentCount": "2", "AcceptedAnswerId": "26721182", "PostTypeId": "1", "LastEditorUserId": "560648", "CreationDate": "2014-11-03T18:58:37.300", "LastActivityDate": "2014-11-03T20:27:43.413", "LastEditDate": "2014-11-03T19:01:33.853", "ViewCount": "395", "FavoriteCount": "1", "Title": "How to give a friend function a default argument while separating declaration and definition", "Id": "26721092", "Score": "2", "Body": "<p>I have a function template that I'm declaring as a friend of my class. The thing is, I want to keep the declaration and definition separate because I don't want to clutter the body of <code>X</code>, but I'm running into problems when using the default argument of <code>T()</code>:</p>\n<pre><code>struct X\n{\n    template &lt;class T&gt;\n    friend void f(T t);\n};\n\ntemplate &lt;class T&gt;\nvoid f(T t = T()) {}\n\n// error: default arguments cannot be added to a function template that has\n// already been declared\n// void f(T t = T()) {}\n//          ^   ~~~\n// main.cpp:9:17: note: previous template declaration is here\n//     friend void f(T t);\n//                 ^\n</code></pre>\n<p>If I switch it around to use default arguments in the declaration instead, then the compiler outputs a message saying I have to <em>define</em> the function there, but I don't want to do that.</p>\n<p>How do I give a default argument to a friend function template while keeping the definition and declaration separate?</p>\n", "Tags": "<c++>", "OwnerUserId": "2030677", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_26721092_26721182_0": {"section_id": 3255, "quality": 0.8214285714285714, "length": 23}}, "n3337": {"so_26721092_26721182_0": {"section_id": 3127, "quality": 0.8214285714285714, "length": 23}}, "n4659": {"so_26721092_26721182_0": {"section_id": 4013, "quality": 0.8214285714285714, "length": 23}}}});