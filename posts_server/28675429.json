post_cb({"28675429": {"CommentCount": "5", "ViewCount": "121", "PostTypeId": "1", "LastEditorUserId": "3970469", "CreationDate": "2015-02-23T13:57:38.463", "LastActivityDate": "2015-02-23T14:18:49.050", "Title": "How to value-initialize aggregate types with list-initialization", "AcceptedAnswerId": "28675860", "LastEditDate": "2015-02-23T14:09:08.797", "Id": "28675429", "Score": "1", "Body": "<p>How can one value-initialize aggregate types in C++14 with the list-intialization syntax?</p>\n<pre><code>Aggregate_t {}; \n</code></pre>\n<p>This is seen as aggregate initialization, which produces errors or warnings for uninitialized members of <code>Aggregate_t</code>.</p>\n<p>Is this possible at all?</p>\n<p><strong>EDIT</strong>: examples</p>\n<pre><code>struct Aggregate_t {\n  int x;\n};\n\nint main (int, char**)\n{\n  Aggregate_t {};\n  return 0;\n}\n</code></pre>\n<p>Compiling with g++-4.9.2:</p>\n<pre><code>main.c++: In function \u2018int main(int, char**)\u2019:\nmain.c++:7:16: warning: missing initializer for member \u2018Aggregate_t::x\u2019 [-Wmissing-field-initializers]\n   Aggregate_t {};\n            ^\n</code></pre>\n", "Tags": "<c++><c++14><value-initialization><list-initialization><aggregate-initialization>", "OwnerUserId": "3970469", "AnswerCount": "1"}, "28675860": {"ParentId": "28675429", "CommentCount": "3", "Body": "<p><strong>[dcl.init.aggr]</strong>:</p>\n<blockquote>\n<p id=\"so_28675429_28675860_0\">7 - If there are fewer <em>initializer-clauses</em> in the list than there are members in the aggregate, then each member not explicitly initialized shall be initialized [<em>C++14</em>: from its <em>brace-or-equal-initializer</em> or, if there is no <em>brace-or-equal-initializer</em>,] from an empty initializer list (8.5.4).</p>\n</blockquote>\n<p>So g++ is being overzealous with its warning; I don't know of a way to avoid it while preserving it in cases where the warning is valid, except of course to use copy-initialization with expected copy elision:</p>\n<pre><code>Aggregate_t a = Aggregate_t();\n</code></pre>\n", "OwnerUserId": "567292", "PostTypeId": "2", "Id": "28675860", "Score": "2", "CreationDate": "2015-02-23T14:18:49.050", "LastActivityDate": "2015-02-23T14:18:49.050"}, "bq_ids": {"n4140": {"so_28675429_28675860_0": {"section_id": 3304, "quality": 0.9130434782608695, "length": 21}}, "n3337": {"so_28675429_28675860_0": {"section_id": 3174, "quality": 0.7391304347826086, "length": 17}}, "n4659": {"so_28675429_28675860_0": {"section_id": 4070, "quality": 0.6956521739130435, "length": 16}}}});