post_cb({"24409775": {"ParentId": "24409307", "CommentCount": "0", "Body": "<p>The code is well-formed.  7.3.3/15:</p>\n<blockquote>\n<p id=\"so_24409307_24409775_0\">When a <em>using-declaration</em> brings names from a base class into a derived class scope, member functions and member function templates in the derived class override and/or hide member functions and member function templates with the same name, parameter-type-list (8.3.5), cv-qualification, and <em>ref-qualifier</em> (if any) in a base class (rather than conflicting).</p>\n</blockquote>\n<p>So <code>UserModifiedPolicy::operator()(int)</code> should still hide <code>DefaultPolicy::operator()(int)</code>.  And name lookup for <code>operator()</code> should find the three members <code>DefaultPolicy::operator()(bool)</code>, <code>UserModifiedPolicy::operator()(int)</code>, and <code>UserModifiedPolicy::operator()(float)</code>.</p>\n", "OwnerUserId": "459640", "PostTypeId": "2", "Id": "24409775", "Score": "2", "CreationDate": "2014-06-25T13:15:54.630", "LastActivityDate": "2014-06-25T13:15:54.630"}, "24409307": {"CommentCount": "4", "ViewCount": "307", "PostTypeId": "1", "LastEditorUserId": "2018010", "CreationDate": "2014-06-25T12:56:53.743", "LastActivityDate": "2014-10-19T12:19:48.247", "Title": "VC++ 2013: using-declaration + redefinition of member function leads to compile error", "AcceptedAnswerId": "24409775", "LastEditDate": "2014-10-19T12:19:48.247", "Id": "24409307", "Score": "4", "Body": "\n<p>I want to allow to modify behaviour of my class by specifing policy. This policy shoud be used as visitor for boost::variant. There is default policy that fits most cases good, but user may need to add or replace some overloads.</p>\n<p>I found that vc++ 2013 doesn't compile this code with error <code>C3066: there are multiple ways that an object of this type can be called with these arguments</code>. Same code compiles and works as expected in gcc and clang.</p>\n<p>Is it vc++ 2013 bug?</p>\n<pre class=\"lang-cpp prettyprint-override\"><code>#include &lt;iostream&gt;\n\nstruct DefaultPolicy\n{\n    void operator()( bool ) { std::cout &lt;&lt; \"Base: bool\" &lt;&lt; std::endl; }\n    void operator()( int ) { std::cout &lt;&lt; \"Base: int\" &lt;&lt; std::endl; }\n};\n\nstruct UserModifiedPolicy : public DefaultPolicy\n{\n    using DefaultPolicy::operator();\n    void operator()( int ) { std::cout &lt;&lt; \"Derived: int\" &lt;&lt; std::endl; }\n    void operator()( float ) { std::cout &lt;&lt; \"Derived: float\" &lt;&lt; std::endl; }\n};\n\nint main()\n{\n    UserModifiedPolicy()(true);\n    UserModifiedPolicy()(1); // &lt;-- ERROR HERE\n    UserModifiedPolicy()(1.f);\n    return 0;\n}\n</code></pre>\n<hr>\n<p><strong>UPD</strong> This exaple works in vc++ 2010. Looks like it is a bug in 2013 version.</p>\n<hr>\n<p><strong>UPD</strong> Workaround</p>\n<pre class=\"lang-cpp prettyprint-override\"><code>#include &lt;iostream&gt;\n\nstruct DefaultPolicy\n{\n    void operator()( bool ) { std::cout &lt;&lt; \"Base: bool\" &lt;&lt; std::endl; }\n    void operator()( int ) { std::cout &lt;&lt; \"Base: int\" &lt;&lt; std::endl; }\n};\n\nstruct UserModifiedPolicy : public DefaultPolicy\n{\n    // Using template to forward a call to the base class:\n    template&lt; class T &gt;\n    void operator()( T &amp;&amp; t ) { DefaultPolicy::operator()( std::forward&lt;T&gt;(t) ); }\n\n    void operator()( int ) { std::cout &lt;&lt; \"Derived: int\" &lt;&lt; std::endl; }\n    void operator()( float ) { std::cout &lt;&lt; \"Derived: float\" &lt;&lt; std::endl; }\n};\n\nint main()\n{\n    UserModifiedPolicy()(true);\n    UserModifiedPolicy()(1);\n    UserModifiedPolicy()(1.f);\n    return 0;\n}\n</code></pre>\n</hr></hr>", "Tags": "<c++><visual-c++-2013>", "OwnerUserId": "2018010", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_24409307_24409775_0": {"section_id": 5504, "quality": 0.9722222222222222, "length": 35}}, "n3337": {"so_24409307_24409775_0": {"section_id": 5290, "quality": 0.9722222222222222, "length": 35}}, "n4659": {"so_24409307_24409775_0": {"section_id": 6938, "quality": 0.8888888888888888, "length": 32}}}});