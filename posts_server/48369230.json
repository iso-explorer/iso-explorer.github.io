post_cb({"bq_ids": {"n4140": {"so_48369230_48369719_0": {"length": 20, "quality": 0.7692307692307693, "section_id": 4429}}, "n3337": {"so_48369230_48369719_0": {"length": 20, "quality": 0.7692307692307693, "section_id": 4266}}, "n4659": {"so_48369230_48369719_0": {"length": 22, "quality": 0.8461538461538461, "section_id": 5688}}}, "48369719": {"Id": "48369719", "PostTypeId": "2", "Body": "<p>C++17 <code>shared_ptr&lt;T&gt;::operator[]</code> is well defined only for array types, std::vector is <strong>not</strong> an array type (say, <code>int[]</code>,<code>int[3]</code>,etc.. are). That said, the relevant standard doc reads:</p>\n<blockquote>\n<p id=\"so_48369230_48369719_0\"><strong>[util.smartptr.shared.obs]</strong> element_type&amp; operator[](ptrdiff_t i) const[...]<em>Remarks</em>: When T is not an array type, it is unspecified whether this member function is declared. If it is declared, it is unspecified what its return type is, except that the declaration (although not necessarily the definition) of the function shall be well formed.</p>\n</blockquote>\n<p>this means that an implementation may provide a member subscript operator even for non-array types, the only requirement being its declaration to be well formed (this is in order to be SFINAE friendly); it's definition may or may not be well-formed, and may or may not do the 'right' thing.</p>\n", "LastActivityDate": "2018-01-21T17:35:04.097", "CommentCount": "2", "CreationDate": "2018-01-21T17:35:04.097", "ParentId": "48369230", "Score": "4", "OwnerUserId": "8631381"}, "48369230": {"ViewCount": "65", "Body": "<p>I have a base class that include array and provide a simple operator[] :</p>\n<pre><code>class Object\n{\npublic:\n    std::shared_ptr&lt;Object&gt; operator[](const int index);\n\n    [...]\n\nprivate:\n    std::vector&lt;std::shared_ptr&lt;Object&gt;&gt; internal_array;\n};\n</code></pre>\n<p>When I want to get a direct access to the operator[] (since C++17) without dereference, my compiler (MSVC 2017) dont like that :</p>\n<pre><code>std::shared_ptr&lt;Object&gt; one_object;\nstd::shared_ptr&lt;Object&gt; another_object = one_object[0];\n</code></pre>\n<p>If a array-type (say std::vector) is allowed for direct index array access, why an class with operator[] is not?</p>\n", "AcceptedAnswerId": "48369719", "Title": "C++17 std::shared_ptr<> overload operator[] for array-like objects", "CreationDate": "2018-01-21T16:48:46.770", "LastActivityDate": "2018-01-21T17:35:04.097", "CommentCount": "2", "LastEditDate": "2018-01-21T16:59:53.900", "PostTypeId": "1", "LastEditorUserId": "2069064", "Id": "48369230", "Score": "0", "OwnerUserId": "6394092", "Tags": "<c++><arrays><overloading><shared-ptr><c++17>", "AnswerCount": "1"}});