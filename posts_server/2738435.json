post_cb({"2738503": {"ParentId": "2738435", "CommentCount": "0", "Body": "<p>It doesn't contradict, because <code>max</code> is not defined <code>static const</code>. It's just a static member function. Functions can't be const, and static member functions can't have a const attached at the very right either. </p>\n<p>There is also a <code>double max()</code> in the double version of the limits, and in C++03 it wouldn't work to say <code>static double const max = ...</code>. So to be consistent, <code>max()</code> is a function for all versions of the limit template. </p>\n<p>Now, it's known that <code>max()</code> not being able to be used like that is bad, and C++0x already solves it by making it a <code>constexpr</code> function, allowing your proposed usage.</p>\n", "OwnerUserId": "34509", "PostTypeId": "2", "Id": "2738503", "Score": "4", "CreationDate": "2010-04-29T15:16:38.467", "LastActivityDate": "2010-04-29T15:16:38.467"}, "2738435": {"CommentCount": "3", "AcceptedAnswerId": "2738576", "PostTypeId": "1", "LastEditorUserId": "608639", "CreationDate": "2010-04-29T15:07:51.433", "LastActivityDate": "2016-12-23T14:56:16.227", "LastEditDate": "2016-12-23T14:56:16.227", "ViewCount": "8156", "FavoriteCount": "1", "Title": "Using numeric_limits::max() in constant expressions", "Id": "2738435", "Score": "26", "Body": "<p>I would like to define inside a class a constant which value is the maximum possible int. Something like this:</p>\n<pre><code>class A\n{\n    ...\n    static const int ERROR_VALUE = std::numeric_limits&lt;int&gt;::max();\n    ...\n}\n</code></pre>\n<p>This declaration fails to compile with the following message:</p>\n<blockquote>\n<p id=\"so_2738435_2738435_0\">numeric.cpp:8: error: 'std::numeric_limits::max()' cannot appear in a constant-expression\n  numeric.cpp:8: error: a function call cannot appear in a constant-expression</p>\n</blockquote>\n<p>I understand why this doesn't work, but two things look weird to me:</p>\n<ol>\n<li><p>It seems to me a natural decision to use the value in constant expressions. Why did the language designers decide to make <em>max()</em> a function thus not allowing this usage?</p></li>\n<li><p>The spec claims in 18.2.1 that</p>\n<blockquote>\n<p id=\"so_2738435_2738435_1\">For all members declared static const in the numeric_limits template, specializations shall define these values in such a way that they are usable as integral constant expressions.</p>\n</blockquote>\n<p>Doesn't it mean that I should be able to use it in my scenario and doesn't it contradict the error message?</p></li>\n</ol>\n<p>Thank you. </p>\n", "Tags": "<c++><std><constexpr><numeric-limits>", "OwnerUserId": "102834", "AnswerCount": "5"}, "2739077": {"ParentId": "2738435", "PostTypeId": "2", "CommentCount": "1", "Body": "<ul>\n<li>I will try to answer you as  much as I understood from your question:</li>\n</ul>\n<p>1- If you want a static const int in your program to be initialized with a function:</p>\n<pre><code>int Data()\n{\n return rand();\n}\n\nclass A\n{\npublic :\n    static const int ee;\n};\nconst int A::ee=Data();\n</code></pre>\n<p>This works on VS 2008</p>\n<p>2- If you want to get max and min number for a given data type, then use these definitions\nINT_MAX, INT_MIN, LONG_MAX and so on..</p>\n<p>3- If however you need to use these wrt template type, then\nhard code the templates yourself</p>\n<pre><code>template&lt;&gt;\nint MaxData()\n{\n return INT_MAX;\n}\n</code></pre>\n<p>and </p>\n<pre><code>template&lt;&gt;\nlong MaxData()\n{\n return LONG_MAX ;\n}\n</code></pre>\n<p>and call them like this</p>\n<pre><code>int y=MaxData&lt;int&gt;();\n</code></pre>\n<p>4- and if you are only dealing with binary represented types only, then use this:</p>\n<pre><code>template &lt;class T&gt;\nT MaxData(){\n    return ~(1&lt;&lt;((sizeof(T)*8)-1));\n}\n</code></pre>\n<p>and this</p>\n<pre><code>template &lt;class T&gt;\nT MinData(){\n    return (1&lt;&lt;((sizeof(T)*8)-1));\n}\n</code></pre>\n<p>Hope this can help you..</p>\n", "OwnerUserId": "279691", "LastEditorUserId": "279691", "LastEditDate": "2010-04-29T16:52:30.367", "Id": "2739077", "Score": "2", "CreationDate": "2010-04-29T16:36:06.537", "LastActivityDate": "2010-04-29T16:52:30.367"}, "2738479": {"ParentId": "2738435", "CommentCount": "7", "Body": "<p>You want:</p>\n<pre><code>#include &lt;limits&gt;\n\nstruct A {\nstatic const int ERROR_VALUE;\n}; \n\nconst int A::ERROR_VALUE = std::numeric_limits&lt;int&gt;::max();\n</code></pre>\n<p>Put the class/struct in a header and the definition in a .cpp file.</p>\n", "Id": "2738479", "PostTypeId": "2", "OwnerDisplayName": "anon", "Score": "12", "CreationDate": "2010-04-29T15:13:18.900", "LastActivityDate": "2010-04-29T15:13:18.900"}, "2738499": {"ParentId": "2738435", "CommentCount": "1", "Body": "<p>Looks like a bit of a defect...</p>\n<p>In C++0x, <code>numeric_limits</code> will have everything marked with <code>constexpr</code>, meaning you will be able to use <code>min()</code> and <code>max()</code> as compile-time constants.</p>\n", "OwnerUserId": "155693", "PostTypeId": "2", "Id": "2738499", "Score": "15", "CreationDate": "2010-04-29T15:16:21.287", "LastActivityDate": "2010-04-29T15:16:21.287"}, "bq_ids": {"n4140": {"so_2738435_2738576_0": {"section_id": 5908, "quality": 0.6923076923076923, "length": 18}, "so_2738435_2738576_1": {"section_id": 5908, "quality": 0.75, "length": 9}, "so_2738435_2738435_1": {"section_id": 6715, "quality": 0.8333333333333334, "length": 15}}, "n3337": {"so_2738435_2738576_0": {"section_id": 5680, "quality": 0.6923076923076923, "length": 18}, "so_2738435_2738576_1": {"section_id": 5680, "quality": 0.75, "length": 9}, "so_2738435_2738435_1": {"section_id": 6470, "quality": 0.8333333333333334, "length": 15}}, "n4659": {"so_2738435_2738576_0": {"section_id": 7390, "quality": 0.5769230769230769, "length": 15}, "so_2738435_2738576_1": {"section_id": 7390, "quality": 0.75, "length": 9}, "so_2738435_2738435_1": {"section_id": 8207, "quality": 0.8333333333333334, "length": 15}}}, "2738576": {"ParentId": "2738435", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>While the current standard lacks support here, for integral types <a href=\"http://www.boost.org/doc/libs/1_42_0/libs/integer/doc/html/boost_integer/traits.html\" rel=\"noreferrer\">Boost.IntegerTraits</a> gives you the compile time constants <code>const_min</code> and <code>const_max</code>.</p>\n<p>The problem arises from <em>\u00a79.4.2/4</em>:</p>\n<blockquote>\n<p id=\"so_2738435_2738576_0\">If a static data member is of const integral or const enumeration type, its declaration in the class definition can specify a constant-initializer which shall be an integral constant expression (5.19). In that case, the member can appear in integral constant expressions.</p>\n</blockquote>\n<p>Note that it adds:</p>\n<blockquote>\n<p id=\"so_2738435_2738576_1\">The member shall still be defined in a name- space scope if it is used in the program and the namespace scope definition shall not contain an initializer.</p>\n</blockquote>\n<p>As others already mentioned <code>numeric_limit</code>s <code>min()</code> and <code>max()</code> simply aren't integral constant expressions, i.e. compile time constants.</p>\n", "OwnerUserId": "168225", "LastEditorUserId": "168225", "LastEditDate": "2010-04-29T15:49:31.203", "Id": "2738576", "Score": "16", "CreationDate": "2010-04-29T15:26:26.780", "LastActivityDate": "2010-04-29T15:49:31.203"}});