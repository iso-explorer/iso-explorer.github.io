post_cb({"16636607": {"ParentId": "16636563", "CommentCount": "6", "Body": "<p>\"The C++ compiler\" might act quite differently, depending on who he is at the exact point in space and time.</p>\n<p>That said, the way most compilers implement classes and objects, <code>this</code> is part of every instance of a class. This means, it is accessible in the complete scope of the object.</p>\n", "OwnerUserId": "1100552", "PostTypeId": "2", "Id": "16636607", "Score": "0", "CreationDate": "2013-05-19T16:02:15.513", "LastActivityDate": "2013-05-19T16:02:15.513"}, "16636628": {"ParentId": "16636563", "CommentCount": "1", "Body": "<p>Every object in C++ has access to its own address through a pointer called this pointer. The <code>this</code> pointer is an implicit parameter to all member functions.Where as friend functions do not have a <code>this</code> pointer. Only member functions have <code>this</code> pointer.</p>\n", "OwnerUserId": "2105110", "PostTypeId": "2", "Id": "16636628", "Score": "0", "CreationDate": "2013-05-19T16:04:10.587", "LastActivityDate": "2013-05-19T16:04:10.587"}, "16636599": {"ParentId": "16636563", "CommentCount": "5", "Body": "<p>Quote from the C++ Standard (Draft N3242): </p>\n<blockquote>\n<h2>9.3.2 The this pointer</h2>\n<p id=\"so_16636563_16636599_0\">1 In the body of a non-static (9.3) member function, the keyword this is a prvalue expression whose value is the address of the object for which the function is called.</p>\n</blockquote>\n<p>I think this means that it is present in all member functions.</p>\n", "OwnerUserId": "951423", "PostTypeId": "2", "Id": "16636599", "Score": "0", "CreationDate": "2013-05-19T16:01:37.163", "LastActivityDate": "2013-05-19T16:01:37.163"}, "16636626": {"ParentId": "16636563", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Short answer: yes. </p>\n<p>Longer answer: Well, if it's not using ANY member variables, why would it be a member function in the first place [and not a static member function]. (Yes, there may be cases where an interface provides a member method that isn't doing anything with any member content, since it's just doing something like printing an error message for calling this function on the wrong type, or it's a \"we need this sometimes function\", and in the cases when nothing needs to be done, it's an empty function). </p>\n<p>Since we can use a member function without the compiler knowing what it actually does (for example in the case of different source files for the \"use\" and \"definition\" of the function), the compiler MUST follow the same calling convention for all calls, whether the <code>this</code> pointer is actually needed or not. It's of course possible that if the code if visible to the compiler that it inlines the function or otherwise can make optimizations that produce better code under circumstances that allow this. But the \"default\" if the compiler doesn't know any better is to pass <code>this</code> along to the function, whether it is actually needed or not.</p>\n", "OwnerUserId": "1919155", "LastEditorUserId": "1919155", "LastEditDate": "2013-05-19T16:10:17.543", "Id": "16636626", "Score": "5", "CreationDate": "2013-05-19T16:04:05.887", "LastActivityDate": "2013-05-19T16:10:17.543"}, "41053865": {"ParentId": "16636563", "CommentCount": "0", "Body": "<pre><code>class Interval\n{\n    public:\n       long GetTime()\n       {\n           //Code\n       }\n\n       void SetTime(long value)\n       {\n           //Code\n       }\n}\n</code></pre>\n<p>Suppose you have written this code. Compiler will add the this pointer automatically. And it will appear to you when you view the compiler written code for your program.</p>\n<p>Compiler will add as follows:</p>\n<pre><code>void Interval::SetTime(Interval* this, long value)\n</code></pre>\n", "OwnerUserId": "6698793", "PostTypeId": "2", "Id": "41053865", "Score": "0", "CreationDate": "2016-12-09T05:47:10.020", "LastActivityDate": "2016-12-09T05:47:10.020"}, "bq_ids": {"n4140": {"so_16636563_16636599_0": {"section_id": 5895, "quality": 1.0, "length": 13}}, "n3337": {"so_16636563_16636599_0": {"section_id": 5666, "quality": 1.0, "length": 13}}, "n4659": {"so_16636563_16636599_0": {"section_id": 7378, "quality": 1.0, "length": 13}}}, "16636563": {"CommentCount": "14", "ViewCount": "320", "PostTypeId": "1", "LastEditorUserId": "207421", "CreationDate": "2013-05-19T15:58:02.247", "LastActivityDate": "2016-12-09T05:47:10.020", "LastEditDate": "2013-05-22T01:25:44.567", "AcceptedAnswerId": "16636626", "OwnerDisplayName": "user2341104", "Title": "Does the C++ compiler generate \"this\" pointer for all member methods, or only for those who reference members?", "Id": "16636563", "Score": "3", "Body": "<p>Does the C++ compiler generate the hidden \"this\" pointer for all member methods, or only for those who reference members?</p>\n", "Tags": "<c++><pointers><this>", "AnswerCount": "5"}});