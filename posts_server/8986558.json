post_cb({"8986601": {"ParentId": "8986558", "CommentCount": "1", "Body": "<p>Because b is not const. Therefore, it matches the first copy ctor perfectly, so that's what the compiler uses.</p>\n", "OwnerUserId": "5801", "PostTypeId": "2", "Id": "8986601", "Score": "5", "CreationDate": "2012-01-24T12:12:51.170", "LastActivityDate": "2012-01-24T12:12:51.170"}, "8986558": {"CommentCount": "1", "ViewCount": "193", "CreationDate": "2012-01-24T12:10:15.360", "LastActivityDate": "2012-01-24T12:43:32.117", "Title": "Why the first copy constructor is called in the code below ?", "AcceptedAnswerId": "8987000", "PostTypeId": "1", "Id": "8986558", "Score": "4", "Body": "<p>Why the <code>B(B&amp;)</code> ctor is called, instead of <code>B(const B&amp;)</code>, in the construction of object <code>b1</code> ?</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nstruct B\n{\n    int i;\n    B() : i(2) { }\n    B(B&amp; x) : i(x.i) { cout &lt;&lt; \"Copy constructor B(B&amp;), i = \" &lt;&lt; i &lt;&lt; endl; }\n    B(const B&amp; x) : i(x.i) { cout &lt;&lt; \"Copy constructor B(const B&amp;), i = \" &lt;&lt; i &lt;&lt; endl; }\n};\n\nint main()\n{\n    B b;\n    B b1(b);\n}\n</code></pre>\n", "Tags": "<c++><copy-constructor>", "OwnerUserId": "1042389", "AnswerCount": "5"}, "8986613": {"ParentId": "8986558", "CommentCount": "5", "Body": "<p>This is because overload resolution applies, and since the argument to the constructor of <code>b1</code> is <code>b</code>, and <code>b</code> happens to be non-const lvalue, then the constructor taking non-const lvlalue is selected. And that's the first one. Interestingly, both are copy constructors, but your code would be equaly valid with just the latter one.</p>\n", "OwnerUserId": "1149771", "PostTypeId": "2", "Id": "8986613", "Score": "6", "CreationDate": "2012-01-24T12:13:47.890", "LastActivityDate": "2012-01-24T12:13:47.890"}, "8986614": {"ParentId": "8986558", "CommentCount": "0", "Body": "<p>because <code>b</code> is not a constant.</p>\n", "OwnerUserId": "987244", "PostTypeId": "2", "Id": "8986614", "Score": "1", "CreationDate": "2012-01-24T12:13:53.787", "LastActivityDate": "2012-01-24T12:13:53.787"}, "8987000": {"ParentId": "8986558", "CommentCount": "1", "Body": "<p>13.3.3.2/3 says</p>\n<blockquote>\n<p id=\"so_8986558_8987000_0\">Two implicit conversion sequences of the same form are indistinguishable conversion sequences unless one\n  of the following rules apply:</p>\n<p id=\"so_8986558_8987000_1\">\u2014 Standard conversion sequence S1 is a better conversion sequence than standard conversion sequence\n  S2 if :</p>\n<p id=\"so_8986558_8987000_2\">S1 and S2 are reference bindings (8.5.3), and the types to which the references refer are the same\n  type except for top-level cv-qualifiers, and the type to which the reference initialized by S2 refers is\n  more cv-qualified than the type to which the reference initialized by S1 refers. [Example:</p>\n</blockquote>\n<pre><code>int f(const int &amp;);\nint f(int &amp;);\n...\nint i;\nint j = f(i); // calls f(int&amp;)\n</code></pre>\n<p>In your case since the argument is non-const, the non-const version of the copy c-tor is chosen because it is a better match.</p>\n", "OwnerUserId": "165520", "PostTypeId": "2", "Id": "8987000", "Score": "2", "CreationDate": "2012-01-24T12:43:32.117", "LastActivityDate": "2012-01-24T12:43:32.117"}, "bq_ids": {"n4140": {"so_8986558_8987000_2": {"section_id": 639, "quality": 0.9130434782608695, "length": 21}, "so_8986558_8987000_1": {"section_id": 603, "quality": 0.8888888888888888, "length": 8}, "so_8986558_8987000_0": {"section_id": 639, "quality": 0.9230769230769231, "length": 12}}, "n3337": {"so_8986558_8987000_2": {"section_id": 629, "quality": 0.9130434782608695, "length": 21}, "so_8986558_8987000_1": {"section_id": 593, "quality": 0.8888888888888888, "length": 8}, "so_8986558_8987000_0": {"section_id": 629, "quality": 0.9230769230769231, "length": 12}}, "n4659": {"so_8986558_8987000_2": {"section_id": 667, "quality": 0.9130434782608695, "length": 21}, "so_8986558_8987000_1": {"section_id": 629, "quality": 0.8888888888888888, "length": 8}, "so_8986558_8987000_0": {"section_id": 667, "quality": 1.0, "length": 13}}}, "8986623": {"ParentId": "8986558", "CommentCount": "0", "Body": "<p>Try this:</p>\n<pre><code>int main() {\n    const B b;\n    B b1(b);\n}\n</code></pre>\n<p>Also, it's a hard decision wheter you should use <em>const</em> or not ;)</p>\n", "OwnerUserId": "185881", "PostTypeId": "2", "Id": "8986623", "Score": "1", "CreationDate": "2012-01-24T12:15:18.577", "LastActivityDate": "2012-01-24T12:15:18.577"}});