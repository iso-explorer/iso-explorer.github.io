post_cb({"5547664": {"CommentCount": "2", "AcceptedAnswerId": "5547677", "CreationDate": "2011-04-05T05:37:17.810", "LastActivityDate": "2011-04-05T05:52:31.467", "PostTypeId": "1", "ViewCount": "13611", "FavoriteCount": "3", "Title": "What C++0x Headers are supposed to define nullptr?", "Id": "5547664", "Score": "8", "Body": "<p>Now that C++0x is almost here, I've been experimenting with it, and in particular using nullptr. I haven't been able to figure out what standard header files one is supposed to include if one needs to use it.</p>\n<p>Any help is appreciated.</p>\n", "Tags": "<c++><header><c++11><nullptr>", "OwnerUserId": "276195", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_5547664_5547677_4": {"section_id": 6711, "quality": 0.7727272727272727, "length": 17}, "so_5547664_5547677_1": {"section_id": 5366, "quality": 0.868421052631579, "length": 33}}, "n3337": {"so_5547664_5547677_4": {"section_id": 6466, "quality": 0.7727272727272727, "length": 17}, "so_5547664_5547677_1": {"section_id": 5162, "quality": 0.868421052631579, "length": 33}}, "n4659": {"so_5547664_5547677_4": {"section_id": 8179, "quality": 0.7727272727272727, "length": 17}, "so_5547664_5547677_1": {"section_id": 6791, "quality": 0.868421052631579, "length": 33}}}, "5547677": {"ParentId": "5547664", "PostTypeId": "2", "CommentCount": "2", "CreationDate": "2011-04-05T05:38:59.057", "Score": "20", "LastEditorUserId": "224671", "LastEditDate": "2011-04-05T05:52:31.467", "Id": "5547677", "OwnerUserId": "224671", "Body": "<p>No headers should be required. It is a built-in keyword (\u00a7[lex.nullptr]).</p>\n<blockquote>\n<h3>2.14.7 Pointer literals \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 [lex.nullptr]</h3>\n<blockquote>\n<p id=\"so_5547664_5547677_2\"><em>pointer-literal:</em><br>\n    \u00a0 \u00a0 \u00a0 \u00a0 <code>nullptr</code></br></p>\n</blockquote>\n<p id=\"so_5547664_5547677_1\">The pointer literal is the keyword\n  <code>nullptr</code>. It is a prvalue of type\n  <code>std::nullptr_t</code>. [ <em>Note:</em> <code>std::nullptr_t</code>\n  is a distinct type that is neither a\n  pointer type nor a pointer to member\n  type; rather, a prvalue of this type\n  is a null pointer constant and can be\n  converted to a null pointer value or\n  null member pointer value. See 4.10\n  and 4.11. <em>\u2014endnote</em>]</p>\n</blockquote>\n<hr>\n<p>Its type, <code>std::nullptr_t</code>, however, is \"defined\" in the header <code>&lt;cstddef&gt;</code> (\u00a7[support.types]/9).</p>\n<blockquote>\n<p id=\"so_5547664_5547677_3\"><code>nullptr_t</code> is defined as follows:</p>\n<pre><code>namespace std {\n    typedef decltype(nullptr) nullptr_t;\n}\n</code></pre>\n<p id=\"so_5547664_5547677_4\">The type for which <code>nullptr_t</code> is a synonym has the characteristics described in 3.9.1 and 4.10. [<em>Note</em>: Although <code>nullptr</code>\u2019s address cannot be taken, the address of another <code>nullptr_t</code> object that is an lvalue can be taken. <em>\u2014endnote</em>]</p>\n</blockquote>\n</hr>", "LastActivityDate": "2011-04-05T05:52:31.467"}});