post_cb({"19090880": {"CommentCount": "9", "AcceptedAnswerId": "19091328", "CreationDate": "2013-09-30T09:33:50.973", "LastActivityDate": "2013-09-30T09:58:19.847", "PostTypeId": "1", "ViewCount": "180", "FavoriteCount": "1", "Title": "Dynamic_cast with ambiguous target class", "Id": "19090880", "Score": "4", "Body": "<p>I was just reading Stroustrup's new book. In  Chapter 22.2.2 he discusses a dynamic_cast issue.</p>\n<p>The code I have written to test this myself is as follows:</p>\n<pre><code>class Storable  \n{\npublic:\n    int i;\n    virtual void r() {};\n    Storable()  \n    {\n        i = 1;\n    };\n};\n\nclass Component:public virtual Storable\n{\npublic:\n    Component()  \n    {\n        i = 1;\n    };\n};\n\nclass Receiver:public Component\n{\npublic:\n    Receiver()  \n    {\n        i = 2;\n    };\n};\n\nclass Transmitter:public Component\n{\npublic:\n    Transmitter()  \n    {\n        i = 3;\n    };\n};\n\nclass Radio:public Transmitter\n{\npublic:\n    Radio()  \n    {\n        i = 4;\n    };\n};\n\n\nint _tmain(int argc, _TCHAR* argv[])\n{\n    Radio *r = new Radio();\n    Storable *s1 = dynamic_cast&lt;Storable*&gt;(r);\n\n    Component *c = dynamic_cast&lt;Component*&gt;(s1);  // this should be 0 but it is not!\n\n    return 0;\n}\n</code></pre>\n<p>Stroostrup explains that c should be a nullptr as it is not possible to know which version of Storable is being referred to.  However, I get it as being a valid pointer.</p>\n<p>I would guess that Stroustrup is probably correct on this but I cannot see what subtly I have missed, can anyone else spot it?</p>\n", "Tags": "<c++><dynamic-cast>", "OwnerUserId": "861970", "AnswerCount": "1"}, "19091328": {"ParentId": "19090880", "CommentCount": "1", "Body": "<p>I can't see ambiguity there. Have you transcribed the example correctly? Quoting C++11, <code>[expr.dynamic.cast]</code>\u00a78 (using <code>dynamic_cast&lt;C*&gt;(v)</code>):</p>\n<blockquote>\n<p id=\"so_19090880_19091328_0\">... if <code>v</code> points (refers) to a public base class subobject of the most derived object, and the type of the most derived object has a base class, of type <code>C</code>, that is unambiguous and <code>public</code>, the result points (refers) to the <code>C</code> subobject of the most derived object.</p>\n</blockquote>\n<p>Your <code>v</code> is <code>s1</code>, which points to a <code>Storable</code> subobject of a most-derived object of type <code>Radio</code>. There's only one base class subobject of type <code>Component</code> in <code>Radio</code>, and it's public, so the dynamic cast should succeed, as it does.</p>\n<p>It would be amgiguous if <code>Radio</code> was derived from <code>Receiver</code> as well; perhaps you missed that?</p>\n", "OwnerUserId": "1782465", "PostTypeId": "2", "Id": "19091328", "Score": "3", "CreationDate": "2013-09-30T09:58:19.847", "LastActivityDate": "2013-09-30T09:58:19.847"}, "bq_ids": {"n4140": {"so_19090880_19091328_0": {"section_id": 6018, "quality": 1.0, "length": 25}}, "n3337": {"so_19090880_19091328_0": {"section_id": 5786, "quality": 1.0, "length": 25}}, "n4659": {"so_19090880_19091328_0": {"section_id": 7517, "quality": 1.0, "length": 25}}}});