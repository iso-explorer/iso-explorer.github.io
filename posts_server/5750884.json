post_cb({"5750884": {"CommentCount": "2", "AcceptedAnswerId": "5751016", "PostTypeId": "1", "LastEditorUserId": "12895", "CreationDate": "2011-04-21T23:29:06.697", "LastActivityDate": "2011-04-21T23:54:05.080", "LastEditDate": "2011-04-21T23:47:43.460", "ViewCount": "1210", "FavoriteCount": "1", "Title": "wcout not writing wide character out to command prompt", "Id": "5750884", "Score": "0", "Body": "<p>I am attempting to write the following character out in windows command prompt: \uff6d (U+FF6D).</p>\n<p>I am able to see the character get written out using WriteConsoleW. I am also able to see the character if i use WideCharToMultiByte using the CP_ACP code page (chcp returns 932: Japanese). However, when I attempt to use regular wcout on the same string which WriteConsoleW successfully prints, it chokes.</p>\n<p>When I execute setlocale(LC_ALL, \"\") it prints English_UnitedStates.1252 (the default code page that I had when I installed). </p>\n<p>Why is wcout failing when the others are succeeding?</p>\n<p><strong>Note: I rebooted the machine to change its system locale to Japan Japanese</strong></p>\n", "Tags": "<c++><windows><internationalization>", "OwnerUserId": "55913", "AnswerCount": "2"}, "5750993": {"ParentId": "5750884", "CommentCount": "2", "Body": "<p><code>wcout</code> is created <em>before</em> any code in <code>main</code> executes. By the time you call <code>setlocale</code>, <code>wcout</code> is already there, ready to do its thing. It makes no attempt at tracking subsequent changes you might make with <code>setlocale</code>, so it continues to use the default instead of whatever you set with <code>setlocale</code>.</p>\n", "OwnerUserId": "179910", "PostTypeId": "2", "Id": "5750993", "Score": "0", "CreationDate": "2011-04-21T23:49:40.600", "LastActivityDate": "2011-04-21T23:49:40.600"}, "5751016": {"ParentId": "5750884", "CommentCount": "1", "Body": "<p>The default locale for C++ iostreams is always the \"C\" locale. From the C++03 standard, \u00a727.4.2.3/4:</p>\n<blockquote>\n<p id=\"so_5750884_5751016_0\"><code>locale getloc() const;</code></p>\n<p id=\"so_5750884_5751016_1\">If no locale has been imbued, a copy of the global C++ locale, <code>locale()</code>, in effect at the time of construction.</p>\n</blockquote>\n<p>From \u00a722.1.1.2/1-2:</p>\n<blockquote>\n<p id=\"so_5750884_5751016_2\"><code>locale() throw();</code></p>\n<p id=\"so_5750884_5751016_3\">Default constructor: a snapshot of the current global locale.</p>\n<p id=\"so_5750884_5751016_4\">Constructs a copy of the argument last passed to <code>locale::global(locale&amp;)</code>, if it has been called; else, the resulting facets have virtual function semantics identical to those of <code>locale::classic()</code>.</p>\n</blockquote>\n<p>From \u00a722.1.1.5/4-6:</p>\n<blockquote>\n<p id=\"so_5750884_5751016_5\"><code>static const locale&amp; classic();</code></p>\n<p id=\"so_5750884_5751016_6\">The \"C\" locale.</p>\n<p id=\"so_5750884_5751016_7\">Returns: A locale that implements the classic \"C\" locale semantics, equivalent to the value <code>locale(\"C\")</code>.</p>\n<p id=\"so_5750884_5751016_8\">Notes: This locale, its facets, and their member functions, do not change with time.</p>\n</blockquote>\n<p>As <code>std::cout</code> and <code>std::wcout</code> have static storage duration, they are guaranteed to be initialized before <code>main</code> is called, and consequently will <em>always</em> have the \"C\" locale at application startup; i.e., there is no point early enough in execution that one can call <code>locale::global</code> and change the default locale for <code>std::cout</code> and <code>std::wcout</code>. Thus, you must always imbue the global streams yourself if you want to use a non-default code page.</p>\n", "OwnerUserId": "636019", "PostTypeId": "2", "Id": "5751016", "Score": "2", "CreationDate": "2011-04-21T23:54:05.080", "LastActivityDate": "2011-04-21T23:54:05.080"}, "bq_ids": {"n4140": {"so_5750884_5751016_8": {"section_id": 6424, "quality": 0.8, "length": 8}, "so_5750884_5751016_5": {"section_id": 6421, "quality": 1.0, "length": 4}, "so_5750884_5751016_1": {"section_id": 1971, "quality": 1.0, "length": 10}, "so_5750884_5751016_3": {"section_id": 6390, "quality": 1.0, "length": 6}, "so_5750884_5751016_7": {"section_id": 6423, "quality": 0.8888888888888888, "length": 8}, "so_5750884_5751016_4": {"section_id": 6391, "quality": 1.0, "length": 18}}, "n3337": {"so_5750884_5751016_8": {"section_id": 6181, "quality": 0.8, "length": 8}, "so_5750884_5751016_5": {"section_id": 6178, "quality": 1.0, "length": 4}, "so_5750884_5751016_1": {"section_id": 1960, "quality": 1.0, "length": 10}, "so_5750884_5751016_3": {"section_id": 6147, "quality": 1.0, "length": 6}, "so_5750884_5751016_7": {"section_id": 6180, "quality": 0.8888888888888888, "length": 8}, "so_5750884_5751016_4": {"section_id": 6148, "quality": 1.0, "length": 18}}, "n4659": {"so_5750884_5751016_8": {"section_id": 7936, "quality": 0.8, "length": 8}, "so_5750884_5751016_5": {"section_id": 7933, "quality": 1.0, "length": 4}, "so_5750884_5751016_1": {"section_id": 2242, "quality": 1.0, "length": 10}, "so_5750884_5751016_3": {"section_id": 7902, "quality": 1.0, "length": 6}, "so_5750884_5751016_7": {"section_id": 7935, "quality": 0.8888888888888888, "length": 8}, "so_5750884_5751016_4": {"section_id": 7903, "quality": 1.0, "length": 18}}}});