post_cb({"bq_ids": {"n4140": {"so_24032430_24032648_1": {"length": 6, "quality": 0.8571428571428571, "section_id": 5768}, "so_24032430_24032648_2": {"length": 6, "quality": 0.8571428571428571, "section_id": 5768}}, "n3337": {"so_24032430_24032648_1": {"length": 6, "quality": 0.8571428571428571, "section_id": 5541}, "so_24032430_24032648_2": {"length": 6, "quality": 0.8571428571428571, "section_id": 5541}}, "n4659": {"so_24032430_24032648_1": {"length": 6, "quality": 0.8571428571428571, "section_id": 7225}, "so_24032430_24032648_2": {"length": 6, "quality": 0.8571428571428571, "section_id": 7225}}}, "24032430": {"ViewCount": "2071", "Body": "<p>Considering the following piece of code:</p>\n<pre><code>#include &lt;iostream&gt;\n\nauto main() -&gt; int {\n  double x(7.0);\n  int i{x};\n  std::cout &lt;&lt; \"i = \" &lt;&lt; x &lt;&lt; std::endl;\n\n  return 0;\n}\n</code></pre>\n<hr>\n<ul>\n<li><p>When compiled in GCC4.9 it compiles fine with only a warning:</p>\n<blockquote>\n<blockquote>\n<p id=\"so_24032430_24032430_1\"><code>warning: narrowing conversion of \u2018x\u2019 from \u2018double\u2019 to \u2018int\u2019 inside { }</code></p>\n</blockquote>\n</blockquote></li>\n</ul>\n<p><br/></p>\n<ul>\n<li><p>Compiling with either Clang3.3 or VC++2013 gives a compile error:  </p>\n<blockquote>\n<blockquote>\n<p id=\"so_24032430_24032430_3\"><code>error: type 'double' cannot be narrowed to 'int' in initializer list</code>\n<code>error C2397: conversion from 'double' to 'int' requires a narrowing</code></p>\n</blockquote>\n</blockquote></li>\n</ul>\n<hr>\n<h2>Questions:</h2>\n<ul>\n<li><p>Which of the compilers is right according to the standard?</p></li>\n<li><p>Is there any reason why the compilers mentioned above should exhibit such diverse behaviour?</p></li>\n</ul>\n</hr></hr>", "AcceptedAnswerId": "24032648", "Title": "Narrowing conversions and initializer lists, which compiler is right?", "CreationDate": "2014-06-04T08:24:15.483", "Id": "24032430", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2014-06-04T09:12:38.010", "LastEditorUserId": "1090079", "LastActivityDate": "2014-06-04T14:05:56.630", "Score": "22", "OwnerUserId": "2352671", "Tags": "<c++><visual-c++><gcc><c++11><clang>", "AnswerCount": "1"}, "24032648": {"Id": "24032648", "PostTypeId": "2", "Body": "<h3>The answer</h3>\n<p>Both compilers are correct!</p>\n<hr>\n<h3>Explanation</h3>\n<p>The Standard doesn't distinguish between an <em>error</em> and a <em>warning</em>, both go under the category of <em>Diagnostics</em>. </p>\n<blockquote>\n<p id=\"so_24032430_24032648_0\"><code>1.3.6</code> <strong>diagnostic message</strong> <code>[defns.diagnostic]</code></p>\n<blockquote>\n<p id=\"so_24032430_24032648_2\">message belonging to an implementation-defined subset of the implementation's output messages</p>\n</blockquote>\n</blockquote>\n<p>Since the Standard says that a diagnostic is required in case a program is ill-formed, such as when a narrowing-conversion takes place inside a braced-initializer, both compilers are confirming.</p>\n<p>Even if the program is ill-formed from the Standards point of view, it doesn't mandate that a compiler halts compilation because of that; an implementation is free to do whatever it wants, as long as it issues a diagnostic.</p>\n<hr>\n<hr>\n<h3>The reason for gcc's behavior?</h3>\n<p>Helpful information was provided by <a href=\"https://stackoverflow.com/users/981959/jonathan-wakely\">@Jonathan Wakely</a> through comments on this post, below are a merge of the two comments;</p>\n<blockquote>\n<p id=\"so_24032430_24032648_3\"><em>he exact reason is that GCC made it an error at one point and it broke ALL THE PROGRAMS so it got turned into a warning instead. Several people who turned on the <code>-std=c++0x</code> option for large C++03 codebases found harmless narrowing conversions to cause most of the porting work to go to C++11<br/><br/>See e.g. <a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=50810\" rel=\"nofollow noreferrer\">PR 50810</a> where Alisdair reports narrowing errors were &gt;95% of the problems in Bloomberg's code base.<br/><br/>In that same PR you can see that unfortunately it wasn't a case of \"let's just issue a warning and be done with it\" because it took a lot of fiddling to get the right behaviour.</em> </p>\n</blockquote>\n</hr></hr></hr>", "LastEditorUserId": "-1", "LastActivityDate": "2014-06-04T14:05:56.630", "Score": "19", "CreationDate": "2014-06-04T08:36:35.100", "ParentId": "24032430", "CommentCount": "3", "OwnerUserId": "1090079", "LastEditDate": "2017-05-23T12:19:19.780"}});