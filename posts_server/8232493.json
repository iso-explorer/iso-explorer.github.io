post_cb({"8232591": {"Id": "8232591", "PostTypeId": "2", "Body": "<p>No. Const values can be evaluated on compilation time when compilator tries to expand templates to final form. So execution-time values can't be arguments for templates, but always you can set reference to variable as template argument</p>\n<pre><code>template&lt;int&amp; k&gt;\nvoid foo()\n{\n}\nint main(int argc, char* argv[])\n{\n    int k = 1000;\n    foo&lt;k&gt;();\n    return 0;\n}\n</code></pre>\n", "LastActivityDate": "2011-11-22T19:28:26.383", "CommentCount": "0", "CreationDate": "2011-11-22T19:28:26.383", "ParentId": "8232493", "Score": "2", "OwnerUserId": "1017941"}, "bq_ids": {"n4140": {"so_8232493_8232610_0": {"length": 8, "quality": 0.8, "section_id": 87}, "so_8232493_8232586_0": {"length": 40, "quality": 0.9090909090909091, "section_id": 87}}, "n3337": {"so_8232493_8232610_0": {"length": 8, "quality": 0.8, "section_id": 82}, "so_8232493_8232586_0": {"length": 39, "quality": 0.8863636363636364, "section_id": 82}}, "n4659": {"so_8232493_8232610_0": {"length": 6, "quality": 0.6, "section_id": 59}}}, "8232493": {"ViewCount": "977", "Body": "<p>I have the following code:</p>\n<pre><code>template&lt;int k&gt;\nvoid foo()\n{\n}\nint main(int argc, char* argv[])\n{\n    int k = 1000;\n    foo&lt;k&gt;();\n    return 0;\n}\n</code></pre>\n<p>which doesn't compile, but if I declare <code>k</code> as <code>const</code>, it does:</p>\n<pre><code>template&lt;int k&gt;\nvoid foo()\n{\n}\nint main(int argc, char* argv[])\n{\n    const int k = 1000;\n    foo&lt;k&gt;();\n    return 0;\n}\n</code></pre>\n<p>Now, I see the logic behind why in the first case it doesn't compile and in the second it does, but is this specified by the standard?</p>\n<p>The error I'm getting is:</p>\n<pre><code>Error   1   error C2971: 'foo' : template parameter 'k' : 'k' : a local variable cannot be used as a non-type argument\n</code></pre>\n<p>which isn't exactly clear, since <code>k</code> is a local variable also in the case it's <code>const</code>... right?</p>\n", "AcceptedAnswerId": "8232610", "Title": "Template compilation error - standard or not?", "CreationDate": "2011-11-22T19:18:56.387", "Id": "8232493", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2011-11-22T19:29:57.153", "Score": "5", "OwnerUserId": "673730", "Tags": "<c++><templates>", "AnswerCount": "3"}, "8232610": {"Id": "8232610", "PostTypeId": "2", "Body": "<p>\u00a714.3.2.1 says [abridged]:</p>\n<blockquote>\n<p id=\"so_8232493_8232610_0\">A template-argument for a non-type, non-template template-parameter shall be one of:<br>\n  \u2014 an integral <em>constant-expression</em> of integral or enumeration type;</br></p>\n</blockquote>\n<p>And \u00a75.19.1 says [abridged, emphasis mine]:</p>\n<blockquote>\n<p id=\"so_8232493_8232610_1\">An <em>integral constant-expression</em> can involve only literals, enumerators, <strong>const variables or static data members of integral or enumeration types initialized with constant expressions</strong>...</p>\n</blockquote>\n<p>Your second definition of <code>k</code> satisfies this, so it's allowed to be used as an ICE for the template argument.</p>\n<p>The error is slightly misleading in that \"a local variable cannot be used as a non-type argument\" is true <em>in general</em>, but with certain restrictions it's perfectly fine.</p>\n", "LastActivityDate": "2011-11-22T19:29:57.153", "CommentCount": "0", "CreationDate": "2011-11-22T19:29:57.153", "ParentId": "8232493", "Score": "2", "OwnerUserId": "87234"}, "8232586": {"Id": "8232586", "PostTypeId": "2", "Body": "<p>Per the standard, 14.3.2, this must be a constant expression:</p>\n<blockquote>\n<p id=\"so_8232493_8232586_0\">A template-argument for a non-type, non-template template-parameter shall be one of:<br>\n  \u2014 <strong>an integral constant-expression of integral or enumeration type</strong>; or<br>\n  \u2014 the name of a non-type template-parameter; or<br>\n  \u2014 the address of an object or function with external linkage, including function templates and function template-ids but excluding non-static class members, expressed as &amp; id-expression where the &amp; is optional if the name refers to a function or array, or if the corresponding template-parameter is a reference;\n  or<br>\n  \u2014 a pointer to member expressed as described in 5.3.1 .</br></br></br></br></p>\n</blockquote>\n<p>GCC 4.6.2 gives a slightly more comprehensible error:</p>\n<blockquote>\n<p id=\"so_8232493_8232586_1\">error: \u2018k\u2019 cannot appear in a constant-expression</p>\n</blockquote>\n", "LastActivityDate": "2011-11-22T19:28:00.890", "CommentCount": "9", "CreationDate": "2011-11-22T19:28:00.890", "ParentId": "8232493", "Score": "4", "OwnerUserId": "721269"}});