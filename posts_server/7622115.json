post_cb({"7622168": {"ParentId": "7622115", "PostTypeId": "2", "CommentCount": "8", "Body": "<p>Actually, this is conceptually (and practically) not different than the following:</p>\n<pre><code>int trivialExample(char* array, int length)\n{\n    char *ptr = &amp;array[6];\n    if (length &gt; 6)\n    {\n        std::cout &lt;&lt; (*ptr) &lt;&lt; std::endl;\n    }\n}\n</code></pre>\n<p>My educated guess is that you intend to call it this way:</p>\n<pre><code>char buffer[4];\ntrivialExample(buffer, sizeof(buffer));\n</code></pre>\n<p>And in C++, as in C, just obtaining a pointer to outside of the declared array (other than the next-to-last) invokes <em>undefined behaviour</em>, even if not dereferenced.</p>\n<p>The rationale is that there may be (are?) architectures that faults just by loading an invalid address in a CPU register.</p>\n<p><strong>UPDATE</strong>: After some research, and hints from other SO users, I've becomed convinced that C++ does not allow to take a reference outside of the declaring object, not even to the next-to-last element. In this particular case, the results are the same, except for the element number 6, that would be allowed in the pointer version and not in the reference one.</p>\n", "OwnerUserId": "865874", "LastEditorUserId": "865874", "LastEditDate": "2011-10-03T08:16:16.443", "Id": "7622168", "Score": "6", "CreationDate": "2011-10-01T18:33:17.767", "LastActivityDate": "2011-10-03T08:16:16.443"}, "7622136": {"ParentId": "7622115", "CommentCount": "9", "Body": "<p>I don't know about creating references, but accessing an element outside the bounds of the array is undefined behavior. So yes, your code is relying on undefined behavior.</p>\n", "OwnerUserId": "927034", "PostTypeId": "2", "Id": "7622136", "Score": "1", "CreationDate": "2011-10-01T18:28:59.847", "LastActivityDate": "2011-10-01T18:28:59.847"}, "7622486": {"ParentId": "7622115", "CommentCount": "0", "Body": "<p>The behavior is undefined.</p>\n<p>Quoting from the C++ 2003 standard (ISO/IEC 14882:2003(E)), 8.3.2 paragraph 4:</p>\n<blockquote>\n<p id=\"so_7622115_7622486_0\">A reference shall be initialized to refer to a valid object or\n  function.</p>\n</blockquote>\n<p>Which also implies that initializing a reference to just past the end of an array is undefined behavior, since there's no valid object there.</p>\n", "OwnerUserId": "827263", "PostTypeId": "2", "Id": "7622486", "Score": "2", "CreationDate": "2011-10-01T19:37:13.990", "LastActivityDate": "2011-10-01T19:37:13.990"}, "7622115": {"CommentCount": "4", "ViewCount": "169", "PostTypeId": "1", "LastEditorUserId": "789750", "CreationDate": "2011-10-01T18:25:48.983", "LastActivityDate": "2011-10-03T08:16:16.443", "Title": "Is creating a reference to a nonexistant array item undefined behavior?", "AcceptedAnswerId": "7622168", "LastEditDate": "2011-10-01T19:20:57.070", "Id": "7622115", "Score": "3", "Body": "<p>With my compiler at least, creating a reference implies no dereferencing. Therefore, code like the following works:</p>\n<pre><code>int trivialExample(char* array, int length)\n{\n    char&amp; ref = array[6];\n    if (length &gt; 6)\n    {\n        std::cout &lt;&lt; ref &lt;&lt; std::endl;\n    }\n}\n</code></pre>\n<p>That is, given a <code>char</code> array and its length (and assuming a bunch of trivialities like the array elements are all initialized and the passed length is correct), it will print the seventh character only if it actually exists.</p>\n<p>Is this relying on undefined behavior?</p>\n", "Tags": "<c++><pointers>", "OwnerUserId": "251153", "AnswerCount": "5"}, "7622144": {"ParentId": "7622115", "CommentCount": "2", "Body": "<p>No, it is not undefined behavior. It is just like defining a pointer. A reference is a pointer with a friendlier and less error prone syntax.</p>\n", "OwnerUserId": "481528", "PostTypeId": "2", "Id": "7622144", "Score": "-1", "CreationDate": "2011-10-01T18:29:29.653", "LastActivityDate": "2011-10-01T18:29:29.653"}, "bq_ids": {"n4140": {"so_7622115_7622486_0": {"section_id": 3222, "quality": 1.0, "length": 6}}, "n3337": {"so_7622115_7622486_0": {"section_id": 3096, "quality": 1.0, "length": 6}}, "n4659": {"so_7622115_7622486_0": {"section_id": 3979, "quality": 1.0, "length": 6}}}, "7622133": {"ParentId": "7622115", "CommentCount": "6", "Body": "<pre><code>char&amp; ref = array[6];\n</code></pre>\n<p>This is okay as long as the size of <code>array</code> is minimum <code>7</code>. Otherwise it is undefined behavior (UB).</p>\n<pre><code>std::cout &lt;&lt; ref &lt;&lt; std::endl;\n</code></pre>\n<p>This is okay as long as <code>array[6]</code> is initialized or assigned with some value. Otherwise it is UB.</p>\n", "OwnerUserId": "415784", "PostTypeId": "2", "Id": "7622133", "Score": "1", "CreationDate": "2011-10-01T18:28:48.940", "LastActivityDate": "2011-10-01T18:28:48.940"}});