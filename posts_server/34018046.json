post_cb({"bq_ids": {"n4140": {"so_34018046_34018046_1": {"length": 4, "quality": 0.8, "section_id": 3321}, "so_34018046_34018666_1": {"length": 4, "quality": 1.0, "section_id": 500}, "so_34018046_34018666_0": {"length": 4, "quality": 0.5714285714285714, "section_id": 500}, "so_34018046_34018046_0": {"length": 17, "quality": 1.0, "section_id": 6186}}, "n3337": {"so_34018046_34018666_1": {"length": 4, "quality": 1.0, "section_id": 491}, "so_34018046_34018666_0": {"length": 4, "quality": 0.5714285714285714, "section_id": 491}, "so_34018046_34018046_0": {"length": 15, "quality": 0.8823529411764706, "section_id": 5947}}, "n4659": {"so_34018046_34018666_1": {"length": 4, "quality": 1.0, "section_id": 3985}, "so_34018046_34018046_1": {"length": 5, "quality": 1.0, "section_id": 7689}, "so_34018046_34018046_0": {"length": 15, "quality": 0.8823529411764706, "section_id": 7689}}}, "34018666": {"Id": "34018666", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_34018046_34018666_0\">First, which expression does \"the converted expression\" (emphased)\n  refer to?</p>\n</blockquote>\n<p>Implicit conversion introduces a correspondingly initialized temporary:</p>\n<pre><code>T e = /* original expression */;\n</code></pre>\n<p><code>e</code> is the \"converted expression\". <code>T = int</code> in your case.</p>\n<blockquote>\n<p id=\"so_34018046_34018666_1\">then which expression should be constant expression?</p>\n</blockquote>\n<p><code>e</code>.</p>\n<p>Moreover, <code>foo</code> <em>and</em> the conversion operator function that has been implicitly invoked must be constexpr functions as per <a href=\"http://eel.is/c++draft/expr.const#2\" rel=\"nofollow\">[expr.const]/(2.2)</a>.</p>\n<blockquote>\n<p id=\"so_34018046_34018666_2\">Second, what stage of the whole process does \"reference binding\" refer\n  to?</p>\n</blockquote>\n<p>When <code>T</code> is a reference type, that reference - <code>e</code> in the above example - shall bind directly. No binding necessitated inside the expression or before it is of interest.</p>\n", "LastEditorUserId": "3647361", "LastActivityDate": "2015-12-01T12:05:07.257", "Score": "4", "CreationDate": "2015-12-01T10:56:48.893", "ParentId": "34018046", "CommentCount": "8", "OwnerUserId": "3647361", "LastEditDate": "2015-12-01T12:05:07.257"}, "34018046": {"ViewCount": "157", "Body": "<p>(Following <a href=\"https://stackoverflow.com/questions/33957274/type-conversion-at-template-non-type-argument-without-constexpr\">my recent question</a>, and <a href=\"https://stackoverflow.com/questions/33872039/invalid-explicitly-specified-argument-in-clang-but-successful-compilation-in-gcc/34017482\">another question</a>.)</p>\n<p>[expr.const]/4 says that:</p>\n<blockquote>\n<p id=\"so_34018046_34018046_0\">A converted constant expression of type T is an expression, implicitly\n  converted to type T, where the <strong>converted expression</strong> is a constant\n  expression and the implicit conversion sequence contains only</p>\n<ul>\n<li>... (list omitted)</li>\n</ul>\n<p id=\"so_34018046_34018046_1\">and where the <strong>reference binding</strong> (if any) binds directly.</p>\n</blockquote>\n<p>(Emphasis mine.)</p>\n<p>There are two points that I do not quite understand here.</p>\n<p>First, which expression does \"the converted expression\" (emphased) refer to?</p>\n<p>Consider, for example</p>\n<pre><code>class A; // assume it can be implicitly converted to `int`\nA foo(); // or maybe constexpr\ntemplate&lt;int n&gt; void bar();\n</code></pre>\n<p>Now, if I write</p>\n<pre><code>bar&lt;foo()&gt;();\n</code></pre>\n<p>then which expression should be constant expression? Should the whole <code>foo()</code> expression be constant, or just something like <code>static_cast&lt;int&gt;(foo())</code>?</p>\n<p>From what I understand from <a href=\"https://stackoverflow.com/questions/33957274/type-conversion-at-template-non-type-argument-without-constexpr\">my recent question</a>, only the latter needs to be constant. Is this true?</p>\n<p>Second, what stage of the whole process does \"reference binding\" refer to? Does it refer only to cases when the template parameter itself is a reference (<code>template&lt;int&amp; x&gt;...</code>)? Or does it require that any reference binding that occurs somewhere during the type conversion or evaluation of converted expression, should be direct? Or does it refer to the case when the non-yet-converted expression is a reference itself (<code>A&amp; a=...; bar&lt;a&gt;();</code>)?</p>\n", "AcceptedAnswerId": "34018666", "Title": "Clarification of converted constant expression definition", "CreationDate": "2015-12-01T10:26:28.623", "Id": "34018046", "CommentCount": "0", "LastEditDate": "2017-05-23T11:46:41.443", "PostTypeId": "1", "LastEditorUserId": "-1", "LastActivityDate": "2015-12-01T12:05:07.257", "Score": "2", "OwnerUserId": "3216312", "Tags": "<c++><language-lawyer>", "AnswerCount": "1"}});