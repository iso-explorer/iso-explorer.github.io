post_cb({"5073350": {"CommentCount": "4", "AcceptedAnswerId": "5073366", "PostTypeId": "1", "LastEditorUserId": "396458", "CreationDate": "2011-02-22T02:12:05.757", "LastActivityDate": "2017-09-13T13:26:32.487", "LastEditDate": "2011-02-22T02:43:04.083", "ViewCount": "11010", "FavoriteCount": "13", "Title": "Accessing arrays by index[array] in C and C++", "Id": "5073350", "Score": "32", "Body": "<p>So, there is this little trick question that some interviewers like to ask for whatever reason:</p>\n<pre><code>int arr[] = {1, 2, 3};\n2[arr] = 5; // does this line compile?\nassert(arr[2] == 5); // does this assertion fail?\n</code></pre>\n<p>From what I can understand, <code>a[b]</code> gets converted to <code>*(a + b)</code> and since addition is commutative it doesn't really matter their order, so <code>2[a]</code> is really <code>*(2 + a)</code> and that works fine.</p>\n<p>Is this guaranteed to work by C and/or C++'s specs? </p>\n", "Tags": "<c++><c><arrays>", "OwnerUserId": "396458", "AnswerCount": "2"}, "5073357": {"ParentId": "5073350", "PostTypeId": "2", "CommentCount": "9", "Body": "<p>In general <code>2[a]</code> is identical to <code>a[2]</code> and this is guaranteed to be equivalent in both C and C++ (assuming no operator overloading), because as you meantioned it translates into <code>*(2+a)</code> or <code>*(a+2)</code>, respectively. Because the plus operator is commutative, the two forms are equivalent.</p>\n<p>Although the forms are equivalent, please for the sake of all that's holy (and future maintenance programmers), prefer the \"a[2]\" form over the other.</p>\n<p>P.S., If you do get asked this at an interview, please do exact revenge on behalf of the C/C++ community and <strong>make sure</strong> that you ask the interviewer to list all trigraph sequences as a precondition to you giving your answer. Perhaps this will disenchant him/her from asking such (worthless, with regard to actually programming <em>anything</em>) questions in the future. In the odd event that the interviewer actually knows all nine of the trigraph sequences, you can always make another attempt to stomp them with a question about the destruction order of virtual base classes - a question that is just as mind bogglingly irrelevant for everyday programming.</p>\n", "OwnerUserId": "473798", "LastEditorUserId": "473798", "LastEditDate": "2011-02-22T02:26:47.893", "Id": "5073357", "Score": "22", "CreationDate": "2011-02-22T02:14:20.703", "LastActivityDate": "2011-02-22T02:26:47.893"}, "bq_ids": {"n4140": {"so_5073350_5073366_0": {"section_id": 5986, "quality": 0.7333333333333333, "length": 11}}, "n3337": {"so_5073350_5073366_0": {"section_id": 5754, "quality": 0.7333333333333333, "length": 11}}, "n4659": {"so_5073350_5073366_0": {"section_id": 7428, "quality": 0.6, "length": 9}}}, "5073366": {"ParentId": "5073350", "CommentCount": "3", "Body": "<p>Yes. 6.5.2.1 paragraph 1 (C99 standard) describes the arguments to the <code>[]</code> operator:</p>\n<blockquote>\n<p id=\"so_5073350_5073366_0\">One of the expressions shall have type \"pointer to object <code>type</code>\", the other expression shall have integer type, and the result has type \"<code>type</code>\". </p>\n</blockquote>\n<p>6.5.2.1 paragraph 2 (emphasis added):</p>\n<blockquote>\n<p id=\"so_5073350_5073366_1\">A post\ufb01x expression followed by an expression in square brackets <code>[]</code> is a subscripted \n  designation of an element of an array object. <strong>The definition of the subscript operator <code>[]</code> \n  is that <code>E1[E2]</code> is identical to <code>(*((E1)+(E2)))</code></strong>. Because of the conversion rules that \n  apply to the binary <code>+</code> operator, if <code>E1</code> is an array object (equivalently, a pointer to the \n  initial element of an array object) and <code>E2</code> is an integer, <code>E1[E2]</code> designates the <code>E2</code>-th \n  element of <code>E1</code> (counting from zero).</p>\n</blockquote>\n<p>It says nothing requiring the order of the arguments to <code>[]</code> to be sane.</p>\n", "OwnerUserId": "60777", "PostTypeId": "2", "Id": "5073366", "Score": "27", "CreationDate": "2011-02-22T02:16:58.060", "LastActivityDate": "2011-02-22T02:16:58.060"}});