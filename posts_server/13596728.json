post_cb({"13596749": {"PostTypeId": "2", "ParentId": "13596728", "Body": "<p>Well, you are basically asking the compiler to solve the equation <code>2 * m == 2</code> for you in order to determine template argument <code>m</code> for <code>match</code>. Compiler does not solve equations during template argument deduction, regardless of how simple and unambiguous they are.</p>\n<p>The language specification in 14.8.2.4/14 (C++03), 14.8.2.5/16 (C++11) covers your situation and has a similar example</p>\n<blockquote>\n<p id=\"so_13596728_13596749_0\"><strong>14</strong> If, in the declaration of a function template with a non-type\n  <em>template-parameter</em>, the non-type <em>template-parameter</em> is used in an\n  expression in the function parameter-list, the corresponding\n  <em>template-argument</em> must always be explicitly specified or deduced\n  elsewhere because type deduction would otherwise always fail for such\n  a <em>template-argument</em>.</p>\n</blockquote>\n<pre><code>template&lt;int i&gt; class A { /* ... */ };\ntemplate&lt;short s&gt; void g(A&lt;s+1&gt;);\n\nvoid k() {\n  A&lt;1&gt; a;\n  g(a); //error: deduction fails for expression s+1\n  g&lt;0&gt;(a); //OK\n}\n</code></pre>\n<p>As to why it is done that way... I think it is pretty obvious that in general case the problem of solving a mathematical equation is too complicated. It can also lead to ambiguous solutions or to solutions that don't belong to the expected domain. For example, what would you expect the compiler to deduce for <code>match(num&lt;3&gt;())</code>?</p>\n", "CreationDate": "2012-11-28T02:21:46.937", "Score": "6", "LastEditDate": "2012-11-28T02:40:36.533", "CommentCount": "5", "Id": "13596749", "OwnerUserId": "187690", "LastEditorUserId": "187690", "LastActivityDate": "2012-11-28T02:40:36.533"}, "13596728": {"AcceptedAnswerId": "13596749", "Body": "<p>I wrote the following code for which template argument deduction fails :</p>\n<pre><code>template&lt;int&gt;\nstruct num {};\n\ntemplate&lt;int m&gt;\nvoid match(num&lt;2*m&gt;) {\n}\n\nint main()\n{\n  match(num&lt;2&gt;());\n  return 0;\n}\n</code></pre>\n<p>I know from a gut feeling that the compiler can't deduce the correct <code>m</code>, but I want to understand the theoretical underpinnings for why it fails. Can someone elucidate?</p>\n", "CreationDate": "2012-11-28T02:18:20.597", "Score": "5", "CommentCount": "0", "OwnerUserId": "691733", "Title": "Template argument deduction failed", "LastActivityDate": "2012-11-28T02:40:36.533", "PostTypeId": "1", "Tags": "<c++><templates>", "AnswerCount": "1", "FavoriteCount": "3", "Id": "13596728", "ViewCount": "688"}, "bq_ids": {"n3337": {"so_13596728_13596749_0": {"quality": 0.5555555555555556, "length": 15, "section_id": 338}}}});