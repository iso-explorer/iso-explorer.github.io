post_cb({"32660221": {"ParentId": "32253075", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2015-09-18T20:07:34.073", "Score": "2", "LastEditorUserId": "2756719", "LastEditDate": "2015-09-18T21:08:01.907", "Id": "32660221", "OwnerUserId": "1708801", "Body": "<p>This looks like a gcc bug, we can see this works <a href=\"http://melpon.org/wandbox/permlink/4mXTpXfryqLFmeA2\" rel=\"nofollow\">in the latest gcc version</a>:</p>\n<p>From the draft C++11 standard section <code>6.4.2</code> <em>[stmt.switch]</em>:</p>\n<blockquote>\n<p id=\"so_32253075_32660221_0\">The condition shall be of integral type, enumeration type, or of a\n  class type for which a single non-explicit conversion function to\n  integral or enumeration type exists (12.3). [...] Integral promotions\n  are performed. Any statement within the switch statement can be\n  labeled with one or more case labels as follows:</p>\n<pre><code>case constant-expression :\n</code></pre>\n<p id=\"so_32253075_32660221_1\"><strong>where the constant-expression shall be a converted constant expression</strong> (5.19) of the promoted type of the switch condition.</p>\n</blockquote>\n<p>converted constant expression is covered in section <code>5.19</code> which says:</p>\n<blockquote>\n<p id=\"so_32253075_32660221_2\">[...]A converted constant expression of type T is a literal constant expression, implicitly converted to type T,\n  where the implicit conversion (if any) is permitted in a literal constant expression and the implicit conversion\n  sequence contains only user-defined conversions, lvalue-to-rvalue conversions (4.1), integral promotions (4.5),\n  and integral conversions (4.7) other than narrowing conversions (8.5.4). [ Note: such expressions may be used\n  as case expressions (6.4.2), as enumerator initializers if the underlying type is fixed (7.2), and as integral or\n  enumeration non-type template arguments (14.3). \u2014end note ] [...]</p>\n</blockquote>\n<p>Perhaps this is related to <a href=\"http://wg21.link/cwg1767\" rel=\"nofollow\">defect report 1767: Scoped enumeration in a switch statement</a>. So perhaps it was forcing a promotion to int and then the comparison in the case would fail.</p>\n", "LastActivityDate": "2015-09-18T21:08:01.907"}, "bq_ids": {"n4140": {"so_32253075_32660221_2": {"section_id": 6186, "quality": 0.7777777777777778, "length": 42}, "so_32253075_32660221_1": {"section_id": 3890, "quality": 0.8, "length": 8}, "so_32253075_32660221_0": {"section_id": 3890, "quality": 0.6875, "length": 22}}, "n3337": {"so_32253075_32660221_2": {"section_id": 5947, "quality": 0.8703703703703703, "length": 47}, "so_32253075_32660221_1": {"section_id": 3750, "quality": 0.9, "length": 9}, "so_32253075_32660221_0": {"section_id": 3750, "quality": 0.90625, "length": 29}}, "n4659": {"so_32253075_32660221_2": {"section_id": 7689, "quality": 0.6851851851851852, "length": 37}, "so_32253075_32660221_1": {"section_id": 4776, "quality": 0.8, "length": 8}, "so_32253075_32660221_0": {"section_id": 4776, "quality": 0.6875, "length": 22}}}, "32253075": {"CommentCount": "5", "ViewCount": "110", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2015-08-27T15:07:08.853", "LastActivityDate": "2015-09-18T21:08:01.907", "Title": "Type cast failed in switch for enum with restricted storage", "AcceptedAnswerId": "32660221", "LastEditDate": "2017-05-23T10:27:03.813", "Id": "32253075", "Score": "5", "Body": "<p><a href=\"http://sscce.org/\" rel=\"nofollow noreferrer\" title=\"SSCCE\">SSCCE</a>:</p>\n<pre><code>enum class confirm {yes};\n\nstruct item\n{\n  confirm s:4; // (1) limiting storage size required\n};\n\nint main()\n{\n  item itm;\n\n  itm.s = confirm::yes; // (2) OK\n\n  switch (itm.s)\n  {\n    case confirm::yes: // (3) Failure, need static data cast here?\n      break;\n  }\n}\n</code></pre>\n<p>produces error:</p>\n<pre><code>In function \u2018int main()\u2019:\nerror: could not convert \u2018yes\u2019 from \u2018confirm\u2019 to \u2018int\u2019\n case confirm::yes:\n               ^\n</code></pre>\n<p>while compiling with <em>g++</em> but compiled fine by <em>clang++</em>. <strong>Why</strong> assignment marked by (2) possible but <em>case</em> clause marked by (3) not?</p>\n<p>Warning about <code>too small storage</code> is of <a href=\"https://stackoverflow.com/questions/28401851/is-it-possible-to-specify-the-bit-width-of-an-enum-in-c11\">offtopic</a></p>\n", "Tags": "<c++><g++><switch-statement><bit-fields><enum-class>", "OwnerUserId": "1329132", "AnswerCount": "1"}});