post_cb({"36354041": {"ViewCount": "624", "Body": "<p>Executing the following code:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;type_traits&gt;\n\nstruct s_ref {\n    int &amp;foo;\n};\n\nstruct s_ptr {\n    int *foo;\n};\n\nint main(int argc, char *argv[])\n{\n    std::cout &lt;&lt; \"s_ref is_standard_layout:\" &lt;&lt; std::is_standard_layout&lt;struct s_ref&gt;::value &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"s_ptr is_standard_layout:\" &lt;&lt; std::is_standard_layout&lt;struct s_ptr&gt;::value &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>\n<p>results in:</p>\n<pre><code>s_ref is_standard_layout:0\ns_ptr is_standard_layout:1\n</code></pre>\n<p>Based on the uses of standard layout (i.e.: \"Standard layout types are useful for communicating with code written in other programming languages\") this makes sense, but I'm not sure which is the rule that is violated:</p>\n<blockquote>\n<p id=\"so_36354041_36354041_0\">A standard-layout class is a class (defined with class, struct or\n  union) that:</p>\n<ul>\n<li><p id=\"so_36354041_36354041_1\">has no virtual functions and no virtual base classes.</p></li>\n<li><p id=\"so_36354041_36354041_2\">has the same access control (private, protected, public) for all its non-static data members.</p></li>\n<li><p id=\"so_36354041_36354041_3\">either has no non-static data members in the most derived class and at most one base class with non-static data members, or has no\n  base classes with non-static data members. </p></li>\n<li><p id=\"so_36354041_36354041_4\">its base class (if any) is itself also a standard-layout class.</p></li>\n<li><p id=\"so_36354041_36354041_5\">And, has no base classes of the same type as its first non-static data\n  member.</p></li>\n</ul>\n</blockquote>\n<p><em>Edit</em>: the quote is from: <a href=\"http://www.cplusplus.com/reference/type_traits/is_standard_layout/\">http://www.cplusplus.com/reference/type_traits/is_standard_layout/</a>, but <a href=\"http://en.cppreference.com/w/cpp/concept/StandardLayoutType\">http://en.cppreference.com/w/cpp/concept/StandardLayoutType</a> is also similar.</p>\n", "AcceptedAnswerId": "36354145", "Title": "Why a class with references does not adhere to standard_layout?", "CreationDate": "2016-04-01T10:30:31.780", "Id": "36354041", "CommentCount": "4", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2016-04-01T11:34:55.900", "LastEditorUserId": "118958", "LastActivityDate": "2016-04-01T17:18:06.107", "Score": "23", "OwnerUserId": "118958", "Tags": "<c++>", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_36354041_36354041_2": {"length": 7, "quality": 0.6363636363636364, "section_id": 5851}, "so_36354041_36354149_2": {"length": 5, "quality": 0.7142857142857143, "section_id": 369}, "so_36354041_36354149_6": {"length": 6, "quality": 0.75, "section_id": 5851}, "so_36354041_36354149_5": {"length": 19, "quality": 1.0, "section_id": 5851}, "so_36354041_36354149_3": {"length": 8, "quality": 1.0, "section_id": 5851}, "so_36354041_36354041_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 4706}, "so_36354041_36354041_1": {"length": 5, "quality": 1.0, "section_id": 369}, "so_36354041_36354145_0": {"length": 7, "quality": 1.0, "section_id": 5853}, "so_36354041_36354149_1": {"length": 10, "quality": 1.0, "section_id": 5851}, "so_36354041_36354145_1": {"length": 13, "quality": 1.0, "section_id": 5851}, "so_36354041_36354041_5": {"length": 8, "quality": 0.8, "section_id": 5851}, "so_36354041_36354041_3": {"length": 19, "quality": 1.0, "section_id": 5851}, "so_36354041_36354041_4": {"length": 5, "quality": 0.7142857142857143, "section_id": 5955}}, "n3337": {"so_36354041_36354041_2": {"length": 7, "quality": 0.6363636363636364, "section_id": 5621}, "so_36354041_36354149_2": {"length": 5, "quality": 0.7142857142857143, "section_id": 359}, "so_36354041_36354149_6": {"length": 6, "quality": 0.75, "section_id": 5621}, "so_36354041_36354149_5": {"length": 19, "quality": 1.0, "section_id": 5621}, "so_36354041_36354149_3": {"length": 8, "quality": 1.0, "section_id": 5621}, "so_36354041_36354041_0": {"length": 5, "quality": 0.7142857142857143, "section_id": 359}, "so_36354041_36354041_1": {"length": 5, "quality": 1.0, "section_id": 359}, "so_36354041_36354145_0": {"length": 7, "quality": 1.0, "section_id": 5623}, "so_36354041_36354149_1": {"length": 10, "quality": 1.0, "section_id": 5621}, "so_36354041_36354145_1": {"length": 13, "quality": 1.0, "section_id": 5621}, "so_36354041_36354041_5": {"length": 8, "quality": 0.8, "section_id": 5621}, "so_36354041_36354041_3": {"length": 19, "quality": 1.0, "section_id": 5621}, "so_36354041_36354041_4": {"length": 5, "quality": 0.7142857142857143, "section_id": 5724}}, "n4659": {"so_36354041_36354041_2": {"length": 8, "quality": 0.7272727272727273, "section_id": 7330}, "so_36354041_36354149_2": {"length": 5, "quality": 0.7142857142857143, "section_id": 383}, "so_36354041_36354149_6": {"length": 6, "quality": 0.75, "section_id": 7330}, "so_36354041_36354149_5": {"length": 15, "quality": 0.7894736842105263, "section_id": 7330}, "so_36354041_36354149_3": {"length": 8, "quality": 1.0, "section_id": 7330}, "so_36354041_36354041_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 6103}, "so_36354041_36354041_1": {"length": 5, "quality": 1.0, "section_id": 383}, "so_36354041_36354145_0": {"length": 7, "quality": 1.0, "section_id": 7332}, "so_36354041_36354149_1": {"length": 10, "quality": 1.0, "section_id": 7330}, "so_36354041_36354145_1": {"length": 12, "quality": 0.9230769230769231, "section_id": 6103}, "so_36354041_36354041_5": {"length": 8, "quality": 0.8, "section_id": 7330}, "so_36354041_36354041_3": {"length": 15, "quality": 0.7894736842105263, "section_id": 7330}, "so_36354041_36354041_4": {"length": 5, "quality": 0.7142857142857143, "section_id": 7443}}}, "36354145": {"Id": "36354145", "PostTypeId": "2", "Body": "<p>The point of the C++ standard's concept of a <em>standard layout class</em> is that an instance of such a class can be reliably accessed as or copied to bytes, which, as the C++11 standard notes in its \u00a79/9, makes such a class</p>\n<blockquote>\n<p id=\"so_36354041_36354145_0\"><strong>\u201d</strong>  useful for communicating with code written in other programming languages</p>\n</blockquote>\n<p>However, the C++ standard does not require a reference to use storage at all. It's not an object. You can't take its address. So it can't be (reliably) copied to bytes, or accessed as bytes. And so it's not compatible with the notion of standard layout classes.</p>\n<p>In the formal,</p>\n<b>C++11 \u00a79/7:</b>\n<blockquote>\n<p id=\"so_36354041_36354145_1\"><strong>\u201d</strong> A <em>standard-layout class</em> is a class that:<br>\n  \u2014 has no non-static data members of type non-standard-layout class (or array of such types) or reference,</br></p>\n</blockquote>\n", "LastEditorUserId": "464581", "LastActivityDate": "2016-04-01T10:48:55.450", "Score": "23", "CreationDate": "2016-04-01T10:36:25.533", "ParentId": "36354041", "CommentCount": "1", "OwnerUserId": "464581", "LastEditDate": "2016-04-01T10:48:55.450"}, "36354141": {"Id": "36354141", "PostTypeId": "2", "Body": "<p>In n4140 you can read:</p>\n<p>9 Classes (7.1)</p>\n<blockquote>\n<p id=\"so_36354041_36354141_0\">A standard-layout class is a class that:</p>\n<ul>\n<li>has no non-static data members of type non-standard-layout class (or array of such types) <strong><em>or reference</em></strong>,</li>\n</ul>\n</blockquote>\n<p>[edit]</p>\n<p>for further information on why class with references is not standard layout read this excelent answer: <a href=\"https://stackoverflow.com/questions/15994042/c-standard-layout-and-references\">C++ Standard Layout and References</a></p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2016-04-01T17:18:06.107", "Score": "11", "CreationDate": "2016-04-01T10:36:17.443", "ParentId": "36354041", "CommentCount": "0", "OwnerUserId": "471160", "LastEditDate": "2017-05-23T10:28:58.633"}, "36354149": {"Id": "36354149", "PostTypeId": "2", "Body": "<p>I don't know where you got that quote from, but it misses out the relevant rule from the standard.</p>\n<blockquote>\n<p id=\"so_36354041_36354149_0\"><code>(N3337) [class]/7:</code> A standard-layout class is a class that:</p>\n<p id=\"so_36354041_36354149_1\">\u2014 <strong>has no non-static data members of type non-standard-layout class (or array of such types) or reference,</strong></p>\n<p id=\"so_36354041_36354149_2\">\u2014 has no virtual functions (10.3) and no virtual base classes (10.1),</p>\n<p id=\"so_36354041_36354149_3\">\u2014 has the same access control (Clause 11) for all non-static data members,</p>\n<p id=\"so_36354041_36354149_4\">\u2014 has no non-standard-layout base classes,</p>\n<p id=\"so_36354041_36354149_5\">\u2014 either has no non-static data members in the most derived class and at most one base class with\n  non-static data members, or has no base classes with non-static data members, and</p>\n<p id=\"so_36354041_36354149_6\">\u2014 has no base classes of the same type as the f irst non-static data member.108</p>\n</blockquote>\n", "LastActivityDate": "2016-04-01T10:36:30.297", "CommentCount": "0", "CreationDate": "2016-04-01T10:36:30.297", "ParentId": "36354041", "Score": "12", "OwnerUserId": "496161"}});