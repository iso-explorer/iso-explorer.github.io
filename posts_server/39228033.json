post_cb({"bq_ids": {"n4140": {"so_39228033_39229147_1": {"length": 22, "quality": 0.88, "section_id": 190}}, "n3337": {"so_39228033_39229147_1": {"length": 22, "quality": 0.88, "section_id": 184}}, "n4659": {"so_39228033_39229147_1": {"length": 24, "quality": 0.96, "section_id": 195}}}, "39229147": {"Id": "39229147", "PostTypeId": "2", "Body": "<p>g++ is Standard compliant here, and Visual C++ not:</p>\n<blockquote>\n<p id=\"so_39228033_39229147_0\"><strong>14.6.2 Dependent names [temp.dep]</strong></p>\n<p id=\"so_39228033_39229147_1\">3 In the definition of a class or class template, <strong>the scope of a\n  dependent base class (14.6.2.1) is not examined during unqualified\n  name lookup</strong> either at the point of definition of the class template or\n  member or during an instantiation of the class template or member.</p>\n</blockquote>\n<p>Replacing <code>f()</code> with <code>this-&gt;f()</code> will find the base member.</p>\n", "LastActivityDate": "2016-08-30T13:40:13.457", "CommentCount": "2", "CreationDate": "2016-08-30T13:40:13.457", "ParentId": "39228033", "Score": "15", "OwnerUserId": "819272"}, "39228337": {"Id": "39228337", "PostTypeId": "2", "Body": "<p>In the function definition of the function <code>g</code> the name <code>f</code> is considered as a function declared outside the class (within the class definition this name is not declared; f is a dependent name). </p>\n<pre><code>template &lt;typename T&gt;\nclass X : public Base&lt;T&gt; {\n  public:\n    void g() {\n        T t;\n        f(t);\n    }\n};\n</code></pre>\n<p>So the compiler uses the ADL lookup.</p>\n<p>However if to write an explicit call of a member function</p>\n<pre><code>class X : public Base&lt;T&gt; {\n  public:\n    void g() {\n        T t;\n        this-&gt;f(t);\n    }\n};\n</code></pre>\n<p>then the call of the function <code>f</code> will be considered as a call of the member function of the base class..</p>\n<p>Thus it seems that MS VC++ 2015 has a bug.</p>\n", "LastEditorUserId": "2877241", "LastActivityDate": "2016-08-30T13:30:55.380", "Score": "6", "CreationDate": "2016-08-30T13:06:03.240", "ParentId": "39228033", "CommentCount": "5", "OwnerUserId": "2877241", "LastEditDate": "2016-08-30T13:30:55.380"}, "39228033": {"ViewCount": "501", "Body": "<p>Consider this code:</p>\n<pre><code>#include &lt;iostream&gt;\n\nnamespace N {\n    class A {};\n    void f(A a) { std::cout &lt;&lt; \"N::f\\n\"; }\n}\n\nvoid f(int i) { std::cout &lt;&lt; \"::f\\n\"; }\n\ntemplate &lt;typename T&gt;\nclass Base {\n  public:\n    void f(T x) { std::cout &lt;&lt; \"Base::f\\n\"; }\n};\n\n\ntemplate &lt;typename T&gt;\nclass X : public Base&lt;T&gt; {\n  public:\n    void g() {\n        T t;\n        f(t);\n    }\n};\n\nint main()\n{\n    X&lt;N::A&gt; x1;\n    x1.g();\n\n    X&lt;int&gt; x2;\n    x2.g();\n}\n</code></pre>\n<p>The code is intended to investigate how name lookup works in C++.</p>\n<p>If I compile this program with GNU C++ (version 6.1.0), it prints:</p>\n<pre><code>N::f\n::f\n</code></pre>\n<p>But if I compile it with Microsoft Visual Studio 2015, it prints:</p>\n<pre><code>Base::f\nBase::f\n</code></pre>\n<p>Which is the correct behaviour, and why?</p>\n", "AcceptedAnswerId": "39229147", "Title": "Name lookup differences between g++ and MSVS", "CreationDate": "2016-08-30T12:51:25.910", "Id": "39228033", "CommentCount": "2", "FavoriteCount": "5", "PostTypeId": "1", "LastEditDate": "2016-08-30T13:41:27.310", "LastEditorUserId": "819272", "LastActivityDate": "2016-08-30T13:41:27.310", "Score": "20", "OwnerUserId": "919705", "Tags": "<c++><templates><base-class><name-lookup><dependent-name>", "AnswerCount": "2"}});