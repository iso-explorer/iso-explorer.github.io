post_cb({"3281108": {"ParentId": "3281077", "CommentCount": "0", "Body": "<p>It would be a recursive call to the copy constructor, as copy constructor will be invoked to create a copy of the object passed to it.</p>\n", "OwnerUserId": "310971", "PostTypeId": "2", "Id": "3281108", "Score": "2", "CreationDate": "2010-07-19T12:46:08.133", "LastActivityDate": "2010-07-19T12:46:08.133"}, "3281077": {"CommentCount": "3", "ViewCount": "418", "PostTypeId": "1", "ClosedDate": "2010-07-19T12:46:42.667", "LastEditorUserId": "-1", "CreationDate": "2010-07-19T12:42:05.007", "LastActivityDate": "2010-07-19T12:46:08.133", "Title": "C++ Programming Copy Constructor", "LastEditDate": "2017-05-23T12:27:28.193", "Id": "3281077", "Score": "0", "Body": "<blockquote>\n<p id=\"so_3281077_3281077_0\"><strong>Possible Duplicate:</strong><br>\n<a href=\"https://stackoverflow.com/questions/2685854/why-should-the-copy-constructor-accept-its-parameter-by-reference-in-c\">Why should the copy constructor accept its parameter by reference in C++?</a> </br></p>\n</blockquote>\n<p>Hi experts,</p>\n<p>Can you please tell what happens if I din't give reference of an object in copy constructor.</p>\n<p>Thanks in Advance\nCrazy</p>\n", "Tags": "<c++>", "OwnerUserId": "395818", "AnswerCount": "2"}, "3281100": {"ParentId": "3281077", "CommentCount": "0", "Body": "<p>The correct answer is that you haven't written a copy constructor:</p>\n<blockquote>\n<p id=\"so_3281077_3281100_0\">A non-template constructor for class X is a copy constructor if its first parameter is of type <code>X&amp;</code>, <code>const X&amp;</code>, <code>volatile X&amp;</code> or <code>const volatile X&amp;</code>, and either there are no other parameters or else all other parameters have default arguments (C++03 \u00a712.8/2).</p>\n</blockquote>\n<p>Why can the copy constructor's argument not be taken by value?  The copy constructor is invoked to make copies of objects of the class.  A copy has to be made to pass an object by value.  If the copy constructor could take an object by value, you would end up with infinite recursion trying to invoke it.</p>\n", "OwnerUserId": "151292", "PostTypeId": "2", "Id": "3281100", "Score": "4", "CreationDate": "2010-07-19T12:45:04.573", "LastActivityDate": "2010-07-19T12:45:04.573"}, "bq_ids": {"n4140": {"so_3281077_3281100_0": {"section_id": 451, "quality": 0.9230769230769231, "length": 24}}, "n3337": {"so_3281077_3281100_0": {"section_id": 442, "quality": 0.9230769230769231, "length": 24}}, "n4659": {"so_3281077_3281100_0": {"section_id": 474, "quality": 0.9230769230769231, "length": 24}}}});