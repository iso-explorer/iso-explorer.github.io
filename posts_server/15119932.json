post_cb({"bq_ids": {"n4140": {"so_15119932_15119968_0": {"length": 13, "quality": 0.5416666666666666, "section_id": 7136}}, "n3337": {"so_15119932_15119968_0": {"length": 24, "quality": 1.0, "section_id": 5191}}}, "15119932": {"ViewCount": "44", "Body": "<p>I have a simple .h file like this:</p>\n<pre><code>//test.h\nint x = 12;\n</code></pre>\n<p>If I include this file in ,for example, <code>main.cpp</code> and <code>functions.cpp</code> linker will produce this error which is reasonable :</p>\n<pre><code>error LNK2005: \"int x\" (?x@@3HA) already defined in functions.obj\n</code></pre>\n<p>But when I change variable definition :</p>\n<pre><code>//test.h\nconst int x = 12;\n</code></pre>\n<p>The linker error goes away . Way?</p>\n", "AcceptedAnswerId": "15119968", "Title": "Why doesn't linker produce multiple definition error here?", "CreationDate": "2013-02-27T18:51:13.457", "Id": "15119932", "CommentCount": "0", "LastEditDate": "2013-02-27T19:08:40.173", "PostTypeId": "1", "LastEditorUserId": "848068", "LastActivityDate": "2013-02-27T19:08:40.173", "Score": "0", "OwnerUserId": "848068", "Tags": "<c++><global-variables>", "AnswerCount": "1"}, "15119968": {"PostTypeId": "2", "Body": "<p>A name declared at namespace scope that is <code>const</code> has internal linkage. That is, each file you include <code>test.h</code> into will have its own object named <code>x</code>. See \u00a77.1.1/7:</p>\n<blockquote>\n<p id=\"so_15119932_15119968_0\">A name declared in a namespace scope without a <em>storage-class-specifier</em> has external linkage unless it has internal linkage because of a previous declaration and provided it is not declared <code>const</code>. Objects declared <code>const</code> and not explicitly declared <code>extern</code> have internal linkage.</p>\n</blockquote>\n", "LastActivityDate": "2013-02-27T18:52:37.893", "Id": "15119968", "CommentCount": "4", "CreationDate": "2013-02-27T18:52:37.893", "ParentId": "15119932", "Score": "5", "OwnerUserId": "150634"}});