post_cb({"bq_ids": {"n4140": {"so_16370599_16371086_0": {"length": 21, "quality": 1.0, "section_id": 5484}, "so_16370599_16371086_1": {"length": 28, "quality": 0.7777777777777778, "section_id": 5485}}, "n3337": {"so_16370599_16371086_0": {"length": 21, "quality": 1.0, "section_id": 5270}, "so_16370599_16371086_1": {"length": 31, "quality": 0.8611111111111112, "section_id": 5271}}, "n4659": {"so_16370599_16371086_0": {"length": 21, "quality": 1.0, "section_id": 6919}, "so_16370599_16371086_1": {"length": 28, "quality": 0.7777777777777778, "section_id": 6920}}}, "16371086": {"Id": "16371086", "PostTypeId": "2", "Body": "<p>It appears that GCC is correct in giving the error.  In your example, the friend declaration of <code>operator&gt;&gt;</code> does specify that <code>operator&gt;&gt;</code> will be a member of <code>TestNS</code>, but it doesn't actually declare it there.  You still need a declaration of <code>operator&gt;&gt;</code> inside <code>TestNS</code> before you can define it outside of <code>TestNS</code>:</p>\n<pre><code>namespace TestNS\n{\n    class Test\n    {\n        friend istream &amp;operator&gt;&gt;(istream &amp;in, Test &amp;value);\n\n    public:\n        Test(double real, double image);\n\n    private:\n        double real;\n        double image;\n        void initialize(double real, double image);\n\n    };\n\n    istream &amp;operator&gt;&gt;(istream &amp;in,Test &amp;value); // need this\n}\n</code></pre>\n<p>Now this is ok:</p>\n<pre><code>istream&amp; TestNS::operator&gt;&gt; (istream &amp;in, TestNS::Test &amp;value)\n{\n    value.real = 10.0;\n    value.image = 10.0;        \n    return in;    \n}\n</code></pre>\n<p>The relevant part of the standard is 7.3.1.2 p2 (for C++03):</p>\n<blockquote>\n<p id=\"so_16370599_16371086_0\">Members of a named namespace can also be defined outside that\n  namespace by explicit qualification of the name being defined,\n  <strong>provided that the entity being defined was already declared in the namespace</strong>...</p>\n</blockquote>\n<p>The next paragraph indicates (although somewhat indirectly) that although the friend declaration inside the class does make the function a member of the namespace, it does not actually declare it there, since a separate declaration is necessary for the function's name to become visible within the namespace:</p>\n<blockquote>\n<p id=\"so_16370599_16371086_1\">If a <code>friend</code> declaration in a non-local class first declares a class\n  or function, the friend class or function is a member of the innermost\n  enclosing namespace.  The name of the friend function is not found by\n  simple name lookup <strong>until a matching declaration is provided in that\n  namespace scope</strong> (either before or after the class declaration granting\n  friendship).</p>\n</blockquote>\n", "LastActivityDate": "2013-05-04T06:01:23.263", "Score": "4", "CreationDate": "2013-05-04T06:01:23.263", "ParentId": "16370599", "CommentCount": "1", "OwnerUserId": "951890"}, "16370599": {"ViewCount": "141", "Body": "<p>Following code compiles just fine under Visual Studio 2012 Express, Windows 8</p>\n<p>But on my preferred platform, Eclipse Juno, GCC 4.2 on OS X \nI receive the following error:</p>\n<p>../src/Test.cpp:20: error: 'std::istream&amp; TestNS::operator&gt;&gt;(std::istream&amp;, TestNS::Test&amp;)' should have been declared inside 'TestNS'</p>\n<pre><code>#include &lt;cstdio&gt;\n#include &lt;cstdlib&gt;\n#include &lt;iostream&gt;\n\nusing std::istream;\n\nnamespace TestNS\n{\nclass Test\n{\n    friend istream &amp;operator&gt;&gt;(istream &amp;in, Test &amp;value);\n\npublic:\n    Test(double real, double image);\n\nprivate:\n    double real;\n    double image;\n    void initialize(double real, double image);\n\n};\n}\n\n#include &lt;cstdio&gt;\n#include &lt;cstdlib&gt;\n#include &lt;iostream&gt;\n#include \"Header.h\"\n\nusing std::istream;\nusing namespace TestNS;\n\nTestNS::Test::Test(double real = 0.0, double image = 0.0) : real(real), image(image)\n{\n\n}\n\nvoid TestNS::Test::initialize(double real,  double image)\n{\nthis-&gt;real = real;\nthis-&gt;image = image;\n}\n\nistream&amp; TestNS::operator&gt;&gt; (istream &amp;in, TestNS::Test &amp;value)\n{\nvalue.real = 10.0;\nvalue.image = 10.0;\n\nreturn in;\n\n}\n\nint main()\n{\n\n}\n</code></pre>\n<p>Any assistance would be most helpful.\nWorking on assignment for school project.</p>\n", "AcceptedAnswerId": "16371086", "Title": "C++ compiles on Windows but errors under OS X GCC", "CreationDate": "2013-05-04T04:31:45.127", "Id": "16370599", "CommentCount": "5", "PostTypeId": "1", "LastActivityDate": "2013-05-04T06:01:23.263", "Score": "1", "OwnerUserId": "160433", "Tags": "<c++><eclipse><osx><gcc>", "AnswerCount": "1"}});