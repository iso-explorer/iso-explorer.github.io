post_cb({"10976746": {"Id": "10976746", "PostTypeId": "2", "Body": "<p>You cannot have a recursive type definition like </p>\n<pre><code>struct edge_info;\n\ntypedef adjacency_list&lt;..., edge_info&gt; graph_type;\n\ntypedef boost::property_map&lt;graph_type, ...&gt;::type position_map_type;\n\nstruct edge_info { map_computation&lt;position_map_type&gt;* c; };\n</code></pre>\n<p>As was mentioned in e.g. <a href=\"https://stackoverflow.com/a/6517325/819272\">this question</a>, the C++ Standard says in \u00a717.4.3.6/2,</p>\n<blockquote>\n<p id=\"so_10971456_10976746_0\">In particular, the effects are undefined in the following cases:</p>\n<p id=\"so_10971456_10976746_1\">__ [..] \u2014 if an incomplete type (3.9) is used as a template argument when instantiating a template component.\n  __ [..]</p>\n</blockquote>\n<p>Depending on what you want to accomplish (it's not entirely clear from your question), you might want to consider the Curiously Recurring Template Pattern (CRTP) in which you can do something like this:</p>\n<pre><code>template&lt;typename edge&gt;\nclass some_graph_type \n{ // ... };\n\nclass my_edge_type\n: \n    public some_graph_type&lt;my_edge_type&gt; \n{ // ... };\n</code></pre>\n<p>So you can have an <code>edge</code> class derive from a class template with itself as a template parameter. Similarly, you can have an <code>edge</code> class have an <code>edge*</code> member (similar to a linked-list) but not a member for which you need to know the full definition of <code>edge</code> itself first.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2012-06-11T08:36:12.210", "Score": "1", "CreationDate": "2012-06-11T08:36:12.210", "ParentId": "10971456", "CommentCount": "5", "OwnerUserId": "819272", "LastEditDate": "2017-05-23T11:55:47.977"}, "10971456": {"ViewCount": "355", "Body": "<p>I had this code compiling correctly on some g++ 4.x version, now version 4.6 terminates compilation with an error:</p>\n<pre><code>/usr/include/boost/pending/property.hpp:35:7: error: \u2018boost::property&lt;Tag, T, Base&gt;::m_value\u2019 has incomplete type\n</code></pre>\n<p>The error seems to be caused by the loop between the graph_type and the edge_info type declarations. </p>\n<p>I was able to isolate the problem in the following few lines of code. How can I use a type that depends on a bundled property of the nodes to define a property of the edges? The solution should still use bundled properties (because a lot of code depends on this graph type). How can I correct the following code?</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;boost/graph/adjacency_list.hpp&gt;\n\nusing namespace std;\nusing namespace boost;\n\ntemplate&lt;typename map_type&gt;\nstruct map_computation {\n  map_type m;\n};\n\nstruct vertex_info;\nstruct edge_info;\n\ntypedef adjacency_list&lt;vecS, \n               vecS, \n               bidirectionalS, \n               vertex_info, \n               edge_info&gt; graph_type;\n\nstruct position {\n  double x, y;\n};\n\nstruct vertex_info {\n  position p;\n};\n\ntypedef boost::property_map&lt;graph_type, \n                position vertex_info::*&gt;::type position_map_type;\n\nstruct edge_info {\n  map_computation&lt;position_map_type&gt;* c;\n};\n\nint main(int argc, char* argv[])\n{\n  graph_type g;\n  return 0;\n}\n</code></pre>\n<p>EDIT: the complete error log reads:</p>\n<pre><code>In file included from /usr/include/boost/graph/graph_traits.hpp:22:0,\n                 from /usr/include/boost/graph/adjacency_list.hpp:33,\n                 from gtest.cc:2:\n/usr/include/boost/pending/property.hpp: In instantiation of \u2018boost::property&lt;boost::edge_bundle_t, edge_info, boost::no_property&gt;\u2019:\n/usr/include/boost/pending/detail/property.hpp:94:48:   instantiated from \u2018boost::detail::build_property_tag_value_alist&lt;boost::property&lt;boost::edge_bundle_t, edge_info, boost::no_property&gt; &gt;\u2019\n/usr/include/boost/pending/property.hpp:63:81:   instantiated from \u2018boost::property_value&lt;boost::property&lt;boost::edge_bundle_t, edge_info, boost::no_property&gt;, boost::edge_bundle_t&gt;\u2019\n/usr/include/boost/graph/properties.hpp:448:63:   instantiated from \u2018boost::graph_detail::retagged_bundle&lt;boost::property&lt;boost::edge_bundle_t, edge_info, boost::no_property&gt;, boost::edge_bundle_t&gt;\u2019\n/usr/include/boost/graph/properties.hpp:461:64:   instantiated from \u2018boost::graph_detail::normal_property&lt;edge_info, boost::edge_bundle_t&gt;\u2019\n/usr/include/boost/graph/properties.hpp:473:12:   instantiated from \u2018boost::graph_detail::edge_prop&lt;edge_info&gt;\u2019\n/usr/include/boost/graph/adjacency_list.hpp:381:70:   instantiated from \u2018boost::adjacency_list&lt;boost::vecS, boost::vecS, boost::bidirectionalS, vertex_info, edge_info&gt;\u2019\n/usr/include/boost/graph/properties.hpp:418:44:   instantiated from \u2018boost::property_map&lt;boost::adjacency_list&lt;boost::vecS, boost::vecS, boost::bidirectionalS, vertex_info, edge_info&gt;, position vertex_info::*&gt;\u2019\ngtest.cc:30:32:   instantiated from here\n/usr/include/boost/pending/property.hpp:35:7: error: \u2018boost::property&lt;Tag, T, Base&gt;::m_value\u2019 has incomplete type\ngtest.cc:13:8: error: forward declaration of \u2018struct edge_info\u2019\ngtest.cc:33:45: error: template argument 1 is invalid\n</code></pre>\n", "Title": "Incomplete type error in BGL when using bundled properties", "CreationDate": "2012-06-10T18:54:14.260", "LastActivityDate": "2012-06-14T11:36:25.657", "CommentCount": "2", "LastEditDate": "2012-06-14T11:36:25.657", "PostTypeId": "1", "LastEditorUserId": "295076", "Id": "10971456", "Score": "2", "OwnerUserId": "295076", "Tags": "<c++><boost><undefined-behavior><boost-graph>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_10971456_10976746_1": {"length": 8, "quality": 1.0, "section_id": 6324}, "so_10971456_10976746_0": {"length": 5, "quality": 1.0, "section_id": 6324}}, "n3337": {"so_10971456_10976746_1": {"length": 8, "quality": 1.0, "section_id": 6081}, "so_10971456_10976746_0": {"length": 5, "quality": 1.0, "section_id": 6081}}, "n4659": {"so_10971456_10976746_1": {"length": 8, "quality": 1.0, "section_id": 7834}, "so_10971456_10976746_0": {"length": 5, "quality": 1.0, "section_id": 7834}}}});