post_cb({"10962372": {"ViewCount": "442", "Body": "<p>test.h</p>\n<pre><code>class A\n{\n    public:\n        virtual void FunctionA(void) = 0;\n        virtual ~A(void);\n};\nclass B\n{\n    public:\n        virtual void FunctionB(void) = 0;\n        virtual ~B(void);\n};\nclass C:public A, public B \n{\n    public:\n        virtual ~C(void) = 0;\n};\n</code></pre>\n<p>test.cpp</p>\n<pre><code>#include \"test.h\"\ninline A::~A(void){}\ninline B::~B(void){}\ninline C::~C(void){}\n</code></pre>\n<p>why are threre a warning C4505 'C:~C' :unreferenced local function has been removed ?</p>\n", "Title": "Multiple Inheritance abstract classes", "CreationDate": "2012-06-09T15:49:28.160", "LastActivityDate": "2013-08-01T15:42:36.010", "CommentCount": "6", "LastEditDate": "2012-06-09T16:57:00.720", "PostTypeId": "1", "LastEditorUserId": "1446365", "Id": "10962372", "Score": "-1", "OwnerUserId": "1446365", "Tags": "<c++>", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_10962372_17998615_1": {"length": 23, "quality": 0.8518518518518519, "section_id": 405}, "so_10962372_17998615_0": {"length": 7, "quality": 0.875, "section_id": 7019}}, "n3337": {"so_10962372_17998615_1": {"length": 23, "quality": 0.8518518518518519, "section_id": 396}, "so_10962372_17998615_0": {"length": 7, "quality": 0.875, "section_id": 6765}}, "n4659": {"so_10962372_17998615_1": {"length": 23, "quality": 0.8518518518518519, "section_id": 423}, "so_10962372_17998615_0": {"length": 7, "quality": 0.875, "section_id": 8516}}}, "10962414": {"Id": "10962414", "PostTypeId": "2", "Body": "<p>You can't declare a function pure and define it in the class body, it's just not a legal syntax. I don't know what the warning implies that your compiler thinks it means.</p>\n<p>You need to do something like this instead (for all your pure virtual destructors).</p>\n<pre><code>class A {\npublic:\n    virtual void FunctionA() = 0;\n    virtual ~A() = 0;\n};\ninline A::~A() {}\n</code></pre>\n<p>Or, as you have at least one another pure virtual function in each of your classes anyway, there is no real merit making the destructor pure virtual in this case so you could just do (in the class body):</p>\n<pre><code>virtual ~A() {}\n</code></pre>\n<p><strong>EDIT:</strong> Also, you need to have a return type (e.g. <code>void</code>) for <code>A::FunctionA()</code> and <code>B::FunctionB()</code>.</p>\n", "LastEditorUserId": "19563", "LastActivityDate": "2012-06-09T16:26:21.910", "Score": "0", "CreationDate": "2012-06-09T15:54:29.123", "ParentId": "10962372", "CommentCount": "2", "LastEditDate": "2012-06-09T16:26:21.910", "OwnerUserId": "19563"}, "17998615": {"Id": "17998615", "PostTypeId": "2", "Body": "<p>This is a duplicate of <a href=\"https://stackoverflow.com/questions/12592865/pure-virtual-inheritance-multiple-inheritance-and-c4505\">Pure virtual inheritance, multiple inheritance, and C4505</a>. I requote my answer from there:</p>\n<p>This is a bug in MSVC++ 2010 and earlier. The code actually gets\ncalled even though the compiler claims to have removed the code. It seems to be\nfixed in MSVC++ 2012. Other compilers like gcc or clang do not emit a warning.\nThe syntax \"... = 0 {...}\" is illegal according to the C++03 standard section 10.4.2 (even though MSVC++ does not complain) as it has already been pointed out:</p>\n<blockquote>\n<p id=\"so_10962372_17998615_0\">Note: a function declaration cannot provide both a pure-specifier and\n  a definition</p>\n</blockquote>\n<p>However, defining a pure virtual destructor in general is not illegal and section 12.4.7 states:</p>\n<blockquote>\n<p id=\"so_10962372_17998615_1\">A destructor can be declared virtual (10.3) or pure virtual (10.4); if\n  any objects of that class or any derived class are created in the\n  program, the destructor shall be defined. If a class has a base class\n  with a virtual destructor, its destructor (whether user- or\n  implicitly- declared) is virtual.</p>\n</blockquote>\n<p>My way of disabling the warning is to add the following lines to the header:</p>\n<pre><code>#if defined(_MSC_VER) &amp;&amp; (_MSC_VER &lt;= 1600)\n#  pragma warning(disable:4505)\n#endif\n</code></pre>\n<p>If you want to disable the warnings more locally then <code>#pragma warning( push )</code> and <code>#pragma warning( pop )</code> might be of help. See <a href=\"http://msdn.microsoft.com/en-us/library/2c8f766e%28v=vs.80%29.aspx\" rel=\"nofollow noreferrer\">http://msdn.microsoft.com/en-us/library/2c8f766e(v=vs.80).aspx</a></p>\n<p>Since the code seems to get called you can ignore the warnings in my opinion.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2013-08-01T15:42:36.010", "Score": "0", "CreationDate": "2013-08-01T15:42:36.010", "ParentId": "10962372", "CommentCount": "0", "LastEditDate": "2017-05-23T12:11:36.543", "OwnerUserId": "1225999"}});