post_cb({"bq_ids": {"n4140": {"so_29756518_29756644_0": {"length": 13, "quality": 1.0, "section_id": 304}}, "n3337": {"so_29756518_29756644_0": {"length": 13, "quality": 1.0, "section_id": 295}}, "n4659": {"so_29756518_29756644_0": {"length": 13, "quality": 1.0, "section_id": 311}}}, "29756690": {"Id": "29756690", "PostTypeId": "2", "Body": "<p>I will answer for each question:</p>\n<p>1) It's l-value reference, but <code>fun</code> needs r-value reference, so <code>fun2&lt;&gt;(ea)</code> is ok</p>\n<p>2) From Scott Mayers answer: </p>\n<p><a href=\"https://isocpp.org/blog/2012/11/universal-references-in-c11-scott-meyers\" rel=\"nofollow\">https://isocpp.org/blog/2012/11/universal-references-in-c11-scott-meyers</a></p>\n<blockquote>\n<p id=\"so_29756518_29756690_0\">Universal references can only occur in the form \u201cT&amp;&amp;\u201d!  Even the\n  simple addition of a const qualifier is enough to disable the\n  interpretation of \u201c&amp;&amp;\u201d as a universal reference</p>\n</blockquote>\n<p>3) But in <code>fun2</code> the parameter is <strong>const</strong> T&amp; data and therefore it works.</p>\n<p>One more good video about references: <a href=\"http://channel9.msdn.com/Shows/Going+Deep/Cpp-and-Beyond-2012-Scott-Meyers-Universal-References-in-Cpp11\" rel=\"nofollow\">http://channel9.msdn.com/Shows/Going+Deep/Cpp-and-Beyond-2012-Scott-Meyers-Universal-References-in-Cpp11</a></p>\n", "LastActivityDate": "2015-04-20T19:28:23.847", "CommentCount": "0", "CreationDate": "2015-04-20T19:28:23.847", "ParentId": "29756518", "Score": "0", "OwnerUserId": "2815738"}, "29756518": {"ViewCount": "77", "Body": "<p>I have <strong>three</strong> questions in the code below, it would be nice if someone made three bullet points which addressed all of them:</p>\n<pre><code>template &lt;typename T&gt;\nvoid fun(const T&amp;&amp; data) // 2) Isn't this a universal reference even with const?\n{\n}\n\ntemplate &lt;typename T&gt;\nvoid fun2(const T&amp; data)\n{\n}\n\n\nint main() {\n    int ea = 22;\n    fun&lt;&gt;(ea); // 1) Why no matching call? Why isn't this a l-value reference?\n    fun2&lt;&gt;(0); // 3) Why does this work? 0 can't bind to a reference\n\n    return 0;\n}\n</code></pre>\n", "AcceptedAnswerId": "29756690", "Title": "Questions on universal reference and lvalue refs", "CreationDate": "2015-04-20T19:18:35.927", "Id": "29756518", "CommentCount": "5", "PostTypeId": "1", "LastActivityDate": "2015-04-20T19:28:23.847", "Score": "0", "OwnerUserId": "4715851", "Tags": "<c++>", "AnswerCount": "2"}, "29756644": {"Id": "29756644", "PostTypeId": "2", "Body": "<p><ol>\n<li>No, <code>const T&amp;&amp; data</code> means rvalue reference to <code>const T</code>.</li>\n<li>It's not a forwarding reference. Only the form <code>T&amp;&amp;</code> is. The rule is given in the standard at [temp.deduct.call]/3; emphasis mine.</li></ol></p>\n<blockquote>\n<p id=\"so_29756518_29756644_0\">... If <code>P</code> is an rvalue reference to a <strong>cv-unqualified template parameter</strong> and the argument is an lvalue, the type \u201clvalue reference to <code>A</code>\u201d is used in\n  place of <code>A</code> for type deduction.\n  </p></blockquote>\n<li>A const lvalue reference can bind to an rvalue, even a literal such as <code>0</code>.</li>\n", "LastActivityDate": "2015-04-20T19:25:27.117", "CommentCount": "0", "CreationDate": "2015-04-20T19:25:27.117", "ParentId": "29756518", "Score": "3", "OwnerUserId": "481267"}});