post_cb({"5392085": {"ParentId": "5391927", "CommentCount": "0", "Body": "<p>You have to declare the operators outside the struct as well. Same error is reported by gcc 4.4.</p>\n<pre><code>#include &lt;ostream&gt;\n\nstruct F {\n};\n\nstruct N {\n  friend std::ostream&amp; operator&lt;&lt; (std::ostream&amp;, const N&amp;);\n  friend std::ostream&amp; operator&lt;&lt; (std::ostream&amp;, const F&amp;);    \n};\n\nstd::ostream&amp; operator&lt;&lt; (std::ostream&amp;, const N&amp;);\nstd::ostream&amp; operator&lt;&lt; (std::ostream&amp;, const F&amp;);    \n\nvoid foo(std::ostream &amp;out) {\n  F bar;\n  out &lt;&lt; bar;\n}\n</code></pre>\n", "OwnerUserId": "460756", "PostTypeId": "2", "Id": "5392085", "Score": "4", "CreationDate": "2011-03-22T13:32:54.033", "LastActivityDate": "2011-03-22T13:32:54.033"}, "5392037": {"ParentId": "5391927", "CommentCount": "2", "Body": "<p>The problem is that a friend declaration doesn't provide a global function declaration, unless you provide an inline implementation.</p>\n<pre><code>struct N {\n   friend void func1() { }\n   friend void func2();\n   friend void func3();\n};\n\nvoid func3();\n\nfunc1(); /* OK */\nfunc2(); /* not OK */\nfunc3(); /* OK */\n</code></pre>\n", "OwnerUserId": "211659", "PostTypeId": "2", "Id": "5392037", "Score": "5", "CreationDate": "2011-03-22T13:29:02.583", "LastActivityDate": "2011-03-22T13:29:02.583"}, "5392399": {"ParentId": "5391927", "CommentCount": "1", "Body": "<p>I've been trudging through the standard (FCD, n3242) since I saw the question</p>\n<p>In <strong>[class.friend]</strong> one can read:</p>\n<blockquote>\n<p id=\"so_5391927_5392399_0\">6) A function can be defined in a friend declaration of a class if and only if the class is a non-local class (9.8), the function name is unqualified, and the function has namespace scope.</p>\n<p id=\"so_5391927_5392399_1\">7) Such a function is implicitly inline. A friend function defined in a class is in the (lexical) scope of the class in which it is defined. A friend function defined outside the class is not (3.4.1).</p>\n<p id=\"so_5391927_5392399_2\">9) A name nominated by a friend declaration shall be accessible in the scope of the class containing the friend declaration.</p>\n</blockquote>\n<p>So, what happens here ?</p>\n<pre><code>struct F {\n};\n\nstruct N {\n  friend std::ostream&amp; operator&lt;&lt; (std::ostream&amp;, const F&amp;);    \n};\n</code></pre>\n<p>The friend declaration nominates this overload of <code>operator&lt;&lt;</code> to be a friend of <code>N</code>. However this overload has not been declared in a lexical scope (either namespace or class). Also, <code>7</code> does not apply because it is not defined within <code>N</code> either.</p>\n<p>Therefore, when looking up the overloads of <code>operator&lt;&lt;</code> that can apply in:</p>\n<pre><code>void foo(std::ostream &amp;out) {\n  F bar;\n  out &lt;&lt; bar;\n}\n</code></pre>\n<p>There is no valid overload (actually, it could be there is no overload at all).</p>\n<p>You have two solutions:</p>\n<ul>\n<li>use <code>7</code>: define the function inline following the friend declaration.</li>\n<li>use <code>9</code>: declare the function in the namespace too</li>\n</ul>\n<p>Because of <code>4</code> though:</p>\n<blockquote>\n<p id=\"so_5391927_5392399_3\">4) A function first declared in a friend declaration has external linkage (3.5). Otherwise, the function retains its previous linkage (7.1.1).</p>\n</blockquote>\n<p>I would recommend declaring it <em>prior</em> to the <code>friend</code> declaration to control its linkage, but it will rarely matters.</p>\n", "OwnerUserId": "147192", "PostTypeId": "2", "Id": "5392399", "Score": "0", "CreationDate": "2011-03-22T13:56:46.713", "LastActivityDate": "2011-03-22T13:56:46.713"}, "5391927": {"CommentCount": "4", "ViewCount": "1011", "CreationDate": "2011-03-22T13:20:34.500", "LastActivityDate": "2011-03-22T13:56:46.713", "Title": "g++ 4.5 can't find a friend function", "AcceptedAnswerId": "5392085", "PostTypeId": "1", "Id": "5391927", "Score": "3", "Body": "<p>G'day!</p>\n<p>I have a question around the use of <code>friend</code> in C++. Consider the following piece of code:</p>\n<pre><code>#include &lt;ostream&gt;\n\nstruct F {\n};\n\nstruct N {\n  friend std::ostream&amp; operator&lt;&lt; (std::ostream&amp;, const N&amp;);\n  friend std::ostream&amp; operator&lt;&lt; (std::ostream&amp;, const F&amp;);    \n};\n\nvoid foo(std::ostream &amp;out) {\n  F bar;\n  out &lt;&lt; bar;\n}\n</code></pre>\n<p>My understanding always was, that <code>friend</code> is similar to <code>static</code> with the additional property that the <code>friend</code> function has access to the private part of the class. Under that assumption, the code should compile, since there is an <code>operator&lt;&lt;</code> that takes an <code>ostream&amp;</code> and a (const) <code>F&amp;</code>.</p>\n<p>It appears that g++ 4.0 shares my thoughts on this, as it accepts that code. The much newer g++ 4.5(.2) however, rejects the code with the message:</p>\n<pre><code>ns.cc: In function 'void foo(std::ostream&amp;)':\nns.cc:14:10: error: no match for 'operator&lt;&lt;' in 'out &lt;&lt; bar'\n</code></pre>\n<p>is g++ 4.5 wrong or am I (and g++ 4.0) wrong?</p>\n<p>(The solution to move the friend declaration into the <code>F</code> class doesn't help, as the <code>operator&lt;&lt;</code> will need access to the private part of <code>N</code>.)</p>\n<p>Regards,\nStefan</p>\n", "Tags": "<c++><g++><friend>", "OwnerUserId": "40401", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_5391927_5392399_3": {"section_id": 6687, "quality": 0.9285714285714286, "length": 13}, "so_5391927_5392399_1": {"section_id": 6690, "quality": 0.9444444444444444, "length": 17}, "so_5391927_5392399_2": {"section_id": 6692, "quality": 1.0, "length": 10}, "so_5391927_5392399_0": {"section_id": 6689, "quality": 1.0, "length": 15}}, "n3337": {"so_5391927_5392399_3": {"section_id": 6442, "quality": 0.9285714285714286, "length": 13}, "so_5391927_5392399_1": {"section_id": 6445, "quality": 0.9444444444444444, "length": 17}, "so_5391927_5392399_2": {"section_id": 6447, "quality": 1.0, "length": 10}, "so_5391927_5392399_0": {"section_id": 6444, "quality": 1.0, "length": 15}}, "n4659": {"so_5391927_5392399_3": {"section_id": 8162, "quality": 0.8571428571428571, "length": 12}, "so_5391927_5392399_1": {"section_id": 8165, "quality": 0.9444444444444444, "length": 17}, "so_5391927_5392399_2": {"section_id": 8167, "quality": 1.0, "length": 10}, "so_5391927_5392399_0": {"section_id": 8164, "quality": 1.0, "length": 15}}}});