post_cb({"bq_ids": {"n4140": {"so_48485229_48485647_0": {"length": 16, "quality": 0.9411764705882353, "section_id": 5965}}, "n3337": {"so_48485229_48485647_0": {"length": 16, "quality": 0.9411764705882353, "section_id": 5734}}, "n4659": {"so_48485229_48485647_0": {"length": 16, "quality": 0.9411764705882353, "section_id": 7456}}}, "48485647": {"Id": "48485647", "PostTypeId": "2", "Body": "<p><a href=\"https://timsong-cpp.github.io/cppwp/n4659/expr.prim.lambda#closure-6\" rel=\"nofollow noreferrer\">[expr.prim.lambda]/6</a>: </p>\n<blockquote>\n<p id=\"so_48485229_48485647_0\">The value returned by this conversion function is the address of a function F that, when invoked, has the same effect as invoking the closure type's function call operator.</p>\n</blockquote>\n<p>The pointed to function is specified in term of its behavior, not in term of its identity. So it is unspecified if this assertion will fire.</p>\n", "LastActivityDate": "2018-01-28T11:06:58.017", "Score": "4", "CreationDate": "2018-01-28T11:06:58.017", "ParentId": "48485229", "CommentCount": "0", "OwnerUserId": "5632316"}, "48485229": {"ViewCount": "101", "Body": "<p>Simply, will the following assert ever fire?</p>\n<pre><code>template&lt;typename T&gt;\nauto destructor()\n{\n    return +[](void* p){\n        ((T*)p)-&gt;~T();\n    };\n}\n\nassert(destructor&lt;int&gt;() != destructor&lt;char&gt;());\n</code></pre>\n<p>The standard only seems to say that the <a href=\"https://timsong-cpp.github.io/cppwp/expr.prim.lambda#closure-7\" rel=\"noreferrer\">lambda converted function pointer does the same thing as the lambda itself</a>, then you realize trivially destructed types all have no-op destructors and are therefore identical.</p>\n", "Title": "Lambda converted function pointer comparison", "CreationDate": "2018-01-28T10:15:06.143", "LastActivityDate": "2018-01-28T11:06:58.017", "CommentCount": "7", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2018-01-28T10:53:01.633", "LastEditorUserId": "8922", "Id": "48485229", "Score": "8", "OwnerUserId": "4832499", "Tags": "<c++><lambda><language-lawyer>", "AnswerCount": "1"}});