post_cb({"17559165": {"CommentCount": "5", "ViewCount": "881", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2013-07-09T22:08:52.733", "LastActivityDate": "2013-07-21T17:04:11.140", "Title": "Is gcc wrong not diagnose narrowing conversions in non-type template arguments?", "LastEditDate": "2017-05-23T12:08:16.330", "Id": "17559165", "Score": "11", "Body": "<p>The following program compiles without errors or warning with gcc 4.8.1,\n<code>-Wall -std=c++11</code>:</p>\n<pre><code>template&lt;unsigned N&gt;\nstruct A{};\n\nint main(){\n    A&lt;1-2&gt; a;\n    (void)a;\n    return 0;\n}\n</code></pre>\n<p>clang 3.3 with the same options gives this error:</p>\n<blockquote>\n<p id=\"so_17559165_17559165_0\">error: non-type template argument evaluates to -1, which cannot be narrowed to type 'unsigned int' [-Wc++11-narrowing]</p>\n</blockquote>\n<p>As per <a href=\"https://stackoverflow.com/q/17551583/1362568\">this question</a>, it looks \nlike gcc's present policy just to give warnings for narrowing conversions where \nthe Standard indicates errors, and where clang gives the indicated errors. \nBut in this case gcc does not even give a warning.</p>\n<p>None of the examples of narrowing conversion errors that are given by the \nStandard at \u00a7 8.5.4/7 (reproduced in <a href=\"https://stackoverflow.com/q/17551583/1362568\">that question</a>)\ncovers the case of a narrowing conversion of a non-type template argument, \nbut at \u00a7 14.3.2/5 the Standard says:</p>\n<blockquote>\n<p id=\"so_17559165_17559165_1\">For a non-type template-parameter of integral or enumeration type, conversions permitted in a con-\n  verted constant expression (5.19) are applied.</p>\n</blockquote>\n<p>And \u00a7 5.19/3 says:</p>\n<blockquote>\n<p id=\"so_17559165_17559165_2\">A converted constant expression of type T is a literal constant expression, implicitly converted to type T,\n  where the implicit conversion (if any) is permitted in a literal constant expression and the implicit conversion\n  sequence contains only user-defined conversions, lvalue-to-rvalue conversions (4.1), integral promotions (4.5),\n  and integral conversions (4.7) <em>other than narrowing conversions</em> (8.5.4)</p>\n</blockquote>\n<p>(my emphasis).</p>\n<p>This seems to me to mean that even by its own yardstick gcc is at fault in not at all diagnosing a\nnarrowing conversion in this case. Do I read this right? Is there a \nStandard-based counter-argument?</p>\n<p>I am asking the question with more feeling that mere curiosity. In a \nrecursive TMP setting, clang's error diagnostic in this case will pinpoint a \nbug in which an unsigned non-type template argument falls \nthrough 0, whereas all you get from gcc is \"maximum template instantiation depth exceeded\".</p>\n", "Tags": "<c++11><type-conversion><non-type><narrowing>", "OwnerUserId": "1362568", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_17559165_17559165_1": {"section_id": 91, "quality": 0.7142857142857143, "length": 10}, "so_17559165_17559165_2": {"section_id": 6186, "quality": 0.7941176470588235, "length": 27}}, "n3337": {"so_17559165_17559165_1": {"section_id": 86, "quality": 0.7142857142857143, "length": 10}, "so_17559165_17559165_2": {"section_id": 5947, "quality": 0.9411764705882353, "length": 32}}, "n4659": {"so_17559165_17559165_2": {"section_id": 7689, "quality": 0.7352941176470589, "length": 25}}}, "17774744": {"ParentId": "17559165", "CommentCount": "3", "Body": "<p>GCC is not so pedantic like Clang, however, it can still detect those kind of errors:</p>\n<pre><code>gcc -Wsign-conversion 1.cpp\n1.cpp: In function 'int main()':\n1.cpp:5:10: warning: negative integer implicitly converted to unsigned type [-Wsign-conversion]\n     A&lt;1-2&gt; a;\n          ^\n</code></pre>\n<p><code>-Wall</code> does not actually turn on all possible checks.\nRead this page for more examples: <a href=\"http://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html\" rel=\"nofollow\">http://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html</a></p>\n<p>I'm using <code>gcc.EXE (GCC) 4.8.0 20130203 (experimental)</code></p>\n", "OwnerUserId": "1065190", "PostTypeId": "2", "Id": "17774744", "Score": "2", "CreationDate": "2013-07-21T17:04:11.140", "LastActivityDate": "2013-07-21T17:04:11.140"}});