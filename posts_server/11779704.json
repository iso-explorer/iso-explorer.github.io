post_cb({"11779734": {"ParentId": "11779704", "PostTypeId": "2", "CommentCount": "3", "Body": "<h1>Yes.</h1>\n<p><code>long</code> is just a shorthand for <code>long int</code>. This is because in principle <code>long</code> is just a qualifier (it can also be used for prolonging a <code>double</code> datatype, for example)</p>\n<p>From C++ ISO Standard, section 7.1.5.2, a table of equivalent type specifiers:</p>\n<p><img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/HIY6Q.png\"/></p>\n", "OwnerUserId": "267885", "LastEditorUserId": "267885", "LastEditDate": "2012-08-02T14:51:07.797", "Id": "11779734", "Score": "18", "CreationDate": "2012-08-02T14:35:10.550", "LastActivityDate": "2012-08-02T14:51:07.797"}, "11779952": {"ParentId": "11779704", "CommentCount": "5", "Body": "<p>\u00a76.7.2 of the C99 standard gives the following list of types (this is only an excerpt):</p>\n<ul>\n<li><code>short</code>, <code>signed short</code>, <code>short int</code>, or <code>signed short int</code></li>\n<li><code>unsigned short</code>, or <code>unsigned short int</code></li>\n<li><code>int</code>, <code>signed</code>, or <code>signed int</code></li>\n<li><code>unsigned</code>, or <code>unsigned int</code></li>\n<li><code>long</code>, <code>signed long</code>, <code>long int</code>, or <code>signed long int</code></li>\n<li><code>unsigned long</code>, or <code>unsigned long int</code></li>\n<li><code>long long</code>, <code>signed long long</code>, <code>long long int</code>, or <code>signed long long int</code></li>\n<li><code>unsigned long long</code>, or <code>unsigned long long int</code></li>\n</ul>\n<p>with the following additional point:</p>\n<blockquote>\n<p id=\"so_11779704_11779952_0\">(5) Each of the comma-separated sets designates the same type, except that for bit-fields, it is implementation-defined whether the specifier <code>int</code> designates the same type as <code>signed int</code> or the same type as <code>unsigned int</code>.</p>\n</blockquote>\n", "OwnerUserId": "1374437", "PostTypeId": "2", "Id": "11779952", "Score": "4", "CreationDate": "2012-08-02T14:44:35.400", "LastActivityDate": "2012-08-02T14:44:35.400"}, "11779744": {"ParentId": "11779704", "CommentCount": "2", "Body": "<p><code>unsigned long int</code> is the correct type definition, however <code>int</code> can be ignored.</p>\n", "OwnerUserId": "299924", "PostTypeId": "2", "Id": "11779744", "Score": "0", "CreationDate": "2012-08-02T14:35:43.850", "LastActivityDate": "2012-08-02T14:35:43.850"}, "11779961": {"ParentId": "11779704", "PostTypeId": "2", "CommentCount": "0", "Body": "<p><em>Yes</em>. <code>unsigned</code>, <code>signed</code>, <code>short</code>, <code>long</code>, <code>long long</code> all are simple type specifiers for <code>XXX int</code>.</p>\n<p>See <em>7.1 Specifiers [dcl.spec]</em> in the standard:</p>\n<blockquote>\n<p id=\"so_11779704_11779961_0\">3 [ Note: Since signed, unsigned, long, and short by default imply int, a type-name appearing after one of\n  those specifiers is treated as the name being (re)declared. [ Example:</p>\n<p id=\"so_11779704_11779961_1\"><code>void h(unsigned Pc); // void h(unsigned int)</code></p>\n<p id=\"so_11779704_11779961_2\"><code>void k(unsigned int Pc); // void k(unsigned int)</code></p>\n<p id=\"so_11779704_11779961_3\">\u2014end example ] \u2014end note ]</p>\n</blockquote>\n<p>and <em>7.1.6.2 Simple type specifiers [dcl.type.simple]</em></p>\n<pre><code>    Table 10 \u2014 simple-type-specifiers and the types they specify\n\n    Specifier(s)            | Type\n    ------------------------+---------------------------------\n    type-name               | the type named\n    simple-template-id      | the type as defined in 14.2\n    char                    | \u201cchar\u201d\n    unsigned char           | \u201cunsigned char\u201d\n    signed char             | \u201csigned char\u201d\n    char16_t                | \u201cchar16_t\u201d\n    char32_t                | \u201cchar32_t\u201d\n    bool                    | \u201cbool\u201d \n    unsigned                | \u201cunsigned int\u201d\n    unsigned int            | \u201cunsigned int\u201d\n    signed                  | \u201cint\u201d\n    signed int              | \u201cint\u201d\n    int                     | \u201cint\u201d\n    unsigned short int      | \u201cunsigned short int\u201d\n    unsigned short          | \u201cunsigned short int\u201d\n    unsigned long int       | \u201cunsigned long int\u201d\n    unsigned long           | \u201cunsigned long int\u201d\n    unsigned long long int  | \u201cunsigned long long int\u201d\n    unsigned long long      | \u201cunsigned long long int\u201d\n    signed long int         | \u201clong int\u201d\n</code></pre>\n", "OwnerUserId": "76722", "LastEditorUserId": "76722", "LastEditDate": "2012-08-02T14:49:54.773", "Id": "11779961", "Score": "1", "CreationDate": "2012-08-02T14:44:54.697", "LastActivityDate": "2012-08-02T14:49:54.773"}, "11779765": {"ParentId": "11779704", "CommentCount": "1", "Body": "<p>Yes, they are the same. Saying <code>unsigned long int</code> is simply explicitly stating that it is an int.</p>\n<p>You can always look at the size of the type by <code>sizeof(unsigned long int)</code> and <code>sizeof(unsigned long)</code></p>\n<p>Hope this helps.</p>\n", "OwnerUserId": "586899", "PostTypeId": "2", "Id": "11779765", "Score": "-1", "CreationDate": "2012-08-02T14:36:34.550", "LastActivityDate": "2012-08-02T14:36:34.550"}, "bq_ids": {"n4140": {"so_11779704_11779961_0": {"section_id": 5390, "quality": 0.9, "length": 18}}, "n3337": {"so_11779704_11779961_0": {"section_id": 5184, "quality": 0.9, "length": 18}}, "n4659": {"so_11779704_11779961_0": {"section_id": 6816, "quality": 0.9, "length": 18}}}, "11779704": {"CommentCount": "0", "ViewCount": "23250", "PostTypeId": "1", "LastEditorUserId": "4505446", "CreationDate": "2012-08-02T14:33:49.433", "LastActivityDate": "2017-08-12T00:16:41.073", "Title": "C++ type unsigned long int", "FavoriteCount": "2", "LastEditDate": "2017-08-12T00:16:41.073", "Id": "11779704", "Score": "15", "Body": "<p>Is  <code>unsigned long int</code>  equivlant to <code>unsigned long</code> ?\nin C++</p>\n<p>In my opinion they are same. But I saw some people still using unsigned long int in code.\nDon't understand why? Could anybody explain it for me</p>\n<pre><code>#include &lt;stdio.h&gt;\n\nint main() {\n    unsigned long int num = 282672; \n    int normalInt = 5;\n    printf(\"\");\n    return 0;\n}\n</code></pre>\n", "Tags": "<c++><c>", "OwnerUserId": "947301", "AnswerCount": "5"}});