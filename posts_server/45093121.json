post_cb({"45093121": {"CommentCount": "4", "ViewCount": "41", "PostTypeId": "1", "LastEditorUserId": "8305034", "CreationDate": "2017-07-14T01:16:24.003", "LastActivityDate": "2017-07-14T01:48:06.623", "Title": "std::cout using ' ' implitations - Dont understand the output", "AcceptedAnswerId": "45093265", "LastEditDate": "2017-07-14T01:20:42.787", "Id": "45093121", "Score": "-1", "Body": "<p>I'm a complete novice in C++, trying to migrate from C to this new language, but using the new things it has to offer. Thanks for the support</p>\n<hr>\n<p><strong>The question is, easy and direct, what does the ' ' do in the std::cout?</strong> </p>\n<pre><code>#include \"includes.h\"\n\nint main( ){\n\n    char c1 = 'x', c2;\n    int i1 = c1 , i2 = 'x';\n\n    c2 = i1;\n\n    std::cout &lt;&lt; c1 &lt;&lt;'&lt;&lt; i1 &lt;&lt;'&lt;&lt; c2 &lt;&lt;'\\n';\n\n}\n</code></pre>\n<hr>\n<p>I copied this code from Bjarne Stroustrup Book (\"Programming Principles and Practice using C++\" second edition) and did minor differences. In it, he said the output was going to be x 120 x or x120x (my eyes don`t catch the difference from the print), which is not the case.</p>\n</hr></hr>", "Tags": "<c++><casting><operators><std><stdout>", "OwnerUserId": "8305034", "AnswerCount": "3"}, "45093275": {"ParentId": "45093121", "CommentCount": "0", "Body": "<p>First you have to understand difference between <code>'a'</code> and <code>\"a\"</code>.</p>\n<p><code>'a'</code> is a character literal. It's of type <code>char</code>, with the value 97 on most systems (the ASCII/Latin-1/Unicode encoding for the letter <code>a</code>).</p>\n<p><code>\"a\"</code> is a string literal.  It's of type <code>const char[2]</code>, and refers to an array of 2 <code>char</code>s with values <code>'a'</code> and <code>'\\0'</code>. In most, but not all, contexts, a reference to <code>\"a\"</code> will be implicitly converted to a pointer to the first character of the string.</p>\n<p>Both</p>\n<pre><code>cout &lt;&lt; 'a';\n</code></pre>\n<p>and</p>\n<pre><code>cout &lt;&lt; \"a\";\n</code></pre>\n<p>happen to produce the same output, but for different reasons. The first prints a single character value. The second successively prints all the characters of the string (except for the terminating <code>'\\0'</code>) -- which happens to be the single character <code>'a'</code>.</p>\n<p>String literals can be arbitrarily long, such as <code>\"abcdefg\"</code>. Character literals almost always contain just a single character. (You can have <em>multicharacter literals</em>, such as <code>'ab'</code>, but their values are implementation-defined and they're very rarely useful.)</p>\n<p>(In C, which you didn't ask about, <code>'a'</code> is of type <code>int</code>, and <code>\"a\"</code> is of type <code>char[2]</code> (no <code>const</code>)).</p>\n<p>So, in your case type code like this : <code>'&lt;&lt; i1 &lt;&lt;'</code> is a character literal. <code>char</code></p>\n", "OwnerUserId": "7666772", "PostTypeId": "2", "Id": "45093275", "Score": "0", "CreationDate": "2017-07-14T01:37:47.603", "LastActivityDate": "2017-07-14T01:37:47.603"}, "45093191": {"ParentId": "45093121", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>Single quotes are meant to <em>surround</em> <strong>one</strong> character literal. Like:</p>\n<pre><code>'A' 'C' 'x' ' ' '5' etc.\n</code></pre>\n<p>Single quotes <code>'</code> are not meant to surround a string literal (which consists of multiple character literals) so it is wrong to do:</p>\n<pre><code>`Hello World`\n</code></pre>\n<p>Or in your case:</p>\n<pre><code>'&lt;&lt; i1 &lt;&lt;'\n</code></pre>\n<p>So the rule of thumb is: when having a char literal surround it with single quotes <code>'a'</code>, when dealing with string literal surround it with double quotes: <code>\"Some string 123\"</code>.\nIf you are simply trying to print out the <code>i2</code> variable then use:</p>\n<pre><code>std::cout &lt;&lt; c1 &lt;&lt; i1 &lt;&lt; c2 &lt;&lt; '\\n';\n</code></pre>\n<p><strong>Update:</strong>\nThere are exceptions to the rule. Some implementations support wrapping a multicharacter literal in single quotes.</p>\n<blockquote>\n<p id=\"so_45093121_45093191_0\">A multicharacter literal has type int and implementation-de\ufb01ned value.</p>\n</blockquote>\n<p>6.4.4.4/10 in C11 specification has more info on the subject.</p>\n", "OwnerUserId": "8202288", "LastEditorUserId": "8202288", "LastEditDate": "2017-07-14T01:48:06.623", "Id": "45093191", "Score": "1", "CreationDate": "2017-07-14T01:27:32.270", "LastActivityDate": "2017-07-14T01:48:06.623"}, "45093265": {"ParentId": "45093121", "CommentCount": "0", "Body": "<p>It looke like there's either a printing problem in the book or you copied it wrong. It probably should be:</p>\n<pre><code>std::cout &lt;&lt; c1 &lt;&lt; ' ' &lt;&lt; i1 &lt;&lt; ' ' &lt;&lt; c2 &lt;&lt;'\\n';\n</code></pre>\n<p><code>' '</code> is a single space character, so this will put spaces around the number in <code>i1</code>. It prints:</p>\n<pre><code>x 120 x\n</code></pre>\n<p><a href=\"http://ideone.com/nPcST8\" rel=\"nofollow noreferrer\">DEMO</a></p>\n", "OwnerUserId": "1491895", "PostTypeId": "2", "Id": "45093265", "Score": "1", "CreationDate": "2017-07-14T01:36:47.463", "LastActivityDate": "2017-07-14T01:36:47.463"}, "bq_ids": {"n4140": {"so_45093121_45093191_0": {"section_id": 5343, "quality": 0.8333333333333334, "length": 5}}, "n3337": {"so_45093121_45093191_0": {"section_id": 5140, "quality": 0.8333333333333334, "length": 5}}, "n4659": {"so_45093121_45093191_0": {"section_id": 6765, "quality": 0.8333333333333334, "length": 5}}}});