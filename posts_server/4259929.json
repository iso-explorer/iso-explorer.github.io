post_cb({"4259929": {"CommentCount": "3", "ViewCount": "317", "PostTypeId": "1", "LastEditorUserId": "207177", "CreationDate": "2010-11-23T19:24:36.120", "LastActivityDate": "2010-12-02T12:40:57.230", "Title": "Downcasting in templates", "FavoriteCount": "0", "LastEditDate": "2010-11-23T19:35:46.100", "Id": "4259929", "Score": "2", "Body": "<p>Why when having:  </p>\n<pre><code>template&lt;double&amp;&amp; value&gt;\nstruct X\n{\n};\n</code></pre>\n<p>this doesn't work:</p>\n<pre><code>X&lt;1&gt; not_ok;\n</code></pre>\n<p>but this works:  </p>\n<pre><code>X&lt;1.0&gt; ok;  \n</code></pre>\n<p>Shouldn't there be orthogonality in behaviour? If I can pass an int into fnc taking double as an arg why cannot I do it with &lt;&gt; (template)? Is there any way to bypass this (I need this to make one template (instead of two with different names) which will allow me to either take double&amp;&amp; or int&amp;&amp;)? I tried to pass class which conversion ctor from int to this class but this crashes VS compiler. I don't know what to do. I'm stuck.\nI also tried specialization:  </p>\n<pre><code>template&lt;class T&gt;\nstruct X;\n\ntemplate&lt;&gt;\nstruct X&lt;double&amp;&amp;&gt;\n{\n};\n\ntemplate&lt;&gt;\nstruct X&lt;int&amp;&amp;&gt;\n{\n};\n</code></pre>\n<p>but surprise surprise doesn't work. Why? I have a primary template and then I want to specialize it on certain types, why doesn't it work?</p>\n", "Tags": "<c++><templates>", "OwnerUserId": "207177", "AnswerCount": "2"}, "4335067": {"ParentId": "4259929", "CommentCount": "0", "Body": "<p>According to <a href=\"http://open-std.org/JTC1/SC22/WG21/docs/papers/2010/n3126.pdf\" rel=\"nofollow\">N3126 (the final draft)</a> (14.1/4):</p>\n<blockquote>\n<p id=\"so_4259929_4335067_0\">A non-type template-parameter shall\n  have one of the following (optionally\n  cv-quali\ufb01ed) types:</p>\n<ul>\n<li>integral or enumeration type,</li>\n<li>pointer to object or pointer to function,</li>\n<li><strong>lvalue</strong> reference to object or <strong>lvalue</strong> reference to function, <em>(emphasis mine)</em></li>\n<li>pointer to member.</li>\n</ul>\n</blockquote>\n<p>So, as you can see, rvalue refernces are not permitted at all as template parameters. If you want to overcome the limitation that template parameters can't be <code>double</code>s, why don't you express your load factor as a rational:</p>\n<p><code>my_vector&lt;7, 12&gt;</code> ... load factor at least 7/12.</p>\n<p>BTW you could just as well store the load factor as a constant (or as member) which would probably give you less code bloat and not much worse performance.</p>\n<p>The second problem you posted (specialization for <code>double&amp;&amp;</code>) is a totally different thing, is supported and works for me (with g++-4.5):</p>\n<pre><code>template&lt;class T&gt;\nstruct X;\n\ntemplate&lt;&gt;\nstruct X&lt;double&amp;&amp;&gt;\n{\n};\n\ntemplate&lt;&gt;\nstruct X&lt;int&amp;&amp;&gt;\n{\nX();\n};\nX&lt;int&amp;&amp;&gt; a;\n/usr/bin/ld: /usr/lib/debug/usr/lib/crt1.o(.debug_info): relocation 0 has invalid symbol index 12\n...\n/usr/lib/gcc/i486-linux-gnu/4.5.1/../../../../lib/crt1.o: In function `_start':\n(.text+0x18): undefined reference to `main'\n/home/jirka/tmp/ccqJkazZ.o: In function `__static_initialization_and_destruction_0(int, int)':\n:(.text+0x1d): undefined reference to `X&lt;int&amp;&amp;&gt;::X()'\n</code></pre>\n", "OwnerUserId": "51831", "PostTypeId": "2", "Id": "4335067", "Score": "2", "CreationDate": "2010-12-02T12:40:57.230", "LastActivityDate": "2010-12-02T12:40:57.230"}, "4261641": {"ParentId": "4259929", "CommentCount": "1", "Body": "<p>I am not sure if you can pass float/double as a template param, its supposed to be a integer only.\nAlso, floating point numbers are not stored as is, so 1.0 is not actually 1.0 but could be 0.999999999999. Thus you should not use floating point numbers while performing comparison.</p>\n", "OwnerUserId": "512754", "PostTypeId": "2", "Id": "4261641", "Score": "1", "CreationDate": "2010-11-23T22:29:13.333", "LastActivityDate": "2010-11-23T22:29:13.333"}, "bq_ids": {"n4140": {"so_4259929_4335067_0": {"section_id": 57, "quality": 0.875, "length": 7}}, "n3337": {"so_4259929_4335067_0": {"section_id": 52, "quality": 0.875, "length": 7}}, "n4659": {"so_4259929_4335067_0": {"section_id": 59, "quality": 0.875, "length": 7}}}});