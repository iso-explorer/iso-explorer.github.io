post_cb({"8237909": {"ViewCount": "1845", "Body": "<pre><code>int main ()\n{\n    try\n    {\n        try\n        {\n            throw 5;\n        }\n        catch (int n)\n        {\n            throw;\n        }\n    }\n    catch (...)\n    {\n        cout &lt;&lt; \"Exception occurred\";\n    }\n}\n</code></pre>\n<p>This prints out \"Exception occured\" but</p>\n<pre><code>int main ()\n{\n    try\n    {\n        try\n        {\n            throw;\n        }\n        catch (...)\n        {\n            throw;\n        }\n    }\n    catch (...)\n    {\n        cout &lt;&lt; \"Exception occurred\";\n    }\n}\n</code></pre>\n<p>This just errors. It seems like I'm doing the try-catch's exactly the same! The only difference is that in the first case I'm throwing an int, then a general exception, but in the second case, I'm throwing a general exception both times. Is the program confused as to which catch to go to?</p>\n", "AcceptedAnswerId": "8237975", "Title": "Nested try-catch blocks?", "CreationDate": "2011-11-23T05:59:04.423", "Id": "8237909", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2011-11-23T06:17:22.333", "Score": "2", "OwnerUserId": "861183", "Tags": "<c++><exception><try-catch>", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_8237909_8237989_1": {"length": 9, "quality": 0.9, "section_id": 3382}, "so_8237909_8237989_0": {"length": 11, "quality": 1.0, "section_id": 3382}}, "n3337": {"so_8237909_8237989_0": {"length": 11, "quality": 1.0, "section_id": 3251}, "so_8237909_8237989_1": {"length": 9, "quality": 0.9, "section_id": 3251}}, "n4659": {"so_8237909_8237989_0": {"length": 11, "quality": 1.0, "section_id": 4142}, "so_8237909_8237989_1": {"length": 9, "quality": 0.9, "section_id": 4142}}}, "8237975": {"Id": "8237975", "PostTypeId": "2", "Body": "<p>There's no such thing as \"general exception\" and you throw no such thing.</p>\n<p>In the first example, you throw an <code>int</code>, then you <strong>re-throw the exception that you are handling</strong>. That's the meaning of <code>throw</code> without an argument.</p>\n<p>In the second example you start with an attempt to re-throw an exception that you are handling. As you are not handling an exception at that time, you get an error.</p>\n", "LastActivityDate": "2011-11-23T06:07:14.713", "CommentCount": "1", "CreationDate": "2011-11-23T06:07:14.713", "ParentId": "8237909", "Score": "9", "OwnerUserId": "775806"}, "8237989": {"Id": "8237989", "PostTypeId": "2", "Body": "<p>Your 2nd example terminates the program with a good error message (at least using g++ 4.6.1):</p>\n<pre><code>terminate called without an active exception\nAborted\n</code></pre>\n<p>This happens because you are trying to re-throw an exception, but since there are no active exception, the program terminates.</p>\n<p>The current c++11 draft, in chapter 15.5.1 says this:  </p>\n<blockquote>\n<p id=\"so_8237909_8237989_0\">In some situations exception handling must be abandoned for less\n  subtle error handling techniques.</p>\n</blockquote>\n<p>Then in the list of cases when <code>std::terminate</code> is called is this:  </p>\n<blockquote>\n<p id=\"so_8237909_8237989_1\">when a throw-expression with no operand attempts to rethrow an\n  exception and no exception is being handled (15.1),</p>\n</blockquote>\n<p>So, the behavior from your 2nd example is well defined in the standard.</p>\n", "LastEditorUserId": "476681", "LastActivityDate": "2011-11-23T06:17:22.333", "Score": "3", "CreationDate": "2011-11-23T06:08:56.530", "ParentId": "8237909", "CommentCount": "1", "OwnerUserId": "476681", "LastEditDate": "2011-11-23T06:17:22.333"}});