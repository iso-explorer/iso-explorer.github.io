post_cb({"bq_ids": {"n4140": {"so_8353414_8353482_0": {"length": 21, "quality": 0.9130434782608695, "section_id": 7151}, "so_8353414_8353464_0": {"length": 10, "quality": 0.5263157894736842, "section_id": 7152}}, "n3337": {"so_8353414_8353482_0": {"length": 21, "quality": 0.9130434782608695, "section_id": 6895}, "so_8353414_8353464_0": {"length": 10, "quality": 0.5263157894736842, "section_id": 6896}}, "n4659": {"so_8353414_8353482_0": {"length": 13, "quality": 0.5652173913043478, "section_id": 8655}}}, "8353414": {"ViewCount": "1082", "Body": "<p>Global variables are initialized in order of appearing in the translation module and the relative order of initialization of variables in different translation modules in unspecified (so-called \"static initialization order fiasco\").</p>\n<p>Do namespaces have any influence on that? For example if I have this code:</p>\n<pre><code>//first.cpp\nint first;\nint second;\n</code></pre>\n<p>will it have any difference in initialization order compared to this code:</p>\n<pre><code>//second.cpp\nnamespace {\nint first;\n}\nint second;\n</code></pre>\n<p>Are there cases where putting a global object into a namespace affects initialization order?</p>\n", "AcceptedAnswerId": "8353482", "Title": "Do namespaces affect initialization order in C++?", "CreationDate": "2011-12-02T08:07:35.847", "Id": "8353414", "CommentCount": "1", "PostTypeId": "1", "LastActivityDate": "2013-09-26T05:37:01.650", "Score": "12", "OwnerUserId": "57428", "Tags": "<c++><static><namespaces><initialization>", "AnswerCount": "2"}, "8353482": {"Id": "8353482", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_8353414_8353482_0\">3.6 Other non-local variables with static storage duration have ordered initialization. Variables\n  with ordered initialization de\ufb01ned within a single translation unit shall be initialized in the order of their\n  de\ufb01nitions in the translation unit. </p>\n</blockquote>\n<p>Namespaces have no effect on this - not mentioned in the section.</p>\n<p>What does effect the order is different translation units. If you need to define the order across them, use an extension such as GCC's <code>constructor</code> attribute.</p>\n", "LastEditorUserId": "964135", "LastActivityDate": "2011-12-02T08:23:44.003", "Score": "11", "CreationDate": "2011-12-02T08:13:51.123", "ParentId": "8353414", "CommentCount": "2", "LastEditDate": "2011-12-02T08:23:44.003", "OwnerUserId": "964135"}, "8353464": {"Id": "8353464", "PostTypeId": "2", "Body": "<p>Well, the \"Global variables are initialized in order of appearing in the translation module\" is definite. It does not leave any room for anything else, like namespaces, to affect the order.</p>\n<p>Actually, \"Global variables are initialized in order ...\" is imprecise quotation of the standard as is formally wrong. The exact wording from C++ Standard, ISO/IEC 14882:2003, 3.6.2 paragraph 1 is:</p>\n<blockquote>\n<p id=\"so_8353414_8353464_0\">Objects with static storage duration defined in namespace scope in the same translation\n  unit and dynamically initialized shall be initialized in the order in which their definition appears in the translation unit.</p>\n</blockquote>\n<p>So rather than \"global\" it says \"with static storage\", that is all non-local variables whether they are global, namespace members or class members and whether they are declared <code>static</code> or not.</p>\n<p>Also it adds \"and dynamically initialized\". Variables with trivial constructors and constant initializer are always initialized first (by simply loading their values from the binary) and than all non-constant initializers are evaluated and non-trivial constructors are run in that order. This is important, so you can for example reliably create a linked list in those constructors; if it's head is plain pointer, it is already initialized, so you can safely work with it.</p>\n", "LastEditorUserId": "201725", "LastActivityDate": "2013-09-26T05:37:01.650", "Score": "5", "CreationDate": "2011-12-02T08:12:13.760", "ParentId": "8353414", "CommentCount": "5", "LastEditDate": "2013-09-26T05:37:01.650", "OwnerUserId": "201725"}});