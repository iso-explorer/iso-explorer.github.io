post_cb({"14735707": {"Id": "14735707", "PostTypeId": "2", "Body": "<p>The rule which applies here is common sense.  The standard is\npoorly worded, and does in fact guarantee this.  But there's no\npractical way to implement it. </p>\n", "LastActivityDate": "2013-02-06T17:58:09.900", "CommentCount": "3", "CreationDate": "2013-02-06T17:58:09.900", "ParentId": "14735630", "Score": "3", "OwnerUserId": "649665"}, "14735632": {"Id": "14735632", "PostTypeId": "2", "Body": "<p>You're almost right. This behaviour actually comes from the function call specifically, not because of any sort of \"only works once\" rule.</p>\n<p>Here's the wording for the whole lifetime extension \"feature\", with the pertinent rule emphasised in bold:</p>\n<blockquote>\n<p id=\"so_14735630_14735632_0\"><code>[C++11: 12.2/5]:</code> <em>[..]</em> The temporary to which the reference is bound or the temporary that is the complete object of a subobject to which the reference is bound persists for the lifetime of the reference <strong>except</strong>:</p>\n<ul>\n<li><em>[..]</em></li>\n<li><strong>A temporary bound to a reference parameter in a function call (5.2.2) persists until the completion of the full-expression containing the call.</strong></li>\n<li><em>[..]</em></li>\n</ul>\n</blockquote>\n", "LastActivityDate": "2013-02-06T17:53:56.087", "CommentCount": "7", "CreationDate": "2013-02-06T17:53:56.087", "ParentId": "14735630", "Score": "8", "OwnerUserId": "560648"}, "14735630": {"ViewCount": "511", "Body": "<p>I was shown the following example in chat:</p>\n<pre><code>#include &lt;iostream&gt;\nstruct foo { ~foo() { std::cout &lt;&lt; \"destroying!\\n\"; } };\nconst foo&amp; func(const foo&amp; a, const foo&amp;) { return a; }\n\nint main()\n{\n  foo x;\n  const foo&amp; y = func(foo(), x);\n  std::cout &lt;&lt; \"main\\n\";\n}\n</code></pre>\n<p><a href=\"http://ideone.com/TebAdJ\" rel=\"noreferrer\">Output</a>:</p>\n<pre><code>destroying!\nmain\ndestroying!\n</code></pre>\n<p>It appears to demonstrate that the lifetime of the <code>foo</code> temporary is not extended to entirety of <code>main</code>, even though it gets bound to a ref-to-<code>const</code> in that scope.</p>\n<p>Presumably, then, the lifetime extension only \"works once\"; that is, it is applied when <code>func</code>'s arguments are initialised, but isn't passed on through consecutive bindings.</p>\n<p>Is my interpretation correct? If so (and if any individual paragraph is directly applicable) what's the standard wording that defines this behaviour?</p>\n", "AcceptedAnswerId": "14738884", "Title": "Which standard wording tells us that ref-to-const temporary lifetime extension only \"works once\"?", "CreationDate": "2013-02-06T17:53:56.087", "Id": "14735630", "CommentCount": "2", "FavoriteCount": "5", "PostTypeId": "1", "LastActivityDate": "2015-11-29T18:09:28.193", "Score": "17", "OwnerUserId": "560648", "Tags": "<c++>", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_14735630_14735632_0": {"length": 13, "quality": 0.8125, "section_id": 382}, "so_14735630_14738884_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 382}}, "n3337": {"so_14735630_14735632_0": {"length": 13, "quality": 0.8125, "section_id": 373}, "so_14735630_14738884_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 373}}, "n4659": {"so_14735630_14735632_0": {"length": 13, "quality": 0.8125, "section_id": 397}, "so_14735630_14738884_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 397}}}, "33986170": {"Id": "33986170", "PostTypeId": "2", "Body": "<p>Probably I am a bit slow but to me it did not become clear what the resolution of this question is from reading the other answers. Thus I modified the code shown and wanted to summarize for others: the answer is, you get <strong>undefined behavior</strong> if you access <code>y</code>!</p>\n<p>Run this code:</p>\n<pre><code>struct foo {\n    int id;\n    foo(int id) : id(id) { std::cout &lt;&lt; \"ctor \" &lt;&lt; id &lt;&lt; std::endl; };\n    ~foo() { std::cout &lt;&lt; \"dtor \" &lt;&lt; id &lt;&lt; std::endl; }\n};\nconst foo&amp; func(const foo&amp; a, const foo&amp;) { return a; }\n\nint main(int argc, char** argv) {\n    foo x(1);\n    const foo&amp; y = func(foo(2), x);\n    std::cout &lt;&lt; \"main \" &lt;&lt; y.id &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>\n<p>The output for me is:</p>\n<pre><code>ctor 1\nctor 2\ndtor 2\nmain 2\ndtor 1\n</code></pre>\n<p>But the line <code>main 2</code> is <strong>undefined behavior</strong>.</p>\n", "LastActivityDate": "2015-11-29T18:09:28.193", "CommentCount": "0", "CreationDate": "2015-11-29T18:09:28.193", "ParentId": "14735630", "Score": "1", "OwnerUserId": "1977182"}, "14738884": {"Id": "14738884", "PostTypeId": "2", "Body": "<p>This is subject of two issue reports, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_active.html#1299\">http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_active.html#1299</a> and <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_active.html#1568\">http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_active.html#1568</a> . </p>\n<p>The former issue report, of which I am the reporter, was intended to cover all these cases where a reference is bound to a temporary object, but is not intended to be lifetime-extending. The description in the body of the issue only mentions prvalues being confused with temporary expressions (that actually decide whether lifetime of what they evaluate to is lengthened or not). But lvalue and xvalues are likewise confused with these in the Standard. An example where that happens in the context of <code>static_cast</code> is issue number #1568 (in which the use of \"temporary variable\" further confuses the matter). </p>\n<p>Actually, this: </p>\n<blockquote>\n<p id=\"so_14735630_14738884_0\">A temporary bound to a reference parameter in a function call (5.2.2) persists until the completion of the full-expression containing the call.</p>\n</blockquote>\n<p>Contradicts the other rules in the same paragraph. Because the temporary is bound to <em>both</em> a reference parameter in a function call and to a local automatic reference variable. </p>\n", "LastEditorUserId": "34509", "LastActivityDate": "2013-02-06T21:26:40.910", "Score": "7", "CreationDate": "2013-02-06T21:12:13.450", "ParentId": "14735630", "CommentCount": "1", "OwnerUserId": "34509", "LastEditDate": "2013-02-06T21:26:40.910"}});