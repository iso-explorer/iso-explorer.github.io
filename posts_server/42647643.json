post_cb({"42647643": {"CommentCount": "6", "ViewCount": "61", "PostTypeId": "1", "ClosedDate": "2017-03-07T12:03:15.670", "LastEditorUserId": "-1", "CreationDate": "2017-03-07T11:53:22.247", "LastActivityDate": "2017-03-07T22:10:09.187", "Title": "Is a move constructor generated when a class has a user-provided copy constructor?", "LastEditDate": "2017-05-23T11:46:18.097", "Id": "42647643", "Score": "0", "Body": "<p>C++ standard says (12.8/9):</p>\n<blockquote>\n<p id=\"so_42647643_42647643_0\">If the definition of a class <code>X</code> does not explicitly declare a move constructor, one will be implicitly declared as defaulted if and only if</p>\n<ul>\n<li><code>X</code> does not have a user-declared copy constructor,</li>\n<li><code>X</code> does not have a user-declared copy assignment operator,</li>\n<li><code>X</code> does not have a user-declared move assignment operator, and</li>\n<li><code>X</code> does not have a user-declared destructor.</li>\n</ul>\n</blockquote>\n<p>But the following code (compiled with <a href=\"http://coliru.stacked-crooked.com/a/05a50b2176a79daf\" rel=\"nofollow noreferrer\"><em>clang++ 3.8.0</em> and <em>g++ 6.3.0</em></a>) gives an empty output:</p>\n<pre><code>#include &lt;iostream&gt;\n\n\nstruct Foo\n{\n\n    Foo() = default;\n\n    Foo(const Foo&amp;)\n    {\n        std::cout &lt;&lt; \"Copy constructor\" &lt;&lt; std::endl;\n    }\n\n};\n\n\nint main()\n{\n    Foo foo{Foo{}};\n\n    (void)foo;\n}\n</code></pre>\n<p>Is it a problem in <em>clang++</em> and <em>g++</em>?</p>\n<p><strong>Upd.</strong> As <a href=\"https://stackoverflow.com/users/3953764/piotr-skotnicki\"><strong>@Piotr Skotnicki</strong></a> noted in comments a <a href=\"http://en.cppreference.com/w/cpp/language/copy_elision\" rel=\"nofollow noreferrer\">copy elision</a> takes place here. The command-line key <code>-fno-elide-constructors</code> <a href=\"http://coliru.stacked-crooked.com/a/e71fc03f55d67b42\" rel=\"nofollow noreferrer\">disables it for constructors in <em>clang++</em> and <em>g++</em></a>.</p>\n", "Tags": "<c++><c++11><c++14><move-semantics><move-constructor>", "OwnerUserId": "3043539", "AnswerCount": "0"}, "bq_ids": {"n4140": {"so_42647643_42647643_0": {"section_id": 458, "quality": 1.0, "length": 12}}, "n3337": {"so_42647643_42647643_0": {"section_id": 449, "quality": 1.0, "length": 12}}, "n4659": {"so_42647643_42647643_0": {"section_id": 481, "quality": 1.0, "length": 12}}}});