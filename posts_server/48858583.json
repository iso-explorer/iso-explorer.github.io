post_cb({"bq_ids": {"n4140": {"so_48858583_48858639_0": {"length": 7, "quality": 0.875, "section_id": 558}}, "n3337": {"so_48858583_48858639_0": {"length": 7, "quality": 0.875, "section_id": 549}}, "n4659": {"so_48858583_48858639_0": {"length": 8, "quality": 1.0, "section_id": 4114}}}, "48858639": {"Id": "48858639", "PostTypeId": "2", "Body": "<p>Exception handler declarations work like function declarations, in that array and function type parameters are adjusted to pointers. (That is, arrays and functions cannot be thrown or caught \"by value\".) Specifically, [except.handle]p2 says:</p>\n<blockquote>\n<p id=\"so_48858583_48858639_0\">A handler of type \u201carray of <code>T</code>\u201d or function type <code>T</code> is adjusted to be of type \u201cpointer to <code>T</code>\u201d.</p>\n</blockquote>\n<p>So <code>catch (exception())</code> is identical to <code>catch (exception(*p)())</code>.</p>\n", "LastActivityDate": "2018-02-19T02:01:43.893", "Score": "12", "CreationDate": "2018-02-19T02:01:43.893", "ParentId": "48858583", "CommentCount": "5", "OwnerUserId": "596781"}, "48858659": {"Id": "48858659", "PostTypeId": "2", "Body": "<p><code>exception()</code> is declaring a function. Per <a href=\"https://timsong-cpp.github.io/cppwp/except#nt:handler\" rel=\"nofollow noreferrer\">except#nt:handler</a>, an <em>exception-declaration</em> contains a <em>declarator</em>. A <a href=\"https://timsong-cpp.github.io/cppwp/dcl.fct#:declarator,function\" rel=\"nofollow noreferrer\">function declaration</a> is a type of declarator. It's easy to see this because <code>exception(int)</code> also works just fine. Note that an <em>exception-declaration</em> happens to be exactly the same as a <em>parameter-declaration</em>, so it works exactly the same as declaring a function in a parameter.</p>\n", "LastActivityDate": "2018-02-19T02:04:19.853", "Score": "1", "CreationDate": "2018-02-19T02:04:19.853", "ParentId": "48858583", "CommentCount": "0", "OwnerUserId": "9188290"}, "48858583": {"ViewCount": "526", "Body": "<p>I have come across some C++ code that looks like the following:</p>\n<pre><code>class exception {};\n\nint main()\n{\n    try {\n        throw exception();\n    } catch (exception()) {\n        // ...\n    }\n}\n</code></pre>\n<p>Note the extra set of parentheses in <code>catch (exception())</code>. According to <a href=\"https://godbolt.org/g/Sorac5\" rel=\"noreferrer\">Compiler Explorer</a>, this is compiled to the same object code as if it were written with <code>catch (exception &amp;)</code>.</p>\n<p>On what basis is the extra set of parentheses permitted, and what part of the standard allows this? As far as I was aware, a <code>catch</code> clause requires a type specifier, but <code>exception()</code> doesn't seem like a type specifier.</p>\n", "AcceptedAnswerId": "48858639", "Title": "Why does a catch exception-declaration allow trailing parentheses?", "CreationDate": "2018-02-19T01:49:52.190", "Id": "48858583", "CommentCount": "4", "FavoriteCount": "4", "PostTypeId": "1", "LastActivityDate": "2018-02-19T02:04:19.853", "Score": "11", "OwnerUserId": "893", "Tags": "<c++><exception-handling><try-catch>", "AnswerCount": "2"}});