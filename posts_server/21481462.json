post_cb({"21481769": {"ParentId": "21481462", "CommentCount": "0", "CreationDate": "2014-01-31T13:53:14.797", "OwnerUserId": "3151642", "PostTypeId": "2", "Id": "21481769", "Score": "0", "Body": "<p>Actually, that functionality is a carryover  from the initialization of empty <code>char</code> arrays.(<code>std::string</code> acts very similar to <code>char</code>.)</p>\n<p><code>char buf[10] = \"\";</code> is equivalent to <code>char buf[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};</code>, but <code>char buf[10] = \"a\";</code> is equivalent to <code>char buf[10] = {'a', 0, 0, 0, 0, 0, 0, 0, 0, 0};</code>.  Why?  Since <code>char</code> is an arithmetic value, it is auto-initialized to zero.</p>\n<p>Your compiler sees <code>\"\"</code> as a <code>char</code> value (<code>const char*</code>, technically) and simply casts it to an <code>std::string</code>.  While this is not exactly up to standard, it works on most compilers.</p>\n", "LastActivityDate": "2014-01-31T13:53:14.797"}, "21481462": {"CommentCount": "4", "ViewCount": "262", "PostTypeId": "1", "LastEditorUserId": "492336", "CreationDate": "2014-01-31T13:38:16.960", "LastActivityDate": "2014-01-31T14:54:53.977", "Title": "What does string array[] = \"\"; mean and why does it work?", "AcceptedAnswerId": "21481722", "LastEditDate": "2014-01-31T14:54:53.977", "Id": "21481462", "Score": "4", "Body": "<pre><code>string array[] = \"\";\n</code></pre>\n<p>How am I able to assign a <code>const char*</code> to an array? Is that the same as:</p>\n<pre><code>string array[] = {\"\"};\n</code></pre>\n<p>?? That would make sense to me. However, this still doesn't work</p>\n<pre><code>int array[] = 5;\n</code></pre>\n<p>So what is the difference between them that it doesn't work for <code>int</code> arrays?</p>\n", "Tags": "<c++><arrays>", "OwnerUserId": "1935708", "AnswerCount": "2"}, "21481722": {"ParentId": "21481462", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2014-01-31T13:51:25.423", "Score": "5", "LastEditorUserId": "567292", "LastEditDate": "2014-01-31T14:53:18.400", "Id": "21481722", "OwnerUserId": "567292", "Body": "<p>This is incorrect code; it is a bug in your compiler (possibly gcc/g++?) to accept it.</p>\n<p>clang gives the following error (<a href=\"http://gcc.godbolt.org/#%7B%22version%22:3,%22filterAsm%22%3a%7B%22labels%22%3atrue,%22directives%22%3atrue,%22commentOnly%22%3atrue%7D,%22compilers%22%3a%5B%7B%22source%22%3a%22#include%20%3Cstring%3E%5Cnstd%3a%3astring%20a%5B%5D%20=%20%5C%22%5C%22;%5Cn%22,%22compiler%22%3a%22/usr/bin/clang++%22,%22options%22%3a%22-O2%22%7D%5D%7D\" rel=\"nofollow\">link</a>):</p>\n<pre><code>a.cpp:5:17: error: array initializer must be an initializer list\n    std::string array[] = \"\";\n                ^\n1 error generated.\n</code></pre>\n<p>Visual C++ agrees (<a href=\"http://rise4fun.com/Vcpp/QXEl\" rel=\"nofollow\">link</a>):</p>\n<pre><code>testvc.cpp(2) : error C3074: an array can only be initialized with an initializer-list\n</code></pre>\n<p>The relevant clause in the standard is 8.5p17:</p>\n<blockquote>\n<p id=\"so_21481462_21481722_0\">[...] <br/>\n  \u2014 If the destination type is an array of characters, an array of char16_t, an array of char32_t, or an array of wchar_t, and the initializer is a string literal, see 8.5.2. <br/>\n  [...]<br/>\n  \u2014 Otherwise, if the destination type is an array, the program is ill-formed. <br/>\n  [...]</p>\n</blockquote>\n<p>Submitted to gcc as a bug: <a href=\"http://gcc.gnu.org/bugzilla/show_bug.cgi?id=60009\" rel=\"nofollow\">http://gcc.gnu.org/bugzilla/show_bug.cgi?id=60009</a></p>\n", "LastActivityDate": "2014-01-31T14:53:18.400"}, "bq_ids": {"n4140": {"so_21481462_21481722_0": {"section_id": 3296, "quality": 0.95, "length": 19}}, "n3337": {"so_21481462_21481722_0": {"section_id": 3166, "quality": 0.95, "length": 19}}, "n4659": {"so_21481462_21481722_0": {"section_id": 4058, "quality": 0.95, "length": 19}}}});