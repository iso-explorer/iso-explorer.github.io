post_cb({"bq_ids": {"n4140": {"so_26314203_26314321_0": {"length": 11, "quality": 1.0, "section_id": 2239}}, "n3337": {"so_26314203_26314321_0": {"length": 11, "quality": 1.0, "section_id": 2227}}, "n4659": {"so_26314203_26314321_0": {"length": 10, "quality": 0.9090909090909091, "section_id": 2512}}}, "26314882": {"Id": "26314882", "PostTypeId": "2", "Body": "<p>According to <a href=\"http://en.cppreference.com/w/cpp/io/basic_istream/readsome\" rel=\"nofollow\">http://en.cppreference.com/w/cpp/io/basic_istream/readsome</a>\n\"The behavior of this function is highly implementation-specific. For example, when used with std::ifstream, some library implementations fill the underlying filebuf with data as soon as the file is opened (and readsome() on such implementations reads data, potentially, but not necessarily, the entire file), while other implementations only read from file when an actual input operation is requested (and readsome() issued after file opening never extracts any characters). Likewise, a call to std::cin.readsome() may return all pending unprocessed console input, or may always return zero and extract no characters.\"</p>\n<p>So readsome in the linux console case seems to be totally useless. ( if some body knows something different please inform ).</p>\n", "LastActivityDate": "2014-10-11T12:52:11.350", "CommentCount": "0", "CreationDate": "2014-10-11T12:52:11.350", "ParentId": "26314203", "Score": "1", "OwnerUserId": "3127336"}, "26314203": {"ViewCount": "257", "Body": "<p>I have written the above code to test \"readsome\" . When \"read\" is used the code works but needs to wait for an input of 0x10 characters to work.\nWith \"readsome\" nothing is read on my system ( ubuntu Linux 3.13.0-37 ).\nWhy ?</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;unistd.h&gt;\nint main(int argc, char **argv)\n{   std::setlocale(LC_CTYPE, \"\");std::locale::global(std::locale(\"\"));\n    char s[0x11];int i=150;\n    do{\n        s[0]=0;\n        std::cin.readsome(s,0x1);\n        if(std::cin.gcount()&gt;0)\n            s[std::cin.gcount()]=0;\n            if(std::cin.eof()) std::cout&lt;&lt;\"EOF!\"&lt;&lt;std::endl;\n            std::cout&lt;&lt;s;\n        usleep(100000);\n    }while(i--);\n    std::cin.read(s,0x10);\n    std::cout&lt;&lt;s&lt;&lt;std::endl;\n    return 0;\n}\n</code></pre>\n", "Title": "istream::readsome doesn't read from console?", "CreationDate": "2014-10-11T11:37:24.970", "LastActivityDate": "2014-10-11T13:05:01.790", "CommentCount": "3", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2014-10-11T13:05:01.790", "LastEditorUserId": "3127336", "Id": "26314203", "Score": "0", "OwnerUserId": "3127336", "Tags": "<c++><ifstream>", "AnswerCount": "2"}, "26314321": {"Id": "26314321", "PostTypeId": "2", "Body": "<p><code>readsome</code> only extracts characters <em>already in the buffer</em>. It won't wait for any input.\nFrom the standard ([istream.unformatted]/32):</p>\n<blockquote>\n<p id=\"so_26314203_26314321_0\">If <code>rdbuf()-&gt;in_avail() == -1</code>, calls <code>setstate(eofbit)</code> [\u2026], and\n  extracts no characters;\n  \u2014 If <code>rdbuf()-&gt;in_avail() == 0</code>, extracts no characters <br>\u2014 If\n  <code>rdbuf()-&gt;in_avail() &gt; 0</code>, extracts <code>min(rdbuf()-&gt;in_avail(),n))</code>.</br></p>\n</blockquote>\n", "LastActivityDate": "2014-10-11T11:50:55.253", "CommentCount": "7", "CreationDate": "2014-10-11T11:50:55.253", "ParentId": "26314203", "Score": "0", "OwnerUserId": "3647361"}});