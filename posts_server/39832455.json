post_cb({"39832455": {"CommentCount": "6", "AcceptedAnswerId": "39832859", "PostTypeId": "1", "LastEditorUserId": "3435400", "CreationDate": "2016-10-03T13:08:44.727", "LastActivityDate": "2016-10-04T07:06:02.160", "LastEditDate": "2016-10-04T07:06:02.160", "ViewCount": "191", "FavoriteCount": "2", "Title": "Inconsistent behavior of MSVC vs. GCC with sizeof", "Id": "39832455", "Score": "7", "Body": "<p>Consider the following code:</p>\n<pre><code>#include &lt;cstddef&gt;\n\nclass A\n{\npublic:\n    struct B\n    {\n        int M;\n    };\n\n    static void StaticFunc();\n};\n\nvoid A::StaticFunc()\n{\n    const std::size_t s0 = sizeof(::A::B::M);\n    const std::size_t s1 = sizeof(A::B::M);\n    const std::size_t s2 = sizeof(B::M);\n}\n\nint main()\n{\n    const std::size_t s3 = sizeof(A::B::M);\n    return 0;\n}\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/fce3eb4239c17398\" rel=\"nofollow noreferrer\">GCC compiles it</a>, just warning about the unused variables.</p>\n<p>Visual C++ 2015 however fails to compile it with:</p>\n<pre><code>error C2326: 'void A::StaticFunc(void)': function cannot access 'A::B::M'\n</code></pre>\n<p>on the lines</p>\n<pre><code>const std::size_t s0 = sizeof(::A::B::M);\nconst std::size_t s1 = sizeof(A::B::M);\n</code></pre>\n<p>in <code>StaticFunc()</code>.</p>\n<p>The other line <code>s2 = ...</code>, and <code>s3 = ...</code> in <code>main()</code> compile fine.</p>\n<p>Is this a bug in MSVC, or do I miss something basic here?</p>\n", "Tags": "<c++><visual-c++><compiler-bug><visual-c++-2015>", "OwnerUserId": "3435400", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_39832455_39832859_0": {"section_id": 5959, "quality": 1.0, "length": 10}, "so_39832455_39832859_2": {"section_id": 5959, "quality": 0.8888888888888888, "length": 8}}, "n3337": {"so_39832455_39832859_0": {"section_id": 5728, "quality": 1.0, "length": 10}, "so_39832455_39832859_2": {"section_id": 5728, "quality": 0.8888888888888888, "length": 8}}, "n4659": {"so_39832455_39832859_0": {"section_id": 7440, "quality": 1.0, "length": 10}, "so_39832455_39832859_2": {"section_id": 7440, "quality": 0.8888888888888888, "length": 8}}}, "39832859": {"ParentId": "39832455", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2016-10-03T13:29:12.780", "Score": "5", "LastEditorUserId": "775806", "LastEditDate": "2016-10-03T13:48:01.577", "Id": "39832859", "OwnerUserId": "775806", "Body": "<p>It is a bug in MSVC.</p>\n<p>C++11/14 allows a non-static class member to be used in a non-evaluated context, see 5.1.1  [expr.prim.general] p. 13:</p>\n<blockquote>\n<p id=\"so_39832455_39832859_0\">An id-expression that denotes a non-static data member or non-static member function of a class can only be used:</p>\n<p id=\"so_39832455_39832859_1\">...</p>\n<p id=\"so_39832455_39832859_2\">(13.3) \u2014 if that id-expression denotes a non-static data member and it appears in an unevaluated operand.</p>\n<p id=\"so_39832455_39832859_3\">[ Example:</p>\n<pre><code>    struct S {\n       int m;\n    };\n    int i = sizeof(S::m);        // OK\n    int j = sizeof(S::m + 42);   // OK\n</code></pre>\n<p id=\"so_39832455_39832859_4\">\u2014 end example]</p>\n</blockquote>\n<p>Edit: it looks like MSVC accepts <code>B::M</code> and doesn't accept <code>A::B::M</code>, which is a completely inexplicable behaviour. I don't see how it could be anything but a bug.</p>\n<p>clang++ like g++ in C++11 and C++14 mode accepts the program. clang++ in C++03 mode rejects all 4 references to <code>M</code> (C++03 doesn't have anything like p. 13.3), whereas g++ in C++03 mode still accepts them (this is probably a g++ C++03 mode bug).</p>\n", "LastActivityDate": "2016-10-03T13:48:01.577"}});