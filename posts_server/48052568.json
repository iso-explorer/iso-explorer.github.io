post_cb({"48052568": {"ViewCount": "219", "Body": "<p>Consider the following code snippet:</p>\n<pre><code>struct foo { };\n\ntemplate &lt;typename F&gt;\nstruct impl : F\n{\n    impl(F&amp;&amp; f) : F{std::move(f)} { }\n    auto get() { return (*this)(); }\n};\n\ntemplate &lt;typename X&gt;\nauto returner(X&amp;&amp; x)\n{\n    return impl{[&amp;x]{ return x; }};\n//               ^~\n}\n\nint main()\n{\n    auto x = returner(foo{}).get();\n}\n</code></pre>\n<p><a href=\"https://wandbox.org/permlink/GSgIsLHXpuv4ztna\" rel=\"nofollow noreferrer\"><strong>live example on wandbox.org</strong></a></p>\n<hr>\n<ul>\n<li><p>Is it guaranteed that <code>foo{}</code> will be alive for the entire duration of the <code>returner(foo{}).get()</code> expression? </p></li>\n<li><p>Or is <code>foo{}</code> going to be alive only for <code>returner(foo{})</code>, thus causing <em>undefined behavior</em> when invoking <code>impl::get()</code>?</p></li>\n</ul>\n<hr>\n<p>The Standard says in <a href=\"http://eel.is/c++draft/class.temporary#:constructor,copy\" rel=\"nofollow noreferrer\">[class.temporary]</a>:</p>\n<blockquote>\n<p id=\"so_48052568_48052568_0\">Temporary objects are destroyed as the last step in evaluating the <em>full-expression</em> that (lexically) contains the point where they were created.</p>\n</blockquote>\n<p>In <a href=\"http://eel.is/c++draft/intro.execution#def:full-expression\" rel=\"nofollow noreferrer\">[intro.execution]</a></p>\n<blockquote>\n<p id=\"so_48052568_48052568_1\">A full-expression is</p>\n<ul>\n<li><p id=\"so_48052568_48052568_2\">an unevaluated operand,</p></li>\n<li><p id=\"so_48052568_48052568_3\">a constant-expression,</p></li>\n<li><p id=\"so_48052568_48052568_4\">an init-declarator or a mem-initializer, including the constituent expressions of the initializer,</p></li>\n<li><p id=\"so_48052568_48052568_5\">an invocation of a destructor generated at the end of the lifetime of an object other than a temporary object ([class.temporary]), or</p></li>\n<li><p id=\"so_48052568_48052568_6\">an expression that is not a subexpression of another expression and\n  that is not otherwise part of a full-expression.</p></li>\n</ul>\n</blockquote>\n<p>I am not sure whether or not the <em>full-expression</em> related to <code>foo{}</code> is <code>returner(foo{})</code> or <code>returner(foo{}).get()</code>.</p>\n</hr></hr>", "AcceptedAnswerId": "48052597", "Title": "Lifetime of a temporary captured by reference in a closure stored in a class", "CreationDate": "2018-01-01T19:24:11.433", "LastActivityDate": "2018-01-01T19:31:54.030", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2018-01-01T19:31:54.030", "LastEditorUserId": "2069064", "Id": "48052568", "Score": "4", "OwnerUserId": "598696", "Tags": "<c++><language-lawyer><c++17><lifetime><temporary-objects>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_48052568_48052568_5": {"length": 9, "quality": 0.8181818181818182, "section_id": 5806}, "so_48052568_48052568_0": {"length": 14, "quality": 1.0, "section_id": 380}, "so_48052568_48052597_0": {"length": 5, "quality": 0.625, "section_id": 5806}, "so_48052568_48052568_6": {"length": 5, "quality": 0.7142857142857143, "section_id": 5806}}, "n3337": {"so_48052568_48052568_5": {"length": 9, "quality": 0.8181818181818182, "section_id": 5579}, "so_48052568_48052568_6": {"length": 5, "quality": 0.7142857142857143, "section_id": 5579}, "so_48052568_48052597_0": {"length": 5, "quality": 0.625, "section_id": 5579}, "so_48052568_48052568_0": {"length": 14, "quality": 1.0, "section_id": 371}}, "n4659": {"so_48052568_48052568_5": {"length": 10, "quality": 0.9090909090909091, "section_id": 7267}, "so_48052568_48052568_6": {"length": 7, "quality": 1.0, "section_id": 7267}, "so_48052568_48052568_4": {"length": 6, "quality": 1.0, "section_id": 7267}, "so_48052568_48052597_0": {"length": 7, "quality": 0.875, "section_id": 7267}, "so_48052568_48052568_0": {"length": 14, "quality": 1.0, "section_id": 395}}}, "48052597": {"Id": "48052597", "PostTypeId": "2", "Body": "<p>The important section here is that:</p>\n<blockquote>\n<p id=\"so_48052568_48052597_0\">A <em>full-expression</em> is [...] an expression that is not a subexpression of another expression and that is not otherwise part of a <em>full-expression</em>.</p>\n</blockquote>\n<p>So in <code>returner(foo{}).get()</code>, <code>returner(foo{})</code> is a subexpression of the expression <code>returner(foo{}).get()</code>, so it's not a full-expression. Hence:</p>\n<blockquote>\n<p id=\"so_48052568_48052597_1\">Is it guaranteed that <code>foo{}</code> will be alive for the entire duration of the <code>returner(foo{}).get()</code> expression?</p>\n</blockquote>\n<p>Yes.</p>\n", "LastActivityDate": "2018-01-01T19:28:38.167", "CommentCount": "2", "CreationDate": "2018-01-01T19:28:38.167", "ParentId": "48052568", "Score": "10", "OwnerUserId": "2069064"}});