post_cb({"24636309": {"Id": "24636309", "PostTypeId": "2", "Body": "<p>The Standard explicitly states that inherited constructors retain their access levels:</p>\n<p><strong>12.9 Inheriting constructors [class.inhctor]</strong></p>\n<blockquote>\n<p id=\"so_24635935_24636309_0\">1 A using-declaration (7.3.3) that names a constructor implicitly\n  declares a set of inheriting constructors. The candidate set of\n  inherited constructors from the class <code>X</code> named in the using-declaration\n  consists of actual constructors and notional constructors that result\n  from the transformation of defaulted parameters as follows: </p>\n</blockquote>\n<p>[list of cases omitted]</p>\n<blockquote>\n<p id=\"so_24635935_24636309_1\">4 <strong>A constructor so declared has the same access as the corresponding\n  constructor in X</strong>. It is deleted if the corresponding constructor in <code>X</code>\n  is deleted (8.4).</p>\n</blockquote>\n<p>You can call it directly of course:</p>\n<pre><code>TestableFoo(int i) : Foo(i) { }\n</code></pre>\n", "LastActivityDate": "2014-07-08T15:51:07.767", "CommentCount": "0", "CreationDate": "2014-07-08T15:51:07.767", "ParentId": "24635935", "Score": "4", "OwnerUserId": "819272"}, "bq_ids": {"n4140": {"so_24635935_24636309_1": {"length": 10, "quality": 1.0, "section_id": 485}, "so_24635935_24636309_0": {"length": 25, "quality": 0.9259259259259259, "section_id": 482}, "so_24635935_24636348_0": {"length": 6, "quality": 1.0, "section_id": 485}}, "n3337": {"so_24635935_24636309_1": {"length": 10, "quality": 1.0, "section_id": 476}, "so_24635935_24636309_0": {"length": 25, "quality": 0.9259259259259259, "section_id": 473}, "so_24635935_24636348_0": {"length": 6, "quality": 1.0, "section_id": 476}}, "n4659": {"so_24635935_24636309_1": {"length": 6, "quality": 0.6, "section_id": 382}}}, "24636348": {"Id": "24636348", "PostTypeId": "2", "Body": "<p>This behaviour is conform with what the standard says (ISO/IEC 14822:2011 12.9, \u00a74) :</p>\n<blockquote>\n<p id=\"so_24635935_24636348_0\">A constructor so declared has the same access as the corresponding constructor in X.</p>\n</blockquote>\n<p>where <code>X</code> is the base class from which the constructors are inherited.</p>\n<p>To get the desired behaviour, you can use :</p>\n<pre><code>class TestableFoo : public Foo {\n  public :\n    TestableFoo(int i) : Foo(i) { }\n    using Foo::run;\n};\n</code></pre>\n", "LastActivityDate": "2014-07-08T15:53:10.800", "CommentCount": "0", "CreationDate": "2014-07-08T15:53:10.800", "ParentId": "24635935", "Score": "1", "OwnerUserId": "822669"}, "24635935": {"ViewCount": "307", "Body": "<p>I am trying to test protected methods and constructors of my class. For this purpose, I tried to subclass it, and re-export its members as public with C++11 <code>using</code> keyword: </p>\n<pre><code>class Foo {\n  protected:\n   Foo(int i) {}\n   void run() {}\n};\n\nclass TestableFoo : public Foo {\n  public:\n   using Foo::Foo;\n   using Foo::run;\n};\n\nint main() {\n  TestableFoo foo(7);\n  foo.run();\n}\n</code></pre>\n<p>However, both g++ and clang++ fail to compile it, producing the following error:</p>\n<pre><code>test.cpp:13:15: error: \u2018TestableFoo::TestableFoo(int)\u2019 is protected\n    using Foo::Foo;\n               ^\ntest.cpp:18:16: error: within this context\n   TestableFoo foo(7);\n                    ^\n</code></pre>\n<p>TestableFoo constructor is still protected, even though <code>run</code> method becomes public (I confirmed it separately). Why is that so? I could understand either decision (inheriting vs. overwriting visibility), but why is there an inconsistency between methods and constructors?</p>\n", "AcceptedAnswerId": "24636309", "Title": "Use of 'using' keyword to make inherited constructor public", "CreationDate": "2014-07-08T15:33:46.323", "LastActivityDate": "2014-07-08T15:53:10.800", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "Tags": "<c++><inheritance><testing><c++11><using>", "Id": "24635935", "Score": "9", "OwnerUserId": "627277", "ClosedDate": "2014-07-08T15:57:11.910", "AnswerCount": "2"}});