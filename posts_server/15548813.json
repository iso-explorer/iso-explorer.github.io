post_cb({"15548978": {"ParentId": "15548813", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_15548813_15548978_0\">I know it is because s.second is initialized by int()</p>\n</blockquote>\n<p>The standard doesn't actually say that <code>second</code> is initialized with <code>int()</code>. It just gives the effect of creating a <code>std::pair</code> with the default constructor as (\u00a720.3.2):</p>\n<blockquote>\n<p id=\"so_15548813_15548978_1\"><em>Effects</em>: Value-initializes first and second.</p>\n</blockquote>\n<p>Value-initialization is defined as (\u00a78.5):</p>\n<blockquote>\n<p id=\"so_15548813_15548978_2\">To <em>value-initialize</em> an object of type <code>T</code> means:</p>\n<ul>\n<li><p id=\"so_15548813_15548978_3\">if <code>T</code> is a (possibly cv-qualified) class type (Clause 9) [...]</p></li>\n<li><p id=\"so_15548813_15548978_4\">if <code>T</code> is a (possibly cv-qualified) non-union class type [...]</p></li>\n<li><p id=\"so_15548813_15548978_5\">if <code>T</code> is an array type, [...]</p></li>\n<li><p id=\"so_15548813_15548978_6\">otherwise, the object is zero-initialized.</p></li>\n</ul>\n</blockquote>\n<p>Whcih results in <code>second</code> being zero-initialized because it is an <code>int</code> (\u00a78.5):</p>\n<blockquote>\n<p id=\"so_15548813_15548978_7\">To <em>zero-initialize</em> an object or reference of type <code>T</code> means:</p>\n<ul>\n<li><p id=\"so_15548813_15548978_8\">if <code>T</code> is a scalar type (3.9), the object is set to the value 0 (zero), taken as an integral constant expression, converted to T;</p></li>\n<li><p id=\"so_15548813_15548978_9\">[...]</p></li>\n</ul>\n</blockquote>\n", "OwnerUserId": "150634", "PostTypeId": "2", "Id": "15548978", "Score": "3", "CreationDate": "2013-03-21T13:30:07.277", "LastActivityDate": "2013-03-21T13:30:07.277"}, "15548855": {"ParentId": "15548813", "PostTypeId": "2", "CommentCount": "7", "Body": "<p>It's</p>\n<h3>8.5 Initializers [dcl.init]</h3>\n<blockquote>\n<p id=\"so_15548813_15548855_0\">10) An object whose initializer is an empty set of parentheses, i.e., (), shall be value-initialized.</p>\n</blockquote>\n<p>and</p>\n<blockquote>\n<p id=\"so_15548813_15548855_1\">7) To value-initialize an object of type T means: <br/>\n  \u2014 if T is a (possibly cv-qualified) class type (Clause 9) with a user-provided constructor (12.1), then the\n  default constructor for T is called (and the initialization is ill-formed if T has no accessible default\n  constructor);<br/>\n  \u2014 if T is a (possibly cv-qualified) non-union class type without a user-provided constructor, then the object\n  is zero-initialized and, if T\u2019s implicitly-declared default constructor is non-trivial, that constructor is\n  called.<br/>\n  \u2014 if T is an array type, then each element is value-initialized;<br/>\n<strong>\u2014 otherwise, the object is zero-initialized.</strong></p>\n</blockquote>\n<p>and I guess</p>\n<blockquote>\n<p id=\"so_15548813_15548855_2\">5) To zero-initialize an object or reference of type T means:<br/>\n  \u2014 if T is a scalar type (3.9), the object is set to the value 0 (zero), taken as an integral constant expression,\n  converted to T; [...]</p>\n</blockquote>\n", "OwnerUserId": "673730", "LastEditorUserId": "673730", "LastEditDate": "2013-03-21T13:27:21.733", "Id": "15548855", "Score": "6", "CreationDate": "2013-03-21T13:24:45.833", "LastActivityDate": "2013-03-21T13:27:21.733"}, "15548813": {"CommentCount": "1", "AcceptedAnswerId": "15548855", "ClosedDate": "2013-03-23T08:35:43.560", "CreationDate": "2013-03-21T13:22:45.033", "LastActivityDate": "2013-03-21T13:32:48.417", "PostTypeId": "1", "ViewCount": "182", "FavoriteCount": "1", "Title": "Where is defined that int() is 0?", "Id": "15548813", "Score": "0", "Body": "<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nint main() {\n    std::pair&lt;std::string, int&gt; s;\n    std::cout &lt;&lt; s.second &lt;&lt; std::endl;\n}\n</code></pre>\n<p>In this example <code>s.second</code> is <code>0</code> though it is not initialized. Can you provide a link to C++ standard where is defined why is it <code>0</code>. I know it is because <code>s.second</code> is initialized by <code>int()</code>, but cant found the line in standard where is stated that <code>int()</code> is <code>0</code>.</p>\n", "Tags": "<c++><standards>", "OwnerUserId": "1356110", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_15548813_15548873_5": {"section_id": 3287, "quality": 1.0, "length": 6}, "so_15548813_15548978_2": {"section_id": 3287, "quality": 1.0, "length": 4}, "so_15548813_15548873_8": {"section_id": 6143, "quality": 0.5454545454545454, "length": 6}, "so_15548813_15548978_8": {"section_id": 6143, "quality": 0.5454545454545454, "length": 6}, "so_15548813_15548978_3": {"section_id": 3286, "quality": 1.0, "length": 5}, "so_15548813_15548873_2": {"section_id": 3287, "quality": 1.0, "length": 4}, "so_15548813_15548873_1": {"section_id": 3290, "quality": 1.0, "length": 7}, "so_15548813_15548855_2": {"section_id": 3285, "quality": 0.625, "length": 10}, "so_15548813_15548873_4": {"section_id": 3287, "quality": 0.9375, "length": 15}, "so_15548813_15548873_3": {"section_id": 3287, "quality": 0.9375, "length": 15}, "so_15548813_15548873_7": {"section_id": 3285, "quality": 1.0, "length": 5}, "so_15548813_15548978_4": {"section_id": 3285, "quality": 1.0, "length": 5}, "so_15548813_15548855_0": {"section_id": 3290, "quality": 1.0, "length": 7}, "so_15548813_15548978_7": {"section_id": 3285, "quality": 1.0, "length": 5}, "so_15548813_15548855_1": {"section_id": 3287, "quality": 0.6956521739130435, "length": 32}}, "n3337": {"so_15548813_15548873_5": {"section_id": 3157, "quality": 1.0, "length": 6}, "so_15548813_15548978_2": {"section_id": 3157, "quality": 1.0, "length": 4}, "so_15548813_15548873_8": {"section_id": 3155, "quality": 1.0, "length": 11}, "so_15548813_15548978_8": {"section_id": 3155, "quality": 1.0, "length": 11}, "so_15548813_15548978_3": {"section_id": 3156, "quality": 1.0, "length": 5}, "so_15548813_15548873_2": {"section_id": 3157, "quality": 1.0, "length": 4}, "so_15548813_15548873_1": {"section_id": 3160, "quality": 1.0, "length": 7}, "so_15548813_15548855_2": {"section_id": 3155, "quality": 1.0, "length": 16}, "so_15548813_15548873_4": {"section_id": 3157, "quality": 0.6875, "length": 11}, "so_15548813_15548873_3": {"section_id": 3157, "quality": 0.6875, "length": 11}, "so_15548813_15548873_7": {"section_id": 3155, "quality": 1.0, "length": 5}, "so_15548813_15548978_4": {"section_id": 3155, "quality": 1.0, "length": 5}, "so_15548813_15548855_0": {"section_id": 3160, "quality": 1.0, "length": 7}, "so_15548813_15548978_7": {"section_id": 3155, "quality": 1.0, "length": 5}, "so_15548813_15548855_1": {"section_id": 3157, "quality": 0.9782608695652174, "length": 45}}, "n4659": {"so_15548813_15548873_5": {"section_id": 4049, "quality": 1.0, "length": 6}, "so_15548813_15548873_4": {"section_id": 4049, "quality": 0.9375, "length": 15}, "so_15548813_15548873_3": {"section_id": 4049, "quality": 0.9375, "length": 15}, "so_15548813_15548873_7": {"section_id": 653, "quality": 0.8, "length": 4}, "so_15548813_15548978_3": {"section_id": 4048, "quality": 1.0, "length": 5}, "so_15548813_15548978_4": {"section_id": 4047, "quality": 1.0, "length": 5}, "so_15548813_15548855_0": {"section_id": 4052, "quality": 1.0, "length": 7}, "so_15548813_15548978_7": {"section_id": 653, "quality": 0.8, "length": 4}, "so_15548813_15548873_1": {"section_id": 4052, "quality": 1.0, "length": 7}, "so_15548813_15548855_2": {"section_id": 4047, "quality": 0.5625, "length": 9}, "so_15548813_15548855_1": {"section_id": 4049, "quality": 0.6739130434782609, "length": 31}}}, "15548873": {"ParentId": "15548813", "PostTypeId": "2", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_15548813_15548873_0\">I know it is because s.second is initialized by int(), but cant found the line in standard where is stated that int() is 0.</p>\n</blockquote>\n<p>Here is the path you have to follow in the C++11 Standard - this answer uses <a href=\"http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2012/n3485.pdf\" rel=\"nofollow\">Draft n3485</a> as a reference, which is more recent than the current official Standard. </p>\n<p>Per Paragraph 8.5/11 of the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_15548813_15548873_1\">An object whose initializer is an empty set of parentheses, i.e., (), shall be <strong>value-initialized</strong>. [...]</p>\n</blockquote>\n<p>Moreover, per Paragraph 8.5/8 of the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_15548813_15548873_2\">To <strong>value-initialize</strong> an object of type T means:</p>\n<p id=\"so_15548813_15548873_3\">\u2014 if T is a (possibly cv-qualified) class type (Clause 9) with either no default constructor (12.1) or a\n  default constructor that is user-provided or deleted, then the object is default-initialized;</p>\n<p id=\"so_15548813_15548873_4\">\u2014 if T is a (possibly cv-qualified) non-union class type without a user-provided or deleted default constructor,\n  then the object is zero-initialized and, if T has a non-trivial default constructor, default-initialized;</p>\n<p id=\"so_15548813_15548873_5\">\u2014 if T is an array type, then each element is value-initialized;</p>\n<p id=\"so_15548813_15548873_6\">\u2014 <strong>otherwise, the object is zero-initialized</strong>.</p>\n</blockquote>\n<p>Finally (although this is quite intuitive), per Paragraph 8.5/6:</p>\n<blockquote>\n<p id=\"so_15548813_15548873_7\">To <strong>zero-initialize</strong> an object or reference of type T means:</p>\n<p id=\"so_15548813_15548873_8\">\u2014 <strong>if T is a scalar type (3.9), the object is set to the value 0 (zero)</strong>, taken as an integral constant expression, converted to T; </p>\n<p id=\"so_15548813_15548873_9\">\u2014 [...]</p>\n</blockquote>\n", "OwnerUserId": "1932150", "LastEditorUserId": "1932150", "LastEditDate": "2013-03-21T13:32:48.417", "Id": "15548873", "Score": "5", "CreationDate": "2013-03-21T13:25:34.830", "LastActivityDate": "2013-03-21T13:32:48.417"}});