post_cb({"33166917": {"ParentId": "33166843", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>Those temporaries will be destroyed at the end of the full expression they appear in. In your case, that's the entire snippet you posted.</p>\n<p>This will be absolutely fine, so long as you <em>only</em> use that <code>const wchar_t*</code> inside that function invocation. If you store it anywhere and try to access it after the call exits, you would be thrust down the deep dark hole of UB.</p>\n<hr>\n<p>The relevant standards quote is (emphasis mine):</p>\n<blockquote>\n<p id=\"so_33166843_33166917_0\"><code>N3337 [class.temporary]/3:</code>\n  When an implementation introduces a temporary object of a class that has a non-trivial constructor (12.1,\n  12.8), it shall ensure that a constructor is called for the temporary object. Similarly, the destructor shall be\n  called for a temporary with a non-trivial destructor (12.4). <strong>Temporary objects are destroyed as the last step\n  in evaluating the full-expression (1.9) that (lexically) contains the point where they were created.</strong> This is true\n  even if that evaluation ends in throwing an exception. The value computations and side ef f ects of destroying\n  a temporary object are associated only with the full-expression, not with any specific subexpression.</p>\n</blockquote>\n</hr>", "OwnerUserId": "496161", "LastEditorUserId": "496161", "LastEditDate": "2015-10-16T10:08:49.920", "Id": "33166917", "Score": "5", "CreationDate": "2015-10-16T09:28:49.580", "LastActivityDate": "2015-10-16T10:08:49.920"}, "33166843": {"CommentCount": "2", "ViewCount": "104", "CreationDate": "2015-10-16T09:25:21.623", "LastActivityDate": "2015-10-16T10:08:49.920", "Title": "When do rvalue objects get destroyed when accessing their members as part of a function call?", "AcceptedAnswerId": "33166917", "PostTypeId": "1", "Id": "33166843", "Score": "0", "Body": "<p>I've just been thinking about the following bit of code:</p>\n<pre><code>    PerformConflict(m_dwSession, \n        CONFLICT_DETECTED, \n        item.GetConflictedFile().GetUnNormalizedPath().c_str(), \n        item.GetSuggestedFile().GetUnNormalizedPath().c_str());\n</code></pre>\n<ul>\n<li><code>GetConflictFile()</code> returns an object. </li>\n<li><code>GetUnNormalizedPath()</code>\nreturns a <code>std::wstring</code> </li>\n<li><code>c_str()</code> just returns a <code>const wchar_t*</code> (in this case to the contents of an rvalue <code>std::wstring</code>)</li>\n</ul>\n<p>My question is: Does anything in the spec guarantee that this code is safe?  I.e. are all the rvalue objects guaranteed not to have been destroyed by the time that c_str() is getting a pointer to their contents?</p>\n", "Tags": "<c++>", "OwnerUserId": "193128", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_33166843_33166917_0": {"section_id": 380, "quality": 0.8596491228070176, "length": 49}}, "n3337": {"so_33166843_33166917_0": {"section_id": 371, "quality": 0.8596491228070176, "length": 49}}, "n4659": {"so_33166843_33166917_0": {"section_id": 395, "quality": 0.8596491228070176, "length": 49}}}, "33167586": {"ParentId": "33166843", "CommentCount": "4", "Body": "<p>As <a href=\"http://herbsutter.com/2008/01/01/gotw-88-a-candidate-for-the-most-important-const/\" rel=\"nofollow\">illustrated by Herb Sutter</a>, rvalues are destroyed at the end of the expression in which they appear. However, if you bind them to <em>\"a reference to const on the stack\"</em>, their lifetime is extended to that of the reference.</p>\n<p>So, basically, if your function has this kind of signature:</p>\n<pre><code>PerformConflict(...,\n                ...,\n                const std::string&amp; str1, //&lt; any rvalue passed here will have the same lifetime as str1\n                const std::string&amp; str2  //&lt; any rvalue passed here will have the same lifetime as str2\n);\n</code></pre>\n<p>You should be able to manipulate the strings <strong>inside <code>PerformConflict()</code></strong> without problems.</p>\n<p>PS: the problem can also be solved if you pass the arguments by value (i.e. <code>const std::string str1</code>)</p>\n", "OwnerUserId": "865719", "PostTypeId": "2", "Id": "33167586", "Score": "1", "CreationDate": "2015-10-16T09:57:35.743", "LastActivityDate": "2015-10-16T09:57:35.743"}});