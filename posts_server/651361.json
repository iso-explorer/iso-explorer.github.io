post_cb({"651378": {"CommentCount": "2", "CreationDate": "2009-03-16T17:31:35.973", "LastEditorUserId": "34509", "LastActivityDate": "2009-03-16T18:30:03.070", "ParentId": "651361", "PostTypeId": "2", "LastEditorDisplayName": "litb", "LastEditDate": "2009-03-16T18:30:03.070", "Id": "651378", "Score": "10", "Body": "<p>From a theoretical point of view, yes. But it's a horrible thing to do. </p>\n<p><code>NULL</code> is a null pointer constant that is assigned to a pointer to make it point to nothing. </p>\n<pre><code>...\nptr = NULL; // now it points to no object anymore\n...\n\n// or ptr == 0\nif(ptr == NULL) {\n    ...\n}\n</code></pre>\n<hr>\n<p>Here are the references to the Standard if you are interested in any case. First, a null pointer constant is (<code>4.10/1</code>)</p>\n<blockquote>\n<p id=\"so_651361_651378_0\">A null pointer constant is an integral constant expression (5.19) rvalue of integer type that evaluates to zero. </p>\n</blockquote>\n<p>Then, what happens if we convert a null pointer constant to <code>bool</code>? It's explained in <code>4.12/1</code>:</p>\n<blockquote>\n<p id=\"so_651361_651378_1\">An rvalue of arithmetic, enumeration, pointer, or pointer to member type can be converted to an rvalue of type bool. A zero value, null pointer value, or null member pointer value is converted to false; a</p>\n</blockquote>\n<p>(When it talks about <code>rvalue</code> it essentially means a simple value as opposed to a variable of that type). </p>\n<p>Now, what actually <em>is</em> that <code>NULL</code>? Read <code>18.1/4</code> (note that in C, a null pointer constant is defined differently. Which might be the reason it explicitly refers to C++)</p>\n<blockquote>\n<p id=\"so_651361_651378_2\">The macro NULL is an implementation-defined C++ null pointer constant in this International Standard</p>\n</blockquote>\n<p>The important bit of that combination is the part \"<code>A zero value ... is converted to false</code>\". An assignment of <code>NULL</code> to a bool variable will try to convert <code>NULL</code> to a boolean value. As the above passages say, such a conversion exist and can be done. </p>\n<p>Another important thing about null pointers to understand is the different between a <code>null pointer</code> and a <code>null pointer constant</code>. As we just read, a null pointer constant is some integer value that's zero. However, a <code>null pointer</code> and its value, a <code>null pointer value</code>, are pointers and their type is of pointer type. The following has type int and is a null pointer constant</p>\n<pre><code>#define NULL ('n'-'n') // looks suspicious, but conforms\n</code></pre>\n<p>Because it is a integral constant expression (that is essentially an integer value that is known at compile time) with value zero. The following is a null pointer value</p>\n<pre><code>(void*)NULL\n</code></pre>\n<p>but it is <em>not</em> a null pointer constant. But anyway, also null pointer <em>values</em> are converted to bool as the above quote tells: \"<code>A .. null pointer value .. is converted to false</code>\". So you are all fine. </p>\n</hr>", "OwnerUserId": "34509", "OwnerDisplayName": "litb"}, "651447": {"ParentId": "651361", "CommentCount": "0", "CreationDate": "2009-03-16T17:46:38.340", "OwnerUserId": "8701", "Id": "651447", "PostTypeId": "2", "OwnerDisplayName": "Josh", "Score": "1", "Body": "<p>In general it will work, since pointers are designed to be usable in a boolean context:</p>\n<pre><code>int *i = NULL;\nif (i) // This is a pretty acceptable use of pointer conversions to bool\n{\n   // never runs.\n}\n</code></pre>\n<p>or</p>\n<pre><code>int *i = NULL;\n...\nbool b = i; // Maybe not so terrible, but you're better off just assigning to a pointer.\n</code></pre>\n<p>This is done on purpose (see dirkgently's answer for the standard reference) to allow this usage.  If you are using this syntax:</p>\n<pre><code>bool i = NULL; // Don't do this\nbool i2 = 0; // better\nbool i3 = false; // Best\n</code></pre>\n<p>Then you are probably being misleading, but it's going to work in a portable, predictable fashion.  Either NULL is defined to be 0, in which case, you will get a false value, or if NULL is truly a NULL pointer, then it will evaluate to false as well.</p>\n", "LastActivityDate": "2009-03-16T17:46:38.340"}, "651369": {"CommentCount": "2", "CreationDate": "2009-03-16T17:29:45.277", "LastEditorUserId": "18907", "LastActivityDate": "2009-03-16T17:39:21.167", "ParentId": "651361", "PostTypeId": "2", "LastEditorDisplayName": "chris", "LastEditDate": "2009-03-16T17:39:21.167", "Id": "651369", "Score": "-1", "Body": "<p>No, You should use the technical term - \"File Not Found\"</p>\n<p>edit: </p>\n<p>Reference: <a href=\"http://thedailywtf.com/Articles/What_Is_Truth_0x3f_.aspx\" rel=\"nofollow noreferrer\">http://thedailywtf.com/Articles/What_Is_Truth_0x3f_.aspx</a></p>\n<p>The proper answer is No.</p>\n<p>What I think you are trying to do is use NULL to mean \"Uninitialized\" or \"Dunno, yet.\"  This will usually  work in a database, but won't always work in code as the definition of NULL varies from preprocessor to preprocessor and language to language.</p>\n<p>Booleans are by definition two-state values.  To try to use them as three-state values is an error.  At best it's a dirty hack that will cause confusion to other developers in the future, at worst it's a breaking error, that will bite you in the behind as soon as anything in your build chain changes.</p>\n", "OwnerUserId": "18907", "OwnerDisplayName": "chris"}, "651368": {"ParentId": "651361", "CommentCount": "2", "CreationDate": "2009-03-16T17:29:41.577", "OwnerUserId": "6210", "Id": "651368", "PostTypeId": "2", "OwnerDisplayName": "MSN", "Score": "2", "Body": "<p>The compiler won't reject it since NULL is usually a preprocessor #define for 0 and 0 is convertable to a pointer representation of NULL and false.</p>\n", "LastActivityDate": "2009-03-16T17:29:41.577"}, "651426": {"ParentId": "651361", "CommentCount": "0", "CreationDate": "2009-03-16T17:43:03.183", "OwnerUserId": "29639", "PostTypeId": "2", "Id": "651426", "Score": "-1", "Body": "<p>NULL is not by definition 0. I don't know of any, but there could be some compilers that use a non-zero value for NULL, or perhaps even set some flag in a thunk behind its address. It would be just your luck that your code gets ported to one. It would be just <em>my</em> luck that I'd have to fix the resulting bugs.</p>\n<p>So I say, \"No, it is <em>not</em> acceptable.\"</p>\n", "LastActivityDate": "2009-03-16T17:43:03.183"}, "651377": {"ParentId": "651361", "CommentCount": "0", "CreationDate": "2009-03-16T17:31:34.040", "OwnerUserId": "60989", "Id": "651377", "PostTypeId": "2", "OwnerDisplayName": "Perchik", "Score": "0", "Body": "<p>I'm not sure why you want to do that. If you're trying to initialize it, use 0. As MSN said, your compiler is not going to reject it. Perhaps you should explain why you want to set a bool to NULL in the first place?</p>\n", "LastActivityDate": "2009-03-16T17:31:34.040"}, "651374": {"ParentId": "651361", "CommentCount": "0", "CreationDate": "2009-03-16T17:30:30.983", "OwnerUserId": "1043", "Id": "651374", "PostTypeId": "2", "OwnerDisplayName": "Andrew Grant", "Score": "2", "Body": "<p>My opinion is that this will reduce the readability of your code, but sure if you want to. NULL is just 0 after all.</p>\n", "LastActivityDate": "2009-03-16T17:30:30.983"}, "651373": {"ParentId": "651361", "CommentCount": "0", "CreationDate": "2009-03-16T17:30:19.253", "OwnerUserId": "78667", "Id": "651373", "PostTypeId": "2", "OwnerDisplayName": "Arkaitz Jimenez", "Score": "-1", "Body": "<p>As long as false is still 0 and NULL is still defined to 0 yes, but this can change in the future.\nI'd say its bad practice because u mix concepts and lose clarity.</p>\n", "LastActivityDate": "2009-03-16T17:30:19.253"}, "bq_ids": {"n4140": {"so_651361_651380_3": {"section_id": 44, "quality": 0.8974358974358975, "length": 35}, "so_651361_651378_2": {"section_id": 2515, "quality": 0.7777777777777778, "length": 7}, "so_651361_651380_1": {"section_id": 2515, "quality": 0.7, "length": 7}, "so_651361_651378_1": {"section_id": 44, "quality": 0.9130434782608695, "length": 21}}, "n3337": {"so_651361_651378_0": {"section_id": 36, "quality": 0.75, "length": 9}, "so_651361_651378_1": {"section_id": 41, "quality": 0.9130434782608695, "length": 21}, "so_651361_651378_2": {"section_id": 6460, "quality": 0.7777777777777778, "length": 7}, "so_651361_651380_1": {"section_id": 6460, "quality": 0.7, "length": 7}, "so_651361_651380_3": {"section_id": 41, "quality": 0.8974358974358975, "length": 35}}, "n4659": {"so_651361_651378_1": {"section_id": 45, "quality": 0.9130434782608695, "length": 21}, "so_651361_651380_1": {"section_id": 3249, "quality": 0.6, "length": 6}, "so_651361_651378_2": {"section_id": 3249, "quality": 0.6666666666666666, "length": 6}, "so_651361_651380_3": {"section_id": 45, "quality": 0.8974358974358975, "length": 35}}}, "651380": {"ParentId": "651361", "CommentCount": "2", "CreationDate": "2009-03-16T17:31:56.177", "OwnerUserId": "66692", "Id": "651380", "PostTypeId": "2", "OwnerDisplayName": "dirkgently", "Score": "5", "Body": "<p>From my copy of n2798:</p>\n<blockquote>\n<p id=\"so_651361_651380_0\"><strong>18.1 Types</strong></p>\n<p id=\"so_651361_651380_1\">3 The macro NULL is an implementation-defined C++ null pointer constant in this International Standard (4.10)</p>\n</blockquote>\n<p>and </p>\n<blockquote>\n<p id=\"so_651361_651380_2\"><strong>4.12 Boolean conversions [conv.bool]</strong></p>\n<p id=\"so_651361_651380_3\">1 An rvalue of arithmetic, unscoped enumeration, pointer, or pointer to member type can be converted to an rvalue of type bool. A zero value, null pointer value, or null member pointer value is converted to false; any other value is converted to true. An rvalue of type std::nullptr_t can be converted to an rvalue of type bool; the resulting value is false.</p>\n</blockquote>\n<p>So, yes, it seems likely that you can do that.</p>\n", "LastActivityDate": "2009-03-16T17:31:56.177"}, "651382": {"ParentId": "651361", "CommentCount": "2", "CreationDate": "2009-03-16T17:32:29.683", "OwnerUserId": "66760", "Id": "651382", "PostTypeId": "2", "OwnerDisplayName": "sikx", "Score": "-1", "Body": "<p>Since NULL is usually not 0 but <code>(void*)0</code>, it does not work just like that in C++, since NULL is a pointer in this case. You would have to do an explicit cast: <code>reinterpret_cast&lt;bool&gt;(NULL)</code>, and no this is not clean. You should use <code>true</code>/<code>1</code> and <code>false</code>/<code>0</code></p>\n", "LastActivityDate": "2009-03-16T17:32:29.683"}, "651361": {"CommentCount": "1", "ViewCount": "8292", "PostTypeId": "1", "LastEditorUserId": "300311", "FavoriteCount": "0", "CreationDate": "2009-03-16T17:27:18.543", "LastActivityDate": "2012-10-08T15:39:42.573", "AnswerCount": "12", "LastEditDate": "2012-10-08T15:39:42.573", "LastEditorDisplayName": "Andrew Grant", "Title": "Is it acceptable to assign 'NULL' to a boolean datatype?", "Id": "651361", "Score": "4", "Body": "<p>Is it acceptable to assign 'NULL' to a boolean datatype?</p>\n", "Tags": "<c++><boolean>", "OwnerDisplayName": "san"}, "651479": {"ParentId": "651361", "CommentCount": "0", "CreationDate": "2009-03-16T17:53:55.793", "OwnerUserId": "24126", "Id": "651479", "PostTypeId": "2", "OwnerDisplayName": "pearcewg", "Score": "1", "Body": "<p>Even if this is technically possible to do, I would avoid it.\nIt seems that if you need a null value, you should model to a different data type than Boolean.</p>\n<p>If you are going to use Boolean, properly design your module and code to use it as designed: with two potential values, not three.  If you need three, use another data type, like int or string, and have each of the three values mean something (in string, null string would mean null).</p>\n", "LastActivityDate": "2009-03-16T17:53:55.793"}, "651478": {"ParentId": "651361", "CommentCount": "0", "CreationDate": "2009-03-16T17:53:39.430", "OwnerUserId": "4086", "Id": "651478", "PostTypeId": "2", "OwnerDisplayName": "Ferruccio", "Score": "0", "Body": "<p>You can do that, but I don't see the point. Suppose you have:</p>\n<pre><code>void* p = NULL;\nbool b = p;\n</code></pre>\n<p>Why not just write it as:</p>\n<pre><code>void* p = NULL;\nbool b = (p != NULL);\n</code></pre>\n<p>It's clearer and any decent compiler will generate the same code.</p>\n", "LastActivityDate": "2009-03-16T17:53:39.430"}});