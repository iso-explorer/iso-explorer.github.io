post_cb({"7112501": {"Id": "7112501", "PostTypeId": "2", "Body": "<p>C++0x FDIS section 1.9 \"Program Execution\" \u00a715 is similar to the corresponding paragraph in C++03, just reworded to accommodate the conceptual change from \"sequence points\" to \"being sequenced\":</p>\n<blockquote>\n<p id=\"so_7112282_7112501_0\">Except where noted, evaluations of operands of individual operators and of subexpressions of individual expressions are unsequenced.</p>\n</blockquote>\n", "LastEditorUserId": "252000", "LastActivityDate": "2011-08-18T19:00:06.533", "Score": "1", "CreationDate": "2011-08-18T18:46:51.850", "ParentId": "7112282", "CommentCount": "0", "OwnerUserId": "252000", "LastEditDate": "2011-08-18T19:00:06.533"}, "7112338": {"Id": "7112338", "PostTypeId": "2", "Body": "<p>It is <strong>Unspecified</strong>.</p>\n<p><strong>Reference - C++03 Standard:</strong></p>\n<p><strong>Section 5: Expressions, Para 4:</strong></p>\n<blockquote>\n<p id=\"so_7112282_7112338_0\">except where noted [e.g. special rules for &amp;&amp; and ||], the order of evaluation of operands of individual operators and subexpressions of individual expressions, and the order in which side effects take place, is <strong>Unspecified</strong>.</p>\n</blockquote>\n", "LastEditorUserId": "452307", "LastActivityDate": "2011-09-17T05:39:26.067", "Score": "11", "CreationDate": "2011-08-18T18:32:40.033", "ParentId": "7112282", "CommentCount": "3", "OwnerUserId": "452307", "LastEditDate": "2011-09-17T05:39:26.067"}, "40953210": {"Id": "40953210", "PostTypeId": "2", "Body": "<p>According to the current <a href=\"http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf\" rel=\"nofollow noreferrer\">C standard</a>, C11, it also specifies that the order of evaluation of subexpressions (<code>a</code> and <code>b</code> in this case) is indeterminate.  In fact, this order doesn't even have to be the same if the same expression is evaluated multiple times.</p>\n<p>From section 6.5:</p>\n<blockquote>\n<p id=\"so_7112282_40953210_0\">The grouping of operators and operands is indicated by the\n  syntax.<sup>85)</sup> Except as specified later, side effects and\n  <strong>value computations of subexpressions are unsequenced.</strong><sup>86)</sup></p>\n<hr>\n<p id=\"so_7112282_40953210_1\">86)   In an expression that is evaluated more than once during the\n  execution of a program, <strong>unsequenced and indeterminately  sequenced \n  evaluations  of  its  subexpressions  need  not  be  performed \n  consistently  in different evaluations.</strong></p>\n</hr></blockquote>\n", "LastActivityDate": "2016-12-03T22:31:25.803", "CommentCount": "0", "CreationDate": "2016-12-03T22:31:25.803", "ParentId": "7112282", "Score": "0", "OwnerUserId": "1687119"}, "7112409": {"Id": "7112409", "PostTypeId": "2", "Body": "<p>In C++, for user-defined types <code>a + b</code> is a function call, and the standard says:</p>\n<blockquote>\n<blockquote>\n<p id=\"so_7112282_7112409_1\">\u00a75.2.2.8 - [...] The order of evaluation of function arguments is <strong>unspecified</strong>. [...]</p>\n</blockquote>\n</blockquote>\n<p>For normal operators, the standard says:</p>\n<blockquote>\n<blockquote>\n<p id=\"so_7112282_7112409_3\">\u00a75.4 - Except where noted, the order of evaluation of operands of individual operators and subexpressions of individual expressions, and the order in which side effects take place, is <strong>unspecified</strong>. [...]</p>\n</blockquote>\n</blockquote>\n<p>These haven't been changed for C++11. However, the wording changes in the second one to say that the order is \"<em>unsequenced</em>\" rather than unspecified, but it is essentially the same.</p>\n<p>I don't have a copy of the C standard, but I imagine that it is the same there as well.</p>\n", "LastEditorUserId": "500104", "LastActivityDate": "2011-12-19T02:07:13.127", "Score": "10", "CreationDate": "2011-08-18T18:38:48.767", "ParentId": "7112282", "CommentCount": "2", "OwnerUserId": "235825", "LastEditDate": "2011-12-19T02:07:13.127"}, "7112322": {"Id": "7112322", "PostTypeId": "2", "Body": "<p>For C: \"Order of operations is not defined by the language. The compiler is free to evaluate such expressions in any order, if the compiler can guarantee a consistent result.\" [...] \"Only the sequential-evaluation (,), logical-AND (&amp;&amp;), logical-OR (||), conditional-expression (? :), and function-call operators constitute sequence points and therefore guarantee a particular order of evaluation for their operands.\"</p>\n<p>Source: <a href=\"http://msdn.microsoft.com/en-us/library/2bxt6kc4.aspx\" rel=\"nofollow noreferrer\">http://msdn.microsoft.com/en-us/library/2bxt6kc4.aspx</a></p>\n<p>The way this is organized in that article, it seems to indicate this applies to C++ too, which is confirmed by the answer to this question: <a href=\"https://stackoverflow.com/questions/5473107/operator-precedence-vs-order-of-evaluation\">Operator Precedence vs Order of Evaluation</a>.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2011-08-18T18:37:25.013", "Score": "0", "CreationDate": "2011-08-18T18:31:30.597", "ParentId": "7112282", "CommentCount": "0", "OwnerUserId": "369310", "LastEditDate": "2017-05-23T12:31:56.080"}, "bq_ids": {"n4140": {"so_7112282_7112409_1": {"length": 5, "quality": 0.7142857142857143, "section_id": 3260}, "so_7112282_7112409_0": {"length": 5, "quality": 0.7142857142857143, "section_id": 3260}, "so_7112282_7112409_3": {"length": 11, "quality": 0.6470588235294118, "section_id": 5811}, "so_7112282_40953210_1": {"length": 18, "quality": 1.0, "section_id": 5811}, "so_7112282_7112338_0": {"length": 10, "quality": 0.5263157894736842, "section_id": 5811}, "so_7112282_7112501_0": {"length": 11, "quality": 1.0, "section_id": 5811}, "so_7112282_7112409_2": {"length": 11, "quality": 0.6470588235294118, "section_id": 5811}}, "n3337": {"so_7112282_7112409_1": {"length": 5, "quality": 0.7142857142857143, "section_id": 3132}, "so_7112282_7112409_3": {"length": 11, "quality": 0.6470588235294118, "section_id": 5584}, "so_7112282_7112409_2": {"length": 11, "quality": 0.6470588235294118, "section_id": 5584}, "so_7112282_7112338_0": {"length": 10, "quality": 0.5263157894736842, "section_id": 5584}, "so_7112282_7112409_0": {"length": 5, "quality": 0.7142857142857143, "section_id": 3132}, "so_7112282_7112501_0": {"length": 11, "quality": 1.0, "section_id": 5584}, "so_7112282_40953210_1": {"length": 18, "quality": 1.0, "section_id": 5584}}, "n4659": {"so_7112282_7112409_1": {"length": 4, "quality": 0.5714285714285714, "section_id": 7709}, "so_7112282_7112409_0": {"length": 4, "quality": 0.5714285714285714, "section_id": 7709}, "so_7112282_7112409_3": {"length": 10, "quality": 0.5882352941176471, "section_id": 7272}, "so_7112282_40953210_1": {"length": 18, "quality": 1.0, "section_id": 7272}, "so_7112282_7112501_0": {"length": 11, "quality": 1.0, "section_id": 7272}, "so_7112282_7112409_2": {"length": 10, "quality": 0.5882352941176471, "section_id": 7272}}}, "7112282": {"ViewCount": "3522", "Body": "<p>In the expression <code>a + b</code>, is <code>a</code> guaranteed to be evaluated before <code>b</code>, or is the order of evaluation unspecified? I think it is the latter, but I struggle to find a definite answer in the standard.</p>\n<p>Since I don't know whether C handles this different from C++, or if evaluation order rules were simplified in C++11, I'm gonna tag the question as all three.</p>\n", "AcceptedAnswerId": "7112409", "Title": "order of evaluation of operands", "CreationDate": "2011-08-18T18:28:17.990", "Id": "7112282", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2011-12-19T02:06:21.350", "LastEditorUserId": "500104", "LastActivityDate": "2016-12-03T22:31:25.803", "Score": "12", "OwnerUserId": "252000", "Tags": "<c++><c><c++11><expression><order-of-evaluation>", "AnswerCount": "6"}, "7112363": {"Id": "7112363", "PostTypeId": "2", "Body": "<p>It is unspecified. C and C++ follow the same logic in selecting sequence points:</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Sequence_point\" rel=\"nofollow noreferrer\">https://en.wikipedia.org/wiki/Sequence_point</a></p>\n", "LastEditorUserId": "1306662", "LastActivityDate": "2016-12-03T22:14:13.347", "Score": "1", "CreationDate": "2011-08-18T18:34:40.697", "ParentId": "7112282", "CommentCount": "1", "OwnerUserId": "9167", "LastEditDate": "2016-12-03T22:14:13.347"}});