post_cb({"bq_ids": {"n4140": {"so_30649469_30650191_1": {"length": 16, "quality": 0.9411764705882353, "section_id": 336}}, "n3337": {"so_30649469_30650191_1": {"length": 16, "quality": 0.9411764705882353, "section_id": 326}}, "n4659": {"so_30649469_30650191_1": {"length": 16, "quality": 0.9411764705882353, "section_id": 345}}}, "30649469": {"ViewCount": "126", "Body": "<p>Goal : Obtain a callback function that will take any type of parameters as the callback function's parameters</p>\n<pre><code>.h\ntemplate &lt;typename F, typename A&gt;\nvoid DelayedCallback(F&amp;&amp; CallbackFunction, A&amp;&amp; Args = NULL);\n</code></pre>\n<p>/</p>\n<pre><code>.cpp\nvoid DelayedCallback(F&amp;&amp; CallbackFunction, A&amp;&amp; Args)\n{\n  //Timer function that received a function pointer to be the \"callback\"  function\n  Timer((std::bind(std::forward&lt;F&gt;(CallbackFunction), std::forward&lt;A&gt;(Args)))())\n}\n</code></pre>\n<p>/</p>\n<pre><code>DelayedCallback(&amp;HUDExit);\n\nvoid HUDExit() {}\n</code></pre>\n<p>/</p>\n<pre><code>ERROR : DelayedCallback(FName,float,F &amp;&amp;,A &amp;&amp;)' : could not deduce template argument for 'A'\n</code></pre>\n<p>What am I doing wrong? I'm new to most of these concept in c++, more of c# programmer</p>\n<p>EDIT : It's not only about the error, I'm pretty sure it's not the only one I am making.</p>\n", "AcceptedAnswerId": "30650191", "Title": "The perfect callback function", "CreationDate": "2015-06-04T16:37:34.863", "Id": "30649469", "CommentCount": "4", "PostTypeId": "1", "LastActivityDate": "2015-06-04T17:35:42.123", "Score": "-1", "OwnerUserId": "2258989", "Tags": "<c++><templates><c++11><function-pointers><perfect-forwarding>", "AnswerCount": "1"}, "30650191": {"Id": "30650191", "PostTypeId": "2", "Body": "<p>Your error message doesn't match the signature of <code>DelayedCallback</code></p>\n<pre><code>template &lt;typename F, typename A&gt;\nvoid DelayedCallback(F&amp;&amp; CallbackFunction, A&amp;&amp; Args = NULL)\n\nDelayedCallback(&amp;HUDExit);\n</code></pre>\n<p>That function signature and the usage you've shown will not produce an error message that says</p>\n<blockquote>\n<p id=\"so_30649469_30650191_0\">ERROR : <code>DelayedCallback(FName,float,F &amp;&amp;,A &amp;&amp;)</code>' : could not deduce template argument for 'A'</p>\n</blockquote>\n<p>But ignoring the template parameter mismatches, the code you've shown will also result in a similar error. The problem is that template parameters cannot be deduced from default arguments and <code>A</code> is treated as a non-deduced context in your example.</p>\n<p>From N3337, <em>\u00a714.8.2.5/5 [temp.deduct.type]</em></p>\n<blockquote>\n<p id=\"so_30649469_30650191_1\">The non-deduced contexts are: <br/>\n  ...<br/>\n  \u2014 A template parameter used in the parameter type of a function parameter that has a default argument that is being used in the call for which argument deduction is being done.</p>\n</blockquote>\n<p>Instead, you should change <code>A</code> to a parameter pack. That'll allow you to pass zero or more arguments to <code>DelayedCallback</code>.</p>\n<pre><code>template &lt;typename F, typename... A&gt;\nvoid DelayedCallback(F&amp;&amp; CallbackFunction, A&amp;&amp;... Args)\n{\n  //Timer function that received a function pointer to be the \"callback\"  function\n  Timer((std::bind(std::forward&lt;F&gt;(CallbackFunction), std::forward&lt;A&gt;(Args)...))())\n  // previous line is missing a semicolon at the very least\n}\n</code></pre>\n<hr>\n<p>Once you fix all that, you'll run into the problem mentioned in the comments. You <a href=\"https://stackoverflow.com/q/495021/241631\">cannot split</a> the declaration and definition of a function template between a header and source file as you would with a non-template. So implement <code>DelayedCallback</code> in the header itself as I have done above.</p>\n</hr>", "LastEditorUserId": "241631", "LastActivityDate": "2015-06-04T17:35:42.123", "Score": "1", "CreationDate": "2015-06-04T17:16:56.397", "ParentId": "30649469", "CommentCount": "3", "OwnerUserId": "241631", "LastEditDate": "2015-06-04T17:35:42.123"}});