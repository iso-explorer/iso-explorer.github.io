post_cb({"bq_ids": {"n4140": {"so_25844637_25844808_1": {"section_id": 6005, "quality": 0.8571428571428571, "length": 6}, "so_25844637_25844808_3": {"section_id": 3222, "quality": 0.8333333333333334, "length": 20}}, "n3337": {"so_25844637_25844808_1": {"section_id": 5773, "quality": 0.8571428571428571, "length": 6}, "so_25844637_25844808_3": {"section_id": 3096, "quality": 0.875, "length": 21}}, "n4659": {"so_25844637_25844808_1": {"section_id": 7504, "quality": 0.8571428571428571, "length": 6}, "so_25844637_25844808_3": {"section_id": 3979, "quality": 0.8333333333333334, "length": 20}}}, "25844732": {"ParentId": "25844637", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Generally it would be bad design and in standard C++ it doesn't make much sense as your internal NULL check implies that you would call a null pointer, which is undefined behavior.</p>\n<p>This topic was discusses here:\n<a href=\"https://stackoverflow.com/questions/1844005/checking-if-this-is-null\">Checking if this is null</a></p>\n", "OwnerUserId": "2436966", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T10:24:20.407", "Id": "25844732", "Score": "4", "CreationDate": "2014-09-15T09:23:59.857", "LastActivityDate": "2014-09-15T09:23:59.857"}, "25844637": {"CommentCount": "5", "ViewCount": "124", "PostTypeId": "1", "LastEditorUserId": "442284", "CreationDate": "2014-09-15T09:18:49.840", "LastActivityDate": "2014-09-15T09:57:53.983", "Title": "Method in null class pointer (c++)", "AcceptedAnswerId": "25844808", "LastEditDate": "2014-09-15T09:56:51.990", "Id": "25844637", "Score": "1", "Body": "<p>Let's say whe have </p>\n<pre><code>class Foo{\n\npublic:\n       bool   error;\n       ......\n       bool isValid(){return error==false;}\n};\n</code></pre>\n<p>and somewhere</p>\n<pre><code>Foo *aFoo=NULL;\n</code></pre>\n<p>I usually would do <code>if (aFoo!=NULL &amp;&amp; aFoo-&gt;isValid()).....</code></p>\n<p>But what if in the isValid method I test the nullity:</p>\n<pre><code>bool isValid(){return this!=NULL &amp;&amp; error==false)\n</code></pre>\n<p>That would simplify the external testing with simply calling <code>if (aFoo-&gt;isValid())</code></p>\n<p>I've tested it in some compilers and it works but I wonder if it is standard and could cause problems when porting to other environments.</p>\n", "Tags": "<c++><null>", "OwnerUserId": "430531", "AnswerCount": "3"}, "25844802": {"ParentId": "25844637", "CommentCount": "0", "Body": "<p>The compiler is free to optimize away the check -- calling any non-static member of any class through an invalid (or <code>NULL</code> pointer) is undefined behavior. Please don't do this.</p>\n", "OwnerUserId": "721269", "PostTypeId": "2", "Id": "25844802", "Score": "5", "CreationDate": "2014-09-15T09:27:46.587", "LastActivityDate": "2014-09-15T09:27:46.587"}, "25844808": {"ParentId": "25844637", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Why not simply a namespace-scope function like this?</p>\n<pre><code>bool isValid(Foo* f) {return f &amp;&amp; f-&gt;isValid();}\n</code></pre>\n<p>An <code>if</code>-Statement like</p>\n<pre><code>if (aFoo-&gt;isValid())\n</code></pre>\n<p>Implies that the pointer is pointing to a valid object. It would be a huge source of confusion and very error prone.</p>\n<p>Finally, your code would indeed invoke undefined behavior - <code>aFoo-&gt;isValid</code> is per definition equivalent to <code>(*aFoo).isValid</code>:</p>\n<blockquote>\n<p id=\"so_25844637_25844808_0\"><strong>N3337, \u00a75.2.5/2</strong></p>\n<p id=\"so_25844637_25844808_1\">The expression <code>E1-&gt;E2</code> is converted to the equivalent form\n  <code>(*(E1)).E2</code>;</p>\n</blockquote>\n<p>which would dereference a null pointer to obtain a null reference, which is clearly undefined:</p>\n<blockquote>\n<p id=\"so_25844637_25844808_2\"><strong>N3337, \u00a78.3.2/5</strong></p>\n<p id=\"so_25844637_25844808_3\">[ Note: in particular, a null reference cannot exist in a well-defined program, because the only way to create such a reference would be to bind it to the\n  \u201cobject\u201d obtained by dereferencing a null pointer, which causes\n  undefined behavior. [\u2026] \u2014 end note ]</p>\n</blockquote>\n", "OwnerUserId": "3647361", "LastEditorUserId": "442284", "LastEditDate": "2014-09-15T09:57:53.983", "Id": "25844808", "Score": "4", "CreationDate": "2014-09-15T09:28:20.280", "LastActivityDate": "2014-09-15T09:57:53.983"}});