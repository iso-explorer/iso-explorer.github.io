post_cb({"29979527": {"ViewCount": "69", "Body": "<pre><code>// multiple inheritance\n#include &lt;iostream&gt;\nusing namespace std;\n\nclass Polygon {\n  protected:\n    int width, height;\n  public:\n    Polygon (int a, int b) : width(a), height(b) {}\n    virtual int area()=0;\n    virtual void print(){\n        cout &lt;&lt; \"area = \" &lt;&lt; area() &lt;&lt; endl;\n    };\n};\n\n\n\nclass Rectangle: public Polygon{\n  public:\n    Rectangle (int a, int b) : Polygon(a,b) {}\n    int area () { return width*height; }\n    void print(){\n        cout &lt;&lt; \"area = \" &lt;&lt; area() &lt;&lt; endl;\n    };\n};\n\nclass Square: public Rectangle{\n  public:\n    Square (int a, int b) : Rectangle(a,b) {}\n    int area () { return width*height/2; }\n};\n\nint main () {\n  Square sq (4,5);\n  sq.print ();\n  return 0;\n}\n</code></pre>\n<p>In this function, print calls area() of Square (not Rectangle). Why? Since area() in Rectangle is not virtual, it should call area() from Rectangle. Final result is 10. According to me it should be 20.</p>\n", "Title": "understanding virtual function", "CreationDate": "2015-04-30T23:33:27.353", "LastActivityDate": "2015-05-01T00:03:05.493", "CommentCount": "1", "LastEditDate": "2015-04-30T23:36:33.497", "PostTypeId": "1", "LastEditorUserId": "1491895", "Id": "29979527", "Score": "3", "OwnerUserId": "3878963", "Tags": "<c++><inheritance>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_29979527_29979544_1": {"length": 31, "quality": 0.96875, "section_id": 7003}}, "n3337": {"so_29979527_29979544_1": {"length": 31, "quality": 0.96875, "section_id": 6749}}, "n4659": {"so_29979527_29979544_1": {"length": 31, "quality": 0.96875, "section_id": 8500}}}, "29979544": {"Id": "29979544", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_29979527_29979544_0\">Since <code>area()</code> in <code>Rectangle</code> is not virtual, it should call <code>area()</code> from <code>Rectangle</code></p>\n</blockquote>\n<p><strong>It actually is <code>virtual</code></strong>, since it was declared <code>virtual</code> in the base class. This attribute is automatically transferred to inherited classes' member function  declarations.</p>\n<p>See the standard, <strong>Virtual functions [class.virtual]</strong> (emphasis mine):</p>\n<blockquote>\n<p id=\"so_29979527_29979544_1\">If a virtual member function <code>vf</code> is declared in a class Base and in a class Derived, <strong><em>derived directly or indirectly</em></strong>\n  from Base, a member function <code>vf</code> with the same name, parameter-type-list (8.3.5), cv-qualification, and refqualifier\n  (or absence of same) as <code>Base::vf</code> is declared, then Derived::vf is also virtual (<strong><em>whether or not it is\n  so declared</em></strong>) and it <em>overrides</em> <code>Base::vf</code>.</p>\n</blockquote>\n<hr>\n<p><strong>Side remark.</strong> Derividg a square from a rectangle can be <a href=\"https://stackoverflow.com/a/16804908\">problematic</a> as it violates Liskov substitution principle.</p>\n</hr>", "LastEditorUserId": "-1", "LastActivityDate": "2015-05-01T00:03:05.493", "Score": "4", "CreationDate": "2015-04-30T23:35:49.190", "ParentId": "29979527", "CommentCount": "6", "OwnerUserId": "3246555", "LastEditDate": "2017-05-23T12:22:12.367"}});