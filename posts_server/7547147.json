post_cb({"7547185": {"ParentId": "7547147", "CommentCount": "0", "Body": "<p>Yes. Zero is a special constant. In fact, it's the only integral constant which can be used, without using explicit cast, in such statements:</p>\n<pre><code>int *pi = 0;  //ok\nchar *pc = 0; //ok\nvoid *pv = 0; //ok\nA *pa = 0;    //ok\n</code></pre>\n<p>All would compile fine.</p>\n<p>However, if you use this instead:</p>\n<pre><code>int *pi = 1;  //error\nchar *pc = 2; //error\nvoid *pv = 3; //error\nA *pa = 4;    //error\n</code></pre>\n<p>All would give compilation error.</p>\n<p>In C++11, you should use <code>nullptr</code>, instead of <code>0</code>, when you mean null pointer.</p>\n", "OwnerUserId": "415784", "PostTypeId": "2", "Id": "7547185", "Score": "0", "CreationDate": "2011-09-25T17:21:02.107", "LastActivityDate": "2011-09-25T17:21:02.107"}, "7547193": {"ParentId": "7547147", "LastEditDate": "2017-05-23T10:34:29.643", "CommentCount": "0", "CreationDate": "2011-09-25T17:22:07.410", "OwnerUserId": "960524", "LastEditorUserId": "-1", "PostTypeId": "2", "Id": "7547193", "Score": "0", "Body": "<p>In your example 'p' is the address of an int.  By setting p to 0 you're saying there is an int at address 0.  The <em>convention</em> is that 0 is the \"not a valid address address\", but its just a convention.</p>\n<p>In pratice address 0 is generally \"unmapped\" (that is there is no memory backing that address), so you will get a fault at that address.  That's not true in some embedded systems, though.</p>\n<p>You could just as well pick any random address (e.g. 0xffff7777 or any other value) as the \"null\" address, but you would be bucking convention and confusing a lot of folks that read your code.  Zero is generally used because most languages have support for testing is-zero is-not-zero efficiently.</p>\n<p>See this related question: <a href=\"https://stackoverflow.com/questions/2759845/why-is-address-zero-used-for-null-pointer\">Why is address zero used for the null pointer?</a></p>\n", "LastActivityDate": "2011-09-25T17:22:07.410"}, "7547147": {"CommentCount": "0", "CreationDate": "2011-09-25T17:15:52.170", "PostTypeId": "1", "AcceptedAnswerId": "7547168", "LastEditorUserId": "635608", "LastActivityDate": "2011-09-25T18:17:03.000", "LastEditDate": "2011-09-25T17:17:49.380", "ViewCount": "1518", "FavoriteCount": "1", "Title": "Null pointer in C++", "Id": "7547147", "Score": "2", "Body": "<p>When in C++ I declare a null pointer to be <code>int* p=0</code>, does that mean the zero is some special constant of integer pointer type, or does it mean that <code>p</code> is pointing to address <code>0x0</code>?\nOf course for that <code>0x0</code> would have to be an special address to which C++ never touches during allocation of variables/arrays. </p>\n", "Tags": "<c++><pointers>", "OwnerUserId": "505306", "AnswerCount": "8"}, "7547172": {"ParentId": "7547147", "CommentCount": "1", "Body": "<p>the pointer points to address 0. On most platforms that is very special, but you should use <code>NULL</code>, because it is not always <code>0</code> (but very often).</p>\n", "OwnerUserId": "472245", "PostTypeId": "2", "Id": "7547172", "Score": "0", "CreationDate": "2011-09-25T17:19:06.427", "LastActivityDate": "2011-09-25T17:19:06.427"}, "7547163": {"ParentId": "7547147", "CommentCount": "0", "Body": "<p>It means that it's not pointing to anything.</p>\n", "OwnerUserId": "963030", "PostTypeId": "2", "Id": "7547163", "Score": "1", "CreationDate": "2011-09-25T17:18:11.763", "LastActivityDate": "2011-09-25T17:18:11.763"}, "7547168": {"ParentId": "7547147", "CommentCount": "4", "Body": "<p>The C++ standard defines that the integer constant 0 converts to a null pointer. <em>This does not mean that null pointers point to address 0x0</em>. It just means that the text '0' turns into a null pointer when converted to a pointer.</p>\n<p>Of course, making null pointers have a representation other than <code>0x0</code> is rather complicated, so most compilers just let <code>0x0</code> be the null pointer address and make sure nothing is ever allocated at zero.</p>\n<p>Note that using this zero-conversion is considered bad style. Use <code>NULL</code> (which is a preprocessor macro defined as <code>0</code>, <code>0L</code>, or some other zero integral constant), or, if your compiler is new enough to support it, <a href=\"http://en.wikibooks.org/wiki/More_C++_Idioms/nullptr\" rel=\"noreferrer\"><code>nullptr</code></a>.</p>\n", "OwnerUserId": "36723", "PostTypeId": "2", "Id": "7547168", "Score": "8", "CreationDate": "2011-09-25T17:18:54.463", "LastActivityDate": "2011-09-25T17:18:54.463"}, "7547183": {"ParentId": "7547147", "LastEditDate": "2011-09-25T17:25:49.153", "CommentCount": "0", "CreationDate": "2011-09-25T17:20:46.020", "OwnerUserId": "19563", "LastEditorUserId": "19563", "PostTypeId": "2", "Id": "7547183", "Score": "3", "Body": "<p>It means that an integral constant expression with value zero has a special meaning in C++; it is called a <em>null pointer constant</em>. when you use such an expression to initialize a pointer with, or to assign to a pointer, the implementation ensures that the pointer contains the appropriately typed <em>null pointer value</em>. This is guaranteed to be a different value to any pointer pointing at a genuine object. It may or may not have a representation that is \"zero\".</p>\n<p>ISO/IEC 14882:2011 4.10 [conv.ptr] / 1:</p>\n<blockquote>\n<p id=\"so_7547147_7547183_0\">A <em>null pointer constant</em> is an integral constant expression (5.19) prvalue of integer type that evaluates to zero or a prvalue of type <code>std::nullptr_t</code>. A null pointer constant can be converted to a pointer type; the result is the <em>null pointer value</em> of that type and is distinguishable from every other value of object pointer or function pointer type.</p>\n</blockquote>\n", "LastActivityDate": "2011-09-25T17:25:49.153"}, "7547173": {"ParentId": "7547147", "CommentCount": "0", "Body": "<p>The value of the pointer is just 0.  It doesn't necessarily mean it points to address 0x0.  The <code>NULL</code> macro, is just a 0 constant.</p>\n", "OwnerUserId": "174614", "PostTypeId": "2", "Id": "7547173", "Score": "1", "CreationDate": "2011-09-25T17:19:13.093", "LastActivityDate": "2011-09-25T17:19:13.093"}, "7547174": {"ParentId": "7547147", "CommentCount": "0", "Body": "<p>It's a special value, which by the standard is guaranteed to never be equal to a pointer that is pointing to an object or a function. The address-of operator <code>&amp;</code> will never yield the null pointer, nor will any successful dynamic memory allocations. You should not think of it as address 0, but rather as special value that indicates that the pointer is pointing nowhere. There is a macro <code>NULL</code> for this purpose, and the new idiom is <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2431.pdf\" rel=\"nofollow\"><code>nullptr</code></a>. </p>\n", "OwnerUserId": "45914", "PostTypeId": "2", "Id": "7547174", "Score": "2", "CreationDate": "2011-09-25T17:19:19.263", "LastActivityDate": "2011-09-25T17:19:19.263"}, "bq_ids": {"n4140": {"so_7547147_7547183_0": {"section_id": 39, "quality": 0.75, "length": 27}}, "n3337": {"so_7547147_7547183_0": {"section_id": 36, "quality": 0.9166666666666666, "length": 33}}, "n4659": {"so_7547147_7547183_0": {"section_id": 39, "quality": 0.75, "length": 27}}}});