post_cb({"bq_ids": {"n4140": {"so_40819713_40819818_1": {"length": 51, "quality": 0.8793103448275862, "section_id": 6067}}, "n3337": {"so_40819713_40819818_1": {"length": 51, "quality": 0.8793103448275862, "section_id": 5835}}, "n4659": {"so_40819713_40819818_1": {"length": 51, "quality": 0.8793103448275862, "section_id": 7563}}}, "40819818": {"Id": "40819818", "PostTypeId": "2", "Body": "<p>The error message is very clear.</p>\n<blockquote>\n<p id=\"so_40819713_40819818_0\">ISO C++ forbids taking the address of an unqualified or parenthesized non-static member function to form a pointer to member function. Say '&amp;Transmitter::sender' [-fpermissive]</p>\n</blockquote>\n<p>From <a href=\"http://eel.is/c++draft/expr.unary.op#4\" rel=\"noreferrer\">expr.unary.op</a></p>\n<blockquote>\n<p id=\"so_40819713_40819818_1\">A pointer to member is only formed when an explicit &amp; is used and <strong>its operand is a qualified-id not enclosed in parentheses.</strong> [ Note: That is, the expression &amp;(qualified-id), where the qualified-id is enclosed in parentheses, does not form an expression of type \u201cpointer to member\u201d. Neither does qualified-id, because there is no implicit conversion from a qualified-id for a non-static member function to the type \u201cpointer to member function\u201d as there is from an lvalue of function type to the type \u201cpointer to function\u201d ([conv.func]). Nor is &amp;unqualified-id a pointer to member, even within the scope of the unqualified-id's class.  \u2014 end note ]</p>\n</blockquote>\n<p>You need to use:</p>\n<pre><code>    std::thread t(&amp;Transmitter::sender, this, some_variables);\n</code></pre>\n<p>See <a href=\"http://melpon.org/wandbox/permlink/1JBAWfkwJ6nDW1dc\" rel=\"noreferrer\">this demo</a></p>\n", "LastEditorUserId": "4115625", "LastActivityDate": "2016-11-26T15:27:52.040", "Score": "5", "CreationDate": "2016-11-26T15:20:02.257", "ParentId": "40819713", "CommentCount": "2", "OwnerUserId": "4115625", "LastEditDate": "2016-11-26T15:27:52.040"}, "40819713": {"ViewCount": "1729", "Body": "<p>I am trying the following code:</p>\n<pre><code>std::thread t(&amp;(Transmitter::sender), this, some_variables);\n</code></pre>\n<p>where sender is a member function of the same class from whose method the above line is being called.</p>\n<p>I get the warning: </p>\n<pre><code>Transmitter.h: In member function 'int Transmitter::transmit_streams(std::vector&lt;std::vector&lt;single_stream_record&gt; &gt;, int, Receiver&amp;)':\nTransmitter.h:81:44: error: ISO C++ forbids taking the address of an unqualified or parenthesized non-static member function to form a pointer to member function.  Say '&amp;Transmitter::sender' [-fpermissive]\n</code></pre>\n<p>though it compiles and runs fine. How can I remove this warning.</p>\n<p>My g++ is 4.6.3 and I compile the code with -std=c++0x.</p>\n", "AcceptedAnswerId": "40819818", "Title": "error: ISO C++ forbids taking the address of an unqualified or parenthesized non-static member function to form a pointer to member function", "CreationDate": "2016-11-26T15:07:37.970", "Id": "40819713", "CommentCount": "0", "LastEditDate": "2016-11-26T15:47:24.550", "PostTypeId": "1", "LastEditorUserId": "4618308", "LastActivityDate": "2016-11-26T15:47:24.550", "Score": "2", "OwnerUserId": "1402140", "Tags": "<c++><multithreading><iso>", "AnswerCount": "1"}});