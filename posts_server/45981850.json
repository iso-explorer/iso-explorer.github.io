post_cb({"45981850": {"ViewCount": "105", "Body": "<p>Is this undefined behavior or not?</p>\n<pre><code>std::unique_ptr&lt;T&gt; p = some_function();\n\np = some_other_function(std::move(p));\n</code></pre>\n<p>I've read <a href=\"http://en.cppreference.com/w/cpp/language/eval_order\" rel=\"nofollow noreferrer\">http://en.cppreference.com/w/cpp/language/eval_order</a> but not found definitive answer there.</p>\n", "Title": "Assigning to a variable which was moved in right side of expression", "CreationDate": "2017-08-31T12:49:34.410", "LastActivityDate": "2017-09-01T07:16:41.423", "CommentCount": "5", "FavoriteCount": "0", "PostTypeId": "1", "Id": "45981850", "Score": "3", "OwnerUserId": "1555823", "Tags": "<c++><c++14>", "AnswerCount": "3"}, "45982001": {"Id": "45982001", "PostTypeId": "2", "Body": "<p>If you search for assignment then you will find rule 8 with only mentions the <em>built-in</em> assignment operator, and <a href=\"http://en.cppreference.com/w/cpp/memory/unique_ptr\" rel=\"nofollow noreferrer\"><code>std::unique_ptr</code></a> do <a href=\"http://en.cppreference.com/w/cpp/memory/unique_ptr/operator%3D\" rel=\"nofollow noreferrer\">overload the assignment operator</a>.</p>\n<p><strong><em>But</em></strong> since the operator is overloaded, the statement</p>\n<pre><code>p = some_other_function(std::move(p));\n</code></pre>\n<p>is actually a <em>function call</em>:</p>\n<pre><code>p.operator=(some_other_function(std::move(p)));\n</code></pre>\n<p>which makes it part of rule 3 instead. And that makes it well-defined (because <code>std::move(p)</code> have to be done before <code>some_other_function</code> is called, and <code>some_other_function</code> have to finish before <code>p.operator=</code> is called).</p>\n", "LastEditorUserId": "440558", "LastActivityDate": "2017-09-01T07:16:41.423", "Score": "4", "CreationDate": "2017-08-31T12:56:16.640", "ParentId": "45981850", "CommentCount": "1", "OwnerUserId": "440558", "LastEditDate": "2017-09-01T07:16:41.423"}, "bq_ids": {"n4140": {"so_45981850_45982500_0": {"length": 23, "quality": 0.9583333333333334, "section_id": 6173}}, "n3337": {"so_45981850_45982500_0": {"length": 23, "quality": 0.9583333333333334, "section_id": 5934}}, "n4659": {"so_45981850_45982500_0": {"length": 23, "quality": 0.9583333333333334, "section_id": 7675}}}, "45982500": {"Id": "45982500", "PostTypeId": "2", "Body": "<p>The assignment portion of an assignment expression is always sequenced after evaluating the left and right hand sides, even if it's going to ultimately call a type's overloaded assignment operator (that is, assignment for a non built-in type):</p>\n<p>See [expr.ass] (<strong>Emphasis mine</strong>)</p>\n<blockquote>\n<p id=\"so_45981850_45982500_0\">The assignment operator (<code>=</code>) and the compound assignment operators all group right-to-left. [...] <strong>In all cases, the assignment is sequenced after the value\n  computation of the right and left operands</strong>, and before the value computation of the assignment expression</p>\n</blockquote>\n<p>So to answer your question, it is not undefined behavior. The entire right hand side of <code>p = some_other_function(std::move(p));</code> is evaluated first, and then the assignment of <code>p = &lt;result&gt;</code> happens. <strike>Since <code>p</code> was moved it's internal state is <em>valid but unspecified</em> ([defns.valid]) and assignment will bring the variable back into a specified state.</strike></p>\n", "LastEditorUserId": "27678", "LastActivityDate": "2017-08-31T13:47:21.107", "Score": "0", "CreationDate": "2017-08-31T13:21:09.770", "ParentId": "45981850", "CommentCount": "2", "OwnerUserId": "27678", "LastEditDate": "2017-08-31T13:47:21.107"}, "45981913": {"Id": "45981913", "PostTypeId": "2", "Body": "<p>The behavior is defined.</p>\n<p><code>std::move(p)</code> is sequenced before the function call <code>some_other_function()</code>, therefore the assignment to <code>p</code> takes place after <code>std::move(p)</code> (it doesn't matter if the assignment operator is built-in or not because there are no side effects other than assigning <code>p</code>).</p>\n", "LastEditorUserId": "485343", "LastActivityDate": "2017-08-31T13:40:23.240", "Score": "3", "CreationDate": "2017-08-31T12:52:31.970", "ParentId": "45981850", "CommentCount": "1", "OwnerUserId": "485343", "LastEditDate": "2017-08-31T13:40:23.240"}});