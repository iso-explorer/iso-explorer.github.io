post_cb({"bq_ids": {"n4140": {"so_22919725_22920219_1": {"length": 66, "quality": 0.6, "section_id": 382}}, "n3337": {"so_22919725_22920219_1": {"length": 66, "quality": 0.6, "section_id": 373}}}, "22920868": {"Id": "22920868", "PostTypeId": "2", "Body": "<p>Deduplicator has given the language lawyer answer, here is the implementation detail answer:</p>\n<p>If you pass any object by reference, you are effectively passing a pointer to that object. Since the caller is only passing a pointer to the object, the object that is passed by reference <em>must be constructed by the caller</em>.</p>\n<p>The callee, on the other hand, only ever sees the pointer that is passed in. It does not see <em>how</em> the caller has constructed the object whose pointer is passed. This object could be a temporary (only in the case of a <code>const</code> reference, because temporaries cannot be passed as non-const references), or a variable with function scope, it could be an object that was already passed to the caller by its caller, it could even be an object allocated with <code>new</code>. As such, it cannot destruct the object because it does not know how.</p>\n<p>Consequently, it is up to the caller to clean up the temporary <em>after the callee returns control to the caller</em> - anything that is passed in by reference must live for the entire runtime of the callee.</p>\n<p>Note that this entire argument is completely ignorant as to whether the reference is <code>const</code> or not.</p>\n", "LastEditorUserId": "2445184", "LastActivityDate": "2014-04-07T19:28:14.363", "CommentCount": "2", "CreationDate": "2014-04-07T19:04:55.577", "ParentId": "22919725", "Score": "2", "OwnerUserId": "2445184", "LastEditDate": "2014-04-07T19:28:14.363"}, "22919725": {"ViewCount": "158", "Body": "<p>I have become accustomed to the fact that a <strong>const</strong> reference extends the lifetime of a temporary until the reference goes out of scope:</p>\n<pre><code>class X {};\n\n{\n    X const &amp; x = X();\n\n    // Lifetime of x extended to the end of the scope\n    // in which x is declared because it was declared\n    // as a *const* reference\n}\n</code></pre>\n<p>... And I am also aware that a <strong>temporary</strong> lives until the end of the <em>expression</em> in which it is created:</p>\n<pre><code>// Contrived example to make a point about lifetime of a temporary in an expression\n\nclass Y\n{\npublic:\n    Y() : y(5) {}\n    Y &amp; operator+=(int const &amp; rhs)\n    {\n        y += rhs;\n        return *this;\n    }\n    int foo() { return y; }\nprivate:\n    int y;\n};\n\n// n in the following line of code is 11 and the code is valid\n// - the lifetime of the temporary persists to the end of the expression\n\nint n = (Y() += 6).foo();\n</code></pre>\n<p>Assuming I am correct about both of the above, I suspect that it is true that a temporary created in a function argument list will persist for the lifetime of the function call even if it is bound to a <strong>non</strong>-const reference:</p>\n<pre><code>class X {};\nvoid foo(X &amp; x)\n{\n    // x is valid in this function,\n    // even though the parameter is declared\n    // as a *non*-const reference - correct?\n}\n\n// Valid, I think, even though the function parameter\n// is declared as a **non**-const reference\n// - because the lifetime of the temporary persists until the expression\n// is fully evaluated - right?\n\nfoo(X());\n</code></pre>\n<p>I imagine that my experience and understanding is correct - that it is safe to bind the temporary created in the function argument list to the <strong>non</strong>-const reference parameter.</p>\n<p>But I'd like to confirm I am right about this, because I was not able to find this question <em>explicity</em> answered anywhere.</p>\n<p>Thanks!</p>\n", "Title": "Will the lifetime of a temporary created in the argument list to a function taking a *non*-const reference parameter encompass the function call?", "CreationDate": "2014-04-07T17:58:45.017", "LastActivityDate": "2014-04-07T19:28:14.363", "CommentCount": "7", "LastEditDate": "2014-04-07T18:46:01.250", "PostTypeId": "1", "LastEditorUserId": "368896", "Id": "22919725", "Score": "2", "OwnerUserId": "368896", "Tags": "<c++><reference>", "AnswerCount": "2"}, "22920219": {"Id": "22920219", "PostTypeId": "2", "Body": "<p>Sure you are right.</p>\n<p>The standard:</p>\n<blockquote id=\"so_22919725_22920219_0\">\n<h2>12.2 Temporary objects [class.temporary]</h2>\n</blockquote>\n<p>[...]</p>\n<blockquote>\n<p id=\"so_22919725_22920219_1\">There are two contexts in which temporaries are destroyed at a different point than the end of the fullexpression.<br>\n  The first context is when a default constructor is called to initialize an element of an array. If\n  the constructor has one or more default arguments, the destruction of every temporary created in a default\n  argument is sequenced before the construction of the next array element, if any.<br>\n  The second context is when a reference is bound to a temporary. The temporary to which the reference is bound or the temporary that is the complete object of a subobject to which the reference is bound persists for the lifetime of the reference except:<br>\n  \u2014 A temporary bound to a reference member in a constructor\u2019s ctor-initializer (12.6.2) persists until the constructor exits.<br>\n  \u2014 A temporary bound to a reference parameter in a function call (5.2.2) persists until the completion of the full-expression containing the call.<br>\n  \u2014 The lifetime of a temporary bound to the returned value in a function return statement (6.6.3) is not extended; the temporary is destroyed at the end of the full-expression in the return statement.<br>\n  \u2014 A temporary bound to a reference in a new-initializer (5.3.4) persists until the completion of the\n  full-expression containing the new-initializer.</br></br></br></br></br></br></p>\n</blockquote>\n<p>Want to ask the question again using one more level of constructors, and objects storing references?</p>\n", "LastEditorUserId": "3204551", "LastActivityDate": "2014-04-07T18:33:12.927", "CommentCount": "6", "CreationDate": "2014-04-07T18:26:30.650", "ParentId": "22919725", "Score": "3", "OwnerUserId": "3204551", "LastEditDate": "2014-04-07T18:33:12.927"}});