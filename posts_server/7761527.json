post_cb({"bq_ids": {"n4140": {"so_7761527_7761536_1": {"length": 10, "quality": 0.625, "section_id": 5988}, "so_7761527_7761536_0": {"length": 11, "quality": 0.9166666666666666, "section_id": 12}}, "n3337": {"so_7761527_7761536_1": {"length": 15, "quality": 0.9375, "section_id": 5756}, "so_7761527_7761536_0": {"length": 11, "quality": 0.9166666666666666, "section_id": 9}}, "n4659": {"so_7761527_7761536_1": {"length": 10, "quality": 0.625, "section_id": 7488}, "so_7761527_7761536_0": {"length": 11, "quality": 0.9166666666666666, "section_id": 13}}}, "7761536": {"Id": "7761536", "PostTypeId": "2", "Body": "<p>It effectively does not matter. Functions (free functions and static member functions, not non-static member functions) decay to function pointers. No way is more correct than the other, I happen to prefer the explicit one though.</p>\n<p><strong>C++11 Standard, 4.3/1:</strong></p>\n<blockquote>\n<p id=\"so_7761527_7761536_0\">An lvalue of function type T can be converted to a prvalue of type \u201cpointer to T.\u201d The result is a pointer to the function.</p>\n</blockquote>\n<p><strong>C++11 Standard, 5.2.2/1 - Function call:</strong></p>\n<blockquote>\n<p id=\"so_7761527_7761536_1\">There are two kinds of function call: ordinary function call and member function call. A static member function is an ordinary function.</p>\n</blockquote>\n", "LastEditorUserId": "927034", "LastActivityDate": "2011-10-13T23:36:27.537", "Score": "6", "CreationDate": "2011-10-13T23:20:25.103", "ParentId": "7761527", "CommentCount": "4", "OwnerUserId": "927034", "LastEditDate": "2011-10-13T23:36:27.537"}, "7761527": {"ViewCount": "2640", "Body": "<pre><code>class ThreadWorker\n{\npublic:\n    ThreadWorker(void);\n    virtual ~ThreadWorker(void);\n\n    static void DoSomething();\n};\n\n\nint main()\n{\n    boost::thread thread1(ThreadWorker::DoSomething);\n    boost::thread thread2(ThreadWorker::DoSomething);\n    boost::thread thread3(&amp;ThreadWorker::DoSomething);\n}\n</code></pre>\n<p>I'm playing around with Boost.Thread and I notice it doesn't <em>seem</em> to matter whether I use the address of operator (&amp;) or not when passing a static member function as an argument.  Does it not matter?  And if not, why?  Is one way more correct than the other?</p>\n", "AcceptedAnswerId": "7761536", "Title": "Passing static method as argument, no address-of operator required?", "CreationDate": "2011-10-13T23:18:55.343", "Id": "7761527", "CommentCount": "2", "FavoriteCount": "0", "PostTypeId": "1", "LastActivityDate": "2011-10-13T23:36:27.537", "Score": "2", "OwnerUserId": "155268", "Tags": "<c++><static-methods><member-functions><addressof>", "AnswerCount": "1"}});