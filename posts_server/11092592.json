post_cb({"11092678": {"ParentId": "11092592", "CommentCount": "6", "Body": "<p>The error message seems pretty clear: 'this' is an instance of 'struct A' which is an incomplete type (that is the compiler hasn't finished parsing the structure during the current pass). </p>\n", "OwnerUserId": "970543", "PostTypeId": "2", "Id": "11092678", "Score": "1", "CreationDate": "2012-06-18T23:55:36.770", "LastActivityDate": "2012-06-18T23:55:36.770"}, "bq_ids": {"n4140": {"so_11092592_11093653_2": {"section_id": 5951, "quality": 0.6666666666666666, "length": 4}, "so_11092592_11093653_1": {"section_id": 5950, "quality": 0.9444444444444444, "length": 17}, "so_11092592_11093653_0": {"section_id": 5949, "quality": 0.8913043478260869, "length": 41}}, "n3337": {"so_11092592_11093653_2": {"section_id": 5721, "quality": 0.6666666666666666, "length": 4}, "so_11092592_11093653_1": {"section_id": 5720, "quality": 0.9444444444444444, "length": 17}, "so_11092592_11093653_0": {"section_id": 5719, "quality": 0.8913043478260869, "length": 41}}, "n4659": {"so_11092592_11093653_2": {"section_id": 7437, "quality": 0.6666666666666666, "length": 4}, "so_11092592_11093653_1": {"section_id": 7436, "quality": 0.8888888888888888, "length": 16}, "so_11092592_11093653_0": {"section_id": 7435, "quality": 0.8695652173913043, "length": 40}}}, "11092592": {"CommentCount": "0", "ViewCount": "1083", "PostTypeId": "1", "LastEditorUserId": "777186", "CreationDate": "2012-06-18T23:42:28.447", "LastActivityDate": "2012-06-19T11:04:51.383", "Title": "Using the this pointer inside decltype", "AcceptedAnswerId": "11093653", "LastEditDate": "2012-06-19T11:04:51.383", "Id": "11092592", "Score": "15", "Body": "<p><strong>Example</strong> (compiles fine)</p>\n<pre><code>struct A\n{\n    void f() {};\n    auto g() -&gt; decltype(f())\n    {}\n\n};\n</code></pre>\n<p><strong>Question</strong></p>\n<p>If I add the <code>this</code> pointer inside decltype (i.e. <code>decltype(this-&gt;f())</code>), I get the following compile errors with gcc 4.7.0:</p>\n<pre><code>error: invalid use of incomplete type 'struct A'\nerror: forward declaration of 'struct A'\nerror: invalid use of incomplete type 'struct A'\nerror: forward declaration of 'struct A'\n</code></pre>\n<p>Is using <code>this</code> in decltype not allowed? Could someone help me understand what is the problem?</p>\n<p><strong>EDIT</strong></p>\n<p><a href=\"http://gcc.gnu.org/bugzilla/show_bug.cgi?id=53721\" rel=\"nofollow\">This has been filed as a bug</a>.</p>\n", "Tags": "<c++><gcc><c++11><decltype>", "OwnerUserId": "906773", "AnswerCount": "2"}, "11093653": {"ParentId": "11092592", "PostTypeId": "2", "CommentCount": "13", "Body": "<p>It seems the problem isn't that <code>this</code> appears inside a <code>decltype</code>, but that it appears <strong>outside the function body.</strong></p>\n<p>For <strong>example</strong>, this code below compiles under GCC 4.7:</p>\n<pre><code>struct A\n{\n  int f() { return 0; }\n  auto g() -&gt; decltype(f()) {\n    decltype(this-&gt;f()) var = this-&gt;f();\n    return var;\n  }\n};\n</code></pre>\n<p>This uses <code>decltype(this-&gt;f())</code> <em>inside</em> the body of <code>g</code>, but the specification of the return type of the function in the <code>auto .... -&gt; ....</code> form, i.e. the so-called <strong>trailing return type</strong> specification, is <strong>not part of the function body</strong>, and GCC does not allow it there.</p>\n<p><strong>However</strong>, it would appear (see discussion in comments) that the C++ Standard does not actually require <code>this</code> to be used in the function body: \u00a75.1.1 of the standard states that <code>this</code> may be used anywhere between the optional const/volatile qualifier and the end of the function body, see clause 3 below. (For the sake of completeness, I have added clause 4 as well, which talks about data members and is not directly relevant to the question).</p>\n<blockquote>\n<p id=\"so_11092592_11093653_0\">(Clause 3) If a declaration declares a member function or member function template of a class X, the expression <strong>this</strong>\n  is a prvalue of type \u201cpointer to cv-quali\ufb01er-seq X\u201d between the optional cv-qualifer-seq and the end of the\n  function-de\ufb01nition, member-declarator, or declarator. <strong>It shall not appear before the optional cv-quali\ufb01er-seq</strong>\n  and it shall not appear within the declaration of a static member function (although its type and value\n  category are de\ufb01ned within a static member function as they are within a non-static member function). [...]</p>\n<p id=\"so_11092592_11093653_1\">(Clause 4) Otherwise, if a member-declarator declares a non-static <strong>data member</strong> (9.2) of a class X, the expression this\n  is a prvalue of type \u201cpointer to X\u201d <strong>within the optional brace-or-equal-initializer.</strong> It shall not appear elsewhere\n  in the member-declarator.</p>\n<p id=\"so_11092592_11093653_2\">(Clause 5) The expression <strong>this</strong> shall not appear in any other context. [...]</p>\n</blockquote>\n<p>NB: The <em>optional cv-qualifier-seq</em>, i.e. the <code>const</code> or <code>volatile</code> qualifier for the function must, as Jesse points out in the comment, appear <strong><em>before</em> the trailing return type declaration.</strong> Hence using <code>this</code> in the way described in the question should be correct, and <strong>GCC seems to be wrong.</strong></p>\n", "OwnerUserId": "777186", "LastEditorUserId": "777186", "LastEditDate": "2012-06-19T05:33:54.410", "Id": "11093653", "Score": "11", "CreationDate": "2012-06-19T02:33:11.790", "LastActivityDate": "2012-06-19T05:33:54.410"}});