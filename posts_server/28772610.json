post_cb({"28772673": {"ParentId": "28772610", "CommentCount": "0", "Body": "<p>Why don't you do this?</p>\n<pre><code>X(int new_i) :X(new_i, 0){...}\n</code></pre>\n<p>In this way, you will set <code>j</code>-th value to 0, and have only <code>x</code> variable.</p>\n", "OwnerUserId": "3093378", "PostTypeId": "2", "Id": "28772673", "Score": "1", "CreationDate": "2015-02-27T19:20:45.527", "LastActivityDate": "2015-02-27T19:20:45.527"}, "28772717": {"ParentId": "28772610", "CommentCount": "6", "Body": "<p>Just use</p>\n<pre><code>X(int new_i) :  X(new_i, 0) {}\n</code></pre>\n<p>From the C++ Draft Standard N3337 (emphasis mine):</p>\n<blockquote>\n<p id=\"so_28772610_28772717_0\"><strong>12.6.2 Initializing bases and members</strong></p>\n<p id=\"so_28772610_28772717_1\">6 A <code>mem-initializer-list</code> can delegate to another constructor of the constructor\u2019s class using any <code>class-or-decltype</code> that denotes the constructor\u2019s class itself. <strong>If a <code>mem-initializer-id</code> designates the constructor\u2019s class,\n  it shall be the only <code>mem-initializer</code>;</strong></p>\n</blockquote>\n", "OwnerUserId": "434551", "PostTypeId": "2", "Id": "28772717", "Score": "2", "CreationDate": "2015-02-27T19:23:10.590", "LastActivityDate": "2015-02-27T19:23:10.590"}, "28772715": {"ParentId": "28772610", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>You cannot have a delegating constructor <em>and</em> another member-initialiser in the initialiser list. That's not allowed, because the order of initialisation cannot possibly be the order of member declaration, instead some variables will be initialised twice, which is potentially ill-defined.</p>\n<p>If your example were allowed, then the constructor in question would first initialise <code>i</code>&lt;-<code>new_i</code>, then <code>i</code>&lt;--<code>i</code>, then <code>j</code>&lt;--<code>0</code>. With non-<code>const</code> <code>int</code>, this may be feasable, but not with more general types.</p>\n<hr>\n<p>Simply initialise the objects via the delegation:</p>\n<pre><code>class X\n{\npublic:\n  X() = default; \n  X(int ival, int jval) : i{ival}, j{jval} {} \n  X(int ival) : X(ival, 0) {}    \nprivate:\n  int i; \n  int j; \n};\n</code></pre>\n<p>Though in this case, it's better to use default arguments:</p>\n<pre><code>class X\n{\npublic:\n  X() = default; \n  X(int ival, int jval=0) : i{ival}, j{jval} {} \nprivate:\n  int i; \n  int j; \n};\n</code></pre>\n<p>You should also consider to use the <code>explicit</code> keyword for single-argument constructors to avoid unpleasant surprises ... as in</p>\n<pre><code>void foo(X);\nfoo(1);       // calls foo(X(1));\n</code></pre>\n</hr>", "OwnerUserId": "1023390", "LastEditorUserId": "1023390", "LastEditDate": "2015-02-27T19:37:37.423", "Id": "28772715", "Score": "1", "CreationDate": "2015-02-27T19:23:08.660", "LastActivityDate": "2015-02-27T19:37:37.423"}, "bq_ids": {"n4140": {"so_28772610_28772717_1": {"section_id": 433, "quality": 0.8888888888888888, "length": 16}}, "n3337": {"so_28772610_28772717_1": {"section_id": 425, "quality": 0.8888888888888888, "length": 16}}, "n4659": {"so_28772610_28772717_1": {"section_id": 451, "quality": 1.0, "length": 18}}}, "28772610": {"CommentCount": "0", "ViewCount": "53", "PostTypeId": "1", "LastEditorUserId": "3235496", "CreationDate": "2015-02-27T19:16:38.800", "LastActivityDate": "2015-06-13T14:30:39.087", "Title": "re-initialise using delegating constructor", "AcceptedAnswerId": "28772717", "LastEditDate": "2015-06-13T14:30:39.087", "Id": "28772610", "Score": "2", "Body": "<p>I have this class <code>X</code>, using delegating constructor I want to change only the value <code>i</code> and <code>j</code> as 0. Is it possible to do so? </p>\n<pre><code>class X{\npublic:\n    X() = default; \n    X(int ival, int jval) : i{ ival }, j{ jval } {} \n    X(int new_i) : i{ new_i }, X(i, 0) {}    //error here\n\n\nprivate:\n    int i; \n    int j; \n};\n\nint main()\n{\n    X x{ 345, 54 };\n\n    x = X{ 34 };  //annoymous copy changes only the i:member\n    return 0; \n}\n</code></pre>\n<p>EDIT: I know <code>X(int new_int) : X{new_int, 0}</code> will work but i wanted to know what's the error if initialise one more variable in the list.</p>\n<p>May be I have another <code>z</code> and I want to initialise that along with <code>i</code> and <code>j</code>. </p>\n<p>i.e. <code>X(int new_i) :z{ new_i }, X(new_i, 0) {}</code></p>\n", "Tags": "<c++><delegating-constructor>", "OwnerUserId": "4417582", "AnswerCount": "3"}});