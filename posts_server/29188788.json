post_cb({"bq_ids": {"n4140": {"so_29188788_29188959_2": {"length": 8, "quality": 1.0, "section_id": 6664}, "so_29188788_29188959_0": {"length": 19, "quality": 0.9047619047619048, "section_id": 6678}}, "n3337": {"so_29188788_29188959_2": {"length": 8, "quality": 1.0, "section_id": 6419}, "so_29188788_29188959_0": {"length": 19, "quality": 0.9047619047619048, "section_id": 6433}}, "n4659": {"so_29188788_29188959_2": {"length": 8, "quality": 1.0, "section_id": 8139}, "so_29188788_29188959_0": {"length": 19, "quality": 0.9047619047619048, "section_id": 8153}}}, "29188788": {"ViewCount": "51", "Body": "<p>I was looking at this question below at the back of my book and it got me a little confused. this would be false right?</p>\n<p>In private inheritance, all public and protected members of the base class can be accessed in the derived class, but are not accessible through the derived class.</p>\n", "Title": "Private inheritance and access", "CreationDate": "2015-03-21T22:28:38.933", "LastActivityDate": "2015-03-21T22:48:49.833", "CommentCount": "3", "PostTypeId": "1", "Id": "29188788", "Score": "0", "OwnerUserId": "3225981", "Tags": "<c++>", "AnswerCount": "3"}, "29188959": {"Id": "29188959", "PostTypeId": "2", "Body": "<p>That is by definition what private inheritance is. For example, N4140 explains:</p>\n<blockquote>\n<p id=\"so_29188788_29188959_0\">\u00a711.2/1 [...] If a class is declared to be a base class for another\n  class using the <code>private</code> access specifier, the <code>public</code> and\n  <code>protected</code> members of the base class are accessible as <code>private</code>\n  members of the derived class<sup>115</sup>.</p>\n</blockquote>\n<p>Furthermore,</p>\n<blockquote>\n<p id=\"so_29188788_29188959_1\">\u00a711/1  A member of a class can be</p>\n<p id=\"so_29188788_29188959_2\">\u2014 <code>private</code>; that is, its name can be used only by members and friends\n  of the class in which it is declared.</p>\n</blockquote>\n<p>The phrase \"but are not accessible through the derived class.\" is a little vague, but if the intended meaning is \"can't be accessed outside of the derived class except for <code>friend</code>s\", then it's true.</p>\n<p>Note: read the access specifier as appertaining to inheritance. i.e., private inheritance means what it inherits is private, not that it inherits private members.</p>\n", "OwnerDisplayName": "user3920237", "LastActivityDate": "2015-03-21T22:48:49.833", "Score": "1", "CreationDate": "2015-03-21T22:48:49.833", "ParentId": "29188788", "CommentCount": "0"}, "29188855": {"Id": "29188855", "PostTypeId": "2", "Body": "<p>This is true. The subclass can use base class methods internally. But the methods of the base class would not be accessible from an instance of the derived class.</p>\n<pre><code>void Subclass::baseClassMethodOverride()\n{\n    useBaseClassMethod(); //&lt;---- ALLOWED\n}\n\nint main()\n{\n    SubClass instance;\n    instance.useBaseClassMethod(); //&lt;-----NOT ALLOWED\n}\n</code></pre>\n", "LastActivityDate": "2015-03-21T22:37:30.267", "CommentCount": "0", "CreationDate": "2015-03-21T22:37:30.267", "ParentId": "29188788", "Score": "1", "OwnerUserId": "1519323"}, "29188856": {"Id": "29188856", "PostTypeId": "2", "Body": "<p>That's true. </p>\n<p>If you have a <code>public</code> or <code>protected</code> member you can access them in the derived class irregardless of the access modifier of the inheritance</p>\n", "LastActivityDate": "2015-03-21T22:37:49.157", "CommentCount": "0", "CreationDate": "2015-03-21T22:37:49.157", "ParentId": "29188788", "Score": "1", "OwnerUserId": "496223"}});