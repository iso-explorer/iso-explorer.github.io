post_cb({"bq_ids": {"n4140": {"so_12721584_12721722_0": {"length": 9, "quality": 0.5625, "section_id": 7027}, "so_12721584_12721584_1": {"length": 31, "quality": 0.8857142857142857, "section_id": 6307}, "so_12721584_12721584_2": {"length": 30, "quality": 0.8571428571428571, "section_id": 668}}, "n3337": {"so_12721584_12721722_0": {"length": 9, "quality": 0.5625, "section_id": 6773}, "so_12721584_12721584_1": {"length": 31, "quality": 0.8857142857142857, "section_id": 6064}, "so_12721584_12721584_2": {"length": 30, "quality": 0.8571428571428571, "section_id": 658}}, "n4659": {"so_12721584_12721722_0": {"length": 9, "quality": 0.5625, "section_id": 8524}, "so_12721584_12721584_1": {"length": 22, "quality": 0.6285714285714286, "section_id": 6756}, "so_12721584_12721584_2": {"length": 30, "quality": 0.8571428571428571, "section_id": 696}}}, "12721584": {"ViewCount": "1051", "Body": "<p>In C++11, we get user-defined literals. The C++ standard has examples of these, such as:</p>\n<pre><code>long double operator \"\" _w(long double);\n</code></pre>\n<p>And it says the literal should start with an underscore:</p>\n<blockquote>\n<p id=\"so_12721584_12721584_0\"><strong>17.6.4.3.5 User-de\ufb01ned literal su\ufb03xes</strong><br>\n  Literal su\ufb03x identi\ufb01ers that do not start with an underscore are reserved for future standardization.</br></p>\n</blockquote>\n<p>However, there's another section in the standard that says</p>\n<blockquote>\n<p id=\"so_12721584_12721584_1\"><strong>17.6.4.3.2 Global names</strong><br>\n  Certain sets of names and function signatures are always reserved to the implementation:<br>\n  \u2014 Each name that contains a double underscore _ _ or begins with an underscore followed by an uppercase letter (2.12) is reserved to the implementation for any use.<br>\n  \u2014 Each name that begins with an underscore is reserved to the implementation for use as a name in the global namespace.</br></br></br></p>\n</blockquote>\n<p>I'm looking to better understand exactly what 17.6.4.3.2 (Global names) says/means and how it relates to 17.6.4.3.5 (User-de\ufb01ned literal su\ufb03xes). Specifically:</p>\n<ul>\n<li>Does the second part of 17.6.4.3.2 (Global names) require user-defined literals (like the above <code>_w</code>) to be defined in a namespace (that is, not in the global namespace)? If so, I wish the standard would've illustrated this.</li>\n<li>I presume that the first part of 17.6.4.3.2 (Global names) rules out user-defined literals like <code>_W</code> (followed by upper case) and <code>__w</code> and <code>_w__</code> (two consecutive underscores). Correct?</li>\n</ul>\n<hr>\n<p><strong>Edit:</strong></p>\n<p>As a follow up, there's a part of the standard that says:</p>\n<blockquote>\n<p id=\"so_12721584_12721584_2\"><strong>13.5.8 User-de\ufb01ned literals</strong><br>\n  [...]<br>\n  2 <em>A declaration whose declarator-id is a literal-operator-id shall be a declaration of a namespace-scope function or function template (it could be a friend function (11.3))</em>, an explicit instantiation or specialization of a function template, or a using-declaration (7.3.3). A function declared with a literal-operator-id is a literal operator. A function template declared with a literal-operator-id is a literal operator template.</br></br></p>\n</blockquote>\n<p>Emphasis mine. When it says \"namespace-scope\" does that mean user-defined literals need to be declared in a user-defined namespace (i.e. not in the global namespace)?</p>\n<p><strong>Later edit:</strong></p>\n<p>It did not exist when the question was first asked, but now there is also <a href=\"https://stackoverflow.com/q/13793996/1275653\">this related question and answer,</a> which readers can additionally check after reviewing the answers below.</p>\n</hr>", "AcceptedAnswerId": "12721722", "Title": "User-defined literals, underscores, and global names", "CreationDate": "2012-10-04T06:36:05.417", "Id": "12721584", "CommentCount": "5", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2017-05-23T11:56:17.610", "LastEditorUserId": "-1", "LastActivityDate": "2012-12-10T16:46:56.220", "Score": "7", "OwnerUserId": "1287251", "Tags": "<c++><c++11>", "AnswerCount": "1"}, "12721722": {"Id": "12721722", "PostTypeId": "2", "Body": "<p>What's in a name? 3 Basic concepts [basic] tells us:</p>\n<blockquote>\n<p id=\"so_12721584_12721722_0\">4 A name is a use of an identifier (2.11), operator-function-id (13.5), literal-operator-id (13.5.8), conversion-function-id (12.3.2), or template-id (14.2) that denotes an entity or label (6.6.4, 6.1).</p>\n</blockquote>\n<p>which we cross-reference with 13.5.8 User-defined literals [over.literal]:</p>\n<blockquote>\n<p id=\"so_12721584_12721722_1\"><em>literal-operator-id</em>:<br/>\n<code>operator \"\"</code> identifier</p>\n</blockquote>\n<p>While the name of a literal operator involves an identifier, that identifier does not denote an entity. (Or it's a different identifier and different name that denotes another entity or label altogether.) As such the name of a literal operator never starts with an underscore.</p>\n<p>Something like <code>operator\"\"__w</code> <em>is</em> problematic but this is not new: <code>int i__0;</code> is reserved as well.</p>\n", "LastEditorUserId": "726300", "LastActivityDate": "2012-10-04T06:58:59.290", "Score": "7", "CreationDate": "2012-10-04T06:47:11.807", "ParentId": "12721584", "CommentCount": "12", "OwnerUserId": "726300", "LastEditDate": "2012-10-04T06:58:59.290"}});