post_cb({"bq_ids": {"n4140": {"so_18819849_18819935_1": {"length": 26, "quality": 1.0, "section_id": 5356}}, "n3337": {"so_18819849_18819935_1": {"length": 26, "quality": 1.0, "section_id": 5153}}, "n4659": {"so_18819849_18819935_1": {"length": 26, "quality": 1.0, "section_id": 6781}}}, "18819849": {"ViewCount": "145", "Body": "<p>My question is:</p>\n<p><strong>Is there a way to determine whether a parameter is a literal string or not?</strong></p>\n<pre><code>template&lt;class T&gt;\nbool IsLiteral(T arg)\n{\n    // How to implement?\n}\n</code></pre>\n<p>or</p>\n<pre><code>template&lt;class T&gt;\nstruct IsLiteral { enum { value = ??? }; };\n</code></pre>\n<p>So that we can write the following code:</p>\n<pre><code>char* p = \"Hello\";\n\nassert(IsLiteral(p)); // fail.\nassert(IsLiteral(\"Hello\")); // never fail.\nassert(IsLiteral&lt;decltype(\"Hello\")&gt;::value); // never fail.\n</code></pre>\n", "Title": "Is there a way to determine if a parameter is a literal string?", "CreationDate": "2013-09-16T03:00:37.837", "Id": "18819849", "CommentCount": "7", "LastEditDate": "2013-09-16T03:07:44.363", "PostTypeId": "1", "LastEditorUserId": "319403", "LastActivityDate": "2013-09-16T03:16:52.200", "Tags": "<c++><string><literals><typetraits>", "Score": "0", "OwnerUserId": "508343", "ClosedDate": "2013-09-16T06:57:43.193", "AnswerCount": "3"}, "18819867": {"Id": "18819867", "PostTypeId": "2", "Body": "<p>String literal is a source code term. Once the code is compiled it assign/loaded into a memory location.  The code using the its value doesn't care or know if it created at runtime or compiled time. </p>\n", "LastActivityDate": "2013-09-16T03:04:09.210", "CommentCount": "0", "CreationDate": "2013-09-16T03:04:09.210", "ParentId": "18819849", "Score": "0", "OwnerUserId": "256728"}, "18819935": {"Id": "18819935", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_18819849_18819935_0\">Is there a way to determine whether a parameter is a literal string or not?</p>\n</blockquote>\n<p>I don't think so, a string literal is prepocessing token and will be  turned into a array of const char, so you won't be able to distinguish if such as array came from a string literal or not. If we look at the C++ draft standard section <code>2.14.5</code> <em>String literals</em> paragraph <em>8</em> says:</p>\n<blockquote>\n<p id=\"so_18819849_18819935_1\"><strong>Ordinary string literals</strong> and UTF-8 string literals are also referred to as narrow string literals. A narrow string literal <strong>has type \u201carray of n const char\u201d</strong>, where n is the size of the string as defined below, and has static storage duration</p>\n</blockquote>\n", "LastActivityDate": "2013-09-16T03:16:52.200", "CommentCount": "0", "CreationDate": "2013-09-16T03:16:52.200", "ParentId": "18819849", "Score": "0", "OwnerUserId": "1708801"}, "18819878": {"Id": "18819878", "PostTypeId": "2", "Body": "<p>There is no way to detect string literals. What can be detected is that argument is a fixed size array of <code>char const</code>:</p>\n<pre><code>template &lt;std::size_t N&gt;\nbool IsLiteral(char const (&amp;)[N]) {\n    return true;\n}\ntemplate &lt;std::size_t N&gt;\nbool IsLiteral(char (&amp;)[N]) {\n    return false;\n}\ntemplate &lt;typename T&gt;\nbool IsLiteral(T) {\n    return false;\n}\n</code></pre>\n<p>I don't think you can distinguish between these two uses, however:</p>\n<pre><code>char const array[] = { 'a' };\nIsLiteral(array);\nIsLiteral(\"foo\");\n</code></pre>\n", "LastActivityDate": "2013-09-16T03:05:47.903", "CommentCount": "1", "CreationDate": "2013-09-16T03:05:47.903", "ParentId": "18819849", "Score": "0", "OwnerUserId": "1120273"}});