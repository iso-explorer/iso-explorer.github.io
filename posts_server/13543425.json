post_cb({"bq_ids": {"n4140": {"so_13543425_13543462_0": {"length": 8, "quality": 1.0, "section_id": 57}, "so_13543425_13543462_1": {"length": 9, "quality": 1.0, "section_id": 60}}, "n3337": {"so_13543425_13543462_0": {"length": 8, "quality": 1.0, "section_id": 52}, "so_13543425_13543462_1": {"length": 9, "quality": 1.0, "section_id": 55}}, "n4659": {"so_13543425_13543462_0": {"length": 8, "quality": 1.0, "section_id": 59}, "so_13543425_13543462_1": {"length": 7, "quality": 0.7777777777777778, "section_id": 62}}}, "13543462": {"Id": "13543462", "PostTypeId": "2", "Body": "<p>You simply cannot have a template parameter of type <code>std::string</code>. The rules for non-type template parameters are defined by the standard as follows (\u00a714.1/4):</p>\n<blockquote>\n<p id=\"so_13543425_13543462_0\">A non-type <em>template-parameter</em> shall have one of the following (optionally <em>cv-qualified</em>) types:</p>\n<ul>\n<li>integral or enumeration type,  </li>\n<li>pointer to object or pointer to function,</li>\n<li>lvalue reference to object or lvalue reference to function,</li>\n<li>pointer to member,</li>\n<li><code>std::nullptr_t</code>.</li>\n</ul>\n</blockquote>\n<p>In addition (\u00a714.1/7):</p>\n<blockquote>\n<p id=\"so_13543425_13543462_1\">A non-type <em>template-parameter</em> shall not be declared to have floating point, class, or void type.</p>\n</blockquote>\n<p>As <code>std::string</code> is a class type, your instantiation of <code>foo</code> is not allowed.</p>\n", "LastEditorUserId": "150634", "LastActivityDate": "2012-11-24T17:14:06.570", "Score": "8", "CreationDate": "2012-11-24T17:07:17.530", "ParentId": "13543425", "CommentCount": "1", "OwnerUserId": "150634", "LastEditDate": "2012-11-24T17:14:06.570"}, "13543425": {"ViewCount": "550", "Body": "<blockquote>\n<p id=\"so_13543425_13543425_0\"><strong>Possible Duplicate:</strong><br>\n<a href=\"https://stackoverflow.com/questions/1826464/strings-as-template-arguments\">Strings as template arguments?</a> </br></p>\n</blockquote>\n<p>Why the first declaration is OK but the second is not? Why <code>std::string</code> is not suitable?</p>\n<pre><code>template &lt;typename T, T x&gt; struct foo { };\n\nusing namespace std;\n\nint main()\n{\n    foo&lt;int, 0&gt; f_int;              // ok\n    foo&lt;string, \"\"&gt; f_string;      // not ok\n}\n</code></pre>\n<p>I get:</p>\n<pre><code>error: a non-type template parameter cannot have type 'std::basic_string&lt;char&gt;'\n</code></pre>\n<p>using clang++.</p>\n", "AcceptedAnswerId": "13543462", "Title": "Template argument string vs. int", "CreationDate": "2012-11-24T17:03:42.273", "Id": "13543425", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2017-05-23T10:24:43.400", "LastEditorUserId": "-1", "LastActivityDate": "2012-11-24T17:14:06.570", "ClosedDate": "2012-11-25T23:55:12.823", "Score": "3", "OwnerUserId": "684534", "Tags": "<c++><templates>", "AnswerCount": "2"}, "13543460": {"Id": "13543460", "PostTypeId": "2", "Body": "<p>Because a non-type template parameter (ugly name for \"value\") should be computable at compile time and <code>std::string</code> is not (it may require dynamic memory allocation thus its constructor is not <code>constexpr</code>).</p>\n", "LastActivityDate": "2012-11-24T17:07:10.377", "CommentCount": "0", "CreationDate": "2012-11-24T17:07:10.377", "ParentId": "13543425", "Score": "5", "OwnerUserId": "147192"}});