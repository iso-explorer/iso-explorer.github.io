post_cb({"bq_ids": {"n4140": {"so_17177386_17178402_1": {"length": 8, "quality": 1.0, "section_id": 3376}, "so_17177386_17177386_0": {"length": 11, "quality": 1.0, "section_id": 399}, "so_17177386_17178402_2": {"length": 19, "quality": 1.0, "section_id": 404}, "so_17177386_17177386_1": {"length": 10, "quality": 0.8333333333333334, "section_id": 3376}}, "n3337": {"so_17177386_17178402_1": {"length": 7, "quality": 0.875, "section_id": 3246}, "so_17177386_17177386_0": {"length": 11, "quality": 1.0, "section_id": 390}, "so_17177386_17178402_2": {"length": 19, "quality": 1.0, "section_id": 395}, "so_17177386_17177386_1": {"length": 9, "quality": 0.75, "section_id": 3246}}, "n4659": {"so_17177386_17178402_2": {"length": 19, "quality": 1.0, "section_id": 422}}}, "17177386": {"ViewCount": "1391", "Body": "<p>Consider the following program:</p>\n<pre><code>#include &lt;type_traits&gt;\n\nstruct Thrower\n{\n    ~Thrower() noexcept(false) { throw 1; }\n};\n\nstruct Implicit\n{\n    Thrower t;\n};\nstatic_assert(!std::is_nothrow_destructible&lt;Implicit&gt;::value, \"Implicit\");\n\nstruct Explicit\n{\n    ~Explicit() {}\n\n    Thrower t;\n};\nstatic_assert(!std::is_nothrow_destructible&lt;Explicit&gt;::value, \"Explicit\");\n</code></pre>\n<p>With <code>g++-4.8.1</code>, there is a static assertion failure on <code>Explicit</code> -- it seems to think that <code>~Explicit()</code> is <code>noexcept</code>. This does not match my expectations. According to \u00a712.4.3:</p>\n<blockquote>\n<p id=\"so_17177386_17177386_0\">A declaration of a destructor that does not have an exception-specification is implicitly\n  considered to have the same exception-specification as an implicit declaration</p>\n</blockquote>\n<p>The funny thing here is the check of <code>Implicit</code> seems to be behaving according to my interpretation of \u00a715.4.14 (through \u00a712.4.7).</p>\n<blockquote>\n<p id=\"so_17177386_17177386_1\">...If <em>f</em> is an...destructor...it's implicit exception-specification specifies...f has the exception-specification <code>noexcept(true)</code> if every function it directly invokes allows no exceptions.</p>\n</blockquote>\n<p><code>g++-4.7</code> lacks <code>is_nothrow_destructable</code>, I wrote my own to check the behavior in 4.7. The program seems to compile perfectly fine. I reserve the right for this to be completely wrong and the source of my confusion:</p>\n<pre><code>template &lt;typename T&gt;\nstruct is_nothrow_destructible\n{\n    static constexpr bool value = noexcept(std::declval&lt;T&gt;().~T());\n};\n</code></pre>\n<p><strong>TL;DR:</strong> Why does <code>g++-4.8.1</code> think that an explicitly-declared destructor with no exception specification is <em>always</em> <code>noexcept(true)</code>?</p>\n<hr>\n<p><strong>Update</strong>: I opened a bug on this: <a href=\"http://gcc.gnu.org/bugzilla/show_bug.cgi?id=57645\" rel=\"nofollow\">57645</a>. If you really need to work around this issue, you can add an exception specification to the destructor (like <code>Thrower</code> has in the example).</p>\n</hr>", "AcceptedAnswerId": "17178402", "Title": "g++-4.8.1 thinks that an explicitly-declared destructor with no exception specification is always noexcept(true)", "CreationDate": "2013-06-18T19:35:18.193", "Id": "17177386", "CommentCount": "2", "FavoriteCount": "3", "PostTypeId": "1", "LastEditDate": "2013-06-19T16:06:29.733", "LastEditorUserId": "254306", "LastActivityDate": "2013-06-19T16:06:29.733", "Score": "16", "OwnerUserId": "254306", "Tags": "<c++><c++11><noexcept>", "AnswerCount": "1"}, "17178402": {"Id": "17178402", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_17177386_17178402_0\">TL;DR: Why does g++-4.8.1 think that an explicitly-declared destructor with no exception specification is always <code>noexcept(true)</code>?</p>\n</blockquote>\n<p>Because it has a bug?</p>\n<p>Your interpretation of the standard is correct, and Clang implements it correctly (the assert doesn't fire).</p>\n<blockquote>\n<p id=\"so_17177386_17178402_1\"><code>f</code> has the exception-specification <code>noexcept(true)</code> if <strong>every function it directly invokes</strong> allows no exceptions.</p>\n</blockquote>\n<p>A destructor directly invokes the destructor of all subobjects:</p>\n<p><code>\u00a712.4 [class.dtor] p8</code>:</p>\n<blockquote>\n<p id=\"so_17177386_17178402_2\">After executing the body of the destructor and destroying any automatic objects allocated within the body, <strong>a destructor for class <code>X</code> calls the destructors for X\u2019s direct non-variant non-static data members</strong>, [...].</p>\n</blockquote>\n", "LastActivityDate": "2013-06-18T20:34:20.870", "CommentCount": "2", "CreationDate": "2013-06-18T20:34:20.870", "ParentId": "17177386", "Score": "7", "OwnerUserId": "500104"}});