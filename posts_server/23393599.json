post_cb({"23395451": {"ParentId": "23393599", "CommentCount": "0", "Body": "<p>For posterity's sake, adding WhozCraig's solution here:</p>\n<pre><code>class ArgumentException : public std::runtime_error\n{\nprivate:\n    static std::string mkmsg(const char *fmt, ...)\n    {\n        char buffer[2048];\n        va_list args;\n        va_start ( args, fmt );\n        int writtenCount = vsnprintf( buffer, 2048, fmt, args );\n        va_end ( args );\n        if (writtenCount&lt;=0)\n            *buffer = 0;\n        return buffer;\n    }\n\npublic:\n    template&lt;class... Args&gt;\n    ArgumentException(const char* fmt, Args&amp;&amp;... args )\n        : std::runtime_error( mkmsg(fmt, std::forward&lt;Args&gt;(args)... ) )\n    {\n    }\n};\n</code></pre>\n", "OwnerUserId": "3590173", "PostTypeId": "2", "Id": "23395451", "Score": "0", "CreationDate": "2014-04-30T18:28:16.093", "LastActivityDate": "2014-04-30T18:28:16.093"}, "23394361": {"ParentId": "23393599", "CommentCount": "7", "Body": "<p>I don't recommend doing this, so this is more just an exercise in whether or not it is possible to write a conforming implementation without a variadic template. I think this is, though it's not elegant or pretty:</p>\n<pre><code>#include &lt;stdexcept&gt;\n#include &lt;cstdarg&gt;\n\nstd::string\nhelper(const char *fmt, va_list args) {\n    char buffer[2048];\n    int writtenCount = vsnprintf(buffer, sizeof buffer, fmt, args);\n    va_end(args);\n    return std::string(buffer);\n}\n\nclass ArgumentException : public std::runtime_error {\n    public:\n       ArgumentException(const char* fmt, ...)\n           : std::runtime_error(helper(fmt, (va_start(args, fmt), args))) { }\n    private:\n        va_list args;\n};\n</code></pre>\n<p>By the way, the original attempt gave me an error in g++, claiming that I was using va_start in a function with fixed arguments, which is correct, I believe.</p>\n", "OwnerUserId": "3521733", "PostTypeId": "2", "Id": "23394361", "Score": "2", "CreationDate": "2014-04-30T17:23:16.433", "LastActivityDate": "2014-04-30T17:23:16.433"}, "23393599": {"CommentCount": "3", "AcceptedAnswerId": "23393988", "PostTypeId": "1", "LastEditorUserId": "3590173", "CreationDate": "2014-04-30T16:39:08.073", "LastActivityDate": "2014-04-30T18:28:16.093", "LastEditDate": "2014-04-30T16:49:09.470", "ViewCount": "635", "FavoriteCount": "1", "Title": "Variable arguments into lambda expression", "Id": "23393599", "Score": "5", "Body": "<p>Is the following usage of a lambda wrong, fragile, or silly? It works on VC++ 2012, but I am concerned that there are some variable-argument/lambda stack interactions that make this dangerous.</p>\n<pre><code>class\nArgumentException : public std::runtime_error\n{\npublic:\n   ArgumentException( \n      const char* format_,\n      ... )\n      : std::runtime_error(\n         [&amp;]()\n         { \n            char buffer[2048];\n            va_list arguments;\n            va_start ( arguments, format_ );  \n            int writtenCount = vsnprintf( buffer, 2048, format_, arguments );\n            va_end ( arguments );\n            return std::string(buffer); \n         }() )\n   {\n   }\n};\n</code></pre>\n", "Tags": "<c++><exception><lambda><variadic-functions>", "OwnerUserId": "3590173", "AnswerCount": "3"}, "23393988": {"ParentId": "23393599", "PostTypeId": "2", "CommentCount": "11", "Body": "<p>The C++11 standard explicitly makes <code>va_list</code> and the supporting macros available through <code>&lt;cstdarg&gt;</code> (\u00a718.10, table 37) but makes no attempt to restrict their use or (re)define their meaning, so I'm going to turn to the C standard.</p>\n<p>\u00a77.15.1.4 says that:</p>\n<blockquote>\n<p id=\"so_23393599_23393988_0\"><strong><code>void va_start(va_list ap,</code></strong> <em>parmN</em> <strong><code>);</code></strong></p>\n<p id=\"so_23393599_23393988_1\">The parameter <em>parmN</em> is the identifier of the rightmost parameter in the variable parameter list in the function definition (the one just before the <strong><code>, ...</code></strong>). If the parameter <em>parmN</em> is declared with the <strong><code>register</code></strong> storage class, with a function or array type, or with a type that is not compatible with the type that results after application of the default argument promotions, the behavior is undefined.</p>\n</blockquote>\n<p>In your case, <code>format_</code> is not an argument (it's a captured variable in your lambda) and the function in which <code>va_start</code> is called is not even the one with the variable parameter list, so you're arguably very much in the realm of undefined behavior. Not to mention that the argument promotion rules of the C language can't deal with reference types, and therefore it can't correctly deal with the fact that <code>format_</code> is a reference, not a straight-up pointer.</p>\n<p><strike>As far as I know, it's syntactically infeasible to use variadic parameters in a constructor's initializer list.</strike> (<a href=\"https://stackoverflow.com/a/23394361/251153\">See this guy below who did it.</a>) You could, however, use variadic templates to forward the parameters to a \"clean\" C-style variadic parameters function:</p>\n<pre><code>#include &lt;cstdarg&gt;\n#include &lt;cstdio&gt;\n#include &lt;string&gt;\n\nstd::string stringprintf(const char* format, ...)\n{\n    char buffer[0x2000];\n    va_list ap;\n    va_start(ap, format);\n    vsnprintf(buffer, sizeof buffer, format, ap);\n    va_end(ap);\n    return buffer;\n}\n\nclass ArgumentException : public std::runtime_error\n{\npublic:\n    template&lt;typename... T&gt;\n    ArgumentException(const char* format, T... arguments)\n    : std::runtime_error(stringprintf(format, arguments...))\n    { }\n};\n</code></pre>\n<p>Also consider using <code>&lt;stdexcept&gt;</code>'s <code>invalid_argument</code> exception subclass.</p>\n", "OwnerUserId": "251153", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T11:50:21.740", "Id": "23393988", "Score": "4", "CreationDate": "2014-04-30T17:01:24.553", "LastActivityDate": "2014-04-30T17:37:12.893"}, "bq_ids": {"n4140": {"so_23393599_23393988_1": {"section_id": 6966, "quality": 0.6764705882352942, "length": 23}}, "n3337": {"so_23393599_23393988_1": {"section_id": 6713, "quality": 0.7647058823529411, "length": 26}}, "n4659": {"so_23393599_23393988_1": {"section_id": 8465, "quality": 0.6470588235294118, "length": 22}}}});