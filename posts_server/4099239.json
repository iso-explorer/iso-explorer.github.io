post_cb({"4099303": {"ParentId": "4099239", "CommentCount": "0", "Body": "<p>If you don't change the string, then you should use const char*. The user can still send you a non const char and it will be fine, but he will know that you don't change the string.\nMore over, it is more recommened so the user will be able to use your function on a const strings, or const instances of classes will be able to use your function and so on.</p>\n", "OwnerUserId": "494815", "PostTypeId": "2", "Id": "4099303", "Score": "0", "CreationDate": "2010-11-04T17:14:58.480", "LastActivityDate": "2010-11-04T17:14:58.480"}, "bq_ids": {"n4140": {"so_4099239_4100093_0": {"section_id": 3241, "quality": 0.5972222222222222, "length": 43}}, "n3337": {"so_4099239_4100093_0": {"section_id": 3114, "quality": 0.5972222222222222, "length": 43}}, "n4659": {"so_4099239_4100093_0": {"section_id": 3997, "quality": 0.5277777777777778, "length": 38}}}, "4100093": {"ParentId": "4099239", "CommentCount": "0", "Body": "<p>In a function declaration that takes an argument by value, any const-qualification on the argument will be discarded by the compiler, and as such I would not provide them as they are <em>uncommon</em> and as such will be surprising, but will have no effect (and force you to type 6 more characters).</p>\n<pre><code>void foo( const char * );\nvoid foo( const char * const );\n</code></pre>\n<p>The previous two lines are two declarations of a single function <code>foo</code> that takes a pointer to a char by value. This is quite different from const qualifying the <em>pointed-to</em> type, or a reference (where the qualification, again, is to the referred element), as in the first const in those two declarations.</p>\n<p>There is a difference when defining the function, in that in the later case the compiler will enforce that the argument (copy of what the caller passed in) will be guaranteed not to be modified internally. The common pattern is not writing the <code>const</code> there either, but some people will add that qualification:</p>\n<pre><code>// foo.h\nvoid foo( const char* );            // declaration [1]\n// foo.cpp\nvoid foo( const char * const x ) {  // definition of [1]\n   //...\n}\n</code></pre>\n<p>Note that while the signatures might look different, for the compiler they are exactly the same, the second <code>const</code> is a requirement on the code inside the definition, not part of the function interface. The appropriate quote from the standard is in \u00a78.3.5 [dcl.fct]/3:</p>\n<blockquote>\n<p id=\"so_4099239_4100093_0\">[...] The type of a function is determined using the following rules. The type of each parameter is determined from its own decl-specifier-seq and declarator. After determining the type of each parameter, any parameter of type \u201carray of T\u201d or \u201cfunction returning T\u201d is adjusted to be \u201cpointer to T\u201d or \u201cpointer to function returning T,\u201d respectively. After producing the list of parameter types, several transformations take place upon these types to determine the function type. <strong>Any cv-qualifier modifying a parameter type is deleted.</strong> <em>[Example: the type <code>void(*)(const int)</code> becomes <code>void(*)(int)</code> \u2014end example]</em> <strong>Such cv-qualifiers affect only the definition of the parameter within the body of the function; they do not affect the function type.</strong> </p>\n</blockquote>\n", "OwnerUserId": "36565", "PostTypeId": "2", "Id": "4100093", "Score": "1", "CreationDate": "2010-11-04T18:45:50.420", "LastActivityDate": "2010-11-04T18:45:50.420"}, "4099261": {"ParentId": "4099239", "CommentCount": "0", "Body": "<p>The point of the const char* tag is to indicate to the user of your library that your function will not modify the char* value being sent to your function.  This however, doesn't guarantee a function won't modify the pointer because of const casting and other kinds of hackery.</p>\n", "OwnerUserId": "398060", "PostTypeId": "2", "Id": "4099261", "Score": "0", "CreationDate": "2010-11-04T17:11:22.627", "LastActivityDate": "2010-11-04T17:11:22.627"}, "4099271": {"ParentId": "4099239", "CommentCount": "3", "Body": "<p>Making something const does not mean that you won't get a bad pointer.  There's nothing you can do to guard yourself against that.  You can check for NULL, but not a freed pointer or a corrupted one.</p>\n<p>What const says is that your function promises not to change the data that is pointed to.  That's useful for the caller to know.  Also, in cases where the caller only has access to const pointers, you are saving them a cast or copy to call your function.</p>\n<p>The normal usage is</p>\n<pre><code> void makeCode(const char* s);\n</code></pre>\n<p>Which means that the values pointed to by s won't be changed.</p>\n", "OwnerUserId": "3937", "PostTypeId": "2", "Id": "4099271", "Score": "6", "CreationDate": "2010-11-04T17:12:02.190", "LastActivityDate": "2010-11-04T17:12:02.190"}, "4099239": {"CommentCount": "0", "ViewCount": "119", "CreationDate": "2010-11-04T17:08:43.003", "LastActivityDate": "2010-11-04T18:45:50.420", "Title": "const question when used in API", "AcceptedAnswerId": "4099271", "PostTypeId": "1", "Id": "4099239", "Score": "0", "Body": "<p>I have a char * that is actually 10 digit string. I basically take that in my function and spit out a code. Now i have made a static lib that i will share with someone else...the question is ( i am using c++)</p>\n<p>for the definition of that api that i will provide in my header \ndo i just put const char * const or not. I am not sure if i need to do it or not. I just figured if they were going to use that API I did not want them to by mistake in their code send some bad pointer or value to my code. so to protect myself i am making it like i stated above is that the right approach? is that how one would use const?</p>\n", "Tags": "<c++>", "OwnerUserId": "245823", "AnswerCount": "5"}, "4099341": {"ParentId": "4099239", "PostTypeId": "2", "CommentCount": "3", "CreationDate": "2010-11-04T17:20:35.400", "Score": "3", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T11:56:09.423", "Id": "4099341", "OwnerUserId": "241631", "Body": "<p>Adding to Lou Franco's <a href=\"https://stackoverflow.com/questions/4099239/const-question-when-used-in-api/4099271#4099271\">answer</a>, if you were to declare the function as:</p>\n<pre><code>void makeCode(const char* const s);\n</code></pre>\n<p>the second <code>const</code> indicates that you will not \"reposition\" <code>s</code> within your function. This means you can't do <code>s++;</code> or <code>s = anotherPtr;</code>. IMO, that is not as important a guarantee as the one provided by the first <code>const</code> to the users of your library.</p>\n", "LastActivityDate": "2010-11-04T17:20:35.400"}});