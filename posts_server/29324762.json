post_cb({"29324792": {"ParentId": "29324762", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>I think (but am not absolutely sure, i.e. don't know the exact quote from the standard, although will try to find) that if the argument does not match exactly the type of the non-template, then the template will kick in. Or, in other words, the number of conversions tends to be minimized. E.g., in </p>\n<pre><code>f(long)\n</code></pre>\n<p>vs </p>\n<pre><code>template &lt;typename T&gt;\nf(T)\n</code></pre>\n<p><code>f(long)</code> needs a conversion (from <code>0</code>, e.g.<code>int</code>, to <code>long</code>), whereas no conversion is needed (of course) for the template.</p>\n<p>After some digging and help from @T.C., the relevant part of the standard is Sec. 13.3.3, [over.match.best]. This is quite a long technical section, but basically says that the function with the <code>Identity</code> conversion is preferred over non-<code>Identity</code> conversions.</p>\n", "OwnerUserId": "3093378", "LastEditorUserId": "3093378", "LastEditDate": "2015-03-29T02:14:28.867", "Id": "29324792", "Score": "0", "CreationDate": "2015-03-29T01:55:38.910", "LastActivityDate": "2015-03-29T02:14:28.867"}, "29324827": {"ParentId": "29324762", "CommentCount": "0", "Body": "<p>Implicit conversions may carry an overhead and may be unexpected to the programmer, so it seems logical to me that the standard selects the option which does not involve a conversion.</p>\n", "OwnerUserId": "2068573", "PostTypeId": "2", "Id": "29324827", "Score": "0", "CreationDate": "2015-03-29T02:02:11.770", "LastActivityDate": "2015-03-29T02:02:11.770"}, "29324919": {"ParentId": "29324762", "CommentCount": "1", "Body": "<p>\u00a713.3.3 [over.match.best]/p1-2:</p>\n<blockquote>\n<p id=\"so_29324762_29324919_0\">1 Define <code>ICSi(F)</code> as follows:</p>\n<ul>\n<li>(1.1) [inapplicable bullet omitted]</li>\n<li>(1.2) let <code>ICSi(F)</code> denote the implicit conversion sequence that converts the i-th argument in the list to the type of the i-th parameter of\n  viable function <code>F</code>. 13.3.3.1 defines the implicit conversion\n  sequences and 13.3.3.2 defines what it means for one implicit\n  conversion sequence to be a better conversion sequence or worse\n  conversion sequence than another.</li>\n</ul>\n<p id=\"so_29324762_29324919_1\">Given these definitions, a viable function <code>F1</code> is defined to be a\n  better function than another viable function <code>F2</code> if for all arguments\n  <code>i</code>, <code>ICSi(F1)</code> is not a worse conversion sequence than <code>ICSi(F2)</code>,\n  and then</p>\n<ul>\n<li><p id=\"so_29324762_29324919_2\">(1.3) for some argument <code>j</code>, <code>ICSj(F1)</code> is a better conversion sequence than <code>ICSj(F2)</code>, or, if not that,</p></li>\n<li><p id=\"so_29324762_29324919_3\">[several inapplicable bullets omitted]</p></li>\n<li>(1.6) <code>F1</code> is not a function template specialization and <code>F2</code> is a function template specialization, or, if not that,</li>\n<li>[inapplicable bullet omitted]</li>\n</ul>\n<p id=\"so_29324762_29324919_4\">2 If there is exactly one viable function that is a better function\n  than all other viable functions, then it is the one selected by\n  overload resolution; otherwise the call is ill-formed.</p>\n</blockquote>\n<p>\u00a713.3.3.2 [over.ics.rank], bullet 3.2:</p>\n<blockquote id=\"so_29324762_29324919_5\">\n<ul>\n<li>(3.2) Standard conversion sequence <code>S1</code> is a better conversion sequence than standard conversion sequence <code>S2</code> if\n  <ul>\n<li>(3.2.1) <code>S1</code> is a proper subsequence of <code>S2</code> (comparing the conversion sequences in the canonical form defined by 13.3.3.1.1, excluding any\n  Lvalue Transformation; the identity conversion sequence is considered\n  to be a subsequence of any non-identity conversion sequence)</li>\n</ul></li>\n</ul>\n</blockquote>\n<p>Let F1 = <code>func&lt;int&gt;(int)</code>, F2 = <code>func(long)</code>, there's only one argument, of type <code>int</code>. So <code>ICS1(F1)</code> is the identity conversion; <code>ICS1(F2)</code> is an integer conversion from <code>int</code> to <code>long</code>; therefore <code>ICS1(F1)</code> is a better conversion sequence than <code>ICS1(F2)</code> per [over.ics.rank]/3.2.1 (and so by definition is not worse than <code>ICS1(F2)</code>). Thus per bullet 1.3 in [over.match.best], F1 is better than F2. The template/non-template tiebreaker, in bullet 1.6, simply never comes into play.</p>\n", "OwnerUserId": "2756719", "PostTypeId": "2", "Id": "29324919", "Score": "3", "CreationDate": "2015-03-29T02:17:30.443", "LastActivityDate": "2015-03-29T02:17:30.443"}, "29324762": {"CommentCount": "5", "AcceptedAnswerId": "29324919", "CreationDate": "2015-03-29T01:51:19.633", "LastActivityDate": "2015-03-29T02:17:30.443", "PostTypeId": "1", "ViewCount": "82", "FavoriteCount": "1", "Title": "Why is template overload a better match than a simple conversion?", "Id": "29324762", "Score": "2", "Body": "<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\ntemplate&lt;typename T&gt;\nvoid func(T t)  { std::cout &lt;&lt; \"matched template\\n\"; }\n\nvoid func(long x) { std::cout &lt;&lt; \"matched long\\n\"; }\n\nint main()\n{  \n    func(0);\n}\n</code></pre>\n<p>output:</p>\n<pre><code>matched template\n</code></pre>\n<p>In other cases, the non-template function is preferred when overload resolution might be ambiguous, why is this one different?</p>\n", "Tags": "<c++><templates><overload-resolution>", "OwnerUserId": "1505939", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_29324762_29324919_2": {"section_id": 603, "quality": 0.75, "length": 6}, "so_29324762_29324919_5": {"section_id": 639, "quality": 0.896551724137931, "length": 26}, "so_29324762_29324919_4": {"section_id": 604, "quality": 1.0, "length": 20}, "so_29324762_29324919_1": {"section_id": 603, "quality": 0.85, "length": 17}}, "n3337": {"so_29324762_29324919_2": {"section_id": 593, "quality": 0.75, "length": 6}, "so_29324762_29324919_5": {"section_id": 629, "quality": 0.896551724137931, "length": 26}, "so_29324762_29324919_4": {"section_id": 594, "quality": 1.0, "length": 20}, "so_29324762_29324919_1": {"section_id": 593, "quality": 0.85, "length": 17}}, "n4659": {"so_29324762_29324919_2": {"section_id": 629, "quality": 0.75, "length": 6}, "so_29324762_29324919_5": {"section_id": 667, "quality": 0.896551724137931, "length": 26}, "so_29324762_29324919_4": {"section_id": 630, "quality": 1.0, "length": 20}, "so_29324762_29324919_1": {"section_id": 629, "quality": 0.85, "length": 17}}}});