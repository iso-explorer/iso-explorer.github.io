post_cb({"bq_ids": {"n4140": {"so_40774393_40774567_1": {"length": 20, "quality": 0.8695652173913043, "section_id": 5938}, "so_40774393_40774567_4": {"length": 27, "quality": 1.0, "section_id": 6023}, "so_40774393_40774567_3": {"length": 14, "quality": 1.0, "section_id": 6024}}, "n3337": {"so_40774393_40774567_1": {"length": 20, "quality": 0.8695652173913043, "section_id": 5710}, "so_40774393_40774567_4": {"length": 27, "quality": 1.0, "section_id": 5791}, "so_40774393_40774567_3": {"length": 13, "quality": 0.9285714285714286, "section_id": 5791}}, "n4659": {"so_40774393_40774567_1": {"length": 20, "quality": 0.8695652173913043, "section_id": 7422}, "so_40774393_40774567_4": {"length": 27, "quality": 1.0, "section_id": 7522}, "so_40774393_40774567_3": {"length": 14, "quality": 1.0, "section_id": 7523}}}, "40774567": {"Id": "40774567", "PostTypeId": "2", "Body": "<p>The <code>const</code> in case of reference is not really low-level (as opposed to the pointer case).</p>\n<p><code>typeid</code> is applied to the type of expression <code>q</code>. This expression immediately loses its reference type, per the following general rule</p>\n<blockquote>\n<p id=\"so_40774393_40774567_0\"><strong>5 Expressions</strong></p>\n<p id=\"so_40774393_40774567_1\"><strong>5</strong> If an expression initially has the type \u201creference to T\u201d (8.3.2, 8.5.3), the type is adjusted to T prior to any further analysis. The expression designates the object or function denoted by the reference, and the expression is an lvalue or an xvalue, depending on the expression.</p>\n</blockquote>\n<p>Expressions in C++ never have visible \"reference\" types, which also means that <code>typeid</code> cannot \"see\" references. It cases like this it always sees lvalues or xvalues of non-reference types. In your case <code>typeid</code> sees lvalue expression of type <code>const int</code> as its agument. </p>\n<p>The rest follows from the definition of <code>typeid</code> behavior</p>\n<blockquote>\n<p id=\"so_40774393_40774567_2\"><strong>5.2.8 Type identification</strong></p>\n<p id=\"so_40774393_40774567_3\"><strong>5</strong> If the type of the expression or type-id is a cv-qualified type, the result of the typeid expression refers to a std::type_info object representing the cv-unqualified type.</p>\n</blockquote>\n<p>I.e. <code>typeid</code> simply ignores top-level const-qualification.</p>\n<p>In pointer case the const-qualification you are referring to is a not a top-level one. It is not lost under <code>typeid</code>.</p>\n<p>Note also that the definition of <code>typeid</code> contains the following rule </p>\n<blockquote>\n<p id=\"so_40774393_40774567_4\"><strong>4</strong> When typeid is applied to a type-id, the result refers to a std::type_info object representing the type of the type-id. If the type of the type-id is a reference to a possibly cv-qualified type, the result of the typeid\n  expression refers to a std::type_info object representing the cv-unqualified referenced type.</p>\n</blockquote>\n<p>Its purpose is to make the behavior of <code>typeid</code> applied to typenames consistent with the above behavior of <code>typeid</code> applied to expressions. I.e. <code>typed</code> applied to typename ignores references and also ignores cv-quailifications that become top-level after reference removal.</p>\n<p>For some extra examples</p>\n<pre><code>typeid(const int) == typeid(int);     // &lt;- true\ntypeid(const int &amp;) == typeid(int);   // &lt;- true\ntypeid(int *) == typeid(int *const);  // &lt;- true\ntypeid(int *) == typeid(const int *); // &lt;- false\n</code></pre>\n", "LastEditorUserId": "187690", "LastActivityDate": "2016-11-23T22:04:33.823", "Score": "3", "CreationDate": "2016-11-23T21:38:33.623", "ParentId": "40774393", "CommentCount": "1", "OwnerUserId": "187690", "LastEditDate": "2016-11-23T22:04:33.823"}, "40774393": {"ViewCount": "70", "Body": "<p>Consider the following code:</p>\n<pre><code>int main() {\n    const int i = 42;    \n    auto *p = &amp;i; // p is const int *. const is low level const\n    auto &amp;q = i; // q is const int &amp;. reference to const is always low level\n    cout &lt;&lt; \"p = \" &lt;&lt; typeid(p).name() &lt;&lt; endl;\n    cout &lt;&lt; \"q = \" &lt;&lt; typeid(q).name() &lt;&lt; endl;\n    return 0;\n}\n</code></pre>\n<p>Here's the output:</p>\n<pre><code>p = pki\nq = i\n</code></pre>\n<p>Why is <code>typeid(q)</code> not showing the character <code>k</code> indicating that it's a <code>const</code> reference? <code>q</code> is reference to a <code>const</code> and that is always low level.</p>\n", "Title": "C++ : typeid ignored low level const reference but not pointers", "CreationDate": "2016-11-23T21:24:32.817", "LastActivityDate": "2016-11-23T22:04:33.823", "CommentCount": "0", "LastEditDate": "2016-11-23T21:33:57.977", "PostTypeId": "1", "LastEditorUserId": "501557", "Id": "40774393", "Score": "2", "OwnerUserId": "303250", "Tags": "<c++><c++11>", "AnswerCount": "1"}});