post_cb({"bq_ids": {"n4140": {"so_19105657_19105858_5": {"length": 18, "quality": 0.9473684210526315, "section_id": 2165}, "so_19105657_19105858_7": {"length": 5, "quality": 0.8333333333333334, "section_id": 2166}, "so_19105657_19105858_3": {"length": 6, "quality": 0.75, "section_id": 2165}, "so_19105657_19105858_4": {"length": 37, "quality": 0.925, "section_id": 2165}, "so_19105657_19105858_2": {"length": 8, "quality": 0.8888888888888888, "section_id": 2165}}, "n3337": {"so_19105657_19105858_7": {"length": 5, "quality": 0.8333333333333334, "section_id": 2154}, "so_19105657_19105858_3": {"length": 6, "quality": 0.75, "section_id": 2153}, "so_19105657_19105858_5": {"length": 18, "quality": 0.9473684210526315, "section_id": 2153}, "so_19105657_19105858_2": {"length": 8, "quality": 0.8888888888888888, "section_id": 2153}, "so_19105657_19105858_4": {"length": 40, "quality": 1.0, "section_id": 2153}}, "n4659": {"so_19105657_19105858_7": {"length": 5, "quality": 0.8333333333333334, "section_id": 2439}, "so_19105657_19105858_3": {"length": 6, "quality": 0.75, "section_id": 2438}, "so_19105657_19105858_5": {"length": 18, "quality": 0.9473684210526315, "section_id": 2438}, "so_19105657_19105858_2": {"length": 8, "quality": 0.8888888888888888, "section_id": 2438}, "so_19105657_19105858_4": {"length": 37, "quality": 0.925, "section_id": 2438}}}, "19105858": {"Id": "19105858", "PostTypeId": "2", "Body": "<p><code>basic_streambuf::overflow</code> is allowed to throw an exception upon failure as documented in <em>27.6.3.4.5/6</em>, and sadly there's no way to ensure <em>compile-time</em> that the function won't ever throw an exception.</p>\n<p>Seems like you are running out of luck and the only way to be 100% sure that <code>overflow</code> won't throw an exception is to write your own <code>streambuf</code> that just doesn't do that upon failure.</p>\n<hr>\n<blockquote>\n<p id=\"so_19105657_19105858_0\">[<em>27.6.3.4.5/2-3</em>] <strong><code>int_type overflow(int_type = c = traits::eof ())</code></strong><br>\n  ...</br></p>\n</blockquote>\n<p><sup></sup></p>\n<blockquote>\n<p id=\"so_19105657_19105858_1\">[<em>27.6.3.4.5/5</em>]  </p>\n<p id=\"so_19105657_19105858_2\"><strong>Requires</strong>: Every overriding definition of this virtual function shall obey the following constraints:</p>\n<p id=\"so_19105657_19105858_3\">1) The effect of consuming a character on the associated output\n  sequence is specified309</p>\n<p id=\"so_19105657_19105858_4\">2) Let r be the number of characters in the pending sequence not\n  consumed. If r is non-zero then pbase() and pptr() shall be set so\n  that: pptr() - pbase() \n  == r and the r characters starting at pbase() are the associated output stream. In case r is zero (all characters of the pending\n  sequence have been consumed) then either pbase() is set to NULL, or\n  pbase() and pptr() are both set to the same NULL non-value.</p>\n<p id=\"so_19105657_19105858_5\">3) The function may fail if either appending some character to the\n  associated output stream fails or if it is unable to establish pbase()\n  and pptr() according to the above rules.</p>\n</blockquote>\n<p><sup></sup></p>\n<blockquote>\n<p id=\"so_19105657_19105858_6\">[<em>27.6.3.4.5/6</em>]  </p>\n<p id=\"so_19105657_19105858_7\"><strong>Returns</strong>: <code>traits::eof ()</code> or <strong>throws an exception if the function fails</strong></p>\n</blockquote>\n</hr>", "LastEditorUserId": "1090079", "LastActivityDate": "2013-10-01T00:18:48.907", "Score": "5", "CreationDate": "2013-10-01T00:04:35.280", "ParentId": "19105657", "CommentCount": "5", "OwnerUserId": "1090079", "LastEditDate": "2013-10-01T00:18:48.907"}, "19105657": {"ViewCount": "444", "Body": "<p>I'm trying to find a method to get the number of characters read or written to a stream that is reliable even if there is an error and the read/write ends short.</p>\n<p>I was doing something like this:</p>\n<pre><code>return stream.rdbuf()-&gt;sputn(buffer, buffer_size);\n</code></pre>\n<p>but if the streambuf implementation of <code>overflow</code> is permitted to throw excpections this won't work.  Is it?  I've not been able to find it documented anywhere.</p>\n", "AcceptedAnswerId": "19105858", "Title": "Can C++ streambuf methods throw exceptions?", "CreationDate": "2013-09-30T23:39:57.423", "Id": "19105657", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2013-10-01T00:18:48.907", "Score": "5", "OwnerUserId": "67013", "Tags": "<c++><exception><iostream>", "AnswerCount": "1"}});