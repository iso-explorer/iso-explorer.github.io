post_cb({"18187846": {"ParentId": "18187297", "LastEditDate": "2013-08-12T13:17:05.900", "CommentCount": "2", "CreationDate": "2013-08-12T13:09:08.650", "OwnerUserId": "1870232", "LastEditorUserId": "1870232", "PostTypeId": "2", "Id": "18187846", "Score": "2", "Body": "<p>For <code>fstream</code> (<code>std::basic_filebuf</code>), the single file position is moved by both <code>seekp()</code> and <code>seekg()</code></p>\n<p>Keeping track of <code>put</code> and <code>get</code> positions independently not possible.</p>\n<p>The class template <code>std::basic_filebuf</code> holds a single file position</p>\n<blockquote>\n<p id=\"so_18187297_18187846_0\">\u00a7 27.9.1.1</p>\n<ol>\n<li><p id=\"so_18187297_18187846_1\">The class basic_filebuf associates both the input sequence and the\n  output sequence with a file.</p></li>\n<li><p id=\"so_18187297_18187846_2\">The restrictions on reading and writing a sequence controlled by an\n  object of class basic_filebuf are the same as for reading and\n  writing with the Standard C library FILEs.</p></li>\n<li><p id=\"so_18187297_18187846_3\">In particular:</p>\n<ul>\n<li>If the file is not open for reading the input sequence cannot be read.</li>\n<li>If the file is not open for writing the output sequence cannot be written.</li>\n<li>A joint file position is maintained for both the input sequence and the output sequence.</li>\n</ul></li>\n</ol>\n</blockquote>\n", "LastActivityDate": "2013-08-12T13:17:05.900"}, "18187297": {"CommentCount": "2", "ViewCount": "1120", "CreationDate": "2013-08-12T12:42:36.407", "LastActivityDate": "2013-08-12T13:17:05.900", "Title": "seekp and seekg don't work with fstream", "PostTypeId": "1", "Id": "18187297", "Score": "4", "Body": "<p>I have a strange behaviour in my c++ program running on Debian x64 PC.</p>\n<p>I cannot manage to first read file, then write another value and then read these values.\nI've read a lot of info, including questions on stackoverflow, found out (also via experiments) that I need to change both seekp and seekg and I do so.\nEverything works... until I read something from a stream. After a read operation if I seek on begining of the file and then call tellg(), tellp(), they both return '-1'.</p>\n<p>Test code:</p>\n<pre><code>void testFstreamSeekp() {\n    fstream in(\"file\", ios::in | ios::out);\n\n    cout &lt;&lt; \"g: \" &lt;&lt; in.tellg() &lt;&lt; endl;\n    cout &lt;&lt; \"p: \" &lt;&lt; in.tellp() &lt;&lt; endl;\n\n    in.seekp(0, ios_base::end);\n\n    cout &lt;&lt; \"endp g: \" &lt;&lt; in.tellg() &lt;&lt; endl;\n    cout &lt;&lt; \"endp p: \" &lt;&lt; in.tellp() &lt;&lt; endl;\n\n    in.seekp(0, ios_base::end);\n    in.seekg(0, ios_base::end);\n\n    cout &lt;&lt; \"end g: \" &lt;&lt; in.tellg() &lt;&lt; endl;\n    cout &lt;&lt; \"end p: \" &lt;&lt; in.tellp() &lt;&lt; endl;\n\n    in.seekp(0, ios_base::beg);\n    in.seekg(0, ios_base::beg);\n\n    cout &lt;&lt; \"beg g: \" &lt;&lt; in.tellg() &lt;&lt; endl;\n    cout &lt;&lt; \"beg p: \" &lt;&lt; in.tellp() &lt;&lt; endl;\n\n        // Everything is fine until here (that is tellp() == 0, tellg() == 0)\n    int a, b;\n    in &gt;&gt; a &gt;&gt; b;\n    cout &lt;&lt; \"a: \" &lt;&lt; a &lt;&lt; endl &lt;&lt; \"b: \" &lt;&lt; b &lt;&lt; endl;\n\n        // tellg() == -1, tellp() == -1 ?????????!!!!!!!!!!\n    cout &lt;&lt; \"read g: \" &lt;&lt; in.tellg() &lt;&lt; endl;\n    cout &lt;&lt; \"read p: \" &lt;&lt; in.tellp() &lt;&lt; endl;\n\n    in.seekp(0, ios_base::beg);\n    in.seekg(0, ios_base::beg);\n\n        // tellg() == -1, tellp() == -1 ?????????!!!!!!!!!!\n    cout &lt;&lt; \"beg g: \" &lt;&lt; in.tellg() &lt;&lt; endl;\n    cout &lt;&lt; \"beg p: \" &lt;&lt; in.tellp() &lt;&lt; endl;\n}\n</code></pre>\n<p>Can somebody tell me what happens and what can I do to solve the problem?</p>\n", "Tags": "<c++><fstream>", "OwnerUserId": "1582090", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_18187297_18187846_1": {"section_id": 2411, "quality": 0.8, "length": 8}, "so_18187297_18187846_2": {"section_id": 2412, "quality": 0.8, "length": 12}}, "n3337": {"so_18187297_18187846_1": {"section_id": 2396, "quality": 0.8, "length": 8}, "so_18187297_18187846_2": {"section_id": 2397, "quality": 0.8, "length": 12}}, "n4659": {"so_18187297_18187846_1": {"section_id": 2686, "quality": 0.8, "length": 8}, "so_18187297_18187846_2": {"section_id": 2687, "quality": 0.8, "length": 12}}}});