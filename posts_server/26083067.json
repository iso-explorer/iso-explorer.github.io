post_cb({"26083187": {"ParentId": "26083067", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>In your example you have no cv-qualified reference. The quote of the Standard means the following declarations that are ill formed</p>\n<pre><code>int a = 5;\nconst int &amp; const b = a;\n</code></pre>\n<p>Here b is a cv-qualified reference and the code snippet is ill-formed.</p>\n<p>As for your code snippet then it declares a reference to a const object.</p>\n<p>This code snippet is ill formed</p>\n<pre><code>typedef int&amp; A;\nconst A aref = 3; \n</code></pre>\n<p>because it is equivalent to</p>\n<pre><code>int &amp; const aref = 3; \n</code></pre>\n<p>That it would be more clear compare the two declarations</p>\n<pre><code>int x;\nint * const p = &amp;x;\nint &amp; const r = x;\n</code></pre>\n<p>The declaration of the cv-qualified pointer is valid while the declaration of the cv-qualified reference is ill-formed.</p>\n", "OwnerUserId": "2877241", "LastEditorUserId": "2877241", "LastEditDate": "2014-09-28T09:09:01.723", "Id": "26083187", "Score": "1", "CreationDate": "2014-09-28T08:47:41.847", "LastActivityDate": "2014-09-28T09:09:01.723"}, "bq_ids": {"n4140": {"so_26083067_26083067_0": {"section_id": 3218, "quality": 0.7647058823529411, "length": 13}}, "n3337": {"so_26083067_26083067_0": {"section_id": 3092, "quality": 0.7058823529411765, "length": 12}}, "n4659": {"so_26083067_26083067_0": {"section_id": 3975, "quality": 0.7647058823529411, "length": 13}}}, "26083067": {"CommentCount": "8", "ViewCount": "149", "PostTypeId": "1", "OwnerDisplayName": "user2953119", "CreationDate": "2014-09-28T08:30:31.697", "LastActivityDate": "2014-09-28T09:09:01.723", "LastEditDate": "2014-09-28T08:41:36.757", "AcceptedAnswerId": "26083187", "LastEditorDisplayName": "user2953119", "Title": "CV-qualified reference", "Id": "26083067", "Score": "0", "Body": "<p>8.3.2/1:</p>\n<blockquote>\n<p id=\"so_26083067_26083067_0\">Cv-qualified references are ill-formed except when the cv-qualifiers\n  are introduced through the use of a typedef-name (7.1.3, 14.1) or\n  decltype-specificer (7.1.6.2), in which case the cv-qualifiers are\n  ignored</p>\n</blockquote>\n<pre><code>int a = 5;\nconst int &amp;b = a;\n\nint main()\n{\n}\n</code></pre>\n<p>Compiles fine by both <code>gcc</code> and <code>clang</code>. <a href=\"http://coliru.stacked-crooked.com/a/751953b0730f229c\" rel=\"nofollow\"><strong>DEMO</strong></a></p>\n<p>Why? Is it a bug?</p>\n<p>Example, provided by the Standard:</p>\n<pre><code>typedef int&amp; A;\nconst A aref = 3; // ill-formed; lvalue reference to non-const initialized with rvalue\n</code></pre>\n", "Tags": "<c++><gcc><clang>", "AnswerCount": "1"}});