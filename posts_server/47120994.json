post_cb({"bq_ids": {"n4140": {"so_47120994_47121087_0": {"length": 15, "quality": 0.7894736842105263, "section_id": 774}}, "n3337": {"so_47120994_47121087_0": {"length": 15, "quality": 0.7894736842105263, "section_id": 761}}, "n4659": {"so_47120994_47121087_0": {"length": 17, "quality": 0.8947368421052632, "section_id": 835}}}, "47121087": {"Id": "47121087", "PostTypeId": "2", "Body": "<p>According to the standard the memory should be contiguous. The <a href=\"http://eel.is/c++draft/array#overview-1\" rel=\"nofollow noreferrer\">26.3.7.1 [array.overview]</a> paragraph states (emphasis mine):</p>\n<blockquote>\n<p id=\"so_47120994_47121087_0\">The header  defines a class template for storing fixed-size\n  sequences of objects. An array is a <strong>contiguous container</strong>. An instance\n  of array stores N elements of type T, so that size() == N is an\n  invariant.</p>\n</blockquote>\n<p><strong>Update:</strong> It appears the implementation <em>might</em> include the padding.\nMore info on the subject in these SO posts:<br>\n<a href=\"https://stackoverflow.com/questions/19103244/is-the-size-of-stdarray-defined-by-standard\">Is the size of std::array defined by standard?</a><br>\nand specifically this answer:<br>\n<a href=\"https://stackoverflow.com/a/9762710/8202288\">Is the data in nested std::arrays guaranteed to be contiguous?</a></br></br></br></p>\n", "LastEditorUserId": "8202288", "LastActivityDate": "2017-11-06T11:20:28.533", "Score": "1", "CreationDate": "2017-11-05T11:35:50.190", "ParentId": "47120994", "CommentCount": "6", "OwnerUserId": "8202288", "LastEditDate": "2017-11-06T11:20:28.533"}, "47120994": {"ViewCount": "138", "Body": "<p>Seems, that I found how to easily get normal 2D Array with contiguous memory in 2 lines of code:</p>\n<pre><code>template&lt;int N, int M&gt;\nusing Array2D = array&lt;array&lt;int, M&gt;, N&gt;;\n</code></pre>\n<p>Let's solve easy task of <strong>swapping min and max</strong> in <code>Array2D</code> (a little of c++17):</p>\n<pre><code>template&lt;int N, int M&gt;\nvoid printArray2D(const Array2D&lt;N, M&gt; &amp;arr);\n\nint main() {\n    const int N = 5;\n    const int M = 5;\n    Array2D&lt;N, M&gt; arr;\n\n    // random init of Array2D \n    generate(arr.front().begin(), arr.back().end(), []()-&gt;int {\n                                                        return rand() % 100;\n                                                    });\n\n    printArray2D(arr);\n\n    auto[a, b] = minmax_element(arr.front().begin(), arr.back().end());\n\n    cout &lt;&lt; \"Swap minimum and maximum: \" &lt;&lt; *a &lt;&lt; \" \" &lt;&lt; *b &lt;&lt; endl &lt;&lt; endl;\n\n    iter_swap(a, b);\n    printArray2D(arr);\n\n    return 0;\n}\n\ntemplate&lt;int N, int M&gt;\nvoid printArray2D(const Array2D&lt;N, M&gt; &amp;arr) {\n    for (const auto &amp;row : arr) {\n        for (const auto &amp;elem : row) {\n            cout &lt;&lt; std::setw(3) &lt;&lt; elem;\n        }\n        cout &lt;&lt; endl;\n        cout &lt;&lt; endl;\n    }\n}\n</code></pre>\n<p>I got next result in Visual Studio 2017:</p>\n<pre><code> 41 67 34  0 69\n\n 24 78 58 62 64\n\n  5 45 81 27 61\n\n 91 95 42 27 36\n\n 91  4  2 53 92\n\nSwap minimum and maximum: 0 95\n\n 41 67 34 95 69\n\n 24 78 58 62 64\n\n  5 45 81 27 61\n\n 91  0 42 27 36\n\n 91  4  2 53 92\n</code></pre>\n<p>Pros:</p>\n<ul>\n<li>Only 2 simple lines to get 2D array</li>\n<li>You can normally access elements as <code>arr[2][2]</code></li>\n<li>You can use stl algorithms</li>\n</ul>\n<p>Cons:</p>\n<ul>\n<li>This solution doesn't work normally in Debug mode, I've got runtime error <code>array iterators incompatible</code></li>\n<li>I don't know if the memory always will be allocated contiguously</li>\n<li>I don't know if it works in other compilers</li>\n<li>Magic iterators</li>\n</ul>\n<p><strong>Questions:</strong></p>\n<ul>\n<li>Is contiguous allocation for <code>Array2D</code> ensured by anything?</li>\n<li>Is it eligible to use array iterators in this way? (different iterators, but bear in mind contiguous and implementation on pointers)</li>\n<li>Is <code>Array2D</code> safe to use in this manner (as in example) in production code? If not, can you present good code for solving this task with minimum code overhead?</li>\n<li><a href=\"https://stackoverflow.com/questions/47120994/does-stdarray-of-stdarray-have-contiguous-memory#comment81192325_47121087\">geza</a>: This <a href=\"https://stackoverflow.com/questions/9762662/is-the-data-in-nested-stdarrays-guaranteed-to-be-contiguous/9762712#9762712\">answer</a> contradicts to continuity of nested arrays. Maybe something has changed in C++14?</li>\n</ul>\n", "Title": "Does std::array of std::array have contiguous memory?", "CreationDate": "2017-11-05T11:23:52.020", "LastActivityDate": "2017-11-06T11:20:28.533", "CommentCount": "5", "LastEditDate": "2017-11-05T12:15:32.027", "PostTypeId": "1", "LastEditorUserId": "2627487", "Id": "47120994", "Score": "5", "OwnerUserId": "2627487", "Tags": "<c++><arrays><matrix><memory><allocation>", "AnswerCount": "1"}});