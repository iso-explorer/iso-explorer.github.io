post_cb({"8585818": {"Id": "8585818", "PostTypeId": "2", "Body": "<pre><code>z = x\nz = y\n</code></pre>\n<p>does not change the reference but the value of <code>x</code>.</p>\n", "LastEditorUserId": "719034", "LastActivityDate": "2011-12-21T14:07:52.310", "Score": "1", "CreationDate": "2011-12-21T06:21:23.893", "ParentId": "8585783", "CommentCount": "0", "OwnerUserId": "1101171", "LastEditDate": "2011-12-21T14:07:52.310"}, "8585926": {"Id": "8585926", "PostTypeId": "2", "Body": "<p>No, that won't generate an error. As mentioned, assigning values to z is the same as assigning values to what it refers to, which in this case is x.</p>\n<p>In this case, the standard mandates that z HAS to REFER to x. z cannot be made to refer to some other variable.</p>\n", "LastActivityDate": "2011-12-21T06:34:22.323", "CommentCount": "0", "CreationDate": "2011-12-21T06:34:22.323", "ParentId": "8585783", "Score": "0", "OwnerUserId": "1024596"}, "bq_ids": {"n4140": {"so_8585783_8585783_0": {"length": 21, "quality": 0.9130434782608695, "section_id": 3318}}, "n3337": {"so_8585783_8585783_0": {"length": 21, "quality": 0.9130434782608695, "section_id": 3188}}, "n4659": {"so_8585783_8585783_0": {"length": 15, "quality": 0.6521739130434783, "section_id": 4084}}}, "8585783": {"ViewCount": "283", "Body": "<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main ()\n{\n    int    x = 0;\n    int    y = 1;\n\n    int&amp; z = x;\n    z = x;\n    z = y;\n\n    cout &lt;&lt; \"\\nx: \" &lt;&lt; x;\n    cout &lt;&lt; \"\\ny: \" &lt;&lt; y;\n\n    cout &lt;&lt; \"\\nz: \" &lt;&lt; z;\n    return 0;\n}\n</code></pre>\n<p>**</p>\n<h2>EDIT:</h2>\n<p>**\nThis code returns 1 for all 3 cases. Shouldn't this be an error instead?</p>\n<p>8.5.3 section of C++ standard says:</p>\n<blockquote>\n<p id=\"so_8585783_8585783_0\">A reference cannot be changed to refer to another object after\n  initialization. Note that initialization of a 2   reference is treated\n  very differently from assignment to it. Argument passing (5.2.2) and\n  function value   return (6.6.3) are initializations.</p>\n</blockquote>\n", "Title": "Can one reference be assigned different values at different locations?", "CreationDate": "2011-12-21T06:16:51.050", "LastActivityDate": "2011-12-21T14:07:52.310", "CommentCount": "2", "LastEditDate": "2011-12-21T06:23:59.183", "PostTypeId": "1", "LastEditorUserId": "462608", "Id": "8585783", "Score": "1", "OwnerUserId": "462608", "Tags": "<c++><reference>", "AnswerCount": "4"}, "8585841": {"Id": "8585841", "PostTypeId": "2", "Body": "<p>No, in your code you aren't changing what <code>z</code> references, instead you're changing the contents of <code>z</code> (and in turn what it references, <code>x</code>).</p>\n<p>You can see this with the following code:</p>\n<pre><code>x = 5;\ncout &lt;&lt; x;\ncout &lt;&lt; z;\n</code></pre>\n<p>Both <code>x</code> and <code>z</code> will have the value 5, since <code>z</code> remains a reference to <code>x</code>.</p>\n", "LastActivityDate": "2011-12-21T06:24:40.723", "CommentCount": "4", "CreationDate": "2011-12-21T06:24:40.723", "ParentId": "8585783", "Score": "6", "OwnerUserId": "894042"}, "8586040": {"Id": "8586040", "PostTypeId": "2", "Body": "<pre><code>    {   int    x = 0;        // Let x be located at memory 0x1234\n        int    y = 1;        // Let y be located at memory 0x5678\n\n        int&amp; z = x;          //There is a variable call z that is a reference to x.  \n//That is z refers to the same memory location and thus the same content.\n\n        z = x;               //Set the contents of z to the content of x. \n//Since z is currently a reference to x this essentially does nothing.\n        z = y;               //Set the contents of z to the content of y which is the \n//same as set the contents of memory 0x1234 to the contents of memory 0x5678. \n\n        cout &lt;&lt; \"\\nx: \" &lt;&lt; x; //print the contents of memory 0x1234\n        cout &lt;&lt; \"\\ny: \" &lt;&lt; y; //print the contents of memory 0x5678\n\n        cout &lt;&lt; \"\\nz: \" &lt;&lt; z; //print the contents of memory 0x1234\n        return 0;\n    }\n</code></pre>\n<p>It is not giving you an error since you are not changing any memory pointers, but instead, their contents</p>\n", "LastActivityDate": "2011-12-21T06:46:59.760", "CommentCount": "2", "CreationDate": "2011-12-21T06:46:59.760", "ParentId": "8585783", "Score": "1", "OwnerUserId": "645726"}});