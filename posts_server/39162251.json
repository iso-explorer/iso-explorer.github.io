post_cb({"39162830": {"ParentId": "39162251", "CommentCount": "1", "Body": "<blockquote>\n<p id=\"so_39162251_39162830_0\">Function Call = expression-statement\u2026 even functions of type void?</p>\n</blockquote>\n<p>no. But that's because a function call is this:</p>\n<pre><code>do_stuff()\n</code></pre>\n<p>and that's an <code>expression_opt</code>. It's an expression, not a statement. You can use this expression in compound expressions, but it's not a statement by language logic.</p>\n<p>You can quickly convert that <code>expression_opt</code> to a <code>expression-statement</code> by giving it a semicolon:</p>\n<pre><code>do_stuff();\n</code></pre>\n<p>is now a full statement.</p>\n<p>The difference becomes clear if you think about something like</p>\n<pre><code>if(good_thing() || do_stuff())\n{\n    ....\n}\n</code></pre>\n<p><code>do_stuff()</code> and <code>good_thing()</code> are expressions, which can/will be evaluated. Semicolons after <code>()</code> would break that <code>if</code> clause.</p>\n", "OwnerUserId": "4433386", "PostTypeId": "2", "Id": "39162830", "Score": "0", "CreationDate": "2016-08-26T09:22:28.107", "LastActivityDate": "2016-08-26T09:22:28.107"}, "39162320": {"ParentId": "39162251", "CommentCount": "0", "Body": "<p>Yes functions returning no value (declared as returning <code>void</code>) still counts as expressions when you call them. That limits their use in other expressions though, for example such calls can not be on either side of an assignment.</p>\n<p>As for \"why\"? Well, a function call is a function call is a function call. Adding special rules for functions that don't return a value would make the language design much more complicated. C++ already have enough special rules and exceptions.</p>\n", "OwnerUserId": "440558", "PostTypeId": "2", "Id": "39162320", "Score": "1", "CreationDate": "2016-08-26T08:58:15.387", "LastActivityDate": "2016-08-26T08:58:15.387"}, "39162466": {"ParentId": "39162251", "LastEditDate": "2016-08-26T09:11:40.660", "CommentCount": "2", "CreationDate": "2016-08-26T09:04:44.700", "OwnerUserId": "2805305", "LastEditorUserId": "2805305", "PostTypeId": "2", "Id": "39162466", "Score": "1", "Body": "<p><a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3797.pdf\" rel=\"nofollow\">C++14 standard:</a></p>\n<blockquote>\n<p id=\"so_39162251_39162466_0\">\u00a75 Expressions:</p>\n<p id=\"so_39162251_39162466_1\">1 An expression is a sequence of operators and operands that specifies\n  <strong>a computation</strong>. An expression <strong>can</strong> result in a value and <strong>can</strong> cause side\n  effects</p>\n</blockquote>\n<p>So the \"main\" purpose/scope of an expression is to specify a computation, not to compute a value. Some computations may result in a value and some may have side effects.</p>\n<p>In addition to this (or actually first of all), \"expressions\" and \"statements\" are used in defining the grammar of C and C++. It would be a syntactically impossible to make functions that don't return a value not an \"expression\". And adding that distinction at a semantic level would be an unnecessary overly-complication.</p>\n", "LastActivityDate": "2016-08-26T09:11:40.660"}, "39162251": {"CommentCount": "5", "ViewCount": "162", "PostTypeId": "1", "LastEditorUserId": "4433386", "CreationDate": "2016-08-26T08:54:15.193", "LastActivityDate": "2016-08-26T09:22:28.107", "Title": "Function Call = expression-statement... even functions of type void?", "LastEditDate": "2016-08-26T08:56:12.660", "Id": "39162251", "Score": "-3", "Body": "<p>in C++, there is no such thing as an assignment statement or function-call statement. </p>\n<p>An assignment is an expression; a function-call is an expression; this is coming straight from Bjarne Stroustrup in his book <em>\"The C++ Programming Language\"</em>.</p>\n<p>I know an expression computes a value, which has me wondering if this applies to void functions, since they don't return a value. </p>\n<p>I'd like to know if functions with a return type of <strong>void</strong> still count as expressions, and if so, why?</p>\n", "Tags": "<c++><function><void>", "OwnerUserId": "4778394", "AnswerCount": "4"}, "39162585": {"ParentId": "39162251", "CommentCount": "0", "Body": "<p>Yes, <code>void</code> function call is also an expression. The definition in C++ Standard says:</p>\n<blockquote>\n<p id=\"so_39162251_39162585_0\"><strong>An expression</strong> is a sequence of operators and operands that specifies a\n  computation. An expression <strong>can result</strong> in a value and <strong>can cause</strong> side\n  effects.</p>\n<p id=\"so_39162251_39162585_1\"><strong>A function call is</strong> a  postfix <strong>expression</strong> followed by parentheses\n  containing a possibly empty, comma-separated list of expressions which\n  constitute the arguments to the function.</p>\n</blockquote>\n<p>Also in <strong>MSDN</strong> C++ Language Reference:</p>\n<blockquote>\n<p id=\"so_39162251_39162585_2\">A <strong>postfix-expression</strong> followed by the function-call operator, ( ),\n  specifies a <strong>function call</strong>.</p>\n</blockquote>\n", "OwnerUserId": "5208760", "PostTypeId": "2", "Id": "39162585", "Score": "0", "CreationDate": "2016-08-26T09:10:09.883", "LastActivityDate": "2016-08-26T09:10:09.883"}, "bq_ids": {"n4140": {"so_39162251_39162585_1": {"section_id": 5988, "quality": 0.9333333333333333, "length": 14}, "so_39162251_39162585_2": {"section_id": 409, "quality": 0.5714285714285714, "length": 4}, "so_39162251_39162466_1": {"section_id": 5934, "quality": 1.0, "length": 14}, "so_39162251_39162585_0": {"section_id": 5934, "quality": 1.0, "length": 14}}, "n3337": {"so_39162251_39162585_1": {"section_id": 5756, "quality": 1.0, "length": 15}, "so_39162251_39162585_2": {"section_id": 400, "quality": 0.5714285714285714, "length": 4}, "so_39162251_39162466_1": {"section_id": 5706, "quality": 1.0, "length": 14}, "so_39162251_39162585_0": {"section_id": 5706, "quality": 1.0, "length": 14}}, "n4659": {"so_39162251_39162585_1": {"section_id": 7488, "quality": 0.9333333333333333, "length": 14}, "so_39162251_39162585_2": {"section_id": 427, "quality": 0.5714285714285714, "length": 4}, "so_39162251_39162466_1": {"section_id": 7418, "quality": 1.0, "length": 14}, "so_39162251_39162585_0": {"section_id": 7418, "quality": 1.0, "length": 14}}}});