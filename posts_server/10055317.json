post_cb({"10055395": {"ParentId": "10055317", "CommentCount": "3", "Body": "<p>You have to exit program in your terminate handler. Add the following line to the handler and it will work:</p>\n<pre><code>exit(-1);\n</code></pre>\n", "OwnerUserId": "453803", "PostTypeId": "2", "Id": "10055395", "Score": "1", "CreationDate": "2012-04-07T14:43:56.810", "LastActivityDate": "2012-04-07T14:43:56.810"}, "10055463": {"ParentId": "10055317", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>According to the requirments of the standard, a function used as a <code>terminate_handler</code> must meet the following requirement (ISO/IEC 14882:2011 18.8.3.1):</p>\n<blockquote>\n<p id=\"so_10055317_10055463_0\"><em>Required behavior</em>: A <code>terminate_handler</code> shall terminate execution of the program without returning\n  to the caller.</p>\n</blockquote>\n<p>As your function doesn't meet this requirement you program has <em>undefined behaviour</em>. In order to see your custom diagnostic you should output a newline to <code>std::cout</code> (as this can be required on many platforms) and then terminate the program in some way, such as calling <code>std::abort</code>.</p>\n<p><code>std::abort</code> is used to signal an abnormal termination of the program so you can expect extra diagnostics to be reported to the user such as via the dialog box that you are seeing.</p>\n<p>Note that using <code>std::exit</code> from a terminate handler is potentially dangerous as <code>std::terminate</code> might be called in response to an exceptional condition occurring in a function registered with <code>std::atexit</code> or <code>std:: at_quick_exit</code>. This would lead to a second attempt to call <code>std::exit</code>.</p>\n<p>In summary, if you don't want an \"abnormal\" termination, you almost always need to catch exceptions that you throw.</p>\n", "OwnerUserId": "19563", "LastEditorUserId": "19563", "LastEditDate": "2012-04-07T15:11:47.347", "Id": "10055463", "Score": "2", "CreationDate": "2012-04-07T14:52:58.253", "LastActivityDate": "2012-04-07T15:11:47.347"}, "10055317": {"CommentCount": "3", "ViewCount": "224", "CreationDate": "2012-04-07T14:33:01.233", "LastActivityDate": "2012-04-07T15:11:47.347", "Title": "Exception Handling - throwing an exception without any handlers", "AcceptedAnswerId": "10055394", "PostTypeId": "1", "Id": "10055317", "Score": "0", "Body": "<pre><code>void myterminate () \n{\n   cout &lt;&lt; \"terminate handler called\";\n}\n\nint main (void) \n{\n   set_terminate (myterminate);\n\n   throw;  // throwing an exception. So, terminate handler should be invoked \n           // as no one is handling this exception.    \n   getch();\n   return 0;\n}\n</code></pre>\n<blockquote>\n<p id=\"so_10055317_10055317_0\">But After executing this code, the output is:</p>\n<blockquote>\n<p id=\"so_10055317_10055317_3\">terminate handler called  +  \"Debug Error!\" dialog box appears.</p>\n</blockquote>\n<p id=\"so_10055317_10055317_2\">I am not sure why it is coming like this !!!! Please help.</p>\n</blockquote>\n", "Tags": "<c++>", "OwnerUserId": "1168582", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_10055317_10055463_0": {"section_id": 6923, "quality": 0.7142857142857143, "length": 5}}, "n3337": {"so_10055317_10055463_0": {"section_id": 6671, "quality": 0.7142857142857143, "length": 5}}, "n4659": {"so_10055317_10055463_0": {"section_id": 8420, "quality": 0.7142857142857143, "length": 5}}}, "10055394": {"ParentId": "10055317", "CommentCount": "3", "Body": "<p>Based on the MSDN documentation for <a href=\"http://msdn.microsoft.com/en-us/library/aa272914%28v=vs.60%29.aspx\" rel=\"nofollow\">set_terminate</a> the new handler function must call <code>exit()</code> or <code>abort()</code> will be called:</p>\n<blockquote>\n<p id=\"so_10055317_10055394_0\">The set_terminate function installs term_func as the function called by terminate. set_terminate is used with C++ exception handling and may be called at any point in your program before the exception is thrown. terminate calls abort by default. You can change this default by writing your own termination function and calling set_terminate with the name of your function as its argument. terminate calls the last function given as an argument to set_terminate. After performing any desired cleanup tasks, term_func should exit the program. If it does not exit (if it returns to its caller), abort is called.</p>\n</blockquote>\n<p>For example:</p>\n<pre><code>void myterminate () \n{\n   cout &lt;&lt; \"terminate handler called\";\n   exit(1);\n}\n</code></pre>\n", "OwnerUserId": "1033896", "PostTypeId": "2", "Id": "10055394", "Score": "4", "CreationDate": "2012-04-07T14:43:41.520", "LastActivityDate": "2012-04-07T14:43:41.520"}});