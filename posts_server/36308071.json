post_cb({"bq_ids": {"n4140": {"so_36308071_36308300_1": {"length": 18, "quality": 0.8181818181818182, "section_id": 7164}, "so_36308071_36308300_0": {"length": 26, "quality": 1.0, "section_id": 5356}}, "n3337": {"so_36308071_36308300_1": {"length": 18, "quality": 0.8181818181818182, "section_id": 6908}, "so_36308071_36308300_0": {"length": 26, "quality": 1.0, "section_id": 5153}}, "n4659": {"so_36308071_36308300_1": {"length": 18, "quality": 0.8181818181818182, "section_id": 8672}, "so_36308071_36308300_0": {"length": 26, "quality": 1.0, "section_id": 6781}}}, "36308071": {"ViewCount": "39", "Body": "<p>I came across this piece of code today:</p>\n<pre><code>KeepaliveThread::KeepaliveThread(VideoDevice *device)\n : Thread()\n{\n        ...\n        startup_lock = new Mutex(\"KeepaliveThread::startup_lock\");\n}\n\nMutex::Mutex(const char *title, int recursive)\n{\n        this-&gt;title = title;\n        ...\n}\n</code></pre>\n<p>Is the usage of this-&gt;title safe? Presumably \"KeepaliveThread::startup_lock\" is a static area of memory, so it's always safe to read from that location.</p>\n<p>Do you think it is acceptable or bad practice?</p>\n", "Title": "Is it safe to point to a calling classes's constructor's resource?", "CreationDate": "2016-03-30T11:53:48.080", "LastActivityDate": "2016-03-30T12:02:42.033", "CommentCount": "2", "PostTypeId": "1", "Id": "36308071", "Score": "0", "OwnerUserId": "4037492", "Tags": "<c++>", "AnswerCount": "1"}, "36308300": {"Id": "36308300", "PostTypeId": "2", "Body": "<p>From <strong>[lex.string]</strong></p>\n<blockquote>\n<p id=\"so_36308071_36308300_0\">Ordinary string literals and <strong>UTF-8</strong> string literals are also referred to as narrow string literals. A narrow string literal has type \u201carray of <em>n</em> <code>const char</code>\u201d, where n is the size of the string as defined below, and has static storage duration (3.7).</p>\n</blockquote>\n<p>And If we go to 3.7 which is <strong>[basic.stc]</strong> and specificly from <strong>[basic.stc.static]</strong> we have </p>\n<blockquote>\n<p id=\"so_36308071_36308300_1\">All variables which do not have dynamic storage duration, do not have thread storage duration, and are not local have <em>static storage duration</em>. The storage for these entities shall last for the duration of the program (3.6.2, 3.6.3).</p>\n</blockquote>\n<p>So your string literal has static storage duration and the storage duration last for the duration of the program so it is safe to store a <code>const char*</code> to a string literal</p>\n<p>Do note that any attempt to modify a string literal is undefined behavior even if the compiler lets you store a <code>char*</code> to it.</p>\n", "LastActivityDate": "2016-03-30T12:02:42.033", "CommentCount": "0", "CreationDate": "2016-03-30T12:02:42.033", "ParentId": "36308071", "Score": "1", "OwnerUserId": "4342498"}});