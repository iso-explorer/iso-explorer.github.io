post_cb({"18685788": {"ViewCount": "402", "Body": "<p>I am having a code, which contains</p>\n<pre><code>bool fn()\n{\n...\n//all the following are boolean functions.\nreturn isTrue()\n       &amp;&amp;isMsgReceived()\n       &amp;&amp;isMsgSent();\n}\n</code></pre>\n<p>The problem is that each of the return boolean functions are themselves quite lengthy and takes much computation. Actually, there is no point in checking subsequent functions, if previous one already failed (<code>and</code> condition).</p>\n<p>Would you suggest simpler ways to return <code>false</code>, in case one of the beginning functions already failed and not go for further checking. The aim is to reduce compute time.</p>\n", "AcceptedAnswerId": "18685799", "Title": "Better algorithm for if condition", "CreationDate": "2013-09-08T16:08:20.453", "Id": "18685788", "CommentCount": "3", "LastEditDate": "2013-09-09T02:16:21.367", "PostTypeId": "1", "LastEditorUserId": "109122", "LastActivityDate": "2013-09-09T02:16:21.367", "Score": "3", "OwnerUserId": "1977614", "Tags": "<c++><c><algorithm>", "AnswerCount": "2"}, "18685799": {"Id": "18685799", "PostTypeId": "2", "Body": "<p><code>&amp;&amp;</code> already does that for you. If <code>isTrue()</code> returns <code>false</code>, the next two functions are not even evaluated.</p>\n<p>It therefore makes sense to put the least expensive function first in a chain of <code>&amp;&amp;</code>s.</p>\n", "LastActivityDate": "2013-09-08T16:09:22.440", "CommentCount": "5", "CreationDate": "2013-09-08T16:09:22.440", "ParentId": "18685788", "Score": "25", "OwnerUserId": "1865077"}, "18685907": {"Id": "18685907", "PostTypeId": "2", "Body": "<p>Your code already does that.</p>\n<p>The standard says explicitly:</p>\n<blockquote>\n<p id=\"so_18685788_18685907_0\"><strong>5.14 Logical AND operator [expr.log.and]</strong></p>\n<p id=\"so_18685788_18685907_1\">The &amp;&amp; operator groups <em>left-to-right</em>. The operands are both contextually converted to bool (Clause 4). The result is <code>true</code> if both operands are true and false otherwise. Unlike <code>&amp;</code>, <code>&amp;&amp;</code> guarantees <em>left-to-right</em> evaluation: <strong>the second operand is not evaluated if the first operand is <code>false</code>.</strong></p>\n</blockquote>\n<p>Then if <code>isTrue()</code> is evaluated to <code>false</code>, the next functions will not be evaluated.</p>\n<p>You should then put the least expensive function at first.</p>\n", "LastActivityDate": "2013-09-08T16:19:07.450", "CommentCount": "1", "CreationDate": "2013-09-08T16:19:07.450", "ParentId": "18685788", "Score": "10", "OwnerUserId": "1394283"}, "bq_ids": {"n4140": {"so_18685788_18685907_1": {"length": 26, "quality": 0.896551724137931, "section_id": 6163}}, "n3337": {"so_18685788_18685907_1": {"length": 26, "quality": 0.896551724137931, "section_id": 5924}}, "n4659": {"so_18685788_18685907_1": {"length": 26, "quality": 0.896551724137931, "section_id": 7660}}}});