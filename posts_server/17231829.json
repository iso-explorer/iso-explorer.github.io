post_cb({"17232020": {"ParentId": "17231829", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>As you said you're using std::find, you need to overload the operator == on your struct</p>\n<pre><code>struct sToken\n{\n    std::string token;\n    unsigned int lineNb;\n    bool operator ==(const sToken&amp; ref )\n    {\n        return ref.token.compare( this-&gt;token ) == 0;\n    }\n};\n</code></pre>\n<p>In this example, <code>token</code> will be used to differ(indentify) this struct from others. You can of course change it to whatever you want</p>\n<h1>edit</h1>\n<p>if you want to use <code>std::find</code> looking for the <code>std::string</code> <code>tkn.token</code> as your comment says then you need to overload it like this:</p>\n<pre><code>bool operator ==(const std::string ctoken)\n{\n    return ctoken.compare( this-&gt;token ) == 0;\n}\n</code></pre>\n<p>You have to do this because <code>std::find</code> will compare the vector members with your <code>sToken</code> object.</p>\n", "OwnerUserId": "1513286", "LastEditorUserId": "1513286", "LastEditDate": "2013-06-21T09:44:03.027", "Id": "17232020", "Score": "1", "CreationDate": "2013-06-21T09:37:55.273", "LastActivityDate": "2013-06-21T09:44:03.027"}, "17232257": {"ParentId": "17231829", "CommentCount": "0", "Body": "<p>Hi chao you need to overload <strong>operator ==</strong>. Here is the my version of code that works quite fine.</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nusing namespace std;\n\nstruct sToken\n{\n    std::string token;\n    unsigned int lineNb;\n\n    bool operator == (const sToken&amp; obj)\n    {\n        if(token.compare(obj.token) != 0)\n            return false;\n\n        if(lineNb != obj.lineNb)\n            return false;\n\n        return true;\n    }\n};\n\nint main()\n{\n    struct sToken a1;\n    a1.token = \"jksdhfjksdf\";\n    a1.lineNb = 5;\n\n    struct sToken a2;\n    a2.token = \"jksdhfjksdf\";\n    a2.lineNb = 5;\n\n    if(a1 == a2)\n        cout&lt;&lt; \"jhfdhvhjdf\"&lt;&lt;endl;\n\n    vector&lt;sToken&gt; myVector;\n    myVector.push_back(a1);\n    myVector.push_back(a2);\n\n    cout&lt;&lt;myVector.size();\n\n    return 0;\n}\n</code></pre>\n", "OwnerUserId": "788711", "PostTypeId": "2", "Id": "17232257", "Score": "1", "CreationDate": "2013-06-21T09:49:55.797", "LastActivityDate": "2013-06-21T09:49:55.797"}, "17231829": {"CommentCount": "18", "ViewCount": "126", "CreationDate": "2013-06-21T09:28:41.940", "LastActivityDate": "2013-06-21T09:49:55.797", "Title": "Can not insert own structure in standard vector but string can", "AcceptedAnswerId": "17232020", "PostTypeId": "1", "Id": "17231829", "Score": "-2", "Body": "<p>I made simple structure:</p>\n<pre><code>struct sToken\n{\n    std::string token;\n    unsigned int lineNb;\n};\n</code></pre>\n<p>I want to insert this structure in standard vector using <code>push_back()</code> method, but when I do this:</p>\n<pre><code>std::vector&lt;sToken&gt; result;\nresult.push_back(tkn); //compiler-error\n</code></pre>\n<p>I get following error messages:\n<code>no match for operator== in __first__gnu_cxx::__normal_iterator&lt;_Iterator,_Container&gt;::operator*&lt;sToken*,std::vector&lt;sToken&gt; &gt;()== in stl_algo.h</code></p>\n<p>But if I want to put standard string everything is OK:</p>\n<pre><code>std::vector&lt;std::string&gt; result;\nresult.push_back(tkn.token); //OK\n</code></pre>\n<p>I see that compiler is complaining about <code>operator==</code>, but why? Why should I provide <code>operator==</code> in this situation when I only want to put struct in vector? And if I must implement this operator, can you give me an idea how it should be implemented. Thanks.</p>\n", "Tags": "<c++><compiler-errors><stdvector>", "OwnerUserId": "1925060", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_17231829_17232247_1": {"section_id": 1257, "quality": 0.8666666666666667, "length": 13}}, "n3337": {"so_17231829_17232247_1": {"section_id": 1255, "quality": 0.8666666666666667, "length": 13}}, "n4659": {"so_17231829_17232247_1": {"section_id": 1377, "quality": 0.8666666666666667, "length": 13}}}, "17232247": {"ParentId": "17231829", "CommentCount": "1", "Body": "<blockquote id=\"so_17231829_17232247_0\">\n<h3>C++11, 25.2.5 Find</h3>\n</blockquote>\n<pre><code>template&lt;class InputIterator, class T&gt;\nInputIterator find(InputIterator first, InputIterator last, const T&amp; value);\n</code></pre>\n<blockquote>\n<p id=\"so_17231829_17232247_1\">1    The first iterator i in the range [first,last) for which the following corresponding conditions hold: <strong>*i == value</strong>, [...]. Returns last if no such iterator is found.</p>\n</blockquote>\n<p>This indicates that find will use <em>operator==</em> to <em>find</em> the desired element.\nYou'll need to implement <code>operator==()</code> for your class/struct like this:</p>\n<pre><code>struct sToken\n{\n    std::string token;\n    unsigned int lineNb;\n    bool operator== (sToken const &amp; rhs) \n    { \n      return !token.compare(rhs.token) &amp;&amp; (lineNb == rhs.lineNb); \n    }\n};\n</code></pre>\n<p>or like this:</p>\n<pre><code>struct sToken\n{\n    std::string token;\n    unsigned int lineNb;\n};\nbool operator== (sToken const &amp; lhs, sToken const &amp; rhs) \n{ \n  return !lhs.token.compare(rhs.token) &amp;&amp; (lhs.lineNb == rhs.lineNb); \n}\n</code></pre>\n<p>This compares the whole struct to be equal. If you only want specific member to match each other: Adjust it.</p>\n", "OwnerUserId": "951423", "PostTypeId": "2", "Id": "17232247", "Score": "1", "CreationDate": "2013-06-21T09:49:27.057", "LastActivityDate": "2013-06-21T09:49:27.057"}});