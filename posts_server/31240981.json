post_cb({"bq_ids": {"n4140": {"so_31240981_31240981_0": {"length": 7, "quality": 1.0, "section_id": 3222}}, "n3337": {"so_31240981_31240981_0": {"length": 7, "quality": 1.0, "section_id": 3096}}, "n4659": {"so_31240981_31240981_0": {"length": 7, "quality": 1.0, "section_id": 3979}}}, "31240981": {"ViewCount": "288", "Body": "<p>Is there any alternative to array of references since it's not allowed in C++?\nC++ Standard 8.3.2/4:</p>\n<blockquote>\n<p id=\"so_31240981_31240981_0\">There shall be no references to references, no arrays of references, and no pointers to references.</p>\n</blockquote>\n<p>EDIT:\nI'm writing two classes <code>Cuboid</code> and <code>Quad</code> to draw a cuboid in OpenGL. You set the position, the size of the cuboid, it will calculate 8 vertices' positions stored in an array of <code>sf::Vector3&lt;&gt;</code> in  SFML. Then those will be passed in an array of pointers, as you answered, in four <code>Quad</code> to draw. So I don't wanna copy 8 vertices to 24 vertices since there's 6 faces (<code>Quad</code>) in a cuboid, each face has 4 vertices. I hardly ever use pointer.</p>\n", "AcceptedAnswerId": "31241035", "Title": "Alternative to array of references in c++?", "CreationDate": "2015-07-06T08:25:09.020", "Id": "31240981", "CommentCount": "3", "LastEditDate": "2015-07-06T13:20:35.230", "PostTypeId": "1", "LastEditorUserId": "20986", "LastActivityDate": "2015-07-06T13:20:35.230", "Score": "-2", "OwnerUserId": "4385565", "Tags": "<c++>", "AnswerCount": "3"}, "31241155": {"Id": "31241155", "PostTypeId": "2", "Body": "<p>You could use an array of pointers, or even better, a <code>vector</code> of <em>smart pointers</em>:</p>\n<pre><code>using namespace std;\nclass MyClass\n{\n    public:\n        MyClass() {}\n        void foo() {}\n    ....\n};\nvector&lt;shared_ptr&lt;MyClass&gt;&gt; V;\nV.push_back(make_shared&lt;MyClass&gt;());\nV[0]-&gt;foo();\n</code></pre>\n", "LastActivityDate": "2015-07-06T08:34:11.473", "CommentCount": "0", "CreationDate": "2015-07-06T08:34:11.473", "ParentId": "31240981", "Score": "0", "OwnerUserId": "1210291"}, "31241035": {"Id": "31241035", "PostTypeId": "2", "Body": "<p>You could use an array of pointers : </p>\n<pre><code>Foo *array[10]; // array of 10 Foo pointers\n</code></pre>\n<p>It depends a lot on what you want to do though.</p>\n", "LastEditorUserId": "509868", "LastActivityDate": "2015-07-06T08:39:08.630", "Score": "5", "CreationDate": "2015-07-06T08:27:39.247", "ParentId": "31240981", "CommentCount": "0", "OwnerUserId": "20986", "LastEditDate": "2015-07-06T08:39:08.630"}, "31241262": {"Id": "31241262", "PostTypeId": "2", "Body": "<p>You can use <code>std::reference_wrapper</code> declared in header <code>&lt;functional&gt;</code>.\nHere is a demonstrative program:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n#include &lt;functional&gt;\n#include &lt;iterator&gt;\n\nint main()\n{\n    int a[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };\n    std::vector&lt;std::reference_wrapper&lt;int&gt;&gt; v( std::begin( a ), std::end( a ) );\n\n    for ( int x : v ) std::cout &lt;&lt; x &lt;&lt; ' ';\n    std::cout &lt;&lt; std::endl;\n\n    std::for_each( v.begin(), v.end(), []( auto &amp;r ){ r.get() *= 2; } );\n\n    for ( int x : a ) std::cout &lt;&lt; x &lt;&lt; ' ';\n    std::cout &lt;&lt; std::endl;\n\n    std::sort( v.begin(), v.end(), std::greater&lt;int&gt;() );\n\n    for ( int x : v ) std::cout &lt;&lt; x &lt;&lt; ' ';\n    std::cout &lt;&lt; std::endl;\n\n    for ( int x : a ) std::cout &lt;&lt; x &lt;&lt; ' ';\n    std::cout &lt;&lt; std::endl;\n}\n</code></pre>\n<p>The program output is</p>\n<pre><code>1 2 3 4 5 6 7 8 9 \n2 4 6 8 10 12 14 16 18 \n18 16 14 12 10 8 6 4 2 \n2 4 6 8 10 12 14 16 18 \n</code></pre>\n", "LastActivityDate": "2015-07-06T08:40:44.037", "CommentCount": "0", "CreationDate": "2015-07-06T08:40:44.037", "ParentId": "31240981", "Score": "0", "OwnerUserId": "2877241"}});