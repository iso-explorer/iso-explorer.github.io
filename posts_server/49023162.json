post_cb({"bq_ids": {"n4140": {"so_49023162_49024008_0": {"length": 7, "quality": 1.0, "section_id": 6025}, "so_49023162_49023162_0": {"length": 33, "quality": 0.8918918918918919, "section_id": 7174}}, "n3337": {"so_49023162_49024008_0": {"length": 7, "quality": 1.0, "section_id": 5793}, "so_49023162_49023162_0": {"length": 33, "quality": 0.8918918918918919, "section_id": 6918}}, "n4659": {"so_49023162_49024008_0": {"length": 7, "quality": 1.0, "section_id": 7524}, "so_49023162_49023162_0": {"length": 34, "quality": 0.918918918918919, "section_id": 8682}}}, "49023162": {"ViewCount": "134", "Body": "<p>I've read the following two earlier questions,but still can't have a good undertanding.<br>\n1. <a href=\"https://stackoverflow.com/questions/33704978/why-do-i-need-to-include-typeinfo-when-using-the-typeid-operator\">Why do I need to #include  when using the typeid operator?</a><br>\n2. <a href=\"https://stackoverflow.com/questions/2788388/when-is-include-new-library-required-in-c/2788548#2788548\">When is #include  library required in C++?</a> </br></br></p>\n<p>Since the <code>typeid</code> uses the <code>type_info</code> class,it's reasonable to require us <code>#include&lt;typeinfo&gt;</code>.\nHowever,<strong>the <code>new operators</code> also uses <code>std::bad_alloc</code> ,why does it not require us to <code>#include &lt;new&gt;</code>?</strong>  ( I know that <code>sizeof()</code> does not require <code>&lt;cstddef&gt;</code> because the <code>size_t</code> coulde be replaced with built-in types during compile time,as long as the compiler knows what the <code>size_t</code> actually is. )  </p>\n<p>According to the most-voted answer in the 2th question,he says:</p>\n<blockquote>\n<p id=\"so_49023162_49023162_0\">Note: <strong>the implicit declarations do not introduce the names std, std::bad_alloc, and std::size_t</strong>, or any other names that the library uses to declare these names. Thus, a newexpression, delete-expression or function call that refers to one of these functions without including the header is well-formed. However, referring to std, std::bad_alloc, and std::size_t is ill-formed unless the name has been declared by including the appropriate header.  </p>\n</blockquote>\n<p>The paragraph above is confusing,since everytime we use a type,we need to declare a type before usage like <code>class A;void foo(A*);</code>And the <strong>implicit declaration</strong> of <code>void* operator new(std::size_t) throw(std::bad_alloc);</code>also has a type <code>std::bad_alloc</code> ,is it a privilege for the <strong>implicit declaration</strong> to not declare the type it use?</p>\n", "Title": "Why does the implicit declaration does not introduce the name?", "CreationDate": "2018-02-28T06:21:54.910", "LastActivityDate": "2018-02-28T07:21:26.920", "CommentCount": "5", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2018-02-28T07:05:33.360", "LastEditorUserId": "9133378", "Id": "49023162", "Score": "6", "OwnerUserId": "9133378", "Tags": "<c++>", "AnswerCount": "1"}, "49024008": {"Id": "49024008", "PostTypeId": "2", "Body": "<p>Forward declaration is used for <em>name lookup</em>. For the implicit declarations, the compiler already knows the semantic of these names, so it does not need to perform name lookup, thus a forward declaration (i.e. the header) is needless.</p>\n<p>The key is that <code>void foo(A*);</code> is written by <strong>you</strong>, so you must tell the compiler what <code>A</code> is via a forward declaration, while the implicit declaration is written by the <strong>compiler</strong>, so you needn't tell the complier what the names used in the declaration are.</p>\n<p>Note the reasons above are not sufficient to explain why <code>&lt;typeinfo&gt;</code> is required before any use of <code>typeid</code>. In fact, this rule is explicitly stated in the standard <a href=\"http://eel.is/c++draft/expr.typeid#6\" rel=\"nofollow noreferrer\">[expr.typeid] paragraph 6</a>:</p>\n<blockquote>\n<p id=\"so_49023162_49024008_0\">If the header <code>&lt;typeinfo&gt;</code> is not included prior to a use of <code>typeid</code>, the program is ill-formed.</p>\n</blockquote>\n", "LastActivityDate": "2018-02-28T07:21:26.920", "Score": "1", "CreationDate": "2018-02-28T07:21:26.920", "ParentId": "49023162", "CommentCount": "0", "OwnerUserId": "5376789"}});