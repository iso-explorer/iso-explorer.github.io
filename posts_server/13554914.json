post_cb({"bq_ids": {"n4140": {"so_13554914_13554914_1": {"length": 11, "quality": 0.8461538461538461, "section_id": 5346}, "so_13554914_13554914_0": {"length": 32, "quality": 0.9411764705882353, "section_id": 5344}}, "n3337": {"so_13554914_13554914_1": {"length": 11, "quality": 0.8461538461538461, "section_id": 5143}, "so_13554914_13554914_0": {"length": 32, "quality": 0.9411764705882353, "section_id": 5141}}, "n4659": {"so_13554914_13554914_1": {"length": 9, "quality": 0.6923076923076923, "section_id": 6771}, "so_13554914_13554914_0": {"length": 32, "quality": 0.9411764705882353, "section_id": 6767}}}, "13554914": {"ViewCount": "124", "Body": "<p>The standard seems to have two different responses to <code>char16_t</code> literals containing a character that can't be represented by <code>char16_t</code>. First of all, if the code point value can't be represented in 16 bits (i.e. it is not in the basic multilingual plane (BMP)), then the program is ill-formed (\u00a72.14.3/2):</p>\n<blockquote>\n<p id=\"so_13554914_13554914_0\">The value of a <code>char16_t</code> literal containing a single <em>c-char</em> is equal to its ISO 10646 code point value, provided that the code point is representable with a single 16-bit code unit. (That is, provided it is a basic multi-lingual plane code point.) If the value is not representable within 16 bits, the program is ill-formed.</p>\n</blockquote>\n<p>Since <code>\\U0001ABCD</code> is a single <em>c-char</em><sup>1</sup> but is not in the BMP, a program containing it is ill-formed.</p>\n<p>Okay, but later on in the same chapter, it says that if the value falls outside the implementation-defined range of <code>char16_t</code> then the literal has an implementation-defined value (\u00a72.14.3/4):</p>\n<blockquote>\n<p id=\"so_13554914_13554914_1\">The value of a character literal is implementation-defined if it falls outside of the implementation-defined range defined for [...] <code>char16_t</code> (for literals prefixed by \u2019<code>u</code>\u2019) [...]</p>\n</blockquote>\n<p>Since the implementation-defined range for <code>char16_t</code> must be at least 16 bits (to be able to store the entire BMP), we already know that the program is ill-formed for a value that falls outside that range. Why does the standard bother giving it an implementation-defined value?</p>\n<p><sup>1</sup> The production rules are <em>c-char</em> -&gt; <em>universal-character-name</em> -&gt; <code>\\U</code> <em>hex-quad</em> <em>hex-quad</em></p>\n", "Title": "Does u'\\U0001ABCD' have implementation-defined value or is it ill-formed?", "CreationDate": "2012-11-25T20:00:34.427", "LastActivityDate": "2012-11-25T21:06:44.007", "CommentCount": "6", "PostTypeId": "1", "Id": "13554914", "Score": "3", "OwnerUserId": "150634", "Tags": "<c++><character-encoding><c++11><standards><literals>", "AnswerCount": "1"}, "13554992": {"Id": "13554992", "PostTypeId": "2", "Body": "<p>The program is ill-formed as per 2.14.3/2, which means the error must be diagnosed. There's no need to analyze further, because implementations are not required to finish compiling or to produce an executable. The literal may be considered to still have a value, but it hardly matters.</p>\n<p>(Although implementations are permitted to compile and execute ill-formed programs. So I suppose in that case the fact that the character literal is still specified to have a value would matter.)</p>\n", "LastEditorUserId": "365496", "LastActivityDate": "2012-11-25T21:06:44.007", "Score": "0", "CreationDate": "2012-11-25T20:09:11.087", "ParentId": "13554914", "CommentCount": "2", "OwnerUserId": "365496", "LastEditDate": "2012-11-25T21:06:44.007"}});