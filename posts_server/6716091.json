post_cb({"6716277": {"ParentId": "6716091", "CommentCount": "0", "Body": "<p>You are <strong>not</strong> allowed to dereference a null pointer, so the compiler can generate code assuming that you don't do that. If you do it anyway, the compiler might be nice and tell you, but it doesn't have to. It's your part of the contract that says you must not do it.</p>\n<p>In this case, I bet the compiler <strong>will</strong> be nice and tell you the problem already at compile time, if you just set the warning level properly.</p>\n", "OwnerUserId": "597607", "PostTypeId": "2", "Id": "6716277", "Score": "4", "CreationDate": "2011-07-16T08:31:14.683", "LastActivityDate": "2011-07-16T08:31:14.683"}, "6716106": {"ParentId": "6716091", "CommentCount": "3", "Body": "<p>When you dereference a null pointer, you don't necessarily get an exception; all that is guaranteed is that the behavior is undefined (which really means that there is no guarantee at all as to what the behavior is).</p>\n<p>Once the <code>*temp</code> expression is evaluated, it is impossible to reason about the behavior of the program.</p>\n", "OwnerUserId": "151292", "PostTypeId": "2", "Id": "6716106", "Score": "7", "CreationDate": "2011-07-16T07:44:35.720", "LastActivityDate": "2011-07-16T07:44:35.720"}, "6716141": {"ParentId": "6716091", "CommentCount": "0", "Body": "<p>I don't sure I understand what you're trying todo. Dereferencing of ** NULL** pointer is not defined. </p>\n<p>In case you want to indicate that you method not always returns value you can declare it as:</p>\n<blockquote>\n<p id=\"so_6716091_6716141_0\">bool fun(int &amp;val);</p>\n</blockquote>\n<p>or stl way (similar to std::map insert):</p>\n<pre><code>std::pair&lt;int, bool&gt; fun();\n</code></pre>\n<p>or boost way:</p>\n<pre><code>boost::optional&lt;int&gt; fun();\n</code></pre>\n", "OwnerUserId": "135960", "PostTypeId": "2", "Id": "6716141", "Score": "0", "CreationDate": "2011-07-16T07:50:57.720", "LastActivityDate": "2011-07-16T07:50:57.720"}, "6716136": {"ParentId": "6716091", "CommentCount": "0", "Body": "<p>Don't * a null pointer, it's UB. (undefined behavior, you can never assume it'll do anything short of lighting your dog on fire and forcing you to take shrooms which will lead to FABULOUS anecdotes)</p>\n<p>Some history and information of null pointers in the Algol/C family: <a href=\"http://en.wikipedia.org/wiki/Pointer_(computing)#Null_pointer\" rel=\"nofollow\">http://en.wikipedia.org/wiki/Pointer_(computing)#Null_pointer</a></p>\n<p>Examples and implications of undefined behavior: <a href=\"http://en.wikipedia.org/wiki/Undefined_behavior#Examples_in_C\" rel=\"nofollow\">http://en.wikipedia.org/wiki/Undefined_behavior#Examples_in_C</a></p>\n", "OwnerUserId": "481547", "PostTypeId": "2", "Id": "6716136", "Score": "1", "CreationDate": "2011-07-16T07:49:53.347", "LastActivityDate": "2011-07-16T07:49:53.347"}, "6716109": {"ParentId": "6716091", "PostTypeId": "2", "CommentCount": "9", "Body": "<p>Dereferencing a null pointer is <strong>Undefined Behavior</strong>.  </p>\n<p>An Undefined Behavior means anything can happen, So it is not possible to define a behavior for this.</p>\n<p>Admittedly, I am going to add this C++ standard quote for the nth time, but seems it needs to be.</p>\n<p>Regarding Undefined Behavior,</p>\n<p><strong>C++ Standard section 1.3.24 states:</strong></p>\n<blockquote>\n<p id=\"so_6716091_6716109_0\">Permissible undefined behavior ranges from ignoring the situation completely with unpredictable results, to behaving during translation or program execution in a documented manner characteristic of the environment (with or without the issuance of a diagnostic message), to terminating a translation or execution (with the issuance of a diagnostic message).</p>\n</blockquote>\n<p><strong>NOTE:</strong><br>\nAlso, just to bring it to your notice:<br>\n<strong>Using</strong> a returned reference or pointer to a local variable inside a function is also an Undefined Behavior. You should be allocating the pointer on freestore(heap) using new and then returning a reference/pointer to it.  </br></br></p>\n<p><strong>EDIT:</strong><br>\n<em>As @James McNellis, appropriately points out in the comments,<br>\nIf the returned pointer or reference is not used, the behavior is <strong>well defined</strong>.</br></em></br></p>\n", "OwnerUserId": "452307", "LastEditorUserId": "452307", "LastEditDate": "2011-09-17T05:53:21.483", "Id": "6716109", "Score": "16", "CreationDate": "2011-07-16T07:45:06.563", "LastActivityDate": "2011-09-17T05:53:21.483"}, "bq_ids": {"n4140": {"so_6716091_6716109_0": {"section_id": 5768, "quality": 1.0, "length": 26}}, "n3337": {"so_6716091_6716109_0": {"section_id": 5541, "quality": 1.0, "length": 26}}, "n4659": {"so_6716091_6716109_0": {"section_id": 7225, "quality": 1.0, "length": 26}}}, "6716091": {"CommentCount": "2", "CreationDate": "2011-07-16T07:40:53.553", "PostTypeId": "1", "AcceptedAnswerId": "6716109", "LastEditorUserId": "36537", "LastActivityDate": "2012-12-13T10:29:29.233", "LastEditDate": "2012-12-13T10:29:29.233", "ViewCount": "4882", "FavoriteCount": "4", "Title": "Assigning a reference by dereferencing a NULL pointer", "Id": "6716091", "Score": "12", "Body": "<pre><code>int&amp;  fun()\n{\n    int * temp = NULL;\n    return *temp;\n}\n</code></pre>\n<p>In the above method, I am trying to do the dereferencing of a NULL pointer. When I call this function it does not give exception. I found when return type is by reference it does not give exception if it is by value then it does. Even when dereferencing of NULL pointer is assinged to reference (like the below line) then also it does not give.</p>\n<pre><code>int* temp = NULL:\nint&amp; temp1 = *temp;\n</code></pre>\n<p>Here my question is that does not compiler do the dereferencing in case of reference?</p>\n", "Tags": "<c++><pointers><reference><undefined-behavior><null-pointer>", "OwnerUserId": "784688", "AnswerCount": "5"}});