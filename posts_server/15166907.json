post_cb({"bq_ids": {"n4140": {"so_15166907_15168020_2": {"length": 37, "quality": 0.925, "section_id": 5811}, "so_15166907_15168020_1": {"length": 18, "quality": 0.72, "section_id": 5995}}, "n3337": {"so_15166907_15168020_2": {"length": 37, "quality": 0.925, "section_id": 5584}, "so_15166907_15168020_1": {"length": 21, "quality": 0.84, "section_id": 5763}}, "n4659": {"so_15166907_15168020_2": {"length": 28, "quality": 0.7, "section_id": 7273}}}, "15168020": {"Id": "15168020", "PostTypeId": "2", "Body": "<p>C++ 2003 5.2.2 p8</p>\n<blockquote>\n<p id=\"so_15166907_15168020_0\">The order of evaluation of arguments is unspecified. All side effects of argument expression evaluations take effect before the function is entered. The order of evaluation of the postfix expression and the argument expression list is unspecified.</p>\n</blockquote>\n<p>This means there is <strong>not</strong> a sequence point between evaluating <code>f(x)</code> and <code>args</code>.</p>\n<p>In C++ 2011 the whole concept of sequence points has been replaced (see <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n1944.htm\">N1944</a>), and that wording is now just a note:</p>\n<blockquote>\n<p id=\"so_15166907_15168020_1\">[ <em>Note:</em> The evaluations of the postfix expression and of the argument expressions are all unsequenced relative to one another. All side effects of argument expression evaluations are sequenced before the function is entered (see 1.9). \u2014 <em>end note</em> ]</p>\n</blockquote>\n<p>and 1.9 p15 says </p>\n<blockquote>\n<p id=\"so_15166907_15168020_2\">When calling a function (whether or not the function is inline), every value computation and side effect associated with any argument expression, or with the postfix expression designating the called function, is sequenced before execution of every expression or statement in the body of the called function. [ <em>Note:</em> Value computations and side effects associated with different argument expressions are unsequenced. \u2014 <em>end note</em> ]</p>\n</blockquote>\n<p>This says the expression <code>f(x)</code> and the expression <code>args</code> are sequenced before everything in the body of <code>g</code>, but that they are unsequenced relative to each other, which is the same as the C++03 rules but worded differently.</p>\n", "LastEditorUserId": "981959", "LastActivityDate": "2013-03-01T23:30:16.253", "Score": "9", "CreationDate": "2013-03-01T22:36:53.893", "ParentId": "15166907", "CommentCount": "0", "OwnerUserId": "981959", "LastEditDate": "2013-03-01T23:30:16.253"}, "15166907": {"ViewCount": "414", "Body": "<p>If I write <code>f(x)-&gt;g(args, ...)</code> can I rely on a sequence point after <code>f(x)</code> before the evaluation of <code>args, ...</code>?  I can see arguments both ways:</p>\n<ul>\n<li>\u00a71.9.17 \"When calling a function (whether or not the function is inline), there is a sequence point after the evaluation of all function arguments (if any) which takes place before execution of any expressions or statements in the function body. <strong>There is also a sequence point after the copying of a returned value and before the execution of any expressions outside the function.</strong>\"</li>\n<li>On the other hand, the object pointer is implicitly a hidden argument <code>this</code> as if I'd written <code>g(f(x), args, ...)</code> which suggests it's like an argument, and thus unspecified.</li>\n</ul>\n<p>The <code>-&gt;</code> operator is not a normal binary operator, since clearly <code>g(...)</code> <em>cannot</em> be evaluated before <code>f(x)</code> like it could if I wrote <code>f(x) + g(...)</code>.  I'm surprised I can't find some specific statement about it.</p>\n", "AcceptedAnswerId": "15168020", "Title": "Is there a sequence point between a function call returning an object and a method call on that object?", "CreationDate": "2013-03-01T21:08:04.280", "Id": "15166907", "CommentCount": "3", "FavoriteCount": "2", "PostTypeId": "1", "LastActivityDate": "2013-03-01T23:30:16.253", "Score": "14", "OwnerUserId": "479989", "Tags": "<c++><sequence-points><unspecified-behavior>", "AnswerCount": "2"}, "15167568": {"Id": "15167568", "PostTypeId": "2", "Body": "<p>Note, I think that you're asking one question in your title, and another in the body of your question.</p>\n<p>Well, it's not really contradictory.  To evaluate your function, the following things have to happen (not necessarily in this order).  </p>\n<ul>\n<li>x is evaluated (A)</li>\n<li>args is evaluated (B)</li>\n<li>...  is evaluated (C)</li>\n<li>f(x) is called (D)</li>\n<li>the return value of f(x) is copied  (E)</li>\n<li>return-&gt;g(args, ...) is called  (F)</li>\n</ul>\n<p>Now, the rules you've quoted indicate that </p>\n<ol>\n<li>(A) has to happen before (D), since there is a sequence point of evaluating the arguments to a function prior to evaluating.  </li>\n<li>(D) happens before (E), since the copy can't be made until the function runs.</li>\n<li>(F) happens after (E), since the implicit pointer is necessary to invoke g(args) *</li>\n<li>(B) and (C) happen before (F), since they are arguments.</li>\n</ol>\n<p>However, what is unsequenced is the relationship between (A), (B), and (C), or in your question between (B) and (C) and (D), since they aren't arguments to (F), they could be evaluated afterwards.  OR, they could be evaluated prior.</p>\n<p>* Interesting question.  What happens if g(args, ...) is a static member function.  In this case, since the returned pointer from f(x) isn't actually passed in, can it be sequenced earlier?  But that's a separate question.</p>\n", "LastActivityDate": "2013-03-01T22:00:30.600", "CommentCount": "0", "CreationDate": "2013-03-01T22:00:30.600", "ParentId": "15166907", "Score": "4", "OwnerUserId": "862231"}});