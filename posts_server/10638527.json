post_cb({"10638571": {"ParentId": "10638527", "CommentCount": "0", "Body": "<p>When you don't provide any constructor, only then the compiler generates the default constructor for your class. If you provide a constructor (even copy-constructor), then compiler will not generate the default constructor.</p>\n<p>By \"provide\" I mean when you <em>declare</em> and \"optionally\" <em>define</em> a constructor in your class.</p>\n", "OwnerUserId": "415784", "PostTypeId": "2", "Id": "10638571", "Score": "1", "CreationDate": "2012-05-17T15:19:47.450", "LastActivityDate": "2012-05-17T15:19:47.450"}, "10638590": {"ParentId": "10638527", "CommentCount": "5", "Body": "<p>A default constructor will be not be generated if any of the following are true</p>\n<ul>\n<li>There is a user defined constructor declared</li>\n<li>The type has a <code>const</code> or reference field </li>\n</ul>\n<p>You declared a constructor hence C++ won't provide a default generated one.  In this case though all of the fields of <code>Tileset</code> have useful default constructors so defining a default constructor here is very easy</p>\n<pre><code>Tileset() { }\n</code></pre>\n", "OwnerUserId": "23283", "PostTypeId": "2", "Id": "10638590", "Score": "10", "CreationDate": "2012-05-17T15:21:01.583", "LastActivityDate": "2012-05-17T15:21:01.583"}, "10638645": {"ParentId": "10638527", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>From C++ spec, 12.1.5</p>\n<blockquote>\n<p id=\"so_10638527_10638645_0\">If there is no <em>user-declared</em> constructor for class X, a default constructor is implicitly declared. An <em>implicitly-declared</em> default constructor is an <code>inline public</code> member of its class.</p>\n</blockquote>\n<p>Your <code>Tileset</code> class declared a constructor, hence C++ compiler did not declare an implicit constructor for you. The rationale for this behavior is that since you provided constructors that take parameters, you probably need these parameters in order to properly initialize an instance of your class. The assumption here is that if you wanted a default constructor in addition to a non-default one, you'd simply declare it.</p>\n", "OwnerUserId": "335858", "LastEditorUserId": "335858", "LastEditDate": "2012-05-17T15:29:44.887", "Id": "10638645", "Score": "1", "CreationDate": "2012-05-17T15:24:07.400", "LastActivityDate": "2012-05-17T15:29:44.887"}, "bq_ids": {"n4140": {"so_10638527_10638645_0": {"section_id": 369, "quality": 0.9375, "length": 15}}, "n3337": {"so_10638527_10638645_0": {"section_id": 359, "quality": 0.9375, "length": 15}}, "n4659": {"so_10638527_10638645_0": {"section_id": 381, "quality": 0.9375, "length": 15}}}, "10638527": {"CommentCount": "1", "ViewCount": "273", "CreationDate": "2012-05-17T15:17:19.837", "LastActivityDate": "2012-05-17T15:29:44.887", "Title": "At what condition is the default constructor generated?", "AcceptedAnswerId": "10638590", "PostTypeId": "1", "Id": "10638527", "Score": "4", "Body": "<p>I have the following class:</p>\n<pre><code>class Tileset { //base class\n\npublic:\n    static std::vector&lt;Tileset*&gt; list;\n    virtual ~Tileset() = 0;\n\nprotected:\n    std::vector&lt;Tile&gt; tiles_list;\n    sf::Texture sheet;\n\nprivate: //non copiable\n    Tileset(const Tileset&amp;);\n    Tileset&amp; operator=(const Tileset&amp;);\n};\n</code></pre>\n<p>where <code>sf::Texture</code> has a default constructor</p>\n<p>From my understanding a default constructor should be generated since every member can be default-constructed too.\nYet I have a compiler error when I try to construct a derived object without calling a <code>Tileset</code> constructor.\nCan someone explain why no default constructor is generated?</p>\n<p>edit : forgot to mention that <code>Tile</code> class doesn't have a default constructor. I'm not sure if that changes anything</p>\n", "Tags": "<c++><constructor><default-constructor>", "OwnerUserId": "875295", "AnswerCount": "3"}});