post_cb({"23462297": {"CommentCount": "4", "ViewCount": "41", "CreationDate": "2014-05-04T22:28:28.650", "LastActivityDate": "2014-05-04T22:49:57.783", "Title": "Memberfunction pointers and inheritance", "PostTypeId": "1", "Id": "23462297", "Score": "0", "Body": "<p>I am using templates to store memberfunction pointers. But i have a problem right now with inheritance. I dont know if this is a compiler bug or not but when i do</p>\n<pre><code>&amp;std::map&lt;T1, T2&gt;::size\n</code></pre>\n<p>i get a thiscall to std::_Tree instead of std::map. If i do</p>\n<pre><code>&amp;std::map&lt;T1, T2&gt;::swap\n</code></pre>\n<p>i get a thiscall to std::map. (tested on visual studio 2013)</p>\n<p>Now looking at the code for std::map it inherits from std::_Tree which defines size but not swap. My question now is if there is a way to get the type show up as __thiscall std::map::* in all cases. Cause getting it as std::_Tree is not really what i want.</p>\n", "Tags": "<c++><templates><inheritance><member-function-pointers>", "OwnerUserId": "1366591", "AnswerCount": "1"}, "23462466": {"ParentId": "23462297", "CommentCount": "3", "Body": "<p>I'm afraid there is nothing you can do. The implementer of the standard library is allowed to inherit methods from base classes as per</p>\n<blockquote>\n<h3>17.6.5.11 Derived classes [derivation]</h3>\n<p id=\"so_23462297_23462466_0\">1 - An implementation may derive any class in the C++ standard library from a class with a name reserved to the implementation.</p>\n</blockquote>\n<p>It doesn't say either way whether methods (and other members) are allowed to be inherited from a base class, but it is clearly not forbidden.</p>\n<p>Even the signature might not be what you expect:</p>\n<blockquote>\n<h3>17.6.5.5 Member functions [member.functions]</h3>\n<p id=\"so_23462297_23462466_1\">2 - An implementation may declare additional non-virtual member function signatures within a class:</p>\n<ul>\n<li>by adding arguments with default values to a member function signature<sup>186</sup>; [...]</li>\n</ul>\n<p id=\"so_23462297_23462466_2\">186) Hence, the address of a member function of a class in the C++ standard library has an unspecified type.</p>\n</blockquote>\n<p>Sorry :)</p>\n", "OwnerUserId": "2073257", "PostTypeId": "2", "Id": "23462466", "Score": "2", "CreationDate": "2014-05-04T22:49:57.783", "LastActivityDate": "2014-05-04T22:49:57.783"}, "bq_ids": {"n4140": {"so_23462297_23462466_2": {"section_id": 6341, "quality": 0.7777777777777778, "length": 7}, "so_23462297_23462466_0": {"section_id": 6356, "quality": 1.0, "length": 9}, "so_23462297_23462466_1": {"section_id": 6341, "quality": 1.0, "length": 10}}, "n3337": {"so_23462297_23462466_2": {"section_id": 6098, "quality": 0.7777777777777778, "length": 7}, "so_23462297_23462466_0": {"section_id": 6113, "quality": 1.0, "length": 9}, "so_23462297_23462466_1": {"section_id": 6098, "quality": 1.0, "length": 10}}, "n4659": {"so_23462297_23462466_2": {"section_id": 7709, "quality": 0.6666666666666666, "length": 6}, "so_23462297_23462466_0": {"section_id": 7865, "quality": 1.0, "length": 9}, "so_23462297_23462466_1": {"section_id": 49, "quality": 0.6, "length": 6}}}});