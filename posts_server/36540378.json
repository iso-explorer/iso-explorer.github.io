post_cb({"36540378": {"CommentCount": "0", "ViewCount": "186", "CreationDate": "2016-04-11T05:22:46.217", "LastActivityDate": "2016-04-11T05:57:16.317", "Title": "Is 'std::allocator<T>::construct' thread-safe, when constructing different elements?", "AcceptedAnswerId": "36540825", "PostTypeId": "1", "Id": "36540378", "Score": "2", "Body": "<p>Does the c++ standard guarantees that constructing different elements with std::allocator is thread-safe? For example:</p>\n<pre><code>// main thread\nstd::allocator&lt;T&gt; alloc;\nauto *p = alloc.allocate(2);\n\n// thread1\nalloc.construct(p);\n\n// thread2\nalloc.construct(p + 1)\n</code></pre>\n<p>Also, is std::allocator::destroy thread-safe for different elements?</p>\n<p>Thanks!</p>\n", "Tags": "<c++><multithreading><c++11>", "OwnerUserId": "5384363", "AnswerCount": "1"}, "36540825": {"ParentId": "36540378", "CommentCount": "1", "Body": "<blockquote>\n<p id=\"so_36540378_36540825_0\">20.7.9.1 allocator members [allocator.members]</p>\n<p id=\"so_36540378_36540825_1\">1 Except for the destructor, member functions of the default allocator shall not introduce data races (1.10)\n  as a result of concurrent calls to those member functions from different threads. Calls to these functions\n  that allocate or deallocate a particular unit of storage shall occur in a single total order, and each such\n  deallocation call shall happen before the next allocation (if any) in this order.</p>\n</blockquote>\n<p>So yes, concurrent calls to <code>construct</code> and <code>destroy</code> on <code>std::allocator&lt;T&gt;</code> are guaranteed to be thread-safe. </p>\n", "OwnerUserId": "2189130", "PostTypeId": "2", "Id": "36540825", "Score": "5", "CreationDate": "2016-04-11T05:57:16.317", "LastActivityDate": "2016-04-11T05:57:16.317"}, "bq_ids": {"n4140": {"so_36540378_36540825_1": {"section_id": 4235, "quality": 0.9736842105263158, "length": 37}}, "n3337": {"so_36540378_36540825_1": {"section_id": 4076, "quality": 0.9736842105263158, "length": 37}}, "n4659": {"so_36540378_36540825_1": {"section_id": 5497, "quality": 0.9736842105263158, "length": 37}}}});