post_cb({"32768225": {"Id": "32768225", "PostTypeId": "2", "Body": "<p>An alias template is [temp.alias]</p>\n<blockquote>\n<p id=\"so_32768034_32768225_0\">A template-declaration in which the declaration is an alias-declaration (Clause 7) declares the identifier to\n  be a alias template. An alias template is a name for a family of types. The name of the alias template is a\n  template-name.</p>\n</blockquote>\n<p>And if we look at 14.2 [temp] we have</p>\n<blockquote>\n<p id=\"so_32768034_32768225_1\">A template-declaration can appear only as a namespace scope or class scope declaration. In a function\n  template declaration, the last component of the declarator-id shall not be a template-id.</p>\n</blockquote>\n<p>So yes cppreference is off saying that it can be declared at block scope and your compilers are correct.  If you do click on the link of <a href=\"http://en.cppreference.com/w/cpp/language/declarations\" rel=\"nofollow noreferrer\">block declarations</a> It will bring you to a list of declarations and in that it has <a href=\"http://en.cppreference.com/w/cpp/language/templates\" rel=\"nofollow noreferrer\">Template declaration</a> and in there it has</p>\n<blockquote>\n<p id=\"so_32768034_32768225_2\">declaration of a class (including struct and union), a member class or member enumeration type, a function or member function, a static data member at namespace scope, a variable or static data member at class scope, (since C++14) or an alias template (since C++11) It may also define a template specialization.</p>\n</blockquote>\n<p>As for why the standard says that templates can only be declared in namespace scope or class scope I like <a href=\"https://stackoverflow.com/users/649665/james-kanze\">James Kanze</a> <a href=\"https://stackoverflow.com/a/6032668/4342498\">answer</a></p>\n<blockquote>\n<p id=\"so_32768034_32768225_3\">The problem is probably linked to the historical way templates were implemented: early implementation techniques (and some still used today) require all symbols in a template to have external linkage. (Instantiation is done by generating the equivalent code in a separate file.) And names defined inside a function never have linkage, and cannot be referred to outside of the scope in which they were defined.</p>\n</blockquote>\n", "LastEditorUserId": "-1", "LastActivityDate": "2015-09-24T19:53:01.107", "Score": "5", "CreationDate": "2015-09-24T18:15:33.760", "ParentId": "32768034", "CommentCount": "10", "OwnerUserId": "4342498", "LastEditDate": "2017-05-23T10:27:21.520"}, "bq_ids": {"n4140": {"so_32768034_32768223_0": {"length": 8, "quality": 1.0, "section_id": 49}, "so_32768034_32768225_0": {"length": 16, "quality": 0.8888888888888888, "section_id": 165}, "so_32768034_32768225_1": {"length": 15, "quality": 1.0, "section_id": 49}}, "n3337": {"so_32768034_32768223_0": {"length": 8, "quality": 1.0, "section_id": 44}, "so_32768034_32768225_0": {"length": 16, "quality": 0.8888888888888888, "section_id": 159}, "so_32768034_32768225_1": {"length": 15, "quality": 1.0, "section_id": 44}}, "n4659": {"so_32768034_32768223_0": {"length": 8, "quality": 1.0, "section_id": 50}, "so_32768034_32768225_0": {"length": 16, "quality": 0.8888888888888888, "section_id": 169}, "so_32768034_32768225_1": {"length": 15, "quality": 1.0, "section_id": 50}}}, "32768034": {"ViewCount": "270", "Body": "<p>As per <a href=\"http://en.cppreference.com/w/cpp/language/type_alias\" rel=\"nofollow\">http://en.cppreference.com/w/cpp/language/type_alias</a>, aliases are block-level declarations. It doesn't say anything special about template aliases, so it should be read that template aliases are block-level declarations as well.</p>\n<p>However, it is impossible to use template aliases at block level. The errors are different depending on the compiler - while g++ gives a meaningful message, saying that templates are not allowed at block scope, clang is completely cryptic. (example: <a href=\"http://coliru.stacked-crooked.com/a/0f0862dad6f3da61\" rel=\"nofollow\">http://coliru.stacked-crooked.com/a/0f0862dad6f3da61</a>). </p>\n<p>Questions I have so far:</p>\n<ul>\n<li>Does cppreference fail to specify that template aliases can not be used at block scope? (Or do I need to take a reading course?)</li>\n<li>Are the compilers correct in denying template aliases on block level (the feature I find very interesting for my particular coding habits)</li>\n<li>If the answer to the second is Yes, what might be the rationale for this? Why would compiler deny me this pure syntax sugar? </li>\n</ul>\n", "Title": "Template alias scope", "CreationDate": "2015-09-24T18:03:50.193", "LastActivityDate": "2015-09-24T19:53:01.107", "CommentCount": "1", "PostTypeId": "1", "Id": "32768034", "Score": "1", "OwnerUserId": "5245033", "Tags": "<c++><template-aliases>", "AnswerCount": "2"}, "32768223": {"Id": "32768223", "PostTypeId": "2", "Body": "<p>The compilers are behaving correctly.</p>\n<p>Section 14 of the C++14 standard:</p>\n<blockquote>\n<p id=\"so_32768034_32768223_0\">A template-declaration can appear only as a namespace scope or class\n  scope declaration.</p>\n</blockquote>\n", "LastActivityDate": "2015-09-24T18:15:15.473", "CommentCount": "0", "CreationDate": "2015-09-24T18:15:15.473", "ParentId": "32768034", "Score": "1", "OwnerUserId": "3585575"}});