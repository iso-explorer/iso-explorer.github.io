post_cb({"bq_ids": {"n4140": {"so_23861640_23861758_1": {"length": 21, "quality": 0.875, "section_id": 6148}}, "n3337": {"so_23861640_23861758_1": {"length": 21, "quality": 0.875, "section_id": 5911}}, "n4659": {"so_23861640_23861758_1": {"length": 21, "quality": 0.875, "section_id": 7644}}}, "23861640": {"ViewCount": "1971", "Body": "<p>In the question <a href=\"https://stackoverflow.com/questions/1642028/what-is-the-name-of-this-operator?rq=1\">What is the \"--&gt;\" operator in C++?</a> it asks what --&gt; does and gives a link to a <a href=\"https://groups.google.com/forum/m/#!msg/comp.lang.c++.moderated/VRhp2vEaheU/IN1YDXhz8TMJ\" rel=\"nofollow noreferrer\">comp.lang.c++.moderated thread. </a> scrolling down the thread a bit further found me this: </p>\n<blockquote>\n<p id=\"so_23861640_23861640_0\">&gt; There is no such operator in C++.</p>\n<p id=\"so_23861640_23861640_1\">&gt; It's just a combination of two operators: postfix decrement \"--\" and\n  &gt; greater \"&gt;\".</p>\n<p id=\"so_23861640_23861640_2\">&gt; That's why this example works.</p>\n<p id=\"so_23861640_23861640_3\">&gt; Try ( x --&gt; 20 ) and you'll get no output in this case;)</p>\n<p id=\"so_23861640_23861640_4\">Of course there is. It is described together with \"runs to\" operator:</p>\n</blockquote>\n<pre><code>#include &lt;stdio.h&gt;\nint main()\n{\n   int x = 10;\n   while( x --&gt;&gt; 0 ) // x runs to 0\n     printf(\"%d \", x);\n}\n</code></pre>\n<p>What does the \"runs to\" operator actually do?</p>\n", "AcceptedAnswerId": "23861758", "Title": "What does -->> actually do?", "CreationDate": "2014-05-26T01:37:57.610", "Id": "23861640", "CommentCount": "12", "FavoriteCount": "3", "PostTypeId": "1", "LastEditDate": "2017-05-23T12:01:37.423", "LastEditorUserId": "-1", "LastActivityDate": "2014-05-26T02:45:14.913", "ClosedDate": "2014-05-26T09:00:48.023", "Score": "-4", "OwnerUserId": "2687781", "Tags": "<c++>", "AnswerCount": "3"}, "23861669": {"Id": "23861669", "PostTypeId": "2", "Body": "<pre><code>while( x --&gt;&gt; 0 ) // x runs to 0\n</code></pre>\n<p>No, the \"goes to operator\" is <code>--&gt;</code> with only one <code>&gt;</code> sign. It decreases <code>x</code> by one and then compares the result to zero.</p>\n<p>The <code>-- &gt;&gt; 0</code> \"runs to operator\" decreases <code>x</code> and then bitshifts the result rightward by zero. Bitshifting by zero does nothing for nonnegative <code>x</code>, otherwise it's implementation-defined (usually does nothing, but could be random). Zero bitshifted by zero is zero, which is interpreted as <code>false</code>, at which point the loop will terminate.</p>\n<p>So it \"works\" but it's a terrible way of expressing a loop.</p>\n", "LastEditorUserId": "153285", "LastActivityDate": "2014-05-26T02:45:14.913", "Score": "6", "CreationDate": "2014-05-26T01:42:26.640", "ParentId": "23861640", "CommentCount": "0", "OwnerUserId": "153285", "LastEditDate": "2014-05-26T02:45:14.913"}, "23861758": {"Id": "23861758", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_23861640_23861758_0\">while( x --&gt;&gt; 0 ) // x runs to 0</p>\n</blockquote>\n<p>This is actually a hybrid of the <code>--</code> (post-decrement) and <code>&gt;&gt;</code> (bitshift right) operators, better formatted as:</p>\n<pre><code>while (x-- &gt;&gt; 0)\n</code></pre>\n<p>For this specific usage, with 0 on the right hand side, x is decremented with each loop iteration due to the postfix <code>--</code>, and the decremented value is shifted 0 bits by <code>&gt;&gt; 0</code> which <em>does nothing at all when <code>x</code> is non-negative</em>.</p>\n<p>When <code>x</code> is 1 then the post-decrement reduces it to 0 and the resultant value of bitshifting that is 0, which will cause the loop to terminate.</p>\n<p>More generally, if you try to use <code>&gt;&gt;</code> on a negative value (e.g. <code>x</code> starts at 0 or a negative value great than <code>INT_MIN</code>, so <code>x--</code> yields a negative value) the result is <strong><em>implementation defined</em></strong>, which means you have to consult your compiler documentation.  You could use your compiler documentation to reason about how it would behave in the loop....</p>\n<p>Relevant part of the Standard: 5.8/3:</p>\n<blockquote>\n<p id=\"so_23861640_23861758_1\">The value of <code>E1 &gt;&gt; E2</code> is <code>E1</code> right-shifted <code>E2</code> bit positions. If <code>E1</code> has an unsigned type or if <code>E1</code> has a signed type and a non-negative value, the value of the result is the integral part of the quotient of <code>E1/2^E2</code>. If <code>E1</code> has a signed type and a negative value, the resulting value is implementation-defined.</p>\n</blockquote>\n<p>BTW /- for Visual Studio, per <a href=\"http://msdn.microsoft.com/en-us/library/336xbhcz.aspx\" rel=\"nofollow\">http://msdn.microsoft.com/en-us/library/336xbhcz.aspx</a>, the implementation defined behaviour is \"No shift operation is performed if additive-expression is 0.\".  I can't find anything in the GCC manual about this (would have expected it <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.0/gcc/Integers-implementation.html#Integers-implementation\" rel=\"nofollow\">here</a>).</p>\n", "LastEditorUserId": "410767", "LastActivityDate": "2014-05-26T02:17:45.057", "Score": "5", "CreationDate": "2014-05-26T01:59:36.437", "ParentId": "23861640", "CommentCount": "3", "OwnerUserId": "410767", "LastEditDate": "2014-05-26T02:17:45.057"}, "23861684": {"Id": "23861684", "PostTypeId": "2", "Body": "<p>-- decrements but returns the value of the variable <em>before</em> it was decremented, &gt;&gt; shifts to the right by the right operand, which is 0 (a.k.a. a no-op), then it implicitly compares the result against 0.</p>\n", "LastActivityDate": "2014-05-26T01:45:30.927", "CommentCount": "0", "CreationDate": "2014-05-26T01:45:30.927", "ParentId": "23861640", "Score": "0", "OwnerUserId": "559751"}});