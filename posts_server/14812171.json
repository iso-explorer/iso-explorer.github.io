post_cb({"bq_ids": {"n4140": {"so_14812171_14812223_0": {"length": 56, "quality": 0.9491525423728814, "section_id": 62}}, "n3337": {"so_14812171_14812223_0": {"length": 56, "quality": 0.9491525423728814, "section_id": 57}}, "n4659": {"so_14812171_14812223_0": {"length": 56, "quality": 0.9491525423728814, "section_id": 64}}}, "14812223": {"Id": "14812223", "PostTypeId": "2", "Body": "<p>I think <code>g++</code> is adhering to the standard when it compiles your snippet.</p>\n<p>The following extract should be the reference to the right part of the standard (section 14.1.9):</p>\n<blockquote>\n<p id=\"so_14812171_14812223_0\">A default template-argument is a template-argument (14.3) specified\n  after = in a template-parameter. A default template-argument may be\n  specified for any kind of template-parameter (type, non-type,\n  template) that is not a template parameter pack (14.5.3). A default\n  template-argument may be specified in a template declaration. A\n  default template-argument shall not be specified in the\n  template-parameter-lists of the definition of a member of a class\n  template that appears outside of the member\u2019s class. A default\n  template-argument shall not be specified in a friend class template\n  declaration. If a friend function template declaration specifies a\n  default template-argument, that declaration shall be a definition and\n  shall be the only declaration of the function template in the\n  translation unit.</p>\n</blockquote>\n", "LastActivityDate": "2013-02-11T12:46:45.633", "CommentCount": "0", "CreationDate": "2013-02-11T12:46:45.633", "ParentId": "14812171", "Score": "3", "OwnerUserId": "771663"}, "14812215": {"Id": "14812215", "PostTypeId": "2", "Body": "<p>It is a MSVC bug.</p>\n<p>The bug is in the handling of template functions with default parameters, as you probably guessed.</p>\n<p>Their workaround is to supply all function parameters.  <em>(yuck)</em></p>\n<p>Acknowledged <a href=\"https://connect.microsoft.com/VisualStudio/feedback/details/583081/\">here</a>.</p>\n", "LastActivityDate": "2013-02-11T12:46:27.423", "CommentCount": "1", "CreationDate": "2013-02-11T12:46:27.423", "ParentId": "14812171", "Score": "6", "OwnerUserId": "16287"}, "14812171": {"ViewCount": "689", "Body": "<p>The following bit of code compiles in GCC 4.5.3 but does not compile in VS 2008 and 2010. Is this due to a VS compiler bug or does the standard forbid giving default function template argument values?</p>\n<pre><code>#include &lt;cstdlib&gt;\n\nstruct Bar\n{\n    enum Group{ A , B , C };\n};\n\nstruct Foo\n{\n    template&lt;typename T&gt;\n    static void getSome( typename T::Group = T::A );\n};\n\ntemplate&lt;typename T&gt;\nvoid Foo::getSome( typename T::Group )\n{\n};\n\nint main()\n{\n    Foo::getSome&lt;Bar&gt;();            // Does not compile in VS 2008 &amp; 2010 (compiles in gcc 4.5.3)\n    Foo::getSome&lt;Bar&gt;( Bar::C );    // Compiles in VS 2008 and gcc 4.5.3\n    return EXIT_SUCCESS;\n}\n</code></pre>\n<p>Error message</p>\n<pre><code>prog.cpp(11) : error C2589: '::' : illegal token on right side of '::'\nprog.cpp(11) : error C2059: syntax error : '::'\n</code></pre>\n", "AcceptedAnswerId": "14812215", "Title": "Member function template argument default value", "CreationDate": "2013-02-11T12:42:54.653", "Id": "14812171", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2013-02-11T12:46:45.633", "Score": "1", "OwnerUserId": "181783", "Tags": "<c++><templates><function-templates><default-arguments>", "AnswerCount": "2"}});