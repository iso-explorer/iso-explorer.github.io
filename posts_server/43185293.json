post_cb({"bq_ids": {"n4140": {"so_43185293_43186035_0": {"length": 16, "quality": 0.7272727272727273, "section_id": 5991}}, "n3337": {"so_43185293_43186035_0": {"length": 16, "quality": 0.7272727272727273, "section_id": 5759}}}, "43186035": {"PostTypeId": "2", "Body": "<p>The initialization of the function parameters is unsequenced as per a note in  C++17 5.2.2/4:</p>\n<blockquote>\n<p id=\"so_43185293_43186035_0\">When a function is called, each parameter (8.3.5) shall be initialized (8.5, 12.8, 12.1) with its corresponding\n  argument. [ Note: Such initializations are indeterminately sequenced with respect to each other (1.9) \u2014\n  end note ]</p>\n</blockquote>\n<p>Meaning that even if the function arguments are guaranteed to be evaluated left-to-right (which I can't find any info about in C++17 draft), the initialization of the arguments is still indeterminately sequenced. </p>\n<p>Meaning that for example, if your parameters all call the same copy constructor, which in turn modifies a global/static resource, your program has unspecified behavior:</p>\n<pre><code>static int f;\n\nFoo::Foo (const Foo&amp; foo)\n  : x(f++)\n{}\n\n...\n\nvoid func (Foo a, Foo b, Foo c)\n{\n  std::cout &lt;&lt; a.x &lt;&lt; b.x &lt;&lt; c.x;  // unspecified output\n}\n</code></pre>\n<p>A good compiler will give a warning upon spotting reliance on unspecified behavior = deterministic but undocumented behavior, which you can't assume anything about.</p>\n", "LastActivityDate": "2017-04-04T06:37:46.930", "LastEditorUserId": "584518", "Id": "43186035", "CommentCount": "3", "CreationDate": "2017-04-03T13:32:01.603", "ParentId": "43185293", "Score": "0", "OwnerUserId": "584518", "LastEditDate": "2017-04-04T06:37:46.930"}, "43185293": {"ViewCount": "141", "Body": "<p>If I understand the C++17 standard correctly then function arguments should be indeterminately sequenced (P0145R3).\nPlease consider the following testcase:</p>\n<pre><code>#include &lt;stdio.h&gt;\nvoid foo(int a, int b, int c) { printf(\"%d %d %d\\n\", a, b, c); }\nint main() {\n  int i = 0;\n  foo(++i, ++i, ++i);\n}\n</code></pre>\n<p>clang warns incorrectly:</p>\n<blockquote>\n<p id=\"so_43185293_43185293_0\">warning: multiple unsequenced modifications to 'i' [-Wunsequenced]</p>\n</blockquote>\n<p>and prints: 1 2 3</p>\n<p>gcc also warns:</p>\n<blockquote>\n<p id=\"so_43185293_43185293_1\">warning: operation on \u2018i\u2019 may be undefined [-Wsequence-point]</p>\n</blockquote>\n<p>and prints: 3 3 3</p>\n<p>Which output is correct?</p>\n", "AcceptedAnswerId": "43186035", "Title": "int i=0; foo(++i, ++i, ++i); well defined?", "CreationDate": "2017-04-03T12:58:31.470", "Id": "43185293", "CommentCount": "11", "LastEditDate": "2017-04-03T12:59:53.503", "PostTypeId": "1", "LastEditorUserId": "3540970", "LastActivityDate": "2017-04-04T06:37:46.930", "Score": "-4", "OwnerUserId": "3540970", "Tags": "<c++><c++1z>", "AnswerCount": "1"}});