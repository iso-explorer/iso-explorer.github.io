post_cb({"bq_ids": {"n4140": {"so_23341484_23342205_1": {"length": 47, "quality": 0.9215686274509803, "section_id": 5462}}, "n3337": {"so_23341484_23342205_1": {"length": 47, "quality": 0.9215686274509803, "section_id": 5249}}, "n4659": {"so_23341484_23342205_1": {"length": 47, "quality": 0.9215686274509803, "section_id": 6896}}}, "23342078": {"Id": "23342078", "PostTypeId": "2", "Body": "<p>This statement</p>\n<pre><code>enum A : int;\n</code></pre>\n<p>is a declaration. It means that name A is declared to denote some scoped enumeration type. It does not occupy memory.</p>\n<p>This statement</p>\n<pre><code>class B{};      \n</code></pre>\n<p>is also a class declaration. It is called also a class definition because it defines the structure of the class. However this declaration does not occupy memory. It is an object of an enumeration or class type that occupies memory. These statement</p>\n<pre><code>std::cout &lt;&lt; sizeof(A) &lt;&lt; '\\n';\nstd::cout &lt;&lt; sizeof(B) &lt;&lt; '\\n';\n</code></pre>\n<p>show how many memory could occupy an object if it would be defined as having one of these types.</p>\n<p>Consider the following code</p>\n<pre><code>#include &lt;iostream&gt;\n\nint main()\n{\n   std::cout &lt;&lt; sizeof( int ) &lt;&lt; std::endl;\n}\n</code></pre>\n<p>This code outputs the size of objects of type int. However neither object was defined in the program.</p>\n<p>And compare the code above with the following code</p>\n<pre><code>#include &lt;iostream&gt;\n\nint main()\n{\n   int x;\n   std::cout &lt;&lt; sizeof( x ) &lt;&lt; std::endl;\n}\n</code></pre>\n<p>In this program an object of type x was defined. It does indeed occupy memory. int is only a simple type specifer. The same way A and B from your code are type specifiers. Type specifiers are only some desciptions. They do not occupy memory.</p>\n", "LastEditorUserId": "2877241", "LastActivityDate": "2014-04-28T13:17:41.363", "Score": "0", "CreationDate": "2014-04-28T13:12:28.393", "ParentId": "23341484", "CommentCount": "0", "OwnerUserId": "2877241", "LastEditDate": "2014-04-28T13:17:41.363"}, "23342205": {"Id": "23342205", "PostTypeId": "2", "Body": "<p>The type is <em>complete</em>, although not <em>defined</em> after an <em>opaque-enum-declaration</em>:</p>\n<blockquote>\n<p id=\"so_23341484_23342205_0\">7.2 [dlc.enum]/3</p>\n<p id=\"so_23341484_23342205_1\">An opaque-enum-declaration is either a redeclaration of an enumeration\n  in the current scope or a declaration of a new enumeration. [ Note: <strong>An\n  enumeration declared by an opaque-enum-declaration has fixed\n  underlying type and is a complete type.</strong>( The list of enumerators can be\n  provided in a later redeclaration with an enumspecifier. \u2014end note ] A\n  scoped enumeration shall not be later redeclared as unscoped or with a\n  different underlying type. An unscoped enumeration shall not be later\n  redeclared as scoped and each redeclaration shall include an enum-base\n  specifying the same underlying type as in the original declaration.</p>\n</blockquote>\n<p>The <strong>complete type</strong> above means that you <em>can</em> use <code>sizeof</code> after just seeing the <em>opaque-enum-declaration</em>, which seems to be your concern. It is still not a <em>definition</em>, as a definition require all aspects of the type to be specified, which the <em>opaque-enum-declaration</em> does not.</p>\n<p>If you were to compare this with a class definition, the <em>opaque-enum-declaration</em> would be the equivalent of a class [half] definition containing all non-static data members and an attribute stating whether virtual functions will be present, but without declaring any of the member functions.  The size of the object would be clear, but not how to use it.</p>\n", "LastEditorUserId": "36565", "LastActivityDate": "2014-04-28T13:25:26.123", "Score": "2", "CreationDate": "2014-04-28T13:18:30.270", "ParentId": "23341484", "CommentCount": "2", "OwnerUserId": "36565", "LastEditDate": "2014-04-28T13:25:26.123"}, "23341719": {"Id": "23341719", "PostTypeId": "2", "Body": "<p>Size is only one aspect of an <code>enum</code>. Although it is enough for the compiler to know the size in order to let you use your <code>enum</code> in other declarations or definitions, the <code>enum</code> itself remains undefined until you enumerate its members. In essence, <code>enum A : int</code> promises the compiler two things - namely, that</p>\n<ul>\n<li>There is an <code>enum A</code> defined some place else, and</li>\n<li>All members of <code>enum A</code> will have values that fit in an <code>int</code>.</li>\n</ul>\n<p>Once the compiler discovers the definition of <code>enum A</code>, it checks that the members are small enough for the declared size, and considers the <code>enum</code> defined. From that point on, providing another definition of the same <code>enum A</code> is an error.</p>\n<p>In contrast, your <code>class B</code> is already fully complete: you told the compiler that <code>class B</code> is going to be empty; you cannot provide an alternative definition for it, giving it some members.</p>\n<p><strong>EDIT :</strong></p>\n<blockquote>\n<p id=\"so_23341484_23341719_0\">The opaque-enum-declaration enum A : int; below is defined as far as I can understand.</p>\n</blockquote>\n<p><code>XYZ</code> is not considered defined until a point in your program after which providing a definition of <code>XYZ</code> constitutes an error. To that end, <code>enum A</code> remains undefined in your program, because you are allowed to define it after <code>main</code>, like this:</p>\n<pre><code>#include &lt;iostream&gt;\nenum A : int; // opaque-enum-declaration\n\nint main() {\n    A a;\n    std::cout &lt;&lt; a &lt;&lt; '\\n';\n}\n// This is allowed\nenum A : int {quick, brown, fox};\n</code></pre>\n<p>Incidentally, this does not prevent your program from compiling successfully, because in C++ <em>undefined</em> is not an equivalent of <em>unusable</em>.</p>\n", "LastEditorUserId": "335858", "LastActivityDate": "2014-04-28T13:43:14.413", "Score": "2", "CreationDate": "2014-04-28T12:53:40.560", "ParentId": "23341484", "CommentCount": "14", "OwnerUserId": "335858", "LastEditDate": "2014-04-28T13:43:14.413"}, "23341484": {"ViewCount": "817", "Body": "<p>\u00a73.1/2 says that an <em>opaque-enum-declaration</em> is a declaration that is <strong>not</strong> a definition. Nevertheless it occupies space in memory. Compare it with a class <strong>definition</strong> that also has a size. Both are complete types by the Standard. Why one is a declaration and the other is a definition?</p>\n<pre><code>#include &lt;iostream&gt;\nenum A : int;   // opaque-enum-declaration\nclass B{};      // a class definition\n\nint main() {\n    std::cout &lt;&lt; sizeof(A) &lt;&lt; '\\n';\n    std::cout &lt;&lt; sizeof(B) &lt;&lt; '\\n';\n}\n</code></pre>\n<p>Output</p>\n<blockquote>\n<p id=\"so_23341484_23341484_0\">4</p>\n<p id=\"so_23341484_23341484_1\">1</p>\n</blockquote>\n<p><strong>Edit</strong></p>\n<p>The opaque-enum-declaration <code>enum A : int;</code> below is defined as far as I can understand.</p>\n<pre><code>#include &lt;iostream&gt;\nenum A : int;   // opaque-enum-declaration\n\nint main() {\n    A a;\n    std::cout &lt;&lt; a &lt;&lt; '\\n';\n}\n</code></pre>\n<p><strong>Edit1</strong></p>\n<p>As far as the variable <code>a</code> is concerned, there's no difference between the prior snippet and the one below. They both leave the variable undefined. Thus, it's difficult to accept that <code>enum : int;</code> is a declaration and <code>enum A : int {quick, brown, fox};</code> is a definition.</p>\n<pre><code>#include &lt;iostream&gt;\nenum A : int {quick, brown, fox};\n\nint main() {\n    A a;\n    std::cout &lt;&lt; a &lt;&lt; '\\n';\n}\n</code></pre>\n", "AcceptedAnswerId": "23342205", "Title": "Why an opaque-enum-declaration is not a definition?", "CreationDate": "2014-04-28T12:43:00.217", "Id": "23341484", "CommentCount": "6", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2014-04-28T14:33:17.300", "LastEditorUserId": "2548699", "LastActivityDate": "2014-04-28T14:33:17.300", "Score": "3", "OwnerUserId": "2548699", "Tags": "<c++><c++11><language-lawyer>", "AnswerCount": "3"}});