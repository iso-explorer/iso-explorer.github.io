post_cb({"21763935": {"CommentCount": "9", "ViewCount": "234", "PostTypeId": "1", "LastEditorUserId": "1248365", "CreationDate": "2014-02-13T19:39:18.943", "LastActivityDate": "2014-02-13T20:36:40.343", "Title": "C++ template and shadow parameter", "AcceptedAnswerId": "21764310", "LastEditDate": "2014-02-13T19:42:19.730", "Id": "21763935", "Score": "2", "Body": "<p>I have one simple question. What is the reason of compilation failure?</p>\n<pre><code>template &lt;class T&gt;\nclass test\n{\n    T varGoodForNothing;\npublic:\n    test()\n    { }\n    test(test&lt;T&gt; &amp; tt)\n    {\n        varGoodForNothing = tt.varGoodForNothing;\n    }\n    test&lt;T&gt; &amp; operator=(const test&lt;T&gt; &amp; tt)\n    {\n        if (this == &amp;tt)\n            return *this;\n        test(tt);\n        return *this;\n    }\n};\n</code></pre>\n<p>Compiler error is: </p>\n<blockquote>\n<p id=\"so_21763935_21763935_0\">declaration of test tt shadows a parameter.</p>\n</blockquote>\n", "Tags": "<c++><templates>", "OwnerUserId": "2979439", "AnswerCount": "3"}, "21764310": {"ParentId": "21763935", "LastEditDate": "2014-02-13T20:36:40.343", "CommentCount": "4", "CreationDate": "2014-02-13T19:59:43.137", "OwnerUserId": "1090079", "LastEditorUserId": "1090079", "PostTypeId": "2", "Id": "21764310", "Score": "5", "Body": "<h2>What does the standard say?</h2>\n<p>The standard says that a declaration of type <code>Type (name)</code> is the same has having used <code>Type name</code>, see the below standard quotation.</p>\n<blockquote>\n<p id=\"so_21763935_21764310_0\"><strong>[dcl.meaning]</strong> / 6</p>\n<p id=\"so_21763935_21764310_1\">In a declaration <code>T D</code> where <code>D</code> has the form</p>\n<blockquote>\n<pre><code>( D1 )\n</code></pre>\n<p id=\"so_21763935_21764310_4\">The type of the contained <em>declarator-id</em> is the same as that of the contained <em>declarator-id</em> in the declaration <code>T D1</code>.</p>\n<p id=\"so_21763935_21764310_5\">Parentheses do not alter the type of the embedded <em>declarator-id</em>, but they can alter the binding of complex declarators.</p>\n</blockquote>\n</blockquote>\n<p><sup>With that said you are not calling the copy-constructor of <code>test</code> with an argument named <code>tt</code>, instead the compiler thinks that you are trying to declare a variable of type <code>test</code> with the <strong>name</strong> <code>tt</code>.</sup></p>\n<hr>\n<h2>How to get around the problem?</h2>\n<p>To circumvent the problem of <code>T (D);</code> being interpreted as <code>T d;</code> we will have to wrap <code>T</code> inside parentheses, such as in the below.</p>\n<pre><code>(test) (tt);\n</code></pre>\n<hr>\n<p><sup><strong>Note:</strong> Even if the code will compile after the proposed change it will not do what you want, nor think, it will.</sup></p>\n<p><sup>Instead of calling the copy-constructor of <code>test</code> for the given instance you will declare an anonymous instance of <code>test</code> initialized with the value of <code>tt</code>.</sup></p>\n<p><sup>Constructors can only be called from within other constructors (using a <a href=\"http://en.cppreference.com/w/cpp/language/initializer_list\" rel=\"nofollow\">member initializer list</a>).</sup>\n</p>\n</hr></hr>", "LastActivityDate": "2014-02-13T20:36:40.343"}, "21764282": {"ParentId": "21763935", "CommentCount": "1", "Body": "<p>The compiler is confused as to whether tt is the local variable (method parameter) or the name of a new test object. As 0x499602D2 mentioned, it's called <a href=\"http://en.wikipedia.org/wiki/Most_vexing_parse\" rel=\"nofollow\">Most Vexing Parse</a>.</p>\n<p>It's generally not good practice to call the copy constructor from the assignment operator and vice versa. Assign the member variables explicitly instead like:</p>\n<pre><code>this-&gt;varGoodForNothing = tt.varGoodForNothing;\n</code></pre>\n", "OwnerUserId": "1349128", "PostTypeId": "2", "Id": "21764282", "Score": "0", "CreationDate": "2014-02-13T19:58:20.430", "LastActivityDate": "2014-02-13T19:58:20.430"}, "bq_ids": {"n4140": {"so_21763935_21764310_2": {"section_id": 3213, "quality": 0.875, "length": 7}, "so_21763935_21764310_5": {"section_id": 3213, "quality": 1.0, "length": 12}, "so_21763935_21764310_4": {"section_id": 3213, "quality": 0.875, "length": 7}, "so_21763935_21764310_3": {"section_id": 3213, "quality": 1.0, "length": 12}}, "n3337": {"so_21763935_21764310_2": {"section_id": 3087, "quality": 0.875, "length": 7}, "so_21763935_21764310_5": {"section_id": 3087, "quality": 1.0, "length": 12}, "so_21763935_21764310_3": {"section_id": 3087, "quality": 1.0, "length": 12}, "so_21763935_21764310_4": {"section_id": 3087, "quality": 0.875, "length": 7}}, "n4659": {"so_21763935_21764310_2": {"section_id": 3970, "quality": 0.875, "length": 7}, "so_21763935_21764310_5": {"section_id": 3970, "quality": 1.0, "length": 12}, "so_21763935_21764310_3": {"section_id": 3970, "quality": 1.0, "length": 12}, "so_21763935_21764310_4": {"section_id": 3970, "quality": 0.875, "length": 7}}}, "21764245": {"ParentId": "21763935", "CommentCount": "2", "Body": "<p>To ensure the absence of naming conflict in the stack just use: </p>\n<blockquote>\n<p id=\"so_21763935_21764245_0\">this.varGoodForNothing = tt.varGoodForNothing;</p>\n</blockquote>\n", "OwnerUserId": "2315037", "PostTypeId": "2", "Id": "21764245", "Score": "0", "CreationDate": "2014-02-13T19:56:15.627", "LastActivityDate": "2014-02-13T19:56:15.627"}});