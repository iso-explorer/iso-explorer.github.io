post_cb({"4104544": {"ViewCount": "34994", "Body": "<p>I am starting to learn C++ and Qt, but sometimes the simplest code that I paste from a book results in errors. </p>\n<p>I'm using <code>g++4.4.2</code> on Ubuntu 10.04 with QtCreator IDE. Is there a difference between the g++ compiler syntax and other compilers?  For example when I try to access static members something always goes wrong.</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nclass A\n{\n   public:\n      static int x;\n      static int getX() {return x;}\n};\nint main()\n{\n   int A::x = 100; // error: invalid use of qualified-name 'A::x'\n   cout&lt;&lt;A::getX(); // error: : undefined reference to 'A::x'\n   return 0;\n}\n</code></pre>\n<p>I think it's exactly the same as declared <a href=\"http://publib.boulder.ibm.com/infocenter/comphelp/v8v101/index.jsp?topic=%2Fcom.ibm.xlcpp8a.doc%2Flanguage%2Fref%2Fcplr038.htm\" rel=\"noreferrer\">here</a> and <a href=\"http://publib.boulder.ibm.com/infocenter/comphelp/v8v101/index.jsp?topic=%2Fcom.ibm.xlcpp8a.doc%2Flanguage%2Fref%2Fcplr038.htm\" rel=\"noreferrer\">here</a> (isn't it?). So what's wrong with the above code?</p>\n", "AcceptedAnswerId": "4104571", "Title": "How to access static members of a class?", "CreationDate": "2010-11-05T09:04:06.037", "Id": "4104544", "CommentCount": "0", "FavoriteCount": "3", "PostTypeId": "1", "LastEditDate": "2015-04-20T23:17:11.033", "LastEditorUserId": "135351", "LastActivityDate": "2017-08-01T12:03:31.557", "Score": "18", "OwnerUserId": "275221", "Tags": "<c++>", "AnswerCount": "7"}, "4104574": {"Id": "4104574", "PostTypeId": "2", "Body": "<p>The definition of static member variables must live at file scope, i.e. outside all functions, etc.</p>\n", "LastActivityDate": "2010-11-05T09:10:46.003", "CommentCount": "0", "CreationDate": "2010-11-05T09:10:46.003", "ParentId": "4104544", "Score": "2", "OwnerUserId": "129570"}, "bq_ids": {"n4140": {"so_4104544_4104649_0": {"length": 39, "quality": 0.9512195121951219, "section_id": 5907}}, "n3337": {"so_4104544_4104649_0": {"length": 39, "quality": 0.9512195121951219, "section_id": 5679}}, "n4659": {"so_4104544_4104649_0": {"length": 37, "quality": 0.9024390243902439, "section_id": 7389}}}, "4104571": {"Id": "4104571", "PostTypeId": "2", "Body": "<p>You've declared the static members fine, but not <a href=\"http://dietmar-kuehl.de/mirror/c++-faq/ctors.html#faq-10.12\">defined</a> them anywhere.</p>\n<p>Basically what you've said \"there exists some static member\", but never set aside some memory for it, you need:</p>\n<pre><code>int A::x = 100;\n</code></pre>\n<p>Somewhere outside the class and <em>not</em> inside main.</p>\n", "LastEditorUserId": "2126725", "LastActivityDate": "2016-05-31T21:28:01.550", "Score": "27", "CreationDate": "2010-11-05T09:10:12.297", "ParentId": "4104544", "CommentCount": "2", "OwnerUserId": "168175", "LastEditDate": "2016-05-31T21:28:01.550"}, "4104649": {"Id": "4104649", "PostTypeId": "2", "Body": "<p>Section [9.4.2]</p>\n<p><strong>Static Data Members</strong></p>\n<blockquote>\n<p id=\"so_4104544_4104649_0\">The  declaration  of  a static data  member  in  its  class  definition  is  not  a  definition  and  may  be  of  an incomplete type other than cv-qualified void.  <strong>The definition for a static data member shall appear in a namespace scope enclosing the member\u2019s class definition</strong>.  In the definition at namespace scope, the name of  the static data  member  shall  be  qualified  by  its  class  name  using  the <code>::</code> operator</p>\n</blockquote>\n", "LastActivityDate": "2010-11-05T09:22:27.907", "CommentCount": "0", "CreationDate": "2010-11-05T09:22:27.907", "ParentId": "4104544", "Score": "7", "OwnerUserId": "165520"}, "45437182": {"Id": "45437182", "PostTypeId": "2", "Body": "<p>Case 1: <strong>static variable</strong></p>\n<p>As we all know, defining a static variable inside a class which will throw compilation error. E.g. below</p>\n<pre><code>class Stats\n{\n  public: \n     static int AtkStats[3];\n     *static int a =20;*        // Error: defining a value for static variable\n};\n\nint Stats::AtkStats[3] =  {10, 0, 0};\n</code></pre>\n<p>Output:</p>\n<pre><code>error: ISO C++ forbids in-class initialization of non-const static member 'Stats::a'\n</code></pre>\n<p>Case 2: <strong>const static variable</strong></p>\n<p>For <strong>const</strong> static variable, we can define a value either inside a class or Outside class.</p>\n<pre><code>class Stats\n{\n  public: \n     static const int AtkStats[3];\n     static const int a =20;        // Success: defining a value for a const static\n};\n\nconst int Stats::AtkStats[3] =  {10, 0, 0};\n\nconst int Stats::a = 20;        // we can define outside also\n</code></pre>\n<p>Output:</p>\n<pre><code>Compilation success.\n</code></pre>\n", "LastEditorUserId": "5805903", "LastActivityDate": "2017-08-01T12:03:31.557", "Score": "0", "CreationDate": "2017-08-01T11:58:12.270", "ParentId": "4104544", "CommentCount": "0", "OwnerUserId": "5805903", "LastEditDate": "2017-08-01T12:03:31.557"}, "29759741": {"Id": "29759741", "PostTypeId": "2", "Body": "<p>Try this example:</p>\n<pre><code>#include&lt;iostream&gt;\nusing namespace std;\n\nclass check\n{\n        static int a;\n    public:\n        void change();\n} ;\nint check::a=10;\nvoid check::change()\n{\n    a++;\n    cout&lt;&lt;a&lt;&lt;\"\\n\";\n}\n\nint main()\n{\n\n    int i,j;\n    check c;\n    check b;\n    c.change();\n    b.change();\n    return 0;\n}\n</code></pre>\n", "LastEditorUserId": "3437608", "LastActivityDate": "2015-04-21T00:02:32.030", "Score": "2", "CreationDate": "2015-04-20T22:43:37.653", "ParentId": "4104544", "CommentCount": "2", "OwnerUserId": "3462650", "LastEditDate": "2015-04-21T00:02:32.030"}, "4104742": {"Id": "4104742", "PostTypeId": "2", "Body": "<p>Now you have worked out how to use static class members I will advise you that you should generally use them only in the following circumstances:</p>\n<ul>\n<li><p>For use in templates. So in your example you could have GetX() in different classes and in a template somewhere you would use</p>\n<pre><code>template&lt; typename T &gt;\nint func()\n{\n    return T::GetX();\n}\n</code></pre>\n<p>although obviously more elaborate. But here your static function being in a class serves a purpose.</p></li>\n<li><p>Where the function needs access to the class, i.e. to private members. You could make it a friend but you may as well make it static. Often the case in callbacks.</p></li>\n</ul>\n<p>The rest of the time you can probably use compilation-unit level functions and variables which has the advantage of taking your members out of the header (particularly if they are private). The less implementation detail you give the better.</p>\n", "LastEditorUserId": "507519", "LastActivityDate": "2012-01-07T10:41:32.890", "Score": "1", "CreationDate": "2010-11-05T09:35:04.900", "ParentId": "4104544", "CommentCount": "0", "OwnerUserId": "442284", "LastEditDate": "2012-01-07T10:41:32.890"}, "4104596": {"Id": "4104596", "PostTypeId": "2", "Body": "<p>Try:</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nclass A\n{\n   public:\n      // This declares it.\n      static int x;\n      static int getX(){return x;}\n};\n\n// Now you need an create the object so\n// This must be done in once source file (at file scope level)\nint A::x = 100;\n\n\nint main()\n{\n   A::x = 200;\n   // Note no int here. You can modify it\n\n   cout&lt;&lt;A::getX(); // Should work\n   return 0;\n}\n</code></pre>\n", "LastActivityDate": "2010-11-05T09:14:31.827", "CommentCount": "2", "CreationDate": "2010-11-05T09:14:31.827", "ParentId": "4104544", "Score": "6", "OwnerUserId": "14065"}});