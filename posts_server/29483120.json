post_cb({"bq_ids": {"n4140": {"so_29483120_29483269_0": {"length": 7, "quality": 0.6363636363636364, "section_id": 3272}, "so_29483120_29483269_1": {"length": 8, "quality": 0.6666666666666666, "section_id": 3272}}, "n3337": {"so_29483120_29483269_0": {"length": 10, "quality": 0.9090909090909091, "section_id": 3143}}, "n4659": {"so_29483120_29483269_1": {"length": 9, "quality": 0.75, "section_id": 4030}}}, "29483120": {"ViewCount": "1550", "Body": "<p>The code: </p>\n<pre><code>struct T { T() {} };\n\nstruct S\n{\n    T t;\n\n    S() noexcept = default;\n};\n\nint main()\n{\n//    S s;\n}\n</code></pre>\n<p>g++ 4.9.2 accepts this with no errors or warnings, however clang 3.6 and 3.7 report for line 7:</p>\n<pre><code>error: exception specification of explicitly defaulted default constructor does not match the calculated one\n</code></pre>\n<p>However, if the line <code>S s;</code> is not commented out, g++ 4.9.2 now reports:</p>\n<pre><code>noex.cc: In function 'int main()':\nnoex.cc:12:7: error: use of deleted function 'S::S()'\n     S s;\n       ^\nnoex.cc:7:5: note: 'S::S() noexcept' is implicitly deleted because its  exception-specification does not match the implicit exception-specification ''\n     S() noexcept = default;\n     ^\n</code></pre>\n<p>Which compiler is right for the original code?</p>\n<hr>\n<p><strong>Background:</strong></p>\n<p>g++ even allows the following to be added to <code>main</code>:</p>\n<pre><code>std::cout &lt;&lt; std::is_constructible&lt;S&gt;::value &lt;&lt; '\\n';\n</code></pre>\n<p>which outputs <code>0</code>. I encountered this problem when using clang to compile some complicated code that made heavy use of templates, SFINAE and noexcept. In that code <code>S</code> and <code>T</code> are template classes; so the behaviour depends on which types <code>S</code> was instantiated with. Clang rejects it with this error for some types, whereas g++ permits it and the SFINAE works based on <code>is_constructible</code> and similar traits.</p>\n</hr>", "AcceptedAnswerId": "29483269", "Title": "Program with \"noexcept\" constructor accepted by gcc, rejected by clang", "CreationDate": "2015-04-07T03:15:59.543", "Id": "29483120", "CommentCount": "2", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2015-04-07T03:30:19.937", "LastEditorUserId": "1505939", "LastActivityDate": "2015-04-07T07:59:37.640", "Score": "12", "OwnerUserId": "1505939", "Tags": "<c++><c++11><gcc><clang><noexcept>", "AnswerCount": "1"}, "29483269": {"Id": "29483269", "PostTypeId": "2", "Body": "<p>Depends on the version of the standard you are consulting.</p>\n<p>N3337 [dcl.fct.def.default]/p2:</p>\n<blockquote>\n<p id=\"so_29483120_29483269_0\">An explicitly-defaulted function [...] may have an explicit\n  <em>exception-specification</em> only if it is compatible (15.4) with the <em>exception-specification</em> on the implicit declaration.</p>\n</blockquote>\n<p>which renders your original code ill-formed.</p>\n<p>This was changed by <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1778\">CWG issue 1778</a> to read (N4296 [dcl.fct.def.default]/p3):</p>\n<blockquote>\n<p id=\"so_29483120_29483269_1\">If a function that is explicitly defaulted is declared with an\n  <em>exception-specification</em> that is not compatible (15.4) with the exception specification on the implicit declaration, then</p>\n<ul>\n<li>if the function is explicitly defaulted on its first declaration, it is defined as deleted;</li>\n<li>otherwise, the program is ill-formed.</li>\n</ul>\n</blockquote>\n<p>which means that the constructor is now merely defined as deleted. (The above wording incorporated changes made by <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4285.html\">N4285</a>, a post-C++14 paper making some cleanup changes intended to be purely editorial. The N3936 version is substantively the same.)</p>\n<p>Presumably GCC implements CWG1778's resolution, while Clang doesn't.</p>\n", "LastEditorUserId": "2756719", "LastActivityDate": "2015-04-07T07:59:37.640", "Score": "15", "CreationDate": "2015-04-07T03:32:54.210", "ParentId": "29483120", "CommentCount": "6", "OwnerUserId": "2756719", "LastEditDate": "2015-04-07T07:59:37.640"}});