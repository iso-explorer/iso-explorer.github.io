post_cb({"bq_ids": {"n4140": {"so_30780171_30780421_0": {"length": 39, "quality": 0.9285714285714286, "section_id": 441}}, "n3337": {"so_30780171_30780421_0": {"length": 39, "quality": 0.9285714285714286, "section_id": 432}}, "n4659": {"so_30780171_30780421_0": {"length": 37, "quality": 0.8809523809523809, "section_id": 461}}}, "30780421": {"Id": "30780421", "PostTypeId": "2", "Body": "<p>Your code has Undefined Behaviour: it is UB to call a member function on an object (even a non-virtual one) before all of its base classes have been initialised. C++14 (n4140) 12.6.2/14, emphasis mine:</p>\n<blockquote>\n<p id=\"so_30780171_30780421_0\">Member functions (including virtual member functions, 10.3) can be called for an object under construction.\n  Similarly, an object under construction can be the operand of the <code>typeid</code> operator (5.2.8) or of a <code>dynamic_cast</code> (5.2.7). <strong>However, if these operations are performed in a <em>ctor-initializer</em> (or in a function called directly\n  or indirectly from a <em>ctor-initializer</em>) before all the <em>mem-initializers</em> for base classes have completed, the result\n  of the operation is undefined.</strong> ...</p>\n</blockquote>\n<p><em>ctor-initializer</em> is the entire list following <code>:</code>. <em>mem-initializer</em> is one element of this list.</p>\n", "LastActivityDate": "2015-06-11T12:11:10.797", "CommentCount": "4", "CreationDate": "2015-06-11T12:11:10.797", "ParentId": "30780171", "Score": "14", "OwnerUserId": "1782465"}, "30780367": {"Id": "30780367", "PostTypeId": "2", "Body": "<p>The statement <code>B b;</code> calls the default constructor to <code>B</code>.</p>\n<p>When constructing <code>B</code>, nothing pertinent to <code>B</code> is constructed until <code>A</code> is fully constructed.</p>\n<p>So in attempting to call <code>callFoo()</code>, the behaviour is undefined since you cannot rely on the v-table for class <code>B</code> being set up.</p>\n<p>In summary: the behaviour of calling a pure virtual function during the construction of an abstract class is undefined.</p>\n", "LastActivityDate": "2015-06-11T12:08:32.597", "CommentCount": "1", "CreationDate": "2015-06-11T12:08:32.597", "ParentId": "30780171", "Score": "5", "OwnerUserId": "2380830"}, "30780171": {"ViewCount": "696", "Body": "<p>I tried to \"repair\" the example in <a href=\"https://stackoverflow.com/a/99622/2932052\">this answer</a> as to demonstrate how a pure virtual function can be called. </p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass A\n{\n    int id;\npublic:\n    A(int i): id(i) {}\n    int callFoo() { return foo(); }\n    virtual int foo() = 0;\n};\n\nclass B: public A\n{\npublic:\n    B(): A(callFoo()) {}\n    int foo() { return 3; }\n};\n\nint main() {\n    B b; // &lt;-- this should call a pure virtual function\n    cout &lt;&lt; b.callFoo() &lt;&lt; endl;\n    return 0;\n}\n</code></pre>\n<p>But I get no runtime error <a href=\"https://ideone.com/Q3TNky\" rel=\"nofollow noreferrer\">here (with C++ 4.9.2)</a>, but the output 3. I tried the same with Borland C++ 5.6.4, but there I'm getting an access violation. I think that <code>foo()</code> should be pure virtual in the call of the constructor of the base class.</p>\n<p>Who is wrong? Should I try more compilers? Am I right in my understanding of virtual functions? </p>\n", "AcceptedAnswerId": "30780421", "Title": "Why is this not a call of a pure virtual function?", "CreationDate": "2015-06-11T11:59:31.420", "Id": "30780171", "CommentCount": "6", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2017-05-23T10:27:00.930", "LastEditorUserId": "-1", "LastActivityDate": "2015-06-11T12:11:10.797", "Score": "10", "OwnerUserId": "2932052", "Tags": "<c++><pure-virtual>", "AnswerCount": "2"}});