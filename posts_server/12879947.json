post_cb({"12880070": {"ParentId": "12879947", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Yes it is contiguous in row major order. Suppose you have a 2d array named <code>a[3][3]</code>. Then in memory elements will be in this order: <code>a[0][0]</code>, <code>a[0][1]</code>, <code>a[0][2]</code>, <code>a[1][0]</code>, <code>a[1][1]</code>, <code>a[1][2]</code>, <code>a[2][0]</code>, <code>a[2][1]</code>, <code>a[2][2]</code>. </p>\n<p><a href=\"http://www.cplusplus.com/doc/tutorial/arrays/\" rel=\"nofollow\">Here is more details with an example</a></p>\n", "OwnerUserId": "1735865", "LastEditorUserId": "597607", "LastEditDate": "2012-10-14T10:03:25.123", "Id": "12880070", "Score": "1", "CreationDate": "2012-10-14T07:09:41.233", "LastActivityDate": "2012-10-14T10:03:25.123"}, "12879947": {"CommentCount": "3", "ViewCount": "618", "PostTypeId": "1", "ClosedDate": "2012-10-14T20:49:38.777", "LastEditorUserId": "-1", "CreationDate": "2012-10-14T06:44:50.213", "LastActivityDate": "2012-10-14T13:23:40.400", "Title": "How is a 2 dimensional array implemented in C++", "LastEditDate": "2017-05-23T12:08:32.333", "Id": "12879947", "Score": "1", "Body": "<blockquote>\n<p id=\"so_12879947_12879947_0\"><strong>Possible Duplicate:</strong><br>\n<a href=\"https://stackoverflow.com/questions/12652598/2d-array-as-argument-to-function\">2D-array as argument to function</a> </br></p>\n</blockquote>\n<p>How are 2D arrays implemented in C++? Is it contiguous in memory?</p>\n<p>i.e If <code>a</code> is an array first address contains element <code>a(0,0)</code>  then next address <code>a(0,1)</code> then <code>a(1,0)</code>, <code>a(1,1)</code> and so on...?</p>\n", "Tags": "<c++>", "OwnerUserId": "1633316", "AnswerCount": "2"}, "12880160": {"ParentId": "12879947", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Given a declaration <code>T D[C]</code>, where <code>T</code> is a type name, <code>D</code> an identifier and <code>C</code> an integral constant expression, the Standard says (highlighting mine):</p>\n<blockquote>\n<p id=\"so_12879947_12880160_0\">(\u00a78.3.4/1) [...] then the type of the identifier [...] is an array type. [...] The constant expression speci\ufb01es the bound of (number of elements in) the array. If the value of the constant expression is N, the array has N elements numbered 0 to N-1, and the type of the identi\ufb01er of D is \u201cderived-declarator-type-list array of N T\u201d. An object of array type contains a <strong>contiguously allocated non-empty set of N subobjects of type T.</strong> [...]</p>\n</blockquote>\n<p>And:</p>\n<blockquote>\n<p id=\"so_12879947_12880160_1\">(\u00a78.3.4/3) When several \u201carray of\u201d speci\ufb01cations are adjacent, a multidimensional array is created; [...]</p>\n</blockquote>\n<p>As well as:</p>\n<blockquote>\n<p id=\"so_12879947_12880160_2\">(\u00a78.3.4/9) [ Note: It follows from all this that arrays in C++ are stored row-wise (last subscript varies fastest) and that the \ufb01rst subscript in the declaration helps determine the amount of storage consumed by an array but plays no other part in subscript calculations. \u2014 end note ]</p>\n</blockquote>\n<p><strong>Conclusion</strong><br>\nAll this makes it clear that <code>T a[N][M]</code> is a <em>contiguously stored</em> list of <code>N</code> objects, each of which is <em>a contigously stored</em> list of <code>M</code> objects of type <code>T</code>. So yes, the whole two-dimensional array is one contiguously stored object.</br></p>\n<p><em>Does that mean you can use one combined index to access the elements directly?</em>\nSo, given an array <code>int a[10][5]</code>, can you use <code>a[0][23]</code> instead of <code>a[2][3]</code>? Stricly speaking, no, because that is a violation of the first rule above, whereby only indexes <code>0..4</code> are valid for the second index. However, as far as that particular expression is concerned, if you were to consider <code>a[0]</code> as a pointer <code>p</code> to the first element of the first row of the array, and <code>a[0][23]</code> as <code>*(p+23)</code>, you could be sure to access the correct element. More on this question in <a href=\"https://stackoverflow.com/questions/7269099/may-i-treat-a-2d-array-as-a-contiguous-1d-array\">this existing question</a>.</p>\n", "OwnerUserId": "777186", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:33:02.880", "Id": "12880160", "Score": "1", "CreationDate": "2012-10-14T07:27:09.020", "LastActivityDate": "2012-10-14T13:23:40.400"}, "bq_ids": {"n4140": {"so_12879947_12880160_2": {"section_id": 3236, "quality": 0.8214285714285714, "length": 23}, "so_12879947_12880160_0": {"section_id": 3228, "quality": 0.8235294117647058, "length": 28}, "so_12879947_12880160_1": {"section_id": 3230, "quality": 0.7777777777777778, "length": 7}}, "n3337": {"so_12879947_12880160_2": {"section_id": 3109, "quality": 0.8214285714285714, "length": 23}, "so_12879947_12880160_0": {"section_id": 3101, "quality": 0.8235294117647058, "length": 28}, "so_12879947_12880160_1": {"section_id": 3103, "quality": 0.7777777777777778, "length": 7}}, "n4659": {"so_12879947_12880160_2": {"section_id": 3992, "quality": 0.8214285714285714, "length": 23}, "so_12879947_12880160_0": {"section_id": 3985, "quality": 0.8235294117647058, "length": 28}, "so_12879947_12880160_1": {"section_id": 3987, "quality": 0.7777777777777778, "length": 7}}}});