post_cb({"41836952": {"ParentId": "41836658", "PostTypeId": "2", "CommentCount": "19", "Body": "<h3>C11 - 6.7.2.2/2</h3>\n<blockquote>\n<p id=\"so_41836658_41836952_0\">The expression that defines the value of an enumeration constant shall be an integer constant expression that has a value representable as an <code>int</code>.</p>\n</blockquote>\n<p><code>en_e_bar=UINT64_MAX</code> is a constraint violation and this makes the above code invalid. A diagnostic message should be produce by confirming implementation as stated in the C11 draft:  </p>\n<blockquote>\n<p id=\"so_41836658_41836952_1\">A conforming implementation shall produce at least one diagnostic message (identified in an implementation-defined manner) if a preprocessing translation unit or translation unit contains a violation of any syntax rule or constraint, [...]</p>\n</blockquote>\n<p>It seems that GCC has some bug and it failed to produce the diagnostic message. (Bug is pointed in the <a href=\"https://stackoverflow.com/a/41838812/2455888\">answer</a> by <a href=\"https://stackoverflow.com/users/586873/grzegorz-szpetkowski\">Grzegorz Szpetkowski</a></p>\n", "OwnerUserId": "2455888", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:16:51.223", "Id": "41836952", "Score": "11", "CreationDate": "2017-01-24T19:04:44.390", "LastActivityDate": "2017-01-25T11:57:23.237"}, "41837484": {"ParentId": "41836658", "PostTypeId": "2", "CommentCount": "14", "Body": "<p>In C, an <code>enum</code> constant is of type <code>int</code>. In C++, it's of the enumerated type.</p>\n<pre><code>enum en_e{\n    en_e_foo,\n    en_e_bar=UINT64_MAX,\n};\n</code></pre>\n<p>In C, this is a <em>constraint violation</em>, requiring a diagnostic (<em>if</em> <code>UINT64_MAX</code> exceeds <code>INT_MAX</code>, which it very probably does). A C compiler may reject the program altogether, or it may print a warning and then generate an executable whose behavior is undefined. (It's not 100% clear that a program that violates a constraint necessarily has undefined behavior, but in this case the standard doesn't say what the behavior is, so that's still undefined behavior.)</p>\n<p>gcc 6.2 doesn't warn about this.  clang does. This is a bug in gcc; it incorrectly inhibits some diagnostic messages when macros from standard headers are used. Thanks to Grzegorz Szpetkowski for locating the bug report: <a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=71613\">https://gcc.gnu.org/bugzilla/show_bug.cgi?id=71613</a></p>\n<p>In C++, each enumeration type has an <em>underlying type</em>, which is some integer type (not necessarily <code>int</code>). This underlying type must be able to represent all the constant values. So in this case, both <code>en_e_foo</code> and <code>en_e_bar</code> are of type <code>en_e</code>, which must be at least 64 bits wide, even if <code>int</code> is narrower.</p>\n", "OwnerUserId": "827263", "LastEditorUserId": "827263", "LastEditDate": "2017-01-24T21:05:27.913", "Id": "41837484", "Score": "79", "CreationDate": "2017-01-24T19:36:07.803", "LastActivityDate": "2017-01-24T21:05:27.913"}, "41837198": {"ParentId": "41836658", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>In <strong>C</strong>, while a <code>enum</code> is considered to be a separate type, enumerators itself always have type <code>int</code>.</p>\n<blockquote>\n<h3>C11 - 6.7.2.2 Enumeration specifiers</h3>\n<p id=\"so_41836658_41837198_0\"><strong>3</strong> The identifiers in an enumerator list are declared as constants that have type int...</p>\n</blockquote>\n<p>Thus, behaviour you see is a compiler extension.</p>\n<p>I'd say it makes sense to only expand size of one of the enumerators if its value is too large.</p>\n<hr>\n<p>On the other hand, in <strong>C++</strong> all enumerators have the type of the <code>enum</code> they're declared in.</p>\n<p>Because of that, size of every enumerator must be same. So, size of entire <code>enum</code> is expanded to store the largest enumerator.</p>\n</hr>", "OwnerUserId": "2752075", "LastEditorUserId": "2752075", "LastEditDate": "2017-02-05T21:08:21.273", "Id": "41837198", "Score": "24", "CreationDate": "2017-01-24T19:20:48.867", "LastActivityDate": "2017-02-05T21:08:21.273"}, "41838812": {"ParentId": "41836658", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>As others pointed, the code is ill-formed (in C), because of constraint violation.</p>\n<p>There is GCC bug <a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=71613\">#71613</a> (reported June 2016), which states that some useful warnings are silenced with macros.</p>\n<blockquote>\n<p id=\"so_41836658_41838812_0\">Useful warnings seem to be silenced when macros from system headers\n  are used. For example, in the example below a warning would be useful\n  for both enums but only one warning is shown. The same can probably\n  happen for other warnings.</p>\n</blockquote>\n<p>The current workaround may be to prepend the macro with unary <code>+</code> operator:</p>\n<pre><code>enum en_e {\n   en_e_foo,\n   en_e_bar = +UINT64_MAX,\n};\n</code></pre>\n<p>which yields compilation error on my machine with GCC 4.9.2:</p>\n<pre><code>$ gcc -std=c11 -pedantic-errors -Wall main.c \nmain.c: In function \u2018main\u2019:\nmain.c:9:20: error: ISO C restricts enumerator values to range of \u2018int\u2019 [-Wpedantic]\n         en_e_bar = +UINT64_MAX\n</code></pre>\n", "OwnerUserId": "586873", "LastEditorUserId": "586873", "LastEditDate": "2017-01-24T20:59:30.953", "Id": "41838812", "Score": "15", "CreationDate": "2017-01-24T20:54:24.487", "LastActivityDate": "2017-01-24T20:59:30.953"}, "41836658": {"CommentCount": "6", "AcceptedAnswerId": "41837472", "PostTypeId": "1", "LastEditorUserId": "4593267", "CreationDate": "2017-01-24T18:46:36.943", "LastActivityDate": "2017-02-05T21:08:21.273", "LastEditDate": "2017-01-24T20:40:51.443", "ViewCount": "4326", "FavoriteCount": "6", "Title": "Enum constants behaving differently in C and C++", "Id": "41836658", "Score": "80", "Body": "<p>Why does this:</p>\n<pre><code>#include &lt;stdio.h&gt;\n#include &lt;limits.h&gt;\n#include &lt;inttypes.h&gt;\n\nint main() {\n    enum en_e {\n        en_e_foo,\n        en_e_bar = UINT64_MAX,\n    };\n    enum en_e e = en_e_foo;\n    printf(\"%zu\\n\", sizeof en_e_foo);\n    printf(\"%zu\\n\", sizeof en_e_bar);\n    printf(\"%zu\\n\", sizeof e);\n}\n</code></pre>\n<p>print <code>4 8 8</code> in C and <code>8 8 8</code> in C++ (on a platform with 4 byte ints)?</p>\n<p>I was under the impression that the <code>UINT64_MAX</code> assignment would force all the enumerations constants to at least 64 bits, but <code>en_e_foo</code> remains at 32 in plain C.</p>\n<p>What is the rationale for the discrepancy?</p>\n", "Tags": "<c++><c>", "OwnerUserId": "1084774", "AnswerCount": "6"}, "41837472": {"ParentId": "41836658", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>I took a look at the standards and my program appears to be a constraint violation in C because of <a href=\"http://port70.net/~nsz/c/c11/n1570.html#6.7.2.2p2\" rel=\"nofollow noreferrer\">6.7.2.2p2</a>:</p>\n<blockquote>\n<p id=\"so_41836658_41837472_0\">Constraints: The expression that defines the value of an enumeration constant shall\n  be an integer constant expression that has a value representable as an\n  int.</p>\n</blockquote>\n<p>and defined in C++ because of 7.2.5:</p>\n<blockquote>\n<p id=\"so_41836658_41837472_1\">If the underlying type is not fixed, the type of each enumerator is\n  the type of its initializing value: \n  \u2014 If an initializer is specified\n  for an enumerator, the initializing value has the same type as the\n  expression and the constant-expression shall be an integral constant\n  expression (5.19). \n  \u2014 If no initializer is specified for the first\n  enumerator, the initializing value has an unspecified integral type.\n  \u2014  Otherwise the type of the initializing value is the same as the type\n  of the initializing value of the preceding enumerator unless the\n  incremented value is not representable in that type, in which case the\n  type is an unspecified integral type sufficient to contain the\n  incremented value. If no such type exists, the program is ill-formed.</p>\n</blockquote>\n", "OwnerUserId": "1084774", "LastEditorUserId": "1084774", "LastEditDate": "2017-01-24T20:43:11.563", "Id": "41837472", "Score": "4", "CreationDate": "2017-01-24T19:35:19.817", "LastActivityDate": "2017-01-24T20:43:11.563"}, "41837394": {"ParentId": "41836658", "CommentCount": "0", "Body": "<p>That code just isn't valid C in the first place.</p>\n<p>Section 6.7.2.2 in both C99 and C11 says that:</p>\n<blockquote>\n<p id=\"so_41836658_41837394_0\"><strong>Constraints:</strong></p>\n<p id=\"so_41836658_41837394_1\">The expression that de\ufb01nes the value of an enumeration constant shall be an integer constant expression that has a value representable as an <code>int</code>.</p>\n</blockquote>\n<p>A compiler diagnostic is mandatory because it is a constraint violation, see 5.1.1.3:</p>\n<blockquote>\n<p id=\"so_41836658_41837394_2\">A conforming implementation shall produce at least one diagnostic message (identified in an implementation-defined manner) if a preprocessing translation unit or translation unit contains a violation of any syntax rule or constraint, even if the behavior is also explicitly specified as undefined or implementation-defined.</p>\n</blockquote>\n", "OwnerUserId": "103167", "PostTypeId": "2", "Id": "41837394", "Score": "24", "CreationDate": "2017-01-24T19:30:56.527", "LastActivityDate": "2017-01-24T19:30:56.527"}, "bq_ids": {"n4140": {"so_41836658_41837472_0": {"section_id": 5464, "quality": 0.5384615384615384, "length": 7}, "so_41836658_41836952_0": {"section_id": 5464, "quality": 0.5833333333333334, "length": 7}, "so_41836658_41837472_1": {"section_id": 5464, "quality": 0.7288135593220338, "length": 43}}, "n3337": {"so_41836658_41837472_1": {"section_id": 5251, "quality": 0.9830508474576272, "length": 58}}, "n4659": {"so_41836658_41837472_0": {"section_id": 6898, "quality": 0.5384615384615384, "length": 7}, "so_41836658_41836952_0": {"section_id": 6898, "quality": 0.5833333333333334, "length": 7}, "so_41836658_41837472_1": {"section_id": 6898, "quality": 0.7288135593220338, "length": 43}}}});