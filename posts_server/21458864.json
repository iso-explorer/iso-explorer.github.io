post_cb({"21458864": {"ViewCount": "607", "Body": "<p>I'm trying to implement a class with similar behavior to std::string and I'm getting the error in the std::copy line:</p>\n<pre><code>Str&amp; operator+=(const Str&amp; s){\n    std::copy(s.data.begin(), s.data.end(), std::back_inserter(data));\n    return *this;\n}\n</code></pre>\n<p>'data' is an object of type vec &lt; char&gt; , and vec is a vector-like class that I implemented myself and it seems to be working fine on its own.</p>\n<p>It also says this:</p>\n<p>C:\\MinGW\\bin..\\lib\\gcc\\mingw32\\3.4.2........\\include\\c++\\3.4.2\\bits\\stl_iterator.h||In instantiation of `std::back_insert_iterator &lt; vec&lt; char&gt; &gt;':|</p>\n", "AcceptedAnswerId": "21459028", "Title": "\"no type named 'const_reference' \" error when implementing a string-like class", "CreationDate": "2014-01-30T14:15:42.437", "Id": "21458864", "CommentCount": "4", "PostTypeId": "1", "LastActivityDate": "2014-01-30T14:34:52.097", "Score": "3", "OwnerUserId": "1822157", "Tags": "<c++>", "AnswerCount": "5"}, "21459081": {"Id": "21459081", "PostTypeId": "2", "Body": "<p><code>back_inserter</code> is a convinience function which constructs a <code>back_insert_iterator</code> on the container; in this case, <code>data</code>.</p>\n<p><code>data</code>, you've said, is your own homegrown <code>vector</code>-type class.  In order for this to work, your <code>vector</code> class must have a <code>const_reference</code> typedef defined.  Something like this:</p>\n<pre><code>template &lt;typename Item&gt;\nclass Vec\n{\npublic:\n  typedef const Item&amp; const_reference;\n};\n</code></pre>\n<p>There are a number of other requirements for any implementation of a container.  These are outlined in the C++03 Standard, in section <strong>23.1 Container Requirements</strong> including Table 65.</p>\n<p>See also <a href=\"https://stackoverflow.com/questions/7758580/writing-your-own-stl-container\">this question</a> for a discussion of the requirements.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2014-01-30T14:30:20.930", "Score": "2", "CreationDate": "2014-01-30T14:25:00.170", "ParentId": "21458864", "CommentCount": "0", "OwnerUserId": "241536", "LastEditDate": "2017-05-23T12:17:34.590"}, "21459198": {"Id": "21459198", "PostTypeId": "2", "Body": "<p>Try adding</p>\n<blockquote>\n<p id=\"so_21458864_21459198_0\">typedef T value_type;<br/>\n  typedef const value_type&amp; const_reference;</p>\n</blockquote>\n<p>in your vec&lt;T&gt; body.</p>\n", "LastEditorUserId": "3239559", "LastActivityDate": "2014-01-30T14:34:52.097", "Score": "1", "CreationDate": "2014-01-30T14:29:45.327", "ParentId": "21458864", "CommentCount": "0", "OwnerUserId": "3239559", "LastEditDate": "2014-01-30T14:34:52.097"}, "21459070": {"Id": "21459070", "PostTypeId": "2", "Body": "<p>Check the requirements for <code>std::back_inserter</code> and <code>std::copy</code>. In particular, <code>std::back_inserter</code> expects an argument which fulfils the concept <em>Container</em>. At the very least this means implementing \u00a723.2.1 of the standard, and one of the requirements listed there is:</p>\n<blockquote>\n<p id=\"so_21458864_21459070_0\"><code>X::const_reference</code> |  const lvalue of <code>T</code>  |  compile time</p>\n</blockquote>\n<p>I.e. a <code>typedef\u00a0const_reference</code> inside the container type.</p>\n", "LastActivityDate": "2014-01-30T14:24:25.983", "CommentCount": "0", "CreationDate": "2014-01-30T14:24:25.983", "ParentId": "21458864", "Score": "3", "OwnerUserId": "1968"}, "bq_ids": {"n4140": {"so_21458864_21459070_0": {"length": 4, "quality": 0.8, "section_id": 705}}, "n3337": {"so_21458864_21459070_0": {"length": 5, "quality": 1.0, "section_id": 695}}, "n4659": {"so_21458864_21459070_0": {"length": 4, "quality": 0.8, "section_id": 734}}}, "21459028": {"Id": "21459028", "PostTypeId": "2", "Body": "<p>It sounds like your <code>vec</code> doesn't meet the Container Requirements, so it's not guaranteed to be usable by standard facilities (such as <code>back_inserter</code>) that work with containers.</p>\n<p>The requirements are specified in Table 96 in C++11, although Table 65 in C++98 is probably more appropriate for your ancient compiler. One of those requirements is a nested <code>const_reference</code> type.</p>\n", "LastActivityDate": "2014-01-30T14:22:52.410", "CommentCount": "0", "CreationDate": "2014-01-30T14:22:52.410", "ParentId": "21458864", "Score": "4", "OwnerUserId": "204847"}, "21459092": {"Id": "21459092", "PostTypeId": "2", "Body": "<p>Question needs some more details like your vec class. </p>\n<p>What exactly is the error that you are getting? Please share more info on the error. console log would be helpful.</p>\n<p>std::copy takes in two input iterators.(<a href=\"http://www.cplusplus.com/reference/algorithm/copy/\" rel=\"nofollow\">http://www.cplusplus.com/reference/algorithm/copy/</a>)\nAre you sure that your vector like class is handling the iterators correctly?</p>\n<p>Also please check if your vec support the container requirements needed by back_inserter. <a href=\"http://www.cplusplus.com/reference/iterator/back_inserter/\" rel=\"nofollow\">http://www.cplusplus.com/reference/iterator/back_inserter/</a></p>\n", "LastActivityDate": "2014-01-30T14:25:26.197", "CommentCount": "2", "CreationDate": "2014-01-30T14:25:26.197", "ParentId": "21458864", "Score": "0", "OwnerUserId": "1224814"}});