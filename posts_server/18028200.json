post_cb({"18028227": {"ParentId": "18028200", "PostTypeId": "2", "CommentCount": "5", "CreationDate": "2013-08-03T01:06:58.820", "Score": "7", "LastEditorUserId": "1009479", "LastEditDate": "2013-08-03T01:13:53.600", "Id": "18028227", "OwnerUserId": "1009479", "Body": "<p>A function pointer will be converted to <code>bool</code> when using with <code>cout</code>.</p>\n<p>Why the function pointer is not converted to a <code>void *</code> implicitly, which is what operator &lt;&lt; overloads on? because function pointers are not object pointers.</p>\n<p>C++11 \u00a74.10/2:</p>\n<blockquote>\n<p id=\"so_18028200_18028227_0\">A prvalue of type \u201cpointer to cv T,\u201d where T is an object type, can be converted to a prvalue of type \u201cpointer to cv void\u201d. The result of converting a \u201cpointer to cv T\u201d to a \u201cpointer to cv void\u201d points to the start of the storage location where the object of type T resides, as if the object is a most derived object (1.8) of type T (that is, not a base class subobject). The null pointer value is converted to the null pointer value of the destination type.</p>\n</blockquote>\n", "LastActivityDate": "2013-08-03T01:13:53.600"}, "18028274": {"ParentId": "18028200", "CommentCount": "0", "CreationDate": "2013-08-03T01:15:45.407", "OwnerUserId": "103167", "PostTypeId": "2", "Id": "18028274", "Score": "1", "Body": "<p>As Yu said, the function pointer is being converted to <code>bool</code>.</p>\n<p>The g++ optimizer is evidently pre-evaluating the conversion, while Visual C++ actually generates code to test if the function address is null, which requires the linker to provide the function address.</p>\n<p>The rule is that</p>\n<blockquote>\n<p id=\"so_18028200_18028274_0\">Every program shall contain exactly one definition of every non-inline function or variable that is odr-used in that program; no diagnostic required.</p>\n</blockquote>\n<p>The function <em>is</em> odr-used because you're using its address.  By not providing a definition, you're violating this rule, and the Standard doesn't require a diagnostic, meaning the toolchain is free to do anything it wants.</p>\n<p>Visual C++ is generating a diagnostic, although it's not required to.</p>\n<p>g++ is giving the actual result of conversion to <code>bool</code>, since it knows that decay of an actual function to a function pointer can never produce a null function pointer.</p>\n<p>But formatting your hard drive would be equally valid, since the Standard doesn't say what the toolchain can or can't do here.</p>\n", "LastActivityDate": "2013-08-03T01:15:45.407"}, "18028200": {"CommentCount": "1", "ViewCount": "833", "CreationDate": "2013-08-03T01:01:09.343", "LastActivityDate": "2013-08-03T01:15:45.407", "Title": "C++ programming riddle, fun with function pointers", "AcceptedAnswerId": "18028227", "PostTypeId": "1", "Id": "18028200", "Score": "5", "Body": "<p>Given the following code snippet:</p>\n<pre><code>#include &lt;string&gt;\n#include &lt;iostream&gt;\n\nint main()\n{\n    std::string prefix(\"-&gt;\"), middle(), suffix(\"&lt;-\");\n    std::cout &lt;&lt; \"Test: \" &lt;&lt; prefix &lt;&lt; middle &lt;&lt; suffix &lt;&lt; std::endl;\n\n    return 0;\n}\n</code></pre>\n<p>The advanced C++ programmer will immediately see that <code>middle()</code> is not calling <code>std::string</code>'s default ctor, instead it's a function declaration.</p>\n<p>What's interesting though: Why does gcc produce the following output:</p>\n<pre><code>Test: -&gt;1&lt;-\n</code></pre>\n<p>in contrast to Visual Studio's linker error? Does anybody know what's going on here?</p>\n", "Tags": "<c++><function-pointers>", "OwnerUserId": "1400869", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_18028200_18028274_0": {"section_id": 7041, "quality": 1.0, "length": 12}, "so_18028200_18028227_0": {"section_id": 40, "quality": 0.5909090909090909, "length": 26}}, "n3337": {"so_18028200_18028274_0": {"section_id": 6786, "quality": 1.0, "length": 12}, "so_18028200_18028227_0": {"section_id": 37, "quality": 0.9545454545454546, "length": 42}}, "n4659": {"so_18028200_18028274_0": {"section_id": 8538, "quality": 1.0, "length": 12}, "so_18028200_18028227_0": {"section_id": 41, "quality": 0.5227272727272727, "length": 23}}}});