post_cb({"2318680": {"ParentId": "2318650", "CommentCount": "1", "Body": "<p>This is a fairly well known issue, and isn't compiler dependent.  Essentially, what you were doing was declaring a function returning type MyObj.  Not surprisingly, you couldn't call its constructor.  See the <a href=\"http://parashift.com/c++-faq-lite/ctors.html#faq-10.2\" rel=\"noreferrer\">C++ faq lite</a> for a good explanation</p>\n", "OwnerUserId": "223046", "PostTypeId": "2", "Id": "2318680", "Score": "10", "CreationDate": "2010-02-23T14:06:59.170", "LastActivityDate": "2010-02-23T14:06:59.170"}, "2318650": {"CommentCount": "0", "CreationDate": "2010-02-23T14:02:22.003", "PostTypeId": "1", "AcceptedAnswerId": "2318669", "LastEditorUserId": "589206", "LastActivityDate": "2012-10-16T11:59:09.553", "LastEditDate": "2012-10-16T11:59:09.553", "ViewCount": "22306", "FavoriteCount": "12", "Title": "Is no parentheses on a constructor with no arguments a language standard?", "Id": "2318650", "Score": "44", "Body": "<p>I was compiling a C++ program in Cygwin using g++ and I had a class whose constructor had no arguments. I had the lines:</p>\n<pre><code>MyClass myObj();\nmyObj.function1();\n</code></pre>\n<p>And when trying to compile it, I got the message:</p>\n<p>error: request for member 'function1' in 'myObj', which is of non-class type 'MyClass ()()'</p>\n<p>After a little research, I found that the fix was to change that first line to\n    MyClass myObj;</p>\n<p>I could swear I've done empty constructor declarations with parentheses in C++ before. Is this probably a limitation of the compiler I'm using or does the language standard really say don't use parentheses for a constructor without arguments?</p>\n", "Tags": "<c++><constructor><standards>", "OwnerUserId": "228844", "AnswerCount": "8"}, "2318677": {"ParentId": "2318650", "CommentCount": "0", "Body": "<p>Your line makes the compiler think you are declaring a function named <code>myObj</code> which takes no arguments and returns a <code>MyClass</code>.    This ambiguity resolution is indeed annoying.</p>\n", "OwnerUserId": "82570", "PostTypeId": "2", "Id": "2318677", "Score": "3", "CreationDate": "2010-02-23T14:06:38.843", "LastActivityDate": "2010-02-23T14:06:38.843"}, "2318666": {"ParentId": "2318650", "CommentCount": "0", "Body": "<p>The standard does not require parentheses.</p>\n<pre><code>int* x = new int;\n</code></pre>\n<p>is legal syntax.</p>\n<p>In your case <code>myclass myobj();</code> is a function prototype.  Whereas <code>myclass myobj;</code> is a variable.</p>\n", "OwnerUserId": "168703", "PostTypeId": "2", "Id": "2318666", "Score": "1", "CreationDate": "2010-02-23T14:04:55.727", "LastActivityDate": "2010-02-23T14:04:55.727"}, "2318673": {"ParentId": "2318650", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Yet another most-vexing-parse hit.  See for instance <a href=\"https://stackoverflow.com/questions/1300327/sort-function-does-not-work-with-function-object-created-on-stack\">Sort function does not work with function object created on stack?</a></p>\n", "OwnerUserId": "136208", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:18:06.583", "Id": "2318673", "Score": "4", "CreationDate": "2010-02-23T14:05:58.970", "LastActivityDate": "2010-02-23T14:05:58.970"}, "2318731": {"ParentId": "2318650", "CommentCount": "0", "Body": "<p>I found this in the C++ standard (\u00a78.5.8):</p>\n<blockquote>\n<p id=\"so_2318650_2318731_0\">An object whose initializer is an empty set of parentheses, i.e., (), shall be value-initialized.</p>\n<p id=\"so_2318650_2318731_1\">[Note: since () is not permitted by\n  the syntax for initializer,</p>\n<pre><code>X a ();\n</code></pre>\n<p id=\"so_2318650_2318731_2\">is not the declaration of an object of class X, but the\n  declaration of a function taking no\n  argument and returning an X. The form\n  () is permitted in certain other\n  initialization contexts (5.3.4, 5.2.3,\n  12.6.2). \u2014end note ]</p>\n</blockquote>\n", "OwnerUserId": "143642", "PostTypeId": "2", "Id": "2318731", "Score": "17", "CreationDate": "2010-02-23T14:13:46.690", "LastActivityDate": "2010-02-23T14:13:46.690"}, "2318682": {"ParentId": "2318650", "CommentCount": "4", "Body": "<p>This is called the most vexing parse issue. When the parser sees</p>\n<pre><code>MyClass myObj();\n</code></pre>\n<p>It thinks you are declaring a function called <code>myObj</code> that has no parameters and returns a <code>MyClass</code>.</p>\n<p>To get around it, use:</p>\n<pre><code>MyClass myObj;\n</code></pre>\n", "OwnerUserId": "235825", "PostTypeId": "2", "Id": "2318682", "Score": "42", "CreationDate": "2010-02-23T14:07:19.513", "LastActivityDate": "2010-02-23T14:07:19.513"}, "2318669": {"ParentId": "2318650", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Although <code>MyClass myObj();</code> could be parsed as an object definition with an empty initializer or a function declaration the language standard specifies that the ambiguity is always resolved in favour of the function declaration. An empty parentheses initializer is allowed in other contexts e.g. in a <code>new</code> expression or constructing a <em>value-initialized</em> temporary.</p>\n", "OwnerUserId": "19563", "LastEditorUserId": "15416", "LastEditDate": "2010-02-23T15:14:08.557", "Id": "2318669", "Score": "49", "CreationDate": "2010-02-23T14:05:16.117", "LastActivityDate": "2010-02-23T15:14:08.557"}, "2318685": {"ParentId": "2318650", "CommentCount": "0", "Body": "<pre><code>MyClass myObj();\n</code></pre>\n<p>That's parsed as a function declaration, the function is called myObj, takes no arguments and returns MyClass object. I've never seen a compiler accepting that. On the other hand <code>MyClass* myPtr = new MyClass();</code> is acceptable, may be that got you confused?</p>\n", "OwnerUserId": "169828", "PostTypeId": "2", "Id": "2318685", "Score": "4", "CreationDate": "2010-02-23T14:07:48.937", "LastActivityDate": "2010-02-23T14:07:48.937"}, "bq_ids": {"n4140": {"so_2318650_2318731_2": {"section_id": 3290, "quality": 0.7142857142857143, "length": 15}, "so_2318650_2318731_0": {"section_id": 3290, "quality": 1.0, "length": 7}}, "n3337": {"so_2318650_2318731_2": {"section_id": 3160, "quality": 0.7142857142857143, "length": 15}, "so_2318650_2318731_0": {"section_id": 3160, "quality": 1.0, "length": 7}}, "n4659": {"so_2318650_2318731_2": {"section_id": 4052, "quality": 0.7142857142857143, "length": 15}, "so_2318650_2318731_0": {"section_id": 4052, "quality": 1.0, "length": 7}}}});