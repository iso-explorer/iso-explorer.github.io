post_cb({"35725486": {"ParentId": "35724423", "CommentCount": "2", "CreationDate": "2016-03-01T14:26:13.873", "OwnerUserId": "3807729", "PostTypeId": "2", "Id": "35725486", "Score": "20", "Body": "<p>This is fine. The <code>ISO C++11 Standard</code> even gives your situation as an example.</p>\n<p>First the parameter is in scope:</p>\n<p><strong>3.3.3</strong> Block scope <strong>[</strong> basic.scope.local <strong>]</strong></p>\n<blockquote>\n<p id=\"so_35724423_35725486_0\"><strong>2</strong> The potential scope of a function parameter name (including one appearing in a lambda-declarator) or of\n  a function-local predefined variable in a function definition (8.4) begins at its point of declaration.</p>\n</blockquote>\n<p>An example can be found here:</p>\n<blockquote>\n<p id=\"so_35724423_35725486_1\"><strong>8.3.5</strong> Functions <strong>[</strong> dcl.fct <strong>]</strong></p>\n<p id=\"so_35724423_35725486_2\"><strong>5</strong> <strong><em>[</em></strong> Note: This transformation does not affect the types of the parameters. For example, int(*)(const int p, decltype(p)*) and int(*)(int, const int*) are identical types. \u2014 end note <strong>]</strong></p></blockquote>\n", "LastActivityDate": "2016-03-01T14:26:13.873"}, "35725114": {"ParentId": "35724423", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2016-03-01T14:07:59.850", "Score": "10", "LastEditorUserId": "2069064", "LastEditDate": "2016-03-01T14:17:55.820", "Id": "35725114", "OwnerUserId": "2069064", "Body": "<p>Yes, it's legal. It's basically just a question of scope. From [basic.scope.block]:</p>\n<blockquote>\n<p id=\"so_35724423_35725114_0\">The potential scope of a function parameter name (including one appearing in a <em>lambda-declarator</em>) or of a function-local predefined variable in a function definition (8.4) begins at its point of declaration.</p>\n</blockquote>\n<p>The scope of <code>arg1</code> begins here:</p>\n<pre><code>void func(int arg1, decltype(arg1) arg2)\n------------------^\n</code></pre>\n<p>Hence <code>arg1</code> is in scope for the declaration of <code>arg2</code>. I think that's sufficient. </p>\n<p>The rule for disallowing defaulting <code>arg2</code> to <code>arg1</code> is separate -- which to me suggests that <code>arg1</code> was in scope and had to be explicitly disallowed. </p>\n", "LastActivityDate": "2016-03-01T14:17:55.820"}, "35725013": {"ParentId": "35724423", "PostTypeId": "2", "CommentCount": "2", "CreationDate": "2016-03-01T14:02:59.230", "Score": "6", "LastEditorUserId": "4850040", "LastEditDate": "2016-03-01T17:01:11.330", "Id": "35725013", "OwnerUserId": "4342498", "Body": "<p>If we look in N3979 [dcl.fct.default] we have</p>\n<blockquote>\n<p id=\"so_35724423_35725013_0\">Default arguments are evaluated each time the function is called. The order of evaluation of function arguments is unspecified. Consequently, parameters of a function shall not be used in a default argument, even if they are not evaluated. <strong>Parameters of a function declared before a default argument are in scope and can hide namespace and class member names</strong>. [ Example:</p>\n<pre><code>int a;\nint f(int a, int b = a);              // error: parameter a\n                                      // used as default argument\ntypedef int I;\nint g(float I, int b = I(2));         // error: parameter I found\nint h(int a, int b = sizeof(a));      // error, parameter a used\n                                      // in default argument\n</code></pre>\n<p id=\"so_35724423_35725013_1\">[...]</p>\n</blockquote>\n<p><sup>Emphasis mine</sup></p>\n<p>So in the example <code>a</code> is known when we get to <code>b</code> and it hides the <code>a</code> from the calling scope.  This leads me to believe each function parameter is known before each subsequent parameter.  This means you should be able to use its type.  You cannot use its value - as the order of evaluation of the values is unspecified - but the names should be introduced in order from left to right.</p>\n", "LastActivityDate": "2016-03-01T17:01:11.330"}, "bq_ids": {"n4140": {"so_35724423_35725486_2": {"section_id": 3241, "quality": 0.7368421052631579, "length": 14}, "so_35724423_35725486_0": {"section_id": 7062, "quality": 0.9473684210526315, "length": 18}, "so_35724423_35725013_0": {"section_id": 3260, "quality": 0.8857142857142857, "length": 31}, "so_35724423_35725114_0": {"section_id": 7062, "quality": 0.9473684210526315, "length": 18}}, "n3337": {"so_35724423_35725486_2": {"section_id": 3114, "quality": 0.7368421052631579, "length": 14}, "so_35724423_35725486_0": {"section_id": 6806, "quality": 0.9473684210526315, "length": 18}, "so_35724423_35725013_0": {"section_id": 3132, "quality": 0.9428571428571428, "length": 33}, "so_35724423_35725114_0": {"section_id": 6806, "quality": 0.9473684210526315, "length": 18}}, "n4659": {"so_35724423_35725486_2": {"section_id": 3997, "quality": 0.7368421052631579, "length": 14}, "so_35724423_35725486_0": {"section_id": 8559, "quality": 0.9473684210526315, "length": 18}, "so_35724423_35725114_0": {"section_id": 8559, "quality": 0.9473684210526315, "length": 18}, "so_35724423_35725013_0": {"section_id": 4018, "quality": 0.5714285714285714, "length": 20}}}, "35724423": {"CommentCount": "7", "AcceptedAnswerId": "35725486", "PostTypeId": "1", "LastEditorUserId": "2069064", "CreationDate": "2016-03-01T13:37:47.277", "LastActivityDate": "2016-03-01T17:21:20.363", "LastEditDate": "2016-03-01T17:21:20.363", "ViewCount": "1415", "FavoriteCount": "3", "Title": "Is it legal to use previous function parameter to declare new one?", "Id": "35724423", "Score": "34", "Body": "<p>The following code compiles cleanly with GCC:</p>\n<pre><code>void func(int arg1, decltype(arg1) arg2)\n{\n    (void)arg2;\n}\nint main(){}\n</code></pre>\n<p>I used this command to compile:</p>\n<pre><code>g++ -std=c++14 test.cpp -o test -pedantic-errors -Wall -Wextra\n</code></pre>\n<p>But such usage of a parameter in the middle of function declaration seems weird. Is it actually valid in standard C++, or is it a GCC extension?</p>\n", "Tags": "<c++><function><gcc><language-lawyer>", "OwnerUserId": "673852", "AnswerCount": "3"}});