post_cb({"24375246": {"ParentId": "24373404", "CommentCount": "0", "CreationDate": "2014-06-23T21:58:53.417", "OwnerUserId": "3647361", "PostTypeId": "2", "Id": "24375246", "Score": "1", "Body": "<blockquote>\n<p id=\"so_24373404_24375246_0\">So why does constructor cannot be found in that cases?</p>\n</blockquote>\n<p>Read what you quote:</p>\n<blockquote>\n<p id=\"so_24373404_24375246_1\">if the name specified after the <strong><em>nested-name-specifier</em></strong> [...].</p>\n</blockquote>\n<p>A <em>nested-name-specifier</em> contains a <code>::</code> (scope resolution operator) at the end. Do you see a <code>::</code> in <code>a-&gt;A</code>?</p>\n", "LastActivityDate": "2014-06-23T21:58:53.417"}, "24373404": {"CommentCount": "7", "ViewCount": "116", "PostTypeId": "1", "LastEditorUserId": "8332700", "CreationDate": "2014-06-23T19:02:45.570", "LastActivityDate": "2017-11-09T19:20:21.683", "LastEditDate": "2017-11-09T19:20:21.683", "AcceptedAnswerId": "24375713", "OwnerDisplayName": "user2953119", "Title": "Why is my constructor unable to be found in the context of an object expression?", "Id": "24373404", "Score": "0", "Body": "<p>Code-example:</p>\n<pre><code>#include&lt;iostream&gt;\n\nstruct A\n{\n    int a;\n    A(){ a = 5; }\n};\n\nint main()\n{\n    A *a = new A();\n    std::cout &lt;&lt; a-&gt;A;//A is injected-class-name\n}\n</code></pre>\n<p>Why does injected-class-name will be found instead of constructor? Moreover, we cannot invoke a constructor even if we write the following:</p>\n<pre><code>#include&lt;iostream&gt;\n\nstruct A\n{\n    int a;\n    A(){ a = 5; }\n};\n\nint main()\n{\n    A *a = new A();\n    std::cout &lt;&lt; a-&gt;A::A//A::A denote injected-class-name\n}\n</code></pre>\n<p>Although, the 3.4.3.1/1 said:</p>\n<blockquote>\n<p id=\"so_24373404_24373404_0\">In a lookup in which function names are not ignored and the\n  nested-name-specifier nominates a class C: \u2014 if the name specified\n  after the nested-name-specifier, when looked up in C, is the\n  injected-class-name of C (Clause 9), or [...] the name is instead\n  considered to name the constructor of class C.</p>\n</blockquote>\n<p>In an object-expression during the name lookup, followed after <code>-&gt;</code>, functions are not ignored.</p>\n<p>So why does constructor cannot be found in that cases?</p>\n", "Tags": "<c++><class><constructor>", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_24373404_24375246_1": {"section_id": 7113, "quality": 1.0, "length": 4}, "so_24373404_24375713_1": {"section_id": 366, "quality": 0.5555555555555556, "length": 5}, "so_24373404_24373404_0": {"section_id": 7114, "quality": 1.0, "length": 20}}, "n3337": {"so_24373404_24375246_1": {"section_id": 6857, "quality": 1.0, "length": 4}, "so_24373404_24375713_1": {"section_id": 355, "quality": 1.0, "length": 9}, "so_24373404_24373404_0": {"section_id": 6858, "quality": 0.85, "length": 17}}, "n4659": {"so_24373404_24375246_1": {"section_id": 8614, "quality": 1.0, "length": 4}, "so_24373404_24375713_1": {"section_id": 378, "quality": 0.5555555555555556, "length": 5}, "so_24373404_24373404_0": {"section_id": 8615, "quality": 1.0, "length": 20}}}, "24375713": {"ParentId": "24373404", "CommentCount": "0", "CreationDate": "2014-06-23T22:40:06.057", "OwnerUserId": "1505939", "PostTypeId": "2", "Id": "24375713", "Score": "1", "Body": "<p>I can't really say it better than the standard:</p>\n<blockquote>\n<hr>\n<p id=\"so_24373404_24375713_0\"><strong>12.1 Constructors</strong> [class.ctor]</p>\n<p id=\"so_24373404_24375713_1\">Constructors do not have names. A special declarator syntax is used to declare or define the constructor.</p>\n</hr></blockquote>\n<p><code>A</code> is not the name of a function, in your code.</p>\n", "LastActivityDate": "2014-06-23T22:40:06.057"}});