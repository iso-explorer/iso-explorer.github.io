post_cb({"bq_ids": {"n4140": {"so_19231779_19232158_0": {"length": 29, "quality": 0.90625, "section_id": 5811}, "so_19231779_19232158_1": {"length": 20, "quality": 0.7692307692307693, "section_id": 5809}}, "n3337": {"so_19231779_19232158_0": {"length": 29, "quality": 0.90625, "section_id": 5584}, "so_19231779_19232158_1": {"length": 20, "quality": 0.7692307692307693, "section_id": 5582}}, "n4659": {"so_19231779_19232158_0": {"length": 29, "quality": 0.90625, "section_id": 7272}, "so_19231779_19232158_1": {"length": 20, "quality": 0.7692307692307693, "section_id": 7270}}}, "19232158": {"Id": "19232158", "PostTypeId": "2", "Body": "<p>The order of evaluation is unsequenced and hence it is <a href=\"http://en.wikipedia.org/wiki/Unspecified_behavior\" rel=\"nofollow\">unspecified behavior</a> either <code>a(x)</code> or <code>x</code> could be evaluated first. With respect to the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3485.pdf\" rel=\"nofollow\">C++ draft standard</a> section <code>1.9</code> <em>Program execution</em> paragraph <em>15</em> says(<em>emphasis mine</em>):</p>\n<blockquote>\n<p id=\"so_19231779_19232158_0\">[...]<strong>Except where noted, evaluations of operands of individual operators and of subexpressions of individual expressions are unsequenced</strong>. [ Note: In an expression that is evaluated more than once during the execution of a program, unsequenced and indeterminately sequenced evaluations of its subexpressions need not be performed consistently in different evaluations. \u2014end note ] [...]</p>\n</blockquote>\n<p>and it may even differ between different evaluations and furthmore if we go back to paragraph <em>13</em> it says:</p>\n<blockquote>\n<p id=\"so_19231779_19232158_1\">[...]<strong>If A is not sequenced before B and B is not sequenced before A, then A and B are unsequenced</strong>. [ Note: The execution of unsequenced evaluations can overlap. \u2014end note ] Evaluations <strong>A and B are indeterminately sequenced</strong> when either A is sequenced before B or B is sequenced before A, but <strong>it is unspecified which</strong>.[...]</p>\n</blockquote>\n<p>which explains that this is unspecified behavior.</p>\n", "LastEditorUserId": "1708801", "LastActivityDate": "2013-10-07T21:47:55.687", "Score": "1", "CreationDate": "2013-10-07T18:38:55.637", "ParentId": "19231779", "CommentCount": "0", "LastEditDate": "2013-10-07T21:47:55.687", "OwnerUserId": "1708801"}, "19231779": {"ViewCount": "214", "Body": "<pre><code>#include &lt;iostream&gt;\n\nint a(int &amp;x) {\n    x = -1;\n    return x;\n}\n\nint main () {\n    int x = 5;\n    std::cout &lt;&lt; a(x) &lt;&lt; \" \" &lt;&lt; x &lt;&lt; std::endl;\n}\n</code></pre>\n<p>Why output is \"-1 5\"? </p>\n<p>PS: compiler is:</p>\n<p>i686-apple-darwin11-llvm-g++-4.2 (GCC) 4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2336.11.00)</p>\n<p>PS: compiled without any optimization.</p>\n", "AcceptedAnswerId": "19231808", "Title": "strange behavior of std::cout in c++", "CreationDate": "2013-10-07T18:16:04.293", "Id": "19231779", "CommentCount": "1", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2013-10-07T18:36:49.707", "LastEditorUserId": "1168156", "LastActivityDate": "2013-10-07T21:47:55.687", "Score": "4", "OwnerUserId": "2176679", "Tags": "<c++><expression><std><order-of-evaluation><expression-evaluation>", "AnswerCount": "3"}, "19231876": {"Id": "19231876", "PostTypeId": "2", "Body": "<p>The order, in which <code>a(x)</code> and <code>x</code> are being evaluated is <strong><em>unspecified</em></strong><sup> [1]</sup></p>. To make sure that <code>x</code> will not be modified within the same expression (and avoiding unspecified behavior by doing so), you could do:\n<pre><code>int x = 5;\nint y = a(x);\nstd::cout &lt;&lt; y &lt;&lt; \" \" &lt;&lt; x &lt;&lt; std::endl;\n</code></pre>\n<hr>\n<p>[1] <em>\"Except where noted, the order of evaluation of operands of individual operators and subexpressions of individual expressions, and the order in which side effects take place, is unspecified. \"</em> <sub><strong><em>5 Expressions, \u00a74</em></strong></sub> </p>\n</hr>", "LastEditorUserId": "1168156", "LastActivityDate": "2013-10-07T18:32:07.917", "Score": "3", "CreationDate": "2013-10-07T18:21:18.537", "ParentId": "19231779", "CommentCount": "2", "LastEditDate": "2013-10-07T18:32:07.917", "OwnerUserId": "1168156"}, "19231808": {"Id": "19231808", "PostTypeId": "2", "Body": "<p>In this line:</p>\n<pre><code>std::cout &lt;&lt; a(x) &lt;&lt; \" \" &lt;&lt; x &lt;&lt; std::endl;\n</code></pre>\n<p>the order of evaluation of <code>a(x)</code> and <code>x</code> is not specified. It's unspecified behaviour what happens, in your case the compiler decided to evaluate <code>x</code> first, <code>a(x)</code> afterwards.</p>\n", "LastEditorUserId": "2073257", "LastActivityDate": "2013-10-07T18:25:54.270", "Score": "14", "CreationDate": "2013-10-07T18:17:52.393", "ParentId": "19231779", "CommentCount": "6", "LastEditDate": "2013-10-07T18:25:54.270", "OwnerUserId": "2073257"}});