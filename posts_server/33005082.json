post_cb({"33005198": {"ParentId": "33005082", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>[dcl.fct]/1-3:</p>\n<blockquote>\n<p id=\"so_33005082_33005198_0\">1 In a declaration <code>T D</code> where <code>D</code> has the form</p>\n<blockquote>\n<p id=\"so_33005082_33005198_7\"><code>D1</code> ( <em>parameter-declaration-clause</em> ) <em>cv-qualifier-seq<sub>opt</sub></em> <em>ref-qualifier<sub>opt</sub></em> <em>exception-specification<sub>opt</sub></em> <em>attribute-specifier-seq<sub>opt</sub></em></p>\n</blockquote>\n<p id=\"so_33005082_33005198_2\">and the type of the contained <em>declarator-id</em> in the declaration <code>T D1</code> \n  is \u201c<em>derived-declarator-type-list</em> <code>T</code>\u201d, the type of the\n  declarator-id in D is \u201c<em>derived-declarator-type-list</em> function of\n  (<em>parameter-declaration-clause</em> ) <em>cv-qualifier-seq<sub>opt</sub></em>\n<em>ref-qualifier<sub>opt</sub></em> returning <code>T</code>\u201d. The optional <em>attribute-specifier-seq</em> appertains to the function type.</p>\n<p id=\"so_33005082_33005198_3\">2 In a declaration <code>T D</code> where <code>D</code> has the form</p>\n<blockquote>\n<p id=\"so_33005082_33005198_8\"><code>D1</code> ( <em>parameter-declaration-clause</em> ) <em>cv-qualifier-seq<sub>opt</sub></em> <em>ref-qualifier<sub>opt</sub></em> <em>exception-specification<sub>opt</sub></em> <em>attribute-specifier-seq<sub>opt</sub></em> <em>trailing-return-type</em></p>\n</blockquote>\n<p id=\"so_33005082_33005198_5\">and the type of the contained <em>declarator-id</em> in the declaration <code>T\n  D1</code> is \u201c<em>derived-declarator-type-list</em> <code>T</code>\u201d, <code>T</code> shall be the single\n  <em>type-specifier</em> <code>auto</code>. The type of the <em>declarator-id</em> in <code>D</code> is \u201c<em>derived-declarator-type-list</em> function of\n  (<em>parameter-declaration-clause</em> ) <em>cv-qualifier-seq<sub>opt</sub></em>\n<em>ref-qualifier<sub>opt</sub></em> returning <code>U</code>\u201d, where <code>U</code> is the type specified by the <em>trailing-return-type</em>. The optional\n  <em>attribute-specifier-seq</em> appertains to the function type.</p>\n<p id=\"so_33005082_33005198_6\">3 A type of either form is a <em>function type</em>.</p>\n</blockquote>\n<p>Paragraph 3 defines the term <em>function type</em> (note the italics). A function type can have a <em>cv-qualifier-seq</em> and/or a <em>ref-qualifier</em>. In fact, [dcl.fct]/6 explicitly addresses these \"special\" function types:</p>\n<blockquote>\n<p id=\"so_33005082_33005198_9\">A function type with a <em>cv-qualifier-seq</em> or a <em>ref-qualifier</em>\n  (including a type named by <em>typedef-name</em> (7.1.3, 14.1)) shall appear\n  only as:</p>\n<ul>\n<li>the function type for a non-static member function,</li>\n<li>the function type to which a pointer to member refers,</li>\n<li>the top-level function type of a function typedef declaration or <em>alias-declaration</em>,</li>\n<li>the <em>type-id</em> in the default argument of a <em>type-parameter</em> (14.1), or</li>\n<li>the <em>type-id</em> of a <em>template-argument</em> for a <em>type-parameter</em> (14.3.1).</li>\n</ul>\n</blockquote>\n<p>In other words, <code>std::is_function&lt;int()volatile &amp;&gt;::value</code> should be <code>true</code>. MSVC is non-conforming if it claims otherwise.</p>\n", "OwnerUserId": "2756719", "LastEditorUserId": "2756719", "LastEditDate": "2015-10-09T20:52:18.530", "Id": "33005198", "Score": "8", "CreationDate": "2015-10-08T01:37:43.370", "LastActivityDate": "2015-10-09T20:52:18.530"}, "bq_ids": {"n4140": {"so_33005082_33005198_5": {"section_id": 3238, "quality": 0.7407407407407407, "length": 20}, "so_33005082_33005198_2": {"section_id": 3238, "quality": 0.8421052631578947, "length": 16}, "so_33005082_33005198_9": {"section_id": 3242, "quality": 0.8181818181818182, "length": 9}, "so_33005082_33005198_6": {"section_id": 86, "quality": 0.8, "length": 4}}, "n3337": {"so_33005082_33005198_5": {"section_id": 3111, "quality": 0.7407407407407407, "length": 20}, "so_33005082_33005198_2": {"section_id": 3111, "quality": 0.8421052631578947, "length": 16}, "so_33005082_33005198_6": {"section_id": 2, "quality": 0.8, "length": 4}}, "n4659": {"so_33005082_33005198_5": {"section_id": 3994, "quality": 0.7777777777777778, "length": 21}, "so_33005082_33005198_6": {"section_id": 307, "quality": 0.8, "length": 4}, "so_33005082_33005198_2": {"section_id": 3993, "quality": 0.7368421052631579, "length": 14}, "so_33005082_33005198_9": {"section_id": 3998, "quality": 0.8181818181818182, "length": 9}}}, "33005082": {"CommentCount": "0", "ViewCount": "91", "CreationDate": "2015-10-08T01:21:28.093", "LastActivityDate": "2015-10-09T20:52:18.530", "Title": "What does \"function type\" indicate", "AcceptedAnswerId": "33005198", "PostTypeId": "1", "Id": "33005082", "Score": "1", "Body": "<p>In trying to implement <code>std::is_function</code> I have run into a case where VC++ and libc++ disagree.  </p>\n<pre><code>static_assert(std::is_function&lt;int()volatile &amp;&gt;::value, \"Not function\");\n</code></pre>\n<p>libc++ accepts this.  VC++ fails, claiming it isn't a function.  Who is right?</p>\n<p>In 20.9.4.1 (Table 47) it says: </p>\n<pre><code>template &lt;class T&gt; struct is_function;\nT is a function type (3.9.2)\n</code></pre>\n<p>The phrase \"function type\" is not specified as clearly as \"integral type\".  I am having difficulty finding exactly what it means.  What paragraphs exactly specify what \"function type\" means?</p>\n", "Tags": "<c++><c++11><c++14>", "OwnerUserId": "2012007", "AnswerCount": "1"}});