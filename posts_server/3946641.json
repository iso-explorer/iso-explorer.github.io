post_cb({"3946679": {"PostTypeId": "2", "Body": "<p>The Standard only says that statics are initialized before control enters a scope in which they could be accessed. It doesn't define anything else. I think that file-scope variables are a different thing, but in general, using statics and depending on static behaviour is a bad idea.</p>\n", "LastActivityDate": "2010-10-15T22:45:36.083", "Id": "3946679", "CommentCount": "0", "CreationDate": "2010-10-15T22:45:36.083", "ParentId": "3946641", "Score": "0", "OwnerUserId": "298661"}, "bq_ids": {"n4140": {"so_3946641_3946694_1": {"length": 35, "quality": 0.5932203389830508, "section_id": 7151}}, "n3337": {"so_3946641_3946694_1": {"length": 35, "quality": 0.5932203389830508, "section_id": 6895}}}, "3946656": {"PostTypeId": "2", "Body": "<p>I guess it's compiler and compiler-option dependant, but your compiler might very well just put the values in the program at compile time if those values are litteral (written as is in the code, as in your example).</p>\n<p>I think any decent compiler will do that. Then when your exe is loaded in memory, it already have the values hard-coded.</p>\n", "LastActivityDate": "2010-10-15T22:40:46.813", "Id": "3946656", "CommentCount": "0", "CreationDate": "2010-10-15T22:40:46.813", "ParentId": "3946641", "Score": "2", "OwnerUserId": "2368"}, "3946641": {"ViewCount": "162", "Body": "<p>My experience tells me that given an object:</p>\n<pre><code>class Object\n{\nprivate:\n    static int array[];\n\npublic:\n    Object(int id);\n};\n\n\nint Object::array[] = { 2937, 892 };\n\n\nObject::Object(int id)\n{\n    // do something\n}\n</code></pre>\n<p>The initialization of <code>array</code> will happen before the invocation of any method on <code>Object</code> or the invocation of any method on any other object in the program whether the object is declared <code>static</code> or not.</p>\n<p>Basically, what I'm asking is does anyone disagree that static simple C types (non-objects) like <code>char</code>, <code>short</code>, <code>int</code>, and <code>long</code> (and structs without constructors composed of those types) are initialized when an executable is loaded into memory, before main() or any other constructor is invoked?</p>\n", "Title": "Are C++ static simple types initialized in order?", "CreationDate": "2010-10-15T22:37:43.770", "LastActivityDate": "2010-10-15T22:56:40.670", "CommentCount": "0", "PostTypeId": "1", "Id": "3946641", "Score": "3", "OwnerUserId": "477551", "Tags": "<c++><static><types><order>", "AnswerCount": "5"}, "3946694": {"PostTypeId": "2", "Body": "<p>The specific type of initialization that I think you're talking about:</p>\n<blockquote>\n<p id=\"so_3946641_3946694_0\">Basically, what I'm asking is does anyone disagree that static simple C types (non-objects) like char, short, int, and long (and structs without constructors composed of those types) are initialized when an executable is loaded into memory, before main() or any other constructor is invoked?</p>\n</blockquote>\n<p>I assume you mean that the initialization with constants - not by calling a function.  If that assumption is correct, then yes you can be sure that initialization will happen before any constructors are called:</p>\n<ul>\n<li>3.6.2 initialization of non-local objects</li>\n</ul>\n<blockquote>\n<p id=\"so_3946641_3946694_1\">Objects with static storage duration\n  (3.7.1) shall be zero-initialized\n  (8.5) before any other initialization\n  takes place. Zero-initialization and\n  initialization with a constant\n  expression are collectively called\n  static initialization; all other\n  initialization is dynamic\n  initialization. <strong>Objects of POD types\n  (3.9) with static storage duration\n  initialized with constant expressions\n  (5.19) shall be initialized before any\n  dynamic initialization takes place.</strong>\n  Objects with static storage duration\n  defined in namespace scope in the same\n  translation unit and dynamically\n  initialized shall be initialized in\n  the order in which their definition\n  appears in the translation unit.</p>\n</blockquote>\n<p>However an initalization such as</p>\n<pre><code>static int x = getvalue();\n</code></pre>\n<p>falls into the dynamic initialization category, so it gets ordered by appearance (and indeterminately between different translation units).</p>\n<p>Another caveat is that this doesn't apply to local statics (which might not be initialized until their block is entered), but that really doesn't matter since they aren't accessible to anything else until the enclosing block has been entered anyway.</p>\n", "LastActivityDate": "2010-10-15T22:48:17.793", "Id": "3946694", "CommentCount": "1", "CreationDate": "2010-10-15T22:48:17.793", "ParentId": "3946641", "Score": "7", "OwnerUserId": "12711"}, "3946660": {"PostTypeId": "2", "Body": "<p>Yes, all static initialization happens before main() is called.  But you cannot be sure in what order the initialization happens.  This can cause havoc when one static variable depends on the existence of another.  It's called the static initialization fiasco: <a href=\"http://www.parashift.com/c++-faq-lite/ctors.html#faq-10.14\" rel=\"nofollow\">http://www.parashift.com/c++-faq-lite/ctors.html#faq-10.14</a></p>\n<p>I often use the solution mentioned in the faq.  Use functions with static variables inside to control the order better.</p>\n", "LastActivityDate": "2010-10-15T22:41:17.823", "Id": "3946660", "CommentCount": "1", "CreationDate": "2010-10-15T22:41:17.823", "ParentId": "3946641", "Score": "7", "OwnerUserId": "33152"}, "3946662": {"Id": "3946662", "PostTypeId": "2", "Body": "<p>This is indeed the case.  What is not guaranteed is the <em>order</em> that static members in different translation units are initialised with respect to one another.</p>\n", "LastEditorUserId": "129570", "LastActivityDate": "2010-10-15T22:56:40.670", "CommentCount": "1", "CreationDate": "2010-10-15T22:41:30.550", "ParentId": "3946641", "Score": "4", "OwnerUserId": "129570", "LastEditDate": "2010-10-15T22:56:40.670"}});