post_cb({"9059004": {"Id": "9059004", "PostTypeId": "2", "Body": "<p>The C++ specification can only define things that are contained within the C++ specification. Remember: the C++ specification defines the behavior of a virtual machine it defines. And if it doesn't define that something can happen, it certainly doesn't define the behavior of C++ around that something that it doesn't say can happen.</p>\n<p>According to the C++ specification, a thread can exit in exactly three ways: by returning from its main function, throwing an exception through its main function, and direct process exiting (as with <code>std::terminate</code> or similar functions). In short, a C++ thread <em>cannot</em> exit in any other way. There is no <code>ExitThread</code> function in standard C++. Similarly, <code>std::thread</code> cannot kill a thread, either externally or internally.</p>\n<p>Therefore, anything that does cause this thing that C++ says can't happen is, by definition undefined. I guess it wouldn't even be \"undefined behavior\"; it would be in that nebulous space that threading was in before C++11 actually laid down how thread interactions worked.</p>\n<p>The same goes for \"signals\", whatever those are. The C++ spec doesn't say that those can cause a function to exit. Here be dragons.</p>\n<p>As for <code>longjmp</code>, that's covered by the behavior of <code>longjmp</code>. When you use <code>longjmp</code> to exit a function, that function never finished, just as if you used <code>throw</code> and <code>catch</code>. And in C++, an object is only constructed when its constructor has completed. Therefore the object's initialization was never completed, and it is uninitialized.</p>\n<p>I don't have the ISO C specification (which C++ references for the behavior of <code>longjmp</code>), but C++11 does strongly suggest that you can equate <code>throw</code>/<code>catch</code> with <code>longjmp</code>/<code>setjmp</code>, as far as when you get undefined behavior:</p>\n<pre><code>\u00a718.10 [support.runtime] p4:\n</code></pre>\n<blockquote>\n<p id=\"so_9058206_9059004_0\">The function signature longjmp(jmp_buf jbuf, int val) has more restricted behavior in this International Standard. A setjmp/longjmp call pair has undefined behavior if replacing the setjmp and longjmp by catch and throw would invoke any non-trivial destructors for any automatic objects.</p>\n</blockquote>\n<p>So I don't think this is underspecified. It may not be nicely and neatly laid out, but all of the pieces are there.</p>\n", "LastActivityDate": "2012-01-30T03:29:31.877", "CommentCount": "0", "CreationDate": "2012-01-30T03:29:31.877", "ParentId": "9058206", "Score": "2", "OwnerUserId": "734069"}, "bq_ids": {"n4140": {"so_9058206_9059004_0": {"length": 26, "quality": 0.9285714285714286, "section_id": 6967}, "so_9058206_9058206_0": {"length": 32, "quality": 1.0, "section_id": 3919}}, "n3337": {"so_9058206_9059004_0": {"length": 26, "quality": 0.9285714285714286, "section_id": 6714}, "so_9058206_9058206_0": {"length": 32, "quality": 1.0, "section_id": 3779}}, "n4659": {"so_9058206_9059004_0": {"length": 26, "quality": 0.9285714285714286, "section_id": 8467}, "so_9058206_9058206_0": {"length": 29, "quality": 0.90625, "section_id": 4805}}}, "9066962": {"Id": "9066962", "PostTypeId": "2", "Body": "<p>Just because the text mentions one particular case doesn't imply by omission that others would be any different. If there are other ways to prevent the initialization from completing, the implementation must retry at the next execution.</p>\n<p>I think Nicol's answer is mostly correct, but a non-trivial constructor does not imply a non-trivial destructor. <code>longjmp</code> may therefore interrupt initialization such that it must be retried. This is tricky only in a multithreaded environment, where a mutex is needed to prevent a race condition between threads vying to be the first to execute the initialization. The phantom mutex object needs a non-trivial destructor even if the initialized object does not have one. The likely result is deadlock. This is probably good material for a DR.</p>\n", "LastActivityDate": "2012-01-30T16:13:07.047", "CommentCount": "4", "CreationDate": "2012-01-30T16:13:07.047", "ParentId": "9058206", "Score": "0", "OwnerUserId": "153285"}, "9058206": {"ViewCount": "243", "Body": "<p>After answering <a href=\"https://stackoverflow.com/q/9057613/500104\">this question</a> and not finding a satisfying answer in the standard paper, I started wondering. The standard states the following w.r.t. initialization of mentioned variables:</p>\n<p><code>\u00a76.7 [stmt.dcl] p4</code></p>\n<blockquote>\n<p id=\"so_9058206_9058206_0\">[...] Otherwise such a variable is initialized the first time control passes through its declaration; <strong>such a variable is considered initialized upon the completion of its initialization</strong>. If the initialization exits by throwing an exception, the initialization is not complete, so it will be tried again the next time control enters the declaration.</p>\n</blockquote>\n<p>There is no mentioning of what might cause the initialization to be retried if it failed by anything else than throwing an exception (<code>longjmp()</code>, thead exit, signals to name a few).</p>\n<p>Did I overlook anything in the standard? I looked through initialization, declaration and exception clauses over and over and even consulted the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_toc.html\" rel=\"nofollow noreferrer\">CWG defects table of content</a> with a quick search for \"static\", but couldn't find anything related.</p>\n<p><strong>Is this an underspecification (and as such a defect) in the standard?</strong></p>\n", "AcceptedAnswerId": "9059004", "Title": "Is what constitutes a failed initialization of block-scope static or thread storage duration variables underspecified?", "CreationDate": "2012-01-30T00:47:00.123", "Id": "9058206", "CommentCount": "12", "FavoriteCount": "3", "PostTypeId": "1", "LastEditDate": "2017-05-23T12:17:42.737", "LastEditorUserId": "-1", "LastActivityDate": "2012-01-30T16:13:07.047", "Score": "6", "OwnerUserId": "500104", "Tags": "<c++><c++11><language-lawyer><static-initialization>", "AnswerCount": "2"}});