post_cb({"bq_ids": {"n4140": {"so_31659123_31659788_1": {"length": 7, "quality": 1.0, "section_id": 3882}, "so_31659123_31659788_0": {"length": 14, "quality": 1.0, "section_id": 380}}, "n3337": {"so_31659123_31659788_1": {"length": 7, "quality": 1.0, "section_id": 3742}, "so_31659123_31659788_0": {"length": 14, "quality": 1.0, "section_id": 371}}, "n4659": {"so_31659123_31659788_1": {"length": 7, "quality": 1.0, "section_id": 4771}, "so_31659123_31659788_0": {"length": 14, "quality": 1.0, "section_id": 395}}}, "31659788": {"Id": "31659788", "PostTypeId": "2", "Body": "<p>Yes, your code is valid. The unnamed temporary <code>unique_ptr</code> returned by <code>source</code> will be destroyed at the end of the full expression in which it was created, in this case the condition within the <code>if</code> statement.</p>\n<p>From N3337, <em>\u00a712.2/3 [class.temporary]</em></p>\n<blockquote>\n<p id=\"so_31659123_31659788_0\">... Temporary objects are destroyed as the last step in evaluating the full-expression (1.9) that (lexically) contains the point where they were created. ...</p>\n</blockquote>\n<p>And from <em>\u00a76.4/1 [stmt.select]</em>, the grammar for an <code>if</code> statement is</p>\n<blockquote>\n<p id=\"so_31659123_31659788_1\">Selection statements choose one of several flows of control.<br/></p>\n<pre><code>  selection-statement:\n      if ( condition ) statement\n      ...\n  condition:\n      expression\n      ...\n</code></pre>\n</blockquote>\n<hr>\n<p>Note that <code>return std::move(foo);</code> is not necessary, you can write <code>return foo;</code> and the <code>unique_ptr</code> will be <a href=\"https://stackoverflow.com/q/4316727/241631\">automatically moved</a>.</p>\n</hr>", "LastActivityDate": "2015-07-27T17:43:30.290", "CommentCount": "0", "CreationDate": "2015-07-27T17:43:30.290", "ParentId": "31659123", "Score": "4", "OwnerUserId": "241631"}, "31659790": {"Id": "31659790", "PostTypeId": "2", "Body": "<p>The result of calling a function that returns an object (and not a(n lvalue) reference) is a temporary, therefore it's alive until the end of the full expression, which is the whole condition of the if statement in this case. Hence the code is valid.</p>\n", "LastActivityDate": "2015-07-27T17:43:38.703", "CommentCount": "0", "CreationDate": "2015-07-27T17:43:38.703", "ParentId": "31659123", "Score": "3", "OwnerUserId": "3477950"}, "31659123": {"ViewCount": "90", "Body": "<p>If I have a function <code>source</code> that returns a <code>unique_ptr</code>, and I have a function <code>sink</code> that calls <code>source</code> in the following way, it works [clang].</p>\n<p>But is the behavior undefined? Or is everything copacetic?</p>\n<pre><code>class Foo {\n  ...\n  bool isValid() { return true; }\n  ...\n}\n\nstd::unique_ptr&lt;Foo&gt; source() {\n  auto foo = std::make_unique&lt;Foo&gt;();  // let's pretend this is C++14?\n  /* ... initialize foo */\n  return foo;\n}\n\nvoid sink() {\n  if (source()-&gt;isValid()) {\n    /* do something */\n  }\n  /* ... */\n}\n</code></pre>\n<p>Is it valid to use the <code>unique_ptr</code> on that line only? And when is the object <em>theoretically</em> supposed to be destructed? After that line? At the end of the function?</p>\n", "AcceptedAnswerId": "31659790", "Title": "Dropping a unique ptr returned from a function?", "CreationDate": "2015-07-27T17:05:32.620", "Id": "31659123", "CommentCount": "6", "LastEditDate": "2015-07-27T18:13:53.633", "PostTypeId": "1", "LastEditorUserId": "241631", "LastActivityDate": "2015-07-27T18:13:53.633", "Score": "2", "OwnerUserId": "1572626", "Tags": "<c++><c++11><unique-ptr>", "AnswerCount": "2"}});