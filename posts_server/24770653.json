post_cb({"24770653": {"CommentCount": "2", "ViewCount": "622", "PostTypeId": "1", "LastEditorUserId": "3843080", "CreationDate": "2014-07-16T01:11:58.580", "LastActivityDate": "2014-07-16T02:50:15.290", "Title": "Is it allowed to static_cast between different types of const?", "AcceptedAnswerId": "24770692", "LastEditDate": "2014-07-16T02:50:15.290", "Id": "24770653", "Score": "2", "Body": "<p>I have rarely seen static_cast between top level const so far.<br>\nRecently I had to use static_cast to display address of a pointer to const object and I come out with this question:<br>\nIs it allowed to static_cast between different types of const?  </br></br></p>\n<p>It passed compilation using gcc 4.7. But I am just asking here to confirm it is not UB. Thanks.</p>\n<pre><code>  const int a = 42; // test case 1, const obj\n  const double b = static_cast&lt;const double&gt;(a);\n  cout &lt;&lt; b &lt;&lt; endl;\n\n\n  const int c = 0; // test case 2, pointer to const obj\n  cout &lt;&lt; static_cast&lt;const void*&gt;(&amp;c) &lt;&lt; endl;\n</code></pre>\n", "Tags": "<c++>", "OwnerUserId": "3843080", "AnswerCount": "1"}, "24770692": {"ParentId": "24770653", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>From [expr.static.cast]</p>\n<blockquote>\n<p id=\"so_24770653_24770692_0\">[...] The static_cast operator shall not cast away constness</p>\n</blockquote>\n<p>It's perfectly fine to <em>add</em> <code>const</code> using <code>static_cast</code>, then again you don't need to in your test case</p>\n<pre><code>const int a = 42; // test case 1, const obj\nconst double b = static_cast&lt;double&gt;(a); // Works just as well.\nconst double b = a; // Of course this is fine too\n</code></pre>\n<p>I suppose one of the few times you'd want to add <code>const</code> with <code>static_cast</code> would be to explicitly call an overloaded function</p>\n<pre><code>void foo(int*) { }\nvoid foo(int const*) { }\n\nint main()\n{\n  int a = 42;\n\n  foo(&amp;a);\n  foo(static_cast&lt;int const*&gt;(&amp;a));\n}\n</code></pre>\n<p>Although with properly designed code you shouldn't really need to do this.</p>\n", "OwnerUserId": "657267", "LastEditorUserId": "657267", "LastEditDate": "2014-07-16T01:31:36.227", "Id": "24770692", "Score": "4", "CreationDate": "2014-07-16T01:17:31.860", "LastActivityDate": "2014-07-16T01:31:36.227"}, "bq_ids": {"n4140": {"so_24770653_24770692_0": {"section_id": 6027, "quality": 0.8333333333333334, "length": 5}}, "n3337": {"so_24770653_24770692_0": {"section_id": 5795, "quality": 0.8333333333333334, "length": 5}}, "n4659": {"so_24770653_24770692_0": {"section_id": 7526, "quality": 0.8333333333333334, "length": 5}}}});