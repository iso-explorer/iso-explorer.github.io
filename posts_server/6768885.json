post_cb({"6768990": {"ParentId": "6768885", "CommentCount": "0", "Body": "<p>This is a known issue in the Visual C++ 2005 C++ Standard Library implementation (see <a href=\"http://connect.microsoft.com/VisualStudio/feedback/details/100097/binary-predicate-paramter-to-lower-bound-assumes-that-both-parameres-are-the-same-type-when-compiling-in-debug-mode\" rel=\"noreferrer\">\"Binary predicate paramter to <code>lower_bound</code> assumes that both parameters are the same type when compiling in debug mode\" on Microsoft Connect</a>).</p>\n<p>The bug was fixed in Visual C++ 2008.</p>\n", "OwnerUserId": "151292", "PostTypeId": "2", "Id": "6768990", "Score": "7", "CreationDate": "2011-07-20T21:51:12.873", "LastActivityDate": "2011-07-20T21:51:12.873"}, "bq_ids": {"n4140": {"so_6768885_6768885_1": {"section_id": 1423, "quality": 0.7368421052631579, "length": 14}}, "n3337": {"so_6768885_6768885_1": {"section_id": 1417, "quality": 0.7368421052631579, "length": 14}}, "n4659": {"so_6768885_6768885_1": {"section_id": 1543, "quality": 0.7368421052631579, "length": 14}}}, "6768885": {"CommentCount": "3", "ViewCount": "655", "PostTypeId": "1", "LastEditorUserId": "151292", "CreationDate": "2011-07-20T21:39:32.727", "LastActivityDate": "2011-07-20T22:06:46.733", "Title": "STL lower_bound not spec compliant", "AcceptedAnswerId": "6768990", "LastEditDate": "2011-07-20T22:06:46.733", "Id": "6768885", "Score": "1", "Body": "<p>The following code doesn't compile in C++Builder 2009 or in Visual C++ 2005 when the macro <code>_HAS_ITERATOR_DEBUGGING</code> equals <code>1</code> but if commented out it will. It appears the <code>lower_bound</code> function isn't spec compliant. The library is swapping the arguments. Here's an excerpt form the spec. <code>value</code> should always be the second argument.  Am I wrong?</p>\n<p>NOTE: The test code wasn't designed to run.  It was designed to illustrate the library bug.</p>\n<h3>C++ Spec excerpt</h3>\n<pre><code>template&lt;class ForwardIterator, class T, class Compare&gt;\nForwardIterator\nlower_bound(ForwardIterator first, \n            ForwardIterator last, \n            const T&amp; value, \n            Compare comp);\n</code></pre>\n<blockquote>\n<p id=\"so_6768885_6768885_0\">25.3.3.1.3</p>\n<p id=\"so_6768885_6768885_1\">Returns: The furthermost iterator i in the range [first, last] such that for any iterator j in the range [first, i) the following corresponding conditions hold: *j &lt; value or comp(*j, value) != false</p>\n</blockquote>\n<h3>Visual Studio error message</h3>\n<blockquote>\n<p id=\"so_6768885_6768885_2\">Msg: error C2664: 'double mike::operator ()(const double,const char *) const' : cannot convert parameter 1 from 'const char [1]' to 'const double'</p>\n<p id=\"so_6768885_6768885_3\">File: c:\\program files\\microsoft visual studio 8\\vc\\include\\xutility</p>\n<p id=\"so_6768885_6768885_4\">Line No: 314</p>\n</blockquote>\n<h3>Test Code</h3>\n<pre><code>#define _HAS_ITERATOR_DEBUGGING 1  // needs to be in the stdafx.h file for Visual Studio\n#include \"stdafx.h\"\n#include &lt;algorithm&gt;\n#include &lt;functional&gt;\n\nstruct mike : public std::binary_function&lt;double, char*, double&gt; {\n   double operator() (const double i, const char*) const {\n      return i;\n   }\n};\n\nint main()\n{\n   double r[] = {0};\n   std::lower_bound(r, r, \"\", mike());\n   return 0;\n}\n</code></pre>\n", "Tags": "<c++><visual-c++><stl><visual-c++-2005>", "OwnerUserId": "4778", "AnswerCount": "1"}});