post_cb({"14697203": {"Id": "14697203", "PostTypeId": "2", "Body": "<p>This is dictated by \u00a7 27.7.3.6.4 of the C++11 Standard, where the following two overloaded operators (among others) are specified:</p>\n<pre><code>template&lt;class charT, class traits&gt;\nbasic_ostream&lt;charT,traits&gt;&amp; operator&lt;&lt;(\n    basic_ostream&lt;charT,traits&gt;&amp; out, \n    const charT* s\n    );\n\ntemplate&lt;class charT, class traits&gt;\nbasic_ostream&lt;charT,traits&gt;&amp; operator&lt;&lt;(\n    basic_ostream&lt;charT,traits&gt;&amp; out, \n    const char* s\n    );\n</code></pre>\n<p>The last overload deals explicitly with <code>char</code>-based C-strings. This means that even for instantiations of the <code>basic_ostream&lt;&gt;</code> class template with the argument <code>wchar_t</code> there will be one overload which will deal with narrow <code>char</code> strings.</p>\n<p>Moreover, per \u00a7 27.7.3.6.4/5:</p>\n<blockquote>\n<p id=\"so_14696997_14697203_0\">Padding is determined as described in 22.4.2.2.2. <strong>The n characters starting at s are widened using out.widen (27.5.5.3). The widened characters and any required padding are inserted into out</strong>. Calls width(0).</p>\n</blockquote>\n<p><hr> \nOn the other hand, the statement <code>wcout &lt;&lt; string(\"Hello\");</code> does not compile because <code>string</code> does not have an implicit conversion to <code>const char*</code>, and because there is no overload of <code>operator &lt;&lt;</code> that would insert a <code>string</code> built with one character type into an output stream with a different underlying character type.</hr></p>\n<p>In Standard terms (see \u00a7 21.4.8.9), here is how the definition of the overloaded <code>operator &lt;&lt;</code> looks like for <code>std::string</code>:</p>\n<pre><code>template&lt;class charT, class traits, class Allocator&gt;\nbasic_ostream&lt;charT, traits&gt;&amp; operator&lt;&lt;(\n    basic_ostream&lt;charT, traits&gt;&amp; os,\n    const basic_string&lt;charT,traits,Allocator&gt;&amp; str\n    );\n</code></pre>\n<p>As you can see, the same template parameter <code>charT</code> is used to instantiate both <code>basic_ostream</code> and <code>basic_string</code>.</p>\n", "LastEditorUserId": "1932150", "LastActivityDate": "2013-02-04T23:06:31.060", "Score": "8", "CreationDate": "2013-02-04T22:49:21.863", "ParentId": "14696997", "CommentCount": "1", "OwnerUserId": "1932150", "LastEditDate": "2013-02-04T23:06:31.060"}, "bq_ids": {"n4140": {"so_14696997_14697203_0": {"length": 11, "quality": 0.5238095238095238, "section_id": 2306}}, "n3337": {"so_14696997_14697203_0": {"length": 17, "quality": 0.8095238095238095, "section_id": 2294}}, "n4659": {"so_14696997_14697203_0": {"length": 11, "quality": 0.5238095238095238, "section_id": 2580}}}, "14696997": {"ViewCount": "1589", "Body": "<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\nint main()\n{\n    wcout &lt;&lt; L\"Hello\";          // OK.\n    wcout &lt;&lt; wstring(L\"Hello\"); // OK.\n    wcout &lt;&lt; \"Hello\";           // OK. Why?\n    wcout &lt;&lt; string(\"Hello\");   // Error. Why?\n}\n</code></pre>\n<p>Why does <code>std::wcout</code> accept a narrow string literal as its argument but doesn't accept a narrow string object?</p>\n", "AcceptedAnswerId": "14697203", "Title": "Why is it that wcout << \"\"; is OK but wcout << string(); is not?", "CreationDate": "2013-02-04T22:33:23.367", "Id": "14696997", "CommentCount": "3", "FavoriteCount": "3", "PostTypeId": "1", "LastEditDate": "2013-08-25T15:04:08.640", "LastEditorUserId": "1237747", "LastActivityDate": "2013-08-25T15:04:08.640", "Score": "14", "OwnerUserId": "508343", "Tags": "<string><encoding><iostream><c++>", "AnswerCount": "2"}, "14697185": {"Id": "14697185", "PostTypeId": "2", "Body": "<p>For the first one, I'm guessing <a href=\"http://en.cppreference.com/w/cpp/io/basic_ostream/operator_ltlt2\" rel=\"nofollow\">this overload</a> is used:</p>\n<pre><code>template&lt; class CharT, class Traits &gt;\nbasic_ostream&lt;CharT,Traits&gt;&amp; operator&lt;&lt;( basic_ostream&lt;CharT,Traits&gt;&amp; os, \n                                         const char* s );\n</code></pre>\n<p>Where <code>wstream</code> is essentially a <code>basic_ostream&lt;wchar_t&gt;</code>.</p>\n<p>For why <code>string(\"Hello\")</code> doesn't work, it's simply because there is no conversion from <code>string</code> to <code>wstring</code>, nor an overload of <code>operator&lt;&lt;</code> provided.</p>\n", "LastActivityDate": "2013-02-04T22:47:58.907", "CommentCount": "3", "CreationDate": "2013-02-04T22:47:58.907", "ParentId": "14696997", "Score": "2", "OwnerUserId": "964135"}});