post_cb({"22586250": {"ViewCount": "265", "Body": "<p>I was looking at a program that calculates the average of 3 numbers and came across     </p>\n<pre><code>#define EXIT_SUCCESS 0 \n</code></pre>\n<p>to make <code>return EXIT_SUCCESS;</code> work without an error (right under the include header). What is the purpose of using <code>#define EXIT_SUCCESS 0</code> and <code>return EXIT_SUCCESS;</code> and is there any alternative to this? Is it like <code>return 0;</code>? Thank you for your time.</p>\n<p>Here is the code for the program I was looking at: </p>\n<pre><code>#include &lt;iostream&gt;\n#define EXIT_SUCCESS 0\nusing namespace std;\n\nint main()\n{\n// prototypes:\n\nfloat add_and_div(float, float, float);\n\n// variables:\n\nfloat x, y, z;\nfloat result;\n\ncout &lt;&lt; \"Enter three floats: \";\ncin &gt;&gt; x &gt;&gt; y &gt;&gt; z;\n\n// continue the program here\n\nresult = add_and_div( x, y, z );\ncout&lt;&lt; \"Average is \\n\" &lt;&lt; result;\n\nreturn EXIT_SUCCESS;\n}\n\n// function definition:\n\nfloat add_and_div(float n1, float n2, float n3)\n{\n\n// continue the program here\nreturn ( n1 + n2 + n3 ) / 3;\n}\n</code></pre>\n", "Title": "#define EXIT_SUCCESS 0", "CreationDate": "2014-03-23T02:14:55.107", "LastActivityDate": "2014-03-23T10:12:48.623", "CommentCount": "3", "PostTypeId": "1", "Id": "22586250", "Score": "2", "OwnerUserId": "3196847", "Tags": "<c++><function><function-prototypes>", "AnswerCount": "4"}, "22586310": {"Id": "22586310", "PostTypeId": "2", "Body": "<p>The macros <code>EXIT_SUCCESS</code> and <code>EXIT_FAILURE</code> expand into integral expressions that either indicate successful or unsuccessful execution of the program. They're part of the C standard and can be found in <a href=\"http://en.cppreference.com/w/c/program/EXIT_status\" rel=\"nofollow\"><code>stdlib.h</code></a> or rather <a href=\"http://en.cppreference.com/w/cpp/utility/program/EXIT_status\" rel=\"nofollow\"><code>cstdlib</code></a>.</p>\n<p>In your case it will expand to <code>0</code>, so <code>return EXIT_SUCCESS</code> <strong>is</strong> the same as <code>return 0</code>. However, the macro is already defined in the standard library, so you should use that one instead of defining your own. Note that returning or using <code>EXIT_SUCCESS</code> in <code>exit</code> will have the same behavior as using <code>0</code> at those occurrences, so it's up to you what you want to use.</p>\n", "LastEditorUserId": "1139697", "LastActivityDate": "2014-03-23T02:42:10.120", "Score": "5", "CreationDate": "2014-03-23T02:24:59.923", "ParentId": "22586250", "CommentCount": "2", "OwnerUserId": "1139697", "LastEditDate": "2014-03-23T02:42:10.120"}, "bq_ids": {"n4140": {"so_22586250_22586378_0": {"length": 17, "quality": 1.0, "section_id": 7149}, "so_22586250_22586378_2": {"length": 9, "quality": 0.8181818181818182, "section_id": 6305}, "so_22586250_22586378_1": {"length": 16, "quality": 0.7619047619047619, "section_id": 6805}}, "n3337": {"so_22586250_22586378_0": {"length": 17, "quality": 1.0, "section_id": 6893}, "so_22586250_22586378_2": {"length": 9, "quality": 0.8181818181818182, "section_id": 6062}, "so_22586250_22586378_1": {"length": 16, "quality": 0.7619047619047619, "section_id": 6560}}, "n4659": {"so_22586250_22586378_0": {"length": 17, "quality": 1.0, "section_id": 8650}, "so_22586250_22586378_2": {"length": 9, "quality": 0.8181818181818182, "section_id": 7816}, "so_22586250_22586378_1": {"length": 16, "quality": 0.7619047619047619, "section_id": 8296}}}, "22586378": {"Id": "22586378", "PostTypeId": "2", "Body": "<p>As per <code>C++11 3.6.1 Main function /5</code>:</p>\n<blockquote>\n<p id=\"so_22586250_22586378_0\">A return statement in main has the effect of leaving the main function (destroying any objects with automatic storage duration) <em>and calling std::exit with the return value as the argument.</em></p>\n</blockquote>\n<p>In <code>18.5 Start and termination /8</code>, it states, with regards to <code>exit</code>:</p>\n<blockquote>\n<p id=\"so_22586250_22586378_1\">If status is _zero or EXIT_SUCCESS,_ an implementation-defined form of the status successful termination is returned. If status is EXIT_FAILURE, an implementation-defined form of the status unsuccessful termination is returned. Otherwise the status returned is implementation-defined.</p>\n</blockquote>\n<p>In other words, returning either <code>0</code> or <code>EXIT_SUCCESS</code> has the same effect here so you would be better off returning the literal <code>0</code>, which every competent C or C++ coder knows indicates a successful termination of the program.</p>\n<p>If you <em>really</em> want to use <code>EXIT_SUCCESS</code>, you should be including the one in <code>&lt;cstdlib&gt;</code> rather than creating your own. The standard <em>specifically disallows</em> otherwise, as per <code>17.6.4.3.1 Macro names /1</code>:</p>\n<blockquote>\n<p id=\"so_22586250_22586378_2\">A translation unit that includes a standard library header shall not #define or #undef names declared in <em>any</em> standard library header.</p>\n</blockquote>\n<p>The fact that you're including a standard header file <code>iostream</code> means that you are not permitted to define <code>EXIT_SUCCESS</code> yourself.</p>\n", "LastEditorUserId": "14860", "LastActivityDate": "2014-03-23T08:46:42.153", "Score": "1", "CreationDate": "2014-03-23T02:35:25.307", "ParentId": "22586250", "CommentCount": "1", "OwnerUserId": "14860", "LastEditDate": "2014-03-23T08:46:42.153"}, "22586486": {"Id": "22586486", "PostTypeId": "2", "Body": "<p>As others have noted, <code>EXIT_SUCCESS</code> is defined in <code>&lt;cstdlib&gt;</code>. Presumably the author was simply unaware of this. Moreover it is <em>not</em> guaranteed to be zero, but an \"integer constant expression that can be used as the argument to the <code>exit</code> function to return \u2026 successful termination status \u2026 to the host environment.\" (C11 \u00a77.22/3) Therefore the compiler can complain about the custom <code>#define</code> conflicting with the macro definition in <code>&lt;cstdlib&gt;</code>.</p>\n<p>In practice, it is always zero though. Even if it's not, zero is also guaranteed to mean success.</p>\n<p>It's a matter of style, but most prefer to write no <code>return</code> statement at all at the end of <code>main</code>. In both C++ and recent editions of C, a <code>return 0;</code> is added automatically in this case.</p>\n", "LastEditorUserId": "153285", "LastActivityDate": "2014-03-23T10:12:48.623", "Score": "3", "CreationDate": "2014-03-23T02:52:52.570", "ParentId": "22586250", "CommentCount": "2", "OwnerUserId": "153285", "LastEditDate": "2014-03-23T10:12:48.623"}, "22586369": {"Id": "22586369", "PostTypeId": "2", "Body": "<p>Yes it is the same. #define basically tells the compiler to switch,when they are referred, with it's value.</p>\n<p>Example:</p>\n<p>Code:</p>\n<pre><code>#define HELLO 0\n#define WORLD \"WORLD\"\n\ncout &lt;&lt; HELLO;\ncout &lt;&lt; WORLD;\n</code></pre>\n<p>The compiler will then change it to:</p>\n<pre><code>cout &lt;&lt; 0;\ncout &lt;&lt; \"WORLD\";\n</code></pre>\n<p>It's much more safe to use defines because you can easily change one value that changes the whole program than changing the whole program directly.</p>\n<p>Also, defines are constant values. It also does not matter if it's an integer value, float, string or even a structure reference. And, because of being constant, defines can never be changed after the program execution (like in functions).</p>\n", "LastActivityDate": "2014-03-23T02:33:26.037", "CommentCount": "0", "CreationDate": "2014-03-23T02:33:26.037", "ParentId": "22586250", "Score": "1", "OwnerUserId": "2469320"}});