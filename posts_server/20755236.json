post_cb({"bq_ids": {"n4140": {"so_20755236_20755302_0": {"length": 30, "quality": 0.9090909090909091, "section_id": 3919}, "so_20755236_20755302_1": {"length": 10, "quality": 0.9090909090909091, "section_id": 3917}}, "n3337": {"so_20755236_20755302_0": {"length": 30, "quality": 0.9090909090909091, "section_id": 3779}, "so_20755236_20755302_1": {"length": 10, "quality": 0.9090909090909091, "section_id": 3777}}, "n4659": {"so_20755236_20755302_0": {"length": 19, "quality": 0.5757575757575758, "section_id": 4805}, "so_20755236_20755302_1": {"length": 10, "quality": 0.9090909090909091, "section_id": 4803}}}, "20755236": {"ViewCount": "1026", "Body": "<p>*Though my question pertains to glfw, this could probably be answered by someone with more C++ knowledge than myself.</p>\n<p>I am having a difficult time understand the behavior of the following line of code:</p>\n<pre><code>static double previousSeconds = glfwGetTime();\n</code></pre>\n<p>Assume that this is in an infinite while loop.</p>\n<p>If I print out previousSeconds within the while loop, the value does not change. For example, I would get 0.420998 for eternity. glfwGetTime() returns the second since glfw has been initialized. So the first time through the while look it should be 0.4290998 and the second time it should be... say 0.44xxxxx. This behavior is different when I remove \"static\", it then counts up as I would expect. I don't understand why this being static would cause a behavior where the value stays the same.  As I'm aware static variables retain their values between invocations, but I'm re-assigning its value each iteration through the while loop.</p>\n<p>Can someone please clear this up for me?</p>\n", "AcceptedAnswerId": "20755302", "Title": "glfwGetTime() and static variables", "CreationDate": "2013-12-24T05:18:05.603", "Id": "20755236", "CommentCount": "1", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2013-12-24T05:32:39.760", "Score": "1", "OwnerUserId": "668518", "Tags": "<c++><static><glfw>", "AnswerCount": "1"}, "20755302": {"Id": "20755302", "PostTypeId": "2", "Body": "<p>Static variables are only initialised once, if the compiler runs across another initialisation of the static variable it will check to see if it already exists, if it does, ignore it.</p>\n<p>So the first time through the loop the static variable is initialised, all other times it is ignored because it has already been initialised.</p>\n<p>I think this part of the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3797.pdf\" rel=\"nofollow\">C standard N3797</a> covers this:</p>\n<blockquote>\n<p id=\"so_20755236_20755302_0\">Constant initialization (3.6.2) of a\n  block-scope entity with static storage duration, if applicable, is performed before its block is \ufb01rst entered.<br>\n  ...<br>\n  Otherwise such a variable is\n  initialized the \ufb01rst time control passes through its declaration; such a variable is considered initialized upon\n  the completion of its initialization.</br></br></p>\n</blockquote>\n<p>Non static variable follow the following rule:</p>\n<blockquote>\n<p id=\"so_20755236_20755302_1\">Variables with automatic storage duration (3.7.3) are initialized each time their declaration-statement is\n  executed.</p>\n</blockquote>\n<p>This explains why the non-static variable changes, while the static one does not.</p>\n", "LastEditorUserId": "958051", "LastActivityDate": "2013-12-24T05:32:39.760", "Score": "4", "CreationDate": "2013-12-24T05:25:03.857", "ParentId": "20755236", "CommentCount": "1", "OwnerUserId": "958051", "LastEditDate": "2013-12-24T05:32:39.760"}});