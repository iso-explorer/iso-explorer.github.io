post_cb({"32105975": {"CommentCount": "0", "AcceptedAnswerId": "32105997", "PostTypeId": "1", "LastEditorUserId": "560648", "CreationDate": "2015-08-19T21:29:47.717", "LastActivityDate": "2015-08-20T01:21:40.570", "LastEditDate": "2015-08-19T21:32:24.363", "ViewCount": "3309", "FavoriteCount": "5", "Title": "Why can't I have template and default arguments?", "Id": "32105975", "Score": "4", "Body": "<p>I changed a paremeter in a function to accept any kind of object using a template but I can't use it in conjunction with other default parameters, is there something I am missing?</p>\n<pre><code>#include &lt;string&gt;\n#include &lt;iostream&gt;\n\nclass MyClass {\n    public:\n    std::wstring msg = L\"hey\";\n    MyClass(){};\n};\n\nclass MyClass2{\n    public:\n    template&lt;class T&gt; MyClass2(T* t, int i);\n};\ntemplate&lt;class T&gt;\nMyClass2::MyClass2(T* t,int i=0){ std::wcout &lt;&lt; t-&gt;msg &lt;&lt; std::endl; }\n\nint main(int argc, char **argv)\n{\n    MyClass mc;\n    MyClass2 mc2(&amp;mc);\n    return 0;\n}\n</code></pre>\n<p>Output:</p>\n<pre><code>practice.cpp:16:32: error: redeclaration of 'MyClass2::MyClass2(T*, int)' may not have default arguments [-fpermissive]\n</code></pre>\n<p>I thought it was reasonable to not use default values in the template but is there a reason for the other parameters?</p>\n", "Tags": "<c++><templates><default-parameters>", "OwnerUserId": "1417926", "AnswerCount": "1"}, "32105997": {"ParentId": "32105975", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2015-08-19T21:31:29.960", "Score": "16", "LastEditorUserId": "560648", "LastEditDate": "2015-08-20T01:21:40.570", "Id": "32105997", "OwnerUserId": "560648", "Body": "<p><strong>You certainly <a href=\"http://coliru.stacked-crooked.com/a/59f6e9d472b06296\" rel=\"noreferrer\">can</a>; put the default argument on the declaration, not the definition.</strong></p>\n<p>Putting the default in the definition's argument list instead of the declaration's is an added extra that is not available for function templates:</p>\n<blockquote>\n<p id=\"so_32105975_32105997_0\"><code>[C++14: 8.3.6/4]:</code> For non-template functions, default arguments can be added in later declarations of a function in the same scope. <em>[..]</em></p>\n</blockquote>\n<p>I don't really know why this restriction is in place.</p>\n<p>Similar rule:</p>\n<blockquote>\n<p id=\"so_32105975_32105997_1\"><code>[C++14: 8.3.6/6]:</code> Except for member functions of class templates, the default arguments in a member function definition that appears outside of the class definition are added to the set of default arguments provided by the member function declaration in the class definition <em>[..]</em></p>\n</blockquote>\n", "LastActivityDate": "2015-08-20T01:21:40.570"}, "bq_ids": {"n4140": {"so_32105975_32105997_0": {"section_id": 3255, "quality": 0.7857142857142857, "length": 11}, "so_32105975_32105997_1": {"section_id": 3257, "quality": 0.9230769230769231, "length": 24}}, "n3337": {"so_32105975_32105997_0": {"section_id": 3127, "quality": 0.7857142857142857, "length": 11}, "so_32105975_32105997_1": {"section_id": 3129, "quality": 0.9230769230769231, "length": 24}}, "n4659": {"so_32105975_32105997_0": {"section_id": 4013, "quality": 0.7857142857142857, "length": 11}, "so_32105975_32105997_1": {"section_id": 4015, "quality": 0.9230769230769231, "length": 24}}}});