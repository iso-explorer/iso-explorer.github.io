post_cb({"16715590": {"ParentId": "16715441", "CommentCount": "0", "Body": "<pre><code>myClass myInstance;\n{\nstruct tm a,b;\na = myInstance.GetMinDate();\nb = myInstance.GetMaxDate();\nSetMinMaxDate(&amp;a, &amp;b);\n}\n</code></pre>\n<p>how you <em>should</em> implement it.</p>\n<p>According to my gray rememberings you may not get the address of an <code>rvalue</code> - that is what you do.</p>\n<p>So short: Intel C is right</p>\n", "OwnerUserId": "188533", "PostTypeId": "2", "Id": "16715590", "Score": "0", "CreationDate": "2013-05-23T13:44:14.970", "LastActivityDate": "2013-05-23T13:44:14.970"}, "16717216": {"ParentId": "16715441", "CommentCount": "1", "Body": "<p>Q: Is there a problem in this code or is this a false positive of intel C++?\nA: I see this a problem in this code.</p>\n<p>The function GetMinDate() returns a value which, theoretically, could be stored in a processor register(s).  Thus it has no address.  Most compilers will store the return value in a temporary whose lifetime is fleeting.  So far, no problem.</p>\n<pre><code> struct tm GetMinDate()  {return minDate;};\n</code></pre>\n<p>Later you reference the \"address\" of this result in </p>\n<pre><code>... &amp;myInstance.GetMinDate() ...\n</code></pre>\n<p>Now you have a problem.  The address of the temporary could quickly be used by another operation like the result of myInstance.Get*<em>Max</em>*Date().</p>\n<p>@drahnr recommended implementation is a good solution.</p>\n<p>Another, but poor approach as struct tm is large, would be to pass the parameters to SetMinMaxDate() as values</p>\n<pre><code>SetMinMaxDate(struct tm MinDate, struct tm MaxDate);\n</code></pre>\n", "OwnerUserId": "2410359", "PostTypeId": "2", "Id": "16717216", "Score": "0", "CreationDate": "2013-05-23T14:53:19.570", "LastActivityDate": "2013-05-23T14:53:19.570"}, "16715564": {"ParentId": "16715441", "CommentCount": "0", "Body": "<p>Per paragraph 5.3.1/3 of the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_16715441_16715564_0\">The result of the unary <code>&amp;</code> operator is a pointer to its operand. <strong>The operand shall be an lvalue or a qualified-id</strong>. [...]</p>\n</blockquote>\n<p>Not only the warning is appropriate, I am rather wondering why it is not an error. Your program  is ill-formed, since temporaries are not lvalues. Probably, MSVC supports this as a compiler extension - but the value of this extension is rather arguable.</p>\n", "OwnerUserId": "1932150", "PostTypeId": "2", "Id": "16715564", "Score": "5", "CreationDate": "2013-05-23T13:43:09.603", "LastActivityDate": "2013-05-23T13:43:09.603"}, "bq_ids": {"n4140": {"so_16715441_16715564_0": {"section_id": 6066, "quality": 0.8181818181818182, "length": 9}}, "n3337": {"so_16715441_16715564_0": {"section_id": 5834, "quality": 0.8181818181818182, "length": 9}}, "n4659": {"so_16715441_16715564_0": {"section_id": 7562, "quality": 0.8181818181818182, "length": 9}}}, "16715527": {"ParentId": "16715441", "CommentCount": "1", "Body": "<p>It is a valid warning because <code>SetMinMaxDate()</code> makes no guarantees that it will not store that pointer for later use.  And since you are passing a pointer to a temporary, if <code>SetMinMaxDate</code> stored it for later use, it would be a problem.</p>\n<p>Another reason for the warning is that with the declaration you have, maybe <code>SetMinMaxDate</code> is <em>modifying</em> the tm structs passed in via pointer and such modifications would get lost since it is a pointer to a temp object.</p>\n<p><code>SetMinMaxDate</code> would be better declared as:</p>\n<pre><code>SetMinMaxDate(const struct tm &amp; MinDate, const struct tm &amp; MaxDate);\n</code></pre>\n<p>there would be no warning in this case.  The <code>const</code> lets the compiler know it will not be modifying the object and the <code>&amp;</code> indicates that it is unlikely to be trying to store the address for later.</p>\n", "OwnerUserId": "674326", "PostTypeId": "2", "Id": "16715527", "Score": "6", "CreationDate": "2013-05-23T13:41:51.443", "LastActivityDate": "2013-05-23T13:41:51.443"}, "16715441": {"CommentCount": "2", "ViewCount": "436", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2013-05-23T13:38:09.850", "LastActivityDate": "2013-05-23T16:32:49.827", "Title": "intel++: warning #1563: taking the address of a temporary - false positive?", "AcceptedAnswerId": "16715527", "LastEditDate": "2017-05-23T11:50:11.753", "Id": "16715441", "Score": "3", "Body": "<p>I got this class:</p>\n<pre><code>class myClass\n{\nprivate:\n      struct tm minDate, maxDate;\npublic:\n      myClass();\n\n      struct tm GetMinDate()  {return minDate;};\n      struct tm GetMaxDate()  {return maxDate;};\n};\n</code></pre>\n<p>and this function call</p>\n<pre><code>SetMinMaxDate(struct tm *MinDate, struct tm *MaxDate);\n</code></pre>\n<p>the follwing code</p>\n<pre><code>myClass myInstance;\nSetMinMaxDate(&amp;myInstance.GetMinDate(), &amp;myInstance.GetMaxDate());\n</code></pre>\n<p>Works well and with MSVC 2010 and 2005 no warnings are generated. But if i compile it with intel C++ i get the warning</p>\n<pre><code>warning #1563: taking the address of a temporary\n</code></pre>\n<p>According to <a href=\"https://stackoverflow.com/questions/584824/guaranteed-lifetime-of-temporary-in-c\">this related thread</a> </p>\n<blockquote>\n<p id=\"so_16715441_16715441_0\">The lifetime of the temporary object (also known as an rvalue) is tied\n  to the expression and the destructor for the temporary object is\n  called at the end of the full expression</p>\n</blockquote>\n<p>SetMinMaxDate copies the content passed with pointers. The pointer itself is not stored.\nSo the 2 temporary tm elements should be valid until SetMinMaxDate has returned.</p>\n<p>Is there a problem in this code or is this a false positive of intel C++?</p>\n<p><strong>EDIT:</strong>\nI found another very interesting post that gives a reason for this behavior:\n<a href=\"https://stackoverflow.com/questions/8763398/why-is-it-illegal-to-take-the-address-of-an-rvalue-temporary\">Why is it illegal to take the address of an rvalue temporary?</a></p>\n", "Tags": "<c++><icc>", "OwnerUserId": "53420", "AnswerCount": "4"}});