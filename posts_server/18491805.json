post_cb({"18491805": {"ViewCount": "435", "Body": "<p>How to work in C++ with functions the following form: <code>void function(...) {}</code>? </p>\n<p>Do really need at least one implicit parameter?</p>\n", "AcceptedAnswerId": "18493152", "Title": "Function with a variable number of parameters without any explicit parameters", "CreationDate": "2013-08-28T15:12:45.577", "Id": "18491805", "CommentCount": "17", "FavoriteCount": "2", "PostTypeId": "1", "LastActivityDate": "2013-08-28T16:20:16.820", "Score": "2", "OwnerUserId": "2668766", "Tags": "<c++><function>", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_18491805_18493152_4": {"length": 13, "quality": 0.7647058823529411, "section_id": 6966}}, "n3337": {"so_18491805_18493152_4": {"length": 13, "quality": 0.7647058823529411, "section_id": 6713}}, "n4659": {"so_18491805_18493152_4": {"length": 12, "quality": 0.7058823529411765, "section_id": 8465}}}, "18492871": {"Id": "18492871", "PostTypeId": "2", "Body": "<p>Given that the <code>va_start</code> \"function\" requires an argument to set up the <code>va_list</code>, I'd say it's not possible to do this in a way that works reliably and portably. It may well be possible to find something that works on specific platforms - but don't expect it to work if you change the compiler, compile for a different platform, and in some cases even if you compile with different compiler options (or change the code in the function, e.g. introducing local variables). </p>\n<pre><code>... \nva_list vl;\nva_start(vl, arg);\n...\n</code></pre>\n<p>Of course, your other problem is knowing when there is NO arguments (which would be a valid case). So if you don't have at least one argument, what happens when you pass no argument at all? How do you \"know\" this is the case? </p>\n", "LastActivityDate": "2013-08-28T16:00:29.240", "CommentCount": "0", "CreationDate": "2013-08-28T16:00:29.240", "ParentId": "18491805", "Score": "1", "OwnerUserId": "1919155"}, "18492667": {"Id": "18492667", "PostTypeId": "2", "Body": "<p>If you want to maintain some semblance of platform independence, you need at least one parameter and use the va_arg macros.</p>\n<p>If you know the low level details of the architecture and calling convention, then you can pull the arguments directly out of the registers and/or stack (depending on where the various parameters end up).</p>\n", "LastActivityDate": "2013-08-28T15:51:08.023", "CommentCount": "0", "CreationDate": "2013-08-28T15:51:08.023", "ParentId": "18491805", "Score": "1", "OwnerUserId": "858968"}, "18493152": {"Id": "18493152", "PostTypeId": "2", "Body": "<p>Repeating from a comment:</p>\n<p>It seems there is an interesting difference between C99 and C++11 here: C++11 allows a function declaration <code>void foo(...)</code> because the <em>parameter-declaration-list</em> in the <em>parameter-declaration-clause</em> is optional: [dcl.fct]</p>\n<p>Function declaration:</p>\n<blockquote>\n<p id=\"so_18491805_18493152_0\"><code>D1 (</code> <em>parameter-declaration-clause</em> <code>)</code> <em>cv-qualifier-seq<sub>opt</sub> ref-qualifier<sub>opt</sub> exception-specification<sub>opt</sub> attribute-specifier-seq<sub>opt</sub></em></p>\n</blockquote>\n<p>Parameters:</p>\n<blockquote>\n<p id=\"so_18491805_18493152_1\"><em>parameter-declaration-clause:</em> <br/>\n  \u2003 <em>parameter-declaration-list<sub>opt</sub></em> <code>...</code><sub><em>opt</em></sub> <br/>\n  \u2003 <em>parameter-declaration-list</em> <code>, ...</code></p>\n</blockquote>\n<p>(Note how both the <em>parameter-declaration-list</em> and the <code>...</code> are separately <em>opt</em> here, meaning you can leave out one or the other or both. This interpretation is supported by clang++ and g++.)</p>\n<p>In C99, this declaration is not allowed since the <em>parameter-list</em> is not optional in the <em>parameter-type-list</em>: 6.7.5/1</p>\n<p>Function declaration:</p>\n<blockquote>\n<p id=\"so_18491805_18493152_2\"><em>direct-declarator</em> <code>(</code> <em>parameter-type-list</em> <code>)</code></p>\n</blockquote>\n<p>Parameters:</p>\n<blockquote>\n<p id=\"so_18491805_18493152_3\"><em>parameter-type-list:</em><br/>\n  \u2003 <em>parameter-list</em><br/>\n  \u2003 <em>parameter-list</em> <code>, ...</code></p>\n</blockquote>\n<p>As the <code>va_start</code> etc. macros/functions are inherited from C99, there's no way to use the arguments matched with the ellipsis with an empty <em>parameter-declaration-list</em> in C++.</p>\n<hr>\n<p>Description of <code>va_start</code> in C99: 7.15.1.4</p>\n<blockquote>\n<p id=\"so_18491805_18493152_4\"><code>void va_start(va_list ap,</code><em>parmN</em><code>);</code> <br/>\n  [...] <br/>\n  The parameter <em>parmN</em> is the identifier of the rightmost parameter in the variable\n  parameter list in the function definition <strong>(the one just before the <code>, ...</code>)</strong>. [...]</p>\n</blockquote>\n<p>Emphasis mine. C99 <em>assumes</em> there's a parameter before the ellipsis, because it isn't legal in C99 to declare a function with an ellipsis but without parameters.</p>\n<hr>\n<p>Yet, I can see two reasons to use a function with an ellipsis but w/o any parameters in C++:</p>\n<ul>\n<li><p>Overload resolution. Matching arguments to an ellipsis leads to a very low ranking of the overload: An ellipsis conversion sequence is worse than any user-defined and standard conversion sequence [over.ics.rank]/2. This can be useful for metaprogramming:</p>\n<pre><code>char foo(int);\nint  foo(...);\n\nstruct S{};\nS s;\nsizeof(foo(42));    // yields 1\nsizeof(foo(s));     // yields sizeof(int)\n</code></pre></li>\n<li><p>Implementation-defined tricks. Your implementation may provide a mean to access those arguments matched with an ellipsis. E.g. see <a href=\"https://stackoverflow.com/users/1171191/bobtfish\">BobTFish</a>'s <a href=\"https://ideone.com/WSvDJd\" rel=\"nofollow noreferrer\">example</a></p></li>\n</ul>\n</hr></hr>", "LastEditorUserId": "-1", "LastActivityDate": "2013-08-28T16:20:16.820", "Score": "5", "CreationDate": "2013-08-28T16:14:19.013", "ParentId": "18491805", "CommentCount": "3", "OwnerUserId": "420683", "LastEditDate": "2017-05-23T12:21:31.417"}});