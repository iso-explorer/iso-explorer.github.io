post_cb({"23107664": {"ParentId": "23107568", "CommentCount": "4", "CreationDate": "2014-04-16T11:07:43.753", "OwnerUserId": "1009479", "PostTypeId": "2", "Id": "23107664", "Score": "8", "Body": "<blockquote>\n<h3>C++11 \u00a712.1 Constructors</h3>\n<p id=\"so_23107568_23107664_0\">A default constructor for a class X is a constructor of class X that can be called without an argument.</p>\n</blockquote>\n<p>This is the definition of default constructor. A constructor that supplies default arguments for all its parameters <strong>can</strong> be called without argument, thus fits the definition.</p>\n", "LastActivityDate": "2014-04-16T11:07:43.753"}, "23107568": {"CommentCount": "4", "ViewCount": "105", "PostTypeId": "1", "LastEditorUserId": "730537", "CreationDate": "2014-04-16T11:03:05.483", "LastActivityDate": "2014-04-17T04:21:35.017", "Title": "Why default argument constructor is called as default constructor", "AcceptedAnswerId": "23107664", "LastEditDate": "2014-04-16T11:48:42.327", "Id": "23107568", "Score": "4", "Body": "<pre><code>Class A {\npublic:\n       A(int i = 0, int k = 0) {} // default constructor WHY ??\n       ~A() {}\n};\nint main()\n{\n  A a; // This creates object using defined default \n       // constructor but the constructor still has two arguments\n  A b(1,2); // Called as parametrized one\n}\n</code></pre>\n<p>Why this default argument constructor is default constructor. Why it is not called Parametrized constructor or default parametrized constructor because even if this constructor is called with no arguments it does contain two arguments ?? Is there any specific reason or its just because the standard says so.</p>\n", "Tags": "<c++><constructor>", "OwnerUserId": "730537", "AnswerCount": "4"}, "23107658": {"ParentId": "23107568", "CommentCount": "0", "CreationDate": "2014-04-16T11:07:31.713", "OwnerUserId": "947836", "PostTypeId": "2", "Id": "23107658", "Score": "5", "Body": "<p>By definition, a default constructor is one that <strong>can be called</strong> without arguments. Yours cleary fits that definition, since both parameters have default value.</p>\n<p>The asnwer to \"why\" is, I'd say, simply because C++ standard says so. The choice of constructor to be called is done by overload resolution based on number and types of parameters, just like with other functions.</p>\n", "LastActivityDate": "2014-04-16T11:07:31.713"}, "23107663": {"ParentId": "23107568", "CommentCount": "1", "CreationDate": "2014-04-16T11:07:42.343", "OwnerUserId": "194106", "PostTypeId": "2", "Id": "23107663", "Score": "1", "Body": "<p>The feature of constructor overload allow the compiler to infer which constructor to call based on the passed arguments.\nThe default constructor is just the constructor which is resolved for no arguments, as in </p>\n<pre><code>A a;\n</code></pre>\n<p>or</p>\n<pre><code>A a=A();\n</code></pre>\n<p>And again due to parameters overloading only a single constructor can be resolved for each set. So, if all parameters have default values =&gt; it is ok to call 'A()' =&gt; it is the default constructor.</p>\n", "LastActivityDate": "2014-04-16T11:07:42.343"}, "23124543": {"ParentId": "23107568", "CommentCount": "0", "CreationDate": "2014-04-17T04:21:35.017", "OwnerUserId": "3543759", "PostTypeId": "2", "Id": "23124543", "Score": "1", "Body": "<p>According to c++ standard a default constructor is the one which can be called without arguments.It is also the reason for your quesrion.</p>\n", "LastActivityDate": "2014-04-17T04:21:35.017"}, "bq_ids": {"n4140": {"so_23107568_23107664_0": {"section_id": 369, "quality": 0.875, "length": 7}}, "n3337": {"so_23107568_23107664_0": {"section_id": 359, "quality": 0.875, "length": 7}}, "n4659": {"so_23107568_23107664_0": {"section_id": 4058, "quality": 0.75, "length": 6}}}});