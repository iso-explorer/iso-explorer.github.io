post_cb({"26728519": {"ParentId": "26728495", "CommentCount": "8", "Body": "<p>The implicitly declared copy constructor in both cases is of the form <code>A(const A &amp;)</code>, since that's the first case in the list and none of the restrictions apply.</p>\n", "OwnerUserId": "596781", "PostTypeId": "2", "Id": "26728519", "Score": "0", "CreationDate": "2014-11-04T05:46:51.460", "LastActivityDate": "2014-11-04T05:46:51.460"}, "26728495": {"CommentCount": "0", "ViewCount": "57", "OwnerDisplayName": "user2953119", "CreationDate": "2014-11-04T05:44:55.060", "LastActivityDate": "2014-11-05T07:55:23.150", "PostTypeId": "1", "AcceptedAnswerId": "26728519", "Title": "Implicitly declared copy-constructor for classes without data-members and base-classes", "Id": "26728495", "Score": "0", "Body": "<p>The Standarad <code>N3797::12.8/8  [class.copy]</code> says:</p>\n<blockquote>\n<p id=\"so_26728495_26728495_0\">The implicitly-declared copy constructor for a class X will have the\n  form X::X(const X&amp;) if </p>\n<p id=\"so_26728495_26728495_1\">\u2014 each direct or virtual base class B of X has\n  a copy constructor whose first parameter is of type const B&amp; or const\n  volatile B&amp;, and </p>\n<p id=\"so_26728495_26728495_2\">\u2014 for all the non-static data members of X that are\n  of a class type M (or array thereof), each such class type has a copy\n  constructor whose first parameter is of type const M&amp; or const\n  volatile M&amp;.</p>\n<p id=\"so_26728495_26728495_3\"><em>Otherwise</em>, <em>the implicitly-declared copy constructor will have the form</em>\n<code>X::X(X&amp;)</code></p>\n</blockquote>\n<p>I tried this by the following example:</p>\n<pre><code>struct B\n{\n    B(){ }\n    B(const B&amp;){}\n};\n\nstruct A : B\n{\n    A(){ };\n};\n\nconst A a;\n\nA t = a; //OK Lvalue reference to const A can be initialized with \n         //an lvalue of const A.\n\nint main(){ }\n</code></pre>\n<p><strong><a href=\"http://coliru.stacked-crooked.com/a/eb48be2f6111b423\" rel=\"nofollow\">DEMO</a></strong></p>\n<p>But if we remove the <code>class B</code> from the example as follows:</p>\n<pre><code>struct A\n{\n    A(){ };\n};\n\nconst A a;\n\nA t = a; //OK, Why?\n\nint main(){ }\n</code></pre>\n<p><strong><a href=\"http://coliru.stacked-crooked.com/a/e29b0741fdf76fd3\" rel=\"nofollow\">DEMO</a></strong></p>\n<p>it'll still work fine. But because of the copy-constructor should have the form <code>A::A(A&amp;)</code>, I expected that compile-time would be occured. Actually, If we write the following code:</p>\n<pre><code>struct A\n{\n    A(){ };\n    A(A&amp;){ };\n};\n\nconst A a;\n\nA t = a; //error: no matching constructor for initialization of 'A'\n\nint main(){ }\n</code></pre>\n<p><strong><a href=\"http://coliru.stacked-crooked.com/a/a75069015f5843dd\" rel=\"nofollow\">DEMO</a></strong></p>\n<p>it'll work as I expect.</p>\n<p>So is the second case a bug?</p>\n", "Tags": "<c++><constructor>", "AnswerCount": "2"}, "26732327": {"ParentId": "26728495", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>As noted by T.C. <a href=\"https://stackoverflow.com/questions/26728495/implicitly-declared-copy-constructor-for-classes-without-data-members-and-base-c#comment42046026_26728519\">in the comments</a> the requirements can be vacuously true - that is, there may be no base classes at all and the requirements from the first bullet are still met:</p>\n<blockquote>\n<p id=\"so_26728495_26732327_0\">\u2014 each direct or virtual base class <code>B</code> of <code>X</code> has a copy constructor\n  whose first parameter is of type <code>const B&amp;</code> or <code>const volatile B&amp;</code>,\n  and</p>\n</blockquote>\n<p>If there is no direct or virtual base class then this condition evaluates as true - it isn't required that there is <em>at least</em> one base class that has an appropriate copy constructor, it is required that there is <em>no base class that does not meet the requirement</em>, i.e. has a copy constructor that is not of the given form. You may also reword the text if that makes it clearer:</p>\n<blockquote>\n<p id=\"so_26728495_26732327_1\">\u2014 If <code>X</code> has direct or virtual base classes, each direct or virtual base class <code>B</code> of <code>X</code> has a copy constructor whose first parameter is of type <code>const B&amp;</code> or <code>const volatile B&amp;</code>,\n  and</p>\n</blockquote>\n", "OwnerUserId": "3647361", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:13:13.307", "Id": "26732327", "Score": "0", "CreationDate": "2014-11-04T10:01:25.957", "LastActivityDate": "2014-11-05T07:55:23.150"}, "bq_ids": {"n4140": {"so_26728495_26728495_0": {"section_id": 457, "quality": 0.7777777777777778, "length": 7}, "so_26728495_26728495_3": {"section_id": 457, "quality": 0.875, "length": 7}, "so_26728495_26732327_0": {"section_id": 467, "quality": 0.7857142857142857, "length": 11}, "so_26728495_26728495_1": {"section_id": 467, "quality": 0.7857142857142857, "length": 11}, "so_26728495_26732327_1": {"section_id": 467, "quality": 0.6111111111111112, "length": 11}, "so_26728495_26728495_2": {"section_id": 467, "quality": 0.9047619047619048, "length": 19}}, "n3337": {"so_26728495_26728495_0": {"section_id": 448, "quality": 0.7777777777777778, "length": 7}, "so_26728495_26728495_3": {"section_id": 448, "quality": 0.875, "length": 7}, "so_26728495_26732327_0": {"section_id": 448, "quality": 1.0, "length": 14}, "so_26728495_26728495_1": {"section_id": 448, "quality": 1.0, "length": 14}, "so_26728495_26732327_1": {"section_id": 448, "quality": 0.7777777777777778, "length": 14}, "so_26728495_26728495_2": {"section_id": 448, "quality": 1.0, "length": 21}}, "n4659": {"so_26728495_26728495_0": {"section_id": 480, "quality": 0.7777777777777778, "length": 7}, "so_26728495_26728495_3": {"section_id": 480, "quality": 0.875, "length": 7}, "so_26728495_26732327_0": {"section_id": 490, "quality": 0.7857142857142857, "length": 11}, "so_26728495_26728495_1": {"section_id": 490, "quality": 0.7857142857142857, "length": 11}, "so_26728495_26732327_1": {"section_id": 490, "quality": 0.6111111111111112, "length": 11}, "so_26728495_26728495_2": {"section_id": 490, "quality": 0.9047619047619048, "length": 19}}}});