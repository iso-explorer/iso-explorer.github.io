post_cb({"36711542": {"CommentCount": "6", "ViewCount": "93", "CreationDate": "2016-04-19T07:34:06.170", "LastActivityDate": "2016-04-19T09:35:34.217", "Title": "C++ Specialization of a null template for a class", "PostTypeId": "1", "Id": "36711542", "Score": "1", "Body": "<p>In QuantLib I found this piece of code : </p>\n<pre><code>//! specialization of null template for this class\n    template &lt;&gt;\n    class Null&lt;Array&gt; {\n      public:\n        Null() {}\n        operator Array() const { return Array(); }\n    };\n</code></pre>\n<p>Anyone knows what this is about? What is the purpose of this code? If you have ressources on the matter i'm also interested. Thank you</p>\n", "Tags": "<c++><quantlib>", "OwnerUserId": "5486389", "AnswerCount": "3"}, "36714406": {"ParentId": "36711542", "CommentCount": "2", "Body": "<p>The answers by user2079303 and jimifiki are both correct.  I'm adding this answer just to provide a bit of context.</p>\n<p>The <code>Null</code> class template is used to add, well, a null value similar to what <code>None</code> is in Python, and is used as a default argument when (for whatever reason) we want to detect that the caller has not passed a value, as opposed to explicitly passing a \"null\" value like 0.  If we were to write the code today, we'd probably go for <code>boost::optional</code> instead (soon to be <code>std::optional</code>) which gives a clearer semantics and an explicit <code>nil</code> object.  However, we're keeping <code>Null</code> to avoid breaking client code.</p>\n<p>For arithmetic types, the thing works by providing a <code>Null</code> specialization that, when converted to a number, gives one which is very unlikely to have been passed as a legitimate value (at least in the context of the call); namely, the maximum available int or float depending on the type. For <code>Array</code>, this doesn't really apply: as you see, <code>Null&lt;Array&gt;()</code> converts to an empty <code>Array</code>, which the code can't distinguish from an empty <code>Array</code> instance passed explicitly.  However, one might argue that an empty array is a null value in its own right (i.e., by passing an empty array you're not passing any values, even if you're passing an <code>Array</code> instance) so that kind of works out; the same goes for the <code>Date</code> class, which has an empty state returned by its <code>Null</code> specialization.</p>\n", "OwnerUserId": "356579", "PostTypeId": "2", "Id": "36714406", "Score": "1", "CreationDate": "2016-04-19T09:35:34.217", "LastActivityDate": "2016-04-19T09:35:34.217"}, "36712038": {"ParentId": "36711542", "CommentCount": "4", "Body": "<blockquote>\n<p id=\"so_36711542_36712038_0\">I can guess that there's a a <code>Null</code> class defined somewhere, and here we initialize it with <code>Array</code>.</p>\n</blockquote>\n<p>Almost correct. There is a <code>Null</code> class <a href=\"http://en.cppreference.com/w/cpp/language/class_template\" rel=\"nofollow\">template</a> defined somewhere, with a type argument. And here we <a href=\"http://en.cppreference.com/w/cpp/language/template_specialization\" rel=\"nofollow\">specialize</a> the template so that whenever the template is instantiated with the <code>Array</code> type, this definition is used instead of the original definition.</p>\n<p>As for what <code>Null</code> is used for, see the <a href=\"http://quantlib.sourcearchive.com/documentation/0.3.13/classQuantLib_1_1Null.html\" rel=\"nofollow\">documentation</a>.</p>\n<blockquote>\n<p id=\"so_36711542_36712038_1\">template class providing a null value for a given type. </p>\n</blockquote>\n", "OwnerUserId": "2079303", "PostTypeId": "2", "Id": "36712038", "Score": "2", "CreationDate": "2016-04-19T07:56:27.043", "LastActivityDate": "2016-04-19T07:56:27.043"}, "bq_ids": {"n4140": {"so_36711542_36712038_1": {"section_id": 95, "quality": 0.7142857142857143, "length": 5}}, "n3337": {"so_36711542_36712038_1": {"section_id": 90, "quality": 0.7142857142857143, "length": 5}}, "n4659": {"so_36711542_36712038_1": {"section_id": 7709, "quality": 0.8571428571428571, "length": 6}}}, "36713042": {"ParentId": "36711542", "CommentCount": "1", "Body": "<p>The Null value is used to represent missing values. </p>\n<p>For instance, when you get a QL::Real r you can easily check if it is a null value: </p>\n<pre><code>if(r == Null&lt;Real&gt;())\n</code></pre>\n<p>The specialization for the Array is extensively used as default value in functions taking an Array as optional argument.  </p>\n", "OwnerUserId": "512225", "PostTypeId": "2", "Id": "36713042", "Score": "2", "CreationDate": "2016-04-19T08:40:16.557", "LastActivityDate": "2016-04-19T08:40:16.557"}});