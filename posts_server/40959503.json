post_cb({"40959760": {"ParentId": "40959503", "CommentCount": "0", "Body": "<p>For my understanding <code>std::is_callable</code> will answer the question if an instance of <code>Fn</code> can be called with instances of <code>ArgTypes...</code> as parameters and if this call will result in an object of <code>R</code> type.</p>\n<p>To give you an example:</p>\n<pre><code>#include &lt;type_traits&gt;\n\nstruct A {\n    int operator()(int, float, double) { return 0; }\n};\n\nint main() {\n    static_assert(std::is_callable&lt;A(int, float, double), int&gt;::value, \"!\");\n    static_assert(!std::is_callable&lt;A(int, int), int&gt;::value, \"!!\");\n}\n</code></pre>\n<p><a href=\"http://melpon.org/wandbox/permlink/1qtGCiWDfV07QbKM\" rel=\"nofollow noreferrer\">[live demo]</a></p>\n", "OwnerUserId": "4324224", "PostTypeId": "2", "Id": "40959760", "Score": "3", "CreationDate": "2016-12-04T14:40:37.947", "LastActivityDate": "2016-12-04T14:40:37.947"}, "bq_ids": {"n4140": {"so_40959503_40959503_0": {"section_id": 4706, "quality": 0.5555555555555556, "length": 5}}, "n3337": {"so_40959503_40959503_0": {"section_id": 4515, "quality": 0.5555555555555556, "length": 5}}, "n4659": {"so_40959503_40959503_0": {"section_id": 6114, "quality": 0.7777777777777778, "length": 7}}}, "40959503": {"CommentCount": "7", "ViewCount": "133", "PostTypeId": "1", "LastEditorUserId": "923854", "CreationDate": "2016-12-04T14:14:41.803", "LastActivityDate": "2016-12-04T19:19:29.443", "Title": "How to understand is_callable definition?", "AcceptedAnswerId": "40959760", "LastEditDate": "2016-12-04T19:19:29.443", "Id": "40959503", "Score": "2", "Body": "<p>In draft of the ISO C++ standard specification N4606, in \u00a720.15.6, <code>is_callable</code> is defined as this:</p>\n<blockquote>\n<pre><code>template &lt;class Fn, class...ArgTypes, class R&gt;\nstruct is_callable&lt;Fn(ArgTypes...), R&gt;\n</code></pre>\n<p id=\"so_40959503_40959503_0\">The expression <code>INVOKE(declval&lt;Fn&gt;(),declval&lt;ArgTypes&gt;()...,R)</code> is well formed when treated as an unevaluated operand.</p>\n</blockquote>\n<p>As far as I understand <code>Fn(ArgTypes...)</code> is the signature of a function returning an <code>Fn</code> and taking as arguments <code>ArgTypes...</code>.</p>\n<p>So <code>INVOKE(declval&lt;Fn&gt;(),...)</code> will try to call the return value of the function??</p>\n<p>So what is the goal of <code>is_callable</code>? Or where do I get wrong?</p>\n", "Tags": "<c++><c++1z>", "OwnerUserId": "5632316", "AnswerCount": "1"}});