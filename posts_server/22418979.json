post_cb({"22418996": {"ParentId": "22418979", "LastEditDate": "2014-03-15T03:52:24.543", "CommentCount": "0", "CreationDate": "2014-03-15T03:00:39.013", "OwnerUserId": "1708801", "LastEditorUserId": "1708801", "PostTypeId": "2", "Id": "22418996", "Score": "4", "Body": "<p>In the second case:</p>\n<pre><code>(float)(m/f)\n</code></pre>\n<p>you are doing integer division first and then casting to float and therefore you lose the fraction. In the first case you cast <code>m</code> to float and therefore end up performing floating point division.</p>\n<p>The cast operator has <a href=\"http://en.cppreference.com/w/cpp/language/operator_precedence\" rel=\"nofollow\">higher precedence</a> in both C++ and Java but using parenthesis around the division forces it to be evaluated first.</p>\n<p>In <em>C++</em> his behavior is due to the <em>usual arithmetic conversions</em> which is covered in the draft C++ standard section <code>5</code> <em>Expressions</em> paragraph <em>10</em> which says:</p>\n<blockquote>\n<p id=\"so_22418979_22418996_0\">Many binary operators that expect operands of arithmetic or enumeration type cause conversions and yield\n  result types in a similar way. The purpose is to yield a common type, which is also the type of the result.\n  This pattern is called the usual arithmetic conversions, which are defined as follows:</p>\n</blockquote>\n<p>and includes the following bullet:</p>\n<blockquote>\n<p id=\"so_22418979_22418996_1\">\u2014 Otherwise, if either operand is float, the other shall be converted to float.</p>\n</blockquote>\n<p>In <em>Java</em> this behavior is covered in the <a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-5.html\" rel=\"nofollow\">JLS section 5.6.2. Binary Numeric Promotion </a> which says:</p>\n<blockquote>\n<p id=\"so_22418979_22418996_2\">When an operator applies binary numeric promotion to a pair of operands, each of which must denote a value that is convertible to a numeric type, the following rules apply, in order: </p>\n</blockquote>\n<p>and includes:</p>\n<blockquote>\n<p id=\"so_22418979_22418996_3\">Widening primitive conversion (\u00a75.1.2) is applied to convert either or both operands as specified by the following rules: </p>\n</blockquote>\n<p>and includes:</p>\n<blockquote>\n<p id=\"so_22418979_22418996_4\">Otherwise, if either operand is of type float, the other is converted to float. </p>\n</blockquote>\n<p>and includes the following example:</p>\n<pre><code>int i    = 0;\nfloat f  = 1.0f;\n\n// First int*float is promoted to float*float, then\n</code></pre>\n", "LastActivityDate": "2014-03-15T03:52:24.543"}, "bq_ids": {"n4140": {"so_22418979_22418996_4": {"section_id": 5943, "quality": 0.75, "length": 6}, "so_22418979_22418996_0": {"section_id": 5943, "quality": 0.9032258064516129, "length": 28}, "so_22418979_22418996_1": {"section_id": 5943, "quality": 1.0, "length": 7}}, "n3337": {"so_22418979_22418996_4": {"section_id": 5714, "quality": 0.75, "length": 6}, "so_22418979_22418996_0": {"section_id": 5714, "quality": 0.9032258064516129, "length": 28}, "so_22418979_22418996_1": {"section_id": 5714, "quality": 1.0, "length": 7}}, "n4659": {"so_22418979_22418996_4": {"section_id": 7428, "quality": 0.75, "length": 6}, "so_22418979_22418996_0": {"section_id": 7428, "quality": 0.9032258064516129, "length": 28}, "so_22418979_22418996_1": {"section_id": 7428, "quality": 1.0, "length": 7}}}, "22418979": {"CommentCount": "2", "ViewCount": "66", "PostTypeId": "1", "LastEditorUserId": "1888977", "CreationDate": "2014-03-15T02:58:16.217", "LastActivityDate": "2014-03-15T03:52:24.543", "Title": "Difference between (float)m/f and (float)(m/f)", "AcceptedAnswerId": "22418996", "LastEditDate": "2014-03-15T03:02:36.687", "Id": "22418979", "Score": "2", "Body": "<pre><code>int m = 10;\nint f = 3;\nfloat r = (float)m/f;    // gives 3.333333 as output\nfloat r = (float)(m/f);  // gives 3.0 as output\n</code></pre>\n<p>Can anyone tell me how the parentheses are changing the answer because I am basically typecasting the integer value of <code>m/f</code> into float. What I don't understand is how the addition of brackets around <code>m/f</code> is changing the answer.</p>\n", "Tags": "<java><c++><casting>", "OwnerUserId": "3405255", "AnswerCount": "5"}, "22418998": {"ParentId": "22418979", "CommentCount": "0", "Body": "<p>The difference is <em>what</em> gets converted to float. In the first case <code>m</code> gets converted to <code>float</code>, so the entire expression becomes floating point. In the second, you perform the expression (integer division) and then convert to <code>float</code>, at which point it's too late to save those precious significant digits.</p>\n", "OwnerUserId": "27678", "PostTypeId": "2", "Id": "22418998", "Score": "2", "CreationDate": "2014-03-15T03:00:50.867", "LastActivityDate": "2014-03-15T03:00:50.867"}, "22419092": {"ParentId": "22418979", "CommentCount": "0", "Body": "<p>Order of operations: Casting applies before division, and division between two integers always rounds (down) to the nearest integer in Java.</p>\n<pre><code>float r = (float)m/f;    // Is the same as ((float)m)/f, and because there's a\n                         // float in the division, we keep everything a float.\nfloat r = (float)(m/f);  // Is division between two integers, so we round down\n                         // to the nearest integer before casting to a float.\n</code></pre>\n", "OwnerUserId": "886749", "PostTypeId": "2", "Id": "22419092", "Score": "0", "CreationDate": "2014-03-15T03:16:43.603", "LastActivityDate": "2014-03-15T03:16:43.603"}, "22419000": {"ParentId": "22418979", "LastEditDate": "2014-03-15T03:03:46.473", "CommentCount": "0", "CreationDate": "2014-03-15T03:00:55.147", "OwnerUserId": "109960", "LastEditorUserId": "207421", "PostTypeId": "2", "Id": "22419000", "Score": "1", "Body": "<p>On the first example, <code>m</code> gets casted to float first then divided which gives you a floating-point number. The second example, the division is an int division so it will give you an int number that then gets transformed to a floating-point number.</p>\n<p>Adding parentheses, change precedence of operators. Type casting is applied before division normally but using parentheses you tell compiler to divide before casting to float.</p>\n", "LastActivityDate": "2014-03-15T03:03:46.473"}, "22419006": {"ParentId": "22418979", "CommentCount": "0", "Body": "<p><code>(float)m/f</code> divides <code>(float)m</code> by <code>f</code>. Since one of the operands is a float, the operator is floating-point division, and the answer is 3.333 etc.</p>\n<p><code>(float)(m/f)</code> calculates <code>(m/f)</code> and casts it to float. Since both operands are integer, the operation is integer division, and <code>m/f</code> is 3. Then 3 is casted to <code>float</code> to become 3.0.</p>\n", "OwnerUserId": "152948", "PostTypeId": "2", "Id": "22419006", "Score": "1", "CreationDate": "2014-03-15T03:01:47.080", "LastActivityDate": "2014-03-15T03:01:47.080"}});