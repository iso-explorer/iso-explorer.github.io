post_cb({"5867215": {"ParentId": "5867110", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Here's what the C++03 standard says:</p>\n<p>\u00a712.1/5:</p>\n<blockquote>\n<p id=\"so_5867110_5867215_0\">A default constructor for a class X is a constructor of class X that can be called without an argument. If there is no user-declared constructor for class X, a default constructor is implicitly declared. An implicitly-declared default constructor is an inline public member of its class. A constructor is trivial if it is an implicitly-declared default constructor and if:</p>\n<ul>\n<li>its class has no virtual functions (10.3) and no virtual base classes (10.1), and</li>\n<li>all the direct base classes of its class have trivial constructors, and</li>\n<li>for all the nonstatic data members of its class that are of class type (or array thereof), each such class has a trivial constructor.</li>\n</ul>\n</blockquote>\n<p>\u00a712.1/6:</p>\n<blockquote>\n<p id=\"so_5867110_5867215_1\">Otherwise, the constructor is non-trivial.</p>\n</blockquote>\n<p>\u00a712.1/7:</p>\n<blockquote>\n<p id=\"so_5867110_5867215_2\">An implicitly-declared default constructor for a class is implicitly defined when it is used to create an object of its class type (1.8). The implicitly-defined default constructor performs the set of initializations of the class that would be performed by a user-written default constructor for that class with an empty mem-initializer-list (12.6.2) and an empty function body. If that user-written default constructor would be illformed, the program is ill-formed. Before the implicitly-declared default constructor for a class is implicitly defined, all the implicitly-declared default constructors for its base classes and its nonstatic data members shall have been implicitly defined. [Note: an implicitly-declared default constructor has an exception-specification (15.4).]</p>\n</blockquote>\n<hr>\n<p>The implication is that for classes with implicitly declared <em>but not implicitly defined</em> default constructors, or for classes with implicitly defined <em>trivial</em> default constructors, no code generation may be necessary.</p>\n</hr>", "OwnerUserId": "636019", "LastEditorUserId": "636019", "LastEditDate": "2011-05-03T09:36:36.583", "Id": "5867215", "Score": "2", "CreationDate": "2011-05-03T08:54:35.903", "LastActivityDate": "2011-05-03T09:36:36.583"}, "5867110": {"CommentCount": "1", "ViewCount": "517", "PostTypeId": "1", "LastEditorUserId": "4834", "CreationDate": "2011-05-03T08:45:31.530", "LastActivityDate": "2011-05-03T09:36:36.583", "Title": "Is assembly code created for Default Constructor in C++", "AcceptedAnswerId": "5867173", "LastEditDate": "2011-05-03T08:54:12.597", "Id": "5867110", "Score": "2", "Body": "<p>If I do not define a default constructor in a class in C++ , or any other constructors, I have read that the compiler creates a default constructor for you. But I created a test class, compiled it to assembly code and checked to find that nothing of the sort is created.<br>\nCan someone clarify how the code for default constructor is created, or if it is created in the first place?</br></p>\n", "Tags": "<c++><default-constructor>", "OwnerUserId": "409263", "AnswerCount": "4"}, "5867235": {"ParentId": "5867110", "CommentCount": "1", "Body": "<p>Did you want to ask if your compiler actually emits code for a default constructor?</p>\n<p>That depends on the optimization. Most modern compilers will emit the default constructor code sequence when used with -O0, but will optimize it away if it is unused and you use -O2 or higher.</p>\n", "OwnerUserId": "154980", "PostTypeId": "2", "Id": "5867235", "Score": "1", "CreationDate": "2011-05-03T08:56:40.510", "LastActivityDate": "2011-05-03T08:56:40.510"}, "5867186": {"ParentId": "5867110", "CommentCount": "1", "Body": "<p>C++ != Assembly.</p>\n<p>Assembly is (one possible) output for a compiled C++ program, which may or may not have included certain optimizations which could have elided the call to a possibly empty constructor.</p>\n<p>In other words, the language says there's a default constructor all right, but it only describes behavior, not implementation. If an implementation feels like it doesn't need to generate code, it doesn't have to.</p>\n", "OwnerUserId": "87234", "PostTypeId": "2", "Id": "5867186", "Score": "1", "CreationDate": "2011-05-03T08:52:31.960", "LastActivityDate": "2011-05-03T08:52:31.960"}, "bq_ids": {"n4140": {"so_5867110_5867215_2": {"section_id": 370, "quality": 0.803030303030303, "length": 53}, "so_5867110_5867215_0": {"section_id": 369, "quality": 0.8620689655172413, "length": 25}, "so_5867110_5867173_0": {"section_id": 361, "quality": 0.6511627906976745, "length": 28}}, "n3337": {"so_5867110_5867215_2": {"section_id": 360, "quality": 0.803030303030303, "length": 53}, "so_5867110_5867215_0": {"section_id": 359, "quality": 0.8620689655172413, "length": 25}, "so_5867110_5867173_0": {"section_id": 351, "quality": 0.6511627906976745, "length": 28}}, "n4659": {"so_5867110_5867215_2": {"section_id": 384, "quality": 0.7878787878787878, "length": 52}, "so_5867110_5867215_0": {"section_id": 381, "quality": 0.6896551724137931, "length": 20}, "so_5867110_5867173_0": {"section_id": 373, "quality": 0.6511627906976745, "length": 28}}}, "5867173": {"ParentId": "5867110", "CommentCount": "3", "Body": "<p>Default constructor is created <em>if you need it</em>, e.g:</p>\n<pre><code>class Foo {\n  std::string s;\n};\n\n...\nFoo f;\n</code></pre>\n<p>12.1:</p>\n<blockquote>\n<p id=\"so_5867110_5867173_0\">The default constructor (12.1), copy\n  constructor and copy assignment\n  operator (12.8), and destructor (12.4)\n  are special member functions. The\n  implementation will implicitly declare\n  these member functions for a class\n  type when the program does not\n  explicitly declare them, except as\n  noted in 12.1. The implementation will\n  implicitly define them if they are\n  used, as specified in 12.1, 12.4 and\n  12.8.</p>\n</blockquote>\n<p>Also, if your class doesn't require anything to be done in the constructor, a compiler may choose to not generate the code, even though by the standard the constructor should exist.</p>\n", "OwnerUserId": "616700", "PostTypeId": "2", "Id": "5867173", "Score": "6", "CreationDate": "2011-05-03T08:51:21.207", "LastActivityDate": "2011-05-03T08:51:21.207"}});