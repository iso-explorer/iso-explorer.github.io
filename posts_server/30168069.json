post_cb({"bq_ids": {"n4140": {"so_30168069_30168311_1": {"length": 16, "quality": 0.8888888888888888, "section_id": 955}, "so_30168069_30168311_3": {"length": 49, "quality": 0.9423076923076923, "section_id": 5873}}, "n3337": {"so_30168069_30168311_1": {"length": 16, "quality": 0.8888888888888888, "section_id": 943}, "so_30168069_30168311_3": {"length": 49, "quality": 0.9423076923076923, "section_id": 5644}}, "n4659": {"so_30168069_30168311_3": {"length": 49, "quality": 0.9423076923076923, "section_id": 7356}}}, "30168069": {"ViewCount": "497", "Body": "<p>Suppose I have a simple C++ class, </p>\n<pre><code>class Data {\n\n    public: \n         float data[3];         \n\n         void clear() { data[0] = 0.0f; data[1] = 0.0f; data[2] = 0.0f }\n\n}\n</code></pre>\n<p>And a vector of Data's, </p>\n<pre><code>std::vector&lt;Data&gt; v(10);\n</code></pre>\n<p>Is it safe to assume that <code>&amp;v[0].data[0]</code> points to an array of 30 floats?</p>\n", "AcceptedAnswerId": "30168311", "Title": "Memory layout of vector of POD objects", "CreationDate": "2015-05-11T12:47:09.867", "Id": "30168069", "CommentCount": "6", "LastEditDate": "2015-11-19T23:07:11.353", "PostTypeId": "1", "LastEditorUserId": "4370109", "LastActivityDate": "2015-11-19T23:07:11.353", "Score": "4", "OwnerUserId": "4130196", "Tags": "<c++><memory><vector>", "AnswerCount": "1"}, "30168311": {"Id": "30168311", "PostTypeId": "2", "Body": "<p>From standard </p>\n<blockquote>\n<p id=\"so_30168069_30168311_0\"><strong>23.3.6.1 Class template vector overview</strong></p>\n<p id=\"so_30168069_30168311_1\">The elements of a\n  vector are stored contiguously, meaning that if v is a vector where T is some type other\n  than bool, then it obeys the identity &amp;v[n] == &amp;v[0] + n for all 0 &lt;= n &lt; v.size()</p>\n</blockquote>\n<p>so <code>&amp;v[0]</code> indeed points to the beginning of 10 continuous <code>Data</code> objects.</p>\n<p>but for the layout of <code>Data</code> we have </p>\n<blockquote>\n<p id=\"so_30168069_30168311_2\"><strong>9.2.13 Class members</strong></p>\n<p id=\"so_30168069_30168311_3\">Nonstatic data members of a (non-union) class with the same access control (Clause 11) are allocated so\n  that later members have higher addresses within a class object. The order of allocation of non-static data\n  members with different access control is unspecified (11). Implementation alignment requirements might\n  cause two adjacent members not to be allocated immediately after each other; <strong>so might requirements for\n  space for managing virtual functions (10.3) and virtual base classes (10.1).</strong></p>\n</blockquote>\n<p>so we cannot be sure that <code>sizeof(Data) == 3*sizeof(float)</code>, therefore general answer should be: it's not save to assume 30 continuous floats.</p>\n", "LastEditorUserId": "2176756", "LastActivityDate": "2015-05-11T13:46:44.393", "Score": "2", "CreationDate": "2015-05-11T12:58:24.743", "ParentId": "30168069", "CommentCount": "2", "LastEditDate": "2015-05-11T13:46:44.393", "OwnerUserId": "2176756"}});