post_cb({"22990174": {"ParentId": "22990044", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>You should use the <code>L</code> prefix with your literals. The WINAPI works mostly with wide strings.</p>\n<p>As for why that prefix works, here's the relevant part in the standard (\u00a72.14.5/11):</p>\n<blockquote>\n<p id=\"so_22990044_22990174_0\">A string literal that begins with L, such as L\"asdf\", is a wide string literal. A wide string literal has type\n  \u201carray of n const wchar_t\u201d, where n is the size of the string as defined below; it has static storage duration\n  and is initialized with the given characters.</p>\n</blockquote>\n<p>The garbage you get is because you're doing a cast that doesn't mean anything, and end up with garbage data that the library tries to interpret as a wide string.</p>\n<p>Indeed, here's what a <a href=\"http://msdn.microsoft.com/en-us/library/cc230352.aspx\" rel=\"nofollow\"><code>LPCWSTR</code></a>:</p>\n<pre><code>typedef const wchar_t* LPCWSTR;\n</code></pre>\n", "OwnerUserId": "1594913", "LastEditorUserId": "1594913", "LastEditDate": "2014-04-10T14:11:48.850", "Id": "22990174", "Score": "1", "CreationDate": "2014-04-10T13:57:39.367", "LastActivityDate": "2014-04-10T14:11:48.850"}, "22990155": {"ParentId": "22990044", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Use <code>L\"text\"</code> to create your strings. This way you're creating a wide string which most-likely are expected from the WinAPI.</p>\n<pre><code>#include &lt;Windows.h&gt;\n#include &lt;string&gt;\nusing namespace std;\n\nint WINAPI WinMain(HINSTANCE hInstance,\n                   HINSTANCE hPrevInstance,\n                   PSTR cmdLine,\n                   int showCmd)\n{\n    MessageBox(0, L\"First Win32 Program.\", L\"My App\", MB_OK);\n}\n</code></pre>\n<p>The problem is you're injecting a narrow string by using a C-style cast to <code>LPCWSTR</code>. So two of your narrow chars (8 bit each) will end mixed-up in one UNICODE char (16 bit each).</p>\n", "OwnerUserId": "1095795", "LastEditorUserId": "1095795", "LastEditDate": "2014-04-28T10:59:53.440", "Id": "22990155", "Score": "2", "CreationDate": "2014-04-10T13:56:48.883", "LastActivityDate": "2014-04-28T10:59:53.440"}, "bq_ids": {"n4140": {"so_22990044_22990174_0": {"section_id": 5360, "quality": 1.0, "length": 26}}, "n3337": {"so_22990044_22990174_0": {"section_id": 5156, "quality": 1.0, "length": 26}}, "n4659": {"so_22990044_22990174_0": {"section_id": 6785, "quality": 0.7692307692307693, "length": 20}}}, "22990044": {"CommentCount": "7", "ViewCount": "239", "CreationDate": "2014-04-10T13:52:03.827", "LastActivityDate": "2014-04-28T10:59:53.440", "Title": "LPCWSTR error; is there a better solution?", "AcceptedAnswerId": "22990155", "PostTypeId": "1", "Id": "22990044", "Score": "0", "Body": "<p>I have the following c++ code, and it seems like everywhere I attempt to put a string, I have to convert it in order to avoid a `Cannot conver parameter 2 from 'const char[x] to LPCWSTR. I know I can fix this issue by doing a simple conversion, but is there any way around having to convert practically every string I provide? I am a c# developer learning c++ so I'm guessing I'm missing some fundamental concept of the language, if someone could shed some light on this, I'd be grateful! </p>\n<pre><code>#include &lt;Windows.h&gt;\n#include &lt;string&gt;\nusing namespace std;\n\nint WINAPI WinMain(HINSTANCE hInstance,\n                   HINSTANCE hPrevInstance,\n                   PSTR cmdLine,\n                   int showCmd)\n{\n    MessageBox(0, \"First Win32 Program.\", \"My App\", MB_OK);\n}\n</code></pre>\n<p>Is there a better solution than just this:</p>\n<pre><code>{\n    MessageBox(0, (LPCWSTR)\"First Win32 Program.\", (LPCWSTR)\"My App\", MB_OK);\n}\n</code></pre>\n<p>And for some odd reason my application is coming up in Japanese or Chinese. So lost on this one.</p>\n<p><img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/CqoM2.png\"/></p>\n", "Tags": "<c++><visual-c++><visual-studio-2012><lpcwstr>", "OwnerUserId": "2631233", "AnswerCount": "2"}});