post_cb({"bq_ids": {"n4140": {"so_11441665_11441904_1": {"length": 14, "quality": 0.9333333333333333, "section_id": 2299}, "so_11441665_11441904_3": {"length": 23, "quality": 0.9583333333333334, "section_id": 2301}, "so_11441665_11441904_2": {"length": 10, "quality": 1.0, "section_id": 2300}}, "n3337": {"so_11441665_11441904_1": {"length": 14, "quality": 0.9333333333333333, "section_id": 2286}, "so_11441665_11441904_3": {"length": 23, "quality": 0.9583333333333334, "section_id": 2288}, "so_11441665_11441904_2": {"length": 10, "quality": 1.0, "section_id": 2287}}, "n4659": {"so_11441665_11441904_1": {"length": 14, "quality": 0.9333333333333333, "section_id": 2572}, "so_11441665_11441904_3": {"length": 23, "quality": 0.9583333333333334, "section_id": 2574}, "so_11441665_11441904_2": {"length": 10, "quality": 1.0, "section_id": 2573}}}, "11441904": {"Id": "11441904", "PostTypeId": "2", "Body": "<p>Check whether the fail bit is set on <code>cout</code>.  You could also just clear the fail bit, with <code>cout.clear()</code>.</p>\n<hr>\n<p>Here's the rule from the Standard (section 27.7.3.6.3) that requires that the fail bit will be set in this case:</p>\n<blockquote>\n<p id=\"so_11441665_11441904_0\"><code>basic_ostream&lt;charT,traits&gt;&amp; operator&lt;&lt;(basic_streambuf&lt;charT,traits&gt;* sb);</code></p>\n<p id=\"so_11441665_11441904_1\">Effects:  Behaves as an unformatted output function.   After the sentry object is constructed, if <code>sb</code> is null calls <code>setstate(badbit)</code> (which may throw <code>ios_base::failure</code>).</p>\n<p id=\"so_11441665_11441904_2\">Gets characters from <code>sb</code> and inserts them in <code>*this</code>.  Characters are read from <code>sb</code> and inserted until any of the following occurs:</p>\n<ul>\n<li>end-of-file occurs on the input sequence;</li>\n<li>inserting in the output sequence fails (in which case the character to be inserted is not extracted);</li>\n<li>an exception occurs while getting a character from <code>sb</code>.</li>\n</ul>\n<p id=\"so_11441665_11441904_3\"><strong>If the function inserts no characters, it calls <code>setstate(failbit)</code></strong> (which may throw <code>ios_base::failure</code>). If an exception was thrown while extracting a character, the function sets <code>failbit</code> in error state, and if <code>failbit</code> is on in <code>exceptions()</code> the caught exception is rethrown.</p>\n<p id=\"so_11441665_11441904_4\">Returns: <code>*this</code>.</p>\n</blockquote>\n</hr>", "LastEditorUserId": "103167", "LastActivityDate": "2012-07-11T22:01:57.113", "Score": "4", "CreationDate": "2012-07-11T21:38:37.540", "ParentId": "11441665", "CommentCount": "4", "OwnerUserId": "103167", "LastEditDate": "2012-07-11T22:01:57.113"}, "11441665": {"ViewCount": "483", "Body": "<p>I have the following code, and I dont quite understand why the results happens to be like the one below:</p>\n<pre class=\"lang-cpp prettyprint-override\"><code>#include &lt;iostream&gt;\n#include &lt;sstream&gt;\n\nusing namespace std;\nint main () {\n\n   std::stringstream s;\n\n   std::streambuf *backup;\n   backup = cout.rdbuf();\n\n\n   s &lt;&lt; \"Oh my god\" &lt;&lt; endl;\n\n\n   cout &lt;&lt; \"Before1\" &lt;&lt; endl;\n       cout &lt;&lt; s.rdbuf();\n   cout &lt;&lt; \"After1\" &lt;&lt; endl;\n\n\n   cout &lt;&lt; \"Before2\" &lt;&lt; endl;\n   //s.seekg(0, std::ios_base::beg); // If that is in: After 2 is printed!\n   cout &lt;&lt; s.rdbuf();\n   //cout.rdbuf(backup); // If that is in, also After 2 is printed!\n   cout &lt;&lt; \"After2\" &lt;&lt; endl;\n\n}\n</code></pre>\n<p><strong>Output:</strong></p>\n<pre><code>Before1\nOh my god\nAfter1\nBefore2\n</code></pre>\n<p>Where is the rest??\u00bf It only gets outputted when We uncomment the above lines...\nWhat happens internally? Does anybody know? =) Would be interesting...</p>\n", "AcceptedAnswerId": "11441904", "Title": "cout a stringstream twice ends up in corrupted cout (minimal example)", "CreationDate": "2012-07-11T21:20:05.793", "Id": "11441665", "CommentCount": "0", "LastEditDate": "2012-07-11T22:03:40.983", "PostTypeId": "1", "LastEditorUserId": "103167", "LastActivityDate": "2012-07-11T22:03:40.983", "Score": "1", "OwnerUserId": "293195", "Tags": "<c++><cout><stringstream><streambuf>", "AnswerCount": "1"}});