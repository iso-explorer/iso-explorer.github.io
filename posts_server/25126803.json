post_cb({"bq_ids": {"n4140": {"so_25126803_25127119_0": {"length": 24, "quality": 0.9230769230769231, "section_id": 1906}}, "n3337": {"so_25126803_25127119_0": {"length": 25, "quality": 0.9615384615384616, "section_id": 1895}}, "n4659": {"so_25126803_25127119_0": {"length": 23, "quality": 0.8846153846153846, "section_id": 2176}}}, "25126803": {"ViewCount": "349", "Body": "<p>I'm trying to read from a const std::vector to an std::istream, but everything I've tried runs into the problem with const.</p>\n<p>This version compiles perfectly:</p>\n<pre><code>#include &lt;vector&gt;\n#include &lt;iostream&gt;\n\ntemplate&lt;typename CharT = char, typename TraitsT = std::char_traits&lt;CharT&gt; &gt;\nclass vectorbuf : public std::basic_streambuf&lt;CharT, TraitsT&gt; {\npublic:\n    vectorbuf(std::vector&lt;char&gt;&amp; v) {\n        this-&gt;setg(v.data(), v.data(), v.data()+v.size());\n    }\n};\n\nvoid doStuff(std::vector&lt;char&gt;&amp; v) {\n    vectorbuf&lt;&gt; vbuff(v);\n    std::istream s(&amp;vbuff);\n}\n\nint main(int argc, char** argv) {\n    std::vector&lt;char&gt; v = {'a', 'b', 'c'};\n    doStuff(v);\n    return 0;\n}\n</code></pre>\n<p>while this produces errors:</p>\n<pre><code>#include &lt;vector&gt;\n#include &lt;iostream&gt;\n\ntemplate&lt;typename CharT = char, typename TraitsT = std::char_traits&lt;CharT&gt; &gt;\nclass const_vectorbuf : public std::basic_streambuf&lt;CharT, TraitsT&gt; {\npublic:\n    const_vectorbuf(const std::vector&lt;char&gt;&amp; v) {\n        this-&gt;setg(v.data(), v.data(), v.data()+v.size());\n    }\n};\n\nvoid const_doStuff(const std::vector&lt;char&gt;&amp; v) {\n    const_vectorbuf&lt;const char&gt; vbuff(v);\n    //std::istream s(&amp;vbuff); With this commented out I get the error below\n}\n\nint main(int argc, char** argv) {\n    std::vector&lt;char&gt; v = {'a', 'b', 'c'};\n    const_doStuff(v);\n    return 0;\n}\n</code></pre>\n<p>And I'm not sure how to fix it.</p>\n<p>The error:</p>\n<pre><code>In file included from /usr/include/c++/4.8/ios:40:0,\n                 from /usr/include/c++/4.8/ostream:38,\n                 from /usr/include/c++/4.8/iostream:39,\n                 from vector_stream.cpp:2:\n/usr/include/c++/4.8/bits/char_traits.h: In instantiation of \u2018static void __gnu_cxx::char_traits&lt;_CharT&gt;::assign(__gnu_cxx::char_traits&lt;_CharT&gt;::char_type&amp;, const char_type&amp;) [with _CharT = const char; __gnu_cxx::char_traits&lt;_CharT&gt;::char_type = const char]\u2019:\n/usr/include/c++/4.8/bits/streambuf.tcc:67:63:   required from \u2018std::streamsize std::basic_streambuf&lt;_CharT, _Traits&gt;::xsgetn(std::basic_streambuf&lt;_CharT, _Traits&gt;::char_type*, std::streamsize) [with _CharT = const char; _Traits = std::char_traits&lt;const char&gt;; std::streamsize = long int; std::basic_streambuf&lt;_CharT, _Traits&gt;::char_type = const char]\u2019\nvector_stream.cpp:36:1:   required from here\n/usr/include/c++/4.8/bits/char_traits.h:93:14: error: assignment of read-only reference \u2018__c1\u2019\n       { __c1 = __c2; }\n              ^\nIn file included from /usr/include/c++/4.8/vector:60:0,\n                 from vector_stream.cpp:1:\n/usr/include/c++/4.8/bits/stl_algobase.h: In instantiation of \u2018_OI std::__copy_move_a(_II, _II, _OI) [with bool _IsMove = false; _II = const char*; _OI = const char*]\u2019:\n/usr/include/c++/4.8/bits/stl_algobase.h:428:38:   required from \u2018_OI std::__copy_move_a2(_II, _II, _OI) [with bool _IsMove = false; _II = const char*; _OI = const char*]\u2019\n/usr/include/c++/4.8/bits/stl_algobase.h:460:17:   required from \u2018_OI std::copy(_II, _II, _OI) [with _II = const char*; _OI = const char*]\u2019\n/usr/include/c++/4.8/bits/char_traits.h:192:39:   required from \u2018static __gnu_cxx::char_traits&lt;_CharT&gt;::char_type* __gnu_cxx::char_traits&lt;_CharT&gt;::copy(__gnu_cxx::char_traits&lt;_CharT&gt;::char_type*, const char_type*, std::size_t) [with _CharT = const char; __gnu_cxx::char_traits&lt;_CharT&gt;::char_type = const char; std::size_t = long unsigned int]\u2019\n/usr/include/c++/4.8/bits/streambuf.tcc:56:50:   required from \u2018std::streamsize std::basic_streambuf&lt;_CharT, _Traits&gt;::xsgetn(std::basic_streambuf&lt;_CharT, _Traits&gt;::char_type*, std::streamsize) [with _CharT = const char; _Traits = std::char_traits&lt;const char&gt;; std::streamsize = long int; std::basic_streambuf&lt;_CharT, _Traits&gt;::char_type = const char]\u2019\nvector_stream.cpp:36:1:   required from here\n/usr/include/c++/4.8/bits/stl_algobase.h:390:70: error: no matching function for call to \u2018std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m(const char*&amp;, const char*&amp;, const char*&amp;)\u2019\n                        _Category&gt;::__copy_m(__first, __last, __result);\n                                                                      ^\n/usr/include/c++/4.8/bits/stl_algobase.h:390:70: note: candidate is:\n/usr/include/c++/4.8/bits/stl_algobase.h:368:9: note: template&lt;class _Tp&gt; static _Tp* std::__copy_move&lt;_IsMove, true, std::random_access_iterator_tag&gt;::__copy_m(const _Tp*, const _Tp*, _Tp*) [with _Tp = _Tp; bool _IsMove = false]\n         __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)\n         ^\n/usr/include/c++/4.8/bits/stl_algobase.h:368:9: note:   template argument deduction/substitution failed:\n/usr/include/c++/4.8/bits/stl_algobase.h:390:70: note:   deduced conflicting types for parameter \u2018_Tp\u2019 (\u2018char\u2019 and \u2018const char\u2019)\n                        _Category&gt;::__copy_m(__first, __last, __result);\n</code></pre>\n<p>So despite CharT being const char streambuf_type is still char, I've been looking and so far I haven't found a way to change that. The assignment __c1 = __c2 in char_traits I haven't had the time to even begin look at a way to solve yet.</p>\n", "AcceptedAnswerId": "25127119", "Title": "Reading from const std::vector<char> via std::istream", "CreationDate": "2014-08-04T20:14:50.080", "Id": "25126803", "CommentCount": "5", "PostTypeId": "1", "LastActivityDate": "2014-08-04T21:03:27.093", "Score": "0", "OwnerUserId": "197657", "Tags": "<c++11><vector><istream>", "AnswerCount": "1"}, "25127119": {"Id": "25127119", "PostTypeId": "2", "Body": "<p>I feel quite certain that <code>basic_streambuf</code> requires it's first template to be not-<code>const</code>.  Also, I think <code>basic_streambuf</code> requires write access, because the <code>basic_streambuf</code> manages both in and out, regardless of what you use it for in the end.  You should probably also override some other members to cause writes to fail: <code>sputbackc, sungetc, sputc, sputn, xsputn</code>...</p>\n<blockquote>\n<p id=\"so_25126803_25127119_0\">\u00a7 27.2.2/2 In the classes of Clause 27, a template formal parameter with name charT represents a member of the set of types containing char, wchar_t, and <strong>any other implementation-defined character types that satisfy the requirements for a character on which any of the iostream components can be instantiated</strong>.  </p>\n</blockquote>\n<p>(emphsis mine)  This rule is a little vague, but I'm pretty sure it clearly covers your case.</p>\n", "LastEditorUserId": "845092", "LastActivityDate": "2014-08-04T21:03:27.093", "Score": "1", "CreationDate": "2014-08-04T20:36:51.597", "ParentId": "25126803", "CommentCount": "9", "LastEditDate": "2014-08-04T21:03:27.093", "OwnerUserId": "845092"}});