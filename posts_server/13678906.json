post_cb({"13678906": {"ViewCount": "492", "Body": "<p>I have next code:</p>\n<pre><code>#include &lt;exception&gt;\n#include &lt;cstdlib&gt;\n\nvoid g() { throw 1; }\nvoid (*p)() = g;\n\ntemplate &lt;class T&gt;\nvoid f(T) noexcept (noexcept (T())) // warning 1\n{\n  p();\n}\n\nstruct A { A() { } };           // warning 2\n\nint main()\n{\n  try { f(A()); } catch (int) { }\n  return 1;\n}\n</code></pre>\n<p>And with next options:<br>\n<code>-fno-pic -fmessage-length=0 -std=c++0x -Wnoexcept</code><br>\ng++ throw next warnings:  </br></br></p>\n<pre><code>noexcept03.C:16:6: warning: noexcept-expression evaluates to 'false' because of a call to 'A::A()' [-Wnoexcept]\nnoexcept03.C:21:12: warning: but 'A::A()' does not throw; perhaps it should be declared 'noexcept' [-Wnoexcept]\n</code></pre>\n<p>But why when I use <code>-fpic</code> instead of <code>-fno-pic</code> <code>g++</code> doesn't throw any warnings?</p>\n<p><strong>EDIT:</strong><br>\nGCC version - 4.7.2</br></p>\n", "AcceptedAnswerId": "13686243", "Title": "Why doesn't g++ emit this constructor-related noexcept warning with `-fpic` enabled?", "CreationDate": "2012-12-03T07:26:43.013", "Id": "13678906", "CommentCount": "2", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2012-12-03T12:14:19.897", "LastEditorUserId": "1446154", "LastActivityDate": "2012-12-03T15:28:16.777", "Score": "5", "OwnerUserId": "1446154", "Tags": "<c++><optimization><gcc><g++><fpic>", "AnswerCount": "1"}, "13686243": {"Id": "13686243", "PostTypeId": "2", "Body": "<p>The warning is not issued in the <code>-fpic</code> case, because the compiler assumes that the constructor <code>A::A()</code> can throw.</p>\n<p>When compiling PIC code, GCC assumes that every global name can be overridden by symbols from other modules. Hence, with absence of an explicit <code>noexcept</code> declaration, GCC must conservatively assume that such a function can throw exceptions, even if it can statically prove that the version it's seeing now, cannot.</p>\n<p>For reference, see the bug and the patch here <a href=\"http://gcc.gnu.org/bugzilla/show_bug.cgi?id=29323#c7\" rel=\"noreferrer\">http://gcc.gnu.org/bugzilla/show_bug.cgi?id=29323#c7</a> (code has changed a little since, but it started like this)</p>\n<p>An example, where the above is applicable:</p>\n<pre><code>/* inline */ int f() { return 0; }\n\nint g() noexcept (noexcept(f())) { return f() + 1; }\n</code></pre>\n<hr>\n<p>So, this is the immediate reason \"why\" there's no warning. What follows is what I think about it.</p>\n<p>However, C++11 says:</p>\n<blockquote>\n<p id=\"so_13678906_13686243_0\">7.1.2 Function specifiers [dcl.fct.spec]</p>\n<p id=\"so_13678906_13686243_1\">4 An inline function shall be defined in every translation unit in\n  which it is odr-used and <strong>shall have exactly the same definition in\n  every case</strong> (3.2).</p>\n</blockquote>\n<p>i.e. for inline functions, if a function is determined to not throw, GCC can assume that every potential override of such a function cannot throw as well.</p>\n<p>In that sense, GCC is being excessively conservative with inline functions and both in the original test case and in the above example with the <code>inline</code> keyword uncommented, GCC ought to issue the warning even when <code>-fpic/-fPIC</code> is used.</p>\n</hr>", "LastEditorUserId": "390807", "LastActivityDate": "2012-12-03T15:28:16.777", "Score": "5", "CreationDate": "2012-12-03T15:21:25.187", "ParentId": "13678906", "CommentCount": "3", "OwnerUserId": "390807", "LastEditDate": "2012-12-03T15:28:16.777"}, "bq_ids": {"n4140": {"so_13678906_13686243_1": {"length": 13, "quality": 1.0, "section_id": 5404}}, "n3337": {"so_13678906_13686243_1": {"length": 13, "quality": 1.0, "section_id": 5199}}, "n4659": {"so_13678906_13686243_1": {"length": 13, "quality": 1.0, "section_id": 6853}}}});