post_cb({"bq_ids": {"n4140": {"so_6009553_6009553_0": {"length": 20, "quality": 0.8695652173913043, "section_id": 3919}, "so_6009553_6009628_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 3919}}, "n3337": {"so_6009553_6009553_0": {"length": 20, "quality": 0.8695652173913043, "section_id": 3779}, "so_6009553_6009628_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 3779}}, "n4659": {"so_6009553_6009553_0": {"length": 19, "quality": 0.8260869565217391, "section_id": 4805}, "so_6009553_6009628_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 4805}}}, "6009707": {"Id": "6009707", "PostTypeId": "2", "Body": "<p>If you were really concerned about the price of the lock, you could simply call the function before you started your worker threads, which would initialise the static. If you call it after the threads start, either you or the compiler has got to arrange for locking of some sort, so there is no real extra overhead.</p>\n", "LastActivityDate": "2011-05-15T16:33:13.040", "CommentCount": "10", "CreationDate": "2011-05-15T16:33:13.040", "ParentId": "6009553", "Score": "1", "OwnerUserId": "2100815"}, "6009553": {"ViewCount": "370", "Body": "<p>What is a realistic performance loss due to the fact that in C++0x <em>all other threads shall \nwait</em> in a case like this:</p>\n<pre><code>string&amp; program_name() {\n  static string instance = \"Parallel Pi\";\n  return instance;\n}\n</code></pre>\n<p>Lets assume the optimal scenario: The programmer was very careful that even with 100 threads only the <em>main thread</em> calls the function <code>program_name</code>, all the other 99 <em>worker threads</em> are busy doing useful stuff, which does not involve calling this \"critical\" function.</p>\n<p>I quote from the new C++0x-Std <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2960.pdf\" rel=\"nofollow\">\u00a7 6.7.(4) stmt.decl</a></p>\n<blockquote>\n<p id=\"so_6009553_6009553_0\">...such an object is initialized the first time control passes through its declaration... If control enters the declaration concurrently while the object is being initialized, the concurrent execution shall wait for completion of the initialization...</p>\n</blockquote>\n<p>What is a realistic overhead that a real-world compiler is needed to impose on me to ensure that that static initialization is done as required by the standard. </p>\n<ul>\n<li>Is a lock/mutex required? I assume they are expensive, even when not really needed?</li>\n<li>If they are expensive, will this be done by less expensive mechanisms?</li>\n</ul>\n<p>edit: added <code>string</code>...</p>\n", "Title": "Performance loss in C++0x and static local variables?", "CreationDate": "2011-05-15T16:05:25.667", "LastActivityDate": "2011-05-17T06:00:51.963", "CommentCount": "5", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2011-05-17T06:00:51.963", "LastEditorUserId": "472245", "Id": "6009553", "Score": "4", "OwnerUserId": "472245", "Tags": "<multithreading><static><c++11>", "AnswerCount": "2"}, "6009628": {"Id": "6009628", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_6009553_6009628_0\">If control enters the declaration concurrently while the object is being initialized, the\n  concurrent execution shall wait for completion of the initialization...</p>\n</blockquote>\n<p>I think this is reasonable and very normal thing to do in concurrent programming. Anyway, this statement doesn't say that all other threads must wait for this initialization. They have to wait <strong>in case</strong> they need to access the initializing object.</p>\n<blockquote>\n<p id=\"so_6009553_6009628_1\">Is a lock/mutex required? I assume they are expensive, even when not really needed?</p>\n</blockquote>\n<p>Could be. Mutex / lock aren't <strong>that</strong> expensive actually, they're expensive only when the locked code fragment needs to be accessed frequently by many or even all threads.</p>\n<blockquote>\n<p id=\"so_6009553_6009628_2\">If they are expensive, will this be done by less expensive mechanisms?</p>\n</blockquote>\n<p>There are also another non-lock based solutions AFAIK.</p>\n", "LastActivityDate": "2011-05-15T16:17:14.040", "CommentCount": "0", "CreationDate": "2011-05-15T16:17:14.040", "ParentId": "6009553", "Score": "2", "OwnerUserId": "549472"}});