post_cb({"25096321": {"CommentCount": "9", "AcceptedAnswerId": "25096461", "CreationDate": "2014-08-02T14:56:51.373", "LastActivityDate": "2014-08-02T15:13:30.133", "PostTypeId": "1", "ViewCount": "64", "FavoriteCount": "1", "Title": "Ill-formed static-cast interpretation", "Id": "25096321", "Score": "3", "Body": "<p>I've come across with the follwing code (sec. 5.4/4 N3797):</p>\n<pre><code>struct A { };\nstruct I1 : A { };\nstruct I2 : A { };\nstruct D : I1, I2 { };\nA* foo( D* p ) {\n    return (A*)( p ); // ill-formed static_cast interpretation\n}\n</code></pre>\n<p>I have been trying to understand the example, but I can't. I haven't used <code>static_cast</code> in the example at all. How does it relate to <code>static_cast</code>. In general, would you explain the point of the error.</p>\n", "Tags": "<c++><static-cast>", "OwnerUserId": "2786156", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_25096321_25096461_1": {"section_id": 6126, "quality": 1.0, "length": 30}, "so_25096321_25096461_0": {"section_id": 6126, "quality": 0.8260869565217391, "length": 19}}, "n3337": {"so_25096321_25096461_1": {"section_id": 5890, "quality": 1.0, "length": 30}, "so_25096321_25096461_0": {"section_id": 5890, "quality": 0.8260869565217391, "length": 19}}, "n4659": {"so_25096321_25096461_1": {"section_id": 7623, "quality": 1.0, "length": 30}, "so_25096321_25096461_0": {"section_id": 7623, "quality": 0.8260869565217391, "length": 19}}}, "25096461": {"ParentId": "25096321", "CommentCount": "3", "Body": "<p>The \"C style cast\" is called \"explicit type conversion\", and is discussed in \u00a75.4 if the C.11 standard. In \u00b64:</p>\n<blockquote>\n<p id=\"so_25096321_25096461_0\">The conversions performed by<br>\n  \u2014 a <code>const_cast</code> (5.2.11),<br>\n  \u2014 a <code>static_cast</code> (5.2.9),<br>\n  \u2014 a <code>static_cast</code> followed by a <code>const_cast</code>,<br>\n  \u2014 a <code>reinterpret_cast</code> (5.2.10), or<br>\n  \u2014 a <code>reinterpret_cast</code> followed by a <code>const_cast</code>,<br>\n  can be performed using the cast notation of explicit type conversion.</br></br></br></br></br></br></p>\n</blockquote>\n<p>Which is basically saying a <code>static_cast</code> may be the result of a cast expression. It then lists some conditions under which it is a valid <code>static_cast</code>, and the example you cite was an example when it was invalid. Just before that example was the following text (the very end of \u00b64):</p>\n<blockquote>\n<p id=\"so_25096321_25096461_1\">If a conversion can be interpreted in more than one of the ways listed above, the interpretation that appears first in the list is used, even if a cast resulting from that interpretation is ill-formed. If a conversion can be interpreted in more than one way as a <code>static_cast</code> followed by a <code>const_cast</code>, the conversion is ill-formed.</p>\n</blockquote>\n<p>The reason the example listed is ill-formed is because both <code>I1</code> and <code>I2</code> do non-<code>virtual</code> inheritance from <code>A</code>. Thus, <code>D</code>, which uses multiple inheritance on <code>I1</code> and <code>I2</code> will have two <code>A</code> instances within it, and so trying to cast a <code>D *</code> to an <code>A *</code> has more than one interpretation. The programmer needs to specify which <code>A *</code> instance should result to avoid an ill-formed conversion.</p>\n<p>ASCII art alert:</p>\n<pre><code>+---+          +---+\n| A |          | A |\n+---+          +---+\n  |              |\n /_\\            /_\\\n  |              |\n+----+         +----+\n| I1 |         | I2 |\n+----+         +----+\n  |              |\n  +------.-------+\n         |\n        /_\\\n         |\n       +---+\n       | D |\n       +---+\n</code></pre>\n", "OwnerUserId": "315052", "PostTypeId": "2", "Id": "25096461", "Score": "3", "CreationDate": "2014-08-02T15:13:30.133", "LastActivityDate": "2014-08-02T15:13:30.133"}});