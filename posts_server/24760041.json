post_cb({"bq_ids": {"n4140": {"so_24760041_24760066_1": {"length": 18, "quality": 0.8181818181818182, "section_id": 7164}, "so_24760041_24760066_0": {"length": 26, "quality": 1.0, "section_id": 5356}, "so_24760041_24760066_2": {"length": 18, "quality": 0.8571428571428571, "section_id": 382}}, "n3337": {"so_24760041_24760066_1": {"length": 18, "quality": 0.8181818181818182, "section_id": 6908}, "so_24760041_24760066_0": {"length": 26, "quality": 1.0, "section_id": 5153}, "so_24760041_24760066_2": {"length": 18, "quality": 0.8571428571428571, "section_id": 373}}, "n4659": {"so_24760041_24760066_1": {"length": 18, "quality": 0.8181818181818182, "section_id": 8672}, "so_24760041_24760066_0": {"length": 26, "quality": 1.0, "section_id": 6781}, "so_24760041_24760066_2": {"length": 17, "quality": 0.8095238095238095, "section_id": 397}}}, "24760066": {"Id": "24760066", "PostTypeId": "2", "Body": "<p>A string literal has static storage duration and lasts the life of the program. From the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3485.pdf\" rel=\"nofollow\">draft C++ standard</a> section <code>2.14.5</code> <em>String literals</em> paragraph <em>8</em> which says (<em>emphasis mine going forward</em>):</p>\n<blockquote>\n<p id=\"so_24760041_24760066_0\">Ordinary string literals and UTF-8 string literals are also referred\n  to as narrow string literals. A narrow string literal has type \u201carray\n  of n const char\u201d, where n is the size of the string as defined below,\n  and <strong>has static storage duration (3.7).</strong></p>\n</blockquote>\n<p>and from section <code>3.7.1</code> <em>Static storage duration</em> paragraph <em>1</em>:</p>\n<blockquote>\n<p id=\"so_24760041_24760066_1\">All variables which do not have dynamic storage duration, do not have\n  thread storage duration, and are not local have static storage\n  duration. <strong>The storage for these entities shall last for the duration\n  of the program (3.6.2, 3.6.3).</strong></p>\n</blockquote>\n<p>The second case in <code>func3</code> on the other other hand is not valid. The lifetime of a temporary bound to a reference persists for the life of the reference, which in this case ends when the function returns. This is covered in section <code>12.2</code> which says:</p>\n<blockquote>\n<p id=\"so_24760041_24760066_2\">The second context is when a reference is bound to a temporary.<sup>115</sup> The\n  temporary to which the reference is bound or the temporary that is the\n  complete object of a subobject to <strong>which the reference is bound\n  persists for the lifetime of the reference except</strong>:</p>\n</blockquote>\n", "LastEditorUserId": "1708801", "LastActivityDate": "2014-07-16T03:41:35.983", "Score": "9", "CreationDate": "2014-07-15T13:51:12.947", "ParentId": "24760041", "CommentCount": "3", "OwnerUserId": "1708801", "LastEditDate": "2014-07-16T03:41:35.983"}, "24760041": {"ViewCount": "233", "Body": "<p>I've been wondering, how long does a string constant live in C++. For example, if I create some const char *str = \"something\" inside a function, would it be safe to return the value of str?</p>\n<p>I wrote a sample program and was really surprised to see that such returned value still stored that string. Here is the code:</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nconst char *func1()\n{\n    const char *c = \"I am a string too\";\n    return c;\n}\n\nvoid func2(const char *c = \"I'm a default string\")\n{\n    cout &lt;&lt; c &lt;&lt; endl;\n}\n\nconst int *func3()\n{\n    const int &amp;b = 10;\n    return &amp;b;\n}\n\nint main()\n{\n    const char *c = \"I'm a string\";\n    cout &lt;&lt; c &lt;&lt; endl;\n    cout &lt;&lt; func1() &lt;&lt; endl;\n    func2();\n    func2(\"I'm not a default string\");\n    cout &lt;&lt; *func3() &lt;&lt; endl;\n    return 0;\n}\n</code></pre>\n<p>It gives me the following output:</p>\n<blockquote>\n<p id=\"so_24760041_24760041_0\">I'm a string</p>\n<p id=\"so_24760041_24760041_1\">I am a string too</p>\n<p id=\"so_24760041_24760041_2\">I'm a default string</p>\n<p id=\"so_24760041_24760041_3\">I'm not a default string</p>\n<p id=\"so_24760041_24760041_4\">10</p>\n</blockquote>\n<p>The func3 is there just to find out if the same works with other types.<br>\nSo the question is: is it safe to return a pointer to a string constant created within that function (as in func1())?<br>\nAlso, is it safe to use the default string value as in func2()?</br></br></p>\n", "AcceptedAnswerId": "24760066", "Title": "How long does a string constant live in c++?", "CreationDate": "2014-07-15T13:49:57.743", "Id": "24760041", "CommentCount": "2", "LastEditDate": "2014-07-16T02:11:09.257", "PostTypeId": "1", "LastEditorUserId": "1708801", "LastActivityDate": "2014-07-16T03:41:35.983", "Score": "4", "OwnerUserId": "3801744", "Tags": "<c++><pointers><constants><string-literals><object-lifetime>", "AnswerCount": "1"}});