post_cb({"25589158": {"CommentCount": "0", "ViewCount": "146", "PostTypeId": "1", "LastEditorUserId": "3089350", "CreationDate": "2014-08-31T05:17:00.227", "LastActivityDate": "2014-08-31T05:36:21.127", "Title": "Why does dynamic_cast give nullptr with private inheritance here?", "AcceptedAnswerId": "25589207", "LastEditDate": "2014-08-31T05:22:26.680", "Id": "25589158", "Score": "1", "Body": "<p>Could someone explain this to me:</p>\n<pre><code>struct A {\n    virtual ~A() = default;\n};\n\nstruct B : private A {\n    void foo() {\n        B* b = new B;\n        std::list&lt;A*&gt; list = {b};\n        B* back = dynamic_cast&lt;B*&gt;(list.back());\n        std::cout &lt;&lt; back &lt;&lt; std::endl;\n    }\n};\n\nint main() {\n    B b;\n    b.foo();  // nullptr\n}\n</code></pre>\n<p>From what I understand, only B is aware that B is derived from A.  foo() is a member function of B.  So dynamic_casting from A* to B* should be fine inside B::foo().  So why is the result nullptr?  Same thing goes if it is protected inheritance.  Change the inheritance to public, and everything is fine.  What's going on here?</p>\n", "Tags": "<c++><inheritance><private>", "OwnerUserId": "3089350", "AnswerCount": "1"}, "25589207": {"ParentId": "25589158", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>The way <code>dynamic_cast&lt;T&gt;(v)</code> executes its run-time checks is specified in \u00a75.2.7 [expr.dynamic.cast]/p8:</p>\n<blockquote>\n<p id=\"so_25589158_25589207_0\">If <code>C</code> is the class type to which <code>T</code> points or refers, the run-time\n  check logically executes as follows:</p>\n<ul>\n<li>If, in the most derived object pointed (referred) to by <code>v</code>, <code>v</code> points (refers) to a <code>public</code> base class subobject of a <code>C</code> object,\n  and if only one object of type <code>C</code> is derived from the subobject\n  pointed (referred) to <code>o</code> by <code>v</code> the result points (refers) to that\n  <code>C</code> object.</li>\n<li>Otherwise, if <code>v</code> points (refers) to a <code>public</code> base class subobject of the most derived object, and the type of the most derived object\n  has a base class, of type <code>C</code>, that is unambiguous and <code>public</code>, the\n  result points (refers) to the <code>C</code> subobject of the most derived\n  object.</li>\n<li>Otherwise, the run-time check fails.</li>\n</ul>\n</blockquote>\n<p>Note that the check only succeeds for public bases.</p>\n", "OwnerUserId": "2756719", "LastEditorUserId": "2756719", "LastEditDate": "2014-08-31T05:36:21.127", "Id": "25589207", "Score": "3", "CreationDate": "2014-08-31T05:31:11.723", "LastActivityDate": "2014-08-31T05:36:21.127"}, "bq_ids": {"n4140": {"so_25589158_25589207_0": {"section_id": 6018, "quality": 1.0, "length": 9}}, "n3337": {"so_25589158_25589207_0": {"section_id": 5786, "quality": 1.0, "length": 9}}, "n4659": {"so_25589158_25589207_0": {"section_id": 7517, "quality": 1.0, "length": 9}}}});