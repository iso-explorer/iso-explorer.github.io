post_cb({"37495418": {"CommentCount": "3", "ViewCount": "75", "CreationDate": "2016-05-28T05:08:33.980", "LastActivityDate": "2016-05-28T11:46:52.090", "Title": "What happen to the iterators if you erase() an element in C++?", "AcceptedAnswerId": "37495545", "PostTypeId": "1", "Id": "37495418", "Score": "1", "Body": "<p>I was trying to implementing a C++ method that removes leading and trailing spaces</p>\n<pre><code>    string::iterator begin = s.begin();\n    string::iterator end = s.end()-1;\n    while (*begin == ' ') {\n        cout &lt;&lt; \"*begin is: \" &lt;&lt; *begin &lt;&lt; endl;\n        begin++;\n    }\n    while (*end == ' ') {\n        cout &lt;&lt; \"*end is: \" &lt;&lt; *end &lt;&lt; endl;\n        end--;\n    }\n    s.erase(s.begin(),begin);\n    s.erase(end+1,s.end());\n</code></pre>\n<p>Then my code CRASHED. After several debugging, I found that it was actually caused my some sort of \"iterator mis-location\" (I made this name up...don't know what's exactly this error called...) when I <code>erase()</code> elements from string. So if I do this instead (change the procedure):</p>\n<pre><code>    string::iterator begin = s.begin();\n    while (*begin == ' ') {\n        cout &lt;&lt; \"*begin is: \" &lt;&lt; *begin &lt;&lt; endl;\n        begin++;\n    }\n    s.erase(s.begin(),begin);\n\n\n    string::iterator end = s.end()-1;\n    while (*end == ' ') {\n        cout &lt;&lt; \"*end is: \" &lt;&lt; *end &lt;&lt; endl;\n        end--;\n    }\n    s.erase(end+1,s.end());\n</code></pre>\n<p>no more problems :D</p>\n<p>So I really would like to know what's exactly happening to the iterator when you <code>erase()</code> element from it. For example, if you <code>erase()</code> first/last two elements, what's gonna happen to <code>s.end()</code>/<code>s.begin()</code>? </p>\n", "Tags": "<c++>", "OwnerUserId": "4798447", "AnswerCount": "1"}, "37495545": {"ParentId": "37495418", "CommentCount": "2", "Body": "<p>The requirements on <code>std::string</code> say: (\u00a7[string.require]/4):</p>\n<blockquote>\n<p id=\"so_37495418_37495545_0\">References, pointers, and iterators referring to the elements of a basic_string sequence may be invalidated by the following uses of that basic_string object:<br>\n  [...]<br>\n  \u2014 Calling non-const member functions, except operator[], at, front, back, begin, rbegin, end, and rend.</br></br></p>\n</blockquote>\n<p>I'd just use <code>substr</code>, something like this:</p>\n<pre><code>s = s.substr(begin, end-begin);\n</code></pre>\n<p>I'd probably also use string's member functions to do the searching:</p>\n<pre><code>auto begin = s.find_first_not_of(' ');\nauto end = s.find_last_not_of(' ');\ns = s.substr(begin, end-begin);\n</code></pre>\n<p>Since it does the job in a single operation, it avoids any problems with iterator invalidation (and as a bonus, it may be a bit faster).</p>\n", "OwnerUserId": "179910", "PostTypeId": "2", "Id": "37495545", "Score": "5", "CreationDate": "2016-05-28T05:29:30.273", "LastActivityDate": "2016-05-28T05:29:30.273"}, "bq_ids": {"n4140": {"so_37495418_37495545_0": {"section_id": 1567, "quality": 1.0, "length": 25}}, "n3337": {"so_37495418_37495545_0": {"section_id": 1562, "quality": 1.0, "length": 25}}, "n4659": {"so_37495418_37495545_0": {"section_id": 1716, "quality": 1.0, "length": 25}}}});