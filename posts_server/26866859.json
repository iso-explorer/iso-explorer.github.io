post_cb({"bq_ids": {"n4140": {"so_26866859_26867518_0": {"length": 16, "quality": 1.0, "section_id": 436}}, "n3337": {"so_26866859_26867518_0": {"length": 16, "quality": 1.0, "section_id": 428}}, "n4659": {"so_26866859_26867518_0": {"length": 14, "quality": 0.875, "section_id": 455}}}, "26867084": {"Id": "26867084", "PostTypeId": "2", "Body": "<p>You want to build up defaults from the constructors with fewer arguments, rather than relying on inline initialization.</p>\n<pre><code>class DelegatingCTorPlusInClass\n{\npublic:\n  DelegatingCTorPlusInClass()\n    :\n    DelegatingCTorPlusInClass(42, \"42\") // default values\n  {\n  };\n\n  DelegatingCTorPlusInClass(int a)\n    :\n    DelegatingCTorPlusInClass(a, \"42\") \n  {\n  };\n\n  DelegatingCTorPlusInClass(const std::string &amp;b)\n    :\n    DelegatingCTorPlusInClass(42, b) \n  {\n  };\n\n  DelegatingCTorPlusInClass(int a, const std::string &amp;b)\n    :\n    m_a(a),\n    m_b(b)\n  {\n    // DO THINGS\n  };\n\nprivate:\n  int m_a;\n  std::string m_b;\n};\n</code></pre>\n<p>A constructor should define what the value requirements are for that usage.  Inline initialization only makes sense when it is true for all constructors.</p>\n", "LastActivityDate": "2014-11-11T14:23:53.643", "CommentCount": "1", "CreationDate": "2014-11-11T14:23:53.643", "ParentId": "26866859", "Score": "0", "OwnerUserId": "1738399"}, "26866859": {"ViewCount": "197", "Body": "<p>I would like to do something like the following:</p>\n<pre><code>class DelegatingCTorPlusInClass\n{\npublic:\n  DelegatingCTorPlusInClass()\n    :\n    DelegatingCTorPlusInClass(m_a, m_b) // m_a and m_b are \"random\"\n  {\n  };\n\n  DelegatingCTorPlusInClass(int a)\n    :\n    DelegatingCTorPlusInClass(a, m_b) // m_b is \"random\"\n  {\n  };\n\n  DelegatingCTorPlusInClass(const std::string &amp;b)\n    :\n    DelegatingCTorPlusInClass(m_a, b) // m_a is \"random\"\n  {\n  };\n\n  DelegatingCTorPlusInClass(int a, const std::string &amp;b)\n    :\n    m_a(a),\n    m_b(b)\n  {\n    // DO THINGS\n  };\n\nprivate:\n  int m_a = 42;\n  std::string m_b = \"42\";\n};\n</code></pre>\n<p><strong>However, members passed from one constructor to the other are not yet initialized so are basically \"random\". How could I achieve something similar then?</strong></p>\n", "AcceptedAnswerId": "26867518", "Title": "Delegating Constructors with In-Class Member Initialization", "CreationDate": "2014-11-11T14:12:35.027", "Id": "26866859", "CommentCount": "9", "PostTypeId": "1", "LastActivityDate": "2014-11-11T17:04:35.030", "Score": "1", "OwnerUserId": "348388", "Tags": "<c++><c++11>", "AnswerCount": "3"}, "26870351": {"Id": "26870351", "PostTypeId": "2", "Body": "<p>You are not required to use non-static data member initializers and delegating constructors simply because they exist. What's wrong with:</p>\n<pre><code>class DelegatingCTorPlusInClass\n{\npublic:\n  DelegatingCTorPlusInClass(int a = 42, std::string b = \"42\")\n  : m_a(a), m_b(std::move(b))\n  {\n    // DO THINGS\n  }\n\nprivate:\n  int m_a;\n  std::string m_b;\n};\n</code></pre>\n", "LastActivityDate": "2014-11-11T17:04:35.030", "CommentCount": "1", "CreationDate": "2014-11-11T17:04:35.030", "ParentId": "26866859", "Score": "0", "OwnerUserId": "923854"}, "26867518": {"Id": "26867518", "PostTypeId": "2", "Body": "<p><code>[class.base.init]/9</code>:</p>\n<blockquote>\n<p id=\"so_26866859_26867518_0\">If a given non-static data member has both a <em>brace-or-equal-initializer</em> and a <em>mem-initializer</em>, the initialization specified by the <em>mem-initializer</em> is performed, and the non-static data member\u2019s <em>brace-or-equal-initializer</em> is ignored.</p>\n</blockquote>\n<p>Which justifies that in the main constructor you assign members with garbage:</p>\n<pre><code>DelegatingCTorPlusInClass(int a, const std::string &amp;b)\n    :\n    m_a(a), // this is mem-initializer for m_a, so m_a = 42 is ignored and you are getting garbage\n    m_b(b) // the same for m_b\n{\n};\n</code></pre>\n<p>To avoid duplication of default values you can use constants for them, so you'll have something like:</p>\n<pre><code>DelegatingCTorPlusInClass() : DelegatingCTorPlusInClass(m_a_default, m_b_default)\n{\n};\n</code></pre>\n", "LastActivityDate": "2014-11-11T14:45:26.167", "CommentCount": "0", "CreationDate": "2014-11-11T14:45:26.167", "ParentId": "26866859", "Score": "2", "OwnerUserId": "3959454"}});