post_cb({"24043897": {"CommentCount": "0", "AcceptedAnswerId": "24044147", "CreationDate": "2014-06-04T17:32:52.023", "LastActivityDate": "2014-06-04T17:46:22.813", "PostTypeId": "1", "ViewCount": "590", "FavoriteCount": "1", "Title": "C++11 value-initialization with defaulted default constructor", "Id": "24043897", "Score": "6", "Body": "<p>In the following example:</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct A {\n    int z;\n    A(std::string) {}\n    A() = default;\n};\n\nint main() {\n    char buf[1000];\n    std::fill(buf, buf + 1000, 'x');\n    auto a = new(buf) A{};\n    std::cerr &lt;&lt; \"A.z: \" &lt;&lt; a-&gt;z &lt;&lt; std::endl;\n}\n</code></pre>\n<p>Compiled with GCC 4.8 <a href=\"http://coliru.stacked-crooked.com/view?id=63821c4c618f352a\" rel=\"noreferrer\">outputs zero</a> (same behavior with Clang 3.4).  This seems to indicate that <code>a</code> is being zero-initialized before the default constructor is called. </p>\n<p>But according to <a href=\"http://en.cppreference.com/w/cpp/language/value_initialization\" rel=\"noreferrer\">value-initialization rules on cppreference.com</a>, the object should not be initialized before the default constructor invocation.  Class <code>A</code> qualifies for bullet point #1 under C++11:</p>\n<blockquote>\n<p id=\"so_24043897_24043897_0\">1) If T is a class type with at least one user-provided constructor of any kind, the default constructor is called.</p>\n</blockquote>\n<p>Another perhaps useful data point is that if we replace <code>A() = default</code> with <code>A() {}</code> in the above example, <a href=\"http://coliru.stacked-crooked.com/view?id=962fdf6ff098d460\" rel=\"noreferrer\">no zero-initialization happens</a> as expected.  This seems to indicate that bullet point #2 of value initialization is being followed in the initial example which would be wrong:</p>\n<blockquote>\n<p id=\"so_24043897_24043897_1\">2) If T is an non-union class type without any user-provided constructors, then the object is zero-initialized and then the implicitly-declared default constructor is called (unless it's trivial)</p>\n</blockquote>\n", "Tags": "<c++><c++11><language-lawyer>", "OwnerUserId": "817903", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_24043897_24044147_0": {"section_id": 3287, "quality": 1.0, "length": 4}, "so_24043897_24043897_0": {"section_id": 369, "quality": 0.6, "length": 6}, "so_24043897_24044147_2": {"section_id": 3287, "quality": 0.7142857142857143, "length": 15}, "so_24043897_24044147_1": {"section_id": 3287, "quality": 0.6206896551724138, "length": 18}, "so_24043897_24043897_1": {"section_id": 3287, "quality": 0.5333333333333333, "length": 8}}, "n3337": {"so_24043897_24044147_0": {"section_id": 3157, "quality": 1.0, "length": 4}, "so_24043897_24043897_0": {"section_id": 3157, "quality": 0.7, "length": 7}, "so_24043897_24044147_2": {"section_id": 3157, "quality": 0.7619047619047619, "length": 16}, "so_24043897_24044147_1": {"section_id": 3157, "quality": 0.5517241379310345, "length": 16}, "so_24043897_24043897_1": {"section_id": 3157, "quality": 0.7333333333333333, "length": 11}}, "n4659": {"so_24043897_24043897_1": {"section_id": 4049, "quality": 0.5333333333333333, "length": 8}, "so_24043897_24043897_0": {"section_id": 382, "quality": 0.6, "length": 6}, "so_24043897_24044147_2": {"section_id": 4049, "quality": 0.7142857142857143, "length": 15}, "so_24043897_24044147_1": {"section_id": 4049, "quality": 0.6551724137931034, "length": 19}}}, "24044147": {"ParentId": "24043897", "CommentCount": "0", "Body": "<p>The wording that you cite for value initialization in C++11 was considered defective, see <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1368\" rel=\"nofollow\">Core Working Group DR 1368</a> and the resolution in <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1301\" rel=\"nofollow\">Core Working Group DR 1301</a> that changed the wording (showing additions with <strong>bold</strong> and deletions with <strike>strike through</strike>):</p>\n<blockquote>\n<p id=\"so_24043897_24044147_0\">To <em>value-initialize</em> an object of type <code>T</code> means:</p>\n<ul>\n<li><p id=\"so_24043897_24044147_1\">if <code>T</code> is a (possibly cv-qualified) class type (Clause 9 [class]) with <strong>either no default constructor (12.1 [class.ctor]) or</strong> a <strong>default constructor that is</strong> user-provided <strong>or deleted</strong> <strike>constructor (12.1 [class.ctor])</strike>, then the <strong>object is default-initialized</strong> <strike>default constructor for T is called (and the initialization is ill-formed if T has no accessible default constructor)</strike>;</p></li>\n<li><p id=\"so_24043897_24044147_2\">if <code>T</code> is a (possibly cv-qualified) non-union class type without a user-provided <strong>or deleted default</strong> constructor, then the object is zero-initialized and, if <strike>T's implicitly-declared default constructor is</strike> <strong><code>T</code> has a</strong> non-trivial <strong>default constructor</strong>, <strike>that constructor is called.</strike> <strong>default-initialized</strong>;</p></li>\n</ul>\n</blockquote>\n<p>Some compilers - I believe GCC 4.8 and clang since 3.3ish - have already implemented the resolution of DR 1301.</p>\n", "OwnerUserId": "923854", "PostTypeId": "2", "Id": "24044147", "Score": "4", "CreationDate": "2014-06-04T17:46:22.813", "LastActivityDate": "2014-06-04T17:46:22.813"}});