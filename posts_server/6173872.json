post_cb({"10449303": {"Id": "10449303", "PostTypeId": "2", "Body": "<p><em>Why do English people spell COLOUR, whereas American people spells it COLOR?</em></p>\n<p>They are 2 different languages from the same base, but they don't have the same rules.  </p>\n<p>C &amp; C++ are the same.  If they weren't different, they would both be called the same thing.</p>\n", "LastActivityDate": "2012-05-04T13:00:01.543", "CommentCount": "1", "CreationDate": "2012-05-04T13:00:01.543", "ParentId": "6173872", "Score": "0", "OwnerUserId": "759558"}, "6173872": {"ViewCount": "8104", "Body": "<p>Multiple definition of a global variable is not allowed in C or C++ due to the One Definition Rule. However, in C++ a const global variable can be defined in multiple compilation units with no error. This is not the same as in C.</p>\n<p>Why does C++ allow this while C does not? Why does the usage and behaviour of a const global differ from a non-const global in this way in C++ compared to C? What is happening under the covers with C++ and C with respect to const?</p>\n<p>For example this is allowed in C++, but wrong in C:</p>\n<pre><code>// Foo.cpp\nconst int Foo = 99;\n\n// Main.cpp\nconst int Foo = 99;\nint main()\n{\n    cout &lt;&lt; Foo &lt;&lt; endl;\n    return 0;\n}\n</code></pre>\n<p>And this is fine with C, but wrong with C++:</p>\n<pre><code>// Foo.cpp\nconst int Foo = 99;\n\n// Main.cpp\nextern const int Foo;\nint main()\n{\n    cout &lt;&lt; Foo &lt;&lt; endl;\n    return 0;\n}\n</code></pre>\n", "Title": "Why is multiple definition of a const global variable allowed in C++ and not in C?", "CreationDate": "2011-05-30T08:19:44.870", "LastActivityDate": "2013-10-22T02:59:16.627", "CommentCount": "4", "FavoriteCount": "10", "PostTypeId": "1", "LastEditDate": "2011-05-31T10:35:13.807", "LastEditorUserId": "15416", "Id": "6173872", "Score": "27", "OwnerUserId": "1630", "Tags": "<c++><c><const><one-definition-rule>", "AnswerCount": "6"}, "6173901": {"Id": "6173901", "PostTypeId": "2", "Body": "<p>It looks like <em>const</em> <a href=\"https://stackoverflow.com/questions/998425/why-does-const-imply-internal-linkage-in-c-when-it-doesnt-in-c\">doesn't actually generate an external symbol</a>.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2011-05-30T08:28:49.927", "Score": "3", "CreationDate": "2011-05-30T08:22:53.113", "ParentId": "6173872", "CommentCount": "1", "OwnerUserId": "23643", "LastEditDate": "2017-05-23T10:30:49.480"}, "6173889": {"Id": "6173889", "PostTypeId": "2", "Body": "<pre><code>// Foo.cpp\nconst int Foo = 99;\n\n// Main.cpp\nconst int Foo = 99;\n</code></pre>\n<p><code>const</code> variable at namespace scope has <em>internal</em> linkage. So they're basically two different variables.  There is no redefinition.</p>\n<p>From @David's comment, 3.5/3 [basic.link]: </p>\n<blockquote>\n<p id=\"so_6173872_6173889_0\">A name having namespace scope (3.3.5)\n  has <strong>internal linkage</strong> if it is the name\n  of<br>\n  \u2014 an object, reference, function or\n  function template that is explicitly\n  declared static or,<br>\n  \u2014 an object or\n  reference that is <strong>explicitly declared\n  const and neither explicitly declared\n  extern nor previously declared to have\n  external linkage</strong>; or<br>\n  \u2014 a data member\n  of an anonymous union.</br></br></br></p>\n</blockquote>\n<hr>\n<p>In the second case, you should be doing this (correct way):</p>\n<pre><code>//Foo.h\nextern const int Foo; //use extern here to make it have external linkage!\n\n// Foo.cpp\n#include \"Foo.h\"\nconst int Foo = 99; //actual definition goes here\n\n// Main.cpp\n#include \"Foo.h\"\nint main()\n{\n   cout &lt;&lt; Foo &lt;&lt; endl;\n}\n</code></pre>\n</hr>", "LastEditorUserId": "415784", "LastActivityDate": "2011-06-11T22:32:01.713", "Score": "27", "CreationDate": "2011-05-30T08:21:17.800", "ParentId": "6173872", "CommentCount": "5", "OwnerUserId": "415784", "LastEditDate": "2011-06-11T22:32:01.713"}, "bq_ids": {"n4140": {"so_6173872_6173889_0": {"length": 30, "quality": 0.8571428571428571, "section_id": 7136}}, "n3337": {"so_6173872_6173889_0": {"length": 30, "quality": 0.8571428571428571, "section_id": 6880}}, "n4659": {"so_6173872_6173889_0": {"length": 27, "quality": 0.7714285714285715, "section_id": 8637}}}, "19508052": {"Id": "19508052", "PostTypeId": "2", "Body": "<p>My workaround was declaring it as :</p>\n<pre><code>static classfoo foo;\n</code></pre>\n<p>it worked in my situation.  </p>\n", "LastEditorUserId": "1277532", "LastActivityDate": "2013-10-22T02:59:16.627", "Score": "-2", "CreationDate": "2013-10-22T02:32:48.327", "ParentId": "6173872", "CommentCount": "0", "OwnerUserId": "8681061", "LastEditDate": "2013-10-22T02:59:16.627"}, "6174224": {"Id": "6174224", "PostTypeId": "2", "Body": "<p>Basically, in C++, const, non-local variables are genuine constant expressions, or constexpr. This permits plenty of things, like TMP.</p>\n<pre><code>const int five = 5;\nint main() {\n    int x[five];\n    std::array&lt;int, five&gt; arr;\n}\n</code></pre>\n<p>In C, they are just a variable that cannot be modified. That is,</p>\n<pre><code>const int five = 5;\nint main() {\n    int x[five]; // Technically, this is a variable length array\n}\n</code></pre>\n<p>Is quite equivalent to</p>\n<pre><code>int five = 5;\nint main() {\n    int x[five];\n}\n</code></pre>\n<p>Effectively, C++ promotes some kinds of <code>const</code> variable to a new category, <code>constexpr</code>, whereas in C, this does not exist and they are just variables which happen to be unmodifiable.</p>\n", "LastActivityDate": "2011-05-30T08:59:44.960", "CommentCount": "0", "CreationDate": "2011-05-30T08:59:44.960", "ParentId": "6173872", "Score": "6", "OwnerUserId": "298661"}, "6174034": {"Id": "6174034", "PostTypeId": "2", "Body": "<p>I think you are asking for the rationale and not the specific language rule that allows this.</p>\n<p>The rationale for this is that it makes <code>const</code> variables much easier to use. It gives a typed replacement for one common use of <code>#define</code>.</p>\n<p>Instead of <code>#define MAX_COUNT 211</code> you can use <code>const int max_count = 211;</code> in exactly the same way, e.g. a shared header file, without having to worry about where to put the one definition.</p>\n<p>You can't legally change the value of a <code>const</code> object so there's no visible difference between having one object and multiple objects with the same value.</p>\n<p>As you can put a definition of a <code>const</code> object in a header file it makes trivial for the compiler to use the value directly at the compilation stage without such optimizations having to be delayed to a link-time fixup.</p>\n", "LastActivityDate": "2011-05-30T08:38:19.160", "CommentCount": "3", "CreationDate": "2011-05-30T08:38:19.160", "ParentId": "6173872", "Score": "7", "OwnerUserId": "19563"}});