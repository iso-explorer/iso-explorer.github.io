post_cb({"8574059": {"CommentCount": "1", "ViewCount": "114", "CreationDate": "2011-12-20T10:31:33.083", "LastActivityDate": "2011-12-20T10:59:40.933", "Title": "Using template-name in place of template-id inside class template definition", "FavoriteCount": "0", "PostTypeId": "1", "Id": "8574059", "Score": "6", "Body": "<p>Is the following C++ code correct? And if so, could anybody point me to a paragraph in the standard that mentions this? It seems that one can use template-name instead of template-id in a scope enclosed with template and the compiler automatically adds the template argument list.</p>\n<pre><code>template&lt;class Type&gt;\nclass Mana {\npublic:\n  Mana(const Mana&amp; m) {/*...*/}\n  Mana() {/*...*/}\n};\n</code></pre>\n<p>as opposed to:</p>\n<pre><code>template&lt;class Type&gt;\nclass Mana {\npublic:\n  Mana(const Mana&lt;Type&gt;&amp; m) {/*...*/}\n  Mana() {/*...*/}\n};\n</code></pre>\n<p>The code compiles with g++ as well as in MS visual studio.</p>\n", "Tags": "<c++><templates>", "OwnerUserId": "1107576", "AnswerCount": "1"}, "8574272": {"ParentId": "8574059", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Yes the code is correct. (The quote: \u00a714.6.1[temp.local]/2</p>\n<blockquote>\n<p id=\"so_8574059_8574272_0\">Within the scope of a class template specialization or partial specialization, when the <em>injected-class-name</em> is\n  used as a <em>type-name</em>, it is equivalent to the <em>template-name</em> followed by the <em>template-arguments</em> of the class\n  template specialization or partial specialization enclosed in <code>&lt;&gt;</code>. [ <em>Example:</em></p>\n<pre><code>template&lt;template&lt;class&gt; class T&gt; class A { };\ntemplate&lt;class T&gt; class Y;\ntemplate&lt;&gt; class Y&lt;int&gt; {\n   Y* p;        // meaning Y&lt;int&gt;\n   Y&lt;char&gt;* q;  // meaning Y&lt;char&gt;\n   A&lt;Y&gt;* a;     // meaning A&lt;::Y&gt;\n   class B {\n       template&lt;class&gt; friend class Y;   // meaning ::Y\n   };\n};\n</code></pre>\n<p id=\"so_8574059_8574272_1\">\u2014 <em>end example</em> ]</p>\n</blockquote>\n<p>)</p>\n<p>In fact this is used all over the place in the standard as well, e.g. </p>\n<pre><code>// \u00a720.4.2.1[tuple.cnstr]/10-13\ntuple(const tuple&amp; u) = default;\ntuple(tuple&amp;&amp; u) = default;\n\n// \u00a721.4.6.1[string::op+=]/1-2\nbasic_string&amp; operator+=(const basic_string&amp; str);\n\n// etc.\n</code></pre>\n", "OwnerUserId": "224671", "LastEditorUserId": "224671", "LastEditDate": "2011-12-20T10:59:40.933", "Id": "8574272", "Score": "7", "CreationDate": "2011-12-20T10:51:35.320", "LastActivityDate": "2011-12-20T10:59:40.933"}, "bq_ids": {"n4140": {"so_8574059_8574272_0": {"section_id": 180, "quality": 0.9523809523809523, "length": 20}}, "n3337": {"so_8574059_8574272_0": {"section_id": 174, "quality": 0.9523809523809523, "length": 20}}, "n4659": {"so_8574059_8574272_0": {"section_id": 185, "quality": 0.9523809523809523, "length": 20}}}});