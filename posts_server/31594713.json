post_cb({"31594713": {"CommentCount": "3", "ViewCount": "80", "CreationDate": "2015-07-23T17:52:06.663", "LastActivityDate": "2015-07-23T17:58:19.810", "Title": "Uniform initialization behavior different for different types in vector", "AcceptedAnswerId": "31594816", "PostTypeId": "1", "Id": "31594713", "Score": "3", "Body": "<p>I came across <a href=\"http://herbsutter.com/2013/05/09/gotw-1-solution/\" rel=\"nofollow\">this</a> article in which I read this example by one of the posters. I have quoted that here for convenience.</p>\n<pre><code>struct Foo\n{\n    Foo(int i) {} // #1\n    Foo() {}\n};\n\nint main()\n{\n    std::vector&lt;Foo&gt; f {10};\n\n    std::cout &lt;&lt; f.size() &lt;&lt; std::endl;\n}\n</code></pre>\n<blockquote>\n<p id=\"so_31594713_31594713_0\">The above code, as written, emits \u201c1\u201d (10 is a converted to Foo by a\n  constructor that takes an int, then the vector\u2019s initializer_list\n  constructor is called). If I comment out the line commented as #1, the\n  result is \u201c10\u201d (the initializer_list cannot be converted so the int\n  constructor is used).</p>\n</blockquote>\n<p>My question is why does it emit a 10 if the int constructor is removed.\nI understand that uniform initialization list works in the following order</p>\n<pre><code>1-Calls the initializer list if available or possible\n2-Calls the default constructor if available\n3-Does aggregate initialization\n</code></pre>\n<p>In the above case why is it creating 10 items in the vector since 1,2 and 3 are not possible ? Does this mean with uniform initialization a vector of items might always have different behaviors ?</p>\n", "Tags": "<c++11><vector>", "OwnerUserId": "4589819", "AnswerCount": "1"}, "31594816": {"ParentId": "31594713", "CommentCount": "0", "CreationDate": "2015-07-23T17:58:19.810", "OwnerUserId": "2069064", "PostTypeId": "2", "Id": "31594816", "Score": "3", "Body": "<p>Borrowing a quote from Scott Meyers in Effective Modern C++ (emphasis in original):</p>\n<blockquote>\n<p id=\"so_31594713_31594816_0\">If, however, one or more constructors declare a parameter of type <code>std::initializer_list</code>, calls using the braced initialization syntax strongly prefer the overloads taking <code>std;:initializer_list</code>s. <em>Strongly</em>. If there's <em>any way</em> for compilers to construe a call using a braced initializer to be a constructor taking a <code>std::initializer_list</code>, compilers will employ that interpretation.</p>\n</blockquote>\n<p>So when you have <code>std::vector&lt;Foo&gt; f {10};</code>, it will try to use the constructor of <code>vector&lt;Foo&gt;</code> that takes an <code>initializer_list&lt;Foo&gt;</code>. If <code>Foo</code> is constructible from an <code>int</code>, that is the constructor we're using - so we end up with one <code>Foo</code> constructed from <code>10</code>.</p>\n<p>Or, from the standardese, in [over.match.list]:</p>\n<blockquote>\n<p id=\"so_31594713_31594816_1\">When objects of non-aggregate class type <code>T</code> are list-initialized (8.5.4), overload resolution selects the constructor\n  in two phases:</p>\n<p id=\"so_31594713_31594816_2\">(1.1) \u2014 Initially, the candidate functions are the initializer-list constructors (8.5.4) of the class <code>T</code> and the\n  argument list consists of the initializer list as a single argument.<br>\n  (1.2) \u2014 If no viable initializer-list constructor is found, overload resolution is performed again, where the\n  candidate functions are all the constructors of the class <code>T</code> and the argument list consists of the elements\n  of the initializer list.</br></p>\n</blockquote>\n<p>If there <em>is</em> a viable initializer-list constructor, it is used. If you didn't have the <code>Foo(int )</code> constructor, there would not be a viable initializer-list constructor, and overload resolution the second time around would find the constructor of <code>vector</code> that takes a size - and so you'd get a vector of 10 default-constructed <code>Foo</code>s instead.</p>\n", "LastActivityDate": "2015-07-23T17:58:19.810"}, "bq_ids": {"n4140": {"so_31594713_31594816_2": {"section_id": 599, "quality": 0.9705882352941176, "length": 33}, "so_31594713_31594816_1": {"section_id": 599, "quality": 0.9230769230769231, "length": 12}}, "n3337": {"so_31594713_31594816_2": {"section_id": 589, "quality": 0.9705882352941176, "length": 33}, "so_31594713_31594816_1": {"section_id": 589, "quality": 0.9230769230769231, "length": 12}}, "n4659": {"so_31594713_31594816_2": {"section_id": 622, "quality": 0.9705882352941176, "length": 33}, "so_31594713_31594816_1": {"section_id": 622, "quality": 0.9230769230769231, "length": 12}}}});