post_cb({"10211273": {"ViewCount": "12439", "Body": "<p>Is it O.K. to define virtual function of class template outside its body? Virtual function can not be inlined, but to avoid multiple definitions in compilation units they shall be marked <code>inline</code> (assuming that template headers will be included in multiple source files). On the other hand compiler is free to ignore <code>inline</code>, so this seems valid. By an example, is the code below correct:</p>\n<pre><code>template &lt;typename T&gt;\nclass C\n{\npublic:\n    virtual void f(T val);\n};\n\ntemplate &lt;typename T&gt;\ninline\nvoid C&lt;T&gt;::f(T val)\n{\n  //definition\n}\n</code></pre>\n<p>?</p>\n<p>BTW gcc (3.4.2) allows to omit <code>inline</code> before definition of function <code>f(T val)</code> but not before analogous function of regular class. Is it only gcc's behaviour?</p>\n", "AcceptedAnswerId": "10211420", "Title": "Template definitions outside class body", "CreationDate": "2012-04-18T14:15:13.860", "Id": "10211273", "CommentCount": "3", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2012-04-18T14:32:41.623", "Score": "10", "OwnerUserId": "205955", "Tags": "<c++><templates><virtual><inline>", "AnswerCount": "3"}, "10211347": {"Id": "10211347", "PostTypeId": "2", "Body": "<p>You can define the functions there, as long as any code which needs to instantiate the function in question has visibility of that code at compile time (not link time).</p>\n<p>It's quite common to separate a template into 2 files, one being a traditional header, and the second being the implementation, as with non-templated functions and their implementation. The only difference is that you need to #include the template implementation file as well as the header when you want to use it.</p>\n", "LastActivityDate": "2012-04-18T14:18:53.237", "CommentCount": "0", "CreationDate": "2012-04-18T14:18:53.237", "ParentId": "10211273", "Score": "3", "OwnerUserId": "28875"}, "10211357": {"Id": "10211357", "PostTypeId": "2", "Body": "<p>You can define template methods outside the <code>class</code> definition, in the same header, without using <code>inline</code> and without receiving multiple definition errors.</p>\n<p><strong>That's because a template function doesn't generate a definition itself, if it's not fully specialized</strong>. To prove my point, the following:</p>\n<pre><code>void C&lt;int&gt;::f(int)\n{\n}\n</code></pre>\n<p>will result in a linker error, as the function has a definition in this case. (provided you include this in multiple translation units. If you mark it inline:</p>\n<pre><code>inline void C&lt;int&gt;::f(int)\n{\n}\n</code></pre>\n<p>the error no longer occurs.</p>\n", "LastActivityDate": "2012-04-18T14:19:12.550", "CommentCount": "0", "CreationDate": "2012-04-18T14:19:12.550", "ParentId": "10211273", "Score": "4", "OwnerUserId": "673730"}, "bq_ids": {"n4140": {"so_10211273_10211420_0": {"length": 43, "quality": 0.7962962962962963, "section_id": 7043}}, "n3337": {"so_10211273_10211420_0": {"length": 43, "quality": 0.7962962962962963, "section_id": 6788}}, "n4659": {"so_10211273_10211420_0": {"length": 43, "quality": 0.7962962962962963, "section_id": 8540}}}, "10211420": {"Id": "10211420", "PostTypeId": "2", "Body": "<p>Yes, it's OK even without <code>inline</code>. It works the same for ordinary member functions and static variables:</p>\n<pre><code>// everything in the header:\ntemplate &lt;class T&gt;\nclass A\n{\n  static int i;\n};\n\ntemplate &lt;class T&gt;\nint A&lt;T&gt;::i=0;\n</code></pre>\n<p>Standard quote: (3.2/5)</p>\n<blockquote>\n<p id=\"so_10211273_10211420_0\">There can be more than one de\ufb01nition of a class type (Clause 9), enumeration type (7.2), inline function with\n  external linkage (7.1.2), class template (Clause 14), non-static function template (14.5.6), static data member\n  of a class template (14.5.1.3), <strong>member function of a class template</strong> (14.5.1.1), or template specialization for\n  which some template parameters are not speci\ufb01ed (14.7, 14.5.5) in a program provided that each de\ufb01nition\n  appears in a di\ufb00erent translation unit, and provided the de\ufb01nitions satisfy the following requirements ...</p>\n</blockquote>\n<p>The requirements basically say the two definitions have to be identical.</p>\n<p>It doesn't work in case of regular classes. There has to be at most one definition in the whole program.</p>\n", "LastEditorUserId": "51831", "LastActivityDate": "2012-04-18T14:32:41.623", "Score": "9", "CreationDate": "2012-04-18T14:22:16.753", "ParentId": "10211273", "CommentCount": "1", "OwnerUserId": "51831", "LastEditDate": "2012-04-18T14:32:41.623"}});