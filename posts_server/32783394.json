post_cb({"bq_ids": {"n4140": {"so_32783394_32783472_0": {"length": 14, "quality": 1.0, "section_id": 4439}, "so_32783394_32783472_5": {"length": 4, "quality": 1.0, "section_id": 3287}, "so_32783394_32783600_0": {"length": 6, "quality": 0.75, "section_id": 4439}, "so_32783394_32783472_3": {"length": 23, "quality": 0.92, "section_id": 3296}, "so_32783394_32783472_2": {"length": 5, "quality": 0.8333333333333334, "section_id": 3295}}, "n3337": {"so_32783394_32783472_2": {"length": 5, "quality": 0.8333333333333334, "section_id": 3165}, "so_32783394_32783472_5": {"length": 4, "quality": 1.0, "section_id": 3157}, "so_32783394_32783600_0": {"length": 6, "quality": 0.75, "section_id": 4276}, "so_32783394_32783472_0": {"length": 14, "quality": 1.0, "section_id": 4276}, "so_32783394_32783472_3": {"length": 23, "quality": 0.92, "section_id": 3166}}, "n4659": {"so_32783394_32783472_0": {"length": 12, "quality": 0.8571428571428571, "section_id": 5704}, "so_32783394_32783472_2": {"length": 4, "quality": 0.6666666666666666, "section_id": 4057}, "so_32783394_32783600_0": {"length": 7, "quality": 0.875, "section_id": 5704}, "so_32783394_32783472_3": {"length": 23, "quality": 0.92, "section_id": 4058}}}, "32783394": {"ViewCount": "767", "Body": "<p>What I take to mean can be explained by the following example:</p>\n<p><code>auto p = std::make_shared&lt;int&gt;();</code></p>\n<p>Is the <code>int</code> variable default initialized (thus have garbage value) or value initialized (thus have a value of zero)? I've tested on GCC 5.2 and clang 3.6 with the former doing value initialization and the latter doing default initialization. I'm wondering what does the standard say about this? In my opinion, modern C++ should definitely perform value initialization in this case.</p>\n", "AcceptedAnswerId": "32783472", "Title": "Does std::make_shared perform value initialization (GCC and clang disagree)?", "CreationDate": "2015-09-25T13:32:12.363", "Id": "32783394", "CommentCount": "6", "FavoriteCount": "3", "PostTypeId": "1", "LastActivityDate": "2015-09-25T15:59:01.887", "Score": "21", "OwnerUserId": "1348273", "Tags": "<c++><c++11><initialization><language-lawyer>", "AnswerCount": "2"}, "32783600": {"Id": "32783600", "PostTypeId": "2", "Body": "<p>The standard seems to support your opinion.</p>\n<p>From 20.8.2.2.6:</p>\n<blockquote>\n<p id=\"so_32783394_32783600_0\">constructs an object in that memory via the placement new-expression ::new (pv) T(std::forward(args)...)</p>\n</blockquote>\n<p>Since new int() is value initialized, as contrasted with new int, I would expect zero.</p>\n", "LastActivityDate": "2015-09-25T13:42:38.143", "CommentCount": "0", "CreationDate": "2015-09-25T13:42:38.143", "ParentId": "32783394", "Score": "6", "OwnerUserId": "1612012"}, "32783472": {"Id": "32783472", "PostTypeId": "2", "Body": "<p><strong>Yes.</strong></p>\n<p>N3797 20.8.2.2.6</p>\n<blockquote>\n<p id=\"so_32783394_32783472_0\">Allocates memory suitable for an object of type T and constructs an\n  object in that memory via the placement new expression <code>::new (pv) T(std::forward&lt;Args&gt;(args)...)</code></p>\n</blockquote>\n<p>So, here will be</p>\n<pre><code>::new (pv) int();\n</code></pre>\n<p>And so on by N3797 8.5.1</p>\n<blockquote>\n<p id=\"so_32783394_32783472_1\">The initialization that occurs in the forms</p>\n<pre><code>T x(a);\nT x{a};\n</code></pre>\n<p id=\"so_32783394_32783472_2\">as well as in new expressions (5.3.4) is called direct-initialization.</p>\n<p id=\"so_32783394_32783472_3\">The semantics of initializers are as follows. The destination type is\n  the type of the object or reference being initialized and the source\n  type is the type of the initializer expression. If the initializer is\n  not a single (possibly parenthesized) expression, the source type is\n  not defined.</p>\n<p id=\"so_32783394_32783472_4\">\u2014 If the initializer is <code>()</code>, the object is value-initialized.</p>\n<p id=\"so_32783394_32783472_5\">To value-initialize an object of type <code>T</code> means:</p>\n<p id=\"so_32783394_32783472_6\">\u2014 otherwise, the object is zero-initialized.</p>\n</blockquote>\n<p>And both new clang and GCC agree with the standard: <a href=\"http://melpon.org/wandbox/permlink/Q7vctUOjyZPCV8S4\">Live</a></p>\n", "LastEditorUserId": "560648", "LastActivityDate": "2015-09-25T15:59:01.887", "Score": "22", "CreationDate": "2015-09-25T13:36:49.880", "ParentId": "32783394", "CommentCount": "0", "OwnerUserId": "1498580", "LastEditDate": "2015-09-25T15:59:01.887"}});