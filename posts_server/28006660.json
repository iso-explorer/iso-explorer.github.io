post_cb({"bq_ids": {"n4140": {"so_28006660_28006861_1": {"length": 10, "quality": 0.9090909090909091, "section_id": 70}, "so_28006660_28006861_0": {"length": 35, "quality": 0.9210526315789473, "section_id": 5485}}, "n3337": {"so_28006660_28006861_1": {"length": 10, "quality": 0.9090909090909091, "section_id": 65}, "so_28006660_28006861_0": {"length": 27, "quality": 0.7105263157894737, "section_id": 5271}}, "n4659": {"so_28006660_28006861_1": {"length": 10, "quality": 0.9090909090909091, "section_id": 72}, "so_28006660_28006861_0": {"length": 28, "quality": 0.7368421052631579, "section_id": 6920}}}, "28006660": {"ViewCount": "57", "Body": "<p>I want to understand why the call to the template <code>f</code> below doesn't compile:</p>\n<pre><code>struct A\n{\n    template&lt;class...&gt;\n    friend void f(A) { }\n} x;\n\nint main()\n{\n    f&lt;&gt;(x);\n}\n</code></pre>\n<p>ADL requires the postfix expression in a function call to be an unqualified-id. Is a simple-template-id (<code>f&lt;&gt;</code>) not an unqualified-id?</p>\n", "AcceptedAnswerId": "28006861", "Title": "Postfix expression with template-argument-list not being picked up by ADL", "CreationDate": "2015-01-18T02:45:15.013", "LastActivityDate": "2015-01-18T03:29:07.833", "CommentCount": "5", "LastEditDate": "2015-01-18T03:00:29.207", "PostTypeId": "1", "Tags": "<c++><c++11><argument-dependent-lookup>", "Id": "28006660", "AnswerCount": "1", "Score": "2", "OwnerUserId": "701092", "ClosedDate": "2015-01-18T04:05:12.477", "LastEditorUserId": "701092"}, "28006861": {"Id": "28006861", "PostTypeId": "2", "Body": "<p>The relevant clause seems to be 7.3.1.2 [namespace.memdef] paragraph 3:</p>\n<blockquote>\n<p id=\"so_28006660_28006861_0\">Every name first declared in a namespace is a member of that namespace. If a friend declaration in a non-local class first declares a class, function, class template or function template the friend is a member of the innermost enclosing namespace. The friend declaration does not by itself make the name visible to unqualified lookup (3.4.1) or qualified lookup (3.4.3). ...</p>\n</blockquote>\n<p>That is, the only way to find this name is through ADL. However, to apply the template arguments, the name needs to be found already according to 14.2 [temp.names] paragraph 2:</p>\n<blockquote>\n<p id=\"so_28006660_28006861_1\">For a template-name to be explicitly qualified by the template arguments, the name must be known to refer to a template.</p>\n</blockquote>\n", "LastActivityDate": "2015-01-18T03:29:07.833", "CommentCount": "0", "CreationDate": "2015-01-18T03:29:07.833", "ParentId": "28006660", "Score": "2", "OwnerUserId": "1120273"}});