post_cb({"8147850": {"CommentCount": "4", "AcceptedAnswerId": "8156356", "CreationDate": "2011-11-16T06:57:01.223", "LastActivityDate": "2011-11-17T02:24:34.350", "PostTypeId": "1", "ViewCount": "427", "FavoriteCount": "2", "Title": "Why does `basic_ios::swap` only do a partial swap?", "Id": "8147850", "Score": "18", "Body": "<blockquote>\n<p id=\"so_8147850_8147850_0\">C++11 <strong>\u00a727.5.4.2/21:</strong></p>\n<p id=\"so_8147850_8147850_1\"><code>void swap(basic_ios&amp; rhs);</code></p>\n<p id=\"so_8147850_8147850_2\"><em>Effects:</em> The states of <code>*this</code> and <code>rhs</code> shall be exchanged, except that <code>rdbuf()</code> shall return the same value as it returned before the function call, and <code>rhs.rdbuf()</code> shall return the same value as it returned before the function call.</p>\n</blockquote>\n<p>What is this partial swapping useful for?</p>\n<p>Can it cause trouble?</p>\n", "Tags": "<c++><c++11><swap>", "OwnerUserId": "464581", "AnswerCount": "2"}, "8156356": {"ParentId": "8147850", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>You can blame me for this one.  The committee has tried to change (twice I think), but each time the solution ended up breaking things.</p>\n<p>Swap and move semantics was retrofitted onto our I/O system a decade after it was designed.  And it wasn't a perfectly clean fit.</p>\n<p>Note that <code>basic_ios::swap</code> is a <em>protected</em> member function and there is no namespace-scope variant.  Thus this can only be called from a derived class (typically istream/ostream).  Note that <code>i/o_stream::swap</code> is also protected and with no namespace-scope variant.  And their spec is to call the base class <code>swap</code> and then swap any local data (such as the <code>gcount</code> in <code>istream</code>).</p>\n<p>Finally up at the <code>string/filestream</code> level you get what you would consider a \"normal\" <code>swap</code>: public member and namespace-scope variants.  At this level you've got a data member <code>string/file buffer</code> (the <code>rdbuf</code>) and the base class.  The <code>swap</code> at this level simply swaps the base and data members.</p>\n<p>The complicating characteristic of all this is that the <code>rdbuf()</code> down in the base class is actually a self-referencing pointer to the derived class's <code>streambuf</code> (<code>basic_filebuf</code> or <code>basic_stringbuf</code>) and <strong>that</strong> is why you don't want the base class to swap these self-referencing pointers.</p>\n<p>This makes the base <code>swap</code> weird, but everyone is protected from it except the derived clients.  And the code for the derived client's <code>swap</code> is subsequently deceptively simple looking.  And at the derived level, <code>swap</code> is made public and behaves in the manner that public clients expect it to.</p>\n<p>A similar dance is made for move construction and move assignment.  Move construction is further complicated by the fact that the base class is a virtual base, and thus its constructor is not called by the most directly derived class.</p>\n<p>It was fun.  It looks weird.  But it ultimately works. ;-)</p>\n<p><strong>Slight Correction:</strong></p>\n<p>Alberto Ganesh Barbati <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#911\">is responsible</a> for protecting <code>swap</code> at the <code>i/ostream</code> level.  It was a very good call on his part that I had completely missed with my first design.</p>\n", "OwnerUserId": "576911", "LastEditorUserId": "576911", "LastEditDate": "2011-11-17T02:24:34.350", "Id": "8156356", "Score": "20", "CreationDate": "2011-11-16T17:56:47.770", "LastActivityDate": "2011-11-17T02:24:34.350"}, "8148154": {"ParentId": "8147850", "CommentCount": "7", "Body": "<p>I only have one speculative answer...</p>\n<p>If the author assumed that a stream may use an internal buffer (for example a <code>char buffer[50]</code> data member), then this provision is necessary as obviously the content of the buffers may be swapped, but their address will remain unchanged.</p>\n<p>I do not know whether it is actually allowed or not.</p>\n", "OwnerUserId": "147192", "PostTypeId": "2", "Id": "8148154", "Score": "2", "CreationDate": "2011-11-16T07:35:57.593", "LastActivityDate": "2011-11-16T07:35:57.593"}, "bq_ids": {"n4140": {"so_8147850_8147850_2": {"section_id": 2014, "quality": 0.9090909090909091, "length": 20}}, "n3337": {"so_8147850_8147850_2": {"section_id": 2002, "quality": 0.9090909090909091, "length": 20}}, "n4659": {"so_8147850_8147850_2": {"section_id": 2287, "quality": 0.9090909090909091, "length": 20}}}});