post_cb({"16736858": {"ParentId": "16736652", "CommentCount": "1", "Body": "<p>In C++ you can use enums as bit-masks.</p>\n<p>For example:</p>\n<pre><code>enum Flag {\n    Read = 1 &lt;&lt; 0,\n    Write = 1 &lt;&lt; 1,\n    WithSugar = 1 &lt;&lt; 2\n};\n</code></pre>\n<p>Then you can say: <code>Flag f = Read | Write | WithSugar;</code> and <code>f</code>'s value is perfectly defined: <code>assert(f == 7);</code>!</p>\n<p>It's inherited from C...</p>\n<p>In our case, the rules says that <code>Flag</code> should be able to represent any value from <code>0</code> (enums are positive unless a negative enumerator exist) to <code>7</code>.</p>\n<p>The value <code>7</code> is determined by taking the largest enumerator (<code>WithSguar</code>: 4) and looking for <code>k</code> such that <code>2^(k-1) &lt;= 4 &lt; 2^k - 1</code>. The maximum representable value is then <code>2^k-1</code>. It makes sense if you consider the bitwise representation of the value in 2-complement: <code>4</code> is <code>100</code> so you can fill the <code>00</code> with <code>1</code> without taking more space, giving <code>111</code> as the maximum value, which happens to be <code>7</code>.</p>\n", "OwnerUserId": "147192", "PostTypeId": "2", "Id": "16736858", "Score": "4", "CreationDate": "2013-05-24T14:04:19.390", "LastActivityDate": "2013-05-24T14:04:19.390"}, "16736652": {"CommentCount": "1", "ViewCount": "93", "CreationDate": "2013-05-24T13:53:19.327", "LastActivityDate": "2013-05-24T14:04:19.390", "Title": "C++11 values of non-fixed enumeration?", "AcceptedAnswerId": "16736858", "PostTypeId": "1", "Id": "16736652", "Score": "1", "Body": "<p>In C++11 7.2.7 it says:</p>\n<blockquote>\n<p id=\"so_16736652_16736652_0\">For an enumeration [with a non-fixed underlying type] where <code>e_min</code> is the smallest enumerator and <code>e_max</code> is the largest, the values of the enumeration are the values in the range <code>b_min</code> to <code>b_max</code> defined as follows... [snip]</p>\n</blockquote>\n<p>I don't understand what it is defining here.  How are the range of possible values [<code>b_min</code>, <code>b_max</code>] distinct from the range of the enumerators [<code>e_min</code>, <code>e_max</code>] ?</p>\n<p>Perhaps an example could help of a specific enumeration definition and the calculation of <code>e_min</code>, <code>e_max</code>, <code>b_min</code> and <code>b_max</code>?</p>\n", "Tags": "<c++><c++11>", "OwnerUserId": "1131467", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_16736652_16736652_0": {"section_id": 5467, "quality": 0.75, "length": 15}}, "n3337": {"so_16736652_16736652_0": {"section_id": 5253, "quality": 0.75, "length": 15}}, "n4659": {"so_16736652_16736652_0": {"section_id": 6901, "quality": 0.65, "length": 13}}}});