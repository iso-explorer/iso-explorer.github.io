post_cb({"bq_ids": {"n4140": {"so_14144953_14145051_0": {"section_id": 5478, "quality": 0.8571428571428571, "length": 24}, "so_14144953_14145071_0": {"section_id": 7140, "quality": 1.0, "length": 27}}, "n3337": {"so_14144953_14145051_0": {"section_id": 5264, "quality": 0.8571428571428571, "length": 24}, "so_14144953_14145071_0": {"section_id": 6884, "quality": 1.0, "length": 27}}, "n4659": {"so_14144953_14145051_0": {"section_id": 6911, "quality": 0.8571428571428571, "length": 24}, "so_14144953_14145071_0": {"section_id": 8641, "quality": 1.0, "length": 27}}}, "14145051": {"ParentId": "14144953", "CommentCount": "0", "Body": "<p>According to N3485 7.3.1 [namespace.def]/6, the correct answer is <code>n::another_function</code>.</p>\n<blockquote>\n<p id=\"so_14144953_14145051_0\">The enclosing namespaces of a declaration are those namespaces in\n  which the declaration lexically appears, except for a redeclaration of\n  a namespace member outside its original namespace (e.g., a definition\n  as specified in 7.3.1.2). Such a redeclaration has the same enclosing\n  namespaces as the original declaration. [ Example:</p>\n<pre><code>namespace Q {\n    namespace V {\n        void f(); // enclosing namespaces are the global namespace, Q, and Q::V\n        class C { void m(); };\n    }\n    void V::f() { // enclosing namespaces are the global namespace, Q, and Q::V\n        extern void h(); // ... so this declares Q::V::h\n    }\n    void V::C::m() { // enclosing namespaces are the global namespace, Q, and Q::V\n    }\n}\n</code></pre>\n<p id=\"so_14144953_14145051_1\">\u2014end example ]</p>\n</blockquote>\n", "OwnerUserId": "82320", "PostTypeId": "2", "Id": "14145051", "Score": "2", "CreationDate": "2013-01-03T18:36:45.353", "LastActivityDate": "2013-01-03T18:36:45.353"}, "14145071": {"ParentId": "14144953", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>C++11 3.5 (as well as C++03)</p>\n<blockquote>\n<p id=\"so_14144953_14145071_0\"><strong>7</strong> When a block scope declaration of an entity with linkage is not found\n  to refer to some other declaration, then that entity is a member of\n  the innermost enclosing namespace. However such a declaration does not\n  introduce the member name in its namespace scope.</p>\n</blockquote>\n<p>The declaration in your example declares <code>n::another_function</code>.</p>\n", "OwnerUserId": "187690", "LastEditorUserId": "187690", "LastEditDate": "2013-01-03T18:58:13.490", "Id": "14145071", "Score": "9", "CreationDate": "2013-01-03T18:38:37.663", "LastActivityDate": "2013-01-03T18:58:13.490"}, "14144953": {"CommentCount": "5", "AcceptedAnswerId": "14145071", "CreationDate": "2013-01-03T18:31:22.860", "LastActivityDate": "2013-01-03T18:58:13.490", "PostTypeId": "1", "ViewCount": "436", "FavoriteCount": "2", "Title": "Local function declaration inside namespace", "Id": "14144953", "Score": "4", "Body": "<p>In such a situation</p>\n<pre><code>namespace n {\n    void f() {\n        void another_function();\n    }\n}\n</code></pre>\n<p>Should  the function <code>another_function</code> be defined inside the namespace <code>n</code> or outside? VS  2012 (with the <a href=\"http://blogs.msdn.com/b/vcblog/archive/2012/11/02/visual-c-c-11-and-the-future-of-c.aspx\" rel=\"nofollow\">November CTP</a>) says it should be outside, and GCC 4.7.2 on the Mac says it should be inside. If I do the wrong one, I get undefined symbol errors from the linkers.</p>\n<p>I generally trust GCC to be more compliant to the standard, but this is C++ and you can never be sure.</p>\n", "Tags": "<c++><namespaces><function-declaration>", "OwnerUserId": "726361", "AnswerCount": "2"}});