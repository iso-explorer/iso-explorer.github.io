post_cb({"36292219": {"ParentId": "36290995", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>Yes, there are at least two differences. In C++ (WG21 N4567 [cpp.include]/5):</p>\n<blockquote>\n<p id=\"so_36290995_36292219_0\">The implementation shall provide unique mappings for sequences\n  consisting of one or more <em>nondigit</em>s or <em>digit</em>s (2.10) followed by a\n  period (<code>.</code>) and a single <em>nondigit</em>. The first character shall not be\n  a <em>digit</em>. The implementation may ignore distinctions of alphabetical\n  case.</p>\n</blockquote>\n<p>In C (WG14 N1570 6.10.2/5, emphasis mine):</p>\n<blockquote>\n<p id=\"so_36290995_36292219_1\">The implementation shall provide unique mappings for sequences\n  consisting of one or more nondigits or digits (6.4.2.1) followed by a\n  period (<code>.</code>) and a single nondigit. The first character shall not be a\n  digit. The implementation may ignore distinctions of alphabetical case\n  and <strong>restrict the mapping to eight significant characters before the\n  period</strong>.</p>\n</blockquote>\n<p>A conforming C implementation can map \"<code>foobarbaz.h</code>\" and \"<code>foobarbat.h</code>\" to the same source file. A conforming C++ implementation cannot.</p>\n<hr>\n<p>Additionally, in C (N1570 6.4.7):</p>\n<blockquote>\n<p id=\"so_36290995_36292219_2\">If the characters <code>'</code>, <code>\\</code>, <code>\"</code>, <code>//</code>, or <code>/*</code> occur in the sequence\n  between the <code>&lt;</code> and <code>&gt;</code> delimiters, <strong>the behavior is undefined</strong>.\n  Similarly, if the characters <code>'</code>, <code>\\</code>, <code>//</code>, or <code>/*</code> occur in the\n  sequence between the <code>\"</code> delimiters, <strong>the behavior is undefined</strong>.</p>\n</blockquote>\n<p>while in C++ (N4567 [lex.header]/2):</p>\n<blockquote>\n<p id=\"so_36290995_36292219_3\">The appearance of either of the characters <code>'</code> or <code>\\</code> or of either of\n  the character sequences <code>/*</code> or <code>//</code> in a <em>q-char-sequence</em> or an\n  <em>h-char-sequence</em> is <strong>conditionally-supported with implementation-defined semantics</strong>, as is the appearance of the\n  character <code>\"</code> in an <em>h-char-sequence</em>.</p>\n</blockquote>\n<p>\"conditionally-supported with implementation-defined semantics\" means that </p>\n<ul>\n<li>if the implementation doesn't support it, it must issue a diagnostic;</li>\n<li>if the implementation does support it, its interpretation of this construct must be documented.</li>\n</ul>\n<p>while \"undefined behavior\" means that the implementation can do whatever it wants. </p>\n</hr>", "OwnerUserId": "2756719", "LastEditorUserId": "2756719", "LastEditDate": "2016-03-29T20:16:08.667", "Id": "36292219", "Score": "9", "CreationDate": "2016-03-29T18:25:01.690", "LastActivityDate": "2016-03-29T20:16:08.667"}, "36297606": {"ParentId": "36290995", "CommentCount": "0", "Body": "<p>In C++, there are typically more directories being searched. This is technically not a difference in the <em>directive</em>, though.</p>\n<p>For example, on my system:</p>\n<pre><code> % gcc -E -v -x c - &lt;&lt;&lt; '' 2&gt;&amp;1 | sed -n '/cc1/,/End of search list/p'\n /usr/lib/gcc/x86_64-linux-gnu/5/cc1 -E -quiet -v -imultiarch x86_64-linux-gnu - -mtune=generic -march=x86-64\nignoring nonexistent directory \"/usr/local/include/x86_64-linux-gnu\"\nignoring nonexistent directory \"/usr/lib/gcc/x86_64-linux-gnu/5/../../../../x86_64-linux-gnu/include\"\n#include \"...\" search starts here:\n#include &lt;...&gt; search starts here:\n /usr/lib/gcc/x86_64-linux-gnu/5/include\n /usr/local/include\n /usr/lib/gcc/x86_64-linux-gnu/5/include-fixed\n /usr/include/x86_64-linux-gnu\n /usr/include\nEnd of search list.\n</code></pre>\n<pre><code>% gcc -E -v -x c++ - &lt;&lt;&lt; '' 2&gt;&amp;1 | sed -n '/cc1/,/End of search list/p'\n /usr/lib/gcc/x86_64-linux-gnu/5/cc1plus -E -quiet -v -imultiarch x86_64-linux-gnu -D_GNU_SOURCE - -mtune=generic -march=x86-64\nignoring duplicate directory \"/usr/include/x86_64-linux-gnu/c++/5\"\nignoring nonexistent directory \"/usr/local/include/x86_64-linux-gnu\"\nignoring nonexistent directory \"/usr/lib/gcc/x86_64-linux-gnu/5/../../../../x86_64-linux-gnu/include\"\n#include \"...\" search starts here:\n#include &lt;...&gt; search starts here:\n /usr/include/c++/5\n /usr/include/x86_64-linux-gnu/c++/5\n /usr/include/c++/5/backward\n /usr/lib/gcc/x86_64-linux-gnu/5/include\n /usr/local/include\n /usr/lib/gcc/x86_64-linux-gnu/5/include-fixed\n /usr/include/x86_64-linux-gnu\n /usr/include\nEnd of search list.\n</code></pre>\n<p>Additionally, there are differences between the preprocessors that do <em>not</em> involve <code>#include</code>:</p>\n<ul>\n<li>named operators are builtin in C++. In C, you must <code>#include &lt;iso646.h&gt;</code></li>\n<li>boolean keywords are builtin in C++. In C, you must <code>#include &lt;stdbool.h&gt;</code></li>\n<li>Since C++14, <code>'</code> is available as a digit separators. (It is universally agreed that this was a bad idea, but the committee wouldn't accept anything else).</li>\n</ul>\n", "OwnerUserId": "1405588", "PostTypeId": "2", "Id": "36297606", "Score": "1", "CreationDate": "2016-03-30T00:36:57.340", "LastActivityDate": "2016-03-30T00:36:57.340"}, "36291091": {"ParentId": "36290995", "PostTypeId": "2", "CommentCount": "10", "Body": "<blockquote>\n<p id=\"so_36290995_36291091_0\">Like for example maybe the header content when is copied is copied in a different way.</p>\n</blockquote>\n<p>The <code>#include</code> preprocessor directive is handled by the CPP preprocessor, that is (mostly) the same for C and C++ compilation. Diverging C and C++ standards might introduce <a href=\"https://stackoverflow.com/questions/5085533/is-a-c-preprocessor-identical-to-a-c-preprocessor\">subtle differences</a>, but none of these affects how the <code>#include</code> directive should be handled regarding how the file's content is replaced into the translation unit (besides how the header file names are expanded and matched, see <a href=\"https://stackoverflow.com/users/2756719/t-c\">@T.C.</a>'s <a href=\"https://stackoverflow.com/a/36292219/1413395\">answer</a>).</p>\n<p>The CPP does merely text replacement and just expands what's seen from the included file into the translation unit, be it C or C++ code.</p>\n<blockquote>\n<p id=\"so_36290995_36291091_1\">I think this question is very straightforward, you can answer it by saying \"No\" or \"yes, here are the differences: 1), 2)\".</p>\n</blockquote>\n<p>No, there's no differences for the <code>#include</code> directive is working regarding the text replacement.</p>\n<hr>\n<p><sub>Well, from the results the C compiler might not be able to compile code expanded from C++ header files correctly, and sometimes vice versa.</sub></p>\n</hr>", "OwnerUserId": "1413395", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:07:42.213", "Id": "36291091", "Score": "9", "CreationDate": "2016-03-29T17:27:46.653", "LastActivityDate": "2016-03-31T16:42:46.827"}, "bq_ids": {"n4140": {"so_36290995_36292219_3": {"section_id": 5330, "quality": 0.9333333333333333, "length": 14}, "so_36290995_36292219_1": {"section_id": 507, "quality": 0.6764705882352942, "length": 23}, "so_36290995_36292219_0": {"section_id": 507, "quality": 0.8518518518518519, "length": 23}}, "n3337": {"so_36290995_36292219_3": {"section_id": 5127, "quality": 0.8666666666666667, "length": 13}, "so_36290995_36292219_1": {"section_id": 498, "quality": 0.6764705882352942, "length": 23}, "so_36290995_36292219_0": {"section_id": 498, "quality": 0.8518518518518519, "length": 23}}, "n4659": {"so_36290995_36292219_3": {"section_id": 6751, "quality": 0.8666666666666667, "length": 13}, "so_36290995_36292219_1": {"section_id": 528, "quality": 0.6764705882352942, "length": 23}, "so_36290995_36292219_0": {"section_id": 528, "quality": 0.8518518518518519, "length": 23}}}, "36290995": {"CommentCount": "10", "AcceptedAnswerId": "36292219", "PostTypeId": "1", "LastEditorUserId": "1016716", "CreationDate": "2016-03-29T17:22:57.763", "LastActivityDate": "2016-04-04T11:08:36.833", "LastEditDate": "2016-04-04T11:08:36.833", "ViewCount": "154", "FavoriteCount": "2", "Title": "Is there any difference between the directive #include from C and the one from C++?", "Id": "36290995", "Score": "3", "Body": "<p>No this question is not answered in the post <strong><em>What is the difference between <code>#include &lt;filename&gt;</code> and <code>#include \u201cfilename\u201d</code>?</em></strong>  This is a different question.\nI am studying the differences between C and C++. I am doing this by comparing the most basic programs that you can make of each language:</p>\n<p>In C:</p>\n<pre><code>#include &lt;stdio.h&gt;\nint main()\n{\n    printf(\"Hello World\"); \n    return 0; \n}\n</code></pre>\n<p>In C++</p>\n<pre><code>#include &lt;iostream&gt;\nint main()\n{\n  std::cout &lt;&lt; \"Hello World!!!\" &lt;&lt; std::endl;\n  return 0;\n}\n</code></pre>\n<p>I know about headers and the compilation process. But i would like to know if there is any difference between the #include directive of C and C++. Like for example maybe the header content when is copied is copied in a different way.\nI think this question is very straightforward, you can answer it by saying \"No\" or \"yes, here are the differences: 1), 2)\".</p>\n", "Tags": "<c++><c><c-preprocessor>", "OwnerUserId": "6130605", "AnswerCount": "3"}});