post_cb({"9149374": {"ParentId": "9149368", "PostTypeId": "2", "CommentCount": "2", "Body": "<h2>If you use e.g. <code>&lt;math.h&gt;</code></h2>\n<p>No, you shouldn't.</p>\n<p>It is unspecified whether they are available in the namespace <code>std</code> on any particular implementation:</p>\n<blockquote>\n<p id=\"so_9149368_9149374_0\"><code>[C++11: D.5/2]:</code> Every C header, each of which has a name of the form <code>name.h</code>, behaves as if each name placed in the standard library namespace by the corresponding <code>cname</code> header is placed within the global namespace scope. <strong>It is unspecified whether these names are first declared or defined within namespace scope (3.3.6) of the namespace <code>std</code> and are then injected into the global namespace scope by explicit <em>using-declarations</em> (7.3.3).</strong></p>\n</blockquote>\n<p><em>However, you should not be using this header:</em></p>\n<blockquote>\n<p id=\"so_9149368_9149374_1\"><code>[C++11: C.3.1/1]:</code> For compatibility with the Standard C library, the C++ standard library provides the 18 C headers (D.5), but <strong>their use is deprecated in C++</strong>.</p>\n</blockquote>\n<hr>\n<h2>If you use e.g. <code>&lt;cmath&gt;</code></h2>\n<p>Yes, you should.</p>\n<p>It is unspecified whether they are available in the global namespace on any particular implementation:</p>\n<blockquote>\n<p id=\"so_9149368_9149374_2\"><code>[C++11: 17.6.1.2/4]:</code> Except as noted in Clauses 18 through 30 and Annex D, the contents of each header <code>cname</code> shall be the same as that of the corresponding header <code>name.h</code>, as specified in the C standard library (1.2) or the C Unicode TR, as appropriate, as if by inclusion. In the C++ standard library, however, the declarations (except for names which are defined as macros in C) are within namespace scope (3.3.6) of the namespace <code>std</code>. <strong>It is unspecified whether these names are first declared within the global namespace scope and are then injected into namespace <code>std</code> by explicit <em>using-declarations</em> (7.3.3).</strong></p>\n</blockquote>\n</hr>", "OwnerUserId": "560648", "LastEditorUserId": "560648", "LastEditDate": "2012-02-05T12:57:10.637", "Id": "9149374", "Score": "16", "CreationDate": "2012-02-05T12:51:46.820", "LastActivityDate": "2012-02-05T12:57:10.637"}, "bq_ids": {"n4140": {"so_9149368_9149374_2": {"section_id": 6259, "quality": 0.88, "length": 44}, "so_9149368_9149374_0": {"section_id": 4907, "quality": 0.8837209302325582, "length": 38}, "so_9149368_9149374_1": {"section_id": 2511, "quality": 0.6923076923076923, "length": 9}}, "n3337": {"so_9149368_9149374_2": {"section_id": 6019, "quality": 0.88, "length": 44}, "so_9149368_9149374_0": {"section_id": 4702, "quality": 0.8837209302325582, "length": 38}}, "n4659": {"so_9149368_9149374_2": {"section_id": 7763, "quality": 0.82, "length": 41}, "so_9149368_9149374_0": {"section_id": 6316, "quality": 0.8837209302325582, "length": 38}, "so_9149368_9149374_1": {"section_id": 3239, "quality": 0.6923076923076923, "length": 9}}}, "9149368": {"CommentCount": "5", "AcceptedAnswerId": "9149374", "PostTypeId": "1", "ClosedDate": "2016-05-09T23:51:42.237", "LastEditorUserId": "514235", "CreationDate": "2012-02-05T12:50:53.577", "LastActivityDate": "2012-02-05T13:15:11.290", "LastEditDate": "2012-02-05T13:15:11.290", "ViewCount": "310", "FavoriteCount": "1", "Title": "Is it ok to qualify C functions with the `std` namespace?", "Id": "9149368", "Score": "5", "Body": "<p>When I use functions inherited from C, like the ones in <code>&lt;cmath&gt;</code> or <code>&lt;cstdlib&gt;</code>, should I qualify them as being part of the standard namespace <code>std::log</code>, or should I remain in the C-scope and use them as global functions? What about <code>size_t</code>?</p>\n", "Tags": "<c++><namespaces><std><qualified-name>", "OwnerUserId": "627005", "AnswerCount": "1"}});