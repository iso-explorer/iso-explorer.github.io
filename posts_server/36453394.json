post_cb({"36453605": {"ParentId": "36453394", "PostTypeId": "2", "CommentCount": "2", "Body": "<blockquote id=\"so_36453394_36453605_0\">\n<ol>\n<li>which one is right?</li>\n</ol>\n</blockquote>\n<p>For all the overloads of <a href=\"http://en.cppreference.com/w/cpp/container/list/insert\" rel=\"nofollow\"><code>std::list::insert</code></a>, strongly exception-safety is guaranteed.</p>\n<blockquote>\n<p id=\"so_36453394_36453605_1\">Exceptions</p>\n<p id=\"so_36453394_36453605_2\">If an exception is thrown, there are no effects (strong exception guarantee). </p>\n</blockquote>\n<p>and from the standard, <code>$23.3.5.4/2 list modifiers [list.modifiers]</code>:</p>\n<blockquote>\n<p id=\"so_36453394_36453605_3\">If an exception is thrown there are no effects.</p>\n</blockquote>\n<p>then</p>\n<blockquote id=\"so_36453394_36453605_4\">\n<ol start=\"2\">\n<li>is strongly exceptional-safe means the same with transaction safe?</li>\n</ol>\n</blockquote>\n<p>Yes. <a href=\"http://www.gotw.ca/gotw/059.htm\" rel=\"nofollow\">Here</a>'s an explanation from Herb Sutter:</p>\n<blockquote>\n<p id=\"so_36453394_36453605_5\">Strong Guarantee: If an exception is thrown, program state remains unchanged. This level always implies global commit-or-rollback semantics, including that no references or iterators into a container be invalidated if an operation fails.</p>\n</blockquote>\n", "OwnerUserId": "3309790", "LastEditorUserId": "3309790", "LastEditDate": "2016-04-08T05:22:31.053", "Id": "36453605", "Score": "2", "CreationDate": "2016-04-06T14:07:01.853", "LastActivityDate": "2016-04-08T05:22:31.053"}, "36453901": {"ParentId": "36453394", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>It is already answered that <code>std::list</code> provides this guarantees as per standard. I'd like to mention <strong>why</strong> it is possible to do this in the list.</p>\n<p>You can provide this guarantee because list has a constant complexity merge operation, which is a non-throwing operation. All you need to do is to first create a temporary list, fill the temporary list with values and than merge temporary list into original list.</p>\n<p>If exception happens while populating temporary list, nothing is merged, and temporary list is simply disposed when the insert exits.</p>\n<p>Since no other container provides constant complexity no-throwing merge, it is not possible with any other container.</p>\n", "OwnerUserId": "5245033", "LastEditorUserId": "5245033", "LastEditDate": "2016-04-06T14:23:40.090", "Id": "36453901", "Score": "1", "CreationDate": "2016-04-06T14:18:29.533", "LastActivityDate": "2016-04-06T14:23:40.090"}, "36453394": {"CommentCount": "0", "ViewCount": "74", "PostTypeId": "1", "LastEditorUserId": "3309790", "CreationDate": "2016-04-06T13:58:40.790", "LastActivityDate": "2016-04-08T05:23:16.150", "Title": "Is std::list's multi-element inserts strongly exception-safe?", "AcceptedAnswerId": "36453605", "LastEditDate": "2016-04-08T05:23:16.150", "Id": "36453394", "Score": "3", "Body": "<p>In item 17 of <code>exceptional c++</code>, I find this:</p>\n<blockquote>\n<p id=\"so_36453394_36453394_0\">First, for all containers, multi-element inserts (\"iterator range\"\n  inserts) are never strongly exception-safe.</p>\n</blockquote>\n<p>but in item 1 of <code>effective STL</code>, I find this:</p>\n<blockquote>\n<p id=\"so_36453394_36453394_1\">If you need transactional semantics for multiple-element insertions\n  (e.g., the range form \u2014 see Item 5), you'll want to choose list,\n  because list is the only standard container that offers transactional\n  semantics for multiple-element insertions.</p>\n</blockquote>\n<p>and in page <code>249</code> of <code>the c++ standard library 2th</code>, I find this:</p>\n<blockquote>\n<p id=\"so_36453394_36453394_2\">For lists, even multiple-element insert operations are transaction safe.</p>\n</blockquote>\n<p>So my question is which one is right? Is strongly exceptional-safe means the same with transaction safe?</p>\n", "Tags": "<c++><insert><language-lawyer><stdlist><exception-safety>", "OwnerUserId": "5074253", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_36453394_36453605_3": {"section_id": 818, "quality": 1.0, "length": 4}, "so_36453394_36453605_2": {"section_id": 818, "quality": 0.7142857142857143, "length": 5}}, "n3337": {"so_36453394_36453605_3": {"section_id": 807, "quality": 1.0, "length": 4}, "so_36453394_36453605_2": {"section_id": 807, "quality": 0.7142857142857143, "length": 5}}, "n4659": {"so_36453394_36453605_3": {"section_id": 873, "quality": 1.0, "length": 4}, "so_36453394_36453605_2": {"section_id": 877, "quality": 0.7142857142857143, "length": 5}}}});