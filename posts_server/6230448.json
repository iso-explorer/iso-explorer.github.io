post_cb({"6230473": {"ParentId": "6230448", "CommentCount": "26", "Body": "<p>Yes, it is possible to have such a constructor, but it's impossible to call it. All the template parameters of a templated constructor must be deduced from the parameter list or have a default value. In Your example you can't instantiate the class.</p>\n<p>[temp.mem]</p>\n<blockquote>\n<p id=\"so_6230448_6230473_0\">[ Note: Because the explicit template argument list follows the function template name,\n  and because conversion member function templates and constructor member function templates are called\n  without using a function name, there is no way to provide an explicit template argument list for these\n  function templates. \u2014end note ]</p>\n</blockquote>\n", "OwnerUserId": "277176", "PostTypeId": "2", "Id": "6230473", "Score": "12", "CreationDate": "2011-06-03T17:22:16.390", "LastActivityDate": "2011-06-03T17:22:16.390"}, "6230448": {"CommentCount": "3", "ViewCount": "418", "CreationDate": "2011-06-03T17:19:15.007", "LastActivityDate": "2011-06-03T17:22:16.390", "Title": "Is it possible to have a templated constructor like 'template<class T> X(){}'?", "AcceptedAnswerId": "6230473", "PostTypeId": "1", "Id": "6230448", "Score": "9", "Body": "<pre><code>struct X{\n    template&lt;class T&gt;\n    X(){}\n};\n</code></pre>\n<p>Is it possible to instantate such a type?</p>\n", "Tags": "<c++><templates><constructor>", "OwnerUserId": "500104", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_6230448_6230473_0": {"section_id": 114, "quality": 0.9117647058823529, "length": 31}}, "n3337": {"so_6230448_6230473_0": {"section_id": 109, "quality": 0.9117647058823529, "length": 31}}, "n4659": {"so_6230448_6230473_0": {"section_id": 118, "quality": 0.9117647058823529, "length": 31}}}});