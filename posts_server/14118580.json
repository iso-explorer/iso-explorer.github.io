post_cb({"bq_ids": {"n4140": {"so_14118580_14118791_1": {"length": 11, "quality": 0.7333333333333333, "section_id": 4240}}, "n3337": {"so_14118580_14118791_1": {"length": 11, "quality": 0.7333333333333333, "section_id": 4081}}, "n4659": {"so_14118580_14118791_1": {"length": 11, "quality": 0.7333333333333333, "section_id": 6399}}}, "14118791": {"Id": "14118791", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_14118580_14118791_0\">I assume these vectors would be covered by the global override of new and delete but I maybe wrong. So what i'm asking is would I need to have an stl allocator that works off of my memory allocator or is it likely some other problem using global new and delete that I have overlooked?</p>\n</blockquote>\n<p>The C++ Standard (here from C++11) says about <code>std::allocator</code> (the default allocator used for standard containers):</p>\n<blockquote>\n<p id=\"so_14118580_14118791_1\">(\u00a720.6.9/1) Remark: the storage is obtained by calling ::operator new(std::size_t) (18.6.1), but it is unspeci\ufb01ed when or how often this function is called. [...]</p>\n</blockquote>\n<p>So the fact that you didn't implement a special allocator class for use with the vectors is not a problem. The problem is probably caused by something wrong about your definition of the global operator itself, or perhaps about the way you use the vectors. Recommended next steps are:</p>\n<ul>\n<li>Check whether the code works when <code>::operator new</code> is not replaced</li>\n<li>Use a debugger to obtain a stack trace of the crash and analyse the stack at that point to obtain clues on what functions are involved in the crash, what the values of local variables at that point is, etc.</li>\n</ul>\n", "LastEditorUserId": "777186", "LastActivityDate": "2013-01-02T08:52:07.187", "Score": "4", "CreationDate": "2013-01-02T08:15:29.640", "ParentId": "14118580", "CommentCount": "4", "OwnerUserId": "777186", "LastEditDate": "2013-01-02T08:52:07.187"}, "14118580": {"ViewCount": "196", "Body": "<p>I have written a memory allocator to solve a problem with the speed of the default one in C++ (mingw).</p>\n<p>To do this I've overloaded global new and delete. All the requests i'm getting through are being correctly allocated with memory of the correct sizes but i'm still getting segmentation faults. These faults seem to be about the use of vectors.</p>\n<p>I assume these vectors would be covered by the global override of new and delete but I maybe wrong. So what i'm asking is would I need to have an stl allocator that works off of my memory allocator or is it likely some other problem using global new and delete that I have overlooked?</p>\n", "AcceptedAnswerId": "14118791", "Title": "Does customizing \"::operator new\" require special allocators for std containers?", "CreationDate": "2013-01-02T07:51:14.113", "Id": "14118580", "CommentCount": "5", "LastEditDate": "2013-01-02T08:17:35.507", "PostTypeId": "1", "LastEditorUserId": "777186", "LastActivityDate": "2013-01-08T01:07:37.183", "Score": "3", "OwnerUserId": "722634", "Tags": "<c++><memory-management><stl>", "AnswerCount": "2"}, "14118639": {"Id": "14118639", "PostTypeId": "2", "Body": "<p>I believe <a href=\"http://www.codeproject.com/Articles/4795/C-Standard-Allocator-An-Introduction-and-Implement\" rel=\"nofollow\">STL Allocators</a> would need to be implemented for you to control <code>vector</code>s allocations</p>\n", "LastActivityDate": "2013-01-02T07:58:12.870", "CommentCount": "0", "CreationDate": "2013-01-02T07:58:12.870", "ParentId": "14118580", "Score": "0", "OwnerUserId": "1520364"}});