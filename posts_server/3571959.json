post_cb({"3571959": {"ViewCount": "182", "Body": "<p>$3.6.1/3 states-</p>\n<blockquote>\n<p id=\"so_3571959_3571959_0\">\"The function main shall not <strong>be used</strong>\n  (3.2) within a program.\".</p>\n</blockquote>\n<p>The sample <em>academically motivated</em> program below uses the name 'main' in a couple of ways which I thought are legitimate. This is based on the assumption that 'usage of a function' is related to calling the function (directly/indirectly).</p>\n<pre><code>struct MyClass{ \nprivate: \n   MyClass(){}  \n   friend int main(); \n};   \n\nint main(){  \n   MyClass m;  \n   int (*p)() = main; // but don't do anything \n}\n</code></pre>\n<ol>\n<li><p>Fair enough, the code shown compiles with gcc/VS 2010.</p></li>\n<li><p>I am surprised by Comeau's error.</p></li>\n</ol>\n<p>Comeau online gives error while declaration 'p' (i.e while taking address of 'main') but not while declaraing 'main' as a friend.</p>\n<p>Who/What is right with respect to C++03?</p>\n", "AcceptedAnswerId": "3571985", "Title": "What is meant by 'use of a function'", "CreationDate": "2010-08-26T04:03:31.290", "Id": "3571959", "CommentCount": "3", "PostTypeId": "1", "LastActivityDate": "2010-08-26T12:58:53.700", "Score": "3", "OwnerUserId": "418110", "Tags": "<c++><function>", "AnswerCount": "4"}, "3572000": {"Id": "3572000", "PostTypeId": "2", "Body": "<p>I think that in the first case, the friend function just refers to \"some function called main\" while in the second case its rather \"oh, you mean THE ONE main? I can't allow that\".</p>\n", "LastActivityDate": "2010-08-26T04:16:40.417", "CommentCount": "0", "CreationDate": "2010-08-26T04:16:40.417", "ParentId": "3571959", "Score": "0", "OwnerUserId": "6367"}, "bq_ids": {"n4140": {"so_3571959_3571985_0": {"length": 6, "quality": 0.75, "section_id": 7040}}, "n3337": {"so_3571959_3571985_0": {"length": 5, "quality": 0.625, "section_id": 6785}}, "n4659": {"so_3571959_3571985_0": {"length": 6, "quality": 0.75, "section_id": 8537}}}, "3571985": {"Id": "3571985", "PostTypeId": "2", "Body": "<p>C++03 \u00a73.2/2 says:</p>\n<blockquote>\n<p id=\"so_3571959_3571985_0\">An object or non-overloaded function is used if its name appears in a potentially-evaluated expression.</p>\n</blockquote>\n<p>It goes on to list what constitutes <em>use</em> of other various types of entities; this is the important one here.</p>\n<p>A friend declaration is not an expression.  </p>\n<p>When the function <code>main()</code> is converted to a pointer and that pointer is assigned to <code>p</code>, that is an expression and it is potentially evaluated (C++03 \u00a73.2/2):</p>\n<blockquote>\n<p id=\"so_3571959_3571985_1\">An expression is <em>potentially evaluated</em> unless it appears where an integral constant expression is required (see 5.19), is the operand of the <code>sizeof</code> operator (5.3.3), or is the operand of the <code>typeid</code> operator and the expression does not designate an lvalue of polymorphic class type (5.2.8).</p>\n</blockquote>\n", "LastEditorUserId": "151292", "LastActivityDate": "2010-08-26T04:16:27.407", "Score": "6", "CreationDate": "2010-08-26T04:10:37.780", "ParentId": "3571959", "CommentCount": "0", "OwnerUserId": "151292", "LastEditDate": "2010-08-26T04:16:27.407"}, "3572078": {"Id": "3572078", "PostTypeId": "2", "Body": "<p>C++03 Appendix C.1 on C++ and ISO C Compatibility says:</p>\n<h3>Changes in 3.6</h3>\n<p><strong>Change</strong>: Main cannot be called recursively and cannot have its address taken<br>\n<strong>Rationale</strong>: The main function may require special actions.<br>\n<strong>Effect on original feature</strong>: Deletion of semantically well-defined feature<br>\n<strong>Difficulty of converting</strong>: Trivial: create an intermediary function such as mymain(argc, argv.<br>\n<strong>How widely used</strong>: Seldom</br></br></br></br></p>\n", "LastEditorUserId": "151292", "LastActivityDate": "2010-08-26T12:58:53.700", "Score": "1", "CreationDate": "2010-08-26T04:37:43.940", "ParentId": "3571959", "CommentCount": "1", "OwnerUserId": "14065", "LastEditDate": "2010-08-26T12:58:53.700"}, "3571986": {"Id": "3571986", "PostTypeId": "2", "Body": "<p>Going by the exact wording (\"<em>shall not <strong>be used</strong></em></p>\"), I would think that the first example is considered legal because it doesn't use the function in any way. It adds some kind of reference to it somewhere and allows the function to access the private data.  It doesn't use <code>main()</code>, it provides more access to it.\n<p>The second example (taking the address) actually uses <code>main()</code> as a symbol, by taking the address of it and placing that into a pointer to a function. Not only will that allow you to easily break the rule of not calling main from within the program, it has to interact with it (at least the info that tells where main is at).</p>\n", "LastActivityDate": "2010-08-26T04:10:38.573", "CommentCount": "0", "CreationDate": "2010-08-26T04:10:38.573", "ParentId": "3571959", "Score": "0", "OwnerUserId": "129032"}});