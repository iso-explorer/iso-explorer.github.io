post_cb({"17443061": {"ParentId": "17442912", "PostTypeId": "2", "CommentCount": "7", "CreationDate": "2013-07-03T08:22:11.720", "Score": "1", "LastEditorUserId": "2528057", "LastEditDate": "2013-07-03T08:40:09.543", "Id": "17443061", "OwnerUserId": "2528057", "Body": "<p>The compiler is your friend. This</p>\n<pre><code>   // Why won't this line work???/\n   foo(x);\n</code></pre>\n<p>is a multiline comment, foo(x) is not executed!</p>\n<p>The <a href=\"http://en.wikipedia.org/wiki/Digraphs_and_trigraphs\" rel=\"nofollow\">trigraph</a> \"??/\" is converted to \"\\\" which indicates a linebreak into the comment.</p>\n", "LastActivityDate": "2013-07-03T08:40:09.543"}, "17443013": {"ParentId": "17442912", "CommentCount": "4", "Body": "<p><code>??/</code> is a <strong>Trigraph sequence</strong> which is replaced with <code>\\</code>.<br>\nFor the compiler <code>\\</code> means that immediate line that follows is a part of the current line. In this case the current line is a comment. The effective result is:       </br></p>\n<pre><code>// Why won't this line work foo(x);\n</code></pre>\n", "OwnerUserId": "452307", "PostTypeId": "2", "Id": "17443013", "Score": "8", "CreationDate": "2013-07-03T08:19:10.600", "LastActivityDate": "2013-07-03T08:19:10.600"}, "17442912": {"CommentCount": "39", "AcceptedAnswerId": "17443004", "PostTypeId": "1", "ClosedDate": "2013-07-04T07:53:39.453", "LastEditorUserId": "2040040", "CreationDate": "2013-07-03T08:13:35.230", "LastActivityDate": "2013-07-03T09:13:58.020", "LastEditDate": "2013-07-03T09:13:58.020", "ViewCount": "570", "FavoriteCount": "7", "Title": "Incrementing reference variable doesn't work", "Id": "17442912", "Score": "2", "Body": "<p>The following code is supposed to output <code>6</code>, but instead it outputs <code>5</code>. I can't figure out why. What's going on?</p>\n<pre><code>#include &lt;iostream&gt;\n\ntemplate &lt;typename T&gt;\nvoid foo(T&amp; y)\n{\n   y++;\n}\n\nint main()\n{\n   int x = 5;\n\n   // Why won't this line work???/\n   foo(x);\n\n   std::cout &lt;&lt; x;\n}\n</code></pre>\n<h3><a href=\"http://ideone.com/1JhRm6\" rel=\"nofollow\">Live demo</a></h3>\n", "Tags": "<c++><c++11>", "OwnerUserId": "560648", "AnswerCount": "6"}, "17443004": {"ParentId": "17442912", "PostTypeId": "2", "CommentCount": "6", "CreationDate": "2013-07-03T08:18:42.103", "Score": "19", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:09:20.883", "Id": "17443004", "OwnerUserId": "1619294", "Body": "<h1>Trigraphs</h1>\n<p>You're using the good ol' trick of <a href=\"http://en.wikipedia.org/wiki/Digraphs_and_trigraphs#C\" rel=\"nofollow noreferrer\">trigraphs</a>.</p>\n<pre><code>// Why won't this line work???/\n                            | |\n                            \\ /\n                             |\n                         ~trigraph~\n</code></pre>\n<p>The <code>??/</code> trigraph is in turn converted to <code>\\</code> which basically concatenates the current line with the next line and thus your code becomes more or less like this:</p>\n<pre><code>// Why won't this line work? foo(x);\n</code></pre>\n<p>A fine trick indeed.</p>\n<hr>\n<p>Quoting from the C++11 standard:</p>\n<p>\u00a72.2.2:</p>\n<blockquote>\n<p id=\"so_17442912_17443004_0\">Each instance of a <strong>backslash character (\\) immediately followed by a\n  new-line character</strong> is deleted, splicing physical source lines to form\n  logical source lines. ...</p>\n</blockquote>\n<p>\u00a72.4.1:</p>\n<pre><code>Table 1 - Trigraph sequences\n...\n==========================\n| Trigraph | Replacement |\n==========================\n|          ...           |\n==========================\n|   ??/    |      \\      |\n==========================\n</code></pre>\n<hr>\n<p>Fortunately, <a href=\"http://coliru.stacked-crooked.com/view?id=965ca9098aaef2bd5099a7c94ae60595-f674c1a6d04c632b71a62362c0ccfc51\" rel=\"nofollow noreferrer\">GCC seems to detect this kind of trickery</a>, emitting a warning (just set <code>-Wall</code>):</p>\n<pre><code>main.cpp:13:32: warning: trigraph ??/ converted to \\ [-Wtrigraphs]\n    // Why won't this line work???/\n ^\n\nmain.cpp:13:4: warning: multi-line comment [-Wcomment]\n    // Why won't this line work???/\n    ^\n</code></pre>\n<hr>\n<p><sub>\nRelated references:</sub></p>\n<p><a href=\"https://stackoverflow.com/q/16662276/1619294\">meaning of `???-` in C++ code</a></p>\n<p><a href=\"https://stackoverflow.com/q/15736282/1619294\">What is this smiley-with-beard expression: \"&lt;:]{%&gt;\"?</a></p>\n<p><a href=\"https://stackoverflow.com/questions/7825055/what-does-the-c-operator-do\">What does the C ??!??! operator do?</a></p>\n<p>And all other similar questions out there. ??)</p>\n<p></p></hr></hr></hr>\n<p><sub>PS: That's a smiley.</sub></p>\n", "LastActivityDate": "2013-07-03T09:12:13.663"}, "17443014": {"ParentId": "17442912", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2013-07-03T08:19:10.850", "Score": "2", "LastEditorUserId": "1009479", "LastEditDate": "2013-07-03T08:33:55.367", "Id": "17443014", "OwnerUserId": "1009479", "Body": "<pre><code>// Why won't this line work???/\n   foo(x);\n</code></pre>\n<p>The trigraph <code>??/</code>turns to <code>\\</code>, so the code will be translated to:</p>\n<pre><code>// Why won't this line work?\\\n   foo(x);\n</code></pre>\n<p>And string concatenation works.</p>\n<p>When I tested it in g++, trigraph is turned off by default(generates a warning), it will output 6. If compiled using <code>g++ t.cpp -trigraphs</code>, will output 5.</p>\n", "LastActivityDate": "2013-07-03T08:33:55.367"}, "17443098": {"ParentId": "17442912", "PostTypeId": "2", "CommentCount": "2", "CreationDate": "2013-07-03T08:24:36.200", "Score": "2", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:28:59.477", "Id": "17443098", "OwnerUserId": "2535531", "Body": "<p>probably your comment is interpreted as a trigraph (not treegraph!) that \"deletes\" the function call.</p>\n<p><a href=\"http://ideone.com/sU4YGc\" rel=\"nofollow noreferrer\">http://ideone.com/sU4YGc</a> works for me deleting that ??/ in the comment.</p>\n<pre><code>// Why won't this line work?\nfoo(x);\n</code></pre>\n<p>see also <a href=\"https://stackoverflow.com/questions/1234582/purpose-of-trigraph-sequences-in-c\">Purpose of Trigraph sequences in C++?</a></p>\n", "LastActivityDate": "2013-07-03T08:43:12.930"}, "17442949": {"ParentId": "17442912", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2013-07-03T08:15:52.800", "Score": "4", "LastEditorUserId": "2040040", "LastEditDate": "2013-07-03T08:28:59.823", "Id": "17442949", "OwnerUserId": "2040040", "Body": "<p>It's <strong>Trigraphs</strong>. In c++11 specification</p>\n<blockquote>\n<h2>2.4 Trigraph sequences [lex.trigraph]</h2>\n<p id=\"so_17442912_17442949_0\"><sup>1</sup> Before any other processing takes place, each occurrence of one of the following sequences of three characters\n  (<em>\u201ctrigraph sequences\u201d</em>) is replaced by the single character indicated in Table 1.</p>\n<pre>\n                     Table 1 \u2014 Trigraph sequences\n    Trigraph Replacement \u2502 Trigraph Replacement \u2502 Trigraph Replacement\n    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n       ??=      #        \u2502    ??(      [        \u2502    ??&lt;      {\n       ??/      \\        \u2502    ??)      ]        \u2502    ??&gt;      }\n       ??\u2019      \u02c6        \u2502    ??!      |        \u2502    ??-      ~\n</pre>\n</blockquote>\n<p>Now replace <code>??/</code> with <code>\\</code> and you'll find out.</p>\n", "LastActivityDate": "2013-07-03T08:28:59.823"}, "bq_ids": {"n4140": {"so_17442912_17443004_0": {"section_id": 5313, "quality": 1.0, "length": 17}, "so_17442912_17442949_0": {"section_id": 5317, "quality": 0.8947368421052632, "length": 17}}, "n3337": {"so_17442912_17443004_0": {"section_id": 5110, "quality": 1.0, "length": 17}, "so_17442912_17442949_0": {"section_id": 5114, "quality": 0.8947368421052632, "length": 17}}, "n4659": {"so_17442912_17443004_0": {"section_id": 6737, "quality": 1.0, "length": 17}}}});