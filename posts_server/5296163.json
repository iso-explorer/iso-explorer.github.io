post_cb({"5297920": {"ParentId": "5296163", "CommentCount": "0", "Body": "<p>The return type for <code>main</code> is determined by the implementation, not the programmer. Check your compiler documentation to see what the legal signatures are for <code>main</code>.  Don't assume that <code>void main()</code> is one of them.  In a hosted environment, <code>main</code> normally returns <code>int</code>.  In a freestandaing environment, the entry point may not even be named <code>main</code>, but its return type will still be determined by the implementation, not the programmer.  </p>\n", "OwnerUserId": "134554", "PostTypeId": "2", "Id": "5297920", "Score": "5", "CreationDate": "2011-03-14T11:25:23.313", "LastActivityDate": "2011-03-14T11:25:23.313"}, "5296229": {"ParentId": "5296163", "CommentCount": "0", "Body": "<p>Originally in the C language there was no such type as void and therefore the function had to return int.</p>\n<p>In practice, returning int allows you to run another process from your process (using fork and exec) and if you can get the return result from that process you will know whether it worked or not.</p>\n", "OwnerUserId": "442284", "PostTypeId": "2", "Id": "5296229", "Score": "1", "CreationDate": "2011-03-14T08:21:58.313", "LastActivityDate": "2011-03-14T08:21:58.313"}, "5296163": {"CommentCount": "5", "ViewCount": "6385", "PostTypeId": "1", "ClosedDate": "2014-01-26T05:28:31.237", "LastEditorUserId": "501557", "CreationDate": "2011-03-14T08:12:35.100", "LastActivityDate": "2015-07-07T11:08:18.077", "LastEditDate": "2013-02-09T05:15:05.537", "FavoriteCount": "4", "Title": "Why is the type of the main function in C and c++ left to the user to define?", "Id": "5296163", "Score": "16", "Body": "<p>Why is main() a user defined function ?</p>\n<p>When will I use <code>void main()</code> and <code>int main()</code> ? </p>\n", "Tags": "<c++><c><main>", "OwnerUserId": "658424", "AnswerCount": "6"}, "5296187": {"ParentId": "5296163", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>Many compilers don't support void main(), therefore you should always use int main().</p>\n", "OwnerUserId": "326820", "LastEditorUserId": "326820", "LastEditDate": "2011-03-14T09:38:15.620", "Id": "5296187", "Score": "-1", "CreationDate": "2011-03-14T08:16:05.660", "LastActivityDate": "2011-03-14T09:38:15.620"}, "5296593": {"ParentId": "5296163", "PostTypeId": "2", "CommentCount": "15", "Body": "<p><strong>EDIT</strong> This answer is not as complete as it could be since it doesn't really address the strange sentence \"or otherwise in some implementation-defined manner. I have now written a <a href=\"https://stackoverflow.com/questions/204476/what-should-main-return-in-c-and-c/31263079#31263079\">more complete answer</a> which also addresses C90, C11 and C++. <strong>END OF EDIT</strong></p>\n<p>Here is what the C standard says (ISO C 9899:1999):</p>\n<blockquote>\n<p id=\"so_5296163_5296593_0\">5.1.2.1 Freestanding environment</p>\n<p id=\"so_5296163_5296593_1\">In a freestanding environment (in\n  which C\n  program execution may take place\n  without any benefit of an operating\n  system), the name and type of the\n  function called at program startup are\n  implementation-defined. \n  / .. /\n  The effect\n  of program termination in a\n  freestanding environment is\n  implementation-defined.</p>\n<p id=\"so_5296163_5296593_2\">5.1.2.2 Hosted environment </p>\n<p id=\"so_5296163_5296593_3\">A hosted environment need not be provided, but\n  shall conform to the following\n  specifications if present.</p>\n<p id=\"so_5296163_5296593_4\">5.1.2.2.1 Program startup </p>\n<p id=\"so_5296163_5296593_5\">The function called at program startup is named\n  main. The implementation declares no\n  prototype for this function. It shall\n  be defined with a return type of int\n  and with no parameters:</p>\n<p id=\"so_5296163_5296593_6\">int main(void) { /* ... */ }</p>\n<p id=\"so_5296163_5296593_7\">or with two parameters (referred to\n  here as argc and argv, though any\n  names may be used, as they are local\n  to the function in which they are\n  declared):</p>\n<p id=\"so_5296163_5296593_8\">int main(int argc, char* argv[]) { /*\n  ... */ }</p>\n</blockquote>\n<p>The text in the C++ standard is more or less identical. <em>Please</em> note that \"Program startup\" in the text is a <em>subclause</em> to hosted environment.</p>\n<p>This means:</p>\n<ul>\n<li><p><strong>If your program is running in a hostless environment (your program is an embedded system or an operative system), it may have any return type. void main() is most common.</strong></p></li>\n<li><p><strong>If your program is running in a hosted environment (on top of an OS), main() <em>must</em> return int, and may have additional parameters.</strong></p></li>\n</ul>\n", "OwnerUserId": "584518", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:10:50.647", "Id": "5296593", "Score": "38", "CreationDate": "2011-03-14T09:08:16.513", "LastActivityDate": "2015-07-07T11:08:18.077"}, "5297323": {"ParentId": "5296163", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>There are 3 situations:</p>\n<ol>\n<li>free standing implementation</li>\n<li>conforming hosted implementation with no extensions</li>\n<li>hosted implementation with extensions</li>\n</ol>\n<p><strong>In 1.</strong> there need not be a function named <code>main</code> at all. The implementation defines how a program starts.</p>\n<p><strong>In 2.</strong> a program starts executing at a function named <code>main</code>, defined with one of the following 2 'signatures': <code>int main(void)</code> or <code>int main(int argc, char **argv)</code></p>\n<p><strong>In 3.</strong> a program starts executing at a function named <code>main</code>, defined as allowed by the implementation. This function must return <code>int</code> to be Standard conformant. For example: <code>int main(int argc, char **argv, char **envp)</code> or <code>int main(wchar_t**)</code>. Note that programs which use these forms are not necessarily valid in all hosted implementations (and may become invalid for the original author if the implementation changes).</p>\n", "OwnerUserId": "25324", "LastEditorUserId": "827263", "LastEditDate": "2012-02-20T10:08:43.450", "Id": "5297323", "Score": "3", "CreationDate": "2011-03-14T10:25:22.617", "LastActivityDate": "2012-02-20T10:08:43.450"}, "bq_ids": {"n4140": {"so_5296163_14831226_1": {"section_id": 7146, "quality": 0.7894736842105263, "length": 15}, "so_5296163_14831226_0": {"section_id": 7145, "quality": 0.8235294117647058, "length": 14}}, "n3337": {"so_5296163_14831226_1": {"section_id": 6890, "quality": 0.7894736842105263, "length": 15}, "so_5296163_14831226_0": {"section_id": 6889, "quality": 0.8235294117647058, "length": 14}}, "n4659": {"so_5296163_14831226_1": {"section_id": 8647, "quality": 0.7894736842105263, "length": 15}, "so_5296163_14831226_0": {"section_id": 8646, "quality": 0.7058823529411765, "length": 12}}}, "14831226": {"ParentId": "5296163", "PostTypeId": "2", "CommentCount": "11", "Body": "<p><a href=\"https://stackoverflow.com/a/5296593/560648\">Lundin</a> is correct about C, but in C++ the wording is sufficiently distinct to make a difference:</p>\n<blockquote>\n<p id=\"so_5296163_14831226_0\"><code>[C++11: 3.6.1/1]:</code> A program shall contain a global function called <code>main</code>, which is the designated start of the program. <strong>It is implementation-defined whether a program in a freestanding environment is required to define a <code>main</code> function.</strong></p>\n<p id=\"so_5296163_14831226_1\"><code>[C++11: 3.6.1/2]:</code> An implementation shall not predefine the <code>main</code> function. This function shall not be overloaded. <strong>It shall have a return type of type <code>int</code></strong>, but otherwise its type is implementation-defined <em>[..]</em></p>\n</blockquote>\n<p>The first bolded passage does not override or cancel out the second.</p>\n<p><strong><code>main</code> returns <code>int</code> in C++, always.</strong></p>\n", "OwnerUserId": "560648", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T10:29:50.780", "Id": "14831226", "Score": "7", "CreationDate": "2013-02-12T11:14:35.443", "LastActivityDate": "2013-02-12T11:14:35.443"}});