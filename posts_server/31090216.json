post_cb({"bq_ids": {"n4140": {"so_31090216_31090325_0": {"length": 9, "quality": 0.6428571428571429, "section_id": 5991}}, "n3337": {"so_31090216_31090325_0": {"length": 9, "quality": 0.6428571428571429, "section_id": 5759}}, "n4659": {"so_31090216_31090325_0": {"length": 9, "quality": 0.6428571428571429, "section_id": 7491}}}, "31091049": {"Id": "31091049", "PostTypeId": "2", "Body": "<p>i think this example will help:</p>\n<pre><code>int number;\ndouble rate;\nnumber =2;\nrate=1.0345;\nnumber=rate;\ncout&lt;&lt;number&lt;&lt;endl; //implicit conversion //narrowing conersion //gives 1 //tried to store floating point number in integer data type variable\nrate=2 // implicit conversion //widening conversion // value actually assigned is 2.0 //we are not ordering compiler to convert double data type to integer. it is automatically understood by compiler.\n\nnumber=(int)rate; //explicit conversion //we are ordering compiler here to take value from rate and convert it to integer and assign it to number. //we are specific here.\n</code></pre>\n", "LastActivityDate": "2015-06-27T16:41:55.680", "CommentCount": "0", "CreationDate": "2015-06-27T16:41:55.680", "ParentId": "31090216", "Score": "0", "OwnerUserId": "5056367"}, "31090325": {"Id": "31090325", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_31090216_31090325_0\"><code>[C++14: 5.2.2/4]:</code> When a function is called, each parameter (8.3.5) shall be initialized (8.5, 12.8, 12.1) with its corresponding argument. <em>[..]</em></p>\n</blockquote>\n<p><code>Money</code> can obviously be initialized from <code>double</code> because you wrote a constructor to do exactly that.</p>\n<p>It is, however, possible to prohibit such implicit conversions by adding the <code>explicit</code> keyword to that constructor:</p>\n<pre><code>explicit Money(double _amount) : amount{ _amount } {};\n</code></pre>\n<p>Now you'd have to explicitly convert (or \"cast\") the <code>double</code> to a <code>Money</code> in the function call expression:</p>\n<pre><code>display_balance(static_cast&lt;Money&gt;(49.95));\n</code></pre>\n", "LastEditorUserId": "560648", "LastActivityDate": "2015-06-27T15:38:37.823", "Score": "3", "CreationDate": "2015-06-27T15:26:03.750", "ParentId": "31090216", "CommentCount": "1", "OwnerUserId": "560648", "LastEditDate": "2015-06-27T15:38:37.823"}, "31090216": {"ViewCount": "72", "Body": "<p>At first I saw a program on MSDN.</p>\n<p>For example:</p>\n<pre><code>#include &lt;iostream&gt;\n\nclass Money\n{\npublic:\n    Money() : amount{ 0.0 } {};\n    Money(double _amount) : amount{ _amount } {};\n\n    double amount;\n};\n\nvoid display_balance(const Money balance)\n{\n    std::cout &lt;&lt; \"The balance is: \" &lt;&lt; balance.amount &lt;&lt; std::endl;\n}\n\nint main(int argc, char* argv[])\n{\n    Money payable{ 79.99 };\n\n    display_balance(payable);\n    display_balance(49.95);\n    display_balance(9.99f);\n\n    return 0;\n}\n</code></pre>\n<p>The explanation for it is:</p>\n<blockquote>\n<p id=\"so_31090216_31090216_0\">On the second call to display_balance, the type of the argument, a <strong>double</strong> with a value of 49.95, is not the function expects, so a conversion is needed.</p>\n</blockquote>\n<p>There is a conversion from the type of argument\u2014 <code>double</code> to <code>Money</code>, and what I don't know about it is why the implicit conversion happened.</p>\n<p>Think about it more deeply, we assume that a function needs a type of object as a parameter, and the constructor of the object needs one parameter, when call to the function, whether can provide this parameter.</p>\n", "Title": "C++: implicit conversions", "CreationDate": "2015-06-27T15:14:18.173", "LastActivityDate": "2015-06-27T23:05:19.567", "CommentCount": "2", "LastEditDate": "2015-06-27T23:05:19.567", "PostTypeId": "1", "LastEditorDisplayName": "user4445569", "OwnerDisplayName": "user4445569", "Id": "31090216", "Score": "0", "Tags": "<c++>", "AnswerCount": "2"}});