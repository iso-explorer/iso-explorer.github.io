post_cb({"14036418": {"Id": "14036418", "PostTypeId": "2", "Body": "<p>Since compilers got smart enough to decide which functions would benefit from being <em>inlined</em> and which wouldn't, <code>inline</code> only real effect is to change the function <em>linkage</em>. By default, <code>inline</code> functions have <em>external linkage</em>.</p>\n<p>The <code>inline</code> <em>keyword</em> is just a suggestion to the compiler. The compiler could decide to <em>inline</em> functions not declared <code>inline</code>, or to not <em>inline</em> functions declared <code>inline</code>.</p>\n", "LastEditorUserId": "927034", "LastActivityDate": "2012-12-26T05:49:51.570", "Score": "6", "CreationDate": "2012-12-26T05:40:43.877", "ParentId": "14036366", "CommentCount": "4", "OwnerUserId": "927034", "LastEditDate": "2012-12-26T05:49:51.570"}, "14036366": {"ViewCount": "4315", "Body": "<blockquote>\n<p id=\"so_14036366_14036366_0\"><strong>Possible Duplicate:</strong><br>\n<a href=\"https://stackoverflow.com/questions/145838/benefits-of-inline-functions-in-c\">Benefits of inline functions in C++?</a> </br></p>\n</blockquote>\n<p>What is the difference between </p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint exforsys(int);\nvoid main( )\n{\n        int x;\n        cout &lt;&lt; \"n Enter the Input Value: \";\n        cin&gt;&gt;x;\n        cout &lt;&lt; \"n The Output is: \" &lt;&lt; exforsys(x);\n}\n\nint exforsys(int x1)\n{\n        return 5*x1;\n}\n</code></pre>\n<p>and</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint exforsys(int);\nvoid main( )\n{\n        int x;\n        cout &lt;&lt; \"n Enter the Input Value: \";\n        cin&gt;&gt;x;\n        cout &lt;&lt; \"n The Output is: \" &lt;&lt; exforsys(x);\n}\n\ninline int exforsys(int x1)\n{\n        return 5*x1;\n}\n</code></pre>\n<p>these two definition is work same for a code I guess, then what's the advantage of using the inline function definition?</p>\n", "Title": "What is the purpose of an \"inline\" function definition?", "CreationDate": "2012-12-26T05:32:37.037", "Id": "14036366", "CommentCount": "2", "LastEditDate": "2017-05-23T12:22:40.470", "PostTypeId": "1", "LastEditorDisplayName": "user166390", "LastEditorUserId": "-1", "LastActivityDate": "2016-06-29T15:46:57.640", "ClosedDate": "2012-12-26T06:59:02.337", "Score": "4", "OwnerUserId": "1532043", "Tags": "<c++>", "AnswerCount": "6"}, "14036422": {"Id": "14036422", "PostTypeId": "2", "Body": "<p>The <code>inline</code> keyword <strong>suggests</strong> to the compiler that the function be inlined.\nNormally, when a function is called, the current contents of the registers are <code>pushed</code> (copied) to memory. Once the function returns, they are <code>popped</code> (copied back).</p>\n<p>This takes a little time, though normally so little that whatever the function does dwarfs the function call overhead. Occasionally when a very small function is called thousands of times per second in a tight loop, the combined function call overhead of all those function calls can add up. In these cases, a programmer can suggest to the compiler that, rather than call the function in that loop, that the contents of the function be put in the loop directly. This avoids the overhead.</p>\n<p>Some compilers, notably Microsoft Visual C++, ignore the <code>inline</code> keyword. Microsoft believes their optimizer is smart enough to know when it should inline a function. For those cases when you <em>really</em> want a function to be inlined, Microsoft and other vendors sometimes provide a proprietary, \"no, I really mean it!\" keyword. In the case if Visual C++, it's <code>__forceinline</code> if I remember right. Even this, however, still can be ignored if the optimizer feels very strongly that inlining that function is a bad idea.</p>\n", "LastActivityDate": "2012-12-26T05:41:42.717", "CommentCount": "0", "CreationDate": "2012-12-26T05:41:42.717", "ParentId": "14036366", "Score": "10", "OwnerUserId": "161816"}, "14036393": {"Id": "14036393", "PostTypeId": "2", "Body": "<p>When you call an inline function, instead of transferring the execution control to this function, the preprocessor replaces all such function calls with the actual function code. In C++, when you define a function inside the class, it's inline by default provided that it doesn't have loop statements.</p>\n", "LastEditorUserId": "6489306", "LastActivityDate": "2016-06-29T15:46:57.640", "Score": "0", "CreationDate": "2012-12-26T05:36:26.517", "ParentId": "14036366", "CommentCount": "1", "OwnerUserId": "1773303", "LastEditDate": "2016-06-29T15:46:57.640"}, "bq_ids": {"n4140": {"so_14036366_14036459_0": {"length": 22, "quality": 0.9565217391304348, "section_id": 5402}, "so_14036366_14036459_1": {"length": 19, "quality": 0.95, "section_id": 5402}}, "n3337": {"so_14036366_14036459_0": {"length": 22, "quality": 0.9565217391304348, "section_id": 5197}, "so_14036366_14036459_1": {"length": 19, "quality": 0.95, "section_id": 5197}}, "n4659": {"so_14036366_14036459_0": {"length": 22, "quality": 0.9565217391304348, "section_id": 6849}, "so_14036366_14036459_1": {"length": 18, "quality": 0.9, "section_id": 6849}}}, "14036381": {"Id": "14036381", "PostTypeId": "2", "Body": "<p>Well, code for inline functions are placed at its usage during compile time. Hence, its a bit fast in execution and source code length remain small.</p>\n", "LastActivityDate": "2012-12-26T05:34:56.123", "CommentCount": "0", "CreationDate": "2012-12-26T05:34:56.123", "ParentId": "14036366", "Score": "0", "OwnerUserId": "1242054"}, "14036402": {"Id": "14036402", "PostTypeId": "2", "Body": "<p>An inline function call is literally replaced with the inline function itself.</p>\n<p>This explains it elegantly and simply.  <a href=\"http://www.cprogramming.com/tutorial/lesson13.html\" rel=\"nofollow\">http://www.cprogramming.com/tutorial/lesson13.html</a></p>\n<p>The wikipedia article is also helpful.  <a href=\"http://en.wikipedia.org/wiki/Inline_function\" rel=\"nofollow\">http://en.wikipedia.org/wiki/Inline_function</a></p>\n", "LastActivityDate": "2012-12-26T05:38:01.720", "CommentCount": "0", "CreationDate": "2012-12-26T05:38:01.720", "ParentId": "14036366", "Score": "0", "OwnerUserId": "230468"}, "14036459": {"Id": "14036459", "PostTypeId": "2", "Body": "<p>From <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1905.pdf\" rel=\"nofollow\">C++ language specification</a> 7.1.2</p>\n<blockquote>\n<p id=\"so_14036366_14036459_0\">A function declaration with an inline specifier declares an inline\n  function. The inline specifier indicates to the implementation that\n  inline substitution of the function body at the point of call is to be\n  preferred to the usual function call mechanism.</p>\n</blockquote>\n<p>It means the implementation can replace the method calls with the method body, thus avoiding the overhead which normally happens in normall method calling process. But it is not compulsory to do the inline replacing ,and it is implementation specific. </p>\n<blockquote>\n<p id=\"so_14036366_14036459_1\">An implementation is not required to perform this inline substitution\n  at the point of call; however, even if this inline substitution is\n  omitted, the other rules for inline functions defined by 7.1.2 shall\n  still be respected</p>\n</blockquote>\n", "LastEditorUserId": "640731", "LastActivityDate": "2012-12-26T05:52:02.153", "Score": "0", "CreationDate": "2012-12-26T05:46:57.107", "ParentId": "14036366", "CommentCount": "0", "OwnerUserId": "640731", "LastEditDate": "2012-12-26T05:52:02.153"}});