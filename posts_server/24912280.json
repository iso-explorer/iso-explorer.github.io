post_cb({"25657097": {"LastActivityDate": "2014-09-04T09:25:27.893", "CommentCount": "4", "Body": "<p>This appears to be caused by <a href=\"http://www.boost.org/doc/libs/1_56_0/boost/multiprecision/number.hpp\">the default parameters of <code>mpz_int</code>'s constructors</a> (<code>mpz_int</code> is a typedef for a particular instantiation of <code>boost::multiprecision::number</code>), which are used for SFINAE (for instance, given a <code>template &lt;class V&gt;</code> constructor taking a <code>const V &amp;</code>, select one constructor if <code>V</code> satisfies criteria X and another constructor if <code>V</code> satisfies criteria Y).</p>\n<p>A small repro is:</p>\n<pre><code>#include &lt;type_traits&gt;\nstruct foo {\n    template&lt;class T&gt;\n    foo(T , typename std::enable_if&lt;std::is_integral&lt;T&gt;::value&gt;::type * = nullptr) { }\n    template&lt;class T&gt;\n    foo(T , typename std::enable_if&lt;std::is_floating_point&lt;T&gt;::value&gt;::type * = nullptr) { }\n};\n\nstruct bar : foo {\n    using foo::foo;\n};\n\nint main() { }\n</code></pre>\n<p>This <a href=\"http://coliru.stacked-crooked.com/a/f9703f181ac1e51a\">compiles in clang but not g++</a>, producing the same error. (It's worth noting that while clang compiles the repro code above, <a href=\"http://coliru.stacked-crooked.com/a/a3f56a7bbaf09118\">it doesn't actually work</a> if you try to use the inherited constructor with a single argument, which is almost equally as bad. You can make it work in clang, however, by <a href=\"http://coliru.stacked-crooked.com/a/80558c342172739c\">explicitly supplying the second parameter</a>.)</p>\n<p>We can even <a href=\"http://coliru.stacked-crooked.com/a/d095b92c618bc504\">skip the templateness for <code>foo</code>'s constructors</a> by simply using instead:</p>\n<pre><code>struct foo {\n    foo(double, int = 0) { }\n    foo(double, double = 0) { }\n};\n</code></pre>\n<p>and still get the same result - error in g++, OK in clang.</p>\n<p>Now, the question is whether this construct should in fact be accepted according to the standard. Unfortunately, there is no clear answer. \u00a712.9 [class.inhctor]/p1 says that</p>\n<blockquote>\n<p id=\"so_24912280_25657097_0\">A <em>using-declaration</em> (7.3.3) that names a constructor implicitly\n  declares a set of <em>inheriting constructors</em>. The <em>candidate set of\n  inherited constructors</em> from the class <code>X</code> named in the\n  <em>using-declaration</em> consists of actual constructors and notional constructors that result from the transformation of defaulted\n  parameters as follows:</p>\n<ul>\n<li>all non-template constructors of <code>X</code>, and</li>\n<li>for each non-template constructor of <code>X</code> that has at least one parameter with a default argument, the set of constructors that\n  results from omitting any ellipsis parameter specification and\n  successively omitting parameters with a default argument from the end\n  of the <em>parameter-type-list</em>, and </li>\n<li>all constructor templates of <code>X</code>, and</li>\n<li>for each constructor template of <code>X</code> that has at least one parameter with a default argument, the set of constructor templates that results\n  from omitting any ellipsis parameter specification and successively\n  omitting parameters with a default argument from the end of the\n  <em>parameter-type-list</em>.</li>\n</ul>\n</blockquote>\n<p>The problem is that the standard doesn't actually specify what happens if this successively-omitting-parameters-with-default-arguments procedure result in two constructors with the same signature. (Note that with both template constructors of <code>foo</code> above, omitting the parameter with default argument gives the signature <code>template&lt;class T&gt; foo(T);</code>.) While paragraph 7 has a note that says</p>\n<blockquote>\n<p id=\"so_24912280_25657097_1\">If two <em>using-declarations</em> declare inheriting constructors with the\n  same signatures, the program is ill-formed (9.2, 13.1), because an\n  implicitly-declared constructor introduced by the first\n  <em>using-declaration</em> is not a user-declared constructor and thus does not preclude another declaration of a constructor with the same\n  signature by a subsequent <em>using-declaration</em>.</p>\n</blockquote>\n<p>here we have only one <em>using-declaration</em>, so the note doesn't apply, and, while duplicate declarations are indeed prohibited, it is arguable that the reference to a <em>set</em> in paragraph 1 means that duplicate signatures will simply be treated as one, so that a single <em>using-declaration</em> will not introduce a duplicate declaration.</p>\n<p>This issue is in fact the subject of two defect reports against the standard: <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_active.html#1645\">CWG 1645</a> and <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_active.html#1941\">CWG 1941</a>, and it is unclear how those defect reports will be resolved. One possibility, noted in the 2013 note in CWG issue 1645, is to make such inherited constructors (that came from multiple base constructors) deleted, so that they cause an error only when used. An alternative approach suggested in CWG issue 1941 is to make inheriting constructors behave like other base class functions introduced into the derived class.</p>\n", "CreationDate": "2014-09-04T04:02:35.427", "LastEditDate": "2014-09-04T09:25:27.893", "ParentId": "24912280", "Id": "25657097", "LastEditorUserId": "2756719", "PostTypeId": "2", "Score": "9", "OwnerUserId": "2756719"}, "24912280": {"CreationDate": "2014-07-23T13:49:01.553", "ViewCount": "424", "FavoriteCount": "4", "Id": "24912280", "AcceptedAnswerId": "25657097", "Score": "13", "Title": "Constructor inheritance failure with boost::multiprecision::mpz_int", "LastEditorUserId": "1364752", "CommentCount": "8", "Body": "<p>I tried to create a class deriving from <code>boost::multiprecision::mpz_int</code> and to have it inherit the base class constructors:</p>\n<pre class=\"lang-cpp prettyprint-override\"><code>#include &lt;boost/multiprecision/gmp.hpp&gt;\n\nusing namespace boost::multiprecision;\n\nstruct Integer:\n    mpz_int\n{\n    using mpz_int::mpz_int;\n};\n</code></pre>\n<p>g++ 4.9.0 gives me <a href=\"http://coliru.stacked-crooked.com/a/4c42cf20f7dd08dd\">the following error</a>:</p>\n<pre class=\"lang-none prettyprint-override\"><code>main.cpp:8:20: error: 'template&lt;class tag, class Arg1, class Arg2, class Arg3, class Arg4&gt; Integer::Integer(const boost::multiprecision::detail::expression&lt;tag, Arg1, Arg2, Arg3, Arg4&gt;&amp;)' inherited from 'boost::multiprecision::number&lt;boost::multiprecision::backends::gmp_int&gt;'\n     using mpz_int::mpz_int;\n                    ^\nmain.cpp:8:20: error: conflicts with version inherited from 'boost::multiprecision::number&lt;boost::multiprecision::backends::gmp_int&gt;'\nmain.cpp:8:20: error: 'template&lt;class Other, boost::multiprecision::expression_template_option ET&gt; Integer::Integer(const boost::multiprecision::number&lt;Backend, ExpressionTemplates&gt;&amp;)' inherited from 'boost::multiprecision::number&lt;boost::multiprecision::backends::gmp_int&gt;'\nmain.cpp:8:20: error: conflicts with version inherited from 'boost::multiprecision::number&lt;boost::multiprecision::backends::gmp_int&gt;'\nmain.cpp:8:20: error: 'template&lt;class Other, boost::multiprecision::expression_template_option ET&gt; Integer::Integer(const boost::multiprecision::number&lt;Backend, ExpressionTemplates&gt;&amp;)' inherited from 'boost::multiprecision::number&lt;boost::multiprecision::backends::gmp_int&gt;'\nmain.cpp:8:20: error: conflicts with version inherited from 'boost::multiprecision::number&lt;boost::multiprecision::backends::gmp_int&gt;'\nmain.cpp:8:20: error: 'template&lt;class V&gt; Integer::Integer(const V&amp;)' inherited from 'boost::multiprecision::number&lt;boost::multiprecision::backends::gmp_int&gt;'\nmain.cpp:8:20: error: conflicts with version inherited from 'boost::multiprecision::number&lt;boost::multiprecision::backends::gmp_int&gt;'\nmain.cpp:8:20: error: 'template&lt;class V&gt; constexpr Integer::Integer(const V&amp;)' inherited from 'boost::multiprecision::number&lt;boost::multiprecision::backends::gmp_int&gt;'\nmain.cpp:8:20: error: conflicts with version inherited from 'boost::multiprecision::number&lt;boost::multiprecision::backends::gmp_int&gt;'\nmain.cpp:8:20: error: 'template&lt;class V&gt; Integer::Integer(const V&amp;)' inherited from 'boost::multiprecision::number&lt;boost::multiprecision::backends::gmp_int&gt;'\nmain.cpp:8:20: error: conflicts with version inherited from 'boost::multiprecision::number&lt;boost::multiprecision::backends::gmp_int&gt;'\n</code></pre>\n<p>The truth is that I have no idea why this is happening. The following workaround achieves what I want to do:</p>\n<pre class=\"lang-cpp prettyprint-override\"><code>struct Integer:\n    mpz_int\n{\n    template&lt;typename... Args&gt;\n    Integer(Args&amp;&amp;... args):\n        mpz_int(std::forward&lt;Args&gt;(args)...)\n    {}\n};\n</code></pre>\n<p>Can anybody explain why the first example produces an error? I thought that inheriting the base class constructors and forwarding values to them did roughly the same thing. I guess I was wrong, but I'm still interested in knowing the difference.</p>\n<p><strong>EDIT:</strong> I will make things clear. I don't care <em>at all</em> whether there are better methods to achieve this (there are tons). The only thing I asked is why constructor inheritance failed in this case. Is it due to a compiler bug or to some obscure rule somewhere in the standard?</p>\n", "Tags": "<c++><c++11><boost><language-lawyer><inheriting-constructors>", "LastEditDate": "2014-09-01T12:35:49.700", "LastActivityDate": "2014-09-04T09:25:27.893", "PostTypeId": "1", "AnswerCount": "1", "OwnerUserId": "1364752"}, "bq_ids": {"n4140": {"so_24912280_25657097_1": {"length": 26, "quality": 0.9629629629629629, "section_id": 488}, "so_24912280_25657097_0": {"length": 23, "quality": 0.8518518518518519, "section_id": 482}}, "n3337": {"so_24912280_25657097_1": {"length": 26, "quality": 0.9629629629629629, "section_id": 479}, "so_24912280_25657097_0": {"length": 23, "quality": 0.8518518518518519, "section_id": 473}}}});