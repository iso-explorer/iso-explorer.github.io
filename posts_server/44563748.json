post_cb({"bq_ids": {"n4140": {"so_44563748_44564204_0": {"length": 26, "quality": 0.9285714285714286, "section_id": 5999}, "so_44563748_44564204_1": {"length": 17, "quality": 0.8947368421052632, "section_id": 6076}}, "n3337": {"so_44563748_44564204_0": {"length": 26, "quality": 0.9285714285714286, "section_id": 5767}, "so_44563748_44564204_1": {"length": 17, "quality": 0.8947368421052632, "section_id": 5844}}, "n4659": {"so_44563748_44564204_1": {"length": 17, "quality": 0.8947368421052632, "section_id": 7572}}}, "44564204": {"Id": "44564204", "PostTypeId": "2", "Body": "<p><code>int(123)</code> is an expression with using explicit type conversion.</p>\n<p>From the C++ Standard (5.2.3 Explicit type conversion (<strong>functional notation</strong>))</p>\n<blockquote>\n<p id=\"so_44563748_44564204_0\">1 A simple-type-specifier (7.1.6.2) or typename-specifier (14.6)\n  followed by a parenthesized expression-list constructs a value of the\n  specified type given the expression list. If the expression list is a\n  single expression, the type conversion expression is equivalent (in\n  definedness, and if defined in meaning) to the corresponding cast\n  expression (5.4)...</p>\n</blockquote>\n<p>As for the <code>sizeof</code> operator then (C++ STandard, 5.3.3 Sizeof) </p>\n<blockquote>\n<p id=\"so_44563748_44564204_1\">1 The sizeof operator yields the number of bytes in the object\n  representation of its operand. The operand is either <strong>an expression,\n  which is an unevaluated</strong> operand (Clause 5), or a parenthesized\n  type-id...</p>\n</blockquote>\n<p>Thus in this expression</p>\n<pre><code>sizeof(int(123))\n</code></pre>\n<p>there is used explicit conversion of an integer literal of type <code>int</code> to the type <code>int</code> (that does not make great sense) and the sizeof operator is applied to the expression that yields the result of the type <code>size_t</code>.</p>\n<p>In fact this expression is equivalent to</p>\n<pre><code>sizeof(int)\n</code></pre>\n<p>or in this particular case to</p>\n<pre><code>sizeof(123)\n</code></pre>\n<p>because the integer literal <code>123</code> has the type <code>int</code>.</p>\n<p>The form of the explicit conversion of the functional notation is valid only in C++. In C such a notation of conversion is absent.</p>\n", "LastEditorUserId": "2877241", "LastActivityDate": "2017-06-15T09:51:51.717", "Score": "3", "CreationDate": "2017-06-15T09:43:58.353", "ParentId": "44563748", "CommentCount": "0", "OwnerUserId": "2877241", "LastEditDate": "2017-06-15T09:51:51.717"}, "44563748": {"ViewCount": "193", "Body": "<p>I'm surprised why the following code would compile:</p>\n<pre><code>#include &lt;stdio.h&gt;\n\nint main(){\n    printf(\"%lu\",sizeof(int(123)));\n    return 0;\n}\n</code></pre>\n<p>the output is 4, what is the meaning of (123) here?</p>\n<p>And I found this line of code can compile with g++, but not gcc, what is the reason?</p>\n", "AcceptedAnswerId": "44564204", "Title": "What does sizeof(int(123)) mean?", "CreationDate": "2017-06-15T09:23:39.690", "Id": "44563748", "CommentCount": "4", "LastEditDate": "2017-06-20T02:42:05.973", "PostTypeId": "1", "LastEditorUserId": "2877241", "LastActivityDate": "2017-06-20T02:42:05.973", "Score": "2", "OwnerUserId": "5263291", "Tags": "<c++><syntax><casting><sizeof>", "AnswerCount": "3"}, "44563838": {"Id": "44563838", "PostTypeId": "2", "Body": "<p>The <code>sizeof</code> is a <em>keyword</em>, but it is a compile-time operator that determines the size, in bytes, of a variable or data type.</p>\n<p>The <code>sizeof</code> operator can be used to get the size of classes, structures, unions and any other <em>user defined</em> data type.</p>\n<p>The syntax of using <code>sizeof</code> is as follows:</p>\n<p><code>sizeof</code> (data type)\nWhere data type is the desired data type including classes, structures, unions and any other user defined data type.</p>\n<p>Try the following example to understand all the sizeof operator available in C++. Copy and paste following C++ program in test.cpp file and compile and run this program.</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main() {\n   cout &lt;&lt; \"Size of char : \" &lt;&lt; sizeof(char) &lt;&lt; endl;\n   cout &lt;&lt; \"Size of int : \" &lt;&lt; sizeof(int) &lt;&lt; endl;\n   cout &lt;&lt; \"Size of short int : \" &lt;&lt; sizeof(short int) &lt;&lt; endl;\n   cout &lt;&lt; \"Size of long int : \" &lt;&lt; sizeof(long int) &lt;&lt; endl;\n   cout &lt;&lt; \"Size of float : \" &lt;&lt; sizeof(float) &lt;&lt; endl;\n   cout &lt;&lt; \"Size of double : \" &lt;&lt; sizeof(double) &lt;&lt; endl;\n   cout &lt;&lt; \"Size of wchar_t : \" &lt;&lt; sizeof(wchar_t) &lt;&lt; endl;\n   return 0;\n}\n</code></pre>\n<p>When the above code is compiled and executed, it produces the following result, which can vary from machine to machine:</p>\n<pre><code>Size of char : 1\nSize of int : 4\nSize of short int : 2\nSize of long int : 4\nSize of float : 4\nSize of double : 8\nSize of wchar_t : 4\n</code></pre>\n", "LastActivityDate": "2017-06-15T09:27:13.230", "CommentCount": "0", "CreationDate": "2017-06-15T09:27:13.230", "ParentId": "44563748", "Score": "4", "OwnerUserId": "8164116"}, "44563774": {"Id": "44563774", "PostTypeId": "2", "Body": "<p>This is C++, the <code>int(123)</code> is a function-style cast to <code>int</code>. It's of course pointless, since <code>123</code> is an <code>int</code>-typed literal anyway.</p>\n<p>Function-style casts are not part of C, which is why it won't build with a C compiler.</p>\n<p>To answer more of the question, what happens is that the operator <code>sizeof</code> is compile-time evaluated to the size (in <code>char</code>s) of its argument. The argument is of type <code>int</code>, so you output the size of <code>int</code> on your platform which is 4.</p>\n<p>You could also have used just a plain <code>sizeof 123</code>, which would build in C, or <code>sizeof (int)</code> to be explicit about the type instead of deriving it from a value. Note that the parentheses are part of the argument (the type name is written as a C-style cast), <code>sizeof</code> is not a function.</p>\n", "LastEditorUserId": "28169", "LastActivityDate": "2017-06-15T09:26:48.517", "Score": "7", "CreationDate": "2017-06-15T09:24:36.580", "ParentId": "44563748", "CommentCount": "1", "OwnerUserId": "28169", "LastEditDate": "2017-06-15T09:26:48.517"}});