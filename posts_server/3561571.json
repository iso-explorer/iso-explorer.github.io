post_cb({"bq_ids": {"n4140": {"so_3561571_3561752_0": {"length": 24, "quality": 0.8888888888888888, "section_id": 3335}}, "n3337": {"so_3561571_3561752_0": {"length": 24, "quality": 0.8888888888888888, "section_id": 3205}}, "n4659": {"so_3561571_3561752_0": {"length": 24, "quality": 0.8888888888888888, "section_id": 4102}}}, "3561752": {"Id": "3561752", "PostTypeId": "2", "Body": "<p>The wording in the standard (\u00a715.1/2) is (emphasis mine):</p>\n<blockquote>\n<p id=\"so_3561571_3561752_0\">When an exception is thrown, control is transferred to the <em>nearest handler with a matching type</em> (15.3); \u201cnearest\u201d means the handler for which the compound-statement, ctor-initializer, or function-body <em>following the try keyword was most recently entered by the thread of control and not yet exited.</em></p>\n</blockquote>\n<p>When has a try block \"exited\"? According to the grammar (\u00a715/1), try blocks end with a <em>sequence</em> of handlers, so the block ends when the last handler ends. In other words:</p>\n<pre><code>try // &lt;- start of try block\n{\n}\ncatch (whatever) // &lt;- first handler\n{\n}\n// ... more handlers\ncatch (whatever_again) // &lt;- last handler\n{\n} // &lt;- end of try block\n</code></pre>\n<p>So yes, your code is fine. When re-thrown, the nearest try block has a matching handler (namely <code>catch (...)</code>), so that handler is entered.</p>\n", "LastActivityDate": "2010-08-24T23:17:14.657", "CommentCount": "3", "CreationDate": "2010-08-24T23:17:14.657", "ParentId": "3561571", "Score": "4", "OwnerUserId": "87234"}, "3561586": {"Id": "3561586", "PostTypeId": "2", "Body": "<p>Your original code was fine. You caught different exception types and called a function that would log a message and rethrow. The <code>throw</code> statement is not required to appear directly inside the corresponding <code>catch</code> block. If you call one of those \"note\" functions and you're <em>not</em> currently handling an exception, though, then your program will call <code>terminate()</code>.</p>\n<p>Your new code is also fine. It's OK to catch everything and then call another function that rethrows to go to a more specific handler. That's <a href=\"http://www.parashift.com/c++-faq-lite/exceptions.html#faq-17.9\" rel=\"nofollow noreferrer\">the <em>exception dispatcher</em> idiom described in the C++ FAQ</a>. It looks a little peculiar to rethrow the exception <em>after</em> the dispatching block has finished, but if that same <code>throw</code> statement had occurred after <code>noteError</code> returned (inside the original <code>catch</code> block) instead of where it is now, then it would be perfectly ordinary; it's demonstrated in the standard, \u00a715.1/6.</p>\n", "LastEditorUserId": "33732", "LastActivityDate": "2010-08-25T15:55:17.660", "Score": "6", "CreationDate": "2010-08-24T22:42:57.163", "ParentId": "3561571", "CommentCount": "1", "OwnerUserId": "33732", "LastEditDate": "2010-08-25T15:55:17.660"}, "3561571": {"ViewCount": "1244", "Body": "<p>If I have a code like the following:</p>\n<pre><code>try {\n  doSomething();\n} catch (...) {\n  noteError();\n}\n\nvoid noteError() {\n  try {\n    throw;\n  } catch (std::exception &amp;err) {\n    std::cerr &lt;&lt; \"Note known error here: \" &lt;&lt; err.what();\n  } catch (...) {\n    std::cerr &lt;&lt; \"Note unknown error here.\";\n  }\n  throw;\n}\n</code></pre>\n<p>Will the original exceptions get thrown from both places inside the lower frame of noteError()?</p>\n", "AcceptedAnswerId": "3561752", "Title": "Will C++ throw with no arguments work inside another frame to rethrow an exception?", "CreationDate": "2010-08-24T22:40:07.933", "Id": "3561571", "CommentCount": "4", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2010-08-25T20:16:35.157", "LastEditorUserId": "115751", "LastActivityDate": "2010-08-25T20:16:35.157", "Score": "5", "OwnerUserId": "115751", "Tags": "<c++><exception><rethrow>", "AnswerCount": "2"}});