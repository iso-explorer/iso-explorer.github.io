post_cb({"bq_ids": {"n4140": {"so_14592215_14592233_0": {"length": 17, "quality": 0.9444444444444444, "section_id": 707}, "so_14592215_14592233_1": {"length": 15, "quality": 0.9375, "section_id": 5560}}, "n3337": {"so_14592215_14592233_0": {"length": 17, "quality": 0.9444444444444444, "section_id": 697}, "so_14592215_14592233_1": {"length": 15, "quality": 0.9375, "section_id": 5342}}, "n4659": {"so_14592215_14592233_0": {"length": 17, "quality": 0.9444444444444444, "section_id": 736}, "so_14592215_14592233_1": {"length": 15, "quality": 0.9375, "section_id": 7007}}}, "14592233": {"Id": "14592233", "PostTypeId": "2", "Body": "<p>No, because of the STL container and iterator requirements:</p>\n<p><strong>23.2.1 General container requirements [container.requirements.general]</strong></p>\n<blockquote>\n<p id=\"so_14592215_14592233_0\">6 begin() returns an iterator referring to the \ufb01rst element in the\n  container. end() returns an iterator which is the past-the-end value\n  for the container. If the container is empty, then begin() == end();</p>\n</blockquote>\n<p><strong>24.2.1 In general [iterator.requirements.general]</strong> </p>\n<blockquote>\n<p id=\"so_14592215_14592233_1\">6 An iterator j is called reachable from an iterator i if and only if\n  there is a \ufb01nite sequence of applications of the expression ++i that\n  makes i == j. If j is reachable from i, they refer to elements of the\n  same sequence.</p>\n</blockquote>\n<p>The equality of <code>begin()</code> and <code>end()</code> for empty containers means that <code>begin()</code> and <code>end()</code> need to be part of the same container objects, and hence <code>end()</code> cannot be a static member of a container class. Note also that -except for forward iterators- applying <code>operator--</code> on <code>end()</code> would be impossible to resolve with a static <code>end()</code> iterator.</p>\n", "LastEditorUserId": "819272", "LastActivityDate": "2013-01-29T22:13:17.557", "Score": "6", "CreationDate": "2013-01-29T21:02:08.637", "ParentId": "14592215", "CommentCount": "11", "LastEditDate": "2013-01-29T22:13:17.557", "OwnerUserId": "819272"}, "14592463": {"Id": "14592463", "PostTypeId": "2", "Body": "<p>In general, no, that is not portable. It may work by coincidence on some platform.</p>\n<p>There are end-iterators that <em>can</em> be re-used for different ranges, such as the default-constructed istream_iterator:</p>\n<pre><code>ifstream a(\"foo.txt\");\nifstream b(\"bar.txt\");\nistream_iterator&lt;string&gt; end;\nistream_iterator&lt;string&gt; ia( a);\nistream_iterator&lt;string&gt; ib( b);\n// from here on both [ia, end&gt; and [ib, end&gt; are valid ranges.\n</code></pre>\n", "LastActivityDate": "2013-01-29T21:16:38.900", "Score": "2", "CreationDate": "2013-01-29T21:16:38.900", "ParentId": "14592215", "CommentCount": "0", "OwnerUserId": "1150249"}, "14593111": {"Id": "14593111", "PostTypeId": "2", "Body": "<p>Try it yourself:</p>\n<pre><code>#include &lt;map&gt;\n#include &lt;iostream&gt;\nusing namespace std;\nmap&lt;int,int&gt; m1;\nmap&lt;int,int&gt; m2;\n\nint main() {\n  cout&lt;&lt;(m1.end() == m2.end())&lt;&lt;endl;\n}\n</code></pre>\n<p><a href=\"http://ideone.com/o18DtQ\" rel=\"nofollow\">http://ideone.com/o18DtQ</a></p>\n<blockquote>\n<p id=\"so_14592215_14593111_0\">output:</p>\n<pre><code>0\n</code></pre>\n</blockquote>\n", "LastEditorUserId": "214671", "LastActivityDate": "2013-01-29T22:21:36.343", "Score": "0", "CreationDate": "2013-01-29T22:18:28.707", "ParentId": "14592215", "CommentCount": "0", "LastEditDate": "2013-01-29T22:21:36.343", "OwnerUserId": "1221660"}, "14592215": {"ViewCount": "349", "Body": "<p>Given a particular stl collection in C++, is the <code>end()</code> value equivalent for all instances of  the same templatization?  In other words, will the following work for all stl containers and circumstances (not just for std::map)?</p>\n<pre><code>std::map&lt;Key, Value&gt; foo(int seed);\n\nstd::map&lt;Key, Value&gt; instance1 = foo(1);\nstd::map&lt;Key, Value&gt; instance2 = foo(2);\nstd::map&lt;Key, Value&gt;::iterator itr = instance1.begin();\nstd::map&lt;Key, Value&gt;::iterator endItr = instance2.end(); // Comes from other collection!\n\nfor (; itr != endItr; ++itr) {\n  // Do something on each key value pair...\n}\n</code></pre>\n", "AcceptedAnswerId": "14592233", "Title": "Are all end() iterators equivalent for a collection type?", "CreationDate": "2013-01-29T21:01:14.390", "Id": "14592215", "CommentCount": "5", "LastEditDate": "2013-01-29T21:27:43.577", "PostTypeId": "1", "LastEditorUserId": "819272", "LastActivityDate": "2013-01-29T22:21:36.343", "Score": "5", "OwnerUserId": "115751", "Tags": "<c++><stl><iterator><containers><language-lawyer>", "AnswerCount": "3"}});