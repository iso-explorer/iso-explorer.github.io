post_cb({"bq_ids": {"n4140": {"so_8367459_8367533_0": {"length": 14, "quality": 1.0, "section_id": 3355}}, "n3337": {"so_8367459_8367533_0": {"length": 14, "quality": 1.0, "section_id": 3225}}, "n4659": {"so_8367459_8367533_0": {"length": 14, "quality": 1.0, "section_id": 4122}}}, "8367533": {"Id": "8367533", "PostTypeId": "2", "Body": "<p>I don't think Herb Sutter is actually saying that it won't compile. He is just explaining the consequences of what the standard has to say about the situation (15.3.10):</p>\n<blockquote>\n<p id=\"so_8367459_8367533_0\">Referring to any non-static member or base class of an object in the\n  handler for a function-try-block of a constructor or destructor for\n  that object results in <strong>undefined behavior</strong>.</p>\n</blockquote>\n", "LastActivityDate": "2011-12-03T12:08:34.283", "CommentCount": "1", "CreationDate": "2011-12-03T12:08:34.283", "ParentId": "8367459", "Score": "2", "OwnerUserId": "155693"}, "8367518": {"Id": "8367518", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_8367459_8367518_0\">Assuming this quote, the following code should not compile...</p>\n</blockquote>\n<p>Well, he didn't say they would never compile. If anything, I interpreted the quote to mean \"doing this is undefined\". Undefined behavior is allowed to have any result -- up to and including compiling successfully, and doing surprising things later on.</p>\n", "LastActivityDate": "2011-12-03T12:06:17.463", "CommentCount": "2", "CreationDate": "2011-12-03T12:06:17.463", "ParentId": "8367459", "Score": "1", "OwnerUserId": "75170"}, "8367459": {"ViewCount": "164", "Body": "<p>According to Herb Sutter the code below wouldn't compile. See this site <a href=\"http://www.gotw.ca/gotw/066.htm\" rel=\"nofollow\">http://www.gotw.ca/gotw/066.htm</a> from where I've extracted the following text, regarding <code>function-try-blocks</code> :</p>\n<blockquote>\n<p id=\"so_8367459_8367459_0\"><strong>Toward Some Morals</strong> </p>\n<p id=\"so_8367459_8367459_1\">Incidentally, this also means that the only (repeat\n  only) possible use for a constructor function-try-block is to\n  translate an exception thrown from a base or member subobject. That's\n  Moral #1. Next, Moral #2 says that destructor function-try-blocks are\n  entirely usele--</p>\n<p id=\"so_8367459_8367459_2\">\"--But wait!\" I hear someone interrupting from the middle of the room.\n  \"I don't agree with Moral #1. I can think of another possible use for\n  constructor function-try-blocks, namely to free resources allocated in\n  the initializer list or in the constructor body!\"</p>\n<p id=\"so_8367459_8367459_3\">Sorry, nope. After all, remember that once you get into your\n  constructor try-block's handler, any local variables in the\n  constructor body are also already out of scope, and you are guaranteed\n  that no base subobjects or member objects exist any more, period. You\n  can't even refer to their names. Either the parts of your object were\n  never constructed, or those that were constructed have already been\n  destroyed. So you can't be cleaning up anything that relies on\n  referring to a base or member of the class (and anyway, that's what\n  the base and member destructors are for, right?).</p>\n</blockquote>\n<p>Assuming this quote, the following code should not compile, as the object <code>cat</code> has already been destructed by the time the process runs into the <code>catch</code> clause. But it does, at least with VSC2008.</p>\n<pre><code>class Cat\n{\n    public:\n    Cat() { cout &lt;&lt; \"Cat()\" &lt;&lt; endl; }\n    ~Cat() { cout &lt;&lt; \"~Cat()\" &lt;&lt; endl; }\n};\n\nclass Dog\n{\n    public:\n    Dog() { cout &lt;&lt; \"Dog()\" &lt;&lt; endl; throw 1; }\n    ~Dog() { cout &lt;&lt; \"~Dog()\" &lt;&lt; endl; }\n};\n\n\nclass UseResources\n{\n    class Cat *cat;\n    class Dog dog;\n\n    public:\n    UseResources();\n    ~UseResources() { delete cat; cat = NULL; cout &lt;&lt; \"~UseResources()\" &lt;&lt; endl; }\n};\n\nUseResources::UseResources() try : cat(new Cat), dog() { cout &lt;&lt; \"UseResources()\" &lt;&lt; endl; } catch(...)\n{\n    delete cat;\n    throw;\n}\n</code></pre>\n", "AcceptedAnswerId": "8367533", "Title": "According to a knowledgeable author within the C++ community, the code shown below should not compile. Is he wrong?", "CreationDate": "2011-12-03T11:55:03.917", "Id": "8367459", "CommentCount": "0", "LastEditDate": "2011-12-03T12:01:52.163", "PostTypeId": "1", "LastEditorUserId": "1042389", "LastActivityDate": "2011-12-03T12:08:34.283", "Score": "1", "OwnerUserId": "1042389", "Tags": "<c++><exception><exception-handling><function-try-block>", "AnswerCount": "3"}, "8367504": {"Id": "8367504", "PostTypeId": "2", "Body": "<p>Compilers are different, and also there are switches that determine how much the compiler will be strict with the code it's compiling. this code will certainly cause errors (seg faults, etc). try to enable all the switches of the compiler to force it to find this.</p>\n", "LastActivityDate": "2011-12-03T12:04:04.540", "CommentCount": "4", "CreationDate": "2011-12-03T12:04:04.540", "ParentId": "8367459", "Score": "0", "OwnerUserId": "877235"}});