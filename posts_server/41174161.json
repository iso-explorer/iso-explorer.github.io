post_cb({"41174338": {"ParentId": "41174161", "CommentCount": "1", "Body": "<p>Standard section 14.7.1/11 says</p>\n<blockquote>\n<p id=\"so_41174161_41174338_0\">It is unspecified whether or not an implementation implicitly instantiates a virtual member function of a class template if the virtual member function would not otherwise be instantiated.</p>\n</blockquote>\n<p>However, for a typical vtable implementation, instantiating any constructor of the class requires a vtable for the class to exist, which must contain a pointer to the specialization's virtual function definition.  So in practice the virtual function will probably be instantiated.</p>\n", "OwnerUserId": "459640", "PostTypeId": "2", "Id": "41174338", "Score": "5", "CreationDate": "2016-12-15T22:26:14.043", "LastActivityDate": "2016-12-15T22:26:14.043"}, "41174161": {"CommentCount": "1", "ViewCount": "80", "CreationDate": "2016-12-15T22:12:31.167", "LastActivityDate": "2016-12-15T22:48:14.847", "Title": "Is a virtual function of a template class implicitly instantiated?", "AcceptedAnswerId": "41174338", "PostTypeId": "1", "Id": "41174161", "Score": "4", "Body": "<p>Consider the following code. Is it guaranteed that <code>Derived&lt;int&gt;::foo()</code> will be instantiated? <code>foo()</code> is virtual and is called by a non-virtual function of the base class.</p>\n<pre><code>#include &lt;iostream&gt;\n\nclass Base\n{\npublic:\n    void bar() { foo(); }\nprivate:\n    virtual void foo() = 0;\n};\n\ntemplate &lt;typename T&gt; class Derived: public Base\n{\npublic:\n    Derived(T t_) : t(t_) {}\nprivate:\n    void foo() override { std::cout &lt;&lt; t; }\n    T t;\n};\n\nDerived&lt;int&gt; make_obj()\n{\n    return Derived&lt;int&gt;(7);\n}\n</code></pre>\n", "Tags": "<c++><templates><template-instantiation>", "OwnerUserId": "6136013", "AnswerCount": "2"}, "41174604": {"ParentId": "41174161", "CommentCount": "0", "Body": "<p>Virtual table will always be instantiated for a class hierarchy, however, in your case it will be compiler dependent whether the foo gets actually initialized on a class creation since the class itself is initialized on a stack and never used polymorphocally. The virtual table will be meaningless in your case.</p>\n", "OwnerUserId": "5498449", "PostTypeId": "2", "Id": "41174604", "Score": "0", "CreationDate": "2016-12-15T22:48:14.847", "LastActivityDate": "2016-12-15T22:48:14.847"}, "bq_ids": {"n4140": {"so_41174161_41174338_0": {"section_id": 243, "quality": 1.0, "length": 16}}, "n3337": {"so_41174161_41174338_0": {"section_id": 235, "quality": 1.0, "length": 16}}, "n4659": {"so_41174161_41174338_0": {"section_id": 250, "quality": 1.0, "length": 16}}}});