post_cb({"5625782": {"ParentId": "5625600", "PostTypeId": "2", "CommentCount": "12", "CreationDate": "2011-04-11T18:32:25.780", "Score": "75", "LastEditorUserId": "153285", "LastEditDate": "2011-04-12T12:49:40.150", "Id": "5625782", "OwnerUserId": "153285", "Body": "<p>Every instance of that oddity is paired with a case of a regular single ellipsis.</p>\n<pre><code>  template&lt;typename _Res, typename... _ArgTypes&gt;\n    struct _Weak_result_type_impl&lt;_Res(_ArgTypes...)&gt;\n    { typedef _Res result_type; };\n\n  template&lt;typename _Res, typename... _ArgTypes&gt;\n    struct _Weak_result_type_impl&lt;_Res(_ArgTypes......)&gt;\n    { typedef _Res result_type; };\n\n  template&lt;typename _Res, typename... _ArgTypes&gt;\n    struct _Weak_result_type_impl&lt;_Res(_ArgTypes...) const&gt;\n    { typedef _Res result_type; };\n\n  template&lt;typename _Res, typename... _ArgTypes&gt;\n    struct _Weak_result_type_impl&lt;_Res(_ArgTypes......) const&gt;\n    { typedef _Res result_type; };\n</code></pre>\n<p>My guess is that the double ellipsis is similar in meaning to <code>_ArgTypes..., ...</code>, i.e. a variadic template expansion followed by a C-style varargs list.</p>\n<p><a href=\"http://ideone.com/8TQAa\" rel=\"noreferrer\">Here's a test</a> supporting that theory\u2026 I think we have a new winner for worst pseudo-operator ever.</p>\n<p><strong>Edit:</strong> This does appear to be conformant. \u00a78.3.5/3 describes one way to form the parameter list as</p>\n<blockquote>\n<p id=\"so_5625600_5625782_0\">parameter-declaration-list<sub>opt</sub> ...<sub>opt</sub></p>\n</blockquote>\n<p>So the double-ellipsis is formed by a parameter-declaration-list ending with a parameter pack, followed by another ellipsis.</p>\n<p>The comma is purely optional; \u00a78.3.5/4 does say</p>\n<blockquote>\n<p id=\"so_5625600_5625782_1\">Where syntactically correct and where \u201c...\u201d is not part of an abstract-declarator, \u201c, ...\u201d is synonymous with \u201c...\u201d.</p>\n</blockquote>\n<p>This <em>is</em> within an abstract-declarator, <strong>[edit]</strong> but Johannes makes a good point that they are referring to an abstract-declarator within a parameter-declaration. I wonder why they didn't say \"part of a parameter-declaration,\" and why that sentence isn't just an informative note\u2026</p>\n<p>Furthermore, <code>va_begin()</code> in <code>&lt;cstdarg&gt;</code> requires a parameter before the varargs list, so the prototype <code>f(...)</code> specifically allowed by C++ is useless. Cross-referencing with C99, it is illegal in plain C. So, this is most bizarre.</p>\n<p><strong>Usage note</strong></p>\n<p>By request, <a href=\"http://ideone.com/SwySs\" rel=\"noreferrer\">here is a demonstration</a> of the double ellipsis:</p>\n<pre><code>#include &lt;cstdio&gt;\n#include &lt;string&gt;\n\ntemplate&lt; typename T &gt;\nT const &amp;printf_helper( T const &amp;x )\n    { return x; }\n\nchar const *printf_helper( std::string const &amp;x )\n    { return x.c_str(); }\n\ntemplate&lt; typename ... Req, typename ... Given &gt;\nint wrap_printf( int (*fn)( Req... ... ), Given ... args ) {\n    return fn( printf_helper( args ) ... );\n}\n\nint main() {\n    wrap_printf( &amp;std::printf, \"Hello %s\\n\", std::string( \"world!\" ) );\n    wrap_printf( &amp;std::fprintf, stderr, std::string( \"Error %d\" ), 5 );\n}\n</code></pre>\n", "LastActivityDate": "2011-04-12T12:49:40.150"}, "37467674": {"ParentId": "5625600", "CommentCount": "0", "CreationDate": "2016-05-26T17:40:50.587", "OwnerUserId": "6385640", "PostTypeId": "2", "Id": "37467674", "Score": "0", "Body": "<p>on vs2015 separating comma is essential in the template version:</p>\n<pre><code>    template &lt;typename T, typename ... U&gt;\n    struct X&lt;T(U...,...)&gt; {};// this line is the important one\n</code></pre>\n<p>an example instantiation is:</p>\n<pre><code>    X&lt;int(int...)&gt; my_va_func;\n</code></pre>\n<p>regards,\nFM.</p>\n", "LastActivityDate": "2016-05-26T17:40:50.587"}, "bq_ids": {"n4140": {"so_5625600_5625782_1": {"section_id": 3240, "quality": 1.0, "length": 7}}, "n3337": {"so_5625600_5625782_1": {"section_id": 3113, "quality": 1.0, "length": 7}}, "n4659": {"so_5625600_5625782_1": {"section_id": 3996, "quality": 1.0, "length": 7}}}, "5625600": {"CommentCount": "5", "AcceptedAnswerId": "5625782", "PostTypeId": "1", "LastEditorUserId": "2712726", "CreationDate": "2011-04-11T18:15:07.850", "LastActivityDate": "2016-05-26T17:40:50.587", "LastEditDate": "2013-10-20T17:20:29.393", "ViewCount": "6478", "FavoriteCount": "30", "Title": "What is the meaning of \"... ...\" token? i.e. double ellipsis operator on parameter pack", "Id": "5625600", "Score": "104", "Body": "<p>While browsing through gcc's current implementation of new C++11 headers, I stumbled upon \"......\" token. You can check, that the following code <a href=\"http://ideone.com/rIC47\" rel=\"noreferrer\">compiles fine</a> [via ideone.com].</p>\n<pre><code>template &lt;typename T&gt;\nstruct X\n{ /* ... */ };\n\ntemplate &lt;typename T, typename ... U&gt;\nstruct X&lt;T(U......)&gt; // this line is the important one\n{ /* ... */ };\n</code></pre>\n<p>So, what is the meaning of this token?</p>\n<p>edit: Looks like SO trimmed \"......\" in question title to \"...\", I did really mean \"......\" . :)</p>\n", "Tags": "<c++><c++11><variadic-templates>", "OwnerUserId": "700253", "AnswerCount": "2"}});