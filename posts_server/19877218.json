post_cb({"bq_ids": {"n4140": {"so_19877218_19877363_0": {"length": 17, "quality": 0.9444444444444444, "section_id": 436}, "so_19877218_19877363_1": {"length": 12, "quality": 0.75, "section_id": 436}}, "n3337": {"so_19877218_19877363_0": {"length": 17, "quality": 0.9444444444444444, "section_id": 428}, "so_19877218_19877363_1": {"length": 12, "quality": 0.75, "section_id": 428}}, "n4659": {"so_19877218_19877363_0": {"length": 15, "quality": 0.8333333333333334, "section_id": 455}, "so_19877218_19877363_1": {"length": 13, "quality": 0.8125, "section_id": 455}}}, "19877363": {"Id": "19877363", "PostTypeId": "2", "Body": "<p>The Standard actually has a rule for this, in \u00a712.6.2/9:</p>\n<blockquote>\n<p id=\"so_19877218_19877363_0\">If a given non-static data member has both a brace-or-equal-initializer and a mem-initializer, the initialization specified by the mem-initializer is performed, and the non-static data member\u2019s brace-or-equal-initializer\n  is ignored. [ Example: Given</p>\n<pre><code>struct A {\nint i = /\u2217 some integer expression with side effects \u2217/ ;\nA(int arg) : i(arg) { }\n// ...\n};\n</code></pre>\n<p id=\"so_19877218_19877363_1\">the A(int) constructor will simply initialize i to the value of arg, and the side effects in i\u2019s brace-or-equal-\n  initializer will not take place. \u2014 end example ]</p>\n</blockquote>\n<p>So in the case you described, if the default constructor is called, only the initialization defined there will be performed, and <code>test</code> will be <code>1</code>.</p>\n", "LastActivityDate": "2013-11-09T14:59:18.073", "CommentCount": "0", "CreationDate": "2013-11-09T14:59:18.073", "ParentId": "19877218", "Score": "14", "OwnerUserId": "777186"}, "19877218": {"ViewCount": "221", "Body": "<p>C++11 now supports setting the value of a class member field at declaration time, like this:</p>\n<pre><code>class MyClass\n{\nprivate\n  int test = 0;\n}\n</code></pre>\n<p>If I also initialize the variable in the constructor like this:</p>\n<pre><code>class MyClass\n{\nprivate\n  int test = 0;\n\npublic:\n  MyClass() : test(1)\n  {\n  }\n}\n</code></pre>\n<p>will this cause the variable to have its value set twice, or the specification dictates that the compiler should optimise this to initialize the variable only once? If the specification doesn't dictate anything, do you know the behaviour of the famous compilers (e.g. MSVC, GCC, etc.) with respect to this?</p>\n", "AcceptedAnswerId": "19877363", "Title": "Does C++11 re-initialize initialized member fields?", "CreationDate": "2013-11-09T14:39:35.493", "Id": "19877218", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2016-04-03T00:33:38.327", "LastEditorUserId": "212378", "LastActivityDate": "2016-04-03T00:33:38.327", "Score": "7", "OwnerUserId": "196697", "Tags": "<c++><c++11>", "AnswerCount": "1"}});