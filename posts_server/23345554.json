post_cb({"23345856": {"ParentId": "23345554", "PostTypeId": "2", "CommentCount": "8", "Body": "<h3>Declaration</h3>\n<p>Declaration, generally, refers to the introduction of a new name in the program. For example, you can <em>declare</em> a new function by describing it's \"signature\":</p>\n<pre><code>void xyz();\n</code></pre>\n<p>or declare an incomplete type:</p>\n<pre><code>class klass;\nstruct ztruct;\n</code></pre>\n<p>and last but not least, to declare an object:</p>\n<pre><code>int x;\n</code></pre>\n<p>It is described, in the C++ standard, at \u00a73.1/1 as:</p>\n<blockquote>\n<p id=\"so_23345554_23345856_0\">A declaration (Clause 7) may introduce one or more names into a translation unit or redeclare names introduced by previous declarations.</p>\n</blockquote>\n<h3>Definition</h3>\n<p>A definition is a definition of a previously declared name (or it can be both definition and declaration). For example:</p>\n<pre><code>int x;\nvoid xyz() {...}\nclass klass {...};\nstruct ztruct {...};\nenum { x, y, z };\n</code></pre>\n<p>Specifically the C++ standard defines it, at \u00a73.1/1, as:</p>\n<blockquote>\n<p id=\"so_23345554_23345856_1\">A declaration is a definition unless it declares a function without specifying the function\u2019s body (8.4), it contains the extern specifier (7.1.1) or a linkage-specification25 (7.5) and neither an initializer nor a function- body, it declares a static data member in a class definition (9.2, 9.4), it is a class name declaration (9.1), it is an opaque-enum-declaration (7.2), it is a template-parameter (14.1), it is a parameter-declaration (8.3.5) in a function declarator that is not the declarator of a function-definition, or it is a typedef declaration (7.1.3), an alias-declaration (7.1.3), a using-declaration (7.3.3), a static_assert-declaration (Clause 7), an attribute- declaration (Clause 7), an empty-declaration (Clause 7), or a using-directive (7.3.4).</p>\n</blockquote>\n<h3>Initialization</h3>\n<p>Initialization refers to the \"assignment\" of a value, at construction time. For a generic object of type <code>T</code>, it's often in the form:</p>\n<pre><code>T x = i;\n</code></pre>\n<p>but in C++ it can be:</p>\n<pre><code>T x(i);\n</code></pre>\n<p>or even:</p>\n<pre><code>T x {i};\n</code></pre>\n<p>with C++11.</p>\n<h3>Conclusion</h3>\n<blockquote>\n<p id=\"so_23345554_23345856_2\">So does it mean definition equals declaration plus initialization?</p>\n</blockquote>\n<p>It depends. On what you are talking about. If you are talking about an object, for example:</p>\n<pre><code>int x;\n</code></pre>\n<p>This is a definition without initialization. The following, instead, is a definition with initialization:</p>\n<pre><code>int x = 0;\n</code></pre>\n<p>In certain context, it doesn't make sense to talk about \"initialization\", \"definition\" and \"declaration\". If you are talking about a function, for example, <em>initialization</em> does not mean much.</p>\n<p>So, the answer is <strong>no</strong>: definition does not automatically mean declaration plus initialization.</p>\n", "OwnerUserId": "493122", "LastEditorUserId": "493122", "LastEditDate": "2014-04-28T16:43:26.913", "Id": "23345856", "Score": "50", "CreationDate": "2014-04-28T16:03:45.880", "LastActivityDate": "2014-04-28T16:43:26.913"}, "23346307": {"ParentId": "23345554", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>Declaration says \"this thing exists somewhere\":</p>\n<pre><code>int foo();       // function\nextern int bar;  // variable\nstruct T\n{\n   static int baz;  // static member variable\n};\n</code></pre>\n<p>Definition says \"this thing exists here; make memory for it\":</p>\n<pre><code>int foo() {}     // function\nint bar;         // variable\nint T::baz;      // static member variable\n</code></pre>\n<p>Initialisation is optional at the point of definition for objects, and says \"here is the initial value for this thing\":</p>\n<pre><code>int bar = 0;     // variable\nint T::baz = 42; // static member variable\n</code></pre>\n<p>Sometimes it's possible at the point of declaration instead:</p>\n<pre><code>struct T\n{\n   static int baz = 42;\n};\n</code></pre>\n<p>\u2026but that's getting into more complex features.</p>\n", "OwnerUserId": "560648", "LastEditorUserId": "560648", "LastEditDate": "2016-01-06T14:08:15.407", "Id": "23346307", "Score": "18", "CreationDate": "2014-04-28T16:25:08.980", "LastActivityDate": "2016-01-06T14:08:15.407"}, "23345554": {"CommentCount": "2", "AcceptedAnswerId": "23345856", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2014-04-28T15:48:54.687", "LastActivityDate": "2016-01-06T14:08:15.407", "LastEditDate": "2017-05-23T12:10:37.807", "ViewCount": "51858", "FavoriteCount": "28", "Title": "The differences between initialize, define, declare a variable", "Id": "23345554", "Score": "41", "Body": "<p>After reading the <a href=\"https://stackoverflow.com/questions/1410563/what-is-the-difference-between-a-definition-and-a-declaration\">question</a>, I know the differences between declaration and definition. So does it mean definition equals declaration plus initialization?</p>\n", "Tags": "<c++><c><terminology>", "OwnerUserId": "2870532", "AnswerCount": "4"}, "23346104": {"ParentId": "23345554", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>For C, at least, per C11 6.7.5:</p>\n<blockquote>\n<p id=\"so_23345554_23346104_0\">A declaration specifies the interpretation and attributes of a set of\n  identifiers. A <em>definition</em> of an identifier is a declaration for that\n  identifier that:</p>\n<ul>\n<li><p id=\"so_23345554_23346104_1\">for an object, causes storage to be reserved for that object;</p></li>\n<li><p id=\"so_23345554_23346104_2\">for a function, includes the function body;</p></li>\n<li><p id=\"so_23345554_23346104_3\">for an enumeration constant, is the (only) declaration of the identifier;</p></li>\n<li><p id=\"so_23345554_23346104_4\">for a typedef name, is the first (or only) declaration of the identifier.</p></li>\n</ul>\n</blockquote>\n<p>Per C11 6.7.9.8-10:</p>\n<blockquote>\n<p id=\"so_23345554_23346104_5\">An initializer specifies the initial value stored in an object ... if\n  an object that has automatic storage is not initialized explicitly,\n  its value is indeterminate.</p>\n</blockquote>\n<p>So, broadly speaking, a declaration introduces an identifier and provides information about it. For a variable, a definition is a declaration which allocates storage for that variable.</p>\n<p>Initialization is the specification of the initial value to be stored in an object, which is not necessarily the same as the first time you explicitly <em>assign</em> a value to it. A variable has a value when you define it, whether or not you explicitly give it a value. If you don't explicitly give it a value, and the variable has automatic storage, it will have an initial value, but that value will be indeterminate. If it has static storage, it will be initialized implicitly depending on the type (e.g. pointer types get initialized to null pointers, arithmetic types get initialized to zero, and so on).</p>\n<p>So, if you define an automatic variable without specifying an initial value for it, such as:</p>\n<pre><code>int myfunc(void) {\n    int myvar;\n    ...\n</code></pre>\n<p>You are defining it (and therefore also declaring it, since definitions are declarations), but not initializing it. Therefore, definition does not equal declaration plus initialization.</p>\n", "OwnerUserId": "2399879", "LastEditorUserId": "2399879", "LastEditDate": "2014-04-28T16:21:30.710", "Id": "23346104", "Score": "3", "CreationDate": "2014-04-28T16:15:03.793", "LastActivityDate": "2014-04-28T16:21:30.710"}, "bq_ids": {"n4140": {"so_23345554_23345856_0": {"section_id": 7033, "quality": 1.0, "length": 15}, "so_23345554_23346104_2": {"section_id": 5446, "quality": 1.0, "length": 4}, "so_23345554_23345856_1": {"section_id": 7034, "quality": 0.7450980392156863, "length": 38}, "so_23345554_23346104_1": {"section_id": 5386, "quality": 0.8, "length": 4}}, "n3337": {"so_23345554_23345856_0": {"section_id": 6779, "quality": 1.0, "length": 15}, "so_23345554_23346104_2": {"section_id": 6814, "quality": 1.0, "length": 4}, "so_23345554_23345856_1": {"section_id": 6780, "quality": 0.7450980392156863, "length": 38}, "so_23345554_23346104_1": {"section_id": 5180, "quality": 0.8, "length": 4}}, "n4659": {"so_23345554_23345856_0": {"section_id": 8530, "quality": 1.0, "length": 15}, "so_23345554_23346104_2": {"section_id": 6873, "quality": 1.0, "length": 4}, "so_23345554_23345856_1": {"section_id": 8531, "quality": 0.7450980392156863, "length": 38}, "so_23345554_23346104_1": {"section_id": 6811, "quality": 0.8, "length": 4}}}, "23346172": {"ParentId": "23345554", "CommentCount": "0", "Body": "<p>\"So does it mean definition equals declaration plus initialization.\"</p>\n<p>Not necessarily, your declaration might be without any variable being initialized like:</p>\n<pre><code> void helloWorld(); //declaration or Prototype.\n\n void helloWorld()\n {\n    std::cout &lt;&lt; \"Hello World\\n\";\n } \n</code></pre>\n", "OwnerUserId": "2872163", "PostTypeId": "2", "Id": "23346172", "Score": "0", "CreationDate": "2014-04-28T16:18:12.017", "LastActivityDate": "2014-04-28T16:18:12.017"}});