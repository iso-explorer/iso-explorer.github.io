post_cb({"20574187": {"ParentId": "20574035", "CommentCount": "0", "CreationDate": "2013-12-13T19:10:53.513", "OwnerUserId": "1569246", "PostTypeId": "2", "Id": "20574187", "Score": "0", "Body": "<p>[] it's overloaded operator so code for it</p>\n<pre><code>    operator[](const key_type&amp; __k)\n    {\n       // concept requirements\n     __glibcxx_function_requires(_DefaultConstructibleConcept&lt;mapped_type&gt;)\n\n      iterator __i = lower_bound(__k);\n     // __i-&gt;first is greater than or equivalent to __k.\n      if (__i == end() || key_comp()(__k, (*__i).first))\n           __i = insert(__i, value_type(__k, mapped_type()));\n      return (*__i).second;\n   }\n</code></pre>\n<p>from here you can see that if it is empty it will be inserted</p>\n", "LastActivityDate": "2013-12-13T19:10:53.513"}, "20574126": {"ParentId": "20574035", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2013-12-13T19:07:27.917", "Score": "1", "LastEditorUserId": "1517648", "LastEditDate": "2013-12-13T19:14:50.783", "Id": "20574126", "OwnerUserId": "1517648", "Body": "<p>Yes, the last line will always insert an element, if it does not already exist.</p>\n<p>From <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf\" rel=\"nofollow\">section 23.4.4.3 of the C++ standard</a>:</p>\n<pre><code>T&amp; operator[](const key_type&amp; x);\n</code></pre>\n<blockquote id=\"so_20574035_20574126_0\">\n<ol>\n<li>Effects: If there is no key equivalent to x in the map, inserts value_type(x, T()) into the map.</li>\n</ol>\n</blockquote>\n<p>The <a href=\"http://en.cppreference.com/w/cpp/container/map/operator_at\" rel=\"nofollow\">map::[] operator</a> is defined as:</p>\n<blockquote>\n<p id=\"so_20574035_20574126_1\">Returns a reference to the value that is mapped to a key equivalent to key, performing an insertion if such key does not already exist. </p>\n</blockquote>\n", "LastActivityDate": "2013-12-13T19:14:50.783"}, "20574229": {"ParentId": "20574035", "CommentCount": "0", "CreationDate": "2013-12-13T19:13:40.260", "OwnerUserId": "3005057", "PostTypeId": "2", "Id": "20574229", "Score": "0", "Body": "<p>map's <code>operator[]</code> does the following:</p>\n<ul>\n<li>find element (key). If found return a reference to it (value&amp;).</li>\n<li>If not found, create an empty element <code>pair&lt;key,value(default value)&gt;</code> and return a reference to the value.</li>\n</ul>\n<p>The issue with operator[] is different. Some people want to use it for searching if an element exists or not. This is wrong since the map will fill up with empty elements. For searching people should use <code>map.find()</code>.</p>\n", "LastActivityDate": "2013-12-13T19:13:40.260"}, "20574035": {"CommentCount": "9", "ViewCount": "210", "CreationDate": "2013-12-13T19:01:49.593", "LastActivityDate": "2013-12-13T19:31:09.820", "Title": "C++ empty map assignment: equals vs insert", "AcceptedAnswerId": "20574126", "PostTypeId": "1", "Id": "20574035", "Score": "2", "Body": "<p>I have a friend at work who encouraged me to never assign a key/value pair into an empty map like the following:</p>\n<pre><code>int somefunc(map&lt;int, int&gt; somemap) {\n    somemap.clear();\n    somemap[12] = 42;\n}\n</code></pre>\n<p>He said that since the somemap map variable was cleared, then somemap[12] is an invalid access.  I reasoned that no C++ compiler, even when compiling in debug mode, would ever produce assembly that would unnecessarily try to access the somemap[12] on the assignment above.  That it is always the case that the last line above would be compiled to the same assembly as this line:</p>\n<p>somemap.insert(std::pair(12,42));</p>\n<p>Is that true?  Is there any reason to do assignment via insert vs. the earlier method? I prefer the earlier as it's shorter.</p>\n", "Tags": "<c++><map>", "OwnerUserId": "3100538", "AnswerCount": "6"}, "20574121": {"ParentId": "20574035", "CommentCount": "0", "CreationDate": "2013-12-13T19:07:09.330", "OwnerUserId": "1860449", "PostTypeId": "2", "Id": "20574121", "Score": "1", "Body": "<p><code>std::map</code> overrides the <a href=\"http://en.cppreference.com/w/cpp/container/map/operator_at\" rel=\"nofollow\"><code>[]</code> operator</a> to call <code>.insert</code> on non-existent keys. No problems here.</p>\n", "LastActivityDate": "2013-12-13T19:07:09.330"}, "20574266": {"ParentId": "20574035", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2013-12-13T19:15:59.130", "Score": "0", "LastEditorUserId": "391806", "LastEditDate": "2013-12-13T19:31:09.820", "Id": "20574266", "OwnerUserId": "391806", "Body": "<p>Both uses are valid with slightly different meanings:</p>\n<pre><code>somemap[12] = 42;\n</code></pre>\n<p>Will replace the existing value for somemap[12] if it exists, or insert a new value if it does not exist.</p>\n<pre><code>auto returnValue = somemap.insert&lt;std::make_pair(12, 42));\n</code></pre>\n<p>will insert a new value for somemap[12] if one does not already exist, or leave the value unchanged if there is already a mapping for 12.  You can tell if it worked like so:</p>\n<pre><code>if(returnValue.second)\n{\n   // it worked.  \n   // returnValue.first is an iterator pointing to the newly added element\n}\nelse\n{\n    // it failed.\n    // returnvalue.first is an iterator pointing to the unchanged pre-existing element.\n}\n</code></pre>\n", "LastActivityDate": "2013-12-13T19:31:09.820"}, "20574276": {"ParentId": "20574035", "CommentCount": "0", "CreationDate": "2013-12-13T19:16:47.227", "OwnerUserId": "1120273", "PostTypeId": "2", "Id": "20574276", "Score": "0", "Body": "<p>The best way is to measure. However, the library will locate the position for the key and, if it doesn't exist, add a new node with the key and a default constructed value. It then returns a reference to which the assignment is made: The library doesn't see the assigned value, i.e., it can <strong>not</strong> do the moral equivalent of</p>\n<pre><code>map.insert(std::make_pair(12, 42));\n</code></pre>\n<p>I'd be surprised if a compiler could detect that it could do this operation. For <code>int</code>s the difference doesn't really matter. For other types it shouldn't matter either, i.e., they should have an efficient default constructor.</p>\n", "LastActivityDate": "2013-12-13T19:16:47.227"}, "bq_ids": {"n4140": {"so_20574035_20574126_0": {"section_id": 1007, "quality": 0.8888888888888888, "length": 8}, "so_20574035_20574126_1": {"section_id": 763, "quality": 0.5714285714285714, "length": 8}}, "n3337": {"so_20574035_20574126_0": {"section_id": 992, "quality": 0.8888888888888888, "length": 8}, "so_20574035_20574126_1": {"section_id": 750, "quality": 0.5714285714285714, "length": 8}}, "n4659": {"so_20574035_20574126_0": {"section_id": 802, "quality": 0.5555555555555556, "length": 5}, "so_20574035_20574126_1": {"section_id": 823, "quality": 0.5714285714285714, "length": 8}}}});