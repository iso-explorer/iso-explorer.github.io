post_cb({"38128979": {"Id": "38128979", "PostTypeId": "2", "Body": "<p>Both are fine since under the covers it's all just pointer arithmetic. Taking the address of something and adding something else to it (<code>a[1</code>) is exactely the same as taking something else and adding an address to it (<code>1[a]</code>) - the final address of the object you refer to is the same. One notation is just more intuitive to humans than the other.</p>\n", "LastActivityDate": "2016-06-30T16:42:17.093", "CommentCount": "0", "CreationDate": "2016-06-30T16:42:17.093", "ParentId": "38128881", "Score": "1", "OwnerUserId": "5910058"}, "bq_ids": {"n4140": {"so_38128881_38128936_0": {"length": 32, "quality": 1.0, "section_id": 3233}}, "n3337": {"so_38128881_38128936_0": {"length": 32, "quality": 1.0, "section_id": 3106}}, "n4659": {"so_38128881_38128936_0": {"length": 32, "quality": 1.0, "section_id": 3990}}}, "38128881": {"ViewCount": "61", "Body": "<p>Why does C++ allow the following statement? </p>\n<pre><code>  int a[10] = { 0 };\n  std::cout &lt;&lt; 1[a] &lt;&lt; std::endl;\n  std::cout &lt;&lt; a[1] &lt;&lt; std::endl;\n</code></pre>\n<p>Both lines print zero and no compiler warning is generated. Shouldn't <code>1[a]</code> be illegal as <code>1</code> is not an array and <code>a</code> is not an integer type. </p>\n<p>Code example : <a href=\"http://cpp.sh/4tan\" rel=\"nofollow\">http://cpp.sh/4tan</a></p>\n", "AcceptedAnswerId": "38128936", "Title": "Why array subscription operator works both ways?", "CreationDate": "2016-06-30T16:37:18.853", "LastActivityDate": "2016-06-30T17:23:42.810", "CommentCount": "2", "FavoriteCount": "2", "PostTypeId": "1", "Tags": "<c++>", "Id": "38128881", "Score": "0", "OwnerUserId": "1022525", "ClosedDate": "2016-06-30T16:41:31.050", "AnswerCount": "2"}, "38128936": {"Id": "38128936", "PostTypeId": "2", "Body": "<p>It is because of pointer arithmetic:</p>\n<pre><code>a[1] == *(a+1) == *(1+a) == 1[a];\n</code></pre>\n<p>Quoting the standard (\u00a78.3.4; point 6):</p>\n<blockquote>\n<p id=\"so_38128881_38128936_0\">Except where it has been declared for a class, the subscript operator <code>[]</code> is interpreted in such a way that <code>E1[E2]</code> is identical to <code>*((E1)+(E2))</code>. Because of the conversion rules that apply to <code>+</code>, if <code>E1</code> is an array and <code>E2</code> an integer, then <code>E1[E2]</code> refers to the <code>E2</code>-th member of <code>E1</code>. Therefore, despite its asymmetric appearance, subscripting is a commutative operation.</p>\n</blockquote>\n<p>Note that when you write <code>a[1]</code>, the compiler interprets it as <code>*(a+1)</code>.  You are still referring the same array <code>a</code> when you write <code>1[a]</code>, so the compiler is infact still <em>doing type checking</em>.</p>\n", "LastEditorUserId": "2172854", "LastActivityDate": "2016-06-30T17:23:42.810", "Score": "4", "CreationDate": "2016-06-30T16:40:10.913", "ParentId": "38128881", "CommentCount": "5", "OwnerUserId": "2172854", "LastEditDate": "2016-06-30T17:23:42.810"}});