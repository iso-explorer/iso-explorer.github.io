post_cb({"31919260": {"ViewCount": "696", "Body": "<p>This is rejected by g++ (4.9.3 and 5.2.0), but is accepted by clang 3.5.0:</p>\n<pre><code>int main() { \n    const int ci = 0;\n    auto lambda = [ &amp;cap = ci ]() { };\n}\n</code></pre>\n<p>g++ gives <code>error: binding \u2018const int\u2019 to reference of type \u2018int&amp;\u2019 discards qualifiers</code>. It appears that g++ refuses to allow non-const references to be captured, except of course using plain old C++11 capture <code>[&amp;ci]</code>. That seems a very strange constraint, perhaps a bug in g++?</p>\n", "AcceptedAnswerId": "31919654", "Title": "g++ won't allow generalized capture of const object by reference in lambda?", "CreationDate": "2015-08-10T12:13:38.867", "Id": "31919260", "CommentCount": "2", "PostTypeId": "1", "LastActivityDate": "2015-08-10T12:45:50.957", "Score": "19", "OwnerUserId": "146041", "Tags": "<c++><lambda><c++14>", "AnswerCount": "2"}, "31919654": {"Id": "31919654", "PostTypeId": "2", "LastEditDate": "2015-08-10T12:45:50.957", "CommentCount": "5", "LastEditorUserId": "3647361", "LastActivityDate": "2015-08-10T12:45:50.957", "CreationDate": "2015-08-10T12:31:58.743", "ParentId": "31919260", "Score": "10", "Body": "<p>Your code is valid. \u00a75.1.2/11 goes</p>\n<blockquote>\n<p id=\"so_31919260_31919654_0\">An <em>init-capture</em> behaves <strong>as if it declares and explicitly captures a variable of the form <br>\u201c<code>auto</code> <em>init-capture</em> <code>;</code>\u201d</br></strong> whose declarative region is the <em>lambda-expression</em>\u2019s <em>compound-statement</em> [\u2026]</p>\n</blockquote>\n<p>Now, clearly, declaring</p>\n<pre><code>auto &amp;cap = ci;\n</code></pre>\n<p>and capturing <code>cap</code> is fine. That is,</p>\n<pre><code>int main() { \n    const int ci = 0;\n    auto &amp;cap = ci;\n    auto lambda = [&amp;cap]() { };\n}\n</code></pre>\n<p><a href=\"http://melpon.org/wandbox/permlink/Yh1Nyx4hnrNMspNe\">compiles with GCC</a>. Apart from the declarative region and lifetime of <code>cap</code>, there is no difference between this snippet and yours, thus GCC is incorrect.<br>\nThis bug has already been reported as <a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=66735\"><strong>#66735</strong></a>, with a similar example:</br></p>\n<pre><code>int x = 0;\nauto l = [&amp;rx = static_cast&lt;const int&amp;&gt;(x)] {};\n</code></pre>\n", "OwnerUserId": "3647361"}, "31919871": {"Id": "31919871", "PostTypeId": "2", "Body": "<p>This looks similar to <a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=66735\" rel=\"nofollow\">gcc bug: [C++14] lambda init-capture fails for const references</a> which says:</p>\n<blockquote>\n<p id=\"so_31919260_31919871_0\">This code fails to compile:</p>\n<pre><code>int main() {\n    int x = 0;\n    auto l = [&amp;rx = static_cast&lt;const int&amp;&gt;(x)]() {};\n}\n</code></pre>\n<p id=\"so_31919260_31919871_1\">The error message is:</p>\n<blockquote>\n<p id=\"so_31919260_31919871_4\">test.cpp:3:14: error: binding 'const int' to reference of type 'int&amp;'\n    discards qualifiers</p>\n<pre><code>auto l = [&amp;rx = static_cast&lt;const int&amp;&gt;(x)]() {\n</code></pre>\n</blockquote>\n<p id=\"so_31919260_31919871_3\">But according to [expr.prim.lambda]/11 rx should be captured as auto\n  &amp;rx = static_cast(x), that is as const int&amp;.</p>\n</blockquote>\n<p>the bug report references <em>[expr.prim.lambda]/11</em> which says:</p>\n<blockquote>\n<p id=\"so_31919260_31919871_5\">An init-capture behaves as if it declares and explicitly captures a variable of the form \u201cauto init-capture ;\u201d\n  whose declarative region is the lambda-expression\u2019s compound-statement, except that[...]</p>\n</blockquote>\n", "Score": "4", "LastActivityDate": "2015-08-10T12:41:39.183", "CreationDate": "2015-08-10T12:41:39.183", "ParentId": "31919260", "CommentCount": "1", "OwnerUserId": "1708801"}, "bq_ids": {"n4140": {"so_31919260_31919654_0": {"length": 14, "quality": 1.0, "section_id": 5970}, "so_31919260_31919871_5": {"length": 15, "quality": 1.0, "section_id": 5970}}, "n4659": {"so_31919260_31919654_0": {"length": 14, "quality": 1.0, "section_id": 7469}, "so_31919260_31919871_5": {"length": 15, "quality": 1.0, "section_id": 7469}}}});