post_cb({"bq_ids": {"n4140": {"so_22284215_22284215_0": {"length": 25, "quality": 0.9615384615384616, "section_id": 368}}, "n3337": {"so_22284215_22284215_0": {"length": 25, "quality": 0.9615384615384616, "section_id": 358}}, "n4659": {"so_22284215_22284215_0": {"length": 25, "quality": 0.9615384615384616, "section_id": 380}}}, "22284900": {"Id": "22284900", "PostTypeId": "2", "Body": "<p>I dont really know if its worth the struggle and this solution is for sure not perfect as we have to use a helper class <code>Object&lt;T&gt;</code>, but atleast it works very similiar to your requested behaviour:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;type_traits&gt;\n\ntemplate&lt;typename T&gt;\nusing Object = typename std::conditional&lt;std::is_const&lt;T&gt;::value, typename T::const_type, typename T::type&gt;::type;\n\ntemplate&lt;bool IsConst&gt;\nstruct FooHelper;\n\nstruct Foo\n{\n    typedef FooHelper&lt;false&gt; type;\n    typedef const FooHelper&lt;true&gt; const_type;\n\nprotected:\n\n    Foo(bool isConst)\n    {\n        if (isConst)\n            std::cout &lt;&lt; \"const\" &lt;&lt; std::endl;\n        else\n            std::cout &lt;&lt; \"non-const\" &lt;&lt; std::endl;\n    }\n\n};\n\ntemplate&lt;&gt;\nstruct FooHelper&lt;false&gt; : public Foo\n{\n    FooHelper() : Foo(false) {}\n};\n\ntemplate&lt;&gt;\nstruct FooHelper&lt;true&gt; : public Foo\n{\n    FooHelper() : Foo(true) {}\n};\n\nint main()\n{\n    Object&lt;Foo&gt; obj;\n    Object&lt;const Foo&gt; cobj;\n}\n</code></pre>\n", "LastActivityDate": "2014-03-09T16:38:40.007", "CommentCount": "0", "CreationDate": "2014-03-09T16:38:40.007", "ParentId": "22284215", "Score": "5", "OwnerUserId": "878307"}, "22284215": {"ViewCount": "319", "Body": "<p>Assuming two declarations:</p>\n<pre><code>const type x;  // case a\ntype y;        // case b\n</code></pre>\n<p>is it possible to detect case \"a\" or \"b\" in <code>type</code>'s constructor so that I can execute different operations?</p>\n<p>From the standard \u00a712.1/3 we have that:</p>\n<blockquote>\n<p id=\"so_22284215_22284215_0\">A constructor can be invoked for a const, volatile or const volatile object. <strong>const and volatile semantics (7.1.6.1) are not applied on an object under construction</strong>. They come into effect when the constructor for the most derived object (1.8) ends.</p>\n</blockquote>\n<p>therefore <a href=\"http://coliru.stacked-crooked.com/a/3c928c9118d7bd20\"><code>this</code> behaves like expected</a> by never being <code>const</code>-qualified at construction (otherwise how could you edit member objects in the body?). So, it seems it's not possible to use type traits on <code>this</code>.</p>\n<p>A <strong>use case</strong> for this would be the following: assuming you are working with an underlying C API that describe specific objects (in a much wider sense), taking <em>hints</em> on their future use along the lines of:</p>\n<ul>\n<li><code>STATIC</code> = will not be modified</li>\n<li><code>DYNAMIC</code> = can be modified</li>\n</ul>\n<p>one could create a wrapper around those C objects and give a <code>STATIC</code> hint on a <code>const</code> construction, and a <code>DYNAMIC</code> hint on a non const construction. Of course <code>const_cast</code> exists and could mess things up, but I'm assuming <em>sane</em> coding here :P.</p>\n<p>Am I missing something (considering also C++11 and <a href=\"https://github.com/cplusplus/draft/blob/master/papers/N3936.pdf\">C++14</a>)?</p>\n", "AcceptedAnswerId": "22284900", "Title": "Is there a way to detect construction of a const qualified object?", "CreationDate": "2014-03-09T15:36:11.223", "Id": "22284215", "CommentCount": "9", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2014-03-10T03:32:17.637", "LastEditorUserId": "168868", "LastActivityDate": "2014-03-10T03:32:17.637", "ClosedDate": "2014-03-10T10:17:24.623", "Score": "9", "OwnerUserId": "493122", "Tags": "<c++><c++11><constructor><const><c++14>", "AnswerCount": "1"}});