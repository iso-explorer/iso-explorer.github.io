post_cb({"16258962": {"ParentId": "16258601", "CommentCount": "1", "Body": "<p>Your code has undefined behaviour because you are using <code>Def_t::DEFAULT</code> without ever defining it <code>[basic.def.odr]/3</code>:</p>\n<blockquote>\n<p id=\"so_16258601_16258962_0\">Every program shall contain exactly one definition of every non-inline function or variable that is odr-used in that program; no diagnostic required.</p>\n</blockquote>\n<p>The declaration in the class definition is not a definition <code>[class.static.data]/2</code>:</p>\n<blockquote>\n<p id=\"so_16258601_16258962_1\">The declaration of a static data member in its class definition is not a definition ... . The definition for a static data member shall appear in a namespace scope enclosing the member\u2019s class definition. ...</p>\n</blockquote>\n<p>If your code still does not compile when you add a declaration for <code>Def_t::DEFAULT</code>, then this is a bug in your compiler. The definition can be added by placing the following in namespace scope:</p>\n<pre><code>template&lt;typename T, T def&gt;\nT const Def&lt;T, def&gt;::DEFAULT;\n</code></pre>\n<p>If you want this to work when <code>T</code> is not of integral or enumeration type, put the initialiser for <code>DEFAULT</code> in this namespace-scope definition rather than in the class definition.</p>\n", "OwnerUserId": "485561", "PostTypeId": "2", "Id": "16258962", "Score": "2", "CreationDate": "2013-04-28T02:33:25.150", "LastActivityDate": "2013-04-28T02:33:25.150"}, "16258601": {"CommentCount": "4", "ViewCount": "70", "CreationDate": "2013-04-28T01:24:23.987", "LastActivityDate": "2013-04-28T02:33:25.150", "Title": "Why can't a public static const variable be referenced in certain cases without a cast?", "AcceptedAnswerId": "16258962", "PostTypeId": "1", "Id": "16258601", "Score": "2", "Body": "<p>The following code illustrates a problem I have run into where it fails to compile with an undefined reference to Def::DEFAULT;</p>\n<p>However if I comment out the 2nd line in main it will compile and run fine, I am able to \"see\" the value assigned to DEFAULT either through a cast to int or assigning to the Val class int data member directly.</p>\n<pre><code>template &lt;typename T, T def&gt;\nclass Def {\n public:\n    static const T DEFAULT = def;\n    enum {DEFAULT_ENUM = DEFAULT};\n};\n\n\nclass Val {\n public:\n    Val&amp; operator=(const int &amp;val_in) {\n        val = val_in;\n        return *this;\n    }\n\n    int val;\n};\n\n\ntypedef Def&lt;int, 10&gt; Def_t;\n\nVal test_val;\n\nint main()\n{\n    test_val     =       Def_t::DEFAULT_ENUM;  // works\n    test_val     =       Def_t::DEFAULT;       // fails to compile\n    test_val     = (int) Def_t::DEFAULT;       // works\n    test_val.val =       Def_t::DEFAULT;       // works\n}\n</code></pre>\n", "Tags": "<c++>", "OwnerUserId": "2324509", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_16258601_16258962_0": {"section_id": 7041, "quality": 1.0, "length": 12}, "so_16258601_16258962_1": {"section_id": 5907, "quality": 0.9047619047619048, "length": 19}}, "n3337": {"so_16258601_16258962_0": {"section_id": 6786, "quality": 1.0, "length": 12}, "so_16258601_16258962_1": {"section_id": 5679, "quality": 0.9047619047619048, "length": 19}}, "n4659": {"so_16258601_16258962_0": {"section_id": 8538, "quality": 1.0, "length": 12}, "so_16258601_16258962_1": {"section_id": 7389, "quality": 0.9047619047619048, "length": 19}}}});