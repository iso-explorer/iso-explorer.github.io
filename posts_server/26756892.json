post_cb({"26756892": {"CommentCount": "3", "ViewCount": "928", "PostTypeId": "1", "LastEditorUserId": "2093132", "CreationDate": "2014-11-05T12:10:37.247", "LastActivityDate": "2014-11-05T14:03:16.213", "Title": "Writing to file results in empty file", "AcceptedAnswerId": "26757232", "LastEditDate": "2014-11-05T12:26:54.147", "Id": "26756892", "Score": "-1", "Body": "<p>I wrote a small program that opens a file, builds a vector from every line in the file and then have the user able to add/remove from the file. The program first removes from the vector, then rebuilds the file based on the vector. Here's the code that rebuilds the file (fileName is a member variable with the full name of the text file, ex. \"test.txt\":</p>\n<pre><code>bool rebuildFile() {\n    if (remove(fileName.c_str()) == 0) {    // remove the old file\n        ofstream newFile(fileName);         // create new file with same name\n        newFile.open(fileName, ios::app);   // open to append to end of file\n        if (newFile.is_open()) {            \n            newFile &lt;&lt; fileHeader &lt;&lt; endl;  // add the first header line\n            for (int i = 0; i &lt; myVector.size(); i++) {  // loop through vector, adding strings to file\n                newFile &lt;&lt; myVector[i] &lt;&lt; endl;   // I used \"\\n\" instead of endl, but both give same results\n            }\n            newFile.close();\n            return true;     // success\n        }\n    }\n    return false;            // failure\n}\n</code></pre>\n<p>After this function exits, the file is completely empty. So it clearly creates a new file, but then the writing part is an issue, and I can't figure out why. I read other posts where some had issues where they had the file open in Notepad/Notepad++, but I've always made sure to close that specific file before running the program. I'm not sure if the ios::app flag is causing an issue with the loop, but the documentation seems clear that it just points to the end of the file every time you output to it, so I don't think the issue is there. Any thoughts?</p>\n<p>EDIT:</p>\n<p>Apparently you can't append to an empty file... This new code works, but I'm not sure if there's a \"cleaner\" way to add to a file in two different ways without opening and closing it twice using different flags.</p>\n<p>new code:</p>\n<pre><code>bool rebuildFile() {\n    if (remove(fileName.c_str()) == 0) {\n        std::ofstream newFile(fileName);\n        newFile.open(fileName);\n        if (newFile.is_open()) {\n            newFile &lt;&lt; fileHeader &lt;&lt; endl;\n            newFile.close();\n        }\n        newFile.open(fileName, std::ofstream::out | std::ofstream::app);\n        if (newFile.is_open()) {\n            for (int i = 0; i &lt; myVector.size(); i++) {\n                newFile &lt;&lt; myVector[i] &lt;&lt; endl;\n            }\n            newFile.close();\n            return true;\n        }\n    }\n    return false;\n}\n</code></pre>\n", "Tags": "<c++><file-io>", "OwnerUserId": "2093132", "AnswerCount": "2"}, "26759126": {"ParentId": "26756892", "CommentCount": "0", "Body": "<pre><code>ofstream newFile(fileName);  \n</code></pre>\n<p>doesn't just create the file, it opens it too. And that means you can't open it again.</p>\n<p>I don't see a reason to remove the file, re-create it - truncating if it exists - and open it, write a little, close the file, open it <em>again</em> but for appending, and then write to it some more.  </p>\n<p>Plus, if you run out of luck, there's an opportunity for a different process to modify (or delete) the file between the first <code>close</code> and the second <code>open</code>, which is in general not a good thing.</p>\n<p>This snippet should work:</p>\n<pre><code>bool rebuildFile()\n{\n   std::ofstream newFile(fileName);\n   if (newFile)\n   {\n      newFile &lt;&lt; fileHeader &lt;&lt; endl;\n      for (int i = 0; i &lt; myVector.size(); i++) {\n         newFile &lt;&lt; myVector[i] &lt;&lt; endl;\n      }\n   }\n   return newFile;\n}\n</code></pre>\n<p>(Files are closed automatically, if needed, by <code>ofstream</code>'s destructor.)</p>\n", "OwnerUserId": "404970", "PostTypeId": "2", "Id": "26759126", "Score": "0", "CreationDate": "2014-11-05T14:03:16.213", "LastActivityDate": "2014-11-05T14:03:16.213"}, "bq_ids": {"n4140": {"so_26756892_26757232_1": {"section_id": 2480, "quality": 0.8421052631578947, "length": 16}, "so_26756892_26757232_2": {"section_id": 2425, "quality": 1.0, "length": 5}, "so_26756892_26757232_3": {"section_id": 2426, "quality": 0.8333333333333334, "length": 5}, "so_26756892_26757232_5": {"section_id": 2425, "quality": 0.9285714285714286, "length": 13}, "so_26756892_26757232_0": {"section_id": 2479, "quality": 1.0, "length": 6}}, "n3337": {"so_26756892_26757232_1": {"section_id": 2465, "quality": 0.8421052631578947, "length": 16}, "so_26756892_26757232_2": {"section_id": 2410, "quality": 1.0, "length": 5}, "so_26756892_26757232_3": {"section_id": 2411, "quality": 0.8333333333333334, "length": 5}, "so_26756892_26757232_5": {"section_id": 2410, "quality": 0.9285714285714286, "length": 13}, "so_26756892_26757232_0": {"section_id": 2464, "quality": 1.0, "length": 6}}, "n4659": {"so_26756892_26757232_1": {"section_id": 2742, "quality": 0.8421052631578947, "length": 16}, "so_26756892_26757232_2": {"section_id": 2700, "quality": 0.8, "length": 4}, "so_26756892_26757232_3": {"section_id": 2701, "quality": 0.8333333333333334, "length": 5}, "so_26756892_26757232_5": {"section_id": 2700, "quality": 0.9285714285714286, "length": 13}, "so_26756892_26757232_0": {"section_id": 2755, "quality": 1.0, "length": 6}}}, "26757232": {"ParentId": "26756892", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Trying to call <code>open</code> on an already open file stream puts the stream in a failed state.</p>\n<p>Just change</p>\n<pre><code>ofstream newFile(fileName);         // create new file with same name\n    newFile.open(fileName, ios::app); \n</code></pre>\n<p>to</p>\n<pre><code>ofstream newFile(fileName, ios::app); \n</code></pre>\n<hr>\n<p>[ofstream.members]</p>\n<blockquote>\n<p id=\"so_26756892_26757232_0\"><code>void open(const char* s, ios_base::openmode mode = ios_base::out);</code></p>\n<p id=\"so_26756892_26757232_1\">E\ufb00ects: Calls <code>rdbuf()-&gt;open(s, mode | ios_base::out)</code>. If that\n  function does <strong>not return a null pointer</strong> calls <code>clear()</code>, <strong>otherwise calls\n  <code>setstate(failbit)</code></strong> (which may throw <code>ios_base::failure</code> (27.5.5.4)).</p>\n</blockquote>\n<p>[\ufb01lebuf.members] </p>\n<blockquote>\n<p id=\"so_26756892_26757232_2\"><code>basic_filebuf&lt;charT,traits&gt;* open(const char* s, ios_base::openmode mode);</code></p>\n<p id=\"so_26756892_26757232_3\">E\ufb00ects: If <code>is_open() != false</code>, <strong>returns a null pointer</strong>. [...]</p>\n<p id=\"so_26756892_26757232_4\"><code>bool is_open() const;</code> </p>\n<p id=\"so_26756892_26757232_5\">Returns: <strong>true if a previous call to <code>open</code> succeeded</strong> (returned a\n  non-null value) and there has been <strong>no intervening call to close</strong>.</p>\n</blockquote>\n</hr>", "OwnerUserId": "657267", "LastEditorUserId": "657267", "LastEditDate": "2014-11-05T12:38:10.797", "Id": "26757232", "Score": "3", "CreationDate": "2014-11-05T12:28:57.190", "LastActivityDate": "2014-11-05T12:38:10.797"}});