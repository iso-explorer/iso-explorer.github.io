post_cb({"16984714": {"Id": "16984714", "PostTypeId": "2", "Body": "<p>A copy constructor, since is a initialization, not an assignment.</p>\n<p>From standard C++98 12.8 [class.copy] p1:</p>\n<blockquote>\n<p id=\"so_16984353_16984714_0\">A class object can be copied in two ways, by initialization (12.1,\n  8.5), including for function argument passing (5.2.2) and for function value return (6.6.3), and by assignment (5.17). Conceptually, these\n  two operations are implemented by a copy constructor (12.1) and copy\n  assignment operator (13.5.3).</p>\n</blockquote>\n<p>The redaction looks a bit ambiguous here. May be better the redaction of C++11 (take care of semicolon):</p>\n<blockquote>\n<p id=\"so_16984353_16984714_1\">A class object can be copied or moved in two ways: by initialization\n  (12.1, 8.5), including for function argument passing (5.2.2) and for\n  function value return (6.6.3)<strong>;</strong> and by assignment (5.17). Conceptually,\n  these two operations are implemented by a copy/move constructor (12.1)\n  and copy/move assignment operator (13.5.3).</p>\n</blockquote>\n", "LastActivityDate": "2013-06-07T12:54:24.373", "CommentCount": "0", "CreationDate": "2013-06-07T12:54:24.373", "ParentId": "16984353", "Score": "1", "OwnerUserId": "2095459"}, "bq_ids": {"n4140": {"so_16984353_16984714_0": {"length": 22, "quality": 0.7333333333333333, "section_id": 450}, "so_16984353_16984714_1": {"length": 25, "quality": 0.8064516129032258, "section_id": 450}}, "n3337": {"so_16984353_16984714_0": {"length": 22, "quality": 0.7333333333333333, "section_id": 441}, "so_16984353_16984714_1": {"length": 25, "quality": 0.8064516129032258, "section_id": 441}}, "n4659": {"so_16984353_16984714_0": {"length": 22, "quality": 0.7333333333333333, "section_id": 472}, "so_16984353_16984714_1": {"length": 25, "quality": 0.8064516129032258, "section_id": 472}}}, "16985251": {"Id": "16985251", "PostTypeId": "2", "Body": "<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nclass A\n{\n\npublic:\n\n    A()\n    {\n        cout &lt;&lt; \"(A) default constructor\"&lt;&lt; endl;\n    }\n\n    A(const A&amp; a)\n    {\n        cout &lt;&lt; \"(A) copy constructor\" &lt;&lt; endl;\n    }\n\n    A&amp; operator=(const A&amp; a)\n    {\n        cout &lt;&lt; \"(A) operator=\" &lt;&lt; endl;\n    }\n\n};\n\nclass B : public A\n{\n\npublic:\n\n    B()\n    {\n        cout &lt;&lt; \"(B) default constructor\" &lt;&lt; endl;\n    }\n\n\n};\n\nint main()\n{\n\n    A a1;\n    A a2 = a1;\n    A a3(a1);\n\n    cout&lt;&lt;\"*******\"&lt;&lt;endl;\n\n    B b1;\n\n    cout&lt;&lt;\"*******\"&lt;&lt;endl;\n\n    B b4;\n    A a4 = b4;\n\n    return 0;\n}\n\n--output:--\n(A) default constructor\n(A) copy constructor\n(A) copy constructor\n*******\n(A) default constructor\n(B) default constructor\n*******\n(A) default constructor\n(B) default constructor\n(A) copy constructor\n</code></pre>\n", "LastEditorUserId": "926143", "LastActivityDate": "2013-06-07T13:34:34.737", "Score": "1", "CreationDate": "2013-06-07T13:22:58.540", "ParentId": "16984353", "CommentCount": "0", "OwnerUserId": "926143", "LastEditDate": "2013-06-07T13:34:34.737"}, "16984353": {"ViewCount": "200", "Body": "<pre><code>B j\nA i = j\n</code></pre>\n<p>while B is derived from A.\nmy question is this:\nwhat c'tors will be called? A's default c'tor and then A's operator= or A's copy c'tor?\nThanks!</p>\n", "Title": "Operator= and copy c'tor", "CreationDate": "2013-06-07T12:38:48.700", "LastActivityDate": "2013-06-07T13:34:34.737", "CommentCount": "5", "PostTypeId": "1", "ClosedDate": "2013-06-07T13:44:00.533", "Id": "16984353", "Score": "-4", "OwnerUserId": "1712591", "Tags": "<c++>", "AnswerCount": "2"}});