post_cb({"15629530": {"ViewCount": "550", "Body": "<p>Is it ok to delete the void pointer in the below program. </p>\n<pre><code>class Sample\n{\n    public:\n        int intVal;\n        float floatVal;\n};\n\nmain() {\n    Sample *samObj = new Sample();\n    void *vPtr = samObj;\n    delete vPtr;\n}\n</code></pre>\n<p>This is just a sample program I have written. Actually, in my project I have no other way than doing similar thing. This similar code is in .h interface file, and when I include this file and compile the other components, compiler gives a warning message as \"warning: deleting 'void*' is undefined\", But my doubt is since I have assigned the void pointer with the Sample object type, isn't it safe to delete this pointer? </p>\n", "AcceptedAnswerId": "15629573", "Title": "Deleting void pointer after assigning it with original type", "CreationDate": "2013-03-26T04:45:08.603", "Id": "15629530", "CommentCount": "4", "LastEditDate": "2015-07-03T22:15:37.320", "PostTypeId": "1", "LastEditorUserId": "4370109", "LastActivityDate": "2015-07-03T22:15:37.320", "Score": "0", "OwnerUserId": "1568633", "Tags": "<c++><void-pointers>", "AnswerCount": "3"}, "15629586": {"Id": "15629586", "PostTypeId": "2", "Body": "<p>No, it is not safe to delete a void pointer that way. How is the compiler supposed to 'know' what vPtr points to? Compiler CANNOT; the run time could, but it does not. </p>\n<p>Why would the compiler need to 'know' what the vPtr points to? To call the destructors AND to know how much memory to deallocate. Potentially how much memory to deallocate is not such a big problem if the compiler keeps a standard header with each allocation. But I guess that is a detail left to the compiler, so even in this department the result would be 'undefined'.</p>\n", "LastActivityDate": "2013-03-26T04:50:21.893", "CommentCount": "6", "CreationDate": "2013-03-26T04:50:21.893", "ParentId": "15629530", "Score": "0", "OwnerUserId": "1618844"}, "bq_ids": {"n4140": {"so_15629530_15629573_1": {"length": 11, "quality": 0.7857142857142857, "section_id": 6105}, "so_15629530_15629573_0": {"length": 37, "quality": 0.9487179487179487, "section_id": 6107}}, "n3337": {"so_15629530_15629573_1": {"length": 10, "quality": 0.7142857142857143, "section_id": 5871}, "so_15629530_15629573_0": {"length": 37, "quality": 0.9487179487179487, "section_id": 5873}}, "n4659": {"so_15629530_15629573_1": {"length": 11, "quality": 0.7857142857142857, "section_id": 7602}, "so_15629530_15629573_0": {"length": 37, "quality": 0.9487179487179487, "section_id": 7604}}}, "15629922": {"Id": "15629922", "PostTypeId": "2", "Body": "<p>The code appears alright.\nAs long as you remeber to point <code>void *vPtr</code> to null or whatever exists.</p>\n<p>Real problem comes when you delete <code>void *vPtr</code>, as compiler don't what object you are delete, it have no idea about how many memory can be release.</p>\n", "LastActivityDate": "2013-03-26T05:21:53.060", "CommentCount": "0", "CreationDate": "2013-03-26T05:21:53.060", "ParentId": "15629530", "Score": "0", "OwnerUserId": "2193406"}, "15629573": {"Id": "15629573", "PostTypeId": "2", "Body": "<p>Calling delete on a void pointer is <strong>undefined behavior</strong><sup>[Ref ]</sup>. You should not do it at all. You are not calling <code>delete</code> on a void pointer but on pointer of type <code>Sample</code> which is fine.   </p>\n<p>[Ref ]\n<strong>C++ Standard :section 5.3.5/3:</strong></p>\n<blockquote>\n<p id=\"so_15629530_15629573_0\">In the first alternative (delete\n  object), if the static type of the\n  operand is different from its dynamic\n  type, the static type shall be a base\n  class of the operand\u2019s dynamic type\n  and the static type shall have a\n  virtual destructor or the behavior is\n  undefined.  In the second alternative\n  (delete array) if the dynamic type of\n  the object to be deleted differs from\n  its static type, the behavior is\n  undefined.</p>\n</blockquote>\n<p>footnote:</p>\n<blockquote>\n<p id=\"so_15629530_15629573_1\">This implies that an object cannot be\n  deleted using a pointer of type void*\n  because there are no objects of type\n  void</p>\n</blockquote>\n", "LastActivityDate": "2013-03-26T04:48:58.100", "CommentCount": "1", "CreationDate": "2013-03-26T04:48:58.100", "ParentId": "15629530", "Score": "1", "OwnerUserId": "452307"}});