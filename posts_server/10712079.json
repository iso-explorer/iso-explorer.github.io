post_cb({"10712116": {"Id": "10712116", "PostTypeId": "2", "Body": "<p>Once a function is declared virtual in a base class, it doesn't matter if the <code>virtual</code> keyword is used in the derived class's function. It will always be virtual in derived classes (whether or not it is so declared).</p>\n<p>From the C++11 standard, 10.3.2:</p>\n<blockquote>\n<p id=\"so_10712079_10712116_0\">If a virtual member function vf is declared in a class Base and in a\n  class Derived, derived directly or indirectly from Base, a member\n  function vf with the same name, parameter-type-list (8.3.5),\n  cv-qualification, and refqualifier (or absence of same) as Base::vf is\n  declared, then Derived::vf is also virtual (whether or not it is so\n  declared) and it overrides Base::vf. ...</p>\n</blockquote>\n", "LastActivityDate": "2012-05-23T00:55:04.483", "Score": "8", "CreationDate": "2012-05-23T00:55:04.483", "ParentId": "10712079", "CommentCount": "4", "OwnerUserId": "446788"}, "bq_ids": {"n4140": {"so_10712079_10712116_0": {"length": 31, "quality": 0.96875, "section_id": 7003}}, "n3337": {"so_10712079_10712116_0": {"length": 31, "quality": 0.96875, "section_id": 6749}}, "n4659": {"so_10712079_10712116_0": {"length": 31, "quality": 0.96875, "section_id": 8500}}}, "10712118": {"Id": "10712118", "PostTypeId": "2", "Body": "<p><code>B::Foo</code> doesn't need to be declared as virtual--the fact that <code>A::Foo</code> is virtual and B derives from A means it's virtual (and overridden). Check out the <a href=\"http://msdn.microsoft.com/en-us/library/0y01k918%28v=vs.100%29.aspx\" rel=\"nofollow\">msdn article</a> on the virtual functions for more info.</p>\n", "LastActivityDate": "2012-05-23T00:55:14.433", "Score": "3", "CreationDate": "2012-05-23T00:55:14.433", "ParentId": "10712079", "CommentCount": "0", "OwnerUserId": "678687"}, "10712079": {"ViewCount": "131", "Body": "<p>I have the header file \"testcode.h\"</p>\n<pre><code>#ifndef TESTCODE_H\n#define TESTCODE_H\n\nclass A\n{\npublic:\n    A();\n    ~A();\n    virtual void Foo();\n\npublic:\n    int mPublic;\n\nprotected:\n    int mProtected;\n\nprivate:\n    int mPrivate;\n};\n\nclass B : public A\n{\npublic:\n    B();\n    ~B();\n    void Foo();\n};\n\n#endif // TESTCODE_H\n</code></pre>\n<p>and a source file</p>\n<pre><code>#include \"TestCode.h\"\n\nint main(int argc, char* argv[])\n{\n    A* b = new B();\n    b-&gt;Foo();\n\n    b-&gt;mPublic = 0;\n    b-&gt;mProtected = 0;\n    b-&gt;mPrivate = 0;\n\n    delete b;\n\n    return 0;\n}\n</code></pre>\n<p>Here, i would like to know that when I am calling \"b-&gt;Foo\", the Foo function of the class B is called instead of class A. However, the Foo function of class B is not declared as virtual. Can anyone elaborate on this ??</p>\n", "AcceptedAnswerId": "10712116", "Title": "overriding virtual function with a non-virtual function", "CreationDate": "2012-05-23T00:49:32.613", "Id": "10712079", "CommentCount": "0", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2012-05-23T00:55:22.763", "LastEditorUserId": "34824", "LastActivityDate": "2012-05-23T00:55:22.763", "Score": "4", "OwnerUserId": "538774", "Tags": "<c++>", "AnswerCount": "2"}});