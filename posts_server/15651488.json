post_cb({"15651770": {"ParentId": "15651488", "PostTypeId": "2", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_15651488_15651770_0\">I suspect the answer is \"you cannot do this\".</p>\n</blockquote>\n<p>Yes, that is the case, you cannot pass a function template as a template argument. From 14.3.3:</p>\n<blockquote>\n<p id=\"so_15651488_15651770_1\">A template-argument for a template template-parameter shall be the\n  name of a class template or an alias template, expressed as\n  id-expression.</p>\n</blockquote>\n<p>The template function needs to be instantiated <em>before</em> you pass it to the other template. One possible solution is to pass a class type that holds a static <code>produce_5_function</code> like so:</p>\n<pre><code>template&lt;typename T&gt;\nstruct Workaround {\n  static T produce_5_functor() { return T(5); }\n};\ntemplate&lt;template&lt;typename&gt;class F&gt;\nstruct client_template {\n  int operator()() const { return F&lt;int&gt;::produce_5_functor(); }\n};\nint five = client_template&lt;Workaround&gt;()();\n</code></pre>\n<p>Using alias templates, I could get a little closer:</p>\n<pre><code>template &lt;typename T&gt;\nT produce_5_functor() { return T(5); }\n\ntemplate &lt;typename R&gt;\nusing prod_func = R();\n\ntemplate&lt;template&lt;typename&gt;class F&gt;\nstruct client_template {\n  int operator()(F&lt;int&gt; f) const { return f(); }\n};\n\nint five = client_template&lt;prod_func&gt;()(produce_5_functor);\n</code></pre>\n", "OwnerUserId": "906773", "LastEditorUserId": "906773", "LastEditDate": "2013-03-27T04:57:11.153", "Id": "15651770", "Score": "12", "CreationDate": "2013-03-27T04:10:49.703", "LastActivityDate": "2013-03-27T04:57:11.153"}, "15651607": {"ParentId": "15651488", "CommentCount": "0", "Body": "<p>How about wrapping that function?</p>\n<pre><code>template&lt;typename T&gt;\nstruct produce_5_function_wrapper {\n    T operator()() const { return produce_5_function&lt;T&gt;(); }\n};\n</code></pre>\n<p>Then you can use the wrapper instead of the function:</p>\n<pre><code>int five = client_template&lt; produce_5_function_wrapper &gt;()();\n</code></pre>\n<p>Using the template function alone will not work, there's no such thing as \"template template functions\".</p>\n", "OwnerUserId": "525217", "PostTypeId": "2", "Id": "15651607", "Score": "2", "CreationDate": "2013-03-27T03:51:48.597", "LastActivityDate": "2013-03-27T03:51:48.597"}, "bq_ids": {"n4140": {"so_15651488_15651770_1": {"section_id": 92, "quality": 1.0, "length": 10}}, "n3337": {"so_15651488_15651770_1": {"section_id": 87, "quality": 1.0, "length": 10}}, "n4659": {"so_15651488_15651770_1": {"section_id": 95, "quality": 1.0, "length": 10}}}, "15651488": {"CommentCount": "0", "AcceptedAnswerId": "15651770", "CreationDate": "2013-03-27T03:36:47.193", "LastActivityDate": "2013-03-27T04:57:11.153", "PostTypeId": "1", "ViewCount": "5090", "FavoriteCount": "3", "Title": "How to pass a template function in a template argument list", "Id": "15651488", "Score": "18", "Body": "<p>Suppose I have a <code>template</code> function:</p>\n<pre><code>template&lt;typename T&gt;\nT produce_5_function() { return T(5); }\n</code></pre>\n<p>How can I pass this entire <code>template</code> to another <code>template</code>?</p>\n<p>If <code>produce_5_function</code> was a functor, there would be no problem:</p>\n<pre><code>template&lt;typename T&gt;\nstruct produce_5_functor {\n  T operator()() const { return T(5); }\n};\ntemplate&lt;template&lt;typename T&gt;class F&gt;\nstruct client_template {\n  int operator()() const { return F&lt;int&gt;()(); }\n};\nint five = client_template&lt; produce_5_functor &gt;()();\n</code></pre>\n<p>but I want to be able to do this with a raw function template:</p>\n<pre><code>template&lt;??? F&gt;\nstruct client_template {\n  int operator()() const { return F&lt;int&gt;(); }\n};\nint five = client_template&lt; produce_5_function &gt;()();\n</code></pre>\n<p>I suspect the answer is \"you cannot do this\".</p>\n", "Tags": "<c++><templates><c++11><function-templates>", "OwnerUserId": "1774667", "AnswerCount": "2"}});