post_cb({"17328097": {"CommentCount": "1", "ViewCount": "106", "PostTypeId": "1", "LastEditorUserId": "2299851", "CreationDate": "2013-06-26T18:47:16.910", "LastActivityDate": "2013-06-26T19:57:45.027", "Title": "std::map::erase(const key_type&) stop working after comparison customized", "AcceptedAnswerId": "17328239", "LastEditDate": "2013-06-26T18:52:45.283", "Id": "17328097", "Score": "0", "Body": "<p>I customize the comparison in std::map as below. </p>\n<pre><code>class my_cmp {\npublic:\n  bool operator()(const string &amp;a, const string &amp;b) {\n  return (a.length() &gt;= b.length());\n  }\n};\n</code></pre>\n<p><code>map&lt;string, int, tmp_cmp&gt; tmp;</code> works well with all key sorted per string length. But <code>tmp.erase(\"a string\");</code> no longer works. Is there a solution to make the std::map::erase(key_type) still work after the comparison customized?</p>\n", "Tags": "<c++>", "OwnerUserId": "2299851", "AnswerCount": "3"}, "17329316": {"ParentId": "17328097", "CommentCount": "0", "Body": "<p>The comparator for a map must impose a <strong>strict weak ordering</strong>. In part that means that <code>comp(a,b)</code> and <code>comp(b,a)</code> cannot both be true. So comparisons should act more like <code>&lt;</code> and <code>&gt;</code> and not like <code>&lt;=</code> or <code>&gt;=</code>.</p>\n", "OwnerUserId": "1593860", "PostTypeId": "2", "Id": "17329316", "Score": "1", "CreationDate": "2013-06-26T19:57:45.027", "LastActivityDate": "2013-06-26T19:57:45.027"}, "17328249": {"ParentId": "17328097", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>@Chad's comment aside, I think your problem is that you include <code>=</code> in your implementation.</p>\n<p><code>map</code>'s definition of equality is <code>!less(a,b) &amp;&amp; !less(b,a)</code>. This does not work for your definition of <code>less</code>.</p>\n<p>Here is what Standard says in \"23.2.4 Associative containers\"</p>\n<blockquote>\n<p id=\"so_17328097_17328249_0\">3 The phrase \u201cequivalence of keys\u201d means the equivalence relation\n  imposed by the comparison and not the operator== on keys. That is, two\n  keys k1 and k2 are considered to be equivalent if for the comparison\n  object comp, comp(k1, k2) == false &amp;&amp; comp(k2, k1) == false. For any\n  two keys k1 and k2 in the same container, calling comp(k1, k2) shall\n  always return the same value.</p>\n</blockquote>\n", "OwnerUserId": "3458", "LastEditorUserId": "3458", "LastEditDate": "2013-06-26T19:57:39.723", "Id": "17328249", "Score": "2", "CreationDate": "2013-06-26T18:55:49.307", "LastActivityDate": "2013-06-26T19:57:39.723"}, "bq_ids": {"n4140": {"so_17328097_17328249_0": {"section_id": 739, "quality": 0.9090909090909091, "length": 30}}, "n3337": {"so_17328097_17328249_0": {"section_id": 728, "quality": 0.9090909090909091, "length": 30}}, "n4659": {"so_17328097_17328249_0": {"section_id": 797, "quality": 0.9090909090909091, "length": 30}}}, "17328239": {"ParentId": "17328097", "CommentCount": "1", "Body": "<p>Custom comparator in <code>std::map</code> must have the same behavior as \"less\" operator. So, you have to change your code to something like <code>return (a.length() &lt; b.length());</code></p>\n", "OwnerUserId": "280758", "PostTypeId": "2", "Id": "17328239", "Score": "2", "CreationDate": "2013-06-26T18:55:07.267", "LastActivityDate": "2013-06-26T18:55:07.267"}});