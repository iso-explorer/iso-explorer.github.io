post_cb({"28847763": {"Id": "28847763", "PostTypeId": "2", "Body": "<p>Your example is not an error and should compile.</p>\n<p>When you assign a larger integer type to a smaller integer type (or perform any conversion that doesn't quality as a promotion), an <em>integral conversion</em> occurs and precision may be lost.</p>\n<p>Similarly, <em>floating point conversion</em> occurs when you assign one floating point type to another floating point type; the result is either the same value, or a value close to it, unless the source value exceeds the range of the destination type.</p>\n", "LastActivityDate": "2015-03-04T06:14:39.060", "CommentCount": "0", "CreationDate": "2015-03-04T06:14:39.060", "ParentId": "28847468", "Score": "0", "OwnerUserId": "214796"}, "28847468": {"ViewCount": "820", "Body": "<p>In c++ we can write something like</p>\n<pre><code>float f = 3.55;\n</code></pre>\n<p>and it is a legal statement. whereas the type of real number numerals is double and we are storing that double into floating point number. It essentially means storing 8 bytes into 4 bytes (a possible data loss)? My question is that when I write</p>\n<pre><code>long l = 333; \nint y = l;\n</code></pre>\n<p>I get an error because long value is converted into int value (possible data loss). but why don't I encounter a problem when storing 8 byte double real numeral in floating point (4 byte)?<br>\nRegards</br></p>\n", "AcceptedAnswerId": "28847809", "Title": "Why Implicit Cast from double to float available?", "CreationDate": "2015-03-04T05:50:42.353", "Id": "28847468", "CommentCount": "5", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2015-03-04T06:52:40.973", "Score": "1", "OwnerUserId": "331174", "Tags": "<c++><double><turboc++>", "AnswerCount": "2"}, "28847809": {"Id": "28847809", "PostTypeId": "2", "Body": "<p>From \u00a74 Standard conversions [conv] C++11:</p>\n<blockquote>\n<p id=\"so_28847468_28847809_0\">Standard conversions are implicit conversions with built-in meaning.\n  Clause 4 enumerates the full set of such conversions. A standard\n  conversion sequence is a sequence of standard conversions in the\n  following order:</p>\n<p id=\"so_28847468_28847809_1\">...</p>\n<p id=\"so_28847468_28847809_2\">Zero or one conversion from the following set: integral promotions,\n  floating point promotion, integral conversions, <strong>floating point\n  conversions</strong>, floating-integral conversions, pointer conversions,\n  pointer to member conversions, and boolean conversions.</p>\n</blockquote>\n<p>So conversion between two numeric types is allowed implicitly as it makes sense also if used carefully. For example When you calculate Amount(<code>int</code>) from P(<code>int</code>), R(<code>float</code>) and T(<code>int</code>);</p>\n<p>And from \u00a74.8 Floating point conversions [conv.double],</p>\n<blockquote id=\"so_28847468_28847809_3\">\n<ul>\n<li>A prvalue of floating point type can be converted to a prvalue of\n  another floating point type. If the source value can be exactly\n  represented in the destination type, the result of the conversion is\n  that exact representation. If the source value is between two adjacent\n  destination values, the result of the conversion is an\n  implementation-defined choice of either of those values. Otherwise,\n  the behavior is undefined.</li>\n<li>The conversions allowed as floating point\n  promotions are excluded from the set of floating point conversions.</li>\n</ul>\n</blockquote>\n<p>It appears <code>double</code> to <code>float</code> conversion is implicitly performed by the compliant <code>C++</code> compiler. (At the cost of potentially loosing the precision)</p>\n", "LastEditorUserId": "2659313", "LastActivityDate": "2015-03-04T06:52:40.973", "Score": "2", "CreationDate": "2015-03-04T06:18:42.887", "ParentId": "28847468", "CommentCount": "0", "OwnerUserId": "2659313", "LastEditDate": "2015-03-04T06:52:40.973"}, "bq_ids": {"n4140": {"so_28847468_28847809_0": {"length": 17, "quality": 0.9444444444444444, "section_id": 0}, "so_28847468_28847809_3": {"length": 38, "quality": 0.76, "section_id": 35}, "so_28847468_28847809_2": {"length": 24, "quality": 1.0, "section_id": 0}}, "n3337": {"so_28847468_28847809_0": {"length": 17, "quality": 0.9444444444444444, "section_id": 0}, "so_28847468_28847809_3": {"length": 38, "quality": 0.76, "section_id": 32}, "so_28847468_28847809_2": {"length": 24, "quality": 1.0, "section_id": 0}}, "n4659": {"so_28847468_28847809_0": {"length": 17, "quality": 0.9444444444444444, "section_id": 0}, "so_28847468_28847809_3": {"length": 34, "quality": 0.68, "section_id": 35}, "so_28847468_28847809_2": {"length": 20, "quality": 0.8333333333333334, "section_id": 0}}}});