post_cb({"30340999": {"ParentId": "30339922", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Some formal explanation in addition to @songyuanyao's answer:</p>\n<p><code>N4296::14.8.2.1 [temp.deduct.call]</code>:</p>\n<blockquote>\n<p id=\"so_30339922_30340999_0\">Template argument deduction is done by comparing each function\n  template parameter type (call it P) with the type of the corresponding\n  argument of the call (call it A) as described below.</p>\n</blockquote>\n<p><code>N4296::14.8.2.1/3 [temp.deduct.call]</code>:</p>\n<blockquote>\n<p id=\"so_30339922_30340999_1\">A <em>forwarding reference</em> is\n  an <strong>rvalue reference to a cv-unqualified template parameter</strong>. If P is a\n  forwarding reference and <strong>the argument is an lvalue</strong>, the type \u201clvalue\n  reference to A\u201d is used in place of A for type deduction.</p>\n</blockquote>\n<p>The Standard also provides the following example:</p>\n<pre><code>template &lt;class T&gt; int f(T&amp;&amp; heisenreference);\ntemplate &lt;class T&gt; int g(const T&amp;&amp;);\nint i;\nint n1 = f(i); // calls f&lt;int&amp;&gt;(int&amp;)\nint n2 = f(0); // calls f&lt;int&gt;(int&amp;&amp;)\nint n3 = g(i); // error: would call g&lt;int&gt;(const int&amp;&amp;)\n</code></pre>\n<p>That's exactly your case.</p>\n", "Id": "30340999", "LastEditDate": "2015-05-20T05:36:46.790", "OwnerDisplayName": "user2953119", "Score": "6", "CreationDate": "2015-05-20T05:30:36.883", "LastActivityDate": "2015-05-20T05:36:46.790", "LastEditorDisplayName": "user2953119"}, "30340092": {"ParentId": "30339922", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Like @Peter said, the type of <code>T</code> is deduced as <code>string&amp;</code>, and C++\u2019s reference-collapsing rule says:</p>\n<blockquote>\n<p id=\"so_30339922_30340092_0\">T&amp; &amp; \u21d2 T&amp; // from C++98<br>\n  T&amp;&amp; &amp; \u21d2 T&amp; // new for C++0x<br>\n  T&amp; &amp;&amp; \u21d2 T&amp; // new for C++0x<br>\n  T&amp;&amp; &amp;&amp; \u21d2 T&amp;&amp; // new for C++0x  </br></br></br></p>\n</blockquote>\n<p>So <code>func</code>\u2019s instantiation is actually:</p>\n<pre><code>void func(string&amp; str)\n</code></pre>\n<p>And it works.</p>\n", "OwnerUserId": "3309790", "LastEditorUserId": "257299", "LastEditDate": "2016-10-04T04:41:30.487", "Id": "30340092", "Score": "14", "CreationDate": "2015-05-20T04:07:10.640", "LastActivityDate": "2016-10-04T04:41:30.487"}, "30339922": {"CommentCount": "3", "AcceptedAnswerId": "30340092", "PostTypeId": "1", "LastEditorUserId": "3309790", "CreationDate": "2015-05-20T03:47:16.283", "LastActivityDate": "2016-10-04T04:41:30.487", "LastEditDate": "2015-05-20T04:21:24.773", "ViewCount": "2318", "FavoriteCount": "2", "Title": "C++, rvalue references in function parameters", "Id": "30339922", "Score": "13", "Body": "<p>I'm trying to understand <code>rvalue</code> references. I have seen how they are used in constructors, with things like <code>std::move</code> and <code>std::forward</code>, but I still don't understand why this doesn't work:</p>\n<pre><code>void func(string&amp;&amp; str)\n{\n    cout &lt;&lt; str &lt;&lt; endl;\n}\nint main(int argc, char* argv[])\n{\n    string s(\"string\");\n    func(s);\n}\n</code></pre>\n<p>And this does:</p>\n<pre><code>template&lt;typename T&gt;\nvoid func(T&amp;&amp; str)\n{\n    cout &lt;&lt; str &lt;&lt; endl;\n}\nint main(int argc, char* argv[])\n{\n    string s(\"string\");\n    func(s);\n}\n</code></pre>\n<p>Why does it work with the function template version?</p>\n", "Tags": "<c++><c++11><rvalue-reference>", "OwnerUserId": "4918718", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_30339922_30340999_1": {"section_id": 304, "quality": 0.8235294117647058, "length": 14}, "so_30339922_30340999_0": {"section_id": 302, "quality": 1.0, "length": 18}}, "n3337": {"so_30339922_30340999_1": {"section_id": 295, "quality": 0.8235294117647058, "length": 14}, "so_30339922_30340999_0": {"section_id": 293, "quality": 1.0, "length": 18}}, "n4659": {"so_30339922_30340999_1": {"section_id": 311, "quality": 0.9411764705882353, "length": 16}, "so_30339922_30340999_0": {"section_id": 309, "quality": 1.0, "length": 18}}}});