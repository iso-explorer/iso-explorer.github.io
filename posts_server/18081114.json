post_cb({"18081208": {"ParentId": "18081114", "CommentCount": "0", "Body": "<p>The compiler generated default constructor (and other operators) are automatically public.  If you want the default constructor to be private then you need to specify this yourself my declaring it within a private section of your class.</p>\n<p>The concepts of private, protected and public are only relevant to the compiler.  They have no meaning and are not tracked at runtime.</p>\n", "OwnerUserId": "2634887", "PostTypeId": "2", "Id": "18081208", "Score": "1", "CreationDate": "2013-08-06T13:11:34.743", "LastActivityDate": "2013-08-06T13:11:34.743"}, "18081201": {"ParentId": "18081114", "CommentCount": "0", "Body": "<p>Yes, the compiler will produce the default constructor and the default copy constructor and default assignment operators as \"public\" - because anything else would make the class rather useless... </p>\n<p>Of course, those constructors would be rather simple - in fact, it can be replaced with \"nothing\", since constructing an empty class will do nothing. </p>\n", "OwnerUserId": "1919155", "PostTypeId": "2", "Id": "18081201", "Score": "1", "CreationDate": "2013-08-06T13:11:26.023", "LastActivityDate": "2013-08-06T13:11:26.023"}, "18081114": {"CommentCount": "1", "ViewCount": "2063", "CreationDate": "2013-08-06T13:08:19.613", "LastActivityDate": "2013-08-06T13:34:15.043", "Title": "Default constructor of an Empty Class is public. But how?", "AcceptedAnswerId": "18081262", "PostTypeId": "1", "Id": "18081114", "Score": "7", "Body": "<p>I have a simple question:</p>\n<pre><code>class my\n{\n};\nmy ob;\n</code></pre>\n<p>Compiler allows me to create an object which makes sense. And, I am aware that you can't create object where the constructor is private. </p>\n<p>To me it looks that, everything inside the class is <code>private</code> but obviously not the default constructor(because it is allowing me to create the object as default constructor should be <code>public</code>).  But what confuses me is that there is no <code>public</code> section in the class. </p>\n<p>So, does it create a <code>public</code> section only to put a default constructor under it in this case? </p>\n<p>Or there is something else going on and my rationale is incorrect? </p>\n<p>Also, how are accesses  public, private and protected internally organised/tracked when an object is created/accessed?</p>\n<p>I got this question as I never created an object of an empty class until now.</p>\n", "Tags": "<c++><constructor><private><default-constructor><public-method>", "OwnerUserId": "1634969", "AnswerCount": "4"}, "18081330": {"ParentId": "18081114", "CommentCount": "0", "Body": "<p>The compiler will generate the default constructor as <code>inline public</code> if it is not defined by the user, the relevant section of the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3485.pdf\" rel=\"nofollow\"><code>C++ draft standard</code></a> is <code>12.1/5</code>:</p>\n<blockquote>\n<p id=\"so_18081114_18081330_0\">If there is no user-declared constructor for class X, a constructor having no parameters is implicitly declared as defaulted (8.4). An implicitly-declared default constructor is an inline public member of its class.</p>\n</blockquote>\n", "OwnerUserId": "1708801", "PostTypeId": "2", "Id": "18081330", "Score": "1", "CreationDate": "2013-08-06T13:16:06.800", "LastActivityDate": "2013-08-06T13:16:06.800"}, "bq_ids": {"n4140": {"so_18081114_18081262_0": {"section_id": 369, "quality": 1.0, "length": 18}, "so_18081114_18081262_1": {"section_id": 456, "quality": 0.7222222222222222, "length": 13}, "so_18081114_18081330_0": {"section_id": 369, "quality": 1.0, "length": 18}, "so_18081114_18081262_2": {"section_id": 467, "quality": 0.625, "length": 20}}, "n3337": {"so_18081114_18081262_0": {"section_id": 359, "quality": 1.0, "length": 18}, "so_18081114_18081262_1": {"section_id": 447, "quality": 0.7222222222222222, "length": 13}, "so_18081114_18081330_0": {"section_id": 359, "quality": 1.0, "length": 18}, "so_18081114_18081262_2": {"section_id": 458, "quality": 0.625, "length": 20}}, "n4659": {"so_18081114_18081262_0": {"section_id": 381, "quality": 1.0, "length": 18}, "so_18081114_18081262_2": {"section_id": 490, "quality": 0.625, "length": 20}, "so_18081114_18081330_0": {"section_id": 381, "quality": 1.0, "length": 18}, "so_18081114_18081262_1": {"section_id": 479, "quality": 0.7222222222222222, "length": 13}}}, "18081262": {"ParentId": "18081114", "LastEditDate": "2013-08-06T13:34:15.043", "CommentCount": "0", "CreationDate": "2013-08-06T13:13:50.793", "OwnerUserId": "1056003", "LastEditorUserId": "1056003", "PostTypeId": "2", "Id": "18081262", "Score": "6", "Body": "<p>If you do not declare any constructor yourself, C++ compilers will always generate a public trivial constructor for you. More than that even, it will also implicitly create a public copy constructor and assignment operator.</p>\n<p>From C++11 standard 12.1.5:</p>\n<blockquote>\n<p id=\"so_18081114_18081262_0\">If\n  there is no user-declared constructor for class X, a constructor having no parameters is implicitly declared\n  as defaulted. An implicitly-declared default constructor is an inline public member of its class.</p>\n</blockquote>\n<p>and 12.8.7, 12.8.11:</p>\n<blockquote>\n<p id=\"so_18081114_18081262_1\">If the class definition does not explicitly declare a copy constructor, one is declared implicitly. [...] An implicitly-declared copy [...] constructor is an inline public member of its class.</p>\n</blockquote>\n<p>and finally 12.8.18, 12.8.20, 12.8.22:</p>\n<blockquote>\n<p id=\"so_18081114_18081262_2\">If the class definition does not explicitly declare a copy assignment operator, one is declared implicitly. [...] If the definition of a class X does not explicitly declare a move assignment operator, one will be implicitly\n  declared [...]. An implicitly-declared\n  copy/move assignment operator is an inline public member of its class.</p>\n</blockquote>\n<p>Note that a move assignment operator will only be generated under certain circumstances, which are beyond the scope of this question, see 12.8.20 for more details.</p>\n<p>If you want a private constructor you have to declare it yourself:</p>\n<pre><code>class my { my() {} };\n</code></pre>\n<p>If you want to prevent the generation of copy constructor or assignment operator you can either declare, but not implement them:</p>\n<pre><code>class my { my(my const &amp;); };\n</code></pre>\n<p>Or, since C++11, explicitly delete them:</p>\n<pre><code>class my { my(my const &amp;) = delete; };\n</code></pre>\n", "LastActivityDate": "2013-08-06T13:34:15.043"}});