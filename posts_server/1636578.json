post_cb({"bq_ids": {"n4140": {"so_1636578_1636609_0": {"length": 14, "quality": 0.9333333333333333, "section_id": 745}}, "n3337": {"so_1636578_1636609_0": {"length": 14, "quality": 0.9333333333333333, "section_id": 734}}, "n4659": {"so_1636578_1636609_0": {"length": 14, "quality": 0.9333333333333333, "section_id": 803}}}, "1636578": {"ViewCount": "15379", "Body": "<p>Do erase call in std::set invalidate iterator ? As i have done below 5th from last line..?\nif yes what is better way to erase all elements from set</p>\n<pre><code>class classA\n{\npublic:\n    classA(){};\n    ~classA(){};\n};\nstruct structB\n{\n};\n\ntypedef std::set &lt;classA*, structB&gt; SETTYPE;        \ntypedef std::map &lt;int, SETTYPE&gt;MAPTYPE;\n\nint __cdecl wmain (int argc, wchar_t* pArgs[])\n{\n    MAPTYPE mapObj; \n    /*\n      ...\n      ..   Some Operation Here\n      ...\n      */\n    for (MAPTYPE::iterator itr1=mapObj.begin(); itr1!=mapObj.end(); itr1++) \n    {       \n        SETTYPE li=(*itr1).second;\n        for (SETTYPE::iterator itr2=li.begin();itr2!=li.end();itr2++) \n        {\n            classA *lt=(classA*)(*itr2);\n            li.erase(itr2); \n            delete lt; // Does it invalidate Iterator ?\n        }\n    }\n}\n</code></pre>\n", "AcceptedAnswerId": "1636591", "Title": "iterator validity ,after erase() call in std::set", "CreationDate": "2009-10-28T11:07:38.657", "Id": "1636578", "CommentCount": "1", "FavoriteCount": "2", "PostTypeId": "1", "LastActivityDate": "2010-08-15T06:22:19.800", "Score": "10", "OwnerUserId": "177584", "Tags": "<c++><stl><set>", "AnswerCount": "3"}, "1636591": {"Id": "1636591", "PostTypeId": "2", "Body": "<p>Since you are just apparently deleting every element of the set, you could just do:</p>\n<pre><code>    for (SETTYPE::iterator itr2=li.begin();itr2!=li.end();itr2++) \n    {\n            classA *lt=(classA*)(*itr2);\n            delete lt;\n    }\n    li.clear(); // clear the elements\n</code></pre>\n", "LastActivityDate": "2009-10-28T11:09:46.377", "CommentCount": "1", "CreationDate": "2009-10-28T11:09:46.377", "ParentId": "1636578", "Score": "2", "OwnerUserId": "197368"}, "1636609": {"Id": "1636609", "PostTypeId": "2", "Body": "<p>From standard 23.1.2</p>\n<blockquote>\n<p id=\"so_1636578_1636609_0\">The insert members shall not affect the validity of iterators and references to the container, and the erase members shall invalidate only iterators and references to the erased elements. </p>\n</blockquote>\n<p>EDIT</p>\n<p>In your case itr2 is invalidated after erasing so incrementing it causes undefined behaviour. In this case you can follow reko_t advice, in general, you can try this:</p>\n<pre><code>for (SETTYPE::iterator itr2=li.begin();itr2!=li.end();) \n{\n    classA *lt=(classA*)(*itr2);\n    li.erase(itr2++); \n    delete lt;\n}\n</code></pre>\n<p>which will increment iterator <strong>before</strong> removing it's previous value from set.<br>\nBTW. itr2 is not invalidated by <code>delete lt;</code>, but by <code>li.erase(itr2);</code></br></p>\n", "LastEditorUserId": "113662", "LastActivityDate": "2009-10-28T11:21:41.723", "Score": "40", "CreationDate": "2009-10-28T11:12:48.317", "ParentId": "1636578", "CommentCount": "2", "OwnerUserId": "113662", "LastEditDate": "2009-10-28T11:21:41.723"}, "1636659": {"Id": "1636659", "PostTypeId": "2", "Body": "<p>The delete is ok.</p>\n<p>The problem is that you erase - and thus invalidate - <code>itr2</code>, but use it for loop iteration.</p>\n<p>i.a.w. after the first erase, the <code>++itr2</code> has undefined results.</p>\n<p>The pattern I use in this situation is this:</p>\n<pre><code>while(itr2 != end())\n{\n   iterator toDelete = itr2;\n   ++itr2;   // increment before erasing!\n   container.erase(toDelete);\n}\n</code></pre>\n<p>Some non-standard STL impls have erase return the next iterator, so you could do:</p>\n<pre><code>while(itr2 != end())\n   itr2 = container.erase();\n</code></pre>\n<p>that's not portable, though.</p>\n<hr>\n<p>the <code>set&lt;A*,B&gt;</code> <em>is</em> strange, though - in a standard impl, B would be the comparator.</p>\n</hr>", "LastActivityDate": "2009-10-28T11:24:53.123", "CommentCount": "0", "CreationDate": "2009-10-28T11:24:53.123", "ParentId": "1636578", "Score": "7", "OwnerUserId": "31317"}});