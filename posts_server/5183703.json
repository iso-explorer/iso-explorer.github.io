post_cb({"5183811": {"ParentId": "5183703", "CommentCount": "6", "CreationDate": "2011-03-03T16:50:10.613", "OwnerUserId": "412080", "PostTypeId": "2", "Id": "5183811", "Score": "2", "Body": "<p>The standard requires a definition for a static member integral constant only if its address is taken, otherwise the declaration with an initializer (what you have) is enough. That linker error message should mention which object/function takes an address of <code>MyClass::SIZE</code>.</p>\n", "LastActivityDate": "2011-03-03T16:50:10.613"}, "5184306": {"ParentId": "5183703", "PostTypeId": "2", "CommentCount": "6", "CreationDate": "2011-03-03T17:35:58.267", "Score": "5", "LastEditorUserId": "301883", "LastEditDate": "2011-03-03T17:48:21.993", "Id": "5184306", "OwnerUserId": "301883", "Body": "<p>Your problem may have nothing to do with someone taking the address of your variable.  It could simply be the compiler opting not to use the variable as a constant expression even though it could.  For example:</p>\n<pre><code>f(int const&amp;);\nstruct X { enum { enum_val = 42 }; static int const static_mem = 42; };\n\nf(5);\nf(X::enum_val);\nf(X::static_mem);\n</code></pre>\n<p>In the first two cases the compiler is required to use the input as a constant expression and the <code>const&amp;</code> can be initialized with such.  The last case however is different.  Even though your intent is probably to use <code>static_mem</code> as a constant expression, and its completely legitimate to do so, the compiler is free to do otherwise and some will actually create a reference to the variable itself.  This is \"use\" of the variable and thus you're required to have a definition of that variable somewhere in the program.</p>\n<p>There's two ways to fix this issue:</p>\n<p>1) Add a definition to your program.</p>\n<p>2) Use enum instead:\n    struct X\n    {\n      enum { static_mem = ? };\n    };</p>\n<p>The first solution is necessary if you ever do intend that taking the address of your variable be possible.  Chances are though that you did not or you would have created that definition already.  The later solution forces the compiler to use <code>X::static_mem</code> as a constant expression since enum members don't actually exist as objects in the program.  Based on your last statement in your question, I'm betting this is the solution you really want.</p>\n", "LastActivityDate": "2011-03-03T17:48:21.993"}, "bq_ids": {"n4140": {"so_5183703_5183838_0": {"section_id": 5908, "quality": 0.6829268292682927, "length": 28}}, "n3337": {"so_5183703_5183838_0": {"section_id": 5680, "quality": 0.6829268292682927, "length": 28}}, "n4659": {"so_5183703_5183838_0": {"section_id": 7390, "quality": 0.5853658536585366, "length": 24}}}, "5183740": {"ParentId": "5183703", "CommentCount": "6", "CreationDate": "2011-03-03T16:45:02.447", "OwnerUserId": "395863", "PostTypeId": "2", "Id": "5183740", "Score": "-1", "Body": "<ol>\n<li><p>Most likely, but without any error messages, it's hard to say. </p></li>\n<li><p>Use a static const int. You can initialize it in the header, and you don't need to declare it in the cpp.</p></li>\n</ol>\n", "LastActivityDate": "2011-03-03T16:45:02.447"}, "5183788": {"ParentId": "5183703", "PostTypeId": "2", "CommentCount": "22", "CreationDate": "2011-03-03T16:48:25.913", "Score": "0", "LastEditorUserId": "415784", "LastEditDate": "2011-03-03T17:10:13.027", "Id": "5183788", "OwnerUserId": "415784", "Body": "<p>If you've to do this:</p>\n<pre><code>//.h file\nstruct MyClass \n{\n    static const uint32_t SIZE = sizeof(MyType); //this is declaration!\n\n}; \n\n//.cpp file\nconst uint32_t MyClass::SIZE; //this is definition - necessary!\n</code></pre>\n", "LastActivityDate": "2011-03-03T17:10:13.027"}, "5183703": {"CommentCount": "2", "AcceptedAnswerId": "5184306", "PostTypeId": "1", "LastEditorUserId": "139685", "CreationDate": "2011-03-03T16:42:18.690", "LastActivityDate": "2011-03-03T17:48:21.993", "LastEditDate": "2011-03-03T17:04:08.813", "ViewCount": "2143", "FavoriteCount": "2", "Title": "Why does declaring a \"static const\" member in a header file cause linker errors?", "Id": "5183703", "Score": "5", "Body": "<p>I have a class declaration(.h file) like so:</p>\n<pre><code>struct MyClass {\n    static const uint32_t SIZE = sizeof(MyType);\n};\n</code></pre>\n<p>When linking my program together, I get linker errors for <code>MyClass::SIZE</code>. <code>nm</code> confirms that the symbol is undefined. <a href=\"http://forums.devshed.com/c-programming-42/linker-errors-undefined-reference-to-static-member-data-193010.html\" rel=\"nofollow\">http://forums.devshed.com/c-programming-42/linker-errors-undefined-reference-to-static-member-data-193010.html</a> seems to address my problem, indicating that \"class static objects must also be declared outside any function or class just like normal globals.\"</p>\n<p>I have two questions:</p>\n<ol>\n<li>Is this explanation valid for my case? If so, can you explain in a little more detail why this is true?</li>\n<li>What's the best way to fix it? I'd like to keep this member's initialization entirely in the .h file.</li>\n</ol>\n", "Tags": "<c++>", "OwnerUserId": "139685", "AnswerCount": "5"}, "5183838": {"ParentId": "5183703", "PostTypeId": "2", "CommentCount": "15", "CreationDate": "2011-03-03T16:52:48.763", "Score": "0", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T10:33:48.333", "Id": "5183838", "OwnerUserId": "251738", "Body": "<p>Quoting myself from <a href=\"https://stackoverflow.com/questions/5032683/no-definition-available-for-static-const-member-with-initializer/5032811#5032811\">No definition available for static const member with initializer?</a></p>\n<p>And from 9.4.2/4:</p>\n<blockquote>\n<p id=\"so_5183703_5183838_0\">If a static data member is of const\n  integral or const enumeration type,\n  its declaration in the class\n  definition can specify a\n  constant initializer which shall be an\n  integral constant expression (5.19).\n  In that case, the member can appear in\n  integral constant expressions within\n  its scope. <strong>The member shall still be\n  defined in a namespace scope if it is\n  used in the program</strong> and the namespace\n  scope definition shall not contain an\n  initializer.</p>\n</blockquote>\n<p>From these references we can infer (\"...shall still be defined...\" in 9.4.2/4) that if it's not defined then the program isn't well-formed.</p>\n<p>@David Rodr\u00edguez - dribeas points out that you must be taking the address of the static member in your program somewhere. If you can avoid taking the address then there's no need for the definition in the implementation file (alternately you aren't taking the address and have a buggy compiler). Otherwise you must have the definition.</p>\n", "LastActivityDate": "2011-03-03T17:06:31.723"}});