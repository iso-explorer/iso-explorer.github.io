post_cb({"15616311": {"Id": "15616311", "PostTypeId": "2", "Body": "<p>from linux kernel <a href=\"http://lxr.free-electrons.com/source/include/linux/stddef.h#L7\" rel=\"nofollow\">stddef.h</a></p>\n<pre><code>#define NULL ((void *)0)\n\nenum {\n        false   = 0,\n        true    = 1\n};\n</code></pre>\n<p>So it is not exactly <code>false</code></p>\n<p>even though <a href=\"http://www.eskimo.com/~scs/cclass/notes/sx10d.html\" rel=\"nofollow\">this</a> post claims it is <code>NULL</code> , <code>0x0</code> and <code>false</code> are almost the same.</p>\n", "LastEditorUserId": "1031417", "LastActivityDate": "2013-03-25T13:41:06.860", "Score": "0", "CreationDate": "2013-03-25T13:35:34.013", "ParentId": "15616177", "CommentCount": "0", "OwnerUserId": "1031417", "LastEditDate": "2013-03-25T13:41:06.860"}, "15616177": {"ViewCount": "1095", "Body": "<p>As mentioned in the question, I have been using NULL and false(in C++) interchangeably with 0 or 0x0 and so on. I was curious to know if they held any special meaning other than being synonyms of 0.</p>\n", "AcceptedAnswerId": "15616226", "Title": "is NULL/false in C and C++ anything more than 0x0 / 0b0 / '\\0' / 0", "CreationDate": "2013-03-25T13:29:54.577", "Id": "15616177", "CommentCount": "12", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2013-03-25T13:40:38.750", "LastEditorUserId": "1593860", "LastActivityDate": "2013-03-25T13:52:22.200", "ClosedDate": "2013-03-25T22:20:54.433", "Score": "4", "OwnerUserId": "1406562", "Tags": "<c++><c><null>", "AnswerCount": "6"}, "15616226": {"Id": "15616226", "PostTypeId": "2", "Body": "<p>for some platforms <code>NULL</code> is not <code>0x0</code></p>\n<hr>\n<p>From <a href=\"https://stackoverflow.com/questions/8288482/is-null-in-c-required-defined-to-be-zero\">Is NULL in C required/defined to be zero?</a> :</p>\n<p><code>NULL</code> is guaranteed to be zero, perhaps casted to <code>(void *)</code><sup>1</sup>.</p>\n<p>C99, \u00a76.3.2.3, \u00b63</p>\n<blockquote>\n<p id=\"so_15616177_15616226_0\">An integer constant expression with the value <code>0</code>, or such an expression cast to type\n  <code>void *</code>, is called a null pointer constant.(55) If a null pointer constant is converted to a\n  pointer type, the resulting pointer, called a null pointer, is guaranteed to compare unequal\n  to a pointer to any object or function.</p>\n</blockquote>\n<p>And note 55 says:</p>\n<blockquote>\n<p id=\"so_15616177_15616226_1\">55) The macro NULL is defined in <code>&lt;stddef.h&gt;</code> (and other headers) as a null pointer constant.</p>\n</blockquote>\n<p>Notice that, because of how the rules for null pointers are formulated, the value you use to assign/compare null pointers is guaranteed to be zero, but the bit pattern actually stored inside the pointer can be any other thing (but AFAIK only few very esoteric platforms exploited this fact, and this should not be a problem anyway since to \"see\" the underlying bit pattern you should go into <a href=\"http://en.wikipedia.org/wiki/Undefined_behavior\" rel=\"nofollow noreferrer\">UB</a>-land anyway).</p>\n<hr/>\n<p>So, as far as the standard is concerned, the two forms are equivalent (<code>!ptr</code> is equivalent to <code>ptr==0</code> due to \u00a76.5.3.3 \u00b65, and <code>ptr==0</code> is equivalent to <code>ptr==NULL</code>); <code>if(!ptr)</code> is also quite idiomatic.</p>\n<p>That being said, I usually write explicitly <code>if(ptr==NULL)</code> instead of <code>if(!ptr)</code> to make it extra clear that I'm checking a pointer for nullity instead of some boolean value.</p>\n<hr/>\n<ol>\n<li>Notice that in C++ the <code>void *</code> cast cannot be present due to the stricter implicit casting rules that would make the usage of such <code>NULL</code> cumbersome (you would have to explicitly convert it to the compared pointer's type every time).</li>\n</ol>\n</hr>", "LastEditorUserId": "-1", "LastActivityDate": "2013-03-25T13:42:01.340", "Score": "5", "CreationDate": "2013-03-25T13:32:19.120", "ParentId": "15616177", "CommentCount": "1", "OwnerUserId": "1003575", "LastEditDate": "2017-05-23T11:49:56.477"}, "bq_ids": {"n4140": {"so_15616177_15616226_1": {"length": 6, "quality": 0.6, "section_id": 2515}}, "n3337": {"so_15616177_15616226_0": {"length": 16, "quality": 0.5333333333333333, "section_id": 36}}, "n4659": {"so_15616177_15616226_1": {"length": 6, "quality": 0.6, "section_id": 3249}}}, "15616397": {"Id": "15616397", "PostTypeId": "2", "Body": "<p>In C and historic C++, <code>NULL</code> has to be a zero-valued integer constant, typically <code>0</code>. I think that C can include an explicit cast to <code>void*</code>, but C++ can't since that language doesn't allow implicit conversion from <code>void*</code> to other pointer types.</p>\n<p>In modern C++, it could be either <code>nullptr</code> instead.</p>\n<p>In either case, any zero-valued integer constant (including oddities such as <code>'\\0'</code> and <code>false</code>) is convertible to a null pointer value.</p>\n", "LastActivityDate": "2013-03-25T13:39:59.493", "CommentCount": "0", "CreationDate": "2013-03-25T13:39:59.493", "ParentId": "15616177", "Score": "0", "OwnerUserId": "204847"}, "15616280": {"Id": "15616280", "PostTypeId": "2", "Body": "<p>NULL has got wide meaning in pointers. Most probably a pointer declared as NULL is something that cannot be referenced but just can be assigned something. whereas 0 or 0x0 can be the value of the pointer which can be both referenced and assigned.</p>\n", "LastActivityDate": "2013-03-25T13:34:22.147", "CommentCount": "0", "CreationDate": "2013-03-25T13:34:22.147", "ParentId": "15616177", "Score": "1", "OwnerUserId": "2082521"}, "15616230": {"Id": "15616230", "PostTypeId": "2", "Body": "<p>Well, NULL may not be zero, it just usually is. It's dependant on your platform - here are some nasty <a href=\"http://c-faq.com/null/machexamp.html\" rel=\"nofollow\">examples</a> of non-zero NULL machines.</p>\n", "LastActivityDate": "2013-03-25T13:32:30.833", "CommentCount": "1", "CreationDate": "2013-03-25T13:32:30.833", "ParentId": "15616177", "Score": "3", "OwnerUserId": "1109725"}, "15616233": {"Id": "15616233", "PostTypeId": "2", "Body": "<p>Generally in <code>C++</code> you shouldn't use <code>NULL</code>. In <code>C</code>, <code>NULL</code> is a macro for <code>(void*)0</code>, whereas in <code>C++</code> you should use <code>0</code> instead of <code>NULL</code>. But you can't use <code>false</code> instead of <code>0</code> for pointers! Apart from that, they are actually the same, sometimes causing confusion.<br>\nThis is why in <code>C++11</code> a <code>nullptr</code> was defined as use for pointers.</br></p>\n", "LastEditorUserId": "2000082", "LastActivityDate": "2013-03-25T13:52:22.200", "Score": "1", "CreationDate": "2013-03-25T13:32:43.253", "ParentId": "15616177", "CommentCount": "1", "OwnerUserId": "2000082", "LastEditDate": "2013-03-25T13:52:22.200"}});