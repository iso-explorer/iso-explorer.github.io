post_cb({"26660334": {"ParentId": "26660180", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>So the <code>clang</code> document says (<em>emphasis mine</em>):</p>\n<blockquote>\n<p id=\"so_26660180_26660334_0\">This feature allows identifiers to contain certain Unicode characters,\n  <strong>as specified by the active language standard</strong>;</p>\n</blockquote>\n<p>This is covered in the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf\" rel=\"nofollow\">draft C++ standard</a> <em>Annex E</em>, the characters allowed are as follows:</p>\n<blockquote>\n<p id=\"so_26660180_26660334_1\">E.1 Ranges of characters allowed [charname.allowed]</p>\n<p id=\"so_26660180_26660334_2\">00A8, 00AA, 00AD,</p>\n<p id=\"so_26660180_26660334_3\">00AF, 00B2-00B5, 00B7-00BA, 00BC-00BE, 00C0-00D6, 00D8-00F6, 00F8-00FF</p>\n<p id=\"so_26660180_26660334_4\">0100-167F, 1681-180D, 180F-1FFF 200B-200D, 202A-202E, 203F-2040, 2054,</p>\n<p id=\"so_26660180_26660334_5\">2060-206F 2070-218F, 2460-24FF, 2776-2793, 2C00-2DFF, 2E80-2FFF</p>\n<p id=\"so_26660180_26660334_6\">3004-3007, 3021-302F, 3031-303F</p>\n<p id=\"so_26660180_26660334_7\">3040-D7FF F900-FD3D, FD40-FDCF,</p>\n<p id=\"so_26660180_26660334_8\">FDF0-FE44, FE47-FFFD </p>\n<p id=\"so_26660180_26660334_9\">10000-1FFFD, 20000-2FFFD, 30000-3FFFD,\n  40000-4FFFD, 50000-5FFFD, 60000-6FFFD, 70000-7FFFD, 80000-8FFFD,\n  90000-9FFFD, A0000-AFFFD, B0000-BFFFD, C0000-CFFFD, D0000-DFFFD, \n  E0000-EFFFD</p>\n</blockquote>\n<p>The code for infinity <code>221E</code> is not included in the list.</p>\n<p><em>For reference</em>: these are the codes above converted to unicode characters (some of them may not display correctly in all browsers/available fonts).</p>\n<pre><code>\u00a8, \u00aa, \u00ad,\n\n\u00af, \u00b2-\u00b5, \u00b7-\u00ba, \u00bc-\u00be, \u00c0-\u00d6, \u00d8-\u00f6, \u00f8-\u00ff\n\n\u0100-\u167f, \u1681-\u180d, \u180f-\u1fff \u200b-\u200d, \u202a-\u202e, \u203f-\u2040, \u2054,\n\n\u2060-\u206f \u2070-\u218f, \u2460-\u24ff, \u2776-\u2793, \u2c00-\u2dff, \u2e80-\u2fff\n\n\u3004-\u3007, \u3021-\u302f, \u3031-\u303f\n\n\u3040-\ud7ff \uf900-\ufd3d, \ufd40-\ufdcf,\n\n\ufdf0-\ufe44, \ufe47-\ufffd\n\n-, -, -, -, -, -, -, -, -, -, -, -, -, -\n</code></pre>\n<p>I could not find an extensive document that covers the rationale for the ranges chosen although <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3146.html\" rel=\"nofollow\">N3146: Recommendations for extended identifier characters for C and C++</a> does provides some details on the influences.</p>\n", "OwnerUserId": "1708801", "LastEditorUserId": "1708801", "LastEditDate": "2014-11-06T04:16:34.173", "Id": "26660334", "Score": "9", "CreationDate": "2014-10-30T18:10:53.280", "LastActivityDate": "2014-11-06T04:16:34.173"}, "26660180": {"CommentCount": "4", "AcceptedAnswerId": "26660334", "LastEditDate": "2014-11-05T03:01:17.470", "LastEditorUserId": "225186", "CreationDate": "2014-10-30T18:02:25.383", "LastActivityDate": "2014-11-06T04:16:34.173", "PostTypeId": "1", "ViewCount": "1718", "FavoriteCount": "3", "Title": "Unicode/special characters in variable names in clang not allowed?", "Id": "26660180", "OwnerUserId": "225186", "Body": "<blockquote>\n<p id=\"so_26660180_26660180_0\">This question has unicode text that may not display correctly in all browsers.</p>\n</blockquote>\n<p><code>clang</code> now (&gt;3.3) supports unicode characters in <em>variable names</em> <a href=\"http://llvm.org/releases/3.3/tools/clang/docs/ReleaseNotes.html#major-new-features\" rel=\"nofollow\">http://llvm.org/releases/3.3/tools/clang/docs/ReleaseNotes.html#major-new-features</a>.</p>\n<p>However some special character are still forbiden. </p>\n<pre><code>int main(){\n    double \u03b1 = 2.; // alpha, ok!\n    double \u221e = 99999.; // infinity, error\n}\n</code></pre>\n<p>giving:</p>\n<pre><code>error: non-ASCII characters are not allowed outside of literals and identifiers\n        double \u221e = 99999.;\n</code></pre>\n<p><strong>What is the fundamental difference between <code>\u03b1</code> (alpha) and <code>\u221e</code> (infinty) for <code>clang</code>?</strong> That the former is unicode and the latter is not unicode but at the same time is not ASCII?</p>\n<p><strong>Is there a workaround or an option to allow this set of characters in <code>clang</code> (or BTW in <code>gcc</code>)?</strong> </p>\n<p><em>Notes: 1) <code>\u221e</code> is just an example, there are a lot of characters that are potentially useful but also forbidden, like <code>\u222b</code> or <code>\u2202</code>. 2) I am not asking if it is good idea, please take it as a technical question. 3) I am interested in C++ compiler of <code>clang 3.4</code> in Linux (<code>gcc 4.8.3</code> doesn't support this). I am saving the source files with <code>gedit</code> using <code>UTF-8</code> encoding and <code>Unix/Linux</code> line ending. 4) adding other normal first characters doesn't help: <code>_\u221e</code></em></p>\n<hr>\n<blockquote>\n<p id=\"so_26660180_26660180_1\">The answers point to a definite NO. Some ranges are indeed not\n  allowed nor will they be soon. To move one step further to total\n  craziness, the best alternative I found was to use \n  characters that effectively look the same. (Now, <em>this</em> I might admit is not a good idea.) Those alternatives can be found here\n  <a href=\"http://shapecatcher.com/\" rel=\"nofollow\">http://shapecatcher.com/</a>. The result (sorry if it hurts your eyes):</p>\n<pre><code>//    double \u221e = 99999.; // still error\n//    double \u29de = 99999.; // infinity negated still error\n  double \ua74f = 99999.; // letter oo\n  double \ua74e = 99999.; // letter OO\n//    double \u29dc = 99999.; // incomplete infinity still error\n</code></pre>\n<p id=\"so_26660180_26660180_2\">Other \"alternative\" dead ringers mentioned in the question that are in the allowed range: <code>\u0283</code>, <code></code>.</p>\n</blockquote>\n</hr>", "Tags": "<c++><gcc><unicode><clang>", "Score": "5", "AnswerCount": "1"}, "bq_ids": {"n4659": {"so_26660180_26660334_9": {"section_id": 6754, "quality": 1.0, "length": 14}, "so_26660180_26660334_3": {"section_id": 6754, "quality": 1.0, "length": 7}, "so_26660180_26660334_5": {"section_id": 6754, "quality": 1.0, "length": 6}, "so_26660180_26660334_4": {"section_id": 6754, "quality": 1.0, "length": 7}}}});