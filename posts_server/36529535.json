post_cb({"36529535": {"ViewCount": "134", "Body": "<p>I \"wanted\" to use <code>void</code> as a placeholder (or overload disambiguator) or even as a shortcut to have functions with <code>void</code> return type called before entering a specific function like in the following <a href=\"http://coliru.stacked-crooked.com/a/d1f1f34e54d3a2a6\" rel=\"nofollow\">example</a>: </p>\n<pre><code>int f(void , int)\n{\n    return 0; \n}\n\nvoid g()\n{\n}\n\nint main()\n{\n    f(g(), 1); \n}\n</code></pre>\n<p>Now, this is not a real world problem (I know that I could just call <code>g()</code> before calling <code>f()</code>) but I was wondering why this is not doable, especially when I can  e.g. explicitly return <code>void</code> types i.e. this is legal : </p>\n<pre><code>void h()\n{\n    return g(); // this does a return void\n}\n</code></pre>\n<hr>\n<h2>EDIT</h2>\n<p>To explain the rationale behind asking this, I first thought that according to C legacy, <code>void</code> would be an <strong>incomplete</strong> type, so incomplete types cannot appear as function parameters, unlike pointers to incomplete types and hence the <code>void*</code> commonality. Now this would explain <code>void</code> as a \"special case\" signal for \"no parameters\" but after C++11 the Standard reads (<strong>3.9 [basic.types]</strong>) : </p>\n<blockquote id=\"so_36529535_36529535_0\">\n<ol start=\"10\">\n<li>A type is a literal type if it is: \n  \n  <ul>\n<li>void; or</li>\n<li>a scalar type; or\n  ....</li>\n</ul></li>\n</ol>\n</blockquote>\n<p><strong>Being a literal type</strong>, I can't find elsewhere any rationale that would exclude void from candidate types for function parameters, neither the equivalent of old C's (prior to C11) \"<code>void</code> is not a type\". Now, my search may be lacking the required depth which is what I try to compensate for in  this Q </p>\n</hr>", "AcceptedAnswerId": "36530041", "Title": "Why can't void parameters exist in functions with more than one argument?", "CreationDate": "2016-04-10T12:11:24.697", "Id": "36529535", "CommentCount": "9", "LastEditDate": "2016-04-10T12:28:42.323", "PostTypeId": "1", "LastEditorUserId": "4224575", "LastActivityDate": "2016-04-10T16:52:28.143", "Score": "0", "OwnerUserId": "4224575", "Tags": "<c++>", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_36529535_36529535_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 4706}}, "n3337": {"so_36529535_36529535_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 4515}}, "n4659": {"so_36529535_36529535_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 8717}}}, "36529553": {"Id": "36529553", "PostTypeId": "2", "Body": "<p>The only real problem here is your function prototype:</p>\n<p>int f(void , int)</p>\n<p>You cannot give a <code>void</code> as a parameter. You can set it as a return value, meaning \"this function returns nothing\", or you can give it as only parameter, like this:</p>\n<pre><code>int f(void)\n</code></pre>\n<p>It would means \"this function takes no parameter\", but not as a parameter.</p>\n<p>But to give a parameter of <code>void</code> type would mean you could declare a <code>void</code> variable and give it to your function, which would have no sense.</p>\n<p>In your sample:</p>\n<pre><code>void h()\n{\n    return g(); // this does a return void\n}\n</code></pre>\n<p>This does <strong>not</strong> a return void. This does return nothing. This is as legal as:</p>\n<pre><code>void h()\n{\n    return;\n}\n</code></pre>\n<p>So here, you can clearly see <code>void</code> is just a meaning of nothing.</p>\n<p>Try to use functions returning void as arguments, like you did:</p>\n<pre><code>f(g(), 1); \n</code></pre>\n<p>Should be avoided as much as possible.</p>\n", "LastEditorUserId": "4745527", "LastActivityDate": "2016-04-10T12:18:41.737", "Score": "1", "CreationDate": "2016-04-10T12:13:36.067", "ParentId": "36529535", "CommentCount": "0", "OwnerUserId": "4745527", "LastEditDate": "2016-04-10T12:18:41.737"}, "36529557": {"Id": "36529557", "PostTypeId": "2", "Body": "<p>A <code>void</code> parameter means the function has <em>no</em> parameters<sup>*</sup>. It wouldn't make much sense for a function with no parameters to have some parameters.</p>\n<hr>\n<p><sup>* This is inherited from C (and presumably kept for compatibility with that language), where a function declared without a parameter list is a function that can take any number of parameters of any type. In C++, such a function would have no parameters, removing the need to use <code>void</code> parameters.</sup></p>\n</hr>", "LastEditorUserId": "661519", "LastActivityDate": "2016-04-10T12:15:42.297", "Score": "3", "CreationDate": "2016-04-10T12:13:58.250", "ParentId": "36529535", "CommentCount": "3", "OwnerUserId": "661519", "LastEditDate": "2016-04-10T12:15:42.297"}, "36530041": {"Id": "36530041", "PostTypeId": "2", "Body": "<p>I've wanted a void argument type in order to have a parameter that is zero-cost in release builds:</p>\n<pre><code>#ifdef NDEBUG\n    typedef DebugTracker* Foo;\n#else\n    typedef void Foo;\n#endif\n\nint SomeFunction(Foo foo, ...) {\n    ...\n}\n</code></pre>\n<blockquote>\n<p id=\"so_36529535_36530041_0\">I can't find elsewhere any rationale that would exclude void from candidate types for function parameters</p>\n</blockquote>\n<p>@juanchopanza has pointed out one thing, which is that C++ inherited C's <code>f(void)</code> meaning a function that takes no arguments.  That being so, C++ still could have the feature but make void parameters act as if they had a default value of nothing...so having such a default if they were at the end of argument lists.</p>\n<p>In language-design space, it's always easy to think of the case you have in mind and say \"why not?\".  And if you look at something like <a href=\"https://en.wikipedia.org/wiki/Libffi\" rel=\"nofollow\">libffi</a> then it seems like prohibiting void for arguments makes the system less \"pure\".  There's a count of bytes for each argument, how hard would it be to allow 0?</p>\n<p>But there are questions to answer.</p>\n<p>If void parameters are possible, then that posits the existence of void variables.  How does a void variable act?  What's its address?  If you can't take the address of a void variable, how does that impact the compiler...the linker...what's going to happen with name-mangling, etc.</p>\n<p>I don't know enough to tell you if the pretzel of the existing C and C++ standard can be untwisted in a way that void parameters do more good than harm.  It would be an interesting study to take a compiler and some large body of code and think through the details.  I upvoted the question as reasonable to ask, but also voted to close as primarily opinion-based, so... that's my 0.02.</p>\n", "LastEditorUserId": "211160", "LastActivityDate": "2016-04-10T16:52:28.143", "Score": "0", "CreationDate": "2016-04-10T12:56:55.167", "ParentId": "36529535", "CommentCount": "0", "OwnerUserId": "211160", "LastEditDate": "2016-04-10T16:52:28.143"}});