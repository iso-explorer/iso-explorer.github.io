post_cb({"bq_ids": {"n4140": {"so_14533172_14533216_3": {"length": 15, "quality": 0.7142857142857143, "section_id": 3290}, "so_14533172_14533216_0": {"length": 7, "quality": 1.0, "section_id": 3290}}, "n3337": {"so_14533172_14533216_3": {"length": 15, "quality": 0.7142857142857143, "section_id": 3160}, "so_14533172_14533216_0": {"length": 7, "quality": 1.0, "section_id": 3160}}, "n4659": {"so_14533172_14533216_3": {"length": 15, "quality": 0.7142857142857143, "section_id": 4052}, "so_14533172_14533216_0": {"length": 7, "quality": 1.0, "section_id": 4052}}}, "14533216": {"Id": "14533216", "PostTypeId": "2", "Body": "<p>According to the standard</p>\n<blockquote>\n<p id=\"so_14533172_14533216_0\">An object whose initializer is an empty set of parentheses, i.e., (),\n  shall be value-initialized.</p>\n<p id=\"so_14533172_14533216_1\">[Note: since () is not permitted by the syntax for initializer,</p>\n<p id=\"so_14533172_14533216_2\">X a (); </p>\n<p id=\"so_14533172_14533216_3\">is not the declaration of an object of class X, but the\n  declaration of a function taking no argument and returning an X. The\n  form () is permitted in certain other initialization contexts (5.3.4,\n  5.2.3, 12.6.2). \u2014end note ]</p>\n</blockquote>\n<p>So, you need to change your declarations as follows</p>\n<pre><code>int main()\n{\n    Date d1;\n    Date d2;\n    Date d3;\n    Directory d(\"Hello\", 12, d1, d2, d3, 0);\n    cout &lt;&lt; d;\n}\n</code></pre>\n", "LastEditorUserId": "1532460", "LastActivityDate": "2013-01-26T02:39:22.003", "Score": "5", "CreationDate": "2013-01-26T02:25:02.920", "ParentId": "14533172", "CommentCount": "6", "OwnerUserId": "1532460", "LastEditDate": "2013-01-26T02:39:22.003"}, "14533172": {"ViewCount": "1881", "Body": "<p>Note: I'm using Visual Studio 2010.</p>\n<p>There are two important classes here, Date and Directory.</p>\n<pre><code>class Date\n{\nprivate:\n    int month, day, year;\npublic:\n    Date();\n    Date(int month, int day, int year);\n};\n\nclass Directory : public [Superclass]\n{\nprivate:\n    File* fileContents[50];\n    Directory* dirContents[5];\npublic:\n    Directory();\n    Directory(char* name, \n        long size, \n        Date dateCreated, \n        Date dateModified,\n        Date dateAccessed,\n        int attributes);\n};\n</code></pre>\n<p>I defined the constructors farther down - the <code>Date</code> constructor works just like you think it does. Now, I'm <strong>really</strong> new to C++, so I can't even comprehend the error messages I'm getting. If I try to use the default constructor for <code>Directory</code>, I get this error message:</p>\n<pre><code>error LNK2019: unresolved external symbol \"class Directory __cdecl d(void)\" (?d@@YA?AVDirectory@@XZ) referenced in function _main\n</code></pre>\n<p>If I try to make it by using 3 <code>Date</code> objects, with this code:</p>\n<pre><code>int main()\n{\n    Date d1();\n    Date d2();\n    Date d3();\n    Directory d(\"Hello\", 12, d1, d2, d3, 0);\n    cout &lt;&lt; d;\n}\n</code></pre>\n<p>These are my error messages:</p>\n<pre><code>error C2664: 'Directory::Directory(char *,long,Date,Date,Date,int)' : cannot convert parameter 3 from 'Date (__cdecl *)(void)' to 'Date'\n</code></pre>\n<p>IntelliSense: <code>no instance of constructor \"Directory::Directory\" matches the argument list</code></p>\n<p>EDIT: So, in a continuing effort to make zero sense to me, VS has decided to compile my program fine when the three <code>Date</code> arguments are created with <code>Date da[3]</code> and the arguments for the constructor are <code>(\"Hello\", 12, d[0], d[1], d[2], 0)</code>. </p>\n", "AcceptedAnswerId": "14533216", "Title": "\"Cannot convert parameter from '[classname](_cdecl *)(void)' to '[classname]'\" error when constructing an object", "CreationDate": "2013-01-26T02:17:47.860", "Id": "14533172", "CommentCount": "0", "LastEditDate": "2013-01-26T02:53:45.547", "PostTypeId": "1", "LastEditorUserId": "1532460", "LastActivityDate": "2013-01-26T03:05:52.730", "Score": "2", "OwnerUserId": "2012847", "Tags": "<c++><visual-c++><constructor>", "AnswerCount": "2"}, "14533443": {"Id": "14533443", "PostTypeId": "2", "Body": "<p>C++ has a rather irritating corner case when it comes to variable declarations.</p>\n<p>The following is legal C++:</p>\n<pre><code>int main() {\n    int foo(int x);\n    return foo(42);\n}\n</code></pre>\n<p>It simply sets up a declaration of a function named <code>foo</code> in the scope of <code>main</code>. For the program to run, <code>foo</code> will need to be defined somewhere, or you will get a link error.</p>\n<p>Now, consider</p>\n<pre><code>Date foo();\n</code></pre>\n<p>This is the syntax for a forward declaration of a function <code>foo</code> taking no arguments and returning a <code>Date</code> object. But, <code>Date foo(42);</code> is a declaration of a variable <code>foo</code> of type <code>Date</code> initialized with a single integer as an argument. Your compiler normally figures out if you wanted a variable or a function based on whether the argument is a type or an expression, but in the zero-argument case (the default constructor), the compiler can't tell and therefore <em>defaults to the function declaration</em> (since the standard says so).</p>\n<p>So, by writing</p>\n<pre><code>Directory d();\n</code></pre>\n<p>you forward-declared a function <code>d</code> taking nothing and returning <code>Directory</code>. When you link the program, you get an error saying that the function <code>class Directory __cdecl d(void)</code> (a function called <code>d</code> taking nothing and returning a <code>Directory</code>) is not defined, since C++ only saw a forward declaration of this function. </p>\n<p>To solve this, in C++, writing</p>\n<pre><code>Directory d;\n</code></pre>\n<p>will create a variable of type <code>Dictionary</code> and initialize it with the default constructor.</p>\n", "LastActivityDate": "2013-01-26T03:05:52.730", "CommentCount": "0", "CreationDate": "2013-01-26T03:05:52.730", "ParentId": "14533172", "Score": "2", "OwnerUserId": "1204143"}});