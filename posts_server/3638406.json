post_cb({"3641623": {"Id": "3641623", "PostTypeId": "2", "Body": "<p>I still can't find anything which says this explicitly, but if you modify a key[*], then for example your comparator doesn't satisfy the requirements of 25.3 (strict weak order):</p>\n<blockquote>\n<p id=\"so_3638406_3641623_0\">comp induces a well-defined relation\n  on the equivalence classes determined\n  by equiv</p>\n</blockquote>\n<p><code>comp</code> isn't a well-defined relation if it returns different values for the same inputs at different times.</p>\n<p>In your case I believe that it's fine to modify fields of <code>MyClass</code> which aren't involved in the comparison.</p>\n<p>Interestingly, 23.1.2/2 says, \"Each associative container is parameterized on Key and an ordering relation Compare that induces a strict weak ordering (25.3) on elements of Key\". I think we can take this to mean that the comparator induces a strict weak ordering on <code>Key</code> objects <em>which are elements of the container</em>, not necessarily on all objects of type <code>Key</code>. For instance if the Key is a pointer then I'm pretty sure it's fine to write a comparator that dereferences it, provided you don't use a null pointer as a key. By the same reasoning, I hope we can modify a key which isn't in the container.</p>\n<p>[*] by \"modify\", I mean do anything which changes the results of the comparator with that key and some other key. In this case of course you aren't really modifying the key itself (which is just a pointer value), but that's what I'm calling it.</p>\n", "LastActivityDate": "2010-09-04T09:22:12.023", "CommentCount": "0", "CreationDate": "2010-09-04T09:22:12.023", "ParentId": "3638406", "Score": "1", "OwnerUserId": "13005"}, "3638438": {"Id": "3638438", "PostTypeId": "2", "Body": "<p>The usual is to remove, update, and re-insert. Virtually anything else at least temporarily violates the primary invariant of a set/multiset, which clearly isn't a good thing.</p>\n", "LastActivityDate": "2010-09-03T18:13:36.173", "CommentCount": "0", "CreationDate": "2010-09-03T18:13:36.173", "ParentId": "3638406", "Score": "3", "OwnerUserId": "179910"}, "bq_ids": {"n4140": {"so_3638406_3641623_0": {"length": 8, "quality": 1.0, "section_id": 1396}}, "n3337": {"so_3638406_3641623_0": {"length": 8, "quality": 1.0, "section_id": 1390}}, "n4659": {"so_3638406_3641623_0": {"length": 8, "quality": 1.0, "section_id": 1514}}}, "3638406": {"ViewCount": "388", "Body": "<p>I have a multiset with a custom predicate function, e.g <code>multiset&lt;MyClass *,MyCompFunc&gt;</code> where MyCompFunc looks at an attribute on the MyClass objects. During the progress of the application, the objects might change in a way that should cause them to be reordered.</p>\n<p>What's the correct way to get the multiset to become reordered when this happens? Manually sort it, or remove the modified object, update it, and re-insert it?</p>\n", "AcceptedAnswerId": "3638438", "Title": "Ensure multiset is reordered when objects change", "CreationDate": "2010-09-03T18:08:33.433", "Id": "3638406", "CommentCount": "3", "LastEditDate": "2010-09-03T18:19:04.860", "PostTypeId": "1", "LastEditorUserId": "123111", "LastActivityDate": "2010-09-04T09:22:12.023", "Score": "0", "OwnerUserId": "197229", "Tags": "<c++><stl><multiset>", "AnswerCount": "4"}, "3638456": {"Id": "3638456", "PostTypeId": "2", "Body": "<p>If you will be changing part of the comparison key of the object, first remove the item from the set, then perform the modification, then add it back into the set. This way you avoid breaking the invariant of the set, as sets just aren't designed to reorder on a key change.</p>\n", "LastActivityDate": "2010-09-03T18:15:55.163", "CommentCount": "0", "CreationDate": "2010-09-03T18:15:55.163", "ParentId": "3638406", "Score": "0", "OwnerUserId": "251738"}, "3638430": {"Id": "3638430", "PostTypeId": "2", "Body": "<p>Don't access the objects by reference. Copy them, and re-insert them if their key changed. You might use an observer to automate this.</p>\n", "LastActivityDate": "2010-09-03T18:12:23.260", "CommentCount": "0", "CreationDate": "2010-09-03T18:12:23.260", "ParentId": "3638406", "Score": "0", "OwnerUserId": "456"}});