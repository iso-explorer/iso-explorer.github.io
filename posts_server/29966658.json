post_cb({"bq_ids": {"n4140": {"so_29966658_29966804_1": {"length": 21, "quality": 1.0, "section_id": 455}, "so_29966658_29966804_0": {"length": 24, "quality": 1.0, "section_id": 451}}, "n3337": {"so_29966658_29966804_1": {"length": 21, "quality": 1.0, "section_id": 446}, "so_29966658_29966804_0": {"length": 24, "quality": 1.0, "section_id": 442}}, "n4659": {"so_29966658_29966804_1": {"length": 21, "quality": 1.0, "section_id": 478}, "so_29966658_29966804_0": {"length": 24, "quality": 1.0, "section_id": 474}}}, "29966839": {"Id": "29966839", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_29966658_29966839_0\">I wondered why you have that ampersand and the const in there</p>\n</blockquote>\n<p>The ampersand means that the object to copy is passed by reference. The <code>const</code> means that the reference can't be used to modify it; which is what you'd expect when copying it.</p>\n<blockquote>\n<p id=\"so_29966658_29966839_1\">Would not just <code>ClassName(ClassName)</code> be enough?</p>\n</blockquote>\n<p>That would mean the object is passed by value. To do that, it would have to be copied. To copy it, you'd have to call the copy constructor. To do that, you'd have to pass the object by value. To do that, it would have to be copied. And so on.</p>\n<p>So no, a copy constructor can't take its parameter by value.</p>\n", "LastEditorUserId": "204847", "LastActivityDate": "2015-04-30T11:48:26.240", "Score": "1", "CreationDate": "2015-04-30T11:43:10.730", "ParentId": "29966658", "CommentCount": "2", "OwnerUserId": "204847", "LastEditDate": "2015-04-30T11:48:26.240"}, "29966740": {"Id": "29966740", "PostTypeId": "2", "Body": "<p><code>const</code> means you can also make a copy of a class that is constant (and you make the promise that you will not modify the class that you're copying.</p>\n<p>The ampersand <code>&amp;</code> means your copy constructor takes a reference to the thing it's trying to make a copy of (without the ampersand it would get a copy of it, which is impossible as we're actually trying to make a copy).</p>\n", "LastActivityDate": "2015-04-30T11:38:52.897", "CommentCount": "0", "CreationDate": "2015-04-30T11:38:52.897", "ParentId": "29966658", "Score": "1", "OwnerUserId": "2422450"}, "29966804": {"Id": "29966804", "PostTypeId": "2", "Body": "<p>From [class.copy]/2 in C++14:</p>\n<blockquote>\n<p id=\"so_29966658_29966804_0\">A non-template constructor for class <code>X</code> is a copy constructor if its first parameter is of type <code>X&amp;</code>, <code>const X&amp;</code>, <code>volatile X&amp;</code> or <code>const volatile X&amp;</code>, and either there are no other parameters or else all other parameters have default arguments .</p>\n</blockquote>\n<p>So your suggestion would not be a copy-constructor, according to the definition of the language.</p>\n<p>In fact your suggestion is ill-formed according to [class.copy]/6:</p>\n<blockquote>\n<p id=\"so_29966658_29966804_1\">A declaration of a constructor for a class <code>X</code> is ill-formed if its first parameter is of type (optionally cv-qualified) <code>X</code> and either there are no other parameters or else all other parameters have default arguments.</p>\n</blockquote>\n", "LastEditorUserId": "1505939", "LastActivityDate": "2015-04-30T11:50:12.430", "Score": "2", "CreationDate": "2015-04-30T11:42:04.627", "ParentId": "29966658", "CommentCount": "2", "OwnerUserId": "1505939", "LastEditDate": "2015-04-30T11:50:12.430"}, "29966736": {"Id": "29966736", "PostTypeId": "2", "Body": "<p>The syntax <code>f(Classname)</code> means that the argument is copied, while <code>f(const Classname&amp;)</code> makes a reference to the argument.  </p>\n<p>It would however be quite bad to copy the argument which is provided to the copy constructor, which should define how such a copy is made...</p>\n", "LastEditorUserId": "2069064", "LastActivityDate": "2015-04-30T11:39:30.890", "Score": "1", "CreationDate": "2015-04-30T11:38:46.993", "ParentId": "29966658", "CommentCount": "0", "OwnerUserId": "1076143", "LastEditDate": "2015-04-30T11:39:30.890"}, "29966731": {"Id": "29966731", "PostTypeId": "2", "Body": "<p>In order to pass something by value, you need to be able to make a copy of it. How do we make a copy? The copy constructor of course! So if we define the copy constructor like <code>ClassName(ClassName)</code>, we pass in a <code>ClassName</code>, call the copy constructor, which calls the copy constructor which... </p>\n<p>This results in infinite recursion; not a very reasonable way of copying an object. That is why we pass by reference: so we don't need to make any other copies. The <code>const</code> is there because copying an object shouldn't modify it, otherwise you get something horrific like <code>auto_ptr</code>.</p>\n<p>Additionally, with C++11 it is preferred to use <code>=delete</code> to stop people copying your class rather than making the copy constructor private:</p>\n<pre><code>ClassName (const Classname&amp;) = delete;\n</code></pre>\n", "LastActivityDate": "2015-04-30T11:38:33.743", "CommentCount": "0", "CreationDate": "2015-04-30T11:38:33.743", "ParentId": "29966658", "Score": "1", "OwnerUserId": "496161"}, "29966658": {"ViewCount": "158", "Body": "<p>in 2 hours I'll take an exam on C++ and I'm still wondering about the syntax of the copy constructor.</p>\n<p>So far what I understand is that you put the CopyConstructor in private so that when some function or whatever wants to copy your class it is not going to work because it will no have access to private variables. So you can check if you missed any pointers that will only make a shallow copy.</p>\n<p>So far so good.</p>\n<p>Now the syntax as I read it is</p>\n<pre><code>ClassName(const ClassName &amp;)\n</code></pre>\n<p>and I wondered why you have that ampersand and the const in there. Would not just ClassName(ClassName) be enough?</p>\n", "AcceptedAnswerId": "29966804", "Title": "Copy constructor in private class Syntax", "CreationDate": "2015-04-30T11:35:00.013", "Id": "29966658", "CommentCount": "5", "PostTypeId": "1", "LastActivityDate": "2015-04-30T11:50:12.430", "Score": "0", "OwnerUserId": "4241871", "Tags": "<c++><private><copy-constructor>", "AnswerCount": "5"}});