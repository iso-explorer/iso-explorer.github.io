post_cb({"18180247": {"Id": "18180247", "PostTypeId": "2", "Body": "<p>After pop() the references are invalid. The output shows the newly pushed value due to implementation details of the std::stack - do not rely on it, it could be rubbish, too.</p>\n", "LastActivityDate": "2013-08-12T05:41:53.530", "CommentCount": "0", "CreationDate": "2013-08-12T05:41:53.530", "ParentId": "18180127", "Score": "2", "OwnerUserId": "2249683"}, "bq_ids": {"n4140": {"so_18180127_18180414_0": {"length": 16, "quality": 0.5333333333333333, "section_id": 820}}, "n3337": {"so_18180127_18180414_0": {"length": 16, "quality": 0.5333333333333333, "section_id": 809}}, "n4659": {"so_18180127_18180414_0": {"length": 18, "quality": 0.6, "section_id": 879}}}, "18180414": {"Id": "18180414", "PostTypeId": "2", "Body": "<p>As stated in the C++11 standard (23.6.5.2 - <code>stack</code> definition)</p>\n<pre><code>reference top() { return c.back(); }\nconst_reference top() const { return c.back(); }\n...\nvoid push(const value_type&amp; x) { c.push_back(x); }\nvoid push(value_type&amp;&amp; x) { c.push_back(std::move(x)); }\n...\nvoid pop() { c.pop_back(); }\n</code></pre>\n<p>Where you are using the default underlying container <code>std::deque</code>, <a href=\"https://stackoverflow.com/questions/6438086/iterator-invalidation-rules\">iterator/reference invalidation rules</a> states that (quoting from <a href=\"https://stackoverflow.com/a/6442829/1619294\">this</a> answer):</p>\n<blockquote>\n<p id=\"so_18180127_18180414_0\">deque: erasing the last element invalidates only iterators and\n  references to the erased elements and the past-the-end iterator;\n  erasing the first element invalidates only iterators and references to\n  the erased elements; erasing any other elements invalidates all\n  iterators and references (including the past-the-end iterator)\n  [23.3.3.4/4]</p>\n</blockquote>\n<p>By using <code>std::stack::pop</code>, you are necessarily calling <code>std::deque::pop_back()</code> which, as said above, <strong>invalidates the reference previously returned by <code>std::stack::top</code></strong> (which subsequently calls <code>std::deque::back()</code>). Therefore, you should never rely on this behavior, as it is undefined, not portable, and is wrong.</p>\n<p>The solution if you want to have the original value of the stack's top is to therefore copy the top element, and not have a reference to it. That is, if you want to correctly retain the original value after you have popped an element out of the stack.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2013-08-12T05:58:40.953", "Score": "3", "CreationDate": "2013-08-12T05:58:40.953", "ParentId": "18180127", "CommentCount": "0", "OwnerUserId": "1619294", "LastEditDate": "2017-05-23T10:25:26.980"}, "18180127": {"ViewCount": "363", "Body": "<p>I am confused by the reference to the top element of a stack.</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;stack&gt;\nusing namespace std;\n\nint main()\n{\n    stack&lt;int&gt; s;\n    s.push(1);\n\n    int        x = s.top();\n    int&amp;       y = s.top();\n    const int&amp; z = s.top();\n\n    cout &lt;&lt; x &lt;&lt; '\\t' &lt;&lt; y &lt;&lt; '\\t' &lt;&lt; z &lt;&lt; endl;\n\n    s.pop();\n    s.push(2);\n\n    cout &lt;&lt; x &lt;&lt; '\\t' &lt;&lt; y &lt;&lt; '\\t' &lt;&lt; z &lt;&lt; endl;\n}\n/* Output:\n1       1       1\n1       2       2\n */\n</code></pre>\n<p>I thought the reference to the top element should NOT be changed, but after a new element is pushed to the stack, the value that reference refers to is changed.</p>\n<p>This is weird to me, because if the type is NOT <code>int</code> for the stack, say it's type of <code>MyClass</code> (very big data), is there a way to safely refer to the old top element? (Because I don't want to make an expensive copy operation).</p>\n<p>I guess this behavior might be implementation-dependent, sign!</p>\n", "AcceptedAnswerId": "18180414", "Title": "What's the Right Behavior of Reference to the Return Value of stack<int>.top() in C++", "CreationDate": "2013-08-12T05:32:53.777", "Id": "18180127", "CommentCount": "3", "LastEditDate": "2013-08-12T05:48:53.030", "PostTypeId": "1", "LastEditorUserId": "301336", "LastActivityDate": "2013-08-12T05:58:40.953", "Score": "1", "OwnerUserId": "301336", "Tags": "<c++><stl><reference><stack>", "AnswerCount": "2"}});