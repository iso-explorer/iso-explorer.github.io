post_cb({"bq_ids": {"n4140": {"so_34433172_34433523_1": {"section_id": 12, "quality": 0.9333333333333333, "length": 14}, "so_34433172_34433523_0": {"section_id": 12, "quality": 0.7333333333333333, "length": 11}}, "n3337": {"so_34433172_34433523_1": {"section_id": 9, "quality": 0.9333333333333333, "length": 14}, "so_34433172_34433523_0": {"section_id": 9, "quality": 0.7333333333333333, "length": 11}}, "n4659": {"so_34433172_34433523_1": {"section_id": 13, "quality": 0.9333333333333333, "length": 14}, "so_34433172_34433523_0": {"section_id": 13, "quality": 0.7333333333333333, "length": 11}}}, "34433523": {"ParentId": "34433172", "CommentCount": "0", "Body": "<p>member function != standalone function</p>\n<p>Only standalone functions can be converted to pointer implicitely.</p>\n<blockquote>\n<p id=\"so_34433172_34433523_0\"><strong>4.3 Function-to-pointer conversion [conv.func]</strong><br>\n<strong>1</strong> An lvalue of function type T can be converted to a prvalue of type \u201cpointer to T.\u201d The result is a pointer to the function. 58</br></p>\n<p id=\"so_34433172_34433523_1\">58) <strong>This conversion never applies to non-static member functions</strong>\n   because an lvalue that refers to a non-static member function cannot\n  be obtained.</p>\n</blockquote>\n", "OwnerUserId": "3410396", "PostTypeId": "2", "Id": "34433523", "Score": "4", "CreationDate": "2015-12-23T10:24:45.543", "LastActivityDate": "2015-12-23T10:24:45.543"}, "34435145": {"ParentId": "34433172", "CommentCount": "1", "Body": "<p>Please understand \"func\" is the member function of the class . accessing it directly is itself a compilation error .Rather you should try to use pointer to member function as you have done in printFunction2:\nElse if func is function outside the class scope .Then it can be done as below :</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n void func() {cout&lt;&lt;\"\\n calling func\\n\";}\n    void printFunc1() {\n       cout &lt;&lt; endl&lt;&lt;hex&lt;&lt;(void*)func &lt;&lt; endl;\n    }\nint main() {\n\n    printFunc1();\n    return 0;\n}\n</code></pre>\n", "OwnerUserId": "5170218", "PostTypeId": "2", "Id": "34435145", "Score": "0", "CreationDate": "2015-12-23T11:54:38.690", "LastActivityDate": "2015-12-23T11:54:38.690"}, "34433172": {"CommentCount": "4", "ViewCount": "101", "PostTypeId": "1", "LastEditorUserId": "1122645", "CreationDate": "2015-12-23T10:08:40.470", "LastActivityDate": "2015-12-23T11:54:38.690", "Title": "Why can't print member function's address by it's name?", "AcceptedAnswerId": "34433523", "LastEditDate": "2015-12-23T10:29:44.477", "Id": "34433172", "Score": "3", "Body": "<p>I have learned that function name equals function address\nlike this:</p>\n<pre><code>void func(){}\nvoid main() { cout &lt;&lt; func; }\n</code></pre>\n<p>But when I used the same code to print memeber function, it went wrong.</p>\n<pre><code>class Test{\npublic:\n    void func() {}\n    void printFunc1() {\n    cout &lt;&lt; func &lt;&lt; endl;\n   }\n    void printFunc2() {\n    void (Test::*ptrtofn)() = &amp;Test::func;\n    cout &lt;&lt; (void*&amp;)ptrtofn &lt;&lt; endl;\n  }\n};\n</code></pre>\n<p><code>printFunction2()</code> work but <code>printFunction1()</code> doesnt</p>\n<p>What makes the difference?</p>\n<p>Member function's name is not member function's address?\nIs there any reason?</p>\n", "Tags": "<c++><class>", "OwnerUserId": "5710608", "AnswerCount": "2"}});