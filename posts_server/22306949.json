post_cb({"22307017": {"Id": "22307017", "PostTypeId": "2", "Body": "<p>C++98, section 23.2.1 (Template class deque)</p>\n<p>\"A deque ... supports constant time insert and erase operations at the beginning or the end; insert and erase in the mid-dle take linear time. That is, a deque is especially optimized for pushing and popping elements at the beginning and end. As with vectors, storage management is handled automatically.\"</p>\n<p>So yes: O(1) insertion at both ends.</p>\n", "LastActivityDate": "2014-03-10T17:24:24.883", "CommentCount": "0", "CreationDate": "2014-03-10T17:24:24.883", "ParentId": "22306949", "Score": "2", "OwnerUserId": "3392484"}, "bq_ids": {"n4140": {"so_22306949_22307027_2": {"length": 26, "quality": 0.9285714285714286, "section_id": 819}, "so_22306949_22307025_1": {"length": 37, "quality": 0.9487179487179487, "section_id": 798}, "so_22306949_22307025_3": {"length": 32, "quality": 1.0, "section_id": 955}}, "n3337": {"so_22306949_22307027_2": {"length": 26, "quality": 0.9285714285714286, "section_id": 808}, "so_22306949_22307025_3": {"length": 32, "quality": 1.0, "section_id": 943}, "so_22306949_22307025_1": {"length": 37, "quality": 0.9487179487179487, "section_id": 787}}, "n4659": {"so_22306949_22307027_2": {"length": 26, "quality": 0.9285714285714286, "section_id": 878}, "so_22306949_22307025_3": {"length": 27, "quality": 0.84375, "section_id": 1016}, "so_22306949_22307025_1": {"length": 33, "quality": 0.8461538461538461, "section_id": 856}}}, "22307027": {"Id": "22307027", "PostTypeId": "2", "Body": "<p>From the C++ standard:</p>\n<blockquote>\n<p id=\"so_22306949_22307027_0\">23.3.3.4 deque modi\ufb01ers [deque.modi\ufb01ers]</p>\n</blockquote>\n<pre><code>[...]\nvoid push_front(const T&amp; x);\nvoid push_front(T&amp;&amp; x);\nvoid push_back(const T&amp; x);\nvoid push_back(T&amp;&amp; x);\n</code></pre>\n<blockquote>\n<p id=\"so_22306949_22307027_1\">[...]</p>\n<p id=\"so_22306949_22307027_2\">3 Complexity: The complexity is linear in the number of elements inserted plus the lesser of the distances to the beginning and end of the deque. <strong>Inserting a single element either at the beginning or end of a deque always takes constant time and causes a single call to a constructor of T.</strong></p>\n</blockquote>\n<p>Emphasis mine</p>\n", "LastActivityDate": "2014-03-10T17:24:54.700", "CommentCount": "0", "CreationDate": "2014-03-10T17:24:54.700", "ParentId": "22306949", "Score": "4", "OwnerUserId": "1287251"}, "22306949": {"ViewCount": "799", "Body": "<p>I was going over <a href=\"https://stackoverflow.com/questions/9650254/stl-containers-diffrence-between-vector-list-and-deque\">this</a> post and it states that deque provides efficent insetion at the top and bottom.However this <a href=\"http://john-ahlgren.blogspot.com/2013/10/stl-container-performance.html\" rel=\"nofollow noreferrer\">post</a> here states that time complexity of deque other than the back is O(n).I would think that if a deque has efficent top and bottom insertion it would have O(1) while a vector should have O(1) at bottom insertion only. I would appreciate it if someone could clarify this</p>\n", "AcceptedAnswerId": "22307025", "Title": "Does deque provide O(1) complexity when inserting on top", "CreationDate": "2014-03-10T17:21:05.167", "Id": "22306949", "CommentCount": "1", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2017-05-23T10:30:28.210", "LastEditorUserId": "-1", "LastActivityDate": "2014-03-10T18:19:55.213", "Score": "0", "OwnerUserId": "1305891", "Tags": "<c++><vector><stl><deque>", "AnswerCount": "3"}, "22307025": {"Id": "22307025", "PostTypeId": "2", "Body": "<p>The cppreference entry for <a href=\"http://en.cppreference.com/w/cpp/container/deque\" rel=\"nofollow\">std::deque</a> gives the following complexity:</p>\n<blockquote>\n<p id=\"so_22306949_22307025_0\">The complexity (efficiency) of common operations on deques is as follows: </p>\n</blockquote>\n<ul>\n<li>Random access - constant O(1)</li>\n<li>Insertion or removal of elements at the end or beginning - amortized constant O(1)</li>\n<li>Insertion or removal of elements - linear O(n)</li>\n</ul>\n<p>which is consistent with the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3485.pdf\" rel=\"nofollow\">draft C++ standard</a> section <code>23.3.3.1</code> <em>Class template deque overview</em> which says (<em>emphasis mine</em>):</p>\n<blockquote>\n<p id=\"so_22306949_22307025_1\">A deque is a sequence container that, like a vector (23.3.6), supports random access iterators. In addition, it supports constant time insert and erase operations at the beginning or the end; insert and erase in the middle take linear time. That is, <strong>a deque is especially optimized for pushing and popping elements at the beginning and end</strong>. As with vectors, storage management is handled automatically.</p>\n</blockquote>\n<p>For <a href=\"http://en.cppreference.com/w/cpp/container/vector\" rel=\"nofollow\">std::vector</a> cppreference says:</p>\n<blockquote>\n<p id=\"so_22306949_22307025_2\">The complexity (efficiency) of common operations on vectors is as follows: </p>\n</blockquote>\n<ul>\n<li>Random access - constant O(1)</li>\n<li>Insertion or removal of elements at the end - amortized constant O(1)</li>\n<li>Insertion or removal of elements - linear in distance to the end of the vector O(n)</li>\n</ul>\n<p>which is consistent with the draft standard section <code>23.3.6.1</code> <em>Class template vector overview</em>:</p>\n<blockquote>\n<p id=\"so_22306949_22307025_3\">A vector is a sequence container that supports random access iterators. In addition, <strong>it supports (amortized) constant time insert and erase operations at the end;</strong> insert and erase in the middle take linear time. Storage management is handled automatically, though hints can be given to improve efficiency.[...]</p>\n</blockquote>\n", "LastEditorUserId": "1708801", "LastActivityDate": "2014-03-10T18:19:55.213", "Score": "0", "CreationDate": "2014-03-10T17:24:52.893", "ParentId": "22306949", "CommentCount": "3", "OwnerUserId": "1708801", "LastEditDate": "2014-03-10T18:19:55.213"}});