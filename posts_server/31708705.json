post_cb({"bq_ids": {"n4140": {"so_31708705_31710965_3": {"length": 20, "quality": 0.9090909090909091, "section_id": 5490}, "so_31708705_31710965_1": {"length": 18, "quality": 0.9, "section_id": 7044}, "so_31708705_31708705_0": {"length": 8, "quality": 1.0, "section_id": 5490}, "so_31708705_31708705_3": {"length": 9, "quality": 0.9, "section_id": 5490}, "so_31708705_31710965_2": {"length": 19, "quality": 0.8260869565217391, "section_id": 7046}, "so_31708705_31710965_0": {"length": 14, "quality": 0.6666666666666666, "section_id": 7026}}, "n3337": {"so_31708705_31708705_2": {"length": 4, "quality": 0.6666666666666666, "section_id": 5724}, "so_31708705_31708705_6": {"length": 4, "quality": 0.6666666666666666, "section_id": 5724}, "so_31708705_31710965_1": {"length": 18, "quality": 0.9, "section_id": 6789}, "so_31708705_31708705_0": {"length": 8, "quality": 1.0, "section_id": 5276}, "so_31708705_31708705_3": {"length": 9, "quality": 0.9, "section_id": 5276}, "so_31708705_31710965_2": {"length": 19, "quality": 0.8260869565217391, "section_id": 6791}, "so_31708705_31708705_5": {"length": 4, "quality": 0.6666666666666666, "section_id": 5724}, "so_31708705_31710965_3": {"length": 15, "quality": 0.6818181818181818, "section_id": 5276}, "so_31708705_31710965_0": {"length": 14, "quality": 0.6666666666666666, "section_id": 6772}}, "n4659": {"so_31708705_31708705_3": {"length": 6, "quality": 0.6, "section_id": 6924}, "so_31708705_31710965_2": {"length": 19, "quality": 0.8260869565217391, "section_id": 8543}, "so_31708705_31710965_1": {"length": 18, "quality": 0.9, "section_id": 8541}, "so_31708705_31710965_0": {"length": 15, "quality": 0.7142857142857143, "section_id": 8523}, "so_31708705_31708705_0": {"length": 7, "quality": 0.875, "section_id": 6924}}}, "31710257": {"Id": "31710257", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_31708705_31710257_0\">What do they mean by the name being declared in the declarative region\n  where the using-declaration occurs?</p>\n</blockquote>\n<p>I'll try and answer this with an example of my understanding of it (Refer to my comments in the depicted code):</p>\n<pre><code>// \"namespace X {}\" introduces a declarative region of the namespace X\nnamespace X {\n  //The name SomeObject is now introduced into the declarative region X\n  // It is only visible in that declarative region\n  using Y::SomeObject;\n}//Declarative region X ENDS here\n// SomeObject NOT visible here\n</code></pre>\n<p>Below is an example where the (compiler) error makes it clear where the name is not visible:</p>\n<pre><code>#include &lt;iostream&gt;\n\nnamespace A\n{\n  struct X{};\n}\n\nnamespace B\n{\n  struct X{};\n}\n\nnamespace C\n{\n  using A::X;\n\n  void foo(X){}\n}\n\nnamespace D\n{\n  using B::X;\n\n  void foo(X){}\n}\n\nvoid foo(X){} //FAILS TO COMPILE - DELIBERATE!!!\n\nint main() \n{\n    return 0;\n}\n</code></pre>\n", "LastEditorUserId": "1400817", "LastActivityDate": "2015-07-29T20:19:58.250", "Score": "0", "CreationDate": "2015-07-29T20:14:48.387", "ParentId": "31708705", "CommentCount": "0", "LastEditDate": "2015-07-29T20:19:58.250", "OwnerUserId": "1400817"}, "31708705": {"ViewCount": "116", "Body": "<p>From the C++11 standard, \u00a77.3.3[namespace.udecl]/1:</p>\n<blockquote>\n<p id=\"so_31708705_31708705_0\">A using-declaration introduces a name into the declarative region in which the using-declaration appears.</p>\n<blockquote>\n<p id=\"so_31708705_31708705_4\"><em>using-declaration</em>:<br/></p>\n<blockquote>\n<p id=\"so_31708705_31708705_6\"><code>using typename</code><sub><em>opt</em></sub> <em>nested-name-specifier unqualified-id</em> <code>;</code><br/>\n<code>using ::</code> <em>unqualified-id</em> <code>;</code><br/></p>\n</blockquote>\n</blockquote>\n<p id=\"so_31708705_31708705_3\"><strong>The member name specified in a using-declaration is declared in the declarative region in which the using-declaration appears.</strong></p>\n</blockquote>\n<p>What do they mean by the name being declared in the declarative region where the using-declaration occurs?</p>\n<p>Does this mean the same as introducing that name into the declarative region where the using-declaration occurs?</p>\n<p>Also is there a difference between declaring a name and declaring the entity that the name denotes?</p>\n<p>Example:</p>\n<pre><code>namespace N { static int i = 1; } /* Declares an entity denoted by \n    the name i in the declarative region of the namespace N. \n    Introduces the name into the declarative region of the namespace N.\n    Declares the name i in the declarative region of the namespace N? */\nusing N::i; /* Declares the name i in the declarative region of the\n    global namespace. Also introduces that name into the declarative\n    region of the global namespace? Also declares the entity that the\n    name i denotes? */ \n</code></pre>\n", "AcceptedAnswerId": "31710965", "Title": "The difference between declaring a name, introducing a name, and declaring an entity", "CreationDate": "2015-07-29T18:46:12.583", "Id": "31708705", "CommentCount": "5", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2015-07-29T19:21:31.263", "LastEditorUserId": "1272610", "LastActivityDate": "2015-07-29T20:56:24.493", "Score": "7", "OwnerUserId": "1272610", "Tags": "<c++><entity><declaration><language-lawyer><using-declaration>", "AnswerCount": "2"}, "31710965": {"Id": "31710965", "PostTypeId": "2", "Body": "<p>From first principles, an <em>entity</em> is, from [basic]</p>\n<blockquote>\n<p id=\"so_31708705_31710965_0\">a value, object, reference, function, enumerator, type, class member, bit-field, template, template\n  specialization, namespace, parameter pack, or <code>this</code>. [...] Every name that denotes an entity is introduced by a declaration.</p>\n</blockquote>\n<p>Declarations declare things. To be declared means that it was introduced by a declaration, from [basic.scope.declarative]</p>\n<blockquote>\n<p id=\"so_31708705_31710965_1\">Every name is introduced in some portion of program text called a <em>declarative region</em>, which is the largest part\n  of the program in which that name is valid, that is, in which that name may be used as an unqualified name\n  to refer to the same entity.</p>\n<p id=\"so_31708705_31710965_2\">The names declared by a declaration are introduced into the scope in which the declaration occurs, except\n  that the presence of a <code>friend</code> specifier (11.3), certain uses of the <em>elaborated-type-specifier</em> (7.1.6.3), and\n  <em>using-directives</em> (7.3.4) alter this general behavior.</p>\n</blockquote>\n<p>None of those exceptions are relevant here, since we're talking about <em>using-declarations</em> and not <em>using-directives</em>. Let me alter your example somewhat so as to avoid the global namespace:</p>\n<pre><code>namespace N {        //  + declarative region #1\n                     //  |\n    static int i;    //  | introduces a name into this region\n                     //  | this declaration introduces an entity\n}                    //  +\n</code></pre>\n<p>So to start with, <code>N::i</code> is an entity that is declared in namespace <code>N</code> and introduced into the scope of <code>N</code>. Now, let's add a <em>using-declaration</em>:</p>\n<pre><code>namespace B {        //  + declarative region #2\n                     //  |\n    using N::i;      //  | declaration introduces a name i\n                     //  | but this is not an entity\n}                    //  +\n</code></pre>\n<p>From [namespace.udecl], we have:</p>\n<blockquote>\n<p id=\"so_31708705_31710965_3\">If a <em>using-declaration</em> names a constructor (3.4.3.1), it implicitly declares a set of constructors in the\n  class in which the using-declaration appears (12.9); otherwise the name specified in a <em>using-declaration</em> is a\n  <strong>synonym</strong> for a set of declarations in another namespace or class.</p>\n</blockquote>\n<p>The <em>using-declaration</em> <code>using N::i</code> does not name a constructor, so rather than having the name <code>i</code> be a new entity, it is instead a <em>synonym</em> for <code>N::i</code>. </p>\n<p>So basically, both <code>i</code>s are names introduced in and declared in their respective namespaces. In <code>N</code>, <code>i</code> declares an entity with static linkage, but in <code>B</code>, <code>i</code> declares a synonym to that entity - not a new entity. </p>\n", "LastActivityDate": "2015-07-29T20:56:24.493", "CommentCount": "3", "CreationDate": "2015-07-29T20:56:24.493", "ParentId": "31708705", "Score": "6", "OwnerUserId": "2069064"}});