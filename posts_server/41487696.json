post_cb({"41488396": {"ParentId": "41487696", "PostTypeId": "2", "CommentCount": "14", "Body": "<p>What would be closer would be an union. The problem is that a string litteral has a null a its last character, but that should work:</p>\n<pre><code>union {\n    char chr[3 * sizeof(double) + 1];\n    double arr[3];\n} val = { \"\\xe3\\x3b\\xef\\xf6\\xc1\\x78\\xc6\\x3f\\xf9\\x37\\x5a\"\n    \"\\x8d\\xfd\\xae\\x75\\x3f\\x62\\xe9\\x58\\x48\\x4f\\x49\\xc6\\x3f\" };\n</code></pre>\n<p>Simply as it uses an additional byte there will be some memory wasted  (normally 4 bytes on a 32 bit machine)</p>\n<hr>\n<p>References to standard:</p>\n<p>In C a (non normative) note says that it should work in 6.5.2.3 Structure and union members</p>\n<blockquote>\n<p id=\"so_41487696_41488396_0\">If the member used to access the contents of a union object is not the same as the member last used to\n  store a value in the object, the appropriate part of the object representation of the value is reinterpreted\n  as an object representation in the new type as described in 6.2.6 (a process sometimes called \"type\n  punning\")</p>\n</blockquote>\n<p>I could not find any reference for C++ saying whether it is allowed or not, but all common compilers accept it. The more relevant I could find are</p>\n<p>9.5 Unions [class.union]</p>\n<blockquote>\n<p id=\"so_41487696_41488396_1\">In a union, at most one of the non-static data members can be active at any time, that is, the value of at\n  most one of the non-static data members can be stored in a union at any time... All non-static data members of a union object have the same address.</p>\n</blockquote>\n<p>which explains why it could work</p>\n<p>and:</p>\n<p>3.10 Lvalues and rvalues [basic.lval]</p>\n<blockquote>\n<p id=\"so_41487696_41488396_2\">\u00a710 If a program attempts to access the stored value of an object through a glvalue of other than one of the\n  following types the behavior is undefined ... [union access not cited]</p>\n</blockquote>\n<p>which clearly says that it leads to undefined behaviour. The problem is that the same paragraph (known as <em>strict aliasing rule</em>) also exists in C 6.5 Expressions \u00a77...</p>\n<p>TL/DR: The union way is explicitely valid in C and probably UB in C++, so my advice would be to put it in a C compilation unit linked into a C++ program.</p>\n</hr>", "OwnerUserId": "3545273", "LastEditorUserId": "3545273", "LastEditDate": "2017-01-05T15:40:51.810", "Id": "41488396", "Score": "1", "CreationDate": "2017-01-05T15:12:31.917", "LastActivityDate": "2017-01-05T15:40:51.810"}, "41487696": {"CommentCount": "10", "ViewCount": "92", "PostTypeId": "1", "LastEditorUserId": "817643", "CreationDate": "2017-01-05T14:37:33.230", "LastActivityDate": "2017-01-05T15:40:51.810", "Title": "How to initialize a double array with the precalculated hex values?", "LastEditDate": "2017-01-05T15:06:49.573", "Id": "41487696", "Score": "1", "Body": "<p>I want to implement the initialization of a floating point numbers array. Using the precalculated hexadecimal values. With the result similar to this:</p>\n<pre><code>double arr[3];\nmemcpy(&amp;arr[0], \"\\xe3\\x3b\\xef\\xf6\\xc1\\x78\\xc6\\x3f\\xf9\\x37\\x5a\\x8d\\xfd\\xae\\x75\\x3f\\x62\\xe9\\x58\\x48\\x4f\\x49\\xc6\\x3f\",24);\n</code></pre>\n<p>And I want that such initialization was done in a single line. Like, as in this example (but for floating points numbers in my case):</p>\n<pre><code>const char s[] = \"\\x48\\x69\\x21\";\n</code></pre>\n<p>Is it syntactically possible?</p>\n", "Tags": "<c++><floating-point><hex><double>", "OwnerUserId": "7379401", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_41487696_41488396_2": {"section_id": 7239, "quality": 0.8235294117647058, "length": 14}, "so_41487696_41488396_1": {"section_id": 5913, "quality": 1.0, "length": 28}}, "n3337": {"so_41487696_41488396_2": {"section_id": 6983, "quality": 0.8235294117647058, "length": 14}, "so_41487696_41488396_1": {"section_id": 5685, "quality": 0.75, "length": 21}}, "n4659": {"so_41487696_41488396_2": {"section_id": 8748, "quality": 0.8235294117647058, "length": 14}, "so_41487696_41488396_1": {"section_id": 7404, "quality": 0.75, "length": 21}}}});