post_cb({"28329163": {"Id": "28329163", "PostTypeId": "2", "Body": "<p>Use <code>param()</code>:</p>\n<pre><code>using param_t = std::uniform_int_distribution&lt;&gt;::param_type;\n\ngroup.dis.param(param_t(0, 19));\n</code></pre>\n<p>If the parameters change every time you use the distribution, then you can also consider using the two-parameter overload of <code>operator()</code> instead:</p>\n<pre><code>std::cout &lt;&lt; group.dis(gen, param_t(0, 19)) &lt;&lt; ' ';\n</code></pre>\n<p>As distribution objects are allowed to store extra bits of entropy obtained during a previous <code>operator()</code> call, this approach can be more efficient than constructing a new distribution object and assigning it.</p>\n<p>Note that the cppreference page is incomplete and doesn't document the requirements the standard imposes on <code>param_type</code>. Given a distribution type <code>D</code> and its associated <code>param_type</code> <code>P</code>,</p>\n<blockquote>\n<p id=\"so_28328948_28329163_0\">For each of the constructors of <code>D</code> taking arguments corresponding to\n  parameters of the distribution, <code>P</code> shall have a corresponding\n  constructor subject to the same requirements and taking arguments\n  identical in number, type, and default values. Moreover, for each of\n  the member functions of <code>D</code> that return values corresponding to\n  parameters of the distribution, <code>P</code> shall have a corresponding member\n  function with the identical name, type, and semantics.</p>\n</blockquote>\n<p>(\u00a726.5.1.6 [rand.req.dist]/p9)</p>\n", "LastEditorUserId": "2756719", "LastActivityDate": "2015-02-04T19:08:03.140", "Score": "4", "CreationDate": "2015-02-04T18:53:34.483", "ParentId": "28328948", "CommentCount": "2", "OwnerUserId": "2756719", "LastEditDate": "2015-02-04T19:08:03.140"}, "bq_ids": {"n4140": {"so_28328948_28329163_0": {"length": 37, "quality": 0.9736842105263158, "section_id": 3518}}, "n3337": {"so_28328948_28329163_0": {"length": 37, "quality": 0.9736842105263158, "section_id": 3383}}, "n4659": {"so_28328948_28329163_0": {"length": 37, "quality": 0.9736842105263158, "section_id": 4281}}}, "28329064": {"Id": "28329064", "PostTypeId": "2", "Body": "<p>You should do </p>\n<pre><code>group.dis = std::uniform_int_distribution&lt;&gt;(0,19);\n</code></pre>\n<p>instead of </p>\n<pre><code>group.dis(0,19);\n</code></pre>\n<p>Also, your code seems to be taken without reference directly from <a href=\"http://en.cppreference.com/w/cpp/numeric/random/uniform_int_distribution\" rel=\"nofollow\">here</a>, so a link as kind of a tributal citation would have been in order.</p>\n", "LastActivityDate": "2015-02-04T18:47:52.087", "CommentCount": "1", "CreationDate": "2015-02-04T18:47:52.087", "ParentId": "28328948", "Score": "0", "OwnerUserId": "4433386"}, "28328948": {"ViewCount": "471", "Body": "<p>I have problem where I want to create a <code>std::uniform_int_distribution</code> in a struct and then give its range later. Below is what I want.</p>\n<pre><code>#include &lt;random&gt;\n#include &lt;iostream&gt;\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\n\nstruct group_s {\n   int k;\n   std::uniform_int_distribution&lt;&gt; dis;\n} group;\n\n\nint main()\n{  \n    group.dis(0,19);\n    std::cout &lt;&lt; group.dis(gen) &lt;&lt; ' ';\n}\n</code></pre>\n<p>I am getting the following error: </p>\n<pre><code>no match for call to '(std::uniform_int_distribution&lt;&gt;) (int, int)'\n  cpu_group.dis(0,19);\n</code></pre>\n<p>How do I do this?</p>\n", "AcceptedAnswerId": "28328983", "Title": "Use std::uniform_int_distribution and define its range later", "CreationDate": "2015-02-04T18:41:47.017", "Id": "28328948", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2015-02-04T19:04:11.140", "LastEditorUserId": "25507", "LastActivityDate": "2015-02-05T02:18:47.517", "Score": "2", "OwnerUserId": "3167839", "Tags": "<c++><c++11><random>", "AnswerCount": "3"}, "28328983": {"Id": "28328983", "PostTypeId": "2", "Body": "<p>You can just do</p>\n<pre><code>group.dis = std::uniform_int_distribution&lt;&gt;(0,19);\n</code></pre>\n<p>or</p>\n<pre><code>group.dis.param(std::uniform_int_distribution&lt;&gt;::param_type(0,19));\n</code></pre>\n<p>Another way would be to add a method to your struct</p>\n<pre><code>struct group_s {\n    int k;\n    std::uniform_int_distribution&lt;&gt; dis;\n    void set(int a, int b) { dis = std::uniform_int_distribution&lt;&gt;(a,b); }\n} group;\n\n\ngroup.set(0,19);\n</code></pre>\n", "LastEditorUserId": "1503898", "LastActivityDate": "2015-02-05T02:18:47.517", "Score": "1", "CreationDate": "2015-02-04T18:43:53.383", "ParentId": "28328948", "CommentCount": "8", "OwnerUserId": "1503898", "LastEditDate": "2015-02-05T02:18:47.517"}});