post_cb({"13094103": {"Id": "13094103", "PostTypeId": "2", "Body": "<p>Yes, it's valid. </p>\n<p>It declares an integer named <code>main</code>.</p>\n", "LastActivityDate": "2012-10-26T20:39:08.080", "CommentCount": "3", "CreationDate": "2012-10-26T20:39:08.080", "ParentId": "13094090", "Score": "1", "OwnerUserId": "1275169"}, "13094090": {"ViewCount": "327", "Body": "<p>Why this code compile successful in C and will give you an error in C++?</p>\n<pre><code>int main;\n</code></pre>\n<p>Is it standard-conforming in a hosted environment? Can you quote the standard?</p>\n<p>I've tested it with gcc.</p>\n", "AcceptedAnswerId": "13094171", "Title": "function main without definition in C and C++", "CreationDate": "2012-10-26T20:37:20.327", "Id": "13094090", "CommentCount": "1", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2012-10-26T20:49:57.923", "LastEditorDisplayName": "user529758", "LastActivityDate": "2012-10-26T21:09:53.617", "Score": "5", "OwnerUserId": "1608835", "Tags": "<c++><c>", "AnswerCount": "4"}, "13094403": {"Id": "13094403", "PostTypeId": "2", "Body": "<p>I think , I found one . It's not a solution but point to remember\nIf you use </p>\n<p><code>gcc -Wall -Werror &lt;file.c&gt;</code></p>\n<p>You will get warning is treated as errors:</p>\n<pre><code>main is usually a function name\n</code></pre>\n<p>So its best to compile with <code>-Wall</code> so that you can see all the warnings as well</p>\n", "LastActivityDate": "2012-10-26T21:04:22.323", "CommentCount": "0", "CreationDate": "2012-10-26T21:04:22.323", "ParentId": "13094090", "Score": "1", "OwnerUserId": "270060"}, "bq_ids": {"n4140": {"so_13094090_13094127_0": {"length": 60, "quality": 0.7792207792207793, "section_id": 7146}, "so_13094090_13094171_4": {"length": 14, "quality": 0.9333333333333333, "section_id": 7145}, "so_13094090_13094127_1": {"length": 25, "quality": 0.8333333333333334, "section_id": 7147}}, "n3337": {"so_13094090_13094127_0": {"length": 62, "quality": 0.8051948051948052, "section_id": 6890}, "so_13094090_13094171_4": {"length": 14, "quality": 0.9333333333333333, "section_id": 6889}, "so_13094090_13094127_1": {"length": 25, "quality": 0.8333333333333334, "section_id": 6891}}, "n4659": {"so_13094090_13094127_0": {"length": 60, "quality": 0.7792207792207793, "section_id": 8647}, "so_13094090_13094171_4": {"length": 12, "quality": 0.8, "section_id": 8646}, "so_13094090_13094127_1": {"length": 24, "quality": 0.8, "section_id": 8648}}}, "13094127": {"Id": "13094127", "PostTypeId": "2", "Body": "<p>From <a href=\"http://www-d0.fnal.gov/~dladams/cxx_standard.pd\" rel=\"nofollow\">ISO/IEC 14882:1998(E)</a> (aka C++98), <em>3.6.1 Main function</em>:</p>\n<blockquote>\n<p id=\"so_13094090_13094127_0\">An implementation shall not predefine the main function. This\n  function shall not be overloaded. It shall 2   have a return type of\n  type int, but otherwise its type is implementation-defined. All\n  implementations   shall allow both of the following definitions of\n  main:\n          <code>int main() { /* ... */ }</code>   and\n                     <code>int main(int argc, char* argv[]) { /* ... */ }</code>   In the latter form argc shall be the number of arguments passed to the\n  program from the environment in   which the program is run. If argc is\n  nonzero these arguments shall be supplied in argv[0] through<br>\n  argv[argc-1] as pointers to the initial characters of null-terminated\n  multibyte strings (NTMBSs)   (17.3.2.1.3.2) and argv[0] shall be the\n  pointer to the initial character of a NTMBS that represents the   name\n  used to invoke the program or \"\". The value of argc shall be\n  nonnegative. The value of   argv[argc] shall be 0. [Note: it is\n  recommended that any further (optional) parameters be added after<br>\n  argv. ]</br></br></p>\n</blockquote>\n<hr>\n<blockquote>\n<p id=\"so_13094090_13094127_1\">The function main shall not be used (3.2) within a program. The\n  linkage (3.5) of main is 3   implementation-defined. A program that\n  declares main to be inline or static is ill-formed. The   name main is\n  not otherwise reserved. [Example: member functions, classes, and\n  enumerations can be   called main, as can entities in other\n  namespaces. ]</p>\n</blockquote>\n<hr>\n<p><code>int main;</code> does not comply with the above (\"All implementations shall allow both of the following definitions of main\", \"The function main shall not be used (3.2) within a program\").</p>\n</hr></hr>", "LastEditorUserId": "489590", "LastActivityDate": "2012-10-26T20:46:36.550", "Score": "4", "CreationDate": "2012-10-26T20:40:49.127", "ParentId": "13094090", "CommentCount": "6", "OwnerUserId": "489590", "LastEditDate": "2012-10-26T20:46:36.550"}, "13094171": {"Id": "13094171", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_13094090_13094171_0\">Why this code compile successful in C and will give you an error in C++?</p>\n</blockquote>\n<p>Because of C++ name mangling. Basically, in all practical implementations, the linker looks for a <strong>symbol</strong> named <code>main</code> (or variants of it, I've seen <code>_main</code> on Apple's platforms) - in C, that can be either the <code>main()</code> function <em>or an extern storage variable named</em> <code>main</code> - the point is that usually C implementations (compilers, toolchains) don't differentiate between variables and functions at the linker level, that's why providing one symbol, be it either a variable or a function, named <code>main()</code> <strong>may seem to be enough</strong>. In fact, in a hosted environment, as per the Standard, the resulting program (executable) won't be conforming, because there, it is required that the <code>main()</code> <strong>function</strong> be implemented.</p>\n<p>In C++, usually name mangling is used (in order to achieve features of C++ such as function overloading), and that means that the compiler names the resulting symbol in the executable file differently depending on its type, on the fact if it's a function, a variable, <em>a function with a different signature</em>, and other circumstances. So the linker basically won't find the symbol corresponding to the expected <code>int main(int, char *[])</code> function and will issue an error message.</p>\n<blockquote>\n<p id=\"so_13094090_13094171_1\">Is it standard-conforming? </p>\n</blockquote>\n<p>Not defining the <code>main()</code> function isn't (see the first part). As far as I can tell, having a variable named <code>main</code> along with the main function is valid C++, but it is <em>certainly bad practice.</em></p>\n<blockquote>\n<p id=\"so_13094090_13094171_2\">Can you quote the Standard?</p>\n</blockquote>\n<p>Yes please (emphasis mine):</p>\n<blockquote>\n<p id=\"so_13094090_13094171_3\">C++ 98, paragraph 3.6.1:</p>\n<p id=\"so_13094090_13094171_4\">A program <strong>shall contain</strong> a global function called <code>main()</code>, which is the designated start of the program. It is <em>implementation-defined</em> whether a program in a <em>freestanding environment</em> is required to define a <code>main()</code> function.</p>\n<p id=\"so_13094090_13094171_5\">C99, paragraph 5.1.2.2.1</p>\n<p id=\"so_13094090_13094171_6\">5.1.2.2.1 Program startup</p>\n<p id=\"so_13094090_13094171_7\">1 The function called at program startup is named main. The implementation declares no\n  prototype for this function. I</p>\n</blockquote>\n", "LastEditorDisplayName": "user529758", "OwnerDisplayName": "user529758", "LastActivityDate": "2012-10-26T21:09:53.617", "Score": "9", "CreationDate": "2012-10-26T20:44:04.243", "ParentId": "13094090", "CommentCount": "18", "LastEditDate": "2012-10-26T21:09:53.617"}});