post_cb({"39868640": {"CommentCount": "1", "ViewCount": "728", "PostTypeId": "1", "LastEditorUserId": "3309790", "CreationDate": "2016-10-05T08:11:45.690", "LastActivityDate": "2017-08-03T06:30:24.257", "Title": "std::unordered_map pointers/reference invalidation", "AcceptedAnswerId": "39869063", "LastEditDate": "2017-03-12T13:01:59.660", "Id": "39868640", "Score": "6", "Body": "<p>I have the following code: </p>\n<pre><code>std::unordered_map&lt;std::string, std::string&gt; map;\n\nmap[\"k1\"] = \"v1\";\nauto&amp; v1 = map[\"k1\"];\nmap[\"k2\"] = \"v2\";\n</code></pre>\n<p>After reading <a href=\"http://en.cppreference.com/w/cpp/container/unordered_map\" rel=\"nofollow\">http://en.cppreference.com/w/cpp/container/unordered_map</a></p>\n<blockquote>\n<p id=\"so_39868640_39868640_0\">Notes</p>\n<p id=\"so_39868640_39868640_1\">The swap functions do not invalidate any of the iterators inside the container, but they do invalidate the iterator marking the end of the swap region.</p>\n<p id=\"so_39868640_39868640_2\">References and pointers to either key or data stored in the container are only invalidated by erasing that element, even when the corresponding iterator is invalidated.</p>\n</blockquote>\n<p>It looks like <code>v1</code> can be safely used after inserting new values, even if re-hashing might occur during insertion. </p>\n<p>Is my interpretation of this quote correct? May I use references/pointers of the values from the map after modifying the map (obviously erasing the value itself would invalidate the reference/pointer)? </p>\n", "Tags": "<c++><c++11><language-lawyer><unordered-map>", "OwnerUserId": "336578", "AnswerCount": "1"}, "39869063": {"ParentId": "39868640", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2016-10-05T08:34:44.747", "Score": "8", "LastEditorUserId": "3309790", "LastEditDate": "2017-08-03T06:30:24.257", "Id": "39869063", "OwnerUserId": "3309790", "Body": "<blockquote>\n<p id=\"so_39868640_39869063_0\">It looks like <code>v1</code> can be safely used after inserting new values, even if re-hashing might occur during insertion. </p>\n</blockquote>\n<p>Yes, <a href=\"http://en.cppreference.com/w/cpp/container/unordered_map/operator_at\" rel=\"nofollow noreferrer\">std::unordered_map::operator[]</a> doesn't invalidate references, even rehashing happens.</p>\n<p>(emphasis mine)</p>\n<blockquote>\n<p id=\"so_39868640_39869063_1\">If an insertion occurs and results in a rehashing of the container, all iterators are invalidated. Otherwise iterators are not affected. <strong>References are not invalidated</strong>. </p>\n</blockquote>\n<p>From the standard, <a href=\"http://eel.is/c++draft/unord.req#9\" rel=\"nofollow noreferrer\">$23.2.6/9 Unordered associative containers\n[unord.req]</a>:</p>\n<p>(emphasis mine)</p>\n<blockquote>\n<p id=\"so_39868640_39869063_2\">Rehashing invalidates iterators, changes ordering between elements, and changes which buckets elements appear in, but <strong>does not invalidate pointers or references to elements</strong>.</p>\n</blockquote>\n", "LastActivityDate": "2017-08-03T06:30:24.257"}, "bq_ids": {"n4140": {"so_39868640_39869063_2": {"section_id": 761, "quality": 1.0, "length": 17}}, "n3337": {"so_39868640_39869063_2": {"section_id": 748, "quality": 1.0, "length": 17}}, "n4659": {"so_39868640_39869063_2": {"section_id": 821, "quality": 1.0, "length": 17}}}});