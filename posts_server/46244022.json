post_cb({"bq_ids": {"n4140": {"so_46244022_46244022_0": {"section_id": 5461, "quality": 0.9166666666666666, "length": 11}}, "n3337": {"so_46244022_46244022_0": {"section_id": 5248, "quality": 0.9166666666666666, "length": 11}}, "n4659": {"so_46244022_46244022_0": {"section_id": 6895, "quality": 0.9166666666666666, "length": 11}}}, "46244022": {"CommentCount": "7", "ViewCount": "55", "PostTypeId": "1", "LastEditorUserId": "1794803", "CreationDate": "2017-09-15T16:29:50.740", "LastActivityDate": "2017-09-15T16:32:41.783", "Title": "Ill-formed program with a fixed enumeration instead of overflow", "LastEditDate": "2017-09-15T16:32:41.783", "Id": "46244022", "Score": "3", "Body": "<p>In the following declaration:</p>\n<pre><code>enum class en : signed char { A = 127, B };\n</code></pre>\n<p><em>gcc</em> (and <em>clang</em>) says that the <code>B</code> value is outside the range of the enumeration, which is [-128, 127]. An error is also shown when writting:</p>\n<pre><code>enum class en : signed char { A = 128 };\n</code></pre>\n<p>However, in the second case, the initializer must be a converted constant expression from type <code>int</code> to type <code>signed char</code>, which disallows narrowing conversion and thus that construct is ill-formed.</p>\n<p>But what about the first case? There's no initializer so that rule doesn't apply.</p>\n<p>The standard says:</p>\n<blockquote>\n<p id=\"so_46244022_46244022_0\"><strong>[dcl.enum]\u00a72</strong> An <em>enumerator-definition</em> without an <em>initializer</em> gives the <em>enumerator</em> the value obtained by increasing the value of the previous <em>enumerator</em> by one.</p>\n</blockquote>\n<p>So, it's obvious that the choosen range (<code>signed char</code>) is not big enough to save the value <code>128</code>.</p>\n<p>Maybe compilers decide to treat that case as a <em>rule violation</em> (and thus the program is ill-formed), but I don't see that as a rule violation, because it's not some kind of property of the program that violates a rule, but a command about what the compiler shall do. In this case, I would say it is a corner case not explicitely described or forbidden.</p>\n", "Tags": "<c++><enums><range><c++14>", "OwnerUserId": "1794803", "AnswerCount": "0"}});