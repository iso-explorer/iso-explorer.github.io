post_cb({"4134355": {"Id": "4134355", "PostTypeId": "2", "Body": "<p>You can't access them because it isn't really overloading, it's replacement. When you define your own <code>::operator new</code>, the old one goes away. That's pretty much that.</p>\n<p>Essentially, you need to call <code>malloc</code> from a custom <code>::operator new</code>. Not only that, but also follow the directions in 18.4.1.1/4 to properly handle errors:</p>\n<blockquote>\n<p id=\"so_4134195_4134355_0\">Default behavior: </p>\n<p id=\"so_4134195_4134355_1\">\u2014 Executes a loop:\n  Within the loop, the function first\n  attempts to allocate the requested\n  storage. Whether the attempt involves\n  a call to the Standard C library\n  function malloc is unspecified. </p>\n<p id=\"so_4134195_4134355_2\">\u2014\n  Returns a pointer to the allocated\n  storage if the attempt is successful.\n  Otherwise, if the last argument to\n  set_new_handler() was a null pointer,\n  throw bad_alloc. </p>\n<p id=\"so_4134195_4134355_3\">\u2014 Otherwise, the\n  function calls the current new_handler\n  (18.4.2.2). If the called function\n  returns, the loop repeats. </p>\n<p id=\"so_4134195_4134355_4\">\u2014 The loop\n  terminates when an attempt to allocate\n  the requested storage is successful or\n  when a called new_handler function\n  does not return.</p>\n</blockquote>\n", "LastEditorUserId": "153285", "LastActivityDate": "2010-11-09T13:56:52.227", "Score": "18", "CreationDate": "2010-11-09T13:50:52.853", "ParentId": "4134195", "CommentCount": "8", "OwnerUserId": "153285", "LastEditDate": "2010-11-09T13:56:52.227"}, "bq_ids": {"n4140": {"so_4134195_4134355_2": {"length": 10, "quality": 0.6666666666666666, "section_id": 6815}, "so_4134195_4134355_4": {"length": 14, "quality": 0.9333333333333333, "section_id": 6815}, "so_4134195_4134355_3": {"length": 10, "quality": 0.9090909090909091, "section_id": 6815}, "so_4134195_4134355_1": {"length": 18, "quality": 0.9473684210526315, "section_id": 6815}}, "n3337": {"so_4134195_4134355_2": {"length": 10, "quality": 0.6666666666666666, "section_id": 6570}, "so_4134195_4134355_4": {"length": 14, "quality": 0.9333333333333333, "section_id": 6570}, "so_4134195_4134355_1": {"length": 18, "quality": 0.9473684210526315, "section_id": 6570}, "so_4134195_4134355_3": {"length": 10, "quality": 0.9090909090909091, "section_id": 6570}}, "n4659": {"so_4134195_4134355_2": {"length": 10, "quality": 0.6666666666666666, "section_id": 8307}, "so_4134195_4134355_4": {"length": 14, "quality": 0.9333333333333333, "section_id": 8307}, "so_4134195_4134355_3": {"length": 10, "quality": 0.9090909090909091, "section_id": 8307}, "so_4134195_4134355_1": {"length": 17, "quality": 0.8947368421052632, "section_id": 8307}}}, "4134195": {"ViewCount": "3769", "Body": "<p>Suppose I need to overload global <code>::operator new()</code> <a href=\"https://stackoverflow.com/questions/4068046/getting-to-know-size-of-a-reserved-memory-on-the-heap/4068118#4068118\">for storing extra data with each allocated object</a>. So basically it would work this way:</p>\n<ul>\n<li>for each call to global <code>::operator new()</code> it will take the object size passed and add the size of extra data</li>\n<li>it will <em>allocate a memory block</em> of size deduced at previous step</li>\n<li>it will offset the pointer to the part of the block not occupied with extra data and return that offset value to the caller</li>\n</ul>\n<p><code>::operator delete()</code> will do the same in reverse - shift the pointer, access extra data, deallocate memory.</p>\n<p>Now the question is <em>how do I allocate memory</em>? Of course I can call <code>malloc()</code> or some platform-specific function (that's how it is usually done). But normally when I need to allocate raw memory in C++ I call <code>::operator new()</code>. Can I call the original <code>::operator new()</code> to do the memory allocation from inside my overloaded global <code>::operator new()</code>?</p>\n", "AcceptedAnswerId": "4134355", "Title": "How do I call the original \"operator new\" if I have overloaded it?", "CreationDate": "2010-11-09T13:35:36.217", "Id": "4134195", "CommentCount": "2", "FavoriteCount": "7", "PostTypeId": "1", "LastEditDate": "2017-05-23T10:28:42.103", "LastEditorUserId": "-1", "LastActivityDate": "2015-07-21T11:21:19.113", "Score": "27", "OwnerUserId": "57428", "Tags": "<c++><memory><memory-management><operator-overloading>", "AnswerCount": "1"}});