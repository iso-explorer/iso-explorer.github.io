post_cb({"bq_ids": {"n4140": {"so_24104101_24104101_0": {"length": 20, "quality": 1.0, "section_id": 7109}, "so_24104101_24104274_0": {"length": 12, "quality": 1.0, "section_id": 7109}, "so_24104101_24104274_1": {"length": 8, "quality": 1.0, "section_id": 7109}}, "n3337": {"so_24104101_24104101_0": {"length": 20, "quality": 1.0, "section_id": 6853}, "so_24104101_24104274_0": {"length": 12, "quality": 1.0, "section_id": 6853}, "so_24104101_24104274_1": {"length": 8, "quality": 1.0, "section_id": 6853}}, "n4659": {"so_24104101_24104101_0": {"length": 20, "quality": 1.0, "section_id": 8610}, "so_24104101_24104274_0": {"length": 12, "quality": 1.0, "section_id": 8610}, "so_24104101_24104274_1": {"length": 8, "quality": 1.0, "section_id": 8610}}}, "24104101": {"ViewCount": "128", "Body": "<p>Sec. 3.4.3/3 said:</p>\n<blockquote>\n<p id=\"so_24104101_24104101_0\">In a declaration in which the declarator-id is a qualified-id, names\n  used before the qualified-id being declared are looked up in the\n  defining namespace scope; names following the qualified-id are looked\n  up in the scope of the member\u2019s class or namespace.</p>\n</blockquote>\n<p>There is a code example from 3.4.3/3 N3797:</p>\n<pre><code>class X { };\nclass C {\n    class X { };\n    static const int number = 50;\n    static X arr[number];\n};\nX C::arr[number];// ill-formed:\n                 // equivalent to: ::X C::arr[__C::number__];\n                 // not to: C::X C::arr[__C::number__];\n</code></pre>\n<p>But I think that it is not true because unqualified name used in the <code>X C::arr[number]</code> can be found in the enclosing scope, but the <code>X C::arr[C::number]</code> is not searching the <code>number</code> in the enclosing scopes. Is it a typo?</p>\n", "AcceptedAnswerId": "24104274", "Title": "Name lookup after qualified declarator-id", "CreationDate": "2014-06-08T07:54:01.260", "Id": "24104101", "CommentCount": "7", "LastEditDate": "2014-06-08T08:30:10.710", "PostTypeId": "1", "LastEditorDisplayName": "user2953119", "OwnerDisplayName": "user2953119", "LastActivityDate": "2014-06-08T08:30:10.710", "Score": "3", "Tags": "<c++><class><language-lawyer>", "AnswerCount": "1"}, "24104274": {"Id": "24104274", "PostTypeId": "2", "Body": "<p>As far as I can tell example is correct and follows directly from the the paragraph before the example:</p>\n<blockquote>\n<p id=\"so_24104101_24104274_0\">In a declaration in which the declarator-id is a qualified-id, <strong>names\n  used before the qualified-id</strong> being declared are <strong>looked up in the\n  defining namespace scope</strong>; </p>\n</blockquote>\n<p>So the <code>X</code> found will be <code>::X</code> and not <code>C::X</code> since it is before the qualified-id</p>\n<p>and:</p>\n<blockquote>\n<p id=\"so_24104101_24104274_1\"><strong>names following</strong> the qualified-id are <strong>looked\n  up in the scope of the member\u2019s class or namespace</strong></p>\n</blockquote>\n<p>So <code>number</code> will be <code>C::number</code> since it is after the qualified-id.</p>\n", "LastActivityDate": "2014-06-08T08:20:09.400", "CommentCount": "3", "CreationDate": "2014-06-08T08:20:09.400", "ParentId": "24104101", "Score": "2", "OwnerUserId": "1708801"}});