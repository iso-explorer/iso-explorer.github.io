post_cb({"20714357": {"CommentCount": "8", "CreationDate": "2013-12-21T01:11:52.723", "LastEditorUserId": "-1", "LastActivityDate": "2013-12-21T23:45:27.243", "ParentId": "20714273", "LastEditDate": "2017-05-23T12:20:35.150", "LastEditorDisplayName": "user1508519", "PostTypeId": "2", "Id": "20714357", "Score": "3", "Body": "<p>I think this <a href=\"https://stackoverflow.com/a/9723448/1508519\">answer might be relevant</a>.</p>\n<blockquote>\n<p id=\"so_20714273_20714357_0\">Yes, this behaviour is intended, according to \u00a713.3.1.7 Initialization\n  by list-initialization</p>\n<blockquote>\n<p id=\"so_20714273_20714357_4\">When objects of non-aggregate class type T are list-initialized (8.5.4), overload resolution selects the constructor in two phases:</p>\n<p id=\"so_20714273_20714357_5\">\u2014 Initially, the candidate functions are the initializer-list constructors (8.5.4) of the class T and the argument list consists of\n    the initializer list as a single argument.</p>\n<p id=\"so_20714273_20714357_6\">\u2014 If no viable initializer-list constructor is found, overload resolution is performed again, where the candidate functions are all\n    the constructors of the class T and the argument list consists of the\n    elements of the initializer list.</p>\n</blockquote>\n</blockquote>\n<p>In <code>gcc</code> I tried your example. I get this error:</p>\n<pre><code>error: call of overloaded 'A(&lt;brace-enclosed initializer list&gt;)' is ambiguous\n</code></pre>\n<p><code>gcc</code> stops complaining if I use three sets of brace. i.e.:</p>\n<pre class=\"lang-cpp prettyprint-override\"><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;initializer_list&gt;\n\nstruct A {\n    A (std::initializer_list&lt;int&gt; il) { \n        std::cout &lt;&lt; \"First.\" &lt;&lt; std::endl;\n    }\n    A (std::initializer_list&lt;std::initializer_list&lt;int&gt;&gt; il) { \n        std::cout &lt;&lt; \"Second.\" &lt;&lt; std::endl;\n    }\n};\n\nint main()\n{\n    A a{0}; // first\n    A a{{0}}; // compile error\n    A a2{{{0}}}; // second\n    A a3{{{{0}}}}; // second\n}\n</code></pre>\n<hr/>\n<p>In an attempt to mirror the vector's constructors, here are my results:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;initializer_list&gt;\n\nstruct A {\n    A (std::initializer_list&lt;int&gt; il) { \n        std::cout &lt;&lt; \"First.\" &lt;&lt; std::endl;\n    }\n    explicit A (std::size_t n) {\n        std::cout &lt;&lt; \"Second.\" &lt;&lt; std::endl;\n    }\n    A (std::size_t n, const int&amp; val) {\n        std::cout &lt;&lt; \"Third.\" &lt;&lt; std::endl;\n    }\n    A (const A&amp; x) {\n        std::cout &lt;&lt; \"Fourth.\" &lt;&lt; std::endl;\n    }\n};\n\nint main()\n{\n    A a{0};\n    A a2{{0}};\n    A a3{1,2,3,4};\n    A a4{{1,2,3,4}};\n    A a5({1,2,3,4});\n    A a6(0);\n    A a7(0, 1);\n    A a8{0, 1};\n}\n\nmain.cpp:23:10: warning: braces around scalar initializer\n\n    A a2{{0}};\n\n         ^~~\n\n1 warning generated.\n\nFirst.\nFirst.\nFirst.\nFirst.\nFirst.\nSecond.\nThird.\nFirst.\n</code></pre>\n", "OwnerDisplayName": "user1508519"}, "bq_ids": {"n4140": {"so_20714273_20714357_2": {"section_id": 599, "quality": 0.9285714285714286, "length": 13}, "so_20714273_20714357_1": {"section_id": 599, "quality": 0.9230769230769231, "length": 12}, "so_20714273_20714357_3": {"section_id": 599, "quality": 1.0, "length": 20}, "so_20714273_20714357_6": {"section_id": 599, "quality": 1.0, "length": 20}, "so_20714273_20714357_5": {"section_id": 599, "quality": 0.9285714285714286, "length": 13}, "so_20714273_20714357_4": {"section_id": 599, "quality": 0.9230769230769231, "length": 12}}, "n3337": {"so_20714273_20714357_2": {"section_id": 589, "quality": 0.9285714285714286, "length": 13}, "so_20714273_20714357_1": {"section_id": 589, "quality": 0.9230769230769231, "length": 12}, "so_20714273_20714357_3": {"section_id": 589, "quality": 1.0, "length": 20}, "so_20714273_20714357_6": {"section_id": 589, "quality": 1.0, "length": 20}, "so_20714273_20714357_5": {"section_id": 589, "quality": 0.9285714285714286, "length": 13}, "so_20714273_20714357_4": {"section_id": 589, "quality": 0.9230769230769231, "length": 12}}, "n4659": {"so_20714273_20714357_4": {"section_id": 622, "quality": 0.9230769230769231, "length": 12}, "so_20714273_20714357_1": {"section_id": 622, "quality": 0.9230769230769231, "length": 12}, "so_20714273_20714357_3": {"section_id": 622, "quality": 1.0, "length": 20}, "so_20714273_20714357_6": {"section_id": 622, "quality": 1.0, "length": 20}, "so_20714273_20714357_5": {"section_id": 622, "quality": 0.9285714285714286, "length": 13}, "so_20714273_20714357_2": {"section_id": 622, "quality": 0.9285714285714286, "length": 13}}}, "20714273": {"CommentCount": "0", "AcceptedAnswerId": "20714357", "PostTypeId": "1", "LastEditorUserId": "146041", "CreationDate": "2013-12-21T01:00:30.537", "LastActivityDate": "2013-12-21T23:45:27.243", "LastEditDate": "2013-12-21T01:31:34.667", "ViewCount": "245", "FavoriteCount": "1", "Title": "why does `vector<int> v{{5,6}};` work? I thought only a single pair {} was allowed?", "Id": "20714273", "Score": "10", "Body": "<p>Given a class <code>A</code> with two constructors, taking <code>initializer_list&lt;int&gt;</code> and <code>initializer_list&lt;initializer_list&lt;int&gt;&gt;</code> respectively, then</p>\n<pre><code>A v{5,6};\n</code></pre>\n<p>calls the former, and</p>\n<pre><code>A v{{5,6}};\n</code></pre>\n<p>calls the latter, as expected.  (clang3.3, apparently gcc behaves differently, see the answers. What does the standard require?)</p>\n<p>But if I remove the second constructor, then <code>A v{{5,6}};</code> still compiles and it uses the first constructor.  I didn't expect this.\nI thought that <code>A v{5,6}</code> would be the <em>only</em> way to access the <code>initializer_list&lt;int&gt;</code> constructor.</p>\n<p>(I discovered this while playing around with <code>std::vector</code> and <a href=\"http://www.reddit.com/r/cpp/comments/1td0dt/why_vectorint_v5_isnt_the_same_as_vectorint_v5/\">this question I asked on Reddit</a>, but I created my own class A to be sure that it wasn't just a quirk of the interface for <code>std::vector</code>.)</p>\n", "Tags": "<c++11><initializer-list>", "OwnerUserId": "146041", "AnswerCount": "1"}});