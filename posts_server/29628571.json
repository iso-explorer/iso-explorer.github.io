post_cb({"29628571": {"CommentCount": "2", "AcceptedAnswerId": "29629437", "PostTypeId": "1", "LastEditorUserId": "4031604", "CreationDate": "2015-04-14T13:25:11.777", "LastActivityDate": "2017-07-05T10:00:07.570", "LastEditDate": "2015-04-14T13:56:09.633", "ViewCount": "1108", "FavoriteCount": "1", "Title": "GCC allows arrays to be returned from function - bug or feature?", "Id": "29628571", "Score": "27", "Body": "<p>I was amazed to find out that GCC allows functions to return arrays when trailing return type is used instead of normal one. As you probably knows arrays can't be copied so this is quite limited but let me show you some cool <a href=\"http://melpon.org/wandbox/permlink/v5cCXzAKq5E1i69f\">example</a>.</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;typeinfo&gt;\n\nusing namespace std;\n\nauto func() -&gt; int [5]\n{\n    return {4, 56, 78, 4, 0};\n}\n\nint main()\n{\n    cout &lt;&lt; func()[2] &lt;&lt; endl;\n    cout &lt;&lt; typeid(func).name() &lt;&lt; endl;\n}\n</code></pre>\n<p>Is this a compiler bug or some new feature?</p>\n<p><em>Interestingly 'typeid' returns 'FA5_ivE' which is demangled as '<code>int (()) [5]</code>' and this means exactly what you think an function returning array of 5 int's.</em></p>\n<p>EDIT: I tried bounding the returned array into rvalue reference but without any success (used most of the possible forms):</p>\n<pre><code>auto &amp;&amp;refArrayTemp{ func() };\n</code></pre>\n<p>Seems that this extensions is rather useless.</p>\n", "Tags": "<c++><arrays><gcc>", "OwnerUserId": "4031604", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_29628571_29628826_0": {"section_id": 3244, "quality": 1.0, "length": 27}}, "n3337": {"so_29628571_29628826_0": {"section_id": 3117, "quality": 1.0, "length": 27}}, "n4659": {"so_29628571_29628826_0": {"section_id": 4002, "quality": 1.0, "length": 27}}}, "29629437": {"ParentId": "29628571", "PostTypeId": "2", "CommentCount": "7", "CreationDate": "2015-04-14T14:02:57.650", "Score": "13", "LastEditorUserId": "567292", "LastEditDate": "2017-07-05T10:00:07.570", "Id": "29629437", "OwnerUserId": "567292", "Body": "<p>This was a <a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=65775\" rel=\"nofollow noreferrer\">bug in gcc</a> (fixed <a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=65775#c3\" rel=\"nofollow noreferrer\">as of 2017-07-03</a>), caused by inconsistent treatment of trailing-return-types.</p>\n<p>First note the difference in error message between two attempts to declare a function returning a function:</p>\n<pre><code>using Fv = void();\nFv f1();             // error: 'f1' declared as function returning a function\nauto f2() -&gt; Fv;     // error: function return type cannot be function\n</code></pre>\n<p>The first error comes from <a href=\"https://github.com/gcc-mirror/gcc/blob/dfec190b121ec95ea292155aff38e1330641a162/gcc/cp/decl.c#L9729\" rel=\"nofollow noreferrer\"><code>decl.c</code></a>, handling declarators, while the second is a lot deeper into the internals, from <a href=\"https://github.com/gcc-mirror/gcc/blob/d2e9c25258679cb1ffb7a84588d458035c6d9c02/gcc/tree.c#L8128\" rel=\"nofollow noreferrer\"><code>tree.c</code></a>, attempting to build the function type preparatory to generating code.</p>\n<p>Trailing-return-types are handled in decl.c <a href=\"https://github.com/gcc-mirror/gcc/blob/dfec190b121ec95ea292155aff38e1330641a162/gcc/cp/decl.c#L9759\" rel=\"nofollow noreferrer\">30 lines below</a> the above error - too late to catch it with the above error code, and it is not handled separately.</p>\n<p>With arrays, similarly using a trailing-return-type allows us to skip the checks in <code>decl.c</code>, the difference being that function-returning-array is actually valid in terms of gcc's internal representation.</p>\n<p>Note that you can't do much with it; gcc doesn't allow you to assign, reference-bind, decay or pass the result of <code>func()</code> to another function:</p>\n<pre><code>auto a1 = func();\n// error: invalid use of non-lvalue array\n\nauto&amp; a2 = func();\n// error: invalid initialization of non-const reference of type 'int (&amp;)[5]' from an rvalue of type 'int [5]'\n\nauto&amp;&amp; a3 = func();\n// error: lvalue required as unary '&amp;' operand\n</code></pre>\n<p>Indeed, even your code is rejected at <code>-Wpedantic</code>:</p>\n<pre><code>warning: ISO C++ forbids subscripting non-lvalue array\n</code></pre>\n<p>Finally, by exploiting a similar bug (qualifiers are stripped from scalars before handling of trailing-return-types) we can create a function with type <code>int const volatile()</code>:</p>\n<pre><code>int const volatile g1();          // warning: type qualifiers ignored on function return type\nauto g2() -&gt; int const volatile;  // OK!!\n</code></pre>\n", "LastActivityDate": "2017-07-05T10:00:07.570"}, "29628826": {"ParentId": "29628571", "PostTypeId": "2", "CommentCount": "2", "CreationDate": "2015-04-14T13:35:23.497", "Score": "8", "LastEditorUserId": "701092", "LastEditDate": "2015-04-14T13:50:32.283", "Id": "29628826", "OwnerUserId": "701092", "Body": "<p>Latest draft, [dcl.array]/p10:</p>\n<blockquote>\n<p id=\"so_29628571_29628826_0\"><strong>Functions shall not have a return type of type array or function, although they may have a return type of\n  type pointer or reference to such things.</strong> There shall be no arrays of functions, although there can be arrays\n  of pointers to functions.</p>\n</blockquote>\n<p>This could be a non-standard GCC extension. <a href=\"http://melpon.org/wandbox/permlink/2xHCowlDxFLloiRz\">It doesn't compile in the trunk version of clang.</a> However, this may also be a bug since it has inconsistent behavior with a <a href=\"http://melpon.org/wandbox/permlink/LlLyrcaaoML1P5nv\">non-trailing return type</a>.</p>\n", "LastActivityDate": "2015-04-14T13:50:32.283"}});