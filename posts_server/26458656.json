post_cb({"26462432": {"ParentId": "26458656", "CommentCount": "4", "Body": "<p><sub><em>Disclaimer: this answer appears to be valid at the exact time and date it was posted. Future readers should not rely on its validity without checking the linked sources themselves for update progresses</em></sub></p>\n<p>There's an issue pending regarding the paragraph misleading hint that a prvalue bitfield might happen, <a href=\"http://wg21.cmeerw.net/cwg/issue1925\" rel=\"nofollow\">precisely 1925</a>:</p>\n<blockquote>\n<p id=\"so_26458656_26462432_0\">According to 5.18 [expr.comma] paragraph 1,</p>\n<blockquote>\n<p id=\"so_26458656_26462432_3\">The type and value of the result are the type and value of the right operand; the result is of the same value category as its right operand, and is a bit-field if its right operand is a glvalue and a bit-field.</p>\n</blockquote>\n<p id=\"so_26458656_26462432_2\">The description of a bit-field result seems to indicate that the operand might not be a glvalue but could still be a bit-field. There doesn't appear to be a normative prohibition against prvalue bit-fields, so one should presumably be added, and this wording should be adjusted to remove the suggestion that such a thing might exist.</p>\n</blockquote>\n<p>At the time of writing this the status is <em>drafting</em> so I believe a few extra iterations will be needed to have this changed. Also <a href=\"http://clang.llvm.org/cxx_dr_status.html\" rel=\"nofollow\">clang's 1925 in the defect report</a> lists this as \"<em>not resolved</em>\" for now.</p>\n", "OwnerUserId": "1938163", "PostTypeId": "2", "Id": "26462432", "Score": "0", "CreationDate": "2014-10-20T09:31:46.103", "LastActivityDate": "2014-10-20T09:31:46.103"}, "bq_ids": {"n4140": {"so_26458656_26458656_0": {"section_id": 6182, "quality": 0.9523809523809523, "length": 20}, "so_26458656_26462432_3": {"section_id": 6182, "quality": 0.9523809523809523, "length": 20}, "so_26458656_26462432_1": {"section_id": 6182, "quality": 0.9523809523809523, "length": 20}}, "n3337": {"so_26458656_26458656_0": {"section_id": 5943, "quality": 0.9523809523809523, "length": 20}, "so_26458656_26462432_3": {"section_id": 5943, "quality": 0.9523809523809523, "length": 20}, "so_26458656_26462432_1": {"section_id": 5943, "quality": 0.9523809523809523, "length": 20}}, "n4659": {"so_26458656_26458656_0": {"section_id": 7684, "quality": 0.9047619047619048, "length": 19}, "so_26458656_26462432_3": {"section_id": 7684, "quality": 0.9047619047619048, "length": 19}, "so_26458656_26462432_1": {"section_id": 7684, "quality": 0.9047619047619048, "length": 19}}}, "26458656": {"CommentCount": "2", "ViewCount": "75", "OwnerDisplayName": "user2953119", "CreationDate": "2014-10-20T04:37:51.517", "LastActivityDate": "2014-10-20T09:31:46.103", "PostTypeId": "1", "AcceptedAnswerId": "26462432", "Title": "Understanding glvalue concept by example using bit-filed?", "Id": "26458656", "Score": "2", "Body": "<p>I was reading about comma operator (N3797::5.18 <code>[expr.comma]</code>) and come across the following:</p>\n<blockquote>\n<p id=\"so_26458656_26458656_0\">The type and value of the result are the type and value of the right\n  operand; the result is of the same value category as its right\n  operand, and is a bit-field if its right operand <em>is</em> a glvalue and a\n  bit-field.</p>\n</blockquote>\n<p>How could an expression referes to a bit-field ever be a non-glvalue?</p>\n<pre><code>struct A\n{\n    unsigned int a : 3;\n}\n\nA a{7};\n\nint main()\n{\n    ++a.a;\n    std::cout &lt;&lt; a.a; //0\n}\n</code></pre>\n", "Tags": "<c++><lvalue>", "AnswerCount": "1"}});