post_cb({"5654540": {"Id": "5654540", "PostTypeId": "2", "Body": "<p>Consider ice cream cones.  Suppose you go to the ice cream shop and order a \"vanilla cone.\"  You'll get a cone with a scoop of vanilla ice cream.  You can then add a cherry on top, but it's still what you ordered, though -- a vanilla cone.</p>\n<p>Objects are kind of like the ice cream cone.  The const-ness is like the cherry on top.  You can add the constness to the object without changing the object itself:</p>\n<pre><code>class Foo \n{ \npublic: \n  void DoIt() {}; \n} foo;\n\nFoo* regular_foo = &amp;foo; // OK\nconst Foo* const_foo = &amp;foo; // Also OK\n</code></pre>\n<p>Back to the ice cream shop.  This time order a vanilla cone with sprinkles.  They give you a cone with 1 scoop of vanilla ice cream and some candies sprinkled on top.  Now you can't take the sprinkles off without changing what you ordered.  If you take off the sprinkles you won't have a \"vanilla cone with sprinkles\", you'll just have a vanilla cone.</p>\n<pre><code>class Foo \n{ \npublic: \n  void DoIt() {}; \n};\n\nconst Foo foo;\nFoo* regular_foo = &amp;foo; // Not OK!\nconst Foo* const_foo = &amp;foo; // But this is OK\n</code></pre>\n<p>EDIT:</p>\n<p>For a more rigorous treatment of my analogy above, you can read the passage int he Standard quoted by @Potatoswatter:</p>\n<h2>4.4 Qualification conversions [conv.qual]</h2>\n<blockquote>\n<p id=\"so_5654345_5654540_0\">1 An rvalue of type \u201cpointer to cv1 T\u201d\n  can be converted to an rvalue of type\n  \u201cpointer to cv2 T\u201d if \u201ccv2 T\u201d is more\n  cv-qualified than \u201ccv1 T.\u201d</p>\n</blockquote>\n", "LastActivityDate": "2011-04-13T19:30:06.853", "CommentCount": "1", "CreationDate": "2011-04-13T19:30:06.853", "ParentId": "5654345", "Score": "2", "OwnerUserId": "241536"}, "5654430": {"Id": "5654430", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_5654345_5654430_0\">how can 'this' point to a constant employee object if print is declared a constant function....</p>\n</blockquote>\n<p>With the <code>const</code> modifier at the end of the non-static member function <code>print</code>, state of the object upon which it is called cannot be modified in it( how ever with <code>const_cast</code> typecast it is possible and that voids very use of <code>const</code> modifier for the member function ). That is what the significance of <code>const</code> at the end of the function. </p>\n", "LastActivityDate": "2011-04-13T19:21:29.980", "CommentCount": "0", "CreationDate": "2011-04-13T19:21:29.980", "ParentId": "5654345", "Score": "1", "OwnerUserId": "528724"}, "5654432": {"Id": "5654432", "PostTypeId": "2", "Body": "<p>The <code>const</code> is called a <em>cv-qualifier</em>; <code>const employee *</code> is <em>more cv-qualified</em> than <code>employee *</code>. \u00a74.4/1 of the Standard says</p>\n<blockquote>\n<p id=\"so_5654345_5654432_0\">A prvalue of type \u201cpointer to cv1 T\u201d can be converted to a prvalue of type \u201cpointer to cv2 T\u201d if \u201ccv2 T\u201d is more cv-qualified than \u201ccv1 T\u201d.</p>\n</blockquote>\n<p>In plain English, <code>const</code> simply guarantees that you won't try to change the object through that pointer. It is always fine to add that guarantee and restrict yourself further.</p>\n<p>A problem occurs only when you try to eliminate such a guarantee, which is why you cannot use a non-const method (and obtain a non-const <code>this</code>) from a const object.</p>\n", "LastActivityDate": "2011-04-13T19:21:43.263", "CommentCount": "0", "CreationDate": "2011-04-13T19:21:43.263", "ParentId": "5654345", "Score": "1", "OwnerUserId": "153285"}, "5654384": {"Id": "5654384", "PostTypeId": "2", "Body": "<p>There is no problem in having a <code>const employee*</code> pointing to a non const object.  Having a <code>employee*</code> pointing to a const object is problematic and prevented by the language rules (until you begin to play with const_cast).</p>\n", "LastActivityDate": "2011-04-13T19:18:01.937", "CommentCount": "0", "CreationDate": "2011-04-13T19:18:01.937", "ParentId": "5654345", "Score": "1", "OwnerUserId": "136208"}, "bq_ids": {"n4140": {"so_5654345_5654540_0": {"length": 13, "quality": 0.8666666666666667, "section_id": 14}, "so_5654345_5654432_0": {"length": 15, "quality": 1.0, "section_id": 14}}, "n3337": {"so_5654345_5654540_0": {"length": 13, "quality": 0.8666666666666667, "section_id": 11}, "so_5654345_5654432_0": {"length": 15, "quality": 1.0, "section_id": 11}}, "n4659": {"so_5654345_5654540_0": {"length": 13, "quality": 0.8666666666666667, "section_id": 19}, "so_5654345_5654432_0": {"length": 15, "quality": 1.0, "section_id": 19}}}, "5654397": {"Id": "5654397", "PostTypeId": "2", "Body": "<p><code>const employee* const</code> is a const pointer to a const employee. Contrast that with <code>employee* const</code> which is a const pointer to a non-const employee.</p>\n<p>In the former case, neither <code>this</code> nor anything it points to may be modified. In the latter case, <code>this</code> may not be modified, but you may modify anything <code>this</code> points to.</p>\n", "LastActivityDate": "2011-04-13T19:18:36.020", "CommentCount": "2", "CreationDate": "2011-04-13T19:18:36.020", "ParentId": "5654345", "Score": "2", "OwnerUserId": "8747"}, "5654643": {"Id": "5654643", "PostTypeId": "2", "Body": "<p>Declaring a pointer as <code>const T* p;</code> does <em>not</em> mean that <code>p</code> points to a constant <code>T</code>. It means that <code>p</code> points to a <code>T</code>, which can be either constant or non-constant, and which cannot be changed through <code>p</code>.</p>\n", "LastActivityDate": "2011-04-13T19:38:33.940", "CommentCount": "0", "CreationDate": "2011-04-13T19:38:33.940", "ParentId": "5654345", "Score": "0", "OwnerUserId": "252000"}, "5654345": {"ViewCount": "251", "Body": "<p>suppose employee is a class....print is its non-static member function which prints the value of its private data member x...now i read that if print is a constant function the this pointer passed to it by the compiler is of the type </p>\n<blockquote>\n<p id=\"so_5654345_5654345_0\">const employee* const   </p>\n</blockquote>\n<p>and if print is a non-constant function the type of this pointer is   </p>\n<blockquote>\n<p id=\"so_5654345_5654345_1\">employee* const  </p>\n</blockquote>\n<p>....now the problem is that i have not declared the object of class employee as constant so how can 'this' point to a constant employee object if print is declared a constant function....</p>\n", "AcceptedAnswerId": "5654540", "Title": "this pointer as a pointer to objects", "CreationDate": "2011-04-13T19:14:19.003", "Id": "5654345", "CommentCount": "3", "PostTypeId": "1", "LastActivityDate": "2011-04-13T19:38:33.940", "Score": "3", "OwnerUserId": "648290", "Tags": "<c++>", "AnswerCount": "6"}});