post_cb({"24500631": {"ParentId": "24500386", "CommentCount": "2", "Body": "<p>9.3.1/3 (in <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3485.pdf\" rel=\"nofollow\">N3485</a>) says</p>\n<blockquote>\n<p id=\"so_24500386_24500631_0\">When an id-expression (5.1) that is not part of a class member access syntax (5.2.5) and not used to form\n  a pointer to member (5.3.1) is used in a member of class X in a context where this can be used (5.1.1),\n  if name lookup (3.4) resolves the name in the id-expression to a non-static non-type member of some class\n  C, and if either the id-expression is potentially evaluated or C is X or a base class of X, the id-expression is\n  transformed into a class member access expression (5.2.5) using (*this) (9.3.2) as the post\ufb01x-expression to\n  the left of the . operator.</p>\n</blockquote>\n<p>In your second example, this means the body of A::h() gets transformed into (*this).f(), making the call an explicit class member access.  Thus the last line of 12.7/4 applies; the behavior is undefined.</p>\n", "OwnerUserId": "2263978", "PostTypeId": "2", "Id": "24500631", "Score": "2", "CreationDate": "2014-06-30T23:57:55.210", "LastActivityDate": "2014-06-30T23:57:55.210"}, "24500386": {"CommentCount": "0", "ViewCount": "111", "PostTypeId": "1", "LastEditorUserId": "459640", "CreationDate": "2014-06-30T23:27:09.283", "LastActivityDate": "2014-07-01T13:31:13.043", "Title": "Virtual calls during construction / destruction", "FavoriteCount": "2", "LastEditDate": "2014-07-01T13:31:13.043", "Id": "24500386", "Score": "3", "Body": "<p>C++ Standard 12.7/4 says:</p>\n<blockquote>\n<p id=\"so_24500386_24500386_0\">When a virtual function is called directly or indirectly from a constructor or from a destructor, including during the construction or destruction of the class's non-static data members, and the object to which the call applies is the object (call it <code>x</code>) under construction or destruction, the function called is the final overrider in the constructor's or destructor's class and not one overriding it in a more-derived class.  If the virtual function call uses an explicit class member access (5.2.5) and the object expression refers to the complete object of <code>x</code> or one of that object's base class subobjects but not <code>x</code> or one of its base class subobjects, the behavior is undefined.</p>\n</blockquote>\n<p>This text is the same in all versions I checked (though in C++03 it was paragraph 12.7/3).</p>\n<p>My question is about the phrase \"<strong>uses an explicit class member access</strong>\".  Possibly the point of that phrase is to point out that in the constructor/destructor body, virtual calls that use the implicit <code>this-&gt;</code> are safe since the object expression does refer to the object <code>x</code>:</p>\n<pre><code>struct A;\nA* p;\n\nstruct A {\n    A() { p = this; }\n    virtual ~A() { if (p == this) p = nullptr; }\n    virtual void f() {}\n};\n\nstruct B {\n    B();\n    virtual ~B();\n    virtual void g() {}\n};\n\nstruct C : public A, public B {\n    virtual void f() {}\n    virtual void g() {}\n};\n\nB::B() {\n    if (p) p-&gt;f(); // UB if `p` and `this` point at same complete object\n    g();           // Definitely safe, calls B::g().\n}\n\nB::~B() {\n    if (p) p-&gt;f(); // UB if `p` and `this` point at same complete object\n    g();           // Definitely safe, calls B::g().\n}\n\nint main() {\n    C c;      // UB in B::B() and B::~B()!\n}\n</code></pre>\n<p>But what if the virtual function call is not syntactically in the definition of the constructor or destructor, but is called indirectly?  What is the behavior of this program?</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct A {\n    virtual void f() { std::cout &lt;&lt; \"A::f()\\n\"; }\n    void h() { f(); }\n};\n\nstruct B {\n    explicit B(A&amp; a) { a.h(); }\n};\n\nstruct C : public A, public B {\n    C() : A(), B(static_cast&lt;A&amp;&gt;(*this)) {}\n    virtual void f() { std::cout &lt;&lt; \"C::f()\\n\"; }\n};\n\nint main() {\n    C c;\n}\n</code></pre>\n<p>I would expect that in <code>B::B(A&amp;)</code>, calling <code>a.h()</code> is just as undefined as calling <code>a.f()</code>.  But we can't say the last sentence in 12.7/4 applies, since the virtual function call does not use an explicit class member access.  Have I missed something?  Are <code>a.f()</code> and <code>a.h()</code> really supposed to act differently in this context?  Is there a Defect Report related to this?  Should there be?</p>\n", "Tags": "<c++><polymorphism><language-lawyer>", "OwnerUserId": "459640", "AnswerCount": "2"}, "24500476": {"ParentId": "24500386", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>It should not make any difference.</p>\n<p>The standard says:</p>\n<blockquote>\n<p id=\"so_24500386_24500476_0\">When a virtual function is called directly or indirectly</p>\n</blockquote>\n<p>However, your compiler may well have a bug - perhaps because it optimises the code in <code>h</code>, thinking that it understands what is going on (and not actually doing the right thing). You haven't mentioned WHICH compiler you are using, so it's not possible to say if there is a defect report... </p>\n<p>Edit: Both g++ 4.8.2 and clang++ 3.5 prior to release from a few weeks back (with -std=c++11, in case that makes a difference) calls <code>C::f()</code> in the destructor, and <code>A::f()</code> in the constructor for your first testcase. In the second test-case, g++ calls <code>A::f()</code>, where clang++ calls <code>C::f()</code>. So clearly, the compiler seems to do \"whatever it feels like\" here. [Note that since it's \"undefined\", it can do all sorts of different things, including \"what you expect\"]. </p>\n<p>(In the first test-case, I modified <code>p</code> to be <code>a</code> to make it compile, and added printouts in <code>f</code> and <code>g</code> functions)</p>\n", "OwnerUserId": "1919155", "LastEditorUserId": "1919155", "LastEditDate": "2014-07-01T00:11:22.217", "Id": "24500476", "Score": "2", "CreationDate": "2014-06-30T23:38:19.243", "LastActivityDate": "2014-07-01T00:11:22.217"}, "bq_ids": {"n4140": {"so_24500386_24500386_0": {"section_id": 447, "quality": 0.9838709677419355, "length": 61}, "so_24500386_24500476_0": {"section_id": 447, "quality": 1.0, "length": 6}, "so_24500386_24500631_0": {"section_id": 5891, "quality": 0.8723404255319149, "length": 41}}, "n3337": {"so_24500386_24500386_0": {"section_id": 438, "quality": 0.9838709677419355, "length": 61}, "so_24500386_24500476_0": {"section_id": 438, "quality": 1.0, "length": 6}, "so_24500386_24500631_0": {"section_id": 5662, "quality": 0.8723404255319149, "length": 41}}, "n4659": {"so_24500386_24500386_0": {"section_id": 469, "quality": 0.9838709677419355, "length": 61}, "so_24500386_24500476_0": {"section_id": 469, "quality": 1.0, "length": 6}, "so_24500386_24500631_0": {"section_id": 7374, "quality": 0.8723404255319149, "length": 41}}}});