post_cb({"bq_ids": {"n4140": {"so_11394924_11394947_1": {"length": 17, "quality": 0.9444444444444444, "section_id": 3299}, "so_11394924_11396061_2": {"length": 6, "quality": 1.0, "section_id": 3298}, "so_11394924_11396061_1": {"length": 6, "quality": 1.0, "section_id": 3325}, "so_11394924_11394947_0": {"length": 17, "quality": 0.7083333333333334, "section_id": 3298}}, "n3337": {"so_11394924_11396061_1": {"length": 6, "quality": 1.0, "section_id": 3195}, "so_11394924_11396061_2": {"length": 6, "quality": 1.0, "section_id": 3168}, "so_11394924_11394947_0": {"length": 20, "quality": 0.8333333333333334, "section_id": 3168}, "so_11394924_11394947_1": {"length": 17, "quality": 0.9444444444444444, "section_id": 3169}}, "n4659": {"so_11394924_11396061_2": {"length": 5, "quality": 0.8333333333333334, "section_id": 48}, "so_11394924_11396061_1": {"length": 6, "quality": 1.0, "section_id": 4091}, "so_11394924_11394947_1": {"length": 13, "quality": 0.7222222222222222, "section_id": 4065}}}, "11394924": {"ViewCount": "283", "Body": "<pre><code>#include &lt;memory&gt;\n\nstruct foo\n{\n    std::unique_ptr&lt;int&gt; p;\n};\n\nint main()\n{\n    foo bar { std::unique_ptr&lt;int&gt;(new int(42)) };\n    // okay\n\n    new foo { std::unique_ptr&lt;int&gt;(new int(42)) };\n    // error: no matching function for call to\n    // 'foo::foo(&lt;brace-enclosed initializer list&gt;)'\n}\n</code></pre>\n<p>Does uniform initialization not work with dynamic objects, or is this a shortcoming of g++ 4.6.1?</p>\n<hr>\n<p>It works with g++ 4.7.1, but <strong>both lines</strong> in <code>main</code> fail to compile if <code>foo</code> inherits from another class:</p>\n<pre><code>struct baz\n{\n    // no data members, just some member functions\n};\n\nstruct foo : baz\n{\n    std::unique_ptr&lt;int&gt; p;\n};\n</code></pre>\n<p>Again, shortcoming of my compiler? Or does uniform initialization not play well with inheritance?</p>\n</hr>", "AcceptedAnswerId": "11394947", "Title": "uniform initialization for dynamic objects", "CreationDate": "2012-07-09T12:21:52.900", "Id": "11394924", "CommentCount": "3", "LastEditDate": "2012-07-09T13:03:23.723", "PostTypeId": "1", "LastEditorUserId": "252000", "LastActivityDate": "2012-07-09T13:39:55.360", "Score": "3", "OwnerUserId": "252000", "Tags": "<c++><c++11><initialization><unique-ptr><uniform-initialization>", "AnswerCount": "3"}, "11394947": {"Id": "11394947", "PostTypeId": "2", "Body": "<p>It builds fine with g++-4.7. So presumably the latter. I'll have a look to see if I can find stronger evidence via the docs.</p>\n<p><strong>And in response to the inheritance addendum:</strong></p>\n<p>This simpler case also fails to compile:</p>\n<pre><code>struct baz\n{\n};\n\nstruct foo : baz\n{\n    int b;\n};\n\nint main()\n{\n    foo bar { 12 };\n}\n</code></pre>\n<p>With:</p>\n<pre><code>testoo.cpp:14:18: error: no matching function for call to \u2018foo::foo(&lt;brace-enclosed initializer list&gt;)\u2019\ntestoo.cpp:14:18: note: candidates are:\ntestoo.cpp:7:8: note: foo::foo()\ntestoo.cpp:7:8: note:   candidate expects 0 arguments, 1 provided\ntestoo.cpp:7:8: note: constexpr foo::foo(const foo&amp;)\ntestoo.cpp:7:8: note:   no known conversion for argument 1 from \u2018int\u2019 to \u2018const foo&amp;\u2019\ntestoo.cpp:7:8: note: constexpr foo::foo(foo&amp;&amp;)\ntestoo.cpp:7:8: note:   no known conversion for argument 1 from \u2018int\u2019 to \u2018foo&amp;&amp;\u2019\n</code></pre>\n<p>According to my reading of the standard, you have been getting <code>aggregate initialization</code> in your first example:</p>\n<blockquote>\n<p id=\"so_11394924_11394947_0\">An aggregate is an array or a class (Clause 9) with no user-provided\n  constructors (12.1), no brace-or-equal- initializers for non-static\n  data members (9.2), no private or protected non-static data members\n  (Clause 11), no base classes (Clause 10), and no virtual functions\n  (10.3).</p>\n<p id=\"so_11394924_11394947_1\">When an aggregate is initialized by an initializer list, as specified\n  in 8.5.4, the elements of the initializer list  are taken as\n  initializers for the members of the aggregate, in increasing subscript\n  or member order.</p>\n</blockquote>\n<p>Note that this explicitly forbids base classes. So to sum up - aggregate initialization is not allowed in the presence of base classes. And hence neither of the second examples will compile.</p>\n", "LastEditorUserId": "415313", "LastActivityDate": "2012-07-09T13:39:55.360", "Score": "4", "CreationDate": "2012-07-09T12:23:44.103", "ParentId": "11394924", "CommentCount": "4", "OwnerUserId": "415313", "LastEditDate": "2012-07-09T13:39:55.360"}, "11395724": {"Id": "11395724", "PostTypeId": "2", "Body": "<p>I do not have the final version in hand at the moment, but draft N3242, <code>\u00a7 8.5.4 List-initialization</code> explicitly states that list-initialization can be used as the initializer in a new expression.  It also provides the following example:</p>\n<pre><code>new std::vector&lt;std::string&gt;{\"once\", \"upon\", \"a\", \"time\"}; // 4 string elements\n</code></pre>\n", "LastActivityDate": "2012-07-09T13:10:41.100", "CommentCount": "0", "CreationDate": "2012-07-09T13:10:41.100", "ParentId": "11394924", "Score": "1", "OwnerUserId": "1053968"}, "11396061": {"Id": "11396061", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_11394924_11396061_0\"><strong>both lines</strong> in <code>main</code> fail to compile if <code>foo</code> inherits from another class</p>\n</blockquote>\n<p>Ah, uniform initialization works differently for aggregates and non-aggregates:</p>\n<blockquote>\n<p id=\"so_11394924_11396061_1\">List-initialization of an object or reference of type T is defined as follows:</p>\n<ul>\n<li>If T is an aggregate, aggregate initialization is performed</li>\n<li>[...]</li>\n<li>Otherwise, if T is a class type, constructors are considered</li>\n</ul>\n<p id=\"so_11394924_11396061_2\">An aggregate is [..] a class [...] with no base classes [...] and no virtual functions.</p>\n</blockquote>\n<p>So I still have to write custom constructors in my case, since I need the subtype polymorphism here.</p>\n", "LastActivityDate": "2012-07-09T13:30:53.363", "CommentCount": "1", "CreationDate": "2012-07-09T13:30:53.363", "ParentId": "11394924", "Score": "2", "OwnerUserId": "252000"}});