post_cb({"12192598": {"Id": "12192598", "PostTypeId": "2", "Body": "<p>One of the standard conversions, in both C and C++, is the function-to-pointer conversion; when a function name appears in an expression, it can be converted into a pointer to that function. So:</p>\n<ul>\n<li><code>foo</code> is equivalent to <code>&amp;foo</code></li>\n<li><code>*foo</code> is equivalent to <code>*(&amp;foo)</code>, or <code>foo</code></li>\n<li><code>**foo</code> is eqivalent to <code>**(&amp;foo)</code>, or <code>*foo</code>, or <code>foo</code></li>\n</ul>\n<p>and so on.</p>\n<p>This means that you can legally add as many <code>*</code> as you like before a function name without changing its meaning. There's no reason to do that, though.</p>\n", "LastActivityDate": "2012-08-30T08:13:47.877", "CommentCount": "0", "CreationDate": "2012-08-30T08:13:47.877", "ParentId": "12192368", "Score": "42", "OwnerUserId": "204847"}, "12303402": {"Id": "12303402", "PostTypeId": "2", "Body": "<p>The way i understand it is</p>\n<pre><code>* is a pointer to a memory address\n&amp; is the value at the Memory address\n\n*foo means pointer to foo memory address\n**foo means *(*foo) *(foo memory address) This is a different value from *foo\n</code></pre>\n<p>it continues like that...</p>\n", "LastActivityDate": "2012-09-06T15:26:09.603", "CommunityOwnedDate": "2012-09-06T15:26:09.603", "CommentCount": "0", "CreationDate": "2012-09-06T15:26:09.603", "ParentId": "12192368", "Score": "-4", "OwnerUserId": "938985"}, "bq_ids": {"n4140": {"so_12192368_12192415_4": {"length": 6, "quality": 0.5454545454545454, "section_id": 6064}}, "n3337": {"so_12192368_12192415_4": {"length": 6, "quality": 0.5454545454545454, "section_id": 5832}}}, "12192368": {"ViewCount": "1960", "Body": "<p>I can't think of any practical use of multiple asterisks in the function call:</p>\n<pre><code>void foo(int a, char b)\n{\n\n}\n\nint main(void)\n{\n    (**************foo)(45, 'c');\n\n    //or with pointer to function:\n    void (*ptr)(int, char) = foo;\n    (******ptr)(32, 'a');\n}\n</code></pre>\n<p>Why is this thing allowed both in C and C++?</p>\n", "AcceptedAnswerId": "12192415", "Title": "What's the use of multiple asterisks in the function call?", "CreationDate": "2012-08-30T07:57:42.437", "Id": "12192368", "CommentCount": "4", "FavoriteCount": "8", "PostTypeId": "1", "LastActivityDate": "2012-09-06T15:26:09.603", "Score": "36", "OwnerUserId": "1576085", "Tags": "<c++><c><function-pointers><dereference><function-call>", "AnswerCount": "4"}, "12192415": {"Id": "12192415", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_12192368_12192415_0\">Why is this thing allowed both in C and C++?</p>\n</blockquote>\n<p>I can't speak for C++, but for C at least a function designator is converted to a pointer:</p>\n<blockquote>\n<p id=\"so_12192368_12192415_1\">6.3.2.1 - 4</p>\n<p id=\"so_12192368_12192415_2\">A <strong>function designator</strong> is an expression that has function type. Except\n  when it is the operand of the sizeof operator or the unary &amp; operator,\n  a function designator with type \u2018\u2018function returning type\u2019\u2019 is\n  converted to an expression that has type \u2018\u2018<strong>pointer to function\n  returning type</strong>\u2019\u2019.</p>\n</blockquote>\n<p>Applying the indirection operator yields a function designator:</p>\n<blockquote>\n<p id=\"so_12192368_12192415_3\">6.5.3.2 - 3</p>\n<p id=\"so_12192368_12192415_4\">The unary * operator denotes indirection. If the operand points to a\n  function, the result is a <strong>function designator</strong></p>\n</blockquote>\n<p>So no matter how many times you apply the indirection operator you'll get the same thing: a function designator that's immediately converted to a pointer.</p>\n<hr>\n<p>In my opinion there's little or no use in doing this.</p>\n</hr>", "LastActivityDate": "2012-08-30T08:01:30.590", "CommentCount": "0", "CreationDate": "2012-08-30T08:01:30.590", "ParentId": "12192368", "Score": "39", "OwnerUserId": "714501"}, "12192399": {"Id": "12192399", "PostTypeId": "2", "Body": "<p>Because the <code>*</code> operator expects an address value. And whenever a value is expected (as opposed to an object or function glvalue), the lvalue to rvalue, function to pointer and array to pointer conversions are applied on an operand. So the dereferenced function immediately again converts to a pointer when again dereferenced. </p>\n<p>These all either read values from objects or produce a pointer value that refers to the beginning of an array or function respectively.</p>\n<p>These rows of dereferences have no purpose other than for the lulz of it.</p>\n", "LastEditorUserId": "34509", "Score": "9", "LastActivityDate": "2012-08-30T08:04:22.730", "CreationDate": "2012-08-30T08:00:14.430", "ParentId": "12192368", "CommentCount": "0", "LastEditDate": "2012-08-30T08:04:22.730", "OwnerUserId": "34509"}});