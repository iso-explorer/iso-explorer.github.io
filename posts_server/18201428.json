post_cb({"18202242": {"ParentId": "18201428", "CommentCount": "0", "Body": "<p>The problem is probably that you are storing and sorting pointers, not objects. The points will be compared not with your operator but their addresses. Try change points to <code>vector&lt;Point2d&gt;</code></p>\n", "OwnerUserId": "1790748", "PostTypeId": "2", "Id": "18202242", "Score": "0", "CreationDate": "2013-08-13T06:38:09.850", "LastActivityDate": "2013-08-13T06:38:09.850"}, "18202254": {"ParentId": "18201428", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>First of all just use  (if your are just planning to sort 2D points) :</p>\n<p>(<strong>Edit :</strong> See Benjamin Lindley comments below.)</p>\n<pre><code>bool operator &lt; ( Point2D a,  Point2D b)\n{\n    return a.getx() &lt; b.getx() || \n          (a.getx()==b.getx() &amp;&amp; a.gety()&lt; b.gety() );\n}\n</code></pre>\n<p>Another thing if use use <code>std::cout</code> in  <code>operator &lt; ( Point2D a,  Point2D b)</code>, you will notice it won't be called anytime.</p>\n<p>The reason is this:</p>\n<p><code>vector&lt;Point2D*&gt; points;  // Vector of Point2D*</code></p>\n<p>but <code>bool operator&lt; (Point2D a, Point2D b)</code> is used for comparision.</p>\n<p>Suggested Fixes:</p>\n<pre><code>vector&lt;Point2D&gt; points;\n\npoints.push_back(Point2D(my_x, my_y));\n</code></pre>\n<p>And accordingly, wherever applicable.</p>\n<p>Also you can't define anything like </p>\n<p><code>bool operator&lt;(const Point2D* a, const Point2D* b)</code></p>\n<p>Because of this:</p>\n<blockquote>\n<p id=\"so_18201428_18202254_0\"><strong>C++03 standard, \u00a713.5 [over.oper] p6:</strong></p>\n<p id=\"so_18201428_18202254_1\">An operator function shall either be a non-static member function or\n  be a non-member function and have at least one parameter whose type is\n  a class, a reference to a class, an enumeration, or a reference to an\n  enumeration.</p>\n</blockquote>\n", "OwnerUserId": "1870232", "LastEditorUserId": "1870232", "LastEditDate": "2013-08-13T06:50:01.187", "Id": "18202254", "Score": "0", "CreationDate": "2013-08-13T06:38:39.050", "LastActivityDate": "2013-08-13T06:50:01.187"}, "18201428": {"CommentCount": "10", "ViewCount": "270", "PostTypeId": "1", "LastEditorUserId": "2640964", "CreationDate": "2013-08-13T05:39:57.463", "LastActivityDate": "2013-08-13T06:50:01.187", "Title": "Order: An Analysis on Point Sorting", "AcceptedAnswerId": "18201967", "LastEditDate": "2013-08-13T05:51:02.443", "Id": "18201428", "Score": "1", "Body": "<p>So I've made for myself a point printing class, that is supposed to have the user enter in 2-tuples; that is, x and y, that then prints them back to the user in ^order,^ where order means p1=(x,y)\n\n<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;string&gt;\n#include &lt;cmath&gt;\n#include &lt;algorithm&gt;\n\nusing namespace std;\n\nclass Point2D {\npublic:\n    Point2D();\n    Point2D(double a, double b);\n\n    double getx();\n    double gety();\n\n    void setx(double a);\n    void sety(double b);\n\n    virtual void print();\n    virtual void print(int a);\n\n    double angle();\n\nprivate:\n    double x;\n    double y;\n};\n\nbool operator&lt;( Point2D a , Point2D b );\n\nint main() {\n\n    double my_x=-999;\n    double my_y=-999;\n    string my_color;\n    double my_weight;\n    vector&lt;Point2D*&gt; points;\n\n    cout &lt;&lt; \"Welcome to Point Printer! Please insert the x-and y-coordinates for your points and I will print them in sorted order! Just one rule, the point (0,0) is reserved as the terminating point, so when you are done enter (0,0).\\n\";\n\n    while(true)\n    {\n        cout &lt;&lt; \"x = \";\n        cin&gt;&gt;my_x;\n        cout &lt;&lt; \"y = \";\n        cin&gt;&gt;my_y;\n        if((my_x == 0)&amp;&amp;(my_y==0))\n        {\n            break;\n        }\n        points.push_back(new Point2D(my_x, my_y));\n    }\n    sort(points.begin(), points.end());\n\n    cout &lt;&lt; \"\\n\\n\";\n    cout &lt;&lt; \"Your points are\\n\\n\";\n\n    for(int i=0;i&lt;points.size();i++)\n    {\n        cout&lt;&lt;i+1&lt;&lt;\": \";\n        (*points[i]).print(); cout&lt;&lt;endl; // this is the printing gadget\n    }\n    for(int i=0; i&lt;points.size(); i++) \n    {\n        delete points[i];\n    }\n    cout &lt;&lt; endl &lt;&lt; endl;\n\n    return 0;\n\n}\n\ndouble Point2D::angle()\n{\n    double Angle = atan2(y,x);\n    if(Angle &lt; 0)\n    {\n        return Angle + 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679;\n    }\n    return Angle;\n}\n\nbool operator&lt; (Point2D a, Point2D b)\n{\n    if (a.getx()*a.getx()+a.gety()*a.gety() &lt; b.getx()*b.getx()+b.gety()*b.gety())\n    {\n        return true;\n    }\n    else if (a.getx()*a.getx()+a.gety()*a.gety() &gt; b.getx()*b.getx()+b.gety()*b.gety())\n    {\n        return false;\n    }\n    if (a.getx()*a.getx()+a.gety()*a.gety() ==b.getx()*b.getx()+b.gety()*b.gety())\n    {\n        if (a.angle() &lt; b.angle())\n        {\n            return true;\n        }\n        else if (a.angle() &gt; b.angle())\n        {\n            return false;\n        }\n    }\n    return true;\n}\n\nPoint2D::Point2D() { x = 0; y = 0; return;}\n\nPoint2D::Point2D(double a, double b) { x = a; y = b; return;}\n\ndouble Point2D::getx() { return x;}\ndouble Point2D::gety() { return y;}\n\nvoid Point2D::setx(double a) { x = a; return; }\nvoid Point2D::sety(double b) { y = b; return; }\n\nvoid Point2D::print() {\n    cout&lt;&lt;\"(\"&lt;&lt;x&lt;&lt;\",\"&lt;&lt;y&lt;&lt;\")\";\n    return;\n}\n\nvoid Point2D::print(int a) {\n    print(); cout&lt;&lt;endl;\n}\n</code></pre>\n<p>What I'm having trouble with is either one of the following:</p>\n<blockquote>\n<p id=\"so_18201428_18201428_0\">sort</p>\n<p id=\"so_18201428_18201428_1\">angle()</p>\n<p id=\"so_18201428_18201428_2\">operator&lt;(Point2D a, Point2D b)</p>\n<p id=\"so_18201428_18201428_3\">Something different entirely...</p>\n</blockquote>\n<p>In particular, the following points:</p>\n<pre><code>x = 1\ny = 2\nx = 2\ny = 3\nx = 1.1\ny = 2.2\nx = -10\ny = 10\nx = -5\ny = -3\nx = -5\ny = 3\nx = 5\ny = -3\nx = 5\ny = 3\nx = 0\ny = 0\n</code></pre>\n<p>are not sorted in the correct order.</p>\n<p>Any help would be much appreciated. Thank you.</p>\n</p>", "Tags": "<c++><class><operator-overloading><order>", "OwnerUserId": "2640964", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_18201428_18202254_1": {"section_id": 653, "quality": 0.95, "length": 19}}, "n3337": {"so_18201428_18202254_1": {"section_id": 643, "quality": 1.0, "length": 20}}, "n4659": {"so_18201428_18202254_1": {"section_id": 681, "quality": 0.95, "length": 19}}}, "18201967": {"ParentId": "18201428", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>The problem (or one of them) is the final statement in your comparison function.</p>\n<pre><code>return true;\n</code></pre>\n<p>Look at this block:</p>\n<pre><code>if (a.getx()*a.getx()+a.gety()*a.gety() ==b.getx()*b.getx()+b.gety()*b.gety())\n{\n    if (a.angle() &lt; b.angle())\n    {\n        return true;\n    }\n    else if (a.angle() &gt; b.angle())\n    {\n        return false;\n    }\n}\n</code></pre>\n<p>First of all, if we've gotten to this point, we've determined that the <code>(x*x + y*y)</code> calculations for both <code>a</code> and <code>b</code> are equal.  Now let's assume that the angle is also equal.  What happens?  The first test fails because <code>a.angle()</code> is not less than <code>b.angle()</code>. Then the second test fails because <code>a.angle()</code> is not greater than <code>b.angle()</code>.  Then you return true.  In other words, you're saying that it is true that <code>a</code> is less than <code>b</code>, even though by all rights, they should be considered equal, and so you should return false.  Instead of multiple tests on the angle, you can just <code>return a.angle() &lt; b.angle();</code>, and that should do the trick.  With some additional simplifications, your function should look something like this:</p>\n<pre><code>bool operator&lt;(Point2d a, Point2d b)\n{\n    double A = a.getx()*a.getx()+a.gety()*a.gety();\n    double B = b.getx()*b.getx()+b.gety()*b.gety();\n\n    if (A &lt; B) return true;\n    if (A &gt; B) return false;\n    return a.angle() &lt; b.angle();\n}\n</code></pre>\n", "OwnerUserId": "440119", "LastEditorUserId": "440119", "LastEditDate": "2013-08-13T06:24:03.823", "Id": "18201967", "Score": "0", "CreationDate": "2013-08-13T06:18:28.907", "LastActivityDate": "2013-08-13T06:24:03.823"}});