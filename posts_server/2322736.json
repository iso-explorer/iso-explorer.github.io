post_cb({"2322773": {"Id": "2322773", "PostTypeId": "2", "Body": "<p>The standard defines two terms: declaration and definition. A definition is a tentative declaration. However, the C99 and C++03 standards have slightly varying definitions. </p>\n<p>From C++0x draft:</p>\n<blockquote>\n<p id=\"so_2322736_2322773_0\"><strong>Appendix C</strong></p>\n<p id=\"so_2322736_2322773_1\"><strong>8.3.5</strong> Change: In C++, a function declared\n  with an empty parameter list takes no\n  arguments. In C, an empty parameter\n  list means that the number and type of\n  the function arguments are unknown\"</p>\n<p id=\"so_2322736_2322773_2\"><strong>Definitions</strong></p>\n<p id=\"so_2322736_2322773_3\"><strong>1.3.11  signature</strong> </p>\n<p id=\"so_2322736_2322773_4\">the name and the parameter-type-list\n  (8.3.5) of a function, as well as the\n  class, concept, concept map, or\n  namespace of which it is a member. If\n  a function or function template is a\n  class member its signature\n  additionally includes the\n  cv-qualifiers (if any) and the\n  ref-qualifier (if any) on the function\n  or function template itself. The\n  signature of a constrained member\n  (9.2) includes its template\n  requirements. The signature of a\n  function template additionally\n  includes its return type, its template\n  parameter list, and its template\n  requirements (if any). The signature\n  of a function template specialization\n  includes the signature of the template\n  of which it is a specialization and\n  its template arguments (whether\n  explicitly specified or deduced). [\n  Note: Signatures are used as a basis\n  for name mangling and linking.\u2014end\n  note ]</p>\n</blockquote>\n", "LastActivityDate": "2010-02-24T00:09:23.303", "CommentCount": "3", "CreationDate": "2010-02-24T00:09:23.303", "ParentId": "2322736", "Score": "6", "OwnerUserId": "66692"}, "2322781": {"Id": "2322781", "PostTypeId": "2", "Body": "<p>A function declaration is a prototype. A function signature indicates what is the return type and the parameters used that makes up the signature. Consider this:</p>\n<pre>\nint foo(int, int);  /* Function Declaration */\n\n\n/* Implementation of foo \n** Function signature\n*/\nint foo(int a, int b){\n}\n</pre>\n<p>Now, consider this scenario: a programmer is asked what is the function signature for <code>foo</code>:</p>\n<ul>\n<li>It returns a datatype of <code>int</code></li>\n<li>Two parameters are also of datatype of <code>int</code>, named <code>a</code> and <code>b</code> respectively</li>\n</ul>\n<p>The function prototype on the other hand is to clue in the C/C++ compiler, on what to expect and if the signature does not match up with the prototype, the compiler will emit an error, along the context of 'function declaration error' or 'prototype mismatch'.</p>\n<p>Hope this helps,\nBest regards,\nTom.</p>\n", "LastEditorUserId": "206367", "LastActivityDate": "2010-02-24T00:24:56.893", "Score": "0", "CreationDate": "2010-02-24T00:11:28.573", "ParentId": "2322736", "CommentCount": "3", "OwnerUserId": "206367", "LastEditDate": "2010-02-24T00:24:56.893"}, "2402813": {"Id": "2402813", "PostTypeId": "2", "Body": "<p>Also please note that top-level const and volatile on argument are not part of the signature, according to the standard.  But some compilers get this wrong.</p>\n<p>e.g.</p>\n<pre><code>void f(const int, const char* const);\n</code></pre>\n<p>has the same signature as</p>\n<pre><code>void f(int, const char*);\n</code></pre>\n", "LastActivityDate": "2010-03-08T16:26:34.857", "CommentCount": "0", "CreationDate": "2010-03-08T16:26:34.857", "ParentId": "2322736", "Score": "1", "OwnerUserId": "103167"}, "bq_ids": {"n4140": {"so_2322736_2322773_1": {"length": 10, "quality": 0.5555555555555556, "section_id": 3240}}, "n3337": {"so_2322736_2322773_1": {"length": 10, "quality": 0.5555555555555556, "section_id": 3113}}, "n4659": {"so_2322736_2322773_1": {"length": 10, "quality": 0.5555555555555556, "section_id": 3996}}}, "2322755": {"Id": "2322755", "PostTypeId": "2", "Body": "<p>The function signature doesn't include the return type or linkage type of the function.</p>\n<p>OK, <a href=\"http://en.wikipedia.org/wiki/Signature_(computer_science)\" rel=\"nofollow noreferrer\">Wikipedia</a> disagrees with me on the return type being included. However I know that the return type is not used by the compiler when deciding if a function call matches the signature.  This previous StackOverflow question appears to agree: <a href=\"https://stackoverflow.com/questions/290038/is-the-return-type-part-of-the-function-signature\">Is the return type part of the function signature?</a></p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2010-02-24T00:18:48.183", "Score": "3", "CreationDate": "2010-02-24T00:05:47.430", "ParentId": "2322736", "CommentCount": "6", "OwnerUserId": "5987", "LastEditDate": "2017-05-23T11:47:14.150"}, "2322736": {"ViewCount": "25209", "Body": "<p>In C or C++ what is the difference between function declaration and function signature?</p>\n<p>I know something of function declaration but function signature is totally new to me. What is the point of having the concept of function signature? What are the two concepts used for actually?</p>\n<p>Thanks!</p>\n", "AcceptedAnswerId": "2323005", "Title": "what is the difference between function declaration and signature?", "CreationDate": "2010-02-24T00:02:44.367", "Id": "2322736", "CommentCount": "1", "FavoriteCount": "10", "PostTypeId": "1", "LastEditDate": "2010-02-24T00:23:04.627", "LastEditorUserId": "156458", "LastActivityDate": "2017-02-03T21:42:45.683", "Score": "28", "OwnerUserId": "156458", "Tags": "<c++><c><function><declaration><signature>", "AnswerCount": "5"}, "2323005": {"Id": "2323005", "PostTypeId": "2", "Body": "<p>A function declaration is the prototype for a function (or it can come from the function definition if no prototype has been seen by the compiler at that point) - it includes the return type, the name of the function and the types of the parameters (optionally in C).</p>\n<p>A function signature is the parts of the function declaration that the compiler uses to perform overload resolution. Since multiple functions might have the same name (ie., they're overloaded), the compiler needs a way to determine which of several possible functions with a particular name a function call should resolve to.  The signature is what the compiler considers in that overload resolution. Specifically, the standard defines 'signature' as:</p>\n<blockquote>\n<p id=\"so_2322736_2323005_0\">the information about a function that participates in overload resolution: the types of its parameters and, if the function is a class member, the cv-qualifiers (if any) on the function itself and the class in which the member function is declared.</p>\n</blockquote>\n<p>Note that the return type is not part of the function signature. As the standard says in a footnote, \"Function signatures do not include return type, because that does not participate in overload resolution\".</p>\n", "LastEditorUserId": "2471750", "LastActivityDate": "2017-02-03T21:42:45.683", "Score": "27", "CreationDate": "2010-02-24T01:09:28.627", "ParentId": "2322736", "CommentCount": "4", "OwnerUserId": "12711", "LastEditDate": "2017-02-03T21:42:45.683"}});