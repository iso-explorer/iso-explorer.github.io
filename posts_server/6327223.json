post_cb({"bq_ids": {"n4140": {"so_6327223_6327306_2": {"length": 10, "quality": 0.5882352941176471, "section_id": 3890}, "so_6327223_6327520_0": {"length": 24, "quality": 0.5106382978723404, "section_id": 3890}, "so_6327223_6327520_1": {"length": 17, "quality": 0.5666666666666667, "section_id": 3890}}, "n3337": {"so_6327223_6327306_2": {"length": 15, "quality": 0.8823529411764706, "section_id": 3750}, "so_6327223_6327520_0": {"length": 44, "quality": 0.9361702127659575, "section_id": 3750}, "so_6327223_6327520_1": {"length": 22, "quality": 0.7333333333333333, "section_id": 3750}}, "n4659": {"so_6327223_6327306_2": {"length": 10, "quality": 0.5882352941176471, "section_id": 4776}, "so_6327223_6327520_0": {"length": 24, "quality": 0.5106382978723404, "section_id": 4776}, "so_6327223_6327520_1": {"length": 17, "quality": 0.5666666666666667, "section_id": 4776}}}, "6327306": {"Id": "6327306", "PostTypeId": "2", "Body": "<p>From the n3242 draft:</p>\n<blockquote>\n<p id=\"so_6327223_6327306_0\">6.4.2 The switch statement [stmt.switch]</p>\n<p id=\"so_6327223_6327306_1\">[...]</p>\n<p id=\"so_6327223_6327306_2\">2 The condition shall be of integral type, enumeration type, or of a class type for which a single non-explicit\n   conversion function to integral or enumeration type exists (12.3).</p>\n<p id=\"so_6327223_6327306_3\">7.2 Enumeration declarations [dcl.enum]</p>\n<p id=\"so_6327223_6327306_4\">[...]</p>\n</blockquote>\n<pre><code>enum-key:\n    enum\n    enum class\n    enum struct\n</code></pre>\n<p>This means yes.</p>\n", "LastEditorUserId": "726300", "LastActivityDate": "2011-06-13T07:07:11.060", "Score": "17", "CreationDate": "2011-06-13T06:37:45.267", "ParentId": "6327223", "CommentCount": "0", "OwnerUserId": "726300", "LastEditDate": "2011-06-13T07:07:11.060"}, "6327520": {"Id": "6327520", "PostTypeId": "2", "Body": "<p>Yes, scoped (enum {class, struct}) enumerations and enumerators will behave exactly the same as unscoped (enum, old style) ones in the context of a switch statement.</p>\n<p>n3242 - 6.4.2.2 [stmt.switch]:</p>\n<blockquote>\n<p id=\"so_6327223_6327520_0\">The condition shall be of integral type, enumeration type, or of a class type for which a single non-explicit\n  conversion function to integral or enumeration type exists (12.3). If the condition is of class type, the\n  condition is converted by calling that conversion function, and the result of the conversion is used in place of\n  the original condition for the remainder of this section. Integral promotions are performed. Any statement\n  within the switch statement can be labeled with one or more case labels as follows:</p>\n<pre><code>case constant-expression :\n</code></pre>\n<p id=\"so_6327223_6327520_1\">where the constant-expression shall be an integral constant expression (5.19). The integral constant expression is implicitly converted to the promoted type of the switch condition. No two of the case constants in\n  the same switch shall have the same value after conversion to the promoted type of the switch condition.</p>\n</blockquote>\n<p>In the case of the condition, an enumeration type is listed. This includes both scoped and unscoped enums (see n3242 - 7.2).</p>\n<p>As for the case labels, they must be integral constant expressions. Which is a constant expression of integral or enumeration type (see n3242 - 5.19.3).</p>\n", "LastActivityDate": "2011-06-13T07:08:15.813", "CommentCount": "0", "CreationDate": "2011-06-13T07:08:15.813", "ParentId": "6327223", "Score": "7", "OwnerUserId": "190158"}, "6327223": {"ViewCount": "3474", "Body": "<p>Will new \"enum class\" declarations in C++ 0x allow switching on the new-fangled enums?</p>\n<p>I'm asking what the standard says, not about the compiler support.</p>\n", "AcceptedAnswerId": "6327306", "Title": "Switching on enum class in C++ 0x", "CreationDate": "2011-06-13T06:20:30.597", "Id": "6327223", "CommentCount": "1", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2011-06-13T07:35:43.810", "LastEditorUserId": "59557", "LastActivityDate": "2011-06-13T07:35:43.810", "Score": "13", "OwnerUserId": "59557", "Tags": "<c++><enums><c++11>", "AnswerCount": "2"}});