post_cb({"15479698": {"ParentId": "15479570", "CommentCount": "3", "Body": "<p>Check pointers before dereferencing and always specify error behavior:</p>\n<pre><code>int f(int *x)\n{\n   if ( x )\n   {\n     // do something with x\n   }\n   else\n   {\n     // do something else in case null pointer\n   }\n}\n</code></pre>\n<p>Dereferencing a null pointer yields a null pointer exception, such as in your case.</p>\n", "OwnerUserId": "2135355", "PostTypeId": "2", "Id": "15479698", "Score": "1", "CreationDate": "2013-03-18T14:48:22.197", "LastActivityDate": "2013-03-18T14:48:22.197"}, "15479570": {"CommentCount": "0", "ViewCount": "206", "PostTypeId": "1", "LastEditorUserId": "1708801", "CreationDate": "2013-03-18T14:42:57.473", "LastActivityDate": "2013-11-02T01:28:04.840", "Title": "Can you return an integer by dereferencing a pointer?", "AcceptedAnswerId": "15479600", "LastEditDate": "2013-11-02T01:28:04.840", "Id": "15479570", "Score": "2", "Body": "<pre><code>int f(int *x)\n{\n    *x = 5;\n    return *x;\n}\n\nint main()\n{\n    int * y = 0;\n    int z = f(y);\n}\n</code></pre>\n<p>Why does this code give me a run time error?</p>\n", "Tags": "<c++><pointers><undefined-behavior>", "OwnerUserId": "2182790", "AnswerCount": "5"}, "15479640": {"ParentId": "15479570", "CommentCount": "0", "Body": "<p>Because after <code>int *y = 0;</code>, <code>y</code> is a pointer which points to nothing (points to address <code>0</code>).\nYour code should be like this:</p>\n<pre><code>int * y = new int;\n*y = 0;\nint z = f(y);\n// ...\ndelete y;\n</code></pre>\n<p>or </p>\n<pre><code>int y = 0;\nint z = f(&amp;y);\n</code></pre>\n", "OwnerUserId": "952747", "PostTypeId": "2", "Id": "15479640", "Score": "3", "CreationDate": "2013-03-18T14:45:55.827", "LastActivityDate": "2013-03-18T14:45:55.827"}, "15479608": {"ParentId": "15479570", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2013-03-18T14:44:28.630", "Id": "15479608", "LastEditDate": "2017-05-23T12:11:06.007", "OwnerDisplayName": "user405725", "Score": "7", "Body": "<p>You can, if a pointer points to some valid memory. In your case, you are <a href=\"https://stackoverflow.com/questions/2727834/c-standard-dereferencing-null-pointer-to-get-a-reference\">dereferencing a NULL (<code>0x00</code>) pointer</a>, which is <a href=\"http://en.wikipedia.org/wiki/Undefined_behavior\" rel=\"nofollow noreferrer\">undefined behavior</a> (aka UB). This, for example, works fine:</p>\n<pre><code>int f(int *x)\n{\n    *x = 5;\n    return *x;\n}\n\nint main()\n{\n    int value = 1986;\n    int *y = &amp;value; // Point to something valid.\n    int z = f(y);\n}\n</code></pre>\n", "LastActivityDate": "2013-03-18T14:44:28.630", "LastEditorUserId": "-1"}, "15479600": {"ParentId": "15479570", "PostTypeId": "2", "CommentCount": "4", "Body": "<blockquote>\n<p id=\"so_15479570_15479600_0\">Why does this code give me a run time error?</p>\n</blockquote>\n<p>Because <code>y</code> is a <code>NULL</code> pointer, which is dereferenced in <code>f()</code>. Note, it is undefined behaviour to dereference a <code>NULL</code> pointer.</p>\n<blockquote>\n<p id=\"so_15479570_15479600_1\">Can you return an integer by dereferencing a pointer?</p>\n</blockquote>\n<p>Yes, assuming the pointer is pointing to a valid <code>int</code>. For example:</p>\n<pre><code>int main()\n{\n    int y = 0;\n    int z = f(&amp;y);\n}\n</code></pre>\n", "OwnerUserId": "1033896", "LastEditorUserId": "1033896", "LastEditDate": "2013-03-18T14:50:58.420", "Id": "15479600", "Score": "10", "CreationDate": "2013-03-18T14:44:18.553", "LastActivityDate": "2013-03-18T14:50:58.420"}, "15479643": {"ParentId": "15479570", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>You are setting the pointer <code>y</code> to <code>0</code> which makes it an <code>NULL</code> pointer:</p>\n<pre><code>int * y = 0;\n</code></pre>\n<p>and then you are trying to perform <em>indirection</em> on the <em>pointer</em> in <code>f()</code> here:</p>\n<pre><code>*x = 5;\n^ \n</code></pre>\n<p>and in the subsequent line, which is <a href=\"http://en.wikipedia.org/wiki/Undefined_behavior\" rel=\"nofollow\">undefined behavior</a>. If we look at the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3485.pdf\" rel=\"nofollow\">draft C++ standard</a> section <code>8.3.2</code> <em>References</em> paragraph <em>5</em> says:</p>\n<blockquote>\n<p id=\"so_15479570_15479643_0\">[...] Note: in particular, a null reference cannot exist in a well-defined program, because the only way to create such a reference would be to bind it to the \u201cobject\u201d obtained by indirection through a null pointer, which causes undefined behavior. [...]</p>\n</blockquote>\n", "OwnerUserId": "1708801", "LastEditorUserId": "1708801", "LastEditDate": "2013-11-02T01:27:24.697", "Id": "15479643", "Score": "1", "CreationDate": "2013-03-18T14:46:05.383", "LastActivityDate": "2013-11-02T01:27:24.697"}, "bq_ids": {"n4140": {"so_15479570_15479643_0": {"section_id": 3222, "quality": 0.9565217391304348, "length": 22}}, "n3337": {"so_15479570_15479643_0": {"section_id": 3096, "quality": 0.8695652173913043, "length": 20}}, "n4659": {"so_15479570_15479643_0": {"section_id": 3979, "quality": 0.9565217391304348, "length": 22}}}});