post_cb({"41491755": {"CommentCount": "6", "Body": "<p>Your first line had the right idea.  It just needs a slight change:</p>\n<pre><code>mInfoMap[ePrompt1] = SomeInfo{\"text1\", eIntegers, 2, 9};\n</code></pre>\n", "CreationDate": "2017-01-05T18:02:47.597", "ParentId": "41491414", "Id": "41491755", "LastActivityDate": "2017-01-05T18:02:47.597", "PostTypeId": "2", "Score": "2", "OwnerUserId": "2403810"}, "41491414": {"CreationDate": "2017-01-05T17:42:29.087", "ViewCount": "62", "Id": "41491414", "AcceptedAnswerId": "41491755", "Score": "1", "Title": "Initialize map of enums to structures", "CommentCount": "0", "Body": "<p>In C++, I am attempting to initialize a std::map of enumeration values to structures.</p>\n<p>In the header file:</p>\n<pre><code>enum ePrompts\n{\n    ePrompt1,\n    ePrompt2,\n    ...\n};\n\nenum eDataTypes\n{\n    eIntegers,\n    eDoubles,\n    ...\n};\n\nstruct SomeInfo\n{\n    std::string text;\n    eDataTypes type;\n    float minVal;\n    float maxVal;\n};\n\nstd::map&lt;ePrompts, SomeInfo&gt; mInfoMap;\n</code></pre>\n<p>In the cpp file:</p>\n<pre><code>void SomeClass::InitializeThis()\n{    \n    // I would like to have an approach that allows one line per entry into the map\n    mInfoMap[ePrompt1] = (SomeInfo){\"text1\", eIntegers, 2, 9}; //Error: Expected an expression\n\n    // Also tried\n    SomeInfo mInfo = {\"text1\", eIntegers, 2, 9};\n    mInfoMap[ePrompt1] = mInfo; // works\n    mInfo = {\"text2\", eIntegers, 1, 5}; //Error: Expected an expression\n}\n</code></pre>\n<p>I am probably missing something very simple here, but I have searched through Stack Overflow quite a bit and not come up with any results of someone doing this. Any help would be appreciated!</p>\n", "Tags": "<c++><struct><enums><stdmap>", "LastActivityDate": "2017-01-05T18:38:19.530", "PostTypeId": "1", "AnswerCount": "2", "OwnerUserId": "7380514"}, "41492306": {"CommentCount": "0", "Body": "<p>According to the C++ Standard (5.2.3 Explicit type conversion (functional notation))</p>\n<blockquote>\n<p id=\"so_41491414_41492306_0\">3 Similarly, a <strong>simple-type-speci\ufb01er or typename-speci\ufb01er followed by\n  a braced-init-list creates a temporary object of the speci\ufb01ed type</strong>\n  direct-list-initialized (8.5.4) with the speci\ufb01ed braced-init-list,\n  and its value is that temporary object as a prvalue</p>\n</blockquote>\n<p>So just write</p>\n<pre><code>mInfoMap[ePrompt1] = SomeInfo {\"text1\", eIntegers, 2, 9}; \n</code></pre>\n", "CreationDate": "2017-01-05T18:38:19.530", "ParentId": "41491414", "Id": "41492306", "LastActivityDate": "2017-01-05T18:38:19.530", "PostTypeId": "2", "Score": "0", "OwnerUserId": "2877241"}, "bq_ids": {"n4140": {"so_41491414_41492306_0": {"length": 14, "quality": 0.7368421052631579, "section_id": 6001}}, "n3337": {"so_41491414_41492306_0": {"length": 14, "quality": 0.7368421052631579, "section_id": 5769}}}});