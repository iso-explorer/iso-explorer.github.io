post_cb({"14294465": {"Id": "14294465", "PostTypeId": "2", "Body": "<pre><code>#define HASH_SIGN #\nBOOST_PP_CAT(HASH_SIGN, include)\n</code></pre>\n", "LastEditorUserId": "1972534", "LastActivityDate": "2013-01-13T05:52:56.650", "Score": "0", "CreationDate": "2013-01-12T14:50:53.210", "ParentId": "1135822", "CommentCount": "2", "OwnerUserId": "1972534", "LastEditDate": "2013-01-13T05:52:56.650"}, "1135834": {"Id": "1135834", "PostTypeId": "2", "Body": "<p>As far as I remember you cannot use another preprocessor directive in define.</p>\n", "LastActivityDate": "2009-07-16T06:53:14.713", "CommentCount": "2", "CreationDate": "2009-07-16T06:53:14.713", "ParentId": "1135822", "Score": "26", "OwnerUserId": "72896"}, "8289287": {"Id": "8289287", "PostTypeId": "2", "Body": "<p>It <em>is</em> possible to insert a hash token into the preprocessed token stream. You can do it as follows:</p>\n<pre><code>#define MACRO(hash, name) hash include name\nMACRO(#,\"hello\")\n</code></pre>\n<p>\u2014expands to:</p>\n<pre><code># include \"hello\"\n</code></pre>\n<p><em>However</em>, the standard explicitly rules out any further analysis of such line for the existence of preprocessing directives [cpp.rescan]:</p>\n<blockquote>\n<p id=\"so_1135822_8289287_0\">The resulting completely macro-replaced preprocessing token sequence is not processed as a preprocessing directive even if it resembles one.</p>\n</blockquote>\n", "LastActivityDate": "2011-11-27T21:39:31.587", "CommentCount": "0", "CreationDate": "2011-11-27T21:39:31.587", "ParentId": "1135822", "Score": "28", "OwnerUserId": "277176"}, "bq_ids": {"n4140": {"so_1135822_8289287_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 532}}, "n3337": {"so_1135822_8289287_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 523}}, "n4659": {"so_1135822_8289287_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 553}}}, "1135822": {"ViewCount": "27880", "Body": "<p>Without going into the gory details I want to use a <code>#define</code> macro that will expand to a <code>#include</code> but the '#' sign is confusing the preprocessor (as it thinks I want to quote an argument.)</p>\n<p>For example, I want to do something like this:</p>\n<pre><code>#define MACRO(name) #include \"name##foo\"\n</code></pre>\n<p>And use it thus:</p>\n<pre><code>MACRO(Test)\n</code></pre>\n<p>Which will expand to:</p>\n<pre><code>#include \"Testfoo\"\n</code></pre>\n<p>The humble # sign is causing the preprocessor to barf.  MinGW gives me the following error:</p>\n<p><code>'#' is not followed by a macro parameter</code></p>\n<p>I guess I need to escape the # sign but I don't if this is even possible.</p>\n<p>Yes, macros are indeed evil...</p>\n", "AcceptedAnswerId": "1135834", "Title": "Escaping a # symbol in a #define macro?", "CreationDate": "2009-07-16T06:49:25.937", "Id": "1135822", "CommentCount": "1", "FavoriteCount": "5", "PostTypeId": "1", "LastEditDate": "2017-01-01T19:40:29.580", "LastEditorUserId": "277176", "LastActivityDate": "2017-01-01T19:40:29.580", "Score": "33", "OwnerUserId": "9236", "Tags": "<c++><c><macros><c-preprocessor><preprocessor-directive>", "AnswerCount": "8"}, "1135831": {"Id": "1135831", "PostTypeId": "2", "Body": "<p>This <em>might</em> work (it works for regular <code>#define</code> macros with no parameters, but I haven't tested it with macros with parameters).</p>\n<pre><code>#define MACRO(name) &lt;name##foo&gt;\n#include MACRO(Test)\n</code></pre>\n", "LastEditorUserId": "138304", "LastActivityDate": "2009-07-16T07:05:16.700", "Score": "2", "CreationDate": "2009-07-16T06:52:42.047", "ParentId": "1135822", "CommentCount": "2", "OwnerUserId": "138304", "LastEditDate": "2009-07-16T07:05:16.700"}, "1138001": {"Id": "1138001", "PostTypeId": "2", "Body": "<p>You can't do that.  Preprocessor directives are recognized before macro expansion; if the macro expands into something that looks like a preprocessor directive, that directive will not be recognized.  The best you can do is create a macro for the file name:</p>\n<pre><code>#define MACRO(name) \"name##foo\"\n...\n#include MACRO(Test)\n</code></pre>\n", "LastActivityDate": "2009-07-16T14:27:53.250", "CommentCount": "3", "CreationDate": "2009-07-16T14:27:53.250", "ParentId": "1135822", "Score": "6", "OwnerUserId": "134554"}, "39616615": {"Id": "39616615", "PostTypeId": "2", "Body": "<pre><code>#define PARAM_NAME Param\n#define GETNAME_(a) #a\n#define GETNAME(a) GETNAME_(a)\n\nint Param;\nprintf(\"%s = %i\\n\", GETNAME(PARAM_NAME), PARAM_NAME);\n</code></pre>\n", "LastActivityDate": "2016-09-21T12:30:53.280", "CommentCount": "1", "CreationDate": "2016-09-21T12:30:53.280", "ParentId": "1135822", "Score": "0", "OwnerUserId": "6858363"}, "1135919": {"Id": "1135919", "PostTypeId": "2", "Body": "<p>This is because the # has special meaning when used in a macro.</p>\n<pre><code>#  means quote the following token (which should be a macro parameter name)\n## means concatenate the preceding and following tokens.\n</code></pre>\n<p>In your situation the # is not followed by a proper token.\nSo in your situation we need to go through a level of indirection:</p>\n<pre><code>#define     QUOTE(name)     #name\n#define     TEST(name)      QUOTE(name ## foo)\n\n#include TEST(scot)\n</code></pre>\n", "LastEditorUserId": "912144", "LastActivityDate": "2011-11-03T15:42:33.627", "Score": "10", "CreationDate": "2009-07-16T07:18:59.997", "ParentId": "1135822", "CommentCount": "1", "OwnerUserId": "14065", "LastEditDate": "2011-11-03T15:42:33.627"}, "1136913": {"Id": "1136913", "PostTypeId": "2", "Body": "<p>The problem isn't actually getting a # symbol in the output of your preprocessor. </p>\n<p>Apparently you want the preprocessor to reparse your file, to deal with newly created #include directives as part of macro expansion. It doesn't work that way. If a line starts with #, it's an instruction for the preprocessor and interpreted. If a line doesn't start with #, it's only subject to preprocessor transformation including macro substitution. This is a once-per-line test.</p>\n<pre><code>MACRO(Test)\n</code></pre>\n<p>does not start with #. Therefore it is not interpreted as a preprocessor directive; instead it's subject to macro replacement rules.</p>\n", "LastActivityDate": "2009-07-16T11:16:12.733", "CommentCount": "1", "CreationDate": "2009-07-16T11:16:12.733", "ParentId": "1135822", "Score": "26", "OwnerUserId": "15416"}});