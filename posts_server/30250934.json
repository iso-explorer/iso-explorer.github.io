post_cb({"15168486": {"ParentId": "30250934", "CommentCount": "2", "Body": "<p>Beyond calling exit(error_code) - which calls atexit handlers, but not RAII destructors, etc.\n- more and more I am using exceptions.</p>\n<p>More and more my main program looks like</p>\n<pre><code>int main(int argc, char** argv) \n{\n    try {\n        exit( secondary_main(argc, argv );\n    }\n    catch(...) {\n        // optionally, print something like \"unexpected or unknown exception caught by main\"\n        exit(1);\n    }\n}\n</code></pre>\n<p>where secondary_main\nin where all the stuff that was originally is put --\ni.e. the original main is renamed secondary_main, and the stub main above is added.\nThis is just a nicety, so that there isn't too much code between the tray and catch in main.</p>\n<p>If you want, catch other exception types.<br>\nI quite like catching string error types, like std::string or char*, and printing those \nin the catch handler in main.</br></p>\n<p>Using exceptions like this at least allows RAII destructors to be called, so that they can do cleanup.  Which can be pleasant and useful.</p>\n<p>Overall, C error handling - exit and signals - and C++ error handling - try/catch/throw exceptions - play together inconsistently at best.</p>\n<p>Then, where you detect an error</p>\n<pre><code>throw \"error message\"\n</code></pre>\n<p>or some more specific exception type.</p>\n", "OwnerUserId": "1051115", "PostTypeId": "2", "Id": "15168486", "Score": "7", "CreationDate": "2013-03-01T23:18:05.197", "LastActivityDate": "2013-03-01T23:18:05.197"}, "1123870": {"ParentId": "30250934", "CommentCount": "4", "Body": "<p>People are saying \"call exit(return code),\" but this is bad form. In small programs it is fine, but there are a number of issues with this:</p>\n<ol>\n<li>You will end up having multiple exit points from the program</li>\n<li>It makes code more convoluted (like using goto)</li>\n<li>It cannot release memory allocated at runtime</li>\n</ol>\n<p>Really, the only time you should exit the problem is with this line in main.cpp:</p>\n<pre><code>return 0;\n</code></pre>\n<p>If you are using exit() to handle errors, you should learn about exceptions (and nesting exceptions), as a much more elegant and safe method. </p>\n", "OwnerUserId": "91713", "PostTypeId": "2", "Id": "1123870", "Score": "21", "CreationDate": "2009-07-14T07:04:01.547", "LastActivityDate": "2009-07-14T07:04:01.547"}, "1116498": {"ParentId": "30250934", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>Either return a value from your <code>main</code> or use the <code>exit</code> function.  Both take an int.  It doesn't really matter what value you return unless you have an external process watching for the return value.</p>\n", "OwnerUserId": "131140", "LastEditorUserId": "63550", "LastEditDate": "2010-02-17T12:48:40.493", "Id": "1116498", "Score": "12", "CreationDate": "2009-07-12T17:41:55.827", "LastActivityDate": "2010-02-17T12:48:40.493"}, "39291288": {"ParentId": "30250934", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>If your if statement is in Loop You can use </p>\n<pre><code> break; \n</code></pre>\n<p>If you want to  escape some code &amp; continue to loop  Use : </p>\n<p>continue;</p>\n<p>If your if statement not in Loop You can use :</p>\n<pre><code> return 0;\n\nOr \n\n\n\n\n  exit();\n</code></pre>\n", "OwnerUserId": "6024420", "LastEditorUserId": "6024420", "LastEditDate": "2017-01-17T11:31:39.643", "Id": "39291288", "Score": "-1", "CreationDate": "2016-09-02T11:29:22.610", "LastActivityDate": "2017-01-17T11:31:39.643"}, "38337905": {"ParentId": "30250934", "CommentCount": "1", "Body": "<p>If the condition I'm testing for is really bad news, I do this:</p>\n<pre><code>*(int*) NULL= 0;\n</code></pre>\n<p>This gives me a nice coredump from where I can examine the situation.</p>\n", "OwnerUserId": "2641648", "PostTypeId": "2", "Id": "38337905", "Score": "-2", "CreationDate": "2016-07-12T20:01:20.587", "LastActivityDate": "2016-07-12T20:01:20.587"}, "1116494": {"ParentId": "30250934", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>Call the <a href=\"http://en.cppreference.com/w/cpp/utility/program/exit\" rel=\"noreferrer\"><code>std::exit</code></a> function. \u00a0\u00a0</p>\n", "OwnerUserId": "48684", "LastEditorDisplayName": "user283145", "LastEditDate": "2013-06-07T14:59:13.447", "Id": "1116494", "Score": "38", "CreationDate": "2009-07-12T17:40:33.800", "LastActivityDate": "2013-06-07T14:59:13.447"}, "1116507": {"ParentId": "30250934", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>Generally you would use the <code>exit()</code> method with an appropriate <a href=\"http://www.gnu.org/s/libc/manual/html_node/Exit-Status.html\" rel=\"nofollow noreferrer\">exit status</a>. </p>\n<p>Zero would mean a successful run. A non-zero status indicates some sort of problem has occurred. This exit code is used by parent processes (e.g. shell scripts) to determine if a process has run successfully.</p>\n", "OwnerUserId": "12960", "LastEditorUserId": "4519059", "LastEditDate": "2015-05-28T09:27:50.397", "Id": "1116507", "Score": "9", "CreationDate": "2009-07-12T17:43:22.327", "LastActivityDate": "2015-05-28T09:27:50.397"}, "bq_ids": {"n4140": {"so_30250934_30251056_4": {"section_id": 3383, "quality": 0.8823529411764706, "length": 15}, "so_30250934_30251056_0": {"section_id": 3382, "quality": 0.8571428571428571, "length": 12}, "so_30250934_30251056_8": {"section_id": 7148, "quality": 0.9259259259259259, "length": 25}, "so_30250934_30251056_6": {"section_id": 3382, "quality": 0.8695652173913043, "length": 20}, "so_30250934_30251056_2": {"section_id": 3382, "quality": 0.8695652173913043, "length": 20}}, "n3337": {"so_30250934_30251056_4": {"section_id": 3252, "quality": 0.8823529411764706, "length": 15}, "so_30250934_30251056_0": {"section_id": 3251, "quality": 0.8571428571428571, "length": 12}, "so_30250934_30251056_8": {"section_id": 6892, "quality": 0.9259259259259259, "length": 25}, "so_30250934_30251056_6": {"section_id": 3251, "quality": 0.8695652173913043, "length": 20}, "so_30250934_30251056_2": {"section_id": 3251, "quality": 0.8695652173913043, "length": 20}}, "n4659": {"so_30250934_30251056_8": {"section_id": 8649, "quality": 0.9259259259259259, "length": 25}, "so_30250934_30251056_0": {"section_id": 4142, "quality": 0.8571428571428571, "length": 12}, "so_30250934_30251056_6": {"section_id": 4142, "quality": 0.7391304347826086, "length": 17}, "so_30250934_30251056_2": {"section_id": 4142, "quality": 0.7391304347826086, "length": 17}, "so_30250934_30251056_4": {"section_id": 4143, "quality": 0.8823529411764706, "length": 15}}}, "42810280": {"ParentId": "30250934", "CommentCount": "0", "Body": "<p>To break a condition use the return(0);</p>\n<p>So, in your case it would be: </p>\n<pre><code>    if(x==1)\n    {\n        return 0;\n    }\n</code></pre>\n", "OwnerUserId": "5878393", "PostTypeId": "2", "Id": "42810280", "Score": "0", "CreationDate": "2017-03-15T12:49:23.290", "LastActivityDate": "2017-03-15T12:49:23.290"}, "35924988": {"ParentId": "30250934", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Dude... <code>exit()</code> function is defined under stdlib.h</p>\n<p>So you need to add a preprocessor. </p>\n<p>Put <code>include stdlib.h</code> in the header section   </p>\n<p>Then use <code>exit();</code> wherever you like but remember to put an interger number in the parenthesis of exit. </p>\n<p>for example: </p>\n<pre><code>exit(0);\n</code></pre>\n", "OwnerUserId": "6046578", "LastEditorUserId": "5971390", "LastEditDate": "2016-03-10T20:26:46.813", "Id": "35924988", "Score": "-2", "CreationDate": "2016-03-10T18:58:48.307", "LastActivityDate": "2016-03-10T20:26:46.813"}, "1118826": {"ParentId": "30250934", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>As Martin York mentioned, exit doesn't perform necessary clean-up like return does.</p>\n<p>It's always better to use return in the place of exit.\nIn case if you are not in main, wherever you would like to exit the program, return to main first.</p>\n<p>Consider the below example.\nWith the following program, a file will be created with the content mentioned.\nBut if return is commented &amp; uncommented exit(0), the compiler doesn't assure you that the file will have the required text.</p>\n<pre><code>int main()\n{\n    ofstream os(\"out.txt\");\n    os &lt;&lt; \"Hello, Can you see me!\\n\";\n    return(0);\n    //exit(0);\n}\n</code></pre>\n<p>Not just this, Having multiple exit points in a program will make debugging harder.\nUse exit only when it can be justified.</p>\n", "OwnerUserId": "135553", "LastEditorUserId": "15168", "LastEditDate": "2015-05-16T15:20:44.387", "Id": "1118826", "Score": "53", "CreationDate": "2009-07-13T10:58:02.453", "LastActivityDate": "2015-05-16T15:20:44.387"}, "1123843": {"ParentId": "30250934", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>If you have an error somewhere deep in the code, then either throw an exception or set the error code. It's always better to throw an exception instead of setting error codes.</p>\n", "OwnerUserId": "124797", "LastEditorUserId": "1400768", "LastEditDate": "2015-05-18T08:30:00.620", "Id": "1123843", "Score": "10", "CreationDate": "2009-07-14T06:56:10.033", "LastActivityDate": "2015-05-18T08:30:00.620"}, "30251056": {"ParentId": "30250934", "PostTypeId": "2", "CommentCount": "14", "Body": "<p>There are several ways, but first you need to understand why object cleanup is important, and hence the reason <a href=\"http://en.cppreference.com/w/cpp/utility/program/exit\" rel=\"noreferrer\"><code>std::exit</code></a> is marginalized among C++ programmers.</p>\n<h2>RAII and Stack Unwinding</h2>\n<p>C++ makes use of a idiom called <a href=\"http://en.cppreference.com/w/cpp/language/raii\" rel=\"noreferrer\">RAII</a>, which in simple terms means objects should perform initialization in the constructor and cleanup in the destructor. For instance the <a href=\"http://en.cppreference.com/w/cpp/io/basic_ofstream\" rel=\"noreferrer\"><code>std::ofstream</code></a> class [may] open the file during the constructor, then the user performs output operations on it, and finally at the end of its life cycle, usually determined by its scope, the destructor is called that essentially closes the file and flushes any written content into the disk.</p>\n<p>What happens if you don't get to the destructor to flush and close the file? <em>Who knows!</em> But possibly it won't write all the data it was supposed to write into the file.</p>\n<p>For instance consider this code</p>\n<pre><code>#include &lt;fstream&gt;\n#include &lt;exception&gt;\n#include &lt;memory&gt;\n\nvoid inner_mad()\n{\n    throw std::exception();\n}\n\nvoid mad()\n{\n    std::unique_ptr&lt;int&gt; ptr(new int);\n    inner_mad();\n}\n\nint main()\n{\n    std::ofstream os(\"file.txt\");\n    os &lt;&lt; \"Content!!!\";\n\n    int possibility = /* either 1, 2, 3 or 4 */;\n\n    if(possibility == 1)\n        return 0;\n    else if(possibility == 2)\n        throw std::exception();\n    else if(possibility == 3)\n        mad();\n    else if(possibility == 4)\n        exit(0);\n}\n</code></pre>\n<p>What happens in each possibility is:</p>\n<ul>\n<li><strong>Possibility 1:</strong> Return essentially leaves the current function scope, so it knows about the end of the life cycle of <code>os</code> thus calling its destructor and doing proper cleanup by closing and flushing the file to disk.</li>\n<li><strong>Possibility 2:</strong> Throwing a exception also takes care of the life cycle of the objects in the current scope, thus doing proper cleanup...</li>\n<li><strong>Possibility 3:</strong> Here stack unwinding enters in action! Even though the exception is thrown at <code>inner_mad</code>, the unwinder will go though the stack of <code>mad</code> and <code>main</code> to perform proper cleanup, all the objects are going to be destructed properly, including <code>ptr</code> and <code>os</code>.</li>\n<li><strong>Possibility 4:</strong> Well, here? <a href=\"http://en.cppreference.com/w/cpp/utility/program/exit\" rel=\"noreferrer\"><code>exit</code></a> is a C function and it's not aware nor compatible with the C++ idioms. It <strong>does not</strong> perform cleanup on your objects, including <code>os</code> in the very same scope. So your file won't be closed properly and for this reason the content might never get written into it!</li>\n<li><strong>Other Possibilities:</strong> It'll just leave main scope, by performing a implicit <code>return 0</code> and thus having the same effect as possibility 1, i.e. proper cleanup.</li>\n</ul>\n<p>But don't be so certain about what I just told you (mainly possibilities 2 and 3); continue reading and we'll find out how to perform a proper exception based cleanup.</p>\n<h2>Possible Ways To <em>End</em></h2>\n<h3>Return from main!</h3>\n<p>You should do this whenever possible; always prefer to return from your program by returning a proper exit status from main.</p>\n<p>The caller of your program, and possibly the operating system, might want to know whether what your program was supposed to do was done successfully or not. For this same reason you should return either zero or <a href=\"http://en.cppreference.com/w/cpp/utility/program/EXIT_status\" rel=\"noreferrer\"><code>EXIT_SUCCESS</code></a> to signal that the program successfully terminated and <a href=\"http://en.cppreference.com/w/cpp/utility/program/EXIT_status\" rel=\"noreferrer\"><code>EXIT_FAILURE</code></a> to signal the program terminated unsuccessfully, any other form of return value is implementation-defined (<em>\u00a718.5/8</em>).</p>\n<p>However you may be very deep in the call stack, and returning all of it may be painful...</p>\n<h3>[Do not] throw a exception</h3>\n<p>Throwing a exception will perform proper object cleanup using stack unwinding, by calling the destructor of every object in any previous scope.</p>\n<p>But here's <strong>the catch</strong>! It's implementation-defined whether stack unwinding is performed when a thrown exception is not handled <em>(by the catch(...) clause)</em> or even if you have a <a href=\"http://en.cppreference.com/w/cpp/language/noexcept_spec\" rel=\"noreferrer\"><code>noexcept</code></a> function in the middle of the call stack. This is stated in <em>\u00a715.5.1 [except.terminate]</em>:</p>\n<blockquote>\n<ol>\n<li><p id=\"so_30250934_30251056_0\">In some situations exception handling must be abandoned for less subtle error handling techniques. [Note: These situations are:</p>\n<blockquote>\n<p id=\"so_30250934_30251056_5\">[...]</p>\n<p id=\"so_30250934_30251056_6\">\u2014  <strong>when the exception handling mechanism cannot find a handler for a thrown exception (15.3), or when the search for a handler (15.3) encounters the outermost block of a function with a <code>noexcept</code>-specification</strong> that does not allow the exception (15.4), or [...]</p>\n<p id=\"so_30250934_30251056_7\">[...]</p>\n</blockquote></li>\n<li><p id=\"so_30250934_30251056_4\"><strong>In such cases, std::terminate() is called (18.8.3). In the situation where no matching handler is found, it is implementation-defined whether or not the stack is unwound before std::terminate() is called</strong> [...]</p></li>\n</ol>\n</blockquote>\n<p>So we have to catch it!</p>\n<h3>Do throw a exception and catch it at main!</h3>\n<p>Since uncaught exceptions may not perform stack unwinding <em>(and consequently won't perform proper cleanup)</em>, we should catch the exception in main and then return a exit status (<a href=\"http://en.cppreference.com/w/cpp/utility/program/EXIT_status\" rel=\"noreferrer\"><code>EXIT_SUCCESS</code></a> or <a href=\"http://en.cppreference.com/w/cpp/utility/program/EXIT_status\" rel=\"noreferrer\"><code>EXIT_FAILURE</code></a>).</p>\n<p>So a possibly good setup would be:</p>\n<pre><code>int main()\n{\n    /* ... */\n    try\n    {\n        // Insert code that will return by throwing a exception.\n    }\n    catch(const std::exception&amp;)  // Consider using a custom exception type for intentional\n    {                             // throws. A good idea might be a `return_exception`.\n        return EXIT_FAILURE;\n    }\n    /* ... */\n}\n</code></pre>\n<h3>[Do not] std::exit</h3>\n<p>This does not perform any sort of stack unwinding, and no alive object on the stack will call its respective destructor to perform cleanup.</p>\n<p>This is enforced in <em>\u00a73.6.1/4 [basic.start.init]</em>:</p>\n<blockquote>\n<p id=\"so_30250934_30251056_8\"><strong>Terminating the program without leaving the current block (e.g., by calling the function std::exit(int) (18.5)) does not destroy any objects with automatic storage duration (12.4)</strong>. If std::exit is called to end a program during the destruction of an object with static or thread storage duration, the program has undefined behavior.</p>\n</blockquote>\n<p>Think about it now, why would you do such a thing? How many objects have you painfully damaged?</p>\n<h2>Other [as bad] alternatives</h2>\n<p>There are other ways to terminate a program <em>(other than crashing)</em>, but they aren't recommended. Just for the sake of clarification they are going to be presented here. Notice how <em>normal program termination</em> <strong>does not</strong> mean stack unwinding but an <em>okay</em> state for the operating system.</p>\n<ul>\n<li><a href=\"http://en.cppreference.com/w/cpp/utility/program/_Exit\" rel=\"noreferrer\"><code>std::_Exit</code></a> causes a normal program termination, and that's it.</li>\n<li><a href=\"http://en.cppreference.com/w/cpp/utility/program/quick_exit\" rel=\"noreferrer\"><code>std::quick_exit</code></a> causes a normal program termination and calls <a href=\"http://en.cppreference.com/w/cpp/utility/program/at_quick_exit\" rel=\"noreferrer\"><code>std::at_quick_exit</code></a> handlers, no other cleanup is performed.</li>\n<li><a href=\"http://en.cppreference.com/w/cpp/utility/program/exit\" rel=\"noreferrer\"><code>std::exit</code></a> causes a normal program termination and then calls <a href=\"http://en.cppreference.com/w/cpp/utility/program/atexit\" rel=\"noreferrer\"><code>std::atexit</code></a> handlers. Other sorts of cleanups are performed such as calling static objects destructors.</li>\n<li><a href=\"http://en.cppreference.com/w/cpp/utility/program/abort\" rel=\"noreferrer\"><code>std::abort</code></a> causes an abnormal program termination, no cleanup is performed. This should be called if the program terminated in a really, really unexpected way. It'll do nothing but signal the OS about the abnormal termination. Some systems perform a core dump in this case.</li>\n<li><a href=\"http://en.cppreference.com/w/cpp/error/terminate\" rel=\"noreferrer\"><code>std::terminate</code></a> calls the <a href=\"http://en.cppreference.com/w/cpp/error/terminate_handler\" rel=\"noreferrer\"><code>std::terminate_handler</code></a> which calls <a href=\"http://en.cppreference.com/w/cpp/utility/program/abort\" rel=\"noreferrer\"><code>std::abort</code></a> by default.</li>\n</ul>\n", "OwnerUserId": "2679626", "LastEditorUserId": "15168", "LastEditDate": "2015-05-16T16:37:30.313", "Id": "30251056", "Score": "355", "CreationDate": "2015-05-15T03:29:17.640", "LastActivityDate": "2015-05-16T16:37:30.313"}, "30250934": {"CommentCount": "24", "AcceptedAnswerId": "30251056", "PostTypeId": "1", "LastEditorUserId": "63550", "CreationDate": "2015-05-15T03:12:41.420", "LastActivityDate": "2017-07-31T00:59:19.847", "LastEditDate": "2015-05-15T07:47:46.133", "ViewCount": "182404", "FavoriteCount": "110", "Title": "How to end C++ code", "Id": "30250934", "Score": "205", "Body": "<p>I would like my C++ code to stop running if a certain condition is met, but I'm not sure how to do that. So just at any point if an <code>if</code> statement is true terminate the code like this:</p>\n<pre><code>if (x==1)\n{\n    kill code;\n}\n</code></pre>\n", "Tags": "<c++>", "OwnerUserId": "3633487", "AnswerCount": "14"}, "1116511": {"ParentId": "30250934", "CommentCount": "1", "Body": "<p>The program will terminate when the execution flow reaches the end of the main function.</p>\n<p>To terminate it before then, you can use the exit(int status) function, where status is a value returned to whatever started the program. 0 normally indicates a non-error state</p>\n", "OwnerUserId": "110255", "PostTypeId": "2", "Id": "1116511", "Score": "11", "CreationDate": "2009-07-12T17:44:04.823", "LastActivityDate": "2009-07-12T17:44:04.823"}, "30251133": {"ParentId": "30250934", "CommentCount": "6", "Body": "<p><code>return 0;</code> put that wherever you want within <code>int main()</code> and the program will immediately close. </p>\n", "OwnerUserId": "2113881", "PostTypeId": "2", "Id": "30251133", "Score": "14", "CreationDate": "2015-05-15T03:40:22.517", "LastActivityDate": "2015-05-15T03:40:22.517"}});