post_cb({"35649368": {"ParentId": "35648348", "CommentCount": "0", "Body": "<p>Since the C++ standard says nothing about this, it is probably more accurate to say it <em>does not prevent</em> removal of unused member functions, than to say it permits their removal.   But it is also equally valid to say it <em>does not require</em> their removal.   That, incidentally, is true for all functions.</p>\n<p>If programs in the build chain (compiler, linker, etc) can detect that any symbol (e.g. static or non-static member function) is not being used, it can safely remove them.</p>\n<p>The harder practical problem is probably detecting that a non-static member function is not being called.   Even more so, if it is virtual, since the static type of an object is what determines which override of a virtual function is called.   Detecting such cases is not impossible in principle, but would require a fair amount of analysis.</p>\n<p>In the end it will come down to quality of implementation of the build chain, since the standard requires nothing in particular.   That comes down to whether the vendor chooses to implement such optimisations.   And, since this is not a behaviour that many developers actually seek (the most likely people to seek it will have a premature optimisation fetish) not many would.</p>\n", "OwnerUserId": "4706785", "PostTypeId": "2", "Id": "35649368", "Score": "2", "CreationDate": "2016-02-26T10:33:11.570", "LastActivityDate": "2016-02-26T10:33:11.570"}, "35648908": {"ParentId": "35648348", "CommentCount": "0", "Body": "<p>Class methods get inlined when they're defined in class definition. When they're implemented separately, they're simple functions with a hidden first parameter <code>this</code> which becomes the pointer to the instance which call this function as member of his class. There's no problem in removing an unused class method.</p>\n<p>Compilers could check how the <strong>vtable</strong> of instances is used to detect unused virtual members but that's a lot of tracking for small benefits. A few years ago, GCC didn't do this.</p>\n<p>Keyword <code>volatile</code> or exporting saves variables &amp; functions/class methods from removing optimizations.</p>\n", "OwnerUserId": "2546626", "PostTypeId": "2", "Id": "35648908", "Score": "1", "CreationDate": "2016-02-26T10:12:40.503", "LastActivityDate": "2016-02-26T10:12:40.503"}, "35648786": {"ParentId": "35648348", "CommentCount": "2", "Body": "<p>Yes.  </p>\n<p>If the method is unused, then there is no way to tell it has been removed - so a linker can do so.  Note that taking the address of a method may well count as \"using\" the method - not just actually calling it.</p>\n<p>Linkers are quite likely to remove non-virtual member functions (it's easy and saves space). </p>\n<p>They <em>could</em> remove unused virtual functions, but the compiler would have to add a lot of information about which virtual functions it was calling so that the linker could remove unused ones (and possibly compact the vtable).  In practise, I don't think linkers do this because the gain is probably small and the amount of development effort required rather large.</p>\n", "OwnerUserId": "771073", "PostTypeId": "2", "Id": "35648786", "Score": "5", "CreationDate": "2016-02-26T10:07:46.923", "LastActivityDate": "2016-02-26T10:07:46.923"}, "35654696": {"ParentId": "35648348", "CommentCount": "0", "Body": "<p>The C++ standard works on a more abstract level. It does not require a C++ implementation to actually be composed of individual tools like a compiler and a linker.</p>\n<p>Incidentally, I just searched the <a href=\"https://isocpp.org/files/papers/n4296.pdf\" rel=\"nofollow\">draft PDF</a> on my machine, and there is only <em>one</em> instance of the word \"linker\" in the entire 1368-pages document, and even that one is just in a footnote on page 22 about character sets.</p>\n<p>What the standard actually does talk about is the so-called <strong>\"as-if\" rule</strong>.</p>\n<p>Citing \u00a71.9:</p>\n<blockquote>\n<p id=\"so_35648348_35654696_0\">(...) conforming implementations are required to emulate (only) the\n  observable behavior of the abstract machine as explained below.</p>\n</blockquote>\n<p>In a footnote for that sentence, it further says:</p>\n<blockquote>\n<p id=\"so_35648348_35654696_1\">This provision is sometimes called the \u201cas-if\u201d rule, because an\n  implementation is free to disregard any requirement of this\n  International Standard <strong>as long as the result is as if the requirement\n  had been obeyed</strong>, as far as can be determined from the observable\n  behavior of the program.</p>\n</blockquote>\n<p>If a function is not used anywhere in your program in any way, then it cannot have any impact on observable behaviour. The \"as-if\" rule alone thus gives a compiler or linker full liberty to remove it from the executable result.</p>\n", "OwnerUserId": "3313064", "PostTypeId": "2", "Id": "35654696", "Score": "1", "CreationDate": "2016-02-26T14:46:09.303", "LastActivityDate": "2016-02-26T14:46:09.303"}, "35648348": {"CommentCount": "5", "AcceptedAnswerId": "35654696", "CreationDate": "2016-02-26T09:49:18.260", "LastActivityDate": "2016-02-26T14:46:09.303", "PostTypeId": "1", "ViewCount": "714", "FavoriteCount": "1", "Title": "Is a C++ compiler/linker allowed to remove unused methods?", "Id": "35648348", "Score": "4", "Body": "<p>Is a C++ compiler or linker (by any C++ standard) allowed to remove an unused method?\nCompilers seem to be allowed to remove unused static functions, linkers are allowed to remove unused functions. But i have found no information what it looks like for methods of classes. When the method is virtual this gets really interesting.</p>\n", "Tags": "<c++><optimization><methods>", "OwnerUserId": "2392690", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_35648348_35654696_0": {"section_id": 5797, "quality": 1.0, "length": 10}, "so_35648348_35654696_1": {"section_id": 5797, "quality": 0.9166666666666666, "length": 22}}, "n3337": {"so_35648348_35654696_0": {"section_id": 5570, "quality": 1.0, "length": 10}, "so_35648348_35654696_1": {"section_id": 5570, "quality": 0.9166666666666666, "length": 22}}, "n4659": {"so_35648348_35654696_0": {"section_id": 7256, "quality": 1.0, "length": 10}, "so_35648348_35654696_1": {"section_id": 7256, "quality": 0.9166666666666666, "length": 22}}}});