post_cb({"bq_ids": {"n4140": {"so_27594710_27594839_0": {"length": 20, "quality": 0.9090909090909091, "section_id": 3255}}, "n3337": {"so_27594710_27594839_0": {"length": 20, "quality": 0.9090909090909091, "section_id": 3127}}, "n4659": {"so_27594710_27594839_0": {"length": 20, "quality": 0.9090909090909091, "section_id": 4013}}}, "27594710": {"ViewCount": "41", "Body": "<p>So I've been reading about this but couldn't find anything that'd explain the behavior of this code below to me:\nheader.hpp:</p>\n<pre><code>class TESTING{\nprivate:\n    int num;\n\npublic:\n    TESTING(int);\n};\n\nvoid testing(int, int);\n</code></pre>\n<p>def.cpp:</p>\n<pre><code>#include \"header.hpp\"\n#include &lt;iostream&gt;\n\nusing namespace std;\n\nTESTING::TESTING(int num = 100){\n    this-&gt;num = num;\n    cout &lt;&lt; \"init with: \" &lt;&lt; this-&gt;num &lt;&lt; endl;\n}\n\nvoid testing(int a = 500, int b = 200){\n    cout &lt;&lt; \"a: \" &lt;&lt; a &lt;&lt; \", b: \" &lt;&lt; b &lt;&lt; endl;\n}\n\nint main(){\n    TESTING test1;\n    TESTING test2(5);\n    testing();\n    testing(1);\n    testing(1, 2);\n}\n</code></pre>\n<p>So far so good and working as intended, the output then is:\n<em><br>init with: 100\n<br>init with: 5\n<br>a: 500, b: 200\n<br>a: 1, b: 200\n<br>a: 1, b: 2</br></br></br></br></br></em>\n<p>But then when I cut the \"int main\" function and paste it into the following Main.cpp below</p>\n<p>Main.cpp:</p>\n<pre><code>#include \"header.hpp\"\n\nint main(){\n    //TESTING test1;//error: assumed to be default constructor\n    TESTING test2(5);\n    //testing();//error: too few arguments\n    //testing(1);//error: too few arguments\n    testing(1, 2);\n}\n</code></pre>\n<p>I'd get the errors mentioned in the comments above but still the output:\n<em><br>init with: 5\n<br>a: 1, b: 2</br></br></em>\n<p>Which then means that it does link itself to def.cpp but with some sort of minimum visibility(?).\n<br>Why's this happening? \n<br>The purpose of this Main.cpp file is to have the main function that'll run all the other c++ files in that project, is there a <strong>general</strong> better way to achieve that than the way I tried? If so, does that way apply to the code mentioned here? Or is my code just written badly?</br></br></p>\n<p>P.S: I'm new to c++, please be gentle :d</p>\n</p></p>", "AcceptedAnswerId": "27594839", "Title": "Linkage between files - how exactly does it work?", "CreationDate": "2014-12-21T23:04:54.147", "Id": "27594710", "CommentCount": "5", "PostTypeId": "1", "LastActivityDate": "2014-12-21T23:37:55.413", "Score": "1", "OwnerUserId": "3190073", "Tags": "<c++>", "AnswerCount": "1"}, "27594839": {"Id": "27594839", "PostTypeId": "2", "Body": "<p>Default arguments don't magically transfer across source files. Think about it - how is the compiler processing main.cpp supposed to know that, in a different source file, you gave default arguments to some parameters?</p>\n<p>Formally, default arguments are specific to any given scope:</p>\n<blockquote>\n<p id=\"so_27594710_27594839_0\"><strong>8.3.6/4</strong> For non-template functions, default arguments can be added in later declarations of a function in the same scope. Declarations in\n  different scopes have completely distinct sets of default arguments...</p>\n</blockquote>\n<p>Even in the same source file, you can declare the same function to have different default arguments in different scopes. The compiler would happily substitute whatever default arguments, if any, are specified by the declaration visible in the current scope.</p>\n<hr>\n<p>On an unrelated note, the word \"linkage\" is a term of art - it has a very specific meaning in C++. This notion of linkage is largely irrelevant to your question, at least insofar as it relates to default arguments (I just point it out for the benefit of readers who might be confused by the question's title). The set of default arguments is not part of the function name or signature, and doesn't affect its linkage, its ability to be used across scopes and translation units.</p>\n</hr>", "LastEditorUserId": "1670129", "LastActivityDate": "2014-12-21T23:37:55.413", "Score": "3", "CreationDate": "2014-12-21T23:22:50.247", "ParentId": "27594710", "CommentCount": "4", "OwnerUserId": "1670129", "LastEditDate": "2014-12-21T23:37:55.413"}});