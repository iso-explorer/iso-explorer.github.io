post_cb({"30992462": {"ViewCount": "76", "Body": "<p>If you are inside the constructor of a derived class, and you make no explicit call to the base class constructor, how does the compiler know which base constructor to use?</p>\n", "AcceptedAnswerId": "30992505", "Title": "How does a constructor choose a base class constructor in C++", "CreationDate": "2015-06-23T01:34:08.767", "Id": "30992462", "CommentCount": "1", "PostTypeId": "1", "LastActivityDate": "2015-06-23T01:56:46.617", "Score": "2", "OwnerUserId": "4157844", "Tags": "<c++><constructor>", "AnswerCount": "2"}, "30992505": {"Id": "30992505", "PostTypeId": "2", "Body": "<p>If a base class is not mentioned in the constructor <a href=\"http://en.cppreference.com/w/cpp/language/initializer_list\" rel=\"nofollow\">initializer list</a>, it will be <a href=\"http://en.cppreference.com/w/cpp/language/default_initialization\" rel=\"nofollow\">default initialized</a>. Since the base class will definitely be of class type, that means that the <a href=\"http://en.cppreference.com/w/cpp/language/default_constructor\" rel=\"nofollow\">default constructor</a> will be called. </p>\n<p>Two of those references also have examples of derived classes which implicitly call the base class default constructor. For instance:</p>\n<pre><code>struct Class : public Base\n{\n    unsigned char x;\n    unsigned char y;\n\n    Class ( int x )\n      : Base ( 123 ), // initialize base class\n        x ( x ),      // x (member) is initialized with x (parameter)\n        y { 0 }       // y initialized to 0\n    {}                // empty compound statement\n\n    Class ( double a )\n      : y ( a+1 ),\n        x ( y ) // x will be initialized before y, its value here is indeterminate\n    {} // base class constructor does not appear in the list, it is\n       // default-initialized (not the same as if Base() were used, which is value-init)\n\n   ...\n};\n</code></pre>\n", "LastEditorUserId": "2069064", "LastActivityDate": "2015-06-23T01:56:46.617", "Score": "3", "CreationDate": "2015-06-23T01:38:16.260", "ParentId": "30992462", "CommentCount": "0", "OwnerUserId": "2069064", "LastEditDate": "2015-06-23T01:56:46.617"}, "30992563": {"Id": "30992563", "PostTypeId": "2", "Body": "<p>It uses the default constructor, as mandated by the standard in N4140 <em>Initializing bases and members</em>, \u00a712.6.2 [class.base.init]/8 (emphasis mine):</p>\n<blockquote>\n<p id=\"so_30992462_30992563_0\">In a non-delegating constructor, if a given potentially constructed subobject is not designated by a <em>mem-initializer-id</em>\n  (including the case where there is no <em>mem-initializer-list</em> because the constructor has no <em>ctor-initializer</em>),\n  then</p>\n<ul>\n<li><p id=\"so_30992462_30992563_1\">if the entity is a non-static data member that has a <em>brace-or-equal-initializer</em> and either</p>\n<ul>\n<li>the constructor\u2019s class is a union, and no other variant member of that union is designated by a <em>mem-initializer-id</em> or</li>\n<li>the constructor\u2019s class is not a union, and, if the entity is a member of an anonymous union, no other member of that union is designated by a <em>mem-initializer-id</em>,  </li>\n</ul>\n<p id=\"so_30992462_30992563_2\">the entity is initialized as specified in 8.5;</p></li>\n<li><p id=\"so_30992462_30992563_3\">otherwise, if the entity is an anonymous union or a variant member, no initialization is performed;</p></li>\n<li><strong>otherwise, the entity is default-initialized</strong>.</li>\n</ul>\n</blockquote>\n<p>Note that base classes are potentially constructed subobjects per <em>Special member functions</em>, \u00a712 [special]/5:</p>\n<blockquote>\n<p id=\"so_30992462_30992563_4\">For a class, its non-static data members, its non-virtual direct base classes, and, if the class is not abstract, its virtual base classes are called its potentially constructed subobjects.</p>\n</blockquote>\n", "LastEditorUserId": "962089", "LastActivityDate": "2015-06-23T01:51:12.663", "Score": "1", "CreationDate": "2015-06-23T01:45:10.303", "ParentId": "30992462", "CommentCount": "0", "OwnerUserId": "962089", "LastEditDate": "2015-06-23T01:51:12.663"}, "bq_ids": {"n4140": {"so_30992462_30992563_4": {"length": 21, "quality": 0.9545454545454546, "section_id": 365}, "so_30992462_30992563_0": {"length": 17, "quality": 1.0, "section_id": 435}, "so_30992462_30992563_1": {"length": 6, "quality": 1.0, "section_id": 435}, "so_30992462_30992563_3": {"length": 8, "quality": 1.0, "section_id": 435}}, "n3337": {"so_30992462_30992563_4": {"length": 13, "quality": 0.5909090909090909, "section_id": 359}, "so_30992462_30992563_0": {"length": 14, "quality": 0.8235294117647058, "section_id": 427}, "so_30992462_30992563_1": {"length": 5, "quality": 0.8333333333333334, "section_id": 427}, "so_30992462_30992563_3": {"length": 5, "quality": 0.625, "section_id": 427}}, "n4659": {"so_30992462_30992563_4": {"length": 21, "quality": 0.9545454545454546, "section_id": 377}, "so_30992462_30992563_0": {"length": 17, "quality": 1.0, "section_id": 454}, "so_30992462_30992563_1": {"length": 5, "quality": 0.8333333333333334, "section_id": 382}, "so_30992462_30992563_3": {"length": 8, "quality": 1.0, "section_id": 454}}}});