post_cb({"bq_ids": {"n4140": {"so_23518993_23543949_0": {"length": 7, "quality": 1.0, "section_id": 7002}, "so_23518993_23543949_1": {"length": 24, "quality": 0.8571428571428571, "section_id": 5988}}, "n3337": {"so_23518993_23543949_0": {"length": 7, "quality": 1.0, "section_id": 6748}, "so_23518993_23543949_1": {"length": 16, "quality": 0.5714285714285714, "section_id": 5756}}, "n4659": {"so_23518993_23543949_0": {"length": 7, "quality": 1.0, "section_id": 8499}, "so_23518993_23543949_1": {"length": 23, "quality": 0.8214285714285714, "section_id": 7488}}}, "23518993": {"ViewCount": "381", "Body": "<p>As far as I know, C++ standard doesn't require the dynamic dispatch to be implemented using virtual method tables (a.k.a. vtables). Nevertheless, I have gotten the impression that vtables are the de facto standard implementation. I wonder whether there are C++ compilers that use a different mechanism or at least allow a different mechanism.</p>\n", "Title": "C++ dynamic dispatch without vtables", "CreationDate": "2014-05-07T13:19:37.043", "LastActivityDate": "2014-05-08T13:59:06.130", "CommentCount": "12", "FavoriteCount": "3", "PostTypeId": "1", "Id": "23518993", "Score": "6", "OwnerUserId": "102834", "Tags": "<c++><compiler-construction><compilation><standards>", "AnswerCount": "1"}, "23543949": {"Id": "23543949", "PostTypeId": "2", "Body": "<p>The C++ standard places few constraints on the implementation of virtual functions and the calling mechanism. Since it does however list a lot of things that cannot be virtual, that in effect adds to the freedom.</p>\n<p>From n3797 10.3/1:</p>\n<blockquote>\n<p id=\"so_23518993_23543949_0\">Virtual functions support dynamic binding and object-oriented programming.</p>\n</blockquote>\n<p>Then lots of stuff about what constitutes <code>overriding</code> and <code>final overrider</code>.</p>\n<p>From 5.2.2/1:</p>\n<blockquote>\n<p id=\"so_23518993_23543949_1\">Otherwise [function is virtual], its final overrider (10.3) in the dynamic type of the object expression is called; such a call is referred to as a virtual function call. [ Note: the dynamic type is the type of the object referred to by the current value of the object expression...]</p>\n</blockquote>\n<p>So the C++ standard defines a restricted kind of dynamic dispatch based on the dynamic type of the object, and nothing much else. As long as each object carries around a mechanism by which any virtual function can be called, everything else is up for grabs.</p>\n<p>Yes, vtables are common but they are not the last word. They are a significant memory and speed cost, particularly for multiple inheritance. I can easily come up with a mechanism that is not a vtable but is just as fast and uses less object memory, but takes more space in code or static memory. Various researchers have devices a wealth of techniques, and some have even been patented. There are techniques that provide better type safety, or better branch prediction or even faster lookup. I don't see much point providing links -- you can easily find them too.</p>\n<p>But no, I am not aware of any production C++ compilers that use any of these mechanisms. Maybe it's time to think about one?</p>\n", "LastActivityDate": "2014-05-08T13:59:06.130", "CommentCount": "2", "CreationDate": "2014-05-08T13:59:06.130", "ParentId": "23518993", "Score": "3", "OwnerUserId": "1105562"}});