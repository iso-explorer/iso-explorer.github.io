post_cb({"bq_ids": {"n4140": {"so_30438446_30438515_0": {"length": 39, "quality": 0.9285714285714286, "section_id": 441}}, "n3337": {"so_30438446_30438515_0": {"length": 39, "quality": 0.9285714285714286, "section_id": 432}}, "n4659": {"so_30438446_30438515_0": {"length": 37, "quality": 0.8809523809523809, "section_id": 461}}}, "30438515": {"Id": "30438515", "PostTypeId": "2", "Body": "<p>What you are doing as-is is undefined behavior, from [class.base.init]/14, emphasis mine:</p>\n<blockquote>\n<p id=\"so_30438446_30438515_0\">Member functions (including virtual member functions, 10.3) can be called for an object under construction.\n  Similarly, an object under construction can be the operand of the <code>typeid</code> operator (5.2.8) or of a <code>dynamic_cast</code> (5.2.7). However, if these operations are performed in a <em>ctor-initializer</em> (or in a function called directly\n  or indirectly from a <em>ctor-initializer</em>) before all the <em>mem-initializer</em>s for base classes have completed, <strong>the result\n  of the operation is undefined</strong>.</p>\n</blockquote>\n<p>What you want to do instead is use the <a href=\"http://en.wikibooks.org/wiki/More_C%2B%2B_Idioms/Base-from-Member\">Base-from-Member idiom</a>:</p>\n<pre><code>class Cache {\nprotected:\n    const SomeDataType cache_;\n};\n\nclass B : private Cache, public A {\npublic:\n    B() : Cache(), A(cache_)\n    { }\n};\n</code></pre>\n", "LastActivityDate": "2015-05-25T12:33:33.250", "Score": "4", "CreationDate": "2015-05-25T12:33:33.250", "ParentId": "30438446", "CommentCount": "5", "OwnerUserId": "2069064"}, "30443339": {"Id": "30443339", "PostTypeId": "2", "Body": "<p>From C++11, you may use forward constructor:</p>\n<pre><code>class B: public A\n{\npublic:\n  B(): B(B::buildCache_()) {}\n\nprivate:\n  B(SomeDataType&amp;&amp; cache) : A(cache), cache_(std::move(cache)) {}\n\nprivate:\n  static SomeDataType buildCache_()\n  {\n    // expensive cache construction\n  }\n\nprotected:\n    const SomeDataType cache_;\n};\n</code></pre>\n", "LastActivityDate": "2015-05-25T17:33:37.177", "Score": "1", "CreationDate": "2015-05-25T17:33:37.177", "ParentId": "30438446", "CommentCount": "0", "OwnerUserId": "2684539"}, "30438446": {"ViewCount": "54", "Body": "<p>I would like to initialize a class <code>B</code> that's derived from class <code>A</code>, and where in <code>B</code> I construct a cache first that is used with the construction of <code>A</code>, e.g.,</p>\n<pre class=\"lang-cpp prettyprint-override\"><code>class B: public A {\n\npublic:\n  B(): A(cache_), cache_(this-&gt;buildCache_())\n\nprotected:\n  const SomeDataType cache_;\n\nprivate:\n  SomeDataType\n  buildCache_() const\n  {\n    // expensive cache construction\n  }\n\n}\n</code></pre>\n<p>This is <em>not</em> going to work though because the parent object <code>A</code> is always initialized first (before <code>cache_</code> is filled).</p>\n<p>(For the sake of completeness: The <code>cache_</code> is used many more times in classes derived from <code>B</code>.)</p>\n<p>As an alternative, I could do</p>\n<pre class=\"lang-cpp prettyprint-override\"><code>class B: public A {\n\npublic:\n  B(): A(this-&gt;buildCache_())\n\nprotected:\n  const SomeDataType cache_;\n\nprivate:\n  SomeDataType\n  buildCache_()\n  {\n    // expensive cache construction\n    // fill this-&gt;cache_ explicitly\n    return cache_;\n  }\n\n}\n</code></pre>\n<p>This has the disadvantage that <code>buildCache_()</code> can't be <code>const</code>. Also, GCC complains that</p>\n<pre><code>warning: \u2018B::cache_\u2019 should be initialized in the member initialization list [-Weffc++]\n</code></pre>\n<p>Is there a more appropriate solution to this?</p>\n", "AcceptedAnswerId": "30438515", "Title": "Using derived class members for the initialization of the parent class", "CreationDate": "2015-05-25T12:30:07.547", "Id": "30438446", "CommentCount": "2", "PostTypeId": "1", "LastActivityDate": "2015-05-25T17:33:37.177", "Score": "2", "OwnerUserId": "353337", "Tags": "<c++><initialization><derived-class><initializer-list>", "AnswerCount": "2"}});