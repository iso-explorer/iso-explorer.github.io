post_cb({"45576309": {"CommentCount": "8", "ViewCount": "102", "PostTypeId": "1", "LastEditorUserId": "3766405", "CreationDate": "2017-08-08T19:10:08.240", "LastActivityDate": "2017-08-08T22:12:38.833", "Title": "C++ 17 full-expression standard definition", "LastEditDate": "2017-08-08T22:12:38.833", "Id": "45576309", "Score": "2", "Body": "<p><a href=\"http://eel.is/c++draft/intro.execution#12\" rel=\"nofollow noreferrer\">This</a> paragraph from the C++ 17 standard draft states, among others, that:</p>\n<blockquote>\n<p id=\"so_45576309_45576309_0\">A <em>full-expression</em> is:</p>\n<p id=\"so_45576309_45576309_1\">-an unevaluated operand,</p>\n<p id=\"so_45576309_45576309_2\">-a constant-expression ([expr.const]),</p>\n<p id=\"so_45576309_45576309_3\">-an <strong>init-declarator</strong> ([dcl.decl]) or a mem-initializer ([class.base.init]), including the constituent expressions of the initializer,</p>\n<p id=\"so_45576309_45576309_4\">-an invocation of a destructor generated at the end of the lifetime of an object other than a temporary object, or</p>\n<p id=\"so_45576309_45576309_5\">-an expression that is not a subexpression of another expression <strong>and that is not otherwise part of a full-expression</strong>.</p>\n<p id=\"so_45576309_45576309_6\">If a language construct is defined to produce an implicit call of a function, a <strong>use of the language construct is considered to be an expression for the purposes of this definition</strong>. [...]</p>\n<pre><code>struct S {\n\n   S(int i): I(i) { }       // full-expression is initialization of I\n\n   int&amp; v() { return I; }\n   ~S() noexcept(false) { }\nprivate:\n   int I;\n};\n\nS s1(1);                   // **full-expression is call of S\u200b::\u200bS(int)**\n</code></pre>\n</blockquote>\n<p>For the rest of this post I will refer to a \"language construct defined to produce an implicit call of a function\" simply as \"construct\".</p>\n<p>I have several questions related to the quoted paragraph:</p>\n<ol>\n<li><p>Why is this passage (\"<strong>and that is not otherwise part of a full-expression</strong>\") mentioned? The only reasons I can think of are: a \"construct\" <em>containing</em> an expression (true expression, not the definition used in this paragraph, which considers \"constructs\" as expressions) that, otherwise, would be regarded as a full-expression or a \"construct\" <em>containing</em> another \"construct\", which, similarly, on its own would be considered as a full-expression. Are these reasons correct? If so, I would appreciate some concrete examples.</p></li>\n<li><p>What are some examples of \"constructs\"? I know that the initialization of an object could be one (because of the implicit call to the constructor), but the third dot of the paragraph (\"<strong>an init-declarator ([dcl.decl])</strong>) explicitly considers it as a full-expression. Also, using the <strong>new</strong> operator means implicitly calling two functions (one for allocating the space and afterwards the constructor), but a <strong>new expression</strong> is an expression on its own. </p></li>\n<li><p>Why for the construct: \"S s1(1)\" is it said that the full-expression is the call to the constructor \"S::S(int)\"? Why isn't the full-expression the construct itself?</p></li>\n</ol>\n", "Tags": "<c++><expression><language-lawyer><full-expression>", "OwnerUserId": "3766405", "AnswerCount": "0"}, "bq_ids": {"n4140": {"so_45576309_45576309_4": {"section_id": 5806, "quality": 0.9, "length": 9}, "so_45576309_45576309_5": {"section_id": 5806, "quality": 0.7142857142857143, "length": 5}, "so_45576309_45576309_6": {"section_id": 5806, "quality": 1.0, "length": 13}}, "n3337": {"so_45576309_45576309_4": {"section_id": 5579, "quality": 0.9, "length": 9}, "so_45576309_45576309_5": {"section_id": 5579, "quality": 0.7142857142857143, "length": 5}, "so_45576309_45576309_6": {"section_id": 5579, "quality": 1.0, "length": 13}}, "n4659": {"so_45576309_45576309_4": {"section_id": 7267, "quality": 1.0, "length": 10}, "so_45576309_45576309_5": {"section_id": 7267, "quality": 1.0, "length": 7}, "so_45576309_45576309_6": {"section_id": 7267, "quality": 1.0, "length": 13}, "so_45576309_45576309_3": {"section_id": 7267, "quality": 0.75, "length": 6}}}});