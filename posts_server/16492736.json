post_cb({"16492817": {"Id": "16492817", "PostTypeId": "2", "Body": "<p>this means the object of Foo on which DoSomething() is invoked. I explain it with example</p>\n<pre><code>void do_something_to_a_foo(Foo *foo_instance){\n    foo_instance-&gt;printFoo();\n}\n</code></pre>\n<p>and our class </p>\n<pre><code>class Foo{\n    string fooName;\n    public:\n        Foo(string fName);\n        void printFoo();\n        void DoSomething();\n};\n\nFoo::Foo(string fName){\n     fooName = fName;\n}\nvoid Foo::printFoo(){\n      cout&lt;&lt;\"the fooName is: \"&lt;&lt;fooName&lt;&lt;endl;\n}\nvoid Foo::DoSomething(){\n     do_something_to_a_foo(this);\n}\n</code></pre>\n<p>now we instantiate objects like</p>\n<pre><code>Foo fooObject(\"first);\nf.DoSomething();//it will prints out first\n</code></pre>\n<p>similarly whatever the string will be passed to Foo constructor will be printed on calling DoSomething().<br>Because for example in DoSomething() of above example \"this\" means fooObject and in do_something_to_a_foo() fooObject is passed by reference.</br></p>\n", "LastActivityDate": "2013-05-11T01:16:07.057", "CommentCount": "0", "CreationDate": "2013-05-11T01:16:07.057", "ParentId": "16492736", "Score": "2", "OwnerUserId": "1849331"}, "16492736": {"ViewCount": "24798", "Body": "<p>I'm fairly new to C++, and I don't understand what the <code>this</code> pointer does in the following scenario:</p>\n<pre><code>void do_something_to_a_foo(Foo *foo_instance);\n\n\nvoid Foo::DoSomething()\n{\n  do_something_to_a_foo(this);\n}\n</code></pre>\n<p>I grabbed that from someone else's post on here.</p>\n<p>What does <code>this</code> point to? I'm confused. The function has no input, so what is <code>this</code> doing?</p>\n", "AcceptedAnswerId": "16492759", "Title": "What is the 'this' pointer?", "CreationDate": "2013-05-11T00:57:56.383", "Id": "16492736", "CommentCount": "7", "FavoriteCount": "7", "PostTypeId": "1", "LastEditDate": "2013-05-11T01:19:11.640", "LastEditorUserId": "238722", "LastActivityDate": "2017-11-21T16:52:31.473", "Score": "7", "OwnerUserId": "2371809", "Tags": "<c++><class><pointers><this>", "AnswerCount": "9"}, "16492888": {"Id": "16492888", "PostTypeId": "2", "Body": "<p>Nonstatic member functions such as <code>Foo::DoSomething</code> have an implicit parameter whose value is used for <code>this</code>. The standard specifies this in C++11 \u00a75.2.2/4:</p>\n<blockquote>\n<p id=\"so_16492736_16492888_0\">When a function is called, each parameter (8.3.5) shall be initialized (8.5, 12.8, 12.1) with its corresponding argument. [Note: Such initializations are indeterminately sequenced with respect to each other (1.9) \u2014 end note ] If the function is a non-static member function, the <code>this</code> parameter of the function (9.3.2) shall be initialized with a pointer to the object of the call, converted as if by an explicit type conversion (5.4).</p>\n</blockquote>\n<p>As a result, you need a <code>Foo</code> object to call <code>DoSomething</code>. That object simply becomes <code>this</code>.</p>\n<p>The only difference (and it's trivial) between the <code>this</code> keyword and a normal, explicitly-declared <code>const</code> pointer parameter is that you cannot take the address of <code>this</code>.</p>\n", "LastActivityDate": "2013-05-11T01:30:37.650", "CommentCount": "0", "CreationDate": "2013-05-11T01:30:37.650", "ParentId": "16492736", "Score": "1", "OwnerUserId": "153285"}, "bq_ids": {"n4140": {"so_16492736_16492888_0": {"length": 30, "quality": 0.8108108108108109, "section_id": 5991}}, "n3337": {"so_16492736_16492888_0": {"length": 30, "quality": 0.8108108108108109, "section_id": 5759}}, "n4659": {"so_16492736_16492888_0": {"length": 23, "quality": 0.6216216216216216, "section_id": 7491}}}, "16492759": {"Id": "16492759", "PostTypeId": "2", "Body": "<p><code>this</code> refers to the current object.</p>\n<p>The keyword <code>this</code> identifies a special type of pointer. Suppose that you create an object named <code>x</code> of <code>class A</code>, and <code>class A</code> has a non-static member function <code>f()</code>. If you call the function <code>x.f()</code>, the keyword <code>this</code> in the body of <code>f()</code> stores the address of <code>x</code>.</p>\n", "LastEditorUserId": "1275165", "LastActivityDate": "2013-05-11T02:33:47.430", "Score": "22", "CreationDate": "2013-05-11T01:00:40.910", "ParentId": "16492736", "CommentCount": "2", "OwnerUserId": "2369847", "LastEditDate": "2013-05-11T02:33:47.430"}, "16492900": {"Id": "16492900", "PostTypeId": "2", "Body": "<p>Just some random facts about <code>this</code> to supplement the other answers:</p>\n<pre><code>class Foo {\npublic:\n    Foo * foo () { return this; }\n    const Foo * cfoo () const { return this; /* return foo(); is an error */ }\n};\n\nFoo x;       // can call either x.foo() or x.cfoo()\nconst Foo y; // can only call x.cfoo()\n</code></pre>\n<p>When the object is <code>const</code>, the type of <code>this</code> becomes a pointer to <code>const</code>.</p>\n<hr>\n<pre><code>class Bar {\n    int x;\n    int y;\npublic:\n    Bar () : x(1), y(2) {}\n    void bar (int x = 3) {\n        int y = 4;\n        std::cout &lt;&lt; \"x: \" &lt;&lt; x &lt;&lt; std::endl;\n        std::cout &lt;&lt; \"this-&gt;x: \" &lt;&lt; this-&gt;x &lt;&lt; std::endl;\n        std::cout &lt;&lt; \"y: \" &lt;&lt; y &lt;&lt; std::endl;\n        std::cout &lt;&lt; \"this-&gt;y: \" &lt;&lt; this-&gt;y &lt;&lt; std::endl;\n    }\n};\n</code></pre>\n<p>The <code>this</code> pointer can be used to access a member that was overshadowed by a function parameter or a local variable.</p>\n<hr>\n<pre><code>template &lt;unsigned V&gt;\nclass Foo {\n    unsigned v;\npublic:\n    Foo () : v(V) { std::cout &lt;&lt; \"&lt;\" &lt;&lt; v &lt;&lt; \"&gt;\" &lt;&lt; \" this: \" &lt;&lt; this &lt;&lt; std::endl; }\n};\n\nclass Bar : public Foo&lt;1&gt;, public Foo&lt;2&gt;, public Foo&lt;3&gt; {\npublic:\n    Bar () { std::cout &lt;&lt; \"Bar this: \" &lt;&lt; this &lt;&lt; std::endl; }\n};\n</code></pre>\n<p>Multiple inheritance will cause the different parents to have different <code>this</code> values. Only the first inherited parent will have the same <code>this</code> value as the derived object.</p>\n</hr></hr>", "LastActivityDate": "2013-05-11T01:33:08.000", "CommentCount": "0", "CreationDate": "2013-05-11T01:33:08.000", "ParentId": "16492736", "Score": "2", "OwnerUserId": "315052"}, "34114373": {"Id": "34114373", "PostTypeId": "2", "Body": "<p>It is  a local pointer.It refers to the current object as local object </p>\n", "LastActivityDate": "2015-12-06T05:25:44.890", "CommentCount": "0", "CreationDate": "2015-12-06T05:25:44.890", "ParentId": "16492736", "Score": "0", "OwnerUserId": "5564255"}, "47418493": {"Id": "47418493", "PostTypeId": "2", "Body": "<p>A pointer is a programming language object, whose value refers to points to another value stored elsewhere in the computer memory using its memory address.</p>\n<p>It can also be said that a pointer is a variable that holds a memory address as its value.</p>\n", "LastActivityDate": "2017-11-21T16:52:31.473", "CommentCount": "1", "CreationDate": "2017-11-21T16:52:31.473", "ParentId": "16492736", "Score": "0", "OwnerUserId": "8980778"}, "16492752": {"Id": "16492752", "PostTypeId": "2", "Body": "<p><strong>this</strong> is a pointer to self (the object who invoked <strong>this</strong>).</p>\n<p>Suppose you have an object of class Car named car which have a non static method getColor(), the call to this inside getColor() returns the adress of car (the instance of the class).</p>\n<p>Static member functions does not have a <strong>this</strong> pointer(since they are not related to an instance).</p>\n", "LastEditorUserId": "1297125", "LastActivityDate": "2013-05-11T01:05:15.770", "Score": "2", "CreationDate": "2013-05-11T00:59:33.997", "ParentId": "16492736", "CommentCount": "0", "OwnerUserId": "1297125", "LastEditDate": "2013-05-11T01:05:15.770"}, "38716241": {"Id": "38716241", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_16492736_38716241_0\">Acc. to Object Oriented Programming with c++ by Balaguruswamy</p>\n</blockquote>\n<p><code>this</code> is a pointer that points to the object for which <code>this</code> function was called. For example, the function call <code>A.max()</code> will set the pointer <code>this</code> to the address of the object. The pointer <code>this</code> is acts as an implicit argument to all the member functions.</p>\n<p>You will find a great example of <code>this</code> pointer here. It also helped me to understand the concept.\n<a href=\"http://www.learncpp.com/cpp-tutorial/8-8-the-hidden-this-pointer/\" rel=\"nofollow noreferrer\">http://www.learncpp.com/cpp-tutorial/8-8-the-hidden-this-pointer/</a></p>\n", "LastEditorUserId": "3222665", "LastActivityDate": "2017-05-22T10:01:54.717", "Score": "1", "CreationDate": "2016-08-02T09:09:27.910", "ParentId": "16492736", "CommentCount": "0", "OwnerUserId": "3222665", "LastEditDate": "2017-05-22T10:01:54.717"}, "16492797": {"Id": "16492797", "PostTypeId": "2", "Body": "<p>The short answer is that <code>this</code> is a special keyword that identifies \"this\" object - the one on which you are currently operating. The slightly longer, more complex answer is this:</p>\n<p>When you have a <code>class</code>, it can have member functions of two types: <code>static</code> and non-<code>static</code>. The non-<code>static</code> member functions must operate on a particular <em>instance</em> of the class, and they need to know where that instance is. To help them, the language defines an implicit variable (i.e. one that is declared automatically for you when it is needed without you having to do anything) which is called <code>this</code> and which will automatically be made to point to the particular instance of the class on which the member function is operating.</p>\n<p>Consider this simple example:</p>\n<pre><code>#include &lt;iostream&gt;\n\nclass A\n{\npublic:\n    A() \n    { \n        std::cout &lt;&lt; \"A::A: constructed at \" &lt;&lt; this &lt;&lt; std::endl;\n    } \n\n    void SayHello()\n    {\n        std::cout &lt;&lt; \"Hi! I am the instance of A at \" &lt;&lt; this &lt;&lt; std::endl;\n    }\n};\n\nint main(int, char **)\n{\n    A a1;\n    A a2;\n\n    a1.SayHello();        \n    a2.SayHello();\n\n    return 0;\n}\n</code></pre>\n<p>When you compile and run this, observe that the value of <code>this</code> is different between <code>a1</code> and <code>a2</code>.</p>\n", "LastEditorUserId": "970543", "LastActivityDate": "2013-05-11T01:17:53.423", "Score": "6", "CreationDate": "2013-05-11T01:11:55.283", "ParentId": "16492736", "CommentCount": "0", "OwnerUserId": "970543", "LastEditDate": "2013-05-11T01:17:53.423"}});