post_cb({"32402842": {"CommentCount": "4", "AcceptedAnswerId": "32402961", "CreationDate": "2015-09-04T16:38:54.250", "LastActivityDate": "2015-09-04T17:17:05.810", "PostTypeId": "1", "ViewCount": "60", "FavoriteCount": "1", "Title": "C++: Overloaded New call constructs object automatically", "Id": "32402842", "Score": "2", "Body": "<p>I'm trying to overload the new operator in order to allocate my own memory, but I still need to construct the object.\nThat's why I decided to pass the parameters through a variadic template in order to feed the object's constructor properly.</p>\n<p>The constructor is called twice in this example, I can't explain why.\nIt seems that the overloaded new calls automatically the constructor.</p>\n<pre><code>#include &lt;stdlib.h&gt;\n#include &lt;iostream&gt;\n#include &lt;new&gt;\n\nclass A\n{\npublic:\n  template&lt;typename... Args&gt;\n  void *operator new(size_t sz, Args ...parameters)\n  {\n    void *mem = ::operator new(sizeof(A));\n    A *var = ::new (mem) A(parameters...);\n    return var;\n  }\n  A() : num(0) { std::cout &lt;&lt; \"Default\" &lt;&lt; std::endl; }\n  A(int nb) : num(nb) { std::cout &lt;&lt; \"Integer = \" &lt;&lt; num &lt;&lt; std::endl; }\n  const int num;\n};\n\nint main()\n{\n  A *obj = new A(3);\n  std::cout &lt;&lt; \"Obj result = \" &lt;&lt; obj-&gt;num &lt;&lt; std::endl;\n}\n</code></pre>\n", "Tags": "<c++>", "OwnerUserId": "5301531", "AnswerCount": "2"}, "32403394": {"ParentId": "32402842", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_32402842_32403394_0\">I'm trying to overload the new operator in order to allocate my own memory, but I still need to construct the object.</p>\n</blockquote>\n<p>No you don't. <code>operator new</code> by definition initializes the object. See [expr.new]/15:</p>\n<blockquote>\n<p id=\"so_32402842_32403394_1\">A <em>new-expression</em> that creates an object of type <strong>T</strong> initializes\n  that object as follows:</p>\n<p id=\"so_32402842_32403394_2\">\u2014 If the <em>new-initializer</em> is omitted, the object is\n  default-initialized (8.5); if no initialization is performed, the\n  object has indeterminate value.</p>\n<p id=\"so_32402842_32403394_3\">\u2014 Otherwise, the <em>new-initializer</em> is interpreted according to the\n  initialization rules of 8.5 for direct-initialization.</p>\n</blockquote>\n<p>At a minimum, your overload can look like this:</p>\n<pre><code>void *operator new(size_t sz)\n{\n    return ::operator new(sizeof(A));\n}\n</code></pre>\n<p>The <code>static</code> keyword is optional.</p>\n", "OwnerUserId": "5301649", "PostTypeId": "2", "Id": "32403394", "Score": "0", "CreationDate": "2015-09-04T17:17:05.810", "LastActivityDate": "2015-09-04T17:17:05.810"}, "bq_ids": {"n4140": {"so_32402842_32403394_1": {"section_id": 6098, "quality": 1.0, "length": 7}, "so_32402842_32403394_2": {"section_id": 6098, "quality": 1.0, "length": 9}, "so_32402842_32403394_3": {"section_id": 6098, "quality": 1.0, "length": 7}}, "n3337": {"so_32402842_32403394_1": {"section_id": 5864, "quality": 1.0, "length": 7}, "so_32402842_32403394_2": {"section_id": 5864, "quality": 1.0, "length": 9}, "so_32402842_32403394_3": {"section_id": 5864, "quality": 1.0, "length": 7}}, "n4659": {"so_32402842_32403394_1": {"section_id": 7595, "quality": 1.0, "length": 7}, "so_32402842_32403394_2": {"section_id": 7595, "quality": 1.0, "length": 9}, "so_32402842_32403394_3": {"section_id": 7595, "quality": 1.0, "length": 7}}}, "32402961": {"ParentId": "32402842", "CommentCount": "0", "Body": "<p>Fixed, there is not reason to try to call the constructor within the overload, the object will be constructed at returned void*'s pointed allocated memory.</p>\n", "OwnerUserId": "5301531", "PostTypeId": "2", "Id": "32402961", "Score": "2", "CreationDate": "2015-09-04T16:46:30.553", "LastActivityDate": "2015-09-04T16:46:30.553"}});