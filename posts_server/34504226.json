post_cb({"bq_ids": {"n4140": {"so_34504226_34504304_0": {"length": 48, "quality": 0.9795918367346939, "section_id": 531}}, "n3337": {"so_34504226_34504304_0": {"length": 48, "quality": 0.9795918367346939, "section_id": 522}}, "n4659": {"so_34504226_34504304_0": {"length": 48, "quality": 0.9795918367346939, "section_id": 552}}}, "34504316": {"Id": "34504316", "PostTypeId": "2", "Body": "<p>Problem seems here,</p>\n<pre><code>#define fix_fft\n</code></pre>\n<p>This macro will replace function name with same name in your code with empty space and that's why you have the error. <strong>Please change name of macro to something else like <code>fix_fft_</code>.</strong></p>\n", "LastActivityDate": "2015-12-29T04:13:42.067", "CommentCount": "2", "CreationDate": "2015-12-29T04:13:42.067", "ParentId": "34504226", "Score": "1", "OwnerUserId": "760365"}, "34504226": {"ViewCount": "1505", "Body": "<p>I am relatively new to the whole programming neighborhood and was playing around with the Arduino Duemilanove and the LOL shield. I had this great idea to turn it into a visual equalizer and lo and behold there were people already doing it <a href=\"http://www.instructables.com/id/LoL-Shield-Audio-Spectrum-VU-Meter/?ALLSTEPS\" rel=\"nofollow\">here</a>. </p>\n<p>The Arduino works fine and I am able to get code running on it. Simple code, but still code.</p>\n<p>I followed all the instructions on how to get it working and am pretty close. However, whenever I try to compile the .ino file for uploading to the board, it gives me 2 errors:</p>\n<p>error #1:</p>\n<pre><code>C:\\Users\\Jacob\\Documents\\Arduino\\libraries\\FFT\\fix_fft.cpp:130:13: error:\nexpected unqualified-id before 'char'\n int fix_fft(char fr[], char fi[], int m, int inverse)\n             ^\n</code></pre>\n<p>error #2:</p>\n<pre><code>C:\\Users\\Jacob\\Documents\\Arduino\\libraries\\FFT\\fix_fft.cpp:130:13: error:\nexpected ')' before 'char'\nError compiling.\n</code></pre>\n<p>Here is the source code (<em>with large quantities of immaterial code removed</em>):</p>\n<pre><code>#define fix_fft\n#define __PROG_TYPES_COMPAT__\n#include &lt;avr/pgmspace.h&gt;\n#include \"fix_fft.h\"\n\n/* fix_fft.c - Fixed-point in-place Fast Fourier Transform  */\n\n#define N_WAVE      256    /* full length of Sinewave[] */\n#define LOG2_N_WAVE 8      /* log2(N_WAVE) */\n\nconst prog_int8_t Sinewave[N_WAVE-N_WAVE/4] PROGMEM = {\n0, 3, 6, 9, 12, 15, 18, 21, \n    \u2026\n};\n\ninline char FIX_MPY(char a, char b)\n{\n    \u2026\n}\n\n/*\n fix_fft() - perform forward/inverse fast Fourier transform.\n fr[n],fi[n] are real and imaginary arrays, both INPUT AND\n RESULT (in-place FFT), with 0 &lt;= n &lt; 2**m; set inverse to\n 0 for forward transform (FFT), or 1 for iFFT.\n*/\n\nint fix_fft(char fr[], char fi[], int m, int inverse)\n{\n   int mr, nn, i, j, l, k, istep, n, scale, shift;\n   char qr, qi, tr, ti, wr, wi;\n\n   n = 1 &lt;&lt; m;\n\n   /* max FFT size = N_WAVE */\n   if (n &gt; N_WAVE)\n       return -1;\n\n   mr = 0;\n   nn = n - 1;\n   scale = 0;\n\n   /* decimation in time - re-order data */\n   for (m=1; m&lt;=nn; ++m) {\n       l = n;\n       do {\n           l &gt;&gt;= 1;\n       } while (mr+l &gt; nn);\n       mr = (mr &amp; (l-1)) + l;\n\n       if (mr &lt;= m)\n           continue;\n       tr = fr[m];\n       fr[m] = fr[mr];\n       fr[mr] = tr;\n       ti = fi[m];\n       fi[m] = fi[mr];\n       fi[mr] = ti;\n   }\n\n   l = 1;\n   k = LOG2_N_WAVE-1;\n   while (l &lt; n) {\n      if (inverse) {\n           /* variable scaling, depending upon data */\n           shift = 0;\n           for (i=0; i&lt;n; ++i) {\n               j = fr[i];\n               if (j &lt; 0)\n                   j = -j;\n               m = fi[i];\n               if (m &lt; 0)\n               m = -m;\n               if (j &gt; 16383 || m &gt; 16383) {\n                   shift = 1;\n                   break;\n               }\n           }\n           if (shift)\n               ++scale;\n       } else {\n           /*\n             fixed scaling, for proper normalization --\n             there will be log2(n) passes, so this results\n             in an overall factor of 1/n, distributed to\n             maximize arithmetic accuracy.\n           */\n           shift = 1;\n       }\n       /*\n         it may not be obvious, but the shift will be\n         performed on each data point exactly once,\n         during this pass.\n       */\n       istep = l &lt;&lt; 1;\n       for (m=0; m&lt;l; ++m) {\n           j = m &lt;&lt; k;\n           /* 0 &lt;= j &lt; N_WAVE/2 */\n           wr =  pgm_read_word_near(Sinewave + j+N_WAVE/4);\n\n/*Serial.println(\"asdfasdf\");\nSerial.println(wr);\nSerial.println(j+N_WAVE/4);\nSerial.println(Sinewave[256]);\n\nSerial.println(\"\");*/\n\n\n           wi = -pgm_read_word_near(Sinewave + j);\n           if (inverse)\n               wi = -wi;\n           if (shift) {\n               wr &gt;&gt;= 1;\n               wi &gt;&gt;= 1;\n           }\n           for (i=m; i&lt;n; i+=istep) {\n               j = i + l;\n               tr = FIX_MPY(wr,fr[j]) - FIX_MPY(wi,fi[j]);\n               ti = FIX_MPY(wr,fi[j]) + FIX_MPY(wi,fr[j]);\n               qr = fr[i];\n               qi = fi[i];\n               if (shift) {\n                   qr &gt;&gt;= 1;\n                   qi &gt;&gt;= 1;\n               }\n               fr[j] = qr - tr;\n               fi[j] = qi - ti;\n               fr[i] = qr + tr;\n               fi[i] = qi + ti;\n           }\n       }\n       --k;\n       l = istep;\n   }\n   return scale;\n}\n\n\u2026\n</code></pre>\n<p>There are other files in the audio conversion too.</p>\n", "AcceptedAnswerId": "34504304", "Title": "Expected unqualified-id before 'char'", "CreationDate": "2015-12-29T04:01:46.857", "Id": "34504226", "CommentCount": "1", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2015-12-29T04:18:08.150", "LastEditorUserId": "15168", "LastActivityDate": "2015-12-29T04:32:50.237", "Score": "1", "OwnerUserId": "5725365", "Tags": "<c++><arduino><char><command>", "AnswerCount": "2"}, "34504304": {"Id": "34504304", "PostTypeId": "2", "Body": "<p>What do you think this line does?  Why do you think it is needed in your code at all?</p>\n<pre><code>#define fix_fft\n</code></pre>\n<p>When the preprocessor sees the line:</p>\n<pre><code>int fix_fft(char fr[], char fi[], int m, int inverse)\n</code></pre>\n<p>it is forced to translate that to:</p>\n<pre><code>int (char fr[], char fi[], int m, int inverse)\n</code></pre>\n<p>and now you can see why the compiler complains.</p>\n<p>My preferred fix would be to remove the <code>#define fix_fft</code> line altogether.  If you need it for some reason, you could either rename the macro that's defined (<code>#define fix_fft_c</code> to indicate that it's the <code>fix_fft.c</code> file) or rename the function that's defined (don't forget to edit the header that declares the function too \u2014 you do have a header to declare the function, don't you?), or (to be truly perverse), use <code>#define fix_fft fix_fft</code>.  See the C standard, ISO/IEC 9899:2011 \u2014 \u00a76.10.3.4 <strong>Rescanning and further replacement</strong>:</p>\n<blockquote>\n<p id=\"so_34504226_34504304_0\">If the name of the macro being replaced is found during this scan of the replacement list (not including the rest of the source file\u2019s preprocessing tokens), it is not replaced. Furthermore, if any nested replacements encounter the name of the macro being replaced, it is not replaced. These nonreplaced macro name preprocessing tokens are no longer available for further replacement even if they are later (re)examined in contexts in which that macro name preprocessing token would otherwise have been replaced.</p>\n</blockquote>\n", "LastEditorUserId": "15168", "LastActivityDate": "2015-12-29T04:32:50.237", "Score": "0", "CreationDate": "2015-12-29T04:12:24.970", "ParentId": "34504226", "CommentCount": "1", "OwnerUserId": "15168", "LastEditDate": "2015-12-29T04:32:50.237"}});