post_cb({"bq_ids": {"n4140": {"so_47845136_47845314_0": {"length": 11, "quality": 1.0, "section_id": 5555}}, "n3337": {"so_47845136_47845314_0": {"length": 11, "quality": 1.0, "section_id": 5337}}, "n4659": {"so_47845136_47845314_0": {"length": 11, "quality": 1.0, "section_id": 7000}}}, "47845155": {"Id": "47845155", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_47845136_47845155_0\">So , it it implicit typecast happening here?</p>\n</blockquote>\n<p>No. Pointers can be used as iterators for algorithmic template functions, because the template types act as a concept.</p>\n<p>Standard container iterator implementations and pointers allow the same operations to be applied on them (<code>++</code>,<code>--</code>,<code>*</code>,<code>-&gt;</code>, ...).</p>\n<hr>\n<p>Notable also, that those template parameter types like <code>BidirectionalIterator</code> have certain <a href=\"http://en.cppreference.com/w/cpp/iterator/iterator_traits\" rel=\"nofollow noreferrer\"><code>std::iterator_traits</code></a>, which describe in detail which operations need to be supported.</p>\n</hr>", "LastEditorUserId": "8242698", "LastActivityDate": "2017-12-16T11:42:57.857", "Score": "2", "CreationDate": "2017-12-16T11:29:21.063", "ParentId": "47845136", "CommentCount": "2", "OwnerUserId": "8242698", "LastEditDate": "2017-12-16T11:42:57.857"}, "47845314": {"Id": "47845314", "PostTypeId": "2", "Body": "<p>Actually the algorithm is declared like</p>\n<pre><code>template&lt;class BidirectionalIterator&gt;\nvoid reverse(BidirectionalIterator first, BidirectionalIterator last);\n</code></pre>\n<p>So it is a template function. It can be written like</p>\n<pre><code>template&lt;class T&gt;\nvoid reverse(T first, T last);\n</code></pre>\n<p>The name <code>BidirectionalIterator</code> of the template parameter is used to say the user that the supplied template argument has to have apart from the operator ++ also operator --. And pointers satisfy this requirement.</p>\n<p>As for iterators then (the C++ Standard, 27.2 Iterator requirements, \n27.2.1 In general)</p>\n<blockquote>\n<p id=\"so_47845136_47845314_0\">1 <strong>Iterators are a generalization of pointers</strong> that allow a C++\n  program to work with different data structures (containers) in a\n  uniform manner...</p>\n</blockquote>\n", "LastActivityDate": "2017-12-16T11:46:51.113", "CommentCount": "2", "CreationDate": "2017-12-16T11:46:51.113", "ParentId": "47845136", "Score": "1", "OwnerUserId": "2877241"}, "47845136": {"ViewCount": "39", "Body": "<p>I came across following code:</p>\n<pre><code>int data[10] = { 1, 3, 5, 7, 9, 11, 13, 15, 17, 19 }; \nreverse(data+2, data+6);\n</code></pre>\n<p>When I checked prototype of reverse function , its:</p>\n<pre><code>void reverse (BidirectionalIterator first, BidirectionalIterator last)\n</code></pre>\n<p>So , it it implicit typecast happening here?</p>\n", "AcceptedAnswerId": "47845155", "Title": "Is a Pointer typecast to iterator?", "CreationDate": "2017-12-16T11:26:33.460", "LastActivityDate": "2017-12-16T11:59:44.643", "CommentCount": "1", "LastEditDate": "2017-12-16T11:29:49.643", "PostTypeId": "1", "LastEditorUserId": "8242698", "Id": "47845136", "Score": "-4", "OwnerUserId": "2459643", "Tags": "<c++><vector><stl><iterator>", "AnswerCount": "3"}, "47845427": {"Id": "47845427", "PostTypeId": "2", "Body": "<p>The arguments of <code>reverse</code> are templated. Syntactically, the arguments can have any type, but the algorithm will have requirements for the type as specified in the standard. Specifically, it requires that the template argument is a bidirectional iterator.</p>\n<p>A type is an iterator if it satisfies the requirements of <code>Iterator</code> concept as specified in the standard. Similarly, an iterator is a bidirectional iterator if it satisfies the requirements of <code>BidirectionalIterator</code>.</p>\n<p>Pointer types satisfy all requirements of <code>RandomAccessIterator</code>. Therefore pointers are iterators and more specifically they are random access iterators. All random access iterators are also bidirectional iterators.</p>\n<p>So, no conversion is involved, the pointers are used as they are.</p>\n", "LastActivityDate": "2017-12-16T11:59:44.643", "CommentCount": "4", "CreationDate": "2017-12-16T11:59:44.643", "ParentId": "47845136", "Score": "1", "OwnerUserId": "2079303"}});