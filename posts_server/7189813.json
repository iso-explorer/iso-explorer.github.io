post_cb({"7189868": {"PostTypeId": "2", "Body": "<p>It seems that members of a class are private as well as any inheritance is private where as a struct is all public. </p>\n<p>Someone else will have to give you more specifics though, sorry. </p>\n", "LastActivityDate": "2011-08-25T11:52:04.783", "Id": "7189868", "CommentCount": "0", "CreationDate": "2011-08-25T11:52:04.783", "ParentId": "7189813", "Score": "1", "OwnerUserId": "910165"}, "7189813": {"ViewCount": "1911", "Body": "<blockquote>\n<p id=\"so_7189813_7189813_0\"><strong>Possible Duplicate:</strong><br>\n<a href=\"https://stackoverflow.com/questions/92859/what-are-the-differences-between-struct-and-class-in-c\">What are the differences between struct and class in C++</a> </br></p>\n</blockquote>\n<p>I <a href=\"https://stackoverflow.com/q/54585/541686\">used</a> to <a href=\"https://stackoverflow.com/questions/54585/when-should-you-use-a-class-vs-a-struct-in-c\">think</a> that the <em>only</em> differences between C++ classes were the private-by-default class member access modifiers and the laid-out-like-C guarantee.</p>\n<p><em>It turns out I was wrong</em>, because this code doesn't compile:</p>\n<pre><code>class { int value; } var = { 42 };\n</code></pre>\n<p>whereas this does:</p>\n<pre><code>struct { int value; } var = { 42 };\n</code></pre>\n<p>I can't figure out why there's a difference, but there apparently is in Visual C++ 2008:</p>\n<blockquote>\n<p id=\"so_7189813_7189813_1\">error C2552: <code>'var'</code> : non-aggregates cannot be initialized with initializer list</p>\n</blockquote>\n<p>So, yes, I will ask a many-times-over <strong>duplicate question</strong> (hopefully <em>without</em> duplicate answers!):</p>\n<h3>What are <strong><em>all</em></strong> the differences between structs and classes in C++?</h3>\n<p><sup>Of course, feel free to close this if you find that I've missed something in the other questions -- I certainly might have. But I didn't see this being discussed in any of the answers, so I thought I'd ask.</sup></p>\n", "AcceptedAnswerId": "7189848", "Title": "C++ all differences between 'struct' and 'class'?", "CreationDate": "2011-08-25T11:47:42.657", "Id": "7189813", "CommentCount": "7", "LastEditDate": "2017-05-23T11:47:56.363", "PostTypeId": "1", "LastEditorUserId": "-1", "LastActivityDate": "2011-08-25T11:57:11.990", "ClosedDate": "2011-08-25T12:15:46.513", "Score": "6", "OwnerUserId": "541686", "Tags": "<c++><class><struct>", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_7189813_7189848_0": {"length": 13, "quality": 0.6842105263157895, "section_id": 3298}}, "n3337": {"so_7189813_7189848_0": {"length": 13, "quality": 0.6842105263157895, "section_id": 3168}}}, "7189875": {"PostTypeId": "2", "Body": "<p>That is <strong>not</strong> a difference between <code>class</code> and <code>struct</code>, but between <em>aggregate</em> and <em>non-aggregates</em>. You cannot use the initializer list with a non-aggregate type, but that is unrelated to the <code>class</code> or <code>struct</code> keyword:</p>\n<pre><code>class { public: int value; } var = {42};   // compiles\nstruct { private: int value; } var = {42}; // error\n</code></pre>\n", "LastActivityDate": "2011-08-25T11:52:49.643", "Id": "7189875", "CommentCount": "1", "CreationDate": "2011-08-25T11:52:49.643", "ParentId": "7189813", "Score": "4", "OwnerUserId": "36565"}, "7189848": {"PostTypeId": "2", "Body": "<p>You can use <code>{}</code> initializer for aggregates only<sup>1</sup> and the first one is not an aggregate, as it has one <code>private</code> data member. </p>\n<p>The Standard says in section \u00a78.5.1/1,</p>\n<blockquote>\n<p id=\"so_7189813_7189848_0\">An aggregate is an array or a class (clause 9) with no user-declared\n  constructors (12.1), <strong>no private or protected non-static data members</strong>\n  (clause 11), no base classes (clause 10), and no virtual functions\n  (10.3).</p>\n</blockquote>\n<p><sup>1. Well, I meant, in C++03, you can use <code>{}</code> for aggregates ONLY, but in C++11, you can use <code>{}</code> even with non-aggregates (if the non-aggregate class is properly implemented to handle this).</sup></p>\n<p>Also see this for detail answer (on <code>{}</code> initializer):</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/5666321/what-is-assignment-via-curly-braces-called-and-can-it-be-controlled\">What is assignment via curly braces called? and can it be controlled?</a></li>\n</ul>\n", "LastActivityDate": "2011-08-25T11:57:11.990", "LastEditorUserId": "-1", "Id": "7189848", "CommentCount": "8", "CreationDate": "2011-08-25T11:50:40.687", "ParentId": "7189813", "Score": "15", "OwnerUserId": "415784", "LastEditDate": "2017-05-23T11:47:56.363"}, "7189888": {"PostTypeId": "2", "Body": "<p>The difference <strong>is</strong> between public and private.</p>\n<p>Try this instead:</p>\n<pre><code>class { public: int value; } var = { 42 };\n</code></pre>\n", "LastActivityDate": "2011-08-25T11:53:43.500", "Id": "7189888", "CommentCount": "1", "CreationDate": "2011-08-25T11:53:43.500", "ParentId": "7189813", "Score": "3", "OwnerUserId": "597607"}});