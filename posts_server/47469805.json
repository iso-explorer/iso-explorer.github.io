post_cb({"bq_ids": {"n4140": {"so_47469805_47470669_2": {"length": 15, "quality": 1.0, "section_id": 438}, "so_47469805_47470669_3": {"length": 11, "quality": 0.7333333333333333, "section_id": 438}}, "n3337": {"so_47469805_47470669_2": {"length": 15, "quality": 1.0, "section_id": 429}, "so_47469805_47470669_3": {"length": 11, "quality": 0.7333333333333333, "section_id": 429}}, "n4659": {"so_47469805_47470669_2": {"length": 15, "quality": 1.0, "section_id": 458}, "so_47469805_47470669_3": {"length": 11, "quality": 0.7333333333333333, "section_id": 458}}}, "47470669": {"Id": "47470669", "PostTypeId": "2", "Body": "<p>This took <em>forever</em> to find, but per n4659 (ISO C++17 draft):</p>\n<blockquote>\n<p id=\"so_47469805_47470669_0\"><strong>15.6.2 Initializing bases and members</strong></p>\n<p id=\"so_47469805_47470669_1\"><strong>paragraph (13.3)</strong></p>\n<p id=\"so_47469805_47470669_2\">Then, non-static data members are initialized in the order they were declared in the class definition (again regardless of the order of the mem-initializers).</p>\n<p id=\"so_47469805_47470669_3\">[ Note: The declaration order is mandated to ensure that base and member subobjects are destroyed in the\n  reverse order of initialization. \u2014 end note ]</p>\n</blockquote>\n<p>Here, <code>mem-initializers</code> are the list following the colon in the constructor definition.</p>\n", "LastActivityDate": "2017-11-24T09:57:07.287", "CommentCount": "0", "CreationDate": "2017-11-24T09:57:07.287", "ParentId": "47469805", "Score": "0", "OwnerUserId": "8967928"}, "47470006": {"Id": "47470006", "PostTypeId": "2", "Body": "<p>Everything looks fine. It constructs-destructs stack-wise (First in/Last out):</p>\n<pre><code>#include &lt;iostream&gt;\nstruct A \n{\n    A() { name=\"untitled\"; std::cout &lt;&lt; name &lt;&lt;\" constructor\" &lt;&lt; std::endl; }\n    A(std::string name):name(name) { std::cout &lt;&lt; name &lt;&lt;\" constructor\" &lt;&lt; std::endl; }\n    ~A() { std::cout &lt;&lt; name &lt;&lt;\" destructor\" &lt;&lt; std::endl; }\n    std::string name;\n};\n\nstruct B \n{\n    A a, aa, aaa;\n    B() : aa(\"aa\"), a(\"a\") { std::cout &lt;&lt; \"B constructor\" &lt;&lt; std::endl; }\n    ~B() { std::cout &lt;&lt; \"B destructor\" &lt;&lt; std::endl; }\n};\nB beta;\n\nint main()\n{\n    return 0;\n}\n</code></pre>\n<p>Result:</p>\n<pre><code>a constructor\naa constructor\nuntitled constructor\nB constructor\nB destructor\nuntitled destructor\naa destructor\na destructor\n</code></pre>\n<p>Is this order guaranteed? <a href=\"https://stackoverflow.com/a/2254306/8911468\">yes</a></p>\n<hr>\n<p>If you turn on all the warnings you see this:</p>\n<pre><code> g++ -Wall -Wreorder main.cpp \n\n\nmain.cpp: In constructor \u2018B::B()\u2019:\nmain.cpp:12:10: warning: \u2018B::aa\u2019 will be initialized after [-Wreorder]\n     A a, aa, aaa;\n          ^\nmain.cpp:12:7: warning:   \u2018A B::a\u2019 [-Wreorder]\n     A a, aa, aaa;\n       ^\nmain.cpp:13:5: warning:   when initialized here [-Wreorder]\n     B() : aa(\"aa\"), a(\"a\") { std::cout &lt;&lt; \"B constructor\" &lt;&lt; std::endl; }\n     ^\n</code></pre>\n</hr>", "LastEditorUserId": "8911468", "LastActivityDate": "2017-11-24T09:38:35.730", "Score": "0", "CreationDate": "2017-11-24T09:22:43.063", "ParentId": "47469805", "CommentCount": "2", "OwnerUserId": "8911468", "LastEditDate": "2017-11-24T09:38:35.730"}, "47469860": {"Id": "47469860", "PostTypeId": "2", "Body": "<p>The member objects get destroyed in the reversed order they got constructed. Note that you do not influence this order by changing the order in the constructor's initialization list. The order is exclusively determined by the order you declare them in the struct/class definition.</p>\n<blockquote>\n<p id=\"so_47469805_47469860_0\">What I don't know is what is the order of calling destructors for A. Is it a,aa,aaa respectively, or aaa,aa,a respectively?</p>\n</blockquote>\n<p>Thus, the latter case is happening.</p>\n", "LastActivityDate": "2017-11-24T09:13:26.070", "CommentCount": "4", "CreationDate": "2017-11-24T09:13:26.070", "ParentId": "47469805", "Score": "3", "OwnerUserId": "7703564"}, "47469805": {"ViewCount": "83", "Body": "<p>I have the following C++ code:</p>\n<pre><code>#include &lt;iostream&gt;\nstruct A \n{\n    A() { std::cout &lt;&lt; \"A\" &lt;&lt; ++x; }\n    A(int x) : A() { std::cout &lt;&lt; x; }\n    ~A() { std::cout &lt;&lt; \"D\"; }\n    static int x;\n};\n\nint A::x = 0;\nstruct B \n{\n    A a, aa, aaa;\n    B() : aa(1), a(2) { std::cout &lt;&lt; \"B\" &lt;&lt; std::endl; }\n    ~B() { std::cout &lt;&lt; \"B\" &lt;&lt; A::x; }\n};\nB beta;\n\n    int main()\n    {\n        return 0;\n    }\n</code></pre>\n<p>I understand everything in the control flow except of destructor calls.\nHere is the control flow without destructors:</p>\n<ol>\n<li><p>create object B</p></li>\n<li><p>call constructor B\ncall a,aa,aaa respectively</p></li>\n</ol>\n<p>2.1 for a, call A(int x)</p>\n<p>2.2 for aa, call A(int x)</p>\n<p>2.3 for aaa, call A()</p>\n<ol start=\"3\">\n<li>display B from B c-tor body</li>\n</ol>\n<p>Now the 4. step is to call destructor B, I know that.</p>\n<p>What I don't know is what is the order of calling destructors for A.\nIs it a,aa,aaa respectively, or aaa,aa,a respectively?</p>\n<p>Thanks in advance.</p>\n", "Title": "C++ - Destructor call order", "CreationDate": "2017-11-24T09:10:09.283", "LastActivityDate": "2017-11-24T09:57:07.287", "CommentCount": "4", "LastEditDate": "2017-11-24T09:24:30.547", "PostTypeId": "1", "LastEditorUserId": "8587776", "Id": "47469805", "Score": "1", "OwnerUserId": "7829503", "Tags": "<c++><destructor>", "AnswerCount": "3"}});