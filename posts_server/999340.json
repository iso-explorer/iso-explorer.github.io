post_cb({"1000176": {"ParentId": "999340", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>Because the standard says so:</p>\n<blockquote>\n<p id=\"so_999340_1000176_0\"><strong>12.4.7</strong> A destructor can be declared virtual (10.3) or pure virtual (10.4); if any objects of that class or any derived class are created in the program, the destructor shall be defined. </p>\n</blockquote>\n<p>The reason for this is that it is called explicitly when an object of a derived class is destroyed.</p>\n<p>See also the answers to my previous question: <a href=\"https://stackoverflow.com/questions/977543\">Under what circumstances is it advantageous to give an implementation of a pure virtual function?</a></p>\n", "OwnerUserId": "118854", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:04:08.457", "Id": "1000176", "Score": "9", "CreationDate": "2009-06-16T08:28:09.553", "LastActivityDate": "2009-06-16T22:04:58.613"}, "999473": {"ParentId": "999340", "CommentCount": "0", "Body": "<p>Only a virtual dtor can be declared as pure. But then, since you add a declaration, you must implement the body of the dtor. As already mentioned, the destructors call their parent dtor, all up to the chain of inheritance.</p>\n", "OwnerUserId": "108130", "PostTypeId": "2", "Id": "999473", "Score": "3", "CreationDate": "2009-06-16T03:43:01.727", "LastActivityDate": "2009-06-16T03:43:01.727"}, "999353": {"ParentId": "999340", "CommentCount": "0", "Body": "<p>The destructor for the base class must be called when the object is destroyed, so it needs a definition.</p>\n", "OwnerUserId": "112", "PostTypeId": "2", "Id": "999353", "Score": "15", "CreationDate": "2009-06-16T02:31:39.043", "LastActivityDate": "2009-06-16T02:31:39.043"}, "999340": {"CommentCount": "1", "AcceptedAnswerId": "999353", "PostTypeId": "1", "LastEditorUserId": "569101", "CreationDate": "2009-06-16T02:27:41.533", "LastActivityDate": "2013-07-01T14:09:48.187", "LastEditDate": "2013-07-01T14:09:48.187", "ViewCount": "8518", "FavoriteCount": "1", "Title": "Question about pure virtual destructor", "Id": "999340", "Score": "7", "Body": "<p>If we define a abstract class which has a pure virtual destructor, why do we have to give a definition of a destructor in the abstract class?</p>\n", "Tags": "<c++><virtual-destructor>", "OwnerUserId": "53670", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_999340_1000176_0": {"section_id": 405, "quality": 0.8125, "length": 13}}, "n3337": {"so_999340_1000176_0": {"section_id": 396, "quality": 0.8125, "length": 13}}, "n4659": {"so_999340_1000176_0": {"section_id": 423, "quality": 0.8125, "length": 13}}}, "999402": {"ParentId": "999340", "CommentCount": "0", "Body": "<p>As pointed out by Jesse, inherited destructors always get called (they are called for you by the compiler with no way to override this behavior), so it stands to reason that a virtual destructor must have an implementation.  So if a pure virtual destructor must have an implementation, what is the difference between a pure virtual destructor and a regular virtual destructor?  If your abstract class has only the virtual destructor declared and no other pure virtual methods, making the destructor pure will prevent somebody from being able to instantiate the abstract class.</p>\n", "OwnerUserId": "51259", "PostTypeId": "2", "Id": "999402", "Score": "9", "CreationDate": "2009-06-16T02:47:57.723", "LastActivityDate": "2009-06-16T02:47:57.723"}});