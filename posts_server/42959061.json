post_cb({"42959220": {"ParentId": "42959061", "PostTypeId": "2", "CommentCount": "7", "Body": "<p>Since C++11, mixed argument <a href=\"http://en.cppreference.com/w/cpp/numeric/math/pow\" rel=\"nofollow noreferrer\"><code>pow</code></a> has any integral argument cast to double. The return type of the mixed argument functions is always <code>double</code> except when one argument is <code>long double</code> then the result is <code>long double</code>.</p>\n<blockquote>\n<h2>[c.math]</h2>\n<p id=\"so_42959061_42959220_0\">In addition to the double versions of the math functions in , C++ adds float and long double overloaded versions of these functions, with the same semantics.</p>\n<p id=\"so_42959061_42959220_1\">Moreover, there shall be additional overloads sufficient to ensure:</p>\n<ul>\n<li><p id=\"so_42959061_42959220_2\">If any argument corresponding to a double parameter has type long double, then all arguments corresponding to double parameters are effectively cast to long double.</p></li>\n<li><p id=\"so_42959061_42959220_3\">Otherwise, if any argument corresponding to a double parameter has type double or an integer type, then all arguments corresponding to double parameters are effectively cast to double.</p></li>\n<li><p id=\"so_42959061_42959220_4\">Otherwise, all arguments corresponding to double parameters are effectively cast to float.</p></li>\n</ul>\n</blockquote>\n<p>So to sum up:</p>\n<ul>\n<li>One argument <code>long double</code> &gt;&gt; <code>long double</code></li>\n<li>Both arguments <code>float</code> &gt;&gt; <code>float</code></li>\n<li>Otherwise &gt;&gt; <code>double</code></li>\n</ul>\n", "OwnerUserId": "951423", "LastEditorUserId": "951423", "LastEditDate": "2017-03-22T17:56:03.363", "Id": "42959220", "Score": "4", "CreationDate": "2017-03-22T17:51:47.880", "LastActivityDate": "2017-03-22T17:56:03.363"}, "42959203": {"ParentId": "42959061", "CommentCount": "0", "Body": "<p>From cpp <a href=\"http://en.cppreference.com/w/cpp/numeric/math/pow\" rel=\"nofollow noreferrer\">reference</a></p>\n<blockquote>\n<p id=\"so_42959061_42959203_0\">7) A set of overloads or a function template for all combinations of\n  arguments of arithmetic type not covered by 1-3). If any argument has\n  integral type, it is cast to double. If any argument is long double,\n  then the return type Promoted is also long double, otherwise the\n  return type is always double.</p>\n</blockquote>\n<p>\"If any argument has integral type, it is cast to double\" \nthen it would call, converting your double to float.</p>\n<pre><code>float       pow( float base, float exp );\n</code></pre>\n", "OwnerUserId": "2229283", "PostTypeId": "2", "Id": "42959203", "Score": "0", "CreationDate": "2017-03-22T17:51:08.750", "LastActivityDate": "2017-03-22T17:51:08.750"}, "bq_ids": {"n4140": {"so_42959061_42959220_4": {"section_id": 3876, "quality": 1.0, "length": 9}, "so_42959061_42959220_1": {"section_id": 3876, "quality": 1.0, "length": 6}, "so_42959061_42959220_2": {"section_id": 3876, "quality": 1.0, "length": 17}, "so_42959061_42959220_3": {"section_id": 3876, "quality": 1.0, "length": 18}, "so_42959061_42959220_0": {"section_id": 3873, "quality": 1.0, "length": 14}}, "n3337": {"so_42959061_42959220_4": {"section_id": 3736, "quality": 1.0, "length": 9}, "so_42959061_42959220_1": {"section_id": 3736, "quality": 1.0, "length": 6}, "so_42959061_42959220_2": {"section_id": 3736, "quality": 1.0, "length": 17}, "so_42959061_42959220_3": {"section_id": 3736, "quality": 1.0, "length": 18}, "so_42959061_42959220_0": {"section_id": 3733, "quality": 1.0, "length": 14}}, "n4659": {"so_42959061_42959220_4": {"section_id": 4690, "quality": 1.0, "length": 9}, "so_42959061_42959220_1": {"section_id": 4690, "quality": 0.8333333333333334, "length": 5}, "so_42959061_42959220_2": {"section_id": 4690, "quality": 1.0, "length": 17}, "so_42959061_42959220_3": {"section_id": 4690, "quality": 1.0, "length": 18}}}, "42959061": {"CommentCount": "3", "ViewCount": "100", "PostTypeId": "1", "LastEditorUserId": "125997", "CreationDate": "2017-03-22T17:43:57.830", "LastActivityDate": "2017-03-22T17:56:03.363", "Title": "Why does std::pow of a float and int invoke this overload?", "AcceptedAnswerId": "42959220", "LastEditDate": "2017-03-22T17:51:57.267", "Id": "42959061", "Score": "4", "Body": "<p>The following:</p>\n<pre><code>#include &lt;cmath&gt;\n\nint main()\n{\n    float base = 2.0f;\n    float result = std::pow(base, 2);\n    return 0;\n}\n</code></pre>\n<p>Triggers a <code>-Wconversion</code> warning in case it is turned on. <a href=\"https://wandbox.org/permlink/rGvRPgZXFtbM8WM8\" rel=\"nofollow noreferrer\">Wandbox</a></p>\n<p>It seems that the <code>double</code> overload of <code>std::pow</code> is invoked, where I would expect the <code>float</code> overload to be chosen (with the <code>int</code> exponent being cast to <code>float</code>). Can someone who knows his overloads please explain why?</p>\n", "Tags": "<c++><c++14><overload-resolution>", "OwnerUserId": "125997", "AnswerCount": "2"}});