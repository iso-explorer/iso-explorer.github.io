post_cb({"17609653": {"ParentId": "17609609", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_17609609_17609653_0\">Should we delete the object using operator <code>delete[]</code> or <code>operator delete</code>?</p>\n</blockquote>\n<p><code>operator delete[]</code>. You have allocated an <strong>array</strong> of <code>int</code>s, so there's no other option for correctly deallocating it. Using <code>operator delete</code> would invoke undefined behavior.</p>\n", "Id": "17609653", "PostTypeId": "2", "OwnerDisplayName": "user529758", "Score": "2", "CreationDate": "2013-07-12T07:26:28.320", "LastActivityDate": "2013-07-12T07:26:28.320"}, "17609683": {"ParentId": "17609609", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>You must use <code>delete[]</code>.</p>\n<p>C++11 5.3.5 Delete</p>\n<blockquote>\n<p id=\"so_17609609_17609683_0\">::opt delete cast-expression</p>\n<p id=\"so_17609609_17609683_1\">::opt delete [ ] cast-expression</p>\n<p id=\"so_17609609_17609683_2\">The first alternative is for non-array objects, and the second is for arrays.</p>\n</blockquote>\n<p>An array holding one element is still an array.</p>\n", "OwnerUserId": "1009479", "LastEditorUserId": "1009479", "LastEditDate": "2013-07-12T07:32:54.197", "Id": "17609683", "Score": "2", "CreationDate": "2013-07-12T07:27:45.957", "LastActivityDate": "2013-07-12T07:32:54.197"}, "17612460": {"ParentId": "17609609", "PostTypeId": "2", "CommentCount": "1", "Body": "<p><b> No its not safe, it may leads to some unwanted situations.</b><br>\nFor example,It is possible in a memory to have some data (<code>int/char/float</code>...) next to the location where your pointer points to. At that time if you used <b><code>delete []</code> </b> then it may try to delete that data too if it is an integer,for other data types it leads to unexpected errors. \n<br><br>\nExample:<br><br> </br></br></br></br></br></p>\n<pre><code>int *ptr = new int;\nint a = 20;\nchar c = 'e';\n*ptr = 10;\ndelete [] ptr;\n</code></pre>\n<p>There is a possibility the <code>c</code> and <code>a</code> variables may store next to the location where the pointer <code>ptr</code> points to, If <code>a</code> is stored next to it, then it deletes \"<code>a</code>\" also, if the other data types are present, leads to unexpected runtime results.</p>\n<p>So it's advised to use <code>delete[]</code> only for the deletion of memory allocated using new datatype<code>[]</code>.Hope this is useful.</p>\n", "OwnerUserId": "2551262", "LastEditorUserId": "2087705", "LastEditDate": "2013-07-12T10:22:06.117", "Id": "17612460", "Score": "0", "CreationDate": "2013-07-12T10:07:26.417", "LastActivityDate": "2013-07-12T10:22:06.117"}, "17609609": {"CommentCount": "5", "AcceptedAnswerId": "17609644", "CreationDate": "2013-07-12T07:23:51.347", "LastActivityDate": "2013-07-12T10:22:06.117", "PostTypeId": "1", "ViewCount": "2285", "FavoriteCount": "1", "Title": "Can I use `operator delete[]` for a single element array allocation?", "Id": "17609609", "Score": "7", "Body": "<p>If we allocate an object of size 1 as below</p>\n<pre><code>int *arr = new int[1];\n</code></pre>\n<p>Should we delete the object using <code>operator delete[]</code> or <code>operator delete</code>?</p>\n<p>The reason I am concerned is if the compiler would be smart enough to convert the statement as a single element allocation <code>int *arr = new int</code> which would cause calling <code>operator delete[]</code> UB.</p>\n<p>User Case:</p>\n<p>I have a pointer, which I would end up allocation in a varied ways but would finally like to get it deleted. So was wondering, for single element allocation, if I consistently use <code>int *arr = new int[1]</code> can I consistently and safely use <code>operator delete[]</code></p>\n<p><strong>Note</strong></p>\n<p>Can you please refer me back to the standards to support your answer?</p>\n", "Tags": "<c++>", "OwnerUserId": "977038", "AnswerCount": "6"}, "17609644": {"ParentId": "17609609", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>You must use <code>delete[]</code> and not <code>delete</code>. The compiler is not allowed to change <code>new int[1]</code> to <code>new int</code>.</p>\n<p>(As <code>int</code> is a POD type it's quite possible that <code>new int</code> and <code>new int[1]</code> do exactly the same thing under the covers, but if this is the case then <code>delete[]</code> on and <code>int*</code> and <code>delete</code> on an <code>int*</code> will also do exactly the same thing.)</p>\n<p>ISO/IEC 14882:2011 5.3.5 [expr.delete] / 2:</p>\n<blockquote>\n<p id=\"so_17609609_17609644_0\">In the first alternative (<em>delete object</em>), the value of the operand of <code>delete</code> may be a null pointer value, a pointer to a non-array object created by a previous <em>new-expression</em>, or a pointer to a subobject (1.8) representing a base class of such an object (Clause 10). If not, the behavior is undefined.</p>\n</blockquote>\n<p>As <code>int[1]</code> is an array object, if you try and delete it with <code>delete</code> and not <code>delete[]</code>, the behavior is undefined.</p>\n", "OwnerUserId": "19563", "LastEditorUserId": "19563", "LastEditDate": "2013-07-12T07:31:10.863", "Id": "17609644", "Score": "13", "CreationDate": "2013-07-12T07:25:57.970", "LastActivityDate": "2013-07-12T07:31:10.863"}, "17609979": {"ParentId": "17609609", "CommentCount": "0", "Body": "<pre><code>int *arr = new int[1];\n</code></pre>\n<p>Since you use <code>[]</code> for allocation, you need to use <code>[]</code> for <code>delete</code>as well.</p>\n<blockquote>\n<p id=\"so_17609609_17609979_0\"><a href=\"http://en.cppreference.com/w/cpp/language/new\" rel=\"nofollow\">Memory leaks</a> </p>\n<p id=\"so_17609609_17609979_1\">The objects created by new expressions (objects with dynamic storage\n  duration) persist until the pointer returned by the new expression is\n  used in a <strong>matching</strong> delete-expression.</p>\n</blockquote>\n<p>So you should use <code>delete[]</code> for releasing the memory or else you get undefined behaviour.</p>\n<p>And <sub>(incase)</sub>, if the complier is smart enough to take <code>int * arr = new int[1]</code> as <code>int</code>, It must be smart enough to take <code>delete[] arr</code> on <code>arr</code> as <code>delete arr</code>. <strong>However</strong>, there is nothing for <code>delete</code> to differentiate between the <code>arr</code> from <code>int*arr = new int[1]</code> and <code>int*arr = new int</code>. The <a href=\"http://www.parashift.com/c++-faq/allocate-array.html\" rel=\"nofollow\"><code>[]</code> in <code>delete</code></a> is going to indicate it. </p>\n", "OwnerUserId": "2087705", "PostTypeId": "2", "Id": "17609979", "Score": "1", "CreationDate": "2013-07-12T07:44:39.207", "LastActivityDate": "2013-07-12T07:44:39.207"}, "bq_ids": {"n4140": {"so_17609609_17609653_0": {"section_id": 415, "quality": 0.625, "length": 5}, "so_17609609_17609683_2": {"section_id": 6105, "quality": 0.8571428571428571, "length": 6}, "so_17609609_17609644_0": {"section_id": 6106, "quality": 0.9629629629629629, "length": 26}}, "n3337": {"so_17609609_17609653_0": {"section_id": 406, "quality": 0.625, "length": 5}, "so_17609609_17609683_2": {"section_id": 5871, "quality": 0.8571428571428571, "length": 6}, "so_17609609_17609644_0": {"section_id": 5872, "quality": 0.9629629629629629, "length": 26}}, "n4659": {"so_17609609_17609653_0": {"section_id": 433, "quality": 0.625, "length": 5}, "so_17609609_17609683_2": {"section_id": 7602, "quality": 0.8571428571428571, "length": 6}, "so_17609609_17609644_0": {"section_id": 7603, "quality": 0.9629629629629629, "length": 26}}}, "17609681": {"ParentId": "17609609", "CommentCount": "6", "Body": "<p>The rule is quite simple: </p>\n<ol>\n<li>always balance a <code>new</code> with a <code>delete</code> </li>\n<li>always balance a <code>new[]</code> with a <code>delete[]</code></li>\n</ol>\n<p>otherwise you get <em>undefined behaviour</em>.</p>\n<p>There are <strong>no</strong> exceptions; even <code>new[1]</code> must be balanced with a <code>delete[]</code>, and <code>new[0]</code> must be deleted as the compiler can still reserve storage.</p>\n", "OwnerUserId": "2380830", "PostTypeId": "2", "Id": "17609681", "Score": "6", "CreationDate": "2013-07-12T07:27:41.193", "LastActivityDate": "2013-07-12T07:27:41.193"}});