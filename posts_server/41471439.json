post_cb({"41472929": {"ParentId": "41471439", "CommentCount": "5", "Body": "<p>Each of the examples contains declarations of two different classes, both with the name <code>A</code>.</p>\n<p>Let's distinguish between the classes by renaming one of them to <code>B</code>:</p>\n<pre><code>struct A{ int i = 10; };\n\nint main() {\n    struct B{ int i = 20; };\n    struct B;\n    struct B b;\n}\n</code></pre>\n<p>The above is semantically identical to your first example. The class <code>A</code> is never used.</p>\n<pre><code>struct A{ int i = 10; };\n\nint main() {\n    struct B;\n    struct B b;\n}\n</code></pre>\n<p>This is semantically identical to your second example. You are trying to create an object of an incomplete type, the forward-declared class <code>B</code>.</p>\n<p>Renaming <code>B</code> back to <code>A</code> doesn't change anything because then the declaration of <code>A</code> in <code>main</code> shadows the declaration of the other <code>A</code> at global scope.</p>\n<p><strong>[basic.lookup.elab]/2</strong></p>\n<blockquote>\n<p id=\"so_41471439_41472929_0\">If the <em>elaborated-type-specifier</em> has no <em>nested-name-specifier</em>, and [...] if the <em>elaborated-type-specifier</em> appears in a declaration with the form:</p>\n<blockquote>\n<p id=\"so_41471439_41472929_3\"><em><code>class-key</code></em> <em><code>attribute-specifier-seq</code><sub>opt</sub></em> <em><code>identifier</code></em> <code>;</code></p>\n</blockquote>\n<p id=\"so_41471439_41472929_2\">the <em>elaborated-type-specifier</em> is a declaration that introduces the <em>class-name</em> as described in [basic.scope.pdecl].</p>\n</blockquote>\n<p>So <code>struct A;</code> is a <strong>declaration</strong> that <strong>introduces</strong> the class name in the scope of the declaration. Under no circumstances can it refer to a class declared in an outer scope.</p>\n<p><strong>[basic.scope.pdecl]/7</strong></p>\n<blockquote>\n<p id=\"so_41471439_41472929_4\">[ <em>Note:</em> Other forms of <em>elaborated-type-specifier</em> do not declare a new name [...] \u2014 <em>end note</em> ]</p>\n</blockquote>\n<p>By implication, this form of <em>elaborated-type-specifier</em> declares a new name.</p>\n", "OwnerUserId": "1639256", "PostTypeId": "2", "Id": "41472929", "Score": "66", "CreationDate": "2017-01-04T20:45:37.813", "LastActivityDate": "2017-01-04T20:45:37.813"}, "41471490": {"ParentId": "41471439", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>In the second example the line <code>struct A;</code> is a forward declaration for a struct called A in the main function's scope. This struct  will be preferred to the global <code>struct A</code>. The next line defines a variable called <code>a</code> of type <code>struct A</code>. Since a <code>struct A</code> was declared in the main function's scope, that's where the compiler will search for it's definition there. It fails to find one (it's commented out). The first example compiles because there is definition in the same scope. The following example will compile however because it specified that <code>A</code> is in the global namespace :</p>\n<pre><code>struct A{ int i = 10; };\n\nint main() {\n//    struct A{ int i = 20; };\n    struct A;\n    struct ::A a;\n}\n</code></pre>\n", "OwnerUserId": "7359094", "LastEditorUserId": "7359094", "LastEditDate": "2017-01-04T20:04:12.697", "Id": "41471490", "Score": "44", "CreationDate": "2017-01-04T19:08:46.317", "LastActivityDate": "2017-01-04T20:04:12.697"}, "41481828": {"ParentId": "41471439", "CommentCount": "6", "Body": "<p>It doesn't compile because it can't find a definition for A.</p>\n<pre><code>int main() {\n//    struct A{ int i = 20; };\n      struct A;\n      struct A a;\n}\n</code></pre>\n<p>The code above is equal to your first example, as the global A is shadowed by the local A. In the second example A doesn't have a definition. It's just a prototype. Prototypes are supposed to be placed before a piece of code that needs a definition when the definition is placed AFTER the code which needs it.\nIf the compliler cannot find that definition it will fail because it doesn't know what A is supposed to be (the global definition is shadowed by the local prototype, which causes it to be ignored).</p>\n", "OwnerUserId": "6244076", "PostTypeId": "2", "Id": "41481828", "Score": "5", "CreationDate": "2017-01-05T09:53:15.443", "LastActivityDate": "2017-01-05T09:53:15.443"}, "41471439": {"CommentCount": "8", "AcceptedAnswerId": "41472929", "PostTypeId": "1", "LastEditorUserId": "963864", "CreationDate": "2017-01-04T19:05:28.327", "LastActivityDate": "2017-01-25T18:45:03.493", "LastEditDate": "2017-01-25T18:45:03.493", "ViewCount": "4104", "FavoriteCount": "2", "Title": "The first snippet below compiles, but the second doesn't. Why?", "Id": "41471439", "Score": "46", "Body": "<p>The snippet below compiles (<a href=\"http://coliru.stacked-crooked.com/a/ae861a1f3121da33\">demo</a>):</p>\n<pre><code>struct A{ int i = 10; };\n\nint main() {\n    struct A{ int i = 20; };\n    struct A;\n    struct A a;\n}\n</code></pre>\n<p>But this doesn't:</p>\n<pre><code>struct A{ int i = 10; };\n\nint main() {\n//    struct A{ int i = 20; };\n    struct A;\n    struct A a;\n}\n</code></pre>\n<p>I can see that the answer is probably given by these paragraphs in the Standard:</p>\n<p><a href=\"http://eel.is/c++draft/basic.lookup.elab#2\">[basic.lookup.elab]/2</a> and <a href=\"http://eel.is/c++draft/basic.scope.pdecl#7\">[basic.scope.pdecl]/7</a>.</p>\n<p>But I really don't know how to deduce the different behaviors shown above from these two paragraphs.</p>\n<p>Note that in the first example the <code>struct A</code> is <strong>not</strong> first declared in the <em>elaborated-type-specifier</em> <code>struct A;</code>, but in the definition of <code>struct A</code> in <code>main()</code>.</p>\n<p>In the second example, the <code>struct A</code> is also <strong>not</strong> first declared in the <em>elaborated-type-specifier</em> <code>struct A;</code>, but in the definition of <code>struct A</code>in global scope.</p>\n", "Tags": "<c++><language-lawyer><declaration><definition><name-lookup>", "OwnerUserId": "4463557", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_41471439_41472929_4": {"section_id": 7055, "quality": 0.6666666666666666, "length": 6}, "so_41471439_41472929_2": {"section_id": 7124, "quality": 0.8333333333333334, "length": 5}, "so_41471439_41472929_0": {"section_id": 7124, "quality": 1.0, "length": 6}}, "n3337": {"so_41471439_41472929_4": {"section_id": 6799, "quality": 0.6666666666666666, "length": 6}, "so_41471439_41472929_2": {"section_id": 6868, "quality": 0.8333333333333334, "length": 5}, "so_41471439_41472929_0": {"section_id": 6868, "quality": 1.0, "length": 6}}, "n4659": {"so_41471439_41472929_4": {"section_id": 8552, "quality": 0.6666666666666666, "length": 6}, "so_41471439_41472929_2": {"section_id": 8625, "quality": 0.8333333333333334, "length": 5}, "so_41471439_41472929_0": {"section_id": 8625, "quality": 1.0, "length": 6}}}});