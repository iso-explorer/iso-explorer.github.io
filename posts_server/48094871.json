post_cb({"bq_ids": {"n4140": {"so_48094871_48095248_1": {"length": 18, "quality": 0.9473684210526315, "section_id": 5846}, "so_48094871_48095248_0": {"length": 11, "quality": 1.0, "section_id": 366}}, "n3337": {"so_48094871_48095248_1": {"length": 18, "quality": 0.9473684210526315, "section_id": 5616}}, "n4659": {"so_48094871_48095248_1": {"length": 18, "quality": 0.9473684210526315, "section_id": 7325}, "so_48094871_48095248_0": {"length": 11, "quality": 1.0, "section_id": 378}}}, "48095248": {"Id": "48095248", "PostTypeId": "2", "Body": "<p>You cannot. A constructor's <em>id-expression</em>, i.e. the name of the constructor in a class definition is according to <a href=\"http://eel.is/c++draft/class.ctor#1.1\" rel=\"nofollow noreferrer\">[class.ctor]p1</a> (emphasis mine):</p>\n<blockquote id=\"so_48094871_48095248_0\">\n<ul>\n<li>in a <em>member-declaration</em> that belongs to the <em>member-specification</em> of a class but is not a friend declaration, <strong>the <em>id-expression</em> is the injected-class-name of the immediately-enclosing class</strong>;</li>\n</ul>\n</blockquote>\n<p>And what is an injected-class-name? According to <a href=\"http://eel.is/c++draft/class#2\" rel=\"nofollow noreferrer\">[class]p2</a></p>\n<blockquote>\n<p id=\"so_48094871_48095248_1\">A <em>class-name</em> is inserted into the scope in which it is declared immediately after the <em>class-name</em> is seen. <strong>The <em>class-name</em> is also inserted into the scope of the class itself; this is known as the injected-class-name</strong>. [...]</p>\n</blockquote>\n<p>And so the injected-class-name is the name of the class itself, and cannot be an alias.</p>\n<p>This is further reinforced by this sentence in <a href=\"http://eel.is/c++draft/class.ctor#1.sentence-4\" rel=\"nofollow noreferrer\">[class.ctor]p1</a>:</p>\n<blockquote>\n<p id=\"so_48094871_48095248_2\">The <em>class-name</em> shall not be a <em>typedef-name</em>.</p>\n</blockquote>\n<p>Consider renaming the class if you don't even want to write a constructor because the name is too convoluted.</p>\n", "LastActivityDate": "2018-01-04T12:21:04.350", "Score": "2", "CreationDate": "2018-01-04T12:21:04.350", "ParentId": "48094871", "CommentCount": "2", "OwnerUserId": "3980929"}, "48094871": {"ViewCount": "46", "Body": "<p>How can I create an alias for a lengthy class name inside the definition of this class? I don't want it to be accessible outside the class definition. I can't get it to work with either <code>typedef</code> or <code>using</code>.</p>\n<p>It's a class template in my case.</p>\n<pre><code>template&lt;typename T&gt;\nclass detailed_class_name{\n\ntypedef detailed_class_name&lt;T&gt; foo; // either one \nusing foo = detailed_class_name&lt;T&gt;; // of these \n\npublic:\n    foo(); // Error: ISO C++ forbids declaration of 'foo' with no type. \n};\n</code></pre>\n<p>Any ideas?</p>\n", "AcceptedAnswerId": "48095248", "Title": "How to abbreviate class name inside its own definition?", "CreationDate": "2018-01-04T12:02:24.520", "LastActivityDate": "2018-01-04T12:22:25.007", "CommentCount": "3", "LastEditDate": "2018-01-04T12:22:25.007", "PostTypeId": "1", "LastEditorUserId": "3980929", "Id": "48094871", "Score": "1", "OwnerUserId": "5724813", "Tags": "<c++><class><typedef><using>", "AnswerCount": "1"}});