post_cb({"bq_ids": {"n4140": {"so_5787466_5787490_0": {"length": 7, "quality": 0.7777777777777778, "section_id": 7136}}, "n3337": {"so_5787466_5787490_0": {"length": 9, "quality": 1.0, "section_id": 5191}}, "n4659": {"so_5787466_5787490_0": {"length": 6, "quality": 0.6666666666666666, "section_id": 8640}}}, "5787535": {"Id": "5787535", "PostTypeId": "2", "Body": "<p>Every CPP file that includes defs.h will have its own instance of the const in memory. If you want to have only one instance in memory you have to declare it once in a cpp file like you did it:</p>\n<p><code>\nconst UINT UNIQUE_MESSAGE = \n    RegisterWindowMessage(_T(\"UNIQUE_MESSAGE-{E5476FDB-3E7E-4113-8132-1D87709BC46C}\"));\n</code></p>\n<p>In the def.h you have to reference the const as an external:</p>\n<p><code>\nextern const UINT UNIQUE_MESSAGE;\n</code></p>\n", "LastActivityDate": "2011-04-26T08:03:03.393", "CommentCount": "0", "CreationDate": "2011-04-26T08:03:03.393", "ParentId": "5787466", "Score": "1", "OwnerUserId": "111069"}, "5787490": {"Id": "5787490", "PostTypeId": "2", "Body": "<p>In C++, <strong>namespace level</strong> <code>const</code> are implicitly <code>static</code> (<a href=\"https://stackoverflow.com/questions/177437/const-static/178259#178259\">i.e it has internal linkage</a>), unless you write <code>extern const</code>. So both of your syntax is basically same.</p>\n<p>\u00a77.1.1/6 says,</p>\n<blockquote>\n<p id=\"so_5787466_5787490_0\">Objects declared const and not explicitly declared extern have internal linkage.</p>\n</blockquote>\n<p>So I would suggest this: (with minimal consideration, like excluding <a href=\"http://www.parashift.com/c++-faq-lite/ctors.html#faq-10.14\" rel=\"nofollow noreferrer\">static initialization order fiasco</a> and many other issues with <code>static</code> and global variables)</p>\n<pre><code>//in defs.h:\nextern const UINT UNIQUE_MESSAGE;\n\n//defs.cpp\nconst UINT UNIQUE_MESSAGE =  RegisterWindowMessage(_T(\"whatever\"));\n</code></pre>\n", "LastEditorUserId": "-1", "LastActivityDate": "2011-04-26T08:51:36.200", "Score": "8", "CreationDate": "2011-04-26T07:56:38.083", "ParentId": "5787466", "CommentCount": "14", "OwnerUserId": "415784", "LastEditDate": "2017-05-23T12:13:17.870"}, "5787466": {"ViewCount": "223", "Body": "<p>I have a global unique value, which I wish to use it across within a exe and different DLLs.</p>\n<p>For any project which wish to use it, they may just include <code>defs.h</code></p>\n<p>I was wondering, should I declare it as</p>\n<pre><code>// defs.h\nconst UINT UNIQUE_MESSAGE = \n    RegisterWindowMessage(_T(\"UNIQUE_MESSAGE-{E5476FDB-3E7E-4113-8132-1D87709BC46C}\"));\n</code></pre>\n<hr>\n<p>OR</p>\n<pre><code>// defs.h\nconst static UINT UNIQUE_MESSAGE = \n    RegisterWindowMessage(_T(\"UNIQUE_MESSAGE-{E5476FDB-3E7E-4113-8132-1D87709BC46C}\"));\n</code></pre>\n<hr>\n<p>Currently, I do not find any different from code consumer point of view. Is there any catch behind? Should I use <code>static</code> or not?</p>\n</hr></hr>", "AcceptedAnswerId": "5787490", "Title": "Should I be using static in this case", "CreationDate": "2011-04-26T07:52:22.010", "Id": "5787466", "CommentCount": "1", "PostTypeId": "1", "LastActivityDate": "2011-04-26T08:51:36.200", "Score": "2", "OwnerUserId": "72437", "Tags": "<c++><windows>", "AnswerCount": "3"}, "5787691": {"Id": "5787691", "PostTypeId": "2", "Body": "<p>If the example you give is correct then I would be concerned with the fact that your header file re-declares and initializes this value for each file it is included in. If declared in more than one file without namespaces you will end up with multiple declarations of the same symbol. </p>\n<p>Furthermore even if this was just a declaration and the implementation was in a separate source file there are many noted problems with static globals including the initialization order of non-local static globals (initializer of one global in one file depending on another global in a separate file being initialized \u2013 initialization order of globals in separate files is non-deterministic).  A more sane approach (explained by Scott Meyers in Effective C++) might be to use:</p>\n<p><code><br/>\ndefs.h:<br/>const UINT getUniqueMessage();\n<br/><br/>\ndefs.c:<br/>\nconst UINT getUniqueMessage()<br/>\n{<br/>\nstatic UINT UNIQUE_MESSAGE = RegisterWindowMessage(_T(\"UNIQUE_MESSAGE-{E5476FDB-3E7E-4113-8132-1D87709BC46C}\"));  // initialized once first time called<br/>\nreturn UNIQUE_MESSAGE;<br/>\n}\n</code></p>\n<p>Now getUniqueMessage() can be called anywhere including during the initialization of other globals without fear of using something that may not be initialized yet.</p>\n", "LastEditorUserId": "331262", "LastActivityDate": "2011-04-26T08:28:41.413", "Score": "0", "CreationDate": "2011-04-26T08:20:42.297", "ParentId": "5787466", "CommentCount": "4", "OwnerUserId": "331262", "LastEditDate": "2011-04-26T08:28:41.413"}});