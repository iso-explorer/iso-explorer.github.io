post_cb({"bq_ids": {"n4140": {"so_34649138_34649138_0": {"length": 14, "quality": 0.6666666666666666, "section_id": 5909}}, "n3337": {"so_34649138_34649138_0": {"length": 14, "quality": 0.6666666666666666, "section_id": 5681}}, "n4659": {"so_34649138_34649138_0": {"length": 14, "quality": 0.6666666666666666, "section_id": 7391}}}, "34649138": {"ViewCount": "583", "Body": "<p>I read in the below link that unnamed(anonymous) class should not have static data memebers in it. Could anyone please let me know the reason for it?</p>\n<p><a href=\"https://www-01.ibm.com/support/knowledgecenter/SSLTBW_2.1.0/com.ibm.zos.v2r1.cbclx01/cplr038.htm\" rel=\"nofollow\">https://www-01.ibm.com/support/knowledgecenter/SSLTBW_2.1.0/com.ibm.zos.v2r1.cbclx01/cplr038.htm</a>\nsays the below..</p>\n<blockquote>\n<p id=\"so_34649138_34649138_0\">You can only have one definition of a static member in a program.\n  Unnamed classes, classes contained within unnamed classes, and local\n  classes cannot have static data members.</p>\n</blockquote>\n", "AcceptedAnswerId": "34649236", "Title": "Static data member in an unnamed class C++", "CreationDate": "2016-01-07T07:01:58.937", "Id": "34649138", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2016-01-07T07:52:06.627", "Score": "3", "OwnerUserId": "2451120", "Tags": "<c++>", "AnswerCount": "2"}, "34649236": {"Id": "34649236", "PostTypeId": "2", "Body": "<p>All <code>static</code> member data, if they are ODR-used, must be defined outside the class/struct. </p>\n<pre><code>struct Foo\n{\n    static int d;\n};\n\nint Foo::d = 0;\n</code></pre>\n<p>If the class/struct is unnamed, there is no way to define the member outside the class.</p>\n<pre><code>int ::d = 0;\n</code></pre>\n<p>cannot be used to define the static member of an unnamed class.</p>\n", "LastActivityDate": "2016-01-07T07:08:51.387", "CommentCount": "0", "CreationDate": "2016-01-07T07:08:51.387", "ParentId": "34649138", "Score": "8", "OwnerUserId": "434551"}, "34649524": {"Id": "34649524", "PostTypeId": "2", "Body": "<p>Are you sure that the standard actually forbids this?</p>\n<p>As mentioned the problem arises as you need to have an actual definition of the static member. The language provides for no method to define it. There is no other problems in referring to it as we can do it from within the <code>struct</code> or via an instance of it.</p>\n<p>However GCC for example will accept the following:</p>\n<pre><code>static struct {\n    static int j;\n} a;\n\nint main() {\n    return a.j; // Here we actually refers to the static variable\n}\n</code></pre>\n<p>but it can't be linked as <code>a.j</code> refers to an undefined symbol (<code>._0::j</code>), but there's a way to get around this. By defining it in assembler or by using compiler extensions you could. For example adding the line</p>\n<pre><code>int j asm(\"_ZN3._01jE\") = 42;\n</code></pre>\n<p>Will make it work. <code>_ZN3._01jE</code> is the real mangled name of the static variable in this case, neither the mangled or unmangled name can be used directly as a identifier in standard C++ (but it can via GCC extension or assembler).</p>\n<p>As you must probably realize this would only work with specific compilers. Other compilers would mangle the name in other ways (or even do other things that may make the trick not work at all).</p>\n<p>You should really question why you would like to use this trick. If you can do the work using standard methods you should most probably chose that. For example you could reduce the visibility by using anonymous <code>namespace</code> instead for example:</p>\n<pre><code>namespace {\n    static struct Fubar {\n         static int j;\n    } a;\n\n    Fubar::a = 0;\n}\n</code></pre>\n<p>Now <code>Fubar</code> is not really anonymous, but it will at least be confined to the translation unit.</p>\n", "LastEditorUserId": "4498329", "LastActivityDate": "2016-01-07T07:52:06.627", "Score": "1", "CreationDate": "2016-01-07T07:27:41.990", "ParentId": "34649138", "CommentCount": "12", "OwnerUserId": "4498329", "LastEditDate": "2016-01-07T07:52:06.627"}});