post_cb({"27521145": {"ViewCount": "179", "Body": "<p>I have this code for MS windows:</p>\n<pre><code>#include &lt;windows.h&gt;\n#include &lt;Shellapi.h&gt;\n#include &lt;tchar.h&gt;\n#include &lt;string&gt;\n\nvoid foo()\n{\n    SHELLEXECUTEINFO shExInfo = {0};\n}\n</code></pre>\n<p>According to this answer <a href=\"https://stackoverflow.com/questions/88957/what-does-0-mean-in-c\">What Does {0} Mean in C++?</a></p>\n<blockquote>\n<p id=\"so_27521145_27521145_0\">What's happening here is called aggregate initialization. Here is the\n  (abbreviated) definition of an aggregate from section 8.5.1 of the ISO\n  spec:</p>\n<p id=\"so_27521145_27521145_1\">An aggregate is an array or a class with no user-declared\n  constructors, no private or protected non-static data members, no base\n  classes, and no virtual functions.</p>\n</blockquote>\n<p>This code compiles ok however on MinGW 4.9 it throws:</p>\n<pre><code>warning: missing initializer for member '_SHELLEXECUTEINFOW::lpParameters' [-Wmissing-field-initializers]\n</code></pre>\n<p>for every single part of SHELLEXECUTEINFO struct</p>\n<p>Why is that? Did something change in specs? Note: this code is c++11</p>\n", "AcceptedAnswerId": "27521231", "Title": "Why MinGW 4.9 shows missing initializer warning for code that is correct according to standards", "CreationDate": "2014-12-17T08:26:07.683", "Id": "27521145", "CommentCount": "1", "LastEditDate": "2017-05-23T10:26:08.297", "PostTypeId": "1", "LastEditorUserId": "-1", "LastActivityDate": "2014-12-17T08:36:57.127", "Score": "2", "OwnerUserId": "1514983", "Tags": "<c++><c++11>", "AnswerCount": "2"}, "27521224": {"Id": "27521224", "PostTypeId": "2", "Body": "<p>Nothing changes in specs, it is just a warning that, if requested, will remind you to specify explicit initializers for all fields of the aggregate.</p>\n<p>Meanfile, the initializer you wrote is perfectly legal form the language point of view.</p>\n<p>Per specification of <code>-Wmissing-field-initializers</code>, you can shorten your initializer to <code>= {}</code>. The end effect will be the same, but without warnings. I.e. this is the way to tell the compiler that you do want to rely on implicit value-initialization of fields even in presence of <code>-Wmissing-field-initializers</code>.</p>\n<p>But a better idea would be to check why you have <code>-Wmissing-field-initializers</code> enabled. This is one of those \"extreme\" warning options that complains about many very useful programming idioms. <code>-Wmissing-field-initializers</code> is not even included into <code>-Wall</code>. It is a part of <code>-Wextra</code>.</p>\n", "LastEditorUserId": "187690", "LastActivityDate": "2014-12-17T08:36:57.127", "Score": "2", "CreationDate": "2014-12-17T08:31:43.327", "ParentId": "27521145", "CommentCount": "0", "OwnerUserId": "187690", "LastEditDate": "2014-12-17T08:36:57.127"}, "bq_ids": {"n4140": {"so_27521145_27521145_1": {"length": 13, "quality": 0.9285714285714286, "section_id": 3298}}, "n3337": {"so_27521145_27521145_1": {"length": 13, "quality": 0.9285714285714286, "section_id": 3168}}, "n4659": {"so_27521145_27521145_1": {"length": 9, "quality": 0.6428571428571429, "section_id": 4063}}}, "27521231": {"Id": "27521231", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_27521145_27521231_0\">Why is that?</p>\n</blockquote>\n<p>Because you've asked the compiler to warn about cases like this, either by specifying this particular error with <code>-Wmissing-field-initializers</code>, or a larger set of warnings with <code>-Wextra</code> or similar.</p>\n<p>Usually, warnings are for code that's valid, but could indicate an error. In this case, it could indicate that you forgot to initialise something that needs initialisation, or just that you want the default behaviour.</p>\n<p>If you don't like this warning, and don't feel like changing the code to explicitly initialise all the fields, then you can disable it with <code>-Wno-missing-field-initializers</code>.</p>\n<blockquote>\n<p id=\"so_27521145_27521231_1\">Did something change in specs?</p>\n</blockquote>\n<p>No, it's still valid to only provide initialisers for some fields of an aggregate. That's why it's only a warning, not an error.</p>\n<blockquote>\n<p id=\"so_27521145_27521231_2\">Note: this code is c++11</p>\n</blockquote>\n<p>Then I'd change it to <code>SHELLEXECUTEINFO shExInfo {};</code> to specify value-initialisation. This will zero-initialise all the fields, without triggering any warnings. In older dialects, <code>= {}</code> should have the same effect.</p>\n", "LastActivityDate": "2014-12-17T08:32:06.560", "CommentCount": "2", "CreationDate": "2014-12-17T08:32:06.560", "ParentId": "27521145", "Score": "5", "OwnerUserId": "204847"}});