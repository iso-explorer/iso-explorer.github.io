post_cb({"bq_ids": {"n4140": {"so_16719234_16719290_1": {"length": 6, "quality": 0.8571428571428571, "section_id": 5418}, "so_16719234_16719290_0": {"length": 26, "quality": 1.0, "section_id": 7149}, "so_16719234_16719234_0": {"length": 18, "quality": 0.8181818181818182, "section_id": 7147}}, "n3337": {"so_16719234_16719290_1": {"length": 6, "quality": 0.8571428571428571, "section_id": 5213}, "so_16719234_16719290_0": {"length": 26, "quality": 1.0, "section_id": 6893}, "so_16719234_16719234_0": {"length": 18, "quality": 0.8181818181818182, "section_id": 6891}}, "n4659": {"so_16719234_16719290_1": {"length": 4, "quality": 0.5714285714285714, "section_id": 6839}, "so_16719234_16719290_0": {"length": 21, "quality": 0.8076923076923077, "section_id": 8650}, "so_16719234_16719234_0": {"length": 18, "quality": 0.8181818181818182, "section_id": 8648}}}, "16719290": {"Id": "16719290", "PostTypeId": "2", "Body": "<p><code>main()</code> is the only value-returning function which is allowed to have the <code>return</code> statement omitted. Flowing off the end of <code>main()</code> without returning anything is equivalent to returning <code>0</code> (while for other functions it is undefined behavior, see 6.6.3/2). </p>\n<p>Per paragraph 3.6.1/5 of the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_16719234_16719290_0\">A <code>return</code> statement in <code>main</code> has the effect of leaving the <code>main</code> function (destroying any objects with automatic\n  storage duration) and calling <code>std::exit</code> with the return value as the argument. If control reaches the end\n  of <code>main</code> without encountering a <code>return</code> statement, the effect is that of executing</p>\n<pre><code>return 0;\n</code></pre>\n</blockquote>\n<p>Concerning the <code>inline</code> message, <code>constexpr</code> functions are implicitly <code>inline</code>. Per paragraph 7.1.5/2 of the C++11 Standard (<a href=\"https://stackoverflow.com/questions/16719234/gcc-constexpr-intepreted-as-inline/16719290?noredirect=1#comment24071345_16719290\">courtesy of Luc Danton</a>):</p>\n<blockquote>\n<p id=\"so_16719234_16719290_1\">[...]. <code>constexpr</code> functions and <code>constexpr</code> constructors are implicitly\n  <code>inline</code> (7.1.2).</p>\n</blockquote>\n", "LastEditorUserId": "-1", "LastActivityDate": "2013-05-23T16:37:28.107", "Score": "9", "CreationDate": "2013-05-23T16:31:49.093", "ParentId": "16719234", "CommentCount": "4", "LastEditDate": "2017-05-23T10:25:52.320", "OwnerUserId": "1932150"}, "16719234": {"ViewCount": "143", "Body": "<p>I have this very simple code:</p>\n<pre><code> constexpr int main()\n {\n    return 0;\n}\n</code></pre>\n<p>I understand from C++11 standard N3485 that it is illegal:</p>\n<blockquote>\n<p id=\"so_16719234_16719234_0\">The function main shall not be used within a program. The linkage (3.5) of main is implementation-defined.\n  <strong>A program that defines main as</strong> deleted or that declares main to be inline, static, or <strong>constexpr is illformed.</strong>\n  The name main is not otherwise reserved.</p>\n</blockquote>\n<p>When I run it using gcc 4.7.2. it outputs the following error:</p>\n<pre><code>prog.cpp:1:20: error: cannot declare \u2018::main\u2019 to be inline\n</code></pre>\n<p>Meanwhile, if I remove the <code>return 0</code> from the function body, it reports the same error without even giving a warning about missing return statement from <code>main</code>. </p>\n<p>Is this a bug of gcc 4.7.2? Why <code>constexpr</code> is reported as <code>inline</code>? Does the second phenomenon mean that it is OK to not put return statement in <code>main</code> or is it by default <code>return 0</code> even I do not put return statement into it (I know this is bad practice)?</p>\n<p>Thank you.</p>\n", "AcceptedAnswerId": "16719290", "Title": "gcc constexpr intepreted as inline?", "CreationDate": "2013-05-23T16:29:20.210", "Id": "16719234", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2013-05-23T16:37:28.107", "Score": "2", "OwnerUserId": "1760345", "Tags": "<c++><c++11>", "AnswerCount": "1"}});