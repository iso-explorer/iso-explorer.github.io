post_cb({"32851928": {"ParentId": "32851184", "CommentCount": "0", "CreationDate": "2015-09-29T19:07:02.487", "OwnerUserId": "3807729", "PostTypeId": "2", "Id": "32851928", "Score": "7", "Body": "<p>The reason I believe this works is that the <em>compiler</em> does not know it is compiling the <code>main()</code> function so it compiles a global integer with assignment side-effects.</p>\n<p>The <em>object format</em> that this <em>translation-unit</em> is compiled into is not capable of differentiating between a <em>function symbol</em> and a <em>variable symbol</em>.</p>\n<p>So the <em>linker</em> happily links to the (variable) <em>main</em> symbol and treats it like a function call. But not until the <em>runtime system</em> has run the global variable initialization code.</p>\n<p>When I ran the sample it printed out but then it caused a <em>seg-fault</em>. I assume that's when the <em>runtime system</em> tried to execute an <em>int variable</em> as if it were a <em>function</em>.</p>\n", "LastActivityDate": "2015-09-29T19:07:02.487"}, "32852517": {"ParentId": "32851184", "PostTypeId": "2", "CommentCount": "2", "CreationDate": "2015-09-29T19:45:49.027", "Score": "9", "LastEditorUserId": "2020827", "LastEditDate": "2015-10-07T22:47:40.157", "Id": "32852517", "OwnerUserId": "2020827", "Body": "<p>gcc 4.8.1 generates the following x86 assembly:</p>\n<pre><code>.LC0:\n    .string \"C++ is excellent!\\n\"\n    subq    $8, %rsp    #,\n    movl    std::__ioinit, %edi #,\n    call    std::ios_base::Init::Init() #\n    movl    $__dso_handle, %edx #,\n    movl    std::__ioinit, %esi #,\n    movl    std::ios_base::Init::~Init(), %edi  #,\n    call    __cxa_atexit    #\n    movl    $.LC0, %esi #,\n    movl    std::cout, %edi #,\n    call    std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::operator&lt;&lt; &lt;std::char_traits&lt;char&gt; &gt;(std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, char const*)   #\n    movl    $195, main(%rip)    #, main\n    addq    $8, %rsp    #,\n    ret\nmain:\n    .zero   4\n</code></pre>\n<p>Note that <code>cout</code> is called during initialization, not in the <code>main</code> function!</p>\n<p><code>.zero   4</code> declares 4 (0-initialized) bytes starting at location <code>main</code>,\nwhere <code>main</code> is the name of the <em>variable[!]</em>.</p>\n<p>The <code>main</code> symbol is interpreted as the start of the program.\nThe behavior depends on the platform.</p>\n", "LastActivityDate": "2015-10-07T22:47:40.157"}, "32851400": {"ParentId": "32851184", "CommentCount": "4", "CreationDate": "2015-09-29T18:35:47.557", "OwnerUserId": "434551", "PostTypeId": "2", "Id": "32851400", "Score": "8", "Body": "<p>That is an ill-formed program. It crashes on my test environment, cygwin64/g++ 4.9.3.</p>\n<p>From the standard:</p>\n<blockquote>\n<p id=\"so_32851184_32851400_0\"><strong>3.6.1 Main function</strong>  [basic.start.main]</p>\n<p id=\"so_32851184_32851400_1\">1 A program shall contain a global function called main, which is the designated start of the program.</p>\n</blockquote>\n", "LastActivityDate": "2015-09-29T18:35:47.557"}, "32851348": {"ParentId": "32851184", "PostTypeId": "2", "CommentCount": "2", "CreationDate": "2015-09-29T18:32:51.663", "Score": "19", "LastEditorUserId": "2411320", "LastEditDate": "2015-09-29T18:48:25.357", "Id": "32851348", "OwnerUserId": "251738", "Body": "<p>From 3.6.1/1:</p>\n<blockquote>\n<p id=\"so_32851184_32851348_0\">A program shall contain a global function called main, which is the\n  designated start of the program. It is implementation defined whether a\n  program in a freestanding environment is required to define a main\n  function.</p>\n</blockquote>\n<p>From this it looks like g++ happens to allow a program (presumably as the \"freestanding\" clause) without a main function.</p>\n<p>Then from 3.6.1/3:</p>\n<blockquote>\n<p id=\"so_32851184_32851348_1\">The function main shall not be used (3.2) within a program. The\n  linkage (3.5) of main is implementation defined. A program that\n  declares main to be inline or static is illformed. The name main is\n  not otherwise reserved.</p>\n</blockquote>\n<p>So here we learn that it's perfectly fine to have an integer variable named <code>main</code>.</p>\n<p>Finally if you're wondering why the output is printed, the initialization of the <code>int main</code> uses the comma operator to execute <code>cout</code> at static init and then provide an actual integral value to do the initialization.</p>\n", "LastActivityDate": "2015-09-29T18:48:25.357"}, "32851722": {"ParentId": "32851184", "PostTypeId": "2", "CommentCount": "20", "CreationDate": "2015-09-29T18:55:48.093", "Score": "79", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:02:41.457", "Id": "32851722", "OwnerUserId": "1708801", "Body": "<p>Before going into the meat of the question about what is going on, it is important to point out that program is ill-formed as per <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1886\" rel=\"nofollow noreferrer\">defect report 1886: Language linkage for main()</a>:</p>\n<blockquote>\n<p id=\"so_32851184_32851722_0\">[...] A program that declares a variable main at global scope or that declares the name main with C language linkage (in any namespace) is ill-formed. [...]</p>\n</blockquote>\n<p>The most recent versions of clang and gcc makes this an error and the program will not compile (<em><a href=\"http://melpon.org/wandbox/permlink/dVToSBdqCaalNFJJ\" rel=\"nofollow noreferrer\">see gcc live example</a></em>):</p>\n<pre><code>error: cannot declare '::main' to be a global variable\nint main = ( std::cout &lt;&lt; \"C++ is excellent!\\n\", 195 ); \n    ^\n</code></pre>\n<p>So why was there no diagnostic in older versions of gcc and clang? This defect report did not even have a proposed resolution until late 2014 and so this case was only very recently explicitly ill-formed, which requires a diagnostic.</p>\n<p>Prior to this, it seems like this would be undefined behavior since we are violating a <em>shall</em> requirement of the draft C++ standard from section <code>3.6.1</code> <em>[basic.start.main]</em>:</p>\n<blockquote>\n<p id=\"so_32851184_32851722_1\">A program shall contain a global function called main, which is the designated start of the program. [...]</p>\n</blockquote>\n<p>Undefined behavior is unpredictable and does not require a diagnostic. The inconsistency we see with reproducing the behavior is typical undefined behavior. </p>\n<p>So what is the code actually doing and why in some cases does it produce results? Let's see what we have:</p>\n<pre><code>declarator  \n|        initializer----------------------------------\n|        |                                           |\nv        v                                           v\nint main = ( std::cout &lt;&lt; \"C++ is excellent!\\n\", 195 ); \n    ^      ^                                   ^\n    |      |                                   |\n    |      |                                   comma operator\n    |      primary expression\nglobal variable of type int\n</code></pre>\n<p>We have <code>main</code> which is an <em>int</em> declared in the global namespace and is being initialized, the variable has static storage duration. It is implementation defined whether the initialization will take place before an attempt to call <code>main</code> is made but it appears gcc does do this before calling <code>main</code>. </p>\n<p>The code uses the <a href=\"https://stackoverflow.com/q/54142/1708801\">comma operator</a>, the left operand is a discarded value expression and is used here solely for the side effect of calling <code>std::cout</code>. The result of the comma operator is the right operand which in this case is the prvalue <code>195</code> which is assigned to the variable <code>main</code>.</p>\n<p>We can see <a href=\"https://stackoverflow.com/a/32852517/1708801\">sergej points out</a> the generated assembly  shows that <code>cout</code> is called during static initialization. Although the more interesting point for discussion <a href=\"http://goo.gl/dOmAkN\" rel=\"nofollow noreferrer\">see live godbolt session</a> would be this:</p>\n<pre><code>main:\n.zero   4\n</code></pre>\n<p>and the subsequent:</p>\n<pre><code>movl    $195, main(%rip)\n</code></pre>\n<p>The likely scenario is that the program jumps to the symbol <code>main</code> expecting valid code to be there and in <a href=\"http://melpon.org/wandbox/permlink/VBSZKXpBDzD8PAXD\" rel=\"nofollow noreferrer\">some cases will seg-fault</a>. So if that is the case we would expect storing valid machine code in the variable <code>main</code> could lead to <em>workable program</em>, assuming we are located in a segment that allows code execution. We can see <a href=\"http://www.ioccc.org/1984/mullender.c\" rel=\"nofollow noreferrer\">this 1984 IOCCC entry</a> does <a href=\"http://www.ioccc.org/1984/mullender.hint\" rel=\"nofollow noreferrer\">just that</a>.</p>\n<p>It appears we can get gcc to do this in C using (<em><a href=\"http://melpon.org/wandbox/permlink/Xvs9r8hdykAGWEGo\" rel=\"nofollow noreferrer\">see it live</a></em>):</p>\n<pre><code>const int main = 195 ;\n</code></pre>\n<p>It seg-faults if the variable <code>main</code> is not const presumably because it is not located in an executable location, Hat Tip to this <a href=\"https://codegolf.stackexchange.com/questions/23250/what-no-error/23397?newreg=3ae89d0062ee4a2380f59a72ea05fdd4#comment49316_23397\">comment here</a> which gave me this idea.</p>\n<p>Also see <a href=\"https://stackoverflow.com/a/33305685/1708801\">FUZxxl answer here</a> to a C specific version of this question.</p>\n", "LastActivityDate": "2015-11-30T17:22:34.853"}, "32968984": {"ParentId": "32851184", "CommentCount": "0", "CreationDate": "2015-10-06T11:39:03.473", "OwnerUserId": "5409531", "PostTypeId": "2", "Id": "32968984", "Score": "-1", "Body": "<p>You are doing tricky work here. As main( somehow) could declared to be integer. You used list operator to print message &amp; then assign 195 to it. As said by someone below, that it doesn't comfort with C++, is true. But as compiler didn't find any user defined name, main, it didn't complaint. Remember main is not system defined function, its user defined function &amp; thing from which program starts executing is Main Module, not main(), specifically. Again main() is called by startup function which is executed by loader intentionally. Then all of your variables are initialized, &amp; while initializing it output like that. That's it. Program without main() is ok, but not standard.</p>\n", "LastActivityDate": "2015-10-06T11:39:03.473"}, "32852193": {"ParentId": "32851184", "PostTypeId": "2", "CommentCount": "2", "CreationDate": "2015-09-29T19:23:56.867", "Score": "4", "LastEditorUserId": "1757805", "LastEditDate": "2015-10-01T16:58:17.123", "Id": "32852193", "OwnerUserId": "1757805", "Body": "<p>I've tried this on a Win7 64bit OS using VS2013 and it compiles correctly but when I try to build the application I get this message from the output window.</p>\n<pre><code>1&gt;------ Build started: Project: tempTest, Configuration: Debug Win32 ------\n1&gt;LINK : fatal error LNK1561: entry point must be defined\n========== Build: 0 succeeded, 1 failed, 0 up-to-date, 0 skipped ==========\n</code></pre>\n", "LastActivityDate": "2015-10-01T16:58:17.123"}, "bq_ids": {"n4140": {"so_32851184_32851348_1": {"section_id": 7147, "quality": 0.7368421052631579, "length": 14}, "so_32851184_32851722_0": {"section_id": 5522, "quality": 0.5833333333333334, "length": 7}, "so_32851184_32851722_1": {"section_id": 7145, "quality": 1.0, "length": 7}, "so_32851184_32851348_0": {"section_id": 7145, "quality": 0.875, "length": 14}, "so_32851184_32851400_1": {"section_id": 7145, "quality": 1.0, "length": 7}}, "n3337": {"so_32851184_32851348_1": {"section_id": 6891, "quality": 0.7368421052631579, "length": 14}, "so_32851184_32851722_0": {"section_id": 5308, "quality": 0.5833333333333334, "length": 7}, "so_32851184_32851722_1": {"section_id": 6889, "quality": 1.0, "length": 7}, "so_32851184_32851348_0": {"section_id": 6889, "quality": 0.875, "length": 14}, "so_32851184_32851400_1": {"section_id": 6889, "quality": 1.0, "length": 7}}, "n4659": {"so_32851184_32851348_1": {"section_id": 8648, "quality": 0.7368421052631579, "length": 14}, "so_32851184_32851400_1": {"section_id": 8646, "quality": 0.7142857142857143, "length": 5}, "so_32851184_32851722_1": {"section_id": 8646, "quality": 0.7142857142857143, "length": 5}, "so_32851184_32851348_0": {"section_id": 8646, "quality": 0.75, "length": 12}, "so_32851184_32851722_0": {"section_id": 8648, "quality": 1.0, "length": 12}}}, "32851184": {"CommentCount": "21", "AcceptedAnswerId": "32851722", "PostTypeId": "1", "LastEditorUserId": "1708801", "CreationDate": "2015-09-29T18:23:51.637", "LastActivityDate": "2015-11-30T17:22:34.853", "LastEditDate": "2015-10-01T17:47:24.323", "ViewCount": "7583", "FavoriteCount": "20", "Title": "How can a program with a global variable called main instead of a main function work?", "Id": "32851184", "Score": "89", "Body": "<p>Consider following program:</p>\n<pre><code>#include &lt;iostream&gt;\nint main = ( std::cout &lt;&lt; \"C++ is excellent!\\n\", 195 ); \n</code></pre>\n<p>Using g++ 4.8.1 (mingw64) on Windows 7 OS, the program compiles and runs fine, printing:</p>\n<blockquote>\n<p id=\"so_32851184_32851184_0\">C++ is excellent!</p>\n</blockquote>\n<p>to the console. <code>main</code> appears to be a global variable rather than a function; how can this program execute without the function <code>main()</code>? Does this code conform to the C++ standard? Is the behavior of the program is well defined? I have also used the <strong><code>-pedantic-errors</code></strong> option but the program still compiles and runs. </p>\n", "Tags": "<c++><main><language-lawyer>", "OwnerUserId": "3777958", "AnswerCount": "7"}});