post_cb({"bq_ids": {"n4140": {"so_36752678_36752874_0": {"length": 41, "quality": 0.9761904761904762, "section_id": 481}}, "n4659": {"so_36752678_36752874_0": {"length": 30, "quality": 0.7142857142857143, "section_id": 504}}}, "36752678": {"ViewCount": "517", "LastEditDate": "2017-05-23T11:45:21.053", "AcceptedAnswerId": "36752874", "Title": "clang, returning std::unique_ptr with type conversion", "CreationDate": "2016-04-20T18:53:36.060", "LastActivityDate": "2016-04-21T07:29:56.893", "CommentCount": "4", "Body": "<p>Here is my code:</p>\n<pre><code>#include &lt;memory&gt;\n\nstruct A{};\nstruct B: A {};\n\nstd::unique_ptr&lt;A&gt; test() \n{\n    auto p = std::make_unique&lt;B&gt;();\n\n    return p;\n}\n\nint main(int argc, char **argv)\n{\n    test();\n\n    return 0;\n}\n</code></pre>\n<p>It doesn't compile on clang with error:</p>\n<pre><code>main.cpp:11:12: error: no viable conversion from returned value of type 'unique_ptr&lt;B, default_delete&lt;B&gt;&gt;' to function return type 'unique_ptr&lt;A, default_delete&lt;A&gt;&gt;'\n</code></pre>\n<p>However, according to <a href=\"https://stackoverflow.com/questions/32742741/clang-error-with-stdunique-ptr\">this</a> (same situation) it should. \nDid I misunderstand something?</p>\n<p>My command line (clang ver 3.7):</p>\n<pre><code>clang++ -std=c++14 -O2 -Wall -pedantic -pthread main.cpp &amp;&amp; ./a.out\n</code></pre>\n", "PostTypeId": "1", "LastEditorUserId": "-1", "Id": "36752678", "Score": "3", "OwnerUserId": "1749713", "Tags": "<c++><clang><c++14>", "AnswerCount": "2"}, "36752772": {"Id": "36752772", "PostTypeId": "2", "Body": "<p>You need to <code>move</code> from the unique_ptr. Following code compiles on both CLang and gcc:</p>\n<pre><code>#include &lt;memory&gt;\n\nstruct A{};\nstruct B: A {};\n\nstd::unique_ptr&lt;A&gt; test() \n{\n    auto p = std::make_unique&lt;B&gt;();\n\n    return std::move(p);\n}\n</code></pre>\n", "Score": "3", "LastActivityDate": "2016-04-20T18:57:16.307", "CreationDate": "2016-04-20T18:57:16.307", "ParentId": "36752678", "CommentCount": "3", "OwnerUserId": "5245033"}, "36752874": {"Id": "36752874", "PostTypeId": "2", "LastEditDate": "2016-04-20T19:10:21.893", "CommentCount": "4", "LastEditorUserId": "2069064", "LastActivityDate": "2016-04-20T19:10:21.893", "CreationDate": "2016-04-20T19:02:12.047", "ParentId": "36752678", "Score": "6", "Body": "<p>This is a clang bug. From [class.copy]:</p>\n<blockquote>\n<p id=\"so_36752678_36752874_0\">When the criteria for elision of a copy/move operation are met, but not for an <em>exception-declaration</em>, and the\n  object to be copied is designated by an lvalue, <strong>or</strong> when the expression in a <code>return</code> statement is a (possibly\n  parenthesized) <em>id-expression</em> that names an object with automatic storage duration declared in the body or\n  <em>parameter-declaration-clause</em> of the innermost enclosing function or <em>lambda-expression</em>, overload resolution\n  to select the constructor for the copy is first performed <strong>as if the object were designated by an rvalue</strong>.</p>\n</blockquote>\n<p>The criteria for elision aren't met (because <code>p</code> doesn't have the same type as the return type of the function), but the code should still be valid since overload resolution should be done as if <code>p</code> were an rvalue.</p>\n<p>That said, you do want move elision to happen, so prefer to not use <code>auto</code> in this case:</p>\n<pre><code>std::unique_ptr&lt;A&gt; test() \n{\n    std::unique_ptr&lt;A&gt; p = std::unique_ptr&lt;B&gt;();\n    return p;\n}\n</code></pre>\n<p>clang accepts this code <em>and</em> move elision will happen. Win win. </p>\n", "OwnerUserId": "2069064"}});