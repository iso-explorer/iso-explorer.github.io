post_cb({"37618262": {"ParentId": "37617717", "CommentCount": "0", "Body": "<p>I have tested code in msvc13. This code works:</p>\n<pre><code>class A\n{\n  template &lt;typename T&gt;\n  static void funPrivate() {}\npublic:\n  template &lt;typename T&gt;\n  void fun(void (*f)() = funPrivate&lt;T&gt;) {}\n};\n</code></pre>\n", "OwnerUserId": "4444768", "PostTypeId": "2", "Id": "37618262", "Score": "0", "CreationDate": "2016-06-03T15:29:22.337", "LastActivityDate": "2016-06-03T15:29:22.337"}, "bq_ids": {"n4140": {"so_37617717_37618181_0": {"section_id": 6671, "quality": 0.9, "length": 27}, "so_37617717_37618181_1": {"section_id": 245, "quality": 0.9375, "length": 45}}, "n3337": {"so_37617717_37618181_0": {"section_id": 6426, "quality": 0.9, "length": 27}, "so_37617717_37618181_1": {"section_id": 237, "quality": 0.9375, "length": 45}}, "n4659": {"so_37617717_37618181_0": {"section_id": 8146, "quality": 0.9, "length": 27}, "so_37617717_37618181_1": {"section_id": 252, "quality": 0.9375, "length": 45}}}, "37618181": {"ParentId": "37617717", "CommentCount": "1", "Body": "<p>\u00a7 11</p>\n<blockquote>\n<p id=\"so_37617717_37618181_0\">8  The names in a default argument (8.3.6) are bound at the point of declaration, and access is checked at that\n  point rather than at any points of use of the default argument. Access checking for default arguments in\n  function templates and in member functions of class templates is performed as described in 14.7.1.</p>\n</blockquote>\n<p>\u00a7 14.7.1</p>\n<blockquote>\n<p id=\"so_37617717_37618181_1\">12 If a function template <code>f</code> is called in a way that requires a default argument to be used, the dependent names\n    are looked up, the semantics constraints are checked, and the instantiation of any template used in the default\n   argument is done as if the default argument had been an initializer used in a function template specialization\n  with the same scope, the same template parameters and the same access as that of the function template <code>f</code>\n  used at that point. This analysis is called <em>default argument instantiation</em>. The instantiated default argument\n  is then used as the argument of <code>f</code>.</p>\n</blockquote>\n<p>So, according to this, I would guess that gcc's interpretation is right.  <code>fun</code> has access to private members, so its default arguments should be considered in that same access. But I am reading between the lines that 14.7.1(12) applies to member templates, and not just function templates.  Also I may be misunderstanding that 14.7.1(12) means.</p>\n", "OwnerUserId": "1603365", "PostTypeId": "2", "Id": "37618181", "Score": "1", "CreationDate": "2016-06-03T15:25:17.127", "LastActivityDate": "2016-06-03T15:25:17.127"}, "37617717": {"CommentCount": "7", "ViewCount": "128", "PostTypeId": "1", "LastEditorUserId": "440119", "CreationDate": "2016-06-03T15:02:41.403", "LastActivityDate": "2016-06-03T15:29:22.337", "Title": "Can a private static member be used as a default argument to a member function of its class?", "AcceptedAnswerId": "37618181", "LastEditDate": "2016-06-03T15:08:25.020", "Id": "37617717", "Score": "5", "Body": "<p>Which one of the compilers is right ?</p>\n<pre><code>class A\n{\npublic:\n   template &lt;typename T&gt;\n   void fun(void (*f)() = funPrivate&lt;T&gt;) {}\nprivate:\n   template &lt;typename T&gt;\n   static void funPrivate() {}\n};\n\nint main(int argc, char** argv)\n{\n  A a;\n  a.fun&lt;int&gt;();\n  return 0;\n} \n</code></pre>\n<p>Compiles fine on: <strong>gcc version 4.8.5 (Ubuntu 4.8.5-2ubuntu1~14.04.1)</strong></p>\n<p>Results in a error on: <strong>clang version 3.4-1ubuntu3 (tags/RELEASE_34/final) (based on LLVM 3.4)</strong></p>\n<pre><code>    a.cpp:5:27: error: 'funPrivate' is a private member of 'A'\n   void fun(void (*f)() = funPrivate&lt;T&gt;) {}\n                          ^~~~~~~~~~~~~\n    a.cpp:14:3: note: in instantiation of default function argument expression for 'fun&lt;int&gt;' required here\n      a.fun&lt;int&gt;();\n      ^\n    a.cpp:8:16: note: declared private here\n       static void funPrivate() {}\n               ^\n1 error generated.\n</code></pre>\n", "Tags": "<c++><gcc><clang>", "OwnerUserId": "1650441", "AnswerCount": "2"}});