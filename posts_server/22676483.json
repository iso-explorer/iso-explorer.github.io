post_cb({"22676597": {"ParentId": "22676483", "CommentCount": "0", "Body": "<p>From \u00a7 23.2.4 Table 102 \u2014 Associative container requirements (in addition to container) </p>\n<p><code>emplace(args)</code></p>\n<blockquote>\n<p id=\"so_22676483_22676597_0\">Effects: Inserts a <code>value_type</code> object <code>t</code> constructed with <code>std::forward&lt;Args&gt;(args)...</code> if and only if there is no element in the container with key equivalent to the key of <code>t</code>.</p>\n</blockquote>\n", "OwnerUserId": "657267", "PostTypeId": "2", "Id": "22676597", "Score": "3", "CreationDate": "2014-03-27T01:31:46.327", "LastActivityDate": "2014-03-27T01:31:46.327"}, "22676664": {"ParentId": "22676483", "PostTypeId": "2", "CommentCount": "6", "Body": "<p>It's not supposed to construct the object at all, but it generally will anyway (certainly using <em>libstd++</em>); this is technically a bug, but more so in the standard than anything else.</p>\n<p>Fuller details can be found in a previous answer of mine to a very similar question:</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/a/20328676/560648\">https://stackoverflow.com/a/20328676/560648</a></li>\n</ul>\n", "OwnerUserId": "560648", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:07:31.643", "Id": "22676664", "Score": "2", "CreationDate": "2014-03-27T01:39:05.417", "LastActivityDate": "2014-03-27T09:36:47.203"}, "22676483": {"CommentCount": "4", "AcceptedAnswerId": "22676664", "CreationDate": "2014-03-27T01:20:04.923", "LastActivityDate": "2014-03-27T09:36:47.203", "PostTypeId": "1", "ViewCount": "161", "FavoriteCount": "1", "Title": "How does set::emplace handle objects that are already in a set?", "Id": "22676483", "Score": "2", "Body": "<p>I have a set of objects, and I want to use emplace to add objects to the set. If an equivalent object does not already exist in the set, set::emplace creates an object and puts it in the set. If the set already has an equivalent object, set::emplace does not add an object to the list. In this case, does it create the object and destroy it, create it and leak it, or not create it at all? Or will it do something else?</p>\n<p>C++ 11, gcc 4.7.0</p>\n", "Tags": "<c++><c++11><memory-leaks><set><emplace>", "OwnerUserId": "2421026", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_22676483_22676597_0": {"section_id": 744, "quality": 0.9166666666666666, "length": 11}}, "n3337": {"so_22676483_22676597_0": {"section_id": 733, "quality": 0.9166666666666666, "length": 11}}, "n4659": {"so_22676483_22676597_0": {"section_id": 802, "quality": 0.8333333333333334, "length": 10}}}});