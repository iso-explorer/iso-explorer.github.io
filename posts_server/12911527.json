post_cb({"12911527": {"ViewCount": "74", "Body": "<p>I have a class like this,</p>\n<pre><code>class CLv\n{\npublic:\n    BOOL operator == (const CLv&amp; lv) const\n    {\n        return _value == lv._value &amp;&amp; _fStart == lv._fStart;\n    }\n    BOOL operator != (const CLv&amp; lv) const\n    {\n        return _value != lv._value || _fStart != lv._fStart;\n    }\n    BYTE    _value;             \n    BYTE    _fStart :1;         \n};\n</code></pre>\n<p>Then, what does the below code segment mean?</p>\n<pre><code>CLv        lvEnd = {0,0};\n</code></pre>\n", "AcceptedAnswerId": "12911541", "Title": "class variable initialization in cpp", "CreationDate": "2012-10-16T09:27:12.247", "Id": "12911527", "CommentCount": "1", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2012-10-16T09:34:24.663", "LastEditorUserId": "311966", "LastActivityDate": "2012-10-16T09:34:24.663", "Score": "2", "OwnerUserId": "1749522", "Tags": "<android><c++>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_12911527_12911541_0": {"length": 17, "quality": 0.7391304347826086, "section_id": 3298}, "so_12911527_12911541_1": {"length": 17, "quality": 1.0, "section_id": 3323}}, "n3337": {"so_12911527_12911541_0": {"length": 21, "quality": 0.9130434782608695, "section_id": 3168}, "so_12911527_12911541_1": {"length": 17, "quality": 1.0, "section_id": 3193}}, "n4659": {"so_12911527_12911541_0": {"length": 12, "quality": 0.5217391304347826, "section_id": 4063}, "so_12911527_12911541_1": {"length": 16, "quality": 0.9411764705882353, "section_id": 4089}}}, "12911541": {"Id": "12911541", "PostTypeId": "2", "Body": "<p>It means that the variable <code>lvEnd</code> of type <code>CLv</code> is initialized with values of <code>0</code> and <code>0</code> for its members <code>_value</code> and <code>_fStart</code>.</p>\n<p>Your class is an aggregate:</p>\n<h3>8.5.1 Aggregates [dcl.init.aggr]</h3>\n<blockquote>\n<p id=\"so_12911527_12911541_0\">1) An aggregate is an array or a class (Clause 9) with no user-provided constructors (12.1), no brace-or-equalinitializers\n  for non-static data members (9.2), no private or protected non-static data members (Clause 11),\n  no base classes (Clause 10), and no virtual functions (10.3).</p>\n</blockquote>\n<p>And can be list-initialized:</p>\n<h3>8.5.4 List-initialization [dcl.init.list]</h3>\n<blockquote>\n<p id=\"so_12911527_12911541_1\">1) List-initialization is initialization of an object or reference from a braced-init-list. Such an initializer is\n  called an initializer list, and the comma-separated initializer-clauses of the list are called the elements of the\n  initializer list. [...]</p>\n</blockquote>\n", "LastActivityDate": "2012-10-16T09:28:26.710", "CommentCount": "1", "CreationDate": "2012-10-16T09:28:26.710", "ParentId": "12911527", "Score": "2", "OwnerUserId": "673730"}});