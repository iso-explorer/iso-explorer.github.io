post_cb({"19136950": {"ParentId": "19136881", "CommentCount": "0", "Body": "<p>If you see an <a href=\"http://www.asciitable.com/\" rel=\"nofollow\">ASCII table</a> you will see that the value <code>100</code> is the same as the character <code>'d'</code>.</p>\n<p>You have to remember that all members of a union <em>shares</em> the same memory. This means that if you set one member of a union, <em>all</em> members change, and not always to something comprehensible. Therefore it's undefined behavior to write to one member and read from another.</p>\n<p>And <code>strcpy(x.b,\"hello\")</code> does indeed work, as you can see all the members of the<code>x</code> union change after you do that.</p>\n", "OwnerUserId": "440558", "PostTypeId": "2", "Id": "19136950", "Score": "2", "CreationDate": "2013-10-02T12:31:50.337", "LastActivityDate": "2013-10-02T12:31:50.337"}, "19136952": {"ParentId": "19136881", "CommentCount": "1", "Body": "<p>Your code has UB (undefined behaviour); it is illegal to assign to one member of a union and then inspect a different member (except for a special case of POD structs with the same initial members).</p>\n<p>It is also illegal to read an uninitialised value, such as any field of <code>x</code> before you assign into <code>x.a</code>.</p>\n", "OwnerUserId": "1782465", "PostTypeId": "2", "Id": "19136952", "Score": "2", "CreationDate": "2013-10-02T12:32:04.200", "LastActivityDate": "2013-10-02T12:32:04.200"}, "19136959": {"ParentId": "19136881", "CommentCount": "3", "Body": "<p>I think when you say int a , you allocate sizeof(int) , generally 32 bits.\nbut when you say char[10] , you are allocating 10 * sizeof(char) bytes !! (10 * 4 bits)\nthese two can not be casted to each other.</p>\n", "OwnerUserId": "1542520", "PostTypeId": "2", "Id": "19136959", "Score": "-2", "CreationDate": "2013-10-02T12:32:31.437", "LastActivityDate": "2013-10-02T12:32:31.437"}, "19137295": {"ParentId": "19136881", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Strictly by the standard <em>type-punning</em> expect in narrow circumstances is <a href=\"http://en.wikipedia.org/wiki/Undefined_behavior\" rel=\"nofollow\">undefined behavior</a> but in practice many compilers support it for example <a href=\"http://gcc.gnu.org/onlinedocs/gcc-4.7.1/gcc/Optimize-Options.html#Type-punning\" rel=\"nofollow\">gcc manual points here for type-punning</a> and under <em>-fstrict-aliasing</em> section is says:</p>\n<blockquote>\n<p id=\"so_19136881_19137295_0\">The practice of reading from a different union member than the one most recently written to (called \u201ctype-punning\u201d) is common. Even with -fstrict-aliasing, type-punning is allowed, provided the memory is accessed through the union type.</p>\n</blockquote>\n<p>I would recommend reading <a href=\"http://cellperformance.beyond3d.com/articles/2006/06/understanding-strict-aliasing.html\" rel=\"nofollow\">Understanding Strict Aliasing</a> if you plan on using <em>type-punning</em> a lot.</p>\n<p><code>y.b</code> has the value <code>b</code> since all the elements of the union share memory and you initialized <code>y</code> with <code>100</code> which in <em>ASCII</em> is <code>b</code>. This is the same reason why the other fields of <code>x</code> change when you modify one including the case of <code>strcpy</code> and depending on your compiler this may be undefined or well defined(<em>in the case of gcc it is defined</em>).</p>\n<p>For completeness sake the C++ draft standard section <code>9.5</code> <em>Unions</em> paragraph <em>1</em> says(<em>emphasis mine</em>):</p>\n<blockquote>\n<p id=\"so_19136881_19137295_1\">In a union, <strong>at most one of the non-static data members can be active at any time</strong>, that is, the value of at most one of the non-static data members can be stored in a union at any time. [ Note: One special guarantee is made in order to simplify the use of unions: If a standard-layout union contains several standard-layout structs that share a common initial sequence (9.2), and <strong>if an object of this standard-layout union type contains one of the standard-layout structs, it is permitted to inspect the common initial sequence of any of standard-layout struct members</strong>; see 9.2. \u2014end note ] The size of a union is sufficient to contain the largest of its non-static data members. Each non-static data member is allocated as if it were the sole member of a struct.</p>\n</blockquote>\n", "OwnerUserId": "1708801", "LastEditorUserId": "1708801", "LastEditDate": "2013-10-03T00:26:49.187", "Id": "19137295", "Score": "3", "CreationDate": "2013-10-02T12:49:13.697", "LastActivityDate": "2013-10-03T00:26:49.187"}, "bq_ids": {"n4140": {"so_19136881_19137295_1": {"section_id": 5913, "quality": 0.9473684210526315, "length": 72}}, "n3337": {"so_19136881_19137295_1": {"section_id": 5685, "quality": 0.9473684210526315, "length": 72}}, "n4659": {"so_19136881_19137295_1": {"section_id": 7404, "quality": 0.6973684210526315, "length": 53}}}, "19136881": {"CommentCount": "2", "ViewCount": "263", "PostTypeId": "1", "LastEditorUserId": "718379", "CreationDate": "2013-10-02T12:27:57.293", "LastActivityDate": "2014-05-06T08:49:38.657", "Title": "Union usage and messy code", "AcceptedAnswerId": "19137295", "LastEditDate": "2014-05-06T08:49:38.657", "Id": "19136881", "Score": "0", "Body": "<p>I have some code which is about the usage of union shown as following: </p>\n<pre><code>int main(){\n\n  typedef union{int a;char b[10];float c;}Union;\n\n  Union x,y = {100};\n  printf(\"Union x :%d|   |%s|   |%f \\n\",x.a,x.b,x.c );\n  printf(\"Union y :%d|   |%s|   |%f \\n\\n\",y.a,y.b,y.c);\n\n  x.a = 50;\n  printf(\"Union x :%d|   |%s|   |%f \\n\",x.a,x.b,x.c );\n  printf(\"Union y :%d|   |%s|   |%f \\n\\n\",y.a,y.b,y.c);\n\n  strcpy(x.b,\"hello\");\n  printf(\"Union x :%d|   |%s|   |%f \\n\",x.a,x.b,x.c );\n  printf(\"Union y :%d|   |%s|   |%f \\n\\n\",y.a,y.b,y.c);\n\n  x.c = 21.50;\n  printf(\"Union x :%d|   |%s|   |%f \\n\",x.a,x.b,x.c );\n  printf(\"Union y :%d|   |%s|   |%f \\n\\n\",y.a,y.b,y.c);\n\n  return 0;\n}\n</code></pre>\n<p>After I compile and execute above code, I had result like this:</p>\n<pre><code>  Union x :0|     ||    |0.000000 \n  Union y :100|   |d|   |0.000000 \n\n  Union x :50|    |2|   |0.000000 \n  Union y :100|   |d|   |0.000000 \n\n  Union x :1819043176|     |hello|      |1143141483620823940762435584.000000 \n  Union y :100|   |d|   |0.000000 \n\n  Union x :1101791232|   ||    |21.500000 \n  Union y :100|   |d|   |0.000000 \n</code></pre>\n<p>I do not know why the y.b is initialized as \"d\"? and why x.a and x.c's value changed after? why does the strcpy(x.b,\"hello\") not work?</p>\n", "Tags": "<c++><gcc><unions>", "OwnerUserId": "1442946", "AnswerCount": "4"}});