post_cb({"12177684": {"ParentId": "12177632", "PostTypeId": "2", "CommentCount": "5", "CreationDate": "2012-08-29T12:14:23.793", "Score": "9", "LastEditorUserId": "435800", "LastEditDate": "2012-08-29T12:21:33.443", "Id": "12177684", "OwnerUserId": "435800", "Body": "<p>Tricky question with simple answer - because there are <em>no</em> virtual constructors in <code>C++</code>.</p>\n<hr>\n<p>In the ISO standards, ISO/IEC 14882:2003 and ISO/IEC 14882:2011, 12.1 Constructors, point 4:</p>\n<blockquote>\n<p id=\"so_12177632_12177684_0\">A constructor shall not be virtual (10.3) or static (9.4). A constructor can be invoked for a const, volatile or const volatile object. A constructor shall not be declared const, volatile, or const volatile (9.3.2). const and volatile semantics (7.1.5.1) are not applied on an object under construction. Such semantics only come into effect once the constructor for the most derived object (1.8) ends.</p>\n</blockquote>\n<p>And this can be caught compile-time. </p>\n</hr>", "LastActivityDate": "2012-08-29T12:21:33.443"}, "12177821": {"ParentId": "12177632", "PostTypeId": "2", "CommentCount": "14", "CreationDate": "2012-08-29T12:20:27.953", "Score": "-1", "LastEditorUserId": "320726", "LastEditDate": "2012-08-29T20:09:36.930", "Id": "12177821", "OwnerUserId": "320726", "Body": "<p>In C++ \"virtual\" means that what is done will depend at runtime on the effective class of an object and will not depend only on the type of the variable.</p>\n<p>A \"virtual\" constructor is something that doesn't really make sense because you don't have an object yet (you want to build one) so you have no class to depend on for the decision.</p>\n<p>Sometimes with \"virtual constructor\" what is intended in C++ is a pattern in which you are able to build an object without knowing the exact class... for example:</p>\n<pre><code>class Document {\n    public:\n        static Document *create(...);\n    private:\n        Document(...);\n};\n\n...\n\n// Just use Document::create instead of new Document\nstd::unique_ptr&lt;Document&gt; p = Document::create(...);\n</code></pre>\n<p>In this case the users of the class are not able to call the constructor (it's private), but they can only call a <strong>static method</strong> that is public and that will return a pointer to an instance. The construction itself will be handled by this function and the returned object will not be a necessarily a <code>Document</code> instance, but an instance of some class <strong>derived</strong> from <code>Document</code> that you don't know and that is not publicly exposed.\nThis allows for example to decide at runtime the exact class depending on the environment or on the parameters specified in the call to <code>create</code>.</p>\n<p>This is called \"virtual constructor\" because the constructor being called will be decided at runtime. It's not however the same thing as a virtual method call in C++ because virtual dispatching in C++ depends only on the class of the instance (but as said before this makes no sense for a constructor because the object doesn't exist yet, so you cannot decide depending on its real class).</p>\n", "LastActivityDate": "2012-08-29T20:09:36.930"}, "12177770": {"ParentId": "12177632", "PostTypeId": "2", "CommentCount": "1", "CreationDate": "2012-08-29T12:18:18.623", "Score": "5", "LastEditorUserId": "452307", "LastEditDate": "2012-08-29T12:26:17.283", "Id": "12177770", "OwnerUserId": "452307", "Body": "<blockquote>\n<p id=\"so_12177632_12177770_0\"><strong>Why compile time error not run time error?</strong> </p>\n</blockquote>\n<p>A runtime error occurs when an exception scenario occurs at runtime. While a compile time error occurs when the compiler detects that particular construct is not allowed by the C++ standard as valid C++ construct.<br>\nThe C++ Standard does not allow constructor to be marked as <code>virtual</code>. Hence the compiler detects it as violation of language grammer rules and flags an error.    </br></p>\n<p>As to answer why virtual constructor is not allowed in C++.<br>\nBjarne answers the Q on his faq page as:      </br></p>\n<blockquote>\n<p id=\"so_12177632_12177770_1\">A virtual call is a mechanism to get work done given partial information. In particular, \"virtual\" allows us to call a function knowing only any interfaces and not the exact type of the object. To create an object you need complete information. In particular, you need to know the exact type of what you want to create. Consequently, a \"call to a constructor\" cannot be virtual.</p>\n</blockquote>\n", "LastActivityDate": "2012-08-29T12:26:17.283"}, "12177776": {"ParentId": "12177632", "PostTypeId": "2", "CommentCount": "14", "CreationDate": "2012-08-29T12:18:30.197", "Score": "3", "LastEditorUserId": "661519", "LastEditDate": "2012-08-29T12:53:42.907", "Id": "12177776", "OwnerUserId": "661519", "Body": "<p>The rules of the language do not allow it, because it doesn't make sense to have a virtual constructor. How would this constructor be invoked? A common approach in C++ to construct different derived instances of a certain base class is a factory method:</p>\n<pre><code>#include &lt;memory&gt;\n\n// the parameters determine the derived type to be instantiated.\nstd::unique_ptr&lt;IFoo&gt; fooFactory(some parameters);\n</code></pre>\n<p><strong>Note</strong> The choice of <a href=\"http://en.wikipedia.org/wiki/Smart_pointer\" rel=\"nofollow\">smart pointer</a> should be dictated by the ownership policy. This example uses unique ownership.</p>\n", "LastActivityDate": "2012-08-29T12:53:42.907"}, "12177632": {"CommentCount": "3", "AcceptedAnswerId": "12177770", "PostTypeId": "1", "LastEditorUserId": "1561378", "CreationDate": "2012-08-29T12:11:54.977", "LastActivityDate": "2012-08-29T20:09:36.930", "LastEditDate": "2012-08-29T17:28:14.437", "ViewCount": "278", "FavoriteCount": "1", "Title": "Virtual function mechanism with reference to virtual constructor", "Id": "12177632", "Score": "0", "Body": "<p>This was the question asked to me in one of the interviews.  </p>\n<p>If Vtable is created in compile time, and <code>vptr</code> is assigned to object in runtime, then why compiler gives compile time error if we have virtual constructor in our class?</p>\n<p>I explained whole mechanism. But he was more interested in '<strong>Why compile time error not runtime error</strong>'</p>\n<p>I told him the that the C++ guidelines are chalked such that so compiler sends error at compile time.</p>\n<p>Can you please provide me the reason for the same</p>\n", "Tags": "<c++><constructor><compiler-errors><runtime-error><vtable>", "OwnerUserId": "1632270", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_12177632_12177684_0": {"section_id": 368, "quality": 0.6052631578947368, "length": 23}}, "n3337": {"so_12177632_12177684_0": {"section_id": 358, "quality": 0.8421052631578947, "length": 32}}, "n4659": {"so_12177632_12177684_0": {"section_id": 380, "quality": 0.6052631578947368, "length": 23}}}});