post_cb({"bq_ids": {"n4140": {"so_30734351_30734351_0": {"length": 4, "quality": 0.8, "section_id": 5532}, "so_30734351_30734604_0": {"length": 21, "quality": 0.8076923076923077, "section_id": 5393}}, "n3337": {"so_30734351_30734351_0": {"length": 4, "quality": 0.8, "section_id": 5318}, "so_30734351_30734604_0": {"length": 21, "quality": 0.8076923076923077, "section_id": 5187}}}, "30734604": {"PostTypeId": "2", "Body": "<p>C++11, <strong>[dcl.stc]</strong>:</p>\n<blockquote>\n<p id=\"so_30734351_30734604_0\">3 - A <code>register</code> specifier is a hint to the implementation that the variable so declared will be heavily used. [ <em>Note:</em> The hint can be ignored and in most implementations it will be ignored if the address of the variable\n  is taken. This use is deprecated (see D.2). <em>\u2014 end note</em> ]</p>\n</blockquote>\n<p>There is a proposal to remove the <code>register</code> keyword as a storage specifier, while reserving it as a keyword: <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4340\">Remove Deprecated Use of the <code>register</code> Keyword (n4340)</a>. This may or may not be implemented in C++1z (tentative C++17); it would pose challenges for compatibility with C, where <code>register</code> still has semantic effect (a C <code>register</code> variable or parameter cannot have its address taken or be subject to array-to-pointer decay).</p>\n", "LastActivityDate": "2015-06-09T14:13:44.080", "Id": "30734604", "CommentCount": "0", "CreationDate": "2015-06-09T14:13:44.080", "ParentId": "30734351", "Score": "10", "OwnerUserId": "567292"}, "30734417": {"PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_30734351_30734417_0\">Is it implementation defined?</p>\n</blockquote>\n<p>It always was.</p>\n<blockquote>\n<p id=\"so_30734351_30734417_1\">Will compilers take it as a hint and try to put the value in a register?</p>\n</blockquote>\n<p>It's implementation-defined.</p>\n<blockquote>\n<p id=\"so_30734351_30734417_2\">Will this eventually lead to a compile failure?</p>\n</blockquote>\n<p>No.</p>\n<p><strong>EDIT</strong> Perhaps I misunderstood the question about the eventual compile failure. I took it to mean an eventual failure in the current compilation. If the question is about the future of the <code>register</code> keyword, anything is possible: I don't care to fortune-tell.</p>\n", "LastActivityDate": "2015-06-10T00:45:28.170", "LastEditorUserId": "207421", "Id": "30734417", "CommentCount": "1", "CreationDate": "2015-06-09T14:05:19.673", "ParentId": "30734351", "Score": "6", "OwnerUserId": "207421", "LastEditDate": "2015-06-10T00:45:28.170"}, "30734351": {"ViewCount": "741", "Body": "<p>I'm testing some C++ code with <code>-std=c++11</code>. I noticed a warning I had not seen before:</p>\n<blockquote>\n<p id=\"so_30734351_30734351_0\">'register' storage class specifier is deprecated</p>\n</blockquote>\n<p>What does the standard say about this (other than its deprecated)?</p>\n<p>Is it implementation defined?</p>\n<p>Will compilers take it as a hint and try to put the value in a register?</p>\n<p>Will this eventually lead to a compile failure?</p>\n<p>Perhaps something else?</p>\n", "AcceptedAnswerId": "30734604", "Title": "Compiler behavior and \"register storage class specifier is deprecated\"", "CreationDate": "2015-06-09T14:02:53.630", "Id": "30734351", "CommentCount": "2", "LastEditDate": "2015-06-09T14:05:26.580", "PostTypeId": "1", "LastEditorUserId": "2642204", "LastActivityDate": "2015-06-10T00:45:28.170", "Score": "3", "OwnerUserId": "608639", "Tags": "<c++><c++11><compiler-warnings>", "AnswerCount": "2"}});