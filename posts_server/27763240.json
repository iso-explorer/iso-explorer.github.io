post_cb({"27763240": {"CommentCount": "2", "ViewCount": "72", "LastActivityDate": "2015-01-07T06:45:16.963", "Body": "<p>I want to offer strong guarantee to a function that looks like this:</p>\n<pre><code>if(condition) {\n    myMap.insert(key, val);\n}\nmyMap.insert(anotherKey, anotherVal);\n</code></pre>\n<p>The standard says <code>insert</code> offers strong guarantee. My problem is I don't know how to handle the case where the second <code>insert</code> fails. <code>myMap</code> will be already modified, so it will only provide a basic guarantee.</p>\n", "PostTypeId": "1", "AcceptedAnswerId": "27763339", "FavoriteCount": "3", "Title": "Can I offer strong guarantee to a function inserting 2 pairs in a std::map?", "Id": "27763240", "Score": "2", "CreationDate": "2015-01-04T06:57:02.727", "Tags": "<c++>", "OwnerUserId": "2120039", "AnswerCount": "1"}, "27763339": {"ParentId": "27763240", "LastEditDate": "2015-01-04T07:23:01.533", "CommentCount": "2", "CreationDate": "2015-01-04T07:13:46.707", "OwnerUserId": "481267", "LastEditorUserId": "481267", "PostTypeId": "2", "Id": "27763339", "Score": "3", "Body": "<p>If an exception occurs during the second insertion, catch it, delete the first element inserted, then rethrow.</p>\n<pre><code>// insert/emplace returns pair&lt;iterator, bool&gt;\nauto insert_result = condition ? myMap.emplace(key, val)\n                               : std::make_pair(myMap.end(), false);\ntry {\n    myMap.emplace(anotherKey, anotherVal);\n} catch (...) {\n    if (insert_result.second) {\n        myMap.erase(insert_result.first);\n    }\n    throw;\n}\n</code></pre>\n<p>Note that this only works if <code>erase</code> doesn't throw. Luckily, the standard guarantees this under a rather mild assumption:</p>\n<blockquote>\n<p id=\"so_27763240_27763339_0\">For associative containers, no <code>clear()</code> function throws an exception. <code>erase(k)</code> does not throw an exception unless that exception is thrown by the container\u2019s <code>Compare</code> object (if any).</p>\n</blockquote>\n<p>([associative.reqmts.except]/1 in C++11)</p>\n<p>So just make sure your comparison can never throw, and this should work.</p>\n", "LastActivityDate": "2015-01-04T07:23:01.533"}, "bq_ids": {"n4140": {"so_27763240_27763339_0": {"section_id": 750, "quality": 0.9375, "length": 15}}, "n3337": {"so_27763240_27763339_0": {"section_id": 738, "quality": 0.9375, "length": 15}}, "n4659": {"so_27763240_27763339_0": {"section_id": 810, "quality": 0.9375, "length": 15}}}});