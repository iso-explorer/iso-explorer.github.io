post_cb({"16447696": {"CreationDate": "2013-05-08T18:28:58.653", "CommentCount": "4", "Body": "<p>Per <a href=\"http://www.gnu.org/software/gcc/gcc-4.8/changes.html\" rel=\"nofollow\">GCC 4.8 changes</a>, the compiler must be 4.8.0 to support inheriting constructors.</p>\n<p>Seems after adding a new constructor to <code>D</code>, it doesn't have a default constructor anymore.<a href=\"http://www.stroustrup.com/C++11FAQ.html#inheriting\" rel=\"nofollow\"><sup>e.g. C++11</sup></a></p>\n<p>As @DyP mentioned (<code>\u00a712.9/3</code>)... Compiler dose not implicitly declare the default constructor (a constructor\nhaving no parameters) for derived class <code>D</code>.</p>\n<blockquote>\n<p id=\"so_16447145_16447696_0\">For each non-template constructor in the candidate set of inherited\n  constructors other than a constructor having no parameters or a\n  copy/move constructor having a single parameter, a constructor is\n  implicitly declared with the same constructor characteristics unless\n  there is a user-declared constructor with the same signature in the\n  class where the using-declaration appears.</p>\n</blockquote>\n", "Id": "16447696", "OwnerUserId": "952747", "LastEditDate": "2013-05-09T12:17:57.173", "ParentId": "16447145", "LastActivityDate": "2013-05-09T12:17:57.173", "PostTypeId": "2", "Score": "0", "LastEditorUserId": "952747"}, "16447145": {"FavoriteCount": "2", "ViewCount": "1816", "Id": "16447145", "AcceptedAnswerId": "16447439", "Score": "7", "Title": "C++11 Base constructor delegating/forwarding to derived class with \"using\" keyword", "LastEditorUserId": "514235", "CommentCount": "6", "Body": "<pre><code>struct B {\n  B () {}\n  B(int i) {}\n};\n\nstruct D : B {\n  using B::B;  // &lt;--- new C++11 feature\n};\n\nD d1; // ok\nD d2(3); // ok\n</code></pre>\n<p>Now, if I add a new constructor  inside the body of <code>struct D</code>, such as:</p>\n<pre><code>struct D : B {\n  using B::B;\n  D(const char* pc) {}  // &lt;--- added\n};\n</code></pre>\n<p>then <code>D d1;</code> starts giving compiler error(<a href=\"http://ideone.com/JCUPka\" rel=\"nofollow\">ideone</a> is not upgraded yet, I am using g++ 4.8.0)? However <code>D d2(3);</code> still works.</p>\n<p>Why the default constructor is discounted when adding a new constructor inside <code>struct D</code>?</p>\n", "Tags": "<c++><c++11><constructor><using><default-constructor>", "CreationDate": "2013-05-08T17:54:11.510", "LastEditDate": "2013-05-09T07:02:33.343", "LastActivityDate": "2013-05-09T12:17:57.173", "PostTypeId": "1", "AnswerCount": "2", "OwnerUserId": "514235"}, "16447439": {"CommentCount": "5", "Body": "<p>There is a subtle difference between</p>\n<pre><code>struct D : B {\n using B::B;\n D(const char* pc) {}  // &lt;--- added\n};\n</code></pre>\n<p>versus </p>\n<pre><code>struct D : B {\n using B::B;\n};\n</code></pre>\n<p>In the second case, compiler auto-generate the default \"D(){}\" constructor for you. But if you create your own constructor for D, then the default \"D(){}\" is not available anymore. Sure you have inherited B's default constructor, but that doesn't tell the compiler how to construct D by default.</p>\n", "CreationDate": "2013-05-08T18:13:00.407", "ParentId": "16447145", "Id": "16447439", "LastActivityDate": "2013-05-08T18:13:00.407", "PostTypeId": "2", "Score": "4", "OwnerUserId": "814628"}, "bq_ids": {"n4140": {"so_16447145_16447696_0": {"length": 32, "quality": 0.9696969696969697, "section_id": 484}}, "n3337": {"so_16447145_16447696_0": {"length": 32, "quality": 0.9696969696969697, "section_id": 475}}}});