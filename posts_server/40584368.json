post_cb({"bq_ids": {"n4140": {"so_40584368_40584504_2": {"length": 45, "quality": 0.9375, "section_id": 4692}, "so_40584368_40584504_1": {"length": 5, "quality": 0.5555555555555556, "section_id": 4080}, "so_40584368_40584504_0": {"length": 20, "quality": 1.0, "section_id": 6299}}, "n3337": {"so_40584368_40584504_2": {"length": 45, "quality": 0.9375, "section_id": 4501}, "so_40584368_40584504_1": {"length": 5, "quality": 0.5555555555555556, "section_id": 3930}, "so_40584368_40584504_0": {"length": 20, "quality": 1.0, "section_id": 6056}}, "n4659": {"so_40584368_40584504_2": {"length": 44, "quality": 0.9166666666666666, "section_id": 6087}, "so_40584368_40584504_1": {"length": 7, "quality": 0.7777777777777778, "section_id": 4984}, "so_40584368_40584504_0": {"length": 20, "quality": 1.0, "section_id": 7808}}}, "40584368": {"ViewCount": "346", "Body": "<p>Is specialization of <code>std::tuple_size</code> and <code>std::tuple_element</code> permitted for custom types?\nI suppose it is, but I want to be absolutely sure, and I can't find any concrete information.</p>\n<p>Example (namespaces, member functions and <code>get&lt;I&gt;</code> overloads omitted):</p>\n<pre><code>template &lt;typename T, size_t N&gt;\nstruct vector { T _data[N]; };\n\ntemplate&lt;size_t I, typename T, size_t N&gt;\nconstexpr T&amp; get(vector&lt;T,N&gt;&amp; vec) { return vec._data[I]; }\n\nnamespace std {\ntemplate&lt;typename T, size_t N&gt;\nclass tuple_size&lt; vector&lt;T,N&gt; &gt; : public std::integral_constant&lt;size_t, N&gt; { };\ntemplate&lt;size_t I, typename T, size_t N&gt;\nclass tuple_element&lt; I, vector&lt;T,N&gt; &gt; { public: using type = T; };\n}\n</code></pre>\n<p>I need that for use with structured bindings:</p>\n<pre><code>void f(vector&lt;T,3&gt; const&amp; vec)\n{\n    auto&amp; [x,y,z] = vec;\n    // stuff...\n}\n</code></pre>\n", "AcceptedAnswerId": "40584504", "Title": "C++: Can std::tuple_size/tuple_element be specialized?", "CreationDate": "2016-11-14T08:15:34.963", "Id": "40584368", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2016-11-15T13:29:51.410", "Score": "10", "OwnerUserId": "3469976", "Tags": "<c++><c++1z>", "AnswerCount": "1"}, "40584504": {"Id": "40584504", "PostTypeId": "2", "Body": "<p>Specializations for user-defined types are generally fine, and always have been. N4606, [namespace.std]/1:</p>\n<blockquote>\n<p id=\"so_40584368_40584504_0\">A program may add a template specialization for any standard library template to namespace <code>std</code> only if the declaration depends on a user-defined type and the specialization meets the standard library requirements for the original template and is not explicitly prohibited.</p>\n</blockquote>\n<p>For <code>tuple_size</code>, the requirements for the original template are specified in [tuple.helper]/1:</p>\n<blockquote>\n<p id=\"so_40584368_40584504_1\">All specializations of <code>tuple_size&lt;T&gt;</code> shall meet the <code>UnaryTypeTrait</code> requirements with a <code>BaseCharacteristic</code> of <code>integral_constant&lt;size_t, N&gt;</code> for some <code>N</code>.</p>\n</blockquote>\n<p><code>UnaryTypeTrait</code>, in turn, in [meta.rqmts]/1:</p>\n<blockquote>\n<p id=\"so_40584368_40584504_2\">A <em>UnaryTypeTrait</em> describes a property of a type. It shall be a class template that takes one template type argument and, optionally, additional arguments that help define the property being described. It shall be <code>DefaultConstructible</code>, <code>CopyConstructible</code>, and publicly and unambiguously derived, directly or indirectly, from its <em>BaseCharacteristic</em>, which is a specialization of the template <code>integral_constant</code>, with the arguments to the template <code>integral_constant</code> determined by the requirements for the particular property being described. The member names of the BaseCharacteristic shall not be hidden and shall be unambiguously available in the UnaryTypeTrait.</p>\n</blockquote>\n<p><code>tuple_element</code>'s requirements are specified in [tuple.helper]/6 and [meta.rqmts]/3, but in the interest of brevity I won't post them here. Suffice to say that it is indeed legal to specialize...</p>\n", "LastActivityDate": "2016-11-14T08:25:50.337", "Score": "10", "CreationDate": "2016-11-14T08:25:50.337", "ParentId": "40584368", "CommentCount": "1", "OwnerUserId": "636019"}});