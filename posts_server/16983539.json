post_cb({"16983539": {"CommentCount": "0", "AcceptedAnswerId": "16983926", "PostTypeId": "1", "LastEditorUserId": "1364752", "CreationDate": "2013-06-07T11:55:14.093", "LastActivityDate": "2016-07-06T22:07:24.793", "LastEditDate": "2013-06-07T12:43:10.397", "ViewCount": "4180", "FavoriteCount": "2", "Title": "Why can I not brace initialize a struct derived from another struct?", "Id": "16983539", "Score": "28", "Body": "<p>When I run this code:</p>\n<pre><code>struct X {\n    int a;\n};\n\nstruct Y : public X {};\n\nX x = {0};\nY Y = {0};\n</code></pre>\n<p>I get:</p>\n<pre><code>error: could not convert \u2018{0}\u2019 from \u2018&lt;brace-enclosed initializer list&gt;\u2019 to \u2018Y\u2019\n</code></pre>\n<p>Why does brace initialization work for the base class but not the derived class?</p>\n", "Tags": "<c++><c++11><struct><brace-initialization>", "OwnerUserId": "102441", "AnswerCount": "1"}, "16983926": {"ParentId": "16983539", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Your problem has to do with <a href=\"http://en.cppreference.com/w/cpp/language/aggregate_initialization\">aggregate initialization</a>: <code>struct X</code> is an aggregate while <code>struct Y</code> is not. Here is the standard quote about aggregates (8.5.1):</p>\n<blockquote>\n<p id=\"so_16983539_16983926_0\">An aggregate is an array or a class (Clause 9) with no user-provided constructors (12.1), no brace-or-equal-initializers for non-static data members (9.2), no private or protected non-static data members (Clause 11), no base classes (Clause 10), and no virtual functions (10.3).</p>\n</blockquote>\n<p>This clause specifies that if a <code>class</code> has a base class, then it's not an aggregate. Here, <code>struct Y</code> has <code>struct X</code> as a base class and thus cannot be an aggregate type.</p>\n<p>Concerning the particular problem you have, take the following clause from the standard:</p>\n<blockquote>\n<p id=\"so_16983539_16983926_1\">When an aggregate is initialized by an initializer list, as specified in 8.5.4, the elements of the initializer list are taken as initializers for the members of the aggregate, in increasing subscript or member order. Each member is copy-initialized from the corresponding initializer-clause. If the initializer-clause is an expression and a narrowing conversion (8.5.4) is required to convert the expression, the program is ill-formed.</p>\n</blockquote>\n<p>When you do <code>X x = {0}</code>, aggregate initialization is used to initialize <code>a</code> to <code>0</code>. However, when you do <code>Y y = {0}</code>, since <code>struct Y</code> is not an aggregate type, the compiler will look for an appropriate constructor. Since none of the implicitely generated constructors (default, copy and move) can do anything with a single integer, the compiler rejects your code.</p>\n<hr>\n<p>Concerning this constructors lookup, the error messages from clang++ are a little bit more explicit about what the compiler is actually trying to do (<a href=\"http://coliru.stacked-crooked.com/view?id=405a15449c546a7e204803c874d0e538-25dabfc2c190f5ef027f31d968947336\">online example</a>):</p>\n<pre><code>Y Y = {0};\n  ^   ~~~\n\nmain.cpp:5:8: note: candidate constructor (the implicit copy constructor) not viable: no known conversion from 'int' to 'const Y &amp;' for 1st argument\n\nstruct Y : public X {};\n       ^\n\nmain.cpp:5:8: note: candidate constructor (the implicit move constructor) not viable: no known conversion from 'int' to 'Y &amp;&amp;' for 1st argument\n\nstruct Y : public X {};\n       ^\n\nmain.cpp:5:8: note: candidate constructor (the implicit default constructor) not viable: requires 0 arguments, but 1 was provided\n</code></pre>\n<hr>\n<p>Note that there is <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0017r1.html\">a proposal</a> to extend aggregate initialization to support your use case, <em>and</em> it made it into C++17. If I read it correctly, it makes your example valid with the semantics you expect. So... you only have to wait for a C++17-compliant compiler.</p>\n</hr></hr>", "OwnerUserId": "1364752", "LastEditorUserId": "1364752", "LastEditDate": "2016-07-06T22:07:24.793", "Id": "16983926", "Score": "36", "CreationDate": "2013-06-07T12:16:33.287", "LastActivityDate": "2016-07-06T22:07:24.793"}, "bq_ids": {"n4140": {"so_16983539_16983926_1": {"section_id": 3299, "quality": 0.9375, "length": 30}, "so_16983539_16983926_0": {"section_id": 3298, "quality": 0.6956521739130435, "length": 16}}, "n3337": {"so_16983539_16983926_1": {"section_id": 3169, "quality": 0.9375, "length": 30}, "so_16983539_16983926_0": {"section_id": 3168, "quality": 0.8695652173913043, "length": 20}}, "n4659": {"so_16983539_16983926_1": {"section_id": 4065, "quality": 0.78125, "length": 25}, "so_16983539_16983926_0": {"section_id": 4063, "quality": 0.5217391304347826, "length": 12}}}});