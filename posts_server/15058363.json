post_cb({"15058363": {"CommentCount": "1", "ViewCount": "154", "PostTypeId": "1", "LastEditorUserId": "1932150", "CreationDate": "2013-02-25T00:20:19.893", "LastActivityDate": "2013-03-23T10:45:34.863", "Title": "Order of Vector elements for C++", "AcceptedAnswerId": "15058395", "LastEditDate": "2013-03-23T10:45:34.863", "Id": "15058363", "Score": "2", "Body": "<p>The following piece of c++ code gives </p>\n<pre><code>int main()\n{\n    vector &lt;int&gt; myvect(3,0);\n    vector &lt;int&gt; :: iterator it;\n    it = myvect.begin();\n    myvect.insert(it,200);\n    myvect.insert(it+5,400);         //Not sure what 5 makes the difference here\n    cout &lt;&lt; myvect[0] &lt;&lt; endl &lt;&lt; myvect[1];\n}\n</code></pre>\n<p>Output : </p>\n<pre><code>200\n400\n</code></pre>\n<p>And the same code with minor changes gives</p>\n<pre><code>int main()\n{\n    vector &lt;int&gt; myvect(3,0);\n    vector &lt;int&gt; :: iterator it;\n    it = myvect.begin();\n    myvect.insert(it,200);\n    myvect.insert(it+4,400);         //Not sure what 4 makes the difference here\n    cout &lt;&lt; myvect[0] &lt;&lt; endl &lt;&lt; myvect[1];\n}\n</code></pre>\n<p>Output:</p>\n<pre><code>400\n200\n</code></pre>\n<p>Can someone tell me why adding 4 or 5 to the iterator changes the order of elements?</p>\n<p>Thanks</p>\n", "Tags": "<c++><vector>", "OwnerUserId": "1706864", "AnswerCount": "2"}, "15058437": {"ParentId": "15058363", "LastEditDate": "2013-02-25T00:37:04.800", "CommentCount": "1", "CreationDate": "2013-02-25T00:31:18.267", "OwnerUserId": "981959", "LastEditorUserId": "981959", "PostTypeId": "2", "Id": "15058437", "Score": "1", "Body": "<p>The member function <code>vector::insert(const_iterator, const value_type&amp;)</code> requires a valid iterator that refers to the vector but <code>it+4</code> and <code>it+5</code> are not valid iterators.</p>\n<p>Before the first insertion, <code>it+3</code> is a valid (non-dereferencable) iterator, pointing just past-the-end of the vector sequence, but <code>it+4</code> is invalid.  After the insertion <code>it</code> <em>might</em> get invalidated, in which case no expression using <code>it</code> is valid, certainly not <code>it+5</code> because the sequence only has four elements at that point.</p>\n<p>The code would be valid if changed like so:</p>\n<pre><code>it = myvect.begin();\nmyvect.insert(it,200);\nit = myvect.begin();     // make it valid again\nmyvect.insert(it+4,400);\n</code></pre>\n", "LastActivityDate": "2013-02-25T00:37:04.800"}, "bq_ids": {"n4140": {"so_15058363_15058395_0": {"section_id": 986, "quality": 1.0, "length": 10}}, "n3337": {"so_15058363_15058395_0": {"section_id": 971, "quality": 1.0, "length": 10}}, "n4659": {"so_15058363_15058395_0": {"section_id": 1049, "quality": 1.0, "length": 10}}}, "15058395": {"ParentId": "15058363", "LastEditDate": "2013-02-25T00:37:00.520", "CommentCount": "4", "CreationDate": "2013-02-25T00:26:02.480", "OwnerUserId": "1932150", "LastEditorUserId": "1932150", "PostTypeId": "2", "Id": "15058395", "Score": "7", "Body": "<p>Your program has <strong>Undefined Behavior</strong>. </p>\n<p>You are creating a vector of 3 elements (all initialized to 0), and you are inserting elements at position <code>v.begin() + 5</code>, which is beyond the end of the vector.</p>\n<p>Moreover, you are using an iterator (<code>it)</code> after inserting an element <em>before</em> the position <code>it</code> points to. According to Paragraph 23.3.6.5/1 of the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_15058363_15058395_0\">[...] If no reallocation happens, all the iterators and references <strong>before the insertion point</strong> remain valid. [...]</p>\n</blockquote>\n<p>Therefore, iterator <code>it</code> itself is not guaranteed to be valid after the statement <code>myvect.insert(it, 200)</code>, and using it in the next instruction (<code>myvect.insert(it + 4, 400)</code>) is again Undefined Behavior.</p>\n<p>You cannot expect anything of a program with Undefined Behavior. It may crash, give you bizarre results, or (in the worst case) behave just as you would expect.</p>\n", "LastActivityDate": "2013-02-25T00:37:00.520"}});