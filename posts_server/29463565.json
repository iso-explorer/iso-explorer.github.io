post_cb({"29463685": {"ParentId": "29463565", "CommentCount": "0", "Body": "<p>Part of the reason is that they are two separate compilation units, and the declaration of <code>base()</code> above <code>main()</code> is not visible to the compiler when compiling the second compilation unit (aka source file, in rough terms).   Similarly, the actual definition of <code>base()</code> is not visible to the compiler when compiling <code>main()</code>.</p>\n<p>The second part of the reason is that deciding what function to call only uses the type of arguments, not the return type.   That means name mangling (the adornment of names so overloaded function can be accepted by the linker as distinct functions) only needs to encode information about types of function arguments, not the return type.    The linker will therefore see the definition in your second compilation unit as matching the declaration in the first.</p>\n<p>The net result is undefined behaviour.</p>\n<p>The fix is to ensure the declaration of <code>base()</code> you have in the first compilation unit is visible to the compiler when compiling the second unit.   In other words, put the declaration in a header file, and <code>#include</code> it in both source files.   The compiler will then reject the definition of <code>base()</code> since it doesn't match the preceding declaration.</p>\n", "OwnerUserId": "4706785", "PostTypeId": "2", "Id": "29463685", "Score": "1", "CreationDate": "2015-04-06T00:06:15.247", "LastActivityDate": "2015-04-06T00:06:15.247"}, "29463565": {"CommentCount": "0", "ViewCount": "406", "CreationDate": "2015-04-05T23:49:17.317", "LastActivityDate": "2015-04-06T00:32:15.913", "Title": "Return type of function declaration & definition didn't match, compiler was ok with it though?", "AcceptedAnswerId": "29463646", "PostTypeId": "1", "Id": "29463565", "Score": "3", "Body": "<p>I made an error in my program where I declared my function to return type <code>bool</code> even though the function returned an <code>unsigned long long</code>. In one source file:</p>\n<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nbool base(unsigned, unsigned);\n\nint main(){\n\n    int i = 27;\n    cout &lt;&lt; base(i,3);\n\n}\n</code></pre>\n<p>And in another defining the function (and an additional function power):</p>\n<pre><code>unsigned long long power(int base, int exponent){\n\n    unsigned long long temp = 1;\n    if(exponent == 0) return 1;\n    for(int i = 1; i &lt;= exponent; ++i)\n        temp *= base;\n    return temp;\n\n}\n\nunsigned long long base(unsigned x, unsigned base){\n\n    unsigned long long result = 0;\n    int i = 0;\n    while(x != 0){\n        result += (x%base)*power(10,i);\n        x = (x-(x%base))/base;\n        ++i;\n    }\n\n    return result;\n\n}\n</code></pre>\n<p>The function works out the number in the base given (here we are working out 27 in base 3). Surprisingly to me the program compiled, but unsurprisingly the output gave the wrong answer (232 instead of the expected 1000) because the return type is wrong. I was wondering why the compiler let through that the return type in the declaration is <code>bool</code> even though that doesn't correspond to the return type in the definition. I was under the impression the function prototype had to match exactly to its corresponding definition, otherwise the function cannot be found? It was just odd because I spent some time trying to look for the issue since the compiler didn't bring it up. </p>\n", "Tags": "<c++><declaration><definition><return-type>", "OwnerUserId": "4338785", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_29463565_29463646_0": {"section_id": 5521, "quality": 0.9393939393939394, "length": 31}}, "n3337": {"so_29463565_29463646_0": {"section_id": 5307, "quality": 0.9393939393939394, "length": 31}}, "n4659": {"so_29463565_29463646_0": {"section_id": 6956, "quality": 0.9393939393939394, "length": 31}}}, "29463646": {"ParentId": "29463565", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>What you see is undefined behavior: when you define a function in an incompatible way to its forward declaration, your program is ill-formed:</p>\n<blockquote>\n<p id=\"so_29463565_29463646_0\"><strong>7.5.5:</strong> If two declarations declare functions with the same name and parameter-type-list (8.3.5) to be members of the same namespace or declare objects with the same name to be members of the same namespace and the\n  declarations give the names different language linkages, the program is ill-formed; no diagnostic is required if the declarations appear in different translation units.</p>\n</blockquote>\n<p>When you proceed to calling such function, the behavior is undefined. Undefined behavior may manifest itself in any way it wishes. In your case, the call succeeds, but the returned value is incorrect.</p>\n<p>The compiler has no way to figure it out without help from you, because the connection between the two functions is made by the linker, not by the compiler. It is too late for the compiler to do anything, so you need to use a different approach: you avoid errors like this by making a header file with a declaration of your function, and then including the same header in both the files where you define and the files where you call the function.</p>\n", "OwnerUserId": "335858", "LastEditorUserId": "335858", "LastEditDate": "2015-04-06T00:32:15.913", "Id": "29463646", "Score": "2", "CreationDate": "2015-04-06T00:00:25.600", "LastActivityDate": "2015-04-06T00:32:15.913"}});