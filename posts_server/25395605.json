post_cb({"25395605": {"CommentCount": "4", "AcceptedAnswerId": "25403145", "CreationDate": "2014-08-20T01:53:46.723", "LastActivityDate": "2016-07-11T14:48:21.920", "PostTypeId": "1", "ViewCount": "737", "FavoriteCount": "4", "Title": "Is it illegal to invoke a std::function<void(Args...)> under the standard?", "Id": "25395605", "Score": "26", "Body": "<p>All quotes are from <a href=\"https://isocpp.org/files/papers/N3797.pdf\">N3797</a>.</p>\n<p><strong>4/3 [conv]</strong></p>\n<blockquote>\n<p id=\"so_25395605_25395605_0\">An expression\n  e\n  can be\n  implicitly converted\n  to a type\n  T\n  if and only if the declaration\n  T t=e;\n  is well-formed,\n  for some invented temporary variable\n  t</p>\n</blockquote>\n<p>This implies no expression can be implicitly converted to <code>void</code>, as <code>void t=e</code> is illegal for all expressions <code>e</code>.  This is even true if <code>e</code> is an expression of type <code>void</code>, such as <code>void(3)</code>.</p>\n<p>So an expression of type <code>void</code> cannot be implicitly converted to <code>void</code>.</p>\n<p>Which leads us to:</p>\n<p><strong>20.9.2/2 Requirements [func.require]</strong></p>\n<blockquote>\n<p id=\"so_25395605_25395605_1\">Define\n  INVOKE\n  (f, t1, t2, ..., tN, R)\n  as\n  INVOKE\n  (f, t1, t2, ..., tN)\n  implicitly converted to\n  R\n  .</p>\n</blockquote>\n<p>In short, <code>INVOKE(f, t1, t2, ..., tN, R)</code> is never valid when <code>R</code> is <code>void</code>, as nothing (including <code>void</code>) can be implicitly converted to <code>void</code>.</p>\n<p>As a result of this, all <code>std::function&lt;void(Args...)&gt;</code> have the property <code>!*this</code> and thus cannot be called, as the only constructors that do not have <code>!*this</code> as a postcondition (or do not copy such state from another <code>function</code> of the same type) require <code>Callable</code> of one of the parameters.</p>\n<p><strong>20.9.11.2/7 Class template\nfunction\n[func.wrap.func]</strong></p>\n<blockquote>\n<p id=\"so_25395605_25395605_2\">Requires:\n  F\n  shall be\n  CopyConstructible\n  .\n  f\n  shall be Callable (\n  20.9.11.2\n  ) for argument types\n  ArgTypes\n  and return type\n  R\n  . The copy constructor and destructor of\n  A\n  shall not throw exceptions.</p>\n</blockquote>\n<p><strong>20.9.11.2/2 Class template\nfunction\n[func.wrap.func]</strong></p>\n<blockquote>\n<p id=\"so_25395605_25395605_3\">A callable object\n  f\n  of type\n  F\n  is\n  Callable\n  for argument types\n  ArgTypes\n  and return type\n  R\n  if the expres-\n  sion\n  INVOKE\n  (f, declval()..., R)\n  , considered as an unevaluated operand (Clause\n  5\n  ), is well\n  formed (\n  20.9.2\n  ).</p>\n</blockquote>\n<p>As demonstrated above, there are no <code>Callable</code> expressions for <code>std::function&lt;void(Args...)&gt;</code>.</p>\n<p>If somehow such a <code>std::function&lt;void(Args...)&gt;</code> where found, invoking <code>operator()</code> would be ill formed:</p>\n<p><strong>invocation [func.wrap.func.inv]</strong></p>\n<blockquote>\n<p id=\"so_25395605_25395605_4\">Effects:\n  INVOKE\n  (f, std::forward(args)..., R)\n  (\n  20.9.2\n  ), where\n  f\n  is the target ob-\n  ject (\n  20.9.1\n  ) of\n  *this\n  .</p>\n</blockquote>\n<p>as <code>INVOKE(f, std::forward&lt;ArgTypes&gt;(args)..., void)</code> is ill formed for all arguments and <code>f</code>.</p>\n<p>Is this line of reasoning sound?</p>\n", "Tags": "<c++><c++11><language-lawyer><std-function><c++14>", "OwnerUserId": "1774667", "AnswerCount": "1"}, "25403145": {"ParentId": "25395605", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Yes, your analysis is correct; I came to the same conclusion <a href=\"https://groups.google.com/a/isocpp.org/d/msg/std-discussion/S9xdBpKpZMg/R3SL85z_e0AJ\" rel=\"nofollow noreferrer\">here</a>.</p>\n<p>According to Daniel Kruegler, this issue <a href=\"https://groups.google.com/a/isocpp.org/d/msg/std-discussion/S9xdBpKpZMg/7rxL3NAY8u4J\" rel=\"nofollow noreferrer\">should appear on the library defect list subsequent to the next mailing</a>:</p>\n<blockquote>\n<p id=\"so_25395605_25403145_0\">A corresponding library issue has already been submitted, but is not \n  yet visible in the issue list. </p>\n</blockquote>\n<p>Hopefully once that becomes visible we'll also have a conclusive answer to whether it is allowable to construct a <code>std::function</code> with signature returning <code>void</code> passing a callable with signature returning non-void (<a href=\"https://stackoverflow.com/questions/9339829/using-stdfunctionvoid-to-call-non-void-function\">Using `std::function&lt;void(...)&gt;` to call non-void function</a>).</p>\n<hr>\n<p>Update: this was entered as <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2420\" rel=\"nofollow noreferrer\">LWG 2420</a>, which was resolved in favor of special-casing <code>void</code> return type to <code>static_cast</code> the result of the invoked function to <code>void</code>. This means that a callable returning non-<code>void</code> can be the target of a <code>std::function&lt;void(...)&gt;</code>. LWG2420 was applied as a post-publication correction to C++14; meanwhile, all compilers I'm aware of effectively apply this behavior as an extension in C++11 mode.</p>\n</hr>", "OwnerUserId": "567292", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:14:57.453", "Id": "25403145", "Score": "15", "CreationDate": "2014-08-20T11:07:11.837", "LastActivityDate": "2016-07-11T14:48:21.920"}, "bq_ids": {"n4140": {"so_25395605_25395605_3": {"section_id": 4651, "quality": 0.6842105263157895, "length": 13}, "so_25395605_25395605_0": {"section_id": 2, "quality": 0.9090909090909091, "length": 10}}, "n3337": {"so_25395605_25395605_3": {"section_id": 4462, "quality": 0.6842105263157895, "length": 13}, "so_25395605_25395605_2": {"section_id": 4470, "quality": 0.8, "length": 12}, "so_25395605_25395605_0": {"section_id": 2, "quality": 0.9090909090909091, "length": 10}}, "n4659": {"so_25395605_25395605_3": {"section_id": 6020, "quality": 0.631578947368421, "length": 12}, "so_25395605_25395605_0": {"section_id": 2, "quality": 0.9090909090909091, "length": 10}}}});