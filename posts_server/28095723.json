post_cb({"28095884": {"ParentId": "28095723", "CommentCount": "4", "Body": "<p><strong>[dcl.fct]</strong>/8:</p>\n<blockquote>\n<p id=\"so_28095723_28095884_0\">[...] Functions shall not have a return type of type array or function, although they may have a return type of type pointer or reference to such things. [...]</p>\n</blockquote>\n", "OwnerUserId": "567292", "PostTypeId": "2", "Id": "28095884", "Score": "11", "CreationDate": "2015-01-22T18:15:02.167", "LastActivityDate": "2015-01-22T18:15:02.167"}, "28095937": {"ParentId": "28095723", "CommentCount": "2", "Body": "<p>In fact, the gcc error message is quite helpful: The grammar does in fact allow <code>auto f()() -&gt; int</code>, but this syntactically correct declaration is semantically invalid. It would describe a function returning a function returning <code>int</code>. See the answer of ecatmur for the standard quote disallowing that.</p>\n<p>To understand the parse, work like this. <code>f</code> is what you want to declare. Parse to the right, you'll find an empty argument list, so <code>f()</code> is a valid expression, and the type of that expression gets declared. Parse again to the right, you'll find an argument list <em>again</em>, so the return type of <code>f</code> is a function taking zero arguments. Parse again to the right, and you will hit the end (the <code>-&gt;</code> arrow), so parse to the left to find the result type, which is auto, and gets replaced by the type past the arrow.</p>\n", "OwnerUserId": "3025453", "PostTypeId": "2", "Id": "28095937", "Score": "8", "CreationDate": "2015-01-22T18:18:34.947", "LastActivityDate": "2015-01-22T18:18:34.947"}, "bq_ids": {"n4140": {"so_28095723_28095884_0": {"section_id": 3244, "quality": 1.0, "length": 18}}, "n3337": {"so_28095723_28095884_0": {"section_id": 3117, "quality": 1.0, "length": 18}}, "n4659": {"so_28095723_28095884_0": {"section_id": 4002, "quality": 1.0, "length": 18}}}, "28095723": {"CommentCount": "4", "ViewCount": "245", "CreationDate": "2015-01-22T18:05:43.800", "LastActivityDate": "2015-01-22T18:31:38.680", "Title": "Where in the Standard does it say that the declaration `auto f()() ->int;` is not allowed?", "AcceptedAnswerId": "28095937", "PostTypeId": "1", "Id": "28095723", "Score": "4", "Body": "<p>I know I'm being pedantic here, but I'm just trying to understand the C++ grammar production.</p>\n<p>I will start with a <em>simple-declaration</em>.</p>\n<p><em>simple-declaration</em>:<br>\n\u00a0\u00a0\u00a0\u00a0<em>decl-specifier-seq</em><sub><em>opt</em></sub>\u00a0\u00a0\u00a0<em>init-declarator-list</em><sub><em>opt</em></sub></br></p>\n<p><em>decl-specifier-seq</em>:<br>\n\u00a0\u00a0\u00a0\u00a0<em>decl-specifier</em></br></p>\n<p><em>decl-specifier</em>:<br>\n\u00a0\u00a0\u00a0\u00a0<em>type-specifier</em></br></p>\n<p><em>type-specifier</em>:<br>\n\u00a0\u00a0\u00a0\u00a0<em>trailing-type-specifier</em></br></p>\n<p><em>trailing-type-specifier</em>:<br>\n\u00a0\u00a0\u00a0\u00a0<em>simple-type-specifier</em></br></p>\n<p><em>simple-type-specifier</em>:<br>\n\u00a0\u00a0\u00a0\u00a0    char<br>\n\u00a0\u00a0\u00a0\u00a0    int<br>\n\u00a0\u00a0\u00a0\u00a0    ...<br>\n\u00a0\u00a0\u00a0\u00a0    auto  </br></br></br></br></p>\n<hr>\n<p>Now, I'll look into the definition of a <em>init-declarator-list</em>.  </p>\n<p><em>init-declarator-list</em>:<br>\n\u00a0\u00a0\u00a0\u00a0<em>init-declarator</em></br></p>\n<p><em>init-declarator</em>:<br>\n\u00a0\u00a0\u00a0\u00a0<em>declarator</em></br></p>\n<p><em>declarator</em>:<br>\n\u00a0\u00a0\u00a0\u00a0<em>noptr-declarator</em>\u00a0\u00a0\u00a0<em>parameters and qualifiers</em>\u00a0\u00a0\u00a0<em>trailing return type</em>\u00a0\u00a0\u00a0\u00a0<strong>(*2)</strong></br></p>\n<p><em>noptr-declarator</em>:<br>\n\u00a0\u00a0\u00a0\u00a0<em>declarator-id</em>\u00a0\u00a0\u00a0<em>attribute-specifier-seq</em><sub><em>opt</em></sub><br>\n\u00a0\u00a0\u00a0\u00a0<em>noptr-declarator</em>\u00a0\u00a0\u00a0<em>parameters and qualifiers</em>\u00a0\u00a0\u00a0\u00a0<strong>(*1)</strong></br></br></p>\n<p><em>parameters and qualifiers</em>:<br>\n\u00a0\u00a0\u00a0\u00a0(<em>parameter-declaration-clause</em>)\u00a0\u00a0\u00a0<em>cv-qualifiers</em><sub><em>opt</em></sub>\u00a0\u00a0\u00a0... (all optionals)</br></p>\n<p><em>trailing-return-type</em>:<br>\n\u00a0\u00a0\u00a0\u00a0<strong>-</strong>&gt;\u00a0\u00a0\u00a0<em>trailing-type-specifier-seq</em></br></p>\n<p><em>trailing-type-specifier-seq</em>:<br>\n\u00a0\u00a0\u00a0\u00a0<em>trailing-type-specifier</em>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0See the definition of a <em>traling-type-specifier</em> above.  </br></p>\n<hr>\n<p>Replacing <em>noptr-declarator</em> by a <em>declarator-id</em> in <strong>(*1)</strong>, using the previous definition of <em>noptr-declaration</em>, we arrive at the following definition of <em>nonptr-declarator</em>:  </p>\n<p><em>noptr-declaration</em>:<br>\n\u00a0\u00a0\u00a0\u00a0<em>declarator-id</em>\u00a0\u00a0\u00a0<em>parameters and qualifiers</em> </br></p>\n<p>Now replacing <em>noptr-declarator</em>, <em>parameters and qualifiers</em> and <em>trailing-return-type</em> in <strong>(*2)</strong> by each definition given above, we obtain the following for <em>declarator</em>:  </p>\n<p><em>declarator</em>:<br>\n\u00a0\u00a0\u00a0\u00a0<em>declarator-id</em>\u00a0\u00a0\u00a0(<em>parameter-declaration-clause</em>)\u00a0\u00a0\u00a0(<em>parameter-declaration-clause</em>)\u00a0\u00a0\u00a0<strong>-</strong>&gt;<br>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<em>simple-type-specifier</em> </br></br></p>\n<hr>\n<p>With this last result we could say that the grammar allows the following declaration of a function <code>f</code>:  </p>\n<pre><code>auto f()() -&gt; int;  \n</code></pre>\n<p>which of course is not valid. But I couldn't find anything in the Standard saying, directly or indirectly, that this construction is ill-formed.</p>\n<p>The error messages from <code>GCC</code> (<code>f</code> declared as function returning a function) and <code>clang</code> (<code>auto</code> return without trailing return type; deduced return types are a C++1y extensions) didn't help in this regard either.</p>\n</hr></hr></hr>", "Tags": "<c++><c++11><language-lawyer>", "OwnerUserId": "411165", "AnswerCount": "2"}});