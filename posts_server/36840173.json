post_cb({"bq_ids": {"n4140": {"so_36840173_36840390_3": {"length": 38, "quality": 0.76, "section_id": 35}, "so_36840173_36840390_2": {"length": 10, "quality": 0.5882352941176471, "section_id": 28}}, "n3337": {"so_36840173_36840390_3": {"length": 38, "quality": 0.76, "section_id": 32}, "so_36840173_36840390_2": {"length": 10, "quality": 0.5882352941176471, "section_id": 25}}, "n4659": {"so_36840173_36840390_3": {"length": 34, "quality": 0.68, "section_id": 35}, "so_36840173_36840390_2": {"length": 10, "quality": 0.5882352941176471, "section_id": 28}}}, "36840173": {"ViewCount": "2124", "Body": "<pre><code>float fv = orginal_value;  // original_value may be any float value\n...\ndouble dv = (double)fv;\n...\nfv = (float)dv;\n</code></pre>\n<p>SHOULD fv be equal to original_value exactly? Any precision may be lost?</p>\n", "AcceptedAnswerId": "36840390", "Title": "Precision loss from float to double, and from double to float?", "CreationDate": "2016-04-25T12:09:24.080", "Id": "36840173", "CommentCount": "9", "LastEditDate": "2016-04-25T13:34:45.790", "PostTypeId": "1", "LastEditorUserId": "95954", "LastActivityDate": "2016-04-25T13:34:45.790", "Score": "6", "OwnerUserId": "3968307", "Tags": "<c++><c><floating-accuracy>", "AnswerCount": "1"}, "36840390": {"Id": "36840390", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_36840173_36840390_0\">SHOULD fv be equal to original_value exactly? Any precision may be\n  lost?</p>\n</blockquote>\n<p>Yes, if the value of <code>dv</code> did not change in between.</p>\n<p>From section <strong>Conversion 6.3.1.5 Real Floating types</strong> in C99 specs:</p>\n<blockquote id=\"so_36840173_36840390_1\">\n<ol>\n<li>When a float is promoted to double or long double, or a double is\n  promoted to long double, <strong>its value is unchanged</strong>.</li>\n<li>When a double is\n  demoted to float, a long double is demoted to double or float, or a\n  value being represented in greater precision and range than required\n  by its semantic type (see 6.3.1.8) is explicitly converted to its\n  semantic type, <strong>if the value being converted can be represented exactly</strong>\n  in the new type, it is unchanged. If the value being converted is in\n  the range of values that can be represented but cannot be represented\n  exactly, the result is either the nearest higher or nearest lower\n  representable value, chosen in an implementation-defined manner. If\n  the value being converted is outside the range of values that can be\n  represented, the behavior is undefined</li>\n</ol>\n</blockquote>\n<p>For C++, from section <strong>4.6</strong> aka <strong>conv.fpprom</strong> (draft used: <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf\">n337</a> and I believe similar lines are available in final specs)</p>\n<blockquote>\n<p id=\"so_36840173_36840390_2\">A prvalue of type float can be converted to a prvalue of type double.\n  <strong>The value is unchanged</strong>. This conversion is called floating point\n  promotion.</p>\n</blockquote>\n<p>And section <strong>4.8</strong> aka <strong>conv.double</strong></p>\n<blockquote>\n<p id=\"so_36840173_36840390_3\">A prvalue of floating point type can be converted to a prvalue of\n  another floating point type. <strong>If the source value can be exactly\n  represented in the destination type</strong>, the result of the conversion is\n  that exact representation. If the source value is between two adjacent\n  destination values, the result of the conversion is an\n  implementation-defined choice of either of those values. Otherwise,\n  the behavior is undefined.  The conversions allowed as floating point\n  promotions are excluded from the set of floating point conversions</p>\n</blockquote>\n<p>So the values should be equal exactly.</p>\n", "LastEditorUserId": "2659313", "LastActivityDate": "2016-04-25T12:32:29.040", "Score": "14", "CreationDate": "2016-04-25T12:19:41.253", "ParentId": "36840173", "CommentCount": "2", "LastEditDate": "2016-04-25T12:32:29.040", "OwnerUserId": "2659313"}});