post_cb({"28375004": {"ParentId": "28374800", "PostTypeId": "2", "CommentCount": "3", "CreationDate": "2015-02-06T21:21:18.903", "Score": "8", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:20:37.030", "Id": "28375004", "OwnerUserId": "65678", "Body": "<p>First off: <a href=\"http://channel9.msdn.com/Events/GoingNative/2013/rand-Considered-Harmful\" rel=\"nofollow noreferrer\">Do</a> <a href=\"https://stackoverflow.com/questions/14251452/if-i-dont-specify-srand-what-seed-does-rand-use\"><em>not</em></a> <a href=\"https://stackoverflow.com/questions/4768180/rand-implementation\">use</a> <a href=\"http://www.azillionmonkeys.com/qed/random.html\" rel=\"nofollow noreferrer\"><code>rand</code></a>. <a href=\"http://www.cplusplus.com/reference/random/\" rel=\"nofollow noreferrer\">There</a> <a href=\"http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/SFMT/\" rel=\"nofollow noreferrer\">are</a> <a href=\"http://www.gnu.org/software/gsl/\" rel=\"nofollow noreferrer\">enough</a> <a href=\"http://en.wikipedia.org/wiki/Salsa20\" rel=\"nofollow noreferrer\">better</a> <a href=\"http://www.boost.org/doc/libs/1_55_0/boost/random/\" rel=\"nofollow noreferrer\">alternatives</a>.</p>\n<p>Even the 2011 version of the C standard<sup>1</sup> says in footnote 295:</p>\n<blockquote>\n<p id=\"so_28374800_28375004_0\">There are no guarantees as to the quality of the random sequence produced and some implementations\n  are known to produce sequences with distressingly non-random low-order bits. Applications with\n  particular requirements should use a generator that is known to be sufficient for their needs.</p>\n</blockquote>\n<p>In case that did not convince you, please let me add some emphasis:</p>\n<blockquote>\n<p id=\"so_28374800_28375004_1\">There are <strong><em>no guarantees</em></strong> as to the quality of the random sequence produced and some implementations\n  are known to produce sequences with <strong><em>distressingly non-random</em></strong> low-order bits. Applications <strike>with\n  particular requirements</strike> should use a generator that is known to be sufficient [read: not this one] for their needs.</p>\n</blockquote>\n<p>However, if you decide to use it against all reason,\nC99 7.20.2.2 and C11 7.22.2.2 both define the <code>srand</code> functon as follows:</p>\n<blockquote>\n<p id=\"so_28374800_28375004_2\">(2) The srand function uses the argument as a seed for a new sequence of pseudo-random\n  numbers to be returned by subsequent calls to rand. If srand is then called with the\n  same seed value, the sequence of pseudo-random numbers shall be repeated. If rand is\n  called before any calls to srand have been made, the same sequence shall be generated\n  as when srand is first called with a seed value of 1.</p>\n<p id=\"so_28374800_28375004_3\">(3) [...] The implementation shall behave as if no library function calls the srand function.</p>\n</blockquote>\n<p>This means<sup>2</sup> that either your standard library is broken, you are invoking undefined behaviour (e.g. writing to memory you should not write to) or are indeed having some other source of non-determinism. As you are surely aware, the most common sources of non-determinism are threading and reading input (keyboard, time, etc). Note that calling <code>rand</code>/<code>srand</code> from multiple threads is inherently unsafe<sup>3</sup> beyond just the order of execution.</p>\n<p>Since the <code>rand</code> random number generation facilities have only one central state, you should also be aware <a href=\"https://stackoverflow.com/questions/26294162/usefulness-of-rand-or-who-should-call-srand\">that libraries used by your code can modify it as well</a>, therefore your problem may be hiding in some innocent call to a library function (excepting the standard library).</p>\n<p>Let me also reiterate that the algorithm used by <code>rand</code> is <em>not specified</em>. Therefore, different compilers (more specifically different standard libraries) can and will produce different random numbers.</p>\n<p>Finally, let me say again that you <a href=\"http://www.agner.org/random/discuss/read.php?i=106\" rel=\"nofollow noreferrer\">should</a> <a href=\"http://linux.die.net/man/3/rand\" rel=\"nofollow noreferrer\">not</a> <a href=\"https://stackoverflow.com/questions/10198758/how-to-get-current-seed-from-c-rand\">use</a> <a href=\"http://isocpp.org/files/papers/n3551.pdf\" rel=\"nofollow noreferrer\"><code>rand</code></a> if at all possible.</p>\n<p>If there is any doubt left as to what you should be doing now, please just have a look at the following completely standards-compliant implementation of <code>srand</code> and <code>rand</code>:</p>\n<pre><code>#define RAND_MAX 32767\nstatic int _rand_state = 1;\nvoid srand(unsigned int seed) { _rand_state = (int)(seed % 32768); }\nint rand() { return (++_rand_state) % 32768; }\n</code></pre>\n<hr>\n<p><sub>\n<strong>Footnotes:</strong>\n</sub></p>\n<p><sub>\n1. In case you are using linux, the man page <a href=\"http://linux.die.net/man/3/rand\" rel=\"nofollow noreferrer\"><code>rand(3)</code></a> agrees: \"on older rand() implementations, and on current implementations on different systems, the lower-order bits are much less random than the higher-order bits. Do not use this function in applications intended to be portable when good randomness is needed.\"\n</sub></p>\n<p><sub>\n2. In combination with C99 7.20.2.1/3 or C11 7.22.2.1/3 which guarantees that the implementation behaves as if <code>srand</code> and <code>rand</code> are never called by any standard library function.\n</sub></p>\n<p><sub>\n3. C11 explicitly allows data races when using these functions (C11 7.22.2.1/3 and C11 7.22.2.2/3) and C99 would do so as well if it knew the concept of threads and thread-safety.\n</sub></p>\n</hr>", "LastActivityDate": "2015-02-06T22:50:36.303"}, "28374800": {"CommentCount": "10", "ViewCount": "886", "CreationDate": "2015-02-06T21:06:09.033", "LastActivityDate": "2015-02-06T22:50:36.303", "Title": "c++ srand does not give same sequences of random numbers", "PostTypeId": "1", "Id": "28374800", "Score": "5", "Body": "<p>I have a optimisation algorithm which uses rand() and srand(). In order to be able to test the behaviour I have set the seed to a specific number in order to get the same sequence of random numbers on different runs of the program.</p>\n<pre><code>#define RN rand()/(RAND_MAX+1.0)\nint main(int argc, char **argv)\n{\n    unsigned int seed=47456536;\n    srand(seed);\n    // a lot of stuff including RN\n}\n</code></pre>\n<p>Issue is that in different runs I get different sequence of numbers. Is that possible?</p>\n", "Tags": "<c++><srand>", "OwnerUserId": "4222763", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_28374800_28375004_3": {"section_id": 6969, "quality": 0.75, "length": 6}}, "n3337": {"so_28374800_28375004_3": {"section_id": 6716, "quality": 0.75, "length": 6}}, "n4659": {"so_28374800_28375004_3": {"section_id": 8464, "quality": 0.75, "length": 6}}}, "28374851": {"ParentId": "28374800", "PostTypeId": "2", "CommentCount": "10", "CreationDate": "2015-02-06T21:09:36.933", "Score": "4", "LastEditorUserId": "4433386", "LastEditDate": "2015-02-06T22:12:14.607", "Id": "28374851", "OwnerUserId": "4433386", "Body": "<p>No, as the random number generator is defined to be deterministic given a fixed seed.</p>\n<p>Is it possible that your \"a lot of stuff including RN\" might reorder things, maybe based on timing? </p>\n<p>EDIT: \"reordering\": Are there external factors (time, data from files, multiple threads being scheduled etc) that might influence the order in which random numbers are requested?</p>\n<p>EDIT: you can try to use something like Boost's RNGs; I've had excellent experience with <code>boost::mt19937</code>, and the fact that you can have generator \"objects\" eradicates the possibility that some library you're using is also getting random numbers via <code>rand</code>, messing up your sequence.</p>\n", "LastActivityDate": "2015-02-06T22:12:14.607"}});