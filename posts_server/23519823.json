post_cb({"bq_ids": {"n4140": {"so_23519823_23520635_1": {"length": 12, "quality": 1.0, "section_id": 7165}, "so_23519823_23520635_2": {"length": 34, "quality": 0.9714285714285714, "section_id": 7153}}, "n3337": {"so_23519823_23520635_1": {"length": 12, "quality": 1.0, "section_id": 6909}, "so_23519823_23520635_2": {"length": 34, "quality": 0.9714285714285714, "section_id": 6897}}, "n4659": {"so_23519823_23520635_1": {"length": 12, "quality": 1.0, "section_id": 8673}, "so_23519823_23520635_2": {"length": 23, "quality": 0.6571428571428571, "section_id": 8657}}}, "23520009": {"Id": "23520009", "PostTypeId": "2", "Body": "<p>Don't call your function <code>main()</code> unless it is a program entry point. If it is, then you are guaranteed that static object constructors will be called before <code>main()</code>.</p>\n", "LastActivityDate": "2014-05-07T14:03:19.860", "CommentCount": "0", "CreationDate": "2014-05-07T14:03:19.860", "ParentId": "23519823", "Score": "0", "OwnerUserId": "838975"}, "23520031": {"Id": "23520031", "PostTypeId": "2", "Body": "<p>Once <code>main</code> has started, it's guaranteed to run before any function or variable <em>in the same translation unit</em> is used.</p>\n<p>So if, as here, it's in the same translation unit as <code>main</code>, then it's guaranteed to run before <code>main</code>. If it's in another transation unit, then it's implementation-defined whether it will be run before <code>main</code>. In the worst case, if the program doesn't use anything from the same translation unit, it might not run at all.</p>\n", "LastActivityDate": "2014-05-07T14:04:20.193", "CommentCount": "1", "CreationDate": "2014-05-07T14:04:20.193", "ParentId": "23519823", "Score": "0", "OwnerUserId": "204847"}, "23519823": {"ViewCount": "78", "Body": "<p>Our system has a plugin-based architecture with each module effectively having a 'main' function. I need to have a small piece of code run before a module's <code>main()</code> is invoked. I've had success putting the code in the constructor of a dummy class, then declaring one static variable of that class, eg:</p>\n<pre><code>namespace {\nclass Dummy {\npublic:\n    Dummy() { /* do work here */ }\n};\n\n   Dummy theDummy;\n}\n\nvoid main() {...}\n</code></pre>\n<p>This seems to work well, but is it a valid solution in terms of the compiler guaranteeing the code will run? Is there any chance it could detect that <code>theDummy</code> is not referenced anywhere else in the system and compile/link it away completely, or will it realise that the constructor needs to run? Thanks</p>\n", "AcceptedAnswerId": "23520635", "Title": "Using constructor of static data to perform work before main()", "CreationDate": "2014-05-07T13:55:18.990", "Id": "23519823", "CommentCount": "2", "LastEditDate": "2014-05-07T13:57:30.827", "PostTypeId": "1", "LastEditorUserId": "1670308", "LastActivityDate": "2014-05-08T02:55:41.350", "Score": "1", "OwnerUserId": "811244", "Tags": "<c++><constructor><static>", "AnswerCount": "4"}, "23520635": {"Id": "23520635", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_23519823_23520635_0\">This seems to work well, but is it a valid solution in terms of the compiler guaranteeing the code will run? Is there any chance it could detect that theDummy is not referenced anywhere else in the system and compile/link it away completely, or will it realise that the constructor needs to run? </p>\n</blockquote>\n<p>See n3797 S3.7.1/2:</p>\n<blockquote>\n<p id=\"so_23519823_23520635_1\">If a variable with static storage duration has initialization or a destructor with side effects, it shall not be eliminated even if it appears to be unused,</p>\n</blockquote>\n<p>Yes, the initialisation has to run. It cannot be simply omitted.</p>\n<p>See S3.6.2/4:</p>\n<blockquote>\n<p id=\"so_23519823_23520635_2\">It is implementation-defined whether the dynamic initialization of a non-local variable with static storage duration is done before the first statement of main. If the initialization is deferred to some point in time after the first statement of main, it shall occur before the first odr-use (3.2) of any function or variable defined in the same translation unit as the variable to be initialized.</p>\n</blockquote>\n<p>Yes, the initialisation has to be completed before any code runs in the same translation unit.</p>\n<p>The use of an entry point called main() in your plugin is of no particular importance.</p>\n<p>You're good to go.</p>\n<hr>\n<p>As per a comment, you do need to make sure that your <code>Dummy</code> constructor and your <code>main</code> function are in the same translation unit for this to work. If they were compiled separately and only linked together this guarantee would not apply.</p>\n</hr>", "LastEditorUserId": "1105562", "LastActivityDate": "2014-05-08T02:55:41.350", "Score": "1", "CreationDate": "2014-05-07T14:29:42.570", "ParentId": "23519823", "CommentCount": "2", "OwnerUserId": "1105562", "LastEditDate": "2014-05-08T02:55:41.350"}, "23519990": {"Id": "23519990", "PostTypeId": "2", "Body": "<p>In general, a compiler is allowed to optimize something out only if it can be sure that the semantics are the same. So if you call any function that it can't see into, for example, then it must assume that the function has side effects, and won't optimize the code out.</p>\n<p>Note that you may have initialization order issues between translation units, however, since the initialization order of static objects between TUs is in general not guaranteed. It is, however, guaranteed that the constructor will be called before the \"main\" for your module is entered (assuming same TU). See Section 3.6.2 of the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf\" rel=\"nofollow\">C++11 standard</a> for full details.</p>\n<p>If a platform-specific mechanism will work for you, look into using a <a href=\"http://gcc.gnu.org/onlinedocs/gcc/Function-Attributes.html\" rel=\"nofollow\">function attribute</a>, which is supported by g++ and clang++.</p>\n", "LastEditorUserId": "3521733", "LastActivityDate": "2014-05-07T14:11:29.707", "Score": "0", "CreationDate": "2014-05-07T14:02:36.453", "ParentId": "23519823", "CommentCount": "0", "OwnerUserId": "3521733", "LastEditDate": "2014-05-07T14:11:29.707"}});