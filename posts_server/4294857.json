post_cb({"4295440": {"ParentId": "4294857", "CommentCount": "3", "Body": "<p>haha, i know people have already said this in a roundabout way but just to say it directly. In C terms, label-&gt; is actually a shorthand for (*label). .That being said, . is the operator which references elements in a struct. Therefore, -&gt; references an element in a pointer to a struct.</p>\n", "OwnerUserId": "516813", "PostTypeId": "2", "Id": "4295440", "Score": "0", "CreationDate": "2010-11-28T04:52:34.577", "LastActivityDate": "2010-11-28T04:52:34.577"}, "4294885": {"ParentId": "4294857", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>THe C++03 standard refers to both as operators. </p>\n<p>Example:</p>\n<blockquote>\n<p id=\"so_4294857_4294885_0\">...after the . operator applied to an expression of the type of its class...</p>\n</blockquote>\n<p>If you are not comfortable with that terminology you can use the term punctuator for <code>.</code>. </p>\n", "OwnerUserId": "3153", "LastEditorUserId": "3153", "LastEditDate": "2010-11-28T01:42:53.673", "Id": "4294885", "Score": "1", "CreationDate": "2010-11-28T01:37:33.330", "LastActivityDate": "2010-11-28T01:42:53.673"}, "bq_ids": {"n4140": {"so_4294857_4294885_0": {"section_id": 7071, "quality": 1.0, "length": 7}}, "n3337": {"so_4294857_4294885_0": {"section_id": 6815, "quality": 1.0, "length": 7}}, "n4659": {"so_4294857_4294885_0": {"section_id": 8572, "quality": 1.0, "length": 7}}}, "4294874": {"ParentId": "4294857", "CommentCount": "16", "Body": "<p>This reference says they're both operators in C++:</p>\n<p><a href=\"http://www.cplusplus.com/doc/tutorial/operators/\" rel=\"nofollow\">http://www.cplusplus.com/doc/tutorial/operators/</a></p>\n<p>Is that not authoritative enough?</p>\n", "OwnerUserId": "37213", "PostTypeId": "2", "Id": "4294874", "Score": "1", "CreationDate": "2010-11-28T01:34:02.443", "LastActivityDate": "2010-11-28T01:34:02.443"}, "4294933": {"ParentId": "4294857", "CommentCount": "9", "Body": "<p>Hmmm...<code>sizeof</code> is an operator, what is its input type? I don't think the question is useful for distinguishing operators from non-operators in this context.</p>\n<p>And <em>that</em> would be because what \"operator\" means in the context of a programming language is <em>exactly</em> what the author of the language <em>says</em> it means. Shades of Lewis Carroll here.</p>\n", "OwnerUserId": "2509", "PostTypeId": "2", "Id": "4294933", "Score": "3", "CreationDate": "2010-11-28T02:01:11.617", "LastActivityDate": "2010-11-28T02:01:11.617"}, "4295340": {"ParentId": "4294857", "CommentCount": "0", "Body": "<p>Online C standard (<a href=\"http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf\" rel=\"nofollow\">n1256</a>):</p>\n<blockquote id=\"so_4294857_4295340_0\">\n<b>6.5.2.3 Structure and union members</b><br><br>\n<b>Constraints</b><br><br>\n1 The first operand of the <code>.</code> operator shall have a qualified or unqualified structure or union\ntype, and the second operand shall name a member of that type.<br><br>\n2 The first operand of the <code>-&gt;</code> operator shall have type \u2018\u2018pointer to qualified or unqualified\nstructure\u2019\u2019 or \u2018\u2018pointer to qualified or unqualified union\u2019\u2019, and the second operand shall\nname a member of the type pointed to.\n</br></br></br></br></br></br></blockquote>\n<p>They are operators, and their input types are specified by the standard. </p>\n", "OwnerUserId": "134554", "PostTypeId": "2", "Id": "4295340", "Score": "1", "CreationDate": "2010-11-28T04:18:04.100", "LastActivityDate": "2010-11-28T04:18:04.100"}, "4294869": {"ParentId": "4294857", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>You can overload the -&gt; operator: <a href=\"http://en.wikipedia.org/wiki/Operators_in_C_and_C%2B%2B\" rel=\"nofollow\">Wikipedia</a>. That page also states that you can't overload dot. There's an example of -&gt; overloading <a href=\"http://cpptruths.blogspot.com/2005_10_09_archive.html\" rel=\"nofollow\">here</a>:</p>\n<pre><code>class String // this is handle\n{\n  ...\n  Stringrep *operator -&gt; () const { return b_; }\n  private:\n  Stringrep *b_;\n}\n</code></pre>\n<p>The arrow works on the value to the left of the arrow and returns whatever the left hand side is \"holding inside\". Think of a <a href=\"http://en.wikibooks.org/wiki/C++_Programming/Operators/Operator_Overloading#Address_of.2C_Reference.2C_and_Pointer_operators\" rel=\"nofollow\">smart pointer</a>.</p>\n", "OwnerUserId": "351984", "LastEditorUserId": "351984", "LastEditDate": "2010-11-28T01:40:34.177", "Id": "4294869", "Score": "1", "CreationDate": "2010-11-28T01:32:46.950", "LastActivityDate": "2010-11-28T01:40:34.177"}, "4294871": {"ParentId": "4294857", "CommentCount": "0", "Body": "<p>I think the fact that you can overload the <code>-&gt;</code> operator using the \"operator\" keyword should be a dead giveaway.</p>\n<p>Smart pointers do it pretty often:</p>\n<pre><code>template&lt;class T&gt;\nstruct myPtr {\n    T *operator -&gt;()    { return m_ptr; }\n\n    private:\n        T *m_ptr;\n};\n</code></pre>\n<p>The <code>.</code> is not overloadable, but is also an operator by definition.</p>\n", "OwnerUserId": "345717", "PostTypeId": "2", "Id": "4294871", "Score": "5", "CreationDate": "2010-11-28T01:33:17.793", "LastActivityDate": "2010-11-28T01:33:17.793"}, "4294892": {"ParentId": "4294857", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>You assume that the only types which can be passed as arguments to an operator are types that can be defined within the language.</p>\n<p>I would argue that any type which can be recognised by the compiler may be passed as an argument, including internal types such as \"identifier\". The operator will have two arguments in its AST representation, which is enough to allow you to define semantics.</p>\n<p>Another argument is that language theory may provide one set of definitions for your vocabulary, but it isn't the only one.</p>\n<p>For example, an operator may be a man who works a machine. That definition has no relevance to programming theory, but it won't stop me using for keywords in a domain-specific language expressing something to do with machine operating. Similarly, the term \"operator\" has a wider definition in mathematics than that which is specific to programming theory - and that definition isn't invalidated simply by working with a programming language.</p>\n<p>To put it another way - if you didn't call it an operator, what <em>would</em> you call it?</p>\n<p><strong>EDIT</strong></p>\n<p>To clarify, my first argument is referring to the syntax for using the operator (the call). These operators have right arguments which are identifiers - member names - which the C++ language cannot express using a data type. The C++ language <em>does</em> have member pointers, but they aren't the same thing as the members - just as a variable isn't the same as a pointer to that variable.</p>\n<p>I assume that is what the question referred to. The right parameter of those operators has a type which cannot be expressed or manipulated normally in the language.</p>\n<p>What happens when that syntax is mapped to an overloaded <code>operator-&gt;</code> function is a different thing. The function isn't the operator - it's only how the operator gets implemented.</p>\n", "OwnerUserId": "180247", "LastEditorUserId": "180247", "LastEditDate": "2010-11-28T01:52:35.663", "Id": "4294892", "Score": "6", "CreationDate": "2010-11-28T01:39:36.237", "LastActivityDate": "2010-11-28T01:52:35.663"}, "4294857": {"CommentCount": "1", "AcceptedAnswerId": "4294874", "CreationDate": "2010-11-28T01:26:14.283", "LastActivityDate": "2010-11-28T04:52:34.577", "PostTypeId": "1", "ViewCount": "394", "FavoriteCount": "1", "Title": "Are . and -> in C and C++ really operators?", "Id": "4294857", "Score": "5", "Body": "<p>you probably have been tought, are tought yourselves, that . and -&gt; are <strong>operators</strong> which retrieve members of a struct (C) or class (C++).</p>\n<p>However, I doubt they are operators - because, if they are operators, what are their input types? Furthermore, the identifiers on both sides are interdependent - a feature which for example the + operator lacks of.</p>\n<p>If this is correct - in what sense are these still labeled as operator in practice, and what is their formal definition with regard to language theory.</p>\n", "Tags": "<c++><c><programming-languages><operators>", "OwnerUserId": "411768", "AnswerCount": "8"}});