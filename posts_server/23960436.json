post_cb({"bq_ids": {"n4140": {"so_23960436_23960657_4": {"length": 8, "quality": 0.8888888888888888, "section_id": 5988}, "so_23960436_23960657_3": {"length": 14, "quality": 0.9333333333333333, "section_id": 5988}, "so_23960436_23960657_2": {"length": 8, "quality": 0.8888888888888888, "section_id": 5988}, "so_23960436_23960657_1": {"length": 14, "quality": 0.9333333333333333, "section_id": 5988}}, "n3337": {"so_23960436_23960657_4": {"length": 7, "quality": 0.7777777777777778, "section_id": 5756}, "so_23960436_23960657_3": {"length": 13, "quality": 0.8666666666666667, "section_id": 5756}, "so_23960436_23960657_1": {"length": 13, "quality": 0.8666666666666667, "section_id": 5756}, "so_23960436_23960657_2": {"length": 7, "quality": 0.7777777777777778, "section_id": 5756}}, "n4659": {"so_23960436_23960657_4": {"length": 8, "quality": 0.8888888888888888, "section_id": 7488}, "so_23960436_23960657_3": {"length": 14, "quality": 0.9333333333333333, "section_id": 7488}, "so_23960436_23960657_1": {"length": 14, "quality": 0.9333333333333333, "section_id": 7488}, "so_23960436_23960657_2": {"length": 8, "quality": 0.8888888888888888, "section_id": 7488}}}, "23960436": {"ViewCount": "1014", "Body": "<p>I couldn't find an answer to this anywhere. I just read K&amp;R and saw them calling a function pointer like this:</p>\n<pre><code>(*ptr)(arg1, arg2);\n</code></pre>\n<p>I vividly remember, however, to have seen someone using them like this:</p>\n<pre><code>ptr(arg1, arg2);\n</code></pre>\n<p>That might have been in C++, though.</p>\n<ul>\n<li>How are the rules?</li>\n<li>Do they differ in C and C++?</li>\n</ul>\n", "AcceptedAnswerId": "23960657", "Title": "Is the asterisk optional when calling a function pointer?", "CreationDate": "2014-05-30T17:39:03.310", "Id": "23960436", "CommentCount": "4", "FavoriteCount": "6", "PostTypeId": "1", "LastEditDate": "2014-05-30T18:14:37.140", "LastEditorUserId": "1090079", "LastActivityDate": "2014-05-30T19:57:39.620", "Score": "20", "OwnerUserId": "3692301", "Tags": "<c++><c><function-pointers><language-lawyer>", "AnswerCount": "2"}, "23960657": {"Id": "23960657", "PostTypeId": "2", "Body": "<p><sup><strong>TL;DR</strong></sup></p>\n<p><sup>The rules in C and C++ are the same, there's no difference between the two.</sup></p>\n<hr>\n<p><strong>What does the C++ Standard (<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3797.pdf\">n3797</a>) say?</strong></p>\n<blockquote>\n<p id=\"so_23960436_23960657_0\"><code>5.2.2p1</code> <strong>Function call</strong> <code>[expr.call]</code></p>\n<blockquote>\n<p id=\"so_23960436_23960657_3\">A function call is a postfix expression followed by parentheses\n    containing a possible empty, comma-separated list of\n    initializer-clauses which constitute the arguments to the function.</p>\n<p id=\"so_23960436_23960657_4\"><strong>The postfix expression shall have function type or pointer to function type</strong>.</p>\n</blockquote>\n</blockquote>\n<hr>\n<p><strong>What does the C standard (<a href=\"http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf\">n1570</a>) say?</strong></p>\n<blockquote>\n<p id=\"so_23960436_23960657_5\"><code>6.3.2.1p4</code> <strong>Lvalues, arrays, and function designators</strong></p>\n<blockquote>\n<p id=\"so_23960436_23960657_7\">A function designator is an expression that has function type. Except when it is the operand of the <code>sizeof</code> operator, the <code>_Alignof</code> operator, or the unary <code>&amp;</code> operator, <strong>a function designator with type \"function returning <em>type</em>\" is converted to an expression that has type \"pointer to function returning <em>type</em>\"</strong>.</p>\n</blockquote>\n</blockquote>\n<p><sup></sup></p>\n<blockquote>\n<p id=\"so_23960436_23960657_8\"><code>6.5.2.2p1</code> <strong>Function calls</strong></p>\n<blockquote>\n<p id=\"so_23960436_23960657_10\"><strong>The expression that denotes the called function shall have type pointer to function</strong> returning <code>void</code> or returning a complete object type other than an array type.</p>\n</blockquote>\n</blockquote>\n<hr>\n<hr>\n<p><strong>Conclusion?</strong></p>\n<p>How the rule are expressed differs between C++ and C. In C the implicit <em>function-to-pointer</em> conversion always applies when calling a function, whereas C++ states that the <em>\"postfix expression\"</em> could be either a pointer, or a variable of function type.</p>\n<p>However; your question is if the two ways of calling a function through a pointer differs between C++ and C, and the answer is: <strong>No, there's no difference between <code>(1)</code>, <code>(2)</code>, and <code>(3)</code></strong>, nor is there a difference between the two languages.</p>\n<pre><code>(*fptr)(123);   // (1)\n</code></pre>\n<p><sup></sup></p>\n<pre><code>fptr(123);      // (2)\n</code></pre>\n<p><sup></sup></p>\n<pre><code>(***fptr)(123); // (3)\n</code></pre>\n<hr>\n<p><sup><strong>Note</strong>: Be aware that the there's no difference between <code>(*fptr) (...)</code> and <code>fptr (...)</code> when it comes to calling a function, but that they can be vastly different in other contexts. </sup></p>\n</hr></hr></hr></hr></hr>", "LastEditorUserId": "1090079", "LastActivityDate": "2014-05-30T19:57:39.620", "Score": "15", "CreationDate": "2014-05-30T17:53:27.843", "ParentId": "23960436", "CommentCount": "6", "OwnerUserId": "1090079", "LastEditDate": "2014-05-30T19:57:39.620"}, "23960564": {"Id": "23960564", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_23960436_23960564_0\">How are the rules? Do they differ in C and C++?</p>\n</blockquote>\n<p>No. Dereferencing the function pointer in this context was <strong>never</strong> necessary, as it is redundant.</p>\n<p>However, you might still want to use the asterisk-notation to underline that you are calling a function through a function pointer. That may also be the reason for the author of the snippet in your post.</p>\n", "LastActivityDate": "2014-05-30T17:46:49.370", "CommentCount": "8", "CreationDate": "2014-05-30T17:46:49.370", "ParentId": "23960436", "Score": "3", "OwnerUserId": "3647361"}});