post_cb({"bq_ids": {"n4140": {"so_26631169_26631169_0": {"length": 9, "quality": 1.0, "section_id": 6077}, "so_26631169_26631169_1": {"length": 5, "quality": 1.0, "section_id": 3221}}, "n3337": {"so_26631169_26631169_0": {"length": 9, "quality": 1.0, "section_id": 5845}, "so_26631169_26631169_1": {"length": 5, "quality": 1.0, "section_id": 3095}}, "n4659": {"so_26631169_26631169_0": {"length": 9, "quality": 1.0, "section_id": 7573}, "so_26631169_26631169_1": {"length": 5, "quality": 1.0, "section_id": 3978}}}, "26631842": {"Id": "26631842", "PostTypeId": "2", "Body": "<p>It's not particularly important to know how much storage a reference requires, only the change in storage requirements caused by adding a reference.  And that you can determine:</p>\n<pre><code>struct with\n{\n    char c;\n    T&amp; ref;\n};\n\nstruct without\n{\n    char c;\n};\n\nreturn sizeof (with) - sizeof (without);\n</code></pre>\n", "LastActivityDate": "2014-10-29T13:37:37.560", "CommentCount": "4", "CreationDate": "2014-10-29T13:37:37.560", "ParentId": "26631169", "Score": "2", "OwnerUserId": "103167"}, "26631169": {"ViewCount": "1620", "Body": "<p>According to the standard, in [expr.sizeof] (5.3.3.2) we get:</p>\n<blockquote>\n<p id=\"so_26631169_26631169_0\">When applied to a reference or a reference type, the result is the size of the referenced type.</p>\n</blockquote>\n<p>This seems to go along with the fact that references are unspecified [dcl.ref] (8.3.2.4):</p>\n<blockquote>\n<p id=\"so_26631169_26631169_1\">It is unspecified whether or not a reference requires storage</p>\n</blockquote>\n<p>But it seems pretty strange to me to have this kind of inconsistency within the language. Regardless of whether or not the reference requires storage, wouldn't it be important to be able to determine how much size the reference uses? Seeing these results just seems wrong:</p>\n<pre><code>sizeof(vector&lt;int&gt;) == 24\nsizeof(vector&lt;int&gt;*) == 8\nsizeof(vector&lt;int&gt;&amp;) == 24\nsizeof(reference_wrapper&lt;vector&lt;int&gt;&gt;) == 8\n</code></pre>\n<p>What is the reasoning behind wanting <code>sizeof(T&amp;) == sizeof(T)</code> by definition?</p>\n", "AcceptedAnswerId": "26632039", "Title": "Why does sizeof a reference type give you the sizeof the type?", "CreationDate": "2014-10-29T13:06:30.833", "Id": "26631169", "CommentCount": "14", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2014-10-29T13:46:59.607", "Score": "10", "OwnerUserId": "2069064", "Tags": "<c++><language-lawyer>", "AnswerCount": "3"}, "26632039": {"Id": "26632039", "PostTypeId": "2", "Body": "<p>The choice is somewhat arbitrary, and trying to fully justify either option will lead to circular metaphysical arguments.</p>\n<p>The intent of a reference is to be (an alias for) the object itself; under that reasoning it makes sense for them both to have the same size (and address), and that is what the language specifies.</p>\n<p>The abstraction is leaky - sometimes a reference has its own storage, separate from the object - leading to anomolies like those you point out. But we have pointers for when we need to deal with a \"reference\" as a separate entity to the object.</p>\n", "LastActivityDate": "2014-10-29T13:46:55.220", "CommentCount": "1", "CreationDate": "2014-10-29T13:46:55.220", "ParentId": "26631169", "Score": "11", "OwnerUserId": "204847"}, "26631485": {"Id": "26631485", "PostTypeId": "2", "Body": "<p><strong>Argument 1:</strong> A reference should be a synonym of your object hence the interface of the reference should be exactly the same as the interface of the object, also all operators should work in the same way on object and on reference (except type operators).</p>\n<p>It will make sense in the following code:</p>\n<pre><code>MyClass a;\nMyClass&amp; b = a;\nchar a_buf[sizeof(a)];\nchar b_buf[sizeof(b)]; // you want b_buf be the same size as a_buf\nmemcpy(&amp;a, a_buf, sizeof(a));\nmemcpy(&amp;b, b_buf, sizeof(b)); // you want this line to work like the above line\n</code></pre>\n<p><strong>Argument 2:</strong> From C++ standard's point of view references are something under the hood and it even doesn't say if they occupy memory or not, so it cannot say how to get their size.</p>\n<p><strong>How to get reference size:</strong> Since by all compilers references are implemented by help of constant pointers and they occupy memory, there is a way to know their size.</p>\n<pre><code>class A_ref\n{A&amp; ref;}\nsizeof(A_ref);\n</code></pre>\n", "LastEditorUserId": "509233", "LastActivityDate": "2014-10-29T13:46:59.607", "Score": "11", "CreationDate": "2014-10-29T13:20:51.343", "ParentId": "26631169", "CommentCount": "8", "OwnerUserId": "509233", "LastEditDate": "2014-10-29T13:46:59.607"}});