post_cb({"15094682": {"ParentId": "15094514", "CommentCount": "1", "Body": "<p>Initialization of objects with <em>static</em> duration is divided in two passes, <em>static</em> initialization and <em>dynamic</em> initialization (note the abuse of the term <em>static</em> :)).</p>\n<p><em>Dynamic</em> initialization refers to initialization that involves calling functions, and thus must take place at runtime, compared with initialization from literals that can be stored in the executable itself and just loaded.</p>\n", "OwnerUserId": "36565", "PostTypeId": "2", "Id": "15094682", "Score": "5", "CreationDate": "2013-02-26T16:48:06.780", "LastActivityDate": "2013-02-26T16:48:06.780"}, "15094514": {"CommentCount": "5", "AcceptedAnswerId": "15094635", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2013-02-26T16:40:36.857", "LastActivityDate": "2017-06-29T13:13:15.973", "LastEditDate": "2017-05-23T11:50:30.543", "ViewCount": "334", "FavoriteCount": "1", "Title": "What exactly does \"static initialization\" mean?", "Id": "15094514", "Score": "4", "Body": "<p>I've been reading up on PODs in C++11, and several of the places I've read have said something about PODs supporting static initialization. For example:</p>\n<p><a href=\"https://stackoverflow.com/a/7189821/1287251\">On StackOverflow</a>:</p>\n<blockquote>\n<p id=\"so_15094514_15094514_0\">The idea of a POD is to capture basically two distinct properties:<br>\n   1. <strong>It supports static initialization</strong>, and<br>\n   2. Compiling a POD in C++ gives you the same memory layout as a struct compiled in C.</br></br></p>\n</blockquote>\n<p>(only the bolded part is relavent)</p>\n<p><a href=\"http://en.wikipedia.org/wiki/C++11#Modification_to_the_definition_of_plain_old_data\" rel=\"nofollow noreferrer\">On Wikipedia</a>:</p>\n<blockquote>\n<p id=\"so_15094514_15094514_1\">A type that is trivial can be statically initialized.</p>\n</blockquote>\n<p>Apparently I'm not understanding what static initialization is. I thought making a global variable was an example of static initialization, but I can do the following and yet <code>Foo</code> isn't a POD:</p>\n<pre><code>#include &lt;type_traits&gt;\n#include &lt;iostream&gt;\n\nstruct Foo {\n  Foo() : x(0), y(0) {}\n  int x;\n  int y;\n};\n\nstruct Bar {\n  Bar() = default;\n  int x;\n  int y;\n};\n\n// Apparently the following two lines are not \"static initialization\" because\n// Foo is non-POD yet we can still do this:\nFoo f;\nBar b;\n\nint main()\n{\n    if (std::is_pod&lt;Foo&gt;::value) std::cout &lt;&lt; \"Foo is a POD\" &lt;&lt; std::endl;\n    else                         std::cout &lt;&lt; \"Foo is *not* a POD\" &lt;&lt; std::endl;\n\n    if (std::is_pod&lt;Bar&gt;::value) std::cout &lt;&lt; \"Bar is a POD\" &lt;&lt; std::endl;\n    else                         std::cout &lt;&lt; \"Bar is *not* a POD\" &lt;&lt; std::endl;\n}\n</code></pre>\n<p><a href=\"http://ideone.com/flearO\" rel=\"nofollow noreferrer\">Output</a>:</p>\n<blockquote>\n<p id=\"so_15094514_15094514_2\"><code>Foo is *not* a POD</code><br>\n<code>Bar is a POD</code></br></p>\n</blockquote>\n<p>So what exactly is static initialization, and how does it relate to trivial classes? Examples would be awesome.</p>\n", "Tags": "<c++><c++11>", "OwnerUserId": "1287251", "AnswerCount": "4"}, "15094780": {"ParentId": "15094514", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Static initialization applies to variables with static or thread storage duration. It happens in two phases.</p>\n<p>First, variables with static storage duration are zero-initialized before any other initialization.</p>\n<p>Then constant initialization is performed. Constant initialization has to be one of the following three possibilities (\u00a73.6.2/2):</p>\n<blockquote>\n<ul>\n<li><p id=\"so_15094514_15094780_0\">if each full-expression (including implicit conversions) that appears in the initializer of a reference with static or thread storage duration is a constant expression (5.19) and the reference is bound to an lvalue designating an object with static storage duration or to a temporary (see 12.2);</p></li>\n<li><p id=\"so_15094514_15094780_1\">if an object with static or thread storage duration is initialized by a constructor call, if the constructor is a constexpr constructor, if all constructor arguments are constant expressions (including conversions), and if, after function invocation substitution (7.1.5), every constructor call and full-expression in the mem-initializers and in the brace-or-equal-initializers for non-static data members is a constant expression;</p></li>\n<li><p id=\"so_15094514_15094780_2\">if an object with static or thread storage duration is not initialized by a constructor call and if every full-expression that appears in its initializer is a constant expression.</p></li>\n</ul>\n</blockquote>\n<p>Any other initialization (even of a global variable) is dynamic initialization. A compiler is, however, allowed to treat dynamic initialization as if it were static initialization, provided that doing so doesn't change the externally visible effects of the program, assuming it can figure out the correct value (even if that value doesn't officially qualify as a constant expression).</p>\n<p>The definition of a <code>constant expression</code> is (unfortunately) rather long and involved. The basic style of the definition is to define a <code>core constant expression</code> as any expression except those fitting a list of exceptions (that, unfortunately, is more than a page long so summarizing it to something that's quick and easy to understand wouldn't be easy).</p>\n", "OwnerUserId": "179910", "LastEditorUserId": "179910", "LastEditDate": "2013-02-26T17:00:07.553", "Id": "15094780", "Score": "5", "CreationDate": "2013-02-26T16:53:14.600", "LastActivityDate": "2013-02-26T17:00:07.553"}, "15094635": {"ParentId": "15094514", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>Static initialization is initialization of some variable with a compile-time value such that the value ends up being \"baked into\" the executable image (no code needs to be actually <em>run</em>):</p>\n<pre><code>struct Foo {\n  int x;\n  int y;\n};\n\nFoo foo = { 0, 1 };\n</code></pre>\n<p>In the above example <code>struct Foo</code> is POD, so the compiler knows that its memory layout is just two integers next to each other. It also knows that <code>foo.x</code> should be initialized to <code>0</code> and <code>foo.y</code> to <code>1</code>. This is enough information to produce a \"memory image\" of how <code>foo</code> should look <strong>at compile time</strong> and write it into the executable image.</p>\n<p>When the image is later run, the OS loader maps its contents to a memory address and in this way makes <code>foo</code> \"alive\". The important thing is that the \"initialization\" of <code>foo</code> has actually completed before the process (which includes your code and also code from the C/C++ runtimes, which get to run first) has had time to execute even a single CPU instruction.</p>\n", "OwnerUserId": "50079", "LastEditorUserId": "50079", "LastEditDate": "2013-02-26T16:52:10.380", "Id": "15094635", "Score": "4", "CreationDate": "2013-02-26T16:45:29.527", "LastActivityDate": "2013-02-26T16:52:10.380"}, "bq_ids": {"n4140": {"so_15094514_15094780_0": {"section_id": 7151, "quality": 0.9230769230769231, "length": 24}, "so_15094514_15094780_2": {"section_id": 7151, "quality": 1.0, "length": 15}}, "n3337": {"so_15094514_15094780_1": {"section_id": 6895, "quality": 0.9705882352941176, "length": 33}, "so_15094514_15094780_0": {"section_id": 6895, "quality": 0.9230769230769231, "length": 24}, "so_15094514_15094780_2": {"section_id": 6895, "quality": 1.0, "length": 15}}, "n4659": {"so_15094514_15094780_2": {"section_id": 8652, "quality": 0.5333333333333333, "length": 8}}}, "15094712": {"ParentId": "15094514", "PostTypeId": "2", "CommentCount": "3", "Body": "<blockquote>\n<p id=\"so_15094514_15094712_0\">Static member initialization occurs in class scope. Therefore, they can access other member data or functions.</p>\n</blockquote>\n<p>That's quoted from <a href=\"http://msdn.microsoft.com/en-us/library/8yc35419%28v=vs.80%29.aspx\" rel=\"nofollow noreferrer\">MSDN</a></p>\n<p>There is a good example of how it works there.</p>\n", "OwnerUserId": "213040", "LastEditorUserId": "2427065", "LastEditDate": "2017-06-29T13:13:15.973", "Id": "15094712", "Score": "-1", "CreationDate": "2013-02-26T16:49:37.147", "LastActivityDate": "2017-06-29T13:13:15.973"}});