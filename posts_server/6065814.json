post_cb({"6065831": {"ParentId": "6065814", "PostTypeId": "2", "CommentCount": "12", "Body": "<p>The standard demands that an allocation of size <code>0</code> shall return a pointer to a memory block of <code>1</code> byte size, Brb, looking for relevant standards paragraph.</p>\n<hr>\n<p><strong>Edit</strong>:<br>\nFirst, I only got the FDIS of C++0x/11 handy (not at home...), but I believe the wording was similar in C++98/03.</br></p>\n<p>Next, it seems I was wrong. It is nowhere stated that the allocator shall return a memory block of size <code>1</code>. My memory served me wrong. :( Though, I found this little paragraph under 3.7.4.2 [basic.stc.dynamic.allocation] p2:</p>\n<blockquote>\n<p id=\"so_6065814_6065831_0\">Even if the size of the space requested is zero, the request can fail. If the request succeeds, the value returned shall be a non-null pointer value (4.10) p0 different from any previously returned value p1, unless that value p1 was subsequently passed to an operator delete. The effect of dereferencing a pointer returned as a request for zero size is undefined.<strong><sup>35)</sup></strong></p>\n</blockquote>\n<p>At the end of the same site:</p>\n<blockquote>\n<p id=\"so_6065814_6065831_1\"><strong>35)</strong> The intent is to have operator new() implementable by calling std::malloc() or std::calloc(), so the rules are substantially\n  the same. <strong>C++ differs from C in requiring a zero request to return a non-null pointer.</strong></p>\n</blockquote>\n<p>(Emphasis mine.)  </p>\n<p>Now, the FDIS says under <code>17.6.3.5</code> [allocator.requirements], in a note on <code>allocate</code>:</p>\n<pre><code>a.allocate(n)     X::pointer \n</code></pre>\n<blockquote>\n<p id=\"so_6065814_6065831_2\">Memory is allocated for <code>n</code> objects of type <code>T</code> but objects are not constructed. <code>allocate</code> may raise an appropriate exception. <strong>[ Note: If n == 0, the return value is unspecified. \u2014end note ]</strong></p>\n</blockquote>\n<p>(Emphasis mine.)<br>\nSo, you shall not throw, as a return of <em>something</em> is implied by that note. It is, however, not required to return a <code>1</code> byte sized memory block. So, to answer your question: No, you are not allowed to throw in <code>allocate</code> when the size request is <code>0</code> when implementing a standard compliant allocator.</br></p>\n</hr>", "OwnerUserId": "500104", "LastEditorUserId": "500104", "LastEditDate": "2011-05-19T23:48:44.810", "Id": "6065831", "Score": "6", "CreationDate": "2011-05-19T23:08:18.543", "LastActivityDate": "2011-05-19T23:48:44.810"}, "6065961": {"ParentId": "6065814", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>All the standard has to say (\u00a720.1.5/2) is that given</p>\n<ul>\n<li><code>T</code> \u2013 any type</li>\n<li><code>X</code> \u2013 an <em>Allocator</em> class for type <code>T</code></li>\n<li><code>a</code> \u2013 a value of type <code>X&amp;</code></li>\n<li><code>n</code> \u2013 a value of type <code>X::size_type</code>,</li>\n</ul>\n<p>the return value of the expression <code>a.allocate(n)</code> is <em>unspecified</em> if <code>n</code> equals 0.</p>\n<p>One one hand, given that <code>X::allocate</code> doesn't have any mandated exception specification and explicitly <em>may</em> throw <code>std::bad_alloc</code>, I don't see why it couldn't throw some other type of exception as well. On the other hand, the wording specifically calls out the condition wherein <code>n</code> equals zero and directly implies that there <em>is</em> a return value, meaning you <em>shouldn't</em> throw. I think it may be open to some interpretation, but personally I'd side with the latter and consider it an unexceptional code-path.</p>\n", "OwnerUserId": "636019", "LastEditorUserId": "636019", "LastEditDate": "2015-08-14T01:17:38.233", "Id": "6065961", "Score": "7", "CreationDate": "2011-05-19T23:28:07.683", "LastActivityDate": "2015-08-14T01:17:38.233"}, "6065814": {"CommentCount": "1", "AcceptedAnswerId": "6065961", "PostTypeId": "1", "LastEditorUserId": "638231", "CreationDate": "2011-05-19T23:06:18.270", "LastActivityDate": "2015-08-14T01:17:38.233", "LastEditDate": "2011-05-20T07:44:29.457", "ViewCount": "497", "FavoriteCount": "1", "Title": "Standard compliant custom allocator", "Id": "6065814", "Score": "7", "Body": "<p>Is OK to throw an exception when 0 is passed to <code>allocate</code> method?</p>\n<p>Thank you.</p>\n<p>P.S.</p>\n<blockquote>\n<p id=\"so_6065814_6065814_0\">If n == 0, the return value is\n  unspecified.</p>\n</blockquote>\n<p>Does it mean that <code>allocate</code> shouldn't throw an exception? I am inclined to think that if throwing wasn't allowed for n==0, then the standard would clearly spell it out.</p>\n", "Tags": "<c++><allocator>", "OwnerUserId": "638231", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_6065814_6065831_2": {"section_id": 6290, "quality": 0.8333333333333334, "length": 15}, "so_6065814_6065831_1": {"section_id": 7177, "quality": 0.9473684210526315, "length": 18}, "so_6065814_6065831_0": {"section_id": 7177, "quality": 0.8857142857142857, "length": 31}}, "n3337": {"so_6065814_6065831_2": {"section_id": 6050, "quality": 0.8333333333333334, "length": 15}, "so_6065814_6065831_1": {"section_id": 6921, "quality": 0.9473684210526315, "length": 18}, "so_6065814_6065831_0": {"section_id": 6921, "quality": 0.9142857142857143, "length": 32}}, "n4659": {"so_6065814_6065831_2": {"section_id": 7797, "quality": 0.7777777777777778, "length": 14}, "so_6065814_6065831_1": {"section_id": 8685, "quality": 0.9473684210526315, "length": 18}, "so_6065814_6065831_0": {"section_id": 8685, "quality": 0.8857142857142857, "length": 31}}}});