post_cb({"4665867": {"ParentId": "4665709", "PostTypeId": "2", "CommentCount": "34", "Body": "<p>The code is correct, the compiler is out of compliance with the standard, which says (section <code>[expr.eq]</code>, using the wording from C++0x draft n3225, but it should be the same in other versions):</p>\n<blockquote>\n<p id=\"so_4665709_4665867_0\">any pointer to member can be compared to a null pointer constant</p>\n</blockquote>\n<p>and</p>\n<blockquote>\n<p id=\"so_4665709_4665867_1\">If both operands are null, they compare equal.  Otherwise if only one is null, they compare unequal.</p>\n</blockquote>\n<p>relevant definition of null pointer constant (section <code>[conv.ptr]</code>, the <code>std::nullptr_t</code> part is new in C++0x):</p>\n<blockquote>\n<p id=\"so_4665709_4665867_2\">A <em>null pointer constant</em> is an integral constant expression (5.19) prvalue of integer type that evaluates to zero or a prvalue of type <code>std::nullptr_t</code>.</p>\n</blockquote>\n<p>and (section <code>[expr.const]</code>):</p>\n<blockquote>\n<p id=\"so_4665709_4665867_3\">A constant expression is an integral constant expression if it is of integral or enumeration type.</p>\n</blockquote>\n<p>NOTE: As an aside, the implementation-defined representation of pointer-to-virtual-member-function usually is an index into the virtual table, which would be 0 in the question. But according to the standard, the expression inside the assert isn't checking if the representation is zero, it's checking against a zero literal -- it is a null pointer check.</p>\n<p>And the Apple compiler apparently mixed the two up. If you wanted to test if the representation is zero, you could write <code>assert((intptr_t)p != 0)</code> -- and that would be <em>completely</em> non-portable.</p>\n<p>But <strong>the code as written is perfectly portable, to any standard-compliant compiler, and will never assert</strong>.</p>\n<p>EDIT: And one more citation from the standard, which just repeats what we've already learned (section <code>[conv.mem]</code>):</p>\n<blockquote>\n<p id=\"so_4665709_4665867_4\">A null pointer constant (4.10) can be converted to a pointer to member type; the result is the <em>null member pointer value</em> of that type and is distinguishable from any pointer to member not created from a null pointer constant.</p>\n</blockquote>\n", "OwnerUserId": "103167", "LastEditorUserId": "103167", "LastEditDate": "2011-01-12T07:02:47.193", "Id": "4665867", "Score": "10", "CreationDate": "2011-01-12T06:15:10.017", "LastActivityDate": "2011-01-12T07:02:47.193"}, "4665709": {"CommentCount": "7", "ViewCount": "736", "PostTypeId": "1", "LastEditorUserId": "88442", "CreationDate": "2011-01-12T05:48:25.080", "LastActivityDate": "2011-01-12T07:12:23.703", "Title": "Is it always valid C++ to compare a member function pointer with 0?", "FavoriteCount": "1", "LastEditDate": "2011-01-12T06:18:35.580", "Id": "4665709", "Score": "3", "Body": "<p>In the following code, the assertion is not raised with the Visual Studio compiler, but it is raised when compiling for the iPhone using XCode:</p>\n<pre><code>class X\n{\npublic:\n\n virtual void A() {}\n};\n\nX x;\n\nvoid main()\n{\n // Define a valid member function pointer to X::A.\n void (X::*p)() = &amp;X::A;\n\n assert(p != 0);\n}\n</code></pre>\n<p>Is this a bug in the compiler? How else can one check for a null pointer in this case?</p>\n", "Tags": "<c++><function><pointers><member><virtual-functions>", "OwnerUserId": "572252", "AnswerCount": "2"}, "4666161": {"ParentId": "4665709", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The iPhone compiler gets it wrong. </p>\n<p>Note that equality comparison <em>between</em> member function pointers that point to <em>virtual functions</em> produces unspecified result, i.e. this assertion</p>\n<pre><code>assert(&amp;X::A == &amp;X::A);\n</code></pre>\n<p>behaves unpredictably from the formal point of view. </p>\n<p>But comparison of a member function pointers with <em>null-pointer constant</em> is strictly defined by the language. The pointer cannot be null in your example, so it shall not compare equal to a null-pointer constant.</p>\n", "OwnerUserId": "187690", "LastEditorUserId": "187690", "LastEditDate": "2011-01-12T07:12:23.703", "Id": "4666161", "Score": "3", "CreationDate": "2011-01-12T07:05:43.440", "LastActivityDate": "2011-01-12T07:12:23.703"}, "bq_ids": {"n4140": {"so_4665709_4665867_4": {"section_id": 42, "quality": 0.9090909090909091, "length": 20}, "so_4665709_4665867_0": {"section_id": 39, "quality": 0.7142857142857143, "length": 5}, "so_4665709_4665867_1": {"section_id": 6156, "quality": 0.9166666666666666, "length": 11}, "so_4665709_4665867_3": {"section_id": 5464, "quality": 0.875, "length": 7}}, "n3337": {"so_4665709_4665867_4": {"section_id": 39, "quality": 0.9090909090909091, "length": 20}, "so_4665709_4665867_3": {"section_id": 5251, "quality": 0.875, "length": 7}, "so_4665709_4665867_0": {"section_id": 5918, "quality": 1.0, "length": 7}, "so_4665709_4665867_1": {"section_id": 5918, "quality": 1.0, "length": 12}, "so_4665709_4665867_2": {"section_id": 36, "quality": 0.8666666666666667, "length": 13}}, "n4659": {"so_4665709_4665867_3": {"section_id": 6898, "quality": 0.875, "length": 7}, "so_4665709_4665867_0": {"section_id": 39, "quality": 0.7142857142857143, "length": 5}, "so_4665709_4665867_4": {"section_id": 42, "quality": 0.9090909090909091, "length": 20}, "so_4665709_4665867_1": {"section_id": 7653, "quality": 0.9166666666666666, "length": 11}}}});