post_cb({"47230669": {"Id": "47230669", "PostTypeId": "2", "Body": "<p>A declaration like</p>\n<pre><code>void foo1(int, int, int){cout &lt;&lt; \"called foo1\";}\n</code></pre>\n<p>clearly shows in the declaration, that you want to fulfill a requirement with your function - e.g. override a specific function in the base class or interface, which e.g. could be declared there as</p>\n<pre><code>virtual void foo1(int something, int another, int andAnother) = 0;\n</code></pre>\n<p>BUT you don't intend to use the parameters which are handed over to you.</p>\n<p>Another example would be if you want to hand over the function to e.g. another function which expects a function pointer to a void function with three int parameters.</p>\n<pre><code>void giveMeFoo( void (*fn)(int, int, int) ) { ... }\n</code></pre>\n<p>Additionally, higher warning levels issue a warning, if parameters are declared, which are not evaluated in the function body. You can avoid that by leaving the parameter names away.</p>\n<p>The parameters without names are then indeed not accessible in the function body anymore - on purpose. user4581301 has nicely described, why.</p>\n<p>Declaring a standalone function without parameter names as in your example is allowed because of the usages described above, but it obviously makes no sense in most cases. An example where it does make sense is in the comment section. Another example of a standalone function without parameter names could be, if your'e writing a library and want to either maintain backward compatibility (your library function does not need the parameter anymore, but you don't want to break the public header declaration) or you want to reserve a parameter for future use.</p>\n", "LastEditorUserId": "2328447", "LastActivityDate": "2017-11-11T11:25:37.007", "Score": "13", "CreationDate": "2017-11-10T20:30:59.160", "ParentId": "47230544", "CommentCount": "2", "LastEditDate": "2017-11-11T11:25:37.007", "OwnerUserId": "2328447"}, "47230715": {"Id": "47230715", "PostTypeId": "2", "Body": "<p><strong>Yes</strong>. It is legal in C++.</p>\n<p><strong>C++11 n3337 standard 8.4.1(p6) Function definitions:</strong></p>\n<blockquote>\n<p id=\"so_47230544_47230715_0\">Note: Unused parameters need not be named. For example,</p>\n<pre><code>void print(int a, int) {\n    std::printf(\"a = %d\\n\", a);\n}\n</code></pre>\n</blockquote>\n<p>C++14 standard:</p>\n<blockquote>\n<p id=\"so_47230544_47230715_1\">[ 8.3.5.11] <strong>An identifier can optionally be provided as a parameter name; if present in a function definition , it names a parameter\n  (sometimes called \u201cformal argument\u201d).</strong> [Note: In particular, parameter\n  names are also optional in function definitions and names used for a\n  parameter in different declarations and the definition of a function\n  need not be the same.]</p>\n</blockquote>\n", "LastEditorUserId": "63550", "LastActivityDate": "2017-11-11T11:50:48.877", "Score": "9", "CreationDate": "2017-11-10T20:35:01.180", "ParentId": "47230544", "CommentCount": "4", "LastEditDate": "2017-11-11T11:50:48.877", "OwnerUserId": "6935629"}, "47230803": {"Id": "47230803", "PostTypeId": "2", "Body": "<p>Consider a case where you are required to provide a function that meets the following prototype</p>\n<pre><code>void dostuff(int x, int y, int z);\n</code></pre>\n<p>And say you are operating in a 2D space and do not use <code>z</code> inside your implementation. You can</p>\n<pre><code>void dostuff(int x, int y, int z)\n{\n    // use x and y\n}\n</code></pre>\n<p>and just ignore <code>z</code>, but the compiler will likely spot that you have defined but not used <code>z</code> and warn you that you could be making a mistake. Instead you can </p>\n<pre><code>void dostuff(int x, int y, int )\n{\n    // use x and y\n}\n</code></pre>\n<p>and leave out the definition of <code>z</code>. The compiler will accept and silently discard the third parameter because it knows you don't want it.</p>\n<p>You do not want to simply turn off the warning because of errors like this</p>\n<pre><code>void dostuff(int x, int y, int z)\n{\n    for (int z = 0; z &lt; MAX; z++)\n    {\n        // use x and y and z, the local z. \n    }\n}\n</code></pre>\n<p>Where a poorly-named loop index shadows the parameter <code>z</code>. The caller's input is now ignored and this could have bad consequences. This error is often hard to spot with the mark 1 eyeball, especially if the local <code>z</code> is buried somewhere deep in a complex function.</p>\n<p>Anytime the compiler can pick off a possible bug in your code, take advantage. It means less work for you.</p>\n", "LastEditorUserId": "4581301", "LastActivityDate": "2017-11-11T16:33:13.870", "Score": "29", "CreationDate": "2017-11-10T20:41:18.757", "ParentId": "47230544", "CommentCount": "4", "LastEditDate": "2017-11-11T16:33:13.870", "OwnerUserId": "4581301"}, "bq_ids": {"n4140": {"so_47230544_47230715_1": {"length": 26, "quality": 0.8125, "section_id": 3247}, "so_47230544_47230715_0": {"length": 5, "quality": 0.7142857142857143, "section_id": 3267}}, "n3337": {"so_47230544_47230715_1": {"length": 30, "quality": 0.9375, "section_id": 3120}, "so_47230544_47230715_0": {"length": 5, "quality": 0.7142857142857143, "section_id": 3139}}, "n4659": {"so_47230544_47230715_1": {"length": 26, "quality": 0.8125, "section_id": 4005}, "so_47230544_47230715_0": {"length": 5, "quality": 0.7142857142857143, "section_id": 4025}}}, "47230544": {"ViewCount": "1829", "Body": "<p>Given a function in C++ with arguments that are only types and have no identifiers,</p>\n<pre><code> void foo1(int, int, int){cout &lt;&lt; \"called foo1\";}\n</code></pre>\n<p>I can call it as such:</p>\n<pre><code>int main()\n{\n    foo1(10, 10, 10);\n}\n</code></pre>\n<p>Why is this a valid construct in C++? Is this just an idiosyncrasy of C++, or does this kind of declaration actually have some purpose? Can we actually access the arguments that have been passed in somehow?\n(This kind of method declaration will not work in Java.)</p>\n", "Title": "Why is a function without argument identifiers valid in C++?", "CreationDate": "2017-11-10T20:22:14.687", "LastActivityDate": "2017-11-11T16:33:13.870", "CommentCount": "7", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2017-11-11T11:48:40.853", "LastEditorUserId": "63550", "Id": "47230544", "Score": "29", "OwnerUserId": "1389753", "Tags": "<c++><function><syntax>", "AnswerCount": "4"}, "47239632": {"Id": "47239632", "PostTypeId": "2", "Body": "<p>It's legal, and if you're wondering why:</p>\n<blockquote>\n<p id=\"so_47230544_47239632_0\">Typically, unnamed arguments arise from the simplification of code or\n  from planning ahead for extensions. In both cases, leaving the\n  argument in place, although unused, ensures that callers are not\n  affected by the change.</p>\n</blockquote>\n<p>Excerpt From: Bjarne Stroustrup. \u201cThe C++ Programming Language, Fourth Edition.\u201d</p>\n", "LastActivityDate": "2017-11-11T15:36:17.030", "Score": "6", "CreationDate": "2017-11-11T15:36:17.030", "ParentId": "47230544", "CommentCount": "0", "OwnerUserId": "233076"}});