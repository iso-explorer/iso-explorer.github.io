post_cb({"21192659": {"CommentCount": "1", "ViewCount": "2619", "CreationDate": "2014-01-17T17:56:13.333", "LastActivityDate": "2014-01-17T18:35:24.620", "PostTypeId": "1", "AcceptedAnswerId": "21193316", "FavoriteCount": "6", "Title": "Variadic templates and std::bind", "Id": "21192659", "Score": "8", "Body": "<p>Given the following templated function, how can I change it to take advantage of variadic templates?  That is to say, to replace std::bind placeholders with a variadic parameter instead of P1 and P2?  At the moment I have one of these functions per arity, with arity zero having no P parameter, up to arity 9 having P1 to P9 parameters.  I was hoping to collapse this into a single function if possible.</p>\n<pre><code>template&lt;typename R, typename T, typename U, typename P1, typename P2&gt;\nvoid Attach(R (T::*f)(P1, P2), U p)\n{\n    AttachInternal(p, std::bind(f, \n                                p.get(), \n                                std::placeholders::_1, \n                                std::placeholders::_2));\n}\n</code></pre>\n", "Tags": "<c++><templates>", "OwnerUserId": "416274", "AnswerCount": "1"}, "21193316": {"ParentId": "21192659", "CommentCount": "7", "CreationDate": "2014-01-17T18:35:24.620", "OwnerUserId": "420683", "PostTypeId": "2", "Id": "21193316", "Score": "17", "Body": "<p>You can (partially) specialize <code>std::is_placeholder</code> for specializations of a custom template. This way, you can introduce a placeholder generator via the usual <code>int_sequence</code> technique.</p>\n<p>From [func.bind.isplace]/2</p>\n<blockquote>\n<p id=\"so_21192659_21193316_0\">The implementation shall provide a definition that has the <code>BaseCharacteristic</code> of <code>integral_constant&lt;int, J&gt;</code>\n  if <code>T</code> is the type of <code>std::placeholders::_J</code>, otherwise it shall have a <code>BaseCharacteristic</code> of <code>integral_constant&lt;int, 0&gt;</code>. A program may specialize this template for a user-defined type <code>T</code> to have a <code>BaseCharacteristic</code> of <code>integral_constant&lt;int, N&gt;</code> with <code>N &gt; 0</code> to indicate that <code>T</code> should be treated as a placeholder type.</p>\n</blockquote>\n<p>The usual <code>int_sequence</code>:</p>\n<pre><code>#include &lt;cstddef&gt;\n\ntemplate&lt;int...&gt; struct int_sequence {};\n\ntemplate&lt;int N, int... Is&gt; struct make_int_sequence\n    : make_int_sequence&lt;N-1, N-1, Is...&gt; {};\ntemplate&lt;int... Is&gt; struct make_int_sequence&lt;0, Is...&gt;\n    : int_sequence&lt;Is...&gt; {};\n</code></pre>\n<p>The custom placeholder template and specialization of <code>is_placeholder</code>:</p>\n<pre><code>template&lt;int&gt; // begin with 0 here!\nstruct placeholder_template\n{};\n\n#include &lt;functional&gt;\n#include &lt;type_traits&gt;\n\nnamespace std\n{\n    template&lt;int N&gt;\n    struct is_placeholder&lt; placeholder_template&lt;N&gt; &gt;\n        : integral_constant&lt;int, N+1&gt; // the one is important\n    {};\n}\n</code></pre>\n<p>I'm not sure where to introduce the <code>1</code>; the places I considered are all not optimal.</p>\n<p>Using it to write some binder:</p>\n<pre><code>template&lt;class Ret, class... Args, int... Is&gt;\nvoid my_bind(Ret (*p)(Args...), int_sequence&lt;Is...&gt;)\n{\n    auto x = std::bind(p, placeholder_template&lt;Is&gt;{}...);\n    x( Args(42)... );\n}\n\ntemplate&lt;class Ret, class... Args&gt;\nvoid my_bind(Ret (*p)(Args...))\n{\n    my_bind(p, make_int_sequence&lt; sizeof...(Args) &gt;{});\n}\n</code></pre>\n<p>Usage example of the binder:</p>\n<pre><code>#include &lt;iostream&gt;\n\nvoid foo(double, char, int) { std::cout &lt;&lt; __PRETTY_FUNCTION__ &lt;&lt; \"\\n\"; }\nvoid bar(bool, short) { std::cout &lt;&lt; __PRETTY_FUNCTION__ &lt;&lt; \"\\n\"; }\n\nint main()\n{\n    my_bind(foo);\n    my_bind(bar);\n}\n</code></pre>\n", "LastActivityDate": "2014-01-17T18:35:24.620"}, "bq_ids": {"n4140": {"so_21192659_21193316_0": {"section_id": 4631, "quality": 0.9583333333333334, "length": 23}}, "n4659": {"so_21192659_21193316_0": {"section_id": 6001, "quality": 0.7916666666666666, "length": 19}}}});