post_cb({"6465210": {"ParentId": "6464436", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>';'s are often used to delimit one bit of C++ source code, indicating it's intentionally separate from the following code.  To see how it's useful, let's imagine we didn't use it:</p>\n<p>For example:</p>\n<pre><code>#include &lt;iostream&gt;\n\nint f() { std::cout &lt;&lt; \"f()\\n\"; }\nint g() { std::cout &lt;&lt; \"g()\\n\"; }\n\nint main(int argc)\n{\n    std::cout &lt;&lt; \"message\"\n\n    \"\\0\\1\\0\\1\\1\"[argc] ? f() : g();  // final ';' needed to make this compile\n                                     // but imagine it's not there in this new\n                                     // semicolon-less C++ variant....\n} \n</code></pre>\n<p>This (horrible) bit of code, called with no arguments such that <code>argc</code> is <code>1</code>, prints:</p>\n<pre><code>ef()\\n\n</code></pre>\n<p>Why not \"messagef()\\n\"?  That's what might be expected given first <code>std::cout &lt;&lt; \"message\"</code>, then <code>\"\\0\\1\\0\\1\\1\"[1]</code> being <code>'\\1'</code> - <code>true</code> in a boolean sense - suggests a call to <code>f()</code> printing <code>f()\\n</code>?</p>\n<p>Because... (drumroll please)... in C++ adjacent string literals are concatenated, so the program's parsed like this:</p>\n<pre><code>std::cout &lt;&lt; \"message\\0\\1\\0\\1\\1\"[argc] ? f() : g();\n</code></pre>\n<p>What this does is:</p>\n<ul>\n<li>find the <code>[argc/1]</code> (second) character in \"message\\0\\1\\0\\1\\1\", which is the first 'e'</li>\n<li>send that 'e' to <code>std::cout</code> (printing it)</li>\n<li>the ternary operator '?' triggers casting of <code>std::cout</code> to <code>bool</code> which produces <code>true</code> (because the printing presumably worked), so <code>f()</code> is called...!</li>\n</ul>\n<p>Given this string literal concatenation is incredibly useful for specifying long strings\n(and even shorter multi-line strings in a readable format), we certainly wouldn't want to assume that such strings shouldn't be concatenated.  Consequently, if the semicolon's gone then the compiler must assume the concatenation is intended, even though visually the layout of the code above implies otherwise.</p>\n<p>That's a convoluted example of how C++ code with and with-out ';'s changes meaning.  I'm sure if I or other readers think on it for a few minutes we could come up with other - and simpler - examples.</p>\n<p>Anyway, the ';' is <em>necessary</em> to inform the compiler that statement termination/separation is intended.</p>\n", "OwnerUserId": "410767", "LastEditorUserId": "410767", "LastEditDate": "2011-06-24T08:35:20.917", "Id": "6465210", "Score": "0", "CreationDate": "2011-06-24T08:26:17.873", "LastActivityDate": "2011-06-24T08:35:20.917"}, "6466219": {"ParentId": "6464436", "CommentCount": "0", "Body": "<p>The semicolon is a <em>punctuator</em>, see 2.13 \u00a71</p>\n<blockquote>\n<p id=\"so_6464436_6466219_0\">The lexical representation of C++ programs includes a number of preprocessing tokens which are used in\n  the syntax of the preprocessor or are converted into tokens for operators and <strong>punctuators</strong></p>\n</blockquote>\n", "OwnerUserId": "252000", "PostTypeId": "2", "Id": "6466219", "Score": "14", "CreationDate": "2011-06-24T09:56:55.850", "LastActivityDate": "2011-06-24T09:56:55.850"}, "6464473": {"ParentId": "6464436", "CommentCount": "1", "Body": "<p>Semicolon denotes sequential composition.  It is also used to delineate declarations.</p>\n", "OwnerUserId": "293627", "PostTypeId": "2", "Id": "6464473", "Score": "4", "CreationDate": "2011-06-24T06:59:22.523", "LastActivityDate": "2011-06-24T06:59:22.523"}, "6464475": {"ParentId": "6464436", "CommentCount": "1", "Body": "<p>The semicolon lets the compiler know that it's reached the end of a command AFAIK.</p>\n", "OwnerUserId": "627452", "PostTypeId": "2", "Id": "6464475", "Score": "0", "CreationDate": "2011-06-24T06:59:27.973", "LastActivityDate": "2011-06-24T06:59:27.973"}, "6464486": {"ParentId": "6464436", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>A semicolon is the thing on the right under the letter <code>p</code>, and it looks like this: <code>;</code></p>\n", "OwnerUserId": "812919", "LastEditorUserId": "435800", "LastEditDate": "2011-06-24T07:12:34.763", "Id": "6464486", "Score": "11", "CreationDate": "2011-06-24T07:00:22.793", "LastActivityDate": "2011-06-24T07:12:34.763"}, "6464641": {"ParentId": "6464436", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The semicolon isn't given a specific name in the C++ standard.  It's simply a character that's used in certain grammar productions (and it just happens to be at the end of them quite often, so it 'terminates' those grammatical constructs).  For example, a semicolon character is at the end of the following parts of the C++ grammar (not necessarily a complete list):</p>\n<ul>\n<li>an <code>expression-statement</code></li>\n<li>a do/while <code>iteration-statement</code></li>\n<li>the various <code>jump-statement</code>s</li>\n<li>the <code>simple-declaration</code></li>\n</ul>\n<p>Note that in an <code>expression-statement</code>, the expression is optional. That's why a 'run' of semicolons, <code>;;;;</code>, is valid in many (but not all) places where a single one is.</p>\n", "OwnerUserId": "12711", "LastEditorUserId": "12711", "LastEditDate": "2011-06-24T07:24:51.230", "Id": "6464641", "Score": "1", "CreationDate": "2011-06-24T07:19:49.590", "LastActivityDate": "2011-06-24T07:24:51.230"}, "6465421": {"ParentId": "6464436", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>If I recall correctly, Kernighan and Ritchie called it punctuation.\nTechnically, it's just a token (or terminal, in compiler-speak), which\ncan occur in specific places in the grammar, with a specific semantics\nin the language.  The distinction between operators and other punctuation\nis somewhat artificial, but useful in the context of C or C++, since\nsome tokens (<code>,</code>, <code>=</code> and <code>:</code>) can be either operators or punctuation,\ndepending on context, e.g.:</p>\n<pre><code>f( a, b );      //  comma is punctuation\nf( (a, b) );    //  comma is operator\na = b;          //  = is assignment operator\nint a = b;      //  = is punctuation\nx = c ? a : b;  //  colon is operator\nlabel:          //  colon is punctuation\n</code></pre>\n<p>In the case of the first two, the distinction is important, since a user\ndefined overload will only affect the operator, not punctuation.</p>\n", "OwnerUserId": "649665", "LastEditorUserId": "675568", "LastEditDate": "2011-09-10T00:32:26.237", "Id": "6465421", "Score": "0", "CreationDate": "2011-06-24T08:45:50.273", "LastActivityDate": "2011-09-10T00:32:26.237"}, "bq_ids": {"n4140": {"so_6464436_6466219_0": {"section_id": 5338, "quality": 0.9333333333333333, "length": 14}}, "n3337": {"so_6464436_6466219_0": {"section_id": 5135, "quality": 0.9333333333333333, "length": 14}}, "n4659": {"so_6464436_6466219_0": {"section_id": 6759, "quality": 0.9333333333333333, "length": 14}}}, "6505153": {"ParentId": "6464436", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>It represents the end of a C++ statement.</p>\n<p>For example,</p>\n<pre><code> int i=0;\n i++;\n</code></pre>\n<p>In the above code there are two statements. The first is for declaring the variable and the second one is for incrementing the value of variable by one.</p>\n", "OwnerUserId": "223752", "LastEditorUserId": "63550", "LastEditDate": "2015-06-18T18:34:58.197", "Id": "6505153", "Score": "0", "CreationDate": "2011-06-28T10:39:58.287", "LastActivityDate": "2015-06-18T18:34:58.197"}, "6464436": {"CommentCount": "10", "AcceptedAnswerId": "6466219", "PostTypeId": "1", "LastEditorUserId": "63550", "CreationDate": "2011-06-24T06:56:17.733", "LastActivityDate": "2015-06-18T18:34:58.197", "LastEditDate": "2015-06-18T18:28:06.847", "ViewCount": "17886", "FavoriteCount": "3", "Title": "What is the semicolon in C++?", "Id": "6464436", "Score": "17", "Body": "<p>Roughly speaking in C++ there are operators <code>(+ , - * [] new ...)</code>, identifiers (names of classes, variables, functions,...), const literals <code>(10, 2.5, \"100\",...)</code>, some keywords <code>(int, class, typename, mutable, ...)</code>, brackets <code>({ } &lt; &gt; )</code>, preprocessor <code>(#, ## ...)</code>. But what is the semicolon?</p>\n", "Tags": "<c++><semicolon>", "OwnerUserId": "509233", "AnswerCount": "12"}, "6464479": {"ParentId": "6464436", "CommentCount": "0", "Body": "<p>Semicolon is a statement terminator.</p>\n", "OwnerUserId": "2583", "PostTypeId": "2", "Id": "6464479", "Score": "7", "CreationDate": "2011-06-24T06:59:46.767", "LastActivityDate": "2011-06-24T06:59:46.767"}, "6464493": {"ParentId": "6464436", "PostTypeId": "2", "CommentCount": "6", "Body": "<p>It is part of the syntax and therein element of several statements. In <a href=\"https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_Form\" rel=\"nofollow\">EBNF</a>:</p>\n<pre><code>&lt;do-statement&gt;\n    ::= 'do' &lt;statement&gt; 'while' '(' &lt;expression&gt; ')' ';'\n\n&lt;goto-statement&gt;\n    ::= 'goto' &lt;label&gt; ';'\n\n&lt;for-statement&gt;\n    ::= 'for' '(' &lt;for-initialization&gt; ';' &lt;for-control&gt; ';' &lt;for-iteration&gt; ')' &lt;statement&gt;\n\n&lt;expression-statement&gt;\n    ::= &lt;expression&gt; ';'\n\n&lt;return-statement&gt;\n    ::= 'return' &lt;expression&gt; ';'\n</code></pre>\n<p>This list is not complete. Please see my comment.</p>\n", "OwnerUserId": "763505", "LastEditorUserId": "63550", "LastEditDate": "2015-06-18T18:33:52.390", "Id": "6464493", "Score": "12", "CreationDate": "2011-06-24T07:00:57.450", "LastActivityDate": "2015-06-18T18:33:52.390"}, "6464490": {"ParentId": "6464436", "CommentCount": "0", "Body": "<p>The semicolon (;) is a command in C++. It tells the compiler that you're at the end of a command.</p>\n", "OwnerUserId": "572586", "PostTypeId": "2", "Id": "6464490", "Score": "0", "CreationDate": "2011-06-24T07:00:48.393", "LastActivityDate": "2011-06-24T07:00:48.393"}, "6464494": {"ParentId": "6464436", "CommentCount": "0", "Body": "<p>The semicolon is a terminal, a token that terminates something. What exactly it terminates depends on the context.</p>\n", "OwnerUserId": "500104", "PostTypeId": "2", "Id": "6464494", "Score": "8", "CreationDate": "2011-06-24T07:01:02.637", "LastActivityDate": "2011-06-24T07:01:02.637"}});