post_cb({"40758070": {"CommentCount": "0", "AcceptedAnswerId": "40758374", "CreationDate": "2016-11-23T07:06:27.467", "LastActivityDate": "2016-11-23T08:07:20.760", "PostTypeId": "1", "ViewCount": "121", "FavoriteCount": "1", "Title": "Difference of behavior betwen libstdc++ and libc++: operator>> on bitset", "Id": "40758070", "Score": "4", "Body": "<p>Consider the following code:</p>\n<pre><code>#include &lt;bitset&gt;\n#include &lt;sstream&gt;\n#include &lt;iostream&gt;\n\nint main(int argc, char* argv[])\n{\n    std::stringstream stream;\n    std::bitset&lt;1&gt; bitset(1);\n    std::cout&lt;&lt;\"before = \"&lt;&lt;bitset[0]&lt;&lt;std::endl;\n    stream&lt;&lt;\"4\";\n    stream&gt;&gt;bitset;\n    std::cout&lt;&lt;\"after = \"&lt;&lt;bitset[0]&lt;&lt;std::endl;\n    return 0;\n}\n</code></pre>\n<p>Compiled under <code>g++</code> with <code>libstdc++</code>, the result is:</p>\n<pre><code>&gt; g++ bitset_empty.cpp -o bitset_empty\n&gt; ./bitset_empty \nbefore = 1\nafter = 1\n</code></pre>\n<p>Compiled under <code>clang++</code> with <code>libc++</code>, the result is:</p>\n<pre><code>&gt; clang++ -stdlib=libc++ bitset_empty.cpp -o bitset_empty\n&gt; ./bitset_empty \nbefore = 1\nafter = 0\n</code></pre>\n<p>Which one is right? Both (because of undefined behavior?)? GCC? Clang?</p>\n", "Tags": "<c++><gcc><clang><std><std-bitset>", "OwnerUserId": "882932", "AnswerCount": "2"}, "40758266": {"ParentId": "40758070", "CommentCount": "0", "Body": "<p>You should check whether</p>\n<pre><code>stream&gt;&gt;bitset;\n</code></pre>\n<p>succeeds. If it does not, you cannot count on the value of <code>bitset</code> after that.</p>\n<pre><code>#include &lt;bitset&gt;\n#include &lt;sstream&gt;\n#include &lt;iostream&gt;\n\nint main(int argc, char* argv[])\n{\n    std::stringstream stream;\n    std::bitset&lt;1&gt; bitset(1);\n    std::cout&lt;&lt;\"before = \"&lt;&lt;bitset[0]&lt;&lt;std::endl;\n    stream&lt;&lt;\"4\";\n    if ( stream&gt;&gt;bitset )\n    {\n       std::cout&lt;&lt;\"after = \"&lt;&lt;bitset[0]&lt;&lt;std::endl;\n    }\n    else\n    {\n       std::cout &lt;&lt; \"Failed to restore bitset from stream.\\n\";\n    }\n    return 0;\n}\n</code></pre>\n<p>Output using g++ 4.9.3:</p>\n<pre><code>before = 1\nFailed to restore bitset from stream.\n</code></pre>\n", "OwnerUserId": "434551", "PostTypeId": "2", "Id": "40758266", "Score": "2", "CreationDate": "2016-11-23T07:19:57.897", "LastActivityDate": "2016-11-23T07:19:57.897"}, "40758374": {"ParentId": "40758070", "CommentCount": "0", "Body": "<p>From my understanding, libc++ is right here, but it's not the only correct behavior.</p>\n<blockquote>\n<p id=\"so_40758070_40758374_0\">N4140 \u00a720.6.4 [bitset.operators]</p>\n<p id=\"so_40758070_40758374_1\"><em>Effects:</em> Extracts up to N characters from is. Stores these characters in a temporary object str of type <code>basic_string&lt;charT,\n  traits&gt;</code>, then evaluates the expression <code>x = bitset&lt;N&gt;(str)</code>.\n  Characters are extracted and stored until any of the following occurs:</p>\n<ul>\n<li>N characters have been extracted and stored;</li>\n<li>end-of-file occurs on the input sequence;</li>\n<li>the next input character is neither <code>is.widen(\u20190\u2019)</code> nor <code>is.widen(\u20191\u2019)</code> (in which case the input character is not extracted).</li>\n</ul>\n<p id=\"so_40758070_40758374_2\">If no characters are stored in <code>str</code>, calls\n  <code>is.setstate(ios_base::failbit)</code> (which may throw <code>ios_base::failure</code>\n  (27.5.5.4))</p>\n</blockquote>\n<p>It's important to note that <code>x = bitset&lt;N&gt;(str)</code> is not conditional. If <code>ios_base::failure</code> is not thrown, then that is the expression executed. And <code>bitset&lt;N&gt;(\"\"s)</code> (that is, of an empty string) is <code>0</code>.</p>\n<p>Thus, in my understanding, your <code>bitset</code> should be zeroed or the aforementioned exception should've been thrown.</p>\n<p>If no exception is thrown, you may want to test if your operation was successful (by testing the returned stream).</p>\n", "OwnerUserId": "2456565", "PostTypeId": "2", "Id": "40758374", "Score": "2", "CreationDate": "2016-11-23T07:25:58.150", "LastActivityDate": "2016-11-23T07:25:58.150"}, "bq_ids": {"n4140": {"so_40758070_40758374_2": {"section_id": 4182, "quality": 0.8888888888888888, "length": 8}, "so_40758070_40758374_1": {"section_id": 4181, "quality": 0.9523809523809523, "length": 20}}, "n3337": {"so_40758070_40758374_2": {"section_id": 4025, "quality": 0.8888888888888888, "length": 8}, "so_40758070_40758374_1": {"section_id": 4024, "quality": 0.9523809523809523, "length": 20}}, "n4659": {"so_40758070_40758374_2": {"section_id": 5442, "quality": 0.8888888888888888, "length": 8}, "so_40758070_40758374_1": {"section_id": 5441, "quality": 0.9523809523809523, "length": 20}}}});