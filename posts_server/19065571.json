post_cb({"19065582": {"Id": "19065582", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_19065571_19065582_0\">In the first version, if A is false, it returns false, without calculating B, C or D.</p>\n</blockquote>\n<p>That's true for the second version as well. The <code>&amp;&amp;</code> operator is <em>short-circuiting</em> - if the first operand is <code>false</code>, it won't evaluate the second operand.</p>\n<p>However, I'd <em>either</em> remove the brackets from the second version:</p>\n<pre><code>return !A &amp;&amp; !B &amp;&amp; !C &amp;&amp; !D;\n</code></pre>\n<p>or invert it to:</p>\n<pre><code>return !(A || B || C || D);\n</code></pre>\n<p>... depending on which you find simpler to read. I personally prefer to have as few negations as possible. (<code>||</code> is also short-circuiting, so they're equivalent in efficiency.)</p>\n<p>Don't avoid multiple return statements on principle, mind you - there are plenty of times where using multiple return statements gives more readable code. Aim for the most readable code you can, and only worry about efficiency when you've proved that the most readable approach doesn't perform as well as you need it to. In this case, the approaches are equally efficient, so that's not a concern anyway.</p>\n", "LastEditorUserId": "22656", "LastActivityDate": "2013-09-28T09:51:05.767", "Score": "6", "CreationDate": "2013-09-28T09:49:01.900", "ParentId": "19065571", "CommentCount": "1", "OwnerUserId": "22656", "LastEditDate": "2013-09-28T09:51:05.767"}, "bq_ids": {"n4140": {"so_19065571_19065622_3": {"length": 24, "quality": 0.8, "section_id": 6163}}, "n3337": {"so_19065571_19065622_3": {"length": 25, "quality": 0.8333333333333334, "section_id": 5924}}, "n4659": {"so_19065571_19065622_3": {"length": 24, "quality": 0.8, "section_id": 7660}}}, "19065622": {"Id": "19065622", "PostTypeId": "2", "Body": "<p>from ISO/IEC 9899:</p>\n<blockquote>\n<p id=\"so_19065571_19065622_0\">6.5.13 Logical AND operator</p>\n<p id=\"so_19065571_19065622_1\">4\n  Unlike the bitwise binary &amp; operator, the &amp;&amp; operator guarantees left-to-right evaluation; there is a sequence point after the evaluation of the first operand. If the first operand compares equal to 0, the second operand is not evaluated.</p>\n</blockquote>\n<p>And this one for c++:</p>\n<p>from N1905=05-0165</p>\n<blockquote>\n<p id=\"so_19065571_19065622_2\">5.14 Logical AND operator</p>\n<p id=\"so_19065571_19065622_3\">1 The &amp;&amp; operator groups left-to-right. The operands are both implicitly converted to type bool (clause 4). The result\n  is true if both operands are true and false otherwise. Unlike &amp;, &amp;&amp; guarantees left-to-right evaluation: the second\n  operand is not evaluated if the first operand is false.</p>\n</blockquote>\n<p>So in both cases it doesn't have to calculate the whole expression</p>\n", "LastEditorUserId": "2003898", "LastActivityDate": "2013-09-28T10:07:51.103", "Score": "0", "CreationDate": "2013-09-28T09:54:24.453", "ParentId": "19065571", "CommentCount": "0", "OwnerUserId": "2003898", "LastEditDate": "2013-09-28T10:07:51.103"}, "19065596": {"Id": "19065596", "PostTypeId": "2", "Body": "<p>It depends. They both do the same thing.</p>\n<p>If your function really just returns a simple combination of variables and logical operations, then go for <code>return !A &amp;&amp; !B &amp;&amp; !C &amp;&amp; !D;</code> (the parentheses are unnecessary).</p>\n<p>If, however, you are doing long and complex computations, then:</p>\n<ol>\n<li><p>Think about refactoring your code so that one function doesn't in fact do the job of 4 functions;</p></li>\n<li><p>If everything else fails, insert multiple return statements. <strong>It's not that bad.</strong> Enforcing a single exit point at all costs is a stupid coding convention. Allowing more than one return statements can indeed make the code readable in some cases (in particular, error handling).</p></li>\n</ol>\n", "OwnerDisplayName": "user529758", "LastActivityDate": "2013-09-28T09:50:54.810", "Score": "4", "CreationDate": "2013-09-28T09:50:54.810", "ParentId": "19065571", "CommentCount": "0"}, "19065571": {"ViewCount": "123", "Body": "<p>I would like to know if one of this two solution is better than the other :</p>\n<p>Version 1:</p>\n<pre><code>bool myFunction()\n{\n    if (A)\n        return false;\n    if (B)\n        return false;\n    if (C)\n        return false;\n    if (D)\n        return false;\n\n    return true;\n}\n</code></pre>\n<p>Version 2 :</p>\n<pre><code>bool myFunction()\n{\n    return (!A &amp;&amp; !B &amp;&amp; !C &amp;&amp; !D);\n}\n</code></pre>\n<p>I guessed that version 2 may be a bit less efficient as we may have to calculate the whole boolean expression to know if it's true or false. In the first version, if A is false, it returns false, without calculating B, C or D.\nBut I find second version much more readable.</p>\n<p>So what is the best way to do that ?</p>\n<p>Thank you.</p>\n", "AcceptedAnswerId": "19065582", "Title": "Function with multiple if or with a \"big\" return?", "CreationDate": "2013-09-28T09:47:28.837", "Id": "19065571", "CommentCount": "4", "PostTypeId": "1", "ClosedDate": "2013-09-28T19:30:54.860", "LastActivityDate": "2013-09-28T10:07:51.103", "Score": "2", "OwnerUserId": "1527491", "Tags": "<c++><c><optimization><return><condition>", "AnswerCount": "3"}});