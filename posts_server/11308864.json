post_cb({"11308910": {"ParentId": "11308864", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2012-07-03T10:22:41.327", "Score": "2", "LastEditorUserId": "69178", "LastEditDate": "2012-07-03T10:26:32.273", "Id": "11308910", "OwnerUserId": "417292", "Body": "<p><code>throw;</code> on its own rethrows the exception that is currently being processed, but there isn't one in your code.</p>\n<p>You need to throw something. Try something like <code>throw std::runtime_error(\"my message\");</code> instead. You'll need to include <code>#include &lt;stdexcept&gt;</code> for this.</p>\n<p>In real code you'll want to create your own exception class to throw most likely</p>\n", "LastActivityDate": "2012-07-03T10:26:32.273"}, "11308864": {"CommentCount": "0", "AcceptedAnswerId": "11308899", "CreationDate": "2012-07-03T10:19:38.853", "LastActivityDate": "2012-07-03T10:36:53.420", "PostTypeId": "1", "ViewCount": "1044", "FavoriteCount": "1", "Title": "c++ trivial try-catch causes abort", "Id": "11308864", "Score": "4", "Body": "<p>the simple code  below</p>\n<pre><code>// g++ centro.cc -o centro\n\n#include &lt;iostream&gt;\nusing namespace std;\n\nint  main(int argc, char *argv[])\n{\n    try\n    {\n        cout &lt;&lt; \"Going to throw\" &lt;&lt; endl;\n        throw;\n    }\n    catch(...)\n    {\n        cout &lt;&lt; \"An exception occurred\" &lt;&lt; endl;\n    }\n    return 0;\n}\n</code></pre>\n<p>produces an abort:</p>\n<pre><code>Going to throw\nterminate called without an active exception\nAborted (core dumped)\n</code></pre>\n<p>I don't understand what's wrong, can anybody point me in the right direction?</p>\n", "Tags": "<c++>", "OwnerUserId": "468993", "AnswerCount": "4"}, "11308891": {"ParentId": "11308864", "CommentCount": "0", "CreationDate": "2012-07-03T10:20:56.530", "OwnerUserId": "399317", "PostTypeId": "2", "Id": "11308891", "Score": "8", "Body": "<p>Try thowing <em>something</em>. You aren't throwing any exception.</p>\n<p><code>throw;</code> itself is generally used to re-throw the same exception inside a <code>catch</code> block. </p>\n<p>Compare the result with <code>throw \"something\";</code> or perhaps an instance of <code>std::exception</code>.</p>\n", "LastActivityDate": "2012-07-03T10:20:56.530"}, "11309140": {"ParentId": "11308864", "CommentCount": "0", "CreationDate": "2012-07-03T10:36:53.420", "OwnerUserId": "833362", "PostTypeId": "2", "Id": "11309140", "Score": "3", "Body": "<p>This is mandated by the standard (15.1):</p>\n<blockquote>\n<p id=\"so_11308864_11309140_0\">8) A throw-expression with no operand rethrows the currently handled\n  exception (15.3). The exception is reactivated with the existing\n  temporary; no new temporary exception object is created. The exception\n  is no longer considered to be caught; therefore, the value of\n  std::uncaught_exception() will again be true.</p>\n<p id=\"so_11308864_11309140_1\">9) If no\n  exception is presently being handled, executing a throw-expression\n  with no operand calls std:: terminate() (15.5.1).</p>\n</blockquote>\n", "LastActivityDate": "2012-07-03T10:36:53.420"}, "11308899": {"ParentId": "11308864", "CommentCount": "0", "CreationDate": "2012-07-03T10:21:38.797", "OwnerUserId": "567292", "PostTypeId": "2", "Id": "11308899", "Score": "7", "Body": "<p>Your line</p>\n<pre><code>throw;\n</code></pre>\n<p>is the syntax for re-throwing an exception in a <code>catch</code> block.</p>\n<p>You should write:</p>\n<pre><code>throw std::exception();\n</code></pre>\n", "LastActivityDate": "2012-07-03T10:21:38.797"}, "bq_ids": {"n4140": {"so_11308864_11309140_1": {"section_id": 3342, "quality": 0.8181818181818182, "length": 9}, "so_11308864_11309140_0": {"section_id": 3341, "quality": 0.8148148148148148, "length": 22}}, "n3337": {"so_11308864_11309140_1": {"section_id": 3212, "quality": 0.8181818181818182, "length": 9}, "so_11308864_11309140_0": {"section_id": 3211, "quality": 0.8888888888888888, "length": 24}}, "n4659": {"so_11308864_11309140_1": {"section_id": 7674, "quality": 0.7272727272727273, "length": 8}, "so_11308864_11309140_0": {"section_id": 7673, "quality": 0.5925925925925926, "length": 16}}}});