post_cb({"bq_ids": {"n4140": {"so_25817494_25817552_1": {"length": 8, "quality": 0.8888888888888888, "section_id": 6173}}, "n3337": {"so_25817494_25817552_1": {"length": 8, "quality": 0.8888888888888888, "section_id": 5934}}, "n4659": {"so_25817494_25817552_1": {"length": 8, "quality": 0.8888888888888888, "section_id": 7675}}}, "25817494": {"ViewCount": "113", "Body": "<p>Is it possible to overload <code>-=</code> like this without it being a method of a class?</p>\n<pre><code>vector&lt;int&gt;&amp; operator-=(int a, int b){\n    vector&lt;int&gt; v;\n    v.push_back(a); v.push_back(b);\n    return v\n}\n</code></pre>\n<p>I have a line in a homework assignment that looks something like this:</p>\n<pre><code>SomeStructure-=1-=2-=3;\n</code></pre>\n<p>What it is supposed to do is remove the elements with the indexes 1, 2 and 3 from the structure(in that order).</p>\n<p>It seems like the option I tried above is not possible (I was thinking of collecting all the indexes in a vector and then removing them from the structure one by one). Is there some other way to do this?    </p>\n", "Title": "Overloading operator-= without a class", "CreationDate": "2014-09-12T22:01:07.753", "LastActivityDate": "2015-03-01T16:33:50.337", "CommentCount": "9", "LastEditDate": "2015-03-01T16:33:50.337", "PostTypeId": "1", "LastEditorUserId": "3924118", "Id": "25817494", "Score": "0", "OwnerUserId": "1971525", "Tags": "<c++><operator-overloading>", "AnswerCount": "2"}, "25817552": {"Id": "25817552", "PostTypeId": "2", "Body": "<p>The assignment operator is right to left associative. </p>\n<p>From the C++ Standard</p>\n<blockquote>\n<p id=\"so_25817494_25817552_0\">5.17 Assignment and compound assignment operators [expr.ass]</p>\n<p id=\"so_25817494_25817552_1\">1 The assignment operator (=) and the compound assignment operators\n  all group right-to-left.</p>\n</blockquote>\n<p>So this expression  </p>\n<pre><code>SomeStructure-=1-=2-=3;\n</code></pre>\n<p>is in any case invalid because you may not write </p>\n<pre><code>2 -= 3;\n</code></pre>\n<p>And you may not overload operators for built-in types.</p>\n<p>I advice to write simply a function for example with name erase which will have parameter of type <code>std::initializer_list</code> In this case you could write</p>\n<pre><code>SomeStructure.erase( { 1, 2, 3 } );\n</code></pre>\n", "LastEditorUserId": "2877241", "LastActivityDate": "2014-09-12T22:11:27.753", "Score": "4", "CreationDate": "2014-09-12T22:06:04.610", "ParentId": "25817494", "CommentCount": "9", "OwnerUserId": "2877241", "LastEditDate": "2014-09-12T22:11:27.753"}, "25817573": {"Id": "25817573", "PostTypeId": "2", "Body": "<p>When overloading an operator, at least one of the types passed as parameter has to be a <code>non primitive type</code>, which is not your case, that's why we usually overload operators <code>inside classes</code> and more rarely as <code>global functions</code>.</p>\n", "LastActivityDate": "2014-09-12T22:07:24.890", "CommentCount": "0", "CreationDate": "2014-09-12T22:07:24.890", "ParentId": "25817494", "Score": "1", "OwnerUserId": "3924118"}});