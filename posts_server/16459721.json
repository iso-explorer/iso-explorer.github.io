post_cb({"16460784": {"Id": "16460784", "PostTypeId": "2", "Body": "<p>g++ in linux, refers to the same location for <code>MSG</code> or a <code>const char *</code> if the content is the same</p>\n<p>Given:</p>\n<pre><code>#include &lt;stdio.h&gt;\n\n#define MSG \"Input your last name\"\n\nint main()\n{\n    const char* const msgc = \"Input your last name\";\n\n    printf(\"MACRO %p\\n\", &amp;MSG);\n    printf(\"char %p\\n\", msgc);\n    printf(\"MACRO %p\\n\", &amp;MSG);\n}\n</code></pre>\n<p>The disassembly of the above</p>\n<pre><code>(gdb) disassemble main\nDump of assembler code for function main():\n   0x000000000040070c &lt;+0&gt;:     push   rbp\n   0x000000000040070d &lt;+1&gt;:     mov    rbp,rsp\n   0x0000000000400710 &lt;+4&gt;:     sub    rsp,0x10\n   0x0000000000400714 &lt;+8&gt;:     mov    QWORD PTR [rbp-0x8],0x400864\n   0x000000000040071c &lt;+16&gt;:    mov    esi,0x400864\n   0x0000000000400721 &lt;+21&gt;:    mov    edi,0x400879\n   0x0000000000400726 &lt;+26&gt;:    mov    eax,0x0\n   0x000000000040072b &lt;+31&gt;:    call   0x4005c0 &lt;printf@plt&gt;\n   0x0000000000400730 &lt;+36&gt;:    mov    esi,0x400864\n   0x0000000000400735 &lt;+41&gt;:    mov    edi,0x400883\n   0x000000000040073a &lt;+46&gt;:    mov    eax,0x0\n   0x000000000040073f &lt;+51&gt;:    call   0x4005c0 &lt;printf@plt&gt;\n   0x0000000000400744 &lt;+56&gt;:    mov    esi,0x400864\n   0x0000000000400749 &lt;+61&gt;:    mov    edi,0x400879\n   0x000000000040074e &lt;+66&gt;:    mov    eax,0x0\n   0x0000000000400753 &lt;+71&gt;:    call   0x4005c0 &lt;printf@plt&gt;\n   0x0000000000400758 &lt;+76&gt;:    mov    eax,0x0\n   0x000000000040075d &lt;+81&gt;:    leave  \n   0x000000000040075e &lt;+82&gt;:    ret    \nEnd of assembler dump.\n</code></pre>\n<p><code>0x400864</code> in this case is <code>\"Input your last name\"</code> and <code>msgc</code> and <code>MSG</code> point to the same location.</p>\n", "LastActivityDate": "2013-05-09T11:32:45.000", "CommentCount": "1", "CreationDate": "2013-05-09T11:32:45.000", "ParentId": "16459721", "Score": "0", "OwnerUserId": "109815"}, "16460237": {"Id": "16460237", "PostTypeId": "2", "Body": "<pre><code>But does the same apply to MSG, i.e., does every occurrence of MSG refer to same string literal \n</code></pre>\n<p>The question is meaningless because MSG does not \"refer to\" anything. The preprocessor simply does token replacement ... where you type MSG it's just as if you had typed \"Input your first name\" instead. So what memory is used depends on where you type it; e.g.,</p>\n<pre><code>char* a = MSG;\nchar* b = MSG;\nchar* c = \"Input your first name\";\n</code></pre>\n<p>produces one copy of the string (in a typical implementation that uses a string pool, but the standard doesn't require it), but</p>\n<pre><code>char a[] = MSG;\nchar b[] = MSG;\nchar c[] = \"Input your first name\";\n</code></pre>\n<p>produces three copies of the string. (Although, depending on exactly how you use them, the compiler might optimize them into one or two copies, or even no copies.) </p>\n<p>Additionally, consider</p>\n<pre><code>char* twice = MSG MSG;\n</code></pre>\n<p>which allocates one string containing two copies of MSG. I think this shows most clearly that the notion that MSG \"refers to\" something is a misconception ... your question conflates two quite different issues, macro expansion and string spooling.</p>\n", "LastEditorUserId": "544557", "LastActivityDate": "2013-05-09T20:31:08.057", "Score": "1", "CreationDate": "2013-05-09T11:02:57.823", "ParentId": "16459721", "CommentCount": "0", "OwnerUserId": "544557", "LastEditDate": "2013-05-09T20:31:08.057"}, "16459766": {"Id": "16459766", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_16459721_16459766_0\">My guess is that since macros are handled by Preprocessor, duplicate string literals might be created</p>\n</blockquote>\n<p>They might, but in practice, almost every modern compiler will merge identical string literals into one, so that every different instance of <code>\"foo\"</code> will indeed have the same memory address. But however often this may be done by optimizing compilers: don't rely on it.</p>\n", "OwnerDisplayName": "user529758", "LastActivityDate": "2013-05-09T10:36:17.407", "Score": "0", "CreationDate": "2013-05-09T10:36:17.407", "ParentId": "16459721", "CommentCount": "1"}, "16459910": {"Id": "16459910", "PostTypeId": "2", "Body": "<p>If the string is repeated 100 times in the binary then the size of the binary in memory will be greater - but it won't affect the amount of used heap.</p>\n<p>As for if the string will be repeated 100 times using a #define? Yes it certainly will, if you view the pre-processor output of your source you will see this. However some compilers may then remove the duplicates in a later step (linking I would assume). This feature is called string pooling, MSVC reference is here:</p>\n<p><a href=\"http://msdn.microsoft.com/en-us/library/s0s0asdt(v=vs.110).aspx\" rel=\"nofollow\">http://msdn.microsoft.com/en-us/library/s0s0asdt(v=vs.110).aspx</a></p>\n", "LastActivityDate": "2013-05-09T10:44:16.487", "CommentCount": "1", "CreationDate": "2013-05-09T10:44:16.487", "ParentId": "16459721", "Score": "4", "OwnerUserId": "1124744"}, "16459771": {"Id": "16459771", "PostTypeId": "2", "Body": "<p>A macro gets replace by its actual content every place it occurs by the preprocessor. So by the time the compiler gets to your code, your <code>MSG</code> will have been replace with the actual string every time it occurred, meaning that this string will be hardcoded in your code base.</p>\n<p>What the compiler then does with multiple occurrances of the same string, is dependent on compiler settings etc, but probably will store it once and then refer to it wherever it occurs.</p>\n", "LastActivityDate": "2013-05-09T10:36:26.877", "CommentCount": "2", "CreationDate": "2013-05-09T10:36:26.877", "ParentId": "16459721", "Score": "3", "OwnerUserId": "174614"}, "16459721": {"ViewCount": "208", "Body": "<p>Say I am having a macro</p>\n<p><code>#define MSG \"Input your first name\"</code></p>\n<p>and a const</p>\n<p><code>const char* const msg = \"Input your last name\"</code> \nor\n<code>const std::string msg = \"Input your last name\"</code></p>\n<p>in the same program. </p>\n<p>Now, <code>msg</code> string literal will have a memory location which will be referred to by every reference of <code>msg</code> in the program.</p>\n<p>But does the same apply to <code>MSG</code>, i.e., does every occurrence of <code>MSG</code> refer to same string literal or actually different string literals are created for each occurrence?</p>\n<p>My guess is that since macros are handled by Preprocessor, duplicate string literals might be created (not 100% sure). Is that true?\nI am sure that duplicacy won't matter if it's integral type.</p>\n<p>My question is specific to storage in memory, but other aspects are also welcome.</p>\n<p>In other words, say I am using <code>msg</code> 100 times, but memory utilized is constant, but is memory utilization constant or 100 times if <code>MSG</code> is used 100 times?</p>\n", "AcceptedAnswerId": "16460237", "Title": "Allocations for #define and const", "CreationDate": "2013-05-09T10:33:56.697", "Id": "16459721", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2015-11-30T10:18:34.787", "LastEditorUserId": "4370109", "LastActivityDate": "2015-11-30T10:18:34.787", "Score": "1", "OwnerUserId": "1535728", "Tags": "<c++><c><macros><const><c-preprocessor>", "AnswerCount": "6"}, "bq_ids": {"n4140": {"so_16459721_16460071_0": {"length": 14, "quality": 0.875, "section_id": 5361}}, "n3337": {"so_16459721_16460071_0": {"length": 14, "quality": 0.875, "section_id": 5157}}, "n4659": {"so_16459721_16460071_0": {"length": 14, "quality": 0.875, "section_id": 6789}}}, "16460071": {"Id": "16460071", "PostTypeId": "2", "Body": "<p>Each place in code where you use the macro <code>MSG</code> will contain the literal <code>\"Input your first name\"</code> after preprocessing. However, whether this text will be present in the binary several times or just once depends entirely on your compiler. Quoting <code>[lex.string]\u00a712</code>:</p>\n<blockquote>\n<p id=\"so_16459721_16460071_0\">Whether all string literals are distinct (that is, are stored in nonoverlapping objects) is implementation-defined. The effect of attempting to modify a string literal is undefined.</p>\n</blockquote>\n<p>In other words, the compiler (and/or linker) is free to put the text data into the binary image just once, and have all appearnces of the literal in code refer to the same data.</p>\n", "LastActivityDate": "2013-05-09T10:53:26.270", "CommentCount": "3", "CreationDate": "2013-05-09T10:53:26.270", "ParentId": "16459721", "Score": "1", "OwnerUserId": "1782465"}});