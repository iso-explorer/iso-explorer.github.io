post_cb({"bq_ids": {"n4140": {"so_24237729_24252540_1": {"length": 19, "quality": 0.7307692307692307, "section_id": 5961}, "so_24237729_24252540_2": {"length": 33, "quality": 0.868421052631579, "section_id": 5962}, "so_24237729_24252540_0": {"length": 8, "quality": 0.8, "section_id": 5907}}, "n3337": {"so_24237729_24252540_1": {"length": 19, "quality": 0.7307692307692307, "section_id": 5730}, "so_24237729_24252540_2": {"length": 33, "quality": 0.868421052631579, "section_id": 5731}, "so_24237729_24252540_0": {"length": 8, "quality": 0.8, "section_id": 5679}}, "n4659": {"so_24237729_24252540_1": {"length": 15, "quality": 0.5769230769230769, "section_id": 7448}, "so_24237729_24252540_0": {"length": 8, "quality": 0.8, "section_id": 7389}}}, "24252540": {"Id": "24252540", "PostTypeId": "2", "Body": "<p>As already answered in the comments <a href=\"https://stackoverflow.com/users/410767/tony-d\">@Tony D</a> and <a href=\"https://stackoverflow.com/users/420683/dyp\">@dyp</a>:</p>\n<p><em>\u00a7 9.4.2/2 Static data members [class.static.data]:</em> </p>\n<blockquote>\n<p id=\"so_24237729_24252540_0\"><strong>The initializer expression in the\n  de\ufb01nition of a <code>static</code> data member is in the scope of its class.</strong></p>\n</blockquote>\n<p>The above means that <code>static</code> data members and their initializers can access other <code>private</code> and <code>protected</code> members of their class.</p>\n<p>Also consdering the standard <em>\u00a7 5.1.2/2&amp;3 Lambda expressions [expr.prim.lambda]:</em></p>\n<blockquote>\n<p id=\"so_24237729_24252540_1\"><strong><code>2</code> The evaluation of a lambda-expression results in a prvalue temporary (12.2). This temporary is called the closure object. A lambda-expression shall not appear in an unevaluated operand (Clause 5). [ Note: A closure object behaves like a function object (20.9).-end note]</strong> </p>\n<p id=\"so_24237729_24252540_2\"><strong><code>3</code> The type of the lambda-expression (which is also the type of the closure object) is a unique, unnamed nonunion class type - called the closure type - whose properties are described below. This class type is not an aggregate (8.5.1). The closure type is declared in the smallest block scope, class scope, or namespace scope that contains the corresponding lambda-expression.</strong></p>\n</blockquote>\n<p>Combining the above we end up to the conclusion that <strong>the prvalue temporary closure object of your lambda is declared and defined in the initializer</strong> of the <code>static</code> <code>const</code> data member <code>shy::object</code> and consequently <strong>the scope of the lambda's closure object is the scope of <code>class shy</code>.</strong> As such it can access private members of <code>class shy</code>.   </p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2014-06-16T21:29:39.967", "Score": "10", "CreationDate": "2014-06-16T21:29:39.967", "ParentId": "24237729", "CommentCount": "0", "OwnerUserId": "2352671", "LastEditDate": "2017-05-23T11:57:34.993"}, "24237729": {"ViewCount": "907", "Body": "<p>Consider this piece of code:</p>\n<pre><code>class shy {\nprivate:\n    int dont_touch;    // Private member\n\npublic:\n    static const shy object;\n};\n\n\nconst shy shy::object = []{\n    shy obj;\n    obj.dont_touch = 42;   // Accessing a private member; compiles; WHY?\n    return obj;\n}();\n\n\nint main()\n{\n}\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/b6b13eda6515cf5e\" rel=\"noreferrer\">Live code (Clang)</a></p>\n<p><a href=\"http://coliru.stacked-crooked.com/a/3472bd6bf6d69ca1\" rel=\"noreferrer\">Live code (GCC)</a></p>\n<p>It seems really unintuitive to me. What does the C++11/14 standard say about this? Is this a GCC/Clang bug?</p>\n", "AcceptedAnswerId": "24252540", "Title": "C++11 lambdas can access my private members. Why?", "CreationDate": "2014-06-16T06:28:14.397", "Id": "24237729", "CommentCount": "7", "FavoriteCount": "3", "PostTypeId": "1", "LastActivityDate": "2014-06-16T21:29:39.967", "Score": "14", "OwnerUserId": "1619294", "Tags": "<c++><gcc><c++11><lambda><clang>", "AnswerCount": "1"}});