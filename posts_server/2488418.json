post_cb({"2488451": {"ParentId": "2488418", "CommentCount": "1", "Body": "<p>I think that the explanation is correct. It says that even though a cast is possible from <code>B</code> to  <code>A</code> it should not be done. The reasone is that the inheritance is <em>private</em> and should be considered an implementation detail of <code>B</code> that the users of the class should never care of. It is just the same rules as anything marked <code>private</code> - it should be considered internal to the class. Outside clients should only rely on the <code>public</code> functions and attributes - including <code>public</code>inheritance.</p>\n<p>Personally I have never found any use for private inheritance - I think that it is often better to use composition.</p>\n", "OwnerUserId": "280222", "PostTypeId": "2", "Id": "2488451", "Score": "1", "CreationDate": "2010-03-21T19:41:47.440", "LastActivityDate": "2010-03-21T19:41:47.440"}, "2488418": {"CommentCount": "2", "ViewCount": "693", "LastActivityDate": "2010-03-21T20:35:18.030", "Body": "<p>I found this from C++FAQ</p>\n<blockquote>\n<p id=\"so_2488418_2488418_0\">Generally, No.</p>\n<p id=\"so_2488418_2488418_1\">From a member function or friend of a\n  privately derived class, the\n  relationship to the base class is\n  known, and the upward conversion from\n  PrivatelyDer* to Base* (or\n  PrivatelyDer&amp; to Base&amp;) is safe; no\n  cast is needed or recommended.</p>\n<p id=\"so_2488418_2488418_2\">However users of PrivatelyDer should\n  avoid this unsafe conversion, since it\n  is based on a private decision of\n  PrivatelyDer, and is subject to change\n  without notice.</p>\n</blockquote>\n<p>How to understand the above words? I don't think the explanation is correct or accurate.</p>\n<p>I have a code like this </p>\n<pre><code>class A{\n};\n\nclass B: private A{\n};\n\nint main(){\n\n    B *b = new B();\n    A *a = new A();\n\n    a = b;                    //wrong\n    a = (A*)b;            //right\n\n}\n</code></pre>\n", "PostTypeId": "1", "AcceptedAnswerId": "2488525", "FavoriteCount": "0", "Title": "Should I pointer-cast from a private derived class to its base class?", "Id": "2488418", "Score": "5", "CreationDate": "2010-03-21T19:31:58.813", "Tags": "<c++>", "OwnerUserId": "233254", "AnswerCount": "2"}, "2488525": {"ParentId": "2488418", "LastEditDate": "2010-03-21T20:35:18.030", "CommentCount": "3", "CreationDate": "2010-03-21T20:09:20.243", "OwnerUserId": "179910", "LastEditorUserId": "179910", "PostTypeId": "2", "Id": "2488525", "Score": "4", "Body": "<p>From a purely mechanical viewpoint, you're right: a cast to a private base class will work and produce working results.</p>\n<p>The point of the FAQ is that from a design viewpoint it's generally wrong. Private inheritance is really supposed to mean private -- in other words, even though it may work, you're not supposed to know it'll work, and at some point it may quit working -- since it's officially an implementation detail, not part of the public interface, they could re-implement the class without using inheritance. At that point, the cast wouldn't work any more (but because you've used a cast, the compiler probably won't warn you about it having gone from something you probably shouldn't do to something that can't possibly work at all).</p>\n<p>Edit: Yes, the cast <em>does</em> necessarily work. According to \u00a75.4/7 of the standard:</p>\n<blockquote>\n<p id=\"so_2488418_2488525_0\">... the following static_cast and\n  reinterpret_cast operations\n  (optionally followed by a const_cast\n  operation) may be performed using the\n  cast notation of explicit type\n  conversion, <strong>even if the base class\n  type is not accessible</strong>:</p>\n<p id=\"so_2488418_2488525_1\">\u2014 a pointer to an object of derived\n  class type or an lvalue of derived\n  class type may be explicitly converted\n  to a pointer or reference to an\n  unambiguous base class type,\n  respectively;</p>\n</blockquote>\n<p>[emphasis added]</p>\n", "LastActivityDate": "2010-03-21T20:35:18.030"}, "bq_ids": {"n4140": {"so_2488418_2488525_0": {"section_id": 6126, "quality": 0.7142857142857143, "length": 15}, "so_2488418_2488525_1": {"section_id": 6126, "quality": 1.0, "length": 19}}, "n3337": {"so_2488418_2488525_0": {"section_id": 5890, "quality": 0.7142857142857143, "length": 15}, "so_2488418_2488525_1": {"section_id": 5890, "quality": 1.0, "length": 19}}, "n4659": {"so_2488418_2488525_0": {"section_id": 7623, "quality": 0.7142857142857143, "length": 15}, "so_2488418_2488525_1": {"section_id": 7623, "quality": 1.0, "length": 19}}}});