post_cb({"17485827": {"ViewCount": "451", "Body": "<p>Is it safe to use unique_ptr? \nWhen I use cout in destructor, sometimes it called more then one time. - so it make copy time-to-time. if it take two copy from one object - data can be lost..</p>\n<pre><code>#include &lt;memory&gt;\n\nclass MyException\n{\n    std::unique_ptr&lt;Type&gt; data;\n\n    MyException();\n    ~MyException() {cout&lt;&lt;\"test\"&lt;&lt;endl;}\n\n    MyException(MyException ex&amp;);\n};\n\nint main()\n{\n    try\n    {\n        try\n        {\n            throw MyException();\n        }\n        catch (const MyException&amp; ex)\n        {\n            throw;\n            //or?\n            throw ex; //will be copied?\n        }\n    return 0;\n    }\n    catch(const MyException/*&amp; will be missed. will ex be copied?*/ ex)\n    {\n        throw; //wich ex will be re-throw, copy or original?\n        //or?\n        throw ex; //will be copied?\n    }\n}\n</code></pre>\n<p>Can I be sure, that data will not be lost between re-throws?\nAnd is this good practic to use ptr inside exception to collect error info from different levels?</p>\n<p>Also, can MyException.data be lost after:</p>\n<pre><code>std::exception_ptr ex =  std::current_exception();\nstd::rethrow_exception(ex);\n</code></pre>\n", "Title": "Is it safe to use unique_ptr in an Exception class", "CreationDate": "2013-07-05T09:45:37.567", "LastActivityDate": "2013-07-05T12:50:55.180", "CommentCount": "2", "LastEditDate": "2013-07-05T12:45:03.003", "PostTypeId": "1", "LastEditorUserId": "1389506", "Id": "17485827", "Score": "3", "OwnerUserId": "1389506", "Tags": "<c++><exception><smart-pointers><unique-ptr>", "AnswerCount": "2"}, "17487522": {"Id": "17487522", "PostTypeId": "2", "Body": "<p>As you discovered, you should always say <code>throw;</code> when you want to re-throw an exception, not not <code>throw ex;</code>.  Indeed, <code>throw ex;</code> will copy (and slice, if <code>ex</code> is a reference to a base class!).</p>\n<p>So, always catch by reference, and always re-throw without naming the exception.</p>\n", "LastActivityDate": "2013-07-05T11:11:17.070", "CommentCount": "0", "CreationDate": "2013-07-05T11:11:17.070", "ParentId": "17485827", "Score": "1", "OwnerUserId": "4323"}, "bq_ids": {"n4140": {"so_17485827_17487841_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 3338}}, "n3337": {"so_17485827_17487841_0": {"length": 13, "quality": 1.0, "section_id": 3208}}, "n4659": {"so_17485827_17487841_0": {"length": 11, "quality": 0.8461538461538461, "section_id": 4105}}}, "17487841": {"Id": "17487841", "PostTypeId": "2", "Body": "<p>With gcc 4.7.3 your example doesn't compile, complaining about a missing copy constructor for MyException. This is in the line where it's first thrown, so <code>throw MyException()</code> itself already wants to make a copy (at least in gcc). See also <a href=\"https://stackoverflow.com/questions/10855506/c-throwing-an-exception-invokes-the-copy-constructor\">this stackoverflow question</a> and the <a href=\"http://www.parashift.com/c++-faq/num-copies-of-exception.html\" rel=\"nofollow noreferrer\">C++ FAQ</a>.</p>\n<p>To answer your question about whether using pointers in exceptions is good practice, I would generally say no. Unless the data to be piggybacked onto the exception is huge (which would likely be a design problem), a stack allocated data structure should be preferred. Performance shouldn't be the main concern during exception handling anyway, so copying stuff around isn't a real problem.</p>\n<p>If you really need a pointer (maybe <code>Type</code> has no copy constructor and you can't change that), using <code>shared_ptr</code> could help you in a pinch, although I feel like that would be an ugly hack. I would probably try and reduce the information passed via the exception to the bare minimum that would help callers identify and handle the problem.</p>\n<p>Edit: I found the relevant section in the <a href=\"http://isocpp.org/files/papers/N3690.pdf\" rel=\"nofollow noreferrer\">C++ standard</a>, section 15.1, paragraph 5:</p>\n<blockquote>\n<p id=\"so_17485827_17487841_0\">When the thrown object is a class object, the copy/move constructor and the destructor shall be accessible, even if the copy/move operation is elided.</p>\n</blockquote>\n<p>So it's actually not legal C++ to throw an exception object without a copy constructor.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2013-07-05T12:50:55.180", "Score": "0", "CreationDate": "2013-07-05T11:28:27.473", "ParentId": "17485827", "CommentCount": "1", "OwnerUserId": "1184818", "LastEditDate": "2017-05-23T11:56:32.067"}});