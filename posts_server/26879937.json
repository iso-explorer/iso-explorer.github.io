post_cb({"26880354": {"ParentId": "26879937", "LastEditDate": "2014-11-12T08:00:34.193", "CommentCount": "2", "CreationDate": "2014-11-12T06:05:54.073", "OwnerUserId": "657267", "LastEditorUserId": "657267", "PostTypeId": "2", "Id": "26880354", "Score": "6", "Body": "<p>Simply put:</p>\n<pre><code>struct M { M(M const&amp;) =delete; };\nstruct X { X(X const&amp;) =default; M m; }; // X(X const&amp;) is actually deleted!\n</code></pre>\n<p>Implicitly-declared functions are also considered \"defaulted\" ([dcl.fct.def.default] / 5); a more familiar pre-C++11 example might be something like:</p>\n<pre><code>struct M { protected: M(M const&amp;); };\nstruct X { M m; }; // X's implicit copy constructor is deleted!\n</code></pre>\n<p>Note that if you explicitly default the function <em>after</em> it has been declared, the program is ill-formed if the function would be implicitly deleted ([dcl.fct.def.default] / 5):</p>\n<pre><code>struct M { M(M const&amp;) =delete; };\nstruct X { X(X const&amp;); M m; };\n\nX::X(X const&amp;) =default; // Not allowed.\n</code></pre>\n", "LastActivityDate": "2014-11-12T08:00:34.193"}, "26881788": {"ParentId": "26879937", "LastEditDate": "2014-11-12T07:55:59.163", "CommentCount": "0", "CreationDate": "2014-11-12T07:50:32.320", "OwnerUserId": "1769720", "LastEditorUserId": "1769720", "PostTypeId": "2", "Id": "26881788", "Score": "0", "Body": "<blockquote>\n<p id=\"so_26879937_26881788_0\">a non-static data member of class type M (or array thereof) that cannot be copied/moved because <em>overload resolution (13.3), as applied to M\u2019s corresponding constructor, results in an ambiguity or a function</em> that is deleted or inaccessible from the defaulted constructor</p>\n</blockquote>\n<p>The wording is perhaps slightly contrived, for conciseness most certainly. The idea, as emphasised in the above, is that the function in question <strong>is</strong> the <code>M</code> <em>copy constructor</em> being overloaded in way which renders it inaccessible. So having a member of class <code>M</code> whose copy constructor is made <code>protected</code> for instance would <code>delete</code> the copy constructor of <code>X</code>. Likewise, simply deleting the copy constructor of <code>M</code> would have the same result.</p>\n", "LastActivityDate": "2014-11-12T07:55:59.163"}, "26879937": {"CommentCount": "1", "CreationDate": "2014-11-12T05:31:50.290", "PostTypeId": "1", "AcceptedAnswerId": "26880354", "LastEditorUserId": "1619294", "LastActivityDate": "2014-11-12T08:00:34.193", "AnswerCount": "2", "LastEditDate": "2014-11-12T05:45:46.960", "ViewCount": "303", "FavoriteCount": "2", "Title": "The case when the copy-constructor implicitly defined as deleted", "Id": "26879937", "Score": "7", "Body": "<p>The section <code>N3797::12.8/11 [class.copy]</code> says:</p>\n<blockquote>\n<p id=\"so_26879937_26879937_0\">An implicitly-declared copy/move constructor is an inline public\n  member of its class. A defaulted copy/ move constructor for a class X\n  is defined as deleted (8.4.3) if X has: </p>\n<p id=\"so_26879937_26879937_1\">[...] </p>\n<p id=\"so_26879937_26879937_2\">\u2014 a non-static data\n  member of class type M (or array thereof) that cannot be copied/moved\n  because overload resolution (13.3), as applied to M\u2019s corresponding\n  constructor, results in an ambiguity <em>or a function that is deleted or</em>\n<em>inaccessible from the defaulted constructor</em></p>\n</blockquote>\n<p>The first case about the ambiguity of corresponding copy/move constructor is quite clear. We can write the following:</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nstruct A\n{\n    A(){ }\n    A(volatile A&amp;){ }\n    A(const A&amp;, int a = 6){ }\n};\n\nstruct U\n{\n    U(){ };\n    A a;\n};\n\nU u;\n\nU t = u;\n\nint main(){ }\n</code></pre>\n<p>to reflect that. But what about <em>or a function that is deleted or inaccessible from the defaulted constructor</em>? What's that got with a function inaccessible from the default constructor? Could you provide an example reflecting that?</p>\n", "Tags": "<c++><constructor>", "OwnerDisplayName": "user2953119"}, "bq_ids": {"n4140": {"so_26879937_26881788_0": {"section_id": 460, "quality": 0.8695652173913043, "length": 20}, "so_26879937_26879937_2": {"section_id": 460, "quality": 0.8695652173913043, "length": 20}, "so_26879937_26879937_0": {"section_id": 460, "quality": 0.875, "length": 14}}, "n3337": {"so_26879937_26881788_0": {"section_id": 451, "quality": 0.9565217391304348, "length": 22}, "so_26879937_26879937_2": {"section_id": 451, "quality": 0.9565217391304348, "length": 22}, "so_26879937_26879937_0": {"section_id": 451, "quality": 0.875, "length": 14}}, "n4659": {"so_26879937_26879937_0": {"section_id": 483, "quality": 0.875, "length": 14}, "so_26879937_26879937_2": {"section_id": 483, "quality": 0.8695652173913043, "length": 20}, "so_26879937_26881788_0": {"section_id": 483, "quality": 0.8695652173913043, "length": 20}}}});