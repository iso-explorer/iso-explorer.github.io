post_cb({"33097257": {"ViewCount": "93", "Body": "<p>Suppose I have a base and child class and a bit of multiple inheritance:</p>\n<pre><code>class Child : public Base, public AnotherBase\n{\n};\n</code></pre>\n<p>and a function <code>foo(Base* b)</code>. I've also instantiated a <code>Child* c</code>. I then call <code>foo(c)</code>.</p>\n<p>The compiler makes an implicit cast here. But does it take a C-style cast, a <code>static_cast&lt;Base*&gt;</code> or something else?</p>\n", "AcceptedAnswerId": "33097478", "Title": "Implicit casting - which cast is used", "CreationDate": "2015-10-13T08:02:24.143", "Id": "33097257", "CommentCount": "5", "PostTypeId": "1", "OwnerDisplayName": "user5363114", "LastActivityDate": "2015-10-13T08:13:49.150", "Score": "7", "Tags": "<c++>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_33097257_33097478_0": {"length": 39, "quality": 0.9285714285714286, "section_id": 41}}, "n3337": {"so_33097257_33097478_0": {"length": 39, "quality": 0.9285714285714286, "section_id": 38}}, "n4659": {"so_33097257_33097478_0": {"length": 39, "quality": 0.9285714285714286, "section_id": 41}}}, "33097478": {"Id": "33097478", "PostTypeId": "2", "Body": "<p><code>static_cast</code> and C-style casts are ways of the programmer explicitly asking for a type conversion. Your example is a standard implicit conversion which is described separately rather than in terms of explicit conversions.</p>\n<p>Your example is known as a <em>derived-to-base conversion</em> and is defined in <code>[conv.ptr]/2</code> in the standard:</p>\n<blockquote>\n<p id=\"so_33097257_33097478_0\"><code>N3337:</code> <strong>A prvalue of type \u201cpointer to <em>cv</em> <code>D</code>\u201d, where <code>D</code> is a class type, can be converted to a prvalue of type \u201cpointer to <em>cv</em> <code>B</code>\u201d, where <code>B</code> is a base class of <code>D</code>.</strong> If <code>B</code> is an inaccessible or ambiguous base class of <code>D</code>, a program that necessitates this conversion is ill-formed. The result of the conversion is a pointer to the base class subobject of the derived class object. The null pointer value is converted to the null pointer value of the destination type.</p>\n</blockquote>\n<p>In other words, a <code>D*</code> is always implicitly convertible to a <code>B*</code> with the same <code>const</code> and <code>volitile</code> qualifications.</p>\n", "LastActivityDate": "2015-10-13T08:13:49.150", "CommentCount": "0", "CreationDate": "2015-10-13T08:13:49.150", "ParentId": "33097257", "Score": "5", "OwnerUserId": "496161"}});