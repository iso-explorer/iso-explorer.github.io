post_cb({"34276374": {"ParentId": "34276373", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>This was clarified and made ill-formed by <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#2026\" rel=\"nofollow\">defect report 2026: Zero-initialization and constexpr</a> which asks:</p>\n<blockquote>\n<p id=\"so_34276373_34276374_0\">According to 3.6.2 [basic.start.init] paragraph 2,</p>\n<blockquote>\n<p id=\"so_34276373_34276374_3\">Variables with static storage duration (3.7.1 [basic.stc.static]) or\n    thread storage duration (3.7.2 [basic.stc.thread]) shall be\n    zero-initialized (8.5 [dcl.init]) before any other initialization\n    takes place. </p>\n</blockquote>\n<p id=\"so_34276373_34276374_2\">Does this apply to constant initialization as well? For example,\n  should the following be well-formed, relying on the presumed\n  zero-initialization preceding the constant initialization?</p>\n<pre><code>constexpr int i = i;\nstruct s {\n  constexpr s() : v(v) { }\n  int v;\n};\nconstexpr s s1;\n</code></pre>\n</blockquote>\n<p>The note before the proposed resolution says:</p>\n<blockquote>\n<p id=\"so_34276373_34276374_4\">CWG agreed that constant initialization should be considered as happening instead of zero initialization in these cases, making the declarations ill-formed.</p>\n</blockquote>\n<p>and the proposed resolution clarifies and amongst many changes, removes the following wording:</p>\n<blockquote>\n<p id=\"so_34276373_34276374_5\">Variables with static storage duration (3.7.1) or thread storage duration (3.7.2) shall be zero-initialized (8.5)\n  before any other initialization takes place. [...]</p>\n</blockquote>\n<p>and adds the following wording:</p>\n<blockquote>\n<p id=\"so_34276373_34276374_6\">If constant initialization is not performed, a variable with static storage duration (3.7.1 [basic.stc.static]) or thread storage duration (3.7.2 [basic.stc.thread]) is zero-initialized (8.5 [dcl.init]).  [...]</p>\n</blockquote>\n<p>It is a large change, it renames <em>[basic.start.init]</em> to <em>[basic.start.static]</em> and created a new section <em>[basic.start.dynamic]</em> and modifies <em>[stmt.dcl]</em></p>\n", "OwnerUserId": "1708801", "LastEditorUserId": "1708801", "LastEditDate": "2015-12-16T18:48:59.740", "Id": "34276374", "Score": "23", "CreationDate": "2015-12-14T20:52:41.890", "LastActivityDate": "2015-12-16T18:48:59.740"}, "34276373": {"CommentCount": "4", "ViewCount": "470", "PostTypeId": "1", "LastEditorUserId": "1708801", "CreationDate": "2015-12-14T20:52:41.890", "LastActivityDate": "2015-12-16T18:48:59.740", "Title": "Self-initialization of a static constexpr variable, is it well-formed?", "FavoriteCount": "3", "LastEditDate": "2015-12-15T13:51:32.830", "Id": "34276373", "Score": "26", "Body": "<p>Given the following declaration in the global namespace:</p>\n<pre><code>constexpr int x = x;\n</code></pre>\n<p>Is this well-formed?</p>\n<p>The draft C++14 standard section <code>3.6.2</code> <em>[basic.start.init]</em> says:</p>\n<blockquote>\n<p id=\"so_34276373_34276373_0\">Variables with static storage duration (3.7.1) or thread storage duration (3.7.2) shall be zero-initialized (8.5)\n  before any other initialization takes place. [...]</p>\n</blockquote>\n<p>What seems to make the example well defined is that <code>x</code> is initialized with its own value during constant initialization which will be <code>0</code> due to zero initialization.</p>\n<p>Is this really the case? clang <a href=\"http://melpon.org/wandbox/permlink/nULidJf0jVzsoxgd\">accepts this code</a> while <a href=\"http://melpon.org/wandbox/permlink/rORwnVAg8cDsuCyM\">gcc produces a diagnostic</a>:</p>\n<pre><code>error: the value of 'x' is not usable in a constant expression\nconstexpr int x = x;\n                  ^\n</code></pre>\n", "Tags": "<c++><language-lawyer><c++14><constexpr><c++1z>", "OwnerUserId": "1708801", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_34276373_34276374_5": {"section_id": 7151, "quality": 0.8666666666666667, "length": 13}, "so_34276373_34276374_1": {"section_id": 7151, "quality": 0.7222222222222222, "length": 13}, "so_34276373_34276373_0": {"section_id": 7151, "quality": 0.8666666666666667, "length": 13}, "so_34276373_34276374_3": {"section_id": 7151, "quality": 0.7222222222222222, "length": 13}, "so_34276373_34276374_6": {"section_id": 7151, "quality": 0.5625, "length": 9}}, "n3337": {"so_34276373_34276374_5": {"section_id": 6895, "quality": 0.8666666666666667, "length": 13}, "so_34276373_34276374_1": {"section_id": 6895, "quality": 0.7222222222222222, "length": 13}, "so_34276373_34276374_3": {"section_id": 6895, "quality": 0.7222222222222222, "length": 13}, "so_34276373_34276373_0": {"section_id": 6895, "quality": 0.8666666666666667, "length": 13}}, "n4659": {"so_34276373_34276374_5": {"section_id": 4051, "quality": 0.6, "length": 9}, "so_34276373_34276373_0": {"section_id": 4051, "quality": 0.6, "length": 9}, "so_34276373_34276374_6": {"section_id": 8652, "quality": 0.6875, "length": 11}}}});