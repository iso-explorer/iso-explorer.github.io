post_cb({"19738760": {"Id": "19738760", "PostTypeId": "2", "Body": "<p>Many compilers support <code>#pragma once</code>. All of the standard libraries already have guards either in the form of <code>#pragma once</code> or appropriate preprocessor macros. You can learn more about what the guards look like on <a href=\"http://en.wikipedia.org/wiki/Include_guard\" rel=\"nofollow\">the Wikipedia page</a>. The fastest way to be sure is to right click on the include file definition and ask the development environment (Visual Studio/Eclipse) to open the file. Then you will see the guards.</p>\n", "LastEditorUserId": "23897", "LastActivityDate": "2013-11-02T05:10:53.900", "Score": "3", "CreationDate": "2013-11-02T03:47:21.050", "ParentId": "19738711", "CommentCount": "0", "OwnerUserId": "2813020", "LastEditDate": "2013-11-02T05:10:53.900"}, "19738753": {"Id": "19738753", "PostTypeId": "2", "Body": "<p>These files are located in <code>/usr/include/</code> and subdirectories (at least on my debian laptop).  Looking at <code>/usr/include/stdio.h</code></p>\n<p>shows a typical guard,</p>\n<pre><code>#ifndef _STDIO_H\n# define _STDIO_H       1\n</code></pre>\n<p>And checking for cpp, grep <code>__cplusplus</code>,</p>\n<pre><code>#if !defined __cplusplus || defined __STDC_LIMIT_MACROS\n</code></pre>\n<p>...</p>\n", "LastEditorUserId": "2797476", "LastActivityDate": "2013-11-02T05:13:09.547", "Score": "1", "CreationDate": "2013-11-02T03:45:00.557", "ParentId": "19738711", "CommentCount": "0", "OwnerUserId": "2840714", "LastEditDate": "2013-11-02T05:13:09.547"}, "bq_ids": {"n4140": {"so_19738711_19738767_0": {"length": 32, "quality": 0.9696969696969697, "section_id": 6269}}, "n3337": {"so_19738711_19738767_0": {"length": 32, "quality": 0.9696969696969697, "section_id": 6029}}, "n4659": {"so_19738711_19738767_0": {"length": 32, "quality": 0.9696969696969697, "section_id": 7775}}}, "19738711": {"ViewCount": "1848", "Body": "<p>Small question, I found nothing on google from lack of knowing what to search.</p>\n<p>I am wondering if/ what include guards on files like <code>windows.h</code>, <code>math.h</code>, <code>iostream</code>, <code>stdio</code>... etc.</p>\n<p>Since I have those headers included multiple times in different files. Do those files already have guards built in or is there a definition defined?</p>\n<p>I am just wondering what the standards are for that kind of thing.</p>\n", "AcceptedAnswerId": "19738758", "Title": "C++ Include Guards for Standard Headers", "CreationDate": "2013-11-02T03:37:16.570", "Id": "19738711", "CommentCount": "1", "LastEditDate": "2013-11-02T05:20:12.610", "PostTypeId": "1", "LastEditorUserId": "2279422", "LastActivityDate": "2013-11-02T05:20:12.610", "Score": "4", "OwnerUserId": "2113881", "Tags": "<c++><include-guards>", "AnswerCount": "4"}, "19738758": {"Id": "19738758", "PostTypeId": "2", "Body": "<p>Man, you are incredibly lazy, just open the file (you can even right click the include directive in most editors) and it starts with something like:</p>\n<pre><code>#ifndef _WINDOWS_\n#define _WINDOWS_\n...\n</code></pre>\n<p>So the first time it will go in the file since <code>_WINDOWS_</code> is not defined, therefore it will be defined and the contents of the file will be included. The second time the <code>#ifndef</code> will fail since the define was done previously.</p>\n<p>This is the standard way to put a safeguard, another way which is supported by many compilers is to put <code>#pragma once</code>. This has the advantage to prevent collision in the case someone would define the same constant in another file for example.</p>\n", "LastEditorUserId": "221342", "LastActivityDate": "2013-11-02T03:55:19.333", "Score": "9", "CreationDate": "2013-11-02T03:46:06.290", "ParentId": "19738711", "CommentCount": "1", "OwnerUserId": "221342", "LastEditDate": "2013-11-02T03:55:19.333"}, "19738767": {"Id": "19738767", "PostTypeId": "2", "Body": "<p>The C++ standard requires that the headers be organized such that you can include any of them multiple times, directly or indirectly, without running into problems.  It doesn't mandate how that result will be achieved, just that it shall be achieved.</p>\n<h2>ISO/IEC 14822:2011</h2>\n<blockquote>\n<h3>17.6.2.2 Headers [using.headers]</h3>\n<p id=\"so_19738711_19738767_0\">\u00b62 A translation unit may include library headers in any order (Clause 2). Each may be included more than once, with no effect different from being included exactly once, except that the effect of including either <code>&lt;cassert&gt;</code> or <code>&lt;assert.h&gt;</code> depends each time on the lexically current definition of <code>NDEBUG</code>.<sup>178</sup></p>\n<p id=\"so_19738711_19738767_1\"><sup>178</sup> This is the same as the Standard C library.</p>\n</blockquote>\n", "LastEditorUserId": "15168", "LastActivityDate": "2013-11-02T03:54:19.050", "Score": "9", "CreationDate": "2013-11-02T03:49:11.583", "ParentId": "19738711", "CommentCount": "0", "OwnerUserId": "15168", "LastEditDate": "2013-11-02T03:54:19.050"}});