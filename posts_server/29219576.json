post_cb({"29220039": {"ParentId": "29219576", "PostTypeId": "2", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_29219576_29220039_0\">I'm wondering if it it is possible to have a template template parameter of function</p>\n</blockquote>\n<p>No, you cannot. Your example code snippet won't work.</p>\n<pre><code>template&lt; template &lt;typename T&gt; void templ_param() = func,\n</code></pre>\n<p>A template template parameter must be a class template or an alias template.</p>\n<p>From the C++ standard:</p>\n<blockquote>\n<p id=\"so_29219576_29220039_1\"><strong>14.3.3 Template template arugments</strong></p>\n<p id=\"so_29219576_29220039_2\">1 A <em>template-argument</em> for a template <em>template-parameter</em> shall be the name of a class template or an alias template, expressed as <em>id-expression</em>.</p>\n</blockquote>\n", "OwnerUserId": "434551", "LastEditorUserId": "434551", "LastEditDate": "2015-03-23T21:52:26.933", "Id": "29220039", "Score": "3", "CreationDate": "2015-03-23T20:46:37.123", "LastActivityDate": "2015-03-23T21:52:26.933"}, "29219576": {"CommentCount": "5", "ViewCount": "274", "PostTypeId": "1", "LastEditorUserId": "4031604", "CreationDate": "2015-03-23T20:19:56.990", "LastActivityDate": "2015-03-23T22:02:50.683", "Title": "C++ - Can a template template parameter be of a variable or function?", "AcceptedAnswerId": "29220039", "LastEditDate": "2015-03-23T21:32:44.857", "Id": "29219576", "Score": "1", "Body": "<p>I'm still trying to fully understand templates. I see them as special types.</p>\n<p>Recently I was reading about template template parameters of classes and\nI'm wondering if it it is possible to have a template template parameter of function or variable and not only of class? Something like this:</p>\n<pre><code>template&lt;typename T&gt; void func(T); //template of function 'func'\n\ntemplate&lt;int a&gt; double var = a; //template of variable 'var'\n\ntemplate&lt;template&lt;typename&gt; void templ_param() = func, //parameter template of function\n\ntemplate&lt;int&gt; double templ_param_0 = var //parameter template of variable\n\n&gt; void func1();\n</code></pre>\n<p>EDIT: If not why and what is the alternative?</p>\n", "Tags": "<c++><templates><parameters><c++14><iso>", "OwnerUserId": "4031604", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_29219576_29220039_0": {"section_id": 64, "quality": 0.7142857142857143, "length": 5}, "so_29219576_29220039_2": {"section_id": 92, "quality": 1.0, "length": 10}}, "n3337": {"so_29219576_29220039_0": {"section_id": 59, "quality": 0.7142857142857143, "length": 5}, "so_29219576_29220039_2": {"section_id": 87, "quality": 1.0, "length": 10}}, "n4659": {"so_29219576_29220039_0": {"section_id": 66, "quality": 0.7142857142857143, "length": 5}, "so_29219576_29220039_2": {"section_id": 95, "quality": 1.0, "length": 10}}}, "29220286": {"ParentId": "29219576", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>No, template template parameters may be only types.</p>\n<p>[temp.param]/1 describes template parameter syntax as follows:</p>\n<blockquote>\n<p id=\"so_29219576_29220286_0\"><em>template-parameter:</em></p>\n<ul>\n<li><em>type-parameter</em></li>\n<li><em>parameter-declaration</em></li>\n</ul>\n<p id=\"so_29219576_29220286_1\"><em>type-parameter:</em></p>\n<ul>\n<li><em>type-parameter-key <code>...</code><sub>opt</sub> identifier<sub>opt</sub></em></li>\n<li><em>type-parameter-key identifier<sub>opt</sub></em><code>=</code> <em>type-id</em></li>\n<li><code>template &lt;</code> <em>template-parameter-list</em> <code>&gt;</code> <em>type-parameter-key</em> <code>...</code><em><sub>opt</sub> identifier<sub>opt</sub></em></li>\n<li><code>template &lt;</code> <em>template-parameter-list</em> <code>&gt;</code> <em>type-parameter-key</em> <em>identifier<sub>opt</sub></em><code>=</code> <em>id-expression</em></li>\n</ul>\n<p id=\"so_29219576_29220286_2\"><em>type-parameter-key:</em></p>\n<ul>\n<li><code>class</code></li>\n<li><code>typename</code></li>\n</ul>\n</blockquote>\n<p>So template template parameters are put into category of type-parameters, and indeed, their declaration must contain either <code>class</code> or <code>typename</code> after <code>template&lt;...&gt;</code></p>\n<p>As an alternative you can wrap template functions and variables into classes:</p>\n<pre><code>template &lt;typename T&gt;\nstruct FuncWrapper {\n    static void func(T t) {\n        std::cout &lt;&lt; \"in func \" &lt;&lt; t &lt;&lt; std::endl;\n    }\n};\n\ntemplate &lt;int a&gt;\nstruct VarWrapper {\n    static constexpr double var = a;\n};\n\ntemplate&lt;\n    template &lt;typename T&gt; class FW = FuncWrapper,\n    template &lt;int&gt; class VW = VarWrapper&gt; \nvoid func1() {\n    FW&lt;int&gt;::func(VW&lt;42&gt;::var);\n}\n\nint main() {\n    func1&lt;&gt;();\n}\n</code></pre>\n", "OwnerUserId": "3959454", "LastEditorUserId": "3959454", "LastEditDate": "2015-03-23T22:02:50.683", "Id": "29220286", "Score": "1", "CreationDate": "2015-03-23T21:00:14.530", "LastActivityDate": "2015-03-23T22:02:50.683"}});