post_cb({"46677148": {"CommentCount": "5", "AcceptedAnswerId": "46677534", "PostTypeId": "1", "LastEditorUserId": "3882571", "CreationDate": "2017-10-10T22:47:57.737", "LastActivityDate": "2017-10-20T22:33:33.007", "LastEditDate": "2017-10-20T22:33:33.007", "ViewCount": "191", "FavoriteCount": "1", "Title": "Example from book failing to compile, converting ifstream into bool", "Id": "46677148", "Score": "8", "Body": "<p>I am a student of C++. I am working through the book, \"Starting Out With C++ Early Objects (9th Edition). Example 27 from Chapter 6 (on Functions) reads data from a file but will not compile. Here is the full code:</p>\n<pre><code>// Program 6-27\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;fstream&gt;\n#include &lt;iomanip&gt;\nusing namespace std;\n\n// Function prototype\nbool readData(ifstream &amp;someFile, string &amp;city, double &amp;rain);\n\nint main()\n{\n    ifstream inputFile;\n    string city;\n    double inchesOfRain;\n\n    // Display table headings\n    cout &lt;&lt; \"July Rainfall Totals for Selected Cities \\n\\n\";\n    cout &lt;&lt; \" City      Inches \\n\";\n    cout &lt;&lt; \"_________________ \\n\";\n\n    // Open the data file\n    inputFile.open(\"rainfall.dat\");\n    if (inputFile.fail())\n    cout &lt;&lt; \"Error opening data file.\\n\";\n    else\n    {\n        // Call the readData function\n        // Execute the loop as long as it found and read data\n        while (readData(inputFile, city, inchesOfRain) == true)\n        {\n            cout &lt;&lt; setw(11) &lt;&lt; left &lt;&lt; city;\n            cout &lt;&lt; fixed &lt;&lt; showpoint &lt;&lt; setprecision(2)\n                &lt;&lt; inchesOfRain &lt;&lt; endl;\n        }\n        inputFile.close();\n    }\n    return 0;\n}\n\nbool readData(ifstream &amp;someFile, string &amp;city, double &amp;rain)\n{\n    bool foundData = someFile &gt;&gt; city &gt;&gt; rain;\n    return foundData;\n}\n</code></pre>\n<p>And here's the accompanying data for the data file Rainfall.dat:</p>\n<pre><code>Chicago 3.70\nTampa 6.49\nHouston 3.80\n</code></pre>\n<p>The problem lies with this line in the \"bool readData\" function:</p>\n<pre><code>bool foundData = someFile &gt;&gt; city &gt;&gt; rain;\n</code></pre>\n<p>I am using Visual Studio Community 2017. \"someFile\" gets a red squiggly line and the dropdown displays the following error:</p>\n<blockquote>\n<p id=\"so_46677148_46677148_0\">no suitable conversion function from \"<code>std::basic_istream&lt;char, std::char_traits&lt;char&gt;&gt;</code>\" to \"<code>bool</code>\" exists</p>\n</blockquote>\n<p>I don't really understand the error message but have managed to get this program working with:</p>\n<p>A simple cast:</p>\n<pre><code>bool readData(ifstream &amp;someFile, string &amp;city, double &amp;rain)\n{\n    return static_cast&lt;bool&gt;(someFile &gt;&gt; city &gt;&gt; rain);\n}\n</code></pre>\n<p>Or this as an alternative:</p>\n<pre><code>bool readData(ifstream &amp;someFile, string &amp;city, double &amp;rain)\n{\n    if(someFile &gt;&gt; city &gt;&gt; rain)\n        return true;\n    else\n        return false;\n}\n</code></pre>\n<p>So, my real questions are:</p>\n<ul>\n<li>Are my solutions ok or is there a better way?</li>\n<li>why is an error being thrown at all on Educational material that you\nwould imagine should have been thoroughly tested first. Or is this\njust Visual Studio (intelliSense) specific, but works just fine on\nother compilers?</li>\n</ul>\n", "Tags": "<c++><visual-studio-2017><intellisense>", "OwnerUserId": "3882571", "AnswerCount": "4"}, "46678044": {"ParentId": "46677148", "CommentCount": "1", "Body": "<p>I suppose they don't cover it until later in the book, but I'd approach this somewhat differently. I'd start by defining a struct to hold the name and rainfall for a city together:</p>\n<pre><code>struct precipitation { \n    std::string location;\n    double amount;\n};\n</code></pre>\n<p>Then I'd define an overload of <code>operator&gt;&gt;</code> to extract an object of that type from a stream:</p>\n<pre><code>std::istream &amp;operator&gt;&gt;(std::istream &amp;is, precipitation &amp;p) { \n     return is &gt;&gt; p.location &gt;&gt; p.amount;\n}\n</code></pre>\n<p>This is pretty much the standard form for stream extractors--take reference to a stream and a reference to an object of the type being extracted, and return the stream (again, by reference).</p>\n<p>This lets you read fairly cleanly:</p>\n<pre><code>precipitation precip;\n\nstd::ifstream in(\"rainfall.dat\");\n\nwhile (in &gt;&gt; precip)\n    std::cout &lt;&lt; \"City: \" &lt;&lt; precip.location &lt;&lt; \", amount: \" &lt;&lt; precip.amount &lt;&lt; \"\\n\";\n</code></pre>\n<p>In case you're wondering how that works: a stream object supports conversion to Boolean, which produces <code>true</code> when reading from the stream has succeeded, and <code>false</code> when it fails, so this reads from the stream until reading fails, then it stops.</p>\n<p>This is also the form expected by stream iterators, so it lets you use them as well. For example, to read the entire contents of the file into a vector, you'd do something like this:</p>\n<pre><code>std::vector&lt;precipitation&gt; data { std::istream_iterator&lt;precipitation&gt;(in),{}};\n</code></pre>\n", "OwnerUserId": "179910", "PostTypeId": "2", "Id": "46678044", "Score": "2", "CreationDate": "2017-10-11T00:47:21.413", "LastActivityDate": "2017-10-11T00:47:21.413"}, "46677534": {"ParentId": "46677148", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>I'd consider </p>\n<ul>\n<li><p>returning <code>std::ios&amp;</code> to postpone the contextual conversion to <code>bool</code></p>\n<pre><code>std::ios&amp; readData(std::ifstream &amp;someFile, std::string &amp;city, double &amp;rain) {\n    return someFile &gt;&gt; city &gt;&gt; rain;\n}\n</code></pre>\n<p>The upshot is that you can simple use it like so down-the-road:</p>\n<pre><code>if (readData(file, city, rain)) {\n    // ...\n}\n</code></pre>\n<p>The interface will compile with just including <code>#include &lt;iosfwd&gt;</code></p></li>\n</ul>\n<hr>\n<ul>\n<li><p>manually triggering the contextual conversion:</p>\n<pre><code>bool readData(std::ifstream &amp;someFile, std::string &amp;city, double &amp;rain) {\n    return bool{someFile &gt;&gt; city &gt;&gt; rain};\n}\n</code></pre></li>\n</ul>\n</hr>", "OwnerUserId": "85371", "LastEditorUserId": "85371", "LastEditDate": "2017-10-10T23:43:16.797", "Id": "46677534", "Score": "8", "CreationDate": "2017-10-10T23:36:42.023", "LastActivityDate": "2017-10-10T23:43:16.797"}, "46677408": {"ParentId": "46677148", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>The <code>operator bool</code> for streams is declared in the base class <code>basic_ios</code> the following way</p>\n<pre><code>explicit operator bool() const;\n^^^^^^^^\n</code></pre>\n<p>So there is no implicit conversion from the <code>std::basic_ifstream</code> to the type <code>bool</code>.</p>\n<p>This solution</p>\n<pre><code>bool readData(ifstream &amp;someFile, string &amp;city, double &amp;rain)\n{\n    return static_cast&lt;bool&gt;(someFile &gt;&gt; city &gt;&gt; rain);\n}\n</code></pre>\n<p>looks good.</p>\n<p>You can also use a trick with the logical negation operator the following way</p>\n<pre><code>bool readData(ifstream &amp;someFile, string &amp;city, double &amp;rain)\n{\n    return !!(someFile &gt;&gt; city &gt;&gt; rain);\n}\n</code></pre>\n<p>because according to the C++ Standard (5.3.1 Unary operators)</p>\n<blockquote>\n<p id=\"so_46677148_46677408_0\">9 The operand of the logical negation operator ! is <strong>contextually\n  converted to bool</strong> (Clause 4); its value is true if the converted\n  operand is false and false otherwise. The type of the result is bool.</p>\n</blockquote>\n<p>Though in my opinion the first function implementation is more readable.</p>\n", "OwnerUserId": "2877241", "LastEditorUserId": "2877241", "LastEditDate": "2017-10-10T23:32:04.827", "Id": "46677408", "Score": "3", "CreationDate": "2017-10-10T23:19:40.340", "LastActivityDate": "2017-10-10T23:32:04.827"}, "bq_ids": {"n4140": {"so_46677148_46677408_0": {"section_id": 6072, "quality": 0.9047619047619048, "length": 19}}, "n3337": {"so_46677148_46677408_0": {"section_id": 5840, "quality": 0.9047619047619048, "length": 19}}, "n4659": {"so_46677148_46677408_0": {"section_id": 7568, "quality": 0.9047619047619048, "length": 19}}}, "46677258": {"ParentId": "46677148", "PostTypeId": "2", "CommentCount": "9", "Body": "<p>The stream has a member</p>\n<pre><code>explicit operator bool() const;\n</code></pre>\n<p>which makes it convertible to a <code>bool</code> value, but because the operator is <code>explicit</code> this only works in a context that <em>requires</em> a bool. </p>\n<p>You have already discovered that this includes if-statements and explicit casts. It doesn't include other types of expressions, like assignments.</p>\n<p>Originally (C++98) the operator wasn't <code>explicit</code> (because such things weren't invented yet) so the code example would probably have worked at the time. Seems like the book hasn't been updated in this part.</p>\n", "OwnerUserId": "597607", "LastEditorUserId": "597607", "LastEditDate": "2017-10-10T23:01:59.240", "Id": "46677258", "Score": "5", "CreationDate": "2017-10-10T23:00:15.900", "LastActivityDate": "2017-10-10T23:01:59.240"}});