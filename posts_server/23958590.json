post_cb({"23958903": {"ParentId": "23958590", "CommentCount": "0", "Body": "<p>This Standard paragraph clarifies, and even has an example very much like your first example.</p>\n<p>3.4.1/3:</p>\n<blockquote>\n<p id=\"so_23958590_23958903_0\">The lookup for an unqualified name used as the <em>postfix-expression</em> of a function call is described in 3.4.2 [basic.lookup.argdep].  [<em>Note:</em> For purposes of determining (during parsing) whether an expression is a <em>postfix-expression</em> for a function call, the usual name lookup rules apply.  The rules in 3.4.2 have no effect on the syntactic interpretation of an expression.  For example,</p>\n</blockquote>\n<pre><code>typedef int f;\nnamespace N {\n  struct A {\n    friend void f(A &amp;);\n    operator int();\n    void g(A a) {\n      int i = f(a);    // f is the typedef, not the friend\n                       // function: equivalent to int(a)\n    }\n  };\n}\n</code></pre>\n<blockquote>\n<p id=\"so_23958590_23958903_1\">Because the expression is not a function call, the argument-dependent name lookup (3.4.2) does not apply and the friend function <code>f</code> is not found.  -<em>end note</em>]</p>\n</blockquote>\n", "OwnerUserId": "459640", "PostTypeId": "2", "Id": "23958903", "Score": "2", "CreationDate": "2014-05-30T16:08:45.083", "LastActivityDate": "2014-05-30T16:08:45.083"}, "23958590": {"CommentCount": "1", "ViewCount": "134", "PostTypeId": "1", "LastEditorUserId": "2297448", "CreationDate": "2014-05-30T15:52:06.653", "LastActivityDate": "2015-09-04T09:13:28.823", "Title": "When is ADL applied?", "LastEditDate": "2015-09-04T09:13:28.823", "Id": "23958590", "Score": "3", "Body": "<p>There are 3 examples:</p>\n<p>I.</p>\n<pre><code>typedef int foo;\n\nnamespace B\n{\n    struct S\n    {\n        operator int(){ return 24; }\n    };\n        int foo(B::S s){ return 0; }\n}\n\nint main()\n{\n    int t=foo(B::S()); //24, ADL does not apply\n}\n</code></pre>\n<p>II.</p>\n<pre><code>namespace B\n{\n    struct S\n    {\n        operator int(){ return 24; }\n    };\n        int foo(B::S s){ return 0; }\n}\n\nint main()\n{\n    int t=foo(B::S()); //0, ADL applies\n}\n</code></pre>\n<p>III.</p>\n<pre><code>namespace B\n{\n    struct S\n    {\n        operator int(){ return 24; }\n    };\n        int foo(B::S s){ return 0; }\n}\nint foo(B::S s){ return 12; }\n\nint main()\n{\n    int t=foo(B::S()); //error: call of overloaded \u2018foo(B::S)\u2019 is ambiguous\n                       //ADL applies\n}\n</code></pre>\n<p>It is not clear for me what is the actual conditions to ADL lookup will be apply? I need in reference to standard described it.</p>\n", "Tags": "<c++><language-lawyer><argument-dependent-lookup>", "OwnerUserId": "2786156", "AnswerCount": "2"}, "23959090": {"ParentId": "23958590", "CommentCount": "0", "Body": "<p>Your first example does not illustrate ADL. In the line</p>\n<pre><code>int t=foo(B::S());\n</code></pre>\n<p><code>foo</code> is <code>typedef</code>ed to <code>int</code>.</p>\n<p>The following code has some better illustrations of ADL.</p>\n<pre><code>#include &lt;iostream&gt;\n\nnamespace B\n{\n    struct S\n    {\n        operator int(){ return 24; }\n    };\n\n    int foo(S s){ return 100; }\n    int bar(S s){ return 400; }\n}\n\nnamespace C\n{\n    struct S\n    {\n        operator int(){ return 24; }\n    };\n\n    int foo(S s){ return 200; }\n}\n\nint bar(C::S s){ return 800; }\n\nint main()\n{\n    // ADL makes it possible for foo to be resolved to B::foo\n    std::cout &lt;&lt; foo(B::S()) &lt;&lt; std::endl;\n\n    // ADL makes it possible for foo to be resolved to C::foo\n    std::cout &lt;&lt; foo(C::S()) &lt;&lt; std::endl;\n\n    // ADL makes it possible for bar to be resolved to B::bar\n    std::cout &lt;&lt; bar(B::S()) &lt;&lt; std::endl;\n\n    // ADL makes it possible for bar to be resolved to ::bar\n    std::cout &lt;&lt; bar(C::S()) &lt;&lt; std::endl;\n}\n</code></pre>\n", "OwnerUserId": "434551", "PostTypeId": "2", "Id": "23959090", "Score": "1", "CreationDate": "2014-05-30T16:19:20.670", "LastActivityDate": "2014-05-30T16:19:20.670"}, "bq_ids": {"n4140": {"so_23958590_23958903_0": {"section_id": 7089, "quality": 0.7777777777777778, "length": 28}, "so_23958590_23958903_1": {"section_id": 7089, "quality": 0.8, "length": 12}}, "n3337": {"so_23958590_23958903_0": {"section_id": 6833, "quality": 0.7777777777777778, "length": 28}, "so_23958590_23958903_1": {"section_id": 6833, "quality": 0.8, "length": 12}}, "n4659": {"so_23958590_23958903_0": {"section_id": 8590, "quality": 0.7777777777777778, "length": 28}, "so_23958590_23958903_1": {"section_id": 8590, "quality": 0.8, "length": 12}}}});