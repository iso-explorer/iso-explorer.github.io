post_cb({"28917094": {"ParentId": "28916109", "CommentCount": "0", "CreationDate": "2015-03-07T16:29:00.437", "OwnerUserId": "4031604", "PostTypeId": "2", "Id": "28917094", "Score": "0", "Body": "<p>I found the answer by myself. It's stated in 'n4296' at \u00a7 5.1.2.5:</p>\n<blockquote>\n<p id=\"so_28916109_28917094_0\">The closure type for a non-generic lambda-expression has a public\n  inline function call operator (13.5.4) whose parameters and return\n  type are described by the lambda-expression\u2019s\n  parameter-declaration-clause and trailing-return-type respectively.\n  For a generic lambda, the closure type has a public inline function\n  call operator member template (14.5.2) <strong><em>whose template-parameter-list\n  consists of one invented type template parameter for each occurrence of\n  auto in the lambda\u2019s parameter-declaration-clause, in order of\n  appearance</em></strong>. <strong>The invented type template-parameter is a parameter pack\n  if the corresponding parameter-declaration declares a function\n  parameter pack (8.3.5).</strong> The return type and function parameters of the\n  function call operator template are derived from the\n  lambda-expression\u2019s trailing-return-type and\n  parameter-declarationclause by replacing each occurrence of auto in\n  the decl-speci\ufb01ers of the parameter-declaration-clause with the name\n  of the corresponding invented template-parameter.</p>\n</blockquote>\n<p>This means that something like this:</p>\n<pre><code>[](auto ... arg) {}\n</code></pre>\n<p>Is roughly equivalent to:</p>\n<pre><code>template&lt;class ... tmp&gt;\nClosureType::operator()(tmp ... arg);\n</code></pre>\n<p>However I don't know why isn't this also allowed in normal functions. Perhaps someone should propose it.</p>\n", "LastActivityDate": "2015-03-07T16:29:00.437"}, "28916109": {"CommentCount": "6", "ViewCount": "218", "CreationDate": "2015-03-07T14:51:37.577", "LastActivityDate": "2015-03-07T16:29:00.437", "Title": "Parameter pack form of 'auto ... arg' is enabled in lambda but not in function?", "AcceptedAnswerId": "28917094", "PostTypeId": "1", "Id": "28916109", "Score": "0", "Body": "<p>Can someone explains me why a parameter can be declared as '<code>auto ... arg</code>' in this context (when used in a lambda):</p>\n<pre><code>    auto glambda = [](auto a, auto&amp;&amp; b) { return a &lt; b; }; \n    bool b = glambda(3, 3.14); // OK\n\n    auto vglambda = [](auto printer) { \n        return [=](auto ... ts) { // OK: ts is a function parameter pack \n            printer(std::forward&lt;decltype(ts)&gt;(ts)...);\n            return [=]() { printer(ts ...); };\n        };\n    };\n\n    auto p = vglambda( [](auto v1, auto v2, auto v3) { std::cout &lt;&lt; v1 &lt;&lt; v2 &lt;&lt; v3; } ); \n\n    auto q = p(1, 'a', 3.14); // OK: outputs 1a3.14 q(); // OK: outputs 1a3.14\n</code></pre>\n<p>Life <a href=\"http://melpon.org/wandbox/permlink/g5ztFNCpjUPFgXMm\" rel=\"nofollow\">example</a>.</p>\n<p>But not in this (when used in a function):</p>\n<pre><code>void func(auto ... arg)\n{\n}\n</code></pre>\n<p>Life <a href=\"http://melpon.org/wandbox/permlink/Pta4QCMrxV2tTpkg\" rel=\"nofollow\">example</a>.</p>\n<p>I would be very happy of a detailed explanation with a quotes from the latest ISO C++ draft. Or is this a bug of clang compiler? Because it compiles fine actually under gcc 5.0.</p>\n", "Tags": "<c++><gcc><parameters><lambda><clang>", "OwnerUserId": "4031604", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_28916109_28917094_0": {"section_id": 5964, "quality": 0.8809523809523809, "length": 74}}, "n4659": {"so_28916109_28917094_0": {"section_id": 7453, "quality": 0.8809523809523809, "length": 74}}}});