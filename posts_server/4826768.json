post_cb({"4826934": {"ParentId": "4826768", "CommentCount": "0", "CreationDate": "2011-01-28T10:02:58.843", "OwnerUserId": "442284", "PostTypeId": "2", "Id": "4826934", "Score": "2", "Body": "<p>You are allowed to delete a pointer to const and Microsoft obviously had it wrong previously. The standard has never changed, as far as I'm aware.</p>\n<p>No doubt someone with a copy will quote chapter and verse (and get a big rep for it).</p>\n<p>main should return int though, not void.</p>\n", "LastActivityDate": "2011-01-28T10:02:58.843"}, "4827543": {"ParentId": "4826768", "CommentCount": "3", "CreationDate": "2011-01-28T11:10:16.403", "OwnerUserId": "415784", "PostTypeId": "2", "Id": "4827543", "Score": "1", "Body": "<p>Please also note that the <a href=\"http://support.microsoft.com/kb/131322\" rel=\"nofollow\">Microsoft link</a> itself says,</p>\n<blockquote>\n<p id=\"so_4826768_4827543_0\">NOTE: Visual C++ .NET compiler does\n  not demonstrate this issue in\n  conformance to the changes made in the\n  C++ ANSI Standards.</p>\n</blockquote>\n<p>Interesting!</p>\n", "LastActivityDate": "2011-01-28T11:10:16.403"}, "bq_ids": {"n4140": {"so_4826768_4826985_0": {"section_id": 6106, "quality": 0.9375, "length": 15}}, "n3337": {"so_4826768_4826985_0": {"section_id": 5872, "quality": 0.9375, "length": 15}}, "n4659": {"so_4826768_4826985_0": {"section_id": 7603, "quality": 0.9375, "length": 15}}}, "4826985": {"ParentId": "4826768", "PostTypeId": "2", "CommentCount": "8", "CreationDate": "2011-01-28T10:07:30.700", "Score": "12", "LastEditorUserId": "464581", "LastEditDate": "2011-01-28T10:12:39.867", "Id": "4826985", "OwnerUserId": "464581", "Body": "<p>You can indeed <code>delete</code> a pointer-to-<code>const</code>.</p>\n<p>If Visual C++ says otherwise for a standard-conforming program, then that's a <strong>compiler bug</strong> and should be reported.</p>\n<p>Your (or Microsoft's?) program is not standard C++, however, since you have <code>void</code> result type for <code>main</code>.</p>\n<p>The KB article you link to says \"Deleting a pointer to a constant should not be allowed by definition (ARM section 5.3.4)\", and although it's wrong, the reference it gives is correct. The ARM section 5.3.4 says \"A pointer to constant cannot be deleted\". However, the ARM was published in 1990...</p>\n<p>C++ was standardized about ten years later, in 1998, and in standard C++ you can delete a pointer to <code>const</code>. This is not specified in the normative text; it's specified by omitting the restriction. However, the C++98 standard <strong>\u00a75.3.5/2</strong> has the following <em>non-normative note</em>:</p>\n<blockquote>\n<p id=\"so_4826768_4826985_0\">a pointer to a <code>const</code> type can be the operand of a <em>delete-expression</em>; it is not necessary to cast away the constness (5.2.11) of the pointer expression before it is used as the operand of the <em>delete-expression</em>.</p>\n</blockquote>\n<p>We are now over ten years after that standardization again, over 20 years after the ARM.</p>\n<p>Which version of Visual C++ are you using?</p>\n<p>Cheers &amp; hth.,</p>\n", "LastActivityDate": "2011-01-28T10:12:39.867"}, "4826768": {"CommentCount": "0", "AcceptedAnswerId": "4826985", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2011-01-28T09:45:31.620", "LastActivityDate": "2015-07-20T12:02:17.957", "LastEditDate": "2017-05-23T12:21:43.417", "ViewCount": "347", "FavoriteCount": "2", "Title": "Was the behavior of deleting pointers-to-const changed in the past?", "Id": "4826768", "Score": "7", "Body": "<p>I got the following test code from <a href=\"http://support.microsoft.com/kb/131322\" rel=\"nofollow noreferrer\">http://support.microsoft.com/kb/131322</a>:</p>\n<pre><code>const int * pi   = new int(1000);\nconst char * pch = new char(65);\n\nvoid main(void)\n   {\n   delete  pi  ;// Error C2710:cannot delete a pointer to a const object\n   delete  pch ;// Error C2710:cannot delete a pointer to a const object\n   }\n</code></pre>\n<p>On that page Microsoft claims that deleting a pointer-to-const is not allowed, which seems logical to me.  You don't want functions that you give a pointer-to-const to delete the instance behind your back.</p>\n<p>Strange enough, question <a href=\"https://stackoverflow.com/questions/755196/deleting-a-const-pointer\">Deleting a pointer to const (T const*)</a> indicates that it IS allowed, and it even makes sense.</p>\n<p>And indeed, if I compile the code from the MSDN page with Visual Studio 2010, it compiles correctly (even no warnings when compiling with /W4).</p>\n<p>Was the behavior regarding deletion of pointers-to-const changed in the past in the C++ standard?  Or was this changed in Visual Studio?</p>\n", "Tags": "<c++><visual-studio><visual-c++><const><delete-operator>", "OwnerUserId": "163551", "AnswerCount": "3"}});