post_cb({"bq_ids": {"n4140": {"so_34122434_34122776_0": {"length": 10, "quality": 0.7142857142857143, "section_id": 6076}, "so_34122434_34122776_1": {"length": 32, "quality": 0.9411764705882353, "section_id": 7214}, "so_34122434_34122776_4": {"length": 15, "quality": 0.8823529411764706, "section_id": 5785}}, "n3337": {"so_34122434_34122776_0": {"length": 10, "quality": 0.7142857142857143, "section_id": 5844}, "so_34122434_34122776_1": {"length": 31, "quality": 0.9117647058823529, "section_id": 6958}, "so_34122434_34122776_4": {"length": 15, "quality": 0.8823529411764706, "section_id": 5558}}, "n4659": {"so_34122434_34122776_0": {"length": 10, "quality": 0.7142857142857143, "section_id": 7572}, "so_34122434_34122776_1": {"length": 31, "quality": 0.9117647058823529, "section_id": 8723}, "so_34122434_34122776_4": {"length": 15, "quality": 0.8823529411764706, "section_id": 7242}}}, "34122558": {"Id": "34122558", "PostTypeId": "2", "Body": "<p>The types <code>char16_t</code> and <code>char32_t</code> are defined to be the same size as <code>uint_least16_t</code> and <code>uint_least32_t</code> respectively.</p>\n<p>No such constraints exist on <code>wchar_t</code>, except that it must be at least as large as <code>char</code> (which, of course, is true for <em>all</em> data types in C and C++).  There exist actual implementations with 1-byte, 2-byte (MSVC++), and 4-byte (GCC) wide characters.</p>\n", "LastActivityDate": "2015-12-06T20:48:46.640", "CommentCount": "0", "CreationDate": "2015-12-06T20:48:46.640", "ParentId": "34122434", "Score": "0", "OwnerUserId": "287586"}, "34122776": {"Id": "34122776", "PostTypeId": "2", "Body": "<p>It's <code>1 == sizeof(char) &lt;= sizeof(wchar_t)</code> and <code>1 == sizeof(char) &lt;= sizeof(char16_t) &lt;= sizeof(char32_t)</code>.</p>\n<p>5.3.3/1 Sizeof [expr.sizeof]</p>\n<blockquote>\n<p id=\"so_34122434_34122776_0\">... sizeof(char), sizeof(signed char) and sizeof(unsigned char) are 1.\n  ... [ Note: in particular, sizeof(bool), sizeof(char16_t),\n  sizeof(char32_t), and sizeof(wchar_t) are implementation-defined.75 \u2014\n  end note ].</p>\n</blockquote>\n<p>3.9.1/5 Fundamental types [basic.fundamental]</p>\n<blockquote>\n<p id=\"so_34122434_34122776_1\">... Type wchar_t shall have the same size, signedness, and alignment\n  requirements (3.11) as one of the other integral types, called its\n  underlying type. Types char16_t and char32_t denote distinct types\n  with the same size, signedness, and alignment as uint_least16_t and\n  uint_least32_t, respectively, in &lt;cstdint&gt;, called the underlying\n  types.</p>\n</blockquote>\n<p>Update: I haven't found it in the standard. <a href=\"http://en.cppreference.com/w/cpp/types/integer\" rel=\"nofollow\">cppreference</a> says for <code>uint_leastN_t</code>:</p>\n<blockquote>\n<p id=\"so_34122434_34122776_2\">smallest unsigned integer type with width of at least 8, 16, 32 and 64\n  bits respectively</p>\n</blockquote>\n<p>Note that sizeof(char)==1 does <em>not</em> mean that a char has 8 bits. See also <a href=\"https://isocpp.org/wiki/faq/intrinsic-types#bits-per-byte\" rel=\"nofollow\">C++ FAQ</a>. <a href=\"http://en.cppreference.com/w/cpp/types/climits\" rel=\"nofollow\">cppreference</a> says about CHAR_BIT:</p>\n<blockquote>\n<p id=\"so_34122434_34122776_3\">number of bits in byte</p>\n</blockquote>\n<p>1.7/1 The C ++ memory model [intro.memory]</p>\n<blockquote>\n<p id=\"so_34122434_34122776_4\">The fundamental storage unit in the C ++ memory model is the byte. A\n  byte is at least large enough to contain any member of the basic\n  execution character set (2.3) ...</p>\n</blockquote>\n", "LastEditorUserId": "1016716", "LastActivityDate": "2015-12-13T11:45:12.797", "Score": "2", "CreationDate": "2015-12-06T21:09:07.120", "ParentId": "34122434", "CommentCount": "2", "OwnerUserId": "1306466", "LastEditDate": "2015-12-13T11:45:12.797"}, "34122434": {"ViewCount": "239", "Body": "<p>Does the C++ standard provide any guarantee on the ordering of the size in bytes of <code>char</code>, <code>wchar_t</code>, <code>char16_t</code>, <code>char32_t</code>? (any extract from the standard is welcome) </p>\n<p>For example do I have the guarantee that: </p>\n<pre><code>sizeof(char) &lt;= sizeof(wchar_t) &lt;= sizeof(char16_t) &lt;= sizeof(char32_t)\n</code></pre>\n", "AcceptedAnswerId": "34122776", "Title": "Guarantee on size ordering on char, wchar_t, char16_t, char32_t", "CreationDate": "2015-12-06T20:38:36.623", "Id": "34122434", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2015-12-13T11:45:12.797", "Score": "3", "OwnerUserId": "882932", "Tags": "<c++><c++11><character><sizeof><widechar>", "AnswerCount": "2"}});