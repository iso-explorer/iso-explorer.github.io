post_cb({"bq_ids": {"n4140": {"so_16781915_16781927_3": {"length": 5, "quality": 0.8333333333333334, "section_id": 744}, "so_16781915_16781927_7": {"length": 6, "quality": 1.0, "section_id": 742}, "so_16781915_16781927_4": {"length": 4, "quality": 0.6666666666666666, "section_id": 707}, "so_16781915_16781927_1": {"length": 8, "quality": 0.8, "section_id": 763}, "so_16781915_16781927_5": {"length": 6, "quality": 0.6666666666666666, "section_id": 744}}, "n3337": {"so_16781915_16781927_7": {"length": 6, "quality": 1.0, "section_id": 731}, "so_16781915_16781927_3": {"length": 5, "quality": 0.8333333333333334, "section_id": 733}, "so_16781915_16781927_4": {"length": 4, "quality": 0.6666666666666666, "section_id": 697}, "so_16781915_16781927_1": {"length": 8, "quality": 0.8, "section_id": 750}, "so_16781915_16781927_5": {"length": 6, "quality": 0.6666666666666666, "section_id": 733}}, "n4659": {"so_16781915_16781927_7": {"length": 6, "quality": 1.0, "section_id": 800}, "so_16781915_16781927_4": {"length": 5, "quality": 0.8333333333333334, "section_id": 802}, "so_16781915_16781927_1": {"length": 8, "quality": 0.8, "section_id": 823}, "so_16781915_16781927_3": {"length": 5, "quality": 0.8333333333333334, "section_id": 802}, "so_16781915_16781927_6": {"length": 9, "quality": 0.5294117647058824, "section_id": 802}, "so_16781915_16781927_5": {"length": 6, "quality": 0.6666666666666666, "section_id": 802}}}, "16781927": {"Id": "16781927", "PostTypeId": "2", "Body": "<p>From <a href=\"http://www.cplusplus.com/reference/map/map/begin/\" rel=\"nofollow\">Map::begin() documentation </a></p>\n<blockquote>\n<p id=\"so_16781915_16781927_0\">std::map.begin()</p>\n<p id=\"so_16781915_16781927_1\">Return iterator to beginning\n  Returns an iterator referring to the first element in the map container.</p>\n<p id=\"so_16781915_16781927_2\">Because map containers keep their elements ordered at all times, begin points to the element that goes first following the container's sorting criterion.</p>\n<p id=\"so_16781915_16781927_3\">If the container is empty, the returned iterator value shall not be dereferenced.</p>\n<p id=\"so_16781915_16781927_4\"><strong>Return Value:</strong>\n  An iterator to the first element in the container.</p>\n<p id=\"so_16781915_16781927_5\">If the map object is const-qualified, the function returns a const_iterator. Otherwise, it returns an iterator.</p>\n<p id=\"so_16781915_16781927_6\">Member types iterator and const_iterator are <strong>bidirectional iterator</strong> types pointing to elements (of type value_type).\n  Notice that value_type in map containers is an alias of pair.</p>\n</blockquote>\n<p><strong>EDIT:</strong> by courtesy of @Andy Prowl:\nPer C++ standard \u00a7 23.2.4/6</p>\n<blockquote>\n<p id=\"so_16781915_16781927_7\">iterator of an associative container is of the bidirectional iterator category</p>\n</blockquote>\n", "LastActivityDate": "2013-05-27T23:48:23.940", "CommentCount": "1", "CreationDate": "2013-05-27T23:48:23.940", "ParentId": "16781915", "Score": "4", "OwnerUserId": "1760345"}, "16781915": {"ViewCount": "1687", "Body": "<pre><code>template &lt;class InputIterator, class Distance&gt;\n  void advance (InputIterator&amp; it, Distance n);\n\n    InputOutput &lt; Forward &lt; Bidirectional &lt; Random Access\n\nmap&lt;int, int&gt; mapInts;\n...\n\nstd::map&lt;int, int&gt;::iterator it = mapInts.begin();\nstd::advance (it,5);\n</code></pre>\n<p>Q&gt; What is the type of iterator the map.begin returns? InputOut, Forward, Bidirectional?</p>\n<p>Thank you</p>\n", "AcceptedAnswerId": "16781927", "Title": "what is the iterator type of map<T, U>.begin()", "CreationDate": "2013-05-27T23:46:12.443", "Id": "16781915", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2013-05-27T23:48:23.940", "Score": "1", "OwnerUserId": "391104", "Tags": "<c++>", "AnswerCount": "1"}});