post_cb({"32909109": {"CommentCount": "7", "ViewCount": "105", "PostTypeId": "1", "ClosedDate": "2015-10-02T14:54:54.543", "LastEditorUserId": "2810710", "CreationDate": "2015-10-02T14:10:45.863", "LastActivityDate": "2015-10-02T14:54:43.133", "LastEditDate": "2015-10-02T14:33:23.083", "AcceptedAnswerId": "32910007", "Title": "c++ left hand assignment operator", "Id": "32909109", "Score": "-1", "Body": "<p>i have a class (wich should hold any value) like this:</p>\n<pre><code>class Value\n{\n\n    public:\n\n        Value();\n        Value(const Value&amp; value);\n        virtual ~Value();\n        void operator= (const Value&amp; value);\n\n        template&lt;class T&gt;\n        void operator= (T value);\n...\n}\n</code></pre>\n<p>now my question:</p>\n<p>why can't i implement an assignment operator for this class like this:</p>\n<pre><code>template&lt;class T&gt;\nvoid operator=(T&amp; value, const Value&amp; v)\n{...}\n</code></pre>\n<p>I wan to desing a class wich works the following:</p>\n<pre><code>Value v;\n\nv = 'c';\nv = 13;\nv = 5.6;\nint i = 5;\nv = &amp;i;\n\nint y = v;\nchar b = v;\n</code></pre>\n<p>i want to put any datatype into it and out of it.\nat the moment this works fine for:</p>\n<pre><code>v = 'c';\nv = 13;\nv = 5.6;\n</code></pre>\n<p>but not for:</p>\n<pre><code>int y = v;\n</code></pre>\n<p>what works is:</p>\n<pre><code>int y = v.get&lt;int&gt;();\n</code></pre>\n<p>but this is not as nice as</p>\n<pre><code>int y = v;\n</code></pre>\n<p>would be</p>\n", "Tags": "<c++><templates><operator-overloading><assignment-operator>", "OwnerUserId": "2810710", "AnswerCount": "3"}, "32909355": {"ParentId": "32909109", "CommentCount": "0", "Body": "<p>Because the standard says that an assignment operator must be a member function with only one parameter.</p>\n<p>13.5.3$1 Assignment [over.ass]:</p>\n<blockquote>\n<p id=\"so_32909109_32909355_0\">An assignment operator shall be implemented by a non-static member function with exactly one parameter.</p>\n</blockquote>\n", "OwnerUserId": "3309790", "PostTypeId": "2", "Id": "32909355", "Score": "0", "CreationDate": "2015-10-02T14:22:27.147", "LastActivityDate": "2015-10-02T14:22:27.147"}, "32909892": {"ParentId": "32909109", "CommentCount": "0", "Body": "<p>You can implement a typecast operator like this</p>\n<pre><code>operator int()\n{\n    if(current_value_is_not_int)\n        throw MyException(\"Current value is not int\");\n\n    //return int value\n}\n</code></pre>\n", "OwnerUserId": "4952137", "PostTypeId": "2", "Id": "32909892", "Score": "0", "CreationDate": "2015-10-02T14:49:11.317", "LastActivityDate": "2015-10-02T14:49:11.317"}, "32910007": {"ParentId": "32909109", "CommentCount": "0", "Body": "<p>You can easily fix the compilation error by adding template type cast to your class like following:</p>\n<pre><code>class Value\n{\n...\n        template &lt;class T&gt; operator T();\n};\n\nValue va;\nint i = va;\n</code></pre>\n<p>I still believe you will find the task of implementing 'boost::any' yourself quite challenging, but why not? :)</p>\n", "OwnerUserId": "5245033", "PostTypeId": "2", "Id": "32910007", "Score": "0", "CreationDate": "2015-10-02T14:54:43.133", "LastActivityDate": "2015-10-02T14:54:43.133"}, "bq_ids": {"n4140": {"so_32909109_32909355_0": {"section_id": 660, "quality": 1.0, "length": 9}}, "n3337": {"so_32909109_32909355_0": {"section_id": 650, "quality": 1.0, "length": 9}}, "n4659": {"so_32909109_32909355_0": {"section_id": 688, "quality": 1.0, "length": 9}}}});