post_cb({"16039805": {"ParentId": "16039723", "PostTypeId": "2", "CommentCount": "16", "Body": "<p><code>#3</code> is only a declaration; it states that a variable called <code>i</code> exists somewhere in the program, with external linkage, but does not define that variable. The declaration allows you to use that, rather than the static variable from <code>#1</code>, within the scope of <code>g</code>.</p>\n<p>You will also need to define it, in the namespace that contains <code>g</code>. In this case, it will have to be in a different translation unit, so that it doesn't conflict with the static variable with the same name.</p>\n<p>To be clear, there are two different variables called <code>i</code> here, as explained in the paragraph following the example. <code>#1</code> is defined here; <code>#3</code> is only declared, and needs a separate definition.</p>\n", "OwnerUserId": "204847", "LastEditorUserId": "204847", "LastEditDate": "2013-04-16T15:07:59.043", "Id": "16039805", "Score": "5", "CreationDate": "2013-04-16T14:31:11.470", "LastActivityDate": "2013-04-16T15:07:59.043"}, "16039723": {"CommentCount": "1", "ViewCount": "351", "PostTypeId": "1", "OwnerDisplayName": "user955249", "LastEditorDisplayName": "user955249", "CreationDate": "2013-04-16T14:26:50.250", "LastActivityDate": "2013-04-16T15:38:28.410", "LastEditDate": "2013-04-16T15:38:28.410", "AcceptedAnswerId": "16039805", "FavoriteCount": "0", "Title": "block scope extern declaration", "Id": "16039723", "Score": "0", "Body": "<p>The C++11 standard give the code snippet below (I deleted unrelated code) and said the name <code>i</code> have external linkage. (clause 3.5.6) </p>\n<pre><code>static int i = 0; // #1\nvoid g() {\n    extern int i; // #3 external linkage\n}\n</code></pre>\n<p>Why do they do this? Did I misunderstand something? The two <code>i</code> refer to the same object in vs2012. And when I use <code>i</code> somewhere else, i got an unresolved external error. I have no idea whether vs2012 support this feature or not. </p>\n<p>Edit:\nI think VS2012 is doing the right thing. The <code>i</code> in #3 only need to refers to an <code>i</code> that has a linkage. If the compiler can't find one, than the <code>i</code> should be defined in other translation unit. So the two <code>i</code> should refer to the same object in the code snippet above.</p>\n<p>The quote from the standard:</p>\n<blockquote>\n<p id=\"so_16039723_16039723_0\">If there is a visible declaration of an entity with linkage having the\n  same name and type, ignoring entities declared outside the innermost\n  enclosing namespace scope, the block scope declaration declares that\n  same entity and receives the linkage of the previous declaration. if\n  no matching entity is found, the block scope entity receives external\n  linkage.</p>\n</blockquote>\n<p>But why people need this feature?</p>\n", "Tags": "<c++><c++11>", "AnswerCount": "3"}, "16040275": {"ParentId": "16039723", "CommentCount": "0", "Body": "<pre><code>extern int i;\n</code></pre>\n<p>Promises compiler I will give you an <code>int i</code>.</p>\n<p>The <code>static int i=0;</code> is not that promised variable, and you have to declare a <code>int i</code> somewhere else visible to that <code>extern</code> variable declaration.</p>\n<p>In other words <code>extern int i;</code> and <code>static int i=0;</code> are two irrelevant variables.</p>\n", "OwnerUserId": "952747", "PostTypeId": "2", "Id": "16040275", "Score": "0", "CreationDate": "2013-04-16T14:53:14.130", "LastActivityDate": "2013-04-16T14:53:14.130"}, "bq_ids": {"n4140": {"so_16039723_16039723_0": {"section_id": 7139, "quality": 1.0, "length": 36}}, "n3337": {"so_16039723_16039723_0": {"section_id": 6883, "quality": 1.0, "length": 36}}, "n4659": {"so_16039723_16039723_0": {"section_id": 8640, "quality": 1.0, "length": 36}}}, "16039877": {"ParentId": "16039723", "CommentCount": "0", "Body": "<pre><code>static int i = 0; // #1\nvoid g() {\n    extern int i; // #3 external linkage\n}\n</code></pre>\n<p>The first <code>static</code> <code>i</code> is a declaration and is visible only in the current source file. </p>\n<pre><code>extern int i; \n</code></pre>\n<p>tells the compiler I don't mean this <code>static i</code> but another <code>i</code> defined somewhere else. If you haven't defined it somewhere else (in another translation unit) you will get the undefined reference. </p>\n<p>And this doesn't break the ODR because this (the <code>static</code>) <code>i</code> is static (visible only in this unit).</p>\n", "OwnerUserId": "6271971", "PostTypeId": "2", "Id": "16039877", "Score": "2", "CreationDate": "2013-04-16T14:34:39.237", "LastActivityDate": "2013-04-16T14:34:39.237"}});