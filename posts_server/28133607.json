post_cb({"28133607": {"CommentCount": "0", "ViewCount": "44", "PostTypeId": "1", "LastEditorUserId": "2660176", "CreationDate": "2015-01-25T05:42:14.077", "LastActivityDate": "2015-10-22T07:07:47.680", "Title": "Direct object initialization vs Initialization with convertion functions", "OwnerDisplayName": "user2953119", "LastEditDate": "2015-10-22T07:07:47.680", "Id": "28133607", "Score": "0", "Body": "<p>The following program prints 42:</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct A\n{\n    operator int(){ return 42; }\n};\n\nstruct B\n{\n    operator A(){ return A(); }\n};\n\nB b;\nint a = A(b);    \nint main(){ std::cout &lt;&lt; a &lt;&lt; std::endl; } //42\n</code></pre>\n<p><strong><a href=\"http://coliru.stacked-crooked.com/a/f86b35ce40a1d132\" rel=\"nofollow\">DEMO</a></strong></p>\n<p>But if we try to define cope/move or both contructors it won't work. </p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct A\n{\n    A(A&amp;&amp;){ std::cout &lt;&lt; \"A(A&amp;&amp;)\" &lt;&lt; std::endl; }\n    A(A&amp;){ std::cout &lt;&lt; \"A(A&amp;)\" &lt;&lt; std::endl; }\n    operator int(){ return 42; }\n};\n\nstruct B\n{\n    operator A(){ return A(); }\n};\n\nB b;\nint a = A(b);\n\nint main(){ std::cout &lt;&lt; a &lt;&lt; std::endl; } //Error\n</code></pre>\n<p><strong><a href=\"http://coliru.stacked-crooked.com/a/d3440e6e95a138b1\" rel=\"nofollow\">DEMO</a></strong></p>\n<p>I thought, the relevant section, describing that behavior is <code>N4296::8.5/17.7 [dcl.init]</code></p>\n<blockquote>\n<p id=\"so_28133607_28133607_0\">If the destination type is a (possibly cv-qualified) class type:</p>\n<p id=\"so_28133607_28133607_1\">[...]</p>\n<p id=\"so_28133607_28133607_2\">\u2014 Otherwise, if the source type is a (possibly cv-qualified) class type, conversion functions are considered. The applicable conversion\n  functions are enumerated (13.3.1.5), and the best one is chosen\n  through overload resolution (13.3). The user-defined conversion so\n  selected is called to convert the  initializer expression into the\n  object being initialized. If the conversion cannot be done or is\n  ambiguous, the initialization is ill-formed.</p>\n</blockquote>\n<p>It shouldn't depends on absence/presence of the constructors. We just should have to have appropriate conversion functions so as to choose the conversion sequence.</p>\n", "Tags": "<c++><class><c++11>", "AnswerCount": "1"}, "28133664": {"ParentId": "28133607", "CommentCount": "1", "Body": "<p>You effectively deleted the default constructor. From the standard (12.1/4, emphasis mine):</p>\n<blockquote>\n<p id=\"so_28133607_28133664_0\">A <em>default</em> constructor for a class <code>X</code> is a constructor of class <code>X</code> that can be called without an argument. <strong>If\n  there is no user-declared constructor for class <code>X</code></strong>, a constructor having no parameters is implicitly declared\n  as defaulted</p>\n</blockquote>\n<p><strong>IF</strong> there is no user-declared constructor. But you declared two, so there is no implicit default constructor. Thus, this:</p>\n<pre><code>operator A(){ return A(); }\n                  // ^^^\n</code></pre>\n<p>can't compile. That's why the error you get is </p>\n<blockquote>\n<p id=\"so_28133607_28133664_1\">error: no matching function for call to <code>A::A()</code></p>\n</blockquote>\n<p>The code tries to call your conversion operator - but the body isn't valid. </p>\n", "OwnerUserId": "2069064", "PostTypeId": "2", "Id": "28133664", "Score": "1", "CreationDate": "2015-01-25T05:52:10.820", "LastActivityDate": "2015-01-25T05:52:10.820"}, "bq_ids": {"n4140": {"so_28133607_28133607_0": {"section_id": 3296, "quality": 1.0, "length": 6}, "so_28133607_28133664_0": {"section_id": 369, "quality": 0.9444444444444444, "length": 17}, "so_28133607_28133607_2": {"section_id": 3296, "quality": 0.9, "length": 36}}, "n3337": {"so_28133607_28133607_0": {"section_id": 3166, "quality": 1.0, "length": 6}, "so_28133607_28133664_0": {"section_id": 359, "quality": 0.9444444444444444, "length": 17}, "so_28133607_28133607_2": {"section_id": 3166, "quality": 0.9, "length": 36}}, "n4659": {"so_28133607_28133607_0": {"section_id": 4058, "quality": 1.0, "length": 6}, "so_28133607_28133664_0": {"section_id": 381, "quality": 0.8333333333333334, "length": 15}, "so_28133607_28133607_2": {"section_id": 4058, "quality": 0.9, "length": 36}}}});