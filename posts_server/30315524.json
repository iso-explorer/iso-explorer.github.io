post_cb({"bq_ids": {"n4140": {"so_30315524_30315524_1": {"length": 5, "quality": 0.8333333333333334, "section_id": 7189}, "so_30315524_30315524_0": {"length": 15, "quality": 1.0, "section_id": 411}, "so_30315524_30315524_2": {"length": 7, "quality": 0.875, "section_id": 7189}, "so_30315524_30315524_3": {"length": 5, "quality": 1.0, "section_id": 7189}}, "n3337": {"so_30315524_30315524_1": {"length": 5, "quality": 0.8333333333333334, "section_id": 6933}, "so_30315524_30315524_3": {"length": 5, "quality": 1.0, "section_id": 6933}, "so_30315524_30315524_2": {"length": 7, "quality": 0.875, "section_id": 6933}, "so_30315524_30315524_0": {"length": 15, "quality": 1.0, "section_id": 402}}, "n4659": {"so_30315524_30315524_1": {"length": 5, "quality": 0.8333333333333334, "section_id": 8697}, "so_30315524_30315524_3": {"length": 5, "quality": 1.0, "section_id": 8701}, "so_30315524_30315524_2": {"length": 7, "quality": 0.875, "section_id": 8697}, "so_30315524_30315524_0": {"length": 15, "quality": 1.0, "section_id": 429}}}, "31617644": {"Id": "31617644", "PostTypeId": "2", "Body": "<p>The quoted wording would seem to imply that a compiler could correctly insert code that returns the memory associated with an object to the heap at the <em>beginning</em> of its destructor. But doing that would eliminate the ability of an object to reference its own members during destruction, which is required if an object is to be able to destroy itself.</p>\n<p>So I think the quoted wording is broken and should be fixed.</p>\n<p>Concerning what \"lifetime\" and \"existence\" mean, I propose that there are some different contexts, in which they mean different things: </p>\n<p>Within the context of construction, lifetime and existence begin when a constructor begins. Outside that context, they begin when a constructor ends.</p>\n<p>Within the context of destruction, lifetime and existence end when a destructor ends. Outside that context, they end when destruction begins.</p>\n<p>So an object may refer to its own members during construction, and potentially pass itself to functions of other objects, which may refer to the object and its members, and so on. But in general, objects (instances of classes) may not be referenced (without producing undefined behavior) until after one of their constructors has finished.</p>\n<p>And an object's destructor may refer to its own members and call functions of other (existing) objects, which may refer to the object being destroyed and/or its members. But in general, an object may not be referenced after its destructor has started.</p>\n<p>This sort of multi-contextual definition is what makes the most sense to me, but I can see arguments being made that an object should be considered to be alive from the moment memory is allocated for it to the moment that memory is released, and I would say memory for a shallow copy should be allocated for an object when one of its constructors starts, and released when its destructor ends.</p>\n", "LastEditorUserId": "283102", "LastActivityDate": "2015-07-28T19:00:59.013", "Score": "1", "CreationDate": "2015-07-24T18:44:56.673", "ParentId": "30315524", "CommentCount": "8", "LastEditDate": "2015-07-28T19:00:59.013", "OwnerUserId": "283102"}, "30315524": {"ViewCount": "800", "Body": "<p>[class.dtor]/15 reads, emphasis mine:</p>\n<blockquote>\n<p id=\"so_30315524_30315524_0\">Once a destructor is invoked for an object, <strong>the object no longer exists</strong>; the behavior is undefined if the destructor is invoked for an object whose lifetime has ended (3.8).</p>\n</blockquote>\n<p>However, as far as I can tell, this is the only reference in the standard to an object \"existing.\" This also seems to contrast with [basic.life], which is more specific:</p>\n<blockquote>\n<p id=\"so_30315524_30315524_1\">The lifetime of an object of type <code>T</code> ends when:  </p>\n<ul>\n<li><p id=\"so_30315524_30315524_2\">if <code>T</code> is a class type with <strong>a non-trivial destructor</strong> (12.4), the destructor call starts, or  </p></li>\n<li><p id=\"so_30315524_30315524_3\">the storage which the object occupies is reused or released.</p></li>\n</ul>\n</blockquote>\n<p>We have two different wordings here: \"the lifetime of an object ends\" and \"the object no longer exists,\" the former only happens with a non-trivial destructor and the latter happens with <em>any</em> destructor. What is the significance of the difference? What is the implication of an object no longer existing?</p>\n", "Title": "What does it mean for an object to exist in C++?", "CreationDate": "2015-05-19T01:55:27.667", "LastActivityDate": "2015-07-28T19:00:59.013", "CommentCount": "14", "FavoriteCount": "7", "PostTypeId": "1", "LastEditDate": "2015-05-19T02:00:12.120", "LastEditorUserId": "1144035", "Id": "30315524", "Score": "30", "OwnerUserId": "2069064", "Tags": "<c++><c++11><language-lawyer><c++14><object-lifetime>", "AnswerCount": "1"}});