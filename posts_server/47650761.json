post_cb({"bq_ids": {"n4140": {"so_47650761_47650921_0": {"length": 18, "quality": 0.9473684210526315, "section_id": 986}}, "n3337": {"so_47650761_47650921_0": {"length": 18, "quality": 0.9473684210526315, "section_id": 971}}, "n4659": {"so_47650761_47650921_0": {"length": 18, "quality": 0.9473684210526315, "section_id": 1049}}}, "47650921": {"Id": "47650921", "PostTypeId": "2", "Body": "<p>The concept you are missing is \"iterator invalidation\". <code>std::vector</code> is just a dynamic array with a finite capacity. When adding a new element results in an array size greater than the capacity, a reallocation needs to happen, and this invalidates all the iterators of the vector. This is defined in the standard draft, under section \"23.3.7.5 vector modifiers\", which talks about <code>insert</code> and <code>push_back</code>:</p>\n<blockquote>\n<p id=\"so_47650761_47650921_0\">Remarks: Causes reallocation if the new size is greater than the old capacity. If no reallocation happens,\n  all the iterators and references before the insertion point remain valid.</p>\n</blockquote>\n<p><code>std::list</code> on the other hand, is a doubly-linked list. So no reallocations need to happen to any of the elements already in the list, and only the <code>std::list&lt;T&gt;::end()</code> iterator is invalidated. But, since you are calling that method in the loop condition, your code just happens to work.</p>\n", "LastEditorUserId": "2718864", "LastActivityDate": "2017-12-05T10:29:52.893", "Score": "1", "CreationDate": "2017-12-05T10:08:35.527", "ParentId": "47650761", "CommentCount": "0", "OwnerUserId": "2718864", "LastEditDate": "2017-12-05T10:29:52.893"}, "47650761": {"ViewCount": "59", "Body": "<p>This one may well work with some compilers/OS, and crash with others. Same code with \"List\" it's working fine, While using \"vector\" only I am facing undefined behavior output.\nIs STL (vector) is safe??  </p>\n<p>Note: This is not a real-time code, I am just going through some sample programs that's it. </p>\n<pre><code>#include &lt;vector&gt;\n#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main() {\n  vector&lt;int&gt; v;\n  v.push_back(1);\n  v.push_back(2);\n  v.push_back(3);\n  v.push_back(4);\n  for (vector&lt;int&gt;::iterator i = v.begin();\n       i != v.end(); i++) {\n    cout &lt;&lt; *i &lt;&lt; endl;\n    if (*i == 1) {\n      v.push_back(5);\n    }\n  }\n}\n</code></pre>\n<p>Output with vector:\n1\n0\n3\n4\n0\n0\n4113\n0\n858851888\n943206709\n2617\n.\n.\n1\n2\n3\n4\n5\n5</p>\n<pre><code>#include &lt;list&gt;\n#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main() {\n  list&lt;int&gt; v;\n  v.push_back(1);\n  v.push_back(2);\n  v.push_back(3);\n  v.push_back(4);\n  for (list&lt;int&gt;::iterator i = v.begin();\n       i != v.end(); i++) {\n    cout &lt;&lt; *i &lt;&lt; endl;\n    if (*i == 1) {\n      v.push_back(5);\n    }\n  }\n}\n</code></pre>\n<p>Output with list:\n1\n2\n3\n4\n5</p>\n", "Title": "Undefined behavior while using vectors (STL), Please explain the below code output behind reason", "CreationDate": "2017-12-05T10:01:29.710", "LastActivityDate": "2017-12-05T10:29:52.893", "CommentCount": "3", "PostTypeId": "1", "Id": "47650761", "Score": "0", "OwnerUserId": "4643556", "Tags": "<c++><vector><stl>", "AnswerCount": "2"}, "47650827": {"Id": "47650827", "PostTypeId": "2", "Body": "<p>The line in the loop:</p>\n<pre><code>v.push_back(5);\n</code></pre>\n<p>might invalidate the iterator <code>i</code> (in the case a re-allocation is needed), so since then <code>++i</code> is undefined behaviour.</p>\n<p>One possibility to fix this is to reserve the vector first, so that the reallocation does not happen:</p>\n<pre><code>  vector&lt;int&gt; v;\n  v.reserve(5); // reserve enough to keep all the pushed items\n  v.push_back(1);\n  ...\n</code></pre>\n", "LastEditorUserId": "1274747", "LastActivityDate": "2017-12-05T10:09:47.037", "Score": "6", "CreationDate": "2017-12-05T10:04:32.683", "ParentId": "47650761", "CommentCount": "4", "OwnerUserId": "1274747", "LastEditDate": "2017-12-05T10:09:47.037"}});