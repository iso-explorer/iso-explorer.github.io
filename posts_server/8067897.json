post_cb({"8067929": {"ParentId": "8067897", "CommentCount": "6", "Body": "<p>Well int isn't an object.</p>\n<p>I beleive what's happening here is you're telling the int* to point to some memory address determined by int()</p>\n<p>so if int() creates 0, int* will point to memory address 0</p>\n", "OwnerUserId": "127817", "PostTypeId": "2", "Id": "8067929", "Score": "4", "CreationDate": "2011-11-09T16:13:53.453", "LastActivityDate": "2011-11-09T16:13:53.453"}, "8067936": {"ParentId": "8067897", "CommentCount": "7", "Body": "<p><code>int()</code> is a constant expression with a value of 0, so it's a valid way of producing a null pointer constant. Ultimately, it's just a slightly different way of saying <code>int *ptr = NULL;</code></p>\n", "OwnerUserId": "179910", "PostTypeId": "2", "Id": "8067936", "Score": "109", "CreationDate": "2011-11-09T16:14:17.380", "LastActivityDate": "2011-11-09T16:14:17.380"}, "8068024": {"ParentId": "8067897", "CommentCount": "0", "Body": "<p>From n3290 (C++03 uses similar text), 4.10 Pointer conversions [conv.ptr] paragraph 1 (the emphasis is mine):</p>\n<blockquote>\n<p id=\"so_8067897_8068024_0\">1 A null pointer constant is <strong>an integral constant expression (5.19) prvalue of integer type that evaluates to zero</strong> or a prvalue of type std::nullptr_t. A null pointer constant can be converted to a pointer type; <strong>the result is the null pointer value of that type</strong> and is distinguishable from every other value of object pointer or function pointer type. Such a conversion is called a null pointer conversion. [...]</p>\n</blockquote>\n<p><code>int()</code> is such an integral constant expression prvalue of integer type that evaluates to zero (that's a mouthful!), and thus can be used to initialize a pointer type. As you can see, <code>0</code> is not the only integral expression that is special cased.</p>\n", "OwnerUserId": "726300", "PostTypeId": "2", "Id": "8068024", "Score": "13", "CreationDate": "2011-11-09T16:20:57.643", "LastActivityDate": "2011-11-09T16:20:57.643"}, "bq_ids": {"n4140": {"so_8067897_8068024_0": {"section_id": 39, "quality": 0.7857142857142857, "length": 33}}, "n3337": {"so_8067897_8068024_0": {"section_id": 36, "quality": 0.9285714285714286, "length": 39}}, "n4659": {"so_8067897_8068024_0": {"section_id": 39, "quality": 0.7857142857142857, "length": 33}}}, "8067925": {"ParentId": "8067897", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>The expression <code>int()</code> evaluates to a constant default-initialized integer, which is the value 0. That value is special: it is used to initialize a pointer to the NULL state.</p>\n", "OwnerUserId": "5987", "LastEditorUserId": "560648", "LastEditDate": "2011-11-09T19:13:15.073", "Id": "8067925", "Score": "18", "CreationDate": "2011-11-09T16:13:36.693", "LastActivityDate": "2011-11-09T19:13:15.073"}, "8067897": {"CommentCount": "11", "AcceptedAnswerId": "8067936", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2011-11-09T16:10:43.933", "LastActivityDate": "2011-11-09T19:13:15.073", "LastEditDate": "2017-05-23T11:53:49.883", "ViewCount": "3516", "FavoriteCount": "12", "Title": "How is \"int* ptr = int()\" value initialization not illegal?", "Id": "8067897", "Score": "85", "Body": "<p>The following code (taken <a href=\"https://stackoverflow.com/questions/8067568/how-do-i-value-initialize-a-type-pointer-using-type-like-syntax/8067658#8067658\">from here</a>):</p>\n<pre><code>int* ptr = int();\n</code></pre>\n<p>compiles in Visual C++ and value-initializes the pointer.</p>\n<p>How is that possible? I mean <code>int()</code> yields an object of type <code>int</code> and I can't assign an <code>int</code> to a pointer.</p>\n<p>How is the code above not illegal?</p>\n", "Tags": "<c++><visual-c++><pointers><initialization><built-in-types>", "OwnerUserId": "57428", "AnswerCount": "5"}, "8067927": {"ParentId": "8067897", "PostTypeId": "2", "CommentCount": "13", "Body": "<p>Because <code>int()</code> yields <code>0</code>, which is interchangeable with <code>NULL</code>. <code>NULL</code> itself is defined as <code>0</code>, unlike C's <code>NULL</code> which is <code>(void *) 0</code>.</p>\n<p>Note that this would be an error:</p>\n<pre><code>int* ptr = int(5);\n</code></pre>\n<p>and this will still work:</p>\n<pre><code>int* ptr = int(0);\n</code></pre>\n<p><code>0</code> is a special constant value and as such it can be treated as a pointer value. Constant expressions that yield <code>0</code>, such as <code>1 - 1</code> are as well allowed as null-pointer constants.</p>\n", "OwnerUserId": "265804", "LastEditorUserId": "265804", "LastEditDate": "2011-11-09T18:02:41.170", "Id": "8067927", "Score": "34", "CreationDate": "2011-11-09T16:13:44.260", "LastActivityDate": "2011-11-09T18:02:41.170"}});