post_cb({"23727987": {"ParentId": "23727952", "PostTypeId": "2", "CommentCount": "5", "CreationDate": "2014-05-18T23:50:27.920", "Score": "2", "LastEditorUserId": "3093378", "LastEditDate": "2014-05-18T23:55:32.867", "Id": "23727987", "OwnerUserId": "3093378", "Body": "<p><strong>8.3.6/10:</strong> </p>\n<p>A virtual function call (10.3) uses the default arguments in the declaration of the virtual function determined by the static type of the pointer or reference denoting the object. An overriding function in a derived class does not acquire default arguments from the function it overrides.</p>\n", "LastActivityDate": "2014-05-18T23:55:32.867"}, "23727952": {"CommentCount": "2", "ViewCount": "98", "PostTypeId": "1", "LastEditorUserId": "951890", "CreationDate": "2014-05-18T23:43:01.777", "LastActivityDate": "2014-05-19T00:37:25.153", "Title": "Is there any quote in the Standard supporting the result shown below?", "AcceptedAnswerId": "23727984", "LastEditDate": "2014-05-19T00:37:25.153", "Id": "23727952", "Score": "0", "Body": "<p>I basically copied <a href=\"http://coliru.stacked-crooked.com/a/f0201db5870af4e0\" rel=\"nofollow\">this example</a> from <code>Item 21. Overriding Virtual Functions</code> in Herb Sutter's book <code>Exceptional C++</code>.</p>\n<pre><code>#include &lt;iostream&gt;\n\nclass Base {\npublic:\n    virtual void f(int i = 10) { std::cout &lt;&lt; i &lt;&lt; '\\n'; }\n};\n\nclass Derived : public Base {\npublic:\n    void f(int i = 20) { std::cout &lt;&lt; i &lt;&lt; '\\n'; }\n};\n\nint main()\n{\n    Base* p = new Derived;\n    p-&gt;f();\n}\n</code></pre>\n<p>Surprisingly (for me at least) the code prints 10 (not 20) and the author explains this with the following words in page 122: <code>The thing to remember is that, like overloads, default parameters are taken from the static type (here Base) of the object, hence the default value of 10 is taken. However, the function happens to be virtual, so the function actually called is based on the dynamic type (here Derived) of the object.</code></p>\n<p>Is there any quote in the C++11 Standard supporting this?</p>\n", "Tags": "<c++><c++11><override><language-lawyer>", "OwnerUserId": "2548699", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_23727952_23727984_0": {"section_id": 3261, "quality": 0.896551724137931, "length": 26}}, "n3337": {"so_23727952_23727984_0": {"section_id": 3133, "quality": 0.896551724137931, "length": 26}}, "n4659": {"so_23727952_23727984_0": {"section_id": 4019, "quality": 0.896551724137931, "length": 26}}}, "23727984": {"ParentId": "23727952", "PostTypeId": "2", "CommentCount": "3", "CreationDate": "2014-05-18T23:49:58.603", "Score": "1", "LastEditorUserId": "179910", "LastEditDate": "2014-05-18T23:55:04.223", "Id": "23727984", "OwnerUserId": "179910", "Body": "<p>\u00a78.3.6/10 (aka [dcl.fct.default]/10):</p>\n<blockquote>\n<p id=\"so_23727952_23727984_0\">A virtual function call (10.3) uses the default arguments in the declaration of the virtual function determined by the <strong>static type of the pointer or reference denoting the object</strong>. An overriding function in a derived class does not acquire default arguments from the function it overrides. [emphasis added]</p>\n</blockquote>\n<p>This specific quote is from N3337, but to the best of my recollection, this part of C++ has remained essentially constant over the years, so I would expect any more than the most minor wording changes between different revisions of the standard.</p>\n", "LastActivityDate": "2014-05-18T23:55:04.223"}});