post_cb({"39278082": {"Tags": "<c++><initialization><language-lawyer><c++1z>", "ViewCount": "72", "CreationDate": "2016-09-01T17:57:48.430", "Title": "What does term `one viable function` refer to in [expr.static.cast]/4?", "CommentCount": "4", "AnswerCount": "0", "Score": "0", "OwnerUserId": "2548699", "Id": "39278082", "LastActivityDate": "2016-09-01T17:57:48.430", "Body": "<p><a href=\"http://eel.is/c++draft/expr.static.cast#4\" rel=\"nofollow\">[expr.static.cast]/4</a> (emphasis is mine):</p>\n<blockquote>\n<p id=\"so_39278082_39278082_0\">An expression e can be explicitly converted to a type T if there is an implicit conversion sequence ([over.best.ics]) from e to T, or if\n  overload resolution for a direct-initialization ([dcl.init]) of an\n  object or reference of type T from e would find at least <strong>one viable\n  function</strong> ([over.match.viable]). If T is a reference type, the effect\n  is the same as performing the declaration and initialization</p>\n<p id=\"so_39278082_39278082_1\">T t(e);</p>\n<p id=\"so_39278082_39278082_2\">for some invented temporary variable t ([dcl.init]) and then using the\n  temporary variable as the result of the conversion. Otherwise, the\n  result object is direct-initialized from e. [ Note: The conversion is\n  ill-formed when attempting to convert an expression of class type to\n  an inaccessible or ambiguous base class.  \u2014 end note ]</p>\n</blockquote>\n<p>In the case of overload resolution of an object of type <code>T</code>, does the term <strong>one viable funtion</strong> refer to a constructor of the class <code>T</code> or to a conversion function in the class, of which <code>e</code> is an object.  </p>\n", "PostTypeId": "1"}, "bq_ids": {"n4659": {"so_39278082_39278082_0": {"length": 28, "section_id": 7529, "quality": 0.9032258064516129}, "so_39278082_39278082_2": {"length": 26, "section_id": 7529, "quality": 0.8387096774193549}}}});