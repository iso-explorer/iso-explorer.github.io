post_cb({"37639006": {"Id": "37639006", "PostTypeId": "2", "Body": "<p>Yes, there is a difference. If a member function is defined inside class definition then the compiler tries to make it an inline function. For your example, the function is simple enough to make it inline. So the compiler has made <code>bar</code> inline and you only see symbol of <code>baz</code>.</p>\n<p>Whether it will be good or bad depends largely on the specific functions and your use case. Inline function do not need an actual function call, the there is a performance improvement there. But the downside is if you include the class header in many places then that will increase the binary size.</p>\n<p>Also note that inline is a request to the compiler. The compiler is free to ignore the request and treat it a normal method.</p>\n", "LastEditorUserId": "377953", "LastActivityDate": "2016-06-05T07:01:35.480", "Score": "2", "CreationDate": "2016-06-05T06:09:56.037", "ParentId": "37638870", "CommentCount": "2", "OwnerUserId": "377953", "LastEditDate": "2016-06-05T07:01:35.480"}, "bq_ids": {"n4140": {"so_37638870_37640146_1": {"length": 27, "quality": 0.9642857142857143, "section_id": 5882}, "so_37638870_37640146_0": {"length": 11, "quality": 1.0, "section_id": 5881}}, "n3337": {"so_37638870_37640146_1": {"length": 27, "quality": 0.9642857142857143, "section_id": 5653}, "so_37638870_37640146_0": {"length": 11, "quality": 1.0, "section_id": 5652}}, "n4659": {"so_37638870_37640146_1": {"length": 27, "quality": 0.9642857142857143, "section_id": 7365}, "so_37638870_37640146_0": {"length": 11, "quality": 1.0, "section_id": 7364}}}, "37638870": {"ViewCount": "62", "Body": "<p>Are member functions defined in a class definition compiled differently than member functions defined elsewhere in C++?  For example, consider the following foo.h</p>\n<pre><code>#pragma once\nstruct foo {\n    void bar() {}\n    void buz();\n};\n</code></pre>\n<p>and foo.cpp</p>\n<pre><code>#include \"foo.h\"\nvoid foo::buz() {};\n</code></pre>\n<p>If we look at the symbols for foo.o</p>\n<pre><code>$ g++ -c foo.cpp\n\n$ nm -a foo.o\n0000000000000000 b .bss\n0000000000000000 n .comment\n0000000000000000 d .data\n0000000000000000 r .eh_frame\n0000000000000000 a foo.cpp\n0000000000000000 n .note.GNU-stack\n0000000000000000 t .text\n0000000000000000 T _ZN3foo3buzEv\n\n$ c++filt _ZN3foo3buzEv\nfoo::buz()\n</code></pre>\n<p>we see that we only have a symbol for <code>foo::buz</code>.  Now, say that we compile multiple files that all include <code>foo.h</code> and then create a library from the result.  Are the member functions <code>bar</code> and <code>buz</code> treated differently?</p>\n", "AcceptedAnswerId": "37639006", "Title": "Are member functions defined in a class definition compiled differently than member functions defined elsewhere in C++?", "CreationDate": "2016-06-05T05:48:35.897", "Id": "37638870", "CommentCount": "1", "PostTypeId": "1", "LastActivityDate": "2016-06-05T08:59:57.513", "Score": "3", "OwnerUserId": "1932452", "Tags": "<c++>", "AnswerCount": "2"}, "37640146": {"Id": "37640146", "PostTypeId": "2", "Body": "<p>As from <a href=\"http://eel.is/c++draft/class.mfct#1\" rel=\"nofollow\">9.2.1/1</a>:</p>\n<blockquote>\n<p id=\"so_37638870_37640146_0\">A member function may be defined in its class definition, in which case it is an\u00a0<em>inline</em> member function</p>\n</blockquote>\n<p>On the other side, from <a href=\"http://eel.is/c++draft/class.mfct#2\" rel=\"nofollow\">9.2.1/2</a>:</p>\n<blockquote>\n<p id=\"so_37638870_37640146_1\">An inline member function (whether static or non-static) may also be defined outside of its class definition provided either its declaration in the class definition or its definition outside of the class definition declares the function as\u00a0inline\u00a0orconstexpr.</p>\n</blockquote>\n<p>The question was: <em>Are member functions defined in a class definition compiled differently than member functions defined elsewhere in C++?</em></p>\n<p>It mostly depends on how you define them, as you can deduce from the citations above.<br>\nIn your example, they are actually different.</br></p>\n", "LastActivityDate": "2016-06-05T08:59:57.513", "CommentCount": "0", "CreationDate": "2016-06-05T08:59:57.513", "ParentId": "37638870", "Score": "1", "OwnerUserId": "4987285"}});