post_cb({"10675111": {"Id": "10675111", "PostTypeId": "2", "Body": "<p>Most implementations just ignore the <code>register</code> keyword (unless it imposes a syntactical or semantical error).</p>\n<p>The standard also doesn't say that anything must be kept in a register; merely that it's a hint to the implementation that the variable is going to be used very often. Its use is even deprecated.</p>\n<blockquote>\n<h2>7.1.1 Storage class specifiers [dcl.stc]</h2>\n<p id=\"so_10675072_10675111_0\">3) A register specifier is a hint to the implementation that the variable so declared will be heavily used. [ Note: The hint can be ignored and in most implementations it will be ignored if the address of the variable is taken. This use is deprecated (see D.2). \u2014 end note ]</p>\n</blockquote>\n", "LastEditorDisplayName": "user1203803", "OwnerDisplayName": "user1203803", "LastActivityDate": "2012-05-21T13:56:50.960", "CommentCount": "4", "CreationDate": "2012-05-20T16:20:28.517", "ParentId": "10675072", "Score": "13", "LastEditDate": "2012-05-21T13:56:50.960"}, "10675097": {"PostTypeId": "2", "Body": "<p>Only specific number of registers are available for any C++ program.  </p>\n<p>Also, it is just a suggestion for the compiler mostly compilers can do this optimization themselves so there is not really much use of using <code>register</code> keyword and so more because compilers may or may not follow the suggestion.  </p>\n<p><strike>So the only thing <code>register</code> keyword does with modern compilers is prevent you from using <code>&amp;</code> to take the address of the variable.</strike></p>\n<p>Using the <code>register</code> keyword just prevents you from taking the address of the variable in C, while in C++ taking the address of the variable just makes the compiler ignore the <code>register</code> keyword. </p>\n<p>Bottomline is, <strong>Just don't use it!</strong></p>\n<p>Nicely explained by Herb:<br>\n<strong><a href=\"http://www.drdobbs.com/184403859\" rel=\"nofollow\">Keywords That Aren't (or, Comments by Another Name)</a></strong></br></p>\n", "LastActivityDate": "2012-05-20T16:27:47.437", "LastEditorUserId": "452307", "Id": "10675097", "CommentCount": "7", "CreationDate": "2012-05-20T16:18:47.113", "ParentId": "10675072", "Score": "5", "OwnerUserId": "452307", "LastEditDate": "2012-05-20T16:27:47.437"}, "10675152": {"PostTypeId": "2", "Body": "<p>Probably the only remotely serious use for the <code>register</code> keyword left is a <a href=\"http://gcc.gnu.org/onlinedocs/gcc/Global-Reg-Vars.html\">GCC extension</a> that allows you to use a hard-coded hardware register without inline assembly:</p>\n<pre><code>register int* foo asm(\"a5\");\n</code></pre>\n<p>This will mean that any access to <code>foo</code> will affect the CPU register <code>a5</code>.</p>\n<p>This extension of course has little use outside of very low-level code.</p>\n", "LastActivityDate": "2012-05-20T16:25:28.953", "Id": "10675152", "CommentCount": "0", "CreationDate": "2012-05-20T16:25:28.953", "ParentId": "10675072", "Score": "5", "OwnerUserId": "784668"}, "10675118": {"PostTypeId": "2", "Body": "<p>No, it's not used. It's only a hint, and a very weak one at that. Compilers have register allocators, they can figure out which variables should be kept in registers (and account for things you probably never thought about).</p>\n", "LastActivityDate": "2012-05-20T16:20:56.717", "Id": "10675118", "CommentCount": "0", "CreationDate": "2012-05-20T16:20:56.717", "ParentId": "10675072", "Score": "3", "OwnerUserId": "16102"}, "bq_ids": {"n4140": {"so_10675072_10675111_0": {"length": 21, "quality": 0.8076923076923077, "section_id": 5393}, "so_10675072_10675122_0": {"length": 24, "quality": 0.8275862068965517, "section_id": 5392}, "so_10675072_10675122_1": {"length": 20, "quality": 0.7692307692307693, "section_id": 5393}}, "n3337": {"so_10675072_10675122_1": {"length": 20, "quality": 0.7692307692307693, "section_id": 5187}, "so_10675072_10675122_0": {"length": 24, "quality": 0.8275862068965517, "section_id": 5186}, "so_10675072_10675111_0": {"length": 21, "quality": 0.8076923076923077, "section_id": 5187}}}, "10675072": {"ViewCount": "4092", "Body": "<p>Just came across the register keyword in C++ and I wondered as this seems a good idea (keeping certain variables in a register) surely the compiler does this by default?</p>\n<p>So I wondered is this keyword still used?</p>\n", "AcceptedAnswerId": "10675111", "Title": "Is the register keyword still used?", "CreationDate": "2012-05-20T16:16:04.453", "Id": "10675072", "CommentCount": "6", "FavoriteCount": "4", "PostTypeId": "1", "LastActivityDate": "2012-05-21T13:56:50.960", "Score": "10", "OwnerUserId": "997112", "Tags": "<c++><performance><caching><latency>", "AnswerCount": "5"}, "10675122": {"PostTypeId": "2", "Body": "<p>The standard says this (7.1.1(2-3)):</p>\n<blockquote>\n<p id=\"so_10675072_10675122_0\">The register speci\ufb01er shall be applied only to names of variables declared in a block (6.3) or to function parameters (8.4). It speci\ufb01es that the named variable has automatic storage duration (3.7.3). A variable declared without a storage-class-speci\ufb01er at block scope or declared as a function parameter has automatic storage duration by default.</p>\n<p id=\"so_10675072_10675122_1\">A register speci\ufb01er is a hint to the implementation that the variable so declared will be heavily used. [ Note: The hint can be ignored and in most implementations it will be ignored if the address of the variable is taken. This use is deprecated (see D.2). \u2014 end note ]</p>\n</blockquote>\n<p>In summary: <code>register</code> is useless, vestigial, atavistic and deprecated. Its main purpose is to make the life of people harder who are trying to implement self-registering classes and want to name the main function <s><code>register(T *)</code></s>.</p>\n", "LastActivityDate": "2012-05-20T16:25:01.673", "LastEditorUserId": "69178", "Id": "10675122", "CommentCount": "0", "CreationDate": "2012-05-20T16:21:30.030", "ParentId": "10675072", "Score": "7", "OwnerUserId": "596781", "LastEditDate": "2012-05-20T16:25:01.673"}});