post_cb({"9701624": {"ParentId": "9701525", "CommentCount": "0", "Body": "<p>That is not possible to do, since the compiler is not able to deduce the type, and you can not pass it to the constructor.</p>\n<p>Few possible solutions :<br>\n1. make the Data class a template<br>\n2. pass some parameter to the constructor. This might be a better solution to use a dependency injection and pass the loader to the constructor.  </br></br></p>\n", "OwnerUserId": "476681", "PostTypeId": "2", "Id": "9701624", "Score": "0", "CreationDate": "2012-03-14T12:04:57.837", "LastActivityDate": "2012-03-14T12:04:57.837"}, "9701525": {"CommentCount": "1", "ViewCount": "169", "PostTypeId": "1", "ClosedDate": "2012-03-14T12:18:49.770", "LastEditorUserId": "-1", "CreationDate": "2012-03-14T11:59:00.577", "LastActivityDate": "2012-03-14T12:14:00.520", "Title": "How to select constructor template?", "AcceptedAnswerId": "9701570", "LastEditDate": "2017-05-23T12:20:14.883", "Id": "9701525", "Score": "0", "Body": "<blockquote>\n<p id=\"so_9701525_9701525_0\"><strong>Possible Duplicate:</strong><br>\n<a href=\"https://stackoverflow.com/questions/2786946/c-invoke-explicit-template-constructor\">C++ invoke explicit template constructor</a> </br></p>\n</blockquote>\n<p>First imagine I have a class Data with a templated member function :-</p>\n<pre><code>class Data\n{\npublic:\n    template &lt;class Loader&gt; void load(const std::string&amp; filename);\n};\n</code></pre>\n<p>I can use this like this -</p>\n<pre><code>Data data;\ndata.load&lt;SomeLoader&gt;(filename);\n</code></pre>\n<p>and all works fine. I can select at compiler time via the template parameter which class I want my Data object to use to load some data.</p>\n<p>However I can't work out how to do this with constructors...</p>\n<pre><code>class Data\n{\npublic:\n    template &lt;class Loader&gt; Data(const std::string&amp; filename);\n};\n</code></pre>\n<p>That seems to compile perfectly well, but I can't seem to work out how to actually call the function.</p>\n<pre><code>Data&lt;SomeLoader&gt; data;\n</code></pre>\n<p>That doesn't work because that would invoke a class template, not a templated constructor.</p>\n<p>Is there some syntax I'm missing here?\n( If I add a constructor paramater of SomeLoader type, then the compiler correctly infers the class to use, but that's not what I need to do here)</p>\n", "Tags": "<c++>", "OwnerUserId": "417292", "AnswerCount": "2"}, "9701570": {"ParentId": "9701525", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>You are not missing any syntax. It is impossible to explicitly use a specialisation of a constructor template.</p>\n<p>The standard has a note about this at <code>[temp.arg.explicit]/7</code>:</p>\n<blockquote>\n<p id=\"so_9701525_9701570_0\">Because the explicit template argument list follows the function template name, and because con- version member function templates and constructor member function templates are called without using a function name, there is no way to provide an explicit template argument list for these function templates.</p>\n</blockquote>\n", "OwnerUserId": "485561", "LastEditorUserId": "485561", "LastEditDate": "2012-03-14T12:14:00.520", "Id": "9701570", "Score": "2", "CreationDate": "2012-03-14T12:01:21.867", "LastActivityDate": "2012-03-14T12:14:00.520"}, "bq_ids": {"n4140": {"so_9701525_9701570_0": {"section_id": 114, "quality": 0.9375, "length": 30}}, "n3337": {"so_9701525_9701570_0": {"section_id": 109, "quality": 0.9375, "length": 30}}, "n4659": {"so_9701525_9701570_0": {"section_id": 118, "quality": 0.9375, "length": 30}}}});