post_cb({"bq_ids": {"n4140": {"so_2479846_2479899_0": {"length": 19, "quality": 0.8636363636363636, "section_id": 3257}}, "n3337": {"so_2479846_2479899_0": {"length": 19, "quality": 0.8636363636363636, "section_id": 3129}}, "n4659": {"so_2479846_2479899_0": {"length": 19, "quality": 0.8636363636363636, "section_id": 4015}}}, "2479846": {"ViewCount": "2981", "Body": "<p>Why does the following give no compilation error?:  </p>\n<pre><code>// T.h\n\ntemplate&lt;class T&gt; class X\n{\npublic:\n    void foo(int a = 42);\n};\n</code></pre>\n<hr>\n<pre><code>// Main.cpp\n\n#include \"T.h\"\n#include &lt;iostream&gt;\n\ntemplate&lt;class T&gt; void X&lt;T&gt;::foo(int a = 13)\n{\n    std::cout &lt;&lt; a &lt;&lt; std::endl;\n}\n\nint main()\n{\n    X&lt;int&gt; x;\n    x.foo();   // prints 42\n}\n</code></pre>\n<p>It seems as though the <strong>13</strong> is just silently ignored by the compiler.  Why is this?<br>\nThe cooky thing is that if the class template definition is in <em>Main.cpp</em> instead of a header file, I do indeed get the <em>default parameter redefinition</em> error.</br></p>\n<p>Now I know the compiler will complain about this if it were just an ordinary (non-template) function.</p>\n<p>What does the standard have to say about default parameters in class template member functions or function templates?</p>\n</hr>", "AcceptedAnswerId": "2479899", "Title": "No \"redefinition of default parameter error\" for class template member function?", "CreationDate": "2010-03-19T18:52:32.040", "Id": "2479846", "CommentCount": "4", "LastEditDate": "2010-03-19T19:39:44.883", "PostTypeId": "1", "LastEditorDisplayName": "user123456", "OwnerDisplayName": "user123456", "LastActivityDate": "2010-03-19T19:39:44.883", "Score": "8", "Tags": "<c++><visual-c++><templates><compiler-construction>", "AnswerCount": "1"}, "2479899": {"Id": "2479899", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_2479846_2479899_0\"><strong>8.3.6 \u00a76</strong> The  default  arguments  in  a member function definition that\n  appears   outside of the class\n  definition are added to the set of\n  default  arguments provided by the\n  member function declaration in the\n  class definition.<br>\n  [Example:  </br></p>\n<pre><code>class C {\n    void f(int i = 3);\n    void g(int i, int j = 99);\n};\nvoid C::f(int i = 3) // error: default argument already\n{ }                  // specified in class scope\nvoid C::g(int i = 88, int j) // in this translation unit,\n{ }                          // C::g can be called with no argument\n</code></pre>\n<p id=\"so_2479846_2479899_1\">--end example]</p>\n</blockquote>\n<p>According to the standard, it should give you an error.</p>\n", "LastActivityDate": "2010-03-19T19:01:36.463", "CommentCount": "3", "CreationDate": "2010-03-19T19:01:36.463", "ParentId": "2479846", "Score": "3", "OwnerUserId": "212384"}});