post_cb({"bq_ids": {"n4140": {"so_34727228_34727585_0": {"length": 25, "quality": 0.9615384615384616, "section_id": 3335}}, "n3337": {"so_34727228_34727585_0": {"length": 25, "quality": 0.9615384615384616, "section_id": 3205}}, "n4659": {"so_34727228_34727585_0": {"length": 25, "quality": 0.9615384615384616, "section_id": 4102}}}, "34727585": {"Id": "34727585", "PostTypeId": "2", "Body": "<p>Per [except.throw]</p>\n<blockquote>\n<p id=\"so_34727228_34727585_0\">When an exception is thrown, control is transferred to the nearest handler with a matching type (15.3); \u201cnearest\u201d means the handler for which the compound-statement or ctor-initializer following the try keyword was most recently entered by the thread of control and not yet exited.</p>\n</blockquote>\n<p>This means that if an exception is thrown and none of the handlers match its type the exception will propagate up until it finds one or none are found.  You can see this working in this little example</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;exception&gt;\n\nvoid foo3() { std::exception e; throw(e); }\n\nvoid foo2() { try { foo3(); } catch (std::bad_exception){} }\n\nvoid foo() { foo2(); }\n\n\nint main()\n{\n    try\n    {\n       foo();\n    }\n    catch (std::exception &amp; e)\n    {\n        std::cout &lt;&lt; \"caught in main()\";\n    }\n}\n</code></pre>\n<p>Output:</p>\n<pre><code>caught in main()\n</code></pre>\n<p><kbd><a href=\"http://coliru.stacked-crooked.com/a/d0bd9cccc739e4f1\" rel=\"nofollow\">Live Example</a></kbd></p>\n", "LastActivityDate": "2016-01-11T17:29:13.947", "CommentCount": "1", "CreationDate": "2016-01-11T17:29:13.947", "ParentId": "34727228", "Score": "3", "OwnerUserId": "4342498"}, "34727228": {"ViewCount": "564", "Body": "<p>What is the \"right\" way to throw exceptions out of several function calls all the way back to main?</p>\n<p>What I'm doing now is for example:</p>\n<pre><code>void foo() {\n    ...\n    try {\n    ...\n    }catch(a1) {\n            ...\n        throw(a2);\n    }\n    ...\n}\n\nvoid baz() {\n    ...\n    try {\n        foo();\n    }catch(a2) {\n        ...\n        throw(a3);\n    }\n    ...\n}\n</code></pre>\n<p>etc</p>\n<p>There's got to be a better way to throw consequently and go out of call stack without catching every exception on the way, is it?</p>\n", "AcceptedAnswerId": "34727585", "Title": "Way to throw exceptions out of several function calls all the way back to main?", "CreationDate": "2016-01-11T17:09:28.377", "Id": "34727228", "CommentCount": "6", "PostTypeId": "1", "LastActivityDate": "2016-01-11T17:29:13.947", "Score": "1", "OwnerUserId": "4279201", "Tags": "<c++><c++11><syntax><exception-handling>", "AnswerCount": "1"}});