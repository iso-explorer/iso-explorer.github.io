post_cb({"5889856": {"ParentId": "5889691", "CommentCount": "0", "CreationDate": "2011-05-04T21:05:19.333", "OwnerUserId": "187690", "PostTypeId": "2", "Id": "5889856", "Score": "2", "Body": "<p>What you observe simply means that the library supplied with the compiler is broken. It is broken in a sense that it does not follow the requirements of C++ language standard. </p>\n<p>This particular issue with <code>new</code> has been present in the earlier versions of C++ standard library (like the one supplied with VC 6.0). Later some versions of the compiler/library were updated to satisfy standard requirements. Apparently, the Windows Mobile version was left unchanged.</p>\n<p>It is quite possible that it was done intentionally in order to preserve the compatibility with older code. You might also wanna check for some compiler configuration switch that might control this behavior. I don't know whether such a switch exists.</p>\n", "LastActivityDate": "2011-05-04T21:05:19.333"}, "5889691": {"CommentCount": "5", "ViewCount": "107", "CreationDate": "2011-05-04T20:50:15.847", "LastActivityDate": "2011-05-04T21:18:39.457", "Title": "Windows Mobile returns 0 on `new` failure", "AcceptedAnswerId": "5889856", "PostTypeId": "1", "Id": "5889691", "Score": "0", "Body": "<p>I have a Visual Studio 2008 Windows Mobile 6.5.3 ARMV4I project. I check for out of memory conditions using a try/catch block looking for <code>std::bad_alloc</code> exceptions. But, through testing I've found that it can actually just return a NULL value and not throw an exception. </p>\n<pre><code>int _tmain( int argc, _TCHAR* argv[] )\n{\n    int i = 0;\n\n    try\n    {\n        for( ; i &lt; 30000; ++i )\n        {\n            BYTE* f = new BYTE[1024];\n            if( NULL == f )\n            {\n                NKDbgPrintfW( L\"NULL - Survived %d iterations\\r\\n\", i );\n                break;\n            }\n        }\n    }\n    catch( std::bad_alloc&amp; )\n    {\n        NKDbgPrintfW( L\"std::bad_alloc - Survived %d iterations\\r\\n\", i );\n    }\n\n    return 0;\n}\n</code></pre>\n<p>This prints: <code>NULL - Survived 29599 iterations</code>.</p>\n<p>I am not linking against <code>nothrownew.obj</code> and according to this I should expect a <code>std::bad_alloc</code> exception . <a href=\"http://msdn.microsoft.com/en-us/library/kftdy56f%28v=VS.90%29.aspx\" rel=\"nofollow\">http://msdn.microsoft.com/en-us/library/kftdy56f%28v=VS.90%29.aspx</a></p>\n<p>Does anybody know what's going on? </p>\n<p>Thanks,\nPaulH</p>\n", "Tags": "<c++><exception><windows-mobile>", "OwnerUserId": "57185", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_5889691_5890000_1": {"section_id": 6816, "quality": 0.8421052631578947, "length": 16}, "so_5889691_5890000_0": {"section_id": 6096, "quality": 0.6578947368421053, "length": 25}}, "n3337": {"so_5889691_5890000_1": {"section_id": 6571, "quality": 0.8421052631578947, "length": 16}, "so_5889691_5890000_0": {"section_id": 5862, "quality": 0.6578947368421053, "length": 25}}, "n4659": {"so_5889691_5890000_1": {"section_id": 8308, "quality": 0.8421052631578947, "length": 16}, "so_5889691_5890000_0": {"section_id": 7593, "quality": 0.7105263157894737, "length": 27}}}, "5890000": {"ParentId": "5889691", "CommentCount": "0", "CreationDate": "2011-05-04T21:18:39.457", "OwnerUserId": "251738", "PostTypeId": "2", "Id": "5890000", "Score": "0", "Body": "<p>The error style depends on the type of new expression used. The standard says this about the allocation function:</p>\n<p>5.3.4/13:</p>\n<blockquote>\n<p id=\"so_5889691_5890000_0\">[Note: unless an allocation function\n  is declared with an empty\n  exception specification (15.4),\n  throw(), it indicates failure to\n  allocate storage by throwing a\n  bad_alloc exception (clause 15,\n  18.4.2.1); it returns a nonnull pointer otherwise. If the allocation\n  function is declared with an empty\n  exception specification, throw(), it\n  returns null to indicate failure to\n  allocate storage and a nonnull pointer\n  otherwise. ]</p>\n</blockquote>\n<p>Then in 18.4.1.1/5 we learn that the <code>nothrow</code> version of the allocation function is called only in a placement style <code>new</code> expression indicating <code>nothrow</code>:</p>\n<blockquote>\n<p id=\"so_5889691_5890000_1\">Effects: Same as above, except that it\n  is called by a placement version of a\n  new expression when a C++ program\n  prefers a null pointer result as an\n  error indication, instead of a\n  bad_alloc exception.</p>\n</blockquote>\n<p>In other words, the compiler appears to be non-conforming. Most likely this is to avoid library code needed to support exceptions on mobile devices and is probably documented as part of the Windows Mobile compiler documentation.</p>\n", "LastActivityDate": "2011-05-04T21:18:39.457"}});