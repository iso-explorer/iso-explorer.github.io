post_cb({"3953154": {"CommentCount": "1", "ViewCount": "389", "PostTypeId": "1", "LastEditorUserId": "14860", "CreationDate": "2010-10-17T12:15:07.490", "LastActivityDate": "2015-08-03T02:46:54.167", "Title": "lvalue-to-rvalue conversion of an array in ISO C", "AcceptedAnswerId": "3953230", "LastEditDate": "2015-08-03T02:46:54.167", "Id": "3953154", "Score": "6", "Body": "<p>C++ ANSI ISO IEC 14882 2003 Annex C.1 (page 668):</p>\n<p>Change: The result of a conditional expression, an assignment expression, or a comma expression may bean lvalue<br>\nRationale: C + + is an object-oriented language, placing relatively more emphasis on lvalues. For example, functions may return lvalues.<br>\nEffect on original feature: Change to semantics of well-defined feature. Some C expressions that implicitly rely on lvalue-to-rvalue conversions will yield different results. For example,  </br></br></p>\n<pre><code>char arr[100];\nsizeof(0, arr)\n</code></pre>\n<p>yields 100 in C + + and <code>sizeof(char*)</code> in C.<br>\n...</br></p>\n<p>I was reading this just today and I remembered that a couple of months a go a friend of mine proposed a problem wchich was to write a function that would return 0 if it were compiled with C++ and 1 if it were compiled with C. I solved it taking advantage of the fact that in C a struct was in the outer scope. So, considering this new information, I decided that this would be another solution to the above problem, which I tried on Microsoft Visual Studio 2008, but regardless of whether it is compiled as C or C++ code <code>sizeof(0, arr)</code> always yields 4. So 2 questions:</p>\n<p>1.What is ISO C? Is it the current C standard? Is it the only one (I hear C is rapidly evolving)\n2. Is this a microsoft C++ bug?</p>\n<p>TIA </p>\n<p><em><strong>Edit: Sorry got mixed up with the output and edited it:</strong></em></p>\n", "Tags": "<c++><c><visual-studio-2008><language-lawyer><lvalue-to-rvalue>", "OwnerUserId": "469935", "AnswerCount": "3"}, "3953226": {"ParentId": "3953154", "CommentCount": "0", "CreationDate": "2010-10-17T12:33:59.930", "OwnerUserId": "211659", "PostTypeId": "2", "Id": "3953226", "Score": "0", "Body": "<p>For arrays, the <code>sizeof</code> returns the total size. Be careful about arrays passed as pointers.</p>\n<p>C99 standard:</p>\n<blockquote>\n<p id=\"so_3953154_3953226_0\">When applied to an operand that has array\n  type, the result is the total number of bytes in the array</p>\n</blockquote>\n", "LastActivityDate": "2010-10-17T12:33:59.930"}, "3953230": {"ParentId": "3953154", "PostTypeId": "2", "CommentCount": "8", "CreationDate": "2010-10-17T12:35:08.633", "Score": "1", "LastEditorUserId": "165520", "LastEditDate": "2010-10-17T13:22:11.887", "Id": "3953230", "OwnerUserId": "165520", "Body": "<blockquote>\n<p id=\"so_3953154_3953230_0\">Or just microsoft's C is not ISO C but some other standard C (if there exists any).</p>\n</blockquote>\n<p>Microsoft Visual C still supports C89 [only] whereas other compilers like gcc/clang etc support <a href=\"http://en.wikipedia.org/wiki/C99\" rel=\"nofollow\">C99</a> too which is the current Standard. </p>\n<p>C99 [Section <code>6.5.17/2</code>] says</p>\n<blockquote>\n<p id=\"so_3953154_3953230_1\">The  left  operand  of  a  comma  operator  is  evaluated  as  a  void  expression;  there  is  a  sequence point after its evaluation.  Then the right operand is evaluated; the result has its type and value.<sup>95</sup> </p>\n</blockquote>\n<p>Thus the result of <code>sizeof (0,arr)</code> would be <code>sizeof(char*)</code>[due to the implicit <code>lvalue</code> to <code>rvalue</code> conversion /automatic decay to pointer type] not <code>100*sizeof(char)</code></p>\n<p><code>sizeof(arr)</code> would have given <code>100*sizeof(char)</code> from <code>6.5.3.4/3</code></p>\n<p><sub>95)  A comma operator does not yield an lvalue.</sub></p>\n<hr>\n<blockquote>\n<p id=\"so_3953154_3953230_2\">decided that this would be another solution to the above problem, which I tried on Microsoft Visual Studio 2008, but regardless of whether it is compiled as C or C++ code sizeof(0, arr) always yields 4.</p>\n</blockquote>\n<p>C++03 [<code>5.18/1</code>] Comma Operator</p>\n<blockquote>\n<p id=\"so_3953154_3953230_3\">The type and\n  value of the result are the type and value of the right operand; the result is an lvalue if its right operand is.</p>\n</blockquote>\n<p>So  <code>sizeof(0, arr) = sizeof (arr)</code> and which would be equal to <code>100* sizeof(char)</code> and not = <code>sizeof(char*)</code>.</p>\n<p>So MSVC++ is giving incorrect result (in case of C++ code).</p>\n</hr>", "LastActivityDate": "2010-10-17T13:22:11.887"}, "bq_ids": {"n4140": {"so_3953154_3953226_0": {"section_id": 6077, "quality": 0.9, "length": 9}, "so_3953154_3953230_3": {"section_id": 6182, "quality": 0.8461538461538461, "length": 11}, "so_3953154_3953225_1": {"section_id": 6077, "quality": 0.9, "length": 9}}, "n3337": {"so_3953154_3953226_0": {"section_id": 5845, "quality": 0.9, "length": 9}, "so_3953154_3953230_3": {"section_id": 5943, "quality": 0.8461538461538461, "length": 11}, "so_3953154_3953225_1": {"section_id": 5845, "quality": 0.9, "length": 9}}, "n4659": {"so_3953154_3953226_0": {"section_id": 7573, "quality": 0.9, "length": 9}, "so_3953154_3953230_3": {"section_id": 7684, "quality": 0.8461538461538461, "length": 11}, "so_3953154_3953225_1": {"section_id": 7573, "quality": 0.9, "length": 9}}}, "3953225": {"ParentId": "3953154", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2010-10-17T12:33:54.813", "Score": "5", "LastEditorUserId": "14860", "LastEditDate": "2010-10-17T12:40:00.310", "Id": "3953225", "OwnerUserId": "14860", "Body": "<p>ISO C is <em>the</em> C standard. The current one is C99 but C1x is right around the corner. If by rapid, you mean a new standard every decade or so, then yes, it is rapidly evolving :-)</p>\n<p>Section 6.5.3.4/3 of ISO C99 states:</p>\n<blockquote>\n<p id=\"so_3953154_3953225_0\">When applied to an operand that has type char, unsigned char, or signed char, (or a qualified version thereof) the result is 1.</p>\n<p id=\"so_3953154_3953225_1\"><strong>When applied to an operand that has array type, the result is the total number of bytes in the array.</strong></p>\n</blockquote>\n", "LastActivityDate": "2010-10-17T12:40:00.310"}});