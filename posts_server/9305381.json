post_cb({"9305629": {"ParentId": "9305381", "CommentCount": "0", "Body": "<p>One result of that decision is that a static variable defined within an inline function will be shared between all instantiations of the function. If the default had been internal linkage, each translation unit would have gotten its own copy of the static variable. That's not how people expect things to work - inline vs. non-inline shouldn't affect the code semantics so drastically.</p>\n", "OwnerUserId": "5987", "PostTypeId": "2", "Id": "9305629", "Score": "17", "CreationDate": "2012-02-16T04:38:27.920", "LastActivityDate": "2012-02-16T04:38:27.920"}, "9305381": {"CommentCount": "12", "AcceptedAnswerId": "9305629", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2012-02-16T04:05:39.603", "LastActivityDate": "2017-07-19T14:31:22.540", "LastEditDate": "2017-05-23T12:24:49.517", "ViewCount": "2626", "FavoriteCount": "5", "Title": "Why do inline functions have external linkage by default?", "Id": "9305381", "Score": "16", "Body": "<p>The standard says that given a declaration of </p>\n<pre><code>inline void foo();\n</code></pre>\n<p>that <code>foo</code> is an <a href=\"https://stackoverflow.com/a/6209053/82320\">inline function with <em>external</em> linkage</a> (because by default all function declarations have external linkage). This strikes me as odd. because the one definition rule section 3.2 (in both C++03 and C++11) say:</p>\n<blockquote>\n<p id=\"so_9305381_9305381_0\">3 ... An inline function shall be defined in every translation unit in which it is used.</p>\n<p id=\"so_9305381_9305381_1\">5 There can be more than one definition of a[n] ... inline function with external linkage (7.1.2) ... Given such an entity named D defined in more than one translation unit ... each definition of D shall consist of the same sequence of tokens</p>\n</blockquote>\n<p>This means that an inline function might as well have internal linkage, because use of the function in any way through external linkage (that is, across translation units) would be to invoke undefined behavior (by paragraph 3), and that the content of the inline function in all translation units needs to be the same.</p>\n<p>Is there a backwards compatability or specific toolchain reason for this rule?</p>\n", "Tags": "<c++><c++11><inline><linkage><c++03>", "OwnerUserId": "82320", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_9305381_9305381_1": {"section_id": 7043, "quality": 0.9629629629629629, "length": 26}, "so_9305381_9305381_0": {"section_id": 5404, "quality": 1.0, "length": 6}}, "n3337": {"so_9305381_9305381_1": {"section_id": 6788, "quality": 0.9629629629629629, "length": 26}, "so_9305381_9305381_0": {"section_id": 5199, "quality": 1.0, "length": 6}}, "n4659": {"so_9305381_9305381_1": {"section_id": 8540, "quality": 0.9629629629629629, "length": 26}, "so_9305381_9305381_0": {"section_id": 6853, "quality": 1.0, "length": 6}}}, "9305599": {"CommentCount": "0", "CreationDate": "2012-02-16T04:33:13.270", "CommunityOwnedDate": "2012-02-16T04:33:13.270", "LastEditorUserId": "1038860", "LastActivityDate": "2017-07-19T14:31:22.540", "ParentId": "9305381", "PostTypeId": "2", "LastEditDate": "2017-07-19T14:31:22.540", "Id": "9305599", "Score": "9", "Body": "<p>This is aptly answered here by Jonathan Schilling's article: <strong><a href=\"https://web.archive.org/web/20060509150105/http://www.glenmccl.com/ansi_015.htm\" rel=\"nofollow noreferrer\">Extern Inlines By Default</a></strong>.      </p>\n<p>To quote him about motivation for this change:     </p>\n<blockquote>\n<p id=\"so_9305381_9305599_0\"><em>The immediate motivation for this change was a need of the new template compilation model that was adopted at the same meeting; but more generally it was felt that changing the default was an idea whose time had come, and the change was approved unanimously in both ANSI and ISO.</em></p>\n</blockquote>\n", "OwnerUserId": "452307"}});