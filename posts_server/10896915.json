post_cb({"10897128": {"ParentId": "10896915", "CommentCount": "1", "Body": "<p>There is no C++ \"build-in\" function, but you can resolve this with compile time efficiency using metaprogramming.</p>\n<pre><code>template &lt;int i&gt;\nstruct D\n{\n    D(void *);\n    operator int();\n};\n\ntemplate &lt;int p, int i&gt;\nstruct is_prime\n{\n    enum { prim = (p%i) &amp;&amp; is_prime&lt;(i&gt;2?p:0), i&gt;::prim };\n};\n\ntemplate &lt;int i&gt;\nstruct Prime_print\n{\n    Prime_print&lt;i-1&gt;    a;\n    enum { prim = is_prime&lt;i,i-1&gt;::prim };\n    void f() { D&lt;i&gt; d = prim; }\n};\n\nstruct is_prime&lt;0,0&gt; { enum { prim = 1 }; };\nstruct is_prime&lt;0,1&gt; { enum { prim = 1 }; };\nstruct Prime_print&lt;2&gt;\n{\n    enum { prim = 1 };\n    void f() { D&lt;2&gt; d = prim; }\n};\n\nvoid foo()\n{\n    Prime_print&lt;10&gt; a;\n}\n</code></pre>\n<p>Hope it helps</p>\n", "OwnerUserId": "572586", "PostTypeId": "2", "Id": "10897128", "Score": "0", "CreationDate": "2012-06-05T12:15:28.973", "LastActivityDate": "2012-06-05T12:15:28.973"}, "10896934": {"ParentId": "10896915", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Short answer: no, there's no such function.</p>\n<p>The only time the word \"prime\" is used in the standard is a footnote in 26.5.3.2, which is where the <code>mersenne_twister_engine</code> class template is described. The footnote says:</p>\n<blockquote>\n<p id=\"so_10896915_10896934_0\">274) The name of this engine refers, in part, to a property of its period: For properly-selected values of the parameters, the period is closely related to a large Mersenne prime number.</p>\n</blockquote>\n<p>If such function existed, the standard would contain more occurrences of that word, as it would use it to describe the behavior of that function.</p>\n", "OwnerUserId": "784668", "LastEditorUserId": "784668", "LastEditDate": "2012-06-05T12:08:03.987", "Id": "10896934", "Score": "4", "CreationDate": "2012-06-05T12:01:28.047", "LastActivityDate": "2012-06-05T12:08:03.987"}, "10896915": {"CommentCount": "6", "ViewCount": "8452", "PostTypeId": "1", "CreationDate": "2012-06-05T12:00:21.570", "LastActivityDate": "2017-07-16T07:34:41.073", "Title": "Built in prime checking function", "AcceptedAnswerId": "10896934", "LastEditorDisplayName": "user1114055", "LastEditDate": "2012-06-05T19:11:17.557", "Id": "10896915", "Score": "3", "Body": "<p>Does C++ have any built in function to check if the number is prime or not. If yes, then in which library?</p>\n<p>Below is my implementation. But was just looking if there is any built in function. Searching on Google just gives user based implementations.</p>\n<pre><code>int isprime(int N){\n    if(N&lt;2 || (!(N&amp;1) &amp;&amp; N!=2))\n        return 0;\n    for(int i=3; i*i&lt;=N; i+=2){\n        if(!(N%i))\n            return 0;\n    }\n    return 1;\n}\n</code></pre>\n", "Tags": "<c++>", "OwnerUserId": "1402270", "AnswerCount": "4"}, "45126181": {"ParentId": "10896915", "CommentCount": "0", "Body": "<p>The widely available GMP library has a fast function for probabilistic prime testing, see <a href=\"https://gmplib.org/manual/Number-Theoretic-Functions.html\" rel=\"nofollow noreferrer\">https://gmplib.org/manual/Number-Theoretic-Functions.html</a></p>\n<p>Just convert your integer, example code:</p>\n<pre><code>bool is_prob_prime(long l)\n{\n    mpz_t bigint;\n    mpz_init_set_si(bigint, l);\n    bool ret = mpz_probab_prime_p(bigint, 25) &gt; 0;\n    mpz_clear(bigint);\n    return ret;\n}\n</code></pre>\n", "OwnerUserId": "1408339", "PostTypeId": "2", "Id": "45126181", "Score": "1", "CreationDate": "2017-07-16T07:34:41.073", "LastActivityDate": "2017-07-16T07:34:41.073"}, "10896926": {"ParentId": "10896915", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>No, there's no built-in function that checks for prime.</p>\n<p>The solution you posted could be improved on: the <code>i*i</code> can be avoided if you only calculate the square root of <code>N</code> once.</p>\n<p>If you know the range of the number you want to check, you can use a sieve and a map, as to not calculate repeatedly - <a href=\"http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\" rel=\"nofollow\">http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes</a></p>\n", "OwnerUserId": "673730", "LastEditorUserId": "673730", "LastEditDate": "2012-06-05T12:06:07.527", "Id": "10896926", "Score": "6", "CreationDate": "2012-06-05T12:00:55.610", "LastActivityDate": "2012-06-05T12:06:07.527"}, "bq_ids": {"n4140": {"so_10896915_10896934_0": {"section_id": 3532, "quality": 0.85, "length": 17}}, "n3337": {"so_10896915_10896934_0": {"section_id": 3397, "quality": 0.85, "length": 17}}, "n4659": {"so_10896915_10896934_0": {"section_id": 4296, "quality": 0.85, "length": 17}}}});