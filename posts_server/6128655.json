post_cb({"6128693": {"ParentId": "6128655", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2011-05-25T17:54:25.750", "Score": "2", "LastEditorUserId": "415784", "LastEditDate": "2011-05-25T18:00:10.723", "Id": "6128693", "OwnerUserId": "415784", "Body": "<p>Yes. It has problem.</p>\n<p>Since its C++, one may <em>habitually</em> write <code>cout &lt;&lt; 1000</code> which would be an error in this case, but which is otherwise very normal in C++.</p>\n<p>What next? Are you trying to define this:</p>\n<pre><code>#define scanf cin\n\n//so that you can use it as\nscanf &gt;&gt; variable; //not so kewl.\n</code></pre>\n<p>My advice is : </p>\n<p>Don't try to change the meaning of such names. What will you get by doing so, after all? Nothing.</p>\n", "LastActivityDate": "2011-05-25T18:00:10.723"}, "6128694": {"ParentId": "6128655", "CommentCount": "0", "CreationDate": "2011-05-25T17:54:29.033", "OwnerUserId": "103167", "PostTypeId": "2", "Id": "6128694", "Score": "1", "Body": "<p>It's got maintenance problems, because you'd redefined well-known features to work differently.  So no other programmer will want to work on this code.</p>\n<p>Similar:</p>\n<pre><code>#define MULTIPLY(a, b) (a + b)\n\n#define FIVE 12\n#define THREE 3\n\nint main(void)\n{\n    return MULTIPLY(FIVE, THREE);\n}\n</code></pre>\n<p>It gives the right answer, but is totally unmaintainable.</p>\n", "LastActivityDate": "2011-05-25T17:54:29.033"}, "6128682": {"ParentId": "6128655", "PostTypeId": "2", "CommentCount": "1", "CreationDate": "2011-05-25T17:53:45.707", "Score": "0", "LastEditorUserId": "36723", "LastEditDate": "2011-05-25T18:04:30.943", "Id": "6128682", "OwnerUserId": "36723", "Body": "<p><strike>You have declared <code>main</code> as returning <code>int</code>, but have not included a <code>return</code> statement. You should add a <code>return 0;</code> to the end of the <code>main</code> function.</strike> In C++ you don't have to <code>return</code> a value from <code>main</code>, but it's good style.</p>\n<p>Oh, and don't <code>#define cout printf</code>, it's really confusing. It may not be technically <em>illegal</em>, but it's not nice for whoever comes later to try to maintain your code.</p>\n", "LastActivityDate": "2011-05-25T18:04:30.943"}, "6128711": {"ParentId": "6128655", "PostTypeId": "2", "CommentCount": "13", "CreationDate": "2011-05-25T17:55:23.523", "Score": "10", "LastEditorUserId": "165520", "LastEditDate": "2011-05-25T18:23:37.143", "Id": "6128711", "OwnerUserId": "165520", "Body": "<p>As far as I know the Standard forbids defining names (with #define) declared in any standard library header.</p>\n<p>Found this in n3290 ($17.6.4.3.1)</p>\n<blockquote>\n<p id=\"so_6128655_6128711_0\">17.6.4.3.1    Macro names                                                                  [macro.names]</p>\n<p id=\"so_6128655_6128711_1\">1 A translation unit that includes a standard library header shall not #define or #undef names declared in any standard library header.</p>\n</blockquote>\n", "LastActivityDate": "2011-05-25T18:23:37.143"}, "6128655": {"CommentCount": "7", "ViewCount": "558", "PostTypeId": "1", "LastEditorUserId": "419", "CreationDate": "2011-05-25T17:50:33.243", "LastActivityDate": "2011-05-26T00:11:12.870", "Title": "problem in #defining cout?", "AcceptedAnswerId": "6128711", "LastEditDate": "2011-05-26T00:11:12.870", "Id": "6128655", "Score": "0", "Body": "<p>A friend of mine told me that this code has some problems:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\nusing namespace std;\n#define cout printf   \nint main(){\n    cout(\"cout\");\n}\n</code></pre>\n<p>He didn't give me the reason and asked me to figure it out which I couldn't. The code seems to be working fine, what could possibly be wrong with it? </p>\n", "Tags": "<c++>", "OwnerUserId": "770073", "AnswerCount": "5"}, "bq_ids": {"n4140": {"so_6128655_6128711_1": {"section_id": 6305, "quality": 0.8181818181818182, "length": 9}}, "n3337": {"so_6128655_6128711_1": {"section_id": 6062, "quality": 0.8181818181818182, "length": 9}}, "n4659": {"so_6128655_6128711_1": {"section_id": 7816, "quality": 0.8181818181818182, "length": 9}}}, "6128759": {"ParentId": "6128655", "CommentCount": "0", "CreationDate": "2011-05-25T17:59:57.733", "OwnerUserId": "78845", "PostTypeId": "2", "Id": "6128759", "Score": "2", "Body": "<p>While you may argue that this code \"seems to be working fine\", consider a few years down the line when your 7-line source file is a 7-hundred-line source file and you are not the only maintainer.</p>\n<p>You've moved on from writing C-style <code>printf</code> statements in C++ source files and you add (or another maintainer adds) the following line of <em>perfectly valid C++</em>:</p>\n<pre><code>    cout &lt;&lt; \"What is wrong with my perfectly valid C++ code? \" &lt;&lt; endl;\n</code></pre>\n<p>And your compiler reports:</p>\n<pre><code>test.cpp:699: error: invalid operands of types \u2018int ()(const char*, ...)\u2019 and \u2018const char [29]\u2019 to binary \u2018operator&lt;&lt;\u2019\n</code></pre>\n<p>A whole world of pain!</p>\n", "LastActivityDate": "2011-05-25T17:59:57.733"}});