post_cb({"6798619": {"CommentCount": "6", "Body": "<blockquote>\n<p id=\"so_6798474_6798619_0\">when i explicitly call a constructor like this</p>\n</blockquote>\n<p>You are not calling a constructor here; but creating a temporary object which gets destructed immediately. Constructor can be called explicitly with an object of that type (which is not advisable).</p>\n<blockquote>\n<p id=\"so_6798474_6798619_1\">Is a useless object created which remains in the memory until the\n  scope of main() ends?</p>\n</blockquote>\n<p>It doesn't have scope till the function ends, but till the <code>;</code> ends.</p>\n", "CreationDate": "2011-07-23T06:11:51.640", "ParentId": "6798474", "Id": "6798619", "LastActivityDate": "2011-07-23T06:11:51.640", "PostTypeId": "2", "Score": "2", "OwnerUserId": "514235"}, "6798482": {"CommentCount": "6", "Body": "<p>You create an object that lasts until the end of the statement.</p>\n", "CreationDate": "2011-07-23T05:40:30.523", "ParentId": "6798474", "Id": "6798482", "LastActivityDate": "2011-07-23T05:40:30.523", "PostTypeId": "2", "Score": "3", "OwnerUserId": "440119"}, "6799339": {"CommentCount": "0", "Body": "<p>Okay, I re-visited temporary and found that in the above example, it's actually a part of expression that is initializing an object. So yes, the scope ends at ;</p>\n<p><a href=\"http://publib.boulder.ibm.com/infocenter/comphelp/v8v101/index.jsp?topic=/com.ibm.xlcpp8a.doc/language/ref/cplr382.htm\" rel=\"nofollow\">Here:</a></p>\n<p>When a temporary object is created to initialize a reference variable, the name of the temporary object has the same scope as that of the reference variable. When a temporary object is created during the evaluation of a full-expression (an expression that is not a subexpression of another expression), it is destroyed as the last step in its evaluation that lexically contains the point where it was created.</p>\n", "CreationDate": "2011-07-23T08:52:37.560", "ParentId": "6798474", "Id": "6799339", "LastActivityDate": "2011-07-23T08:52:37.560", "PostTypeId": "2", "Score": "0", "OwnerUserId": "568471"}, "6798474": {"CreationDate": "2011-07-23T05:38:08.127", "ViewCount": "120", "Id": "6798474", "Score": "2", "Title": "what happens when i only call a constructor?", "LastEditorUserId": "831878", "CommentCount": "2", "Body": "<p>This may sound naive. I want to know what happens when i explicitly call a constructor like this:</p>\n<pre><code>class A{\n/*...*/\n  public:\n    A(){}\n};\nint main(){\n  A();\n  return 0;\n}\n</code></pre>\n<p>Is a useless object created which remains in the memory until the scope of main() ends?</p>\n", "Tags": "<c++>", "LastEditDate": "2011-07-23T05:52:24.280", "LastActivityDate": "2011-07-23T08:52:37.560", "PostTypeId": "1", "AnswerCount": "5", "OwnerUserId": "438822"}, "bq_ids": {"n4140": {"so_6798474_6799244_0": {"length": 14, "quality": 0.8235294117647058, "section_id": 6000}}, "n3337": {"so_6798474_6799244_0": {"length": 14, "quality": 0.8235294117647058, "section_id": 5768}, "so_6798474_6798619_0": {"length": 4, "quality": 0.8, "section_id": 6785}}}, "6799244": {"CommentCount": "0", "Body": "<p>Strictly speaking you can never make a direct call to a constructor in C++. A constructor is called by the implementation when you cause an object of class type to be instantiated.</p>\n<p>The statement <code>A();</code> is an expression statement and the expression is a degenerate form of an explicit type conversion (functional notation). <code>A</code> refers to the type, strictly speaking constructors don't have names.</p>\n<p>From the standard (5.2.3 [expr.type.conv] / 2:</p>\n<blockquote>\n<p id=\"so_6798474_6799244_0\">The expression <code>T()</code>, where <code>T</code> is a simple-type-specifier for a non-array complete object type or the (possibly cv-qualified) void type, creates an rvalue of the specified type, which is value-initialized [...].</p>\n</blockquote>\n<p>Because your class type has a user-declared default constructor the value-initialization of this temporary will use this constructor. (see 8.5 [dcl.init]/5)</p>\n", "CreationDate": "2011-07-23T08:35:01.953", "ParentId": "6798474", "Id": "6799244", "LastActivityDate": "2011-07-23T08:35:01.953", "PostTypeId": "2", "Score": "1", "OwnerUserId": "19563"}, "6798502": {"CommentCount": "0", "Body": "<p>Its considered a nameless temporary which gets destroyed after the end of the full expression.  In this case, the point right after the semicolon.  To prove this, create a destructor with a print statement.  </p>\n", "CreationDate": "2011-07-23T05:48:24.327", "ParentId": "6798474", "Id": "6798502", "LastActivityDate": "2011-07-23T05:48:24.327", "PostTypeId": "2", "Score": "2", "OwnerUserId": "277571"}});