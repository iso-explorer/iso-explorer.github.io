post_cb({"bq_ids": {"n4140": {"so_22586752_22587296_0": {"length": 25, "quality": 0.8928571428571429, "section_id": 7240}}, "n3337": {"so_22586752_22587296_0": {"length": 25, "quality": 0.8928571428571429, "section_id": 6984}}, "n4659": {"so_22586752_22587296_0": {"length": 22, "quality": 0.7857142857142857, "section_id": 8749}}}, "22586752": {"ViewCount": "94", "Body": "<pre><code>    unsigned char data[] =\n    {\n        0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0\n    };\n\n    *((int*) &amp;data[1]) = 0x00256;\n</code></pre>\n<p>this give the warning (see below) can I remove this witout broke the code? by broke, i.e, if I cast to <code>unsigned char*</code> I will copy actually less bytes(not all 32-bit integer) than I'm looking for, right?</p>\n<blockquote>\n<p id=\"so_22586752_22586752_0\">warning: cast from 'unsigned char *' to 'int *' increases required\n  alignment from 1 to 4 [-Wcast-align]</p>\n</blockquote>\n", "Title": "Can I remove this warning without break code?", "CreationDate": "2014-03-23T03:36:08.710", "LastActivityDate": "2014-03-23T05:38:19.447", "CommentCount": "2", "LastEditDate": "2014-03-23T03:55:16.553", "PostTypeId": "1", "LastEditorUserId": "447979", "Id": "22586752", "Score": "0", "OwnerUserId": "447979", "Tags": "<c++><memory-management><alignment><clang>", "AnswerCount": "1"}, "22587296": {"Id": "22587296", "PostTypeId": "2", "Body": "<p>A few things going on here.</p>\n<h3>1. Pointer copy.</h3>\n<p>if p is of type *int then *p = will copy sizeof(int) (4) bytes.  Likewise a pointer of type *char will copy 1 byte.  The literal you are using is a shortened form of 0x00000256, those 4 bytes will be copied into memory location starting at &amp;data[1].</p>\n<h3>2.  Endianness</h3>\n<p>Almost certainly, this operation will assign the following (is this backwards from what you were expecting?): as almost everything in use these days is <a href=\"http://en.wikipedia.org/wiki/Endianness\" rel=\"nofollow noreferrer\">little endian</a>.</p>\n<pre><code> data[1] = 0x56\n data[2] = 0x2\n data[3] = 0x0\n data[4] = 0x0\n</code></pre>\n<h3>3. Alignment</h3>\n<p>consider the following c++ program (for the alignof operator)</p>\n<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main(int argc,char *argv[])\n{\n   char a[4];\n   int b[1];\n\n   cout &lt;&lt; \"char alignment = \" &lt;&lt; alignof(char) &lt;&lt; endl;\n   cout &lt;&lt; \"int alignment = \" &lt;&lt; alignof(int) &lt;&lt; endl;\n   cout &lt;&lt; \"a alignment = \" &lt;&lt; alignof(a) &lt;&lt; endl;\n   cout &lt;&lt; \"b alignment = \" &lt;&lt; alignof(b) &lt;&lt; endl;\n}\n</code></pre>\n<p>which produces</p>\n<pre><code>char alignment = 1\nint alignment = 4\na alignment = 1\nb alignment = 4\n</code></pre>\n<p>From the C++ spec (section 3.11)</p>\n<blockquote>\n<p id=\"so_22586752_22587296_0\">Object types have alignment requirements (3.9.1, 3.9.2) which place restrictions on the addresses at which an object of that type may be allocated. An alignment is an implementation-defined integer value representing the number of bytes between successive addresses at which a given object can be allocated.</p>\n</blockquote>\n<p>Which means that accessing/storing a type is subject to it's alignment it's up the the implementation to decide what happens when this is violated.</p>\n<p>For modern Intel hardware  see <a href=\"https://stackoverflow.com/questions/2069450/how-to-get-a-bus-error\">here</a>, <a href=\"http://www.jaist.ac.jp/iscenter-new/mpc/altix/altixdata/opt/intel/vtune/doc/users_guide/mergedProjects/analyzer_ec/mergedProjects/reference_olh/mergedProjects/instructions/instruct32_hh/vc199.htm\" rel=\"nofollow noreferrer\">here</a>, and <a href=\"https://stackoverflow.com/questions/1415256/alignment-requirements-for-atomic-x86-instructions\">here</a>, your operation will likely work.  But accessing mis-aligned data is not guaranteed to be atomic on Intel and it's discouraged. However, on other (Sparc) hardware, you very well may end up with an exception (bus error) when trying to store that value and the program will crash.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2014-03-23T05:38:19.447", "Score": "1", "CreationDate": "2014-03-23T05:03:32.697", "ParentId": "22586752", "CommentCount": "0", "OwnerUserId": "2359920", "LastEditDate": "2017-05-23T12:20:52.583"}});