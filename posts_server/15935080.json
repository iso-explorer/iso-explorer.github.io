post_cb({"bq_ids": {"n4140": {"so_15935080_15935163_1": {"length": 14, "quality": 0.6666666666666666, "section_id": 6083}, "so_15935080_15935235_1": {"length": 14, "quality": 0.6666666666666666, "section_id": 6083}}, "n3337": {"so_15935080_15935163_1": {"length": 14, "quality": 0.6666666666666666, "section_id": 5851}, "so_15935080_15935235_1": {"length": 14, "quality": 0.6666666666666666, "section_id": 5851}}, "n4659": {"so_15935080_15935163_0": {"length": 6, "quality": 0.5454545454545454, "section_id": 7579}, "so_15935080_15935163_1": {"length": 17, "quality": 0.8095238095238095, "section_id": 7579}, "so_15935080_15935235_0": {"length": 6, "quality": 0.5454545454545454, "section_id": 7579}, "so_15935080_15935235_1": {"length": 17, "quality": 0.8095238095238095, "section_id": 7579}}}, "15935235": {"Id": "15935235", "PostTypeId": "2", "Body": "<p>Per Paragraph 5.3.4/2 of the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_15935080_15935235_0\">If the <code>auto</code> type-specifier appears in the <em>type-specifier-seq</em> of a <em>new-type-id</em> or <em>type-id</em> of a <em>new-expression</em>, the\n  <em>new-expression</em> shall contain a <em>new-initializer</em> of the form</p>\n<pre><code>( assignment-expression )\n</code></pre>\n<p id=\"so_15935080_15935235_1\">The allocated type is deduced from the new-initializer as follows: Let <code>e</code> be the <em>assignment-expression</em> in\n  the <em>new-initializer</em> and T be the <em>new-type-id</em> or <em>type-id</em> of the <em>new-expression</em>, then the allocated type is the type\n  deduced for the variable <code>x</code> in the invented declaration (7.1.6.4):</p>\n<pre><code>T x(e);\n</code></pre>\n<p id=\"so_15935080_15935235_2\">[ <em>Example</em>:</p>\n<pre><code>new auto(1); // allocated type is int\nauto x = new auto(\u2019a\u2019); // allocated type is char, x is of type char*\n</code></pre>\n<p id=\"so_15935080_15935235_3\">\u2014<em>end example</em> ]</p>\n</blockquote>\n<p>Therefore, the type of the allocated object is identical to the deduced type of the invented declaration:</p>\n<pre><code>auto x(5)\n</code></pre>\n<p>Which is <code>int</code>.</p>\n", "LastEditorUserId": "1932150", "LastActivityDate": "2013-04-10T20:08:21.920", "Score": "12", "CreationDate": "2013-04-10T19:56:19.303", "ParentId": "15935080", "CommentCount": "3", "OwnerUserId": "1932150", "LastEditDate": "2013-04-10T20:08:21.920"}, "15935163": {"Id": "15935163", "PostTypeId": "2", "Body": "<p>In this context, <code>auto(5)</code> resolves to <code>int(5)</code>.</p>\n<p>You are allocating a new <code>int</code> from the heap, initialized to <code>5</code>.</p>\n<p><em>(So, it's returning an <code>int *</code>)</em></p>\n<p>Quoting Andy Prowl's resourceful answer, with permission:</p>\n<p>Per Paragraph 5.3.4/2 of the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_15935080_15935163_0\">If the <code>auto</code> type-specifier appears in the <em>type-specifier-seq</em> of a <em>new-type-id</em> or <em>type-id</em> of a <em>new-expression</em>, the\n  <em>new-expression</em> shall contain a <em>new-initializer</em> of the form</p>\n<pre><code>( assignment-expression )\n</code></pre>\n<p id=\"so_15935080_15935163_1\">The allocated type is deduced from the new-initializer as follows: Let <code>e</code> be the <em>assignment-expression</em> in\n  the <em>new-initializer</em> and T be the <em>new-type-id</em> or <em>type-id</em> of the <em>new-expression</em>, then the allocated type is the type\n  deduced for the variable <code>x</code> in the invented declaration (7.1.6.4):</p>\n<pre><code>T x(e);\n</code></pre>\n<p id=\"so_15935080_15935163_2\">[ <em>Example</em>:</p>\n<pre><code>new auto(1); // allocated type is int\nauto x = new auto(\u2019a\u2019); // allocated type is char, x is of type char*\n</code></pre>\n<p id=\"so_15935080_15935163_3\">\u2014<em>end example</em> ]</p>\n</blockquote>\n", "LastEditorUserId": "16287", "LastActivityDate": "2013-04-10T20:17:06.897", "Score": "27", "CreationDate": "2013-04-10T19:53:16.970", "ParentId": "15935080", "CommentCount": "7", "OwnerUserId": "16287", "LastEditDate": "2013-04-10T20:17:06.897"}, "15935080": {"ViewCount": "1732", "Body": "<p>What does it mean when I use <code>new auto</code>? Consider the expression:</p>\n<pre><code>new auto(5)\n</code></pre>\n<p>What is the type of the dynamically allocated object? What is the type of the pointer it returns?</p>\n", "AcceptedAnswerId": "15935163", "Title": "What does `new auto` do?", "CreationDate": "2013-04-10T19:48:42.337", "Id": "15935080", "CommentCount": "4", "FavoriteCount": "3", "PostTypeId": "1", "LastActivityDate": "2013-04-10T20:17:06.897", "Score": "20", "OwnerUserId": "150634", "Tags": "<c++><c++11><dynamic-allocation><type-deduction>", "AnswerCount": "2"}});