post_cb({"39238441": {"LastActivityDate": "2016-08-31T20:59:38.937", "CommentCount": "18", "Body": "<p>In C++14 and earlier, <code>x -&gt; y -&gt; a -&gt; b</code> is possible. The sequencing relations here are:</p>\n<ul>\n<li>Call to <code>x</code> is sequenced before call to <code>a</code>.</li>\n<li>Call to <code>y</code> is sequenced before call to <code>b</code>.</li>\n<li>Call to <code>a</code> is sequenced before call to <code>f</code>.</li>\n<li>Call to <code>b</code> is sequenced before call to <code>f</code>.</li>\n</ul>\n<p>There are no other restrictions on the order. If you want to enforce some particular ordering then you'll have to break this call up into multiple full-expressions.</p>\n<p>In the C++14 standard this intent is clarified by the note [expr.call]/8:</p>\n<blockquote>\n<p id=\"so_39238411_39238441_0\">[<em>Note:</em> The evaluations of the postfix expression and of the arguments are all unsequenced relative to one another. All side effects of argument evaluations are sequenced before the function is entered. \u2014<em>end note</em> ]</p>\n</blockquote>\n<p>As noted in comments, the <a href=\"http://en.cppreference.com/w/cpp/language/eval_order\" rel=\"nofollow\">cppreference page</a> lists some more sequencing rules marked as \"since C++17\". This is based on <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/n4606.pdf\" rel=\"nofollow\">n4606</a>, the latest published draft for C++17. So it is possible that for C++17, this order will no longer be allowed.</p>\n", "CreationDate": "2016-08-30T23:14:11.730", "LastEditDate": "2016-08-31T20:59:38.937", "ParentId": "39238411", "Id": "39238441", "LastEditorUserId": "1505939", "PostTypeId": "2", "Score": "14", "OwnerUserId": "1505939"}, "39239229": {"CommentCount": "3", "Body": "<p>Another way to look at it:</p>\n<p>There would be no benefit to evaluating both x and y before commencing evaluation of either a or b. In fact, there would be a penalty. An extra intermediate result would have to be temporarily held somewhere which would either require an additional stack push/pop, or consume an additional CPU register (overuse of which would lead to additional stack operations anyway). While it may be of little or no consequence for the example you provided, more complex cases would reveal the inefficiencies.</p>\n<p>The rule could be viewed as laziest possible evaluation i.e. not performing evaluations until needed so as to avoid carrying extra temporary results.</p>\n", "CreationDate": "2016-08-31T01:03:25.653", "ParentId": "39238411", "Id": "39239229", "LastActivityDate": "2016-08-31T01:03:25.653", "PostTypeId": "2", "Score": "2", "OwnerUserId": "2487969"}, "39238411": {"CreationDate": "2016-08-30T23:10:31.133", "ViewCount": "364", "FavoriteCount": "2", "Id": "39238411", "AcceptedAnswerId": "39238441", "Score": "15", "Title": "Is the compiler allowed to interlace the evaluation of subexpressions within different function arguments?", "LastEditorUserId": "354722", "CommentCount": "3", "Body": "<p>I am wondering about the following situation:</p>\n<pre><code>void f(int a, int b) { }\n\nint a(int x) { std::cout &lt;&lt; \"func a\" &lt;&lt; std::endl; return 1; }\nint b(int x) { std::cout &lt;&lt; \"func b\" &lt;&lt; std::endl; return 2; }\n\nint x() { std::cout &lt;&lt; \"func x\" &lt;&lt; std::endl; return 3; }\nint y() { std::cout &lt;&lt; \"func y\" &lt;&lt; std::endl; return 4; }\n\nf(a(x()), b(y()));\n</code></pre>\n<p>After reading <a href=\"http://en.cppreference.com/w/cpp/language/eval_order\">http://en.cppreference.com/w/cpp/language/eval_order</a> I am still having difficulty to understand whether the following evaluation order is possible:</p>\n<p><code>x()</code> -&gt; <code>y()</code> -&gt; <code>a()</code> -&gt; <code>b()</code></p>\n<p>or that the standard guarantees that <code>a(x())</code> and <code>b(y())</code> will be evaluated as units, so to speak.</p>\n<p>In other words, is there any possibility this will print</p>\n<pre><code>func x\nfunc y\nfunc a\nfunc b\n</code></pre>\n<p>Running this test on GCC 5.4.0 gives the to my mind more logical</p>\n<pre><code>func y\nfunc b\nfunc x\nfunc a\n</code></pre>\n<p>but this of course does not tell me anything about what the standard requires. It would be nice to get a reference to the standard.</p>\n", "Tags": "<c++>", "LastEditDate": "2016-08-30T23:21:20.157", "LastActivityDate": "2016-08-31T20:59:38.937", "PostTypeId": "1", "AnswerCount": "2", "OwnerUserId": "354722"}, "bq_ids": {"n4140": {"so_39238411_39238441_0": {"length": 18, "quality": 0.8181818181818182, "section_id": 5995}}, "n3337": {"so_39238411_39238441_0": {"length": 17, "quality": 0.7727272727272727, "section_id": 5763}}}});