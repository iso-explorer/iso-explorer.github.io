post_cb({"bq_ids": {"n4140": {"so_48842397_48842501_1": {"length": 16, "quality": 0.5333333333333333, "section_id": 6182}}, "n3337": {"so_48842397_48842501_1": {"length": 16, "quality": 0.5333333333333333, "section_id": 5943}}, "n4659": {"so_48842397_48842501_1": {"length": 16, "quality": 0.5333333333333333, "section_id": 7492}}}, "48842501": {"Id": "48842501", "PostTypeId": "2", "Body": "<p>The <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0145r3.pdf\" rel=\"noreferrer\">P0145R3</a> paper (which <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0636r2.html#new-core-global\" rel=\"noreferrer\">was accepted</a> into C++17) refines the order of evaluation of several C++ constructs, including</p>\n<blockquote>\n<p id=\"so_48842397_48842501_0\">Postfix expressions are evaluated from left to right. This includes functions calls and member\n  selection expressions</p>\n</blockquote>\n<p>Specifically, the paper adds the following text to 5.2.2/4 paragraph of the standard:</p>\n<blockquote>\n<p id=\"so_48842397_48842501_1\">The postfix-expression is sequenced before each expression in the\n  expression-list and any default argument. Every value computation and\n  side effect associated with the initialization of a parameter, and the\n  initialization itself, is sequenced before every value computation and\n  side effect associated with the initialization of any subsequent\n  parameter.</p>\n</blockquote>\n", "LastEditorUserId": "3980929", "LastActivityDate": "2018-02-17T17:05:57.727", "Score": "18", "CreationDate": "2018-02-17T14:43:58.090", "ParentId": "48842397", "CommentCount": "7", "OwnerUserId": "2315602", "LastEditDate": "2018-02-17T17:05:57.727"}, "48844115": {"Id": "48844115", "PostTypeId": "2", "Body": "<p>The evaluation order of function arguments are changed by <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0400r0.html\" rel=\"noreferrer\">P0400R0</a>.</p>\n<p>Before the change, evaluation of function arguments are unsequenced relative to one another. This means evaluation of <code>g()</code> may be inserted into the evaluation of <code>std::shared_ptr&lt;int&gt;(new int(42))</code>, which causes the situation described in your quoted context.</p>\n<p>After the change, evaluation of function arguments are indeterminately sequenced with no interleaving, which means all side effects of <code>std::shared_ptr&lt;int&gt;(new int(42))</code> take place either before or after those of <code>g()</code>. Now consider the case where <code>g()</code> may throw. </p>\n<ul>\n<li><p>If all side effects of <code>std::shared_ptr&lt;int&gt;(new int(42))</code> take place before those of <code>g()</code>, the memory allocated will be deallocated by the destructor of <code>std::shared_ptr&lt;int&gt;</code>.</p></li>\n<li><p>If all side effects of <code>std::shared_ptr&lt;int&gt;(new int(42))</code> take place after those of <code>g()</code>, there is even no memory allocation.</p></li>\n</ul>\n<p>In either case, there is no memory leak again anyway.</p>\n", "LastEditorUserId": "5376789", "LastActivityDate": "2018-02-17T17:54:30.343", "Score": "15", "CreationDate": "2018-02-17T17:43:50.530", "ParentId": "48842397", "CommentCount": "0", "OwnerUserId": "5376789", "LastEditDate": "2018-02-17T17:54:30.343"}, "48842397": {"ViewCount": "1204", "Body": "<p>In <a href=\"http://en.cppreference.com/w/cpp/memory/shared_ptr/make_shared\" rel=\"noreferrer\">cppref</a>, the following holds until C++17:</p>\n<blockquote>\n<p id=\"so_48842397_48842397_0\">code such as <code>f(std::shared_ptr&lt;int&gt;(new int(42)), g())</code> can cause a\n  memory leak if <code>g</code> gets called after <code>new int(42)</code> and throws an\n  exception, while <code>f(std::make_shared&lt;int&gt;(42), g())</code> is safe, since\n  two function calls are never interleaved.</p>\n</blockquote>\n<p>I'm wondering which change introduced in C++17 renders this no longer applicable.</p>\n", "AcceptedAnswerId": "48844115", "Title": "std::make_shared() change in C++17", "CreationDate": "2018-02-17T14:33:12.227", "Id": "48842397", "CommentCount": "3", "FavoriteCount": "4", "PostTypeId": "1", "LastActivityDate": "2018-02-17T17:54:30.343", "Score": "25", "OwnerUserId": "1348273", "Tags": "<c++><language-lawyer><c++17><make-shared><exception-safety>", "AnswerCount": "2"}});