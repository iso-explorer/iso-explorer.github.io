post_cb({"12256440": {"CommentCount": "2", "ViewCount": "96", "PostTypeId": "1", "LastEditorUserId": "591495", "CreationDate": "2012-09-04T03:30:59.187", "LastActivityDate": "2012-09-04T04:14:01.037", "Title": "What are the linkage of the following functions?", "LastEditDate": "2012-09-04T03:42:38.607", "Id": "12256440", "Score": "1", "Body": "<p>When I was reading the c++ 03 standard (7.1.1 Storage class specifiers [dcl.stc]), there are some examples as below, I'm not able to tell how the linkage of each successive declarations is determined? Could anyone help here? Thanks in advance!</p>\n<pre><code>static char* f();    // f() has internal linkage\nchar* f() \n       { /* ... */ } // f() still has internal linkage\n\nchar* g();           // g() has external linkage\nstatic char* g() \n       { /* ... */ } // error: inconsistent linkage\n\nvoid h();\ninline void h(); // external linkage\n\ninline void l();\nvoid l(); // external linkage\n\ninline void m();\nextern void m(); // external linkage\n\nstatic void n();\ninline void n(); // internal linkage\n\nstatic int a; // a has internal linkage\nint a; // error: two definitions\n\nstatic int b; // b has internal linkage\nextern int b; // b still has internal linkage\n\nint c; // c has external linkage\nstatic int c; // error: inconsistent linkage\n\nextern int d; // d has external linkage\nstatic int d; // error: inconsistent linkage\n</code></pre>\n<p>UPD: Additionally, how can I understand the statement in the standard,</p>\n<blockquote>\n<p id=\"so_12256440_12256440_0\">The linkages implied by successive declarations for a given entity shall agree. That is, within a given scope, each declaration declaring the same object name or the same overloading of a function name shall imply the same linkage. Each function in a given set of overloaded functions can have a different linkage, however.</p>\n</blockquote>\n", "Tags": "<c++>", "OwnerUserId": "1485009", "AnswerCount": "1"}, "12256452": {"ParentId": "12256440", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2012-09-04T03:33:33.427", "Score": "3", "LastEditorUserId": "452307", "LastEditDate": "2012-09-04T04:14:01.037", "Id": "12256452", "OwnerUserId": "452307", "Body": "<p>Unless you use <code>static</code> on a free standing function or variable declared at global scope they will have <strong><em>external linkage</em></strong>.   </p>\n<p>Note that using the keyword <code>inline</code> on a function does not change the linkage of an function.      </p>\n<p>Another important point to note is that <code>const</code> variables have Internal Linkage in C++ unlike in C.</p>\n<hr>\n<blockquote>\n<p id=\"so_12256440_12256452_0\">The linkages implied by successive declarations for a given entity shall agree. That is, within a given scope, each declaration declaring the same object name or the same overloading of a function name shall imply the same linkage. Each function in a given set of overloaded functions can have a different linkage, however.\" </p>\n</blockquote>\n<p>An declaration introduces an Identifier to the compiler, so that the compiler can know its type.In C++ an identifier can be declared as many times as you want, for example:      </p>\n<pre><code>void doSomething(int, double);         // External Linkage\nextern void doSomething(int, double);  // External Linkage is explicitly mentioned \n</code></pre>\n<p>The quoted passage implies that all such declarations for the same identifier should specify the same linkage. For eg, following would be invalid:</p>\n<pre><code>void doSomething(int, double);        //External Linkage\nstatic void doSomething(int, double); //Internal Linkage due to static\n</code></pre>\n<p>While, overloaded versions of the same function can have different linkages, so following is valid:  </p>\n<pre><code>void doSomething(int, double);\nextern void doSomething(int, double);\nvoid doSomething(double,int);\n</code></pre>\n</hr>", "LastActivityDate": "2012-09-04T04:14:01.037"}, "bq_ids": {"n4140": {"so_12256440_12256440_0": {"section_id": 5397, "quality": 0.9166666666666666, "length": 33}, "so_12256440_12256452_0": {"section_id": 5397, "quality": 0.9166666666666666, "length": 33}}, "n3337": {"so_12256440_12256440_0": {"section_id": 5192, "quality": 0.9166666666666666, "length": 33}, "so_12256440_12256452_0": {"section_id": 5192, "quality": 0.9166666666666666, "length": 33}}, "n4659": {"so_12256440_12256440_0": {"section_id": 6822, "quality": 0.9166666666666666, "length": 33}, "so_12256440_12256452_0": {"section_id": 6822, "quality": 0.9166666666666666, "length": 33}}}});