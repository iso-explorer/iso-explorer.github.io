post_cb({"4836611": {"ParentId": "4836596", "PostTypeId": "2", "CommentCount": "3", "CreationDate": "2011-01-29T11:32:12.947", "Score": "16", "LastEditorUserId": "62662", "LastEditDate": "2014-12-30T02:04:40.653", "Id": "4836611", "OwnerUserId": "464581", "Body": "<p>A default constructor is one that <em>can be called</em> without arguments.</p>\n<p>C++98 <strong>\u00a712.1/5</strong>:</p>\n<blockquote>\n<p id=\"so_4836596_4836611_0\">A <em>default</em> constructor for a class <code>X</code> is a constructor of <code>X</code> that can be called without an argument. If there is no <em>user-declared</em> constructor for class <code>X</code>, a default constructor is implicitly declared.</p>\n</blockquote>\n", "LastActivityDate": "2014-12-30T02:04:40.653"}, "4836596": {"CommentCount": "1", "ViewCount": "4398", "CreationDate": "2011-01-29T11:27:58.797", "LastActivityDate": "2014-12-30T02:04:40.653", "Title": "C++ default constructor", "PostTypeId": "1", "Id": "4836596", "Score": "7", "Body": "<p>If we say that the <code>default constructor</code> is that constructor without parameters, can we also say the the constructor created by the compiler is also a <code>default constructor</code>?</p>\n<p>Thanks.</p>\n", "Tags": "<c++><default-constructor>", "OwnerUserId": "588855", "AnswerCount": "4"}, "4836714": {"ParentId": "4836596", "PostTypeId": "2", "CommentCount": "6", "CreationDate": "2011-01-29T11:56:32.093", "Score": "1", "LastEditorUserId": "540312", "LastEditDate": "2011-01-29T13:52:43.997", "Id": "4836714", "OwnerUserId": "540312", "Body": "<p>You can't just say that \"the constructor created by the compiler is also a default constructor\". If there are no constructors declared, the compiler generates a default constructor <em>and</em> a copy constructor (and possibly a move constructor if we are talking C++0x here). When you mention just \"the constructor created by the compiler\", you are actually talking about at least two constructors at once. So you can only say that \"the <em>default</em> constructor created by the compiler is also a default constructor\", but this sounds like something Capt. Obvious would say.</p>\n", "LastActivityDate": "2011-01-29T13:52:43.997"}, "4836605": {"ParentId": "4836596", "CommentCount": "0", "CreationDate": "2011-01-29T11:30:38.887", "OwnerUserId": "129570", "PostTypeId": "2", "Id": "4836605", "Score": "6", "Body": "<p>The default constructor is a constructor that may be <em>called</em> without arguments.  So this is either a constructor that has no arguments, or a constructor whose arguments all have default values.</p>\n<p>But yes, the compiler generates a default constructor if you don't provide any other constructors.</p>\n<p>Recommended reading: <a href=\"http://www.parashift.com/c++-faq-lite/ctors.html#faq-10.4\" rel=\"noreferrer\">http://www.parashift.com/c++-faq-lite/ctors.html#faq-10.4</a>.</p>\n", "LastActivityDate": "2011-01-29T11:30:38.887"}, "bq_ids": {"n4140": {"so_4836596_4836611_0": {"section_id": 369, "quality": 0.8666666666666667, "length": 13}}, "n3337": {"so_4836596_4836611_0": {"section_id": 359, "quality": 0.8666666666666667, "length": 13}}, "n4659": {"so_4836596_4836611_0": {"section_id": 381, "quality": 0.7333333333333333, "length": 11}}}, "4836832": {"ParentId": "4836596", "PostTypeId": "2", "CommentCount": "8", "CreationDate": "2011-01-29T12:24:20.550", "Score": "3", "LastEditorUserId": "568471", "LastEditDate": "2011-01-29T12:31:48.730", "Id": "4836832", "OwnerUserId": "568471", "Body": "<pre><code>                         +------&gt; Implicitly GENERATED by compiler\n                         |\n                         |\nDefault Constructor -----+\n                         |\n                         |\n                         +------&gt; Explicitly provided by programmer\n</code></pre>\n<p>Basically, a default ctor is a ctor with no-args.</p>\n<p>PLEASE note that the compiler will not generate any default ctor in following case:</p>\n<pre><code>    class WontGenerateDefCtoByCompiler\n    {\nprivate:\n    char* iHaHaPtr;\n    };\n</code></pre>\n<p>Reason being the compiler does not see any need to initialize programmer provided pointer. It is programmer's responsbility to correctly write and init the default ctor. </p>\n<p>If you, on other hand, write a virtual function inside the above class, compiler will definitely generate a default ctor (but won't initialise iHahaptr pointer for you). Further, such ctor will be generated ONLY IF an instance of that object was created in the program (otherwise, again, no ctor will be generated by compiler).</p>\n<p>These are the ONLY 4 conditions in which compiler will IMPLICITLY generate default ctor (if not provided by programmer):</p>\n<pre><code>(1) The class has a virtual function (Why? need to setup vptr correctly )\n(2) The class is derived from another class that has default ctor (either implicitly generated or explictly provided)\n(3) The class has a member that has default ctor (either implicitly generated or explictly provided)\n(4) The class is virtually derived from other class \n</code></pre>\n<p>In all other cases, compiler will not generate any default ctor.</p>\n", "LastActivityDate": "2011-01-29T12:31:48.730"}});