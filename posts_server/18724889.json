post_cb({"18724993": {"Id": "18724993", "PostTypeId": "2", "Body": "<p><code>L\"Testing\"</code> is a wide string literal and has static storage duration which means it's lifetime is the lifetime of the program, you do not have to worry about deallocating it. The <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3485.pdf\" rel=\"nofollow\">C++ draft standard</a> in section <code>2.14.5</code> <em>String literals</em> paragraph <em>11</em> says (<em>emphasis mine</em>):</p>\n<blockquote>\n<p id=\"so_18724889_18724993_0\">A string literal that <strong>begins with L, such as L\"asdf\", is a wide\n  string literal</strong>. A wide string literal has type \u201carray of n const\n  wchar_t\u201d, where n is the size of the string as defined below; it has\n  <strong>static storage duration</strong> and is initialized with the given characters.</p>\n</blockquote>\n", "LastEditorUserId": "1708801", "LastActivityDate": "2015-01-09T19:56:48.720", "Score": "0", "CreationDate": "2013-09-10T17:07:32.560", "ParentId": "18724889", "CommentCount": "0", "OwnerUserId": "1708801", "LastEditDate": "2015-01-09T19:56:48.720"}, "18724975": {"Id": "18724975", "PostTypeId": "2", "Body": "<p>Yes, it is safe to use a string that way. \"Testing\" will be stored in the data segment of your binary and String will be initialized to point to it.</p>\n", "LastActivityDate": "2013-09-10T17:06:22.447", "CommentCount": "0", "CreationDate": "2013-09-10T17:06:22.447", "ParentId": "18724889", "Score": "1", "OwnerUserId": "2704585"}, "18724970": {"Id": "18724970", "PostTypeId": "2", "Body": "<p>Yes it is safe, but actually there are no allocations ;)</p>\n<p>The L\"Testing\" will be kept in read only part of your exe file (as a constant set of characters). LPWCSTR String is just a pointer to it, and it doesn't need to be destroyed/deallocated</p>\n", "LastActivityDate": "2013-09-10T17:06:12.533", "CommentCount": "1", "CreationDate": "2013-09-10T17:06:12.533", "ParentId": "18724889", "Score": "7", "OwnerUserId": "1749713"}, "18725006": {"Id": "18725006", "PostTypeId": "2", "Body": "<p>Yes it's safe.</p>\n<p>The object is a string literal. It means that it has the lifetime of the program.</p>\n", "LastActivityDate": "2013-09-10T17:08:15.120", "CommentCount": "0", "CreationDate": "2013-09-10T17:08:15.120", "ParentId": "18724889", "Score": "0", "OwnerUserId": "1394283"}, "18724984": {"Id": "18724984", "PostTypeId": "2", "Body": "<p>I'll assume that <code>LPWCSTR</code> is typo for <code>LPCWSTR</code>; a freaky Microsoft name for a pointer to a C-style string. It stands for \"long pointer to constant wide string\", and is an obfuscated way of writing <code>const wchar_t*</code>.</p>\n<blockquote>\n<p id=\"so_18724889_18724984_0\">Is it safe to create and use a string in this way?</p>\n</blockquote>\n<p>Like any pointer, it's safe to use as long as it points to a valid array. In this case, it points to a string literal, which is an array with a lifetime as long as the program. So this usage is safe.</p>\n<p>If it were to point to an array that might be destroyed while the pointer were still in use, then it would not be safe.</p>\n<blockquote>\n<p id=\"so_18724889_18724984_1\">Is the memory allocated for the storage of the string freed when the string goes out of scope?</p>\n</blockquote>\n<p>No; the pointer will not manage memory for you. If you need to do that, use <code>std::wstring</code>.</p>\n", "LastEditorUserId": "204847", "LastActivityDate": "2013-09-10T17:12:37.297", "Score": "2", "CreationDate": "2013-09-10T17:06:59.757", "ParentId": "18724889", "CommentCount": "2", "OwnerUserId": "204847", "LastEditDate": "2013-09-10T17:12:37.297"}, "bq_ids": {"n4140": {"so_18724889_18724993_0": {"length": 26, "quality": 1.0, "section_id": 5360}}, "n3337": {"so_18724889_18724993_0": {"length": 26, "quality": 1.0, "section_id": 5156}}, "n4659": {"so_18724889_18724993_0": {"length": 20, "quality": 0.7692307692307693, "section_id": 6785}}}, "18724889": {"ViewCount": "189", "Body": "<p>I have a question about strings or specifically about the memory used by a string. I'm using MSVC2010. Consider this piece of code:</p>\n<pre class=\"lang-c++ prettyprint-override\"><code>void Test() {\n    LPWCSTR String = L\"Testing\";\n    PrintString(String);\n}\n\nvoid PrintString(LPWCSTR String) {\n    // print String to console or similar\n}\n</code></pre>\n<p>Is it safe to create and use a string in this way? Is the memory allocated for the storage of the string freed when the string goes out of scope?</p>\n", "AcceptedAnswerId": "18724970", "Title": "memory allocation of temporary strings", "CreationDate": "2013-09-10T17:01:56.220", "Id": "18724889", "CommentCount": "0", "LastEditDate": "2013-09-10T17:06:16.183", "PostTypeId": "1", "LastEditorUserId": "1281433", "LastActivityDate": "2015-01-09T19:56:48.720", "Score": "4", "OwnerUserId": "1911000", "Tags": "<c++><memory-management>", "AnswerCount": "5"}});