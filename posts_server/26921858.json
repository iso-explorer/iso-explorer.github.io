post_cb({"26922313": {"Id": "26922313", "PostTypeId": "2", "Body": "<p>Functionally in regards to what you see, there is no difference. Both will do the same thing.</p>\n<p>Now, not sure if you'll understand the actual difference if you're new to programming, but nonetheless, there is a difference in the assembly code, which doesn't have higher level methods, or non-global variables. </p>\n<p>The first one is inline, which means anywhere you do <code>Time timeObj</code> in the assembly code, you will actually get the inline code placed there. Which is something like the below happening. Note that in your code, it will not compile.</p>\n<pre><code>Time timeObj;\ntimeObj.hours = 0;\ntimeObj.minutes = 0;\ntimeObj.seconds = 0;\n</code></pre>\n<p>In your example, that is fine, as it's simple. However, in more complicated classes, you may add a few hundred lines to every place you make a new version of that object, which makes the code much longer and more inefficient.</p>\n<p>The second one is defined as non-inline, which means that every time you make a Time object, the assembly code will jump to some other point in the code, execute the code, and then jump back. Again, you can't actually do the following, but it is similar to what happens.</p>\n<pre><code>Time timeObj;\ntimeObj.Time();\n</code></pre>\n<p>That's a very basic way to explain it, and if it doesn't make sense, don't concern yourself with it too much yet. In general, inline definitions are fine if they're a few lines of simple code, like yours is. But any longer and it should be not be implemented as an inline function.</p>\n<p>BTW, you can make your inline version even better by doing the following:</p>\n<pre><code>Time() { hours = minutes = seconds = 0; }\n</code></pre>\n", "LastActivityDate": "2014-11-14T03:14:57.387", "CommentCount": "1", "CreationDate": "2014-11-14T03:14:57.387", "ParentId": "26921858", "Score": "1", "OwnerUserId": "1940394"}, "26922357": {"Id": "26922357", "PostTypeId": "2", "Body": "<p>If you run the code, they do the same thing.</p>\n<p>But in the 1st version, the default ctor will become an <strong>inline</strong> function, because it's defined inside the class.</p>\n<p>According to the working draft standard, [class.mfct] (9.3/2 in N3337)</p>\n<blockquote>\n<p id=\"so_26921858_26922357_0\">A member function may be defined (8.4) in its class definition, in\n  which case it is an inline member function (7.1.2), or it may be\n  defined outside of its class definition if it has already been\n  declared but not defined in its class definition.</p>\n</blockquote>\n", "LastEditorUserId": "3309790", "LastActivityDate": "2014-11-14T03:26:37.487", "Score": "0", "CreationDate": "2014-11-14T03:19:44.573", "ParentId": "26921858", "CommentCount": "0", "OwnerUserId": "3309790", "LastEditDate": "2014-11-14T03:26:37.487"}, "26922409": {"Id": "26922409", "PostTypeId": "2", "Body": "<p>Maybe offtopic, but I believe it is a good habit to do it in the initialization list. For primitive types this wouldn't make a difference but it will if you have object members.</p>\n<pre><code>Time() \n    : hours(0)\n    , minutes(0)\n    , seconds(0) {}\n</code></pre>\n", "LastActivityDate": "2014-11-14T03:27:16.347", "CommentCount": "0", "CreationDate": "2014-11-14T03:27:16.347", "ParentId": "26921858", "Score": "1", "OwnerUserId": "633684"}, "26921858": {"ViewCount": "53", "Body": "<p>What does the code:</p>\n<pre><code>class Time {\n    private:\n        int hours;\n        int minutes;\n        int seconds;\n    public:\n        Time() { hours = 0; minutes = 0; seconds = 0; }\n};\n</code></pre>\n<p>differ from:</p>\n<pre><code>class Time {\n    public:\n        Time();\n\n    private:\n        int hours;\n        int minutes;\n        int seconds;\n};\n\nTime::Time() {\n    hours = 0;\n    minutes = 0;\n    seconds = 0;            \n}\n</code></pre>\n<p>Sorry if the question is oversimple but I am very new to C++. I run both codes and I see no difference...</p>\n", "Title": "C++ difference between some constructor codes", "CreationDate": "2014-11-14T02:18:28.037", "LastActivityDate": "2014-11-14T03:27:16.347", "CommentCount": "1", "LastEditDate": "2014-11-14T02:45:23.747", "PostTypeId": "1", "OwnerDisplayName": "user3265784", "LastEditorUserId": "368519", "Id": "26921858", "Score": "0", "Tags": "<c++>", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_26921858_26922357_0": {"length": 25, "quality": 0.9615384615384616, "section_id": 5881}}, "n3337": {"so_26921858_26922357_0": {"length": 25, "quality": 0.9615384615384616, "section_id": 5652}}, "n4659": {"so_26921858_26922357_0": {"length": 25, "quality": 0.9615384615384616, "section_id": 7364}}}, "26921917": {"Id": "26921917", "PostTypeId": "2", "Body": "<pre><code>class Time {\n    private:\n        int hours;\n        int minutes;\n        int seconds;\n    public:\n        Time() { hours = 0; minutes = 0; seconds = 0; }\n};\n</code></pre>\n<p>This code declares and defines the <code>Time</code> class' default constructor.</p>\n<pre><code>class Time {\n    public:\n        Time();\n\n    private:\n        int hours;\n        int minutes;\n        int seconds;\n};\n\nTime::Time() {\n    hours = 0;\n    minutes = 0;\n    seconds = 0;            \n}\n</code></pre>\n<p>This code declares the <code>Time</code> class' default constructor in the class definition and then defines it outside of the class definition. Usually the two would be separated into <code>Time.h</code> and <code>Time.cpp</code> like so:</p>\n<p><strong>Time.h</strong></p>\n<pre><code>class Time {\n    public:\n        Time();\n\n    private:\n        int hours;\n        int minutes;\n        int seconds;\n};\n</code></pre>\n<p><strong>Time.cpp</strong></p>\n<pre><code>#include \"Time.h\";\n\nTime::Time() {\n    hours = 0;\n    minutes = 0;\n    seconds = 0;            \n}\n</code></pre>\n", "LastEditorUserId": "1241334", "LastActivityDate": "2014-11-14T02:53:27.623", "Score": "1", "CreationDate": "2014-11-14T02:25:26.990", "ParentId": "26921858", "CommentCount": "2", "OwnerUserId": "1241334", "LastEditDate": "2014-11-14T02:53:27.623"}});