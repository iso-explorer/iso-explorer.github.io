post_cb({"25129519": {"Id": "25129519", "PostTypeId": "2", "Body": "<p><code>URNG</code> is the name of a template parameter - it's not a particular type. You need to implement an object that meets certain requirements, then you can pass it to <code>std::shuffle</code>. Something along these lines:</p>\n<pre><code>class MyRNG {\npublic:\n  typedef size_t result_type;\n  static size_t min() { return 0; }\n  static size_t max() { return 42; }\n  size_t operator()() {\n    // generate a random number in the range [0, 42]\n  }\n};\n\nstd::shuffle(someVector.begin(), someVector.end(), MyRNG());\n</code></pre>\n<p>You may also consider using <code>std::random_shuffle</code> instead. That one takes an object <code>r</code> which can be called as <code>r(n)</code> for some integer <code>n</code>, and produce a random number in the range <code>[0, n)</code>.</p>\n<p><sub><b>Note:</b> <a href=\"https://stackoverflow.com/questions/22600100/why-are-stdshuffle-methods-being-deprecated-in-c14\"><code>std::random_shuffle</code></a> is deprecated in C++14.</sub></p>\n", "LastEditorDisplayName": "user3920237", "LastActivityDate": "2014-10-15T15:34:47.250", "Score": "2", "CreationDate": "2014-08-05T00:26:35.867", "ParentId": "25129500", "CommentCount": "0", "OwnerUserId": "1670129", "LastEditDate": "2014-10-15T15:34:47.250"}, "bq_ids": {"n4140": {"so_25129500_25130000_3": {"length": 5, "quality": 0.8333333333333334, "section_id": 3494}, "so_25129500_25130000_2": {"length": 21, "quality": 0.84, "section_id": 3498}, "so_25129500_25130000_1": {"length": 21, "quality": 0.9545454545454546, "section_id": 3492}}, "n3337": {"so_25129500_25130000_3": {"length": 5, "quality": 0.8333333333333334, "section_id": 3359}, "so_25129500_25130000_2": {"length": 21, "quality": 0.84, "section_id": 3363}, "so_25129500_25130000_1": {"length": 21, "quality": 0.9545454545454546, "section_id": 3357}}, "n4659": {"so_25129500_25130000_3": {"length": 5, "quality": 0.8333333333333334, "section_id": 4257}, "so_25129500_25130000_2": {"length": 20, "quality": 0.8, "section_id": 4261}, "so_25129500_25130000_1": {"length": 20, "quality": 0.9090909090909091, "section_id": 4255}}}, "25129500": {"ViewCount": "453", "Body": "<p>I see that std::shuffle takes an URNG argument.\nI am using a custom version of a generator (WELL512a)  and would like to use it with std::shuffle.</p>\n<p>My question is : Is it possible to use it with std::shuffle?\nFor example maybe by using URNG as a base class?</p>\n<p>Thanks!</p>\n", "AcceptedAnswerId": "25129519", "Title": "Using std::shuffle with custom rng?", "CreationDate": "2014-08-05T00:23:32.850", "Id": "25129500", "CommentCount": "1", "LastEditDate": "2014-08-05T01:42:20.940", "PostTypeId": "1", "LastEditorUserId": "920069", "LastActivityDate": "2014-10-15T15:34:47.250", "Score": "1", "OwnerUserId": "1822700", "Tags": "<c++><c++11><std><shuffle><prng>", "AnswerCount": "2"}, "25130000": {"Id": "25130000", "PostTypeId": "2", "Body": "<p>We can see from the cppreference documentation on <a href=\"http://en.cppreference.com/w/cpp/algorithm/random_shuffle\" rel=\"nofollow\">std::shuffle</a> that:</p>\n<blockquote>\n<p id=\"so_25129500_25130000_0\">URNG must meet the requirements of UniformRandomNumberGenerator. </p>\n</blockquote>\n<p>unfortunately the site does not document what those requirements are, so we need to go to the draft C++11 standard section <code>26.5.1.3</code> <em>Uniform random number generator requirements</em> which says the following:</p>\n<blockquote>\n<ol>\n<li><p id=\"so_25129500_25130000_1\">A uniform random number generator g of type G is a function object\n  returning unsigned integer values such that each value in the range of\n  possible results has (ideally) equal probability of being returned</p></li>\n<li><p id=\"so_25129500_25130000_2\">A class G satisfies the requirements of a uniform random number generator if the \n  expressions shown in Table 116 are valid and have the indicated\n  semantics, and if G also satisfies all other requirements of this\n  section 26.5.1.3. In that Table and throughout this section:</p>\n<ul>\n<li>T is\n  the type named by G\u2019s associated result_type, and</li>\n<li>g is a value of</li>\n</ul></li>\n</ol>\n</blockquote>\n<p>Table <code>116</code> is summarized as follows:</p>\n<ul>\n<li>G::result_type\n<ul>\n<li>return type is T</li>\n<li>T is an unsigned integer type</li>\n</ul></li>\n<li>g()\n<ul>\n<li>return type T</li>\n<li>Returns a value in the closed interval [G::min(), G::max()].</li>\n</ul></li>\n<li>G::min()\n<ul>\n<li>return type T</li>\n<li>Denotes the least value potentially returned by operator().</li>\n</ul></li>\n<li>G::max()\n<ul>\n<li>return type T</li>\n<li>Denotes the greatest value potentially returned by operator().</li>\n</ul></li>\n</ul>\n<blockquote>\n<p id=\"so_25129500_25130000_3\">The following relation shall hold: G::min() &lt; G::max().</p>\n</blockquote>\n<p><b>Update</b></p>\n<p>To clarify when it says <em>T is an unsigned integer type</em> it means one of the following types covered in section <code>3.9.1</code> <em>Fundamental types</em> which include:</p>\n<ul>\n<li>unsigned char</li>\n<li>unsigned short int</li>\n<li>unsigned int</li>\n<li>unsigned long int</li>\n<li>unsigned long long int</li>\n</ul>\n<p>This also include <em>extended unsigned integer</em> types such as <em>uinit64_t</em>, if your platform supports them.</p>\n", "LastEditorUserId": "1708801", "LastActivityDate": "2014-08-05T13:41:01.240", "Score": "4", "CreationDate": "2014-08-05T01:37:00.010", "ParentId": "25129500", "CommentCount": "4", "LastEditDate": "2014-08-05T13:41:01.240", "OwnerUserId": "1708801"}});