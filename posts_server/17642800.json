post_cb({"17642800": {"CommentCount": "0", "ViewCount": "193", "CreationDate": "2013-07-14T19:18:46.847", "LastActivityDate": "2013-07-14T20:15:34.637", "Title": "Are forward_list iterators stable?", "AcceptedAnswerId": "17643322", "PostTypeId": "1", "Id": "17642800", "Score": "2", "Body": "<p>I need to implement a list of requests, send them off one at a time (throttled) and wait for the answer (always in order). Thus the operations are:</p>\n<ul>\n<li>Insert (at end)</li>\n<li>Remove (at start)</li>\n<li>Step forward (the \"sent\" pointer)</li>\n</ul>\n<p>I just discovered <code>std::forward_list</code>, and am thinking to use it. But for this to work, I need to keep track of one iterator for the sent pointer and one iterator for insertion, and they can't break when I insert and remove objects.</p>\n<p>Intuitively I'd say linked list iterators would be stable for insert and remove, but can someone confirm this. Also, do I need to make a special case if I empty the list, where the insertion iterator should reset to <code>before_begin</code>?</p>\n", "Tags": "<c++><stl><iterator><forward-list>", "OwnerUserId": "622060", "AnswerCount": "1"}, "17643322": {"ParentId": "17642800", "CommentCount": "0", "Body": "<p>The relevant quote from the standard is in 23.3.4.5 [forwardlist.modifiers] paragraph 1 (first sentence):</p>\n<blockquote>\n<p id=\"so_17642800_17643322_0\">None of the overloads of <code>insert_after</code> shall affect the validity of iterators and references, and <code>erase_after</code> shall invalidate only iterators and references to the erased elements.</p>\n</blockquote>\n", "OwnerUserId": "1120273", "PostTypeId": "2", "Id": "17643322", "Score": "2", "CreationDate": "2013-07-14T20:15:34.637", "LastActivityDate": "2013-07-14T20:15:34.637"}, "bq_ids": {"n4140": {"so_17642800_17643322_0": {"section_id": 841, "quality": 1.0, "length": 13}}, "n3337": {"so_17642800_17643322_0": {"section_id": 832, "quality": 1.0, "length": 13}}, "n4659": {"so_17642800_17643322_0": {"section_id": 901, "quality": 1.0, "length": 13}}}});