post_cb({"23468396": {"ParentId": "23468208", "CommentCount": "5", "CreationDate": "2014-05-05T08:47:11.453", "OwnerUserId": "673730", "PostTypeId": "2", "Id": "23468396", "Score": "9", "Body": "<p>Yes, the inline declaration is just syntactic sugar. You're forward-declaring that name <strong>and</strong> using it on the same line.</p>\n", "LastActivityDate": "2014-05-05T08:47:11.453"}, "23468208": {"CommentCount": "5", "CreationDate": "2014-05-05T08:37:23.880", "PostTypeId": "1", "AcceptedAnswerId": "23468396", "LastEditorUserId": "2541573", "LastActivityDate": "2014-05-05T11:55:11.013", "AnswerCount": "2", "LastEditDate": "2014-05-05T11:12:33.563", "ViewCount": "777", "FavoriteCount": "5", "Title": "How is class A * A; declaration parsed by C++?", "Id": "23468208", "Score": "9", "Body": "<p>I'm considering an example from the official spec:</p>\n<pre><code>class A * A;\n</code></pre>\n<p>I've read that this line introduces the two names: <code>class A</code> which can be accessed via elaborated-specifier-type only and pointer to A. Is this line fully equivalent to the two following lines?</p>\n<pre><code>class A;\nA * A;\n</code></pre>\n<p>Is that line just syntax sugar and actually we have two lines as I've specified above? Or how is <code>class A * A;</code> parsed by compiler?</p>\n", "Tags": "<c++><class><types><specifications>", "OwnerDisplayName": "user2953119"}, "23471815": {"ParentId": "23468208", "CommentCount": "0", "Body": "<p>I'm looking for more detailed answer in the working draft N3797 and I've found the following:</p>\n<p><strong>\u00a78.3.3</strong>:</p>\n<blockquote>\n<p id=\"so_23468208_23471815_0\">Thus, a declaration of a particular identifier has the form <code>T D</code>\n  where <code>T</code> is of the form <code>attribute-specifier-seq_*opt* decl-specifier-seq</code> and <code>D</code> is a declarator.</p>\n</blockquote>\n<p><strong>\u00a77.1</strong>:</p>\n<pre><code>decl-specifier:\n    storage-class-specifier\n    type-specifier\n    function-specifier\n    friend\n    typedef\n    constexpr\ndecl-specifier-seq:\n    decl-specifier attribute-specifier-seq_*opt*\n    decl-specifier decl-specifier-seq\n</code></pre>\n<p><strong>\u00a77.1.6</strong>:</p>\n<pre><code>type-specifier:\n    trailing-type-specifier\n    class-specifier\n    enum-specifier\n</code></pre>\n<p><strong>\u00a78.3.1</strong>:</p>\n<blockquote>\n<p id=\"so_23468208_23471815_1\">In a declaration <code>T D</code> where <code>D</code> has the form \n  <code>* attribute-specifier-seq_*opt* cv-qualifier-seq_*opt* D1</code> and the type of the \n  identifier in the declaration <code>T D1</code> is \u201cderived-declarator-type-list <code>T</code>,\u201d then the \n  type of the identifier of <code>D</code> is \u201cderived-declarator-type-list cv-qualifier-seq pointer to <code>T</code>.\u201d</p>\n</blockquote>\n<p>Now <code>class-specifier</code> contains <code>class</code> keyword inside. Hence <code>class A * A</code> is valid grammar construction, where <code>* A</code> is declarator.</p>\n", "Id": "23471815", "PostTypeId": "2", "OwnerDisplayName": "user2953119", "Score": "8", "CreationDate": "2014-05-05T11:55:11.013", "LastActivityDate": "2014-05-05T11:55:11.013"}, "bq_ids": {"n4140": {"so_23468208_23471815_0": {"section_id": 3210, "quality": 0.9, "length": 9}, "so_23468208_23471815_1": {"section_id": 3214, "quality": 0.7333333333333333, "length": 11}}, "n3337": {"so_23468208_23471815_0": {"section_id": 3084, "quality": 0.9, "length": 9}, "so_23468208_23471815_1": {"section_id": 3088, "quality": 0.7333333333333333, "length": 11}}, "n4659": {"so_23468208_23471815_0": {"section_id": 3967, "quality": 0.9, "length": 9}, "so_23468208_23471815_1": {"section_id": 3971, "quality": 0.7333333333333333, "length": 11}}}});