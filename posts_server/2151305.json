post_cb({"2151335": {"ParentId": "2151305", "LastEditDate": "2010-01-28T00:15:49.287", "CommentCount": "0", "CreationDate": "2010-01-28T00:03:02.060", "OwnerUserId": "155693", "LastEditorUserId": "155693", "PostTypeId": "2", "Id": "2151335", "Score": "4", "Body": "<p>The result of the assignment should be predictable:</p>\n<p><strong>3.9.1</strong></p>\n<blockquote>\n<p id=\"so_2151305_2151335_0\">4 Unsigned  integers,  declared  unsigned, shall obey the laws of arithmetic modulo 2<sup>n</sup> where n is the number of bits in the value representation of that particular size of integer.17)</p>\n<p id=\"so_2151305_2151335_1\">17)  This implies that unsigned arithmetic does not overflow because a result that cannot be represented by the resulting unsigned integer type is reduced modulo the number that is one greater than the largest value that can be represented by the resulting unsigned integer  type.</p>\n</blockquote>\n<p>In addition, sizeof(char) is defined as 1, and sizeof(unsigned char) = sizeof(char), so you should see the same result regardless of implementation (assuming you don't have bytes with funny sizes other than 8).</p>\n<p>However, the warning is telling you that the result is probably not what you intended (for example, perhaps you overestimated the size of the unsigned type?). If that's what you intended, why not write <code>300 % (1 &lt;&lt; CHAR_BIT)</code> (assuming that 300 is somehow significant to you)? </p>\n", "LastActivityDate": "2010-01-28T00:15:49.287"}, "2151321": {"ParentId": "2151305", "LastEditDate": "2017-05-23T12:08:42.383", "CommentCount": "8", "CreationDate": "2010-01-27T23:59:14.817", "OwnerUserId": "127893", "LastEditorUserId": "-1", "PostTypeId": "2", "Id": "2151321", "Score": "10", "Body": "<p>Sorry for the first answer, here is an explanation from the C++ standards :)</p>\n<blockquote>\n<p id=\"so_2151305_2151321_0\">Is the output in any way predictable\n  or its undefined??</p>\n</blockquote>\n<p>It is predictable. There are two points to look after in this code:\nFirst, the assignment of value that the type <code>unsigned char</code> can't hold:</p>\n<pre><code>unsigned char c;\nc = 300;\n</code></pre>\n<blockquote>\n<p id=\"so_2151305_2151321_1\"><strong>3.9.1 Fundamental types (Page 54)</strong> </p>\n<p id=\"so_2151305_2151321_2\">Unsigned integers, declared unsigned,\n  shall obey the laws of arithmetic\n  modulo 2n where n is the number of\n  bits in the value representation of\n  that particular size of integer.41)<br>\n  ...<br>\n  41) This implies that unsigned\n  arithmetic does not overflow because a\n  result that cannot be represented by\n  the resulting unsigned integer type is\n  reduced modulo the number that is one\n  greater than the largest value that\n  can be represented by the resulting\n  unsigned integer type.</br></br></p>\n</blockquote>\n<p>Basically:</p>\n<pre><code>c = 300 % (std::numeric_limits&lt;unsigned char&gt;::max() + 1);\n</code></pre>\n<p>Second, passing <code>%d</code> in the format string of <code>printf</code> to print <code>unsigned char</code> variable.<br>\nThis one <a href=\"https://stackoverflow.com/users/17389/ysth\">ysth</a> got it right ;) There is no undefined behavior, because a promotional conversion from unsigned char to int happens in the case of <code>variadic arguments</code>!</br></p>\n<p>Note: that the second part of the answer is a <strong>rephrasing</strong> of what have been said in <a href=\"https://stackoverflow.com/questions/2151305/gcc-warning-large-integer-implicitly-truncated-to-unsigned-type/2151340#2151340\">the comments of this answer</a> but it is not my answer originally.</p>\n", "LastActivityDate": "2010-01-28T00:25:08.953"}, "2151305": {"CommentCount": "0", "ViewCount": "24706", "CreationDate": "2010-01-27T23:55:22.110", "LastActivityDate": "2013-01-21T06:38:55.917", "Title": "gcc: warning: large integer implicitly truncated to unsigned type", "AcceptedAnswerId": "2151321", "PostTypeId": "1", "Id": "2151305", "Score": "6", "Body": "<pre><code>#include&lt;stdio.h&gt;\n\nint main()\n{\n\n    unsigned char c;\n    c = 300;\n    printf(\"%d\",c);\n    return 0;\n}\n</code></pre>\n<p>Is the output in any way predictable or its undefined??</p>\n", "Tags": "<c++><c><gcc>", "OwnerUserId": "167814", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_2151305_2151335_0": {"section_id": 7213, "quality": 0.8125, "length": 13}, "so_2151305_2151321_2": {"section_id": 7213, "quality": 0.9090909090909091, "length": 40}, "so_2151305_2151335_1": {"section_id": 7213, "quality": 0.9642857142857143, "length": 27}}, "n3337": {"so_2151305_2151335_0": {"section_id": 6957, "quality": 0.9375, "length": 15}, "so_2151305_2151321_2": {"section_id": 6957, "quality": 0.9545454545454546, "length": 42}, "so_2151305_2151335_1": {"section_id": 6957, "quality": 0.9642857142857143, "length": 27}}, "n4659": {"so_2151305_2151335_1": {"section_id": 8722, "quality": 0.9642857142857143, "length": 27}, "so_2151305_2151321_2": {"section_id": 8722, "quality": 0.9090909090909091, "length": 40}, "so_2151305_2151335_0": {"section_id": 8722, "quality": 0.8125, "length": 13}}}});