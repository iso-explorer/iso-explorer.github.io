post_cb({"bq_ids": {"n4140": {"so_10056909_10056980_1": {"length": 29, "quality": 0.9354838709677419, "section_id": 3386}}, "n3337": {"so_10056909_10056980_1": {"length": 29, "quality": 0.9354838709677419, "section_id": 3255}}}, "10056980": {"Id": "10056980", "PostTypeId": "2", "Body": "<p>Yes, as per the Standard the output should be<sup>[#1]</sup>:    </p>\n<blockquote>\n<p id=\"so_10056909_10056980_0\">unexpected called<br>\n  caught int</br></p>\n</blockquote>\n<p>gcc gives <strong><a href=\"http://ideone.com/NRtDV\" rel=\"nofollow\">accurate result</a></strong>.     </p>\n<p>Note that, MSVC is notoriously buggy w.r.t handling exception specifications. Exception specifications are considered a <strong><a href=\"http://www.gotw.ca/publications/mill22.htm\" rel=\"nofollow\">failed experiment</a></strong>.<br>\nAFAIK, MSVC does not implement exception specifications, except for the empty ones (<code>throw()</code>/<code>nothrow</code>)</br></p>\n<p>C++03 Standard:    </p>\n<p>[#1] <strong>15.5.2 The <code>unexpected()</code> function     [except.unexpected]</strong> </p>\n<blockquote>\n<p id=\"so_10056909_10056980_1\">The <code>unexpected()</code> function shall not return, but it can throw (or re-throw) an exception. If it throws a new exception which is allowed by the exception specification which previously was violated, then the search for another handler will continue at the call of the function whose exception specification was violated....</p>\n</blockquote>\n", "LastEditorUserId": "452307", "LastActivityDate": "2012-04-07T18:12:18.757", "CommentCount": "1", "CreationDate": "2012-04-07T18:07:03.373", "ParentId": "10056909", "Score": "2", "OwnerUserId": "452307", "LastEditDate": "2012-04-07T18:12:18.757"}, "10056909": {"ViewCount": "362", "Body": "<pre><code>#include \"iostream\"\n#include \"conio.h\"\n#include \"exception\"\n#include \"cstdlib\"\nusing namespace std;\n\nvoid myunexpected () \n{\n    cerr &lt;&lt; \"unexpected called\\n\";\n    throw 0;     // throws int (in exception-specification)\n}\n\nvoid myfunction () throw (int) \n{\n    throw 'x';   // throws char (not in exception-specification)\n}\n\nint main (void) \n{\n    set_unexpected (myunexpected);\n   try \n   {\n      myfunction();\n   }\n   catch (int) { cerr &lt;&lt; \"caught int\\n\"; }\n   catch (...) { cerr &lt;&lt; \"caught other exception (non-compliant compiler?)\\n\"; }\n   getch();\n   return 0;\n}\n</code></pre>\n<blockquote>\n<blockquote>\n<p id=\"so_10056909_10056909_5\">Output(When executed on Visual studio 2008):\n    caught other exception (non-compliant compiler?)</p>\n<p id=\"so_10056909_10056909_6\">But, I was expecting the output to be:</p>\n<p id=\"so_10056909_10056909_7\">unexpected called</p>\n<p id=\"so_10056909_10056909_8\">caught int</p>\n<p id=\"so_10056909_10056909_9\">NOTE: I executed this program on Visual Studio 2008.  </p>\n</blockquote>\n</blockquote>\n", "AcceptedAnswerId": "10056980", "Title": "Exception Handling - set_unexpected() not able to call", "CreationDate": "2012-04-07T17:58:27.123", "Id": "10056909", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2012-12-19T08:51:43.710", "Score": "2", "OwnerUserId": "1168582", "Tags": "<c++>", "AnswerCount": "1"}});