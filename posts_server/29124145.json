post_cb({"29124251": {"ParentId": "29124145", "PostTypeId": "2", "CommentCount": "7", "Body": "<p>Variable length arrays(<em>VLA</em>) are a C99 feature that gcc supports as <a href=\"https://gcc.gnu.org/onlinedocs/gcc/Variable-Length.html\" rel=\"nofollow\">an extension in C++</a> and in C99 a jump across a VLA declaration is undefined behavior, from the draft C99 standard section <code>6.8.6.1</code> <em>The goto statement</em>:</p>\n<blockquote>\n<p id=\"so_29124145_29124251_0\">A goto statement shall not jump from outside the scope of an identifier having\n  a variably modified type to inside the scope of that identifier.</p>\n</blockquote>\n<p><code>clang</code> and <code>gcc 4.9</code> actually makes this an error and says:</p>\n<pre><code>error: goto into protected scope\n    goto loop;\n    ^\n\nnote: jump bypasses initialization of variable length array\n            unsigned char tmp[remaining];\n                          ^\n</code></pre>\n<p>See the <a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=21113\" rel=\"nofollow\">gcc bug report:  Jumps into VLA or VM scope not rejected for C++</a>.</p>\n<p>The rules for jumping past a declaration of an automatic variable in C++ is covered in section <code>6.7</code> <em>[stmt.dcl]</em> which says:</p>\n<blockquote>\n<p id=\"so_29124145_29124251_1\">It is possible to transfer into a block, but not in a way that\n  bypasses declarations with initialization. A program that jumps87 from\n  a point where a variable with automatic storage duration is not in\n  scope to a point where it is in scope is ill-formed unless the\n  variable has scalar type, class type with a trivial default\n  constructor and a trivial destructor, a cv-qualified version of one of\n  these types, or an array of one of the preceding types and is declared\n  without an initializer (8.5). [ Example:</p>\n<pre><code>void f() {\n    // ...\n    goto lx; // ill-formed: jump into scope of a\nly:\n    X a = 1;\n    // ...\nlx:\n    goto ly; // OK, jump implies destructor\n             // call for a followed by construction\n            // again immediately following label ly\n}\n</code></pre>\n<p id=\"so_29124145_29124251_2\">\u2014end example ]</p>\n</blockquote>\n", "OwnerUserId": "1708801", "LastEditorUserId": "1708801", "LastEditDate": "2015-03-19T01:04:42.680", "Id": "29124251", "Score": "5", "CreationDate": "2015-03-18T14:06:47.280", "LastActivityDate": "2015-03-19T01:04:42.680"}, "29124145": {"CommentCount": "1", "ViewCount": "202", "PostTypeId": "1", "LastEditorUserId": "1708801", "CreationDate": "2015-03-18T14:01:49.690", "LastActivityDate": "2015-03-19T01:04:42.680", "Title": "Segmentation fault when jumping to goto over VLA array", "AcceptedAnswerId": "29124251", "LastEditDate": "2015-03-18T14:36:01.683", "Id": "29124145", "Score": "4", "Body": "<p>The following example demonstrates the issue:</p>\n<pre><code>#include &lt;cstdio&gt;\n\nint main()\n{\n        unsigned int remaining=1;\n\n        goto loop;\n\n        while(remaining) {\n                unsigned char tmp[remaining];\n                printf(\"&amp;tmp: %p\\n\",tmp);\nloop:\n                remaining = 512;//or something else;\n        }\n}\n</code></pre>\n<p>Initially, the initialization of \"remaining\" variable was a bit long and I used <code>goto</code> to initialize it on one line. However, now this example gives segmentation fault on the <code>printf</code> line.</p>\n<p>It looks like the array is not initialized properly.</p>\n<p>Even gdb cannot print the tmp array's address:</p>\n<pre><code>Program received signal SIGSEGV, Segmentation fault.\n0x00000000004005b8 in main () at test.cpp:11\n11          printf(\"&amp;tmp: %p\\n\",tmp);\n(gdb) p tmp\n$1 = 0xfffffffffffffe00 &lt;error: Cannot access memory at address 0xfffffffffffffe00&gt;\n</code></pre>\n<p>My gcc version:</p>\n<pre><code>gcc (Ubuntu 4.8.2-19ubuntu1) 4.8.2\n</code></pre>\n<p>compiling with:</p>\n<pre><code>g++ -o testc test.cpp\n</code></pre>\n<p>If I remove the goto, or replace the variadic array with a fixed array, the segmentation fault is gone.\nWhat is happening actually?</p>\n<p>Is this a gcc bug? If the combination of <code>goto</code> and variadic arrays is not allowed, there should be a warning?</p>\n", "Tags": "<c++><gcc><variable-length-array>", "OwnerUserId": "935512", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_29124145_29124251_1": {"section_id": 3918, "quality": 0.9285714285714286, "length": 39}}, "n3337": {"so_29124145_29124251_1": {"section_id": 3778, "quality": 0.9285714285714286, "length": 39}}, "n4659": {"so_29124145_29124251_1": {"section_id": 4804, "quality": 0.9523809523809523, "length": 40}}}});