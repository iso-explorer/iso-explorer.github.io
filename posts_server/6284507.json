post_cb({"6284580": {"Id": "6284580", "PostTypeId": "2", "Body": "<p>Initialising variables that way is only supported with <a href=\"http://en.wikipedia.org/wiki/C%2B%2B_classes#Aggregate_classes\" rel=\"nofollow\">Aggregate Classes</a>.</p>\n<p>If you add constructor(s) then then problem goes away, but you'll need to change the syntax a little and you lose the ability to store the <code>struct</code> in a <code>union</code> (among other things).</p>\n<pre><code>struct sampleData\n{\n    sampleData(int x, int y) : x(x), y(y) {}\n    int x;\n    int y;\n};\n\nsampleData sample( 1, 2 );\n</code></pre>\n<p>Adding <code>z</code> (and changing the constructor) will mark <code>sample( 1, 2 )</code> as a compile error.</p>\n", "LastEditorUserId": "235825", "LastActivityDate": "2011-06-08T20:43:17.920", "Score": "5", "CreationDate": "2011-06-08T20:06:34.210", "ParentId": "6284507", "CommentCount": "6", "OwnerUserId": "235825", "LastEditDate": "2011-06-08T20:43:17.920"}, "6284695": {"Id": "6284695", "PostTypeId": "2", "Body": "<p>As a followup to Nemo's answer with the C standardese, here is what the C++03 standard says:</p>\n<p>\u00a78.5.1/7:</p>\n<blockquote>\n<p id=\"so_6284507_6284695_0\">If there are fewer <em>initializers</em> in the list than there are members in the aggregate, then each member not explicitly initialized shall be value-initialized.</p>\n</blockquote>\n<p>\u00a78.5/5:</p>\n<blockquote>\n<p id=\"so_6284507_6284695_1\">To <em>value-initialize</em> an object of type <code>T</code> means:</p>\n<ul>\n<li>if <code>T</code> is a class type with a user-declared constructor, then the default constructor for <code>T</code> is called (and the initialization is ill-formed if <code>T</code> has no accessible default constructor);</li>\n<li>if <code>T</code> is a non-union class type without a user-declared constructor, then every non-static data member and base-class component of <code>T</code> is value-initialized;</li>\n<li>if <code>T</code> is an array type, then each element is value-initialized;</li>\n<li>otherwise, the object is zero-initialized</li>\n</ul>\n<p id=\"so_6284507_6284695_2\">To <em>zero-initialize</em> an object of type <code>T</code> means:</p>\n<ul>\n<li>if <code>T</code> is a scalar type, the object is set to the value of <code>0</code> (zero) converted to <code>T</code>;</li>\n<li>if <code>T</code> is a non-union class type, each nonstatic data member and each base-class subobject is zero-initialized;</li>\n<li>if <code>T</code> is a union type, the object\u2019s first named data member) is zero-initialized;</li>\n<li>if <code>T</code> is an array type, each element is zero-initialized;</li>\n<li>if <code>T</code> is a reference type, no initialization is performed.</li>\n</ul>\n</blockquote>\n", "LastActivityDate": "2011-06-08T20:15:16.843", "CommentCount": "2", "CreationDate": "2011-06-08T20:15:16.843", "ParentId": "6284507", "Score": "4", "OwnerUserId": "636019"}, "6284604": {"Id": "6284604", "PostTypeId": "2", "Body": "<p>Why not use</p>\n<pre><code>sampleData sample = { x: 1, y:2 } ;\n</code></pre>\n<p>?</p>\n<p>But you'd still run into the problem of <code>z</code> being initialized to an unpredictable value, so it's better to define a constructor which sets all variables to well defined values.</p>\n", "LastActivityDate": "2011-06-08T20:08:27.593", "CommentCount": "3", "CreationDate": "2011-06-08T20:08:27.593", "ParentId": "6284507", "Score": "-2", "OwnerUserId": "288875"}, "6284565": {"Id": "6284565", "PostTypeId": "2", "Body": "<p>Yes, any elements you leave off of the initialization list will be initialized to zero (for POD scalar types) or using their default constructor (for classes).</p>\n<p>The relevant language from the C standard is quoted <a href=\"http://www.ex-parrot.com/~chris/random/initialise.html\" rel=\"nofollow\">here</a>:</p>\n<blockquote>\n<p id=\"so_6284507_6284565_0\">[6.7.8.21] If there are fewer initializers in a brace-enclosed list than there are elements or members of an aggregate, or fewer characters in a string literal used to initialize an array of known size than there are elements in the array, the remainder of the aggregate shall be initialized implicitly the same as objects that have static storage duration.</p>\n</blockquote>\n<p>I am sure someone more motivated than I could find the corresponding language in one of the C++ specs...</p>\n<p>Note that this implies that POD scalar elements are initialized as if you wrote \"= 0\".  Which means it will correctly initialize pointers to NULL and floats to 0.0 even if their representations do not happen to be all-zero bytes.  It also implies that it works recursively; if your struct contains a struct, the inner struct will be properly initialized as well.</p>\n", "LastEditorUserId": "768469", "LastActivityDate": "2011-06-08T20:11:25.847", "Score": "4", "CreationDate": "2011-06-08T20:05:18.937", "ParentId": "6284507", "CommentCount": "2", "OwnerUserId": "768469", "LastEditDate": "2011-06-08T20:11:25.847"}, "bq_ids": {"n4140": {"so_6284507_6284695_2": {"length": 4, "quality": 1.0, "section_id": 3285}, "so_6284507_6284695_0": {"length": 12, "quality": 0.8571428571428571, "section_id": 3304}, "so_6284507_6284695_1": {"length": 4, "quality": 1.0, "section_id": 3287}}, "n3337": {"so_6284507_6284695_1": {"length": 4, "quality": 1.0, "section_id": 3157}, "so_6284507_6284695_0": {"length": 12, "quality": 0.8571428571428571, "section_id": 3174}, "so_6284507_6284695_2": {"length": 4, "quality": 1.0, "section_id": 3155}}, "n4659": {"so_6284507_6284695_0": {"length": 10, "quality": 0.7142857142857143, "section_id": 4070}}}, "6284507": {"ViewCount": "607", "Body": "<p>Suppose I have the following struct: </p>\n<pre><code>struct sampleData\n{\n       int x;\n       int y;\n};\n</code></pre>\n<p>And when used, I want to initialize variables of <code>sampleData</code> type to a known state.</p>\n<pre><code>sampleData sample = { 1, 2 } \n</code></pre>\n<p>Later, I decide that I need additional data stored in my <code>sampleData</code> struct, as follows: </p>\n<pre><code>struct sampleData\n{\n       int x;\n       int y;\n       int z;\n};\n</code></pre>\n<p>It is my understanding that the two field initialization left over from my pre-<code>z</code> data structure is still a valid statement, and will be compiled., populating the missing fields with default values.  </p>\n<p>Is this understanding correct?  I have been working recently in Ada, which also allows aggregate initialization, but which would flag a similar issue as a compilation error.  Assuming that my assumptions about the C++ code above are correct, is there a language construct which would recognize missing initialization values as an error? </p>\n", "AcceptedAnswerId": "6284580", "Title": "Aggregate Initialization Safety in C++", "CreationDate": "2011-06-08T20:00:20.720", "Id": "6284507", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2011-06-08T21:36:20.750", "Score": "8", "OwnerUserId": "693416", "Tags": "<c++><ada><aggregate-initialization>", "AnswerCount": "4"}});