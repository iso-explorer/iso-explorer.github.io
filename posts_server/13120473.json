post_cb({"bq_ids": {"n4140": {"so_13120473_13122063_0": {"length": 10, "quality": 0.7142857142857143, "section_id": 6076}}, "n3337": {"so_13120473_13122063_0": {"length": 10, "quality": 0.7142857142857143, "section_id": 5844}}, "n4659": {"so_13120473_13122063_0": {"length": 10, "quality": 0.7142857142857143, "section_id": 7572}}}, "13122063": {"Id": "13122063", "PostTypeId": "2", "Body": "<p>From <a href=\"http://www.open-std.org/JTC1/sc22/wg14/www/docs/n1256.pdf\">C99 Standard</a></p>\n<blockquote>\n<p id=\"so_13120473_13122063_0\">6.5.3.4.2<br>\n  The <code>sizeof</code> operator yields the size (in bytes) of its operand, which may be an expression or the parenthesized name of a\n  type.</br></p>\n</blockquote>\n<p>In your case <code>int</code> is neither expression nor parenthesized name.</p>\n", "LastEditorUserId": "1331430", "LastActivityDate": "2012-10-30T23:44:31.610", "Score": "32", "CreationDate": "2012-10-29T12:53:45.437", "ParentId": "13120473", "CommentCount": "8", "LastEditDate": "2012-10-30T23:44:31.610", "OwnerUserId": "1341006"}, "13120473": {"ViewCount": "6138", "Body": "<p>We know that <code>sizeof</code> is an operator used for calculating the size of any datatype and expression, and when the operand is an expression, the parentheses can be omitted.</p>\n<pre><code>int main()\n{\n        int a;\n\n        sizeof int;\n        sizeof( int );\n        sizeof a;\n        sizeof( a );\n\n        return 0;\n}\n</code></pre>\n<p>the first usage of <code>sizeof</code> is wrong, while others are right.</p>\n<p>When it is compiled using gcc, the following error message will be given:</p>\n<pre><code>main.c:5:9: error: expected expression before \u2018int\u2019\n</code></pre>\n<p>My question is why the C standard does not allow this kind of operation. Will <code>sizeof int</code> cause any ambiguity? </p>\n", "AcceptedAnswerId": "13120564", "Title": "Why sizeof int is wrong, while sizeof(int) is right?", "CreationDate": "2012-10-29T11:11:12.563", "Id": "13120473", "CommentCount": "8", "FavoriteCount": "17", "PostTypeId": "1", "LastActivityDate": "2012-10-30T23:44:31.610", "Score": "92", "OwnerUserId": "1253826", "Tags": "<c++><c><sizeof>", "AnswerCount": "3"}, "13123503": {"Id": "13123503", "PostTypeId": "2", "Body": "<p>There are two ways to use the sizeof operator in C. The syntax is this:</p>\n<pre><code>C11 6.5.3 Unary operators\n...\nsizeof unary-expression\nsizeof ( type-name )\n</code></pre>\n<p>Whenever you use a type as operand, you must have the parenthesis, by the syntax definition of the language. If you use sizeof on an expression, you don't need the parenthesis.</p>\n<p>The C standard gives one such example of where you might want to use it on an expression:</p>\n<pre><code>sizeof array / sizeof array[0]\n</code></pre>\n<p>However, for the sake of consistency, and to avoid bugs related to operator precedence, I would personally advise to always use () no matter the situation.</p>\n", "LastActivityDate": "2012-10-29T14:24:09.333", "Score": "5", "CreationDate": "2012-10-29T14:24:09.333", "ParentId": "13120473", "CommentCount": "4", "OwnerUserId": "584518"}, "13120564": {"Id": "13120564", "PostTypeId": "2", "Body": "<p>The following could be ambiguous:</p>\n<pre><code>sizeof int * + 1\n</code></pre>\n<p>Is that <code>(sizeof (int*)) + 1</code>, or <code>(sizeof(int)) * (+1)</code>?</p>\n<p>Obviously the C language could have introduced a rule to resolve the ambiguity, but I can imagine why it didn't bother. With the language as it stands, a type specifier never appears \"naked\" in an expression, and so there is no need for rules to resolve whether that second <code>*</code> is part of the type or an arithmetic operator.</p>\n<p>The existing grammar does already resolve the potential ambiguity of <code>sizeof (int *) + 1</code>. It is <code>(sizeof(int*))+1</code>, <em>not</em> <code>sizeof((int*)(+1))</code>.</p>\n<p>C++ has a somewhat similar issue to resolve with function-style cast syntax. You can write <code>int(0)</code> and you can write <code>typedef int *intptr; intptr(0);</code>, but you can't write <code>int*(0)</code>. In that case, the resolution is that the \"naked\" type must be a simple type name, it can't just be any old type id that might have spaces in it, or trailing punctuation. Maybe <code>sizeof</code> could have been defined with the same restriction, I'm not certain.</p>\n", "LastEditorUserId": "13005", "LastActivityDate": "2012-10-29T17:49:45.127", "Score": "98", "CreationDate": "2012-10-29T11:17:20.027", "ParentId": "13120473", "CommentCount": "2", "LastEditDate": "2012-10-29T17:49:45.127", "OwnerUserId": "13005"}});