post_cb({"37861536": {"CommentCount": "2", "ViewCount": "40", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2016-06-16T14:03:37.383", "LastActivityDate": "2016-06-16T14:57:08.317", "Title": "Is Repeated Assignment Defined for get_time?", "AcceptedAnswerId": "37862742", "LastEditDate": "2017-05-23T12:08:28.330", "Id": "37861536", "Score": "0", "Body": "<p>I was working on <a href=\"https://stackoverflow.com/questions/37856887/how-to-parse-a-date-time-string-that-includes-fractional-time/37857557#37857557\">this answer</a>. And I ran into a conundrum: <a href=\"http://en.cppreference.com/w/cpp/io/c/fscanf#Parameters\" rel=\"nofollow noreferrer\"><code>scanf</code> has an assignment suppressing <code>'*'</code></a>:</p>\n<blockquote>\n<p id=\"so_37861536_37861536_0\">If this option is present, the function does not assign the result of the conversion to any receiving argument</p>\n</blockquote>\n<p>But when used in <a href=\"http://en.cppreference.com/w/cpp/io/manip/get_time\" rel=\"nofollow noreferrer\"><code>get_time</code></a> the <code>'*'</code> gives a run-time error on Visual Studio, libc++, and libstdc++: <code>str &gt;&gt; get_time(&amp;tmbuf, \"%T.%*Y\")</code> so I believe it's not supported.</p>\n<p>As such I chose to ignore input by reading into <code>tmbuf.tm_year</code> twice:</p>\n<pre><code>str &gt;&gt; get_time(&amp;tmbuf, \"%H:%M:%S.%Y UTC %b %d %Y\");\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/d6b5e79637adeee3\" rel=\"nofollow noreferrer\">This works</a> and seems to be my only option so far as <code>get_time</code> goes since the <code>'*'</code> isn't accepted. But as we all know, just because it works doesn't mean it's defined. Can someone confirm that:</p>\n<ol>\n<li>It is defined to assign the same variable twice in <code>get_time</code></li>\n<li>The stream will always be read left-to-right so the 1<sup>st</sup>incidence of <code>%Y</code> will be stomped, not the 2<sup>nd</sup></li>\n</ol>\n", "Tags": "<c++><scanf><undefined-behavior><suppress><gettime>", "OwnerUserId": "2642059", "AnswerCount": "1"}, "37862742": {"ParentId": "37861536", "CommentCount": "0", "Body": "<p>The standard specifies the exact algorithm of processing the format string of <code>get_time</code> in <strong>22.4.5.1.1 <code>time_get</code> members</strong>. (<code>time_get::get</code> is what eventually gets called when you do <code>str&gt;&gt;get_time(...)</code>). I quote the important parts:</p>\n<blockquote>\n<p id=\"so_37861536_37862742_0\">The function starts by evaluating <code>err = ios_base::goodbit</code>. It then enters a loop, reading zero or more characters from <code>s</code> at each iteration. Unless otherwise specified below, the loop terminates when the first of the following conditions holds: </p>\n<p id=\"so_37861536_37862742_1\">(8.1) \u2014 The expression <code>fmt == fmtend</code> evaluates to true.</p>\n<p id=\"so_37861536_37862742_2\"><em>skip boring error-handling parts</em></p>\n<p id=\"so_37861536_37862742_3\">(8.4) \u2014 The next element of <code>fmt</code> is equal to <code>\u2019%\u2019</code>, optionally followed by a modifier character, followed by a conversion specifier character, format, together forming a conversion specification valid for the ISO/IEC 9945 function <code>strptime</code>. <em>skip boring error-handling parts</em> the function evaluates <code>s = do_get(s, end, f, err, t, format, modifier)</code> <em>skip more boring error-handling parts</em> the function increments <code>fmt</code> to point just past the end of the conversion specification and continues looping.</p>\n</blockquote>\n<p>As can be seen from the description, the format string is processed strictly sequentially left to right. There's no provision to handle repeating conversion specifications specially. So the answer must be yes, what you have done is it is well defined and perfectly legal.</p>\n", "OwnerUserId": "775806", "PostTypeId": "2", "Id": "37862742", "Score": "1", "CreationDate": "2016-06-16T14:57:08.317", "LastActivityDate": "2016-06-16T14:57:08.317"}, "bq_ids": {"n4140": {"so_37861536_37862742_3": {"section_id": 6581, "quality": 0.76, "length": 38}, "so_37861536_37862742_1": {"section_id": 6581, "quality": 0.8333333333333334, "length": 5}, "so_37861536_37862742_0": {"section_id": 6581, "quality": 0.9230769230769231, "length": 24}}, "n3337": {"so_37861536_37862742_3": {"section_id": 6336, "quality": 0.76, "length": 38}, "so_37861536_37862742_1": {"section_id": 6336, "quality": 0.8333333333333334, "length": 5}, "so_37861536_37862742_0": {"section_id": 6336, "quality": 0.9230769230769231, "length": 24}}, "n4659": {"so_37861536_37862742_3": {"section_id": 8063, "quality": 0.76, "length": 38}, "so_37861536_37862742_1": {"section_id": 8063, "quality": 0.8333333333333334, "length": 5}, "so_37861536_37862742_0": {"section_id": 8063, "quality": 0.9230769230769231, "length": 24}}}});