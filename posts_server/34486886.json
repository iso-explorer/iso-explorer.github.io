post_cb({"34486987": {"ParentId": "34486886", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>The additive operators perform what is called the <a href=\"http://en.cppreference.com/w/cpp/language/operator_arithmetic#Conversions\" rel=\"nofollow\">usual arithmetic conversion</a> on their operands which can include integral promotions and then after that we can have further conversions. The purpose is to yield a common type and if the promotions do not accomplish that then a further conversion is required.</p>\n<p>This is covered in section <code>5</code> <em>[expr]</em> of the draft C++ standard which says (<em>emphasis mine</em>):</p>\n<blockquote>\n<p id=\"so_34486886_34486987_0\">Many binary operators that expect operands of arithmetic or enumeration type cause conversions and yield\n  result types in a similar way. <strong>The purpose is to yield a common type</strong>, which is also the type of the result.\n  This pattern is <strong>called the usual arithmetic conversions</strong>, which are defined as follow</p>\n</blockquote>\n<p>and includes the following bullet:</p>\n<blockquote id=\"so_34486886_34486987_1\">\n<ul>\n<li><strong>Otherwise, the integral promotions (4.5) shall be performed</strong> on both operands.61 Then the following\n  rules shall be applied to the promoted operands:</li>\n</ul>\n</blockquote>\n<p>which has the following bullets:</p>\n<blockquote>\n<ul>\n<li><p id=\"so_34486886_34486987_2\">If both operands <strong>have the same type, no further conversion is needed</strong></p></li>\n<li><p id=\"so_34486886_34486987_3\">Otherwise, if <strong>both operands have signed integer types</strong> or both have unsigned integer types, the\n  operand with the <strong>type of lesser integer conversion rank shall be converted to the type of the\n  operand with greater rank</strong>.</p></li>\n<li>Otherwise, if the operand that has unsigned integer type has rank greater than or equal to the\n  rank of the type of the other operand, the operand with signed integer type shall be converted to\n  the type of the operand with unsigned integer type.</li>\n<li>Otherwise, if the type of the operand with signed integer type can represent all of the values of\n  the type of the operand with unsigned integer type, the operand with unsigned integer type shall\n  be converted to the type of the operand with signed integer type.</li>\n<li>Otherwise, both operands shall be converted to the unsigned integer type corresponding to the\n  type of the operand with signed integer type.</li>\n</ul>\n</blockquote>\n<p>So in the first case after promotions they both have the same type(<em>int</em>) so no further conversion is needed.</p>\n<p>In the second case after promotions they do not(<em>int and long</em>) so a further conversion is required.</p>\n", "OwnerUserId": "1708801", "LastEditorUserId": "1708801", "LastEditDate": "2015-12-28T14:42:03.057", "Id": "34486987", "Score": "2", "CreationDate": "2015-12-28T02:27:00.733", "LastActivityDate": "2015-12-28T14:42:03.057"}, "34486985": {"ParentId": "34486886", "CommentCount": "1", "Body": "<p>From the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_34486886_34486985_0\"><strong>4 Standard conversions</strong></p>\n<p id=\"so_34486886_34486985_1\">1 Standard conversions are implicit conversions with built-in meaning. Clause 4 enumerates the full set of such\n  conversions. A standard conversion sequence is a sequence of standard conversions in the following order:</p>\n<p id=\"so_34486886_34486985_2\">\u2014 Zero or one conversion from the following set: lvalue-to-rvalue conversion, array-to-pointer conversion, and function-to-pointer conversion.</p>\n<p id=\"so_34486886_34486985_3\">\u2014 Zero or one conversion from the following set: integral promotions, floating point promotion, integral conversions, floating point conversions, floating-integral conversions, pointer conversions, pointer to member conversions, and boolean conversions.</p>\n<p id=\"so_34486886_34486985_4\">\u2014 Zero or one qualification conversion.</p>\n</blockquote>\n<p>In the expression,</p>\n<pre><code>cval + lval;\n</code></pre>\n<p>since <code>cval</code> is not of type <code>long</code>, it has to be converted to <code>long</code>. However, in the process of applying the standard conversions, <em>integral promotion</em> comes ahead of <em>conversions</em>. Hence, <code>cval</code> is promoted to an <code>int</code> first before being converted to a <code>long</code>.</p>\n", "OwnerUserId": "434551", "PostTypeId": "2", "Id": "34486985", "Score": "1", "CreationDate": "2015-12-28T02:26:50.623", "LastActivityDate": "2015-12-28T02:26:50.623"}, "34486886": {"CommentCount": "0", "ViewCount": "372", "PostTypeId": "1", "LastEditorUserId": "1708801", "CreationDate": "2015-12-28T02:07:22.690", "LastActivityDate": "2015-12-28T14:42:03.057", "Title": "Arithmetic conversion VS integral promotion", "AcceptedAnswerId": "34486987", "LastEditDate": "2015-12-28T03:24:07.943", "Id": "34486886", "Score": "1", "Body": "<pre><code>char cval;\nshort sval;\nlong lval;\nsval + cval; // sval and cval promoted to int\ncval + lval; // cval converted to long\n</code></pre>\n<p>This is a piece of code on C++ Primer.\nI know <code>sval+cval</code> generates an int type according to </p>\n<blockquote>\n<p id=\"so_34486886_34486886_0\">convert the small integral types to a larger integral type. The types\n  bool, char, signed char, unsigned char, short, and unsigned short are\n  promoted to int if all possible values of that type fit in an int.</p>\n</blockquote>\n<p>But for the last one I couldn't understand why it uses \"converted\". Why is <code>cval</code> not promoted to <code>int</code> first and then the <code>int</code> converted (or maybe promoted I'm not sure whether promoted can be used from <code>int</code> to <code>long</code> because I only see definition of promotion on smaller type to <code>int</code>) to <code>long</code>. I didn't see any explanation or examples on <code>char</code> straightly to <code>long</code> in that part of the book.  <br> Is there any thing wrong with my understanding?  <br>\nI'm quite new at C++, someone please enlighten me! Many thanks in advance!</br></br></p>\n", "Tags": "<c++><integer-promotion>", "OwnerUserId": "5405040", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_34486886_34486987_1": {"section_id": 5943, "quality": 0.9166666666666666, "length": 11}, "so_34486886_34486987_2": {"section_id": 5943, "quality": 1.0, "length": 8}, "so_34486886_34486985_3": {"section_id": 0, "quality": 1.0, "length": 24}, "so_34486886_34486985_4": {"section_id": 0, "quality": 1.0, "length": 4}, "so_34486886_34486985_1": {"section_id": 0, "quality": 0.9444444444444444, "length": 17}, "so_34486886_34486987_0": {"section_id": 5943, "quality": 0.8709677419354839, "length": 27}, "so_34486886_34486985_2": {"section_id": 0, "quality": 1.0, "length": 11}, "so_34486886_34486987_3": {"section_id": 5943, "quality": 1.0, "length": 23}}, "n3337": {"so_34486886_34486987_1": {"section_id": 5714, "quality": 0.9166666666666666, "length": 11}, "so_34486886_34486987_2": {"section_id": 5714, "quality": 1.0, "length": 8}, "so_34486886_34486985_3": {"section_id": 0, "quality": 1.0, "length": 24}, "so_34486886_34486985_4": {"section_id": 0, "quality": 1.0, "length": 4}, "so_34486886_34486985_1": {"section_id": 0, "quality": 0.9444444444444444, "length": 17}, "so_34486886_34486987_0": {"section_id": 5714, "quality": 0.8709677419354839, "length": 27}, "so_34486886_34486985_2": {"section_id": 0, "quality": 1.0, "length": 11}, "so_34486886_34486987_3": {"section_id": 5714, "quality": 1.0, "length": 23}}, "n4659": {"so_34486886_34486987_2": {"section_id": 7428, "quality": 1.0, "length": 8}, "so_34486886_34486987_1": {"section_id": 7428, "quality": 0.9166666666666666, "length": 11}, "so_34486886_34486985_3": {"section_id": 0, "quality": 0.8333333333333334, "length": 20}, "so_34486886_34486985_4": {"section_id": 0, "quality": 1.0, "length": 4}, "so_34486886_34486985_1": {"section_id": 0, "quality": 0.9444444444444444, "length": 17}, "so_34486886_34486987_0": {"section_id": 7428, "quality": 0.8709677419354839, "length": 27}, "so_34486886_34486985_2": {"section_id": 0, "quality": 1.0, "length": 11}, "so_34486886_34486987_3": {"section_id": 7428, "quality": 1.0, "length": 23}}}});