post_cb({"1611694": {"ParentId": "1611673", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_1611673_1611694_0\">Is there guarantee that they are have the same address, i.e. could I write the following code? </p>\n</blockquote>\n<p>The standard allows such optimizations since string literals are read-only.</p>\n<blockquote>\n<p id=\"so_1611673_1611694_1\">I heard that GNU C++ optimize strings so they have the same address, could I use that feature in my programs?</p>\n</blockquote>\n<p>Yes, GCC/G++ often do that. AFAIK, there's an option to turn this on/off.</p>\n", "OwnerUserId": "66692", "PostTypeId": "2", "Id": "1611694", "Score": "2", "CreationDate": "2009-10-23T06:31:10.310", "LastActivityDate": "2009-10-23T06:31:10.310"}, "bq_ids": {"n4140": {"so_1611673_1611689_0": {"section_id": 5361, "quality": 0.8888888888888888, "length": 8}}, "n3337": {"so_1611673_1611689_0": {"section_id": 5157, "quality": 0.8888888888888888, "length": 8}}, "n4659": {"so_1611673_1611689_0": {"section_id": 6789, "quality": 0.8888888888888888, "length": 8}}}, "1611741": {"ParentId": "1611673", "CommentCount": "0", "Body": "<p>GCC uses such optimization, and Microsoft does (they call it <a href=\"http://msdn.microsoft.com/en-us/library/ms924286.aspx\" rel=\"nofollow noreferrer\">string pooling</a>). It is just optimization, C++ Standard explicitly states that you cannot use that (in 2.13.4/2). In addition, just imagine that you'll get pointer to string from some other module/library - I don't think compiler could make such optimization in that case.</p>\n", "OwnerUserId": "123111", "PostTypeId": "2", "Id": "1611741", "Score": "3", "CreationDate": "2009-10-23T06:47:14.957", "LastActivityDate": "2009-10-23T06:47:14.957"}, "1611690": {"ParentId": "1611673", "CommentCount": "2", "Body": "<p>this is called <a href=\"http://en.wikipedia.org/wiki/String_interning\" rel=\"nofollow noreferrer\">string interning</a></p>\n<p>In you case it is better not to rely on that. The scopes are different, but I don't find myself very competent on this subject</p>\n", "OwnerUserId": "115985", "PostTypeId": "2", "Id": "1611690", "Score": "8", "CreationDate": "2009-10-23T06:30:26.877", "LastActivityDate": "2009-10-23T06:30:26.877"}, "1613181": {"ParentId": "1611673", "CommentCount": "2", "Body": "<p>Actually, there is a solution, so simple solution:</p>\n<pre><code>char const * const Message_Ok = \"OK\";\n\nchar const * const OK() { return Message_Ok; }\n\nint main(int argc, const char* argv[])\n{\n  if (OK() == Message_Ok) { std::cout &lt;&lt; \"OK\" &lt;&lt; std::endl; }\n  return 0;\n}\n</code></pre>\n<p>You cannot compare two different string literals, but use a const global variable to convey your meaning and it's <code>OK</code> to compare the memory address :)</p>\n<p><em>Some extern may be missing... I've got some difficulty with that beast</em></p>\n", "OwnerUserId": "147192", "PostTypeId": "2", "Id": "1613181", "Score": "0", "CreationDate": "2009-10-23T12:42:09.737", "LastActivityDate": "2009-10-23T12:42:09.737"}, "1611705": {"ParentId": "1611673", "CommentCount": "0", "Body": "<p>There's no such guarantee. The language just says that they <em>might</em> have the same address. Or they might not.</p>\n", "OwnerUserId": "187690", "PostTypeId": "2", "Id": "1611705", "Score": "2", "CreationDate": "2009-10-23T06:36:29.830", "LastActivityDate": "2009-10-23T06:36:29.830"}, "1611689": {"ParentId": "1611673", "PostTypeId": "2", "CommentCount": "1", "CreationDate": "2009-10-23T06:30:25.350", "Score": "11", "LastEditorUserId": "12711", "LastEditDate": "2009-10-23T06:41:23.847", "Id": "1611689", "OwnerUserId": "12711", "Body": "<p>There's certainly no guarantee, but it is a common (I think) optimization.</p>\n<p>The C++ standard says (2.13.4/2 \"String literals):</p>\n<blockquote>\n<p id=\"so_1611673_1611689_0\">Whether all string literals are distinct (that is, are stored in nonoverlapping objects) is implementation-defined.</p>\n</blockquote>\n<p>To be clear, you shouldn't write code that assumes this optimization will take place - as Chris Lutz says, C++ code that relies on this is code that's waiting to be broken.</p>\n", "LastActivityDate": "2009-10-23T06:41:23.847"}, "1611673": {"CommentCount": "2", "ViewCount": "317", "PostTypeId": "1", "LastEditorUserId": "194510", "CreationDate": "2009-10-23T06:25:57.667", "LastActivityDate": "2009-10-23T12:42:09.737", "Title": "Constant strings address", "AcceptedAnswerId": "1611689", "LastEditDate": "2009-10-23T06:32:52.273", "Id": "1611673", "Score": "6", "Body": "<p>I have several identical string constants in my program:</p>\n<pre><code>const char* Ok()\n{\n  return \"Ok\";  \n}\n\nint main()\n{\n  const char* ok = \"Ok\";\n}\n</code></pre>\n<p>Is there guarantee that they are have the same address, i.e. could I write the following code? I heard that GNU C++ optimize strings so they have the same address, could I use that feature in my programs?</p>\n<pre><code>int main()\n{\n  const char* ok = \"Ok\";\n  if ( ok == Ok() ) // is it ok?\n  ;\n}\n</code></pre>\n", "Tags": "<c++><constants><string-comparison>", "OwnerUserId": "194510", "AnswerCount": "6"}});