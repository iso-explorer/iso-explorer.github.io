post_cb({"5804005": {"ParentId": "5792508", "Score": "0", "CreationDate": "2011-04-27T12:21:31.183", "Id": "5804005", "OwnerUserId": "109960", "LastActivityDate": "2011-04-27T12:21:31.183", "Body": "<p>Documentation for <a href=\"http://docs.python.org/library/functions.html#dir\" rel=\"nofollow\">dir</a> says: </p>\n<blockquote>\n<p id=\"so_5792508_5804005_0\">If the object is a type or class object, the list contains the names of its attributes, and recursively of the attributes of its bases.</p>\n</blockquote>\n<p>In your example, your class member are exported as instance attributes and not class attributes which is what you want when exporting non static class member. This is why you need to instantiate the class in python in order for dir to return the attributes because the attributes do not exist until the <strong>init</strong> method is called.</p>\n<p>When declaring class attributes, they will show when calling dir on type because class attributes right after class definition:</p>\n<pre><code>Python 2.7.1 (r271:86832, Nov 27 2010, 18:30:46) [MSC v.1500 32 bit (Intel)] on\nwin32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; class Foo(object):\n...     name = \"blah\"\n...     def __init__(self):\n...         self.second_name = \"blah2\"\n...\n&gt;&gt;&gt; dir(Foo)\n['__class__', '__delattr__', '__dict__', '__doc__', '__format__', '__getattribut\ne__', '__hash__', '__init__', '__module__', '__new__', '__reduce__', '__reduce_e\nx__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '_\n_weakref__', 'name']\n&gt;&gt;&gt; f = Foo()\n&gt;&gt;&gt; f\n&gt;&gt;&gt; dir(f)\n['__class__', '__delattr__', '__dict__', '__doc__', '__format__', '__getattribut\ne__', '__hash__', '__init__', '__module__', '__new__', '__reduce__', '__reduce_e\nx__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '_\n_weakref__', 'name', 'second_name']\n</code></pre>\n", "PostTypeId": "2", "CommentCount": "0"}, "5792508": {"Tags": "<c++><python><class><boost><member>", "ViewCount": "754", "LastEditDate": "2011-04-26T16:06:54.353", "CreationDate": "2011-04-26T15:18:12.987", "LastEditorUserId": "725650", "Title": "In boost.python; how do I expose a class that is contained in another class (via composition)?", "CommentCount": "0", "AcceptedAnswerId": "5804005", "Score": "2", "OwnerUserId": "725650", "Id": "5792508", "LastActivityDate": "2011-04-27T12:21:31.183", "Body": "<p>I'd like to do something really simple with boost::python. I can find documentation for class member functions, and documention for inherited classes (bleurch) but nowhere can I find the syntax for exposing class hierarchies created via composition.</p>\n<p>So I have some C++ code that goes something like this:</p>\n<pre><code>struct A{\n    double x,y;\n};\n\nstruct B{\n    A foo;\n    double z;\n};\n</code></pre>\n<p>And I want to expose both classes so that in python I can write something like:</p>\n<pre><code>spam = A()\nspam.x=1\nspam.y=2\n\neggs = B()\neggs.foo=spam\neggs.z = 33\nPrint eggs.foo.y\n</code></pre>\n<p>Surely that's possible? But I can't figure it out. </p>\n<p>Many thanks!</p>\n<p>EDIT: </p>\n<p>False alarm... it's done automatically; if you use the following export code to export each individually:</p>\n<pre><code>class_&lt;A&gt;(\"A\")\n   .def_readwrite(\"x\",&amp;A::x)\n   .def_readwrite(\"y\",&amp;A::y)\n;\n\nclass_&lt;B&gt;(\"B\")\n  .def_readwrite(\"z\",&amp;B::z)\n  .def_readwrite(\"foo\",&amp;B::foo)\n;\n</code></pre>\n<p>What threw me is that you have to instantiate the class under python before the full list of submethods becomes visible with dir() i.e, the following produce different results, and you must use the second type to get a full member listing:</p>\n<pre><code>dir(B.foo)\ndir(B().foo) \n</code></pre>\n<p>Evidently some python technicalities going on here which I don't yet understand... any further clarification welcome.</p>\n", "PostTypeId": "1", "AnswerCount": "1"}, "bq_ids": {"n4659": {"so_5792508_5804005_0": {"length": 7, "section_id": 7225, "quality": 0.5384615384615384}}}});