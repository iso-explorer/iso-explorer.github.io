post_cb({"2668075": {"ViewCount": "4117", "Body": "<p>Let's say I have the following code:</p>\n<pre><code>struct mytype\n{\n    ~mytype() { /* do something like call Mix_CloseAudio etc */ }\n};\n\nint main()\n{\n    mytype instant;\n\n    init_stuff();\n\n    start();\n\n    return 0;\n}\n</code></pre>\n<p>Is that destructor guaranteed to be called even if exit() is used from somewhere inside start() ?</p>\n", "AcceptedAnswerId": "2668098", "Title": "Will exit() or an exception prevent an end-of-scope destructor from being called?", "CreationDate": "2010-04-19T14:17:09.863", "Id": "2668075", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2014-01-10T00:23:51.207", "Score": "15", "OwnerUserId": "307930", "Tags": "<c++><destructor><exit>", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_2668075_2668101_0": {"length": 17, "quality": 0.5862068965517241, "section_id": 7148}, "so_2668075_2668098_1": {"length": 17, "quality": 0.68, "section_id": 7148}}, "n3337": {"so_2668075_2668101_0": {"length": 17, "quality": 0.5862068965517241, "section_id": 6892}, "so_2668075_2668098_1": {"length": 17, "quality": 0.68, "section_id": 6892}}, "n4659": {"so_2668075_2668101_0": {"length": 17, "quality": 0.5862068965517241, "section_id": 8649}, "so_2668075_2668098_1": {"length": 17, "quality": 0.68, "section_id": 8649}}}, "2668142": {"Id": "2668142", "PostTypeId": "2", "Body": "<p>Exceptions will call destructors, so long as something in the program catches the exception. If the exception exits the main() function without being caught, the standard does not require the runtime to unwind the stack to clean up.</p>\n<p>Using a</p>\n<pre><code>try{\n  // code\n}catch(...){ //that elipsis should actually appear in your code\n             //it doesn't mean I omitted code here.\n  //code\n}\n</code></pre>\n<p>in your <code>main()</code> function will guarantee that every exception is caught, and all destructors are called.</p>\n", "LastEditorUserId": "1771704", "LastActivityDate": "2014-01-10T00:23:51.207", "Score": "2", "CreationDate": "2010-04-19T14:24:14.503", "ParentId": "2668075", "CommentCount": "0", "OwnerUserId": "197788", "LastEditDate": "2014-01-10T00:23:51.207"}, "2668098": {"Id": "2668098", "PostTypeId": "2", "Body": "<p>If you call <code>exit</code>, the destructor will not be called.</p>\n<p>From the C++ standard (\u00a73.6.1/4):</p>\n<blockquote>\n<p id=\"so_2668075_2668098_0\">Calling the function</p>\n</blockquote>\n<pre><code>void exit(int);\n</code></pre>\n<blockquote>\n<p id=\"so_2668075_2668098_1\">declared in <code>&lt;cstdlib&gt;</code> (18.3) terminates the program without leaving the current block and hence without destroying any objects with automatic storage duration (12.4). If exit is called to end a program during the destruction of an object with static storage duration, the program has undefined behavior.</p>\n</blockquote>\n", "LastActivityDate": "2010-04-19T14:20:12.587", "CommentCount": "0", "CreationDate": "2010-04-19T14:20:12.587", "ParentId": "2668075", "Score": "19", "OwnerUserId": "151292"}, "2668101": {"Id": "2668101", "PostTypeId": "2", "Body": "<p>Yes, calling exit() means the destructor will not be called:</p>\n<blockquote>\n<p id=\"so_2668075_2668101_0\">Calling the function void exit(int);\n  declared in <code>&lt;cstdlib&gt;</code> (18.3)\n  terminates the program without leaving\n  the current block and hence without\n  destroying any objects with automatic\n  storage duration (12.4). If exit is\n  called to end a program during the\n  destruction of an object with static\n  storage duration, the program has\n  undefined behavior.</p>\n</blockquote>\n<p>If an exception is thrown, on the other hand, the destructor will be called. This is the basis of exception safety in C++.</p>\n", "OwnerDisplayName": "anon", "LastEditorUserId": "265143", "LastActivityDate": "2010-04-19T14:23:22.890", "Score": "15", "CreationDate": "2010-04-19T14:20:18.397", "ParentId": "2668075", "CommentCount": "0", "LastEditDate": "2010-04-19T14:23:22.890"}});