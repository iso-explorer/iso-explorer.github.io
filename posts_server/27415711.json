post_cb({"bq_ids": {"n4140": {"so_27415711_27415938_6": {"length": 8, "quality": 1.0, "section_id": 7055}, "so_27415711_27415938_3": {"length": 7, "quality": 1.0, "section_id": 7055}, "so_27415711_27415938_0": {"length": 7, "quality": 0.7777777777777778, "section_id": 7055}}, "n3337": {"so_27415711_27415938_3": {"length": 7, "quality": 1.0, "section_id": 6799}, "so_27415711_27415938_6": {"length": 8, "quality": 1.0, "section_id": 6799}, "so_27415711_27415938_0": {"length": 7, "quality": 0.7777777777777778, "section_id": 6799}}, "n4659": {"so_27415711_27415938_3": {"length": 7, "quality": 1.0, "section_id": 8552}, "so_27415711_27415938_6": {"length": 8, "quality": 1.0, "section_id": 8552}, "so_27415711_27415938_0": {"length": 7, "quality": 0.7777777777777778, "section_id": 8552}}}, "27415885": {"Id": "27415885", "PostTypeId": "2", "Body": "<p>Example in action:  <a href=\"http://ideone.com/OxaJVj\" rel=\"nofollow\">http://ideone.com/OxaJVj</a></p>\n<p>You're forward declaring the struct at the same time as assigning it to a typedef.  I do not know if this is kosher and I would have to check the standard.  But simply separating these two steps makes it work:</p>\n<pre><code>typedef  struct _tree_branch_m *Tree_m;\n</code></pre>\n<p>to</p>\n<pre><code>struct _tree_branch_m;\ntypedef _tree_branch_m *Tree_m;\n</code></pre>\n<p>That being said, I would recommend against using leading underscores, because even though you're technically not in violation of the standard, if you were to capitalize the T or put a second _ or move it to the global namespace you'd be in violation of reserved names.</p>\n", "LastActivityDate": "2014-12-11T05:22:01.530", "CommentCount": "1", "CreationDate": "2014-12-11T05:22:01.530", "ParentId": "27415711", "Score": "2", "OwnerUserId": "483486"}, "27415938": {"Id": "27415938", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_27415711_27415938_0\"><strong>3.3.2/6</strong> The point of declaration of a class first declared in an <em>elaborated-type-specifier</em> is as follows:</p>\n<p id=\"so_27415711_27415938_1\">\u2014 for a declaration of the form</p>\n<p id=\"so_27415711_27415938_2\"><em>class-key attribute-specifier-seq_opt identifier;</em></p>\n<p id=\"so_27415711_27415938_3\">the identifier is declared to be a <em>class-name</em> in the scope that\n  contains the declaration, otherwise</p>\n<p id=\"so_27415711_27415938_4\">\u2014 for an <em>elaborated-type-specifier</em> of the form</p>\n<p id=\"so_27415711_27415938_5\"><em>class-key identifier</em></p>\n<p id=\"so_27415711_27415938_6\">... the identifier is declared in the smallest namespace or block\n  scope that contains the declaration.</p>\n</blockquote>\n<p>When you write <code>typedef  struct _tree_branch_m *Tree_m;</code>, <code>struct _tree_branch_m</code> forward-declares a name in the global scope, <code>::_tree_branch_m</code>. <code>Tree_m</code> is not in any way related to <code>CascadeClassifier::_tree_branch_m</code>.</p>\n<p>You need to explicitly forward-declare the member struct:</p>\n<pre><code>class CascadeClassifier{\n    struct _tree_branch_m;  // forward delcaration\n    typedef _tree_branch_m *Tree_m;\n    struct _tree_branch_m {...};\n};\n</code></pre>\n", "LastActivityDate": "2014-12-11T05:26:44.450", "CommentCount": "1", "CreationDate": "2014-12-11T05:26:44.450", "ParentId": "27415711", "Score": "3", "OwnerUserId": "1670129"}, "27415711": {"ViewCount": "599", "Body": "<p>I have a class. Class has a structure <code>_tree_branch_m</code> and a class member function. That structure is a parameter of the member function. Inside the member function, I have an error to access structure members. What is wrong with my structure? The error is <code>Field 'NodeType'</code> could not be resolved.</p>\n<pre><code>class CascadeClassifier{\n\n\nprotected:\n    typedef  char   *Set_m;\n    typedef  struct _tree_branch_m *Tree_m;\n    struct _tree_branch_m\n    {\n            short   NodeType;   /* 0=leaf 1=branch 2=cut 3=subset */\n            short   Leaf;       /* most frequent class at this node */\n            float   Items,      /* no of items at this node */\n                    *ClassDist, /* class distribution of items */\n                    Errors;     /* no of errors at this node */\n            short   Tested;     /* attribute referenced in test */\n            short   Forks;      /* number of branches at this node */\n            float   Cut,        /* threshold for continuous attribute */\n                    Lower,      /* lower limit of soft threshold */\n                    Upper;      /* upper limit ditto */\n            Set_m   *Subset;    /* subsets of discrete values  */\n            Tree_m  *Branch;    /* Branch[x] = (sub)tree for outcome x */\n    };\n\n    virtual void ClassifyCase(Tree_m subtree, float Weight, float *LowClassSum, float *ClassSum);\n\n};\n\nvoid CascadeClassifier::ClassifyCase(Tree_m Subtree, float Weight, float *LowClassSum, float *ClassSum)\n{\n     if ( ! Subtree-&gt;NodeType )//error\n     {\n\n     }\n\n}\n</code></pre>\n", "AcceptedAnswerId": "27415885", "Title": "Can't access Struct member inside a class", "CreationDate": "2014-12-11T05:05:52.030", "Id": "27415711", "CommentCount": "7", "LastEditDate": "2014-12-11T05:14:30.097", "PostTypeId": "1", "LastEditorUserId": "2467772", "LastActivityDate": "2014-12-11T05:26:44.450", "Score": "0", "OwnerUserId": "2467772", "Tags": "<c++><class><struct>", "AnswerCount": "2"}});