post_cb({"44523336": {"ViewCount": "64", "Body": "<p>Consider following Code</p>\n<pre><code>struct virtualfoo \n{\n    virtualfoo{};\n    virtual ~virtualfoo{};\n\n    virtual double doStuff() = 0\n};\n\n\nstruct realbar :  virtualfoo   \n{\n     realbar{};\n     virtual ~realbar{};\n\n     virtual double doStuff();\n};\n</code></pre>\n<p>Since I want to implement doStuff() for realbar, virtual isn't mandatory. But if I get this right, it won't hurt to have the virtual specifier next to realbar::doStuff(), does it?\nWhat side effects could I get with using/not using virtual?</p>\n", "AcceptedAnswerId": "44523474", "Title": "Adding virtual specifier in a derived class", "CreationDate": "2017-06-13T13:43:45.030", "Id": "44523336", "CommentCount": "2", "LastEditDate": "2017-06-14T08:58:35.787", "PostTypeId": "1", "LastEditorUserId": "5185306", "LastActivityDate": "2017-06-14T08:58:35.787", "Score": "2", "OwnerUserId": "5185306", "Tags": "<c++><class><inheritance><virtual>", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_44523336_44523420_1": {"length": 30, "quality": 0.9090909090909091, "section_id": 7003}}, "n3337": {"so_44523336_44523420_1": {"length": 30, "quality": 0.9090909090909091, "section_id": 6749}}, "n4659": {"so_44523336_44523420_1": {"length": 30, "quality": 0.9090909090909091, "section_id": 8500}}}, "44523474": {"Id": "44523474", "PostTypeId": "2", "Body": "<p>The virtual keyword is not necessary in the derived class. However it makes code clearer. Also in <em>C++11</em> <code>override</code> keyword is introduced which allows the source code to clearly specify that a member function is <em>intended</em> to override a base class method.</p>\n<p>With keyword <code>override</code> the compiler will check the base class(es) to see if there is a virtual function with this exact signature. And if there is not, the compiler will throws an error.</p>\n", "LastEditorUserId": "1870232", "LastActivityDate": "2017-06-13T13:53:28.847", "Score": "8", "CreationDate": "2017-06-13T13:48:54.927", "ParentId": "44523336", "CommentCount": "3", "OwnerUserId": "1870232", "LastEditDate": "2017-06-13T13:53:28.847"}, "44523420": {"Id": "44523420", "PostTypeId": "2", "Body": "<p>It doesn't matter whether you explicitly declare <code>realbar::doStuff</code> as virtual, since it is implicitly <code>virtual</code> due to <code>virtualfoo:doStuff</code> being virtual. So no side effects; <code>realbar::doStuff</code> will be virtual anyway. Confer, for example, this <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4296.pdf\" rel=\"nofollow noreferrer\">online C++ draft standard</a>:</p>\n<blockquote>\n<p id=\"so_44523336_44523420_0\">10.3 Virtual functions</p>\n<p id=\"so_44523336_44523420_1\">(2) If a virtual member function vf is declared in a class Base and in\n  a class Derived, derived directly or indirectly from Base, a member\n  function vf with the same name, parameter-type-list (8.3.5),\n  cv-qualification, and ref- qualifier (or absence of same) as Base::vf\n  is declared, then Derived::vf is also virtual (whether or not it is so\n  declared) and it overrides Base::vf. ...</p>\n</blockquote>\n", "LastEditorUserId": "2630032", "LastActivityDate": "2017-06-13T13:54:15.937", "Score": "0", "CreationDate": "2017-06-13T13:46:43.987", "ParentId": "44523336", "CommentCount": "0", "OwnerUserId": "2630032", "LastEditDate": "2017-06-13T13:54:15.937"}});