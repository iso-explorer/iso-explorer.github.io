post_cb({"31449668": {"ParentId": "31448845", "CommentCount": "0", "Body": "<p>Not all lvalue expressions have names. In fact, the wording in N4296 gives us some examples:</p>\n<blockquote>\n<p id=\"so_31448845_31449668_0\">For a non-type template-parameter of reference or pointer type, the\n  value of the constant expression shall not refer to (or for a pointer\n  type, shall not be the address of):</p>\n<ul>\n<li>a subobject (1.8),</li>\n<li>a temporary object (12.2),</li>\n<li>a string literal (2.14.5),</li>\n<li>the result of a typeid expression (5.2.8), or</li>\n<li>a predefined <strong>func</strong> variable (8.4.1).</li>\n</ul>\n</blockquote>\n<p>Furthermore, <a href=\"http://en.cppreference.com/w/cpp/language/value_category\" rel=\"nofollow\">cppreference</a>'s information on value categories goes into detail about lvalues:</p>\n<blockquote>\n<p id=\"so_31448845_31449668_1\">An lvalue is an expression that identifies a non-temporary object or a\n  non-member function.</p>\n<p id=\"so_31448845_31449668_2\">The following expressions are lvalues:</p>\n<ul>\n<li><p id=\"so_31448845_31449668_3\">The name of a variable or function in scope, regardless of type, such as std::cin or std::endl. Even if the variable's type is rvalue\n  reference, the expression consisting of its name is an lvalue\n  expression.</p></li>\n<li><p id=\"so_31448845_31449668_4\">Function call or overloaded operator expression if the function's or overloaded operator's return type is an lvalue reference, such as\n  std::getline(std::cin, str) or std::cout &lt;&lt; 1 or str1 = str2 or ++iter</p></li>\n<li><p id=\"so_31448845_31449668_5\">Built-in pre-increment and pre-decrement, dereference, assignment and compound assignment, subscript (except on an array xvalue), member\n  access (except for non-static non-reference members of xvalues, member\n  enumerators, and non-static member functions), member access through\n  pointer to data member if the left-hand operand is lvalue, comma\n  operator if the right-hand operand is lvalue, ternary conditional if\n  the second and third operands are lvalues.</p></li>\n<li><p id=\"so_31448845_31449668_6\">Cast expression to lvalue reference type.</p></li>\n<li><p id=\"so_31448845_31449668_7\">String literal</p></li>\n</ul>\n</blockquote>\n<p>However, this is all irrelevant as the scope of the change is the proposal <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4268.html\" rel=\"nofollow\">Allow constant evaluation for all non-type template arguments</a>.</p>\n", "OwnerUserId": "5122689", "PostTypeId": "2", "Id": "31449668", "Score": "4", "CreationDate": "2015-07-16T08:54:53.470", "LastActivityDate": "2015-07-16T08:54:53.470"}, "bq_ids": {"n4140": {"so_31448845_31449668_1": {"section_id": 5988, "quality": 0.5714285714285714, "length": 4}, "so_31448845_31449668_6": {"section_id": 91, "quality": 0.8, "length": 4}, "so_31448845_31448845_0": {"section_id": 90, "quality": 0.7647058823529411, "length": 13}, "so_31448845_31449668_0": {"section_id": 95, "quality": 0.5384615384615384, "length": 7}}, "n3337": {"so_31448845_31449668_1": {"section_id": 5756, "quality": 0.5714285714285714, "length": 4}, "so_31448845_31449668_6": {"section_id": 2, "quality": 0.8, "length": 4}, "so_31448845_31448845_0": {"section_id": 85, "quality": 0.7647058823529411, "length": 13}, "so_31448845_31449668_0": {"section_id": 86, "quality": 0.5384615384615384, "length": 7}}, "n4659": {"so_31448845_31449668_1": {"section_id": 7488, "quality": 0.5714285714285714, "length": 4}, "so_31448845_31449668_0": {"section_id": 90, "quality": 0.9230769230769231, "length": 12}, "so_31448845_31449668_6": {"section_id": 620, "quality": 0.8, "length": 4}}}, "31448845": {"CommentCount": "3", "ViewCount": "155", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2015-07-16T08:16:16.717", "LastActivityDate": "2015-07-16T08:54:53.470", "Title": "What is an unnamed lvalue?", "AcceptedAnswerId": "31449668", "LastEditDate": "2017-05-23T12:21:43.417", "Id": "31448845", "Score": "5", "Body": "<p>I have seen in the draft <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4268.html\" rel=\"nofollow noreferrer\">N4268</a> a concept called \"unnamed lvalue\" in the striked-though part below  </p>\n<blockquote>\n<p id=\"so_31448845_31448845_0\">[ Note: <s> Temporaries, unnamed lvalues, and named lvalues with no linkage are</s> A temporary object is not an acceptable template-arguments when the corresponding template-parameter has reference type. [ Example: ... ] ] </p>\n</blockquote>\n<p>I have searched a lot but neither stackoverflow nor google gave me an answer.\nI only found this post about value categories</p>\n<p><a href=\"https://stackoverflow.com/a/3601661/5076707\">What are rvalues, lvalues, xvalues, glvalues, and prvalues</a></p>\n<p>But it didn't help.</p>\n", "Tags": "<c++><lvalue>", "OwnerUserId": "5076707", "AnswerCount": "1"}});