post_cb({"bq_ids": {"n4140": {"so_7754532_7754656_0": {"length": 37, "quality": 0.9487179487179487, "section_id": 6107}}, "n3337": {"so_7754532_7754656_0": {"length": 37, "quality": 0.9487179487179487, "section_id": 5873}}, "n4659": {"so_7754532_7754656_0": {"length": 37, "quality": 0.9487179487179487, "section_id": 7604}}}, "7754656": {"Id": "7754656", "PostTypeId": "2", "Body": "<pre><code>Base *bq = new Der[5];\ndelete [] bq;   // this causes runtime error\n</code></pre>\n<p>The reason is arrays are not treated <em>polymorphically</em>. Therefore, in the above code, the <code>delete</code> statement invokes <strong>undefined behaviour</strong>. </p>\n<p>\u00a75.3.5/3 C++03 says</p>\n<blockquote>\n<p id=\"so_7754532_7754656_0\">In the first alternative (delete object), if the static type of the operand is different from its dynamic type, the static type shall be a base class of the operand\u2019s dynamic type and the static type shall have a virtual destructor or the behavior is undefined. <strong>In the second alternative (<em>delete array</em>) if the dynamic type of the object to be deleted differs from its static type, the behavior is undefined.</strong></p>\n</blockquote>\n<p>You're lucky that it gives runtime-error, and you got the opportunity to know a serious bug in your code, as soon as possible.</p>\n", "LastEditorUserId": "415784", "LastActivityDate": "2011-10-13T13:20:37.917", "Score": "9", "CreationDate": "2011-10-13T13:12:46.263", "ParentId": "7754532", "CommentCount": "1", "OwnerUserId": "415784", "LastEditDate": "2011-10-13T13:20:37.917"}, "7754532": {"ViewCount": "452", "Body": "<p>I found this code on a <a href=\"http://aszt.inf.elte.hu/~gsd/halado_cpp/ch05s04.html\" rel=\"noreferrer\">web site</a></p>\n<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nstruct Base\n{\n    Base() { cout &lt;&lt; \"Base\" &lt;&lt; \" \"; }\n    virtual ~Base() { cout &lt;&lt; \"~Base\" &lt;&lt; endl; }\n\n    int i;\n};\nstruct Der : public Base\n{\n    Der() { cout &lt;&lt; \"Der\" &lt;&lt; endl; }\n    virtual ~Der() { cout &lt;&lt; \"~Der\" &lt;&lt; \" \"; }\n\n    int it[10]; // sizeof(Base) != sizeof(Der)\n};\n\nint main()\n{\n    Base *bp = new Der;\n    Base *bq = new Der[5];\n\n    delete    bp;\n    delete [] bq;   // this causes runtime error\n}\n</code></pre>\n<p>why does it <a href=\"http://codepad.org/gaW1v1Aq\" rel=\"noreferrer\">crash</a>?</p>\n", "AcceptedAnswerId": "7754656", "Title": "virtual destructor fail using array", "CreationDate": "2011-10-13T13:00:45.833", "Id": "7754532", "CommentCount": "5", "FavoriteCount": "3", "PostTypeId": "1", "LastActivityDate": "2011-10-13T13:42:48.653", "Score": "5", "OwnerUserId": "238671", "Tags": "<c++><polymorphism><segmentation-fault><new-operator><virtual-destructor>", "AnswerCount": "1"}});