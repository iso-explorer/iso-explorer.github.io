post_cb({"bq_ids": {"n4140": {"so_14607226_14607320_0": {"length": 18, "quality": 0.9473684210526315, "section_id": 6700}, "so_14607226_14607402_1": {"length": 9, "quality": 1.0, "section_id": 6700}}, "n3337": {"so_14607226_14607320_0": {"length": 18, "quality": 0.9473684210526315, "section_id": 6455}, "so_14607226_14607402_1": {"length": 9, "quality": 1.0, "section_id": 6455}}, "n4659": {"so_14607226_14607320_0": {"length": 18, "quality": 0.9473684210526315, "section_id": 8174}, "so_14607226_14607402_1": {"length": 9, "quality": 1.0, "section_id": 8174}}}, "14607320": {"Id": "14607320", "PostTypeId": "2", "Body": "<p>From section 11.7 of the standard:</p>\n<blockquote>\n<p id=\"so_14607226_14607320_0\">1 - A nested class is a member and as such has the same access rights as any other member. The members of an enclosing class have no special access to members of a nested class [...]</p>\n</blockquote>\n<p>So a nested (\"inner\") class is effectively a friend of the enclosing class.</p>\n", "LastActivityDate": "2013-01-30T15:17:02.507", "CommentCount": "4", "CreationDate": "2013-01-30T15:17:02.507", "ParentId": "14607226", "Score": "3", "OwnerUserId": "567292"}, "14607592": {"Id": "14607592", "PostTypeId": "2", "Body": "<p>You had answered your question by yourself: </p>\n<blockquote>\n<p id=\"so_14607226_14607592_0\">You can see that the Inner class which is nested in the Outer class has access to its(the Outer class) data members whilst the Lonesome as independent class cannot access the Outer class data member.</p>\n</blockquote>\n<p>Pay attention to contrarily to Java in C++ you can not acces to non-static members of <code>Outer</code> class.</p>\n<p>It's an often practice to give a reference to <code>Outer</code> class to <code>Inner</code> class.</p>\n<pre><code>class Outer {\n    private : // default access modifier\n    int x;\n    static int sx;\npublic:\n    class Inner {\n    public:\n        Inner( Outer &amp; o ) : m_outer( o ) {}\n        void changeOuterDataMemberValues(int value) {\n            sx = value; // changes the private static data member of Outer.\n\n            //Outer out;\n            //out.x = value; // changes the private data member via object (not via class!)\n            m_outer.x = value; // &lt;---------\n        }\n        void printMyOuterDataMember()  {\n            cout &lt;&lt; sx; // prints the private data member of Outer.\n            cout &lt;&lt; m_outer.x;\n        }\n    private:\n        Outer &amp; m_outer;\n    };\n};\n</code></pre>\n", "LastActivityDate": "2013-01-30T15:29:32.687", "CommentCount": "1", "CreationDate": "2013-01-30T15:29:32.687", "ParentId": "14607226", "Score": "2", "OwnerUserId": "667266"}, "14607226": {"ViewCount": "4631", "Body": "<p>I read some posts about <strong>Nested Classes</strong> in our community and outside and I'm pretty confused.</p>\n<p>As far as I understand, in <strong>C++, Nested Classes</strong> aren't not any different from separate/independent classes.</p>\n<p>While I was trying to understand the conecpt better I wrote a simple code and I found out that an inner class can access an outer class without being given friendship from the outer class.</p>\n<p><em><strong>For example:</strong></em></p>\n<pre><code>class Outer {\nprivate : // default access modifier\n    int x;\n    static int sx;\npublic:\n    class Inner {\n    public:\n        void changeOuterDataMemberValues(int value) {\n            sx = value; // changes the private static data member of Outer.\n\n            Outer out;\n            out.x = value; // changes the private data member via object (not via class!)\n        }\n        void printMyOuterDataMember()  {\n            cout &lt;&lt; sx; // prints the private data member of Outer.\n        }\n    };\n};\n\n\nclass Lonesome {\n    void tryingToChangeDataMemberValue(int value) {\n        Outer::sx = value; // cannot change the private static data member of Outer.\n    }\n};\n\nint Outer::sx;\n</code></pre>\n<p>You can see that the Inner class which is nested in the Outer class has access to its(the Outer class) data members whilst the Lonesome as independent class cannot access the Outer class data member.</p>\n<p>I apologize if this is a duplicate or stupid question, but I just want to confirm with you guys that there is a difference between a <strong>Nested Class</strong> and independent class (two different classes which don't have inner / outer relationship).</p>\n<p>Thank you all,\nSyndicator =]</p>\n", "AcceptedAnswerId": "14607402", "Title": "C++ nested classes - inner/outer relationship", "CreationDate": "2013-01-30T15:12:14.487", "Id": "14607226", "CommentCount": "3", "FavoriteCount": "2", "PostTypeId": "1", "LastActivityDate": "2013-01-30T15:29:32.687", "Score": "8", "OwnerUserId": "1779053", "Tags": "<c++>", "AnswerCount": "3"}, "14607402": {"Id": "14607402", "PostTypeId": "2", "Body": "<p>There is a difference between C++03 and C++11 in this regards. So the answer varies depending on which compiler you are using.     </p>\n<p>If you are using a C++03 compliant compiler then:     </p>\n<p><em><strong>Nested class cannot access all members of the enclosing class.</strong></em></p>\n<p>If you are using C++11 compliant compiler then:    </p>\n<p><em><strong>Nested class can access all members of the enclosing class. Nested class is treated as just another member of the class.</strong></em></p>\n<p><strong>C++03 Standard 11.8 Nested classes:</strong><br>\n\u00a71</br></p>\n<blockquote>\n<p id=\"so_14607226_14607402_0\">The members of a nested class have no special access to members of an enclosing class, nor to classes or functions that have granted friendship to an enclosing class; the usual access rules shall be obeyed.</p>\n</blockquote>\n<p><strong>C++11 Standard 11.7 Nested Classes:</strong> </p>\n<blockquote>\n<p id=\"so_14607226_14607402_1\">A nested class is a member and as such has the same access rights as any other member.</p>\n</blockquote>\n", "LastActivityDate": "2013-01-30T15:20:34.507", "CommentCount": "6", "CreationDate": "2013-01-30T15:20:34.507", "ParentId": "14607226", "Score": "20", "OwnerUserId": "452307"}});