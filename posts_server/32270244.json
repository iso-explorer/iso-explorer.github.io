post_cb({"bq_ids": {"n4140": {"so_32270244_32270723_1": {"length": 12, "quality": 0.8, "section_id": 599}, "so_32270244_32270347_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 3296}, "so_32270244_32270347_1": {"length": 30, "quality": 0.8571428571428571, "section_id": 3324}, "so_32270244_32270723_0": {"length": 6, "quality": 0.75, "section_id": 3325}, "so_32270244_32270347_3": {"length": 13, "quality": 0.9285714285714286, "section_id": 599}, "so_32270244_32270347_4": {"length": 21, "quality": 0.875, "section_id": 3325}, "so_32270244_32270347_2": {"length": 12, "quality": 0.5714285714285714, "section_id": 599}, "so_32270244_32270723_2": {"length": 33, "quality": 0.9166666666666666, "section_id": 5776}}, "n3337": {"so_32270244_32270723_1": {"length": 12, "quality": 0.8, "section_id": 589}, "so_32270244_32270347_2": {"length": 12, "quality": 0.5714285714285714, "section_id": 589}, "so_32270244_32270723_0": {"length": 6, "quality": 0.75, "section_id": 3195}, "so_32270244_32270347_1": {"length": 30, "quality": 0.8571428571428571, "section_id": 3194}, "so_32270244_32270347_3": {"length": 13, "quality": 0.9285714285714286, "section_id": 589}, "so_32270244_32270347_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 3166}, "so_32270244_32270347_4": {"length": 21, "quality": 0.875, "section_id": 3195}, "so_32270244_32270723_2": {"length": 33, "quality": 0.9166666666666666, "section_id": 5549}}, "n4659": {"so_32270244_32270723_1": {"length": 12, "quality": 0.8, "section_id": 622}, "so_32270244_32270347_2": {"length": 20, "quality": 0.9523809523809523, "section_id": 622}, "so_32270244_32270723_0": {"length": 6, "quality": 0.75, "section_id": 4091}, "so_32270244_32270347_1": {"length": 29, "quality": 0.8285714285714286, "section_id": 4090}, "so_32270244_32270347_3": {"length": 13, "quality": 0.9285714285714286, "section_id": 622}, "so_32270244_32270347_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 4058}, "so_32270244_32270347_4": {"length": 21, "quality": 0.875, "section_id": 4091}, "so_32270244_32270723_2": {"length": 33, "quality": 0.9166666666666666, "section_id": 7233}}}, "32270723": {"Id": "32270723", "PostTypeId": "2", "Body": "<p><code>std::string</code> has constructors declared as:</p>\n<pre><code>string::string(std::initializer_list&lt;char&gt;);\nstring::string(std::size_t, char);\n</code></pre>\n<p>When we have list-initialization, the following rule applies:</p>\n<blockquote>\n<p id=\"so_32270244_32270723_0\"><code>(N3337 [dcl.init.list]/3):</code> List-initialization of an object or reference of type T is defined as follows:</p>\n<ul>\n<li>[...]</li>\n<li>Otherwise, if T is a class type, constructors are considered. <strong>The applicable constructors are enumerated\n  and the best one is chosen through overload resolution (13.3, 13.3.1.7). If a narrowing conversion (see\n  below) is required to convert any of the arguments, the program is ill-formed.</strong></li>\n</ul>\n</blockquote>\n<p>The initializer-list constructor is selected due to this rule:</p>\n<blockquote>\n<p id=\"so_32270244_32270723_1\"><code>(N3337 [over.match.list]/1):</code> \n  When objects of non-aggregate class type T are list-initialized (8.5.4), overload resolution selects the constructor in two phases:</p>\n<ul>\n<li><strong>Initially, the candidate functions are the initializer-list constructors (8.5.4) of the class T and the\n  argument list consists of the initializer list as a single argument.</strong></li>\n<li>[...]</li>\n</ul>\n</blockquote>\n<p>Now since the initializer-list constructor is the best choice, but a narrowing conversion is required to convert the argument, the program is ill formed.</p>\n<p>However, I don't think that makes one compiler correct and one incorrect:</p>\n<blockquote>\n<p id=\"so_32270244_32270723_2\"><code>(N3337 [intro.compliance]/8):</code> A conforming implementation may have extensions (including additional library functions), provided they do\n  not alter the behavior of any well-formed program. <strong>Implementations are required to diagnose programs that\n  use such extensions that are ill-formed according to this International Standard. Having done so, however,\n  they can compile and execute such programs.</strong></p>\n</blockquote>\n<p>The standard has no concept of a warning vs. an error, so GCC is conformant in issuing a warning diagnostic, then going on to compile the program anyway. Note that GCC <em>will</em> issue an error if you pass <code>-pedantic-errors</code>.</p>\n", "LastEditorUserId": "496161", "LastActivityDate": "2015-08-28T12:58:50.987", "Score": "6", "CreationDate": "2015-08-28T12:08:24.237", "ParentId": "32270244", "CommentCount": "1", "LastEditDate": "2015-08-28T12:58:50.987", "OwnerUserId": "496161"}, "32270244": {"ViewCount": "374", "Body": "<p>I recently read cool article:\n<a href=\"https://akrzemi1.wordpress.com/2015/08/20/can-you-see-the-bug/\" rel=\"nofollow\">https://akrzemi1.wordpress.com/2015/08/20/can-you-see-the-bug/</a>\nPlaying with reduced version on ideone I got surprising behaviour:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;cassert&gt;\nusing namespace std;\nint main() {\n    const size_t sz=258;\n    string s{sz,'#'};\n    assert(2==s.size());\n}\n</code></pre>\n<p>does not compile, but\nsame program with const removed compiles:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;cassert&gt;\nusing namespace std;\nint main() {\n    size_t sz=258;\n    string s{sz,'#'};\n    assert(2==s.size());\n}\n</code></pre>\n<p>So my question is this standard required or just compilers decided that one is a compiler warning and other is an compiler error.</p>\n<p>If it helps here are the errors and warnings from  gcc 5.1 (tnx godbolt) </p>\n<blockquote>\n<p id=\"so_32270244_32270244_0\">!!error: narrowing conversion of '258ul' from 'size_t {aka long\n  unsigned int}' to 'char' inside { }</p>\n</blockquote>\n<hr>\n<blockquote>\n<p id=\"so_32270244_32270244_1\">!!warning: narrowing conversion of 'sz' from 'size_t {aka long\n  unsigned int}' to 'char' inside { } [-Wnarrowing]</p>\n</blockquote>\n<p>good guy clang 3.6 gives error in both cases, but the question remains, is one legal and bad C++ and other illegal C++?</p>\n</hr>", "AcceptedAnswerId": "32270723", "Title": "Is it standard behaviour that adding const to size_t can cause compile failure?", "CreationDate": "2015-08-28T11:40:25.930", "Id": "32270244", "CommentCount": "2", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2015-08-28T12:26:36.050", "LastEditorUserId": "15416", "LastActivityDate": "2015-08-28T12:58:50.987", "Score": "6", "OwnerUserId": "700825", "Tags": "<c++><c++11><gcc><clang><language-lawyer>", "AnswerCount": "3"}, "32270438": {"Id": "32270438", "PostTypeId": "2", "Body": "<p>The problem is the <code>std::string</code> has an initializer lists constructor and it is greedy.  <code>{sz,'#'}</code> is being treaated as an initializer list and you are getting a narrowing conversion warning as it is converting <code>sz</code> to a char type to make an <code>std::initializer_list&lt;char&gt;</code>.  You can fixe this by calling the constrcutor with <code>()</code> instead of <code>{}</code></p>\n", "LastActivityDate": "2015-08-28T11:53:19.800", "Score": "3", "CreationDate": "2015-08-28T11:53:19.800", "ParentId": "32270244", "CommentCount": "1", "OwnerUserId": "4342498"}, "32270347": {"Id": "32270347", "PostTypeId": "2", "Body": "<p>There is narrowing here, since <code>initializer_list&lt;char&gt;</code> constructor is preffered.</p>\n<p>N4296 8.5/17.1</p>\n<blockquote>\n<p id=\"so_32270244_32270347_0\">\u2014 If the initializer is a (non-parenthesized) braced-init-list, the\n  object or reference is list-initialized (8.5.4).</p>\n</blockquote>\n<p>Since <code>string</code> has constructor, that takes <code>initializer_list&lt;char&gt;</code> it will be preffered, since</p>\n<p>8.5.4/2</p>\n<blockquote>\n<p id=\"so_32270244_32270347_1\">A constructor is an initializer-list constructor if its first\n  parameter is of type std::initializer_list or reference to possibly\n  cv-qualified std::initializer_list for some type E, and either\n  there are no other parameters or else all other parameters have\n  default arguments (8.3.6). <strong>[ Note: Initializer-list constructors are\n  favored over other constructors in list-initialization (13.3.1.7).</strong></p>\n</blockquote>\n<p>13.3.1.7/1</p>\n<blockquote>\n<p id=\"so_32270244_32270347_2\">When objects of non-aggregate class type T are list-initialized such\n  that 8.5.4 specifies that overload resolution is performed according\n  to the rules in this section, overload resolution selects the\n  constructor in two phases</p>\n<p id=\"so_32270244_32270347_3\">Initially, the candidate functions are the initializer-list\n  constructors (8.5.4) of the class T and the argument list consists of\n  the initializer list as a single argument.</p>\n</blockquote>\n<p>and program is ill-formed since</p>\n<p>N4296 8.5.4/3.5</p>\n<blockquote>\n<p id=\"so_32270244_32270347_4\">Otherwise, if T is a class type, constructors are considered. The\n  applicable constructors are enumerated and the best one is chosen\n  through overload resolution (13.3, 13.3.1.7). <strong>If a narrowing\n  conversion (see below) is required to convert any of the arguments,\n  the program is ill-formed.</strong></p>\n</blockquote>\n<p>Basically gcc will only warn on this snippet:</p>\n<pre><code>int main() {\n   const size_t v = 258;\n   char c = {v};\n}\n</code></pre>\n<p>when clang will give error.</p>\n", "LastEditorUserId": "1498580", "LastActivityDate": "2015-08-28T12:24:01.693", "Score": "3", "CreationDate": "2015-08-28T11:47:07.033", "ParentId": "32270244", "CommentCount": "5", "LastEditDate": "2015-08-28T12:24:01.693", "OwnerUserId": "1498580"}});