post_cb({"15369644": {"ParentId": "15369612", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>It's saying that there are three types of <em>template-parameter</em>:</p>\n<ol>\n<li><p>Type template parameter</p>\n<pre><code>template&lt;typename T&gt;\nclass bar {};\n</code></pre></li>\n<li><p>Non-type template parameter</p>\n<pre><code>template&lt;int N&gt;\nclass foo {};\n</code></pre></li>\n<li><p>Template template parameter</p>\n<pre><code>template&lt;template&lt;class&gt; class T&gt;\nclass baz {};\n</code></pre></li>\n</ol>\n<p>I do however agree that this is badly defined. In the grammar, a <em>template-parameter</em> that begins with <code>template</code> is one of the possible productions of <em>type-parameter</em>.</p>\n", "OwnerUserId": "150634", "LastEditorUserId": "150634", "LastEditDate": "2013-03-12T19:03:29.693", "Id": "15369644", "Score": "5", "CreationDate": "2013-03-12T18:49:58.123", "LastActivityDate": "2013-03-12T19:03:29.693"}, "15369650": {"ParentId": "15369612", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>In the context you are using this wording, \"<em>template parameters</em>\" are parameters which are class templates. For instance:</p>\n<pre><code>template&lt;template&lt;typename, typename&gt; class T, typename U, int N&gt;\nstruct { ... };\n</code></pre>\n<p>Here, <code>T</code> is a <em>template parameter</em>, <code>U</code> is a <em>type parameter</em>, and <code>N</code> is a non-type parameter.</p>\n<blockquote>\n<p id=\"so_15369612_15369650_0\">In section 14.1.2 it then refers to them as just type and non-type, and the template-parameter as a generalization.</p>\n</blockquote>\n<p>Here it is important to disambiguate the use of the word \"template\". In many contexts, it is just used to indicate that those are parameters \"of a template\" (as opposed to parameters of a function, for instance). In that case, these categories become (respectively) \"<em>template template parameters</em>\", \"<em>template type parameters</em>\", and \"<em>template non-type parameters</em>\".</p>\n<p>Also, in some situations the first category is also considered to define a \"non-type parameter\", because the arguments which can be provided for it are not <em>types</em> (they are templates). Therefore, sometimes you may find the wording \"<em>non-type, non-template parameters</em>\" to refer strictly to the third category (i.e. the category of <code>N</code> above).</p>\n<p>Also see footnote 136 to Paragraph 14.1/2 of the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_15369612_15369650_1\">Since <em>template template-parameters</em> and <em>template template-arguments</em> are treated as types for descriptive purposes, the\n  terms <em>non-type parameter</em> and <em>non-type argument</em> are used to refer to non-type, non-template parameters and arguments.</p>\n</blockquote>\n", "OwnerUserId": "1932150", "LastEditorUserId": "1932150", "LastEditDate": "2013-03-12T19:02:25.187", "Id": "15369650", "Score": "4", "CreationDate": "2013-03-12T18:50:13.253", "LastActivityDate": "2013-03-12T19:02:25.187"}, "bq_ids": {"n4140": {"so_15369612_15369612_0": {"section_id": 62, "quality": 0.8461538461538461, "length": 11}, "so_15369612_15369650_1": {"section_id": 55, "quality": 0.9473684210526315, "length": 18}}, "n3337": {"so_15369612_15369612_0": {"section_id": 57, "quality": 0.8461538461538461, "length": 11}, "so_15369612_15369650_1": {"section_id": 50, "quality": 0.9473684210526315, "length": 18}}, "n4659": {"so_15369612_15369612_0": {"section_id": 64, "quality": 0.9230769230769231, "length": 12}, "so_15369612_15369650_1": {"section_id": 57, "quality": 0.8421052631578947, "length": 16}}}, "15369612": {"CommentCount": "0", "ViewCount": "281", "CreationDate": "2013-03-12T18:47:45.870", "LastActivityDate": "2013-03-12T19:03:29.693", "Title": "template-parameter vs type-parameter vs non-type parameter", "AcceptedAnswerId": "15369650", "PostTypeId": "1", "Id": "15369612", "Score": "3", "Body": "<p>In the C++ Standard in chapter 14 (Templates) it refers to template parameters with several different names, depending on their context.</p>\n<p><em>non-type parameter</em></p>\n<pre><code> template&lt;int N&gt;\n class foo {};\n</code></pre>\n<p><em>template parameter</em></p>\n<pre><code>template&lt;typename T&gt;\nclass bar {};\n</code></pre>\n<p><em>type-parameter</em></p>\n<pre><code> ?????\n</code></pre>\n<p>In this quote below, it makes it seem like these are three distinct things, however I can't figure out what <em>type-parameter</em> is?</p>\n<p><strong>14.1 Template parameters [temp.param]</strong></p>\n<blockquote>\n<p id=\"so_15369612_15369612_0\">9 ... A default template-argument may be specified for any kind of template-parameter <strong>(type, non-type, template)</strong> that is not a template parameter pack (14.5.3). ...</p>\n</blockquote>\n<p>You can see here that it has three distinct names for template parameters.  If <em>template-parameter</em> was a generalization of the other two, then why include that in the list above.</p>\n<p>In section 14.1.2 it then refers to them as just <em>type</em> and <em>non-type</em>, and the template-parameter as a generalization.</p>\n<p>So what is it? Can someone explain?  </p>\n", "Tags": "<c++><templates><language-lawyer>", "OwnerUserId": "174614", "AnswerCount": "2"}});