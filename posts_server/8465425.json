post_cb({"8465435": {"ParentId": "8465425", "PostTypeId": "2", "CommentCount": "3", "Body": "<h2>Comma operator ( , )</h2>\n<blockquote>\n<p id=\"so_8465425_8465435_0\">The comma operator (,) is used to separate two or more expressions that are included where only one expression is expected. <strong>When the set of expressions has to be evaluated for a value, only the rightmost expression is considered</strong>.</p>\n</blockquote>\n<p>Hence:   </p>\n<pre><code>for(i=1;i&lt;5,i&lt;8;i++)\n</code></pre>\n<p>is equivalent to: </p>\n<pre><code>for(i=1;i&lt;8;i++)\n</code></pre>\n<p>Which evaluates value of <code>i</code> to <code>8</code></p>\n<p>And</p>\n<pre><code>for(i=1;i&lt;18,i&lt;6;i++)\n</code></pre>\n<p>is equivalent to:</p>\n<pre><code>for(i=1;i&lt;6;i++)\n</code></pre>\n<p>Which evaluates value of <code>i</code> to <code>6</code></p>\n<hr>\n<p>Standerdese Reference:      </p>\n<p><strong>C++11 Standard \u00a75.18:</strong> </p>\n<blockquote>\n<p id=\"so_8465425_8465435_1\">The comma operator groups left-to-right.</p>\n<p id=\"so_8465425_8465435_2\">expression:<br>\n  assignment-expression<br>\n  expression , assignment-expression      </br></br></p>\n<p id=\"so_8465425_8465435_3\"><strong>A pair of expressions separated by a comma is evaluated left-to-right; the left expression is a discarded- value expression (Clause 5)83</strong>. Every value computation and side effect associated with the left expression is sequenced before every value computation and side effect associated with the right expression. <strong>The type and value of the result are the type and value of the right operand; the result is of the same value category as its right operand,</strong> and is a bit-field if its right operand is a glvalue and a bit-field.</p>\n</blockquote>\n</hr>", "OwnerUserId": "452307", "LastEditorUserId": "452307", "LastEditDate": "2011-12-11T16:41:36.777", "Id": "8465435", "Score": "5", "CreationDate": "2011-12-11T16:15:11.847", "LastActivityDate": "2011-12-11T16:41:36.777"}, "8465431": {"ParentId": "8465425", "CommentCount": "0", "Body": "<p>The <code>,</code> operator evaluates to its last operand.</p>\n<p><code>i &lt; 18, i &lt; 6</code> becomes false when <code>i</code> is <code>6</code>.</p>\n", "OwnerUserId": "34397", "PostTypeId": "2", "Id": "8465431", "Score": "5", "CreationDate": "2011-12-11T16:14:10.290", "LastActivityDate": "2011-12-11T16:14:10.290"}, "8465425": {"CommentCount": "2", "ViewCount": "144", "PostTypeId": "1", "LastEditorUserId": "129570", "CreationDate": "2011-12-11T16:12:44.943", "LastActivityDate": "2011-12-11T16:41:36.777", "Title": "How does this piece of code work?", "LastEditDate": "2011-12-11T16:16:37.143", "Id": "8465425", "Score": "-2", "Body": "<p>1.)</p>\n<pre><code>int i;\n\nfor(i=1;i&lt;5,i&lt;8;i++){\n\n}\nprintf(\"%d\",i);\n</code></pre>\n<p>2.)</p>\n<pre><code>int i;\n\nfor(i=1;i&lt;18,i&lt;6;i++){\n\n}\nprintf(\"%d\",i);\n</code></pre>\n<p>output for 1.) is 8 while for 2.) is 6</p>\n<p>I am not getting how the code works, Help will be highly appreciated.</p>\n", "Tags": "<c++><c>", "OwnerUserId": "1092401", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_8465425_8465435_1": {"section_id": 6182, "quality": 0.8, "length": 4}, "so_8465425_8465435_3": {"section_id": 6182, "quality": 0.9230769230769231, "length": 48}}, "n3337": {"so_8465425_8465435_1": {"section_id": 5943, "quality": 0.8, "length": 4}, "so_8465425_8465435_3": {"section_id": 5943, "quality": 0.9230769230769231, "length": 48}}, "n4659": {"so_8465425_8465435_1": {"section_id": 7684, "quality": 0.8, "length": 4}, "so_8465425_8465435_3": {"section_id": 7684, "quality": 0.9038461538461539, "length": 47}}}});