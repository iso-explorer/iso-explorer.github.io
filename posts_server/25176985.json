post_cb({"bq_ids": {"n4140": {"so_25176985_25177404_0": {"length": 23, "quality": 0.92, "section_id": 7122}, "so_25176985_25177404_1": {"length": 14, "quality": 0.8235294117647058, "section_id": 7122}}, "n3337": {"so_25176985_25177404_0": {"length": 23, "quality": 0.92, "section_id": 6866}, "so_25176985_25177404_1": {"length": 14, "quality": 0.8235294117647058, "section_id": 6866}}, "n4659": {"so_25176985_25177404_0": {"length": 23, "quality": 0.92, "section_id": 8623}, "so_25176985_25177404_1": {"length": 14, "quality": 0.8235294117647058, "section_id": 8623}}}, "25176985": {"ViewCount": "476", "Body": "<p>Sometimes I find code like the following (actually some class-wizards create such code):</p>\n<pre><code>// C.h\nnamespace NS {\n\nclass C {\n    void f();\n};\n\n}\n</code></pre>\n<p>and in the implementation file:</p>\n<pre><code>// C.cpp\n#include \"C.h\"\n\nusing namespace NS;\nvoid C::f() {\n  //...\n}\n</code></pre>\n<p>All the compilers I tried accept that kind of code (gcc, clang, msvc, compileonline.com). What makes me feel uncomfortable is the <code>using namespace NS;</code>. From my point of view <code>C::f()</code> lives in the global namespace in an environment that has unqualified access to objects living in namespace NS. But in the compiler's opinion <code>void C::f()</code> lives in <code>namespace NS</code>. As all compilers I tried share that point of view they are probably right, but where in the standard is this opinion backed?</p>\n", "AcceptedAnswerId": "25177404", "Title": "Can class members be defined outside the namespace in which they are declared?", "CreationDate": "2014-08-07T07:50:54.660", "Id": "25176985", "CommentCount": "1", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2014-08-07T08:31:07.923", "LastEditorUserId": "819272", "LastActivityDate": "2014-08-07T08:33:43.647", "Score": "13", "OwnerUserId": "1303356", "Tags": "<c++><c++11><namespaces><language-lawyer><using-directives>", "AnswerCount": "1"}, "25177404": {"Id": "25177404", "PostTypeId": "2", "Body": "<p><strong>Yes, the syntax is indeed legal</strong>, but <strong>no, your function actually does live in the namespace NS</strong>. The code you are seeing is actually equivalent to </p>\n<pre><code>namespace NS { void C::f() { /* ... } }\n</code></pre>\n<p>or to</p>\n<pre><code>void NS::C::f() { /* ... */ }\n</code></pre>\n<p>which may be more similiar to what you are used to.</p>\n<p>Because of the using-directive you can omit the NS part not only in calling code, but also in its definition. The Standard has an example that matches your code (after the bold emphasized part):</p>\n<p><strong>3.4.3.2 Namespace members [namespace.qual]</strong></p>\n<blockquote>\n<p id=\"so_25176985_25177404_0\">7 In a declaration for a namespace member in which the declarator-id\n  is a qualified-id, given that the qualified-id for the namespace\n  member has the form nested-name-specifier unqualified-id the\n  unqualified-id shall name a member of the namespace designated by the\n  nested-name-specifier or of an element of the inline namespace set\n  (7.3.1) of that namespace. [ Example:</p>\n</blockquote>\n<pre><code>namespace A {\n  namespace B {\n    void f1(int);\n  }\n  using namespace B;\n}\nvoid A::f1(int){ } // ill-formed, f1 is not a member of A\n</code></pre>\n<blockquote>\n<p id=\"so_25176985_25177404_1\">\u2014end example ] <strong>However, in such namespace member declarations, the\n  nested-name-specifier may rely on using-directives to implicitly\n  provide the initial part of the nested-name-specifier.</strong> [ Example:</p>\n</blockquote>\n<pre><code>namespace A {\n  namespace B {\n    void f1(int);\n  }\n}\n\nnamespace C {\n  namespace D {\n    void f1(int);\n  }\n}\n\nusing namespace A;\nusing namespace C::D;\nvoid B::f1(int){ } // OK, defines A::B::f1(int)\n</code></pre>\n<blockquote>\n<p id=\"so_25176985_25177404_2\">\u2014end example ]</p>\n</blockquote>\n<p>So you may omit the <strong>initial part</strong> of the nested-name-specifier, but <strong>not any intermediate part</strong>.</p>\n", "LastEditorUserId": "819272", "LastActivityDate": "2014-08-07T08:33:43.647", "Score": "13", "CreationDate": "2014-08-07T08:15:05.923", "ParentId": "25176985", "CommentCount": "0", "OwnerUserId": "819272", "LastEditDate": "2014-08-07T08:33:43.647"}});