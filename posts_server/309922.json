post_cb({"310030": {"ParentId": "309922", "CommentCount": "2", "Body": "<p>I actually take advantage of this in a slightly unpleasant way: A code idiom I often use is a private member, with public accessor functions.</p>\n<p>I have a MACRO (shudder) which automatically generates these from a single line.</p>\n<p>example:</p>\n<pre><code>PROPERTY(int, MyVal);\n</code></pre>\n<p>...generates:...</p>\n<pre><code>private:\n  int fMyVal;\npublic:\n  void setMyVal(const int f) { fMyVal = f; };\n  int getMyVal() { return fMyVal; };\n</code></pre>\n<p>This works fine as long as you remember that the PROPERTY macro switches the current visiblity, which is not pleasant....</p>\n<p>eg:</p>\n<pre><code>protected:\n  int v1;\n  PROPERTY (int, v2) // fv2 is  private with public accessors\n  int v3;  // whoops. f3 is public,\n</code></pre>\n", "OwnerUserId": "1737", "Id": "310030", "PostTypeId": "2", "OwnerDisplayName": "Roddy", "Score": "0", "CreationDate": "2008-11-21T20:13:28.373", "LastActivityDate": "2008-11-21T20:13:28.373"}, "bq_ids": {"n4140": {"so_309922_309931_0": {"section_id": 5873, "quality": 0.7592592592592593, "length": 41}}, "n3337": {"so_309922_309931_0": {"section_id": 5644, "quality": 0.7592592592592593, "length": 41}}, "n4659": {"so_309922_309931_0": {"section_id": 7356, "quality": 0.7592592592592593, "length": 41}}}, "310285": {"ParentId": "309922", "CommentCount": "0", "Body": "<p>In \"The C++ Programming Language, 3rd edition,\" Stroustrup says this is to make code generation easier.</p>\n<p>Although it does make sense that the position of each field in the actual binary is based on which order that field was declared in the source code, so this allows somebody to maintain some sort of layout compatibility with C or even other languages/specs.</p>\n", "OwnerUserId": "10593", "PostTypeId": "2", "Id": "310285", "Score": "0", "CreationDate": "2008-11-21T21:40:10.320", "LastActivityDate": "2008-11-21T21:40:10.320"}, "309931": {"CommentCount": "4", "CreationDate": "2008-11-21T19:41:57.127", "LastEditorUserId": "-1", "LastActivityDate": "2008-11-21T20:00:18.743", "ParentId": "309922", "PostTypeId": "2", "LastEditorDisplayName": "eJames", "LastEditDate": "2017-05-23T11:49:30.547", "Id": "309931", "Score": "1", "Body": "<p>I think you are correct. Leaving it unforced allows users to group things as they see fit for better code readability.</p>\n<p>The compiler may organize things differently in memory.</p>\n<p><b>edit</b>: as per the spec:</p>\n<blockquote id=\"so_309922_309931_0\">\u00a79.2 clause 12 (1998 and 2003 standards):<br><br>Nonstatic data members of a (non-union) class declared without an intervening access-specifier are allocated so that later members have higher addresses within a class object. The order of allocation of nonstatic data members separated by an access-specifier is unspecified (11.1). Implementation alignment requirements might cause two adjacent members not to be allocated immediately after each other; so might requirements for space for managing virtual functions (10.3) and virtual base classes (10.1).</br></br></blockquote>\n<p>I found this information in <a href=\"https://stackoverflow.com/questions/281045/do-classstruct-members-always-get-created-in-memory-in-the-order-they-were-decl\">a related SO question</a></p>\n", "OwnerUserId": "33686", "OwnerDisplayName": "eJames"}, "309941": {"CommentCount": "1", "CreationDate": "2008-11-21T19:46:32.827", "LastEditorUserId": "13313", "LastActivityDate": "2008-11-21T20:12:48.563", "ParentId": "309922", "PostTypeId": "2", "LastEditorDisplayName": "Dima", "LastEditDate": "2008-11-21T20:12:48.563", "Id": "309941", "Score": "0", "Body": "<p>My guess is that it is an outgrowth of the C philosophy, which assumes that you know what you are doing and gives you the maximum flexibility.  It is like allowing a single = in an if statement.</p>\n", "OwnerUserId": "13313", "OwnerDisplayName": "Dima"}, "310047": {"ParentId": "309922", "CommentCount": "0", "Body": "<p>Why would you force it?  It doesn't help the compiler out at all, it doesn't make things objectively easier for a person to read.  Part of the C/C++ philosophy is that the language doesn't make arbitrary rules that don't enable some sort of feature/functionality.</p>\n<p>It does make things MUCH easier for code generation.  Many coding styles use access specifiers more than once per class - first defining all the local types, then all constructors, then all the methods, then all the instance variables, etc...</p>\n<p>C++ gives you enough rope to shoot yourself in the foot, but it's that same flexibility that lets you build elegant, maintainable, and well abstracted applications.</p>\n", "OwnerUserId": "8701", "Id": "310047", "PostTypeId": "2", "OwnerDisplayName": "Josh", "Score": "3", "CreationDate": "2008-11-21T20:16:17.010", "LastActivityDate": "2008-11-21T20:16:17.010"}, "309927": {"ParentId": "309922", "CommentCount": "0", "Body": "<p>It gives you flexibility. For example, you might have a bunch of constructors, some public, some protected, some private - wouldn't you want them all grouped together?</p>\n", "OwnerUserId": "5987", "Id": "309927", "PostTypeId": "2", "OwnerDisplayName": "Mark Ransom", "Score": "4", "CreationDate": "2008-11-21T19:41:15.817", "LastActivityDate": "2008-11-21T19:41:15.817"}, "309922": {"CommentCount": "0", "ViewCount": "350", "OwnerDisplayName": "Aydya", "CreationDate": "2008-11-21T19:38:43.093", "LastActivityDate": "2008-11-21T21:40:10.307", "Title": "In C++ why is grouping not forced by the language on public, private and protected members of a class/struct?", "PostTypeId": "1", "Id": "309922", "Score": "2", "Body": "<p>Is it only to allow logical grouping?</p>\n", "Tags": "<c++><private><public><protected><access-specifier>", "OwnerUserId": "37952", "AnswerCount": "6"}});