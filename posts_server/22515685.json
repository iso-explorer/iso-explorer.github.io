post_cb({"22515892": {"Id": "22515892", "PostTypeId": "2", "Body": "<p>No, in C the order of evaluation of the initializers is unspecified:</p>\n<blockquote>\n<p id=\"so_22515685_22515892_0\">(C11, 6.7.9p23) \"The evaluations of the initialization list expressions are indeterminately sequenced with respect to one another and thus the order in which any side effects occur is\n  unspecified.152)\"</p>\n<p id=\"so_22515685_22515892_1\">152) In particular, the evaluation order need not be the same as the order of subobject initialization.</p>\n</blockquote>\n<p>In C++ the behavior is different, and the initializers are evaluated  in the order in which they appear (C++11, 8.5.4p4).</p>\n", "LastEditorUserId": "1119701", "LastActivityDate": "2014-03-19T19:16:45.797", "Score": "2", "CreationDate": "2014-03-19T19:10:59.363", "ParentId": "22515685", "CommentCount": "0", "OwnerUserId": "1119701", "LastEditDate": "2014-03-19T19:16:45.797"}, "22515948": {"Id": "22515948", "PostTypeId": "2", "Body": "<p>In C++11, the relevant part is paragraph 4 of <strong>8.5.4  List-initialization</strong></p>\n<blockquote>\n<p id=\"so_22515685_22515948_0\">Within the <em>initializer-list</em> of a <em>braced-init-list</em>, the <em>initializer-clauses</em>, including any that result from pack expansions (14.5.3), <strong>are evaluated in the order in which they appear</strong>. That is, every value computation and side effect associated with a given <em>initializer-clause</em> is sequenced before every value computation and side effect associated with any <em>initializer-clause</em> that follows it in the comma-separated list of the <em>initializer-list</em>. [ <em>Note</em>: This evaluation ordering holds regardless of the semantics of the initialization; for example, it applies when the elements of the <em>initializer-list</em> are interpreted as arguments of a constructor call, even though ordinarily there are no sequencing constraints on the arguments of a call. \u2014 <em>end note</em> ]</p>\n</blockquote>\n<p>So the order of evaluation is <strong>left-to-right</strong>.</p>\n<p><strong>However</strong> note that unfortunately, due to a <a href=\"http://gcc.gnu.org/bugzilla/show_bug.cgi?id=51253\" rel=\"nofollow\">bug</a> since at least version 4.7.0, GCC evaluates in the opposite order, <strong>right-to-left</strong>. So if you get any unexpected results, this may be a reason.</p>\n", "LastEditorUserId": "2644390", "LastActivityDate": "2014-03-25T18:25:31.320", "Score": "2", "CreationDate": "2014-03-19T19:13:36.233", "ParentId": "22515685", "CommentCount": "0", "OwnerUserId": "2644390", "LastEditDate": "2014-03-25T18:25:31.320"}, "22515830": {"Id": "22515830", "PostTypeId": "2", "Body": "<p>In all these two cases</p>\n<pre><code>goo b = { f(), g() };\ngoo c { f(), g() };    /* C++11 */\n</code></pre>\n<p>the order of evaluation is determined from left to right and all side effects shall be applied before the next initializer.</p>\n<p>From the C++ STandard</p>\n<blockquote>\n<p id=\"so_22515685_22515830_0\">4 Within the initializer-list of a braced-init-list, the\n  initializer-clauses, including any that result from pack expansions\n  (14.5.3), are evaluated in the order in which they appear. That is,\n  every value computation and side effect associated with a given\n  initializer-clause is sequenced before every value computation and\n  side effect associated with any initializer-clause that follows it in\n  the comma-separated list of the initializer-list.</p>\n</blockquote>\n<p>However in C there is other rule</p>\n<blockquote>\n<p id=\"so_22515685_22515830_1\">The evaluations of the initialization list expressions are\n  indeterminately sequenced with respect to one another and thus the\n  order in which any side effects occur is unspecified.</p>\n</blockquote>\n", "LastEditorUserId": "1809377", "LastActivityDate": "2014-03-19T19:29:00.683", "Score": "20", "CreationDate": "2014-03-19T19:07:19.627", "ParentId": "22515685", "CommentCount": "9", "OwnerUserId": "2877241", "LastEditDate": "2014-03-19T19:29:00.683"}, "22515736": {"Id": "22515736", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_22515685_22515736_0\">Is the order of execution f() and g() in any line specified by C and C++ standards? </p>\n</blockquote>\n<p>In C, <strong>No</strong>. They can evaluate in any order.   </p>\n<h3>C11 6.7.9 Initialization</h3>\n<blockquote>\n<p id=\"so_22515685_22515736_1\">The evaluations of the initialization list expressions are indeterminately sequenced with\n  respect to one another and thus <strong>the order in which any side effects occur is\n  unspecified</strong>,<sup>152)</sup>.   </p>\n</blockquote>\n<p>While C++11 says that the order of evaluation is deterministic.   </p>\n<h3>8.5.4:4 List-initialization</h3>\n<blockquote>\n<p id=\"so_22515685_22515736_2\">Within the initializer-list of a braced-init-list, the initializer-clauses, including any that result from pack expansions (14.5.3), <strong>are evaluated in the order in which they appear</strong>. That is, every value computation and side effect associated with a given initializer-clause is sequenced before every value computation and side effect associated with any initializer-clause that follows it in the comma-separated list of the initializer-list.   </p>\n</blockquote>\n<hr>\n<blockquote>\n<p id=\"so_22515685_22515736_3\"><sub>152) In particular, the evaluation order need not be the same as the order of subobject initialization.</sub></p>\n</blockquote>\n</hr>", "LastEditorUserId": "2455888", "LastActivityDate": "2014-03-19T21:34:49.937", "Score": "11", "CreationDate": "2014-03-19T19:02:33.003", "ParentId": "22515685", "CommentCount": "7", "OwnerUserId": "2455888", "LastEditDate": "2014-03-19T21:34:49.937"}, "bq_ids": {"n4140": {"so_22515685_22515830_0": {"length": 33, "quality": 0.9428571428571428, "section_id": 3326}, "so_22515685_22515736_2": {"length": 33, "quality": 0.9428571428571428, "section_id": 3326}, "so_22515685_22515948_0": {"length": 56, "quality": 0.9032258064516129, "section_id": 3326}}, "n3337": {"so_22515685_22515736_2": {"length": 33, "quality": 0.9428571428571428, "section_id": 3196}, "so_22515685_22515830_0": {"length": 33, "quality": 0.9428571428571428, "section_id": 3196}, "so_22515685_22515948_0": {"length": 56, "quality": 0.9032258064516129, "section_id": 3196}}, "n4659": {"so_22515685_22515736_2": {"length": 33, "quality": 0.9428571428571428, "section_id": 4092}, "so_22515685_22515830_0": {"length": 33, "quality": 0.9428571428571428, "section_id": 4092}, "so_22515685_22515948_0": {"length": 56, "quality": 0.9032258064516129, "section_id": 4092}}}, "22515685": {"ViewCount": "736", "Body": "<p>Consider the following initializations:</p>\n<pre><code>/* C, C++ */\nint a[] = { f(), g() };\nstruct { int x, y } foo = { f(), g() };\n\n/* C++ */\nstruct goo { goo(int x, int y);  };\n\ngoo b = { f(), g() };\ngoo c { f(), g() };    /* C++11 */\ngoo d ( f(), g() );\n</code></pre>\n<p>Is the order of execution <code>f()</code> and <code>g()</code> in any line specified by C and C++ standards?</p>\n", "AcceptedAnswerId": "22515830", "Title": "Ordering in an initialization in C, C++", "CreationDate": "2014-03-19T19:00:16.790", "LastActivityDate": "2015-12-09T14:40:56.100", "CommentCount": "1", "FavoriteCount": "3", "PostTypeId": "1", "LastEditDate": "2015-12-09T14:40:56.100", "OwnerDisplayName": "user1150105", "LastEditorUserId": "2877241", "Id": "22515685", "Score": "18", "Tags": "<c++><c><initialization><initializer-list>", "AnswerCount": "4"}});