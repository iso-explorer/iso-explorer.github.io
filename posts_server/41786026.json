post_cb({"41817106": {"ParentId": "41786026", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2017-01-23T22:50:54.007", "OwnerUserId": "1566221", "CommunityOwnedDate": "2017-01-23T23:01:43.627", "Id": "41817106", "Score": "5", "Body": "<p>It's a bug, or at least the bug report was accepted by the GCC maintainers.</p>\n<p>In a comment, Johannes Schaub-litb pointed out that the code which rejects this construct is at line 16781 of <code>cp/parser.c</code>:</p>\n<pre><code>  /* There is no valid C++ program where a non-template type is\n followed by a \"&lt;\".  That usually indicates that the user thought\n that the type was a template.  */\n  cp_parser_check_for_invalid_template_id (parser, type, none_type,\n                       token-&gt;location);\n</code></pre>\n<p>and that the comment is incorrect, since the check also rejects other valid programs such as </p>\n<pre><code>struct A {\n   operator A();  \n};\n\nvoid operator&lt;(A (A::*)(), A);\n\nint main() {\n   &amp;A::operator A &lt; A();   \n}\n</code></pre>\n<p>(<a href=\"http://coliru.stacked-crooked.com/a/f35c1aa5b3f9832d\" rel=\"noreferrer\">on coliru</a>)</p>\n", "LastActivityDate": "2017-01-23T22:50:54.007"}, "41786026": {"CommentCount": "18", "CreationDate": "2017-01-22T00:22:06.343", "PostTypeId": "1", "AcceptedAnswerId": "41817106", "LastEditorUserId": "-1", "LastActivityDate": "2017-01-23T22:50:54.007", "LastEditDate": "2017-05-23T11:46:36.333", "ViewCount": "323", "FavoriteCount": "1", "Title": "Why does gcc reject `new v < new v` when `v` is not a template?", "Id": "41786026", "Score": "12", "Body": "<p>Simple test case:</p>\n<pre><code>#include &lt;iostream&gt;\nstruct v {};\nint main() {\n    std::cout &lt;&lt; __VERSION__ &lt;&lt; '\\n' &lt;&lt; (new v &lt; new v) &lt;&lt; '\\n';\n}\n</code></pre>\n<p>I'm aware that comparing the pointers has an unspecified result, but that's not relevant here (and a similar example could be produced with some more keystrokes, as in the later coliru snippets).</p>\n<p>The C++ standard I have handy says, in \u00a714.2 paragraph 3:</p>\n<blockquote>\n<p id=\"so_41786026_41786026_0\">After name lookup finds that a name is a <em>template-name</em> or that an <em>operator-function-id</em> or a <em>literal-operator-id</em> refers to a set of overloaded functions any member of which is a function template, if this is followed by a <kbd>&lt;</kbd>, the <kbd>&lt;</kbd> is always taken as the delimiter of a <em>template-argument-list</em> and never as the less-than operator.</p>\n</blockquote>\n<p>Since <code>v</code> is neither a template name nor a function id, I don't see why this should apply. And neither, apparently, does <a href=\"http://coliru.stacked-crooked.com/a/2d1ba227e1eaba2c\" rel=\"nofollow noreferrer\">clang</a>:</p>\n<pre><code>4.2.1 Compatible Clang 3.8.0 (tags/RELEASE_380/final 263969)\n1\n</code></pre>\n<p>However, <a href=\"http://coliru.stacked-crooked.com/a/9c743c16b7fd6696\" rel=\"nofollow noreferrer\">gcc</a> (6.3.0) complains:</p>\n<pre><code>main.cpp: In function 'int main()':\n\nmain.cpp:4:46: error: 'v' is not a template\n     std::cout &lt;&lt; __VERSION__ &lt;&lt; '\\n' &lt;&lt; (new v &lt; new v) &lt;&lt; '\\n';\n                                              ^\n</code></pre>\n<p>Am I (and clang) missing something here?</p>\n<p>Versions without unspecified behaviour: <a href=\"http://coliru.stacked-crooked.com/a/c59287b0e8c102a4\" rel=\"nofollow noreferrer\">clang</a> <a href=\"http://coliru.stacked-crooked.com/a/830cb4afe767877b\" rel=\"nofollow noreferrer\">gcc</a></p>\n<p>Version with minus operator instead of less than: <a href=\"http://coliru.stacked-crooked.com/a/e87adde760011f1c\" rel=\"nofollow noreferrer\">gcc</a> (no compilation error)</p>\n<hr>\n<h3>Addendum</h3>\n<p>Gcc does not have the same problem with functions; with <a href=\"http://coliru.stacked-crooked.com/a/016d2b2616fba204\" rel=\"nofollow noreferrer\">template functions</a> it insists that the <kbd>&lt;</kbd> must be a template argument delimiter, but not with <a href=\"http://coliru.stacked-crooked.com/a/4604d92f45fa4a63\" rel=\"nofollow noreferrer\">non-template functions</a>. That adds weight to the argument that it's a bug, so I filed it as <a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=79192\" rel=\"nofollow noreferrer\">Bug 79192</a>.</p>\n<hr>\n<h3>Note:</h3>\n<p>In case anyone is curious, this came up while I was trying to answer <a href=\"https://stackoverflow.com/questions/41785372/shift-reduce-conflict-in-bison-when-trying-to-add-optional-rule\">this question</a>, where the questioner was writing a grammar for a vaguely C++-like language and stumbled on the above ambiguity. I wanted to explain the solution used by C++, but the discrepancy between the two compilers made it difficult.</p>\n</hr></hr>", "Tags": "<c++><c++14><language-lawyer>", "OwnerUserId": "1566221", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_41786026_41786026_0": {"section_id": 71, "quality": 1.0, "length": 23}}, "n3337": {"so_41786026_41786026_0": {"section_id": 66, "quality": 1.0, "length": 23}}, "n4659": {"so_41786026_41786026_0": {"section_id": 73, "quality": 1.0, "length": 23}}}});