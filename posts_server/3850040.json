post_cb({"3850092": {"ParentId": "3850040", "PostTypeId": "2", "CommentCount": "14", "Body": "<p>In C++ 03.</p>\n<pre><code>void main(void) \n{ \n  int x,y,z; \n  x=y=z=1;                                  // Seq1 at ;\n\n  z = x &amp;&amp; y &amp;&amp; ++z;//is this fine?         // Seq2 at ;\n} \n</code></pre>\n<p>NB: Note that there are sequence points at the operator &amp;&amp; but then those are not relevant in this example.</p>\n<p>Fine!. In general, may be or may be Not. Depends on the values of x and y. In your specific case, it is not fine. This code has the potential to have something called <a href=\"https://stackoverflow.com/questions/2235457/how-to-explain-undefined-behavior-to-know-it-all-newbies\">undefined behavior</a>.</p>\n<p>If z++ is evaluated (<strong>as in your example because x and y are 1</strong>), then the scalar variable 'z' is modified more than once in the expression between two sequence points Seq1 and Seq2 (see below). It is important to note that the assignment operator does not introduce any sequence point.</p>\n<blockquote>\n<p id=\"so_3850040_3850092_0\">$5/4- \"Except where noted, the order\n  of evaluation of operands of\n  individual operators and\n  subexpressions of individual\n  expressions, and the order in which\n  side effects take place, is\n  unspecified.53) <strong>Between the previous\n  and next sequence point a scalar\n  object shall have its stored value\n  modified at most once by the\n  evaluation of an expression.\n  Furthermore, the prior value shall be\n  accessed only to determine the value\n  to be stored.</strong> The requirements of this\n  paragraph shall be met for each\n  allowable ordering of the\n  subexpressions of a full expression;\n  otherwise the behavior is undefined.\"</p>\n</blockquote>\n<p>In C++0x</p>\n<p>Will update it once I myself understand the details of the discussion referred to by @litb. For now, I am just striking it off</p>\n<p><strike>In C++0X however, as I understand, there is no concept of sequence points. This expression is fine and does not invoke undefined behavior. This is because the effect of ++ on 'z' is sequenced before the side effect of assignment on 'z'.</strike></p>\n<blockquote>\n<p id=\"so_3850040_3850092_1\">$1.9/15- \"Except where noted,\n  evaluations of operands of individual\n  operators and of subexpressions of\n  individual expressions are\n  unsequenced. [ Note: In an expression\n  that is evaluated more than once\n  during the execution of a program,\n  unsequenced and indeterminately\n  sequenced evaluations of its\n  subexpressions need not be performed\n  consistently in different evaluations.\n  \u2014end note ] The value computations of\n  the operands of an operator are\n  sequenced before the value computation\n  of the result of the operator. <strong>If a\n  side effect on a scalar object is\n  unsequenced relative to either another\n  side effect on the same scalar object\n  or a value computation using the value\n  of the same scalar object, the\n  behavior is undefined.</strong></p>\n<p id=\"so_3850040_3850092_2\">$3.9/9 - \"Arithmetic types (3.9.1),\n  enumeration types, pointer types,\n  pointer to member types (3.9.2),\n  std::nullptr_t, and cv-qualified\n  versions of these types (3.9.3) are\n  collectively called scalar types.\"</p>\n</blockquote>\n<p>Note that in the expression 'z = z++;' where z is a scalar variable, the side effects on 'z' due to assignment operator and postfix operator++ are unsequenced (neither of them is sequenced before the other).</p>\n<p>Thanks @Prasoon for giving valuable inputs to refine this post from original version</p>\n", "OwnerUserId": "418110", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T09:58:01.353", "Id": "3850092", "Score": "6", "CreationDate": "2010-10-03T14:11:40.773", "LastActivityDate": "2010-10-04T02:57:14.770"}, "3850239": {"ParentId": "3850040", "CommentCount": "1", "Body": "<p>A simple way to know if that line is fine or not is let the compiler check that. For example, gcc has  <a href=\"http://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wsequence_002dpoint-288\" rel=\"nofollow\">the <code>-Wsequence-point</code> option</a> (enabled by <code>-Wall</code>) for checking if there's undefined behavior because of lack of sequence points.</p>\n<p>Your program</p>\n<pre><code>int main(void)\n{\n  int x,y,z;\n  x=y=z=1;\n\n  z = x &amp;&amp; y &amp;&amp; ++z;/*is this fine?*/\n\n    return 0;\n}\n</code></pre>\n<p>produces this warning:</p>\n<pre>\nx.c: In function 'main':\nx.c:6:5: warning: operation on 'z' may be undefined\n</pre>\n", "OwnerUserId": "224671", "PostTypeId": "2", "Id": "3850239", "Score": "2", "CreationDate": "2010-10-03T14:56:54.857", "LastActivityDate": "2010-10-03T14:56:54.857"}, "3850040": {"CommentCount": "1", "ViewCount": "349", "CreationDate": "2010-10-03T14:00:35.550", "LastActivityDate": "2010-10-04T02:57:14.770", "Title": "complicated expression involving logical AND (&&)", "FavoriteCount": "1", "PostTypeId": "1", "Id": "3850040", "Score": "9", "Body": "<pre><code>void main(void)\n{\n  int x,y,z;\n  x=y=z=1;\n\n  z = x &amp;&amp; y &amp;&amp; ++z;//is this fine?\n}\n</code></pre>\n<p>I have lately started reading about sequence points stuffs but I cannot figure out whether the above sample of code is fine or not. I know the <code>&amp;&amp;</code> operator introduces a sequence point so I am not very sure about the behavior of the expression z = x &amp;&amp; y &amp;&amp; ++z. Someone please tell me the correct answer.</p>\n", "Tags": "<c++><c><sequence-points>", "OwnerUserId": "465194", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_3850040_3850092_1": {"section_id": 5811, "quality": 0.9242424242424242, "length": 61}, "so_3850040_3850092_2": {"section_id": 7207, "quality": 0.8095238095238095, "length": 17}}, "n3337": {"so_3850040_3850092_1": {"section_id": 5584, "quality": 0.9242424242424242, "length": 61}, "so_3850040_3850092_2": {"section_id": 6951, "quality": 0.7619047619047619, "length": 16}}, "n4659": {"so_3850040_3850092_1": {"section_id": 7272, "quality": 0.8333333333333334, "length": 55}, "so_3850040_3850092_2": {"section_id": 8716, "quality": 0.8095238095238095, "length": 17}}}, "3850084": {"ParentId": "3850040", "CommentCount": "0", "Body": "<p>Yes, it will compile. </p>\n<p>But if you are asking about logical bugs: </p>\n<p>1) the <code>&amp;&amp;</code> operator introduces a sequence point because it could terminate the evaluation of the expression when it knows for sure the final result (in this case a <code>0</code> value can terminate the evaluation), so it won't even reach to the <code>++z</code> part if <code>x</code> or <code>y</code> is zero.</p>\n<p>2) because the <code>&amp;&amp;</code> operator is a logical one, the result will always be 0 or 1, and I doubt that this is what you wanted.</p>\n", "OwnerUserId": "395626", "PostTypeId": "2", "Id": "3850084", "Score": "-2", "CreationDate": "2010-10-03T14:10:14.410", "LastActivityDate": "2010-10-03T14:10:14.410"}});