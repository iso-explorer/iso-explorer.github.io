post_cb({"bq_ids": {"n4140": {"so_28337951_28338123_0": {"length": 11, "quality": 1.0, "section_id": 3286}, "so_28337951_28337951_0": {"length": 7, "quality": 0.5833333333333334, "section_id": 3286}}, "n3337": {"so_28337951_28338123_0": {"length": 11, "quality": 1.0, "section_id": 3156}, "so_28337951_28337951_0": {"length": 7, "quality": 0.5833333333333334, "section_id": 3156}}, "n4659": {"so_28337951_28338123_0": {"length": 7, "quality": 0.6363636363636364, "section_id": 382}}}, "28338123": {"Id": "28338123", "PostTypeId": "2", "Body": "<p>You quoted the answer yourself. In the SO answer that you linked, there is the following quote from the standard (section 6.8.6precisely):</p>\n<blockquote>\n<p id=\"so_28337951_28338123_0\">If a program calls for the default initialization of an object of a\n  const-qualified type T, T shall be a class type with a <strong>user-provided</strong>\n  default constructor.</p>\n</blockquote>\n<p>emphasis mine. The line</p>\n<pre><code>A() = default;\n</code></pre>\n<p>obviously does not provide a constructor, it does the opposite by telling the compiler that you don't want to provide one, thus your code doesn't compile. However, once you provide the constructor by uncommenting </p>\n<pre><code> A(){}; \n</code></pre>\n<p>it works fine. So, to summarize, the error that clang shows is per standard, and the behaviour of gcc is probably a bug.</p>\n", "LastActivityDate": "2015-02-05T07:10:45.487", "CommentCount": "0", "CreationDate": "2015-02-05T07:10:45.487", "ParentId": "28337951", "Score": "2", "OwnerUserId": "1490355"}, "28338265": {"Id": "28338265", "PostTypeId": "2", "Body": "<p>This is addressed in <a href=\"http://open-std.org/jtc1/sc22/wg21/docs/cwg_active.html#253\" rel=\"nofollow\">CWG issue #253</a> which discusses the need for a user provided constructor for empty objects or objects whose subobjects are fully initialized (which is the case in your example).</p>\n<p>Quoting part of the linked issue</p>\n<blockquote>\n<p id=\"so_28337951_28338265_0\"><strong>Notes from the August, 2011 meeting:</strong></p>\n<p id=\"so_28337951_28338265_1\">If the implicit default constructor initializes all subobjects, no initializer should be required.</p>\n</blockquote>\n<p>Technically it is an active issue but given that note it seems likely that it'll be resolved the way gcc chose to implement it. </p>\n<p>Clang, on the other hand, has <a href=\"http://llvm.org/bugs/show_bug.cgi?id=17694\" rel=\"nofollow\">chosen to wait</a> until the issue is resolved before implementing a solution. </p>\n<blockquote>\n<p id=\"so_28337951_28338265_2\">In Clang, we're waiting for the issue to actually be resolved before we take a direction on it.</p>\n</blockquote>\n<p>So, as it currently stands, clang is correct.</p>\n", "LastActivityDate": "2015-02-05T07:20:07.907", "CommentCount": "2", "CreationDate": "2015-02-05T07:20:07.907", "ParentId": "28337951", "Score": "4", "OwnerUserId": "241631"}, "28337951": {"ViewCount": "1296", "Body": "<p>Consider following example:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;type_traits&gt;\n\nstruct A\n{\n  //A() = default; // does neither compile with, nor without this line\n  //A(){};         // does compile with this line\n  int someVal{ 123 };\n\n\n  void foobar( int )\n  {\n  };\n};\n\n\nint main()\n{\n    const A a;\n    std::cout &lt;&lt; \"isPOD = \" &lt;&lt; std::is_pod&lt;A&gt;::value &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"a.someVal = \" &lt;&lt;a.someVal &lt;&lt; std::endl;\n}\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/c542e2560fad7fe4\" rel=\"nofollow noreferrer\">See Live example</a></p>\n<p>This does compile with g++ but does not compile with clang++, tried with following command: <code>clang++ -std=c++11 -O0 main.cpp &amp;&amp; ./a.out</code></p>\n<p>Compile error from clang: </p>\n<blockquote>\n<p id=\"so_28337951_28337951_0\">main.cpp:19:13: error: default initialization of an object of const type 'const A' requires a user-provided default constructor</p>\n</blockquote>\n<p>I learned from <a href=\"https://stackoverflow.com/questions/7411515/why-does-c-require-a-user-provided-default-constructor-to-default-construct-a\">This Stack Overflow Question</a>, that non-POD classes get default constructor. This is even not necessary here because the variable has c++11-style default initialization </p>\n<p>Why does this not for clang?\nWhy does <code>A() = default;</code> not work, too?</p>\n", "AcceptedAnswerId": "28338123", "Title": "Clang Compile error with default initialization", "CreationDate": "2015-02-05T06:59:04.053", "LastActivityDate": "2015-02-05T07:20:07.907", "CommentCount": "0", "LastEditDate": "2017-05-23T12:17:52.443", "PostTypeId": "1", "Tags": "<c++><c++11><clang++>", "Id": "28337951", "AnswerCount": "2", "Score": "3", "OwnerUserId": "3293086", "ClosedDate": "2015-02-05T17:19:33.670", "LastEditorUserId": "-1"}});