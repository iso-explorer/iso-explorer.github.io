post_cb({"25946341": {"CommentCount": "1", "Body": "<blockquote id=\"so_25946089_25946341_0\">14.3.2<br>\n\u00a0 Template non-type arguments [temp.arg.nontype]<br>\n\u00a0 \u00a0  1<br>\n\u00a0 \u00a0 \u00a0 A template-argument for a non-type, non-template template-parameter shall be one of: [...]\n   <ul>\n<li>a constant expression (5.19) that designates the address of a complete\n   object with static storage duration and external or internal linkage or a function with external or\n   internal linkage</li></ul> \n\u00a0 \u00a0 \u00a0[...]\n</br></br></br></blockquote>\n<p>Since <code>k</code> is not a constant expression, you cannot use it as a template argument.</p>\n<p>If you replace the declaration of <code>k</code> with</p>\n<pre><code>static char k[] = \"hi\";\n</code></pre>\n<p><code>clang++</code> compiles it. <code>g++</code> does not; this is IMO a bug in <code>g++</code>.</p>\n<p>If <code>k</code> is declared as</p>\n<pre><code>namespace { char k[] = \"hi\"; }\n</code></pre>\n<p>then <code>g++</code> compiles it too.</p>\n", "CreationDate": "2014-09-20T07:24:17.210", "CommunityOwnedDate": "2014-09-20T07:24:17.210", "ParentId": "25946089", "Id": "25946341", "LastActivityDate": "2014-09-20T07:24:17.210", "PostTypeId": "2", "Score": "4", "OwnerUserId": "775806"}, "25946089": {"CreationDate": "2014-09-20T06:48:50.910", "ViewCount": "143", "Id": "25946089", "AcceptedAnswerId": "25946341", "Score": "1", "Title": "Template on address of variable with static storage", "LastEditorUserId": "-1", "CommentCount": "2", "Body": "<p>Does C++ allow templates to take the address of a variable with static storage as a parameter? Since a memory address is integral and those with static storage are known at compile time it seems possible.</p>\n<p>I found this question showing that this works for int*.</p>\n<p><a href=\"https://stackoverflow.com/questions/1257267/is-it-legal-c-to-pass-the-address-of-a-static-const-int-with-no-definition-to\">Is it legal C++ to pass the address of a static const int with no definition to a template?</a></p>\n<p>So far, I haven't convinced my compiler accept pointers to other types like char*.</p>\n<p>Can templates be specialized on static addresses in general? If not, why?</p>\n<p><strong>Edit:</strong> I should have been more explicit. Here is some code that compiles for me using g++ 4.9. </p>\n<pre><code>#include &lt;iostream&gt;\n\ntemplate&lt;int* int_addr&gt;\nstruct temp_on_int{\n    temp_on_int() {}\n    void print() {\n        std::cout &lt;&lt; *int_addr &lt;&lt; std::endl;\n    }\n};\n\n\ntemplate&lt;char* str_addr&gt;\nstruct temp_on_string{\n    temp_on_string() {}\n    void print() {\n        std::cout &lt;&lt; str_addr &lt;&lt; std::endl;\n    }\n};\n\nstatic int i = 0;\nstatic char j = 'h';\n// static char* k = \"hi\";\n\nint main() {\n\n    temp_on_int&lt;&amp;i&gt; five;\n    i = 6;\n    five.print();\n\n    temp_on_string&lt;&amp;j&gt; h;\n    h.print();\n\n    // temp_on_string&lt;k&gt; hi;\n    // hi.print();\n}\n</code></pre>\n<p>Commented out is something that won't compile with g++ 4.9. The code as shown won't compile on coliru.</p>\n<p><a href=\"http://coliru.stacked-crooked.com/a/883df3d2b66f9d61\" rel=\"nofollow noreferrer\">http://coliru.stacked-crooked.com/a/883df3d2b66f9d61</a></p>\n<p>How I compiled:</p>\n<p>g++ -std=c++11 -Og -g -march=native -Wall -Wextra -pedantic -ftrapv -fbounds-check -o test16 test16.cpp</p>\n<p>The error I get when I try to compile the commented portion:</p>\n<blockquote>\n<p id=\"so_25946089_25946089_0\">test16.cpp:33:17: error: the value of 'k' is not usable in a constant\n  expression   temp_on_string hi;\n                   ^ test16.cpp:22:14: note: 'k' was not declared 'constexpr'  static char* k = \"hi\";\n                ^ test16.cpp:33:18: error: 'k' is not a valid template argument because 'k' is a variable, not the address of a variable<br>\n  temp_on_string hi;</br></p>\n</blockquote>\n", "Tags": "<c++><templates><static>", "LastEditDate": "2017-05-23T10:26:24.843", "LastActivityDate": "2014-09-20T07:24:17.210", "PostTypeId": "1", "AnswerCount": "3", "OwnerUserId": "1128289"}, "25946182": {"CommentCount": "0", "Body": "<p>I've never seen that but, i don't think so...\ni tried to compile it, but it doesn't work, i can't really see the use, but that doesn't mean it is impossible... </p>\n<p>To my knowing, static variables need to be define, so they can be init with something, so it can be used (at least that is what most times do)... and well with static functions with template there is no problem... just the static variable, unless you find a way to init a template static variable, with out knowing the template type, than it might be done...  </p>\n", "CreationDate": "2014-09-20T07:03:12.407", "ParentId": "25946089", "Id": "25946182", "LastActivityDate": "2014-09-20T07:03:12.407", "PostTypeId": "2", "Score": "0", "OwnerUserId": "3394510"}, "25946197": {"CommentCount": "2", "Body": "<p>Yes, but only static addresses with linkage will initialize a pointer template parameter. Your <code>char *</code> probably didn't work with a string literal, because those have no linkage.</p>\n<p>Use a named, <code>extern</code> variable instead.</p>\n", "CreationDate": "2014-09-20T07:04:32.873", "ParentId": "25946089", "Id": "25946197", "LastActivityDate": "2014-09-20T07:04:32.873", "PostTypeId": "2", "Score": "1", "OwnerUserId": "153285"}, "bq_ids": {"n4140": {"so_25946089_25946341_0": {"length": 21, "quality": 0.7777777777777778, "section_id": 87}}, "n3337": {"so_25946089_25946341_0": {"length": 20, "quality": 0.7407407407407407, "section_id": 82}}}});