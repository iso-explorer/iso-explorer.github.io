post_cb({"bq_ids": {"n4140": {"so_15454403_15454460_1": {"length": 45, "quality": 1.0, "section_id": 6106}, "so_15454403_15454460_2": {"length": 27, "quality": 0.9642857142857143, "section_id": 7172}}, "n3337": {"so_15454403_15454460_1": {"length": 45, "quality": 1.0, "section_id": 5872}, "so_15454403_15454460_2": {"length": 27, "quality": 0.9642857142857143, "section_id": 6916}}, "n4659": {"so_15454403_15454460_1": {"length": 45, "quality": 1.0, "section_id": 7603}, "so_15454403_15454460_2": {"length": 25, "quality": 0.8928571428571429, "section_id": 8680}}}, "15454460": {"Id": "15454460", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_15454403_15454460_0\">is it possible to explicitly delete an object that has been initialized on the stack?</p>\n</blockquote>\n<p><strong>No</strong>, it is not possible.</p>\n<p>According to Paragraph 5.3.5/2 of the C++11 Standard on <code>delete</code> expressions:</p>\n<blockquote>\n<p id=\"so_15454403_15454460_1\">If the operand has a class type, the operand is converted to a pointer type by calling the above-mentioned\n  conversion function, and the converted operand is used in place of the original operand for the remainder of\n  this section. <strong>In the first alternative (delete object), the value of the operand of delete may be a null pointer \n  value, a pointer to a non-array object created by a previous new-expression, or a pointer to a subobject (1.8)\n  representing a base class of such an object (Clause 10). If not, the behavior is undefined</strong>. [...]</p>\n</blockquote>\n<p>Also relevant is Paragraph 3.7.3/3 about variables with automatic storage duration (i.e. allocated \"on the stack\"):</p>\n<blockquote>\n<p id=\"so_15454403_15454460_2\">If a variable with automatic storage duration has initialization or a destructor with side effects, <strong>it shall not\n  be destroyed before the end of its block</strong>, nor shall it be eliminated as an optimization even if it appears to\n  be unused, except that a class object or its copy/move may be eliminated as specified in 12.8.</p>\n</blockquote>\n", "LastActivityDate": "2013-03-16T20:38:12.823", "CommentCount": "0", "CreationDate": "2013-03-16T20:38:12.823", "ParentId": "15454403", "Score": "3", "OwnerUserId": "1932150"}, "15454434": {"Id": "15454434", "PostTypeId": "2", "Body": "<p>Short and only answer would be no.</p>\n<p>If an object is allocated on the stack it's not actually you that allocates it but the compiler that does it for you. It's also the compilers to responsibility to \"unallocate\" (or \"delete\") the object when the scope of the function ends.</p>\n<p>The only reason to use <code>delete</code> is to deallocate something you allocated with <code>new</code>.</p>\n", "LastActivityDate": "2013-03-16T20:35:11.453", "CommentCount": "0", "CreationDate": "2013-03-16T20:35:11.453", "ParentId": "15454403", "Score": "2", "OwnerUserId": "440558"}, "15454403": {"ViewCount": "501", "Body": "<p>Just wondering since I am working with a partner on a C++ project,\nis it possible to explicitly delete an object that has been initialized on the stack? \n(so without pointer)</p>\n<p>For example:</p>\n<pre><code>MinHeap h(data); // on stack\n</code></pre>\n<p>Vs </p>\n<pre><code>MinHeap *h = new MinHeap();\n</code></pre>\n<p>This has never come up before since I always allocated memory on the heap for an large object.</p>\n", "AcceptedAnswerId": "15454460", "Title": "Deleting an object off the stack?", "CreationDate": "2013-03-16T20:32:24.847", "Id": "15454403", "CommentCount": "3", "LastEditDate": "2015-07-03T21:25:09.877", "PostTypeId": "1", "LastEditorUserId": "4370109", "LastActivityDate": "2015-07-03T21:25:09.877", "Score": "2", "OwnerUserId": "2017327", "Tags": "<c++><object><stack>", "AnswerCount": "3"}, "15454432": {"Id": "15454432", "PostTypeId": "2", "Body": "<p>A stack variable is always valid in its current scope. You can enforce the scope (and thus freeing the allocated memory) by using curly brackets around the block you want to have the instance valid in:</p>\n<pre><code>{\n  MinHeap h(data);\n  // Do stuff here\n\n} // h gets freed here\n</code></pre>\n", "LastEditorUserId": "391850", "LastActivityDate": "2013-03-16T20:45:36.673", "Score": "9", "CreationDate": "2013-03-16T20:34:55.300", "ParentId": "15454403", "CommentCount": "0", "OwnerUserId": "391850", "LastEditDate": "2013-03-16T20:45:36.673"}});