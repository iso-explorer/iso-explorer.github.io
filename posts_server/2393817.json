post_cb({"2393817": {"CommentCount": "2", "ViewCount": "749", "CreationDate": "2010-03-06T19:29:47.620", "LastActivityDate": "2010-03-06T21:01:25.247", "Title": "C++: Why isn't operator placement new recognized as an inline friend function in a (template) class in VS2005?", "AcceptedAnswerId": "2394085", "PostTypeId": "1", "Id": "2393817", "Score": "1", "Body": "<p>I've inherited a Visual Studio 6.0 project to convert to 2005. It includes this fantastic MyClass class below that client code uses everywhere by invoking placement new on an instance of it (greatly simplified here):</p>\n<pre><code>#include &lt;new&gt;\n#include &lt;cstdio&gt;\n\ntemplate&lt;class T&gt;\nclass MyClass {\npublic:\n\n    // This is what the author assumed would be called on placement new.\n    inline friend void* operator new(size_t u_size, MyClass&lt;T&gt;&amp; mc) {\n        printf(\"MyClass friend placement new\\n\");\n        // ...\n        return 0;\n    }\n\n    // This is just to show koenig lookup works on normal functions.\n    inline friend void hello(MyClass&lt;T&gt;&amp; mc) {\n        printf(\"Hello called with koenig lookup\\n\");\n        // ...\n    }\n\n    // This was part of the original class, gets called further below.\n    operator unsigned int*() {\n        printf(\"Converting for default placement new\\n\");\n        // ...\n        return 0;\n    }\n};\n\n/* This gets called in VS2005 if un-commented.\ntemplate&lt;class T&gt;\nvoid* operator new(size_t u_size, MyClass&lt;T&gt;&amp; mc) {\n    printf(\"MyClass placement new non-friend non-inline\\n\");\n    // ***\n    return 0;\n}\n*/\n\nclass DummyClass {    \n   int a;\n};\n\nvoid testfunction() {\n    MyClass&lt;DummyClass&gt; mc;\n    hello(mc);\n    void* a = new(mc) DummyClass; // Placement new call\n\n    char c;\n    gets(&amp;c);\n}\n</code></pre>\n<p>When I run \"testfunction()\" in VS2005, at the placement new call, the operator \"inline friend void* operator new(...)\" in MyClass never gets called. Instead, \"operator unsigned int*()\" gets called, the result is cast to void*, and the default  placement operator new is invoked instead (so \"Converting for default placement new\" is displayed).</p>\n<p>In VS6, the placement new calls \"inline friend void* operator new(...)\" in MyClass instead (so \"CMyClass friend placement new\" is displayed), which is what the author intended, but then again VS6 implements inline friends in a weird way.</p>\n<p>Why doesn't VS2005 recognize the inline friend placement operator new using argument-dependent lookup? It recognizes the hello() function using arguments (so \"Hello called with koenig lookup\" is displayed), but it doesn't work for placement new.</p>\n<p>For reference, this seems to happen whether or not MyClass is templated or not (but I left it templated for completeness' sake). Also if you un-comment the non-friend \"operator new\" outside of MyClass, that one gets called properly in VS2005.</p>\n<p>What gives? Is there an error in there? Is placement new a special case for argument-dependent lookup? Is VS2005 right or wrong? What would be standard C++ here?</p>\n<p>For a workaround I was going to use a non-inline friend instead of inline, but that gets ugly with forwards and all, wanted to ask what the deal is here first.</p>\n", "Tags": "<c++><inline><new-operator><friend>", "OwnerUserId": "265770", "AnswerCount": "1"}, "2394085": {"ParentId": "2393817", "CommentCount": "1", "Body": "<p>The problem is that the allocation function is looked up in the global scope, it is not looked up using ADL. Since friend functions defined inside a class are hidden from the enclosing scope, the function is not found.</p>\n<p>5.3.4/9:</p>\n<blockquote>\n<p id=\"so_2393817_2394085_0\">If the new-expression begins with a unary :: operator, the allocation function\u2019s name is looked up in the global scope. Otherwise, if the allocated type is a class type T or array thereof, the allocation function\u2019s name is looked up in the scope of T. If this lookup fails to find the name, or if the allocated type is not a class type, the allocation function\u2019s name is looked up in the global scope.</p>\n</blockquote>\n", "OwnerUserId": "89847", "PostTypeId": "2", "Id": "2394085", "Score": "4", "CreationDate": "2010-03-06T21:01:25.247", "LastActivityDate": "2010-03-06T21:01:25.247"}, "bq_ids": {"n4140": {"so_2393817_2394085_0": {"section_id": 6090, "quality": 1.0, "length": 36}}, "n3337": {"so_2393817_2394085_0": {"section_id": 5858, "quality": 1.0, "length": 36}}, "n4659": {"so_2393817_2394085_0": {"section_id": 7586, "quality": 1.0, "length": 36}}}});