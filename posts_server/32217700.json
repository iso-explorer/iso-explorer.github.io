post_cb({"bq_ids": {"n4140": {"so_32217700_32217804_1": {"length": 6, "quality": 1.0, "section_id": 6168}, "so_32217700_32217804_4": {"length": 36, "quality": 0.9473684210526315, "section_id": 6171}, "so_32217700_32217804_3": {"length": 10, "quality": 1.0, "section_id": 6170}, "so_32217700_32217804_5": {"length": 7, "quality": 0.7777777777777778, "section_id": 6172}, "so_32217700_32217804_2": {"length": 21, "quality": 1.0, "section_id": 6169}, "so_32217700_32217700_1": {"length": 14, "quality": 1.0, "section_id": 6172}, "so_32217700_32217700_0": {"length": 14, "quality": 1.0, "section_id": 6170}}, "n3337": {"so_32217700_32217804_1": {"length": 6, "quality": 1.0, "section_id": 5929}, "so_32217700_32217804_4": {"length": 36, "quality": 0.9473684210526315, "section_id": 5932}, "so_32217700_32217804_3": {"length": 10, "quality": 1.0, "section_id": 5931}, "so_32217700_32217804_5": {"length": 7, "quality": 0.7777777777777778, "section_id": 5933}, "so_32217700_32217804_2": {"length": 21, "quality": 1.0, "section_id": 5930}, "so_32217700_32217700_1": {"length": 14, "quality": 1.0, "section_id": 5933}, "so_32217700_32217700_0": {"length": 14, "quality": 1.0, "section_id": 5931}}, "n4659": {"so_32217700_32217804_1": {"length": 6, "quality": 1.0, "section_id": 7665}, "so_32217700_32217804_4": {"length": 36, "quality": 0.9473684210526315, "section_id": 7669}, "so_32217700_32217804_3": {"length": 10, "quality": 1.0, "section_id": 7668}, "so_32217700_32217804_5": {"length": 7, "quality": 0.7777777777777778, "section_id": 7667}, "so_32217700_32217804_2": {"length": 21, "quality": 1.0, "section_id": 7667}, "so_32217700_32217700_1": {"length": 14, "quality": 1.0, "section_id": 7670}, "so_32217700_32217700_0": {"length": 14, "quality": 1.0, "section_id": 7668}}}, "32217700": {"ViewCount": "55", "Body": "<p>I'm trying to figure out what should be the value category of the result of a conditional expression if its second and third operands are lvalues of class type.</p>\n<p>Example:</p>\n<pre><code>struct S {};\nS x, y;\nvoid foo(bool cond) {\n  cond ? x : y;  // what is the value category of the result?\n}\n</code></pre>\n<p>I'm seeing two different paragraphs in <code>[expr.cond]</code> say different things.</p>\n<p>According to paragraph 4:</p>\n<blockquote>\n<p id=\"so_32217700_32217700_0\">If the second and third operands are glvalues of the same value category and have the same type, <strong>the result is of that type and value category</strong></p>\n</blockquote>\n<p>This paragraph seems to apply, and say that the result is an lvalue, because the second and third operands are both lvalues of the same type.</p>\n<p>According to paragraph 6, however:</p>\n<blockquote>\n<p id=\"so_32217700_32217700_1\">Lvalue-to-rvalue, array-to-pointer, and function-to-pointer standard\n  conversions are performed on the second and third operands. After\n  those conversions, one of the following shall hold:</p>\n<ul>\n<li>The second and third operands have the same type; the result is of    that type. If the operands have class type, the <strong>result is a prvalue temporary of the result type</strong>, which is copy-initialized from either the second operand or the third operand depending on the value of the first operand.</li>\n</ul>\n</blockquote>\n<p>This paragraph also seems to apply, and say that the result of the expression is an rvalue.</p>\n<p>So which is it - lvalue or rvalue? Are the two paragraphs really contradicting each other, or am I missing something subtle?</p>\n", "AcceptedAnswerId": "32217804", "Title": "Conditional expression with class type lvalue operands", "CreationDate": "2015-08-26T03:52:02.413", "Id": "32217700", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2015-08-26T04:05:01.373", "Score": "1", "OwnerUserId": "141719", "Tags": "<c++><conditional-operator><lvalue><rvalue>", "AnswerCount": "1"}, "32217804": {"Id": "32217804", "PostTypeId": "2", "Body": "<p>You have to read the paragraphs in order, and select the first that applies. Emphasis mine.</p>\n<p>1</p>\n<blockquote>\n<p id=\"so_32217700_32217804_0\">...</p>\n</blockquote>\n<p>2</p>\n<blockquote>\n<p id=\"so_32217700_32217804_1\">If either the second or the third operand has type <code>void</code> ...</p>\n</blockquote>\n<p>3</p>\n<blockquote>\n<p id=\"so_32217700_32217804_2\"><strong>Otherwise,</strong> if the second and third operand have different types and either has (possibly cv-qualified) class\n  type, or if both are glvalues of the same value category and the same type except for cv-qualification ...</p>\n</blockquote>\n<p>4</p>\n<blockquote>\n<p id=\"so_32217700_32217804_3\">If the second and third operands are glvalues of the same value category and have the same type ...</p>\n</blockquote>\n<p>5</p>\n<blockquote>\n<p id=\"so_32217700_32217804_4\"><strong>Otherwise,</strong> the result is a prvalue. If the second and third operands do not have the same type, and either\n  has (possibly cv-qualified) class type, overload resolution is used to determine the conversions (if any) to be\n  applied to the operands (13.3.1.2, 13.6). If the overload resolution fails, the program is ill-formed.\n  <strong>Otherwise,\n  the conversions thus determined are applied, and the converted operands are used in place of the original\n  operands for the remainder of this section.</strong></p>\n</blockquote>\n<p>6</p>\n<blockquote>\n<p id=\"so_32217700_32217804_5\">Lvalue-to-rvalue (4.1), array-to-pointer (4.2), and function-to-pointer (4.3) standard conversions are per-\n  formed on the second and third operands. ...</p>\n</blockquote>\n", "LastActivityDate": "2015-08-26T04:05:01.373", "CommentCount": "1", "CreationDate": "2015-08-26T04:05:01.373", "ParentId": "32217700", "Score": "4", "OwnerUserId": "481267"}});