post_cb({"34960981": {"CommentCount": "3", "ViewCount": "152", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2016-01-23T07:46:55.320", "LastActivityDate": "2016-01-23T08:21:23.570", "Title": "Alternate function syntax/function prototypes?", "AcceptedAnswerId": "34961245", "LastEditDate": "2017-05-23T11:59:16.997", "Id": "34960981", "Score": "1", "Body": "<p>For all the time I've been using function pointers in C++ I've been declaring them as <code>void (*function)(void)</code>. This is how I originally saw it in a tutorial and <a href=\"http://www.cprogramming.com/tutorial/function-pointers.html\" rel=\"nofollow noreferrer\">how tutorials still teach it</a>.</p>\n<p>But today, I was reading wikipedia's article about higher order functions when I discovered an example using an alternate syntax in which the <code>*</code> and the brackets surrounding the function pointer's variable/type name were not present, as seen <a href=\"https://en.wikipedia.org/wiki/Higher-order_function#Function_pointers\" rel=\"nofollow noreferrer\">here</a>.</p>\n<p>I tested to see if the form <code>void function(void)</code> worked for variables, arguments and typedefs. It didn't work for variables but it worked for arguments and typedefs with no apparent change, practically interchangeable with the standard function pointer syntax. </p>\n<p>I dug a bit further and found <a href=\"https://stackoverflow.com/questions/32065980/is-there-an-alternate-syntax-to-typedef-function-pointers\">an SO question</a> that seems to imply it's the syntax for a 'function prototype' rather than a function pointer. However <a href=\"https://en.wikipedia.org/wiki/Function_prototype\" rel=\"nofollow noreferrer\">wikipedia's explanation of function prototypes</a> sounds a lot like just predeclaring functions.</p>\n<p>I apologise for the wide scope of my question, but <strong>what exactly is this syntax?</strong></p>\n<ul>\n<li>Does it define a 'function prototype' or a function pointer?</li>\n<li>If it's a function prototype, are function pointers and function\nprototypes the same or do they just behave the same?</li>\n<li>If it's not a function prototype does that mean 'function prototypes'\nare just predeclarations of functions?</li>\n<li>If this syntax is equivalent to the standard function pointer\nsyntax, why is the more verbose (and arguably harder to read) syntax\nthe more commonly taught form?</li>\n<li>Do the syntaxes produce different results/have different meanings\nand I somehow haven't noticed?</li>\n</ul>\n", "Tags": "<c++><syntax><function-pointers><function-prototypes>", "OwnerUserId": "1377706", "AnswerCount": "1"}, "34961245": {"ParentId": "34960981", "CommentCount": "0", "Body": "<p>No, they're not the same. Anymore than arrays and pointers are not the same just because you can write <code>int A[]</code> as a parameter. The specific rule can be found in the draft standard n4567:</p>\n<blockquote>\n<p id=\"so_34960981_34961245_0\">\u00a78.3.5/5 ... After determining the type of each parameter, any\n  parameter of type \"array of <code>T</code>\" or of function type T is adjusted to\n  be \"pointer to <code>T</code>\". ...</p>\n</blockquote>\n<p>It is more explicit later on:</p>\n<blockquote>\n<p id=\"so_34960981_34961245_1\">\u00a713.2/3 ...</p>\n<ul>\n<li><p id=\"so_34960981_34961245_2\">Parameter declarations that differ only in that one is a function type and the other is a pointer to the same function type are\n  equivalent. That is, the function type is adjusted to become a pointer\n  to function type (8.3.5). [ <em>Example:</em></p>\n<pre><code> void h(int());\n void h(int (*)());     // redeclaration of h(int())\n void h(int x()) { }    // definition of h(int())\n void h(int (*x)()) { } // ill-formed: redefinition of h(int())\n</code></pre>\n<p id=\"so_34960981_34961245_3\">\u2014 <em>end example</em> ] ...</p></li>\n</ul>\n</blockquote>\n<p>The rule applies in other places as well (not a complete list):</p>\n<ul>\n<li>non-type template parameters</li>\n<li>template argument deduction</li>\n<li>exception handlers</li>\n</ul>\n", "OwnerUserId": "5829474", "PostTypeId": "2", "Id": "34961245", "Score": "1", "CreationDate": "2016-01-23T08:21:23.570", "LastActivityDate": "2016-01-23T08:21:23.570"}, "bq_ids": {"n4140": {"so_34960981_34961245_0": {"section_id": 3241, "quality": 0.8461538461538461, "length": 11}, "so_34960981_34961245_2": {"section_id": 558, "quality": 0.8636363636363636, "length": 19}}, "n3337": {"so_34960981_34961245_0": {"section_id": 3114, "quality": 0.8461538461538461, "length": 11}, "so_34960981_34961245_2": {"section_id": 549, "quality": 0.8636363636363636, "length": 19}}, "n4659": {"so_34960981_34961245_0": {"section_id": 3997, "quality": 0.9230769230769231, "length": 12}, "so_34960981_34961245_2": {"section_id": 581, "quality": 0.8636363636363636, "length": 19}}}});