post_cb({"35027861": {"CommentCount": "5", "ViewCount": "78", "CreationDate": "2016-01-27T02:39:37.513", "LastActivityDate": "2016-01-27T03:46:34.603", "Title": "Override 'new' with a pool allocator; return NULL?", "FavoriteCount": "2", "PostTypeId": "1", "Id": "35027861", "Score": "2", "Body": "<p>Is there a way to <em>not</em> call a class constructor if operator new returns null?</p>\n<p>Consider this class C:</p>\n<pre><code>class C {\n    public:\n        C() { printf(\"%p-&gt;C()\\n\", this); }\n        ~C() { printf(\"%p-&gt;~C()\\n\", this); }\n\n        static void* operator new(std::size_t sz) {\n            printf(\"new!\\n\");\n            return NULL;\n        }\n};\n\nint main()\n{   \n    C* c = new C();\n    printf(\"new C returns %p\\n\", c);\n    return 0;\n}\n</code></pre>\n<p>When I run I get this:</p>\n<pre><code>new!\n0x0-&gt;C()\nnew C returns 0x0\n</code></pre>\n<p>So I can make new return NULL but it still calls the constructor with a null 'this' pointer.  Is there any way to write my own allocator that allocates memory, explicitly calls the c'tor if possible, then returns?</p>\n<p>Thanks!</p>\n", "Tags": "<c++>", "OwnerUserId": "407793", "AnswerCount": "1"}, "35028046": {"ParentId": "35027861", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Returning a null pointer from an <code>operator new</code> means allocation failed, but only if the function is declared <code>noexcept</code>, otherwise the function most throw a <code>std::bad_alloc</code> (or something derived from it).</p>\n<p>As it stands your program has undefined behavior, if you add <code>noexcept</code> you should find the constructor isn't called as the function now correctly signals that allocation failed.</p>\n<pre><code>static void* operator new(std::size_t sz) noexcept\n</code></pre>\n<p>[basic.stc.dynamic.allocation]</p>\n<blockquote id=\"so_35027861_35028046_0\">\n<ol>\n<li>An allocation function shall be a class member function or a global function;[...]</li>\n</ol>\n</blockquote>\n<blockquote id=\"so_35027861_35028046_1\">\n<ol start=\"3\">\n<li>[...] If an allocation function that has a non-throwing exception specification (15.4) fails to allocate storage, it shall return a null pointer. Any other allocation function that fails to allocate storage shall indicate failure only by throwing an exception (15.1) of a type that would match a handler (15.3) of type <code>std::bad_alloc</code> (18.6.2.1).</li>\n</ol>\n</blockquote>\n", "OwnerUserId": "657267", "LastEditorUserId": "657267", "LastEditDate": "2016-01-27T03:46:34.603", "Id": "35028046", "Score": "2", "CreationDate": "2016-01-27T03:00:11.090", "LastActivityDate": "2016-01-27T03:46:34.603"}, "bq_ids": {"n4140": {"so_35027861_35028046_1": {"section_id": 7178, "quality": 0.78125, "length": 25}, "so_35027861_35028046_0": {"section_id": 7176, "quality": 1.0, "length": 7}}, "n3337": {"so_35027861_35028046_1": {"section_id": 6922, "quality": 0.78125, "length": 25}, "so_35027861_35028046_0": {"section_id": 6920, "quality": 1.0, "length": 7}}, "n4659": {"so_35027861_35028046_1": {"section_id": 8686, "quality": 0.84375, "length": 27}, "so_35027861_35028046_0": {"section_id": 8684, "quality": 1.0, "length": 7}}}});