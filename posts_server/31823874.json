post_cb({"bq_ids": {"n4140": {"so_31823874_31831435_0": {"length": 23, "quality": 0.9583333333333334, "section_id": 6173}}, "n3337": {"so_31823874_31831435_0": {"length": 23, "quality": 0.9583333333333334, "section_id": 5934}}, "n4659": {"so_31823874_31831435_0": {"length": 23, "quality": 0.9583333333333334, "section_id": 7675}}}, "31831435": {"Id": "31831435", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_31823874_31831435_0\">The assignment operator (=) and the compound assignment operators all group right-to-left. [...] In all cases, the <strong>assignment</strong> is sequenced <strong>after</strong> the value <strong>computation</strong> of the right and left operands, and before the value computation of the assignment expression. [...]</p>\n<p id=\"so_31823874_31831435_1\">[N4431 \u00a75.18/1]</p>\n</blockquote>\n<p>Under the premise that in your case the value computation of the left hand side (involving merely a member access, not a read) does <em>not</em> cause undefined behaviour, I'd apply the above as follows:</p>\n<ol>\n<li>The value computation of the right side reads <code>u.f</code>, which is the active member of the union. So everything is good.</li>\n<li>The assignment is executed. This involves writing the obtained result to <code>u.i</code>, which <em>now</em> changes the active member of the union.</li>\n</ol>\n", "LastEditorUserId": "1116364", "LastActivityDate": "2015-08-05T12:08:44.680", "Score": "6", "CreationDate": "2015-08-05T11:37:44.117", "ParentId": "31823874", "CommentCount": "2", "OwnerUserId": "1116364", "LastEditDate": "2015-08-05T12:08:44.680"}, "31823874": {"ViewCount": "251", "Body": "<p>Is this code well-defined?</p>\n<pre><code>int main()    \n{    \n    union     \n    {    \n        int i;    \n        float f;    \n    } u;    \n\n    u.f = 5.0;    \n    u.i = u.f;       // ?????\n}    \n</code></pre>\n<p>It accesses two different union members in one expression so I am wondering if it falls foul of the [class.union]/1 provisions about <em>active member</em> of a union.  </p>\n<p>The C++ Standard seems to underspecify which operations change the active member for builtin types, and what happens if an inactive member is read or written.</p>\n", "Title": "Assignment between union members", "CreationDate": "2015-08-05T05:09:03.850", "LastActivityDate": "2015-08-05T12:08:44.680", "CommentCount": "4", "FavoriteCount": "3", "PostTypeId": "1", "Id": "31823874", "Score": "13", "OwnerUserId": "1505939", "Tags": "<c++><language-lawyer><unions>", "AnswerCount": "3"}, "31828254": {"Id": "31828254", "PostTypeId": "2", "Body": "<p>Inactive members can be written to. That is in fact the only way to make them active. The active member has no restrictions; it can be read from and written to. </p>\n<p>You <em>can</em> take the address of an inactive member. This is a valid way to perform the write:</p>\n<pre><code>union {\n  int i;\n  float f;\n} u;\nfloat* pf = &amp;u.f; // Does NOT change the active member.\nu.i = 3;\n*pf = 3.0; // Changes the active member.\n</code></pre>\n<p>In your example, the active member can only become <code>u.i</code> by writing <code>5</code> to it, which means that the value <code>u.f</code> must have been read. </p>\n", "LastActivityDate": "2015-08-05T09:16:30.177", "CommentCount": "10", "CreationDate": "2015-08-05T09:16:30.177", "ParentId": "31823874", "Score": "4", "OwnerUserId": "15416"}, "31825317": {"Id": "31825317", "PostTypeId": "2", "Body": "<p>By looking at [class.union]/1, from the considerations about standard layout unions containing standard layout unions sharing a common initial sequence it means that the following is ok</p>\n<pre><code>int main()\n{\n   union \n   {\n      union \n      {\n          int x ;\n          float y ;\n      } v ;\n      union \n      {\n          int x ;\n          double z ;\n      } w ;      \n   } u ;\n\n   u.v.x = 2 ;\n   int n = u.w.x ; // n contains 2\n}\n</code></pre>\n<p>Here the common initial sequence is <code>int x ;</code>.</p>\n<p>That's not the exactly the question but tells us that this kind of mix is OK.</p>\n", "LastActivityDate": "2015-08-05T06:51:04.643", "CommentCount": "1", "CreationDate": "2015-08-05T06:51:04.643", "ParentId": "31823874", "Score": "-2", "OwnerUserId": "4877767"}});