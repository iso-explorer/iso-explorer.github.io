post_cb({"13325311": {"CommentCount": "1", "ViewCount": "124", "CreationDate": "2012-11-10T19:24:58.810", "LastActivityDate": "2012-11-10T19:42:55.837", "Title": "Function signature : C++ Templates complete guide", "AcceptedAnswerId": "13325448", "PostTypeId": "1", "Id": "13325311", "Score": "-1", "Body": "<p>I was reading book \"template compelte guide\" , I section : <strong>12.2.1 Signatures</strong> I couldn't understand a sentence of author :</p>\n<blockquote>\n<p id=\"so_13325311_13325311_0\">Its return type, if the function is generated from a function template</p>\n</blockquote>\n<p>what does the author means by \"function generated by function template\" ? , is he talking about template-id here? if so, why does return type matters in the case, since signature is defined by us?</p>\n<p>A trivial example will be helpful, thanks.</p>\n", "Tags": "<c++><templates>", "OwnerUserId": "962474", "AnswerCount": "1"}, "13325448": {"ParentId": "13325311", "CommentCount": "5", "Body": "<p>In section 12.2.1 the authors describe under which situations declarations of functions can coexist. The declaration of function templates can coexist even if they have a different return type, e.g., you can declare:</p>\n<pre><code>template &lt;typename T&gt; int  f();\ntepmlate &lt;typename T&gt; char f();\n</code></pre>\n<p>If you make these functions non-templates, you can't even declare them. Of course, in the form above you won't be able to call the function although you may be able to explicitly the select one of the functions using a cast (I'm not sure about this).</p>\n<p>The primary use of having functions with different return types coexist (although this wasn't the original intent), is to remove some of these functions from the overload set based on condition, e.g.:</p>\n<pre><code>template &lt;typename T&gt;\ntypename std::enable_if&lt;std::numeric_limits&lt;T&gt;::is_specialized, T&gt;::type\nf(T); // used for types for which std::numeric_limits&lt;T&gt; is specialied\n\ntemplate &lt;typename T&gt;\ntypename std::enable_if&lt;!std::numeric_limits&lt;T&gt;::is_specialized, T&gt;::type\nf(T); // used for types for which std::numeric_limits&lt;T&gt; is not specialied\n</code></pre>\n", "OwnerUserId": "1120273", "PostTypeId": "2", "Id": "13325448", "Score": "2", "CreationDate": "2012-11-10T19:42:55.837", "LastActivityDate": "2012-11-10T19:42:55.837"}, "bq_ids": {"n4140": {"so_13325311_13325311_0": {"section_id": 7104, "quality": 0.8571428571428571, "length": 6}}, "n3337": {"so_13325311_13325311_0": {"section_id": 6848, "quality": 0.8571428571428571, "length": 6}}, "n4659": {"so_13325311_13325311_0": {"section_id": 8605, "quality": 0.8571428571428571, "length": 6}}}});