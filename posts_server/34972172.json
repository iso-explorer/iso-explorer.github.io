post_cb({"34972172": {"ViewCount": "83", "Body": "<p>This following code does not compile:</p>\n<pre><code>int main() {\n  int a[][] = { { 0, 1 },\n                { 2, 3 } };\n}\n</code></pre>\n<p>The error message produced is</p>\n<pre><code>error: declaration of 'a' as multidimensional array must have bounds for all dimensions except the first\nint a[][] = { { 0, 1 },\n           ^\n</code></pre>\n<p>Is this specified by the standard? If so, why is that? I think deducing bounds here would be very easy.</p>\n", "Title": "Failed to deduce bounds from initializer for multi-dimensional arrays", "CreationDate": "2016-01-24T04:19:33.573", "LastActivityDate": "2016-01-24T08:21:25.920", "CommentCount": "3", "PostTypeId": "1", "Id": "34972172", "Score": "1", "OwnerUserId": "1348273", "Tags": "<c++><arrays><language-lawyer><array-initialization>", "AnswerCount": "1"}, "34973290": {"Id": "34973290", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_34972172_34973290_0\">Is this specified by the standard?</p>\n</blockquote>\n<p>Well, yeah.</p>\n<blockquote>\n<p id=\"so_34972172_34973290_1\">\u00a78.3.4/3 When several \u201carray of\u201d specifications are adjacent, a\n  multidimensional array type is created; only the first of the constant\n  expressions that specify the bounds of the arrays may be omitted. In\n  addition to declarations in which an incomplete object type is\n  allowed, an array bound may be omitted in some cases in the\n  declaration of a function parameter (8.3.5). An array bound may also\n  be omitted when the declarator is followed by an <em>initializer</em> (8.5).\n  In this case the bound is calculated from the number of initial\n  elements (say, <code>N</code>) supplied (8.5.1), and the type of the identifier\n  of <code>D</code> is \u201carray of <code>N</code> <code>T</code>\u201d. Furthermore, if there is a preceding\n  declaration of the entity in the same scope in which the bound was\n  specified, an omitted array bound is taken to be the same as in that\n  earlier declaration, and similarly for the definition of a static data\n  member of a class.</p>\n</blockquote>\n<blockquote>\n<p id=\"so_34972172_34973290_2\">If so, why is that?</p>\n</blockquote>\n<p>For one thing, an array can't be constructed from an incomplete type (<code>void</code> for example). An array of unknown bound is one of those incomplete types:</p>\n<blockquote>\n<p id=\"so_34972172_34973290_3\">\u00a78.3.4/1 ... An object of array type contains a contiguously allocated\n  non-empty set of <code>N</code> subobjects of type <code>T</code>. Except as noted below, if\n  the constant expression is omitted, the type of the identifier of <code>D</code>\n  is \u201c <em>derived-declarator-type-list</em> array of unknown bound of <code>T</code>\u201d, an\n  incomplete object type. ...</p>\n<p id=\"so_34972172_34973290_4\">\u00a78.3.4/2 An array can be constructed from one of the fundamental types\n  (except <code>void</code>), from a pointer, from a pointer to member, from a\n  class, from an enumeration type, or from another array.</p>\n</blockquote>\n<p>Furthermore:</p>\n<blockquote>\n<p id=\"so_34972172_34973290_5\">\u00a73.9 A class that has been declared but not defined, an enumeration\n  type in certain contexts (7.2), or an array of unknown size or of\n  incomplete element type, is an <em>incompletely-defined object\n  type</em>.<sup>45</sup> ...</p>\n<p id=\"so_34972172_34973290_6\"><sup>45) The size and layout of an instance of an incompletely-defined\n  object type is unknown.</sup></p>\n</blockquote>\n<blockquote>\n<p id=\"so_34972172_34973290_7\">I think deducing bounds here would be very easy.</p>\n</blockquote>\n<p>There is a common mistake beginners make, that the compiler has magical powers. The compiler works with information it <em>already</em> has, it does not <em>create</em> information out of thin air. If you asked it to create an object of unknown size, it simply would not be able to do so. See the following examples:</p>\n<blockquote>\n<p id=\"so_34972172_34973290_8\">Only the innermost dimension can be omitted. The size of elements in\n  an array are deduced for the type given to the array variable. The\n  type of elements must therefore have a known size.</p>\n<ul>\n<li><code>char a[] = { ... };</code> has elements (e.g. <code>a[0]</code>) <strong>of size</strong> 1 (8bit), and has an unknown size.</li>\n<li><code>char a[6] = { ... };</code> has elements <strong>of size</strong> 1, and has size 6.</li>\n<li><code>char a[][6] = { ... };</code> has elements (e.g. <code>a[0]</code>, which is an array) <strong>of size</strong> 6, and has an unknown size.</li>\n<li><code>char a[10][6] = { ... };</code> has elements <strong>of size</strong> 6. and has size 60.</li>\n</ul>\n<p id=\"so_34972172_34973290_9\">Not allowed:</p>\n<ul>\n<li><code>char a[10][] = { ... };</code> would have 10 elements <strong>of unknown size</strong>.</li>\n<li><code>char a[][] = { ... };</code> would have an unknown number of elements <strong>of unknown size</strong>.</li>\n</ul>\n</blockquote>\n<p><a href=\"https://stackoverflow.com/a/7433226\">Source</a></p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2016-01-24T08:21:25.920", "Score": "3", "CreationDate": "2016-01-24T07:33:54.663", "ParentId": "34972172", "CommentCount": "4", "OwnerUserId": "5832387", "LastEditDate": "2017-05-23T12:23:27.147"}, "bq_ids": {"n4140": {"so_34972172_34973290_1": {"length": 74, "quality": 0.9487179487179487, "section_id": 3230}, "so_34972172_34973290_3": {"length": 24, "quality": 0.9230769230769231, "section_id": 3228}, "so_34972172_34973290_4": {"length": 16, "quality": 0.9411764705882353, "section_id": 3229}, "so_34972172_34973290_5": {"length": 17, "quality": 0.9444444444444444, "section_id": 7203}, "so_34972172_34973290_6": {"length": 7, "quality": 0.875, "section_id": 7203}}, "n3337": {"so_34972172_34973290_1": {"length": 74, "quality": 0.9487179487179487, "section_id": 3103}, "so_34972172_34973290_3": {"length": 24, "quality": 0.9230769230769231, "section_id": 3101}, "so_34972172_34973290_4": {"length": 16, "quality": 0.9411764705882353, "section_id": 3102}, "so_34972172_34973290_5": {"length": 13, "quality": 0.7222222222222222, "section_id": 6947}, "so_34972172_34973290_6": {"length": 7, "quality": 0.875, "section_id": 6947}}, "n4659": {"so_34972172_34973290_1": {"length": 74, "quality": 0.9487179487179487, "section_id": 3987}, "so_34972172_34973290_3": {"length": 24, "quality": 0.9230769230769231, "section_id": 3985}, "so_34972172_34973290_4": {"length": 16, "quality": 0.9411764705882353, "section_id": 3986}, "so_34972172_34973290_5": {"length": 16, "quality": 0.8888888888888888, "section_id": 8712}, "so_34972172_34973290_6": {"length": 7, "quality": 0.875, "section_id": 8712}}}});