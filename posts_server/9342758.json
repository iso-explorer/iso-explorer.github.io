post_cb({"9342993": {"ParentId": "9342758", "CommentCount": "2", "Body": "<p>This is dealt with in <strong>8.5 Initializers [dcl.init]</strong>.</p>\n<hr>\n<p><strong>Zero Initialization</strong></p>\n<blockquote>\n<p id=\"so_9342758_9342993_0\"><strong>5/</strong> To zero-initialize an object or reference of type <code>T</code> means:</p>\n<p id=\"so_9342758_9342993_1\">\u2014 if <code>T</code> is a scalar type (3.9), the object is set to the value 0 (zero), taken as an integral constant expression, converted to <code>T</code>. As specified in 4.10, converting an integral constant expression whose value is 0 to a pointer type results in a null pointer\n  value.</p>\n<p id=\"so_9342758_9342993_2\">\u2014 if <code>T</code> is a (possibly cv-qualified) non-union class type, each non-static data member and each base-class subobject is zero-initialized and padding is initialized to zero bits;</p>\n<p id=\"so_9342758_9342993_3\">\u2014 if <code>T</code> is a (possibly cv-qualified) union type, the object\u2019s first non-static named data member is zeroinitialized and padding is initialized to zero bits;</p>\n<p id=\"so_9342758_9342993_4\">\u2014 if <code>T</code> is an array type, each element is zero-initialized;</p>\n<p id=\"so_9342758_9342993_5\">\u2014 if <code>T</code> is a reference type, no initialization is performed.</p>\n</blockquote>\n<p>Basically, it's equivalent to a <code>memset(&amp;obj, 0, sizeof(objt));</code>, except that it account that the memory representation of a null pointer might not be a 0 value (even though it is represented by a 0 in the language).</p>\n<pre><code>// foo.cpp\nstatic char const* p;     // p is zero-initialized\n                          // during static initialization\n\nstatic void init() {\n  if (!p) { p = new char[500]; }  // fine as p has been 0-initialized\n}\n</code></pre>\n<p><em>Note: personally I still prefer to use <code>= nullptr</code> to initialize <code>p</code>, just to make the intent clear...</em></p>\n<hr>\n<p><strong>Default Initialization</strong></p>\n<blockquote>\n<p id=\"so_9342758_9342993_6\"><strong>6/</strong> To default-initialize an object of type <code>T</code> means:</p>\n<p id=\"so_9342758_9342993_7\">\u2014 if <code>T</code> is a (possibly cv-qualified) class type (Clause 9), the default constructor for <code>T</code> is called (and the initialization is ill-formed if <code>T</code> has no accessible default constructor);</p>\n<p id=\"so_9342758_9342993_8\">\u2014 if <code>T</code> is an array type, each element is default-initialized;</p>\n<p id=\"so_9342758_9342993_9\">\u2014 otherwise, no initialization is performed.</p>\n<p id=\"so_9342758_9342993_10\">If a program calls for the default initialization of an object of a const-qualified type <code>T</code>, <code>T</code> shall be a class type with a user-provided default constructor.</p>\n</blockquote>\n<p>Or basically, a call to the default constructor, accounting for arrays, at least for classes. The last point is a caveat for built-ins (such as <code>int</code>). Those are simply left as is (with garbage inside).</p>\n<p>Default initialization is what is called when you defined a variable but do not initialize it explicitly. It is also what happens to attributes of a class that are not listed in the initializer list. So the caveat for built-ins is quite important to a programmer.</p>\n<pre><code>int function() {\n  int a;         // &lt;-- a is default-initialized (which means nothing happens...)\n  return a;      // &lt;-- uses a, so technically undefined behavior\n}\n\nstruct A { int a; A() {} }; // During the call to A::A(),\n                            // A::a is default-initialized (nothing happens...)\n</code></pre>\n<p>The absence of explicit initialization is a left-over from C. It's normally so for optimization reasons but leads to Undefined Behavior if one attempts to use the value...</p>\n<hr>\n<p><strong>Value Initialization</strong></p>\n<blockquote>\n<p id=\"so_9342758_9342993_11\"><strong>7/</strong> To value-initialize an object of type <code>T</code> means:</p>\n<p id=\"so_9342758_9342993_12\">\u2014 if <code>T</code> is a (possibly cv-qualified) class type (Clause 9) with a user-provided constructor (12.1), then the default constructor for <code>T</code> is called (and the initialization is ill-formed if <code>T</code> has no accessible default constructor);</p>\n<p id=\"so_9342758_9342993_13\">\u2014 if <code>T</code> is a (possibly cv-qualified) non-union class type without a user-provided constructor, then the object is zero-initialized and, if <code>T</code>\u2019s implicitly-declared default constructor is non-trivial, that constructor is called.</p>\n<p id=\"so_9342758_9342993_14\">\u2014 if <code>T</code> is an array type, then each element is value-initialized;</p>\n<p id=\"so_9342758_9342993_15\">\u2014 otherwise, the object is zero-initialized.</p>\n<p id=\"so_9342758_9342993_16\">An object that is value-initialized is deemed to be constructed and thus subject to provisions of this International Standard applying to \u201cconstructed\u201d objects, objects \u201cfor which the constructor has completed,\u201d etc., even if no constructor is invoked for the object\u2019s initialization.</p>\n</blockquote>\n<p>It is a mix of both the above, meaning that the following syntax:</p>\n<pre><code>template &lt;typename T&gt; T value() { return T(); }\n                                         ^~~\n</code></pre>\n<p>provides a suitably initialized instance of <code>T</code> whether <code>T</code> is a class type or a built-in type. It's important for templated code to be able to have such a unified syntax.</p>\n<p>Note that with C++11, it is also possible to use <code>T{}</code> to achieve the same effect (which helps disambiguates from functions).</p>\n</hr></hr></hr>", "OwnerUserId": "147192", "PostTypeId": "2", "Id": "9342993", "Score": "3", "CreationDate": "2012-02-18T16:39:53.620", "LastActivityDate": "2012-02-18T16:39:53.620"}, "9342758": {"CreationDate": "2012-02-18T16:12:38.817", "CommentCount": "0", "ViewCount": "223", "PostTypeId": "1", "ClosedDate": "2012-02-19T12:51:10.867", "LastEditorUserId": "-1", "LastActivityDate": "2012-02-18T17:22:41.843", "LastEditDate": "2017-05-23T12:15:56.273", "AcceptedAnswerId": "9342812", "FavoriteCount": "2", "Title": "3 types of Initializations", "Id": "9342758", "Score": "3", "Body": "<blockquote>\n<p id=\"so_9342758_9342758_0\"><strong>Possible Duplicate:</strong><br>\n<a href=\"https://stackoverflow.com/questions/1613341/what-do-the-following-phrases-mean-in-c-zero-default-and-value-initializat\">What do the following phrases mean in C++: zero-, default- and value-initialization?</a> </br></p>\n</blockquote>\n<p>Today I came to know about 3 types of initialization in C++:</p>\n<ul>\n<li>Zero Initialization    </li>\n<li>Default Initialization </li>\n<li>Value Initialization</li>\n</ul>\n<p>I have googled about it but I found no satisfactory results. All I get is a few standards. What I have understood until now is this: in case of value initialization, a data member can get value equal to zero in some cases. </p>\n<p>Please elaborate them (standards) with examples. Also please don't just provide the text from the standard.</p>\n<p>Thanks </p>\n", "Tags": "<c++><initialization><value-initialization>", "OwnerUserId": "1152334", "AnswerCount": "2"}, "9342812": {"ParentId": "9342758", "CommentCount": "5", "Body": "<p>The types of initialization refer to the language grammar. Here are two examples:</p>\n<pre><code>T * p1 = new T;\nT * p2 = new T();\n</code></pre>\n<p>The object <code>*p1</code> is default-initialized, and the object <code>*p2</code> is value-initialized.</p>\n<p>The effect of the initialization depends on the type <code>T</code>: 1) If <code>T</code> is a fundamental, then default-initialization does nothing (i.e. the object is left <em>uninitialized</em>), while value initialization equals zero initialization in that case and means the object is set to zero.</p>\n<p>2) If <code>T</code> is an aggregate (i.e. class without constructors or destructor or assignment operator), then each element is recursively default- or value-initialized.</p>\n<p>3) If <code>T</code> is of class-type and does have user-defined constructors, then both default- and value-initialization cause a call to the default constructor.</p>\n<p>Note that member objects of classes with constructors can in turn be default- or value-initialized:</p>\n<pre><code>struct Foo {\n    int x;\n    int y;\n    Foo() : x() { }\n};\n</code></pre>\n<p>Now when you say <code>Foo a;</code> then <code>a</code> is default-initialized, so the default constructor is called. This in turn causes <code>a.x</code> to be value-, i.e. zero-initialized, while <code>a.y</code> remains default-, i.e. un-initialized.</p>\n<p>(Note that it's not really possible to value-initialize an automatic object, though in C++11, brace-initialization may be used to cause value-initialization, as in <code>Foo a{};</code>. (This behaves exactly the same as <code>Foo a;</code> in our example, consequent to the third paragraph.))</p>\n", "OwnerUserId": "596781", "PostTypeId": "2", "Id": "9342812", "Score": "6", "CreationDate": "2012-02-18T16:18:38.460", "LastActivityDate": "2012-02-18T16:18:38.460"}, "bq_ids": {"n4140": {"so_9342758_9342993_7": {"section_id": 3286, "quality": 0.9230769230769231, "length": 12}, "so_9342758_9342993_5": {"section_id": 3285, "quality": 1.0, "length": 4}, "so_9342758_9342993_11": {"section_id": 3287, "quality": 1.0, "length": 4}, "so_9342758_9342993_8": {"section_id": 3286, "quality": 1.0, "length": 5}, "so_9342758_9342993_10": {"section_id": 3286, "quality": 1.0, "length": 11}, "so_9342758_9342993_6": {"section_id": 3286, "quality": 1.0, "length": 4}, "so_9342758_9342993_13": {"section_id": 3287, "quality": 0.75, "length": 12}, "so_9342758_9342993_4": {"section_id": 3285, "quality": 1.0, "length": 5}, "so_9342758_9342993_0": {"section_id": 3285, "quality": 1.0, "length": 5}, "so_9342758_9342993_3": {"section_id": 3285, "quality": 1.0, "length": 15}, "so_9342758_9342993_1": {"section_id": 3285, "quality": 0.6, "length": 15}, "so_9342758_9342993_14": {"section_id": 3287, "quality": 1.0, "length": 6}, "so_9342758_9342993_2": {"section_id": 3285, "quality": 1.0, "length": 17}, "so_9342758_9342993_12": {"section_id": 3286, "quality": 0.7058823529411765, "length": 12}, "so_9342758_9342993_16": {"section_id": 3287, "quality": 0.9523809523809523, "length": 20}}, "n3337": {"so_9342758_9342993_7": {"section_id": 3156, "quality": 1.0, "length": 13}, "so_9342758_9342993_5": {"section_id": 3155, "quality": 1.0, "length": 4}, "so_9342758_9342993_11": {"section_id": 3157, "quality": 1.0, "length": 4}, "so_9342758_9342993_8": {"section_id": 3156, "quality": 1.0, "length": 5}, "so_9342758_9342993_10": {"section_id": 3156, "quality": 1.0, "length": 11}, "so_9342758_9342993_6": {"section_id": 3156, "quality": 1.0, "length": 4}, "so_9342758_9342993_13": {"section_id": 3157, "quality": 1.0, "length": 16}, "so_9342758_9342993_4": {"section_id": 3155, "quality": 1.0, "length": 5}, "so_9342758_9342993_0": {"section_id": 3155, "quality": 1.0, "length": 5}, "so_9342758_9342993_3": {"section_id": 3155, "quality": 1.0, "length": 15}, "so_9342758_9342993_1": {"section_id": 3155, "quality": 0.96, "length": 24}, "so_9342758_9342993_14": {"section_id": 3157, "quality": 1.0, "length": 6}, "so_9342758_9342993_2": {"section_id": 3155, "quality": 1.0, "length": 17}, "so_9342758_9342993_12": {"section_id": 3157, "quality": 0.9411764705882353, "length": 16}, "so_9342758_9342993_16": {"section_id": 3157, "quality": 0.9523809523809523, "length": 20}}, "n4659": {"so_9342758_9342993_7": {"section_id": 4049, "quality": 0.6923076923076923, "length": 9}, "so_9342758_9342993_5": {"section_id": 4047, "quality": 1.0, "length": 4}, "so_9342758_9342993_8": {"section_id": 4048, "quality": 1.0, "length": 5}, "so_9342758_9342993_10": {"section_id": 382, "quality": 0.6363636363636364, "length": 7}, "so_9342758_9342993_12": {"section_id": 4049, "quality": 0.6470588235294118, "length": 11}, "so_9342758_9342993_4": {"section_id": 4047, "quality": 1.0, "length": 5}, "so_9342758_9342993_0": {"section_id": 653, "quality": 0.8, "length": 4}, "so_9342758_9342993_3": {"section_id": 4047, "quality": 1.0, "length": 15}, "so_9342758_9342993_1": {"section_id": 4047, "quality": 0.6, "length": 15}, "so_9342758_9342993_13": {"section_id": 4049, "quality": 0.6875, "length": 11}, "so_9342758_9342993_2": {"section_id": 4047, "quality": 0.9411764705882353, "length": 16}, "so_9342758_9342993_14": {"section_id": 4049, "quality": 1.0, "length": 6}}}});