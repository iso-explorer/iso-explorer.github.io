post_cb({"37516653": {"Id": "37516653", "PostTypeId": "2", "Body": "<p>Believe or not, this is standard compliant behavior:</p>\n<blockquote>\n<p id=\"so_37516500_37516653_0\">5.3.4/7</p>\n<p id=\"so_37516500_37516653_1\">The expression in a noptr-new-declarator is erroneous if:<br>\n<em>[...]</em> \u2014 its value is such that the <strong>size of the allocated object would exceed the implementation-defined limit</strong> (annex B); or<br>\n<em>[...]</em></br></br></p>\n<p id=\"so_37516500_37516653_2\">If the expression, after converting to std::size_t, is a core constant\n  expression and the expression is erroneous, the program is ill-formed.\n  Otherwise, a <strong>new-expression with an erroneous expression does not\n  call an allocation function and terminates by throwing an exception of\n  a type that would match a handler (15.3) of type\n  std::bad_array_new_length</strong> (18.6.2.2). When the value of the\n  expression is zero, the allocation function is called to allocate an\n  array with no elements.</p>\n</blockquote>\n<p>In short, non-throwing allocator function is not even called, exception is thrown by <em>new-expression</em> itself.</p>\n<p>I assume that you are not using modern C++ version, because in those <code>std::numeric_limits&lt;long long&gt;::max()</code> marked as <code>constexpr</code> and is a <em>core constant expression</em>, which yields compile-time error.</p>\n<p>Clang, <em>probably</em> has <em>implementation-defined limit</em> set higher than max value of long lond, bypassing this quirk of C++.</p>\n", "LastActivityDate": "2016-05-30T01:50:24.217", "CommentCount": "2", "CreationDate": "2016-05-30T01:50:24.217", "ParentId": "37516500", "Score": "4", "OwnerUserId": "3410396"}, "bq_ids": {"n4140": {"so_37516500_37516653_1": {"length": 14, "quality": 0.9333333333333333, "section_id": 6088}, "so_37516500_37516653_2": {"length": 37, "quality": 0.9487179487179487, "section_id": 6088}}, "n3337": {"so_37516500_37516653_1": {"length": 11, "quality": 0.7333333333333333, "section_id": 5856}}, "n4659": {"so_37516500_37516653_1": {"length": 12, "quality": 0.8, "section_id": 7584}, "so_37516500_37516653_2": {"length": 28, "quality": 0.717948717948718, "section_id": 7584}}}, "37516500": {"ViewCount": "149", "Body": "<p>I've seen lots of people in my team checking null pointers like this:</p>\n<pre><code>    SomeClass *pSc = new SomeClass;\n    if ( NULL == pSc )\n    {\n        // cope with error\n    }\n</code></pre>\n<p>I known this will not work, because new operator in c++ throws a std::bad_alloc exception instead of returning NULL. I also know that std::nothrow can make what they expected really happen. So I wrote an example like this:</p>\n<pre><code>    #include &lt;iostream&gt;\n    #include &lt;limits&gt;\n    #include &lt;new&gt;\n    using namespace std;\n\n    void myNewHandler()\n    {\n        std::cerr &lt;&lt; \"Failed to allocate memory!\" &lt;&lt; std::endl;\n    }\n\n    int main(int argc, char* argv[])\n    {\n        //std::new_handler oldHandler = std::set_new_handler(myNewHandler);\n\n        int *pLotsMem = new(std::nothrow) int[std::numeric_limits&lt;long long&gt;::max()];\n        if ( nullptr == pLotsMem )\n        {\n            std::cerr &lt;&lt; \"Allocation failed\" &lt;&lt; std::endl;\n            return -1;\n        }\n        else\n        {\n            delete[] pLotsMem;\n            pLotsMem = nullptr;\n        }\n\n        //std::set_new_handler(oldHandler);\n\n        return 0;\n    } \n</code></pre>\n<p>Yes, I wanted to demonstrate usage of std::set_new_handler as well. To my surprise, even this did not work. new operator still threw an exception(std::bad_array_new_length, a derived class of std::bad_alloc) and then terminated the program.</p>\n<p>Any idea why this failed to work? <strong>How should one check pointers returned by new operator in gcc</strong>?</p>\n", "AcceptedAnswerId": "37516653", "Title": "Why does not std::nothrow work as expected in gcc(4.9)?", "CreationDate": "2016-05-30T01:20:41.767", "Id": "37516500", "CommentCount": "4", "PostTypeId": "1", "LastActivityDate": "2016-05-30T01:50:24.217", "Score": "2", "OwnerUserId": "6190882", "Tags": "<c++><g++>", "AnswerCount": "1"}});