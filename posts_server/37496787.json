post_cb({"37501147": {"ParentId": "37496787", "CommentCount": "1", "Body": "<p>Because of naughty code like this:</p>\n<pre><code>typedef uint16_t char16_t;\n\nextern char * strndup16to8 (const char16_t* s, size_t n);\nextern size_t strnlen16to8 (const char16_t* s, size_t n);\n</code></pre>\n<p>Sure, the <em>existence</em> of C++11 aware compilers doesn't preclude the existence of C++03 libraries or the plethora of systems or users that use C++03 compilers/libraries. </p>\n<p>If you're lucky, they'll do this:</p>\n<pre><code>#if __STDC_VERSION__ &lt; 201112L &amp;&amp; __cplusplus &lt; 201103L\n   typedef uint16_t char16_t;\n#endif\n</code></pre>\n", "OwnerUserId": "6292850", "PostTypeId": "2", "Id": "37501147", "Score": "1", "CreationDate": "2016-05-28T16:04:06.093", "LastActivityDate": "2016-05-28T16:04:06.093"}, "37496787": {"CommentCount": "12", "AcceptedAnswerId": "37496963", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2016-05-28T08:15:41.070", "LastActivityDate": "2016-05-28T17:47:23.893", "LastEditDate": "2017-05-23T10:29:17.857", "ViewCount": "1736", "FavoriteCount": "1", "Title": "If nullptr_t isn't a keyword, why are char16_t and char32_t?", "Id": "37496787", "Score": "39", "Body": "<p>As discussed at <a href=\"https://stackoverflow.com/questions/34107491/why-is-nullptr-t-not-a-keyword\">Why is nullptr_t not a keyword</a>, it is better to avoid introducing new keywords because they can break backward compatibility.</p>\n<p>Why then are <code>char16_t</code> and <code>char32_t</code> keywords, when they could just as well have been defined like so?</p>\n<pre><code>namespace std {\n    typedef decltype(u'q') char16_t;\n    typedef decltype(U'q') char32_t;\n}\n</code></pre>\n", "Tags": "<c++><c++11>", "OwnerUserId": "481267", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_37496787_37496963_2": {"section_id": 1888, "quality": 0.75, "length": 6}}, "n3337": {"so_37496787_37496963_2": {"section_id": 1877, "quality": 0.75, "length": 6}}, "n4659": {"so_37496787_37496963_0": {"section_id": 8723, "quality": 0.5263157894736842, "length": 10}}}, "37496963": {"ParentId": "37496787", "PostTypeId": "2", "CommentCount": "2", "Body": "<p><a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2249.html\">The proposal itself</a> explains why: to allow overloading with the underlying types of <code>uint_least16_t</code> and <code>uint_least32_t</code>. If they were <code>typedef</code>ed this wouldn't be possible.</p>\n<blockquote>\n<p id=\"so_37496787_37496963_0\">Define <code>char16_t</code> to be a distinct new type, that has the same size and representation as <code>uint_least16_t</code>. Likewise, define <code>char32_t</code> to be a distinct new type, that has the same size and representation as <code>uint_least32_t</code>. </p>\n<p id=\"so_37496787_37496963_1\">[N1040 defined <code>char16_t</code> and <code>char32_t</code> as typedefs to <code>uint_least16_t</code> and <code>uint_least32_t</code>, which make overloading on these characters impossible.] </p>\n</blockquote>\n<p>As for why they aren't in the <code>std</code> namespace, this is for compatibility with the original C proposal. C++ prohibits the C definitions from appearing in its own version of <code>&lt;cuchar&gt;</code></p>\n<p>[c.strings] / 3</p>\n<blockquote>\n<p id=\"so_37496787_37496963_2\">The headers shall not define the types <code>char16_t</code>, <code>char32_t</code>, and <code>wchar_t</code> (2.11).</p>\n</blockquote>\n<p>The types then would need to be global typedefs, which carries its own set of issues such as</p>\n<pre><code>typedef decltype(u'q') char16_t;\n\nnamespace foo {\n  typedef int char16_t;\n}\n</code></pre>\n<p>The reason for <code>std::nullptr_t</code> not being a keyword can be found in the question you linked</p>\n<blockquote>\n<p id=\"so_37496787_37496963_3\">We do not expect to see much direct use of <code>nullptr_t</code> in real programs.</p>\n</blockquote>\n<p>making <code>nullptr_t</code> the real exception here.</p>\n", "OwnerUserId": "657267", "LastEditorUserId": "657267", "LastEditDate": "2016-05-28T11:46:13.703", "Id": "37496963", "Score": "22", "CreationDate": "2016-05-28T08:40:09.720", "LastActivityDate": "2016-05-28T11:46:13.703"}});