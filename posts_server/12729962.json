post_cb({"12729991": {"ParentId": "12729962", "CommentCount": "2", "Body": "<p>It's well-defined:</p>\n<h3>8. Declarators: [dcl.decl]</h3>\n<blockquote>\n<p id=\"so_12729962_12729991_0\">3) Each init-declarator in a declaration is analyzed separately as if it was in a declaration by itself.</p>\n</blockquote>\n<p>And the note:</p>\n<blockquote>\n<p id=\"so_12729962_12729991_1\">90) A declaration with several declarators is usually equivalent to\n  the corresponding sequence of declarations each with a single\n  declarator. That is</p>\n<p id=\"so_12729962_12729991_2\"><code>T D1, D2, ... Dn;</code> </p>\n<p id=\"so_12729962_12729991_3\">is usually equvalent to </p>\n<p id=\"so_12729962_12729991_4\"><code>T D1; T D2; ... T Dn;</code></p>\n<p id=\"so_12729962_12729991_5\">where T is a decl-specifier-seq and each Di is an\n  init-declarator.</p>\n</blockquote>\n<p>For completness (because the note says <em>usually</em>):</p>\n<blockquote>\n<p id=\"so_12729962_12729991_6\">The exception occurs when a name introduced by one of the declarators\n  hides a type name used by the dcl-specifiers, so that when the same\n  dcl-specifiers are used in a subsequent declaration, they do not have\n  the same meaning, as in <code>struct S { ... }; S S, T;</code> // declare two\n  instances of struct S<code>which is not equivalent to</code>struct S { ... }; S\n  S; S T; // error`</p>\n</blockquote>\n", "OwnerUserId": "673730", "PostTypeId": "2", "Id": "12729991", "Score": "13", "CreationDate": "2012-10-04T14:50:17.747", "LastActivityDate": "2012-10-04T14:50:17.747"}, "bq_ids": {"n4140": {"so_12729962_12729991_5": {"section_id": 3196, "quality": 1.0, "length": 4}, "so_12729962_12729991_6": {"section_id": 3196, "quality": 0.8, "length": 24}, "so_12729962_12729991_0": {"section_id": 3196, "quality": 1.0, "length": 8}, "so_12729962_12729991_1": {"section_id": 3196, "quality": 0.9166666666666666, "length": 11}}, "n3337": {"so_12729962_12729991_5": {"section_id": 3070, "quality": 1.0, "length": 4}, "so_12729962_12729991_6": {"section_id": 3070, "quality": 0.8, "length": 24}, "so_12729962_12729991_0": {"section_id": 3070, "quality": 1.0, "length": 8}, "so_12729962_12729991_1": {"section_id": 3070, "quality": 0.9166666666666666, "length": 11}}, "n4659": {"so_12729962_12729991_0": {"section_id": 3958, "quality": 1.0, "length": 8}, "so_12729962_12729991_6": {"section_id": 3958, "quality": 0.6, "length": 18}, "so_12729962_12729991_5": {"section_id": 3958, "quality": 1.0, "length": 4}, "so_12729962_12729991_1": {"section_id": 3958, "quality": 0.9166666666666666, "length": 11}}}, "12729962": {"CommentCount": "0", "ViewCount": "111", "PostTypeId": "1", "ClosedDate": "2012-10-04T15:02:58.710", "LastEditorUserId": "-1", "CreationDate": "2012-10-04T14:48:48.323", "LastActivityDate": "2013-09-02T10:02:15.733", "Title": "Is the order of assignment in a list of initialized variables undefined?", "AcceptedAnswerId": "12729991", "LastEditDate": "2017-05-23T11:56:17.730", "Id": "12729962", "Score": "4", "Body": "<blockquote>\n<p id=\"so_12729962_12729962_0\"><strong>Possible Duplicate:</strong><br>\n<a href=\"https://stackoverflow.com/questions/6414030/is-the-comma-in-a-variable-list-a-sequence-point\">Is the comma in a variable list a sequence point?</a> </br></p>\n</blockquote>\n<p>If I have the following code does the comma act as a normal sequence point, or is the behaviour undefined?</p>\n<pre><code>int i = 1, j = i;\n</code></pre>\n<p><em>I don't actually plan to use this (our internal standard prohibits even <code>int i, j</code>) but I was curious and it prooved oddly tricky to google.</em></p>\n", "Tags": "<c++><order-of-evaluation>", "OwnerUserId": "1230538", "AnswerCount": "1"}});