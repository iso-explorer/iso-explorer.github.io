post_cb({"16880885": {"CommentCount": "0", "ViewCount": "224", "CreationDate": "2013-06-02T07:56:08.130", "LastActivityDate": "2013-06-02T08:21:01.103", "Title": "How to access template parameter from specialized member function?", "AcceptedAnswerId": "16880917", "PostTypeId": "1", "Id": "16880885", "Score": "1", "Body": "<pre><code>#include &lt;stdio.h&gt;\n\ntemplate&lt;typename T, int N&gt;\nclass A\n{\npublic:\n    void func();\n};\ntemplate&lt;typename T, int N&gt;\nvoid A&lt;int, N&gt;::func()\n{\n    printf(\"%d\\n\", N);\n}\nint main()\n{\n    A&lt;int, 3&gt; a;\n    a.func();\n    return 0;\n}\n</code></pre>\n<p>When I try to compile this piece of code, g++ gives these errors:</p>\n<pre><code>test.cpp:10:22: error: invalid use of incomplete type \u2018class A&lt;int, N&gt;\u2019\ntest.cpp:4:7: error: declaration of \u2018class A&lt;int, N&gt;\u2019\n</code></pre>\n<p>I've only managed to compile this when A::func isn't specialized at all and when the function is also specialized for N.</p>\n<p>How do I specialize A::func for T and access N (which should be able to be any value), too?</p>\n", "Tags": "<c++><templates>", "OwnerUserId": "1534958", "AnswerCount": "1"}, "16880917": {"ParentId": "16880885", "LastEditDate": "2013-06-02T08:21:01.103", "CommentCount": "6", "CreationDate": "2013-06-02T08:02:28.300", "OwnerUserId": "777186", "LastEditorUserId": "777186", "PostTypeId": "2", "Id": "16880917", "Score": "4", "Body": "<p>If this was possible, the syntax would have to be</p>\n<pre><code>template&lt;int N&gt;\nvoid A&lt;int, N&gt;::func()\n{\n    printf(\"%d\\n\", N);\n}\n</code></pre>\n<p>I.e., <code>T</code> would not be mentioned in the template parameter list.</p>\n<p>But unfortunately, it isn't possible. Individual functions (including member functions) cannot be partially specialized.</p>\n<p>From the Standard (in the section about partial class template specializations):</p>\n<blockquote>\n<p id=\"so_16880885_16880917_0\">(\u00a714.5.5/2) Each class template partial specialization is a distinct template and de\ufb01nitions shall be provided for the members of a template partial specialization (14.5.5.3).</p>\n</blockquote>\n<p>In your situation, the most direct way to accomplish what you need would therefore be to partially-specialize the entire class template:</p>\n<pre><code>template&lt;int N&gt;\nclass A&lt;int,N&gt;\n{\npublic:\n  void func();\n};\n\ntemplate&lt;int N&gt;\nvoid A&lt;int,N&gt;::func()\n{\n    printf(\"%d\\n\",3);\n}\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/view?id=f2de1bee0b17829c0bd00f3635d47cb4-881e2521f19ab33cbc733b5d83fdd598\" rel=\"nofollow\">Working example of this on Coliru</a> (Of course, the definition of <code>func</code> could be inlined into the class template definition.)</p>\n<p>But this might not be optimal when the class template has many other members, since you would have to redefine them all:</p>\n<blockquote>\n<p id=\"so_16880885_16880917_1\">(\u00a714.5.5/3) [...] A class template specialization is a distinct template. The members of the class template partial specialization are unrelated to the members of the primary template. Class template partial specialization members that are used in a way that requires a de\ufb01nition shall be de\ufb01ned; the de\ufb01nitions of members of the primary template are never used as de\ufb01nitions for members of a class template partial specialization. [...]</p>\n</blockquote>\n<p>In some cases it is preferable to declare a separate class template with just this one function as member (possibly a static member, if no access to other members is required \u2013 possibly passing members to which access <em>is</em> required as explicit function arguments), and then refer to that from within the actual class template (to avoid having to partially-specialize the entire class template).</p>\n", "LastActivityDate": "2013-06-02T08:21:01.103"}, "bq_ids": {"n4140": {"so_16880885_16880917_1": {"section_id": 149, "quality": 0.8333333333333334, "length": 30}, "so_16880885_16880917_0": {"section_id": 136, "quality": 0.8, "length": 12}}, "n3337": {"so_16880885_16880917_1": {"section_id": 143, "quality": 0.8333333333333334, "length": 30}, "so_16880885_16880917_0": {"section_id": 130, "quality": 0.8, "length": 12}}, "n4659": {"so_16880885_16880917_1": {"section_id": 153, "quality": 0.8333333333333334, "length": 30}, "so_16880885_16880917_0": {"section_id": 140, "quality": 0.8, "length": 12}}}});