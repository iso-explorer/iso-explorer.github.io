post_cb({"36323096": {"ViewCount": "94", "Body": "<p>See code below:</p>\n<pre><code>unordered_map&lt;string, int&gt; wordCount;\nfor(string word: words)\n    ++wordCount[word];\n</code></pre>\n<p>Question: </p>\n<p>Does it right here for using <code>++wordCount[word];</code> when word does not exist in wordCount? I always saw someone using like this, but I am not really sure about it.</p>\n<p>Explanation <a href=\"http://www.cplusplus.com/reference/unordered_map/unordered_map/operator[]/\" rel=\"nofollow\">here</a> said: </p>\n<blockquote>\n<p id=\"so_36323096_36323096_0\">If k does not match the key of any element in the container, the\n  function inserts a new element with that key and returns a reference\n  to its mapped value. Notice that this always increases the container\n  size by one, even if no mapped value is assigned to the element (the\n  element is constructed using its default constructor).</p>\n</blockquote>\n<p>and I know that <a href=\"http://en.cppreference.com/w/cpp/language/default_initialization\" rel=\"nofollow\">int is uninitialized in default</a>. So, I think it's not safe to increase map value directly like this, is that right?</p>\n", "AcceptedAnswerId": "36323132", "Title": "should I use ++wordCount[key] for unordered_map<string, int> when key doesn't exist in wordCount?", "CreationDate": "2016-03-31T02:28:27.303", "Id": "36323096", "CommentCount": "1", "PostTypeId": "1", "LastActivityDate": "2016-03-31T03:09:52.350", "Score": "4", "OwnerUserId": "5432806", "Tags": "<c++><unordered-map>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_36323096_36323132_1": {"length": 20, "quality": 0.9523809523809523, "section_id": 1056}}, "n3337": {"so_36323096_36323132_1": {"length": 20, "quality": 0.9523809523809523, "section_id": 1041}}}, "36323132": {"Id": "36323132", "PostTypeId": "2", "Body": "<p>Quoting cppreference's docs on <a href=\"http://en.cppreference.com/w/cpp/container/unordered_map/operator_at\" rel=\"nofollow\"><code>operator[]</code></a></p>\n<blockquote>\n<p id=\"so_36323096_36323132_0\">When the default allocator is used, this results in the key being copy constructed from key and the mapped value being value-initialized.</p>\n</blockquote>\n<p>The keyword is <strong><a href=\"http://en.cppreference.com/w/cpp/language/value_initialization\" rel=\"nofollow\">value-initialized</a></strong>.  An <code>int</code> that's value-initialized is zero.</p>\n<p>Here's the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3797.pdf\" rel=\"nofollow\">official reference</a> (C++14, 23.5.4.3 paragraph 2, [unord.map.elem]):</p>\n<blockquote>\n<p id=\"so_36323096_36323132_1\"><em>Effects:</em> If the <code>unordered_map</code> does not already contain an element whose key is equivalent to <code>k</code>, the first operator inserts the value <code>value_type(k, mapped_type())</code> and the second operator inserts the\n  value <code>value_type(std::move(k), mapped_type())</code>.</p>\n</blockquote>\n<p>Notice the <code>mapped_type()</code>, which for <code>mapped_type = int</code> would construct a zero-valued <code>int</code>.</p>\n", "LastEditorUserId": "5432806", "LastActivityDate": "2016-03-31T03:09:52.350", "CommentCount": "0", "CreationDate": "2016-03-31T02:32:56.937", "ParentId": "36323096", "Score": "5", "OwnerUserId": "440302", "LastEditDate": "2016-03-31T03:09:52.350"}});