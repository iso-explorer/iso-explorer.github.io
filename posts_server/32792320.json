post_cb({"32792320": {"CommentCount": "3", "AcceptedAnswerId": "32792380", "ClosedDate": "2015-09-26T00:25:55.140", "CreationDate": "2015-09-26T00:14:56.273", "LastActivityDate": "2015-09-26T00:25:19.950", "PostTypeId": "1", "ViewCount": "59", "Title": "Should I delete a pointer to an int in a class's deconstructor (in C++)?", "Id": "32792320", "Score": "0", "Body": "<p>I'm really having a hard time understanding pointers, so please forgive me for any ambiguity this question may have. Yes, I'm asking more than one question, the one in the title is by far the most important, though. The other questions are just questions that I would really appreciate you answering. So lets say I have a class which looks something like this:</p>\n<pre><code>class myclass\n{\npublic:\n    myclass();\n    ~myclass();\nprivate:\n    struct node\n    {\n        node * next;\n    }\n    node * head;\n    int myint;\n}\n</code></pre>\n<p>Now, as I'm aware, one would call constructors for the class and struct, as well as deconstructors for each. I've been told that integers shouldn't be deleted in the deconstructor, but what about deleting the pointer to the integer. Shouldn't that be deleted in the deconstructor like this:</p>\n<pre><code>myclass::~myclass\n{\n    delete head;\n    delete &amp;myint;\n}\n</code></pre>\n<p>If not, why?</p>\n<p>If you want to just answer that question, read no further. For the sake of brevity, my next question is about this code, and the deconstructor above, which I've been told is wrong (assume this is part of the same file as the deconstructor above):</p>\n<pre><code>myclass::node::~node\n{\n    delete next;\n}\n</code></pre>\n<p>More specifically, I've been told I shouldn't delete nodes unless they've been declared with a <code>new</code> tag. Needless to say, I find that very confusing. If you can, could you explain what they mean by that and why what they're saying is true? A link explaining that would be equally appreciated, just understand that I'm new to coding, I just started learning C++ a few months ago.</p>\n", "Tags": "<c++><pointers><delete-operator>", "OwnerUserId": "4988264", "AnswerCount": "2"}, "32792341": {"ParentId": "32792320", "PostTypeId": "2", "CommentCount": "9", "Body": "<p>No, you should use <code>delete</code> only on pointers to memory that has been allocated via <code>new</code>, as per \u00a75.3.5/1 of the C++ standard:</p>\n<blockquote>\n<p id=\"so_32792320_32792341_0\">The delete-expression operator destroys a most derived object (1.8) or array created by a new-expression.</p>\n</blockquote>\n<hr>\n<p>In fact, with regards to writing good C++ code, you shouldn't even <code>delete</code> that pointer yourself, and just use an <code>std::unique_ptr</code> and let the default destructor handle that.</p>\n</hr>", "OwnerUserId": "493122", "LastEditorUserId": "493122", "LastEditDate": "2015-09-26T00:24:25.487", "Id": "32792341", "Score": "1", "CreationDate": "2015-09-26T00:17:38.570", "LastActivityDate": "2015-09-26T00:24:25.487"}, "bq_ids": {"n4140": {"so_32792320_32792341_0": {"section_id": 6105, "quality": 0.9, "length": 9}}, "n3337": {"so_32792320_32792341_0": {"section_id": 5871, "quality": 0.9, "length": 9}}, "n4659": {"so_32792320_32792341_0": {"section_id": 7602, "quality": 0.9, "length": 9}}}, "32792380": {"ParentId": "32792320", "CommentCount": "4", "Body": "<p>You can only use <code>delete</code> on memory that was allocated dynamically using <code>new</code>.</p>\n<p>In your case, <code>myint</code> is not a separate block of dynamically allocated memory. It's a member of the <code>myclass</code> object, and its memory cannot be managed separately from the containing object. When you allocate a <code>myclass</code> object (either as an ordinary variable, or dynamically using <code>new myclass</code>), all its members will be allocated; when you free it, all its memory will be reclaimed. You don't need to delete the individual members.</p>\n", "OwnerUserId": "1491895", "PostTypeId": "2", "Id": "32792380", "Score": "1", "CreationDate": "2015-09-26T00:25:19.950", "LastActivityDate": "2015-09-26T00:25:19.950"}});