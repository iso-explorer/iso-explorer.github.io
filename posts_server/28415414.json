post_cb({"28416122": {"ParentId": "28415414", "PostTypeId": "2", "CommentCount": "9", "Body": "<p>The reason is the order of initialization:</p>\n<ul>\n<li><p>First is zero initialization. All three variables are set to zero.</p></li>\n<li><p>Then is constant initialization. <code>y</code> and <code>tt</code> are initialized using <code>constexpr</code> which yields 31.</p></li>\n<li><p>Dynamic initialization is the last one. In this step, the order of variables in the compilation unit is important. <code>var</code> is before <code>t</code> and so <code>var&lt;T, t&gt;</code> is initialized from <code>t</code> before <code>t</code> is initialized from <code>y</code>.</p></li>\n</ul>\n", "OwnerUserId": "4538344", "LastEditorUserId": "4538344", "LastEditDate": "2015-02-09T18:13:21.770", "Id": "28416122", "Score": "3", "CreationDate": "2015-02-09T17:52:08.123", "LastActivityDate": "2015-02-09T18:13:21.770"}, "28415414": {"CommentCount": "9", "AcceptedAnswerId": "28416797", "LastEditorUserId": "268592", "LastEditDate": "2015-02-25T17:19:40.323", "OwnerDisplayName": "user2953119", "LastActivityDate": "2015-02-25T17:19:40.323", "Body": "<p>I'm trying to understand how variable templates work by the following example:</p>\n<pre><code>#include &lt;iostream&gt;\n\ntemplate &lt;class T, const T&amp; t&gt;\nint var = t.a;\n\nstruct T\n{\n    int a;\n    constexpr T(): a(31){ }\n};\n\nT y;\n\nconst T t = y;\n\nconst T tt = T();\n\nint main()\n{ \n    std::cout &lt;&lt; \"var &lt;T, t&gt; = \" &lt;&lt; var&lt;T, t&gt; &lt;&lt; std::endl;  //0\n    std::cout &lt;&lt; \"y.a = \" &lt;&lt; y.a &lt;&lt; std::endl;  //31\n    std::cout &lt;&lt;\"var &lt;T, tt&gt; = \" &lt;&lt; var&lt;T, tt&gt; &lt;&lt; std::endl; //31\n}\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/a219d8fa8cef1741\" rel=\"nofollow noreferrer\"><strong>DEMO</strong></a></p>\n<p>Honestly I have really no idea about that behavior. The thing that confused me was that the specialization <code>var&lt;T, t&gt;</code> is 0, but <code>y.a</code> is <code>31</code>. Also, if we initialize the object of the type <code>T</code> with temporary we also have different results. Could you clarify that a bit?</p>\n<p>I mean, I'm looking for a normative reference from the working draft <code>N4296</code>, describing that behavior.</p>\n", "PostTypeId": "1", "ViewCount": "465", "FavoriteCount": "1", "Title": "Understanding variable templates by example", "Id": "28415414", "Score": "16", "CreationDate": "2015-02-09T17:15:32.657", "Tags": "<c++><templates><c++14>", "AnswerCount": "3"}, "28416797": {"ParentId": "28415414", "PostTypeId": "2", "CommentCount": "7", "Body": "<p>Variable templates are rather underspecified at the moment. If we go through <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4304.html\">the current core issues list</a>, we see that</p>\n<ul>\n<li><a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4304.html#1849\">It is unclear whether and how a variable template can be defined multiple times in a program.</a></li>\n<li><a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4304.html#1729\">It is unclear how definitions and declarations of variable templates are matched.</a></li>\n<li><a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4304.html#1711\">It is unclear how variable template partial specializations are supposed to work.</a></li>\n<li><a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4304.html#1845\">It is unclear what the point of instantiation of a variable template specialization is.</a></li>\n</ul>\n<p>It also used to be unclear what initialization order variable templates follow. <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4305.html#1744\">CWG issue 1744</a> modified [basic.start.init]/p2 to clarify that</p>\n<blockquote>\n<p id=\"so_28415414_28416797_0\">Dynamic initialization of a non-local variable with static storage\n  duration is  <em>unordered</em> if the variable is an implicitly or\n  explicitly instantiated specialization, and otherwise is <em>ordered</em>\n  [<em>Note</em>: an explicitly specialized static data member or variable\n  template specialization has ordered initialization. \u2014<em>end note</em>].</p>\n</blockquote>\n<p><code>var&lt;T, t&gt;</code> is a non-local variable with static storage duration that is an implicitly instantiated specialization. Therefore its dynamic initialization is unordered. Since <code>t</code> doesn't qualify for constant initialization, that means that <code>var&lt;T, t&gt;</code> may be initialized before the dynamic initialization of <code>t</code>, producing 0 as a result, regardless of the relative order between <code>var</code>'s definition and <code>t</code>'s definition, and regardless of the point of instantiation of <code>var&lt;T, t&gt;</code>.</p>\n<p>Thus, <a href=\"http://coliru.stacked-crooked.com/a/3e2e9eff30edba3b\">moving the definition of <code>var</code> below the definition of <code>t</code></a> and/or <a href=\"http://coliru.stacked-crooked.com/a/7fdc295d5dc4ae35\">an explicit instantiation of <code>var&lt;T, t&gt;</code></a> has no effect on what's being printed, while <a href=\"http://coliru.stacked-crooked.com/a/d6976e01a09919f9\">providing an explicit specialization for <code>var&lt;T, t&gt;</code> still initializing it to <code>t.a</code></a> causes the first line to print <code>31</code>.</p>\n", "OwnerUserId": "2756719", "LastEditorUserId": "2756719", "LastEditDate": "2015-02-09T19:02:36.363", "Id": "28416797", "Score": "9", "CreationDate": "2015-02-09T18:33:00.367", "LastActivityDate": "2015-02-09T19:02:36.363"}, "28415937": {"ParentId": "28415414", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>Presumably, the <code>var</code> specialisations are dynamically initialised before the other global variables. In that case, <code>t</code> needs dynamic initialisation (since it's initialiser isn't a constant expression), so still has a zero value when used to initialise <code>var&lt;T, t&gt;</code>; while <code>tt</code> can be statically initialised from its <code>constexpr</code> initialiser, so has its final value when used to initialise <code>var&lt;T, tt&gt;</code>.</p>\n<p>However, I can't find anything in the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4296.pdf\" rel=\"nofollow\">draft standard</a> to say whether this is expected (as it would be if the point of declaration of the specialisations were that of the template itself), or undefined/incorrect behaviour.</p>\n", "OwnerUserId": "204847", "LastEditorUserId": "204847", "LastEditDate": "2015-02-09T17:48:13.147", "Id": "28415937", "Score": "2", "CreationDate": "2015-02-09T17:42:55.857", "LastActivityDate": "2015-02-09T17:48:13.147"}, "bq_ids": {"n4659": {"so_28415414_28416797_0": {"section_id": 8654, "quality": 0.8928571428571429, "length": 25}}}});