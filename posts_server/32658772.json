post_cb({"32658772": {"CommentCount": "4", "ViewCount": "227", "PostTypeId": "1", "LastEditorUserId": "2784509", "CreationDate": "2015-09-18T18:30:34.807", "LastActivityDate": "2015-09-18T18:53:28.203", "Title": "returning constant object and construction from temporary", "FavoriteCount": "1", "LastEditDate": "2015-09-18T18:40:12.633", "Id": "32658772", "Score": "4", "Body": "<p>I've recently discovered difference between msvc and g++/clang++ compilers which is related to the behavior of RVO in case where a constant object is returned. A simple example which illustrates the difference:</p>\n<pre><code>#include &lt;iostream&gt;\n\nclass T\n{\npublic:\n    T() { std::cout &lt;&lt; \"T::T()\\n\"; }\n    ~T() { std::cout &lt;&lt; \"T::~T()\\n\"; }\n    T(const T &amp;t) { std::cout &lt;&lt; \"T::T(const T&amp;)\\n\"; }\n    T(T &amp;&amp;t) { std::cout &lt;&lt; \"T::T(T&amp;&amp;)\\n\"; }\n    T(const T &amp;&amp;t) { std::cout &lt;&lt; \"T::T(const T&amp;&amp;)\\n\"; }\n};\n\nconst T getT()\n{\n    T tmp;\n    return tmp;\n}\n\nint main()\n{\n    T nonconst = getT();\n}\n</code></pre>\n<p>With optimizations enabled both examples will produce only T() and ~T() calls, which is expected due to RVO (which by the way ignores constness of returned type). But without them results differ.</p>\n<p>clang++ or g++ with <code>-fno-elide-constructors</code> everything by the rules:</p>\n<pre><code>T::T()\nT::T(T&amp;&amp;) // from non-const local tmp variable to temp storage (const, due to return-type)\nT::~T()\nT::T(const T&amp;&amp;) // from constant temp storage to nonconst variable\nT::~T()\nT::~T()\n</code></pre>\n<p>msvc (2013) is ignoring return-type constness:</p>\n<pre><code>T::T()\nT::T(T&amp;&amp;) // from local non-const tmp var to non-const nonconst var\nT::~T()\nT::~T()\n</code></pre>\n<p>With slight modification:</p>\n<pre><code>const T getT()\n{\n    const T tmp; // here const is added\n    return tmp;\n}\n</code></pre>\n<p>clang++ or g++ with <code>-fno-elide-constructors</code>, everything as expected again:</p>\n<pre><code>T::T()\nT::T(const T&amp;&amp;) // from const local tmp var to temp storage (const, due to return-type)\nT::~T()\nT::T(const T&amp;&amp;) // from constant temp storage to nonconst variable\nT::~T()\nT::~T()\n</code></pre>\n<p>msvc (2013):</p>\n<pre><code>T::T()\nT::T(const T&amp;&amp;) // from local const tmp var to non-const nonconst var\nT::~T()\nT::~T()\n</code></pre>\n<p>All that explains next problem in the original version (without <code>const</code> for <code>tmp</code>): <strong>if construction from constant temporary is prohibited like <code>T(const T &amp;&amp;t) = delete;</code> g++/clang++ produce error: <code>use of deleted function \u2018T::T(const T&amp;&amp;)\u2019</code> and msvc does not.</strong></p>\n<p>So, <strong>is that a bug in MSVC?</strong> (it ignores return-type specification and breaks suggested semantic)</p>\n<p>In short: msvc compiles the following code, g++/clang++ don't.</p>\n<pre><code>#include &lt;iostream&gt;\n\nclass T\n{\npublic:\n    T() { std::cout &lt;&lt; \"T::T()\\n\"; }\n    ~T() { std::cout &lt;&lt; \"T::~T()\\n\"; }\n    T(const T &amp;t) { std::cout &lt;&lt; \"T::T(const T&amp;)\\n\"; }\n    T(T &amp;&amp;t) { std::cout &lt;&lt; \"T::T(T&amp;&amp;)\\n\"; }\n    T(const T &amp;&amp;t) = delete;\n};\n\nconst T getT()\n{\n    const T tmp;\n    return tmp;\n}\n\nint main()\n{\n    T nonconst = getT(); // error in gcc/clang; good for msvc\n}\n</code></pre>\n", "Tags": "<c++><c++11><visual-c++><g++><clang++>", "OwnerUserId": "2784509", "AnswerCount": "1"}, "32659136": {"ParentId": "32658772", "CommentCount": "4", "Body": "<p>I believe the <code>const</code> is a red herring here. We could simplify the example down to:</p>\n<pre><code>struct T\n{\n    T() = default;\n    T(T &amp;&amp;) = delete;\n};\n\nT getT()\n{\n    T tmp;\n    return tmp;\n}\n\nint main()\n{\n    T x = getT();\n}\n</code></pre>\n<p>This fails to compile on gcc or clang, and I believe that failure is correct. Regardless of whether copy elision happens, we still do overload resolution on the constructor. From [class.copy]:</p>\n<blockquote>\n<p id=\"so_32658772_32659136_0\">When the criteria for elision of a copy/move operation are met, but not for an <em>exception-declaration</em>, and the\n  object to be copied is designated by an lvalue, or when the <em>expression</em> in a <code>return</code> statement is a (possibly\n  parenthesized) <em>id-expression</em> that names an object with automatic storage duration declared in the body or\n  <em>parameter-declaration-clause</em> of the innermost enclosing function or <em>lambda-expression</em>, overload resolution\n  to select the constructor for the copy is first performed as if the object were designated by an rvalue. If\n  the first overload resolution fails or was not performed, or if the type of the first parameter of the selected\n  constructor is not an rvalue reference to the object\u2019s type (possibly cv-qualified), overload resolution is\n  performed again, considering the object as an lvalue. <em>[ Note:</em> This two-stage overload resolution must be\n  performed regardless of whether copy elision will occur. It determines the constructor to be called if elision\n  is not performed, and the selected constructor must be accessible even if the call is elided. <em>\u2014end note ]</em></p>\n</blockquote>\n<p>Following the rules, we perform overload resolution as if the object were an rvalue. That overload resolution finds <code>T(T&amp;&amp; )</code>, which is explicitly <code>delete</code>d. As that call is ill-formed, the entire expression is ill-formed.</p>\n<p>Copy/move elision is merely an optimization. The code that it would elide has to be valid to begin with.</p>\n", "OwnerUserId": "2069064", "PostTypeId": "2", "Id": "32659136", "Score": "1", "CreationDate": "2015-09-18T18:53:28.203", "LastActivityDate": "2015-09-18T18:53:28.203"}, "bq_ids": {"n4140": {"so_32658772_32659136_0": {"section_id": 481, "quality": 0.946236559139785, "length": 88}}, "n3337": {"so_32658772_32659136_0": {"section_id": 472, "quality": 0.6881720430107527, "length": 64}}, "n4659": {"so_32658772_32659136_0": {"section_id": 504, "quality": 0.8279569892473119, "length": 77}}}});