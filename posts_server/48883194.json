post_cb({"bq_ids": {"n4140": {"so_48883194_48885378_2": {"length": 12, "quality": 0.9230769230769231, "section_id": 458}, "so_48883194_48885378_3": {"length": 19, "quality": 0.8636363636363636, "section_id": 458}}, "n3337": {"so_48883194_48885378_2": {"length": 12, "quality": 0.9230769230769231, "section_id": 449}, "so_48883194_48885378_3": {"length": 19, "quality": 0.8636363636363636, "section_id": 449}}, "n4659": {"so_48883194_48885378_2": {"length": 13, "quality": 1.0, "section_id": 481}, "so_48883194_48885378_3": {"length": 19, "quality": 0.8636363636363636, "section_id": 481}}}, "48885378": {"Id": "48885378", "PostTypeId": "2", "Body": "<p>It tries to invoke the copy constructor because its move constructor has been implicitly deleted.  </p>\n<p>Suppose we have a class X.</p>\n<pre><code>struct X\n{\n    X(const X&amp;) = delete; // user-declared\n\n    X(int)\n    {\n    }\n};\n</code></pre>\n<p>Now, if you were to write</p>\n<pre><code>X x = 4;\n</code></pre>\n<p>it would be the same as</p>\n<pre><code>X x = X(4); // copy/move into x, see 15.6.1\n</code></pre>\n<p>and you would get a <a href=\"https://godbolt.org/#z:OYLghAFBqd5QCxAYwPYBMCmBRdBLAF1QCcAaPECAKxAEZSAbAQwDtRkBSAJgCFufSAZ1QBXYskwgA5BwAMAQUEFiI5AQDUADTnyOAdj4L16gA4iARgzzIQO48c0Q0LJVu4A2AJTqOAZgAi6lgMmASYfoa6RvYA9DHqtACsAHQAHMm0drHxPJjITCKCmOqoAGbqTOqFmMQAtFjIzMSY6OpoJgCetc5KKmokWk6oLhqaPlxeWcZxg2MeHt4A7ngMDOosqBrmxXgAtiZWyIQMHUF5TS0VgmelBQxh6FM%2B0Q4QeCwEnk/6kfY%2Bev4dPpAb5Ijp3hpdkx3hAvgofnYZmMAB4%2BALqAAsET%2BMwAktdMMimGoTuoCAhioImLtikxruTilYWMVtgxUItSOoisUksl3Bknii0YFHBivqD1DMespVKMIGKqoJ3sBBhDPJz2h0YrtUAA3HYaCGodTIoEAnRSdUMaSJKSkFjSWR21DSADC/H4XNE4mK3F8tDtBEdlvVAGsQBj%2Be5aKk9ABOWi0DG%2BWRcVJJxjSDF2h1SJ2kF1SO2CECyUhBvOW0hwWAwRAoVD7FY1ciUNBNkLEEDAPS%2BUilFZhYgliDmYOkczvJjEDrSAOkds0j4AeRYJ3HWChbBCG7wzTUeH1JcrpEJeREYTndohmGtJ%2BUe2DVtY7A9vEYeHMJcg6tQJgIeDDMetTLr46i1EojwBJwvD8EmxbehIdBWjaObjoWyKpO4tTuBi6jAMgyDqHoyRgRAuCEAMfr0OorqNiYzbEOM/reO6sG8IGT5hhG6RYYkWEYrQej8SmiTuJmUjZqQuwgIkZa5vmhbFqW5ZPtWdYQEg7YMZ2rZDB2NQoMwbByWWA73DUI5jiek4sNOs5SPOi6YCua4Ofmm4vjuJ74PuAFHuOZ7IBekiOdeHy3uOD4yZWz5sCgb4CFYX7wL%2B/6AS40ggWBEEEFB/gwXwvDwUIiGSLQKFSLa9rodImHYbhbTGSqKSyMksjqOR%2BBEEx1GcnRBm9VwvhcKxiWcbF6oUkwWBdrCElSTJck1SeSlCCpFZOp43FcHG7WJHoiZJhiu2yKkvjuIkEm%2BGhq3SBNW3qfANb1tpjF6W9nbdr2/aDpZlDWfmtn2VeC6NkuBCruuPmYFuwDeR5e55P5mDHvmQUhaDN53vm0Vqc1CXsUln7fvNf4AUBWWgeBkF%2BAViVCQhYhIRVEnVQpzp1VhOF4QRREkWRFE9cxNEDTpNTMb4Y1Ew9IakOGvi%2BKRisq6rqsLXaS3ybVRbrWWm1Vi9mkNoNH30YxRkvqZv0WcOAPjsDM6g85rnQx5sNeaFiN%2BYeqOBci56XmF5ARTjgbEI%2BsWMC%2BhNFcTKU/gW6WU1I2U03ldOFXBehMz6yFs7dilcw1eGNC%2B6ite1nVC1Rw2i%2BbnbMQqbFx7L22kNNs2UJVi2ydrd26yW%2BtcfLIBcBipHj7IcZ6IJGKyO4vhyVw12F5zusG%2B3d5cGvBb3apk2kPqw4ZRGQA%3D%3D\" rel=\"nofollow noreferrer\">compilation error</a> because you explicitly deleted the copy constructor and therefore no move constructor is being implicitly declared.</p>\n<blockquote>\n<p id=\"so_48883194_48885378_0\"><strong>15.8.1  Copy/move constructors</strong> </p>\n<p id=\"so_48883194_48885378_1\">[...]  </p>\n<p id=\"so_48883194_48885378_2\">If the definition of a class X does not explicitly declare a move constructor, a non-explicit one will be implicitly declared as defaulted if and only if</p>\n<ul>\n<li>X does not have a user-declared copy constructor,</li>\n<li>X does not have a user-declared copy assignment operator,</li>\n<li>X does not have a user-declared move assignment operator, and</li>\n<li>X does not have a user-declared destructor.</li>\n</ul>\n<p id=\"so_48883194_48885378_3\">[ <em>Note:</em> When the move constructor is not implicitly declared or\n  explicitly supplied, expressions that otherwise would have invoked the\n  move constructor may instead invoke a copy constructor. \u2014 <em>end note</em> ]</p>\n</blockquote>\n<p>In C++17 this changes with the introduction of guaranteed <a href=\"http://en.cppreference.com/w/cpp/language/copy_elision\" rel=\"nofollow noreferrer\">copy elision</a>.<br>\nThis results in the line being equal to</br></p>\n<pre><code>X x(4);\n</code></pre>\n<p>which does not rely on either copy or move constructor and instead calls <code>X(int)</code>.</p>\n<p>Like <strong>X</strong>, <strong><a href=\"http://en.cppreference.com/w/cpp/atomic/atomic/atomic\" rel=\"nofollow noreferrer\">std::atomic</a></strong> also has its copy constructor explicitly deleted\nwhich is why your code fails to compile if not compiled with C++17 support.</p>\n", "LastEditorUserId": "2682312", "LastActivityDate": "2018-02-20T13:14:30.743", "Score": "1", "CreationDate": "2018-02-20T12:31:39.860", "ParentId": "48883194", "CommentCount": "6", "OwnerUserId": "2682312", "LastEditDate": "2018-02-20T13:14:30.743"}, "48883194": {"ViewCount": "174", "Body": "<p>Consider the following minimal working example:</p>\n<pre><code>#include &lt;atomic&gt;\n\nint main() {\n  ::std::atomic&lt;bool&gt; a = false;\n}\n</code></pre>\n<p>Copy ctor and copy assignment of atomic are both explicitly deleted. However, this should invoke the <a href=\"http://en.cppreference.com/w/cpp/atomic/atomic/atomic\" rel=\"noreferrer\">ctor taking exactly a bool</a>.</p>\n<p>Both g++ and clang++ complain that this line is attempting to invoke the copy ctor of <code>atomic</code>:</p>\n<pre><code>$ g++ -std=c++1z a.cpp \na.cpp: In function \u2018int main()\u2019:\na.cpp:4:27: error: use of deleted function \u2018std::atomic&lt;bool&gt;::atomic(const std::atomic&lt;bool&gt;&amp;)\u2019\n   ::std::atomic&lt;bool&gt; a = false;\n                           ^~~~~\n$ clang++ -std=c++1z a.cpp \na.cpp:4:23: error: copying variable of type '::std::atomic&lt;bool&gt;' invokes deleted constructor\n  ::std::atomic&lt;bool&gt; a = false;\n                      ^   ~~~~~\n</code></pre>\n<p>Why are they trying to copy an <code>atomic</code>?</p>\n", "AcceptedAnswerId": "48885378", "Title": "Why does the initialisation of an object invoke the copy constructor?", "CreationDate": "2018-02-20T10:33:37.233", "Id": "48883194", "CommentCount": "6", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2018-02-20T13:14:30.743", "Score": "7", "OwnerUserId": "430766", "Tags": "<c++><initialization><atomic><copy-constructor>", "AnswerCount": "1"}});