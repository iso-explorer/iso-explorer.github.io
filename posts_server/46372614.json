post_cb({"46372614": {"CommentCount": "7", "ViewCount": "352", "PostTypeId": "1", "LastEditorUserId": "725937", "CreationDate": "2017-09-22T20:17:44.753", "LastActivityDate": "2017-09-23T01:01:48.933", "Title": "Infinity not constexpr", "FavoriteCount": "2", "LastEditDate": "2017-09-22T21:12:19.423", "Id": "46372614", "Score": "10", "Body": "<p>I wanted to test the behavior of floats near infinity.\nFor that I naively wrote the following code:</p>\n<pre><code>#include &lt;limits&gt;\n#include &lt;iostream&gt;\n\nint main() {\n    constexpr float foo = std::numeric_limits&lt;float&gt;::infinity() - std::numeric_limits&lt;float&gt;::epsilon();\n    std::cout &lt;&lt; foo &lt;&lt; std::endl;\n    return foo;\n}\n</code></pre>\n<p>The interesting part to me was that this compiles fine in GCC 7.2 but fails on Clang 5 (complaining about non-constexpr assign of <code>foo</code>).</p>\n<p>AFAIK, since C++11, <code>std::numeric_limits&lt;float&gt;::infinity()</code> and <code>infinity()</code> are <code>constexpr</code>, so I am wondering where the problem lies for Clang.</p>\n<hr>\n<p><strong>EDIT 1:</strong></p>\n<p>Removed unnecessary <code>static_assert</code>.\nThanks for pointing to division by 0. IMO the quoted standards text there does not apply here!?</p>\n<p>And the obligatory godbolt link: <a href=\"https://godbolt.org/g/Nd5yF9\" rel=\"noreferrer\">https://godbolt.org/g/Nd5yF9</a></p>\n<p><strong>EDIT 2:</strong></p>\n<p>Note that the same behavior applies to:</p>\n<pre><code>constexpr float foo = std::numeric_limits&lt;float&gt;::infinity() - 100.0f;\n</code></pre>\n</hr>", "Tags": "<c++><c++1z>", "OwnerUserId": "725937", "AnswerCount": "1"}, "46373136": {"ParentId": "46372614", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>I'm not particularly familiar with floating point rules, but I'd suspect that we might be running afoul of <a href=\"http://eel.is/c++draft/expr#4.sentence-1\" rel=\"noreferrer\">[expr]/4</a>:</p>\n<blockquote>\n<p id=\"so_46372614_46373136_0\">If during the evaluation of an expression, the result is not mathematically defined or not in the range of representable values for its type, the behavior is undefined.</p>\n</blockquote>\n<p>Which, in turn, means we run afoul of <a href=\"http://eel.is/c++draft/expr.const#2.6\" rel=\"noreferrer\">[expr.const]/2.6</a>:</p>\n<blockquote>\n<p id=\"so_46372614_46373136_1\">An expression e is a core constant expression unless the evaluation of e, following the rules of the abstract machine, would evaluate one of the following expressions: [...] an operation that would have undefined behavior as specified in [intro] through [cpp] of this document</p>\n</blockquote>\n<p>That means the initializer for <code>foo</code> isn't a constant expression, so we can't initialize a <code>constexpr</code> object with it. </p>\n<hr/>\n<p>If <code>infinity() - epsilon()</code> is well-defined for <code>float</code>, this is a clang bug, the code is well-formed. If it's not well-defined for <code>float</code>, this is a gcc bug. </p>\n", "OwnerUserId": "2069064", "LastEditorUserId": "241631", "LastEditDate": "2017-09-22T21:18:12.267", "Id": "46373136", "Score": "8", "CreationDate": "2017-09-22T21:01:17.707", "LastActivityDate": "2017-09-22T21:18:12.267"}, "bq_ids": {"n4140": {"so_46372614_46373136_1": {"section_id": 6185, "quality": 0.7083333333333334, "length": 17}, "so_46372614_46373136_0": {"section_id": 5937, "quality": 1.0, "length": 13}}, "n3337": {"so_46372614_46373136_0": {"section_id": 5709, "quality": 1.0, "length": 13}}, "n4659": {"so_46372614_46373136_1": {"section_id": 7687, "quality": 0.7916666666666666, "length": 19}, "so_46372614_46373136_0": {"section_id": 7421, "quality": 1.0, "length": 13}}}});