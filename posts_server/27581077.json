post_cb({"29904938": {"ParentId": "27581077", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>MSVC is pretty clearly in the wrong here; I checked on <a href=\"http://goo.gl/ZPPHGb\" rel=\"nofollow\">Godbolt</a> and Clang, ICC, and GCC all accept your first code once a <code>#include &lt;functional&gt;</code> is stuffed in front of it.  You may want to file a bug report on <a href=\"http://connect.microsoft.com\" rel=\"nofollow\">Connect</a> as well...</p>\n", "OwnerUserId": "3657206", "LastEditorUserId": "3657206", "LastEditDate": "2015-04-27T21:10:00.010", "Id": "29904938", "Score": "1", "CreationDate": "2015-04-27T20:03:36.527", "LastActivityDate": "2015-04-27T21:10:00.010"}, "bq_ids": {"n4140": {"so_27581077_29921347_0": {"section_id": 5907, "quality": 0.9, "length": 9}}, "n3337": {"so_27581077_29921347_0": {"section_id": 5679, "quality": 0.9, "length": 9}}, "n4659": {"so_27581077_29921347_0": {"section_id": 7389, "quality": 0.9, "length": 9}}}, "29921347": {"ParentId": "27581077", "CommentCount": "3", "Body": "<p>MSVC is not standard compliant, because the standard says (\u00a79.4.2 [class.static.data]):</p>\n<blockquote>\n<p id=\"so_27581077_29921347_0\">The initializer expression in the definition of a static data member is in the scope of its class</p>\n</blockquote>\n<p>Clearly, the template parameter <code>T</code> is in the scope of the template class, therefore its name should be available in the initializer of of the static member <code>funcObj</code>. Lambdas inherit the types of the enclosing scope, so this version <em>is</em> standard compliant:</p>\n<pre><code>template &lt;typename T&gt; typename MyClass&lt;T&gt;::FunctionType MyClass&lt;T&gt;::funcObj =\n[]{return new T();};\n</code></pre>\n", "OwnerUserId": "1978011", "PostTypeId": "2", "Id": "29921347", "Score": "2", "CreationDate": "2015-04-28T13:46:21.240", "LastActivityDate": "2015-04-28T13:46:21.240"}, "27581077": {"CommentCount": "11", "AcceptedAnswerId": "29921347", "PostTypeId": "1", "LastEditorUserId": "1978011", "CreationDate": "2014-12-20T14:21:18.880", "LastActivityDate": "2015-04-29T16:49:32.387", "LastEditDate": "2015-04-29T16:49:32.387", "ViewCount": "102", "FavoriteCount": "2", "Title": "C++11 MSVS vs GCC visibility of template parameter name in static member initialization", "Id": "27581077", "Score": "3", "Body": "<p>I just want to ask why MSVS2013 complains with this code unlike GCC(4.8.3 at least):</p>\n<pre><code>template &lt;typename T&gt;\nstruct MyClass\n{\n    typedef std::function&lt;T*()&gt; FunctionType;\n    static FunctionType funcObj;\n};\n\ntemplate &lt;typename T&gt; typename MyClass&lt;T&gt;::FunctionType MyClass&lt;T&gt;::funcObj =\n    []{return new T();};\n</code></pre>\n<p>In msvs2013, it complains this:\nError   1   error C2061: syntax error : identifier 'T'</p>\n<p>And to fix, i have to modify it to this:</p>\n<pre><code>template &lt;typename T&gt;\nstruct MyClass\n{\n    typedef std::function&lt;T*()&gt; FunctionType;\n    static FunctionType funcObj;\n\n    static T* foo()\n    {\n        return new T();\n    }\n};\n\ntemplate &lt;typename T&gt; typename MyClass&lt;T&gt;::FunctionType MyClass&lt;T&gt;::funcObj =\n    MyClass&lt;T&gt;::foo;\n</code></pre>\n<p>NOTE: 'MyClass &lt; T &gt; ::' is not necessary at the last line. I just want to imply that T is still usable on the right hand side of the operation(to be assigned), and when T was inside the lambda, it is not usable anymore.</p>\n<p>Which one complies correctly in the current standard?\nIs there any way to ensure that the typename is still usable in a lambda in such cases?</p>\n<p>Thank you in advance!</p>\n<hr>\n<p><strong>Edit</strong></p>\n<p>The issue seems to be fixed in the current version, such that the first version works in MSVS too.</p>\n</hr>", "Tags": "<templates><c++11><lambda><compiler-errors><static-members>", "OwnerUserId": "4380794", "AnswerCount": "2"}});