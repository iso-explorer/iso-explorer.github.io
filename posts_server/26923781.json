post_cb({"bq_ids": {"n4140": {"so_26923781_26924129_2": {"section_id": 5910, "quality": 0.8888888888888888, "length": 8}, "so_26923781_26924129_5": {"section_id": 5907, "quality": 0.9512195121951219, "length": 39}}, "n3337": {"so_26923781_26924129_2": {"section_id": 5682, "quality": 0.8888888888888888, "length": 8}, "so_26923781_26924129_5": {"section_id": 5679, "quality": 0.9512195121951219, "length": 39}}, "n4659": {"so_26923781_26924129_2": {"section_id": 7392, "quality": 0.7777777777777778, "length": 7}, "so_26923781_26924129_5": {"section_id": 7389, "quality": 0.9024390243902439, "length": 37}}}, "26923781": {"CommentCount": "0", "AcceptedAnswerId": "26924129", "CreationDate": "2014-11-14T05:52:32.313", "LastActivityDate": "2014-11-15T04:56:54.663", "PostTypeId": "1", "ViewCount": "187", "FavoriteCount": "1", "Title": "Confused about this aspect of Singleton pattern", "Id": "26923781", "Score": "2", "Body": "<p>I adapted my Singleton class from a tutorial I found on the web. My header looks something like:</p>\n<pre><code>class Logger{\npublic:\n    static Logger *instance();\n    ~Logger();\nprivate:\n    Logger();\n    static Logger *instance_;\n};\n</code></pre>\n<p>and the cpp file is:</p>\n<pre><code>Logger* Logger::instance_=nullptr;  //Confused about this \n\nLogger *Logger::instance(){\n    if (instance_==nullptr){\n        instance_=new Logger();\n    }\n    return instance_;\n}\n\nLogger::Logger(){}\n</code></pre>\n<p>A few questions:</p>\n<p>1) In the first line of my cpp, if I write just \"Logger::instance_=nullptr;\" then I get an error. Since it's already been declared in the header, why do I need to mention that instance_ is a pointer again? </p>\n<p>2) Why can't I initialize instance_ in the header file itself as \"static Logger *instance_=nullptr;\"? Doing so gives me the following error:</p>\n<blockquote>\n<p id=\"so_26923781_26923781_0\">error: \u2018constexpr\u2019 needed for in-class initialization of static data\n  member \u2018Logger* Logger::instance_\u2019 of non-integral type [-fpermissive]\n       static Logger*instance_=nullptr;\n                                  ^</p>\n</blockquote>\n<p>Thank you!</p>\n", "Tags": "<c++><design-patterns><singleton>", "OwnerUserId": "4251100", "AnswerCount": "3"}, "26924129": {"ParentId": "26923781", "PostTypeId": "2", "CommentCount": "2", "Body": "<blockquote>\n<p id=\"so_26923781_26924129_0\">Question 1) In the first line of my cpp, if I write just <code>Logger::instance_=nullptr;</code> then I get an error. Since it's already been declared in the header, why do I need to mention that instance_ is a pointer again?</p>\n</blockquote>\n<p>From the C++ Draft Standard N3337:</p>\n<blockquote>\n<p id=\"so_26923781_26924129_1\"><strong>9.4.2 Static data members</strong></p>\n<p id=\"so_26923781_26924129_2\">5 <code>static</code> data members of a class in namespace scope have external linkage (3.5).</p>\n</blockquote>\n<p>It's analgous to declaring</p>\n<pre><code>extern int a;\n</code></pre>\n<p>in a .h file and defining</p>\n<pre><code>int a = 10;\n</code></pre>\n<p>in a .cpp file. You have to specify the type of <code>a</code> when it's defined.</p>\n<blockquote>\n<p id=\"so_26923781_26924129_3\">Question 2) Why can't I initialize instance_ in the header file itself as \"static Logger *instance_=nullptr;\"?</p>\n</blockquote>\n<p>From the C++ Draft Standard N3337 (emphasis mine):</p>\n<blockquote>\n<p id=\"so_26923781_26924129_4\"><strong>9.4.2 Static data members</strong></p>\n<p id=\"so_26923781_26924129_5\">2 The declaration of a <code>static</code> data member in its class definition is not a definition and may be of an incomplete type other than cv-qualified <code>void</code>. <strong>The definition for a <code>static</code> data member shall appear in a namespace scope enclosing the member\u2019s class definition.</strong> In the definition at namespace scope, the name of the <code>static</code> data member shall be qualified by its class name using the :: operator.</p>\n</blockquote>\n<p><strong>Update, in response to OP's comment</strong></p>\n<p>Say you have:</p>\n<pre><code>namespace detail\n{\n   class Foo\n   {\n       static int var;\n   };\n}\n</code></pre>\n<p><code>Foo::var</code> must be defined in the enclosing <code>namespace</code> of <code>Foo</code>.</p>\n<pre><code>namespace detail\n{\n   int Foo:var = 0;\n}\n</code></pre>\n<p>In the absence of an explicit enclosing namespace of a class, the global scope is it's enclosing namespace.</p>\n", "OwnerUserId": "434551", "LastEditorUserId": "434551", "LastEditDate": "2014-11-14T07:15:30.453", "Id": "26924129", "Score": "2", "CreationDate": "2014-11-14T06:23:25.900", "LastActivityDate": "2014-11-14T07:15:30.453"}, "26923801": {"ParentId": "26923781", "CommentCount": "0", "Body": "<p>Both questions boils down to one thing i.e \"You have to provide definition for static data members used in class explicitly in implementation file\".</p>\n", "OwnerUserId": "4047092", "PostTypeId": "2", "Id": "26923801", "Score": "0", "CreationDate": "2014-11-14T05:54:36.137", "LastActivityDate": "2014-11-14T05:54:36.137"}, "26923877": {"ParentId": "26923781", "CommentCount": "0", "Body": "<p><strong>1) In the first line of my cpp, if I write just \"Logger::instance_=nullptr;\" then I get an error. Since it's already been declared in the header, why do I need to mention that instance_ is a pointer again?</strong> </p>\n<p>Because you need to be able to <em>define</em> static variables without <em>declaring</em> them first so <strong>C++</strong> requires the <em>type</em> information in the <em>definition</em> as well as the <em>declaration</em>.</p>\n<p><strong>2) Why can't I initialize instance_ in the header file itself as \"static Logger *instance_=nullptr;\"?</strong></p>\n<p>Because you don't want a copy of the same variable in every file that includes your header. There should only be ONE <em>definition</em> in the whole program but it needs to be <em>declared</em> every time it is accessed.</p>\n", "OwnerUserId": "3807729", "PostTypeId": "2", "Id": "26923877", "Score": "0", "CreationDate": "2014-11-14T06:01:23.220", "LastActivityDate": "2014-11-14T06:01:23.220"}});