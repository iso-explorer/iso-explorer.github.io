post_cb({"bq_ids": {"n4140": {"so_21411098_21411211_1": {"length": 16, "quality": 0.9411764705882353, "section_id": 664}}, "n3337": {"so_21411098_21411211_1": {"length": 16, "quality": 0.9411764705882353, "section_id": 654}}, "n4659": {"so_21411098_21411211_1": {"length": 16, "quality": 0.9411764705882353, "section_id": 692}}}, "21411098": {"ViewCount": "173", "Body": "<p>I can not seem to wrap my head around it. The <code>-&gt;</code> operator for <code>std::shared_ptr</code>, only returns a pointer to the member (lets say it is a instance of a class), yet at the same time it can be used to call methods... HOW? We are not doing anything to the pointer returned by the <code>-&gt;</code> operator, how do we call methods, and access instance variables? If I have something functionally equivalent such as</p>\n<pre><code>T* Get() {\n    return &amp;t;\n}\n</code></pre>\n<p>In <code>std::shared_ptr</code> (and yes I do relise there is a <code>get()</code> method), why can I not write: </p>\n<pre><code>someSharedPtr.Get()SomeMethod()\n</code></pre>\n<p>That is essentailly what: </p>\n<pre><code>someSharedPtr-&gt;SomeMethod()\n</code></pre>\n<p>is doing.... I am confused. How can returning a pointer substitute for something like <code>-&gt;-&gt;</code>  or  <code>operator-&gt;()-&gt;</code> syntax?</p>\n", "Title": "I Dont Understand The -> Operator For std::shared_ptr", "CreationDate": "2014-01-28T16:21:38.203", "LastActivityDate": "2014-01-28T16:31:16.717", "CommentCount": "0", "PostTypeId": "1", "Id": "21411098", "Score": "3", "OwnerUserId": "3058459", "Tags": "<c++><c++11><methods><operators><operator-overloading>", "AnswerCount": "1"}, "21411211": {"Id": "21411211", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_21411098_21411211_0\">How can returning a pointer substitute for something like <code>-&gt;-&gt;</code> or <code>operator-&gt;()-&gt;</code> syntax?</p>\n</blockquote>\n<p>Because the standard says so.</p>\n<p>13.5.6 [over.ref] defines an overloaded <code>operator-&gt;</code> to Do The Right Thing:</p>\n<blockquote>\n<p id=\"so_21411098_21411211_1\">An expression <code>x-&gt;m</code> is interpreted as <code>(x.operator-&gt;())-&gt;m</code> for a class object <code>x</code> of type <code>T</code> if <code>T::operator-&gt;()</code> exists and if the operator is selected as the best match function by the overload resolution mechanism (13.3).</p>\n</blockquote>\n<p>If it <em>didn't</em> do that, then you couldn't implement types that act like pointers and have the usual semantics for <code>x-&gt;m</code> that users expect from a pointer-like type. So the language says that's what it does, doing anything else would make overloading <code>operator-&gt;</code> far less useful.</p>\n<p>This actually allows you to chain calls to <code>operator-&gt;</code> to arbitrary depths, if you have a pointer-like type that returns a pointer-like type that returns a pointer-like type etc. until finally something returns a real pointer.</p>\n", "LastEditorUserId": "981959", "LastActivityDate": "2014-01-28T16:31:16.717", "Score": "13", "CreationDate": "2014-01-28T16:25:55.950", "ParentId": "21411098", "CommentCount": "2", "OwnerUserId": "981959", "LastEditDate": "2014-01-28T16:31:16.717"}});