post_cb({"34490537": {"ParentId": "34490247", "PostTypeId": "2", "CommentCount": "2", "CreationDate": "2015-12-28T09:04:44.883", "Score": "3", "LastEditorUserId": "183120", "LastEditDate": "2015-12-28T09:30:15.630", "Id": "34490537", "OwnerUserId": "183120", "Body": "<blockquote>\n<p id=\"so_34490247_34490537_0\">so the sequence are -&gt; A() -&gt; B::B(const A&amp;) -&gt; Standard conversion (identity conversion)</p>\n</blockquote>\n<p>No! Excerpt from the standard (draft) <strong>[over.best.ics]</strong> (emphasis mine):</p>\n<blockquote id=\"so_34490247_34490537_1\">\n<ol start=\"8\">\n<li>If <strong>no</strong> conversions are required to match an argument to a parameter type, the implicit conversion sequence is the standard conversion sequence consisting of the identity conversion (13.3.3.1.1).</li>\n</ol>\n</blockquote>\n<p><code>func(A())</code> is not identity, it's user-defined. Again from the standard, <strong>[[conv]]</strong>:</p>\n<blockquote>\n<p id=\"so_34490247_34490537_2\">For class types, user-defined conversions are considered as well; see 12.3. In general, an implicit conversion sequence (13.3.3.1) consists of a standard conversion sequence followed by a user-defined conversion followed by another standard conversion sequence.</p>\n</blockquote>\n<p>I think you have a misunderstanding about <em>Standard conversions</em>. They have nothing to do with user-defined types/classes. Standard conversions are only for built-in types: lvalue-to-rvalue conversion, array-to-pointer conversion, function-to-pointer conversion, integral promotions, floating point promotion, integral conversions, floating point conversions, floating-integral conversions, pointer conversions, pointer to member conversions, boolean conversions and qualification conversions. <code>A</code> -&gt; <code>int</code> is not any of these but a user-defined conversion. The standard on user-defined conversions, <strong>[[class.conv]]</strong> i.e. 12.3:</p>\n<blockquote>\n<p id=\"so_34490247_34490537_3\">Type conversions of class objects can be specified by constructors and by conversion functions. These conversions are called user-defined conversions and are used for implicit type conversions (Clause 4), for initialization (8.5), and for explicit type conversions (5.4, 5.2.9).</p>\n</blockquote>\n<p>You have two user-defined conversion sequences of the same rank (see M.M's answer to know why), so the compiler wants you to disambiguate.</p>\n", "LastActivityDate": "2015-12-28T09:30:15.630"}, "34490489": {"ParentId": "34490247", "PostTypeId": "2", "CommentCount": "8", "CreationDate": "2015-12-28T09:01:10.407", "Score": "6", "LastEditorUserId": "1505939", "LastEditDate": "2015-12-28T09:09:09.737", "Id": "34490489", "OwnerUserId": "1505939", "Body": "<p>The two conversion sequences here, <code>A -&gt; B</code> and <code>A -&gt; int</code> are both <em>user-defined</em> because they operate via functions which you defined.</p>\n<p>The rule for ranking user-defined conversion sequences is found in 13.3.3.2 (N3797):</p>\n<blockquote>\n<p id=\"so_34490247_34490489_0\">User-defined conversion sequence <code>U1</code> is a better conversion sequence than another user-defined conversion sequence <code>U2</code> if they contain the same user-defined conversion function or constructor or they initialize the same class in an aggregate initialization and in either case the second standard conversion sequence of <code>U1</code> is better than the second standard conversion sequence of <code>U2</code></p>\n</blockquote>\n<p>These two conversion sequences don't contain the same user-defined conversion function, and they don't initialize the same class in aggregate initialization (since one initializes <code>int</code>). </p>\n<p>So it is not true that one sequence ranks above the other, therefore this code is ambiguous.</p>\n", "LastActivityDate": "2015-12-28T09:09:09.737"}, "34490247": {"CommentCount": "1", "ViewCount": "232", "PostTypeId": "1", "LastEditorUserId": "4882052", "CreationDate": "2015-12-28T08:42:23.167", "LastActivityDate": "2015-12-28T15:54:23.773", "Title": "Overload resolution and user defined conversion", "AcceptedAnswerId": "34490489", "LastEditDate": "2015-12-28T15:54:23.773", "Id": "34490247", "Score": "8", "Body": "<p>Consider the simple code :</p>\n<pre><code>struct A;\nstruct B {\n  B(){}\n  B(A const&amp;){ }\n};\n\nstruct A {\n  operator int() const {return 0;};\n};\nvoid func(B){}\nvoid func(char){}\n\nint main()\n{\nfunc(A()); //ambiguous call oO\n}\n</code></pre>\n<p>First of all I'm not sure if I understand everything correctly, so correct me anytime you find me wrong please. </p>\n<p>My understanding was that that <code>void func(B)</code> should have been chosen, since argument to <code>func</code> is <code>A</code> which is class type, hence type of conversion required is \"User defined conversion sequence\"</p>\n<p>Now from IBM C++ ref :</p>\n<blockquote>\n<p id=\"so_34490247_34490247_0\">A user-defined conversion sequence consists of the following: </p>\n<ul>\n<li>A standard conversion sequence</li>\n<li>A user-defined conversion</li>\n<li>A second standard conversion sequence</li>\n</ul>\n</blockquote>\n<p>Now there are two user defined conversion present \n<code>B::B(const A&amp;)</code> and <code>A::operator int (const A&amp;);</code> </p>\n<p>so the sequence are</p>\n<p>-&gt; <code>A()</code> -&gt; <code>B::B(const A&amp;)</code> -&gt; <code>Standard conversion (identity conversion)</code> </p>\n<p>-&gt; <code>A()</code> -&gt; <code>A::operator int (const A&amp;)</code> -&gt; <code>Standard conversion (integral conversion)</code></p>\n<p>since integral conversion is worse than identity conversion I thought <code>void func(B)</code> would called but still the call is ambiguous .</p>\n<p>So please help me at which point am I wrong and why the call is ambiguous. Thanks a lot :)</p>\n", "Tags": "<c++><overload-resolution>", "OwnerUserId": "4882052", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_34490247_34490489_0": {"section_id": 639, "quality": 1.0, "length": 34}, "so_34490247_34490537_1": {"section_id": 613, "quality": 0.9333333333333333, "length": 14}, "so_34490247_34490537_0": {"section_id": 611, "quality": 0.6666666666666666, "length": 4}, "so_34490247_34490537_3": {"section_id": 383, "quality": 0.8695652173913043, "length": 20}, "so_34490247_34490537_2": {"section_id": 6, "quality": 0.8695652173913043, "length": 20}, "so_34490247_34490247_0": {"section_id": 6, "quality": 0.8, "length": 4}}, "n3337": {"so_34490247_34490489_0": {"section_id": 629, "quality": 0.8235294117647058, "length": 28}, "so_34490247_34490537_1": {"section_id": 603, "quality": 0.9333333333333333, "length": 14}, "so_34490247_34490537_0": {"section_id": 601, "quality": 0.6666666666666666, "length": 4}, "so_34490247_34490537_3": {"section_id": 374, "quality": 0.8695652173913043, "length": 20}, "so_34490247_34490537_2": {"section_id": 3, "quality": 0.8260869565217391, "length": 19}, "so_34490247_34490247_0": {"section_id": 3, "quality": 0.8, "length": 4}}, "n4659": {"so_34490247_34490537_1": {"section_id": 639, "quality": 0.9333333333333333, "length": 14}, "so_34490247_34490489_0": {"section_id": 667, "quality": 1.0, "length": 34}, "so_34490247_34490537_0": {"section_id": 637, "quality": 0.6666666666666666, "length": 4}, "so_34490247_34490537_3": {"section_id": 400, "quality": 0.8695652173913043, "length": 20}, "so_34490247_34490537_2": {"section_id": 6, "quality": 0.8695652173913043, "length": 20}, "so_34490247_34490247_0": {"section_id": 6, "quality": 0.8, "length": 4}}}});