post_cb({"34590028": {"Id": "34590028", "PostTypeId": "2", "Body": "<p>Cast the 16 too. Otherwise the int type is contagious.</p>\n<p><code>array[0] = (value &lt;&lt; (int16_t 16)) | value;</code></p>\n<p>Edit: I don't have a compiler handy to test. Per comment below, this may not be right, but will get you in the right direction.</p>\n", "LastEditorUserId": "1794183", "LastActivityDate": "2016-01-04T13:50:54.357", "Score": "0", "CreationDate": "2016-01-04T11:22:57.703", "ParentId": "34589775", "CommentCount": "3", "LastEditDate": "2016-01-04T13:50:54.357", "OwnerUserId": "1794183"}, "34589775": {"ViewCount": "155", "Body": "<p>I was messing about with arrays and noticed this.EG: </p>\n<pre><code>int32_t array[];\nint16_t value = -4000;\n</code></pre>\n<p>When I tried to write the value into the top and bottom half of the int32 array value,</p>\n<pre><code>array[0] = (value &lt;&lt; 16) | value;\n</code></pre>\n<p>the compiler would cast value into a 32 bit value first before the doing the bit shift and the bitwise OR. Thus, instead of 16 bit -400 being written in the top and bottom halves, the top value will be -1 and the bottom be -4000.</p>\n<p>Is there a way to OR in the 16 bit value of -4000 so both halves are -4000? It's not really a huge problem. I am just curious to know if it can be done. </p>\n", "Title": "Bitwise or before casting to int32", "CreationDate": "2016-01-04T11:09:37.640", "LastActivityDate": "2016-01-04T13:50:54.357", "CommentCount": "1", "LastEditDate": "2016-01-04T11:32:19.210", "PostTypeId": "1", "LastEditorUserId": "2684539", "Id": "34589775", "Score": "3", "OwnerUserId": "4986266", "Tags": "<c++><c><bit-manipulation><integer-promotion>", "AnswerCount": "5"}, "34589968": {"Id": "34589968", "PostTypeId": "2", "Body": "<p>Normally when faced with this kind of issue I first set the resultant value to zero, then bitwise assign the values in.</p>\n<p>So the code would be:</p>\n<pre><code>int32_t array[1];\nint16_t value = -4000;\narray[0] = 0x0000FFFF;\narray[0] &amp;= value;\narray[0] |= (value &lt;&lt; 16);\n</code></pre>\n", "LastEditorUserId": "3323096", "LastActivityDate": "2016-01-04T11:34:30.793", "Score": "1", "CreationDate": "2016-01-04T11:19:53.020", "ParentId": "34589775", "CommentCount": "4", "LastEditDate": "2016-01-04T11:34:30.793", "OwnerUserId": "3323096"}, "bq_ids": {"n4140": {"so_34589775_34589920_0": {"length": 13, "quality": 0.8666666666666667, "section_id": 6147}}, "n3337": {"so_34589775_34589920_0": {"length": 13, "quality": 0.8666666666666667, "section_id": 5910}}, "n4659": {"so_34589775_34589920_0": {"length": 13, "quality": 0.8666666666666667, "section_id": 7643}}}, "34589957": {"Id": "34589957", "PostTypeId": "2", "Body": "<p>Sure thing, just undo the sign-extension:</p>\n<pre><code>array[0] = (value &lt;&lt; 16) | (value &amp; 0xFFFF);\n</code></pre>\n<p>Don't worry, the compiler should <a href=\"http://gcc.godbolt.org/#%7B%22version%22%3A3%2C%22filterAsm%22%3A%7B%22labels%22%3Atrue%2C%22directives%22%3Atrue%2C%22commentOnly%22%3Atrue%2C%22intel%22%3Atrue%7D%2C%22compilers%22%3A%5B%7B%22sourcez%22%3A%22MQSwdgxgNgrgJgUwAQB4DOAXO4MDoAWAfAFDE4DMATAPoZIYKYAUOAjAGy1IBuAhrAgCUxAN7EkSAE4IMMSWCRM%2BA1CiQdBSAD6LlMZADIkABgAeAMUvnBAbmIBfIAAA%22%2C%22compiler%22%3A%22clang37x%22%2C%22options%22%3A%22-O3%22%7D%5D%7D\" rel=\"nofollow\">handle this reasonably</a>.</p>\n<p>To avoid shifting a negative number:</p>\n<pre><code>array[0] = ((value &amp; 0xFFFF) &lt;&lt; 16) | (value &amp; 0xFFFF);\n</code></pre>\n<p>Fortunately that extra useless <code>&amp;</code> (even more of a NOP than the one on the right) <a href=\"http://gcc.godbolt.org/#%7B%22version%22%3A3%2C%22filterAsm%22%3A%7B%22labels%22%3Atrue%2C%22directives%22%3Atrue%2C%22commentOnly%22%3Atrue%2C%22intel%22%3Atrue%7D%2C%22compilers%22%3A%5B%7B%22sourcez%22%3A%22MQSwdgxgNgrgJgUwAQB4DOAXO4MDoAWAfAFDE4DMATAPoZIYKYAUOAjAGy1IBuAhrAgCUxAN7EkSAE4IMMSWCRMmfAUgBkSAAwAPAGL7dg1CiQcjAH0UqYyDToOGA3MQC%2BQAAA%3D%3D%22%2C%22compiler%22%3A%22clang37x%22%2C%22options%22%3A%22-O3%22%7D%5D%7D\" rel=\"nofollow\">doesn't show up in the code</a>.</p>\n", "LastEditorUserId": "555045", "LastActivityDate": "2016-01-04T11:26:54.783", "Score": "3", "CreationDate": "2016-01-04T11:19:09.530", "ParentId": "34589775", "CommentCount": "5", "LastEditDate": "2016-01-04T11:26:54.783", "OwnerUserId": "555045"}, "34589999": {"Id": "34589999", "PostTypeId": "2", "Body": "<p>use unsigned value:</p>\n<pre><code>const uint16_t uvalue = value\narray[0] = (uvalue &lt;&lt; 16) | uvalue;\n</code></pre>\n", "LastActivityDate": "2016-01-04T11:21:20.000", "Score": "2", "CreationDate": "2016-01-04T11:21:20.000", "ParentId": "34589775", "CommentCount": "0", "OwnerUserId": "2684539"}, "34589920": {"Id": "34589920", "PostTypeId": "2", "Body": "<p>Left shift on signed types is defined only in some cases. From standard</p>\n<blockquote>\n<p id=\"so_34589775_34589920_0\">6.5.7/4 [...] If E1 has a signed type and nonnegative value, and E1 \u00d7 2<sup>E2</sup> is representable in the result type, then that is the resulting\n  value; otherwise, the behavior is undefined.</p>\n</blockquote>\n<p>According to this definition, it seems what you have is undefined behaviour.</p>\n", "LastEditorUserId": "3963067", "LastActivityDate": "2016-01-04T11:35:49.790", "Score": "3", "CreationDate": "2016-01-04T11:17:18.990", "ParentId": "34589775", "CommentCount": "3", "LastEditDate": "2016-01-04T11:35:49.790", "OwnerUserId": "3963067"}});