post_cb({"bq_ids": {"n4140": {"so_30939147_30939437_0": {"length": 14, "quality": 0.5185185185185185, "section_id": 3913}}, "n3337": {"so_30939147_30939437_0": {"length": 14, "quality": 0.5185185185185185, "section_id": 3773}}}, "30939274": {"PostTypeId": "2", "Body": "<p>The warning, which <a href=\"http://coliru.stacked-crooked.com/a/585665596042de6c\" rel=\"nofollow\">is reported on the <code>Get2</code> function</a>, is there because there's an <em>implicit</em> conversion (as opposed to the explicit one you have on <code>Get1</code>) happening, and the compiler is warning you that the integer is being truncated.</p>\n<p>The explicit one is not being reported, because you have explicitly told the compiler that you are performing a truncation, so a warning would probably be redundant in that case.</p>\n", "LastActivityDate": "2015-06-19T13:22:21.690", "Id": "30939274", "CommentCount": "1", "CreationDate": "2015-06-19T13:22:21.690", "ParentId": "30939147", "Score": "4", "OwnerUserId": "493122"}, "30939147": {"ViewCount": "142", "Body": "<p>I'm getting a (expected) </p>\n<blockquote>\n<p id=\"so_30939147_30939147_0\">warning: large integer implicitly truncated to unsigned type [<code>-Woverflow</code>] </p>\n</blockquote>\n<p>on <code>Get2()</code> but on not on <code>Get1()</code>. I'm quite puzzled why:</p>\n<pre><code>#include &lt;stdint.h&gt;\n\nuint8_t Get1()\n{\n      return uint8_t(uint64_t(10000));\n}\n\nuint8_t Get2()\n{\n     return uint64_t(10000);\n}\n\nint main()\n{\n     return 0;\n}\n</code></pre>\n<p>This is a simplified version of some templated code doing other things - without hard-coded values.\nThe same happens in C++ when compiled either with GCC or Clang.</p>\n", "AcceptedAnswerId": "30939274", "Title": "C++ basic type demotion when returning from a function", "CreationDate": "2015-06-19T13:15:25.550", "Id": "30939147", "CommentCount": "12", "LastEditDate": "2015-06-22T11:00:02.290", "PostTypeId": "1", "LastEditorUserId": "4774918", "LastActivityDate": "2015-06-22T11:00:02.290", "Score": "3", "OwnerUserId": "5028310", "Tags": "<c++><compiler-warnings><type-conversion>", "AnswerCount": "2"}, "30939437": {"PostTypeId": "2", "Body": "<p>Just to add to the <a href=\"https://stackoverflow.com/a/30939274/2173917\">answer</a> by Mr <a href=\"https://stackoverflow.com/users/493122/jefffrey\">Jefffrey</a>,</p>\n<p>from the <code>return</code> statement Semantics, <code>C11</code>, chapter <code>\u00a76.8.6.4</code></p>\n<blockquote>\n<p id=\"so_30939147_30939437_0\">If a <code>return</code> statement with an expression is executed, the value of the expression is returned to the caller as the value of the function call expression. <strong>If the expression has a type different from the return type of the function in which it appears, the value is converted as if by assignment to an object having the return type of the function.</strong></p>\n</blockquote>\n<p>In case of <code>Get1()</code>, because of the explicit cast, the final expression type is <code>uint8_t</code> which matches the return type of the function.</p>\n<p>In case of <code>Get2()</code>, the final expression type is <code>uint64_t</code> which does not matches the return type <code>uint8_t</code> of the function.</p>\n<p>So, in case of <code>Get2()</code>, the type is getting <em>converted</em> (as if by assignment) and due to the mismtach in type, the warning is produced.</p>\n", "LastActivityDate": "2015-06-19T13:29:50.813", "LastEditorUserId": "-1", "Id": "30939437", "CommentCount": "0", "CreationDate": "2015-06-19T13:29:50.813", "ParentId": "30939147", "Score": "2", "OwnerUserId": "2173917", "LastEditDate": "2017-05-23T12:14:28.520"}});