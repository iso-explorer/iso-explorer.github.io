post_cb({"bq_ids": {"n4140": {"so_21559238_21559430_0": {"length": 13, "quality": 0.8125, "section_id": 3260}}, "n3337": {"so_21559238_21559430_0": {"length": 13, "quality": 0.8125, "section_id": 3132}}}, "21559238": {"ViewCount": "61", "Body": "<pre><code>int foo(int arg1, int arg2 = arg1)\n{\n    std::cout &lt;&lt; arg2;\n}\n</code></pre>\n<p>Why the c++ standard does not allow this king of default parameter initialization ?</p>\n", "AcceptedAnswerId": "21559430", "Title": "Rule about function parameter and default-initialization", "CreationDate": "2014-02-04T17:24:28.357", "Id": "21559238", "CommentCount": "2", "PostTypeId": "1", "LastActivityDate": "2014-02-04T17:33:42.413", "Score": "2", "OwnerUserId": "619570", "Tags": "<c++>", "AnswerCount": "1"}, "21559430": {"PostTypeId": "2", "Body": "<p>Unusually, this is one case where the standard does give a justification (although not a particularly compelling one):</p>\n<blockquote>\n<p id=\"so_21559238_21559430_0\">C++11 8.3.6/9 The order of evaluation of function arguments is unspecified. Consequently, parameters of a function shall not be used in a default argument, even if they are not evaluated.</p>\n</blockquote>\n<p>It's not a particularly arduous restriction, since you can achieve the same effect with an overload:</p>\n<pre><code>int foo(arg1) {return foo(arg1, arg1);}\n</code></pre>\n", "LastActivityDate": "2014-02-04T17:33:42.413", "Id": "21559430", "CommentCount": "0", "CreationDate": "2014-02-04T17:33:42.413", "ParentId": "21559238", "Score": "4", "OwnerUserId": "204847"}});