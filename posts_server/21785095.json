post_cb({"21785143": {"Id": "21785143", "PostTypeId": "2", "Body": "<p>Floating-point literals like these, with no suffix, have type <code>double</code>. You could suffix them with <code>f</code> or <code>F</code> to make them <code>float</code>, or with <code>l</code> or <code>L</code> to make them <code>long double</code>.</p>\n", "LastActivityDate": "2014-02-14T16:56:39.057", "CommentCount": "0", "CreationDate": "2014-02-14T16:56:39.057", "ParentId": "21785095", "Score": "1", "OwnerUserId": "204847"}, "bq_ids": {"n4140": {"so_21785095_21785191_1": {"length": 14, "quality": 0.875, "section_id": 5348}}, "n3337": {"so_21785095_21785191_1": {"length": 14, "quality": 0.875, "section_id": 5145}}, "n4659": {"so_21785095_21785191_1": {"length": 14, "quality": 0.875, "section_id": 6773}}}, "21785095": {"ViewCount": "88", "Body": "<p>If I define values in C/C++ using #define, what datatype, if at all, do they assume?  For example:</p>\n<pre><code>#define PI 3.14159\n#define LAMBDA 6.0e-04\n#define DT LAMBDA/2.0\n</code></pre>\n<p>and so on and so forth.  Now, the above values need to be treated as doubles in calculations in my program, but is this behavior guaranteed when using preprocessor macros?  How are they processed exactly?</p>\n<p>I understand that defining them as const double ... is technically better programming practice because of the ability to scope, for example, but for the purpose of the simulator I'm writing (1 .cpp and 1 .h file) this seems to be the most organized way of arranging the constants to be used throughout.</p>\n", "Title": "Datatypes produced by #define in C++", "CreationDate": "2014-02-14T16:54:34.553", "Id": "21785095", "CommentCount": "0", "LastEditDate": "2016-07-02T19:50:52.957", "PostTypeId": "1", "LastEditorUserId": "4370109", "LastActivityDate": "2016-07-02T19:50:52.957", "Tags": "<c++><types><c-preprocessor>", "Score": "0", "OwnerUserId": "3175679", "ClosedDate": "2014-02-15T22:28:21.527", "AnswerCount": "3"}, "21785193": {"Id": "21785193", "PostTypeId": "2", "Body": "<p>Preprocessor macros are not variables and do not have data types. Macro expansion happens before semantic analysis.</p>\n<p>So their meaning in expressions depends on how they're used. They will have precisely the same effect as if you had replaced each macro with its definition by hand.</p>\n<p>In your case, if you did so, you would have numeric literals like 3.14159 and 6.0e-04 laying around. As @MikeSeymour said in his answer, these have type <code>double</code>, since there is no suffix.</p>\n", "LastActivityDate": "2014-02-14T16:58:55.990", "CommentCount": "0", "CreationDate": "2014-02-14T16:58:55.990", "ParentId": "21785095", "Score": "4", "OwnerUserId": "1274314"}, "21785191": {"Id": "21785191", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_21785095_21785191_0\">Now, the above values need to be treated as doubles in calculations in my program, but is this behavior guaranteed when using preprocessor macros? How are they processed exactly?</p>\n</blockquote>\n<p>The macros will be expanded by the preprocessor accordingly before being parsed. Since they are <em>floating literal</em> they behave as defined in \u00a72.14.4/1 in the Standard:</p>\n<blockquote>\n<p id=\"so_21785095_21785191_1\">The type of a floating literal is <code>double</code> unless explicitly specified by a suffix. The suffixes <code>f</code> and <code>F</code> specify <code>float</code>, the suffixes <code>l</code> and <code>L</code> specify <code>long double</code>.</p>\n</blockquote>\n<hr>\n<blockquote>\n<p id=\"so_21785095_21785191_2\">I understand that defining them as const double ... is technically better programming practice because of the ability to scope.</p>\n</blockquote>\n<p>Well, this is also good practice for cases like this one. Just like your question points out:</p>\n<pre><code>const double PI       = 3.14159;\nconst double LAMBDA   = 6.0e-04;\nconst double DT       = LAMBDA / 2.0;\n</code></pre>\n<p>is much more descriptive that your defines (for example, the type is explicit). As far as \"performance\" goes, <code>const</code> values are optimized by the compiler if necessary. So, don't worry about it.</p>\n</hr>", "LastEditorUserId": "493122", "LastActivityDate": "2014-02-14T17:04:22.000", "Score": "0", "CreationDate": "2014-02-14T16:58:44.867", "ParentId": "21785095", "CommentCount": "0", "OwnerUserId": "493122", "LastEditDate": "2014-02-14T17:04:22.000"}});