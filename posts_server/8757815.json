post_cb({"bq_ids": {"n4140": {"so_8757815_8758072_1": {"length": 8, "quality": 0.7272727272727273, "section_id": 28}, "so_8757815_8758072_3": {"length": 10, "quality": 0.9090909090909091, "section_id": 36}, "so_8757815_8758072_0": {"length": 23, "quality": 0.9583333333333334, "section_id": 5348}, "so_8757815_8758072_2": {"length": 36, "quality": 0.9230769230769231, "section_id": 35}}, "n3337": {"so_8757815_8758072_1": {"length": 8, "quality": 0.7272727272727273, "section_id": 25}, "so_8757815_8758072_0": {"length": 23, "quality": 0.9583333333333334, "section_id": 5145}, "so_8757815_8758072_3": {"length": 10, "quality": 0.9090909090909091, "section_id": 33}, "so_8757815_8758072_2": {"length": 36, "quality": 0.9230769230769231, "section_id": 32}}, "n4659": {"so_8757815_8758072_1": {"length": 8, "quality": 0.7272727272727273, "section_id": 28}, "so_8757815_8758072_0": {"length": 22, "quality": 0.9166666666666666, "section_id": 6773}, "so_8757815_8758072_3": {"length": 6, "quality": 0.5454545454545454, "section_id": 34}, "so_8757815_8758072_2": {"length": 32, "quality": 0.8205128205128205, "section_id": 35}}}, "8757815": {"ViewCount": "306", "Body": "<p>Suppose <code>float a = (1.5 * b)</code> where <code>b</code> is float then how is this expression evaluated?\nIs <code>1.5</code> treated as double or float?</p>\n", "Title": "How a floating point literal is treated either double or float in Visual C++?", "CreationDate": "2012-01-06T12:30:11.387", "LastActivityDate": "2012-01-06T12:58:18.283", "CommentCount": "0", "LastEditDate": "2012-01-06T12:53:27.620", "PostTypeId": "1", "LastEditorUserId": "594137", "Id": "8757815", "Score": "2", "OwnerUserId": "970398", "Tags": "<c++>", "AnswerCount": "2"}, "8758072": {"Id": "8758072", "PostTypeId": "2", "Body": "<p><code>1.5</code> is a floating point literal, a double value. C++03 <code>2.13.3 Floating literals</code> has this to say:</p>\n<blockquote>\n<p id=\"so_8757815_8758072_0\">A floating literal consists of an integer part, a decimal point, a fraction part, an e or E, an optionally signed integer exponent, and an optional type suffix. ... The type of a floating literal is double unless explicitly specified by a suffix.</p>\n</blockquote>\n<p>Section <code>13.3.3.1 Standard conversion sequences</code> defines the way in which conversions are handled but it's a little dry to repeat here. Suffice to say that floating point promotion is done and section <code>4.6 Floating point promotion</code> states that:</p>\n<blockquote>\n<p id=\"so_8757815_8758072_1\">An rvalue of type float can be converted to an rvalue of type double. The value is unchanged.</p>\n</blockquote>\n<p>Hence the <code>float b</code> is promoted to a double to perform the multiplication.</p>\n<p>Then the calculation is performed using (effectively) a temporary <code>double</code> and the result is shoe-horned back into the <code>float a</code>.</p>\n<p>So, effectively:</p>\n<pre><code>float b = something;\n\ndouble xyzzy0 = 1.5;\ndouble xyzzy1 = (double)b;\ndouble xyzzy2 = xyzzy0 * xyzzy1;\nfloat a = xyzzy2;\n</code></pre>\n<p>That last step may be problematic. Section <code>4.8 Floating point conversions</code> (which <em>doesn't</em> include the safer promotions like <code>float</code> to <code>double</code>) states:</p>\n<blockquote>\n<p id=\"so_8757815_8758072_2\">An rvalue of floating point type can be converted to an rvalue of another floating point type. If the source value can be exactly represented in the destination type, the result of the conversion is that exact representation. If the source value is between two adjacent destination values, the result of the conversion is an implementation-defined choice of either of those values. Otherwise, the behavior is undefined.</p>\n<p id=\"so_8757815_8758072_3\">The conversions allowed as floating point promotions are excluded from the set of floating point conversions.</p>\n</blockquote>\n<p>In other words, if the multiplication results in a value outside the range of a float, all bets are off. This is likely to happen if <code>b</code> is about at 67% of the maximum absolute value of a float (positive or negative, doesn't matter).</p>\n", "LastEditorUserId": "14860", "LastActivityDate": "2012-01-06T12:58:18.283", "Score": "3", "CreationDate": "2012-01-06T12:52:31.397", "ParentId": "8757815", "CommentCount": "0", "OwnerUserId": "14860", "LastEditDate": "2012-01-06T12:58:18.283"}, "8757829": {"Id": "8757829", "PostTypeId": "2", "Body": "<p>1.5 is double, use 1.5f for float, what it actually does:</p>\n<p><code>float a = (float)(1.5 * (double)b)</code></p>\n", "LastActivityDate": "2012-01-06T12:32:11.903", "CommentCount": "0", "CreationDate": "2012-01-06T12:32:11.903", "ParentId": "8757815", "Score": "5", "OwnerUserId": "939266"}});