post_cb({"46526988": {"CommentCount": "5", "ViewCount": "68", "PostTypeId": "1", "LastEditorUserId": "1633272", "CreationDate": "2017-10-02T13:59:01.757", "LastActivityDate": "2017-10-02T14:44:18.873", "Title": "How to declare specialization template method outside class?", "AcceptedAnswerId": "46527707", "LastEditDate": "2017-10-02T14:12:43.563", "Id": "46526988", "Score": "0", "Body": "<p>The Converter class is designed to convert a string into another type. So if the target is also a string, then it should just return copy of the original value.</p>\n<p>The working code is like this:</p>\n<pre><code>template&lt;typename C&gt;\nclass Converter {\npublic:\n    template&lt;typename T&gt;\n    static T To(const std::wstring&amp; obj);\n\n    template&lt;&gt;\n    static std::wstring To(const std::wstring&amp; obj) {\n        return obj;\n    }\n};\n\ntemplate&lt;typename C&gt;\ntemplate&lt;typename T&gt;\nT Converter&lt;C&gt;::To(const std::wstring&amp; obj) {\n    // Conversion\n    return T();\n}\n</code></pre>\n<p>(Works on VC++2015 Update 3)</p>\n<p>I tried to move the specialization method outside the class declaration like this:</p>\n<pre><code>template&lt;typename C&gt;\ntemplate&lt;&gt;\nstd::wstring Converter&lt;C&gt;::To&lt;std::wstring&gt;(const std::wstring&amp; obj) {\n    return obj;\n}\n</code></pre>\n<p>And there are several compilation errors:</p>\n<blockquote>\n<p id=\"so_46526988_46526988_0\">Error C3212   'Converter::To': an explicit specialization of a\n  template member must be a member of an explicit specialization</p>\n<p id=\"so_46526988_46526988_1\">Error C2768   'Converter::To': illegal use of explicit template\n  arguments</p>\n</blockquote>\n", "Tags": "<c++><templates><visual-c++>", "OwnerUserId": "1633272", "AnswerCount": "3"}, "46527608": {"ParentId": "46526988", "CommentCount": "0", "Body": "<p>What you are trying to do is explicitly prohibited:</p>\n<blockquote>\n<p id=\"so_46526988_46527608_0\"><strong>[temp.expl.spec]/16</strong> In an explicit specialization declaration for a member of a class template or a member template that appears in namespace scope, the member template and some of its enclosing class templates may remain unspecialized, except that <strong>the declaration shall not explicitly specialize a class member template if its enclosing class templates are not explicitly specialized as well</strong> [emphasis mine]... [ <em>Example:</em></p>\n<pre><code>template &lt;class T1&gt; class A {\n  template&lt;class T2&gt; class B {\n    template&lt;class T3&gt; void mf1(T3);\n    void mf2();\n  };\n};\ntemplate &lt;&gt; template &lt;class X&gt;\n  class A&lt;int&gt;::B {\n    template &lt;class T&gt; void mf1(T);\n  };\ntemplate &lt;&gt; template &lt;&gt; template&lt;class T&gt;\n  void A&lt;int&gt;::B&lt;double&gt;::mf1(T t) { }\n\ntemplate &lt;class Y&gt; template &lt;&gt;\n  void A&lt;Y&gt;::B&lt;double&gt;::mf2() { } // ill-formed; B&lt;double&gt; is specialized but\n                                  // its enclosing class template A is not\n</code></pre>\n<p id=\"so_46526988_46527608_1\">\u2014 <em>end example</em> ]</p>\n</blockquote>\n", "OwnerUserId": "1670129", "PostTypeId": "2", "Id": "46527608", "Score": "1", "CreationDate": "2017-10-02T14:31:16.397", "LastActivityDate": "2017-10-02T14:31:16.397"}, "46527707": {"ParentId": "46526988", "CommentCount": "5", "Body": "<p>Rule of thumb: </p>\n<blockquote>\n<p id=\"so_46526988_46527707_0\">prefer function overload over specialization!</p>\n</blockquote>\n<p>In your case use overload and sfinae:</p>\n<pre><code>#include &lt;type_traits&gt;\n#include &lt;string&gt;\n\ntemplate&lt;typename C&gt;\nclass Converter {\npublic:\n    template&lt;typename T, typename std::enable_if&lt;!std::is_same&lt;T, std::wstring&gt;::value&gt;::type* = nullptr &gt;\n    static T To(const std::wstring&amp; obj) {\n\n    }\n\n    template&lt;typename T, typename std::enable_if&lt;std::is_same&lt;T, std::wstring&gt;::value&gt;::type* = nullptr &gt;\n    static std::wstring To(const std::wstring&amp; obj) {\n\n    }\n};\n</code></pre>\n<p><a href=\"https://wandbox.org/permlink/Rye7Ob4SmqtjbkIa\" rel=\"nofollow noreferrer\">[live demo]</a></p>\n", "OwnerUserId": "4324224", "PostTypeId": "2", "Id": "46527707", "Score": "1", "CreationDate": "2017-10-02T14:36:51.373", "LastActivityDate": "2017-10-02T14:36:51.373"}, "bq_ids": {"n4140": {"so_46526988_46526988_0": {"section_id": 229, "quality": 0.6363636363636364, "length": 7}, "so_46526988_46527707_0": {"section_id": 355, "quality": 0.8, "length": 4}, "so_46526988_46527608_0": {"section_id": 278, "quality": 0.8974358974358975, "length": 35}}, "n3337": {"so_46526988_46526988_0": {"section_id": 222, "quality": 0.6363636363636364, "length": 7}, "so_46526988_46527707_0": {"section_id": 345, "quality": 0.8, "length": 4}, "so_46526988_46527608_0": {"section_id": 269, "quality": 0.8974358974358975, "length": 35}}, "n4659": {"so_46526988_46526988_0": {"section_id": 237, "quality": 0.6363636363636364, "length": 7}, "so_46526988_46527707_0": {"section_id": 365, "quality": 0.8, "length": 4}, "so_46526988_46527608_0": {"section_id": 285, "quality": 0.8974358974358975, "length": 35}}}, "46527793": {"ParentId": "46526988", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2017-10-02T14:40:54.533", "Score": "2", "LastEditorUserId": "2684539", "LastEditDate": "2017-10-02T14:44:18.873", "Id": "46527793", "OwnerUserId": "2684539", "Body": "<p>You might use tag dispatching instead:</p>\n<pre><code>template &lt;typename&gt; struct Tag{};\n\ntemplate&lt;typename C&gt;\nclass Converter {\n\n    template&lt;typename T&gt;\n    static T To(const std::wstring&amp; obj, Tag&lt;T&gt;);\n\n    static std::wstring To(const std::wstring&amp; obj, Tag&lt;std::wstring&gt;);\n\npublic:\n    template&lt;typename T&gt;\n    static T To(const std::wstring&amp; obj) { return To(obj, Tag&lt;T&gt;{}); }\n};\n</code></pre>\n<p>And then</p>\n<pre><code>template&lt;typename C&gt;\ntemplate&lt;typename T&gt;\nT Converter&lt;C&gt;::To(const std::wstring&amp; obj, Tag&lt;T&gt;) {\n    // Conversion\n    return T();\n}\n\ntemplate&lt;typename C&gt;\nstd::wstring Converter&lt;C&gt;::To(const std::wstring&amp; obj, Tag&lt;std::wstring&gt;) {\n    return obj;\n}\n</code></pre>\n", "LastActivityDate": "2017-10-02T14:44:18.873"}});