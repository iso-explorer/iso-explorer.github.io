post_cb({"41791272": {"CommentCount": "0", "ViewCount": "54", "PostTypeId": "1", "LastEditorUserId": "4537297", "CreationDate": "2017-01-22T13:09:03.063", "LastActivityDate": "2017-01-22T14:30:02.067", "Title": "use memcpy without namespace in Qt 4.8", "AcceptedAnswerId": "41791540", "LastEditDate": "2017-01-22T14:30:02.067", "Id": "41791272", "Score": "0", "Body": "<p>In Qt 4.8</p>\n<p>When I <code>#include &lt;cstring&gt;</code>, I found that I can use <code>memcpy</code> directly.</p>\n<p>Why should I not need to use <code>std::memcpy</code> instead?</p>\n<p>Why the complier does not report an error?</p>\n", "Tags": "<c++><qt>", "OwnerUserId": "2608729", "AnswerCount": "1"}, "41791540": {"ParentId": "41791272", "CommentCount": "0", "Body": "<p>The standard says (\u00a717.5.1.2/4)</p>\n<blockquote>\n<p id=\"so_41791272_41791540_0\">Except as noted in Clauses 17 through 30 and Annex D, the contents of each header <em>cname</em> is the same as\n  that of the corresponding header <em>name.h</em> as specified in the C standard library (1.2). In the C++ standard\n  library, however, the declarations (except for names which are defined as macros in C) are within namespace scope (3.3.6) of the namespace std. It is unspecified whether these names (including any overloads added\n  in Clauses 18 through 30 and Annex D) are first declared within the global namespace scope and are then\n  injected into namespace std by explicit using-declarations (7.3.3).</p>\n</blockquote>\n<p>So when you include <code>&lt;cstring&gt;</code> the name is available in namespace <code>std::</code>, but it is allowed for the name to also be in the global namespace. </p>\n<p>Likewise, when you include <code>&lt;string.h&gt;</code> the name is guaranteed to be in the global namespace, but might also be visible in namespace <code>std</code>.</p>\n", "OwnerUserId": "597607", "PostTypeId": "2", "Id": "41791540", "Score": "1", "CreationDate": "2017-01-22T13:34:55.460", "LastActivityDate": "2017-01-22T13:34:55.460"}, "bq_ids": {"n4140": {"so_41791272_41791540_0": {"section_id": 6259, "quality": 0.803921568627451, "length": 41}}, "n3337": {"so_41791272_41791540_0": {"section_id": 6019, "quality": 0.803921568627451, "length": 41}}, "n4659": {"so_41791272_41791540_0": {"section_id": 7763, "quality": 0.9215686274509803, "length": 47}}}});