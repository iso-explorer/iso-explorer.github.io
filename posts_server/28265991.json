post_cb({"bq_ids": {"n4140": {"so_28265991_28266053_2": {"length": 9, "quality": 0.6923076923076923, "section_id": 385}, "so_28265991_28266053_0": {"length": 21, "quality": 0.9130434782608695, "section_id": 383}, "so_28265991_28266053_3": {"length": 11, "quality": 1.0, "section_id": 386}, "so_28265991_28266053_1": {"length": 18, "quality": 0.9, "section_id": 384}}, "n3337": {"so_28265991_28266053_2": {"length": 9, "quality": 0.6923076923076923, "section_id": 376}, "so_28265991_28266053_0": {"length": 21, "quality": 0.9130434782608695, "section_id": 374}, "so_28265991_28266053_3": {"length": 11, "quality": 1.0, "section_id": 377}, "so_28265991_28266053_1": {"length": 18, "quality": 0.9, "section_id": 375}}, "n4659": {"so_28265991_28266053_2": {"length": 9, "quality": 0.6923076923076923, "section_id": 402}, "so_28265991_28266053_0": {"length": 21, "quality": 0.9130434782608695, "section_id": 400}, "so_28265991_28266053_3": {"length": 11, "quality": 1.0, "section_id": 403}, "so_28265991_28266053_1": {"length": 18, "quality": 0.9, "section_id": 401}}}, "28265991": {"ViewCount": "95", "Body": "\n<p>Why are initialized member variables deleted when calling the constructor for a second time?</p>\n<p>Example:</p>\n<pre class=\"lang-cpp prettyprint-override\"><code>class MyClass {\n    private:\n        unsigned myValue;\n\n    public:\n        MyClass(void)\n        {\n            this-&gt;myValue = 1337;\n\n            fprintf(stderr, \"myValue: %d\\n\", this-&gt;myValue);\n        }\n\n        MyClass(int myFirstValue)\n        {\n            fprintf(stderr, \"myValue: %d\\n\", this-&gt;myValue);\n        }\n};\n\nint main()\n{\n    /* Constructor is called */\n    MyClass myInstance;\n\n    /* Call other constructor ; myInstance-&gt;myValue is now trashed */\n    myInstance = 100;\n\n    return 0;\n}\n</code></pre>\n<p>Output:</p>\n<pre class=\"lang-cpp prettyprint-override\"><code>myValue: 1337\nmyValue: 1606416392\n</code></pre>\n<p>Expected Output:</p>\n<pre class=\"lang-cpp prettyprint-override\"><code>myValue: 1337\nmyValue: 1337\n</code></pre>\n<p>Is there a way to keep the initialized member variable?</p>\n", "AcceptedAnswerId": "28266010", "Title": "Constructor destroys member variables", "CreationDate": "2015-02-01T18:06:24.523", "Id": "28265991", "CommentCount": "0", "LastEditDate": "2015-02-01T18:33:26.820", "PostTypeId": "1", "LastEditorUserId": "2005038", "LastActivityDate": "2015-02-01T22:01:13.540", "Score": "-3", "OwnerUserId": "2005038", "Tags": "<c++><variables><constructor><member>", "AnswerCount": "2"}, "28266053": {"Id": "28266053", "PostTypeId": "2", "Body": "<pre><code>myInstance = 100;\n</code></pre>\n<p>is a call to a function <code>MyClass&amp; MyClass::operator=( MyClass const &amp;other)</code></p>\n<p>but because you didn't implement it the <em>default</em> assignment operator is called. As you can see this function takes <code>MyClass</code> reference as argument. That means an integer literal<sup>1</sup> <code>100</code> has to be converted into <code>MyClass</code>. C++ implementation is free to do one such hidden, <em>user-defined</em>  conversion. And it does it in this case. Because you don't initialize integer member in <code>MyClass(int myFirstValue)</code> the <strong>default initialization</strong><sup>2</sup> takes place. For <code>int</code> variable that means no initialization and <strong>undetermined</strong> value. You then try to read and assign this undefined value to your original object. This results in undefined behavior, thus from now on behavior of your program is not defined, non deterministic.</p>\n<p>You can restrict constructors to be called only explicitly using word <code>explicit</code> and to resolve the issue initialize the integer member:</p>\n<pre><code>MyClass( int myFirstValue) : myValue( myFirstValue)\n{\n    //.... \n}\n</code></pre>\n<hr>\n<p>C++ Standard n3337 <strong>\u00a7</strong> 12.3 Conversions</p>\n<blockquote>\n<p id=\"so_28265991_28266053_0\">1) Type conversions of class objects can be specified by constructors\n  and by conversion functions. These conversions are called user-defined\n  conversions and are used for implicit type conversions (Clause 4), for\n  initialization (8.5), and for explicit type conversions (5.4, 5.2.9).</p>\n<p id=\"so_28265991_28266053_1\">2) User-defined conversions are applied only where they are\n  unambiguous (10.2, 12.3.2). Conversions obey the access control rules\n  (Clause 11). Access control is applied after ambiguity resolution\n  (3.4).</p>\n<p id=\"so_28265991_28266053_2\">3) [ Note: See 13.3 for a discussion of the use of conversions in\n  function calls as well as examples below. \u2014 end note ]</p>\n<p id=\"so_28265991_28266053_3\">4) At most one user-defined conversion (constructor or conversion\n  function) is implicitly applied to a single value.</p>\n</blockquote>\n<p><sub>1 C++ Standard n3337 <strong>\u00a7</strong> 2.14.2 Literals 1) An integer literal is a sequence of digits that has no period or exponent part. An integer literal may have\na prefix that specifies its base and a suffix that specifies its type. The lexically first digit of the sequence\nof digits is the most significant. A decimal integer literal (base ten) begins with a digit other than 0 and\nconsists of a sequence of decimal digits. An octal integer literal (base eight) begins with the digit 0 and\nconsists of a sequence of octal digits.22 A hexadecimal integer literal (base sixteen) begins with 0x or 0X and\nconsists of a sequence of hexadecimal digits, which include the decimal digits and the letters a through f\nand A through F with decimal values ten through fifteen. [ Example: the number twelve can be written 12,\n014, or 0XC. \u2014 end example ]</sub></p>\n<p><sub>2 C++ Standard n3337 <strong>\u00a7</strong> 8.5 Initializers 6) To default-initialize an object of type T means:\n\u2014 if T is a (possibly cv-qualified) class type (Clause 9), the default constructor for T is called (and the\ninitialization is ill-formed if T has no accessible default constructor);\n\u2014 if T is an array type, each element is default-initialized;\n\u2014 otherwise, no initialization is performed.\nIf a program calls for the default initialization of an object of a const-qualified type T, T shall be a class\ntype with a user-provided default constructor.</sub></p>\n</hr>", "LastEditorUserId": "1141471", "LastActivityDate": "2015-02-01T22:01:13.540", "Score": "1", "CreationDate": "2015-02-01T18:11:45.143", "ParentId": "28265991", "CommentCount": "2", "OwnerUserId": "1141471", "LastEditDate": "2015-02-01T22:01:13.540"}, "28266010": {"Id": "28266010", "PostTypeId": "2", "Body": "<p>When you do this</p>\n<pre><code>myInstance = 100;\n</code></pre>\n<p>a temporary <code>MyClass</code> is constructed on the RHS using the constructor <code>MyClass(int)</code>. The temporary is then used to assign a value to the LHS. </p>\n<p>That constructor does not initialize the member variable. Reading the uninitialized member results in <em>undefined behaviour</em>, which in your case seems to result in a garbage value being printed.</p>\n<p>You need to initialize it thus, assuming you want to initialize the member to the value passed in the constructor:</p>\n<pre><code>MyClass(int myFirstValue) : myValue(myFirstValue)\n{\n  // as before\n}\n</code></pre>\n<p><strong>Edit</strong> since you expect the value of the member to be <code>1337</code>, you need</p>\n<pre><code>MyClass(int myFirstValue) : myValue(1337) { .... }\n</code></pre>\n", "LastEditorUserId": "661519", "LastActivityDate": "2015-02-01T18:15:41.970", "Score": "5", "CreationDate": "2015-02-01T18:07:58.413", "ParentId": "28265991", "CommentCount": "3", "OwnerUserId": "661519", "LastEditDate": "2015-02-01T18:15:41.970"}});