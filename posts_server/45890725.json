post_cb({"45890840": {"ParentId": "45890725", "CommentCount": "0", "Body": "<p>That problem is known as core issue 1344: Adding new special member functions to a class via default arguments</p>\n<p>According to <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4296.pdf\" rel=\"nofollow noreferrer\">c++14 standard</a> that is in principal syntactically valid, the new default is simply added to the already defined.</p>\n<blockquote>\n<p id=\"so_45890725_45890840_0\">8.3.6.6 Except for member functions of class templates, the default arguments in a member function definition that appears outside of the class definition are added to the set of default arguments provided by the member function declaration in the class definition;</p>\n</blockquote>\n<p>But ill formed if</p>\n<blockquote>\n<p id=\"so_45890725_45890840_1\">8.3.6.6 the program is ill-formed if a default constructor (12.1), copy or move constructor, or copy or move assignment operator (12.8) is so declared.</p>\n</blockquote>\n<p>So clang is right. At least in C++14</p>\n", "OwnerUserId": "8490870", "PostTypeId": "2", "Id": "45890840", "Score": "2", "CreationDate": "2017-08-26T00:22:24.910", "LastActivityDate": "2017-08-26T00:22:24.910"}, "45890841": {"ParentId": "45890725", "CommentCount": "0", "Body": "<p>Clang is correct in reporting the error.  Quoting N4659, [dcl.fct.default], paragraph 6:</p>\n<blockquote>\n<p id=\"so_45890725_45890841_0\">Except for member functions of class templates, the default arguments in a member function definition that\n  appears outside of the class definition are added to the set of default arguments provided by the member\n  function declaration in the class definition; the program is ill-formed if a default constructor (15.1), copy\n  or move constructor, or copy or move assignment operator (15.8) is so declared.</p>\n</blockquote>\n<p>It <em>is</em> valid to declare default values for other parameters when the (non-template) function is defined (or redeclared), as long as you don't specify a value for parameters that already have a default value and as long as the ODR is not violated across translation units.</p>\n", "OwnerUserId": "5231607", "PostTypeId": "2", "Id": "45890841", "Score": "1", "CreationDate": "2017-08-26T00:22:32.253", "LastActivityDate": "2017-08-26T00:22:32.253"}, "bq_ids": {"n4140": {"so_45890725_45890840_0": {"section_id": 3257, "quality": 0.96, "length": 24}, "so_45890725_45890840_1": {"section_id": 3257, "quality": 0.7857142857142857, "length": 11}, "so_45890725_45890841_0": {"section_id": 3257, "quality": 0.9459459459459459, "length": 35}}, "n3337": {"so_45890725_45890840_0": {"section_id": 3129, "quality": 0.96, "length": 24}, "so_45890725_45890840_1": {"section_id": 5686, "quality": 0.7142857142857143, "length": 10}, "so_45890725_45890841_0": {"section_id": 3129, "quality": 0.6486486486486487, "length": 24}}, "n4659": {"so_45890725_45890840_0": {"section_id": 4015, "quality": 0.96, "length": 24}, "so_45890725_45890840_1": {"section_id": 4015, "quality": 0.7857142857142857, "length": 11}, "so_45890725_45890841_0": {"section_id": 4015, "quality": 0.9459459459459459, "length": 35}}}, "45890725": {"CommentCount": "3", "AcceptedAnswerId": "45890840", "CreationDate": "2017-08-25T23:59:24.387", "LastActivityDate": "2017-08-26T00:22:32.253", "PostTypeId": "1", "ViewCount": "54", "FavoriteCount": "1", "Title": "C++ split default parameter values between declaration and definition", "Id": "45890725", "Score": "3", "Body": "<p>Is the following valid C++11? Both arguments to the constructor <code>NoWay::NoWay</code> have default values, but one is specified in the declaration and the other in the definition.</p>\n<pre><code>#include &lt;iostream&gt;\n\nclass NoWay {\nprivate:\n  int foo;\n  bool bar;\n\npublic:\n  explicit NoWay(int foo, bool bar = true);\n  bool isGood();\n};\n\nNoWay::NoWay(int foo = 4, bool bar) {\n  this-&gt;foo = foo;\n  this-&gt;bar = bar;\n}\n\nbool NoWay::isGood() { return (foo == 4) &amp;&amp; (bar == true); }\n\nint main(int argc, char **argv) {\n  auto noway = NoWay();\n  std::cout &lt;&lt; noway.isGood() &lt;&lt; std::endl;\n}\n</code></pre>\n<p>This compiles without error under gcc</p>\n<pre><code>$ g++ --std=c++11 foo.cc\n</code></pre>\n<p>but clang rejects it</p>\n<pre><code>$ clang++ --std=c++11  foo.cc\nfoo.cc:13:18: error: addition of default argument on redeclaration makes this constructor a default constructor\nNoWay::NoWay(int foo = 4, bool bar) {\n                 ^     ~\nfoo.cc:9:12: note: previous declaration is here\n  explicit NoWay(int foo, bool bar = true);\n           ^\n1 error generated.\nExit 1\n</code></pre>\n", "Tags": "<c++>", "OwnerUserId": "931154", "AnswerCount": "2"}});