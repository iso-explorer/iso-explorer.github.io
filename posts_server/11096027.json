post_cb({"11096027": {"CreationDate": "2012-06-19T07:09:53.870", "ViewCount": "599", "FavoriteCount": "1", "Id": "11096027", "AcceptedAnswerId": "11096060", "Score": "3", "Title": "function returning std::string crashes without return statement, unlike a function returning int without return statement", "CommentCount": "5", "Body": "<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\nusing namespace std;\n\nstring\ncrash()\n{\n\n}\n\nint\nnoCrash()\n{\n\n}\n\nint\nmain()\n{\n    crash(); // crashes\n    // noCrash(); // doesn't crash\n    return 0;\n}\n</code></pre>\n<p>The function crash(), crashes with Mingw g++ 4.6.2 and the function noCrash() executes with no issues. Why does the function returning string crash without a return statement? </p>\n", "Tags": "<c++><crash><return><return-value><return-type>", "LastActivityDate": "2012-06-19T07:34:41.963", "PostTypeId": "1", "AnswerCount": "4", "OwnerUserId": "110368"}, "11096091": {"CommentCount": "0", "Body": "<p>From standard 6.6.3/2</p>\n<blockquote>\n<p id=\"so_11096027_11096091_0\">A return statement without an expression can be used only in functions\n  that do not return a value, that is, a function with the return type\n  void, a constructor (12.1), or a destructor (12.4). A return statement\n  with an expression of non-void type can be used only in functions\n  returning a value; the value of the expression is returned to the\n  caller of the function. The expression is implicitly converted to the\n  return type of the function in which it appears. A return statement\n  can involve the construction and copy of a temporary object (12.2).\n  <strong>Flowing off the end of a function is equivalent to a return with no\n  value; this results in undefined behavior in a value-returning\n  function</strong>.</p>\n</blockquote>\n", "CreationDate": "2012-06-19T07:14:08.293", "ParentId": "11096027", "Id": "11096091", "LastActivityDate": "2012-06-19T07:14:08.293", "PostTypeId": "2", "Score": "7", "OwnerUserId": "125672"}, "11096060": {"CommentCount": "0", "Body": "<p>Both are undefined behaviors, even <code>noCrash</code> can crash.</p>\n", "CreationDate": "2012-06-19T07:12:22.417", "ParentId": "11096027", "Id": "11096060", "LastActivityDate": "2012-06-19T07:12:22.417", "PostTypeId": "2", "Score": "7", "OwnerUserId": "392315"}, "bq_ids": {"n4140": {"so_11096027_11096091_0": {"length": 54, "quality": 0.9310344827586207, "section_id": 3913}}, "n3337": {"so_11096027_11096091_0": {"length": 54, "quality": 0.9310344827586207, "section_id": 3773}}}, "11096084": {"CommentCount": "0", "Body": "<p>Probably because when you call <code>crash</code> the compiler attempts to destroy a temporary <code>std::string</code> object that was never created.</p>\n<p>As both functions have <em>undefined behavior</em> speculation is somewhat futile.</p>\n", "CreationDate": "2012-06-19T07:13:40.623", "ParentId": "11096027", "Id": "11096084", "LastActivityDate": "2012-06-19T07:13:40.623", "PostTypeId": "2", "Score": "4", "OwnerUserId": "19563"}, "11096402": {"CommentCount": "0", "Body": "<p>A lot of this is undefined, but it arguably helps to understand the practical reasons for such observations - it can help in troubleshooting and even performance and spatial design.</p>\n<p>So, in a practical sense, if the function fails to return a value, it's basically failing to set the register or memory where that value will be expected by the caller; it appears to return whatever garbage used to be there.  If the return type is int, you've just got yourself a garbage value, but for strings you have a garbage value that's meant to point (directly or indirectly) to the heap memory used by the string to store the textual value and possibly some reference counter or other management data.  Later in the program, the calling code will try to deallocate that heap memory by deleting the pointer.  Deleting a pointer with a garbage value's quite likely to crash your program.</p>\n", "CreationDate": "2012-06-19T07:34:41.963", "ParentId": "11096027", "Id": "11096402", "LastActivityDate": "2012-06-19T07:34:41.963", "PostTypeId": "2", "Score": "5", "OwnerUserId": "410767"}});