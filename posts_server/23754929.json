post_cb({"bq_ids": {"n4140": {"so_23754929_23755109_1": {"length": 17, "quality": 0.9444444444444444, "section_id": 5433}, "so_23754929_23755109_0": {"length": 20, "quality": 0.8333333333333334, "section_id": 6057}, "so_23754929_23755100_0": {"length": 20, "quality": 0.8333333333333334, "section_id": 6057}}, "n3337": {"so_23754929_23755109_1": {"length": 17, "quality": 0.9444444444444444, "section_id": 5228}, "so_23754929_23755109_0": {"length": 20, "quality": 0.8333333333333334, "section_id": 5825}, "so_23754929_23755100_0": {"length": 20, "quality": 0.8333333333333334, "section_id": 5825}}, "n4659": {"so_23754929_23755109_1": {"length": 17, "quality": 0.9444444444444444, "section_id": 6861}, "so_23754929_23755109_0": {"length": 20, "quality": 0.8333333333333334, "section_id": 7555}, "so_23754929_23755100_0": {"length": 20, "quality": 0.8333333333333334, "section_id": 7555}}}, "23754929": {"ViewCount": "122", "Body": "<p>boost/any.hpp (version 1.55) defines (line 263)</p>\n<pre><code>template&lt;typename ValueType&gt;\ninline const ValueType * any_cast(const any * operand) BOOST_NOEXCEPT\n{\n    return any_cast&lt;ValueType&gt;(const_cast&lt;any *&gt;(operand));\n}\n</code></pre>\n<p>However, using <code>const_cast&lt;&gt;</code>, <em>may result in undefined behaviour</em> if the original object was <em>not declared <code>const</code></em> as in</p>\n<pre><code>class foo\n{\n  boost::any value;\n  template&lt;typename T&gt;\n  foo(T const&amp;x) noexcept : value(x) {}\n\n  template&lt;typename T&gt;\n  const T*ptr() const noexcept\n  { return boost::any_cast(value); }\n};\n</code></pre>\n<p>So, is boost kosher?</p>\n", "AcceptedAnswerId": "23755100", "Title": "boost::any_cast(const any&) uses const_cast<> -- Isn't this potentially UB?", "CreationDate": "2014-05-20T08:42:28.793", "Id": "23754929", "CommentCount": "4", "PostTypeId": "1", "LastActivityDate": "2014-05-20T08:52:12.260", "Score": "3", "OwnerUserId": "1023390", "Tags": "<c++><boost><boost-any>", "AnswerCount": "2"}, "23755109": {"Id": "23755109", "PostTypeId": "2", "Body": "<p>Maybe you are thinking of <code>[expr.const.cast]#7</code>:</p>\n<blockquote>\n<p id=\"so_23754929_23755109_0\">[Note: Depending on the type of the object, <strong>a write operation</strong> through the pointer, lvalue or pointer to data member resulting from a const_cast that casts away a const-qualifier 73 may produce undefined behavior (7.1.6.1). \u2014end note ]</p>\n</blockquote>\n<p>The section 7.1.6.1 is:</p>\n<blockquote>\n<p id=\"so_23754929_23755109_1\">Except that any class member declared mutable (7.1.1) can be modified, any attempt to modify a const\n  object during its lifetime (3.8) results in undefined behavior</p>\n</blockquote>\n<p>But there is no such write operation in this code. The rest of the <code>[expr.const.cast]</code> section says nothing to suggest that this code has a problem.</p>\n", "LastActivityDate": "2014-05-20T08:52:12.260", "CommentCount": "0", "CreationDate": "2014-05-20T08:52:12.260", "ParentId": "23754929", "Score": "3", "OwnerUserId": "1505939"}, "23755100": {"Id": "23755100", "PostTypeId": "2", "Body": "<p>This is legal code, since <code>any_cast</code> returns const-pointer and <code>any_cast</code>, that receives pointer, does not change its argument.</p>\n<p>UB by standard can be only in 1 situation if you use <code>const_cast</code>:</p>\n<p>n3376 5.2.11/7</p>\n<blockquote>\n<p id=\"so_23754929_23755100_0\">[ Note: Depending on the type of the object, a write operation through\n  the pointer, lvalue or pointer to data member resulting from a\n  const_cast that casts away a const-qualifier may produce undefined\n  behavior (7.1.6.1). \u2014 end note ]</p>\n</blockquote>\n", "LastActivityDate": "2014-05-20T08:51:44.927", "CommentCount": "0", "CreationDate": "2014-05-20T08:51:44.927", "ParentId": "23754929", "Score": "4", "OwnerUserId": "1498580"}});