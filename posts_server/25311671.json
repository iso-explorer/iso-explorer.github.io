post_cb({"bq_ids": {"n4140": {"so_25311671_25311761_0": {"length": 8, "quality": 0.6153846153846154, "section_id": 3913}}, "n3337": {"so_25311671_25311761_0": {"length": 13, "quality": 1.0, "section_id": 364}}, "n4659": {"so_25311671_25311761_0": {"length": 7, "quality": 0.5384615384615384, "section_id": 387}}}, "25311671": {"ViewCount": "107", "Body": "<p>I understood the concept of copy constructor. Till now I was thinking that copy constructors won't have return values. But I saw some code on internet regarding smart pointers, which defines copy constructor as returning some value. Is it correct? Does Copy constructors in C++ have return values?</p>\n", "AcceptedAnswerId": "25311761", "Title": "Does copy constructors have return value in C++", "CreationDate": "2014-08-14T15:17:39.133", "Id": "25311671", "CommentCount": "3", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2014-08-14T23:17:39.420", "Score": "1", "OwnerUserId": "3137388", "Tags": "<c++>", "AnswerCount": "2"}, "25312206": {"Id": "25312206", "PostTypeId": "2", "Body": "<p>Constructors do not have return types .But can have access specifiers . \nIf a constructor is attached with a return type ...compiler treats it as a function </p>\n", "LastActivityDate": "2014-08-14T15:44:30.207", "CommentCount": "0", "CreationDate": "2014-08-14T15:44:30.207", "ParentId": "25311671", "Score": "0", "OwnerUserId": "3941871"}, "25311761": {"Id": "25311761", "PostTypeId": "2", "Body": "<p>Constructors (in general) do not have a return type, nor do they return a value:</p>\n<blockquote>\n<p id=\"so_25311671_25311761_0\">No return type (not even void) shall be specified for a constructor. A return statement in the body of a constructor shall not specify a return value.</p>\n<p id=\"so_25311671_25311761_1\">\u00a712.1 [class.ctor]</p>\n</blockquote>\n<p>You may be thinking of the <a href=\"http://en.cppreference.com/w/cpp/language/as_operator\" rel=\"nofollow\">copy assignment operator</a>, which does something different, but related, and looks like:</p>\n<pre><code>T &amp; operator = (const T &amp;);\n</code></pre>\n", "LastEditorUserId": "1007504", "LastActivityDate": "2014-08-14T23:17:39.420", "Score": "8", "CreationDate": "2014-08-14T15:21:48.647", "ParentId": "25311671", "CommentCount": "4", "OwnerUserId": "1007504", "LastEditDate": "2014-08-14T23:17:39.420"}});