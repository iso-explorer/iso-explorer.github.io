post_cb({"bq_ids": {"n4140": {"so_37879642_37879642_2": {"length": 5, "quality": 0.625, "section_id": 51}, "so_37879642_37882570_0": {"length": 8, "quality": 0.6666666666666666, "section_id": 5391}, "so_37879642_37879642_0": {"length": 5, "quality": 0.625, "section_id": 51}, "so_37879642_37879642_3": {"length": 4, "quality": 0.5714285714285714, "section_id": 51}}, "n3337": {"so_37879642_37882570_0": {"length": 8, "quality": 0.6666666666666666, "section_id": 5185}, "so_37879642_37879642_3": {"length": 4, "quality": 0.5714285714285714, "section_id": 46}, "so_37879642_37879642_0": {"length": 5, "quality": 0.625, "section_id": 46}, "so_37879642_37879642_2": {"length": 5, "quality": 0.625, "section_id": 46}}, "n4659": {"so_37879642_37882570_0": {"length": 10, "quality": 0.8333333333333334, "section_id": 6817}, "so_37879642_37879642_3": {"length": 4, "quality": 0.5714285714285714, "section_id": 52}, "so_37879642_37879642_0": {"length": 5, "quality": 0.625, "section_id": 52}, "so_37879642_37879642_2": {"length": 5, "quality": 0.625, "section_id": 52}}}, "37879642": {"ViewCount": "211", "Body": "<p>Consider the following snippet:</p>\n<pre><code>#include &lt;iostream&gt;\n\ntemplate &lt;int I&gt;\nconstexpr int f() { return I * f&lt;I-1&gt;(); }\n\ntemplate&lt;&gt;\nconstexpr int f&lt;0&gt;() { return 1; }\n\n\nint main () {\n  std::cout &lt;&lt; f&lt;5&gt;();\n  return 0;\n}\n</code></pre>\n<p>This code compiles nicely with both g++ and clang. Very nice.\nNow add <code>static</code> to the template function specialization:</p>\n<pre><code>template&lt;&gt;\nconstexpr static int f&lt;0&gt;() { return 1; }\n</code></pre>\n<p>then g++ 6.1 reacts with an error:</p>\n<blockquote>\n<p id=\"so_37879642_37879642_0\">11 : error: explicit template specialization cannot have a storage class</p>\n</blockquote>\n<p>and clang 3.8 too:</p>\n<blockquote>\n<p id=\"so_37879642_37879642_1\">11 : error: explicit specialization has extraneous, inconsistent storage class 'static'</p>\n</blockquote>\n<p>They look like in agreement. Very nice again.\nNow, add <code>static</code> keyword also the template function general case:</p>\n<p>g++ 6.1:</p>\n<blockquote>\n<p id=\"so_37879642_37879642_2\">11 : error: explicit template specialization cannot have a storage class</p>\n</blockquote>\n<p>clang 3.8 compiles with a warning:</p>\n<blockquote>\n<p id=\"so_37879642_37879642_3\">11 : warning: explicit specialization cannot have a storage class</p>\n</blockquote>\n<p>and clang result returns the correct answer.</p>\n<p>Is this a bug in clang? If not, in which case does it make sense not to throw an error?</p>\n", "AcceptedAnswerId": "37882570", "Title": "constexpr static template function: g++ error is a warning on clang", "CreationDate": "2016-06-17T10:46:07.883", "Id": "37879642", "CommentCount": "3", "LastEditDate": "2016-06-17T13:17:05.340", "PostTypeId": "1", "LastEditorUserId": "3647361", "LastActivityDate": "2016-06-17T13:17:05.340", "Score": "7", "OwnerUserId": "2870029", "Tags": "<c++><templates><language-lawyer><function-templates><storage-class-specifier>", "AnswerCount": "1"}, "37882570": {"Id": "37882570", "PostTypeId": "2", "Body": "<p>It's as simple as <a href=\"http://eel.is/c++draft/dcl.stc#1\" rel=\"nofollow\">[dcl.stc]/1</a> (which goes as far back as C++98):</p>\n<blockquote>\n<p id=\"so_37879642_37882570_0\">A <em>storage-class-specifier</em> other than <code>thread_local</code> shall not be specified in an explicit specialization (14.7.3) or an explicit instantiation (14.7.2) directive.</p>\n</blockquote>\n", "LastActivityDate": "2016-06-17T13:16:09.743", "CommentCount": "0", "CreationDate": "2016-06-17T13:16:09.743", "ParentId": "37879642", "Score": "2", "OwnerUserId": "3647361"}});