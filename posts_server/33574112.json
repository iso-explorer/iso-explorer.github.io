post_cb({"33574267": {"ParentId": "33574112", "CommentCount": "1", "Body": "<p>\"Question\" might be a better word than \"puzzle\" here.</p>\n<p>Anyway, regarding the piece of code you showed, that's pretty interesting. It's not undefined, as everything in that piece of code is completely defined by the standard. The result is not what you'd expect however, if you'd expect pointer arithmetic to do dynamic type recognition.</p>\n<p>In particular, <code>p</code> will point 2 <code>B</code> sizes away from the start of the array, not 2 <code>D</code> sizes. Again, this is completely well defined. Accessing that memory however might not be well defined.</p>\n", "OwnerUserId": "108796", "PostTypeId": "2", "Id": "33574267", "Score": "0", "CreationDate": "2015-11-06T19:29:25.177", "LastActivityDate": "2015-11-06T19:29:25.177"}, "33574112": {"CommentCount": "2", "ViewCount": "119", "CreationDate": "2015-11-06T19:19:17.990", "LastActivityDate": "2015-11-08T06:22:56.790", "Title": "Some puzzles about the subobject in the C++ Standard", "AcceptedAnswerId": "33583262", "PostTypeId": "1", "Id": "33574112", "Score": "1", "Body": "<p>The C++ Standard define the concept \"dynamic type\" of a glvalue as follows:</p>\n<blockquote>\n<p id=\"so_33574112_33574112_0\"><strong>dynamic type</strong></p>\n<p id=\"so_33574112_33574112_1\">&lt;glvalue&gt; type of the most derived object (1.8) to which the glvalue denoted by a glvalue expression refers [Example: if a pointer (8.3.1) p whose static type is \u201cpointer to class B\u201d is pointing to an object of class D, derived from B (Clause 10), the dynamic type of the expression *p is \u201cD.\u201d References (8.3.2) are treated similarly. \u2014end example ]</p>\n</blockquote>\n<p>How is this definition interpreted if what the glvalue refers to is not the most derived object? Does it mean \"type of the most derived object <strong>that contains the object</strong> to which the glvalue denoted by a glvalue expression refers\"?</p>\n<p>Another puzzle is about the 4th paragraph in 5.7 of the C++ Standard:</p>\n<blockquote>\n<p id=\"so_33574112_33574112_2\">...  If the pointer operand points to an element of an array object, ...</p>\n</blockquote>\n<p>I want to ask whether this condition holds if the pointer operand points to a <strong>subobject of</strong> an element of an array object. As an example, if it does not hold, then the behavior in the following code is undefined, right? </p>\n<pre><code>D d[10];\nB *p = d; //B is a base class of D\np += 2;   //undefined behavior?\n</code></pre>\n", "Tags": "<c++><pointers><iso><dynamictype><subobject>", "OwnerUserId": "5376789", "AnswerCount": "3"}, "33574286": {"ParentId": "33574112", "CommentCount": "8", "Body": "<blockquote>\n<p id=\"so_33574112_33574286_0\">How is this definition interpreted if what the glvalue refers to is not the most derived object?</p>\n</blockquote>\n<p>If the <em>glvalue</em> refers to a valid object, it is <strong>ALWAYS</strong> the most derived object that was <strong>constructed</strong>, not necessarily the most derived type of the base type.</p>\n<p>Example:</p>\n<pre><code>class Base {};\nclass Derived1 : public Base {};\nclass Derived2 : public Derived1 {};\n\nBase* ptr = new Derived1;\n</code></pre>\n<p><code>*ptr</code> refers to <code>Derived1</code>, not <code>Derived2</code> since the object that was constructed is of type <code>Derived1</code>.</p>\n<blockquote id=\"so_33574112_33574286_1\">\n<pre><code>D d[10];\nB *p = d; //B is a base class of D\np += 2;   //undefined behavior?\n</code></pre>\n</blockquote>\n<p>Yes, that is undefined behavior.</p>\n", "OwnerUserId": "434551", "PostTypeId": "2", "Id": "33574286", "Score": "0", "CreationDate": "2015-11-06T19:30:56.380", "LastActivityDate": "2015-11-06T19:30:56.380"}, "bq_ids": {"n4140": {"so_33574112_33583262_2": {"section_id": 5792, "quality": 0.8181818181818182, "length": 9}, "so_33574112_33574286_1": {"section_id": 444, "quality": 0.8, "length": 4}, "so_33574112_33583262_3": {"section_id": 5792, "quality": 1.0, "length": 5}, "so_33574112_33574112_2": {"section_id": 6142, "quality": 1.0, "length": 6}, "so_33574112_33574286_0": {"section_id": 6021, "quality": 0.5555555555555556, "length": 5}, "so_33574112_33583262_5": {"section_id": 5793, "quality": 0.9333333333333333, "length": 28}, "so_33574112_33583262_1": {"section_id": 5791, "quality": 0.8333333333333334, "length": 20}, "so_33574112_33574112_1": {"section_id": 5768, "quality": 0.84375, "length": 27}, "so_33574112_33583262_4": {"section_id": 5792, "quality": 1.0, "length": 8}}, "n3337": {"so_33574112_33583262_2": {"section_id": 5565, "quality": 0.8181818181818182, "length": 9}, "so_33574112_33574286_1": {"section_id": 435, "quality": 0.8, "length": 4}, "so_33574112_33583262_3": {"section_id": 5565, "quality": 1.0, "length": 5}, "so_33574112_33574112_2": {"section_id": 5906, "quality": 1.0, "length": 6}, "so_33574112_33574286_0": {"section_id": 5789, "quality": 0.5555555555555556, "length": 5}, "so_33574112_33583262_5": {"section_id": 5566, "quality": 0.9333333333333333, "length": 28}, "so_33574112_33583262_1": {"section_id": 5564, "quality": 0.8333333333333334, "length": 20}, "so_33574112_33574112_1": {"section_id": 5541, "quality": 0.84375, "length": 27}, "so_33574112_33583262_4": {"section_id": 5565, "quality": 1.0, "length": 8}}, "n4659": {"so_33574112_33583262_2": {"section_id": 7251, "quality": 0.8181818181818182, "length": 9}, "so_33574112_33574112_1": {"section_id": 7225, "quality": 0.71875, "length": 23}, "so_33574112_33583262_5": {"section_id": 7252, "quality": 0.9333333333333333, "length": 28}, "so_33574112_33574286_1": {"section_id": 467, "quality": 0.8, "length": 4}, "so_33574112_33574112_2": {"section_id": 7638, "quality": 1.0, "length": 6}, "so_33574112_33583262_4": {"section_id": 7251, "quality": 1.0, "length": 8}, "so_33574112_33583262_1": {"section_id": 7248, "quality": 0.8333333333333334, "length": 20}, "so_33574112_33583262_3": {"section_id": 7251, "quality": 1.0, "length": 5}, "so_33574112_33574286_0": {"section_id": 7520, "quality": 0.5555555555555556, "length": 5}}}, "33583262": {"ParentId": "33574112", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>The wording is clear. The most derived object is implied to be a complete object, a data member or an array element, i.e. it is not a base class subobject.</p>\n<p>WG21/N4527</p>\n<blockquote>\n<p id=\"so_33574112_33583262_0\"><strong>1.8 The C++ object model [intro.object]</strong></p>\n<p id=\"so_33574112_33583262_1\">2 Objects can contain other objects, called <em>subobjects</em>. A <em>subobject</em> can be a <em>member subobject</em> (9.2), a <em>base class subobject</em> (Clause 10), or an array element. An object that is not a subobject of any other object is called a complete object.</p>\n<p id=\"so_33574112_33583262_2\">3 For every object <code>x</code>, there is some object called the <em>complete object</em> of <code>x</code>, determined as follows:</p>\n<p id=\"so_33574112_33583262_3\">(3.1) \u2014 If <code>x</code> is a complete object, then <code>x</code> is the complete object of <code>x</code>.</p>\n<p id=\"so_33574112_33583262_4\">(3.2) \u2014 Otherwise, the complete object of <code>x</code> is the complete object of the (unique) object that contains <code>x</code>.</p>\n<p id=\"so_33574112_33583262_5\">4 If a complete object, a data member (9.2), or an array element is of class type, its type is considered the <em>most derived class</em>, to distinguish it from the class type of any base class subobject; an object of a most derived class type or of a non-class type is called a <em>most derived object</em>.</p>\n</blockquote>\n<pre><code>D d[10];\nB *p = d; //B is a base class of D\np += 2;   //undefined behavior?\n</code></pre>\n<p>This has undefined behavior, undoubtedly. There are no additional rules about derived classes. And since every operand of the expression <code>p += 2</code> is prvalue, no dynamic types of glvalues are concerned.</p>\n<p>Edit: Note that dynamic types of prvalues are same as their static types.</p>\n", "OwnerUserId": "2307646", "LastEditorUserId": "2307646", "LastEditDate": "2015-11-08T06:22:56.790", "Id": "33583262", "Score": "1", "CreationDate": "2015-11-07T13:27:10.173", "LastActivityDate": "2015-11-08T06:22:56.790"}});