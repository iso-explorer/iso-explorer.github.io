post_cb({"19344727": {"Id": "19344727", "PostTypeId": "2", "Body": "<p>Static class members need to be <em>defined</em> as well as declared. While we're at it, we can <em>initialize</em> the static member to the right value, so no more need for \"create\" - but we could feasibly have a \"reset\" logic.</p>\n<p>Also, if you're actually exposing the logic via static functions, the counter itself should be private.</p>\n<p>Finally, as a matter of style, the <code>static</code> keyword is usually placed before the type name. It's a matter of taste, but it's a rather important attribute and one should be able to quickly tell static and non-static members apart when looking at a class definition.</p>\n<pre><code>struct acounter\n{\nprivate:\n  static long counter;\npublic:\n  static void reset() { counter = 0; }\n  static void count() { ++counter; }\n};\n\nlong acounter::counter = 0;   // definition and initial value\n\nint main()\n{\n  acounter::count();\n}\n</code></pre>\n", "LastActivityDate": "2013-10-13T11:33:35.767", "CommentCount": "4", "CreationDate": "2013-10-13T11:33:35.767", "ParentId": "19344676", "Score": "2", "OwnerUserId": "596781"}, "bq_ids": {"n4140": {"so_19344676_19344738_0": {"length": 11, "quality": 0.9166666666666666, "section_id": 5907}}, "n3337": {"so_19344676_19344738_0": {"length": 11, "quality": 0.9166666666666666, "section_id": 5679}}, "n4659": {"so_19344676_19344738_0": {"length": 11, "quality": 0.9166666666666666, "section_id": 7389}}}, "19344676": {"ViewCount": "75", "Body": "<p>following compiles fine with g++:</p>\n<pre><code>struct acounter {\n\n  long static counter;\n\n  void static create() {  //reset or create the counter\n    counter=0;\n  }\n\n  void static count() {   //the counter changes its internal value.\n    counter=counter + 1;\n  }   \n\n};\n\n\nint main(int   argc,  char *argv[] ){    //compiles and executes!\n  //do some random stuff...\n  return 0;\n}\n</code></pre>\n<p>The problem is: as soon as I add \"acounter::create();\" or \"acounter::count();\" to the main loop, I get an error: </p>\n<blockquote>\n<p id=\"so_19344676_19344676_0\">undefined reference to `acounter::counter'</p>\n</blockquote>\n<p>But I defined \"counter\" and even initialize it. What is the problem?</p>\n<p>(P.S. I can only use static functions as I have to deal with callbacks later - the idea is to use the whole struct only on its global scope without creating instances.)</p>\n", "AcceptedAnswerId": "19344727", "Title": "how to use a static variable in a static functions of a struct", "CreationDate": "2013-10-13T11:29:23.167", "Id": "19344676", "CommentCount": "0", "PostTypeId": "1", "ClosedDate": "2013-10-13T14:55:16.860", "LastActivityDate": "2013-10-13T11:40:51.067", "Score": "-2", "OwnerUserId": "2036264", "Tags": "<c++><struct><g++>", "AnswerCount": "2"}, "19344738": {"Id": "19344738", "PostTypeId": "2", "Body": "<p>Put this into <code>*.cpp</code>:</p>\n<pre><code>long acounter::counter;\n</code></pre>\n<p><strong>NOTE:</strong> You might want to initialize it as well, for example:</p>\n<pre><code>long acounter::counter = 0;\n</code></pre>\n<p><code>static</code>, but non-<code>const</code> data members should be defined outside of the class/struct definition and inside the namespace enclosing the class/struct. The usual practice is to define it in the translation unit (<code>*.cpp</code>) because it is considered to be an implementation detail.</p>\n<p>Extract from <strong>section 9.4.2 of the C++ Standard</strong>:</p>\n<blockquote>\n<p id=\"so_19344676_19344738_0\">The definition for a static data member shall appear in a namespace scope enclosing the member\u2019s class definition.</p>\n</blockquote>\n<p>There is also another way. Only <code>static</code> and <code>const</code> integral types can be declared and defined at the same time (inside class/struct definition):</p>\n<pre><code>class Example {\npublic:\n  static const long x = 101;\n};\n</code></pre>\n<p>in this case you don't need to add <code>x</code> definition because it is already defined inside the class/struct definition. In your case, <code>long</code> is integral type, but not <code>const</code> so you cannot opt to this approach.</p>\n", "LastEditorUserId": "1743860", "LastActivityDate": "2013-10-13T11:40:51.067", "Score": "0", "CreationDate": "2013-10-13T11:34:51.787", "ParentId": "19344676", "CommentCount": "0", "OwnerUserId": "1743860", "LastEditDate": "2013-10-13T11:40:51.067"}});