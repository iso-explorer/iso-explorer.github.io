post_cb({"13114522": {"Id": "13114522", "PostTypeId": "2", "Body": "<p>As your code somewhat demonstrates, undefined behavior is almost always a condition of <strong>runtime state</strong> at the time the behavior is attempted. A slight modification of your code can make this painfully obvious:</p>\n<pre><code>void causeUndefinedBehavior()\n{\n   //any code that causes undefined behavior\n   //every time it is run\n   char* a = nullptr;\n   *a;\n}\n\n\nint main()\n{\n srand(time(NULL));\n //code before call\n //...\n if (rand() % 973 == 0)\n    causeUndefinedBehavior();\n //code after call\n //...\n}\n</code></pre>\n<p>You could execute this a thousand times or more and never trip the UB execute-condition. that doesn't change the fact the function itself is clearly UB, but <em>detecting</em> it at compile time in context of the invoker is <em>not</em> trivial.</p>\n", "LastEditorUserId": "1322972", "LastActivityDate": "2012-10-29T00:35:53.767", "Score": "3", "CreationDate": "2012-10-29T00:30:11.867", "ParentId": "13114459", "CommentCount": "2", "OwnerUserId": "1322972", "LastEditDate": "2012-10-29T00:35:53.767"}, "13114459": {"ViewCount": "282", "Body": "<p>I'm aware that undefined behavior can potentially cause anything, which makes any program containing UB potentially meaningless. I was wondering if there is any way to identify the earliest point in a program that undefined behavior could cause problems.\nHere is an example to illustrate my question.  </p>\n<pre><code>void causeUndefinedBehavior()\n{\n   //any code that causes undefined behavior\n   //every time it is run\n   char* a = nullptr;\n   *a;\n}\n\n\nint main()\n{\n //code before call\n //...\n causeUndefinedBehavior();\n //code after call\n //...\n}\n</code></pre>\n<p>From my understanding, the possible times undefined behavior could be evoked (not necessarily manifested) are:</p>\n<ol>\n<li>When <code>causeUndefinedBehavior()</code> is compiled.</li>\n<li>When <code>main()</code> is compiled.</li>\n<li>At the time the program is run.</li>\n<li>At the time <code>causeUndefinedBehavior()</code> is executed.</li>\n</ol>\n<p>Or is the point where undefined behavior is evoked completely different for every case and every implementation?</p>\n<p>In addition, if I commented out the line where <code>causeUndefinedBehavior()</code> is called, would that eliminate the UB, or would it still be in the program since code containing UB was compiled?</p>\n", "AcceptedAnswerId": "13114522", "Title": "C++ What is the earliest undefined behavior can manifest itself?", "CreationDate": "2012-10-29T00:21:13.257", "Id": "13114459", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2018-02-28T15:23:32.217", "Score": "10", "OwnerUserId": "894442", "Tags": "<c++><undefined-behavior>", "AnswerCount": "5"}, "13114496": {"Id": "13114496", "PostTypeId": "2", "Body": "<p>I think it depends on the type of undefined behavior. Things that would affect something like structure offsets could cause undefined behavior, which would show up any time code that touches that structure is executed.</p>\n<p>In general, however, most undefined behavior happens at <strong>run time</strong>, meaning only if that code is executed will the undefined behavior occur.</p>\n<p><a href=\"http://en.wikipedia.org/wiki/Undefined_behavior\" rel=\"nofollow\">For example</a>, an attempt to modify a string literal has undefined behavior:</p>\n<pre><code>char* str = \"StackOverflow\";\nmemcpy(str+5, \"Exchange\", 8);    // undefined behavior\n</code></pre>\n<p>This \"undefined behavior\" will not take place until the <code>memcpy</code> executes. It will still compile into perfectly sane code.</p>\n<p>Another example is omitting the return from a function with a non-void return type:</p>\n<pre><code>int foo() {\n    // no return statement -&gt; undefined behavior.\n}\n</code></pre>\n<p>Here, it is at the point at which <code>foo</code> returns that the undefined behavior occurs. (In this case, on x86, whatever happened to be in the <code>eax</code> register is the resultant return value of the function.)</p>\n<p>Many of these scenarios can be identified by enabling the a higher level of compiler error reporting (eg. <a href=\"http://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html\" rel=\"nofollow\"><code>-Wall</code> on GCC</a>.)</p>\n", "LastEditorUserId": "119527", "LastActivityDate": "2012-10-29T00:55:16.907", "Score": "2", "CreationDate": "2012-10-29T00:26:48.547", "ParentId": "13114459", "CommentCount": "2", "OwnerUserId": "119527", "LastEditDate": "2012-10-29T00:55:16.907"}, "bq_ids": {"n4140": {"so_13114459_49032994_1": {"length": 37, "quality": 0.9487179487179487, "section_id": 5801}}, "n3337": {"so_13114459_49032994_1": {"length": 37, "quality": 0.9487179487179487, "section_id": 5574}}, "n4659": {"so_13114459_49032994_1": {"length": 37, "quality": 0.9487179487179487, "section_id": 7260}}}, "49032994": {"Id": "49032994", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_13114459_49032994_0\">which makes any program containing UB potentially meaningless</p>\n</blockquote>\n<p>Not quite right. A program can't \"contain\" UB; when we say \"UB\" that is short for: the program's behaviour is undefined. All of it!</p>\n<p>So the program is not just potentially, but actually, meaningless, from the start.</p>\n<blockquote>\n<p id=\"so_13114459_49032994_1\"><code>[intro.execution]/5</code>: A conforming implementation executing a well-formed program shall produce the same observable behavior as one of the possible executions of the corresponding instance of the abstract machine with the same program and the same input. However, if any such execution contains an undefined operation, <strong>this International Standard places no requirement on the implementation executing that program with that input (not even with regard to operations preceding the first undefined operation</strong>).</p>\n</blockquote>\n", "LastActivityDate": "2018-02-28T15:23:32.217", "CommentCount": "0", "CreationDate": "2018-02-28T15:23:32.217", "ParentId": "13114459", "Score": "0", "OwnerUserId": "560648"}, "13121406": {"Id": "13121406", "PostTypeId": "2", "Body": "<p>\"Undefined behavior\" means that the language definition doesn't tell you what your program will do. That's a very simple statement: no information. You can speculate all you like about what your implementation may or may not do, but unless your implementation documents what it does, you're only guessing. Programming isn't about guessing; it's about knowing. If the behavior of your program is undefined, fix it.</p>\n", "LastActivityDate": "2012-10-29T12:12:52.437", "CommentCount": "8", "CreationDate": "2012-10-29T12:12:52.437", "ParentId": "13114459", "Score": "2", "OwnerUserId": "1593860"}, "13114498": {"Id": "13114498", "PostTypeId": "2", "Body": "<p>while it is \"undefined behaviour\",  given a particular compiler, it will have a predictable behavior of some sort.  But because it is undefined,  on different compilers, it may result in that behavior occurring at any point of the complilation / runtime </p>\n", "LastActivityDate": "2012-10-29T00:26:56.167", "CommentCount": "3", "CreationDate": "2012-10-29T00:26:56.167", "ParentId": "13114459", "Score": "1", "OwnerUserId": "10431"}});