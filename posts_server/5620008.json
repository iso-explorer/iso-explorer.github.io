post_cb({"5620326": {"ParentId": "5620008", "CommentCount": "0", "Body": "<p>The rationale for this addition, with examples can be found <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2367.html#261\" rel=\"nofollow\">here</a>. In short, it is a clarification of exactly when an allocation/deallocation function for a class needs to be defined. </p>\n<p>The (C++03) One Definition Rule requires that every variable or function that is <em>used</em> in the program, for a very specific definition of \"use\", must have exactly one definition. \nTherefore, a description of when a (de)allocation function is considered \"used\", also mandates when a definition is required.</p>\n<p>To avoid confusion between the general meaning of the word \"use\", and the meaning of \"use\" as defined in ODR, the word \"use\" has been replaced with \"odr-use\" whenever the second meaning is intended.</p>\n", "OwnerUserId": "632030", "PostTypeId": "2", "Id": "5620326", "Score": "4", "CreationDate": "2011-04-11T10:58:55.047", "LastActivityDate": "2011-04-11T10:58:55.047"}, "5620008": {"CommentCount": "0", "ViewCount": "251", "PostTypeId": "1", "LastEditorUserId": "526255", "CreationDate": "2011-04-11T10:29:56.820", "LastActivityDate": "2011-04-12T05:12:21.790", "Title": "Can anyone explain this paragraph of the current C++0x standard draft?", "AcceptedAnswerId": "5620326", "LastEditDate": "2011-04-12T05:12:21.790", "Id": "5620008", "Score": "6", "Body": "<p>Can anyone explain this statement from ISO N3242 \u00a73.2, 2nd point</p>\n<blockquote>\n<p id=\"so_5620008_5620008_0\">A non-placement allocation or\n  deallocation function for a class is\n  odr-used by the definition of a\n  constructor of that class. A\n  non-placement deallocation  function\n  for a class is odr-usedby the\n  definition of the destructor of that \n  class, or by being selected by the\n  lookup at the point of definitionof a\n  virtual  destructor (12.4).26 A\n  copy-assignment function for a class\n  is odr-used by an  implicitly-defined\n  copy-assignment function for another\n  class as specified  in 12.8. A\n  move-assignment function for a class\n  is odr-used by an  implicitly-defined\n  move-assignment function for another\n  class as specified in 12.8.</p>\n</blockquote>\n<p>ISO Standard 2003 says:</p>\n<blockquote>\n<p id=\"so_5620008_5620008_1\">A copy-assignment function for a class\n  is used by an implicitly-defined\n  copy-assignment function for another\n  class as specified in 12.8.</p>\n</blockquote>\n<p>What is the actual difference in these statements?</p>\n<p>Any one explain the above added point in terms of example/program...?</p>\n<p>I know move constructor / move assigment function --&gt;new feature added .</p>\n<p>Can any one explain this with the help of an example/program? </p>\n<p>please.............</p>\n<p>please.......... answer </p>\n", "Tags": "<c++><c++11><standards><one-definition-rule>", "OwnerUserId": "526255", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_5620008_5620008_0": {"section_id": 7040, "quality": 0.7446808510638298, "length": 35}, "so_5620008_5620008_1": {"section_id": 7040, "quality": 0.8, "length": 8}}, "n3337": {"so_5620008_5620008_1": {"section_id": 6785, "quality": 0.9, "length": 9}, "so_5620008_5620008_0": {"section_id": 6785, "quality": 0.8936170212765957, "length": 42}}, "n4659": {"so_5620008_5620008_1": {"section_id": 8537, "quality": 0.8, "length": 8}, "so_5620008_5620008_0": {"section_id": 8537, "quality": 0.723404255319149, "length": 34}}}});