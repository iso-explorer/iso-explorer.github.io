post_cb({"bq_ids": {"n4140": {"so_47449598_47449750_1": {"length": 14, "quality": 0.9333333333333333, "section_id": 6076}, "so_47449598_47449750_0": {"length": 28, "quality": 0.9032258064516129, "section_id": 7203}}, "n3337": {"so_47449598_47449750_1": {"length": 13, "quality": 0.8666666666666667, "section_id": 5844}, "so_47449598_47449750_0": {"length": 24, "quality": 0.7741935483870968, "section_id": 6947}}, "n4659": {"so_47449598_47449750_1": {"length": 14, "quality": 0.9333333333333333, "section_id": 7572}, "so_47449598_47449750_0": {"length": 26, "quality": 0.8387096774193549, "section_id": 8712}}}, "47449750": {"Id": "47449750", "PostTypeId": "2", "Body": "<p>To answer that, one needs to answer what is an <em>incomplete</em> type. The standard actually has a definition (<a href=\"https://timsong-cpp.github.io/cppwp/n4659/basic.types#5\" rel=\"nofollow noreferrer\">[basic.types]/5</a>):</p>\n<blockquote>\n<p id=\"so_47449598_47449750_0\">A class that has been declared but not defined, an enumeration type in\n  certain contexts ([dcl.enum]), or an array of unknown bound or of\n  incomplete element type, is an incompletely-defined object type.\n  Incompletely-defined object types and cv void are incomplete types\n  ([basic.fundamental]). Objects shall not be defined to have an\n  incomplete type.</p>\n</blockquote>\n<p>The \"certain contexts\" refers to situations when there isn't a complete definition of the type yet. For instance, a forward declaration of an enum <code>enum foo : int;</code> declares an incomplete type.</p>\n<p>Now, since <code>sizeof</code> may not be applied to incomplete types (<a href=\"https://timsong-cpp.github.io/cppwp/n4659/expr.sizeof#1\" rel=\"nofollow noreferrer\">[expr.sizeof]/1</a>):</p>\n<blockquote>\n<p id=\"so_47449598_47449750_1\">The sizeof operator shall not be applied to an expression that has\n  function or incomplete type, to the parenthesized name of such types,\n  or to a glvalue that designates a bit-field.</p>\n</blockquote>\n<p>That <code>typedef</code> is ill-formed for any type the standard lists in the first quoted paragraph. And you'll get an error message that includes the text <code>type_must_be_complete</code>.</p>\n<p>And just in case there is some <a href=\"https://stackoverflow.com/questions/2632021/can-sizeof-return-0-zero\">pathological compiler extension that allows a type to have 0 size</a>, the author is being cautious and making sure the array definition is still ill-formed, by giving it a negative size. So you won't be calling <code>delete[]</code> in those pathological case either.</p>\n", "LastEditorUserId": "817643", "LastActivityDate": "2017-11-23T07:48:35.407", "Score": "2", "CreationDate": "2017-11-23T07:25:20.923", "ParentId": "47449598", "CommentCount": "2", "LastEditDate": "2017-11-23T07:48:35.407", "OwnerUserId": "817643"}, "47449598": {"ViewCount": "36", "Body": "<p>I came across this code in <code>boost/checked_delete.hpp</code></p>\n<p>Can somebody explain what are line#1 and line#2 doing?</p>\n<pre><code>template&lt;class T&gt; inline void checked_array_delete(T * x)\n{\n    typedef char type_must_be_complete[ sizeof(T)? 1: -1 ];     #1 \n    (void) sizeof(type_must_be_complete);                       #2\n    delete [] x;\n}\n</code></pre>\n<p>From this <a href=\"http://www.boost.org/doc/libs/1_65_1/libs/core/doc/html/core/checked_delete.html\" rel=\"nofollow noreferrer\">page</a>, I got this info regarding their purpose, </p>\n<pre><code>T must be a complete type. The expression delete [] p must be well-formed.\n</code></pre>\n<p>but, what is a <em>complete type</em> in C++?</p>\n", "AcceptedAnswerId": "47449750", "Title": "Check for Complete type", "CreationDate": "2017-11-23T07:15:22.197", "Id": "47449598", "CommentCount": "1", "LastEditDate": "2017-11-23T13:30:28.717", "PostTypeId": "1", "LastEditorUserId": "1465553", "LastActivityDate": "2017-11-23T13:30:28.717", "Score": "2", "OwnerUserId": "1465553", "Tags": "<c++><templates><boost>", "AnswerCount": "1"}});