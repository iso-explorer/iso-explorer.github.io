post_cb({"28528210": {"CommentCount": "0", "ViewCount": "224", "CreationDate": "2015-02-15T16:22:31.787", "LastActivityDate": "2015-02-16T03:48:07.127", "Title": "Is function object returned by std::mem_fn required to have a const overload", "AcceptedAnswerId": "28528400", "PostTypeId": "1", "Id": "28528210", "Score": "0", "Body": "<p>When I run this code with libc++:</p>\n<pre><code>struct foo\n{\n    foo(int x) : x(x)\n    {}\n    int x;\n};\n\nint main()\n{\n    const auto select_x = std::mem_fn(&amp;foo::x);\n    foo f(1);\n    printf(\"%i\\n\", select_x(f));\n}\n</code></pre>\n<p>I get an error like this:</p>\n<pre><code>mem_fn.cpp:16:20: error: no matching function for call to object of type\n      'const std::__1::__mem_fn&lt;int foo::*&gt;'\n    printf(\"%i\\n\", select_x(f));\n                   ^~~~~~~~\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/functional:1224:11: note: \n      candidate function not viable: 'this' argument has type 'const\n      std::__1::__mem_fn&lt;int foo::*&gt;', but method is not marked const\n          operator() (_ArgTypes&amp;&amp;... __args)\n          ^\n</code></pre>\n<p>It seems that libc++ is missing a <code>const</code> overload. It work using libstdc++. Is this a bug in libc++? Or does the standard require a <code>const</code> overload?</p>\n", "Tags": "<c++><c++11><clang><libc++>", "OwnerUserId": "375343", "AnswerCount": "1"}, "28528400": {"ParentId": "28528210", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>I don't see the standard specifying anything about the const-callability of the wrapper returned by <code>mem_fn</code>. From [func.memfn] (quoting N4140):</p>\n<blockquote>\n<pre><code>template&lt;class R, class T&gt; unspecified mem_fn(R T::* pm);\n</code></pre>\n<p id=\"so_28528210_28528400_0\">1 <em>Returns</em>: A simple call wrapper (20.9.1) <code>fn</code> such that the\n  expression <code>fn(t, a2, ..., aN)</code> is equivalent to <code>INVOKE (pm, t, a2, ..., aN)</code> \n  (20.9.2). <code>fn</code> shall have a nested type <code>result_type</code> that\n  is a synonym for the return type of <code>pm</code> when <code>pm</code> is a pointer to\n  member function.</p>\n<p id=\"so_28528210_28528400_1\">2 The simple call wrapper shall define two nested types named\n  argument_type and result_type as synonyms for <code>cv T*</code> and <code>Ret</code>,\n  respectively, when pm is a pointer to member function with\n  cv-qualifier <code>cv</code> and taking no arguments, where <code>Ret</code> is <code>pm</code>\u2019s\n  return type. </p>\n<p id=\"so_28528210_28528400_2\">3 The simple call wrapper shall define three nested types\n  named  <code>first_argument_type</code>, <code>second_argument_type</code>, and\n  <code>result_type</code> as synonyms for <code>cv T*</code>, <code>T1</code>, and <code>Ret</code>, respectively,\n  when <code>pm</code> is a pointer to member function with cv-qualifier <code>cv</code> and\n  taking one argument of type <code>T1</code>, where <code>Ret</code> is <code>pm</code>\u2019s return type. </p>\n<p id=\"so_28528210_28528400_3\">4 <em>Throws</em>: Nothing.</p>\n</blockquote>\n<p>The reference to [func.def] (though <em>simple call wrapper</em> is actually defined in [func.require]) is equally unilluminating. This pretty much only guarantees that whatever it returns is usable directly.</p>\n<p>As a quality of implementation issue, though, I see no reason why the wrapper shouldn't be const-callable, and it looks like this actually has been fixed <a href=\"http://llvm.org/viewvc/llvm-project/libcxx/trunk/include/functional?r1=191626&amp;r2=199848\" rel=\"nofollow\">over a year ago</a>. You might want to try updating your XCode to see if you can pick up a more recent version of the library.</p>\n", "OwnerUserId": "2756719", "LastEditorUserId": "2756719", "LastEditDate": "2015-02-16T03:48:07.127", "Id": "28528400", "Score": "3", "CreationDate": "2015-02-15T16:41:19.607", "LastActivityDate": "2015-02-16T03:48:07.127"}, "bq_ids": {"n4140": {"so_28528210_28528400_1": {"section_id": 4644, "quality": 0.9230769230769231, "length": 24}, "so_28528210_28528400_2": {"section_id": 4645, "quality": 0.9310344827586207, "length": 27}, "so_28528210_28528400_0": {"section_id": 4643, "quality": 0.8181818181818182, "length": 18}}, "n3337": {"so_28528210_28528400_1": {"section_id": 4455, "quality": 0.9230769230769231, "length": 24}, "so_28528210_28528400_2": {"section_id": 4456, "quality": 0.9310344827586207, "length": 27}, "so_28528210_28528400_0": {"section_id": 4454, "quality": 0.8181818181818182, "length": 18}}, "n4659": {"so_28528210_28528400_1": {"section_id": 6387, "quality": 0.9615384615384616, "length": 25}, "so_28528210_28528400_2": {"section_id": 6388, "quality": 0.9655172413793104, "length": 28}, "so_28528210_28528400_0": {"section_id": 6386, "quality": 0.6363636363636364, "length": 14}}}});