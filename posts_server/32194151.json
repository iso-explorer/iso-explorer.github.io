post_cb({"32194256": {"ParentId": "32194151", "CommentCount": "0", "Body": "<p>Yes, as stated by @Captain Obvlious, C++ just cares about <em>type</em> of the parameters. C++ standard committee papers publicly available <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/\">here</a> for your reference.</p>\n<p><strong>3.6.1 Main function</strong></p>\n<blockquote>\n<ol start=\"2\">\n<li>An implementation shall not predefine the main function. This\n  function shall not be overloaded. It shall have a return type of type\n  int, but otherwise its type is implementation-defined. <strong>All\n  implementations shall allow both</strong> </li>\n</ol>\n<p id=\"so_32194151_32194256_0\">\u2014 a function of () returning int and</p>\n<p id=\"so_32194151_32194256_1\"><strong>\u2014 a function of (int, pointer to pointer to char) returning int</strong></p>\n</blockquote>\n", "OwnerUserId": "2110189", "PostTypeId": "2", "Id": "32194256", "Score": "5", "CreationDate": "2015-08-25T01:36:28.043", "LastActivityDate": "2015-08-25T01:36:28.043"}, "32194324": {"ParentId": "32194151", "CommentCount": "1", "Body": "<p>Yes, it's quite valid.</p>\n<p>First, <code>C++11 3.6.1 /2</code> states the allowable forms of <code>main()</code>, including the two canonical forms:</p>\n<blockquote>\n<p id=\"so_32194151_32194324_0\">An implementation shall not predefine the main function. This function shall not be overloaded. <strong><em>It shall have a return type of type int, but otherwise its type is implementation-defined.</em></strong> All implementations shall\n  allow both of the following definitions of main:</p>\n<p id=\"so_32194151_32194324_1\"><code>int main() { /* ... */ }</code> and<br>\n<code>int main(int argc, char* argv[]) { /* ... */ }</code></br></p>\n</blockquote>\n<p>Then, in <code>C++11 8.3.5 Functions /11</code>, it states that parameter names are not actually <em>required</em> for function definitions:</p>\n<blockquote>\n<p id=\"so_32194151_32194324_2\">An identifier can <strong><em>optionally</em></strong> be provided as a parameter name; if present in a function definition (8.4), it names a parameter (sometimes called \"formal argument\").</p>\n</blockquote>\n<p>However, given that the lack of names means that you can't <em>access</em> the variables, it's probably a better idea to just use the canonical form without them:</p>\n<pre><code>int main() { ... }\n</code></pre>\n", "OwnerUserId": "14860", "PostTypeId": "2", "Id": "32194324", "Score": "4", "CreationDate": "2015-08-25T01:46:51.280", "LastActivityDate": "2015-08-25T01:46:51.280"}, "bq_ids": {"n4140": {"so_32194151_32194256_1": {"section_id": 7146, "quality": 1.0, "length": 7}, "so_32194151_32194324_0": {"section_id": 7146, "quality": 0.75, "length": 18}, "so_32194151_32194324_2": {"section_id": 3247, "quality": 0.7333333333333333, "length": 11}, "so_32194151_32194324_1": {"section_id": 7146, "quality": 0.7142857142857143, "length": 5}}, "n3337": {"so_32194151_32194256_1": {"section_id": 3073, "quality": 0.8571428571428571, "length": 6}, "so_32194151_32194324_0": {"section_id": 6890, "quality": 0.9166666666666666, "length": 22}, "so_32194151_32194324_2": {"section_id": 3120, "quality": 1.0, "length": 15}, "so_32194151_32194324_1": {"section_id": 6890, "quality": 0.5714285714285714, "length": 4}}, "n4659": {"so_32194151_32194256_1": {"section_id": 8647, "quality": 1.0, "length": 7}, "so_32194151_32194324_0": {"section_id": 8647, "quality": 0.75, "length": 18}, "so_32194151_32194324_2": {"section_id": 4005, "quality": 0.7333333333333333, "length": 11}, "so_32194151_32194324_1": {"section_id": 8647, "quality": 0.7142857142857143, "length": 5}}}, "32194151": {"CommentCount": "3", "ViewCount": "107", "CreationDate": "2015-08-25T01:22:11.790", "LastActivityDate": "2015-08-25T01:46:51.280", "Title": "Are nameless parameters in main() strictly conforming?", "FavoriteCount": "1", "PostTypeId": "1", "Id": "32194151", "Score": "2", "Body": "<p>C++ allows the following two definitions of main:</p>\n<pre><code>int main() { }\nint main(int argc, char* argv[]) { }\n</code></pre>\n<p>It also allows <code>char*[]</code> to be <code>char**</code> and <code>argc</code> and <code>argv</code> to be named whatever the programmer wishes. However, does it also allow:</p>\n<pre><code>int main(int, char*[]) { }\n</code></pre>\n<p>Is this identical to the above examples? Is it strictly conforming? Note, I don't care if it compiles in your favorite compiler, I'm asking about standards only.</p>\n", "Tags": "<c++><main><language-lawyer>", "OwnerUserId": "5262423", "AnswerCount": "2"}});