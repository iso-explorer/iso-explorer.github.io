post_cb({"18712092": {"ParentId": "18711866", "CommentCount": "0", "Body": "<p>Its a Object of class <code>istream</code>. So when you use <code>cin</code> you just create a <code>istream</code> type object.\nIt has external linkage and static duration.</p>\n<p>The standard input stream is a source of characters determined by the environment. It is generally assumed to be input from an external source, such as the <code>keyboard</code> or a <code>file</code>.</p>\n<p>As an object of class <code>istream</code>, characters can be retrieved either as formatted data using the extraction operator (<code>operator&gt;&gt;</code>) or as unformatted data, using member functions such as <code>read</code>.</p>\n", "OwnerUserId": "1648099", "PostTypeId": "2", "Id": "18712092", "Score": "1", "CreationDate": "2013-09-10T06:32:08.710", "LastActivityDate": "2013-09-10T06:32:08.710"}, "18712002": {"ParentId": "18711866", "CommentCount": "0", "Body": "<p>The implementation you're using provides them in some form. The specifics as to <em>where</em> they are at runtime is implementation-defined, but access <em>to</em> them is standard-defined. Their lifetimes and behavior therein are likewise defined by the standard: </p>\n<blockquote>\n<p id=\"so_18711866_18712002_0\">C++11 \u00a7 27.4.1(2)</p>\n<p id=\"so_18711866_18712002_1\">The objects are constructed and the associations are established at some time prior to or during the first time an object of class ios_base::Init is constructed, and in any case before the body of <code>main</code> begins execution.<sub>294</sub> The objects are not destroyed during program execution.<sub>295</sub> The results of including <code>&lt;iostream&gt;</code> in a translation unit shall be as if <code>&lt;iostream&gt;</code> defined an instance of <code>ios_base::Init</code> with static storage duration. Similarly, the entire program shall behave as if there were at least one instance of <code>ios_base::Init</code> with static storage duration.</p>\n</blockquote>\n", "OwnerUserId": "1322972", "PostTypeId": "2", "Id": "18712002", "Score": "3", "CreationDate": "2013-09-10T06:25:09.313", "LastActivityDate": "2013-09-10T06:25:09.313"}, "18711900": {"ParentId": "18711866", "CommentCount": "0", "Body": "<p>In a library that is automatically linked to your executable by the compiler driver program (e.g. <code>g++</code> or <code>clang++</code>).</p>\n", "OwnerUserId": "440558", "PostTypeId": "2", "Id": "18711900", "Score": "1", "CreationDate": "2013-09-10T06:18:04.597", "LastActivityDate": "2013-09-10T06:18:04.597"}, "18711866": {"CommentCount": "1", "ViewCount": "790", "PostTypeId": "1", "LastEditorUserId": "2720081", "LastActivityDate": "2013-09-10T06:32:08.710", "Body": "<p>In C++, the istream object <code>std::cin</code> is declared in header <code>&lt;iostream&gt;</code>, but where is it defined?</p>\n", "Title": "In C++, where is std::cin object defined?", "FavoriteCount": "1", "LastEditDate": "2013-09-10T06:22:36.753", "Id": "18711866", "Score": "9", "CreationDate": "2013-09-10T06:15:24.490", "Tags": "<c++><iostream>", "OwnerUserId": "1036812", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_18711866_18712002_1": {"section_id": 1920, "quality": 0.9019607843137255, "length": 46}}, "n3337": {"so_18711866_18712002_1": {"section_id": 1909, "quality": 0.9019607843137255, "length": 46}}, "n4659": {"so_18711866_18712002_1": {"section_id": 2191, "quality": 0.6666666666666666, "length": 34}}}, "18711919": {"ParentId": "18711866", "LastEditDate": "2013-09-10T06:25:03.783", "CommentCount": "0", "CreationDate": "2013-09-10T06:19:36.010", "OwnerUserId": "19563", "LastEditorUserId": "19563", "PostTypeId": "2", "Id": "18711919", "Score": "11", "Body": "<p>Where it is defined is not mandated by the standard, it's completely up to the implementation.</p>\n<p>Here's where mine is:</p>\n<pre><code>$ nm -C /usr/local/lib64/libstdc++.so.6 | grep -w cin\n0000000000305900 B std::cin\n</code></pre>\n", "LastActivityDate": "2013-09-10T06:25:03.783"}});