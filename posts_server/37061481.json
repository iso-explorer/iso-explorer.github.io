post_cb({"37061481": {"CommentCount": "1", "ViewCount": "116", "CreationDate": "2016-05-05T22:43:12.607", "LastActivityDate": "2016-05-05T23:02:51.303", "Title": "std::tuple_element and references", "AcceptedAnswerId": "37061668", "PostTypeId": "1", "Id": "37061481", "Score": "0", "Body": "<p>I study std::tuple.</p>\n<p>Let's we have:</p>\n<pre><code>struct test_struct{};\n</code></pre>\n<p>I write </p>\n<pre><code>std::cout &lt;&lt; typeid(std::tuple_element_t&lt;0, std::tuple&lt;struct test_struct &amp;&gt;&gt;).name();\n</code></pre>\n<p>And I was expecting the type</p>\n<pre><code>struct test_struct &amp;\n</code></pre>\n<p>But I received:</p>\n<pre><code>struct test_struct\n</code></pre>\n<p>How I can extract type <strong>struct test_struct &amp;</strong> (preferably using std11)?</p>\n<p>Thanks.</p>\n", "Tags": "<c++><c++11><stdtuple>", "OwnerUserId": "6292494", "AnswerCount": "1"}, "37061668": {"ParentId": "37061481", "CommentCount": "2", "CreationDate": "2016-05-05T23:02:51.303", "OwnerUserId": "3087601", "PostTypeId": "2", "Id": "37061668", "Score": "0", "Body": "<p>Since <code>typeid</code> operator does not <em>work</em> for reference types,</p>\n<blockquote>\n<p id=\"so_37061481_37061668_0\">\u00a75.2.8/4-5<br>\n  If <em>type</em> is a reference type, the result refers to a <code>std::type_info</code> object representing the referenced type.</br></p>\n<p id=\"so_37061481_37061668_1\">In all cases, cv-qualifiers are ignored by typeid (that is, <code>typeid(T)==typeid(const T)</code>) </p>\n</blockquote>\n<p>you can write few wrappers to find out names of reference types or types with cv-qualifiers.</p>\n<pre><code>template&lt;typename T&gt;\nstruct typeid_hlp\n{\n    static std::string name() { return typeid(T).name(); }\n};\n\ntemplate&lt;typename T&gt;\nstruct typeid_hlp&lt;T&amp;&gt;\n{\n    static std::string name() { return typeid_hlp&lt;T&gt;::name() + std::string(\" &amp;\"); }\n};\n\ntemplate&lt;typename T&gt;\nstruct typeid_hlp&lt;T&amp;&amp;&gt;\n{\n    static std::string name() { return typeid_hlp&lt;T&gt;::name() + std::string(\" &amp;&amp;\"); }\n};\n\ntemplate&lt;typename T&gt;\nstruct typeid_hlp&lt;const T&gt;\n{\n    static std::string name() { return std::string(\"const \") + typeid_hlp&lt;T&gt;::name(); }\n};\n\ntemplate&lt;typename T&gt;\nstruct typeid_hlp&lt;volatile T&gt;\n{\n    static std::string name() { return std::string(\"volatile \") + typeid_hlp&lt;T&gt;::name(); }\n};\n</code></pre>\n<p>And use it like</p>\n<pre><code>int main()\n{\n    std::cout &lt;&lt; typeid_hlp&lt;int&gt;::name() &lt;&lt; std::endl; // int\n    std::cout &lt;&lt; typeid_hlp&lt;int&amp;&gt;::name() &lt;&lt; std::endl; // int &amp;\n    std::cout &lt;&lt; typeid_hlp&lt;const int&gt;::name() &lt;&lt; std::endl; // const int\n    std::cout &lt;&lt; typeid_hlp&lt;volatile const int * const &amp;&gt;::name() &lt;&lt; std::endl; // const int const volatile * __ptr64 &amp;\n}\n</code></pre>\n", "LastActivityDate": "2016-05-05T23:02:51.303"}, "bq_ids": {"n4140": {"so_37061481_37061668_0": {"section_id": 6023, "quality": 0.9090909090909091, "length": 10}}, "n3337": {"so_37061481_37061668_0": {"section_id": 5791, "quality": 0.9090909090909091, "length": 10}}, "n4659": {"so_37061481_37061668_0": {"section_id": 7522, "quality": 0.9090909090909091, "length": 10}}}});