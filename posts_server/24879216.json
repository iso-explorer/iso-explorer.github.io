post_cb({"bq_ids": {"n4140": {"so_24879216_24879341_0": {"length": 30, "quality": 0.967741935483871, "section_id": 6539}}, "n3337": {"so_24879216_24879341_0": {"length": 30, "quality": 0.967741935483871, "section_id": 6294}}, "n4659": {"so_24879216_24879341_0": {"length": 30, "quality": 0.967741935483871, "section_id": 8021}}}, "24879448": {"Id": "24879448", "PostTypeId": "2", "Body": "<p>T.C. has explained the way streaming in to a <code>bool</code> works, summarily a <code>long</code> is consumed, <code>0</code> -&gt; <code>false</code>, <code>1</code> -&gt; <code>true</code>, otherwise <code>true</code> but with <code>failbit</code> set.</p>\n<p>For general numeric input, C++ has <code>std::dec</code> for decimal input, <code>std::oct</code> for octal (base 8), <code>std::hex</code> for hexadecimal (base 16), but strangely nothing for binary.  It is not possible to read a multi-digit binary representation of a number directly into an integral type.</p>\n<p>What you'll have to do is read a character at a time, then convert to binary yourself:</p>\n<pre><code>`char c;`\n\n...\n\n    if (cin &gt;&gt; c &amp;&amp; (c == '0' || c == '1'))\n        mutualFriend[i][j] == c != '0';\n    else\n        throw std::runtime_error(\"failure to parse binary digit from stream\");\n</code></pre>\n", "LastActivityDate": "2014-07-22T05:18:09.560", "Score": "1", "CreationDate": "2014-07-22T05:18:09.560", "ParentId": "24879216", "CommentCount": "0", "OwnerUserId": "410767"}, "24879364": {"Id": "24879364", "PostTypeId": "2", "Body": "<p>cin has space as default delimiter so when you do read from the value 10101.. it regards it as just a big int.</p>\n<p>Instead use .get() to read a single character</p>\n<pre><code>for (int i = 0; i &lt; noOfFriends ; i++){\n    for (int j = 0; j &lt; noOfFriends; j++){\n        mutualFriend[i][j] = (cin.get() == '1');\n    }\n}\n</code></pre>\n", "LastActivityDate": "2014-07-22T05:09:59.777", "Score": "1", "CreationDate": "2014-07-22T05:09:59.777", "ParentId": "24879216", "CommentCount": "0", "OwnerUserId": "45685"}, "24879216": {"ViewCount": "89", "Body": "<p>I am trying to take input in bool type array using <code>cin</code>. If input is given like <code>0111100010001000</code> it instead of running for all iteration ( In my input it is 16 ) it terminates and print some garbage values, But if input is given like <code>0 1 1 1 1 0 0 0 1 0 0 0 1 0 0 0</code> it works as expected.</p>\n<pre><code>#include&lt;cstdio&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\n\n#define FRND 2001\n\nusing namespace std;\n\nint main(){\n    bool mutualFriend[FRND][FRND];\n    int noOfFriends = 0;\n    cin &gt;&gt; noOfFriends;\n    for (int i = 0; i &lt; noOfFriends ; i++){\n        for (int j = 0; j &lt; noOfFriends; j++){\n            cin &gt;&gt; mutualFriend[i][j];\n        }\n    }\n    for (int i = 0; i &lt; noOfFriends ; i++){\n        for (int j = 0; j &lt; noOfFriends; j++){\n            cout &lt;&lt; mutualFriend[i][j] &lt;&lt; \" \";\n        }\n        cout &lt;&lt; endl;\n    }\n    return 0;\n}\n</code></pre>\n<p><code>cin.clear()</code> can solve my problem.</p>\n<p>Please explain why loops are skipped in the first scenario.</p>\n", "Title": "Unexpected behaviour of cin for bool", "CreationDate": "2014-07-22T04:57:38.207", "LastActivityDate": "2014-07-22T05:18:09.560", "CommentCount": "1", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2014-07-22T05:15:56.400", "LastEditorUserId": "2756719", "Id": "24879216", "Score": "1", "OwnerUserId": "2416165", "Tags": "<c++>", "AnswerCount": "3"}, "24879341": {"Id": "24879341", "PostTypeId": "2", "Body": "<p>The way <code>operator&gt;&gt;</code> parses input for a <code>bool</code> argument is specified in \u00a722.4.2.1.2 [facet.num.get.virtuals]/p6 of the standard:</p>\n<blockquote>\n<p id=\"so_24879216_24879341_0\">If <code>(str.flags()&amp;ios_base::boolalpha)==0</code> then input proceeds as it\n  would for a <code>long</code> except that if a value is being stored into <code>val</code>,\n  the value is determined according to the following: If the value to be\n  stored is <code>0</code> then <code>false</code> is stored. If the value is <code>1</code> then <code>true</code>\n  is stored. Otherwise <code>true</code> is stored and <code>ios_base::failbit</code> is\n  assigned to err.</p>\n</blockquote>\n<p>Therefore, if you give it <code>0111100010001000</code> it will first try to parse it as a <code>long</code>, giving you a large number (that obvious isn't <code>1</code>). Then the second step of the processing causes <code>true</code> to be stored into the <code>bool</code> and  <code>failbit</code> to be set.</p>\n", "LastActivityDate": "2014-07-22T05:07:49.920", "Score": "3", "CreationDate": "2014-07-22T05:07:49.920", "ParentId": "24879216", "CommentCount": "2", "OwnerUserId": "2756719"}});