post_cb({"39121683": {"Id": "39121683", "PostTypeId": "2", "Body": "<p>The error situation you are creating is not an error caused by stream buffer operations per se. At some point, you simply run out of memory and the allocator of the stream will throw a <code>bad_alloc</code>. This is the exception you are seeing.</p>\n<p>Whether or not the <code>bad_alloc</code> should be rethrown as a ios_base::failure is debatable, since, in the end, the stream operation does fail. I am not surprised to see a <code>bad_alloc</code> situation in this case though.</p>\n", "LastActivityDate": "2016-08-24T11:09:23.713", "CommentCount": "1", "CreationDate": "2016-08-24T11:09:23.713", "ParentId": "39101598", "Score": "0", "OwnerUserId": "3495086"}, "bq_ids": {"n4140": {"so_39101598_39132892_0": {"length": 32, "quality": 0.9696969696969697, "section_id": 2287}, "so_39101598_39101598_0": {"length": 20, "quality": 0.9523809523809523, "section_id": 1940}}, "n3337": {"so_39101598_39132892_0": {"length": 32, "quality": 0.9696969696969697, "section_id": 2275}, "so_39101598_39101598_0": {"length": 20, "quality": 0.9523809523809523, "section_id": 1929}}, "n4659": {"so_39101598_39132892_0": {"length": 32, "quality": 0.9696969696969697, "section_id": 2560}, "so_39101598_39101598_0": {"length": 20, "quality": 0.9523809523809523, "section_id": 2211}}}, "39132892": {"Id": "39132892", "PostTypeId": "2", "Body": "<p><code>os &lt;&lt; 'F';</code> is <code>operator&lt;&lt;(ostream&amp;, char)</code>, which is a Formatted Output Function, and, quoting 27.7.3.6.1[ostream.formatted.reqmts],</p>\n<blockquote>\n<p id=\"so_39101598_39132892_0\">the function endeavors to generate the requested output. If the generation fails, then the formatted output function does <code>setstate(ios_base::failbit)</code>, which might throw an exception.  If an exception is thrown during output, then <code>ios::badbit</code> is turned on without causing an <code>ios::failure</code> to be thrown. in <code>*this</code>\u2019s error state. If <code>(exceptions()&amp;badbit) != 0</code> then the exception is rethrown</p>\n</blockquote>\n<p>As part of output, this function calls <code>stringbuf::overflow</code>, which is specified, in <code>27.8.2.4[stringbuf.virtuals]p8</code>, to perform reallocation. The difference between libstdc++ and libc++ here is the interpretation of the consequences of its allocation failure:</p>\n<p>in libstdc++, it throws <code>std::bad_alloc</code> out of <code>stringbuf::overflow</code>, which unrolls the stack all the way to <code>operator&lt;&lt;</code> (technically, <code>__ostream_insert</code>), sets <code>badbit</code> and is rethrown, unmodified, as specified above.</p>\n<p>In libc++, <code>std::bad_alloc</code> is caught inside <code>stringbuf::overflow</code>, and it makes <code>overflow</code> return <code>traits::eof</code>, which, in turn, makes the caller (in this case, <code>steambuf::xsputn</code>) return zero, which, in turn, makes the caller, <code>__pad_and_output</code>, wipe out the stream's rdbuf completely, which, in turn, makes its caller, <code>__put_character_sequence</code>, set both badbit and failbit. Setting of that badbit throws the <code>ios::failure</code> you caught.</p>\n<p>Perhaps libc++ is technically correct in <code>stringbuf::overflow</code>: the standard says</p>\n<blockquote>\n<p id=\"so_39101598_39132892_1\">''Returns:'' <code>traits::eof()</code> to indicate failure.</p>\n</blockquote>\n<p>and it's hard to imagine a way for it to fail other than by allocation failure, but I think libstdc++'s interpretation is closer to the intent. (In libstdc++, <code>stringbuf::overflow</code> can still return <code>eof</code>, if the buffer capacity reaches <code>string::max_size</code> without first hitting <code>bad_alloc</code>)</p>\n", "LastEditorUserId": "273767", "LastActivityDate": "2016-08-25T00:49:43.620", "Score": "2", "CreationDate": "2016-08-24T20:57:08.207", "ParentId": "39101598", "CommentCount": "0", "OwnerUserId": "273767", "LastEditDate": "2016-08-25T00:49:43.620"}, "39101598": {"ViewCount": "547", "Body": "<p>Standard(<code>N3337</code>) says (<code>27.5.3.1.1 Class ios_base::failure</code>):</p>\n<blockquote>\n<p id=\"so_39101598_39101598_0\">The class failure defines the base class for the types of all objects\n  thrown as exceptions, by functions in the iostreams library, to report\n  errors detected during stream buffer operations.</p>\n</blockquote>\n<p>I have a simple test program which emulates restricted resource environment while using of std::ostringstream:</p>\n<pre><code>#include &lt;sys/time.h&gt;\n#include &lt;sys/resource.h&gt;\n\n#include &lt;errno.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\n#include &lt;iostream&gt;\n#include &lt;sstream&gt;\n\nint main(int argc, const char* argv[])\n{\n    rlimit limit;\n    limit.rlim_cur = limit.rlim_max = 268435456;\n\n    if(setrlimit(RLIMIT_AS, &amp;limit)) {\n        std::cerr &lt;&lt; \"Cannot set resource limit: \" &lt;&lt; strerror(errno) &lt;&lt; std::endl;\n        exit(EXIT_FAILURE);\n    }\n\n    std::ostringstream os;\n    os.exceptions(std::ostringstream::badbit);\n\n    try {\n        auto iterations = 1024 * 1024 * 1024;\n\n        while(iterations &amp;&amp; --iterations) os &lt;&lt; 'F';\n\n    } catch(const std::ios_base::failure&amp; ex) {\n        std::cerr &lt;&lt; \"Caught: std::ios_base::failure\" &lt;&lt; std::endl;\n    } catch(const std::bad_alloc&amp; ex) {\n        std::cerr &lt;&lt; \"Caught: std::bad_alloc\" &lt;&lt; std::endl;\n    } catch(...) {\n        std::cerr &lt;&lt; \"Caught: ellipsis\" &lt;&lt; std::endl;\n    }\n\n    return 0;\n}\n</code></pre>\n<p>In my environment (Linux, gcc 5.3.0) I got <code>Caught: std::bad_alloc</code> on <code>stderr</code>. <a href=\"http://coliru.stacked-crooked.com/a/3431d894273ba4d6\" rel=\"nofollow\">One of online compilers</a> shows the same output.</p>\n<p>The question is: why exception type is <code>std::bad_alloc</code> and not <code>std::ios_base::failure</code> ?</p>\n", "AcceptedAnswerId": "39132892", "Title": "c++ std::ios_base::failure exception", "CreationDate": "2016-08-23T12:44:39.110", "Id": "39101598", "CommentCount": "7", "LastEditDate": "2016-08-23T13:32:29.943", "PostTypeId": "1", "LastEditorUserId": "1641854", "LastActivityDate": "2016-08-25T00:49:43.620", "Score": "4", "OwnerUserId": "1641854", "Tags": "<c++><linux><c++11><exception><iostream>", "AnswerCount": "2"}});