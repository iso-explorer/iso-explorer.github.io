post_cb({"21402060": {"Id": "21402060", "PostTypeId": "2", "Body": "<p>It is not supported because of C++ language rules.  From the <a href=\"http://www.ecma-international.org/publications/standards/Ecma-372.htm\" rel=\"nofollow\">C++/CLI Language Specification</a>, chapter 31.1:</p>\n<blockquote>\n<p id=\"so_21355115_21402060_0\">A generic type shall not have the same name as any other generic type, template, class, delegate, function,\n  object, enumeration, enumerator, namespace, or type in the same scope (C++ Standard 3.3), except as\n  specified in 14.5.4 of the C++ Standard. Except that a generic function can be overloaded either by nongeneric\n  functions with the same name or by other generic functions with the same name, a generic name\n  declared in namespace scope or in class scope shall be unique in that scope.</p>\n</blockquote>\n<p>Chapter 14.5.4 of the C++ Standard talks about partial template specializations, nothing that will help you here.</p>\n<p>As a workaround, you could consider declaring the interfaces in a C# assembly and adding a reference to it.  Or using different namespaces, much like System::Collections::IEnumerable vs System::Collections::Generic::IEnumerable&lt;&gt;.</p>\n", "LastActivityDate": "2014-01-28T09:48:08.317", "CommentCount": "0", "CreationDate": "2014-01-28T09:48:08.317", "ParentId": "21355115", "Score": "3", "OwnerUserId": "17034"}, "bq_ids": {"n4140": {"so_21355115_21402060_0": {"length": 34, "quality": 0.7083333333333334, "section_id": 52}}, "n3337": {"so_21355115_21402060_0": {"length": 34, "quality": 0.7083333333333334, "section_id": 47}}, "n4659": {"so_21355115_21402060_0": {"length": 34, "quality": 0.7083333333333334, "section_id": 53}}}, "21355115": {"ViewCount": "170", "Body": "<p>I have problem with generic and non-generic interfaces with the same name.</p>\n<p>My code:</p>\n<pre><code>public interface class IPacked {\n    // Methods\n    void PackFromDouble(double realNumber);\n    double ToDouble( );\n};\n\ngeneric&lt;typename T&gt; public interface class IPacked : public IPacked {\n    // Property\n    property T PackedValue {\n        virtual T get( );\n        virtual void set(T value);\n    }\n};\n</code></pre>\n<p>I know that, it can be compiled. My friend use it in old team project. \nHowever, this problem does not exist in the functions.</p>\n", "AcceptedAnswerId": "21402060", "Title": "Why Visual C++ not accept generic and non-generic interfaces with the same name?", "CreationDate": "2014-01-25T19:22:04.100", "Id": "21355115", "CommentCount": "1", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2014-01-25T19:50:02.933", "LastEditorUserId": "1992076", "LastActivityDate": "2014-01-28T09:48:08.317", "Score": "1", "OwnerUserId": "1992076", "Tags": "<visual-c++><generics><c++-cli>", "AnswerCount": "1"}});