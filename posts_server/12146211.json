post_cb({"12146211": {"ViewCount": "268", "Body": "<p>Sorry guys I know my english is bad, but i made examples so that my question is more clearer.<br/><br/>\n<strong>a.cpp</strong><br/></p>\n<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nvoid funcfoo(){\n    cout &lt;&lt; \"test only\" &lt;&lt; endl;\n}\n\nint varfoo = 10;\n</code></pre>\n<p><br/><br/></p>\n<p><strong>b.cpp</strong></p>\n<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nextern void funcfoo();\n\nextern int varfoo;\n\nint main(){\n\n    funcfoo();\n\n    cout &lt;&lt; varfoo;\n\n    return 0;\n}\n</code></pre>\n<p><strong>Then I compile it like this \"cl b.cpp a.cpp\"</strong><br/><br/>\nMy question is. How come when I remove the \"extern keyword before void funcfoo()\" it works fine, but when i remove the extern keyword\nbefore int var foo I get an error?</p>\n", "AcceptedAnswerId": "12146246", "Title": "why function didnt need extern, but variable does", "CreationDate": "2012-08-27T16:57:53.327", "Id": "12146211", "CommentCount": "1", "LastEditDate": "2012-08-27T17:01:13.313", "PostTypeId": "1", "LastEditorUserId": "1561378", "LastActivityDate": "2014-02-16T13:13:08.663", "Score": "2", "OwnerUserId": "1628256", "Tags": "<c++><function><variables><extern>", "AnswerCount": "4"}, "12146246": {"Id": "12146246", "PostTypeId": "2", "Body": "<p>The issue is what each one of the lines of code means. <code>int varfoo</code> is a <strong>definition</strong> of a variable, while <code>void funcfoo()</code> is only a <strong>declaration</strong>. You can provide multiple declarations of an entity, but only one <em>definition</em>. The syntax to provide a <em>declaration</em> and only a <em>declaration</em> of a variable is by adding the <code>extern</code> keyword: <code>extern int varfoo;</code> is a <em>declaration</em></p>\n<hr>\n<blockquote>\n<p id=\"so_12146211_12146246_0\">3.1 [basic.def]/2 A declaration is a definition unless it declares a function without specifying the function\u2019s body (8.4), it contains the extern specifier (7.1.1) or a linkage-specification25 (7.5) and neither an initializer nor a function body [...]</p>\n</blockquote>\n</hr>", "LastEditorUserId": "36565", "LastActivityDate": "2012-08-27T17:13:18.820", "Score": "8", "CreationDate": "2012-08-27T17:01:10.973", "ParentId": "12146211", "CommentCount": "31", "OwnerUserId": "36565", "LastEditDate": "2012-08-27T17:13:18.820"}, "12218292": {"Id": "12218292", "PostTypeId": "2", "Body": "<p>Another way to think about it is that when you do int varfoo memory is allocated to hold the variable so it is both a definition and a declaration, when you do int foo() the function is declared but not defined so in a way the memory is not allocated. For functions the linkage is external by default so removing it doesn't matter but for the variable, if you say extern int varfoo the compiler will not allocate memory for it --it will assume that the variable is defined somewhere else.</p>\n", "LastActivityDate": "2012-08-31T15:21:24.710", "CommentCount": "0", "CreationDate": "2012-08-31T15:21:24.710", "ParentId": "12146211", "Score": "0", "OwnerUserId": "1639074"}, "bq_ids": {"n4140": {"so_12146211_12146246_0": {"length": 13, "quality": 0.7222222222222222, "section_id": 7034}}, "n3337": {"so_12146211_12146246_0": {"length": 13, "quality": 0.7222222222222222, "section_id": 6780}}, "n4659": {"so_12146211_12146246_0": {"length": 13, "quality": 0.7222222222222222, "section_id": 8531}}}, "21811557": {"Id": "21811557", "PostTypeId": "2", "Body": "<p>I know this might be late, but I hope this helps in some way. Check the link below and it ll give an idea of what extern is and how it works. </p>\n<pre><code>http://www.geeksforgeeks.org/understanding-extern-keyword-in-c/\n</code></pre>\n<p>Thank you</p>\n", "LastActivityDate": "2014-02-16T13:13:08.663", "CommentCount": "0", "CreationDate": "2014-02-16T13:13:08.663", "ParentId": "12146211", "Score": "0", "OwnerUserId": "1889368"}, "12146239": {"Id": "12146239", "PostTypeId": "2", "Body": "<p>When you remove the <code>extern</code> from <code>extern void funcfoo();</code> you are forward declaring it so you're code below will know what <code>funcfoo()</code> is.  If you were to do that to a variable, you would actually be instantiating it and would conflict with your other file. Hence the <code>extern</code> is saying \"it exists, trust me ;)\" that it gets resolved from your other file.</p>\n", "LastActivityDate": "2012-08-27T17:00:43.687", "CommentCount": "0", "CreationDate": "2012-08-27T17:00:43.687", "ParentId": "12146211", "Score": "3", "OwnerUserId": "1364836"}});