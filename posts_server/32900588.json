post_cb({"32900935": {"ParentId": "32900588", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>From [temp.explicit] / 11</p>\n<blockquote>\n<p id=\"so_32900588_32900935_0\">If an entity is the subject of both an explicit instantiation declaration and an explicit instantiation definition in the same translation unit, the definition shall follow the declaration.</p>\n</blockquote>\n<p>GCC should be giving an error for the first example too.</p>\n<p>Related <a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=38677\" rel=\"nofollow\">bug</a> from 2008, GCC seems to have problems detecting the error with classes, the following is also missed</p>\n<pre><code>template &lt;typename T&gt; class f {};\n\ntemplate class f&lt;int&gt;;\nextern template class f&lt;int&gt;;\n\nint main() {}\n</code></pre>\n", "OwnerUserId": "657267", "LastEditorUserId": "657267", "LastEditDate": "2015-10-02T05:22:26.673", "Id": "32900935", "Score": "2", "CreationDate": "2015-10-02T05:15:43.937", "LastActivityDate": "2015-10-02T05:22:26.673"}, "bq_ids": {"n4140": {"so_32900588_32900935_0": {"section_id": 260, "quality": 1.0, "length": 15}}, "n3337": {"so_32900588_32900935_0": {"section_id": 251, "quality": 1.0, "length": 15}}, "n4659": {"so_32900588_32900935_0": {"section_id": 267, "quality": 1.0, "length": 15}}}, "32900588": {"CommentCount": "0", "ViewCount": "501", "CreationDate": "2015-10-02T04:32:50.957", "LastActivityDate": "2015-10-02T05:22:26.673", "Title": "When explicit template instantiation definition precedes explicit declaration, GCC and clang disagree", "AcceptedAnswerId": "32900935", "PostTypeId": "1", "Id": "32900588", "Score": "1", "Body": "<p>See the following code:</p>\n<pre><code>#include &lt;vector&gt;\n\ntemplate class std::vector&lt;int&gt;;\nextern template class std::vector&lt;int&gt;;\n\nint main() {}\n</code></pre>\n<p>While GCC 5.2 compiles fine, clang 3.6 gives the following error message:</p>\n<pre><code>main.cpp:4:28: error: explicit instantiation declaration (with 'extern') follows explicit instantiation definition (without 'extern')\nextern template class std::vector&lt;int&gt;\n                           ^\nmain.cpp:3:21: note: explicit instantiation definition is here\ntemplate class std::vector&lt;int&gt;\n                    ^\n1 error generated.\n</code></pre>\n<p>Still, for the following code</p>\n<pre><code>template &lt;typename T&gt;\nvoid f() {}\n\ntemplate void f&lt;int&gt;();\nextern template void f&lt;int&gt;();\n\nint main() {}\n</code></pre>\n<p>Both GCC and clang errored out. The message for GCC is</p>\n<pre><code>main.cpp:5:29: error: duplicate explicit instantiation of 'void f() [with T = int]' [-fpermissive]\n extern template void f&lt;int&gt;();\n</code></pre>\n<p>and the one for clang is</p>\n<pre><code>main.cpp:5:22: error: explicit instantiation declaration (with 'extern') follows explicit instantiation definition (without 'extern')\nextern template void f&lt;int&gt;();\n                     ^\nmain.cpp:4:15: note: explicit instantiation definition is here\ntemplate void f&lt;int&gt;();\n              ^\n1 error generated.\n</code></pre>\n<p>What's going on with the two guys? Does the standard forbid an explicit template instantiation declaration to be preceded by an explicit definition? It makes little sense to me. After all, what harm could it be to define first and then declare? Just think about the case with non-template functions.</p>\n", "Tags": "<c++><templates><c++11><language-lawyer><explicit-instantiation>", "OwnerUserId": "1348273", "AnswerCount": "1"}});