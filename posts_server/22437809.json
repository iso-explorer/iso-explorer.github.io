post_cb({"22437836": {"ParentId": "22437809", "PostTypeId": "2", "CommentCount": "6", "Body": "<p>No and no.</p>\n<p>When in function arguments, they are the same, the compiler treats the argument <code>double v[5]</code> as a pointer. The size <code>5</code> is ignored, it's at most a signal for the programmer.</p>\n<blockquote>\n<h3>C++ 11 \u00a78.3.5 Functions <em>Section 3</em></h3>\n<p id=\"so_22437809_22437836_0\">[ ... ] After determining the type of each parameter, any parameter of type \u201carray of <code>T</code>\u201d or \u201cfunction returning <code>T</code>\u201d is adjusted to be \u201cpointer to <code>T</code>\u201d or \u201cpointer to function returning <code>T</code>,\u201d respectively.</p>\n</blockquote>\n", "OwnerUserId": "1009479", "LastEditorUserId": "1009479", "LastEditDate": "2014-03-17T04:51:11.473", "Id": "22437836", "Score": "4", "CreationDate": "2014-03-16T14:02:10.323", "LastActivityDate": "2014-03-17T04:51:11.473"}, "22437939": {"ParentId": "22437809", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Arrays when declared as parameter types, decay to the pointer types. In your example,</p>\n<pre><code>void method(double v[5]);\n</code></pre>\n<p>Here <code>5</code> doesn't play any role at all, it is so <em>insignificant</em> that you <em>may omit</em> it altogether, and write this instead:</p>\n<pre><code>void method(double v[]);\n</code></pre>\n<p>which is exactly same as the previous declaration. Since it decays into pointer, so the above two are exactly same as:</p>\n<pre><code>void method(double *v); //because array decays to pointer, anyway\n</code></pre>\n<p>That is, all the following are declarations of the same function:</p>\n<pre><code>void method(double v[5]); //ok : declaration \nvoid method(double v[]);  //ok : redeclaration of the above\nvoid method(double *v);   //ok : redeclaration of the above\n</code></pre>\n<p>ALL are exactly same. No difference at all.</p>\n<p>Note that the following is different however:</p>\n<pre><code>void f(double (&amp;v)[5]); \n</code></pre>\n<p>It declares a function which can take array of doubles of size <strong>exactly</strong> <code>5</code>. If you pass array of any other size (or if you pass pointers), it will give compilation error!</p>\n", "OwnerUserId": "415784", "LastEditorUserId": "415784", "LastEditDate": "2014-03-16T14:17:26.810", "Id": "22437939", "Score": "8", "CreationDate": "2014-03-16T14:11:46.530", "LastActivityDate": "2014-03-16T14:17:26.810"}, "bq_ids": {"n4140": {"so_22437809_22437836_0": {"section_id": 3241, "quality": 1.0, "length": 16}}, "n3337": {"so_22437809_22437836_0": {"section_id": 3114, "quality": 1.0, "length": 16}}, "n4659": {"so_22437809_22437836_0": {"section_id": 3997, "quality": 0.75, "length": 12}}}, "22437809": {"CommentCount": "0", "ViewCount": "107", "PostTypeId": "1", "LastEditorUserId": "924313", "CreationDate": "2014-03-16T14:00:11.940", "LastActivityDate": "2014-03-17T04:51:11.473", "Title": "Is there a difference between a pointer parameter and an array parameter?", "AcceptedAnswerId": "22437939", "LastEditDate": "2014-03-16T14:07:07.673", "Id": "22437809", "Score": "5", "Body": "<p><code>void method(double *v)</code></p>\n<p><code>void method(double v[5])</code></p>\n<p>Is there any difference between these two?</p>\n<p>Is the second one more specific, as in <code>v</code> being constrained to 5 elements in length?</p>\n", "Tags": "<c++><arrays><pointers><types>", "OwnerUserId": "1136700", "AnswerCount": "2"}});