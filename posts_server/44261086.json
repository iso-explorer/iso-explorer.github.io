post_cb({"bq_ids": {"n4140": {"so_44261086_44262043_0": {"length": 49, "quality": 0.98, "section_id": 7192}}, "n3337": {"so_44261086_44262043_0": {"length": 49, "quality": 0.98, "section_id": 6936}}, "n4659": {"so_44261086_44262043_0": {"length": 49, "quality": 0.98, "section_id": 8701}}}, "44261086": {"ViewCount": "96", "Body": "<p>Is there a way to make a destructor of a class NOT call the destructor of one of the class members and/or NOT call the destructor of its base class?</p>\n<p>In case this is not possible, is creating certain class members with placement-new and destructing (/not-destructing) them manually a possible workaround? Thanks!</p>\n<p>EDIT:\nThe reason I need this: Class C owns object M. M has a non-trivial destructor. C is friend of M and manages M in a way that there is no need to call M's destructor. It is OK to call it but it means performance overhead. (it's a problem in this case.)\nI was thinking to make an a derived class from M that has a destructor that does nothing, but then that would still call the destructor of the base.</p>\n", "AcceptedAnswerId": "44261736", "Title": "C++ Possible to make a destructor NOT call the destructor of class members and the destructor of the base class?", "CreationDate": "2017-05-30T11:30:38.670", "Id": "44261086", "CommentCount": "12", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2017-05-30T11:45:24.877", "LastEditorUserId": "8038490", "LastActivityDate": "2017-05-30T12:17:20.873", "Score": "-2", "OwnerUserId": "8038490", "Tags": "<c++>", "AnswerCount": "2"}, "44261736": {"Id": "44261736", "PostTypeId": "2", "Body": "<p>At construction time, C++ ensures that the subclasses contructors are first called, then the members are contructed, and finally the appropriate constructor is applied. At destruction time the symetric is done.</p>\n<p>That means that you cannot prevent the application of a base class destructor, nor of any member constructor, <strong>as soon as the object is destructed</strong>. If you want to only destruct some, you must find a way to not destruct the object (just use a raw pointer...) and manually call destructors on what you want. But you certainly do not want to do that!</p>\n<p>C++ is very confident on the programmer skills, so it is easy to write a program invoking undefined behaviour. If you find yourself trying to subvert the C++ compiler to not call the destructor of a base class or of a member, you have a major problem. The <em>member</em> you do not want to destroy should not be a member but more probably a pointer (raw or shared) or a reference to an external object that will have its own lifetime management. And the <em>base class</em> should probably also be a pointer or reference to an external object, and here again the lifetime can (and should) be managed outside of the class.</p>\n", "LastActivityDate": "2017-05-30T12:02:13.600", "CommentCount": "0", "CreationDate": "2017-05-30T12:02:13.600", "ParentId": "44261086", "Score": "3", "OwnerUserId": "3545273"}, "44262043": {"Id": "44262043", "PostTypeId": "2", "Body": "<p>If the destructor has observable side-effects, then it would be undefined behaviour to end the lifetime of the object without invoking the destructor. This is covered in C++14 [basic.life]/4:</p>\n<blockquote>\n<p id=\"so_44261086_44262043_0\">A program may end the lifetime of any object by reusing the storage which the object occupies or by explicitly calling the destructor for an object of a class type with a non-trivial destructor. For an object of a class type with a non-trivial destructor, the program is not required to call the destructor explicitly before the storage which the object occupies is reused or released; however, if there is no explicit call to the destructor or if a delete-expression is not used to release the storage, the destructor shall not be implicitly called and any program that depends on the side effects produced by the destructor has undefined behavior.</p>\n</blockquote>\n<p>So, there is no way to get around it. Perhaps you could redesign your code so that the destructor doesn't execute any unnecessary statements, or something.</p>\n", "LastActivityDate": "2017-05-30T12:17:20.873", "CommentCount": "0", "CreationDate": "2017-05-30T12:17:20.873", "ParentId": "44261086", "Score": "1", "OwnerUserId": "1505939"}});