post_cb({"27868796": {"ParentId": "27844971", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>A couple of things are going on here. First, the <code>{...}</code> syntax prohibits implicit narrowing conversions. So the easy fix is to change curly brackets to parentheses:</p>\n<pre><code>vec3&lt;T&gt; operator-(const vec3&lt;T&gt; &amp;other) { \n  return vec3&lt;T&gt;( x - other.x, y - other.y, z - other.z ); \n}\n</code></pre>\n<p>The second thing going on is, \"eh? char minus a char is a char, what is the problem?!\" And the answer here is that C/C++ want to use <em>natural size</em> for arithmetic operations. That is why you see the <code>(int)</code> cast in your error message. <a href=\"https://stackoverflow.com/a/24372323/841830\">Here is a good explanation</a> of why it does that (just in case that StackOverflow answer ever disappears, he's quoting 6.3.1.1 of the C11 standard).</p>\n<p>So, the other way to fix your code is:</p>\n<pre><code>vec3&lt;T&gt; operator-(const vec3&lt;T&gt; &amp;other) { \n  return vec3&lt;T&gt;{\n    static_cast&lt;char&gt;(x - other.x),\n    static_cast&lt;char&gt;(y - other.y),\n    static_cast&lt;char&gt;(z - other.z)\n    };\n}\n</code></pre>\n<p>By the way, item 7 in Effective Modern C++ convinced me that there are times when <code>()</code> is better to initialize with, and there are times when <code>{}</code> is better. Sometimes you have to just shrug and use the other one.</p>\n", "OwnerUserId": "841830", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:25:29.800", "Id": "27868796", "Score": "4", "CreationDate": "2015-01-09T20:34:32.427", "LastActivityDate": "2015-01-09T20:34:32.427"}, "27877127": {"ParentId": "27844971", "CommentCount": "0", "Body": "<p>First, why narrowing? That comes from \u00a75/10:</p>\n<blockquote>\n<p id=\"so_27844971_27877127_0\">Many binary operators that expect operands of arithmetic or enumeration type cause conversions and yield result types in a similar way. The purpose is to yield a common type, which is also the type of the result. This pattern is called the <em>usual arithmetic conversions</em>, which are defined as follows:</p>\n<p id=\"so_27844971_27877127_1\">\u2014 [..]</p>\n<p id=\"so_27844971_27877127_2\">\u2014 Otherwise, the integral promotions (4.5) shall be performed on both operands.</p>\n</blockquote>\n<p>where the integral promotion is defined in 4.5/1:</p>\n<blockquote>\n<p id=\"so_27844971_27877127_3\">A prvalue of an integer type other than <code>bool</code>, <code>char16_t</code>, <code>char32_t</code>, or <code>wchar_t</code> whose integer conversion rank (4.13) is less than the rank of <code>int</code> can be converted to a prvalue of type <code>int</code> if <code>int</code> can represent all the values of the source type; otherwise, the source prvalue can be converted to a prvalue of type <code>unsigned int</code>.</p>\n</blockquote>\n<p>In our case then, we have <code>decltype(char + char)</code> is <code>int</code> because <code>char</code>'s conversion rank less than <code>int</code> so both are promoted to <code>int</code> before the call to <code>operator+</code>. Now, we have <code>int</code>s that we're passing to a constructor that takes <code>char</code>s. By definition (\u00a78.5.4/7, specifically 7.4):</p>\n<blockquote>\n<p id=\"so_27844971_27877127_4\">A <em>narrowing conversion</em> is an implicit conversion</p>\n<p id=\"so_27844971_27877127_5\">(7.4) \u2014 from an integer type or unscoped enumeration type to an integer type that cannot represent all the values of the original type, except where the source is a constant expression whose value after integral promotions will fit into the target type.</p>\n</blockquote>\n<p>which is explicitly prohibited in list-initialization specifically as per \u00a78.5.4/3 (emphasis mine, the \"see below\" actually refers to what I just copied above):</p>\n<blockquote>\n<p id=\"so_27844971_27877127_6\">List-initialization of an object or reference of type <code>T</code> is defined as follows</p>\n<p id=\"so_27844971_27877127_7\">\u2014 [..]</p>\n<p id=\"so_27844971_27877127_8\">\u2014 Otherwise, if <code>T</code> is a class type, constructors are considered. The applicable constructors are enumerated and the best one is chosen through overload resolution (13.3, 13.3.1.7). <strong>If a narrowing conversion (see below) is required to convert any of the arguments, the program is ill-formed</strong>. [...]</p>\n</blockquote>\n<p>This is why your <code>vec3&lt;T&gt;{int, int, int}</code> gives you a warning: the program is ill-formed due to integer promotion requiring a narrowing conversion on all the expressions. Now, the statement about \"ill-formed\" specifically arises only in the context of list-initialization. This is why if you initialize your vector without <code>{}s</code>, you do not see that warning:</p>\n<pre><code>vec3&lt;T&gt; operator-(const vec3&lt;T&gt; &amp;other) { \n    // totally OK: implicit conversion from int --&gt; char is allowed here\n    return vec3&lt;T&gt;( x - other.x, y - other.y, z - other.z );\n}\n</code></pre>\n<p>As to solving this problem - just calling the constructor without list-initialization is probably the simplest solution. Alternatively, you can continue to use list-initialization and just template your constructor:</p>\n<pre><code>template &lt;typename A, typename B, typename C&gt;\nvec3(A xx, B yy, C zz)\n: x(xx) // note these all have to be ()s and not {}s for the same reason\n, y(yy)\n, z(yy)\n{ } \n</code></pre>\n", "OwnerUserId": "2069064", "PostTypeId": "2", "Id": "27877127", "Score": "11", "CreationDate": "2015-01-10T14:12:48.350", "LastActivityDate": "2015-01-10T14:12:48.350"}, "27844971": {"CommentCount": "3", "AcceptedAnswerId": "27877127", "PostTypeId": "1", "LastEditorUserId": "841830", "CreationDate": "2015-01-08T16:30:48.503", "LastActivityDate": "2015-01-10T14:12:48.350", "LastEditDate": "2015-01-09T21:01:06.677", "ViewCount": "15110", "FavoriteCount": "1", "Title": "warning: narrowing conversion C++11", "Id": "27844971", "Score": "13", "Body": "<p>g++ 4.9.0\n-O2 -std=c++11</p>\n<pre><code>template&lt;class T&gt;\nstruct vec3 {\n    T x, y, z;\n    vec3() = default;\n    vec3(const vec3&lt;T&gt; &amp;other) = default;\n    vec3(T xx, T yy, T zz) { x = xx; y = yy; z = zz; }\n    vec3&lt;T&gt; operator-(const vec3&lt;T&gt; &amp;other) { \n      return vec3&lt;T&gt;{ x - other.x, y - other.y, z - other.z }; \n    }\n};\n\nint main() {\n    vec3&lt;char&gt; pos{ 0, 0, 0 };\n    vec3&lt;char&gt; newPos{ 0, 0, 0 };\n    auto p = pos - newPos;\n\n    return 0;\n}\n</code></pre>\n<p>I get the warning : </p>\n<pre><code>!!warning: narrowing conversion of \u2018(((int)((vec3&lt;char&gt;*)this)-&gt;vec3&lt;char&gt;::x) - ((int)other.vec3&lt;char&gt;::x))\u2019 from \u2018int\u2019 to \u2018char\u2019 inside { } [-Wnarrowing]\n</code></pre>\n<p>But if I do it with <code>(...)</code> insted of <code>{...}</code> inside the <code>operator-</code> function the warning disappears. Why?</p>\n", "Tags": "<c++><templates><c++11><narrowing>", "OwnerUserId": "305160", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_27844971_27877127_8": {"section_id": 3325, "quality": 0.875, "length": 21}, "so_27844971_27877127_2": {"section_id": 5943, "quality": 1.0, "length": 6}, "so_27844971_27877127_6": {"section_id": 3325, "quality": 1.0, "length": 6}, "so_27844971_27877127_0": {"section_id": 5943, "quality": 0.9032258064516129, "length": 28}, "so_27844971_27877127_3": {"section_id": 21, "quality": 0.9743589743589743, "length": 38}, "so_27844971_27877127_5": {"section_id": 3329, "quality": 1.0, "length": 28}}, "n3337": {"so_27844971_27877127_8": {"section_id": 3195, "quality": 0.875, "length": 21}, "so_27844971_27877127_2": {"section_id": 5714, "quality": 1.0, "length": 6}, "so_27844971_27877127_6": {"section_id": 3195, "quality": 1.0, "length": 6}, "so_27844971_27877127_0": {"section_id": 5714, "quality": 0.9032258064516129, "length": 28}, "so_27844971_27877127_3": {"section_id": 18, "quality": 0.9743589743589743, "length": 38}, "so_27844971_27877127_5": {"section_id": 3199, "quality": 0.8928571428571429, "length": 25}}, "n4659": {"so_27844971_27877127_6": {"section_id": 4091, "quality": 1.0, "length": 6}, "so_27844971_27877127_2": {"section_id": 7428, "quality": 1.0, "length": 6}, "so_27844971_27877127_8": {"section_id": 4091, "quality": 0.875, "length": 21}, "so_27844971_27877127_5": {"section_id": 4095, "quality": 1.0, "length": 28}, "so_27844971_27877127_3": {"section_id": 21, "quality": 0.9743589743589743, "length": 38}, "so_27844971_27877127_0": {"section_id": 7428, "quality": 0.9032258064516129, "length": 28}}}});