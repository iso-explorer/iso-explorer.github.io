post_cb({"bq_ids": {"n4140": {"so_45605862_49039981_1": {"length": 8, "quality": 0.8888888888888888, "section_id": 6857}}, "n3337": {"so_45605862_49039981_1": {"length": 8, "quality": 0.8888888888888888, "section_id": 6603}}, "n4659": {"so_45605862_49039981_1": {"length": 8, "quality": 0.8888888888888888, "section_id": 8349}}}, "45606067": {"Id": "45606067", "PostTypeId": "2", "Body": "<p>These overloads are used by placement new. This is an expression that creates an object at a memory location, but doesn't allocate space for it. For instance, in this toy example:</p>\n<pre><code>void foo() {\n    void *raw = malloc(sizeof(int));\n    int *pint = new(raw) int(10);\n\n    pint-&gt;~int();\n    free(raw);\n}\n</code></pre>\n<p>This illustrates that if we need to create an object in memory allocated by something that is not the C++ standard library (in this case, the C allocation functions), special syntax is used to create an object at that location.</p>\n<p>The placement operator new accepts the address, and returns it unchanged. Thus the new expression just creates an object there. Naturally, we cannot call delete to free said object and memory, we must do an explicit destructor call, followed by the correct memory deallocation function.</p>\n", "LastActivityDate": "2017-08-10T06:30:36.080", "Score": "4", "CreationDate": "2017-08-10T06:30:36.080", "ParentId": "45605862", "CommentCount": "1", "OwnerUserId": "817643"}, "45605862": {"ViewCount": "87", "Body": "<p>I am in need to write / overload / override default C++ new operator. I found this below <a href=\"http://en.cppreference.com/w/cpp/memory/new/operator_new\" rel=\"nofollow noreferrer\">information</a> -</p>\n<pre><code>non-allocating placement allocation functions\nvoid* operator new  ( std::size_t count, void* ptr );\n(9) \nvoid* operator new[]( std::size_t count, void* ptr );\n(10)    \n</code></pre>\n<p>As per documentation it state -</p>\n<pre><code>Called by the standard single-object placement new expression. The standard library implementation performs no action and returns ptr unmodified.\n</code></pre>\n<p>I am not able to clear myself by what is meant by \"<strong>non-allocating placement allocation functions</strong>\"?</p>\n", "AcceptedAnswerId": "45606067", "Title": "Overriding new operator - non-allocating placement allocation functions", "CreationDate": "2017-08-10T06:19:38.697", "Id": "45605862", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2018-02-28T22:50:57.490", "Score": "0", "OwnerUserId": "304974", "Tags": "<c++>", "AnswerCount": "3"}, "49039981": {"Id": "49039981", "PostTypeId": "2", "Body": "<p>To answer the question implied in your title:</p>\n<p>It is not permitted to supply your own replacement function for the non-allocating forms of <code>operator new</code>. This is covered in the standard (N4659):</p>\n<blockquote>\n<p id=\"so_45605862_49039981_0\"><strong>Non-allocating forms</strong> [new.delete.placement]</p>\n<p id=\"so_45605862_49039981_1\">These functions are reserved; a C++ program may not define functions that displace the versions in the C++ standard library.</p>\n</blockquote>\n<p>You can only replace the forms of <code>operator new</code> which are listed as <em>Replacable</em> under the section of the Standard labelled [new.delete].</p>\n", "LastActivityDate": "2018-02-28T22:50:57.490", "Score": "0", "CreationDate": "2018-02-28T22:50:57.490", "ParentId": "45605862", "CommentCount": "0", "OwnerUserId": "1505939"}, "45605959": {"Id": "45605959", "PostTypeId": "2", "Body": "<p><em>Non-allocating placement allocation function</em> is a form of <code>new</code> that doesn't allocate memory, but rather constructs an object in pre-allocated memory.</p>\n<p>See <a href=\"https://stackoverflow.com/a/222578/8414561\">this answer</a> for more details.</p>\n", "LastActivityDate": "2017-08-10T06:24:50.317", "Score": "2", "CreationDate": "2017-08-10T06:24:50.317", "ParentId": "45605862", "CommentCount": "0", "OwnerUserId": "8414561"}});