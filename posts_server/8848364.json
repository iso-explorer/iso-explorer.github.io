post_cb({"bq_ids": {"n4140": {"so_8848364_8849453_0": {"length": 26, "quality": 0.7878787878787878, "section_id": 6074}}, "n3337": {"so_8848364_8849453_0": {"length": 26, "quality": 0.7878787878787878, "section_id": 5842}}, "n4659": {"so_8848364_8849453_0": {"length": 19, "quality": 0.5757575757575758, "section_id": 7570}}}, "8848477": {"Id": "8848477", "PostTypeId": "2", "Body": "<p>The first is ok</p>\n<pre><code>*++p1 = *p2++ // p1++; *p1 = *p2; p2++;\n</code></pre>\n<p>the second is UB with C++ because you are modifying what is pointed by <code>p1</code> twice (once because of increment and once because of assignment) and there are no sequence points separating the two side effects.</p>\n<p>With C++0x rules things are different and more complex to explain and to understand. If you write intentionally expressions like the second one, if it's not for a code golf competition and if you are working for me then consider yourself fired (even if that is legal in C++0x).</p>\n<p>I don't know if it is legal in C++0x and I don't want to know. I've too few neurons to waste them this way.</p>\n", "LastEditorUserId": "320726", "LastActivityDate": "2012-01-13T10:47:32.663", "Score": "9", "CreationDate": "2012-01-13T09:38:57.720", "ParentId": "8848364", "CommentCount": "5", "OwnerUserId": "320726", "LastEditDate": "2012-01-13T10:47:32.663"}, "8848364": {"ViewCount": "197", "Body": "<p>Please, explain why this code is correct or why not:\nIn my opinion, line ++*p1 = *p2++ has undefined behaviour, because p1 is dereferenced first and then incrementing.</p>\n<pre><code>int main()\n{\n   char a[] = \"Hello\";\n   char b[] = \"World\";\n\n   char* p1 = a;\n   char* p2 = b;\n\n   //*++p1 = *p2++; // is this OK?\n   ++*p1 = *p2++; // is this OK? Or this is UB?\n\n   std::cout &lt;&lt; a &lt;&lt; \"\\n\" &lt;&lt; b;\n\n   return 0;\n}\n</code></pre>\n", "AcceptedAnswerId": "8848477", "Title": "Is this undefined behaviour and why?", "CreationDate": "2012-01-13T09:29:27.567", "Id": "8848364", "CommentCount": "5", "LastEditDate": "2012-01-13T10:09:40.100", "PostTypeId": "1", "LastEditorUserId": "461597", "LastActivityDate": "2012-01-14T02:07:46.643", "Score": "2", "OwnerUserId": "1147349", "Tags": "<c++>", "AnswerCount": "2"}, "8849453": {"Id": "8849453", "PostTypeId": "2", "Body": "<p>Neither is <strong>undefined behavior</strong>. And even neither is <strong>implementation defined</strong> or <strong>unspecified</strong>. (All three terms are different things.)</p>\n<p>These two lines are both well defined but they do different things.</p>\n<pre><code>*++p1 = *p2++;\n</code></pre>\n<p>is equivalent to</p>\n<pre><code>_T1* _p1 = ++p1;\nT2_* p2_ = p2++;\n*_p1 = *p2_;\n</code></pre>\n<p>And</p>\n<pre><code>++*p1 = *p2++;\n</code></pre>\n<p>is equivalent to</p>\n<pre><code>T1&amp; x = *p1;\n__T1_&amp; y = ++x;\nT2_* p2_ = p2++;\ny = *p2_;\n</code></pre>\n<p>Where</p>\n<ul>\n<li><code>T1&amp;</code> is type of <code>*p1</code> expression,</li>\n<li><code>_T1*</code> is type of <code>++p1</code> expression,</li>\n<li><code>T2_*</code> is type of <code>p2++</code> expression,</li>\n<li><p><code>__T1_&amp;</code> is type of <code>++(*p1)</code> expression,</p>\n<p>i.e. all <code>T1/_T1/__T1_/T2_</code> are <code>char</code> in your case.</p></li>\n</ul>\n<p>Since <code>++x</code> (for C++ native types) return reference to <code>x</code> in your case <code>x</code> and <code>y</code> are the same reference (i.e. <code>*p1</code>) - but it might not be the case if <code>T1</code> would be some custom type with overloaded <code>operator++()</code>.</p>\n<p><strong>ADD:</strong></p>\n<p>Obviously incrementing value and then assign to it is totally pointless.</p>\n<p>And yes - like other people already said just don't write the code you have such questions about. Write what is clear to you and supposed to be clear to the readers.</p>\n<p><strong>ADD2:</strong></p>\n<p>To clarify the disputed points I'll quote the standard.</p>\n<p>ISO/IEC 14882-2003 5.3.2:</p>\n<blockquote id=\"so_8848364_8849453_0\">\n<ol>\n<li>The operand of prefix ++ is modified by adding 1, or set to true if it\n  is bool (this use is deprecated). The operand shall be a modifiable\n  lvalue. The type of the operand shall be an arithmetic type or a\n  pointer to a completely-defined object type. The value is the new\n  value of the operand; it is an lvalue. If x is not of type bool, the\n  expression ++x is equivalent to x+=1.</li>\n</ol>\n</blockquote>\n", "LastEditorUserId": "569852", "LastActivityDate": "2012-01-14T02:07:46.643", "Score": "1", "CreationDate": "2012-01-13T10:54:57.303", "ParentId": "8848364", "CommentCount": "6", "OwnerUserId": "569852", "LastEditDate": "2012-01-14T02:07:46.643"}});