post_cb({"19220387": {"Id": "19220387", "PostTypeId": "2", "Body": "<p>You shouldn't have to write the move constructor yourself; it should be automatically generated by the compiler in this case. However, VC11 doesn't implement this functionality and IIRC isn't going to be added until VS2013.</p>\n<p>Note that VC11 is complaining because the presence of a <code>std::unique_ptr</code> data member causes your copy constructor to be deleted. \u00a712.8p11 describes this process of deleting a class's copy constructor:</p>\n<blockquote>\n<p id=\"so_19220311_19220387_0\">An implicitly-declared copy/move constructor is an inline public\n  member of its class. <strong>A defaulted copy/move constructor for a class X\n  is defined as deleted (8.4.3) if X has</strong>:</p>\n<p id=\"so_19220311_19220387_1\">[...]</p>\n<p id=\"so_19220311_19220387_2\">\u2014 <strong>a non-static data member of\n  class type M</strong> (or array thereof) that <strong>cannot be copied</strong>/moved <strong>because\n  overload resolution (13.3), as applied to M\u2019s corresponding\n  constructor, results in</strong> an ambiguity or <strong>a function that is deleted</strong> or\n  inaccessible from the defaulted constructor,</p>\n<p id=\"so_19220311_19220387_3\">[...]</p>\n</blockquote>\n", "LastEditorUserId": "2491746", "LastActivityDate": "2013-10-07T09:27:37.243", "Score": "3", "CreationDate": "2013-10-07T08:44:35.837", "ParentId": "19220311", "CommentCount": "5", "LastEditDate": "2013-10-07T09:27:37.243", "OwnerUserId": "2491746"}, "bq_ids": {"n4140": {"so_19220311_19220387_2": {"length": 20, "quality": 0.8695652173913043, "section_id": 460}, "so_19220311_19220387_0": {"length": 13, "quality": 0.8666666666666667, "section_id": 460}}, "n3337": {"so_19220311_19220387_2": {"length": 22, "quality": 0.9565217391304348, "section_id": 451}, "so_19220311_19220387_0": {"length": 13, "quality": 0.8666666666666667, "section_id": 451}}, "n4659": {"so_19220311_19220387_2": {"length": 20, "quality": 0.8695652173913043, "section_id": 483}, "so_19220311_19220387_0": {"length": 13, "quality": 0.8666666666666667, "section_id": 483}}}, "19220311": {"ViewCount": "277", "Body": "<p>It seems that VC11 Update 2, requires a Move Constructor when pushing <code>unique_ptr</code>'s in an std::vector. Is this a documented behavior or a known Bug?</p>\n<pre><code>#include &lt; iostream&gt;\n#include &lt;memory&gt;\n#include &lt;vector&gt;\nstruct TEST\n{\n    std::unique_ptr&lt;int&gt; m_l;\n    TEST(\n        std::unique_ptr&lt;int&gt;&amp;&amp; l)\n    {\n        m_l = std::move(l);\n    };\n    //Move Contructor for Test\n    TEST(TEST&amp;&amp; o)\n    {\n        m_l = std::move(o.m_l);\n    }\n};\nvoid Bar()\n{\n    std::vector&lt;TEST&gt; vec;\n    std::unique_ptr&lt;int&gt; a(new int);\n    //Compiles fine without a Move Constructor\n    TEST(std::move(a));\n    //Requires a Move Contructor to compile\n    vec.push_back(\n        TEST(std::move(a)));\n}\nint main()\n{       \n    Bar();\n    return 0;\n} \n</code></pre>\n<p><strong>Note</strong></p>\n<p>I tried the above code sans the Move Constructor on <a href=\"http://ideone.com/QrTryx\" rel=\"nofollow\">IDEONE C++11</a> and it compiles fine.</p>\n", "Title": "Why do we need a move constructor for vector of unique_ptr?", "CreationDate": "2013-10-07T08:40:13.230", "LastActivityDate": "2013-10-07T09:27:37.243", "CommentCount": "7", "LastEditDate": "2013-10-07T09:14:10.807", "PostTypeId": "1", "LastEditorUserId": "977038", "Id": "19220311", "Score": "1", "OwnerUserId": "977038", "Tags": "<c++><visual-c++><c++11>", "AnswerCount": "1"}});