post_cb({"28359583": {"ParentId": "28359555", "CommentCount": "0", "Body": "<p>After <code>refVal</code> is initialized, whenever you mention its name, it behaves like the variable <code>ival</code> it refers to---its \"referenceness\" can no longer be detected (except by <code>decltype</code>). Therefore <code>refVal2</code> is simply initialized to refer to <code>ival</code> also.</p>\n<p>There is no type \"reference to reference to <code>int</code>\", <code>int&amp;(&amp;)</code>.</p>\n", "OwnerUserId": "481267", "PostTypeId": "2", "Id": "28359583", "Score": "9", "CreationDate": "2015-02-06T06:10:23.213", "LastActivityDate": "2015-02-06T06:10:23.213"}, "28363653": {"ParentId": "28359555", "CommentCount": "0", "Body": "<p>[dcl.ref]/p1:</p>\n<blockquote>\n<p id=\"so_28359555_28363653_0\">In a declaration <code>T D</code> where <code>D</code> has either of the forms</p>\n<pre><code>&amp; attribute-specifier-seq_opt D1\n&amp;&amp; attribute-specifier-seq_opt D1\n</code></pre>\n<p id=\"so_28359555_28363653_1\">and the type of the identifier in the declaration <code>T D1</code> is\n  \u201c<em>derived-declarator-type-list</em> <code>T</code>,\u201d then the type of the\n  identifier of <code>D</code> is \u201c<em>derived-declarator-type-list</em> reference to <code>T</code>.\u201d</p>\n</blockquote>\n<p>Hence, if the type of the identifier in the declaration <code>T D1</code> is \"reference to <code>T</code>\", then the type of the identifier in the declaration <code>T &amp; D1</code> would be \"reference to reference to <code>T</code>\". In other words, to attempt to declare a reference to reference, you'd do something like this:</p>\n<pre><code>int &amp; &amp; refref = refVal;\n</code></pre>\n<p>However, this code is ill-formed because of [dcl.ref]/p5:</p>\n<blockquote>\n<p id=\"so_28359555_28363653_2\">There shall be no references to references, no arrays of references,\n  and no pointers to references.</p>\n</blockquote>\n<p>There's a separate rule in the standard that says that if <code>TREF</code> is a typedef for <code>T&amp;</code>, then when you try to do <code>TREF&amp;</code>, instead of failing because of the rule above, the references would <em>collapse</em> so that <code>TREF&amp;</code> actually means <code>T&amp;</code>. A similar collapsing rule applies to <code>decltype(...)</code>. This rule does not apply when you are trying to declare a reference to reference directly.</p>\n", "OwnerUserId": "2756719", "PostTypeId": "2", "Id": "28363653", "Score": "0", "CreationDate": "2015-02-06T10:29:06.187", "LastActivityDate": "2015-02-06T10:29:06.187"}, "28359684": {"ParentId": "28359555", "CommentCount": "4", "Body": "<p>Your code</p>\n<pre><code>int &amp;refVal2=refVal; \n</code></pre>\n<p>is perfectly valid and fine.</p>\n<p>Illegal code would be:</p>\n<pre><code>int &amp;&amp;refVal2=refVal;\n</code></pre>\n", "OwnerUserId": "2180930", "PostTypeId": "2", "Id": "28359684", "Score": "0", "CreationDate": "2015-02-06T06:18:12.927", "LastActivityDate": "2015-02-06T06:18:12.927"}, "28359611": {"ParentId": "28359555", "CommentCount": "7", "Body": "<p>Your code does not have a reference to reference.</p>\n<pre><code>int &amp;refVal2\n</code></pre>\n<p>Clearly a reference to integer, is it not?</p>\n", "OwnerUserId": "1717300", "PostTypeId": "2", "Id": "28359611", "Score": "1", "CreationDate": "2015-02-06T06:12:34.277", "LastActivityDate": "2015-02-06T06:12:34.277"}, "28359555": {"CommentCount": "2", "ViewCount": "232", "PostTypeId": "1", "LastEditorUserId": "4535913", "CreationDate": "2015-02-06T06:08:04.090", "LastActivityDate": "2015-04-01T07:31:56.447", "Title": "IS reference to a reference illegal in C++\uff1f", "LastEditDate": "2015-02-06T06:13:05.763", "Id": "28359555", "Score": "4", "Body": "<pre><code>int main(){\nint ival=1024;\nint &amp;refVal=ival;\nint &amp;refVal2=refVal;\nreturn 0;\n}\n</code></pre>\n<p>C++ Primer(5th edition) says\n\"Because references are not objects, we may not define a reference to a reference.\"(Chinese 5th version says \"\u4e0d\u80fd\u5b9a\u4e49\u5f15\u7528\u7684\u5f15\u7528\".meaning can't define\na reference to a reference. )</p>\n<p>But I got the code above pass compilation.</p>\n<p>What's going on?</p>\n<p>Feel free to correct any errors(including my English skills)</p>\n", "Tags": "<c++><reference>", "OwnerUserId": "4535913", "AnswerCount": "5"}, "bq_ids": {"n4140": {"so_28359555_28363653_2": {"section_id": 3222, "quality": 1.0, "length": 7}, "so_28359555_28363653_1": {"section_id": 3228, "quality": 0.8888888888888888, "length": 8}, "so_28359555_28363653_0": {"section_id": 3218, "quality": 1.0, "length": 4}, "so_28359555_28359582_0": {"section_id": 6325, "quality": 0.5714285714285714, "length": 4}}, "n3337": {"so_28359555_28363653_2": {"section_id": 3096, "quality": 1.0, "length": 7}, "so_28359555_28363653_1": {"section_id": 3101, "quality": 0.8888888888888888, "length": 8}, "so_28359555_28363653_0": {"section_id": 3092, "quality": 1.0, "length": 4}, "so_28359555_28359582_0": {"section_id": 6082, "quality": 0.5714285714285714, "length": 4}}, "n4659": {"so_28359555_28363653_2": {"section_id": 3979, "quality": 1.0, "length": 7}, "so_28359555_28363653_1": {"section_id": 3975, "quality": 0.7777777777777778, "length": 7}, "so_28359555_28363653_0": {"section_id": 3975, "quality": 1.0, "length": 4}, "so_28359555_28359582_0": {"section_id": 7578, "quality": 0.5714285714285714, "length": 4}}}, "28359582": {"ParentId": "28359555", "PostTypeId": "2", "CommentCount": "2", "Body": "<blockquote>\n<p id=\"so_28359555_28359582_0\">\"Because references are not objects, we may not define a reference to a reference.\"</p>\n</blockquote>\n<p>Perhaps they meant to say:</p>\n<pre><code>int i = 10;\nint&amp; ref1 = i;\nint&amp;&amp; ref2 = ref1; // Not allowed.\n</code></pre>\n<p>Of course, in C++11, the symbol <code>&amp;&amp;</code> is used to define rvalue references.</p>\n<p>I think it's more illustrative to compare references and pointers to understand why references to references does not make sense.</p>\n<p><img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/yo66d.png\"/></p>\n", "OwnerUserId": "434551", "LastEditorUserId": "434551", "LastEditDate": "2015-02-06T16:33:32.337", "Id": "28359582", "Score": "1", "CreationDate": "2015-02-06T06:10:22.353", "LastActivityDate": "2015-02-06T16:33:32.337"}});