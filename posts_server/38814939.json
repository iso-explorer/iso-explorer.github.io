post_cb({"38814939": {"CommentCount": "0", "AcceptedAnswerId": "38815665", "PostTypeId": "1", "LastEditorUserId": "5507349", "CreationDate": "2016-08-07T14:09:06.720", "LastActivityDate": "2016-12-01T20:55:20.777", "LastEditDate": "2016-12-01T20:55:20.777", "ViewCount": "1001", "FavoriteCount": "1", "Title": "Why adding `const` makes the universal reference as rvalue", "Id": "38814939", "Score": "15", "Body": "<p>I have been reading about the universal references in Scott's last master piece about the c++11 and 14 with that being said despite an argument assigned to either lvalue or an rvalue type reference parameter there is something in between called universal reference which could deduced to either l/rvalue based on the type trait of an argument that passed . I could understand what makes the  parameter as an universal reference but the one thing that doesn't clear to me is why adding const to the type parameter <code>const T&amp;&amp; p</code> make the p as rvalue:</p>\n<pre><code>template&lt;typename T&gt;\nvoid f(T&amp;&amp; param); // param is an universal reference\n\ntemplate&lt;typename T&gt;\nvoid f(const T&amp;&amp; param); // param is an rvalue reference\n</code></pre>\n<p>Does the <code>const</code> do more than this when assigned to the reference parameter.</p>\n", "Tags": "<c++><templates><c++11><c++14><forwarding-reference>", "OwnerUserId": "5198101", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_38814939_38815665_0": {"section_id": 282, "quality": 0.5714285714285714, "length": 4}, "so_38814939_38815665_1": {"section_id": 304, "quality": 0.8484848484848485, "length": 28}}, "n3337": {"so_38814939_38815665_0": {"section_id": 273, "quality": 0.5714285714285714, "length": 4}, "so_38814939_38815665_1": {"section_id": 295, "quality": 0.8484848484848485, "length": 28}}, "n4659": {"so_38814939_38815665_0": {"section_id": 289, "quality": 0.5714285714285714, "length": 4}, "so_38814939_38815665_1": {"section_id": 311, "quality": 0.8787878787878788, "length": 29}}}, "38815665": {"ParentId": "38814939", "PostTypeId": "2", "CommentCount": "6", "CreationDate": "2016-08-07T15:27:51.927", "Score": "11", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T11:45:57.150", "Id": "38815665", "OwnerUserId": "819272", "Body": "<p>The official name is not universal reference, but <a href=\"https://stackoverflow.com/questions/33904462/whats-the-standard-official-name-for-universal-references\"><strong>forwarding reference</strong></a>. The <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/n4582.pdf\" rel=\"nofollow noreferrer\"><strong>Standard</strong></a> states that only rvalue references to <strong>cv-unqualified</strong> template parameters fall in this category:</p>\n<blockquote>\n<p id=\"so_38814939_38815665_0\"><strong>14.8.2.1 Deducing template arguments from a function call [temp.deduct.call]</strong></p>\n<p id=\"so_38814939_38815665_1\">3 If P is a cv-qualified type, the top level cv-qualifiers of P\u2019s type\n  are ignored for type deduction. If P is a reference type, the type\n  referred to by P is used for type deduction. <strong>A forwarding reference is\n  an rvalue reference to a cv-unqualified template parameter.</strong> If P is a\n  forwarding reference and the argument is an lvalue, the type \u201clvalue\n  reference to A\u201d is used in place of A for type deduction. [ Example:</p>\n<pre><code>template &lt;class T&gt; int f(T&amp;&amp; heisenreference);\ntemplate &lt;class T&gt; int g(const T&amp;&amp;);\nint i;\nint n1 = f(i); // calls f&lt;int&amp;&gt;(int&amp;)\nint n2 = f(0); // calls f&lt;int&gt;(int&amp;&amp;)\nint n3 = g(i); // error: would call g&lt;int&gt;(const int&amp;&amp;), which\n               // would bind an rvalue reference to an lvalue\n</code></pre>\n<p id=\"so_38814939_38815665_2\">\u2014 end example ]</p>\n</blockquote>\n<p>Allowing <code>const T&amp;&amp;</code> to behave as forwarding references, would make it impossible to overload a template function who takes only an rvalue reference as parameter.</p>\n<p><strong>Update</strong>: as @HowardHinnant mentions in the comments, <code>const T&amp;&amp;</code> does have its uses (see also <a href=\"https://stackoverflow.com/q/4938875/819272\"><strong>this Q&amp;A</strong></a>).</p>\n", "LastActivityDate": "2016-08-07T17:37:04.763"}});