post_cb({"8405690": {"ParentId": "8405390", "PostTypeId": "2", "CommentCount": "10", "CreationDate": "2011-12-06T19:34:35.063", "Score": "7", "LastEditorUserId": "593048", "LastEditDate": "2011-12-06T21:26:44.677", "Id": "8405690", "OwnerUserId": "593048", "Body": "<p>The standard does not forbid its usage within [basic.start.main], and, while forcing all implementations to support at least <code>int main() {/*...*/ }</code> and <code>int main(int argc, char* argv[]) {/*...*/}</code>, does not limit implementations to those two declarations (3.6.1, para. 2).</p>\n<p>From that in isolation, it would appear at the least that it is legal, though of course that relates only to function-declarations, not function-definitions.</p>\n<p>Reading on, [except.handle], paragraph 13 states the following: </p>\n<blockquote>\n<p id=\"so_8405390_8405690_0\">Exceptions thrown in destructors of objects with static storage\n  duration or in constructors of namespace-scope objects are not caught\n  by a function-try-block on main(). (15.3 para. 13)</p>\n</blockquote>\n<p>It makes specific mention of a <em>function-try-block</em> placed on <code>main()</code>, which strongly implies that such a structure is legal and has defined behavior. Adding in the information that <code>main()</code> is only special in its name and return type, and that implementations may not overload it to alter any behavior, makes a pretty strong case that it acts in a normal fashion except when specially noted such as in the above quote. In other words, <strong>yes, it is legal and well-defined.</strong></p>\n<p>The blog post I supplied in the first version of this answer actually does a good job of illustrating the rules given by the above blockquote, so I'll <a href=\"http://stupefydeveloper.blogspot.com/2008/10/c-function-try-catch-block.html\">retain the link to it</a>, even though it does not directly discuss the issue in the OP's question.</p>\n<p>Regarding a comment on the OP, you can issue return statements within a <em>function-try-block</em>, and [except.handle] has this to say:</p>\n<blockquote>\n<p id=\"so_8405390_8405690_1\">Flowing off the end of a function-try-block is equivalent to a return\n  with no value; this results in undefined behavior in a value-returning\n  function (6.6.3). (15.3 para. 15)</p>\n</blockquote>\n<p>If you're in a catch-block at the end of <code>main</code>, you're not going to flow over the function's body (which would be the try-block in this case), so the rule that main automatically calls <code>return 0;</code> on flowover doesn't apply. You need to return some <code>int</code> (quite possibly an error code) to keep from becoming undefined.</p>\n", "LastActivityDate": "2011-12-06T21:26:44.677"}, "8405546": {"ParentId": "8405390", "CommentCount": "2", "CreationDate": "2011-12-06T19:22:50.657", "OwnerUserId": "1053942", "PostTypeId": "2", "Id": "8405546", "Score": "0", "Body": "<p>I have tried it, it compiles, and it runs as expected. A peculiar formulation, but I don't think it breaks any rules.\nFor clarity (for yourself and future code mantainers), you could also rephrase it as:</p>\n<pre><code>int main() \n{\n    try {\n      throw 42;\n    }\n    catch( int /*...*/) {\n    }\n}\n</code></pre>\n", "LastActivityDate": "2011-12-06T19:22:50.657"}, "bq_ids": {"n4140": {"so_8405390_8405690_1": {"section_id": 3360, "quality": 0.8, "length": 12}, "so_8405390_8405690_0": {"section_id": 3358, "quality": 0.8666666666666667, "length": 13}}, "n3337": {"so_8405390_8405690_1": {"section_id": 3230, "quality": 0.8, "length": 12}, "so_8405390_8405690_0": {"section_id": 3228, "quality": 0.8666666666666667, "length": 13}}, "n4659": {"so_8405390_8405690_1": {"section_id": 4799, "quality": 0.5333333333333333, "length": 8}, "so_8405390_8405690_0": {"section_id": 4124, "quality": 0.8666666666666667, "length": 13}}}, "8405390": {"CommentCount": "12", "AcceptedAnswerId": "8405690", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2011-12-06T19:09:16.473", "LastActivityDate": "2011-12-06T21:26:44.677", "LastEditDate": "2017-05-23T11:48:32.887", "ViewCount": "2849", "FavoriteCount": "6", "Title": "function try catch syntax and main", "Id": "8405390", "Score": "15", "Body": "<p>A little known, but almost never used C++ feature is given a declaration:</p>\n<pre><code>void foo();\n</code></pre>\n<p>One possible, legal definition could be:</p>\n<pre><code>void foo() try {\n  throw 42;\n}\ncatch(...) {\n}\n</code></pre>\n<p>Here the <a href=\"https://stackoverflow.com/questions/6756931/difference-between-try-catch-syntax-for-function\">whole function implementation wrapped is within a <code>try</code>/<code>catch</code> pair</a>, which seems to be similar to allowing <a href=\"https://stackoverflow.com/questions/4212932/defining-a-function-with-different-signature\">this</a>.</p>\n<p>Is that legal to do for <code>int main()</code>? E.g.:</p>\n<pre><code>int main() try {\n  throw 42;\n}\ncatch(...) {\n}\n</code></pre>\n<p><a href=\"https://stackoverflow.com/questions/4207134/what-is-the-proper-declaration-of-main\">The rules for main</a>, n3290 \u00a7 3.6.1 mostly talk about what arguments it should take and what it returns - they don't seem to explicitly forbid it as they do with various other odd things (e.g. linkages) you might be tempted to try.</p>\n<p>Is this legal and well defined?</p>\n", "Tags": "<c++><exception-handling><main><language-lawyer>", "OwnerUserId": "168175", "AnswerCount": "2"}});