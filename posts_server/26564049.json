post_cb({"26564049": {"CommentCount": "6", "ViewCount": "155", "CreationDate": "2014-10-25T15:30:32.697", "LastActivityDate": "2014-10-25T16:29:15.463", "Title": "Extra typename keyword in template parameter list: is it valid or not?", "AcceptedAnswerId": "26564114", "PostTypeId": "1", "Id": "26564049", "Score": "5", "Body": "<p>The following code compiles successfully with <em>clang 3.5.0</em> and <em>g++ 4.9.0</em> (with <code>-Wall -Wextra -pedantic-errors</code> flags) under <a href=\"http://coliru.stacked-crooked.com/a/ed5542c3bacbc936\">C++03 (flag <code>-std=C++03</code>)</a>, <a href=\"http://coliru.stacked-crooked.com/a/5906c44aadfaa3a3\">C++11 (flag <code>-std=C++11</code>)</a>, and <a href=\"http://coliru.stacked-crooked.com/a/7aeaac50c6c04736\">C++14 (flag <code>-std=C++14</code>)</a>:</p>\n<pre><code>namespace N\n{\n    typedef int T;\n\n    enum E{};\n}\n\ntemplate &lt;typename N::T&gt;\nstruct ST{};\n\ntemplate &lt;typename N::E&gt;\nstruct SE{};\n\nint main()\n{\n}\n</code></pre>\n<p><strong>Is it valid to add extra <code>typename</code> keyword before a non-type template parameter declaration?</strong></p>\n<hr>\n<p>Note that the following code doesn't compile (as <a href=\"http://coliru.stacked-crooked.com/a/0092df757c74ca72\">C++03</a>, <a href=\"http://coliru.stacked-crooked.com/a/a2a95005e85182c1\">C++11</a>, and <a href=\"http://coliru.stacked-crooked.com/a/a49f96cc87377e55\">C++14</a> code):</p>\n<pre><code>typedef int T;\n\nenum E{};\n\ntemplate &lt;typename T t&gt;\nstruct ST{};\n\ntemplate &lt;typename E e&gt;\nstruct SE{};\n\nint main()\n{\n}\n</code></pre>\n<p>But the following one compiles fine again (<a href=\"http://coliru.stacked-crooked.com/a/08f4b661cd7379cb\">C++03</a>, <a href=\"http://coliru.stacked-crooked.com/a/cb166fe85447926a\">C++11</a>, and <a href=\"http://coliru.stacked-crooked.com/a/069a32bb1ca79559\">C++14</a>):</p>\n<pre><code>typedef int T;\n\nenum E{};\n\ntemplate &lt;typename ::T&gt;\nstruct ST{};\n\ntemplate &lt;typename ::E&gt;\nstruct SE{};\n\nint main()\n{\n}\n</code></pre>\n</hr>", "Tags": "<c++><templates><c++11><c++14><typename>", "OwnerUserId": "3043539", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_26564049_26564114_2": {"section_id": 73, "quality": 0.875, "length": 21}, "so_26564049_26564114_0": {"section_id": 170, "quality": 0.625, "length": 5}}, "n3337": {"so_26564049_26564114_2": {"section_id": 68, "quality": 0.875, "length": 21}, "so_26564049_26564114_0": {"section_id": 164, "quality": 0.625, "length": 5}}, "n4659": {"so_26564049_26564114_2": {"section_id": 75, "quality": 0.875, "length": 21}, "so_26564049_26564114_0": {"section_id": 175, "quality": 0.625, "length": 5}}}, "26564114": {"ParentId": "26564049", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>It is allowed, but only with qualified names:</p>\n<blockquote>\n<p id=\"so_26564049_26564114_0\"><em>typename-specifier:</em><br>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0<code>typename</code> <em>nested-name-specifier identifier</em><br> \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<code>typename</code> <em>nested-name-specifier</em>\n<code>template</code><em><sub>opt</sub> simple-template-id</em></br></br></p>\n</blockquote>\n<p>So <code>typename E</code> is wrong according to the grammar. <code>typename N::E</code> is not since the name is qualified. The third case, <code>typename ::E</code>, is fine since <code>::</code> is a valid nested-name-specifier.</p>\n<p>The C++03 standard specifies in [temp.res]/5 that</p>\n<blockquote>\n<p id=\"so_26564049_26564114_1\">The keyword <code>typename</code> shall be applied only to qualified names, but\n  those names need not be dependent.</p>\n</blockquote>\n<p>The C++11 standard states this nowhere explicitly but inside a note in [temp.names]/5:</p>\n<blockquote>\n<p id=\"so_26564049_26564114_2\">[ <em>Note:</em> As is the case with the <code>typename</code> prefix, the <code>template</code>\n  prefix is allowed in cases where it is not strictly necessary; i.e.,\n  when the <em>nested-name-specifier</em> or the expression on the left of the\n  <code>-&gt;</code> or <code>.</code> is not dependent on a <em>template-parameter</em>, or the use\n  does not appear in the scope of a template. <em>\u2014 end note</em> ]</p>\n</blockquote>\n<p>The same note exists in the exact same place in the C++14 standard.</p>\n", "OwnerUserId": "3647361", "LastEditorUserId": "3647361", "LastEditDate": "2014-10-25T16:29:15.463", "Id": "26564114", "Score": "6", "CreationDate": "2014-10-25T15:37:20.247", "LastActivityDate": "2014-10-25T16:29:15.463"}});