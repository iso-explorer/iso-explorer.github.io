post_cb({"bq_ids": {"n4140": {"so_18929006_18929072_5": {"length": 40, "quality": 0.8695652173913043, "section_id": 438}}, "n3337": {"so_18929006_18929072_5": {"length": 40, "quality": 0.8695652173913043, "section_id": 429}}, "n4659": {"so_18929006_18929072_5": {"length": 40, "quality": 0.8695652173913043, "section_id": 458}}}, "18929006": {"ViewCount": "323", "Body": "<p>If I define a structure that inherits from multiple other structures, how does the order that I list them in affect something like this:</p>\n<pre><code>struct D: C,B{\n    D(): B(), C(){...}\n};\n</code></pre>\n<p>Simple question, but thanks in advance!</p>\n", "AcceptedAnswerId": "18929072", "Title": "In what ways does C++ inheritance order affect a constructor?", "CreationDate": "2013-09-21T04:49:42.387", "Id": "18929006", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2013-09-21T05:17:28.773", "Score": "1", "OwnerUserId": "1628702", "Tags": "<c++><inheritance><inherited-constructors>", "AnswerCount": "1"}, "18929072": {"Id": "18929072", "PostTypeId": "2", "Body": "<p>The order of construction depends on the sequence of inheritance. Initialization order doesn't matter. GCC actually issues warning in this case.</p>\n<blockquote>\n<p id=\"so_18929006_18929072_0\">In constructor 'D::D()':</p>\n<p id=\"so_18929006_18929072_1\">main.cpp:16:17: warning: base 'B' will be initialized after\n  [-Wreorder]</p>\n<pre><code> D(): B(), C(){\n             ^\n</code></pre>\n<p id=\"so_18929006_18929072_2\">main.cpp:16:17: warning:   base 'C' [-Wreorder]</p>\n<p id=\"so_18929006_18929072_3\">main.cpp:16:5: warning:   when initialized here [-Wreorder]</p>\n<pre><code> D(): B(), C(){\n</code></pre>\n</blockquote>\n<p>It is clearly specified in the standard as well. From section 12.6.2 Initializing bases and members</p>\n<blockquote>\n<p id=\"so_18929006_18929072_4\">Initialization shall proceed in the following order:  </p>\n<p id=\"so_18929006_18929072_5\">\u2014 First, and only\n  for the constructor of the most derived class as described below,\n  virtual base classes shall be initialized in the order they appear on\n  a depth-first left-to-right traversal of the directed acyclic graph of\n  base classes, where \u201cleft-to-right\u201d is the order of appearance of the\n  base class names in the derived class base-specifier- list .<br>\n  \u2014 Then, <strong>direct base classes shall be initialized in declaration order as they\n  appear in the base-specifier-list (regardless of the order of the\n  mem-initializers).</strong></br></p>\n</blockquote>\n", "LastEditorUserId": "528724", "LastActivityDate": "2013-09-21T05:17:28.773", "Score": "1", "CreationDate": "2013-09-21T04:59:21.617", "ParentId": "18929006", "CommentCount": "0", "OwnerUserId": "528724", "LastEditDate": "2013-09-21T05:17:28.773"}});