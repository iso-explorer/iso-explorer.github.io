post_cb({"3319194": {"ParentId": "3314032", "CommentCount": "0", "CreationDate": "2010-07-23T14:39:05.823", "OwnerUserId": "363751", "PostTypeId": "2", "Id": "3319194", "Score": "3", "Body": "<p>As noted, one can #include a particular file more than once with different macro definitions active.  This can make it practical to achieve some effects that could not be practically achieved via any other means.</p>\n<p>As a simple example, on many embedded systems pointer indirection is very expensive compared to direct variable access.  Code which uses a lot of pointer indirection may very well be twice as large and slow as code which simply uses variables.  Consequently, if a particular routine is used with two sets of variables, in a scenario where one would usually pass in a pointer to a structure and then use the arrow operator, it may be far more efficient to simple put the routine in its own file (I normally use extension .i) which is #included once without macro _PASS2 defined, and a second time with.  That file can then #ifdef _PASS2/#else to define macros for all the variables that should be different on the two passes.  Even though the code gets generated twice, on some micros that will take less space than using the arrow operator with passed-in pointers.</p>\n", "LastActivityDate": "2010-07-23T14:39:05.823"}, "3314073": {"ParentId": "3314032", "CommentCount": "0", "CreationDate": "2010-07-22T22:38:48.533", "OwnerUserId": "90848", "PostTypeId": "2", "Id": "3314073", "Score": "3", "Body": "<p>No. The pre-processor is single-pass. It doesn't re-evaluate the macro expansions.</p>\n<p>What would this buy you, anyway? You can accomplish the same thing as your example by simply \"inlining\" the second macro into the first. eg:</p>\n<pre><code>#define MACRO(B) B+B\n\nvoid foo()\n{\n  int a = MACRO(5);\n}\n</code></pre>\n", "LastActivityDate": "2010-07-22T22:38:48.533"}, "3314056": {"ParentId": "3314032", "CommentCount": "0", "CreationDate": "2010-07-22T22:36:19.190", "OwnerUserId": "151292", "PostTypeId": "2", "Id": "3314056", "Score": "12", "Body": "<p>No.  Even if a macro expands into something that looks like a preprocessing directive, the expansion is not evaluated as a preprocessing directive.</p>\n", "LastActivityDate": "2010-07-22T22:36:19.190"}, "3314032": {"CommentCount": "0", "ViewCount": "19709", "PostTypeId": "1", "LastEditorUserId": "1257035", "CreationDate": "2010-07-22T22:32:58.010", "LastActivityDate": "2015-04-16T08:19:07.953", "Title": "Is there a way to do a #define inside of another #define?", "FavoriteCount": "6", "LastEditDate": "2015-04-16T08:19:07.953", "Id": "3314032", "Score": "31", "Body": "<p>I know that I am trying to shoot myself in the leg ;) However, it will allow me to make the rest (big amount) of code smaller and more readable. </p>\n<p>Is there any tricky way to create preprocessor macro inside of another preprocessor macro?</p>\n<p>Here is the example, what I am looking for. My real scenario is more complex</p>\n<pre><code>// That's what I want to do and surely C++ doesn't like it.\n#define MACROCREATER(B) #define MACRO##B B+B\n\nvoid foo()\n{\n MACROCREATOR(5) // This should create new macro (#define MACRO5 5+5)\n\n int a = MACRO5; // this will use new macro\n}\n</code></pre>\n", "Tags": "<c++><c-preprocessor>", "OwnerUserId": "399695", "AnswerCount": "6"}, "3376386": {"ParentId": "3314032", "CommentCount": "0", "CreationDate": "2010-07-31T01:20:42.643", "OwnerUserId": "246886", "PostTypeId": "2", "Id": "3376386", "Score": "5", "Body": "<p>As a supplement to the answers above, if you <em>really</em> wanted to pre-process a source file twice\u2014which is almost definitely <em>not</em> what you actually want to do\u2014you could always invoke your compiler like this:</p>\n<pre><code>g++ -E input.cpp | g++ -c -x c++ - -o output.o\n</code></pre>\n<p>That is, run the file through the preprocessor, then run the preprocessed output via pipe through a full compilation routine, including a second preprocessing step. In order for this to have a reasonably good chance of working, I'd imagine you'd have to be rather careful in how you defined and used your macros, and all in all it would most likely not be worth the trouble and increased build time.</p>\n<p>If you really want macros, use standard macro-based solutions. If you really want compile-time metaprogramming, use templates.</p>\n<p>On a slightly related note, this reminds me of the fact that raytracing language POV-Ray made heavy use of a fairly complex preprocessing language, with flow-control directives such as <code>#while</code> that allowed conditional repetition, compile-time calculations, and other such goodies. Would that it were so in C++, but it simply isn't, so we just do it another way.</p>\n", "LastActivityDate": "2010-07-31T01:20:42.643"}, "3315074": {"ParentId": "3314032", "CommentCount": "0", "CreationDate": "2010-07-23T02:53:50.317", "OwnerUserId": "269943", "PostTypeId": "2", "Id": "3315074", "Score": "36", "Body": "<p>The C++ Standard says (16.3.4.3): </p>\n<blockquote>\n<p id=\"so_3314032_3315074_0\">The resulting completely\n  macro-replaced preprocessing token\n  sequence [... of the macro expansion...] is not processed as a\n  preprocessing directive even if it\n  resembles one...</p>\n</blockquote>\n<p>So no, there is no 'official' way of achieving what you want with macros.</p>\n", "LastActivityDate": "2010-07-23T02:53:50.317"}, "bq_ids": {"n4140": {"so_3314032_3315074_0": {"section_id": 532, "quality": 0.8, "length": 12}}, "n3337": {"so_3314032_3315074_0": {"section_id": 523, "quality": 0.8, "length": 12}}, "n4659": {"so_3314032_3315074_0": {"section_id": 553, "quality": 0.8, "length": 12}}}, "3376314": {"ParentId": "3314032", "CommentCount": "0", "CreationDate": "2010-07-31T00:49:52.937", "OwnerUserId": "145876", "PostTypeId": "2", "Id": "3376314", "Score": "1", "Body": "<p>Take a look at m4. It is similar to cpp, but recursive and much more powerful. I've used m4 to create a structured language for assemblers, e.g.</p>\n<pre><code>  cmp r0, #0\n  if(eq)\n    mov r1, #0\n  else\n    add r1, #1\n  end\n</code></pre>\n<p>The \"if\", \"else\", and \"end\" are calls to m4 macros I wrote that generate jumps and labels, the rest is native assembly. In order to nest these if/else/end constructs, you need to do defines within a macro.</p>\n", "LastActivityDate": "2010-07-31T00:49:52.937"}});