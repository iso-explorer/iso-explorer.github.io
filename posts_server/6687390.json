post_cb({"bq_ids": {"n4140": {"so_6687390_6687496_1": {"length": 11, "quality": 1.0, "section_id": 5811}, "so_6687390_6687496_0": {"length": 18, "quality": 1.0, "section_id": 5810}, "so_6687390_6687496_2": {"length": 37, "quality": 0.925, "section_id": 5811}}, "n3337": {"so_6687390_6687496_1": {"length": 11, "quality": 1.0, "section_id": 5584}, "so_6687390_6687496_0": {"length": 18, "quality": 1.0, "section_id": 5583}, "so_6687390_6687496_2": {"length": 37, "quality": 0.925, "section_id": 5584}}, "n4659": {"so_6687390_6687496_1": {"length": 11, "quality": 1.0, "section_id": 7272}, "so_6687390_6687496_0": {"length": 18, "quality": 1.0, "section_id": 7271}, "so_6687390_6687496_2": {"length": 28, "quality": 0.7, "section_id": 7273}}}, "6687492": {"Id": "6687492", "PostTypeId": "2", "Body": "<p>Yes, the order of evaluation of function arguments is unspecified.</p>\n<p>For me, gcc 4.5.2 on linux produces</p>\n<pre><code>bar3\nbar2\nbar1\nTFoo\nfoobar1\nfoobar2\n</code></pre>\n<p>but clang++ on linux and gcc 3.4.6 on solaris produce</p>\n<pre><code>bar1\nTFoo\nbar2\nfoobar1\nbar3\nfoobar2\n</code></pre>\n<p>To analyze a simpler example, <code>TFoo(0).foobar1(TFoo::bar2());</code> is a call to <code>TFoo::foobar1</code> which takes two arguments: the result of the subexpression <code>TFoo(0)</code> (as the hidden argument <code>this</code>) and the result of the subexpression <code>Tfoo::bar2()</code>. For me, gcc executs <code>bar2()</code> first, then TFoo's constructor, and then calls <code>foobar1()</code>, while clang++ for example, executes TFoo's constructor first, then <code>bar2()</code> and then calls <code>foobar1()</code>.</p>\n", "LastEditorUserId": "273767", "LastActivityDate": "2011-07-14T01:38:04.847", "Score": "1", "CreationDate": "2011-07-14T01:23:57.490", "ParentId": "6687390", "CommentCount": "5", "OwnerUserId": "273767", "LastEditDate": "2011-07-14T01:38:04.847"}, "6687390": {"ViewCount": "218", "Body": "<p>I suspect the following chaining of functions would result in unspecified sequence according to the C++ standards (assume C++0x). Just want a confirmation and if anyone could provide an explanation, I'd appreciate it.</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct TFoo \n{\n    TFoo(int) \n    {\n        std::cout&lt;&lt;\"TFoo\"&lt;&lt;std::endl;\n    };\n    TFoo foobar1(int) \n    {\n        std::cout&lt;&lt;\"foobar1\"&lt;&lt;std::endl;\n        return *this;\n    };\n    TFoo foobar2(int) \n    {\n        std::cout&lt;&lt;\"foobar2\"&lt;&lt;std::endl;\n        return *this;\n    };\n    static int bar1() \n    {\n        std::cout&lt;&lt;\"bar1\"&lt;&lt;std::endl;\n        return 0;\n    };\n    static int bar2() \n    {\n        std::cout&lt;&lt;\"bar2\"&lt;&lt;std::endl;\n        return 0;\n    };\n    static int bar3()\n    {\n        std::cout&lt;&lt;\"bar3\"&lt;&lt;std::endl;\n        return 0;\n    }\n};\n\nint main(int argc, char *argv[])\n{\n    // is the sequence well defined for bar1, bar2 and bar3?\n    TFoo(TFoo::bar1()).foobar1(TFoo::bar2()).foobar2(TFoo::bar3());\n}\n</code></pre>\n<p><em>*</em> edit: removed __fastcall specifier for functions (not required/relevant to the question).</p>\n", "AcceptedAnswerId": "6687496", "Title": "Is this code well defined?", "CreationDate": "2011-07-14T01:03:58.900", "Id": "6687390", "CommentCount": "1", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2011-07-14T01:18:01.183", "LastEditorUserId": "383306", "LastActivityDate": "2011-07-14T01:48:21.397", "Score": "8", "OwnerUserId": "383306", "Tags": "<c++><c++11><sequence-points><order-of-evaluation>", "AnswerCount": "2"}, "6687496": {"Id": "6687496", "PostTypeId": "2", "Body": "<p>The evaluation order is not specified.  The relevant section of the draft <a href=\"http://www.open-std.org/jtc1/sc22/wg21/prot/14882fdis/n3291.pdf\" rel=\"nofollow\">C++0x spec</a> is 1.9, paragraphs 14 and 15:</p>\n<blockquote>\n<p id=\"so_6687390_6687496_0\">14 Every value computation and side effect associated with a <em>full-expression</em> is sequenced before every value computation and side effect associated with the next <em>full-expression</em> to be evaluated.</p>\n<p id=\"so_6687390_6687496_1\">15 Except where noted, evaluations of operands of individual operators and of subexpressions of individual expressions are unsequenced.</p>\n</blockquote>\n<p>Here the relevant <em>full-expression</em> is:</p>\n<pre><code>TFoo(TFoo::bar1()).foobar1(TFoo::bar2()).foobar2(TFoo::bar3());\n</code></pre>\n<p>And so the evaluation of its subexpressions are unsequenced (unless there is an exception noted somewhere that I missed).</p>\n<p>I am pretty sure earlier standards include language having the same effect but in terms of \"sequence points\".</p>\n<p>[edit]</p>\n<p>Paragraph 15 also says:</p>\n<blockquote>\n<p id=\"so_6687390_6687496_2\">When calling a function (whether or not the function is inline), every value computation and side effect associated with any argument expression, or with the postfix expression designating the called function, is sequenced before execution of every expression or statement in the body of the called function. [Note: Value computations and side effects associated with different argument expressions are unsequenced.\u2014 end note]</p>\n</blockquote>\n<p>A \"postfix expression designating the called function\" is something like the <code>foo().bar</code> in <code>foo().bar()</code>.</p>\n<p>The \"note\" here merely clarifies that argument evaluation order is <em>not</em> an exception to the \"unspecified order\" default.  By inference, neither is the evaluation order associated with the \"postfix expression designating the called function\"; or if you prefer, the evaluation order of the expression for the <code>this</code> argument.  (If there were an exception, this would be the natural place to specify it.  Or possibly section 5.2.2 that talks about function calls.  Neither section says anything about the evaluation order for this example, so it is unspecified.)</p>\n", "LastEditorUserId": "768469", "LastActivityDate": "2011-07-14T01:48:21.397", "Score": "8", "CreationDate": "2011-07-14T01:24:42.530", "ParentId": "6687390", "CommentCount": "3", "OwnerUserId": "768469", "LastEditDate": "2011-07-14T01:48:21.397"}});