post_cb({"bq_ids": {"n4140": {"so_17626667_17627391_0": {"length": 30, "quality": 0.8571428571428571, "section_id": 1243}}, "n3337": {"so_17626667_17627391_0": {"length": 30, "quality": 0.8571428571428571, "section_id": 1241}}, "n4659": {"so_17626667_17627391_0": {"length": 30, "quality": 0.8571428571428571, "section_id": 1331}}}, "17626712": {"Id": "17626712", "PostTypeId": "2", "Body": "<p>In a typical case, a function object will have little or (more often) no persistent state. In such a case, passing by value may no require actually passing anything at all -- the \"value\" that's passed is basically little or nothing more than a placeholder for \"this is the object\".</p>\n<p>Given the small amount of code in many function objects, that leads to a further optimization: it's often fairly easy for the compiler to expand the code for the function object inline, so no parameters get passed, and no function call is involved at all.</p>\n<p>A compiler <em>may</em> be able to do the same when you pass a pointer or reference instead, but it's not quite as easy -- a lot more common that you'll end up with an object being created, its address passed, and then the function call operator for that object being invoked via that pointer.</p>\n<p>Edit: It's probably also worth mentioning that the same applies to lambdas, since they're really just function objects in disguise. You don't know the name of the class, but they create a class in the immediately surrounding scope that overloads the function call operator, which is what gets invoked when you \"call\" the lambda. [Thanks @Mark Garcia.]</p>\n", "LastEditorUserId": "179910", "LastActivityDate": "2013-07-13T03:43:22.040", "Score": "18", "CreationDate": "2013-07-13T03:31:50.087", "ParentId": "17626667", "CommentCount": "2", "OwnerUserId": "179910", "LastEditDate": "2013-07-13T03:43:22.040"}, "17626849": {"Id": "17626849", "PostTypeId": "2", "Body": "<p>From Effective STL (since you seems to like Scott Meyers) item 38 <strong>Design functor classes for pass-by-value</strong>.</p>\n<p>\"In both C and C++ function pointers are passed by value. STL Function objects are modeled after function pointers, so the convention in the STL is that function objects, too, are passed by value when passed to and from functions.\"</p>\n<p>This has some benefits and some implications, like @Jerry Coffin said, the compiler can make some optimizations like inlining the code to avoid function calls (You have to mark your functor as inline). A good example of this case is the qsort vs std::sort performance comparison, where std::sort using inline functors outperform qsort by a lot, you can find more information on this on Effective STL where it is discussed extensively and mentioned in several chapters.</p>\n<p>This also has several implications too, since function objects are passed and returned by value, you have to make sure your object have a well defined copy mechanisms, are small in size (otherwise it could get expensive), and are monomorphic (since passing polymorphic objects by value may result in object slicing).</p>\n", "LastActivityDate": "2013-07-13T04:01:56.993", "CommentCount": "1", "CreationDate": "2013-07-13T04:01:56.993", "ParentId": "17626667", "Score": "1", "OwnerUserId": "1297125"}, "17627391": {"Id": "17627391", "PostTypeId": "2", "Body": "<p>The #1 reason to pass function objects by value is because the standard library requires that function objects you pass to its algorithms be copyable. C++11 \u00a725.1/10:</p>\n<blockquote>\n<p id=\"so_17626667_17627391_0\">[ Note: Unless otherwise specified, algorithms that take function objects as arguments are permitted to copy\n  those function objects freely. Programmers for whom object identity is important should consider using a\n  wrapper class that points to a noncopied implementation object such as <code>reference_wrapper&lt;T&gt;</code> (20.8.3),\n  or some equivalent solution. \u2014end note ]</p>\n</blockquote>\n<p>The other answers do a great job of explaining the rationale.</p>\n", "LastActivityDate": "2013-07-13T05:51:38.077", "CommentCount": "0", "CreationDate": "2013-07-13T05:51:38.077", "ParentId": "17626667", "Score": "4", "OwnerUserId": "923854"}, "17626667": {"ViewCount": "1272", "Body": "<p>I have just read the classic book \"Effective C++, 3rd Edition\", and in item 20 the author concludes that <strong>built-in types, STL iterators and function object types are more appropriate for pass-by-value</strong>. I could well understand the reason for built-in and iterators types, but <strong><em>why should the function object be pass-by-value</em></strong>, as we know it is class-type anyway?</p>\n", "AcceptedAnswerId": "17626712", "Title": "why function objects should be pass-by-value", "CreationDate": "2013-07-13T03:23:08.247", "Id": "17626667", "CommentCount": "3", "FavoriteCount": "8", "PostTypeId": "1", "LastActivityDate": "2013-07-13T05:51:38.077", "Score": "17", "OwnerUserId": "2567264", "Tags": "<c++><pass-by-value><function-object>", "AnswerCount": "3"}});