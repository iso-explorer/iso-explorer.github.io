post_cb({"10858998": {"CommentCount": "7", "AcceptedAnswerId": "10859012", "CreationDate": "2012-06-02T00:56:00.623", "LastActivityDate": "2013-06-27T15:07:08.220", "PostTypeId": "1", "ViewCount": "1561", "FavoriteCount": "2", "Title": "How do I get the member function pointer of a destructor?", "Id": "10858998", "Score": "4", "Body": "<p>Assume I have</p>\n<pre><code>struct X {\n  ~X() {}\n};\n</code></pre>\n<p>What's the type of and how do I get the member function pointer of <code>X::~X()</code> in C++03?</p>\n<p>I don't want to actually call it, just use in SFINAE to figure if there exists a destructor for a given type.</p>\n", "Tags": "<c++><destructor><member-function-pointers><c++03>", "OwnerUserId": "430766", "AnswerCount": "1"}, "10859012": {"ParentId": "10858998", "PostTypeId": "2", "CommentCount": "8", "CreationDate": "2012-06-02T00:58:16.310", "Score": "5", "LastEditorUserId": "927034", "LastEditDate": "2013-06-27T15:07:08.220", "Id": "10859012", "OwnerUserId": "927034", "Body": "<p>You can't get the function pointer of a destructor nor a constructor. Nevertheless a destructor always exist for a type, and you can't detect if its <code>private</code> with as access specifiers are not considered by <em>SFINAE</em>.</p>\n<p>On the subject of invoking what would be the destructor of a scalar type, the standard says <em>[class.dtor]/16</em>:</p>\n<blockquote>\n<p id=\"so_10858998_10859012_0\">[Note:the notation for explicit call of a destructor can be used for any scalar type name (5.2.4). Allowing this makes it possible to write code without having to know if a destructor exists for a given type. For example,</p>\n<p id=\"so_10858998_10859012_1\">typedef int I;</p>\n<p id=\"so_10858998_10859012_2\">I* p;</p>\n<p id=\"so_10858998_10859012_3\">p-&gt;I::~I();</p>\n<p id=\"so_10858998_10859012_4\">\u2014end note]</p>\n</blockquote>\n", "LastActivityDate": "2013-06-27T15:07:08.220"}, "bq_ids": {"n4140": {"so_10858998_10859012_0": {"section_id": 412, "quality": 0.8695652173913043, "length": 20}}, "n3337": {"so_10858998_10859012_0": {"section_id": 403, "quality": 0.8695652173913043, "length": 20}}, "n4659": {"so_10858998_10859012_0": {"section_id": 430, "quality": 0.8695652173913043, "length": 20}}}});