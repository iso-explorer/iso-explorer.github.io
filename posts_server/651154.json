post_cb({"651204": {"ParentId": "651154", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_651154_651204_0\">I have little understanding that throw; is basically \"rethrow\" and must be used in exception handler (catch). Using this concept in any other place would results into program termination then why does compiler not raise flags during compilation?</p>\n</blockquote>\n<p>Rethrowing is useful. Suppose you have a call stack three levels deep with each level adding some context resource object for the final call. Now, when you have an exception at the leaf level, you will expect some cleanup operation for whatever resources the object has created. But this is not all, the callers above the leaf may also have allocated some resources which will need to be deallocated. How do you do that? You <em>rethrow</em>.</p>\n<p>However, what you have is not rethrow. It is a signal of giving up after some failed attempts to catch and process any and all exceptions that were raised.</p>\n", "OwnerUserId": "66692", "Id": "651204", "PostTypeId": "2", "OwnerDisplayName": "dirkgently", "Score": "0", "CreationDate": "2009-03-16T16:40:10.450", "LastActivityDate": "2009-03-16T16:40:10.450"}, "651206": {"ParentId": "651154", "CommentCount": "0", "Body": "<p>From the C++ standard:</p>\n<blockquote>\n<p id=\"so_651154_651206_0\">15.1 Throwing an exception</p>\n<p id=\"so_651154_651206_1\">...</p>\n<p id=\"so_651154_651206_2\">If no exception is presently being\n  handled, executing a throw-exception\n  with no operand calls <code>terminate()</code></p>\n</blockquote>\n<p>The reason the compiler can't reliably catch this type of error is that exception handlers can call functions/methods, so there's no way for the compiler to know whether the <code>throw</code> is occurring inside a <code>catch</code>.  That's essentially a runtime thing.</p>\n", "OwnerUserId": "12711", "Id": "651206", "PostTypeId": "2", "OwnerDisplayName": "Michael Burr", "Score": "10", "CreationDate": "2009-03-16T16:40:59.870", "LastActivityDate": "2009-03-16T16:40:59.870"}, "651235": {"ParentId": "651154", "CommentCount": "0", "Body": "<p>To complete the previous answers with an example of when/why the compiler cannot detect the problem:</p>\n<pre><code>// Centralized exception processing (if it makes sense)\nvoid processException()\n{\n   try {\n      throw;\n   }\n   catch ( std::exception const &amp; e )\n   {\n      std::cout &lt;&lt; \"Caught std::exception: \" &lt;&lt; e.what() &lt;&lt; std::endl;\n   }\n   catch ( ... )\n   {\n      std::cout &lt;&lt; \"Caught unknown exception\" &lt;&lt; std::endl;\n   }\n}\n\nint main()\n{\n   try\n   {\n      throw 1;\n   }\n   catch (...)\n   {\n      processException(); // correct, still in the catch clause\n   }\n   processException(); // terminate() no alive exception at the time of throw.\n}\n</code></pre>\n<p>When compiling the function <em>processException</em> the compiler cannot know how and when it will be called.</p>\n", "OwnerUserId": "36565", "Id": "651235", "PostTypeId": "2", "OwnerDisplayName": "dribeas", "Score": "0", "CreationDate": "2009-03-16T16:50:15.213", "LastActivityDate": "2009-03-16T16:50:15.213"}, "651207": {"CommentCount": "0", "CreationDate": "2009-03-16T16:41:13.893", "LastEditorUserId": "3153", "LastActivityDate": "2009-03-16T16:48:37.060", "ParentId": "651154", "PostTypeId": "2", "LastEditorDisplayName": "Brian R. Bondy", "LastEditDate": "2009-03-16T16:48:37.060", "Id": "651207", "Score": "0", "Body": "<p>A throw inside of a catch block with no args will re-throw the same exception that was caught, so it will be caught at a higher level. </p>\n<p>A throw outside of a catch block with no args will cause a program termination.</p>\n", "OwnerUserId": "3153", "OwnerDisplayName": "Brian R. Bondy"}, "651240": {"ParentId": "651154", "CommentCount": "0", "Body": "<p>To elaborate on Neil's answer:</p>\n<p><code>throw;</code> by itself will attempt to re-raise the current exception being unwind -- if multiple are being unwound, it attempts to rethrow the most recent one.  If none are being unwound, then terminate() is called to signal your program did something bogus.</p>\n<p>As to your next question, why the compiler doesn't warn with <code>throw;</code> outside a catch block, is that the compiler can't tell at compile-time whether the <code>throw;</code> line may be executing in the context of a catch block.  Consider:</p>\n<pre><code>// you can try executing this code on [http://codepad.org/pZv9VgiX][1]\n#include &lt;iostream&gt;\nusing namespace std;\n\nvoid f() {\n    throw 1;\n}\nvoid g() {\n    // will look at int and char exceptions\n    try { \n        throw;\n    } catch (int xyz){\n        cout &lt;&lt; \"caught int \" &lt;&lt; xyz &lt;&lt; \"\\n\";\n    } catch (char xyz){\n        cout &lt;&lt; \"caught char \" &lt;&lt; xyz &lt;&lt; \"\\n\";\n    }\n}\nvoid h() {\n    try {\n        f();\n    } catch (...) {\n        // use g as a common exception filter\n        g();\n    }\n}\nint main(){\n    try {\n        h();\n    } catch (...) {\n        cout &lt;&lt; \"some other exception.\\n\";\n    }\n}\n</code></pre>\n<p>In this program, <code>g()</code> operates as an exception filter, and can be used from <code>h()</code> and any other function that could use this exception handling behavior.  You can even imagine more complicated cases:</p>\n<pre><code>void attempt_recovery() {\n    try{\n        // do stuff\n        return;\n\n    } catch (...) {}\n\n    // throw original exception cause\n    throw;\n}\nvoid do_something() {\n    for(;;) {\n        try {\n            // do stuff\n        } catch (...) {\n            attempt_recovery();\n        }\n    }\n}\n</code></pre>\n<p>Here, if an exception occurs in do_something, the recovery code will be invoked.  If that recovery code succeeds, the original exception is forgotten and the task is re-attempted.  If the recovery code fails, that failure is ignored and the previous failure is re-throw.  This works because the <code>throw;</code> in <code>attempt_recovery</code> is invoked in the context of <code>do_something</code>'s catch block.</p>\n", "OwnerUserId": "14153", "Id": "651240", "PostTypeId": "2", "OwnerDisplayName": "Aaron", "Score": "11", "CreationDate": "2009-03-16T16:52:00.560", "LastActivityDate": "2009-03-16T16:52:00.560"}, "651173": {"ParentId": "651154", "CommentCount": "5", "Body": "<p>You don't have anything to catch, and so the exception bubbles all the way up.  Even <code>catch(...)</code> needs <em>something</em>.</p>\n", "OwnerUserId": "3043", "Id": "651173", "PostTypeId": "2", "OwnerDisplayName": "Joel Coehoorn", "Score": "-1", "CreationDate": "2009-03-16T16:33:03.010", "LastActivityDate": "2009-03-16T16:33:03.010"}, "651154": {"CommentCount": "0", "ViewCount": "2653", "OwnerDisplayName": "aJ", "CreationDate": "2009-03-16T16:29:30.380", "LastActivityDate": "2009-03-16T17:14:04.033", "PostTypeId": "1", "AcceptedAnswerId": "651188", "FavoriteCount": "2", "Title": "why does throw \"nothing\" causes program termination?", "Id": "651154", "Score": "14", "Body": "<pre><code>const int MIN_NUMBER = 4;\nclass Temp\n{\npublic:\n\n    Temp(int x) : X(x)\n    {\n    }\n\n    bool getX() const\n    {\n        try\n        {\n            if( X &lt; MIN_NUMBER)\n            {\n                //By mistake throwing any specific exception was missed out\n                //Program terminated here\n                throw ;\n            }\n        }\n        catch (bool bTemp)\n        {\n            cout&lt;&lt;\"catch(bool) exception\";\n\n        }\n        catch(...)\n        {\n            cout&lt;&lt;\"catch... exception\";\n        }\n        return X;\n    }\n\nprivate:\n    int X;\n};\n\n\n\nint main(int argc, char* argv[])\n{\n    Temp *pTemp = NULL;\n    try\n    {\n        pTemp = new Temp(3);\n        int nX = pTemp-&gt;getX();\n        delete pTemp;\n    }\n    catch(...)\n    {\n        cout&lt;&lt;\"cought exception\";\n    }\n\n    cout&lt;&lt;\"success\";\n    return 0;\n}\n</code></pre>\n<p>In above code, <strong>throw false</strong> was intended in getX() method but due to a human error(!) <strong>false</strong> was missed out. The innocent looking code crashed the application. </p>\n<p>My question is why does program gets terminated when we throw \"nothing\u201d? </p>\n<p>I have little understanding that <code>throw;</code> is basically \"rethrow\" and must be used in exception handler (catch). Using this concept in any other place would results into program termination then why does compiler not raise flags during compilation?</p>\n", "Tags": "<c++><exception-handling>", "OwnerUserId": "64960", "AnswerCount": "7"}, "bq_ids": {"n4140": {"so_651154_651206_2": {"section_id": 3342, "quality": 0.7777777777777778, "length": 7}, "so_651154_651188_0": {"section_id": 3342, "quality": 0.8888888888888888, "length": 8}}, "n3337": {"so_651154_651206_2": {"section_id": 3212, "quality": 0.7777777777777778, "length": 7}, "so_651154_651188_0": {"section_id": 3212, "quality": 0.8888888888888888, "length": 8}}, "n4659": {"so_651154_651206_2": {"section_id": 7674, "quality": 0.6666666666666666, "length": 6}, "so_651154_651188_0": {"section_id": 7674, "quality": 0.7777777777777778, "length": 7}}}, "651188": {"ParentId": "651154", "PostTypeId": "2", "CommentCount": "6", "Body": "<p>This is expected behaviour. From the C++ standard:</p>\n<blockquote>\n<p id=\"so_651154_651188_0\">If no exception is presently being\n  handled, executing a throw-expression\n  with no operand calls\n  terminate()(15.5.1).</p>\n</blockquote>\n<p>As to why the compiler can't diagnose this, it would take some pretty sophisticated flow analysis to do so and I guess the compiler writers would not judge it as cost-effective. C++ (and other languages) are full of possible errors that <em>could</em> in theory be caught by the compiler but in practice are not.</p>\n", "Id": "651188", "LastEditDate": "2009-03-16T17:14:04.033", "OwnerDisplayName": "anon", "Score": "26", "CreationDate": "2009-03-16T16:36:40.707", "LastActivityDate": "2009-03-16T17:14:04.033", "LastEditorDisplayName": "anon"}});