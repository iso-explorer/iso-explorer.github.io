post_cb({"16176109": {"Id": "16176109", "PostTypeId": "2", "Body": "<p>When the exception is thrown, it will be caught by one of the two catch statements. However, they still need to <code>return</code> a value from the function. You could place a <code>return</code> statement right at the end of your function.</p>\n<p>However, if <code>Pop</code> throws an exception because the <code>Stack</code> is empty, it makes much more sense for it to let the exception propagate out of the function. Why is <code>Pop</code> itself attempting to handle the exceptional situation?</p>\n", "LastActivityDate": "2013-04-23T18:02:21.877", "CommentCount": "0", "CreationDate": "2013-04-23T18:02:21.877", "ParentId": "16176072", "Score": "1", "OwnerUserId": "150634"}, "16176072": {"ViewCount": "3368", "Body": "<p>Ive got a short bit of code that is giving me the following the warning upon compilation:</p>\n<p><em><strong>'BGOLUB::Containers::Stack::Pop' : not all control paths return a value</strong></em></p>\n<p>Here is the code:</p>\n<pre><code>template&lt;typename T&gt;\nT Stack&lt;T&gt;::Pop()                                                                           \n{\n\ntry\n{\n    if (m_index&lt;0) throw OutOfBoundsException(m_index);\n\n    --m_index;\n    return(m_array[m_index]);\n}\n\ncatch(OutOfBoundsException&amp;)\n{\n    cerr&lt;&lt;\"Underflow Index = \"&lt;&lt;m_index&lt;&lt;endl;\n}\n\ncatch(...)\n{\n    cerr&lt;&lt;\"Unhandled Error Occured\"&lt;&lt;endl;\n}\n}\n</code></pre>\n<p>Any advice?</p>\n<p>Many thanks!</p>\n", "AcceptedAnswerId": "16176088", "Title": "Not All Control Paths Return a Value? Warning", "CreationDate": "2013-04-23T18:00:38.933", "Id": "16176072", "CommentCount": "1", "FavoriteCount": "2", "PostTypeId": "1", "LastActivityDate": "2013-04-23T18:31:12.403", "Score": "3", "OwnerUserId": "2283927", "Tags": "<c++><error-handling><compiler-warnings>", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_16176072_16176088_1": {"length": 12, "quality": 1.0, "section_id": 3913}}, "n3337": {"so_16176072_16176088_1": {"length": 12, "quality": 1.0, "section_id": 3773}}, "n4659": {"so_16176072_16176088_1": {"length": 9, "quality": 0.75, "section_id": 4799}}}, "16176228": {"Id": "16176228", "PostTypeId": "2", "Body": "<p>I would recommend using brackets with all of your <code>if</code> statements, even with one-line bodies. They are not strictly necessary, and you can write perfectly legal code without them, but they make your code much more readable, and errors such as this will be much easier to find.</p>\n<p>Additionally, it seems you have a fundamental misunderstanding of how exceptions work. If your code were to encounter an exception, it would jump straight to the <code>catch</code> block, and not execute any subsequent code in the <code>try</code> block. Therefore, the <code>return</code> statement in you <code>try</code> block will never be reached, and your function will not return anything, since the <code>catch</code> blocks lack <code>return</code> statements.</p>\n<p>You can resolve this issue by adding a <code>return</code> statement in your <code>catch</code> block.</p>\n", "LastActivityDate": "2013-04-23T18:08:51.350", "CommentCount": "0", "CreationDate": "2013-04-23T18:08:51.350", "ParentId": "16176072", "Score": "0", "OwnerUserId": "503585"}, "16176107": {"Id": "16176107", "PostTypeId": "2", "Body": "<p>You need either rethrow exceptions, or return something probably T() at the end of function.</p>\n", "LastActivityDate": "2013-04-23T18:02:21.377", "CommentCount": "0", "CreationDate": "2013-04-23T18:02:21.377", "ParentId": "16176072", "Score": "1", "OwnerUserId": "2254782"}, "16176088": {"Id": "16176088", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_16176072_16176088_0\">Any advice?</p>\n</blockquote>\n<p>The compiler is giving you the best advice. Not all the control paths in your function contain a <code>return</code> statement, and your function is supposed to return a value.</p>\n<p>If an exception is thrown and control is transferred to a <code>catch</code> handler, that handler will print something to <code>cerr</code> and then flow off the end of your function without actually <code>return</code>ing anything.</p>\n<p>This is <strong>Undefined Behavior</strong>. Per Paragraph 6.6.3/2 of the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_16176072_16176088_1\">[..] Flowing off the end of a function is equivalent to a return with no value; <strong>this results in undefined\n  behavior in a value-returning function</strong>.</p>\n</blockquote>\n<p>For default-constructible values, you could fix this by adding a <code>return T()</code> statement right before the end of your function:</p>\n<pre><code>template&lt;typename T&gt;\nT Stack&lt;T&gt;::Pop()\n{\n    try\n    {\n        // ...\n    }\n    catch (OutOfBoundsException&amp;)\n    {\n        // ...\n    }\n    catch (...)\n    {\n        // ...\n    }\n\n    return T();\n//  ^^^^^^^^^^^\n}\n</code></pre>\n<p>A more reasonable approach is, however, to <strong>not</strong> have <code>Pop()</code> swallow the exception, but rather <strong>re-throw it</strong>. <code>Pop()</code> does not have strategic-level information on how to recover from an error occurred in this context:</p>\n<pre><code>template&lt;typename T&gt;\nT Stack&lt;T&gt;::Pop()\n{\n    try\n    {\n        // ...\n    }\n    catch (OutOfBoundsException&amp;)\n    {\n        // ...\n        throw; // &lt;== Re-throw after printing the diagnostic\n    }\n    catch (...)\n    {\n        // ...\n        throw; // &lt;== Re-throw after printing the diagnostic\n    }\n}\n</code></pre>\n<p>Even better would be if the responsibility for logging an error message did not belong to <code>Pop()</code> at all, since <code>Pop()</code> is likely supposed to be re-used by code with different requirements in this sense (some may not want to log anything, some may want to log messages to a file, some may want to log messages in a different language, and so on). </p>\n<p>So a more reasonable version of your function would actually be:</p>\n<pre><code>template&lt;typename T&gt;\nT Stack&lt;T&gt;::Pop()                \n{\n    if (m_index&lt;0) throw OutOfBoundsException(m_index);\n    --m_index;\n    return(m_array[m_index]);\n}\n</code></pre>\n<p>In general, you should try (no pun intended) to avoid <code>try/catch</code> blocks unless you have to:</p>\n<ul>\n<li>Translate an exception</li>\n<li>Recover from the error (but you need strategic knowledge for doing this)</li>\n</ul>\n<p>If this not your task (as is the case for a function like <code>Pop()</code> above), in most situations the best thing to do is to <strong>not handle exceptions at all</strong> and let them propagate up the call stack. </p>\n<p>To quote <a href=\"http://www.boost.org/community/error_handling.html\" rel=\"noreferrer\">Dave Abrahams</a>:</p>\n<blockquote>\n<p id=\"so_16176072_16176088_2\">Often the best way to deal with exceptions is to not handle them at all. If you can let them pass through your code and allow destructors to handle cleanup, your code will be cleaner.</p>\n</blockquote>\n<p>To avoid leaking memory, resources, or in general responsibilities, write code that is <strong>exception-safe</strong> by using adequate <strong>RAII wrappers</strong>. Excellent guidelines in this sense are given in <a href=\"http://www.youtube.com/watch?v=N9bR0ztmmEQ\" rel=\"noreferrer\">this two-part talk by Jon Kalb</a>.</p>\n<p>In particular, avoid writing <code>catch (...)</code> handlers: exceptions were invented to prevent programmers from ignoring errors, and swallowing them all in a universal handler without re-throwing them is the best way to ignore them.</p>\n<hr>\n<p><strong>NOTE:</strong></p>\n<p>Notice, that your implementation of <code>Pop()</code> is a bit problematic: what happens if the copy constructor or move constructor of <code>T</code> throws when returning the element back to the caller, after you already modified the stack pointer?</p>\n<p>This is the reason why the C++ Standard Library defines two separate functions <code>pop()</code> and <code>top()</code>: because it allows to offer <strong>strong guarantee</strong>, i.e. to give transactional semantics to your <code>pop()</code> operation - either the element is removed without exceptions being thrown, or the function had no effect at all.</p>\n</hr>", "LastEditorUserId": "1932150", "LastActivityDate": "2013-04-23T18:31:12.403", "Score": "18", "CreationDate": "2013-04-23T18:01:40.593", "ParentId": "16176072", "CommentCount": "4", "OwnerUserId": "1932150", "LastEditDate": "2013-04-23T18:31:12.403"}});