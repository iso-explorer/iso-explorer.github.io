post_cb({"438717": {"Body": "<p>To add to Stevela's <a href=\"https://stackoverflow.com/questions/438192/using-declaration-with-enum#438210\">answer</a>, the problem with the original code is that you refer to a member, but the using declaration is not itself a member declaration:</p>\n<p>7.3.3/6 has:</p>\n<blockquote>\n<p id=\"so_438192_438717_0\">A using-declaration for a class member\n  shall be a member-declaration.</p>\n</blockquote>\n<p>To highlight this, the following example does work:</p>\n<pre><code>class Sample\n{\npublic:\n  enum Colour { RED,BLUE,GREEN};\n};\n\nclass Derived : public Sample\n{\npublic:\n  using Sample::Colour;  // OK\n};\n</code></pre>\n<p>Finally, as pointed out by Igor Semenov <a href=\"https://stackoverflow.com/questions/438192/using-declaration-with-enum#438214\">here</a>, even if you move the enum definition into a namespace, thereby allowing the using declaration, the using declaration will only declare the name of the enum type into the namespace (The 2003 standard reference is 7.3.3/2).</p>\n<pre><code>namespace Sample\n{\n  enum Colour { RED,BLUE,GREEN};\n}\n\nusing Sample::Colour;\nusing Sample::BLUE;\n\n\nvoid foo ()\n{\n  int j = BLUE; // OK\n  int i = RED;  // ERROR\n}\n</code></pre>\n<p><strong>Dependent Base Types</strong></p>\n<p>To allow for partial and explicit specializations, when the compiler parses a class template it does not perform any lookups in dependent base classes.  As a result, the following variation with Sample as a template does not compile:</p>\n<pre><code>template &lt;typename T&gt;\nclass Sample\n{\npublic:\n  enum Colour { RED,BLUE,GREEN};\n};\n\ntemplate &lt;typename T&gt;\nclass Derived : public Sample&lt;T&gt;\n{\npublic:\n  using Sample&lt;T&gt;::Colour;  // What kind of entity is Colour?\n\n  Colour foo ()     // Not OK!\n  {\n  return this-&gt;RED;\n  }\n};\n</code></pre>\n<p>The problem is that <code>Derived::Colour</code> is treated as an object by the compiler (14.6/2):</p>\n<blockquote>\n<p id=\"so_438192_438717_1\">A name used in a template declaration or definition and that is dependent on a template-parameter is assumed not to name a type unless the applicable name lookup finds a type name or the name is qualified by the keyword typename.</p>\n</blockquote>\n<p>Looking at the two conditions for the name to be a type:</p>\n<ol>\n<li>Lookup for <code>Colour</code> doesn't find a type because the dependent base <code>Sample&lt;T&gt;</code> is not searched.</li>\n<li>The name is not qualified by <code>typename</code></li>\n</ol>\n<p>The example therefore needs the <code>typename</code> keyword:</p>\n<pre><code>template &lt;typename T&gt;\nclass Derived : public Sample&lt;T&gt;\n{\npublic:\n  using typename Sample&lt;T&gt;::Colour;  // Colour is treated as a typedef-name\n\n  Colour foo ()  // OK\n  {\n  return this-&gt;RED;\n  }\n};\n</code></pre>\n<p><strong>Note:</strong>  The '98 version of the standard didn't allow <code>typename</code> to be used with a using declaration and so the above fix was not possible.  See <a href=\"https://stackoverflow.com/q/1071119/11698\">Accessing types from dependent base classes</a> and <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#11\" rel=\"nofollow noreferrer\">CWG11</a>.</p>\n", "CreationDate": "2009-01-13T11:43:05.143", "ParentId": "438192", "CommentCount": "1", "LastEditDate": "2017-05-23T12:13:33.317", "PostTypeId": "2", "OwnerDisplayName": "Richard Corden", "LastEditorUserId": "-1", "LastActivityDate": "2015-07-24T09:15:06.620", "Id": "438717", "Score": "6", "OwnerUserId": "11698"}, "bq_ids": {"n4140": {"so_438192_438717_1": {"length": 19, "quality": 1.0, "section_id": 169}, "so_438192_438717_0": {"length": 4, "quality": 1.0, "section_id": 5497}, "so_438192_438214_0": {"length": 23, "quality": 0.8518518518518519, "section_id": 5490}}, "n3337": {"so_438192_438717_1": {"length": 19, "quality": 1.0, "section_id": 163}, "so_438192_438717_0": {"length": 4, "quality": 1.0, "section_id": 5283}, "so_438192_438214_0": {"length": 23, "quality": 0.8518518518518519, "section_id": 5276}}, "n4659": {"so_438192_438717_1": {"length": 19, "quality": 1.0, "section_id": 174}, "so_438192_438717_0": {"length": 4, "quality": 1.0, "section_id": 6931}, "so_438192_438214_0": {"length": 20, "quality": 0.7407407407407407, "section_id": 6924}}}, "438210": {"Id": "438210", "PostTypeId": "2", "Body": "<p>A class does not define a namespace, therefore \"using\" isn't applicable here.</p>\n<p>Also, you need to make the enum public.</p>\n<p>If you're trying to use the enum within the same class, here's an example:</p>\n<pre><code>class Sample {\n public:\n  enum Colour { RED, BLUE, GREEN };\n\n  void foo();\n}\n\nvoid Sample::foo() {\n  Colour foo = RED;\n}\n</code></pre>\n<p>And to access it from without the class:</p>\n<pre><code>void bar() {\n  Sample::Colour colour = Sample::RED;\n}\n</code></pre>\n", "OwnerDisplayName": "stevela", "LastActivityDate": "2009-01-13T07:27:07.327", "Score": "10", "CreationDate": "2009-01-13T07:27:07.327", "ParentId": "438192", "CommentCount": "0", "OwnerUserId": "11077"}, "438214": {"Id": "438214", "PostTypeId": "2", "Body": "<p>C++ Standard, 7.3.3.1:</p>\n<blockquote>\n<p id=\"so_438192_438214_0\">The member name specified in a\n  using-declaration is declared in the\n  declarative region in which the\n  using-declaration appears. [ Note:\n  only the specified name is so\n  declared; specifying an enumeration\n  name in a using-declaration does not\n  declare its enumerators in the\n  using-declaration\u2019s declarative\n  region. \u2014end note ]</p>\n</blockquote>\n", "OwnerDisplayName": "Igor Semenov", "LastActivityDate": "2009-01-13T07:28:42.847", "Score": "5", "CreationDate": "2009-01-13T07:28:42.847", "ParentId": "438192", "CommentCount": "4", "OwnerUserId": "11401"}, "438192": {"ViewCount": "5626", "Body": "<p>using declaration does not seem to work with enum type</p>\n<pre><code>class Sample{\npublic:\nenum Colour { RED,BLUE,GREEN};\n}\n\nusing Sample::Colour;\n</code></pre>\n<p>does not work!!\ndo we need to add using declaration for every  enumerators of enum type? like below</p>\n<pre><code>using sample::Colour::RED;\n</code></pre>\n", "AcceptedAnswerId": "438210", "Title": "using declaration with enum?", "CreationDate": "2009-01-13T07:16:46.303", "Id": "438192", "CommentCount": "3", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2015-12-04T12:06:04.003", "LastEditorDisplayName": "rajKumar", "OwnerDisplayName": "rajKumar", "LastEditorUserId": "309086", "LastActivityDate": "2015-12-04T12:06:04.003", "Score": "5", "OwnerUserId": "22076", "Tags": "<c++><enums><using-declaration>", "AnswerCount": "3"}});