post_cb({"bq_ids": {"n4140": {"so_47698476_47699111_0": {"length": 29, "quality": 0.90625, "section_id": 31}}, "n3337": {"so_47698476_47699111_0": {"length": 29, "quality": 0.90625, "section_id": 28}}, "n4659": {"so_47698476_47699111_0": {"length": 29, "quality": 0.90625, "section_id": 31}}}, "47698592": {"Id": "47698592", "PostTypeId": "2", "Body": "<p>Regarding conversions of integers, C 2011 [draft N1570] 6.3.1.3 2 says</p>\n<blockquote>\n<p id=\"so_47698476_47698592_0\">Otherwise, if the new type is unsigned, the value is converted by repeatedly adding or subtracting one more than the maximum value that can be represented in the new type until the value is in the range of the new type.</p>\n</blockquote>\n<p>Thus, converting -1 to an unsigned integer type necessarily produces the maximum value of that type.</p>\n<p>There may be issues with using <code>-1</code> in various contexts where it is not immediately converted to the desired type. If it is immediately converted to the desired unsigned integer type, as by assignment or explicit conversion, then the result is clear. However, if it is a part of an expression, its type is <code>int</code>, and it behaves like an <code>int</code> until converted. In contrast, <code>UINT_MAX</code> has the type <code>unsigned int</code>, so it behaves like an <code>unsigned int</code>.</p>\n<p>As <a href=\"https://stackoverflow.com/users/2410359/chux\">chux</a> points out in a comment, <code>USHRT_MAX</code> effectively has a type of <code>int</code>, so even the named limits are not fully safe from type issues.</p>\n", "LastEditorUserId": "1671066", "LastActivityDate": "2017-12-08T09:32:14.263", "Score": "29", "CreationDate": "2017-12-07T15:37:58.220", "ParentId": "47698476", "CommentCount": "4", "OwnerUserId": "298225", "LastEditDate": "2017-12-08T09:32:14.263"}, "47698476": {"ViewCount": "3403", "Body": "<p><strong>Is there any c++ standard paragraph which says that using <code>-1</code> for this is portable and correct way or the only way of doing this correctly is using predefined values?</strong></p>\n<p>I have had a conversation with my colleague, what is better: using <code>-1</code> for a maximum unsigned integer number or using a value from <code>limits.h</code> or <code>std::numeric_limits</code> ?</p>\n<p>I have told my colleague that using predefined maximum values from <code>limits.h</code> or <code>std::numeric_limits</code> is the portable and clean way of doing this, however, the colleague objected to <code>-1</code> being as same portable as numeric limits, and more, it has one more advantage:</p>\n<pre><code>unsigned short i = -1; // unsigned short max\n</code></pre>\n<p>can easily be changed to any other type, like</p>\n<pre><code>unsigned long i = -1; // unsigned long max\n</code></pre>\n<p>when using the predefined value from the <code>limits.h</code> header file or <code>std::numeric_limits</code> also requires to rewrite it too along with the type to the left. </p>\n", "AcceptedAnswerId": "47701114", "Title": "Is `-1` correct for using as maximum value of an unsigned integer?", "CreationDate": "2017-12-07T15:30:44.967", "LastActivityDate": "2017-12-13T19:16:38.017", "CommentCount": "36", "FavoriteCount": "5", "PostTypeId": "1", "LastEditDate": "2017-12-13T19:16:38.017", "LastEditorUserId": "1750757", "Id": "47698476", "ClosedDate": "2017-12-08T09:43:43.590", "Score": "36", "OwnerUserId": "1750757", "Tags": "<c++>", "AnswerCount": "5"}, "47701114": {"Id": "47701114", "PostTypeId": "2", "Body": "<p>Not using the standard way or not clearly showing the intent <strong>is often a bad idea that we pay later</strong></p>\n<p>I would suggest:</p>\n<pre><code>auto i = std::numeric_limits&lt;unsigned int&gt;::max(); \n</code></pre>\n<blockquote>\n<p id=\"so_47698476_47701114_0\">or @jamesdin suggested a certainly better one, closer to the C\n  habits: </p>\n<pre><code>unsigned int i = std::numeric_limits&lt;decltype(i)&gt;::max(); \n</code></pre>\n</blockquote>\n<p>Your colleague argument is not admissible. Changing <code>int</code> -&gt; <code>long int</code>, as bellow:</p>\n<pre><code>auto i = std::numeric_limits&lt;unsigned long int&gt;::max(); \n</code></pre>\n<ul>\n<li>does not require extra work compared to the <code>-1</code> solution (thanks to the use of <code>auto</code>).</li>\n<li>the '-1' solution does not directly reflect our intent, hence it possibly has harmful consequences. Consider this code snippet:</li>\n</ul>\n<p>.</p>\n<pre><code>using index_t = unsigned int;\n\n... now in another file (or far away from the previous line) ...\n\nconst index_t max_index = -1;\n</code></pre>\n<p>First, we do not understand why <code>max_index</code> is <code>-1</code>.\nWorst, if someone wants to improve the code and define </p>\n<pre><code> using index_t = ptrdiff_t;\n</code></pre>\n<p><em>=&gt; then the statement <code>max_index=-1</code> is not the <code>max</code> anymore</em> and you get <em>a buggy code</em>. Again this can not happen with something like:</p>\n<pre><code>const index_t max_index = std::numeric_limits&lt;index_t&gt;::max();\n</code></pre>\n<hr>\n<p><strong>CAVEAT:</strong> nevertheless there is a caveat when using <code>std::numeric_limits</code>. It has nothing to do with integers, but is related to <strong>floating point numbers</strong>.</p>\n<pre><code>std::cout &lt;&lt; \"\\ndouble lowest: \"\n          &lt;&lt; std::numeric_limits&lt;double&gt;::lowest()\n          &lt;&lt; \"\\ndouble min   : \"\n          &lt;&lt; std::numeric_limits&lt;double&gt;::min() &lt;&lt; '\\n';\n</code></pre>\n<p>prints:</p>\n<pre><code>double lowest: -1.79769e+308    \ndouble min   :  2.22507e-308  &lt;-- maybe you expected -1.79769e+308 here!\n</code></pre>\n<ul>\n<li><code>min</code> returns the smallest finite value of the given type</li>\n<li><code>lowest</code> returns the lowest finite value of the given type </li>\n</ul>\n<p>Always interesting to remember that, as it can be a source of bug if we do not pay attention to (using <code>min</code> instead of <code>lowest</code>). </p>\n</hr>", "LastEditorUserId": "2001017", "LastActivityDate": "2017-12-08T10:23:15.237", "Score": "15", "CreationDate": "2017-12-07T18:00:02.907", "ParentId": "47698476", "CommentCount": "5", "OwnerUserId": "2001017", "LastEditDate": "2017-12-08T10:23:15.237"}, "47700594": {"Id": "47700594", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_47698476_47700594_0\">Is <code>-1</code> correct for using as maximum value of an unsigned integer?</p>\n</blockquote>\n<p>Yes, it is functionally correct when used as a direct assignment/initialization.  Yet often looks questionable <a href=\"https://stackoverflow.com/questions/47698476/is-1-correct-for-using-as-maximum-value-of-an-unsigned-integer/47699866?noredirect=1#comment82356829_47698476\">@Ron</a>.</p>\n<p>Constants from <code>limits.h</code> or <code>std::numeric_limits</code> convey more code understanding, yet need maintenance should the type of <code>i</code> change.</p>\n<hr>\n<p>To add an alternative to assigning a maximum value (available in C11) that helps reduce code maintenance:</p>\n<p>Use the loved/hated <code>_Generic</code></p>\n<pre><code>#define info_max(X) _Generic((X), \\\n  long double: LDBL_MAX, \\\n  double: DBL_MAX, \\\n  float: FLT_MAX, \\\n  unsigned long long: ULLONG_MAX, \\\n  long long: LLONG_MAX, \\\n  unsigned long: ULONG_MAX, \\\n  long: LONG_MAX, \\\n  unsigned: UINT_MAX, \\\n  int: INT_MAX, \\\n  unsigned short: USHRT_MAX, \\\n  short: SHRT_MAX, \\\n  unsigned char: UCHAR_MAX, \\\n  signed char: SCHAR_MAX, \\\n  char: CHAR_MAX, \\\n  _Bool: 1, \\\n  default: 1/0 \\\n  )\n\nint main() {\n  ...\n  some_basic_type i = info_max(i);\n  ...\n}\n</code></pre>\n<p>The above macro <code>info_max()</code> have limitations concerning types like <code>size_t</code>, <code>intmax_t</code>, etc. that may not be enumerated in the above list.  There are more complex macros that can cope with that.   The idea here is illustrative.</p>\n</hr>", "LastActivityDate": "2017-12-07T17:29:26.180", "Score": "15", "CreationDate": "2017-12-07T17:29:26.180", "ParentId": "47698476", "CommentCount": "10", "OwnerUserId": "2410359"}, "47699866": {"Id": "47699866", "PostTypeId": "2", "Body": "<p>The technical side has been covered by other answers; and while you focus on technical correctness in your question, pointing out the cleanness aspect again is important, because imo that\u2019s the much more important point.</p>\n<p>The <strong>major reason</strong> why it is a <strong>bad idea</strong> to use that particular trickery is: <strong>The code is ambiguous.</strong> It is unclear whether someone used the unsigned trickery intentionally or made a mistake and actually wanted to initialize a signed variable to -1. Should your colleague mention a comment after you present this argument, tell him to stop being silly. :)</p>\n<p>I\u2019m actually slightly baffled that someone would even consider this trick in earnest. There\u2019s an unambigous, intuitive and idiomatic way to set a value to its max in C: the _MAX macros. And there\u2019s an additional, equally unambigous, intuitive and idiomatic way in C++ that provides some more type safety: numeric_limits. That -1 trick is a classic case of being clever.</p>\n", "LastActivityDate": "2017-12-07T16:47:19.480", "Score": "9", "CreationDate": "2017-12-07T16:47:19.480", "ParentId": "47698476", "CommentCount": "5", "OwnerUserId": "6646408"}, "47699111": {"Id": "47699111", "PostTypeId": "2", "Body": "<p>The C++ standard says this about <code>signed</code> to <code>unsigned</code> conversions (<a href=\"http://eel.is/c++draft/conv.integral#2\" rel=\"nofollow noreferrer\">[conv.integral]/2</a>):</p>\n<blockquote>\n<p id=\"so_47698476_47699111_0\">If the destination type is unsigned, the resulting value is the least unsigned integer congruent to the source integer (modulo \n  2<sup>n</sup> where <em>n</em> is the number of bits used to represent the unsigned type). [\u2009<em>Note:</em> In a two's complement representation, this conversion is conceptual and there is no change in the bit pattern (if there is no truncation). \u2014\u2009<em>end note</em>\u2009]</p>\n</blockquote>\n<p>So yes, converting <strong>-1</strong> to an <em>n</em>-bit unsigned integer will always give you <strong>2<sup><em>n</em></sup>-1</strong>, regardless of which signed integer type the -1 started as.</p>\n<p>Whether or not <code>unsigned x = -1;</code> is more or less readable than <code>unsigned x = UINT_MAX;</code> though is another discussion (there's definitely the chance that it'll raise <em>some</em> eyebrows, maybe even your own when you look at your own code later;).</p>\n", "LastEditorUserId": "485343", "LastActivityDate": "2017-12-08T08:13:59.770", "Score": "8", "CreationDate": "2017-12-07T16:05:56.987", "ParentId": "47698476", "CommentCount": "1", "OwnerUserId": "485343", "LastEditDate": "2017-12-08T08:13:59.770"}});