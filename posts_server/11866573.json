post_cb({"11867022": {"ParentId": "11866573", "CommentCount": "2", "Body": "<pre><code>char x = 'a', y = 'a';\n\n[&amp;x,y]() mutable{\n  ++x; ++y;\n}();\n</code></pre>\n<p><a href=\"http://liveworkspace.org/code/f2b27f8a17fb1d37f50ab5fca844cca2\" rel=\"nofollow\">Live example.</a></p>\n<p>Is the correct code. To capture a variably by-value, just write its name. To allow modification of by-value captures, the lambda needs to be marked <code>mutable</code>, otherwise the <code>operator()</code> is marked <code>const</code>.</p>\n<p><code>\u00a75.1.2 [expr.prim.lambda] p5</code></p>\n<blockquote>\n<p id=\"so_11866573_11867022_0\">[...] This function call operator is declared <code>const</code> (9.3.1) if and only if the <em>lambda-expression</em>\u2019s <em>parameter-declaration-clause</em> is not followed by <strong>mutable</strong>. [...]</p>\n</blockquote>\n", "OwnerUserId": "500104", "PostTypeId": "2", "Id": "11867022", "Score": "4", "CreationDate": "2012-08-08T14:43:10.447", "LastActivityDate": "2012-08-08T14:43:10.447"}, "11866573": {"CommentCount": "5", "ViewCount": "254", "PostTypeId": "1", "LastEditorUserId": "2932052", "CreationDate": "2012-08-08T14:21:04.967", "LastActivityDate": "2014-09-25T13:09:13.123", "Title": "C++ closure syntax error", "AcceptedAnswerId": "11867022", "LastEditDate": "2014-09-25T13:09:13.123", "Id": "11866573", "Score": "2", "Body": "<p>What is wrong with the syntax here? I follow <a href=\"http://candrews.net/blog/2011/07/understanding-c-0x-lambda-functions/\" rel=\"nofollow\">this</a> resource.</p>\n<pre><code>char x = 'a', y = 'a';\n\n[&amp;x,=y]() { // error: expected identifier before '=' token\n  ++x; ++y; // error: 'y' is not captured\n}();\n</code></pre>\n<p>I use MinGW g++ 4.5.2 command line compiler with <code>-std=c++0x</code></p>\n<p><strong>clarification</strong>: I'd like to pass <code>y</code> by value.</p>\n", "Tags": "<c++><c++11><lambda><closures>", "OwnerUserId": "343721", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_11866573_11867022_0": {"section_id": 5964, "quality": 0.8181818181818182, "length": 9}}, "n3337": {"so_11866573_11867022_0": {"section_id": 5733, "quality": 0.8181818181818182, "length": 9}}, "n4659": {"so_11866573_11867022_0": {"section_id": 7454, "quality": 0.8181818181818182, "length": 9}}}});