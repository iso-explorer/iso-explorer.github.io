post_cb({"19191306": {"ParentId": "19191211", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>Here is a rewritten version of the code fixing various issues:</p>\n<ol>\n<li>It gives the nested <code>union</code>s a constructor: like any other class type, <code>union</code>s need a constructor if you don't want to initialize them separately.</li>\n<li><p>It gives the nested <code>union bar</code> a destructor as its destructor is otherwise <code>delete</code>d due to the <code>std::string</code> member otherwise (and it needs to deal with the situation that the member may be of type <code>std::string</code> which this code doesn't). The relevant clause in the standard is 12.4 [class.dtor] paragraph 5:</p>\n<blockquote>\n<p id=\"so_19191211_19191306_0\">A defaulted destructor for a class X is defined as deleted if:</p>\n</blockquote>\n<pre><code>- X is a union-like class that has a variant member with a non-trivial destructor,\n- ...\n</code></pre></li>\n<li>It also includes the missing header <code>&lt;string&gt;</code>.</li>\n</ol>\n<p>This is the code:</p>\n<pre><code>#include &lt;string&gt;\nclass Foo\n{\npublic:\n    Foo(): m_bar(123) { }\nprivate:\n    union bar\n    {\n        bar(int x): m_pod(x) {}\n        bar(float y): m_pod(y) {}\n        ~bar() {}\n        union baz\n        {\n            baz(int x): m_x(x) {}\n            baz(float y): m_y(y) {}\n            int m_x;\n            float m_y;\n        }\n        m_pod;\n        std::string m_name;\n    } m_bar;\n};\n</code></pre>\n", "OwnerUserId": "1120273", "LastEditorUserId": "506413", "LastEditDate": "2013-10-04T22:57:20.660", "Id": "19191306", "Score": "6", "CreationDate": "2013-10-04T21:45:37.283", "LastActivityDate": "2013-10-04T22:57:20.660"}, "bq_ids": {"n4140": {"so_19191211_19191306_0": {"section_id": 401, "quality": 1.0, "length": 5}}, "n3337": {"so_19191211_19191306_0": {"section_id": 392, "quality": 1.0, "length": 5}}, "n4659": {"so_19191211_19191306_0": {"section_id": 418, "quality": 1.0, "length": 5}}}, "19191211": {"CommentCount": "9", "ViewCount": "5959", "CreationDate": "2013-10-04T21:38:08.783", "LastActivityDate": "2013-10-04T22:57:20.660", "Title": "Constructor initialization of a named union member", "AcceptedAnswerId": "19191306", "PostTypeId": "1", "Id": "19191211", "Score": "0", "Body": "<p>This code fails to compile. I get \"Expected { or ,\" at the point indicated. (Xcode 5, so it's a reasonably complete C++11 compiler.)</p>\n<p>Is there a way to initialize a member of the nested union in a constructor initializer list, or do I just have to do it in the constructor body?</p>\n<pre><code>class Foo\n{\npublic:\n    Foo(): m_bar.m_x(123) { }\nprivate:     // ^ error here\n    union\n    {\n        union\n        {\n            int m_x;\n            float m_y;\n        }\n        m_pod;\n        std::string m_name;\n    };\n};\n</code></pre>\n", "Tags": "<c++>", "OwnerUserId": "1058607", "AnswerCount": "1"}});