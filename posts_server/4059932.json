post_cb({"4059932": {"ViewCount": "26715", "Body": "<p>What exactly does the <code>const</code> keyword in C++ mean when it's written at the end of a member function (after the argument list)?</p>\n", "AcceptedAnswerId": "4059936", "Title": "What is the meaning of a const at end of a member function?", "CreationDate": "2010-10-30T17:52:51.127", "Id": "4059932", "CommentCount": "0", "FavoriteCount": "19", "PostTypeId": "1", "LastEditDate": "2010-11-12T13:20:52.527", "LastEditorUserId": "140719", "LastActivityDate": "2016-01-27T00:38:26.677", "ClosedDate": "2017-03-06T07:21:57.537", "Score": "54", "OwnerUserId": "481253", "Tags": "<c++><const><c++-faq>", "AnswerCount": "3"}, "4059982": {"Id": "4059982", "PostTypeId": "2", "Body": "<p>Compiler optimizations are possible, but the main benefit is in enforcing the contract expressed in the function's declaration - if you define a member function as <code>const</code>, the compiler prevents any modification to the object inside that function.</p>\n<p>You can exempt individual fields in the class from this restriction using <code>mutable</code> in their declaration.  This is useful for example when you have a class that encapsulates its own lock_guard, which must change its value to enforce thread safety even within <code>const</code> member functions.</p>\n", "LastActivityDate": "2010-10-30T18:03:11.943", "Score": "10", "CreationDate": "2010-10-30T18:03:11.943", "ParentId": "4059932", "CommentCount": "0", "OwnerUserId": "210102"}, "bq_ids": {"n4140": {"so_4059932_4059936_1": {"length": 13, "quality": 0.5652173913043478, "section_id": 5895}, "so_4059932_4059936_0": {"length": 19, "quality": 0.8260869565217391, "section_id": 5895}}, "n3337": {"so_4059932_4059936_1": {"length": 21, "quality": 0.9130434782608695, "section_id": 5667}, "so_4059932_4059936_0": {"length": 19, "quality": 0.8260869565217391, "section_id": 5666}}, "n4659": {"so_4059932_4059936_1": {"length": 13, "quality": 0.5652173913043478, "section_id": 7378}, "so_4059932_4059936_0": {"length": 19, "quality": 0.8260869565217391, "section_id": 7378}}}, "4059936": {"Id": "4059936", "PostTypeId": "2", "Body": "<p>It means that <code>*this</code> is <code>const</code> inside that member function, i.e. it doesn't alter the object.</p>\n<blockquote>\n<p id=\"so_4059932_4059936_0\">The keyword <code>this</code> is a prvalue expression whose value is the address of the object for which the function is called. The type of <code>this</code> in a member function of a class <code>X</code> is <code>X*</code>. If the member function is declared <code>const</code>, the type of <code>this</code> is <code>const X*</code>. [section 9.3.2 \u00a71]</p>\n<p id=\"so_4059932_4059936_1\">In a <code>const</code> member function, the object for which the function is called is accessed through a <code>const</code> access path; therefore, a <code>const</code> member function shall not modify the object and its non-static data members. [section 9.3.2 \u00a72]</p>\n</blockquote>\n<p>This means that a <code>const</code> member function can be called on a <code>const</code> instance of the class. A non-<code>const</code> member function can't be called on <sup>[1]</sup>a <code>const</code> object, since it could potentially try to modify it.</p>\n<p><sup>\n<sup>[1]</sup> Note: a temporary is not a <code>const</code> object unless it's of <code>const</code> type.\n</sup></p>\n", "LastEditorUserId": "464581", "LastActivityDate": "2016-01-27T00:38:26.677", "Score": "59", "CreationDate": "2010-10-30T17:53:36.233", "ParentId": "4059932", "CommentCount": "7", "LastEditDate": "2016-01-27T00:38:26.677", "OwnerUserId": "129570"}, "4060046": {"Id": "4060046", "PostTypeId": "2", "Body": "<p><code>const</code> at the end of a function signature means that the function should assume the object of which it is a member is <code>const</code>. In practical terms it means that you ask the compiler to <em>check</em> that the member function does not change the object data in any way. It means asking the compiler to check that it doesn't directly change any member data, and it doesn't call any function that itself does not guarantee that it won't change the object.</p>\n<p>When you create a <code>const</code> object you are asking the compiler to make sure that that object does not change beyond its initialization. That in turns means that the compiler will check you don't directly change its member data and that you don't call any function that does not guarantee it won't change the object.</p>\n<p>This is all part of the <strong>const correctness</strong> philosophy. In essence it means that if things work right now and they won't change then they will never break. In other words, constant things are easier to work with reliably. This <code>const</code> thing at the end of function signatures is a tool for you to prohibit things from breaking. This in turns means you should put <code>const</code> everywhere you possibly can.</p>\n", "LastActivityDate": "2010-10-30T18:16:44.997", "Score": "24", "CreationDate": "2010-10-30T18:16:44.997", "ParentId": "4059932", "CommentCount": "4", "OwnerUserId": "456"}});