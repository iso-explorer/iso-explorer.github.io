post_cb({"bq_ids": {"n4140": {"so_14078381_14079488_0": {"length": 12, "quality": 0.8, "section_id": 265}, "so_14078381_14079488_1": {"length": 28, "quality": 0.9333333333333333, "section_id": 268}}, "n3337": {"so_14078381_14079488_0": {"length": 12, "quality": 0.8, "section_id": 256}, "so_14078381_14079488_1": {"length": 28, "quality": 0.9333333333333333, "section_id": 259}}, "n4659": {"so_14078381_14079488_0": {"length": 12, "quality": 0.8, "section_id": 272}, "so_14078381_14079488_1": {"length": 28, "quality": 0.9333333333333333, "section_id": 275}}}, "14078381": {"ViewCount": "2371", "Body": "<p>Consider the following header and source files:</p>\n<pre><code>// main.cpp\n#include \"myClass.h\"\n\nint main()\n{\n  MyClass m;\n  m.foo&lt;double&gt;();\n  m.foo&lt;float&gt;();\n}\n</code></pre>\n<hr>\n<pre><code>// myClass.h\n#pragma once\n\n#include &lt;iostream&gt;\n\nusing namespace std;\n\nclass MyClass\n{\npublic:\n\n  template &lt;typename T&gt;\n  void foo()\n  {\n    cout &lt;&lt; \"Template function&lt;T&gt; called\" &lt;&lt; endl;\n  }\n\n  template &lt;&gt;\n  void foo&lt;int&gt;()\n  {\n    cout &lt;&lt; \"Template function&lt;int&gt; called\" &lt;&lt; endl;\n  }\n\n  template &lt;&gt;\n  void foo&lt;float&gt;();\n\n};\n</code></pre>\n<hr>\n<pre><code>// myClass.cpp\n#include \"myClass.h\"\n\ntemplate &lt;&gt;\nvoid MyClass::foo&lt;float&gt;()\n{\n  cout &lt;&lt; \"Template function&lt;float&gt; called\" &lt;&lt; endl;\n}\n</code></pre>\n<p>I get a linking error wrt the <code>foo&lt;float&gt;</code> specialization. If I place the definition of the specialization in the header file, then everything works as expected.</p>\n<p>I figured that the reason may be that the method is not explicitly instantiated (although full specialization of <code>template class</code> does not need an explicit instantiation for proper linking). If I try to explicitly instantiate the method, I get this error:</p>\n<blockquote>\n<p id=\"so_14078381_14078381_0\">error C3416: 'MyClass::foo' : an explicit specialization may not be explicitly instantiated   </p>\n</blockquote>\n<p><strong>So the questions are:</strong></p>\n<ul>\n<li>Is there any way to define the specialization in the <code>cpp</code> file and link properly? </li>\n<li>If not, why not? I can explicitly instantiate template methods that\nare not specialized just fine. Why not the same for full specializations?</li>\n</ul>\n</hr></hr>", "AcceptedAnswerId": "14079488", "Title": "Template method specialization linking error", "CreationDate": "2012-12-29T03:12:09.513", "Id": "14078381", "CommentCount": "9", "FavoriteCount": "2", "PostTypeId": "1", "LastActivityDate": "2014-08-08T15:36:13.403", "Score": "8", "OwnerUserId": "368599", "Tags": "<c++><templates><c++03>", "AnswerCount": "1"}, "14079488": {"Id": "14079488", "PostTypeId": "2", "Body": "<p>Although WhozCraig's answer (now deleted) provides the correct code to solve your problem, here are some direct answers to your questions, including comments on your code:</p>\n<ol>\n<li><p><code>foo&lt;int&gt;()</code> and <code>foo&lt;float&gt;()</code> are explicit specializations of a member template. Those must not appear inside the definition of the class they belong to. The Standard says:</p>\n<blockquote>\n<p id=\"so_14078381_14079488_0\">(\u00a714.7.3/3) [...] The de\ufb01nition of a class or class template shall precede the declaration of an explicit specialization for a member template of the class or class template. [...]</p>\n</blockquote>\n<p>So you must put them after the class definition.</p></li>\n<li><p>In the case of <code>foo&lt;int&gt;</code>, which is fully defined in the header file, this implies that you must put the word <code>inline</code> before the definition; otherwise you will get into trouble with the linker if the header file is included in more than one translation unit.</p></li>\n<li><p>The specialization for <code>foo&lt;float&gt;()</code> is defined in a separate file that is later linked to <code>main.cpp</code>. This is possible, but it requires that a declaration of it be given in the header file (you do this already, but you must do it outside the class definition):</p>\n<pre><code>  template &lt;&gt;\n  void MyClass::foo&lt;float&gt;();\n</code></pre>\n<p>This is required because of another statement in the Standard:</p>\n<blockquote>\n<p id=\"so_14078381_14079488_1\">(\u00a714.7.3/6) If a template, a member template or a member of a class template is explicitly specialized then that specialization shall be declared before the \ufb01rst use of that specialization that would cause an implicit instantiation to take place, in every translation unit in which such a use occurs; no diagnostic is required. [...]</p>\n</blockquote></li>\n<li><p>Since all specializations are <em>explicit</em> (i.e. full specializations, to use your word), there is no need for explicit instantiations, but they are possible (\u00a714.7.2). You would place them at the end of the .cpp file, and the syntax would be:</p>\n<pre><code>template void MyClass::foo&lt;float&gt;();\ntemplate void MyClass::foo&lt;int&gt;();\n</code></pre>\n<p>Again, this is only really useful for types that do <em>not</em> have their own explicit specializations.</p></li>\n</ol>\n<p>The correct code for the header and implementation file therefore looks like this:</p>\n<p>.h file:</p>\n<pre><code>class MyClass\n{\npublic:\n  template &lt;typename T&gt; void foo()\n  { cout &lt;&lt; \"Template function&lt;T&gt; called\" &lt;&lt; endl; }\n};\n\ntemplate &lt;&gt; inline void MyClass::foo&lt;int&gt;()\n{ cout &lt;&lt; \"Template function&lt;int&gt; called\" &lt;&lt; endl; }\n\ntemplate &lt;&gt; void MyClass::foo&lt;float&gt;();\n</code></pre>\n<p>.cpp:</p>\n<pre><code>#include \"myClass.h\"\n\ntemplate &lt;&gt; void MyClass::foo&lt;float&gt;()\n{ cout &lt;&lt; \"Template function&lt;float&gt; called\" &lt;&lt; endl; }\n\n/* This is unnecessary for float, but may be useful for\n   types that do not have their own explicit specializations: */\ntemplate void MyClass::foo&lt;float&gt;();\n</code></pre>\n", "LastEditorUserId": "777186", "LastActivityDate": "2014-08-08T15:36:13.403", "Score": "14", "CreationDate": "2012-12-29T07:02:17.937", "ParentId": "14078381", "CommentCount": "5", "LastEditDate": "2014-08-08T15:36:13.403", "OwnerUserId": "777186"}});