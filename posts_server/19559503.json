post_cb({"bq_ids": {"n4140": {"so_19559503_19559684_0": {"length": 5, "quality": 0.7142857142857143, "section_id": 460}}, "n3337": {"so_19559503_19559684_0": {"length": 5, "quality": 0.7142857142857143, "section_id": 451}}, "n4659": {"so_19559503_19559684_0": {"length": 5, "quality": 0.7142857142857143, "section_id": 382}}}, "19559684": {"Id": "19559684", "PostTypeId": "2", "Body": "<p>C++11 rules for automatic generation of special members aren't as simple as you posted them. The most important distinction is that in some cases, the member is implicitly declared, but defined as deleted. That's what happens in your case.</p>\n<p>C++11, [class.copy]\u00a711:</p>\n<blockquote>\n<p id=\"so_19559503_19559684_0\">A defaulted copy/move constructor for a class <code>X</code> is defined as deleted (8.4.3) if <code>X</code> has:</p>\n<ul>\n<li>a variant member with a non-trivial corresponding constructor and <code>X</code> is a union-like class,</li>\n<li><strong>a non-static data member of class type <code>M</code> (or array thereof) that cannot be copied/moved because overload resolution (13.3), as applied to <code>M</code>'s corresponding constructor, results in an ambiguity or a function that is deleted or inaccessible from the defaulted constructor,</strong></li>\n<li>a direct or virtual base class <code>B</code> that cannot be copied/moved because overload resolution (13.3), as applied to <code>B</code>'s corresponding constructor, results in an ambiguity or a function that is deleted or inaccessible from the defaulted constructor,</li>\n<li>any direct or virtual base class or non-static data member of a type with a destructor that is deleted or inaccessible from the defaulted constructor,</li>\n<li>for the copy constructor, a non-static data member of rvalue reference type, or</li>\n<li>for the move constructor, a non-static data member or direct or virtual base class with a type that does not have a move constructor and is not trivially copyable.</li>\n</ul>\n</blockquote>\n<p>(Emphasis mine)</p>\n<hr>\n<p>More generally, the rules for auto-generated class members are:</p>\n<ul>\n<li><p>If the class has no user-provided constructors, a default constructor is declared.</p></li>\n<li><p>If the class doesn't have a user-provided copy constructor, one is declared.</p></li>\n<li><p>If the class has none of { user-provided copy or move constructor, user-provided copy or move assignment operator, user-provided destructor }, a move constructor will be declared (but see (*) below).</p></li>\n<li><p>If the class doesn't have a user-provided copy assignment operator, one is declared.</p></li>\n<li><p>If the class has none of { user-provided copy or move constructor, user-provided copy or move assignment operator, user-provided destructor }, a move assignment operator will be declared (but see (*) below).</p></li>\n<li><p>If the class doesn't have a user-provided destructor, one is declared.</p></li>\n</ul>\n<p>Any automatically declared member can be defined as defaulted (doing the default stuff) or defined as deleted (if you try to use it, you get an error). The rule of thumb is \"If the defaulted version makes sense, it will be defined as defaulted. Otherwise, it will be defined as deleted.\"</p>\n<p>In this context, \"makes sense\" means \"doesn't try to call a deleted, ambiguous, inaccessible or otherwise illegal function.\" For example, the standard bit I quoted in the first part of this answer lists what doesn't \"make sense\" for copy constructors.</p>\n<p>Additionally, an automatically declared copy constructor or copy assignment operator is defined as deleted if the class has a user-provided move constructor or move assignment operator.</p>\n<p>(*) If an automatically declared move constructor or move assignment operator would be defined as deleted, it is instead not declared at all. This rule exists so that trying to move such a class implicitly falls back to copying it instead of generating an error.</p>\n</hr>", "LastEditorUserId": "1782465", "LastActivityDate": "2013-10-24T07:43:34.523", "Score": "26", "CreationDate": "2013-10-24T07:32:15.690", "ParentId": "19559503", "CommentCount": "3", "LastEditDate": "2013-10-24T07:43:34.523", "OwnerUserId": "1782465"}, "19559503": {"ViewCount": "28910", "Body": "<p>As per C++11 rules 6 things (default constructor, copy constructor, move constructor, copy assignment, move assignment and destructor ) are generated by default. By second rule, when any custom copy, move or destructor is defined then those default operations are not generated. \nBut in my code that follows that is not the case. But this code fails to compile with an error</p>\n<pre><code>call to implicitly deleted copy constructor of 'Uni'\n</code></pre>\n<p>When I write my own copy constructor for Uni everything works fine. (It is commented in the code, given for reference )</p>\n<p>Any thoughts much appreciated.</p>\n<p>Finally , I am running this on Mac, Xcode with LLVM compiler.</p>\n<p>many thanks...</p>\n<pre><code>#include &lt;iostream&gt;\n\nclass A\n{\npublic:\n    A(int i) :num{i}\n    {\n        std::clog&lt;&lt; \"ctor  A() num = \" &lt;&lt; num &lt;&lt; \"\\n\";\n\n    }\n    A( A const &amp;aRef)\n    :num{aRef.num}\n    {\n        std::clog &lt;&lt; \" copy ctor A( A const &amp;aRef) num = \" &lt;&lt; num &lt;&lt; \"\\n\";\n    }\n\n    int value()\n    {\n        return num;\n    }\n\nprivate:\n    int num;\n\n};\nclass Uni\n{\n\npublic:\n    Uni(A* aptr) : up{aptr}\n    {\n        std::clog &lt;&lt; \" ctor Uni value = \" &lt;&lt; up.get()-&gt;value() &lt;&lt; \"\\n\";\n    }\n    /*Uni(Uni const &amp;uRef)\n    {\n        std::clog &lt;&lt; \" copy ctor Uni copying obj pointed by unique_ptr\\n\";\n        up.reset(uRef.up.get() ? new A{*uRef.up.get()} : nullptr);\n    }*/\nprivate:\n    std::unique_ptr&lt;A&gt; up;\n\n};\n\nint main(int argc, const char * argv[])\n{\n    Uni one{new A{10}};\n    Uni two{one}; //default copy ctor is implicitly deleted. why ?\n}\n</code></pre>\n", "AcceptedAnswerId": "19559684", "Title": "Call to implicitly deleted copy constructor in LLVM", "CreationDate": "2013-10-24T07:23:15.710", "Id": "19559503", "CommentCount": "1", "FavoriteCount": "8", "PostTypeId": "1", "LastEditDate": "2017-02-21T13:08:30.427", "LastEditorUserId": "70600", "LastActivityDate": "2017-02-21T13:08:30.427", "Score": "27", "OwnerUserId": "2914557", "Tags": "<c++><c++11><default-copy-constructor>", "AnswerCount": "1"}});