post_cb({"13565742": {"CommentCount": "5", "ViewCount": "619", "CreationDate": "2012-11-26T13:23:18.043", "LastActivityDate": "2012-11-26T14:54:13.440", "Title": "Copy Control in C++", "AcceptedAnswerId": "13565871", "PostTypeId": "1", "Id": "13565742", "Score": "0", "Body": "<pre><code>template &lt;class Type&gt; class Queue {\n\n\n    Queue(): head(0), tail(0) {\n        cout &lt;&lt; \"Queue--default constructor called\" &lt;&lt; endl;\n    }\n\n    Queue(const Queue &amp;Q): head(0), tail(0) {\n        cout &lt;&lt; \"Queue--copy constructor called\" &lt;&lt; endl;\n        //...\n    }\n\n    Queue&amp; operator=(const Queue&amp;) {\n        cout &lt;&lt; \"Queue--operator= called\" &lt;&lt; endl;\n        //...\n    }\n    ~Queue() { //... }\n\nprivate:\n    QueueItem&lt;Type&gt; *head;         \n    QueueItem&lt;Type&gt; *tail;         \n};\n</code></pre>\n<p>I have defined a template class <code>Queue</code> and tried the codes below:</p>\n<pre><code>Queue&lt;char*&gt; cq;\nQueue&lt;char*&gt; ccq(cq);   \nQueue&lt;char*&gt; acq = cq;  \nQueue&lt;char*&gt; acq2;\nacq2 = cq;\n</code></pre>\n<p>and the <strong>output</strong> is:</p>\n<pre><code>Queue--default constructor called\nQueue--copy constructor called\nQueue--copy constructor called\nQueue--default constructor called\nQueue--operator= called\n</code></pre>\n<p>what confuse me is the code <code>Queue&lt;char*&gt; acq = cq;</code> has invoked the copy constructor <code>Queue--copy constructor called</code> but <strong>not</strong> the <code>default constructor and operator=</code> to be called.</p>\n<p>Could any one help me? </p>\n<p>Thank you for considering my question!</p>\n", "Tags": "<c++><constructor><copy-constructor>", "OwnerUserId": "1643704", "AnswerCount": "2"}, "13565871": {"ParentId": "13565742", "CommentCount": "3", "Body": "<p>This is defined in the standard, it's in the section <code>Explicit initialization\n</code></p>\n<blockquote>\n<p id=\"so_13565742_13565871_0\">1\n  Explicit initialization\n  [class.expl.init]\n  An object of class type can be initialized with a parenthesized expression-list, where the expression-list\n  is construed as an argument list for a constructor that is called to initialize the object. Alternatively, a\n  single assignment-expression can be specified as an initializer using the = form of initialization. Either\n  direct-initialization semantics or copy-initialization semantics apply; see 8.5.</p>\n</blockquote>\n<p>This is the case describing <code>single assignment-expression</code> and <code>copy-initialization semantics</code>.</p>\n<p>Technically there's no difference between the two forms <code>ccq(cq)</code> and <code>acq = cq</code>, as you have already seen from the output.</p>\n", "OwnerUserId": "1741542", "PostTypeId": "2", "Id": "13565871", "Score": "3", "CreationDate": "2012-11-26T13:31:08.803", "LastActivityDate": "2012-11-26T13:31:08.803"}, "bq_ids": {"n4140": {"so_13565742_13565871_0": {"section_id": 424, "quality": 0.9142857142857143, "length": 32}}, "n3337": {"so_13565742_13565871_0": {"section_id": 416, "quality": 0.9142857142857143, "length": 32}}, "n4659": {"so_13565742_13565871_0": {"section_id": 442, "quality": 0.9142857142857143, "length": 32}}}, "13565844": {"ParentId": "13565742", "CommentCount": "1", "Body": "<p>This is called \"copy initialization\" and C++ standard requires that</p>\n<pre><code>Queue&lt;char*&gt; acq  = cq;\n</code></pre>\n<p>shall be equivalent to </p>\n<pre><code>Queue&lt;char*&gt; acq (cq);\n</code></pre>\n<p>No mistake here.</p>\n", "Id": "13565844", "PostTypeId": "2", "OwnerDisplayName": "user1773602", "Score": "2", "CreationDate": "2012-11-26T13:28:53.067", "LastActivityDate": "2012-11-26T13:28:53.067"}});