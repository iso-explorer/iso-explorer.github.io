post_cb({"bq_ids": {"n4140": {"so_13473154_13473277_0": {"length": 12, "quality": 1.0, "section_id": 3913}}, "n3337": {"so_13473154_13473277_0": {"length": 12, "quality": 1.0, "section_id": 3773}}, "n4659": {"so_13473154_13473277_0": {"length": 9, "quality": 0.75, "section_id": 4799}}}, "13473277": {"Id": "13473277", "PostTypeId": "2", "Body": "<p>The function claims it returns a <code>bool</code> but it returns nothing. This should result in a compiler warning. If you <strike>use it to assign to something</strike> call the function, the result will be undefined behaviour:</p>\n<pre><code>bool b = SomeFunction(); // UB, SomeFunction is failing to return.\nSomeFunction(); // still undefined behaviour\n</code></pre>\n<p>Only <code>main()</code> is allowed not to explicitly return, in which case it implicitly returns <code>0</code>.</p>\n<p>See here:</p>\n<p>\u00a76.6.3/2:</p>\n<blockquote>\n<p id=\"so_13473154_13473277_0\">Flowing off the end of a function is equivalent to a return with no value; this results in undefined behavior in a value-returning function.</p>\n</blockquote>\n", "LastEditorUserId": "661519", "LastActivityDate": "2012-11-20T12:58:30.790", "Score": "10", "CreationDate": "2012-11-20T12:31:08.830", "ParentId": "13473154", "CommentCount": "3", "OwnerUserId": "661519", "LastEditDate": "2012-11-20T12:58:30.790"}, "13473154": {"ViewCount": "859", "Body": "<pre><code>bool SomeFunction()\n{\n\n}\n</code></pre>\n<p>I cannot run the Borland C++ on my machine but I need to convert from C++ to VB so need help with this function.</p>\n", "Title": "Borland C++ What wil this bool function return?", "CreationDate": "2012-11-20T12:23:14.320", "LastActivityDate": "2014-02-15T09:04:49.990", "CommentCount": "5", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2014-02-15T09:04:49.990", "LastEditorUserId": "1009479", "Id": "13473154", "Score": "2", "OwnerUserId": "1838718", "Tags": "<c++><borland-c++>", "AnswerCount": "3"}, "13473494": {"Id": "13473494", "PostTypeId": "2", "Body": "<p>It should  <code>return true;</code>  or <code>return false;</code></p>\n<pre><code>bool SomeFunction()\n{\n\n    return true;\n\n    // or\n\n    return false;\n\n}\n</code></pre>\n<p>If your compiler does not have bool built in then you can do this:</p>\n<pre><code>typedef int bool;\n#define true 1\n#define false 0\n\nint main(void)\n{\n\n    bool answer;\n    answer = true;\n\n    while(true)\n    {\n\n    }\n\n   return 0;\n}\n</code></pre>\n", "LastEditorUserId": "999884", "LastActivityDate": "2012-11-20T13:07:29.357", "Score": "-1", "CreationDate": "2012-11-20T12:44:34.277", "ParentId": "13473154", "CommentCount": "2", "OwnerUserId": "999884", "LastEditDate": "2012-11-20T13:07:29.357"}, "13971101": {"Id": "13971101", "PostTypeId": "2", "Body": "<p>I've compiled the following code on Borland XE2:</p>\n<pre><code>bool SomeFunction()\n{\n}\n\nint main()\n{\n    bool x = SomeFunction();\n    // ...\n}\n</code></pre>\n<p><code>SomeFunction()</code> translated to the following x86 assembler code:</p>\n<pre><code>push ebp\nmov ebp,esp\npop ebp\nret\n</code></pre>\n<p>The assignment in <code>main()</code> translated to:</p>\n<pre><code>call SomeFunction()\nmov [ebp-$31],al\n</code></pre>\n<p>where <code>[ebp-$31]</code> is the location of <code>x</code>. That means, the content of register <code>al</code> will end up in <code>bool x</code>. If <code>al</code> was 0, <code>x</code> will be false, otherwise <code>x</code> will be true. On my system, this was always true, but this depends on the context. Also you may get different results for debug and release.</p>\n<p>The conclusion is, of course, x is undefined. The given code is a bit like writing</p>\n<pre><code>bool x;\nif (x)\n{\n    // ...\n}\n</code></pre>\n<p>I am inclined to think that the definition of <code>SomeFunction()</code> should trigger not just a compiler warning, but an error. Visual C++ does so, I don't know about other compilers.</p>\n", "LastActivityDate": "2012-12-20T11:23:04.400", "CommentCount": "0", "CreationDate": "2012-12-20T11:23:04.400", "ParentId": "13473154", "Score": "1", "OwnerUserId": "863725"}});