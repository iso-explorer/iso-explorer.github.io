post_cb({"15057271": {"Id": "15057271", "PostTypeId": "2", "Body": "<p>You're mixing apples, oranges, pears and kumquats :)</p>\n<p>Yes, \"\\xc4\" is a legal character literal. Specifically, what the standard calls a \"narrow character literal\".</p>\n<p>From the C++ standard:</p>\n<blockquote>\n<p id=\"so_15057233_15057271_0\">The glyphs for the members of the basic source character set are\n  intended to identify characters from the subset of ISO/IEC 10646 which\n  corresponds to the ASCII character set. However, because the mapping\n  from source file characters to the source character set (described in\n  translation phase 1) is specified as implementation-defined, an\n  implementation is required to document how the basic source characters\n  are represented in source files.</p>\n</blockquote>\n<p>This might help clarify:</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/10220401/c-string-literals-escape-character\">Rules for C++ string literals escape character</a></li>\n</ul>\n<p>This will might also help, if you're not familiar with it:</p>\n<ul>\n<li><a href=\"http://www.joelonsoftware.com/articles/Unicode.html\" rel=\"nofollow noreferrer\">The absolute minimum every software developer should know about Unicode</a></li>\n</ul>\n<p>Here is another good, concise - and illuminating - reference:</p>\n<ul>\n<li><a href=\"http://publib.boulder.ibm.com/infocenter/macxhelp/v6v81/index.jsp?topic=%2Fcom.ibm.vacpp6m.doc%2Flanguage%2Fref%2Fclrc02ccon.htm\" rel=\"nofollow noreferrer\">IBM Developerworks: Character literals</a></li>\n</ul>\n", "LastEditorUserId": "-1", "LastActivityDate": "2013-02-24T22:12:52.773", "Score": "0", "CreationDate": "2013-02-24T22:12:52.773", "ParentId": "15057233", "CommentCount": "2", "OwnerUserId": "421195", "LastEditDate": "2017-05-23T11:43:21.253"}, "bq_ids": {"n4140": {"so_15057233_15057583_0": {"length": 9, "quality": 0.8181818181818182, "section_id": 5346}, "so_15057233_15057271_0": {"length": 40, "quality": 0.975609756097561, "section_id": 5314}, "so_15057233_15057233_1": {"length": 23, "quality": 0.8518518518518519, "section_id": 5346}, "so_15057233_15057233_0": {"length": 31, "quality": 0.9393939393939394, "section_id": 5343}, "so_15057233_15058572_0": {"length": 16, "quality": 0.9411764705882353, "section_id": 5343}}, "n3337": {"so_15057233_15057271_0": {"length": 40, "quality": 0.975609756097561, "section_id": 5111}, "so_15057233_15057233_1": {"length": 23, "quality": 0.8518518518518519, "section_id": 5143}, "so_15057233_15057583_0": {"length": 9, "quality": 0.8181818181818182, "section_id": 5143}, "so_15057233_15058572_0": {"length": 12, "quality": 0.7058823529411765, "section_id": 5140}, "so_15057233_15057233_0": {"length": 31, "quality": 0.9393939393939394, "section_id": 5140}}, "n4659": {"so_15057233_15057271_0": {"length": 39, "quality": 0.9512195121951219, "section_id": 6738}, "so_15057233_15057233_1": {"length": 22, "quality": 0.8148148148148148, "section_id": 6771}, "so_15057233_15057583_0": {"length": 8, "quality": 0.7272727272727273, "section_id": 6771}, "so_15057233_15058572_0": {"length": 16, "quality": 0.9411764705882353, "section_id": 6765}, "so_15057233_15057233_0": {"length": 31, "quality": 0.9393939393939394, "section_id": 6765}}}, "15058572": {"Id": "15058572", "PostTypeId": "2", "Body": "<p>\u00a72.14.3 paragraph 1 is undoubtedly the relevant text in the (C++11) standard. However, there were several defects in the original text, and the latest version contains the following text, emphasis added:</p>\n<blockquote>\n<p id=\"so_15057233_15058572_0\">A multicharacter literal, or <em>an ordinary character literal containing a single c-char not representable in the execution character set</em>, is conditionally-supported, <em>has type int</em>, and has an implementation-defined value.</p>\n</blockquote>\n<p>Although this has been accepted as a <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#912\" rel=\"nofollow\">defect</a>, it does not actually form part of any standard. However, it stands as a recommendation and I suspect that many compilers will implement it.</p>\n", "LastActivityDate": "2013-02-25T00:48:58.397", "CommentCount": "5", "CreationDate": "2013-02-25T00:48:58.397", "ParentId": "15057233", "Score": "2", "OwnerUserId": "1566221"}, "15057233": {"ViewCount": "1318", "Body": "<p>Consider a C++11 compiler that has an execution character set of UTF-8 (and is compliant with the x86-64 ABI which requires the <code>char</code> type be a signed 8-bit byte).</p>\n<p>The letter \u00c4 (umlaut) has unicode code point of <code>0xC4</code>, and has a 2 code unit UTF-8 representation of <code>{0xC3, 0x84}</code></p>\n<p>The compiler assigns the character literal <code>'\\xC4'</code> a type of <code>int</code> with a value of <code>0xC4</code>.</p>\n<p>Is the compiler standard-compliant and ABI-compliant?  What is your reasoning?</p>\n<p>Relevant quotes from C++11 standard:</p>\n<p>2.14.3.1</p>\n<blockquote>\n<p id=\"so_15057233_15057233_0\">An ordinary character literal that contains a single c-char has type char, with value equal to the numerical value of the encoding of the c-char in the execution character set. An ordinary character literal that contains more than\n  one c-char is a multicharacter literal. A multicharacter literal has type int and implementation-defined\n  value.</p>\n</blockquote>\n<p>2.14.3.4</p>\n<blockquote>\n<p id=\"so_15057233_15057233_1\">The escape \\xhhh consists of the backslash followed by x followed by\n  one or more hexadecimal digits that are taken to specify the value of the desired character. The value of a character\n  literal is implementation-defined if it falls outside of the implementation-defined range defined for char</p>\n</blockquote>\n", "AcceptedAnswerId": "15058572", "Title": "C++11 character literal '\\xC4' standard type with UTF-8 execution character set?", "CreationDate": "2013-02-24T22:08:02.337", "Id": "15057233", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2013-02-25T00:50:19.910", "LastEditorUserId": "1131467", "LastActivityDate": "2013-02-25T00:50:19.910", "Score": "2", "OwnerUserId": "1131467", "Tags": "<c++><unicode><utf-8><c++11><x86-64>", "AnswerCount": "3"}, "15057583": {"Id": "15057583", "PostTypeId": "2", "Body": "<p>From 2.1.14.3p4: </p>\n<blockquote>\n<p id=\"so_15057233_15057583_0\">The value of a character literal is implementation-defined if it falls outside of the implementation-defined range defined for <code>char</code></p>\n</blockquote>\n<p>x86 compilers historically (and as you point out, that practice is now an official standard of some sort) have signed <code>char</code>s. <code>\\xc7</code> is out of range for that, so the implementation is required to document the literal value it will produce.</p>\n<p>It looks like your implementation promotes out-of-range char literals specified with \\x escapes to (in-range) integer literals.</p>\n", "LastEditorUserId": "1290731", "LastActivityDate": "2013-02-24T22:55:25.510", "Score": "1", "CreationDate": "2013-02-24T22:44:57.517", "ParentId": "15057233", "CommentCount": "6", "OwnerUserId": "1290731", "LastEditDate": "2013-02-24T22:55:25.510"}});