post_cb({"38717447": {"CommentCount": "3", "ViewCount": "174", "PostTypeId": "1", "LastEditorUserId": "3309790", "CreationDate": "2016-08-02T10:04:46.110", "LastActivityDate": "2016-08-02T12:06:32.037", "Title": "Why can a derived class not access a protected member of its base class through a pointer to base?", "LastEditDate": "2016-08-02T10:35:19.470", "Id": "38717447", "Score": "5", "Body": "<p>This is the <a href=\"http://coliru.stacked-crooked.com/a/04f05e3845e6ccea\" rel=\"nofollow\">code</a>:</p>\n<pre><code>class TestA\n{\nprotected:\n    int test=12;\n\npublic:\n    TestA() {\n        cout &lt;&lt; \"test a: \" &lt;&lt; test &lt;&lt; endl;\n    }\n    ~TestA() {\n    }\n};\n\nclass TestB : public TestA\n{   \npublic:\n    TestB(TestA *testA) {\n        cout &lt;&lt; \"test b: \" &lt;&lt; testA-&gt;test;\n    }\n    ~TestB() {\n    }\n};\n\nint main ()\n{\n    TestA *pTestA=new TestA();\n    TestB *pTestB=new TestB(pTestA);\n}\n</code></pre>\n<p>I'm trying to access of a <code>protected</code> member using a pointer pointing to a <code>TestA</code> type object (thus, an instance of <code>TestA</code>). <code>TestB</code> is also derived from <code>TestA</code></p>\n<p>Why I can't access to it? Is it accessible only \"within\" the class where I need it? Not outside using pointer/direct declarations?</p>\n", "Tags": "<c++><inheritance><scope><protected>", "OwnerUserId": "365251", "AnswerCount": "2"}, "38717508": {"ParentId": "38717447", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>When public inherite from the base class, its protected members become <strong>the derived class'</strong> protect members, which could be accessed in derived class' member functions. But they could only be accessed through the <strong>derived class itself</strong> (and its derived classes), can't be accessed through the base class. So you can't access member <code>test</code> via pointer of <code>TestA</code>, but it'll be fine to access it via pointer of <code>TestB</code>.</p>\n<p>The standard gives some illustrative samples for this. <a href=\"http://eel.is/c++draft/class.protected#1\" rel=\"nofollow\">$11.4/1 Protected member access [class.protected]</a>:</p>\n<p>(Only keep a part of the example code)</p>\n<blockquote>\n<p id=\"so_38717447_38717508_0\">An additional access check beyond those described earlier in Clause\n  [class.access] is applied when a non-static data member or non-static\n  member function is a protected member of its naming class\n  ([class.access.base])114 As described earlier, access to a protected\n  member is granted because the reference occurs in a friend or member\n  of some class C. If the access is to form a pointer to member\n  ([expr.unary.op]), the nested-name-specifier shall denote C or a class\n  derived from C. All other accesses involve a (possibly implicit)\n  object expression ([expr.ref]). In this case, the class of the object\n  expression shall be C or a class derived from C. [ Example:</p>\n<pre><code>class B {\nprotected:\n  int i;\n};\n\nclass D1 : public B {\n};\n\nclass D2 : public B {\n  void mem(B*,D1*);\n};\n\nvoid D2::mem(B* pb, D1* p1) {\n  pb-&gt;i = 1;                    // ill-formed\n  p1-&gt;i = 2;                    // ill-formed\n  i = 3;                        // OK (access through this)\n  B::i = 4;                     // OK (access through this, qualification ignored)\n}\n</code></pre>\n<p id=\"so_38717447_38717508_1\">\u2014 end example ]</p>\n</blockquote>\n<p>I'm not sure about your design's intent, making <code>TestB</code> friend of <code>TestA</code> would be a straightforward solution.</p>\n", "OwnerUserId": "3309790", "LastEditorUserId": "3309790", "LastEditDate": "2016-08-02T11:00:15.863", "Id": "38717508", "Score": "7", "CreationDate": "2016-08-02T10:07:33.867", "LastActivityDate": "2016-08-02T11:00:15.863"}, "bq_ids": {"n4140": {"so_38717447_38717508_0": {"section_id": 6695, "quality": 0.9180327868852459, "length": 56}}, "n3337": {"so_38717447_38717508_0": {"section_id": 6450, "quality": 0.9180327868852459, "length": 56}}, "n4659": {"so_38717447_38717508_0": {"section_id": 8170, "quality": 0.9180327868852459, "length": 56}}}, "38719990": {"ParentId": "38717447", "CommentCount": "0", "Body": "<p>Concept of accessibility of class members by WORLD is applicable here.\nWORLD can access only public members of class irrespective of how they are created/derived.</p>\n<p>Consider the example below:</p>\n<pre><code>class A\n{\n    public:\n        int public_i;\n    protected:\n        int protected_i;\n    private:\n        int private_i;\n\n    public:\n        A()\n        {\n            public_i = 10;\n            protected_i = 20;\n            private_i = 30;\n        }\n};\n\nclass C : protected A\n{\n    public:\n        void Access(void)\n        {\n            cout &lt;&lt; public_i &lt;&lt; endl;\n            cout &lt;&lt; protected_i &lt;&lt; endl;\n            //cout &lt;&lt; private_i &lt;&lt; endl; // &lt;- Not Allowed b'coz its private here\n        }\n};\nclass D : private A\n{\n    public:\n        void Access(void)\n        {\n            cout &lt;&lt; public_i &lt;&lt; endl;\n            cout &lt;&lt; protected_i &lt;&lt; endl;\n            //cout &lt;&lt; private_i &lt;&lt; endl; // &lt;- Not Allowed b'coz its private here\n        }\n};\nclass B : public A\n{\n    public:\n        void Access(D *pd)\n        {\n            cout &lt;&lt; public_i &lt;&lt; endl;\n            cout &lt;&lt; protected_i &lt;&lt; endl;\n            //cout &lt;&lt; private_i &lt;&lt; endl; // &lt;- Not Allowed b'coz its private here\n\n            //pd is WORLD here\n            //cout &lt;&lt; pd-&gt;public_i &lt;&lt; endl;    // &lt;- Not Allowed b'coz its private here since private inheritance of A by D\n            //cout &lt;&lt; pd-&gt;protected_i &lt;&lt; endl; // &lt;- Not Allowed b'coz its protected here\n            //cout &lt;&lt; pd-&gt;private_i &lt;&lt; endl; // &lt;- Not Allowed b'coz its private here\n        }\n};\n\n\nint main ()\n{\n    A objA;\n    cout &lt;&lt; objA.public_i &lt;&lt; endl;\n    //cout &lt;&lt; objA.protected_i &lt;&lt; endl; // &lt;- Not Allowed b'coz its protected here\n    //cout &lt;&lt; objA.private_i &lt;&lt; endl;   // &lt;- Not Allowed b'coz its private here\n\n    B objB;\n    cout &lt;&lt; objB.public_i &lt;&lt; endl;\n    //cout &lt;&lt; objB.protected_i &lt;&lt; endl; // &lt;- Not Allowed b'coz its protected here\n    //cout &lt;&lt; objB.private_i &lt;&lt; endl;   // &lt;- Not Allowed b'coz its private here\n\n    C objC;\n    //cout &lt;&lt; objC.public_i &lt;&lt; endl;    // &lt;- Not Allowed b'coz its protected here\n    //cout &lt;&lt; objC.protected_i &lt;&lt; endl; // &lt;- Not Allowed b'coz its protected here\n    //cout &lt;&lt; objC.private_i &lt;&lt; endl;   // &lt;- Not Allowed b'coz its private here\n\n    D objD;\n    //cout &lt;&lt; objD.public_i &lt;&lt; endl;    // &lt;- Not Allowed b'coz its private here\n    //cout &lt;&lt; objD.protected_i &lt;&lt; endl; // &lt;- Not Allowed b'coz its protected here\n    //cout &lt;&lt; objD.private_i &lt;&lt; endl;   // &lt;- Not Allowed b'coz its private here\n\n    //Outside class its all WORLD and WORLD can access only public members.\n    //Objects and Pointers are WORLD.\n\n    //Same thing is applicable when class members are accessed via pointers.\n    B *pobjB;       //pobjB is WORLD\n    cout &lt;&lt; pobjB-&gt;public_i &lt;&lt; endl;\n    //cout &lt;&lt; pobjB-&gt;protected_i &lt;&lt; endl; // &lt;- Not Allowed b'coz its protected here\n    //cout &lt;&lt; pobjB-&gt;private_i &lt;&lt; endl;   // &lt;- Not Allowed b'coz its private here\n\n    objB.Access(&amp;objD);\n    objC.Access();\n    objD.Access();\n\n    return 0;\n}\n</code></pre>\n", "OwnerUserId": "4635537", "PostTypeId": "2", "Id": "38719990", "Score": "0", "CreationDate": "2016-08-02T12:06:32.037", "LastActivityDate": "2016-08-02T12:06:32.037"}});