post_cb({"29962030": {"ParentId": "29961462", "CommentCount": "0", "Body": "<p>Your code will compile but calling </p>\n<pre><code>int iTmp; \na(iTmp);\n</code></pre>\n<p>will yield an ambiguous overload resolution call since both</p>\n<pre><code>void a(int val)\n{\n    cout&lt;&lt;val;\n}\nvoid a(int &amp;val)\n{\n    cout&lt;&lt;val;\n}\n</code></pre>\n<p>will match.</p>\n<p>The reason for this lies in the standard:</p>\n<p>[over.match.best]</p>\n<blockquote>\n<p id=\"so_29961462_29962030_0\">A viable function F1 is defined to be a better function than another viable function F2 if for all arguments i, ICSi(F1) is not a worse conversion sequence than ICSi(F2)</p>\n</blockquote>\n<pre><code>int-&gt;int\nint-&gt;int&amp;\n</code></pre>\n<p>these are standard conversion sequences and the entire list of <code>[over.ics.rank]p3.2</code> is checked without success for a better conversion sequence (<strong>exact match</strong> in both cases)</p>\n<p>They are thus deemed \"undistinguishable\".</p>\n<p>A word of advice: the variable are also not initialized and (if automatic variables) even if your code compiled, the output would be undefined.</p>\n", "OwnerUserId": "1938163", "PostTypeId": "2", "Id": "29962030", "Score": "2", "CreationDate": "2015-04-30T07:51:17.293", "LastActivityDate": "2015-04-30T07:51:17.293"}, "29961822": {"ParentId": "29961462", "CommentCount": "0", "Body": "<p>These two function will cause issues</p>\n<pre><code>void a(int val)\n{\n    cout&lt;&lt;val;\n}\nvoid a(int &amp;val)\n{\n    cout&lt;&lt;val;\n}\n</code></pre>\n<p>Your call <code>a(iTmp);</code> have two possible candidates. Compiler should shown an error for these. Otherwise pointer argument(<code>int *val</code>)and double argument(<code>double val</code>) are okay. </p>\n", "OwnerUserId": "2156785", "PostTypeId": "2", "Id": "29961822", "Score": "0", "CreationDate": "2015-04-30T07:40:40.780", "LastActivityDate": "2015-04-30T07:40:40.780"}, "29961462": {"CommentCount": "13", "ViewCount": "92", "PostTypeId": "1", "LastEditorUserId": "2659313", "CreationDate": "2015-04-30T07:21:23.960", "LastActivityDate": "2015-04-30T08:06:10.143", "Title": "Is this function overloading correct?", "AcceptedAnswerId": "29961659", "LastEditDate": "2015-04-30T07:25:07.570", "Id": "29961462", "Score": "4", "Body": "<p>Consider having these four functions in one C++ program:</p>\n<pre><code>void a(int val)\n{\n    cout&lt;&lt;val;\n}\nvoid a(int &amp;val)\n{\n    cout&lt;&lt;val;\n}\nvoid a(int *val)\n{\n    cout&lt;&lt;val;\n}\nvoid a(double val)\n{\n    cout&lt;&lt;val;\n}\n</code></pre>\n<p>Few Questions i have are:</p>\n<p>Is there going to be any error in the code? or are they all overloaded without any error.\nCan you tell me how to call all of these four functions correctly? My try was below:</p>\n<pre><code>int iTmp; \nint *pTmp; \ndouble dTmp;\n\na(iTmp); \na(iTmp); \na(pTmp); \na(dTmp);\n</code></pre>\n", "Tags": "<c++><function-overloading>", "OwnerUserId": "2929162", "AnswerCount": "5"}, "29961913": {"ParentId": "29961462", "CommentCount": "0", "Body": "<p>The most obvious problem is that </p>\n<pre><code>  void a(int val) { \n</code></pre>\n<p>and  </p>\n<pre><code>void a(int&amp; val) { \n</code></pre>\n<p>are ambiguous when called with <code>iTmp</code>.</p>\n<p>Aside from that, depending on whether the variables are global or local ones, the code is using uninitialized variables -&gt; UB and whether or not, </p>\n<pre><code>void a(int* val) {\n   std::cout &lt;&lt; val &lt;&lt; std::endl;\n}\n</code></pre>\n<p>is overloaded correctly is up for debate. I'd assume that it should be <code>std::cout &lt;&lt; *val &lt;&lt; std::endl;</code>, but that of course depends on what the function is supposed to do (although a function that prints an address would usually be parameterized by (void* or char*);</p>\n", "OwnerUserId": "2881849", "PostTypeId": "2", "Id": "29961913", "Score": "0", "CreationDate": "2015-04-30T07:45:08.437", "LastActivityDate": "2015-04-30T07:45:08.437"}, "29961682": {"ParentId": "29961462", "CommentCount": "0", "Body": "<p>The compiler must be able to know what function to call.</p>\n<p>With </p>\n<pre><code>int i = 12;\na(i);\n</code></pre>\n<p>both <code>a(int i)</code> and <code>c(int&amp; i)</code> are acceptable candidates and compiler throws an error.</p>\n<p>and </p>\n<pre><code>void a(const int&amp; i) { ... }\n</code></pre>\n<p>will suffer from same problem.</p>\n", "OwnerUserId": "3545273", "PostTypeId": "2", "Id": "29961682", "Score": "0", "CreationDate": "2015-04-30T07:31:44.930", "LastActivityDate": "2015-04-30T07:31:44.930"}, "29961659": {"ParentId": "29961462", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>The only problem are the functions:</p>\n<pre><code>void a(int &amp;val)\n</code></pre>\n<p>and</p>\n<pre><code>void a(int val)\n</code></pre>\n<p>The compiler will create the following errors:</p>\n<pre><code>Compilation error   time: 0 memory: 3140 signal:0\nprog.cpp: In function 'int main()':\nprog.cpp:28:8: error: call of overloaded 'a(int&amp;)' is ambiguous\n  a(iTmp); \n        ^\n</code></pre>\n<p>Because he cant distinguish both, if you remove one of them the compilation succeeds</p>\n<p>See Example:</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nvoid a(int val)\n{\n    cout&lt;&lt;val;\n}\nvoid a(int *val)\n{\n    cout&lt;&lt;val;\n}\nvoid a(double val)\n{\n    cout&lt;&lt;val;\n}\n\nint main() {\n    int iTmp = 0; \n    int *pTmp = 0; \n    double dTmp = 0.0;\n\n    a(iTmp); \n    a(iTmp); \n    a(pTmp); \n    a(dTmp);\n    return 0;\n}\n</code></pre>\n<p>See working example:</p>\n<p><a href=\"http://ideone.com/WRZUoW\" rel=\"nofollow\">http://ideone.com/WRZUoW</a></p>\n", "OwnerUserId": "2165134", "LastEditorUserId": "2165134", "LastEditDate": "2015-04-30T08:04:39.683", "Id": "29961659", "Score": "3", "CreationDate": "2015-04-30T07:30:40.120", "LastActivityDate": "2015-04-30T08:04:39.683"}, "bq_ids": {"n4140": {"so_29961462_29962030_0": {"section_id": 603, "quality": 0.8235294117647058, "length": 14}}, "n3337": {"so_29961462_29962030_0": {"section_id": 593, "quality": 0.8235294117647058, "length": 14}}, "n4659": {"so_29961462_29962030_0": {"section_id": 629, "quality": 0.8235294117647058, "length": 14}}}});