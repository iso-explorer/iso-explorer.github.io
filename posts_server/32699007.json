post_cb({"32699213": {"ParentId": "32699007", "CommentCount": "0", "Body": "<p>As far as I can tell, yes. The restrictions are, from [dcl.constexpr]:</p>\n<blockquote>\n<p id=\"so_32699007_32699213_0\">The definition of a <code>constexpr</code> function shall satisfy the following constraints:<br>\n  \u2014 it shall not be virtual (10.3);<br>\n  \u2014 its return type shall be a literal type;<br>\n  \u2014 each of its parameter types shall be a literal type;<br>\n  \u2014 its <em>function-body</em> shall be <code>= delete</code>, <code>= default</code>, or a <em>compound-statement</em> that does not contain  </br></br></br></br></p>\n<ul>\n<li>an <em>asm-definition</em>,  </li>\n<li>a <code>goto</code> statement,  </li>\n<li>a <em>try-block</em>, or  </li>\n<li>a definition of a variable of non-literal type or of static or thread storage duration or for which\n  no initialization is performed.</li>\n</ul>\n</blockquote>\n<p>The function meets all those requirements. </p>\n", "OwnerUserId": "2069064", "PostTypeId": "2", "Id": "32699213", "Score": "3", "CreationDate": "2015-09-21T15:35:52.657", "LastActivityDate": "2015-09-21T15:35:52.657"}, "32699007": {"CommentCount": "5", "AcceptedAnswerId": "32699790", "PostTypeId": "1", "LastEditorUserId": "2069064", "CreationDate": "2015-09-21T15:26:39.487", "LastActivityDate": "2015-09-21T16:06:01.303", "LastEditDate": "2015-09-21T15:41:21.080", "ViewCount": "451", "FavoriteCount": "2", "Title": "In C++14 can a constexpr member change a data member?", "Id": "32699007", "Score": "3", "Body": "<p>In C++14, since <code>constexpr</code> are not implicitly <code>const</code> anymore, can a <code>constexpr</code> member function modify a data member of a class:</p>\n<pre><code>struct myclass\n{\n    int member;\n    constexpr myclass(int input): member(input) {}\n    constexpr void f() {member = 42;} // Is it allowed?\n};\n</code></pre>\n", "Tags": "<c++><const><c++14><member><constexpr>", "OwnerUserId": "882932", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_32699007_32699790_1": {"section_id": 5419, "quality": 1.0, "length": 7}, "so_32699007_32699790_2": {"section_id": 568, "quality": 0.6666666666666666, "length": 6}, "so_32699007_32699213_0": {"section_id": 5419, "quality": 0.9259259259259259, "length": 25}, "so_32699007_32699790_0": {"section_id": 5419, "quality": 0.8333333333333334, "length": 5}}, "n3337": {"so_32699007_32699790_1": {"section_id": 5214, "quality": 0.7142857142857143, "length": 5}, "so_32699007_32699790_2": {"section_id": 559, "quality": 0.6666666666666666, "length": 6}, "so_32699007_32699213_0": {"section_id": 5214, "quality": 0.8518518518518519, "length": 23}, "so_32699007_32699790_0": {"section_id": 5214, "quality": 1.0, "length": 6}}, "n4659": {"so_32699007_32699790_1": {"section_id": 6841, "quality": 1.0, "length": 7}, "so_32699007_32699790_2": {"section_id": 591, "quality": 0.6666666666666666, "length": 6}, "so_32699007_32699213_0": {"section_id": 6841, "quality": 0.8888888888888888, "length": 24}, "so_32699007_32699790_0": {"section_id": 6841, "quality": 0.8333333333333334, "length": 5}}}, "32699790": {"ParentId": "32699007", "CommentCount": "0", "Body": "<p>Yes they are, I believe this change started with <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3598.html\" rel=\"nofollow\">proposal N3598: constexpr member functions and implicit const</a> and eventually became part of <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3652.html\" rel=\"nofollow\">N3652: Relaxing constraints on constexpr functions</a> which changed section <code>7.1.5</code> paragraph <code>3</code> what is allowed in the function body from a white-list:</p>\n<blockquote>\n<p id=\"so_32699007_32699790_0\">its function-body shall be = delete, = default, or a\n  compound-statement that contains only</p>\n<ul>\n<li>null statements,</li>\n<li>static_assert-declarations</li>\n<li>typedef declarations and alias-declarations that do not define classes or enumerations,</li>\n<li>using-declarations,</li>\n<li>using-directives,</li>\n<li>and exactly one return statement;</li>\n</ul>\n</blockquote>\n<p>to a black-list:</p>\n<blockquote>\n<p id=\"so_32699007_32699790_1\">its function-body shall be = delete, = default, or a compound-statement that does not contain</p>\n<ul>\n<li>an asm-definition,</li>\n<li>a goto statement,</li>\n<li>a try-block, or</li>\n<li>a definition of a variable of non-literal type or of static or thread storage duration or for which\n  no initialization is performed.</li>\n</ul>\n</blockquote>\n<p>and also added the following notes to section <code>C.3.3</code> Clause 7: declarations:</p>\n<blockquote>\n<p id=\"so_32699007_32699790_2\">Change: constexpr non-static member functions are not implicitly const\n  member functions.</p>\n<p id=\"so_32699007_32699790_3\">Rationale: Necessary to allow constexpr member functions to mutate the\n  object.</p>\n<p id=\"so_32699007_32699790_4\">Effect on original feature: Valid C++ 2011 code may fail to compile in\n  this International Standard. For example, the following code is valid\n  in C++ 2011 but invalid in this International Standard because it\n  declares the same member function twice with different return types:</p>\n<pre><code>struct S {\n constexpr const int &amp;f();\n int &amp;f();\n};\n</code></pre>\n</blockquote>\n", "OwnerUserId": "1708801", "PostTypeId": "2", "Id": "32699790", "Score": "2", "CreationDate": "2015-09-21T16:06:01.303", "LastActivityDate": "2015-09-21T16:06:01.303"}});