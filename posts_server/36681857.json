post_cb({"36681857": {"CommentCount": "0", "ViewCount": "116", "CreationDate": "2016-04-17T20:29:26.763", "LastActivityDate": "2016-04-18T14:26:40.057", "Title": "variadic template in nested class", "AcceptedAnswerId": "36682341", "PostTypeId": "1", "Id": "36681857", "Score": "1", "Body": "<p>I'm experimenting with variadic template and got a strange problem, where I don't really understand why the error message is raised.  </p>\n<pre class=\"lang-cpp prettyprint-override\"><code>template&lt;int v0, int ...Vs&gt;\nclass Foo\n{\npublic:\n    template&lt;typename nested = void,\n        typename = void&gt;\n    class Reduce\n    {\n    public:\n        static int const value = v0;\n    };\n\n    template&lt;typename nested&gt;\n    class Reduce&lt;nested,\n        typename std::enable_if&lt;0&lt;sizeof...(Vs)&gt;::type&gt;\n    {\n    public:\n        static int const value = v0 + Foo&lt;Vs...&gt;::template Reduce&lt;&gt;::value;\n    };\n};\n</code></pre>\n<p>This Code brings the error message  </p>\n<pre><code>//example code\nint s = Foo&lt;0,1,2,3,4,5&gt;::Reduce&lt;&gt;::value;\nstd::cout &lt;&lt; s &lt;&lt; std::endl;\n\nerror: incomplete type 'F&lt;5&gt;::Reduce&lt;&gt;' used in nested name specifier\n</code></pre>\n<p>I inserted the nested dummy template parameter because nested template classes in a template class can't be fully specialized. Actually I don't understand why the compiler complains about an incomplete type.<br>\nWhen I change the variadic stuff to</br></p>\n<pre class=\"lang-cpp prettyprint-override\"><code>template&lt;int v0, int ...Vs&gt;\nclass Reduced\n{\npublic:\n    static int const value = v0 + Reduce&lt;Vs...&gt;::value;\n};\n\ntemplate&lt;int v0&gt;\nclass Reduced&lt;v0&gt;\n{\npublic:\n    static int const value = v0;\n};\n\ntemplate&lt;int v0, int ...Vs&gt;\nclass Foo\n{\npublic:\n    class Reduce\n    {\n    public:\n        static int const value = Reduced&lt;v0, Vs...&gt;::value;\n    };\n};\n</code></pre>\n<p>it work's, but I don't know why the other one does not. Any idea why the compiler is throwing that error? Thanks for help.</p>\n", "Tags": "<c++><variadic-templates>", "OwnerUserId": "4838304", "AnswerCount": "2"}, "36682341": {"ParentId": "36681857", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>This is attributed to the quote of the C++ standard <em>\u00a714.7.3/p16 Explicit specialization [temp.expl.spec]</em> (emphasis mine):</p>\n<blockquote>\n<p id=\"so_36681857_36682341_0\">In an explicit specialization declaration for a member of a class\n  template or a member template that appears in namespace scope, the\n  member template and some of its enclosing class templates may remain\n  unspecialized, <strong>except that the declaration shall not explicitly\n  specialize a class member template if its enclosing class templates\n  are not explicitly specialized as well.</strong></p>\n</blockquote>\n<p>That is, you can't have objects of specialized type <code>Foo&lt;int...&gt;::Reduced&lt;&gt;</code> unless <code>Foo</code> the enclosing class is specialized as well.</p>\n<p>You could amend this in the following way:</p>\n<pre><code>template&lt;int v0, int ...Vs&gt;\nclass Foo {\npublic:\n  class Reduce {\n  public:\n    static int const value = v0 + Foo&lt;Vs...&gt;::Reduce::value;\n  };\n};\n\ntemplate&lt;int v0&gt;\nclass Foo&lt;v0&gt; {\npublic:\n  class Reduce {\n  public:\n    static int const value = v0;\n  };\n};\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/e4d8aec0484d4942\" rel=\"nofollow\"><strong>Live Demo</strong></a></p>\n<p>Or you could get rid of nested classes:</p>\n<pre><code>template&lt;int v0, int ...Vs&gt;\nclass Foo {\npublic:\n  static int const value = v0 + Foo&lt;Vs...&gt;::value;\n};\n\ntemplate&lt;int v0&gt;\nclass Foo&lt;v0&gt; {\npublic:\n  static int const value = v0;\n};\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/3c3cf7f4e82dfc60\" rel=\"nofollow\"><strong>Live Demo</strong></a></p>\n<p>C++17 introduces fold expressions. With folds expressions you could do what you want only by doing:</p>\n<pre><code>template&lt;int v0, int ...Vs&gt;\nclass Foo {\npublic:\n  static const int s = v0 + (Vs + ...);\n};\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/33fb71fc241bb4e5\" rel=\"nofollow\"><strong>Live Demo</strong></a></p>\n", "OwnerUserId": "2352671", "LastEditorUserId": "2352671", "LastEditDate": "2016-04-18T14:26:40.057", "Id": "36682341", "Score": "1", "CreationDate": "2016-04-17T21:16:42.700", "LastActivityDate": "2016-04-18T14:26:40.057"}, "36682039": {"ParentId": "36681857", "CommentCount": "1", "Body": "<pre><code>typename std::enable_if&lt;0&lt;sizeof...(Vs)&gt;::type\n</code></pre>\n<p>You need to wrap the inequality check in parens.</p>\n<pre><code>typename std::enable_if&lt; (0 &lt; sizeof...(Vs)) &gt;::type\n</code></pre>\n", "OwnerUserId": "2981588", "PostTypeId": "2", "Id": "36682039", "Score": "1", "CreationDate": "2016-04-17T20:45:12.300", "LastActivityDate": "2016-04-17T20:45:12.300"}, "bq_ids": {"n4140": {"so_36681857_36682341_0": {"section_id": 278, "quality": 1.0, "length": 35}}, "n3337": {"so_36681857_36682341_0": {"section_id": 269, "quality": 1.0, "length": 35}}, "n4659": {"so_36681857_36682341_0": {"section_id": 285, "quality": 1.0, "length": 35}}}});