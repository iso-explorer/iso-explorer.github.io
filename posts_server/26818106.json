post_cb({"26818225": {"Id": "26818225", "PostTypeId": "2", "Body": "<p>To be removed from the stack and to be alive are two different things. In your example the memory in the stack for arrays can be preserved however after the jump to the lable the arrays will be considered as not alive. That is before the jump destructors for elements of the arrays will be called and when the control achieve the definitions of the array when constructors of arrays' elements will be called.</p>\n", "LastActivityDate": "2014-11-08T14:41:03.833", "Score": "1", "CreationDate": "2014-11-08T14:41:03.833", "ParentId": "26818106", "CommentCount": "0", "OwnerUserId": "2877241"}, "26818161": {"Id": "26818161", "PostTypeId": "2", "Body": "<p>This program:</p>\n<pre><code>#include &lt;iostream&gt;\n\nclass X {\npublic:\n X() { std::cout &lt;&lt; \"ctor\" &lt;&lt; std::endl; }\n ~X() { std::cout &lt;&lt; \"dtor\" &lt;&lt; std::endl; }\n};\n\nint main(int argc, char** argv) {\n int i = 0;\n\nlabel:\n X a;\n\n if (i == 0) {\n  i = 1;\n  goto label;\n }\n\n return 0;\n}\n</code></pre>\n<p>Produces this output:</p>\n<pre><code>$ ./a.out \nctor\ndtor\nctor\ndtor\n</code></pre>\n", "LastActivityDate": "2014-11-08T14:35:03.963", "Score": "4", "CreationDate": "2014-11-08T14:35:03.963", "ParentId": "26818106", "CommentCount": "0", "OwnerUserId": "209629"}, "26818106": {"ViewCount": "265", "Body": "<p>When executing a <code>goto</code> statement in C++, are the two arrays in the code fragment below removed from the stack? Or will they be removed from the stack when the method returns?</p>\n<pre><code>retrySplit:\n    ...\n    uint32_t primsAbove[primitives.size()];\n    uint32_t primsBelow[primitives.size()];\n    ...\n    goto retrySplit;\n</code></pre>\n<p>This question is not related to leaks resulting from using a goto statement, but concerned with the possibility of whether you can blow up your stack.</p>\n", "AcceptedAnswerId": "26818161", "Title": "The effect of a goto statement in C++ on the stack", "CreationDate": "2014-11-08T14:27:42.860", "Id": "26818106", "CommentCount": "7", "LastEditDate": "2016-03-18T10:50:28.097", "PostTypeId": "1", "LastEditorUserId": "3647361", "LastActivityDate": "2016-03-18T10:50:28.097", "Score": "3", "OwnerUserId": "1731200", "Tags": "<c++><stack-overflow><goto><destroy><callstack>", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_26818106_26818124_0": {"length": 41, "quality": 0.9761904761904762, "section_id": 3909}}, "n3337": {"so_26818106_26818124_0": {"length": 41, "quality": 0.9761904761904762, "section_id": 3769}}, "n4659": {"so_26818106_26818124_0": {"length": 41, "quality": 0.9761904761904762, "section_id": 4795}}}, "26818132": {"Id": "26818132", "PostTypeId": "2", "Body": "<p>Things are removed from the stack when they go out of scope (hit the closing bracket) so it really depends on where your goto is going to.</p>\n<p>Also this is a bit of a side note but why are you using a goto? You should look them up as they are a bit infamous. </p>\n", "LastActivityDate": "2014-11-08T14:31:12.867", "Score": "1", "CreationDate": "2014-11-08T14:31:12.867", "ParentId": "26818106", "CommentCount": "4", "OwnerUserId": "4027338"}, "26818124": {"Id": "26818124", "PostTypeId": "2", "Body": "<p>Yes, the arrays are destroyed. [stmt.jump]/2:</p>\n<blockquote>\n<p id=\"so_26818106_26818124_0\">On exit from a scope (however accomplished), objects with automatic\n  storage duration (3.7.3) that have been constructed in that scope are\n  destroyed in the reverse order of their construction. [\u2026] <strong>Transfer</strong> out\n  of a loop, out of a block, or <strong>back past an initialized variable with\n  automatic storage duration involves the destruction of objects with\n  automatic storage duration that are in scope at the point transferred\n  from but not at the point transferred to.</strong></p>\n</blockquote>\n<p>You can also verify this through the following snippet:</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct A\n{\n    A() {std::cout &lt;&lt; \"A\";}\n    ~A() {std::cout &lt;&lt; \"D\";}\n};\n\nint main()\n{\n    int counter = 0;\n\n    label:\n        if (counter++) // Exit on second run. \n            return 0;\n\n        A a;\n        goto label;\n}\n</code></pre>\n<p><a href=\"http://ideone.com/hm5Fdm\" rel=\"nofollow\"><strong>Demo</strong></a>. Your output should be <code>AD</code>.\nNote also that <code>counter</code> is not destroyed when jumping back to <code>label</code>.</p>\n", "LastEditorUserId": "3647361", "LastActivityDate": "2014-11-08T14:37:23.770", "Score": "3", "CreationDate": "2014-11-08T14:30:34.273", "ParentId": "26818106", "CommentCount": "3", "LastEditDate": "2014-11-08T14:37:23.770", "OwnerUserId": "3647361"}});