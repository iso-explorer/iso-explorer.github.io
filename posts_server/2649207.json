post_cb({"2649276": {"Id": "2649276", "PostTypeId": "2", "Body": "<p>The difference between the two is that the C headers that C++ imported (by prefixing with c and removing the .h suffix) are in namespace <code>std</code>. This so any call or use of a standard facility is prefixed with <code>std::</code>, for uniformity. It's <a href=\"http://www.parashift.com/c++-faq-lite/mixing-c-and-cpp.html#faq-32.2\" rel=\"nofollow noreferrer\">The Standard Way Of Doing Things(tm)</a>. Unless of course you already have a bunch of C code in which you don't feel like appending <code>std::</code> to each standard call: then use the classic C headers.</p>\n", "LastActivityDate": "2010-04-15T21:57:09.753", "CommentCount": "3", "CreationDate": "2010-04-15T21:57:09.753", "ParentId": "2649207", "Score": "4", "OwnerUserId": "456"}, "2649263": {"Id": "2649263", "PostTypeId": "2", "Body": "<p>For example <code>stdio.h</code> is not the same as <code>cstdio</code>. The latter includes the first, but then undefines some macros and replaces them with real functions. Personally I would always go with the C++ headers!</p>\n", "LastActivityDate": "2010-04-15T21:54:55.463", "CommentCount": "2", "CreationDate": "2010-04-15T21:54:55.463", "ParentId": "2649207", "Score": "2", "OwnerUserId": "316448"}, "2649239": {"Id": "2649239", "PostTypeId": "2", "Body": "<p>It's OK. But it somehow seems neater to to use the C++ style (i.e. no .h extension) in C++ code. I wouldn't (and I don't) worry about it.</p>\n", "OwnerDisplayName": "anon", "LastActivityDate": "2010-04-15T21:50:56.393", "Score": "1", "CreationDate": "2010-04-15T21:50:56.393", "ParentId": "2649207", "CommentCount": "2"}, "bq_ids": {"n4140": {"so_2649207_2649315_1": {"length": 9, "quality": 0.75, "section_id": 6259}, "so_2649207_2649315_3": {"length": 21, "quality": 0.7777777777777778, "section_id": 4907}, "so_2649207_2649315_0": {"length": 6, "quality": 0.6666666666666666, "section_id": 6258}}, "n3337": {"so_2649207_2649315_1": {"length": 9, "quality": 0.75, "section_id": 6019}, "so_2649207_2649315_3": {"length": 21, "quality": 0.7777777777777778, "section_id": 4702}, "so_2649207_2649315_0": {"length": 6, "quality": 0.6666666666666666, "section_id": 6018}}, "n4659": {"so_2649207_2649315_1": {"length": 9, "quality": 0.75, "section_id": 7763}, "so_2649207_2649315_3": {"length": 21, "quality": 0.7777777777777778, "section_id": 6316}, "so_2649207_2649315_0": {"length": 5, "quality": 0.5555555555555556, "section_id": 7762}}}, "2649207": {"ViewCount": "969", "Body": "<p>It seems that a lot of people include example.h instead of cexample in their C++ code. I know that everything in the C++ versions is declared in namespace std, but I'm not aware of any other differences. So why do people use the C headers, and is it okay to do so?</p>\n", "AcceptedAnswerId": "2649276", "Title": "Is it bad practice to use a C header instead of its C++ equivalent in C++ (e.g. stdio.h instead of cstdio)?", "CreationDate": "2010-04-15T21:46:40.500", "Id": "2649207", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2010-04-16T04:18:36.807", "Score": "3", "OwnerUserId": "301849", "Tags": "<c++><header-files>", "AnswerCount": "4"}, "2649315": {"Id": "2649315", "PostTypeId": "2", "Body": "<p>when working with C++, I prefer to use C++ header syntax unless there's a reason not to.  It also appears to be safer to use the <code>&lt;name&gt;</code> (with no <code>.h</code> syntax) based on the following comments in the standard:</p>\n<p>Section 17.4.1.2, paragraphs 3 and 4 (ISO/IEC 14882, Second edition 2003-10-15) state:</p>\n<blockquote>\n<p id=\"so_2649207_2649315_0\">The facilities of the Standard C Library are provided in 18 additional headers, as shown in Table 12:</p>\n</blockquote>\n<p>It then lists off the table, e.g. <code>&lt;cassert&gt;</code>, <code>&lt;ciso646&gt;</code>, ... and then continues</p>\n<blockquote>\n<p id=\"so_2649207_2649315_1\">Except as noted in clauses 18 through 27, the contents of each header <em>cname</em> shall be the same as that of the corresponding header <em>name</em>.h....</p>\n</blockquote>\n<p>Thus, the standard defines the headers without the <code>.h</code> but does indicate that, for the most part, they are identical to those provided by the C compiler and provides clauses 18-27 to identify the differences.</p>\n<p>Unfortunately, I can't figure out where those sections are in the standard to be able to document the differences should they be useful.</p>\n<p><del>I don't believe there is a requirement that the <code>.h</code> headers be present when using a C++ compiler.</del></p>\n<p>As @James pointed out in a comment, Section D.5, paragraphs 1 and 2 state that the C headers must be present:</p>\n<blockquote>\n<p id=\"so_2649207_2649315_2\">... the C++ Standard library provides the 18 C <em>headers</em>....</p>\n<p id=\"so_2649207_2649315_3\">Every C header, each of which has a name of the form <em>name</em>.h behaves as if each name placed in the Standard library namespace by the corresponding <em>cname</em> header is also placed within the namespace scope of the namespace <code>std</code> and is followed by an explicit <em>using-declaration</em> (7.3.3)</p>\n</blockquote>\n", "LastEditorUserId": "103842", "LastActivityDate": "2010-04-16T04:18:36.807", "Score": "1", "CreationDate": "2010-04-15T22:04:44.733", "ParentId": "2649207", "CommentCount": "7", "OwnerUserId": "103842", "LastEditDate": "2010-04-16T04:18:36.807"}});