post_cb({"25673947": {"Id": "25673947", "PostTypeId": "2", "Body": "<p>We can't tell exactly <em>\"how is std::async implemented\"</em>, since you're not referring to a particular toolchain that provides that implementation actually.</p>\n<blockquote>\n<p id=\"so_25673475_25673947_0\"><strong>1.</strong> Is there any penalty in catching the exception from worker thread to main thread?</p>\n</blockquote>\n<hr>\n<p>Define <em>\"Penalty\"</em> by which means exactly? That can't be answered unless you clarify about your concerns/requirements.<br>\nUsually there shouldn't be any <em>penalty</em>, by just catching the exception in the thread, that created the throwing one. It's just about the exception may be provided to the creating thread via the <code>join()</code>, and this causes some cost for keeping that particular exception through handling of <code>join()</code>.</br></p>\n<blockquote>\n<p id=\"so_25673475_25673947_1\"><strong>2.</strong> How are the values returned from worker to main?</p>\n</blockquote>\n<hr>\n<p>To cite what's the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3376.pdf\" rel=\"nofollow noreferrer\">c++ standards definition</a> saying about this point:  </p>\n<blockquote>\n<h3>30.6.8 Function template async</h3>\n<p id=\"so_25673475_25673947_2\"><sup>4</sup> Returns: An object of type <a href=\"http://en.cppreference.com/w/cpp/thread/future\" rel=\"nofollow noreferrer\"><code>future&lt;typename result_of&lt;typename decay&lt;F&gt;::type(typename decay&lt;Args&gt;::type...)&gt;::type&gt;</code></a> that refers to the shared state created by this call to <code>async</code>.  </p>\n</blockquote>\n<hr>\n<blockquote>\n<p id=\"so_25673475_25673947_3\"><strong>3.</strong> Are the input arguments passed by ref actually never get copied or\n      not?</p>\n</blockquote>\n<p>That point is answered in detail here: <a href=\"https://stackoverflow.com/a/18360675/1413395\"><strong><em>Passing arguments to std::async by reference fails</em></strong></a>. As you see, the default case they are copied.<br>\nAccording to <a href=\"https://stackoverflow.com/users/1774667/yakk\">@Yakk</a>'s comment, it might be possible to pass these parameters via <a href=\"http://en.cppreference.com/w/cpp/utility/functional/ref\" rel=\"nofollow noreferrer\"><code>std::ref</code></a> to avoid operating on copies, but take references.</br></p>\n<hr>\n<blockquote>\n<p id=\"so_25673475_25673947_4\">how is <code>std::async</code> implemented</p>\n</blockquote>\n<p>I can tell only for the c++ standards requirements, how it <strong>should be implemented</strong>, unless you're referring to a particular toolchain, that tries to provide a proper implementation of <code>std::async</code>.</p>\n</hr></hr></hr></hr>", "LastEditorUserId": "-1", "LastActivityDate": "2014-09-04T21:31:38.280", "Score": "2", "CreationDate": "2014-09-04T19:54:25.837", "ParentId": "25673475", "CommentCount": "2", "LastEditDate": "2017-05-23T10:26:23.227", "OwnerUserId": "1413395"}, "bq_ids": {"n4140": {"so_25673475_25673947_2": {"length": 8, "quality": 0.6153846153846154, "section_id": 3162}}, "n3337": {"so_25673475_25673947_2": {"length": 9, "quality": 0.6923076923076923, "section_id": 3035}}, "n4659": {"so_25673475_25673947_2": {"length": 8, "quality": 0.6153846153846154, "section_id": 3924}}}, "25673475": {"ViewCount": "913", "Body": "<p>I wanted to know how appropriate its to use <code>std::async</code> in performance oriented code. Specifically</p>\n<ol>\n<li>Is there any penalty in catching the exception from worker thread to main thread?</li>\n<li>How are the values returned from worker to main?</li>\n<li>Are the input arguments passed by ref actually never get copied or not?</li>\n</ol>\n<p>I am planning to pass a heavy session object to a thread or write <code>std::async</code>.</p>\n<pre><code>bool fun(MySession&amp; sessRef);\nMySession sess;\nauto r = std::async(&amp;fun, sess);\n</code></pre>\n<p><strong>EDIT:</strong> </p>\n<ul>\n<li>I am planning to use it with GCC 4.9.1 and VS2013 both since the application is platform agnostic. However most deployments will be *nix based so atleast GCC should be performant.</li>\n</ul>\n", "Title": "How is std::async implemented?", "CreationDate": "2014-09-04T19:21:20.750", "LastActivityDate": "2014-09-05T06:37:39.053", "CommentCount": "5", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2014-09-05T06:37:39.053", "LastEditorUserId": "3747990", "Id": "25673475", "Score": "2", "OwnerUserId": "2505133", "Tags": "<c++><multithreading><c++11><asynchronous>", "AnswerCount": "1"}});