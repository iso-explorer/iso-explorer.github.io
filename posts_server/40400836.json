post_cb({"40400836": {"CommentCount": "0", "ViewCount": "36", "CreationDate": "2016-11-03T11:54:39.420", "LastActivityDate": "2016-11-03T12:33:54.437", "Title": "C++ Koenig(Argument-Dependent) Lookup: What if two namespaces functions in different namespaces have the same argument types?", "AcceptedAnswerId": "40400908", "PostTypeId": "1", "Id": "40400836", "Score": "2", "Body": "<p>What happens if there is a </p>\n<p><code>Foo::test(Foo::A &amp;a, Bar::B &amp;b, C &amp;c);</code> and a </p>\n<p><code>Bar::test(Foo::A &amp;a, Bar::B &amp;b, C &amp;c);</code>. </p>\n<p>Are the namespaces of the arguments considered in-order by the compiler (the first argument taking precedence for the argument-dependent-lookup), or is this considered to be ambiguous?</p>\n", "Tags": "<c++><argument-dependent-lookup>", "OwnerUserId": "1067339", "AnswerCount": "2"}, "40401633": {"ParentId": "40400836", "CommentCount": "0", "Body": "<p>According to the section 3.4.2 of the standard</p>\n<blockquote>\n<p id=\"so_40400836_40401633_0\">For each argument type T in the function call, there is a set of zero or more associated namespaces</p>\n</blockquote>\n<p>So both namespaces <code>Foo</code> and <code>Bar</code> will be in the set of associated namespace. As function <code>test</code> is found in both, it will be ambiguous.</p>\n", "OwnerUserId": "4108963", "PostTypeId": "2", "Id": "40401633", "Score": "2", "CreationDate": "2016-11-03T12:33:54.437", "LastActivityDate": "2016-11-03T12:33:54.437"}, "40400908": {"ParentId": "40400836", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>It will be ambiguous. The overload set contains two equally valid overloads:</p>\n<pre><code>namespace Bar\n{\n    struct B;\n}\n\nnamespace Foo\n{\n    struct A{};\n    void test(A&amp; , Bar::B&amp;, int){}\n}\n\nnamespace Bar\n{\n    struct B{};\n    void test(Foo::A&amp; , B&amp;, int){}\n}\n\nint main() {\n    Foo::A a; Bar::B b;\n    test (a, b, 0);\n\n    return 0;\n}\n</code></pre>\n<p>results on gcc in:</p>\n<blockquote>\n<p id=\"so_40400836_40400908_0\">prog.cpp: In function 'int main()':<br>\n  prog.cpp:21:15: error: call of overloaded 'test(Foo::A&amp;, Bar::B&amp;, int)' is ambiguous   test (a, b, 0);<br>\n                 ^ prog.cpp:10:7: note: candidate: void Foo::test(Foo::A&amp;, Bar::B&amp;, int)   void test(A&amp; , Bar::B&amp;, int){}\n         ^ prog.cpp:16:7: note: candidate: void Bar::test(Foo::A&amp;, Bar::B&amp;, int)   void test(Foo::A&amp; , B&amp;, int){}</br></br></p>\n</blockquote>\n", "OwnerUserId": "817643", "LastEditorUserId": "2380830", "LastEditDate": "2016-11-03T12:00:21.567", "Id": "40400908", "Score": "7", "CreationDate": "2016-11-03T11:58:39.190", "LastActivityDate": "2016-11-03T12:00:21.567"}, "bq_ids": {"n4140": {"so_40400836_40401633_0": {"section_id": 7104, "quality": 0.9166666666666666, "length": 11}}, "n3337": {"so_40400836_40401633_0": {"section_id": 6848, "quality": 0.9166666666666666, "length": 11}}, "n4659": {"so_40400836_40401633_0": {"section_id": 8605, "quality": 0.9166666666666666, "length": 11}}}});