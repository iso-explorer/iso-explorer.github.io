post_cb({"41062401": {"ParentId": "41062294", "CommentCount": "0", "Body": "<p>You can put template specializations for your custom data types.</p>\n<p>As example: your own specialzations of <code>std::hash</code> for <code>std::unordered_map</code></p>\n", "OwnerUserId": "3951525", "PostTypeId": "2", "Id": "41062401", "Score": "2", "CreationDate": "2016-12-09T14:16:23.790", "LastActivityDate": "2016-12-09T14:16:23.790"}, "41062439": {"ParentId": "41062294", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>The only case where it is OK to add a definition into the <code>std</code> namespace is specialization of a template that already exists in the namespace and to explicitly instantiate a template. However, only if they depend on a user defined type.</p>\n<p><a href=\"http://eel.is/c++draft/namespace.std\" rel=\"nofollow noreferrer\">[namespace.std]</a> (standard draft):</p>\n<blockquote>\n<ol>\n<li><p id=\"so_41062294_41062439_0\">The behavior of a C++ program is undefined if it adds declarations or definitions to namespace std or to a namespace within namespace std unless otherwise specified. A program may add a template specialization for any standard library template to namespace std only if the declaration depends on a user-defined type and the specialization meets the standard library requirements for the original template and is not explicitly prohibited.</p></li>\n<li><p id=\"so_41062294_41062439_1\">The behavior of a C++ program is undefined if it declares</p>\n<p id=\"so_41062294_41062439_2\">(2.1) an explicit specialization of any member function of a standard library class template, or</p>\n<p id=\"so_41062294_41062439_3\">(2.2) an explicit specialization of any member function template of a standard library class or class template, or</p>\n<p id=\"so_41062294_41062439_4\">(2.3) an explicit or partial specialization of any member class template of a standard library class or class template.</p>\n<p id=\"so_41062294_41062439_5\">A program may explicitly instantiate a template defined in the standard library only if the declaration depends on the name of a user-defined type and the instantiation meets the standard library requirements for the original template.</p></li>\n</ol>\n</blockquote>\n<hr>\n<p>As an example of standard templates that are explicitly designed to be extended for user defined types: <code>std::hash</code> and <code>std::iterator_traits</code>.</p>\n</hr>", "OwnerUserId": "2079303", "LastEditorUserId": "2079303", "LastEditDate": "2016-12-09T14:38:24.270", "Id": "41062439", "Score": "4", "CreationDate": "2016-12-09T14:18:00.253", "LastActivityDate": "2016-12-09T14:38:24.270"}, "41062294": {"CommentCount": "5", "ViewCount": "319", "PostTypeId": "1", "LastEditorUserId": "3840840", "CreationDate": "2016-12-09T14:09:08.167", "LastActivityDate": "2017-09-29T18:13:43.617", "Title": "C++ When is it OK to extend the `std` namespace?", "AcceptedAnswerId": "41062439", "LastEditDate": "2017-09-29T18:13:43.617", "Id": "41062294", "Score": "4", "Body": "<p>A thread on SO says that <a href=\"https://stackoverflow.com/questions/37541022/what-are-the-reasons-that-extending-the-std-namespace-is-considered-undefined-be\">extending <code>std</code> is UB</a> (ok, unless you're the standard writers of course). But from time to time, <code>std</code> is happily extended. When is it OK to do so?</p>\n", "Tags": "<c++><c++11><namespaces><std>", "OwnerUserId": "1113697", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_41062294_41062439_4": {"section_id": 6300, "quality": 1.0, "length": 10}, "so_41062294_41062439_5": {"section_id": 6300, "quality": 1.0, "length": 17}, "so_41062294_41062439_2": {"section_id": 6300, "quality": 1.0, "length": 7}, "so_41062294_41062439_3": {"section_id": 6300, "quality": 1.0, "length": 9}, "so_41062294_41062439_0": {"section_id": 6299, "quality": 0.9705882352941176, "length": 33}}, "n3337": {"so_41062294_41062439_4": {"section_id": 6057, "quality": 1.0, "length": 10}, "so_41062294_41062439_5": {"section_id": 6057, "quality": 1.0, "length": 17}, "so_41062294_41062439_3": {"section_id": 6057, "quality": 1.0, "length": 9}, "so_41062294_41062439_2": {"section_id": 6057, "quality": 1.0, "length": 7}, "so_41062294_41062439_0": {"section_id": 6056, "quality": 0.9705882352941176, "length": 33}}, "n4659": {"so_41062294_41062439_4": {"section_id": 7809, "quality": 1.0, "length": 10}, "so_41062294_41062439_5": {"section_id": 7809, "quality": 1.0, "length": 17}, "so_41062294_41062439_3": {"section_id": 7809, "quality": 1.0, "length": 9}, "so_41062294_41062439_2": {"section_id": 7809, "quality": 1.0, "length": 7}, "so_41062294_41062439_0": {"section_id": 7808, "quality": 0.9705882352941176, "length": 33}}}});