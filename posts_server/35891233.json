post_cb({"bq_ids": {"n4140": {"so_35891233_35891969_0": {"length": 17, "quality": 0.7083333333333334, "section_id": 3298}, "so_35891233_35891969_1": {"length": 17, "quality": 0.8947368421052632, "section_id": 3298}}, "n3337": {"so_35891233_35891969_0": {"length": 20, "quality": 0.8333333333333334, "section_id": 3168}, "so_35891233_35891969_1": {"length": 17, "quality": 0.8947368421052632, "section_id": 3168}}, "n4659": {"so_35891233_35891969_1": {"length": 12, "quality": 0.631578947368421, "section_id": 4063}}}, "35891233": {"ViewCount": "2553", "Body": "<p>Consider the following example:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\nstruct ABC\n{\n    std::string str;\n    unsigned int id ;/* = 0 : error: no matching constructor for initialization of 'ABC'*/\n};\n\nint main()\n{\n    ABC abc{\"hi\", 0};\n    std::cout &lt;&lt; abc.str &lt;&lt; \" \" &lt;&lt; abc.id &lt;&lt;   std::endl;\n    return 0;\n}\n</code></pre>\n<p>When defining the structure ABC without default value for id clang 3.x and gcc 4.8.x compile the code without problems. However, after adding a default argument for \"id\" I get the flowing error message: </p>\n<pre><code>13 : error: no matching constructor for initialization of 'ABC'\nABC abc{\"hi\", 0};\n^ ~~~~~~~~~\n4 : note: candidate constructor (the implicit copy constructor) not viable: requires 1 argument, but 2 were provided\nstruct ABC\n^\n4 : note: candidate constructor (the implicit move constructor) not viable: requires 1 argument, but 2 were provided\n4 : note: candidate constructor (the implicit default constructor) not viable: requires 0 arguments, but 2 were provided\n1 error generated.\nCompilation failed\n</code></pre>\n<p>From a technical point of view, what is going on when I define id with a default argument and why is aggregate initialization not possible in that case? Do I implicitly define some sort of constructor?</p>\n", "AcceptedAnswerId": "35891969", "Title": "Initializing a struct with aggregate initialization and member initializers", "CreationDate": "2016-03-09T12:10:37.120", "Id": "35891233", "CommentCount": "7", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2016-03-10T01:16:15.730", "LastEditorUserId": "3777958", "LastActivityDate": "2016-03-10T01:16:15.730", "Score": "13", "OwnerUserId": "1685509", "Tags": "<c++><c++11><constructor><aggregate-initialization>", "AnswerCount": "2"}, "35891969": {"Id": "35891969", "PostTypeId": "2", "Body": "<p>Bjarne Stroustrup and Richard Smith raised an issue about aggregate initialization and member-initializers not working together.</p>\n<p>The definition of aggregate is slightly changed in C++11 &amp; C++14 standard.</p>\n<p>From the C++11 standard draft <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf\" rel=\"noreferrer\">n3337</a> section 8.5.1 says that: </p>\n<blockquote>\n<p id=\"so_35891233_35891969_0\">An aggregate is an array or a class (Clause 9) with no user-provided\n  constructors (12.1), <strong><em>no brace-or-equal- initializers for non-static\n  data members</em></strong> (9.2), no private or protected non-static data members\n  (Clause 11), no base classes (Clause 10), and no virtual functions\n  (10.3).</p>\n</blockquote>\n<p>But C++14 standard draft <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3797.pdf\" rel=\"noreferrer\">n3797</a> section 8.5.1 says that: </p>\n<blockquote>\n<p id=\"so_35891233_35891969_1\">An aggregate is an array or a class (Clause 9) with no user-provided\n  constructors (12.1), no private or protected non-static data members\n  (Clause 11), no base classes (Clause 10), and no virtual functions\n  (10.3).</p>\n</blockquote>\n<p>So, when you use in class member initializer (<strong><em>i.e. equal initializer</em></strong>) for the data member <code>id</code> in C++11 it no longer remains aggregate &amp; you can't write <code>ABC abc{\"hi\", 0};</code> to initialize a <code>struct ABC.</code> Because it no longer remains aggregate type after that. But your code is valid in C++14. (See live demo <a href=\"http://ideone.com/VeEfSO\" rel=\"noreferrer\">here</a>).</p>\n", "LastEditorUserId": "3777958", "LastActivityDate": "2016-03-09T13:07:40.520", "Score": "22", "CreationDate": "2016-03-09T12:44:40.560", "ParentId": "35891233", "CommentCount": "3", "OwnerUserId": "3777958", "LastEditDate": "2016-03-09T13:07:40.520"}, "35891752": {"Id": "35891752", "PostTypeId": "2", "Body": "<p>In c++ struct and classes are the same, except that structs have default public members and classes have private. If you want to use initial values I think you have to write a constructor or use something like this:</p>\n<pre><code>struct ABC\n{\n    std::string str;\n    unsigned int id;\n} ABC_default = {\"init\", 0 }; //initial values\n\nint main()\n{\n    ABC abc = ABC_default;\n    std::cout &lt;&lt; abc.str &lt;&lt; \" \" &lt;&lt; abc.id &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>\n", "LastActivityDate": "2016-03-09T12:34:42.570", "CommentCount": "4", "CreationDate": "2016-03-09T12:34:42.570", "ParentId": "35891233", "Score": "-2", "OwnerUserId": "2166946"}});