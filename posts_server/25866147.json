post_cb({"25866471": {"ParentId": "25866147", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>There is a note in the standard, that you cannot use explicit template arguments in constructor:</p>\n<blockquote>\n<p id=\"so_25866147_25866471_0\">[ Note: Because the explicit template argument list follows the function template name,\n  and because conversion member function templates and constructor member function templates are called\n  without using a function name, there is no way to provide an explicit template argument list for these\n  function templates. \u2014end note ]</p>\n</blockquote>\n<p>Source: <code>14.5.2 Member templates</code> from N3337 draft.</p>\n<p>But of course you can have more constructor template parameters than constructor arguments - as long as they can be deduced from constructor arguments:</p>\n<p>Example:</p>\n<pre><code>struct A {\n    template&lt;class T, int N&gt; A(T (&amp;arg)[N]) {}\n};\n</code></pre>\n", "OwnerUserId": "1463922", "LastEditorUserId": "1463922", "LastEditDate": "2014-09-16T10:45:45.990", "Id": "25866471", "Score": "6", "CreationDate": "2014-09-16T10:32:54.323", "LastActivityDate": "2014-09-16T10:45:45.990"}, "25866147": {"CommentCount": "1", "ViewCount": "214", "CreationDate": "2014-09-16T10:17:04.707", "LastActivityDate": "2014-09-16T13:30:32.873", "Title": "Number of template arguments in templated constructor", "AcceptedAnswerId": "25869887", "PostTypeId": "1", "Id": "25866147", "Score": "3", "Body": "<p>For a (possibly non templated) class I can have a templated constructor : </p>\n<pre><code>struct A {\n    template&lt;class T&gt; A(T const&amp; arg) {}\n}\n</code></pre>\n<p>Is the number of template arguments limited by the number of arguments that can be deduced ? If so what's the related Standard quote?</p>\n<p>For example if the constructor was </p>\n<pre><code>template&lt;class T1, class T2&gt; A(T2 const&amp; arg) {}\n</code></pre>\n<p>this call would cause a compile error</p>\n<pre><code>A&lt;int&gt;(double()); // creation of a temporary\n</code></pre>\n<p>or how would I call the constructor ? This also fails : </p>\n<pre><code>A::A&lt;int&gt;(double()); // creation of a temporary\n</code></pre>\n", "Tags": "<c++><templates><c++11><language-lawyer><c++14>", "OwnerUserId": "2567683", "AnswerCount": "2"}, "25869887": {"ParentId": "25866147", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>The fact that you can't pass the types using <em>template-argument-list</em> syntax doesn't necessarily mean you can't pass the list of types for templated constructor at all:</p>\n<pre><code>template &lt;typename...&gt;\nstruct _ {};\n\nstruct A\n{\n    template &lt;class T1, class T2, class T3&gt;\n    A(_&lt;T1, T2, T3&gt;) {}\n};\n\nint main()\n{\n    A a{_&lt;int, double, char&gt;{}};\n}\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/61a6dc2e1e472f55\" rel=\"nofollow\"><kbd><strong>LIVE DEMO</strong></kbd></a></p>\n", "OwnerUserId": "3953764", "LastEditorUserId": "3953764", "LastEditDate": "2014-09-16T13:30:32.873", "Id": "25869887", "Score": "4", "CreationDate": "2014-09-16T13:18:43.347", "LastActivityDate": "2014-09-16T13:30:32.873"}, "bq_ids": {"n4140": {"so_25866147_25866471_0": {"section_id": 114, "quality": 0.9117647058823529, "length": 31}}, "n3337": {"so_25866147_25866471_0": {"section_id": 109, "quality": 0.9117647058823529, "length": 31}}, "n4659": {"so_25866147_25866471_0": {"section_id": 118, "quality": 0.9117647058823529, "length": 31}}}});