post_cb({"27400540": {"ParentId": "27400267", "CommentCount": "0", "Body": "<p>Class is template which is not assigned any space in heap memory. Once you created a variable ob in main() function, memory is allocated to variable ob in heap memory based on definition of the class. There is also a header space to the memory location that contains metadata of the variable. \"this\" contains the address of the allocated memory.</p>\n<p>Now different versions of compilers deal this memory allocation differently. </p>\n<p>Look at the functions in the class definition. Those are same across all instances of variable of type ABC. So a version may allocated a shared space for functions where as another may allocated space for functions for each instance eating more space.</p>\n<p>This could be one of the reason behind differences.</p>\n", "OwnerUserId": "3302711", "PostTypeId": "2", "Id": "27400540", "Score": "0", "CreationDate": "2014-12-10T12:03:19.763", "LastActivityDate": "2014-12-10T12:03:19.763"}, "27400267": {"CommentCount": "6", "ViewCount": "443", "PostTypeId": "1", "LastEditorUserId": "2627378", "CreationDate": "2014-12-10T11:49:18.777", "LastActivityDate": "2014-12-10T12:10:07.833", "Title": "Sizeof this pointer in cpp", "AcceptedAnswerId": "27400667", "LastEditDate": "2014-12-10T12:04:20.373", "Id": "27400267", "Score": "0", "Body": "<p>I found that the output of this answer varies from the version of the gcc compiler used.</p>\n<pre><code>#include&lt;iostream&gt;\nusing namespace std;\n\nclass ABC{\n\n  int x;\n\npublic:\n\n  void show(){\n\n    cout&lt;&lt;sizeof (this);\n\n    cout&lt;&lt;sizeof (*this);\n\n  }\n};\n\nint main(){\n\n  ABC ob;\n  ob.show();\n  return 0;\n}\n</code></pre>\n<p>This code gives the output of 84 in the version 4.9.1 and the same gives the 44 in the previous version.</p>\n<p>Can any one clearly explain me what the concept is behind the \"this\" pointer?</p>\n", "Tags": "<c++><gcc><sizeof>", "OwnerUserId": "3514300", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_27400267_27400667_0": {"section_id": 5895, "quality": 0.9444444444444444, "length": 17}}, "n3337": {"so_27400267_27400667_0": {"section_id": 5666, "quality": 0.9444444444444444, "length": 17}}, "n4659": {"so_27400267_27400667_0": {"section_id": 7378, "quality": 0.9444444444444444, "length": 17}}}, "27400667": {"ParentId": "27400267", "CommentCount": "1", "Body": "<p>The <code>this</code> pointer is defined in N3337 [class.this]:</p>\n<blockquote>\n<p id=\"so_27400267_27400667_0\"><code>1</code> In the body of a non-static (9.3) member function, the keyword\n  <code>this</code> is a prvalue expression whose value is the address of the\n  object for which the function is called. The type of <code>this</code> in a\n  member function of a class <code>X</code> is <code>X*</code>.</p>\n</blockquote>\n<p>So there's nothing special about <code>sizeof(this)</code>. As pointed out by <a href=\"https://stackoverflow.com/questions/27400267/sizeof-this-pointer-in-cpp#comment43246107_27400267\">deviantfan</a>, more than likely you are observing the effect of compiling a 32-bit program versus a 64-bit program.</p>\n<p>GCC with <code>-m32</code> outputs <code>44</code> and <code>84</code> without.</p>\n", "Id": "27400667", "PostTypeId": "2", "OwnerDisplayName": "user3920237", "Score": "1", "CreationDate": "2014-12-10T12:10:07.833", "LastActivityDate": "2014-12-10T12:10:07.833"}});