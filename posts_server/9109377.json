post_cb({"bq_ids": {"n4140": {"so_9109377_9110053_1": {"section_id": 6298, "quality": 0.875, "length": 7}}, "n3337": {"so_9109377_9110053_1": {"section_id": 6055, "quality": 0.875, "length": 7}}, "n4659": {"so_9109377_9110053_1": {"section_id": 7807, "quality": 0.875, "length": 7}}}, "9110053": {"ParentId": "9109377", "CommentCount": "1", "Body": "<p>The corresponding section from C++11:</p>\n<p><strong>17.6.4.3.1 Macro names [macro.names]</strong></p>\n<blockquote>\n<p id=\"so_9109377_9110053_0\">1 A translation unit that includes a standard library header shall not #define or #undef names declared in any standard library header.<br>\n  2 A translation unit shall not #define or #undef names lexically identical to keywords.</br></p>\n</blockquote>\n<p>Paragraph 1 from C++03 has been removed. The second paragraph has been split in two. The first half has now been changed to specifically state that it only applies to <em>standard</em> headers. The second point has been broadened to include any translation unit, not just those that include headers.</p>\n<p>However, the <strong>Overview</strong> for this section of the standard (<strong>17.6.4.1 [constraints.overview]</strong>) states:</p>\n<blockquote>\n<p id=\"so_9109377_9110053_1\">This section describes restrictions on C++ programs that use the facilities of the C++ standard library.</p>\n</blockquote>\n<p>Therefore, if you are not using the C++ standard library, then you're okay to do what you will.</p>\n<p>So to answer your question in the context of C++11: you cannot define (or undefine) any names identical to keywords in any translation unit if you are using the C++ standard library.</p>\n", "OwnerUserId": "150634", "PostTypeId": "2", "Id": "9110053", "Score": "10", "CreationDate": "2012-02-02T09:40:58.097", "LastActivityDate": "2012-02-02T09:40:58.097"}, "9109377": {"CommentCount": "6", "AcceptedAnswerId": "9109427", "PostTypeId": "1", "LastEditorUserId": "4370109", "CreationDate": "2012-02-02T08:49:04.727", "LastActivityDate": "2015-12-16T14:35:31.493", "LastEditDate": "2015-11-29T12:11:37.673", "ViewCount": "3262", "FavoriteCount": "2", "Title": "Is it legal to redefine a C++ keyword?", "Id": "9109377", "Score": "9", "Body": "<p>In <a href=\"http://www.gotw.ca/gotw/076.htm\">this article</a> from Guru of the week, it is said: <code>It is illegal to #define a reserved word.</code> Is this true? I can\u2019t find anything in the norm, and I\u00a0have already seen programmers redefining new, for instance.</p>\n", "Tags": "<c++><standards><keyword><c-preprocessor>", "OwnerUserId": "748175", "AnswerCount": "5"}, "9110022": {"ParentId": "9109377", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>It's not as far as I'm aware illegal - no compiler I've come across yet will generate an error if you do</p>\n<pre><code>#define true false\n</code></pre>\n<p><code>#defining</code> certain keywords are likely to generate errors in compilation for other reasons. But a lot of them will just result in very strange program behaviour.</p>\n", "OwnerUserId": "1182921", "LastEditorUserId": "1182921", "LastEditDate": "2013-06-27T10:24:14.380", "Id": "9110022", "Score": "-1", "CreationDate": "2012-02-02T09:38:47.773", "LastActivityDate": "2013-06-27T10:24:14.380"}, "34314749": {"ParentId": "9109377", "CommentCount": "0", "Body": "<p>They're actually wrong there, or at least doesn't tell the whole story about it. The real reason it's disallowed is that it violates the one-definition-rule (which by the way is also mentioned as the second reason why it's illegal). </p>\n<p>To see that it's actually allowed (to redefine keywords), at least if you don't use the standard libraries, you have to look at an entirely different part of the standard, namely the translation phases. It says that the input is only decomposed into preprocessor tokens before preprocessing takes place and looking at those there's no distinction between <code>private</code> and <code>fubar</code>, they are both <code>identifiers</code> to the preprocessor. Later when the input is decomposed into <code>token</code> the replacement has already taken place.</p>\n<p>It has been pointed out that there's a restriction on programs that are to use the standard libraries, but it's not evident that the example redefining <code>private</code> is doing that (as opposed to the \"Person #4: The Language Lawyer\" snippet which uses it for output to <code>cout</code>).</p>\n<p>It's mentioned in the last example that the trick doesn't get trampled on by other translation units or tramples on other. With this in mind you should probably consider the possibility that the standard library is being used somewhere else which will put this restriction in effect.</p>\n", "OwnerUserId": "4498329", "PostTypeId": "2", "Id": "34314749", "Score": "0", "CreationDate": "2015-12-16T14:35:31.493", "LastActivityDate": "2015-12-16T14:35:31.493"}, "9109427": {"ParentId": "9109377", "PostTypeId": "2", "CommentCount": "9", "Body": "<p><strong>17.4.3.1.1 Macro names [lib.macro.names]</strong></p>\n<blockquote>\n<p id=\"so_9109377_9109427_0\">1 Each name defined as a macro in a header is reserved to the implementation for any use if the translation unit includes the header.164)<br>\n  2 A translation unit that includes a header shall not contain any macros that define names declared or defined in that header. <strong>Nor shall such a translation unit define macros for names lexically identical to keywords.</strong> </br></p>\n</blockquote>\n<p>By the way, <code>new</code> is an operator and it can be overloaded (replaced) by the user by providing its own version.</p>\n", "OwnerUserId": "452307", "LastEditorUserId": "46642", "LastEditDate": "2012-02-02T09:02:37.807", "Id": "9109427", "Score": "17", "CreationDate": "2012-02-02T08:53:11.183", "LastActivityDate": "2012-02-02T09:02:37.807"}, "13808041": {"ParentId": "9109377", "PostTypeId": "2", "CommentCount": "9", "Body": "<p>Here's a little thing you can do if you don't want someone to use goto's. Just drop the following somewhere in his code where he won't notice it.</p>\n<pre><code>#define goto { int x = *(int *)0; } goto\n</code></pre>\n<p>Now every time he tries to use a goto statement, his program will crash. </p>\n", "OwnerUserId": "1639953", "LastEditorUserId": "1639953", "LastEditDate": "2015-03-25T18:45:29.040", "Id": "13808041", "Score": "1", "CreationDate": "2012-12-10T19:47:24.057", "LastActivityDate": "2015-03-25T18:45:29.040"}});