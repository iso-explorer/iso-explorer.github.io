post_cb({"8324457": {"Id": "8324457", "PostTypeId": "2", "Body": "<p>It seems to be a compiler-bug. I checked it out in the spec, the Standard clearly says (\u00a75.16/3 - C++03), </p>\n<blockquote>\n<p id=\"so_8324338_8324457_0\">Otherwise, if the second and third operand have different types, and either has (possibly cv-qualified) class type, <strong>an attempt is made to convert each of those operands to the type of the other</strong>.</p>\n</blockquote>\n<p>and the rest of the section explains how the conversion is done. There is nothing that stops <code>*p</code> from implicitly converting into <code>char</code> type, using the user-defined conversion operator.</p>\n<p>Also, I compiled it with <code>(GCC) 4.5.0</code>. It gives no error, with <code>-pedantic</code> option as well. Tried it <code>-std=c++98</code> and <code>-std=c++0x</code>. Still no error.</p>\n<p>Most definitely, it is a compiler-bug.</p>\n", "LastEditorUserId": "415784", "LastActivityDate": "2011-11-30T10:59:10.457", "Score": "8", "CreationDate": "2011-11-30T10:27:57.033", "ParentId": "8324338", "CommentCount": "3", "OwnerUserId": "415784", "LastEditDate": "2011-11-30T10:59:10.457"}, "bq_ids": {"n4140": {"so_8324338_8324457_0": {"length": 20, "quality": 1.0, "section_id": 6169}}, "n3337": {"so_8324338_8324457_0": {"length": 20, "quality": 1.0, "section_id": 5930}}, "n4659": {"so_8324338_8324457_0": {"length": 19, "quality": 0.95, "section_id": 7667}}}, "8666222": {"Id": "8666222", "PostTypeId": "2", "Body": "<p>There are issues with implicit conversion between classes for the conditional operator ?: in certain versions of G++.  Also depending on the version you may either see an error, or you may /not/ see such an errors, <em>however all three of your samples are correctly flagged by G++</em>.</p>\n<p>This is less of an answer to the original question but a re-certification of the original poster's, and others', qualm that there might be problems with spurious errors with G++ compiler and the conversion behavior for class types as specified in ISOC++:2003 5.16/3 [expr.cond]/3 (also outlined above by @Nawaz)</p>\n<p>One example that shows the converse of the original poster's sample where implicit conversion in both directions can happen but isn't flagged can be seen <a href=\"http://gcc.gnu.org/bugzilla/show_bug.cgi?id=32019\" rel=\"nofollow\">here</a>.</p>\n<p>I compiled this on G++ v3.4.6, v4.1.2, v4.2.1 and v4.5.0(windows) and saw no problems because as again @Nawaz said this is the correct behavior within the ISOC++:2003 spec.</p>\n<p>However, when I followed the link on your <a href=\"http://www.ideone.com/lUJE2\" rel=\"nofollow\">IDEONE</a> page the structure definition was different and <strong>that</strong> is the root of your error. </p>\n<pre><code>struct X\n{\n  char ch;\n  X(const char c) : ch(c) {}\n\n  operator char () const { return ch; }\n};\n\nint main ()\n{\n  X obj('a'), *p = &amp;obj;\n  char a = *p; // ok\n  char c = (true)? *p : 'b';\n}\n</code></pre>\n<p>Then as above the struct is different and I do get the error your see.  <strong>This is a correct error as 'z' can be converted into X or char, and because of the constructor 'z' can also be converted into X - bi-directionality of X/'z' so the compiler should stop.</strong>   However with a little change it can be made to pass and that is exactly the same bug as the GNU G++ bug posted above.</p>\n<p>If you convert your sample above to a pointer sample it will fail.  Character pointer, int pointer or whatever.</p>\n<p>Although unrelated I thought it might be a good point to highlight something that often caught me out whilst cross-porting between Windows/Linux.  MSVC will happily pass such conversions often if it deems the conversion to be \"safe\", or often it may proffer a warning that conversion is being done at the risk of loss of precision - I am not sure what the trigger for allowing this is.</p>\n", "LastEditorUserId": "611562", "LastActivityDate": "2011-12-29T10:00:53.580", "Score": "2", "CreationDate": "2011-12-29T09:50:18.717", "ParentId": "8324338", "CommentCount": "0", "OwnerUserId": "1120779", "LastEditDate": "2011-12-29T10:00:53.580"}, "8324338": {"ViewCount": "1177", "Body": "<p>Following code is in simplest form:</p>\n<pre><code>struct X {\n  operator char () const { return 'a'; }\n};\n\nint main ()\n{\n  X obj, *p = &amp;obj;\n  char a = *p;  // ok\n  char c = (true)? *p : 'z';\n}\n</code></pre>\n<p><a href=\"http://www.ideone.com/lUJE2\">This code</a> gives compiler error as,</p>\n<blockquote>\n<p id=\"so_8324338_8324338_0\">error: operands to ?: have different types \u2018X\u2019 and \u2018char\u2019</p>\n</blockquote>\n<p>Why <code>*p</code> is not resolved to <code>char</code> when there is no ambiguity in <code>class X</code> for typecasting operator ?\nIs such <strong>spurious error message</strong> correct or it's a g++ bug ?</p>\n<p>[<strong>Update</strong> Note: Interestingly <a href=\"http://www.ideone.com/Q8JEH\">this scenario doesn't generate such error</a>]</p>\n", "AcceptedAnswerId": "8324457", "Title": "Compiler error for conditional operator \"?:\" when used with typecasting operator", "CreationDate": "2011-11-30T10:19:45.417", "Id": "8324338", "CommentCount": "3", "FavoriteCount": "3", "PostTypeId": "1", "LastEditDate": "2011-11-30T10:54:49.613", "LastEditorUserId": "514235", "LastActivityDate": "2011-12-29T10:00:53.580", "Score": "9", "OwnerUserId": "514235", "Tags": "<c++><compiler-errors><conditional-operator><typecasting-operator>", "AnswerCount": "3"}, "8324397": {"Id": "8324397", "PostTypeId": "2", "Body": "<p>The error is correct. operands to <code>?:</code> have different types: \u2018X\u2019 the first, and \u2018char\u2019 the second. The compiler cannot know that you want the expression to be a char in the end - that will happen later, after the evaluation of the whole expression <code>(true)? *p : 'z';</code> - an evaluation which cannot be done in the first place due to type discrepancies.</p>\n", "LastActivityDate": "2011-11-30T10:23:42.617", "CommentCount": "0", "CreationDate": "2011-11-30T10:23:42.617", "ParentId": "8324338", "Score": "0", "OwnerUserId": "96780"}});