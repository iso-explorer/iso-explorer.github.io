post_cb({"bq_ids": {"n4140": {"so_11534126_11534268_1": {"length": 7, "quality": 1.0, "section_id": 5427}, "so_11534126_11534268_0": {"length": 14, "quality": 0.9333333333333333, "section_id": 5427}, "so_11534126_11534268_2": {"length": 24, "quality": 0.6857142857142857, "section_id": 5430}}, "n3337": {"so_11534126_11534268_1": {"length": 7, "quality": 1.0, "section_id": 5222}, "so_11534126_11534268_2": {"length": 24, "quality": 0.6857142857142857, "section_id": 5225}, "so_11534126_11534268_0": {"length": 14, "quality": 0.9333333333333333, "section_id": 5222}}, "n4659": {"so_11534126_11534268_1": {"length": 7, "quality": 1.0, "section_id": 6855}, "so_11534126_11534268_2": {"length": 24, "quality": 0.6857142857142857, "section_id": 6858}, "so_11534126_11534268_0": {"length": 12, "quality": 0.8, "section_id": 6855}}}, "11534268": {"Id": "11534268", "PostTypeId": "2", "Body": "<p>7.1.6 p 2 forbids the use of multiple <code>const</code> in the same <em>decl-specifier-seq</em></p>\n<blockquote>\n<p id=\"so_11534126_11534268_0\">As a general rule, at most one type-specifier is allowed in the complete decl-specifier-seq of a declaration or in a type-specifier-seq or trailing-type-specifier-seq. The only exceptions to this rule are the following:</p>\n<p id=\"so_11534126_11534268_1\">\u2014 const can be combined with any type specifier except itself.</p>\n</blockquote>\n<p>7.1.6.1 p 1 allows the use through the typedef:</p>\n<blockquote>\n<p id=\"so_11534126_11534268_2\">There are two cv-qualifiers, const and volatile. If a cv-qualifier appears in a decl-specifier-seq, the init- declarator-list of the declaration shall not be empty. [ Note: 3.9.3 and 8.3.5 describe how cv-qualifiers affect object and function types. \u2014 end note ] <strong>Redundant cv-qualifications are ignored.</strong> [ Note: For example, these could be introduced by typedefs. \u2014 end note ]</p>\n</blockquote>\n", "LastActivityDate": "2012-07-18T04:23:29.557", "Score": "6", "CreationDate": "2012-07-18T04:23:29.557", "ParentId": "11534126", "CommentCount": "0", "OwnerUserId": "36565"}, "11534126": {"ViewCount": "260", "Body": "<p>Following gives error as expected:</p>\n<pre><code>int* const const p = new int; // g++ error: duplicate cv-qualifier\n</code></pre>\n<p>But below doesn't give any error, even though it's equivalent to above one:</p>\n<pre><code>typedef int* const intp_const;\nintp_const const p = new int;  // ok !\n        // ^^^^^ duplicate ?\n</code></pre>\n<p>Why does compiler ignores the extra <code>const</code> ?  </p>\n<p>[Note: <code>intp_const const</code> is not same as <code>const char* const</code>, because <code>*p = &lt;value&gt;;</code> is possible.]</p>\n", "AcceptedAnswerId": "11534247", "Title": "Why compiler doesn't give error when typedef const pointer is used with extra const?", "CreationDate": "2012-07-18T04:03:28.097", "Id": "11534126", "CommentCount": "3", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2012-07-18T04:33:20.423", "Score": "5", "OwnerUserId": "514235", "Tags": "<c++><pointers><const><language-lawyer>", "AnswerCount": "3"}, "11534271": {"Id": "11534271", "PostTypeId": "2", "Body": "<p>As for the reasoning behind allowing it with typedefs -- I imagine this is because it is harmless, and if the compiler didn't allow it, it could be annoying to work around.  You've told the compiler that you want it to be const, so it just does it.  It isn't necessary for it to be picky that you've effectively said it twice.</p>\n<p>However, const appearing twice in the same declaration has no real purpose and is easily avoided, so a diagnostic is given.</p>\n", "LastEditorUserId": "951890", "LastActivityDate": "2012-07-18T04:29:29.427", "Score": "0", "CreationDate": "2012-07-18T04:23:52.283", "ParentId": "11534126", "CommentCount": "0", "LastEditDate": "2012-07-18T04:29:29.427", "OwnerUserId": "951890"}, "11534247": {"Id": "11534247", "PostTypeId": "2", "Body": "<p>In 7.1.5 [dcl.type] (C++03), it is stated that redundant cv-qualifiers are allowed when introduced through a typedef:</p>\n<blockquote>\n<p id=\"so_11534126_11534247_0\">const or volatile can be combined with any other type-specifier. However, redundant cv-\n  qualifiers are prohibited except when introduced through the use of typedefs (7.1.3) or template type\n  arguments (14.3), in which case the redundant cv-qualifiers are ignored.</p>\n</blockquote>\n", "LastActivityDate": "2012-07-18T04:20:37.253", "Score": "12", "CreationDate": "2012-07-18T04:20:37.253", "ParentId": "11534126", "CommentCount": "0", "OwnerUserId": "1011995"}});