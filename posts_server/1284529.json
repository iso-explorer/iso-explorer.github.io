post_cb({"1284599": {"ParentId": "1284529", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2009-08-16T15:49:26.800", "OwnerUserId": "150626", "CommunityOwnedDate": "2009-08-16T15:49:26.800", "Id": "1284599", "Score": "26", "Body": "<p>A .h file is essentially just code which, at compile time, is placed above any .cpp (or .h file for that matter) that it's included in. Therefore you CAN just place any code from the .cpp file into the .h and it should compile fine.</p>\n<p>However it's the design which is important. Your code (e.g. your enum) SHOULD be placed in the .h file if you need to expose it to the code you're including the .h file. However if the enum is only specific to the code in your header's .cpp implementation, then you should encapsulate it just within the .cpp file.</p>\n", "LastActivityDate": "2009-08-16T15:49:26.800"}, "1284547": {"ParentId": "1284529", "LastEditDate": "2009-08-16T15:38:24.763", "CommentCount": "0", "CreationDate": "2009-08-16T15:31:56.260", "OwnerUserId": "34509", "LastEditorUserId": "34509", "PostTypeId": "2", "Id": "1284547", "Score": "1", "Body": "<p>The one definition rule allows that at <code>3.2/5</code>. All of the following can be put into headers, and be included multiple times into different translation units. </p>\n<blockquote>\n<p id=\"so_1284529_1284547_0\">There can be more than one definition of a class type (clause 9), <strong>enumeration type</strong> (7.2), inline function with external linkage (7.1.2), class template (clause 14), non-static function template (14.5.5), static data member of a class template (14.5.1.3), member function of a class template (14.5.1.1), or template specialization for which some template parameters are not specified (14.7, 14.5.4) in a program provided that each definition appears in a different translation unit, and provided the definitions satisfy the following requirements.</p>\n</blockquote>\n<p>The requirements essentially come down to that each definition must be the same. Note that if your enumeration type itself has no name, then it's not covered by that rule. Each definition of it in another translation unit defines a new enumeration type then, and doesn't clash with each other. </p>\n<p>Putting them into the header is a good place if it's supposed to be public. Putting them in the implementation file is a good place if it's supposed to be private to that single file. In the latter case, either put them into an unnamed namespace, or make them unnamed (like it's the case with your enumeration example), so that it can't clash with another enumeration having the same name.</p>\n", "LastActivityDate": "2009-08-16T15:38:24.763"}, "1291776": {"ParentId": "1284529", "CommentCount": "0", "Body": "<p>In general an enum is going to be used as a type definition and should always be in the header file. Things to think about are the scope of it.</p>\n<p>If the enum is just placed outside any scope in the header, it will be globally available to any thing that includes the header file. If you instead want the enum only accessible to the class itself, you can place it in the private section of the class. </p>\n<p>In general you shouldn't make the enum globally scoped, instead you should either put it in a namespace or in the public section of a class. Then you can access the enum by way of</p>\n<pre><code>NamespaceOrClass::EnumValue\n</code></pre>\n<p>Also, as a sidenote, enums automatically iterate values from the first one you give (or 0). </p>\n<pre><code>enum\n{\n    kCP_AboutBox_IconViewID = 1,\n    kCP_AboutBox_AppNameViewID = 2,\n    kCP_AboutBox_VersionViewID = 3,\n    kCP_AboutBox_DescriptionViewID = 4,\n    kCP_AboutBox_CopyrightViewID = 5\n};\n</code></pre>\n<p>Is exactly the same as</p>\n<pre><code>enum\n{\n    kCP_AboutBox_IconViewID = 1,\n    kCP_AboutBox_AppNameViewID,\n    kCP_AboutBox_VersionViewID,\n    kCP_AboutBox_DescriptionViewID,\n    kCP_AboutBox_CopyrightViewID\n};\n</code></pre>\n<p>It's not a problem or error, just stylistic really.</p>\n", "OwnerUserId": "155849", "PostTypeId": "2", "Id": "1291776", "Score": "2", "CreationDate": "2009-08-18T04:17:48.103", "LastActivityDate": "2009-08-18T04:17:48.103"}, "1284564": {"ParentId": "1284529", "CommentCount": "2", "Body": "<p>Remember to use header include guards in headers like:  </p>\n<pre><code>#ifndef header_name_h\n#define header_name_h\n...\n#endif\n</code></pre>\n<p>This helps you to keep to the one definition rule when multiple headers include your header.</p>\n<p>Also, Never Ever have:</p>\n<pre><code>using namespace &lt;name&gt;;\n</code></pre>\n<p>in a header as this can cause strange ambiguity problems.</p>\n", "OwnerUserId": "4834", "PostTypeId": "2", "Id": "1284564", "Score": "6", "CreationDate": "2009-08-16T15:37:17.870", "LastActivityDate": "2009-08-16T15:37:17.870"}, "1284529": {"CommentCount": "0", "CreationDate": "2009-08-16T15:24:59.580", "PostTypeId": "1", "AcceptedAnswerId": "1284599", "LastEditorUserId": "34509", "LastActivityDate": "2009-08-18T04:17:48.103", "LastEditDate": "2009-08-16T15:38:59.647", "ViewCount": "19301", "FavoriteCount": "2", "Title": "Enums: Can they do in .h or must stay in .cpp?", "Id": "1284529", "Score": "15", "Body": "<p>If I have something like:</p>\n<pre><code>enum\n{\n    kCP_AboutBox_IconViewID = 1,\n    kCP_AboutBox_AppNameViewID = 2,\n    kCP_AboutBox_VersionViewID = 3,\n    kCP_AboutBox_DescriptionViewID = 4,\n    kCP_AboutBox_CopyrightViewID = 5\n};\n</code></pre>\n<p>in my .cpp can it go in the .h?</p>\n<p>More so, what other lesser know things can you put in a .h besides class definitions, variables, etc, etc</p>\n", "Tags": "<c++><header>", "OwnerUserId": "147502", "AnswerCount": "7"}, "1284553": {"ParentId": "1284529", "CommentCount": "0", "Body": "<p>I have not enough information, but maybe you can declare the enum not only in the .h but inside the class. Remember to keep the scope of a variable to a minimum.<br>\nif the enum is relevant to a particular class you should declare it inside the class.</br></p>\n", "OwnerUserId": "136661", "PostTypeId": "2", "Id": "1284553", "Score": "0", "CreationDate": "2009-08-16T15:33:26.053", "LastActivityDate": "2009-08-16T15:33:26.053"}, "1284534": {"ParentId": "1284529", "CommentCount": "7", "Body": "<p>Yes, your enum definition can go in your header (<code>.h</code>) file. Don't repeat the definition in your <code>.cpp</code> file, though.</p>\n", "OwnerUserId": "28804", "PostTypeId": "2", "Id": "1284534", "Score": "3", "CreationDate": "2009-08-16T15:28:10.650", "LastActivityDate": "2009-08-16T15:28:10.650"}, "bq_ids": {"n4140": {"so_1284529_1284547_0": {"section_id": 7043, "quality": 0.8518518518518519, "length": 46}}, "n3337": {"so_1284529_1284547_0": {"section_id": 6788, "quality": 0.8518518518518519, "length": 46}}, "n4659": {"so_1284529_1284547_0": {"section_id": 8540, "quality": 0.8518518518518519, "length": 46}}}, "1284539": {"ParentId": "1284529", "CommentCount": "1", "Body": "<p>Yes, of course you can put it in a .h file. The only things that shouldn't go in a .h file are things that would cause a problem if they get included into more than one object, such as global object initializers.</p>\n", "OwnerUserId": "19405", "PostTypeId": "2", "Id": "1284539", "Score": "2", "CreationDate": "2009-08-16T15:28:55.127", "LastActivityDate": "2009-08-16T15:28:55.127"}});