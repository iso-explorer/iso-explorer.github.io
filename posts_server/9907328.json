post_cb({"9907600": {"Id": "9907600", "PostTypeId": "2", "Body": "<p><strong>Yes, it's legal</strong>. The relevant text is at \u00a714.7.2/12, talking about explicit template instantiation:</p>\n<blockquote>\n<p id=\"so_9907328_9907600_0\">12 The usual access checking rules <strong>do not apply to names used to specify explicit instantiations</strong>. [ <em>Note</em>: In particular, the template arguments and names used in the function declarator (including parameter types, return types and exception specifications) may be private types or objects which would normally not be accessible and the template may be a member template or member function which would not normally be\n  accessible. \u2014 <em>end note</em> ]</p>\n</blockquote>\n<p>Emhpasis mine.</p>\n", "LastActivityDate": "2012-03-28T12:35:52.490", "Score": "13", "CreationDate": "2012-03-28T12:35:52.490", "ParentId": "9907328", "CommentCount": "8", "OwnerUserId": "87234"}, "bq_ids": {"n4140": {"so_9907328_9907600_0": {"length": 38, "quality": 0.9047619047619048, "section_id": 261}}, "n3337": {"so_9907328_9907600_0": {"length": 38, "quality": 0.9047619047619048, "section_id": 252}}, "n4659": {"so_9907328_9907600_0": {"length": 38, "quality": 0.9047619047619048, "section_id": 268}}}, "9907328": {"ViewCount": "389", "Body": "<p>Our infamous litb has an interesting article on <a href=\"http://bloglitb.blogspot.fr/2011/12/access-to-private-members-safer.html\" rel=\"nofollow noreferrer\">how to circumvent the access check</a>.</p>\n<p>It is fully demonstrated by this simple code:</p>\n<pre><code>#include &lt;iostream&gt;\n\ntemplate&lt;typename Tag, typename Tag::type M&gt;\nstruct Rob { \n  friend typename Tag::type get(Tag) {\n    return M;\n  }\n};\n\n// use\nstruct A {\n  A(int a):a(a) { }\nprivate:\n  int a;\n};\n\n// tag used to access A::a\nstruct A_f { \n  typedef int A::*type;\n  friend type get(A_f);\n};\n\ntemplate struct Rob&lt;A_f, &amp;A::a&gt;;\n\nint main() {\n  A a(42);\n  std::cout &lt;&lt; \"proof: \" &lt;&lt; a.*get(A_f()) &lt;&lt; std::endl;\n}\n</code></pre>\n<p>Which compiles and runs (output <code>42</code>) with <a href=\"http://ideone.com/LA724\" rel=\"nofollow noreferrer\">gcc 4.3.4</a>, <a href=\"http://ideone.com/4sqlN\" rel=\"nofollow noreferrer\">gcc 4.5.1</a>, gcc 4.7.0 (see  user1131467's comment) and compiles with Clang 3.0 and Comeau C/C++ 4.3.10.1 in <strong>C++03 strict mode</strong> and MSVC 2005.</p>\n<p>I was asked by Luchian on <a href=\"https://stackoverflow.com/questions/9903718/friend-function-access-the-private-members-of-class-defined-in-static-library/9904241#comment12636611_9904241\">this answer</a> in which I used it to justify that it was actually legal. I agree with Luchian that it is weird, however both Clang and Comeau are close contenders for the most \"Standard\" compilers available (much more so than MSVC by default)...</p>\n<p>And I could not find anything in the drafts of the Standards I have available (n3337 being the last version I got my hands on).</p>\n<p>So... can anyone actually justifies that it is <strong>legal or not</strong> ?</p>\n", "AcceptedAnswerId": "9907600", "Title": "May pointer to members circumvent the access level of a member?", "CreationDate": "2012-03-28T12:18:12.230", "Id": "9907328", "CommentCount": "7", "FavoriteCount": "8", "PostTypeId": "1", "LastEditDate": "2017-05-23T12:11:25.830", "LastEditorUserId": "-1", "LastActivityDate": "2012-04-01T10:08:08.720", "Score": "13", "OwnerUserId": "147192", "Tags": "<c++><c++11><standards-compliance>", "AnswerCount": "2"}, "9907557": {"Id": "9907557", "PostTypeId": "2", "Body": "<p>The code is clearly illegal (and requires a compile time diagnostic).\nIn the line:</p>\n<pre><code>template struct Rob&lt;A_f, &amp;A::a&gt;;\n</code></pre>\n<p>the expression <code>A::a</code> accesses a private member of <code>A</code>.</p>\n<p>The standard is very clear about this: \u201cAccess control is applied\nuniformly to <strong>all</strong> names, whether the names are referred to from\ndeclarations or expressions.\u201c (\u00a711/4, emphasis added).  Since <code>a</code> is a private name in <code>A</code>, any reference to it outside of <code>A</code> is illegal.</p>\n", "LastActivityDate": "2012-03-28T12:32:45.353", "Score": "5", "CreationDate": "2012-03-28T12:32:45.353", "ParentId": "9907328", "CommentCount": "12", "OwnerUserId": "649665"}});