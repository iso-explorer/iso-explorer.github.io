post_cb({"bq_ids": {"n4140": {"so_31225264_31225334_0": {"length": 16, "quality": 0.9411764705882353, "section_id": 6153}}, "n3337": {"so_31225264_31225334_0": {"length": 16, "quality": 0.9411764705882353, "section_id": 5916}}, "n4659": {"so_31225264_31225334_0": {"length": 16, "quality": 0.9411764705882353, "section_id": 7650}}}, "31225334": {"Id": "31225334", "PostTypeId": "2", "Body": "<p>The C++ standard merely says:</p>\n<blockquote>\n<p id=\"so_31225264_31225334_0\"><strong>[expr.rel]/5</strong> If both operands (after conversions) are of arithmetic or enumeration type, each of the operators shall yield <code>true</code> if the specified relationship is true and <code>false</code> if it is false.</p>\n</blockquote>\n<p>So basically, <code>a &lt; b</code> is true if <code>a</code> is less than <code>b</code>.</p>\n<p>However, the implementation may claim conformance to IEC 559 aka IEEE 754 standard for floating point arithmetic, via <code>numeric_limits::is_iec559</code>. Then it is governed by that standard  in section 5.7 and table 4, which requires that all comparisons but <code>!=</code> involving <code>NaN</code> report <code>false</code>. <code>!=</code> involving <code>NaN</code> reports <code>true</code></p>\n", "LastEditorUserId": "3002139", "LastActivityDate": "2015-07-04T22:18:57.623", "Score": "6", "CreationDate": "2015-07-04T21:42:15.197", "ParentId": "31225264", "CommentCount": "4", "LastEditDate": "2015-07-04T22:18:57.623", "OwnerUserId": "1670129"}, "31225543": {"Id": "31225543", "PostTypeId": "2", "Body": "<p>Any comparison(except with \"!=\") with NaN returns false.</p>\n<p>Here is a table I constructed:</p>\n<pre><code>     +Dbl_Nan  0_Nan  Inf_Nan  NaN_NaN  +Dbl_Inf  +Dbl_-Inf  Inf_-Inf  Inf_Inf\n   -----------------------------------------------------------------------\n&gt;  |  False    False  False    False     False     True      True      False\n&lt;  |  False    False  False    False     True      False     False     False\n== |  False    False  False    False     False     False     False     True\n!= |  True     True   True     True      True      True      True      False\n</code></pre>\n<p>Click <a href=\"https://stackoverflow.com/a/1573715/2352507\">here</a> for the Rationale on why NaN is always false.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2015-07-04T22:22:23.800", "Score": "4", "CreationDate": "2015-07-04T22:22:23.800", "ParentId": "31225264", "CommentCount": "1", "LastEditDate": "2017-05-23T11:54:40.813", "OwnerUserId": "2352507"}, "31225344": {"Id": "31225344", "PostTypeId": "2", "Body": "<p>False.</p>\n<p>There is really no such thing as <code>-NaN</code>, although NaN values do carry a sign bit, as well as a payload. But for arithmetic purposes, a NaN is a NaN is a NaN.</p>\n<p>Any equality or ordered comparison with a NaN is false.</p>\n", "LastActivityDate": "2015-07-04T21:43:50.040", "Score": "1", "CreationDate": "2015-07-04T21:43:50.040", "ParentId": "31225264", "CommentCount": "2", "OwnerUserId": "1566221"}, "31225264": {"ViewCount": "1149", "Body": "<p>Consider for example</p>\n<pre><code>bool fun (double a, double b) {\n    return a &lt; b;\n}\n</code></pre>\n<p>What will <code>fun</code> return if any of the arguments are NaN? Is this undefined / implementation defined behavior?</p>\n<p>What happens with the other relational operators and the equality operators?</p>\n", "AcceptedAnswerId": "31225334", "Title": "What is the result of comparing a number with NaN?", "CreationDate": "2015-07-04T21:32:31.930", "Id": "31225264", "CommentCount": "8", "LastEditDate": "2017-06-15T13:48:42.547", "PostTypeId": "1", "LastEditorUserId": "296974", "LastActivityDate": "2017-06-15T13:48:42.547", "Score": "0", "OwnerUserId": "3002139", "Tags": "<c++>", "AnswerCount": "3"}});