post_cb({"25893539": {"Id": "25893539", "PostTypeId": "2", "Body": "<p>Even it it would be allowed and/or work, <strong>don't do that</strong>. It makes not just your program unreadable, because <code>register</code> will be confused (and is extremely poor coding style), but all programs that <code>#include</code> your header file!</p>\n<p>Rather use a related name ('Register' or similar).</p>\n<p><strong>Avoid macros</strong> as much as possible. In particular such stupid macros as <code>MAX</code> or <code>MIN</code> (which are defined in some library headers). They confuse everybody and can cause serious headache, because the compiler doesn't know about them, such that your inadvertent use of <code>MAX</code> as an identifier causes confusing compiler messages.</p>\n", "LastEditorUserId": "1023390", "LastActivityDate": "2014-09-17T14:50:10.447", "Score": "1", "CreationDate": "2014-09-17T14:36:48.367", "ParentId": "25893317", "CommentCount": "3", "OwnerUserId": "1023390", "LastEditDate": "2014-09-17T14:50:10.447"}, "bq_ids": {"n4140": {"so_25893317_25893454_1": {"length": 7, "quality": 0.875, "section_id": 6298}, "so_25893317_25893454_0": {"length": 6, "quality": 0.75, "section_id": 6306}}, "n3337": {"so_25893317_25893454_1": {"length": 7, "quality": 0.875, "section_id": 6055}, "so_25893317_25893454_0": {"length": 6, "quality": 0.75, "section_id": 6063}}, "n4659": {"so_25893317_25893454_1": {"length": 7, "quality": 0.875, "section_id": 7807}, "so_25893317_25893454_0": {"length": 6, "quality": 0.75, "section_id": 7817}}}, "25893454": {"Id": "25893454", "PostTypeId": "2", "Body": "<p>C++ says, in <code>17.6.4.3.1[macro.names]/2</code></p>\n<blockquote>\n<p id=\"so_25893317_25893454_0\">A translation unit shall not #define or #undef names lexically identical to keywords</p>\n</blockquote>\n<p>although this falls under</p>\n<blockquote>\n<p id=\"so_25893317_25893454_1\">This section describes restrictions on C++ programs that use the facilities of the C++ standard library</p>\n</blockquote>\n<p>C says, in <code>7.1.2/4</code></p>\n<blockquote>\n<p id=\"so_25893317_25893454_2\">The program shall not have any macros with names lexically identical\n  to keywords currently defined prior to the inclusion of the header or\n  when any macro defined in the header is expanded</p>\n</blockquote>\n<p>so, in C, you could put that after all <code>#include</code>s  (Edit: as pointed out in comments, even in C, using a macro that comes from a standard library header after your <code>#define</code> would be formally undefined, since it might be using that keyword)</p>\n", "LastEditorUserId": "273767", "LastActivityDate": "2014-09-17T14:39:46.700", "Score": "9", "CreationDate": "2014-09-17T14:33:08.827", "ParentId": "25893317", "CommentCount": "5", "OwnerUserId": "273767", "LastEditDate": "2014-09-17T14:39:46.700"}, "25893317": {"ViewCount": "105", "Body": "<p>Having in mind that <code>register</code> is a keyword and that we could use to name functions/methods (i really miss it), we can't do that. But I wonder, is it dangerous to overwrite that keyword?</p>\n<pre><code>#define register ...\n</code></pre>\n<p>Will be any kind of side effects?</p>\n", "AcceptedAnswerId": "25893454", "Title": "Overwrite register keyword", "CreationDate": "2014-09-17T14:28:14.713", "Id": "25893317", "CommentCount": "1", "PostTypeId": "1", "LastActivityDate": "2014-09-17T15:19:24.190", "Score": "3", "OwnerUserId": "3996275", "Tags": "<c++><c>", "AnswerCount": "3"}, "25894430": {"Id": "25894430", "PostTypeId": "2", "Body": "<p>Even if it were not prohibited by the spec, it will still break things if you do it.</p>\n<p>The following source:</p>\n<pre><code>#define foo register int a;\n\n#define register static\n\nint main()\n{\n    foo\n    return 0;\n}\n</code></pre>\n<p>produces this when run through the MSVC compiler with the /P switch</p>\n<pre><code>#line 1 \"test.cpp\"\n\nint main()\n{\n    static int a;\n    return 0;\n}\n</code></pre>\n<p>What this means is that even though your #define follows any #defines in headers that might include the word \"register\" in their expansions, due to the way C/C++ macro expansions happen, you will break those macros.</p>\n", "LastActivityDate": "2014-09-17T15:19:24.190", "CommentCount": "0", "CreationDate": "2014-09-17T15:19:24.190", "ParentId": "25893317", "Score": "2", "OwnerUserId": "4022617"}});