post_cb({"13793373": {"Id": "13793373", "PostTypeId": "2", "Body": "<p>Writing out the same string literal multiple times is error-prone anyway - what if you mis-type one of them?</p>\n<p>If you use globals, you can be sure they'll have the same address, because you're referring to exactly the same variable:</p>\n<pre><code>char const * const Jump = \"Jump\";\n</code></pre>\n<p>(or declare in a header and initialize the actual string values in a single .cpp)</p>\n<p>and use as:</p>\n<pre><code>Mappings[ KEY_X ] = Jump;\n...\nif ( IsDown( Jump ) ) {\n    ...\n</code></pre>\n<p>I'm not going to pretend this is great style (it isn't), and if you just want a built-in link between an enum and string representation, there are better ways to get it.</p>\n", "LastActivityDate": "2012-12-10T00:19:31.410", "CommentCount": "2", "CreationDate": "2012-12-10T00:19:31.410", "ParentId": "13793294", "Score": "1", "OwnerUserId": "212858"}, "13793331": {"Id": "13793331", "PostTypeId": "2", "Body": "<p>As far as the standard is concerned, the compiler may or may not make the various instances of the same string literal point to the same position of memory</p>\n<blockquote>\n<p id=\"so_13793294_13793331_0\">Whether all string literals are distinct (that is, are stored in nonoverlapping objects) is implementation defined.</p>\n</blockquote>\n<p>(C++11, \u00a72.14.5 \u00b612)</p>\n<p>Also, if the values are dynamically allocated, come from some buffer, ... they surely have different addresses from the string literals; so the only sane way to check if one is equal to another is to compare the bytes of the strings (in an <code>strcmp</code>-like fashion), which obviously is slower than a pointer comparison.</p>\n<p>Besides, I don't see the point in using string for these settings: just use <code>enum</code>s, it performs at least as fast (probably faster) and it's way less error-prone (if you write a wrong enum value you get a compilation error, if you make a typo in a string constant it is silently accepted).</p>\n", "LastEditorUserId": "214671", "LastActivityDate": "2012-12-10T00:20:27.197", "Score": "1", "CreationDate": "2012-12-10T00:14:22.863", "ParentId": "13793294", "CommentCount": "0", "OwnerUserId": "214671", "LastEditDate": "2012-12-10T00:20:27.197"}, "13793344": {"Id": "13793344", "PostTypeId": "2", "Body": "<p>If all your string constants are in the same file, they might be folded into the same memory location. If they are in several files that get compiled separately, or if you read them in dynamically, they won't be.</p>\n<p>Since you're doing C(++), you can compare strings in two ways (and you haven't said anything about it in the question): pointer identity (<code>==</code>) or char-by-char comparison (<code>strncmp</code>). If you're doing the former, it is extremely unreliable as it depends on the fickles of the compiler (and is certain to fail in the second case); if latter, then you know string comparisons will be taking place.</p>\n<p>Save yourself the headache and do it the right way that you already know to be the right way: enums or constants. Convert once at input/output, then you can handle them as numbers internally, which is fast and safe.</p>\n", "LastActivityDate": "2012-12-10T00:15:30.467", "CommentCount": "3", "CreationDate": "2012-12-10T00:15:30.467", "ParentId": "13793294", "Score": "3", "OwnerUserId": "240443"}, "bq_ids": {"n4140": {"so_13793294_13793331_0": {"length": 8, "quality": 0.8, "section_id": 5361}}, "n3337": {"so_13793294_13793331_0": {"length": 8, "quality": 0.8, "section_id": 5157}}, "n4659": {"so_13793294_13793331_0": {"length": 8, "quality": 0.8, "section_id": 6789}}}, "13793855": {"Id": "13793855", "PostTypeId": "2", "Body": "<p>You mention a couple of times converting between an enum and a string.  Here is how I do it.\n(I think credit / blame goes to gcc for the idea.) Create a file like action.def with</p>\n<pre><code>ENUM(Jump)\nENUM(Shoot)\n</code></pre>\n<p>In a header file define the enum like this</p>\n<pre><code>#define ENUM(a) a,\nEnum Actions {\n#include \"action.def\"\n};\n#undef ENUM\n</code></pre>\n<p>In a .cpp file that needs to map enum member to string, do this</p>\n<pre><code>struct EnumMap {\n    int value;\n    const char * name;\n}\n#define ENUM(a) { (int) a, #a },\nstruct EnumMap {\n#include \"action.def\"\n} ActionMap[];\n#undef ENUM\n</code></pre>\n<p>Then your code uses ActionMap[] to convert enum values to strings and back.</p>\n", "LastActivityDate": "2012-12-10T01:39:39.200", "CommentCount": "2", "CreationDate": "2012-12-10T01:39:39.200", "ParentId": "13793294", "Score": "2", "OwnerUserId": "1862101"}, "13793294": {"ViewCount": "165", "Body": "<p>I'm a relative C/C++ noob, but experienced in C# and a bunch of other languages, and am currently building a game engine in C++. </p>\n<p>For the input system (key/mouse/joystick) I had an idea to use string literals to simplify the configuration of game-specific input events, as opposed to enums. But I'm not totally sure how the C compiler would optimize it - doing character-by-character string comparisons each time might be inefficient. </p>\n<p>Here's the basic idea - mappings from device events to \"game-specific events\" would be in a std::map with int/enum keys and const char * values :</p>\n<pre><code>Mappings[ KEY_X ] = \"Jump\";\nMappings[ KEY_Y ] = \"Shoot\";\nMappings[ MOUSE_1 ] = \"Shoot\";\n</code></pre>\n<p>These could be hard-coded, loaded from a config file, etc. (the strings would simplify parsing &amp; saving, as well as adding new event types)</p>\n<p>Then in the game, I can deal solely in game-specific events:</p>\n<pre><code>if ( IsDown( \"Jump\" ) ) {\n}\nif ( IsSinglePress( \"Shoot\" ) ) {\n}\n</code></pre>\n<p>Question is, will all my string literals and const char *'s be magically optimized away and end up as efficient as enums or integer constants? E.g.</p>\n<pre><code>if ( IsDown( GAMEKEY_SHOOT ) ) {\n   // ...\n}\n</code></pre>\n<p>Or will it be doing string comparisons, etc.? I'm hoping the compiler will see instances of the same string literal, store it once, and use a single pointer value throughout, but not sure. </p>\n", "AcceptedAnswerId": "13793344", "Title": "Efficiency of strings as constants?", "CreationDate": "2012-12-10T00:09:25.160", "Id": "13793294", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2012-12-10T01:39:39.200", "Score": "2", "OwnerUserId": "1880936", "Tags": "<c++><c><string>", "AnswerCount": "4"}});