post_cb({"bq_ids": {"n4140": {"so_19959637_19959637_0": {"length": 4, "quality": 0.5714285714285714, "section_id": 111}}, "n3337": {"so_19959637_19959637_0": {"length": 4, "quality": 0.5714285714285714, "section_id": 106}}, "n4659": {"so_19959637_19959637_0": {"length": 4, "quality": 0.5714285714285714, "section_id": 115}}}, "19959637": {"ViewCount": "960", "Body": "<p>The following code:</p>\n<pre><code>template&lt;typename T, MyEnum K&gt; __global__ void myKernel(const T a[]);\ntemplate&lt;typename T&gt; __global__ void myKernel&lt;T,SomeValueOfMyEnum&gt;(const T a[]) {\n    // implementation\n}\n</code></pre>\n<p>Triggers the following error message:</p>\n<blockquote>\n<p id=\"so_19959637_19959637_0\">error: an explicit template argument list is not allowed on this declaration</p>\n</blockquote>\n<p>Why? </p>\n<p>Notes:</p>\n<ul>\n<li>I'm pretty sure this isn't CUDA-related, just a C++ issue.</li>\n<li>There are a bunch of questions on partial specialization, but I can't figure out if mine is a dupe of any of them.</li>\n</ul>\n", "AcceptedAnswerId": "19959793", "Title": "Double-templated function instantiation fails", "CreationDate": "2013-11-13T16:49:54.227", "Id": "19959637", "CommentCount": "0", "LastEditDate": "2013-11-13T17:22:33.447", "PostTypeId": "1", "LastEditorUserId": "1593077", "LastActivityDate": "2013-11-13T17:23:06.613", "Score": "1", "OwnerUserId": "1593077", "Tags": "<c++><templates><cuda><partial-specialization>", "AnswerCount": "1"}, "19959793": {"Id": "19959793", "PostTypeId": "2", "Body": "<p>You can't do a partial specialization for a template function, because C++ doesn't define such a thing. You just can do a <em>class</em> template partial specialization [\u00a714.5.5 / temp.class.spec]</p>\n<p>Class partial specialization -- A little ugly but maybe it helps you.</p>\n<pre><code>enum MyEnum\n{\n    E1, E2\n};\n\ntemplate&lt;typename T, MyEnum K&gt;\nstruct MyKernel\n{\n    void operator()(const T a[])\n    {\n        // ...\n    }\n};\n\ntemplate&lt;typename T&gt;\nstruct MyKernel&lt;T, E1&gt;\n{\n    void operator()(const T a[])\n    {\n        // ...\n    }\n};\n\nint main()\n{\n    MyKernel&lt;int, E1&gt;()( ... ); // &lt;--- To call\n} \n</code></pre>\n", "LastEditorUserId": "952747", "LastActivityDate": "2013-11-13T17:23:06.613", "Score": "4", "CreationDate": "2013-11-13T16:57:21.600", "ParentId": "19959637", "CommentCount": "4", "OwnerUserId": "952747", "LastEditDate": "2013-11-13T17:23:06.613"}});