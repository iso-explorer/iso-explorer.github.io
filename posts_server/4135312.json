post_cb({"bq_ids": {"n4140": {"so_4135312_4135545_1": {"length": 21, "quality": 0.9545454545454546, "section_id": 7087}}, "n3337": {"so_4135312_4135545_1": {"length": 21, "quality": 0.9545454545454546, "section_id": 6831}}, "n4659": {"so_4135312_4135545_1": {"length": 21, "quality": 0.9545454545454546, "section_id": 8588}}}, "4135392": {"Id": "4135392", "PostTypeId": "2", "Body": "<p>It seems that the compiler is trying to call A::f and fails because of the argument, which seems normal in a way. Do you have the same error if you use a non template function ?</p>\n", "LastActivityDate": "2010-11-09T15:31:11.480", "CommentCount": "1", "CreationDate": "2010-11-09T15:31:11.480", "ParentId": "4135312", "Score": "2", "OwnerUserId": "376113"}, "4135312": {"ViewCount": "400", "Body": "<p>I'm having an odd problem, and am wondering why g++ 4.1.2 is behaving the way it does.</p>\n<p>Stripped to its essentials:</p>\n<pre><code>#include &lt;iostream&gt;\n\ntemplate&lt;typename T&gt;\ninline void f(T x) { std::cout &lt;&lt; x*x; }\n\nnamespace foo {\n  class A {\n  public:\n    void f() const { f(2); }\n  };\n}\n</code></pre>\n<p>The call to <code>f(2)</code> fails because the compiler fails to match the template function <code>f</code>.\nI can make it work with <code>::f(2)</code> but I would like to know WHY this is necessary, since it's completely unambiguous, and as far as my (admittedly out of date) knowledge of the matching rules goes, this should work.</p>\n", "AcceptedAnswerId": "4135413", "Title": "template function matching in g++", "CreationDate": "2010-11-09T15:23:40.700", "Id": "4135312", "CommentCount": "10", "LastEditDate": "2010-11-09T15:29:23.477", "PostTypeId": "1", "LastEditorUserId": "233928", "LastActivityDate": "2010-11-09T16:19:07.787", "Score": "4", "OwnerUserId": "233928", "Tags": "<c++><templates><g++><matching>", "AnswerCount": "3"}, "4135413": {"Id": "4135413", "PostTypeId": "2", "Body": "<p>The compiler examines all scopes for a candidate, starting with the current scope. It finds a function named <code>f</code> in the immediate scope, <strong>and there stops the search</strong>. Your template version is never examined as a candidate.</p>\n<p>See <a href=\"http://gotw.ca/publications/mill08.htm\" rel=\"nofollow\">Namespaces and the Interface Principle</a> for a complete explanation.</p>\n", "LastEditorUserId": "451980", "LastActivityDate": "2010-11-09T15:39:37.827", "Score": "12", "CreationDate": "2010-11-09T15:33:01.137", "ParentId": "4135312", "CommentCount": "2", "OwnerUserId": "451980", "LastEditDate": "2010-11-09T15:39:37.827"}, "4135545": {"Id": "4135545", "PostTypeId": "2", "Body": "<p>Refer to C++03 section</p>\n<blockquote>\n<p id=\"so_4135312_4135545_0\">3.4.1  Unqualified name lookup </p>\n<p id=\"so_4135312_4135545_1\">In all the cases listed in 3.4.1, the scopes are searched for a declaration in the order listed in each of the respective categories; <strong>name lookup ends as soon as a declaration is found for the name</strong>.  If no declaration is found, the program is ill-formed.</p>\n</blockquote>\n<p>In your code sample the compiler finds a name <code>f</code> in the current scope thus ending the unqualified name lookup but there is a mismatch in the prototypes of the functions and so you get an error. </p>\n<p>Qualifying it with <code>::</code> makes it work because the name is then searched in the global namespace and the <code>f</code> with the correct prototype is called.</p>\n", "LastEditorUserId": "165520", "LastActivityDate": "2010-11-09T16:19:07.787", "Score": "5", "CreationDate": "2010-11-09T15:44:58.413", "ParentId": "4135312", "CommentCount": "1", "OwnerUserId": "165520", "LastEditDate": "2010-11-09T16:19:07.787"}});