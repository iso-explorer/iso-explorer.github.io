post_cb({"bq_ids": {"n4140": {"so_4325154_4325223_0": {"length": 16, "quality": 1.0, "section_id": 6109}}, "n3337": {"so_4325154_4325223_0": {"length": 16, "quality": 1.0, "section_id": 5875}}, "n4659": {"so_4325154_4325223_0": {"length": 16, "quality": 1.0, "section_id": 7606}}}, "4325900": {"Id": "4325900", "PostTypeId": "2", "Body": "<p>It is undefined behavior.</p>\n<p>However, you can make the compiler check for incomplete types, like boost:</p>\n<pre><code>// verify that types are complete for increased safety\n\ntemplate&lt;class T&gt; inline void checked_delete(T * x)\n{\n    // intentionally complex - simplification causes regressions\n    typedef char type_must_be_complete[ sizeof(T)? 1: -1 ];\n    (void) sizeof(type_must_be_complete);\n    delete x;\n}\n</code></pre>\n<p>Applying <code>sizeof</code> to an incomplete type should trigger an error, and I suppose if that passes with some compiler, then an array of negative size would trigger an error.</p>\n", "LastActivityDate": "2010-12-01T15:25:15.853", "CommentCount": "0", "CreationDate": "2010-12-01T15:25:15.853", "ParentId": "4325154", "Score": "4", "OwnerUserId": "155693"}, "4325208": {"Id": "4325208", "PostTypeId": "2", "Body": "<p>It is undefined behaviour, and a common gotcha when implementing the pImpl pattern. To the best of my knowledge, there is simply no such thing as a warning that the compiler is required to emit. Warnings are elective; they're there because the compiler writer thought they would be useful.</p>\n", "LastActivityDate": "2010-12-01T14:12:02.197", "CommentCount": "0", "CreationDate": "2010-12-01T14:12:02.197", "ParentId": "4325154", "Score": "3", "OwnerUserId": "523612"}, "4325154": {"ViewCount": "10808", "Body": "<p>This one made me think:</p>\n<pre><code>class X;\n\nvoid foo(X* p)\n{\n    delete p;\n}\n</code></pre>\n<p>How can we possibly <code>delete p</code> if we do not even know whether <code>X</code> has visible destructor? g++ 4.5.1 gives three warnings:</p>\n<blockquote id=\"so_4325154_4325154_0\">\n<pre><code>warning: possible problem detected in invocation of delete operator:\nwarning: 'p' has incomplete type\nwarning: forward declaration of 'struct X'\n</code></pre>\n</blockquote>\n<p>And then it says:</p>\n<blockquote>\n<p id=\"so_4325154_4325154_1\">note: <strong>neither the destructor nor the class-specific operator delete\n  will be called, even if they are declared when the class is defined.</strong></p>\n</blockquote>\n<p>Wow... are compilers required to diagnose this situation like g++ does? Or is it undefined behavior?</p>\n", "AcceptedAnswerId": "4325223", "Title": "Delete objects of incomplete type", "CreationDate": "2010-12-01T14:06:24.297", "Id": "4325154", "CommentCount": "3", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2015-07-11T23:02:44.557", "LastEditorUserId": "4370109", "LastActivityDate": "2015-07-11T23:02:44.557", "Score": "25", "OwnerUserId": "252000", "Tags": "<c++><pointers><forward-declaration><delete-operator><incomplete-type>", "AnswerCount": "3"}, "4325223": {"Id": "4325223", "PostTypeId": "2", "Body": "<p>From the standard [expr.delete]:</p>\n<blockquote>\n<p id=\"so_4325154_4325223_0\">If the object being deleted has\n  incomplete class type at the point of\n  deletion and the complete class has a\n  non-trivial destructor or a\n  deallocation function, the behavior is\n  undefined.</p>\n</blockquote>\n<p>So, it's UB if there's nontrivial stuff to do, and it's ok if there isn't. Warnings aren't neccessary for UB.</p>\n", "LastEditorUserId": "1728537", "LastActivityDate": "2013-12-30T13:14:10.043", "Score": "20", "CreationDate": "2010-12-01T14:13:42.577", "ParentId": "4325154", "CommentCount": "15", "OwnerUserId": "524436", "LastEditDate": "2013-12-30T13:14:10.043"}});