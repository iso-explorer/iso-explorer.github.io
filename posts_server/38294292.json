post_cb({"bq_ids": {"n4140": {"so_38294292_38295071_4": {"length": 26, "quality": 1.0, "section_id": 5356}, "so_38294292_38295071_2": {"length": 6, "quality": 0.5454545454545454, "section_id": 5360}, "so_38294292_38295071_5": {"length": 14, "quality": 0.875, "section_id": 5361}}, "n3337": {"so_38294292_38295071_4": {"length": 26, "quality": 1.0, "section_id": 5153}, "so_38294292_38295071_2": {"length": 6, "quality": 0.5454545454545454, "section_id": 5156}, "so_38294292_38295071_5": {"length": 14, "quality": 0.875, "section_id": 5157}}, "n4659": {"so_38294292_38295071_4": {"length": 26, "quality": 1.0, "section_id": 6781}, "so_38294292_38295071_2": {"length": 6, "quality": 0.5454545454545454, "section_id": 6785}, "so_38294292_38295071_5": {"length": 14, "quality": 0.875, "section_id": 6789}}}, "38294639": {"Id": "38294639", "PostTypeId": "2", "Body": "<p>When you write the literal <code>\"text\"</code>, that text will be included somewhere the compiled program image.  The program image is usually placed in write-protected memory on modern operating systems for security reasons.</p>\n<p><code>char* someString = \"text\";</code> declares a pointer to the string in your probably-write-protected program image.  The ability to declare this pointer as non-const was a feature included until C++11 to maintain source compatibility with C.  Note that even though <code>someString</code> is not a pointer-to-const, any attempt to modify the value that it points to will still result in undefined behavior.  This backwards compatibility feature was removed in C++11.  <code>someString</code> must now be declared as pointer-to-const: <code>const char* someString = \"text\";</code>.  You can cast the <code>const</code> away, but attempting to write to the value pointed to will still result in undefined behavior the same as any <code>const</code> value you cast to non-const.</p>\n<p><code>char someString[] = \"text\";</code> works differently.  This copies the string <code>\"text\"</code> from your program's code memory into an array located in data memory.  It's similar to</p>\n<pre><code>char someString[5];\nstrcpy(someString, \"text\");\n</code></pre>\n<p>Since <code>someString</code> is an array in your program's data memory, it's fine to write to it, and it doesn't need to be const-qualified.</p>\n", "LastActivityDate": "2016-07-10T17:30:17.950", "Score": "5", "CreationDate": "2016-07-10T17:30:17.950", "ParentId": "38294292", "CommentCount": "1", "OwnerUserId": "4151599"}, "38295071": {"Id": "38295071", "PostTypeId": "2", "Body": "<p>According to the standard: Annex C (Compatability)</p>\n<p>C1.1 Subclause 2.14.5:</p>\n<blockquote>\n<p id=\"so_38294292_38295071_0\">Change: String literals made const</p>\n<p id=\"so_38294292_38295071_1\">The type of a string literal is changed from \u201carray of char\u201d to \u201carray of const char.\u201d The type of a char16_t string literal is changed from \u201carray of some-integer-type\u201d to \u201carray of const char16_t.\u201d The type of a char32_t string literal is changed from \u201carray of some-integer-type\u201d to \u201carray of const char32_t.\u201d</p>\n<p id=\"so_38294292_38295071_2\">The type of a wide string literal is changed from \u201carray of wchar_t\u201d to \u201carray of const wchar_t.\u201d</p>\n<p id=\"so_38294292_38295071_3\">Rationale: This avoids calling an inappropriate overloaded function, which might expect to be able to modify its argument.</p>\n</blockquote>\n<p>And indeed, the C++ standard 2.14.5.8 says:</p>\n<blockquote>\n<p id=\"so_38294292_38295071_4\">Ordinary string literals and UTF-8 string literals are also referred to as narrow string literals. A narrow string literal has type \u201carray of n const char\u201d, where n is the size of the string as defined below, and has static storage duration</p>\n</blockquote>\n<p>This is also allows such strings get various special treatment: the compiler/linker can choose to eliminate duplicates of a string across compilation units, (string pooling in msvc terms), it can store them in the data section and read only memory.</p>\n<p>2.14.5.12</p>\n<blockquote>\n<p id=\"so_38294292_38295071_5\">Whether all string literals are distinct (that is, are stored in nonoverlapping objects) is implementationdefined. The effect of attempting to modify a string literal is undefined.</p>\n</blockquote>\n<p>The <code>char* x = \"hello world\";</code> is a throw-back to C++'s inheritance from early C. Visual Studio supports it because of the heavy baggage in their own libraries.</p>\n", "LastActivityDate": "2016-07-10T18:17:43.133", "Score": "1", "CreationDate": "2016-07-10T18:17:43.133", "ParentId": "38294292", "CommentCount": "1", "OwnerUserId": "257645"}, "38294292": {"ViewCount": "218", "Body": "<p>In the past i've been using Visual Studio 2010/2013/2015 and this syntax was possible :</p>\n<pre><code>char* szString = \"This works!\";\n</code></pre>\n<p>I've decided to step on and change my lifestyle of coding towards Linux, as I have installed g++ and have SlickEdit as my IDE.</p>\n<p>It seems like that sentence doesn't work anymore.\nCan anyone please state why?</p>\n<p>This works however :</p>\n<pre><code>char strString[] = \"This works!\";\n</code></pre>\n<p>The error is something with c++11.</p>\n<p>Does anyone have an idea why this happens? Not how to fix it, cause in my workspace there isn't any way to install a c++11 compiler, i'm just curious if it has to do with something on the background on how the compiler works.\nWhat I do know about the first line of code, is that it creates a constant variable on the stack and creates a new pointer setting itself towards that ESP's value, but on the second one it counts the amount of letters on the constant variable and then sets a null terminator in the end as a result.</p>\n<p>Oh and one more thing -&gt; There seems to be a difference also in the way the first one is set in GCC/GPP, as the first type is {char*&amp;} and the second one is {char(*)[12]}, any explanation on that too? Thanks!</p>\n", "AcceptedAnswerId": "38294639", "Title": "pointer-to-char-array assignments in c/c++", "CreationDate": "2016-07-10T16:54:51.960", "Id": "38294292", "CommentCount": "9", "LastEditDate": "2016-07-10T17:01:29.680", "PostTypeId": "1", "LastEditorUserId": "6344097", "LastActivityDate": "2016-07-10T18:17:43.133", "Score": "-1", "OwnerUserId": "6344097", "Tags": "<c++><char-pointer>", "AnswerCount": "2"}});