post_cb({"31340334": {"ParentId": "31333301", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>EDIT: After a little thinking: Templates firstly get definied if you instantiate them. So your first code works find cause the template firstly gets defined if the compiler has reached the line where you instantiate the template class.</p>\n", "OwnerUserId": "4657571", "LastEditorUserId": "4657571", "LastEditDate": "2015-07-10T12:24:37.533", "Id": "31340334", "Score": "2", "CreationDate": "2015-07-10T12:04:41.457", "LastActivityDate": "2015-07-10T12:24:37.533"}, "31333301": {"CommentCount": "5", "ViewCount": "484", "CreationDate": "2015-07-10T05:44:47.583", "LastActivityDate": "2015-07-10T12:24:37.533", "Title": "C++ dynamic_cast to forward declared class template compiles, but is it safe?", "PostTypeId": "1", "Id": "31333301", "Score": "10", "Body": "<p>The following code compiles and gives result as one would expect in (GCC and clang):</p>\n<pre><code>template &lt;typename T&gt; struct Derived;\n\nstruct Base\n{\n    template &lt;typename T&gt;\n    void foo(T * const t)\n    {\n        dynamic_cast&lt;Derived&lt;T&gt; * const&gt;(this)-&gt;bar(t);\n    }\n};\n\ntemplate &lt;typename T&gt;\nstruct Derived : Base\n{\n    void bar(T const *) const { }\n};\n</code></pre>\n<p>The code dispatches a call to <code>foo</code> in <code>Base</code> to <code>bar</code> in <code>Derived</code>.</p>\n<p>As a point of reference, the following code does not compile:</p>\n<pre><code>struct Derived2;\n\nstruct Base2\n{\n    template &lt;typename T&gt;\n    void foo(T * const t)\n    {\n        dynamic_cast&lt;Derived2 * const&gt;(this)-&gt;bar(t);\n    }\n};\n\nstruct Derived2 : Base2\n{\n    template &lt;typename T&gt;\n    void bar(T const *) const { }\n};\n</code></pre>\n<p>GCC provides the following diagnostic:</p>\n<pre><code>main.cpp: In member function 'void Base2::foo(T*)':\nmain.cpp:126:45: error: invalid use of incomplete type 'struct Derived2'\n         dynamic_cast&lt;Derived2 * const&gt;(this)-&gt;bar(t);\n                                             ^\nmain.cpp:119:8: note: forward declaration of 'struct Derived2'\n struct Derived2;\n        ^\n</code></pre>\n<p>The C++14 standard states in the section on the One Definition Rule, the following:</p>\n<blockquote>\n<p id=\"so_31333301_31333301_0\">5 Exactly one definition of a class is required in a translation unit\n  if the class is used in a way that requires the class type to be\n  complete. <br>\n  [ Example: the following complete translation unit is\n  well-formed, even though it never defines X: <br>\n  struct X; // declare X as a struct type <br>\n  struct X* x1; // use X in pointer formation <br>\n  X* x2; // use X in pointer formation <br>\n  \u2014end example ] <br>\n  [ Note: The rules for\n  declarations and expressions describe in which contexts complete class\n  types are required. A class type T must be complete if:\n  (5.1) \u2014 an object of type T is defined (3.1), or <br>\n  (5.2) \u2014 a non-static class data member of type T is declared (9.2), or <br>\n  (5.3) \u2014 T is used as the object type or array element type in a new-expression (5.3.4), or <br>\n  (5.4) \u2014 an lvalue-to-rvalue conversion is applied to a glvalue referring to an object of type T (4.1), or <br>\n  (5.5) \u2014 an expression is converted (either implicitly or explicitly) to type T (Clause 4, 5.2.3, 5.2.7, 5.2.9, 5.4), or <br>\n  (5.6) \u2014 an expression that is not a null pointer constant, and has type other than cv void*, is converted to the type pointer to T or reference to T using a standard conversion (Clause 4), a dynamic_cast (5.2.7) or a static_cast (5.2.9), or ...</br></br></br></br></br></br></br></br></br></br></br></p>\n</blockquote>\n<p>This seems to state that the first example is not legal. This is construct ill-formed? If so, why am I not getting an error?</p>\n", "Tags": "<c++><templates><forward-declaration><incomplete-type>", "OwnerUserId": "540815", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_31333301_31333301_0": {"section_id": 7042, "quality": 0.7864077669902912, "length": 81}}, "n3337": {"so_31333301_31333301_0": {"section_id": 6787, "quality": 0.7864077669902912, "length": 81}}, "n4659": {"so_31333301_31333301_0": {"section_id": 8539, "quality": 0.7669902912621359, "length": 79}}}});