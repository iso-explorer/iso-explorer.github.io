post_cb({"19022663": {"CommentCount": "0", "ViewCount": "182", "PostTypeId": "1", "LastEditorUserId": "101361", "CreationDate": "2013-09-26T08:06:39.843", "LastActivityDate": "2013-09-27T06:01:09.880", "Title": "Why is Dalvik Monitor aligned on 8-byte boundary", "LastEditDate": "2013-09-26T10:20:55.843", "Id": "19022663", "Score": "2", "Body": "<p>in <code>&lt;code root&gt;/dalvik/vm/Sync.cpp</code>, there is a <code>struct Monitor</code>:</p>\n<pre><code>struct Monitor {\n    Thread*     owner;          /* which thread currently owns the lock? */\n    int         lockCount;      /* owner's recursive lock depth */\n    Object*     obj;            /* what object are we part of [debug only] */\n\n    Thread*     waitSet;    /* threads currently waiting on this monitor */\n\n    pthread_mutex_t lock;\n\n    Monitor*    next;\n\n    /*\n     * Who last acquired this monitor, when lock sampling is enabled.\n     * Even when enabled, ownerMethod may be NULL.\n     */\n    const Method* ownerMethod;\n    u4 ownerPc;\n};\n</code></pre>\n<p>I cannot understand why <code>Monitor</code> is aligned by 8 bytes. I think it should align by 4 bytes, because all members in it (i.e. pointer, <code>int</code> &amp; <code>pthread_mutex_t</code>) are 4 bytes in length.</p>\n", "Tags": "<android><c++><monitor><dalvik>", "OwnerUserId": "2818446", "AnswerCount": "1"}, "19023271": {"ParentId": "19022663", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>The question didn't explicitly show it but by 8-byte alignment you probably mean this part of the <a href=\"http://code.metager.de/source/xref/android/4.2/dalvik/vm/Sync.cpp\" rel=\"nofollow\">code</a>, with the <code>Misaligned monitor</code> check:</p>\n<pre><code>Monitor* dvmCreateMonitor(Object* obj)\n{\n    Monitor* mon;\n    mon = (Monitor*) calloc(1, sizeof(Monitor));\n    if (mon == NULL) {\n        ALOGE(\"Unable to allocate monitor\");\n        dvmAbort();\n    }\n    if (((u4)mon &amp; 7) != 0) {\n        ALOGE(\"Misaligned monitor: %p\", mon);\n        dvmAbort();\n    }\n</code></pre>\n<p>The reason is that Dalvik uses thin locking. The lock is a 32-bit value of an object and the bottom 3 bits are used for encoding lock state: one bit for thin/fat lock state and two bits for hash state. Only 29 bits are remaining for the pointer to the <code>Monitor</code> itself.</p>\n<p>From the same <a href=\"http://code.metager.de/source/xref/android/4.2/dalvik/vm/Sync.cpp\" rel=\"nofollow\">source</a>:</p>\n<blockquote>\n<p id=\"so_19022663_19023271_0\">The lock value itself is stored in Object.lock.  The LSB of the\n  lock encodes its state.  When cleared, the lock is in the \"thin\"\n  state and its bits are formatted as follows:</p>\n</blockquote>\n<pre><code>[31 ---- 19] [18 ---- 3] [2 ---- 1] [0]\n lock count   thread id  hash state  0\n</code></pre>\n<blockquote>\n<p id=\"so_19022663_19023271_1\">When set, the lock is in the \"fat\" state and its bits are formatted\n  as follows:</p>\n</blockquote>\n<pre><code> [31 ---- 3] [2 ---- 1] [0]\n   pointer   hash state  1\n</code></pre>\n<p>For reference, here's the paper describing thin locking: <a href=\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.42.1683\" rel=\"nofollow\">Thin Locks: Featherweight Synchronization for Java</a></p>\n<p>In the comments you ask how the alignment is done. The C standard just requires the allocators to return an address that can be used in any type of assignment. From C99 \u00a77.20.3 (Memory management functions):</p>\n<blockquote>\n<p id=\"so_19022663_19023271_2\">The pointer returned if the allocation succeeds is suitably aligned so that it may be assigned to a pointer to any type of object and then used to access such an object or an array of such objects in the space allocated (until the space is explicitly deallocated).</p>\n</blockquote>\n<p>By default, <code>malloc/calloc/realloc</code> on a 32-bit ARM system return 8-byte aligned blocks. I believe the <code>Misaligned monitor</code> check is there just as defensive code to fail fast in case the allocator is replaced with a version that does not return 8-byte aligned blocks.</p>\n", "OwnerUserId": "101361", "LastEditorUserId": "101361", "LastEditDate": "2013-09-27T06:01:09.880", "Id": "19023271", "Score": "3", "CreationDate": "2013-09-26T08:37:42.670", "LastActivityDate": "2013-09-27T06:01:09.880"}, "bq_ids": {"n4140": {"so_19022663_19023271_2": {"section_id": 7177, "quality": 0.52, "length": 13}}, "n3337": {"so_19022663_19023271_2": {"section_id": 6921, "quality": 0.52, "length": 13}}, "n4659": {"so_19022663_19023271_2": {"section_id": 8685, "quality": 0.52, "length": 13}}}});