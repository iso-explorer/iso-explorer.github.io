post_cb({"48356304": {"Id": "48356304", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_48356283_48356304_0\">Is it safe to delete an object of C through a pointer to A?</p>\n</blockquote>\n<p>Yes, it is totally safe as all the destructors in classes <code>B</code>, <code>C</code> and <code>D</code> will be implicitly virtual.</p>\n<p>From:</p>\n<blockquote>\n<p id=\"so_48356283_48356304_1\"><em>15.4 Destructors [class.dtor]</em></p>\n<p id=\"so_48356283_48356304_2\">10 A destructor can be declared virtual (13.3) or pure virtual (13.4);\n  if any objects of that class or any derived class are created in the\n  program, the destructor shall be defined. <strong>If a class has a base class\n  with a virtual destructor, its destructor (whether user- or\n  implicitly-declared) is virtual.</strong></p>\n</blockquote>\n<p>As <code>A</code> has a virtual destructor, then <code>B</code>, and <code>C</code>, <code>D</code> respectively, have virtual destructors and:</p>\n<pre><code>delete aptr;\n</code></pre>\n<p>works correctly.</p>\n", "LastEditorUserId": "5507349", "LastActivityDate": "2018-01-20T13:04:04.823", "Score": "2", "CreationDate": "2018-01-20T12:45:47.370", "ParentId": "48356283", "CommentCount": "0", "OwnerUserId": "5507349", "LastEditDate": "2018-01-20T13:04:04.823"}, "48356509": {"Id": "48356509", "PostTypeId": "2", "Body": "<p>Yes, it's safe. Adding <code>virtual</code> to the destructors of your derived classes is redundant.</p>\n<p>Consider how the mechanism works. When <code>delete</code> is used, the runtime needs to know with which destructor the destruction chain should begin. If the static type of the <code>delete</code> operand has a <code>virtual</code> destructor, then that's already sufficient for the runtime to know that it must take the extra trouble and inspect the dynamic type.</p>\n<p>In your case, it finds that the dynamic type is <code>C</code>, so <code>C::~C</code> is called. <code>C::~C</code> automatically leads to <code>B::~B</code> and that one automatically leads to <code>A::~A</code>.</p>\n<p>A requirement for <code>C</code>'s (or <code>B</code>'s) destructor to be <code>virtual</code> would be pointless. After all, the runtime has to find out the dynamic <code>C</code> type anyway if <code>A::~A</code> is <code>virtual</code>. At that point, it doesn't care whether <code>C::~C</code> is <code>virtual</code> or not. What difference would it make?</p>\n", "LastActivityDate": "2018-01-20T13:06:24.287", "Score": "2", "CreationDate": "2018-01-20T13:06:24.287", "ParentId": "48356283", "CommentCount": "0", "OwnerUserId": "3313064"}, "48356299": {"Id": "48356299", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_48356283_48356299_0\">Is it safe to delete an object of <code>C</code> through a pointer to <code>A</code>?</p>\n</blockquote>\n<p>Yes. Since <code>A</code>'s destructor is <em>virtual</em>, <code>C</code>'s destructor will be called. This is simply due to how <em>dynamic dispatch</em> works.</p>\n", "LastActivityDate": "2018-01-20T12:44:56.817", "Score": "0", "CreationDate": "2018-01-20T12:44:56.817", "ParentId": "48356283", "CommentCount": "0", "OwnerUserId": "8012646"}, "bq_ids": {"n4140": {"so_48356283_48356304_2": {"length": 24, "quality": 0.9230769230769231, "section_id": 405}}, "n3337": {"so_48356283_48356304_2": {"length": 24, "quality": 0.9230769230769231, "section_id": 396}}, "n4659": {"so_48356283_48356304_2": {"length": 24, "quality": 0.9230769230769231, "section_id": 423}}}, "48356283": {"ViewCount": "39", "Body": "<p>I have a base class <code>A</code> with a virtual destructor. <code>A</code> has descendants <code>B</code> and <code>C</code> which use the default destructor. Is it safe to delete an object of <code>C</code> through a pointer to <code>A</code>?</p>\n<p>More specifically, consider this sample code:</p>\n<pre><code>class A {\n public:\n      A(){};\n      virtual ~A() {/* code here */};\n };\n class B: public A {\n      B() {/* code....*/};\n      /* NO DESTRUCTOR SPECIFIED */\n   };\n class C: public B {/*same as above, no destructor */};\n class D: public B {/* same as above, no destructor*/}\n</code></pre>\n<p>The code to be run looks something like this:</p>\n<pre><code>A* getAPointer(void); /* a function returning a C or a D*/\nA* aptr=getAPointer();\n/* aptr is declared as A*, but points to either an object of class C \n  or class D*/\ndelete aptr;\n</code></pre>\n<p>Is the <code>delete aptr</code> safe? Does it do the right thing: if <code>aptr</code> points to an object of class <code>C</code>, the <code>aptr</code> first calls <code>C</code>'s destructor, then <code>B</code>'s destructor, and finally <code>A</code>'s destructor ?</p>\n", "AcceptedAnswerId": "48356304", "Title": "Default destructor in subclasses of base class with a virtual destructor", "CreationDate": "2018-01-20T12:43:28.767", "Id": "48356283", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2018-01-20T13:06:24.287", "Score": "1", "OwnerUserId": "3597589", "Tags": "<c++><virtual-destructor>", "AnswerCount": "3"}});