post_cb({"17772777": {"ParentId": "17772552", "CommentCount": "0", "Body": "<p><code>static_cast</code>: [expr.static.cast]/11</p>\n<blockquote>\n<p id=\"so_17772552_17772777_0\">A prvalue of type \u201cpointer to cv1 B,\u201d where B is a class type, can be converted to a prvalue of type \u201cpointer to cv2 D,\u201d where D is a class derived from B [...]</p>\n</blockquote>\n<p>Therefore, you need to convert from <code>crtp&lt;...&gt;*</code> to the child class <code>child*</code> and then you can even use an implicit cast to <code>base</code>, e.g.</p>\n<pre><code>crtpT::base_type* p = static_cast&lt;crtpT*&gt;(this);\n</code></pre>\n", "OwnerUserId": "420683", "PostTypeId": "2", "Id": "17772777", "Score": "1", "CreationDate": "2013-07-21T13:23:48.183", "LastActivityDate": "2013-07-21T13:23:48.183"}, "17772552": {"CommentCount": "1", "ViewCount": "112", "PostTypeId": "1", "LastEditorUserId": "1810087", "CreationDate": "2013-07-21T12:54:21.370", "LastActivityDate": "2014-01-09T21:50:16.630", "Title": "crtp parent access to sister class", "AcceptedAnswerId": "17772777", "LastEditDate": "2014-01-09T21:50:16.630", "Id": "17772552", "Score": "0", "Body": "<p>i have a class named base. this class is inaccessable(i mean the sourcecode) since it is a 3rd party class. this class has a method that i want to access from a (parent)sister (let's say uncle) class.</p>\n<pre class=\"lang-cpp prettyprint-override\"><code>class base {\npublic:\n  void do_something() {\n    std::cout &lt;&lt; \"base1::do_something\" &lt;&lt; std::endl;\n  }\n};\n</code></pre>\n<p>i have another parent class which is made by using <a href=\"http://en.wikipedia.org/wiki/Curiously_recurring_template_pattern\" rel=\"nofollow\">crtp</a> to access the members of the child class:</p>\n<pre><code>template&lt;typename crtpT&gt;\nclass crtp {\npublic:\n  void foo() {\n    std::cout &lt;&lt; \"crtp::foo\" &lt;&lt; std::endl;\n    static_cast&lt;crtpT*&gt;(this)-&gt;bar();\n\n    //static_cast&lt;crtpT::base_type*&gt;(this)-&gt;do_something();\n    // how do i access base::bar\n  }\n};\n</code></pre>\n<p>and last, a child class which inherits from both:</p>\n<pre><code>template&lt;typename baseT&gt;\nclass child : public baseT, public crtp&lt;child&lt;baseT&gt; &gt; {\npublic:\n  typedef baseT base_type;\n\n  void bar() {\n    std::cout &lt;&lt; \"child::bar\" &lt;&lt; std::endl;\n  }\n};\n</code></pre>\n<p>main.cpp:</p>\n<pre><code>int main(int argc, char* argv[]) {\n  child&lt;base&gt; ch;\n  ch.do_something();\n  ch.foo();\n  ch.bar();\n  return 0;\n}\n</code></pre>\n<p>now my problem is, i need to access <code>do_something</code> from my <strong>crtp</strong>-class. is this even possible?</p>\n<p>a static_cast won't work. i think while generating the crtp class the compiler do not know anything about the base class. crtp class <strong>have to be</strong> a parent of class child, since a lot other classes deriving from it. otherwise i may use a <a href=\"http://www.parashift.com/c++-faq/mi-delegate-to-sister.html\" rel=\"nofollow\">delegation to sister-class</a>.</p>\n<hr>\n<h2>edit:</h2>\n<p>i may could do a second bar method inside my child, but this isn't really nice because i have to write wrapper for all the methods from the <strong>base</strong> class.</p>\n<pre><code>template&lt;typename baseT&gt;\nclass child : public baseT, public crtp&lt;child&lt;baseT&gt; &gt; {\n\npublic:\n  typedef baseT base_type;\n\n  void bar() {\n    std::cout &lt;&lt; \"child::bar\" &lt;&lt; std::endl;\n  }\n\n  void bar2() {\n    base_type::do_something();\n  }\n};\n</code></pre>\n<p>and call:</p>\n<pre><code>static_cast&lt;crtpT*&gt;(this)-&gt;bar2();\n</code></pre>\n</hr>", "Tags": "<c++><inheritance><crtp>", "OwnerUserId": "1810087", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_17772552_17772777_0": {"section_id": 41, "quality": 0.875, "length": 14}}, "n3337": {"so_17772552_17772777_0": {"section_id": 38, "quality": 0.875, "length": 14}}, "n4659": {"so_17772552_17772777_0": {"section_id": 41, "quality": 0.875, "length": 14}}}});