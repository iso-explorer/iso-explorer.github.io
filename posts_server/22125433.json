post_cb({"22126070": {"Id": "22126070", "PostTypeId": "2", "Body": "<ol>\n<li>There is no way to provide a parenthesed initializer in a new-expression of an array type. Don't use legacy C arrays if you can help it. Standard containers provide a superior alternative.</li>\n<li>This is specified by the standard. A new-expression that allocates an array returns a pointer to the first element of the array (5.3.4/1). <code>new int[N][4][5][6]</code> creates an array of N elements, each one of type int[4][5][6]. The pointer to the first element of the array will be returned. It will be of type <code>int(*)[4][5][6]</code>, not <code>int****</code> or somesuch. It is easy to understand if you accept that there are <strong>no</strong> multidimensional arrays in C++, only arrays of arrays. An element of <code>int x[2][3]</code> has type <code>int[3]</code>, not <code>int</code>. Words like <code>pointer to the first element</code> do not automatically generalize to <code>pointer to the first element of the first element</code> etc.</li>\n</ol>\n", "LastEditorUserId": "775806", "LastActivityDate": "2014-03-02T10:06:01.133", "Score": "0", "CreationDate": "2014-03-02T09:47:13.797", "ParentId": "22125433", "CommentCount": "0", "LastEditDate": "2014-03-02T10:06:01.133", "OwnerUserId": "775806"}, "bq_ids": {"n4140": {"so_22125433_22126061_2": {"length": 10, "quality": 1.0, "section_id": 6086}, "so_22125433_22126061_3": {"length": 12, "quality": 0.9230769230769231, "section_id": 6086}}, "n3337": {"so_22125433_22126061_2": {"length": 10, "quality": 1.0, "section_id": 5854}, "so_22125433_22126061_3": {"length": 12, "quality": 0.9230769230769231, "section_id": 5854}}, "n4659": {"so_22125433_22126061_2": {"length": 10, "quality": 1.0, "section_id": 7582}, "so_22125433_22126061_3": {"length": 11, "quality": 0.8461538461538461, "section_id": 7582}}}, "22126061": {"Id": "22126061", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_22125433_22126061_0\">Is there any way to create an array of instances and invoke constructors with some parameters?</p>\n</blockquote>\n<p>There is since C++11:</p>\n<pre><code>CType* t = new CType[10] {10, 10, 10, 10, 10, 10, 10, 10, 10, 10};\n// ...\ndelete[] t;\n</code></pre>\n<p>But in general, you are far better of with vectors in C++:</p>\n<pre><code>std::vector&lt;CType&gt; t(10);\n// ...\n// no need to delete anything manually!\n</code></pre>\n<blockquote>\n<p id=\"so_22125433_22126061_1\">I cannot find any official material defining the behavior of <code>new int[][]</code> or <code>new int[][][]</code> etc.</p>\n</blockquote>\n<p>5.3.4 [expr.new] \u00a75 says:</p>\n<blockquote>\n<p id=\"so_22125433_22126061_2\">When the allocated object is an array [...], the <em>new-expression</em> yields a pointer to the initial element (if any) of the array.</p>\n<p id=\"so_22125433_22126061_3\">Note: both <code>new int</code> and <code>new int[10]</code> have type <code>int*</code> and the type of <code>new int[i][10]</code> is <code>int (*)[10]</code></p>\n</blockquote>\n<hr>\n<blockquote>\n<p id=\"so_22125433_22126061_4\">Why does <code>new int[10][10]</code> have return type <code>int (*)[10]</code> rather than <code>int**</code></p>\n</blockquote>\n<p>It couldn't be <code>int**</code>, because then a simple <code>delete[]</code> wouldn't be enough.</p>\n<blockquote>\n<p id=\"so_22125433_22126061_5\">or <code>int[10][10]</code>?</p>\n</blockquote>\n<p>Because <code>int[10][10]</code> is not a pointer, but <code>new</code> always returns a pointer.</p>\n</hr>", "LastActivityDate": "2014-03-02T09:46:01.180", "Score": "3", "CreationDate": "2014-03-02T09:46:01.180", "ParentId": "22125433", "CommentCount": "0", "OwnerUserId": "252000"}, "22125433": {"ViewCount": "230", "Body": "<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass CType{\nprivate:\n    int val;\npublic:\n    CType(): val(0){}\n    CType(int x): val(x){}\n    void setVal(int x){ val = x; }\n    ~CType(){ cout &lt;&lt; val &lt;&lt; \" is destructed.\" &lt;&lt; endl;} \n};\n\nint main(){\n    // CType *t = new CType[10](10); // -1-\n    CType (*t)[10] = new CType[10][10]; // -2-\n    for(int i = 0; i &lt; 10; ++i){\n        for(int j = 0; j &lt; 10; ++j){\n            t[i][j].setVal(10 * i + j);\n        }\n    }\n    delete[] t;\n    return 0;\n}\n</code></pre>\n<p>The above code is a sample I wrote to test new[][] and whether it is possible to initialize instances in dynamic array. My question is:</p>\n<ol>\n<li><p>I intended to create an array of 10 <code>CType</code> instances with <code>val</code> initialized to 10. But this line cannot pass compilation. I have to add a default constructor with no parameter and <code>CType *t = new CType[10]</code>. Is there any way to create an array of instances and invoke constructors with some parameters?</p></li>\n<li><p>I got puzzled by <code>new int[10][10]</code> which intuitively creates an 10x10 2D array. But I cannot find any official material defining the behavior of <code>new int[][]</code> or <code>new int[][][]</code> etc. Why does <code>new int[10][10]</code> have return type <code>int (*)[10]</code> rather than <code>int**</code> or <code>int[10][10]</code>?</p></li>\n</ol>\n<p>BTW, if I write <code>CType (*t)[10] = new CType[10][10](10)</code>, I'll got a compilation error reading <code>A.cpp:13:39: sorry, unimplemented: cannot initialize multi-dimensional array with initializer</code>. Funny, <strong>g++</strong> says SORRY.</p>\n<hr>\n<p><strong>Update</strong> </p>\n<p>I'm using <strong>g++</strong>. But I also tested the code on <strong>VS2010</strong>. It passed compilation and output the same result as it did in <strong>g++</strong>.</p>\n<p>The variable <code>t</code> in <code>CType (*t)[10]</code> is a pointer which points to an array of 10 <code>CType</code> instances, not an array of 10 <code>CType</code> pointers. So <code>t + 1</code> points to the place <code>sizeof(CType) * 10</code> bytes away after <code>t</code>.</p>\n<p>The output of my code reveals that the destruct order of <code>delete[] t</code> is 99 to 0. The last element of <code>t + 9</code> is destructed first.</p>\n</hr>", "AcceptedAnswerId": "22126061", "Title": "About new[][] and initializing classes in array", "CreationDate": "2014-03-02T08:27:34.057", "Id": "22125433", "CommentCount": "5", "LastEditDate": "2014-03-02T09:12:17.760", "PostTypeId": "1", "LastEditorUserId": "3127828", "LastActivityDate": "2014-03-02T10:06:01.133", "Score": "0", "OwnerUserId": "3127828", "Tags": "<c++><arrays><constructor>", "AnswerCount": "2"}});