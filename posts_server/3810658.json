post_cb({"3810699": {"ParentId": "3810658", "CommentCount": "0", "Body": "<p>When you do the following:</p>\n<pre><code>char a;\nchar* b = &amp;a;\nchar** c = &amp;b;\n</code></pre>\n<p>First of all a now exists on the stack.  It obviously has a memory address (ie its stack position) this is what you assign to b.  b now also exists on the stack and you can then pass its memory address to c.  You cannot however take the address of the address of a value without the intermediate stack as it does not exist without explicitly creating it first.</p>\n", "OwnerUserId": "131140", "PostTypeId": "2", "Id": "3810699", "Score": "0", "CreationDate": "2010-09-28T07:50:26.353", "LastActivityDate": "2010-09-28T07:50:26.353"}, "3810711": {"ParentId": "3810658", "LastEditDate": "2010-09-30T06:55:59.797", "CommentCount": "6", "CreationDate": "2010-09-28T07:52:25.867", "OwnerUserId": "251122", "LastEditorUserId": "251122", "PostTypeId": "2", "Id": "3810711", "Score": "7", "Body": "<p>The many other are right: Your pointer to a pointer has to point to something. However, in C99 you can cheat by using <a href=\"http://gcc.gnu.org/onlinedocs/gcc-4.5.0/gcc/Compound-Literals.html\" rel=\"nofollow\">compound literals</a>:</p>\n<pre><code>int a = 1;\nint **ppa = &amp;(int *){ &amp;a };\n</code></pre>\n<p>Compound literals are just basically unnamed objects and have the same storage rules as normal objects. (But you can't give a function scope compound literal static storage duration with the <code>static</code> keyword). You can even nest them so you can rewrite the previous example to a single line:</p>\n<pre><code>int **ppa =  &amp;(int *) { &amp;(int) { 1 } };\n</code></pre>\n", "LastActivityDate": "2010-09-30T06:55:59.797"}, "3810681": {"ParentId": "3810658", "CommentCount": "1", "Body": "<p>You want a pointer (call it <code>PP</code>) to a pointer (call it <code>P</code>)?</p>\n<p>Then <code>P</code> must actually exist. Which means you must declare it.</p>\n<p>Of course the compiler will fail at <code>&amp;&amp;a</code> - because you can't take the address of an address. You <em>can</em> take the address of a pointer - but you'll have to declare the pointer first.</p>\n<p>Thus:</p>\n<pre><code>int a = 1;\nint *P = &amp;a;\nint **PP = &amp;P;\n</code></pre>\n", "OwnerUserId": "209744", "PostTypeId": "2", "Id": "3810681", "Score": "2", "CreationDate": "2010-09-28T07:48:27.093", "LastActivityDate": "2010-09-28T07:48:27.093"}, "3810706": {"ParentId": "3810658", "CommentCount": "1", "Body": "<p>This might work:</p>\n<p>int** ppa = &amp;(int*){&amp;a};</p>\n", "OwnerUserId": "459154", "PostTypeId": "2", "Id": "3810706", "Score": "-1", "CreationDate": "2010-09-28T07:51:39.940", "LastActivityDate": "2010-09-28T07:51:39.940"}, "3810746": {"ParentId": "3810658", "LastEditDate": "2017-05-23T12:24:30.050", "CommentCount": "0", "CreationDate": "2010-09-28T07:57:18.570", "OwnerUserId": "165520", "LastEditorUserId": "-1", "PostTypeId": "2", "Id": "3810746", "Score": "5", "Body": "<p>C++03 [<code>Section 5.3.1</code>] says</p>\n<blockquote>\n<p id=\"so_3810658_3810746_0\">The result of the unary &amp;operator is a pointer to its operand.  The operand shall be an <strong>lvalue</strong> or a qualified-id.  In the first case, if the type of the expression is \u201cT,\u201d the type of the result is \u201cpointer to T.\u201d</p>\n</blockquote>\n<p>In <code>&amp;&amp;a</code>, <code>&amp;</code> operator cannot be applied to the result of <code>&amp;a</code> because the result is not an <code>lvalue</code>.</p>\n<p>Also read <a href=\"https://stackoverflow.com/questions/2280688/taking-the-address-of-a-temporary-object\">this</a> thread</p>\n", "LastActivityDate": "2010-09-28T08:10:04.833"}, "3811510": {"ParentId": "3810658", "LastEditDate": "2010-09-28T10:29:39.547", "CommentCount": "3", "CreationDate": "2010-09-28T09:45:11.743", "OwnerUserId": "33213", "LastEditorUserId": "33213", "PostTypeId": "2", "Id": "3811510", "Score": "0", "Body": "<p>The problem when you do something like <code>&amp;&amp;a;</code> is that you're asking for \"the address of the address of <code>a</code>\".</p>\n<p>That doesn't make sense. We can get the address of <code>a</code> just fine, but that doesn't give us a variable we can take the address of. It just gives us a pointer value. Until that value is stored somewhere, we can't take its addres.</p>\n<p>If you have code such as <code>2+2</code>, the result doesn't have an address either. It is just the value 4, but it hasn't yet been stored anywhere, so we can't take an address. Once we store it into an <code>int</code> variable, we can take the address of that variable.</p>\n<p>Basically, the problem is the difference between values and variables. A value is just a number (or a character, or some other data). A variable is a place in memory where a value is stored. A variable has an address, but a value doesn't.</p>\n<p>In C++-speak, it is the difference between rvalues and lvalues. An rvalue is essentially a temporary, it's typically a value that was returned from another operation (such as the <code>&amp;</code> operator in your case), but which hasn't yet been stored anywhere.</p>\n<p>Once you store it into a variable, you get a lvalue, and lvalues have an address you can take.</p>\n<p>So yes, you need the two separate statements. First you take the address, and then you store that address somewhere. And then you can take the address of this \"somewhere\".</p>\n", "LastActivityDate": "2010-09-28T10:29:39.547"}, "3810658": {"CommentCount": "6", "CreationDate": "2010-09-28T07:45:07.037", "PostTypeId": "1", "AcceptedAnswerId": "3810686", "LastEditorUserId": "78828", "LastActivityDate": "2010-09-30T06:55:59.797", "LastEditDate": "2010-09-28T07:51:15.823", "ViewCount": "6607", "FavoriteCount": "2", "Title": "Initialize pointer to pointer using multiple address operators in C or C++", "Id": "3810658", "Score": "8", "Body": "<p>It just occurred to me That I don't know how to initialize a pointer to pointer from a non pointer value with one statement in C++:</p>\n<pre><code>int a = 1;\nint** ppa = &amp;&amp;a; //Does not compile\nint** ppa = &amp;(&amp;a); //Does not compile\nint* pa = &amp;a;   //Works but is a\nint** ppa = &amp;pa; //Two step solution\n</code></pre>\n<p>Am I missing something, is the two statement the one and only way to do it?</p>\n", "Tags": "<c++><c>", "OwnerUserId": "78828", "AnswerCount": "9"}, "3810807": {"ParentId": "3810658", "CommentCount": "2", "Body": "<p>An address is a number. It only has an address of its own if it is held in a variable, i.e. a pointer. So</p>\n<pre><code>int *i1 = &amp;a;\n</code></pre>\n<p>makes sense, but</p>\n<pre><code>int **i2 = &amp;&amp;a;\n</code></pre>\n<p>makes no sense. However</p>\n<pre><code>int **i2 = &amp;i1;\n</code></pre>\n<p>does make sense. Make sense?</p>\n", "OwnerUserId": "207421", "PostTypeId": "2", "Id": "3810807", "Score": "1", "CreationDate": "2010-09-28T08:05:48.913", "LastActivityDate": "2010-09-28T08:05:48.913"}, "3810686": {"ParentId": "3810658", "CommentCount": "0", "Body": "<p>if you want a pointer to a pointer, the pointer that you want to point to must be located somewhere in memory, so I think there cannot be a \"one step solution\" because you need a pointer variable that you can point to.</p>\n<p>(Note: This sentence is not meant to be a linguistic trial to use \"point\" as often as possible in one sentence :-))</p>\n", "OwnerUserId": "292233", "PostTypeId": "2", "Id": "3810686", "Score": "12", "CreationDate": "2010-09-28T07:48:40.097", "LastActivityDate": "2010-09-28T07:48:40.097"}, "3810679": {"ParentId": "3810658", "LastEditDate": "2010-09-28T07:53:09.937", "CommentCount": "1", "CreationDate": "2010-09-28T07:48:08.357", "OwnerUserId": "123111", "LastEditorUserId": "123111", "PostTypeId": "2", "Id": "3810679", "Score": "14", "Body": "<p>You can't get pointer to a temporary. <code>&amp;a</code> results in a r-value. It is allowed not to have an actual address.</p>\n", "LastActivityDate": "2010-09-28T07:53:09.937"}, "bq_ids": {"n4140": {"so_3810658_3810746_0": {"section_id": 6066, "quality": 0.7222222222222222, "length": 13}}, "n3337": {"so_3810658_3810746_0": {"section_id": 5834, "quality": 0.7222222222222222, "length": 13}}, "n4659": {"so_3810658_3810746_0": {"section_id": 7562, "quality": 0.7222222222222222, "length": 13}}}});