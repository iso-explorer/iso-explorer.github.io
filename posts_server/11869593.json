post_cb({"11869665": {"ParentId": "11869593", "PostTypeId": "2", "CommentCount": "12", "Body": "<p>gcc 4.7.1 is correct.  According to the standard,</p>\n<blockquote>\n<p id=\"so_11869593_11869665_0\"><a class=\"post-tag\" href=\"/questions/tagged/c%2b%2b11\" rel=\"tag\" title=\"show questions tagged 'c++11'\">c++11</a></p>\n<h3>2.2 Phases of translation [lex.phases]</h3>\n<p id=\"so_11869593_11869665_1\">1 - The precedence among the syntax rules of translation is speci\ufb01ed by the following \n  phases. [...] <br/>\n  3. The source \ufb01le is decomposed into preprocessing tokens (2.5) and sequences of white-space characters\n  (including comments). [...]<br/>\n  4. Preprocessing directives are executed, macro invocations are expanded, [...]</p>\n</blockquote>\n<p>And per <strong>2.5 Preprocessing tokens [lex.pptoken]</strong>, <em>user-de\ufb01ned-string-literal</em> is a preprocessing token production:</p>\n<blockquote>\n<h3>2.14.8 User-de\ufb01ned literals [lex.ext]</h3>\n<p id=\"so_11869593_11869665_2\"><em>user-de\ufb01ned-string-literal</em>:<br/>\n  \u00a0 \u00a0 <em>string-literal ud-suffix</em><br/>\n<em>ud-suffix</em>:<br/>\n  \u00a0 \u00a0 <em>identifier</em></p>\n</blockquote>\n<p>So the phase-4 macro expansion of <code>PRId64</code> is irrelevant, because <code>\"%\"PRId64</code> has already been parsed as a single <em>user-de\ufb01ned-string-literal</em> preprocessing token consisting of <em>string-literal</em> <code>\"%\"</code> and <em>ud-suffix</em> <code>PRId64</code>.</p>\n<p>Oh, this is going to be <em>awesome</em>; everyone will have to change</p>\n<pre><code>printf(\"%\"PRId64\"\\n\", val);\n</code></pre>\n<p>to</p>\n<pre><code>printf(\"%\" PRId64\"\\n\", val);     // note extra space\n</code></pre>\n<hr>\n<p>However!  gcc and clang have agreed to treat user-defined string literals without a leading underscore on the suffix as two separate tokens (per the non well formedness criterion), see <a href=\"http://gcc.gnu.org/bugzilla/show_bug.cgi?id=52538\" rel=\"noreferrer\">http://gcc.gnu.org/bugzilla/show_bug.cgi?id=52538</a> so for future versions of gcc (4.8 branch, I think) existing code will work again. </p>\n</hr>", "OwnerUserId": "567292", "LastEditorUserId": "567292", "LastEditDate": "2012-08-08T22:20:35.163", "Id": "11869665", "Score": "19", "CreationDate": "2012-08-08T17:09:58.000", "LastActivityDate": "2012-08-08T22:20:35.163"}, "11869593": {"CommentCount": "1", "AcceptedAnswerId": "11869665", "PostTypeId": "1", "LastEditorUserId": "500104", "CreationDate": "2012-08-08T17:05:13.307", "LastActivityDate": "2012-08-08T22:20:35.163", "LastEditDate": "2012-08-08T19:24:02.450", "ViewCount": "6515", "FavoriteCount": "4", "Title": "C99 printf formatters vs C++11 user-defined-literals", "Id": "11869593", "Score": "22", "Body": "<p>This code:</p>\n<pre><code>#define __STDC_FORMAT_MACROS\n#include &lt;inttypes.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;stdint.h&gt;\nint main(int argc,char **argv)\n{\n   uint64_t val=1234567890;\n   printf(\"%\"PRId64\"\\n\",val);\n   exit(0);\n}\n</code></pre>\n<p>Works for <a href=\"http://ideone.com/Lo5Jw\">C99</a>, <a href=\"http://ideone.com/qf0QW\">C++03</a>, <a href=\"http://ideone.com/DO8Zq\">C++11 according to GCC 4.5</a>, but fails on <a href=\"http://liveworkspace.org/code/53b31b6e9b51bdc0101cacb07719977b\">C++11 according to GCC 4.7.1</a>. Adding a space before <code>PRId64</code> lets GCC 4.7.1 compile it.</p>\n<p>Which one is correct?</p>\n", "Tags": "<c++><c++11><printf><c99><code-translation>", "OwnerUserId": "256138", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_11869593_11869665_1": {"section_id": 5313, "quality": 0.8518518518518519, "length": 23}}, "n3337": {"so_11869593_11869665_1": {"section_id": 5110, "quality": 0.8518518518518519, "length": 23}}, "n4659": {"so_11869593_11869665_1": {"section_id": 6737, "quality": 0.8518518518518519, "length": 23}}}});