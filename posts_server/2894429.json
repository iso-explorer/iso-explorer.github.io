post_cb({"2894450": {"Id": "2894450", "PostTypeId": "2", "Body": "<p>The keyword static means that the variable is independent of instances. That's why you can access static variables and methods without instantiating an object from the class in the first place. That's why destroying an instance will not affect any static variables.</p>\n", "LastActivityDate": "2010-05-24T02:31:20.107", "CommentCount": "0", "CreationDate": "2010-05-24T02:31:20.107", "ParentId": "2894429", "Score": "22", "OwnerUserId": "69783"}, "2894467": {"Id": "2894467", "PostTypeId": "2", "Body": "<p>Static variables is also known as class variables.  This is as opposed to instance variables.  As these names implies, class variables pertain to the entire class, where as instance variables belong to an instance.  One can derive the life span of these variables based on these facts.  </p>\n<p>Another way to look at this assume calling the destructor actually destroys static variables.  Imagine then the consequence of one object gets instantiated and then gets deleted.  What would happen the the static variables which are shared by all other objects of the class which are still being in used.     </p>\n", "LastActivityDate": "2010-05-24T02:36:09.457", "CommentCount": "0", "CreationDate": "2010-05-24T02:36:09.457", "ParentId": "2894429", "Score": "1", "OwnerUserId": "1244013"}, "2894429": {"ViewCount": "10201", "Body": "<p>Say I have: </p>\n<pre><code>class A\n{\n    A()\n    {}\n    ~A()\n    {}\n};\n\nclass B\n{\npublic:\n    B()\n    {}\n    ~B()\n    {}\nprivate:\n    static A mA;\n};\n\nB* pB = new B; \ndelete pB;\n</code></pre>\n<p>When I call delete pB, B's destructor will be called. Will this then call the destructor for static member A?</p>\n", "AcceptedAnswerId": "2894450", "Title": "Will a destructor destroy a static member?", "CreationDate": "2010-05-24T02:22:29.587", "Id": "2894429", "CommentCount": "1", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2010-05-24T02:25:15.817", "LastEditorUserId": "301023", "LastActivityDate": "2010-05-24T02:54:52.060", "Score": "12", "OwnerUserId": "185986", "Tags": "<c++>", "AnswerCount": "6"}, "bq_ids": {"n4140": {"so_2894429_2894505_0": {"length": 14, "quality": 0.875, "section_id": 5906}, "so_2894429_2894505_2": {"length": 8, "quality": 0.8888888888888888, "section_id": 5911}, "so_2894429_2894505_1": {"length": 15, "quality": 0.7894736842105263, "section_id": 5907}}, "n3337": {"so_2894429_2894505_0": {"length": 14, "quality": 0.875, "section_id": 5678}, "so_2894429_2894505_2": {"length": 8, "quality": 0.8888888888888888, "section_id": 5683}, "so_2894429_2894505_1": {"length": 15, "quality": 0.7894736842105263, "section_id": 5679}}, "n4659": {"so_2894429_2894505_0": {"length": 14, "quality": 0.875, "section_id": 7388}, "so_2894429_2894505_2": {"length": 8, "quality": 0.8888888888888888, "section_id": 7393}, "so_2894429_2894505_1": {"length": 15, "quality": 0.7894736842105263, "section_id": 7389}}}, "2894452": {"Id": "2894452", "PostTypeId": "2", "Body": "<p>Static members do not live in the memory space assigned to an instance of the class. Therefore, it will not be deleted or deinitialized unless you do it explicitly in any part of your code (including the class destructor, but your code logic must handle the possibility of having multiple instances and so on...)</p>\n", "LastActivityDate": "2010-05-24T02:31:58.250", "CommentCount": "0", "CreationDate": "2010-05-24T02:31:58.250", "ParentId": "2894429", "Score": "1", "OwnerUserId": "295096"}, "2894505": {"Id": "2894505", "PostTypeId": "2", "Body": "<p>C++ Standard 03, <strong>9.4.2 Static data members:</strong></p>\n<blockquote>\n<p id=\"so_2894429_2894505_0\">A static data member is not part of\n  the subobjects of a class. There is\n  only one copy of a static data member\n  shared by all the objects of the\n  class.class.</p>\n</blockquote>\n<p>A static data member is not part of the class -- hence it's not tied to the classes lifetime nor at construction or destruction.</p>\n<p><strong>Construction</strong> (9.4.2/3)</p>\n<blockquote>\n<p id=\"so_2894429_2894505_1\">Once the static data member has been\n  defined, it exists even if no objects\n  of its class have been created.of its class have been created.</p>\n</blockquote>\n<p><strong>Destruction</strong> (9.4.2/7)</p>\n<blockquote>\n<p id=\"so_2894429_2894505_2\">Static data members are initialized and destroyed exactly like non-local objects.</p>\n</blockquote>\n", "LastActivityDate": "2010-05-24T02:54:52.060", "CommentCount": "0", "CreationDate": "2010-05-24T02:54:52.060", "ParentId": "2894429", "Score": "7", "OwnerUserId": "233522"}, "2894432": {"Id": "2894432", "PostTypeId": "2", "Body": "<p>Of course not.  First of all, you've defined an explicit empty destructor.  And if the default destructor did that, you could never destruct instances without risking making the class unusable.</p>\n", "LastActivityDate": "2010-05-24T02:23:23.137", "CommentCount": "1", "CreationDate": "2010-05-24T02:23:23.137", "ParentId": "2894429", "Score": "12", "OwnerUserId": "47773"}, "2894446": {"Id": "2894446", "PostTypeId": "2", "Body": "<p>Objects with a static lifetime will be destructed when the application terminates.  Among the various static objects that might be in the program, the destructors are called in the reverse order of how the objects were constructed. </p>\n<p>The construction/destruction of object instances has no effect on when a static member is constructed or destroyed.</p>\n", "LastActivityDate": "2010-05-24T02:30:43.663", "CommentCount": "0", "CreationDate": "2010-05-24T02:30:43.663", "ParentId": "2894429", "Score": "1", "OwnerUserId": "12711"}});