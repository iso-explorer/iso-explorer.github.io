post_cb({"bq_ids": {"n4140": {"so_21936668_21936668_1": {"length": 5, "quality": 1.0, "section_id": 3321}, "so_21936668_21936668_3": {"length": 24, "quality": 0.8275862068965517, "section_id": 3321}, "so_21936668_21936668_4": {"length": 34, "quality": 0.8947368421052632, "section_id": 3321}, "so_21936668_21936668_0": {"length": 8, "quality": 1.0, "section_id": 3321}, "so_21936668_21936668_2": {"length": 6, "quality": 1.0, "section_id": 3321}}, "n3337": {"so_21936668_21936668_1": {"length": 5, "quality": 1.0, "section_id": 3191}, "so_21936668_21936668_3": {"length": 24, "quality": 0.8275862068965517, "section_id": 3191}, "so_21936668_21936668_4": {"length": 34, "quality": 0.8947368421052632, "section_id": 3191}, "so_21936668_21936668_0": {"length": 8, "quality": 1.0, "section_id": 3191}, "so_21936668_21936668_2": {"length": 6, "quality": 1.0, "section_id": 3191}}, "n4659": {"so_21936668_21936668_1": {"length": 5, "quality": 1.0, "section_id": 4087}, "so_21936668_21936668_3": {"length": 27, "quality": 0.9310344827586207, "section_id": 4087}, "so_21936668_21936668_4": {"length": 34, "quality": 0.8947368421052632, "section_id": 4087}, "so_21936668_21936668_0": {"length": 8, "quality": 1.0, "section_id": 4087}, "so_21936668_21936668_2": {"length": 6, "quality": 1.0, "section_id": 4087}}}, "21936668": {"ViewCount": "202", "Body": "<p>The following code executes normally (see <a href=\"http://coliru.stacked-crooked.com/a/2ffd09f586786d63\" rel=\"nofollow\">here</a>):</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct A {\n    int i;\n    A():i(1){}\n    operator int&amp;() { return i; }\n};\n\nint&amp; rri = A();\n\nint main()\n{\n    int&amp; ri = A();\n    std::cout &lt;&lt; ri &lt;&lt; '\\n';\n    std::cout &lt;&lt; rri &lt;&lt; '\\n';\n}\n</code></pre>\n<p>It prints</p>\n<pre><code>1\n1\n</code></pre>\n<p>as expected. However if I comment out the first two statements in main(), leaving just</p>\n<pre><code>std::cout &lt;&lt; rri &lt;&lt; '\\n';\n</code></pre>\n<p>the code prints <code>0</code>.</p>\n<p><strong>Edit:</strong></p>\n<p>Let's assume the problem is with my code. But then I ask: what is the purpose of the third  bullet point in 8.5.3/5 in the Standard, which I copied below:</p>\n<blockquote>\n<p id=\"so_21936668_21936668_0\">A reference to type \u201ccv1 T1\u201d is initialized by an expression of type\n  \u201ccv2 T2\u201d as follows:</p>\n<ul>\n<li><p id=\"so_21936668_21936668_1\">If the reference is an lvalue reference and the initializer expression</p>\n<ul>\n<li><p id=\"so_21936668_21936668_2\">is an lvalue (but is not a bit-field), and \u201ccv1 T1\u201d is reference-compatible with \u201ccv2 T2,\u201d or</p></li>\n<li><p id=\"so_21936668_21936668_3\">has a class type (i.e., T2 is a class type), where T1 is not reference-related to T2, and can be converted to an lvalue of type\n  \u201ccv3 T3,\u201d where \u201ccv1 T1\u201d is reference-compatible with \u201ccv3 T3\u201d (this conversion is selected by enumerating the applicable conversion functions (13.3.1.6) and choosing the best one through\n  overload resolution (13.3)),</p></li>\n</ul>\n<p id=\"so_21936668_21936668_4\">then the reference is bound to the\n  initializer expression lvalue in the first case and to the lvalue\n  result of the conversion in the second case (or, in either case, to\n  the appropriate base class subobject of the object). [ Note: The usual\n  lvalue-to-rvalue (4.1), array-to-pointer (4.2), and\n  function-to-pointer (4.3) standard conversions are not needed, and\n  therefore are suppressed, when such direct bindings to lvalues are\n  done. \u2014end note ]</p></li>\n</ul>\n</blockquote>\n", "AcceptedAnswerId": "21936756", "Title": "This seems to be a bug in the clang++ compiler", "CreationDate": "2014-02-21T14:06:40.250", "Id": "21936668", "CommentCount": "5", "LastEditDate": "2014-02-21T14:42:39.387", "PostTypeId": "1", "LastEditorUserId": "2548699", "LastActivityDate": "2014-03-18T06:22:26.457", "Score": "2", "OwnerUserId": "2548699", "Tags": "<c++><c++11><reference><clang++>", "AnswerCount": "1"}, "21936756": {"Id": "21936756", "PostTypeId": "2", "Body": "<p>Undefined behaviour: <code>ri</code> and <code>rri</code> are both initialised to refer to a member of a temporary, which is immediately destroyed.</p>\n<p>The dangling reference points to some bit of memory which might be reused by another object, in which case you might see data from that object. Or you might see some other kind of undefined behaviour.</p>\n", "LastEditorUserId": "854742", "LastActivityDate": "2014-03-18T06:22:26.457", "Score": "11", "CreationDate": "2014-02-21T14:10:06.283", "ParentId": "21936668", "CommentCount": "21", "LastEditDate": "2014-03-18T06:22:26.457", "OwnerUserId": "204847"}});