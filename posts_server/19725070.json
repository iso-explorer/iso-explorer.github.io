post_cb({"bq_ids": {"n4140": {"so_19725070_19727956_0": {"length": 16, "quality": 0.9411764705882353, "section_id": 6536}}, "n3337": {"so_19725070_19727956_0": {"length": 16, "quality": 0.9411764705882353, "section_id": 6291}}, "n4659": {"so_19725070_19727956_0": {"length": 16, "quality": 0.9411764705882353, "section_id": 8018}}}, "19727956": {"Id": "19727956", "PostTypeId": "2", "Body": "<p>It looks like that libstdc++ is right and libc++ is wrong, according to the 22.4.2.1.2 of the (2011) standard.</p>\n<p>At stage 2, </p>\n<blockquote>\n<p id=\"so_19725070_19727956_0\">If it [the character - n.m.] is not discarded, then a check is made to determine if c is allowed as the next character of an input field of the conversion specifier returned by Stage 1 [\"%g\" in this case - n.m.] . If so, it is accumulated.</p>\n</blockquote>\n<p>Since <code>%g</code> conversion specifier does not admit <code>d</code> or <code>X</code> characters, the character is not accumulated. It is not discarded either (only group separator characters can be discarded). Therefore Stage 2 must end at this point.</p>\n<p>Then at stage 3 accumulated characters are converted.</p>\n<p>It looks like libc++ erroneously accumulates <code>d</code> and <code>X</code> at stage 2, then attempts to convert them, and this fails.</p>\n", "LastActivityDate": "2013-11-01T13:42:18.077", "Score": "2", "CreationDate": "2013-11-01T13:42:18.077", "ParentId": "19725070", "CommentCount": "9", "OwnerUserId": "775806"}, "19725070": {"ViewCount": "406", "Body": "<p>With my recent upgrade to Mac OS X 10.9 the default standard C++ library changed from libstdc++ to libc++. Since then I observe unexpected behaviour of the stringstream operator&gt;&gt;(double) documented in the code example below. </p>\n<p>In summary the libc++ seems to have problems with extracting double values from stringstreams when the double value is followed by a letter.</p>\n<p>I already checked the standard (2003) but I can't find any specific information if extraction should work in this case or not.</p>\n<p>So I would be grateful for any input whether this is a bug in libc++ or libstdc++.</p>\n<pre><code>#include &lt;sstream&gt;\n#include &lt;iostream&gt;\n\nusing namespace std;\n\nvoid extract_double(const string &amp; s)\n{\n  stringstream ss;\n  double d;\n\n  ss &lt;&lt; s;\n  ss &gt;&gt; d;\n  if(!ss.fail())\n    cout &lt;&lt; \"'\" &lt;&lt; ss.str() &lt;&lt; \"' converted to \" &lt;&lt; d &lt;&lt; endl;\n  else\n    cout &lt;&lt; \"'\" &lt;&lt; ss.str() &lt;&lt; \"' failed to convert to double\" &lt;&lt; endl;\n}\n\nint main()\n{\n  extract_double(\"-4.9\");\n  extract_double(\"-4.9 X\");\n  extract_double(\"-4.9_\");\n  extract_double(\"-4.9d\");\n  extract_double(\"-4.9X\");\n}\n</code></pre>\n<p>Compiling the code with <code>c++ --stdlib=libc++ streamtest.cxx</code> gives</p>\n<pre><code>'-4.9' converted to -4.9\n'-4.9 X' converted to -4.9\n'-4.9_' converted to -4.9\n'-4.9d' failed to convert to double\n'-4.9X' failed to convert to double\n</code></pre>\n<p>Compiling the code with <code>c++ --stdlib=libstdc++ streamtest.cxx</code> gives </p>\n<pre><code>'-4.9' converted to -4.9\n'-4.9 X' converted to -4.9\n'-4.9_' converted to -4.9\n'-4.9d' converted to -4.9\n'-4.9X' converted to -4.9\n</code></pre>\n<p>Compiler version is </p>\n<pre><code>$ c++ --version\nApple LLVM version 5.0 (clang-500.2.79) (based on LLVM 3.3svn)\nTarget: x86_64-apple-darwin13.0.0\nThread model: posix\n</code></pre>\n", "Title": "Discrepancy between istream's operator>> (double& val) between libc++ and libstdc++", "CreationDate": "2013-11-01T10:36:45.457", "LastActivityDate": "2013-11-01T13:42:18.077", "CommentCount": "1", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2013-11-01T11:56:33.653", "LastEditorUserId": "2893910", "Id": "19725070", "Score": "8", "OwnerUserId": "2893910", "Tags": "<c++><stringstream><istream><libstdc++><libc++>", "AnswerCount": "1"}});