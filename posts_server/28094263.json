post_cb({"28094380": {"ParentId": "28094263", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>So C++11 has an exception for <em>integer</em> types and <em>unscoped enums</em> for <a href=\"https://stackoverflow.com/a/26974911/1708801\">constant expressions that fit after promtion</a> in the target type, the draft C++11 standard section <code>8.5.4</code> <em>[dcl.init.list]</em> says:</p>\n<blockquote>\n<p id=\"so_28094263_28094380_0\">from an integer type or unscoped enumeration type to an integer type\n  that cannot represent all the values of the original type, except\n  where the source is a constant expression whose value after integral\n  promotions will fit into the target type.</p>\n</blockquote>\n<p>The problem here is that some of the values do not fit into <code>char</code> if you use <code>unsigned char</code> instead it should work.</p>\n<p><code>clang</code> is a little more helpful in that it warns which specific elements generate the warning and in this case it does not warn for <code>0x42</code> but does for the rest, for example:</p>\n<pre><code>error: constant expression evaluates to 222 which cannot be narrowed to type 'char' [-Wc++11-narrowing]\nchar expected[] = {0x42, 0xde, 0xad, 0xbe, 0xef};\n                         ^~~~\n</code></pre>\n", "OwnerUserId": "1708801", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T10:32:49.463", "Id": "28094380", "Score": "4", "CreationDate": "2015-01-22T16:54:34.070", "LastActivityDate": "2015-03-20T14:56:38.973"}, "28094263": {"CommentCount": "2", "AcceptedAnswerId": "28094380", "PostTypeId": "1", "LastEditorUserId": "1708801", "CreationDate": "2015-01-22T16:49:05.420", "LastActivityDate": "2015-03-20T14:56:38.973", "LastEditDate": "2015-01-22T19:51:35.773", "ViewCount": "1788", "FavoriteCount": "1", "Title": "Create array of chars avoiding narrowing", "Id": "28094263", "Score": "3", "Body": "<p>I am writing a unit test checking some binary data against an expected array. The expected array in question is just some series of bytes, doesn't matter specifically:</p>\n<pre><code>char expected[] = {0x42, 0xde, 0xad, 0xbe, 0xef};\n</code></pre>\n<p>This compiled fine in C++, but with C++11 this issues a warning on narrowing conversion. I compile with <code>-Werror</code> because warnings matter, so that line does not compile for me. As far as I'm aware, there's no literal suffix for char, so it seems I'd have to do:</p>\n<pre><code>char expected[] = {static_cast&lt;char&gt;(0x42), static_cast&lt;char&gt;(0xde), ... };\n</code></pre>\n<p>That seems pretty unwieldy to me. Is there a better way to construct this character array? (Outside of either removing <code>-Werror</code> or adding <code>-Wno-narrowing</code>).</p>\n", "Tags": "<c++><arrays><c++11><narrowing>", "OwnerUserId": "2069064", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_28094263_28094380_0": {"section_id": 3329, "quality": 1.0, "length": 28}}, "n3337": {"so_28094263_28094380_0": {"section_id": 3199, "quality": 0.8928571428571429, "length": 25}}, "n4659": {"so_28094263_28094380_0": {"section_id": 4095, "quality": 1.0, "length": 28}}}});