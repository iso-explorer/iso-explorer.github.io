post_cb({"bq_ids": {"n4140": {"so_10033567_10033625_1": {"length": 4, "quality": 0.6666666666666666, "section_id": 745}}, "n3337": {"so_10033567_10033625_1": {"length": 4, "quality": 0.6666666666666666, "section_id": 734}}, "n4659": {"so_10033567_10033625_1": {"length": 4, "quality": 0.6666666666666666, "section_id": 802}}}, "10033567": {"ViewCount": "667", "Body": "<p>Is it allowed to erase an element pointed by iterator, and advance the same iterator in one line to go to next element?</p>\n<pre><code>set&lt;int&gt;::iterator it = S.begin();\nwhile (it != S.end()) {\n    if (shouldBeRemoved(*it)) {\n        S.erase(it++); // is this line valid?\n    } else {\n        ++it;\n    }\n}\n</code></pre>\n", "AcceptedAnswerId": "10033625", "Title": "C++ set iterator removal", "CreationDate": "2012-04-05T18:00:05.687", "Id": "10033567", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2012-04-05T18:42:53.277", "Score": "9", "OwnerUserId": "391022", "Tags": "<c++><stl><set>", "AnswerCount": "2"}, "10033629": {"Id": "10033629", "PostTypeId": "2", "Body": "<p>Yes, it's valid. The expression <code>it++</code> is fully evaluated before the function is called, so the function receives the previous value of <code>it</code>, but by the time that gets removed (and invalidated), the iterator has already been incremented.</p>\n", "LastActivityDate": "2012-04-05T18:04:00.237", "CommentCount": "0", "CreationDate": "2012-04-05T18:04:00.237", "ParentId": "10033567", "Score": "2", "OwnerUserId": "179910"}, "10033625": {"Id": "10033625", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_10033567_10033625_0\"><strong>Is it allowed to erase an element pointed by iterator, and advance the same iterator in one line to go to next element?</strong></p>\n</blockquote>\n<p>Yes, it is valid.    </p>\n<hr>\n<p><strong>Rationale:</strong> </p>\n<p><code>it++</code> increments <code>it</code> so that it refers to the next element but yields a copy of its\noriginal value. Thus, <code>it</code> doesn't refer to the element that is removed when <code>erase()</code> is called.\nAnd in case of <code>std::set</code> only iterators to the erased element are invalidated.<sup>#1</sup> </p>\n<p>You can consider this code example as a boilerplate code to remove an element to which your iterator is referring.</p>\n<hr>\n<p><strong>References:</strong> </p>\n<p>For <code>std::set</code>,<br>\n<sup>#1</sup><strong>C++03 Standard 23.1.2/8:</strong></br></p>\n<blockquote>\n<p id=\"so_10033567_10033625_1\">Only iterators and references to the erased elements are invalidated </p>\n</blockquote>\n</hr></hr>", "LastEditorUserId": "452307", "LastActivityDate": "2012-04-05T18:42:53.277", "Score": "5", "CreationDate": "2012-04-05T18:03:45.097", "ParentId": "10033567", "CommentCount": "0", "OwnerUserId": "452307", "LastEditDate": "2012-04-05T18:42:53.277"}});