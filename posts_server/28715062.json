post_cb({"bq_ids": {"n4140": {"so_28715062_28715062_0": {"length": 27, "quality": 0.9, "section_id": 233}}, "n3337": {"so_28715062_28715062_0": {"length": 27, "quality": 0.9, "section_id": 226}}, "n4659": {"so_28715062_28715062_0": {"length": 27, "quality": 0.9, "section_id": 242}}}, "28715062": {"ViewCount": "114", "Body": "<p>Let's consider simple example about template implicit instatiation:</p>\n<pre><code>#include &lt;iostream&gt;\ntemplate&lt;int N&gt;\nclass A\n{\n    static const int a = A&lt;N-1&gt;::a; //1, OK, doesn't require implicit intantiation\n};\n\ntemplate&lt;int N&gt;\nclass B\n{\n    static const int a = B&lt;1&gt;::a; //2, Error, implicit instantiation of template 'B&lt;1&gt;' within its own definition\n};\n\n\nint main(){ }\n</code></pre>\n<p><strong><a href=\"http://coliru.stacked-crooked.com/a/b867cfe840a27eb9\" rel=\"nofollow\">DEMO</a></strong></p>\n<p>The standard wasn't clear about that fact. What it says is only that <code>N3797::14.7.1/1 [temp.inst]</code>: </p>\n<blockquote>\n<p id=\"so_28715062_28715062_0\">Unless a class template specialization has been explicitly\n  instantiated (14.7.2) or explicitly specialized (14.7.3), the class\n  template specialization is implicitly instantiated when the\n  specialization is referenced in a context that requires a\n  completely-defined object type or when the completeness of the class\n  type affects the semantics of the program.</p>\n</blockquote>\n<p>Neither 1 nor 2 don't require the class type to be completely defined, however the second one causes the error about implicit instantiation. I'd like to understand why.</p>\n", "Title": "Implicit instatiation of the template within its own definition", "CreationDate": "2015-02-25T09:12:06.067", "LastActivityDate": "2015-02-25T09:12:06.067", "CommentCount": "4", "PostTypeId": "1", "OwnerDisplayName": "user2953119", "Id": "28715062", "Score": "0", "Tags": "<c++><templates>", "AnswerCount": "0"}});