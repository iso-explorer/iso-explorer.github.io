post_cb({"18106277": {"Id": "18106277", "PostTypeId": "2", "Body": "<pre><code>Yes, you can define the constructor inside the class no matter that whether you are\nusing .h file or .cpp file. Actually the main difference between both the file is,\nheader file never compile it only use for checking syntax during compilation of .cpp \nfile.\n\nMethod that you define inside the class by default inline function. If you define one\nconstructor inside the class it's fine but, if you required to define more than one\nconstructor then 2 problem occur \n\nProblem 1:    \nAs we know that, when you call inline function it will paste code in called \nfunction that increase the code size and required more memory.\n\nProblem 2:\nReduce the readability of code.\n</code></pre>\n", "LastActivityDate": "2013-08-07T14:36:21.757", "CommentCount": "0", "CreationDate": "2013-08-07T14:36:21.757", "ParentId": "18104495", "Score": "0", "OwnerUserId": "1668923"}, "18104822": {"Id": "18104822", "PostTypeId": "2", "Body": "<blockquote id=\"so_18104495_18104822_0\"><b>You can not declare a constructor or anything part of the class, outside it, but you can define</b><br/></blockquote>\n<p>It's a common c++ programming practise of using <strong>2 files for 1 class</strong><br>\nFor example, <br/></br></p>\n<h2>ClassG.h</h2>\n<pre><code>class ClassG\n{\npublic:\nClassG();\n~ClassG();\nvoid anyfunc(int anyarg);\nprivate:\nint anydata;\n};\n</code></pre>\n<h2>ClassG.cpp</h2>\n<pre><code>#include\"ClassG.h\"\nClassG::ClassG()\n{\n//something\n}\nClassG::~ClassG()\n{\n//something\n}\nvoid ClassG::anyfunc(int anyarg)\n{\n//something\n}\n</code></pre>\n<h1>General Syntax</h1>\n<p>While declaring, inside .h file type <code>returntype methodname(args_if_any);</code><br/>\nWhile defining in a .cpp file type <code>returntype ClassName::methodname(args_if_any){}</code></p>\n", "LastActivityDate": "2013-08-07T13:33:41.173", "CommentCount": "0", "CreationDate": "2013-08-07T13:33:41.173", "ParentId": "18104495", "Score": "1", "OwnerUserId": "1882121"}, "bq_ids": {"n4140": {"so_18104495_18105186_1": {"length": 25, "quality": 0.9615384615384616, "section_id": 5881}}, "n3337": {"so_18104495_18105186_1": {"length": 25, "quality": 0.9615384615384616, "section_id": 5652}}, "n4659": {"so_18104495_18105186_1": {"length": 25, "quality": 0.9615384615384616, "section_id": 7364}}}, "18104495": {"ViewCount": "6234", "Body": "<p>Consider this <a href=\"https://stackoverflow.com/questions/3188164/c-cli-static-constructor-outside-class-declaration\">link</a>. See this code:</p>\n<pre><code> class MyClass\n    {\n    public:\n        MyClass();\n        ~MyClass();\n\n    private:\n        int _a;\n    };\n\n    MyClass::MyClass()\n    {\n    }\n\n    MyClass::~MyClass()\n    {\n    }\n</code></pre>\n<p>We can declare constructor out of the class.<br>\nWhy can I declare constructor out of the class and why we should do this?</br></p>\n", "AcceptedAnswerId": "18104588", "Title": "Why can I declare constructor out of the class", "CreationDate": "2013-08-07T13:19:30.197", "Id": "18104495", "CommentCount": "4", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2017-05-23T12:17:37.970", "LastEditorUserId": "-1", "LastActivityDate": "2013-08-07T14:36:21.757", "Score": "-2", "OwnerUserId": "1968030", "Tags": "<c++>", "AnswerCount": "6"}, "18104588": {"Id": "18104588", "PostTypeId": "2", "Body": "<p>You cannot <strong>declare</strong> constructor out of the class. You are talking about constructor <strong>definition</strong>.</p>\n<pre><code>class MyClass\n{\npublic:\n    MyClass(); // declaration\n\n};\n\nMyClass::MyClass() // definition\n{\n}\n</code></pre>\n<p>You should read <a href=\"http://www.cprogramming.com/declare_vs_define.html\">this</a>.</p>\n<p>The main reason why you should <em>define your constructor</em> outside the class is for readability. It is clearer to declare your class in the Header file and define it in the source file. You can apply this rule any members of your class.</p>\n<hr>\n<p>A little quote from the standard :</p>\n<blockquote>\n<p id=\"so_18104495_18104588_0\"><strong>12.1 Constructors</strong></p>\n</blockquote>\n<pre><code>struct S {\n    S();   // declares the constructor\n};\n\nS::S() { } // defines the constructor\n</code></pre>\n</hr>", "LastEditorUserId": "1394283", "LastActivityDate": "2013-08-07T13:35:40.657", "Score": "11", "CreationDate": "2013-08-07T13:23:17.620", "ParentId": "18104495", "CommentCount": "0", "OwnerUserId": "1394283", "LastEditDate": "2013-08-07T13:35:40.657"}, "18104519": {"Id": "18104519", "PostTypeId": "2", "Body": "<p>You cannot. This is the constructor <em>declaration</em>, which has to be in the class definition:</p>\n<pre><code>// MyClass definition, possibly in .h file\nclass MyClass\n{\n public:\n  MyClass(); // default constructor declaration\n  ...\n};\n</code></pre>\n<p>and this is the constructor's <em>definition</em></p>\n<pre><code> // MyClass default constructor definition, possibly in .cpp file\nMyClass::MyClass() { }\n</code></pre>\n<p>What you are referring to is the constructor's <em>definition</em>. You can define it outside of the class definition to allow you to de-couple one from the other. Usually this means you put the class definition in a header file, to be included by client code, and the constructor definition (as well as other class member function definitions) in an implementation file that gets compiled. This way, users of your code have no compile time dependency on said definitions.</p>\n", "LastEditorUserId": "661519", "LastActivityDate": "2013-08-07T13:26:19.607", "Score": "7", "CreationDate": "2013-08-07T13:20:38.910", "ParentId": "18104495", "CommentCount": "0", "OwnerUserId": "661519", "LastEditDate": "2013-08-07T13:26:19.607"}, "18105186": {"Id": "18105186", "PostTypeId": "2", "Body": "<p>First of all, you have your terminology confused, you need to read <a href=\"https://stackoverflow.com/questions/1410563/what-is-the-difference-between-a-definition-and-a-declaration\"><code>What is the difference between a definition and a declaration?</code></a>. You can not <code>declare</code> a constructor outside of a class but you can <code>define</code> it outside of a class.</p>\n<p>So on to the questions as you meant them:</p>\n<blockquote>\n<p id=\"so_18104495_18105186_0\">Why can I define a constructor out of the class</p>\n</blockquote>\n<p>Basically the standard has this to say about <code>member function</code>s in section <code>9.3.2</code>:</p>\n<blockquote>\n<p id=\"so_18104495_18105186_1\">A member function may be defined (8.4) in its class definition, in which case it is an inline member function (7.1.2), or it may be defined outside of its class definition if it has already been declared but not defined in its class definition.</p>\n</blockquote>\n<p>So the standard says this is ok, next question:</p>\n<blockquote>\n<p id=\"so_18104495_18105186_2\">why we should do this?</p>\n</blockquote>\n<p>It makes your code cleaner and easier to digest, you can separate your declarations into header files and your implementation into source files. This previous thread <a href=\"https://stackoverflow.com/questions/333889/why-have-header-files-and-cpp-files-in-c\">Why have header files and .cpp files in C++?</a> goes into this topic in more detail.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2013-08-07T13:48:12.233", "Score": "0", "CreationDate": "2013-08-07T13:48:12.233", "ParentId": "18104495", "CommentCount": "0", "OwnerUserId": "1708801", "LastEditDate": "2017-05-23T12:02:27.067"}, "18104589": {"Id": "18104589", "PostTypeId": "2", "Body": "<p>The main reason for <em>defining</em> the constructor (or any member function) outside of the class <em>declaration</em> is so that you can have a header file and an implementation file.  This makes your code clearer to read and allows you to distrbute the interface to your class (the header file) without providing the implementation details.</p>\n", "LastActivityDate": "2013-08-07T13:23:25.227", "CommentCount": "0", "CreationDate": "2013-08-07T13:23:25.227", "ParentId": "18104495", "Score": "7", "OwnerUserId": "2634887"}});