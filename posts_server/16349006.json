post_cb({"bq_ids": {"n4140": {"so_16349006_16351405_0": {"length": 20, "quality": 0.8333333333333334, "section_id": 3518}, "so_16349006_16351481_0": {"length": 18, "quality": 1.0, "section_id": 3328}}, "n3337": {"so_16349006_16351405_0": {"length": 20, "quality": 0.8333333333333334, "section_id": 3383}}, "n4659": {"so_16349006_16351405_0": {"length": 20, "quality": 0.8333333333333334, "section_id": 4281}}}, "16351405": {"Id": "16351405", "PostTypeId": "2", "Body": "<p>I don't know any better way to create a <code>std::initializer_list</code> from a container like <code>std::array</code> other than the one shown in the OP.</p>\n<p>However, for the original problem, namely, passing the parameters to the distribution, I can suggest something simpler.</p>\n<pre><code>    typedef std::discrete_distribution&lt;&gt;::param_type param_type;\n    distribution.param(param_type(distArray.begin(), distArray.end()));\n</code></pre>\n<p>The standard says that distributions must provide a type member <code>param_type</code> (which is the type of argument taken by <code>param()</code>) but doesn't specify it. However,  [rand.req.dist] says that</p>\n<blockquote>\n<p id=\"so_16349006_16351405_0\">For each of the constructors of D [the distribution type] taking arguments corresponding to parameters of the distribution, P [param_type] shall have a corresponding constructor subject to the same requirements and taking arguments identical\n  in number, type, and default values.</p>\n</blockquote>\n<p>Well, it turns out that <code>std::discrete_distribution&lt;&gt;</code> has a constructor taking iterators pointing to the range of parameters. Therefore, whatever <code>std::discrete_distribution&lt;&gt;::param_type</code> is, it must have a similar constructor. Therefore, I'm suggesting creating a <code>param_type</code> from <code>distArray.begin()</code> and <code>distArray.end()</code> and pass it to <code>distribution.param()</code>.</p>\n<p>A side note: You no longer need <code>std::initializer_list&lt;double&gt; distInit;</code> in your class. It seems to me that you  don't need <code>std::array&lt;double, 7&gt; distArray</code> as a class member  either (it could be a local variable in <code>Die</code>'s constructor).</p>\n", "LastEditorUserId": "1137388", "LastActivityDate": "2013-05-03T08:12:31.767", "Score": "0", "CreationDate": "2013-05-03T04:04:07.240", "ParentId": "16349006", "CommentCount": "3", "OwnerUserId": "1137388", "LastEditDate": "2013-05-03T08:12:31.767"}, "16355745": {"Id": "16355745", "PostTypeId": "2", "Body": "<p>If you have variable data, you should be using the <a href=\"http://en.cppreference.com/w/cpp/numeric/random/discrete_distribution/discrete_distribution\" rel=\"nofollow\"><code>discrete_distribution</code> constructor taking a pair of iterators</a>:</p>\n<pre><code>template&lt; class InputIt &gt;\ndiscrete_distribution( InputIt first, InputIt last );\n</code></pre>\n<p>You shouldn't be trying to construct the <code>param_type</code> directly; instead use a helper function to construct your distribution:</p>\n<pre><code>class Die {\n    private:\n        std::mt19937 generator;\n        std::discrete_distribution&lt;&gt; distribution;\n        static std::discrete_distribution&lt;&gt; makeDistribution(\n            int loadSide, double loadAmount )\n        {\n            std::array&lt;double, 7&gt; distArray;\n            distArray.fill( 1 );\n            distArray[0] = 0;\n            distArray[loadSide] = loadAmount;\n            return {std::begin(distArray), std::end(distArray)};\n        }\n    public:\n        Die( int loadSide, double loadAmount ) :\n            generator{ },\n            distribution{ makeDistribution( loadSide, loadAmount ) }\n        {}\n        int roll( ) {\n                return distribution( generator );\n        }\n};\n</code></pre>\n", "LastActivityDate": "2013-05-03T09:32:05.070", "CommentCount": "1", "CreationDate": "2013-05-03T09:32:05.070", "ParentId": "16349006", "Score": "2", "OwnerUserId": "567292"}, "16351481": {"Id": "16351481", "PostTypeId": "2", "Body": "<p><code>std::initializer_list</code> only intended for use as a temporary object (function argument) or local variable. It's not a container and it doesn't own anything; it's an accessor to an anonymous, temporary array.</p>\n<p>The Standard includes an example similar to your code, \u00a78.5.4/6, which mentions</p>\n<blockquote>\n<p id=\"so_16349006_16351481_0\">the initializer_list object is initialized in a constructor\u2019s ctor-initializer, so the array persists only until the constructor exits, and so any use of the elements of i4 after the constructor exits produces undefined behavior.</p>\n</blockquote>\n<p>In your case, it's the body of the constructor, not a ctor-initializer preceding the body, but the story is the same. It's just dumb luck that your program is working for now.</p>\n<p>To store the distribution in the object, use <code>std::array</code> or <code>std::vector</code>. <code>array</code> is more efficient but it doesn't support <code>arr = { \u2026 }</code> syntax. (There are a few simple alternatives.) <code>vector</code> does support your syntax using braces and the <code>=</code> operator; this support uses an implicit <code>std::initializer_list</code>.</p>\n", "LastEditorUserId": "153285", "LastActivityDate": "2013-05-03T04:19:06.537", "Score": "0", "CreationDate": "2013-05-03T04:14:01.517", "ParentId": "16349006", "CommentCount": "6", "OwnerUserId": "153285", "LastEditDate": "2013-05-03T04:19:06.537"}, "16349006": {"ViewCount": "1664", "Body": "<p>I'm trying to create a <code>std::discrete_distribution</code> object using data passed into a class constructor.  I know how to create this using static data, but cannot figure out how using variable data (cleanly).  What I have now \"works\", but is painful.  Is there a more appropriate way of doing this?</p>\n<p>The <code>distInit = { distArray[0], ... };</code> line is the problem.</p>\n<pre class=\"lang-c prettyprint-override\"><code>#include &lt;iostream&gt;\n#include &lt;iomanip&gt;\n#include &lt;initializer_list&gt;\n#include &lt;map&gt;\n#include &lt;random&gt;\n\nclass Die {\n    private:\n        int loadSide;\n        double loadAmount;\n        std::mt19937 generator;\n        std::discrete_distribution&lt;&gt; distribution;\n        std::initializer_list&lt;double&gt; distInit;\n        std::array&lt;double, 7&gt; distArray;\n    public:\n        Die( int loadSide, double loadAmount ) : loadSide(loadSide), loadAmount(loadAmount) {\n            distArray.fill( 1 );\n            distArray[0] = 0;\n            distArray[this-&gt;loadSide] = this-&gt;loadAmount;\n\n            distInit = { distArray[0], distArray[1], distArray[2], distArray[3], distArray[4], distArray[5], distArray[6] };\n            distribution.param( distInit );\n        };\n        int roll( ) {\n                return distribution( generator );\n        };\n};\n\nconst int ROUNDS = 10000;\n\nint main() {\n    Die* die = new Die( 5, 20 );\n\n    std::map&lt;int, int&gt; m;\n    for(int n=0; n &lt; ROUNDS; n++) {\n        m[die-&gt;roll()]++;\n    }\n    for(auto p : m) {\n        std::cout &lt;&lt; p.first &lt;&lt; \" generated \" &lt;&lt; std::setiosflags(std::ios::fixed) &lt;&lt; std::setprecision(2) &lt;&lt; (float) p.second / ROUNDS &lt;&lt; \" times\\n\";\n    }\n}\n</code></pre>\n<p>I may not be asking the right question, which I will apologize in advance for if so.  This is a strong possibility as I'm surprised I'm unable to find any (apparently) related hits on this subject.</p>\n<p>My compiler is <code>g++-mp-4.8 (MacPorts gcc48 4.8-20130411_0) 4.8.1 20130411 (prerelease)</code></p>\n<p>Command line <code>/opt/local/bin/g++-mp-4.8 -std=c++11 test.cpp -o test</code></p>\n", "AcceptedAnswerId": "16355745", "Title": "How to create a std::initializer_list from variable data", "CreationDate": "2013-05-02T22:49:02.507", "Id": "16349006", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2013-05-03T14:57:30.570", "LastEditorUserId": "168106", "LastActivityDate": "2013-05-03T14:57:30.570", "Score": "1", "OwnerUserId": "168106", "Tags": "<c++><c++11><initializer-list>", "AnswerCount": "3"}});