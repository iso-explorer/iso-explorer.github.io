post_cb({"bq_ids": {"n4140": {"so_37720832_37917195_3": {"length": 11, "quality": 0.55, "section_id": 6288}, "so_37720832_37917195_0": {"length": 16, "quality": 0.8, "section_id": 6288}, "so_37720832_37917195_2": {"length": 16, "quality": 0.8, "section_id": 6288}}, "n3337": {"so_37720832_37917195_3": {"length": 11, "quality": 0.55, "section_id": 6048}, "so_37720832_37917195_0": {"length": 13, "quality": 0.65, "section_id": 6048}, "so_37720832_37917195_2": {"length": 13, "quality": 0.65, "section_id": 6048}}, "n4659": {"so_37720832_37917195_3": {"length": 11, "quality": 0.55, "section_id": 7795}, "so_37720832_37917195_0": {"length": 16, "quality": 0.8, "section_id": 7795}, "so_37720832_37917195_2": {"length": 16, "quality": 0.8, "section_id": 7795}}}, "37720832": {"ViewCount": "271", "Body": "<p>It seems the <a href=\"http://en.cppreference.com/w/cpp/experimental/basic_string_view/hash\" rel=\"nofollow\">std::hash functions</a> for the C++17 string_view are not constexpr's.</p>\n<p>It seems to me that a string view bound to a const char[] could be hashed at compile time (which would be very sweet), or is there anything which prevents this?</p>\n", "AcceptedAnswerId": "37917195", "Title": "std::string_view compile time hashing", "CreationDate": "2016-06-09T08:37:07.313", "Id": "37720832", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2016-06-09T16:29:29.843", "LastEditorUserId": "636019", "LastActivityDate": "2017-09-13T14:54:17.053", "Score": "4", "OwnerUserId": "100724", "Tags": "<c++><hash><std><c++1z><string-view>", "AnswerCount": "1"}, "37917195": {"Id": "37917195", "PostTypeId": "2", "Body": "<p>Since C++14 (see 17.6.3.4 Hash requirements, table 26), we have:</p>\n<blockquote>\n<p id=\"so_37720832_37917195_0\">The value returned shall depend only on the argument k for the duration\n  of the program. [Note: Thus all evaluations of the expression h(k) with\n  the same value for k yield the same result <b>for a given execution of the \n  program</b>. -- end note]</p>\n</blockquote>\n<p>Two <a href=\"http://en.cppreference.com/w/cpp/utility/hash\" rel=\"nofollow noreferrer\">different executions can give different hashes</a>:</p>\n<blockquote>\n<p id=\"so_37720832_37917195_1\">Hash functions are only required to produce the same result for the\n  same input <b>within a single execution</b> of a program;\n  this allows salted hashes that <b>prevent collision DoS attacks</b>.</p>\n</blockquote>\n<p><a href=\"http://lemire.me/blog/2014/04/23/do-you-realize-that-you-are-using-random-hashing/\" rel=\"nofollow noreferrer\">This behaviour is useful</a> to mitigate <a href=\"http://www.ocert.org/advisories/ocert-2011-003.html\" rel=\"nofollow noreferrer\">hash collision-based DoS attacks</a>.</p>\n", "LastEditorUserId": "637866", "LastActivityDate": "2017-09-13T14:54:17.053", "Score": "7", "CreationDate": "2016-06-20T07:53:59.513", "ParentId": "37720832", "CommentCount": "0", "LastEditDate": "2017-09-13T14:54:17.053", "OwnerUserId": "637866"}});