post_cb({"19922161": {"ParentId": "19921954", "PostTypeId": "2", "CommentCount": "6", "Body": "<p>I would say that it is guaranteed because of this quote.<br>\n5.1.2</br></p>\n<blockquote>\n<p id=\"so_19921954_19922161_0\">21 When the lambda-expression is evaluated, the entities that are captured by copy <strong>are used to direct-initialize each corresponding non-static data member of the resulting closure object</strong>. (For array members, the array elements are direct-initialized in increasing subscript order.) These initializations are performed in the (unspecified) order in which the non-static data members are declared. [Note: This ensures that the destructions will occur in the reverse order of the constructions. \u2014 end note ]</p>\n</blockquote>\n<p>EDIT: On second thought since the object is direct-initialized copy elision doesn't even come into play.<br>\n<strike>Because of the criteria for copy elision in <code>\u00a7 12.8</code>, too long to post, I don't believe that the copy can be elided</strike> </br></p>\n<p>Something to keep in mind though, <code>std::shared_ptr</code> is not thread safe for most purposes.</p>\n", "OwnerUserId": "2167655", "LastEditorUserId": "2167655", "LastEditDate": "2013-11-12T06:42:02.840", "Id": "19922161", "Score": "3", "CreationDate": "2013-11-12T06:11:02.657", "LastActivityDate": "2013-11-12T06:42:02.840"}, "19921954": {"CommentCount": "5", "AcceptedAnswerId": "19922161", "PostTypeId": "1", "LastEditorUserId": "46642", "CreationDate": "2013-11-12T05:55:31.567", "LastActivityDate": "2013-11-12T10:37:15.113", "LastEditDate": "2013-11-12T10:37:15.113", "ViewCount": "233", "FavoriteCount": "1", "Title": "If I capture by value and don't use it will I still get a copy?", "Id": "19921954", "Score": "9", "Body": "<p>I wan't to capture a shared_ptr by value in a lambda to ensure the lifetime of the object extends to the point the lambda function is called.</p>\n<p>I don't actually need the shared_ptr otherwise. If I do:</p>\n<pre><code>shared_ptr&lt;..&gt; sp;\nsp-&gt;async_call( [sp](){} );\n</code></pre>\n<p>Is sp guaranteed to get copied even though the body doesn't reference it?</p>\n", "Tags": "<c++><c++11><lambda>", "OwnerUserId": "2058109", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_19921954_19922161_0": {"section_id": 5981, "quality": 0.8636363636363636, "length": 38}}, "n3337": {"so_19921954_19922161_0": {"section_id": 5749, "quality": 0.8636363636363636, "length": 38}}, "n4659": {"so_19921954_19922161_0": {"section_id": 7478, "quality": 0.8636363636363636, "length": 38}}}});