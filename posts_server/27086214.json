post_cb({"bq_ids": {"n4140": {"so_27086214_27086214_0": {"length": 24, "quality": 0.96, "section_id": 451}}, "n3337": {"so_27086214_27086214_0": {"length": 24, "quality": 0.96, "section_id": 442}}, "n4659": {"so_27086214_27086214_0": {"length": 24, "quality": 0.96, "section_id": 474}}}, "27086297": {"Id": "27086297", "PostTypeId": "2", "Body": "<p>This is known as a <em>converting constructor</em> (\u00a712.3.1). <code>b</code> is copy-initialized into <code>a</code> and <code>A::A(const B&amp;)</code> is selected to perform the conversion. The result of the conversion is used to direct-initialize <code>a</code>.</p>\n", "OwnerDisplayName": "user3920237", "LastActivityDate": "2014-11-23T06:37:37.777", "Score": "1", "CreationDate": "2014-11-23T06:37:37.777", "ParentId": "27086214", "CommentCount": "0"}, "27086214": {"ViewCount": "45", "Body": "<p>There is the following definition of the copy constructor:</p>\n<blockquote>\n<p id=\"so_27086214_27086214_0\">A non-template constructor for class <code>X</code> is a copy constructor if its\n  first parameter is of type <code>X&amp;</code>, <code>const X&amp;</code>, <code>volatile X&amp;</code> or <code>const volatile X&amp;,</code> \n  and either there are no other parameters or else all\n  other parameters have default arguments (8.3.6).</p>\n</blockquote>\n<p>Note, that the definiton isn't concerned with the <code>convertions</code>, but the following program works fine:</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct B{ };\n\nstruct A : B\n{\n    A(){ }\n    A(const B&amp;){ }\n};\n\nB b;\nA a = b;\n\n\nint main(){ }\n</code></pre>\n<p><strong><a href=\"http://coliru.stacked-crooked.com/a/3ec2320640a1dcc0\" rel=\"nofollow\">DEMO</a></strong></p>\n<p>and it produces the output</p>\n<pre><code>B()\nB()\nA(const B&amp;)\n</code></pre>\n<p>It's not clear to me, I expected the program doesn't print <code>A(const B&amp;)</code>, because by the definition <code>A(const B&amp;)</code> is not a copy constructor, therefore one is implictly defined as <code>A::A(const A&amp;)</code> with default initializtion which doesn't produce any side-effect. </p>\n<p>Couldn't you clarify what's wrong with that reason?</p>\n", "AcceptedAnswerId": "27086297", "Title": "Copy constructor with a parameter as a reference to a derived class", "CreationDate": "2014-11-23T06:19:20.283", "Id": "27086214", "CommentCount": "5", "PostTypeId": "1", "OwnerDisplayName": "user2953119", "LastActivityDate": "2014-11-23T06:37:37.777", "Score": "1", "Tags": "<c++><constructor>", "AnswerCount": "2"}, "27086283": {"Id": "27086283", "PostTypeId": "2", "Body": "<pre><code>A a = b;\n</code></pre>\n<p>This would call the conversion constructor of class A. </p>\n<pre><code>A(const B&amp;){ }   &lt;&lt; This is conversion constructor for class A which defines conversion from B to A\n</code></pre>\n<p>Its same like we declare </p>\n<pre><code>A(int i) {}  &lt;&lt; Convert int to class A object.\n</code></pre>\n<p>Even if you remove the relationship between class A and B then also it lead to that constructor call.</p>\n", "LastActivityDate": "2014-11-23T06:35:18.647", "CommentCount": "0", "CreationDate": "2014-11-23T06:35:18.647", "ParentId": "27086214", "Score": "1", "OwnerUserId": "4047092"}});