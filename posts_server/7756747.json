post_cb({"7756747": {"ViewCount": "330", "Body": "<p>Is there a defined behavior for container.erase(first,last) when first == last in the STL, or is it undefined?</p>\n<p>Example:</p>\n<pre><code>std::vector&lt;int&gt; v(1,1);\nv.erase(v.begin(),v.begin());\nstd::cout &lt;&lt; v.size(); // 1 or 0?\n</code></pre>\n<p>If there is a Standard Library specification document that has this information I would appreciate a reference to it.</p>\n", "AcceptedAnswerId": "7756766", "Title": "container.erase(first,last) where first == last in STL containers", "CreationDate": "2011-10-13T15:41:19.427", "Id": "7756747", "CommentCount": "8", "PostTypeId": "1", "LastActivityDate": "2011-10-13T16:03:37.793", "Score": "2", "OwnerUserId": "99379", "Tags": "<c++><stl>", "AnswerCount": "4"}, "7756913": {"Id": "7756913", "PostTypeId": "2", "Body": "<p>It is perfectly defined. It removes all elements from <code>first</code> to <code>last</code>, including <code>first</code> and excluding <code>last</code>. If there are no elements in this range (when <code>first == last</code>), then how much are removed? You guessed it, none.</p>\n<p>Though I'm not sure what happens if <code>first</code> comes after <code>last</code>, I suppose this will invoke undefined behaviour.</p>\n", "LastEditorUserId": "743214", "LastActivityDate": "2011-10-13T16:03:37.793", "Score": "0", "CreationDate": "2011-10-13T15:54:56.843", "ParentId": "7756747", "CommentCount": "0", "OwnerUserId": "743214", "LastEditDate": "2011-10-13T16:03:37.793"}, "bq_ids": {"n4140": {"so_7756747_7756766_0": {"length": 14, "quality": 0.9333333333333333, "section_id": 5560}, "so_7756747_7756766_1": {"length": 41, "quality": 0.9111111111111111, "section_id": 5561}}, "n3337": {"so_7756747_7756766_1": {"length": 41, "quality": 0.9111111111111111, "section_id": 5343}, "so_7756747_7756766_0": {"length": 14, "quality": 0.9333333333333333, "section_id": 5342}}, "n4659": {"so_7756747_7756766_1": {"length": 41, "quality": 0.9111111111111111, "section_id": 7008}, "so_7756747_7756766_0": {"length": 14, "quality": 0.9333333333333333, "section_id": 7007}}}, "7756933": {"Id": "7756933", "PostTypeId": "2", "Body": "<p><em>Conceptually</em>, there is an ordinary loop from <code>begin</code> to <code>end</code>, with a simple loop condition that checks if the iterator is <code>end</code> already, like this:</p>\n<pre><code>void erase (iterator from, iterator to) {\n    ...\n    while (from != to) erase (from++);\n    ...\n}\n</code></pre>\n<p>(however, implementations may vary). As you see, if <code>from==to</code>, then there is no single iteration of the loop body.</p>\n", "LastActivityDate": "2011-10-13T15:56:22.030", "CommentCount": "0", "CreationDate": "2011-10-13T15:56:22.030", "ParentId": "7756747", "Score": "1", "OwnerUserId": "76722"}, "7756766": {"Id": "7756766", "PostTypeId": "2", "Body": "<p>The behavior is well defined.  </p>\n<p>It is a No-op(No-Operation). It does not perform any erase operation on the container as end is same as begin.</p>\n<p>The relevant Quote from the Standard are as follows:</p>\n<p><strong>C++03 Standard:  24.1 Iterator requirements</strong> and<br>\n<strong>C++11 Standard:  24.2.1 Iterator requirements</strong></br></p>\n<p><strong>Para 6 &amp; 7</strong> for both:</p>\n<blockquote>\n<p id=\"so_7756747_7756766_0\">An iterator j is called reachable from an iterator i if and only if there is a finite sequence of applications of the expression ++i that makes i == j. If j is reachable from i, they refer to the same container.</p>\n<p id=\"so_7756747_7756766_1\">Most of the library\u2019s algorithmic templates that operate on data structures have interfaces that use ranges.A range is a pair of iterators that designate the beginning and end of the computation.  A range [i, i) is an empty range; in general, a range [i, j) refers to the elements in the data structure starting with the one pointed to by i and up to but not including the one pointed to by j. Range [i, j) is valid if and only if j is reachable from i.  The result of the application of functions in the library to invalid ranges is undefined.</p>\n</blockquote>\n", "LastEditorUserId": "452307", "LastActivityDate": "2011-10-13T16:01:36.613", "Score": "5", "CreationDate": "2011-10-13T15:42:56.393", "ParentId": "7756747", "CommentCount": "4", "OwnerUserId": "452307", "LastEditDate": "2011-10-13T16:01:36.613"}, "7756760": {"Id": "7756760", "PostTypeId": "2", "Body": "<p>That would erase nothing at all, just like other algorithms that operate on <code>[, )</code> ranges.</p>\n<p>Even if the container is empty I think that would still work because <code>begin() == end()</code>.</p>\n", "LastActivityDate": "2011-10-13T15:42:22.773", "CommentCount": "1", "CreationDate": "2011-10-13T15:42:22.773", "ParentId": "7756747", "Score": "3", "OwnerUserId": "251738"}});