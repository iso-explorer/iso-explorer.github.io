post_cb({"26742541": {"Id": "26742541", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_26742432_26742541_0\">So, the question: is there any way I can use pointer arithmetic to\n  dynamically return the right variable, or I need the switch?</p>\n</blockquote>\n<p>Actually your pointer arithmetic would induce undefined behavior right on the spot because adding something &gt;1 to a pointer that is not pointing to an array object causes undefined behavior, [expr.add]:</p>\n<blockquote>\n<ol start=\"4\">\n<li><p id=\"so_26742432_26742541_1\">For the purposes of these operators, a pointer to a nonarray object\n  behaves the same as a pointer to the first element of an array of\n  length one with the type of the object as its element type.</p></li>\n<li><p id=\"so_26742432_26742541_2\">When an expression that has integral type is added to or subtracted\n  from a pointer, the result has the type of the pointer operand. [\u2026]<br> If\n  both the pointer operand and the result point to elements of the same\n  array object, or one past the last element of the array object, the\n  evaluation shall not produce an overflow; otherwise, the behavior is\n  undefined.</br></p></li>\n</ol>\n</blockquote>\n<p>You could use an array instead and access the variables via indices.\nNote though that your <code>switch</code> statement should generate a jump table and not use any branching and might even be optimized to produce the same code your pointer arithmetic would do.</p>\n<p>Nonetheless, if you want to supply array semantics to the outside you should perhaps hold an array internally.</p>\n", "LastEditorUserId": "3647361", "LastActivityDate": "2014-11-04T18:45:06.170", "Score": "2", "CreationDate": "2014-11-04T18:38:09.680", "ParentId": "26742432", "CommentCount": "0", "OwnerUserId": "3647361", "LastEditDate": "2014-11-04T18:45:06.170"}, "bq_ids": {"n4140": {"so_26742432_26742541_2": {"length": 32, "quality": 1.0, "section_id": 6142}, "so_26742432_26742541_1": {"length": 18, "quality": 0.9473684210526315, "section_id": 6141}}, "n3337": {"so_26742432_26742541_2": {"length": 32, "quality": 1.0, "section_id": 5906}, "so_26742432_26742541_1": {"length": 18, "quality": 0.9473684210526315, "section_id": 5905}}, "n4659": {"so_26742432_26742541_2": {"length": 20, "quality": 0.625, "section_id": 7638}, "so_26742432_26742541_1": {"length": 11, "quality": 0.5789473684210527, "section_id": 7603}}}, "26742553": {"Id": "26742553", "PostTypeId": "2", "Body": "<p>Unless <code>x, y, z</code> are held in the same container, I would strongly avoid doing anything like in your second example. Even From a maintenance perspective, if someone comes along and decides to rearrange your members or add in a new member (say, between <code>x</code> and <code>y</code>), then your magic memory access is completely messed up. Also, what if the function is called with <code>3</code> as a parameter? Now you're guaranteed to be pointing to memory that you didn't intend it to.</p>\n<p>For the sake of clarity, memory safety, and sustainability, go with the switch statement. Furthermore, you don't need a <code>break</code> after a <code>return</code>...that's a no-op. Finally, you need a default behavior if the user specifies a negative number or a number greater than 2. Either throw an exception or indicate an error case in some other manner. </p>\n", "LastActivityDate": "2014-11-04T18:38:34.557", "CommentCount": "1", "CreationDate": "2014-11-04T18:38:34.557", "ParentId": "26742432", "Score": "1", "OwnerUserId": "2665510"}, "26742472": {"Id": "26742472", "PostTypeId": "2", "Body": "<p>The pointer arithmetic approach causes undefined behavior. The compiler may add padding between those three variables, for example, which would make the pointer arithmetic approach malfunction.  It may work for some type <code>T</code> and it might fail for another.</p>\n<p>You either need to use the switch approach, or change your members from <code>T x, y, z;</code> to <code>T coords[3];</code>, which will then allow you to use the index approach with defined and correct behavior.</p>\n<p>Regarding the topic of your question, yes, it is generally safe to convert a pointer reference to a reference. You will return a reference to the pointed-to object. The only reason it's not a good approach in this case is because the pointer arithmetic itself results in undefined behavior.</p>\n", "LastActivityDate": "2014-11-04T18:34:10.520", "CommentCount": "11", "CreationDate": "2014-11-04T18:34:10.520", "ParentId": "26742432", "Score": "3", "OwnerUserId": "501250"}, "26742432": {"ViewCount": "92", "Body": "<p>I'm coding a templated class, and I have something like this:</p>\n<pre><code>template&lt;class T&gt; class ... {\n    T x, y, z;\n\n    T&amp; operator[](int index) {\n        switch (index) {\n            case 0:\n                return this-&gt;x;\n                break;\n            case 1:\n                return this-&gt;y;\n                break;\n            case 2:\n                return this-&gt;z;\n                break;\n        }\n    }\n}\n</code></pre>\n<p>I've considered changing it with this:</p>\n<pre><code>T&amp; operator[](int index) { return *(&amp;this-&gt;x + index); }\n</code></pre>\n<p>However, what I'm returning in my original code is the actual variable (aka reference), and it does what's it intended to (<code>myObj[1] = 123; /*changes the actual object*/</code>), while in the second example, I'm returning the value of that pointer.</p>\n<p>I could change to <code>return (&amp;this-&gt;x + index)</code> to return a pointer, but both cases compile (Visual Studio 2013), and I don't know which to choose, because I've never done anything like this.</p>\n<p>So, the question: is there any way I can use pointer arithmetic to dynamically return the right variable, or I need the switch?</p>\n", "AcceptedAnswerId": "26742472", "Title": "Can I return a pointer in a reference return type?", "CreationDate": "2014-11-04T18:32:05.967", "Id": "26742432", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2014-11-04T18:45:06.170", "Score": "2", "OwnerUserId": "3215056", "Tags": "<c++><templates><pointers>", "AnswerCount": "3"}});