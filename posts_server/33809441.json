post_cb({"bq_ids": {"n4140": {"so_33809441_33809698_1": {"length": 11, "quality": 1.0, "section_id": 3286}, "so_33809441_33809441_0": {"length": 7, "quality": 0.875, "section_id": 369}}, "n3337": {"so_33809441_33809698_1": {"length": 11, "quality": 1.0, "section_id": 3156}, "so_33809441_33809441_0": {"length": 7, "quality": 0.875, "section_id": 359}}, "n4659": {"so_33809441_33809698_1": {"length": 7, "quality": 0.6363636363636364, "section_id": 382}, "so_33809441_33809441_0": {"length": 6, "quality": 0.75, "section_id": 382}}}, "33809698": {"Id": "33809698", "PostTypeId": "2", "Body": "<p>According to the draft standard <em>8.5/p7.3 Initializers [dcl.init]</em>:</p>\n<blockquote>\n<p id=\"so_33809441_33809698_0\">(7.3) \u2014 Otherwise, no initialization is performed</p>\n<p id=\"so_33809441_33809698_1\">If a program calls for the default initialization of an object of a\n  const-qualified type T, T shall be a class type with a user-provided\n  default constructor.</p>\n</blockquote>\n<p>So you're right, a <code>const</code>-qualified object must have a user-provided constructor to be initialized.</p>\n<p>This is due to fact that <code>const</code>-qualified objects are initialized once and if no default constructor is provided then the object would contain uninitialized values.</p>\n<p>However, in your example <code>class Test</code> has no member variables. Strictly speaking, according to the standard is ill formed, but there's no harm since <code>Test</code> has no member variables.</p>\n<p>For this reason the commity filed a Defect Report <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_active.html#253\" rel=\"nofollow\">DR 253</a>. That says:</p>\n<blockquote>\n<p id=\"so_33809441_33809698_2\">If the implicit default constructor initializes all subobjects, no\n  initializer should be required.</p>\n</blockquote>\n<p>GCC follows that DR that's why it compiles the code, my guess is that for the same reason VC++ compiles the code as well. </p>\n<p>However if you try to compile the following code:</p>\n<pre><code>class Test{ \n  int i;\n};\n\nint main() { \n  const Test t;\n}\n</code></pre>\n<p>GCC will issue an error. VC++ 2015 will emit a diagnostic:</p>\n<blockquote>\n<p id=\"so_33809441_33809698_3\">warning C4269: 't': 'const' automatic data initialized with compiler\n  generated default constructor produces unreliable results</p>\n</blockquote>\n", "LastEditorUserId": "2352671", "LastActivityDate": "2015-11-19T17:29:46.700", "Score": "2", "CreationDate": "2015-11-19T16:46:22.560", "ParentId": "33809441", "CommentCount": "2", "OwnerUserId": "2352671", "LastEditDate": "2015-11-19T17:29:46.700"}, "33809441": {"ViewCount": "465", "Body": "<p>Before you start to mark this as an duplicate I've already read <a href=\"https://stackoverflow.com/questions/21900237/do-i-really-need-to-implement-user-provided-constructor-for-const-objects/21900356#21900356\">this</a> but my question is about MSVS compiler. The linked question talks about g++ compiler.</p>\n<p>I tried this program on MSVS 2015 compiler that is last updated on 3 Nov, 2015 <a href=\"http://webcompiler.cloudapp.net/\" rel=\"nofollow noreferrer\">here</a></p>\n<pre><code>class Test\n{ };\nint main()\n{ const Test t; }\n</code></pre>\n<p>according to <a href=\"http://en.cppreference.com/w/cpp/language/default_initialization\" rel=\"nofollow noreferrer\"><strong>default initialization</strong></a> the above program should fail in compilation. It says that:</p>\n<blockquote>\n<p id=\"so_33809441_33809441_0\">If T is a const-qualified type, it must be a class type with a\n  user-provided default constructor.</p>\n</blockquote>\n<p>So, diagnosis is required in case of above program. But MSVS isn't giving any proper diagnosis. MSVS seems non-confirming here according to C++ standard. Is this bug in MSVS also like as in g++?</p>\n", "AcceptedAnswerId": "33809698", "Title": "default initialization of const qualified type with no user provided constructor", "CreationDate": "2015-11-19T16:33:18.473", "Id": "33809441", "CommentCount": "3", "LastEditDate": "2017-05-23T12:15:13.607", "PostTypeId": "1", "LastEditorUserId": "-1", "LastActivityDate": "2015-11-19T17:29:46.700", "Score": "1", "OwnerUserId": "3777958", "Tags": "<c++><object><constructor><initialization><const>", "AnswerCount": "1"}});