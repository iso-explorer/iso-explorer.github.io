post_cb({"43012480": {"ParentId": "43012458", "CommentCount": "0", "Body": "<p>The type of <code>a</code> is <code>A</code>, not <code>int</code>. The syntax <code>enum class A : int</code> makes <code>int</code> the <em>underlying type</em> of <code>A</code>, which is a special relationship, but not an \"is-a\" relationship.</p>\n<p>(<code>static_cast</code> will perform this conversion.)</p>\n", "OwnerUserId": "153285", "PostTypeId": "2", "Id": "43012480", "Score": "5", "CreationDate": "2017-03-25T04:20:18.607", "LastActivityDate": "2017-03-25T04:20:18.607"}, "43012458": {"CommentCount": "1", "AcceptedAnswerId": "43012480", "ClosedDate": "2017-03-25T04:35:26.737", "CreationDate": "2017-03-25T04:17:25.487", "LastActivityDate": "2017-03-25T04:30:29.653", "PostTypeId": "1", "ViewCount": "58", "Title": "Why does `reinterpret_cast` not behave as the C++ standard says?", "Id": "43012458", "Score": "-1", "Body": "<p>At the entry of <code>reinterpret_cast</code>, <a href=\"http://en.cppreference.com/w/cpp/language/reinterpret_cast\" rel=\"nofollow noreferrer\">cppref</a> says:</p>\n<blockquote>\n<p id=\"so_43012458_43012458_0\">An expression of integral, enumeration, pointer, or pointer-to-member\n  type can be converted to its own type.The resulting value is the same as the value of expression. (since C++11)</p>\n</blockquote>\n<p>However, the following code cannot be compiled (clang 5.0 with <code>-std=c++1z</code>):</p>\n<pre><code>enum class A : int {};\n\nint main()\n{\n    A a{ 0 };\n    reinterpret_cast&lt;int&gt;(a); // error : reinterpret_cast from 'A' to 'int' is not allowed\n}\n</code></pre>\n<p>Why does <code>reinterpret_cast</code> not behave as the C++ standard says?</p>\n", "Tags": "<c++><c++11><casting><type-conversion><standards>", "OwnerUserId": "508343", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_43012458_43012458_0": {"section_id": 6041, "quality": 0.6111111111111112, "length": 11}, "so_43012458_43012547_0": {"section_id": 5464, "quality": 0.9523809523809523, "length": 20}}, "n3337": {"so_43012458_43012458_0": {"section_id": 5809, "quality": 0.6111111111111112, "length": 11}, "so_43012458_43012547_0": {"section_id": 5251, "quality": 0.9523809523809523, "length": 20}}, "n4659": {"so_43012458_43012458_0": {"section_id": 7540, "quality": 0.6111111111111112, "length": 11}, "so_43012458_43012547_0": {"section_id": 6898, "quality": 0.8571428571428571, "length": 18}}}, "43012547": {"ParentId": "43012458", "CommentCount": "0", "Body": "<p><code>int</code> is the \"underlying type\", but the enumeration itself is a separate type. </p>\n<p>From [dcl.enum]/5:</p>\n<blockquote>\n<p id=\"so_43012458_43012547_0\"><strong>Each enumeration defines a type that is different from all other types.</strong> Each enumeration also has an underlying type. The underlying type can be explicitly specified using an enum-base.</p>\n</blockquote>\n", "OwnerUserId": "179910", "PostTypeId": "2", "Id": "43012547", "Score": "3", "CreationDate": "2017-03-25T04:30:29.653", "LastActivityDate": "2017-03-25T04:30:29.653"}});