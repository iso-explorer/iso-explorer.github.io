post_cb({"34951161": {"CommentCount": "2", "ViewCount": "370", "PostTypeId": "1", "LastEditorUserId": "423031", "CreationDate": "2016-01-22T16:15:07.360", "LastActivityDate": "2016-01-22T17:01:39.420", "Title": "C++: conversions of lvalue references and rvalue references", "FavoriteCount": "0", "LastEditDate": "2016-01-22T17:01:39.420", "Id": "34951161", "Score": "9", "Body": "<p>I wonder which parts of the standard specify that in the following code segment:</p>\n<pre><code>#include &lt;memory&gt;\n\nclass A { };\n\nclass B : public A { };\n\nint main()\n{\n    std::unique_ptr&lt;B&gt; bptr = std::make_unique&lt;B&gt;(); // (a)\n    std::unique_ptr&lt;A&gt; aptr = std::move(bptr);       // (b)\n    std::unique_ptr&lt;A&gt; &amp;aptr_r = bptr;               // (c)\n    std::unique_ptr&lt;A&gt; &amp;&amp;aptr_rr = std::move(bptr);  // (d)\n    return 0;\n}\n</code></pre>\n<p>(d) compiles and (c) does not. Please include the relevant parts of the standard in your answer or refer to them appropriately. Just for reference, <strong>Ubuntu clang version 3.6.2-1 (tags/RELEASE_362/final) (based on LLVM 3.6.2)</strong> gives me</p>\n<pre><code>error: non-const lvalue reference to type 'unique_ptr&lt;A&gt;' cannot\n       bind to a value of unrelated type 'unique_ptr&lt;B&gt;'\n       std::unique_ptr&lt;A&gt; &amp;aptr_r = bptr;\n                           ^        ~~~~\n</code></pre>\n<p>and <strong>gcc (Ubuntu 5.2.1-22ubuntu2) 5.2.1 20151010</strong> gives me</p>\n<pre><code>error: invalid initialization of reference of type \u2018std::unique_ptr&lt;A&gt;&amp;\u2019\n       from expression of type \u2018std::unique_ptr&lt;B&gt;\u2019\n       std::unique_ptr&lt;A&gt; &amp;aptr_r = bptr;\n                                    ^\n</code></pre>\n<p>Edit:</p>\n<p>To make my question more clear, let me add</p>\n<pre><code>class C { };\n\nstd::unique_ptr&lt;C&gt; cptr = std::make_unique&lt;C&gt;(); // (e)\nstd::unique_ptr&lt;A&gt; &amp;&amp;aptr_rr2 = std::move(cptr); // (f)\n</code></pre>\n<p>What is keeping (f) from compiling when (d) does? Obviously <code>A</code> and <code>C</code> are unrelated, but where is that detected when the <code>std::unique_ptr</code> constructor used to construct the temporary for both (d) and (f) is</p>\n<pre><code>template&lt;class U, class E&gt;\nunique_ptr(unique_ptr&lt;U, E&gt; &amp;&amp;u);\n</code></pre>\n", "Tags": "<c++><c++14><rvalue-reference>", "OwnerUserId": "423031", "AnswerCount": "1"}, "34951347": {"ParentId": "34951161", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The key difference between your cases lies in the fact that rvalue references can bind indirectly (via a temporary), while non-<code>const</code> lvalue references cannot. In both (c) and (d), the initializer is not similar or convertible to the type referred to as determined in  <a href=\"http://eel.is/c++draft/dcl.init.ref#5\" rel=\"nofollow\">[dcl.init.ref]/(5.1)</a>, therefore [dcl.init.ref]/(5.2) must apply - immediately ruling out (c):</p>\n<blockquote>\n<p id=\"so_34951161_34951347_0\">Otherwise, the reference shall be an lvalue reference to a\n  non-volatile <code>const</code> type (i.e., <em>cv1</em> shall be const), or the reference\n  shall be an rvalue reference.</p>\n</blockquote>\n<p>Note also that <code>unique_ptr&lt;A&gt;</code> and <code>unique_ptr&lt;B&gt;</code> are distinct, unrelated types, regardless of how <code>A</code> and <code>B</code> are related.</p>\n<p>You can observe that rule <a href=\"http://coliru.stacked-crooked.com/a/8a3509c91c6b8535\" rel=\"nofollow\">with scalars, too</a>:</p>\n<pre><code>int&amp;&amp; i = 0.f; // Ok\nint&amp; i = 0.f; // Not ok\n</code></pre>\n", "OwnerUserId": "3647361", "LastEditorUserId": "3647361", "LastEditDate": "2016-01-22T16:51:46.887", "Id": "34951347", "Score": "4", "CreationDate": "2016-01-22T16:24:06.940", "LastActivityDate": "2016-01-22T16:51:46.887"}, "bq_ids": {"n4140": {"so_34951161_34951347_0": {"section_id": 3321, "quality": 0.9166666666666666, "length": 11}}, "n3337": {"so_34951161_34951347_0": {"section_id": 3191, "quality": 0.9166666666666666, "length": 11}}, "n4659": {"so_34951161_34951347_0": {"section_id": 4087, "quality": 0.9166666666666666, "length": 11}}}});