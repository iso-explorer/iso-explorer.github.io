post_cb({"29136447": {"ParentId": "29133988", "CommentCount": "0", "Body": "<p>This looks like a <code>gcc</code> bug, the grammar for an <em>unnamed class</em> is covered in section <code>9</code> <em>[class]</em> and we have the following:</p>\n<pre><code>class-specifier:\n    class-head { member-specificationopt}\nclass-head:\n    class-key attribute-specifier-seqopt class-head-name class-virt-specifieropt base-clauseopt\n    class-key attribute-specifier-seqopt base-clauseopt\n</code></pre>\n<p>and the following text:</p>\n<blockquote>\n<p id=\"so_29133988_29136447_0\">A class-specifier whose class-head omits the class-head-name defines an unnamed class.</p>\n</blockquote>\n<p>so an <em>unnamed class</em> is simply a <em>class-specifier</em> without a name and <em>class-specifier</em> is a <em>type-specifier</em> and section <code>7.1.3</code> <em>[dcl.typedef]</em> says:</p>\n<blockquote>\n<p id=\"so_29133988_29136447_1\">The typedef specifier shall not be combined in a declspecifier-\n  seq with any other kind of specifier except a type-specifier</p>\n</blockquote>\n<p>and does not have any restrictions with respect to <em>unnamed class</em> and only refers to them in this paragraph:</p>\n<blockquote>\n<p id=\"so_29133988_29136447_2\">If the typedef declaration defines an unnamed class (or enum), the\n  first typedef-name declared by the declaration to be that class type\n  (or enum type) is used to denote the class type (or enum type) for\n  linkage purposes only (3.5). [ Example:</p>\n<pre><code>typedef struct { } *ps, S; // S is the class name for linkage purposes\n</code></pre>\n<p id=\"so_29133988_29136447_3\">\u2014end example ]</p>\n</blockquote>\n", "OwnerUserId": "1708801", "PostTypeId": "2", "Id": "29136447", "Score": "2", "CreationDate": "2015-03-19T02:54:36.687", "LastActivityDate": "2015-03-19T02:54:36.687"}, "29133988": {"CommentCount": "0", "CreationDate": "2015-03-18T22:35:07.787", "PostTypeId": "1", "AcceptedAnswerId": "29136447", "LastEditorUserId": "1708801", "LastActivityDate": "2015-03-19T09:30:49.370", "LastEditDate": "2015-03-19T09:30:49.370", "ViewCount": "138", "FavoriteCount": "1", "Title": "Using alias for reference to anonymous structure results in error", "Id": "29133988", "Score": "4", "Body": "<p>My theory is that gcc has a bug. The following compiles in both clang and gcc:</p>\n<pre><code>using type = const struct {}&amp;;\n</code></pre>\n<p>But now when I change it to an rvalue reference it compiles with clang but not with gcc:</p>\n<pre><code>using type = const struct {}&amp;&amp;;\n\n// main.cpp:8:17: error: expected ';' after struct definition\n//  typedef struct {}&amp;&amp; type;\n//                  ^\n// main.cpp:8:17: error: missing type-name in typedef-declaration\n// main.cpp:8:22: error: expected constructor, destructor, or type conversion before ';' token\n//  typedef const struct {}&amp;&amp; type;\n//                                ^\n</code></pre>\n<p>It fails with the <code>typedef</code> version as well with the same error:</p>\n<pre><code>typedef const struct {}&amp;&amp; type;\n</code></pre>\n<p>Why does this fail to compile in gcc? Is this an issue with the standard or a bug?</p>\n", "Tags": "<c++><c++11><gcc><using-declaration>", "OwnerUserId": "1594090", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_29133988_29136447_0": {"section_id": 5845, "quality": 1.0, "length": 8}, "so_29133988_29136447_2": {"section_id": 5415, "quality": 0.9545454545454546, "length": 21}, "so_29133988_29136447_1": {"section_id": 5407, "quality": 0.7272727272727273, "length": 8}}, "n3337": {"so_29133988_29136447_0": {"section_id": 5615, "quality": 1.0, "length": 8}, "so_29133988_29136447_2": {"section_id": 5210, "quality": 0.9545454545454546, "length": 21}, "so_29133988_29136447_1": {"section_id": 5202, "quality": 0.7272727272727273, "length": 8}}, "n4659": {"so_29133988_29136447_0": {"section_id": 7324, "quality": 1.0, "length": 8}, "so_29133988_29136447_2": {"section_id": 6837, "quality": 0.9545454545454546, "length": 21}, "so_29133988_29136447_1": {"section_id": 6829, "quality": 0.6363636363636364, "length": 7}}}});