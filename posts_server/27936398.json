post_cb({"27938165": {"ParentId": "27936398", "CommentCount": "0", "Body": "<p>Because the member access operators can only be applied to a complete type, as specified by C++11 5.2.5 [expr.ref]/2:</p>\n<blockquote>\n<p id=\"so_27936398_27938165_0\">For the first option (dot) the first expression shall have complete class type. For the second option (arrow) the first expression shall have pointer to complete class type.</p>\n</blockquote>\n<p>If you're asking why that rule exists: because, unless the class is complete, so that the member has been declared, there's no way to tell how to interpret the member name.</p>\n", "OwnerUserId": "204847", "PostTypeId": "2", "Id": "27938165", "Score": "0", "CreationDate": "2015-01-14T07:54:58.030", "LastActivityDate": "2015-01-14T07:54:58.030"}, "27936398": {"CommentCount": "0", "ViewCount": "40", "OwnerDisplayName": "user2953119", "CreationDate": "2015-01-14T05:30:16.077", "LastActivityDate": "2015-01-14T07:54:58.030", "PostTypeId": "1", "AcceptedAnswerId": "27938165", "Title": "Member access expression applying to a variable of an incomplete type", "Id": "27936398", "Score": "0", "Body": "<p>Consider the following code:</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct A\n{\n    static const int b = 42;\n    static const A *a;\n    int ca[b]; //OK\n    int c[a -&gt; b]; //1, ill-formed\n};\n\nint main(){ }\n</code></pre>\n<p><strong><a href=\"http://coliru.stacked-crooked.com/a/ad47fab753ad97ae\" rel=\"nofollow\">DEMO</a></strong></p>\n<p>At <code>//1</code>, the class type is still being considered as an incomplete object type (relevant section <code>N4296::9.2/2 [class.mem]</code>). But we can't apply the class-member-access expression to it. Why? </p>\n<p>Couldn't you explain why the program is ill-formed?</p>\n", "Tags": "<c++><class>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_27936398_27938165_0": {"section_id": 6005, "quality": 0.9047619047619048, "length": 19}}, "n3337": {"so_27936398_27938165_0": {"section_id": 5773, "quality": 0.9047619047619048, "length": 19}}, "n4659": {"so_27936398_27938165_0": {"section_id": 7504, "quality": 0.8095238095238095, "length": 17}}}});