post_cb({"9585990": {"CommentCount": "2", "AcceptedAnswerId": "9588075", "PostTypeId": "1", "LastEditorUserId": "636019", "CreationDate": "2012-03-06T14:51:08.317", "LastActivityDate": "2012-03-06T22:06:36.387", "AnswerCount": "1", "LastEditDate": "2012-03-06T22:06:36.387", "ViewCount": "222", "FavoriteCount": "1", "Title": "Where does the standard talk about aliasing?", "Id": "9585990", "Score": "5", "Body": "<p>Where in the C++ standard does it talk about aliasing? I looked at the ToC and saw no mention of the word 'alias'. I tried to look in the one definition rule (3.2) and a search of 'alias' had no results there. I'm at a loss where it may be. I'm looking for memory aliasing</p>\n", "Tags": "<c++><c++11><standards><language-lawyer>", "OwnerDisplayName": "user34537"}, "9588075": {"ParentId": "9585990", "CommentCount": "0", "Body": "<p>Aliasing is mainly discussed in \u00a73.10[basic.lval]/10:</p>\n<blockquote>\n<p id=\"so_9585990_9588075_0\">If a program attempts to access the stored value of an object through a glvalue of other than one of the\n  following types the behavior is undefined:<sup>52</sup></p>\n<ul>\n<li>the dynamic type of the object,</li>\n<li>a cv-qualified version of the dynamic type of the object,</li>\n<li>a type similar (as defined in 4.4) to the dynamic type of the object,</li>\n<li>a type that is the signed or unsigned type corresponding to the dynamic type of the object,</li>\n<li>a type that is the signed or unsigned type corresponding to a cv-qualified version of the dynamic type\n  of the object,</li>\n<li>an aggregate or union type that includes one of the aforementioned types among its elements or non-\n  static data members (including, recursively, an element or non-static data member of a subaggregate\n  or contained union),</li>\n<li>a type that is a (possibly cv-qualified) base class type of the dynamic type of the object,</li>\n<li>a <code>char</code> or <code>unsigned char</code> type.</li>\n</ul>\n<p id=\"so_9585990_9588075_1\"><sup>52)</sup> The intent of this list is to specify those circumstances in which an object may or may not be aliased.</p>\n</blockquote>\n<p>So, for example,</p>\n<pre><code>int x = 1;\n*(char*)(&amp;x);     // (implementation-)defined\n*(unsigned*)(&amp;x); // (implementation-)defined\n*(float*)(&amp;x);    // undefined\n</code></pre>\n<hr>\n<p>The following mentions may also be interesting.</p>\n<p>\u00a75.17[expr.ass]/8</p>\n<blockquote>\n<p id=\"so_9585990_9588075_2\">If the value being stored in an object is accessed from another object that overlaps in any way the storage of\n  the first object, then the overlap shall be exact and the two objects shall have the same type, otherwise the\n   behavior is undefined. [ <em>Note</em>: This restriction applies to the relationship between the left and right sides of\n    the assignment operation; it is not a statement about how the target of the assignment may be aliased in\n   general. See 3.10. \u2014 <em>end note</em> ]</p>\n</blockquote>\n<p>\u00a717.6.4.9[res.on.arguments]/1 pt 3:</p>\n<blockquote>\n<p id=\"so_9585990_9588075_3\">If a function argument binds to an rvalue reference parameter, the implementation may assume that\n  this parameter is a unique reference to this argument. \u2026 [The\n  implementation is free to optimize away aliasing checks which might be needed if the argument was\n  an lvalue.]</p>\n</blockquote>\n<p>\u00a726.6.2[valarray.syn]/2:</p>\n<blockquote>\n<p id=\"so_9585990_9588075_4\">The <code>valarray</code> array classes are defined to be free of certain forms of aliasing, thus allowing operations on\n   these classes to be optimized.</p>\n</blockquote>\n<p>and the rest of <code>&lt;valarray&gt;</code> also discusses how the class should be implemented to avoid data aliasing.</p>\n</hr>", "OwnerUserId": "224671", "PostTypeId": "2", "Id": "9588075", "Score": "10", "CreationDate": "2012-03-06T16:45:36.793", "LastActivityDate": "2012-03-06T16:45:36.793"}, "bq_ids": {"n4140": {"so_9585990_9588075_4": {"section_id": 3730, "quality": 0.9285714285714286, "length": 13}, "so_9585990_9588075_0": {"section_id": 7239, "quality": 0.9285714285714286, "length": 13}, "so_9585990_9588075_1": {"section_id": 7239, "quality": 0.9, "length": 9}, "so_9585990_9588075_3": {"section_id": 6325, "quality": 0.96, "length": 24}, "so_9585990_9588075_2": {"section_id": 6180, "quality": 0.8913043478260869, "length": 41}}, "n3337": {"so_9585990_9588075_4": {"section_id": 3592, "quality": 0.9285714285714286, "length": 13}, "so_9585990_9588075_0": {"section_id": 6983, "quality": 0.9285714285714286, "length": 13}, "so_9585990_9588075_3": {"section_id": 6082, "quality": 0.96, "length": 24}, "so_9585990_9588075_1": {"section_id": 6983, "quality": 0.9, "length": 9}, "so_9585990_9588075_2": {"section_id": 5941, "quality": 0.8913043478260869, "length": 41}}, "n4659": {"so_9585990_9588075_4": {"section_id": 4497, "quality": 0.9285714285714286, "length": 13}, "so_9585990_9588075_0": {"section_id": 8748, "quality": 0.9285714285714286, "length": 13}, "so_9585990_9588075_1": {"section_id": 8748, "quality": 0.9, "length": 9}, "so_9585990_9588075_3": {"section_id": 7835, "quality": 0.96, "length": 24}, "so_9585990_9588075_2": {"section_id": 7682, "quality": 0.8695652173913043, "length": 40}}}});