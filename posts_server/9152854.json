post_cb({"9152969": {"ParentId": "9152854", "CommentCount": "0", "CreationDate": "2012-02-05T20:58:57.580", "OwnerUserId": "894328", "PostTypeId": "2", "Id": "9152969", "Score": "2", "Body": "<p><code>#line</code> directive modifies the reporting position for the compiler, and is used by code generating software to help the programmer identify the issue in the original source. It can be used by anyone to help redirect error reporting to be more informative.</p>\n<p>So for instance your parser generates a CSSGrammar.cpp file say, which is compiled by the c++ compiler, and has c++ snippets in it, a <code>#line 25 \"CSSGrammar.y\"</code> directive tells the c++ compiler to treat that particular point in the file as if it is line number 25 from CSSGrammar.y </p>\n<p>The compiler will continue to parse subsequent lines and report errors under the initial conditions of that directive.</p>\n<p>So if an error occurs 3 lines later it would report that an error occurred on line 28 in CSSGrammar.y</p>\n<p>Note that a single source file can have sources coming in from multiple parts; and that this directive can be used quite effectively to indicate error conditions. </p>\n<p>Typically you'll see that there are multiple <code>#line</code> directives along the way; they are just there to account for various injections along the way (to reset the reporting caret if you will).</p>\n<p>Note that #line directive can be used by ANY generator including your own, and is not limited to in anyway parser generators.</p>\n", "LastActivityDate": "2012-02-05T20:58:57.580"}, "9152906": {"ParentId": "9152854", "CommentCount": "0", "CreationDate": "2012-02-05T20:51:31.563", "OwnerUserId": "841108", "PostTypeId": "2", "Id": "9152906", "Score": "1", "Body": "<p>It a directive for the compiler to believe that the following line is the line number 25 in file <code>CSSGrammar.y</code>. Then, if an error is detected by the compiler on the 2nd next line, it would be reported as coming from line 26 of <code>CSSGrammar.y</code></p>\n<p>Programs generating C files, like <a href=\"http://www.gnu.org/software/bison/\" rel=\"nofollow\"><code>bison</code></a>, or <code>yacc</code>, or <code>flex</code>, or <a href=\"http://www.antlr.org/\" rel=\"nofollow\">ANTLR</a>, or even <a href=\"http://gcc-melt.org/\" rel=\"nofollow\">MELT</a> use that possibility a lot.</p>\n<p>If debugging information is generated (e.g. with <code>gcc -g</code>), it will point to the <code>CSSGrammar.y</code> file in your example.</p>\n", "LastActivityDate": "2012-02-05T20:51:31.563"}, "9152885": {"ParentId": "9152854", "CommentCount": "0", "CreationDate": "2012-02-05T20:49:36.413", "OwnerUserId": "313145", "PostTypeId": "2", "Id": "9152885", "Score": "1", "Body": "<p>it's a c preprocessor option. It tells the c-parser to drop it's line count of the source file an pretend, that this is line #25.</p>\n<p>With this information it's easier for you to debug the the source file. The yacc file will be translated into a c-source, where this is the pretended source line.</p>\n", "LastActivityDate": "2012-02-05T20:49:36.413"}, "9152854": {"CommentCount": "13", "AcceptedAnswerId": "9152887", "PostTypeId": "1", "LastEditorUserId": "4370109", "CreationDate": "2012-02-05T20:46:05.910", "LastActivityDate": "2016-06-24T22:33:48.850", "LastEditDate": "2016-06-24T22:33:48.850", "ViewCount": "3941", "FavoriteCount": "1", "Title": "What does #line mean?", "Id": "9152854", "Score": "8", "Body": "<p>What does the following line do?</p>\n<pre><code>#line 25 \"CSSGrammar.y\"\n</code></pre>\n<p>And what's with the extension?</p>\n", "Tags": "<c++><c-preprocessor><preprocessor-directive>", "OwnerUserId": "673730", "AnswerCount": "6"}, "9152887": {"ParentId": "9152854", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2012-02-05T20:49:40.740", "Score": "10", "LastEditorUserId": "726361", "LastEditDate": "2012-02-05T21:14:11.630", "Id": "9152887", "OwnerUserId": "726361", "Body": "<p>According to the Standard:</p>\n<p>\u00a716.4.3:</p>\n<blockquote>\n<p id=\"so_9152854_9152887_0\">A preprocessing directive of the form</p>\n<pre><code># line digit-sequence new-line\n</code></pre>\n<p id=\"so_9152854_9152887_1\">causes the implementation to behave as if the following sequence of source lines begins with a source line\n  that has a line number as specified by the digit sequence (interpreted as a decimal integer). If the digit\n  sequence specifies zero or a number greater than 2147483647, the behavior is undefined.</p>\n</blockquote>\n<p>\u00a716.4.4:</p>\n<blockquote>\n<p id=\"so_9152854_9152887_2\">A preprocessing directive of the form</p>\n<pre><code># line digit-sequence \" s-char-sequenceopt\" new-line\n</code></pre>\n<p id=\"so_9152854_9152887_3\">sets the presumed line number similarly and changes the presumed name of the source file to be the contents\n  of the character string literal.</p>\n</blockquote>\n<p>\u00a716.4.5:</p>\n<blockquote>\n<p id=\"so_9152854_9152887_4\">A preprocessing directive of the form</p>\n<pre><code># line pp-tokens new-line\n</code></pre>\n<p id=\"so_9152854_9152887_5\">(that does not match one of the two previous forms) is permitted. The preprocessing tokens after line\n  on the directive are processed just as in normal text (each identifier currently defined as a macro name is\n  replaced by its replacement list of preprocessing tokens). If the directive resulting after all replacements\n  does not match one of the two previous forms, the behavior is undefined; otherwise, the result is processed\n  as appropriate.</p>\n</blockquote>\n<p>The <code>.y</code> extension is just what the author chose to use, perhaps to make it apparent that it was a YACC file (the word \"grammar\" also points to that though it's just a guess).</p>\n", "LastActivityDate": "2012-02-05T21:14:11.630"}, "9152873": {"ParentId": "9152854", "CommentCount": "0", "CreationDate": "2012-02-05T20:48:52.037", "OwnerUserId": "131433", "PostTypeId": "2", "Id": "9152873", "Score": "2", "Body": "<p>The 'yacc' parser generator consumes files that end in .y, and emits files that contain c or c++. It adds these #line lines to allow a debugger to get back to ye olde original source, accept no substitutes.</p>\n", "LastActivityDate": "2012-02-05T20:48:52.037"}, "bq_ids": {"n4140": {"so_9152854_9152887_5": {"section_id": 546, "quality": 0.9782608695652174, "length": 45}, "so_9152854_9152887_3": {"section_id": 545, "quality": 1.0, "length": 14}, "so_9152854_9152887_1": {"section_id": 544, "quality": 1.0, "length": 28}}, "n3337": {"so_9152854_9152887_5": {"section_id": 537, "quality": 0.9782608695652174, "length": 45}, "so_9152854_9152887_3": {"section_id": 536, "quality": 1.0, "length": 14}, "so_9152854_9152887_1": {"section_id": 535, "quality": 1.0, "length": 28}}, "n4659": {"so_9152854_9152887_5": {"section_id": 567, "quality": 0.9782608695652174, "length": 45}, "so_9152854_9152887_1": {"section_id": 565, "quality": 1.0, "length": 28}, "so_9152854_9152887_3": {"section_id": 566, "quality": 1.0, "length": 14}}}, "9152878": {"ParentId": "9152854", "CommentCount": "1", "CreationDate": "2012-02-05T20:49:11.333", "OwnerUserId": "7116", "PostTypeId": "2", "Id": "9152878", "Score": "7", "Body": "<p>It simply states that the current line of code is sourced from line 25 of <code>CSSGrammar.y</code>, a YACC-style grammar file which is where this code was generated.</p>\n<p>This can be used by debuggers to step into the grammar itself as opposed to the generated code.</p>\n", "LastActivityDate": "2012-02-05T20:49:11.333"}});