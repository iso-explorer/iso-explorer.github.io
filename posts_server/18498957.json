post_cb({"bq_ids": {"n4140": {"so_18498957_18500500_1": {"length": 7, "quality": 1.0, "section_id": 7141}, "so_18498957_18499719_1": {"length": 45, "quality": 0.9782608695652174, "section_id": 87}, "so_18498957_18498957_0": {"length": 6, "quality": 0.6, "section_id": 336}, "so_18498957_18499719_0": {"length": 17, "quality": 0.9444444444444444, "section_id": 7135}, "so_18498957_18500500_0": {"length": 13, "quality": 0.9285714285714286, "section_id": 7141}}, "n3337": {"so_18498957_18499719_1": {"length": 45, "quality": 0.9782608695652174, "section_id": 82}, "so_18498957_18500500_1": {"length": 7, "quality": 1.0, "section_id": 6885}, "so_18498957_18498957_0": {"length": 6, "quality": 0.6, "section_id": 326}, "so_18498957_18499719_0": {"length": 17, "quality": 0.9444444444444444, "section_id": 6879}, "so_18498957_18500500_0": {"length": 13, "quality": 0.9285714285714286, "section_id": 6885}}, "n4659": {"so_18498957_18500500_1": {"length": 7, "quality": 1.0, "section_id": 8642}, "so_18498957_18498957_0": {"length": 6, "quality": 0.6, "section_id": 345}, "so_18498957_18499719_0": {"length": 17, "quality": 0.9444444444444444, "section_id": 8636}, "so_18498957_18500500_0": {"length": 13, "quality": 0.9285714285714286, "section_id": 8642}}}, "18498957": {"ViewCount": "1233", "Body": "<p>I have some very simple (<strong>C++11</strong>) code which the latest <strong>clang</strong> (<em>version 3.4 trunk 187493</em>) fails to compile, but GCC compiles fine.</p>\n<p>The code (below) instantiates the function-template <code>foo</code> with the <strong>function-local type</strong> <code>Bar</code> and then tries to use its address as a non-type template parameter for the class-template <code>Func</code>:</p>\n<pre><code>template&lt;void(*FUNC_PTR)(void)&gt;\nstruct Func {};\n\ntemplate&lt;typename T&gt; extern inline\nvoid foo() {\n    using Foo = Func&lt;foo&lt;T&gt;&gt;;\n}\nint main() {\n    struct Bar {}; // function-local type\n    foo&lt;Bar&gt;();\n    return 0;\n}\n</code></pre>\n<p><strong>clang emits the following error:</strong></p>\n<blockquote>\n<p id=\"so_18498957_18498957_0\"><strong>error</strong>: non-type template argument refers to function 'foo' that\n  does not have linkage</p>\n</blockquote>\n<p>However, if I move type <code>Bar</code> to global scope (by taking it out of the function), then clang compiles it fine, proving the issue is with the type being <strong>function-local</strong>.</p>\n<p>So is clang correct to emit this error, or does the standard not support this (in which case GCC is being too lenient by allowing it)?</p>\n<p><hr>\n<strong>EDIT #1 :</strong> To be clear, this is <strong>not</strong> a duplicate of <a href=\"https://stackoverflow.com/questions/742607/using-local-classes-with-stl-algorithms\">this question</a> since the <em>'cannot use local types as template parameters'</em> restriction was removed in C++11. <strong>However</strong>, it's still unclear if there are linkage implications involved with using a local type, and whether clang is correct or not in emitting this error.</hr></p>\n<p><hr>\n<strong>EDIT #2 :</strong> It has been determined that clang was correct to emit the error for the above code (see answer from @jxh), but that it <strong>incorrectly</strong> also emits an error for the following code (with <code>using</code> declaration moved from <code>foo&lt;Bar&gt;()</code> scope to <code>main()</code> scope):</hr></p>\n<pre><code>template&lt;void(*FUNC_PTR)(void)&gt;\nstruct Func {};\n\ntemplate&lt;typename T&gt; extern inline\nvoid foo() {}\n\nint main() {\n    struct Bar {};\n    using F = Func&lt;foo&lt;Bar&gt;&gt;;\n    return 0;\n}\n</code></pre>\n", "AcceptedAnswerId": "18499719", "Title": "clang error: non-type template argument refers to function that does not have linkage -- bug?", "CreationDate": "2013-08-28T22:00:46.060", "Id": "18498957", "CommentCount": "11", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2017-05-23T10:25:17.163", "LastEditorUserId": "-1", "LastActivityDate": "2013-08-29T05:11:17.817", "Score": "8", "OwnerUserId": "2126637", "Tags": "<c++><templates><gcc><c++11><clang>", "AnswerCount": "2"}, "18499719": {"Id": "18499719", "PostTypeId": "2", "Body": "<p>By definition of <em>no linkage</em> in C++.11 \u00a73.5 <em>Program and linkage</em> \u00b62, I originally believed <code>foo&lt;Bar&gt;</code> has no linkage since it cannot be referred to by name by any other scope except that which defined the type <code>Bar</code> (ie, <code>main()</code>). However, this is not correct. This is because the definition of a name with <em>external linkage</em> is described as:</p>\n<blockquote>\n<p id=\"so_18498957_18499719_0\">When a name has <em>external linkage</em>, the entity it denotes can be referred to by names from scopes of other translation units or from other scopes of the same translation unit.</p>\n</blockquote>\n<p>And for a template function, this will always be the case. This is because there is one other scope from which the name can be referred. Namely, the template function can refer to itself. Therefore, <code>foo&lt;Bar&gt;</code> has external linkage. <a href=\"https://stackoverflow.com/a/18500500/315052\">zneak's answer, EDIT 2</a>, has an e-mail thread with the clang developers confirming that <code>foo&lt;Bar&gt;</code> should have external linkage.</p>\n<p>Thus, from C++.11 \u00a714.3.2 <em>Template non-type arguments</em> \u00b61:</p>\n<blockquote>\n<p id=\"so_18498957_18499719_1\">A <em>template-argument</em> for a non-type, non-template <em>template-parameter</em> shall be one of: ...\n  <li> a constant expression (5.19) that designates the address of an object with static storage duration and external or internal linkage or a function with external or internal linkage, including function templates and function <i>template-id</i>s but excluding non-static class members, expressed (ignoring parentheses) as <code>&amp;</code><i>id-expression</i>, except that the <code>&amp;</code> may be omitted if the name refers to a function or array and shall be omitted if the corresponding <em>template-parameter</em> is a reference; ...</li></p>\n</blockquote>\n<p>The most relevant bullet is the third bullet. Since <code>foo&lt;bar&gt;</code> has external linkage, passing it as a non-type <em>template-parameter</em> should be fine.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2013-08-29T05:11:17.817", "Score": "3", "CreationDate": "2013-08-28T23:04:09.967", "ParentId": "18498957", "CommentCount": "13", "OwnerUserId": "315052", "LastEditDate": "2017-05-23T12:13:11.733"}, "18500500": {"Id": "18500500", "PostTypeId": "2", "Body": "<p>I'm late to the party, but standard says that type-local functions don't have linkage (\u00a73.5:8):</p>\n<blockquote>\n<p id=\"so_18498957_18500500_0\">Names not covered by these rules have no linkage. Moreover, except as noted, a <strong>name declared at block scope (3.3.3) has no linkage</strong>.</p>\n</blockquote>\n<p>Same section goes on to say:</p>\n<blockquote>\n<p id=\"so_18498957_18500500_1\">A type without linkage shall not be used as the type of a variable or function with external linkage unless</p>\n<ul>\n<li>the entity has C language linkage (7.5), or</li>\n<li><strong>the entity is declared within an unnamed namespace (7.3.1)</strong>, or</li>\n<li>the entity is not odr-used (3.2) or is defined in the same translation unit.</li>\n</ul>\n</blockquote>\n<p>And, as a matter of fact, Clang will allow this:</p>\n<pre><code>namespace\n{\n    template&lt;void (*FUNC_PTR)(void)&gt;\n    struct Func {};\n\n    template&lt;typename T&gt;\n    void foo() {}\n}\n\nint main() {\n    struct Bar {}; // function-local type\n    Func&lt;foo&lt;Bar&gt;&gt; x;\n}\n</code></pre>\n<p>And will reject it without the anonymous namespace.</p>\n<hr>\n<p><strong>EDIT 1</strong>: As jxh notes, the names are also defined in the same translation unit, so I'm not sure what to think of this one.</p>\n<hr>\n<p><strong>EDIT 2</strong>: <a href=\"http://llvm.org/bugs/show_bug.cgi?id=17030#c1\" rel=\"nofollow\">The guys at clang confirm it's a bug.</a></p>\n</hr></hr>", "LastEditorUserId": "251153", "LastActivityDate": "2013-08-29T02:08:02.890", "Score": "3", "CreationDate": "2013-08-29T00:32:33.323", "ParentId": "18498957", "CommentCount": "10", "OwnerUserId": "251153", "LastEditDate": "2013-08-29T02:08:02.890"}});