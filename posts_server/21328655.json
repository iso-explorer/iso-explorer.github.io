post_cb({"21328716": {"ParentId": "21328655", "PostTypeId": "2", "CommentCount": "9", "CreationDate": "2014-01-24T09:16:08.150", "Score": "4", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:11:43.550", "Id": "21328716", "OwnerUserId": "1938163", "Body": "<p>Static and global variables are initialized to 0 by default so it's perfectly normal</p>\n<p>The C standard <a href=\"http://open-std.org/JTC1/SC22/WG14/www/standards\" rel=\"nofollow noreferrer\">ISO/IEC 9899:1999</a> a.k.a. <a href=\"http://en.wikipedia.org/wiki/C99\" rel=\"nofollow noreferrer\">C99</a> (and C++) standards say this must be so. See item 10 in section 6.7.8 (\"Initialization\") of <a href=\"http://open-std.org/JTC1/SC22/WG14/www/docs/n1256.pdf\" rel=\"nofollow noreferrer\">WG14 N1256</a> for the exact text (<a href=\"https://stackoverflow.com/a/1294780/1938163\">https://stackoverflow.com/a/1294780/1938163</a>)</p>\n<p>By the way: <strong>it is good practice to initialize static variables, also just to render the code more readable!</strong></p>\n<pre><code>static int myvar = 0;\n</code></pre>\n<p>Another drawback of not initializing them: <strong>if a compiler doesn't follow the standard, you might get in trouble</strong></p>\n<p>With regard to local variables that are both <strong>NOT</strong> static and <strong>NOT</strong> global, well, you might skip their initialization but that would yield undefined behavior. Don't really rely on it.</p>\n", "LastActivityDate": "2014-01-24T09:23:29.247"}, "21328691": {"ParentId": "21328655", "PostTypeId": "2", "CommentCount": "7", "CreationDate": "2014-01-24T09:14:58.853", "Score": "5", "LastEditorUserId": "150634", "LastEditDate": "2014-01-24T09:22:33.363", "Id": "21328691", "OwnerUserId": "150634", "Body": "<p>It's not uninitialized. Variables with static storage duration (like a global variable) are first zero-initialized before any further initialization. So <code>weirdVariable</code> ends up with the value 1.</p>\n<blockquote>\n<p id=\"so_21328655_21328691_0\"><em>\u00a73.6.2 [basic.start.init]</em> Variables with static storage duration (3.7.1) or thread storage duration (3.7.2) shall be zero-initialized (8.5) before any other initialization takes place.</p>\n</blockquote>\n<p>If you were to declare <code>wierdVariable</code> as local to <code>main</code>, it would be uninitialized. This will give you undefined behaviour because performing lvalue-to-rvalue conversion (read: using the value of) on an uninitialized object gives undefined behaviour.</p>\n<blockquote>\n<p id=\"so_21328655_21328691_1\"><em>\u00a74.1 [conv.lval]</em> If the object to which the glvalue refers is [...] uninitialized, a program\n  that necessitates this conversion has undefined behavior.</p>\n</blockquote>\n", "LastActivityDate": "2014-01-24T09:22:33.363"}, "bq_ids": {"n4140": {"so_21328655_21328691_1": {"section_id": 5768, "quality": 0.5555555555555556, "length": 5}, "so_21328655_21328691_0": {"section_id": 7151, "quality": 0.7647058823529411, "length": 13}}, "n3337": {"so_21328655_21328691_1": {"section_id": 5, "quality": 0.8888888888888888, "length": 8}, "so_21328655_21328691_0": {"section_id": 6895, "quality": 0.7647058823529411, "length": 13}}, "n4659": {"so_21328655_21328691_1": {"section_id": 7687, "quality": 0.6666666666666666, "length": 6}, "so_21328655_21328691_0": {"section_id": 4051, "quality": 0.5294117647058824, "length": 9}}}, "21328655": {"CommentCount": "4", "AcceptedAnswerId": "21328691", "CreationDate": "2014-01-24T09:13:13.110", "LastActivityDate": "2014-01-24T09:23:29.247", "PostTypeId": "1", "ViewCount": "365", "FavoriteCount": "3", "Title": "Why doesn't the compiler give an error when an uninitialized variable is returned?", "Id": "21328655", "Score": "5", "Body": "<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nint weirdVariable = weirdVariable  + 1;\nint main() {\n  cout&lt;&lt; weirdVariable ;\n  return weirdVariable ;\n}\n</code></pre>\n<p>I was just wondering how this un-initialized variable is not returning error and returning 1.So my question is, how/why is it returning the value \"1\". Is this program logically valid? Or is it some flaw?</p>\n", "Tags": "<c++><visual-studio-2010><visual-c++>", "OwnerUserId": "2748000", "AnswerCount": "2"}});