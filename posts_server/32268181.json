post_cb({"32268317": {"ParentId": "32268181", "CommentCount": "0", "CreationDate": "2015-08-28T09:59:16.800", "OwnerUserId": "4498329", "PostTypeId": "2", "Id": "32268317", "Score": "0", "Body": "<p>No, by the standard the <code>'\\s'</code> is not allowed. Between the <code>'</code>es you have to have a sequence of <code>c-characters</code> which are either <code>escape-sequence</code>s, <code>universal-character-name</code>s or characters other than single quote (<code>'</code>), backslash (<code>\\</code>) or newline character.</p>\n<p>That your compiler accepts it (which it according to the standard is allowed to do if it documents it) is another question and you should consult your compiler documentation for information on how it interpret's it (or stop writing non-conforming code).</p>\n", "LastActivityDate": "2015-08-28T09:59:16.800"}, "32268181": {"CommentCount": "0", "ViewCount": "318", "CreationDate": "2015-08-28T09:52:27.913", "LastActivityDate": "2015-08-28T09:59:16.800", "Title": "Is the use of unknown escape sequence invokes undefined behavior in C++?", "AcceptedAnswerId": "32268299", "PostTypeId": "1", "Id": "32268181", "Score": "2", "Body": "<p>Consider following program:</p>\n<pre><code>#include &lt;iostream&gt;\nint main()\n{\n     std::cout&lt;&lt;\"Can this lead to undefined behavior?\"&lt;&lt;'\\s';\n}\n</code></pre>\n<p>g++ gives an warning:</p>\n<pre><code>[Warning] unknown escape sequence: '\\s' [enabled by default]\n</code></pre>\n<p>Here <code>'\\s'</code> in typed accidentally instead of <code>'\\n'</code>. So, is this program well defined or undefined? What C++ Standard says about this? The C Programming language by K&amp;R says that it is undefined behavior in C.  </p>\n", "Tags": "<c++><special-characters><undefined-behavior>", "OwnerUserId": "3777958", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_32268181_32268299_0": {"section_id": 5345, "quality": 0.6363636363636364, "length": 7}}, "n3337": {"so_32268181_32268299_0": {"section_id": 5142, "quality": 0.6363636363636364, "length": 7}}, "n4659": {"so_32268181_32268299_0": {"section_id": 6770, "quality": 0.6363636363636364, "length": 7}}}, "32268299": {"ParentId": "32268181", "CommentCount": "1", "CreationDate": "2015-08-28T09:58:12.077", "OwnerUserId": "496161", "PostTypeId": "2", "Id": "32268299", "Score": "3", "Body": "<blockquote>\n<p id=\"so_32268181_32268299_0\"><code>(N3337 [lex.ccon]/3):</code>Escape sequences\n  in which the character following the backslash is not listed in Table 7 are conditionally-supported, with\n  implementation-defined semantics.</p>\n</blockquote>\n<p>This means that non-standard escape sequences are valid if your implementation supports them. Check the documentation for your particular implementation for the semantics of any additional characters.</p>\n", "LastActivityDate": "2015-08-28T09:58:12.077"}});