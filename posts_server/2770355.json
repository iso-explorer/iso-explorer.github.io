post_cb({"2770355": {"ViewCount": "554", "Body": "<p>I'm having some issues with implementing a logarithm class with operator overloading in C++.</p>\n<p>My first goal is how I would implement the <code>changeBase</code> method, I've been having a tough time wrapping my head around it. </p>\n<p>I have tried to understand the math behind changing the base of a logarithm, but i haven't been able to. Can someone please explain it to me?</p>\n<p>My second goal is to be able to perform an operation where the left operand is a <code>double</code> and the right operand is a logarithm object.</p>\n<p>Here's a snippet of my log class:</p>\n<pre><code>// coefficient: double\n// base: unsigned int\n// result: double\nclass _log {\n\n double coefficient, result;\n unsigned int base;\n\npublic:\n\n _log() {\n  base = 10;\n  coefficient = 0.0;\n  result = 0.0;\n }\n _log operator+ ( const double b ) const;\n _log operator* ( const double b ) const;\n _log operator- ( const double b ) const;\n _log operator/ ( const double b ) const;\n _log operator&lt;&lt; ( const _log &amp;b );\n\n double getValue() const;\n\n bool changeBase( unsigned int base );\n};\n</code></pre>\n<p><strong>You guys are awesome, thank you for your time.</strong></p>\n", "AcceptedAnswerId": "2770987", "Title": "Implementing Operator Overloading with Logarithms in C++", "CreationDate": "2010-05-05T03:02:34.677", "Id": "2770355", "CommentCount": "8", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2010-05-05T04:55:37.410", "LastEditorUserId": "220819", "LastActivityDate": "2010-10-03T21:19:13.453", "Score": "2", "OwnerUserId": "220819", "Tags": "<c++><operator-overloading><logarithm>", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_2770355_2770987_0": {"length": 8, "quality": 0.6666666666666666, "section_id": 6307}}, "n3337": {"so_2770355_2770987_0": {"length": 8, "quality": 0.6666666666666666, "section_id": 6064}}}, "2770737": {"PostTypeId": "2", "Body": "<p>A few ideas:</p>\n<ol>\n<li>Don't name with a leading underscore. Such identifiers are radioactive in C and C++.</li>\n<li>Define operations between logarithms before operations with floats.</li>\n<li><p>Combine #2 with James' suggestion:</p>\n<pre><code>friend logarithm operator+( const logarithm &amp;l, const logarithm &amp;r );\n</code></pre></li>\n<li><p>Define a conversion constructor to generate a <code>logarithm</code> from a float:</p>\n<pre><code>logarithm::logarithm( double f );\n</code></pre>\n<p>Now C++ will convert the <code>double</code> to a <code>logarithm</code> in either <code>1.0 + my_log</code> or <code>my_log + 1.0</code>.</p></li>\n<li>Implement <a href=\"http://en.wikipedia.org/wiki/Natural_logarithm\" rel=\"nofollow noreferrer\">natural logarithms</a> in your class. Don't bother with <code>base</code>.</li>\n<li><p>Define base conversion in terms of a function:</p>\n<pre><code>double alternate_base( double base ) const;\n</code></pre>\n<p>Base conversion is simply dividing the <code>logarithm</code> by the natural log of the alternate base. It is probably most convenient to return the integer and fractional parts together in a single <code>double</code>.</p></li>\n</ol>\n", "LastActivityDate": "2010-05-05T05:04:20.057", "Id": "2770737", "CommentCount": "0", "CreationDate": "2010-05-05T05:04:20.057", "ParentId": "2770355", "Score": "1", "OwnerUserId": "153285"}, "2770987": {"PostTypeId": "2", "Body": "<p>A few things</p>\n<ol>\n<li>Using an _ in the front of your class is a Very Bad Idea (tm). From the c++ standard:</li>\n</ol>\n<blockquote>\n<p id=\"so_2770355_2770987_0\"><strong>17.4.3.2.1 Global names [lib.global.names]</strong>\n  Certain sets of names and function signatures are always reserved to the\n  implementation:</p>\n<ul>\n<li>Each name that contains a double underscore (_ _) or begins with\n  an underscore followed by an uppercase\n  letter (2.11) is reserved to the\n  implementation for any use.</li>\n<li>Each name that begins with an underscore is reserved to the\n  implementation for use as a name in\n  the global namespace.<sup>165</sup></li>\n</ul>\n<p id=\"so_2770355_2770987_1\">165) Such names are also reserved in namespace ::std (17.4.3.1).</p>\n</blockquote>\n<ol start=\"2\">\n<li><p>I'm guessing that you used _log instead of log due to the clash with log() in cmath. It is a Very Bad Idea to keep your own classes in the standard namespace for this very reason. Maybe the next version of the standard will provide a _log or Logarithm class? \nWrap your own class in <code>namespace somename {}</code> and reference it by using <code>somename::Logarithm()</code></p></li>\n<li><p>As others have mentioned already You need to declare your operator overloading as friend. Instead of what you have </p>\n<p><code>log operator+ ( const double b ) const;</code></p>\n<p>change it to</p>\n<pre><code>friend log operator+(const double d, const log&amp; l);\n</code></pre>\n<p>and define the function in the namespace scope.</p></li>\n<li><p>Here is the math for the change of base formula</p>\n<p><img alt=\"Change of base formula\" src=\"https://upload.wikimedia.org/math/5/6/f/56f7df21ad6bc1d3ce9ddff7ac5bb047.png\"/></p></li>\n<li><p>Coefficient in math means the part that is being multiplied by the log. So if you had \nA log_b(x) = y</p>\n<p>A is the coefficient, B is the base, and Y is the result (or some other names)</p></li>\n</ol>\n", "LastActivityDate": "2010-10-03T21:19:13.453", "LastEditorUserId": "-1", "Id": "2770987", "CommentCount": "0", "CreationDate": "2010-05-05T06:15:37.507", "ParentId": "2770355", "Score": "3", "OwnerUserId": "87280", "LastEditDate": "2017-02-08T14:25:12.707"}, "2770369": {"PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_2770355_2770369_0\">My second goal is to be able to perform an operation where the left operand is a double and the right operand is a logarithm object.</p>\n</blockquote>\n<p>To do this, you need to declare the operator as a non-member function at namespace scope (i.e., not in the definition of <code>_log</code>), e.g.,</p>\n<pre><code>_log operator+(const double a, const _log&amp; b);\n</code></pre>\n<p>If you need access to the private members of <code>_log</code>, you can declare it as a friend inside the definition of <code>_log</code>:</p>\n<pre><code>friend _log operator+(const double a, const _log&amp; b);\n</code></pre>\n<p>Note that names starting with an underscore (e.g., <code>_log</code>) are reserved to the implementation in the global namespace; if the underscore is followed by a capital letter or another underscore, it is reserved everywhere.  It would be a good idea to choose a different class name.</p>\n", "LastActivityDate": "2010-05-05T03:07:26.770", "Id": "2770369", "CommentCount": "1", "CreationDate": "2010-05-05T03:07:26.770", "ParentId": "2770355", "Score": "5", "OwnerUserId": "151292"}});