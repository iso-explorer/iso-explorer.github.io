post_cb({"bq_ids": {"n4140": {"so_21655523_21655523_1": {"length": 13, "quality": 0.9285714285714286, "section_id": 6253}, "so_21655523_21655523_0": {"length": 14, "quality": 0.9333333333333333, "section_id": 7026}}, "n3337": {"so_21655523_21655523_1": {"length": 13, "quality": 0.9285714285714286, "section_id": 6013}, "so_21655523_21655523_0": {"length": 14, "quality": 0.9333333333333333, "section_id": 6772}}, "n4659": {"so_21655523_21655523_0": {"length": 14, "quality": 0.9333333333333333, "section_id": 8523}}}, "21655523": {"ViewCount": "244", "Body": "<p>In C++11 3p3 it states:</p>\n<blockquote>\n<p id=\"so_21655523_21655523_0\">An entity is a <strong>value</strong>, <strong>object</strong>, reference, function, enumerator, type, class member, template, template specialization, namespace, parameter pack, or this.</p>\n</blockquote>\n<p>In 17.6.1.1p1 it states:</p>\n<blockquote>\n<p id=\"so_21655523_21655523_1\">The C++ standard library provides definitions for the following types of entities: macros, <strong>values</strong>, types, templates, classes, functions, <strong>objects</strong>.</p>\n</blockquote>\n<p>What is an example of a value that the C++ standard library provides a definition for, that is not an object?, and conversly: What is an example of an object that the C++ standard library provides a definition for, that is not a value?</p>\n", "Title": "C++11 example of a value and an object in the standard library?", "CreationDate": "2014-02-09T05:02:27.003", "LastActivityDate": "2014-02-10T13:15:21.600", "CommentCount": "3", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2014-02-09T18:30:48.907", "LastEditorUserId": "168868", "Id": "21655523", "Score": "5", "OwnerUserId": "1131467", "Tags": "<c++><object><c++11><language-lawyer>", "AnswerCount": "3"}, "21658175": {"Id": "21658175", "PostTypeId": "2", "Body": "<p>The standard iostream objects defined in <strong>27.4.1 [iostreams.objects.overview]</strong> such as <code>cin</code>, , <code>cout</code>, <code>cerr</code> and <code>clog</code> (and their wide character cousins) would be examples of objects defined by the Standard Library. </p>\n<p>Similarly, the <code>std::ios_base::fmtflags</code> type defined in <strong>27.5.3 [ios.base]</strong> has several <code>constexpr</code> values defined (e.g. <code>boolalpha</code>). </p>\n", "LastEditorUserId": "819272", "LastActivityDate": "2014-02-09T11:32:11.273", "Score": "3", "CreationDate": "2014-02-09T10:56:52.283", "ParentId": "21655523", "CommentCount": "3", "OwnerUserId": "819272", "LastEditDate": "2014-02-09T11:32:11.273"}, "21674709": {"Id": "21674709", "PostTypeId": "2", "Body": "<p>The C++ standard does not provide a definition for 'value', relying on its ordinary English meaning. It defines 'object' as a 'region of storage'.</p>\n<p>The C++ standard library provides many values that are not objects. A simple example is NULL. Others include SIZE_MAX, EXIT_SUCCESS and FE_OVERFLOW. You may quibble over whether they are 'defined', since little explanation is provided in the standard.</p>\n<p>The C++ standard library provides few definitions of objects that I can find, in the sense of a name for a 'region of storage'. The only ones I know of (courtesy of a commenter) are the 'standard iostream objects' such as cin and cout.</p>\n<p>Since it includes the C standard library, another obvious one is errno, although even this includes a quibble that 'errno may not be the identifier of an object'.</p>\n<p>The standard libary does provide a large number of functions that return a pointer to an object on execution, new and malloc() being obvious examples. So it defines many dynamic objects, if you like.</p>\n<p>[edited to include iostream objects, new]</p>\n", "LastEditorUserId": "1105562", "LastActivityDate": "2014-02-10T13:15:21.600", "Score": "0", "CreationDate": "2014-02-10T10:32:36.223", "ParentId": "21655523", "CommentCount": "5", "OwnerUserId": "1105562", "LastEditDate": "2014-02-10T13:15:21.600"}, "21655640": {"Id": "21655640", "PostTypeId": "2", "Body": "<p>An object is something that is stored in memory (cf. 1.8: \"An object is a region of storage\"). Every object has a value (which is itself), but values are more general, in the sense that the evaluation of every <em>expression</em> gives a value. For example, a prvalue, such as the value of <code>f()</code> for a declared function <code>T f();</code>, may or may not have storage \u2013 you cannot take its address, and its existence may not need to be manifest as storage. (However, once you bind the value to a reference variable or formal parameter, you now have a way of referring to the object by name.)</p>\n<p>The difference is mainly one of language semantics, though, and not usually of practical importance. (For example, people often refer to \"temporary objects\", although \"temporary value\" would be more accurate.) Values and objects both have types (which are always object types), an object can be evaluated to produce a value, and a value can be treated as an object. I would use \"object\" when talking about the code design, allocations and storage, and \"value\" when talking about grammatical rules of the language.</p>\n", "LastEditorUserId": "596781", "LastActivityDate": "2014-02-09T17:49:33.493", "Score": "3", "CreationDate": "2014-02-09T05:19:49.640", "ParentId": "21655523", "CommentCount": "31", "OwnerUserId": "596781", "LastEditDate": "2014-02-09T17:49:33.493"}});