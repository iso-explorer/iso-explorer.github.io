post_cb({"10304447": {"ParentId": "10304300", "CommentCount": "2", "Body": "<p>C++ always constructs the \u201cfirst\u201d or \u201cmost base\u201d class first. It then walks through the inheritance tree in order and constructs each successive derived class.</p>\n", "OwnerUserId": "1209369", "PostTypeId": "2", "Id": "10304447", "Score": "0", "CreationDate": "2012-04-24T19:09:06.207", "LastActivityDate": "2012-04-24T19:09:06.207"}, "10304523": {"ParentId": "10304300", "PostTypeId": "2", "CommentCount": "8", "Body": "<p>The exact quote from the standard is 12.6.2p10:</p>\n<blockquote>\n<p id=\"so_10304300_10304523_0\">In a non-delegating constructor, initialization proceeds in the following order:</p>\n<p id=\"so_10304300_10304523_1\">\u2014 First, and only for the constructor of the most derived class (1.8), <strong>virtual base classes are initialized in the order they appear on a depth-first left-to-right traversal of the directed acyclic graph of base classes</strong>, where \u201cleft-to-right\u201d is the order of appearance of the base classes in the derived class base-specifier-list.</p>\n<p id=\"so_10304300_10304523_2\">\u2014 Then, direct base classes are initialized in declaration order as they appear in the base-specifier-list (regardless of the order of the mem-initializers).</p>\n<p id=\"so_10304300_10304523_3\">\u2014 Then, non-static data members are initialized in the order they were declared in the class definition (again regardless of the order of the mem-initializers).</p>\n<p id=\"so_10304300_10304523_4\">\u2014 Finally, the compound-statement of the constructor body is executed.</p>\n</blockquote>\n<p>I believe the key is the <em>depth-first left to right</em> in the bolded text. The <code>V1</code> class is a virtual base of <code>X</code> that is to the <em>left</em> of <code>V2</code>, even if it is <em>deeper</em> in the hierarchy.</p>\n<p>The hierarchy graph in your case is like:</p>\n<pre><code>            X\n          /   \\\\\n        D1     D2\n        ||    / \\\\\n        V1  B3   V2\n        |       /  \\\n        B1    B1*   B2\n</code></pre>\n<p>Where single lines identify plain inheritance, and double lines are virtual inheritance. Note that there are two instances of <code>B1</code> in your complete object <code>X</code>. Now if you perform a <em>depth-first left-to-right</em> search you will walk the nodes in the following order:</p>\n<pre><code>[ B1, V1, D1, B3, B1*, B2, V2, D2, X ]\n</code></pre>\n<p>And the virtual bases are <code>V1</code>, <code>V2</code>, <code>D2</code>, which is the order in which they will be constructed. <code>V1</code> requires the construction of <code>B1</code>. <code>V2</code> requires the construction of <code>B1*</code> and <code>B2</code>, <code>D2</code> requires <code>B3</code>, so the order should be:</p>\n<pre><code>[ B1, V1, B1*, B2, V2, B3, D2, D1, X ]\n</code></pre>\n<p>Where <code>B1</code> construction is triggered by <code>V1</code>, <code>B1*</code> and <code>B2</code> must be ordered before <code>V2</code>, <code>B3</code> is triggered as a dependency of <code>D2</code>. At this point all of the virtual bases are built and the non-virtual bases start to be constructed. The only non-virtual base of <code>X</code> that has not been initialized due to the dependencies of the virtual bases is <code>D1</code>.</p>\n<p>If the diamond was closed (say that <code>V1</code> and <code>V2</code> inherited virtually from <code>B1</code>, then there would be only one instance of <code>B1</code> and it would be the first subobject to be constructed.</p>\n", "OwnerUserId": "36565", "LastEditorUserId": "36565", "LastEditDate": "2012-04-24T20:16:20.890", "Id": "10304523", "Score": "3", "CreationDate": "2012-04-24T19:14:42.140", "LastActivityDate": "2012-04-24T20:16:20.890"}, "10304300": {"CommentCount": "2", "AcceptedAnswerId": "10304523", "PostTypeId": "1", "LastEditorUserId": "478288", "CreationDate": "2012-04-24T18:57:23.070", "LastActivityDate": "2012-04-24T20:16:20.890", "LastEditDate": "2012-04-24T19:08:19.833", "ViewCount": "139", "FavoriteCount": "3", "Title": "Behaviour of virtual inheritance in this case", "Id": "10304300", "Score": "1", "Body": "<p>I wrote this program with virtual inheritance and I have a few questions.</p>\n<pre><code>#include&lt;iostream&gt;\nusing namespace std;\n\nclass B1\n{\n public:\n  B1()\n  {\n    cout &lt;&lt; \"In B1 constructor\\n\";\n  }\n};\n\nclass V1 : public B1\n{\n public:\n  V1()\n  {\n    cout &lt;&lt; \"In V1 constructor\\n\";\n  }\n};\n\nclass D1 : virtual public V1\n{\n public:\n  D1()\n  {\n    cout &lt;&lt; \"In D1 constructor\\n\";\n  }\n};\n\nclass B2\n{\n public:\n  B2()\n  {\n    cout &lt;&lt; \"In B2 constructor\\n\";\n  }\n};\n\nclass B3 {\n public:\n  B3()\n  {\n    cout &lt;&lt; \"In B3 constructor\\n\";\n  }\n};\n\nclass V2 : public B1, public B2\n{\n public:\n  V2()\n  {\n    cout &lt;&lt; \"In V2 constructor\\n\";\n  }\n};\n\nclass D2 : public B3, virtual public V2\n{\n public:\n  D2()\n  {\n    cout &lt;&lt; \"In D2 constructor\\n\";\n  }\n};\n\nclass X : public D1, virtual public D2\n{\n public:\n  X()\n  {\n    cout &lt;&lt; \"In X constructor\\n\";\n  }\n};\n\nint main()\n{\n  X x;\n  return 0;\n}\n</code></pre>\n<p>Output of the program:</p>\n<pre><code>In B1 constructor\nIn V1 constructor\nIn B1 constructor\nIn B2 constructor\nIn V2 constructor\nIn B3 constructor\nIn D2 constructor\nIn D1 constructor\nIn X constructor\n</code></pre>\n<p>I expected an output like this:</p>\n<pre><code>In B1 constructor\nIn B2 constructor\nIn V2 constructor\nIn B2 constructor\nIn D2 constructor\nIn B1 constructor\nIn V1 constructor\nIn D1 constructor\nIn X constructor\n</code></pre>\n<p>on the basis that an object of a virtual base class is constructed first and then the other base class object. Can Someone explain this behaviour?</p>\n", "Tags": "<c++><multiple-inheritance>", "OwnerUserId": "1103956", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_10304300_10304523_0": {"section_id": 438, "quality": 1.0, "length": 6}, "so_10304300_10304523_3": {"section_id": 438, "quality": 1.0, "length": 15}, "so_10304300_10304523_1": {"section_id": 438, "quality": 1.0, "length": 29}, "so_10304300_10304523_4": {"section_id": 438, "quality": 1.0, "length": 5}, "so_10304300_10304523_2": {"section_id": 438, "quality": 1.0, "length": 13}}, "n3337": {"so_10304300_10304523_0": {"section_id": 429, "quality": 1.0, "length": 6}, "so_10304300_10304523_3": {"section_id": 429, "quality": 1.0, "length": 15}, "so_10304300_10304523_1": {"section_id": 429, "quality": 1.0, "length": 29}, "so_10304300_10304523_4": {"section_id": 429, "quality": 1.0, "length": 5}, "so_10304300_10304523_2": {"section_id": 429, "quality": 1.0, "length": 13}}, "n4659": {"so_10304300_10304523_0": {"section_id": 458, "quality": 1.0, "length": 6}, "so_10304300_10304523_3": {"section_id": 458, "quality": 1.0, "length": 15}, "so_10304300_10304523_1": {"section_id": 458, "quality": 1.0, "length": 29}, "so_10304300_10304523_4": {"section_id": 458, "quality": 1.0, "length": 5}, "so_10304300_10304523_2": {"section_id": 458, "quality": 1.0, "length": 13}}}});