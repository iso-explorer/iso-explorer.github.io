post_cb({"bq_ids": {"n4140": {"so_5986668_5986678_0": {"length": 13, "quality": 1.0, "section_id": 7151}}, "n3337": {"so_5986668_5986678_0": {"length": 13, "quality": 1.0, "section_id": 6895}}, "n4659": {"so_5986668_5986678_0": {"length": 9, "quality": 0.6923076923076923, "section_id": 4051}}}, "5986678": {"Id": "5986678", "PostTypeId": "2", "Body": "<p>Every global variable is first zero-initialized, before every other initializations happen.<br>\nThis behaviour is described under <code>3.6.2 [basic.start.init] / 2</code>:</br></p>\n<blockquote>\n<p id=\"so_5986668_5986678_0\">Variables with static storage duration or thread storage duration shall be zero-initialized before any other initialization takes place.</p>\n</blockquote>\n<p><sup>(This is from the C++0x FDIS, but I believe the C++98 standard says the same.)</sup></p>\n", "LastEditorUserId": "500104", "LastActivityDate": "2011-05-13T02:36:26.363", "Score": "3", "CreationDate": "2011-05-13T02:30:57.150", "ParentId": "5986668", "CommentCount": "0", "OwnerUserId": "500104", "LastEditDate": "2011-05-13T02:36:26.363"}, "5986688": {"Id": "5986688", "PostTypeId": "2", "Body": "<p>3.6.2/1 says that \"Objects with static storage duration (3.7.1) shall be zero-initialized (8.5) before any other initialization takes place\".</p>\n<p>So you're right, they aren't default-initialized. But they are zero-initialized, which in fact for <code>int</code> is the same thing. For a class type it's not necessarily the same thing.</p>\n<p>That said, I'm not promising the behavior here is merely that the order of initialization is unspecified, and hence that one variable ends up as 10 and the other 20, but unspecified which is which. It might be undefined on some other grounds, but I can't think of any.</p>\n", "LastEditorUserId": "13005", "LastActivityDate": "2011-05-13T02:38:55.457", "Score": "8", "CreationDate": "2011-05-13T02:33:06.873", "ParentId": "5986668", "CommentCount": "0", "OwnerUserId": "13005", "LastEditDate": "2011-05-13T02:38:55.457"}, "5986668": {"ViewCount": "160", "Body": "<p>Lets say that we have two compilation units as follows:</p>\n<pre><code>// a.cpp\nextern int value2;\nint value1 = value2 + 10;\n\n// b.cpp\nextern int value1;\nint value2 = value1 + 10;\n</code></pre>\n<p>When I tried it on VC2010, it initializes <code>value1</code> and <code>value2</code> to zero first. aren't both <code>value1</code> and <code>value2</code> dynamically initialized and default initialization doesn't apply on them?</p>\n<p>Thanks,</p>\n", "AcceptedAnswerId": "5986688", "Title": "Does this code produce Undefined Behavior or it is merely Unspecified Behavior?", "CreationDate": "2011-05-13T02:28:08.520", "Id": "5986668", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2011-05-13T02:38:55.457", "Score": "6", "OwnerUserId": "127893", "Tags": "<c++><undefined-behavior><primitive-types><unspecified-behavior><static-order-fiasco>", "AnswerCount": "2"}});