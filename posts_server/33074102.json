post_cb({"33102480": {"ParentId": "33074102", "CommentCount": "0", "Body": "<p>We simply have a defect, which was reported as <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_active.html#1536\" rel=\"nofollow\">http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_active.html#1536</a> (I just found that, were not aware of that report previously when writing the other answer). </p>\n<p>Going with the interpretation that over.ics.ref is completely initializer list agnostic and is talking about the created temporaries' (the one created by decl.init.list) binding to the reference seems problematic to me. In particular, over.ics.list says that over.ics.ref will delegate to over.ics.list for initiapization of the temporary, indicating that over.ics.ref is active already before creation of the temporary (also there are cases in decl.init.list where no temporary is created). Also <code>{ }</code> to <code>ClassType&amp;</code> should be a user defined conversion but the temporary rvalue will be bound directly by the refefence when considering the conversion isolated from the initializer list argument.</p>\n", "OwnerUserId": "34509", "PostTypeId": "2", "Id": "33102480", "Score": "2", "CreationDate": "2015-10-13T12:16:35.280", "LastActivityDate": "2015-10-13T12:16:35.280"}, "33074102": {"CommentCount": "6", "AcceptedAnswerId": "33102480", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2015-10-12T05:52:45.453", "LastActivityDate": "2015-10-13T12:16:35.280", "LastEditDate": "2017-05-23T11:45:13.613", "ViewCount": "165", "FavoriteCount": "2", "Title": "Overload resolution when an argument is an initializer list and the parameter is a reference", "Id": "33074102", "Score": "4", "Body": "<pre><code>struct A { A(int);};\nstruct B { explicit B(A); B(const B&amp;);};\nB b({0}); \n</code></pre>\n<p>I have asked a question <a href=\"https://stackoverflow.com/questions/33050679/overload-resolution-gets-different-result-between-gcc-and-clang\">Overload resolution gets different result between gcc and clang</a> and @Johannes Schaub - litb explained the rules that are active. But I still have some questions about <strong>13.3.3.1.4 Reference binding</strong>.</p>\n<p>N4527 13.3.3.1.5 [over.ics.list] p1 and p8</p>\n<blockquote>\n<p id=\"so_33074102_33074102_0\">1 When an <strong>argument</strong> is an initializer list (8.5.4), <strong>it is not an expression</strong> and special rules apply for converting\n  it to a parameter type.</p>\n<p id=\"so_33074102_33074102_1\">8 Otherwise, if the parameter is a reference, see 13.3.3.1.4.</p>\n</blockquote>\n<p>13.3.3.1.4 [over.ics.ref] p1 and p2</p>\n<blockquote>\n<p id=\"so_33074102_33074102_2\">1 When a parameter of reference type <strong>binds directly</strong> (8.5.3) to an <strong>argument expression</strong>, the implicit conversion\n  sequence is the identity conversion, unless the argument expression has a type that is a derived class of the\n  parameter type, in which case the implicit conversion sequence is a derived-to-base Conversion (13.3.3.1). [ Example... ]</p>\n<p id=\"so_33074102_33074102_3\">If the parameter binds directly to the result of applying a conversion function to the\n  argument expression, the implicit conversion sequence is a user-defined conversion sequence (13.3.3.1.2),\n  with the second standard conversion sequence either an identity conversion or, if the conversion function\n  returns an entity of a type that is a derived class of the parameter type, a derived-to-base Conversion.</p>\n<p id=\"so_33074102_33074102_4\">2 When a parameter of reference type is <strong>not bound directly</strong> to an <strong>argument expression</strong>, the conversion sequence\n  is the one required to convert the argument expression to the underlying type of the reference according\n  to 13.3.3.1. Conceptually, this conversion sequence corresponds to copy-initializing a temporary of the\n  underlying type with the argument expression. Any difference in top-level cv-qualification is subsumed by\n  the initialization itself and does not constitute a conversion.</p>\n</blockquote>\n<p><strong>Question 1</strong>: Does \"argument expression\" include \"initializer list\"? See 13.3.3.1.5 [over.ics.list] p1 bold phrase above and </p>\n<p>1.3.2 [defns.argument]</p>\n<blockquote>\n<p id=\"so_33074102_33074102_5\">argument</p>\n<p id=\"so_33074102_33074102_6\">&lt;function call expression&gt; expression in the comma-separated list bounded by the parentheses (5.2.2)</p>\n</blockquote>\n<hr>\n<hr>\n<p>8.5 [dcl.init] p17</p>\n<blockquote>\n<p id=\"so_33074102_33074102_7\">17 The semantics of initializers are as follows. The destination type is the type of the object or reference being\n  initialized and the source type is the type of the initializer expression. If the initializer is not a single (possibly\n  parenthesized) expression, the source type is not defined.</p>\n<blockquote>\n<p id=\"so_33074102_33074102_10\">(17.1) \u2014 If the initializer is a (non-parenthesized) braced-init-list, the object or reference is list-initialized (8.5.4).</p>\n<p id=\"so_33074102_33074102_11\">(17.2) \u2014 If the destination type is a reference type, see 8.5.3.</p>\n</blockquote>\n</blockquote>\n<p>8.5.3 [dcl.init.ref] p5</p>\n<blockquote>\n<p id=\"so_33074102_33074102_12\">A reference to type \u201ccv1 T1\u201d is initialized by an expression of type \u201ccv2 T2\u201d as follows:</p>\n<blockquote>\n<p id=\"so_33074102_33074102_17\">[...]</p>\n<p id=\"so_33074102_33074102_18\">(5.2.2.2) \u2014 Otherwise, a temporary of type \u201ccv1 T1\u201d is created and copy-initialized (8.5) from the initializer\n    expression. The reference is then bound to the temporary.</p>\n<p id=\"so_33074102_33074102_19\">[...]</p>\n</blockquote>\n<p id=\"so_33074102_33074102_16\">In all cases except the last (i.e., creating and initializing a temporary from the initializer expression), the\n  reference is said to <strong>bind directly</strong> to the initializer expression.</p>\n</blockquote>\n<p><strong>Question 2</strong>: Does the \"bind directly\" include the case in which the initializer is an initializer list? In other words, can we use \"bind directly\" when the initializer is an initializer list?</p>\n<p>NOTE: \"bind directly\" is definition in 8.5.3 which is quoted by 8.5 p17.1 and \"initializer is a braced-init-list\" is definition in 8.5.4 which is quoted by 8.5 p17.2</p>\n<pre><code>//case 5.2.1.2\nstruct X{};\n\nstruct Y{Y(X);};\nconst Y&amp; y1 = X();     // bind directly\nconst Y&amp; y2 = {X()};   // bind directly or not?\n\nstruct Z{operator X();};\nconst X&amp; x1 = Z();     // bind directly\nconst X&amp; x2 = {Z()};   // bind directly or not?\n\n//case 5.2.2.1\nstruct A{operator int();};\nconst int&amp; a1 = A();   // bind directly\nconst int&amp; a2 = {A()}; // bind directly or not?\n\nstruct B{B(int);};\nconst B&amp; b1 = 1;       // bind directly\nconst B&amp; b2 = {1};     // bind directly or not?\n\n//csse 5.2.2.2\nint i3 = 2;\ndouble&amp;&amp; rrd3 = i3;    // not bind directly\n\nstruct A { A(int);};\nstruct B { explicit B(A); B(const B&amp;);};\nB b({0}); // when overload resolution choose B(const B&amp;) as a candidate,\n          // {0} -&gt; constB&amp; bind directly or not? \n</code></pre>\n<hr>\n<hr>\n<p><strong>Question 3</strong>(the main question):</p>\n<p>when an argument is an initializer list and the parameter is a reference, 13.3.3.1.5 [over.ics.list] p8 quotes to 13.3.3.1.4 [over.ics.ref], but I can't see any words about argument which is an initializer list. I think the definition of \"bind directly\" and \"argument\" is not related with \"initializer list\". </p>\n<p>Can you explain how overload resolution work when an argument is an initializer list and the parameter is a reference?</p>\n<p>NOTE: These three questions are <strong>related</strong>. When you answer the third question, you will answer the first and second.</p>\n<pre><code>struct A { A(int);};\nstruct B { explicit B(A); B(const B&amp;);};\nB b1(0); //when overload resolution choose B(const B&amp;) as a candidate,\n         //0 -&gt; const B&amp; binds directly\n         //13.3.3.1.4 [over.ics.ref] p1 \"If the parameter binds directly...\"\nA a;\nB b2(a)  //when overload resolution choose B(const B&amp;) as a candidate,\n         //a -&gt; const B&amp; binds directly\n         //13.3.3.1.4 [over.ics.ref] p1 \"If the parameter binds directly...\"\nB b3({0})//when overload resolution choose B(const B&amp;) as a candidate,\n         //{0} -&gt; const B&amp; binds directly or not?\n         //if it is not bound directly, 13.3.3.1.4 [over.ics.ref] p2\nB b3({a})//when overload resolution choose B(const B&amp;) as a candidate,\n         //{a} -&gt; const B&amp; binds directly or not?\n         //if it is not bound directly, 13.3.3.1.4 [over.ics.ref] p2\n</code></pre>\n</hr></hr></hr></hr>", "Tags": "<c++><c++11><language-lawyer><overload-resolution><list-initialization>", "OwnerUserId": "4958516", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_33074102_33074102_3": {"section_id": 625, "quality": 0.9696969696969697, "length": 32}, "so_33074102_33074102_14": {"section_id": 3321, "quality": 0.7857142857142857, "length": 11}, "so_33074102_33074102_7": {"section_id": 3296, "quality": 0.84, "length": 21}, "so_33074102_33074102_4": {"section_id": 626, "quality": 0.95, "length": 38}, "so_33074102_33074102_6": {"section_id": 5768, "quality": 0.8888888888888888, "length": 8}, "so_33074102_33074102_8": {"section_id": 3296, "quality": 0.75, "length": 6}, "so_33074102_33074102_1": {"section_id": 634, "quality": 0.8, "length": 4}, "so_33074102_33074102_12": {"section_id": 3321, "quality": 0.75, "length": 6}, "so_33074102_33074102_2": {"section_id": 625, "quality": 0.896551724137931, "length": 26}, "so_33074102_33074102_16": {"section_id": 3321, "quality": 0.9333333333333333, "length": 14}, "so_33074102_33074102_0": {"section_id": 629, "quality": 0.9166666666666666, "length": 11}, "so_33074102_33074102_11": {"section_id": 3296, "quality": 0.7142857142857143, "length": 5}, "so_33074102_33074102_18": {"section_id": 3321, "quality": 0.7857142857142857, "length": 11}, "so_33074102_33074102_9": {"section_id": 3296, "quality": 0.7142857142857143, "length": 5}, "so_33074102_33074102_10": {"section_id": 3296, "quality": 0.75, "length": 6}}, "n3337": {"so_33074102_33074102_16": {"section_id": 3191, "quality": 0.9333333333333333, "length": 14}, "so_33074102_33074102_14": {"section_id": 3191, "quality": 0.7142857142857143, "length": 10}, "so_33074102_33074102_7": {"section_id": 3166, "quality": 0.84, "length": 21}, "so_33074102_33074102_3": {"section_id": 615, "quality": 0.9696969696969697, "length": 32}, "so_33074102_33074102_6": {"section_id": 5541, "quality": 0.8888888888888888, "length": 8}, "so_33074102_33074102_4": {"section_id": 616, "quality": 0.95, "length": 38}, "so_33074102_33074102_1": {"section_id": 624, "quality": 0.8, "length": 4}, "so_33074102_33074102_12": {"section_id": 3191, "quality": 0.75, "length": 6}, "so_33074102_33074102_2": {"section_id": 615, "quality": 0.896551724137931, "length": 26}, "so_33074102_33074102_0": {"section_id": 620, "quality": 0.9166666666666666, "length": 11}, "so_33074102_33074102_8": {"section_id": 3166, "quality": 0.75, "length": 6}, "so_33074102_33074102_11": {"section_id": 3166, "quality": 0.7142857142857143, "length": 5}, "so_33074102_33074102_18": {"section_id": 3191, "quality": 0.7142857142857143, "length": 10}, "so_33074102_33074102_9": {"section_id": 3166, "quality": 0.7142857142857143, "length": 5}, "so_33074102_33074102_10": {"section_id": 3166, "quality": 0.75, "length": 6}}, "n4659": {"so_33074102_33074102_3": {"section_id": 651, "quality": 0.9696969696969697, "length": 32}, "so_33074102_33074102_7": {"section_id": 4058, "quality": 0.84, "length": 21}, "so_33074102_33074102_4": {"section_id": 652, "quality": 0.875, "length": 35}, "so_33074102_33074102_6": {"section_id": 7225, "quality": 0.7777777777777778, "length": 7}, "so_33074102_33074102_8": {"section_id": 4058, "quality": 0.75, "length": 6}, "so_33074102_33074102_1": {"section_id": 662, "quality": 0.8, "length": 4}, "so_33074102_33074102_12": {"section_id": 4087, "quality": 0.75, "length": 6}, "so_33074102_33074102_2": {"section_id": 651, "quality": 0.896551724137931, "length": 26}, "so_33074102_33074102_16": {"section_id": 4087, "quality": 0.7333333333333333, "length": 11}, "so_33074102_33074102_0": {"section_id": 655, "quality": 0.9166666666666666, "length": 11}, "so_33074102_33074102_11": {"section_id": 4058, "quality": 0.7142857142857143, "length": 5}, "so_33074102_33074102_9": {"section_id": 4058, "quality": 0.7142857142857143, "length": 5}, "so_33074102_33074102_10": {"section_id": 4058, "quality": 0.75, "length": 6}}}});