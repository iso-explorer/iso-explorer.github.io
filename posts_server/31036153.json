post_cb({"31036258": {"Id": "31036258", "PostTypeId": "2", "Body": "<p>From [lex.nullptr]:</p>\n<blockquote>\n<p id=\"so_31036153_31036258_0\"><strong>Pointer Literals</strong></p>\n<p id=\"so_31036153_31036258_1\"><em>pointer-literal</em>:<br>\n  \u00a0\u00a0\u00a0\u00a0\u00a0<code>nullptr</code> </br></p>\n<p id=\"so_31036153_31036258_2\">The pointer literal is the keyword <code>nullptr</code>. It is a prvalue of type <code>std::nullptr_t</code>. [ Note: <code>std::nullptr_t</code>\n  is a distinct type that is neither a pointer type nor a pointer to member type; rather, a prvalue of this type is\n  a null pointer constant and can be converted to a null pointer value or null member pointer value. See 4.10\n  and 4.11. \u2014end note ]</p>\n</blockquote>\n<p>So use <code>nullptr</code> when you need a pointer literal, and <code>std::nullptr_t</code> in a context when you need to take that type. The latter, for instance, if you're making a function or constructor or something that can take a <code>nullptr</code> as an argument. </p>\n", "LastEditorUserId": "2069064", "LastActivityDate": "2015-06-24T20:34:46.963", "Score": "2", "CreationDate": "2015-06-24T20:22:52.620", "ParentId": "31036153", "CommentCount": "0", "OwnerUserId": "2069064", "LastEditDate": "2015-06-24T20:34:46.963"}, "31036180": {"Id": "31036180", "PostTypeId": "2", "Body": "<p><code>nullptr</code> is the constant, <code>nullptr_t</code> is its type. Use each one in contexts where you need respectively a null pointer, or the type of a null pointer.</p>\n", "LastActivityDate": "2015-06-24T20:18:33.600", "CommentCount": "0", "CreationDate": "2015-06-24T20:18:33.600", "ParentId": "31036153", "Score": "13", "OwnerUserId": "3233393"}, "31036270": {"Body": "<blockquote>\n<p id=\"so_31036153_31036270_0\"><em>\"... if I use one over the other?\"</em></p>\n</blockquote>\n<p>You can't (<em>use one over the other</em>) they're orthogonal by these means:</p>\n<p><code>nullptr_t</code> is the <strong>type</strong> used to represent a <code>nullptr</code></p>\n<p><code>nullptr</code> is <sup>(1)</sup>effectively a <strong>constant</strong> of type <code>nullptr_t</code> that represents a specific compiler implementation defined value.</p>\n<p>See the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3376.pdf\" rel=\"nofollow\">C++11 standards</a> section:</p>\n<blockquote>\n<p id=\"so_31036153_31036270_1\"><h3>2.14.7 Pointer literals</h3></p>\n<ol>\n<li>The pointer literal is the keyword <code>nullptr</code>. It is a prvalue of type <code>std::nullptr_t</code>.<br>\n  [ Note: <code>std::nullptr_t</code>\n  is a distinct type that is neither a pointer type nor a pointer to member type; rather, a prvalue of this type is a null pointer constant and can be converted to a null pointer value or null member pointer value. See 4.10\n  and 4.11. \u2014 end note ]</br></li>\n</ol>\n</blockquote>\n<hr>\n<p><sup>\n<sup>1)</sup> Just like the <code>this</code> keyword <code>nullptr</code> stands for an rvalue rather than being of <code>const</code> type. Thus, <code>decltype(nullptr)</code> can be a non-<code>const</code> type. With Visual C++ 2015 and MinGW g++ 5.1 it is non-<code>const</code>.\n</sup></p>\n</hr>", "CreationDate": "2015-06-24T20:23:23.210", "ParentId": "31036153", "CommentCount": "0", "LastEditDate": "2015-06-24T20:39:53.477", "Id": "31036270", "PostTypeId": "2", "LastActivityDate": "2015-06-24T20:39:53.477", "LastEditorUserId": "464581", "CommunityOwnedDate": "2015-06-24T20:36:03.530", "Score": "3", "OwnerUserId": "1413395"}, "31036187": {"Id": "31036187", "PostTypeId": "2", "Body": "<p>If you try this</p>\n<pre><code>cout &lt;&lt; typeid(nullptr).name() &lt;&lt; endl;\n</code></pre>\n<p>you will see that nullptr is of type std::nullptr_t.</p>\n", "LastActivityDate": "2015-06-24T20:18:50.160", "CommentCount": "0", "CreationDate": "2015-06-24T20:18:50.160", "ParentId": "31036153", "Score": "1", "OwnerUserId": "4461183"}, "bq_ids": {"n4140": {"so_31036153_31036258_2": {"length": 33, "quality": 0.8461538461538461, "section_id": 5366}}, "n3337": {"so_31036153_31036258_2": {"length": 33, "quality": 0.8461538461538461, "section_id": 5162}}, "n4659": {"so_31036153_31036258_2": {"length": 33, "quality": 0.8461538461538461, "section_id": 6791}}}, "31036277": {"Id": "31036277", "PostTypeId": "2", "Body": "<p>In exactly the same way that <code>true</code> is a C++ keyword literal of type <code>bool</code>, <code>nullptr</code> is a C++ keyword literal of type <code>std::nullptr_t</code>.</p>\n", "LastActivityDate": "2015-06-24T20:23:42.103", "CommentCount": "0", "CreationDate": "2015-06-24T20:23:42.103", "ParentId": "31036153", "Score": "2", "OwnerUserId": "821114"}, "31036203": {"Id": "31036203", "PostTypeId": "2", "Body": "<p><code>nullptr</code> is a pointer literal of type <code>std::nullptr_t</code>. \nAnd moreover <code>nullptr</code> is also a keyword of the C++ the same way as boolean literals false and true.:)</p>\n", "LastActivityDate": "2015-06-24T20:19:48.240", "CommentCount": "0", "CreationDate": "2015-06-24T20:19:48.240", "ParentId": "31036153", "Score": "2", "OwnerUserId": "2877241"}, "31036153": {"ViewCount": "2012", "Body": "<p>Which one should I use? Any advantages if I use one over the other? </p>\n", "AcceptedAnswerId": "31036180", "Title": "What is the difference between nullptr and nullptr_t in C++?", "CreationDate": "2015-06-24T20:16:58.203", "Id": "31036153", "CommentCount": "3", "LastEditDate": "2015-06-24T20:25:05.260", "PostTypeId": "1", "LastEditorUserId": "2069064", "LastActivityDate": "2015-06-24T20:39:53.477", "Score": "3", "OwnerUserId": "1582350", "Tags": "<c++><c++11><nullptr>", "AnswerCount": "7"}, "31036178": {"Id": "31036178", "PostTypeId": "2", "Body": "<p><code>nullptr</code> is of type <code>nullptr_t</code>.</p>\n", "LastActivityDate": "2015-06-24T20:18:33.450", "CommentCount": "0", "CreationDate": "2015-06-24T20:18:33.450", "ParentId": "31036153", "Score": "4", "OwnerUserId": "5044950"}});