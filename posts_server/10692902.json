post_cb({"10693046": {"ParentId": "10692902", "CommentCount": "1", "Body": "<p>As far as integer addition in java is concerned, overflow behaviour is defined by <a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.18.2\" rel=\"nofollow\">JLS #15.18.2</a>:</p>\n<blockquote>\n<p id=\"so_10692902_10693046_0\">If an integer addition overflows, then the result is the low-order bits of the mathematical sum as represented in some sufficiently large two's-complement format. If overflow occurs, then the sign of the result is not the same as the sign of the mathematical sum of the two operand values.</p>\n</blockquote>\n", "OwnerUserId": "829571", "PostTypeId": "2", "Id": "10693046", "Score": "0", "CreationDate": "2012-05-21T21:42:35.267", "LastActivityDate": "2012-05-21T21:42:35.267"}, "10692902": {"CommentCount": "7", "ViewCount": "135", "PostTypeId": "1", "ClosedDate": "2012-05-21T21:41:36.780", "LastEditorUserId": "829571", "CreationDate": "2012-05-21T21:29:40.677", "LastActivityDate": "2012-05-22T08:48:14.057", "Title": "Overflow in C++ and Java", "AcceptedAnswerId": "10693000", "LastEditDate": "2012-05-22T08:48:14.057", "Id": "10692902", "Score": "1", "Body": "<p>What does C++ do with overflow?\nWhat does Java do with overflow?</p>\n<p>When C++ has a overflow error, i think it goes to the smallest possible number and adds from there, but I'm not exactly sure. I don't know how java handles this problem? </p>\n", "Tags": "<java><c++><overflow>", "OwnerUserId": "1251302", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_10692902_10693000_0": {"section_id": 5937, "quality": 0.926829268292683, "length": 38}}, "n3337": {"so_10692902_10693000_0": {"section_id": 5709, "quality": 0.926829268292683, "length": 38}}, "n4659": {"so_10692902_10693000_0": {"section_id": 7421, "quality": 0.7073170731707317, "length": 29}}}, "10693000": {"ParentId": "10692902", "PostTypeId": "2", "CommentCount": "11", "Body": "<p>In n3242 of the C++ standard</p>\n<h2>5 Expressions [expr]</h2>\n<h3>Paragraph 5.4:</h3>\n<blockquote>\n<p id=\"so_10692902_10693000_0\">If during the evaluation of an expression, the result is not mathematically defined or not in the range of representable values for its type, <strong>the behavior is undefined</strong>. [ Note: most existing implementations of C++ ignore integer overflows. Treatment of division by zero, forming a remainder using a zero divisor, and all floating point exceptions vary among machines, and is usually adjustable by a library function. \u2014end note ]\"</p>\n</blockquote>\n<p>From OP</p>\n<blockquote>\n<p id=\"so_10692902_10693000_1\">When C++ has a overflow error, i think it goes to the smallest possible number and adds from there</p>\n</blockquote>\n<p>No. It just seems like that sometimes.</p>\n", "OwnerUserId": "491591", "LastEditorUserId": "14065", "LastEditDate": "2012-05-21T21:39:27.293", "Id": "10693000", "Score": "0", "CreationDate": "2012-05-21T21:37:28.907", "LastActivityDate": "2012-05-21T21:39:27.293"}});