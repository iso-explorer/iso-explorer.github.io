post_cb({"12707586": {"ParentId": "12707444", "CommentCount": "0", "Body": "<p>The answer in the body of the question \"\"<strong>When a vector is resized to accommodate</strong> more (or <strong>fewer</strong>) <strong>elements, all of its elements may be moved to new locations</strong>.\"\"</p>\n", "OwnerUserId": "135960", "PostTypeId": "2", "Id": "12707586", "Score": "0", "CreationDate": "2012-10-03T11:31:09.890", "LastActivityDate": "2012-10-03T11:31:09.890"}, "12707588": {"CommentCount": "4", "CreationDate": "2012-10-03T11:31:36.737", "CommunityOwnedDate": "2012-10-03T15:24:10.040", "LastEditorUserId": "-1", "LastActivityDate": "2012-10-03T15:24:10.040", "ParentId": "12707444", "PostTypeId": "2", "LastEditDate": "2017-05-23T11:56:17.610", "Id": "12707588", "Score": "4", "Body": "<p><strong>Case 1:</strong> If the new size being requested is greater than the current <code>std::vector::capacity()</code> then all elements will be relocated.<br>\n<strong>Case 2:</strong> If the new size being requested is lesser than the current <code>std::vector::capacity()</code> then there will be no relocation of elements.       </br></p>\n<hr>\n<p><strong>Standerdese Evidence:</strong></p>\n<p>The standard defines effect of <code>vector::resize()</code> as:     </p>\n<p><strong>C++11 Standard 23.3.6.3/12 vector capacity:</strong></p>\n<pre><code>void resize(size_type sz, const T&amp; c);\n</code></pre>\n<p><strong>Effect:</strong> </p>\n<pre><code>if (sz &gt; size())\n     insert(end(), sz-size(), c);\nelse if (sz &lt; size())\n    erase(begin()+sz, end());\nelse\n; // do nothing\n</code></pre>\n<p>As <a href=\"https://stackoverflow.com/users/36565/david-rodriguez-dribeas\">@DavidRodr\u00edguez-dribeas</a> correctly points out, Iterator invalidation rules for <code>std::vector::insert()</code> operation are: </p>\n<blockquote>\n<p id=\"so_12707444_12707588_0\"><strong>23.3.6.5 vector modifiers</strong></p>\n<p id=\"so_12707444_12707588_1\">1 [insert,push_back,emplace,emplace_back]</p>\n<p id=\"so_12707444_12707588_2\">Remarks: Causes reallocation <strong>if the new size is greater than the old capacity</strong>. If no reallocation happens, all the iterators and references before the insertion point remain valid.</p>\n</blockquote>\n<p>Essentially this means:\nAll iterators and references before the point of insertion will be unaffected, unless the new container size is greater than the previous capacity because in such a scenario all elements might be moved to new locations thus invalidating pointers/iterators to original location.Since <strong><code>resize()</code> only erases/inserts elements at the end of the container</strong><sup>[Note 1]</sup>.The governing factor boils down to size being requested as against current capacity.</p>\n<p>Hence the Case 1 result.</p>\n<p>In <strong>Case 2</strong> <code>std::vector::erase()</code> will be called and the invalidation rule in this case is:</p>\n<blockquote>\n<p id=\"so_12707444_12707588_3\"><strong>23.3.6.5 vector modifiers</strong></p>\n<p id=\"so_12707444_12707588_4\">iterator erase(const_iterator position);</p>\n<p id=\"so_12707444_12707588_5\">3 Effects: Invalidates iterators and references <strong>at or after</strong> the point of the erase.</p>\n</blockquote>\n<p>Since <sup>[Note 1]</sup>, elements will be only removed at end and there is no need of relocation of all elements.</p>\n</hr>", "OwnerUserId": "452307"}, "12707475": {"ParentId": "12707444", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_12707444_12707475_0\">...elements may be moved to new locations.\"</p>\n</blockquote>\n<p>Notice how it says <strong>may be moved</strong>.  So that would imply that it <em>depends</em> what what kind of a resize it is.</p>\n", "OwnerUserId": "174614", "PostTypeId": "2", "Id": "12707475", "Score": "1", "CreationDate": "2012-10-03T11:23:49.497", "LastActivityDate": "2012-10-03T11:23:49.497"}, "12709211": {"ParentId": "12707444", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>Iterators in a vector are invalidated for two reasons. An element is inserted/removed before the location of the iterator (1) or the whole buffer is relocated (2) if the vector needs to grow it's capacity. The key here is a change to the <code>capacity()</code>.</p>\n<p>Because <code>resize()</code> only inserts/removes from the end of the container. When the vector shrinks only those iterators referring to the elements being removed become invalidated. When the vector grows no iterator will become invalid if the new size is smaller than <code>capacity()</code>, and all iterators will be invalidated if the new size is larger.</p>\n<p>Since Als provided incorrect <em>evidence</em><sup>1</sup>, I am adding here the correct quotes:</p>\n<blockquote>\n<p id=\"so_12707444_12709211_0\"><strong>23.3.6.5 vector modifiers</strong></p>\n<p id=\"so_12707444_12709211_1\">1 [insert,push_back,emplace,emplace_back]</p>\n<p id=\"so_12707444_12709211_2\">Remarks: Causes reallocation <strong>if the new size is greater than the old capacity</strong>. If no reallocation happens, all the iterators and references before the insertion point remain valid.</p>\n<p id=\"so_12707444_12709211_3\">2 [erase]</p>\n<p id=\"so_12707444_12709211_4\">Effects: Invalidates iterators and references <strong>at or after</strong> the point of the erase.</p>\n</blockquote>\n<p>Similar quotes can be found in C++03.</p>\n<hr>\n<p><sup>1</sup> Avoiding to duplicate the quote that dictates the equivalence of <code>resize</code> to either insert or erase. Which is right.</p>\n</hr>", "OwnerUserId": "36565", "LastEditorUserId": "36565", "LastEditDate": "2012-10-03T13:14:21.447", "Id": "12709211", "Score": "1", "CreationDate": "2012-10-03T13:08:58.830", "LastActivityDate": "2012-10-03T13:14:21.447"}, "bq_ids": {"n4140": {"so_12707444_12709211_2": {"section_id": 986, "quality": 0.9473684210526315, "length": 18}, "so_12707444_12707588_5": {"section_id": 988, "quality": 0.8571428571428571, "length": 6}, "so_12707444_12709211_4": {"section_id": 988, "quality": 0.8571428571428571, "length": 6}, "so_12707444_12707588_2": {"section_id": 986, "quality": 0.9473684210526315, "length": 18}}, "n3337": {"so_12707444_12709211_2": {"section_id": 971, "quality": 0.9473684210526315, "length": 18}, "so_12707444_12707588_5": {"section_id": 973, "quality": 0.8571428571428571, "length": 6}, "so_12707444_12709211_4": {"section_id": 973, "quality": 0.8571428571428571, "length": 6}, "so_12707444_12707588_2": {"section_id": 971, "quality": 0.9473684210526315, "length": 18}}, "n4659": {"so_12707444_12709211_2": {"section_id": 1049, "quality": 0.9473684210526315, "length": 18}, "so_12707444_12707588_5": {"section_id": 1051, "quality": 0.8571428571428571, "length": 6}, "so_12707444_12709211_4": {"section_id": 1051, "quality": 0.8571428571428571, "length": 6}, "so_12707444_12707588_2": {"section_id": 1049, "quality": 0.9473684210526315, "length": 18}}}, "12707444": {"CommentCount": "1", "ViewCount": "359", "CreationDate": "2012-10-03T11:22:07.723", "LastActivityDate": "2012-10-03T15:24:10.040", "Title": "Space reallocated in vector::resize() when resized to lower count?", "AcceptedAnswerId": "12707588", "PostTypeId": "1", "Id": "12707444", "Score": "2", "Body": "<p>According to <strong>Stroustrup : The C++ programming language</strong> :-</p>\n<p>\"When a <strong><em>vector</em></strong> is resized to accommodate more (or fewer) elements, all of its elements may be\nmoved to new locations.\"</p>\n<p>Is this holds true, even if the vector is re-sized to smaller size ?</p>\n", "Tags": "<c++><stl><vector>", "OwnerUserId": "1500588", "AnswerCount": "4"}});