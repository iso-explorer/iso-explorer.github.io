post_cb({"12415039": {"ParentId": "12414804", "CommentCount": "0", "CreationDate": "2012-09-13T21:27:03.453", "OwnerUserId": "1110687", "PostTypeId": "2", "Id": "12415039", "Score": "0", "Body": "<p>Nitpick. From the 2003 C++ Standard,</p>\n<blockquote>\n<p id=\"so_12414804_12415039_0\">17.4.3.2.1 Global names -  ...\n  - Each name that begins with an underscore is reserved to the implementation for use as a name in the global namespace</p>\n</blockquote>\n<p>I would tell you that it's poor practice to start any variable name with _. Especially as you may extend that practice into named variable arguments (int foo(int _a)), or do it with camelcase without thinking (int _MyVar). I personally do things like</p>\n<pre><code>int a_;\n</code></pre>\n<p>Will you ever actually have trouble? Probably not. But it's good practice not to start your anything with an underscore. Never with two underscores anywhere in the name, or started by an underscore followed by an uppercase letter, of course, too.</p>\n", "LastActivityDate": "2012-09-13T21:27:03.453"}, "12415383": {"ParentId": "12414804", "CommentCount": "0", "CreationDate": "2012-09-13T21:59:27.263", "OwnerUserId": "1553090", "PostTypeId": "2", "Id": "12415383", "Score": "0", "Body": "<p>I'm not really providing an answer here, but it's useful information all the same...  There are times when you really don't want to allow <code>someFunc(5)</code> to work, because it might lead to incorrect operation, or simply be misleading.  In such cases you can declare the constructor as <code>explicit</code>:</p>\n<pre><code>class A\n{\npublic:\n    A() {}   // Are you sure you don't want to initialise _a here?\n\n    explicit A(int a) :_a(a) {}\n\n    int _a;\n};\n</code></pre>\n<p>And as others have already said you can specify a default parameter for <code>someFunc</code>:</p>\n<pre><code>void someFunc( A a = A() );\n</code></pre>\n<p>Now:</p>\n<pre><code>someFunc();     // Calls A() by default\n\nsomeFunc(5);    // Not allowed because of implicit construction\n\nsomeFunc(A(5)); // Caller must pass an instance of A\n</code></pre>\n", "LastActivityDate": "2012-09-13T21:59:27.263"}, "12414804": {"CommentCount": "1", "ViewCount": "145", "PostTypeId": "1", "LastEditorUserId": "8747", "CreationDate": "2012-09-13T21:07:21.120", "LastActivityDate": "2012-09-13T21:59:27.263", "Title": "C++ Function parameters create Classes", "AcceptedAnswerId": "12414835", "LastEditDate": "2012-09-13T21:12:30.067", "Id": "12414804", "Score": "3", "Body": "<p>Say i have the following class :</p>\n<pre><code>class A\n{\npublic:\n    A() {\n    }\n\n    A(int a):_a(a){\n    }\n\n    int _a;\n};\n</code></pre>\n<p>And the following function :</p>\n<pre><code>void someFunc (A a)\n{\n    cout &lt;&lt; a._a;\n}\n</code></pre>\n<p>So the following line in the program works fine :</p>\n<pre><code>someFunc (5); // Calls A(int a) Constructor.\n</code></pre>\n<p>But the following does not :</p>\n<pre><code>someFunc(); //Compile error\n</code></pre>\n<p>One can expect that if it can build A when getting an integer,\nwhy not build one using the default constructor as well, when called with no arguments?</p>\n", "Tags": "<c++>", "OwnerUserId": "1531979", "AnswerCount": "5"}, "12414828": {"ParentId": "12414804", "CommentCount": "0", "CreationDate": "2012-09-13T21:09:45.807", "OwnerUserId": "501250", "PostTypeId": "2", "Id": "12414828", "Score": "3", "Body": "<p>Because you didn't call the function with an argument that turned out to be convertible, you called the function with <em>no arguments</em>.  That's a different overload, one you haven't provided.</p>\n<p>Consider these options:</p>\n<ul>\n<li>Call the function like this: <code>someFunc(A())</code>.</li>\n<li>Define a default value for the function parameter: <code>void someFunc (A a = A()) { ... }</code>.</li>\n<li>Provide the no-argument overload: <code>void someFunc() { someFunc(A()); }</code></li>\n</ul>\n", "LastActivityDate": "2012-09-13T21:09:45.807"}, "12414835": {"ParentId": "12414804", "CommentCount": "0", "CreationDate": "2012-09-13T21:10:09.787", "OwnerUserId": "335858", "PostTypeId": "2", "Id": "12414835", "Score": "1", "Body": "<p>This is because the signature of <code>someFunc()</code> does not match that of <code>void someFunc (A a)</code>.</p>\n<p>According to C++ standard, Section 13.3.2.3:</p>\n<blockquote id=\"so_12414804_12414835_0\">\n<ul>\n<li>First, to be a viable function, a candidate function shall have enough parameters to agree in number with the arguments in the list.</li>\n<li>A candidate function having more than m parameters is viable only if the (m+1)-st parameter has a default argument</li>\n</ul>\n</blockquote>\n<p>None of this applies in this case, so <code>void someFunc (A a)</code> is not considered <em>viable</em> for the invocation with an empty parameter list.</p>\n", "LastActivityDate": "2012-09-13T21:10:09.787"}, "12414818": {"ParentId": "12414804", "CommentCount": "0", "CreationDate": "2012-09-13T21:08:55.857", "OwnerUserId": "1053", "PostTypeId": "2", "Id": "12414818", "Score": "6", "Body": "<p>Because <code>someFunc()</code> requires an argument and you have not provided an overload which does not.  An implicit conversion from <code>int</code> to <code>A</code> exists, but that doesn't mean you can just ignore the function's signature and call it with no arguments.  If you would like to call it with no arguments them assign a default value to <code>a</code>.</p>\n<pre><code>void someFunc(A a = A()) { \n    /* stuff */\n}\n</code></pre>\n", "LastActivityDate": "2012-09-13T21:08:55.857"}, "bq_ids": {"n4140": {"so_12414804_12414835_0": {"section_id": 601, "quality": 0.9565217391304348, "length": 22}, "so_12414804_12415039_0": {"section_id": 6307, "quality": 0.8461538461538461, "length": 11}}, "n3337": {"so_12414804_12414835_0": {"section_id": 591, "quality": 0.9565217391304348, "length": 22}, "so_12414804_12415039_0": {"section_id": 6064, "quality": 0.8461538461538461, "length": 11}}, "n4659": {"so_12414804_12414835_0": {"section_id": 627, "quality": 0.9565217391304348, "length": 22}, "so_12414804_12415039_0": {"section_id": 6756, "quality": 0.6923076923076923, "length": 9}}}});