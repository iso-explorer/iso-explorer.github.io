post_cb({"37996146": {"ParentId": "37996053", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>You misunderstand how the <code>...</code> expansion operator works. In your example, when <code>args</code> is an empty pack, <code>(print(args), 0)...</code> expands to nothing, not <code>print()</code>.</p>\n<p>If <code>args</code> was given as <code>x</code> it would expand to <code>print(x), 0</code>.</p>\n<p>If <code>args</code> was given as <code>x, y</code> it would expand to <code>(print(x), 0), (print(y), 0)</code>.</p>\n<p>etc.</p>\n<p>Basically it expands all of the expression that contains <code>args</code> and it is applied to, not just the <code>args</code> bit itself.</p>\n<p>From the standard [temp.variadic]:</p>\n<blockquote>\n<ol start=\"4\">\n<li>A pack expansion consists of a pattern and an ellipsis, the\n  instantiation of which produces <strong>zero or more instantiations of the\n  pattern in a list</strong>. The form of the pattern depends on the context in\n  which the expansion occurs.</li>\n</ol>\n<p id=\"so_37996053_37996146_0\">...</p>\n<ol start=\"7\">\n<li>The instantiation of a pack expansion that is neither a sizeof... expression nor a fold-expression produces a list E1, E2, ..., EN ,\n  where N is the number of elements in the pack expansion parameters.\n  <strong>Each Ei is generated by instantiating the pattern and replacing each\n  pack expansion parameter with its ith element</strong>.</li>\n</ol>\n</blockquote>\n", "OwnerUserId": "6255513", "LastEditorUserId": "2684539", "LastEditDate": "2016-06-23T15:59:18.570", "Id": "37996146", "Score": "5", "CreationDate": "2016-06-23T15:40:14.330", "LastActivityDate": "2016-06-23T15:59:18.570"}, "37996053": {"CommentCount": "0", "ViewCount": "274", "PostTypeId": "1", "LastEditorUserId": "560648", "CreationDate": "2016-06-23T15:35:52.237", "LastActivityDate": "2016-06-23T16:49:17.380", "Title": "Variadic template: candidate expects 1 argument, 0 provided (deduction error)", "AcceptedAnswerId": "37996146", "LastEditDate": "2016-06-23T16:49:17.380", "Id": "37996053", "Score": "2", "Body": "<p>Look at this code snippet</p>\n<pre><code>template&lt;class T&gt; \nvoid print(T var)\n{\n    std::cout &lt;&lt; var &lt;&lt; \" \";\n}\n\ntemplate&lt;class... Args&gt; \nvoid Variadic(Args... args)\n{\n    print(args...);\n}\n\nint main()\n{\n     Variadic();\n}\n</code></pre>\n<p>When I compile it says: </p>\n<blockquote>\n<p id=\"so_37996053_37996053_0\"><strong>candidate: template void print(T)</strong></p>\n<p id=\"so_37996053_37996053_1\"><strong>candidate expects 1 argument, 0 provided</strong></p>\n</blockquote>\n<p>And he's right. In fact, I didn't provide any argument in the Parameter Pack.</p>\n<p>But why, then, this code compiles?</p>\n<pre><code>template&lt;class T&gt; \nvoid print(T var)\n{\n    std::cout &lt;&lt; var &lt;&lt; \" \";\n}\n\ntemplate&lt;class... Args&gt; \nvoid Variadic(Args... args)\n{\n    auto x = {0, (print(args), 0)...};\n}\n\nint main()\n{\n     Variadic();\n}\n</code></pre>\n<p>The first thing I do is to push the first 0 into the <strong>initializer_list&lt;&gt;</strong></p>\n<p>Ok, now let\u2019s move on: the compiler sees</p>\n<pre><code>(print(args), 0)...\n</code></pre>\n<p>It tries to call print()\u2026 oh wait\u2026 the <strong>Parameter Pack</strong> is empty and the print() function takes 1 parameter.</p>\n<p>Why does it evaluate to <code>auto x = {0};</code>, then? </p>\n<p>Why doesn't the compiler give me the exact same error as before?</p>\n", "Tags": "<c++><templates><metaprogramming><variadic-templates><template-function>", "OwnerUserId": "5406363", "AnswerCount": "2"}, "37996340": {"ParentId": "37996053", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>According to the C++ <em>standard 14.5.3/p4 Variadic templates [temp.variadic]</em> (<strong>Emphasis Mine</strong>):</p>\n<blockquote>\n<p id=\"so_37996053_37996340_0\">A pack expansion consists of a pattern and an ellipsis, <strong>the\n  instantiation of which produces zero or more instantiations</strong> of the\n  pattern in a list (described below). The form of the pattern depends\n  on the context in which the expansion occurs.</p>\n</blockquote>\n<p>Notice the <em>zero or more</em>. In your case there's an empty pack so instantiations of the pattern <code>(print(args), 0)...</code> are zero. Consequently, you don't get a compile time error because expression:</p>\n<pre><code>auto x = {0, (print(args), 0)...};\n</code></pre>\n<p>actually evaluates to:</p>\n<pre><code>auto x = {0};\n</code></pre>\n<p>that is, <code>print</code> is never called in the code generated by the compiler.</p>\n", "OwnerUserId": "2352671", "LastEditorUserId": "2352671", "LastEditDate": "2016-06-23T16:14:45.317", "Id": "37996340", "Score": "1", "CreationDate": "2016-06-23T15:49:56.350", "LastActivityDate": "2016-06-23T16:14:45.317"}, "bq_ids": {"n4140": {"so_37996053_37996340_0": {"section_id": 121, "quality": 0.8571428571428571, "length": 18}}, "n3337": {"so_37996053_37996340_0": {"section_id": 116, "quality": 0.8571428571428571, "length": 18}}, "n4659": {"so_37996053_37996340_0": {"section_id": 125, "quality": 0.8571428571428571, "length": 18}}}});