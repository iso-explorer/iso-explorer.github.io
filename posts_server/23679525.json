post_cb({"bq_ids": {"n4140": {"so_23679525_23679903_0": {"length": 16, "quality": 0.9411764705882353, "section_id": 233}, "so_23679525_23679903_1": {"length": 20, "quality": 1.0, "section_id": 243}}, "n3337": {"so_23679525_23679903_0": {"length": 16, "quality": 0.9411764705882353, "section_id": 226}, "so_23679525_23679903_1": {"length": 20, "quality": 1.0, "section_id": 235}}, "n4659": {"so_23679525_23679903_0": {"length": 16, "quality": 0.9411764705882353, "section_id": 243}, "so_23679525_23679903_1": {"length": 18, "quality": 0.9, "section_id": 250}}}, "23679903": {"Id": "23679903", "PostTypeId": "2", "Body": "<p>As revealed in comments, the reason this is happening is because <code>remove()</code> is a function in a class template. The compiler only instantiates template code if it is actually used; if you don't call <code>remove()</code>, it can have all the syntax errors you want and nobody will complain.</p>\n<p>More formally, \u00a7 14.7.1 of the standard states (emphasis mine):</p>\n<blockquote>\n<p id=\"so_23679525_23679903_0\">The implicit instantiation of a class template specialization causes\n  the implicit instantiation of the declarations, <em>but not the\n  definitions or default arguments, of the class member functions</em></p>\n</blockquote>\n<p>And later in the same section:</p>\n<blockquote>\n<p id=\"so_23679525_23679903_1\">An implementation shall not implicitly instantiate a function\n  template, a member template, <em>a non-virtual member function</em>, a member\n  class, or a static data member of a class template that does not\n  require instantiation.</p>\n</blockquote>\n<p>(the word \"implicit\" is key here; if you use <a href=\"http://msdn.microsoft.com/en-us/library/by56e477%28VS.80%29.aspx\" rel=\"nofollow\"><em>explicit template instantiation</em></a>, the compiler will immediately try to instantiate all members using the indicated type(s) and fail if any doesn't compile)</p>\n<p>This is not just an optimization; you can exploit this behavior to instantiate class templates with types that only support a subset of the template's operations. For example, suppose you write a template class that will be used with types that support a <code>bar()</code> operation, and in addition, some will also support <code>baz()</code>. You could do this:</p>\n<pre><code>template&lt;typename T&gt;\nclass Foo\n{\nprivate:\n   T _myT;\n\npublic:\n   void bar()\n   {\n      _myT.bar();\n   }\n\n   void baz()\n   {\n      _myT.baz();\n   }\n};\n</code></pre>\n<p>Now suppose you have these too:</p>\n<pre><code>struct BarAndBaz\n{\n   void bar() {}\n   void baz() {}\n};\n\nstruct BarOnly\n{\n   void bar() {}\n};\n</code></pre>\n<p>This will compile and run just fine:</p>\n<pre><code>void f()\n{\n   Foo&lt;BarAndBaz&gt; foo1;\n   foo1.bar();\n   foo1.baz();\n\n   Foo&lt;BarOnly&gt; foo2;\n   foo2.bar();\n   // don't try foo2.baz()!\n   // or template class Foo&lt;BarOnly&gt;!\n}\n</code></pre>\n", "LastEditorUserId": "3549027", "LastActivityDate": "2014-05-15T20:03:50.640", "Score": "11", "CreationDate": "2014-05-15T13:36:06.777", "ParentId": "23679525", "CommentCount": "2", "OwnerUserId": "3549027", "LastEditDate": "2014-05-15T20:03:50.640"}, "23679525": {"ViewCount": "404", "Body": "<p>I am using VS Express 2013 trying to compile a c++ project. I've created a template class with some functions. The class and its functions are all in one header file. I've included the file, I've used the class, I've called functions from it, and despite all that visual studio won't compile the classes' functions that I'm not using. I've turned off all optimizations. Do I HAVE to use a function that I've written just to see that it compiles or not?</p>\n<p>Here is the function:</p>\n<pre><code>void remove(ID id)\n{\n    sdfgsdfg456456456456sfdsdf\n}\n</code></pre>\n<p>The function shouldn't compile. And indeed the project won't compile if I do use this function, but if I don't use the function the project will compile, even if I use other functions from within this class.</p>\n<p>Is there a fix to this? Will the same thing happen if I implement the function in a .cpp file?</p>\n<p>Edit: I neglected to mention it is a template class. I've added that information in.</p>\n", "AcceptedAnswerId": "23679903", "Title": "Why are some functions within my template class not getting compiled?", "CreationDate": "2014-05-15T13:21:03.013", "Id": "23679525", "CommentCount": "15", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2014-05-15T17:25:14.770", "LastEditorUserId": "3043539", "LastActivityDate": "2014-05-15T20:03:50.640", "Score": "9", "OwnerUserId": "1594138", "Tags": "<c++><visual-studio><templates><visual-studio-2013>", "AnswerCount": "1"}});