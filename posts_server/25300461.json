post_cb({"25302808": {"ParentId": "25300461", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>In addition to @JerryCoffin's answer, there is also <strong><a href=\"http://www.iec.ch/members_experts/refdocs/iec/isoiec-dir2%7Bed6.0%7Den.pdf\" rel=\"nofollow\">ISO/IEC Directives\nPart 2</a></strong> (that governs all ISO/IEC documents, including the C++ Standard), in particular Annex H <strong>Verbal forms for the expression of provisions</strong></p>\n<blockquote>\n<p id=\"so_25300461_25302808_0\">The verbal forms shown in Table H.1 shall be used to indicate\n  requirements strictly to be  followed in order to conform to the\n  document and from which no deviation is permitted.</p>\n<p id=\"so_25300461_25302808_1\"><strong>shall</strong>: </p>\n<ul>\n<li>is to, </li>\n<li>is required to, </li>\n<li>it is required that, </li>\n<li>has to, </li>\n<li>only \u2026 is permitted, </li>\n<li>it is necessary</li>\n</ul>\n<p id=\"so_25300461_25302808_2\"><strong>shall not</strong>: </p>\n<ul>\n<li>is not allowed [permitted] [acceptable] [permissible], </li>\n<li>is required to be not</li>\n<li>is required that \u2026 be not</li>\n<li>is not to be</li>\n</ul>\n</blockquote>\n<p>So a violation of a \"shall\" requirement makes a program ill-formed. The diagnostic issues have been answered elsewhere.</p>\n", "OwnerUserId": "819272", "LastEditorUserId": "819272", "LastEditDate": "2014-08-14T10:10:05.577", "Id": "25302808", "Score": "4", "CreationDate": "2014-08-14T07:54:50.433", "LastActivityDate": "2014-08-14T10:10:05.577"}, "25300537": {"ParentId": "25300461", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>Yes, to be well-formed, the program must follow the One Definition Rule that you've quoted in the question (\u00a71.3.26):</p>\n<blockquote>\n<h3>well-formed program</h3>\n<p id=\"so_25300461_25300537_0\">C++ program constructed according to the syntax rules, diagnosable semantic rules, and the One Definition Rule (3.2).</p>\n</blockquote>\n<p>The other diagnosable rules are specified as (\u00a71.4):</p>\n<blockquote>\n<h3>1.4 Implementation compliance [intro.compliance]<br/></h3>\n<p id=\"so_25300461_25300537_1\">1 The set of diagnosable rules consists of all syntactic and semantic rules in this International Standard except\n  for those rules containing an explicit notation that \u201cno diagnostic is required\u201d or which are described as resulting in \u201cundefined behavior.\u201d<br>\n  2 Although this International Standard states only requirements on C++ implementations, those requirements are often easier to understand if they are phrased as requirements on programs, parts of programs, or execution of programs. Such requirements have the following meaning:<br>\n  \u2014 If a program contains no violations of the rules in this International Standard, a conforming implementation shall, within its resource limits, accept and correctly execute<sup>2</sup> that program.<br>\n  \u2014 <strong>If a program contains a violation of any diagnosable rule</strong> or an occurrence of a construct described in this Standard as \u201cconditionally-supported\u201d when the implementation does not support that construct, <strong>a conforming implementation shall issue at least one diagnostic message.</strong><br>\n  \u2014 If a program contains a violation of a rule for which no diagnostic is required, this International Standard places no requirement on implementations with respect to that program.<br>[emphasis added]</br></br></br></br></br></p>\n</blockquote>\n<p>And yes, as noted in the second bullet point, if a diagnosable rule is violated, a diagnostic is required.</p>\n", "OwnerUserId": "179910", "LastEditorUserId": "3510483", "LastEditDate": "2014-08-14T05:31:08.253", "Id": "25300537", "Score": "14", "CreationDate": "2014-08-14T05:14:49.617", "LastActivityDate": "2014-08-14T05:31:08.253"}, "bq_ids": {"n4140": {"so_25300461_25300537_0": {"section_id": 5768, "quality": 1.0, "length": 10}, "so_25300461_25300461_0": {"section_id": 7038, "quality": 1.0, "length": 14}, "so_25300461_25300537_1": {"section_id": 5770, "quality": 0.6842105263157895, "length": 65}}, "n3337": {"so_25300461_25300537_0": {"section_id": 5541, "quality": 1.0, "length": 10}, "so_25300461_25300461_0": {"section_id": 6784, "quality": 1.0, "length": 14}, "so_25300461_25300537_1": {"section_id": 5543, "quality": 0.6842105263157895, "length": 65}}, "n4659": {"so_25300461_25300537_0": {"section_id": 7225, "quality": 0.7, "length": 7}, "so_25300461_25300537_1": {"section_id": 7227, "quality": 0.6842105263157895, "length": 65}, "so_25300461_25300461_0": {"section_id": 8535, "quality": 1.0, "length": 14}}}, "25300461": {"CommentCount": "1", "AcceptedAnswerId": "25300537", "CreationDate": "2014-08-14T05:06:25.363", "LastActivityDate": "2014-08-14T10:10:05.577", "PostTypeId": "1", "ViewCount": "824", "FavoriteCount": "3", "Title": "In the C++ standard, what is specified to occur when a \"shall\" requirement is violated?", "Id": "25300461", "Score": "19", "Body": "<p>For example, the famous words (\u00a73.2/1)</p>\n<blockquote>\n<p id=\"so_25300461_25300461_0\">No translation unit shall contain more than one definition of any variable, function, class type, enumeration\n   type, or template.</p>\n</blockquote>\n<p>I believe \"shall\" requirements are to be interpreted as though they are implicitly followed by \"otherwise the program is ill-formed\" unless otherwise specified. However, others claim that \"shall\" instead means \"otherwise the behavior is undefined\".</p>\n<p>In every case I've come across in the standard in which a \"shall\" requirement was not followed by something like \"otherwise the behavior is undefined\" or \"no diagnostic required\", the rule it occurred in was one that is obviously diagnosable and is diagnosed by all compilers I know of (the above paragraph being an example). That's why I believe it means \"otherwise the program is ill-formed\", <em>i.e.</em>, a diagnostic is required.</p>\n<p>Anyway, those are just my thoughts. I'd appreciate an authoritative answer.</p>\n", "Tags": "<c++><language-lawyer>", "OwnerUserId": "481267", "AnswerCount": "2"}});