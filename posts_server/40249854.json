post_cb({"40249885": {"ParentId": "40249854", "CommentCount": "0", "Body": "<p>They both do the same thing. You don't need to explicitly say <code>virtual</code> in the derived class, as long as it is virtual in the base class.</p>\n", "OwnerUserId": "4608341", "PostTypeId": "2", "Id": "40249885", "Score": "2", "CreationDate": "2016-10-25T21:19:03.127", "LastActivityDate": "2016-10-25T21:19:03.127"}, "40250232": {"ParentId": "40249854", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_40249854_40250232_0\">In Cplusplus, in a derived class, if we define a member function to override a member function in its parent class, do we need to declare the one in the derived class to be virtual?</p>\n</blockquote>\n<p>From the working draft, <a href=\"http://eel.is/c++draft/class.virtual#2\" rel=\"nofollow\">[class.virtual]/2</a> (emphasis mine):</p>\n<blockquote>\n<p id=\"so_40249854_40250232_1\">If a virtual member function\u00a0<code>vf</code>\u00a0is declared in a class <code>Base</code>\u00a0and in a class\u00a0<code>Derived</code>, derived directly or indirectly from\u00a0<code>Base</code>, a member function\u00a0<code>vf</code> with the same name, parameter-type-list, cv-qualification, and ref-qualifier (or absence of same) as\u00a0<code>Base::vf</code> is declared, then\u00a0<code>Derived::vf</code> is also virtual (<strong>whether or not it is so declared</strong>) and it overrides\u00a0<code>Base::vf</code>.</p>\n</blockquote>\n<p>So, no. It is not required.</p>\n<p>In pre-C++11 era, declaring <code>virtual</code> also the member functions in the derived classes helped the readers understanding what's going on under the hood.<br>\nSince C++11, <code>override</code> is the preferred way, for it not only helps the readers, but also it forces a compile-time check so that typos in the declarations don't introduce subtle errors.</br></p>\n", "OwnerUserId": "4987285", "PostTypeId": "2", "Id": "40250232", "Score": "2", "CreationDate": "2016-10-25T21:42:35.840", "LastActivityDate": "2016-10-25T21:42:35.840"}, "40249854": {"CommentCount": "0", "ViewCount": "83", "CreationDate": "2016-10-25T21:17:06.377", "LastActivityDate": "2016-10-25T21:42:35.840", "Title": "Do overriding functions need to be specified virtual?", "AcceptedAnswerId": "40249904", "PostTypeId": "1", "Id": "40249854", "Score": "4", "Body": "<p>In Cplusplus, in a derived class, if we define a member function to override a member function in its parent class, do we need to declare the one in the derived class to be virtual?</p>\n<p>For example, do we need to declare <code>g</code> to be virtual in <code>B</code> in order for it to override <code>A::g</code>? which one of the following is correct for the above purpose?</p>\n<pre><code>class A{\npublic:\nvoid f(){printf(\"A\");}\nvirtual void g(){printf(\"A\");}\n}\nclass B : public A{\npublic:\nvoid f(){printf(\"B\");}\nvoid g(){printf(\"B\");}\n}\n</code></pre>\n<p>or</p>\n<pre><code>class A{\npublic:\nvoid f(){printf(\"A\");}\nvirtual void g(){printf(\"A\");}\n}\nclass B : public A{\npublic:\nvoid f(){printf(\"B\");}\nvirtual void g(){printf(\"B\");}\n}\n</code></pre>\n<p>Thanks.</p>\n", "Tags": "<c++>", "OwnerUserId": "156458", "AnswerCount": "5"}, "40249916": {"ParentId": "40249854", "CommentCount": "1", "Body": "<p>Once a method is virtual in a class, its child class has also these virtual class even if you don't add <code>virtual</code> to them.</p>\n<p>Adding <code>override</code> is a good habit to avoid subtle error:</p>\n<pre><code>class A{\npublic:\n    void f()         { printf(\"A\"); }\n    virtual void g() { printf(\"A\"); }\n};\nclass B : public A{\npublic:\n   void f()          { printf(\"B\"); }\n   void g() override { printf(\"B\"); }\n};\n</code></pre>\n", "OwnerUserId": "2684539", "PostTypeId": "2", "Id": "40249916", "Score": "8", "CreationDate": "2016-10-25T21:21:07.513", "LastActivityDate": "2016-10-25T21:21:07.513"}, "40250003": {"ParentId": "40249854", "CommentCount": "0", "Body": "<p>Defining member functions <code>virtual</code> in derived classes is optional. You can make the override explicit using C++11's <a href=\"http://en.cppreference.com/w/cpp/language/override\" rel=\"nofollow\"><code>override</code></a>.</p>\n", "OwnerUserId": "6261331", "PostTypeId": "2", "Id": "40250003", "Score": "3", "CreationDate": "2016-10-25T21:26:13.177", "LastActivityDate": "2016-10-25T21:26:13.177"}, "bq_ids": {"n4140": {"so_40249854_40250232_0": {"section_id": 5889, "quality": 0.5555555555555556, "length": 10}, "so_40249854_40250232_1": {"section_id": 7003, "quality": 0.967741935483871, "length": 30}}, "n3337": {"so_40249854_40250232_0": {"section_id": 5660, "quality": 0.5555555555555556, "length": 10}, "so_40249854_40250232_1": {"section_id": 6749, "quality": 0.967741935483871, "length": 30}}, "n4659": {"so_40249854_40250232_0": {"section_id": 7372, "quality": 0.5555555555555556, "length": 10}, "so_40249854_40250232_1": {"section_id": 8500, "quality": 0.967741935483871, "length": 30}}}, "40249904": {"ParentId": "40249854", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>No you don't. The function is virtual from the first point in the hierarchy where you declare it as such.</p>\n<p>You can and should specify it as <code>override</code> in c++11 and onward. It specifies explicitly to the compiler that you are trying to override a virtual function in a base class. It than emits an error if you misspell the function name, mistype the parameters or do anything else that can be considered as adding an overload of the function. Prior to c++11, the previous mistakes would silently compile.</p>\n", "OwnerUserId": "817643", "LastEditorUserId": "817643", "LastEditDate": "2016-10-25T21:31:34.887", "Id": "40249904", "Score": "6", "CreationDate": "2016-10-25T21:20:11.060", "LastActivityDate": "2016-10-25T21:31:34.887"}});