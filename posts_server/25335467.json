post_cb({"25335467": {"CommentCount": "6", "AcceptedAnswerId": "25339429", "CreationDate": "2014-08-15T23:20:06.173", "LastActivityDate": "2014-08-16T10:51:04.883", "PostTypeId": "1", "ViewCount": "806", "FavoriteCount": "1", "Title": "When is a C++ expression well formed?", "Id": "25335467", "Score": "5", "Body": "<p>Skimming through the C++ standard I came in quite a few cases to the statement:</p>\n<blockquote>\n<p id=\"so_25335467_25335467_0\"><em>The expression <code>X</code> shall be well formed.</em></p>\n</blockquote>\n<p>I said to my self \"OK, intuitively you know what a well formed expression is, but can you give a formal explanation of what makes a C++ expression a well formed expression?\". </p>\n<p>I searched a little bit and I didn't find anything that gives a formal explanation on the matter. So here's my question:</p>\n<p><strong>Q:</strong> What are the qualitative characteristics of a well formed expression in C++?</p>\n", "Tags": "<c++><c++11><language-lawyer><c++14>", "OwnerUserId": "2352671", "AnswerCount": "2"}, "25335529": {"ParentId": "25335467", "CommentCount": "3", "Body": "<p>C++ Standard does not define <em>well-formed expression</em>, though it actually uses this phrase. There is definition of <em>well-formed program</em></p>\n<blockquote>\n<p id=\"so_25335467_25335529_0\">1.3.26 [defns.well.formed] <strong>well-formed program</strong>\n  C++ program constructed according to the syntax rules, diagnosable semantic rules, and the One Definition Rule (3.2).</p>\n</blockquote>\n<p>I guess we can assume that <em>well-formed expression</em> is an expression which does not make the program ill-formed (which is defined in 1.3.9 as <em>not well formed</em>).</p>\n", "OwnerUserId": "2382136", "PostTypeId": "2", "Id": "25335529", "Score": "8", "CreationDate": "2014-08-15T23:28:16.710", "LastActivityDate": "2014-08-15T23:28:16.710"}, "25339429": {"ParentId": "25335467", "CommentCount": "0", "Body": "<p>A well-formed expression must conform to the grammar for an <em>expression</em> (as defined by the standard) and must conform to the semantic rules, such as not using names which have not been declared, or not redeclaring a name in the same scope with a different meaning.</p>\n<pre><code>i = 0\n\nX::i++\n</code></pre>\n<p>The expressions above are syntactically valid, but if <code>i</code> has not been declared, or is <code>const</code>, or <code>X</code> is not a namespace or class type, or <code>X::i</code> has not been declared, or <code>X::i</code> does not support post-increment, then they fail to meet the semantic requirements for a well-formed expression.</p>\n<blockquote>\n<p id=\"so_25335467_25339429_0\">Q: What are the qualitative characteristics of a well formed expression in C++?</p>\n</blockquote>\n<p>See Clauses 1 to 15. You can't reduce the entire C++ language to a simple list.</p>\n", "OwnerUserId": "981959", "PostTypeId": "2", "Id": "25339429", "Score": "4", "CreationDate": "2014-08-16T10:51:04.883", "LastActivityDate": "2014-08-16T10:51:04.883"}, "bq_ids": {"n4140": {"so_25335467_25335529_0": {"section_id": 5768, "quality": 0.8461538461538461, "length": 11}}, "n3337": {"so_25335467_25335529_0": {"section_id": 5541, "quality": 0.8461538461538461, "length": 11}}, "n4659": {"so_25335467_25335529_0": {"section_id": 7225, "quality": 0.6153846153846154, "length": 8}}}});