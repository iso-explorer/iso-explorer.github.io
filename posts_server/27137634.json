post_cb({"36706437": {"ParentId": "27137634", "CommentCount": "0", "Body": "<p>You can use the managed thread library: <a href=\"https://msdn.microsoft.com/en-us/library/system.threading.thread(v=vs.110).aspx\" rel=\"nofollow\">System.Threading.Thread</a>.</p>\n<pre><code>#pragma once\n\nusing namespace System;\nusing namespace std;\nusing namespace System::Threading;\n\n\nnamespace MultiThread_module {\n\n    public ref class multiThreadingTest\n    {\n    public:\n        String^ GetVersion();\n        int someNumber;\n\n    private:\n\n        Thread^ testThread;\n    };\n}\n</code></pre>\n", "OwnerUserId": "58391", "PostTypeId": "2", "Id": "36706437", "Score": "1", "CreationDate": "2016-04-19T00:22:14.907", "LastActivityDate": "2016-04-19T00:22:14.907"}, "47136630": {"ParentId": "27137634", "CommentCount": "0", "Body": "<p>If it's purely CLR then I suggest you use the example provided before. If you want to have the threading completely native and just use CLR to wrap it, I'd like to refer you to my answer at : <a href=\"https://stackoverflow.com/questions/15188937/using-clr-and-stdthread/47136505#47136505\">using clr and std::thread</a></p>\n<blockquote>\n<blockquote>\n<p id=\"so_27137634_47136630_6\">Might be an old question, but I looked into this same problem before. Since CLR does not allow you to include <strong>std::thead</strong> at\n    compile time, you could try to use it only at linking time. Normally\n    you could resolve this be forward declaring the class in your header\n    and including them only in your cpp files. However you <strong>can</strong> forward\n    declare your own classes in header files, but you <strong>can't</strong> for\n    classes in namespace std. According to the C++11 standard, 17.6.4.2.1:</p>\n<p id=\"so_27137634_47136630_7\">The behavior of a C++ program is undefined if it adds declarations or\n    definitions to namespace std or to a namespace within namespace std\n    unless otherwise specified.</p>\n</blockquote>\n<p id=\"so_27137634_47136630_2\">A workaround for this problem is to create a threading class that\n  inherits from std::thread that you <strong>can</strong> forward declare. The header\n  file for this class would look like:</p>\n<pre><code>#pragma once\n#include &lt;thread&gt;\n#include &lt;utility&gt;\nnamespace Threading\n{\n  class Thread : std::thread\n  {\n  public:\n      template&lt;class _Fn, class... _Args&gt; Thread(_Fn fn, _Args... args) : std::thread(fn, std::forward&lt;_Args...&gt;(args...))\n      {\n\n      }\n  private:\n\n  };\n}\n</code></pre>\n<p id=\"so_27137634_47136630_3\">In the header file that you would like to use the thread you can do\n  forward declare it like:</p>\n<pre><code>#pragma once\n\n// Forward declare the thread class \nnamespace Threading { class Thread; }\nclass ExampleClass\n{\n    public:\n        ExampleClass();\n        void ThreadMethod();\n    private:\n        Threading::Thread * _thread;\n};\n</code></pre>\n<p id=\"so_27137634_47136630_4\">In your source file you can then use the theading class like:</p>\n<pre><code>#include \"ExampleClass.h\"\n#include \"Thread.h\"\n\nExampleClass::ExampleClass() :\n{\n    _thread = new Threading::Thread(&amp;ExampleClass::ThreadMethod, this);\n}\n\nvoid ExampleClass::ThreadMethod()\n{\n}\n</code></pre>\n<p id=\"so_27137634_47136630_5\">Hope it might help anyone.</p>\n</blockquote>\n", "OwnerUserId": "8894012", "PostTypeId": "2", "Id": "47136630", "Score": "0", "CreationDate": "2017-11-06T12:03:14.100", "LastActivityDate": "2017-11-06T12:03:14.100"}, "bq_ids": {"n4140": {"so_27137634_27137634_1": {"section_id": 43, "quality": 0.5714285714285714, "length": 4}, "so_27137634_47136630_1": {"section_id": 6299, "quality": 0.9285714285714286, "length": 13}, "so_27137634_47136630_7": {"section_id": 6299, "quality": 0.9285714285714286, "length": 13}}, "n3337": {"so_27137634_27137634_1": {"section_id": 451, "quality": 0.7142857142857143, "length": 5}, "so_27137634_47136630_1": {"section_id": 6056, "quality": 0.9285714285714286, "length": 13}, "so_27137634_47136630_7": {"section_id": 6056, "quality": 0.9285714285714286, "length": 13}}, "n4659": {"so_27137634_27137634_1": {"section_id": 43, "quality": 0.5714285714285714, "length": 4}, "so_27137634_47136630_1": {"section_id": 7808, "quality": 0.9285714285714286, "length": 13}, "so_27137634_47136630_7": {"section_id": 7808, "quality": 0.9285714285714286, "length": 13}}}, "27137634": {"CommentCount": "1", "ViewCount": "602", "CreationDate": "2014-11-25T22:05:53.983", "LastActivityDate": "2017-11-06T12:03:14.100", "Title": "How to make a managed (clr) multithreaded c++ .dll?", "PostTypeId": "1", "Id": "27137634", "Score": "3", "Body": "<p>I am trying to make a managed .dll in c++ that requires the support for multithreading. I am developing in visual Studio 2013, using platform toolset version v120. the reason I need this to be a managed assembly is because it is required to integrate the assembly in LabView.</p>\n<p>following the steps in <a href=\"http://msdn.microsoft.com/en-us/library/vstudio/ms235638%28v=vs.100%29.aspx\" rel=\"nofollow\">Creating and Using a Managed Assembly in VC++ 2010</a> gives good results. but I obviously need to implement something more complicated and when I include threading and write the following code:</p>\n<pre><code>#pragma once\n#include &lt;thread&gt;\n\nusing namespace System;\nusing namespace std;\n\n\nnamespace MultiThread_module {\n\n    public ref class multiThreadingTest\n    {\n    public:\n        String^ GetVersion();\n        int someNumber;\n\n    private:\n\n        thread testThread;\n    };\n}\n</code></pre>\n<p>I get following errors:</p>\n<blockquote>\n<p id=\"so_27137634_27137634_0\">\"thread\" is not supported when compiling with /clr or /clr:pure.</p>\n<p id=\"so_27137634_27137634_1\">a member of a managed class cannot be of a non-managed class type</p>\n<p id=\"so_27137634_27137634_2\">error directive: ERROR: Concurrency Runtime is not supported when\n  compiling /clr.</p>\n<p id=\"so_27137634_27137634_3\">error directive:  is not supported when compiling with /clr or\n  /clr:pure.</p>\n</blockquote>\n<p>A friend of mine says it is impossible to write multi-threaded code in Visual Studio without using external packages like boost. It kind of seemed unlikely since Multithreading has already been already there for C# and VB for a long time!</p>\n<p>So, I would be happy if you could let me know what I am doing wrong <em>OR</em> if it is really hard to have a managed multithreaded .dll developed in c++?</p>\n", "Tags": "<c++><multithreading><dll><clr><managed>", "OwnerUserId": "2216555", "AnswerCount": "2"}});