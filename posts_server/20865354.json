post_cb({"20865525": {"PostTypeId": "2", "Body": "<p>In the C++11 standard the order of initialization of non-local variables is discussed in \u00a73.6.2 \u201cInitialization of non-local variables\u201d.</p>\n<p>First <strong>static initialization</strong> is performed, then <strong>dynamic initialization</strong>.</p>\n<p>Static initialization consists of <strong>zero-initialization</strong>  followed by <strong>constant-initialization</strong>. Zero-initialization is just what it sounds like. Constant-initialization is new in C++11, and \u00a73.6.2/2 specifies that it's performed</p>\n<blockquote id=\"so_20865354_20865525_0\">\n<ul>\n<li>if each full-expression (including implicit conversions) that appears in the initializer of a reference with static or thread storage duration is a constant expression (5.19) and the reference is bound to an lvalue designating an object with static storage duration or to a temporary (see 12.2);  </li>\n<li>if an object with static or thread storage duration is initialized by a constructor call, if the constructor is a <code>constexpr</code> constructor, if all constructor arguments are constant expressions (including conversions), and if, after function invocation substitution (7.1.5), every constructor call and full-expression in the mem-initializers and in the <em>brace-or-equal-initializers</em> for non-static data members is a constant\n  expression;  </li>\n<li>if an object with static or thread storage duration is not initialized by a constructor call and if every full-expression that appears in its initializer is a constant expression.</li>\n</ul>\n</blockquote>\n<p>So, the second point is where a <code>constexpr</code> object is potentially initialized, as the last part of static initialization, and essentially it happens if everything is <code>constexpr</code> so that it can be known at compile time.</p>\n<p>And yes, as part of the static initialization this happens before dynamic initialization.</p>\n", "LastActivityDate": "2014-01-01T04:28:40.123", "Id": "20865525", "CommentCount": "0", "CreationDate": "2014-01-01T04:28:40.123", "ParentId": "20865354", "Score": "6", "OwnerUserId": "464581"}, "bq_ids": {"n4140": {"so_20865354_20865525_0": {"length": 48, "quality": 0.64, "section_id": 7151}}, "n3337": {"so_20865354_20865525_0": {"length": 72, "quality": 0.96, "section_id": 6895}}}, "20865354": {"ViewCount": "1209", "Body": "<p>When are <code>constexpr</code> objects constructed relative to non-<code>constexpr</code> non-local objects with static storage duration? Do they start their life prior to initialization of any other objects, i.e., prior to dynamic initialization?</p>\n<p>I'm contemplating whether it would be reasonable to have a <a href=\"http://ideone.com/Vs1VCh\"><code>string_literal</code> class (live example)</a> which is used, e.g., to compare <code>std::string</code>s against certain keywords:</p>\n<pre><code>class string_literal\n{\n    // private members\npublic:\n    constexpr string_literal(char const* b);\n    bool operator== (std::string const&amp; other) const;\n    bool operator!= (std::string const&amp; other) const;\n    // other member functions\n};\n\nconstexpr string_literal hello(\"hello\");\nvoid f(std::string const&amp; s) {\n    if (s == hello) {\n        // do something\n    }\n}\n</code></pre>\n<p>Since the <code>string_literal</code> could parse the string-literal at compile-time to locate the first null-character, I could imagine that these comparisons can be made faster than comparing a <code>std::string</code> against a string-literal. However, to be safe it is necessary that the <code>hello</code> object is readily constructed when the first constructor is executed at run-time during static initialization: otherwise these objects could be accidentally accessed when they are not, yet, constructed.</p>\n", "AcceptedAnswerId": "20865525", "Title": "When are constexpr objects constructed?", "CreationDate": "2014-01-01T03:42:17.130", "Id": "20865354", "CommentCount": "5", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2014-01-01T04:30:54.960", "Score": "10", "OwnerUserId": "1120273", "Tags": "<c++><c++11><constexpr>", "AnswerCount": "1"}});