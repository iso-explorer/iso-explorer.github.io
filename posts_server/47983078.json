post_cb({"47983129": {"Id": "47983129", "PostTypeId": "2", "Body": "<p>No, it doesn't, your code has undefined behavior when you try to print the value of <code>paw</code>. </p>\n<p>The C++ rules for lifetime extension only apply when a <em>temporary</em> object is bound to an rvalue reference or lvalue reference to <code>const</code>, but <code>realCat</code> is not a temporary and binding it to an <code>optional</code> reference doesn't extend it's lifetime.</p>\n<p>In any case, these lifetime extension rules don't apply to <code>boost::optional&lt;T&amp;&gt;</code>. The <a href=\"http://www.boost.org/doc/libs/release/libs/optional/doc/html/boost_optional/tutorial/optional_references.html\" rel=\"nofollow noreferrer\">documentation</a> for <code>boost::optional</code> mentions this:</p>\n<blockquote>\n<p id=\"so_47983078_47983129_0\">Rvalue references and lvalue references to const have the ability in C++ to extend the life time of a temporary they bind to. <strong>Optional references do not have this capability</strong> ...</p>\n</blockquote>\n<p>As for <code>std::optional</code>, your program would be ill-formed if you tried to create <code>std::optional&lt;T&amp;&gt;</code>.</p>\n<p><a href=\"http://eel.is/c++draft/optional.syn#1\" rel=\"nofollow noreferrer\"><em>[optional.syn]/1</em></a></p>\n<blockquote>\n<p id=\"so_47983078_47983129_1\">A program that necessitates the instantiation of template <code>optional</code> for a reference type, or for possibly cv-qualified types <code>in_\u00adplace_\u00adt</code> or <code>nullopt_\u00adt</code> is ill-formed.</p>\n</blockquote>\n", "LastEditorUserId": "241631", "LastActivityDate": "2017-12-26T20:15:59.957", "Score": "5", "CreationDate": "2017-12-26T19:52:42.187", "ParentId": "47983078", "CommentCount": "1", "OwnerUserId": "241631", "LastEditDate": "2017-12-26T20:15:59.957"}, "bq_ids": {"n4140": {"so_47983078_47983129_1": {"length": 7, "quality": 0.5833333333333334, "section_id": 4706}}, "n3337": {"so_47983078_47983129_1": {"length": 7, "quality": 0.5833333333333334, "section_id": 4515}}, "n4659": {"so_47983078_47983129_1": {"length": 12, "quality": 1.0, "section_id": 5015}}}, "47983078": {"ViewCount": "92", "Body": "<p>Say I have:</p>\n<pre><code>#include &lt;iostream&gt;\n#include \"boost/optional.hpp\"\nstruct cat\n{\n    int paw = 4;\n};\n\nint main()\n{\n    boost::optional&lt;cat&amp;&gt; z;\n    {\n        cat realCat = cat();\n        z = realCat;\n    }\n    std::cout &lt;&lt; z-&gt;paw &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>\n<p>In the above, there's no reason to expect a consistent result to be printed, right, as the <code>realCat</code> was released by <code>}</code>? Or does the <code>optional</code> preserve the life of the <code>realCat</code>?</p>\n", "AcceptedAnswerId": "47983129", "Title": "Do optional references in c++ preserve object life?", "CreationDate": "2017-12-26T19:46:33.693", "LastActivityDate": "2017-12-26T21:24:19.443", "CommentCount": "2", "LastEditDate": "2017-12-26T20:03:23.000", "PostTypeId": "1", "LastEditorUserId": "734069", "Id": "47983078", "Score": "3", "OwnerUserId": "1763955", "Tags": "<c++><boost><boost-optional>", "AnswerCount": "1"}});