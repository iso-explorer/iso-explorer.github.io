post_cb({"11703553": {"ViewCount": "707", "Body": "<p>I have the following functions defined:</p>\n<pre><code>template &lt;typename T&gt; buffer_t &amp;operator&lt;&lt;(buffer_t &amp;buffer, T data);\ntemplate &lt;&gt; buffer_t &amp;operator&lt;&lt;(buffer_t &amp;buffer, const char *data);\ntemplate &lt;&gt; buffer_t &amp;operator&lt;&lt;(buffer_t &amp;buffer, const Glib::ustring &amp;data);\n</code></pre>\n<p>When I call:</p>\n<pre><code>buffer &lt;&lt; Glib::ustring(\"hello\");\n</code></pre>\n<p>The compiler uses the general template definition instead of the specialization with Glib::ustring.</p>\n<p>What am I doing wrong here?</p>\n", "AcceptedAnswerId": "11703570", "Title": "Template specialization not used", "CreationDate": "2012-07-28T18:20:24.827", "Id": "11703553", "CommentCount": "18", "LastEditDate": "2012-07-29T11:59:27.550", "PostTypeId": "1", "LastEditorUserId": "597607", "LastActivityDate": "2012-07-29T11:59:27.550", "Score": "1", "OwnerUserId": "526974", "Tags": "<c++><templates>", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_11703553_11703570_1": {"length": 5, "quality": 1.0, "section_id": 324}, "so_11703553_11703570_0": {"length": 10, "quality": 1.0, "section_id": 324}, "so_11703553_11703570_2": {"length": 5, "quality": 1.0, "section_id": 324}}, "n3337": {"so_11703553_11703570_1": {"length": 5, "quality": 1.0, "section_id": 314}, "so_11703553_11703570_0": {"length": 10, "quality": 1.0, "section_id": 314}, "so_11703553_11703570_2": {"length": 5, "quality": 1.0, "section_id": 314}}, "n4659": {"so_11703553_11703570_1": {"length": 5, "quality": 1.0, "section_id": 332}, "so_11703553_11703570_0": {"length": 10, "quality": 1.0, "section_id": 332}, "so_11703553_11703570_2": {"length": 5, "quality": 1.0, "section_id": 332}}}, "11703890": {"Id": "11703890", "PostTypeId": "2", "Body": "<pre><code>template &lt;typename T&gt; buffer_t &amp;operator&lt;&lt;(buffer_t &amp;buffer, T data);\n</code></pre>\n<p>is primary template. Specializations are not primary templates. Compiler finds only primary templates when match functions and then, if chosen template function has specialisations looks at these, if compiler find specialization, that exactly match parameters - uses it, else uses primary template.</p>\n<pre><code>template &lt;&gt; buffer_t &amp;operator&lt;&lt;(buffer_t &amp;buffer, const Glib::ustring &amp;data)\n</code></pre>\n<p>this specialization not exactly matches operation <code>buffer_t &lt;&lt; Glib::ustring(\"s\")</code>, but this matches exactly</p>\n<pre><code>template &lt;&gt; buffer_t &amp;operator&lt;&lt;(buffer_t &amp;buffer, Glib::ustring data)\n</code></pre>\n<p>I suggest you to not use function-template specialization, use overload.</p>\n<pre><code>template &lt;typename T&gt; buffer_t &amp;operator&lt;&lt;(buffer_t &amp;buffer, T data);\nbuffer_t &amp;operator&lt;&lt;(buffer_t &amp;buffer, const char *data);\nbuffer_t &amp;operator&lt;&lt;(buffer_t &amp;buffer, const Glib::ustring &amp;data);\n</code></pre>\n", "LastActivityDate": "2012-07-28T19:13:46.287", "CommentCount": "0", "CreationDate": "2012-07-28T19:13:46.287", "ParentId": "11703553", "Score": "4", "OwnerUserId": "1498580"}, "11703570": {"Id": "11703570", "PostTypeId": "2", "Body": "<p>You have a <em>function</em> template, and you want to perform <em>template argument deduction</em>. For this purpose, your function call is matched against the templated function argument <code>T data</code>. I believe that 14.8.2.4 applies to the partial ordering for your specialization where <code>P</code> is the template argument and <code>A</code> is the type of the actual argument; emphasis is mine):</p>\n<blockquote>\n<p id=\"so_11703553_11703570_0\">Before the partial ordering is done, certain transformations are performed on the types used for partial\n  ordering:</p>\n<p id=\"so_11703553_11703570_1\">\u2014 If <code>P</code> is a reference type, <code>P</code> is replaced by the type referred to.</p>\n<p id=\"so_11703553_11703570_2\">\u2014 <strong>If <code>A</code> is a reference type, <code>A</code> is replaced by the type referred to.</strong></p>\n</blockquote>\n<p>Thus, since the type of your argument is <code>A = Glib::ustring</code>, then this is not as good a match for the specialization <code>const Glib::ustring &amp;</code> as the primary template is, and even if you have an actual const-reference, the reference is stripped off during the partial ordering, and you again end up with a worse match.</p>\n<p>The usual way to fix this is to make your primary template a const-reference; this can also bind to temporary objects and should thus be \"as good as\" a value argument:</p>\n<pre><code>template &lt;typename T&gt; buffer_t &amp; operator&lt;&lt;(buffer_t &amp; buffer, T const &amp; data);\n//                                                             ^^^^^^^^^\n</code></pre>\n", "LastEditorUserId": "596781", "LastActivityDate": "2012-07-28T19:26:42.437", "Score": "4", "CreationDate": "2012-07-28T18:22:41.997", "ParentId": "11703553", "CommentCount": "6", "OwnerUserId": "596781", "LastEditDate": "2012-07-28T19:26:42.437"}});