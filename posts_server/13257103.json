post_cb({"13257244": {"ParentId": "13257103", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>The program is ill-formed as per 14.6/8:</p>\n<blockquote>\n<p id=\"so_13257103_13257244_0\">If no valid specialization can be generated for a template definition, and that template is not instantiated, the template definition is ill-formed, no diagnostic required.</p>\n</blockquote>\n<p>That is whether you instantiate the template or not, the template definition is ill-formed as there is no possible instantiation that will succeed.</p>\n<p>Note that this is completely unrelated to SFINAE: Substitution Failure is not an Error is part of the <em>substitution</em> process, and never takes into account the contents of the template.</p>\n", "OwnerUserId": "36565", "LastEditorUserId": "560648", "LastEditDate": "2012-11-06T18:54:15.940", "Id": "13257244", "Score": "9", "CreationDate": "2012-11-06T18:39:58.920", "LastActivityDate": "2012-11-06T18:54:15.940"}, "13257103": {"CommentCount": "6", "ViewCount": "182", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2012-11-06T18:30:22.223", "LastActivityDate": "2012-11-06T18:54:15.940", "Title": "Is this program ill-formed despite SFINAE?", "AcceptedAnswerId": "13257244", "LastEditDate": "2017-05-23T12:15:41.040", "Id": "13257103", "Score": "2", "Body": "<pre><code>template &lt;typename T&gt; void f() {\n    return 0;  // returning value from function returning `void`\n}\n\nint main()\n{\n    // Not instantiating or calling any f&lt;T&gt;()\n}\n</code></pre>\n<p>In comments to <a href=\"https://stackoverflow.com/a/13255869/560648\">this answer</a>, <a href=\"https://stackoverflow.com/users/36565/david-rodriguez-dribeas\">David</a> asserts that a function template that contains a semantic error and is not instantiated causes a program to be ill-formed:</p>\n<blockquote>\n<p id=\"so_13257103_13257103_0\">Whether the template is used or not does not matter, the program is <em>ill-formed</em> even with no instantiation but the compiler is not required to diagnose it. </p>\n</blockquote>\n<p>Conversely, I am quite sure that SFINAE, as well as preventing type deduction and therefore instantiation of the function template per <code>[C++11: 14.8.2/8]</code>, allows the program to remain well-formed. however I cannot find any text in this standard paragraph that explicitly says so.</p>\n<p><strong>Who is correct?</strong></p>\n<hr>\n<p>Wikipedia, which I shall not consider authoritative for this question, says about a slightly different case:</p>\n<blockquote>\n<p id=\"so_13257103_13257103_1\">[..] SFINAE was introduced <strong>to avoid creating ill-formed programs</strong> when unrelated template declarations were visible [..]</p>\n</blockquote>\n<p><sup>(emphasis mine)</sup></p>\n</hr>", "Tags": "<c++><language-lawyer><sfinae>", "OwnerUserId": "560648", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_13257103_13257244_0": {"section_id": 175, "quality": 0.8461538461538461, "length": 11}, "so_13257103_13257161_0": {"section_id": 300, "quality": 1.0, "length": 18}, "so_13257103_13257161_1": {"section_id": 300, "quality": 0.9375, "length": 15}}, "n3337": {"so_13257103_13257244_0": {"section_id": 169, "quality": 1.0, "length": 13}, "so_13257103_13257161_0": {"section_id": 291, "quality": 1.0, "length": 18}, "so_13257103_13257161_1": {"section_id": 291, "quality": 0.9375, "length": 15}}, "n4659": {"so_13257103_13257244_0": {"section_id": 180, "quality": 0.7692307692307693, "length": 10}, "so_13257103_13257161_0": {"section_id": 307, "quality": 1.0, "length": 18}, "so_13257103_13257161_1": {"section_id": 307, "quality": 0.9375, "length": 15}}}, "13257161": {"ParentId": "13257103", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>Reading more closely, that standard passage says:</p>\n<blockquote>\n<p id=\"so_13257103_13257161_0\">If a substitution results in an invalid type or expression, type deduction fails. An invalid type or expression is one that would be ill-formed if written using the substituted arguments. [..]</p>\n</blockquote>\n<p><code>return 0</code> is not an expression, so SFINAE does not apply.</p>\n<p>The passage goes on:</p>\n<blockquote>\n<p id=\"so_13257103_13257161_1\">Only invalid types and expressions in the immediate context of the function type and its template parameter types can result in a deduction failure.</p>\n</blockquote>\n<p><code>return 0</code> has nothing to do with the function type or its template parameter types, so SFINAE still does not apply.</p>\n", "OwnerUserId": "560648", "LastEditorUserId": "560648", "LastEditDate": "2012-11-06T18:40:27.820", "Id": "13257161", "Score": "1", "CreationDate": "2012-11-06T18:34:19.343", "LastActivityDate": "2012-11-06T18:40:27.820"}});