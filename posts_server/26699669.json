post_cb({"26699669": {"ViewCount": "144", "Body": "<p>If I remove a pointer to an object, what will be removed? Only the pointer or also the object which the pointer points to?\nFor example:</p>\n<p>Assume I have a class with a variable</p>\n<pre><code>int *root\n</code></pre>\n<p>If I do the following in a method of that class</p>\n<pre><code>int *current = root;\ndelete current;\n</code></pre>\n<p>Will root also be deleted or only the pointer current?</p>\n", "AcceptedAnswerId": "26699735", "Title": "What will get removed if i remove a pointer in c++", "CreationDate": "2014-11-02T13:15:00.693", "Id": "26699669", "CommentCount": "5", "PostTypeId": "1", "OwnerDisplayName": "user4194399", "LastActivityDate": "2014-11-03T09:13:46.813", "Score": "2", "Tags": "<c++><pointers>", "AnswerCount": "4"}, "26699735": {"Id": "26699735", "PostTypeId": "2", "Body": "<p>I think you have a misconception about what <code>delete</code> does: <code>delete</code> deletes an object pointed to by a pointer that was previously allocated with <code>new</code>:</p>\n<pre><code>int* p = new int; // Create a new int and save its address in p\ndelete p;         // Delete the int\n</code></pre>\n<p>Note that this does not delete <code>p</code> itself in any way, but only the object <code>p</code> points to! You can still use <code>p</code> like a normal variable, e.g. reassign it.</p>\n", "LastEditorUserId": "3002139", "LastActivityDate": "2014-11-03T09:13:46.813", "Score": "3", "CreationDate": "2014-11-02T13:21:51.207", "ParentId": "26699669", "CommentCount": "0", "OwnerUserId": "3002139", "LastEditDate": "2014-11-03T09:13:46.813"}, "26699791": {"Id": "26699791", "PostTypeId": "2", "Body": "<pre><code>int *pointer = new int;\n</code></pre>\n<p>After this statement pointer would be pointing( pointer would be containing the address ) to a block of memory enough to store integer. What internally happens is some chunk from free store would be assigned allocated status.</p>\n<p>When you execute</p>\n<pre><code>delete pointer;\n</code></pre>\n<p>That memory is returned back to free store so as to fulfill future needs. But you pointer would be containing the same address. When you execute delete again , it would led to undefined behavior since that block is already returned to free store ( that means you have lost the control over that memory through this pointer )</p>\n<p>So, to be on safe side you generally set pointer to 0 after deleting that memory.</p>\n<pre><code>pointer = NULL;\n</code></pre>\n<p>In implementation of operator delete there is code which check if pointer is NULL, if it is then it returns. So, it's said that there's no harm in deleting NULL pointer.</p>\n<p>I hope I have covered every basics.</p>\n", "LastActivityDate": "2014-11-02T13:28:26.123", "CommentCount": "0", "CreationDate": "2014-11-02T13:28:26.123", "ParentId": "26699669", "Score": "0", "OwnerUserId": "4047092"}, "bq_ids": {"n4140": {"so_26699669_26699818_0": {"length": 29, "quality": 0.9666666666666667, "section_id": 6110}}, "n3337": {"so_26699669_26699818_0": {"length": 29, "quality": 0.9666666666666667, "section_id": 5876}}, "n4659": {"so_26699669_26699818_0": {"length": 29, "quality": 0.9666666666666667, "section_id": 7607}}}, "26699713": {"Id": "26699713", "PostTypeId": "2", "Body": "<p>Yes, root is deleted, but depending of the compiler, current can still contain the address of an unexisting variable. So you have to do this to avoid mistakes :</p>\n<pre><code>delete current;\ncurrent = 0;\n</code></pre>\n", "LastActivityDate": "2014-11-02T13:20:17.443", "CommentCount": "0", "CreationDate": "2014-11-02T13:20:17.443", "ParentId": "26699669", "Score": "0", "OwnerUserId": "3378179"}, "26699818": {"Id": "26699818", "PostTypeId": "2", "Body": "<p>When you have multiple pointers to a pointee you only need to call delete on one of them. </p>\n<pre><code>int* root = new int;\nint* current = root;\ndelete current;\nstd::cout &lt;&lt; *root; // undefined behavior\n</code></pre>\n<p>The behavior of delete is described in \u00a75.3.5:</p>\n<blockquote>\n<p id=\"so_26699669_26699818_0\">6 If the value of the operand of the delete-expression is not a null\n  pointer value, the delete-expression will invoke the destructor (if\n  any) for the object or the elements of the array being deleted. In the\n  case of an array, the elements will be destroyed in order of\n  decreasing address (that is, in reverse order of the completion of\n  their constructor; see 12.6.2).</p>\n</blockquote>\n", "OwnerDisplayName": "user3920237", "LastActivityDate": "2014-11-02T13:30:52.623", "Score": "1", "CreationDate": "2014-11-02T13:30:52.623", "ParentId": "26699669", "CommentCount": "0"}});