post_cb({"32659754": {"Id": "32659754", "PostTypeId": "2", "Body": "<p>Since <code>n</code> will only ever have an integer value, it makes sense to define it as as <code>int</code>.  However doing so means that this won't work as you might expect:</p>\n<pre><code>s+=1/n;\n</code></pre>\n<p>In the division operation both operands are integer types, so it performs integer division which means it takes the integer part of the result and throws away any fractional component.  So <code>1/2</code> would evaluate to <code>0</code> because dividing 1 by 2 results in 0.5, and throwing away the fraction results in 0.</p>\n<p>This in contrast to floating point division which keeps the fractional component.  C will perform floating point division if either operand is a floating point type.  </p>\n<p>In the case of the above expression, we can force floating point division by performing a typecast on either operand:</p>\n<pre><code>s += (float)1/n\n</code></pre>\n<p>Or:</p>\n<pre><code>s += 1/(float)n\n</code></pre>\n<p>You can also specify the constant 1 as a floating point constant by giving a decimal component:</p>\n<pre><code>s += 1.0/n\n</code></pre>\n<p>Or appending the <code>f</code> suffix:</p>\n<pre><code>s += 1.0f/n\n</code></pre>\n<p>The <code>f</code> suffix (as well as the <code>U</code>, <code>L</code>, and <code>LL</code> suffixes) can only be applied to numerical constants, not variables.</p>\n", "LastEditorUserId": "1687119", "LastActivityDate": "2015-09-18T19:45:20.933", "Score": "3", "CreationDate": "2015-09-18T19:34:58.863", "ParentId": "32659640", "CommentCount": "2", "OwnerUserId": "1687119", "LastEditDate": "2015-09-18T19:45:20.933"}, "32659640": {"ViewCount": "158", "Body": "<p>a complete newbie here. For my school homework, I was given to write a program that displays - </p>\n<blockquote>\n<p id=\"so_32659640_32659640_0\">s= 1 + 1/2 + 1/3 + 1/4 ..... + 1/n</p>\n</blockquote>\n<p>Here's what I did -</p>\n<pre><code>#include&lt;iostream.h&gt;\n#include&lt;conio.h&gt;\n\nvoid main()\n{\n    clrscr();\n    int a;\n    float s=0, n;\n    cin&gt;&gt;a;\n    for(n=1;n&lt;=a;n++)\n    {\n        s+=1/n;\n    }\n    cout&lt;&lt;s;\n    getch();\n}\n</code></pre>\n<p>It perfectly displays what it should. However, in the past I have only written programs which uses int data type. To my understanding, int data type does not contain any decimal place whereas float does. So I don't know much about float yet. Later that night, I was watching some video on YouTube in which he was writing the exact same program but in a little different way. The video was in some foreign language so I couldn't understand it. What he did was declared 'n' as an integer. </p>\n<pre><code>int a, n;\nfloat s=0;\n</code></pre>\n<p>instead of </p>\n<pre><code>int a\nfloat s=0, n;\n</code></pre>\n<p>But this was not displaying the desired result. So he went ahead and showed two ways to correct it. He made changes in the for loop body -</p>\n<pre><code>s+=1.0f/n;\n</code></pre>\n<p>and</p>\n<pre><code>s+=1/(float)n;\n</code></pre>\n<p>To my understanding, he declared 'n' a float data type later in the program(Am I right?). So, my question is, both display the same result but is there any difference between the two? As we are declaring 'n' a float, why he has written 1.0f instead of n.f or f.n. I tried it but it gives error. And in the second method, why we can't write 1(float)/n instead of 1/(float)n? As in the first method we have added float suffix with 1. Also, is there a difference between 1.f and 1.0f?</p>\n<p>I tried to google my question but couldn't find any answer. Also, another confusion that came to my mind after a few hours is - Why are we even declaring 'n' a float? As per the program, the sum should come out as a real number. So, shouldn't we declare only 's' a float. The more I think the more I confuse my brain. Please help!</p>\n<p>Thank You.</p>\n", "AcceptedAnswerId": "32659754", "Title": "Confusion about float data type declaration in C++", "CreationDate": "2015-09-18T19:28:10.593", "Id": "32659640", "CommentCount": "4", "LastEditDate": "2015-09-18T20:02:52.880", "PostTypeId": "1", "LastEditorUserId": "1687119", "LastActivityDate": "2015-09-18T21:38:11.933", "Score": "4", "OwnerUserId": "1509061", "Tags": "<c++><c>", "AnswerCount": "5"}, "32659745": {"Id": "32659745", "PostTypeId": "2", "Body": "<p>The reason is that integer division behaves different than floating point division. </p>\n<p><code>4 / 3</code> gives you the integer <code>1</code>. <code>10 / 3</code> gives you the integer <code>3</code>. </p>\n<p>However, <code>4.0f / 3</code> gives you the float <code>1.3333...</code>, <code>10.0f / 3</code> gives you the float <code>3.3333...</code></p>\n<p>So if you have:</p>\n<pre><code>float f = 4 / 3;\n</code></pre>\n<p><code>4 / 3</code> will give you the integer <code>1</code>, which will then be stored into the float <code>f</code> as <code>1.0f</code>. </p>\n<p>You instead have to make sure either the divisor or the dividend is a float:</p>\n<pre><code>float f = 4.0f / 3;\nfloat f = 4 / 3.0f;\n</code></pre>\n<p>If you have two integer variables, then you have to convert one of them to  a float first:</p>\n<pre><code>int a = ..., b = ...;\nfloat f = (float)a / b;\nfloat f = a / (float)b;\n</code></pre>\n<p>The first is equivalent to something like:</p>\n<pre><code>float tmp = a;\nfloat f = tmp / b;\n</code></pre>\n", "LastEditorUserId": "15055", "LastActivityDate": "2015-09-18T21:38:11.933", "Score": "7", "CreationDate": "2015-09-18T19:34:30.910", "ParentId": "32659640", "CommentCount": "3", "OwnerUserId": "15055", "LastEditDate": "2015-09-18T21:38:11.933"}, "bq_ids": {"n4140": {"so_32659640_32660154_4": {"length": 16, "quality": 0.7619047619047619, "section_id": 7146}}, "n3337": {"so_32659640_32660154_4": {"length": 15, "quality": 0.7142857142857143, "section_id": 6890}}, "n4659": {"so_32659640_32660154_4": {"length": 16, "quality": 0.7619047619047619, "section_id": 8647}}}, "32659808": {"Id": "32659808", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_32659640_32659808_0\">he declared 'n' a float data type later in the program(Am I right?)</p>\n</blockquote>\n<p>No, he defined (thereby also declared) <code>n</code> an <code>int</code> and later he explicitly converted (casted) it into a <code>float</code>. Both are very different.</p>\n<blockquote>\n<p id=\"so_32659640_32659808_1\">both display the same result but is there any difference between the two?</p>\n</blockquote>\n<p>Nope. They're the same in this context. When an arithmetic operator has <code>int</code> and <code>float</code> operands, the former is implicitly converted into the latter and thereby the result will also be a <code>float</code>. He's just shown you two ways to do it. When both the operands are integers, you'd get an integer value as a result which may be incorrect, when proper mathematical division would give you a non-integer quotient. To avoid this, usually one of the operands are made into a floating-point number so that the actual result is closer to the expected result.</p>\n<blockquote>\n<p id=\"so_32659640_32659808_2\">why he has written 1.0f instead of n.f or f.n. I tried it but it gives error. [...] Also, is there a difference between 1.f and 1.0f?</p>\n</blockquote>\n<p>This is because the language syntax is defined thus. When you're declaring a floating-point literal, the suffix is to use <code>.f</code>. So <code>5</code> would be an <code>int</code> while <code>5.0f</code> or <code>5.f</code> is a <code>float</code>; there's no difference when you omit any trailing <code>0</code>s. However, <code>n.f</code> is syntax error since <code>n</code> is a identifier (variable) name and not a constant number literal.</p>\n<blockquote>\n<p id=\"so_32659640_32659808_3\">And in the second method, why we can't write 1(float)/n instead of 1/(float)n?</p>\n</blockquote>\n<p><code>(float)n</code> is a valid, C-style casting of the <code>int</code> variable <code>n</code>, while <code>1(float)</code> is just syntax error.</p>\n", "LastEditorUserId": "183120", "LastActivityDate": "2015-09-18T19:44:01.557", "Score": "1", "CreationDate": "2015-09-18T19:38:38.100", "ParentId": "32659640", "CommentCount": "1", "OwnerUserId": "183120", "LastEditDate": "2015-09-18T19:44:01.557"}, "32660154": {"Id": "32660154", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_32659640_32660154_0\"><code>s+=1.0f/n;</code></p>\n<p id=\"so_32659640_32660154_1\">and</p>\n<p id=\"so_32659640_32660154_2\"><code>s+=1/(float)n;</code></p>\n<p id=\"so_32659640_32660154_3\">... So, my question is, both display the same result but is there any difference between the two? </p>\n</blockquote>\n<p>Yes.</p>\n<p>In both C and C++, when a calculation involves expressions of different types, one or more of those expressions will be \"promoted\" to the type with greater precision or range.  So if you have an expression with <code>signed</code> and <code>unsigned</code> operands, the <code>signed</code> operand will be \"promoted\" to <code>unsigned</code>.  If you have an expression with <code>float</code> and <code>double</code> operands, the <code>float</code> operand will be promoted to <code>double</code>.  </p>\n<p>Remember that division with two integer operands gives an integer result - <code>1/2</code> yields <code>0</code>, not <code>0.5</code>.  To get a floating point result, at least one of the operands must have a floating point type.  </p>\n<p>In the case of <code>1.0f/n</code>, the expression <code>1.0f</code> has type <code>float</code><sup>1</sup>, so the <code>n</code> will be \"promoted\" from type <code>int</code> to type <code>float</code>.  </p>\n<p>In the case of <code>1/(float) n</code>, the expression <code>n</code> is being explicitly <em>cast</em> to type <code>float</code>, so the expression <code>1</code> is promoted from type <code>int</code> to <code>float</code>.  </p>\n<p>Nitpicks:</p>\n<ul>\n<li>Unless your compiler documentation <em>explicitly</em> lists <code>void main()</code> as a legal signature for the <code>main</code> function, use <code>int main()</code> instead. From the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4296.pdf\" rel=\"nofollow\">online C++ standard</a>:\n<br>\n<blockquote id=\"so_32659640_32660154_4\">\n<b>3.6.1 Main function</b><br>\n...<br>\n2 An implementation shall not predefine the <code>main</code> function. This function shall not be overloaded. <strong>It shall have a declared return type of type <code>int</code></strong>, but otherwise its type is implementation-defined...\n</br></br></blockquote>\n<li>Secondly, <em>please</em> format your code - it makes it easier for others to read and debug.  Whitespace and indentation are your friends - use them.\n</li></br></li></ul>\n<p><hr>\n<sup>1. The constant expression <code>1.0</code> with no suffix has type <code>double</code>.  The <code>f</code> suffix tells the compiler to treat it as <code>float</code>.  <code>1.0/n</code> would result in a value of type <code>double</code>.<br>\n</br></sup> </hr></p>\n", "LastActivityDate": "2015-09-18T20:02:46.983", "CommentCount": "2", "CreationDate": "2015-09-18T20:02:46.983", "ParentId": "32659640", "Score": "1", "OwnerUserId": "134554"}, "32659780": {"Id": "32659780", "PostTypeId": "2", "Body": "<p>What he is doing is something called casting.  I'm sure your school will mention it in new lectures. Basically n is set as an integer for the entire program. But since integer and double are similar (both are numbers), the c/c++ language allows you to use them as either as long as you tell the compiler what you want to use it as. You do this by adding parenthesis and the data type ie </p>\n<pre><code>(float) n\n</code></pre>\n", "LastActivityDate": "2015-09-18T19:36:46.280", "CommentCount": "0", "CreationDate": "2015-09-18T19:36:46.280", "ParentId": "32659640", "Score": "1", "OwnerUserId": "4358137"}});