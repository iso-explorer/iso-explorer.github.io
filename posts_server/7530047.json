post_cb({"7530147": {"ParentId": "7530047", "CommentCount": "0", "Body": "<p>If I recall correctly this has to do with Solaris 8 causing issues when <code>__cplusplus</code> is set as it should. The gcc team decided at the time to support the Solaris 8 platform rather than be compliant in this particular clause. But I noticed that the latest version of gcc ends the Solaris 8 support, and I guess this is a first step in the right direction.</p>\n", "OwnerUserId": "456", "PostTypeId": "2", "Id": "7530147", "Score": "0", "CreationDate": "2011-09-23T13:59:07.683", "LastActivityDate": "2011-09-23T13:59:07.683"}, "7530161": {"ParentId": "7530047", "CommentCount": "3", "Body": "<p>This was fixed about a month ago (for gcc 4.7.0). The bug report makes for an interesting read: <a href=\"http://gcc.gnu.org/bugzilla/show_bug.cgi?id=1773\" rel=\"noreferrer\">http://gcc.gnu.org/bugzilla/show_bug.cgi?id=1773</a></p>\n", "OwnerUserId": "931027", "PostTypeId": "2", "Id": "7530161", "Score": "28", "CreationDate": "2011-09-23T13:59:46.917", "LastActivityDate": "2011-09-23T13:59:46.917"}, "7530047": {"CommentCount": "2", "CreationDate": "2011-09-23T13:52:49.730", "PostTypeId": "1", "AcceptedAnswerId": "7530161", "LastEditorUserId": "472245", "LastActivityDate": "2011-09-27T13:49:11.683", "LastEditDate": "2011-09-27T13:49:11.683", "ViewCount": "15027", "FavoriteCount": "3", "Title": "Gnu C++ macro __cplusplus standard conform?", "Id": "7530047", "Score": "30", "Body": "<p>The Gnu C++ compiler seems to define <code>__cplusplus</code> to be <code>1</code></p>\n<pre><code>#include &lt;iostream&gt; \nint main() {\n  std::cout &lt;&lt; __cplusplus &lt;&lt; std::endl;\n}\n</code></pre>\n<p>This prints <code>1</code> with gcc in standard c++ mode, as well as in C++0x mode, with <a href=\"https://ideone.com/d6jdl\">gcc 4.3.4</a>, and gcc 4.7.0.</p>\n<p>The C++11 FDIS says in <em>\"16.8 Predefined macro names [cpp.predefined]\"</em> that</p>\n<blockquote>\n<p id=\"so_7530047_7530047_0\">The name <code>__cplusplus</code> is defined to the <strong>value 201103L</strong> when compiling a C++ translation unit. (Footnote: It is intended that future versions of this standard will replace the value of this macro with a greater value. Non-conforming com-\n  pilers should use a value with at most five decimal digits.)</p>\n</blockquote>\n<p>The old std C++03 had a similar rule.</p>\n<p><strong>Is the GCC deliberatly setting this to <code>1</code>, because it is \"non-conforming\"</strong>?</p>\n<p>By reading through that list I thought that I could use <code>__cplusplus</code> to check in a portable way if I have a C++11 enabled compiler. But with <em>g++</em> this does not seem to work. I know about the <code>...EXPERIMENTAL...</code> macro, but got curious why <em>g++</em> is defining <code>__cplusplus</code> this way.</p>\n<p>My original problem was switch between different null-pointer-variants. Something like this:</p>\n<pre><code>#if __cplusplus &gt; 201100L\n#  define MYNULL nullptr\n#else\n#  define MYNULL NULL\n#endif\n</code></pre>\n<p><strong>Is there a simple and reasonably portable way to implement such a switch?</strong></p>\n", "Tags": "<c++><gcc><c++11><standards-compliance><c++-standard-library>", "OwnerUserId": "472245", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_7530047_7530047_0": {"section_id": 550, "quality": 0.7931034482758621, "length": 23}}, "n3337": {"so_7530047_7530047_0": {"section_id": 541, "quality": 0.7931034482758621, "length": 23}}, "n4659": {"so_7530047_7530047_0": {"section_id": 571, "quality": 0.5862068965517241, "length": 17}}}, "7530128": {"ParentId": "7530047", "CommentCount": "0", "Body": "<p>It is a very old g++ bug.</p>\n<p>That is, the compiler is not conforming.</p>\n<p>Apparently it can't be fixed because fixing it would break something on a crazy platform.</p>\n<p><strong>EDIT</strong>: oh, I see from @birryree's comment that has just been fixed, in version 4.7.0. So, it was not impossible to fix after all. Heh.</p>\n<p>Cheers &amp; hth.</p>\n", "OwnerUserId": "464581", "PostTypeId": "2", "Id": "7530128", "Score": "0", "CreationDate": "2011-09-23T13:58:03.213", "LastActivityDate": "2011-09-23T13:58:03.213"}});