post_cb({"bq_ids": {"n4140": {"so_28071129_28071356_0": {"length": 24, "quality": 0.96, "section_id": 264}}, "n3337": {"so_28071129_28071356_0": {"length": 24, "quality": 0.96, "section_id": 255}}}, "28071129": {"ViewCount": "574", "Body": "<p>I want to specialize a function template. This function is declared in a namespace:</p>\n<pre><code>namespace foo\n{\n   template &lt;int&gt;\n   void function();\n}\n</code></pre>\n<p>(For simplicity, the template is based on an <code>int</code>, whereas in my production code, it is an <code>enum class</code>, but it is the same issue. The same goes for a type based template)</p>\n<p>Now I want to specialize it for a specific value:</p>\n<pre><code>template &lt;&gt;\nvoid foo::function&lt;0&gt;()\n{\n}\n</code></pre>\n<p>This fails to compile with <code>g++ -std=c++11</code> (versions 4.6, 4.7, 4.8 and 4.9):</p>\n<blockquote>\n<p id=\"so_28071129_28071129_0\">specialization of \u2018template void foo::function()\u2019 in different namespace [-fpermissive]</p>\n</blockquote>\n<p><code>clang++ -std=c++11</code> accepts this code.</p>\n<p>g++ also accepts the following piece:</p>\n<pre><code>namespace foo\n{\n   template &lt;&gt;\n   void function&lt;0&gt;()\n   {\n   }\n}\n</code></pre>\n<p>Who's right, gcc or clang?</p>\n", "AcceptedAnswerId": "28071356", "Title": "function template specialization in a namespace", "CreationDate": "2015-01-21T15:39:48.217", "Id": "28071129", "CommentCount": "6", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2015-01-22T13:39:49.127", "LastEditorUserId": "985296", "LastActivityDate": "2015-01-22T15:48:07.160", "Score": "5", "OwnerUserId": "985296", "Tags": "<c++><templates><c++11><g++><clang++>", "AnswerCount": "1"}, "28071356": {"PostTypeId": "2", "Body": "<p>According to the standard, \u00a714.7.3/2, emphasis mine:</p>\n<blockquote>\n<p id=\"so_28071129_28071356_0\">An explicit specialization shall be declared in a namespace enclosing the specialized template. An explicit\n  specialization whose <em>declarator-id</em> is <strong>not qualified</strong> shall be declared in the nearest enclosing namespace of\n  the template, or, if the namespace is inline (7.3.1), any namespace from its enclosing namespace set.</p>\n</blockquote>\n<p>You have to put <code>template&lt;&gt; function&lt;0&gt;();</code> in <code>namespace foo</code>. However, that rule only applies to an unqualified <em>declarator-id</em>. When you provide a <em>qualified-id</em> (as in <code>foo::function&lt;0&gt;</code>), I believe that clause should not apply, which makes clang correct here.</p>\n<p>For example, given the <code>function</code> declared the question, I would expect the following:</p>\n<pre><code>namespace foo {\n    template &lt;&gt; void function&lt;0&gt;(); // valid: unqualified explicit specialization\n                                    // in the nearest enclosing namespace of the \n                                    // template\n}\n\nnamespace bar {\n    template &lt;&gt; void function&lt;1&gt;(); // invalid: unqualified explicit specialization\n                                    // in the wrong namespace\n}\n\nstruct baz {\n    template &lt;&gt; void function&lt;2&gt;(); // invalid: unqualified explicit specialization\n                                    // not in namespace scope\n};\n\ntemplate &lt;&gt; void foo::function&lt;3&gt;(); // valid: qualified explicit specialization\n                                     // is in a namespace, and id is qualified\n\ntemplate &lt;&gt; void bar::function&lt;4&gt;(); // invalid: there is no bar::function\n                                     // to specialize\n</code></pre>\n", "LastActivityDate": "2015-01-22T15:48:07.160", "LastEditorUserId": "2069064", "Id": "28071356", "CommentCount": "11", "CreationDate": "2015-01-21T15:50:54.007", "ParentId": "28071129", "Score": "8", "OwnerUserId": "2069064", "LastEditDate": "2015-01-22T15:48:07.160"}});