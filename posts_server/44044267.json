post_cb({"bq_ids": {"n4140": {"so_44044267_44044683_0": {"length": 27, "quality": 0.9642857142857143, "section_id": 233}}, "n3337": {"so_44044267_44044683_0": {"length": 27, "quality": 0.9642857142857143, "section_id": 226}}, "n4659": {"so_44044267_44044683_0": {"length": 27, "quality": 0.9642857142857143, "section_id": 242}}}, "44044683": {"Id": "44044683", "PostTypeId": "2", "Body": "<p>The program is valid because <code>has_type_struct&lt;no_type&gt;</code> is not instantiated.</p>\n<p><a href=\"http://eel.is/c++draft/temp.inst#1\" rel=\"nofollow noreferrer\">[temp.inst]/1</a>:</p>\n<blockquote>\n<p id=\"so_44044267_44044683_0\">Unless a class template specialization has been explicitly instantiated or explicitly specialized, the class template specialization is implicitly instantiated when the specialization is referenced in a context that requires a completely-defined object type or when the completeness of the class type affects the semantics of the program. </p>\n</blockquote>\n<p>The use of <code>my_int&lt;has_type_struct&lt;no_type&gt;&gt;</code> does not require <code>has_type_struct&lt;no_type&gt;</code> to be complete, therefore the latter is not instantiated and the validity of the dependent name in its definition is not checked.</p>\n", "LastActivityDate": "2017-05-18T10:03:26.440", "CommentCount": "3", "CreationDate": "2017-05-18T10:03:26.440", "ParentId": "44044267", "Score": "2", "OwnerUserId": "4672588"}, "44044267": {"ViewCount": "168", "Body": "<p>As per the title, I do not understand how can the following code compile when <code>has_type_struct&lt;no_type&gt;</code> is certainly an invalid type.</p>\n<pre><code>template&lt;typename T&gt;\nusing my_int = int;\n\nstruct no_type {};\n\ntemplate&lt;typename T&gt;\nstruct has_type_struct { using type = typename T::type; };\n\ntemplate&lt;typename T&gt;\nusing has_type_using = typename T::type;\n\nint main() {\n   my_int&lt;has_type_struct&lt;no_type&gt;&gt; a; // why does this compile?\n   //my_int&lt;has_type_using&lt;no_type&gt;&gt;(); // this rightfully does not compile\n   return 0;\n}\n</code></pre>\n", "AcceptedAnswerId": "44044683", "Title": "why is this short snippet of template code valid?", "CreationDate": "2017-05-18T09:45:08.747", "Id": "44044267", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2017-05-18T10:05:48.650", "LastEditorUserId": "4672588", "LastActivityDate": "2017-05-18T10:11:57.467", "Score": "4", "OwnerUserId": "2195972", "Tags": "<c++><templates><metaprogramming>", "AnswerCount": "1"}});