post_cb({"4330321": {"Id": "4330321", "PostTypeId": "2", "Body": "<p>It does not (necessarily) become zero.  The behavior is undefined (C99 \u00a76.5.7, \"Bitwise shift operators\"):</p>\n<blockquote>\n<p id=\"so_4330282_4330321_0\">If the value of the right operand is\n  negative or is greater than or equal\n  to the width of the promoted left\n  operand, the behavior is undefined.</p>\n</blockquote>\n<p>(C++0x \u00a75.8, \"Shift operators\"):</p>\n<blockquote>\n<p id=\"so_4330282_4330321_1\">The behavior is undefined if the right\n  operand is negative, or greater than\n  or equal to the length in bits of the\n  promoted left operand.</p>\n</blockquote>\n<p>The storage of the value being shifted has no effect on any of this.</p>\n", "LastActivityDate": "2010-12-01T23:49:24.717", "CommentCount": "4", "CreationDate": "2010-12-01T23:49:24.717", "ParentId": "4330282", "Score": "7", "OwnerUserId": "142434"}, "4330421": {"Id": "4330421", "PostTypeId": "2", "Body": "<p>I think you're confused. <code>x &gt;&gt; y</code> <strong>does not actually change x</strong> in the first place. It calculates a new value.</p>\n<p>As Stephen noted, <code>y</code> must not be negative, and it must be less than \"the width of the promoted left operand\" (read up on type promotion). But otherwise, bits that shift \"off the end\" are simply discarded. <code>1 &gt;&gt; 2</code> (notice that <code>2</code> is not negative, and it is less than the number of bits used to represent <code>1</code>, which is probably 32 but certainly at least 16) evaluates to 0.</p>\n", "LastActivityDate": "2010-12-02T00:03:54.933", "CommentCount": "0", "CreationDate": "2010-12-02T00:03:54.933", "ParentId": "4330282", "Score": "3", "OwnerUserId": "523612"}, "4330296": {"Id": "4330296", "PostTypeId": "2", "Body": "<p>It just becomes all zero. So whatever it's length was but in zeroes.</p>\n<p>ie say the binary is 001, after 3 bit shifts it would just be 000.\nNo wrap around occurs and it doesn't move the location (unless you are bit shifting the pointer itself and then I have no idea).</p>\n", "LastEditorUserId": "337237", "LastActivityDate": "2010-12-02T00:38:11.747", "Score": "0", "CreationDate": "2010-12-01T23:44:17.550", "ParentId": "4330282", "CommentCount": "2", "OwnerUserId": "337237", "LastEditDate": "2010-12-02T00:38:11.747"}, "bq_ids": {"n4140": {"so_4330282_4330321_0": {"length": 9, "quality": 0.6923076923076923, "section_id": 6146}, "so_4330282_4330321_1": {"length": 13, "quality": 0.9285714285714286, "section_id": 6146}}, "n3337": {"so_4330282_4330321_1": {"length": 13, "quality": 0.9285714285714286, "section_id": 5909}, "so_4330282_4330321_0": {"length": 9, "quality": 0.6923076923076923, "section_id": 5909}}, "n4659": {"so_4330282_4330321_1": {"length": 13, "quality": 0.9285714285714286, "section_id": 7642}, "so_4330282_4330321_0": {"length": 9, "quality": 0.6923076923076923, "section_id": 7642}}}, "4330289": {"Id": "4330289", "PostTypeId": "2", "Body": "<p>You get zero. No wrapping into other memory locations. You may as well have cleared it.</p>\n", "LastActivityDate": "2010-12-01T23:42:40.097", "CommentCount": "5", "CreationDate": "2010-12-01T23:42:40.097", "ParentId": "4330282", "Score": "0", "OwnerUserId": "391531"}, "4330411": {"Id": "4330411", "PostTypeId": "2", "Body": "<p>I think you're confused about what bitshifts do. They are arithmetic operators equivalent to multiplication or division by a power of 2 (modulo some weirdness about how C treats negative numbers). <strong>They do not move any bits in memory</strong>. The only way the contents of any variable/memory get changed are if you assign the result of the expression back somewhere.</p>\n<p>As for what happens when the righthand operand of a bitshift operator is greater than or equal to the width of the type of the lefthand expression, the behavior is undefined.</p>\n", "LastActivityDate": "2010-12-02T00:01:57.693", "CommentCount": "0", "CreationDate": "2010-12-02T00:01:57.693", "ParentId": "4330282", "Score": "5", "OwnerUserId": "379897"}, "4330282": {"ViewCount": "2964", "Body": "<p>If you have some variable (on the stack) and you left or right bit shift beyond its end what happens?</p>\n<p>i.e.</p>\n<pre><code>byte x = 1;\nx &gt;&gt; N;\n</code></pre>\n<p>What if x is a pointer to memory cast to a byte and you do the same thing?</p>\n<pre><code>byte* x = obtain pointer from somewhere;\n*x = 1;\n*x &gt;&gt; N;\n</code></pre>\n", "Title": "What happens when you bit shift beyond the end of a variable?", "CreationDate": "2010-12-01T23:41:18.577", "LastActivityDate": "2010-12-02T00:38:11.747", "CommentCount": "3", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2010-12-01T23:44:49.957", "LastEditorUserId": "391531", "Id": "4330282", "Score": "2", "OwnerUserId": "521947", "Tags": "<c++><c><bit-manipulation>", "AnswerCount": "5"}});