post_cb({"3541661": {"ViewCount": "311", "Body": "<p>I tried the following code:</p>\n<pre><code>int main()\n{\n   int x {23.22};\n}\n</code></pre>\n<p>which includes an initialization that requires narrowing, but the code compiles fine without any error or warning. On the other hand, the following code gives error:</p>\n<pre><code>int main()\n{\n   int x[]{23.22};\n}\n</code></pre>\n<p>Have I found a bug or what?</p>\n<p>PS: I'm currently using GCC 4.5.0 </p>\n", "Title": "G++ 4.5 Bug: No diagnostic for narrowing in initializer list", "CreationDate": "2010-08-22T13:37:24.423", "LastActivityDate": "2010-08-28T19:24:45.247", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2010-08-22T14:08:25.610", "LastEditorUserId": "66692", "Id": "3541661", "Score": "6", "OwnerUserId": "218786", "Tags": "<c++><g++><c++11><narrowing>", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_3541661_3541674_1": {"length": 16, "quality": 1.0, "section_id": 3325}}, "n3337": {"so_3541661_3541674_1": {"length": 16, "quality": 1.0, "section_id": 3195}}, "n4659": {"so_3541661_3541674_1": {"length": 16, "quality": 1.0, "section_id": 4091}}}, "3541806": {"Id": "3541806", "PostTypeId": "2", "Body": "<p>As C++0x support is still being implemented, even if there should be an error or warning according to the Standard and there isn't, that doesn't make it a bug necessarily, just yet to be implemented. This may also occur if the draft Standard has been changed since that particular feature was implemented.</p>\n<p>The fact of working with work-in-progress software or standards is that things which are supposed to exist according to the latest spec don't.</p>\n", "LastActivityDate": "2010-08-22T14:25:58.653", "CommentCount": "0", "CreationDate": "2010-08-22T14:25:58.653", "ParentId": "3541661", "Score": "0", "OwnerUserId": "298661"}, "3541674": {"Id": "3541674", "PostTypeId": "2", "Body": "<p>Looks like a bug. The following is straight out from the draft n3092:</p>\n<blockquote>\n<p id=\"so_3541661_3541674_0\"><strong>8.5.4 List-initialization</strong></p>\n<p id=\"so_3541661_3541674_1\">\u2014 Otherwise, if the initializer list\n  has a single element, the object is\n  initialized from that element; if a\n  narrowing conversion (see below) is\n  required to convert the element to T,\n  the program is ill-formed.</p>\n</blockquote>\n<pre><code>int x1 {2}; // OK\nint x2 {2.0}; // error: narrowing\n</code></pre>\n<p>You can take a look at GCC's C++0X compliance <a href=\"http://gcc.gnu.org/gcc-4.5/cxx0x_status.html\" rel=\"nofollow noreferrer\">here.</a> The status of Initializer Lists (<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2672.htm\" rel=\"nofollow noreferrer\">N2672</a>) is 'Yes' -- but note that this is merely experimental (and hence you can expect bugs).</p>\n<p>Update from <a href=\"http://gcc.gnu.org/bugzilla/show_bug.cgi?id=45378\" rel=\"nofollow noreferrer\">bug report</a>: GCC does emit a warning with the <code>-Wconversion</code> flag (and no this is not covered by <code>-Wall</code>).</p>\n", "LastEditorUserId": "66692", "LastActivityDate": "2010-08-28T19:24:45.247", "Score": "7", "CreationDate": "2010-08-22T13:41:56.843", "ParentId": "3541661", "CommentCount": "8", "OwnerUserId": "66692", "LastEditDate": "2010-08-28T19:24:45.247"}});