post_cb({"20938140": {"ParentId": "20909693", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Having studied the rules for initialisation and aggregates, I conclude that you're right \u2014 <strong>this <em>is</em> technically ill-formed.</strong></p>\n<p>Your compiler is taking a shortcut because there are no members and thus no initialisation is <em>practically</em> required. (Funnily enough, <a href=\"http://codepad.org/fh2iVBC2\" rel=\"nofollow noreferrer\">the ancient GCC 4.1.2 rejects the program</a>.)</p>\n<p>Unfortunately I have nothing to quote because there is simply no rule overriding <code>[C++11: 8.5/6]</code> for this case.</p>\n<p>As for <em>why</em> the standard doesn't allow this, well why should it? Empty classes are of next to no use, I can't see a reason to bother with actively writing an exemption to the wider, more useful <a href=\"https://stackoverflow.com/a/7411661/560648\">rule</a> for this edge case.</p>\n", "OwnerUserId": "560648", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T10:26:56.503", "Id": "20938140", "Score": "4", "CreationDate": "2014-01-05T19:33:15.913", "LastActivityDate": "2014-01-05T19:42:12.073"}, "20915412": {"ParentId": "20909693", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>Taking into account a note in paragraph #2 of section 7.1.6.1 The cv-qualifiers where there is written:</p>\n<blockquote>\n<p id=\"so_20909693_20915412_0\">2 [ Note: Declaring a variable const can affect its linkage (7.1.1)\n  and its usability in constant expressions (5.19). As described in 8.5,\n  the definition of an object or subobject of const-qualified type must\n  specify an initializer or be subject to default-initialization. \u2014end\n  note ]</p>\n</blockquote>\n<p>it seems that indeed the compilers bahave oddly.</p>\n<p>Though if you will add a data member the code will not be compiled in ideone but will be compiled at least in MS VC++ 2010.\nIn the quote you presented there is nothing said about data members.</p>\n", "OwnerUserId": "2877241", "LastEditorUserId": "2877241", "LastEditDate": "2014-01-04T01:08:54.597", "Id": "20915412", "Score": "1", "CreationDate": "2014-01-04T00:52:40.140", "LastActivityDate": "2014-01-04T01:08:54.597"}, "20909693": {"CommentCount": "13", "ViewCount": "290", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2014-01-03T17:48:31.487", "LastActivityDate": "2014-01-05T19:42:12.073", "Title": "The snippet shown below compiles in Coliru and Ideone, but according to iso \u00a7 8.5 p6 it shouldn't, or am I missing something?", "FavoriteCount": "1", "LastEditDate": "2017-05-23T12:14:28.630", "Id": "20909693", "Score": "9", "Body": "<p>From C++11 Standard \u00a7 8.5 p6 we have:</p>\n<blockquote>\n<p id=\"so_20909693_20909693_0\">If a program calls for the default initialization of an object of a\n  const-qualified type T, T shall be a class type with a user-provided\n  default constructor.</p>\n</blockquote>\n<p>The following code should <strong>not</strong> compile. But it does, both in Coliru and <a href=\"http://ideone.com/B6rfce\" rel=\"nofollow noreferrer\">Ideone</a>.</p>\n<pre><code>class A{};\n\nint main() {\n    const A a;\n}\n</code></pre>\n<p><strong>Edit:</strong></p>\n<p><s>While trying to understand what's going on here, I ended up with the following code, which compiles (at least it's compliant with the Standard, as <code>A</code> has a user-provided constructor). But then the following question came to my mind: which Standard clause does guarantee that <code>a.b.j</code> is initialized with 0 (see the code in <a href=\"http://ideone.com/BTEJJM\" rel=\"nofollow noreferrer\">Ideone</a>), below? </s></p>\n<pre><code>#include &lt;iostream&gt;\nstruct B { int j; B(){ std::cout &lt;&lt; \"B()\" &lt;&lt; '\\n'; } };\nstruct A\n{\n    struct B b;\n    int i;\n\n    public:\n    A(): i(1) { std::cout &lt;&lt; \"A()\" &lt;&lt; '\\n'; }\n\n};  \n\nint main() {\n    const A a;\n    std::cout &lt;&lt; a.b.j &lt;&lt; '\\n';\n    std::cout &lt;&lt; a.i &lt;&lt; '\\n';\n}\n</code></pre>\n<p></p>\n<p><strong>Edit1:</strong></p>\n<p>Sorry for the <strong>Edit</strong> above, but I'm still not used with Unixes. Last week <a href=\"https://stackoverflow.com/users/1120273/dietmar-kuhl\">Dietmar K\u00fchl</a> called my attention to the fact that <a href=\"https://stackoverflow.com/a/20767384/2548699\">\"Most UNIXes start off with zero initialized pages\"</a>. Therefore, a.b.j is not 0 because of initialization, as I was thinking. As a matter of fact, I've just compiled the code with VS2010, and the result for a.b.j was an unitialized value, as expected. So, the question in <strong>Edit</strong> should be disregarded.</p>\n<p>But I'm curious to know whether clang++ or g++ would also show an error for this second snippet. Thanks. </p>\n", "Tags": "<c++><c++11><language-lawyer><default-constructor>", "OwnerUserId": "2548699", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_20909693_20909693_0": {"section_id": 3286, "quality": 1.0, "length": 11}, "so_20909693_20915412_0": {"section_id": 5431, "quality": 0.8148148148148148, "length": 22}}, "n3337": {"so_20909693_20909693_0": {"section_id": 3156, "quality": 1.0, "length": 11}, "so_20909693_20915412_0": {"section_id": 5226, "quality": 0.8148148148148148, "length": 22}}, "n4659": {"so_20909693_20909693_0": {"section_id": 382, "quality": 0.6363636363636364, "length": 7}, "so_20909693_20915412_0": {"section_id": 6859, "quality": 0.8148148148148148, "length": 22}}}});