post_cb({"48610049": {"ParentId": "48609529", "LastActivityDate": "2018-02-04T17:35:32.377", "OwnerUserId": "6022656", "Id": "48610049", "CreationDate": "2018-02-04T16:00:08.197", "LastEditorUserId": "6022656", "Body": "<p>Interesting question.</p>\n<p>Correcting my first interpretation, it seems to me that is g++ and clang++ are right and that MSVC is wrong.</p>\n<p>I suppose this because in the draft n4659 for C++17 (sorry: I don't have access at the final version) I see the expression rules (A.4) where the division operator is involved in a \"<em>multiplicative-expression</em>\" rule as follows</p>\n<blockquote>\n<p id=\"so_48609529_48610049_0\"><em>multiplicative-expression</em> / <em>pm-expression</em></p>\n</blockquote>\n<p>A \"<em>multiplicative-expression</em>\" can be also a \"<em>pm-expression</em>\" that can be a \"<em>cast-expression</em>\" that can be an \"<em>unary-expression</em>\" that can be a \"<em>postfix-expression</em>\" that can be a \"<em>primary-expression</em>\" that can be a \"<em>fold-expression</em>\"</p>\n<p>So the rule can be seen as </p>\n<blockquote>\n<p id=\"so_48609529_48610049_1\"><em>fold-expression</em> / <em>pm-expression</em></p>\n</blockquote>\n<p>So, If I'm not wrong, a \"<em>fold-expression</em>\" should be evaluated as a whole before the division is applied.  </p>\n<p>My first interpretation (MSVC right, g++ and clang++ wrong) was based over an hasty lecture of 17.5.3</p>\n<blockquote>\n<p id=\"so_48609529_48610049_2\">The instantiation of a <em>fold-expression</em> produces:</p>\n<p id=\"so_48609529_48610049_3\">(9.1) ((E1 <em>op</em> E2) <em>op</em> \u00b7\u00b7\u00b7) <em>op</em> EN for a unary left fold </p>\n</blockquote>\n<p>and 8.1.6</p>\n<blockquote>\n<p id=\"so_48609529_48610049_4\">An expression on the form (... <em>op</em> e) where <em>op</em> is a <em>fold-operator</em> is called a <em>unary left fold</em>.</p>\n</blockquote>\n<p>So I supposed that </p>\n<pre><code>return (... + values) / static_cast&lt;double&gt;(sizeof...(Ts));\n</code></pre>\n<p>should be instantiated </p>\n<pre><code>return ((v1 + v2) + ... ) + vn / static_cast&lt;double&gt;(sizeof...(Ts));\n</code></pre>\n<p>Anyway... right MSVC or not... to be sure... of you want</p>\n<pre><code>return (1 + 3) / 2.0;\n</code></pre>\n<p>I suggest you to add another couple of parentheses.</p>\n", "LastEditDate": "2018-02-04T17:35:32.377", "PostTypeId": "2", "CommentCount": "9", "Score": "4"}, "48611897": {"ParentId": "48609529", "LastActivityDate": "2018-02-06T01:58:21.190", "OwnerUserId": "923854", "Id": "48611897", "CreationDate": "2018-02-04T19:01:22.607", "LastEditorUserId": "923854", "Body": "<p>This is a bug in MSVC. I've reduced it to:</p>\n<pre><code>template&lt;class... Ts&gt;\nconstexpr auto f1(Ts const... vals) {\n    return 0 * (vals + ...);\n}\n\ntemplate&lt;class... Ts&gt;\nconstexpr auto f2(Ts const... vals) {\n    return (vals + ...) * 0;\n}\n\nstatic_assert(f1(1,2,3) == 0);\nstatic_assert(f1(1,2,3) != 0 * 1 + (2 + 3));\nstatic_assert(f2(1,2,3) == 0);\nstatic_assert(f2(1,2,3) != 1 + (2 + 3) * 0);\n</code></pre>\n<p>(which compiles fine with both <a href=\"https://wandbox.org/permlink/G5EaNCEcpMcKInbx\" rel=\"noreferrer\">GCC</a> and <a href=\"https://wandbox.org/permlink/G5EaNCEcpMcKInbx\" rel=\"noreferrer\">clang</a>, but triggers all four <code>static_assert</code>s in MSVC) and filed it internally.</p>\n<p>20180205 Update: This bug has been fixed for a future release of Visual C++.</p>\n", "LastEditDate": "2018-02-06T01:58:21.190", "PostTypeId": "2", "CommentCount": "1", "Score": "8"}, "48609529": {"Tags": "<c++><language-lawyer><variadic-templates><c++17><fold-expression>", "ViewCount": "310", "LastEditDate": "2018-02-04T16:10:38.240", "AnswerCount": "2", "FavoriteCount": "3", "Title": "Fold expressions in MSVC", "CommentCount": "6", "LastEditorUserId": "6022656", "AcceptedAnswerId": "48610049", "Score": "10", "CreationDate": "2018-02-04T15:09:42.597", "Id": "48609529", "LastActivityDate": "2018-02-06T01:58:21.190", "Body": "<p>I have the following function that computes the mean value:</p>\n<pre><code>template&lt;typename... Ts&gt;\nauto mean_of(const Ts... values)\n{\n    return (... + values) / static_cast&lt;double&gt;(sizeof...(Ts));\n}\n</code></pre>\n<p>With VS 2017 15.6.0 Preview 3 the following code</p>\n<pre><code>std::cout &lt;&lt; mean_of(1, 3);\n</code></pre>\n<p>outputs <code>2.5</code>. It seems that MSVC interprets the fold expression as <code>1 + 3 / N</code> and not as <code>(1 + 3) / N</code>. If I add extra parentheses around the fold expression, the result is correct. With GCC no extra parentheses are needed.</p>\n<p>Is this a bug in MSVC or do we need extra parentheses? </p>\n", "PostTypeId": "1", "OwnerUserId": "1625187"}, "bq_ids": {"n4659": {"so_48609529_48610049_4": {"length": 7, "section_id": 7482, "quality": 0.875}}}});