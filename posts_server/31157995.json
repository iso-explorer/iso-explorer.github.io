post_cb({"bq_ids": {"n4140": {"so_31157995_31158028_0": {"length": 4, "quality": 0.8, "section_id": 5768}}, "n3337": {"so_31157995_31158028_0": {"length": 4, "quality": 0.8, "section_id": 5541}}, "n4659": {"so_31157995_31158028_0": {"length": 4, "quality": 0.8, "section_id": 7225}}}, "31158034": {"Id": "31158034", "PostTypeId": "2", "Body": "<p>In your code, both</p>\n<pre><code>    bitarray[0][64] = '1';\n    bitarray[10][64] = '1';\n</code></pre>\n<p>are accessing memory out-of-bound,. i.e., those memory locations are \"invalid\". Accessing invalid memory  invokes <a href=\"https://en.wikipedia.org/wiki/Undefined_behavior\" rel=\"nofollow\">undefined behaviour</a>.</p>\n<p>The access violation error or segmentation fault is one of the many <strong>possible</strong> outcomes of UB. Nothing is guaranteed.</p>\n<p>From the <a href=\"https://en.wikipedia.org/wiki/Segmentation_fault\" rel=\"nofollow\">wiki page for segmentation fault</a>,</p>\n<blockquote>\n<p id=\"so_31157995_31158034_0\">On systems using hardware memory segmentation to provide virtual memory, a segmentation fault occurs when the hardware detects an attempt to refer to a non-existent segment, or to refer to a location outside the bounds of a segment, .....</p>\n</blockquote>\n<p>so, <em>maybe, just maybe</em>, the memory area for <code>bitarray[0][64]</code> is inside the allocated page (segment) which is accessible (but invalid anyway) by the program , in this very particular case. That does not mean it will be, always.</p>\n<p>That said, <code>void main()</code> is not a correct signature of <code>main()</code> function. The recommended (<code>C++11</code>,\u00a73.6.1) signature of <code>main()</code> is <code>int main(void)</code>.</p>\n", "LastEditorUserId": "2173917", "LastActivityDate": "2015-07-01T10:34:46.397", "Score": "4", "CreationDate": "2015-07-01T09:51:38.630", "ParentId": "31157995", "CommentCount": "8", "OwnerUserId": "2173917", "LastEditDate": "2015-07-01T10:34:46.397"}, "31157995": {"ViewCount": "96", "Body": "<p>I am running the following code where I declare a dynamic 2D array, and then go on to assign values at column indexes higher than the number columns actually allocated for the dynamic array. However, when I do this the code runs perfectly and I don't get an error, which I believe I should get.</p>\n<pre><code> void main(){\n\n\n        unsigned char **bitarray = NULL;\n        bitarray = new unsigned char*[96];\n\n        for (int j = 0; j &lt; 96; j++)\n        {\n                bitarray[j] = new unsigned char[56];\n            if (bitarray[j] == NULL)\n            {\n                cout &lt;&lt; \"Memory could not be allocated for 2D Array.\";\n                return;// return if memory not allocated\n            }\n        }\n\n        bitarray[0][64] = '1';\n        bitarray[10][64] = '1';\n\n        cout &lt;&lt; bitarray[0][64] &lt;&lt; \" \" &lt;&lt; bitarray[10][64];\n\n        getch();\n        return;\n    }\n</code></pre>\n<p><a href=\"https://drive.google.com/file/d/0BwUKS98DxycUR1g5dmJ2S056dW8/view?usp=sharing\" rel=\"nofollow\">The link to the output I get is here</a> (The values are actually assigned accurately, don't know why, though).</p>\n", "AcceptedAnswerId": "31158028", "Title": "Why don't I get an error when I run the following code", "CreationDate": "2015-07-01T09:49:39.310", "Id": "31157995", "CommentCount": "5", "LastEditDate": "2015-07-01T10:27:33.740", "PostTypeId": "1", "LastEditorUserId": "2173917", "LastActivityDate": "2015-07-01T10:34:46.397", "Score": "-3", "OwnerUserId": "4748688", "Tags": "<c++><pointers><visual-c++><undefined-behavior><dynamic-memory-allocation>", "AnswerCount": "3"}, "31158028": {"Id": "31158028", "PostTypeId": "2", "Body": "<p>In C++, accessing a buffer out of its bounds invokes undefined behavior (not a trapped error, as you expected).</p>\n<p>The C++ specification defines the term <em>undefined behavior</em> as:</p>\n<blockquote>\n<p id=\"so_31157995_31158028_0\">behavior for which this International Standard imposes <strong>no requirements</strong>.</p>\n</blockquote>\n", "LastEditorUserId": "1892179", "LastActivityDate": "2015-07-01T10:00:19.977", "Score": "5", "CreationDate": "2015-07-01T09:51:16.570", "ParentId": "31157995", "CommentCount": "7", "OwnerUserId": "1892179", "LastEditDate": "2015-07-01T10:00:19.977"}, "31158179": {"Id": "31158179", "PostTypeId": "2", "Body": "<p>C++11 introduced <a href=\"http://en.cppreference.com/w/cpp/container/array\" rel=\"nofollow\">std::array</a> and the method <code>at()</code> provides out of bounds checking.</p>\n", "LastActivityDate": "2015-07-01T09:57:48.617", "CommentCount": "0", "CreationDate": "2015-07-01T09:57:48.617", "ParentId": "31157995", "Score": "3", "OwnerUserId": "283561"}});