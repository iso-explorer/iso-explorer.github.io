post_cb({"bq_ids": {"n4140": {"so_26987216_26988110_0": {"length": 16, "quality": 0.9411764705882353, "section_id": 149}}, "n3337": {"so_26987216_26988110_0": {"length": 16, "quality": 0.9411764705882353, "section_id": 143}}, "n4659": {"so_26987216_26988110_0": {"length": 16, "quality": 0.9411764705882353, "section_id": 153}}}, "26988110": {"Id": "26988110", "PostTypeId": "2", "Body": "<p>Your attempt with using <code>R Delegate&lt;R()&gt;::operator()()</code> to specialize <em>even more</em> the member function of a partial specialization of a class template fails due to \u00a714.5.5.3 [temp.class.spec.mfunc]:</p>\n<blockquote>\n<p id=\"so_26987216_26988110_0\"><sup>1</sup> The template parameter list of a member of a class template partial specialization shall match the template parameter list of the class template partial specialization.</p>\n</blockquote>\n<p>In other words:</p>\n<pre><code>template &lt;typename R&gt;\nR Delegate&lt;R()&gt;::operator()() { /**/ }\n</code></pre>\n<p>is actually a specialization of <code>operator()</code> of your <em>primary template</em>:</p>\n<pre><code>template &lt;typename T&gt;\nclass Delegate;\n</code></pre>\n<p>and since it's an incomplete type, you end up with the error. The possible workarounds are:</p>\n<h3>Option #1</h3>\n<p>Specialize the entire class and reimplement all the members of that class:</p>\n<pre><code>template &lt;typename T&gt;\nclass Delegate;\n\ntemplate &lt;typename R, typename... Args&gt; // partial specialization for non-empty Args\nclass Delegate&lt;R(Args...)&gt;\n{\n    R operator()(Args...) { return {}; }\n};\n\ntemplate &lt;typename R&gt; // partial specialization for empty Args\nclass Delegate&lt;R()&gt;\n{\n    R operator()() { return {}; }\n};\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/379d867cdf177ba0\" rel=\"nofollow\"><strong>DEMO 1</strong></a></p>\n<h3>Option #2</h3>\n<p>Use a one more delegate class that is specialized:</p>\n<pre><code>#include &lt;utility&gt;\n\ntemplate &lt;typename T&gt;\nstruct Impl;\n\ntemplate &lt;typename R, typename... Args&gt;\nstruct Impl&lt;R(Args...)&gt;\n{\n    static R call(Args&amp;&amp;...) { return {}; }\n};\n\ntemplate &lt;typename R&gt;\nstruct Impl&lt;R()&gt;\n{\n    static R call() { return {}; }\n};\n\ntemplate &lt;typename T&gt;\nclass Delegate;\n\ntemplate &lt;typename R, typename... Args&gt;\nclass Delegate&lt;R(Args...)&gt;\n{\n    R operator()(Args... args)\n    {\n        return Impl&lt;R(Args...)&gt;::call(std::forward&lt;Args&gt;(args)...);\n    }\n};\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/55b3297dd7e65bb3\" rel=\"nofollow\"><strong>DEMO 2</strong></a></p>\n<h3>Option #3</h3>\n<p>Use some ugly SFINAE:</p>\n<pre><code>#include &lt;type_traits&gt;\n\ntemplate &lt;typename T&gt;\nclass Delegate;\n\ntemplate &lt;typename R, typename... Args&gt;\nclass Delegate&lt;R(Args...)&gt;\n{\n    template &lt;typename T = R&gt;\n    typename std::enable_if&lt;sizeof...(Args) != 0 &amp;&amp; std::is_same&lt;T,R&gt;{}, R&gt;::type\n    operator()(Args...) { return {}; }\n\n    template &lt;typename T = R&gt;\n    typename std::enable_if&lt;sizeof...(Args) == 0 &amp;&amp; std::is_same&lt;T,R&gt;{}, R&gt;::type\n    operator()() { return {}; }\n};\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/ed4318f7e1a288ba\" rel=\"nofollow\"><strong>DEMO 3</strong></a></p>\n<h3>Option #4</h3>\n<p>Inherit from a specialized class template, possibly utilizing the <em>CRTP</em> idiom:</p>\n<pre><code>template &lt;typename T&gt;\nclass Delegate;\n\ntemplate &lt;typename T&gt;\nstruct Base;\n\ntemplate &lt;typename R, typename... Args&gt;\nstruct Base&lt;Delegate&lt;R(Args...)&gt;&gt;\n{\n    R operator()(Args...)\n    {\n        Delegate&lt;R(Args...)&gt;* that = static_cast&lt;Delegate&lt;R(Args...)&gt;*&gt;(this);\n        return {};\n    }\n};\n\ntemplate &lt;typename R&gt;\nstruct Base&lt;Delegate&lt;R()&gt;&gt;\n{\n    R operator()()\n    {\n        Delegate&lt;R()&gt;* that = static_cast&lt;Delegate&lt;R()&gt;*&gt;(this);\n        return {};\n    }\n};\n\ntemplate &lt;typename R, typename... Args&gt;\nclass Delegate&lt;R(Args...)&gt; : public Base&lt;Delegate&lt;R(Args...)&gt;&gt;\n{\n    friend struct Base&lt;Delegate&lt;R(Args...)&gt;&gt;;\n};\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/ae9c47c081ac2918\" rel=\"nofollow\"><strong>DEMO 4</strong></a></p>\n", "LastEditorUserId": "3953764", "LastActivityDate": "2015-06-27T20:13:52.023", "Score": "11", "CreationDate": "2014-11-18T06:37:31.253", "ParentId": "26987216", "CommentCount": "5", "LastEditDate": "2015-06-27T20:13:52.023", "OwnerUserId": "3953764"}, "26987216": {"ViewCount": "1374", "Body": "<p>I have a class, <code>Delegate</code>, declared like this:</p>\n<pre><code>template&lt;typename T&gt; class Delegate;\n\ntemplate&lt;typename R, typename... Args&gt;\nclass Delegate&lt;R(Args...)&gt;\n{ /*...*/ };\n</code></pre>\n<p>It can be instantiated for a function returning a <code>ReturnType</code> and taking no arguments as a <code>Delegate&lt;ReturnType()&gt;</code>. I've run into an issue that requires me to specialize the class' <code>()</code> operator for this case, but haven't been able to figure out how to coerce the compiler doing so without a compiler error.</p>\n<p>I have the following function:</p>\n<pre><code>template &lt;typename R, typename... Args&gt;\nR Delegate&lt;R(Args...)&gt;::operator()(Args... args)\n{ /*...*/ }\n</code></pre>\n<p>Adding the following specialization, I get an an error saying <code>invalid use of incomplete type 'class Delegate&lt;R()&gt;'</code>:</p>\n<pre><code>template &lt;typename R&gt;\nR Delegate&lt;R()&gt;::operator()()\n{ /*...*/ }\n</code></pre>\n<p>but I can't simply replace <code>Args...</code> with <code>void</code> either, as far as I've been able to tell... What is the proper procedure here, and (if this question applies and you are feeling extra helpful) why?</p>\n", "AcceptedAnswerId": "26988110", "Title": "Partial template specialization for variadic template where [Args...] is empty", "CreationDate": "2014-11-18T05:27:32.630", "Id": "26987216", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2014-11-18T06:38:42.743", "LastEditorUserId": "3953764", "LastActivityDate": "2015-06-27T20:13:52.023", "Score": "4", "OwnerUserId": "1732865", "Tags": "<c++><c++11><variadic-templates><partial-specialization>", "AnswerCount": "1"}});