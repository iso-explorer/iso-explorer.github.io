post_cb({"6932634": {"Id": "6932634", "PostTypeId": "2", "Body": "<p>The <code>extern \"C\"</code> has no effect on the member function:  <code>getNum()</code> has C++ language linkage.</p>\n<p>The C++ Language Standard states (C++03 \u00a77.5/4):</p>\n<blockquote>\n<p id=\"so_6932587_6932634_0\">A C language linkage is ignored for the names of class members and the member function\n  type of class member functions.</p>\n</blockquote>\n<p>So, no, you cannot call this function directly from a C program (though, as others have said, you can't compile that code as C anyway because C does not have member functions).  It is of course conceivable that some implementations might allow you to call this function from a C program via some implementation-specific method.</p>\n", "LastActivityDate": "2011-08-03T20:08:49.397", "CommentCount": "1", "CreationDate": "2011-08-03T20:08:49.397", "ParentId": "6932587", "Score": "6", "OwnerUserId": "151292"}, "bq_ids": {"n4140": {"so_6932587_6932634_0": {"length": 11, "quality": 0.9166666666666666, "section_id": 5520}}, "n3337": {"so_6932587_6932634_0": {"length": 11, "quality": 0.9166666666666666, "section_id": 5306}}, "n4659": {"so_6932587_6932634_0": {"length": 11, "quality": 0.9166666666666666, "section_id": 6955}}}, "6932649": {"Id": "6932649", "PostTypeId": "2", "Body": "<p>You can't call that member function from C in a portable way. You need to expose your C++ interface by flattening it.</p>\n", "LastActivityDate": "2011-08-03T20:09:47.800", "CommentCount": "6", "CreationDate": "2011-08-03T20:09:47.800", "ParentId": "6932587", "Score": "3", "OwnerUserId": "505088"}, "6932611": {"Id": "6932611", "PostTypeId": "2", "Body": "<p>No, since <code>getNum</code> is a member function, which C doesn't have.</p>\n<p>A possible solution to that problem is to write a C++ function to return a <code>foo</code> instance as a <code>foo*</code> (where <code>foo</code> is changed to be an empty struct) to C (I assume this is binary compiled as C++ to which C is linking), then have a free function in C++ called <code>foo_getNum</code> or something, which takes a <code>foo*</code> (whose definition is modified for the C version to be empty) which calls <code>getNum</code> on it. It wouldn't be type safe though, obviously, (but taking a <code>foo*</code> even when <code>foo</code> is empty would be better than <code>void*</code> - thanks David).</p>\n", "LastEditorUserId": "726361", "LastActivityDate": "2011-08-04T12:00:29.597", "Score": "7", "CreationDate": "2011-08-03T20:07:19.273", "ParentId": "6932587", "CommentCount": "1", "OwnerUserId": "726361", "LastEditDate": "2011-08-04T12:00:29.597"}, "6932587": {"ViewCount": "2607", "Body": "<p>Given the following C++ code,</p>\n<pre><code>#ifdef __cplusplus\nextern \"C\" {\n#endif\n        struct foo {\n                void getNum() { \n                }\n        };\n#ifdef __cplusplus\n}\n#endif\n\nint main (int argc, char * const argv[]) {\n        return 0 ;\n}\n</code></pre>\n<p>Is it possible to call <code>getNum()</code> from C?</p>\n", "AcceptedAnswerId": "6932611", "Title": "extern C and struct method", "CreationDate": "2011-08-03T20:05:20.857", "Id": "6932587", "CommentCount": "7", "PostTypeId": "1", "OwnerDisplayName": "user195488", "LastActivityDate": "2011-08-04T12:00:29.597", "Score": "5", "Tags": "<c++><c><struct><extern>", "AnswerCount": "4"}, "6933853": {"Id": "6933853", "PostTypeId": "2", "Body": "<p>The code you gave will not compile in C mode as C compiler doesn't support functions in struct. However you can create a function in C++ which can call this and link it with C linkage.\nCreate 2 files main.c and abc.cpp</p>\n<p>Code for main.c </p>\n<pre><code>extern \"C\" void getNumCaller();\nint main ()\n{\n    getNumCaller();\n    return 0;\n}\n</code></pre>\n<p>Code for abc.cpp</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct foo {\n        void getNum() {\n            std::cout &lt;&lt; \"calling getNum\" &lt;&lt; std::endl;\n        }\n};\n\nextern \"C\" void getNumCaller()\n{\n    struct foo abc;\n    abc.getNum();\n}\n</code></pre>\n<p>Compile the code : </p>\n<pre><code>g++ -o abc abc.cpp main.c\n</code></pre>\n<p>and you will get output:</p>\n<pre><code>calling getNum\n</code></pre>\n", "LastActivityDate": "2011-08-03T22:02:40.880", "CommentCount": "4", "CreationDate": "2011-08-03T22:02:40.880", "ParentId": "6932587", "Score": "1", "OwnerUserId": "450762"}});