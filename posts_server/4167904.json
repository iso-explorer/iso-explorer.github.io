post_cb({"4167904": {"CommentCount": "1", "ViewCount": "1816", "PostTypeId": "1", "LastEditorUserId": "224671", "CreationDate": "2010-11-12T18:35:40.373", "LastActivityDate": "2010-11-12T18:50:58.067", "Title": "Confusion in range of enums", "AcceptedAnswerId": "4167952", "LastEditDate": "2010-11-12T18:37:31.033", "Id": "4167904", "Score": "3", "Body": "<p>How to find the range of enums ?\nI have got two versions which state it differently when the lowest value is negative.Stroustrup says that for</p>\n<pre><code> enum e3 { min = -10 , max = 1000000 }; // range -1048576:1048575\n</code></pre>\n<p>but \nC++ Primer Plus 5th edition says</p>\n<blockquote>\n<p id=\"so_4167904_4167904_0\">for eg if the smallest enumerator is -6, the next power of two [times a minus sign] is -8, and thus the lower limit is -7</p>\n</blockquote>\n<p>I am confused which is correct ?</p>\n", "Tags": "<c++><enums>", "OwnerUserId": "506115", "AnswerCount": "3"}, "4167952": {"ParentId": "4167904", "LastEditDate": "2010-11-12T18:48:06.823", "CommentCount": "0", "CreationDate": "2010-11-12T18:42:25.403", "OwnerUserId": "34509", "LastEditorUserId": "34509", "PostTypeId": "2", "Id": "4167952", "Score": "4", "Body": "<p>I believe both are correct (see below for Primer's definition, though), depending on how compatible you want to are. The formal definition is</p>\n<blockquote>\n<p id=\"so_4167904_4167952_0\">For an enumeration where e min is the smallest enumerator and e max is the largest, the values of the enumeration are the values of the underlying type in the range b min to b max , where b min and b max are, respectively, the smallest and largest values of the smallest bit-field that can store e min and e max .</p>\n</blockquote>\n<p>For negative numbers, the question is what representation we use. The footnote to it says</p>\n<blockquote>\n<p id=\"so_4167904_4167952_1\">On a two\u2019s-complement machine, b\n  max is the smallest value greater than or equal to max (abs(e min ) \u2212 1 ,abs(e max ) ) of the form\n  2 M \u2212 1; b is zero if e is non-negative and \u2212 (b + 1 ) otherwise.</p>\n</blockquote>\n<p>If you assume sign magnitude or one's complement then the example enumeration's range is <code>-1048575:1048575</code>. For two's complement you get one more in the negative range. Primer's definiton lacks the maximum enumerator value, so I'm not sure how it comes to lower limit <code>-7</code>. If you want to be maximum compatible with other implementations, I would go with <code>-1048575:1048575</code>.</p>\n", "LastActivityDate": "2010-11-12T18:48:06.823"}, "bq_ids": {"n4140": {"so_4167904_4167970_0": {"section_id": 5467, "quality": 0.75, "length": 12}}, "n3337": {"so_4167904_4167970_0": {"section_id": 5253, "quality": 0.75, "length": 12}}, "n4659": {"so_4167904_4167970_0": {"section_id": 6901, "quality": 0.75, "length": 12}}}, "4167961": {"ParentId": "4167904", "CommentCount": "0", "Body": "<p>They are exactly same statements, just using different scales. To store number 1000000 you need 20 bits, so your range is -1048576 to +1048575. To store -6 you need 3 bits, so the range you can store in those 3 bits is -8 to +7.</p>\n", "OwnerUserId": "489566", "PostTypeId": "2", "Id": "4167961", "Score": "0", "CreationDate": "2010-11-12T18:43:12.077", "LastActivityDate": "2010-11-12T18:43:12.077"}, "4167970": {"ParentId": "4167904", "LastEditDate": "2010-11-12T18:50:58.067", "CommentCount": "0", "CreationDate": "2010-11-12T18:44:26.070", "OwnerUserId": "224671", "LastEditorUserId": "224671", "PostTypeId": "2", "Id": "4167970", "Score": "2", "Body": "<p>The C++ standard says (\u00a7[dcl.enum]/7):</p>\n<blockquote>\n<p id=\"so_4167904_4167970_0\">Otherwise, for an enumeration where <em>e<sub>min</sub></em> is the smallest enumerator and <em>e<sub>max</sub></em> is the largest, the values of the enumeration are the values in the range <em>b<sub>min</sub></em> to <em>b<sub>min</sub></em>, defined as follows:</p>\n<ul>\n<li>Let <em>K</em> be 1 for a two\u2019s complement representation ....</li>\n<li><em>b<sub>max</sub></em> is the smallest value greater than or equal to max(|<em>e<sub>min</sub></em>| \u2212 <em>K</em>, |<em>e<sub>max</sub></em>|) and equal to 2<sup><em>M</em></sup> \u2212 1, where <em>M</em> is a non-negative integer.</li>\n<li><em>b<sub>min</sub></em> is zero if <em>e<sub>min</sub></em> is non-negative and \u2212(<em>b<sub>max</sub></em> + <em>K</em>) otherwise. </li>\n</ul>\n</blockquote>\n<p>For example, in the first case,</p>\n<ul>\n<li><em>e<sub>min</sub></em> = -10, <em>e<sub>max</sub></em> = 1000000</li>\n<li>Thus <em>b<sub>max</sub></em> \u2265 max(10 \u2212 1, 1000000) = 1000000</li>\n<li><em>b<sub>max</sub></em> must be of the form 2<sup><em>M</em></sup> \u2212 1, so we use <em>M</em> = 20 \u21d2 <em>b<sub>max</sub></em> = 1048575</li>\n<li><em>e<sub>min</sub></em> is negative, so <em>b<sub>min</sub></em> = \u2212(1048575 + 1) = \u22121048576.</li>\n</ul>\n<p>In the second case,</p>\n<ul>\n<li><em>e<sub>min</sub></em> = -6, <em>e<sub>max</sub></em> = unspecified</li>\n<li>Thus <em>b<sub>max</sub></em> \u2265 max(6 \u2212 1, unspecified) = 5 or more</li>\n<li>If that unspecified is indeed less than 5, then <em>b<sub>max</sub></em> must be 7, and <em>b<sub>min</sub></em> is -8.</li>\n<li>However, if that unspecified number is &gt;7, then the range will be wider.</li>\n</ul>\n<p>Therefore, C++ Primer is incorrect, since it ignores the effect of the upper bound.</p>\n", "LastActivityDate": "2010-11-12T18:50:58.067"}});