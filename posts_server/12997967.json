post_cb({"12997987": {"ParentId": "12997967", "CommentCount": "1", "Body": "<p>The cv-modifiers of the member functions correspond to the qualification of the hidden <code>this</code> parameter.</p>\n<p><code>static</code> functions have no <code>this</code> parameter. Therefore, they need no cv-qualifiers. So it was decided (IMHO rightly, as otherwise, it would have no meaning) to disallow them on <code>static</code> functions.</p>\n<p>BTW <code>static</code> member functions can't also be <code>virtual</code>, pure (<code>=0</code>), deleted, defaulted, <code>&amp;&amp;</code> etc.</p>\n", "OwnerUserId": "51831", "PostTypeId": "2", "Id": "12997987", "Score": "14", "CreationDate": "2012-10-21T12:54:17.227", "LastActivityDate": "2012-10-21T12:54:17.227"}, "12997967": {"CommentCount": "0", "AcceptedAnswerId": "12997997", "PostTypeId": "1", "ClosedDate": "2012-10-21T15:03:04.263", "LastEditorUserId": "-1", "CreationDate": "2012-10-21T12:52:06.417", "LastActivityDate": "2012-10-21T13:11:01.923", "LastEditDate": "2017-05-23T12:31:36.407", "ViewCount": "6761", "FavoriteCount": "5", "Title": "C++ : Why cant static functions be declared as const or volatile or const volatile", "Id": "12997967", "Score": "8", "Body": "<blockquote>\n<p id=\"so_12997967_12997967_0\"><strong>Possible Duplicate:</strong><br>\n<a href=\"https://stackoverflow.com/questions/7035356/c-why-static-member-function-cant-be-created-with-const-qualifier\">C++ - Why static member function can\u2019t be created with \u2018const\u2019 qualifier</a> </br></p>\n</blockquote>\n<p>Was curious to know the reason why static member functions cant be declared as const or volatile or const volatile ?</p>\n<pre><code>#include&lt;iostream&gt;\n\nclass Test \n{     \n   static void fun() const \n   { // compiler error\n       return;\n   }\n};\n</code></pre>\n", "Tags": "<c++>", "OwnerUserId": "1489373", "AnswerCount": "4"}, "12998038": {"ParentId": "12997967", "CommentCount": "0", "Body": "<p>Static member functions are global, free functions that do not depend on an object (i.e. a class instance). The CV qualifiers on non-static member functions refer to the type of the <em>object</em> on which they are called, and this notion simply doesn't apply to static member functions.</p>\n<p>Example:</p>\n<pre><code>struct Foo\n{\n    void f();        // Overload #1\n    void f() const;  // Overload #2\n    static void g();\n};\n\nint main()\n{\n    Foo x;\n\n    x.f();                            // calls overload #1\n    static_cast&lt;Foo const &amp;&gt;(x).f();  // calls overload #2\n\n    Foo::g();                         // does not know about any instance!\n\n    x.g();                            // same as Foo::g(); \"x\" is a red herring\n}\n</code></pre>\n", "OwnerUserId": "596781", "PostTypeId": "2", "Id": "12998038", "Score": "1", "CreationDate": "2012-10-21T13:02:25.313", "LastActivityDate": "2012-10-21T13:02:25.313"}, "12998099": {"ParentId": "12997967", "CommentCount": "0", "Body": "<p>There is no \"current object\" when executing a static function so it makes little sense to discuss about static functions being <code>const</code> or not.</p>\n<p>Note that you can call a <code>static</code> function using an instance, but that's just a strange C++ \"feature\" (sometimes handy because in C++03 it was hard to get the type of a value).</p>\n<pre><code>struct Foo {\n    static void f();\n};\n\nvoid bar()\n{\n    Foo foo_instance;\n    foo_instance.f();  // Exactly the same as Foo::f()\n}\n</code></pre>\n<p>I can understand that you would like to be able to describe \"const static functions\" that don't alter any static data member and that can also only call other const static functions.</p>\n<p>But this distinction is not present in C++.</p>\n", "OwnerUserId": "320726", "PostTypeId": "2", "Id": "12998099", "Score": "1", "CreationDate": "2012-10-21T13:11:01.923", "LastActivityDate": "2012-10-21T13:11:01.923"}, "bq_ids": {"n4140": {"so_12997967_12997997_0": {"section_id": 5905, "quality": 0.8, "length": 28}}, "n3337": {"so_12997967_12997997_0": {"section_id": 5677, "quality": 0.8, "length": 28}}, "n4659": {"so_12997967_12997997_0": {"section_id": 7387, "quality": 0.8, "length": 28}}}, "12997997": {"ParentId": "12997967", "CommentCount": "3", "Body": "<p>Because that's what the standard says:</p>\n<h3>9.4.1 Static member functions [class.static.mfct]</h3>\n<blockquote>\n<p id=\"so_12997967_12997997_0\">2) [ Note: A static member function does not have a this pointer (9.3.2). \u2014end note ] A <code>static</code> member\n  function shall not be <code>virtual</code>. There shall not be a <code>static</code> and a non-<code>static</code> member function with the\n  same name and the same parameter types (13.1). <strong>A static member function shall not be declared <code>const</code>,\n  <code>volatile</code>, or <code>const volatile</code></strong>. (emphasis mine)</p>\n</blockquote>\n<p>The reason for this is that a <code>const</code> (or <code>volatile</code> or <code>virtual</code>) <code>static</code> method wouldn't make sense (in the traditional sense, see below). For example, <code>const</code> implies you can't modify the object's members, but in the case of statics, there's no object to talk about.</p>\n<p>You could argue that a <code>const</code> <code>static</code> could apply to other <code>static</code> members, but this option was regarded as pointless.</p>\n", "OwnerUserId": "673730", "PostTypeId": "2", "Id": "12997997", "Score": "9", "CreationDate": "2012-10-21T12:56:11.460", "LastActivityDate": "2012-10-21T12:56:11.460"}});