post_cb({"bq_ids": {"n4140": {"so_39683781_39683907_1": {"length": 18, "quality": 1.0, "section_id": 30}, "so_39683781_39683907_2": {"length": 11, "quality": 0.9166666666666666, "section_id": 32}, "so_39683781_39683907_5": {"length": 12, "quality": 0.9230769230769231, "section_id": 7211}, "so_39683781_39683907_4": {"length": 57, "quality": 0.95, "section_id": 7211}}, "n3337": {"so_39683781_39683907_4": {"length": 57, "quality": 0.95, "section_id": 6955}, "so_39683781_39683907_2": {"length": 11, "quality": 0.9166666666666666, "section_id": 29}, "so_39683781_39683907_5": {"length": 12, "quality": 0.9230769230769231, "section_id": 6955}, "so_39683781_39683907_1": {"length": 18, "quality": 1.0, "section_id": 27}}, "n4659": {"so_39683781_39683907_1": {"length": 18, "quality": 1.0, "section_id": 30}, "so_39683781_39683907_2": {"length": 11, "quality": 0.9166666666666666, "section_id": 32}, "so_39683781_39683907_5": {"length": 11, "quality": 0.8461538461538461, "section_id": 8720}, "so_39683781_39683907_4": {"length": 53, "quality": 0.8833333333333333, "section_id": 8720}}}, "39683781": {"ViewCount": "153", "Body": "<p>Is <code>static_cast&lt;int&gt;(long long)</code> safe (guaranteed behavior)?</p>\n<p>Or I should <code>static_cast&lt;int&gt;(val &amp; 0xffffffffLL)</code> first?</p>\n", "Title": "Is static_cast<int>(long long) safe?", "CreationDate": "2016-09-25T05:41:14.130", "LastActivityDate": "2016-09-25T07:04:58.313", "CommentCount": "2", "LastEditDate": "2016-09-25T07:04:58.313", "PostTypeId": "1", "LastEditorUserId": "4987285", "Id": "39683781", "Score": "0", "OwnerUserId": "4927088", "Tags": "<c++><casting>", "AnswerCount": "1"}, "39683907": {"Id": "39683907", "PostTypeId": "2", "Body": "<p>It is safe, however, it may be implementation defined.</p>\n<p>First,</p>\n<blockquote>\n<p id=\"so_39683781_39683907_0\">4.8 Integral conversions <a href=\"http://eel.is/c++draft/conv.integral#3\" rel=\"nofollow\"><strong>[conv.integral]</strong></a></p>\n<p id=\"so_39683781_39683907_1\"><em>1</em> <strong>A prvalue of an integer type can be converted to a prvalue of\n  another integer type</strong>. A prvalue of an unscoped enumeration type can\n  be converted to a prvalue of an integer type.</p>\n<p id=\"so_39683781_39683907_2\"><em>3</em> If the destination type is signed, the value is unchanged if it can\n  be represented in the destination type; <strong>otherwise, the value is\n  implementation-defined.</strong></p>\n</blockquote>\n<p>Now,</p>\n<blockquote>\n<p id=\"so_39683781_39683907_3\">3.9.1 Fundamental types <strong><a href=\"http://eel.is/c++draft/basic.fundamental#2\" rel=\"nofollow\">[basic.fundamental]</a></strong></p>\n<p id=\"so_39683781_39683907_4\"><em>2</em> There are five standard signed integer types : <code>signed char</code>, <code>short int</code>, <code>int</code>, <code>long int</code>, and <code>long long int</code>. In this list,\n  each type provides at least as much storage as those preceding it in\n  the list. There may also be implementation-defined extended signed\n  integer types. The standard and extended signed integer types are\n  collectively called signed integer types. Plain ints have the natural\n  size suggested by the architecture of the execution\n  environment<sup>46</sup>; the other signed integer types are provided\n  to meet special needs.</p>\n<p id=\"so_39683781_39683907_5\"><sub> <em>46)</em> <code>int</code> must also be large enough to contain any value in\n  the range <code>[INT_MIN, INT_MAX]</code>, as defined in the header\n  <code>&lt;climits&gt;</code>.</sub></p>\n</blockquote>\n<p>Which means, that <code>long long</code> is as least as big as <code>int</code>. If they are of same size, conversion between them does nothing. If <code>long long</code> is bigger, it is implementation defined, but I've never seen an implementation, which would do something else other than taking first <code>n</code> bytes according to size.</p>\n", "LastActivityDate": "2016-09-25T06:00:49.367", "CommentCount": "3", "CreationDate": "2016-09-25T06:00:49.367", "ParentId": "39683781", "Score": "1", "OwnerUserId": "3087601"}});