post_cb({"45496423": {"CommentCount": "6", "ViewCount": "78", "CreationDate": "2017-08-04T00:15:30.817", "LastActivityDate": "2017-08-04T00:56:54.380", "Title": "Meaning of I(I())", "PostTypeId": "1", "Id": "45496423", "Score": "4", "Body": "<p>Sample code:</p>\n<pre><code>typedef int I;\nstruct X{ X(int); };\n\nint main()\n{\n    int(int());\n    X(X());\n    I(I());\n}\n</code></pre>\n<p>The line <code>int(int());</code> is an expression using functional cast notation - it's a temporary <code>int</code> initialized with a value-initialized <code>int</code>. </p>\n<p>The line <code>X(X());</code> is a declaration of a function named <code>X</code> taking no arguments returning struct <code>X</code>. </p>\n<p>My question is: what is the meaning of <code>I(I())</code> here?  And what rules in the standard determine the difference in meaning between these three cases?</p>\n", "Tags": "<c++><language-lawyer><most-vexing-parse>", "OwnerUserId": "1505939", "AnswerCount": "1"}, "45496586": {"ParentId": "45496423", "LastEditDate": "2017-08-04T00:56:54.380", "CommentCount": "4", "CreationDate": "2017-08-04T00:38:25.580", "OwnerUserId": "2079303", "LastEditorUserId": "2079303", "PostTypeId": "2", "Id": "45496586", "Score": "3", "Body": "<p>The rule says that if a construct is ambiguously syntax for either a declaration, or a statement, then it is considered to be a declaration.</p>\n<blockquote>\n<p id=\"so_45496423_45496586_0\">[stmt.ambig] 1 There is an ambiguity in the grammar involving expression-statements and declarations: An expression-\n  statement with a function-style explicit type conversion (5.2.3) as its leftmost subexpression can be indis-\n  tinguishable from a declaration where the first declarator starts with a (. In those cases the statement is a\n  declaration.</p>\n</blockquote>\n<p><code>X(X());</code> is ambiguous, because it could be either a cast, or a function declaration, so it is considered to be a declaration.</p>\n<p><code>int(int());</code> cannot be a function declaration, because <code>int</code>, being a keyword, is not a valid name for a function. So, there is no ambiguity, it is a cast.</p>\n<p>Likewise, <code>I(I());</code> cannot be a function declaration, because although not a keyword, <code>I</code> is not a valid name either because it would redeclare the type <code>I</code> as a function, which is not allowed, so it is a cast.</p>\n", "LastActivityDate": "2017-08-04T00:56:54.380"}, "bq_ids": {"n4140": {"so_45496423_45496586_0": {"section_id": 3921, "quality": 0.7931034482758621, "length": 23}}, "n3337": {"so_45496423_45496586_0": {"section_id": 3781, "quality": 0.6206896551724138, "length": 18}}, "n4659": {"so_45496423_45496586_0": {"section_id": 4807, "quality": 0.7931034482758621, "length": 23}}}});