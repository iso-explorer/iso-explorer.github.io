post_cb({"8535766": {"ParentId": "8535731", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Definitions are not executable code. They are just instructions to the compiler, letting it know the size and the type of the variable. In this sense, the definition is not bypassed by the <code>goto</code> statement.</p>\n<p>If you use a class with a constructor instead of an <code>int</code>, the call of the constructor would be bypassed by the <code>goto</code>, but the storage would be allocated anyway. The class instance would remain uninitialized, however, so using it before its definition/initialization line gets the control is an error.</p>\n", "OwnerUserId": "335858", "LastEditorUserId": "335858", "LastEditDate": "2011-12-16T14:51:45.300", "Id": "8535766", "Score": "9", "CreationDate": "2011-12-16T14:44:49.787", "LastActivityDate": "2011-12-16T14:51:45.300"}, "8535765": {"ParentId": "8535731", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>Long story short; <code>goto</code> will result is a runtime jump, variable definition/declaration will result in storage allocation, compile time.</p>\n<p>The compiler will see and decide on how much storage to allocate for an <code>int</code>, it will also make so that this allocated storage will be set to <code>3</code> when \"hitting\" <code>i = 3;</code>.</p>\n<p>That memory location will be there even if there is a <code>goto</code> at the start of your function, before the declaration/definition, just as in your example.</p>\n<hr>\n<h2>Very silly simile</h2>\n<p>If I place a log on the ground and my friend runs (with his eyes closed) and jumps over it, the log will still be there - even if he hasn't seen or felt it.</p>\n<p>It's realistic to say that he could turn around (at a later time) and set it on fire, if he wanted to. His jump doesn't make the log magically disappear.</p>\n</hr>", "OwnerUserId": "1090079", "LastEditorUserId": "1090079", "LastEditDate": "2012-06-15T15:06:32.357", "Id": "8535765", "Score": "42", "CreationDate": "2011-12-16T14:44:48.010", "LastActivityDate": "2012-06-15T15:06:32.357"}, "8535804": {"ParentId": "8535731", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Your code is fine. The variable lives wherever it would live had the <code>goto</code> not been there.</p>\n<p>Note that there are situations where you can't jump over a declaration:</p>\n<blockquote>\n<p id=\"so_8535731_8535804_0\"><strong>C++11 6.7 Declaration statement [stmt.dcl]</strong></p>\n<p id=\"so_8535731_8535804_1\">3 It is possible to transfer into a block, but not in a way that bypasses declarations with initialization. A\n  program that jumps from a point where a variable with automatic storage duration is not in scope to a\n  point where it is in scope is ill-formed unless the variable has scalar type, class type with a trivial default\n  constructor and a trivial destructor, a cv-qualified version of one of these types, or an array of one of the\n  preceding types and is declared without an initializer (8.5). [ Example:</p>\n<pre><code>void f()\n{\n    // ...\n    goto lx;    // ill-formed: jump into scope of `a'\n    // ...\nly:\n    X a = 1;\n    // ...\nlx:\n    goto ly;    // ok, jump implies destructor\n                // call for `a' followed by construction\n                // again immediately following label ly\n}\n</code></pre>\n<p id=\"so_8535731_8535804_2\">\u2014end example ]</p>\n</blockquote>\n", "OwnerUserId": "367273", "LastEditorUserId": "84745", "LastEditDate": "2011-12-20T20:41:07.173", "Id": "8535804", "Score": "16", "CreationDate": "2011-12-16T14:47:49.723", "LastActivityDate": "2011-12-20T20:41:07.173"}, "8535755": {"ParentId": "8535731", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_8535731_8535755_0\">In my mind, always, definition means storage allocation.</p>\n</blockquote>\n<p>This is not correct. The storage for the variable is reserved by the compiler when it creates the stack-layout for the function. The <code>goto</code> just bypasses the initialization. Since you assign a value before printing, everything is fine.</p>\n", "OwnerUserId": "160206", "PostTypeId": "2", "Id": "8535755", "Score": "8", "CreationDate": "2011-12-16T14:43:42.533", "LastActivityDate": "2011-12-16T14:43:42.533"}, "8535792": {"ParentId": "8535731", "CommentCount": "0", "Body": "<p>The definition of a variable DOES NOT allocate memory for the variable. It does tell the compiler to prepare appropriate memory space to store the variable though, but the memory is not allocated when control passed the definition.</p>\n<p>What really matters here is initialization.</p>\n", "OwnerUserId": "1058916", "PostTypeId": "2", "Id": "8535792", "Score": "0", "CreationDate": "2011-12-16T14:46:39.817", "LastActivityDate": "2011-12-16T14:46:39.817"}, "8535841": {"ParentId": "8535731", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The control of flow has nothing to do with variable's storage which is reserved at compile time by the compiler.</p>\n<p>The <code>goto</code> statement only effects the <em>dynamic</em> initialization of the object. For built-in types and POD types, it doesn't matter, for they can remain uninitialized. However, for non-POD types, this would result in compilation error. For example see this</p>\n<pre><code>struct A{ A(){} };  //it is a non-POD type\n\nvoid f()\n{\n    goto label;\n\n    A a;     //error - you cannot skip this!\n\nlabel:\n    return;\n}\n</code></pre>\n<p>Error:</p>\n<pre><code>prog.cpp: In function \u2018void f()\u2019:\nprog.cpp:8: error: jump to label \u2018label\u2019\nprog.cpp:5: error:   from here\nprog.cpp:6: error:   crosses initialization of \u2018A a\u2019\n</code></pre>\n<p>See here : <a href=\"http://ideone.com/p6kau\" rel=\"nofollow noreferrer\">http://ideone.com/p6kau</a></p>\n<p>In this example <code>A</code> is a non-POD type <a href=\"https://stackoverflow.com/questions/5442717/cant-c-pod-type-have-any-constructor\">because it has user-defined constructor</a>, which means the object needs to be <em>dynamically</em> initialized, but since the <code>goto</code> statement attempts to skip this, the compiler generates error, as it should.</p>\n<p>Please note that objects of only built-in types and POD types can remain uninitialized. </p>\n", "OwnerUserId": "415784", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:30:20.237", "Id": "8535841", "Score": "2", "CreationDate": "2011-12-16T14:51:17.627", "LastActivityDate": "2011-12-16T14:57:30.693"}, "8535767": {"ParentId": "8535731", "CommentCount": "0", "Body": "<p>To make it short, variable declaration is lexical, <em>i.e.</em> pertaining to the lexical <code>{}</code>-enclosed blocks.  The binding is valid from the line it is declared to the end of the block.  It is unaffected by flow control (<code>goto</code>).</p>\n<p>Variable assignment of locol (stack) variables, on the other hand, is a runtime operation performed when the control flow gets there.  So <code>goto</code> has an influence on that.</p>\n<p>Things get a bit more tricky when object construction becomes involved, but that's not your case here.</p>\n", "OwnerUserId": "12274", "PostTypeId": "2", "Id": "8535767", "Score": "1", "CreationDate": "2011-12-16T14:44:53.173", "LastActivityDate": "2011-12-16T14:44:53.173"}, "8535731": {"CommentCount": "1", "AcceptedAnswerId": "8535765", "PostTypeId": "1", "LastEditorUserId": "110204", "CreationDate": "2011-12-16T14:41:49.633", "LastActivityDate": "2012-06-15T15:06:32.357", "LastEditDate": "2011-12-16T14:49:01.650", "ViewCount": "1006", "FavoriteCount": "6", "Title": "How can a variable be used when its definition is bypassed?", "Id": "8535731", "Score": "34", "Body": "<p>In my mind, always, definition means storage allocation. </p>\n<p>In the following code, <code>int i</code> allocates a 4-byte (typically) storage on program stack and bind it to <code>i</code>, and <code>i = 3</code> assigns 3 to that storage. But because of <code>goto</code>, definition is bypassed which means there is no storage allocated for <code>i</code>.</p>\n<p>I heard that local variables are allocated either at the entry of the function (<code>f()</code> in this case) where they reside, or at the point of definition.</p>\n<p><em>But either way, how can <code>i</code> be used while it hasn't been defined yet (no storage at all)? Where does the value three assigned to when executing <code>i = 3</code>?</em></p>\n<pre><code>void f()\n{\n    goto label;\n    int i;\n\nlabel:\n    i = 3;\n    cout &lt;&lt; i &lt;&lt; endl; //prints 3 successfully\n}\n</code></pre>\n", "Tags": "<c++><scope><variable-declaration>", "OwnerUserId": "419391", "AnswerCount": "8"}, "8535828": {"ParentId": "8535731", "CommentCount": "0", "Body": "<p>The position of the declaration of <code>i</code> is irrelevant to the compiler.  You can prove this to yourself by compiling your code with <code>int i</code> before the <code>goto</code> and then after and comparing the generated assembly:</p>\n<pre><code>g++ -S test_with_i_before_goto.cpp -o test1.asm\ng++ -S test_with_i_after_goto.cpp -o test2.asm\ndiff -u test1.asm test2.asm\n</code></pre>\n<p>The only difference in this case is the source file name (<code>.file</code>) reference.</p>\n", "OwnerUserId": "21926", "PostTypeId": "2", "Id": "8535828", "Score": "1", "CreationDate": "2011-12-16T14:50:03.133", "LastActivityDate": "2011-12-16T14:50:03.133"}, "bq_ids": {"n4140": {"so_8535731_8535804_1": {"section_id": 3918, "quality": 0.9523809523809523, "length": 40}}, "n3337": {"so_8535731_8535804_1": {"section_id": 3778, "quality": 0.9523809523809523, "length": 40}}, "n4659": {"so_8535731_8535804_1": {"section_id": 4804, "quality": 0.9761904761904762, "length": 41}}}});