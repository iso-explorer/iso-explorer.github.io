post_cb({"22785370": {"ParentId": "22784926", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_22784926_22785370_0\">Shouldn\u2019t compiler took a function (a) instead a class member (A::a)?</p>\n</blockquote>\n<p>No; the member definition is in the class scope, so unqualified lookup of <code>a</code> gives the member.</p>\n<blockquote>\n<p id=\"so_22784926_22785370_1\">Can you give any reference to C++ specification where it is explained?</p>\n</blockquote>\n<p>Class scope is defined in C++11 3.3.7; in particular:</p>\n<blockquote>\n<p id=\"so_22784926_22785370_2\">The potential scope of a declaration that extends to or past the end of a class definition also extends to the regions defined by its member definitions, even if the members are defined lexically outside the class (this includes <strong>static data member definitions</strong>)</p>\n</blockquote>\n", "OwnerUserId": "204847", "PostTypeId": "2", "Id": "22785370", "Score": "3", "CreationDate": "2014-04-01T12:05:44.243", "LastActivityDate": "2014-04-01T12:05:44.243"}, "22784926": {"CommentCount": "0", "ViewCount": "160", "CreationDate": "2014-04-01T11:46:15.237", "LastActivityDate": "2014-04-01T12:05:44.243", "Title": "C++: name lookup in definition of class static variable in initializer", "AcceptedAnswerId": "22785370", "PostTypeId": "1", "Id": "22784926", "Score": "4", "Body": "<p>I have simple code:</p>\n<pre><code>#include &lt;type_traits&gt;\n\nclass A {\npublic:\n    static int a;\n};\n\nvoid a() {}\n\nint A::a = [](){static_assert(std::is_function&lt;decltype(a)&gt;::value,\"'a' is not a function\");return 777;}();\n\nint main() {\n\n    return 0;\n}\n</code></pre>\n<p>During compilation (with g++ 4.8.1 and clang 3.4) a get static assert error about 'a' is not a function. But inside assert, in decltype I put 'a' (which is a function) not A::a.\nShouldn\u2019t compiler took a function (a) instead a class member (A::a)?</p>\n<p>Can you give any reference to C++ specification where it is explained? </p>\n", "Tags": "<c++><c++11><static-members><decltype><static-assert>", "OwnerUserId": "3484845", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_22784926_22785370_2": {"section_id": 7070, "quality": 0.9629629629629629, "length": 26}}, "n3337": {"so_22784926_22785370_2": {"section_id": 6814, "quality": 0.9629629629629629, "length": 26}}, "n4659": {"so_22784926_22785370_2": {"section_id": 8570, "quality": 0.9629629629629629, "length": 26}}}, "22785053": {"ParentId": "22784926", "CommentCount": "0", "Body": "<p>The compiler will always look at the closes scope first, and as you are defining <code>A::a</code> the closest scope is the scope of the class <code>A</code>.</p>\n", "OwnerUserId": "440558", "PostTypeId": "2", "Id": "22785053", "Score": "2", "CreationDate": "2014-04-01T11:51:24.940", "LastActivityDate": "2014-04-01T11:51:24.940"}});