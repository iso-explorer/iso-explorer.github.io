post_cb({"12987466": {"ParentId": "12987259", "CommentCount": "15", "Body": "<p>Here's one way I can declare a variable in C++:</p>\n<pre><code>int scientist = 7;\n</code></pre>\n<p>After this declaration (and definition, in this case), I can use <code>scientist</code> to read and set its value, take its address, etc. Here's another kind of declaration:-</p>\n<pre><code>class Cloud {\n    public:\n    static int cumulonimbus = -1;\n};\n</code></pre>\n<p>This one is a bit more complicated, because I have to refer to the new variable as <code>Cloud::cumulonimbus</code>, but I can still read and set its value, so it's still obviously a variable. Here's a yet different kind of declaration:-</p>\n<pre><code>class Chamber {\n    public:\n    int pot;\n};\n</code></pre>\n<p>But after this declaration, there isn't a variable called <code>pot</code>, or <code>Chamber::pot</code>. In fact there's no new variable at all. I've declared a new class, and <em>when I later declare an instance of that class</em> it will have a member called <code>pot</code>, but right now, nothing is called that.</p>\n<p>A non-static data member of class doesn't create a new variable itself, it just helps you to define the properties of the class. If it did create a new variable, you'd be able to write code like this:</p>\n<pre><code>class Chamber {\n    public:\n    int pot;\n};\n\nvoid f(bool b) {\n    if (b)\n        Chamber::pot = 2;\n}\n</code></pre>\n<p>What would that even mean? Would it find every instance of <code>Chamber</code> and set all their <code>pot</code>s to 2? It's a nonsense.</p>\n<p>A quick footnote: the language of the standard here is talking specifically about references, but to make the examples easier, I've been using non-references. I hope you can see this doesn't change the principle of it.</p>\n", "OwnerUserId": "967945", "PostTypeId": "2", "Id": "12987466", "Score": "6", "CreationDate": "2012-10-20T10:23:07.440", "LastActivityDate": "2012-10-20T10:23:07.440"}, "12987259": {"CommentCount": "0", "AcceptedAnswerId": "12987466", "CreationDate": "2012-10-20T09:53:30.207", "LastActivityDate": "2012-10-20T10:23:07.440", "PostTypeId": "1", "ViewCount": "680", "FavoriteCount": "1", "Title": "Why is a non-static data member reference not a variable?", "Id": "12987259", "Score": "9", "Body": "<p>The definition of a <em>variable</em> in C++11 is as follows (\u00a73/6):</p>\n<blockquote>\n<p id=\"so_12987259_12987259_0\">A <em>variable</em> is introduced by the declaration of a reference other than a non-static data member or of an object. The variable\u2019s name denotes the reference or object.</p>\n</blockquote>\n<p>So a non-static data member reference is not a variable. Why is this distinction necessary? What's the rationale here?</p>\n", "Tags": "<c++><variables><c++11><standards><definition>", "OwnerUserId": "150634", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_12987259_12987259_0": {"section_id": 7029, "quality": 0.875, "length": 14}}, "n3337": {"so_12987259_12987259_0": {"section_id": 6775, "quality": 0.875, "length": 14}}, "n4659": {"so_12987259_12987259_0": {"section_id": 8526, "quality": 0.875, "length": 14}}}});