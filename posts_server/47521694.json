post_cb({"bq_ids": {"n4140": {"so_47521694_47529137_2": {"length": 6, "quality": 0.6666666666666666, "section_id": 5961}, "so_47521694_47529137_1": {"length": 17, "quality": 0.8947368421052632, "section_id": 5962}}, "n3337": {"so_47521694_47529137_2": {"length": 6, "quality": 0.6666666666666666, "section_id": 5730}, "so_47521694_47529137_1": {"length": 17, "quality": 0.8947368421052632, "section_id": 5731}}, "n4659": {"so_47521694_47529137_2": {"length": 6, "quality": 0.6666666666666666, "section_id": 7448}, "so_47521694_47529137_1": {"length": 17, "quality": 0.8947368421052632, "section_id": 7451}}}, "47521694": {"ViewCount": "69", "Body": "<p>I have read the item31 of \"Effective Modern C++\" and web page of <a href=\"http://en.cppreference.com/w/cpp/language/lambda\" rel=\"nofollow noreferrer\">http://en.cppreference.com/w/cpp/language/lambda</a> and wonder if I can define a lambda by its definite type instead of the wrapped type of std::function or keyword of <code>auto</code> and how can I accomplish that.</p>\n<p>for instance, for the type <code>int</code>:</p>\n<pre><code>auto x_1 = 5; // type deduction\nint x_2 = 5;  // defined by definite type\n// both x_1, x_2 are int variables of value 5\n</code></pre>\n<p>now, when the problem comes to the lambda:</p>\n<pre><code>auto f_1_0 = []()-&gt;int{return 5;};\nstd::function&lt;int(void)&gt; f_1_1 = []()-&gt;int{return 5;};\nSomeType f_2 = []()-&gt;int{return 5;}; // what's the SomeType here?\n</code></pre>\n", "Title": "How to define a lambda expression without both std::function and auto?", "CreationDate": "2017-11-27T23:48:03.807", "LastActivityDate": "2017-11-29T03:16:13.093", "CommentCount": "6", "PostTypeId": "1", "Id": "47521694", "Score": "1", "OwnerUserId": "5978133", "Tags": "<c++><c++11><lambda>", "AnswerCount": "2"}, "47522732": {"Id": "47522732", "PostTypeId": "2", "Body": "<p>Each lambda expression has its own unique type.</p>\n<p>Here the expressions f_1 and f2 have different types.</p>\n<pre><code>auto f_1 = []()-&gt;int {return 5; }; \nauto f_2 = []()-&gt;int {return 5; }; \n</code></pre>\n<p>Assigning f_2 = f_1 is illegal.</p>\n<p>The standard says the types are \"unnamed.\" In practice, the compiler probably makes up a new, hiiden typename for each lambda. Visual C++17 gave them the following names.</p>\n<pre><code>classmain::&lt;lambda_7e9d7fb093569d78a8c871761cbb39d7&gt;\nclassmain::&lt;lambda_8f061a3967cd210147d6a4978ab6e125&gt;\n</code></pre>\n<p>Not very useful information.</p>\n", "LastEditorUserId": "445296", "LastActivityDate": "2017-11-29T03:16:13.093", "Score": "4", "CreationDate": "2017-11-28T01:57:04.407", "ParentId": "47521694", "CommentCount": "0", "LastEditDate": "2017-11-29T03:16:13.093", "OwnerUserId": "445296"}, "47529137": {"Id": "47529137", "PostTypeId": "2", "Body": "<p>The standard says that the type of the lambda is <em>unnamed</em> so the implementation creates a implementation defined name it uses similar to the other unnamed classes, structs enumc etc.</p>\n<blockquote>\n<p id=\"so_47521694_47529137_0\"><strong>ISO C++: 5.1.2 Lambda expressions [expr.prim.lambda]</strong></p>\n<p id=\"so_47521694_47529137_1\">3 The type of the lambda-expression (which is also the type of the closure object) is a unique, <em>unnamed</em> non-union class type \u2014 called the closure type \u2014 whose properties are described below.</p>\n</blockquote>\n<p>The standard also says that the lambda 'behaves like a function' so you it could be used with the <code>std::function</code> template:</p>\n<blockquote>\n<p id=\"so_47521694_47529137_2\">[Note: A closure object behaves like a function object (20.9).\u2014end note] </p>\n</blockquote>\n<p>And if you really want to have names for your can use the old-fashioned <a href=\"https://en.wikipedia.org/wiki/Function_object#In_C_and_C.2B.2B\" rel=\"nofollow noreferrer\">functors</a> and do all the work the compiler do for you with the <a href=\"http://en.cppreference.com/w/cpp/language/lambda\" rel=\"nofollow noreferrer\">lambdas</a>.</p>\n", "LastEditorUserId": "8918119", "LastActivityDate": "2017-11-28T11:38:28.090", "Score": "1", "CreationDate": "2017-11-28T10:23:07.673", "ParentId": "47521694", "CommentCount": "0", "LastEditDate": "2017-11-28T11:38:28.090", "OwnerUserId": "8918119"}});