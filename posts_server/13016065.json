post_cb({"bq_ids": {"n4140": {"so_13016065_13016273_2": {"length": 5, "quality": 0.625, "section_id": 7035}, "so_13016065_13016273_3": {"length": 5, "quality": 0.625, "section_id": 7035}}, "n3337": {"so_13016065_13016273_2": {"length": 5, "quality": 0.625, "section_id": 6781}, "so_13016065_13016273_3": {"length": 5, "quality": 0.625, "section_id": 6781}}, "n4659": {"so_13016065_13016273_2": {"length": 5, "quality": 0.625, "section_id": 8532}, "so_13016065_13016273_3": {"length": 5, "quality": 0.625, "section_id": 8532}}}, "13016065": {"ViewCount": "970", "Body": "<p>To get this code to compile:</p>\n<pre><code>std::vector&lt;Foo&gt; factory() \n{\n    std::vector&lt;Foo&gt; data;\n    return data;\n}\n</code></pre>\n<p>I have to define my POD like this:</p>\n<pre><code>struct Foo\n{\n    const int i;\n    const int j;\n\n    Foo(const int _i, const int _j): i(_i), j(_j) {}\n\n    Foo(Foo&amp; foo): i(foo.i), j(foo.j){}\n\n    Foo operator=(Foo&amp; foo)\n    {\n        Foo f(foo.i, foo.j);\n        return f;\n    }\n};\n</code></pre>\n<p>Is this the correct approach for defining a pod where I'm not interested in changing the pod members after creation? Why am I forced to define a copy constructor and overload the assignment operator? Is this compatible for different platform implementations of <code>std::vector</code>? Is it wrong in your opinion to have const PODS like this? Should I just leave them as non-const?</p>\n", "AcceptedAnswerId": "13016098", "Title": "const pod and std::vector", "CreationDate": "2012-10-22T16:55:07.083", "Id": "13016065", "CommentCount": "5", "LastEditDate": "2012-10-22T16:59:23.967", "PostTypeId": "1", "LastEditorUserId": "1561378", "LastActivityDate": "2012-10-22T17:13:47.780", "Score": "1", "OwnerUserId": "607846", "Tags": "<c++><vector><struct>", "AnswerCount": "2"}, "13016273": {"Id": "13016273", "PostTypeId": "2", "Body": "<p>You ask several questions:</p>\n<blockquote>\n<blockquote>\n<p id=\"so_13016065_13016273_1\">Is this the correct approach for defining a pod where I'm not interested in changing the pod members after creation? </p>\n</blockquote>\n</blockquote>\n<p>Your question is ill-formed because you <strong>are</strong> interested in changing the pod members after creation. By using <code>std::vector</code>, you are asking <code>vector::resize()</code>, for example, permission to modify all of the members of your objects via the assignment operator.</p>\n<p>Also, as others have pointed out, your <code>operator=</code> doesn't make much sense. It surely doesn't do what you think it does. Specifically, after the expression <code>a=b</code>, the members of <code>a</code> are unchanged.</p>\n<blockquote>\n<blockquote>\n<p id=\"so_13016065_13016273_3\">Why am I forced to define a copy constructor and overload the assignment operator?</p>\n</blockquote>\n</blockquote>\n<p>Because you are using <code>std::vector</code>. Consider C++2003, \u00a723.1/3, \"The type of objects stored in these components must meet the requirements of <code>CopyConstructible</code>\ntypes, and the additional requirements of <code>Assignable</code> types.\"</p>\n<p>Practically speaking, it is because <code>vector</code> needs to be able to move your objects around while it does its memory-management.</p>\n<blockquote>\n<blockquote>\n<p id=\"so_13016065_13016273_5\">Is this compatible for different platform implementations of <code>std::vector</code>? </p>\n</blockquote>\n</blockquote>\n<p>Yes. For any implementation of <code>std::vector</code>, your type must be CopyConstructible and Assignable.</p>\n<blockquote>\n<blockquote>\n<p id=\"so_13016065_13016273_7\">Is it wrong in your opinion to have const PODS like this? </p>\n</blockquote>\n</blockquote>\n<p>Yes, it contradicts your intended usage. You intend to put them into a vector, where they will be modified.</p>\n<blockquote>\n<blockquote>\n<p id=\"so_13016065_13016273_9\">Should I just leave them as non-const?</p>\n</blockquote>\n</blockquote>\n<p>Yes. If you leave them as non-const, then you don't need a user-defined copy constructor nor a user-defined assignment operator.</p>\n", "LastEditorUserId": "8747", "LastActivityDate": "2012-10-22T17:13:47.780", "Score": "0", "CreationDate": "2012-10-22T17:07:59.857", "ParentId": "13016065", "CommentCount": "0", "LastEditDate": "2012-10-22T17:13:47.780", "OwnerUserId": "8747"}, "13016098": {"Id": "13016098", "PostTypeId": "2", "Body": "<p>It's undefined behavior to create an <code>std::vector</code> over a type that you can't assign.  You can't assign POD's with <code>const</code> members.</p>\n", "LastActivityDate": "2012-10-22T16:56:55.333", "Score": "3", "CreationDate": "2012-10-22T16:56:55.333", "ParentId": "13016065", "CommentCount": "1", "OwnerUserId": "649665"}});