post_cb({"7451496": {"LastActivityDate": "2011-09-16T23:59:18.313", "ParentId": "7451335", "Id": "7451496", "Score": "0", "Body": "<p>When you iterate through the vector, you should be using it != v.end(), and not it &lt; v.end().    However, in this case your parallel for loop is no longer valid.  I would restructure that section of the code in the following manner:</p>\n<pre><code>  #pragma omp parallel for firstprivate(a)\n  for (int i = 0 ; i &lt; v.size() ; i++ )\n     v[i] += a.tid;\n</code></pre>\n", "CommentCount": "1", "PostTypeId": "2", "OwnerUserId": "937551", "CreationDate": "2011-09-16T23:59:18.313"}, "7451335": {"AcceptedAnswerId": "7533549", "Tags": "<c++><openmp>", "AnswerCount": "2", "OwnerUserId": "487362", "Body": "<p>I have the following code which works on the compilers I have available (xlC and gcc) but I don't know if it is fully compliant (I didn't find anything in the OpenMP 3.0 spec that explicitly disallows it):</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;omp.h&gt;\n\nstruct A {\n  int tid;\n  A() : tid(-1) { }\n  A(const A&amp;) { tid = omp_get_thread_num(); }\n};\n\nint main() {\n  A a;\n\n  std::vector&lt;int&gt; v(10);\n  std::vector&lt;int&gt;::iterator it;\n#pragma omp parallel for firstprivate(a)\n  for (it=v.begin(); it&lt;v.end(); ++it)\n    *it += a.tid;\n\n  for (it=v.begin(); it&lt;v.end(); ++it)\n    std::cout &lt;&lt; *it &lt;&lt; ' ';\n  std::cout &lt;&lt; std::endl;\n  return 0;\n}\n</code></pre>\n<p>My motivation is to figure out how many threads and each thread's id in the omp parallel for \n section (I do not wish to call it for each element that is being processed though). Is there any chance that I'm causing undefined behavior?</p>\n", "CommentCount": "2", "PostTypeId": "1", "CreationDate": "2011-09-16T23:26:46.430", "FavoriteCount": "1", "LastActivityDate": "2011-09-28T15:41:47.370", "Id": "7451335", "Title": "OpenMP calls and directives allowed in firstprivate variable construction?", "Score": "0", "ViewCount": "447"}, "bq_ids": {"n3337": {"so_7451335_7533549_3": {"section_id": 451, "quality": 0.5333333333333333, "length": 8}}}, "7533549": {"CreationDate": "2011-09-23T18:53:46.653", "LastActivityDate": "2011-09-28T15:41:47.370", "LastEditorUserId": "654891", "ParentId": "7451335", "Score": "2", "Id": "7533549", "OwnerUserId": "654891", "Body": "<p>I would just decouple (start of) the parallel region from the loop, and use private variable to keep tid:</p>\n<pre><code>std::vector&lt;int&gt;::iterator it;\nint tid;\n#pragma omp parallel private(tid)\n{\n    tid = omp_get_thread_num();\n    #pragma omp for \n    for (it=v.begin(); it&lt;v.end(); ++it)\n        *it += tid; \n}\n</code></pre>\n<p>Added: below are the quotes from <a href=\"http://www.openmp.org/mp-documents/OpenMP3.1.pdf\" rel=\"nofollow\">the OpenMP specification</a> (Section 2.9.3.4) that make me think <strong>your code is conformant and so does not produce UB</strong> (however see another addition below):</p>\n<blockquote>\n<p id=\"so_7451335_7533549_0\">... the new list item is initialized from the original list item existing before the construct. The initialization of the new list item is done once for each task that references the list item in any statement in the construct. The initialization is done prior to the execution of the construct.</p>\n<p id=\"so_7451335_7533549_1\">For a <code>firstprivate</code> clause on a <code>parallel</code> or <code>task</code> construct, the initial value of the new list item is the value of the original list item that exists immediately prior to the construct in the task region where the construct is encountered.</p>\n<p id=\"so_7451335_7533549_2\">C/C++: ... For variables of class type, a copy constructor is invoked to perform the initialization. The order in which copy constructors for different variables of class type are called is unspecified.</p>\n<p id=\"so_7451335_7533549_3\">C/C++: A variable of class type (or array thereof) that appears in a <code>firstprivate</code> clause\n  requires an accessible, unambiguous copy constructor for the class type.</p>\n</blockquote>\n<p>Added-2: However, it is not specified which thread executes the copy constructor for a <code>firstprivate</code> variable. So in theory, it can be done by the master thread of the region for all copies of the variable. In this case, the value of <code>omp_get_thread_num()</code> will be equal in all copies, either 0 or, in case of nested parallel regions, the thread number in the outer region. <strong>So, being a defined behavior from OpenMP standpoint, it may result in a data race in your program.</strong></p>\n", "CommentCount": "1", "PostTypeId": "2", "LastEditDate": "2011-09-28T15:41:47.370"}});