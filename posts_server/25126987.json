post_cb({"31916090": {"Id": "31916090", "PostTypeId": "2", "Body": "<p>Your example is (clearly) well-formed. \u00a714.8.2.5/9 describes how deduction is performed in this case.</p>\n<blockquote>\n<p id=\"so_25126987_31916090_0\">If <code>P</code> has a form that contains <code>&lt;T&gt;</code> or <code>&lt;i&gt;</code>, then each argument <code>P</code><sub><em>i</em></sub> of the respective template argument list <code>P</code> is compared with the corresponding argument <code>A</code><sub><em>i</em></sub> of the corresponding template argument list of <code>A</code>. [\u2026]. If <code>P</code><sub><em>i</em></sub> is a pack expansion, then the pattern of <code>P</code><sub><em>i</em></sub> is compared with each remaining argument in the template argument list of <code>A</code>. Each comparison deduces template arguments for subsequent positions in the template parameter packs expanded by <code>P</code><sub><em>i</em></sub>.</p>\n</blockquote>\n<p>Moreover, your code is compiling with version 15.0.3 on my machine. Hence upgrading the compiler should fix the issue. I can't see another simple workaround.</p>\n", "LastActivityDate": "2015-08-10T09:30:36.497", "CommentCount": "0", "CreationDate": "2015-08-10T09:30:36.497", "ParentId": "25126987", "Score": "2", "OwnerUserId": "3647361"}, "25126987": {"ViewCount": "377", "Body": "<pre><code>#include &lt;cstddef&gt;\n\ntemplate&lt;typename T, T... Is&gt;\nstruct Bar { };\n\ntemplate&lt;size_t... Is&gt;\nusing Baz = Bar&lt;size_t, Is...&gt;;\n\nstruct Foo {\n  template&lt;size_t... Is&gt;\n  void NoAlias(Bar&lt;size_t, Is...&gt;) { }\n\n  template&lt;size_t... Is&gt;\n  void Alias(Baz&lt;Is...&gt;) { }\n};\n\ntemplate&lt;typename T, T... Is&gt;\nvoid foo(Bar&lt;T, Is...&gt;) { }\n\ntemplate&lt;size_t... Is&gt;\nvoid bar(Bar&lt;size_t, Is...&gt;) { }\n\nint main() {\n  // All these work fine\n  foo(Bar&lt;size_t, 4, 2&gt;());\n  foo(Baz&lt;4, 2&gt;());\n  bar(Bar&lt;size_t, 4, 2&gt;());\n  bar(Baz&lt;4, 2&gt;());\n  Foo().NoAlias(Bar&lt;size_t, 4, 2&gt;());\n  Foo().NoAlias(Baz&lt;4, 2&gt;());\n\n  // But these two give error on ICPC (ICC) 14.0.2:\n  //   no instance of function template \"Foo::Alias\" matches the argument list\n  // Note the only difference between NoAlias and Alias is (not) using the alias\n  // for the member function parameter\n  Foo().Alias(Bar&lt;size_t, 4, 2&gt;());\n  Foo().Alias(Baz&lt;4, 2&gt;());\n\n  return 0;\n}\n</code></pre>\n<p>ICC 14.0.2 gives error:</p>\n<pre><code>$ icc -std=c++11 -Wall -pedantic -pthread -o .scratch{-,.}cpp &amp;&amp; ./.scratch-cpp\n\n.scratch.cpp(36): error: no instance of function template \"Foo::Alias\" matches the argument list\n            argument types are: (Bar&lt;size_t, 4UL, 2UL&gt;)\n            object type is: Foo\n    Foo().Alias(Bar&lt;size_t, 4, 2&gt;());\n          ^\n\n.scratch.cpp(37): error: no instance of function template \"Foo::Alias\" matches the argument list\n            argument types are: (Baz&lt;4UL, 2UL&gt;)\n            object type is: Foo\n    Foo().Alias(Baz&lt;4, 2&gt;());\n          ^\n</code></pre>\n<p>However, it compiles with both GCC 4.8 and Clang 3.4.2. (Tested on a 64-bit Linux.)</p>\n<p>Can anybody who is well acquainted with the C++11 standard confirm this is indeed a bug?</p>\n<p>Also, is there an easy preprocessor-based workaround?</p>\n", "AcceptedAnswerId": "31916090", "Title": "Intel C++ compiler bug in member function overload resolution involving \"using\" alias?", "CreationDate": "2014-08-04T20:26:54.520", "Id": "25126987", "CommentCount": "1", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2015-08-10T08:58:50.553", "LastEditorUserId": "3647361", "LastActivityDate": "2015-08-10T09:30:36.497", "Score": "13", "OwnerUserId": "395744", "Tags": "<c++><c++11><compiler-bug><icc>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_25126987_31916090_0": {"length": 38, "quality": 1.0, "section_id": 340}}, "n3337": {"so_25126987_31916090_0": {"length": 38, "quality": 1.0, "section_id": 330}}, "n4659": {"so_25126987_31916090_0": {"length": 38, "quality": 1.0, "section_id": 349}}}});