post_cb({"bq_ids": {"n4140": {"so_30553957_30553971_0": {"section_id": 7151, "quality": 0.7647058823529411, "length": 13}}, "n3337": {"so_30553957_30553971_0": {"section_id": 6895, "quality": 0.7647058823529411, "length": 13}}, "n4659": {"so_30553957_30553971_0": {"section_id": 4051, "quality": 0.5294117647058824, "length": 9}}}, "30553971": {"ParentId": "30553957", "PostTypeId": "2", "CommentCount": "4", "CreationDate": "2015-05-31T04:50:05.993", "Score": "4", "LastEditorUserId": "3093378", "LastEditDate": "2015-05-31T05:46:33.133", "Id": "30553971", "OwnerUserId": "3093378", "Body": "<p>If <code>A a;</code> has static <a href=\"http://en.cppreference.com/w/cpp/language/storage_duration\" rel=\"nofollow\">storage duration</a> (like defining it outside <code>main()</code>), or thread storage duration (i.e. defined with <code>thread_local</code> in C++11 or later), then <code>a</code> is zero-initialized (thanks @Praetorian for the comment)</p>\n<blockquote>\n<p id=\"so_30553957_30553971_0\"><strong>3.6.2/2 [basic.start.init]</strong> Variables with static storage duration (3.7.1) or thread storage duration (3.7.2) shall be zero-initialized (8.5) before any other initialization takes place. </p>\n</blockquote>\n<p>In your case, this means that each member of your object <code>A a</code> will be zeroed, hence <code>a.a</code> will be zeroed, then the constructor <code>A()</code> will run (which won't do anything). At the end of the day, <code>a.a</code> will be zero.</p>\n<p>If <code>A a</code> has non-static/non-thread storage duration (e.g. having <code>A a;</code> inside a function), then no zero initialization is performed, and again the constructor doesn't do anything. So you have UB (undefined behaviour) if you try to read <code>a.a</code>, since the latter is left un-initialized.</p>\n", "LastActivityDate": "2015-05-31T05:46:33.133"}, "30553995": {"ParentId": "30553957", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>If you have used java you might know that variables are assigned a default value in it but that's not the case in c++. Here you only allocate a chunk of memory for your variable. Whatever garbage it contained before it was allocated to you comes with it. So we call it a garbage value. You have to initialize it to your desired value in the constructor of the class or the structure.</p>\n", "OwnerUserId": "4442322", "CommunityOwnedDate": "2015-05-31T04:53:24.987", "Id": "30553995", "Score": "2", "CreationDate": "2015-05-31T04:53:24.987", "LastActivityDate": "2015-05-31T04:53:24.987"}, "30553957": {"CommentCount": "1", "ViewCount": "45", "PostTypeId": "1", "LastEditorUserId": "464581", "CreationDate": "2015-05-31T04:48:17.077", "LastActivityDate": "2015-05-31T05:46:33.133", "Title": "Default value of members in a struct", "AcceptedAnswerId": "30553971", "LastEditDate": "2015-05-31T05:17:14.930", "Id": "30553957", "Score": "0", "Body": "<p>In the struct</p>\n<pre><code>struct A\n{\n    int a;\n    A(){ }\n};\n\nA a;\n</code></pre>\n<p>Is it specified which value has <code>a.a</code>? Doe we have UB if we try to read <code>a.a</code>?</p>\n", "Tags": "<c++>", "OwnerUserId": "3663882", "AnswerCount": "2"}});