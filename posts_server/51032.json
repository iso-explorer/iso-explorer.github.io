post_cb({"51041": {"CommentCount": "1", "CreationDate": "2008-09-09T00:53:03.790", "LastEditorUserId": "4332828", "LastActivityDate": "2016-12-11T01:00:44.220", "ParentId": "51032", "LastEditDate": "2016-12-11T01:00:44.220", "OwnerDisplayName": "Paul Tomblin", "PostTypeId": "2", "Id": "51041", "Score": "1", "Body": "<p>In C, you use a void in an empty function reference so that the compiler has a prototype, and that prototype has \"no arguments\". In C++, you don't have to tell the compiler that you have a prototype because you can't leave out the prototype.</p>\n", "OwnerUserId": "3333"}, "51080": {"CommentCount": "10", "CreationDate": "2008-09-09T01:34:28.060", "LastEditorUserId": "15168", "LastActivityDate": "2017-08-27T02:52:34.200", "ParentId": "51032", "LastEditDate": "2017-08-27T02:52:34.200", "OwnerDisplayName": "DrPizza", "PostTypeId": "2", "Id": "51080", "Score": "255", "Body": "<p>In <strong>C</strong>:  </p>\n<ul>\n<li><code>void foo()</code> means \"a function <code>foo</code> taking an unspecified number of arguments of unspecified type\"  </li>\n<li><code>void foo(void)</code> means \"a function <code>foo</code> taking no arguments\"</li>\n</ul>\n<p>In <strong>C++</strong>:  </p>\n<ul>\n<li><code>void foo()</code> means \"a function <code>foo</code> taking no arguments\"  </li>\n<li><code>void foo(void)</code> means \"a function <code>foo</code> taking no arguments\"</li>\n</ul>\n<p>By writing <code>foo(void)</code>, therefore, we achieve the same interpretation across both languages and make our headers multilingual (though we usually need to do some more things to the headers to make them truly cross-language; namely, wrap them in an <code>extern \"C\"</code> if we're compiling C++).</p>\n", "OwnerUserId": "2131"}, "36835303": {"ParentId": "51032", "LastEditDate": "2017-09-12T14:16:26.343", "CommentCount": "2", "CreationDate": "2016-04-25T08:20:57.650", "OwnerUserId": "895245", "LastEditorUserId": "895245", "PostTypeId": "2", "Id": "36835303", "Score": "4", "Body": "<p><strong>C++11 N3337 standard draft</strong></p>\n<p>There is no difference.</p>\n<p><a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf\" rel=\"nofollow noreferrer\">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf</a></p>\n<p><em>Annex C \"Compatibility\" C.1.7 Clause 8: declarators</em> says:</p>\n<blockquote>\n<p id=\"so_51032_36835303_0\">8.3.5 Change: In C ++ , a function declared with an empty parameter list takes no arguments. In C, an empty\n  parameter list means that the number and type of the function arguments are unknown.</p>\n<p id=\"so_51032_36835303_1\">Example:</p>\n<pre><code>int f();\n// means int f(void) in C ++\n// int f( unknown ) in C\n</code></pre>\n<p id=\"so_51032_36835303_2\">Rationale: This is to avoid erroneous function calls (i.e., function calls with the wrong number or type of\n  arguments).</p>\n<p id=\"so_51032_36835303_3\">Effect on original feature: Change to semantics of well-defined feature. This feature was marked as \u201cobsolescent\u201d in C.</p>\n</blockquote>\n<p><em>8.5.3 functions</em> says:</p>\n<blockquote>\n<p id=\"so_51032_36835303_4\">4. The parameter-declaration-clause determines the arguments that can be specified, and their processing, when\n  the function is called. [...] If the parameter-declaration-clause is empty, the function\n  takes no arguments. The parameter list (void) is equivalent to the empty parameter list.</p>\n</blockquote>\n<p><strong>C99</strong></p>\n<p>As mentioned by C++11, <code>int f()</code> specifies nothing about the arguments, and is obsolescent.</p>\n<p>It can either lead to working code or UB.</p>\n<p>I have interpreted the C99 standard in detail at: <a href=\"https://stackoverflow.com/a/36292431/895245\">https://stackoverflow.com/a/36292431/895245</a></p>\n", "LastActivityDate": "2017-09-12T14:16:26.343"}, "51044": {"CommentCount": "0", "CreationDate": "2008-09-09T00:55:08.467", "LastEditorUserId": "958624", "LastActivityDate": "2013-04-24T14:57:02.323", "ParentId": "51032", "LastEditDate": "2013-04-24T14:57:02.323", "OwnerDisplayName": "Kyle", "PostTypeId": "2", "Id": "51044", "Score": "30", "Body": "<p>I realize your question pertains to C++, but when it comes to C the answer can be found in K&amp;R, pages 72-73:</p>\n<blockquote>\n<p id=\"so_51032_51044_0\">Furthermore, if a function declaration does not include arguments, as\n  in</p>\n<pre><code>double atof();\n</code></pre>\n<p id=\"so_51032_51044_1\">that too is taken to mean that nothing is to be assumed about the\n  arguments of atof; all parameter checking is turned off. This special\n  meaning of the empty argument list is intended to permit older C\n  programs to compile with new compilers. But it's a bad idea to use it\n  with new programs. If the function takes arguments, declare them; if\n  it takes no arguments, use void.</p>\n</blockquote>\n", "OwnerUserId": "658"}, "51032": {"CommentCount": "0", "AcceptedAnswerId": "51080", "PostTypeId": "1", "LastEditorUserId": "1459996", "CreationDate": "2008-09-09T00:48:23.630", "LastActivityDate": "2017-09-12T14:16:26.343", "AnswerCount": "4", "LastEditDate": "2017-01-13T23:12:13.047", "ViewCount": "54222", "FavoriteCount": "50", "Title": "Is there a difference between foo(void) and foo() in C++ or C?", "Id": "51032", "Score": "193", "Body": "<p>Consider these two function definitions:</p>\n<pre><code>void foo() { }\n\nvoid foo(void) { }\n</code></pre>\n<p>Is there any difference between these two? If not, why is the <code>void</code> argument there? Aesthetic reasons?</p>\n", "Tags": "<c++><c><arguments>", "OwnerUserId": "1597", "OwnerDisplayName": "Landon"}, "bq_ids": {"n4140": {"so_51032_36835303_4": {"section_id": 3240, "quality": 0.9166666666666666, "length": 22}, "so_51032_51044_0": {"section_id": 3261, "quality": 0.6666666666666666, "length": 4}, "so_51032_36835303_0": {"section_id": 3240, "quality": 0.5555555555555556, "length": 10}}, "n3337": {"so_51032_36835303_4": {"section_id": 3113, "quality": 0.9166666666666666, "length": 22}, "so_51032_36835303_0": {"section_id": 3113, "quality": 0.5555555555555556, "length": 10}, "so_51032_51044_0": {"section_id": 3133, "quality": 0.6666666666666666, "length": 4}}, "n4659": {"so_51032_36835303_4": {"section_id": 3996, "quality": 0.9166666666666666, "length": 22}, "so_51032_36835303_0": {"section_id": 3996, "quality": 0.5555555555555556, "length": 10}, "so_51032_51044_0": {"section_id": 4019, "quality": 0.6666666666666666, "length": 4}}}});