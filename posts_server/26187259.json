post_cb({"bq_ids": {"n4140": {"so_26187259_26187375_1": {"length": 5, "quality": 0.8333333333333334, "section_id": 1259}, "so_26187259_26187375_0": {"length": 5, "quality": 0.625, "section_id": 1282}, "so_26187259_26187375_2": {"length": 23, "quality": 0.8846153846153846, "section_id": 1284}, "so_26187259_26187375_3": {"length": 6, "quality": 0.8571428571428571, "section_id": 1258}}, "n3337": {"so_26187259_26187375_1": {"length": 5, "quality": 0.8333333333333334, "section_id": 1257}, "so_26187259_26187375_0": {"length": 5, "quality": 0.625, "section_id": 1277}, "so_26187259_26187375_2": {"length": 22, "quality": 0.8461538461538461, "section_id": 1279}, "so_26187259_26187375_3": {"length": 6, "quality": 0.8571428571428571, "section_id": 1256}}, "n4659": {"so_26187259_26187375_1": {"length": 5, "quality": 0.8333333333333334, "section_id": 1379}, "so_26187259_26187375_0": {"length": 5, "quality": 0.625, "section_id": 1402}, "so_26187259_26187375_2": {"length": 23, "quality": 0.8846153846153846, "section_id": 1404}, "so_26187259_26187375_3": {"length": 6, "quality": 0.8571428571428571, "section_id": 1378}}}, "26187259": {"ViewCount": "141", "Body": "<p>Can <code>std::search_n</code> be called \"safely\" with a <code>count</code> of 0?  Specifically, is code like the following valid?</p>\n<pre><code>#include &lt;algorithm&gt;\n#include &lt;cstdio&gt;\n\nint main(int argc, char *argv[]) {\n    const int test[7] = {1, 2, 3, 4, 5, 6, 7};\n    const int *const location = std::search_n(test, test + 7, 0, 8);\n    if (location == test) {\n        std::puts(\"Found it at the beginning!\");\n    }\n}\n</code></pre>\n<p>I would expect this code to reach the <code>std::puts</code> statement, and most descriptions of <code>std::search_n</code> seem to imply that it will.  However, most sample implementations that I'm finding <em>won't</em>.  What sayeth the standard?</p>\n", "AcceptedAnswerId": "26187375", "Title": "Can std::search_n be called with a count of 0?", "CreationDate": "2014-10-03T21:46:05.390", "Id": "26187259", "CommentCount": "1", "PostTypeId": "1", "LastActivityDate": "2014-10-03T22:43:14.877", "Score": "7", "OwnerUserId": "1019990", "Tags": "<c++><stl-algorithm>", "AnswerCount": "1"}, "26187375": {"Id": "26187375", "PostTypeId": "2", "Body": "<p>The specification of <code>std::search_n</code> is (\u00a725.2.13 [alg.search]/p4-7):</p>\n<blockquote>\n<pre><code>template&lt;class ForwardIterator, class Size, class T,\nclass BinaryPredicate&gt;\nForwardIterator\nsearch_n(ForwardIterator first, ForwardIterator last, Size count,\nconst T&amp; value, BinaryPredicate pred);\n</code></pre>\n<p id=\"so_26187259_26187375_0\">4 <em>Requires</em>: The type <code>Size</code> shall be convertible to integral type\n  (4.7, 12.3).</p>\n<p id=\"so_26187259_26187375_1\">5 <em>Effects</em>: Finds a subsequence of equal values in a sequence. </p>\n<p id=\"so_26187259_26187375_2\">6 <em>Returns</em>: The first iterator <code>i</code> in the range <code>[first,last-count)</code> such that for every non-negative integer <code>n</code> less than <code>count</code> the\n  following corresponding conditions hold: <code>*(i + n) == value, pred(*(i + n),value) != false</code>. Returns <code>last</code> if no such iterator is found.</p>\n<p id=\"so_26187259_26187375_3\">7 <em>Complexity</em>: At most <code>last - first</code> applications of the\n  corresponding predicate.</p>\n</blockquote>\n<p>When <code>count &lt;= 0</code>, there is no non-negative integer <code>n</code> less than <code>count</code>, so the condition \"for every<sup>*</sup> non-negative integer <code>n</code> less than <code>count</code> ...\" is always true<sup>**</sup>, and so it should return the first iterator in range - which is <code>first</code>. Note that the spec implies that you are not allowed to pass a negative <code>count</code> if <code>last-count</code> isn't well-defined, but nothing in the spec prevents <code>count</code> from having a value of zero.</p>\n<p>All standard library implementations I tested (libstdc++, libc++, MSVC) print the message.</p>\n<hr>\n<p><sub><sup>*</sup>This used to be \"for any...\". <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2150\" rel=\"nofollow\">LWG issue 2150</a> changed the wording here to clarify the intended meaning.</sub></p>\n<p><sub><sup>**</sup>The statement \"for every x in S, p\" is <a href=\"https://en.wikipedia.org/wiki/Vacuous_truth\" rel=\"nofollow\">vacuously true</a> if S is an empty set.</sub></p>\n</hr>", "LastEditorUserId": "2756719", "LastActivityDate": "2014-10-03T22:25:43.020", "Score": "5", "CreationDate": "2014-10-03T21:58:27.043", "ParentId": "26187259", "CommentCount": "6", "OwnerUserId": "2756719", "LastEditDate": "2014-10-03T22:25:43.020"}});