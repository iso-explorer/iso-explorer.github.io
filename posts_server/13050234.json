post_cb({"bq_ids": {"n4140": {"so_13050234_21791272_0": {"length": 19, "quality": 1.0, "section_id": 5322}}, "n3337": {"so_13050234_21791272_0": {"length": 19, "quality": 1.0, "section_id": 5119}}, "n4659": {"so_13050234_21791272_0": {"length": 19, "quality": 1.0, "section_id": 6743}}}, "13050301": {"Id": "13050301", "PostTypeId": "2", "Body": "<p>I learned C in 1992, and I'm 100% certain there was no such operator back then.</p>\n<p>From the context, <code>p-&gt;&gt;x[5]</code>, we can deduce that it appears to do exactly the same thing as the more familiar arrow operator, <code>-&gt;</code>. It is therefore likely to be a typo.</p>\n<hr>\n<p>Alternatively, it could be an encoding issue in transcribing the code into HTML. If you look at the source to that page, you can see it's got a strange mixture of escape codes and literal <code>&lt;</code> and <code>&gt;</code> characters:</p>\n<pre><code>&lt;TT&gt;&lt;B&gt;#include &amp;lt;stdlib.h&gt;&lt;BR&gt;\n</code></pre>\n</hr>", "LastEditorUserId": "385478", "LastActivityDate": "2012-10-24T14:00:28.970", "Score": "23", "CreationDate": "2012-10-24T13:29:42.797", "ParentId": "13050234", "CommentCount": "6", "OwnerUserId": "385478", "LastEditDate": "2012-10-24T14:00:28.970"}, "13050234": {"ViewCount": "2416", "Body": "<p>In the course of my reading I came accross <a href=\"http://www.open-std.org/jtc1/sc22/wg14/www/docs/dr_051.html\" rel=\"nofollow noreferrer\">WG14 Defect Report #51</a> written in 1993 (or perhaps 1893, they left off the century and millennium). In the code sample there, apparently an operator spelled <code>-&gt;&gt;</code> is used on a pointer to a <code>struct</code>. I can't find it in any operator precedence tables I've found, so I am wondering, is or was it ever an operator, and if so, what does (or did, as the case may be) this operator do?</p>\n<p>At first I thought it was a typo, but it is reproduced twice more in the text and another time in the code sample in the response to the question, and I have a hard time believing it just slipped past at least two C experts without being noticed, when it jumped out at a novice like me. It's also at the focal point of the code, very easy to notice, and was never corrected.</p>\n<p>Here is the code with added indentation:</p>\n<pre><code>#include &lt;stdlib.h&gt;\n\nstruct A {\n    char x[1];\n};\n\nmain()\n{\n    struct A *p = (struct A *) malloc(sizeof(struct A) + 100);\n    p-&gt;&gt;x[5] = '?';  /* This is the key line [for both them and us] */\n    return 0;\n}\n</code></pre>\n<p>I tried to compile this code with both a C and C++ compiler and it failed to parse in either one. Perhaps this was some operator in an early version of C that isn't used any more?</p>\n<p>This feels suspiciously like the <a href=\"https://stackoverflow.com/questions/1642028/what-is-the-name-of-this-operator\">What is the name of this operator: \"--&gt;\"?</a> question, but I don't think this is a combination of two other operators, I don't see how it can be divided up and be valid.</p>\n", "AcceptedAnswerId": "13051270", "Title": "Is this ->> an old operator or a typo/error?", "CreationDate": "2012-10-24T13:26:03.903", "Id": "13050234", "CommentCount": "29", "FavoriteCount": "5", "PostTypeId": "1", "LastEditDate": "2017-05-23T12:31:24.053", "LastEditorUserId": "-1", "LastActivityDate": "2014-02-14T23:41:51.470", "Score": "50", "OwnerUserId": "726361", "Tags": "<c++><c><operators><history>", "AnswerCount": "3"}, "21791272": {"Id": "21791272", "PostTypeId": "2", "Body": "<p>This does seem likely to have been a transcription error, but I think it would be useful to write out how a real C compiler would interpret this construct, anyway, just to make clear that it isn't a clever trick.  The first thing it's important to know is this sentence, from C11 \u00a76.5.4p4 (technically, N1570; this language is unchanged since C89, although the section number was probably different; emphasis mine):</p>\n<blockquote>\n<p id=\"so_13050234_21791272_0\">If the input stream has been parsed into preprocessing tokens up to a given character, the\n  next preprocessing token is the <em>longest</em> sequence of characters that could constitute a\n  preprocessing token.</p>\n</blockquote>\n<p>That means the six-character string <code>\"\u00a0p-&gt;&gt;x\"</code> must be tokenized as <code>p\u00a0-&gt;\u00a0&gt;\u00a0x</code>, not <code>p\u00a0-\u00a0&gt;&gt;\u00a0x</code> or <code>p\u00a0-\u00a0&gt;\u00a0&gt;\u00a0x</code>.  (It doesn't actually matter in this case, it would be a syntax error either way, but this rule <em>can</em> be the difference between a program parsing as intended, and not; the standard gives the example <code>x+++++y</code>, which is interpreted as <code>x++\u00a0++\u00a0+y</code>, not as <code>x++\u00a0+\u00a0++y</code>, even though only the latter is a well-formed expression.)</p>\n<p>The next thing to know is simply that the right-hand argument of the <code>-&gt;</code> operator must be an <em>identifier</em>, per the grammar rules for <em>postfix-expression</em> in \u00a76.5.2.  Obviously <code>&gt;</code> isn't an identifier, so we have a definite syntax error.</p>\n", "LastEditorUserId": "388520", "LastActivityDate": "2014-02-14T23:41:51.470", "Score": "1", "CreationDate": "2014-02-14T23:25:16.863", "ParentId": "13050234", "CommentCount": "0", "OwnerUserId": "388520", "LastEditDate": "2014-02-14T23:41:51.470"}, "13051270": {"Id": "13051270", "PostTypeId": "2", "Body": "<p>It looks like a problem in the transcription process.  There is a similar problem in DR 42, where the greater than sign is doubled:  <a href=\"http://www.open-std.org/jtc1/sc22/wg14/docs/rr/dr_042.html\" rel=\"noreferrer\">http://www.open-std.org/jtc1/sc22/wg14/docs/rr/dr_042.html</a></p>\n", "LastActivityDate": "2012-10-24T14:26:07.907", "CommentCount": "0", "CreationDate": "2012-10-24T14:26:07.907", "ParentId": "13050234", "Score": "29", "OwnerUserId": "951890"}});