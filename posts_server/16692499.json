post_cb({"16692619": {"PostTypeId": "2", "Body": "<pre><code>#include &lt;initializer_list&gt;\n#include &lt;type_traits&gt;\n\nusing namespace std;\n\nint main(){\n    int x{};\n    auto x2 = x;\n    auto x3{x};\n\n    static_assert(is_same&lt;int, decltype(x)&gt;::value, \"decltype(x) is the same as int\");\n    static_assert(is_same&lt;int, decltype(x2)&gt;::value, \"decltype(x2) is the same as int\");\n    static_assert(is_same&lt;std::initializer_list&lt;int&gt;, decltype(x3)&gt;::value, \"decltype(x3) is the same as int\");\n}\n</code></pre>\n<p>This will compile. <code>x3</code> is deduced to be a <code>std::initializer_list&lt;int&gt;</code> due to:</p>\n<blockquote>\n<p id=\"so_16692499_16692619_0\">Let <code>T</code> be the type that has been determined for a variable identifier <code>d</code>. Obtain <code>P</code> from T [...] if the initializer is a braced-init-list (8.5.4), with <code>std::initializer_list&lt;U&gt;</code>.</p>\n</blockquote>\n", "LastActivityDate": "2013-05-22T13:07:11.203", "Id": "16692619", "CommentCount": "1", "CreationDate": "2013-05-22T13:07:11.203", "ParentId": "16692499", "Score": "12", "OwnerUserId": "150634"}, "bq_ids": {"n4140": {"so_16692499_16692619_0": {"length": 6, "quality": 0.5454545454545454, "section_id": 5451}}, "n3337": {"so_16692499_16692619_0": {"length": 10, "quality": 0.9090909090909091, "section_id": 5245}}}, "16692653": {"PostTypeId": "2", "Body": "<p>So <code>x3</code> is actually an <code>std::initializer_list&lt;int&gt;</code>, one way for you to have figured this out would be as follows:</p>\n<pre><code>std::cout &lt;&lt; typeid(x3).name() &lt;&lt; std::endl ;\n</code></pre>\n<p>for me I had the following output:</p>\n<pre><code>St16initializer_listIiE\n</code></pre>\n<p>Putting this through <code>c++filt</code>:</p>\n<pre><code>c++filt -t St16initializer_listIiE\n</code></pre>\n<p>Gives me:</p>\n<pre><code>std::initializer_list&lt;int&gt;\n</code></pre>\n", "LastActivityDate": "2013-05-22T13:08:46.180", "Id": "16692653", "CommentCount": "1", "CreationDate": "2013-05-22T13:08:46.180", "ParentId": "16692499", "Score": "6", "OwnerUserId": "1708801"}, "16692499": {"ViewCount": "325", "Body": "<pre><code>int main(){\n    int x{};\n    auto x2 = x;\n    auto x3{x};\n\n    static_assert(is_same&lt;int, decltype(x)&gt;::value, \"decltype(x) is the same as int\");\n    static_assert(is_same&lt;int, decltype(x2)&gt;::value, \"decltype(x2) is the same as int\");\n    static_assert(is_same&lt;int, decltype(x3)&gt;::value, \"decltype(x3) is the same as int\"); // Error here.\n}\n</code></pre>\n<p>This codes does not compile with gcc 4.8.0.\nI don't even guess the type of <code>decltype(x3)</code>. What is it? And why the behavior is different?</p>\n", "AcceptedAnswerId": "16692619", "Title": "Why auto is deduced differently?", "CreationDate": "2013-05-22T13:02:05.273", "Id": "16692499", "CommentCount": "16", "LastEditDate": "2013-05-22T13:12:12.910", "PostTypeId": "1", "LastEditorUserId": "1364752", "LastActivityDate": "2013-05-22T13:12:12.910", "Score": "11", "OwnerUserId": "1120977", "Tags": "<c++><c++11><type-inference>", "AnswerCount": "2"}});