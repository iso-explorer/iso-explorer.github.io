post_cb({"bq_ids": {"n4140": {"so_28263102_28263163_0": {"length": 14, "quality": 0.8235294117647058, "section_id": 5965}}, "n3337": {"so_28263102_28263163_0": {"length": 11, "quality": 0.6470588235294118, "section_id": 5734}}, "n4659": {"so_28263102_28263163_0": {"length": 11, "quality": 0.6470588235294118, "section_id": 7456}}}, "28263163": {"Id": "28263163", "PostTypeId": "2", "Body": "<p>A lambda with a capture cannot be converted to a function pointer. Your lambda captures <code>model</code>.</p>\n<p>C++ standard section \u00a7 5.1.2 [expr.prim.lambda] :</p>\n<blockquote>\n<p id=\"so_28263102_28263163_0\">The closure type for a non-generic lambda-expression <strong>with no\n  lambda-capture</strong> has a public non-virtual non- explicit const conversion\n  function to pointer to function with C ++ language linkage</p>\n</blockquote>\n<p>You can use <code>std::function&lt;&gt;</code> instead :</p>\n<pre><code>using namespace std::placeholders;\n\nstruct init_params{\n    std::function&lt;bool(double**)&gt; validation;\n};\n\nstruct modelType\n{\n    bool ValidateParameters(double** par) { return false; }\n};\n\n\nint main () {\n    init_params params;\n    modelType model;\n    params.validation = std::bind(&amp;modelType::ValidateParameters, &amp;model, _1);\n}\n</code></pre>\n", "LastEditorUserId": "3510483", "LastActivityDate": "2015-02-01T13:31:00.583", "Score": "1", "CreationDate": "2015-02-01T13:23:17.663", "ParentId": "28263102", "CommentCount": "4", "LastEditDate": "2015-02-01T13:31:00.583", "OwnerUserId": "3510483"}, "28263129": {"Id": "28263129", "PostTypeId": "2", "Body": "<p>You can probably just change <code>validation</code> to a std::function object:</p>\n<pre><code>#include &lt;functional&gt;\n\nstruct init_param\n{\n    std::function&lt;bool(double**)&gt; validation;\n};\n</code></pre>\n", "LastActivityDate": "2015-02-01T13:19:55.310", "Score": "2", "CreationDate": "2015-02-01T13:19:55.310", "ParentId": "28263102", "CommentCount": "0", "OwnerUserId": "673679"}, "28263102": {"ViewCount": "171", "Body": "<p>I am using Visual-C++ 2013 (But this tag seems to be not available here).</p>\n<p>I have a struct</p>\n<pre><code>struct init_param{\n    bool (*validation)(double**);\n};\n</code></pre>\n<p>And I want to cast a member function <code>ValidateParameters</code> of the instance <code>model</code>. So I tried to use a Lambda Expression:</p>\n<pre><code>init_params params;\nparams.validation = [&amp;model](double **par){return model.ValidateParameters(par); };\n</code></pre>\n<p>But the Compiler says:</p>\n<blockquote>\n<p id=\"so_28263102_28263102_0\">error C2440: '=': 'main::&lt; lambda_d8b99bf9b28e45558a48b7e9148b3202&gt;'\n  can not be converted into 'bool (__cdecl *)(double **)'</p>\n</blockquote>\n<p>How to proceed?\nOr what is the easiest way to change the <code>init_param</code> struct, that hte Lambda expression would work?</p>\n", "AcceptedAnswerId": "28263163", "Title": "Convert Lambda expression to function pointer", "CreationDate": "2015-02-01T13:16:52.997", "Id": "28263102", "CommentCount": "1", "LastEditDate": "2015-02-02T11:28:44.940", "PostTypeId": "1", "LastEditorUserId": "636019", "LastActivityDate": "2015-02-02T11:28:44.940", "Score": "2", "OwnerUserId": "3845315", "Tags": "<c++><visual-c++><c++11><visual-studio-2013><lambda>", "AnswerCount": "2"}});