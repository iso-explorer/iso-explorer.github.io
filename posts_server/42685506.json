post_cb({"bq_ids": {"n4140": {"so_42685506_42685720_1": {"length": 13, "quality": 1.0, "section_id": 3583}}, "n3337": {"so_42685506_42685720_1": {"length": 13, "quality": 1.0, "section_id": 3448}}, "n4659": {"so_42685506_42685720_1": {"length": 13, "quality": 1.0, "section_id": 4348}}}, "42685720": {"Id": "42685720", "PostTypeId": "2", "Body": "<p>Technically this is valid behavior. From <a href=\"http://en.cppreference.com/w/cpp/numeric/random/random_device\" rel=\"nofollow noreferrer\">cppreference</a>:</p>\n<blockquote>\n<p id=\"so_42685506_42685720_0\"><code>std::random_device</code> may be implemented in terms of an implementation-defined pseudo-random number engine if a non-deterministic source (e.g. a hardware device) is not available to the implementation. In this case each <code>std::random_device</code> object may generate the same number sequence.</p>\n</blockquote>\n<p>If you prefer a quote from the standard, it's at [rand.device]/2:</p>\n<blockquote>\n<p id=\"so_42685506_42685720_1\">If implementation limitations prevent generating non-deterministic random numbers, the implementation may employ a random number engine.</p>\n</blockquote>\n<p><a href=\"http://en.cppreference.com/w/cpp/numeric/random/random_device/entropy\" rel=\"nofollow noreferrer\"><code>random_device::entropy()</code></a> is supposed to be used for checking this, but unfortunately it's not implemented properly in most libraries, as the linked doc states (and I can confirm it for GCC 6.3, Clang 3.9 and MSVC 2015).</p>\n", "LastEditorUserId": "3959454", "LastActivityDate": "2017-03-09T03:06:22.553", "Score": "5", "CreationDate": "2017-03-09T02:43:30.777", "ParentId": "42685506", "CommentCount": "0", "OwnerUserId": "3959454", "LastEditDate": "2017-03-09T03:06:22.553"}, "42685506": {"ViewCount": "99", "Body": "<p>Before you tag this as duplicate (as I'm aware that this has been asked many times) I have read through dozens of questions / answers on StackOverflow as well as many other 'tutorials' and such.</p>\n<p>Despite following all recommendations that I'm aware of, my code produces the same \"random\" number every single time I run it. It doesn't look to me like I'm doing anything different to what I should be. Why isn't this working?</p>\n<pre><code>#include &lt;random&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\nrandom_device rd;     // used to initialise (seed) engine\nmt19937 mt(rd());    // random-number engine used (Mersenne-Twister in this case)\nuniform_int_distribution&lt;int&gt; dist(1, 4); // guaranteed unbiased\n</code></pre>\n<p>Later in code / within a function:</p>\n<pre><code>for (it : vec_one) {\n    int rand_int = dist(mt); // Generate Random Number\n    switch (rand_int) \n    {\n    case 1:\n        cout &lt;&lt; \"One!\" &lt;&lt; endl;\n    case 2:\n        cout &lt;&lt; \"Two!\" &lt;&lt; endl;\n    case 3:\n        cout &lt;&lt; \"Three!\" &lt;&lt; endl;\n    case 4:\n        cout &lt;&lt; \"Four!\" &lt;&lt; endl;\n    default:\n        break;\n    }\n}\n</code></pre>\n<p><strong>Answer from comments</strong>\nMissing breaks in the switch statement. It really was that simple. Generator working fine. I forgot to include them in my overtired state and feel quite stupid.\n<strong>However...</strong>\nThe number of comments and answers that skip over this issue highlight how easy it is to do. I feel slightly less stupid now...</p>\n", "AcceptedAnswerId": "47233230", "Title": "C++11 Mersenne Twister produces same value every time", "CreationDate": "2017-03-09T02:21:28.590", "Id": "42685506", "CommentCount": "7", "LastEditDate": "2017-03-09T12:33:30.960", "PostTypeId": "1", "LastEditorUserId": "7158175", "LastActivityDate": "2017-11-11T00:53:13.433", "Score": "2", "OwnerUserId": "7158175", "Tags": "<c++><c++11><visual-c++><random>", "AnswerCount": "2"}, "47233230": {"Id": "47233230", "PostTypeId": "2", "Body": "<p>The switch statement is missing breaks...<br>\nThe code below does the trick.</br></p>\n<pre><code>for (it : vec_one) {\n    int rand_int = dist(mt); // Generate Random Number\n    switch (rand_int) \n    {\n        case 1:\n            std::cout &lt;&lt; \"One!\" &lt;&lt; std::endl;\n            break;\n        case 2:\n            std::cout&lt;&lt; \"Two!\" &lt;&lt; std::endl;\n            break;\n        case 3:\n            std::cout&lt;&lt; \"Three!\" &lt;&lt; std::endl;\n            break;\n        case 4:\n            std::cout&lt;&lt; \"Four!\" &lt;&lt; std::endl;\n            break;\n        default:\n            break;\n        }\n    }\n</code></pre>\n", "LastActivityDate": "2017-11-11T00:53:13.433", "CommentCount": "1", "CreationDate": "2017-11-11T00:53:13.433", "ParentId": "42685506", "Score": "1", "OwnerUserId": "7158175"}});