post_cb({"29834725": {"ParentId": "29834657", "PostTypeId": "2", "CommentCount": "4", "Body": "<blockquote>\n<p id=\"so_29834657_29834725_0\">Is this code below,</p>\n<pre><code>typedef NodoQ *PtrNodoQ;\nPtrNodoQ ppio, fin;\n</code></pre>\n<p id=\"so_29834657_29834725_1\">the same as this one?</p>\n<pre><code>NodoQ* ppio;\nNodoQ* fin;\n</code></pre>\n</blockquote>\n<p>Yes, it's resulting in the exactly same pointer types for <code>ppio</code> and <code>fin</code>.</p>\n<hr>\n<p>As for your comment</p>\n<blockquote>\n<p id=\"so_29834657_29834725_2\"><em>\"I  didn't try cause I got the second option everywhere in my code, and just didn't want to loose some time... \"</em> </p>\n</blockquote>\n<p>You can easily test it:</p>\n<pre><code>void foo(PtrNodoQ p) {\n}\n\nvoid bar(NodoQ* p) {\n    foo(p);\n}\n</code></pre>\n<p>and </p>\n<pre><code>void baz() {\n    NodoQ n;\n    foo(&amp;n);\n    bar(&amp;n);\n}\n</code></pre>\n<p>compile all perfectly fine, without invalid type conversion warnings or errors.</p>\n<hr>\n<p>Also you could have found the answer quickly in <a href=\"http://en.cppreference.com/w/cpp/language/typedef\" rel=\"nofollow\">this excellent reference</a> (emphasis mine):</p>\n<blockquote>\n<p id=\"so_29834657_29834725_3\">The typedef-names are <strong>aliases for existing types</strong>, and are <strong>not declarations of new types</strong>. Typedef cannot be used to change the meaning of an existing type name (including a typedef-name). Once declared, a typedef-name may only be redeclared to refer to the same type again. Typedef names are only in effect in the scope where they are visible: different functions or class declarations may define identically-named types with different meaning.</p>\n</blockquote>\n</hr></hr>", "OwnerUserId": "1413395", "LastEditorUserId": "1413395", "LastEditDate": "2015-04-23T22:58:52.757", "Id": "29834725", "Score": "6", "CreationDate": "2015-04-23T21:32:46.070", "LastActivityDate": "2015-04-23T22:58:52.757"}, "29834997": {"ParentId": "29834657", "CommentCount": "0", "Body": "<p>In case you wanted the standardese, [dcl.typedef] states that:</p>\n<blockquote>\n<p id=\"so_29834657_29834997_0\">A name declared with the <code>typedef</code> specifier becomes a <em>typedef-name</em>. Within the scope of its declaration, a\n  <em>typedef-name</em> is syntactically equivalent to a keyword and names the type associated with the identifier in\n  the way described in Clause 8. A <em>typedef-name</em> is thus a <strong>synonym</strong> for another type. A <em>typedef-name</em> <strong>does\n  not</strong> introduce a new type the way a class declaration (9.1) or enum declaration does. <em>[ Example: after</em></p>\n<pre><code>typedef int MILES, *KLICKSP;\n</code></pre>\n<p id=\"so_29834657_29834997_1\">the constructions</p>\n<pre><code>MILES distance;\nextern KLICKSP metricp;\n</code></pre>\n<p id=\"so_29834657_29834997_2\">are all correct declarations; the type of <code>distance</code> is <code>int</code> and that of <code>metricp</code> is \u201cpointer to <code>int</code>.\u201d <em>\u2014end\n  example ]</em></p>\n</blockquote>\n<p>In your case, after</p>\n<pre><code>typedef NodoQ *PtrNodoQ;\n</code></pre>\n<p>The types <code>PtrNodoQ</code> and <code>Node*</code> are exactly the same and can be used interchangeably from there on out. The declarations <code>NodoQ* ppio;</code> and <code>PtrNodoQ ppio;</code> are exactly equivalent. </p>\n", "OwnerUserId": "2069064", "PostTypeId": "2", "Id": "29834997", "Score": "3", "CreationDate": "2015-04-23T21:52:02.993", "LastActivityDate": "2015-04-23T21:52:02.993"}, "29834657": {"CommentCount": "4", "ViewCount": "107", "PostTypeId": "1", "LastEditorUserId": "1413395", "CreationDate": "2015-04-23T21:28:31.930", "LastActivityDate": "2015-04-23T22:58:52.757", "Title": "Typedef equivalence for a pointer to struct", "AcceptedAnswerId": "29834725", "LastEditDate": "2015-04-23T22:13:56.513", "Id": "29834657", "Score": "6", "Body": "<p>I got this implementation of a struct:</p>\n<pre><code>struct NodoQ {\n  Etype elem;\n  NodoQ *sig;\n};\n</code></pre>\n<p>Is this code below, </p>\n<pre><code>typedef NodoQ *PtrNodoQ;\nPtrNodoQ ppio, fin;\n</code></pre>\n<p>the same as this one?</p>\n<pre><code>NodoQ* ppio;\nNodoQ* fin;\n</code></pre>\n", "Tags": "<c++><typedef>", "OwnerUserId": "2432237", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_29834657_29834997_0": {"section_id": 5407, "quality": 0.9743589743589743, "length": 38}, "so_29834657_29834997_2": {"section_id": 5407, "quality": 0.8181818181818182, "length": 9}}, "n3337": {"so_29834657_29834997_0": {"section_id": 5202, "quality": 0.9743589743589743, "length": 38}, "so_29834657_29834997_2": {"section_id": 5202, "quality": 0.8181818181818182, "length": 9}}, "n4659": {"so_29834657_29834997_0": {"section_id": 6829, "quality": 0.9487179487179487, "length": 37}, "so_29834657_29834997_2": {"section_id": 6829, "quality": 0.8181818181818182, "length": 9}}}});