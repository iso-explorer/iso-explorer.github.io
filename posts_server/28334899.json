post_cb({"28336094": {"ParentId": "28334899", "CommentCount": "6", "CreationDate": "2015-02-05T04:12:48.670", "OwnerUserId": "2069064", "PostTypeId": "2", "Id": "28336094", "Score": "0", "Body": "<p>In C++11, the union's copy constructor can be deleted. We see this from a note in [class.union], \u00a79.5 in N4140:</p>\n<blockquote>\n<p id=\"so_28334899_28336094_0\"><em>[Note:</em> If any non-static data member\n  of a union has a non-trivial default constructor (12.1), copy constructor (12.8), move constructor (12.8),\n  copy assignment operator (12.8), move assignment operator (12.8), or destructor (12.4), the corresponding\n  member function of the union must be user-provided or it will be implicitly deleted (8.4.3) for the union. <em>\u2014end note ]</em></p>\n</blockquote>\n<p>And in [class.copy], \u00a712.8/25, we see that our <code>union</code> has a non-trivial copy constructor:</p>\n<blockquote>\n<p id=\"so_28334899_28336094_1\">A copy/move assignment operator for class X is trivial if it is not user-provided, its parameter-type-list is\n  equivalent to the parameter-type-list of an implicit declaration, and if ...<br>\n  \u2014 [ .. ]<br>\n  \u2014 class X has <strong>no non-static data members of volatile-qualified type</strong>, and</br></br></p>\n</blockquote>\n<p>But that particular line in [class.copy] was only added a result of <a href=\"http://www.open-std.org/JTC1/SC22/WG21/docs/cwg_defects.html#496\" rel=\"nofollow\">Is a volatile-qualified type really a POD?</a> Before then, such a class would still be considered to have a trivial copy constructor. </p>\n<p>So it's my understanding that in C++03, there is no indication that the union's copy constructor should be deleted, and in C++11, there is some indication of this but it is non-normative. </p>\n", "LastActivityDate": "2015-02-05T04:12:48.670"}, "28334899": {"CommentCount": "3", "ViewCount": "409", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2015-02-05T01:53:52.030", "LastActivityDate": "2015-02-05T06:52:06.097", "Title": "Union containing volatile structs", "FavoriteCount": "2", "LastEditDate": "2017-05-23T12:12:51.777", "Id": "28334899", "Score": "6", "Body": "<p>This seems to be similar to <a href=\"https://stackoverflow.com/questions/27665567/pod-structs-containing-constant-member\">POD structs containing constant member</a>, but sort of reversed.</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct A\n{\n    int a;\n};\n\nunion U\n{\n    volatile A a;\n    long b;\n};\n\nint main()\n{\n    U u1;\n    U u2;\n\n    u1.a.a = 12;\n    u2 = u1;\n    std::cout &lt;&lt; u2.a.a &lt;&lt; std::endl;\n\n    return 0;\n}\n</code></pre>\n<p>g++ 4.8.3 compiles this code without error and it runs correctly:</p>\n<pre><code>$ g++ -std=c++03 a.cpp -o a_gcc\n$ ./a_gcc\n12\n</code></pre>\n<p>But clang++ 3.5.1 produces an error (I have manually wrapped the error message to keep the code box from scrolling):</p>\n<pre><code>$ clang++ -std=c++03 a.cpp -o a_clang\na.cpp:8:7: error: member function 'operator=' not viable: 'this'\nargument has type 'volatile A', but function is not marked volatile\nunion U\n      ^\na.cpp:3:8: note: 'operator=' declared here\nstruct A\n       ^\na.cpp:20:5: note: implicit copy assignment operator for 'U' first\nrequired here\n        u2 = u1;\n        ^\n1 error generated.\n</code></pre>\n<p>Does C++03 allow the program to copy-assign a union containing volatile structs? I could not find anything in the C++03 standard that defines the default copy constructor of a union.</p>\n<p>I would like to know which compiler is correct or if the standard isn't clear on that point.</p>\n<p><strong>Edit:</strong> I found out that if I use copy construction instead of copy assignment that both clang++ and g++ will compile the program without error. Specifically if I change <code>main</code> to be:</p>\n<pre><code>int main()\n{\n    U u1;\n\n    u1.a.a = 12;\n    U u2 = u1;\n    std::cout &lt;&lt; u2.a.a &lt;&lt; std::endl;\n\n    return 0;\n}\n</code></pre>\n<p>.. then it will work. I wonder why they are treated differently by clang++.</p>\n", "Tags": "<c++><language-lawyer><volatile><unions><c++03>", "OwnerUserId": "4071916", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_28334899_28336094_0": {"section_id": 5914, "quality": 0.7368421052631579, "length": 28}, "so_28334899_28336094_1": {"section_id": 474, "quality": 1.0, "length": 18}}, "n3337": {"so_28334899_28336094_0": {"section_id": 5686, "quality": 0.7368421052631579, "length": 28}, "so_28334899_28336094_1": {"section_id": 465, "quality": 0.5555555555555556, "length": 10}}, "n4659": {"so_28334899_28336094_0": {"section_id": 7406, "quality": 0.7368421052631579, "length": 28}, "so_28334899_28336094_1": {"section_id": 497, "quality": 0.5555555555555556, "length": 10}}}});