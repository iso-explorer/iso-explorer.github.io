post_cb({"24396987": {"CommentCount": "8", "ViewCount": "84", "CreationDate": "2014-06-24T21:55:03.260", "LastActivityDate": "2014-06-25T02:01:03.583", "Title": "Does `->` implies unreferencing?", "AcceptedAnswerId": "24397182", "PostTypeId": "1", "Id": "24396987", "Score": "1", "Body": "<p>I'm using the code below to find alignment properties of some attributes. I know that storing the <code>NULL</code> pointer is defined behaviour and pointer operations also are defined behaviour and only unreferencing the NULL (and other invalid values) pointer invokes undefined behaviour. My questions is simple: Does the <code>-&gt;</code> implies unreferencing the pointer (thus causing undefined behaviour in the code below)?</p>\n<pre class=\"lang-cpp prettyprint-override\"><code>#include &lt;iostream&gt;\n\nvoid f(void *p)\n{\n  std::cout &lt;&lt; p &lt;&lt; std::endl;\n}\n\nstruct X\n{\n  int a;\n  int b;\n};\n\nstruct Y\n{\n  int a[2];\n  int b;\n};\n\nint main()\n{\n  X *x = NULL;\n  Y *y = NULL;\n  f(&amp;x-&gt;b);\n  f(&amp;y-&gt;b);\n}\n</code></pre>\n", "Tags": "<c++><pointers><alignment>", "OwnerUserId": "883113", "AnswerCount": "2"}, "24397182": {"ParentId": "24396987", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The <code>-&gt;</code> operator is a combination of the <code>*</code> and <code>.</code> operators. For  </p>\n<pre><code>X *x = (struct *)malloc(sizeof(struct));\nf(&amp;x-&gt;b);\n</code></pre>\n<p>it perform indirection on <code>x</code> to locate the structure it points to, then selects the <code>b</code> member of the structure. It is similar to call  </p>\n<pre><code> f( &amp;(*x).b ); // which is same as f( &amp; ( (*x).b ) );\n</code></pre>\n<p>Since in your case <code>x</code> is a <code>NULL</code> pointer, dereferencing a <code>NULL</code> pointer invokes undefined behavior:<br>\n<strong>C++11: 8.3.2 References (p4):</strong></br></p>\n<blockquote>\n<p id=\"so_24396987_24397182_0\">Note: in particular, a null reference cannot exist in a well-defined program, because the only way to create such a reference would be to bind it to the \u201cobject\u201d obtained by <strong>dereferencing a null pointer, which causes undefined behavior</strong>.</p>\n</blockquote>\n", "OwnerUserId": "2455888", "LastEditorUserId": "2455888", "LastEditDate": "2014-06-24T22:16:04.393", "Id": "24397182", "Score": "2", "CreationDate": "2014-06-24T22:09:32.430", "LastActivityDate": "2014-06-24T22:16:04.393"}, "24397242": {"ParentId": "24396987", "PostTypeId": "2", "CommentCount": "9", "Body": "<p>The code in question is not undefined behavior (although it's a bit unconventional).    The code is essentially doing a poor-man's <code>offsetof()</code> inside the calls to <code>f()</code>, where you are passing the structure offset of <code>b</code> to that function.  The NULL pointer will not be dereferenced, as you are calculating the address of <code>x-&gt;b</code>.  You are not loading the contents of <code>x-&gt;b</code> via the NULL pointer.</p>\n<p>A citation for why the code above, equivalent to <code>offsetof</code>, is not undefined behavior, the C++ <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf\" rel=\"nofollow\">spec (draft 2012-01-16)</a>, on page 427, states: </p>\n<blockquote>\n<p id=\"so_24396987_24397242_0\">The macro <code>offsetof(type, member-designator)</code> accepts a restricted set of type arguments in this International Standard. If type is not a standard-layout class (Clause 9), the results are undefined.</p>\n</blockquote>\n<p>The usage in the code above is defined since it is using a standard-layout struct type (<code>struct X</code> and <code>struct Y</code>).</p>\n", "OwnerUserId": "2417846", "LastEditorUserId": "2417846", "LastEditDate": "2014-06-25T02:01:03.583", "Id": "24397242", "Score": "1", "CreationDate": "2014-06-24T22:14:37.907", "LastActivityDate": "2014-06-25T02:01:03.583"}, "bq_ids": {"n4140": {"so_24396987_24397242_0": {"section_id": 6706, "quality": 0.7058823529411765, "length": 12}, "so_24396987_24397182_0": {"section_id": 3222, "quality": 0.9090909090909091, "length": 20}}, "n3337": {"so_24396987_24397242_0": {"section_id": 6461, "quality": 0.7058823529411765, "length": 12}, "so_24396987_24397182_0": {"section_id": 3096, "quality": 0.9545454545454546, "length": 21}}, "n4659": {"so_24396987_24397242_0": {"section_id": 8181, "quality": 0.5882352941176471, "length": 10}, "so_24396987_24397182_0": {"section_id": 3979, "quality": 0.9090909090909091, "length": 20}}}});