post_cb({"41622896": {"CommentCount": "0", "AcceptedAnswerId": "41623008", "PostTypeId": "1", "LastEditorUserId": "819272", "CreationDate": "2017-01-12T21:01:02.360", "LastActivityDate": "2017-05-15T10:27:37.867", "LastEditDate": "2017-01-13T11:52:48.483", "ViewCount": "1134", "FavoriteCount": "2", "Title": "Why can't decomposition declarations be constexpr?", "Id": "41622896", "Score": "32", "Body": "<p>Consider the following snippet to test the upcoming C++17 feature decomposition declarations (formerly known as structured bindings)</p>\n<pre><code>#include &lt;cassert&gt;\n#include &lt;utility&gt;\n\nconstexpr auto divmod(int n, int d)\n{\n    return std::make_pair(n / d, n % d); // in g++7, also just std::pair{n/d, n%d}\n}\n\nint main()\n{\n    constexpr auto [q, r] = divmod(10, 3);\n    static_assert(q == 3 &amp;&amp; r ==1);\n}\n</code></pre>\n<p>This fails on both g++7-SVN and clang-4.0-SVN with the message: </p>\n<blockquote>\n<p id=\"so_41622896_41622896_0\">decomposition declaration cannot be declared 'constexpr'</p>\n</blockquote>\n<p>Dropping the <code>constexpr</code> definition and changing to a regular <code>assert()</code> works on both compilers.</p>\n<p>None of the WG21 papers on this feature mention the <code>constexpr</code> keyword, neither in the positive nor the negative. </p>\n<p><strong>Question</strong>: why aren't decomposition declarations be allowed to be <code>constexpr</code>? (apart from \"because the Standard says so\").</p>\n", "Tags": "<c++><constexpr><c++1z><structured-bindings>", "OwnerUserId": "819272", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_41622896_41622896_0": {"section_id": 5417, "quality": 0.8, "length": 4}}, "n3337": {"so_41622896_41622896_0": {"section_id": 5212, "quality": 0.8, "length": 4}}, "n4659": {"so_41622896_41622896_0": {"section_id": 6839, "quality": 0.8, "length": 4}, "so_41622896_41623008_1": {"section_id": 6808, "quality": 0.7142857142857143, "length": 5}}}, "41623008": {"ParentId": "41622896", "LastEditDate": "2017-05-15T10:27:37.867", "CommentCount": "6", "CreationDate": "2017-01-12T21:07:48.937", "OwnerUserId": "981959", "LastEditorUserId": "981959", "PostTypeId": "2", "Id": "41623008", "Score": "34", "Body": "<blockquote>\n<p id=\"so_41622896_41623008_0\">Question: why aren't decomposition declarations be allowed to be constexpr? (apart from \"because the Standard says so\").</p>\n</blockquote>\n<p>There is no other reason. The standard says in [dcl.dcl] p8:</p>\n<blockquote>\n<p id=\"so_41622896_41623008_1\">The <em>decl-specifier-seq</em> shall contain only the <em>type-specifier</em> <code>auto</code> (7.1.7.4) and <em>cv-qualifiers</em>. </p>\n</blockquote>\n<p>That means it can't be declared with <code>constexpr</code>.</p>\n<p>This was the subject of a National Body comment on the C++17 CD, see US-95 in <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0488r0.pdf\" rel=\"noreferrer\">P0488R0</a>:</p>\n<blockquote>\n<p id=\"so_41622896_41623008_2\"><strong>Comment</strong>: There is no obvious reason why decomposition\n  declarations cannot be declared as static,\n  thread_local, or constexpr.<br>\n<strong>Proposed change:</strong> Allow constexpr, static, and thread_local to the\n  permitted set of <em>decl-specifiers</em>.</br></p>\n</blockquote>\n<p>Comments GB 16 and GB 17 are also related.</p>\n<p>These comment were rejected for C++17 after review by the Evolution Working Group at the Nov 2016 meeting. It was unclear what some storage classes would mean on a structured binding declaration, and exactly how to change the specification to allow <code>constexpr</code> (simply allowing it in the grammar wouldn't say what it means). A paper exploring the design space was requested. It should be possible to change this in future without breaking any code, but there wasn't time to do it for C++17.</p>\n", "LastActivityDate": "2017-05-15T10:27:37.867"}});