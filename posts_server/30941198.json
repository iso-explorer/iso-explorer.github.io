post_cb({"30941300": {"ParentId": "30941198", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2015-06-19T14:57:01.340", "Score": "2", "LastEditorUserId": "496161", "LastEditDate": "2015-06-19T15:03:46.570", "Id": "30941300", "OwnerUserId": "496161", "Body": "<p>If C++11 and 14, you can declare your function <code>auto</code> to get rid of the long return type. You need to specify it as a trailing type in C++11, but this allows you to get omit the <code>typename B&lt;T&gt;::</code> because the compiler already knows where to look.</p>\n<pre><code>//C++11\ntemplate&lt;class T&gt;\nauto B&lt;T&gt;::foo(a b) -&gt; a {return b;}\n\n//C++14\ntemplate&lt;class T&gt;\nauto B&lt;T&gt;::foo(a b) {return b;}\n</code></pre>\n", "LastActivityDate": "2015-06-19T15:03:46.570"}, "30941198": {"CommentCount": "1", "ViewCount": "73", "CreationDate": "2015-06-19T14:52:13.490", "LastActivityDate": "2015-06-19T17:09:07.353", "Title": "C++ name resolution for member functions in template class", "AcceptedAnswerId": "30941308", "PostTypeId": "1", "Id": "30941198", "Score": "1", "Body": "<pre><code>#include &lt;iostream&gt;\n\ntemplate&lt;class T&gt; struct A {\n    typedef T a; \n}; \ntemplate&lt;class T&gt; \nstruct B {\n    typedef typename A&lt;T&gt;::a a;\n    static a foo(a b); \n}; \ntemplate&lt;class T&gt; \na B&lt;T&gt;::foo(a b) {return b}\n\nint main() {\n    std::cout &lt;&lt; B&lt;int&gt;::foo(1); \n}\n</code></pre>\n<p>Gives the following error: (<a href=\"http://coliru.stacked-crooked.com/a/ed2b365d36906c68\" rel=\"nofollow\">try it</a>).</p>\n<pre><code>main.cpp:13:1: error: 'a' does not name a type\n    a B&lt;T&gt;::foo(a b) {return b}\n</code></pre>\n<p>An inline definition does not suffer from this error.</p>\n<p>Could someone please explain why the compiler can not resolve <code>a</code> in this case, andhow I can make this code work.</p>\n<p>I would like to not resolve all the names explicitly like</p>\n<pre><code>typename B&lt;T&gt;::a B&lt;T&gt;::foo(typename B&lt;T&gt;::a b) {return b}\n</code></pre>\n<p>As it would decrease readability.</p>\n", "Tags": "<c++><templates>", "OwnerUserId": "842658", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_30941198_30941308_0": {"section_id": 7094, "quality": 0.9473684210526315, "length": 36}}, "n3337": {"so_30941198_30941308_0": {"section_id": 6838, "quality": 0.6578947368421053, "length": 25}}, "n4659": {"so_30941198_30941308_0": {"section_id": 8595, "quality": 0.9210526315789473, "length": 35}}}, "30941308": {"ParentId": "30941198", "PostTypeId": "2", "CommentCount": "2", "CreationDate": "2015-06-19T14:57:21.180", "Score": "4", "LastEditorUserId": "2069064", "LastEditDate": "2015-06-19T17:09:07.353", "Id": "30941308", "OwnerUserId": "2069064", "Body": "<p>That's because the <code>a</code> here is still looking in global scope:</p>\n<pre><code>template&lt;class T&gt; \na B&lt;T&gt;::foo(a b) {return b;}\n^^\n</code></pre>\n<p>You're doing unqualifed lookup on <code>a</code>. Once you get to the <code>B&lt;T&gt;::</code> part of the definition, that scope is added to all further lookup. So the type of the argument <code>b</code> will be looked up in the scope of <code>B&lt;T&gt;</code>. </p>\n<p>You simply need to qualify it the return type:</p>\n<pre><code>template&lt;class T&gt; \ntypename B&lt;T&gt;::a B&lt;T&gt;::foo(a b) {return b;}\n</code></pre>\n<p>The relevant rules is for why the argument type <code>a</code> can be found is in [basic.lookup.unqual]/8:</p>\n<blockquote>\n<p id=\"so_30941198_30941308_0\">For the members of a class X, a name used in a member function body, in a default argument, in an exceptionspecification,\n  in the brace-or-equal-initializer of a non-static data member (9.2), or <strong>in the definition of a class\n  member outside of the definition of X, following the member\u2019s declarator-id</strong>, shall be declared in one of the\n  following ways:<br>\n  \u2014 before its use in the block in which it is used or in an enclosing block (6.3), or<br>\n  \u2014 shall be a member of class X or be a member of a base class of X (10.2), or</br></br></p>\n</blockquote>\n<p>The return type <code>a</code> does not match the bolded text (or any of the text above), but the argument type <code>a</code> does. </p>\n", "LastActivityDate": "2015-06-19T17:09:07.353"}});