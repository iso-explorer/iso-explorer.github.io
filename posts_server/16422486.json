post_cb({"16422594": {"Id": "16422594", "PostTypeId": "2", "Body": "<p>The <a href=\"http://en.cppreference.com/w/cpp/container/vector/operator_cmp\">overload of <code>operator ==</code> that works on two <code>std::vector</code>s</a> will compare the vector sizes and return <code>false</code> if those are different; if not, it will compare the contents of the vector element-by-element.</p>\n<p>If <code>operator ==</code> is defined for the vector's element type, then the comparison of vectors through <code>operator ==</code> is valid and meaningful.</p>\n<p>In formal terms, the C++11 standard specifies the operational semantics of <code>a == b</code> for sequence containers as (Table 96, \u00a7 23.2.1):</p>\n<blockquote>\n<p id=\"so_16422486_16422594_0\"><code>==</code> is an equivalence\n  relation.</p>\n<p id=\"so_16422486_16422594_1\"><code>distance(a.begin(), a.end()) == distance(b.begin(), b.end()) &amp;&amp; equal(a.begin(), a.end(), b.begin())</code></p>\n</blockquote>\n<p>As you can see, equality between sequence containers is defined in terms of the <a href=\"http://en.cppreference.com/w/cpp/algorithm/equal\"><code>std::equal</code></a> algorithm between ranges defined by pairs of iterators, which in turn uses <code>operator ==</code> for comparison of individual elements.</p>\n", "LastEditorUserId": "1932150", "LastActivityDate": "2015-05-11T18:06:18.400", "Score": "38", "CreationDate": "2013-05-07T15:13:23.567", "ParentId": "16422486", "CommentCount": "2", "OwnerUserId": "1932150", "LastEditDate": "2015-05-11T18:06:18.400"}, "16422620": {"Id": "16422620", "PostTypeId": "2", "Body": "<p>You can check the documentation of <code>operator==</code> for vector: <a href=\"http://en.cppreference.com/w/cpp/container/vector/operator_cmp\" rel=\"nofollow\">operator==,!=,&lt;,&lt;=,&gt;,&gt;=(std::vector)</a></p>\n<p>Quoting from the link:</p>\n<pre><code> template&lt; class T, class Alloc &gt;\n bool operator==( vector&lt;T,Alloc&gt;&amp; lhs,\n             vector&lt;T,Alloc&gt;&amp; rhs );\n</code></pre>\n<blockquote>\n<p id=\"so_16422486_16422620_0\">Compares the contents of two containers.</p>\n<p id=\"so_16422486_16422620_1\">Checks if the contents of lhs and rhs are equal, that is, whether lhs.size() == rhs.size() and each element in lhs has equivalent element in rhs at the same position.</p>\n<p id=\"so_16422486_16422620_2\">parameters:</p>\n<p id=\"so_16422486_16422620_3\">lhs, rhs containers whose contents to compare</p>\n<p id=\"so_16422486_16422620_4\">T must meet the requirements of EqualityComparable in order to use versions</p>\n<p id=\"so_16422486_16422620_5\">Return value</p>\n<p id=\"so_16422486_16422620_6\">true if the contents of the containers are equivalent, false otherwise</p>\n</blockquote>\n", "LastActivityDate": "2013-05-07T15:14:50.513", "CommentCount": "0", "CreationDate": "2013-05-07T15:14:50.513", "ParentId": "16422486", "Score": "2", "OwnerUserId": "1760345"}, "16422572": {"Id": "16422572", "PostTypeId": "2", "Body": "<p>Yes, you can use <a href=\"http://en.cppreference.com/w/cpp/container/vector/operator_cmp\" rel=\"noreferrer\"><code>operator==</code></a> to compare two <code>std::vector</code>s. It will return <code>true</code> only if the vectors are the same size and all elements compare equal.</p>\n", "LastActivityDate": "2013-05-07T15:12:44.340", "CommentCount": "2", "CreationDate": "2013-05-07T15:12:44.340", "ParentId": "16422486", "Score": "5", "OwnerUserId": "150634"}, "16422486": {"ViewCount": "28011", "Body": "<p>First example:</p>\n<pre><code>int main(){\n    using namespace std;   \n    vector&lt;int&gt; v1{10, 20, 30, 40, 50};\n    vector&lt;int&gt; v2{10, 20, 30, 40, 50};\n\n    if(v1==v2)\n        cout&lt;&lt;\"equal\";\n    else\n        cout&lt;&lt;\"unequal\";\n}   // it returns equal \n</code></pre>\n<p>Second example:</p>\n<pre><code>int main(){\n    using namespace std;   \n    vector&lt;int&gt; v1{10, 20, 30, 40, 50};\n    vector&lt;int&gt; v2{10, 20, 100000, 40, 50};\n\n    if(v1==v2)\n        cout&lt;&lt;\"equal\";\n    else\n        cout&lt;&lt;\"unequal\";\n}   // it returns notequal \n</code></pre>\n", "AcceptedAnswerId": "16422594", "Title": "Can I use ' == ' to compare two vectors. I tried it and seems to be working fine. But I don't know whether it will work in more complex situations", "CreationDate": "2013-05-07T15:09:01.540", "Id": "16422486", "CommentCount": "0", "FavoriteCount": "4", "PostTypeId": "1", "LastEditDate": "2016-09-20T04:55:48.367", "LastEditorUserId": "1465553", "LastActivityDate": "2016-11-23T16:30:07.317", "Score": "28", "OwnerUserId": "2298516", "Tags": "<c++><vector><operator-overloading><equality>", "AnswerCount": "6"}, "16422663": {"Id": "16422663", "PostTypeId": "2", "Body": "<p>As long as your vector contains elements that in themselves can be compared (have <code>operator==</code>), this works, yes. Note however that if you have a vector that contains for example pointers to identical objects, but not the SAME instance of an object, then the vector is not considered identical, because the element in the vector is what is compared, not the contents of the element as such, if that makes sense. </p>\n", "LastActivityDate": "2013-05-07T15:17:03.960", "CommentCount": "0", "CreationDate": "2013-05-07T15:17:03.960", "ParentId": "16422486", "Score": "1", "OwnerUserId": "1919155"}, "bq_ids": {"n4140": {"so_16422486_16422620_6": {"length": 4, "quality": 0.6666666666666666, "section_id": 4541}, "so_16422486_16422594_1": {"length": 4, "quality": 0.5714285714285714, "section_id": 705}}, "n3337": {"so_16422486_16422620_6": {"length": 4, "quality": 0.6666666666666666, "section_id": 4372}, "so_16422486_16422594_1": {"length": 7, "quality": 1.0, "section_id": 695}}, "n4659": {"so_16422486_16422620_6": {"length": 5, "quality": 0.8333333333333334, "section_id": 802}}}, "16422622": {"Id": "16422622", "PostTypeId": "2", "Body": "<p>Yes. A good reference is <a href=\"http://www.cppreference.com\" rel=\"nofollow\">cppreference.com</a>, where you can look up <code>operator==</code> for <code>vector&lt;T&gt;</code>, for example on this page: <a href=\"http://en.cppreference.com/w/cpp/container/vector/operator_cmp\" rel=\"nofollow\">non-member operators</a>, and you will find:</p>\n<blockquote>\n<p id=\"so_16422486_16422622_0\">Checks if the contents of lhs and rhs are equal, that is, whether\n  lhs.size() == rhs.size() and each element in lhs has equivalent\n  element in rhs at the same position.</p>\n</blockquote>\n", "LastActivityDate": "2013-05-07T15:15:03.460", "CommentCount": "0", "CreationDate": "2013-05-07T15:15:03.460", "ParentId": "16422486", "Score": "1", "OwnerUserId": "1109067"}, "40769636": {"Id": "40769636", "PostTypeId": "2", "Body": "<p>Be advised that vectors are not ordered, so using std::equal or the \"==\" operator can normally not be used to assure a correct comparison of if two vectors contain the very same elements but in different order.\nThey do compare that the vectors have the same contents in the same order (but not in different order).</p>\n<p>For many use cases this might be enough.\nBut there might be occasions when you want to know if two vectors have the same contents but not necessarily in the same order.\nFor that case you need another function.</p>\n<p>One nice and short implementation is the one below.\nIt was suggested here: <a href=\"https://stackoverflow.com/questions/17394149/how-to-efficiently-compare-vectors-with-c/17394298#17394298\" title=\"How to efficiently compare vectors with C++?, by Stefan\">https://stackoverflow.com/questions/17394149/how-to-efficiently-compare-vectors-with-c/17394298#17394298</a>\nThere you will also find a discussion on why you might not want to use it...</p>\n<p>Put this in a header file of your choice:</p>\n<pre><code>#include &lt;algorithm&gt;\n\ntemplate &lt;class T&gt;\nstatic bool compareVectors(std::vector&lt;T&gt; a, std::vector&lt;T&gt; b)\n{\n   if (a.size() != b.size())\n   {\n      return false;\n   }\n   ::std::sort(a.begin(), a.end());\n   ::std::sort(b.begin(), b.end());\n   return (a == b);\n}\n</code></pre>\n<p>And here an example illustrating the above theory:</p>\n<pre><code>std::vector&lt;int&gt; vector1;\nstd::vector&lt;int&gt; vector2;\n\nvector1.push_back(100);\nvector1.push_back(101);\nvector1.push_back(102);\n\nvector2.push_back(102);\nvector2.push_back(101);\nvector2.push_back(100);\n\nif (vector1 == vector2)\n   std::cout &lt;&lt; \"same\" &lt;&lt; std::endl;\nelse\n   std::cout &lt;&lt; \"not same\" &lt;&lt; std::endl;\n\nif (std::equal(vector1.begin(), vector1.end(), vector2.begin()))\n   std::cout &lt;&lt; \"same\" &lt;&lt; std::endl;\nelse\n   std::cout &lt;&lt; \"not same\" &lt;&lt; std::endl;\n\nif (compareVectors(vector1, vector2))\n   std::cout &lt;&lt; \"same\" &lt;&lt; std::endl;\nelse\n   std::cout &lt;&lt; \"not same\" &lt;&lt; std::endl;\n</code></pre>\n<p>The output will be:</p>\n<pre><code>not same\nnot same\nsame\n</code></pre>\n", "LastEditorUserId": "-1", "LastActivityDate": "2016-11-23T16:30:07.317", "Score": "2", "CreationDate": "2016-11-23T16:30:07.317", "ParentId": "16422486", "CommentCount": "0", "OwnerUserId": "4121066", "LastEditDate": "2017-05-23T12:26:07.360"}});