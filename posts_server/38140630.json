post_cb({"bq_ids": {"n4140": {"so_38140630_38141463_0": {"length": 15, "quality": 0.9375, "section_id": 6066}}, "n3337": {"so_38140630_38141463_0": {"length": 15, "quality": 0.9375, "section_id": 5834}}, "n4659": {"so_38140630_38141463_0": {"length": 15, "quality": 0.9375, "section_id": 7562}}}, "38140784": {"Id": "38140784", "PostTypeId": "2", "Body": "<p>Because Precursor::x is not static member of class, you cannot get its address. You need to declare instance, and get address member of instance. This is why this-&gt;x works: \n1. C inherits B it has member x inherited from B \nand \n2. this designates current instance of C.</p>\n", "LastActivityDate": "2016-07-01T08:38:23.990", "CommentCount": "2", "CreationDate": "2016-07-01T08:38:23.990", "ParentId": "38140630", "Score": "0", "OwnerUserId": "1540501"}, "38141463": {"Id": "38141463", "PostTypeId": "2", "Body": "<p>When the <code>&amp;</code> operator is used on a qualified name of the form <code>C::m</code>, where <code>C</code> is a class and <code>m</code> is a non-static member, it returns a pointer-to-member of type <code>C::*T</code> where <code>T</code> is <code>m</code>'s type. This is a special case that overrides the default behavior of returning a pointer to the expression used as <code>&amp;</code>'s operand.</p>\n<p>To get a pointer to <code>C::m</code> where C is a base class, you will have to make it so that the operand of <code>&amp;</code> is not a qualified name, for example with <code>&amp;this-&gt;C::m</code> or <code>&amp;(C::m)</code>.</p>\n<p>Reference: C++14, 5.3.1/3</p>\n<blockquote>\n<p id=\"so_38140630_38141463_0\">If the operand is a quali\ufb01ed-id naming a non-static member m of some class C with type T, the result has type \u201cpointer to member of class C of type T\u201d and is a prvalue designating C::m</p>\n</blockquote>\n", "LastActivityDate": "2016-07-01T09:10:21.727", "CommentCount": "0", "CreationDate": "2016-07-01T09:10:21.727", "ParentId": "38140630", "Score": "4", "OwnerUserId": "189205"}, "38140630": {"ViewCount": "154", "Body": "<p>I have multiple inheritance (class <code>A</code> is base class, <code>B</code> derived from <code>A</code>, <code>C</code> derived from <code>B</code>).\n<code>A</code> has a protected member attribute, which I try to access in different ways in <code>C</code>.</p>\n<p>Consider this code:</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass A {\nprotected:\n        int x;\npublic:\n        A() : x(42) {}\n};\n\nclass B : public A {\n};\n\nclass C : public B {\nprotected:\n        typedef B Precursor;\n\npublic:\n        void foo() {\n                cout &lt;&lt; Precursor::x &lt;&lt; endl;\n                cout &lt;&lt; this-&gt;x &lt;&lt; endl;\n        }\n\n        int get() {\n                return Precursor::x;\n        }\n\n        int* getPtr() {\n                // error: \u2018int A::x\u2019 is protected\n                // error: within this context\n                // error: cannot convert \u2018int A::*\u2019 to \u2018int*\u2019 in return\n                return &amp;Precursor::x;\n                //return &amp;this-&gt;x;  // this works\n        }\n};\n\n\nint main() {\n        C obj;\n        obj.foo();\n        cout &lt;&lt; obj.get() &lt;&lt; endl;\n        cout &lt;&lt; obj.getPtr() &lt;&lt; endl;\n}\n</code></pre>\n<p>In <code>C::foo()</code> and in <code>C::get()</code>, <code>Precursor::x</code> works to access <code>x</code>.\nHowever, <code>&amp;Precursor::x</code> does not work. Why is that? <code>this-&gt;x</code> and <code>&amp;this-&gt;x</code> always works.</p>\n<p>Clang error message:</p>\n<pre><code>cpp-inheritance.cpp:34:22: error: 'x' is a protected member of 'A'\n                return &amp;Precursor::x;\n                                   ^\ncpp-inheritance.cpp:7:6: note: must name member using the type of the current context 'C'\n        int x;\n            ^\ncpp-inheritance.cpp:34:10: error: cannot initialize return object of type 'int *' with an\n      rvalue of type 'int A::*'\n                return &amp;Precursor::x;\n                       ^~~~~~~~~~~~~\n2 errors generated.\n</code></pre>\n", "AcceptedAnswerId": "38141463", "Title": "Protected member access works only when not getting its address", "CreationDate": "2016-07-01T08:29:39.600", "Id": "38140630", "CommentCount": "9", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2016-07-01T08:50:14.440", "LastEditorUserId": "133374", "LastActivityDate": "2016-07-01T09:10:21.727", "Score": "2", "OwnerUserId": "133374", "Tags": "<c++><inheritance>", "AnswerCount": "2"}});