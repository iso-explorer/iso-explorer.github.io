post_cb({"28453169": {"CommentCount": "6", "ViewCount": "69", "CreationDate": "2015-02-11T11:26:40.870", "LastActivityDate": "2015-02-11T11:58:40.043", "Title": "is (local) static initialization allowed to happen prematurley?", "AcceptedAnswerId": "28453273", "PostTypeId": "1", "Id": "28453169", "Score": "3", "Body": "<p>Lets say <code>foo</code> is called once in a program, and </p>\n<pre><code>void foo()\n{\n    if(sometimes_false())\n    {\n        static int xx = func_with_sideeffect();\n    }\n}\n</code></pre>\n<p>the condition wasn't met, is the side-effect <br>\n1. Allowed to have happened<br>\n2. Mandated to have happened (I'm guessing not if my compiler is conforming)<br>\n3. Mandated to not have happened<br/></br></br></br></p>\n", "Tags": "<c++>", "OwnerUserId": "3202093", "AnswerCount": "2"}, "28453277": {"ParentId": "28453169", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2015-02-11T11:32:09.900", "Score": "1", "LastEditorUserId": "2380830", "LastEditDate": "2015-02-11T11:58:40.043", "Id": "28453277", "OwnerUserId": "2380830", "Body": "<p>The answer is 3 but you need to think about threading.</p>\n<p>The <code>static int xx</code> will be initialised by the first thread encountering that variable, and C++11 will block all other threads at that point until <code>func_with_sideeffect()</code> returns <em>and</em> the result has been assigned to <code>xx</code>. (That's not the case with older standards: a mutex would have been required).</p>\n<p>It's more difficult to predict the destruction of <code>xx</code> if it was an instance of an object with a non-trivial destructor.</p>\n", "LastActivityDate": "2015-02-11T11:58:40.043"}, "28453273": {"ParentId": "28453169", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2015-02-11T11:31:59.190", "Score": "3", "LastEditorUserId": "977038", "LastEditDate": "2015-02-11T11:40:09.140", "Id": "28453273", "OwnerUserId": "977038", "Body": "<p>The <strong>non-constant</strong> initialization of all variable with local scope and static storage duration is from the point it is encountered till the end of the program. So, if the variable is not encountered because of a condition, it would not be initialized and the side effect won't happen.</p>\n<p>The following quote from the standard supports the answer (particularly the part in bold)</p>\n<p><strong>6.7 Declaration statement [stmt.dcl]</strong></p>\n<blockquote>\n<p id=\"so_28453169_28453273_0\">The zero-initialization (8.5) of all block-scope variables with static\n  storage duration (3.7.1) or thread storage duration (3.7.2) is\n  performed before any other initialization takes place. Constant\n  initialization (3.6.2) of ablock-scope entity with static storage\n  duration, if applicable, is performed before its block is first\n  entered.An implementation is permitted to perform early initialization\n  of other block-scope variables with static orthread storage duration\n  under the same conditions that an implementation is permitted to\n  statically initializea variable with static or thread storage duration\n  in namespace scope (3.6.2). <strong>Otherwise such a variable is initialized\n  the first time control passes through its declaration</strong>; such a\n  variable is considered initialized upon the completion of its\n  initialization. If the initialization exits by throwing an exception,\n  the initialization is not complete, so it will be tried again the next\n  time control enters the declaration. If control enters the declaration\n  concurrently while the variable is being initialized, the concurrent\n  execution shall wait for completion of the initialization.88 If control\n  re-enters the declaration recursively while the variable is\n  being initialized, the behavior is undefined.</p>\n</blockquote>\n", "LastActivityDate": "2015-02-11T11:40:09.140"}, "bq_ids": {"n4140": {"so_28453169_28453273_0": {"section_id": 3919, "quality": 0.9137931034482759, "length": 106}}, "n3337": {"so_28453169_28453273_0": {"section_id": 3779, "quality": 0.9137931034482759, "length": 106}}, "n4659": {"so_28453169_28453273_0": {"section_id": 4805, "quality": 0.5172413793103449, "length": 60}}}});