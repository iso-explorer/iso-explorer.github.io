post_cb({"36844218": {"Id": "36844218", "PostTypeId": "2", "Body": "<p>I don't have time to look it up now, but the rule is that a virtual call on an object whose destructor is running goes to the class whose destructor is currently running. So in the destructor for <code>Bd</code>, the destructor for <code>a</code> runs, and the call <code>b-&gt;f()</code> calls <code>Bd::f</code>.</p>\n<p>If <code>a</code> had been a member of <code>B</code> instead of <code>Bd</code>, the call would go to <code>B::f</code>, because the destructor of <code>a</code> would run from <code>B</code>'s destructor.</p>\n<p>If you prefer to think of mechanisms (I generally don't), think in terms of the vtable; on entry into a destructor, the code sets the vtable pointer to point to the vtable belonging to the destructor that's running.</p>\n", "LastActivityDate": "2016-04-25T14:58:52.830", "Score": "0", "CreationDate": "2016-04-25T14:58:52.830", "ParentId": "36843778", "CommentCount": "0", "OwnerUserId": "1593860"}, "bq_ids": {"n4140": {"so_36843778_36846879_0": {"length": 45, "quality": 0.9574468085106383, "section_id": 447}}, "n3337": {"so_36843778_36846879_0": {"length": 45, "quality": 0.9574468085106383, "section_id": 438}}, "n4659": {"so_36843778_36846879_0": {"length": 45, "quality": 0.9574468085106383, "section_id": 469}}}, "36843778": {"ViewCount": "77", "Body": "<p>I have this situation: </p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct B { virtual void f() { std::cout &lt;&lt; \"base\"; } };\n\nstruct A {\n  ~A() {\n      b-&gt;f();\n  }\n\n  B *b;\n};\n\n\nstruct Bd : B { \n  Bd():a{this}{ }\n  ~Bd() { }\n  virtual void f() { std::cout &lt;&lt; \"derived\"; } \n\n  A a;\n};\n\nint main() {\n  Bd d;\n}\n</code></pre>\n<p>Is it guaranteed that this prints \"derived\"? </p>\n", "AcceptedAnswerId": "36846879", "Title": "What type for virtual function does a class have when a member destructor runs?", "CreationDate": "2016-04-25T14:40:54.413", "Id": "36843778", "CommentCount": "3", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2016-04-25T14:58:25.047", "LastEditorUserId": "34509", "LastActivityDate": "2016-04-25T17:08:36.020", "Score": "2", "OwnerUserId": "34509", "Tags": "<c++><virtual>", "AnswerCount": "2"}, "36846879": {"Id": "36846879", "PostTypeId": "2", "Body": "<p><a href=\"http://eel.is/c++draft/class.cdtor#4\" rel=\"nofollow\">[class.cdtor]/4</a>:</p>\n<blockquote>\n<p id=\"so_36843778_36846879_0\">Member functions, including virtual functions ([class.virtual]), can\n  be called during construction or destruction ([class.base.init]). When\n  a virtual function is called directly or indirectly from a constructor\n  or from a destructor, <strong>including during the construction or destruction\n  of the class's non-static data members,</strong> and the object to which the\n  call applies is the object (call it <code>x</code>) under construction or\n  destruction, the function called is the final overrider in the\n  constructor's or destructor's class and not one overriding it in a\n  more-derived class.</p>\n</blockquote>\n<p>\"The class\" at issue here is <code>Bd</code>, so it should call the final overrider of <code>f()</code> in <code>Bd</code>, and print <code>derived</code>.</p>\n", "LastActivityDate": "2016-04-25T17:08:36.020", "Score": "2", "CreationDate": "2016-04-25T17:08:36.020", "ParentId": "36843778", "CommentCount": "0", "OwnerUserId": "2756719"}});