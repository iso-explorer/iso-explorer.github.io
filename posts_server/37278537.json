post_cb({"bq_ids": {"n4140": {"so_37278537_37278537_0": {"length": 13, "quality": 0.8666666666666667, "section_id": 5948}, "so_37278537_37278537_1": {"length": 16, "quality": 0.9411764705882353, "section_id": 5949}, "so_37278537_37278537_2": {"length": 15, "quality": 0.8823529411764706, "section_id": 6076}}, "n3337": {"so_37278537_37278537_0": {"length": 13, "quality": 0.8666666666666667, "section_id": 5718}, "so_37278537_37278537_1": {"length": 16, "quality": 0.9411764705882353, "section_id": 5719}, "so_37278537_37278537_2": {"length": 15, "quality": 0.8823529411764706, "section_id": 5844}}, "n4659": {"so_37278537_37278537_2": {"length": 15, "quality": 0.8823529411764706, "section_id": 7572}, "so_37278537_37278537_1": {"length": 16, "quality": 0.9411764705882353, "section_id": 7435}, "so_37278537_37278537_0": {"length": 13, "quality": 0.8666666666666667, "section_id": 7434}}}, "37278537": {"ViewCount": "170", "Body": "<p>5.1.1/2 is stated that: </p>\n<blockquote>\n<p id=\"so_37278537_37278537_0\">The keyword <code>this</code> names a pointer to the object for which a\n  non-static member function (9.3.2) is invoked or a non-static data\n  member\u2019s initializer (9.2) is evaluated.</p>\n</blockquote>\n<p>And:</p>\n<blockquote>\n<p id=\"so_37278537_37278537_1\">Unlike the object expression in other contexts, <code>*this</code> is not\n  required to be of complete type for purposes of class member access\n  (5.2.5) outside the member function body.</p>\n</blockquote>\n<p>The following code prints <code>8</code>:</p>\n<pre><code>#include &lt;cstddef&gt;\n#include &lt;iostream&gt;\n\nstruct Test\n{\n    std::size_t sz = sizeof(this-&gt;sz);\n};\n\nint main()\n{\n    std::cout &lt;&lt; Test{}.sz;\n}\n</code></pre>\n<p>5.3.3 says: </p>\n<blockquote>\n<p id=\"so_37278537_37278537_2\">The operand is either an expression, which is an unevaluated operand\n  (Clause 5), or a parenthesized <em>type-id</em>. The <code>sizeof</code> operator shall\n  not be applied to an expression that has function or incomplete\n  type...</p>\n</blockquote>\n<p><code>sizeof this-&gt;sz</code> has the same result.</p>\n<p>Is <code>this-&gt;</code> considered a no-op in this case and it's essentially equivalent to <code>sizeof(sz)</code>?</p>\n", "Title": "How is this size computed?", "CreationDate": "2016-05-17T14:09:10.947", "LastActivityDate": "2016-05-17T14:19:48.033", "CommentCount": "2", "LastEditDate": "2016-05-17T14:16:18.863", "PostTypeId": "1", "LastEditorUserId": "1532460", "Id": "37278537", "Score": "4", "OwnerUserId": "6292850", "Tags": "<c++>", "AnswerCount": "1"}, "37278793": {"Id": "37278793", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_37278537_37278793_0\">Is <code>this-&gt;</code> considered a no-op in this case and it's essentially equivalent to <code>sizeof(sz)</code>?</p>\n</blockquote>\n<p><strong>That's right.</strong></p>\n<p>The type of <code>this-&gt;sz</code> is <code>std::size_t</code>, a complete type in that context.</p>\n<p>The type of <code>*this</code> is <em>not</em> complete here, but you quoted the passage stating why that doesn't matter and we can go straight through to analysing <code>sz</code> specifically.</p>\n<p>As such, the <code>this-&gt;</code> had no actual effect on the semantics of the expression, either for better or for worse.</p>\n<p>As Sergey said, there is one case where using <code>this-&gt;</code> for member access makes a difference (template bases!), and this is not one of them.</p>\n", "LastActivityDate": "2016-05-17T14:19:48.033", "CommentCount": "0", "CreationDate": "2016-05-17T14:19:48.033", "ParentId": "37278537", "Score": "9", "OwnerUserId": "560648"}});