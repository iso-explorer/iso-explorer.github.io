post_cb({"41601734": {"CommentCount": "0", "ViewCount": "76", "CreationDate": "2017-01-11T22:18:23.110", "LastActivityDate": "2017-01-11T22:57:27.807", "Title": "Are std::list iterators unique and persistent?", "AcceptedAnswerId": "41602076", "PostTypeId": "1", "Id": "41601734", "Score": "0", "Body": "<p>I know that <code>std::list</code> iterators <a href=\"http://en.cppreference.com/w/cpp/concept/BidirectionalIterator\" rel=\"nofollow noreferrer\">are Equality Comparable</a> (as Bidirectional Iterators). Now, is the following code well-defined and guaranteed to print \"equal\"?</p>\n<pre><code>std::list&lt;int&gt; nums = { 1, 2, 3 };\nstd::list&lt;int&gt;::iterator a = std::find(nums.begin(), nums.end(), 1);\nnums.push_front(0);\nstd::list&lt;int&gt;::iterator b = std::find(nums.begin(), nums.end(), 1);\nif (a == b) std::cout &lt;&lt; \"equal\" &lt;&lt; std::endl;\n</code></pre>\n<p>It <a href=\"http://ideone.com/XbYCTa\" rel=\"nofollow noreferrer\">works for me</a>, but that doesn't mean it's well-defined or guaranteed!</p>\n<p>In other words, if one finds an iterator to a particular <code>std::list</code> entry at different times (possibly with other elements having been added or removed in between), are the two iterators guaranteed to be equal?</p>\n<p>This question is specifically about <code>std::list</code> iterators (if it matters), but an answer that also covers other STL containers in general would be excellent!</p>\n", "Tags": "<c++11><stl><iterator>", "OwnerUserId": "1274314", "AnswerCount": "2"}, "41601998": {"ParentId": "41601734", "CommentCount": "0", "Body": "<p>Yes. This is guaranteed for <code>std::list</code>, but not for (say) vector.</p>\n<p>[list.modifiers]/1 says (about all the calls to insert, push_back, etc): \"<em>Remarks</em>: Does not affect the validity of iterators and references\"</p>\n<p>[vector.modifiers]/1 says instead: \"<em>Remarks</em>: Causes reallocation if the new size is greater than the old capacity. Reallocation invalidates all the references, pointers, and iterators referring to the elements in the sequence. If no reallocation happens, all the iterators and references before the insertion point remain valid. \"</p>\n", "OwnerUserId": "992490", "PostTypeId": "2", "Id": "41601998", "Score": "2", "CreationDate": "2017-01-11T22:36:41.863", "LastActivityDate": "2017-01-11T22:36:41.863"}, "bq_ids": {"n4140": {"so_41601734_41602076_0": {"section_id": 5577, "quality": 1.0, "length": 8}, "so_41601734_41602076_1": {"section_id": 5578, "quality": 1.0, "length": 6}}, "n3337": {"so_41601734_41602076_0": {"section_id": 5359, "quality": 1.0, "length": 8}, "so_41601734_41602076_1": {"section_id": 5360, "quality": 1.0, "length": 6}}, "n4659": {"so_41601734_41602076_0": {"section_id": 7024, "quality": 1.0, "length": 8}, "so_41601734_41602076_1": {"section_id": 7025, "quality": 1.0, "length": 6}}}, "41602076": {"ParentId": "41601734", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>It is well-defined and guaranteed, assuming both iterators are valid (which they are in this case). That is how the equality between (forward, and more specialized) iterators is defined.</p>\n<p>[forward.iterators] (standard draft)</p>\n<blockquote>\n<p id=\"so_41601734_41602076_0\">5 If a and b are equal, then either a and b are both dereferenceable or else neither is dereferenceable.</p>\n<p id=\"so_41601734_41602076_1\">6 If a and b are both dereferenceable, then a == b if and only if *a and *b are bound to the same object.</p>\n</blockquote>\n<p>Since your iterators a, and b point to the same object, they must compare equal.</p>\n<hr>\n<blockquote>\n<p id=\"so_41601734_41602076_2\">(possibly with other elements having been added or removed in between)</p>\n</blockquote>\n<p>For some containers, this could have effect on the validity of the iterator that was created before the modifications. If one of the iterators is invalidated, then it is no longer guaranteed to point to the object that it used to. In fact, it would no longer be guaranteed to point to the container at all, so the result of the comparison would not be defined.</p>\n<p>Non-end iterators of <code>std::list</code> in particular won't be invalidated unless the particular element they point to is removed. Each container has their own invalidation rules, that must be looked up from the documentation.</p>\n</hr>", "OwnerUserId": "2079303", "LastEditorUserId": "2079303", "LastEditDate": "2017-01-11T22:57:27.807", "Id": "41602076", "Score": "2", "CreationDate": "2017-01-11T22:42:49.653", "LastActivityDate": "2017-01-11T22:57:27.807"}});