post_cb({"bq_ids": {"n4140": {"so_40943080_40943130_4": {"length": 8, "quality": 0.6666666666666666, "section_id": 3285}, "so_40943080_40943130_0": {"length": 11, "quality": 0.6470588235294118, "section_id": 3291}, "so_40943080_40943130_3": {"length": 6, "quality": 0.5454545454545454, "section_id": 3285}, "so_40943080_40943130_1": {"length": 4, "quality": 0.8, "section_id": 39}}, "n3337": {"so_40943080_40943130_4": {"length": 8, "quality": 0.6666666666666666, "section_id": 3155}, "so_40943080_40943130_0": {"length": 11, "quality": 0.6470588235294118, "section_id": 6895}, "so_40943080_40943130_3": {"length": 6, "quality": 0.5454545454545454, "section_id": 3155}, "so_40943080_40943130_1": {"length": 4, "quality": 0.8, "section_id": 36}}, "n4659": {"so_40943080_40943130_4": {"length": 8, "quality": 0.6666666666666666, "section_id": 4047}, "so_40943080_40943130_0": {"length": 11, "quality": 0.6470588235294118, "section_id": 4053}, "so_40943080_40943130_3": {"length": 6, "quality": 0.5454545454545454, "section_id": 4047}, "so_40943080_40943130_1": {"length": 4, "quality": 0.8, "section_id": 39}}}, "40943080": {"ViewCount": "159", "Body": "<p>I am looking at some code about which I am puzzled.</p>\n<p>This snippet is in the header file, RPI.h:</p>\n<pre><code>#define BCM2708_PERI_BASE  0x20000000\n#define GPIO_BASE         (BCM2708_PERI_BASE + 0x200000) // GPIO controller \n\n// IO Access\nstruct bcm2835_peripheral {\n    unsigned long addr_p;\n    int mem_fd;\n    void *map;\n    volatile unsigned int *addr;\n};\n\nstruct bcm2835_peripheral gpio = {GPIO_BASE};\n\nextern struct bcm2835_peripheral gpio;\n</code></pre>\n<p>From the RPI.c file:</p>\n<pre><code>#include \"RPI.h\"\n\nstruct bcm2835_peripheral gpio = {GPIO_BASE};\n</code></pre>\n<p>I am puzzled by the line in both the .h and .c files:</p>\n<pre><code>struct bcm2835_peripheral gpio = {GPIO_BASE};\n</code></pre>\n<p>It looks to me that a new struct of type <code>bcm2835_peripheral</code> named <code>gpio</code> is being instantiated and set equal to <code>GPIO_BASE</code>.  However, the struct has four, public members.  Are they all being set to <code>GPIO_BASE</code>?</p>\n<p>I only included the lines from the .h and .c files which were relevant.  The lines are in the order they are in the original files.</p>\n", "AcceptedAnswerId": "40943130", "Title": "How does this C/C++ struct initializer with not enough fields work?", "CreationDate": "2016-12-03T00:49:04.170", "Id": "40943080", "CommentCount": "3", "LastEditDate": "2016-12-03T13:17:25.170", "PostTypeId": "1", "LastEditorUserId": "1687119", "LastActivityDate": "2016-12-03T13:17:25.170", "Score": "3", "OwnerUserId": "6220486", "Tags": "<c++><c>", "AnswerCount": "1"}, "40943130": {"Id": "40943130", "PostTypeId": "2", "Body": "<p>When a struct or array is initialized, you don't have to give an initializer for every element.  </p>\n<p>For the initializers that are there, the fields are set in order, and any remaining fields for which there is no initializer are set to 0 for integer types and <code>NULL</code> for pointer types.</p>\n<p>From section 6.7.9 of the <a href=\"http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf\" rel=\"nofollow noreferrer\">C standard</a>:</p>\n<blockquote>\n<p id=\"so_40943080_40943130_0\"><em>10</em> If  an  object  that  has  automatic  storage  duration  is  not  initialized  explicitly,  its  value  is indeterminate.   <strong>If  an \n  object  that  has  static  or  thread  storage  duration  is  not \n  initialized explicitly</strong>, then: </p>\n<p id=\"so_40943080_40943130_1\">\u2014  <strong>if it has pointer type, it is\n  initialized to a null pointer;</strong> </p>\n<p id=\"so_40943080_40943130_2\">\u2014  <strong>if it has arithmetic type, it is\n  initialized to (positive or unsigned) zero;</strong></p>\n<p id=\"so_40943080_40943130_3\">\u2014  if it is an aggregate,\n  every member is initialized (recursively) according to these rules,\n  and any padding is initialized to zero bits;</p>\n<p id=\"so_40943080_40943130_4\">\u2014  if it is a union, the\n  first named member is initialized (recursively) according to these\n  rules, and any padding is initialized to zero bits;</p>\n<p id=\"so_40943080_40943130_5\">...</p>\n<p id=\"so_40943080_40943130_6\"><em>21</em> <strong>If there are fewer initializers in a brace-enclosed list than there are elements or members of an aggregate</strong>, or fewer characters in\n  a string literal used to initialize an array of known size  than \n  there  are  elements  in  the  array,  <strong>the  remainder  of  the \n  aggregate  shall  be initialized implicitly the same as objects that\n  have static storage duration.</strong></p>\n</blockquote>\n<p>So in this case the <code>addr_p</code> field is set to <code>GPIO_BASE</code>, while <code>mem_fd</code>, <code>map</code>, and <code>addr</code> are set to 0, <code>NULL</code>, and <code>NULL</code> respectively.</p>\n", "LastEditorUserId": "1687119", "LastActivityDate": "2016-12-03T13:02:02.597", "Score": "10", "CreationDate": "2016-12-03T00:56:21.507", "ParentId": "40943080", "CommentCount": "3", "OwnerUserId": "1687119", "LastEditDate": "2016-12-03T13:02:02.597"}});