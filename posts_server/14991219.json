post_cb({"14991297": {"ParentId": "14991219", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>Yes, it's ill-specified and <a href=\"https://stackoverflow.com/a/5101759/150634\">has been covered before</a>. Basically, every time an lvalue expression is required is enumerated, so we assume that every other operand must be a prvalue expression.</p>\n<p>So to answer your questions:</p>\n<ol>\n<li>A prvalue.</li>\n<li>If it's not specified, it's a prvalue.</li>\n</ol>\n<p>The note that is quoted in the linked answer seems to have changed a few times. The quote from \u00a73.10 of the C++11 standard is as follows (and at the current time is identical in the latest draft):</p>\n<blockquote>\n<p id=\"so_14991219_14991297_0\">[ Note: The discussion of each built-in operator in Clause 5 indicates the category of the value it yields and the value categories of the operands it expects. For example, the built-in assignment operators expect that the left operand is an lvalue and that the right operand is a prvalue and yield an lvalue as the result. User-defined operators are functions, and the categories of values they expect and yield are determined by their parameter and return types. \u2014 end note ]</p>\n</blockquote>\n<p>Here it even says explicitly that the assignment operators expect the right operand to be a prvalue. Of course, this is a note and is therefore non-normative.</p>\n", "OwnerUserId": "150634", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T11:46:16.047", "Id": "14991297", "Score": "7", "CreationDate": "2013-02-20T22:39:38.530", "LastActivityDate": "2013-02-20T23:02:20.447"}, "14991219": {"CommentCount": "18", "AcceptedAnswerId": "14991297", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2013-02-20T22:33:26.940", "LastActivityDate": "2013-02-20T23:02:20.447", "LastEditDate": "2017-05-23T12:31:56.780", "ViewCount": "674", "FavoriteCount": "1", "Title": "What is the value category of the operands of C++ operators when unspecified?", "Id": "14991219", "Score": "15", "Body": "<p><strong>PREMISE:</strong></p>\n<p>The C++11 Standard classifies expressions into three disjoint <strong>value categories</strong>: <em>lvalues</em>, <em>xvalues</em>, and <em>prvalues</em> (\u00a7 3.10/1). An explanation of what value categories are is available for instance <a href=\"https://stackoverflow.com/questions/3601602/what-are-rvalues-lvalues-xvalues-glvalues-and-prvalues\"><strong>here</strong></a>.</p>\n<p>I am struggling to figure out what are the requirements of the different operators on the <em>value category</em> of their operands. Paragraph 3.10/1 specifies:</p>\n<blockquote>\n<p id=\"so_14991219_14991219_0\">[...] Every expression belongs to exactly one of the fundamental classifications in this taxonomy: lvalue, xvalue, or prvalue. This property of an expression is called its value category. [ Note: The discussion of each built-in operator in <strong>Clause 5 indicates the category of the value it yields and the value categories of the operands it expects</strong>. For example, <strong>the built-in assignment operators expect that the left operand is an lvalue and that the right operand is a prvalue and yield an lvalue as the result</strong>. User-defined operators are functions, and the categories of values they expect and yield are determined by their parameter and return types. \u2014end note ]</p>\n</blockquote>\n<p>In spite of what the note above claims, Clause 5 is not always very clear about the value category of operators' operands. This is, for instance, all that is said about the value category of the operands of the <em>assignment</em> operator (Paragraph 5.17/1):</p>\n<blockquote>\n<p id=\"so_14991219_14991219_1\">The assignment operator (=) and the compound assignment operators all group right-to-left. <strong>All require a modifiable lvalue as their left operand and return an lvalue referring to the left operand</strong>. The result in all cases is a bit-field if the left operand is a bit-field. In all cases, the assignment is sequenced after the value computation of the right and left operands, and before the value computation of the assignment expression. With respect to an indeterminately-sequenced function call, the operation of a compound assignment is a single evaluation. [ Note: Therefore, <strong>a function call shall not intervene between the lvalue-to-rvalue conversion</strong> and the side effect associated with any single compound assignment operator. \u2014end note ]</p>\n</blockquote>\n<p>How about the right operands?</p>\n<p>The words \"rvalue\" and \"lvalue\" no more occur in the whole Section 5.17. While the note in Paragraph 3.10/1 makes it explicit that the built-in assignment operators expect a prvalue as a right operand, this is not explicitly mentioned in Section 5.17.  Even the  final note of 5.17/1, which mentions lvalue-to-rvalue conversions, seems to imply that rvalues are expected somehow (what's the need for a conversion otherwise?), but notes are non-normative after all.</p>\n<p>Sections concerning other operators, including multiplicative and additive operators, are generally silent on the value category of their operands. I couldn't find any \"default statement\" in the Standard stating that, when not specified otherwise, the operands of built-in operators are rvalues. Hence, the question.</p>\n<p><strong>QUESTION:</strong></p>\n<ol>\n<li><strong>What is the value category of the right operand of the assignment operator</strong>; and, more generally</li>\n<li><strong>How to figure out the value category of an operator's operand when this is is not specified</strong>? Is it unconstrained (meaning that any value category is accepted)? If so, why should lvalue-to-rvalue conversions ever apply in an assignment expression?</li>\n</ol>\n<p>References to the C++11 Standard are highly appreciated.</p>\n", "Tags": "<c++><c++11><operators><language-lawyer><rvalue>", "OwnerUserId": "1932150", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_14991219_14991219_1": {"section_id": 6173, "quality": 0.9154929577464789, "length": 65}, "so_14991219_14991297_0": {"section_id": 7230, "quality": 0.8888888888888888, "length": 40}, "so_14991219_14991219_0": {"section_id": 7230, "quality": 0.8888888888888888, "length": 56}}, "n3337": {"so_14991219_14991219_1": {"section_id": 5934, "quality": 0.9154929577464789, "length": 65}, "so_14991219_14991297_0": {"section_id": 6974, "quality": 0.8888888888888888, "length": 40}, "so_14991219_14991219_0": {"section_id": 6974, "quality": 0.8888888888888888, "length": 56}}, "n4659": {"so_14991219_14991219_1": {"section_id": 7675, "quality": 0.9154929577464789, "length": 65}, "so_14991219_14991297_0": {"section_id": 8741, "quality": 0.8888888888888888, "length": 40}, "so_14991219_14991219_0": {"section_id": 8741, "quality": 0.8888888888888888, "length": 56}}}});