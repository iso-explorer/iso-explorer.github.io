post_cb({"bq_ids": {"n4140": {"so_8522740_8522879_0": {"length": 23, "quality": 0.92, "section_id": 6365}}, "n3337": {"so_8522740_8522879_0": {"length": 23, "quality": 0.92, "section_id": 6122}}, "n4659": {"so_8522740_8522879_0": {"length": 23, "quality": 0.92, "section_id": 7876}}}, "8522740": {"ViewCount": "265", "Body": "<p>If I <code>move</code> <code>shared_ptr</code> 'a' into <code>shared_ptr</code> 'b' is 'a' guaranteed to be null?</p>\n<p>Is the state of <em>any</em> standard class after being moved specified?</p>\n", "AcceptedAnswerId": "8522879", "Title": "Is the state of any standard class after being moved specified?", "CreationDate": "2011-12-15T15:46:43.040", "Id": "8522740", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2011-12-18T01:13:53.120", "Score": "9", "OwnerUserId": "369872", "Tags": "<c++><c++11><shared-ptr>", "AnswerCount": "2"}, "8522879": {"Id": "8522879", "PostTypeId": "2", "Body": "<p>In general 17.6.5.15/1 applies:</p>\n<blockquote>\n<p id=\"so_8522740_8522879_0\">Objects of types defined in the C++ standard library may be moved from (12.8). Move operations may be explicitly specified or implicitly generated. Unless otherwise specified, such moved-from objects shall be placed in a valid but unspecified state.</p>\n</blockquote>\n<p>Thus you can call any functions which requires no precondition.</p>\n<p>If specified, <a href=\"https://stackoverflow.com/a/8522831/500104\">what @Xeo said</a> applies.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2011-12-18T01:13:53.120", "Score": "12", "CreationDate": "2011-12-15T15:56:47.557", "ParentId": "8522740", "CommentCount": "2", "OwnerUserId": "136208", "LastEditDate": "2017-05-23T12:20:13.053"}, "8522831": {"Id": "8522831", "PostTypeId": "2", "Body": "<p>If specified, it's under their constructor and (if assignable) assignment operator subclause. For <code>shared_ptr</code> we have:</p>\n<p><code>\u00a720.7.2.2.1 [util.smartptr.shared.const]</code></p>\n<pre><code>shared_ptr(shared_ptr&amp;&amp; r) noexcept;\ntemplate&lt;class Y&gt; shared_ptr(shared_ptr&lt;Y&gt;&amp;&amp; r) noexcept;\n</code></pre>\n<blockquote>\n<p id=\"so_8522740_8522831_0\">p20 <em>Remark:</em> The second constructor shall not participate in overload resolution unless <code>Y*</code> is convertible to <code>T*</code>.<br>\n  p21 <em>Effects:</em> Move-constructs a <code>shared_ptr</code> instance from <code>r</code>.<br>\n  p22 <em>Postconditions:</em> <code>*this</code> shall contain the old value of <code>r</code>. <code>r</code> shall be <em>empty</em>. <code>r.get() == 0</code>.</br></br></p>\n</blockquote>\n<p>The assignment operators of <code>shared_ptr</code> are basically describes by copy-and-swap with a temporary constructed from the (moved if rvalue) argument:</p>\n<p><code>\u00a720.7.2.2.3 [util.smartptr.shared.assign]</code></p>\n<pre><code>shared_ptr&amp; operator=(shared_ptr&amp;&amp; r) noexcept;\ntemplate&lt;class Y&gt; shared_ptr&amp; operator=(shared_ptr&lt;Y&gt;&amp;&amp; r) noexcept;\n</code></pre>\n<blockquote>\n<p id=\"so_8522740_8522831_1\">p4 <em>Effects:</em> Equivalent to <code>shared_ptr(std::move(r)).swap(*this)</code>.<br>\n  p5 <em>Returns:</em> <code>*this</code>.</br></p>\n</blockquote>\n<p>If not specified, <a href=\"https://stackoverflow.com/a/8522879/500104\">what @AProgrammer said</a> applies.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2011-12-18T01:13:15.617", "Score": "13", "CreationDate": "2011-12-15T15:53:52.850", "ParentId": "8522740", "CommentCount": "2", "OwnerUserId": "500104", "LastEditDate": "2017-05-23T11:48:06.603"}});