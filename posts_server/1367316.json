post_cb({"1367316": {"ViewCount": "2111", "Body": "<blockquote>\n<p id=\"so_1367316_1367316_0\"><strong>Possible Duplicate:</strong><br>\n<a href=\"https://stackoverflow.com/questions/21593/what-is-the-difference-between-include-filename-and-include-filename\">what is the difference between #include &lt;filename&gt; and #include \u201cfilename\u201d</a> </br></p>\n</blockquote>\n<p>Is there a fundamental difference between the two #include syntax, apart from the way the path the compiler will search for?</p>\n<p>I have the feeling that Intel's compiler does not give exactly the same output.</p>\n", "AcceptedAnswerId": "1368601", "Title": "#include <> and #include \"\"", "CreationDate": "2009-09-02T12:10:07.550", "Id": "1367316", "CommentCount": "6", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2017-05-23T10:29:27.863", "LastEditorUserId": "-1", "LastActivityDate": "2010-07-28T15:48:27.937", "ClosedDate": "2009-09-02T18:03:00.940", "Score": "10", "OwnerUserId": "446497", "Tags": "<c++><compiler-construction><include>", "AnswerCount": "8"}, "1367330": {"Id": "1367330", "PostTypeId": "2", "Body": "<p>The fundamental difference <em>is</em> in which paths are searched.</p>\n<p>You're supposed to use the angle bracket form for \"system\" includes, and regular quotes for project-local includes.</p>\n", "LastActivityDate": "2009-09-02T12:12:51.777", "CommentCount": "4", "CreationDate": "2009-09-02T12:12:51.777", "ParentId": "1367316", "Score": "22", "OwnerUserId": "28169"}, "1368601": {"Id": "1368601", "PostTypeId": "2", "Body": "<p>The C language standard says that <code>&lt;&gt;</code> is to be used for \"headers\" and <code>\"\"</code> is to be used for \"source files\". Now, don't get all up in arms about the \"source files\" thing. When the standard says \"source files\", it doesn't mean what you think. The term \"source files\" as used in the standard encompasses what we colloquially call \"header files\" (in addition to what we commonly call \"source files\").</p>\n<p>When the standard talks about \"headers\", it isn't specifically talking about <em>files</em> at all. The standard does not require headers to exist as files. They could be built-in to the compiler for all the standard cares.</p>\n<p>So the <em>real</em> difference between <code>&lt;&gt;</code> and <code>\"\"</code> is that <code>&lt;&gt;</code> is used for <em>headers</em> and <code>\"\"</code> is used for <em>files</em>. If you know that the source you'll be including is a <em>file</em> then you should use <code>\"\"</code>.</p>\n<p>In practice, compilers use different search algorithms for <code>&lt;&gt;</code> versus <code>\"\"</code>. This is allowed by the standard as the search algorithm to be used for either one is <em>implementation defined</em>. But this is not the real difference as expressed by the standard.</p>\n", "LastEditorUserId": "95706", "LastActivityDate": "2010-07-28T15:48:27.937", "Score": "19", "CreationDate": "2009-09-02T16:01:26.677", "ParentId": "1367316", "CommentCount": "4", "OwnerUserId": "95706", "LastEditDate": "2010-07-28T15:48:27.937"}, "1367354": {"Id": "1367354", "PostTypeId": "2", "Body": "<p><em>Quotes</em> instruct to search first in current directory, then in system directories (either path hardcoded in compiler/preprocessor or specified with <code>-I</code>). By using <em>angle brackets</em> you opt out of searching the current directory first.</p>\n<p>Compiler output definitely does not depend on the quotes because it's handled at the preprocessing stage. Except for the case when due to the altered search behavior different files are being included.</p>\n", "LastActivityDate": "2009-09-02T12:19:00.047", "CommentCount": "3", "CreationDate": "2009-09-02T12:19:00.047", "ParentId": "1367316", "Score": "5", "OwnerUserId": "95382"}, "bq_ids": {"n4140": {"so_1367316_1368711_6": {"length": 21, "quality": 0.9130434782608695, "section_id": 504}, "so_1367316_1368711_2": {"length": 8, "quality": 0.8888888888888888, "section_id": 503}, "so_1367316_1368711_9": {"length": 24, "quality": 0.9230769230769231, "section_id": 505}, "so_1367316_1368711_11": {"length": 7, "quality": 1.0, "section_id": 505}}, "n3337": {"so_1367316_1368711_6": {"length": 21, "quality": 0.9130434782608695, "section_id": 495}, "so_1367316_1368711_2": {"length": 8, "quality": 0.8888888888888888, "section_id": 494}, "so_1367316_1368711_9": {"length": 24, "quality": 0.9230769230769231, "section_id": 496}, "so_1367316_1368711_11": {"length": 7, "quality": 1.0, "section_id": 496}}, "n4659": {"so_1367316_1368711_6": {"length": 21, "quality": 0.9130434782608695, "section_id": 525}, "so_1367316_1368711_2": {"length": 8, "quality": 0.8888888888888888, "section_id": 524}, "so_1367316_1368711_9": {"length": 24, "quality": 0.9230769230769231, "section_id": 526}, "so_1367316_1368711_11": {"length": 7, "quality": 1.0, "section_id": 526}}}, "1369203": {"Id": "1369203", "PostTypeId": "2", "Body": "<p>For gcc compiler there <strong>is</strong> difference between &lt;&gt; and \"\" headers.  If &lt;&gt; header is included from the directory that's supplied as -isystem to preprocessor, then warnings are not emitted for the header included.  With <strong>-Werror</strong> this makes a huge difference in certain cases.</p>\n<p>Intel compiler also does have -isystem directive, so it may be applicable to icc as well.</p>\n<p>Let alone the difference in lookup directories that's too obvious to note.</p>\n", "LastEditorUserId": "158676", "LastActivityDate": "2009-09-02T19:11:52.407", "Score": "2", "CreationDate": "2009-09-02T17:54:49.990", "ParentId": "1367316", "CommentCount": "0", "OwnerUserId": "158676", "LastEditDate": "2009-09-02T19:11:52.407"}, "1368209": {"Id": "1368209", "PostTypeId": "2", "Body": "<p>There is no technical difference in general, and everything anyone tells you about it just local style, probably influenced by past compilers - many modern compilers implement the initial search in exactly the same way (often other common behaviors are available via command line option).  The standard leaves the behavior in the hands of the implementer, with no particular rationale for supporting both syntaxes.</p>\n<p>As per section 6.10.2 of the ISO C99 standard, the search paths for &lt;&gt; and \"\" are both <em>implementation-defined</em>.  The ONLY difference between them in the eyes of the standard is that using \"\" will fall back on &lt;&gt; if it cannot be resolved. (Don't be tripped up by the standard seeming to make a distinction between \"header\" and \"source file\" - there isn't a difference actually defined by the standard other than the fact that some names are reserved - \"stdio.h\", etc.)</p>\n", "LastEditorUserId": "1502059", "LastActivityDate": "2009-09-03T14:52:25.937", "Score": "-1", "CreationDate": "2009-09-02T14:54:36.100", "ParentId": "1367316", "CommentCount": "8", "OwnerUserId": "1502059", "LastEditDate": "2009-09-03T14:52:25.937"}, "1369223": {"Id": "1369223", "PostTypeId": "2", "Body": "<p><code>#include &lt;somefile.h&gt;</code> </p>\n<p>will check the system include paths (including any additional path's added for a project). </p>\n<p><code>#include \"somefile.h\"</code></p>\n<p>will check the applications working folder. (i.e. same folder as the source file that has the #include statement in it). </p>\n", "LastActivityDate": "2009-09-02T17:59:05.457", "CommentCount": "0", "CreationDate": "2009-09-02T17:59:05.457", "ParentId": "1367316", "Score": "0", "OwnerUserId": "161707"}, "1368711": {"Id": "1368711", "PostTypeId": "2", "Body": "<p>Dan Moulding got it right; unwind, hacker, and Nick Bastin got it wrong. Sorry.</p>\n<pre><code>#include &lt;...&gt;\n</code></pre>\n<p>is for <strong>headers</strong>, which need not even be files in the filesystem, but could e.g. be internal to the compiler.</p>\n<pre><code>#include \"...\"\n</code></pre>\n<p>is for <strong>files</strong>, and only if no such file can be found, does it default back to <code>#include &lt;...&gt;</code>.</p>\n<p><em>How and where these headers and files are looked for, and whether &lt; &gt; should be used for system files and \" \" for project files, which is indeed a common convention, is completely up to the compiler and the project.</em></p>\n<p>The C Standard (ISO/IEC 9899:1999) says (emphasis mine):</p>\n<blockquote>\n<p id=\"so_1367316_1368711_0\"><strong>6.10.2 Source file inclusion</strong></p>\n<p id=\"so_1367316_1368711_1\"><em>Constraints</em></p>\n<p id=\"so_1367316_1368711_2\">A <code>#include</code> directive\n  shall identify a header or source file\n  that can be processed by the\n  implementation.</p>\n<p id=\"so_1367316_1368711_3\"><em>Semantics</em></p>\n<p id=\"so_1367316_1368711_4\">A preprocessing directive of the form</p>\n<p id=\"so_1367316_1368711_5\"><code>#include &lt;h-char-sequence&gt; new-line</code></p>\n<p id=\"so_1367316_1368711_6\">searches a sequence of\n  implementation-defined places for <strong>a\n  header identified uniquely by the\n  specified sequence</strong> between the &lt; and &gt;\n  delimiters, and causes the replacement\n  of that directive by the entire\n  contents of the header. How the places\n  are specified or the header identified\n  is implementation-defined.</p>\n<p id=\"so_1367316_1368711_7\">A preprocessing directive of the form</p>\n<p id=\"so_1367316_1368711_8\"><code>#include \"q-char-sequence\" new-line</code></p>\n<p id=\"so_1367316_1368711_9\">causes the replacement of that\n  directive by the entire contents of\n  <strong>the source file identified by the\n  specified sequence</strong> between the \"\n  delimiters. The named source file is\n  searched for in an &gt; implementation-defined manner.\n  If this\n  search is not supported, or if the\n  search fails, the directive is\n  reprocessed as if it read</p>\n<p id=\"so_1367316_1368711_10\"><code>#include &lt;h-char-sequence&gt; new-line</code></p>\n<p id=\"so_1367316_1368711_11\">with the identical\n  contained sequence (including &gt;\n  characters, if any) from the original\n  directive.</p>\n</blockquote>\n", "LastActivityDate": "2009-09-02T16:18:33.443", "CommentCount": "3", "CreationDate": "2009-09-02T16:18:33.443", "ParentId": "1367316", "Score": "6", "OwnerUserId": "60281"}, "1369181": {"Id": "1369181", "PostTypeId": "2", "Body": "<p>Warning: this is pure speculation.  I do not have enough experience with the Intel compiler to know if it works this way, nor am I aware of any compiler that does.</p>\n<p>If a compiler implements pre-compiled headers, it might use those for one form of include but not the other.  If the pre-compiled header gets out of sync with the actual header, you would get different results depending on which was included.</p>\n", "LastActivityDate": "2009-09-02T17:50:04.333", "CommentCount": "0", "CreationDate": "2009-09-02T17:50:04.333", "ParentId": "1367316", "Score": "0", "OwnerUserId": "5987"}});