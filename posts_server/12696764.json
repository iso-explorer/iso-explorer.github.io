post_cb({"bq_ids": {"n4140": {"so_12696764_12696998_1": {"length": 12, "quality": 0.9230769230769231, "section_id": 6259}, "so_12696764_12696998_0": {"length": 8, "quality": 0.6666666666666666, "section_id": 3869}}, "n3337": {"so_12696764_12696998_1": {"length": 12, "quality": 0.9230769230769231, "section_id": 6019}, "so_12696764_12696998_0": {"length": 8, "quality": 0.6666666666666666, "section_id": 3729}}, "n4659": {"so_12696764_12696998_1": {"length": 12, "quality": 0.9230769230769231, "section_id": 7763}}}, "12696764": {"ViewCount": "19100", "Body": "<p>I'm try to compile this code:</p>\n<pre><code>#include &lt;cmath&gt;\ndouble gravity (double level) {\n    return 0.02 * std::round(level);\n}\n</code></pre>\n<p>But GCC is telling me:</p>\n<pre><code>error: 'round' is not a member of 'std'\n</code></pre>\n<p>I know I've used the <code>round</code> function many times in <strong>ISO C++98</strong> before. Unusually, <code>round</code> and <code>::round</code> both work.</p>\n<p>What gives?</p>\n<p><em>Update</em>: I was compiling with <code>g++ -std=c++98 -Wall -pedantic</code>.\nSwitching to <code>std=c++0x</code> works.</p>\n<p>But why do the unqualified/anonymous <code>round</code> and <code>::round</code> both work if <code>std::round</code> doesn't?</p>\n", "AcceptedAnswerId": "12696794", "Title": "'round' is not a member of 'std'", "CreationDate": "2012-10-02T19:16:18.577", "Id": "12696764", "CommentCount": "4", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2012-10-03T16:09:22.240", "LastEditorUserId": "1428922", "LastActivityDate": "2014-05-13T18:46:13.023", "Score": "15", "OwnerUserId": "1428922", "Tags": "<c++><g++>", "AnswerCount": "5"}, "23639234": {"Id": "23639234", "PostTypeId": "2", "Body": "<p>how about</p>\n<pre><code>float myRoundFunc(float toRound)\n{\n  return std::ceil(toRound - 0.5);\n}\n</code></pre>\n<p>That way there is no comparison and it will round properly.</p>\n", "LastActivityDate": "2014-05-13T18:46:13.023", "Score": "3", "CreationDate": "2014-05-13T18:46:13.023", "ParentId": "12696764", "CommentCount": "0", "OwnerUserId": "3633881"}, "12696794": {"Id": "12696794", "PostTypeId": "2", "Body": "<p>The <a href=\"http://en.cppreference.com/w/cpp/numeric/math/round\" rel=\"noreferrer\"><code>std::round</code></a> functions are C++11, so you would need to compile with <code>-std=c++0x</code><strike>, or use <a href=\"http://en.cppreference.com/w/c/numeric/math/round\" rel=\"noreferrer\"><code>round</code></a> without the <code>std</code>.</strike></p>\n", "LastEditorUserId": "661519", "LastActivityDate": "2012-10-02T19:34:42.360", "Score": "14", "CreationDate": "2012-10-02T19:18:03.527", "ParentId": "12696764", "CommentCount": "0", "LastEditDate": "2012-10-02T19:34:42.360", "OwnerUserId": "661519"}, "22901418": {"Id": "22901418", "PostTypeId": "2", "Body": "<p>old topic but maybe usefull for the ones searching in google:</p>\n<pre><code>//TODO: C++11 got round() function defined in math.h\nfloat distance = sqrt((float)(plus_x * plus_x + plus_y * plus_y));\nif (distance &gt;= floor(distance)+0.5) distance = ceil(distance);\nelse distance = floor(distance);\n</code></pre>\n", "LastActivityDate": "2014-04-06T23:45:05.923", "Score": "4", "CreationDate": "2014-04-06T23:45:05.923", "ParentId": "12696764", "CommentCount": "0", "OwnerUserId": "3504798"}, "12696998": {"Id": "12696998", "PostTypeId": "2", "Body": "<p>In the C++03 standard, the normative reference for the <em>standard C library</em> is ISO/IEC 9899:1990 (C90), which <em>does not</em> include the <code>round</code> function. In C++11, it is ISO/IEC 9899:1999 (C99), which <em>does</em> include the <code>round</code> function.</p>\n<p>The contents of <code>&lt;cmath&gt;</code> in each C++ standard are the same as <code>math.h</code> from the corresponding standard C library except for a few changes (\u00a726.8/4 in C++11):</p>\n<blockquote>\n<p id=\"so_12696764_12696998_0\">The contents of these headers [<code>&lt;cmath&gt;</code> and <code>&lt;cstdlib&gt;</code>] are the same as the Standard C library headers <code>&lt;math.h&gt;</code> and <code>&lt;stdlib.h&gt;</code> respectively [...]</p>\n</blockquote>\n<p>They are, however, in namespace scope of <code>std</code> (\u00a717.6.1.2/4 in C++11):</p>\n<blockquote>\n<p id=\"so_12696764_12696998_1\">In the C++ standard library, however, the declarations (except for names which are defined as macros in C) are within namespace scope (3.3.6) of the namespace std.</p>\n</blockquote>\n<p>So, to wrap it up, the <code>round</code> function is not available in C++03, so compile with the <code>-std=c++0x</code> option and refer to it as <code>std::round</code>.</p>\n", "LastActivityDate": "2012-10-02T19:32:25.483", "Score": "3", "CreationDate": "2012-10-02T19:32:25.483", "ParentId": "12696764", "CommentCount": "2", "OwnerUserId": "150634"}, "12697783": {"Id": "12697783", "PostTypeId": "2", "Body": "<p>I've done a bit of research, here's what I've found:</p>\n<p><code>round</code> is defined in <strong>ISO C++11</strong>, as it contains the <strong>ISO C99</strong> standard library.</p>\n<p><code>round</code> is not part of the <strong>ISO C++98</strong>, which uses the <strong>ISO C90</strong> standard library.</p>\n<p>That's why it's not in namespace <code>std</code> for <strong>C++98</strong>.</p>\n<p>But <code>g++</code> is (incorrectly) including the <strong>C99</strong> headers, even when compiled with <code>-std=c++98 -pedantic</code>, which should disable all non-standard stuff:</p>\n<blockquote>\n<p id=\"so_12696764_12697783_0\">GNU_SOURCE is defined by G++ and ... it implies _USE_ISOC99</p>\n</blockquote>\n<p>(from <a href=\"http://gcc.gnu.org/ml/gcc/2002-09/msg00580.html\" rel=\"nofollow noreferrer\">http://gcc.gnu.org/ml/gcc/2002-09/msg00580.html</a>)</p>\n<p>This is why <code>::round</code> works.</p>\n<p>This apparently is a bug in GCC: <a href=\"https://stackoverflow.com/questions/1882689/why-does-gcc-allow-use-of-round-in-c-even-with-the-ansi-and-pedantic-flags\">Why does GCC allow use of round() in C++ even with the ansi and pedantic flags?</a></p>\n<p>Other C++ compilers may not provide a <code>round</code> function (since it's not required by the standard), so I should define my own.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2012-10-04T17:52:24.090", "Score": "11", "CreationDate": "2012-10-02T20:29:28.303", "ParentId": "12696764", "CommentCount": "4", "LastEditDate": "2017-05-23T10:31:04.593", "OwnerUserId": "1428922"}});