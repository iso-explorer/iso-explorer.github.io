post_cb({"4255598": {"ViewCount": "64765", "Body": "<blockquote>\n<p id=\"so_4255598_4255598_0\"><strong>Possible Duplicate:</strong><br>\n<a href=\"https://stackoverflow.com/questions/1553382/pod-freeing-memory-is-delete-equal-to-delete\">( POD )freeing memory : is delete[] equal to delete ?</a> </br></p>\n</blockquote>\n<p>When I was taught C++, this was a long time ago. I was told to never use <code>delete</code> but <code>delete[]</code> as performing <code>delete[]</code> on a single object will be equivalent to <code>delete</code>. Knowing not to trust teachers too much I wonder, Is this true?</p>\n<p>Is there ever a reason to call <code>delete</code> instead of <code>delete[]</code>?</p>\n<p>I've scanned the possibly related questions in SO, but haven't found any clear answer.</p>\n", "AcceptedAnswerId": "4255636", "Title": "delete vs delete[]", "CreationDate": "2010-11-23T11:34:41.093", "Id": "4255598", "CommentCount": "7", "FavoriteCount": "29", "PostTypeId": "1", "LastEditDate": "2017-05-23T12:02:41.063", "LastEditorUserId": "-1", "LastActivityDate": "2016-04-10T00:03:53.953", "ClosedDate": "2010-11-24T00:25:16.383", "Score": "84", "OwnerUserId": "492716", "Tags": "<c++>", "AnswerCount": "4"}, "4255622": {"Id": "4255622", "PostTypeId": "2", "Body": "<p><code>delete</code> is used to delete a single object, while <code>delete[]</code> is used to delete an array of objects. Check this <a href=\"http://www.cplusplus.com/reference/std/new/operator%20delete%5B%5D/\" rel=\"nofollow noreferrer\">link</a> for more info.</p>\n", "LastEditorUserId": "2228070", "LastActivityDate": "2016-04-10T00:03:53.953", "Score": "11", "CreationDate": "2010-11-23T11:37:05.990", "ParentId": "4255598", "CommentCount": "0", "LastEditDate": "2016-04-10T00:03:53.953", "OwnerUserId": "366832"}, "bq_ids": {"n4140": {"so_4255598_4255636_1": {"length": 15, "quality": 1.0, "section_id": 6106}, "so_4255598_4255636_0": {"length": 19, "quality": 0.95, "section_id": 6106}}, "n3337": {"so_4255598_4255636_1": {"length": 15, "quality": 1.0, "section_id": 5872}, "so_4255598_4255636_0": {"length": 19, "quality": 0.95, "section_id": 5872}}, "n4659": {"so_4255598_4255636_1": {"length": 15, "quality": 1.0, "section_id": 7603}, "so_4255598_4255636_0": {"length": 19, "quality": 0.95, "section_id": 7603}}}, "4255641": {"Id": "4255641", "PostTypeId": "2", "Body": "<p><code>delete []</code> is \"vector delete\" and corresponds to vector new, i.e. <code>new[]</code>.</p>\n<p>You must use the matching pair of allocators. E.g. <code>malloc/free</code>, <code>new/delete</code>, <code>new[]/delete[]</code>, else you get undefined behavior.</p>\n", "LastActivityDate": "2010-11-23T11:39:21.490", "Score": "38", "CreationDate": "2010-11-23T11:39:21.490", "ParentId": "4255598", "CommentCount": "1", "OwnerUserId": "112950"}, "4255636": {"Id": "4255636", "PostTypeId": "2", "Body": "<p>From the standard (5.3.5/2) :</p>\n<blockquote>\n<p id=\"so_4255598_4255636_0\">In the first alternative (delete\n  object), the value of the operand of\n  delete shall be a pointer to a\n  non-array object or a pointer to a\n  sub-object (1.8) representing a base\n  class of such an object (clause 10).\n  <strong>If not, the behavior is undefined.</strong></p>\n<p id=\"so_4255598_4255636_1\">In the second alternative (delete\n  array), the value of the operand of\n  delete shall be the pointer value\n  which resulted from a previous array\n  new-expression. <strong>If not, the\n  behavior is undefined.</strong></p>\n</blockquote>\n<p>So no : they are in no way equivalent !</p>\n", "LastActivityDate": "2010-11-23T11:38:43.097", "Score": "90", "CreationDate": "2010-11-23T11:38:43.097", "ParentId": "4255598", "CommentCount": "0", "OwnerUserId": "451980"}, "4255629": {"Id": "4255629", "PostTypeId": "2", "Body": "<p>No! you call <code>delete[]</code> when you allocate with <code>new[]</code>, otherwise you call <code>delete</code>.</p>\n<p>What teacher told you leads to undefined behaviour and, if you are lucky, an application crash.</p>\n", "LastActivityDate": "2010-11-23T11:38:23.767", "Score": "31", "CreationDate": "2010-11-23T11:38:23.767", "ParentId": "4255598", "CommentCount": "0", "OwnerUserId": "347137"}});