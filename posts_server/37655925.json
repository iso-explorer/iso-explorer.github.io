post_cb({"bq_ids": {"n4140": {"so_37655925_37655925_3": {"length": 11, "quality": 1.0, "section_id": 3286}, "so_37655925_37655925_2": {"length": 13, "quality": 0.8666666666666667, "section_id": 7151}, "so_37655925_37655925_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 7151}}, "n3337": {"so_37655925_37655925_3": {"length": 11, "quality": 1.0, "section_id": 3156}, "so_37655925_37655925_2": {"length": 13, "quality": 0.8666666666666667, "section_id": 6895}, "so_37655925_37655925_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 6895}}, "n4659": {"so_37655925_37655925_3": {"length": 7, "quality": 0.6363636363636364, "section_id": 382}, "so_37655925_37655925_2": {"length": 9, "quality": 0.6, "section_id": 4051}, "so_37655925_37655925_0": {"length": 5, "quality": 0.7142857142857143, "section_id": 425}}}, "37655925": {"ViewCount": "90", "Body": "<p>In C you can do this:</p>\n<pre><code>static const int a;\n\nint main(){}\n</code></pre>\n<p>And it seems to be fine. C99 \u00a76.7.8p10 says:</p>\n<blockquote>\n<p id=\"so_37655925_37655925_0\">If an object that has static storage duration is not initialized\n  explicitly, then:</p>\n<p id=\"so_37655925_37655925_1\">\u2014 if it has arithmetic type, it is initialized to (positive or\n  unsigned) zero;</p>\n</blockquote>\n<p>Similarly C++14 \u00a73.6.2p2 says:</p>\n<blockquote>\n<p id=\"so_37655925_37655925_2\">Variables with static storage duration (3.7.1) or thread storage\n  duration (3.7.2) shall be zero-initialized (8.5) before any other\n  initialization takes place.</p>\n</blockquote>\n<p>The difference is in C++14 it needs an initializer \u00a78.5p7:</p>\n<blockquote>\n<p id=\"so_37655925_37655925_3\">If a program calls for the default initialization of an object of a\n  const-qualified type <code>T</code>, <code>T</code> shall be a class type with a\n  user-provided default constructor.</p>\n</blockquote>\n<p>So I'm asking why is an initializer required in C++? No initializer is required if <code>a</code> is not <code>const</code>, so what difference does <code>const</code> make here that would make no initializer bad?</p>\n", "Title": "Static const without initializer", "CreationDate": "2016-06-06T11:11:35.307", "LastActivityDate": "2016-06-06T11:30:09.933", "CommentCount": "1", "LastEditDate": "2016-06-06T11:26:08.053", "PostTypeId": "1", "LastEditorUserId": "4774918", "Id": "37655925", "Score": "-4", "OwnerUserId": "6363174", "Tags": "<c++><const><static-initialization>", "AnswerCount": "2"}, "37655999": {"Id": "37655999", "PostTypeId": "2", "Body": "<p>In the general case of a class type object, zero-initialization may not yield a valid object. And if such a class has no default constructor, then a <code>static const</code> of that type without an initializer, would produce an invalid object.</p>\n<p>The current rules just <em>don't add</em> an exception for types where zero-initialization is good enough.</p>\n<p>An extra language feature to support zero constants would complicate things for no real gain.</p>\n", "LastActivityDate": "2016-06-06T11:15:51.767", "Score": "0", "CreationDate": "2016-06-06T11:15:51.767", "ParentId": "37655925", "CommentCount": "0", "OwnerUserId": "464581"}, "37656288": {"Id": "37656288", "PostTypeId": "2", "Body": "<p>C is not a very safe language. In C, an initializer is not required for a <code>const</code> object. Meaning you can do this:</p>\n<pre><code>int main()\n{\n    const int a;\n}\n</code></pre>\n<p>Oops. <code>a</code> has automatic storage duration, so it has an indeterminate value. And you can't change it later...</p>\n<p>Now let's say you allowed this feature. Would it make sense? Well unlike C, C++ has a concept called <em>constant initialization</em> that is sometimes performed instead of zero initialization. But what do you expect the value of <code>a</code> to have? Indeterminate value? It can't be zero since we just said that doesn't happen!</p>\n<p>If you want <code>a</code> to be zero, then just <strong><em>say so</em></strong>. Don't rely on implicit rules of the language which (in C's case) are  inconsistent. That's bad for readability and maintainability.</p>\n", "LastActivityDate": "2016-06-06T11:30:09.933", "Score": "-1", "CreationDate": "2016-06-06T11:30:09.933", "ParentId": "37655925", "CommentCount": "1", "OwnerUserId": "6292850"}});