post_cb({"26160874": {"ParentId": "26160465", "CommentCount": "0", "Body": "<p>I think you can not see such a code. At least there might be preprocessor directives similar to  <code>#if</code> or <code>#ifdef</code> that separate these two declarations because according to the C++ Standard</p>\n<p>5 <strong>If two declarations declare functions with the same name and parameter-type-list (8.3.5) to be members of the same namespace</strong> or declare objects with the same name to be members of the same namespace <strong>and the declarations give the names different language linkages, the program is ill-formed;</strong> no diagnostic is required if the declarations appear in different translation units. Except for functions with C++ linkage, a function declaration without a linkage specification shall not precede the first linkage specification for that function. A function can be declared without a linkage specification after an explicit linkage specification has been seen; the linkage explicitly specified in the earlier declaration is not affected by such  a function declaration.</p>\n", "OwnerUserId": "2877241", "PostTypeId": "2", "Id": "26160874", "Score": "0", "CreationDate": "2014-10-02T12:32:21.483", "LastActivityDate": "2014-10-02T12:32:21.483"}, "26160465": {"CommentCount": "5", "AcceptedAnswerId": "26160651", "PostTypeId": "1", "LastEditorUserId": "3336968", "CreationDate": "2014-10-02T12:09:19.130", "LastActivityDate": "2014-10-02T12:41:28.700", "LastEditDate": "2014-10-02T12:21:43.253", "ViewCount": "568", "FavoriteCount": "2", "Title": "Is it possible to overload functions with extern linkage?", "Id": "26160465", "Score": "5", "Body": "<p>I saw a strange code, in declaration of <a href=\"http://en.cppreference.com/w/cpp/utility/program/atexit\" rel=\"nofollow\"><code>std::atexit</code></a>:</p>\n<pre><code>extern \"C\"   int atexit( void (*func)() );\nextern \"C++\" int atexit( void (*func)() ); // ... why are there two functions?\n</code></pre>\n<p>I guess it's some kind of function overloading, but it seems obviously wrong.</p>\n<p>What's it? and why is it necessary?</p>\n", "Tags": "<c++><function><linkage>", "OwnerUserId": "2729109", "AnswerCount": "2"}, "26160651": {"ParentId": "26160465", "PostTypeId": "2", "CommentCount": "6", "Body": "<h3>The problem with your source</h3>\n<p>This is cppreference being a little misleading.</p>\n<p>Declaring the same function twice with different <em>storage-class-specifiers</em> is illegal and <a href=\"http://coliru.stacked-crooked.com/a/14dd5266c0a814c4\" rel=\"nofollow noreferrer\">causes a build failure</a>. If you look at the source for <em>libstdc++</em> (GCC's standard library implementation), you'll see that <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.1/libstdc++/api/a01094_source.html\" rel=\"nofollow noreferrer\">only the <code>extern \"C\"</code> version is actually provided</a>.</p>\n<hr>\n<h3>The standard's take on this</h3>\n<p>Although <code>[C++11: 18.5]</code> lists both declarations, just as does cppreference, this does <em>not</em> mean that both may be used in a single implementation; it means that an implementation may choose to declare <em>either</em> of them: that is, it accounts for <code>[C++11: 17.6.4.3.3/4]</code> which says:</p>\n<blockquote>\n<p id=\"so_26160465_26160651_0\">Each function signature from the Standard C library declared with external linkage is reserved to the implementation for use as a function signature with both extern \"C\" and extern \"C++\" linkage <em>[..]</em></p>\n</blockquote>\n<p>Also:</p>\n<blockquote>\n<p id=\"so_26160465_26160651_1\"><code>[C++11: 17.6.2.3/2]:</code> Whether a name from the C standard library declared with external linkage has <code>extern \"C\"</code> or <code>extern \"C++\"</code> linkage is implementation-defined. It is recommended that an implementation use <code>extern \"C++\"</code> linkage for this purpose</p>\n</blockquote>\n<p>The rule is made explicitly clear here:</p>\n<blockquote>\n<p id=\"so_26160465_26160651_2\"><code>[C++11: 7.5/5]:</code> If two declarations declare functions with the same name and parameter-type-list (8.3.5) to be members of the same namespace or declare objects with the same name to be members of the same namespace and the declarations give the names different language linkages, the program is ill-formed; no diagnostic is required if the declarations appear in different translation units. <em>[..]</em></p>\n</blockquote>\n<hr>\n<h3>Why this can be confusing</h3>\n<p>To my mind, this does cause some problems in other places within the standard; for example:</p>\n<blockquote>\n<p id=\"so_26160465_26160651_3\"><code>[C++11: 25.5/2]:</code> The contents are the same as the Standard C library header <code>&lt;stdlib.h&gt;</code> with the following exceptions:</p>\n<p id=\"so_26160465_26160651_4\"><code>[C++11: 25.5/3]:</code> The function signature:</p>\n<pre><code>bsearch(const void *, const void *, size_t, size_t,\n        int (*)(const void *, const void *));\n</code></pre>\n<p id=\"so_26160465_26160651_5\">is replaced by the two declarations:</p>\n<pre><code>extern \"C\" void *bsearch(const void *key, const void *base,\n                         size_t nmemb, size_t size,\n                         int (*compar)(const void *, const void *));\n\nextern \"C++\" void *bsearch(const void *key, const void *base,\n                           size_t nmemb, size_t size,\n                           int (*compar)(const void *, const void *));\n</code></pre>\n<p id=\"so_26160465_26160651_6\">both of which have the same behavior as the original declaration.</p>\n</blockquote>\n<p><a href=\"https://stackoverflow.com/q/26160962/560648\">I consider that to be a language defect.</a></p>\n</hr></hr>", "OwnerUserId": "560648", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T10:27:24.720", "Id": "26160651", "Score": "4", "CreationDate": "2014-10-02T12:19:01.633", "LastActivityDate": "2014-10-02T12:41:28.700"}, "bq_ids": {"n4140": {"so_26160465_26160651_6": {"section_id": 1524, "quality": 1.0, "length": 6}, "so_26160465_26160651_0": {"section_id": 6311, "quality": 0.9411764705882353, "length": 16}, "so_26160465_26160651_3": {"section_id": 1523, "quality": 0.6363636363636364, "length": 7}, "so_26160465_26160651_1": {"section_id": 6272, "quality": 0.8333333333333334, "length": 15}, "so_26160465_26160651_2": {"section_id": 5521, "quality": 0.9117647058823529, "length": 31}}, "n3337": {"so_26160465_26160651_6": {"section_id": 1518, "quality": 1.0, "length": 6}, "so_26160465_26160651_0": {"section_id": 6068, "quality": 0.9411764705882353, "length": 16}, "so_26160465_26160651_3": {"section_id": 1517, "quality": 0.6363636363636364, "length": 7}, "so_26160465_26160651_1": {"section_id": 6032, "quality": 0.8333333333333334, "length": 15}, "so_26160465_26160651_2": {"section_id": 5307, "quality": 0.9117647058823529, "length": 31}}, "n4659": {"so_26160465_26160651_0": {"section_id": 7821, "quality": 0.9411764705882353, "length": 16}, "so_26160465_26160651_1": {"section_id": 7778, "quality": 0.8333333333333334, "length": 15}, "so_26160465_26160651_2": {"section_id": 6956, "quality": 0.9117647058823529, "length": 31}}}});