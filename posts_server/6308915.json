post_cb({"bq_ids": {"n4140": {"so_6308915_6308944_0": {"length": 14, "quality": 1.0, "section_id": 438}}, "n3337": {"so_6308915_6308944_0": {"length": 14, "quality": 1.0, "section_id": 429}}, "n4659": {"so_6308915_6308944_0": {"length": 14, "quality": 1.0, "section_id": 458}}}, "6308915": {"ViewCount": "2297", "Body": "<p>In C++, when doing something like what you see below, is the order of construction guaranteed?</p>\n<pre><code>Logger::Logger()\n    : kFilePath_(\"../logs/runtime.log\"), logFile_(kFilePath_)\n{\n    // ...\n}\n</code></pre>\n", "AcceptedAnswerId": "6308938", "Title": "Member fields, order of construction", "CreationDate": "2011-06-10T15:54:04.320", "Id": "6308915", "CommentCount": "1", "FavoriteCount": "4", "PostTypeId": "1", "LastActivityDate": "2011-06-10T18:13:20.370", "Score": "7", "OwnerUserId": "627005", "Tags": "<c++><initialization>", "AnswerCount": "2"}, "6308944": {"Id": "6308944", "PostTypeId": "2", "Body": "<p>The order of construction is the order of declaration in the class definition.</p>\n<p>If the ordering in the <code>ctor-initializer</code> differs, this does not affect the order of construction. Your compiler may warn on this.</p>\n<p>See 12.6.2/5 (2003 wording, named <code>[class.base.init]</code>):</p>\n<blockquote>\n<p id=\"so_6308915_6308944_0\">nonstatic data members shall be\n  initialized in the order they were\n  declared in the class definition\n  (again regardless of the order of the\n  mem-initializers).</p>\n</blockquote>\n", "LastEditorUserId": "560648", "LastActivityDate": "2011-06-10T16:01:54.363", "Score": "9", "CreationDate": "2011-06-10T15:56:20.197", "ParentId": "6308915", "CommentCount": "0", "LastEditDate": "2011-06-10T16:01:54.363", "OwnerUserId": "560648"}, "6308938": {"Id": "6308938", "PostTypeId": "2", "Body": "<p>Yes, the order of construction is always guaranteed.  It is not, however, guaranteed to be the same as the order in which the objects appear in the initializer list.</p>\n<p>Member variables are constructed in the order in which they are declared in the body of the class.  For example:</p>\n<pre><code>struct A { };\nstruct B { };\n\nstruct S {\n    A a;\n    B b;\n\n    S() : b(), a() { }\n};\n</code></pre>\n<p><code>a</code> is constructed first, then <code>b</code>.  The order in which member variables appear in the initializer list is irrelevant.</p>\n", "LastActivityDate": "2011-06-10T15:56:06.313", "Score": "26", "CreationDate": "2011-06-10T15:56:06.313", "ParentId": "6308915", "CommentCount": "0", "OwnerUserId": "151292"}});