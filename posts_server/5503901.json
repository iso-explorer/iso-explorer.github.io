post_cb({"bq_ids": {"n4140": {"so_5503901_5504296_0": {"length": 34, "quality": 0.8947368421052632, "section_id": 7110}}, "n3337": {"so_5503901_5504296_0": {"length": 34, "quality": 0.8947368421052632, "section_id": 6854}}, "n4659": {"so_5503901_5504296_0": {"length": 34, "quality": 0.8947368421052632, "section_id": 8611}}}, "5504296": {"Id": "5504296", "PostTypeId": "2", "Body": "<p>VC++ 2008 is wrong here.  According to the c++03 standard 3.4.3.4:</p>\n<blockquote>\n<p id=\"so_5503901_5504296_0\">A name prefixed by the unary scope\n  operator :: (5.1) is looked up in\n  global scope, in the translation unit\n  where it is used.  The name shall be\n  declared in global namespace scope or\n  shall  be a name whose declaration is\n  visible in global scope because  of a\n  using-directive (3.4.3.2). The use of\n  :: allows a global  name to be\n  referred to even if its identifier has\n  been hidden  (3.3.7).</p>\n</blockquote>\n<p>The important part here is that a using directive in the global namespace will make those symbols accessible with the scope operator.  </p>\n<p>And according to 7.3.1.1/1, an anonymous namespace is equivalent to:</p>\n<pre><code>namespace *unique* { /* empty body */ }\nusing namespace *unique*;\nnamespace *unique* { namespace-body }\n</code></pre>\n<p>So between these two sections, the standalone function should be accessible in global namespace. </p>\n", "LastEditorUserId": "251738", "LastActivityDate": "2011-03-31T18:20:02.413", "Score": "9", "CreationDate": "2011-03-31T18:05:39.253", "ParentId": "5503901", "CommentCount": "0", "OwnerUserId": "342256", "LastEditDate": "2011-03-31T18:20:02.413"}, "5503901": {"ViewCount": "4115", "Body": "<p>Consider this fragment of C++ code:</p>\n<pre><code>namespace\n{\n    void f()\n    {\n    }\n\n    class A\n    {\n        void f()\n        {\n            ::f(); // VC++: error C2039: 'f' : is not a member of '`global namespace''\n        }\n    };\n}\n</code></pre>\n<p>GCC compiles this just fine.  Visual C++ 2008 fails to compile spitting out the C2039 error.  Which one of these two compilers is correct here?  Is there any way to reference that <em>\"global\"</em> <code>f</code> properly?</p>\n<p><strong>Edit:</strong> Zack suggested to try and it works with both compilers.  Looks a bit weird to me.</p>\n<pre><code>namespace\n{\n    void f()\n    {\n    }\n\n    class A\n    {\n        void f();\n    };\n}\n\nvoid A::f()\n{\n    ::f();\n}\n</code></pre>\n", "AcceptedAnswerId": "5504296", "Title": "How to correctly reference a function in an anonymous namespace", "CreationDate": "2011-03-31T17:33:24.730", "Id": "5503901", "CommentCount": "7", "FavoriteCount": "5", "PostTypeId": "1", "LastEditDate": "2011-03-31T17:52:29.443", "LastEditorUserId": "95706", "LastActivityDate": "2011-03-31T18:36:37.737", "Score": "19", "OwnerUserId": "362938", "Tags": "<c++><visual-c++><gcc><namespaces><language-lawyer>", "AnswerCount": "2"}, "5504634": {"Id": "5504634", "PostTypeId": "2", "Body": "<p>As academicRobot points out, Visual C++ is wrong.  As a workaround, adding an empty unnamed namespace block should resolve the issue (I don't have Visual C++ 2008 to test, but this works in Visual C++ 2010):</p>\n<pre><code>// empty unnamed namespace to placate compiler\nnamespace { }\n\nnamespace {\n    void f() { }\n    struct A {\n        void f() { ::f(); }\n    };\n}\n</code></pre>\n<p>I've reported the issue to the Visual C++ team.</p>\n", "LastActivityDate": "2011-03-31T18:36:37.737", "CommentCount": "1", "CreationDate": "2011-03-31T18:36:37.737", "ParentId": "5503901", "Score": "6", "OwnerUserId": "151292"}});