post_cb({"bq_ids": {"n4140": {"so_34266308_34266765_0": {"length": 21, "quality": 0.9130434782608695, "section_id": 3241}}, "n3337": {"so_34266308_34266765_0": {"length": 21, "quality": 0.9130434782608695, "section_id": 3114}}, "n4659": {"so_34266308_34266765_0": {"length": 21, "quality": 0.9130434782608695, "section_id": 3997}}}, "34266376": {"Id": "34266376", "PostTypeId": "2", "Body": "<p>You have to write it this way:</p>\n<pre><code>template &lt;typename T, typename U&gt;\nclass Foo&lt;T(*)(const U* )&gt;\n{};\n</code></pre>\n", "LastEditorUserId": "1668622", "LastActivityDate": "2015-12-14T11:55:58.417", "Score": "0", "CreationDate": "2015-12-14T11:52:45.647", "ParentId": "34266308", "CommentCount": "3", "OwnerUserId": "1668622", "LastEditDate": "2015-12-14T11:55:58.417"}, "34266765": {"Id": "34266765", "PostTypeId": "2", "Body": "<p>When determining a function's type (colloquially known as its signature), top-level cv qualifiers are dropped.</p>\n<blockquote>\n<p id=\"so_34266308_34266765_0\">\u00a78.3.5/5 ... The type of a function is determined using the following\n  rules. ... After producing the list of parameter types, any top-level\n  cv-qualifiers modifying a parameter type are deleted when forming the\n  function type. ...</p>\n</blockquote>\n<p>There are no special rules for function pointers or template arguments that void this.</p>\n", "LastActivityDate": "2015-12-14T12:12:11.090", "CommentCount": "0", "CreationDate": "2015-12-14T12:12:11.090", "ParentId": "34266308", "Score": "6", "OwnerUserId": "5677829"}, "34266308": {"ViewCount": "83", "Body": "<p>Let's consider the following code:</p>\n<pre><code>template &lt;typename T&gt;\nclass Foo\n{};\n\ntemplate &lt;typename T, typename U&gt;\nclass Foo&lt;T(*)(U* const)&gt;\n{};\n\ntemplate &lt;typename T, typename U&gt;\nclass Foo&lt;T(*)(U*)&gt;\n{};\n</code></pre>\n<p>When I try compiling it <a href=\"https://ideone.com/DKM4mS\" rel=\"nofollow\">(ideone)</a> it fails telling me the two template specializations are identical. That's surprising since normally <code>U*</code> and <code>U* const</code> are different things (the second is a const pointer). What's wrong here?</p>\n", "AcceptedAnswerId": "34266765", "Title": "C++ template partial specialization by a function of pointer / a function of const pointer are not different?", "CreationDate": "2015-12-14T11:48:33.960", "Id": "34266308", "CommentCount": "6", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2015-12-14T12:12:11.090", "Score": "4", "OwnerUserId": "4098714", "Tags": "<c++><templates><const><function-pointers>", "AnswerCount": "2"}});