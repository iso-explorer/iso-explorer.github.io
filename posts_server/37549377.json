post_cb({"37549377": {"CommentCount": "2", "ViewCount": "243", "PostTypeId": "1", "LastEditorUserId": "434551", "CreationDate": "2016-05-31T15:07:54.297", "LastActivityDate": "2017-05-26T19:05:59.437", "Title": "Lifetime of a temporary object bound to a reference member in member initializer list (C++14)", "AcceptedAnswerId": "37549811", "LastEditDate": "2017-05-26T19:05:59.437", "Id": "37549377", "Score": "3", "Body": "<p>I'm looking up <a href=\"http://en.cppreference.com/w/cpp/language/reference_initialization#Lifetime_of_a_temporary\" rel=\"nofollow\">lifetime of a temporary</a> on cppreference.com and I found something changed from C++14:</p>\n<blockquote>\n<p id=\"so_37549377_37549377_0\">Whenever a reference is bound to a temporary or to a base subobject of\n  a temporary, the lifetime of the temporary is extended to match the\n  lifetime of the reference, with the following exceptions:</p>\n<p id=\"so_37549377_37549377_1\">...</p>\n<p id=\"so_37549377_37549377_2\">a temporary bound to a reference member in a constructor initializer list persists only until the constructor exits, not as\n  long as the object exists. (note: such initialization is ill-formed as\n  of DR 1696) (until C++14)</p>\n</blockquote>\n<p>I checked the standard there's really no such statement. ($12.2/5 Temporary objects [class.temporary])</p>\n<p>Does it mean from C++14 the lifetime of a temporary bound to a reference member will be extended to the object's lifetime?</p>\n<p>I've tried the following code with <a href=\"http://coliru.stacked-crooked.com/a/2880858cc120f7d1\" rel=\"nofollow\">GCC</a> and <a href=\"http://rextester.com/ZTHX27435\" rel=\"nofollow\">CLANG</a> both seem not, the temporary will be destroyed when constructor ends.</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct X {\n    ~X() { std::cout &lt;&lt; \"X dtor\\n\"; }\n};\nstruct Y {\n    Y() : x_(X()) { std::cout &lt;&lt; \"Y ctor\\n\"; }\n    const X&amp; x_;\n    ~Y() { std::cout &lt;&lt; \"Y dtor\\n\"; }\n};\nint main()\n{\n    Y y;\n    std::cout &lt;&lt; \"Hello, world!\\n\";\n}\n</code></pre>\n<p>result:</p>\n<pre><code>Y ctor\nX dtor\nHello, world!\nY dtor\n</code></pre>\n<p>Do I misunderstand it?</p>\n", "Tags": "<c++><reference><c++14><temporary-objects>", "OwnerUserId": "3309790", "AnswerCount": "1"}, "37549811": {"ParentId": "37549377", "CommentCount": "7", "Body": "<p>The defect report you cited has been adopted, and N4582 already includes the new wording in <a href=\"http://eel.is/c++draft/class.base.init#8\" rel=\"noreferrer\">[class.base.init]</a>:</p>\n<blockquote>\n<p id=\"so_37549377_37549811_0\">A temporary expression bound to a reference member in a <em>mem-initializer</em> is ill-formed. <em>[Example:</em></p>\n<pre><code>struct A {\n  A() : v(42) { }  // error\n  const int&amp; v;\n};\n</code></pre>\n<p id=\"so_37549377_37549811_1\"><em>\u2014 end example ]</em></p>\n</blockquote>\n<p>So it's not extended for the object's lifetime - the code is simply ill-formed. gcc and clang both emit warnings on your code on every version I've tried, which I think is conforming but ideally they should error there. </p>\n", "OwnerUserId": "2069064", "PostTypeId": "2", "Id": "37549811", "Score": "5", "CreationDate": "2016-05-31T15:28:24.923", "LastActivityDate": "2016-05-31T15:28:24.923"}, "bq_ids": {"n4140": {"so_37549377_37549377_0": {"section_id": 382, "quality": 0.6, "length": 9}}, "n3337": {"so_37549377_37549377_0": {"section_id": 373, "quality": 0.6, "length": 9}}, "n4659": {"so_37549377_37549811_0": {"section_id": 453, "quality": 0.875, "length": 7}, "so_37549377_37549377_0": {"section_id": 397, "quality": 0.5333333333333333, "length": 8}}}});