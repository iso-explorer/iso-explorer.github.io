post_cb({"bq_ids": {"n4140": {"so_47576004_47576277_0": {"length": 15, "quality": 0.9375, "section_id": 745}}, "n3337": {"so_47576004_47576277_0": {"length": 15, "quality": 0.9375, "section_id": 734}}, "n4659": {"so_47576004_47576277_0": {"length": 15, "quality": 0.9375, "section_id": 803}}}, "47576277": {"Id": "47576277", "PostTypeId": "2", "Body": "<blockquote>\n<h3>N4140 23.2.4  Associative containers [associative.reqmts][<a href=\"http://eel.is/c++draft/container.requirements#associative.reqmts-9\" rel=\"nofollow noreferrer\">1</a>]</h3>\n<p id=\"so_47576004_47576277_0\">9 The insert and emplace members shall not affect the validity of iterators and references to the container, and the erase members shall invalidate only iterators and references to the erased elements.</p>\n</blockquote>\n<p>Definitely the term iterators refers to all iterators including <code>end</code>.</p>\n", "LastEditorUserId": "8918119", "LastActivityDate": "2017-11-30T16:21:02.763", "Score": "4", "CreationDate": "2017-11-30T14:52:40.823", "ParentId": "47576004", "CommentCount": "2", "OwnerUserId": "8918119", "LastEditDate": "2017-11-30T16:21:02.763"}, "47576004": {"ViewCount": "54", "Body": "<p>A <code>std::map</code>s iterators stay valid when inserting elements, eg:</p>\n<pre><code>std::map&lt;std::string,int&gt; my_map;\nmy_map[\"foo\"] = 1;\nmy_map[\"bar\"] = 2;\n\nauto it_foo = my_map.find(\"foo\");\nauto it_bar = my_map.find(\"bar\"); \n\nmy_map[\"foobar\"] = 3;\n</code></pre>\n<p>after inserting another element (in the last line) the two iterators are still valid. How about the <code>end</code> ? For example:</p>\n<pre><code>auto it_end = my_map.find(\"something that isnt in the map\");\n\nmy_map[\"barfoo\"] = 4; // does not invalidate iterators\n\nassert(it_end == my_map.end()); // ??\n</code></pre>\n<p>In other words: If a method does not invalidate iterators (other than those explicitly mentioned, as for example in case of <code>map::erase</code>) does this mean that also the <code>end</code> is guaranteed to be the same before as after calling the method?</p>\n<p>PS: I am aware that I could just try and see, but this wont tell me whether I can rely on this behaviour. </p>\n<p>PPS: For example pushing into a <code>std::vector</code> invalidates all iterators, or only the <code>end</code> (when no reallocation took place), but in this case the <a href=\"http://en.cppreference.com/w/cpp/container/vector/push_back\" rel=\"nofollow noreferrer\">docs</a> explicitly mention the <code>end</code>. Following this reasoning, \"no iterators are invalidated\" should include <code>end</code>, but I am not 100% convinced ;)</p>\n", "AcceptedAnswerId": "47576277", "Title": "When no iterators are invalidated, does this include the end iterator?", "CreationDate": "2017-11-30T14:38:32.310", "Id": "47576004", "CommentCount": "15", "PostTypeId": "1", "LastActivityDate": "2017-11-30T16:21:02.763", "Score": "3", "OwnerUserId": "4117728", "Tags": "<c++><iterator>", "AnswerCount": "1"}});