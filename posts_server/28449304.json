post_cb({"28449304": {"CommentCount": "0", "AcceptedAnswerId": "28449489", "PostTypeId": "1", "LastEditorUserId": "1782465", "CreationDate": "2015-02-11T08:03:23.967", "LastActivityDate": "2015-02-11T09:55:43.603", "LastEditDate": "2015-02-11T08:11:55.877", "ViewCount": "531", "FavoriteCount": "1", "Title": "using-declaration in derived class does not hide same function derived from base class", "Id": "28449304", "Score": "25", "Body": "<p>Have a look at the following code:</p>\n<pre><code>struct A {\npublic:\n    virtual void f(){std::cout &lt;&lt; \"in A\";};\n};\n\nstruct B : A{\npublic:\n   virtual void f(){std::cout &lt;&lt; \"in B\";};\n   int a;\n};\n\nstruct C : B{\n    using A::f;\n    void test(){f();}\n};\n\n\nint main() \n{\n    C c;\n    c.f(); // calls B::f, the final overrider\n    c.C::f(); // calls A::f because of the using-declaration\n    c.test(); //calls B::f\n    return 0;\n}\n</code></pre>\n<p>Per my understanding, the <code>B::f()</code> in <code>C</code> should hide the <code>A::f()</code> which is brought to <code>C</code> by using-declaration; if so, then why does <code>c.C::f()</code> still call <code>A::f()</code>?</p>\n<p>If <code>c.C::f()</code> calls <code>A::f()</code>, that should mean that in the scope of <code>C</code>, <code>f()</code> should be always refer to <code>A::f()</code>, this is the function of the using-declaration. Then why in the <code>C::test()</code>, call to <code>f()</code> is still evaluated to <code>B::f()</code>?</p>\n", "Tags": "<c++><using-declaration>", "OwnerUserId": "2745000", "AnswerCount": "1"}, "28449489": {"ParentId": "28449304", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>Very nice question, a complicated case of name lookup.</p>\n<p>Basically, when the name <code>f</code> is looked up in the scope of <code>C</code>, it <em>always</em> finds <code>A::f</code> due to the using-declaration. So all the calls <code>c.f()</code>, <code>c.C::f()</code>, and <code>f()</code> in <code>C::test()</code>, resolve the name <code>f</code> to <code>A::f</code>.</p>\n<p>Next comes virtual dispatch. If a virtual function is called by an unqualified name, dynamic dispatch happens and the final overrider is called. This covers <code>c.f()</code> and the <code>f()</code> call in <code>C::test()</code>, since these are unqualified.</p>\n<p>The call <code>c.C::f()</code> uses a qualified name for <code>f</code>, which suppresses dynamic dispatch and the function to which the name resolved is called directly. Since that function is <code>A::f</code> (thanks to the using-declaration), <code>A::f</code> is called non-virtually. The relevant rules follow (quoting C++14 final draft N4140, emphasis mine):</p>\n<p><strong>\u00a710.3/15</strong></p>\n<blockquote>\n<p id=\"so_28449304_28449489_0\">Explicit qualification with the scope operator (5.1) suppresses the virtual call mechanism.</p>\n</blockquote>\n<p><strong>\u00a75.2.2/1</strong></p>\n<blockquote>\n<p id=\"so_28449304_28449489_1\">... If the selected function is non-virtual, <strong>or if the\n  <em>id-expression</em> in the class member access expression is a <em>qualified-id,</em></strong> that function is called. Otherwise, its\n  final overrider (10.3) in the dynamic type of the object expression is called; such a call is referred to as a\n  <em>virtual function call.</em></p>\n</blockquote>\n", "OwnerUserId": "1782465", "LastEditorUserId": "1782465", "LastEditDate": "2015-02-11T09:55:43.603", "Id": "28449489", "Score": "29", "CreationDate": "2015-02-11T08:14:53.773", "LastActivityDate": "2015-02-11T09:55:43.603"}, "bq_ids": {"n4140": {"so_28449304_28449489_1": {"section_id": 5988, "quality": 0.9259259259259259, "length": 25}, "so_28449304_28449489_0": {"section_id": 7016, "quality": 1.0, "length": 8}}, "n3337": {"so_28449304_28449489_1": {"section_id": 5756, "quality": 0.8518518518518519, "length": 23}, "so_28449304_28449489_0": {"section_id": 6762, "quality": 1.0, "length": 8}}, "n4659": {"so_28449304_28449489_1": {"section_id": 7488, "quality": 0.9259259259259259, "length": 25}, "so_28449304_28449489_0": {"section_id": 8513, "quality": 1.0, "length": 8}}}});