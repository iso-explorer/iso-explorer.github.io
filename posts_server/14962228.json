post_cb({"14962311": {"ParentId": "14962228", "PostTypeId": "2", "CommentCount": "13", "Body": "<p><code>string strBuffer</code> is an empty string, with size <code>0</code>, and there is nothing in your code that changes that before you try to access <code>strBuffer[iii]</code>, with <code>iii</code> equal <code>0</code>. This returns a reference to a value initialized <code>char</code>, i.e. the  null termination character. Next time around, you access position <code>1</code>, which is out of bounds and hence undefined behaviour.</p>\n<p>My suspicion is that you are tampering with the string's internal <code>char</code> array data, leading to undefined behaviour. Presumably one or more of the functions you pass the <a href=\"http://en.cppreference.com/w/cpp/string/basic_string/c_str\" rel=\"nofollow\"><code>c_str()</code></a> to attempts to modify it. This in itself leads to undefined behaviour. You cannot use an <code>std::string</code>'s <a href=\"http://en.cppreference.com/w/cpp/string/basic_string/c_str\" rel=\"nofollow\"><code>c_str()</code></a> as a writeable char buffer.</p>\n<p>from <strong>21.4.7.1 [string.accessors]</strong>, <code>const charT* c_str() const noexcept</code> and <code>const charT* data() const noexcept</code>:</p>\n<blockquote>\n<p id=\"so_14962228_14962311_0\"><em>Requires</em>: The program shall not alter any of the values stored in the character array.</p>\n</blockquote>\n", "OwnerUserId": "661519", "LastEditorUserId": "661519", "LastEditDate": "2013-02-19T22:22:33.493", "Id": "14962311", "Score": "2", "CreationDate": "2013-02-19T16:22:32.460", "LastActivityDate": "2013-02-19T22:22:33.493"}, "14962228": {"CommentCount": "4", "ViewCount": "710", "CreationDate": "2013-02-19T16:18:58.317", "LastActivityDate": "2013-02-19T22:22:33.493", "Title": "Debug assertion failed, string subscript out of range", "AcceptedAnswerId": "14962311", "PostTypeId": "1", "Id": "14962228", "Score": "0", "Body": "<p>I'm trying to write a function that takes data from a list box, retrieves the account name, and then uses SQL to change the account type. However, for some reason, this code works fine when the list box item contains 'fdsa\\t\\tdungeon master' but not 'asdf\\t\\tuser`. In later testing it failed with 'auser\\t\\tuser'. The message box function indicates that the correct data is being retrieved. What could possible be causing this?</p>\n<pre><code>void ChangeAccountType(HWND hwnd, std::string NewType)\n{\nusing namespace std;\nstring strQuery;\nstring strAccountName;\nstring strBuffer;\nint nIndex = SendMessage(GetDlgItem(hwnd, IDC_LIST1), LB_GETCURSEL, 0, 0);\nSendMessage(GetDlgItem(hwnd, IDC_LIST1), LB_GETTEXT, (WPARAM)nIndex, (LPARAM)strBuffer.c_str());\nMessageBox(hwnd, strBuffer.c_str(), \"\", NULL);\nfor(int iii = 0; strBuffer[iii] != '\\t'; iii++)\n{\n    strAccountName += strBuffer[iii];\n};\nstrQuery = \"UPDATE account SET `account type` = \\\"\" + NewType + \"\\\" WHERE `User Name` = \\\"\" + strAccountName + \"\\\"\";\n}\n</code></pre>\n<p>The error seems to occur somewhere within the for loop, as the message box just above it works perfectly. Any advice would be much appreciated.</p>\n", "Tags": "<c++><winapi>", "OwnerUserId": "2072420", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_14962228_14962311_0": {"section_id": 1763, "quality": 0.7142857142857143, "length": 5}}, "n3337": {"so_14962228_14962311_0": {"section_id": 1757, "quality": 0.7142857142857143, "length": 5}}, "n4659": {"so_14962228_14962311_0": {"section_id": 1929, "quality": 0.7142857142857143, "length": 5}}}});