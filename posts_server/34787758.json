post_cb({"bq_ids": {"n4140": {"so_34787758_34787826_0": {"section_id": 3619, "quality": 1.0, "length": 13}}, "n3337": {"so_34787758_34787826_0": {"section_id": 3481, "quality": 1.0, "length": 13}}, "n4659": {"so_34787758_34787826_0": {"section_id": 4383, "quality": 1.0, "length": 13}}}, "34787758": {"CommentCount": "0", "ViewCount": "63", "CreationDate": "2016-01-14T10:53:46.863", "LastActivityDate": "2016-01-14T11:11:19.973", "Title": "Pass a==b as parameters to uniform_real_distribution ok", "AcceptedAnswerId": "34787826", "PostTypeId": "1", "Id": "34787758", "Score": "2", "Body": "<p>Is it ok to use <code>std::uniform_real_distribution</code> with <code>a==b</code>? This condition can be interpreted as no randomness.</p>\n<p>In GNU c++ library:</p>\n<pre><code>explicit\nparam_type(_RealType __a = _RealType(0),\n           _RealType __b = _RealType(1))\n: _M_a(__a), _M_b(__b)\n{\n   _GLIBCXX_DEBUG_ASSERT(_M_a &lt;= _M_b);\n}\n</code></pre>\n<p>The assertion accepts <code>a==b</code> though it might require division by zero. Is this</p>\n<ul>\n<li>An extension to the standard?</li>\n<li>A clever design that works anyways?</li>\n<li>An error that happens to work on certain CPUs?</li>\n</ul>\n", "Tags": "<c++><random><libstdc++>", "OwnerUserId": "877329", "AnswerCount": "1"}, "34787826": {"ParentId": "34787758", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>The relevant normative paragraph  [26.5.8.2.2, rand.dist.uni.real]/1 says:</p>\n<blockquote>\n<p id=\"so_34787758_34787826_0\">A <code>uniform_real_distribution</code> random number distribution produces random numbers <em>x</em>, <em>a</em> \u2264 <em>x</em> &lt; <em>b</em>, distributed according to the constant probability density function</p>\n<pre><code>p(x | a, b) = 1/(b \u2212 a) .\n</code></pre>\n<p id=\"so_34787758_34787826_1\">[<em>Note</em>: This implies that p(x | a, b) is undefined when <code>a == b</code>. \u2014 <em>end note</em>]</p>\n</blockquote>\n<p>Note that <em>a</em> &lt; <em>b</em> is a constraint on the distribution.</p>\n<p>Interestingly, the constructor (paragraph 2) has a looser requirement:</p>\n<blockquote>\n<pre><code>explicit uniform_real_distribution(RealType a = 0.0, RealType b = 1.0);\n</code></pre>\n<p id=\"so_34787758_34787826_2\"><em>Requires</em>: a \u2264 b [...]</p>\n</blockquote>\n<p>This means that you may <em>construct</em> a distribution object with <code>a == b</code>, but the distribution that it describes is undefined. That is, you may not attempt to generate values with such a distribution object using those parameters (which may indeed incur a division by zero, or anything else).</p>\n<p>See also <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n3926.pdf\" rel=\"nofollow\">N3926</a> for an opinion why these two constraints are not inconsistent. The issue had originally been raised as <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2168\" rel=\"nofollow\">LWG 2168</a> and has been resolved by the addition of the quoted note in the first paragraph. The paper calls attention to the overload of <code>operator()</code> that takes different distribution parameters; the upshot is that the constraints only come into play when generating values, not when constructing the distribution object.</p>\n", "OwnerUserId": "596781", "LastEditorUserId": "596781", "LastEditDate": "2016-01-14T11:11:19.973", "Id": "34787826", "Score": "3", "CreationDate": "2016-01-14T10:57:03.233", "LastActivityDate": "2016-01-14T11:11:19.973"}});