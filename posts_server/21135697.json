post_cb({"21135911": {"ParentId": "21135697", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Short answer: Because the type of the expression is <code>int</code> and not <code>bool</code></p>\n<p>Long answer: By calling <code>Add(true, true)</code> your template type parameters <code>T</code> and <code>U</code> are deduced to be bool. Therefore, the type of  the expression <code>t, u</code> is <code>bool</code>. Note that the comma in this expression is the comma operator, as pointed out by @ccom.</p>\n<p>Since you cannot arithmetically add bools (the symbol <code>+</code> is sometimes used in logic to denote the or operator which is <code>|</code> in c++), c++ will automatically promote both bools to integers and then perform the addition.</p>\n<p>In the case <code>decltype(t, u)</code>, your return type is bool, and therefore another implicit cast happens, forcing your integer of 2 to become a boolean value (true, or 1, when converted back to int)</p>\n<p>In the case <code>decltype(t + u)</code> the return type is the type of the expression (<code>int</code>) and therefore the final conversion is simply not done - giving you 2.</p>\n", "OwnerUserId": "65678", "LastEditorUserId": "65678", "LastEditDate": "2014-03-18T15:09:59.227", "Id": "21135911", "Score": "5", "CreationDate": "2014-01-15T11:13:50.257", "LastActivityDate": "2014-03-18T15:09:59.227"}, "21135954": {"ParentId": "21135697", "CommentCount": "0", "Body": "<p>The key point here is that the expression <code>bool + bool</code> is of type <code>int</code>, because no <code>operator+</code> would make sense with <code>bool</code>eans.</p>\n<p>Considering that an <code>operator+</code> for <code>int</code>s exists, and that the Standard specifies at \u00a74.5/6 that:</p>\n<blockquote>\n<p id=\"so_21135697_21135954_0\">A prvalue of type bool can be converted to a prvalue of type int, with false becoming zero and true becoming one.</p>\n</blockquote>\n<p>the prvalue of <code>true</code> is promoted to <code>1</code> and the prvalue of <code>false</code> is promoted to <code>0</code>.</p>\n<p>This can be easily seen by the result of:</p>\n<pre><code>std::cout &lt;&lt; (true + true);\n</code></pre>\n<p>which <a href=\"http://coliru.stacked-crooked.com/a/ae148604daa27ae6\" rel=\"nofollow\">is <code>2</code></a>.</p>\n<p>In your first case the <code>decltype(t, u)</code> is obviously <code>bool</code> since both <code>t</code> and <code>u</code> are <code>bool</code>.\nIn the second case, instead the <code>decltype(t + u)</code>, for the above reasons, is <code>int</code>.</p>\n", "OwnerUserId": "493122", "PostTypeId": "2", "Id": "21135954", "Score": "2", "CreationDate": "2014-01-15T11:15:46.563", "LastActivityDate": "2014-01-15T11:15:46.563"}, "21135697": {"CommentCount": "5", "AcceptedAnswerId": "21135911", "CreationDate": "2014-01-15T11:04:16.357", "LastActivityDate": "2014-03-18T15:09:59.227", "PostTypeId": "1", "ViewCount": "148", "FavoriteCount": "0", "Title": "Trailing return type with decltype boolean arithmetic", "Id": "21135697", "Score": "1", "Body": "<p>I decided to have a play with trailing return types with delctype shown below:</p>\n<pre><code>template&lt;typename T, typename U&gt;\nauto Add(T t, U u) -&gt;decltype(t,u)\n{\n    return t + u;\n}\n</code></pre>\n<p>this works perfectly fine if I send in integers or doubles e.g.</p>\n<pre><code>Add(10,11); //21\nAdd(5.35,2.22); //7.57\n</code></pre>\n<p>but then I asked myself will this work on boolean arithmetic?</p>\n<pre><code>Add(true,true); // = 1 + 1 = 1;\nAdd(true, false); // = 1 + 0 = 1    \nAdd(false, false); // = 0 + 0 = 0;\n</code></pre>\n<p>In this case it worked fine but then I decided to try the following instead:</p>\n<pre><code>-&gt;decltype(t + u)\n</code></pre>\n<p>Which gave me the result:</p>\n<pre><code>Add(true,true); // = 1 + 1 = 2;\nAdd(true, false); // = 1 + 0 = 1\nAdd(false, false); // = 0 + 0 = 0;\n</code></pre>\n<p>I'm presuming the decltype(t+u) is deducing the return type as int instead of bool? why is this? and is there a hierarchy of types decltype will choose? </p>\n", "Tags": "<c++><c++11>", "OwnerUserId": "3046369", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_21135697_21135954_0": {"section_id": 26, "quality": 1.0, "length": 14}}, "n3337": {"so_21135697_21135954_0": {"section_id": 23, "quality": 1.0, "length": 14}}, "n4659": {"so_21135697_21135954_0": {"section_id": 26, "quality": 1.0, "length": 14}}}});