post_cb({"bq_ids": {"n4140": {"so_30626288_30626464_0": {"length": 6, "quality": 1.0, "section_id": 6682}}, "n3337": {"so_30626288_30626464_0": {"length": 6, "quality": 1.0, "section_id": 6437}}, "n4659": {"so_30626288_30626464_0": {"length": 6, "quality": 1.0, "section_id": 8157}}}, "30626464": {"Id": "30626464", "PostTypeId": "2", "Body": "<p>This is <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1873\" rel=\"nofollow\">CWG issue 1873</a>, which changed the rules for this case ([class.access.base]/p5):</p>\n<blockquote>\n<p id=\"so_30626288_30626464_0\">A member <code>m</code> is accessible at the point <code>R</code> when named in class <code>N</code> if</p>\n<ul>\n<li>[...]</li>\n<li><code>m</code> as a member of <code>N</code> is protected, and <code>R</code> occurs in a member or friend of class <code>N</code>, or in a member <strong><s>or friend</s></strong> of a class <code>P</code> derived\n  from <code>N</code>, where <code>m</code> as a member of <code>P</code> is public, private, or protected,\n  or</li>\n<li>[...]</li>\n</ul>\n</blockquote>\n<p>Here, <code>N</code> is <code>Base</code>, <code>P</code> is <code>Derived</code>, <code>m</code> is <code>f()</code>, and <code>R</code> occurs in a member of <code>DerivedFriend</code>; pre-CWG1873 this would be allowed, but CWG1873 removed the \"friend of a derived class\" case and makes this ill-formed.</p>\n<p>The fix is to refer to <code>f</code> as a member of <code>Derived</code> rather than <code>Base</code>.</p>\n", "LastActivityDate": "2015-06-03T17:08:55.117", "CommentCount": "2", "CreationDate": "2015-06-03T17:08:55.117", "ParentId": "30626288", "Score": "2", "OwnerUserId": "2756719"}, "30626288": {"ViewCount": "277", "Body": "<p>Different compiler seems to have different opinion on the subject. The following code compiles fine with <code>gcc</code>, but fails with <code>clang</code>:</p>\n<pre><code>class Base {\nprotected:\n    static void f() {}\n};\n\nclass Derived : public Base {\n    friend class DerivedFriend;\n};\n\nclass DerivedFriend {\npublic:\n    void g() {\n        Base::f();\n    }\n};\n</code></pre>\n<p><code>clang</code>'s error is:</p>\n<pre><code>main.cpp:13:15: error: 'f' is a protected member of 'Base'\n        Base::f();\n              ^\nmain.cpp:3:17: note: declared protected here\n    static void f() {}\n                ^\n1 error generated.\n</code></pre>\n", "AcceptedAnswerId": "30626464", "Title": "Use protected static function of the base class from the friend of the derived class", "CreationDate": "2015-06-03T16:58:55.197", "Id": "30626288", "CommentCount": "5", "PostTypeId": "1", "LastActivityDate": "2015-06-03T17:08:55.117", "Score": "1", "OwnerUserId": "1350936", "Tags": "<c++><clang>", "AnswerCount": "1"}});