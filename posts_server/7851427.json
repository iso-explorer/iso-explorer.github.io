post_cb({"7851503": {"ParentId": "7851427", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>No, <code>main</code> is required to be a global function and cannot be a function object or anything else. See ISO/IEC 14882:2011 \u00a7 3.6.1 Main Function.</p>\n<blockquote>\n<p id=\"so_7851427_7851503_0\">A program shall contain a global function called main, which is the designated start of the program.</p>\n</blockquote>\n<p>And from paragraph 2</p>\n<blockquote>\n<p id=\"so_7851427_7851503_1\">All implementations shall allow both of the following definitions of\n  main:</p>\n<p id=\"so_7851427_7851503_2\"><code>int main() { /* ... */ }</code></p>\n<p id=\"so_7851427_7851503_3\">and</p>\n<p id=\"so_7851427_7851503_4\"><code>int main(int argc, char* argv[]) { /* ... */ }</code></p>\n</blockquote>\n<p>There is no requirement for implementations to allow any other definitions.</p>\n", "OwnerUserId": "365496", "LastEditorUserId": "365496", "LastEditDate": "2012-11-27T17:40:25.590", "Id": "7851503", "Score": "14", "CreationDate": "2011-10-21T15:14:33.463", "LastActivityDate": "2012-11-27T17:40:25.590"}, "7851626": {"ParentId": "7851427", "CommentCount": "1", "Body": "<p>main() must be a function because of the way it's called from within with the system libraries .  It is part of the POSIX.1 standard and governs the way C linkage works</p>\n<p>The main linkage has to be an extern global, it cannot be inlined or made static because it's called from within the libc and typically from a function called _start.  </p>\n<p>As an example,  typical implementation of _start in glibc is:</p>\n<pre><code>int _start() {\n     __libc_init(argc, argv, __environ);\n     exit(main(argc, argv, __environ));\n}\n</code></pre>\n<p>Various libc implementations will do it in a similar fashion.</p>\n<p>In C++ the main function must be declared in the global scope (i.e.) ::main(); again because it is called from an init-like function such as _start for libc on *nix function above after execution...</p>\n", "OwnerUserId": "894328", "PostTypeId": "2", "Id": "7851626", "Score": "1", "CreationDate": "2011-10-21T15:24:13.367", "LastActivityDate": "2011-10-21T15:24:13.367"}, "7851427": {"CommentCount": "0", "AcceptedAnswerId": "7851565", "PostTypeId": "1", "LastEditorUserId": "985032", "CreationDate": "2011-10-21T15:07:33.523", "LastActivityDate": "2012-11-27T17:40:25.590", "LastEditDate": "2011-10-21T15:17:02.603", "ViewCount": "439", "FavoriteCount": "2", "Title": "Can the main (or entry-point) function be implemented as a lambda?", "Id": "7851427", "Score": "8", "Body": "<p>Is this valid under the recently updated standard?</p>\n<pre><code>auto main = [](int argc, char* argv[]) -&gt; int\n{\n    return 0;\n};\n</code></pre>\n<p>My best guess is that it depends on whether main() MUST be a function, or if it is allowed to be any globally scoped symbol that is callable (with <code>()</code>).</p>\n", "Tags": "<c++><lambda><c++11><main>", "OwnerUserId": "985032", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_7851427_7851503_0": {"section_id": 7145, "quality": 1.0, "length": 7}, "so_7851427_7851565_1": {"section_id": 5962, "quality": 0.8095238095238095, "length": 17}, "so_7851427_7851565_0": {"section_id": 7145, "quality": 0.8372093023255814, "length": 36}}, "n3337": {"so_7851427_7851565_1": {"section_id": 5731, "quality": 0.8095238095238095, "length": 17}, "so_7851427_7851503_0": {"section_id": 6889, "quality": 1.0, "length": 7}, "so_7851427_7851565_0": {"section_id": 6889, "quality": 0.8372093023255814, "length": 36}, "so_7851427_7851503_1": {"section_id": 6890, "quality": 1.0, "length": 7}}, "n4659": {"so_7851427_7851503_0": {"section_id": 8646, "quality": 0.7142857142857143, "length": 5}, "so_7851427_7851565_1": {"section_id": 7451, "quality": 0.8095238095238095, "length": 17}, "so_7851427_7851565_0": {"section_id": 8646, "quality": 0.7906976744186046, "length": 34}}}, "7851565": {"ParentId": "7851427", "CommentCount": "3", "Body": "<p>No, and here's why:</p>\n<blockquote>\n<p id=\"so_7851427_7851565_0\"><code>[n3290: 3.6.1/1]:</code> <strong>A program shall contain a global function called\n  main</strong>, which is the designated start of the program. It is\n  implementation-defined whether a program in a freestanding environment\n  is required to define a main function. [ <em>Note:</em> In a freestanding\n  environment, start-up and termination is implementation-defined;\n  startup contains the execution of constructors for objects of\n  namespace scope with static storage duration; termination contains the\n  execution of destructors for objects with static storage duration.\n  <em>\u2014end note</em> ]</p>\n</blockquote>\n<p>Lambdas are not functions, but function objects or functors:</p>\n<blockquote>\n<p id=\"so_7851427_7851565_1\"><code>[n3290: 5.1.2/3]:</code> <strong>The type of the <em>lambda-expression</em></strong> (which is\n  also the type of the closure object) <strong>is a</strong> unique, unnamed nonunion\n  <strong>class type</strong> \u2014 called the <em>closure type</em> \u2014 whose properties are described below. [..]</p>\n</blockquote>\n", "OwnerUserId": "560648", "PostTypeId": "2", "Id": "7851565", "Score": "7", "CreationDate": "2011-10-21T15:19:09.053", "LastActivityDate": "2011-10-21T15:19:09.053"}});