post_cb({"2532981": {"Id": "2532981", "PostTypeId": "2", "Body": "<p>Generally, no. For now it will be enough for you to know that the compiler needs to know the exact function you're calling at the compile time. You cannot do magic like, let's say</p>\n<pre><code>func = \"my_function\"; \nfunc(); \n</code></pre>\n<p>if the called function name will change during runtime. (There are exceptions and ways around that, but you don't need that).</p>\n<p>Don't think about that as a case of hard-coding: it is not. If you need to call the function, then you just write its name, and don't try to abstract it, or something.</p>\n<p>Also, now would be a nice way to learn about the while loop, infinite loops and write without the function calls at all, e.g</p>\n<pre><code>int main()\n{\n    while (1) {\n        cout &lt;&lt; \"!!!Hello World!!!\" &lt;&lt; endl; // prints !!!Hello World!!!\n        system(\"pause\");\n    }\n}\n</code></pre>\n", "LastActivityDate": "2010-03-28T13:07:50.167", "CommentCount": "0", "CreationDate": "2010-03-28T13:07:50.167", "ParentId": "2532912", "Score": "0", "OwnerUserId": "301055"}, "2532922": {"Id": "2532922", "PostTypeId": "2", "Body": "<p>The C++ Standard says that you may not call main() from your own code. As for getting the name of the current function, you could use the <code>__FUNCTION__</code> macro, but once again this is not standard:</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nvoid foo() {\n   cout &lt;&lt; __FUNCTION__ &lt;&lt; endl;\n}\n\nint main() {\n   foo();\n}\n</code></pre>\n<p>should print \"foo\" or something similar if <code>__FUNCTION__</code> is supported.</p>\n", "OwnerDisplayName": "anon", "LastActivityDate": "2010-03-28T12:46:33.473", "Score": "9", "CreationDate": "2010-03-28T12:46:33.473", "ParentId": "2532912", "CommentCount": "4"}, "bq_ids": {"n4140": {"so_2532912_39442655_1": {"length": 11, "quality": 1.0, "section_id": 5770}}, "n3337": {"so_2532912_39442655_1": {"length": 11, "quality": 1.0, "section_id": 5543}}, "n4659": {"so_2532912_39442655_1": {"length": 11, "quality": 1.0, "section_id": 7227}}}, "40181828": {"Id": "40181828", "PostTypeId": "2", "Body": "<p>a function can't call itself but we can make a trick</p>\n<pre><code>#include&lt;iostream&gt;\nint main()\n{\nint r=6;\n//we here can make a loop for the program to repeat itself with do{}while(r=6).\ndo{\nint a;\ncin&gt;&gt;a;\nif(a&gt;5)\ncout&lt;&lt;\"hi i repeat myself\";\n}while(r==6);\nreturn 0;\n}\n</code></pre>\n", "LastActivityDate": "2016-10-21T16:52:01.010", "CommentCount": "1", "CreationDate": "2016-10-21T16:52:01.010", "ParentId": "2532912", "Score": "-1", "OwnerUserId": "7054281"}, "2532912": {"ViewCount": "9356", "Body": "<pre><code>int main() {\n    cout &lt;&lt; \"!!!Hello World!!!\" &lt;&lt; endl; // prints !!!Hello World!!!\n    system(\"pause\");\n    return main();\n}\n</code></pre>\n<p>The above works,but it hardcoded the <code>main()</code>,is there a magic variable to get the current running function?</p>\n", "Title": "Call main() itself in c++?", "CreationDate": "2010-03-28T12:44:28.950", "LastActivityDate": "2016-10-21T16:52:01.010", "CommentCount": "8", "FavoriteCount": "2", "PostTypeId": "1", "Id": "2532912", "Score": "8", "OwnerUserId": "179364", "Tags": "<c++>", "AnswerCount": "5"}, "39442655": {"Id": "39442655", "PostTypeId": "2", "Body": "<p>If a specific <em>implementation</em> allows this, it is not behaving correctly<sup>(a)</sup>). The standard state quite explicitly in <code>C++14, 3.6.1 Main function /3</code>:</p>\n<blockquote>\n<p id=\"so_2532912_39442655_0\">The function <code>main</code> shall not be used within a program.</p>\n</blockquote>\n<hr>\n<p><sup>(a)</sup> Keep in mind that many implementations follow some parts of the standard loosely, preferring power over strictness. That can have the unfortunate side effect that your code may not be portable to other compilers or even other versions of the <em>same</em> compiler.</p>\n<p>Many implementations will also allow you to take the stricter view, such as using <code>g++ -std=c++11 -Werror=pedantic</code> which catches the particular issue bought up in this question, as well as quite a few others. It is that \"mode\" of translation that allows implementations to claim to be compliant with the standard, as per <code>1.4 Implementation compliance</code>:</p>\n<blockquote>\n<p id=\"so_2532912_39442655_1\">If a program contains a violation of any diagnosable rule ..., a conforming implementation shall issue at least one diagnostic message.</p>\n</blockquote>\n<p>You'll see it's still quite possible to allow the code to compile and run in that case, since \"diagnostic message\" can mean a warning rather than an error.</p>\n</hr>", "LastActivityDate": "2016-09-12T02:31:23.073", "CommentCount": "0", "CreationDate": "2016-09-12T02:31:23.073", "ParentId": "2532912", "Score": "2", "OwnerUserId": "14860"}, "10311825": {"Id": "10311825", "PostTypeId": "2", "Body": "<p>Is it allowed in \"C++\"? No.</p>\n<p>In practice, can you call <code>main()</code>? Yes.</p>\n<p>Whatever the C++ Standard says, that doesn't stop the Linux g++ compiler from compiling code with <code>main()</code> in <code>main()</code>.</p>\n<pre><code>#include &lt;cstdlib&gt;\n#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n int y = rand() % 10; // returns 3, then 6, then 7\n cout &lt;&lt; \"y = \" &lt;&lt; y &lt;&lt; endl;\n return (y == 7) ? 0 : main();\n}\n</code></pre>\n<p>Which lets us do:</p>\n<pre><code> &gt; g++ g.cpp; ./a.out\n y = 3\n y = 6\n y = 7\n</code></pre>\n<p>Looking in to the assembly, we see that main is called just like any other function would be:</p>\n<pre><code>main:\n        ...\n        cmpl    $7, -12(%rbp)\n        je      .L7\n        call    main\n        ...\n.L7:\n        ...\n        leave\n        ret\n</code></pre>\n<p>Not that this behavior is guaranteed, but it looks like g++ doesn't seem to really care about the standard, apart from this sarcastic warning with <code>-pedantic</code></p>\n<pre><code>g.cpp:8: error: ISO C++ forbids taking address of function '::main'\n</code></pre>\n", "LastActivityDate": "2012-04-25T08:14:13.370", "CommentCount": "0", "CreationDate": "2012-04-25T08:14:13.370", "ParentId": "2532912", "Score": "9", "OwnerUserId": "771768"}});