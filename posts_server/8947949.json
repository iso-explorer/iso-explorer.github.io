post_cb({"8950038": {"Id": "8950038", "PostTypeId": "2", "Body": "<p>As a guess: <code>cout</code> and <code>wcout</code> are two different streams, and the quotes you provide say nothing about how stream orientation correlates with underlying file's orientation. May it be that the streams silently reorient <code>stdout</code> under the hood?</p>\n", "LastActivityDate": "2012-01-21T01:49:24.957", "Score": "0", "CreationDate": "2012-01-21T01:49:24.957", "ParentId": "8947949", "CommentCount": "0", "OwnerUserId": "396583"}, "8947949": {"ViewCount": "5328", "Body": "<p>I was reading the \"C++ Cookbook\" which had the following snippet:</p>\n<pre><code>// cout  &lt;&lt; s  &lt;&lt; std::endl;  // You shouldn't be able to\nwcout &lt;&lt; ws &lt;&lt; std::endl;     // run these at the same time\n</code></pre>\n<p>If you're interested in seeing the actual example, here is <a href=\"http://books.google.co.jp/books?id=XclHqTM37UIC&amp;pg=PT159&amp;lpg=PT159&amp;dq=c%2B%2B+cookbook+%22you+shouldn't+be+able+to%22&amp;source=bl&amp;ots=iFg6_IQV1c&amp;sig=qjQpcmVXOI7glGmtIXEI2fAzfeE&amp;hl=ja&amp;sa=X&amp;ei=v9YZT7mDBu6aiQezs_XVAg&amp;ved=0CCAQ6AEwAA#v=onepage&amp;q&amp;f=false\" rel=\"nofollow noreferrer\">a link to the page on Google books</a>.</p>\n<p>Also, I found this <a href=\"https://stackoverflow.com/questions/2708482/c-mixing-printf-with-wprintf-or-cout-with-wcout\">SO question</a> which seems to state that mixing wcout and cout is okay. Could someone explain to me what this comment is talking about?</p>\n<p><strong>EDIT</strong></p>\n<p>From C++ Standard [27.4.1]:</p>\n<blockquote>\n<p id=\"so_8947949_8947949_0\">Mixing operations on corresponding wide- and narrow-character streams follows the same semantics as mixing such operations on FILEs, as specified in Amendment 1 of the ISO C standard.</p>\n</blockquote>\n<p>From C Standard [7.19.2]:</p>\n<blockquote>\n<p id=\"so_8947949_8947949_1\">Each stream has an orientation. After a stream is associated with an external file, but\n  before any operations are performed on it, the stream is without orientation. Once a wide\n  character input/output function has been applied to a stream without orientation, the stream becomes a wide-oriented stream. Similarly, once a byte input/output function has\n  been applied to a stream without orientation, the stream becomes a byte-oriented stream.\n  Only a call to the freopen function or the fwide function can otherwise alter the\n  orientation of a stream. (A successful call to freopen removes any orientation.)</p>\n<p id=\"so_8947949_8947949_2\">Byte input/output functions shall not be applied to a wide-oriented stream and wide\n  character input/output functions shall not be applied to a byte-oriented stream.</p>\n</blockquote>\n<p>So, the standard seems to say that you should not mix them. However, I found this quote <a href=\"http://alfps.wordpress.com/2011/12/\" rel=\"nofollow noreferrer\">from this article</a>:</p>\n<blockquote>\n<p id=\"so_8947949_8947949_3\">For Visual C++ 10.0 the fwide function is documented as being unimplemented. And from a practical point of view, at least at the level of outputting whole lines it apparently works fine to intermingle use of cout and wcout. So, happily, Visual C++ apparently just disregards the standard\u2019s requirements and does not maintain an impractical explicit C FILE stream orientation.</p>\n</blockquote>\n<p>And also, concerning gcc I found this quote from <a href=\"http://old.nabble.com/-Bug-libstdc%2B%2B-27569---New%3A-Problem-with-mixing-wcout-and-cout-td4354628.html\" rel=\"nofollow noreferrer\">here</a>:</p>\n<blockquote>\n<p id=\"so_8947949_8947949_4\">This is a (new) feature, not a bug, see libstdc++/11705 and in general search \n  about stream orientation in the C standard (C99, 7.19.2). In a nutshell you \n  cannot mix byte oriented and wide oriented I/O. For now, due to the <em>bug</em> \n  pointed out in libstdc++/11705, you can obtain something close to your \n  expectations by calling std::ios::sync_with_stdio(false); at the beginning of \n  your program.</p>\n</blockquote>\n", "AcceptedAnswerId": "8957069", "Title": "Mixing cout and wcout in same program", "CreationDate": "2012-01-20T21:15:43.467", "Id": "8947949", "CommentCount": "0", "FavoriteCount": "4", "PostTypeId": "1", "LastEditDate": "2017-05-23T12:32:02.093", "LastEditorUserId": "-1", "LastActivityDate": "2012-01-21T21:56:53.803", "Score": "16", "OwnerUserId": "906773", "Tags": "<c++>", "AnswerCount": "5"}, "8948122": {"Id": "8948122", "PostTypeId": "2", "Body": "<p>Technically, you can definitely use both the narrow and the wide streams simultaneously. The result is, however, likely to be messed up unless you arrange for both of them to encode characters the same. This, unfortunately, comes with the caveat that you can't control the encodings used by the standard stream objects, at least not portably. Even if the encoding is the same, you need to make sure that partial characters are completely written, i.e. at the very least you need to flush the buffer when switching to the other width.</p>\n", "LastActivityDate": "2012-01-20T21:33:07.923", "Score": "1", "CreationDate": "2012-01-20T21:33:07.923", "ParentId": "8947949", "CommentCount": "6", "OwnerUserId": "1120273"}, "bq_ids": {"n4140": {"so_8947949_8947949_0": {"length": 16, "quality": 1.0, "section_id": 1921}}, "n3337": {"so_8947949_8947949_0": {"length": 16, "quality": 1.0, "section_id": 1910}}, "n4659": {"so_8947949_8947949_0": {"length": 14, "quality": 0.875, "section_id": 2192}}}, "8957069": {"Id": "8957069", "PostTypeId": "2", "Body": "<p>When <code>cout</code> or <code>wcout</code> is called for the first time, the orientation for <code>stdout</code> becomes set. In the case of <code>cout</code>, <code>stdout</code> becomes a byte-oriented stream, and in the case of <code>wcout</code>, <code>stdout</code> becomes a wide-oriented stream. As per the C++ standard [27.4.1] and C standard [7.19.2], once the orientation of a stream is set, you should not call a function which is not compatible with the orientation of that stream.</p>\n", "LastActivityDate": "2012-01-21T21:56:53.803", "Score": "15", "CreationDate": "2012-01-21T21:56:53.803", "ParentId": "8947949", "CommentCount": "0", "OwnerUserId": "906773"}, "8947960": {"Id": "8947960", "PostTypeId": "2", "Body": "<p><strike>I have no idea.</strike></p>\n<p>Barring threads, you can't run <em>any</em> two statements \"at the same time\". You can certainly use <code>cout</code> and <code>wcout</code> at different points in your program, though. They both map to <code>STDOUT</code> and that's that... though you may fall foul of differing buffers and get slightly unexpected ordering, in some cases.</p>\n<p>Apparently, each imbues an <em>orientation</em> on the \"destination\" stream <code>STDOUT</code>, and it is not allowed to mix operations on a stream that has been imbued with an orientation <code>[C++11: 27.4.1]</code> and <code>[C99: 7.19.2]</code>.</p>\n", "LastEditorUserId": "560648", "LastActivityDate": "2012-01-21T16:38:36.640", "Score": "2", "CreationDate": "2012-01-20T21:16:55.070", "ParentId": "8947949", "CommentCount": "7", "LastEditDate": "2012-01-21T16:38:36.640", "OwnerUserId": "560648"}, "8949014": {"Id": "8949014", "PostTypeId": "2", "Body": "<p>Violating \"shall not\"s from the standard usually lands you in the realm of undefined behavior.  Undefined behavior might very well work properly on some implementations.</p>\n", "LastActivityDate": "2012-01-20T23:08:15.797", "Score": "1", "CreationDate": "2012-01-20T23:08:15.797", "ParentId": "8947949", "CommentCount": "0", "OwnerUserId": "103167"}});