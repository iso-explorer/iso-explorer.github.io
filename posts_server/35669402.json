post_cb({"35669525": {"Id": "35669525", "PostTypeId": "2", "Body": "<p>Yes, this is safe. The temporary object's life will be until the end of the statement (more precisely the evaluation of the full expression in which it is created).  This is guaranteed by the standard: </p>\n<blockquote>\n<p id=\"so_35669402_35669525_0\"><strong>12.2/3:</strong> Temporary objects are destroyed as the last step in evaluating the full-expression that (lexically) contains the\n  point where they were created.</p>\n</blockquote>\n<p>Temporary lifetime may even be extended under some conditions if bound to a reference.  But don't expect miracles here. Trying to keep the reference beyond the statement (f.ex by taking the address or assigning a reference) could quickly lead to UB (<a href=\"http://ideone.com/4YqDk3\" rel=\"nofollow\">demo</a>).</p>\n<p>If you'd use this kind of construct on <code>const</code> objects you'd also have some troubles as you'd try to return a non <code>const</code> ref (but this isn't relevant in your examples for assignment and setters). </p>\n", "LastEditorUserId": "3723423", "LastActivityDate": "2016-02-27T14:00:07.517", "Score": "3", "CreationDate": "2016-02-27T12:06:21.823", "ParentId": "35669402", "CommentCount": "2", "LastEditDate": "2016-02-27T14:00:07.517", "OwnerUserId": "3723423"}, "bq_ids": {"n4140": {"so_35669402_35669525_0": {"length": 14, "quality": 0.9333333333333333, "section_id": 380}, "so_35669402_35670062_0": {"length": 20, "quality": 0.8695652173913043, "section_id": 380}, "so_35669402_35669600_1": {"length": 14, "quality": 0.9333333333333333, "section_id": 380}}, "n3337": {"so_35669402_35670062_0": {"length": 20, "quality": 0.8695652173913043, "section_id": 371}, "so_35669402_35669525_0": {"length": 14, "quality": 0.9333333333333333, "section_id": 371}, "so_35669402_35669600_1": {"length": 14, "quality": 0.9333333333333333, "section_id": 371}}, "n4659": {"so_35669402_35670062_0": {"length": 20, "quality": 0.8695652173913043, "section_id": 395}, "so_35669402_35669525_0": {"length": 14, "quality": 0.9333333333333333, "section_id": 395}, "so_35669402_35669600_1": {"length": 14, "quality": 0.9333333333333333, "section_id": 395}}}, "35670062": {"Id": "35670062", "PostTypeId": "2", "Body": "<p>Yes, it is safe to return *this. The easy case is when this is not a temporary, though even when it is, this should be possible:</p>\n<blockquote>\n<p id=\"so_35669402_35670062_0\">Temporary objects are destroyed as the last step in evaluating the full-expression (1.9) that (lexically) contains the point where they were created. This is true even if that evaluation ends in throwing an exception (C++03 \u00a712.2/3).</p>\n</blockquote>\n<p>In other words, until you reach a semi-colon everything should be fine (in theory).</p>\n<p>So following code should work:</p>\n<pre><code>std::cout &lt;&lt; MakeObj(1).Me().member &lt;&lt; std::endl;\n</code></pre>\n<p>While this should not work:</p>\n<pre><code>const Obj &amp;MakeMeObj(int n) { return Obj(n).Me(); }\nstd::cout &lt;&lt; MakeMeObj(1).member &lt;&lt; std::endl;\n</code></pre>\n<p>This is logical, as you are returning a reference to a temporary. Most compilers warn/error on this, though if you code gets to complex, this is something to watch out for.</p>\n<p>Personally, I would prevent calling these methods on a temp object to enforce API users to think about the lifetime of the object. Which can be done by overloading your method: (If your compiler supports it already)</p>\n<pre><code>Obj &amp;Me() &amp; { return *this; }\nObj &amp;Me() &amp;&amp; = delete;\n</code></pre>\n", "LastActivityDate": "2016-02-27T12:55:58.007", "Score": "7", "CreationDate": "2016-02-27T12:55:58.007", "ParentId": "35669402", "CommentCount": "2", "OwnerUserId": "2466431"}, "35669402": {"ViewCount": "1538", "Body": "<p>Returning reference to this object is often used in <a href=\"https://stackoverflow.com/questions/12038509/c-operator-return-reference-to-this\">assignment operator overloading</a>. It is also used as a base for <a href=\"https://en.wikibooks.org/wiki/More_C%2B%2B_Idioms/Named_Parameter\">named parameters idiom</a> which allows to initialize object by chain of calls to setter methods: <code>Params().SetX(1).SetY(1)</code> each of which returns reference to *this.</p>\n<p>But is it correct to return reference to <code>*this</code>. What if we call the method returning reference to this for a temporary object:</p>\n<pre><code>#include &lt;iostream&gt;\n\nclass Obj\n{\npublic:\n    Obj(int n): member(n) {}\n    Obj&amp; Me() { return *this; }\n\n    int member;\n};\n\nObj MakeObj(int n)\n{\n    return Obj(n);\n}\n\nint main()\n{\n    // Are the following constructions are correct:\n    std::cout &lt;&lt; MakeObj(1).Me().member &lt;&lt; std::endl;\n    std::cout &lt;&lt; Obj(2).Me().member &lt;&lt; std::endl;\n    Obj(3).Me() = Obj(4);\n\n    return 0;\n}\n</code></pre>\n", "AcceptedAnswerId": "35670062", "Title": "Is it safe to return *this as a reference?", "CreationDate": "2016-02-27T11:55:38.840", "Id": "35669402", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2016-02-27T11:59:12.063", "LastEditorUserId": "5447906", "LastActivityDate": "2016-02-27T14:00:07.517", "Score": "12", "OwnerUserId": "5447906", "Tags": "<c++><reference><this><this-pointer>", "AnswerCount": "3"}, "35669600": {"Id": "35669600", "PostTypeId": "2", "Body": "<blockquote id=\"so_35669402_35669600_0\">\n<pre><code>// Are the following constructions are correct:\nstd::cout &lt;&lt; MakeObj(1).Me().member &lt;&lt; std::endl;\nstd::cout &lt;&lt; Obj(2).Me().member &lt;&lt; std::endl;\n</code></pre>\n</blockquote>\n<p>Yes, because in each line the lifetime of all temporary objects is extended to take the <strong>full expression</strong> into account.</p>\n<p>As <a href=\"http://en.cppreference.com/w/cpp/language/lifetime\" rel=\"nofollow\">cppreference.com</a> says:</p>\n<blockquote>\n<p id=\"so_35669402_35669600_1\">(...) all temporary objects are destroyed as the last step in\n  evaluating the full-expression that (lexically) contains the point\n  where they were created (...).</p>\n</blockquote>\n<p>If you try to split up the full expression, then you will (hopefully) get a compiler error or warning:</p>\n<pre><code>// not allowed:\nObj&amp; ref = MakeObj(1);\nstd::cout &lt;&lt; ref.Me().member &lt;&lt; std::endl;\n</code></pre>\n<p>In other cases, the compiler may not be smart enough to see the problem, create your executable without giving any diagnostic message, and ultimately building undefined behaviour into your program:</p>\n<pre><code>// undefined behaviour:\nObj &amp;ref = MakeObj(1).Me();\nstd::cout &lt;&lt; ref.member &lt;&lt; std::endl;\n</code></pre>\n", "LastEditorUserId": "3313064", "LastActivityDate": "2016-02-27T12:43:58.013", "Score": "4", "CreationDate": "2016-02-27T12:11:03.267", "ParentId": "35669402", "CommentCount": "1", "LastEditDate": "2016-02-27T12:43:58.013", "OwnerUserId": "3313064"}});