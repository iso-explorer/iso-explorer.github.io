post_cb({"26802483": {"ParentId": "26802048", "CommentCount": "1", "Body": "<p>Consider this absurd example:</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct A {\n    void bar() { std::cout &lt;&lt; \"bar [\" &lt;&lt; i &lt;&lt; \"]\" &lt;&lt; std::endl; }\n    ~A() { std::cout &lt;&lt; \"dtor\" &lt;&lt; std::endl; }\n\n    int i;\n};\n\nA&amp; foo(A&amp;&amp; a) { return a; }\n\nint main()\n{\n    foo(A{4}).bar();\n}\n</code></pre>\n<p>If the lifetime of the temporary wasn't extended to the completion of the full-expression, <code>.bar()</code> would be called on an already-destroyed object, since the lifetime of <code>a</code> ends when <code>foo</code> is complete. As is, this will print: </p>\n<pre><code>bar [4]\ndtor\n</code></pre>\n", "OwnerUserId": "2069064", "PostTypeId": "2", "Id": "26802483", "Score": "3", "CreationDate": "2014-11-07T13:35:07.900", "LastActivityDate": "2014-11-07T13:35:07.900"}, "26802048": {"CommentCount": "1", "ViewCount": "119", "PostTypeId": "1", "LastEditorUserId": "635608", "CreationDate": "2014-11-07T13:11:44.317", "LastActivityDate": "2014-11-07T13:35:07.900", "Title": "Why the second bullet point in \u00a712.2/5 is considered an exception to the rule explicited in this paragraph?", "AcceptedAnswerId": "26802483", "LastEditDate": "2014-11-07T13:13:22.640", "Id": "26802048", "Score": "1", "Body": "<p>\u00a712.2/5 (my emphasis)</p>\n<blockquote>\n<p id=\"so_26802048_26802048_0\">The second context is when a reference is bound to a temporary. The temporary to which the reference is\n  bound or the temporary that is the complete object of a subobject to which the reference is bound persists for the lifetime of the reference <strong>except</strong>:</p>\n<ul>\n<li>A temporary bound to a reference ...</li>\n<li>A temporary bound to a reference parameter in a function call (5.2.2) persists until the completion of the full-expression containing the call.</li>\n</ul>\n</blockquote>\n<p>In the snippet below (<a href=\"http://coliru.stacked-crooked.com/a/19b2fe60720d31bf\" rel=\"nofollow\">live example</a>) one can see that the temporary <code>A()</code> is bound to the reference <code>a</code> for the lifetime of the reference, that is, the destructor <code>~A()</code> is invoked at the end of the function <code>f</code>.</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct A{\n    A() { std::cout &lt;&lt; \"A()\" &lt;&lt; '\\n'; }\n    ~A() { std::cout &lt;&lt; \"~A()\" &lt;&lt; '\\n'; }\n};\n\nvoid f(A&amp;&amp; a) { std::cout &lt;&lt; \"f()\" &lt;&lt; '\\n'; }\n\nint main()\n{\n    f(A());\n}\n</code></pre>\n", "Tags": "<c++><c++11><reference><language-lawyer>", "OwnerUserId": "3694387", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_26802048_26802048_0": {"section_id": 382, "quality": 0.9047619047619048, "length": 19}}, "n3337": {"so_26802048_26802048_0": {"section_id": 373, "quality": 0.9047619047619048, "length": 19}}, "n4659": {"so_26802048_26802048_0": {"section_id": 397, "quality": 0.8571428571428571, "length": 18}}}});