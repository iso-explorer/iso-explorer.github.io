post_cb({"29929153": {"ParentId": "29928957", "CommentCount": "0", "CreationDate": "2015-04-28T20:20:24.997", "OwnerUserId": "251738", "PostTypeId": "2", "Id": "29929153", "Score": "4", "Body": "<p>It seems pretty clear to me from <code>[basic.link]/7</code></p>\n<blockquote>\n<p id=\"so_29928957_29929153_0\">...However such a declaration does not introduce the member name in\n  its namespace scope.</p>\n</blockquote>\n<p>that clang is wrong. Similarly you wouldn't expect this to compile:</p>\n<pre><code>namespace A\n{\n}\n\nvoid A::foo()\n{\n}\n</code></pre>\n", "LastActivityDate": "2015-04-28T20:20:24.997"}, "29929143": {"ParentId": "29928957", "CommentCount": "10", "CreationDate": "2015-04-28T20:20:02.910", "OwnerUserId": "2756719", "PostTypeId": "2", "Id": "29929143", "Score": "18", "Body": "<p>[basic.link]/p7, emphasis mine:</p>\n<blockquote>\n<p id=\"so_29928957_29929143_0\">When a block scope declaration of an entity with linkage is not found\n  to refer to some other declaration, then that entity is a member of\n  the innermost enclosing namespace. <strong>However such a declaration does not\n  introduce the member name in its namespace scope.</strong></p>\n</blockquote>\n<p>[namespace.memdef]/p2, emphasis mine:</p>\n<blockquote>\n<p id=\"so_29928957_29929143_1\">Members of a named namespace can also be defined outside that\n  namespace by explicit qualification (3.4.3.2) of the name being\n  defined, <strong>provided that the entity being defined was already declared\n  in the namespace and the definition appears after the point of\n  declaration in a namespace that encloses the declaration\u2019s namespace</strong>.</p>\n</blockquote>\n<p>GCC is correct. Your first snippet is ill-formed.</p>\n", "LastActivityDate": "2015-04-28T20:20:02.910"}, "29928957": {"CommentCount": "0", "AcceptedAnswerId": "29929143", "PostTypeId": "1", "LastEditorUserId": "2623899", "CreationDate": "2015-04-28T20:09:51.447", "LastActivityDate": "2015-04-28T22:03:26.580", "LastEditDate": "2015-04-28T22:03:26.580", "ViewCount": "365", "FavoriteCount": "1", "Title": "Contradictory results between GCC and clang related to [basic.link]/7 in the C++ Standard", "Id": "29928957", "Score": "16", "Body": "<p>This snippet compiles in clang,</p>\n<pre><code>namespace A {\n    void f() {\n        void g();\n        g();\n    }\n}\n\nvoid A::g() { }\n</code></pre>\n<p>but GCC only accepts the code if <code>g</code> is defined inside the namespace <code>A</code> as follows:</p>\n<pre><code>namespace A {\n    void f() {\n        void g();\n        g();\n    }\n    void g() {}\n}\n</code></pre>\n<p>But I believe there's nothing in [basic.link]/7 disallowing the first snippet above.</p>\n", "Tags": "<c++><c++11><language-lawyer><c++14><linkage>", "OwnerUserId": "4470935", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_29928957_29929153_0": {"section_id": 7140, "quality": 1.0, "length": 10}, "so_29928957_29929143_0": {"section_id": 7140, "quality": 1.0, "length": 27}, "so_29928957_29929143_1": {"section_id": 5484, "quality": 0.967741935483871, "length": 30}}, "n3337": {"so_29928957_29929153_0": {"section_id": 6884, "quality": 1.0, "length": 10}, "so_29928957_29929143_0": {"section_id": 6884, "quality": 1.0, "length": 27}, "so_29928957_29929143_1": {"section_id": 5270, "quality": 0.967741935483871, "length": 30}}, "n4659": {"so_29928957_29929153_0": {"section_id": 8641, "quality": 1.0, "length": 10}, "so_29928957_29929143_0": {"section_id": 8641, "quality": 1.0, "length": 27}, "so_29928957_29929143_1": {"section_id": 6919, "quality": 0.967741935483871, "length": 30}}}});