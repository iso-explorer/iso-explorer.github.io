post_cb({"15560783": {"Id": "15560783", "PostTypeId": "2", "Body": "<p>It's undefined behaviour. <code>&amp;foo[0]</code> gives you the address of the first <code>std::string</code> object, which you then subtract 4 from. From \u00a75.7 Additive operators:</p>\n<blockquote>\n<p id=\"so_15560763_15560783_0\">If both the pointer operand and the result point to elements of the same array object, or one past the last element of the array object, the evaluation shall not produce an overflow; otherwise, the behavior is undefined.</p>\n</blockquote>\n<p>Undefined behaviour means you could experience anything. What is probably happening is some area of memory, four positions before the beginning of the array, that is not a valid <code>std::string</code> object is being treated as a <code>std::string</code>. This is bound to lead to ugly things happening.</p>\n", "LastActivityDate": "2013-03-22T00:42:58.507", "CommentCount": "2", "CreationDate": "2013-03-22T00:42:58.507", "ParentId": "15560763", "Score": "6", "OwnerUserId": "150634"}, "15561177": {"Id": "15561177", "PostTypeId": "2", "Body": "<h2>Pointer addition and element size</h2>\n<hr>\n<p>When you add an integer to a pointer, the integer is multiplied by the element size of the type that the pointer points to.</p>\n<pre><code>// Assume sizeof(int) is 4.\nint b[100];  // b is an array of 100 ints.\nint* p;      // p is a a pointer to an int.\np = b;       // Assigns address of first element of b. Ie, &amp;b[0]\np = p + 1;   // Adds 4 to p (4 == 1 * sizeof(int)). Ie, &amp;b[1]\n</code></pre>\n<p><a href=\"http://www.fredosaurus.com/notes-cpp/arrayptr/26arraysaspointers.html\" rel=\"nofollow\">http://www.fredosaurus.com/notes-cpp/arrayptr/26arraysaspointers.html</a></p>\n</hr>", "LastActivityDate": "2013-03-22T01:26:08.567", "CommentCount": "1", "CreationDate": "2013-03-22T01:26:08.567", "ParentId": "15560763", "Score": "2", "OwnerUserId": "1602870"}, "15560763": {"ViewCount": "106", "Body": "<p>Slackware here. I was just messing around with memory stuff and pointers... I wanted to learn a bit more about those, so I made an array in c++, and looked up the memory address of the first item in it...:</p>\n<pre><code>string foo[3] = {\"a\", \"b\", \"c\"};\ncout &lt;&lt; *(&amp;foo[0]-4) &lt;&lt; endl;\n</code></pre>\n<p>It outputted this: <a href=\"http://pastebin.com/K0HAL5nJ\" rel=\"nofollow\">http://pastebin.com/K0HAL5nJ</a>\nThe whole code:</p>\n<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main()\n{\n    string foo[3] = {\"a\", \"b\", \"c\"};\n    cout &lt;&lt; &amp;foo[0] &lt;&lt; \" minus \" &lt;&lt; &amp;foo[1] &lt;&lt; \" equals \" &lt;&lt; int(&amp;foo[0])-int(&amp;foo[1]) &lt;&lt; endl;\n    cout &lt;&lt; *(&amp;foo[0]-4) &lt;&lt; endl;\n    cout &lt;&lt; \"Hello world!\" &lt;&lt; endl;\n    return 0;\n}\n</code></pre>\n<p>I am a complete beginner in c++ and do not understand why this happens at all... I know that this sort of code is not supposed to... be, but still, could anyone please explain what happened there? </p>\n", "AcceptedAnswerId": "15560783", "Title": "C++ Memory test returns weird output", "CreationDate": "2013-03-22T00:41:05.003", "Id": "15560763", "CommentCount": "3", "PostTypeId": "1", "LastActivityDate": "2013-03-22T01:26:08.567", "Score": "4", "OwnerUserId": "996427", "Tags": "<c++><memory>", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_15560763_15560783_0": {"length": 21, "quality": 1.0, "section_id": 6142}}, "n3337": {"so_15560763_15560783_0": {"length": 21, "quality": 1.0, "section_id": 5906}}, "n4659": {"so_15560763_15560783_0": {"length": 11, "quality": 0.5238095238095238, "section_id": 7638}}}, "15560890": {"Id": "15560890", "PostTypeId": "2", "Body": "<p>You are accessing some memory that is out of the address space of the array you allocated, which results in undefined behavior.</p>\n<pre><code> string foo[3] = {\"a\", \"b\", \"c\"};\n cout &lt;&lt; &amp;foo[0] &lt;&lt; \" minus \" &lt;&lt; &amp;foo[1] &lt;&lt; \" equals \" \n      &lt;&lt; int(&amp;foo[0])-int(&amp;foo[1]);\n\n &amp;foo[0] get the memory address of \"a\",\n &amp;foo[1] get the memory address of \"b\";\n the output is OK since both address are in range of foo's address space\n\ncout &lt;&lt; *(&amp;foo[0]-4) &lt;&lt; endl;\n You tried to get the value at address of (\"a\" -4),\nsince this address is outside the address of foo, it is undefined behavior. \n</code></pre>\n", "LastEditorUserId": "1760345", "LastActivityDate": "2013-03-22T01:05:42.043", "Score": "1", "CreationDate": "2013-03-22T00:53:07.410", "ParentId": "15560763", "CommentCount": "2", "OwnerUserId": "1760345", "LastEditDate": "2013-03-22T01:05:42.043"}, "15560887": {"Id": "15560887", "PostTypeId": "2", "Body": "<pre><code>  cout &lt;&lt; *(&amp;foo[0]-4) &lt;&lt; endl;\n</code></pre>\n<p>this code is to print foo[-4]</p>\n<p>try this code.</p>\n<pre><code> cout &lt;&lt; *(&amp;foo[4]-4) &lt;&lt; endl;\n</code></pre>\n<p>this will print foo[0]</p>\n<pre><code> T * p;\n int n;\n</code></pre>\n<p><code>p+n</code> means that the address of <code>p</code> add sizeof(T *)*n</p>\n<p><strong>Pointer addition and element size</strong><br>\nWhen you add an integer to a pointer, the integer is multiplied by the element size of       the type that the pointer points to.</br></p>\n<pre><code>// Assume sizeof(int) is 4.\nint b[100];  // b is an array of 100 ints.\nint* p;      // p is a a pointer to an int.\np = b;       // Assigns address of first element of b. Ie, &amp;b[0]\np = p + 1;   // Adds 4 to p (4 == 1 * sizeof(int)). Ie, &amp;b[1]\n</code></pre>\n", "LastEditorUserId": "1602870", "LastActivityDate": "2013-03-22T01:19:45.573", "Score": "1", "CreationDate": "2013-03-22T00:52:31.960", "ParentId": "15560763", "CommentCount": "4", "OwnerUserId": "1602870", "LastEditDate": "2013-03-22T01:19:45.573"}});