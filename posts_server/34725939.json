post_cb({"34727470": {"ParentId": "34725939", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_34725939_34727470_0\">know that NULL is a empty space in memory</p>\n</blockquote>\n<p>Not quite - <code>NULL</code> is a well-defined \"nowhere\" that doesn't correspond to any valid memory address.   </p>\n<p>In both C and C++, the <code>NULL</code> macro is defined to be a <em>null pointer constant</em>, which is a zero-valued integer expression.  C++ also provides the <code>nullptr</code> literal, which also evaluates to the null pointer constant.  When a null pointer constant appears in a pointer context, it will be converted to an implementation-defined null pointer <em>value</em>.  A null pointer value may or may not be 0-valued, but it is guaranteed to compare unequal to any valid pointer value.  </p>\n<p><a href=\"http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf\" rel=\"nofollow\">C 2011 online standard</a>:</p>\n<blockquote id=\"so_34725939_34727470_1\"><strong>6.3.2.3 Pointers</strong><br>\n...<br>\n3\u00a0\u00a0\u00a0\u00a0\u00a0An integer constant expression with the value 0, or such an expression cast to type\n<strong>void *</strong>, is called a <em>null pointer constant</em>.\n<sup>66)</sup> If a null pointer constant is converted to a\npointer type, the resulting pointer, called a <em>null pointer</em>, is guaranteed to compare unequal\nto a pointer to any object or function.\n<hr>\n<sup>66)) The macro <code>NULL</code> is defined in <code>&lt;stddef.h&gt;</code> (and other headers) as a null pointer constant; see 7.19</sup>\n</hr></br></br></blockquote>\n<p><a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4296.pdf\" rel=\"nofollow\">C++ 2014 online draft</a></p>\n<blockquote id=\"so_34725939_34727470_2\">\n<strong>2.13.7 Pointer literals [lex.nullptr]</strong><br>\n\u00a0\u00a0\u00a0\u00a0<em>pointer-literal</em>:<br>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<code>nullptr</code><br><br>\n1\u00a0\u00a0\u00a0\u00a0\u00a0The pointer literal is the keyword <code>nullptr</code>. It is a prvalue of type <code>std::nullptr_t</code>. [<em>Note</em>: <code>std::nullptr_t</code>\nis a distinct type that is neither a pointer type nor a pointer to member type; rather, a prvalue of this type is\na null pointer constant and can be converted to a null pointer value or null member pointer value. See 4.10\nand 4.11. \u2014 <em>end note</em> ]<br><br>\n<strong>4.10 Pointer conversions [conv.ptr]</strong><br>\n1\u00a0\u00a0\u00a0\u00a0\u00a0A <em>null pointer constant</em> is an integer literal (2.13.2) with value zero or a prvalue of type <code>std::nullptr_t</code>.\nA null pointer constant can be converted to a pointer type; the result is the <em>null pointer value</em> of that type\nand is distinguishable from every other value of object pointer or function pointer type. Such a conversion\nis called a <em>null pointer conversion</em>. Two null pointer values of the same type shall compare equal. The\nconversion of a null pointer constant to a pointer to cv-qualified type is a single conversion, and not the\nsequence of a pointer conversion followed by a qualification conversion (4.4). A null pointer constant of\nintegral type can be converted to a prvalue of type <code>std::nullptr_t</code>. [ <em>Note:</em> The resulting prvalue is not a\nnull pointer value. \u2014 <em>end note</em> ]<br>\n...<br>\n<strong>18.2 Types [support.types]</strong><br>\n...<br>\n3\u00a0\u00a0\u00a0\u00a0\u00a0The macro <code>NULL</code> is an implementation-defined C++ null pointer constant in this International Standard\n(4.10).<sup>194</sup>\n<hr>\n<sup>\n194) Possible definitions include 0 and 0L, but not (void*)0\n</sup>\n</hr></br></br></br></br></br></br></br></br></br></br></br></blockquote>\n<p>To hammer some points home:</p>\n<ol>\n<li>The <code>NULL</code> macro, <code>nullptr</code> literal (C++ only), and null pointer <em>constant</em> are always 0-valued;</li>\n<li>The null pointer <em>value</em> does not have to be 0-valued;</li>\n<li>The null pointer <em>value</em> will never equal a valid memory address;</li>\n<li>It's the compiler's job to map the null pointer <em>constant</em> in your source code to the equivalent null pointer <em>value</em> in the generated machine code; as the programmer, you don't (generally) need to worry about the actual null pointer <em>value</em> on your implementation;</li>\n<li>Since a null pointer constant is always 0-valued, comparing a pointer value against <code>0</code> should be equivalent to comparing it against <code>NULL</code> or <code>nullptr</code>.  </li>\n</ol>\n", "OwnerUserId": "134554", "PostTypeId": "2", "Id": "34727470", "Score": "1", "CreationDate": "2016-01-11T17:22:31.920", "LastActivityDate": "2016-01-11T17:22:31.920"}, "34726050": {"ParentId": "34725939", "PostTypeId": "2", "CommentCount": "16", "Body": "<p>In every modern implementation of C, NULL is zero, usually as a pointer value:</p>\n<pre><code>#define  NULL  (void *) 0\n</code></pre>\n<p>So comparing, say, a character to NULL is likely to be invalid:</p>\n<pre><code>char ch = 'a';\nif (ch == NULL)     //  probably \"invalid comparison of pointer with scalar\"\n</code></pre>\n<p>As a pointer value, NULL chosen to point to invalid memory so that dereferencing it (on a suitable architecture) will cause a memory fault.  Most virtual machines reserve lower memory just for this purpose and implemented by leaving low memory unmapped to physical memory.  How much memory is unreserved?  Could be a few kilobytes, but many implementations reserve a few megabytes.</p>\n", "OwnerUserId": "198536", "LastEditorUserId": "2040863", "LastEditDate": "2016-01-11T16:25:13.633", "Id": "34726050", "Score": "2", "CreationDate": "2016-01-11T16:07:55.177", "LastActivityDate": "2016-01-11T16:25:13.633"}, "34725939": {"CommentCount": "13", "ViewCount": "1301", "PostTypeId": "1", "LastEditorUserId": "3204551", "CreationDate": "2016-01-11T16:02:42.123", "LastActivityDate": "2016-01-11T17:22:31.920", "Title": "Difference Between NULL and Zero in Comparing", "AcceptedAnswerId": "34726050", "LastEditDate": "2016-01-11T17:08:57.913", "Id": "34725939", "Score": "-5", "Body": "<p>I know a little about NULL,but when we comes to comparing I get confused.For Example:</p>\n<pre><code>int* p;\nif(p == NULL){\n//do sth\n}\nif(p == 0){\n//do sth\n}\n</code></pre>\n<p>in first comparison \"p\" compares with what address?\nis it look for the reference point of \"p\"?(and see if it is valid or not)</p>\n", "Tags": "<c++><c><null><nullptr>", "OwnerUserId": "5722548", "AnswerCount": "6"}, "34726289": {"ParentId": "34725939", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>From the C99 Standard:</p>\n<blockquote>\n<p id=\"so_34725939_34726289_0\"><strong>7.17 Common definitions <code>&lt;stddef.h&gt;</code></strong></p>\n<p id=\"so_34725939_34726289_1\">3 The macros are</p>\n<pre><code>NULL\n</code></pre>\n<p id=\"so_34725939_34726289_2\">which expands to an implementation-defined null pointer constant; ...</p>\n</blockquote>\n<p>From the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_34725939_34726289_3\"><strong>18.2 Types</strong></p>\n<p id=\"so_34725939_34726289_4\">3 The macro <code>NULL</code> is an implementation-defined C++ null pointer constant in this International Standard (4.10).<sup>194</sup></p>\n</blockquote>\n<p>Footnote 194:</p>\n<blockquote>\n<p id=\"so_34725939_34726289_5\">194) Possible definitions include <code>0</code> and <code>0L</code>, but not <code>(void*)0</code>.</p>\n</blockquote>\n<p>Microsoft VS 2008 defines it as:</p>\n<pre><code>/* Define NULL pointer value */\n#ifndef NULL\n#ifdef __cplusplus\n#define NULL    0\n#else\n#define NULL    ((void *)0)\n#endif\n#endif\n</code></pre>\n<p>gcc/g++ 4.9.3 defines it as:</p>\n<pre><code>#if defined (_STDDEF_H) || defined (__need_NULL)\n#undef NULL     /* in case &lt;stdio.h&gt; has defined it. */\n#ifdef __GNUG__\n#define NULL __null\n#else   /* G++ */\n#ifndef __cplusplus\n#define NULL ((void *)0)\n#else   /* C++ */\n#define NULL 0\n#endif  /* C++ */\n#endif  /* G++ */\n#endif  /* NULL not defined and &lt;stddef.h&gt; or need NULL.  */\n</code></pre>\n<p>I suspect other modern compilers define it similarly.</p>\n<p>Given the above definitions of <code>NULL</code>, the line</p>\n<pre><code>if(p == NULL){\n</code></pre>\n<p>expands to:</p>\n<pre><code>if(p == ((void*)0) ){\n</code></pre>\n<p>in C.</p>\n<p>It expands to</p>\n<pre><code>if(p == 0){\n</code></pre>\n<p>in C++.</p>\n<p>In other C++ compilers, that line could expand to</p>\n<pre><code>if(p == 0L){\n</code></pre>\n<p>When using C++11, it is better to avoid <code>NULL</code> and start using <a href=\"http://en.cppreference.com/w/cpp/language/nullptr\" rel=\"nofollow\"><code>nullptr</code></a> instead.</p>\n<pre><code>if ( p == nullptr ) {\n</code></pre>\n", "OwnerUserId": "434551", "LastEditorUserId": "434551", "LastEditDate": "2016-01-11T17:01:39.680", "Id": "34726289", "Score": "3", "CreationDate": "2016-01-11T16:19:11.667", "LastActivityDate": "2016-01-11T17:01:39.680"}, "34726797": {"ParentId": "34725939", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Conceptually, <code>NULL</code> is a singular pointer-value pointing nowhere, and implicitly convertible to any pointer-type.<br>\nPractically, you unfortunately cannot depend on it behaving as a pointer value unless you use it in a pointer-only context.</br></p>\n<p>Thus, use <code>nullptr</code> in C++11 and later respectively 0 cast to the right pointer-type, especially in contexts where an integral zero would not be converted to a pointer.</p>\n<p>BTW: While on most modern systems a null pointer is really all-bits-zero, that's not required by the standard (there might be many bit-patterns representing null pointers, and none all-zero), and doesn't make any difference to how a null pointer constant is represented in source code.</p>\n<hr>\n<p>In C++:</p>\n<blockquote>\n<p id=\"so_34725939_34726797_0\">The macro <code>NULL</code> is an implementation-defined C++ null pointer constant in this International Standard (4.10).</p>\n</blockquote>\n<p>Which is defined as:</p>\n<blockquote>\n<p id=\"so_34725939_34726797_1\">A null pointer constant is an integer literal (2.14.2) with value zero or a prvalue of type <code>std::nullptr_t</code>.</p>\n</blockquote>\n<p>Pre-C++11 the last option was obviously not available...<br>\nAnd post-C++11, because you do not know what it is, you should use <code>nullptr</code> directly.</br></p>\n<hr>\n<p>In C:</p>\n<blockquote>\n<p id=\"so_34725939_34726797_2\">The macros are\n  <code>NULL</code>\n  which expands to an implementation-defined null pointer constant; ...</p>\n</blockquote>\n<p>Which is defined as:</p>\n<blockquote>\n<p id=\"so_34725939_34726797_3\">An integer constant expression with the value 0, or such an expression cast to type <code>void *</code>, is called a null pointer constant.</p>\n</blockquote>\n</hr></hr>", "OwnerUserId": "3204551", "LastEditorUserId": "3204551", "LastEditDate": "2016-01-11T17:07:32.000", "Id": "34726797", "Score": "3", "CreationDate": "2016-01-11T16:45:22.760", "LastActivityDate": "2016-01-11T17:07:32.000"}, "34726025": {"ParentId": "34725939", "PostTypeId": "2", "CommentCount": "11", "Body": "<p><code>NULL</code> in C++ compilers is just a macro defining a \"null pointer constant\" (generally of value 0). So there is no difference, apart from <code>NULL</code> being used to indicate an intent (which is important). For example you can create an <code>int</code> variable with the value <code>NULL</code>, which is not given any special treatment over the standard declaration (<code>int a = 0;</code>).</p>\n<p><code>NULL</code> is <strong>NOT</strong> \"an empty space in memory\". It is just a symbol that (generally) represents an absence of something (value, pointer etc...). </p>\n<p>However using of <code>NULL</code> is now discouraged in C++ and the far superior <strong><a href=\"http://en.cppreference.com/w/cpp/language/nullptr\" rel=\"nofollow\">nullptr</a></strong> should be used instead.</p>\n", "OwnerUserId": "509614", "LastEditorUserId": "509614", "LastEditDate": "2016-01-11T17:04:16.410", "Id": "34726025", "Score": "1", "CreationDate": "2016-01-11T16:06:28.953", "LastActivityDate": "2016-01-11T17:04:16.410"}, "34726867": {"ParentId": "34725939", "CommentCount": "7", "Body": "<p>NULL represents a value that is not used by any valid pointer. So, if a pointer is NULL, it points to no variable at all. In pointer contexts, the value zero means the same thing as NULL, however it is clearer to use NULL instead of zero. That's all you need to know about NULL.</p>\n", "OwnerUserId": "337149", "PostTypeId": "2", "Id": "34726867", "Score": "1", "CreationDate": "2016-01-11T16:49:35.200", "LastActivityDate": "2016-01-11T16:49:35.200"}, "bq_ids": {"n4140": {"so_34725939_34726797_0": {"section_id": 2515, "quality": 0.7, "length": 7}, "so_34725939_34726797_3": {"section_id": 39, "quality": 0.5384615384615384, "length": 7}, "so_34725939_34726797_1": {"section_id": 39, "quality": 0.8181818181818182, "length": 9}, "so_34725939_34726289_4": {"section_id": 2515, "quality": 0.7, "length": 7}, "so_34725939_34726289_2": {"section_id": 2515, "quality": 0.8, "length": 4}, "so_34725939_34726289_5": {"section_id": 6705, "quality": 0.6666666666666666, "length": 4}, "so_34725939_34726797_2": {"section_id": 2515, "quality": 0.625, "length": 5}}, "n3337": {"so_34725939_34726797_0": {"section_id": 6460, "quality": 0.7, "length": 7}, "so_34725939_34726797_3": {"section_id": 36, "quality": 0.6153846153846154, "length": 8}, "so_34725939_34726797_1": {"section_id": 5947, "quality": 0.7272727272727273, "length": 8}, "so_34725939_34726289_4": {"section_id": 6460, "quality": 0.7, "length": 7}, "so_34725939_34726289_2": {"section_id": 6460, "quality": 0.8, "length": 4}, "so_34725939_34726289_5": {"section_id": 6460, "quality": 0.6666666666666666, "length": 4}, "so_34725939_34726797_2": {"section_id": 6460, "quality": 0.625, "length": 5}}, "n4659": {"so_34725939_34726797_0": {"section_id": 3249, "quality": 0.6, "length": 6}, "so_34725939_34726797_3": {"section_id": 7687, "quality": 0.6153846153846154, "length": 8}, "so_34725939_34726289_5": {"section_id": 8180, "quality": 0.6666666666666666, "length": 4}, "so_34725939_34726797_1": {"section_id": 39, "quality": 0.8181818181818182, "length": 9}, "so_34725939_34726289_4": {"section_id": 3249, "quality": 0.6, "length": 6}}}});