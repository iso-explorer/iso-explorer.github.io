post_cb({"25009061": {"CommentCount": "4", "AcceptedAnswerId": "25009130", "PostTypeId": "1", "ClosedDate": "2014-07-31T17:59:05.853", "LastEditorUserId": "819272", "CreationDate": "2014-07-29T06:01:42.240", "LastActivityDate": "2014-07-29T06:31:49.680", "LastEditDate": "2014-07-29T06:12:00.363", "ViewCount": "1489", "FavoriteCount": "8", "Title": "Does using std::array<T, N> lead to code bloat?", "Id": "25009061", "Score": "34", "Body": "<p>I have seen in a few places the recommendation to use <code>std::array</code> over C-style arrays in C++, claiming it is a better, safer alternative with no overhead. See:</p>\n<blockquote>\n<p id=\"so_25009061_25009061_0\">The standard container array [...] has no space overheads beyond what\n  it needs to hold its elements, [...]. In other words, it is very much\n  like a built-in array without the problems. (<a href=\"http://www.stroustrup.com/C++11FAQ.html#std-array\">C++11 FAQ</a>)</p>\n</blockquote>\n<p>However, as I understand it, being a template container there <em>will</em> be an overhead as far as program size goes, since it will generate code for every different N an array is instanced with.</p>\n<p>Suppose my program uses <code>std::array</code> in various places with several different integers for N, will this lead to bloated code? Is it negligible?</p>\n<p>Should I worry about this for non-type template parameters in general?</p>\n", "Tags": "<c++><templates><c++11><overhead><stdarray>", "OwnerUserId": "667959", "AnswerCount": "1"}, "25009130": {"ParentId": "25009061", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>I wouldn't worry about it. If you look at the interface of <code>std::array&lt;T, N&gt;</code>, it is very small and most member functions (basically providing wrappers for pointer manipulation) are one-liners that will be completely optimized away / inlined by any decent compiler on Release mode optimization levels.</p>\n<p>Furthermore, <strong><a href=\"https://stackoverflow.com/q/183108/819272\">you don't pay for what you don't use</a></strong> since unused non-virtual member functions (<code>std::array&lt;T, N&gt;</code> does not have <code>virtual</code> member functions) of class templates are guaranteed not to be instantiated. Small Standard quote:</p>\n<p><strong>14.7.1 Implicit instantiation [temp.inst]</strong></p>\n<blockquote>\n<p id=\"so_25009061_25009130_0\">11 An implementation shall not implicitly instantiate a function\n  template, a variable template, a member template, a non-virtual member\n  function, a member class, or a static data member of a class template\n  that does not require instantiation. [...]</p>\n</blockquote>\n<p>There are also some overloaded relational operators <code>==</code> and <code>&lt;</code> that are semantically equivalent to <code>std::equal</code> and <code>std::lexicographical_compare</code>. In practice, these operators should also be implemented in terms of these algorithms (complain to your vendor if they don't).</p>\n<p>The only very small worry is a little extra compile-time overhead, but there should be zero code-size and run-time overhead.</p>\n<p>Related but not identical: the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/TR18015.pdf\" rel=\"nofollow noreferrer\"><strong>Technical Report on C++ Performance</strong></a> did a lot of careful benchmarks on thin class wrappers around builtin types (<code>int</code>, <code>double</code>) and found close to zero overhead for 2006 compiler technology. You could repeat their testing to verify this for <code>std::array&lt;T,N&gt;</code> vs. <code>T[N]</code></p>\n", "OwnerUserId": "819272", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T11:45:54.037", "Id": "25009130", "Score": "45", "CreationDate": "2014-07-29T06:07:32.273", "LastActivityDate": "2014-07-29T06:31:49.680"}, "bq_ids": {"n4140": {"so_25009061_25009130_0": {"section_id": 243, "quality": 1.0, "length": 22}}, "n3337": {"so_25009061_25009130_0": {"section_id": 235, "quality": 0.9090909090909091, "length": 20}}, "n4659": {"so_25009061_25009130_0": {"section_id": 250, "quality": 0.9090909090909091, "length": 20}}}});