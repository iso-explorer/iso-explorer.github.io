post_cb({"11767169": {"CommentCount": "0", "AcceptedAnswerId": "11767802", "PostTypeId": "1", "LastEditorUserId": "773721", "CreationDate": "2012-08-01T20:35:38.480", "LastActivityDate": "2012-11-01T16:59:14.410", "LastEditDate": "2012-11-01T16:59:14.410", "ViewCount": "1008", "FavoriteCount": "0", "Title": "Using libgrib2c in c++ application, linker error \"Undefined reference to...\"", "Id": "11767169", "Score": "0", "Body": "<p>EDIT: If you're going to be doing things with GRIB files I would recommend the <a href=\"http://www.gdal.org/\" rel=\"nofollow\">GDAL library</a> which is backed by the <a href=\"http://www.osgeo.org/\" rel=\"nofollow\">Open Source Geospatial Foundation</a>. You will save yourself a lot of headache :) </p>\n<p>I'm using Qt creator in Ubuntu creating a c++ app.  I am attempting to use an external lib, libgrib2c.a, that has a header grib2.h.  Everything compiles, but when it tries to link I get the error:</p>\n<blockquote>\n<p id=\"so_11767169_11767169_0\">undefined reference to 'seekgb(_IO_FILE*, long, long, long*, long*)</p>\n</blockquote>\n<p>I have tried wrapping the header file with:</p>\n<pre><code>extern \"C\"{\n#include \"grib2.h\"\n}\n</code></pre>\n<p>But it didn't fix anything so I figured that was not my problem. In the .pro file I have the line:</p>\n<pre><code>include($${ROOT}/Shared/common/commonLibs.pri)\n</code></pre>\n<p>and in commonLibs.pri I have:</p>\n<pre><code>INCLUDEPATH+=$${ROOT}/external_libs/g2clib/include\nLIBS+=-L$${ROOT}/external_libs/g2clib/lib\nLIBS+=-lgrib2c\n</code></pre>\n<p>I am not encountering an error finding the library.  If I do a nm command on the libgrib2c.a I get:</p>\n<pre><code>nm libgrib2c.a | grep seekgb\nseekgb.o:\n00000000 T seekgb\n</code></pre>\n<p>And when I run qmake with the additional argument of LIBS+=-Wl,--verbose I can find the lib file in the output:</p>\n<pre><code>attempt to open /usr/lib/libgrib2c.so failed\nattempt to open /usr/lib/libgrib2c.a failed\nattempt to open /mnt/sdb1/ESMF/App/ESMF_App/../external_libs/linux/qwt_6.0.2/lib/libgrib2c.so failed\nattempt to open /mnt/sdb1/ESMF/App/ESMF_App/../external_libs/linux/qwt_6.0.2/lib/libgrib2c.a failed\nattempt to open ..//Shared/Config/lib/libgrib2c.so failed\nattempt to open ..//Shared/Config/lib/libgrib2c.a failed\nattempt to open ..//external_libs/libssh2/lib/libgrib2c.so failed\nattempt to open ..//external_libs/libssh2/lib/libgrib2c.a failed\nattempt to open ..//external_libs/openssl/lib/libgrib2c.so failed\nattempt to open ..//external_libs/openssl/lib/libgrib2c.a failed\nattempt to open ..//external_libs/g2clib/lib/libgrib2c.so failed\nattempt to open ..//external_libs/g2clib/lib/libgrib2c.a succeeded\n</code></pre>\n<p>Although it doesn't show any of the .o files in the library is this because it is a c library in my c++ app?  </p>\n<p>in the .cpp file that I am trying to use the library I have:</p>\n<pre><code>#include \"gribreader.h\"\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;external_libs/g2clib/include/grib2.h&gt;\n#include &lt;Shared/logging/Logger.hpp&gt;\n\n//------------------------------------------------------------------------------\n/// Opens a GRIB file from disk.\n///\n/// This function opens the grib file and searches through it for how many GRIB\n/// messages are contained as well as their starting locations.\n///\n/// \\param a_filePath. The path to the file to be opened.\n/// \\return True if successful, false if not.\n//------------------------------------------------------------------------------\nbool GRIBReader::OpenGRIB(std::string a_filePath)\n{\n  LOG(notification)&lt;&lt;\"Attempting to open grib file: \"&lt;&lt; a_filePath;\n  if(isOpen())\n  {\n    CloseGRIB();\n  }\n  m_filePath = a_filePath;\n  m_filePtr = fopen(a_filePath.c_str(), \"r\");\n\n  if(m_filePtr == NULL)\n  {\n    LOG(error)&lt;&lt;\"Unable to open file: \" &lt;&lt; a_filePath;\n    return false;\n  }\n  LOG(notification)&lt;&lt;\"Successfully opened GRIB file\";\n\n  g2int currentMessageSize(1);\n  g2int seekPosition(0);\n  g2int lengthToBeginningOfGrib(0);\n  g2int seekLength(32000);\n  int i(0);\n  int iterationLimit(300);\n  m_GRIBMessageLocations.clear();\n  m_GRIBMessageSizes.clear();\n  while(i &lt; iterationLimit)\n  {\n    seekgb(m_filePtr, seekPosition, seekLength,\n           &amp;lengthToBeginningOfGrib, &amp;currentMessageSize);\n    if(currentMessageSize != 0)\n    {\n      LOG(verbose) &lt;&lt; \"Adding GRIB message location \" &lt;&lt; lengthToBeginningOfGrib\n                   &lt;&lt; \" with length \" &lt;&lt; currentMessageSize;\n      m_GRIBMessageLocations.push_back(lengthToBeginningOfGrib);\n      m_GRIBMessageSizes.push_back(currentMessageSize);\n\n      seekPosition = lengthToBeginningOfGrib + currentMessageSize;\n      LOG(verbose) &lt;&lt; \"GRIB seek position moved to \" &lt;&lt; seekPosition;\n    }\n    else\n    {\n      LOG(notification)&lt;&lt;\"End of GRIB file found, after \"&lt;&lt; i\n                      &lt;&lt; \" GRIB messages.\";\n      break;\n    }\n  }\n  if(i &gt;= iterationLimit)\n  {\n    LOG(warning) &lt;&lt; \"The iteration limit of \" &lt;&lt; iterationLimit\n                 &lt;&lt; \"was reached while searching for GRIB messages\";\n  }\n  return true;\n}\n</code></pre>\n<p>And the header grib2.h is as follows:</p>\n<pre><code>#ifndef _grib2_H\n#define _grib2_H\n#include&lt;stdio.h&gt;\n\n#define G2_VERSION \"g2clib-1.4.0\"\n#ifdef __64BIT__\ntypedef int g2int;\ntypedef unsigned int g2intu;\n#else\ntypedef long g2int;\ntypedef unsigned long g2intu;\n#endif\ntypedef float g2float;\n\nstruct gtemplate {\n   g2int type;           /* 3=Grid Defintion Template.                       */\n                         /* 4=Product Defintion Template.                    */\n                         /* 5=Data Representation Template.                  */\n   g2int num;            /* template number.                                 */\n   g2int maplen;         /* number of entries in the static part             */\n                         /*                    of the template.              */\n   g2int *map;           /* num of octets of each entry in the               */\n                         /*         static part of the template.             */\n   g2int needext;        /* indicates whether or not the template needs      */\n                         /*     to be extended.                              */\n   g2int extlen;         /* number of entries in the template extension.     */\n   g2int *ext;           /* num of octets of each entry in the extension     */\n                         /*                      part of the template.       */\n};\n\ntypedef struct gtemplate gtemplate;\n\nstruct gribfield {\n   g2int   version,discipline;\n   g2int   *idsect;\n   g2int   idsectlen;\n   unsigned char *local;\n   g2int   locallen;\n   g2int   ifldnum;\n   g2int   griddef,ngrdpts;\n   g2int   numoct_opt,interp_opt,num_opt;\n   g2int   *list_opt;\n   g2int   igdtnum,igdtlen;\n   g2int   *igdtmpl;\n   g2int   ipdtnum,ipdtlen;\n   g2int   *ipdtmpl;\n   g2int   num_coord;\n   g2float *coord_list;\n   g2int   ndpts,idrtnum,idrtlen;\n   g2int   *idrtmpl;\n   g2int   unpacked;\n   g2int   expanded;\n   g2int   ibmap;\n   g2int   *bmap;\n   g2float *fld;\n};\n\ntypedef struct gribfield gribfield;\n\n\n/*  Prototypes for unpacking API  */\nvoid seekgb(FILE *,g2int ,g2int ,g2int *,g2int *);\ng2int g2_info(unsigned char *,g2int *,g2int *,g2int *,g2int *);\ng2int g2_getfld(unsigned char *,g2int ,g2int ,g2int ,gribfield **);\nvoid g2_free(gribfield *);\n\n/*  Prototypes for packing API  */\ng2int g2_create(unsigned char *,g2int *,g2int *);\ng2int g2_addlocal(unsigned char *,unsigned char *,g2int );\ng2int g2_addgrid(unsigned char *,g2int *,g2int *,g2int *,g2int ); \ng2int g2_addfield(unsigned char *,g2int ,g2int *,\n                       g2float *,g2int ,g2int ,g2int *,\n                       g2float *,g2int ,g2int ,g2int *);\ng2int g2_gribend(unsigned char *);\n\n/*  Prototypes for supporting routines  */\nextern double int_power(double, g2int );\nextern void mkieee(g2float *,g2int *,g2int);\nvoid rdieee(g2int *,g2float *,g2int );\nextern gtemplate *getpdstemplate(g2int);\nextern gtemplate *extpdstemplate(g2int,g2int *);\nextern gtemplate *getdrstemplate(g2int);\nextern gtemplate *extdrstemplate(g2int,g2int *);\nextern gtemplate *getgridtemplate(g2int);\nextern gtemplate *extgridtemplate(g2int,g2int *);\nextern void simpack(g2float *,g2int,g2int *,unsigned char *,g2int *);\nextern void compack(g2float *,g2int,g2int,g2int *,unsigned char *,g2int *);\nvoid misspack(g2float *,g2int ,g2int ,g2int *, unsigned char *, g2int *);\nvoid gbit(unsigned char *,g2int *,g2int ,g2int );\nvoid sbit(unsigned char *,g2int *,g2int ,g2int );\nvoid gbits(unsigned char *,g2int *,g2int ,g2int ,g2int ,g2int );\nvoid sbits(unsigned char *,g2int *,g2int ,g2int ,g2int ,g2int );\n\nint pack_gp(g2int *, g2int *, g2int *,\n            g2int *, g2int *, g2int *, g2int *, g2int *,\n            g2int *, g2int *, g2int *, g2int *,\n            g2int *, g2int *, g2int *, g2int *, g2int *,\n            g2int *, g2int *, g2int *);\n\n#endif  /*  _grib2_H  */\n</code></pre>\n<p>I have been scratching my head for two days on this. If anyone has an idea on what to do or can point me in some sort of direction, I'm stumped.  Also, if you have any comments on how I can improve this post I'd love to hear them, kinda new at this posting thing.  Usually I'm able to find an answer in the vast stores of knowledge already contained on the web.</p>\n", "Tags": "<c++><qt><gcc><linker>", "OwnerUserId": "773721", "AnswerCount": "1"}, "11767802": {"ParentId": "11767169", "CommentCount": "1", "Body": "<p>Try specifying external C linkage explicitly by putting the following near the top of the header file:</p>\n<pre><code>#ifdef __cplusplus\nextern \"C\" {\n#endif\n</code></pre>\n<p>and this near the bottom:</p>\n<pre><code>#ifdef __cplusplus\n}\n#endif\n</code></pre>\n", "OwnerUserId": "1507851", "PostTypeId": "2", "Id": "11767802", "Score": "1", "CreationDate": "2012-08-01T21:25:03.043", "LastActivityDate": "2012-08-01T21:25:03.043"}, "bq_ids": {"n4140": {"so_11767169_11767169_0": {"section_id": 3487, "quality": 0.7142857142857143, "length": 5}}, "n3337": {"so_11767169_11767169_0": {"section_id": 3352, "quality": 0.7142857142857143, "length": 5}}, "n4659": {"so_11767169_11767169_0": {"section_id": 4250, "quality": 0.7142857142857143, "length": 5}}}});