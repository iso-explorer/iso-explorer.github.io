post_cb({"bq_ids": {"n4140": {"so_32398088_32398177_0": {"length": 12, "quality": 1.0, "section_id": 3913}}, "n3337": {"so_32398088_32398177_0": {"length": 12, "quality": 1.0, "section_id": 3773}}, "n4659": {"so_32398088_32398177_0": {"length": 9, "quality": 0.75, "section_id": 4799}}}, "32398177": {"Id": "32398177", "PostTypeId": "2", "Body": "<p>What you have is just undefined behavior. From [stmt.return]:</p>\n<blockquote>\n<p id=\"so_32398088_32398177_0\">Flowing off the end of a function is equivalent to a return with no value; this results in undefined behavior in a value-returning function.</p>\n</blockquote>\n<p>One type of undefined behavior is magically working code. Another type is magically destroying-your-harddrive code. I wouldn't rely on it magically working for very long. Fix it!</p>\n", "LastActivityDate": "2015-09-04T12:31:53.100", "CommentCount": "1", "CreationDate": "2015-09-04T12:31:53.100", "ParentId": "32398088", "Score": "4", "OwnerUserId": "2069064"}, "32398088": {"ViewCount": "86", "Body": "<p>I've come across the following strange behaviour and I can't figure out what is happening.</p>\n<p>I have a vector class called <code>mvec</code> that stores actual values in an array, and a class <code>mvec_transf</code> that is a transformation of another vector. It stores a reference to the other vector, and a unary function that defines the transformation. This is how it can be used:</p>\n<pre><code>mvec&lt;int, 3&gt;                                vec1 {1, 2, 3};\nmvec_transf&lt;mvec&lt;int, 3&gt;, std::negate&lt;int&gt;&gt; vec2 {vec1, std::negate&lt;int&gt;()};\n// `vec2` contains [-1 -2 -3]\n</code></pre>\n<p>I overloaded <code>operator-</code> such that I could write <code>auto vec2 = -vec1;</code>, and this is my current implementation:</p>\n<pre><code>template &lt;class Vec_t&gt;\nmvec_transf&lt;Vec_t, std::negate&lt;typename Vec_t::elem_t&gt;&gt;\noperator- (Vec_t&amp; v)\n{  /*std::out &lt;&lt; \"Hello from operator- \" &lt;&lt; std::endl;*/ }\n</code></pre>\n<p>Mysteriously, this implementation (without a body) works. If I comment out the definition, I get a <em>no match for operator-</em> error from the compiler. If I don't, the code compiles with warnings <em>missing return type</em> and <em>unused variable 'v'</em>. When I run <code>auto vec2 = -vec1</code>, <code>vec2</code> actually contains a working <code>mvec_transf&lt;..&gt;</code> object, which has a correct reference to <code>vec1</code>.</p>\n<p>By adding a print statement, I can confirm that the overloaded operator actually gets called. With the print statement, however, <code>vec2</code> contains a reference to garbage instead of a reference to <code>vec1</code>.</p>\n<p>What's going on here?</p>\n", "AcceptedAnswerId": "32398177", "Title": "Overloaded operator with empty body magically works", "CreationDate": "2015-09-04T12:28:25.380", "Id": "32398088", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2015-09-04T20:16:42.480", "Score": "0", "OwnerUserId": "2900494", "Tags": "<c++>", "AnswerCount": "1"}});