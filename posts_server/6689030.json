post_cb({"6689030": {"CommentCount": "2", "AcceptedAnswerId": "6689041", "PostTypeId": "1", "ClosedDate": "2011-07-14T07:41:49.770", "LastEditorUserId": "-1", "CreationDate": "2011-07-14T05:59:02.460", "LastActivityDate": "2011-09-17T05:54:25.880", "LastEditDate": "2017-05-23T11:55:32.617", "ViewCount": "361", "FavoriteCount": "1", "Title": "return reference to local variable", "Id": "6689030", "Score": "3", "Body": "<blockquote>\n<p id=\"so_6689030_6689030_0\"><strong>Possible Duplicate:</strong><br>\n<a href=\"https://stackoverflow.com/questions/6441218/can-a-local-variables-memory-be-accessed-outside-its-scope\">Can a local variable's memory be accessed outside its scope?!</a> </br></p>\n</blockquote>\n<p>Here is a code:</p>\n<pre><code>    #include &lt;iostream&gt;\nusing namespace std;\n\ndouble &amp;GetSomeData()\n{\ndouble h = 46.50;\ndouble &amp;hRef = h;\nreturn hRef;\n}\n\nint main()\n{\ndouble nonRef = GetSomeData();\ndouble &amp;ref = GetSomeData();\ncout &lt;&lt; \"nonRef: \" &lt;&lt; nonRef &lt;&lt; endl;\ncout &lt;&lt; \"ref: \" &lt;&lt; ref &lt;&lt; endl;\nreturn 0;\n}\n</code></pre>\n<p>the nonRef is printed OK as 46.5\nthe ref is not OK.</p>\n<p>is the first output behavior is correct or just got lucky?</p>\n<p>Thanks</p>\n", "Tags": "<c++><compiler-construction><pass-by-reference>", "OwnerUserId": "582782", "AnswerCount": "3"}, "6689041": {"ParentId": "6689030", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Yes you got lucky.</p>\n<p>Returning reference to local variable is <strong>Undefined Behavior</strong>.\nUndefined Behavior means anything can happen and a behavior cannot be defined.</p>\n<p>Regarding Undefined Behavior,</p>\n<p><strong>C++ Standard section 1.3.24 states:</strong></p>\n<blockquote>\n<p id=\"so_6689030_6689041_0\">Permissible undefined behavior ranges from ignoring the situation completely with unpredictable results, to behaving during translation or program execution in a documented manner characteristic of the environment (with or without the issuance of a diagnostic message), to terminating a translation or execution (with the issuance of a diagnostic message).</p>\n</blockquote>\n", "OwnerUserId": "452307", "LastEditorUserId": "452307", "LastEditDate": "2011-09-17T05:54:25.880", "Id": "6689041", "Score": "10", "CreationDate": "2011-07-14T06:01:03.823", "LastActivityDate": "2011-09-17T05:54:25.880"}, "6689180": {"ParentId": "6689030", "CommentCount": "0", "Body": "<p>If you are merely testing the difference between these two lines:</p>\n<pre><code>double nonRef = GetSomeData();\ndouble &amp;ref = GetSomeData();\n</code></pre>\n<p>Try classes.</p>\n<pre><code>class test\n{\npublic:\n    int x;\n    int&amp; getx()\n    {\n        return x;\n    }\n};\n\n//Some code\ntest c;\nint nonRef = c.getx();\nint &amp;ref = c.getx();\n\nref = 8;\nnonref = c.getx();\n</code></pre>\n<p>After this, c.getx() returns 8.</p>\n", "OwnerUserId": "669567", "PostTypeId": "2", "Id": "6689180", "Score": "0", "CreationDate": "2011-07-14T06:19:20.323", "LastActivityDate": "2011-07-14T06:19:20.323"}, "6689078": {"ParentId": "6689030", "CommentCount": "2", "Body": "<p>Normally you use * to declare a pointer variable and also to dereference the pointer back to the original variable afterwords. &amp; returns the address from a variable</p>\n<p>I haven't tested this, but does the following work any better?</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\ndouble* GetSomeData()\n{\n  double h = 46.50;\n  return &amp;h;\n}\n\nint main()\n{\n  double nonRef = GetSomeData();\n  double* ref = GetSomeData();\n  cout &lt;&lt; \"nonRef: \" &lt;&lt; nonRef &lt;&lt; endl;\n  cout &lt;&lt; \"ref: \" &lt;&lt; *ref &lt;&lt; endl;\n  return 0;\n}\n</code></pre>\n", "OwnerUserId": "783445", "PostTypeId": "2", "Id": "6689078", "Score": "0", "CreationDate": "2011-07-14T06:06:17.827", "LastActivityDate": "2011-07-14T06:06:17.827"}, "bq_ids": {"n4140": {"so_6689030_6689041_0": {"section_id": 5768, "quality": 1.0, "length": 26}}, "n3337": {"so_6689030_6689041_0": {"section_id": 5541, "quality": 1.0, "length": 26}}, "n4659": {"so_6689030_6689041_0": {"section_id": 7225, "quality": 1.0, "length": 26}}}});