post_cb({"bq_ids": {"n4140": {"so_4193639_4193698_0": {"length": 59, "quality": 0.8939393939393939, "section_id": 7043}, "so_4193639_4193698_1": {"length": 6, "quality": 1.0, "section_id": 7043}}, "n3337": {"so_4193639_4193698_0": {"length": 59, "quality": 0.8939393939393939, "section_id": 6788}, "so_4193639_4193698_1": {"length": 6, "quality": 1.0, "section_id": 6788}}, "n4659": {"so_4193639_4193698_0": {"length": 59, "quality": 0.8939393939393939, "section_id": 8540}, "so_4193639_4193698_1": {"length": 6, "quality": 1.0, "section_id": 8540}}}, "4193657": {"Id": "4193657", "PostTypeId": "2", "Body": "<p>The linker may not see inline functions at all. They are usually compiled straight into the code that calls them (i.e., the code is used in place of a function call).</p>\n<p>If the compiler chooses not to inline the function (since it is merely a hint), I'm not sure, but I think the compiler emits it as a normal non-inline function and somehow annotates it so the linker just picks the first copy it sees and ignores the others.</p>\n", "LastEditorUserId": "9990", "LastActivityDate": "2010-11-16T11:37:31.983", "Score": "9", "CreationDate": "2010-11-16T11:31:05.770", "ParentId": "4193639", "CommentCount": "0", "OwnerUserId": "9990", "LastEditDate": "2010-11-16T11:37:31.983"}, "4194423": {"Id": "4194423", "PostTypeId": "2", "Body": "<p>The inline just masks the problem. Having multiple definition points out a problem somewhere.</p>\n<p>Juste be careful about how you use your headers. Dont forget to :\n- &lt;&lt; <code>#ifndef HEADER_NAME</code> / <code>#define HEADER_NAME</code> / <code>#endif</code> &gt;&gt; to avoid multiple inclusion.\n- Do not use indirect inclusion : if you use a type in a file, add the corresponding header, even if another header in the same file includes it.</p>\n", "LastEditorUserId": "17945", "LastActivityDate": "2010-11-16T13:16:12.997", "Score": "0", "CreationDate": "2010-11-16T13:06:59.990", "ParentId": "4193639", "CommentCount": "0", "OwnerUserId": "1714762", "LastEditDate": "2010-11-16T13:16:12.997"}, "4193639": {"ViewCount": "5504", "Body": "<p>I can't make sense of the following behavior: one header with some basic types, and another header in which I use these types in several functions. Afterward I started constructing classes based on my defined types and functions. In the function header if I leave the following signature:</p>\n<pre><code>void whateverFunction(parameters)\n</code></pre>\n<p>The linker points out that there are multiple definitions of whateverFunction. Now if change it to:</p>\n<pre><code>inline void whateverFunction(parameters)\n</code></pre>\n<p>the linkage problem is gone and all compiles and links well. What I know concerning inline is that it replaces every function call with it's code other than that it's a pretty dark, so my question is:</p>\n<p><strong>How does the linker treats inline functions in C++?</strong></p>\n", "AcceptedAnswerId": "4193698", "Title": "Inline function linkage", "CreationDate": "2010-11-16T11:27:43.563", "Id": "4193639", "CommentCount": "1", "FavoriteCount": "5", "PostTypeId": "1", "LastActivityDate": "2010-11-16T13:16:12.997", "Score": "14", "OwnerUserId": "69584", "Tags": "<c++><function><inline>", "AnswerCount": "3"}, "4193698": {"Id": "4193698", "PostTypeId": "2", "Body": "<p>When the function in the header is not inline, then multiple definitions of this function (e.g. in multiple translation units) is a violation of ODR rules.</p>\n<p>Inline functions by default have external linkage. Hence, as a consequence of ODR rules (given below), such multiple definitions (e.g. in multiple translation units) are Okay:</p>\n<blockquote>\n<p id=\"so_4193639_4193698_0\">$3.2/5- \"There can be more than one\n  definition of a class type (Clause 9),\n  enumeration type (7.2), <strong>inline\n  function with external linkage</strong>\n  (7.1.2), class template (Clause 14),\n  non-static function template (14.5.6),\n  static data member of a class template\n  (14.5.1.3), member function of a class\n  template (14.5.1.1), or template\n  specialization for which some template\n  parameters are not specified (14.7,\n  14.5.5) in a program provided that each definition appears in a different\n  translation unit, and provided the\n  definitions satisfy the following\n  requirements. Given such an entity\n  named D defined in more than one\n  translation unit, then</p>\n<p id=\"so_4193639_4193698_1\">\u2014 each definition of D shall consist\n  of the same sequence of tokens; and [...]</p>\n</blockquote>\n<p>How the linker treats inline functions is a pretty much implementation level detail. Suffice it to know that the implementation accepts such mulitple defintions within the limitations of ODR rules</p>\n<p>Note that if the function declaration in header is changed to 'static inline....', then the inline function explicitly has internal linkage and each translation unit has it's own copy of the static inline function.</p>\n", "LastActivityDate": "2010-11-16T11:38:10.360", "CommentCount": "2", "CreationDate": "2010-11-16T11:38:10.360", "ParentId": "4193639", "Score": "19", "OwnerUserId": "418110"}});