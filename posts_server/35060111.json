post_cb({"35060268": {"ParentId": "35060111", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>That's because the order of evaluation of this line</p>\n<pre><code>cout &lt;&lt; D1(Generator2) &lt;&lt; \" \" &lt;&lt; D1(Generator2) &lt;&lt; \" \" &lt;&lt; D1(Generator2) &lt;&lt; endl ;\n</code></pre>\n<p>is not what you think.</p>\n<p>You can test it with this:</p>\n<pre><code>int f() {\n  static int i = 0;\n  return i++;\n}\n\nint main() {\n  cout &lt;&lt; f() &lt;&lt; \" \" &lt;&lt; f() &lt;&lt; \" \" &lt;&lt; f() &lt;&lt; endl ;\n  return 0;\n}\n</code></pre>\n<p>Output: <code>2 1 0</code></p>\n<hr>\n<p>The order is not specified by the C++ standard, so the order could be different on other compilers, please see Richard Hodges' answer.</p>\n</hr>", "OwnerUserId": "3435400", "LastEditorUserId": "3435400", "LastEditDate": "2016-01-28T11:54:23.230", "Id": "35060268", "Score": "36", "CreationDate": "2016-01-28T11:28:17.480", "LastActivityDate": "2016-01-28T11:54:23.230"}, "35060325": {"ParentId": "35060111", "PostTypeId": "2", "CommentCount": "2", "Body": "<p><code>x &lt;&lt; y</code> is syntactic sugar for a function call to <code>operator&lt;&lt;(x, y)</code>.</p>\n<p>You will remember that the c++ standard places no restriction on the order of evaluation of the arguments of a function call.</p>\n<p>So the compiler is free to emit code that computes x first or y first.</p>\n<p>From the standard: \u00a75 note 2:</p>\n<blockquote>\n<p id=\"so_35060111_35060325_0\">Operators can be overloaded, that is, given meaning when applied to expressions of class type (Clause\n  9) or enumeration type (7.2). <strong>Uses of overloaded operators are transformed into function calls as described\n  in 13.5</strong>. Overloaded operators obey the rules for syntax specified in Clause 5, but the requirements of\n  operand type, value category, <strong>and evaluation order are replaced by the rules for function call</strong>.</p>\n</blockquote>\n", "OwnerUserId": "2015579", "LastEditorUserId": "2015579", "LastEditDate": "2016-01-28T21:57:35.620", "Id": "35060325", "Score": "42", "CreationDate": "2016-01-28T11:30:13.420", "LastActivityDate": "2016-01-28T21:57:35.620"}, "35060111": {"CommentCount": "5", "AcceptedAnswerId": "35060325", "PostTypeId": "1", "LastEditorUserId": "2684539", "CreationDate": "2016-01-28T11:21:21.940", "LastActivityDate": "2016-01-28T21:57:35.620", "LastEditDate": "2016-01-28T11:32:24.393", "ViewCount": "2362", "FavoriteCount": "1", "Title": "Random Number Order in C++ using <random>", "Id": "35060111", "Score": "38", "Body": "<p>I have the following code, that I wrote to test a part of a larger program :</p>\n<pre><code>#include &lt;fstream&gt;\n#include &lt;random&gt;\n#include &lt;iostream&gt;\nusing namespace std ;\n\nint main()\n{\n  mt19937_64 Generator(12187) ;\n  mt19937_64 Generator2(12187) ;\n  uniform_int_distribution&lt;int&gt; D1(1,6) ;\n\n  cout &lt;&lt; D1(Generator) &lt;&lt; \" \" ;\n  cout &lt;&lt; D1(Generator) &lt;&lt; \" \" &lt;&lt; D1(Generator) &lt;&lt; endl ;\n  cout &lt;&lt; D1(Generator2) &lt;&lt; \" \" &lt;&lt; D1(Generator2) &lt;&lt; \" \" &lt;&lt; D1(Generator2) &lt;&lt; endl ;\n\n  ofstream g1(\"g1.dat\") ;\n  g1 &lt;&lt; Generator ;\n  g1.close() ;\n  ofstream g2(\"g2.dat\") ;\n  g2 &lt;&lt; Generator2 ;\n  g2.close() ;\n}                                                            \n</code></pre>\n<p>The two generators are seeded with the same value, and therefore I expected the second row in the output to be identical to the first one. Instead, the output is</p>\n<pre><code>1 1 3\n1 3 1\n</code></pre>\n<p>The state of the two generators as printed in the <code>*.dat</code> files is the same. I was wondering if there might be some hidden multi-threading in the random number generation causing the order mismatch.</p>\n<p>I compiled with <code>g++</code> version 5.3.0, on Linux, with the flag <code>-std=c++11</code>.</p>\n<p>Thanks in advance for your help.</p>\n", "Tags": "<c++><c++11><random><order-of-evaluation>", "OwnerUserId": "5204967", "AnswerCount": "4"}, "35060335": {"ParentId": "35060111", "CommentCount": "4", "Body": "<p>A slight change to the program reveals what happens:</p>\n<pre><code>#include &lt;fstream&gt;\n#include &lt;random&gt;\n#include &lt;iostream&gt;\nusing namespace std ;\n\nint main()\n{\n  mt19937_64 Generator(12187) ;\n  mt19937_64 Generator2(12187) ;\n  uniform_int_distribution&lt;int&gt; D1(1,100) ;\n\n  cout &lt;&lt; D1(Generator) &lt;&lt; \" \" ;\n  cout &lt;&lt; D1(Generator) &lt;&lt; \" \" ;\n  cout &lt;&lt; D1(Generator) &lt;&lt; endl ;\n  cout &lt;&lt; D1(Generator2) &lt;&lt; \" \" &lt;&lt; D1(Generator2) &lt;&lt; \" \" &lt;&lt; D1(Generator2) &lt;&lt; endl ;\n}\n</code></pre>\n<p>Output:</p>\n<pre><code>4 48 12\n12 48 4\n</code></pre>\n<p>So your Generators produce equal results - but the order the arguments of your cout-line are calculated in different order.</p>\n<p>Try it online:\n<a href=\"http://ideone.com/rsoqDe\">http://ideone.com/rsoqDe</a></p>\n", "OwnerUserId": "3193464", "PostTypeId": "2", "Id": "35060335", "Score": "5", "CreationDate": "2016-01-28T11:30:36.627", "LastActivityDate": "2016-01-28T11:30:36.627"}, "35061625": {"ParentId": "35060111", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>These lines</p>\n<pre><code>  cout &lt;&lt; D1(Generator) &lt;&lt; \" \" ;\n\n  cout &lt;&lt; D1(Generator) &lt;&lt; \" \"\n       &lt;&lt; D1(Generator) &lt;&lt; endl ;\n\n  cout &lt;&lt; D1(Generator2) &lt;&lt; \" \"\n       &lt;&lt; D1(Generator2) &lt;&lt; \" \"\n       &lt;&lt; D1(Generator2) &lt;&lt; endl ;\n</code></pre>\n<p>because <code>D1()</code> returns an int, for which <code>ostream::operator&lt;&lt;()</code> has an overload, are effectively calling (excluding <code>endl</code>)</p>\n<pre><code>cout.operator&lt;&lt;(D1(Generator));\n\ncout.operator&lt;&lt;(D1(Generator))\n    .operator&lt;&lt;(D1(Generator));\n\ncout.operator&lt;&lt;(D1(Generator2))\n    .operator&lt;&lt;(D1(Generator2))\n    .operator&lt;&lt;(D1(Generator2));\n</code></pre>\n<p>Now, the standard has this to say,</p>\n<blockquote>\n<h3>\u00a7 5.2.2 [4]</h3>\n<p id=\"so_35060111_35061625_0\">When a function is called, each parameter shall\n  be initialized with its corresponding argument.</p>\n<p id=\"so_35060111_35061625_1\"><strong>[ Note: Such initializations are indeterminately sequenced with respect to each other \u2014 end note ]</strong></p>\n<p id=\"so_35060111_35061625_2\">If the function is a non-static\n  member function, the this parameter of the function shall be\n  initialized with a pointer to the object of the call</p>\n</blockquote>\n<p>So let's break down the preceding expression</p>\n<pre><code>cout.operator&lt;&lt;(a())  // #1\n    .operator&lt;&lt;(b())  // #2\n    .operator&lt;&lt;(c()); // #3\n</code></pre>\n<p>To illustrate the construction of the <code>this</code> pointer, these are conceptually equivalent to (omitting <code>ostream::</code> for brevity):</p>\n<pre><code>operator&lt;&lt;(           // #1\n  &amp;operator&lt;&lt;(        // #2\n    &amp;operator&lt;&lt;(      // #3\n      &amp;cout,\n      a()\n    ),                // end #3\n    b()\n  ),                  // end #2\n  c()\n);                    // end #1\n</code></pre>\n<p>Now let's look at the top-level call. Which do we evaluate first, <code>#2</code>, or <code>c()</code>? Since, as emphasized in the quote, the order is indeterminate, then we don't know\u2014and this is true recursively: even if we evaluated <code>#2</code>, we would still face the question of whether to evaluate its internal <code>#3</code> or <code>b()</code>.</p>\n<p>So that hopefully explains what's going on here more clearly.</p>\n", "OwnerUserId": "602372", "LastEditorUserId": "602372", "LastEditDate": "2016-01-28T12:38:58.213", "Id": "35061625", "Score": "4", "CreationDate": "2016-01-28T12:33:42.953", "LastActivityDate": "2016-01-28T12:38:58.213"}, "bq_ids": {"n4140": {"so_35060111_35061625_1": {"section_id": 5991, "quality": 0.7, "length": 7}, "so_35060111_35061625_0": {"section_id": 5991, "quality": 1.0, "length": 9}, "so_35060111_35061625_2": {"section_id": 5991, "quality": 1.0, "length": 10}, "so_35060111_35060325_0": {"section_id": 5935, "quality": 0.926829268292683, "length": 38}}, "n3337": {"so_35060111_35061625_2": {"section_id": 5759, "quality": 1.0, "length": 10}, "so_35060111_35061625_0": {"section_id": 5759, "quality": 1.0, "length": 9}, "so_35060111_35061625_1": {"section_id": 5759, "quality": 0.7, "length": 7}, "so_35060111_35060325_0": {"section_id": 5707, "quality": 0.926829268292683, "length": 38}}, "n4659": {"so_35060111_35061625_2": {"section_id": 7491, "quality": 1.0, "length": 10}, "so_35060111_35061625_0": {"section_id": 7491, "quality": 1.0, "length": 9}, "so_35060111_35060325_0": {"section_id": 7419, "quality": 0.8780487804878049, "length": 36}}}});