post_cb({"bq_ids": {"n4140": {"so_31052979_31053002_3": {"section_id": 6167, "quality": 0.9574468085106383, "length": 45}, "so_31052979_31053002_2": {"section_id": 6165, "quality": 0.9354838709677419, "length": 29}, "so_31052979_31053002_4": {"section_id": 6182, "quality": 0.9206349206349206, "length": 58}, "so_31052979_31053002_1": {"section_id": 6163, "quality": 0.896551724137931, "length": 26}}, "n3337": {"so_31052979_31053002_3": {"section_id": 5928, "quality": 0.9574468085106383, "length": 45}, "so_31052979_31053002_2": {"section_id": 5926, "quality": 0.9354838709677419, "length": 29}, "so_31052979_31053002_4": {"section_id": 5943, "quality": 0.8253968253968254, "length": 52}, "so_31052979_31053002_1": {"section_id": 5924, "quality": 0.896551724137931, "length": 26}}, "n4659": {"so_31052979_31053002_3": {"section_id": 7664, "quality": 0.9574468085106383, "length": 45}, "so_31052979_31053002_2": {"section_id": 7662, "quality": 0.9354838709677419, "length": 29}, "so_31052979_31053002_4": {"section_id": 7684, "quality": 0.8888888888888888, "length": 56}, "so_31052979_31053002_1": {"section_id": 7660, "quality": 0.896551724137931, "length": 26}}}, "31052979": {"CommentCount": "6", "ViewCount": "279", "PostTypeId": "1", "ClosedDate": "2015-06-25T14:36:35.543", "LastEditorUserId": "-1", "CreationDate": "2015-06-25T14:17:14.747", "LastActivityDate": "2015-06-25T14:51:31.783", "Title": "C++ compiler optimizations and short-circuit evaluation", "AcceptedAnswerId": "31053002", "LastEditDate": "2017-05-23T12:30:02.540", "Id": "31052979", "Score": "6", "Body": "<p>Here is my code :</p>\n<pre><code>b = f() || b;\n</code></pre>\n<p>The function <code>f()</code> has side effect and it must be always executed. Normally, only the right operand can be short-circuited and this code should work. But I am afraid some compilators reverse the two operands, since it's more efficient to short-circuit a function evaluation rather than a simple variable evaluation. I know that g++ -O3 can break some specifications, but I don't know if this code can be affected.</p>\n<p>So, is my code risk-free?</p>\n<p>I knew <a href=\"https://stackoverflow.com/questions/628526/is-short-circuiting-boolean-operators-mandated-in-c-c-and-evaluation-order\">Is short-circuiting logical operators mandated? And evaluation order?</a> but my question was about compilers optimizations, I didn't know that they can't break the standards (even if this would be strange).</p>\n", "Tags": "<c++><compilation><short-circuiting>", "OwnerUserId": "3702657", "AnswerCount": "2"}, "31053002": {"ParentId": "31052979", "PostTypeId": "2", "CommentCount": "2", "Body": "<blockquote>\n<p id=\"so_31052979_31053002_0\">But I am afraid some compilators reverse the two operands</p>\n</blockquote>\n<p>These expressions <strong>must</strong> be evaluated left-to-right. This is covered in the standard about the operators <code>&amp;&amp;</code>, <code>||</code>, <code>?</code>, and <code>,</code>. They specifically mention the order, as well as enforced sequence points.</p>\n<p><strong>\u00a75.14.1</strong> (Logical AND)</p>\n<blockquote>\n<p id=\"so_31052979_31053002_1\">The <code>&amp;&amp;</code> operator groups left-to-right. The operands are both contextually converted to bool (Clause 4). The result is true if both operands are true and false otherwise. <strong>Unlike <code>&amp;</code>, <code>&amp;&amp;</code> guarantees left-to-right evaluation</strong>: the second operand is not evaluated if the first operand is false.</p>\n</blockquote>\n<p><strong>\u00a75.15.1</strong> (Logical OR)</p>\n<blockquote>\n<p id=\"so_31052979_31053002_2\">The <code>||</code> operator groups left-to-right. The operands are both contextually converted to bool (Clause 4). It returns true if either of its operands is true, and false otherwise. <strong>Unlike <code>|</code>, <code>||</code> guarantees left-to-right evaluation</strong>; moreover, the second operand is not evaluated if the first operand evaluates to true.</p>\n</blockquote>\n<p><strong>\u00a75.16.1</strong> (Conditional operator)</p>\n<blockquote>\n<p id=\"so_31052979_31053002_3\">Conditional expressions group right-to-left. The first expression is contextually converted to bool (Clause 4). It is evaluated and if it is true, the result of the conditional expression is the value of the second expression,\n  otherwise that of the third expression. Only one of the second and third expressions is evaluated. Every value computation and side effect associated with the <strong>first expression is sequenced before</strong> every value computation\n  and side effect associated with <strong>the second or third expression</strong>.</p>\n</blockquote>\n<p><strong>\u00a75.19.1</strong> (Comma operator)</p>\n<blockquote>\n<p id=\"so_31052979_31053002_4\">The comma operator groups left-to-right. A pair of expressions separated by a comma is evaluated left-to-right; the left expression is a discarded value\n  expression (Clause 5). Every value computation and side effect associated with the <strong>left expression is sequenced before</strong> every value computation and side effect associated with the <strong>right expression</strong>. The type and value of the result are the type and value of the right operand; the result is of the same value category\n  as its right operand, and is a bit-field if its right operand is a glvalue and a bit-field. If the value of the right operand is a temporary (12.2), the result is that temporary.</p>\n</blockquote>\n<p>Regarding your concern about optimizations violating this order, no compilers are <strong>not allowed</strong> to change the order. Compilers must first and foremost (try to) follow the standard. <em>Then</em> they can try to make your code faster. They may not violate the standard just for the sake of performance. That undermines the entire premise of having a standard.</p>\n", "OwnerUserId": "2296458", "LastEditorUserId": "2296458", "LastEditDate": "2015-06-25T14:51:31.783", "Id": "31053002", "Score": "11", "CreationDate": "2015-06-25T14:18:22.743", "LastActivityDate": "2015-06-25T14:51:31.783"}, "31053099": {"ParentId": "31052979", "CommentCount": "0", "Body": "<p>It's explicitly stated by the standard that optimized code should behave \"as-if\" it was exactly the code that was written, as long as you only rely on standard behavior.</p>\n<p>Since the standard requires the boolean statements to be evaluated from left to right, no (compliant) optimization can change the order of evaluation.</p>\n", "OwnerUserId": "2356414", "PostTypeId": "2", "Id": "31053099", "Score": "6", "CreationDate": "2015-06-25T14:21:38.447", "LastActivityDate": "2015-06-25T14:21:38.447"}});