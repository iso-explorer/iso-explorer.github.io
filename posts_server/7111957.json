post_cb({"7112164": {"ParentId": "7111957", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>As I understand it is <strong>Not valid</strong> as per the C++03 Specification.</p>\n<p><strong>Reference - C++03 standard:</strong> </p>\n<p><strong>Section $8.3:</strong></p>\n<p><em>Each declarator contains exactly one declarator-id; it names the identifier that is declared. The id-expression of a declarator-id shall be a simple identifier except for the declaration of some special functions (12.3, 12.4, 13.5) and for the declaration of template specializations or partial specializations (14.7). <strong>A declarator-id shall not be qualified except for the definition of a member function (9.3) or static data member (9.4) or nested class (9.7) outside of its class,</strong> the definition or explicit instantiation of a function, variable or class member of a namespace outside of its namespace, or the definition of a previously declared explicit specialization outside of its namespace, or the declaration of a friend function that is a member of another class or namespace (11.4).</em></p>\n<p>I hope I am deriving the appropriate meaning of the above. I will admit reading &amp; understanding the quotes from the Standard makes me a little dizzy. Let me know if I interpret it wrongly.</p>\n", "OwnerUserId": "452307", "LastEditorUserId": "452307", "LastEditDate": "2011-08-18T18:37:30.687", "Id": "7112164", "Score": "7", "CreationDate": "2011-08-18T18:21:02.027", "LastActivityDate": "2011-08-18T18:37:30.687"}, "7112168": {"ParentId": "7111957", "CommentCount": "6", "Body": "<p>No, this is not valid.  Here, <code>X::f</code> is a qualified name; you are attempting to use it as a <em>declarator-id</em>.  C++03 8.3[dcl.meaning]/1 lists the circumstances under which a <em>declarator-id</em> may be qualified:</p>\n<blockquote>\n<p id=\"so_7111957_7112168_0\">A <em>declarator-id</em> shall not be qualified except for</p>\n<ul>\n<li><p id=\"so_7111957_7112168_1\">the definition of a member function or static data member outside\n  of its class, </p></li>\n<li><p id=\"so_7111957_7112168_2\">the definition or explicit instantiation of a function or variable member of a namespace outside\n  of its namespace, or </p></li>\n<li><p id=\"so_7111957_7112168_3\">the definition of a previously declared explicit specialization outside of its namespace, or</p></li>\n<li><p id=\"so_7111957_7112168_4\">the declaration of a friend function that is a member of another class or namespace.</p></li>\n</ul>\n</blockquote>\n<p>Because <code>X::f</code> falls into none of these four categories, it is incorrect.</p>\n<p>The rule that requires the definition of a member function outside of the class definition to be qualified can be found at C++03 9.3[class.mfct]/5:</p>\n<blockquote>\n<p id=\"so_7111957_7112168_5\">If the definition of a member function is lexically outside its class definition, the member function name shall be qualified by its class name using the <code>::</code> operator.</p>\n</blockquote>\n", "OwnerUserId": "151292", "PostTypeId": "2", "Id": "7112168", "Score": "8", "CreationDate": "2011-08-18T18:21:14.260", "LastActivityDate": "2011-08-18T18:21:14.260"}, "bq_ids": {"n4140": {"so_7111957_7112168_5": {"section_id": 5884, "quality": 1.0, "length": 17}, "so_7111957_7112168_2": {"section_id": 252, "quality": 0.7, "length": 7}, "so_7111957_7112168_1": {"section_id": 48, "quality": 0.7777777777777778, "length": 7}, "so_7111957_7112168_4": {"section_id": 126, "quality": 0.7142857142857143, "length": 5}, "so_7111957_7112168_3": {"section_id": 264, "quality": 0.625, "length": 5}}, "n3337": {"so_7111957_7112168_5": {"section_id": 5655, "quality": 1.0, "length": 17}, "so_7111957_7112168_2": {"section_id": 3082, "quality": 1.0, "length": 10}, "so_7111957_7112168_1": {"section_id": 3082, "quality": 1.0, "length": 9}, "so_7111957_7112168_4": {"section_id": 3082, "quality": 1.0, "length": 7}, "so_7111957_7112168_3": {"section_id": 3082, "quality": 0.75, "length": 6}}, "n4659": {"so_7111957_7112168_5": {"section_id": 7367, "quality": 1.0, "length": 17}, "so_7111957_7112168_2": {"section_id": 259, "quality": 0.7, "length": 7}, "so_7111957_7112168_1": {"section_id": 49, "quality": 0.7777777777777778, "length": 7}, "so_7111957_7112168_4": {"section_id": 131, "quality": 0.7142857142857143, "length": 5}, "so_7111957_7112168_3": {"section_id": 6920, "quality": 0.625, "length": 5}}}, "7111957": {"CommentCount": "7", "AcceptedAnswerId": "7112168", "CreationDate": "2011-08-18T18:03:34.533", "LastActivityDate": "2011-08-18T18:37:30.687", "PostTypeId": "1", "ViewCount": "6082", "FavoriteCount": "1", "Title": "Is qualified name in the member function declaration allowed?", "Id": "7111957", "Score": "5", "Body": "<p>This code is accepted by MSVC9.0. My question is whether it is legal according to the standard (the old and/or the new one). A quote would be very much welcome, too.</p>\n<pre><code>class X\n{\n   void X::f();\n};\n</code></pre>\n", "Tags": "<c++><c++11><grammar><qualified-name><member-functions>", "OwnerUserId": "469935", "AnswerCount": "2"}});