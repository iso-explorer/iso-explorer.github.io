post_cb({"bq_ids": {"n4140": {"so_37705923_37706327_0": {"length": 22, "quality": 0.7096774193548387, "section_id": 7151}, "so_37705923_37706327_1": {"length": 23, "quality": 1.0, "section_id": 7151}}, "n3337": {"so_37705923_37706327_0": {"length": 22, "quality": 0.7096774193548387, "section_id": 6895}, "so_37705923_37706327_1": {"length": 23, "quality": 1.0, "section_id": 6895}}, "n4659": {"so_37705923_37706327_0": {"length": 17, "quality": 0.5483870967741935, "section_id": 8654}}}, "37706327": {"Id": "37706327", "PostTypeId": "2", "Body": "<p>As explained in that question, one effect of </p>\n<pre><code>#include &lt;iostream&gt;\n</code></pre>\n<p>is the equivalent of defining a global variable</p>\n<pre><code>static std::ios_base::Init __init;\n</code></pre>\n<p>which (assuming that you include it at the start of the TU) guarantees that for all static storage duration objects with <em>ordered</em> initialization in the same TU, the stream objects have been set up.</p>\n<p>However, explicitly and implicitly instantiated template specializations have <em>unordered</em> initialization (<a href=\"http://eel.is/c++draft/basic.start.dynamic#1\">[basic.start.dynamic]/1</a>)<sup>1</sup>:</p>\n<blockquote>\n<p id=\"so_37705923_37706327_0\">Dynamic initialization of a non-local variable with static storage\n  duration is unordered if the variable is an implicitly or explicitly\n  instantiated specialization, and otherwise is ordered [<em>note omitted</em>]. Variables with ordered initialization defined within a single translation unit shall be initialized in the order of their definitions in the translation unit. </p>\n</blockquote>\n<p>And since</p>\n<blockquote>\n<p id=\"so_37705923_37706327_1\">If a program starts a thread, the subsequent unordered initialization\n  of a variable is unsequenced with respect to every other dynamic\n  initialization. Otherwise, the unordered initialization of a variable\n  is indeterminately sequenced with respect to every other dynamic\n  initialization.</p>\n</blockquote>\n<p>there's no guarantee that the stream objects have been initialized at the time  the variable template specialization <code>x&lt;Test&gt;</code> is initialized.</p>\n<p>In this case, as one of the possible executions results in undefined behavior (using the stream objects before they are initialized), the behavior of the entire program is undefined (see <a href=\"http://eel.is/c++draft/intro.execution#5\">[intro.execution]/5</a>).</p>\n<p>The fix is to construct a <code>std::ios_base::Init</code> object yourself in <code>Test</code>'s constructor.</p>\n<hr>\n<p><sub><sup>1</sup> This is actually underspecified for variable templates when C++14 was published, but it's always been the intent.</sub></p>\n</hr>", "LastEditorUserId": "2756719", "LastActivityDate": "2016-06-08T15:13:31.600", "Score": "21", "CreationDate": "2016-06-08T15:06:28.017", "ParentId": "37705923", "CommentCount": "3", "OwnerUserId": "2756719", "LastEditDate": "2016-06-08T15:13:31.600"}, "37705923": {"ViewCount": "454", "Body": "<p>It looks like we can safely use <code>std::cout</code> object in constructors of objects with static storage duration as stated in this <a href=\"https://stackoverflow.com/questions/8784892/is-stdcout-guaranteed-to-be-initialized\">question</a>.</p>\n<p>However, I'm not entirely sure that we can safely use them in case of variable templates:</p>\n<pre><code>#include &lt;iostream&gt;\n\ntemplate&lt;class T&gt;\nT x = T{};\n\nvoid foo()\n{\n    class Test\n    {\n    public:\n        Test() { std::cout &lt;&lt; \"Test::Test\\n\"; }\n    };\n\n    Test t = x&lt;Test&gt;;\n}\n\n\nint main()\n{\n    std::cout &lt;&lt; \"main\\n\";\n}\n</code></pre>\n<p>This code crashes in clang (<a href=\"http://coliru.stacked-crooked.com/a/c20353f4224bfb7b\" rel=\"nofollow noreferrer\">live example</a>) and I'm not sure whether it's a bug or not.</p>\n", "AcceptedAnswerId": "37706327", "Title": "Variable templates and std::cout -- order of construction", "CreationDate": "2016-06-08T14:50:06.990", "Id": "37705923", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2017-05-23T12:33:42.147", "LastEditorUserId": "-1", "LastActivityDate": "2016-06-08T15:13:31.600", "Score": "22", "OwnerUserId": "1608835", "Tags": "<c++><c++11><c++14><c++1z>", "AnswerCount": "1"}});