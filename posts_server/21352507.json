post_cb({"21352602": {"Id": "21352602", "PostTypeId": "2", "Body": "<p>Does it exist?</p>\n<pre><code>#include &lt;iostream&gt;\n\nclass A\n{\npublic:\n    virtual void f() = 0;\n    A()\n    {\n        std::cout &lt;&lt; \"Yes it does!\" &lt;&lt; std::endl;\n    }\n};\n\nclass B: public A\n{\npublic:\n    void f() {}\n};\n\nint main()\n{\n    B b;\n    return 0;\n}\n</code></pre>\n<blockquote>\n<p id=\"so_21352507_21352602_0\">Yes it does!</p>\n</blockquote>\n<p>The technical reason is that somebody needs to initialize the members of <code>A</code> and that's the job of the constructor. But you can easily reason it as follows:</p>\n<p>The inheritance relation is often termed with \"is\". For example, an object of type <code>B</code> is also of type <code>A</code>. In other words <code>B</code> is a kind of <code>A</code>. The constructor of <code>A</code> constructs an object of type <code>A</code>. But <code>b</code> above is also a kind of <code>A</code>, so <code>A</code> must have a constructor to be able to construct it.</p>\n", "LastActivityDate": "2014-01-25T15:42:39.580", "CommentCount": "2", "CreationDate": "2014-01-25T15:42:39.580", "ParentId": "21352507", "Score": "4", "OwnerUserId": "912144"}, "21352507": {"ViewCount": "117", "Body": "<p>We can not create an object of abstract class. And constructors create new instances of any class which is called as an object.</p>\n<p>This is what I know about the constructor, class and object relationship.</p>\n<p>Please correct me if I am wrong.</p>\n", "Title": "Does \"Constructor of an abstract class\" exists?", "CreationDate": "2014-01-25T15:34:48.987", "LastActivityDate": "2014-01-25T15:52:17.523", "CommentCount": "3", "LastEditDate": "2014-01-25T15:37:11.340", "PostTypeId": "1", "LastEditorUserId": "635608", "Id": "21352507", "Score": "3", "OwnerUserId": "3198612", "Tags": "<c++>", "AnswerCount": "4"}, "21352618": {"Id": "21352618", "PostTypeId": "2", "Body": "<p>Abstract classes can contain member variables and to initialize those member variables Abstract classes need constructor. </p>\n", "LastActivityDate": "2014-01-25T15:44:19.733", "CommentCount": "0", "CreationDate": "2014-01-25T15:44:19.733", "ParentId": "21352507", "Score": "1", "OwnerUserId": "2573687"}, "21352615": {"Id": "21352615", "PostTypeId": "2", "Body": "<p>Yes! It has to exist, since constructors of any child class make a call to the base constructor. (This is the simplest way to explain it)</p>\n", "LastActivityDate": "2014-01-25T15:44:01.283", "CommentCount": "0", "CreationDate": "2014-01-25T15:44:01.283", "ParentId": "21352507", "Score": "2", "OwnerUserId": "2921343"}, "bq_ids": {"n4140": {"so_21352507_21352605_2": {"length": 5, "quality": 0.625, "section_id": 371}, "so_21352507_21352605_1": {"length": 4, "quality": 0.8, "section_id": 300}}, "n3337": {"so_21352507_21352605_2": {"length": 5, "quality": 0.625, "section_id": 361}, "so_21352507_21352605_1": {"length": 4, "quality": 0.8, "section_id": 291}}, "n4659": {"so_21352507_21352605_2": {"length": 5, "quality": 0.625, "section_id": 385}, "so_21352507_21352605_1": {"length": 4, "quality": 0.8, "section_id": 307}}}, "21352605": {"Id": "21352605", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_21352507_21352605_0\">Does \u201cConstructor of an abstract class\u201d exists?</p>\n</blockquote>\n<p>Let's say that there can be an abstract class constructor. Just like any other class. By default (if you don't declare a \"custom\" constructor or you don't have member objects that have no default constructor) there are two implicitly defined: the <em>default constructor</em> and the <em>copy constructor</em>.</p>\n<p>So in a declaration like this:</p>\n<pre><code>struct abstract_class {\n    virtual void func() = 0;\n}\n</code></pre>\n<p>you still have constructors.</p>\n<hr>\n<blockquote>\n<p id=\"so_21352507_21352605_1\">We can not create an object of abstract class.</p>\n</blockquote>\n<p>Yes. For the most common definition of <em>abstract class</em>, that is true. If a class does have <em>pure virtual</em> functions, it is considered to be an <em>abstract class</em> and of course it cannot be instantiated.</p>\n<hr>\n<blockquote>\n<p id=\"so_21352507_21352605_2\">And constructors create new instances of any class which is called as an object.</p>\n</blockquote>\n<p>I'd rephrase that to: You construct objects of a class type via their constructor. And yes, in C++, an <em>object</em> is (from \u00a71.8/1):</p>\n<blockquote>\n<p id=\"so_21352507_21352605_3\">An object is a region of storage.</p>\n</blockquote>\n<p>And that's that. For example:</p>\n<pre><code>int x = 0;\n</code></pre>\n<p>is an object too. An <em>object</em> does not necessarily mean a class type.</p>\n</hr></hr>", "LastActivityDate": "2014-01-25T15:43:02.377", "CommentCount": "1", "CreationDate": "2014-01-25T15:43:02.377", "ParentId": "21352507", "Score": "2", "OwnerUserId": "493122"}});