post_cb({"bq_ids": {"n4140": {"so_28755515_28755515_1": {"length": 7, "quality": 1.0, "section_id": 5427}, "so_28755515_28755515_0": {"length": 13, "quality": 1.0, "section_id": 5425}}, "n3337": {"so_28755515_28755515_1": {"length": 7, "quality": 1.0, "section_id": 5222}, "so_28755515_28755515_0": {"length": 13, "quality": 1.0, "section_id": 5220}}, "n4659": {"so_28755515_28755515_1": {"length": 7, "quality": 1.0, "section_id": 6855}, "so_28755515_28755515_0": {"length": 13, "quality": 1.0, "section_id": 6847}}}, "28755515": {"ViewCount": "58", "Body": "<p>The draft C++11 standard states that <code>constexpr</code> will declare an object as <code>const</code>:</p>\n<p>7.1.5p9 </p>\n<blockquote>\n<p id=\"so_28755515_28755515_0\">A constexpr specifier used in an object declaration declares the\n  object as const. Such an object shall have literal type and shall be\n  initialized.</p>\n</blockquote>\n<p>So it seems that <code>constexpr const int i = 5;</code> is redundant. However, combining <code>const</code> is explicitly disallowed:</p>\n<p>7.1.6p2</p>\n<blockquote>\n<p id=\"so_28755515_28755515_1\">const can be combined with any type specifier except itself.</p>\n</blockquote>\n<p>Is there any reason why this rule wasn't extended to constexpr? </p>\n", "Title": "Why can you combine constexpr with const?", "CreationDate": "2015-02-27T00:35:13.540", "LastActivityDate": "2015-02-27T00:35:13.540", "CommentCount": "0", "PostTypeId": "1", "ClosedDate": "2015-02-27T00:40:09.623", "Id": "28755515", "Score": "2", "OwnerUserId": "4612605", "Tags": "<c++><c++11>", "AnswerCount": "0"}});