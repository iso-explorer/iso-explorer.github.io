post_cb({"11181317": {"ViewCount": "296", "Body": "<p>In many tutorials describing the usage of virtual base classes (usually used to solve the diamond problem), they often have a code similar to the design of this structure:</p>\n<pre><code>class Animal\n{\npublic:\n    Animal()\n    {\n        cout &lt;&lt; \"Creating Animal\\n\";\n    }\n};\n\n///////////////////////////\n\nclass FourLegs : virtual public Animal\n{\npublic:\n    FourLegs()\n    {\n        cout &lt;&lt; \"Creating FourLegs\\n\";\n    }\n};\n\n///////////////////////////\n\nclass Mammal : virtual public Animal\n{\npublic:\n    Mammal()\n    {\n        cout &lt;&lt; \"Creating Mammal\\n\";\n    }\n};\n\n///////////////////////////\n\nclass Fox : public FourLegs, public Mammal\n{\npublic:\n    Fox()\n    {\n        cout &lt;&lt; \"Creating Fox\\n\";\n    }\n};\n</code></pre>\n<p>When I create an instance of Fox, I get the expected output, only one Animal created:</p>\n<pre><code>Creating Animal\nCreating FourLegs\nCreating Mammal\nCreating Fox\n</code></pre>\n<p>As you can see, I have the two tier-2 classes inherit virtually. Now, if only <i>one</i> tier-2 class is inherited virtually, and the other is inherited just publicly, interesting outputs can occur. For example, if if FourLegs is inherited public and Mammal is inherited virtual public, this is the output:</p>\n<pre><code>Creating Animal\nCreating Animal\nCreating FourLegs\nCreating Mammal\nCreating Fox\n</code></pre>\n<p>This is strange and brings up the question: <strong>What is the complete process of creating a class that involves virtual inheritance somewhere in the inheritance tree?</strong></p>\n<p>On the other hand, if I FourLegs if inherited virtual public, and Mammal is inherited public, then the output is as just normal (as if nothing was inherited virtual public):</p>\n<pre><code>Creating Animal\nCreating FourLegs\nCreating Animal\nCreating Mammal\nCreating Fox\n</code></pre>\n", "AcceptedAnswerId": "11181418", "Title": "The process of creating a class that involves virtual inheritance", "CreationDate": "2012-06-24T21:27:55.147", "Id": "11181317", "CommentCount": "6", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2012-06-24T21:48:27.770", "Score": "6", "OwnerUserId": "1276964", "Tags": "<c++><inheritance><diamond-problem>", "AnswerCount": "2"}, "11181418": {"Id": "11181418", "PostTypeId": "2", "Body": "<p>Straight from the standard, <em>12.6.2/10 [class.base.init]</em>:</p>\n<blockquote>\n<p id=\"so_11181317_11181418_0\">In a non-delegating constructor, initialization proceeds in the following order:</p>\n<ul>\n<li><p id=\"so_11181317_11181418_1\">First, and only for the constructor of the most derived class (1.8), virtual base classes are initialized in the order they appear on a depth-first left-to-right traversal of the directed acyclic graph of base classes, where \u201cleft-to-right\u201d is the order of appearance of the base classes in the derived class <em>base-specifier-list</em>.</p></li>\n<li><p id=\"so_11181317_11181418_2\">Then, direct base classes are initialized in declaration order as they appear in the <em>base-specifier-list</em> (regardless of the order of the <em>mem-initializers</em>).</p></li>\n<li><p id=\"so_11181317_11181418_3\">Then, non-static data members are initialized in the order they were declared in the class definition (again regardless of the order of the <em>mem-initializers</em>).</p></li>\n<li><p id=\"so_11181317_11181418_4\">Finally, the <em>compound-statement</em> of the constructor body is executed.</p></li>\n</ul>\n<p id=\"so_11181317_11181418_5\">[<em>Note</em>:The declaration order is mandated to ensure that base and member subobjects are destroyed in the reverse order of initialization. <em>\u2014end note</em>]</p>\n</blockquote>\n<p>The first bullet explains how initialization is done with classes that involve virtual inheritance.</p>\n", "LastEditorUserId": "927034", "LastActivityDate": "2012-06-24T21:48:27.770", "Score": "3", "CreationDate": "2012-06-24T21:41:06.637", "ParentId": "11181317", "CommentCount": "11", "OwnerUserId": "927034", "LastEditDate": "2012-06-24T21:48:27.770"}, "11181449": {"Id": "11181449", "PostTypeId": "2", "Body": "<p>The unexpected output is not unexpected. It occurs because <code>FourLegs</code> is derived from <code>Animal</code> and must call the constructor of <code>Animal</code>. The established convention of <code>virtual</code>-izing all intermediate classes is required to prevent the problem. The underlying problem of your example is that the concept of <code>FourLegs</code> is used as an <em>inherited</em> trait while it <em>should</em> be used as a <em>compositional</em> trait. That is, there's a field describing the number of legs a mammal/animal has inside <code>Mammal</code> or <code>Animal</code> (depending on the specific requirements) and derived classes inherit the field.</p>\n", "LastActivityDate": "2012-06-24T21:45:17.740", "CommentCount": "2", "CreationDate": "2012-06-24T21:45:17.740", "ParentId": "11181317", "Score": "0", "OwnerUserId": "421178"}, "bq_ids": {"n4140": {"so_11181317_11181418_1": {"length": 29, "quality": 1.0, "section_id": 438}, "so_11181317_11181418_0": {"length": 6, "quality": 1.0, "section_id": 438}, "so_11181317_11181418_2": {"length": 13, "quality": 1.0, "section_id": 438}, "so_11181317_11181418_3": {"length": 15, "quality": 1.0, "section_id": 438}, "so_11181317_11181418_5": {"length": 11, "quality": 0.7857142857142857, "section_id": 438}, "so_11181317_11181418_4": {"length": 5, "quality": 1.0, "section_id": 438}}, "n3337": {"so_11181317_11181418_0": {"length": 6, "quality": 1.0, "section_id": 429}, "so_11181317_11181418_1": {"length": 29, "quality": 1.0, "section_id": 429}, "so_11181317_11181418_3": {"length": 15, "quality": 1.0, "section_id": 429}, "so_11181317_11181418_5": {"length": 11, "quality": 0.7857142857142857, "section_id": 429}, "so_11181317_11181418_2": {"length": 13, "quality": 1.0, "section_id": 429}, "so_11181317_11181418_4": {"length": 5, "quality": 1.0, "section_id": 429}}, "n4659": {"so_11181317_11181418_0": {"length": 6, "quality": 1.0, "section_id": 458}, "so_11181317_11181418_1": {"length": 29, "quality": 1.0, "section_id": 458}, "so_11181317_11181418_3": {"length": 15, "quality": 1.0, "section_id": 458}, "so_11181317_11181418_5": {"length": 11, "quality": 0.7857142857142857, "section_id": 458}, "so_11181317_11181418_2": {"length": 13, "quality": 1.0, "section_id": 458}, "so_11181317_11181418_4": {"length": 5, "quality": 1.0, "section_id": 458}}}});