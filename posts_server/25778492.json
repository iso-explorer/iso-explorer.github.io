post_cb({"25778602": {"ParentId": "25778492", "CommentCount": "0", "Body": "<p>You'll need to use a list for the situation you describe; any insertion into a deque (whether at the end or not) invalidates all iterators. From the C++14 standard (23.3.3.4 deque modi\ufb01ers):</p>\n<blockquote>\n<p id=\"so_25778492_25778602_0\">An insertion in the middle of the deque invalidates all the iterators\n  and references to elements of the deque. An insertion at either end of\n  the deque invalidates all the iterators to the deque, but has no e\ufb00ect\n  on the validity of references to elements of the deque.</p>\n<p id=\"so_25778492_25778602_1\">An erase operation that erases the last element of a deque invalidates\n  only the past-the-end iterator and all iterators and references to the\n  erased elements. An erase operation that erases the \ufb01rst element of a\n  deque but not the last element invalidates only the erased elements.\n  An erase operation that erases neither the \ufb01rst element nor the last\n  element of a deque invalidates the past-the-end iterator and all\n  iterators and references to all the elements of the deque.</p>\n</blockquote>\n", "OwnerUserId": "21426", "PostTypeId": "2", "Id": "25778602", "Score": "1", "CreationDate": "2014-09-11T03:32:34.317", "LastActivityDate": "2014-09-11T03:32:34.317"}, "25778492": {"CommentCount": "4", "ViewCount": "115", "ClosedDate": "2014-09-11T03:45:47.877", "CreationDate": "2014-09-11T03:18:52.740", "LastActivityDate": "2014-09-11T03:32:34.317", "Title": "Do iterators to a std::deque get invalidated after inserting or erasing at both ends of the container?", "PostTypeId": "1", "Id": "25778492", "Score": "1", "Body": "<p>I'd like to implement a moving window of samples that are added at irregular time intervals and I would like to know whether I should use a <code>std::forward_list</code> or a <code>std::deque</code>. As time passes, new elements will be added at the end of the container and the ones that are already expired will be popped from the beginning of the container. Now, the problem is that this container it's going to be shared by more than one object and I need to make sure that the iterators don't get invalidated after an insertion at the end or an erase at the beginning.</p>\n<p>So my question is, do iterators to a std::deque that are pointing to elements get invalidated after an insertion at the end OR an erase at the beginning? Note that the iterators I'm talking about are pointing to elements in the container that are not the beginning or the end of the container. </p>\n<p>My gut feeling tells me that I'll need to implement it with a <code>std::forward_list</code>. If so, does any body knows if a linked list is able to reuse destroyed nodes or if it allocates the memory every time a new element is inserted?</p>\n", "Tags": "<c++><stl><containers><deque><stdlist>", "OwnerUserId": "1416294", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_25778492_25778602_0": {"section_id": 817, "quality": 0.9565217391304348, "length": 22}, "so_25778492_25778602_1": {"section_id": 820, "quality": 0.9555555555555556, "length": 43}}, "n3337": {"so_25778492_25778602_0": {"section_id": 806, "quality": 0.9565217391304348, "length": 22}, "so_25778492_25778602_1": {"section_id": 809, "quality": 0.9555555555555556, "length": 43}}, "n4659": {"so_25778492_25778602_0": {"section_id": 876, "quality": 0.9565217391304348, "length": 22}, "so_25778492_25778602_1": {"section_id": 879, "quality": 0.9555555555555556, "length": 43}}}, "25778590": {"ParentId": "25778492", "CommentCount": "0", "Body": "<p><a href=\"http://en.cppreference.com/w/cpp/container/deque/erase\" rel=\"nofollow\">Deque erase</a> does not invalidate iterators if applied to the start or end of the collection.\nUnfortunately <a href=\"http://en.cppreference.com/w/cpp/container/deque/push_front\" rel=\"nofollow\">insertions push_back, push_front</a> do. Poor luck.</p>\n", "OwnerUserId": "125562", "PostTypeId": "2", "Id": "25778590", "Score": "0", "CreationDate": "2014-09-11T03:31:24.613", "LastActivityDate": "2014-09-11T03:31:24.613"}});