post_cb({"21266771": {"ParentId": "21266380", "CommentCount": "3", "Body": "<p>It's technically forbidden by the standard.  From C++11 \u00a716.3/4 (emphasis added):</p>\n<blockquote>\n<p id=\"so_21266380_21266771_0\">If the identifier-list in the macro definition does not end with an ellipsis, the number of arguments (including\n  those arguments consisting of no preprocessing tokens) in an invocation of a function-like macro shall equal\n  the number of parameters in the macro definition. <strong>Otherwise, there shall be more arguments in the invocation than there are parameters in the macro definition (excluding the <code>...</code>)</strong>.  There shall exist a <code>)</code> preprocessing\n  token that terminates the invocation.</p>\n</blockquote>\n<p>Some compilers may allow this as an extension, but if you want standards-compliant code, you should make sure to always include at least one argument for the ellipsis parameter of a variadic macro.</p>\n", "OwnerUserId": "9530", "PostTypeId": "2", "Id": "21266771", "Score": "1", "CreationDate": "2014-01-21T18:57:53.370", "LastActivityDate": "2014-01-21T18:57:53.370"}, "bq_ids": {"n4140": {"so_21266380_21266771_0": {"section_id": 514, "quality": 1.0, "length": 39}}, "n3337": {"so_21266380_21266771_0": {"section_id": 505, "quality": 1.0, "length": 39}}, "n4659": {"so_21266380_21266771_0": {"section_id": 535, "quality": 1.0, "length": 39}}}, "21266380": {"CommentCount": "1", "AcceptedAnswerId": "21266771", "PostTypeId": "1", "LastEditorUserId": "1257035", "CreationDate": "2014-01-21T18:34:09.977", "LastActivityDate": "2015-03-30T13:59:15.453", "LastEditDate": "2015-03-30T13:59:15.453", "ViewCount": "1225", "FavoriteCount": "1", "Title": "Is the `gnu-zero-variadic-macro-arguments` safe to ignore?", "Id": "21266380", "Score": "2", "Body": "<p>Consider the following code <a href=\"http://coliru.stacked-crooked.com/a/7924734a01cc9956\" rel=\"nofollow\"><strong>(live example)</strong></a>:</p>\n<pre><code>#define TEST_VA(mX, ...) TEST\n#define STRINGIFY_IMPL(mX) #mX\n#define STRINGIFY(mX) STRINGIFY_IMPL(mX)\n\n#include &lt;iostream&gt;\n\nint main()\n{\n    std::cout &lt;&lt; STRINGIFY(TEST_VA(1)) &lt;&lt; std::endl;\n    std::cout &lt;&lt; STRINGIFY(TEST_VA()) &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>\n<hr>\n<p><strong>clang++ 3.4</strong> complains:</p>\n<pre><code>main.cpp:9:37: warning: must specify at least one argument for '...' parameter of variadic macro [-Wgnu-zero-variadic-macro-arguments]\n    std::cout &lt;&lt; STRINGIFY(TEST_VA(1)) &lt;&lt; std::endl;\n                                    ^\nmain.cpp:1:9: note: macro 'TEST_VA' defined here\n#define TEST_VA(mX, ...) TEST\n        ^\nmain.cpp:10:33: warning: must specify at least one argument for '...' parameter of variadic macro [-Wgnu-zero-variadic-macro-arguments]\n        std::cout &lt;&lt; STRINGIFY(TEST_VA()) &lt;&lt; std::endl;\n                                       ^\nmain.cpp:1:9: note: macro 'TEST_VA' defined here\n#define TEST_VA(mX, ...) TEST\n</code></pre>\n<hr>\n<p>I use some variadic macros like in the example code in my projects. </p>\n<p>Is it safe to pass no arguments for the <code>...</code> parameter of variadic macros? (Ignoring the warning, basically) </p>\n<p>Or could it lead to problems? </p>\n<p>Is it explicitly forbidden by the standard?</p>\n</hr></hr>", "Tags": "<c++><c++11><warnings><c-preprocessor><variadic-macros>", "OwnerUserId": "598696", "AnswerCount": "1"}});