post_cb({"26309415": {"ParentId": "26307679", "CommentCount": "5", "CreationDate": "2014-10-10T23:24:59.657", "OwnerUserId": "15416", "PostTypeId": "2", "Id": "26309415", "Score": "1", "Body": "<p>Reasonable idea. There are a number of compilers which do link-time code generation. Those can see that your function has only one caller, and inline it.</p>\n<p>Then again, since that takes link-time code generation, the <code>inline</code> keyword is not that useful anyway.</p>\n", "LastActivityDate": "2014-10-10T23:24:59.657"}, "26307924": {"ParentId": "26307679", "CommentCount": "1", "CreationDate": "2014-10-10T20:57:01.943", "OwnerUserId": "241536", "PostTypeId": "2", "Id": "26307924", "Score": "0", "Body": "<p>You're probably barking up the wrong tree with <code>inline</code>.  You need to profile your code both with and without <code>inline</code> to know what the effect will truly be.  If I were a gambling man, (and I am), I'd bet that it would <em>not</em> improve performance, and it might make performance worse.</p>\n<p><code>inline</code> tells the compiler that you would <em>like</em> the function call to be substituted inline at the point of the call, but the compiler is free to ignore your request.  Back a number of years ago it was fairly common to employ <code>inline</code> as a performance enhancement -- sometimes it had a beneficial effect, sometimes it didn't.  These days, however, compilers have gotten so good at optimizing code that attempting to outsmart the compiler in this regard is folly.  The compiler is far better than you at optimizing your code.</p>\n<p>Moreover, these days compilers will very aggressively ignore your requestion to inline the function implementation at the call-site.  Most <code>inline</code> requests are ignored.  On today's hardware, this is usualy a good thing considering performance.  Inlining functions can actually hinder performance in ways you might not realize.</p>\n<p>These days, <code>inline</code> is not a performance tool.  Instead, it's something completely different.  From the standard, section 7.1.2/4:</p>\n<blockquote>\n<p id=\"so_26307679_26307924_0\">An inline function shall be defined in every translation unit in which\n  it is odr-used and shall have exactly the same definition in every\n  case (3.2). [ Note: A call to the inline function may be encountered\n  before its definition appears in the translation unit. \u2014end note ] If\n  the definition of a function appears in a translation unit before its\n  first declaration as inline, the program is ill-formed. If a function\n  with external linkage is declared inline in one translation unit, it\n  shall be declared inline in all translation units in which it appears;\n  no diagnostic is required. An inline function with external linkage\n  shall have the same address in all translation units. A static local\n  variable in an extern inline function always refers to the same\n  object. A string literal in the body of an extern inline function is\n  the same object in different translation units. [ Note: A string\n  literal appearing in a default argument is not in the body of an\n  inline function merely because the expression is used in a function\n  call from that inline function. \u2014end note ] A type defined within the\n  body of an extern inline function is the same type in every\n  translation unit.</p>\n</blockquote>\n", "LastActivityDate": "2014-10-10T20:57:01.943"}, "26307891": {"ParentId": "26307679", "CommentCount": "0", "Body": "<p>Inline functions are simple functions that you cant write in another file like example.cpp and include it with the main class files where you have like <code>class name { atributes, methods ..};</code> In front of the function you cand write \"inline\" and the compiler will see as if it's writen inside the class. That is what i know for the oop way. And yea for functions that contains while , foor, do while loops it's recomanded to write outside of the class function not in a inline.It's a matter of coding style.</p>\n", "Id": "26307891", "PostTypeId": "2", "OwnerDisplayName": "user3368555", "Score": "0", "CreationDate": "2014-10-10T20:54:31.410", "LastActivityDate": "2014-10-10T20:54:31.410"}, "26307817": {"ParentId": "26307679", "CommentCount": "4", "CreationDate": "2014-10-10T20:48:44.873", "OwnerUserId": "2388257", "PostTypeId": "2", "Id": "26307817", "Score": "0", "Body": "<p>An inline function <em>(if it is really inlined)</em> would be absolutely the same as if you just copied all the code to a places from where you do call the function. So you may easily imagine how large would be the code.</p>\n<p>Also the <code>inline</code> statement is rather a hint to a compiler that this function would be better to inline into the code where it is called. But depending on circumstances a compiler may decide to not inline it \u2014 if it thinks that this would be better.</p>\n<p>Also you may find useful <a href=\"http://www.parashift.com/c++-faq/inline-and-perf.html\" rel=\"nofollow\">this short faq about an inline functions</a></p>\n", "LastActivityDate": "2014-10-10T20:48:44.873"}, "26307679": {"CommentCount": "1", "AcceptedAnswerId": "26307817", "PostTypeId": "1", "LastEditorUserId": "2320553", "CreationDate": "2014-10-10T20:36:51.727", "LastActivityDate": "2014-10-11T07:31:46.443", "LastEditDate": "2014-10-11T07:31:46.443", "ViewCount": "70", "FavoriteCount": "1", "Title": "Are <function number of lines> and <times function called> considered inverse proportional for inline?", "Id": "26307679", "Score": "3", "Body": "<p>I know <code>inline</code> fits tiny body functions called several times. If the number of calls increases it may result in an extra large code. But what about a large body function called only a few times?  </p>\n<p>I'm interested mainly in <code>inline</code>-ing a large body function that's only called once, in a while loop in <code>main()</code>. This function is in fact the core so it's 90% of the program and as stated, executes once per tick.<br>\nI figure the compiler has no problem in making it <code>inline</code>, as it's like I'd write it myself in the <code>while</code>. Instead, I define it somewhere else and call it in the <code>while</code>.  </br></p>\n<p>EDIT:<br>\nI'm well aware that <code>inline</code> is more of compiler decision than of user, going so far as even to inlining non-specified <code>inline</code> functions, so the user control is almost negligible. But it's a matter of principle plus in this particular case it could serve very well.</br></p>\n", "Tags": "<c++>", "OwnerUserId": "2320553", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_26307679_26307924_0": {"section_id": 5404, "quality": 0.9478260869565217, "length": 109}}, "n3337": {"so_26307679_26307924_0": {"section_id": 5199, "quality": 0.9478260869565217, "length": 109}}, "n4659": {"so_26307679_26307924_0": {"section_id": 6853, "quality": 0.7043478260869566, "length": 81}}}});