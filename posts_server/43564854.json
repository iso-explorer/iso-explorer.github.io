post_cb({"43564854": {"ViewCount": "522", "Body": "<p>Say I have this code:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nint main() \n{\n    std::vector&lt;int&gt; vec {10, 15, 20};\n    auto itr = vec.begin();\n    vec.erase(itr);\n    for(const auto&amp; element : vec)\n    {\n        std::cout &lt;&lt; element &lt;&lt; \" \";\n    }\n    return 0;\n}\n</code></pre>\n<p>This gives me <code>15 20</code> as expected. Now, cppreference says <a href=\"http://en.cppreference.com/w/cpp/container/vector/erase\" rel=\"noreferrer\">this</a> about <code>erase()</code>:</p>\n<blockquote>\n<p id=\"so_43564854_43564854_0\">Invalidates iterators and references at or after the point of the\n  erase, including the end() iterator</p>\n</blockquote>\n<p>Fair enough, but is that the only guarantee the standard gives about <code>vector::erase()</code>?</p>\n<p>Is a vector allowed to reorder it's element after the erased iterator?</p>\n<p>For example, are these conditions guaranteed to hold after the erase which would mean  all elements after the <code>erase()</code> iterator shifted 1 to the left:</p>\n<pre><code>vec[0] == 15\nvec[1] == 20\n</code></pre>\n<p>Or are implementations allowed to move values around as they see fit, and thus, create scenarios where <code>vec[0] == 20</code> etc?</p>\n<p>I would like a quote of the relevant part of the standard.</p>\n", "AcceptedAnswerId": "43565004", "Title": "Guarantees of reordering of a vector", "CreationDate": "2017-04-22T21:32:06.243", "Id": "43564854", "CommentCount": "13", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2017-04-22T21:50:27.470", "LastEditorUserId": "3370124", "LastActivityDate": "2017-04-22T22:40:15.697", "Score": "10", "OwnerUserId": "1870760", "Tags": "<c++><vector><language-lawyer>", "AnswerCount": "3"}, "43565004": {"Id": "43565004", "PostTypeId": "2", "Body": "<p>Let's start at the beginning:</p>\n<blockquote>\n<p id=\"so_43564854_43565004_0\">23.2.3 Sequence containers</p>\n<p id=\"so_43564854_43565004_1\">A sequence container organizes a finite set of objects, all of the same type, into a strictly linear arrangement.\n  The library provides four basic kinds of sequence containers: vector,\n  forward_list, list, and deque.</p>\n</blockquote>\n<p>Emphasis on \"a strictly linear arrangement\". This is unambiguous.</p>\n<p>This definition is followed by a table called \"sequence container requirements\", which describes <code>erase()</code> thusly:</p>\n<blockquote id=\"so_43564854_43565004_2\">\n<pre><code>a.erase(q) [ ... ]\nEffects:  Erases the element pointed to by q\n</code></pre>\n</blockquote>\n<p>Combined, this leaves no wiggle room for interpretation. The elements in a vector are always in \"a strict linear arrangement\", so when one of them is <code>erase()</code>d, there's only one possible outcome.</p>\n", "LastActivityDate": "2017-04-22T21:48:13.693", "CommentCount": "1", "CreationDate": "2017-04-22T21:48:13.693", "ParentId": "43564854", "Score": "13", "OwnerUserId": "3943312"}, "43565133": {"Id": "43565133", "PostTypeId": "2", "Body": "<p>The two statements I found that I think guarantee it would be:</p>\n<p><strong>C++11 Standard</strong></p>\n<blockquote>\n<p id=\"so_43564854_43565133_0\"><strong>23.2.1</strong>\n<strong>11</strong> Unless otherwise specified (either explicitly or by defining a function in terms of other functions), invoking a container member function or passing a container as an argument to a library function shall not invalidate iterators to, or change the values of, objects within that container.</p>\n</blockquote>\n<p>If you can't \"change the values of\" then you can't arbitrarily re-order elements (like swapping the end value with the erased one).</p>\n<blockquote>\n<p id=\"so_43564854_43565133_1\"><strong>23.2.3</strong>\n<strong>12</strong> The iterator returned from a.erase(q) points to the element immediately following q prior to the element being erased. If no such element exists, a.end() is returned.</p>\n</blockquote>\n<p>This implies that the conceptual erasure of an element is implemented by closing the physical gap from the right. Given the previous rule, conceptually closing the gap, can not be seen as <em>conceptually</em> changing their values. This means the only <em>implementation</em> would be to shift the values in order.</p>\n<p><strong>By means of explanation.</strong></p>\n<p>The Standard is dealing with the abstract <em>concept</em> not the actual implementation, although its statements do impact the implementation.</p>\n<p><em>Conceptually</em> erasing an element simply removes it and nothing more. So given the sequence:</p>\n<pre><code>3  5  7  4  2  9 (6 values)\n</code></pre>\n<p>If we erase the 3rd element what does that <em>conceptually</em> give us?</p>\n<pre><code>3  5  4  2  9 (5 values)\n</code></pre>\n<p>This must be true because of the first statement above:</p>\n<blockquote>\n<p id=\"so_43564854_43565133_2\"><strong>23.2.1</strong>\n<strong>11</strong> Unless otherwise specified (either explicitly or by defining a function in terms of other functions), invoking a container member function or passing a container as an argument to a library function shall not invalidate iterators to, or change the values of, objects within that container.</p>\n</blockquote>\n<p>If the <em>implementation</em> reordered the elements, say by swapping the erased element with the end element that rule would be broken because we would end up with this:</p>\n<pre><code>3  5  9  4  2  \n</code></pre>\n<p>Conceptually the resulting value to the right of the erased element has changed from a 4 to a 9, thus breaking the rule.</p>\n", "LastEditorUserId": "3807729", "LastActivityDate": "2017-04-22T22:40:15.697", "Score": "4", "CreationDate": "2017-04-22T22:02:03.233", "ParentId": "43564854", "CommentCount": "8", "OwnerUserId": "3807729", "LastEditDate": "2017-04-22T22:40:15.697"}, "43565048": {"Id": "43565048", "PostTypeId": "2", "Body": "<p>Technically, no, the standard doesn't write out a promise that it won't re-order elements when you least expect.</p>\n<p>Practically, <em>obviously</em> it's not going to do that. That would be ridiculous.</p>\n<p>Legally, you can probably take the \"Effects\" clause:</p>\n<blockquote>\n<p id=\"so_43564854_43565048_0\">Erases the element pointed to by <em>q</em></p>\n</blockquote>\n<p>as having no <em>other</em> effects unless stated elsewhere (e.g. iterator invalidation, which follows from the erasure effect).</p>\n", "LastActivityDate": "2017-04-22T21:52:12.427", "CommentCount": "5", "CreationDate": "2017-04-22T21:52:12.427", "ParentId": "43564854", "Score": "7", "OwnerUserId": "560648"}, "bq_ids": {"n4140": {"so_43564854_43564854_0": {"length": 6, "quality": 0.6666666666666666, "section_id": 988}, "so_43564854_43565133_1": {"length": 16, "quality": 0.8888888888888888, "section_id": 731}, "so_43564854_43565004_2": {"length": 4, "quality": 0.8, "section_id": 723}, "so_43564854_43565133_0": {"length": 25, "quality": 0.9259259259259259, "section_id": 713}, "so_43564854_43565133_2": {"length": 25, "quality": 0.9259259259259259, "section_id": 713}, "so_43564854_43565004_1": {"length": 24, "quality": 0.96, "section_id": 720}}, "n3337": {"so_43564854_43564854_0": {"length": 6, "quality": 0.6666666666666666, "section_id": 973}, "so_43564854_43565133_1": {"length": 16, "quality": 0.8888888888888888, "section_id": 720}, "so_43564854_43565004_2": {"length": 4, "quality": 0.8, "section_id": 712}, "so_43564854_43565133_0": {"length": 25, "quality": 0.9259259259259259, "section_id": 702}, "so_43564854_43565133_2": {"length": 25, "quality": 0.9259259259259259, "section_id": 702}, "so_43564854_43565004_1": {"length": 24, "quality": 0.96, "section_id": 709}}, "n4659": {"so_43564854_43564854_0": {"length": 6, "quality": 0.6666666666666666, "section_id": 1051}, "so_43564854_43565133_1": {"length": 16, "quality": 0.8888888888888888, "section_id": 761}, "so_43564854_43565004_2": {"length": 4, "quality": 0.8, "section_id": 754}, "so_43564854_43565133_0": {"length": 25, "quality": 0.9259259259259259, "section_id": 742}, "so_43564854_43565133_2": {"length": 25, "quality": 0.9259259259259259, "section_id": 742}, "so_43564854_43565004_1": {"length": 24, "quality": 0.96, "section_id": 751}}}});