post_cb({"bq_ids": {"n4140": {"so_24038003_24038003_0": {"length": 8, "quality": 1.0, "section_id": 7109}, "so_24038003_24038178_1": {"length": 8, "quality": 1.0, "section_id": 7109}, "so_24038003_24038003_1": {"length": 25, "quality": 0.9615384615384616, "section_id": 7070}, "so_24038003_24038248_0": {"length": 20, "quality": 0.9090909090909091, "section_id": 7070}}, "n3337": {"so_24038003_24038003_0": {"length": 8, "quality": 1.0, "section_id": 6853}, "so_24038003_24038178_1": {"length": 8, "quality": 1.0, "section_id": 6853}, "so_24038003_24038003_1": {"length": 22, "quality": 0.8461538461538461, "section_id": 6814}, "so_24038003_24038248_0": {"length": 20, "quality": 0.9090909090909091, "section_id": 6814}}, "n4659": {"so_24038003_24038003_0": {"length": 8, "quality": 1.0, "section_id": 8610}, "so_24038003_24038178_1": {"length": 8, "quality": 1.0, "section_id": 8610}, "so_24038003_24038003_1": {"length": 24, "quality": 0.9230769230769231, "section_id": 8567}, "so_24038003_24038248_0": {"length": 20, "quality": 0.9090909090909091, "section_id": 8570}}}, "24038178": {"Id": "24038178", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_24038003_24038178_0\">This implies that static const int a=7; does not belong to the scope\n  of static int b;. Hence the static const int a=7 cannot be found in\n  the int A::C::b=a;.</p>\n</blockquote>\n<p>No. It implies exactly what you can read there: The potential scope of a name declared in a class <strong>also</strong> contains function bodies etc. of non-static data members. That does not conflict with the quote above that - the declarative region (and the scope) of a static data member still contains the scope of the class it was declared in itself.</p>\n<p>You quoted the relevant part yourself:</p>\n<blockquote>\n<p id=\"so_24038003_24038178_1\">names following the qualified-id are looked up in the scope of the\n  member\u2019s class or namespace</p>\n</blockquote>\n<p>Therefore, since in this code-snippet</p>\n<pre><code>int A::C::b=a;\n</code></pre>\n<p><code>a</code> is used after the declarator-id, it is looked up in the class and found.</p>\n", "LastActivityDate": "2014-06-04T13:00:05.533", "CommentCount": "0", "CreationDate": "2014-06-04T13:00:05.533", "ParentId": "24038003", "Score": "2", "OwnerUserId": "3647361"}, "24038248": {"Id": "24038248", "PostTypeId": "2", "Body": "<p>The rule you quoted (item 1 of 3.3.7p1) is intended for names used within a class:</p>\n<pre><code>namespace A\n{\n    class C\n    {\n    public:\n        int b = a;\n        static const int a=7;\n    };\n}\n</code></pre>\n<p>The rule that permits the code you listed is item 5 of that same paragraph:</p>\n<blockquote>\n<p id=\"so_24038003_24038248_0\">5) The potential scope of a declaration that extends to or past the end of a class definition also extends to the regions de\ufb01ned by its member definitions, even if the members are defined lexically outside the class [...]</p>\n</blockquote>\n<p>There is clearly some overlap between the applicability items 1 and 5 of 3.3.7p1, but that doesn't matter, as they have the same effect where they do overlap.</p>\n<p>3.4.3p3 is saying the same as 3.3.7p1 item 5, just with different wording; it clarifies that the type appearing before the <em>qualified-id</em> is not part of the \"<em>region defined by [the] member definition</em>\".</p>\n", "LastEditorUserId": "567292", "LastActivityDate": "2014-06-04T13:16:45.090", "Score": "0", "CreationDate": "2014-06-04T13:03:03.950", "ParentId": "24038003", "CommentCount": "0", "OwnerUserId": "567292", "LastEditDate": "2014-06-04T13:16:45.090"}, "24038003": {"ViewCount": "56", "Body": "<p>I'm trying to understand what does the following quote mean (3.4.3/3 N3797):</p>\n<blockquote>\n<p id=\"so_24038003_24038003_0\">names following the qualified-id are looked up in the scope of the\n  member\u2019s class or namespace.</p>\n</blockquote>\n<pre><code>namespace A\n{\n    class C\n    {\n    public:\n        static const int a=7;\n        static int b;\n    };\n}\n\nint A::C::b=a; //7\n</code></pre>\n<p>The scope of the <code>static int b;</code> consist <strong>only</strong> of the declarative region following by the <code>b</code>'s point of declaration. Actually:</p>\n<blockquote>\n<p id=\"so_24038003_24038003_1\">The potential scope of a name declared in a class consists not only of\n  the declarative region following the name\u2019s point of declaration, but\n  also of all function bodies, default arguments,\n  exception-specifications, and brace-or-equal-initializers of\n  <strong>non-static data members in that class</strong></p>\n</blockquote>\n<p>This implies that <code>static const int a=7;</code> does not belong to the scope of <code>static int b;</code>. Hence the <code>static const int a=7</code> cannot be found in the <code>int A::C::b=a;</code>. </p>\n<p>It is a typo in the Standard or it is my misunderstanding?</p>\n", "Title": "The name lookup followed after qualified declarator-id", "CreationDate": "2014-06-04T12:52:16.170", "LastActivityDate": "2014-06-04T13:16:45.090", "CommentCount": "2", "PostTypeId": "1", "OwnerDisplayName": "user2953119", "Id": "24038003", "Score": "2", "Tags": "<c++><static-members><qualified-name>", "AnswerCount": "3"}, "24038174": {"Id": "24038174", "PostTypeId": "2", "Body": "<p>The quote says \"the scope of the member's <strong>class</strong>\", not \"the scope of the member\"; so <code>a</code> is looked up in the class scope of <code>C</code>.  It can be found there whether or not it's declared after <code>b</code>.</p>\n", "LastActivityDate": "2014-06-04T12:59:54.650", "CommentCount": "1", "CreationDate": "2014-06-04T12:59:54.650", "ParentId": "24038003", "Score": "0", "OwnerUserId": "204847"}});