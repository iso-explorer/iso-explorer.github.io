post_cb({"bq_ids": {"n4140": {"so_29865093_29865685_0": {"length": 15, "quality": 0.9375, "section_id": 79}}, "n3337": {"so_29865093_29865685_0": {"length": 15, "quality": 0.9375, "section_id": 74}}, "n4659": {"so_29865093_29865685_0": {"length": 15, "quality": 0.9375, "section_id": 81}}}, "29865093": {"ViewCount": "70", "Body": "<p>I created this <code>struct</code> for some easy templated Math definitions:</p>\n<pre><code>template&lt;class T = float&gt; struct Math{\n    static constexpr T PI = T(3.14159265359);\n    static constexpr T E = T(2.718281828459);\n    static constexpr T INF = std::numeric_limits&lt;T&gt;::infinity();\n};\n</code></pre>\n<p>I would like to use it like this:</p>\n<pre><code>float pi = Math::PI;\n</code></pre>\n<p>Even if the default argument <code>T</code> is <code>float</code> Ill get the error:</p>\n<pre><code>'template&lt;class T&gt; struct Math' used without template parameters\n</code></pre>\n<p>If I use <code>Math&lt;&gt;::PI</code> it works. Is this a compiler bug or are the <code>&lt;&gt;</code> brackets mandatory?</p>\n", "AcceptedAnswerId": "29865348", "Title": "C++: Default template argument only deduced when using \"<>\"", "CreationDate": "2015-04-25T12:22:05.810", "Id": "29865093", "CommentCount": "1", "PostTypeId": "1", "LastActivityDate": "2015-04-26T22:12:52.283", "Score": "-1", "OwnerUserId": "1157045", "Tags": "<c++><templates><c++11>", "AnswerCount": "3"}, "29865348": {"Id": "29865348", "PostTypeId": "2", "Body": "<p>Yes the <code>&lt;&gt;</code> brackets are mandatory (see <a href=\"https://stackoverflow.com/questions/6812389/avoiding-brackets-for-class-template-having-default-parameter\">here</a>).  </p>\n<p>But here are some other options:</p>\n<p>use a typedef</p>\n<pre><code>typedef Math&lt;&gt; MyDefaultMath\n// or\ntypedef Math&lt;float&gt; MyFloatMath\n</code></pre>\n<p>or just drop the template</p>\n<pre><code>struct Math\n{\n    static constexpr float PI = 3.14159265359f;\n    // ...\n</code></pre>\n", "LastEditorUserId": "-1", "LastActivityDate": "2015-04-26T22:12:52.283", "Score": "1", "CreationDate": "2015-04-25T12:46:32.930", "ParentId": "29865093", "CommentCount": "0", "OwnerUserId": "2682312", "LastEditDate": "2017-05-23T11:51:03.993"}, "29865378": {"Id": "29865378", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_29865093_29865378_0\">Is this a compiler bug or are the &lt;&gt; brackets mandatory?</p>\n</blockquote>\n<p>No, it's not a bug they are mandatory.</p>\n<p>However, you may want to give this a little more thought. What if someone uses <code>Math&lt;int&gt;</code>? For example the documentation of <a href=\"http://en.cppreference.com/w/cpp/types/numeric_limits/infinity\" rel=\"nofollow\"><code>std::numeric_limits::infinity</code></a> states the following:</p>\n<blockquote>\n<p id=\"so_29865093_29865378_1\">Only meaningful if std::numeric_limits::has_infinity == true</p>\n</blockquote>\n", "LastActivityDate": "2015-04-25T12:49:16.153", "CommentCount": "1", "CreationDate": "2015-04-25T12:49:16.153", "ParentId": "29865093", "Score": "1", "OwnerUserId": "4505712"}, "29865685": {"Id": "29865685", "PostTypeId": "2", "Body": "<p>The empty brackets are mandatory and required by the standard. From [temp.arg], emphasis mine:</p>\n<blockquote>\n<p id=\"so_29865093_29865685_0\">When template argument packs or default template-arguments are used, a template-argument list can be\n  empty. In that case the empty <code>&lt;&gt;</code> brackets <strong>shall still be used</strong> as the template-argument-list. <em>[ Example:</em></p>\n<pre><code>template&lt;class T = char&gt; class String;\nString&lt;&gt;* p; // OK: String&lt;char&gt;\nString* q; // syntax error\n\ntemplate&lt;class ... Elements&gt; class Tuple;\nTuple&lt;&gt;* t; // OK: Elements is empty\nTuple* u; // syntax error\n</code></pre>\n<p id=\"so_29865093_29865685_1\"><em>\u2014end example ]</em></p>\n</blockquote>\n", "LastActivityDate": "2015-04-25T13:16:45.970", "CommentCount": "0", "CreationDate": "2015-04-25T13:16:45.970", "ParentId": "29865093", "Score": "1", "OwnerUserId": "2069064"}});