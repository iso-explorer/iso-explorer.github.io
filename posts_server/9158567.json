post_cb({"9158567": {"ViewCount": "2016", "Body": "<p>What part of the C++ spec, or the IEEE float spec, states that a NaN value should convert to <code>true</code> as opposed to false?</p>\n<p>If I look at the C++ standard section <em>4.12 Boolean Conversions</em> it says:</p>\n<blockquote>\n<p id=\"so_9158567_9158567_0\">A zero value, null pointer value, or null member pointer value is\n  converted to false; any other value is converted to true.</p>\n</blockquote>\n<p>Now IEEE floats say that NaN compares false to any other value. So whether NaN is true or false depends on how you do your comparision (below). Thus I presume there must be an explicit mention.</p>\n<pre><code>value == 0 ? false : true\nvalue != 0 ? true : false\n</code></pre>\n<p>Now, what about conversion to an integer. The short program below shows that a variable NAN converted to an integer results in the minimum integer, whereas a constant gets converted to 0 (using GCC). This seems odd.</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;cmath&gt;\n\nvoid write( double r, int i, bool b )\n{\n    std::cout &lt;&lt; r &lt;&lt; \" == \" &lt;&lt;  i &lt;&lt; \" == \" &lt;&lt; (b ? \"True\" : \"False\") &lt;&lt; std::endl;\n}\n\nint main()\n{\n    double value = NAN;\n    write( value, value, value );\n    write( NAN, NAN, NAN );\n}\n</code></pre>\n<p>Output:</p>\n<pre><code>nan == -2147483648 == True\nnan == 0 == True\n</code></pre>\n<p>The conversion of a NaN to zero but bool conversion as True seems troubling. I also not that something like MatLab will convert a NaN to 0 using a function like <code>int16</code>.</p>\n<p>So, what are the specifics of the relevant standards that state how NaN converts to boolean and integer values?</p>\n<p><em>I'm tagging C as well, since while it may not define the boolean conversion, it probably defines an integral conversion and use in a conditional and I suspect C++ will follow the same rules</em></p>\n", "AcceptedAnswerId": "9159641", "Title": "NaN to Bool conversion: True or False?", "CreationDate": "2012-02-06T10:15:12.550", "Id": "9158567", "CommentCount": "5", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2012-02-06T12:54:01.197", "Score": "17", "OwnerUserId": "229686", "Tags": "<c++><c><language-lawyer>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_9158567_9158567_0": {"length": 15, "quality": 1.0, "section_id": 44}, "so_9158567_9159641_1": {"length": 26, "quality": 0.7647058823529411, "section_id": 37}, "so_9158567_9159641_3": {"length": 15, "quality": 0.8823529411764706, "section_id": 44}}, "n3337": {"so_9158567_9159641_3": {"length": 15, "quality": 0.8823529411764706, "section_id": 41}, "so_9158567_9159641_1": {"length": 26, "quality": 0.7647058823529411, "section_id": 34}, "so_9158567_9158567_0": {"length": 15, "quality": 1.0, "section_id": 41}}, "n4659": {"so_9158567_9159641_3": {"length": 15, "quality": 0.8823529411764706, "section_id": 45}, "so_9158567_9159641_1": {"length": 24, "quality": 0.7058823529411765, "section_id": 37}, "so_9158567_9158567_0": {"length": 15, "quality": 1.0, "section_id": 45}}}, "9159641": {"Id": "9159641", "PostTypeId": "2", "Body": "<p>In both C and C++, the behaviour is undefined when converting <code>NAN</code> to an integer type (other than <code>bool</code>):</p>\n<blockquote>\n<p id=\"so_9158567_9159641_0\">C99 6.3.1.4/1: When a finite value of real floating type is converted to an integer type other than <code>_Bool</code>, the fractional part is discarded (i.e., the value is truncated toward zero). If the value of the integral part cannot be represented by the integer type, <strong>the behavior is undefined</strong>.</p>\n<p id=\"so_9158567_9159641_1\">C++11 4.9/1: A prvalue of a floating point type can be converted to a prvalue of an integer type. The conversion truncates; that is, the fractional part is discarded. <strong>The behavior is undefined</strong> if the truncated value cannot be represented in the destination type. [ <em>Note:</em> If the destination type is <code>bool</code>, see 4.12. <em>\u2014end note</em> ]</p>\n</blockquote>\n<p>In both languages, converting <code>NAN</code> to <code>bool</code> (or <code>_Bool</code>) gives <code>true</code> (or <code>1</code>):</p>\n<blockquote>\n<p id=\"so_9158567_9159641_2\">C99 6.3.1.2/1: When any scalar value is converted to <code>_Bool</code>, the result is 0 if the value compares equal to 0; otherwise, the result is 1.</p>\n<p id=\"so_9158567_9159641_3\">C++11 4.12/1: A zero value, null pointer value, or null member pointer value is converted to <code>false</code>; any other value is converted to <code>true</code>.</p>\n</blockquote>\n<p><code>NAN</code> is not a zero value, and doesn't compare equal to zero.</p>\n", "LastEditorUserId": "204847", "LastActivityDate": "2012-02-06T12:54:01.197", "Score": "19", "CreationDate": "2012-02-06T11:49:33.243", "ParentId": "9158567", "CommentCount": "1", "OwnerUserId": "204847", "LastEditDate": "2012-02-06T12:54:01.197"}});