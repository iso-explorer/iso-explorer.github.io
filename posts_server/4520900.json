post_cb({"4520916": {"Id": "4520916", "PostTypeId": "2", "Body": "<p>It means the function will not modify any member variables. To be more precise, it means the function cannot alter any non-static or immutable member variables of that class</p>\n", "LastEditorUserId": "369957", "LastActivityDate": "2010-12-23T17:28:12.247", "Score": "3", "CreationDate": "2010-12-23T17:09:39.610", "ParentId": "4520900", "CommentCount": "3", "OwnerUserId": "369957", "LastEditDate": "2010-12-23T17:28:12.247"}, "4520900": {"ViewCount": "594", "Body": "<blockquote>\n<p id=\"so_4520900_4520900_0\"><strong>Possible Duplicate:</strong><br>\n<a href=\"https://stackoverflow.com/questions/4059932/what-is-the-meaning-of-a-const-at-end-of-a-member-function\">What is the meaning of a const at end of a member function?</a> </br></p>\n</blockquote>\n<p>I have seen some classes that have something like this.  </p>\n<pre><code>void something() const;\n</code></pre>\n<p>What does <code>const</code> means?</p>\n", "AcceptedAnswerId": "4520950", "Title": "What does the `const` keyword do when it is after a function?", "CreationDate": "2010-12-23T17:07:49.487", "Id": "4520900", "CommentCount": "7", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2017-05-23T11:44:43.567", "LastEditorUserId": "-1", "LastActivityDate": "2010-12-23T18:48:35.817", "ClosedDate": "2010-12-23T18:53:20.560", "Score": "2", "OwnerUserId": "401995", "Tags": "<c++><winapi><visual-c++><class-design>", "AnswerCount": "5"}, "4521571": {"Id": "4521571", "PostTypeId": "2", "Body": "<p>To be absolutely precise - it makes the implicit <code>this</code> pointer in the function a pointer to a <code>const</code> object.</p>\n<p>From 9.2.1 \"The this pointer\"\"</p>\n<blockquote>\n<p id=\"so_4520900_4521571_0\">The type of <code>this</code> in a member function of a <code>class X</code> is <code>X*</code>. If the member function is declared <code>const</code>, the type of this is <code>const X*</code>, if the member function is declared <code>volatile</code>, the type of this is <code>volatile X*</code>, and if the member function is declared <code>const volatile</code>, the type of this is <code>const volatile X*</code>.</p>\n</blockquote>\n<p>All the other behaviors (that you can't modify the object members, that you can call the function using a <code>const</code> object, etc) fall from that.</p>\n", "LastActivityDate": "2010-12-23T18:48:35.817", "CommentCount": "0", "CreationDate": "2010-12-23T18:48:35.817", "ParentId": "4520900", "Score": "1", "OwnerUserId": "12711"}, "bq_ids": {"n4140": {"so_4520900_4521571_0": {"length": 24, "quality": 0.96, "section_id": 5895}}, "n3337": {"so_4520900_4521571_0": {"length": 24, "quality": 0.96, "section_id": 5666}}, "n4659": {"so_4520900_4521571_0": {"length": 24, "quality": 0.96, "section_id": 7378}}}, "4520928": {"Id": "4520928", "PostTypeId": "2", "Body": "<p>It means that <code>something</code> may not modify member variables of the class. \nThe exception to the rule is if there are member variables declared with the <code>mutable</code> keyword. </p>\n<p>For example, suppose you have a <code>std::map&lt; int, int &gt; var</code> member variable and a method that does the following:</p>\n<pre><code>int Class::method () const {\n    if (var.find (42) != var.end ()) {\n        return var[42];\n    }\n    return 0;\n}\n</code></pre>\n<p>That will not compile since <code>var[42]</code> modifies <code>var</code> if 42 is not in the container. Declaring <code>var</code> as <code>mutable</code> allows you to pass compilation.</p>\n", "LastEditorUserId": "128138", "LastActivityDate": "2010-12-23T17:30:04.727", "Score": "4", "CreationDate": "2010-12-23T17:11:00.297", "ParentId": "4520900", "CommentCount": "2", "OwnerUserId": "128138", "LastEditDate": "2010-12-23T17:30:04.727"}, "4520950": {"Id": "4520950", "PostTypeId": "2", "Body": "<p>In addition to what SRM said (that the function cannot alter any members of the class (which is not exactly true, e.g. in the case of <code>mutable</code> members, which still can be altered)), it means that you can call this member function on things that are <code>const</code>. So if you get a <code>Foo const&amp; foo</code> as a parameter, you can only call members that are declared <code>const</code> like in your question.</p>\n", "LastActivityDate": "2010-12-23T17:13:08.003", "CommentCount": "1", "CreationDate": "2010-12-23T17:13:08.003", "ParentId": "4520900", "Score": "5", "OwnerUserId": "524436"}, "4521565": {"Id": "4521565", "PostTypeId": "2", "Body": "<p>it declares that this function can not change any data. Makes it a Read Only Function.</p>\n", "LastActivityDate": "2010-12-23T18:48:18.763", "CommentCount": "0", "CreationDate": "2010-12-23T18:48:18.763", "ParentId": "4520900", "Score": "0", "OwnerUserId": "434407"}});