post_cb({"bq_ids": {"n4140": {"so_21697982_21698697_0": {"length": 30, "quality": 0.8571428571428571, "section_id": 739}}, "n3337": {"so_21697982_21698697_0": {"length": 30, "quality": 0.8571428571428571, "section_id": 728}}, "n4659": {"so_21697982_21698697_0": {"length": 30, "quality": 0.8571428571428571, "section_id": 797}}}, "21698209": {"Id": "21698209", "PostTypeId": "2", "Body": "<p>Here <a href=\"https://stackoverflow.com/questions/1102392/stl-maps-with-user-defined-objects/1102720#1102720\">std::maps with user-defined types as key</a>\nyou have a way to specialize std::map with a comparator function for your custom class. </p>\n<p>Probably the interviewer was unhappy because == cannot provide a log(N) time method to access the \nvalues of the map. In fact you have to check the whole set of keys for equal keys if you only \nare provided with equality. The map cannot work with equality only. </p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2014-02-11T09:44:29.797", "Score": "1", "CreationDate": "2014-02-11T09:44:29.797", "ParentId": "21697982", "CommentCount": "2", "OwnerUserId": "512225", "LastEditDate": "2017-05-23T12:22:11.833"}, "21698697": {"Id": "21698697", "PostTypeId": "2", "Body": "<p><code>std::map</code>s require a less-than (or equivalent; <code>less&lt;key_type&gt;</code> is the default, per table 102), comparison for key types.</p>\n<blockquote>\n<p id=\"so_21697982_21698697_0\"><code>[C++11: 23.2.4/3]:</code> The phrase \u201cequivalence of keys\u201d means the equivalence relation imposed by the comparison and <em>not</em> the <code>operator==</code> on keys. That is, two keys <code>k1</code> and <code>k2</code> are considered to be equivalent if for the comparison object <code>comp, comp(k1, k2) == false &amp;&amp; comp(k2, k1) == false</code>. For any two keys <code>k1</code> and <code>k2</code> in the same container, calling <code>comp(k1, k2)</code> shall always return the same value.</p>\n</blockquote>\n<p>So you can provide a comparator function that is not <code>less&lt;key_type&gt;</code>, to avoid <code>operator&lt;</code> being called, but the end result as defined above must be the same. <code>operator==</code> is entirely irrelevant.</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;map&gt;\n\n/**\n * A comparator that defines strict-weak ordering,\n * but is backwards!\n */\nstruct Comp\n{\n   bool operator()(const int&amp; lhs, const int&amp; rhs)\n   { return rhs &lt; lhs; }\n};\n\nint main()\n{\n   {\n      std::map&lt;int, char&gt; m;        // uses default less&lt;int&gt; comparator\n      m[0] = 'a';\n      m[1] = 'b';\n      m[2] = 'c';\n\n      for (auto el : m)\n         std::cout &lt;&lt; el.second;    // \"abc\"\n   }\n   {\n      std::map&lt;int, char, Comp&gt; m;  // uses my own comparator defined above\n      m[0] = 'a';\n      m[1] = 'b';\n      m[2] = 'c';\n\n      for (auto el : m)\n         std::cout &lt;&lt; el.second;    // \"cba\"  ... which is true ;)\n   }\n}\n</code></pre>\n<h3><a href=\"http://coliru.stacked-crooked.com/a/432b97170b6b8f07\" rel=\"nofollow\">Live demo</a></h3>\n", "LastEditorUserId": "560648", "LastActivityDate": "2014-02-11T10:14:19.593", "Score": "4", "CreationDate": "2014-02-11T10:06:27.017", "ParentId": "21697982", "CommentCount": "0", "OwnerUserId": "560648", "LastEditDate": "2014-02-11T10:14:19.593"}, "21697982": {"ViewCount": "125", "Body": "<p>Recently I was asked a question how to make a custom type as possible key for a stl::map. </p>\n<p>Straight forward I answered them to overload the \"&lt;\" operator function inorder to support custom type. Here is the link     \"<a href=\"https://stackoverflow.com/questions/11317538/stdmap-custom-key-type-with-sorting-only-on-one-variable\">custom type</a> link\"</p>\n<p>When they asked me in which other ways this problem can be solved. I just hinted we might do it by overloading\"==\" operator also. But he was not happy with the answer.</p>\n<p>Please help me to know, if there are any other ways to solve this problem \"to make a custom type as a possible key for a map\".</p>\n", "Title": "What are the possible ways to make a custom type as a possible key for a map", "CreationDate": "2014-02-11T09:34:25.600", "LastActivityDate": "2014-02-11T10:14:19.593", "CommentCount": "0", "LastEditDate": "2017-05-23T12:28:33.730", "PostTypeId": "1", "OwnerDisplayName": "user1360764", "LastEditorUserId": "-1", "Id": "21697982", "ClosedDate": "2014-02-11T17:27:36.967", "Score": "4", "Tags": "<c++><map><stlmap>", "AnswerCount": "2"}});