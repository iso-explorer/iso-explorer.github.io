post_cb({"bq_ids": {"n4140": {"so_15701123_15701171_0": {"length": 30, "quality": 0.9090909090909091, "section_id": 739}}, "n3337": {"so_15701123_15701171_0": {"length": 30, "quality": 0.9090909090909091, "section_id": 728}}, "n4659": {"so_15701123_15701171_0": {"length": 30, "quality": 0.9090909090909091, "section_id": 797}}}, "15701123": {"ViewCount": "281", "Body": "<p>I know that it's a terrible idea to change the key of an object in an associative container, but I wonder where exactly the standard forbids me to do so. Consider:</p>\n<pre><code>#include &lt;map&gt;\n#include &lt;memory&gt;\n\nstruct X { int i; };\n\nstruct lt\n{\n  bool operator()( const std::shared_ptr&lt; X &gt;&amp; lhs,\n                   const std::shared_ptr&lt; X &gt;&amp; rhs ) const\n  {\n    return lhs-&gt;i &lt; rhs-&gt;i;\n  }\n};\n\nint main()\n{\n  std::map&lt; std::shared_ptr&lt; X &gt;, int, lt &gt; m;\n  auto x = std::make_shared&lt; X &gt;();\n  x-&gt;i = 1;\n  m.insert( std::make_pair( x, 2 ) );\n\n  x-&gt;i = 42; // change key wrt the container!\n}\n</code></pre>\n<p>I assume that the above <em>should</em> be illegal, but I was reading the standard for some time now and I can't find anything that actually <em>makes</em> it illegal. Where is it? Or is it hiding in a future defect report?</p>\n", "AcceptedAnswerId": "15701171", "Title": "Why not modify key of associative container?", "CreationDate": "2013-03-29T10:05:52.113", "Id": "15701123", "CommentCount": "5", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2013-03-29T10:14:03.717", "Score": "8", "OwnerUserId": "2073257", "Tags": "<c++><c++11><std><language-lawyer>", "AnswerCount": "1"}, "15701171": {"Id": "15701171", "PostTypeId": "2", "Body": "<p>This injects Undefined Behavior in your program if you modify the values in a way that the comparison of any two keys is different after the change according to the comparator you specified.</p>\n<p>Per Paragraph 23.2.4/3 of the C++11 Standard ([associative.reqmts]):</p>\n<blockquote>\n<p id=\"so_15701123_15701171_0\">The phrase \u201cequivalence of keys\u201d means the equivalence relation imposed by the comparison and not the\n  <code>operator==</code> on keys. That is, two keys <code>k1</code> and <code>k2</code> are considered to be equivalent if for the comparison\n  object <code>comp</code>, <code>comp(k1, k2) == false &amp;&amp; comp(k2, k1) == false</code>. <strong>For any two keys <code>k1</code> and <code>k2</code> in the\n  same container, calling <code>comp(k1, k2)</code> shall always return the same value.</strong></p>\n</blockquote>\n", "LastEditorUserId": "1932150", "LastActivityDate": "2013-03-29T10:14:03.717", "Score": "9", "CreationDate": "2013-03-29T10:08:58.753", "ParentId": "15701123", "CommentCount": "5", "OwnerUserId": "1932150", "LastEditDate": "2013-03-29T10:14:03.717"}});