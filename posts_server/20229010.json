post_cb({"20229637": {"LastActivityDate": "2014-08-29T15:26:42.030", "CommentCount": "0", "Body": "<p>This is perfectly valid <em>C++11</em> code if we look at the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3485.pdf\" rel=\"nofollow\">draft C++ standard</a> section <code>6.6.3</code> <em>The return statement</em> paragraph <em>2</em> says:</p>\n<blockquote>\n<p id=\"so_20229010_20229637_0\">A return statement with a braced-init-list initializes the object\n  or reference to be returned from the function by copy-list-initialization (8.5.4) from the specified initializer list.</p>\n</blockquote>\n<p>and it provides the following example:</p>\n<pre><code>[ Example:\n  std::pair&lt;std::string,int&gt; f(const char* p, int x) {\n   return {p,x};\n }\n\u2014end example ]\n</code></pre>\n<p>we can see from a <a href=\"http://coliru.stacked-crooked.com/a/735ddc77be9dc777\" rel=\"nofollow\">a live example</a> that it works but it will not work pre- <em>C++11</em> as we can see from this <a href=\"http://coliru.stacked-crooked.com/a/f34580798118679c\" rel=\"nofollow\">live example</a>.</p>\n<p>If you are using <code>gcc</code> or <code>clang</code> and you can not use <em>C++11</em> for some reason you have the option of using <a href=\"http://gcc.gnu.org/onlinedocs/gcc/Compound-Literals.html\" rel=\"nofollow\">compound literals</a> as an extension in <em>C++</em> even though it is a <em>C99</em> feature and as we can see from this <a href=\"http://coliru.stacked-crooked.com/a/e0a9343b5d17e41b\" rel=\"nofollow\">live example</a> <code>gcc</code> warns:</p>\n<blockquote>\n<p id=\"so_20229010_20229637_1\">warning: ISO C++ forbids compound-literals [-Wpedantic]</p>\n</blockquote>\n<p>Another option is to add constructors to your struct:</p>\n<pre><code>struct myStruct\n{\n    int i; int j;\n    myStruct() : i(0), j(0) {} ;    \n    myStruct(int x, int y) : i(x), j(y) {} ;\n};\n\nmyStruct myFunction(int myArg){\n    switch (myArg) {\n    case 0: return myStruct(1,2) ;\n    case 1: return myStruct(2,3) ;\n    default: return myStruct(4,5) ;\n    }\n}\n</code></pre>\n", "CreationDate": "2013-11-26T22:48:19.513", "LastEditDate": "2014-08-29T15:26:42.030", "ParentId": "20229010", "Id": "20229637", "LastEditorUserId": "1708801", "PostTypeId": "2", "Score": "1", "OwnerUserId": "1708801"}, "20229114": {"CommentCount": "4", "Body": "<p>Have you considered adding a constructor?</p>\n<pre><code>struct myStruct\n{\n    int i;\n    int j;\n    myStruct(int x, int y) {i = x; j = y;}\n    myStruct() {} // still want this, otherwise \"myStruct x;\" won't compile\n};\nmyStruct myFunction(int myArg){\n    switch (myArg) {\n    case 0: return myStruct(1,2);\n    case 1: return myStruct(2,3);\n    default: return myStruct(4,5);\n    }\n}\n</code></pre>\n", "CreationDate": "2013-11-26T22:15:22.530", "ParentId": "20229010", "Id": "20229114", "LastActivityDate": "2013-11-26T22:15:22.530", "PostTypeId": "2", "Score": "0", "OwnerUserId": "1537403"}, "20229010": {"CreationDate": "2013-11-26T22:09:08.153", "ViewCount": "412", "Id": "20229010", "AcceptedAnswerId": "20229637", "Score": "4", "Title": "Can I use an aggregate initializer to return a struct in C++?", "CommentCount": "6", "Body": "<p>I have a function returning a named struct consisting of two ints, as follows:</p>\n<pre><code>struct myStruct {int i; int j;};\n\nmyStruct myFunction(int myArg){\n    switch (myArg) {\n    case 0: return {1,2};\n    case 1: return {2,3};\n    default: return {4,5};\n    }\n}\n</code></pre>\n<p>I want to be able to return the appropriately initialised struct from my switch statement.\nI can do this by declaring a named struct and initialising it, then returning the named struct,\nbut it would be cleaner if I could have the compiler created anonymous structs for me as in my example above - which does not compile.\nCan this be made to work (legitimately)? Or what is the cleanest way to achieve my goal?</p>\n", "Tags": "<c++><struct><return><anonymous>", "LastActivityDate": "2014-08-29T15:26:42.030", "PostTypeId": "1", "AnswerCount": "2", "OwnerUserId": "1531175"}, "bq_ids": {"n4140": {"so_20229010_20229637_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 3913}}, "n3337": {"so_20229010_20229637_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 3773}}}});