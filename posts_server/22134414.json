post_cb({"22134414": {"CommentCount": "1", "ViewCount": "353", "CreationDate": "2014-03-02T22:22:54.440", "LastActivityDate": "2014-03-03T17:36:56.203", "Title": "Show reason for deprecation in Clang", "AcceptedAnswerId": "22137806", "PostTypeId": "1", "Id": "22134414", "Score": "1", "Body": "<p>In C++14, <code>[[deprecated]]</code> can be used to mark functions as deprecated. They work just as you expect in clang; using a function marked as deprecated induces a compiler warning.</p>\n<p>However, given that you can add a reason for deprecation, <code>[[deprecated(\"reason\")]]</code>, I originally expected the compiler to show the reason of deprecation. Compiled with <code>clang++ -std=c++1y foo.cpp</code>, the code,</p>\n<pre><code>[[deprecated(\"Avoid at all cost!\")]]\nvoid foo() { }\n\nint main(void)\n{\n  foo();\n}\n</code></pre>\n<p>outputs,</p>\n<pre><code>test.cpp:6:3: warning: 'foo' is deprecated [-Wdeprecated-declarations]\n  foo();\n  ^\ntest.cpp:2:6: note: 'foo' declared here\nvoid foo() { }\n     ^\n1 warning generated.\n</code></pre>\n<p>without specifying the reason. Is there a way to get it to do that?</p>\n<p>The only way I have found to do that by including the attribute on the same line as the function header. What I'm looking for is a specific flag that would give the reason for deprecation with the warning.</p>\n<p>The code,</p>\n<pre><code>[[deprecated(\"Avoid at all cost!\")]] void foo() { }\n\nint main(void)\n{\n  foo();\n}\n</code></pre>\n<p>produces,</p>\n<pre><code>test.cpp:5:3: warning: 'foo' is deprecated [-Wdeprecated-declarations]\n  foo();\n  ^\ntest.cpp:1:43: note: 'foo' declared here\n[[deprecated(\"Avoid at all cost!\")]] void foo() { }\n                                      ^\n1 warning generated.\n</code></pre>\n<p>which is sort of what I want.</p>\n", "Tags": "<warnings><deprecated><clang++><c++14>", "OwnerUserId": "3247148", "AnswerCount": "2"}, "22137806": {"ParentId": "22134414", "LastEditDate": "2017-05-23T11:49:45.250", "CommentCount": "1", "CreationDate": "2014-03-03T02:45:52.657", "Score": "1", "LastEditorUserId": "-1", "PostTypeId": "2", "Id": "22137806", "OwnerUserId": "923854", "Body": "<p>The deprecated attribute is described in N3797 [dcl.attr.deprecated]. The section is short, so I'll include it entire:</p>\n<blockquote>\n<h3>7.6.5 Deprecated attribute [dcl.attr.deprecated]</h3>\n<ol>\n<li><p id=\"so_22134414_22137806_0\">The <em>attribute-token</em> <code>deprecated</code> can be used to mark names and entities whose use is still allowed, but is discouraged for some reason. [ <em>Note:</em> in particular, <code>deprecated</code> is appropriate for names and entities that are deemed obsolescent or unsafe. <em>\u2014end note</em> ] It shall appear at most once in each <em>attribute-list</em>. An <em>attribute-argument-clause</em> may be present and, if present, it shall have the form:</p>\n<p id=\"so_22134414_22137806_1\"><code>(</code> <em>string-literal</em> <code>)</code></p>\n<p id=\"so_22134414_22137806_2\">[ <em>Note:</em> the <em>string-literal</em> in the <em>attribute-argument-clause</em> could be used to explain the rationale for deprecation and/or to suggest a replacing entity. <em>\u2014end note</em> ]</p></li>\n<li><p id=\"so_22134414_22137806_3\">The attribute may be applied to the declaration of a class, a <em>typedef-name</em>, a variable, a non-static data member, a function, an enumeration, or a template specialization.</p></li>\n<li><p id=\"so_22134414_22137806_4\">A name or entity declared without the <code>deprecated</code> attribute can later be re-declared with the attribute and vice-versa. [ <em>Note:</em> Thus, an entity initially declared without the attribute can be marked as deprecated by a subsequent redeclaration. However, after an entity is marked as deprecated, later redeclarations do not un-deprecate the entity. <em>\u2014end note</em> ] Redeclarations using different forms of the attribute (with or without the <em>attribute-argument-clause</em> or with different <em>attribute-argument-clauses</em>) are allowed.</p></li>\n<li><p id=\"so_22134414_22137806_5\">[ <em>Note:</em> Implementations may use the <code>deprecated</code> attribute to produce a diagnostic message in case the program refers to a name or entity other than to declare it, after a declaration that specifies the attribute. The diagnostic message may include the text provided within the <em>attribute-argument-clause</em> of any deprecated attribute applied to the name or entity. <em>\u2014end note</em> ]</p></li>\n</ol>\n</blockquote>\n<p>Notice that the normative text specifies the form and semantic usage of a <code>deprecated</code> attribute, but says nothing about how implementations should act in the presence of such an attribute. Whether or not an implementation reports that you are using something deprecated in your program or even simply ignores the attributes altogether, it's technically conforming.</p>\n<p>Paragraph 4 <em>does</em> suggest that an implementation should diagnose references to a deprecated entity, and even include the text of the provided argument, but remember that notes are non-normative. A conforming implementation <em>can</em> ignore the <code>deprecated</code> attribute, but a high-quality implementation will diagnoses references and include the argument text.</p>\n<p>Since Clang tends to be a high-quality implementation, I expect that <a href=\"https://stackoverflow.com/questions/22134414/show-reason-for-deprecation-in-clang#comment33586197_22134414\">Ali's comment has it right</a> and that the next release of Clang will include the attribute argument text in its diagnostics.</p>\n", "LastActivityDate": "2014-03-03T02:45:52.657"}, "22153436": {"ParentId": "22134414", "CommentCount": "2", "CreationDate": "2014-03-03T17:36:56.203", "OwnerUserId": "680359", "PostTypeId": "2", "Id": "22153436", "Score": "2", "Body": "<p>g++-4.9 gets the warning message except with a duplicate:</p>\n<pre><code>ed@bad-horse:~$ ./bin/bin/g++ -std=c++1y foo.cpp \nfoo.cpp: In function \u2018int main()\u2019:\nfoo.cpp:6:3: warning: \u2018void foo()\u2019 is deprecated (declared at foo.cpp:2): Avoid at all cost! [-Wdeprecated-declarations]\n   foo();\n   ^\nfoo.cpp:6:7: warning: \u2018void foo()\u2019 is deprecated (declared at foo.cpp:2): Avoid at all cost! [-Wdeprecated-declarations]\n   foo();\n       ^\n</code></pre>\n<p>This is with the deprecated on a separate line.  It works the same way with the deprecated on the same line as the function name.</p>\n", "LastActivityDate": "2014-03-03T17:36:56.203"}, "bq_ids": {"n4140": {"so_22134414_22137806_3": {"section_id": 5550, "quality": 0.9333333333333333, "length": 14}, "so_22134414_22137806_4": {"section_id": 5551, "quality": 0.926829268292683, "length": 38}, "so_22134414_22137806_0": {"section_id": 5549, "quality": 0.8918918918918919, "length": 33}, "so_22134414_22137806_5": {"section_id": 5552, "quality": 0.8888888888888888, "length": 32}, "so_22134414_22137806_2": {"section_id": 5549, "quality": 0.7692307692307693, "length": 10}}, "n4659": {"so_22134414_22137806_3": {"section_id": 6981, "quality": 0.9333333333333333, "length": 14}, "so_22134414_22137806_4": {"section_id": 6982, "quality": 0.926829268292683, "length": 38}, "so_22134414_22137806_0": {"section_id": 6980, "quality": 0.8918918918918919, "length": 33}, "so_22134414_22137806_2": {"section_id": 6980, "quality": 0.7692307692307693, "length": 10}, "so_22134414_22137806_5": {"section_id": 6983, "quality": 0.8888888888888888, "length": 32}}}});