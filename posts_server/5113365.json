post_cb({"5114497": {"Id": "5114497", "PostTypeId": "2", "Body": "<p>As others have pointed out, the Standard contradicts TC++PL in a few instances, often related to terminology. Bjarne Stroustrup himself summarizes the situation well: </p>\n<p>(...)\n<em><a href=\"http://www2.research.att.com/~bs/about_3rd.html\" rel=\"nofollow\">However, [TC++PL] is not a reference manual or the standards text. If you need 100% precise and complete information you'll have to consult the text of the ISO C++ standard.</a></em>\n(...)</p>\n", "LastActivityDate": "2011-02-25T06:57:00.293", "CommentCount": "0", "CreationDate": "2011-02-25T06:57:00.293", "ParentId": "5113365", "Score": "4", "OwnerUserId": "632030"}, "5113429": {"Id": "5113429", "PostTypeId": "2", "Body": "<p>Simple Answer: Technically No.</p>\n<p>Long Answer:</p>\n<p>No.<br>\n<strong>But</strong> the syntax you use to initialize them makes them look like they are being constructed by a default constructor or a default copy constructor.</br></p>\n<pre><code>int x(5);  // Looks like a constructor. Behaves like one: x is initialized.\nint y();   // Fail. Actually a function declaration.\n// BUT\nint z = int(); // Looks like a constructor. Behaves like a constructor (0 init).\n\nint a(b);  // Again.\n</code></pre>\n<p>So technically there are no constructors for basic-POD types. But for all intents and purposes they act just like they have a copy constructor and default constructor (when initialized with the braces).</p>\n<p>If it looks like a duck and quacks like a duck, then its very duck like.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2015-03-03T01:21:18.587", "Score": "38", "CreationDate": "2011-02-25T03:55:03.500", "ParentId": "5113365", "CommentCount": "13", "OwnerUserId": "14065", "LastEditDate": "2015-03-03T01:21:18.587"}, "5113365": {"ViewCount": "12990", "Body": "<p>After reading <a href=\"http://geeksforgeeks.org/?p=10859\" rel=\"noreferrer\">this</a> article I made a point that <code>int ()</code> yields 0 because the temporary <code>int</code> is value initialized and not because <code>int()</code> calls the default constructor for <code>int</code>. (The article is flawed according to my understanding.)</p>\n<p>I also said that primitive (built-in) types don't have constructors. The original author asked me to check Section $10.4.2 (TC++PL) which says</p>\n<blockquote>\n<p id=\"so_5113365_5113365_0\">Built-in types also have default constructors ($6.2.8) </p>\n</blockquote>\n<p>But I still think that the statement \"C++ allows even built-in type (primitive types) to have default constructors.\" is flawed (as per C++03).</p>\n<p>I think Bjarne in TC++PL has mixed up \"constructor like notation i.e <code>()</code>\" with actual constructor call. Value initialization were not introduced at that time when Bjarne was writing the book, right? So is the text in TC++PL incorrect as per C++98 and C++03 ?</p>\n<p>What do you guys think?</p>\n<p><strong>EDIT</strong></p>\n<p>I asked Bjarne personally (via mail) regarding the flawed text in TC++PL and this was his reply</p>\n<blockquote>\n<p id=\"so_5113365_5113365_1\">I think you mix up \"actual constructor calls\" with conceptually having a constructor.  <em>Built-in types are considered to have constructors</em> (whatever words the standard use to describe their behavior).</p>\n</blockquote>\n", "AcceptedAnswerId": "5113385", "Title": "Do built-in types have default constructors?", "CreationDate": "2011-02-25T03:41:58.803", "Id": "5113365", "CommentCount": "10", "FavoriteCount": "11", "PostTypeId": "1", "LastEditDate": "2011-02-26T04:33:26.093", "LastEditorUserId": "165520", "LastActivityDate": "2015-03-03T01:21:18.587", "Score": "36", "OwnerUserId": "165520", "Tags": "<c++><constructor><value-initialization>", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_5113365_5113365_0": {"length": 4, "quality": 0.5714285714285714, "section_id": 5559}}, "n3337": {"so_5113365_5113365_0": {"length": 4, "quality": 0.5714285714285714, "section_id": 5341}}, "n4659": {"so_5113365_5113365_0": {"length": 4, "quality": 0.5714285714285714, "section_id": 7006}}}, "5113385": {"Id": "5113385", "PostTypeId": "2", "Body": "<p>A constructor is a member function (constructors are fully specified in clause 12 of the C++ Standard, which covers special member functions like constructors and destructors).</p>\n<p>A member function can only be defined for a class type (C++03 9.3/1 says \"Functions declared in the definition of a class, excluding those declared with a friend specifier, are called member functions of that class\").</p>\n<p>So non-class types (including fundamental types, array types, reference types, pointer types, and enum types) do not have constructors.</p>\n<p>I don't have a copy of <em>The C++ Programming Language</em> to read the context of the quote that \"Built-in types also have default constructors,\" but I would guess that Stroustrup is either using the term \"constructor\" in a loose, non-technical sense, or the meaning of the term or the way in which it is used in the Standard changed between when the book was published and when the language was standardized.  I'd guess the former is far more likely than the latter.</p>\n", "LastEditorUserId": "151292", "LastActivityDate": "2011-02-25T03:54:50.013", "Score": "24", "CreationDate": "2011-02-25T03:46:15.490", "ParentId": "5113365", "CommentCount": "0", "OwnerUserId": "151292", "LastEditDate": "2011-02-25T03:54:50.013"}});