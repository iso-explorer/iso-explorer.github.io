post_cb({"bq_ids": {"n4140": {"so_11108587_11108653_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 3400}, "so_11108587_11108638_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 3400}}, "n3337": {"so_11108587_11108653_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 3269}, "so_11108587_11108638_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 3269}}, "n4659": {"so_11108587_11108653_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 4157}, "so_11108587_11108638_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 4157}}}, "11108587": {"ViewCount": "1672", "Body": "<p>The following code with VS2010 prints <code>0</code>, contrary to my expectations:</p>\n<pre><code>#include &lt;complex&gt;\n#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main(void)\n{\n    complex&lt;int&gt; z(20, 200);\n    cout &lt;&lt; abs&lt;int&gt;(z) &lt;&lt; endl;\n    return 0;\n}\n</code></pre>\n<p>It works fine when the type is <code>double</code>.</p>\n", "AcceptedAnswerId": "11108638", "Title": "Why does abs(complex<int>) always return zero?", "CreationDate": "2012-06-19T20:08:38.927", "Id": "11108587", "CommentCount": "0", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2012-09-05T14:10:44.743", "LastEditorUserId": "508666", "LastActivityDate": "2012-09-05T14:10:44.743", "Score": "16", "OwnerUserId": "452483", "Tags": "<c++><math><stl><std><complex-numbers>", "AnswerCount": "2"}, "11108653": {"Id": "11108653", "PostTypeId": "2", "Body": "<p>On MinGW 4.6.2 it prints <code>200</code>.</p>\n<p>However, in the C++ ISO standard section 26.2.2:</p>\n<blockquote>\n<p id=\"so_11108587_11108653_0\">The effect of instantiating the template <code>complex</code> for any type other than <code>float</code>, <code>double</code> or <code>long double</code> is unspecified.</p>\n</blockquote>\n<p>So your build environment is exhibiting undefined behavior for <code>complex&lt;int&gt;</code>, which is not against the standard.</p>\n<p>As <code>templatetypedef</code> pointed out, <a href=\"http://ideone.com/5c0B4\" rel=\"nofollow\">ideone's C99 compiler</a> (GCC 4.3.4) refuses to compile it altogether.</p>\n", "LastEditorUserId": "629493", "LastActivityDate": "2012-06-20T01:12:45.917", "Score": "6", "CreationDate": "2012-06-19T20:13:01.217", "ParentId": "11108587", "CommentCount": "2", "OwnerUserId": "629493", "LastEditDate": "2012-06-20T01:12:45.917"}, "11108638": {"Id": "11108638", "PostTypeId": "2", "Body": "<p>According to the C++ ISO spec, \u00a726.2/2:</p>\n<blockquote>\n<p id=\"so_11108587_11108638_0\">The effect of instantiating the template <code>complex</code> for any type other than <code>float</code>, <code>double</code> or <code>long double</code> is unspecified.</p>\n</blockquote>\n<p>In other words, the compiler can do whatever it wants to when you instantiate <code>complex&lt;int&gt;</code>.  The fact that you're getting 0 here is perfectly well-defined behavior from a language perspective.</p>\n<p>For a comparison - on <a href=\"http://ideone.com/5c0B4\">ideone's version of gcc</a>, this code doesn't even compile.  That's another perfectly valid option.</p>\n<p>Hope this helps!</p>\n", "LastActivityDate": "2012-06-19T20:11:58.807", "CommentCount": "7", "CreationDate": "2012-06-19T20:11:58.807", "ParentId": "11108587", "Score": "23", "OwnerUserId": "501557"}});