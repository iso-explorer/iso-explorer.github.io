post_cb({"6368097": {"Id": "6368097", "PostTypeId": "2", "Body": "<p>The issue here is that you can't overload a static method using a non-static method with the same signature.</p>\n<p>Now, if you try:</p>\n<pre><code>struct D {\n  void foo () {}\n  static void foo () {}\n};\n</code></pre>\n<p>It will trigger an error.</p>\n<p>I'm not really sure why in case of <code>using B::foo</code> it is actually silently ignored without triggering an error/warning (at least on GCC 4.5.1).</p>\n", "LastActivityDate": "2011-06-16T06:49:46.080", "CommentCount": "0", "CreationDate": "2011-06-16T06:49:46.080", "ParentId": "6368005", "Score": "1", "OwnerUserId": "211659"}, "bq_ids": {"n4140": {"so_6368005_6368158_0": {"length": 26, "quality": 0.9285714285714286, "section_id": 5504}}, "n3337": {"so_6368005_6368158_0": {"length": 26, "quality": 0.9285714285714286, "section_id": 5290}}, "n4659": {"so_6368005_6368158_0": {"length": 23, "quality": 0.8214285714285714, "section_id": 6938}}}, "6368158": {"Id": "6368158", "PostTypeId": "2", "Body": "<p>The rule that you are seeing is described in ISO/IEC 14882:2003 7.3.3 [namespace.udecl] / 12 :</p>\n<blockquote>\n<p id=\"so_6368005_6368158_0\">When a <em>using-declaration</em> brings names from a base class into a derived class scope, member functions in the derived class override and/or hide member functions with the same name and parameter types in a base class (rather than conflicting).</p>\n</blockquote>\n<p>Without this rule, the function call would be ambiguous.</p>\n", "LastActivityDate": "2011-06-16T06:56:50.337", "CommentCount": "5", "CreationDate": "2011-06-16T06:56:50.337", "ParentId": "6368005", "Score": "9", "OwnerUserId": "19563"}, "6368005": {"ViewCount": "3159", "Body": "<pre><code>struct B {\n  void foo () {}\n};\n\nstruct D : B {\n  using B::foo;\n  static void foo () {}\n};\n\nint main ()\n{\n  D obj;\n  obj.foo();  // calls D::foo() !?\n}\n</code></pre>\n<p>Member method and <code>static</code> member method are entirely different for 2 reasons:</p>\n<ol>\n<li><code>static</code> method doesn't override the\nvirtual functions in base <code>class</code></li>\n<li>Function pointer signature for both\nthe cases are different</li>\n</ol>\n<p>When a method is called by an object, shouldn't the member method have higher preference logically ? (Just that C++ allows <code>static</code> method to be called using object, <a href=\"http://www.ideone.com/LgcZ1\" rel=\"nofollow\">would it be considered as an overridden</a> method ?)</p>\n", "AcceptedAnswerId": "6368158", "Title": "Why static method overrides base class non-static method?", "CreationDate": "2011-06-16T06:39:16.627", "Id": "6368005", "CommentCount": "0", "FavoriteCount": "2", "PostTypeId": "1", "LastActivityDate": "2011-06-16T07:00:45.200", "Score": "11", "OwnerUserId": "514235", "Tags": "<c++><override><static-methods><language-lawyer>", "AnswerCount": "2"}});