post_cb({"46780630": {"ParentId": "46780197", "CommentCount": "0", "Body": "<p>Solaris CC is incorrect.  The <code>template&lt;&gt;</code> is not permitted.  C++14 Standard [temp.expl.spec]/5:</p>\n<blockquote>\n<p id=\"so_46780197_46780630_0\">Members of an explicitly specialized class template are defined in the same manner as members of normal classes, and not using the <code>template&lt;&gt;</code> syntax. ...</p>\n<p id=\"so_46780197_46780630_1\">[ <em>Example:</em></p>\n</blockquote>\n<pre><code>template&lt;class T&gt; struct A {\n  struct B { };\n  template&lt;class U&gt; struct C { };\n};\n\ntemplate&lt;&gt; struct A&lt;int&gt; {\n  void f(int);\n};\n\nvoid h() {\n  A&lt;int&gt; a;\n  a.f(16);    // A&lt;int&gt;::f must be defined somewhere\n}\n\n// template&lt;&gt; not used for a member of an\n// explicitly specialized class template\nvoid A&lt;int&gt;::f(int) { /*...*/ }\n</code></pre>\n<blockquote>\n<p id=\"so_46780197_46780630_2\">... - <em>end example</em> ]</p>\n</blockquote>\n<p>It looks like to support Solaris CC, you will have to use something like:</p>\n<pre><code>#ifdef __SUNPRO_CC\ntemplate &lt;&gt;\n#endif\nfloat TemplateTest&lt;int, double&gt;::operator()(float a)\n{\n    float b;\n    b = a + 5;\n    return b;\n}\n</code></pre>\n<p>If you have a lot of these, you may want to put that boilerplate into a custom macro.</p>\n", "OwnerUserId": "459640", "PostTypeId": "2", "Id": "46780630", "Score": "2", "CreationDate": "2017-10-17T00:02:55.670", "LastActivityDate": "2017-10-17T00:02:55.670"}, "46780197": {"CommentCount": "2", "ViewCount": "41", "CreationDate": "2017-10-16T22:55:53.177", "LastActivityDate": "2017-10-17T00:02:55.670", "Title": "template<> syntax required by Solaris CC, but forbidden by MSVC and GCC", "PostTypeId": "1", "Id": "46780197", "Score": "1", "Body": "<p>I have the following code in the header file:</p>\n<pre><code>template&lt;typename A, typename B&gt;  class TemplateTest;\n\ntemplate&lt;&gt;\nclass TemplateTest&lt;int, double&gt;\n{\npublic:\n    float operator() (float a);\n};\n</code></pre>\n<p>The definition in the cpp file:</p>\n<pre><code>template&lt;&gt;   // this is problematic line\nfloat TemplateTest&lt;int, double&gt;::operator()(float a)\n{\n    float b;\n    b = a + 5;\n    return b;\n}\n</code></pre>\n<p>with the \"template&lt;&gt;\" in the definition, MSVC returns error C2910 as it interprets operator() as a template method instead of a method of a template class. GCC behaves similar. But Solaris CC requires the \"template&lt;&gt;\" (otherwise it issues error ' \"template&lt;&gt;\" syntax is required when explicitly specializing a member of ...'.</p>\n<p>So my question is which one is correct and how to make the code compile on all these platforms.</p>\n", "Tags": "<c++><templates><gcc><cc>", "OwnerUserId": "8786968", "AnswerCount": "2"}, "46780239": {"ParentId": "46780197", "CommentCount": "0", "Body": "<p>You don't need </p>\n<pre><code>template&lt;&gt;   // this is problematic line\n</code></pre>\n<p>Full example:</p>\n<pre><code>template&lt;typename A, typename B&gt;  class TemplateTest;\n\ntemplate&lt;&gt;\nclass TemplateTest&lt;int, double&gt;\n{\npublic:\n    float operator() (float a);\n};\n\nfloat TemplateTest&lt;int, double&gt;::operator()(float a)\n{\n    return 0;\n}\n</code></pre>\n<p><a href=\"https://wandbox.org/permlink/bGDvifkkppaaarYo\" rel=\"nofollow noreferrer\">Wandbox</a></p>\n<p>Look for \"Members of specializations\" in <a href=\"http://en.cppreference.com/w/cpp/language/template_specialization\" rel=\"nofollow noreferrer\">C++ Reference</a></p>\n", "OwnerUserId": "453271", "PostTypeId": "2", "Id": "46780239", "Score": "0", "CreationDate": "2017-10-16T23:03:52.777", "LastActivityDate": "2017-10-16T23:03:52.777"}, "bq_ids": {"n4140": {"so_46780197_46780630_0": {"section_id": 267, "quality": 1.0, "length": 14}}, "n3337": {"so_46780197_46780630_0": {"section_id": 258, "quality": 1.0, "length": 14}}, "n4659": {"so_46780197_46780630_0": {"section_id": 274, "quality": 1.0, "length": 14}}}});