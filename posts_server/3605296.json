post_cb({"3605308": {"Id": "3605308", "PostTypeId": "2", "Body": "<p>Please see <a href=\"http://www-control.eng.cam.ac.uk/~pcr20/C_Manual/chap06.html\" rel=\"nofollow noreferrer\">Functions with an Unspecified Number of Parameters</a></p>\n<blockquote>\n<p id=\"so_3605296_3605308_0\">Using the ellipsis, ..., with C++\n  function prototypes, <strong><em>means that the\n  function can be specified with an\n  unknown number and type of parameters</em></strong>.\n  This feature can be used to suppress\n  parameter type checking and to allow\n  flexibility in the interface to the\n  function. C++ allows functions be to\n  declared with an unspecified number of\n  arguments.</p>\n</blockquote>\n", "LastActivityDate": "2010-08-31T00:51:28.217", "CommentCount": "0", "CreationDate": "2010-08-31T00:51:28.217", "ParentId": "3605296", "Score": "1", "OwnerUserId": "34211"}, "3605310": {"Id": "3605310", "PostTypeId": "2", "Body": "<p>For a catch, it means catch anything.  So all exceptions thrown will enter this catch block.</p>\n<p>For an argument list, it means a variable number of arguments will be there.  You have to use the stdarg.h API to parse them.</p>\n", "LastActivityDate": "2010-08-31T00:51:37.250", "CommentCount": "0", "CreationDate": "2010-08-31T00:51:37.250", "ParentId": "3605296", "Score": "3", "OwnerUserId": "3937"}, "3605296": {"ViewCount": "587", "Body": "<p>I saw someone's C++ code has function declaration like below:</p>\n<pre><code>void information_log( const char* fmt , ...)\n</code></pre>\n<p>or catch block like</p>\n<pre><code>catch(...)\n{\n}\n</code></pre>\n<p>What does \"...\" mean?</p>\n", "AcceptedAnswerId": "3605748", "Title": "\"...\" in function prototype", "CreationDate": "2010-08-31T00:49:21.297", "Id": "3605296", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2010-09-04T10:27:38.403", "Score": "3", "OwnerUserId": "248430", "Tags": "<c++><syntax>", "AnswerCount": "6"}, "3605601": {"Id": "3605601", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_3605296_3605601_0\">$5.2.2/6 - \"A function can be declared\n  to accept fewer arguments (by\n  declaring default arguments (8.3.6))\n  or more arguments (by using the\n  ellipsis, ... 8.3.5) than the number\n  of parameters in the function\n  definition (8.4). [Note: this implies\n  that, except where the ellipsis (...)\n  is used, a parameter is available for\n  each argument.]\"</p>\n</blockquote>\n<p>That pretty well sums up the interepretation of the declaration of \"information_log\" in OP</p>\n<blockquote>\n<p id=\"so_3605296_3605601_1\">$15.3/6 - \"A ... in a handler\u2019s\n  exception-declaration functions\n  similarly to ... in a function\n  parameter declaration; it specifies a\n  match for any exception. If present, a\n  ... handler shall be the last handler\n  for its try block.\"</p>\n</blockquote>\n<p>Though not a standard term, it is frequently referred to as the catch all clause or catch all handler.</p>\n<pre><code>void f(){\n    try{\n        throw 2.2;       // throw double\n    }\n    catch(int){}              // standard conversion from double to int not permitted\n    catch(...){\n        cout &lt;&lt; \"catch it here\";   // is caught here in catch all clause\n    }\n}\n\nint main(){\n    f();\n}\n</code></pre>\n", "LastActivityDate": "2010-08-31T02:16:51.130", "CommentCount": "0", "CreationDate": "2010-08-31T02:16:51.130", "ParentId": "3605296", "Score": "3", "OwnerUserId": "418110"}, "3605748": {"Id": "3605748", "PostTypeId": "2", "Body": "<p>The ellipsis <code>...</code>, in a function prototype, is used to denote the function as variadic. That is, it enables a variable number of arguments to be passed into the function. In this form, a function must define some way for the user to specify exactly how many arguments they presented, since the variadic library functions in C++ can't determine this information dynamically.</p>\n<p>For example, the stdio function <code>printf</code> is one such function with the prototype:</p>\n<pre><code>int printf(const char *format, ...);\n</code></pre>\n<p>Presumably, from the similarities between the two prototypes, the <code>information_log</code> function you describe is designed to mirror much of <code>printf</code>'s functionality and perhaps even internally uses <code>printf</code>, or one of its cousins.</p>\n<p>The following is an example of how to implement a variadic function:</p>\n<pre><code>// cstdarg provides access to the arguments passed to the ellipsis\n#include &lt;cstdarg&gt; // or (#include &lt;stdarg.h&gt;)\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n\n// Concatenates as many strings as are present\nvoid concatenate(char ** out, int num_str, ...)\n{\n    // Store where the arguments are in memory\n    va_list args;\n\n    // Find the first variadic argument, relative to the last named argument\n    va_start(args, num_str);\n\n    int out_len = 0;\n    int * lengths = new int[num_str];\n    char ** strings = new char*[num_str];\n\n    // Extract the strings from the variadic argument list\n    for(int i = 0; i &lt; num_str; i++)\n    {\n        // Specify the position in the argument list and the type\n        // Note: You must know the type, stdarg can't detect it for you\n        strings[i] = va_arg(args, char *);\n        lengths[i] = strlen(strings[i]);\n        out_len += lengths[i];\n    }\n\n    // Concatenate the strings\n    int dest_cursor = 0;\n    (*out) = new char[out_len + 1];\n    for(int i = 0; i &lt; num_str; i++)\n    {\n        strncpy( (*out) + dest_cursor, strings[i], lengths[i]);\n        dest_cursor += lengths[i];\n    }\n    (*out)[dest_cursor] = '\\0';\n\n    // Clean up\n    delete [] strings;\n    delete [] lengths;\n    va_end(args);\n}\n\nint main()\n{\n    char * output = NULL;\n\n    // Call our function and print the result\n    concatenate(&amp;output, 5, \"The \", \"quick\", \" brown \", \"fox \", \"jumps!\\n\");\n    printf(\"%s\", output);\n\n    delete [] output;\n    return 0;\n}\n</code></pre>\n", "LastEditorUserId": "434131", "LastActivityDate": "2010-09-04T10:27:38.403", "Score": "8", "CreationDate": "2010-08-31T03:03:16.610", "ParentId": "3605296", "CommentCount": "3", "OwnerUserId": "434131", "LastEditDate": "2010-09-04T10:27:38.403"}, "3605313": {"Id": "3605313", "PostTypeId": "2", "Body": "<p>Those are really two separate questions here, just using the same symbol. :-)</p>\n<p>The prototype simply indicates a variable number of arguments. All I can really say is that it's a bit like C's <code>printf</code> function, if you happen to know that. The function just keeps pulling in arguments as it needs them.</p>\n<p>The <code>catch (...)</code> code simply means, catch any exception. (Usually you put this after a number of specific catch blocks, so that this works as a \"catch-all\".)</p>\n", "LastActivityDate": "2010-08-31T00:51:55.673", "CommentCount": "0", "CreationDate": "2010-08-31T00:51:55.673", "ParentId": "3605296", "Score": "7", "OwnerUserId": "129655"}, "bq_ids": {"n4140": {"so_3605296_3605601_1": {"length": 17, "quality": 0.9444444444444444, "section_id": 3350}, "so_3605296_3605601_0": {"length": 26, "quality": 0.8666666666666667, "section_id": 5993}}, "n3337": {"so_3605296_3605601_1": {"length": 17, "quality": 0.9444444444444444, "section_id": 3220}, "so_3605296_3605601_0": {"length": 26, "quality": 0.8666666666666667, "section_id": 5761}}, "n4659": {"so_3605296_3605601_1": {"length": 17, "quality": 0.9444444444444444, "section_id": 4117}, "so_3605296_3605601_0": {"length": 26, "quality": 0.8666666666666667, "section_id": 7495}}}, "3605300": {"Id": "3605300", "PostTypeId": "2", "Body": "<p>The ellipsis notation represents variable parameter list.</p>\n<p><a href=\"http://publications.gbdirect.co.uk/c_book/chapter9/stdarg.html\" rel=\"nofollow noreferrer\">http://publications.gbdirect.co.uk/c_book/chapter9/stdarg.html</a></p>\n<p><a href=\"http://msdn.microsoft.com/en-us/library/fxhdxye9(VS.80).aspx\" rel=\"nofollow noreferrer\">http://msdn.microsoft.com/en-us/library/fxhdxye9(VS.80).aspx</a></p>\n", "LastActivityDate": "2010-08-31T00:50:19.640", "CommentCount": "1", "CreationDate": "2010-08-31T00:50:19.640", "ParentId": "3605296", "Score": "2", "OwnerUserId": "226937"}});