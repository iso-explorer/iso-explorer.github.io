post_cb({"bq_ids": {"n4140": {"so_36201870_36202451_0": {"length": 38, "quality": 0.9743589743589743, "section_id": 7092}}, "n3337": {"so_36201870_36202451_0": {"length": 38, "quality": 0.9743589743589743, "section_id": 6836}}, "n4659": {"so_36201870_36202451_0": {"length": 27, "quality": 0.6923076923076923, "section_id": 8593}}}, "36201870": {"ViewCount": "89", "Body": "<p>I just went through a case where i don't need to prefix the namespace  within a function that is itself declared within the namespace</p>\n<p>Consider this:</p>\n<pre><code>namespace fs\n{\n    void ftest();\n    typedef int uint;\n}\n\nvoid fs::ftest()\n{\n    uint p = 2; // no prefix fs:: needed\n}\n</code></pre>\n<p>This actually doesn't really shock me, but i'd like to have some insights : why does in actually work? Obviously this isn't koenig lookup here.</p>\n<p>I'm using VS 2013</p>\n", "Title": "namespace prefix in function body", "CreationDate": "2016-03-24T13:54:24.857", "LastActivityDate": "2016-03-24T14:22:27.263", "CommentCount": "5", "LastEditDate": "2016-03-24T14:22:27.263", "PostTypeId": "1", "LastEditorUserId": "2069064", "Id": "36201870", "Score": "1", "OwnerUserId": "4760251", "Tags": "<c++><namespaces>", "AnswerCount": "1"}, "36202451": {"Id": "36202451", "PostTypeId": "2", "Body": "<p>This is basic <em>unqualified lookup</em>. The relevant rule is in <a href=\"http://eel.is/c++draft/basic.lookup.unqual#6\" rel=\"nofollow\">[basic.lookup.unqual]</a>:</p>\n<blockquote>\n<p id=\"so_36201870_36202451_0\">A name used in the definition of a function following the function\u2019s <em>declarator-id</em> that is a member of namespace <code>N</code> (where, only for the purpose of exposition, <code>N</code> could represent the global scope) shall be declared\n  before its use in the block in which it is used or in one of its enclosing blocks (6.3) or, <strong>shall be declared before its use in namespace <code>N</code></strong> or, if <code>N</code> is a nested namespace, shall be declared before its use in one of <code>N</code>\u2019s\n  enclosing namespaces. <em>[ Example:</em></p>\n<pre><code>namespace A {\n    namespace N {\n        void f();\n    }\n}\n\nvoid A::N::f() {\n    i = 5;\n    // The following scopes are searched for a declaration of i:\n    // 1) outermost block scope of A::N::f, before the use of i\n    // 2) scope of namespace N\n    // 3) scope of namespace A\n    // 4) global scope, before the definition of A::N::f\n}\n</code></pre>\n<p id=\"so_36201870_36202451_1\"><em>\u2014end example ]</em></p>\n</blockquote>\n", "LastActivityDate": "2016-03-24T14:21:13.793", "CommentCount": "0", "CreationDate": "2016-03-24T14:21:13.793", "ParentId": "36201870", "Score": "3", "OwnerUserId": "2069064"}});