post_cb({"5619292": {"CommentCount": "0", "AcceptedAnswerId": "5623566", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2011-04-11T09:28:17.620", "LastActivityDate": "2011-04-11T15:21:53.840", "LastEditDate": "2017-05-23T12:26:51.687", "ViewCount": "1356", "FavoriteCount": "1", "Title": "C++: Is default copy constructor affected by presence of other constructors and destructor?", "Id": "5619292", "Score": "8", "Body": "<p><a href=\"https://stackoverflow.com/questions/4286190/why-does-copy-constructor-hide-the-default-constructor-in-c\">As we know</a>, if any constructor is declared (copy constructor included), default constructor (the one that takes no arguments) is not implicitly created. Does the same happen with a default copy constructor (the one that performs shallow copy of an object)? Also, does the presence of destructor affect this anyhow?</p>\n", "Tags": "<c++><copy-constructor><default-constructor>", "OwnerUserId": "521032", "AnswerCount": "5"}, "5619391": {"ParentId": "5619292", "CommentCount": "3", "Body": "<p>No. And note that</p>\n<pre><code>MyClass\n{\n    template &lt;typename T&gt; MyClass(const T&amp;);\n};\n</code></pre>\n<p>does not provide a copy constructor, and a default one is generated.</p>\n", "OwnerUserId": "373025", "PostTypeId": "2", "Id": "5619391", "Score": "3", "CreationDate": "2011-04-11T09:36:24.143", "LastActivityDate": "2011-04-11T09:36:24.143"}, "5619338": {"ParentId": "5619292", "CommentCount": "0", "Body": "<p>No. You'll get a default copy constructor unless you supply your own copy constructor, and the presence or absence of a destructor makes no difference.</p>\n", "OwnerUserId": "599792", "PostTypeId": "2", "Id": "5619338", "Score": "3", "CreationDate": "2011-04-11T09:31:43.277", "LastActivityDate": "2011-04-11T09:31:43.277"}, "5619475": {"ParentId": "5619292", "CommentCount": "1", "Body": "<p>12.8 #4 <strong>Copying class objects</strong> </p>\n<blockquote>\n<p id=\"so_5619292_5619475_0\">If the class definition does not\n  explicitly declare a copy constructor,\n  one is declared implicitly</p>\n</blockquote>\n<p>And the destructor plays no part</p>\n", "OwnerUserId": "77673", "PostTypeId": "2", "Id": "5619475", "Score": "9", "CreationDate": "2011-04-11T09:44:30.737", "LastActivityDate": "2011-04-11T09:44:30.737"}, "5623566": {"ParentId": "5619292", "CommentCount": "2", "Body": "<p>The answers here are correct but not complete.  They are correct for C++98 and C++03.  In C++11 you will not get a copy constructor if you have declared a move constructor or move assignment operator.  Furthermore if you  have declared a copy assignment operator or a destructor, the implicit generation of the copy constructor is deprecated.  12.8 [class.copy]:</p>\n<blockquote>\n<p id=\"so_5619292_5623566_0\">If the class definition does not\n  explicitly declare a copy constructor,\n  there is no user-declared move\n  constructor, and there is no\n  user-declared move assignment\n  operator, a copy constructor is\n  implicitly declared as defaulted\n  (8.4.2). Such an implicit declaration\n  is deprecated if the class has a\n  user-declared copy assignment operator\n  or a user-declared destructor.</p>\n</blockquote>\n", "OwnerUserId": "576911", "PostTypeId": "2", "Id": "5623566", "Score": "5", "CreationDate": "2011-04-11T15:21:53.840", "LastActivityDate": "2011-04-11T15:21:53.840"}, "5619358": {"ParentId": "5619292", "CommentCount": "1", "Body": "<p>The default copy constructor is always created, unless you define your own one. The constructor with no arguments isn't defined with any other constructor present to avoid calling it and therefore skipping the real constructor(s)'s code.</p>\n", "OwnerUserId": "409744", "PostTypeId": "2", "Id": "5619358", "Score": "1", "CreationDate": "2011-04-11T09:34:00.347", "LastActivityDate": "2011-04-11T09:34:00.347"}, "bq_ids": {"n4140": {"so_5619292_5623566_0": {"section_id": 456, "quality": 0.696969696969697, "length": 23}, "so_5619292_5619475_0": {"section_id": 456, "quality": 1.0, "length": 10}}, "n3337": {"so_5619292_5623566_0": {"section_id": 447, "quality": 0.696969696969697, "length": 23}, "so_5619292_5619475_0": {"section_id": 447, "quality": 1.0, "length": 10}}, "n4659": {"so_5619292_5623566_0": {"section_id": 479, "quality": 0.696969696969697, "length": 23}, "so_5619292_5619475_0": {"section_id": 479, "quality": 1.0, "length": 10}}}});