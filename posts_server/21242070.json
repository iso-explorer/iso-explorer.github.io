post_cb({"21242126": {"ParentId": "21242070", "CommentCount": "5", "CreationDate": "2014-01-20T19:07:28.857", "OwnerUserId": "34509", "PostTypeId": "2", "Id": "21242126", "Score": "7", "Body": "<p>There is no integral promotion from <code>int</code> to <code>unsigned int</code>, therefor it is still illformed.</p>\n<p>That would be an <em>integral <strong>conversion</strong></em></p>. \n", "LastActivityDate": "2014-01-20T19:07:28.857"}, "21260342": {"ParentId": "21242070", "CommentCount": "5", "CreationDate": "2014-01-21T14:03:42.903", "OwnerUserId": "1105562", "PostTypeId": "2", "Id": "21260342", "Score": "1", "Body": "<p>The change in the wording of the standard is intended to confirm the understanding that converting a negative value into an unsigned type is and always has been a narrowing conversion.</p>\n<p>Informally, -1 cannot be represented within the range of any unsigned type, and the bit pattern that represents it does not represent the same value if stored in an unsigned int. Therefore this is a narrowing conversion and promotion/widening is not involved.</p>\n<p>This is about the dainty art of reading the standard. As usual, the compiler knows best.</p>\n", "LastActivityDate": "2014-01-21T14:03:42.903"}, "bq_ids": {"n4140": {"so_21242070_21242231_1": {"section_id": 6071, "quality": 0.9230769230769231, "length": 12}, "so_21242070_21242070_1": {"section_id": 21, "quality": 0.9743589743589743, "length": 38}, "so_21242070_21242231_0": {"section_id": 3329, "quality": 0.9230769230769231, "length": 12}}, "n3337": {"so_21242070_21242231_1": {"section_id": 5839, "quality": 0.9230769230769231, "length": 12}, "so_21242070_21242070_1": {"section_id": 18, "quality": 0.9743589743589743, "length": 38}, "so_21242070_21242231_0": {"section_id": 3199, "quality": 0.9230769230769231, "length": 12}}, "n4659": {"so_21242070_21242231_1": {"section_id": 7567, "quality": 0.9230769230769231, "length": 12}, "so_21242070_21242070_1": {"section_id": 21, "quality": 0.9743589743589743, "length": 38}, "so_21242070_21242231_0": {"section_id": 4095, "quality": 0.9230769230769231, "length": 12}}}, "21242231": {"ParentId": "21242070", "PostTypeId": "2", "CommentCount": "3", "CreationDate": "2014-01-20T19:12:55.660", "Score": "1", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T11:51:26.903", "Id": "21242231", "OwnerUserId": "183120", "Body": "<blockquote>\n<p id=\"so_21242070_21242231_0\">Narrowing is an implicit conversion from an integer type to an integer type that cannot represent all the values of the original type</p>\n</blockquote>\n<p>Conversion from integer type <code>int</code> to integer type <code>unsigned int</code>, of course, cannot represent all the values of the original type -- the standard is quite unambigious here. If you really need it, you can do</p>\n<pre><code> unsigned int ui1 = {-1u};\n</code></pre>\n<p>This works without any errors/warnings since <code>1u</code> is a literal of type <code>unsigned int</code> which is then negated. This is well-defined as <strong>[expr.unary.op]</strong> in the standard states:</p>\n<blockquote>\n<p id=\"so_21242070_21242231_1\">The negative of an unsigned quantity is computed by subtracting its value from 2<sup>n</sup>, where n is the number of bits in the promoted operand.</p>\n</blockquote>\n<p><code>-1</code> however is an <code>int</code> before and after the negation and hence it becomes a narrowing conversion. <a href=\"http://en.cppreference.com/w/cpp/language/integer_literal#Notes\" rel=\"nofollow noreferrer\">There are no negative literals</a>; see <a href=\"https://stackoverflow.com/a/14695202/183120\">this answer</a> for details.</p>\n<p>Promotion is, informally, copying the same value into a larger space, so it shouldn't be confused here as the sizes (of <code>signed</code> and <code>unsigned</code>) are equal. Even if you try to convert it to some type of larger size, say <code>unsigned long long</code> it's still a narrowing conversion as it cannot represent a negative number truly.</p>\n", "LastActivityDate": "2015-08-27T01:06:58.397"}, "21242070": {"CommentCount": "3", "ViewCount": "255", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2014-01-20T19:04:34.037", "LastActivityDate": "2015-08-27T01:06:58.397", "Title": "Why does the expression below characterize a narrowing conversion?", "AcceptedAnswerId": "21260342", "LastEditDate": "2017-05-23T11:44:13.993", "Id": "21242070", "Score": "8", "Body": "<p>This expression can be found in the Example in \u00a78.5.4/7 in the Standard (N3797)</p>\n<pre><code>unsigned int ui1 = {-1}; // error: narrows\n</code></pre>\n<p>Given \u00a78.5.4/7 and its 4th bullet point:</p>\n<blockquote>\n<p id=\"so_21242070_21242070_0\">A narrowing conversion is an implicit conversion:</p>\n<ul>\n<li>from an integer type or unscoped enumeration type to an integer type    that cannot represent all the values of the original type,\n  except    where the source is a constant expression whose value after\n  integral    promotions will fit into the target type.</li>\n</ul>\n</blockquote>\n<p>I would say there's no narrowing here, as -1 is a constant expression, whose value after integral promotion fits into an unsigned int.</p>\n<p>See also \u00a74.5/1 about <strong>Integral Promotion</strong>:</p>\n<blockquote>\n<p id=\"so_21242070_21242070_1\">A prvalue of an integer type other than bool, char16_t, char32_t, or\n  wchar_t whose integer conversion rank (4.13) is less than the rank of\n  int can be converted to a prvalue of type int if int can represent all\n  the values of the source type; otherwise, the source prvalue can be\n  converted to a prvalue of type unsigned int.</p>\n</blockquote>\n<p>From 4.13 we have that the rank of -1 (an int) is equal to the rank of an unsigned int, and so it can be converted to an unsigned int.</p>\n<p><strong>Edit</strong></p>\n<p>Unfortunately <a href=\"https://stackoverflow.com/users/179910/jerry-coffin\">Jerry Coffin</a> removed his answer from this thread. I believe he was on the right track, if we accept the fact that the current reading of the 4th bullet point in \u00a78.5.4/7 is wrong, after this <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3382.html#1449\" rel=\"nofollow noreferrer\">change</a> in the Standard.</p>\n", "Tags": "<c++><c++11><language-lawyer><narrowing>", "OwnerUserId": "2548699", "AnswerCount": "3"}});