post_cb({"bq_ids": {"n4140": {"so_27903704_27903879_1": {"length": 7, "quality": 1.0, "section_id": 5511}, "so_27903704_27903704_0": {"length": 9, "quality": 0.9, "section_id": 6307}, "so_27903704_27903879_0": {"length": 34, "quality": 0.8947368421052632, "section_id": 5510}, "so_27903704_27903879_2": {"length": 25, "quality": 0.7352941176470589, "section_id": 7117}}, "n3337": {"so_27903704_27903704_0": {"length": 9, "quality": 0.9, "section_id": 6064}, "so_27903704_27903879_1": {"length": 7, "quality": 1.0, "section_id": 5297}, "so_27903704_27903879_0": {"length": 34, "quality": 0.8947368421052632, "section_id": 5296}, "so_27903704_27903879_2": {"length": 25, "quality": 0.7352941176470589, "section_id": 6861}}, "n4659": {"so_27903704_27903704_0": {"length": 10, "quality": 1.0, "section_id": 6756}, "so_27903704_27903879_1": {"length": 7, "quality": 1.0, "section_id": 6946}, "so_27903704_27903879_0": {"length": 34, "quality": 0.8947368421052632, "section_id": 6945}, "so_27903704_27903879_2": {"length": 25, "quality": 0.7352941176470589, "section_id": 8618}}}, "27903704": {"ViewCount": "268", "Body": "<p>From \u00a7 2.10.3.2:</p>\n<blockquote>\n<p id=\"so_27903704_27903704_0\">Each identifier that begins with an underscore is reserved to the implementation for use as a name in the global namespace.</p>\n</blockquote>\n<p>With that in mind, is this program standard conformant?  As it makes <code>_1</code> etc available from the global namespace?  Or is it OK because <code>std::placeholders</code> is considered \"implementation\"?  Or is it OK because <code>_1</code> isn't actually in the global namespace?  Something else?</p>\n<pre><code>using namespace std::placeholders;\nint main(){}\n</code></pre>\n", "AcceptedAnswerId": "27903879", "Title": "Is `using namespace std::placeholders;` non-conformant?", "CreationDate": "2015-01-12T14:00:48.333", "Id": "27903704", "CommentCount": "1", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2015-01-12T14:19:42.760", "LastEditorUserId": "483486", "LastActivityDate": "2015-01-12T14:19:42.760", "Score": "4", "OwnerUserId": "483486", "Tags": "<c++><language-lawyer>", "AnswerCount": "1"}, "27903879": {"Id": "27903879", "PostTypeId": "2", "Body": "<p>I think the program is fine. Strictly speaking, a using-directive does not put any names into a namespace - it makes the names reachable by name lookup, but does not actually make them members of the namespace enclosing the using-directive.</p>\n<p>Quoting C++11, 7.3.4:</p>\n<blockquote>\n<p id=\"so_27903704_27903879_0\">2 A <em>using-directive</em> specifies that the names in the nominated namespace can be used in the scope in which the\n  <em>using-directive</em> appears after the <em>using-directive.</em> During unqualified name lookup (3.4.1), the names appear\n  as if they were declared in the nearest enclosing namespace which contains both the <em>using-directive</em> and the\n  nominated namespace. [ <em>Note:</em> In this context, \u201ccontains\u201d means \u201ccontains directly or indirectly\u201d. <em>\u2014end\n  note</em> ]</p>\n<p id=\"so_27903704_27903879_1\">3 A <em>using-directive</em> does not add any members to the declarative region in which it appears. ...</p>\n</blockquote>\n<p>Notice the language \"can be used,\" \"as if they were declared\" etc. No mention of actually making a name member of a different namespace.</p>\n<p>As for access through a qualified name, 3.4.3.2 (Qualified name lookup for namespaces) says:</p>\n<blockquote>\n<p id=\"so_27903704_27903879_2\">2 For a namespace <code>X</code> and name <code>m</code>, the namespace-qualified lookup set <em>S(X,m)</em> is defined as follows: Let\n  <em>S'(X,m)</em> be the set of all declarations of <code>m</code> in <code>X</code> and the inline namespace set of <code>X</code> (7.3.1). If <em>S'(X,m)</em> is not\n  empty, <em>S(X,m)</em> is <em>S'(X,m);</em> otherwise, <em>S(X,m)</em> is the union of <em>S(N<sub>i</sub>,m)</em> for all namespaces <em>N<sub>i</sub></em> nominated\n  by <em>using-directives</em> in <code>X</code> and its inline namespace set.</p>\n</blockquote>\n<p>I.e., separate rules for using-directives as well.</p>\n<p>I would conclude from this that a using-directive does not make any names members of a namespace, and thus the <code>_</code> global namespace rules is not triggered and no Undefined Behaviour occurs.</p>\n", "LastEditorUserId": "1782465", "LastActivityDate": "2015-01-12T14:19:01.877", "Score": "7", "CreationDate": "2015-01-12T14:09:13.523", "ParentId": "27903704", "CommentCount": "7", "LastEditDate": "2015-01-12T14:19:01.877", "OwnerUserId": "1782465"}});