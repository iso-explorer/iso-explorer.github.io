post_cb({"9053455": {"ParentId": "9053299", "CommentCount": "1", "Body": "<p>When you do return wrap-3;  the compiler dosn't know to convert wrapper to a C in order\nfor the calculation to take place, it is looking for a operator- in wrapper, or a \nconversion in wrapper to a numeric type.  Just because C has a operator- dosn't make the\ncompiler implicitly convert to it, you could have multiple conversion operators in wrapper,\nwhich one should the compiler convert to?</p>\n<p>Either <em>explicitly</em> tell the compiler to convert to C, of add the operator- to wrapper like this..</p>\n<pre><code>class wrapper {\n  public:\n    operator C() {\n        static C z;\n        return z;\n    }\n\n    int operator-(int x) {\n        return C()-x;\n    }\n} wrap;\n</code></pre>\n", "OwnerUserId": "829334", "PostTypeId": "2", "Id": "9053455", "Score": "0", "CreationDate": "2012-01-29T13:18:05.087", "LastActivityDate": "2012-01-29T13:18:05.087"}, "9053364": {"ParentId": "9053299", "LastEditDate": "2012-01-29T13:18:28.940", "CommentCount": "3", "CreationDate": "2012-01-29T13:02:54.040", "OwnerUserId": "277176", "LastEditorUserId": "277176", "PostTypeId": "2", "Id": "9053364", "Score": "5", "Body": "<p>Implicit conversions aren't performed on the first operand when a member function is matched. Just make your operator a non-member, perhaps a friend:</p>\n<pre><code>class C {\n};\n\nint operator-(C c, int x) {\n    return 3-x;\n}\n</code></pre>\n<p>From [over.match.oper]:</p>\n<blockquote>\n<p id=\"so_9053299_9053364_0\">\u2014 If T1 is a complete class type, the set of member candidates is the result of the qualified lookup of <code>T1::operator@</code> (13.3.1.1.1); otherwise, the set of member candidates is empty.</p>\n</blockquote>\n", "LastActivityDate": "2012-01-29T13:18:28.940"}, "9053299": {"CommentCount": "2", "ViewCount": "260", "LastActivityDate": "2012-01-29T13:53:25.460", "Body": "<p>Consider the following code:</p>\n<pre><code>class C {\n  public:\n    int operator-(int x) {\n        return 3-x;\n    }\n};\n\nclass wrapper {\n  public:\n    operator C() {\n        static C z;\n        return z;\n    }\n} wrap;\n\nint main() {\n    return wrap-3;\n}\n</code></pre>\n<p>it gives this error on g++:</p>\n<pre><code>test.cpp: In function \u2018int main()\u2019:\ntest.cpp:17:17: error: no match for \u2018operator-\u2019 in \u2018wrap - 3\u2019\n</code></pre>\n<p>The conversion operator seems to be working because this version works:</p>\n<pre><code>class wrapper {\n  public:\n    operator int() {\n        static int z=3;\n        return z--;\n    }\n} wrap;\n\nint main() {\n    return wrap-3;\n}\n</code></pre>\n<p><code>operator-</code> also seems to be working because this code compiles:</p>\n<pre><code>class C {\n  public:\n    int operator-(int x) {\n        return 3-x;\n    }\n};\n\nint main() {\n    C c\n    return c-3;\n}\n</code></pre>\n<p>What's wrong with the combination of these two?  Why can't an operator be applied after implicit conversion?  Are there any workarounds to this problem?</p>\n", "PostTypeId": "1", "AcceptedAnswerId": "9053364", "FavoriteCount": "2", "Title": "Why doesn't conversion work with custom operators in C++?", "Id": "9053299", "Score": "4", "CreationDate": "2012-01-29T12:54:12.730", "Tags": "<c++><compiler-errors><operators><type-conversion>", "OwnerUserId": "838889", "AnswerCount": "3"}, "9053416": {"ParentId": "9053299", "LastEditDate": "2017-05-23T12:27:29.467", "CommentCount": "2", "CreationDate": "2012-01-29T13:12:02.233", "OwnerUserId": "269126", "LastEditorUserId": "-1", "PostTypeId": "2", "Id": "9053416", "Score": "1", "Body": "<p><s>It doesn't compile (using GCC) because it would neet to chain two <em>user-defined</em> conversions to get from <code>wrapper</code> to <code>int</code>: first to <code>C</code>, then to <code>int</code>.</s> The standard doesn't allow this. See <a href=\"https://stackoverflow.com/a/6402127/269126\">David Rodriguez' answer in another thread</a>.</p>\n", "LastActivityDate": "2012-01-29T13:53:25.460"}, "bq_ids": {"n4140": {"so_9053299_9053364_0": {"section_id": 584, "quality": 0.9375, "length": 15}}, "n3337": {"so_9053299_9053364_0": {"section_id": 574, "quality": 0.9375, "length": 15}}, "n4659": {"so_9053299_9053364_0": {"section_id": 607, "quality": 0.9375, "length": 15}}}});