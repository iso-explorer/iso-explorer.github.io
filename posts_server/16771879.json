post_cb({"16772016": {"ParentId": "16771879", "PostTypeId": "2", "CommentCount": "4", "Body": "<blockquote>\n<p id=\"so_16771879_16772016_0\">How does that code snippet compiles then (g++ 4.7.3)?</p>\n</blockquote>\n<p>Because 17.6.1.2/4 of the C++11 Standard specifies:</p>\n<blockquote>\n<p id=\"so_16771879_16772016_1\">[...] It is\n  unspecified whether these names are first declared within the global namespace scope and are then injected\n  into namespace <code>std</code> by explicit <em>using-declarations</em> (7.3.3).</p>\n</blockquote>\n<p>Therefore, implementations are allowed to define those entities in the global namespace.</p>\n<blockquote>\n<p id=\"so_16771879_16772016_2\">Why should one include  then (instead of ) if standard C functions will be in the global namespace anyway?</p>\n</blockquote>\n<p>First of all, as a matter of good style. Including <code>&lt;stdio.h&gt;</code> gives you the <em>certainty</em> that all the entities are defined in the global namespace, while including <code>&lt;cstdio&gt;</code> gives you the certainty that those entities are where you want (in the <code>std</code> namespace), with the <em>possible</em> (but not certain) unwanted drawback that those names may appear in the global namespace too.</p>\n<blockquote>\n<p id=\"so_16771879_16772016_3\">what should I do to get some of these functions out of the global namespace (while using c++ headers at the same time)?</p>\n</blockquote>\n<p>Unfortunately, you cannot get an entity out of the namespace it lives in. But what you <em>can</em> do (apart from cursing at your implementation) is to avoid using Standard C functions altogether, and prefer using functions from the C++ Standard Library. Those are guaranteed to live in the <code>std</code> namespace.</p>\n<p>So for instance, if you <em>have to</em> perform low-level memory management, use the <code>new</code> operator instead of <code>malloc</code>. Also, mind the emphasis on \"<em>have to</em>\": most of the time, you should use RAII wrappers such as smart pointers or standard containers to avoid having to cope with low-level memory management, <code>new</code>, and <code>delete</code> at all.</p>\n", "OwnerUserId": "1932150", "LastEditorUserId": "1932150", "LastEditDate": "2013-05-27T11:24:58.757", "Id": "16772016", "Score": "4", "CreationDate": "2013-05-27T11:18:55.850", "LastActivityDate": "2013-05-27T11:24:58.757"}, "16771879": {"CommentCount": "4", "AcceptedAnswerId": "16772016", "ClosedDate": "2013-05-27T12:57:52.830", "CreationDate": "2013-05-27T11:10:16.803", "LastActivityDate": "2013-05-27T11:24:58.757", "PostTypeId": "1", "ViewCount": "242", "Title": "Why use <cheader> instead of <header.h>?", "Id": "16771879", "Score": "3", "Body": "<p>I've always thought that if you do <code>#include &lt;cheader&gt;</code> (where <code>header</code> is some standard c++ header like stdio/stdlib/string), it is the same that <code>#include &lt;header.h&gt;</code>, but wrapped into the <code>std</code> namespace. How does that code snippet compiles then (g++ 4.7.3)?</p>\n<pre><code>#include &lt;cstdlib&gt;\nint main()\n{\n    malloc(1);\n    return 0;\n}\n</code></pre>\n<p>Why should one include <code>&lt;cstdio&gt;</code> then (instead of <code>&lt;stdio.h&gt;</code>) if standard C functions will be in the global namespace anyway?</p>\n<p>And the second question is \u2014 what should I do to get some of these functions out of the global namespace (while using c++ headers at the same time)? For instance, I don't want <code>malloc</code> to be in the global namespace since I have a home assignment : to write my own memory allocator (in particular, <code>malloc</code> and <code>free</code> functions) which I will compile into dynamic library and plug into any program using <code>LD_PRELOAD</code>.</p>\n", "Tags": "<c++><namespaces><header-files>", "OwnerUserId": "706389", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_16771879_16772016_1": {"section_id": 6259, "quality": 0.9411764705882353, "length": 16}}, "n3337": {"so_16771879_16772016_1": {"section_id": 6019, "quality": 0.9411764705882353, "length": 16}}, "n4659": {"so_16771879_16772016_1": {"section_id": 7763, "quality": 0.9411764705882353, "length": 16}}}});