post_cb({"25880428": {"ParentId": "25853450", "LastEditDate": "2014-09-17T09:16:53.960", "CommentCount": "12", "CreationDate": "2014-09-17T00:23:26.197", "OwnerUserId": "981959", "LastEditorUserId": "981959", "PostTypeId": "2", "Id": "25880428", "Score": "2", "Body": "<blockquote>\n<p id=\"so_25853450_25880428_0\">QUESTIONS: in the phrase <strong>\"...their representation is part of their definition.\"</strong> 1) What is the meaning of <strong>type representation</strong>? (that is, the representation of WHAT exactly: object layout in memory or private and public data that the type holds OR something else) 2) What is the meaning of <strong>type definition</strong>? 3) Are these typical meanings of type representation and definition as related to c++?</p>\n</blockquote>\n<p>You're asking for the meaning of terms that Stroustrup doesn't use in the text you quoted!</p>\n<p>He's not trying to define a formal specification of a term like \"type representation\" the way the C++ standard does, he's writing prose that is more informal. All the references to technical terms that you've dug up are misleading and not directly relevant.</p>\n<blockquote>\n<p id=\"so_25853450_25880428_1\">(that is, the representation of WHAT exactly: object layout in memory or private and public data that the type holds OR something else)</p>\n</blockquote>\n<p>Yes, both the things you mention. For a concrete type the properties that define what it is and what it does include the type and layout of its members. i.e. how it is represented in the source code.</p>\n<p>For an abstract class, the properties that define what it is and what it does are its member functions and their observable behaviour. The details of how it produces that observable behaviour are not necessarily important, and sometimes aren't even visible in the source code because you actually use some concrete class defined in another piece of code and only use it through an abstract interface.</p>\n<p><strong>Edit:</strong> Judging from the comments you wrote below you apparently missed that I tried to give you an answer. What I wrote above refers to <strong>the properties that define what a type is and what it does</strong>. That is a \"definition of a type\".  </p>\n<p>If you had to write documentation for a C++ type for users, how would you <em>define</em> it?</p>\n<p>For a concrete type you might describe the types of its members and so define some of its properties in terms of the properties of its members. e.g. \"A <code>std::complex&lt;float&gt;</code> stores two <code>float</code> members, which represent the real and imaginary parts of the complex number.\" This tells you that <code>std::complex&lt;float&gt;</code> can only store complex numbers with the same precision as <code>float</code>, i.e. its precision is determined by the fact it is represented using two <code>float</code> members.</p>\n<p>For an abstract class you would describe the behaviour of its member functions, which are likely to be <code>virtual</code>, so you describe it in terms of the interface it follows, not in terms of the details of its implementation.</p>\n<p>But they are not formal terms, I think you are wrong to treat them as strict technical terms. He's just using the words with their usual English meaning.</p>\n", "LastActivityDate": "2014-09-17T09:16:53.960"}, "25880665": {"ParentId": "25853450", "CommentCount": "0", "Body": "<p>You go looking out for a <code>vegetable</code> in dinner tonight. Wait.. a vegetable? The word vegetable defines something for sure but it carries no representation. Someone will surely ask you which vegetable. So a vegetable is an <strong>abstract</strong> concept.</p>\n<p>So now you order some <code>potatoes</code> and <code>onions</code>. Well, they <strong>define</strong> some properties and <strong>represent</strong> themselves well enough so that you can <strong>locate</strong> them in the store. Potatoes and onions make up for <strong>concrete</strong> representation of a type with a well defined property and behavior.</p>\n<p>Try writing two classes following this analogy. You may connect to what is meant by <code>representation is part of their definition.</code></p>\n", "OwnerUserId": "1363471", "PostTypeId": "2", "Id": "25880665", "Score": "0", "CreationDate": "2014-09-17T00:55:06.627", "LastActivityDate": "2014-09-17T00:55:06.627"}, "bq_ids": {"n4140": {"so_25853450_25853450_3": {"section_id": 7202, "quality": 0.8148148148148148, "length": 22}, "so_25853450_25853450_2": {"section_id": 7202, "quality": 0.8666666666666667, "length": 13}}, "n3337": {"so_25853450_25853450_3": {"section_id": 6946, "quality": 0.8148148148148148, "length": 22}, "so_25853450_25853450_2": {"section_id": 6946, "quality": 0.8666666666666667, "length": 13}}, "n4659": {"so_25853450_25853450_3": {"section_id": 8711, "quality": 0.8148148148148148, "length": 22}, "so_25853450_25853450_2": {"section_id": 8711, "quality": 0.8666666666666667, "length": 13}}}, "25853450": {"CommentCount": "5", "ViewCount": "395", "PostTypeId": "1", "LastEditorUserId": "1366044", "LastActivityDate": "2014-11-23T10:35:28.287", "Body": "<p>In both of his books</p>\n<p><em>The C++ Programming Language</em>, 2013 (4th edition) and\n<em>A Tour of C++</em>, 2013</p>\n<p>Bjarne Stroustrup writes:</p>\n<blockquote>\n<p id=\"so_25853450_25853450_0\"><strong>Types</strong> such as complex ... <strong>are called concrete types</strong> <strong>because\n  their representation is part of their definition</strong>.</p>\n</blockquote>\n<p>What follows to some extent clarifies the above statement:</p>\n<blockquote>\n<p id=\"so_25853450_25853450_1\">In that, they resemble built-in types. In contrast, an abstract type\n  is a type that completely  insulates  a  user  from  implementation \n  details. To  do that,  we  decouple  the  interface from the\n  representation and give up genuine local variables.  Since we don\u2019t\n  know anything about the representation of an abstract type (not even\n  its size), we must allocate objects on the free store and access them\n  through references or pointers.</p>\n</blockquote>\n<hr>\n<h1>Questions</h1>\n<p>In the phrase <em>\"...their representation is part of their definition.\"</em></p>\n<ol>\n<li><p>What is the meaning of <strong>type representation</strong>? That is, the representation of what exactly: The object layout in memory? The private and public data that the type holds? Or something else?</p></li>\n<li><p>What is the meaning of <strong>type definition</strong>?</p></li>\n<li><p>Are these typical meanings of type representation and definition as related to C++? </p></li>\n</ol>\n<hr>\n<p>I decided to do some more research and I checked other sources. First I looked through ISO/IEC 14882:2011 specifications that state requirements for implementations of the C++ programming language, then through other sources.</p>\n<h2>Ad question 1</h2>\n<p>I was not able to find in ISO specs anything like \"type representation\" or \"representation of a type\". Instead there are 2 terms related to objects: </p>\n<blockquote>\n<p id=\"so_25853450_25853450_2\">The <strong>object representation</strong> of an object of type <code>T</code> is the sequence of <em>N</em> <code>unsigned char</code> objects taken up by the object of type <code>T</code>, where <em>N</em> equals <code>sizeof(T)</code>.</p>\n<p id=\"so_25853450_25853450_3\">The <strong>value representation of an object</strong> is the set of bits that hold the value of type <code>T</code>. For trivially copyable types, the value representation is a set of bits in the object representation that determines a value, which is one discrete element of an implementation-defined set of values.</p>\n</blockquote>\n<p>So it seems to me that the term <em>type representation</em> does not have any conventional meaning within the ISO standards.</p>\n<p>Ok. Maybe it is something outside the ISO standards? Let's see what\n<a href=\"https://refspecs.linuxfoundation.org/LSB_3.1.0/LSB-CXX-generic/LSB-CXX-generic/cxxclasses.html\" rel=\"nofollow\">Linux Standard Base C++ Specification 3.1 &gt; Chapter 7. C++ Class Representations &gt; 7.1. C++ Data Representation</a> says:</p>\n<blockquote>\n<p id=\"so_25853450_25853450_4\">An object file generated by the compilation process for a C++ program shall contain several closely related <strong>internal objects, or Class Components</strong>, to <strong>represent each C++ Class</strong>. Such objects are not a visible part of the source code. The following table describes these Class Components at a high level.</p>\n<p id=\"so_25853450_25853450_5\"><strong>Table Class Components</strong></p>\n<pre>Object.......................Contains\n=----------------------------------------=\nClass Data...................Class members\nVirtual Table................Information needed to dispatch virtual functions,\n                             access virtual base class subobjects and to access\n                             the RTTI information\nRTTI.........................Run-Time Type Information used by the typeid and\n                             dynamic_cast operators, and exception handlers\nTypeinfo Name................String representation of Class name\nConstruction Virtual Table...Information needed during construction and\n                             destruction of Classes with non-trivial\n                             inheritance relationships.\nVTT..........................A table of virtual table pointers which holds the\n                             addresses of construction and non-construction\n                             virtual tables.\n</pre>\n</blockquote>\n<h2>Ad question 2</h2>\n<p>I was again not able to find in ISO specs an explicit explanation of <strong>type definition</strong>.</p>\n<p>Instead I found the following:</p>\n<blockquote>\n<p id=\"so_25853450_25853450_6\">A <strong>declaration</strong> may introduce one or more names into a translation\n  unit... A <strong>class declaration</strong> introduces the class name into the\n  scope where it is declared...<strong>A declaration is a de\ufb01nition unless</strong>\n  [I removed things not directly related to the class declaration], ...\n  <strong>it is a class name declaration</strong>...</p>\n</blockquote>\n<p>Here is a Microsoft interpretation of the same thing:</p>\n<blockquote>\n<p id=\"so_25853450_25853450_7\"><a href=\"http://msdn.microsoft.com/en-us/library/vstudio/0kw7hsf3\" rel=\"nofollow\">C++ Declarations - MSDN - Microsoft</a></p>\n<p id=\"so_25853450_25853450_8\">A <strong>declaration</strong> introduces\n  one or more names into a program. Declarations can occur more than\n  once in a program...<strong>Declarations also serve as definitions, except\n  when the declaration</strong>:...;<strong>Is a class name declaration with no\n  following definition, such as class T</strong>;...</p>\n</blockquote>\n<p>and</p>\n<blockquote>\n<p id=\"so_25853450_25853450_9\"><a href=\"http://msdn.microsoft.com/en-us/library/vstudio/9e2zdck2\" rel=\"nofollow\">C++ Definitions - MSDN - Microsoft</a></p>\n<p id=\"so_25853450_25853450_10\">A <strong>definition</strong> is a unique\n  specification of an object or variable, function, class, or\n  enumerator. Because definitions must be unique, a program can contain\n  only one definition for a given program element. <strong>There can be a\n  many-to-one correspondence between declarations and definitions.</strong>\n<strong>There are two cases in which a program element can be declared and not defined</strong>: A function is declared but never referenced with a\n  function call or with an expression that takes the function's address.\n  A class is used only in a way that does not require its definition be\n  known.</p>\n</blockquote>\n<p>Examples:</p>\n<pre><code>struct S;    // declares, but not defines S\nclass T {};  // declares, and defines T\nclass P { int a;};  // declares, and defines P, P::a\n</code></pre>\n<h2>Conclusions:</h2>\n<p><strong>Candidate Answer N1:</strong><br>\nproposed by Jonathan Wakely<br>\n(below is my understanding)<br>\nThe phrase \"<strong>Types</strong> such as complex ... <strong>are called concrete types because their representation is part of their definition</strong>\" should be interpreted and understood in the following way:<br>\n\u25cf <strong>their(=type) definition</strong> is a technical c++ term whose meaning is conventional and can be found in c++ specs;<br>\n\u25cf <strong>their(=type) representation</strong> is (according to Jonathan Wakely) not a technical c++ term in this context, but its meaning can be easily figured out by anybody who understands English language well enough (and probably, it is my guess, has been previously exposed to the generous amount of c++ codes and texts). Type representation in this context means \n\"the properties that define what the type is and what it does\", that is:<br>\n\"for a concrete type: the type and layout of its members\",<br>\n\"for an abstract type: its member functions and their observable behavior\"<br>\n\u25cf The whole phrase then (we are talking about the concrete classes) translates to:<br>\n\"<strong>Types</strong> such as complex ... <strong>are called concrete types because the types and layouts of their members are part of their definition</strong>\"<br>\nI think this interpretation makes sense, is understandable, and also agrees well with what follows it in the BS books.<br/></br></br></br></br></br></br></br></br></br></br></p>\n<p>Please correct me if something here is not ok**</p>\n</hr></hr>", "Title": "their representation is part of their de\ufb01nition as related to c++ concrete types?", "FavoriteCount": "2", "LastEditDate": "2014-11-23T10:35:28.287", "Id": "25853450", "Score": "3", "CreationDate": "2014-09-15T17:22:06.107", "Tags": "<c++><c++11>", "OwnerUserId": "1366044", "AnswerCount": "2"}});