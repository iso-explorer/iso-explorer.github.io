post_cb({"24549008": {"CommentCount": "0", "AcceptedAnswerId": "24550557", "CreationDate": "2014-07-03T08:44:58.983", "LastActivityDate": "2014-07-03T10:02:30.217", "PostTypeId": "1", "ViewCount": "108", "FavoriteCount": "0", "Title": "Rvalue reference overloading when base type is function reference", "Id": "24549008", "Score": "3", "Body": "<p>I have a class similar to this that is supposed to take a function object and use it later:</p>\n<pre><code>template&lt;typename F&gt;\nclass A {\npublic:\n  A(const F&amp; f) : _f(f) {}\n  A(F&amp;&amp; f) : _f(std::move(f)) {}\n\nprivate:\n  F _f;\n};\n</code></pre>\n<p>I also define a convenience initialization function and a dummy test function:</p>\n<pre><code>template&lt;typename F&gt;\nA&lt;F&gt; MakeA(F&amp;&amp; f) {\n  return A&lt;F&gt;(std::forward&lt;F&gt;(f));\n}\n\nvoid foo() {}\n</code></pre>\n<p>I get an error that it is not possible to overload <code>A&lt;F&gt;::A(F&amp;&amp;)</code> with <code>A&lt;F&gt;::A(const F&amp;)</code> for <code>F = void(&amp;)()</code> when I call:</p>\n<pre><code>auto a = MakeA(foo);\n</code></pre>\n<p>I understand that I can fix it by having function pointer instead of function reference and also lambdas work nicely:</p>\n<pre><code>auto a1 = MakeA(&amp;foo);\nauto a2 = MakeA([]{});\n</code></pre>\n<p>What is special about function references and why overloading does not work there?</p>\n<p><a href=\"http://ideone.com/Fxglnx\" rel=\"nofollow\">Test code here.</a></p>\n", "Tags": "<c++><c++11>", "OwnerUserId": "426288", "AnswerCount": "2"}, "24550557": {"ParentId": "24549008", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>The error message from clang is more illuminating:</p>\n<blockquote>\n<p id=\"so_24549008_24550557_0\">6 : error: multiple overloads of 'A' instantiate to the same signature 'void (void (&amp;&amp;)())'</p>\n</blockquote>\n<p>This is because for <em>any</em> lvalue reference type <code>T = U&amp;</code>, <code>T&amp;&amp;</code> and <code>T const&amp;</code> are the same type, per the reference-collapsing rules in <strong>[dcl.ref]</strong>:</p>\n<blockquote>\n<p id=\"so_24549008_24550557_1\">6 - If [...] a type TR [is] a reference to a type T, an attempt to create the type \u201clvalue reference to cv TR\u201d creates the type \u201clvalue reference to T\u201d, while an attempt to create the type \u201crvalue reference to cv TR\u201d creates the type TR [...]</p>\n</blockquote>\n<pre><code>using T = int&amp;;\nstatic_assert(std::is_same&lt;T&amp;&amp;, T const&amp;&gt;::value, \"!!\");\n</code></pre>\n<p>The real problem is that you're applying the \"universal reference / <code>std::forward</code>\" pattern outside its region of applicability; it is appropriate only for perfect forwarding of arguments.  Your code will also break if you pass a lambda lvalue:</p>\n<pre><code>auto l = []{};\nauto d = MakeA(l);    // breaks\n</code></pre>\n<p>The correct way to write a type-deducing construction function is to apply <code>decay</code> to the type of the argument (cf. <a href=\"http://en.cppreference.com/w/cpp/experimental/optional/make_optional\" rel=\"nofollow\"><code>make_optional</code></a>):</p>\n<pre><code>template&lt;typename F&gt;\nA&lt;typename std::decay&lt;F&gt;::type&gt; MakeA(F&amp;&amp; f) {\n  return A&lt;typename std::decay&lt;F&gt;::type&gt;(std::forward&lt;F&gt;(f));\n}\n</code></pre>\n", "OwnerUserId": "567292", "LastEditorUserId": "567292", "LastEditDate": "2014-07-03T10:02:30.217", "Id": "24550557", "Score": "4", "CreationDate": "2014-07-03T09:57:12.920", "LastActivityDate": "2014-07-03T10:02:30.217"}, "bq_ids": {"n4140": {"so_24549008_24550557_1": {"section_id": 3223, "quality": 1.0, "length": 20}}, "n3337": {"so_24549008_24550557_1": {"section_id": 3097, "quality": 1.0, "length": 20}}, "n4659": {"so_24549008_24550557_1": {"section_id": 3980, "quality": 1.0, "length": 20}}}, "24549345": {"ParentId": "24549008", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>With <code>F = void(&amp;)()</code>, <code>F&amp;&amp;</code> and <code>const F&amp;</code> are the same type thus the error.</p>\n", "OwnerUserId": "2684539", "LastEditorUserId": "2684539", "LastEditDate": "2014-07-03T09:19:15.940", "Id": "24549345", "Score": "1", "CreationDate": "2014-07-03T09:00:52.220", "LastActivityDate": "2014-07-03T09:19:15.940"}});