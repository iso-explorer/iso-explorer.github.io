post_cb({"36025061": {"ParentId": "36025007", "CommentCount": "0", "Body": "<p>It's because <code>f</code> is not declared in an associated class. <code>B</code> is an associated class when the argument is of type <code>B</code>, but not when the argument is of type <code>A</code>.</p>\n<p>I quote from [basic.lookup.argdep]/4, emphasis mine:</p>\n<blockquote>\n<p id=\"so_36025007_36025061_0\">When considering an associated namespace, the lookup is the same as the lookup performed when the\n  associated namespace is used as a qualifier (3.4.3.2) except that:</p>\n<p id=\"so_36025007_36025061_1\">\u2014 Any using-directives in the associated namespace are ignored.</p>\n<p id=\"so_36025007_36025061_2\">\u2014 Any namespace-scope friend functions or friend function templates <strong>declared in associated classes</strong> are\n  visible within their respective namespaces even if they are not visible during an ordinary lookup (11.3).</p>\n<p id=\"so_36025007_36025061_3\">\u2014 All names except those of (possibly overloaded) functions and function templates are ignored.</p>\n</blockquote>\n", "OwnerUserId": "481267", "PostTypeId": "2", "Id": "36025061", "Score": "8", "CreationDate": "2016-03-16T01:03:22.587", "LastActivityDate": "2016-03-16T01:03:22.587"}, "36025007": {"CommentCount": "0", "AcceptedAnswerId": "36025061", "CreationDate": "2016-03-16T00:58:12.380", "LastActivityDate": "2016-03-16T01:03:22.587", "PostTypeId": "1", "ViewCount": "177", "FavoriteCount": "2", "Title": "Argument dependent lookup for friend functions", "Id": "36025007", "Score": "7", "Body": "<p>Consider the following:</p>\n<pre><code>namespace N {\n    struct A { };\n\n    struct B {\n        B() { }\n        B(A const&amp;) { }\n        friend void f(B const&amp; ) { }\n    };\n}\n\nint main() {\n    f(N::B{}); // ok\n    f(N::A{}); // error\n}\n</code></pre>\n<p>In the first case, the case succeeds - we consider the associated namespaces of <code>N::B</code> and find <code>N::f(B const&amp;)</code>. Great.</p>\n<p>The second case fails. Why? According to <a href=\"http://eel.is/c++draft/namespace.memdef#3\" rel=\"noreferrer\">[namespace.memdef]</a>:</p>\n<blockquote>\n<p id=\"so_36025007_36025007_0\">If a <code>friend</code> declaration in a non-local class first declares a class, function, class template or function template the friend is a member of the innermost enclosing namespace. [...] If a friend function or function template\n  is called, its name may be found by the name lookup that considers functions from namespaces and classes associated with the types of the function arguments (3.4.2).</p>\n</blockquote>\n<p>The associated namespace of <code>N::A</code> is <code>N</code>, of which <code>f</code> is a member, so why is it not found by lookup?</p>\n", "Tags": "<c++><language-lawyer><argument-dependent-lookup><friend-function>", "OwnerUserId": "2069064", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_36025007_36025007_0": {"section_id": 5485, "quality": 0.972972972972973, "length": 36}, "so_36025007_36025061_3": {"section_id": 7106, "quality": 1.0, "length": 10}, "so_36025007_36025061_0": {"section_id": 7106, "quality": 0.9285714285714286, "length": 13}, "so_36025007_36025061_2": {"section_id": 7106, "quality": 0.9090909090909091, "length": 20}, "so_36025007_36025061_1": {"section_id": 7106, "quality": 0.8, "length": 4}}, "n3337": {"so_36025007_36025007_0": {"section_id": 5271, "quality": 0.8648648648648649, "length": 32}, "so_36025007_36025061_3": {"section_id": 6850, "quality": 1.0, "length": 10}, "so_36025007_36025061_0": {"section_id": 6850, "quality": 0.9285714285714286, "length": 13}, "so_36025007_36025061_2": {"section_id": 6850, "quality": 0.9090909090909091, "length": 20}, "so_36025007_36025061_1": {"section_id": 6850, "quality": 0.8, "length": 4}}, "n4659": {"so_36025007_36025061_3": {"section_id": 8607, "quality": 1.0, "length": 10}, "so_36025007_36025061_1": {"section_id": 8607, "quality": 0.8, "length": 4}, "so_36025007_36025061_0": {"section_id": 8607, "quality": 0.9285714285714286, "length": 13}, "so_36025007_36025061_2": {"section_id": 8607, "quality": 0.9090909090909091, "length": 20}, "so_36025007_36025007_0": {"section_id": 6920, "quality": 0.972972972972973, "length": 36}}}});