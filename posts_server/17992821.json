post_cb({"17992821": {"CommentCount": "6", "ViewCount": "121", "PostTypeId": "1", "LastEditorUserId": "2082884", "CreationDate": "2013-08-01T11:29:40.757", "LastActivityDate": "2013-08-01T12:36:04.597", "Title": "What operators have been defined for the STL iterators?", "AcceptedAnswerId": "17992917", "LastEditDate": "2013-08-01T12:04:39.437", "Id": "17992821", "Score": "0", "Body": "<p>I've really googled a lot, but I couldn't find an answer.</p>\n<p>What operators has been overloaded for the STL iterators? i.e. <code>list&lt;t&gt;::iterator, vector&lt;t&gt;::iterator, etc</code>.</p>\n<p>I know about these:</p>\n<ul>\n<li><p><code>* - dereference operator</code></p></li>\n<li><p><code>++ - increment operator (both postfix and prefix)</code></p></li>\n</ul>\n<p>I don't know about more. So back to the original question: which operators are defined to stl iterators? </p>\n", "Tags": "<c++><stl>", "OwnerUserId": "1798362", "AnswerCount": "3"}, "17992917": {"ParentId": "17992821", "PostTypeId": "2", "CommentCount": "13", "Body": "<p>It will depend of the category of the iterator : <a href=\"http://www.cplusplus.com/reference/iterator/iterator/\" rel=\"nofollow\">http://www.cplusplus.com/reference/iterator/iterator/</a></p>\n<ul>\n<li><a href=\"http://www.cplusplus.com/input_iterator_tag\" rel=\"nofollow\">input_iterator_tag</a></li>\n<li><a href=\"http://www.cplusplus.com/output_iterator_tag\" rel=\"nofollow\">output_iterator_tag</a></li>\n<li><a href=\"http://www.cplusplus.com/forward_iterator_tag\" rel=\"nofollow\">forward_iterator_tag</a></li>\n<li><a href=\"http://www.cplusplus.com/bidirectional_iterator_tag\" rel=\"nofollow\">bidirectional_iterator_tag</a></li>\n<li><a href=\"http://www.cplusplus.com/random_access_iterator_tag\" rel=\"nofollow\">random_access_iterator_tag</a></li>\n</ul>\n<p>Or maybe it is more clear on this link : <strong><a href=\"http://en.cppreference.com/w/cpp/iterator\" rel=\"nofollow\">http://en.cppreference.com/w/cpp/iterator</a></strong></p>\n<p>As suggested in comments, here is a little piece of the standard :</p>\n<blockquote>\n<p id=\"so_17992821_17992917_0\"><strong>24.2.1 In general</strong></p>\n<ol>\n<li>[...]This International Standard defines five categories of iterators, according to the operations defined on them: <em>input iterators</em>, <em>output iterators</em>, <em>forward iterators</em>, <em>bidirectional iterators</em> and <em>random access iterators</em>, as shown below :</li>\n</ol>\n</blockquote>\n<pre><code>Random Access -&gt; Bidirectional -&gt; Forward -&gt; Input\n                                          -&gt; Output\n</code></pre>\n<p>For example Forward iterators satisfy all the requirements of input iterators.</p>\n<blockquote>\n<p id=\"so_17992821_17992917_1\"><strong>24.2.2 Iterator</strong></p>\n<p id=\"so_17992821_17992917_2\">The Iterator requirements form the basis of the iterator concept taxonomy; every iterator satisfies the Iterator requirements. This set of requirements specifies <strong>opearations for dereferencing and incrementing</strong> an iterator. Most algorithms will require additional operations to read (24.2.3) or write (24.2.4) values, or to <strong>provide a richer set of iterator movements</strong>.</p>\n</blockquote>\n<p>Like it is said the iterators have requirements that define the operations we can do on them.</p>\n", "OwnerUserId": "1394283", "LastEditorUserId": "1394283", "LastEditDate": "2013-08-01T12:36:04.597", "Id": "17992917", "Score": "4", "CreationDate": "2013-08-01T11:34:01.147", "LastActivityDate": "2013-08-01T12:36:04.597"}, "17993094": {"ParentId": "17992821", "CommentCount": "0", "Body": "<p>It depends on the type of iterator.  For a forward iterator (the\nsimplest), you need: </p>\n<pre><code>class ForwardIterator\n{\npublic:\n    typedef ... difference_type;    // usually ptrdiff_t\n    typedef ... value_type;\n    typedef ... pointer;            // usually value_type*\n    typedef ... reference;          // must be value_type&amp;\n    typedef std::forward_iterator_tag iterator_category;\n\n    //  advance...\n    ForwardIterator&amp; operator++();\n    ForwardIterator operator++( int );\n    //  access...\n    reference operator*() const;\n    pointer operator-&gt;() const;\n    //  check for end...\n    bool operator==( Iterator const&amp; other ) const;\n    bool operator!=( Iterator const&amp; other ) const;\n};\n</code></pre>\n<p>The <code>typedef</code> are necessary unless you specialize\n<code>std::iterator_traits</code> for the iterator type.  They may be\nprovided by inheriting publically from <code>std::iterator</code> (which\nprovides the appropriate defaults for all except\n<code>iterator_category</code> and <code>value_type</code>).</p>\n<p>Bidirectional iterators also require the two <code>operator--</code>, and\nrandom access iterators require a lot more.</p>\n", "OwnerUserId": "649665", "PostTypeId": "2", "Id": "17993094", "Score": "3", "CreationDate": "2013-08-01T11:42:56.717", "LastActivityDate": "2013-08-01T11:42:56.717"}, "bq_ids": {"n4140": {"so_17992821_17992917_2": {"section_id": 5566, "quality": 0.8648648648648649, "length": 32}}, "n3337": {"so_17992821_17992917_2": {"section_id": 5348, "quality": 0.8648648648648649, "length": 32}}, "n4659": {"so_17992821_17992917_2": {"section_id": 7013, "quality": 0.8648648648648649, "length": 32}}}, "17992945": {"ParentId": "17992821", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>You can find the list for the vector iterator here :\n<a href=\"http://www.cplusplus.com/reference/iterator/BidirectionalIterator/\" rel=\"nofollow\">Random Access Iterator operators</a></p>\n<p>And for the list iterator here :\n<a href=\"http://www.cplusplus.com/reference/iterator/BidirectionalIterator/\" rel=\"nofollow\">Bidirectional Iterator operators</a></p>\n<p>In short, (and not exhaustive) for the vector iterators there are also :</p>\n<ul>\n<li>the comparison operators (&lt;, &lt;=, ...)</li>\n<li>the arithmetic operators ( it1 + it2, it2 - it1, ... )</li>\n</ul>\n<p>And for both list iterators and vector iterators :</p>\n<ul>\n<li>the equalities/inequalities test operators (it1 == it2, it1 != it2)</li>\n</ul>\n", "OwnerUserId": "2606361", "LastEditorUserId": "2606361", "LastEditDate": "2013-08-01T11:50:33.763", "Id": "17992945", "Score": "0", "CreationDate": "2013-08-01T11:35:28.330", "LastActivityDate": "2013-08-01T11:50:33.763"}});