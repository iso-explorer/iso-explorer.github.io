post_cb({"22265580": {"ParentId": "22265255", "CommentCount": "0", "Body": "<p>I don't think there's any way to achieve what you're looking for. As soon as you define a default constructor for a class that will be called whether you provide or omit parentheses when defining an instance of the class.</p>\n<p>You can get kinda close by declaring the following constructor; the variable definition will require an empty pair of braces to achieve value initialization.</p>\n<pre><code>Wrapper(std::initializer_list&lt;std::initializer_list&lt;T&gt;&gt; /*unused*/) : value() {}\n\nauto y3 = Wrapper&lt;unsigned int&gt;({}); // y3.value will be value initialized\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/1239a846b719d38d\" rel=\"nofollow\">Live demo</a></p>\n<p>But I'd sooner drop the requirement for implicit conversion to <code>Wrapper</code>, and keep the class an aggregate, than implement the solution above.</p>\n", "OwnerUserId": "241631", "PostTypeId": "2", "Id": "22265580", "Score": "2", "CreationDate": "2014-03-08T05:38:58.403", "LastActivityDate": "2014-03-08T05:38:58.403"}, "22267097": {"ParentId": "22265255", "CommentCount": "7", "Body": "<p>If you remove the user-provided constructor, you can leave the member uninitialized when default-constructing, or value-initialize the wrapper and in doing so zero-initialize its storage (and therefore its member):</p>\n<pre><code>unsigned int x1, x2 {}; // One uninitialized, one value-initialized\nWrapper&lt;unsigned int&gt; y1, y2 {}; // Ditto\n</code></pre>\n<p>You can still set the value during construction via aggregate-initialization:</p>\n<pre><code>Wrapper&lt;int&gt; z {42};\n</code></pre>\n<p>At any rate, this is largely unnecessary; uninitialized values are rarely useful except to introduce subtle, difficult-to-reproduce bugs. I would recommend value-initializing the member either in the default constructor or in the member declaration.</p>\n", "OwnerUserId": "2005483", "PostTypeId": "2", "Id": "22267097", "Score": "0", "CreationDate": "2014-03-08T08:40:51.110", "LastActivityDate": "2014-03-08T08:40:51.110"}, "22265469": {"ParentId": "22265255", "CommentCount": "2", "Body": "<p>Unfortunately, not that I can think of. C++ implicitly converts <code>class_type name</code> to call the default constructor. You would have to make the default constructor do what you'd expect an un-initialized primitive type to do.</p>\n", "OwnerUserId": "3137499", "PostTypeId": "2", "Id": "22265469", "Score": "0", "CreationDate": "2014-03-08T05:24:37.527", "LastActivityDate": "2014-03-08T05:24:37.527"}, "22265255": {"CommentCount": "5", "CreationDate": "2014-03-08T04:58:50.057", "PostTypeId": "1", "AcceptedAnswerId": "22265499", "LastEditorUserId": "541686", "LastActivityDate": "2014-03-09T02:02:54.013", "LastEditDate": "2014-03-08T05:05:42.467", "ViewCount": "535", "FavoriteCount": "1", "Title": "How to make a user-defined type initialize *exactly* like a built-in type?", "Id": "22265255", "Score": "7", "Body": "<p>I would like to make a type that wraps a numeric type (and provides additional functionality).<br>\nFurthermore, I need the number and the wrapper to be <strong>both implicitly convertible</strong> to each other.</br></p>\n<p>So far I have:</p>\n<pre><code>template&lt;class T&gt;\nstruct Wrapper\n{\n    T value;\n    Wrapper() { }\n    Wrapper(T const &amp;value) : value(value) { }\n    // ... operators defined here ...\n};\n</code></pre>\n<p>It's <em>almost</em> good, but it doesn't <em>quite</em> behave the same as a built-in type:</p>\n<pre><code>#include &lt;iostream&gt;\n\nint main()\n{\n    unsigned int x1, x2 = unsigned int();\n    Wrapper&lt;unsigned int&gt; y1, y2 = Wrapper&lt;unsigned int&gt;();\n\n    std::cerr &lt;&lt; x1       &lt;&lt; std::endl;  // uninitialized, as expected\n    std::cerr &lt;&lt; y1.value &lt;&lt; std::endl;  // uninitialized, as expected\n\n    std::cerr &lt;&lt; x2       &lt;&lt; std::endl;  // zero-initialized, as expected\n    std::cerr &lt;&lt; y2.value &lt;&lt; std::endl;  // uninitialized!?!\n}\n</code></pre>\n<p>Is there any way for me to design the <code>Wrapper</code> such that statements like</p>\n<pre><code>Wrapper&lt;unsigned int&gt; y2 = Wrapper&lt;unsigned int&gt;();\n</code></pre>\n<p>initialize the <code>value</code> inside, <em>but <strong>without</strong></em></p> forcing statements like\n<pre><code>Wrapper&lt;unsigned int&gt; y1;\n</code></pre>\n<p>to also do the same?</p>\n<p>In other words, is it possible to make a type that behaves <strong>exactly</strong> the same as a built-in type in terms of initialization?</p>\n", "Tags": "<c++><visual-c++><initialization><value-initialization>", "OwnerUserId": "541686", "AnswerCount": "4"}, "22265499": {"ParentId": "22265255", "PostTypeId": "2", "CommentCount": "7", "Body": "<p><b>Updated Answer</b></p>\n<p>Okay, so as dyp points out, I and everyone else was wrong. You can achieve what you want to do by <code>= default</code> with the default constructor:</p>\n<pre><code> Wrapper() = default ;\n           ^^^^^^^^^\n</code></pre>\n<p>This works because without an initializer you obtain the same behavior I outline before but when you use value initialization the behavior changes as outlined in paragraph <em>8</em>:</p>\n<blockquote>\n<p id=\"so_22265255_22265499_0\">\u2014 if T is a (possibly cv-qualified) non-union class type <strong>without a user-provided or deleted default constructor, then the object is zero-initialized</strong> and, if T has a non-trivial default constructor, default-initialized;</p>\n</blockquote>\n<p><b>Original Answer</b></p>\n<p>I don't think there is a way to make this work the way you would like. Class types act differently that builtin types we can see this from the draft standard section  <code>8.5</code> <em>Initializers</em> paragraph <em>12</em> which says (<em>emphasis mine going forward</em>):</p>\n<blockquote>\n<p id=\"so_22265255_22265499_1\">If <strong>no initializer is specified for an object, the object is default-initialized</strong>; if no initialization is performed, an object with automatic or dynamic storage duration has indeterminate value. [ Note: Objects with static or thread storage duration are zero-initialized, see 3.6.2. \u2014end note ]</p>\n</blockquote>\n<p>and we can see this has different results for classes than built-in types from paragraph <em>7</em> which says:</p>\n<blockquote>\n<p id=\"so_22265255_22265499_2\">To default-initialize an object of type T means:</p>\n</blockquote>\n<p>and includes the following bullets:</p>\n<blockquote>\n<p id=\"so_22265255_22265499_3\">\u2014 if T is a (possibly cv-qualified) <strong>class type (Clause 9), the default constructor for T is called</strong> (and the initialization is ill-formed if T has no accessible default constructor);</p>\n<p id=\"so_22265255_22265499_4\">\u2014 if T is an array type, each element is default-initialized;</p>\n<p id=\"so_22265255_22265499_5\">\u2014 <strong>otherwise, no initialization is performed.</strong></p>\n</blockquote>\n<p>and if we look at paragraph <em>11</em> for the second case <code>Wrapper&lt;unsigned int&gt;()</code> it says:</p>\n<blockquote>\n<p id=\"so_22265255_22265499_6\">An object whose initializer is an empty set of parentheses, i.e., (), <strong>shall be value-initialized.</strong></p>\n</blockquote>\n<p>and then back to paragraph <em>8</em>:</p>\n<blockquote>\n<p id=\"so_22265255_22265499_7\">To value-initialize an object of type T means:</p>\n<p id=\"so_22265255_22265499_8\">\u2014 if T is a (possibly cv-qualified) <strong>class type</strong> (Clause 9) with either no default constructor (12.1) or a default constructor that is user-provided or deleted, then the object <strong>is default-initialized;</strong> [...]</p>\n</blockquote>\n<p>So we end up with the same behavior.</p>\n<p>Both <em>Praetorian</em> and <em>aschepler</em> gave you options that work slightly differently but appear to achieve the behavior you would like just not with the same syntax.</p>\n", "OwnerUserId": "1708801", "LastEditorUserId": "1708801", "LastEditDate": "2014-03-09T02:02:54.013", "Id": "22265499", "Score": "3", "CreationDate": "2014-03-08T05:28:05.210", "LastActivityDate": "2014-03-09T02:02:54.013"}, "bq_ids": {"n4140": {"so_22265255_22265499_4": {"section_id": 3286, "quality": 1.0, "length": 5}, "so_22265255_22265499_1": {"section_id": 3291, "quality": 0.76, "length": 19}, "so_22265255_22265499_7": {"section_id": 3287, "quality": 1.0, "length": 4}, "so_22265255_22265499_2": {"section_id": 3286, "quality": 1.0, "length": 4}, "so_22265255_22265499_0": {"section_id": 3287, "quality": 0.9375, "length": 15}, "so_22265255_22265499_3": {"section_id": 3286, "quality": 0.9230769230769231, "length": 12}, "so_22265255_22265499_8": {"section_id": 3287, "quality": 0.9375, "length": 15}, "so_22265255_22265499_6": {"section_id": 3290, "quality": 1.0, "length": 7}}, "n3337": {"so_22265255_22265499_4": {"section_id": 3156, "quality": 1.0, "length": 5}, "so_22265255_22265499_1": {"section_id": 3161, "quality": 0.84, "length": 21}, "so_22265255_22265499_7": {"section_id": 3157, "quality": 1.0, "length": 4}, "so_22265255_22265499_2": {"section_id": 3156, "quality": 1.0, "length": 4}, "so_22265255_22265499_0": {"section_id": 3157, "quality": 0.6875, "length": 11}, "so_22265255_22265499_3": {"section_id": 3156, "quality": 1.0, "length": 13}, "so_22265255_22265499_8": {"section_id": 3157, "quality": 0.6875, "length": 11}, "so_22265255_22265499_6": {"section_id": 3160, "quality": 1.0, "length": 7}}, "n4659": {"so_22265255_22265499_4": {"section_id": 4048, "quality": 1.0, "length": 5}, "so_22265255_22265499_1": {"section_id": 4053, "quality": 0.76, "length": 19}, "so_22265255_22265499_0": {"section_id": 4049, "quality": 0.9375, "length": 15}, "so_22265255_22265499_3": {"section_id": 4049, "quality": 0.6923076923076923, "length": 9}, "so_22265255_22265499_8": {"section_id": 4049, "quality": 0.9375, "length": 15}, "so_22265255_22265499_6": {"section_id": 4052, "quality": 1.0, "length": 7}}}});