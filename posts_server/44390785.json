post_cb({"bq_ids": {"n4140": {"so_44390785_44390926_0": {"length": 33, "quality": 0.9705882352941176, "section_id": 6299}}, "n3337": {"so_44390785_44390926_0": {"length": 33, "quality": 0.9705882352941176, "section_id": 6056}}, "n4659": {"so_44390785_44390926_0": {"length": 33, "quality": 0.9705882352941176, "section_id": 7808}}}, "44390953": {"Id": "44390953", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_44390785_44390953_0\">Is it possible to redefine operator &lt; for strings without modifiying std namespace</p>\n</blockquote>\n<p>You can define the overload in another namespace, sure. But as you have found out, it will not be found by overload resolution unless explicitly qualified.</p>\n<blockquote>\n<p id=\"so_44390785_44390953_1\">Is it possible to make std::sort using custom operator &lt; without including it to std namespace? </p>\n</blockquote>\n<p>Yes, and you already seem to know how:</p>\n<blockquote>\n<p id=\"so_44390785_44390953_2\">Yes I know, I can pass another comparator to std::sort</p>\n</blockquote>\n<p>This is exactly what the comparator argument is for.</p>\n<blockquote>\n<p id=\"so_44390785_44390953_3\">Also am I correct, that it's corect to add such template specialization to std namespace? </p>\n</blockquote>\n<p>That is not a template specialization; It is a function definition and you may not add function definitions to std namespace - or else the behaviour is undefined. You would be allowed to add template specializations, but only if at least one type argument is a user defined type.</p>\n", "LastEditorUserId": "2079303", "LastActivityDate": "2017-06-06T13:49:24.710", "Score": "6", "CreationDate": "2017-06-06T13:11:22.580", "ParentId": "44390785", "CommentCount": "5", "OwnerUserId": "2079303", "LastEditDate": "2017-06-06T13:49:24.710"}, "44390926": {"Id": "44390926", "PostTypeId": "2", "Body": "<p>No, it is not.  Adding a function to the standard namespace is undefined behavior.  [namespace.std]/1 states:</p>\n<blockquote>\n<p id=\"so_44390785_44390926_0\">The behavior of a C++ program is undefined if it adds declarations or definitions to namespace std or to a namespace within namespace std unless otherwise specified. A program may add a template specialization for any standard library template to namespace std only if the declaration depends on a user-defined type and the specialization meets the standard library requirements for the original template and is not explicitly prohibited.</p>\n</blockquote>\n<p>If you want to change how <code>std::sort</code> sorts then you can provide a lambda and define what you want</p>\n<pre><code>std::sort(std::begin(foo), std::end(foo), [](const auto&amp; lhs, const auto&amp; rhs) { /* your code here */ });\n</code></pre>\n", "LastActivityDate": "2017-06-06T13:10:28.387", "CommentCount": "2", "CreationDate": "2017-06-06T13:10:28.387", "ParentId": "44390785", "Score": "7", "OwnerUserId": "4342498"}, "44390785": {"ViewCount": "160", "Body": "<p>Is it possible to redefine <code>operator &lt;</code> for strings without modifying std namespace, to make this operator use in standard algorithms? \nFor example, I can write:</p>\n<pre><code>namespace std\n{\n\n    bool operator &lt;(const std::string &amp; rhs, const std::string &amp; lhs)\n    {\n        std::cout &lt;&lt; \"lol\";\n        return false;\n    }\n\n}\n\nint main()\n{\n    std::vector&lt;std::string&gt; lol = { \"a\", \"b\", \"ba\", \"aa\" };\n    std::sort(lol.begin(), lol.end());\n}\n</code></pre>\n<p>and \"lol\" will be printed several times. But if I move <code>operator &lt;</code> outside from std namespace, default <code>operator &lt;</code> will be used and nothing will be printed. Is it possible to make <code>std::sort</code> using custom <code>operator &lt;</code> without including it to std namespace? </p>\n<p>Yes I know, I can pass another comparator to std::sort but it's interesting for me if I could do what I asked and how? </p>\n<p>Also am I correct, that it's correct to add such template specialization to std namespace? </p>\n<p>Update: This is not practical question, I just want to know how can I do that if it's possible. </p>\n", "AcceptedAnswerId": "44390926", "Title": "redefine < operator to use in stl algorithms for strings", "CreationDate": "2017-06-06T13:03:43.040", "Id": "44390785", "CommentCount": "9", "LastEditDate": "2017-06-06T13:17:45.593", "PostTypeId": "1", "LastEditorUserId": "4342498", "LastActivityDate": "2017-06-06T13:49:24.710", "Score": "4", "OwnerUserId": "4665075", "Tags": "<c++><templates><operator-overloading><std>", "AnswerCount": "2"}});