post_cb({"bq_ids": {"n4140": {"so_15102111_15104537_0": {"length": 13, "quality": 1.0, "section_id": 6324}}, "n3337": {"so_15102111_15104537_0": {"length": 13, "quality": 1.0, "section_id": 6081}}, "n4659": {"so_15102111_15104537_0": {"length": 13, "quality": 1.0, "section_id": 7834}}}, "15102111": {"ViewCount": "225", "Body": "<p>In XCode 4.5.2 the class <code>Proxy</code> as defined below does not compile.  I can give more details about the specific compiler if necessary, although it should be the default as I have not changed anything in the XCode configuration.  It compiles in VStudio Express.</p>\n<pre><code>#include &lt;list&gt;\n#include &lt;boost/thread/tss.hpp&gt;\n\ntemplate &lt;typename T&gt;\nclass Cache\n{\npublic:\n    class Proxy : public T\n    {\n        friend class Cache;\n\n    private:\n        std::list&lt;Proxy&gt; &amp; m_refList;\n        typename std::list&lt;Proxy&gt;::iterator m_clsPosition;\n\n        Proxy(std::list&lt;Proxy&gt; &amp; refList) : m_refList(refList) {}\n    };\n\nprivate:\n    std::list&lt;Proxy&gt; m_clsList;\n    typename std::list&lt;Proxy&gt;::iterator m_clsCurrent;\n\n    static void Release(Proxy * ptrProxy)\n    {\n        ptrProxy-&gt;m_refList.splice(ptrProxy-&gt;m_refList.m_clsCurrent,\n                                   ptrProxy-&gt;m_refList,\n                                   ptrProxy-&gt;m_clsPosition);\n        if ( ptrProxy-&gt;m_refList.m_clsCurrent == ptrProxy-&gt;m_refList.end() )\n            --(ptrProxy-&gt;m_refList.m_clsCurrent);\n    }\n\npublic:\n    Cache() {m_clsCurrent = m_clsList.end();}\n    ~Cache()\n    {\n        if ( m_clsList.size() &amp;&amp; m_clsCurrent != m_clsList.begin() )\n        {\n            // ERROR - Cache not empty\n        }\n    }\n\n    typedef boost::shared_ptr&lt;Proxy&gt; Ptr;\n\n    static Ptr Get()\n    {\n        static boost::thread_specific_ptr&lt;Cache&gt; clsCache;\n        if ( clsCache.get() == NULL )\n            clsCache.reset(new Cache());\n\n        Proxy * ptrProxy;\n        if ( clsCache-&gt;m_clsCurrent == clsCache-&gt;m_clsList.end() )\n        {\n            clsCache-&gt;m_clsList.push_front(Proxy(clsCache-&gt;m_clsList));\n            ptrProxy = &amp;(clsCache-&gt;m_clsList.front());\n            ptrProxy-&gt;m_clsPosition = clsCache-&gt;m_clsList.begin();\n        }\n        else\n        {\n            ptrProxy = &amp;(*(clsCache-&gt;m_clsCurrent));\n            ptrProxy-&gt;m_clsPosition = clsCache-&gt;m_clsCurrent++;\n        }\n        return Ptr(ptrProxy, Release);\n    }\n};\n</code></pre>\n<p>The compilation error is on the line <code>typename std::list&lt;Proxy&gt;::iterator m_clsPosition</code>:</p>\n<pre><code>No type named 'iterator' in 'std::__1::list&lt;ASW::Cache&lt;std::__1::basic_string&lt;char&gt;&gt;::Proxy, std::__1::allocator&lt;ASW::Cache&lt;std::__1::basic_string&lt;char&gt;&gt;::Proxy&gt;&gt;'\n</code></pre>\n<p>(the template parameter to Cache is <code>std::basic_string&lt;char&gt;</code>)</p>\n<p>I understand what's happening - I'm referencing <code>Proxy</code> before it's fully defined.  But why does <code>iterator</code> need the definition of <code>Proxy</code> to compile?</p>\n<p>The reason for the data structure is two-fold: 1) to reclaim objects instead of destroying them, and 2) to expedite reclamation by keeping an iterator in the cached object to its position in the list.  If anyone has a better idea of how to implement these (providing this error can't be fixed), I'd be interested to hear of it.</p>\n", "AcceptedAnswerId": "15104537", "Title": "Inner class of template class will not compile on XCode 4.5.2", "CreationDate": "2013-02-27T00:33:39.123", "Id": "15102111", "CommentCount": "1", "PostTypeId": "1", "LastActivityDate": "2013-02-27T05:05:17.977", "Score": "1", "OwnerUserId": "584675", "Tags": "<c++><xcode><templates><stl><iterator>", "AnswerCount": "1"}, "15104537": {"Id": "15104537", "PostTypeId": "2", "Body": "<p>Your code has undefined behaviour because you are instantiating <code>std::list</code> with an incomplete type (<code>Proxy</code> is not yet defined within its definition). <code>[res.on.functions]/2</code>:</p>\n<blockquote>\n<p id=\"so_15102111_15104537_0\">... the effects are undefined ... if an incomplete type is used as a template argument when instantiating a template component, unless specifically allowed for that component.</p>\n</blockquote>\n<p>Try using an implementation of <code>list</code> that <a href=\"http://www.boost.org/doc/libs/release/doc/html/container/containers_of_incomplete_types.html\" rel=\"nofollow\">works with incomplete types</a>, such as <a href=\"http://www.boost.org/doc/libs/release/doc/html/boost_container_header_reference.html#header.boost.container.list_hpp\" rel=\"nofollow\">boost::container::list</a>.</p>\n", "LastEditorUserId": "485561", "LastActivityDate": "2013-02-27T05:05:17.977", "Score": "2", "CreationDate": "2013-02-27T04:58:56.170", "ParentId": "15102111", "CommentCount": "3", "OwnerUserId": "485561", "LastEditDate": "2013-02-27T05:05:17.977"}});