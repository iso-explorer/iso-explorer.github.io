post_cb({"bq_ids": {"n4140": {"so_17106448_17107043_5": {"length": 20, "quality": 0.9523809523809523, "section_id": 3222}, "so_17106448_17107043_3": {"length": 10, "quality": 0.5555555555555556, "section_id": 6137}, "so_17106448_17107043_1": {"length": 38, "quality": 0.926829268292683, "section_id": 5937}}, "n3337": {"so_17106448_17107043_5": {"length": 21, "quality": 1.0, "section_id": 3096}, "so_17106448_17107043_3": {"length": 10, "quality": 0.5555555555555556, "section_id": 5901}, "so_17106448_17107043_1": {"length": 38, "quality": 0.926829268292683, "section_id": 5709}}, "n4659": {"so_17106448_17107043_5": {"length": 20, "quality": 0.9523809523809523, "section_id": 3979}, "so_17106448_17107043_3": {"length": 10, "quality": 0.5555555555555556, "section_id": 7634}, "so_17106448_17107043_1": {"length": 29, "quality": 0.7073170731707317, "section_id": 7421}}}, "17106448": {"ViewCount": "233", "Body": "<p>Are there universal solutions to catch exceptions such as divide by zero, segmentation fault, etc. in compilers <strong>MSVC, GCC, Clang</strong> or universal wrapper for them, may be in \"boost\" library?</p>\n<p>Surely must be a universal solution based on the nuances of each compiler.\nEven if I did write a similar solution under every compiler, I still can to leave and forget out any nuances.\nFor example I can write in MSVC with SEH-exceptions and compile it with key: /ZHa</p>\n<pre><code>#include&lt;iostream&gt;\n#include&lt;string&gt;\n\n#ifdef _MSC_VER\n#include &lt;windows.h&gt;\n#include &lt;eh.h&gt;\n\n\nclass SE_Exception\n{\nprivate:\n    EXCEPTION_RECORD m_er; \n    CONTEXT m_context; \n    unsigned int m_error_code;\npublic:\n    SE_Exception(unsigned int u, PEXCEPTION_POINTERS pep) \n    {\n        m_error_code = u;\n        m_er = *pep-&gt;ExceptionRecord; \n        m_context = *pep-&gt;ContextRecord;\n    }\n    ~SE_Exception() {}\n    unsigned int get_error_code() const { return m_error_code; }\n    std::string get_error_str() const {\n        switch(m_error_code) {\n        case EXCEPTION_INT_DIVIDE_BY_ZERO: return std::string(\"INT DIVIDE BY ZERO\");\n        case EXCEPTION_INT_OVERFLOW:    return std::string(\"INT OVERFLOW\");\n        // And other 20 cases!!!\n\n        }\n        return std::string(\"UNKNOWN\");\n    }\n};\n\nvoid trans_func(unsigned int u, EXCEPTION_POINTERS* pExp)\n{\n    throw SE_Exception(u, pExp);\n}\n\n#else\n\nstruct SE_Exception\n{\n    unsigned int get_error_code() const { return 0; }\n    std::string get_error_str() const { return std::string(\"Not MSVC compiler\"); }\n};\n#endif\n\nint main() {\n#ifdef _MSC_VER\n    _set_se_translator( trans_func );\n#endif\n\n    try {\n        int a = 0;\n        int b = 1 / a;\n        std::cout &lt;&lt; \"b: \" &lt;&lt; b &lt;&lt; std::endl;\n    } catch(SE_Exception &amp;e) {\n        std::cout &lt;&lt; \"SEH exception: (\" &lt;&lt; e.get_error_code() &lt;&lt; \") \" &lt;&lt; e.get_error_str() &lt;&lt; std::endl;        \n    } catch(...) {\n        std::cout &lt;&lt; \"Unknown exception.\" &lt;&lt; std::endl;        \n    }\n\n    int b;\n    std::cin &gt;&gt; b;\n    return 0;\n}\n</code></pre>\n", "AcceptedAnswerId": "17107043", "Title": "There are universal solutions in different C++-compilers to catch the exception type divide by zero, seg-fault?", "CreationDate": "2013-06-14T10:30:13.403", "Id": "17106448", "CommentCount": "2", "LastEditDate": "2013-06-14T10:40:15.767", "PostTypeId": "1", "LastEditorUserId": "1182192", "LastActivityDate": "2013-06-14T11:30:15.070", "Score": "0", "OwnerUserId": "1558037", "Tags": "<c++><visual-c++><gcc><clang>", "AnswerCount": "1"}, "17107043": {"Id": "17107043", "PostTypeId": "2", "Body": "<p>Division by zero and many other specific, hardware-related runtime errors (eg. invalid pointer dereference) are Undefined Behaviour, which means that the implementation is free to handle it in whatever way it wants.</p>\n<p>Specifically for division by zero, overflows and other mathematical errors, see (emphasis mine):</p>\n<blockquote>\n<p id=\"so_17106448_17107043_0\"><strong>5/4 [expr]</strong></p>\n<p id=\"so_17106448_17107043_1\">If during the evaluation of an expression, the result is not mathematically defined or not in the range of representable values for its type, <strong>the behavior is undefined.</strong> [ Note: most existing implementations of C ++ ignore integer overflows. Treatment of division by zero, forming a remainder using a zero divisor, and all floating point exceptions vary among machines, and is usually adjustable by a library function. \u2014 end note ]</p>\n<p id=\"so_17106448_17107043_2\"><strong>5.6/4 [expr.mul]</strong></p>\n<p id=\"so_17106448_17107043_3\">The binary / operator yields the quotient, and the binary % operator yields the remainder from the division of the first expression by the second. If the second operand of / or % is zero <strong>the behavior is undefined.</strong></p>\n</blockquote>\n<p>Concerning null pointer dereferencing, see:</p>\n<blockquote>\n<p id=\"so_17106448_17107043_4\"><strong>8.3.2/5 [dcl.ref]</strong></p>\n<p id=\"so_17106448_17107043_5\">in particular, a null reference cannot exist in a well-defined program, because the only way to create such a reference would be to bind it to the \u201cobject\u201d obtained by dereferencing a null pointer, <strong>which causes undefined behavior</strong>.</p>\n</blockquote>\n<p>Other specific errors are scattered throughout the Standard, I won't quote them all but you get the idea.</p>\n<hr>\n<p>Since it is UB, <strong>there is no universal solution to handle it</strong>. Typically, MS Windows will propagate the error through SEH, Unix-like platforms will use signals, and other OSes may do even something else. And as noted in the quote above, it may even be possible to adjust the behaviour through implementation-dependent library calls.</p>\n<p>The only real solution is to prevent these errors from happening in the first place, by inserting the relevant checks in your code.</p>\n</hr>", "LastEditorUserId": "2070725", "LastActivityDate": "2013-06-14T11:30:15.070", "Score": "1", "CreationDate": "2013-06-14T11:03:59.937", "ParentId": "17106448", "CommentCount": "2", "LastEditDate": "2013-06-14T11:30:15.070", "OwnerUserId": "2070725"}});