post_cb({"19790804": {"ViewCount": "136", "Body": "<pre><code>result_t work(resource_t&amp; resource) {\n    lock_t ___(resource);\n\n    return work_impl(resource);\n}\n</code></pre>\n<p>Is it guaranteed that the destructor of <code>___</code> will be called AFTER <code>work_impl()</code> returned? Or is the compiler free to destroy <code>___</code> before calling <code>work_impl()</code>?</p>\n", "AcceptedAnswerId": "19790869", "Title": "Is \"premature\" destruction possible?", "CreationDate": "2013-11-05T14:01:51.897", "Id": "19790804", "CommentCount": "8", "PostTypeId": "1", "LastActivityDate": "2013-11-05T15:27:13.140", "Score": "2", "OwnerUserId": "1440433", "Tags": "<c++><destructor><raii><object-lifetime>", "AnswerCount": "4"}, "19791281": {"Id": "19791281", "PostTypeId": "2", "Body": "<p>The behavior of this program is actually <em>undefined</em>, the <em>identifier</em> <code>__</code> is <em>reserved</em> and we can see from the draft C++ standard <code>17.6.4.3</code> <em>Reserved names</em> paragraph <em>2</em> says:</p>\n<blockquote>\n<p id=\"so_19790804_19791281_0\">If a program declares or defines a name in a context where it is reserved, other than as explicitly allowed by this Clause, its behavior is undefined.</p>\n</blockquote>\n<p>and if we look further to section <code>17.6.4.3.2</code> <em>Global names</em> which says:</p>\n<blockquote>\n<p id=\"so_19790804_19791281_1\">Each name that contains a double underscore _ _ or begins with an underscore followed by an uppercase letter (2.12) is reserved to the implementation for any use.</p>\n</blockquote>\n<p>so unless the compiler documents that <code>__</code> is free to be used by user code then it is <em>reserved</em>.</p>\n<blockquote>\n<p id=\"so_19790804_19791281_2\">Destructors are invoked implicitly</p>\n</blockquote>\n<p>So if this program did not invoke <a href=\"http://en.wikipedia.org/wiki/Undefined_behavior\" rel=\"nofollow noreferrer\">undefined behavior</a> the rules for destructors that are <em>invoked implicitly</em> can be taken from the draft standard section <code>12.4</code> <em>Destructotrs</em> paragraph <em>11</em> which says (<em>emphasis mine</em>)</p>\n<blockquote>\n<blockquote>\n<p id=\"so_19790804_19791281_7\">\u2014 for constructed objects with static storage duration (3.7.1) at program termination (3.6.3),</p>\n<p id=\"so_19790804_19791281_8\">\u2014 for constructed objects with thread storage duration (3.7.2) at thread exit,</p>\n<p id=\"so_19790804_19791281_9\">\u2014 <strong>for constructed objects with automatic storage duration (3.7.3) when the block in which an object is created exits (6.7)</strong>,</p>\n<p id=\"so_19790804_19791281_10\">\u2014 for constructed temporary objects when the lifetime of a temporary object ends (12.2),</p>\n</blockquote>\n</blockquote>\n<p>so that means the destructor for an automatic object will be invoked when you exit <code>work()</code>, which has to happen after the results are returned. We can see further that the order of <em>objects</em> are destroyed in is also specified from <code>6.6</code> <em>Jump statements</em>:</p>\n<blockquote>\n<p id=\"so_19790804_19791281_11\">On exit from a scope (however accomplished), objects with automatic storage duration (3.7.3) that have been constructed in that scope are destroyed in the reverse order of their construction. [ Note: For temporaries, see 12.2. \u2014end note ]</p>\n</blockquote>\n<p>Note that names that contain a double underscore <code>__</code>, or start with either an underscore followed by an uppercase letter are <a href=\"https://stackoverflow.com/a/15285827/1708801\">reserved in any scope</a>.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2013-11-05T15:27:13.140", "Score": "1", "CreationDate": "2013-11-05T14:27:14.487", "ParentId": "19790804", "CommentCount": "9", "OwnerUserId": "1708801", "LastEditDate": "2017-05-23T11:57:31.730"}, "bq_ids": {"n4140": {"so_19790804_19791281_1": {"length": 13, "quality": 0.9285714285714286, "section_id": 6307}, "so_19790804_19791281_9": {"length": 9, "quality": 0.8181818181818182, "section_id": 407}, "so_19790804_19791281_0": {"length": 14, "quality": 1.0, "section_id": 6304}, "so_19790804_19791281_5": {"length": 9, "quality": 0.8181818181818182, "section_id": 407}, "so_19790804_19791281_4": {"length": 6, "quality": 0.75, "section_id": 407}, "so_19790804_19791281_11": {"length": 19, "quality": 0.76, "section_id": 3909}, "so_19790804_19791281_3": {"length": 5, "quality": 0.625, "section_id": 382}, "so_19790804_19791281_7": {"length": 5, "quality": 0.625, "section_id": 382}, "so_19790804_19791281_8": {"length": 6, "quality": 0.75, "section_id": 407}, "so_19790804_19791281_10": {"length": 5, "quality": 0.5555555555555556, "section_id": 407}, "so_19790804_19791281_6": {"length": 5, "quality": 0.5555555555555556, "section_id": 407}}, "n3337": {"so_19790804_19791281_1": {"length": 13, "quality": 0.9285714285714286, "section_id": 6064}, "so_19790804_19791281_9": {"length": 10, "quality": 0.9090909090909091, "section_id": 398}, "so_19790804_19791281_0": {"length": 14, "quality": 1.0, "section_id": 6061}, "so_19790804_19791281_5": {"length": 10, "quality": 0.9090909090909091, "section_id": 398}, "so_19790804_19791281_6": {"length": 8, "quality": 0.8888888888888888, "section_id": 398}, "so_19790804_19791281_3": {"length": 6, "quality": 0.75, "section_id": 398}, "so_19790804_19791281_4": {"length": 7, "quality": 0.875, "section_id": 398}, "so_19790804_19791281_7": {"length": 6, "quality": 0.75, "section_id": 398}, "so_19790804_19791281_8": {"length": 7, "quality": 0.875, "section_id": 398}, "so_19790804_19791281_10": {"length": 8, "quality": 0.8888888888888888, "section_id": 398}, "so_19790804_19791281_11": {"length": 19, "quality": 0.76, "section_id": 3769}}, "n4659": {"so_19790804_19791281_1": {"length": 12, "quality": 0.8571428571428571, "section_id": 6756}, "so_19790804_19791281_9": {"length": 9, "quality": 0.8181818181818182, "section_id": 425}, "so_19790804_19791281_0": {"length": 14, "quality": 1.0, "section_id": 7814}, "so_19790804_19791281_5": {"length": 9, "quality": 0.8181818181818182, "section_id": 425}, "so_19790804_19791281_6": {"length": 5, "quality": 0.5555555555555556, "section_id": 392}, "so_19790804_19791281_3": {"length": 5, "quality": 0.625, "section_id": 398}, "so_19790804_19791281_4": {"length": 6, "quality": 0.75, "section_id": 425}, "so_19790804_19791281_7": {"length": 5, "quality": 0.625, "section_id": 398}, "so_19790804_19791281_8": {"length": 6, "quality": 0.75, "section_id": 425}, "so_19790804_19791281_10": {"length": 5, "quality": 0.5555555555555556, "section_id": 392}, "so_19790804_19791281_11": {"length": 19, "quality": 0.76, "section_id": 4795}}}, "19790862": {"Id": "19790862", "PostTypeId": "2", "Body": "<p>The compiler is free to do whatever it likes if there's no way to tell the difference. But if the destructor has some program-visible effect, it will always happen AFTER <code>work_impl</code> returns.</p>\n", "LastActivityDate": "2013-11-05T14:04:04.067", "CommentCount": "0", "CreationDate": "2013-11-05T14:04:04.067", "ParentId": "19790804", "Score": "1", "OwnerUserId": "787480"}, "19790873": {"Id": "19790873", "PostTypeId": "2", "Body": "<p>If the destructor is non-trivial, it may not be called\nprematurely, provided that the rest of the code is correct.  In\ncase of undefined behavior (say, a variable name with two or\nmore adjacent <code>_</code>), of course, there are no guarantees.</p>\n", "LastActivityDate": "2013-11-05T14:04:45.270", "CommentCount": "0", "CreationDate": "2013-11-05T14:04:45.270", "ParentId": "19790804", "Score": "2", "OwnerUserId": "649665"}, "19790869": {"Id": "19790869", "PostTypeId": "2", "Body": "<p>Expression <code>work_impl(resource)</code> will be executed, the result will be copied to caller side or used as a temporary. Then, Object <code>___</code> will be destructed.</p>\n<p>On the other hand, DON'T use <code>__</code> or <code>___</code> as prefix of any identifier. They're reserved for compiler.</p>\n", "LastEditorUserId": "952747", "LastActivityDate": "2013-11-05T14:12:16.007", "Score": "4", "CreationDate": "2013-11-05T14:04:31.550", "ParentId": "19790804", "CommentCount": "1", "OwnerUserId": "952747", "LastEditDate": "2013-11-05T14:12:16.007"}});