post_cb({"bq_ids": {"n4140": {"so_12842273_12842419_0": {"length": 8, "quality": 0.5714285714285714, "section_id": 7043}, "so_12842273_12842419_1": {"length": 16, "quality": 1.0, "section_id": 7043}, "so_12842273_12842471_0": {"length": 6, "quality": 1.0, "section_id": 7043}, "so_12842273_12842419_2": {"length": 6, "quality": 1.0, "section_id": 7043}}, "n3337": {"so_12842273_12842419_0": {"length": 8, "quality": 0.5714285714285714, "section_id": 6788}, "so_12842273_12842419_1": {"length": 16, "quality": 1.0, "section_id": 6788}, "so_12842273_12842471_0": {"length": 6, "quality": 1.0, "section_id": 6788}, "so_12842273_12842419_2": {"length": 6, "quality": 1.0, "section_id": 6788}}, "n4659": {"so_12842273_12842419_0": {"length": 8, "quality": 0.5714285714285714, "section_id": 8540}, "so_12842273_12842419_1": {"length": 16, "quality": 1.0, "section_id": 8540}, "so_12842273_12842471_0": {"length": 6, "quality": 1.0, "section_id": 8540}, "so_12842273_12842419_2": {"length": 6, "quality": 1.0, "section_id": 8540}}}, "12842471": {"Id": "12842471", "PostTypeId": "2", "Body": "<p>This falls into the realm of the One Definition Rule. In particular, a requirement that is put on multiple definitions across several TUs of a single program for the same class is:</p>\n<blockquote>\n<p id=\"so_12842273_12842471_0\">[...] \u2014 each definition of D shall consist of the same sequence of tokens [...]</p>\n</blockquote>\n<p>(Paragraph 5 of 3.2 One definition rule [basic.def.odr])</p>\n<p>So even if you 'fixed' the first version to declare the member functions <code>inline</code> to match the second version (where providing a definition of the members implicitly declares them <code>inline</code>) you would still run afoul of this rule: the function bodies are additional tokens that appear in the one but not in the other.</p>\n", "LastActivityDate": "2012-10-11T14:54:21.237", "CommentCount": "6", "CreationDate": "2012-10-11T14:54:21.237", "ParentId": "12842273", "Score": "11", "OwnerUserId": "726300"}, "12842273": {"ViewCount": "190", "Body": "<p>Example:</p>\n<p>H</p>\n<pre><code>class MyClass {\n    int x,y,z;\npublic:\n    MyClass(int,int,int);\n    void X();\n    void Y();\n    void Z();\n};\n</code></pre>\n<p>CPP</p>\n<pre><code>class MyClass {\n    int x,y,z;\npublic:\n    MyClass(int x,int y,int z) {\n        this-&gt;x=x;\n        this-&gt;y=y;\n        this-&gt;z=z;\n    }\n    void X() {\n        printf(\"x = %d;\\n\",x);\n    }\n    void Y() {\n        printf(\"y = %d;\\n\",y);\n    }\n    void Z() {\n        printf(\"z = %d;\\n\",z);\n    }\n};\n</code></pre>\n<p>Make it C#-like.\nDon't include the header, re-declare the class in the CPP but with method-bodies.\nWhen file include the header then he gets the extern fields\\methods and etc from CPP.</p>\n<p>It's legal? I can't predict problems from it. There is?</p>\n", "AcceptedAnswerId": "12842471", "Title": "Is it legal to write code like C#?", "CreationDate": "2012-10-11T14:45:07.680", "Id": "12842273", "CommentCount": "19", "LastEditDate": "2012-10-11T14:48:37.047", "PostTypeId": "1", "LastEditorUserId": "1968", "LastActivityDate": "2012-10-11T14:57:29.823", "Score": "3", "OwnerUserId": "1691625", "Tags": "<c++>", "AnswerCount": "3"}, "12842478": {"Id": "12842478", "PostTypeId": "2", "Body": "<p>A major issue will be circular references: if the code of class <code>A</code> contains an instance of class <code>B</code>, which itself uses class <code>A</code>, compilation will fail.</p>\n<p>Separation of a class into its declaration (.h) and definition (.cpp) solves this issue. </p>\n<p>But: if you still want to put the class definition in the header file, you can do so by making the class a template, effectively deferring type resolution. But this comes at the cost of an increase in compile time!</p>\n", "LastActivityDate": "2012-10-11T14:54:27.980", "CommentCount": "3", "CreationDate": "2012-10-11T14:54:27.980", "ParentId": "12842273", "Score": "-1", "OwnerUserId": "454406"}, "12842419": {"Id": "12842419", "PostTypeId": "2", "Body": "<p>This isn't allowed by 3.2/5 of the one definition rule section.</p>\n<blockquote>\n<p id=\"so_12842273_12842419_0\">There can be more than one definition of a class type (clause 9),...[other types and conditions that don't matter]</p>\n<p id=\"so_12842273_12842419_1\">...and provided the definitions satisfy the following requirements.\n  Given such an entity named D defined in more than one translation\n  unit, then</p>\n<p id=\"so_12842273_12842419_2\">-- each definition of D shall consist of the same sequence of tokens;</p>\n</blockquote>\n<p>This clearly prohibits such a mechanism <em>if the header is included in any other linked translation unit</em>.</p>\n<p>If you want to write C# just write it in C#. Your future maintainers will greatly appreciate it if you write idiomatic C++ instead of a dialect.</p>\n", "LastEditorUserId": "251738", "LastActivityDate": "2012-10-11T14:57:29.823", "Score": "5", "CreationDate": "2012-10-11T14:51:58.000", "ParentId": "12842273", "CommentCount": "3", "OwnerUserId": "251738", "LastEditDate": "2012-10-11T14:57:29.823"}});