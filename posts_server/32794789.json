post_cb({"bq_ids": {"n4140": {"so_32794789_32795072_2": {"length": 4, "quality": 1.0, "section_id": 5496}, "so_32794789_32795072_1": {"length": 4, "quality": 1.0, "section_id": 5496}}, "n3337": {"so_32794789_32795072_2": {"length": 4, "quality": 1.0, "section_id": 5282}, "so_32794789_32795072_1": {"length": 4, "quality": 1.0, "section_id": 5282}}, "n4659": {"so_32794789_32795072_2": {"length": 4, "quality": 1.0, "section_id": 6930}, "so_32794789_32795072_1": {"length": 4, "quality": 1.0, "section_id": 6930}}}, "32795072": {"Id": "32795072", "PostTypeId": "2", "Body": "<p>This is impossible:</p>\n<blockquote>\n<p id=\"so_32794789_32795072_0\"><code>7.3.3p7</code> <strong>The <code>using</code> declaration</strong> <code>[namespace.udecl]</code> (<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf\" rel=\"nofollow\">n3337</a>)</p>\n<blockquote>\n<p id=\"so_32794789_32795072_2\">A <em>using-declaration</em> shall not name a scoped enumerator.</p>\n</blockquote>\n</blockquote>\n<p>You can create a type alias using <code>decltype</code>:</p>\n<pre><code>using RED = decltype(red);\n</code></pre>\n<p>It <em>does</em> work in Clang, but is a <a href=\"https://llvm.org/bugs/show_bug.cgi?id=9124\" rel=\"nofollow\">reported bug</a>.</p>\n<p>The workaround is to use a variable.</p>\n<pre><code>Color red = Color::RED;\n</code></pre>\n<hr/>\n<p>Rereading the question, it sounds like you want to bring <em>all</em> of the enum's variables into scope, not just one member. I suggest you read the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2347.pdf\" rel=\"nofollow\">proposal</a> for <code>enum class</code> to see some of the issues it was trying to solve. The whole point of scoped enums is to avoid injecting its members into the enclosing scope.</p>\n<p>So just use a regular enum. </p>\n", "LastEditorUserId": "5378483", "LastActivityDate": "2015-09-26T08:34:22.220", "Score": "4", "CreationDate": "2015-09-26T08:18:06.457", "ParentId": "32794789", "CommentCount": "8", "OwnerUserId": "5378483", "LastEditDate": "2015-09-26T08:34:22.220"}, "32794789": {"ViewCount": "749", "Body": "<p>I need to use the enumerator of the enum class multiple times in one block of code and I would like to avoid the classical enum from C++03. </p>\n<pre><code>enum class Color {RED, GREEN};\n{\n    Color::RED //this works\n    RED;       //how do I make this work (only for this block)?\n}\n</code></pre>\n<p>I tried using </p>\n<pre><code>using namespace Color;\n</code></pre>\n<p>but it obviously did not work since Color is not a namespace.</p>\n", "Title": "How to use enum class without a scope", "CreationDate": "2015-09-26T07:33:52.503", "LastActivityDate": "2015-11-12T17:53:58.457", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "Id": "32794789", "Score": "0", "OwnerUserId": "1459339", "Tags": "<c++><class><c++11><enums>", "AnswerCount": "1"}});