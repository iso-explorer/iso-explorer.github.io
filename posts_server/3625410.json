post_cb({"3628383": {"Id": "3628383", "PostTypeId": "2", "Body": "<p>$5.2.9/2 - </p>\n<blockquote>\n<p id=\"so_3625410_3628383_0\">\"An expression e can be explicitly\n  converted to a type T using a\n  static_cast of the form\n  static_cast(e) if the declaration\n  \u201cT t(e);\u201d is well-formed, for some\n  invented temporary variable t (8.5).\n  The effect of such an explicit\n  conversion is the same as performing\n  the declaration and initialization and\n  then using the temporary variable as\n  the result of the conversion. The\n  result is an lvalue if T is a\n  reference type (8.3.2), and an rvalue\n  otherwise. The expression e is used as\n  an lvalue if and only if the\n  initialization uses it as an lvalue.\"</p>\n</blockquote>\n<p>Let us take the case of Code snippet 1 as below</p>\n<p><code>float *f;</code></p>\n<p><code>void *p = f;</code></p>\n<p>Here initialization of 'p' is well-formed. This is in accordance with $4.2</p>\n<p><code>An rvalue of type \u201cpointer to cv T,\u201d where T is an object type, can be converted to an rvalue of type \u201cpointer to cv void.\u201d</code></p>\n<p>Now let us take the code in OP</p>\n<p>In our case, 'E' is <code>'float **'</code> and 'T' is <code>'void **'</code></p>\n<p>So, whether static_cast will work for the attempted conversion if 'p' can be initialized as shown below</p>\n<p><code>float **f;</code></p>\n<p><code>void **p = f;</code></p>\n<p>The initialization of 'p' is ill-formed as it is not a valid condition listed under <code>$4.10</code></p>\n<p>Now, coming to why <code>b = (void**)(&amp;a);</code> works?</p>\n<p>This is the case where an explicit cast is used (<code>$5.4</code>). In this case, this explicit cast is equivalent of <code>reinterpret_cast</code> (<code>$5.4/5</code>). In this particular case, this conversion is allowed (<code>$5.2.1/7</code>).</p>\n<p>Does this help?</p>\n", "LastEditorUserId": "418110", "LastActivityDate": "2010-09-02T15:07:20.003", "CommentCount": "0", "CreationDate": "2010-09-02T15:00:46.713", "ParentId": "3625410", "Score": "6", "OwnerUserId": "418110", "LastEditDate": "2010-09-02T15:07:20.003"}, "3625567": {"PostTypeId": "2", "Body": "<p>When you write C-style to cast you basically are circumventing the C++ type checks\nso that is very \"forgiving\". However in order to conform to C++ (and to be on the safe side) you should use the C++ casts static_cast,dynamic_cast or reinterpret_cast.</p>\n<p>reinterpret_cast is the closest you can get in C++ to a C-cast without actually doing C-cast.</p>\n", "LastActivityDate": "2010-09-02T08:59:17.460", "Id": "3625567", "CommentCount": "2", "CreationDate": "2010-09-02T08:59:17.460", "ParentId": "3625410", "Score": "1", "OwnerUserId": "45685"}, "3625410": {"ViewCount": "4444", "Body": "<p>Just ran into this:</p>\n<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main(int argc, char** argv)\n{\n    float *a = new float[10];\n    void **b;\n    b = static_cast&lt;void**&gt;(&amp;a);\n    delete(a); \n    return 0;\n}\n\nmacbook:C nils$ g++ -Wall -g -o static_cast static_cast.cpp \nstatic_cast.cpp: In function \u2018int main(int, char**)\u2019:\nstatic_cast.cpp:9: error: invalid static_cast from type \u2018float**\u2019 to type \u2018void**\u2019\nmacbook:C nils$ clang++ -Wall -g -o static_cast static_cast.cpp \nstatic_cast.cpp:9:9: error: static_cast from 'float **' to 'void **' is not\n      allowed\n    b = static_cast&lt;void**&gt;(&amp;a);\n        ^~~~~~~~~~~~~~~~~~~~~~~\n1 error generated.\nmacbook:C nils$ \n</code></pre>\n<p>Why is it not allowed? While b = (void**)(&amp;a); works. </p>\n", "AcceptedAnswerId": "3628383", "Title": "C++ static_cast from float** to void**", "CreationDate": "2010-09-02T08:36:08.407", "Id": "3625410", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2010-09-02T15:07:20.003", "Score": "4", "OwnerUserId": "44232", "Tags": "<c++>", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_3625410_3628383_0": {"length": 31, "quality": 0.7045454545454546, "section_id": 6030}}, "n3337": {"so_3625410_3628383_0": {"length": 31, "quality": 0.7045454545454546, "section_id": 2}}}, "3625434": {"Id": "3625434", "PostTypeId": "2", "Body": "<p>See <a href=\"https://stackoverflow.com/questions/310451/should-i-use-static-cast-or-reinterpret-cast-when-casting-a-void-to-whatever\">Should I use static_cast or reinterpret_cast when casting a void* to whatever</a>.</p>\n<p>you should use <a href=\"http://msdn.microsoft.com/en-us/library/e0w9f63b(VS.80).aspx\" rel=\"nofollow noreferrer\">reinterpret_cast</a>. </p>\n<p>I've used static cast to cast from a child class to the parent class, or where I knew the the type conversion was safe. If I needed runt time verification, then I'd use dynamic_cast.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2010-09-02T09:57:29.577", "CommentCount": "2", "CreationDate": "2010-09-02T08:40:00.643", "ParentId": "3625410", "Score": "2", "OwnerUserId": "30225", "LastEditDate": "2017-05-23T10:30:25.017"}, "3628077": {"Id": "3628077", "PostTypeId": "2", "Body": "<p>You probably don't want a <code>void**</code>, but rather <code>void*</code>, for the reason mentioned by Joe Gauterin in <a href=\"https://stackoverflow.com/questions/3625410/c-static-cast-from-float-to-void/3625428#3625428\">this comment</a></p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2010-09-02T14:27:09.757", "CommentCount": "1", "CreationDate": "2010-09-02T14:27:09.757", "ParentId": "3625410", "Score": "1", "OwnerUserId": "101225", "LastEditDate": "2017-05-23T11:55:10.850"}});