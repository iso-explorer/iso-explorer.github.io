post_cb({"25546249": {"CommentCount": "6", "AcceptedAnswerId": "25546491", "PostTypeId": "1", "LastEditorUserId": "1258524", "CreationDate": "2014-08-28T10:13:11.207", "LastActivityDate": "2014-08-28T11:27:06.903", "LastEditDate": "2014-08-28T10:30:31.887", "ViewCount": "213", "FavoriteCount": "0", "Title": "C++11 Lambda Passing with Capture", "Id": "25546249", "Score": "5", "Body": "<p>I'm trying to pass a lambda function with capture [&amp;]. What is the correct declaration for a variable storing a capturing lambda? <strong>[f2 below]</strong></p>\n<pre><code>// Non-capturing\nvoid (*f1)() = [](){   }; // Works\n\n// All by reference\nvoid (*f2)() = [&amp;](){  }; // Syntax Error\n</code></pre>\n", "Tags": "<c++><c++11><lambda>", "OwnerUserId": "1258524", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_25546249_25546491_0": {"section_id": 5965, "quality": 0.9534883720930233, "length": 41}}, "n3337": {"so_25546249_25546491_0": {"section_id": 5734, "quality": 0.8837209302325582, "length": 38}}, "n4659": {"so_25546249_25546491_0": {"section_id": 7456, "quality": 0.8604651162790697, "length": 37}}}, "25546491": {"ParentId": "25546249", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>The C++ Standard, section \u00a7 5.1.2 / 6 : [expr.prim.lambda]</p>\n<blockquote>\n<p id=\"so_25546249_25546491_0\">The closure type for a non-generic lambda-expression <strong>with no lambda-capture has a public non-virtual non-explicit const conversion function to pointer to function</strong> with C ++ language linkage (7.5) having the same parameter and return types as the closure type\u2019s function call operator. The value returned by this conversion function shall be the address of a function that, when invoked, has the same effect as invoking the closure type\u2019s function call operator</p>\n</blockquote>\n<p>Since your lambda has a capture (a default one : <code>[&amp;]</code>), there is no conversion operator to a pointer to function.</p>\n<hr>\n<p>Alternatively, you can use <code>std::function&lt;&gt;</code> to wrap your lambda :</p>\n<pre><code>#include &lt;functional&gt;\n#include &lt;iostream&gt;\n\nint main()\n{\n  int i = 42;  \n  std::function&lt;void(void)&gt; f = [&amp;](){ std::cout &lt;&lt; i; };\n  f();\n}\n</code></pre>\n</hr>", "OwnerUserId": "3510483", "LastEditorUserId": "3510483", "LastEditDate": "2014-08-28T11:27:06.903", "Id": "25546491", "Score": "10", "CreationDate": "2014-08-28T10:25:24.673", "LastActivityDate": "2014-08-28T11:27:06.903"}});