post_cb({"bq_ids": {"n4140": {"so_15293476_15293597_1": {"length": 33, "quality": 0.8461538461538461, "section_id": 3345}}, "n3337": {"so_15293476_15293597_1": {"length": 29, "quality": 0.7435897435897436, "section_id": 3215}}}, "15293594": {"PostTypeId": "2", "Body": "<p>Yes, it's a <a href=\"http://www.gotw.ca/gotw/047.htm\" rel=\"nofollow\">bad idea</a>. There is no reasonable way to determine whether you can safely throw.</p>\n", "LastActivityDate": "2013-03-08T12:03:21.683", "Id": "15293594", "CommentCount": "0", "CreationDate": "2013-03-08T12:03:21.683", "ParentId": "15293476", "Score": "0", "OwnerUserId": "15416"}, "15293476": {"ViewCount": "82", "Body": "<p>I'm new to C++, and somewhat confused about the following matter:</p>\n<p>What happens when a DTOR throws an exception?\nIs the object still being destroyed?</p>\n<p>Thanks in advance.</p>\n", "AcceptedAnswerId": "15293597", "Title": "exception thrown in DTOR", "CreationDate": "2013-03-08T11:57:26.200", "Id": "15293476", "CommentCount": "3", "LastEditDate": "2013-03-08T12:28:07.893", "PostTypeId": "1", "LastEditorUserId": "1355968", "LastActivityDate": "2013-03-08T12:28:07.893", "ClosedDate": "2013-03-08T13:56:29.670", "Score": "-1", "OwnerUserId": "1355968", "Tags": "<c++><g++>", "AnswerCount": "2"}, "15293597": {"PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_15293476_15293597_0\">And generally: Is it a bad idea?</p>\n</blockquote>\n<p><strong>Yes</strong>, a very bad one. </p>\n<p>Do not throw exceptions from a destructor. If an exception is thrown after another exception has been thrown, but before that exception has been caught by a <code>catch</code> handler, your program will be forced to terminate abruptly.</p>\n<p>Since destructors are invoked during stack unwinding when an exception is thrown, if one of them throws another exception, that will immediately terminate your program. Not nice.</p>\n<p>Avoid throwing exceptions from destructors (or wrap them into <code>try</code>/<code>catch</code> blocks so you do not <em>propagate</em> them outside the destructor). Doing so is a <em>bad</em> programming practice.</p>\n<p>From Paragraph 15.2/3 of the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_15293476_15293597_1\">The process of calling destructors for automatic objects constructed on the path from a try block to the\n  point where an exception is thrown is called \u201cstack unwinding.\u201d If a destructor called during stack unwinding\n  exits with an exception, std::terminate is called (15.5.1). [ Note: <strong>So destructors should generally catch\n  exceptions and not let them propagate out of the destructor.</strong> \u2014end note ]</p>\n</blockquote>\n", "LastActivityDate": "2013-03-08T12:03:36.137", "Id": "15293597", "CommentCount": "0", "CreationDate": "2013-03-08T12:03:36.137", "ParentId": "15293476", "Score": "1", "OwnerUserId": "1932150"}});