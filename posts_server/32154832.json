post_cb({"32155319": {"Id": "32155319", "PostTypeId": "2", "Body": "<p>Assuming that \"undefined behaviour for a compiler\" means \"there are no requirements on the behaviour of the executable program produced\" then the behaviour of the compiler is undefined when presented with source code containing undefined behaviour constructs.  </p>\n<p>Compare this with the behaviour of the compiler with correct source code. All compilers adhering to the standard must produce executable code with equivalent behaviour, the one defined by the standard for the correct source code.</p>\n", "LastActivityDate": "2015-08-22T10:55:44.250", "CommentCount": "1", "CreationDate": "2015-08-22T10:55:44.250", "ParentId": "32154832", "Score": "1", "OwnerUserId": "956880"}, "32155496": {"Id": "32155496", "PostTypeId": "2", "Body": "<p>If a code has <strong>undefined behaviour</strong> it means that the standards does not know how to <em>handle</em> such thing. Thus it can give any output. I think it doesn't have to do with compiler as it doesn't make sense. It makes sense that it has to be the <em>implementation</em> that works according to standards.</p>\n<p>So, if standards don't know how to handle such code, then how can compilers give a <em>defined output</em>?</p>\n", "LastEditorUserId": "2692339", "LastActivityDate": "2015-08-22T15:46:19.777", "Score": "2", "CreationDate": "2015-08-22T11:18:30.977", "ParentId": "32154832", "CommentCount": "0", "OwnerUserId": "4606734", "LastEditDate": "2015-08-22T15:46:19.777"}, "32154945": {"Id": "32154945", "PostTypeId": "2", "Body": "<p>That's a pretty blurry line as a whole. The point is that the source code does not have a defined behaviour, which means the behaviour of the generated code is not well defined. </p>\n<p>The compiler should, by all accounts behave in some defined way - but of course, that could be rather \"random\" (e.g. the compiler may choose to insert a random number into your calculation - or even a call to <code>rand</code> - and it's still perfectly within the rights of the compiler). There are certainly cases where the compiler (ab)uses the fact that it knows something is undefined to make optimisations.</p>\n<p>I would consider it a very poor implementation of the compiler if, for example, the compiler crashes or causes the hard-disk to be formatted, but I believe the compiler may be still \"right\" if it says \"This is undefined, I refuse to compile it\" [in some manner]. </p>\n<p>Of course, there are (quite a lot of) situations where something is undefined, not because the construct itself is undefined, but because it's \"hard to define a single behaviour that is possible to implement in many places\" - for example, using an invalid pointer (<code>int* p = (int*) rand();</code> or use-after-free) is undefined, but the compiler may not know and understand if it's correct or not. Instead, it's up to the processor architecture what happens if you use a pointer at a random address, or after it has been freed. Both cases may result in a crash on one machine, not a crash, but an erroneous result on another, and in some cases \"you won't notice that anything is wrong\". This is clearly not the compiler's behaviour that is undefined, but the resulting program.</p>\n", "LastEditorUserId": "15168", "LastActivityDate": "2015-08-22T17:56:21.200", "Score": "3", "CreationDate": "2015-08-22T10:16:42.737", "ParentId": "32154832", "CommentCount": "0", "OwnerUserId": "1919155", "LastEditDate": "2015-08-22T17:56:21.200"}, "32154832": {"ViewCount": "230", "Body": "<p>When I <a href=\"https://stackoverflow.com/questions/32132574/does-undefined-behavior-really-permit-anything-to-happen/32141702#32141702\">answered</a> this <a href=\"https://stackoverflow.com/questions/32132574/does-undefined-behavior-really-permit-anything-to-happen\">question</a>, I wrote:</p>\n<blockquote>\n<p id=\"so_32154832_32154832_0\">First, it is important to note that it is not only the behaviour of the user program that is undefined, it is the behaviour of the compiler that is undefined.</p>\n</blockquote>\n<p>But there was <a href=\"https://stackoverflow.com/questions/32132574/does-undefined-behavior-really-permit-anything-to-happen#comment52191945_32141702\">disagreement in a comment</a>, so I want to ask the question here:</p>\n<p><strong>If the source code contains Undefined Behaviour, is it only the behaviour of the translated machine code that is undefined, or is the behaviour of the compiler undefined, too?</strong></p>\n<p>The standard defines the behaviour of an abstract machine (1.9):</p>\n<blockquote>\n<p id=\"so_32154832_32154832_1\">The semantic descriptions in this International Standard define a parameterized nondeterministic abstract\n  machine. This International Standard places no requirement on the structure of conforming implementations.\n  In particular, they need not copy or emulate the structure of the abstract machine. Rather, conforming\n  implementations are required to emulate (only) the observable behavior of the abstract machine as explained\n  below.</p>\n</blockquote>\n<p>Maybe the question is if the compiler is a part of that machine, and if yes, if that part is allowed to behave in an undefined way?</p>\n<hr>\n<p>A more practical version of this question would be:<br>\nAssume a compiler would crash or not produce any output when it finds UB on all control paths, like in this program:</br></p>\n<pre><code>int main() {\n    complex_things_without_UB();\n    int x = 42;\n    x = x++;  //UB here\n    return x;\n}\n</code></pre>\n<p>but otherwise it would always produce correct binaries. Would this still be a standard-compliant compiler?</p>\n</hr>", "Title": "Is the behaviour of the compiler undefined, with Undefined Behaviour?", "CreationDate": "2015-08-22T10:04:15.617", "LastActivityDate": "2015-08-25T14:59:37.473", "CommentCount": "8", "FavoriteCount": "3", "PostTypeId": "1", "LastEditDate": "2017-05-23T11:44:35.903", "LastEditorUserId": "-1", "Id": "32154832", "Score": "4", "OwnerUserId": "3435400", "Tags": "<c++><language-lawyer><undefined-behavior>", "AnswerCount": "7"}, "bq_ids": {"n4140": {"so_32154832_32157764_1": {"length": 14, "quality": 0.8235294117647058, "section_id": 5313}, "so_32154832_32154832_1": {"length": 33, "quality": 0.8918918918918919, "section_id": 5797}, "so_32154832_32157764_0": {"length": 25, "quality": 0.9615384615384616, "section_id": 5768}}, "n3337": {"so_32154832_32157764_1": {"length": 14, "quality": 0.8235294117647058, "section_id": 5110}, "so_32154832_32154832_1": {"length": 33, "quality": 0.8918918918918919, "section_id": 5570}, "so_32154832_32157764_0": {"length": 25, "quality": 0.9615384615384616, "section_id": 5541}}, "n4659": {"so_32154832_32157764_1": {"length": 14, "quality": 0.8235294117647058, "section_id": 6737}, "so_32154832_32154832_1": {"length": 33, "quality": 0.8918918918918919, "section_id": 7256}, "so_32154832_32157764_0": {"length": 25, "quality": 0.9615384615384616, "section_id": 7225}}}, "32154931": {"Id": "32154931", "PostTypeId": "2", "Body": "<p>The C++ standard defines behavior for code, it doesn't define behavior for the compiler. As such, it doesn't really make sense to refer to undefined behavior of the compiler -- it was never well-defined to begin with. The only requirement is that it produces an implementation that conforms to the standard guidelines for the code. <em>How</em> it does this is an implementation detail. </p>\n", "LastActivityDate": "2015-08-22T10:14:45.440", "CommentCount": "1", "CreationDate": "2015-08-22T10:14:45.440", "ParentId": "32154832", "Score": "5", "OwnerUserId": "2069064"}, "32154968": {"Id": "32154968", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_32154832_32154968_0\">is it only the behaviour of the translated machine code that is undefined, or is the behaviour of the compiler undefined, too?</p>\n</blockquote>\n<p>The ISO C and C++ describe what a C and C++ program look like. They do not describe the <em>environment</em> they run in. We generally use the term <em>compiler</em> to refer to the tool that translates C and C++ into machine code; formally, however, the term used is <em>implementation</em> which is definitely wider.</p>\n<p>Therefore, the only behavior which is undefined is the one of the program. This is also given by the definition of UB:</p>\n<blockquote>\n<p id=\"so_32154832_32154968_1\"><strong>undefined behavior</strong><br>\n  behavior, upon use of a nonportable or erroneous\n  <strong><em>program</em></strong> construct or of erroneous data, for which this International\n  Standard imposes no requirements</br></p>\n</blockquote>\n", "LastActivityDate": "2015-08-22T10:20:03.753", "CommentCount": "4", "CreationDate": "2015-08-22T10:20:03.753", "ParentId": "32154832", "Score": "2", "OwnerUserId": "2692339"}, "32157764": {"Id": "32157764", "PostTypeId": "2", "Body": "<p>My own take is that the <em>behavior</em> in \"undefined behavior\" is that of the <em>implementation</em>. The spec refers to a process of \"translation\" that we might equate with compilation, but the fact that you can compile a program to executable code is not relevant here, the result is still considered to be part of the implementation, at least in as far as behavior is concerned. Note that while the spec does define how a C program will behave, when it places requirements these are on the implementation, and the behavior of a program can also be considered a requirement (or set of requirements) on the implementation.</p>\n<p>In any case, undefined behaviour can certainly refer to behavior of the compiler. See the note in C11 3.4.3: </p>\n<blockquote>\n<p id=\"so_32154832_32157764_0\">Possible undefined behavior ranges from ignoring the situation completely with unpredictable results, to behaving during translation or program execution in a documented manner characteristic of the environment (with or without the issuance of a diagnostic message), to terminating a translation or execution (with the issuance of a diagnostic message).</p>\n</blockquote>\n<p>\"Terminating translation\" clearly refers to a compilation failure whereas \"terminating a ... execution\" clearly refers to behavior of a running program.</p>\n<p>See also Appendix J.2 which lists examples of undefined behavior. Amongst the examples are:</p>\n<blockquote>\n<p id=\"so_32154832_32157764_1\">A nonempty source file does not end in a new-line character which is not immediately preceded by a backslash character or ends in a partial preprocessing token or comment (5.1.1.2)</p>\n</blockquote>\n<p>It seems ridiculous that this should cause undefined behavior at execution time rather than at translation time. There are various other similar examples. The entire set clearly shows cases where undefined behaviour can occur at both compile time and run time.</p>\n", "LastEditorUserId": "388661", "LastActivityDate": "2015-08-22T15:40:53.307", "Score": "1", "CreationDate": "2015-08-22T15:25:23.567", "ParentId": "32154832", "CommentCount": "2", "OwnerUserId": "388661", "LastEditDate": "2015-08-22T15:40:53.307"}, "32155576": {"Id": "32155576", "PostTypeId": "2", "Body": "<p>There is no <em>compiler</em> mentioned in the standard and implementation details are up to the vendors.</p>\n<p>The standard defines <strong>how</strong> code should behave (in a syntactical and semantical way) and/or be constrained in complexity terms regarding some standard library algorithms. The source code doesn't have to have a precise behavior (nor this is defined anywhere). Every compiler just has to produce code that, under the <em>as-if</em> rule, is correct.</p>\n<p>It doesn't make sense to refer to undefined behavior of the compiler</p>\n", "LastActivityDate": "2015-08-22T11:28:29.590", "CommentCount": "2", "CreationDate": "2015-08-22T11:28:29.590", "ParentId": "32154832", "Score": "0", "OwnerUserId": "5254859"}});