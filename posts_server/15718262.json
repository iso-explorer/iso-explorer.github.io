post_cb({"bq_ids": {"n4140": {"so_15718262_15718279_5": {"length": 9, "quality": 1.0, "section_id": 5804}, "so_15718262_15718279_7": {"length": 20, "quality": 0.9090909090909091, "section_id": 5804}, "so_15718262_15718279_6": {"length": 17, "quality": 1.0, "section_id": 5804}, "so_15718262_15718279_3": {"length": 20, "quality": 0.7692307692307693, "section_id": 5800}, "so_15718262_15718279_4": {"length": 4, "quality": 0.8, "section_id": 5804}, "so_15718262_15718279_0": {"length": 33, "quality": 0.8918918918918919, "section_id": 5797}, "so_15718262_15718279_2": {"length": 37, "quality": 0.9736842105263158, "section_id": 5801}, "so_15718262_46455917_0": {"length": 4, "quality": 0.8, "section_id": 5804}, "so_15718262_15718279_8": {"length": 13, "quality": 0.6842105263157895, "section_id": 5804}, "so_15718262_15718279_9": {"length": 22, "quality": 1.0, "section_id": 480}, "so_15718262_15718279_1": {"length": 39, "quality": 0.9285714285714286, "section_id": 5797}}, "n3337": {"so_15718262_15718279_9": {"length": 19, "quality": 0.8636363636363636, "section_id": 471}, "so_15718262_15718279_6": {"length": 17, "quality": 1.0, "section_id": 5577}, "so_15718262_15718279_0": {"length": 33, "quality": 0.8918918918918919, "section_id": 5570}, "so_15718262_15718279_1": {"length": 39, "quality": 0.9285714285714286, "section_id": 5570}, "so_15718262_15718279_4": {"length": 4, "quality": 0.8, "section_id": 5577}, "so_15718262_15718279_3": {"length": 20, "quality": 0.7692307692307693, "section_id": 5573}, "so_15718262_15718279_5": {"length": 9, "quality": 1.0, "section_id": 5577}, "so_15718262_15718279_2": {"length": 37, "quality": 0.9736842105263158, "section_id": 5574}, "so_15718262_15718279_8": {"length": 13, "quality": 0.6842105263157895, "section_id": 5577}, "so_15718262_15718279_7": {"length": 20, "quality": 0.9090909090909091, "section_id": 5577}, "so_15718262_46455917_0": {"length": 4, "quality": 0.8, "section_id": 5577}}, "n4659": {"so_15718262_15718279_5": {"length": 7, "quality": 0.7777777777777778, "section_id": 7262}, "so_15718262_15718279_9": {"length": 22, "quality": 1.0, "section_id": 502}, "so_15718262_15718279_6": {"length": 17, "quality": 1.0, "section_id": 7262}, "so_15718262_15718279_0": {"length": 33, "quality": 0.8918918918918919, "section_id": 7256}, "so_15718262_15718279_4": {"length": 4, "quality": 0.8, "section_id": 7262}, "so_15718262_15718279_3": {"length": 20, "quality": 0.7692307692307693, "section_id": 7259}, "so_15718262_15718279_2": {"length": 37, "quality": 0.9736842105263158, "section_id": 7260}, "so_15718262_15718279_1": {"length": 39, "quality": 0.9285714285714286, "section_id": 7256}, "so_15718262_15718279_8": {"length": 13, "quality": 0.6842105263157895, "section_id": 7262}, "so_15718262_15718279_7": {"length": 20, "quality": 0.9090909090909091, "section_id": 7262}, "so_15718262_46455917_0": {"length": 4, "quality": 0.8, "section_id": 7262}}}, "15718262": {"ViewCount": "5045", "Body": "<p>As the title says,     </p>\n<blockquote>\n<p id=\"so_15718262_15718262_0\"><strong><a href=\"http://en.cppreference.com/w/cpp/language/as_if\">What exactly is the \"as-if\" rule?</a></strong> </p>\n</blockquote>\n<p>An typical answer one would get is:    </p>\n<blockquote>\n<p id=\"so_15718262_15718262_1\">The rule that allows any and all code transformations that do not change the observable behavior of the program</p>\n</blockquote>\n<p>From time to time we keep getting behaviors from certain implementations which are attributed to this rule. Many a times wrongly. So, What exactly is this rule. The standard does not clearly mention this rule as a section or paragraph, so what exactly falls under the purview of this rule? To me it seems like a grey area which is not defined in detail by the standard. Can someone elaborate on the details citing the references from the standard.</p>\n<p><sup>Note: Tagging this as C and C++ both, because it is relevant to both languages.</sup></p>\n", "AcceptedAnswerId": "15718279", "Title": "What exactly is the \"as-if\" rule?", "CreationDate": "2013-03-30T11:57:32.053", "Id": "15718262", "CommentCount": "1", "FavoriteCount": "25", "PostTypeId": "1", "LastActivityDate": "2017-09-27T19:45:20.613", "Score": "62", "OwnerUserId": "452307", "Tags": "<c++><c><optimization>", "AnswerCount": "2"}, "46455917": {"Id": "46455917", "PostTypeId": "2", "Body": "<p>In C11 the rule is never called by that name. However C, just like C++, defines the behaviour in terms of abstract machine. The as-if rule is in <a href=\"http://port70.net/~nsz/c/c11/n1570.html#5.1.2.3\" rel=\"nofollow noreferrer\">C11 5.1.2.3p6</a>:</p>\n<blockquote>\n<ol start=\"6\">\n<li><p id=\"so_15718262_46455917_0\">The least requirements on a conforming implementation are:</p>\n<ul>\n<li>Accesses to <code>volatile</code> objects are evaluated strictly according to the rules of the abstract machine.</li>\n<li>At program termination, all data written into files shall be identical to the result that execution of the program according to the abstract semantics would have produced.</li>\n<li>The input and output dynamics of interactive devices shall take place as specified in <a href=\"http://port70.net/~nsz/c/c11/n1570.html#7.21.3\" rel=\"nofollow noreferrer\">7.21.3</a>. The intent of these requirements is that unbuffered or line-buffered output appear as soon as possible, to ensure that prompting messages actually appear prior to a program waiting for input. </li>\n</ul>\n<p id=\"so_15718262_46455917_1\">\u00a0</p>\n<p id=\"so_15718262_46455917_2\">This is the observable behavior of the program.</p></li>\n</ol>\n</blockquote>\n", "LastEditorUserId": "918959", "LastActivityDate": "2017-09-27T19:45:20.613", "Score": "4", "CreationDate": "2017-09-27T19:36:09.667", "ParentId": "15718262", "CommentCount": "0", "OwnerUserId": "918959", "LastEditDate": "2017-09-27T19:45:20.613"}, "15718279": {"Id": "15718279", "PostTypeId": "2", "Body": "<h1><strong>What is the \"<em>as-if</em>\" rule?</strong></h1>\n<p>The \"<em>as-if</em>\" rule basically defines what transformations an implementation is allowed to perform on a legal C++ program. In short, all transformations that do not affect a program's \"<em>observable behavior</em>\" (see below for a precise definition) are allowed. </p>\n<p>The goal is to give implementations freedom to perform optimizations as long as the behavior of the program remains compliant with the semantics specified by the C++ Standard in terms of an abstract machine.</p>\n<hr>\n<h1><strong>Where does the Standard introduce this rule?</strong></h1>\n<p>The C++11 Standard introduces the \"<em>as-if</em>\" rule in Paragraph 1.9/1:</p>\n<blockquote>\n<p id=\"so_15718262_15718279_0\">The semantic descriptions in this International Standard define a parameterized nondeterministic abstract\n  machine. This International Standard places no requirement on the structure of conforming implementations.\n  In particular, they need not copy or emulate the structure of the abstract machine. Rather, conforming\n  implementations are required to emulate (only) the <strong>observable behavior</strong> of the abstract machine as explained\n  below.</p>\n</blockquote>\n<p>Also, an explanatory footnote adds:</p>\n<blockquote>\n<p id=\"so_15718262_15718279_1\"><strong>This provision is sometimes called the \u201cas-if\u201d rule</strong>, because an implementation is free to disregard any requirement of this\n  International Standard as long as the result is as if the requirement had been obeyed, as far as can be determined from the\n  observable behavior of the program. For instance, an actual implementation need not evaluate part of an expression if it can\n  deduce that its value is not used and that no side effects affecting the observable behavior of the program are produced.</p>\n</blockquote>\n<hr>\n<h1><strong>What does the rule mandate exactly?</strong></h1>\n<p>Paragraph 1.9/5 further specifies:</p>\n<blockquote>\n<p id=\"so_15718262_15718279_2\">A conforming implementation <strong><em>executing a well-formed program</em> shall produce the same observable behavior\n  as one of the possible executions of the corresponding instance of the abstract machine with the same program\n  and the same input</strong>. However, if any such execution contains an undefined operation, this International\n  Standard places no requirement on the implementation executing that program with that input (not even\n  with regard to operations preceding the first undefined operation).</p>\n</blockquote>\n<p>It is worth stressing that this constraint applies when <em>\"executing a well-formed program\"</em> only, and that the possible outcomes of executing a program which contains undefined behavior are unconstrained. This is made explicit in Paragraph 1.9/4 as well:</p>\n<blockquote>\n<p id=\"so_15718262_15718279_3\">Certain other operations are described in this International Standard as undefined (for example, the effect\n  of attempting to modify a const object). [ Note: <strong>This International Standard imposes no requirements on\n  the behavior of programs that contain undefined behavior</strong>. \u2014end note ]</p>\n</blockquote>\n<p>Finally, concerning the definition of \"<em>observable behavior</em>\", Paragraph 1.9/8 goes as follows:</p>\n<blockquote>\n<p id=\"so_15718262_15718279_4\">The least requirements on a conforming implementation are:</p>\n<p id=\"so_15718262_15718279_5\">\u2014 Access to volatile objects are evaluated strictly according to the rules of the abstract machine.</p>\n<p id=\"so_15718262_15718279_6\">\u2014 At program termination, all data written into files shall be identical to one of the possible results that\n  execution of the program according to the abstract semantics would have produced.</p>\n<p id=\"so_15718262_15718279_7\">\u2014 The input and output dynamics of interactive devices shall take place in such a fashion that prompting\n  output is actually delivered before a program waits for input. What constitutes an interactive device\n  is implementation-defined.</p>\n<p id=\"so_15718262_15718279_8\"><strong>These collectively are referred to as the observable behavior of the program</strong>. [ <em>Note</em>: More stringent\n  correspondences between abstract and actual semantics may be defined by each implementation. \u2014<em>end\n  note</em> ]</p>\n</blockquote>\n<hr>\n<h1><strong>Are there situations where this rule does not apply?</strong></h1>\n<p>To the best of my knowledge, the only exception to the \"<em>as-if</em>\" rule is copy/move elision, which is allowed even though the copy constructor, move constructor, or destructor of a class have side effects. The exact conditions for this are specified in Paragraph 12.8/31:</p>\n<blockquote>\n<p id=\"so_15718262_15718279_9\">When certain criteria are met, an implementation is allowed to omit the copy/move construction of a class\n  object, <strong>even if the constructor selected for the copy/move operation and/or the destructor for the object\n  have side effects</strong>. [...]</p>\n</blockquote>\n</hr></hr></hr>", "LastEditorUserId": "1932150", "LastActivityDate": "2013-03-30T15:15:07.463", "Score": "70", "CreationDate": "2013-03-30T11:59:27.263", "ParentId": "15718262", "CommentCount": "27", "OwnerUserId": "1932150", "LastEditDate": "2013-03-30T15:15:07.463"}});