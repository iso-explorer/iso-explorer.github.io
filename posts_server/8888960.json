post_cb({"8890484": {"PostTypeId": "2", "ParentId": "8888960", "Body": "<p>You probably want this instead:</p>\n<pre><code>#include &lt;type_traits&gt;\n\nif (std::is_same&lt;int, const int&gt;::value)\n    std::cout &lt;&lt; \"same types\\n\";\nelse\n    std::cout &lt;&lt; \"different types\\n\";\n</code></pre>\n", "CreationDate": "2012-01-17T06:18:50.740", "Score": "3", "CommentCount": "0", "Id": "8890484", "OwnerUserId": "252000", "LastActivityDate": "2012-01-17T06:18:50.740"}, "8888960": {"AcceptedAnswerId": "8889143", "OwnerUserId": "1044776", "LastActivityDate": "2012-01-17T06:18:50.740", "CreationDate": "2012-01-17T02:28:22.167", "Score": "13", "CommentCount": "0", "Title": "why typeid returns that int and const int are same types", "AnswerCount": "2", "PostTypeId": "1", "Tags": "<c++><typeid>", "Body": "<pre><code>if(typeid(int) == typeid(const int))\n       cout &lt;&lt; \"Same types\"&lt;&lt; endl;\n</code></pre>\n<p><strong>PROGRAM OUTPUT:</strong></p>\n<blockquote>\n<p id=\"so_8888960_8888960_0\">Same types</p>\n</blockquote>\n<p>am I missing something?\nthese are not same types lol.</p>\n", "Id": "8888960", "ViewCount": "2013"}, "8889143": {"PostTypeId": "2", "ParentId": "8888960", "Body": "<p>They aren't the same type, but the <code>typeid</code> operator strips <code>const</code> and <code>volatile</code>.</p>\n<p>From section 5.2.8 <code>[expr.typeid]</code>:</p>\n<blockquote>\n<p id=\"so_8888960_8889143_0\">The top-level <em>cv-qualifiers</em> of the glvalue expression or the <em>type-id</em> that is the operand of <code>typeid</code> are always ignored.</p>\n</blockquote>\n", "CreationDate": "2012-01-17T02:57:25.643", "Score": "14", "CommentCount": "0", "Id": "8889143", "OwnerUserId": "103167", "LastActivityDate": "2012-01-17T02:57:25.643"}, "bq_ids": {"n3337": {"so_8888960_8889143_0": {"quality": 0.9, "length": 9, "section_id": 5792}}}});