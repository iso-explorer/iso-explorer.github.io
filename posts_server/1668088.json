post_cb({"1668147": {"ParentId": "1668088", "CommentCount": "0", "Body": "<p>Use std::advance. It is just as efficient (it uses iterator traits to just do iterator addition for random access iterators), and is more general in that it works on other kinds of iterators as well.</p>\n", "OwnerUserId": "115387", "PostTypeId": "2", "Id": "1668147", "Score": "0", "CreationDate": "2009-11-03T15:43:40.517", "LastActivityDate": "2009-11-03T15:43:40.517"}, "1670904": {"ParentId": "1668088", "CommentCount": "0", "Body": "<p>If you're never going to change the container (and you probably aren't), use + because it's easy to see and understand and leaves the code less cluttered. </p>\n<p>If you think you want to change the container, OR if you are working inside a template that might be instantiated on various container types, use advance because it works with anything.</p>\n<p>As a general rule, I don't worry about changing container types because I've found that when I do have to change a container type, I end up revisiting everywhere that container is used anyway, just to be sure I'm not doing anything that's suddenly stupid (like randomly plucking elements out of the middle of a list).</p>\n", "OwnerUserId": "5801", "PostTypeId": "2", "Id": "1670904", "Score": "0", "CreationDate": "2009-11-03T23:49:22.710", "LastActivityDate": "2009-11-03T23:49:22.710"}, "1668111": {"ParentId": "1668088", "LastEditDate": "2015-11-18T16:22:34.593", "CommentCount": "1", "CreationDate": "2009-11-03T15:38:31.487", "OwnerUserId": "179910", "LastEditorUserId": "179910", "PostTypeId": "2", "Id": "1668111", "Score": "15", "Body": "<p>Adding will only work with random access iterators. std::advance will work with all sorts of iterators. As long as you're only dealing with iterators into vectors, it makes no real difference, but std::advance keeps your code more generic (e.g. you could substitute a list for the vector, and that part would still work).</p>\n<p>Edit: For those who care, the standard describes <code>advance</code> and <code>distance</code> as follows (\u00a724.3.4/1):</p>\n<blockquote>\n<p id=\"so_1668088_1668111_0\">Since only random access iterators provide + and - operators, the library provides two function templates <code>advance</code> and <code>distance</code>. These function templates use <code>+</code> and <code>-</code> for random access iterators (and are, therefore, constant time for them); for input, forward and bidirectional iterators they use <code>++</code> to provide linear time implementations.</p>\n</blockquote>\n", "LastActivityDate": "2015-11-18T16:22:34.593"}, "1668133": {"ParentId": "1668088", "CommentCount": "0", "Body": "<p><code>std::adnvance</code> is generic - it is useful if you don't always know type of underlying container - it works in all cases.</p>\n<p>Yet it is efficient: <code>std::advance</code> will do an optimisation if it passed an RandomAccessIterator (like one from <code>std::vector</code>) and will increase iterator in loop for ForwardAccessIterator (as like one in <code>std::list</code>).</p>\n", "OwnerUserId": "168727", "PostTypeId": "2", "Id": "1668133", "Score": "0", "CreationDate": "2009-11-03T15:41:28.433", "LastActivityDate": "2009-11-03T15:41:28.433"}, "1668088": {"CommentCount": "0", "ViewCount": "5898", "LastActivityDate": "2015-11-18T16:22:34.593", "Body": "<p>I found myself writing the following a lot:</p>\n<pre><code>int location =2;\nvector&lt;int&gt; vec;\nvector&lt;int&gt;::iterator it=vec.begin();\n\n/..../\nstd::advance(it, location);\n</code></pre>\n<p>instead of </p>\n<pre><code> it= it + 5;\n</code></pre>\n<p>what is the Preferred/Recommended way ?</p>\n", "PostTypeId": "1", "AcceptedAnswerId": "1668111", "FavoriteCount": "3", "Title": "Advance iterator for the std::vector std::advance VS operator +?", "Id": "1668088", "Score": "9", "CreationDate": "2009-11-03T15:34:53.460", "Tags": "<c++><stl>", "OwnerUserId": "149045", "AnswerCount": "7"}, "1670870": {"ParentId": "1668088", "CommentCount": "0", "Body": "<p>That depends on what you need: </p>\n<p>If you need <strong><em>genericity</em></strong>, use <code>std::advance(it,2)</code>. If someone comes along and changes your <code>std::vector</code> into a <code>std::list</code>, the code will still compile, even though advancing now takes linear time instead of constant time. </p>\n<p>If you need <strong><em>performance</em></strong>, use <code>it+=2</code>. If someone comes along and changes your <code>std::vector</code> into a <code>std::list</code>, the code will fail to compile, pointing (maybe with a helpful comment) at a serious performance issue. </p>\n", "OwnerUserId": "140719", "PostTypeId": "2", "Id": "1670870", "Score": "7", "CreationDate": "2009-11-03T23:39:35.893", "LastActivityDate": "2009-11-03T23:39:35.893"}, "1668105": {"ParentId": "1668088", "CommentCount": "0", "Body": "<p><code>std::advance</code> works on non-random iterators too while the <code>+=</code> version on works on random access sequences (vectors and the like).</p>\n", "OwnerUserId": "108796", "PostTypeId": "2", "Id": "1668105", "Score": "0", "CreationDate": "2009-11-03T15:38:04.523", "LastActivityDate": "2009-11-03T15:38:04.523"}, "bq_ids": {"n4140": {"so_1668088_1668111_0": {"section_id": 5593, "quality": 0.9705882352941176, "length": 33}}, "n3337": {"so_1668088_1668111_0": {"section_id": 5376, "quality": 0.9705882352941176, "length": 33}}, "n4659": {"so_1668088_1668111_0": {"section_id": 7037, "quality": 0.9705882352941176, "length": 33}}}, "1668103": {"ParentId": "1668088", "CommentCount": "6", "Body": "<p>It depends on the iterator. <code>it=it+5</code> is faster if it's supported (it's only supported on random access iterators). If you want to advance a less-capable iterator (e.g. a forward iterator, or a bidirectional iterator), then you can use <code>std::advance</code>, but it's slower because it actually walks across all of the intermediate elements.</p>\n", "OwnerUserId": "197788", "PostTypeId": "2", "Id": "1668103", "Score": "0", "CreationDate": "2009-11-03T15:37:34.530", "LastActivityDate": "2009-11-03T15:37:34.530"}});