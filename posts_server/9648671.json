post_cb({"9648769": {"ParentId": "9648671", "CommentCount": "4", "Body": "<p>From the standard (N3242, 7.1.2.4):</p>\n<blockquote>\n<p id=\"so_9648671_9648769_0\">An inline function shall be defined in every translation unit in which\n  it is used and shall have exactly the same definition in every case.</p>\n</blockquote>\n<p>Have a look here as well: <a href=\"http://www.parashift.com/c++-faq-lite/inline-functions.html#faq-9.7\" rel=\"nofollow\">How do you tell the compiler to make a member function inline?</a></p>\n", "OwnerUserId": "404421", "PostTypeId": "2", "Id": "9648769", "Score": "4", "CreationDate": "2012-03-10T17:53:48.590", "LastActivityDate": "2012-03-10T17:53:48.590"}, "9648697": {"ParentId": "9648671", "CommentCount": "1", "Body": "<blockquote>\n<p id=\"so_9648671_9648697_0\">an inline function is a function upon which the compiler has been requested to perform inline expansion.</p>\n</blockquote>\n<p>Hence, the whole point of an <a href=\"http://en.wikipedia.org/wiki/Inline_function\" rel=\"nofollow\"><code>inline</code> function</a> is that it is implemented <em>in line</em>. There isn't any way to define it in another source file if you still want it to be an <code>inline</code> function.</p>\n", "OwnerUserId": "753341", "PostTypeId": "2", "Id": "9648697", "Score": "0", "CreationDate": "2012-03-10T17:45:52.677", "LastActivityDate": "2012-03-10T17:45:52.677"}, "9648694": {"ParentId": "9648671", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>when you define an inline member function, you should prepend the member function's definition with the keyword inline, and you put the definition into a header file.    </p>\n<p>When you declare a function inline basically You are telling the compiler to (if possible)replace the code for calling the function with the contents of the function wherever the function is called. The idea is that the function body is is probably small and calling the function is more overhead than the body of the function itself.</p>\n<p>To be able to do this the compiler needs to see the definition while compiling the code which calls the function this essentially means that the definition has to reside in the header because the code which calls the function only has access to the header file.</p>\n<p>Good Read:<br>\n<strong><a href=\"http://www.parashift.com/c++-faq-lite/inline-functions.html#faq-9.7\" rel=\"noreferrer\">[9.7] How do you tell the compiler to make a member function inline?</a></strong></br></p>\n", "OwnerUserId": "452307", "LastEditorUserId": "452307", "LastEditDate": "2012-03-10T17:59:18.080", "Id": "9648694", "Score": "9", "CreationDate": "2012-03-10T17:45:40.443", "LastActivityDate": "2012-03-10T17:59:18.080"}, "9648701": {"ParentId": "9648671", "CommentCount": "0", "Body": "<p>Because of the way C++ is compiled in to separate compilation unit (each cpp file typically), the compilation of one cpp file know not of the implmentation of the inlined function in another compilation unit so can't inline it.</p>\n<p>The solution is to put the implementation of the inlined function in the header file this way all files using the head have access to the implementation,</p>\n", "OwnerUserId": "401196", "PostTypeId": "2", "Id": "9648701", "Score": "1", "CreationDate": "2012-03-10T17:46:41.430", "LastActivityDate": "2012-03-10T17:46:41.430"}, "9648708": {"ParentId": "9648671", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The compiler needs the complete definition of the function so that it could be <em>inlined</em> where it is called from. That is possible only if you define it in the header itself.</p>\n<p>How does <code>inline</code> function work?</p>\n<p>Say, you define this:</p>\n<pre><code> inline void increment(int &amp;i) { ++i; }\n</code></pre>\n<p>and then use it as:</p>\n<pre><code>int i = 0;\nwhile( i &lt; N )\n{\n    std::cout &lt;&lt; i &lt;&lt; std::endl;\n    increment(i);\n}\n</code></pre>\n<p>then the compiler translates this code into this (roughly speaking):</p>\n<pre><code>int i = 0;\nwhile( i &lt; N )\n{\n    std::cout &lt;&lt; i &lt;&lt; std::endl;\n    ++i; //replaced the call with the equivalent code which the function \n         //actually executes to produce the same effect\n         //(edit typo) it replaces to ++i and not i++ as it was the original.\n}\n</code></pre>\n<p>Such replacement of function-call with the code of function itself is said to be <em>inlined</em>. You can say, the function is inlined. </p>\n<p>Note that the <code>inline</code> keyword is just a hint for the compiler : it tells the compiler <em>if possible</em> inline me. It is not guaranteed that every <code>inline</code> function call will be <em>inlined</em> by the compiler.</p>\n", "OwnerUserId": "415784", "LastEditorUserId": "739009", "LastEditDate": "2015-06-12T17:32:10.187", "Id": "9648708", "Score": "4", "CreationDate": "2012-03-10T17:47:41.703", "LastActivityDate": "2015-06-12T17:32:10.187"}, "9648671": {"CommentCount": "3", "ViewCount": "5750", "CreationDate": "2012-03-10T17:42:38.023", "LastActivityDate": "2015-06-12T17:32:10.187", "Title": "Why I can't define inline member function in another file?", "AcceptedAnswerId": "9648694", "PostTypeId": "1", "Id": "9648671", "Score": "8", "Body": "<p>I have three files:</p>\n<p><p><strong>1. Joy.h</strong></p>\n<pre><code>class Joy\n{\npublic:\n    void test();\n};\n</code></pre>\n<p><p><b>2. Joy.cpp</b>\n<p></p>\n<pre><code>#include \"Joy.h\"\ninline void Joy::test() {}\n</code></pre>\n<p><p><b>3. main.cpp</b>\n<p></p>\n<pre><code>#include \"Joy.h\"    \nint main()\n{\n    Joy r;        \n    r.test();        \n    return 0;\n}\n</code></pre>\n<p>I try to compile them using:</p>\n<pre><code>g++ cpp Joy.cpp\n</code></pre>\n<p>g++ say:</p>\n<pre><code>main.cpp:(.text+0x10): undefined reference to `Joy::test()'\n</code></pre>\n<p>Who can tell me why...\n<p>How to solve this problem if I don't want to define that <code>test()</code> function in the .h file and still want it to be an <code>inline</code> function?</p>\n</p></p></p></p></p></p>", "Tags": "<c++><inline>", "OwnerUserId": "1253826", "AnswerCount": "5"}, "bq_ids": {"n4140": {"so_9648671_9648769_0": {"section_id": 5404, "quality": 1.0, "length": 12}}, "n3337": {"so_9648671_9648769_0": {"section_id": 5199, "quality": 1.0, "length": 12}}, "n4659": {"so_9648671_9648769_0": {"section_id": 6853, "quality": 1.0, "length": 12}}}});