post_cb({"15752887": {"ParentId": "15751618", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>The order that members are declared (not the order in the initializer list, though, so be careful) is the order of construction.  You should be fine if you declare the thread member last as long as having all members constructed is sufficient to establish a consistent state.</p>\n<p>However, if you don't want to rely on that, you can start your thread at the end of the constructor with something like this:</p>\n<pre><code>// Constructor\nMyThread() {\n  // Initialize everything else...\n\n  boost::thread t(boost::bind(&amp;MyThread::run, this));\n  m_thread.swap(t);\n}\n</code></pre>\n<p>Regarding the safety of using the <code>this</code> pointer, the standard says in 12.6.2:</p>\n<blockquote>\n<p id=\"so_15751618_15752887_0\">Note: because the <em>mem-initializer</em> are evaluated in the scope of the\n  constructor, the <em>this</em> pointer can be used in the <em>expression-list</em> of a\n  <em>mem-initializer</em> to refer to the object being initialized.</p>\n</blockquote>\n<p>and</p>\n<blockquote>\n<p id=\"so_15751618_15752887_1\">Member functions (including virtual member functions, 10.3) can be\n  called for an object under construction.</p>\n</blockquote>\n<p>You just have to avoid accessing what has not yet been constructed.  That can include calling member functions before all base classes have been initialized:</p>\n<pre><code>class Derived : public Base {\npublic:\n  Derived()\n    : Base(foo())  // foo() undefined because base class not initialized\n  {\n  }\n\n  int foo() { return 0; }\n};\n</code></pre>\n", "OwnerUserId": "1462337", "LastEditorUserId": "1462337", "LastEditDate": "2013-04-02T00:28:39.923", "Id": "15752887", "Score": "2", "CreationDate": "2013-04-01T22:16:21.630", "LastActivityDate": "2013-04-02T00:28:39.923"}, "15751618": {"CommentCount": "0", "ViewCount": "2554", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2013-04-01T20:48:59.387", "LastActivityDate": "2013-04-02T00:28:39.923", "Title": "Initialize boost thread in object constructor?", "AcceptedAnswerId": "15752887", "LastEditDate": "2017-05-23T12:28:52.893", "Id": "15751618", "Score": "2", "Body": "<p>I want to write a wrapper for boost thread to specialize a threading model.  My <code>run()</code> function is going to be a member function of the same class that is using <code>boost::thread</code> as the aggregate thread object.  Consider:</p>\n<pre><code>class Thread {\npublic:\n  Thread(...) : m_thread(&amp;Thread::run, this) {}\n\nprivate:\n  void run() { ... }\n  boost::thread m_thread;\n};\n</code></pre>\n<p><a href=\"https://stackoverflow.com/questions/3509447/initialize-a-reference-warning-c4355-this-used-in-base-member-initializer\">This is potentially dangerous</a> because <code>this</code> is not yet fully constructed.  However, if I can guarantee that all members of the object used by <code>run()</code> are initialized prior-to initialization of the boost thread, could this actually be considered safe?</p>\n<p>The only workaround I can think of that guarantees safety is to have a subclass that guarantees full construction of an object that can be used by the constructor of <code>Thread</code>:</p>\n<pre><code>class Thread {\npublic:\n  Thread(...) : m_impl(...), m_thread(&amp;ThreadImpl::run, &amp;m_impl) {}\n\nprivate:\n  class ThreadImpl {\n    ThreadImpl(...) { }\n    void run() { ... }\n  }\n\n  ThreadImpl m_impl;\n  boost::thread m_thread;\n};\n</code></pre>\n<p>Is there a common way to do this?  The <code>ThreadImpl</code> class seems like a lot of overhead for such a trivial issue.</p>\n", "Tags": "<c++><constructor><boost-thread>", "OwnerUserId": "2179687", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_15751618_15752887_1": {"section_id": 441, "quality": 0.9166666666666666, "length": 11}, "so_15751618_15752887_0": {"section_id": 440, "quality": 0.8571428571428571, "length": 12}}, "n3337": {"so_15751618_15752887_1": {"section_id": 432, "quality": 0.9166666666666666, "length": 11}, "so_15751618_15752887_0": {"section_id": 431, "quality": 0.8571428571428571, "length": 12}}, "n4659": {"so_15751618_15752887_1": {"section_id": 461, "quality": 0.9166666666666666, "length": 11}, "so_15751618_15752887_0": {"section_id": 460, "quality": 0.8571428571428571, "length": 12}}}});