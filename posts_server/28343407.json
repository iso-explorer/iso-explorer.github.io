post_cb({"28343407": {"ViewCount": "78", "Body": "<p>suppose I define a copy c'tor for a class B that inherits A and has a also member variables.\nInside the copt c'tor body I write some code, but in the initiallization list I don't call explicitly to A c'tor(also not to copy c'tor), and not initiallize the member variables.</p>\n<p>In this case A default c'tor will be called defaultly before reaching B' copy c'tor body.\nBut what would be with the member variables?\nwould they be initillized with their default c'tor or with their copy c'tor with the arguement object's members (the argument object == given to B copy c'tor).</p>\n<p>In addition, if there is calling inside the initiallization list to some members' copy c'tor/c'tor or to Parent class copy c'tor/c'tor - would that behaviour be changed?</p>\n<p>I know that in case we don't define explicitly copy c'tor: Parent Class and members copy c'tor's are called.</p>\n<p>What should I expect in here? </p>\n", "AcceptedAnswerId": "28343506", "Title": "default behaviour of defined copy constructor c++", "CreationDate": "2015-02-05T11:59:06.493", "Id": "28343407", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2015-02-05T12:04:31.157", "Score": "2", "OwnerUserId": "324922", "Tags": "<c++><initialization><copy-constructor>", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_28343407_28343506_0": {"length": 17, "quality": 1.0, "section_id": 435}, "so_28343407_28343506_1": {"length": 21, "quality": 0.9130434782608695, "section_id": 365}}, "n3337": {"so_28343407_28343506_0": {"length": 14, "quality": 0.8235294117647058, "section_id": 427}, "so_28343407_28343506_1": {"length": 13, "quality": 0.5652173913043478, "section_id": 359}}, "n4659": {"so_28343407_28343506_0": {"length": 17, "quality": 1.0, "section_id": 454}, "so_28343407_28343506_1": {"length": 21, "quality": 0.9130434782608695, "section_id": 377}}}, "28343468": {"Id": "28343468", "PostTypeId": "2", "Body": "<p>If you write a copy-constructor and do not initialize a member variable then it will be default-initialized.</p>\n<p>The same applies to base classes, in most ways they are treated the same as member variables.</p>\n<p>Here is some sample code that will demonstrate:</p>\n<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nstruct S\n{\n    S() { cout &lt;&lt; \"S()\\n\"; }\n    S(S const &amp;) { cout &lt;&lt; \"S(S&amp;)\\n\"; }\n};\n\nstruct T : S\n{\n    T() {}\n    T(T const &amp;t) {}\n\n    // you have to explicitly write this if you want it \n    // T(T const &amp;t): S(t) {}\n    //                ^^^^\n};\n\nint main()\n{\n    T t;\n    T u(t);\n}\n</code></pre>\n", "LastActivityDate": "2015-02-05T12:02:31.970", "CommentCount": "0", "CreationDate": "2015-02-05T12:02:31.970", "ParentId": "28343407", "Score": "1", "OwnerUserId": "1505939"}, "28343506": {"Id": "28343506", "PostTypeId": "2", "Body": "<p>The base class subobject will be default initialized in that case. See [class.base.init]/8: </p>\n<blockquote>\n<p id=\"so_28343407_28343506_0\">In a non-delegating constructor, if a given potentially constructed\n  subobject is not designated by a <em>mem-initializer-id</em> (including the\n  case where there is no <em>mem-initializer-list</em> because the constructor\n  has no <em>ctor-initializer</em>), then</p>\n<ul>\n<li>if the entity is a non-static data member that has a <em>brace-or-equal-initializer</em>  [..]</li>\n<li>otherwise, if the entity is an anonymous union or a variant member (9.5), no initialization is performed;</li>\n<li><strong>otherwise, the entity is default-initialized (8.5).</strong></li>\n</ul>\n</blockquote>\n<p>And a potentially constructed subobject is defined in [special]/5:</p>\n<blockquote>\n<p id=\"so_28343407_28343506_1\">For a class, its non-static data members, <strong>its non-virtual direct base\n  classes</strong>, and, if the class is not abstract (10.4), its virtual base\n  classes are called its potentially constructed subobjects.</p>\n</blockquote>\n", "LastActivityDate": "2015-02-05T12:04:31.157", "CommentCount": "0", "CreationDate": "2015-02-05T12:04:31.157", "ParentId": "28343407", "Score": "2", "OwnerUserId": "3647361"}});