post_cb({"22780009": {"CommentCount": "1", "AcceptedAnswerId": "22783981", "PostTypeId": "1", "LastEditorUserId": "1009479", "CreationDate": "2014-04-01T08:03:00.797", "LastActivityDate": "2014-04-01T11:50:13.617", "LastEditDate": "2014-04-01T08:04:50.740", "ViewCount": "2656", "FavoriteCount": "1", "Title": "c++11 unrestricted unions example", "Id": "22780009", "Score": "4", "Body": "<p>I read <a href=\"http://www.stroustrup.com/C++11FAQ.html#unions\" rel=\"nofollow\">http://www.stroustrup.com/C++11FAQ.html#unions</a> </p>\n<p>but I can't compile the given example:</p>\n<pre><code>union U1 {\n    int m1;\n    complex&lt;double&gt; m2; // ok\n};\n\nunion U2 {\n    int m1;\n    string m3;  // ok\n};\n\nU1 u;       // ok\nu.m2 = {1,2};   // ok: assign to the complex member\n</code></pre>\n<p>Results in:</p>\n<pre><code>main.cpp:85:8: error: use of deleted function 'U1::U1()'\n     U1 u;       // ok\n        ^   \nmain.cpp:75:11: note: 'U1::U1()' is implicitly deleted because the default definition would be ill-formed:\n     union U1 {\n           ^   \nmain.cpp:77:25: error: union member 'U1::m2' with non-trivial 'constexpr std::complex&lt;double&gt;::complex(double, double)'\n         complex&lt;double&gt; m2; // ok\n                         ^   \nmain.cpp:86:5: error: 'u' does not name a type\n     u.m2 = {1,2};   // ok: assign to the complex member\n     ^   \nmake: *** [main.o] Error 1\n</code></pre>\n<p>Questions:</p>\n<p>I thought that in a nonrestricted union the first element will be constructed if no default constructor is manually given. Is this true and how to write a working example?</p>\n<p>The following one will also not compile:</p>\n<pre><code>class Y\n{   \n    public:\n        constexpr Y() {}\n};  \n\nunion X\n{   \n    int a;\n    float b;\n    Y x;\n    //X(){}\n};  \n\nX x;\n\nint main(){}\n</code></pre>\n<p>The same error messages:</p>\n<pre><code>main.cpp:112:7: error: use of deleted function 'X::X()'\n     X x;\n       ^   \nmain.cpp:104:11: note: 'X::X()' is implicitly deleted because the default definition would be ill-formed:\n     union X\n           ^   \nmain.cpp:108:11: error: union member 'X::x' with non-trivial 'constexpr Y::Y()'\n         Y x;\n           ^   \nmake: *** [main.o] Error 1\n</code></pre>\n", "Tags": "<c++11><unions>", "OwnerUserId": "878532", "AnswerCount": "2"}, "22783930": {"ParentId": "22780009", "CommentCount": "0", "Body": "<p>The problem is the presence of <code>m2</code> in the union. Because complex has a \"user-defined\" constructor, the constructor for the union that contains it is <code>deleted</code>.</p>\n<p>\"If a union has a member with a user-defined constructor, a copy operation, a move operation, or a destructor, then that special function is deleted for that union;\nthat is, it cannot be used for an object of the union type.\", The C++ Programming Language, p. 215.</p>\n<pre><code>union U { int m1;\ncomplex&lt;double&gt; m2; // complex has a constructor\nstring m3; // string has a constructor (maintaining a serious invariant) \n};\n</code></pre>\n<p>\"It is fortunate that U won\u2019t compile.\" (same reference)</p>\n", "OwnerUserId": "2902088", "PostTypeId": "2", "Id": "22783930", "Score": "0", "CreationDate": "2014-04-01T11:02:57.863", "LastActivityDate": "2014-04-01T11:02:57.863"}, "22783981": {"ParentId": "22780009", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>In the standard, [class.union] mentions in paragraph 2 (in the notes) tells this :</p>\n<blockquote>\n<p id=\"so_22780009_22783981_0\">A union can have member functions (including constructors and\n  destructors), but not virtual (10.3) functions. A union shall not have\n  base classes. A union shall not be used as a base class. If a union\n  contains a non-static data member of reference type the program is\n  ill-formed. At most one non-static data member of a union may have a\n  brace-or-equal-initializer. [ Note: If any non-static data member of a\n  union has a non-trivial default constructor (12.1), copy constructor\n  (12.8), move constructor (12.8), copy assignment operator (12.8), move\n  assignment operator (12.8), or destructor (12.4), the corresponding\n  member function of the union must be user-provided or it will be\n  implicitly deleted (8.4.3) for the union. \u2014 end note ]</p>\n</blockquote>\n<p>Since your class has not-default constructor, the compilation fails.</p>\n<p>Paragraph 3 even provides an example :</p>\n<pre><code>union U {\nint i;\nfloat f;\nstd::strings;\n};\n</code></pre>\n<p>and says :</p>\n<blockquote>\n<p id=\"so_22780009_22783981_1\">Since std::string (21.3) declares non-trivial versions of all of the special member functions, U will have an implicitly deleted default constructor, copy/move constructor, copy/move assignment operator, and destructor. To use U, some or all of these member functions must be user-provided.</p>\n</blockquote>\n<hr>\n<p>Bjarne wrote the same thing :</p>\n<blockquote>\n<p id=\"so_22780009_22783981_2\">If a union has a member with a user-defined constructor, copy, or destructor then that special function is deleted; that is, it cannot be used for an object of the union type. This is new. </p>\n</blockquote>\n<p>but wrong examples. Both <code>std::string</code> and <code>std::complex</code> have non-default constructors. Therefore, unions with those require union's constructor.</p>\n</hr>", "OwnerUserId": "476681", "LastEditorUserId": "476681", "LastEditDate": "2014-04-01T11:50:13.617", "Id": "22783981", "Score": "4", "CreationDate": "2014-04-01T11:05:55.570", "LastActivityDate": "2014-04-01T11:50:13.617"}, "bq_ids": {"n4140": {"so_22780009_22783981_0": {"section_id": 5914, "quality": 0.7297297297297297, "length": 54}, "so_22780009_22783981_1": {"section_id": 5915, "quality": 0.9655172413793104, "length": 28}}, "n3337": {"so_22780009_22783981_0": {"section_id": 5686, "quality": 0.8513513513513513, "length": 63}, "so_22780009_22783981_1": {"section_id": 5687, "quality": 0.9655172413793104, "length": 28}}, "n4659": {"so_22780009_22783981_0": {"section_id": 7406, "quality": 0.7432432432432432, "length": 55}, "so_22780009_22783981_1": {"section_id": 7407, "quality": 0.9655172413793104, "length": 28}}}});