post_cb({"38311599": {"ParentId": "38311348", "CommentCount": "1", "Body": "<p>From the spec, \u00a714.4, two types are equivalent if...</p>\n<blockquote>\n<p id=\"so_38311348_38311599_0\">\u2014 their corresponding template template-arguments refer to the same template.</p>\n</blockquote>\n<p>But you have two different <em>alias templates</em> (\u00a714.5.7).  They are not type aliases.</p>\n<blockquote id=\"so_38311348_38311599_1\">\n<ol>\n<li>A template-declaration in which the declaration is an alias-declaration (Clause 7) declares the identifier to\n  be a alias template. An alias template is a name for a family of types. The name of the alias template is a\n  template-name.</li>\n</ol>\n</blockquote>\n", "OwnerUserId": "1603365", "PostTypeId": "2", "Id": "38311599", "Score": "4", "CreationDate": "2016-07-11T16:13:54.987", "LastActivityDate": "2016-07-11T16:13:54.987"}, "38311348": {"CommentCount": "1", "AcceptedAnswerId": "38311599", "CreationDate": "2016-07-11T15:59:19.743", "LastActivityDate": "2016-07-11T16:13:54.987", "PostTypeId": "1", "ViewCount": "92", "FavoriteCount": "1", "Title": "C++ class alias does not compile as same type", "Id": "38311348", "Score": "3", "Body": "<p>I do not understand why the following code does not compile. I get the same errors using both GCC and Clang. Can someone explain or point to a part of the standard that would explain why <code>p1</code> and <code>p2</code> are not the same type?</p>\n<pre><code>struct TypeT {};\n\nstruct TypeU {};\n\ntemplate&lt;typename T, typename U = TypeU&gt;\nstruct Foo {};\n\n\ntemplate&lt;typename T, typename U&gt;\nstruct Bar\n{\n};\n\ntemplate&lt;typename T, template &lt;typename&gt; class U&gt;\nstruct FooBar\n{\n};\n\ntemplate&lt;typename T&gt;\nusing FooAlias1 = Foo&lt;T&gt;;\n\ntemplate&lt;typename T&gt;\nusing FooAlias2 = Foo&lt;T&gt;;\n\ntemplate&lt;typename T&gt;\nvoid DoStuff(const T&amp; p1, const T&amp; p2)\n{\n}\n\nint main(void)\n{\n    FooBar&lt;TypeT, FooAlias1&gt; p1;\n    FooBar&lt;TypeT, FooAlias2&gt; p2;\n    DoStuff(p1, p2);\n}\n</code></pre>\n<p>This is the output of gcc:</p>\n<pre><code>$ gcc --version\ngcc (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4\n\n$ gcc -std=c++11 test.cpp\ntest.cpp: In function \u2018int main()\u2019:\ntest.cpp:34:19: error: no matching function for call to \u2018DoStuff(FooBar&lt;TypeT, FooAlias1&gt;&amp;, FooBar&lt;TypeT, FooAlias2&gt;&amp;)\u2019\n     DoStuff(p1, p2);\n                   ^\ntest.cpp:34:19: note: candidate is:\ntest.cpp:26:6: note: template&lt;class T&gt; void DoStuff(const T&amp;, const T&amp;)\n void DoStuff(const T&amp; p1, const T&amp; p2)\n      ^\ntest.cpp:26:6: note:   template argument deduction/substitution failed:\ntest.cpp:34:19: note:   deduced conflicting types for parameter \u2018const T\u2019 (\u2018FooBar&lt;TypeT, FooAlias1&gt;\u2019 and \u2018FooBar&lt;TypeT, FooAlias2&gt;\u2019)\n     DoStuff(p1, p2);\n</code></pre>\n<p>And clang:</p>\n<pre><code>$ clang --version\nUbuntu clang version 3.4-1ubuntu3 (tags/RELEASE_34/final) (based on LLVM 3.4)\n\n$ clang -std=c++11 test.cpp\ntest.cpp:34:5: error: no matching function for call to 'DoStuff'\n    DoStuff(p1, p2);\n    ^~~~~~~\ntest.cpp:26:6: note: candidate template ignored: deduced conflicting types for parameter 'T' ('FooBar&lt;[...], template FooAlias1&gt;'\n      vs. 'FooBar&lt;[...], template FooAlias2&gt;')\nvoid DoStuff(const T&amp; p1, const T&amp; p2)\n     ^\n1 error generated.\n</code></pre>\n", "Tags": "<c++><templates><gcc><clang>", "OwnerUserId": "1778832", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_38311348_38311599_1": {"section_id": 165, "quality": 0.8888888888888888, "length": 16}, "so_38311348_38311599_0": {"section_id": 95, "quality": 1.0, "length": 7}}, "n3337": {"so_38311348_38311599_1": {"section_id": 159, "quality": 0.8888888888888888, "length": 16}, "so_38311348_38311599_0": {"section_id": 90, "quality": 1.0, "length": 7}}, "n4659": {"so_38311348_38311599_1": {"section_id": 169, "quality": 0.8888888888888888, "length": 16}, "so_38311348_38311599_0": {"section_id": 99, "quality": 1.0, "length": 7}}}});