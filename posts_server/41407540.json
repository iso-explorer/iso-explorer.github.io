post_cb({"41407540": {"CommentCount": "3", "ViewCount": "271", "CreationDate": "2016-12-31T10:34:53.983", "LastActivityDate": "2016-12-31T15:53:27.147", "Title": "Why does the C++ standard specifically grant leeway regarding memory layout of class data members with different access specifiers?", "AcceptedAnswerId": "41409798", "PostTypeId": "1", "Id": "41407540", "Score": "6", "Body": "<p>The C++11 standard mandates an ordering in memory for the non-static data members of a class but then specifically carves out an exemption for members with different access specifiers.</p>\n<p>Why though?</p>\n<p>\u00a7 9.2.13</p>\n<blockquote>\n<p id=\"so_41407540_41407540_0\">Nonstatic data members of a (non-union) class with the same access control (Clause 11) are allocated so that later members have higher addresses within a class object. <strong>The order of allocation of non-static data members with different access control is unspecified (Clause 11).</strong> Implementation alignment requirements might cause two adjacent members not to be allocated immediately after each other; so might requirements for space for managing virtual functions (10.3) and virtual base classes (10.1).</p>\n</blockquote>\n<p>This part of the standard has come up on stackoverflow before but I don't think it has ever been explained.</p>\n", "Tags": "<c++><c++11><standards>", "OwnerUserId": "1128289", "AnswerCount": "1"}, "41409798": {"ParentId": "41407540", "CommentCount": "0", "Body": "<p><a href=\"http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2006/n2062.html\" rel=\"nofollow noreferrer\">N2062</a> is the first C++ paper that deals with changes to C++98/03's POD definition. It was written as a means to resolve <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n2029.html#568\" rel=\"nofollow noreferrer\">core issue 568</a>, which is about PODs and type layouts. It represents the beginning of the design that leads to C++11's standard layout and trivial copyability definitions.</p>\n<p>And yet, N2062 never even <em>considers</em> defining the layout of members with different access controls. It doesn't even give justification for why this restriction is in place. Nor does <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2342.htm\" rel=\"nofollow noreferrer\">the final version of that proposal</a>, which actually gives us trivially-copyable and standard-layout definitions. All versions of these proposals take the access control limitation as an fait accompli, rather than something that could have been changed.</p>\n<p>All this suggests that the writer of the proposal had knowledge of at least one compiler/ABI that changes the order of members based on access controls.</p>\n", "OwnerUserId": "734069", "PostTypeId": "2", "Id": "41409798", "Score": "2", "CreationDate": "2016-12-31T15:53:27.147", "LastActivityDate": "2016-12-31T15:53:27.147"}, "bq_ids": {"n4140": {"so_41407540_41407540_0": {"section_id": 5873, "quality": 0.9433962264150944, "length": 50}}, "n3337": {"so_41407540_41407540_0": {"section_id": 5644, "quality": 0.9245283018867925, "length": 49}}, "n4659": {"so_41407540_41407540_0": {"section_id": 7356, "quality": 0.9433962264150944, "length": 50}}}});