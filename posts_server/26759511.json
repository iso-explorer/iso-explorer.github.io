post_cb({"26759511": {"CommentCount": "2", "ViewCount": "299", "PostTypeId": "1", "LastEditorUserId": "1938163", "CreationDate": "2014-11-05T14:23:07.097", "LastActivityDate": "2014-11-05T15:44:56.387", "Title": "Do magic statics guarantee that right side is executed only once?", "AcceptedAnswerId": "26759682", "LastEditDate": "2014-11-05T15:04:37.483", "Id": "26759511", "Score": "3", "Body": "<p>If I have </p>\n<pre><code>atomic&lt;int&gt; cnt=0;\n\nint get_int() noexcept\n{\n   cnt++;\n   return rand();\n}\n</code></pre>\n<p>and then:</p>\n<pre><code>void func()\n{\n   static const auto value = get_int();\n}\n</code></pre>\n<p>I know that there will be no race condition on initialization of <code>value</code>, but I don't know if \n<code>get_int()</code> will be called once, or in my example will <code>cnt</code> be 1 (and not 2, 3, 4, or 5).</p>\n<p>Assume multiple threads enter <code>func()</code> and <code>get_int</code> has only 1 callsite in <code>func()</code>. </p>\n", "Tags": "<c++><c++11><static-initialization>", "OwnerUserId": "700825", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_26759511_26759682_0": {"section_id": 3919, "quality": 0.963855421686747, "length": 80}}, "n3337": {"so_26759511_26759682_0": {"section_id": 3779, "quality": 0.963855421686747, "length": 80}}, "n4659": {"so_26759511_26759682_0": {"section_id": 4805, "quality": 0.6987951807228916, "length": 58}}}, "26759603": {"ParentId": "26759511", "CommentCount": "0", "Body": "<p><code>get_int()</code> will be called only once from that line , but given your code, <code>get_int()</code> could be called beforehand from different locations in the code.</p>\n", "OwnerUserId": "1390164", "PostTypeId": "2", "Id": "26759603", "Score": "1", "CreationDate": "2014-11-05T14:27:34.260", "LastActivityDate": "2014-11-05T14:27:34.260"}, "26759682": {"ParentId": "26759511", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>C++11 guarantees that there will be no race condition <em>N3797 - \u00a76.7/4</em>:</p>\n<blockquote>\n<p id=\"so_26759511_26759682_0\">An implementation is permitted to perform early initialization of other block-scope variables with static or\n      thread storage duration under the same conditions that an implementation is permitted to statically initialize\n      a variable with static or thread storage duration in namespace scope (3.6.2). Otherwise such a variable is\n      initialized the first time control passes through its declaration; such a variable is considered initialized upon\n      the completion of its initialization. If the initialization exits by throwing an exception, the initialization\n      is not complete, so it will be tried again the next time control enters the declaration. If control enters\n      the declaration concurrently while the variable is being initialized, the concurrent execution shall wait for\n      completion of the initialization.92 If control re-enters the declaration recursively while the variable is being\n      initialized, the behavior is undefined. [ <em>Example:</em></p>\n<pre><code>int foo(int i) {\n  static int s = foo(2*i); // recursive call - undefined\n  return i+1;\n}\n</code></pre>\n<p id=\"so_26759511_26759682_1\"><em>- end example</em> ]</p>\n</blockquote>\n<p>It's not re-entrant but thread-safe. Make sure there will not be other parts of the code that will call <code>get_int()</code> before <code>func()</code> anyway.</p>\n", "OwnerUserId": "1938163", "LastEditorUserId": "923854", "LastEditDate": "2014-11-05T15:44:56.387", "Id": "26759682", "Score": "8", "CreationDate": "2014-11-05T14:31:26.380", "LastActivityDate": "2014-11-05T15:44:56.387"}});