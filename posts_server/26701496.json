post_cb({"26701496": {"CommentCount": "0", "ViewCount": "117", "CreationDate": "2014-11-02T16:19:10.990", "LastActivityDate": "2014-11-02T18:41:16.227", "Title": "Why is the do_nothing method needed for C++ singleton instantiation?", "FavoriteCount": "1", "PostTypeId": "1", "Id": "26701496", "Score": "1", "Body": "<p>I was going over the documentation from <a href=\"http://www.boost.org/doc/libs/1_47_0/boost/pool/detail/singleton.hpp\" rel=\"nofollow\">http://www.boost.org/doc/libs/1_47_0/boost/pool/detail/singleton.hpp</a></p>\n<p>My question: since create_object is a static member of class singleton_default its constructor should be called before main. From the constructor of object_creator, singleton_default::instance is called, which makes sure obj is instantiated before main. What I don't follow is the need for the do_nothing method. The documentation mentions it forces the instantiation of create_object but are not static members of class supposed to be initialized before main starts? By that token should singleton_default::create_object instantiation not be good enough? </p>\n<p>Here's the code</p>\n<pre><code>// T must be: no-throw default constructible and no-throw destructible\ntemplate &lt;typename T&gt;\nstruct singleton_default\n{\n  private:\n    struct object_creator\n    {\n      // This constructor does nothing more than ensure that instance()\n      //  is called before main() begins, thus creating the static\n      //  T object before multithreading race issues can come up.\n      object_creator() { singleton_default&lt;T&gt;::instance(); }\n      inline void do_nothing() const { }\n    };\n    static object_creator create_object;\n\n    singleton_default();\n\n  public:\n    typedef T object_type;\n\n    // If, at any point (in user code), singleton_default&lt;T&gt;::instance()\n    //  is called, then the following function is instantiated.\n    static object_type &amp; instance()\n    {\n      // This is the object that we return a reference to.\n      // It is guaranteed to be created before main() begins because of\n      //  the next line.\n      static object_type obj;\n\n      // The following line does nothing else than force the instantiation\n      //  of singleton_default&lt;T&gt;::create_object, whose constructor is\n      //  called before main() begins.\n      create_object.do_nothing();\n\n      return obj;\n    }\n};\ntemplate &lt;typename T&gt;\ntypename singleton_default&lt;T&gt;::object_creator\nsingleton_default&lt;T&gt;::create_object;\n</code></pre>\n<p>I tried removing the do_nothing method, but that stopped the object instantiation before main. </p>\n", "Tags": "<c++><design-patterns><boost>", "OwnerUserId": "350810", "AnswerCount": "1"}, "26702382": {"ParentId": "26701496", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2014-11-02T17:46:51.513", "Score": "1", "LastEditorUserId": "3723423", "LastEditDate": "2014-11-02T18:41:16.227", "Id": "26702382", "OwnerUserId": "3723423", "Body": "<p>You have to look at the standard in section <strong><em>3.6.2 initialisation of non local variables</em></strong>.  </p>\n<p>First the principle in point 2: </p>\n<blockquote>\n<p id=\"so_26701496_26702382_0\">Variables with static storage duration (...) shall be zero-initialized\n  before any other initialization takes place.</p>\n<p id=\"so_26701496_26702382_1\">Constant initialization is performed:  (...)</p>\n<p id=\"so_26701496_26702382_2\">Together, zero-initialization and constant initialization are called\n  static initialization; all other initialization is dynamic\n  initialization. Static initialization shall be performed before any\n  dynamic initialization takes place. Dynamic initialization of a\n  non-local variable with static storage duration is either ordered or\n  unordered. Definitions of explicitly specialized class template static\n  data members have ordered initialization.</p>\n</blockquote>\n<p>Then in point 4, the explanation for your question (your singleton requiring a \"dynamic intialisation\") :  </p>\n<blockquote>\n<p id=\"so_26701496_26702382_3\">It is implementation-defined whether the dynamic initialization of a\n  non-local variable with static storage duration is done before the\n  first statement of main. If the initialization is deferred to some\n  point in time after the first statement of main, it shall occur before\n  the first odr-use of any function or variable defined in the same\n  translation unit as the variable to be initialized.</p>\n</blockquote>\n<p>This <code>do_nothing()</code> just ensures this first use and the order of the dynamic initialisation. </p>\n<p>Wouldn't you have the <code>do_nothing()</code>, the global static <code>create_object()</code> wouldn't be needed to be initalized before your first call of <code>instance()</code>, and the static <code>obj</code> inside this function would only be initialized at first call, i.e. after the start of  <code>main()</code>.  </p>\n", "LastActivityDate": "2014-11-02T18:41:16.227"}, "bq_ids": {"n4140": {"so_26701496_26702382_2": {"section_id": 7151, "quality": 0.9512195121951219, "length": 39}, "so_26701496_26702382_0": {"section_id": 7151, "quality": 1.0, "length": 10}, "so_26701496_26702382_3": {"section_id": 7153, "quality": 0.9714285714285714, "length": 34}}, "n3337": {"so_26701496_26702382_2": {"section_id": 6895, "quality": 0.9512195121951219, "length": 39}, "so_26701496_26702382_0": {"section_id": 6895, "quality": 1.0, "length": 10}, "so_26701496_26702382_3": {"section_id": 6897, "quality": 0.9714285714285714, "length": 34}}, "n4659": {"so_26701496_26702382_0": {"section_id": 4051, "quality": 0.9, "length": 9}, "so_26701496_26702382_3": {"section_id": 8657, "quality": 0.6571428571428571, "length": 23}}}});