post_cb({"7476658": {"Id": "7476658", "PostTypeId": "2", "Body": "<p>How do you tell a difference between a declaration that is a definition and a declaration that is not?</p>\n<p>Easy: <em>you can only have one definition</em> of each entity, but as many declarations as you want.</p>\n<p>Because you can say</p>\n<pre><code> typedef int Foo;\n typedef int Foo;\n</code></pre>\n<p>without any problem, this is not a definition. Or perhaps because this is not a definition, you can say that. Either way, your compiler can easily tell which is which.</p>\n<p>Note that in C it is illegal to repeat a typedef, so a typedef declaration <em>is</em> a definition in C.</p>\n", "LastActivityDate": "2011-09-19T20:07:10.670", "Score": "1", "CreationDate": "2011-09-19T20:07:10.670", "ParentId": "5704914", "CommentCount": "0", "OwnerUserId": "775806"}, "5704967": {"Id": "5704967", "PostTypeId": "2", "Body": "<p>A definition creates an object, so:</p>\n<pre><code>int x;\n</code></pre>\n<p>is a definition of an int called x. A typedef does not create an object, it creates a new name for an existing type, so it is not  a definition.</p>\n", "LastActivityDate": "2011-04-18T15:10:09.670", "Score": "0", "CreationDate": "2011-04-18T15:10:09.670", "ParentId": "5704914", "CommentCount": "2", "OwnerUserId": "2100815"}, "5704914": {"ViewCount": "524", "Body": "<p>I'm really confused. I am reading TC++PL by Bjarne Stroustrup (special edition, 19th print - Sep 2010). Let me quote a part of the book, highlighting my confusion:</p>\n<pre><code>char ch;\nstring s;\nint count = 1;\nconst double pi = 3.1415926535897932385;\nextern int error_number;\n\nconst char* name = \"Njal\";\nconst char* season[] = { \"spring\", \"summer\", \"fall\", \"winter\" };\n\nstruct Date { int d, m, y; };\nint day(Date* p) { return p-&gt;d; }\ndouble sqrt(double);\ntemplate&lt;class T&gt; T abs(T a) { return a&lt;0 ? -a : a; }\n\ntypedef complex&lt;short&gt; Point;\nstruct User;\nenum Beer { Carlsberg, Tuborg, Thor };\nnamespace NS { int a; }\n</code></pre>\n<blockquote>\n<p id=\"so_5704914_5704914_0\">As can be seen from these examples, a declaration can do more than simply\n  associate a type with a name. Most of these declarations are also definitions;\n  that is, they also define an entity for the name to which they refer. For ch,\n  that entity is the appropriate amount of memory to be used as a variable \u2013 that\n  memory will be allocated. For day it is the specified function. For the\n  constant pi, it is the value 3.1415926535897932385. For Date, that entity is\n  a new type. <strong>For Point it is the type complex so that Point becomes a\n  synonym for complex</strong>. Of the declarations above, only these are not also\n  definitions:</p>\n</blockquote>\n<pre><code>double sqrt(double);\nextern int error_number;\nstruct User;\ntypedef complex&lt;short&gt; Point &lt;-- WTF;\n</code></pre>\n<p>Isn't the sentence in bold conflicting with the list given below it? Is a typedef just a declaration or also a definition? Is this an error in the book?</p>\n", "AcceptedAnswerId": "5705232", "Title": "Is a typedef a definition?", "CreationDate": "2011-04-18T15:05:24.140", "Id": "5704914", "CommentCount": "2", "FavoriteCount": "3", "PostTypeId": "1", "LastEditDate": "2011-09-19T19:12:55.477", "LastEditorUserId": "46642", "LastActivityDate": "2011-09-19T20:07:10.670", "Score": "6", "OwnerUserId": "565635", "Tags": "<c++>", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_5704914_5705232_1": {"length": 25, "quality": 0.78125, "section_id": 7034}}, "n3337": {"so_5704914_5705232_1": {"length": 25, "quality": 0.78125, "section_id": 6780}}, "n4659": {"so_5704914_5705232_1": {"length": 25, "quality": 0.78125, "section_id": 8531}}}, "5705009": {"Id": "5705009", "PostTypeId": "2", "Body": "<p>A typedef is a type alias, not a new type unto itself. With a typedef, nothing new is defined, but rather an existing definition is given a second name -- just like nightcracker is your alias, not your real name, but they both refer to the same entity: you.</p>\n", "LastActivityDate": "2011-04-18T15:12:47.413", "Score": "2", "CreationDate": "2011-04-18T15:12:47.413", "ParentId": "5704914", "CommentCount": "12", "OwnerUserId": "201787"}, "5705232": {"Id": "5705232", "PostTypeId": "2", "Body": "<p>Although I'm totally confused by this. The standard is clear. Typedef is just a declaration. Not definition.</p>\n<blockquote>\n<p id=\"so_5704914_5705232_0\"><strong>3.1-2</strong></p>\n<p id=\"so_5704914_5705232_1\">A declaration is a definition unless\n  it declares a function without\n  specifying the function\u2019s body (8.4),\n  it contains the extern specifier\n  (7.1.1) or a linkage-specification24)\n  (7.5) and neither an initializer nor a\n  function-body, it declares a static\n  data member in a class declaration\n  (9.4), it is a class name declaration\n  (9.1), or it is a <strong>typedef\n  declaration (7.1.3)</strong>, a\n  using-declaration (7.3.3), or a\n  using-directive (7.3.4).</p>\n</blockquote>\n<p>Edit: Oh, I just realized why. You can typedef a declaration, therefore a typedef has to be a declaration itself.</p>\n", "LastEditorUserId": "211659", "LastActivityDate": "2011-04-18T15:35:14.173", "Score": "6", "CreationDate": "2011-04-18T15:29:02.273", "ParentId": "5704914", "CommentCount": "1", "LastEditDate": "2011-04-18T15:35:14.173", "OwnerUserId": "211659"}});