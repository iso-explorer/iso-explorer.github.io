post_cb({"25286368": {"ParentId": "25284863", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>C++ standard Section 7.1.2 Point 2:  </p>\n<blockquote>\n<p id=\"so_25284863_25286368_0\">(...) The inline specifier <strong><em>indicates to the implementation that\n  inline substitution of the function body at the point of call is to be\n  preferred</em></strong> to the usual function call mechanism. An implementation\n  is not required to perform this inline substitution at the point of\n  call (...)</p>\n</blockquote>\n<p>In other words instead of havin a single code for your function, that is called several times,  the compiler may just duplicate your code in the various places the function is called.  This avoids the little overhead related to the function call,  at the cost of bigger executables.  </p>\n<p>Be aware that <code>inline</code> keyword may be used also with namespaces, but with a very different meaning. Members of an inline namespace can be used in most respects as though they were members of the enclosing namespace. (see Standard, section 7.3.1 point 8). </p>\n<p><strong><em>Edit:</em></strong>\nThe <a href=\"http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml#Header_Files\" rel=\"nofollow\">google style guide</a> recommends to inline only when a function is ten lines or less. </p>\n", "OwnerUserId": "3723423", "LastEditorUserId": "3723423", "LastEditDate": "2014-08-13T16:22:40.633", "Id": "25286368", "Score": "-1", "CreationDate": "2014-08-13T12:37:10.537", "LastActivityDate": "2014-08-13T16:22:40.633"}, "25284964": {"ParentId": "25284863", "CommentCount": "3", "Body": "<p>Bjarne's quote is old. Modern compilers are pretty smart at it.</p>\n<p>That said, if you don't use Link Time Code Generation, the compiler must see the code to inline it. For functions used in multiple .cpp files, that means you need to define them in a header. And to circumvent the One Definition Rule in that case, you must define those functions as <code>inline</code>.</p>\n<p>Class members defined inside the class are <code>inline</code> by default, though.</p>\n", "OwnerUserId": "15416", "PostTypeId": "2", "Id": "25284964", "Score": "3", "CreationDate": "2014-08-13T11:29:06.807", "LastActivityDate": "2014-08-13T11:29:06.807"}, "25285719": {"ParentId": "25284863", "CommentCount": "1", "Body": "<p>The below speaks specifically to C++:</p>\n<p>The <code>inline</code> keyword has nothing to do with inlining.</p>\n<p>The <code>inline</code> keyword allows the same function to be defined multiple times in the same program:</p>\n<blockquote>\n<p id=\"so_25284863_25285719_0\">Every program shall contain exactly one definition of every non-inline function or variable that is odr-used in that program; no diagnostic required.</p>\n<p id=\"so_25284863_25285719_1\">\u00a73.2 [basic.def.odr]</p>\n</blockquote>\n<p>Attaching meaning beyond this to the <code>inline</code> keyword is erroneous.  The compiler is free to inline (or not) anything according to the \"as-if rule\":</p>\n<blockquote>\n<p id=\"so_25284863_25285719_2\">A conforming implementation executing a well-formed program shall produce the same observable behavior as one of the possible executions of the corresponding instance of the abstract machine with the same program and the same input.</p>\n<p id=\"so_25284863_25285719_3\">\u00a71.9 [intro.execution]</p>\n</blockquote>\n", "OwnerUserId": "1007504", "PostTypeId": "2", "Id": "25285719", "Score": "1", "CreationDate": "2014-08-13T12:06:29.023", "LastActivityDate": "2014-08-13T12:06:29.023"}, "25285847": {"ParentId": "25284863", "CommentCount": "5", "Body": "<p>Considering what compiler optimizations can do, the only use of inline I have today is for non-template function whose body is <strong>defined inside headers files outside class bodies</strong>.</p>\n<p>Everything is defined (note: <em>defined</em> != <em>declared</em>) inside class bodies is inline by default, just as templates are.</p>\n<p>The meaning of <code>inline</code> in fact is: \"Defined in header, potentially imported in multiple sources, just keep just one copy of it\" told to the linker.</p>\n<p>May be in c++35 someone will finally decide to replace that keyword with another one more meaningful.</p>\n", "OwnerUserId": "924727", "PostTypeId": "2", "Id": "25285847", "Score": "1", "CreationDate": "2014-08-13T12:12:14.667", "LastActivityDate": "2014-08-13T12:12:14.667"}, "25380469": {"ParentId": "25284863", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>I'm answering the question my self!: Solution: After a few performance tests, the rule of thumb from Stroustrup is right! inlining Short functions like the .size() from vector can improve the performance (.size() calls are used frequently). But the impact is only noticeable for FREQUENTLY used functions. If a getter/setter method is used a lot, inlining it might increase the performance. </p>\n<p>Stroustrup:</p>\n<blockquote>\n<p id=\"so_25284863_25380469_0\"><code>Don\u2019t make statements about \u201cefficiency\u201d of code without first doing\n  time measurements. Guesses about performance are most unreliable.</code></p>\n</blockquote>\n", "OwnerUserId": "3652974", "LastEditorUserId": "3652974", "LastEditDate": "2014-08-19T13:40:41.883", "Id": "25380469", "Score": "0", "CreationDate": "2014-08-19T09:54:04.440", "LastActivityDate": "2014-08-19T13:40:41.883"}, "25285115": {"ParentId": "25284863", "CommentCount": "5", "Body": "<p>Actually, <code>inline</code> keyword is not for the compiler anymore, but for the linker. </p>\n<p>That is, while <code>inline</code> in function declaration still serves for most compilers as a hint, on high optimization setting they will inline things without <code>inline</code> and won't inline things with <code>inline</code>, if they deem it better for the resulting code. </p>\n<p>Where it is still necessary is to mark function symbols as weak and thus circumvent One Definition Rule, which says that in given set of object files you want to make into a binary, each symbol (such as function) shall be present only once. </p>\n", "OwnerUserId": "3276485", "PostTypeId": "2", "Id": "25285115", "Score": "5", "CreationDate": "2014-08-13T11:36:33.190", "LastActivityDate": "2014-08-13T11:36:33.190"}, "bq_ids": {"n4140": {"so_25284863_25286368_0": {"section_id": 5402, "quality": 0.9565217391304348, "length": 22}, "so_25284863_25285719_2": {"section_id": 5801, "quality": 1.0, "length": 18}, "so_25284863_25285719_0": {"section_id": 7041, "quality": 1.0, "length": 12}}, "n3337": {"so_25284863_25286368_0": {"section_id": 5197, "quality": 0.9565217391304348, "length": 22}, "so_25284863_25285719_2": {"section_id": 5574, "quality": 1.0, "length": 18}, "so_25284863_25285719_0": {"section_id": 6786, "quality": 1.0, "length": 12}}, "n4659": {"so_25284863_25286368_0": {"section_id": 6849, "quality": 0.9565217391304348, "length": 22}, "so_25284863_25285719_2": {"section_id": 7260, "quality": 1.0, "length": 18}, "so_25284863_25285719_0": {"section_id": 8538, "quality": 1.0, "length": 12}}}, "25284863": {"CommentCount": "5", "ViewCount": "198", "PostTypeId": "1", "LastEditorUserId": "3652974", "CreationDate": "2014-08-13T11:24:19.947", "LastActivityDate": "2014-08-19T13:40:41.883", "Title": "inline in C++ and compiler", "AcceptedAnswerId": "25380469", "LastEditDate": "2014-08-19T13:39:29.167", "Id": "25284863", "Score": "3", "Body": "<p>!! Specific on frequently used methods like getter &amp; setter. !!</p>\n<p>I have no idea when the keyword <code>inline</code> should be used. Ofc I know what it does, but I still have no idea.</p>\n<p>According to an interview with Bjarne Stroustrup he said:</p>\n<blockquote>\n<p id=\"so_25284863_25284863_0\">My own rule of thumb is to use inlining (explicitly or implicitly) only for simple one- or two-line functions that I know to be frequently used and unlikely to change much over the years. Things like the size() function for a vector. The best uses of inlining is for function where the body is less code than the function call and return mechanism, so that the inlined function is not only faster than a non-inlined version, but also more compact in the object core: smaller and faster.</p>\n</blockquote>\n<p>But I often read that the compiler automatically inline short functions like getter, setter methods (in this case getting the <code>size()</code> of a <code>vector</code>).</p>\n<p>Can anyone help?</p>\n", "Tags": "<c++><compiler-construction><inline>", "OwnerUserId": "3652974", "AnswerCount": "6"}});