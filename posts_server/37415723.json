post_cb({"bq_ids": {"n4140": {"so_37415723_37415877_0": {"length": 5, "quality": 0.625, "section_id": 35}}, "n3337": {"so_37415723_37415877_0": {"length": 5, "quality": 0.625, "section_id": 32}}, "n4659": {"so_37415723_37415877_0": {"length": 5, "quality": 0.625, "section_id": 35}}}, "37416557": {"Id": "37416557", "PostTypeId": "2", "Body": "<p>All integers (and most longs?) are exactly representable in <code>double</code>. A function like <code>trunc</code> that's defined to return an integer in mathematical sense will never return something that's not an exact integer if its proper return value can be represented in <code>double</code>. </p>\n", "LastActivityDate": "2016-05-24T14:29:47.483", "CommentCount": "0", "CreationDate": "2016-05-24T14:29:47.483", "ParentId": "37415723", "Score": "1", "OwnerUserId": "3458"}, "37415877": {"Id": "37415877", "PostTypeId": "2", "Body": "<p>When you convert a floating-point value to an integer value in C++, the floating-point value is truncated automatically.</p>\n<p>Take a look at the following simple example:</p>\n<pre><code>#include &lt;iostream&gt;\n\nint main()\n{\n    double d = 12.98;\n    int i = d;\n\n    std::cout &lt;&lt; \"i = \" &lt;&lt; i &lt;&lt; '\\n';\n}\n</code></pre>\n<p>The above program will print</p>\n<pre>\ni = 12\n</pre>\n<p>Conversions like these are done implicitly by the compiler. For more information please <a href=\"http://en.cppreference.com/w/cpp/language/implicit_conversion\" rel=\"nofollow\">read about implicit conversions</a> (specifically <a href=\"http://en.cppreference.com/w/cpp/language/implicit_conversion#Floating.E2.80.93integral_conversions\" rel=\"nofollow\">read about floating-integral conversions</a>).</p>\n<p>However, it's important to note (from the linked reference):</p>\n<blockquote>\n<p id=\"so_37415723_37415877_0\">If the value cannot fit into the destination type, the behavior is undefined</p>\n</blockquote>\n<p>So the floating point value, after truncation, must fit into the integer type on the left-hand side of the assignment.</p>\n", "LastEditorUserId": "440558", "LastActivityDate": "2016-05-24T14:03:23.897", "Score": "2", "CreationDate": "2016-05-24T14:00:22.590", "ParentId": "37415723", "CommentCount": "4", "OwnerUserId": "440558", "LastEditDate": "2016-05-24T14:03:23.897"}, "37415723": {"ViewCount": "114", "Body": "<p>I have old pascal code </p>\n<pre><code>var i : longint;\n    m : double;\nbegin\n  .....\n  i := trunc(m);\n</code></pre>\n<p>I have to convert it to C++ code.</p>\n<p>An obvious thing here is to write</p>\n<pre><code>double m;\nint i;\n.....\ni = static_cast&lt;int&gt;(std::trunc(m));\n</code></pre>\n<p>But the problem here is than pascal's trunc returns integer</p>\n<pre><code>function trunc(\n  d: ValReal\n):Int64;\n</code></pre>\n<p>while c++'s trunc returns double. \nIs it possible that for example trunc(2.3) will return 1.999999999999\nand static_cast will make it 1 instead of 2? If yes is it correct to use static_cast without trunc to get same pascal's behavior?</p>\n<pre><code>i = static_cast&lt;int&gt;(m);\n</code></pre>\n", "Title": "pascal to c++: trunc", "CreationDate": "2016-05-24T13:54:00.583", "LastActivityDate": "2016-05-24T14:29:47.483", "CommentCount": "2", "PostTypeId": "1", "Id": "37415723", "Score": "0", "OwnerUserId": "1839110", "Tags": "<c++><pascal>", "AnswerCount": "2"}});