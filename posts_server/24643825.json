post_cb({"24644237": {"ParentId": "24643825", "CommentCount": "0", "Body": "<p>Quoting C++11 8.3.5-8:</p>\n<blockquote>\n<p id=\"so_24643825_24644237_0\">If the type of a parameter includes a type of the form \u201cpointer to array of unknown bound of T\u201d or \u201creference\n  to array of unknown bound of T,\u201d the program is ill-formed.</p>\n</blockquote>\n<p>At the time that <code>f(test)</code> is called, <code>test</code> has type <code>char []</code>, and <code>T</code> is deducted to <code>char []</code>. Then f will have the parameter of type <code>const char(&amp;)[]</code>, which is not allowed.</p>\n<p>So VC++ is right. It might be the compiler's extension or bug if it accepts this.</p>\n", "OwnerUserId": "1982342", "PostTypeId": "2", "Id": "24644237", "Score": "3", "CreationDate": "2014-07-09T01:52:25.703", "LastActivityDate": "2014-07-09T01:52:25.703"}, "24807560": {"ParentId": "24643825", "CommentCount": "0", "Body": "<p>As it turned out this is a <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_active.html#393\" rel=\"nofollow\">C++ Language Core Language Issue 393</a> with the proposed resolution of removing the clause</p>\n<blockquote>\n<p id=\"so_24643825_24807560_0\">If the type of a parameter includes a type of the form \u201cpointer to\n  array of unknown bound of T\u201d or \u201creference to array of unknown bound\n  of T,\u201d the program is ill-formed.</p>\n</blockquote>\n<p>which is what both GCC and Clang do. The EDG front-end (which is used by Visual C++) developers chose to issue an error in this case despite the term \"include a type\" being not defined by the standard.</p>\n", "OwnerUserId": "471164", "PostTypeId": "2", "Id": "24807560", "Score": "0", "CreationDate": "2014-07-17T15:20:21.307", "LastActivityDate": "2014-07-17T15:20:21.307"}, "bq_ids": {"n4140": {"so_24643825_24807560_0": {"section_id": 3244, "quality": 1.0, "length": 14}, "so_24643825_24644237_0": {"section_id": 3244, "quality": 1.0, "length": 14}}, "n3337": {"so_24643825_24807560_0": {"section_id": 3117, "quality": 1.0, "length": 14}, "so_24643825_24644237_0": {"section_id": 3117, "quality": 1.0, "length": 14}}, "n4659": {"so_24643825_24807560_0": {"section_id": 6103, "quality": 0.7142857142857143, "length": 10}, "so_24643825_24644237_0": {"section_id": 6103, "quality": 0.7142857142857143, "length": 10}}}, "24643825": {"CommentCount": "1", "ViewCount": "143", "CreationDate": "2014-07-09T00:51:44.087", "LastActivityDate": "2014-07-17T15:20:21.307", "Title": "Error when passing a variable declared as `extern char[]` to a function template in VC++", "AcceptedAnswerId": "24644237", "PostTypeId": "1", "Id": "24643825", "Score": "2", "Body": "<p>Consider the following (artificial) example:</p>\n<pre><code>template &lt;typename T&gt;\nvoid f(const T&amp;) {}\n\nextern char test[];\n\nint main() {\n  f(test);\n}\n\nchar test[] = \"\";\n</code></pre>\n<p>Both GCC and Clang compile it successfully, but Visual C++ gives the following error:</p>\n<blockquote>\n<p id=\"so_24643825_24643825_0\">test.cc(7): error C2664: 'f' : cannot convert parameter 1 from 'char\n  []' to 'const char (&amp;)[1]' [...vcxproj]\n            Reason: cannot convert from 'char []' to 'const char [1]'\n            There is no context in which this conversion is possible</p>\n</blockquote>\n<p>Why does VC++ gives this error while other compilers accept the code and how to avoid this error?</p>\n", "Tags": "<c++><templates><visual-c++><gcc><clang>", "OwnerUserId": "471164", "AnswerCount": "2"}});