post_cb({"28960167": {"CommentCount": "0", "ViewCount": "354", "CreationDate": "2015-03-10T09:33:17.433", "LastActivityDate": "2015-03-10T09:41:45.010", "Title": "unordered_map iteration order for the same key", "AcceptedAnswerId": "28960335", "PostTypeId": "1", "Id": "28960167", "Score": "4", "Body": "<p>When looping over an <code>std::unordered_map</code>, STL makes no guarantees on which specific element order is considered. </p>\n<p>My question is about the order of the elements with the same key, I tried it with different compilers and I always receive one after the other if they have same key (example below). I searched it but I couldn't find. Is it mentioned somewhere in standards or it is implementation dependent? </p>\n<pre><code>unordered_multimap&lt;int, int&gt; umap;\n\numap.insert({30, 9});\numap.insert({10, 1});\numap.insert({20, 5});\numap.insert({30, 8});\numap.insert({20, 4});\numap.insert({10, 2});\n\nfor (auto p : umap)\n    cout &lt;&lt; p.first &lt;&lt; \" \" &lt;&lt; p.second &lt;&lt; endl;\n</code></pre>\n<p>outputs</p>\n<pre><code>30 8\n30 9\n20 4\n20 5\n10 1\n10 2\n</code></pre>\n", "Tags": "<c++><c++11><c++14>", "OwnerUserId": "4640997", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_28960167_28960335_0": {"section_id": 758, "quality": 1.0, "length": 13}}, "n3337": {"so_28960167_28960335_0": {"section_id": 746, "quality": 1.0, "length": 13}}, "n4659": {"so_28960167_28960335_0": {"section_id": 818, "quality": 1.0, "length": 13}}}, "28960335": {"ParentId": "28960167", "CommentCount": "4", "CreationDate": "2015-03-10T09:41:45.010", "OwnerUserId": "204847", "PostTypeId": "2", "Id": "28960335", "Score": "7", "Body": "<p>Yes, it's mentioned in C++11 23.2.5/6:</p>\n<blockquote>\n<p id=\"so_28960167_28960335_0\">In containers that support equivalent keys, elements with equivalent keys are adjacent to each other in the iteration order of the container.</p>\n</blockquote>\n", "LastActivityDate": "2015-03-10T09:41:45.010"}});