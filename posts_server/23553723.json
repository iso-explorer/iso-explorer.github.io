post_cb({"23553744": {"ParentId": "23553723", "PostTypeId": "2", "CommentCount": "3", "CreationDate": "2014-05-08T22:34:57.463", "Score": "2", "LastEditorUserId": "3204551", "LastEditDate": "2014-05-09T11:07:56.580", "Id": "23553744", "OwnerUserId": "3204551", "Body": "<p>In principle, taking full advantage of the latitude the standard leaves to implementations, yours may decide to allow that one.</p>\n<p>Still, I don't know any implementation which does <em>when using</em> <code>main</code> <em>as the starting point</em>, nor a reason to do so.</p>\n<p>This allows it as an extenson, useable after issuing at least one diagnostic:</p>\n<blockquote>\n<h2>1.4 Implementation compliance \u00a78</h2>\n<p id=\"so_23553723_23553744_0\">A conforming implementation may have extensions (including additional library functions), provided they do not alter the behavior of any well-formed program. Implementations are required to diagnose programs that use such extensions that are ill-formed according to this International Standard. Having done so, however, they can compile and execute such programs.</p>\n</blockquote>\n<p>This one allows it for freestanding environments even without diagnostics:</p>\n<blockquote>\n<h2>3.6.1 Main function [basic.start.main]</h2>\n<p id=\"so_23553723_23553744_1\">1 A program shall contain a global function called main, which is the designated start of the program. It is implementation-defined whether a program in a freestanding environment is required to define a main function. [ Note: In a freestanding environment, start-up and termination is implementation-defined; startup contains the execution of constructors for objects of namespace scope with static storage duration; termination contains the execution of destructors for objects with static storage duration. \u2014end note ]</p>\n</blockquote>\n", "LastActivityDate": "2014-05-09T11:07:56.580"}, "23553723": {"CommentCount": "9", "AcceptedAnswerId": "23553808", "PostTypeId": "1", "LastEditorUserId": "2567683", "CreationDate": "2014-05-08T22:32:31.540", "LastActivityDate": "2014-05-09T12:30:05.467", "LastEditDate": "2014-05-08T23:54:09.157", "ViewCount": "462", "FavoriteCount": "2", "Title": "Can the main function be a template? (safe command line argument parsing)", "Id": "23553723", "Score": "6", "Body": "<p>Can the main function be declared like so :</p>\n<pre><code>template&lt;typename T1, typename T2&gt;\nint main(T1 argc, T2 *argv[])\n{\n}\n</code></pre>\n<p>For an instantiation <code>T1</code> = <code>int</code> and <code>T2</code> = <code>char</code> we end up to a common signature. </p>\n<p>The restrictions for <code>main</code> mention nothing about templates :</p>\n<ul>\n<li><p>No other function in the program can be called main</p></li>\n<li><p>main cannot be defined as inline or static.</p></li>\n<li><p>C++main cannot be called from within a program.</p></li>\n<li><p>C++ The address of main cannot be taken.</p></li>\n<li><p>C++ The main function cannot be overloaded.</p></li>\n</ul>\n<p>Apparently there are no applications of such a syntax, but </p>\n<ul>\n<li>Is there a compiler that implements it ?</li>\n<li>Are there any <strong>logical barriers</strong> in implementing something like that ? </li>\n</ul>\n<h2>EDIT</h2>\n<p>I was a bit vague in my first attempt to asking the above. There were (rightfully) some negative remarks on the question, so I should lay down <strong>some reasoning on asking for feedback on this topic</strong> :</p>\n<ul>\n<li><p>C++ is an evolving language, maybe this was to be implemented and someone is aware of it</p></li>\n<li><p>Someone could inform me on <strong>why</strong> <code>main</code> has the limitations that it has</p></li>\n<li><p>A language lawyer could find a loophole in the Standard to allow for such a declaration (well the opposite has happened) </p></li>\n<li><p>The evolution of the modules system drives the language to a logic of component separation (in terms of compilation units for now). Maybe this will affect the way we spawn compiled units, maybe multiple <code>main</code> functions are to be defined across submodules in which case a more <em>flexible</em> main would be needed. </p></li>\n</ul>\n<h2><strong>An example use case of templatizing <code>main</code></strong></h2>\n<p>If the Standard was to allow for something like that (in the future) we could write</p>\n<pre><code>template&lt;typename... Args&gt;\nint main(Args&amp;&amp; ...vs)\n{\n}\n</code></pre>\n<p>there you go, <strong>safe command line arguments parsing</strong> (have I invented the wheel or what?)</p>\n", "Tags": "<c++>", "OwnerUserId": "2567683", "AnswerCount": "3"}, "23564719": {"ParentId": "23553723", "CommentCount": "3", "CreationDate": "2014-05-09T12:30:05.467", "OwnerUserId": "46642", "PostTypeId": "2", "Id": "23564719", "Score": "16", "Body": "<p>It depends. In my own super-secret and private freestanding implementation you can make the main function be a template if all the following conditions apply.</p>\n<ul>\n<li>The function is named <code>m\u0430in</code> (note that the second letter is a Cyrillic letter, not a Latin letter).</li>\n<li>There are either 2, 17, or 23 non-pack template arguments, or a lone variadic pack.</li>\n<li>If the template arguments consist of a variadic pack, it is introduced with <code>class</code>, not <code>typename</code>, there is no space between <code>class</code> and dot-dot-dot, and there is a single space between dot-dot-dot and the pack name.</li>\n<li>It's a full moon and you're in the Northern hemisphere, or you're in the Southern hemisphere and Mars is above the horizon. (Compilation without GPS or ASCOM is not supported.)</li>\n</ul>\n<p>All of this information is obviously completely useless in face of the question presented, but who cares? At least it mentions freestanding implementations and language extensions.</p>\n", "LastActivityDate": "2014-05-09T12:30:05.467"}, "bq_ids": {"n4140": {"so_23553723_23553808_0": {"section_id": 7145, "quality": 1.0, "length": 7}, "so_23553723_23553744_0": {"section_id": 5776, "quality": 0.9705882352941176, "length": 33}, "so_23553723_23553744_1": {"section_id": 7145, "quality": 0.8780487804878049, "length": 36}, "so_23553723_23553808_1": {"section_id": 48, "quality": 0.875, "length": 7}}, "n3337": {"so_23553723_23553808_0": {"section_id": 6889, "quality": 1.0, "length": 7}, "so_23553723_23553744_0": {"section_id": 5549, "quality": 0.9705882352941176, "length": 33}, "so_23553723_23553744_1": {"section_id": 6889, "quality": 0.8780487804878049, "length": 36}, "so_23553723_23553808_1": {"section_id": 43, "quality": 0.875, "length": 7}}, "n4659": {"so_23553723_23553808_0": {"section_id": 8646, "quality": 0.7142857142857143, "length": 5}, "so_23553723_23553808_1": {"section_id": 49, "quality": 0.875, "length": 7}, "so_23553723_23553744_1": {"section_id": 8646, "quality": 0.8292682926829268, "length": 34}, "so_23553723_23553744_0": {"section_id": 7233, "quality": 0.9705882352941176, "length": 33}}}, "23553808": {"ParentId": "23553723", "PostTypeId": "2", "CommentCount": "35", "CreationDate": "2014-05-08T22:39:31.407", "Score": "17", "LastEditorUserId": "493122", "LastEditDate": "2014-05-08T22:51:37.073", "Id": "23553808", "OwnerUserId": "493122", "Body": "<p>This:</p>\n<pre><code>template&lt;typename T1, typename T2&gt;\nint main(T1 argc, T2 *argv[])\n{\n}\n</code></pre>\n<p>is really a <em>function template</em>. The Standard, as per \u00a73.6.1/1, requires <code>main</code> to be a <em>function</em>:</p>\n<blockquote>\n<p id=\"so_23553723_23553808_0\">A program shall contain a global function called main, which is the designated start of the program.</p>\n</blockquote>\n<p>Just like <em>classes</em> and <em>class templates</em> are not the same thing, <em>function</em> and <em>function templates</em> are two different things. More specifically, as per \u00a714.1:</p>\n<blockquote>\n<p id=\"so_23553723_23553808_1\">A template defines a family of classes or functions or an alias for a family of types.</p>\n</blockquote>\n<p>Therefore a function template can \"generate\" a potentially infinite <sup>\u2020</sup> set of functions.</p>\n<p><sub>\u2020 is arguable</sub></p>\n", "LastActivityDate": "2014-05-08T22:51:37.073"}});