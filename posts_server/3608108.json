post_cb({"3608114": {"ParentId": "3608108", "CommentCount": "0", "Body": "<p>This is <a href=\"http://en.wikipedia.org/wiki/Virtual_inheritance\" rel=\"nofollow noreferrer\">virtual inheritance</a>.</p>\n", "OwnerUserId": "346332", "PostTypeId": "2", "Id": "3608114", "Score": "5", "CreationDate": "2010-08-31T10:27:20.653", "LastActivityDate": "2010-08-31T10:27:20.653"}, "3608135": {"ParentId": "3608108", "CommentCount": "0", "Body": "<p><a href=\"http://en.wikipedia.org/wiki/Virtual_inheritance\" rel=\"nofollow noreferrer\">virtual inheritence</a> its used to specify how inheritence works when there is multiple inheritence. essentially it allows you to have 'diamond' inhertitence graphs as opposed to non virtual which would give you a tree, with multiple bases clases at the leaves (raising potenetial ambiguity problems).</p>\n", "OwnerUserId": "207716", "PostTypeId": "2", "Id": "3608135", "Score": "0", "CreationDate": "2010-08-31T10:31:10.380", "LastActivityDate": "2010-08-31T10:31:10.380"}, "3608108": {"CommentCount": "1", "AcceptedAnswerId": "3608211", "PostTypeId": "1", "LastEditorUserId": "265143", "CreationDate": "2010-08-31T10:26:07.837", "LastActivityDate": "2010-08-31T10:59:11.577", "LastEditDate": "2010-08-31T10:28:36.010", "ViewCount": "564", "FavoriteCount": "1", "Title": "Function specifier", "Id": "3608108", "Score": "2", "Body": "<p>virtual and inline are function specifier.</p>\n<p>They can appear before function only.{as per my understanding}.</p>\n<p>Then,In following code what is virtual?</p>\n<pre><code>class Base\n{\n//\n};\n\nclass Derived :virtual public Base\n{\n};\n</code></pre>\n", "Tags": "<c++>", "OwnerUserId": "434946", "AnswerCount": "5"}, "3608127": {"ParentId": "3608108", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>It is virtual inheritance, look <a href=\"http://en.wikipedia.org/wiki/Virtual_inheritance\" rel=\"nofollow noreferrer\">here</a> for an explanation.</p>\n<p>The common usage is, if you have a class A inheriting from 2 classes B and C, which in turn inherit from the same ancestor D. This is problematic with normal inheritance, since A would contain two instances of D, so which one should be used. Using virtual inheritance, e.g. C inheriting virtual from D, the address of the D instance in the C-part of A is found in the vmt, so it can point to the same instance that the B-part is using</p>\n", "OwnerUserId": "201270", "LastEditorUserId": "201270", "LastEditDate": "2010-08-31T10:35:15.520", "Id": "3608127", "Score": "1", "CreationDate": "2010-08-31T10:29:05.860", "LastActivityDate": "2010-08-31T10:35:15.520"}, "3608211": {"ParentId": "3608108", "CommentCount": "1", "Body": "<p>If your question is about the wording in the standard, then you must have misunderstood it. It is true that the list of various function specifiers includes the keyword <code>virtual</code> as one possible function specifier. However, it doesn't work in other direction: the keyword <code>virtual</code> is not restricted to being the function specifier only. It has other use(s). You have found an example of that - it can be used to declare virtual base classes.</p>\n", "OwnerUserId": "187690", "PostTypeId": "2", "Id": "3608211", "Score": "2", "CreationDate": "2010-08-31T10:41:27.503", "LastActivityDate": "2010-08-31T10:41:27.503"}, "3608208": {"ParentId": "3608108", "CommentCount": "2", "Body": "<blockquote>\n<p id=\"so_3608108_3608208_0\">$10.1/4- \"A base class specifier that\n  contains the keyword virtual,\n  specifies a virtual base class. For\n  each distinct occurrence of a\n  nonvirtual base class in the class\n  lattice of the most derived class, the\n  most derived object (1.8) shall\n  contain a corresponding distinct base\n  class subobject of that type. <strong>For each\n  distinct base class that is specified\n  virtual, the most derived object shall\n  contain a single base class subobject\n  of that type.\"</strong></p>\n</blockquote>\n<p>So given the hierarchy</p>\n<pre><code>struct A{};\nstruct B : virtual A{};\nstruct C : virtual A{};\nstruct D : B, C{};\n\nD d;\n</code></pre>\n<p>A 'd' object has only one 'A' subobject i.e. the constructor of 'A' is called only once, and that too before any other constructor is run.</p>\n<blockquote>\n<p id=\"so_3608108_3608208_1\">$12.6.2/5 - \"Initialization shall\n  proceed in the following order: </p>\n<p id=\"so_3608108_3608208_2\">\u2014\n  <strong>First, and only for the constructor of\n  the most derived class as described\n  below, virtual base classes shallbe\n  initialized in the order they appear\n  on a depth-first left-to-right\n  traversal of the directed acyclic\n  graph of base classes, where\n  \u201cleft-to-right\u201d is the order of\n  appearance of the base class names in\n  the derived class base-specifier-list.</strong></p>\n<p id=\"so_3608108_3608208_3\">\u2014 Then, direct base classes shall be\n  initialized in declaration order as\n  they appear in the base-specifier-list\n  (regardless of the order of the\n  mem-initializers). </p>\n<p id=\"so_3608108_3608208_4\">\u2014 Then, nonstatic\n  data members shall be initialized in\n  the order they were declared in the\n  class definition (again regardless of\n  the order of the mem-initializers). </p>\n<p id=\"so_3608108_3608208_5\">\u2014\n  Finally, the body of the constructor\n  is executed. [Note: the declaration\n  order is mandated to ensure that base\n  and member subobjects are destroyed in\n  the reverse order of initialization. ]</p>\n</blockquote>\n", "OwnerUserId": "418110", "PostTypeId": "2", "Id": "3608208", "Score": "2", "CreationDate": "2010-08-31T10:40:43.247", "LastActivityDate": "2010-08-31T10:40:43.247"}, "bq_ids": {"n4140": {"so_3608108_3608208_2": {"section_id": 438, "quality": 0.8484848484848485, "length": 28}, "so_3608108_3608208_4": {"section_id": 438, "quality": 1.0, "length": 15}, "so_3608108_3608208_5": {"section_id": 438, "quality": 0.875, "length": 14}, "so_3608108_3608208_0": {"section_id": 6985, "quality": 0.9183673469387755, "length": 45}, "so_3608108_3608208_3": {"section_id": 438, "quality": 1.0, "length": 13}}, "n3337": {"so_3608108_3608208_2": {"section_id": 429, "quality": 0.8484848484848485, "length": 28}, "so_3608108_3608208_4": {"section_id": 429, "quality": 1.0, "length": 15}, "so_3608108_3608208_5": {"section_id": 429, "quality": 0.875, "length": 14}, "so_3608108_3608208_0": {"section_id": 6731, "quality": 0.9183673469387755, "length": 45}, "so_3608108_3608208_3": {"section_id": 429, "quality": 1.0, "length": 13}}, "n4659": {"so_3608108_3608208_5": {"section_id": 458, "quality": 0.875, "length": 14}, "so_3608108_3608208_2": {"section_id": 458, "quality": 0.8484848484848485, "length": 28}, "so_3608108_3608208_4": {"section_id": 458, "quality": 1.0, "length": 15}, "so_3608108_3608208_3": {"section_id": 458, "quality": 1.0, "length": 13}, "so_3608108_3608208_0": {"section_id": 8483, "quality": 0.8979591836734694, "length": 44}}}});