post_cb({"bq_ids": {"n4140": {"so_17478403_17478515_0": {"length": 36, "quality": 0.9230769230769231, "section_id": 458}, "so_17478403_17478515_1": {"length": 36, "quality": 0.9, "section_id": 469}}, "n3337": {"so_17478403_17478515_0": {"length": 39, "quality": 1.0, "section_id": 449}, "so_17478403_17478515_1": {"length": 40, "quality": 1.0, "section_id": 460}}, "n4659": {"so_17478403_17478515_0": {"length": 36, "quality": 0.9230769230769231, "section_id": 481}, "so_17478403_17478515_1": {"length": 36, "quality": 0.9, "section_id": 492}}}, "17478515": {"Id": "17478515", "PostTypeId": "2", "Body": "<p>Yes, declaring the copy constructor and copy assignment operators as <code>deleted</code> is enough. Since you are declaring a copy constructor and copy assignment operator the move constructor and move assignment operator will not be automatically generated. You do not need to explicitly declare them <code>deleted</code>. </p>\n<p>From \u00a712.8/9 (Emphasis added)</p>\n<blockquote>\n<p id=\"so_17478403_17478515_0\">If the definition of a class X does not explicitly declare a move constructor, one will be implicitly declared as defaulted <strong>if and only if</strong><br>\n   \u2014 X does not have a user-declared copy constructor,<br>\n   \u2014 X does not have a user-declared copy assignment operator,<br>\n   \u2014 X does not have a user-declared move assignment operator,<br>\n   \u2014 X does not have a user-declared destructor, and<br>\n   \u2014 the move constructor would not be implicitly defined as deleted.</br></br></br></br></br></p>\n</blockquote>\n<p>From \u00a712.8/20 (Emphasis added)</p>\n<blockquote>\n<p id=\"so_17478403_17478515_1\">If the definition of a class X does not explicitly declare a move assignment operator, one will be implicitly declared as defaulted <strong>if and only if</strong><br>\n  \u2014 X does not have a user-declared copy constructor,<br>\n  \u2014 X does not have a user-declared move constructor,<br>\n  \u2014 X does not have a user-declared copy assignment operator,<br>\n  \u2014 X does not have a user-declared destructor, and<br>\n  \u2014 the move assignment operator would not be implicitly defined as deleted.</br></br></br></br></br></p>\n</blockquote>\n", "LastEditorUserId": "845568", "LastActivityDate": "2013-07-04T22:07:14.013", "Score": "8", "CreationDate": "2013-07-04T21:53:03.820", "ParentId": "17478403", "CommentCount": "2", "OwnerUserId": "845568", "LastEditDate": "2013-07-04T22:07:14.013"}, "17478920": {"Id": "17478920", "PostTypeId": "2", "Body": "<p>According to [class.copy]/17 <code>operator=(A)</code> is a valid copy assignment operator, so yes, declaring it deleted is sufficient to suppress the implicit move assignment operator and therefore along with the deleted copy constructor will make the class non-copyable and non-movable.</p>\n<p>Your class is more complicated than necessary though, all you need is:</p>\n<pre><code>class A\n{\n   A(const A&amp;) = delete;\n   A&amp; operator=(A) = delete;\npublic:\n   A();\n};\n</code></pre>\n<p>The user-declared copy constructor suppresses the implicit move constructor, and the user-declared copy assignment operator suppresses the implicit move assignment operator.</p>\n<p>However, the <code>operator=(A)</code> form is un-idiomatic, so I would tend to use <code>operator=(const A&amp;) = delete</code> anyway. It has the same effect.</p>\n<p>N.B. there is no reason to declare deleted functions private, and in fact it results in much worse diagnostics.  Public and deleted works better in my experience.</p>\n<blockquote>\n<p id=\"so_17478403_17478920_0\">Also is a destructor required here?</p>\n</blockquote>\n<p>Required for what?  It depends what your default constructor does.</p>\n", "LastActivityDate": "2013-07-04T22:41:11.413", "CommentCount": "3", "CreationDate": "2013-07-04T22:41:11.413", "ParentId": "17478403", "Score": "3", "OwnerUserId": "981959"}, "17478403": {"ViewCount": "322", "Body": "<p>Is the following enough (from a best-practice perspective) for a nonmovable type?</p>\n<pre><code>class A\n{\n   A(const A&amp;) = delete;\n   A(A&amp;&amp;) = delete;\n   A&amp; operator=(A) = delete;\npublic:\n   A();\n};\n</code></pre>\n<p>Or do I have to delete the copy/move assignment operators separately? Also is a destructor required here?</p>\n", "AcceptedAnswerId": "17478515", "Title": "Is it enough to delete operator=(Type type)?", "CreationDate": "2013-07-04T21:40:33.740", "Id": "17478403", "CommentCount": "2", "FavoriteCount": "4", "PostTypeId": "1", "LastEditDate": "2013-07-05T07:00:13.010", "LastEditorUserId": "346804", "LastActivityDate": "2013-07-05T07:00:13.010", "Score": "21", "OwnerUserId": "346804", "Tags": "<c++><c++11>", "AnswerCount": "2"}});