post_cb({"321045": {"ParentId": "320798", "CommentCount": "0", "CreationDate": "2008-11-26T15:13:47.087", "OwnerUserId": "20984", "Id": "321045", "PostTypeId": "2", "OwnerDisplayName": "Luc Touraille", "Score": "1", "Body": "<p>I totally agree with other answers saying that you should put your types in your own namespace to avoid unfortunate name collisions. </p>\n<p>However, I wanted to precise that <em>sometimes</em>, you can (and should !) add stuff in the std namespace. This is the case for template specializations of the std::swap method for example, which are used to provide a uniform way to swap objects. For more information on this matter, you can read about the <a href=\"http://en.wikibooks.org/wiki/More_C%2B%2B_Idioms/Non-throwing_swap\" rel=\"nofollow noreferrer\">non-throwing swap idiom</a>.</p>\n", "LastActivityDate": "2008-11-26T15:13:47.087"}, "320811": {"ParentId": "320798", "CommentCount": "1", "CreationDate": "2008-11-26T14:14:10.953", "OwnerUserId": "3631", "Id": "320811", "PostTypeId": "2", "OwnerDisplayName": "Rob Walker", "Score": "16", "Body": "<p>No ... part of the point of a namespace is to prevent name collisions on upgrade.</p>\n<p>If you add things to the std namespace, then your code might break with the next release of the library if they decide to add something with the same name.</p>\n", "LastActivityDate": "2008-11-26T14:14:10.953"}, "9149437": {"ParentId": "320798", "CommentCount": "0", "CreationDate": "2012-02-05T13:00:24.703", "OwnerUserId": "560648", "PostTypeId": "2", "Id": "9149437", "Score": "13", "Body": "<blockquote>\n<p id=\"so_320798_9149437_0\"><code>[C++11: 17.6.4.2.1/1]:</code> The behavior of a C++ program is undefined if it adds declarations or definitions to namespace <code>std</code> or to a namespace within namespace <code>std</code> unless otherwise specified. A program may add a template specialization for any standard library template to namespace std only if the declaration depends on a user-defined type and the specialization meets the standard library requirements for the original template and is not explicitly prohibited.</p>\n</blockquote>\n", "LastActivityDate": "2012-02-05T13:00:24.703"}, "320874": {"ParentId": "320798", "CommentCount": "0", "CreationDate": "2008-11-26T14:28:15.120", "OwnerUserId": "27074", "PostTypeId": "2", "Id": "320874", "Score": "2", "Body": "<p>Officially, the standard says that's \"undefined behaviour\", and all kinds of nasty things can happen.</p>\n<p>In practice, it will work fine, but you still shouldn't do it. What does it buy you, other than confusing people that something is provided by the compiler?</p>\n", "LastActivityDate": "2008-11-26T14:28:15.120"}, "23235863": {"ParentId": "320798", "CommentCount": "0", "CreationDate": "2014-04-23T05:53:36.207", "OwnerUserId": "2278792", "PostTypeId": "2", "Id": "23235863", "Score": "2", "Body": "<p>This is an interesting question because it's completely subjective to the project and the engineers' accepted coding standards. </p>\n<p>For a single programmer, why not... just be careful. </p>\n<p>For teams, make a standard...</p>\n<p>For a cross-platform project, hell yeah.</p>\n<p>Otherwise, nawdawg.</p>\n", "LastActivityDate": "2014-04-23T05:53:36.207"}, "320798": {"CommentCount": "0", "AcceptedAnswerId": "320811", "OwnerDisplayName": "Rob", "CreationDate": "2008-11-26T14:09:43.830", "LastActivityDate": "2014-04-23T05:53:36.207", "PostTypeId": "1", "ViewCount": "3601", "FavoriteCount": "1", "Title": "Adding types to the std namespace", "Id": "320798", "Score": "13", "Body": "<p>Is it acceptable to add types to the <code>std</code> namespace.  For example, I want a TCHAR-friendly string, so is the following acceptable?</p>\n<pre><code>#include &lt;string&gt;\n\nnamespace std\n{\n    typedef basic_string&lt;TCHAR&gt; tstring;\n}\n</code></pre>\n<p>Or should I use my own namespace?</p>\n", "Tags": "<c++><stl><namespaces>", "OwnerUserId": "9236", "AnswerCount": "7"}, "321039": {"CommentCount": "8", "CreationDate": "2008-11-26T15:12:00.693", "LastEditorUserId": "34509", "LastActivityDate": "2013-02-15T23:08:56.867", "ParentId": "320798", "LastEditDate": "2013-02-15T23:08:56.867", "OwnerDisplayName": "litb", "PostTypeId": "2", "Id": "321039", "Score": "14", "Body": "<p>Only specializations are allowed. So for example, you are allowed to specialize <code>std::numeric_limits</code> for your type. And this of course must happen in namespace <code>std::</code>. But your typedef isn't a specialization so that's causing undefined behavior.</p>\n", "OwnerUserId": "34509"}, "320804": {"ParentId": "320798", "CommentCount": "3", "CreationDate": "2008-11-26T14:11:57.243", "OwnerUserId": "2368", "Id": "320804", "PostTypeId": "2", "OwnerDisplayName": "Klaim", "Score": "3", "Body": "<p>You should use your own namespace as adding code to the standard library will only confuse the users that will look online for informations about that addition.</p>\n<p>All that is in std should be only the standard library and nothing else.</p>\n", "LastActivityDate": "2008-11-26T14:11:57.243"}, "bq_ids": {"n4140": {"so_320798_9149437_0": {"section_id": 6299, "quality": 0.9166666666666666, "length": 33}}, "n3337": {"so_320798_9149437_0": {"section_id": 6056, "quality": 0.9166666666666666, "length": 33}}, "n4659": {"so_320798_9149437_0": {"section_id": 7808, "quality": 0.9166666666666666, "length": 33}}}});