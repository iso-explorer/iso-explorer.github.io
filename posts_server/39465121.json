post_cb({"39465466": {"Id": "39465466", "PostTypeId": "2", "Body": "<p>The error message tells you exactly what the problem is. Jumping to the <code>default</code> label goes from a point where <code>f</code> is not in scope to a point where it is in scope, skipping its initialization.</p>\n<p>The relevant rule from the standard is:</p>\n<blockquote>\n<p id=\"so_39465121_39465466_0\"><strong>6.7 Declaration statement [stmt.dcl]</strong></p>\n<p id=\"so_39465121_39465466_1\">It is possible to transfer into a block, but not in a way that bypasses declarations with initialization. A program that jumps from a point where a variable with automatic storage duration is not in scope to a point where it is in scope is ill-formed unless the variable has scalar type, class type with a trivial default constructor and a trivial destructor, a cv-qualified version of one of these types, or an array of one of the preceding types and is declared without an initializer (8.6).</p>\n</blockquote>\n<p>When you only have one <code>case</code> for the switch there is no way to jump over the initialization, because the only place you can enter the switch statement is at the first case label, which doesn't miss out the initialization. If you don't bypass the initialization of the variable then there's no problem.</p>\n<p>You don't get the error for types like <code>double</code> or <code>int</code> because they are scalar types (so if you jump over their initialization they are in scope, but uninitialized). The closure type created by the lambda is not a scalar type, and is not declared without an initializer.</p>\n", "LastActivityDate": "2016-09-13T08:29:26.447", "CommentCount": "0", "CreationDate": "2016-09-13T08:29:26.447", "ParentId": "39465121", "Score": "6", "OwnerUserId": "981959"}, "39465186": {"Id": "39465186", "PostTypeId": "2", "Body": "<p>wrap your code between braces or it is considered as the same block.</p>\n<p>Jumping to default skips variable declaration.</p>\n<pre><code>case 'g':\n    {\n                auto f = [](){std::printf(\"hello world\\n\");};\n                f();\n                break;\n    }\n</code></pre>\n", "LastEditorUserId": "6451573", "LastActivityDate": "2016-09-13T08:13:24.363", "Score": "0", "CreationDate": "2016-09-13T08:12:16.857", "ParentId": "39465121", "CommentCount": "3", "OwnerUserId": "6451573", "LastEditDate": "2016-09-13T08:13:24.363"}, "39465121": {"ViewCount": "277", "Body": "<p>I do not understand why this code</p>\n<pre><code>#include &lt;iostream&gt;\n\nclass A {\n    public:\n\n\n    void foo(){\n        char g = 'm';\n        switch(g){\n            case 'g':\n                auto f = [](){std::printf(\"hello world\\n\");};\n                f();\n                break;\n//            default:\n//                std::printf(\"go to hell\\n\");\n//                break;\n        }\n    };\n};\n\n\n\nint main(int iargc, char *iargv[]){\n    A a;\n    a.foo();\n}\n</code></pre>\n<p>compiles (and works) fine, whereas when uncommenting the default statement </p>\n<pre><code>#include &lt;iostream&gt;\n\nclass A {\n    public:\n\n\n    void foo(){\n        char g = 'm';\n        switch(g){\n            case 'g':\n                auto f = [](){std::printf(\"hello world\\n\");};\n                f();\n                break;\n            default:\n                std::printf(\"go to hell\\n\");\n                break;\n        }\n    };\n};\n\n\n\nint main(int iargc, char *iargv[]){\n    A a;\n    a.foo();\n}\n</code></pre>\n<p>gives me the following error message</p>\n<pre><code>test.cpp:15:13: error: jump to case label [-fpermissive]\n         default:\n         ^\ntest.cpp:12:22: error:   crosses initialization of \u2018A::foo()::__lambda0 f\u2019\n             auto f = [](){std::printf(\"hello world\\n\");};\n</code></pre>\n<p>I can use a default statement, if I comment out the lambda function.</p>\n<p>I am using gcc 4.8.5.</p>\n", "AcceptedAnswerId": "39465466", "Title": "gcc error when using a switch statement with a default case and a lambda function", "CreationDate": "2016-09-13T08:09:01.283", "Id": "39465121", "CommentCount": "2", "LastEditDate": "2016-09-13T08:19:32.770", "PostTypeId": "1", "LastEditorUserId": "2975396", "LastActivityDate": "2016-09-13T08:34:46.277", "Score": "4", "OwnerUserId": "4462877", "Tags": "<c++><gcc><lambda><switch-statement>", "AnswerCount": "4"}, "39465558": {"Id": "39465558", "PostTypeId": "2", "Body": "<pre><code>switch(g){\n  case 'g':\n    auto f = [](){std::printf(\"hello world\\n\");};\n    f();\n    break;\n  default:\n    std::printf(\"go to hell\\n\");\n    break;\n}\n</code></pre>\n<p>A <code>switch</code> transfers control to one of it's labels. All these labels are in the <em>single</em> block introduced by the switch statement.</p>\n<p>The standard (N4296 \u00a76.7/3) says (emphasis mine):</p>\n<blockquote>\n<p id=\"so_39465121_39465558_0\">It is possible to transfer [control] into a block, but <strong>not in a way that bypasses declarations with initialization</strong>. A\n  program that jumps from a point where a variable with automatic storage duration is not in scope to a\n  point where it is in scope is ill-formed <strong>unless the variable has scalar type, class type with a trivial default\n  constructor and a trivial destructor,</strong> a cv-qualified version of one of these types, or an array of one of the\n  preceding types and is declared without an initializer.</p>\n</blockquote>\n<p>Thus, because it is possible to transfer control directly to the <code>default</code> label, past the declaration and initialization of the lambda <code>f</code> (which is not trivially constructible), your program is ill-formed and is rightfully rejected by the compiler.</p>\n", "LastActivityDate": "2016-09-13T08:34:46.277", "CommentCount": "0", "CreationDate": "2016-09-13T08:34:46.277", "ParentId": "39465121", "Score": "3", "OwnerUserId": "1116364"}, "bq_ids": {"n4140": {"so_39465121_39465466_1": {"length": 40, "quality": 0.975609756097561, "section_id": 3918}, "so_39465121_39465558_0": {"length": 40, "quality": 0.9523809523809523, "section_id": 3918}}, "n3337": {"so_39465121_39465466_1": {"length": 40, "quality": 0.975609756097561, "section_id": 3778}, "so_39465121_39465558_0": {"length": 40, "quality": 0.9523809523809523, "section_id": 3778}}, "n4659": {"so_39465121_39465466_1": {"length": 41, "quality": 1.0, "section_id": 4804}, "so_39465121_39465558_0": {"length": 41, "quality": 0.9761904761904762, "section_id": 4804}}}, "39465201": {"Id": "39465201", "PostTypeId": "2", "Body": "<p>You need to enclose your <code>case 'g'</code> body in braces.  This is not because of the lambda per se, but due to the creation of any new variable in a case statement.</p>\n<p>Without the default I suppose it doesn't complain because there's only one place the execution can flow.  But with default and no braces, you have a problem because the scope of <code>f</code> extends to the <code>default</code> code but it won't be initialized there.</p>\n", "LastActivityDate": "2016-09-13T08:13:12.940", "CommentCount": "2", "CreationDate": "2016-09-13T08:13:12.940", "ParentId": "39465121", "Score": "7", "OwnerUserId": "4323"}});