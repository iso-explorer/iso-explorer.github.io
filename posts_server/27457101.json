post_cb({"27457101": {"ViewCount": "935", "Body": "<p>I have tried to find a lot that <strong>what if only one class is made virtual in multiple inheritance</strong>?\nThe behaviour of constructor call is not clear to me in this case.\nLet say for example code-</p>\n<pre><code>#include&lt;iostream&gt;\nusing namespace std;\nclass grand{\npublic:\n    grand(){cout&lt;&lt;\"grandfather\"&lt;&lt;endl;}\n};\nclass parent1:virtual public grand{   //virtual used only here\npublic:\n    parent1(){cout&lt;&lt;\"parent1 \"&lt;&lt;endl;}\n};\nclass parent2: public  grand{\npublic:\n    parent2(){cout&lt;&lt;\"parent2\"&lt;&lt;endl;}\n};\nclass child:public parent1,public parent2{\npublic:\n    child(){cout&lt;&lt;\"child\"&lt;&lt;endl;}\n};\nint main()  {\n    child s;\n    return 0;\n}\n</code></pre>\n<p>The output of this code comes as</p>\n<pre><code>grandfather\nparent1 \ngrandfather\nparent2\nchild\n</code></pre>\n<p>but in above code if we change this</p>\n<pre><code>class parent1:virtual public grand{\npublic:\n    parent1(){cout&lt;&lt;\"parent1 \"&lt;&lt;endl;}\n};\nclass parent2: public  grand{\npublic:\n    parent2(){cout&lt;&lt;\"parent2\"&lt;&lt;endl;}\n};\n</code></pre>\n<p>to this </p>\n<pre><code>class parent1:public grand{   //virtual removed from here\npublic:\n    parent1(){cout&lt;&lt;\"parent1 \"&lt;&lt;endl;}\n};\nclass parent2:virtual public  grand{  //virtual is added here\npublic:\n    parent2(){cout&lt;&lt;\"parent2\"&lt;&lt;endl;}\n};\n</code></pre>\n<p>output is shown as </p>\n<pre><code>grandfather\ngrandfather    //why parent1 constructor is not called here?\nparent1 \nparent2\nchild\n</code></pre>\n<p>My concern is why parent1 constructor is not called after grandfather? </p>\n", "AcceptedAnswerId": "27457219", "Title": "Sequence of constructor calls in multiple inheritance", "CreationDate": "2014-12-13T08:48:20.793", "Id": "27457101", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2014-12-13T09:13:03.613", "LastEditorUserId": "719263", "LastActivityDate": "2014-12-13T09:13:03.613", "Score": "5", "OwnerUserId": "825844", "Tags": "<c++><oop><constructor><order><multiple-inheritance>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_27457101_27457219_0": {"length": 6, "quality": 1.0, "section_id": 438}, "so_27457101_27457219_4": {"length": 5, "quality": 1.0, "section_id": 438}, "so_27457101_27457219_1": {"length": 29, "quality": 1.0, "section_id": 438}, "so_27457101_27457219_2": {"length": 13, "quality": 1.0, "section_id": 438}, "so_27457101_27457219_3": {"length": 15, "quality": 1.0, "section_id": 438}}, "n3337": {"so_27457101_27457219_0": {"length": 6, "quality": 1.0, "section_id": 429}, "so_27457101_27457219_4": {"length": 5, "quality": 1.0, "section_id": 429}, "so_27457101_27457219_1": {"length": 29, "quality": 1.0, "section_id": 429}, "so_27457101_27457219_2": {"length": 13, "quality": 1.0, "section_id": 429}, "so_27457101_27457219_3": {"length": 15, "quality": 1.0, "section_id": 429}}, "n4659": {"so_27457101_27457219_0": {"length": 6, "quality": 1.0, "section_id": 458}, "so_27457101_27457219_4": {"length": 5, "quality": 1.0, "section_id": 458}, "so_27457101_27457219_1": {"length": 29, "quality": 1.0, "section_id": 458}, "so_27457101_27457219_2": {"length": 13, "quality": 1.0, "section_id": 458}, "so_27457101_27457219_3": {"length": 15, "quality": 1.0, "section_id": 458}}}, "27457219": {"Id": "27457219", "PostTypeId": "2", "Body": "<p>The standard says [C++11 section 12.6.2/10] that :</p>\n<blockquote>\n<p id=\"so_27457101_27457219_0\">In a non-delegating constructor, initialization proceeds in the\n  following order:</p>\n<p id=\"so_27457101_27457219_1\">\u2014 First, and only for the constructor of the most derived class,\n  virtual base classes are initialized in the order they appear on a\n  depth-first left-to-right traversal of the directed acyclic graph of\n  base classes, where \u201cleft-to-right\u201d is the order of appearance of the\n  base classes in the derived class base-specifier-list.</p>\n<p id=\"so_27457101_27457219_2\">\u2014 Then, direct base classes are initialized in declaration order as\n  they appear in the base-specifier-list (regardless of the order of the\n  mem-initializers).</p>\n<p id=\"so_27457101_27457219_3\">\u2014 Then, non-static data members are initialized in the order they were\n  declared in the class definition (again regardless of the order of the\n  mem-initializers).</p>\n<p id=\"so_27457101_27457219_4\">\u2014 Finally, the compound-statement of the constructor body is executed.</p>\n</blockquote>\n<p>So your virtual base classes are always built first... This is really important in the case of virtual base class sharing.</p>\n", "LastActivityDate": "2014-12-13T09:05:09.747", "CommentCount": "3", "CreationDate": "2014-12-13T09:05:09.747", "ParentId": "27457101", "Score": "5", "OwnerUserId": "719263"}});