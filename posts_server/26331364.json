post_cb({"bq_ids": {"n4140": {"so_26331364_26332289_0": {"length": 11, "quality": 0.9166666666666666, "section_id": 399}, "so_26331364_26332289_1": {"length": 49, "quality": 0.9423076923076923, "section_id": 3376}}, "n3337": {"so_26331364_26332289_0": {"length": 11, "quality": 0.9166666666666666, "section_id": 390}, "so_26331364_26332289_1": {"length": 52, "quality": 1.0, "section_id": 3246}}}, "26332289": {"PostTypeId": "2", "Body": "<p>In C++11 the <code>noexcept</code> keyword was added. This can be used in function exception specifications:</p>\n<ul>\n<li><code>noexcept(true)</code> is the same as <code>throw()</code>, i.e. this function <code>terminate</code>s if anything is thrown</li>\n<li><code>noexcept(false)</code> means the function may throw anything</li>\n</ul>\n<p>For most functions, they don't have an <em>exception-specification</em> unless you give them one. A function with no <em>exception-specification</em> may throw anything. </p>\n<p>There is a special case for destructors though, found in C++11 [class.dtor]/3:</p>\n<blockquote>\n<p id=\"so_26331364_26332289_0\">A declaration of a destructor that does not have an <em>exception-specification</em> is implicitly considered to have the same <em>exception-specification</em> as an implicit declaration (15.4).</p>\n</blockquote>\n<p>The referenced rule, 15.4, says that implicitly-declared special member functions <strong>always</strong> have an <em>exception-specification</em>. The specification is determined by the following rule, [except.spec]/14:</p>\n<blockquote>\n<p id=\"so_26331364_26332289_1\">An implicitly declared special member function (Clause 12) shall have an <em>exception-specification</em>. If <code>f</code> is an implicitly declared default constructor, copy constructor, move constructor, destructor, copy assignment operator, or move assignment operator, its implicit <em>exception-specification</em> specifies the type-id <code>T</code> if and only if <code>T</code> is allowed by the <em>exception-specification</em> of a function directly invoked by <code>f</code>\u2019s implicit definition; <code>f</code> shall allow all exceptions if any function it directly invokes allows all exceptions, and <code>f</code> shall allow no exceptions if every function it directly invokes allows no exceptions.</p>\n</blockquote>\n<p>The \"function it directly invokes\" in this clause means the destructor of any member variable or base class (applied recursively). If there is no such function , then there are no exceptions allowed by such a function, so the default is <code>noexcept(true)</code>.</p>\n<p>We could summarise the portion of the above quote relating to your code like this:</p>\n<ul>\n<li>If all subobjects  either have no destructor, or implicitly-generated destructor, or destructor declared as <code>noexcept(true)</code> or equivalent; then this class's destructor defaults to <code>noexcept(true)</code>. </li>\n</ul>\n<p>So, changing your destructor to have <code>noexcept(false)</code> would reproduce the behaviour of C++03.</p>\n<hr>\n<p>In C++03 none of this appeared and your destructor would have defaulted to allowing all exceptions. I don't know for sure why this change was made in C++11, but it may be because it is a bad idea to throw from a destructor unless you really know what you are doing.</p>\n</hr>", "LastActivityDate": "2014-10-13T02:55:47.330", "Id": "26332289", "CommentCount": "2", "CreationDate": "2014-10-13T02:55:47.330", "ParentId": "26331364", "Score": "3", "OwnerUserId": "1505939"}, "26332127": {"PostTypeId": "2", "Body": "<p>detailed explanation available at <a href=\"http://www.parashift.com/c++-faq/dtors-shouldnt-throw.html\" rel=\"nofollow\">http://www.parashift.com/c++-faq/dtors-shouldnt-throw.html</a>. Better explanation than my own words :) </p>\n", "LastActivityDate": "2014-10-13T02:31:58.963", "Id": "26332127", "CommentCount": "0", "CreationDate": "2014-10-13T02:31:58.963", "ParentId": "26331364", "Score": "1", "OwnerUserId": "1466178"}, "26331364": {"ViewCount": "4791", "Body": "<p>I'm trying to write a unit test that detects an invalid use of the lock() feature of my class. In order to do so, I want to use the destructor and throw an exception from there. Unfortunately, instead of catching the exception, g++ decides to call std::terminate().</p>\n<p>There is a very simplified version of the class:</p>\n<pre><code>class A\n{\npublic:\n    A() : f_lock(0) {}\n    ~A() { if(f_lock) throw my_exception(\"still locked\"); }\n    lock() { ++f_lock; }\n    unlock() { --f_lock; }\nprivate:\n    int f_lock;\n};\n</code></pre>\n<p>There is a valid test:</p>\n<pre><code>A *a = new A;\na-&gt;lock();\n...\na-&gt;unlock();\ndelete a;\n</code></pre>\n<p>There is the invalid test I'm trying to write:</p>\n<pre><code>A *a = new A;\na-&gt;lock();\n...\nbool success = false;\ntry\n{\n    delete a;\n}\ncatch(my_exception const&amp;)\n{\n    success = true;\n}\ncatch(...)\n{\n    // anything else is a failure\n}\nif(!success)\n{\n    // test failed...\n    CPPUNIT_ASSERT(!\"test failed\");\n}\n</code></pre>\n<p>Right now, the <code>delete</code> calls <code>std::terminate()</code> even though the throw is not being called when another exception is active. (i.e. <code>std::uncaught_exception()</code> is false.) And also I clearly am catch all exceptions!</p>\n<p>Am I doing something wrong, or is <code>g++</code> programmed to do that always in destructors?</p>\n<hr>\n<p>Update:</p>\n<p>The answer by dyp in the comments below works! The following does not directly call <code>std::terminate()</code>:</p>\n<pre><code>    ~A() noexcept(false) { throw ...; }\n</code></pre>\n<p>Also for reference about why you do not want a throw in a destructor, this page is excellent;</p>\n<p><a href=\"https://www.securecoding.cert.org/confluence/display/cplusplus/ERR33-CPP.+Destructors+must+not+throw+exceptions\" rel=\"nofollow\">https://www.securecoding.cert.org/confluence/display/cplusplus/ERR33-CPP.+Destructors+must+not+throw+exceptions</a></p>\n<hr>\n<p>For clarification, there is the full version of the destructor. As we can see I first post a message (it generally goes in your console, may go to a log too). Second I make sure we're not already managing an exception. Finally, I throw an exception named <code>exception_exit</code> which is expected to force a <code>terminate()</code> although in a GUI application you may want to show a <em>MessageBox</em> of some sort to let the user know something happened (since you can capture the Message, you can display that to the user) and then force an application shut down.</p>\n<pre><code>Node::~Node() noexcept(false)\n{\n    if(f_lock &gt; 0)\n    {\n        // Argh! A throw in a destructor... Yet this is a fatal\n        // error and it should never ever happen except in our\n        // unit tests to verify that it does catch such a bug\n        Message msg(message_level_t::MESSAGE_LEVEL_FATAL, err_code_t::AS_ERR_NOT_ALLOWED);\n        msg &lt;&lt; \"a node got deleted while still locked.\";\n\n        // for security reasons, we do not try to throw another\n        // exception if the system is already trying to process\n        // an existing exception\n        if(std::uncaught_exception())\n        {\n            // still we cannot continue...\n            std::abort();\n        }\n\n        throw exception_exit(1, \"a node got deleted while still locked.\");\n    }\n}\n</code></pre>\n<p>Also, another detail, you are expected to use the <code>NodeLock</code> object to manage the f_lock flag. That is exception safe since it uses RAII (i.e. a scoped lock). However, at this point I did not want to force the user to make use of the NodeLock to lock/unlock a node, hence this test in the destructor.</p>\n</hr></hr>", "AcceptedAnswerId": "26332289", "Title": "Why do I always get \"terminate called after throwing an instance of...\" when throwing in my destructor?", "CreationDate": "2014-10-13T00:20:54.307", "Id": "26331364", "CommentCount": "7", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2014-10-13T04:23:55.840", "LastEditorUserId": "212378", "LastActivityDate": "2014-10-13T04:23:55.840", "Score": "4", "OwnerUserId": "212378", "Tags": "<c++><exception><g++><destructor><throw>", "AnswerCount": "2"}});