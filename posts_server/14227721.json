post_cb({"bq_ids": {"n4140": {"so_14227721_14227746_1": {"length": 21, "quality": 1.0, "section_id": 191}, "so_14227721_14227746_0": {"length": 4, "quality": 0.8, "section_id": 72}, "so_14227721_14227763_1": {"length": 37, "quality": 0.9736842105263158, "section_id": 179}, "so_14227721_14227763_0": {"length": 18, "quality": 0.9473684210526315, "section_id": 5846}}, "n3337": {"so_14227721_14227746_0": {"length": 4, "quality": 0.8, "section_id": 67}, "so_14227721_14227746_1": {"length": 21, "quality": 1.0, "section_id": 185}, "so_14227721_14227763_1": {"length": 37, "quality": 0.9736842105263158, "section_id": 173}, "so_14227721_14227763_0": {"length": 18, "quality": 0.9473684210526315, "section_id": 5616}}, "n4659": {"so_14227721_14227746_0": {"length": 4, "quality": 0.8, "section_id": 200}, "so_14227721_14227746_1": {"length": 21, "quality": 1.0, "section_id": 196}, "so_14227721_14227763_1": {"length": 37, "quality": 0.9736842105263158, "section_id": 184}, "so_14227721_14227763_0": {"length": 18, "quality": 0.9473684210526315, "section_id": 7325}}}, "14227763": {"Id": "14227763", "PostTypeId": "2", "Body": "<p>It's because of the <code>injected-class-name</code> (from 9p2):</p>\n<blockquote>\n<p id=\"so_14227721_14227763_0\">A class-name is inserted into the scope in which it is declared\n  immediately after the class-name is seen. The class-name is also\n  inserted into the scope of the class itself; this is known as the\n  <strong>injected-class-name</strong>.</p>\n</blockquote>\n<p>and from 14.6.1p1:</p>\n<blockquote>\n<p id=\"so_14227721_14227763_1\">Like normal (non-template) classes, class templates have an\n  injected-class-name (Clause 9). The injected-class-name can be used as\n  a template-name or a type-name. When it is used with a\n  template-argument-list, as a template-argument for a template\n  template-parameter, or as the final identifier in the\n  elaborated-type-specifier of a friend class template declaration, it\n  refers to the class template itself. <strong>Otherwise, it is equivalent to\n  the template-name followed by the template-parameters of the class\n  template enclosed in &lt;&gt;.</strong></p>\n</blockquote>\n<p>The injected-class-name refers to the <code>example&lt;T&gt;</code> inside the class itself allowing the shorthand version.</p>\n", "LastEditorUserId": "906773", "LastActivityDate": "2013-01-09T03:41:11.097", "Score": "2", "CreationDate": "2013-01-09T03:17:39.597", "ParentId": "14227721", "CommentCount": "0", "LastEditDate": "2013-01-09T03:41:11.097", "OwnerUserId": "906773"}, "14227721": {"ViewCount": "226", "Body": "<p>Why does the following works?:</p>\n<pre><code>template&lt;typename T&gt; class example {\npublic:\n    T val;\n    example() {val=0;}\n    example operator+(example ob) {\n        example temp;\n        temp.val = val+ob.val;\n        return temp;\n    }\n};\n\nint main() {\n    example&lt;int&gt; a;\n    a+a;\n    return 0;\n}\n</code></pre>\n<p>If I hadn't seen it compiling I would have said that the operator overload should had been as follows:</p>\n<pre><code>example&lt;T&gt; operator+(example&lt;T&gt; ob {\n    example&lt;T&gt; temp;\n    temp.val = val+ob.val;\n    return temp;\n}\n</code></pre>\n<p>Also, I tried to change the following in main:</p>\n<pre><code>example&lt;int&gt; a;\n</code></pre>\n<p>to:</p>\n<pre><code>example a;\n</code></pre>\n<p>but got an error saying \"...missing template arguments...\"\nMy guess is that inside the class definition, compiler treats example as example. But as this is just a guess and I haven't been able to confirm it anywhere, thought I'd ask here.</p>\n", "AcceptedAnswerId": "14227746", "Title": "Missing type template parameter in function argument", "CreationDate": "2013-01-09T03:12:29.737", "Id": "14227721", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2013-01-09T03:41:11.097", "Score": "0", "OwnerUserId": "1937450", "Tags": "<c++><class><templates>", "AnswerCount": "3"}, "14227750": {"Id": "14227750", "PostTypeId": "2", "Body": "<p>If I understand your question correctly, Yes, within the class definition, you dont need to make each function a template of the class template parameter.</p>\n<p>Indeed if you had to define the function outside the class it would need to be as below.</p>\n<pre><code>template&lt;typename T&gt;\nexample&lt;T&gt; example&lt;T&gt;::operator+(example&lt;T&gt; ob) {\n</code></pre>\n<p>p.s. you should change the arguement to <code>const example&lt;T&gt;&amp; ob</code> to reduce unnecessary copies.</p>\n", "LastActivityDate": "2013-01-09T03:16:01.443", "Score": "1", "CreationDate": "2013-01-09T03:16:01.443", "ParentId": "14227721", "CommentCount": "0", "OwnerUserId": "1520364"}, "14227746": {"Id": "14227746", "PostTypeId": "2", "Body": "<p>Yes, the template arguments can be omitted when you are inside the template definition (but, for example, not in main, because that is outside the template definition).</p>\n<p>When omitted, the arguments will be replaced with the arguments of the <em>current instantiation</em>. I.e. when you instantiate the template as <code>example&lt;int&gt;</code>, all occurences of <code>example</code> without template argument <em>inside the template definition</em> will be replaced with <code>example&lt;int&gt;</code> for the purpose of that instantiation.</p>\n<p>From the Standard (C++11, emphasis mine):</p>\n<blockquote>\n<p id=\"so_14227721_14227746_0\">(14.6.2.1/1) A name refers to the <strong>current instantiation</strong> if it is  </p>\n<p id=\"so_14227721_14227746_1\">\u2014 <strong>in the definition of a class template</strong>, a nested class of a class template, a member of a class template, or a member of a nested class of a class template, <strong>the injected-class-name (Clause 9) of the class template</strong> or nested class,<br>\n  [...]</br></p>\n</blockquote>\n<p>A few sections later, the Standard gives an example of this:</p>\n<pre><code>template &lt;class T&gt; class A {\n  A*    p1;     // A is the current instantiation\n  A&lt;T&gt;* p2;     // A&lt;T&gt; is the current instantiation\n\n  /*...*/\n};\n</code></pre>\n", "LastEditorUserId": "777186", "LastActivityDate": "2013-01-09T03:21:42.290", "Score": "1", "CreationDate": "2013-01-09T03:15:41.520", "ParentId": "14227721", "CommentCount": "0", "LastEditDate": "2013-01-09T03:21:42.290", "OwnerUserId": "777186"}});