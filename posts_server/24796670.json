post_cb({"24796870": {"ParentId": "24796670", "CommentCount": "0", "Body": "<pre><code>#include &lt;iostream&gt;\n\nint &amp; f(int &amp;i)\n{\n    puts(\"this is f\");\n    return ++i;\n}\n\nint main()\n{\n    int x=5;\n    //f(x)=f(x)+1 equals to following\n    int&amp; tmp_x = f(x); //x=6\n    int tmp = f(x)+1; //x = 7, tmp = 8\n    tmp_x = tmp; //x=8\n    printf(\"%d\",tmp_x);\n    return 0;\n}\n</code></pre>\n", "OwnerUserId": "3847832", "PostTypeId": "2", "Id": "24796870", "Score": "0", "CreationDate": "2014-07-17T07:01:47.433", "LastActivityDate": "2014-07-17T07:01:47.433"}, "24796773": {"ParentId": "24796670", "CommentCount": "0", "Body": "<p>Function parameter <code>i</code> is a reference to <code>int x</code>.\nSo, <code>++i</code> is actually incrementing <code>x</code>.</p>\n<p><code>f(x)</code> is called twice with initial <code>x=5</code> which will make <code>x</code> equal to 7.\nBut 1 is added at <code>printf</code>, making final value printed 8.</p>\n", "OwnerUserId": "1309708", "PostTypeId": "2", "Id": "24796773", "Score": "0", "CreationDate": "2014-07-17T06:56:08.863", "LastActivityDate": "2014-07-17T06:56:08.863"}, "24796809": {"ParentId": "24796670", "CommentCount": "0", "Body": "<p>You use reference parameter. When you modify the variable x in the f function, you modify too in main function.</p>\n<pre><code>First x = 5\nWhen you call f first time, x = 6\nWhen you call f second time, x = 7\nFinally, 7 + 1 = 8\n</code></pre>\n", "OwnerUserId": "2293768", "PostTypeId": "2", "Id": "24796809", "Score": "1", "CreationDate": "2014-07-17T06:57:59.807", "LastActivityDate": "2014-07-17T06:57:59.807"}, "24796803": {"ParentId": "24796670", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>Look how this line of code is evaluated:</p>\n<pre><code>printf(\"%d\",f(x)=f(x)+1);\n</code></pre>\n<p><strong>Step 1:</strong>\nInitialization of x \n--&gt; x == 5</p>\n<p><strong>Step 2:</strong> \nFirst call of f (right side of equals sign)\n--&gt; x == 6</p>\n<p><strong>Step 3:</strong>\nAdding 1 \n--&gt; x == 7</p>\n<p><strong>Step 4:</strong>\nSecond call of f (left side of equals sign)\n--&gt; x == 8</p>\n<p><strong>EDIT(see comment for deeper insight &amp; thx to Matt):</strong></p>\n", "OwnerUserId": "2427291", "LastEditorUserId": "2427291", "LastEditDate": "2014-07-17T07:38:15.320", "Id": "24796803", "Score": "2", "CreationDate": "2014-07-17T06:57:45.083", "LastActivityDate": "2014-07-17T07:38:15.320"}, "24796670": {"CommentCount": "1", "ViewCount": "83", "PostTypeId": "1", "LastEditorUserId": "3201521", "CreationDate": "2014-07-17T06:50:21.013", "LastActivityDate": "2014-07-17T07:38:15.320", "Title": "Compound operation evaluation in C++", "FavoriteCount": "1", "LastEditDate": "2014-07-17T07:34:37.063", "Id": "24796670", "Score": "0", "Body": "<p>When I execute the following code</p>\n<pre><code>#include &lt;iostream&gt;\nint &amp; f(int &amp;i)\n{\n    puts(\"this is f\");\n    return ++i;\n}\n\nint main()\n{\n    int x = 5;\n    printf(\"%d\", f(x) = f(x) + 1);\n    return 0;\n}\n</code></pre>\n<p>I get output as 8. I am unable to understand how that's happening. Can anyone give me a reason for that?</p>\n", "Tags": "<c++>", "OwnerUserId": "2947110", "AnswerCount": "5"}, "bq_ids": {"n4140": {"so_24796670_24796821_1": {"section_id": 6173, "quality": 1.0, "length": 15}, "so_24796670_24796821_0": {"section_id": 5811, "quality": 1.0, "length": 11}}, "n3337": {"so_24796670_24796821_1": {"section_id": 5934, "quality": 1.0, "length": 15}, "so_24796670_24796821_0": {"section_id": 5584, "quality": 1.0, "length": 11}}, "n4659": {"so_24796670_24796821_1": {"section_id": 7675, "quality": 1.0, "length": 15}, "so_24796670_24796821_0": {"section_id": 7272, "quality": 1.0, "length": 11}}}, "24796821": {"ParentId": "24796670", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>It's unspecified which of the two calls to <code>f(x)</code> occurs first; and if the right-hand-side one was called first, it's unspecified whether the prvalue conversion of that occurs before or after the call to the left-hand-side's <code>f(x)</code>. But all of those happen before the assignment.</p>\n<p>One valid order is:</p>\n<ul>\n<li>lhs f(x)</li>\n<li>rhs f(x)</li>\n<li>rvalue conversion</li>\n</ul>\n<p>which results in <code>i = 7 + 1;</code>.</p>\n<p>Alternatively it could be:</p>\n<ul>\n<li>rhs f(x)</li>\n<li>rvalue conversion</li>\n<li>lhs f(x)</li>\n</ul>\n<p>which results in <code>i = 6 + 1;</code> </p>\n<p>There is no undefined behaviour relating to the <code>++</code> operator, because there is a sequence-point before and after each function call.</p>\n<p>Refs:\n[intro.execution]#15</p>\n<blockquote>\n<p id=\"so_24796670_24796821_0\">Except where noted, evaluations of operands of individual operators and of subexpressions of individual expressions are unsequenced</p>\n</blockquote>\n<p>[expr.ass]#1</p>\n<blockquote>\n<p id=\"so_24796670_24796821_1\">In all cases, the assignment is sequenced after the value computation of the right and left operands, and before the value computation of the assignment expression.</p>\n</blockquote>\n<p>In this quote, \"the value computation of the assignment expression\" means the value that this expression takes if it's a sub-expression of a larger expression, e.g. <code>bar = ( foo(x) = foo(x) + 1 );</code></p>\n<hr>\n<p>This code will let you inspect which order your compiler is using. I have inserted <code>bar</code> which passes its value through unmodified.</p>\n<pre><code>#include &lt;cstdio&gt;\nusing namespace std;\n\nint &amp; f(int idx, int &amp;i)\n{\nprintf(\"this is f %s\\n\", idx ? \"right\" : \"left\");\nreturn ++i;\n}\n\nint bar(int idx, int z) \n{\n    printf(\"bar%d = %d\\n\", idx, z);\n    return z;\n}\n\nint main()\n{\n    int x=5;\n    f(0,x)= bar(0, bar(1, f(1,x)) + 1 );\n    printf(\"final = %d\\n\",x);\n    return 0;\n}\n</code></pre>\n<p>Output for my system:</p>\n<pre><code>this is f left\nthis is f right\nbar1 = 7\nbar0 = 8\nfinal = 8\n</code></pre>\n<p>Output <a href=\"http://coliru.stacked-crooked.com/a/3cdb708323816cf5\" rel=\"nofollow\">for Coliru</a>:</p>\n<pre><code>this is f right\nbar1 = 6\nbar0 = 7\nthis is f left\nfinal = 7\n</code></pre>\n</hr>", "OwnerUserId": "1505939", "LastEditorUserId": "1505939", "LastEditDate": "2014-07-17T07:32:24.980", "Id": "24796821", "Score": "2", "CreationDate": "2014-07-17T06:58:38.753", "LastActivityDate": "2014-07-17T07:32:24.980"}});