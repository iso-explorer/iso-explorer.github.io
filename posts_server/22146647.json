post_cb({"bq_ids": {"n4140": {"so_22146647_22146708_0": {"length": 20, "quality": 0.9090909090909091, "section_id": 380}, "so_22146647_22146739_1": {"length": 14, "quality": 1.0, "section_id": 380}}, "n3337": {"so_22146647_22146708_0": {"length": 20, "quality": 0.9090909090909091, "section_id": 371}, "so_22146647_22146739_1": {"length": 14, "quality": 1.0, "section_id": 371}}, "n4659": {"so_22146647_22146708_0": {"length": 20, "quality": 0.9090909090909091, "section_id": 395}, "so_22146647_22146739_1": {"length": 14, "quality": 1.0, "section_id": 395}}}, "22146647": {"ViewCount": "859", "Body": "<p>In regards to when temporary objects get destroyed, is this valid:</p>\n<pre><code>FILE *f = fopen (std::string (\"my_path\").c_str (), \"r\");\n</code></pre>\n<p>Will the temporary be destroyed immediately after having evaluated the first argument to <code>fopen</code> or after the <code>fopen</code> call.</p>\n<p>Testing with the following code:</p>\n<pre><code>#include &lt;cstdio&gt;\nusing namespace std;\nstruct A {\n        ~A() { printf (\"~A\\n\"); }\n        const char *c_str () { return \"c_str\"; }\n};\nvoid foo (const char *s) { printf (\"%s\\n\", s); }\nint main () {\n        foo (A().c_str());\n        printf (\"after\\n\");\n        return 0;\n}\n</code></pre>\n<p>gives:</p>\n<pre><code>c_str\n~A\nafter\n</code></pre>\n<p>which indicates that the whole statement is first evaluated, and then any temporaries are destroyed. Is this ordering mandated by the standard or implementation-specific?</p>\n", "AcceptedAnswerId": "22146708", "Title": "Usage of string::c_str on temporary string", "CreationDate": "2014-03-03T12:21:02.330", "LastActivityDate": "2014-03-03T12:24:28.043", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "Tags": "<c++><destructor><temporary-objects>", "Id": "22146647", "Score": "6", "OwnerUserId": "189186", "ClosedDate": "2014-03-03T15:36:18.157", "AnswerCount": "2"}, "22146708": {"Id": "22146708", "PostTypeId": "2", "Body": "<p>The temporary will be destroyed at the end of the expression, namely the <code>;</code> semicolon. <strong>So you are safe.</strong></p>\n<blockquote>\n<p id=\"so_22146647_22146708_0\">\u00a7 12.2 ... Temporary objects are destroyed as the last step in\n  evaluating the full-expression (1.9) that (lexically) contains the\n  point where they were created. This is true even if that evaluation\n  ends in throwing an exception.</p>\n</blockquote>\n", "LastActivityDate": "2014-03-03T12:23:05.093", "CommentCount": "0", "CreationDate": "2014-03-03T12:23:05.093", "ParentId": "22146647", "Score": "9", "OwnerUserId": "3099074"}, "22146739": {"Id": "22146739", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_22146647_22146739_0\">Is this ordering mandated by the standard or implementation-specific?</p>\n</blockquote>\n<p>[class.temporary]/3</p>\n<blockquote>\n<p id=\"so_22146647_22146739_1\">Temporary objects are destroyed as the last step\n  in evaluating the full-expression (1.9) that (lexically) contains the point where they were created.</p>\n</blockquote>\n<p>so its mandated by the standard</p>\n", "LastActivityDate": "2014-03-03T12:24:28.043", "CommentCount": "0", "CreationDate": "2014-03-03T12:24:28.043", "ParentId": "22146647", "Score": "1", "OwnerUserId": "471160"}});