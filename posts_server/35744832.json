post_cb({"bq_ids": {"n4140": {"so_35744832_35745378_4": {"length": 44, "quality": 0.9565217391304348, "section_id": 7183}, "so_35744832_35745355_2": {"length": 23, "quality": 0.8214285714285714, "section_id": 7187}, "so_35744832_35745378_7": {"length": 4, "quality": 0.5714285714285714, "section_id": 411}, "so_35744832_35745378_5": {"length": 4, "quality": 0.5714285714285714, "section_id": 480}}, "n3337": {"so_35744832_35745355_2": {"length": 23, "quality": 0.8214285714285714, "section_id": 6931}, "so_35744832_35745378_4": {"length": 30, "quality": 0.6521739130434783, "section_id": 6927}, "so_35744832_35745378_7": {"length": 4, "quality": 0.5714285714285714, "section_id": 402}}, "n4659": {"so_35744832_35745355_2": {"length": 23, "quality": 0.8214285714285714, "section_id": 8695}, "so_35744832_35745378_4": {"length": 25, "quality": 0.5434782608695652, "section_id": 8671}, "so_35744832_35745378_7": {"length": 4, "quality": 0.5714285714285714, "section_id": 429}}}, "35745378": {"Id": "35745378", "PostTypeId": "2", "Body": "<blockquote id=\"so_35744832_35745378_0\">\n<pre><code>free(p);\n</code></pre>\n</blockquote>\n<p>This turns the contents of <code>p</code> into an invalid pointer value.</p>\n<blockquote id=\"so_35744832_35745378_1\">\n<pre><code>int *q = (int *)malloc(sizeof(int));\n</code></pre>\n</blockquote>\n<p>This line has no relevance for <code>p</code>.</p>\n<blockquote id=\"so_35744832_35745378_2\">\n<pre><code>if (p == q) {\n</code></pre>\n</blockquote>\n<p>This is <strong>implementation-defined</strong> behaviour because <code>p</code> has an invalid pointer value.</p>\n<blockquote id=\"so_35744832_35745378_3\">\n<pre><code>    *p = 10;\n</code></pre>\n</blockquote>\n<p>And finally, this is <strong>undefined</strong> behaviour, for the same reason as above.</p>\n<p>C++ standard \u00a73.7.4.2/4:</p>\n<blockquote>\n<p id=\"so_35744832_35745378_4\">If the argument given to a deallocation function in the standard\n  library is a pointer that is not the null pointer value (4.10), the\n  deallocation function shall deallocate the storage referenced by the\n  pointer, <strong>rendering invalid</strong> all pointers referring to any part of the\n  deallocated storage. Indirection through an invalid pointer value and\n  passing an invalid pointer value to a deallocation function have\n  <strong>undefined behavior</strong>. Any other use of an invalid pointer value has\n  <strong>implementation-defined behavior.</strong></p>\n</blockquote>\n<p>Therefore, the answers to your questions are:</p>\n<blockquote>\n<p id=\"so_35744832_35745378_5\">Is it certain that the execution will always get into the if statement?</p>\n</blockquote>\n<p>It depends on the implementation. The C++ language does not guarantee it.</p>\n<blockquote>\n<p id=\"so_35744832_35745378_6\">Why does no-optimization has output 14, while -O3 has output 10 for the same instructions?</p>\n</blockquote>\n<p>Because the behaviour is undefined when you dereference an invalid pointer.</p>\n<hr>\n<p>In C, the comparison itself is undefined behaviour. Appendix J.2 in the C standard lists the circumstances in which the behaviour is undefined, and that list includes:</p>\n<blockquote>\n<p id=\"so_35744832_35745378_7\">The value of a pointer to an object whose lifetime has ended is used.</p>\n</blockquote>\n<p>You may find the following question including all comments and answers interesting: <a href=\"https://stackoverflow.com/questions/2397984/undefined-unspecified-and-implementation-defined-behavior\">Undefined, unspecified and implementation-defined behavior</a></p>\n</hr>", "LastEditorUserId": "-1", "LastActivityDate": "2016-03-02T11:58:29.660", "Score": "4", "CreationDate": "2016-03-02T11:03:19.073", "ParentId": "35744832", "CommentCount": "7", "OwnerUserId": "3313064", "LastEditDate": "2017-05-23T12:32:38.650"}, "35745355": {"Id": "35745355", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_35744832_35745355_0\">Is it certain that the execution will always get into the if statement? How do we know the addresses of the two pointers, p and q, will be the same?</p>\n</blockquote>\n<p>This is implementation defined, you cannot rely on this behaviour. <code>p</code> and <code>q</code> can indeed be equal, you have deallocated memory pointed by <code>p</code>, so <code>q</code> might get the same address as <code>p</code>. </p>\n<blockquote>\n<p id=\"so_35744832_35745355_1\">Why does no-optimization has output 14, while -O3 has output 10 for the same instructions?</p>\n</blockquote>\n<p>this is how optimizer works, you can see here your version:</p>\n<p><a href=\"https://goo.gl/yRfjIv\" rel=\"nofollow\">https://goo.gl/yRfjIv</a></p>\n<p>where compiler optimizes out assignment of 14, and here version where it looks correct:</p>\n<p><a href=\"https://goo.gl/vSVV0E\" rel=\"nofollow\">https://goo.gl/vSVV0E</a></p>\n<p>value 14 is being assigned, and I have added only one line <code>p = q;</code></p>\n<p>I am not sure why exactly it works like that, I would say that compiler assumes your code is free from undefined behaviour code and does optimizations under such assumption.  </p>\n<p>[edit]</p>\n<p>The Undefined Behaviour is caused by the use of pointer value which compiler assumes is no longer valid, it does not matter if it is later on equal to some newly allocated memory block. The appropriate standard quote was given by TartanLlama :</p>\n<p>[basic.stc.dynamic.safety]</p>\n<blockquote>\n<p id=\"so_35744832_35745355_2\">[ Note: the effect of using an invalid pointer value (including passing it to a\n  deallocation function) is undefined, see 3.7.4.2. This is true even if the unsafely-derived pointer value might\n  compare equal to some safely-derived pointer value. \u2014end note ]</p>\n</blockquote>\n", "LastEditorUserId": "471160", "LastActivityDate": "2016-03-02T11:24:52.867", "Score": "0", "CreationDate": "2016-03-02T11:02:28.190", "ParentId": "35744832", "CommentCount": "7", "OwnerUserId": "471160", "LastEditDate": "2016-03-02T11:24:52.867"}, "35745670": {"Id": "35745670", "PostTypeId": "2", "Body": "<p>The <code>if</code>-condition may be false -- depending on the particular implementation of <code>malloc()</code> it may return the just-freed block for reuse or a different one.</p>\n<p>But, if the program prints <em>anything</em> (because it so happened that <code>q</code> equals <code>p</code>), it must print <code>14</code>. A compiler producing anything else is buggy...</p>\n<p>Using clang 3.4.1 and 3.6.2 here I consistently get the right answer, whereas both gcc 4.2.1 and 5.3.0 manifest the bug. Unfortunately, so does clang 3.8.0.</p>\n", "LastActivityDate": "2016-03-02T11:16:54.170", "CommentCount": "0", "CreationDate": "2016-03-02T11:16:54.170", "ParentId": "35744832", "Score": "-3", "OwnerUserId": "1747834"}, "35744832": {"ViewCount": "186", "Body": "<p>It seems like the C/C++ compiler (clang, gcc, etc) produces <em>different</em> output related to the optimization level. You may as well check the online link included in this post. </p>\n<p><a href=\"http://cpp.sh/5vrmv\" rel=\"nofollow\">http://cpp.sh/5vrmv</a> (change output from none to -O3 to see the differences).</p>\n<p>Based on the following piece of code, could someone explain a few questions I have:</p>\n<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(void) {\n\n    int *p = (int *)malloc(sizeof(int));\n    free(p);\n    int *q = (int *)malloc(sizeof(int));\n    if (p == q) {\n        *p = 10;\n        *q = 14;\n        printf(\"%d\", *p);\n    }\n    return 0;\n}\n</code></pre>\n<ol>\n<li>Is it certain that the execution will always get into the if statement? How do we know the addresses of the two pointers, p and q, will be the same?</li>\n<li>Why does no-optimization has output <strong>14</strong>, while -O3 has output <strong>10</strong> for the same instructions?</li>\n</ol>\n", "AcceptedAnswerId": "35745378", "Title": "C/C++ Indeterminate Values: Compiler optimization gives different output (example)", "CreationDate": "2016-03-02T10:40:42.407", "Id": "35744832", "CommentCount": "18", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2016-03-02T11:03:58.420", "LastEditorUserId": "3313064", "LastActivityDate": "2016-03-02T11:58:29.660", "Score": "4", "OwnerUserId": "6007189", "Tags": "<c++><c><optimization><compilation><compiler-optimization>", "AnswerCount": "3"}});