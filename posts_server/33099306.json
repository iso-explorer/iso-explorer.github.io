post_cb({"41981159": {"Id": "41981159", "PostTypeId": "2", "Body": "<p>I managed to get this to work, by defining all the contents of the specialized template class within the outer class. So all functions are completely defined withing the class definition. No external function definitions, as that did not seem to complile. I.e.</p>\n<pre><code>template &lt;typename T, size_t N&gt;\nclass A\n{\nprivate:\n    template &lt;size_t M&gt;\n    class B\n    {\n        ...\n    };\n\n    template &lt;&gt;\n    class B&lt;2&gt;\n    {\n        ...\n    };\n    ... etc\n};\n</code></pre>\n<p>It worked on MS2015 at least. Code is running just fine.</p>\n", "LastActivityDate": "2017-02-01T13:35:50.307", "CommentCount": "1", "CreationDate": "2017-02-01T13:35:50.307", "ParentId": "33099306", "Score": "1", "OwnerUserId": "6717178"}, "33099716": {"Id": "33099716", "PostTypeId": "2", "Body": "<p>It's forbidden to create explicit specialization in class-scope:</p>\n<blockquote>\n<p id=\"so_33099306_33099716_0\">An explicit specialization shall be declared in a namespace enclosing\n  the specialized template.</p>\n</blockquote>\n<p>But it's not forbidden to create partial specialization:</p>\n<blockquote>\n<p id=\"so_33099306_33099716_1\">A class template partial specialization may be declared or redeclared\n  in any namespace scope in which its definition may be defined (14.5.1\n  and 14.5.2).</p>\n</blockquote>\n<p>this</p>\n<pre><code>template &lt;bool Dummy&gt;\nclass Nested&lt;int, Dummy&gt;{}; // why need to provide an argument??\n</code></pre>\n<p>is partial specialization and it's allowed to create such specialization in class-scope. You also cannot fully specialize nested class, in not-specialized outer class. You can do this:</p>\n<pre><code>template&lt;&gt;\ntemplate&lt;&gt;\nclass A&lt;int, double&gt;::Nested&lt;int&gt;\n{\n};\n</code></pre>\n<p>but you cannot do</p>\n<pre><code>template&lt;typename C, typename T&gt;\ntemplate&lt;&gt;\nclass A&lt;C, T&gt;::Nested&lt;int&gt;\n{\n};\n</code></pre>\n", "LastEditorUserId": "1498580", "LastActivityDate": "2015-10-13T10:22:03.027", "Score": "11", "CreationDate": "2015-10-13T10:00:41.377", "ParentId": "33099306", "CommentCount": "0", "OwnerUserId": "1498580", "LastEditDate": "2015-10-13T10:22:03.027"}, "33099306": {"ViewCount": "1995", "Body": "<p>A class:</p>\n<pre><code>template&lt;typename C, typename T&gt;\nclass A\n{\n    template &lt;typename U&gt;\n    class Nested{};\n\n    Nested&lt;T&gt; n;\n};\n</code></pre>\n<p>And I want to specialize <code>Nested</code>. Here what I tried:</p>\n<pre><code>template&lt;typename C, typename T&gt;\nclass A\n{\n    template &lt;typename U&gt;\n    class Nested{};\n\n    template &lt;&gt;\n    class Nested&lt;int&gt;{}; // by my logic this should work by I have a compilation error \"explicit specialization in non-namespace scope 'class A&lt;C, T&gt;'\"\n\n    Nested&lt;T&gt; n;\n};\n</code></pre>\n<p>My next attempt:</p>\n<pre><code>template&lt;typename C, typename T&gt;\nclass A\n{\n    template &lt;typename U&gt;\n    class Nested{};\n\n    Nested&lt;T&gt; n;\n};\n\ntemplate&lt;&gt;\nA&lt;&gt;::Nested&lt;int&gt;{}; // What is the correct syntax to do it here? Now I have an error \"wrong number of template arguments (0, should be 2)\"\n</code></pre>\n<p>Here on stackoverflow I found a solution:</p>\n<pre><code>template&lt;typename C, typename T&gt;\nclass A\n{\n    template &lt;typename U, bool Dummy = true&gt;\n    class Nested{}; // why need of this Dummy??\n\n    template &lt;bool Dummy&gt;\n    class Nested&lt;int, Dummy&gt;{}; // why need to provide an argument??\n\n    Nested&lt;T&gt; n;\n};\n</code></pre>\n<p>It perfectly works, but I can't understand how. Why to provide a dummy template argument? Why can't I use raw specialization <code>template&lt;&gt; class Nested&lt;int, true&gt;{}</code> or <code>template&lt;&gt; class Nested&lt;int&gt;{}</code>?</p>\n", "AcceptedAnswerId": "33099716", "Title": "Nested class template specialization", "CreationDate": "2015-10-13T09:42:05.573", "Id": "33099306", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2017-02-01T13:35:50.307", "Score": "11", "OwnerUserId": "1341942", "Tags": "<c++><templates><template-specialization>", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_33099306_33099716_1": {"length": 13, "quality": 0.8666666666666667, "section_id": 139}, "so_33099306_33099716_0": {"length": 7, "quality": 1.0, "section_id": 264}}, "n3337": {"so_33099306_33099716_1": {"length": 13, "quality": 0.8666666666666667, "section_id": 133}, "so_33099306_33099716_0": {"length": 7, "quality": 1.0, "section_id": 255}}, "n4659": {"so_33099306_33099716_1": {"length": 9, "quality": 0.6, "section_id": 143}, "so_33099306_33099716_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 285}}}});