post_cb({"42926317": {"CommentCount": "4", "ViewCount": "70", "CreationDate": "2017-03-21T11:51:11.930", "LastActivityDate": "2017-03-21T12:04:24.887", "Title": "If class Outer is my friend, is class Outer::Inner too?", "AcceptedAnswerId": "42926466", "PostTypeId": "1", "Id": "42926317", "Score": "3", "Body": "<p>The following code compiles on MSVC:</p>\n<pre><code>#include &lt;iostream&gt;\n\nclass Bob\n{        \n    int a;\n    friend class Outer;\n};\nclass Outer\n{      \n    class Inner\n    {\n        void f(Bob obj)\n        {\n            std::cout &lt;&lt; obj.a; //OK\n        }\n    };\n};\n</code></pre>\n<p>So it seems that if Outer is a friend of Bob, so is Inner, automatically. I am reading the Friends chapter of the standard and am unable to find a clause that would confirm or refute this. </p>\n<p>Is this legal, and if so, what's the chapter and verse?</p>\n", "Tags": "<c++><language-lawyer><friend><member-access>", "OwnerUserId": "469935", "AnswerCount": "1"}, "42926466": {"ParentId": "42926317", "PostTypeId": "2", "CommentCount": "3", "Body": "<p><strong>[class.access.nest]/1</strong> states that</p>\n<blockquote>\n<p id=\"so_42926317_42926466_0\">A nested class is a member and as such has the same access rights as any other member</p>\n</blockquote>\n<p>So I believe yes, this is standard behavior. </p>\n<p>Let's say that <code>Outer</code> has a member function <code>foo()</code>. That function, of course, will have access to <code>Bob</code>'s members. To my understanding, the part that I quoted implies that any nested class inside <code>Outer</code> would have the same access rights as <code>foo()</code>, thus having the ability to access <code>Bob</code>'s members. </p>\n<p>It is also worth noting that the standard contains the following example (<strong>[class.friend]/2</strong>), note the usage of <code>A::B</code> in <code>Y</code>:</p>\n<pre><code>class A {\n    class B { };\n    friend class X;\n};\n\nstruct X : A::B {\n    // OK: A::B accessible to friend\n    A::B mx; // OK: A::B accessible to member of friend\n    class Y {\n        A::B my; // OK: A::B accessible to nested member of friend\n    };\n};\n</code></pre>\n", "OwnerUserId": "1490355", "LastEditorUserId": "1490355", "LastEditDate": "2017-03-21T12:04:24.887", "Id": "42926466", "Score": "3", "CreationDate": "2017-03-21T11:57:22.263", "LastActivityDate": "2017-03-21T12:04:24.887"}, "bq_ids": {"n4140": {"so_42926317_42926466_0": {"section_id": 6700, "quality": 1.0, "length": 9}}, "n3337": {"so_42926317_42926466_0": {"section_id": 6455, "quality": 1.0, "length": 9}}, "n4659": {"so_42926317_42926466_0": {"section_id": 8174, "quality": 1.0, "length": 9}}}});