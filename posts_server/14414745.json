post_cb({"14414819": {"ParentId": "14414745", "CommentCount": "0", "Body": "<p>Yes, the virtual member function(s) (in this case a destructor) are held in a \"vtable\", which is often stored as the first element(s) of the class data structure. </p>\n<p>However, be aware that there is no strict rules in the C++ standard that says that this is the case.</p>\n", "OwnerUserId": "1919155", "PostTypeId": "2", "Id": "14414819", "Score": "1", "CreationDate": "2013-01-19T13:23:49.643", "LastActivityDate": "2013-01-19T13:23:49.643"}, "14414792": {"ParentId": "14414745", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>The code example has an <strong><a href=\"https://stackoverflow.com/questions/2397984/undefined-unspecified-and-implementation-defined-behavior\">implementation defined behavior</a></strong>. The output for any of the cases cannot be guaranteed. It is <strong>not</strong> guaranteed that members of a class are always placed in contiguous memory locations.There can be padding bytes added in between them. And whether or not padding is added is left out as an implementation detail. Your suspicion of <code>virtual</code> playing a role just might be true<sup>[Note 1:]</sup>. But the important thing to note is even without the <code>virtual</code> the output is not guaranteed. </p>\n<p><strong>Reference:</strong><br>\nC++11: 9.2 Class members [class.mem]</br></p>\n<blockquote>\n<p id=\"so_14414745_14414792_0\">14) Nonstatic data members of a (non-union) class with the same access control (Clause 11) are allocated so\n  that later members have higher addresses within a class object. The order of allocation of non-static data\n  members with different access control is unspecified (11). <strong>Implementation alignment requirements might\n  cause two adjacent members not to be allocated immediately after each other; so might requirements for\n  space for managing virtual functions (10.3) and virtual base classes (10.1).</strong> </p>\n</blockquote>\n<hr>\n<p><sup>[Note 1]:</sup><br>\nDynamic dispatch itself is a implementation defined mechanism but most(<em>read all known</em>) implementations use the virtual table and pointer mechanism to implement it.<br>\nIn case of a polymorphic class(<em>which does not derive from any other class</em>) <strong><em>usually</em></strong> the virtual pointer is stored as the first element of class. So it is reasonable to assume that this is what happens behind the scenes in the last case when you run the code sample on your environment.         </br></br></p>\n<p><strong><a href=\"http://ideone.com/lUhw58\" rel=\"nofollow noreferrer\">Online sample</a></strong>: </p>\n<pre><code>#include&lt;iostream&gt;\nusing std::cout;\nusing std::endl;\n\nclass B;\ntypedef void (*HANDLE_DOSOMETHING)(B *const, int q);\n\nclass B\n{\npublic:\n  virtual void doSomething(int q)\n  {\n      std::cout&lt;&lt;\"B::doSomething()\"&lt;&lt;q&lt;&lt;endl;\n  }\n  void dummy()\n  {\n      HANDLE_DOSOMETHING *f1ptr = NULL;\n      int                *vtbl  = NULL;\n      int                *vptr  = (int *)this; // address of the object\n\n      vtbl = (int *)*vptr; //address of the VTABLE\n\n      f1ptr = (HANDLE_DOSOMETHING *)&amp;(vtbl[0]); //address of the 1st virtual function\n      (*f1ptr)(this, 55);\n   }\n};\nint main()\n{\n    B objb;\n    objb.dummy();\n    return 0;  \n}\n</code></pre>\n<p><strong>Output:</strong> </p>\n<pre><code>B::doSomething()55\n</code></pre>\n</hr>", "OwnerUserId": "452307", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T11:56:45.060", "Id": "14414792", "Score": "3", "CreationDate": "2013-01-19T13:19:24.807", "LastActivityDate": "2013-01-20T04:57:02.493"}, "14414745": {"CommentCount": "1", "ViewCount": "256", "PostTypeId": "1", "LastEditorUserId": "809230", "CreationDate": "2013-01-19T13:12:41.350", "LastActivityDate": "2013-01-20T04:57:02.493", "Title": "c++ Classes and their layouts and conversions", "AcceptedAnswerId": "14414792", "LastEditDate": "2013-01-19T13:24:51.687", "Id": "14414745", "Score": "1", "Body": "<p>I was given this code to test my cpp understanding, and I am quite confused:</p>\n<pre><code>#include \"stdafx.h\"\n#include &lt;iostream&gt;\n#include &lt;cstddef&gt;\n\nusing namespace std;\n\nclass A\n{\npublic:\n    A() : m_x(0) { }\n\npublic:\n    static ptrdiff_t member_offset(const A &amp;a)\n    {\n        const char *p = reinterpret_cast&lt;const char*&gt;(&amp;a);\n        const char *q = reinterpret_cast&lt;const char*&gt;(&amp;a.m_x);\n\n        return q - p;\n    }\n\nprivate:\n    int m_x;\n};\n\nclass B\n    : public A\n{\npublic:\n    B() : m_x('a') { }\n\npublic:\n    static int m_n;\n\npublic:\n    static ptrdiff_t member_offset(const B &amp;b)\n    {\n        const char *p = reinterpret_cast&lt;const char*&gt;(&amp;b);\n        const char *q = reinterpret_cast&lt;const char*&gt;(&amp;b.m_x);\n\n        return q - p;\n    }\n\nprivate:\n    char m_x;\n};\n\nint B::m_n = 1;\n\nclass C\n{\npublic:\n    C() : m_x(0) { }\n    virtual ~C() { }\n\npublic:\n    static ptrdiff_t member_offset(const C &amp;c)\n    {\n        const char *p = reinterpret_cast&lt;const char*&gt;(&amp;c);\n        const char *q = reinterpret_cast&lt;const char*&gt;(&amp;c.m_x);\n\n        return q - p;\n    }\n\nprivate:\n    int m_x;\n};\n\nint _tmain(int argc, _TCHAR* argv[])\n{\n    A a;\n    B b;\n    C c;\n    std::cout &lt;&lt; ((A::member_offset(a) == 0) ? 0 : 1);\n    std::cout &lt;&lt; ((B::member_offset(b) == 0) ? 0 : 2);\n    std::cout &lt;&lt; ((A::member_offset(b) == 0) ? 0 : 3);\n    std::cout &lt;&lt; ((C::member_offset(c) == 0) ? 0 : 4);\n    std::cout &lt;&lt; std::endl;\n\n    return 0;\n}\n</code></pre>\n<p>The answer is 0204.\nI have understand the first 3cases, but not the last one. The difference between the last and first is a virtual desctructor. Is this related? If yes, how?</p>\n", "Tags": "<c++><oop><polymorphism>", "OwnerUserId": "1866880", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_14414745_14414792_0": {"section_id": 5873, "quality": 0.9423076923076923, "length": 49}}, "n3337": {"so_14414745_14414792_0": {"section_id": 5644, "quality": 0.9423076923076923, "length": 49}}, "n4659": {"so_14414745_14414792_0": {"section_id": 7356, "quality": 0.9423076923076923, "length": 49}}}});