post_cb({"7650357": {"ParentId": "7649649", "CommentCount": "0", "Body": "<p>Dynamic memory allocation is always done at run time.it can be achieved using \"new\" keyword.\nbut there is one more case as mentioned in your problem *p=&amp;d here as you have made base class function \"Virtual\" it tells compiler to treat \"p\" by it Content and not by the type of pointer to which it belong.so this is one of the Dynamic memory allocation as compiler never know which class object's address your going to store at run time ,it only knows which type of pointer it is (i.e. Base class pointer or derived class pointer).</p>\n", "OwnerUserId": "925436", "PostTypeId": "2", "Id": "7650357", "Score": "-1", "CreationDate": "2011-10-04T15:31:41.200", "LastActivityDate": "2011-10-04T15:31:41.200"}, "7649649": {"CommentCount": "0", "AcceptedAnswerId": "7649711", "CreationDate": "2011-10-04T14:40:33.927", "LastActivityDate": "2011-10-04T15:33:29.967", "PostTypeId": "1", "ViewCount": "3737", "FavoriteCount": "5", "Title": "What is dynamic type of object", "Id": "7649649", "Score": "7", "Body": "<p>What i think is that dynamic type means dynamically allocated object using <code>new</code>. In the following case, do you say <code>p</code> points to dynamic type or static type of object? In standard, it doesn't say about dynamic type being dynamic object.</p>\n<blockquote>\n<p id=\"so_7649649_7649649_0\">1.3.3 - The type of the most derived object (1.8) to which the lvalue denoted\n  by an lvalue expression refers. [Example: if a pointer (8.3.1) p whose\n  static type is \"pointer to class B\" is pointing to an object of class\n  D, derived from B (clause 10), the dynamic type of the expression *p\n  is \"D.\" References (8.3.2) are treated similarly. ]</p>\n</blockquote>\n<p>Also what does it the following quote mean </p>\n<blockquote>\n<p id=\"so_7649649_7649649_1\">The dynamic type of an rvalue expression is its static type</p>\n</blockquote>\n<pre><code>class Base {\n    virtual void foo(){}\n};\n\nclass Derived : public Base {\n    void foo(){}\n};\n\nint main()\n{\n    Derived d;\n    Base *p = &amp;d;\n}\n</code></pre>\n", "Tags": "<c++><inheritance>", "OwnerUserId": "974191", "AnswerCount": "4"}, "7650103": {"ParentId": "7649649", "CommentCount": "0", "Body": "<p>In a statically typed language, such as C++ or Java for example, <code>static</code> may refer to the information known at compilation time while <code>dynamic</code> refers to the information known at runtime.</p>\n<p>For example:</p>\n<pre><code>struct Base { virtual std::string name() const { return \"Base\"; } };\n\nstruct Derived: Base { std::string name() const { return \"Derived\"; } };\n\nvoid print(Base const&amp; b) { std::cout &lt;&lt; b.name() &lt;&lt; \"\\n\"; }\n</code></pre>\n<p>In the <code>print</code> method, the <code>static</code> type of <code>b</code> is <code>Base const&amp;</code>. Therefore, the compiler will check that all methods called exist in the context of a <code>Base</code> object.</p>\n<p>However, when execution comes, the call to <code>name</code>, as the method is virtual, is performed with regard to the <code>dynamic</code> type of the object:</p>\n<ul>\n<li>this may be <code>Base</code></li>\n<li>this may be <code>Derived</code></li>\n<li>this may be another derived class from <code>Base</code> that we know not yet</li>\n</ul>\n<p>Therefore, in the following example:</p>\n<pre><code>int main(int argc, char* argv[]) {\n  if (argc == 1) {\n    Base base;\n    print();\n  } else {\n    Derived derived;\n    print(derived);\n  }\n};\n</code></pre>\n<ul>\n<li>The <code>static</code> and <code>dynamic</code> type of <code>base</code> is <code>Base</code> and <code>derived</code> is <code>Derived</code>.</li>\n<li>In the <code>print</code> method, the <code>static</code> type of <code>b</code> is <code>Base</code> (always)</li>\n<li>Depending on the number of arguments, the <code>dynamic</code> of <code>b</code> is either <code>Base</code> or <code>Derived</code></li>\n</ul>\n<p>It is a current mistake to assume that polymorphism is necessarily based on dynamic memory allocation, but the two concepts, while not orthogonal, can be used without one another in some conditions.</p>\n", "OwnerUserId": "147192", "PostTypeId": "2", "Id": "7650103", "Score": "3", "CreationDate": "2011-10-04T15:13:06.637", "LastActivityDate": "2011-10-04T15:13:06.637"}, "7649702": {"ParentId": "7649649", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The <strong>static type</strong> is the type of the variable, which is the only type known at <strong>compile time</strong> (hence considered static - cannot change). The <strong>dynamic type</strong> is the type of the object that is actually being pointed at <strong>run-time</strong>. Dynamic here means it's only known at run time, which means it might change (namely one variable can point on various objects of various types).</p>\n<p>The use of <code>new</code> in this content is not relevant, as your own example shows. In your main, the static and dynamic type of <code>d</code> is <code>Derived</code>, because it's not a pointer or reference. <code>p</code>, however, has a static type of <code>Base</code>, but in your code, the dynamic type would be <code>Derived</code>.</p>\n", "OwnerUserId": "26039", "LastEditorUserId": "26039", "LastEditDate": "2011-10-04T15:09:05.843", "Id": "7649702", "Score": "5", "CreationDate": "2011-10-04T14:44:53.873", "LastActivityDate": "2011-10-04T15:09:05.843"}, "7649711": {"ParentId": "7649649", "PostTypeId": "2", "CommentCount": "8", "Body": "<blockquote>\n<p id=\"so_7649649_7649711_0\">What i think is that dynamic type means dynamically allocated object\n  using new.</p>\n</blockquote>\n<p>Nope.</p>\n<p>The dynamic type is the real type of an object that might be accessed via a reference (pointer included) that point to a base type of its real type.</p>\n<p>That is, if we have :</p>\n<pre><code>class A {\n\n};\n\nclass B : public A { };\n\n\nB l;\nA&amp; k = l;\n</code></pre>\n<p>Here k is a reference to an object of type A, but the real type of the referred object, its dynamic type, is B.</p>\n<p><strong>Here \"dynamic\" has the meaning of \"known only at run-time\".</strong></p>\n", "OwnerUserId": "2368", "LastEditorUserId": "2368", "LastEditDate": "2011-10-04T15:33:29.967", "Id": "7649711", "Score": "19", "CreationDate": "2011-10-04T14:45:28.240", "LastActivityDate": "2011-10-04T15:33:29.967"}, "bq_ids": {"n4140": {"so_7649649_7649649_0": {"section_id": 5768, "quality": 0.7419354838709677, "length": 23}, "so_7649649_7649649_1": {"section_id": 5768, "quality": 0.625, "length": 5}}, "n3337": {"so_7649649_7649649_0": {"section_id": 5541, "quality": 0.7419354838709677, "length": 23}, "so_7649649_7649649_1": {"section_id": 5541, "quality": 0.625, "length": 5}}, "n4659": {"so_7649649_7649649_0": {"section_id": 7225, "quality": 0.6774193548387096, "length": 21}, "so_7649649_7649649_1": {"section_id": 4087, "quality": 0.625, "length": 5}}}});