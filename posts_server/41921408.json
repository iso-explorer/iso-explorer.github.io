post_cb({"41921408": {"CommentCount": "6", "ViewCount": "273", "PostTypeId": "1", "LastEditorUserId": "3616359", "CreationDate": "2017-01-29T13:26:39.573", "LastActivityDate": "2017-01-29T13:46:02.037", "Title": "Can static_cast be done from base class to derived class if derived class contains additional methods and members?", "AcceptedAnswerId": "41921517", "LastEditDate": "2017-01-29T13:34:58.547", "Id": "41921408", "Score": "0", "Body": "<p>Suppose we have class A and B as follows:</p>\n<pre><code>class A\n{\n  private:\n   int a;\n\n  public:\n\n   void seta(int a_)\n    {\n       a=a_;\n    }\n   int geta()\n   {\n    return a;\n   }\n  };\n\nclass B: public A\n{\n  private:\n   int b;\n\n  public:\n\n   int getb()\n     {\n       return b;\n     }\n\n  void setb()\n   {\n     b=geta()+1;\n   }\n\n };\n</code></pre>\n<p>and suppose that I make such code in the function:</p>\n<pre><code>A* a=new A();\na-&gt;seta(5);\nB* b=static_cast&lt;B*&gt;(a);\nb-&gt;setb();\ncout&lt;&lt;b-&gt;getb()&lt;&lt;\" and \"&lt;&lt;b-&gt;geta()&lt;&lt;endl;\n</code></pre>\n<p>This code compiles and runs, but it confuses me why? If <code>a</code> is pointer to <code>A</code> class and during allocation only memory for <code>class A</code> members is reserved (at runtime), why after static cast it seems that this object is actually instance of <code>class B</code>. Is this safe operation?</p>\n", "Tags": "<c++><static-cast>", "OwnerUserId": "3616359", "AnswerCount": "2"}, "41921592": {"ParentId": "41921408", "CommentCount": "0", "Body": "<p>This is not a safe thing to do.\nThe following code demonstrates why</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass A \n{\nprivate:\n  int a;\n\npublic:  \n  void seta(int a_) {\n    a=a_;\n    cout &lt;&lt; \"seta to: \" &lt;&lt; a &lt;&lt; endl;\n  }\n\n  int geta() {\n    return a;\n  }\n};\n\nclass B: public A\n{\n  private:\n   int b;\n\n  public:\n\n  int getb() {\n    return b;\n  }\n\n  void setb() {\n    b=geta()+1;\n    cout &lt;&lt; \"setb to: \" &lt;&lt; b &lt;&lt; endl;\n  }  \n};\n\nint main() {\n\n  A as[2];\n\n  A* a1=as;\n  A* a2=&amp;as[1];\n\n  a1-&gt;seta(5);\n  a2-&gt;seta(4);\n\n  cout &lt;&lt; \"a1: \"\n       &lt;&lt; a1-&gt;geta()\n       &lt;&lt; endl;\n\n  cout &lt;&lt; \"a2: \" \n       &lt;&lt; a2-&gt;geta()\n       &lt;&lt; endl;\n\n  B* b=static_cast&lt;B*&gt;(a1);\n\n  b-&gt;setb();\n\n  a2-&gt;seta(3);\n\n  cout &lt;&lt; \"b-&gt;geta(): \"\n       &lt;&lt; b-&gt;geta()\n       &lt;&lt;\" and b-&gt;getb(): \"  \n       &lt;&lt; b-&gt;getb()\n       &lt;&lt; endl;\n\n  size_t sizeofa(sizeof(A));\n  cout &lt;&lt; \"sizeofa: \"\n       &lt;&lt; sizeofa\n       &lt;&lt; endl;\n\n  size_t sizeofb(sizeof(B));\n  cout &lt;&lt; \"sizeofb: \"\n       &lt;&lt; sizeofb\n       &lt;&lt; endl;\n\n}\n</code></pre>\n<p>The output is </p>\n<pre><code>seta to: 5\nseta to: 4\na1: 5\na2: 4\nsetb to: 6\nseta to: 3\nb-&gt;geta(): 5 and b-&gt;getb(): 3\nsizeofa: 4\nsizeofb: 8\n</code></pre>\n", "OwnerUserId": "7421372", "PostTypeId": "2", "Id": "41921592", "Score": "0", "CreationDate": "2017-01-29T13:46:02.037", "LastActivityDate": "2017-01-29T13:46:02.037"}, "bq_ids": {"n4140": {"so_41921408_41921517_0": {"section_id": 6037, "quality": 0.7941176470588235, "length": 54}}, "n3337": {"so_41921408_41921517_0": {"section_id": 5805, "quality": 0.7794117647058824, "length": 53}}, "n4659": {"so_41921408_41921517_0": {"section_id": 7536, "quality": 0.8823529411764706, "length": 60}}}, "41921517": {"ParentId": "41921408", "CommentCount": "0", "Body": "<p><a href=\"http://eel.is/c++draft/expr.static.cast#11\" rel=\"nofollow noreferrer\">[expr.static.cast]/11</a>, emphasis mine:</p>\n<blockquote>\n<p id=\"so_41921408_41921517_0\">A prvalue of type \u201cpointer to <em>cv1</em> <code>B</code>\u201d, where <code>B</code> is a class type, can be converted to a prvalue of type \u201cpointer to <em>cv2</em> <code>D</code>\u201d, where <code>D</code> is a class derived (Clause 10) from <code>B</code>, if <em>cv2</em> is the same cv-qualification as, or greater cv-qualification than, <em>cv1</em>. If <code>B</code> is a virtual base class of <code>D</code> or a base class of a virtual base class of <code>D</code>, or if no valid standard conversion from \u201cpointer to <code>D</code>\u201d to \u201cpointer to <code>B</code>\u201d exists (4.11), the program is ill-formed. The null pointer value (4.11) is converted to the null pointer value of the destination type. If the prvalue of type \u201cpointer to <em>cv1</em> <code>B</code>\u201d points to a <code>B</code> that is actually a subobject of an object of type <code>D</code>, the resulting pointer points to the enclosing object of type <code>D</code>. <strong>Otherwise, the behavior is undefined.</strong></p>\n</blockquote>\n", "OwnerUserId": "4672588", "PostTypeId": "2", "Id": "41921517", "Score": "3", "CreationDate": "2017-01-29T13:37:16.947", "LastActivityDate": "2017-01-29T13:37:16.947"}});