post_cb({"31869026": {"CommentCount": "1", "AcceptedAnswerId": "31869085", "CreationDate": "2015-08-07T03:01:28.573", "LastActivityDate": "2015-08-07T19:29:17.623", "PostTypeId": "1", "ViewCount": "420", "FavoriteCount": "1", "Title": "C++ Function call via an object with public member pointer to function, without using dereference operator", "Id": "31869026", "Score": "4", "Body": "<p>Alright, I think the title is sufficiently descriptive (yet confusing, sorry).</p>\n<p>I'm reading this library: <a href=\"http://playground.arduino.cc/Code/Timer1\" rel=\"nofollow\">Timer1</a>.</p>\n<p>In the header file there is a public member pointer to a function as follows:</p>\n<pre><code>class TimerOne\n{\n  public:\n  void (*isrCallback)();\n};\n</code></pre>\n<p>There exists an instantiated object of the TimerOne class, called \"Timer1\".</p>\n<p>Timer1 calls the function as follows:</p>\n<pre><code>Timer1.isrCallback();\n</code></pre>\n<p>How is this correct? I am familiar with calling functions via function pointers by using the dereference operator. </p>\n<p>Ex: </p>\n<pre><code>(*myFunc)();\n</code></pre>\n<p>So I would have expected the above call via the object to be something more like:</p>\n<pre><code>(*Timer1.isrCallback)();\n</code></pre>\n<p><strong>So, what are the acceptable options for calling functions via function pointers, as both stand-alone function pointers <em>and</em> members of an object?</strong></p>\n", "Tags": "<c++><function><pointers><function-pointers>", "OwnerUserId": "4561887", "AnswerCount": "3"}, "31869097": {"ParentId": "31869026", "CommentCount": "1", "Body": "<p>You don't have to dereference a function pointer to call it. According to the standard ([expr.call]/1),</p>\n<blockquote>\n<p id=\"so_31869026_31869097_0\">The postfix expression shall have\n  function type or pointer to function type.</p>\n</blockquote>\n<p>So <code>(*myFunc)()</code> is valid, and so is <code>myFunc()</code>. In fact, <code>(**myFunc)()</code> is valid too, and you can dereference as many times as you want (can you figure out why?)</p>\n", "OwnerUserId": "481267", "PostTypeId": "2", "Id": "31869097", "Score": "5", "CreationDate": "2015-08-07T03:10:48.153", "LastActivityDate": "2015-08-07T03:10:48.153"}, "31869102": {"ParentId": "31869026", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>You asked:</p>\n<blockquote>\n<p id=\"so_31869026_31869102_0\"><code>Timer1</code> calls the function as follows:</p>\n<pre><code>Timer1.isrCallback();\n</code></pre>\n<p id=\"so_31869026_31869102_1\">How is this correct? </p>\n</blockquote>\n<p>The type of <code>Timer1.isrCallback</code> is <code>void (*)()</code>. It is a pointer to a function. That's why you can use that syntax.</p>\n<p>It is similar to using:</p>\n<pre><code>void foo()\n{\n}\n\nvoid test_foo()\n{\n   void (*fptr)() = foo;\n   fptr();\n}\n</code></pre>\n<p>You can also use:</p>\n<pre><code>void test_foo()\n{\n   void (*fptr)() = foo;\n   (*fptr)();\n}\n</code></pre>\n<p>but the first form is equally valid.</p>\n<p><strong>Update, in response to comment by OP</strong></p>\n<p>Given the posted definition of the class you would use:</p>\n<pre><code>(*Timer1.isrCallback)(); \n</code></pre>\n<p>To use</p>\n<pre><code>(Timer1.*isrCallback)(); \n</code></pre>\n<p><code>isrCallback</code> has to be defined as a non-member variable of whose type is a pointer to a member variable of <code>TimerOne</code>.</p>\n<pre><code>void (TimerOne::*isrCallback)();\n</code></pre>\n<p>Example:</p>\n<pre><code>#include &lt;iostream&gt;\n\nclass TimerOne\n{\n  public:\n  void foo()\n  {\n     std::cout &lt;&lt; \"In TimerOne::foo();\\n\";\n  }\n};\n\nint main()\n{\n   TimerOne Timer1;\n   void (TimerOne::*isrCallback)() = &amp;TimerOne::foo;\n   (Timer1.*isrCallback)();\n}\n</code></pre>\n<p>Output:  </p>\n<pre><code>In TimerOne::foo();\n</code></pre>\n<p><a href=\"http://cpp.sh/7m6j3\" rel=\"nofollow\">(Test this code)</a></p>\n<hr>\n<p>If you want to define <code>isrCallbak</code> as a member variable of <code>TimerOne</code>, you'll need to use:</p>\n<pre><code>#include &lt;iostream&gt;\n\nclass TimerOne\n{\n  public:\n  void (TimerOne::*isrCallback)();\n  void foo()\n  {\n     std::cout &lt;&lt; \"In TimerOne::foo();\\n\";\n  }\n};\n\nint main()\n{\n   TimerOne Timer1;\n   Timer1.isrCallback = &amp;TimerOne::foo;\n\n   // A little complicated syntax.\n   (Timer1.*(Timer1.isrCallback))();\n}\n</code></pre>\n<p>Output:</p>\n<pre><code>In TimerOne::foo();\n</code></pre>\n<p><a href=\"http://cpp.sh/7u4n\" rel=\"nofollow\">(Test this code)</a></p>\n</hr>", "OwnerUserId": "434551", "LastEditorUserId": "4561887", "LastEditDate": "2015-08-07T19:29:17.623", "Id": "31869102", "Score": "1", "CreationDate": "2015-08-07T03:11:20.527", "LastActivityDate": "2015-08-07T19:29:17.623"}, "31869085": {"ParentId": "31869026", "PostTypeId": "2", "CommentCount": "8", "Body": "<p>Things you can do with a function pointer. </p>\n<p>1: <strong>The first is calling the function via explicit dereference:</strong></p>\n<pre><code>int myfunc(int n)\n{\n}\n\nint (*myfptr)(int) = myfunc; \n\n(*myfptr)(nValue); // call function myfunc(nValue) through myfptr.\n</code></pre>\n<p>2: <strong>The second way is via implicit dereference:</strong></p>\n<pre><code>int myfunc(int n)\n{\n}\n\nint (*myfptr)(int) = myfunc;\n\nmyfptr(nValue); // call function myfunc(nValue) through myfptr.\n</code></pre>\n<p>As you can see, the implicit dereference method looks just like a normal function call -- which is what you\u2019d expect, since function are simply implicitly convertible to function pointers!!</p>\n<p>In your code:</p>\n<pre><code>void foo()\n{\n    cout &lt;&lt; \"hi\" &lt;&lt; endl;\n}\n\nclass TimerOne\n{\npublic:\n\n    void(*isrCallback)();\n};\n\n\nint main()\n{\n\n    TimerOne Timer1;\n    Timer1.isrCallback = &amp;foo;   //Assigning the address\n    //Timer1.isrCallback = foo;   //We could use this statement as well, it simply proves function are simply implicitly convertible to function pointers. Just like arrays decay to pointer.\n    Timer1.isrCallback();         //Implicit dereference\n    (*Timer1.isrCallback)();      //Explicit dereference\n        return 0;\n}\n</code></pre>\n", "OwnerUserId": "1307255", "LastEditorUserId": "1307255", "LastEditDate": "2015-08-07T04:00:05.173", "Id": "31869085", "Score": "4", "CreationDate": "2015-08-07T03:09:09.657", "LastActivityDate": "2015-08-07T04:00:05.173"}, "bq_ids": {"n4140": {"so_31869026_31869097_0": {"section_id": 5988, "quality": 0.8888888888888888, "length": 8}}, "n3337": {"so_31869026_31869097_0": {"section_id": 5756, "quality": 0.7777777777777778, "length": 7}}, "n4659": {"so_31869026_31869097_0": {"section_id": 7488, "quality": 0.8888888888888888, "length": 8}}}});