post_cb({"25814897": {"ParentId": "25814733", "CommentCount": "1", "CreationDate": "2014-09-12T18:51:12.713", "OwnerUserId": "2877241", "PostTypeId": "2", "Id": "25814897", "Score": "2", "Body": "<p>According to the C++ Standard</p>\n<blockquote>\n<p id=\"so_25814733_25814897_0\">\u2014 if _RangeT is a class type, the unqualified-ids begin and end are\n  looked up in the scope of class _RangeT as if by class member access\n  lookup (3.4.5), and if either (or both) finds at least one\n  declaration, beginexpr and end-expr are __range.begin() and\n  __range.end(), respectively;</p>\n</blockquote>\n<p>So in your case member functions <code>begin()</code> and <code>end()</code> of class <code>std::map</code> are called.</p>\n<p>I suggested to the C+= Standard Committee to introduce something as</p>\n<pre><code>for ( auto x : reverse Container ) \n</code></pre>\n<p>and till now I do not know the result of my suggesting though as far as I know the Committee is investigating the question.</p>\n<p>As for your case then you can use some wrapper for an original standard container that will define member functions begin and end and will use reverse iterators of the container.</p>\n", "LastActivityDate": "2014-09-12T18:51:12.713"}, "25814858": {"ParentId": "25814733", "PostTypeId": "2", "CommentCount": "3", "CreationDate": "2014-09-12T18:48:05.743", "Score": "1", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:21:40.387", "Id": "25814858", "OwnerUserId": "3959454", "Body": "<p>In short, rule for range-based <code>for</code> is like this: it calls <code>myMap.begin()</code> and <code>myMap.end()</code> if they exist. Otherwise it calls <code>begin(myMap)</code> and <code>end(myMap)</code>. So yes, in case of <code>std::map</code> it uses <code>std::map::iterator</code>.</p>\n<p>If you want to iterate backwards you can write an adaptor yourself or use <a href=\"http://www.boost.org/doc/libs/1_56_0/libs/range/doc/html/range/reference/adaptors/reference/reversed.html\" rel=\"nofollow noreferrer\"><code>boost::adaptors::reverse</code></a>.</p>\n<p>See also this: <a href=\"https://stackoverflow.com/q/8542591/3959454\">C++11 reverse range-based for-loop</a></p>\n<p>Update: here are full rules for range-based <code>for</code> (<code>\u00a76.5.4</code>), for reference:</p>\n<blockquote id=\"so_25814733_25814858_0\">\n<ul>\n<li>if <code>_RangeT</code> is an array type, <code>begin-expr</code> and <code>end-expr</code> are <code>__range</code> and <code>__range + __bound</code>, respectively, where <code>__bound</code> is the array bound. If <code>_RangeT</code> is an array of unknown size or an array of incomplete type, the program is ill-formed;</li>\n<li>if <code>_RangeT</code> is a class type, the unqualified-ids begin and end are looked up in the scope of class <code>_RangeT</code> as if by class member access lookup (3.4.5), and if either (or both) finds at least one declaration, <code>beginexpr</code> and <code>end-expr</code> are <code>__range.begin()</code> and <code>__range.end()</code>, respectively;</li>\n<li>otherwise, <code>begin-expr</code> and <code>end-expr</code> are <code>begin(__range)</code> and <code>end(__range)</code>, respectively, where begin and end are looked up with argument-dependent lookup (3.4.2). For the purposes of this name lookup, namespace std is an associated namespace.</li>\n</ul>\n</blockquote>\n", "LastActivityDate": "2014-09-12T19:56:11.070"}, "25814805": {"ParentId": "25814733", "CommentCount": "0", "CreationDate": "2014-09-12T18:45:38.107", "OwnerUserId": "440558", "PostTypeId": "2", "Id": "25814805", "Score": "0", "Body": "<p>Yes the <a href=\"http://en.cppreference.com/w/cpp/language/range-for\" rel=\"nofollow\">range-based <code>for</code> loop</a> uses forward iteration. If you want to iterate backwards, then you need to do it yourself.</p>\n", "LastActivityDate": "2014-09-12T18:45:38.107"}, "25814733": {"CommentCount": "1", "ViewCount": "130", "CreationDate": "2014-09-12T18:40:21.583", "LastActivityDate": "2014-09-12T19:56:11.070", "Title": "When using the range based for-loop in c++, how do I tell it which iterator to use", "AcceptedAnswerId": "25814897", "PostTypeId": "1", "Id": "25814733", "Score": "0", "Body": "<p>I'm wondering which iterator the range based for loop uses for classes like std::map; I'm assuming by default it uses std::map::iterator instead of say std::map::reverse_iterator. Is this correct, and is there a way that I can tell it to instantiate the iterator that I prefer, or do I just need to use a traditional for loop at that point?</p>\n<p>for ( const auto &amp; keyValue : myMap ) &lt;---- Does this use the std::map::iterator, can I use std::map::reverse_iterator</p>\n", "Tags": "<c++>", "OwnerUserId": "1971872", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_25814733_25814897_0": {"section_id": 3906, "quality": 0.9230769230769231, "length": 24}, "so_25814733_25814858_0": {"section_id": 3906, "quality": 0.7647058823529411, "length": 52}}, "n3337": {"so_25814733_25814897_0": {"section_id": 3766, "quality": 0.9230769230769231, "length": 24}, "so_25814733_25814858_0": {"section_id": 3766, "quality": 0.8823529411764706, "length": 60}}, "n4659": {"so_25814733_25814897_0": {"section_id": 4792, "quality": 0.7692307692307693, "length": 20}, "so_25814733_25814858_0": {"section_id": 4792, "quality": 0.6617647058823529, "length": 45}}}, "25814848": {"ParentId": "25814733", "PostTypeId": "2", "CommentCount": "7", "CreationDate": "2014-09-12T18:47:40.917", "Score": "1", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:12:46.553", "Id": "25814848", "OwnerUserId": "3275595", "Body": "<p>There is a way to reverse iterate as stated in <a href=\"https://stackoverflow.com/questions/8542591/c11-reverse-range-based-for-loop\">this answer</a>, but it uses boost library.</p>\n<p>The <code>for ( const auto &amp; keyValue : myMap )</code> uses a normal <code>std::map::iterator</code> though.</p>\n<p>Another way to reverse iterate would be:</p>\n<pre><code>for (std::map::reverse_iterator iterator mymap.rbegin(); iterator != mymap.rend(); ++iterator)\n</code></pre>\n<p>Which is accepted by c++98 (not only c++11).</p>\n", "LastActivityDate": "2014-09-12T19:28:47.953"}});