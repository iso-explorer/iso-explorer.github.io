post_cb({"25852217": {"CommentCount": "4", "ViewCount": "121", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2014-09-15T16:02:54.617", "LastActivityDate": "2014-09-15T21:39:04.820", "Title": "virtual inheritance in c++ misunderstood", "LastEditDate": "2017-05-23T12:12:46.643", "Id": "25852217", "Score": "1", "Body": "<p>I read that in virtual inheritance, constructors are called \"from the most derived\".\nconsider the following code. In my opinion, the most derived class here is D. then B and C and the \"most-not-derived\" is A.\nSo how come the most \"Base\" constructor is called first and not the \"most derived\"?\nThanks.</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nstruct A\n{\n    A()\n    {\n        cout &lt;&lt; \"A default constructor\" &lt;&lt; endl;\n    }\n};\n\nstruct B : virtual public A\n{\n    B() : A()\n    {\n        cout &lt;&lt; \"B default constructor\" &lt;&lt; endl;\n    }\n};\n\nstruct C : virtual public A\n{\n    C() : A()\n    {\n        cout &lt;&lt; \"C default constructor\" &lt;&lt; endl;\n    }\n};\n\nstruct D : public B, public C\n{\n    D() : B(), C()\n    {\n        cout &lt;&lt; \"D default constructor\" &lt;&lt; endl;\n    }\n};\n\nint main()\n{\n    D d;\n}\n</code></pre>\n<p>This is the output :</p>\n<pre><code>A default constructor\nB default constructor\nC default constructor\nD default constructor\n</code></pre>\n<p>UPDATE:</p>\n<hr>\n<p>Ok. so consider the following code.\nNotice that 10 was printed although D,B and C constructors sent 7.\nHere actually the base class <strong>IS</strong> the first one that is called.\nThere was no chain from D to B to A.\nA() was called first (actually it's default constructor). and only then B and C constructors were called.</p>\n<p>But I read : \"from the most derived.\"\nSource : <a href=\"https://stackoverflow.com/questions/2126522/c-virtual-inheritance/2126536#2126536\">c++ virtual inheritance</a></p>\n<p>the most derived here is D then B and C and only then A. So how come that A is called first without even considering the parameters B,D,C transfer to it from their constructors ?\nThanks.</p>\n<p>The code :</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nstruct A\n{\n    int _x;\n    A()\n    {\n        _x = 10;\n        cout &lt;&lt; \"A default constructor\" &lt;&lt; endl;\n    }\n    A(int x)\n    {\n        _x = x;\n        cout &lt;&lt; \"A NOT-default constructor\" &lt;&lt; endl;\n    }\n};\n\nstruct B : virtual public A\n{\n    B(int x=7) : A(x)\n    {\n        cout &lt;&lt; \"B  constructor\" &lt;&lt; endl;\n    }\n};\n\nstruct C : virtual public A\n{\n    C(int x=7) : A(x)\n    {\n        cout &lt;&lt; \"C  constructor\" &lt;&lt; endl;\n    }\n};\n\nstruct D : public B, public C\n{\n    D(int x=7) : B(x), C(x)\n    {\n        cout &lt;&lt; \"D  constructor\" &lt;&lt; endl;\n    }\n};\n\nint main()\n{\n    D d;\n    cout &lt;&lt; d._x;\n}\n</code></pre>\n<p>The output :</p>\n<pre><code>A default constructor\nB  constructor\nC  constructor\nD  constructor\n10\n</code></pre>\n</hr>", "Tags": "<c++><inheritance><virtual-inheritance>", "OwnerUserId": "2630165", "AnswerCount": "5"}, "25852430": {"ParentId": "25852217", "PostTypeId": "2", "CommentCount": "1", "CreationDate": "2014-09-15T16:15:58.500", "Score": "5", "LastEditorUserId": "3204551", "LastEditDate": "2014-09-15T21:39:04.820", "Id": "25852430", "OwnerUserId": "3204551", "Body": "<p>Construction order is quite simple in C++:</p>\n<ol>\n<li>You call a most-derived ctor (By initializing a variable; <em>auto-storage-class</em>, <code>static</code>, dynamic, whatever).</li>\n<li>That ctor initializes all sub-objects:\n<ul>\n<li>A delegating ctor calls another most-derived-ctor.</li>\n<li>A non-delegating ctor does the work itself:\n<ol>\n<li>Iff the most-derived ctor, <code>virtual</code> bases in left-first declaration-order. (That means arguments to the virtual-base ctor given by non-most-derived-ctors are ignored)</li>\n<li>The other direct bases in left-first declaration-order.</li>\n<li>The members in declaration-order.</li>\n</ol></li>\n</ul></li>\n<li>The ctors body runs.</li>\n</ol>\n<p><strong>As your most-base ctor is for the only virtual base, its body is the first ctor-body to run, called directly by the most-derived ctor.</strong></p>\n<p>In general, calling <code>virtual</code> functions, <code>typeid</code> and <code>dynamic_cast</code> is safe, though not before the base-subobjects are all initialized: <a href=\"https://stackoverflow.com/q/25754796\">May I call a virtual function to initialize a base-class sub-object?</a></p>\n", "LastActivityDate": "2014-09-15T21:39:04.820"}, "25852390": {"ParentId": "25852217", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2014-09-15T16:13:33.837", "Score": "1", "LastEditorUserId": "434551", "LastEditDate": "2014-09-15T16:36:59.067", "Id": "25852390", "OwnerUserId": "434551", "Body": "<p>You said</p>\n<blockquote>\n<p id=\"so_25852217_25852390_0\">I read that in virtual inheritance, constructors are called \"from the most derived\".</p>\n</blockquote>\n<p>That is true. Let me elaborate.</p>\n<p>In your case, <code>D</code> is the most derived. </p>\n<p>When you construct an instance of <code>D</code>, the constructors for <code>A</code> is called from the constructor of <code>D</code> since there is only instance of <code>A</code> for each instance of <code>D</code>. Constructor for <code>A</code> will not be called from the constructor of <code>B</code> or <code>C</code>.</p>\n<p>When you construct an instance of <code>B</code>, then constructor for <code>A</code> is called from the constructor of <code>B</code>. Similarly for an instance of <code>C</code>.</p>\n<p>If you had a sub-type of <code>D</code>,</p>\n<pre><code>struct E : public D\n{\n};\n</code></pre>\n<p>and you create an instance of <code>E</code>, then the constructor of <code>A</code> will be called from the constructor of <code>E</code>.</p>\n<p>The C++ Draft Standard (N3337) says this about initialization involving virtual base classes:</p>\n<blockquote>\n<p id=\"so_25852217_25852390_1\"><strong>12.6.2 Initializing bases and members</strong></p>\n<p id=\"so_25852217_25852390_2\">5 Initialization shall proceed in the following order:</p>\n<p id=\"so_25852217_25852390_3\">\u2014 First, and only for the constructor of the most derived class as described below, virtual base classes shall be initialized in the order they appear on a depth-first left-to-right traversal of the directed acyclic graph of base classes, where \u201cleft-to-right\u201d is the order of appearance of the base class names in the derived class <em>base-specifier-list</em>.</p>\n</blockquote>\n", "LastActivityDate": "2014-09-15T16:36:59.067"}, "25852325": {"ParentId": "25852217", "PostTypeId": "2", "CommentCount": "2", "CreationDate": "2014-09-15T16:09:02.043", "Score": "4", "LastEditorUserId": "204847", "LastEditDate": "2014-09-15T16:45:36.513", "Id": "25852325", "OwnerUserId": "204847", "Body": "<p>That means that it's the responsibility of the most derived class to initialise any virtual base sub-objects, as well as those that it immediately derives from. That is, all the base constructors are called from the most-derived constructor: the constructor for <code>D</code> calls the constructor for <code>A</code>, then <code>B</code> and <code>C</code>, and finally initialises itself. This is necessary to ensure that the shared base object is initialised just once, and before any of the classes that derive from it.</p>\n<p>It doesn't mean that the <em>order</em> is from the most to least derived. As with regular inheritance, base sub-objects are always initialised first, so they're available when initialising the derived classes.</p>\n<p>To answer your updated question, since <code>D</code> initialises <code>A</code>, it will call the default constructor unless its initialiser list contains an entry for <code>A</code>:</p>\n<pre><code>D(int x=7) : B(x), C(x)        // calls A(), initialising with 10\nD(int x=7) : A(x), B(x), C(x)  // calls A(int), initialising with 7\n</code></pre>\n<p>Any entry for <code>A</code> in the initialiser list of <code>B</code> (or <code>C</code>) is only used when <code>B</code> (or <code>C</code>) is the most derived class (and so is responsibly for initialising <code>A</code>).</p>\n", "LastActivityDate": "2014-09-15T16:45:36.513"}, "25852257": {"ParentId": "25852217", "CommentCount": "0", "CreationDate": "2014-09-15T16:05:41.643", "OwnerUserId": "1329652", "PostTypeId": "2", "Id": "25852257", "Score": "1", "Body": "<p>How do you propose any derived class to behave if its constructor code ran <em>before</em> the base class was constructed? While technically possible, it'd be entirely useless.</p>\n<p>The behavior you observe is the only sane one, and has nothing to do with virtual inheritance.</p>\n", "LastActivityDate": "2014-09-15T16:05:41.643"}, "bq_ids": {"n4140": {"so_25852217_25852390_3": {"section_id": 438, "quality": 0.875, "length": 28}}, "n3337": {"so_25852217_25852390_3": {"section_id": 429, "quality": 0.875, "length": 28}}, "n4659": {"so_25852217_25852390_3": {"section_id": 458, "quality": 0.875, "length": 28}, "so_25852217_25852260_0": {"section_id": 7330, "quality": 0.6, "length": 6}}}, "25852260": {"ParentId": "25852217", "PostTypeId": "2", "CommentCount": "6", "CreationDate": "2014-09-15T16:05:44.797", "Score": "0", "LastEditorUserId": "1678053", "LastEditDate": "2014-09-15T16:39:40.627", "Id": "25852260", "OwnerUserId": "1678053", "Body": "<p>That is how objects are built.</p>\n<p>UPDATE  </p>\n<p>Check this example out:</p>\n<pre><code>class A{\n    A()\n    {\n    cout &lt;&lt; \"Constructor A\"&lt;&lt;endl;\n    }\n\n    ~A()\n    {\n    cout &lt;&lt; \"Destructor A\"&lt;&lt;endl;\n    }\n}\n\nclass B : public A{\n    B()\n    {\n    cout &lt;&lt; \"Constructor B\"&lt;&lt;endl;\n    }\n\n    ~B()\n    {\n    cout &lt;&lt; \"Destructor B\"&lt;&lt;endl;\n    }\n}\nclass C : public B{\n    C()\n    {\n    cout &lt;&lt; \"Constructor C\"&lt;&lt;endl;\n    }\n\n    ~C()\n    {\n    cout &lt;&lt; \"Destructor C\"&lt;&lt;endl;\n    }\n}\n</code></pre>\n<p>Creating an object of class <code>C</code>:  </p>\n<pre><code>C obj;\n</code></pre>\n<p>The output will be as follows:</p>\n<p>Constructor A<br>\nConstructor B<br>\nConstructor C<br>\nDestructor C<br>\nDestructor B<br>\nDestructor A  </br></br></br></br></br></p>\n<p>The reason for the execution is this:</p>\n<p>When a class derives from another class, it derives the properties of that class. Functionalities of the derived class <strong>may or may not</strong> depend on the functionalities of the base class, but it can never be the other way. Assuming the derived class depends on the base class functionalities, it is important that the base class is properly initialized before the derived class can be initialized.</p>\n<p>UPDATE:</p>\n<p>When an object of <code>C</code> is made, he control from <code>C</code> constructor is transferred to it's base class' constructor, before <code>C</code>'s constructor can execute. That's what I meant by base class first.</p>\n<p>UPDATE:</p>\n<p>Your question can be best answered by drawing the object relationship.<br>\nWe'll have <code>A</code> right on the top and <code>D</code> at the bottom.</br></p>\n<blockquote>\n<p id=\"so_25852217_25852260_0\">\"in virtual inheritance, [virtual base] constructors are called from the most derived\" [type's constructor]. \"</p>\n</blockquote>\n<p>By the above statement, they're asking you to start from the most derived type's constructor (<code>D</code>) and transverse up to the most base class' (<code>A</code>) constructor.</p>\n<p>UPDATE:</p>\n<p>@leemes has made the execution flow clearer in the comments:</p>\n<blockquote>\n<p id=\"so_25852217_25852260_1\">It is the constructor itself which \"redirects\" to the base's constructor. After this returns, it continues with its own constructor. What you miss is that what is written in curly braces is not the whole implementation. It's only what comes after the call to the base ctor and initializing the member variables. Same with ctor: You write in curly braces what is to be executed before calling the ctor of member variables and then the ctor of the base.</p>\n</blockquote>\n", "LastActivityDate": "2014-09-15T16:39:40.627"}});