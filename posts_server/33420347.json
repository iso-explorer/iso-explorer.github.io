post_cb({"33420347": {"CommentCount": "2", "ViewCount": "98", "PostTypeId": "1", "LastEditorUserId": "1042389", "CreationDate": "2015-10-29T16:58:35.740", "LastActivityDate": "2015-10-31T18:58:18.893", "Title": "What is the purpose of the bullet points in [basic.link]/8 in N4140? They don't seem to bring anything new the statement preceding them", "AcceptedAnswerId": "33455345", "LastEditDate": "2015-10-29T17:54:13.890", "Id": "33420347", "Score": "3", "Body": "<p>[basic.link]/8 in N4140 contains the following statement:  </p>\n<blockquote>\n<p id=\"so_33420347_33420347_0\">A type without linkage shall not be used as the type of a variable or\n  function with external linkage unless<br>\n  (8.7) \u2014 the entity has C\n  language linkage (7.5), or<br>\n  (8.8) \u2014 the entity is declared within an\n  unnamed namespace (7.3.1), or<br>\n  (8.9) \u2014 the entity is not odr-used\n  (3.2) or is defined in the same translation unit.  </br></br></br></p>\n</blockquote>\n<p>Clearly a condition satisfying (8.8) is not possible, as an entity declared in an unnamed namespace cannot have external linkage, at the same time.</p>\n<p>Then I decided to find an example of a function with external linkage returning a type with no linkage, i.e., returning an object of a local class, to no avail, irrespective whether the function was, or wasn't, in the same TU as the type. I'm afraid the set of options satisfying (8.9) may also be empty. If that's the case, I'd like to hear some confirmation on this.</p>\n<p>In reference to (8.7) I don't know what to say, but it seems to me that this bullet point will not add anything new to the problem either.</p>\n", "Tags": "<c++><language-lawyer><c++14><linkage>", "OwnerUserId": "1042389", "AnswerCount": "2"}, "33455345": {"ParentId": "33420347", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>One case is if you have templates.</p>\n<pre><code>template&lt;typename T&gt;\nvoid f(T t) { t(); }\n\nint main() { f([]{}); }\n</code></pre>\n<p>The instantiated function has external linkage, while <code>T</code> is a type without linkage. Strictly speaking, though, the instantiation is not instantiated into a <code>TU</code> (instantiations live in instantiation units, really). But I suspect that text is meant to apply here aswell.</p>\n<p>As does this (I assume you already know, but this of course is a variable)</p>\n<pre><code>struct { } x;\n</code></pre>\n<p>With that in place, you can construct normal functions that satisfy the rule aswell</p>\n<pre><code>decltype(x) f() { return {}; }\n</code></pre>\n", "OwnerUserId": "34509", "LastEditorUserId": "34509", "LastEditDate": "2015-10-31T18:58:18.893", "Id": "33455345", "Score": "0", "CreationDate": "2015-10-31T18:52:06.337", "LastActivityDate": "2015-10-31T18:58:18.893"}, "bq_ids": {"n4140": {"so_33420347_33421449_3": {"section_id": 7141, "quality": 1.0, "length": 7}, "so_33420347_33421449_10": {"section_id": 7141, "quality": 0.7142857142857143, "length": 5}, "so_33420347_33421449_7": {"section_id": 7141, "quality": 0.5333333333333333, "length": 8}, "so_33420347_33421449_5": {"section_id": 7141, "quality": 0.7142857142857143, "length": 5}, "so_33420347_33421449_8": {"section_id": 7141, "quality": 1.0, "length": 7}, "so_33420347_33420347_0": {"section_id": 7141, "quality": 0.9545454545454546, "length": 21}}, "n3337": {"so_33420347_33421449_3": {"section_id": 6885, "quality": 1.0, "length": 7}, "so_33420347_33421449_10": {"section_id": 6885, "quality": 0.7142857142857143, "length": 5}, "so_33420347_33421449_7": {"section_id": 6885, "quality": 0.5333333333333333, "length": 8}, "so_33420347_33421449_5": {"section_id": 6885, "quality": 0.7142857142857143, "length": 5}, "so_33420347_33421449_8": {"section_id": 6885, "quality": 1.0, "length": 7}, "so_33420347_33420347_0": {"section_id": 6885, "quality": 0.9545454545454546, "length": 21}}, "n4659": {"so_33420347_33421449_3": {"section_id": 8642, "quality": 1.0, "length": 7}, "so_33420347_33421449_10": {"section_id": 8642, "quality": 0.7142857142857143, "length": 5}, "so_33420347_33421449_7": {"section_id": 8642, "quality": 0.5333333333333333, "length": 8}, "so_33420347_33421449_5": {"section_id": 8642, "quality": 0.7142857142857143, "length": 5}, "so_33420347_33421449_8": {"section_id": 8642, "quality": 1.0, "length": 7}, "so_33420347_33420347_0": {"section_id": 8642, "quality": 0.9545454545454546, "length": 21}}}, "33421449": {"ParentId": "33420347", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>So it looks like <code>8.8</code> is a defect it is covered by <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_active.html#2058\" rel=\"nofollow\">defect report 2058: More errors from internal-linkage namespaces</a>:</p>\n<blockquote>\n<p id=\"so_33420347_33421449_0\">Issue 1603 dealt with omissions in the application of the change to give unnamed namespaces internal linkage, but its resolution overlooked a couple of items.</p>\n<p id=\"so_33420347_33421449_1\">[...]</p>\n<p id=\"so_33420347_33421449_2\">Also, 3.5 [basic.link] paragraph 8 says,</p>\n<blockquote>\n<p id=\"so_33420347_33421449_8\">A type without linkage shall not be used as the type of a variable\n    or function with external linkage unless</p>\n<p id=\"so_33420347_33421449_9\">...</p>\n<p id=\"so_33420347_33421449_10\">the entity is declared within an unnamed namespace (7.3.1\n    [namespace.def]), or</p>\n<p id=\"so_33420347_33421449_11\">...</p>\n</blockquote>\n<p id=\"so_33420347_33421449_7\">This bullet cannot occur, since a function or variable declared within an unnamed namespace cannot have external linkage.</p>\n</blockquote>\n<p>And <code>8.9</code> was added by <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3331.html#757\" rel=\"nofollow\">defect report 757</a> which includes a rationale.</p>\n", "OwnerUserId": "1708801", "LastEditorUserId": "1708801", "LastEditDate": "2015-10-29T18:11:52.260", "Id": "33421449", "Score": "1", "CreationDate": "2015-10-29T17:59:30.480", "LastActivityDate": "2015-10-29T18:11:52.260"}});