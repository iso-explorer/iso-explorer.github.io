post_cb({"bq_ids": {"n4140": {"so_24020788_24021170_0": {"length": 16, "quality": 0.8421052631578947, "section_id": 5989}}, "n3337": {"so_24020788_24021170_0": {"length": 16, "quality": 0.8421052631578947, "section_id": 5757}}, "n4659": {"so_24020788_24021170_0": {"length": 16, "quality": 0.8421052631578947, "section_id": 7489}}}, "24021500": {"Id": "24021500", "PostTypeId": "2", "Body": "<p><a href=\"https://www.khronos.org/opengles/sdk/docs/man3/html/glGenVertexArrays.xhtml\" rel=\"nofollow\">https://www.khronos.org/opengles/sdk/docs/man3/html/glGenVertexArrays.xhtml</a></p>\n<p>The previous answer is also correct but doesn't really gives a solution. Nor mine actually. It's just that <code>glGenVertexArrays</code> is not supported by OpenGLES 2.</p>\n<p>Solution : Use OpenGL ES 3.</p>\n", "LastActivityDate": "2014-06-03T17:34:21.837", "CommentCount": "8", "CreationDate": "2014-06-03T17:34:21.837", "ParentId": "24020788", "Score": "4", "OwnerUserId": "2963738"}, "24021170": {"Id": "24021170", "PostTypeId": "2", "Body": "<p>Looking a the <a href=\"http://www.khronos.org/registry/gles/api/GLES2/gl2.h\" rel=\"nofollow\"><code>gl2.h</code> header</a>, it seems that the aformentioned function is not defined there. C++ has stricter rules with regard to function declaration and definition. In C, you may perfectly use a function which asn't been declared before hand, and the compiler will assume a certain prototype. In C++, any function must be at least declared before any use.</p>\n<p>The section <em>5.2.2 - Function Call</em> of the C++ specification, sub paragraph 2 indicates that:</p>\n<blockquote>\n<p id=\"so_24020788_24021170_0\">Note: If a function or member function name is used, and name lookup (3.4) does not find a declaration of\n  that name, the program is ill-formed. No function is implicitly declared by such a call. \u2014 end note</p>\n</blockquote>\n<p>That is where the difference lies with C. This may however indicate a deeper problem: either you are using the wrong header, and linking with an OpenGL implementation which support that function, or somehow, the header should contain that declaration and does not. My first guess would be that you should probably double check which OpenGL implementation you are effectively linking against, and whether the header you are using is the correct one. </p>\n<p>However, it is also possible that this OpenGL standard keeps an definition of that function as an extension, or that the function is visible by the linker because the driver supports a higher standard or extension. Relying on that feature is of course not recommended without first checking that the corresponding extension is actually supported by the driver.</p>\n", "LastEditorUserId": "1769720", "LastActivityDate": "2014-06-03T17:36:03.760", "Score": "2", "CreationDate": "2014-06-03T17:15:36.227", "ParentId": "24020788", "CommentCount": "0", "OwnerUserId": "1769720", "LastEditDate": "2014-06-03T17:36:03.760"}, "24020788": {"ViewCount": "1713", "Body": "<p>Consider the following file:</p>\n<pre><code>#include &lt;SDL.h&gt;\n#include &lt;GLES2/gl2.h&gt;\n\nint main() {\n    SDL_Init(SDL_INIT_VIDEO);\n    SDL_Window *window = SDL_CreateWindow(\"Test\", 0, 0, 200, 200, SDL_WINDOW_OPENGL | SDL_WINDOW_SHOWN);\n    SDL_GLContext context = SDL_GL_CreateContext(window);\n    GLuint vao;\n    glGenVertexArrays(1, &amp;vao);\n}\n</code></pre>\n<p>If the above is test.c, then the following line (compiling as C code) works perfectly:</p>\n<pre><code>gcc test.c -I/usr/include/SDL2 -lGLESv2 -lSDL2\n</code></pre>\n<p>This next one (compiling as C++ code), however, does not:</p>\n<pre><code>gcc -x c++ test.c -I/usr/include/SDL2 -lGLESv2 -lSDL2\n</code></pre>\n<p>The error that I get is:</p>\n<pre><code>test.c: In function \u2018int main()\u2019:\ntest.c:9:27: error: \u2018glGenVertexArrays\u2019 was not declared in this scope\n  glGenVertexArrays(1, &amp;vao);\n</code></pre>\n<p>I am compiling this on x86 Linux with gcc 4.8.2, using SDL 2.0 and OpenGL ES 2.0.</p>\n<p>What is going on?  Many of the other OpenGL ES 2.0 calls that I make (glDrawArrays, glGenBuffers, etc.) work perfectly well with both C and C++.  Additionally, isn't C++ supposed to be able to call C libraries, especially system ones that (should) be designed to prevent function name mangling?</p>\n<p>What is wrong, and how can I fix this?</p>\n", "AcceptedAnswerId": "24021500", "Title": "Why is glGenVertexArrays defined for a C program but not a C++ program on Linux?", "CreationDate": "2014-06-03T16:55:06.070", "Id": "24020788", "CommentCount": "5", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2014-06-03T17:36:03.760", "Score": "2", "OwnerUserId": "1103747", "Tags": "<c++><c><linux><opengl><opengl-es-2.0>", "AnswerCount": "2"}});