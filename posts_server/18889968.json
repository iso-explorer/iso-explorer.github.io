post_cb({"18889968": {"CommentCount": "7", "ViewCount": "245", "CreationDate": "2013-09-19T08:40:59.487", "LastActivityDate": "2013-09-19T08:40:59.487", "Title": "Boolean lambdas?", "AcceptedAnswerId": "18889969", "PostTypeId": "1", "Id": "18889968", "Score": "2", "Body": "<p>How come this code compiles???</p>\n<p><a href=\"http://coliru.stacked-crooked.com/a/a2124fca96368051\" rel=\"nofollow\"><strong>LIVE CODE</strong></a></p>\n<pre><code>#include &lt;iostream&gt;\n\n\nint main() {\n    auto lambda1 = []{};\n    auto lambda2 = []{};\n\n    if(lambda1 &amp;&amp; lambda2) {\n        std::cout &lt;&lt; \"BOOLEAN LAMBDAS!!!\" &lt;&lt; std::endl;\n    }\n\n    if(lambda1 || lambda2) {\n        std::cout &lt;&lt; \"BOOLEAN LAMBDAS AGAIN FTW!!!\" &lt;&lt; std::endl;\n    }\n\n    bool b1 = lambda1;\n    bool b2 = lambda2;\n\n    std::cout &lt;&lt; b1 &lt;&lt; \", \" &lt;&lt; b2 &lt;&lt; std::endl;\n}\n</code></pre>\n<p>Boolean lambdas! (Or boolambdas, if you will... *shies away*)</p>\n<p>How come this works? Is this another GCC bug? If not, is this standard?</p>\n", "Tags": "<c++><c++11><lambda>", "OwnerUserId": "1619294", "AnswerCount": "1"}, "18889969": {"ParentId": "18889968", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>It turns out that it is standard!</p>\n<p>If you refer to <a href=\"https://stackoverflow.com/a/18889029/1619294\">this answer</a><sup>[1]</sup>, <strong>non-capturing</strong> lambdas are convertible to function pointers. And it turns out again that function pointers, being pointers themselves, are implicitly convertible to <code>bool</code>!</p>\n<blockquote>\n<h3>4.12 Boolean conversions [conv.bool]</h3>\n<p id=\"so_18889968_18889969_0\"><sup>1</sup> A prvalue of arithmetic, unscoped enumeration, pointer, or pointer to member type can be converted to a\n  prvalue of type bool. A zero value, null pointer value, or null member pointer value is converted to false;\n  any other value is converted to true. A prvalue of type std::nullptr_t can be converted to a prvalue of\n  type bool; the resulting value is false.</p>\n</blockquote>\n<p>To give a supporting proof that the conversion to function pointer is what makes all of this happen, I've tried doing the same thing with capturing lambdas. Then \"can't convert to <code>bool</code>\" errors are generated.</p>\n<p><a href=\"http://coliru.stacked-crooked.com/a/8d7ae912d917c57f\" rel=\"nofollow noreferrer\"><strong>LIVE CODE</strong></a></p>\n<pre><code>int main() {\n    int i;\n    auto lambda = [i]{};\n\n    bool b = lambda;\n\n    if(lambda) {}\n}\n</code></pre>\n<hr>\n<p><sup>[1]</sup> <sub>Which, honestly, gave me the idea to write this.</sub></p>\n</hr>", "OwnerUserId": "1619294", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:29:54.867", "Id": "18889969", "Score": "7", "CreationDate": "2013-09-19T08:40:59.487", "LastActivityDate": "2013-09-19T08:40:59.487"}, "bq_ids": {"n4140": {"so_18889968_18889969_0": {"section_id": 44, "quality": 1.0, "length": 39}}, "n3337": {"so_18889968_18889969_0": {"section_id": 41, "quality": 1.0, "length": 39}}, "n4659": {"so_18889968_18889969_0": {"section_id": 45, "quality": 1.0, "length": 39}}}});