post_cb({"40655160": {"ViewCount": "1080", "Body": "<p>In C structs, it is possible to specify another bit length than the default bit length of the type like this:</p>\n<pre><code>struct MyStruct{\n    int myVar : 1;    //Size of myVar is 1 bit (so it can take values 0 or 1\n    int myOtherVar: 4;    //Size of myOtherVar is 4 bits (so it can take values 0 to 15)\n}\n</code></pre>\n<p>This is called bit fields.</p>\n<p>My question is if it is also possible to do this in C++ classes, like this:</p>\n<pre><code>class MyClass{\n    public:\n        //Some methods\n    private:\n        int m_myAttribute : 1;\n        int m_myOtherAttribute : 4;\n}\n</code></pre>\n<p>I searched the web for this but all the examples I found of bit fields used structs, not classes.</p>\n<p>I tested this code and it compiled just fine, but I would like to know if the size of the attributes are really the specified size or if the compiler just ignored the bit fields and used the standard <code>int</code> size.</p>\n", "AcceptedAnswerId": "40655299", "Title": "Can bit fields be used in C++ classes?", "CreationDate": "2016-11-17T12:40:46.183", "Id": "40655160", "CommentCount": "4", "LastEditDate": "2016-11-17T13:08:36.417", "PostTypeId": "1", "LastEditorUserId": "4284627", "LastActivityDate": "2017-10-05T17:16:45.943", "Score": "5", "OwnerUserId": "4284627", "Tags": "<c++><class><bit-fields>", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_40655160_40655299_0": {"length": 60, "quality": 0.8955223880597015, "section_id": 5921}}, "n3337": {"so_40655160_40655299_0": {"length": 60, "quality": 0.8955223880597015, "section_id": 5693}}, "n4659": {"so_40655160_40655299_0": {"length": 60, "quality": 0.8955223880597015, "section_id": 7395}}}, "40655523": {"Id": "40655523", "PostTypeId": "2", "Body": "<p>It is perfectly legal in C++ to use bit-fields with classes or structs. I also recommend this question to dive further into the similarities and differences of the two: <a href=\"https://stackoverflow.com/q/92859/1938163\">What are the differences between struct and class in C++?</a></p>\n<p>And yes the bit-size is really taken into account, just remember that the size of the memory layout is implementation-dependent</p>\n<pre><code>class test {\n  int a : 3;\n  void fun() {\n      // std::cout &lt;&lt; sizeof(a); // Illegal (*)\n      a = 5; // Warning! Implicit truncation from int to 3-bit bitfield yields -3 (2's complement)\n  }\n};\n\nint main() {\n  std::cout &lt;&lt; sizeof(test); // ABI-dependent, might be 4 bytes\n}\n</code></pre>\n<p>(*) Let me also address your comment regarding the use of <code>sizeof</code> and bit-fields: it is <strong>not</strong> allowed to use <code>sizeof</code> on a <em>glvalue</em> designating a bit-field as in <code>[expr.sizeof]/p1</code></p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2016-11-17T13:21:03.860", "Score": "2", "CreationDate": "2016-11-17T12:56:14.807", "ParentId": "40655160", "CommentCount": "0", "OwnerUserId": "1938163", "LastEditDate": "2017-05-23T12:00:14.453"}, "40655299": {"Id": "40655299", "PostTypeId": "2", "Body": "<p>Yes a <code>class</code> can have bit-field members.  In C++ there is no difference between a <code>class</code> and a <code>struct</code> except for the default access level and the default inheritance type.  They are both called class types.  If you can do something in a <code>struct</code> then you can do that same thing in a <code>class</code>.  Since the default access levels are different they will look a little different but you get the same thing.  For instance</p>\n<pre><code>struct foo\n{\n    int m_myAttribute : 1;\n    int m_myOtherAttribute : 4;\n    int m_myOtherOtherAttribute : 27;\n};\n</code></pre>\n<p>is the same as</p>\n<pre><code>class bar\n{\npublic:\n    int m_myAttribute : 1;\n    int m_myOtherAttribute : 4;\n    int m_myOtherOtherAttribute : 27;\n};\n</code></pre>\n<p>Do note though that we had to use <code>public:</code> in the class since by default the members are private.</p>\n<p>Now about the size of the bit fields in C++.  [class.bit]/1 has all of the information you need on that:</p>\n<blockquote>\n<p id=\"so_40655160_40655299_0\">The constant-expression shall be an integral constant expression with a value greater than or equal to zero. <strong>The value of the integral constant expression may be larger than the number of bits in the object representation (3.9) of the bit-field\u2019s type; in such cases the extra bits are used as padding bits and do not participate in the value representation (3.9) of the bit-field.</strong> Allocation of bit-fields within a class object is implementation-defined. Alignment of bit-fields is implementation-defined. Bit-fields are packed into some addressable allocation unit. [ Note: Bit-fields straddle allocation units on some machines and not on others. Bit-fields are assigned right-to-left on some machines, left-to-right on others. \u2014end note ]</p>\n</blockquote>\n<p><sup>emphasis mine</sup></p>\n<p>From this we get that the size of the bit-feild will be at least the size of the underlying data type but if you over allocate space then that extra space is turned into padding and is not used for the value of the bit-field member. </p>\n", "LastEditorUserId": "4342498", "LastActivityDate": "2017-10-05T17:16:45.943", "Score": "8", "CreationDate": "2016-11-17T12:46:48.843", "ParentId": "40655160", "CommentCount": "4", "OwnerUserId": "4342498", "LastEditDate": "2017-10-05T17:16:45.943"}, "40655483": {"Id": "40655483", "PostTypeId": "2", "Body": "<p>As a matter of quality of implementation (QoI), yes the size of the members are really the specified size with all the compilers I know of.</p>\n<p>If you are asking if the sizes MUST match (according to the standard), you have to ask yourself how you would tell? (In a standard conforming way.)  If you can't (and I don't think you can), then under the as-if rule, the compiler can do what it likes.</p>\n<p>For more details, see section 9.6 of the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4296.pdf\" rel=\"nofollow noreferrer\">C++14 standard</a> (actually n4296.)</p>\n", "LastActivityDate": "2016-11-17T12:54:09.757", "CommentCount": "0", "CreationDate": "2016-11-17T12:54:09.757", "ParentId": "40655160", "Score": "0", "OwnerUserId": "771073"}});