post_cb({"bq_ids": {"n4140": {"so_11314580_11314580_0": {"length": 34, "quality": 0.8717948717948718, "section_id": 5543}}, "n3337": {"so_11314580_11314580_0": {"length": 34, "quality": 0.8717948717948718, "section_id": 5329}}, "n4659": {"so_11314580_11314580_0": {"length": 34, "quality": 0.8717948717948718, "section_id": 6976}}}, "11314580": {"ViewCount": "566", "Body": "<p>In <strong>[dcl.attr.depend]/1</strong>, I read:</p>\n<blockquote>\n<p id=\"so_11314580_11314580_0\">The attribute[...] <code>carries_dependency</code> [...] may be applied to the <code>declarator-id</code> of a <code>parameter-declaration</code> in a function declaration or lambda,\n  in which case it speci\ufb01es that the initialization of the parameter carries a dependency to (1.10) each lvalue-to-rvalue conversion (4.1) of that object. The attribute may also be applied to the <code>declarator-id</code> of a function\n  declaration, in which case it specifies that the return value, if any, carries a dependency to the evaluation of the function call expression.</p>\n</blockquote>\n<p>What I'm missing is a way to apply the attribute to the implicit <code>this</code> parameter.</p>\n<p>By way of example, consider this free function:</p>\n<pre><code>void fun(int i, Foo * [[carries_dependency]] f);\n</code></pre>\n<p>and it's equivalent (but for the attribute) member version:</p>\n<pre><code>void Foo::fun(int i); // can't add [[carries_dependency]] here?\n</code></pre>\n", "Title": "In C++11, how do I specify that the implicit \"this\" parameter \"[[carries_dependency]]\"?", "CreationDate": "2012-07-03T15:47:16.343", "LastActivityDate": "2012-07-10T15:32:46.527", "CommentCount": "4", "FavoriteCount": "4", "PostTypeId": "1", "LastEditDate": "2012-07-05T03:28:21.123", "LastEditorUserId": "1090079", "Id": "11314580", "Score": "21", "OwnerUserId": "134841", "Tags": "<c++><c++11><member-functions><carries-dependency>", "AnswerCount": "1"}, "11416815": {"Id": "11416815", "PostTypeId": "2", "Body": "<p>I'm not certain and don't have a compiler with support for this to test, but here's a swing at a possibility: I think the grammar [gram.decl] indicates that you should be able put it (\"attribute-specifier_opt\") in the same spot you'd put \"const\" to indicate a constant this pointer (\"cv-qualifier-seq_opt\"), which would make sense:</p>\n<pre><code>parameters-and-qualifiers:\n    ( parameter-declaration-clause ) attribute-specifier_opt cv-qualifier-seq_opt\n        ref-qualifier_opt exception-specification_opt\n</code></pre>\n<p>E.g.</p>\n<pre><code>struct X{\n    void f(int i) [[carries_dependency]];\n};\n</code></pre>\n", "LastActivityDate": "2012-07-10T15:32:46.527", "CommentCount": "1", "CreationDate": "2012-07-10T15:32:46.527", "ParentId": "11314580", "Score": "3", "OwnerUserId": "101225"}});