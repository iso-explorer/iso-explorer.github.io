post_cb({"bq_ids": {"n4140": {"so_46596400_46596400_0": {"length": 4, "quality": 0.6666666666666666, "section_id": 300}}, "n3337": {"so_46596400_46596400_0": {"length": 4, "quality": 0.6666666666666666, "section_id": 291}}, "n4659": {"so_46596400_46596400_0": {"length": 4, "quality": 0.6666666666666666, "section_id": 307}}}, "46596400": {"ViewCount": "10", "Body": "<p>In short version of what i need my code looks like this</p>\n<pre><code>#include &lt;vector&gt;\n\ntemplate&lt;typename T&gt;\nclass Abstract {\npublic:\n    virtual void foo() = 0;\n};\n\ntemplate&lt;typename T&gt;\nclass Collection {\npublic:\n    std::vector&lt;Abstract&lt;T&gt;&gt; items;\n};\n\nclass Some {};\n\nclass Implementor : public Abstract&lt;Some&gt; {\npublic:\n    void foo() {\n        //...\n    }\n};\n\nint main() {\n    Collection&lt;Some&gt; *collection = new Collection&lt;Some&gt;;\n    Implementor *implementor = new Implementor;\n    collection-&gt;items.push_back(*implementor);\n    return 0;\n}\n</code></pre>\n<p>The verdict of a compiler is </p>\n<blockquote>\n<p id=\"so_46596400_46596400_0\">invalid new-expression of abstract class type 'Abstract'</p>\n</blockquote>\n<p>Full text of error:</p>\n<pre><code>In file included from c:\\mingw\\lib\\gcc\\mingw32\\6.3.0\\include\\c++\\mingw32\\bits\\c++allocator.h:33:0,\n                 from c:\\mingw\\lib\\gcc\\mingw32\\6.3.0\\include\\c++\\bits\\allocator.h:46,\n                 from c:\\mingw\\lib\\gcc\\mingw32\\6.3.0\\include\\c++\\vector:61,\n                 from D:\\CLionProjects\\test1\\main.cpp:1:\nc:\\mingw\\lib\\gcc\\mingw32\\6.3.0\\include\\c++\\ext\\new_allocator.h: In instantiation of 'void __gnu_cxx::new_allocator&lt;_Tp&gt;::construct(_Up*, _Args&amp;&amp; ...) [with _Up = Abstract&lt;Some&gt;; _Args = {const Abstract&lt;Some&gt;&amp;}; _Tp = Abstract&lt;Some&gt;]':\nc:\\mingw\\lib\\gcc\\mingw32\\6.3.0\\include\\c++\\bits\\alloc_traits.h:455:4:   required from 'static void std::allocator_traits&lt;std::allocator&lt;_Tp1&gt; &gt;::construct(std::allocator_traits&lt;std::allocator&lt;_Tp1&gt; &gt;::allocator_type&amp;, _Up*, _Args&amp;&amp; ...) [with _Up = Abstract&lt;Some&gt;; _Args = {const Abstract&lt;Some&gt;&amp;}; _Tp = Abstract&lt;Some&gt;; std::allocator_traits&lt;std::allocator&lt;_Tp1&gt; &gt;::allocator_type = std::allocator&lt;Abstract&lt;Some&gt; &gt;]'\nc:\\mingw\\lib\\gcc\\mingw32\\6.3.0\\include\\c++\\bits\\stl_vector.h:918:30:   required from 'void std::vector&lt;_Tp, _Alloc&gt;::push_back(const value_type&amp;) [with _Tp = Abstract&lt;Some&gt;; _Alloc = std::allocator&lt;Abstract&lt;Some&gt; &gt;; std::vector&lt;_Tp, _Alloc&gt;::value_type = Abstract&lt;Some&gt;]'\nD:\\CLionProjects\\test1\\main.cpp:27:45:   required from here\nc:\\mingw\\lib\\gcc\\mingw32\\6.3.0\\include\\c++\\ext\\new_allocator.h:120:4: error: invalid new-expression of abstract class type 'Abstract&lt;Some&gt;'\n  { ::new((void *)__p) _Up(std::forward&lt;_Args&gt;(__args)...); }\n    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nD:\\CLionProjects\\test1\\main.cpp:4:7: note:   because the following virtual functions are pure within 'Abstract&lt;Some&gt;':\n class Abstract {\n       ^~~~~~~~\nD:\\CLionProjects\\test1\\main.cpp:6:18: note:     void Abstract&lt;T&gt;::foo() [with T = Some]\n     virtual void foo() = 0;\n                  ^~~\n</code></pre>\n<p>How can i explicitly specify the type of vector?</p>\n", "Title": "error: invalid new-expression of abstract class type in vector allocator", "CreationDate": "2017-10-05T23:57:21.940", "LastActivityDate": "2017-10-05T23:57:21.940", "CommentCount": "1", "PostTypeId": "1", "ClosedDate": "2017-10-05T23:59:53.470", "Id": "46596400", "Score": "1", "OwnerUserId": "5427983", "Tags": "<c++><abstract-class><stdvector><allocator>", "AnswerCount": "0"}});