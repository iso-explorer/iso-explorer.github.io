post_cb({"34857406": {"ParentId": "34856965", "PostTypeId": "2", "CommentCount": "2", "CreationDate": "2016-01-18T14:42:54.720", "Score": "3", "LastEditorUserId": "2079303", "LastEditDate": "2016-01-18T15:04:55.623", "Id": "34857406", "OwnerUserId": "2079303", "Body": "<p>C++ standard (1998)</p>\n<p>[dcl.fct.def]</p>\n<blockquote>\n<p id=\"so_34856965_34857406_0\">7 An object whose initializer is an empty set of parentheses, i.e., (), shall be default-initialized.</p>\n</blockquote>\n<p>[dcl.init]</p>\n<blockquote>\n<p id=\"so_34856965_34857406_1\">5 To zero-initialize storage for an object of type T means:</p>\n<p id=\"so_34856965_34857406_2\">\u2014 if T is a scalar type (3.9), the storage is set to the value of 0 (zero) converted to T;</p>\n<p id=\"so_34856965_34857406_3\">\u2014 if T is a non-union class type, the storage for each nonstatic data member and each base-class subobject is zero-initialized;</p>\n<p id=\"so_34856965_34857406_4\">\u2014 if T is a union type, the storage for its first data member 89) is zero-initialized;</p>\n<p id=\"so_34856965_34857406_5\">\u2014 if T is an array type, the storage for each element is zero-initialized;</p>\n<p id=\"so_34856965_34857406_6\">\u2014 if T is a reference type, no initialization is performed.</p>\n<p id=\"so_34856965_34857406_7\">To default-initialize an object of type T means:</p>\n<p id=\"so_34856965_34857406_8\">\u2014 if T is a non-POD class type (clause 9), the default constructor for T is called (and the initialization is ill-formed if T has no accessible default constructor);</p>\n<p id=\"so_34856965_34857406_9\">\u2014 if T is an array type, each element is default-initialized;</p>\n<p id=\"so_34856965_34857406_10\">\u2014 <strong>otherwise, the storage for the object is zero-initialized.</strong></p>\n</blockquote>\n<p>It appears that the temporary is default initialized, which means zero initialization for a POD type (which <code>Test</code> is) and therefore <code>t.a == 0</code> is guaranteed.</p>\n<p>Since C++03 this is value initialization and same guarantee remains.</p>\n<p>It appears that the addition of value initialization and re-definition of default initialization in C++03, was to allow not zero-initializing scalars and POD types (in some contexts).</p>\n", "LastActivityDate": "2016-01-18T15:04:55.623"}, "34856965": {"CommentCount": "1", "ViewCount": "118", "CreationDate": "2016-01-18T14:21:01.133", "LastActivityDate": "2016-01-18T15:04:55.623", "Title": "Test t=Test(); what happens in C++98?", "AcceptedAnswerId": "34857406", "PostTypeId": "1", "Id": "34856965", "Score": "0", "Body": "<p>Consider following program:</p>\n<pre><code>#include &lt;iostream&gt;\nstruct Test\n{\n    int a;\n};\nint main()\n{\n    Test t=Test();\n    std::cout&lt;&lt;t.a&lt;&lt;'\\n';\n}\n</code></pre>\n<p><strong><code>Test t=Test();</code></strong> value initializes a temporary &amp; copy initializes it. (most compilers optimize out the copy operation (Source: <a href=\"http://en.cppreference.com/w/cpp/language/value_initialization\" rel=\"nofollow\"><strong>value initialization</strong></a>)). But value initialization is introduced by <code>C++03</code>. What happens in <code>C++98</code> when <strong><code>Test t=Test();</code></strong> is executed? Is it guaranteed that I will get 0 as an output (value of <code>t.a</code> in this case) on any <code>C++98</code> compiler? . Is it default initialization being performed in <code>C++98</code>?</p>\n", "Tags": "<c++><object><initialization><c++03><c++98>", "OwnerUserId": "3777958", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_34856965_34857406_1": {"section_id": 3285, "quality": 0.8, "length": 4}, "so_34856965_34857406_3": {"section_id": 3285, "quality": 0.9166666666666666, "length": 11}, "so_34856965_34857406_6": {"section_id": 3285, "quality": 1.0, "length": 4}, "so_34856965_34857406_8": {"section_id": 3286, "quality": 0.75, "length": 9}, "so_34856965_34857406_9": {"section_id": 3286, "quality": 1.0, "length": 5}, "so_34856965_34857406_5": {"section_id": 744, "quality": 0.6666666666666666, "length": 4}, "so_34856965_34857406_2": {"section_id": 38, "quality": 0.5714285714285714, "length": 4}, "so_34856965_34857406_7": {"section_id": 3286, "quality": 1.0, "length": 4}, "so_34856965_34857406_4": {"section_id": 3285, "quality": 0.75, "length": 6}, "so_34856965_34857406_0": {"section_id": 3290, "quality": 0.8571428571428571, "length": 6}}, "n3337": {"so_34856965_34857406_1": {"section_id": 3155, "quality": 0.8, "length": 4}, "so_34856965_34857406_3": {"section_id": 3155, "quality": 0.9166666666666666, "length": 11}, "so_34856965_34857406_8": {"section_id": 3156, "quality": 0.8333333333333334, "length": 10}, "so_34856965_34857406_6": {"section_id": 3155, "quality": 1.0, "length": 4}, "so_34856965_34857406_5": {"section_id": 3155, "quality": 0.6666666666666666, "length": 4}, "so_34856965_34857406_2": {"section_id": 3155, "quality": 0.8571428571428571, "length": 6}, "so_34856965_34857406_7": {"section_id": 3156, "quality": 1.0, "length": 4}, "so_34856965_34857406_4": {"section_id": 3155, "quality": 0.75, "length": 6}, "so_34856965_34857406_9": {"section_id": 3156, "quality": 1.0, "length": 5}, "so_34856965_34857406_0": {"section_id": 3160, "quality": 0.8571428571428571, "length": 6}}, "n4659": {"so_34856965_34857406_3": {"section_id": 4047, "quality": 0.8333333333333334, "length": 10}, "so_34856965_34857406_8": {"section_id": 384, "quality": 0.5833333333333334, "length": 7}, "so_34856965_34857406_6": {"section_id": 4047, "quality": 1.0, "length": 4}, "so_34856965_34857406_5": {"section_id": 802, "quality": 0.6666666666666666, "length": 4}, "so_34856965_34857406_2": {"section_id": 38, "quality": 0.5714285714285714, "length": 4}, "so_34856965_34857406_9": {"section_id": 4048, "quality": 1.0, "length": 5}, "so_34856965_34857406_4": {"section_id": 4047, "quality": 0.75, "length": 6}, "so_34856965_34857406_0": {"section_id": 4052, "quality": 0.8571428571428571, "length": 6}}}});