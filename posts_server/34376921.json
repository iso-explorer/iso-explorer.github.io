post_cb({"bq_ids": {"n4140": {"so_34376921_34377119_2": {"length": 13, "quality": 0.7647058823529411, "section_id": 5533}, "so_34376921_34377119_0": {"length": 5, "quality": 1.0, "section_id": 5533}, "so_34376921_34377119_1": {"length": 4, "quality": 1.0, "section_id": 5464}, "so_34376921_34377119_3": {"length": 28, "quality": 0.9655172413793104, "section_id": 7243}, "so_34376921_34377119_4": {"length": 36, "quality": 0.9473684210526315, "section_id": 7242}}, "n3337": {"so_34376921_34377119_2": {"length": 13, "quality": 0.7647058823529411, "section_id": 5319}, "so_34376921_34377119_0": {"length": 4, "quality": 0.8, "section_id": 5319}, "so_34376921_34377119_1": {"length": 4, "quality": 1.0, "section_id": 3101}, "so_34376921_34377119_3": {"length": 28, "quality": 0.9655172413793104, "section_id": 6987}, "so_34376921_34377119_4": {"length": 36, "quality": 0.9473684210526315, "section_id": 6986}}, "n4659": {"so_34376921_34377119_2": {"length": 16, "quality": 0.9411764705882353, "section_id": 6969}, "so_34376921_34377119_0": {"length": 5, "quality": 1.0, "section_id": 6969}, "so_34376921_34377119_1": {"length": 4, "quality": 1.0, "section_id": 6898}, "so_34376921_34377119_3": {"length": 28, "quality": 0.9655172413793104, "section_id": 8752}, "so_34376921_34377119_4": {"length": 31, "quality": 0.8157894736842105, "section_id": 8751}}}, "34377119": {"Id": "34377119", "PostTypeId": "2", "Body": "<p>It looks like a bug in GCC because it should work by standard. From the standard draft n4567</p>\n<blockquote>\n<p id=\"so_34376921_34377119_0\">When the alignment-specifier is of the form alignas( <strong><em>constant-expression</em></strong> ):</p>\n<p id=\"so_34376921_34377119_1\">(2.1) \u2014 the <strong><em>constant-expression</em></strong> shall be an integral constant expression</p>\n<p id=\"so_34376921_34377119_2\">(2.2) \u2014 if the constant expression does not evaluate to an alignment value (3.11), or evaluates to an extended\n  alignment and the implementation does not support that alignment in the context of the declaration,\n  the program is ill-formed.</p>\n</blockquote>\n<p>In your case you are supplying an integral constant expression.This could fail only if when evaluated the constant expression does not satisfy this</p>\n<blockquote>\n<p id=\"so_34376921_34377119_3\">Alignments are represented as values of the type std::size_t. Valid alignments include only those values\n  returned by an alignof expression for the fundamental types plus an additional implementation-defined set\n  of values, which may be empty. Every alignment value shall be a non-negative integral power of two.</p>\n<p id=\"so_34376921_34377119_4\">An extended alignment is represented by an alignment greater than alignof(std::max_align_t). It is\n  implementation-defined whether any extended alignments are supported and the contexts in which they\n  are supported (7.6.2). A type having an extended alignment requirement is an over-aligned type. [ Note:\n  every over-aligned type is or contains a class type to which extended alignment applies (possibly through a\n  non-static data member).</p>\n</blockquote>\n", "LastActivityDate": "2015-12-20T01:22:12.913", "CommentCount": "1", "CreationDate": "2015-12-20T01:22:12.913", "ParentId": "34376921", "Score": "0", "OwnerUserId": "4500797"}, "34376921": {"ViewCount": "94", "Body": "<p>The following piece of code doesn't compile under g++ 5.3.1 but compiles under clang 3.7.0.  Which compiler is correct?</p>\n<pre><code>[hidden] cat c.cpp\ntemplate &lt;typename T&gt;\nstruct Base {\n  constexpr static int Align_ = alignof(T);\n};\n\ntemplate &lt;typename T&gt;\nstruct Derived : Base&lt;T&gt; {\n  using Base_ = Base&lt;T&gt;;\n  using Base_::Align_;\n  alignas(Align_) char buf[1];\n};\n</code></pre>\n<p>Compile output:</p>\n<pre><code>[hidden] clang++ -c -std=c++14 c.cpp\n[hidden] g++ -c -std=c++14 c.cpp\nc.cpp:10:29: error: requested alignment is not an integer constant\n   alignas(Align_) char buf[1];\n                             ^\n[hidden]\n[hidden] g++ -v\nUsing built-in specs.\nCOLLECT_GCC=/usr/bin/g++\nCOLLECT_LTO_WRAPPER=/usr/libexec/gcc/x86_64-redhat-linux/5.3.1/lto-wrapper\nTarget: x86_64-redhat-linux\nConfigured with: ../configure --enable-bootstrap --enable-languages=c,c++,objc,obj-c++,fortran,ada,go,lto --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --with-bugurl=http://bugzilla.redhat.com/bugzilla --enable-shared --enable-threads=posix --enable-checking=release --enable-multilib --with-system-zlib --enable-__cxa_atexit --disable-libunwind-exceptions --enable-gnu-unique-object --enable-linker-build-id --with-linker-hash-style=gnu --enable-plugin --enable-initfini-array --disable-libgcj --with-isl --enable-libmpx --enable-gnu-indirect-function --with-tune=generic --with-arch_32=i686 --build=x86_64-redhat-linux\nThread model: posix\ngcc version 5.3.1 20151207 (Red Hat 5.3.1-2) (GCC)\n[hidden]\n[hidden] clang++ -v\nclang version 3.7.0 (http://llvm.org/git/clang.git 2ddd3734f32e39e793550b282d44fd71736f8d21)\nTarget: x86_64-unknown-linux-gnu\nThread model: posix\nFound candidate GCC installation: /usr/lib/gcc/x86_64-redhat-linux/3.4.6\nFound candidate GCC installation: /usr/lib/gcc/x86_64-redhat-linux/5.3.1\nSelected GCC installation: /usr/lib/gcc/x86_64-redhat-linux/5.3.1\nCandidate multilib: .;@m64\nCandidate multilib: 32;@m32\nSelected multilib: .;@m64\n</code></pre>\n", "Title": "using constant from template base class", "CreationDate": "2015-12-20T00:43:57.030", "LastActivityDate": "2015-12-20T01:22:12.913", "CommentCount": "2", "PostTypeId": "1", "Id": "34376921", "Score": "2", "OwnerUserId": "875044", "Tags": "<c++><gcc><clang>", "AnswerCount": "1"}});