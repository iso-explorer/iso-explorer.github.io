post_cb({"bq_ids": {"n4140": {"so_17218769_17218854_1": {"length": 13, "quality": 0.7647058823529411, "section_id": 3294}}, "n3337": {"so_17218769_17218854_1": {"length": 13, "quality": 0.7647058823529411, "section_id": 3164}}, "n4659": {"so_17218769_17218854_1": {"length": 13, "quality": 0.7647058823529411, "section_id": 4056}}}, "17219282": {"Id": "17219282", "PostTypeId": "2", "Body": "<p>You can't return <code>time</code> by value from <code>foo</code> since <code>time</code> has no accessible copy constructor: the constructor from <code>volatile const time&amp;</code> does not match. Throw in a:</p>\n<pre><code>time(const time&amp;) = default;\n</code></pre>\n", "LastEditorUserId": "923854", "LastActivityDate": "2013-06-20T16:54:18.813", "Score": "0", "CreationDate": "2013-06-20T16:48:02.677", "ParentId": "17218769", "CommentCount": "3", "LastEditDate": "2013-06-20T16:54:18.813", "OwnerUserId": "923854"}, "17218769": {"ViewCount": "215", "Body": "<p><a href=\"http://ideone.com/F5o8Fm\" rel=\"noreferrer\">This code</a></p>\n<pre><code>#include &lt;cstdint&gt;\n\nconstexpr uint32_t ticksPerSecond = 100000;\n\nstruct timemeasure {\n    constexpr explicit timemeasure(uint64_t c) : ticks(c) { }\n    uint64_t ticks;\n    constexpr timemeasure() : ticks(0) { }\n};\n\nstruct time : timemeasure {\n    static volatile time now;\n\n    constexpr time() : timemeasure() { }\n    explicit time(uint64_t c) : timemeasure(c) { }\n\n    // Needed for `x = time::now`\n    explicit time(const volatile time &amp;t) : timemeasure(t.ticks) { }\n    time&amp; operator=(volatile time t) { ticks = t.ticks; return *this; }\n};\n\ninline time foo(const time&amp; t) { return time(t.ticks + 1); }\n</code></pre>\n<p>gives the compilation error:</p>\n<pre><code>prog.cpp: In function \u2018time foo(const time&amp;)\u2019:\nprog.cpp:22:57: error: no matching function for call to \u2018time::time(time)\u2019\nprog.cpp:22:57: note: candidate is:\nprog.cpp:14:15: note: constexpr time::time()\nprog.cpp:14:15: note:   candidate expects 0 arguments, 1 provided\n</code></pre>\n<p>Why is <code>time::time(time)</code> trying to be called? Surely the <code>uint64_t</code> is not allowed to be promoted?</p>\n", "AcceptedAnswerId": "17218854", "Title": "Why is an integer being promoted via an explicit constructor?", "CreationDate": "2013-06-20T16:21:08.067", "Id": "17218769", "CommentCount": "7", "PostTypeId": "1", "LastActivityDate": "2013-06-20T17:26:02.873", "Score": "5", "OwnerUserId": "102441", "Tags": "<c++><overload-resolution>", "AnswerCount": "2"}, "17218854": {"Id": "17218854", "PostTypeId": "2", "Body": "<p>The copy constructor of <code>time</code> is marked as <code>explicit</code>, and when returning a value from a function, a temporary is <em>copy-initialized</em> from that value. Paragraph 8.5/15 of the C++11 Standard specifies:</p>\n<blockquote>\n<p id=\"so_17218769_17218854_0\">The initialization that occurs in the form</p>\n<pre><code>T x = a;\n</code></pre>\n<p id=\"so_17218769_17218854_1\">as well as in argument passing, <strong>function return</strong>, throwing an exception (15.1), handling an exception\n  (15.3), and aggregate member initialization (8.5.1) is called <em>copy-initialization</em>. [...]</p>\n</blockquote>\n<p>However, constructors marked as <code>explicit</code> are not considered in the context of a copy-initialization (see 13.3.1.4/1 and 13.3.1.5/1), hence the error.</p>\n", "LastEditorUserId": "1932150", "LastActivityDate": "2013-06-20T17:26:02.873", "Score": "7", "CreationDate": "2013-06-20T16:26:05.650", "ParentId": "17218769", "CommentCount": "4", "LastEditDate": "2013-06-20T17:26:02.873", "OwnerUserId": "1932150"}});