post_cb({"3460303": {"ParentId": "3459810", "CommentCount": "0", "CreationDate": "2010-08-11T15:56:20.563", "OwnerUserId": "339405", "PostTypeId": "2", "Id": "3460303", "Score": "0", "Body": "<p>\"What determines what a c++ function return when no return command is executed within the function? Is there any logic to it?\"</p>\n<p>The type in the beginning of the function.</p>\n<p>Example:</p>\n<p><strong>int</strong> cow()\n{\nint temp;\nreturn temp;\n}</p>\n<p>If you don't return the correct type or return nothing, the compiler should complain. <strong>Edit:</strong> Oh crap, I've just read your flags. You need to turn on more flags man, -W -Wall -pedantic. Read the g++ manual.</p>\n<p>Unless you have a void function. Then you don't have to return anything or you can have pointer to play.</p>\n<p>void somefunction( int* ptr_int)\n{\n  int temp = *ptr_int;\n  temp +=1000;\n  this-&gt;ptr_int = temp;\n}</p>\n<p>I believe the above code works, it have been awhile since I've coded in C++.</p>\n", "LastActivityDate": "2010-08-11T15:56:20.563"}, "3459810": {"CommentCount": "7", "AcceptedAnswerId": "3459927", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2010-08-11T15:06:45.510", "LastActivityDate": "2010-08-11T17:58:59.193", "LastEditDate": "2017-05-23T12:13:59.153", "ViewCount": "721", "FavoriteCount": "1", "Title": "How do C++ progs get their return value, when a return is not specified in the function?", "Id": "3459810", "Score": "5", "Body": "<p>I recently wrote a post:<br>\n<a href=\"https://stackoverflow.com/questions/3452355/weird-error-in-c-program-removing-printout-breaks-program\">Weird Error in C++ Program: Removing Printout Breaks Program</a></br></p>\n<p>...in which I was trying to solve a seemingly baffling problem, in which removing a cout statement would break my program.</p>\n<p>As it turned out, my problem was that I forgot to return my true/false success flag that I was later using for logic.</p>\n<p>But apparently SOMETHING was being returned and that something was always true if I left that cout in, but would seemingly \"magically\" become false when I took it out.</p>\n<p>My question for you all is: <br><b>What determines what a c++ function return when no return command is executed within the function?  Is there any logic to it?</b></br></p>\n<p>Obviously forgetting your return type is a bad idea.  In this case, though, it was largely due to the nature of my program -- a quick hack job.  I later decided that it wasn't worth the effort to include implement an algorithm to determine the success/failure of the function call -- but accidentally left behind the code dependent on the return.</p>\n<p>Bafflingly g++ gave me no warnings or errors when compiling the executable like so:</p>\n<pre><code>g++ main.cc -g -o it_util\n</code></pre>\n<p>My version is:\ng++ (GCC) <strong>4.1.2 20080704</strong> (Red Hat 4.1.2-44)</p>\n<p>Again, to save others future frustration in case they make the same silly mistake and are met with the same seemingly erratic behavior, can anyone cast light on where a function without a return gets its return value from??</p>\n<p>Thanks!!</p>\n", "Tags": "<c++><memory><return-value><return>", "OwnerUserId": "375828", "AnswerCount": "6"}, "3459857": {"ParentId": "3459810", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2010-08-11T15:11:42.150", "Score": "5", "LastEditorUserId": "12725", "LastEditDate": "2010-08-11T15:17:30.220", "Id": "3459857", "OwnerUserId": "12725", "Body": "<p>There is no logic to it, and most C++ compilers should flag it with a warning. It allowed for backward-compatibility to C.</p>\n<p>In K&amp;R C, there was no <code>void</code> type, and when a type was unspecified, it default to <code>int</code>.  So,</p>\n<pre><code>myfunc() {....}\n</code></pre>\n<p>Was techincally a function returning a int, but most programmers used that form for a routine not returning a value.   </p>\n<p>The compiler had to make sense of this.  So, the convention became, the <code>return</code> would put something into a register. And the assignment in the calling routine would take the value out of the register. Now, if the callee never issued a return, nothing <em>specific</em> would be placed in that register.  But it would still have <em>some</em> (random) value in it, which would be blindly assigned in the caller.</p>\n", "LastActivityDate": "2010-08-11T15:17:30.220"}, "3459927": {"ParentId": "3459810", "CommentCount": "0", "CreationDate": "2010-08-11T15:18:14.220", "OwnerUserId": "106281", "PostTypeId": "2", "Id": "3459927", "Score": "5", "Body": "<p>On x86 calling conventions, the return value for integers and pointers is on the EAX register. The following is an example of that:</p>\n<pre><code>int func() {\n    if(0) return 5; // otherwise error C4716: 'func' : must return a value\n}\nint main() {\n    int a;\n    a = func();\n}\n</code></pre>\n<p>Compiling with <code>cl.exe /Zi</code>, MSVC++10:</p>\n<pre><code>push    ebp\nmov     ebp, esp\npush    ecx\ncall    j_?func@@YAHXZ  ; func(void)\nmov     [ebp+a], eax ; assumes eax contains the return value\nxor     eax, eax\nmov     esp, ebp\npop     ebp\nretn\n</code></pre>\n<p>Of course, this is all undefined behavior.</p>\n", "LastActivityDate": "2010-08-11T15:18:14.220"}, "3460001": {"ParentId": "3459810", "CommentCount": "0", "CreationDate": "2010-08-11T15:24:39.817", "OwnerUserId": "417415", "PostTypeId": "2", "Id": "3460001", "Score": "0", "Body": "<p>With a modern compiler you'll probably get an Warning using -Wall</p>\n<p>But if you don't return a value, usually you'll get garbage.</p>\n", "LastActivityDate": "2010-08-11T15:24:39.817"}, "3459887": {"ParentId": "3459810", "PostTypeId": "2", "CommentCount": "5", "CreationDate": "2010-08-11T15:14:38.417", "Score": "4", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:33:53.177", "Id": "3459887", "OwnerUserId": "79298", "Body": "<p>From C++ Standard section <em>6.6.3 The return statement</em></p>\n<blockquote>\n<p id=\"so_3459810_3459887_0\">Flowing off the end of a function is\n  equivalent to a return with no value;\n  this results in undefined behavior in\n  a value-returning function.</p>\n</blockquote>\n<p>There is one exception (as per 3.6.1/5): </p>\n<blockquote>\n<p id=\"so_3459810_3459887_1\">If control reaches the end of main without encountering a return\n  statement, the effect is that of\n  executing return 0;</p>\n</blockquote>\n<p>The reason this is syntactically allowed is put nicely by <a href=\"https://stackoverflow.com/users/12725/james-curran\">James Curran</a>. But with the <strong>-Wall</strong> gcc option (as commented by Neil) you should be warned on this behavior; something like 'Not all control paths return value in a value-returning function...'.</p>\n", "LastActivityDate": "2010-08-11T17:58:59.193"}, "bq_ids": {"n4140": {"so_3459810_3459887_0": {"section_id": 3913, "quality": 1.0, "length": 12}, "so_3459810_3459887_1": {"section_id": 7149, "quality": 0.9, "length": 9}}, "n3337": {"so_3459810_3459887_0": {"section_id": 3773, "quality": 1.0, "length": 12}, "so_3459810_3459887_1": {"section_id": 6893, "quality": 0.9, "length": 9}}, "n4659": {"so_3459810_3459887_0": {"section_id": 4799, "quality": 0.75, "length": 9}}}, "3459869": {"ParentId": "3459810", "CommentCount": "0", "CreationDate": "2010-08-11T15:12:53.423", "OwnerUserId": "409498", "PostTypeId": "2", "Id": "3459869", "Score": "1", "Body": "<p>It depends on the calling convention. For instance, for a 32-bit integer return on an Intel platform, you get whatever is in the <code>eax</code> register.</p>\n", "LastActivityDate": "2010-08-11T15:12:53.423"}});