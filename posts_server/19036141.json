post_cb({"19036382": {"ParentId": "19036141", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2013-09-26T18:54:52.987", "Score": "5", "LastEditorUserId": "241631", "LastEditDate": "2015-04-03T03:39:41.970", "Id": "19036382", "OwnerUserId": "241631", "Body": "<p>I'm making the <code>DrawNumber</code> function <code>public</code> for my example. You can provide an overload that takes an upper bound, and then pass a new <code>uniform_int_distribution::param_type</code> to <a href=\"http://en.cppreference.com/w/cpp/numeric/random/uniform_int_distribution/operator%28%29\" rel=\"nofollow\"><code>uniform_int_distribution::operator()</code></a></p>\n<p>The <code>param_type</code> can be constructed using the same arguments as the corresponding distribution.</p>\n<p>From N3337, <em>\u00a726.5.1.6/9 <strong>[rand.req.dist]</strong></em></p>\n<blockquote>\n<p id=\"so_19036141_19036382_0\">For each of the constructors of <code>D</code> taking arguments corresponding to parameters of the distribution, <code>P</code> shall have a corresponding constructor subject to the same requirements and taking arguments identical in number, type, and default values. Moreover, for each of the member functions of <code>D</code> that return values corresponding to parameters of the distribution, <code>P</code> shall have a corresponding member function with the identical name, type, and semantics.</p>\n</blockquote>\n<p>where <code>D</code> is the type of a random number distribution function object and <code>P</code> is the type named by <code>D</code>'s associated <code>param_type</code></p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;random&gt;\n\ntypedef unsigned int uint32;\n\nclass Random {\npublic:\n    Random() = default;\n    Random(std::mt19937::result_type seed) : eng(seed) {}\n\n    uint32 DrawNumber();\n    uint32 DrawNumber(uint32 ub);\n\nprivate:\n    std::mt19937 eng{std::random_device{}()};\n    std::uniform_int_distribution&lt;uint32&gt; uniform_dist{0, UINT32_MAX};\n};\n\nuint32 Random::DrawNumber()\n{\n    return uniform_dist(eng);\n}\n\nuint32 Random::DrawNumber(uint32 ub)\n{\n    return uniform_dist(eng, decltype(uniform_dist)::param_type(0, ub));\n}\n\nint main()\n{\n  Random r;\n  std::cout &lt;&lt; r.DrawNumber() &lt;&lt; std::endl;\n  std::cout &lt;&lt; r.DrawNumber(42) &lt;&lt; std::endl;\n}\n</code></pre>\n", "LastActivityDate": "2015-04-03T03:39:41.970"}, "19037087": {"ParentId": "19036141", "CommentCount": "0", "CreationDate": "2013-09-26T19:33:06.937", "OwnerUserId": "906839", "PostTypeId": "2", "Id": "19037087", "Score": "8", "Body": "<p>You can simply create a <code>std::uniform_int_distribution&lt;uint32&gt;::param_type</code> and modify the range using the <a href=\"http://gcc.gnu.org/onlinedocs/gcc-4.8.1/libstdc++/api/a01008.html\" rel=\"noreferrer\"><code>param()</code></a> method. You can cut down the template noise with <code>decltype</code> :</p>\n<pre><code>decltype(uniform_dist.param()) new_range (0, upper);\nuniform_dist.param(new_range);\n</code></pre>\n", "LastActivityDate": "2013-09-26T19:33:06.937"}, "19036141": {"CommentCount": "1", "AcceptedAnswerId": "19036349", "CreationDate": "2013-09-26T18:41:25.713", "LastActivityDate": "2015-04-03T03:39:41.970", "PostTypeId": "1", "ViewCount": "8567", "FavoriteCount": "7", "Title": "Vary range of uniform_int_distribution", "Id": "19036141", "Score": "18", "Body": "<p>So i have a Random object:</p>\n<pre><code>typedef unsigned int uint32;\n\nclass Random {\npublic:\n    Random() = default;\n    Random(std::mt19937::result_type seed) : eng(seed) {}\n\nprivate:\n    uint32 DrawNumber();\n    std::mt19937 eng{std::random_device{}()};\n    std::uniform_int_distribution&lt;uint32&gt; uniform_dist{0, UINT32_MAX};\n};\n\nuint32 Random::DrawNumber()\n{\n    return uniform_dist(eng);\n}\n</code></pre>\n<p>What's the best way I can vary (through another function or otherwise) the upper bound of of the distribution?</p>\n<p>(also willing to take advice on other style issues)</p>\n", "Tags": "<c++><c++11><random><distribution>", "OwnerUserId": "995325", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_19036141_19036382_0": {"section_id": 3518, "quality": 0.9736842105263158, "length": 37}}, "n3337": {"so_19036141_19036382_0": {"section_id": 3383, "quality": 0.9736842105263158, "length": 37}}, "n4659": {"so_19036141_19036382_0": {"section_id": 4281, "quality": 0.9736842105263158, "length": 37}}}, "19036349": {"ParentId": "19036141", "PostTypeId": "2", "CommentCount": "3", "CreationDate": "2013-09-26T18:52:37.580", "Score": "29", "LastEditorUserId": "598696", "LastEditDate": "2013-09-26T18:57:41.163", "Id": "19036349", "OwnerUserId": "598696", "Body": "<p>Distribution objects are lightweight. Simply construct a new distribution when you need a random number. I use this approach in a game engine, and, after benchmarking, it's comparable to using good old <code>rand()</code>.</p>\n<p>Also, I've asked how to vary the range of distribution on GoingNative 2013 live stream, and Stephen T. Lavavej, a member of the standard committee, suggested to simply create new distributions, as it shouldn't be a performance issue.</p>\n<p>Here's how I would write your code:</p>\n<pre><code>using uint32 = unsigned int;\n\nclass Random {\npublic:\n    Random() = default;\n    Random(std::mt19937::result_type seed) : eng(seed) {}\n    uint32 DrawNumber(uint32 min, uint32 max);\n\nprivate:        \n    std::mt19937 eng{std::random_device{}()};\n};\n\nuint32 Random::DrawNumber(uint32 min, uint32 max)\n{\n    return std::uniform_int_distribution&lt;uint32&gt;{min, max}(eng);\n}\n</code></pre>\n", "LastActivityDate": "2013-09-26T18:57:41.163"}});