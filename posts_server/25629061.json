post_cb({"bq_ids": {"n4140": {"so_25629061_25630943_1": {"length": 11, "quality": 1.0, "section_id": 5561}, "so_25629061_25630943_2": {"length": 5, "quality": 0.7142857142857143, "section_id": 7019}, "so_25629061_25630943_0": {"length": 11, "quality": 1.0, "section_id": 7018}}, "n3337": {"so_25629061_25630943_1": {"length": 11, "quality": 1.0, "section_id": 5343}, "so_25629061_25630943_2": {"length": 5, "quality": 0.7142857142857143, "section_id": 6765}, "so_25629061_25630943_0": {"length": 11, "quality": 1.0, "section_id": 6764}}, "n4659": {"so_25629061_25630943_1": {"length": 11, "quality": 1.0, "section_id": 7008}, "so_25629061_25630943_2": {"length": 5, "quality": 0.7142857142857143, "section_id": 8516}, "so_25629061_25630943_0": {"length": 11, "quality": 1.0, "section_id": 8515}}}, "25629364": {"Id": "25629364", "PostTypeId": "2", "Body": "<p>Your second class <code>Numeric</code> is an interface.</p>\n<p>If a class has one or more pure virtual functions, then this class is called an \"abstract class\".</p>\n<p>Generally, if all of a classes' functions are pure virtual functions, then this class is called an \"interface\".</p>\n<p>C++ does not have an explicit <code>interface</code> concept, so the above two classes are called the interface or abstract class, somewhat interchangably.</p>\n", "LastEditorUserId": "845092", "LastActivityDate": "2014-09-02T17:56:26.277", "Score": "1", "CreationDate": "2014-09-02T17:49:58.867", "ParentId": "25629061", "CommentCount": "0", "OwnerUserId": "2875187", "LastEditDate": "2014-09-02T17:56:26.277"}, "25630943": {"Id": "25630943", "PostTypeId": "2", "Body": "<p>If you are looking for an official answer, then I'm afraid there is none.</p>\n<p>The draft of the C++11 standard I am having here merely says [10.4 class.abstract]:</p>\n<blockquote>\n<p id=\"so_25629061_25630943_0\">An abstract class can also be used to define an interface for which\n  derived classes provide a variety of implementations.</p>\n</blockquote>\n<p><strong>All</strong> other instances of the word <em>\"interface\"</em> in the entire ~1300 pages PDF only refer to generic programming or other things not related to OOP or abstract classes.</p>\n<p>For example this one here [24.2.1 iterator.requirements.general]:</p>\n<blockquote>\n<p id=\"so_25629061_25630943_1\">Most of the library\u2019s algorithmic templates that operate on data\n  structures have interfaces that use ranges.</p>\n</blockquote>\n<p>This obviously has nothing to do with abstract classes.</p>\n<p>Bjarne Stroustrup himself, if you accept his words as \"half-official\", doesn't really help you in this regard, either. Quoting from the <a href=\"http://www.stroustrup.com/glossary.html\" rel=\"nofollow\">glossary on his homepage</a>:</p>\n<blockquote>\n<p id=\"so_25629061_25630943_2\">abstract class - a class defining an interface only; used as a base\n  class.</p>\n</blockquote>\n<p>You will have to live with the fact that the C++ language itself as well as C++ developers and experts use the word <em>\"interface\"</em> as a <strong>superset</strong> for <em>\"abstract class\"</em>. Unlike e.g. in Java, where interfaces are an actual language element with its own <code>interface</code> keyword, there is no such thing in C++.</p>\n<p>Everything else is opinion-based.</p>\n", "LastActivityDate": "2014-09-02T19:29:55.223", "CommentCount": "0", "CreationDate": "2014-09-02T19:29:55.223", "ParentId": "25629061", "Score": "1", "OwnerUserId": "3313064"}, "25629523": {"Id": "25629523", "PostTypeId": "2", "Body": "<p>In my opinion, your second class can be considered an interface. I don't think there is a standard which defines interfaces in C++. However in languages which have interfaces, for example, Java, you can usually  have enums defined inside an interface. </p>\n<p>I would consider a class with no implementation to be an interface. </p>\n", "LastActivityDate": "2014-09-02T18:00:47.837", "CommentCount": "0", "CreationDate": "2014-09-02T18:00:47.837", "ParentId": "25629061", "Score": "0", "OwnerUserId": "106494"}, "25629061": {"ViewCount": "329", "Body": "<p>It might be a silly question but I never saw a question about it or read about it.</p>\n<p>Imagine that we have this:</p>\n<pre><code>class Numeric\n{\npublic:\n    virtual ~Numeric() {}\n    virtual int getNumeric() const = 0;\n};\n</code></pre>\n<p>This is considered an interface.</p>\n<p>And now I insert an enumerator (It can be something else, like a typedef, etc.)</p>\n<pre><code>class Numeric\n{\npublic:\n    enum Numbers\n    {\n        One,\n        Two,\n    };\n\n    virtual Numbers getNumeric() const = 0;\n};\n</code></pre>\n<p>Still being an interface or it is now considered an abstract class?</p>\n<p>As I said, it might be silly but I really wonder to know that.</p>\n", "AcceptedAnswerId": "25630943", "Title": "Is it an abstract class or a pure virtual (interface)?", "CreationDate": "2014-09-02T17:29:31.740", "Id": "25629061", "CommentCount": "9", "LastEditDate": "2014-09-02T17:48:59.267", "PostTypeId": "1", "LastEditorUserId": "3996275", "LastActivityDate": "2014-09-02T19:29:55.223", "Score": "0", "OwnerUserId": "3996275", "Tags": "<c++><oop>", "AnswerCount": "3"}});