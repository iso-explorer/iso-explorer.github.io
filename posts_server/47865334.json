post_cb({"47865404": {"Id": "47865404", "PostTypeId": "2", "Body": "<p>From <a href=\"http://eel.is/c++draft/conv.ptr#1\" rel=\"nofollow noreferrer\">[conv.ptr]\u00a71</a>:</p>\n<blockquote>\n<p id=\"so_47865334_47865404_0\">A <em>null pointer constant</em> is an integer literal with value zero or a prvalue of type <code>std\u200b::\u200bnullptr_\u00adt</code>. [...]</p>\n</blockquote>\n<p><code>'\\0'</code> is not an integer literal, it's a character literal, thus the conversion does not apply.</p>\n", "LastActivityDate": "2017-12-18T09:28:49.720", "CommentCount": "5", "CreationDate": "2017-12-18T09:28:49.720", "ParentId": "47865334", "Score": "4", "OwnerUserId": "3233393"}, "bq_ids": {"n4140": {"so_47865334_47865404_0": {"length": 10, "quality": 1.0, "section_id": 39}, "so_47865334_47866505_1": {"length": 10, "quality": 1.0, "section_id": 39}}, "n3337": {"so_47865334_47865404_0": {"length": 8, "quality": 0.8, "section_id": 36}, "so_47865334_47866505_1": {"length": 8, "quality": 0.8, "section_id": 36}, "so_47865334_47866505_0": {"length": 10, "quality": 0.9090909090909091, "section_id": 36}}, "n4659": {"so_47865334_47865404_0": {"length": 10, "quality": 1.0, "section_id": 39}, "so_47865334_47866505_1": {"length": 10, "quality": 1.0, "section_id": 39}}}, "47866505": {"Id": "47866505", "PostTypeId": "2", "Body": "<p>This was a change from C++03 to C++14. In C++03, [conv.ptr]p1 says:</p>\n<blockquote>\n<p id=\"so_47865334_47866505_0\">A null pointer constant is an integral constant expression rvalue of integer type that evaluates to zero.</p>\n</blockquote>\n<p>A character literal is an integral constant expression.</p>\n<p>In C++14, [conv.ptr]p1 says:</p>\n<blockquote>\n<p id=\"so_47865334_47866505_1\">A null pointer constant is an integer literal with value zero or a prvalue of type std::nullptr_t.</p>\n</blockquote>\n<p>A character literal is not an integer literal, nor of type <code>std::nullptr_t</code>.</p>\n<p>The originally published version of C++11 didn't contain this change; however, it was introduced due to defect report DR903 and incorporated into the standard sometime after January 2013 (the date of the last comment on that DR).</p>\n<p>Because the change is the result of a DR, compilers treat it as a bugfix to the existing standard, not part of the next one, and so Clang and GCC both made the behavior change when <code>-std=c++11</code>, not just when <code>-std=c++14</code>. However, apparently this change wasn't implemented in GCC until after version 4.8. (Specifically, it seems to have only been implemented in GCC 7 and up.)</p>\n", "LastActivityDate": "2017-12-18T10:31:32.377", "CommentCount": "0", "CreationDate": "2017-12-18T10:31:32.377", "ParentId": "47865334", "Score": "5", "OwnerUserId": "8922"}, "47865334": {"ViewCount": "81", "Body": "<p>Is comparing a pointer to <code>'\\0'</code> legal? </p>\n<p>On the trunk version of clang++ (25836be2c)</p>\n<pre><code>const char *a = \"foo\";\n\nif(a == '\\0')\n</code></pre>\n<p>gives an error:  comparison between pointer and integer ('const char *' and 'int')</p>\n<p>whereas </p>\n<pre><code>if(a == 0)\n</code></pre>\n<p>does not give any error as expected.</p>\n<p>Isn't the null character equivalent to the null pointer for comparisons with pointer? Is this a compiler bug? </p>\n<p>Another point is that this error does not show up with \"-std=c++03\" flag but shows up with \"-std=c++11\" flag. However, I don't get the error in both standards when I use g++ (v4.8.5)</p>\n", "AcceptedAnswerId": "47866505", "Title": "Comparison between pointer and null character legal?", "CreationDate": "2017-12-18T09:23:52.217", "LastActivityDate": "2017-12-18T11:48:39.150", "CommentCount": "5", "LastEditDate": "2017-12-18T11:48:39.150", "PostTypeId": "1", "LastEditorUserId": "2858773", "Id": "47865334", "Score": "3", "OwnerUserId": "8165940", "Tags": "<c++>", "AnswerCount": "2"}});