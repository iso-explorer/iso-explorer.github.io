post_cb({"17418615": {"ParentId": "17418584", "PostTypeId": "2", "CommentCount": "1", "CreationDate": "2013-07-02T06:15:13.780", "Score": "8", "LastEditorUserId": "661519", "LastEditDate": "2013-07-02T06:32:50.160", "Id": "17418615", "OwnerUserId": "661519", "Body": "<p>There is no problem, any non-zero integer translates to <code>true</code>, and zero is <code>false</code>. Conversely, a <code>bool</code> can be converted to <code>int</code>, with <code>true</code> converting to <code>1</code> and <code>false</code> to <code>0</code>.</p>\n<p>You don't need to be so verbose when comparing boolean values though:</p>\n<pre><code>if (!func()) { .... }\n</code></pre>\n<p>Of course, if the function only returns <code>true</code> or <code>false</code>, as in your example, then it would make sense for it to return <code>bool</code> directly:</p>\n<pre><code>bool func();\n</code></pre>\n", "LastActivityDate": "2013-07-02T06:32:50.160"}, "17418710": {"ParentId": "17418584", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2013-07-02T06:20:41.710", "Score": "2", "LastEditorUserId": "350527", "LastEditDate": "2013-07-02T06:25:42.777", "Id": "17418710", "OwnerUserId": "350527", "Body": "<p>From the standard</p>\n<blockquote>\n<p id=\"so_17418584_17418710_0\">4.7 Integral conversions</p>\n<p id=\"so_17418584_17418710_1\">If the destination type is bool, see 4.12. If the source type is bool, the value false is converted to zero and\n  the value true is converted to one.</p>\n<p id=\"so_17418584_17418710_2\">4.12 Boolean conversions [conv.bool]</p>\n<p id=\"so_17418584_17418710_3\">A prvalue of arithmetic, unscoped enumeration, pointer, or pointer to member type can be converted to a\n  prvalue of type bool. A zero value, null pointer value, or null member pointer value is converted to false;\n  any other value is converted to true. A prvalue of type std::nullptr_t can be converted to a prvalue of\n  type bool; the resulting value is false.</p>\n</blockquote>\n", "LastActivityDate": "2013-07-02T06:25:42.777"}, "17420075": {"ParentId": "17418584", "CommentCount": "0", "Body": "<p>Inside <code>func</code>, the <code>bool</code> you supply is converted to <code>int</code> for return. <code>false</code> is converted to <code>0</code> and <code>true</code> is converted to <code>1</code>.</p>\n<p>In the comparison, your constant <code>false</code> is converted to <code>int</code>, with value <code>0</code>.</p>\n<p>Generally your code will read better if you pick one: either use the <code>bool</code> type throughout, or else use the <code>int</code> type and the value <code>0</code>.</p>\n", "OwnerUserId": "13005", "PostTypeId": "2", "Id": "17420075", "Score": "1", "CreationDate": "2013-07-02T07:40:47.227", "LastActivityDate": "2013-07-02T07:40:47.227"}, "17418584": {"CommentCount": "3", "ViewCount": "2845", "CreationDate": "2013-07-02T06:13:22.690", "LastActivityDate": "2013-07-02T07:40:47.227", "Title": "Comparing the integer return value of a function to bool in C++", "AcceptedAnswerId": "17418615", "PostTypeId": "1", "Id": "17418584", "Score": "2", "Body": "<p>Consider the following C++ code snippet below:</p>\n<pre><code>...\n\nif (false == func()) // Line #1\n{\n ...\n ...\n}\n\nint func()\n{\n ...\n  {\n     ...\n     return false;\n  }\n ...\n\n return true;\n} \n</code></pre>\n<p>In the code snippet above, the prototype of function <code>func()</code> indicates that it returns an integer. But inside the function <code>func()</code>, it returns either <code>false</code> or <code>true</code>.</p>\n<p>Also in Line #1, the return value of function <code>func()</code> is checked against a boolean value.</p>\n<p>I would like to know whether there is any problem with this type of usage. If there is some problem, recommend what rectifications needs to be done.</p>\n", "Tags": "<c++><function><boolean><return-value>", "OwnerUserId": "1220250", "AnswerCount": "4"}, "17418826": {"ParentId": "17418584", "CommentCount": "0", "Body": "<p>In the function func(), the source type is bool and the destination type is int (since the return type of the function is int), so the value false is converted to zero and the value true is converted to the value one of the destination type. This int, when returning back to Line #1 is automatically converted to bool so, since func can return 1 or 0, the value zero  becomes false and 1 becomes true. If func returned any non-zero value, it would be automatically converted to true on Line #1.</p>\n<p>Check <a href=\"http://en.cppreference.com/w/cpp/language/implicit_cast\" rel=\"nofollow\">this website</a> in the sections \"Integral conversions\" and \"Boolean conversions\".</p>\n<p>Sureley there's no problem with this type of usage but I must say that it's not easily readable, expecially if the code becomes more complex and should be maintained by someone else that didn't write this code. Why don't you simply make func return bool?</p>\n", "OwnerUserId": "2540208", "PostTypeId": "2", "Id": "17418826", "Score": "0", "CreationDate": "2013-07-02T06:29:38.613", "LastActivityDate": "2013-07-02T06:29:38.613"}, "bq_ids": {"n4140": {"so_17418584_17418710_1": {"section_id": 33, "quality": 0.9375, "length": 15}, "so_17418584_17418710_3": {"section_id": 44, "quality": 1.0, "length": 39}}, "n3337": {"so_17418584_17418710_1": {"section_id": 30, "quality": 0.9375, "length": 15}, "so_17418584_17418710_3": {"section_id": 41, "quality": 1.0, "length": 39}}, "n4659": {"so_17418584_17418710_1": {"section_id": 33, "quality": 0.9375, "length": 15}, "so_17418584_17418710_3": {"section_id": 45, "quality": 1.0, "length": 39}}}});