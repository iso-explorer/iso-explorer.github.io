post_cb({"bq_ids": {"n4140": {"so_10227317_10227425_1": {"length": 23, "quality": 0.9583333333333334, "section_id": 3369}}, "n3337": {"so_10227317_10227425_1": {"length": 23, "quality": 0.9583333333333334, "section_id": 3239}}}, "10227317": {"ViewCount": "57", "Body": "<p>In C++, in the exception declaration specifier, if I declare a base class and then throw a derived class, is that an unexpected exception?</p>\n", "AcceptedAnswerId": "10227425", "Title": "Is a derived object type from the exception declaration unexpected?", "CreationDate": "2012-04-19T11:45:23.773", "Id": "10227317", "CommentCount": "0", "LastEditDate": "2012-04-19T15:57:50.723", "PostTypeId": "1", "LastEditorUserId": "21234", "LastActivityDate": "2012-04-19T15:57:50.723", "Score": "1", "OwnerUserId": "115751", "Tags": "<c++><exception-handling>", "AnswerCount": "2"}, "10227425": {"PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_10227317_10227425_0\">In C++, in the exception declaration specifier, if I declare a base class and then throw a derived class, is that an unexpected exception?</p>\n</blockquote>\n<p>No. It is allowed.</p>\n<p>Reference: \n<strong>C++03 15.4 Exception specifications</strong></p>\n<p><strong>Para 6:</strong></p>\n<blockquote>\n<p id=\"so_10227317_10227425_1\">An exception-specification can include the same type more than once and can include classes that are related by inheritance, even though doing so is redundant. An exception-specification can also include the class std::bad_exception (18.6.2.1).</p>\n</blockquote>\n<p>There is a relevant example in<br>\n<strong>Para 8:</strong></br></p>\n<pre><code>[Example:\nclass X { };\nclass Y { };\nclass Z: public X { };\nclass W { };\nvoid f() throw (X, Y)\n{\n    int n = 0;\n    if (n) throw X(); // OK\n    if (n) throw Z(); // also OK    &lt;------- Example of the exact scenario you posted\n    throw W(); // will call unexpected()\n}\n\u2014end example]\n</code></pre>\n<hr>\n<p>Note that Exception specifications are considered as an experiment that failed and most compilers do not implement them correctly. So avoid(rather don't) use them.</p>\n</hr>", "LastActivityDate": "2012-04-19T14:41:28.383", "LastEditorUserId": "452307", "Id": "10227425", "CommentCount": "0", "CreationDate": "2012-04-19T11:51:05.320", "ParentId": "10227317", "Score": "2", "OwnerUserId": "452307", "LastEditDate": "2012-04-19T14:41:28.383"}, "10227420": {"PostTypeId": "2", "Body": "<p>I know this is the dreaded non-answer, but please don't use exception specifications:</p>\n<p><a href=\"http://www.gotw.ca/publications/mill22.htm\" rel=\"nofollow\">http://www.gotw.ca/publications/mill22.htm</a></p>\n<p>To quote the relevant parts:</p>\n<blockquote>\n<p id=\"so_10227317_10227420_0\">Moral #1: Never write an exception specification.</p>\n<p id=\"so_10227317_10227420_1\">Moral #2: Except possibly an empty one, but if I were you I\u2019d avoid even that.</p>\n</blockquote>\n<p>The caveat to #2 is \"noexcept\" in C++11.</p>\n", "LastActivityDate": "2012-04-19T11:50:55.470", "Id": "10227420", "CommentCount": "0", "CreationDate": "2012-04-19T11:50:55.470", "ParentId": "10227317", "Score": "0", "OwnerUserId": "446649"}});