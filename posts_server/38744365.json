post_cb({"38744467": {"ParentId": "38744365", "CommentCount": "0", "Body": "<p>Yes, this is undefined behaviour as it breaks the strict aliasing rule:</p>\n<blockquote>\n<p id=\"so_38744365_38744467_0\"><code>[basic.lval]/10:</code> If a program attempts to access the stored value of an object through a glvalue of other than one of the\n  following types the behavior is undefined\n  \u2014 the dynamic type of the object,</p>\n<p id=\"so_38744365_38744467_1\">\u2014 a cv-qualified version of the dynamic type of the object,</p>\n<p id=\"so_38744365_38744467_2\">\u2014 a type similar (as defined in 4.4) to the dynamic type of the object,</p>\n<p id=\"so_38744365_38744467_3\">\u2014 a type that is the signed or unsigned type corresponding to the dynamic type of the object,</p>\n<p id=\"so_38744365_38744467_4\">\u2014 a type that is the signed or unsigned type corresponding to a cv-qualified version of the dynamic type\n  of the object,</p>\n<p id=\"so_38744365_38744467_5\">\u2014 an aggregate or union type that includes one of the aforementioned types among its elements or non-\n  static data members (including, recursively, an element or non-static data member of a subaggregate\n  or contained union),</p>\n<p id=\"so_38744365_38744467_6\">\u2014 a type that is a (possibly cv-qualifded) base class type of the dynamic type of the object,</p>\n<p id=\"so_38744365_38744467_7\">\u2014 a char or unsigned char type.</p>\n</blockquote>\n<p>Since <code>uint32_t</code> is none of the above when trying to access an object of type <code>float</code>, the behaviour is undefined.</p>\n", "OwnerUserId": "496161", "PostTypeId": "2", "Id": "38744467", "Score": "6", "CreationDate": "2016-08-03T13:02:21.463", "LastActivityDate": "2016-08-03T13:02:21.463"}, "38744365": {"CommentCount": "5", "ViewCount": "154", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2016-08-03T12:57:54.490", "LastActivityDate": "2016-08-03T13:05:42.187", "Title": "Copy bit pattern: float to uint32_t", "LastEditDate": "2017-05-23T12:01:06.690", "Id": "38744365", "Score": "0", "Body": "<p>Copying bit pattern of a <code>float</code> value into a <code>uint32_t</code> or vice versa (not casting them), we can copy bits byte-to-byte using <code>std::copy</code> or <code>memcpy</code>. Another way is to use <code>reinterpret_cast</code> as below:</p>\n<pre><code>float f = 0.5f;\nuint32_t i = *reinterpret_cast&lt;uint32_t*&gt;(&amp;f);\n</code></pre>\n<p>or</p>\n<pre><code>uint32_t i;\nreinterpret_cast&lt;float&amp;&gt;(i) = 10;\n</code></pre>\n<p>However there is a <a href=\"https://stackoverflow.com/questions/8365143/how-can-i-assign-a-float-variable-to-an-unsigned-int-variable-bit-image-not-ca\">claim</a> that says two <code>reinterpret_cast</code> used above, invoke undefined behavior.</p>\n<p>Is that true? How?</p>\n", "Tags": "<c++><undefined-behavior><primitive-types><reinterpret-cast>", "OwnerUserId": "952747", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_38744365_38744467_1": {"section_id": 7239, "quality": 1.0, "length": 5}, "so_38744365_38744467_6": {"section_id": 7239, "quality": 0.8888888888888888, "length": 8}, "so_38744365_38744467_3": {"section_id": 7239, "quality": 1.0, "length": 8}, "so_38744365_38744467_5": {"section_id": 7239, "quality": 0.9130434782608695, "length": 21}, "so_38744365_38744467_2": {"section_id": 7239, "quality": 1.0, "length": 6}, "so_38744365_38744467_0": {"section_id": 7239, "quality": 0.9444444444444444, "length": 17}, "so_38744365_38744467_4": {"section_id": 7239, "quality": 1.0, "length": 10}, "so_38744365_38744467_7": {"section_id": 45, "quality": 1.0, "length": 4}}, "n3337": {"so_38744365_38744467_1": {"section_id": 6983, "quality": 1.0, "length": 5}, "so_38744365_38744467_6": {"section_id": 6983, "quality": 0.8888888888888888, "length": 8}, "so_38744365_38744467_3": {"section_id": 6983, "quality": 1.0, "length": 8}, "so_38744365_38744467_5": {"section_id": 6983, "quality": 0.9130434782608695, "length": 21}, "so_38744365_38744467_2": {"section_id": 6983, "quality": 1.0, "length": 6}, "so_38744365_38744467_0": {"section_id": 6983, "quality": 0.9444444444444444, "length": 17}, "so_38744365_38744467_4": {"section_id": 6983, "quality": 1.0, "length": 10}, "so_38744365_38744467_7": {"section_id": 42, "quality": 1.0, "length": 4}}, "n4659": {"so_38744365_38744467_6": {"section_id": 8748, "quality": 0.8888888888888888, "length": 8}, "so_38744365_38744467_7": {"section_id": 46, "quality": 1.0, "length": 4}, "so_38744365_38744467_3": {"section_id": 8748, "quality": 1.0, "length": 8}, "so_38744365_38744467_5": {"section_id": 8748, "quality": 0.9130434782608695, "length": 21}, "so_38744365_38744467_2": {"section_id": 8748, "quality": 1.0, "length": 6}, "so_38744365_38744467_1": {"section_id": 8748, "quality": 1.0, "length": 5}, "so_38744365_38744467_4": {"section_id": 8748, "quality": 1.0, "length": 10}, "so_38744365_38744467_0": {"section_id": 8748, "quality": 0.9444444444444444, "length": 17}}}});