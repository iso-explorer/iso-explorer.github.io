post_cb({"13476916": {"Id": "13476916", "PostTypeId": "2", "Body": "<p>You can't. If you feel the need to do this perhaps you should be writing a static method taking a class pointer as it's first parameter.</p>\n", "LastActivityDate": "2012-11-20T15:51:15.113", "CommentCount": "2", "CreationDate": "2012-11-20T15:51:15.113", "ParentId": "13476879", "Score": "3", "OwnerUserId": "1534269"}, "13476899": {"Id": "13476899", "PostTypeId": "2", "Body": "<p>You cannot assign value to <code>this</code> pointer. If you try to assign the value to the <code>this</code> somthing like <code>this = &amp;a</code> it would result in illegal expression</p>\n", "LastEditorUserId": "1501794", "LastActivityDate": "2012-11-20T15:58:37.890", "Score": "2", "CreationDate": "2012-11-20T15:50:25.890", "ParentId": "13476879", "CommentCount": "5", "OwnerUserId": "1501794", "LastEditDate": "2012-11-20T15:58:37.890"}, "13476879": {"ViewCount": "7736", "Body": "<p>In a function, how to you assign <code>this</code> a new value?</p>\n", "AcceptedAnswerId": "13476889", "Title": "How can you assign a value to the pointer 'this' in C++", "CreationDate": "2012-11-20T15:49:01.013", "Id": "13476879", "CommentCount": "3", "FavoriteCount": "4", "PostTypeId": "1", "LastEditDate": "2012-11-20T16:09:32.660", "LastEditorUserId": "901048", "LastActivityDate": "2016-06-15T14:05:48.207", "Score": "10", "OwnerUserId": "1839342", "Tags": "<c++><this>", "AnswerCount": "6"}, "13477148": {"Id": "13477148", "PostTypeId": "2", "Body": "<p>Long ago, before the first C++ standard has been published, some compiler implementations allowed you to write the following code inside a constructor:</p>\n<pre><code>this = malloc(sizeof(MyClass)); // &lt;&lt;== No longer allowed\n</code></pre>\n<p>The technique served as the only way to control allocation of class of objects. This practice has been prohibited by the standard, because overloading of the <code>operator new</code> has solved the problem that used to be tackled by assignments to <code>this</code>.</p>\n", "LastActivityDate": "2012-11-20T16:02:28.483", "CommentCount": "3", "CreationDate": "2012-11-20T16:02:28.483", "ParentId": "13476879", "Score": "14", "OwnerUserId": "335858"}, "30961238": {"Id": "30961238", "PostTypeId": "2", "Body": "<p>You can not.\n\"this\" is a hidden argument to every member function of a class and its type for an object of Class X is X* const. This clearly means that you can not assign a new vale to \"this\" as it is defined as a const. You can however modify the value pointed to by this. Refer <a href=\"http://www.geeksforgeeks.org/this-pointer-in-c/\" rel=\"nofollow\">http://www.geeksforgeeks.org/this-pointer-in-c/</a> for more details.</p>\n", "LastActivityDate": "2015-06-21T04:21:45.643", "CommentCount": "0", "CreationDate": "2015-06-21T04:21:45.643", "ParentId": "13476879", "Score": "0", "OwnerUserId": "940154"}, "bq_ids": {"n4140": {"so_13476879_13476889_0": {"length": 13, "quality": 0.8125, "section_id": 5895}}, "n3337": {"so_13476879_13476889_0": {"length": 13, "quality": 0.8125, "section_id": 5666}}, "n4659": {"so_13476879_13476889_0": {"length": 13, "quality": 0.8125, "section_id": 7378}}}, "13477013": {"Id": "13477013", "PostTypeId": "2", "Body": "<p>You can assign the object <code>this</code> points at:</p>\n<pre><code>*this = XY;\n</code></pre>\n<p>But you can't assign the direct value of <code>this</code>:</p>\n<pre><code>this = &amp;XY;   // Error: Expression is not assignable\n</code></pre>\n", "LastEditorUserId": "1202769", "LastActivityDate": "2016-06-15T14:05:48.207", "Score": "15", "CreationDate": "2012-11-20T15:56:22.610", "ParentId": "13476879", "CommentCount": "1", "OwnerUserId": "1202769", "LastEditDate": "2016-06-15T14:05:48.207"}, "13476889": {"Id": "13476889", "PostTypeId": "2", "Body": "<p>You can't. </p>\n<h3>9.3.2 The this pointer [class.this]</h3>\n<blockquote>\n<p id=\"so_13476879_13476889_0\">1 In the body of a non-static (9.3) member function, the keyword <strong><code>this</code> is a <a href=\"https://stackoverflow.com/q/3601602/673730\">prvalue</a> expression</strong> whose value\n  is the address of the object for which the function is called. [...] (emphasis &amp; link mine)</p>\n</blockquote>\n<p>You can modify the object <code>this</code> points to, which is <code>*this</code>. For example:</p>\n<pre><code>struct X\n{\n   int x;\n   void foo()\n   {\n     this-&gt;x =3;\n   }\n};\n</code></pre>\n<p>The method modifies the object itself, but something like <code>this = new X</code> is illegal.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2012-11-20T16:15:01.380", "Score": "23", "CreationDate": "2012-11-20T15:49:45.520", "ParentId": "13476879", "CommentCount": "2", "OwnerUserId": "673730", "LastEditDate": "2017-05-23T12:17:40.393"}});