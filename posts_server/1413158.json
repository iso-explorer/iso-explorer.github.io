post_cb({"1413435": {"ParentId": "1413158", "CommentCount": "4", "Body": "<p>So I filed <a href=\"http://gcc.gnu.org/bugzilla/show_bug.cgi?id=41341\" rel=\"nofollow noreferrer\">a bug on gcc</a></p>\n", "OwnerUserId": "25406", "PostTypeId": "2", "Id": "1413435", "Score": "3", "CreationDate": "2009-09-11T21:43:34.910", "LastActivityDate": "2009-09-11T21:43:34.910"}, "1413158": {"CommentCount": "5", "ViewCount": "1247", "CreationDate": "2009-09-11T20:42:01.343", "LastActivityDate": "2009-09-12T08:31:44.773", "Title": "Partial specialization of a class template in derived class affects base class", "AcceptedAnswerId": "1413347", "PostTypeId": "1", "Id": "1413158", "Score": "2", "Body": "<p>I have a metafunction:</p>\n<pre><code>struct METAFUNCION\n{\n  template&lt;class T&gt;\n  struct apply\n  {\n    typedef T type;\n  };\n};\n</code></pre>\n<p>Then I define a helper:</p>\n<pre><code>template&lt;class T1, class T2&gt;\nstruct HELPER\n{\n};\n</code></pre>\n<p>And then I have second metafunction which derives from the METAFUNCTION above and defines partial specialization of apply struct:</p>\n<pre><code>struct METAFUNCION2 : METAFUNCION\n{\n  template&lt;class T1, class T2&gt;\n  struct apply&lt;HELPER&lt;T1, T2&gt; &gt; : METAFUNCION::apply&lt;T2&gt;\n  {\n  };\n};\n</code></pre>\n<p>So far, so good - the code compiles under g++ 4.3.2. So I used it like below:</p>\n<pre><code>#include &lt;typeinfo&gt;\n#include &lt;string&gt;\n#include &lt;cstdlib&gt;\n#include &lt;cxxabi.h&gt;\n\ntemplate&lt;typename T&gt;\nstruct type_info2\n{\n  static std::string name()\n  {\n    char *p = abi::__cxa_demangle(typeid(T).name(), 0, 0, 0);\n    std::string r(p);\n    free(p);\n    return(r);\n  }\n};\n\n#include &lt;boost/mpl/apply.hpp&gt;\n#include &lt;iostream&gt;\n\nint main()\n{\n  std::cout &lt;&lt;\n    type_info2&lt;boost::mpl::apply&lt;METAFUNCION, int&gt;::type&gt;::name() &lt;&lt;\n    std::endl;\n  std::cout &lt;&lt;\n    type_info2&lt;boost::mpl::apply&lt;METAFUNCION, HELPER&lt;float, double&gt; &gt;::type&gt;::name() &lt;&lt;\n    std::endl;\n  std::cout &lt;&lt;\n    type_info2&lt;boost::mpl::apply&lt;METAFUNCION2, HELPER&lt;float, double&gt; &gt;::type&gt;::name() &lt;&lt;\n    std::endl;\n  return(0);\n}\n</code></pre>\n<p>The output:</p>\n<pre><code>int\ndouble\ndouble\n</code></pre>\n<p>That surprised me a bit as I expected:</p>\n<pre><code>int\nHELPER&lt;float, double&gt;\ndouble\n</code></pre>\n<p>Now, I know that code like above does not compile under Microsoft Visual C++ 2008 (I don't remeber the message but it was something along the lines that I cannot specialize apply struct inside METAFUNCTION2 struct).</p>\n<p>So my question is - is this g++ behaviour conformant with the standard? I have a strong feeling that there is something wrong here but I am not 100% sure.</p>\n<hr>\n<p>For the curious - I have the behaviuor as I expected when I redefine METAFUNCTION2 this way:</p>\n<pre><code>struct METAFUNCION2 : METAFUNCION\n{\n  template&lt;class T&gt;\n  struct apply : METAFUNCION::apply&lt;T&gt;\n  {\n  };\n  template&lt;class T1, class T2&gt;\n  struct apply&lt;HELPER&lt;T1, T2&gt; &gt; : METAFUNCION::apply&lt;T2&gt;\n  {\n  };\n};\n</code></pre>\n</hr>", "Tags": "<c++><templates><g++><metaprogramming>", "OwnerUserId": "25406", "AnswerCount": "2"}, "1413347": {"ParentId": "1413158", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>The following code is illegal:</p>\n<pre><code>struct METAFUNCION2 : METAFUNCION\n{\n  template&lt;class T1, class T2&gt;\n  struct apply&lt;HELPER&lt;T1, T2&gt; &gt; : METAFUNCION::apply&lt;T2&gt;\n  {\n  };\n};\n</code></pre>\n<p>According to C++ Standard 14.7.3/3:</p>\n<blockquote>\n<p id=\"so_1413158_1413347_0\">A declaration of a function template or class template being explicitly specialized shall be in scope at the\n  point of declaration of an explicit specialization.</p>\n</blockquote>\n<p><strong>EDIT:</strong> According to <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_closed.html#727\" rel=\"nofollow noreferrer\">Core Issue 727</a> this restriction does not apply to partial specializations of member templates.</p>\n", "OwnerUserId": "123111", "LastEditorUserId": "123111", "LastEditDate": "2009-09-12T08:31:44.773", "Id": "1413347", "Score": "2", "CreationDate": "2009-09-11T21:21:53.303", "LastActivityDate": "2009-09-12T08:31:44.773"}, "bq_ids": {"n4140": {"so_1413158_1413347_0": {"section_id": 265, "quality": 0.8461538461538461, "length": 11}}, "n3337": {"so_1413158_1413347_0": {"section_id": 256, "quality": 0.8461538461538461, "length": 11}}, "n4659": {"so_1413158_1413347_0": {"section_id": 272, "quality": 0.8461538461538461, "length": 11}}}});