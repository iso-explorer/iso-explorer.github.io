post_cb({"5460857": {"ParentId": "5460562", "CommentCount": "0", "Body": "<p>Because indexation into an array is actually defined in terms of an implicit conversion to a pointer, then pointer arithmetic.  So to support this, you'd have to also support pointers to references, and define what pointer arithmetic means on them.</p>\n", "OwnerUserId": "649665", "PostTypeId": "2", "Id": "5460857", "Score": "25", "CreationDate": "2011-03-28T14:55:59.780", "LastActivityDate": "2011-03-28T14:55:59.780"}, "5460977": {"ParentId": "5460562", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2011-03-28T15:06:58.560", "Score": "1", "LastEditorUserId": "418729", "LastEditDate": "2011-03-28T15:16:58.523", "Id": "5460977", "OwnerUserId": "418729", "Body": "<p>This is what i read at:</p>\n<p><strong>5.2.1 Subscripting [expr.sub]</strong></p>\n<blockquote>\n<p id=\"so_5460562_5460977_0\">1 A postfix expression followed by an\n  expression in square brackets is a\n  postfix expression. One of the\n  expressions shall have the type\n  \u201cpointer to T and the other shall have\n  enumeration or integral type. The\n  result is an lvalue of type \u201cT.\u201d The\n  type \u201cT\u201d shall be a completely-defined\n  object type.61) The expression E1[E2]\n  is identical (by definition) to\n  *((E1)+(E2)) [ Note: see 5.3 and 5.7 for details of * and + and 8.3.4 for\n  details of arrays. \u2014end note ]</p>\n</blockquote>\n<p>-C++ Draft.</p>\n<pre><code>int a = 10, b = 20;\nint &amp;c[] = {a, b};\n</code></pre>\n<p>So imagine <code>&amp;c[0]</code> would be <em>something</em> like <code>*&amp;(c+0)</code>, IMHO references are like aliases. Hence going by the notion of arrays it would try to dereference the value held by the reference which one would not want.</p>\n", "LastActivityDate": "2011-03-28T15:16:58.523"}, "5460597": {"ParentId": "5460562", "CommentCount": "0", "Body": "<p>Because references aren't objects. References were primarily introduced to support call by reference and return by reference without inserting <code>&amp;</code> at call-site. What you probably want is an array of pointers.</p>\n", "OwnerUserId": "252000", "PostTypeId": "2", "Id": "5460597", "Score": "5", "CreationDate": "2011-03-28T14:39:37.987", "LastActivityDate": "2011-03-28T14:39:37.987"}, "5460682": {"ParentId": "5460562", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2011-03-28T14:44:28.970", "Score": "5", "LastEditorUserId": "1621391", "LastEditDate": "2017-02-15T11:13:57.410", "Id": "5460682", "OwnerUserId": "452307", "Body": "<p>A reference cannot be reassigned, and has no size.</p>\n<p>If arrays of references were allowed they would therefore have to be treated in a special way then.</p>\n", "LastActivityDate": "2017-02-15T11:13:57.410"}, "5460562": {"CommentCount": "0", "AcceptedAnswerId": "5460857", "PostTypeId": "1", "LastEditorUserId": "509233", "CreationDate": "2011-03-28T14:36:52.840", "LastActivityDate": "2017-02-15T11:13:57.410", "LastEditDate": "2014-11-07T17:01:46.077", "ViewCount": "13364", "FavoriteCount": "8", "Title": "Why it is impossible to create an array of references in c++?", "Id": "5460562", "Score": "26", "Body": "<p>C++ Standard 8.3.2/4 says:</p>\n<blockquote>\n<p id=\"so_5460562_5460562_0\">There shall be no references to\n  references, no arrays of references,\n  and no pointers to references.</p>\n</blockquote>\n<p>But I can't understand why this restriction is added to c++. In my opinion the code bellow can easily be compiled and work? What is the real cause of this restriction?</p>\n<pre><code>int a = 10, b = 20;\nint &amp;c[] = {a, b};\n</code></pre>\n", "Tags": "<c++><arrays><reference>", "OwnerUserId": "509233", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_5460562_5460562_0": {"section_id": 3222, "quality": 1.0, "length": 7}, "so_5460562_5460977_0": {"section_id": 5986, "quality": 0.7804878048780488, "length": 32}}, "n3337": {"so_5460562_5460562_0": {"section_id": 3096, "quality": 1.0, "length": 7}, "so_5460562_5460977_0": {"section_id": 5754, "quality": 0.8048780487804879, "length": 33}}, "n4659": {"so_5460562_5460562_0": {"section_id": 3979, "quality": 1.0, "length": 7}, "so_5460562_5460977_0": {"section_id": 7486, "quality": 0.7317073170731707, "length": 30}}}});