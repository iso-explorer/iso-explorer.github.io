post_cb({"16782131": {"ParentId": "16782103", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>Yes. <code>bar.a</code> and <code>bar.b</code> are set to true, but <code>bar.c</code> is undefined.  However, certain compiler will set it to false.</p>\n<p>See a live example here: <a href=\"http://ideone.com/YFxksN\">struct demo</a></p>\n<p>According to C++ standard Section 8.5.12:</p>\n<blockquote>\n<p id=\"so_16782103_16782131_0\">if no initialization is performed, an\n  object with automatic or dynamic storage duration has indeterminate value</p>\n</blockquote>\n<p>For primitive built-in data types (<strong>bool</strong>, char, wchar_t, short, int, long, float, double, long double), only <strong>global</strong> variables (all static storage variables) get default value of zero if they are not explicitly initialized.</p>\n<p>If you don't really want undefined <code>bar.c</code> to start with, you should also initialize it like you did for <code>bar.a</code> and <code>bar.b</code>.</p>\n", "OwnerUserId": "1760345", "LastEditorUserId": "1760345", "LastEditDate": "2013-05-28T11:06:36.153", "Id": "16782131", "Score": "22", "CreationDate": "2013-05-28T00:17:12.043", "LastActivityDate": "2013-05-28T11:06:36.153"}, "16782103": {"CommentCount": "5", "AcceptedAnswerId": "16782131", "CreationDate": "2013-05-28T00:14:33.523", "LastActivityDate": "2013-09-21T21:11:27.953", "PostTypeId": "1", "ViewCount": "74207", "FavoriteCount": "5", "Title": "Initializing default values in a struct", "Id": "16782103", "Score": "32", "Body": "<p>If I needed to initialize only a few select values of a C++ struct, would this be correct:</p>\n<pre><code>struct foo {\n    foo() : a(true), b(true) {}\n    bool a;\n    bool b;\n    bool c;\n } bar;\n</code></pre>\n<p>Am I correct to assume I would end up with one <code>struct</code> item called <code>bar</code> with elements <code>bar.a = true</code>, <code>bar.b = true</code> and an undefined <code>bar.c</code>?</p>\n", "Tags": "<c++>", "OwnerUserId": "2366109", "AnswerCount": "3"}, "16782143": {"ParentId": "16782103", "CommentCount": "4", "Body": "<p>You can do it by using a constructor, like this:    </p>\n<pre><code>struct Date\n{\nint day;\nint month;\nint year;\n\nDate()\n{\n    day=0;\n    month=0;\n    year=0;\n}\n};\n</code></pre>\n<p>or like this:</p>\n<pre><code>struct Date\n{\nint day;\nint month;\nint year;\n\nDate():day(0),\n       month(0),\n       year(0){}\n};\n</code></pre>\n<p>In your case bar.c is undefined,and its value depends on the compiler (while a and b were set to true).</p>\n", "OwnerUserId": "1643483", "PostTypeId": "2", "Id": "16782143", "Score": "5", "CreationDate": "2013-05-28T00:19:38.880", "LastActivityDate": "2013-05-28T00:19:38.880"}, "bq_ids": {"n4140": {"so_16782103_16782131_0": {"section_id": 435, "quality": 1.0, "length": 9}}, "n3337": {"so_16782103_16782131_0": {"section_id": 3161, "quality": 1.0, "length": 9}}, "n4659": {"so_16782103_16782131_0": {"section_id": 454, "quality": 1.0, "length": 9}}}, "16783513": {"ParentId": "16782103", "PostTypeId": "2", "CommentCount": "10", "Body": "<p>You don't even need to define a constructor</p>\n<pre><code>struct foo {\n    bool a = true;\n    bool b = true;\n    bool c;\n } bar;\n</code></pre>\n<p>To clarify: these are called brace-or-equal-initializers (because you may also use brace initialization instead of equal sign). This is not only for aggregates: you can use this in normal class definitions. This was added in C++11.</p>\n", "OwnerUserId": "1899162", "LastEditorUserId": "1899162", "LastEditDate": "2013-09-21T21:11:27.953", "Id": "16783513", "Score": "124", "CreationDate": "2013-05-28T03:39:15.950", "LastActivityDate": "2013-09-21T21:11:27.953"}});