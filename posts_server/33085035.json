post_cb({"bq_ids": {"n4140": {"so_33085035_33085226_0": {"length": 26, "quality": 0.9629629629629629, "section_id": 5348}}, "n3337": {"so_33085035_33085226_0": {"length": 26, "quality": 0.9629629629629629, "section_id": 5145}}, "n4659": {"so_33085035_33085226_0": {"length": 25, "quality": 0.9259259259259259, "section_id": 6773}}}, "33085226": {"Id": "33085226", "PostTypeId": "2", "Body": "<p>The reason for this is there is no way in C++ to express a floating point value in a different base other than base 10.  From [lex.fcon] 2.13.4(1)</p>\n<blockquote>\n<p id=\"so_33085035_33085226_0\">A floating literal consists of an integer part, a decimal point, a fraction part, an e or E, an optionally signed integer exponent, and an optional type suffix. The integer and fraction parts both consist of a sequence of <strong>decimal (base ten) digits</strong>. [...]</p>\n</blockquote>\n<p><sup>emphasis mine</sup></p>\n<p>If floating point numbers can only be expressed in base 10 then there is no reason to have to specify the base.  integer types on the other hand can be expressed in different basses to <code>strtol</code> deals with that.</p>\n", "LastActivityDate": "2015-10-12T15:49:03.033", "CommentCount": "2", "CreationDate": "2015-10-12T15:49:03.033", "ParentId": "33085035", "Score": "2", "OwnerUserId": "4342498"}, "33085035": {"ViewCount": "72", "Body": "<p>I've been working with cin input recently, and I discovered that strtol needs a radix: <code>long int strtol (const char* str, char** endptr, int base);</code>, but strtod does not: <code>double strtod (const char* str, char** endptr);</code>. Obviously, double numbers can be represented in other bases, so why this dichotomy?</p>\n", "AcceptedAnswerId": "33085216", "Title": "Why does strol need a radix when strtod does not?", "CreationDate": "2015-10-12T15:39:49.147", "Id": "33085035", "CommentCount": "4", "PostTypeId": "1", "LastActivityDate": "2015-10-12T15:55:02.853", "Score": "0", "OwnerUserId": "1486523", "Tags": "<c++><base><radix><strtol><strtod>", "AnswerCount": "2"}, "33085216": {"Id": "33085216", "PostTypeId": "2", "Body": "<p><code>strtol</code> is usually used with <code>base</code> set to <code>0</code> or <code>10</code>. <code>base==0</code> causes it to treat the string as a C integer constant. It uses a leading <code>0</code> for octal, or a leading <code>0x</code> or <code>0X</code> for hexadecimal; otherwise, it's assumed to be decimal. With <code>base==10</code>, it doesn't recognize anything other than decimal (which is more user-friendly; most uses won't expect an input of <code>010</code> to be interpreted as <code>8</code>).</p>\n<p>Floating-point numbers can be represented in bases other than decimal, but C++ only supports decimal. (C added support for hexadecimal floating-point in the 1999 ISO C standard, but C++ has not adopted this feature.)</p>\n<p><code>strtod</code> <em>could</em> have had an option to interpret, for example, <code>1.4</code> as a base-8 constant, equal to <code>1.5</code> decimal -- but there just isn't enough demand to justify it.</p>\n<p>Integer input might usefully be written in bases 2, 8, 10, and 16, and <code>strtol</code> permits other bases just because it's easy to do so. Floating-point input is rarely anything other than decimal (and the syntax of a C hexadecimal floating-point constant is unambiguous so there's no need to specify it).</p>\n", "LastEditorUserId": "827263", "LastActivityDate": "2015-10-12T15:55:02.853", "Score": "2", "CreationDate": "2015-10-12T15:48:45.813", "ParentId": "33085035", "CommentCount": "3", "OwnerUserId": "827263", "LastEditDate": "2015-10-12T15:55:02.853"}});