post_cb({"bq_ids": {"n4140": {"so_17362673_17362673_0": {"length": 30, "quality": 0.6122448979591837, "section_id": 382}}, "n3337": {"so_17362673_17362673_0": {"length": 30, "quality": 0.6122448979591837, "section_id": 373}}}, "17362827": {"PostTypeId": "2", "Body": "<ol>\n<li><p>It means until the closing brace, i.e. <code>}</code>.</p></li>\n<li><p>You invoked UB, you have a dangling reference.</p></li>\n</ol>\n<p>Try the following modification of your code and see what it prints. It probably will print <code>6</code> because that is what was last on the stack. Or try passing a <code>std::string</code> instead, you might get a crash.</p>\n<pre><code>int main (void)\n{\n    const int&amp; numberRef = foo(5);  \n    foo(6);\n    std::cout &lt;&lt; numberRef;\n    return 0;\n}\n</code></pre>\n", "LastActivityDate": "2013-06-28T10:40:26.310", "Id": "17362827", "CommentCount": "0", "CreationDate": "2013-06-28T10:40:26.310", "ParentId": "17362673", "Score": "1", "OwnerUserId": "906773"}, "17362757": {"PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_17362673_17362757_0\">What does until the function exits mean? Does it mean untill it finished executing?</p>\n</blockquote>\n<p>Yes.</p>\n<blockquote>\n<p id=\"so_17362673_17362757_1\">Why do I get a 5 output. Does a temporary object still exist on line #2?</p>\n</blockquote>\n<p>Dereferencing a reference which is not bound to a living object is <strong>undefined behavior</strong>, so you may get <code>5</code> as well as <code>42</code> as well as anything else (including a crash). You simply cannot have any expectation on a program that has undefined behavior.</p>\n<blockquote>\n<p id=\"so_17362673_17362757_2\">How can I interpret the standard quote to figure out how this example works?</p>\n</blockquote>\n<p>Pretty much like you did already.The temporary gets bound to the function parameter <code>fooRef</code>, which gets destroyed when returning from the function. Since that temporary is bound to the returned value, that object ceases to exist when the function returns. Later on, you are dereferencing a dangling reference, which gives you UB.</p>\n", "LastActivityDate": "2013-06-28T10:36:46.823", "Id": "17362757", "CommentCount": "0", "CreationDate": "2013-06-28T10:36:46.823", "ParentId": "17362673", "Score": "3", "OwnerUserId": "1932150"}, "17362673": {"ViewCount": "2673", "Body": "<p>The 12.2.5 section of standard says:</p>\n<blockquote>\n<p id=\"so_17362673_17362673_0\">A temporary bound to a reference parameter in a function call (5.2.2)\n  persists until the completion of the full expression containing the\n  call. A temporary bound to the returned value in a function return\n  statement (6.6.3) persists until the function exits. In all these\n  cases, the temporaries created during the evaluation of the expression\n  initializing the reference, except the temporary to which the\n  reference is bound, are destroyed at the end of the full-expression in\n  which they are created and in the reverse order of the completion of\n  their construction.</p>\n</blockquote>\n<p>The code I try to understand is:</p>\n<pre><code>#include &lt;iostream&gt;\n\nconst int&amp; foo(const int&amp; fooRef)\n{\n    return fooRef;\n}                                        // #0\n\nint main (void)\n{\n    const int&amp; numberRef = foo(5);     // #1\n    std::cout &lt;&lt; numberRef;            // #2\n    return 0;\n}\n</code></pre>\n<p>On line <code>#1</code> a temporary object is created and bound to <code>fooRef</code> parameter of <code>foo</code>. <code>fooRef</code> is destroyed on line <code>#0</code>. So I thought the temporary should be destroyed here since lifetime-extension is not transitive.</p>\n<p>Questions:</p>\n<ol>\n<li><p>What does <code>until the function exits</code> mean? Does it mean <code>untill it finished executing</code>?</p></li>\n<li><p>Why do I get a <code>5</code> output. Does a temporary object still exist on line <code>#2</code>?</p></li>\n<li><p>How can I interpret the standard quote to figure out how this example works?</p></li>\n</ol>\n<p>Step-by-step atomic walk-through with references to the standard would be greatly appreciated. Thank you!</p>\n<p>P. S. An accepted answer <a href=\"https://stackoverflow.com/questions/17236007/corrupted-const-reference-to-a-temporary-object-life-time\">here</a> also told the the code is <code>broken</code> and I do not get, why I get such output of program.</p>\n", "AcceptedAnswerId": "17362757", "Title": "Temporary lifetime extension", "CreationDate": "2013-06-28T10:31:19.357", "Id": "17362673", "CommentCount": "0", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2017-05-23T10:29:27.397", "LastEditorUserId": "-1", "LastActivityDate": "2013-06-28T10:40:26.310", "Score": "6", "OwnerUserId": "1574294", "Tags": "<c++><reference><lifetime><object-reference><temporary-objects>", "AnswerCount": "2"}});