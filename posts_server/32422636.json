post_cb({"32422636": {"ViewCount": "185", "Body": "<p>After my discovery of incosistency between MSVC and GCC (probably clang too) in compilation and linking of the same code, I've become curious should this program actually compile and link and thus it's bug in MSVC (which reports a linker error) or should I write it differently. The program consist of 3 files:</p>\n<p>C.h</p>\n<pre><code>template &lt;typename T&gt;\nstruct A\n{\n    void func() {};\n};\n\ntemplate &lt;&gt;\nvoid A&lt;int&gt;::func ();\n</code></pre>\n<p>A.cpp:</p>\n<pre><code>#include \"C.h\"\nint main()\n{\n    A&lt;int&gt; x;\n    x.func();\n}\n</code></pre>\n<p>B.cpp:</p>\n<pre><code>#include \"C.h\"\ntemplate &lt;&gt;\nvoid A&lt;int&gt;::func()\n{\n}\n</code></pre>\n<p>The resulting linker error from MSVC is:</p>\n<blockquote>\n<p id=\"so_32422636_32422636_0\">A.obj :  error LNK2019: unresolved external symbol \"public: void __thiscall A::func(void)\"</p>\n</blockquote>\n<p>So basically it decides not to create symbol out of definition placed in <code>B.cpp</code>. The thing which makes me strongly suspect it as a bug is that moving unspecialized definition of <code>func</code> out of struct definition and even placing it above specialization declaration makes program linnking successful, but I would like to be sure. </p>\n<p>So my question is - should this program be compiled and linked without errors by a conformant compiler/linker?</p>\n", "Title": "Should the following program compile according to standard?", "CreationDate": "2015-09-06T10:37:36.510", "LastActivityDate": "2015-09-06T17:16:52.473", "CommentCount": "9", "FavoriteCount": "3", "PostTypeId": "1", "Id": "32422636", "Score": "10", "OwnerUserId": "1269661", "Tags": "<c++><visual-c++><template-specialization><class-template>", "AnswerCount": "2"}, "32426189": {"Id": "32426189", "PostTypeId": "2", "Body": "<p>Unnamed namespaces have internal linkage. Since the template specialization is within an unnamed namespace it also has internal linkage.</p>\n<p>To solve the problem, put the template in a named namespace or specify the specialization as 'extern'.</p>\n", "LastActivityDate": "2015-09-06T17:16:52.473", "CommentCount": "1", "CreationDate": "2015-09-06T17:16:52.473", "ParentId": "32422636", "Score": "-2", "OwnerUserId": "5306491"}, "bq_ids": {"n4140": {"so_32422636_32423546_0": {"length": 49, "quality": 0.875, "section_id": 216}}, "n3337": {"so_32422636_32423546_0": {"length": 49, "quality": 0.875, "section_id": 210}}, "n4659": {"so_32422636_32423546_0": {"length": 49, "quality": 0.875, "section_id": 224}}}, "32423546": {"Id": "32423546", "PostTypeId": "2", "Body": "<p>From the standard :</p>\n<blockquote>\n<p id=\"so_32422636_32423546_0\">\u00a9 ISO/IEC N4527\n  14.6.4.1 Point of instantiation [temp.point] 1 For a function template specialization, a member function template specialization, or a\n  specialization for a member function or static data member of a class\n  template, if the specialization is implicitly instantiated because it\n  is referenced from within another template specialization and the\n  context from which it is referenced depends on a template parameter,\n  the point of instantiation of the specialization is the point of\n  instantiation of the enclosing specialization. <strong>Otherwise, the point\n  of instantiation for such a specialization immediately follows the\n  namespace scope declaration or definition that refers to the\n  specialization</strong>.</p>\n</blockquote>\n<p>In this case I <strong>think</strong> this means at C.h where the \"scope declaration\" occurs.  If this is the case then your code should link with a standard compliant tool chain.  I could be misinterpreting this... </p>\n", "LastEditorUserId": "2692339", "LastActivityDate": "2015-09-06T13:13:22.293", "Score": "1", "CreationDate": "2015-09-06T12:25:49.630", "ParentId": "32422636", "CommentCount": "0", "OwnerUserId": "4834446", "LastEditDate": "2015-09-06T13:13:22.293"}});