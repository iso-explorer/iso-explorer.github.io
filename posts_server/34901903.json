post_cb({"34902455": {"Id": "34902455", "PostTypeId": "2", "Body": "<p>From the Standard (2.14.7) [lex.nullptr]:</p>\n<blockquote>\n<p id=\"so_34901903_34902455_0\">The pointer literal is the keyword nullptr. It is a prvalue of type <code>std::nullptr_t</code>. [ <strong>Note: <code>std::nullptr_t</code>\n  is a distinct type that is neither a pointer type nor a pointer to member type</strong> ... ]</p>\n</blockquote>\n<p><code>std::nullptr_t</code> can be implicitly converted to any type of null pointer as per 4.10.1 [conv.ptr]. Regardless of the type of null pointer, the fact remains that it points at <em>nothing</em>.</p>\n<p>Thus, it doesn't meet the requirement that <em>s points to an array of at least n elements of charT</em>.</p>\n<p>It seems to be undefined behavior.</p>\n<p>Interestingly, according to <a href=\"https://stackoverflow.com/questions/10771864/assign-a-nullptr-to-a-stdstring-is-safe/10771938#10771938\">this answer</a>, the C++11 Standard clearly stated that <code>s</code> must not be a null pointer in the <code>basic_string</code> constructor, but this wording has since been removed.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2016-02-27T08:38:19.237", "Score": "5", "CreationDate": "2016-01-20T14:16:28.287", "ParentId": "34901903", "CommentCount": "2", "LastEditDate": "2017-05-23T11:58:55.937", "OwnerUserId": "2883245"}, "34901903": {"ViewCount": "1246", "Body": "<p>I have a function which returns a pointer and a length, and I want to call <code>std::string::assign(pointer, length)</code>. Do I have to make a special case (calling <code>clear</code>) when length is zero and the pointer may be nullptr?</p>\n<p>The C++ standard says:</p>\n<pre><code>21.4.6.3 basic_string::assign\n\nbasic_string&amp; assign(const charT* s, size_type n);\nRequires: s points to an array of at least n elements of charT.\n</code></pre>\n<p>So what if <code>n</code> is zero? What is an array of zero characters and how does one point to it?\nIs it valid to call</p>\n<pre><code>s.assign(nullptr, 0);\n</code></pre>\n<p>or is it undefined behavior?</p>\n<p>The implementation of libstdc++ appears not to dereference the pointer <code>s</code> when the size <code>n</code> is zero, but that's hardly a guarantee.</p>\n", "AcceptedAnswerId": "34902411", "Title": "Is it valid to pass nullptr to std::string::assign?", "CreationDate": "2016-01-20T13:51:25.197", "Id": "34901903", "CommentCount": "1", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2016-01-20T14:26:01.630", "LastEditorUserId": "2883245", "LastActivityDate": "2016-07-15T10:34:43.630", "Score": "21", "OwnerUserId": "2064196", "Tags": "<c++><language-lawyer><c++-standard-library>", "AnswerCount": "4"}, "34902392": {"Id": "34902392", "PostTypeId": "2", "Body": "<p>Well as you point out, the standard says \"<code>s</code> points to an array...\". A null pointer does not point to an array of any number of elements. Not even 0 elements. Also, note that <code>s</code> points to \"an array of <em>at least</em> <code>n</code> elements...\". So it's clear that if <code>n</code> is zero, you can still pass a legitimate pointer to an array.</p>\n<p>Overall, <code>std::string</code>'s API is not well-guarded against null pointers to <code>charT</code>. So you should always make sure that pointers you hand off to it are non-null.</p>\n", "LastActivityDate": "2016-01-20T14:14:08.170", "CommentCount": "0", "CreationDate": "2016-01-20T14:14:08.170", "ParentId": "34901903", "Score": "12", "OwnerUserId": "734069"}, "bq_ids": {"n4140": {"so_34901903_34902409_1": {"length": 5, "quality": 0.8333333333333334, "section_id": 1573}, "so_34901903_34902455_0": {"length": 17, "quality": 0.8947368421052632, "section_id": 5366}}, "n3337": {"so_34901903_34902409_1": {"length": 5, "quality": 0.8333333333333334, "section_id": 1637}, "so_34901903_34902455_0": {"length": 17, "quality": 0.8947368421052632, "section_id": 5162}}, "n4659": {"so_34901903_34902409_1": {"length": 5, "quality": 0.8333333333333334, "section_id": 1726}, "so_34901903_34902455_0": {"length": 17, "quality": 0.8947368421052632, "section_id": 6791}}}, "34902409": {"Id": "34902409", "PostTypeId": "2", "Body": "<p>I am not sure why an implementation would dereference any pointer to an array whose length is provided as zero.</p>\n<p>That said, I would err to the side of caution. You could argue that you are not meeting the standards requirement:</p>\n<blockquote>\n<p id=\"so_34901903_34902409_0\"><strong>21.4.6.3 basic_string::assign</strong></p>\n<p id=\"so_34901903_34902409_1\"><strong>8</strong> Requires: s points to an array of at least n elements of charT</p>\n</blockquote>\n<p>because <code>nullptr</code> is not pointing to an <em>array</em>.</p>\n<p>So technically the behaviour is undefined.</p>\n", "LastActivityDate": "2016-01-20T14:14:56.593", "CommentCount": "0", "CreationDate": "2016-01-20T14:14:56.593", "ParentId": "34901903", "Score": "9", "OwnerUserId": "3807729"}, "34902411": {"Id": "34902411", "PostTypeId": "2", "Body": "<p>Pedantically, a <code>nullptr</code> does not meet the requirements of pointing to an array of size <code>&gt;=0</code>, and therefore the standard does not guarantee the behaviour (it's UB).</p>\n<p>On the other hand, the implementation wouldn't be allowed to dereference the pointer if <code>n</code> is zero, because the pointer could be to an array of size zero, and dereferencing such a pointer would have undefined behaviour. Besides, there wouldn't be any need to do so, because nothing is copied.</p>\n<p>The above reasoning does not mean that it is OK to ignore the UB. But, if there is no reason to disallow <code>s.assign(nullptr, 0)</code> then it could be preferable to change the wording of the standard to \"If n is greater than zero, then s points to ...\". I don't know of any good reason to disallow it, but neither can I promise that a good reason doesn't exist.</p>\n<p>Note that adding a check is hardly complicated:</p>\n<pre><code>s.assign(ptr ? ptr : \"\", n);\n</code></pre>\n<blockquote>\n<p id=\"so_34901903_34902411_0\">What is an array of zero characters</p>\n</blockquote>\n<p>This is: <code>new char[0]</code>. Arrays of automatic or static storage may not have a zero size.</p>\n", "LastEditorUserId": "2079303", "LastActivityDate": "2016-07-15T10:34:43.630", "Score": "19", "CreationDate": "2016-01-20T14:14:59.947", "ParentId": "34901903", "CommentCount": "14", "LastEditDate": "2016-07-15T10:34:43.630", "OwnerUserId": "2079303"}});