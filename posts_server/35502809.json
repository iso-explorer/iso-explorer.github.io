post_cb({"35502911": {"ParentId": "35502809", "PostTypeId": "2", "CommentCount": "4", "Body": "<p><em>Probably</em> (see below) it's undefined behavior; in practice, I've seen plain crashes (for out of container boundary access) even just for incorrect (=not inducing a total ordering) comparators, and <code>&lt;</code> with indexes changed while sorting surely fails to induce a total ordering</p>\n<p>Interestingly, the standard doesn't explicitly mention undefined behavior regarding this issue; C++11 \u00a75.4 \u00b63 just states that</p>\n<blockquote>\n<p id=\"so_35502809_35502911_0\">For algorithms other than those described in 25.4.3 to work correctly, <code>comp</code> has to induce a strict weak ordering on the values.</p>\n</blockquote>\n<p>and I fail to see a formal definition of \"work correctly\" looking around there; even just the word \"undefined\" isn't ever uttered in the whole chapter 25 (which describes <code>&lt;algorithm&gt;</code>).</p>\n", "OwnerUserId": "214671", "LastEditorUserId": "214671", "LastEditDate": "2016-02-19T10:32:58.110", "Id": "35502911", "Score": "3", "CreationDate": "2016-02-19T10:25:03.863", "LastActivityDate": "2016-02-19T10:32:58.110"}, "35502964": {"ParentId": "35502809", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>std::sort requires a sorter which satisfies the strict weak ordering rule.\n(Explained in <a href=\"https://stackoverflow.com/questions/979759/operator-and-strict-weak-ordering/981299#981299\">this answer</a>)</p>\n<p>If you change the contents simultaneously, this ordering may not maintain and thus results in undefined behaviour. (Can cause infinite loop in sorter, a crash, indices not being correctly ordered afterwards(as you mentioned), indices correctly sorted, 2 moons or something else)</p>\n", "OwnerUserId": "2659313", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T11:45:01.320", "Id": "35502964", "Score": "2", "CreationDate": "2016-02-19T10:27:18.300", "LastActivityDate": "2016-02-19T10:32:19.657"}, "bq_ids": {"n4140": {"so_35502809_35502911_0": {"section_id": 1395, "quality": 0.8666666666666667, "length": 13}}, "n3337": {"so_35502809_35502911_0": {"section_id": 1389, "quality": 0.8666666666666667, "length": 13}}, "n4659": {"so_35502809_35502911_0": {"section_id": 1513, "quality": 0.7333333333333333, "length": 11}}}, "35502809": {"CommentCount": "3", "ViewCount": "206", "CreationDate": "2016-02-19T10:19:38.630", "LastActivityDate": "2016-02-19T11:36:06.610", "Title": "Is it undefined behaviour to change sort order while sorting?", "AcceptedAnswerId": "35502911", "PostTypeId": "1", "Id": "35502809", "Score": "3", "Body": "<p>Imagine the following scenario:</p>\n<pre><code>std::atomic&lt;int&gt;  values[10];\nstd::size_t      indices[10];\n\nvoid sort() {\n    std::iota(indices, indices+10, 0);\n\n    std::sort(indices, indices+10,\n        [&amp;](size_t lhs, size_t rhs) { return values[lhs] &lt; values[rhs]; });\n}\n</code></pre>\n<p>While running the <code>sort()</code>, another thread is changing <code>values</code>. Will this merely result in indices not being correctly ordered afterwards, or is it actually undefined behaviour?</p>\n", "Tags": "<c++><multithreading><c++11>", "OwnerUserId": "92560", "AnswerCount": "2"}});