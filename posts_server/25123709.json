post_cb({"25123809": {"ParentId": "25123709", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Because you declared a <strong>conversion function</strong> (template). A conversion function has no return type, and because <em>it is</em> a conversion function, it must return a <code>T</code>.</p>\n<hr>\n<p>C++ standard section \u00a7 12.3.2 [conversion function] :</p>\n<blockquote>\n<p id=\"so_25123709_25123809_0\">A member function of a class X having no parameters with a name of the\n  form</p>\n<ul>\n<li>conversion-function-id:\n  <ul>\n<li>operator conversion-type-id </li>\n</ul></li>\n<li>conversion-type-id:\n  <ul>\n<li>type-specifier-seq conversion-declarator opt </li>\n</ul></li>\n<li>conversion-declarator:\n  <ul>\n<li>ptr-operator conversion-declarator opt</li>\n</ul></li>\n</ul>\n<p id=\"so_25123709_25123809_1\">specifies a conversion from X to the type specified by the\n  conversion-type-id. Such functions are called conversion functions. <strong>No return type can be specified</strong>.</p>\n</blockquote>\n<hr>\n<p><strong>Note:</strong></p>\n<p>If you try to explicit a return type, e.g. :</p>\n<pre><code>class Foo {\npublic:\n    template&lt;typename T&gt;\n    int operator T() { return T(); }\n};\n</code></pre>\n<p>Then you'll get a compiler error (gcc gives \"<em>return type specified for 'operator T'</em> \")</p>\n</hr></hr>", "OwnerUserId": "3510483", "LastEditorUserId": "3510483", "LastEditDate": "2014-08-04T21:34:07.540", "Id": "25123809", "Score": "5", "CreationDate": "2014-08-04T16:58:44.927", "LastActivityDate": "2014-08-04T21:34:07.540"}, "25123709": {"CommentCount": "0", "ViewCount": "807", "PostTypeId": "1", "LastEditorUserId": "2459583", "CreationDate": "2014-08-04T16:52:40.360", "LastActivityDate": "2014-08-05T16:48:42.253", "Title": "Why is a templated user-defined conversion operator able to determine its return type?", "LastEditDate": "2014-08-05T16:48:42.253", "Id": "25123709", "Score": "5", "Body": "<p>As stated in the title, why is this possible? Normally templated functions are unable to determine their return type if it's not among the input arguments and is not specifically stated.\nFor example:</p>\n<pre><code>class Foo {\npublic:\n    template&lt;typename T&gt;\n    operator T() { return T(); }\n};\n\nint main() {\n    Foo instance;\n    int someInteger = instance;\n    return 0;\n}\n</code></pre>\n<p>Compiles and runs without any issues even though the return type is not explicitly stated anywhere. Is the user-defined conversion operator somehow special with regards to template rules?</p>\n<p>I realize that it is syntactically not a return type. Nonetheless, it semantically is. After all, it is the type of the object that gets returned by the operator.</p>\n<p>Edit:\nThe question should probably be \"Why can't templated function determine their return type?\"\nThis is invalid:</p>\n<pre><code>template &lt;class T&gt;\nT sizeGetterFun()\n{\n    return std::numeric_limits&lt;T&gt;::max();\n}\n\nint main() {\n    int maxInt = sizeGetterFun();\n    double maxDouble = sizeGetterFun();    \n    return 0;\n}\n</code></pre>\n<p>This is valid and achieves the same thing as requested from the invalid code.</p>\n<pre><code>class Foo {\npublic:\n    template&lt;typename T&gt;\n    operator T() \n    { \n        return std::numeric_limits&lt;T&gt;::max();\n    }\n};\n\nFoo sizeGetterFun()\n{\n    return Foo();\n}\n\nint main() {\n    int maxInt = sizeGetterFun();\n    double maxDouble = sizeGetterFun();    \n    return 0;\n}\n</code></pre>\n<p>Why can't the compiler deduce the return type automatically without the need for a dummy class that implements the conversion operator? Are there any problems one can come across when using the second(working) example? </p>\n", "Tags": "<c++><templates><type-conversion>", "OwnerUserId": "2459583", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_25123709_25123809_0": {"section_id": 391, "quality": 1.0, "length": 7}, "so_25123709_25123809_1": {"section_id": 391, "quality": 1.0, "length": 14}}, "n3337": {"so_25123709_25123809_0": {"section_id": 382, "quality": 1.0, "length": 7}, "so_25123709_25123809_1": {"section_id": 382, "quality": 1.0, "length": 14}}, "n4659": {"so_25123709_25123809_0": {"section_id": 408, "quality": 1.0, "length": 7}, "so_25123709_25123809_1": {"section_id": 408, "quality": 0.7857142857142857, "length": 11}}}});