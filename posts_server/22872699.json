post_cb({"bq_ids": {"n4140": {"so_22872699_22872747_1": {"section_id": 404, "quality": 0.9714285714285714, "length": 34}}, "n3337": {"so_22872699_22872747_1": {"section_id": 395, "quality": 0.9714285714285714, "length": 34}}, "n4659": {"so_22872699_22872747_1": {"section_id": 422, "quality": 0.9714285714285714, "length": 34}}}, "22872699": {"CommentCount": "0", "ViewCount": "64", "CreationDate": "2014-04-04T20:46:14.923", "LastActivityDate": "2014-04-04T20:49:24.290", "Title": "Do I have to do anything in a destructor to free non-pointer member variables?", "AcceptedAnswerId": "22872747", "PostTypeId": "1", "Id": "22872699", "Score": "2", "Body": "<p>If I have something like</p>\n<pre><code>class Foo { ... }\n\nclass UsesFoo {\nprivate:\n    Foo foo;\npublic:\n    UsesFoo() : foo(1, 2, 3) { }\n}\n</code></pre>\n<p>Then as I understand it, when I construct a <code>UsesFoo</code> (be it <code>UsesFoo *myMan = new UsesFoo();</code> or <code>UsesFoo myMan;</code>), it creates a <code>Foo</code> object as if by calling <code>Foo(1, 2, 3)</code>. When <code>UsesFoo</code> gets destroyed (be it by <code>delete myMan;</code> or by going out of scope), the <code>Foo</code> inside will also be destructed.</p>\n<p>If I provide the following destructor, will the <code>Foo</code> still be destructed?</p>\n<pre><code>~UsesFoo() { }\n</code></pre>\n<p>If not, then what do I have to do to destruct <code>Foo</code>? In other words, what are the semantics of how non-pointer member variables that are instances of classes are destructed?</p>\n", "Tags": "<c++><class><instance><destructor><member>", "OwnerUserId": "15055", "AnswerCount": "1"}, "22872747": {"ParentId": "22872699", "CommentCount": "4", "Body": "<blockquote>\n<p id=\"so_22872699_22872747_0\">If I provide the following destructor, will the <code>Foo</code> still be destructed?</p>\n</blockquote>\n<p><strong>Yes</strong>. Quoth the standard,</p>\n<blockquote>\n<p id=\"so_22872699_22872747_1\">After executing the body of the destructor and destroying any automatic objects allocated within the body, a\n  destructor for class <code>X</code> calls the destructors for <code>X</code>\u2019s direct non-variant non-static data members, the destructors\n  for <code>X</code>\u2019s direct base classes and, if <code>X</code> is the type of the most derived class (12.6.2), its destructor calls the\n  destructors for <code>X</code>\u2019s virtual base classes.</p>\n</blockquote>\n<p>(C++11, \u00a712.4/8)</p>\n", "OwnerUserId": "481267", "PostTypeId": "2", "Id": "22872747", "Score": "5", "CreationDate": "2014-04-04T20:49:24.290", "LastActivityDate": "2014-04-04T20:49:24.290"}});