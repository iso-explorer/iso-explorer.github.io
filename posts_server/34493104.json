post_cb({"34494188": {"CommentCount": "1", "Body": "<p>Exposition-only members are used to simplify a behavioural specification. Once the exposition-only member has been introduced and given a name, the semantics of the class can be specified in terms of it, but it is understood that what's being specified are <em>only</em> the semantics of the class, and the member itself is not part of that. Any conforming implementation only has to behave the same as way as described in the specification that refers to the member.</p>\n<p>For example, suppose I want to specify a pointer wrapper class that exposes the wrappee. I could say, \"Class <code>Foo</code> holds a reference to an object of type <code>T</code> which is given its constructor, and <code>Foo::get</code> exposes that object.\" That's very verbose and imprecise. Alternatively, I could specify this with an exposition-only member:</p>\n<blockquote>\n<p id=\"so_34493104_34494188_0\">Class <code>Foo</code> holds a reference to an object of type <code>T</code>.</p>\n<pre><code>class Foo {\n  const T* ptr;   // exposition-only\n\npublic:\n  // Constructor                                 // \\\n  Foo(const T&amp; t) : ptr(std::addressof(t)) {}    //  |\n                                                 //   &gt;  real specification\n  // Accessor                                    //  |\n  const T&amp; get() const { return *ptr; }          // /\n};\n</code></pre>\n</blockquote>\n<p>The specification of the individual member functions becomes much easier when I'm allowed to refer to some particular implementation, but it is understood that you can implement this in any way you like (e.g. with base classes or private nested types), and that the member <code>Foo::ptr</code> is <em>not</em> part of the specification. But having it allows me to specify the sematnics of the member functions in code rather than in words.</p>\n", "CreationDate": "2015-12-28T13:12:55.560", "ParentId": "34493104", "Id": "34494188", "LastActivityDate": "2015-12-28T13:12:55.560", "PostTypeId": "2", "Score": "3", "OwnerUserId": "596781"}, "34493177": {"CommentCount": "0", "Body": "<p>it means that they're not required by the standard, but are just illustrating what the class's internals <em>might</em> look like, to give an idea of what kind of implementation the standards committee had in mind.</p>\n<p>It's basically a way of communicating intent.</p>\n", "CreationDate": "2015-12-28T12:02:01.943", "ParentId": "34493104", "Id": "34493177", "LastActivityDate": "2015-12-28T12:02:01.943", "PostTypeId": "2", "Score": "8", "OwnerUserId": "33213"}, "bq_ids": {"n4140": {"so_34493104_34493170_0": {"length": 41, "quality": 0.8913043478260869, "section_id": 6247}}, "n3337": {"so_34493104_34493170_0": {"length": 41, "quality": 0.8913043478260869, "section_id": 6007}}}, "34493104": {"CreationDate": "2015-12-28T11:57:12.583", "LastActivityDate": "2015-12-28T13:12:55.560", "Id": "34493104", "AcceptedAnswerId": "34494188", "ViewCount": "282", "Score": "3", "Title": "Exposition only in the C++ standard?", "CommentCount": "1", "Body": "<p>What does <strong>exposition only</strong> exactly means in the C++ standard? Does it mean that the private/protected members marked <strong>exposition only</strong> are required to exist by standard, or are they just a \"suggestion\" of implementation, and are not required at all?</p>\n<p>Examples include:</p>\n<pre><code>std::error_code::val_\nstd::wstring_convert::byte_err_string\nstd::array::elems\nstd::move_iterator::current\nstd::reverse_iterator::current\nstd::ostream_iterator::delim\n// And a lot of others\n</code></pre>\n", "Tags": "<c++><c++11><standards><c++-standard-library><reverse-iterator>", "FavoriteCount": "0", "PostTypeId": "1", "AnswerCount": "4", "OwnerUserId": "882932"}, "34493171": {"LastActivityDate": "2015-12-28T12:01:32.780", "CreationDate": "2015-12-28T12:01:32.780", "CommentCount": "0", "Body": "<p>It indicates one of the many possible ways to implement the particular item, but not necessarily the best way.</p>\n<p>See <a href=\"https://stackoverflow.com/questions/2006744/what-does-exposition-only-mean-why-use-it\">this</a> answer.</p>\n", "Id": "34493171", "LastEditDate": "2017-05-23T11:59:17.487", "ParentId": "34493104", "OwnerUserId": "2716578", "PostTypeId": "2", "Score": "4", "LastEditorUserId": "-1"}, "34493170": {"CommentCount": "0", "Body": "<p>n4296 17.5.2.3/2</p>\n<blockquote>\n<p id=\"so_34493104_34493170_0\">Objects of certain classes are sometimes required by the external\n  specifications of their classes to store data, apparently in member\n  objects. For the sake of exposition, some subclauses provide\n  representative declara- tions, and semantic requirements, for private\n  member objects of classes that meet the external specifications of the\n  classes. The declarations for such member objects and the definitions\n  of related member types are followed by a comment that ends with\n  exposition only, as in:</p>\n<pre><code>streambuf* sb; // exposition only\n</code></pre>\n</blockquote>\n", "CreationDate": "2015-12-28T12:01:32.023", "ParentId": "34493104", "Id": "34493170", "LastActivityDate": "2015-12-28T12:01:32.023", "PostTypeId": "2", "Score": "4", "OwnerUserId": "1498580"}});