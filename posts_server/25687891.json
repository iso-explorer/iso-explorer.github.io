post_cb({"bq_ids": {"n4140": {"so_25687891_25688227_5": {"length": 18, "quality": 0.9473684210526315, "section_id": 1617}}, "n3337": {"so_25687891_25688227_5": {"length": 18, "quality": 0.9473684210526315, "section_id": 1613}}, "n4659": {"so_25687891_25688227_5": {"length": 18, "quality": 0.9473684210526315, "section_id": 1770}}}, "25688227": {"Id": "25688227", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_25687891_25688227_0\"><em>Why the below code works?</em></p>\n<pre><code>std::string str = \"bla bla\";\nint index = 7;\ncout &lt;&lt; str[index] &lt;&lt; endl; // Work!!\n</code></pre>\n</blockquote>\n<p>If the <code>index</code> is equal to the string's length (in your case <strong>it is</strong>, <code>7 == strlen(\"bla bla\")</code>), the access operator returns a reference to a default value of <code>charT</code> in <code>std::basic_string&lt;charT&gt;</code> instantiation, for <code>char</code> it is <code>\\0</code>).</p>\n<p><a href=\"http://www.cplusplus.com/reference/string/string/operator[]/\" rel=\"nofollow\">C++ string::operator[] reference</a></p>\n<blockquote>\n<p id=\"so_25687891_25688227_1\">If pos is <strong>not greater</strong> than the string length, the function <strong>never throws</strong> exceptions (no-throw guarantee).</p>\n</blockquote>\n<p>However, later on you try to access another element:</p>\n<pre><code>str[index++] // in second iteration, the first is ok though\n</code></pre>\n<p>And <strong>only then</strong> you fall into:</p>\n<blockquote>\n<p id=\"so_25687891_25688227_2\">[...], it causes <em>undefined behavior</em>.</p>\n</blockquote>\n<p>C++ Standard reference:</p>\n<blockquote>\n<p id=\"so_25687891_25688227_3\"><strong>\u00a7 21.4.5 basic_string element access [string.access]</strong></p>\n<pre><code>const_reference operator[](size_type pos) const;\nreference operator[](size_type pos);\n</code></pre>\n<ol>\n<li><p id=\"so_25687891_25688227_4\"><em>Requires:</em> <strong><code>pos &lt;= size()</code></strong></p></li>\n<li><p id=\"so_25687891_25688227_5\"><em>Returns:</em> <code>*(begin() + pos)</code> if <code>pos &lt; size()</code>. Otherwise, returns a reference to an object of type <code>charT</code> with value <code>charT()</code>, where modifying the object leads to undefined behavior.</p></li>\n<li><p id=\"so_25687891_25688227_6\"><em>Throws:</em> <strong>Nothing.</strong></p></li>\n</ol>\n</blockquote>\n<p>That is, as long as <code>pos &lt;= size()</code> condition is satisfied, the method never throws, otherwise the behavior is <em>Undefined</em>, that throwing an exception is one of examples.</p>\n", "LastEditorUserId": "3953764", "LastActivityDate": "2014-09-05T14:43:56.133", "Score": "2", "CreationDate": "2014-09-05T14:29:49.197", "ParentId": "25687891", "CommentCount": "1", "OwnerUserId": "3953764", "LastEditDate": "2014-09-05T14:43:56.133"}, "25688259": {"Id": "25688259", "PostTypeId": "2", "Body": "<p>Array entries are usually 0 based counted, so it's crucial to define your search range between 0 and string::length - 1. In C++ sometimes it returns garbage when you access string[n] (n &gt;= len), and writing to it usually causes segment fault, based on my tragic experiences.</p>\n", "LastActivityDate": "2014-09-05T14:31:50.370", "CommentCount": "0", "CreationDate": "2014-09-05T14:31:50.370", "ParentId": "25687891", "Score": "0", "OwnerUserId": "2674217"}, "25687891": {"ViewCount": "628", "Body": "<p>when I try to check if the <code>str[index]</code> equal to I got exception <strong><em>String out of range</em></strong></p>\n<pre><code>std::string Test::getTheText(std::string str) {\n    int index = 7;\n    string text;\n    cout &lt;&lt; str[index] &lt;&lt; endl; // Work!!\n\n    while (str[index] != '\\\"') // Exception,why?? also try while(str[index]!=34)\n        text += str[index++];\n    return text;\n}\n</code></pre>\n<p>my string is: Text \u2013 <code>bla bla</code></p>\n", "AcceptedAnswerId": "25688227", "Title": "String out of range c++", "CreationDate": "2014-09-05T14:12:14.957", "Id": "25687891", "CommentCount": "0", "LastEditDate": "2014-09-05T14:15:59.167", "PostTypeId": "1", "OwnerDisplayName": "user3503518", "LastEditorUserId": "3837231", "LastActivityDate": "2014-09-05T14:43:56.133", "Score": "1", "Tags": "<c++>", "AnswerCount": "2"}});