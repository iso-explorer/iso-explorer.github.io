post_cb({"bq_ids": {"n4140": {"so_39929099_39929147_0": {"length": 26, "quality": 0.8666666666666667, "section_id": 3222}}, "n3337": {"so_39929099_39929147_0": {"length": 27, "quality": 0.9, "section_id": 3096}}, "n4659": {"so_39929099_39929147_0": {"length": 26, "quality": 0.8666666666666667, "section_id": 3979}}}, "39929099": {"ViewCount": "109", "Body": "<p>The consensus of stackoverflow questions say that it is undefined behaviour.  </p>\n<p>However, I recently saw a 2016 talk by Charles Bay titled:<br>\n<em>Instruction Reordering Everywhere:  The C++ 'As-If\" Rule and the Role of Sequence.</em> </br></p>\n<p>At <a href=\"https://youtu.be/8yUSMJWlEsk?t=37m53s\" rel=\"nofollow\">37:53</a>  he shows the following:  </p>\n<blockquote>\n<p id=\"so_39929099_39929099_0\"><strong>C++ Terms</strong> </p>\n<p id=\"so_39929099_39929099_1\"><strong>Undefined</strong> Behaviour: Lack of Constraints<br>\n  (order of globals initialization)</br></p>\n<p id=\"so_39929099_39929099_2\"><strong>Unspecified</strong> Behaviour: Constraint Violation<br>\n  (dereferencing NULL\n  pointer)</br></p>\n</blockquote>\n<p>Now I have conflicting information.<br>\nWas this a typo?  Has anything changed?</br></p>\n", "AcceptedAnswerId": "39929957", "Title": "Is dereferencing a NULL pointer considered unspecified or undefined behaviour?", "CreationDate": "2016-10-08T05:41:10.150", "Id": "39929099", "CommentCount": "4", "PostTypeId": "1", "LastActivityDate": "2016-10-08T07:39:05.197", "Score": "2", "OwnerUserId": "908939", "Tags": "<c++><pointers><null><undefined-behavior><unspecified-behavior>", "AnswerCount": "2"}, "39929147": {"Id": "39929147", "PostTypeId": "2", "Body": "<p>It is undefined  behavior.</p>\n<p>From <strong>8.3.2 References</strong> of the C++11 Standard (emphasis mine):</p>\n<blockquote>\n<p id=\"so_39929099_39929147_0\">5 ... [ <em>Note</em>: in particular, a null reference cannot exist in a well-defined program, because the only way to create such a reference would be to bind it to the \u201cobject\u201d obtained by <strong>dereferencing a null pointer, which causes undefined behavior</strong>. As described in 9.6, a reference cannot be bound directly to a bit-field. \u2014<em>end note</em> ]</p>\n</blockquote>\n", "LastEditorUserId": "434551", "LastActivityDate": "2016-10-08T06:02:43.560", "Score": "2", "CreationDate": "2016-10-08T05:49:01.827", "ParentId": "39929099", "CommentCount": "8", "OwnerUserId": "434551", "LastEditDate": "2016-10-08T06:02:43.560"}, "39929957": {"Id": "39929957", "PostTypeId": "2", "Body": "<p>The examples are associated with the wrong things.   Regardless of what version of the C++ standard you assume (i.e. nothing has changed within the standards, in this regard).</p>\n<p>Dereferencing a NULL pointer gives undefined behaviour.   The standard does not define any constraint on what happens as a result.</p>\n<p>The order of globals initialisation is an example of unspecified behaviour   (the standard guarantees that all globals will be initialised [that's a constraint on how globals are initialised] but the order is not specified).</p>\n", "LastActivityDate": "2016-10-08T07:39:05.197", "CommentCount": "0", "CreationDate": "2016-10-08T07:39:05.197", "ParentId": "39929099", "Score": "0", "OwnerUserId": "4706785"}});