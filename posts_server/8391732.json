post_cb({"8392046": {"Id": "8392046", "PostTypeId": "2", "Body": "<p>This is likely what you want:</p>\n<pre><code>size_t x = -1ull;\n\nif (x == -((size_t)-1ull))\n    ...\n</code></pre>\n<p><code>x</code> will be set to the largest integer possible, which may not be all bits set. Use ~0 for that.</p>\n", "LastEditorUserId": "964135", "LastActivityDate": "2011-12-05T21:31:53.557", "Score": "0", "CreationDate": "2011-12-05T21:21:55.377", "ParentId": "8391732", "CommentCount": "0", "OwnerUserId": "964135", "LastEditDate": "2011-12-05T21:31:53.557"}, "8391986": {"Id": "8391986", "PostTypeId": "2", "Body": "<p>Compiler implementation dependant behavior is annoying. You should be able to do this, though:</p>\n<pre><code>size_t x = 0;\nx--;\n\nif ((x+1) == 0)\n</code></pre>\n", "LastEditorUserId": "964135", "LastActivityDate": "2011-12-05T21:36:49.090", "Score": "1", "CreationDate": "2011-12-05T21:16:38.470", "ParentId": "8391732", "CommentCount": "6", "OwnerUserId": "2915", "LastEditDate": "2011-12-05T21:36:49.090"}, "8392047": {"Id": "8392047", "PostTypeId": "2", "Body": "<p><code>1u</code> has the type <code>unsigned int</code>.  This is then negated using the unary <code>-</code> operator.  The behavior is as follows:</p>\n<blockquote>\n<p id=\"so_8391732_8392047_0\">The negative of an unsigned quantity is computed by subtracting its value from 2<sup>n</sup>, where n is the number of bits in the promoted operand (C++11 5.3.1/8).</p>\n</blockquote>\n<p><code>-1u</code> is thus guaranteed to give you the largest value representable by <code>unsigned int</code>.</p>\n<p>To get the largest value representable by an arbitrary unsigned type, you can cast <code>-1</code> to that type.  For example, for <code>std::size_t</code>, consider\n <code>static_cast&lt;std::size_t&gt;(-1)</code>.</p>\n", "LastActivityDate": "2011-12-05T21:21:58.370", "CommentCount": "0", "CreationDate": "2011-12-05T21:21:58.370", "ParentId": "8391732", "Score": "6", "OwnerUserId": "151292"}, "bq_ids": {"n4140": {"so_8391732_8392047_0": {"length": 12, "quality": 0.8, "section_id": 6071}}, "n3337": {"so_8391732_8392047_0": {"length": 12, "quality": 0.8, "section_id": 5839}}, "n4659": {"so_8391732_8392047_0": {"length": 12, "quality": 0.8, "section_id": 7567}}}, "8391816": {"Id": "8391816", "PostTypeId": "2", "Body": "<p>I've always used ~0U for the purpose of \"unsigned, all bits on\". </p>\n", "LastActivityDate": "2011-12-05T21:00:57.660", "CommentCount": "5", "CreationDate": "2011-12-05T21:00:57.660", "ParentId": "8391732", "Score": "5", "OwnerUserId": "291737"}, "8391813": {"Id": "8391813", "PostTypeId": "2", "Body": "<p>While this is <em>technically</em> valid code, you are depending on implementation dependent behavior: overflow handling of converting a negative number to unsigned. However, if you need to meaningful compare a size_t with -1 because the API calls you are using require it, the system is already screwed up but your code is likely to work because they would have had to do the same thing on the other side of the API.</p>\n", "LastActivityDate": "2011-12-05T21:00:19.277", "CommentCount": "4", "CreationDate": "2011-12-05T21:00:19.277", "ParentId": "8391732", "Score": "0", "OwnerUserId": "14768"}, "8391732": {"ViewCount": "839", "Body": "<p>Is for example</p>\n<pre><code>size_t x = -1u;\n\nif (x == -1u)\n    ...\n</code></pre>\n<p>valid?</p>\n<p>If this is valid it would prevent a warning.\nof course on a 32 bit system x should be 0xffffffff and on a 64 bit\nsystem it should be 0xffffffffffffffff.</p>\n<p>-Jochen</p>\n", "AcceptedAnswerId": "8392047", "Title": "Is -1u valid c++?", "CreationDate": "2011-12-05T20:54:19.913", "Id": "8391732", "CommentCount": "10", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2012-05-08T13:11:08.680", "LastEditorUserId": "830320", "LastActivityDate": "2012-05-08T13:11:08.680", "Score": "10", "OwnerUserId": "898383", "Tags": "<c++><platform-independent>", "AnswerCount": "5"}});