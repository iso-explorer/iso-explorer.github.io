post_cb({"5258548": {"ParentId": "5258081", "CommentCount": "0", "Body": "<p>The reason is simple, though stupid.</p>\n<p>It is important to diagnose infinite loop, but such might not be evident:</p>\n<pre><code>while(i &gt;= 0) { --i; } // infinite if i unsigned\n\nwhile(SOME_MACRO(i)) // err, depends on the expansion of macros\n</code></pre>\n<p>It is a great feature of a compiler to produce a warning for a tautological test, that is a test that turns out to be either always true or always false, because it's not obvious when it comes from a macro expansion or within a dependent context.</p>\n<p>It just seems that VC++ pushed a bit too far here, and instead of considering tautological conditions warns for all <code>true</code> or <code>false</code> conditions it can find, even when they are already clearly stated in the code.</p>\n", "OwnerUserId": "147192", "PostTypeId": "2", "Id": "5258548", "Score": "6", "CreationDate": "2011-03-10T10:44:53.800", "LastActivityDate": "2011-03-10T10:44:53.800"}, "5258081": {"CommentCount": "3", "ViewCount": "2288", "CreationDate": "2011-03-10T10:04:43.573", "LastActivityDate": "2011-03-10T10:44:53.800", "Title": "What's the point of issuing a compiler warning for \"while(true)\" and not issuing one for \"for(;;)\"?", "AcceptedAnswerId": "5258548", "PostTypeId": "1", "Id": "5258081", "Score": "9", "Body": "<p>When I compile C++ code with Visual C++ 9 with \"warning level 4\" the following:</p>\n<pre><code>while( true ) {\n   //loop body with break on certain condition\n}\n</code></pre>\n<p>and the following:</p>\n<pre><code>for( ; true; ) {\n   //same loop body\n}\n</code></pre>\n<p>both trigger <code>C4127: conditional expression is constant</code> warning but the following:</p>\n<pre><code>for( ; ; ) {\n   //same loop body\n}\n</code></pre>\n<p>compiles without warning.</p>\n<p>Why this difference, especially between the second and the third variant?</p>\n", "Tags": "<c++><visual-c++><compiler-construction><compiler-warnings>", "OwnerUserId": "57428", "AnswerCount": "5"}, "5258135": {"ParentId": "5258081", "CommentCount": "0", "Body": "<p>The reason for warning the user of constant conditional expressions is to help avoid bugs where the expression ends up being constant (for example, due to a typo). In the last case, there is no expression, so there is no risk of it accidentally being constant.</p>\n", "OwnerUserId": "74060", "PostTypeId": "2", "Id": "5258135", "Score": "9", "CreationDate": "2011-03-10T10:08:37.943", "LastActivityDate": "2011-03-10T10:08:37.943"}, "5258119": {"ParentId": "5258081", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>The <code>for ( ;; )</code> construct is the canonical way to <em>intentionally</em> code an \"endless\" loop. I could imagine the compiler designers didn't want to generate a warning for that.</p>\n", "OwnerUserId": "60281", "LastEditorUserId": "366904", "LastEditDate": "2011-03-10T10:13:31.807", "Id": "5258119", "Score": "4", "CreationDate": "2011-03-10T10:07:24.090", "LastActivityDate": "2011-03-10T10:13:31.807"}, "5258537": {"ParentId": "5258081", "CommentCount": "0", "Body": "<p>Compiler warning are here to help catch potential bugs. Using an always <code>true</code> condition in a <code>while</code> loop is probably an error. For exemple, in the following code, this is probably a bug, and I'd like the compiler to warn me about it:</p>\n<pre><code>unsigned int x;\n// ...\nwhile (x &gt;= 0) {\n    // ...\n}\n</code></pre>\n<p>In such a situation, in optimized build the compiler will probably deduce that the condition is always true (since an unsigned integer cannot be smaller than 0). So there is a need for detection of an always <code>true</code> condition in <code>while</code> loop. I think that whoever wrote the detection of such an error didn't special case the <code>while (true)</code> case, as there is a simple way to do a infinite loop with <code>for (;;)</code>. </p>\n<p>You can read <a href=\"http://blogs.msdn.com/b/ericlippert/archive/2011/03/03/danger-will-robinson.aspx\" rel=\"nofollow\">here</a>, how the decision to add a warning or not in Visual Studio, is taken (the exemple are about <code>C#</code> but I suppose that the team has the same rule of thumb for warning in <code>C++</code>).</p>\n", "OwnerUserId": "5353", "PostTypeId": "2", "Id": "5258537", "Score": "1", "CreationDate": "2011-03-10T10:44:08.467", "LastActivityDate": "2011-03-10T10:44:08.467"}, "5258160": {"ParentId": "5258081", "PostTypeId": "2", "CommentCount": "7", "Body": "<p>No point. After all, the langauge specification says ($6.5.3/2),</p>\n<blockquote>\n<p id=\"so_5258081_5258160_0\">Either or both of the condition and\n  the expression can be omitted. <strong>A\n  missing condition makes the implied\n  while clause equivalent to\n  while(true).</strong></p>\n</blockquote>\n<p>So <code>for ( ; ; )</code> is equivalent to <code>while(true)</code> even according to the Standard. Therefore, I don't see any reason why the compiler should give warning in one case but not in the other!</p>\n<p>--</p>\n<p>If the compiler decides to give warning, then in my opinion, the compiler should give warning when the condition is <em>missing</em> as opposed to when it's present, so that the warning would be interpreted as <em>hint</em> for programmer to mention his  <em>intention</em> clearly and <em>explicitly</em>.  </p>\n<p>I mean, <code>for ( ;; )</code> is <strong>more likely to be a typo</strong> than the <em>explicit</em> mention of condition in <code>for ( ;true; )</code>. The latter tells programmer's clear and explicit intent. As <strong>Steve</strong> says in comment:</p>\n<blockquote>\n<p id=\"so_5258081_5258160_1\">For an int value y, char x = y is\n  equivalent to char x = (char)y, but\n  you might want a warning for an\n  implicit narrowing conversion on the\n  first but not the second.</p>\n</blockquote>\n<p><strong>So explicit intention should not receive warning, while implicit intention should receive!</strong></p>\n", "OwnerUserId": "415784", "LastEditorUserId": "415784", "LastEditDate": "2011-03-10T10:33:30.837", "Id": "5258160", "Score": "4", "CreationDate": "2011-03-10T10:10:47.773", "LastActivityDate": "2011-03-10T10:33:30.837"}, "bq_ids": {"n4140": {"so_5258081_5258160_0": {"section_id": 3904, "quality": 0.9285714285714286, "length": 13}}, "n3337": {"so_5258081_5258160_0": {"section_id": 3764, "quality": 0.8571428571428571, "length": 12}}, "n4659": {"so_5258081_5258160_0": {"section_id": 4790, "quality": 1.0, "length": 14}}}});