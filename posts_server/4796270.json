post_cb({"4796323": {"Id": "4796323", "PostTypeId": "2", "Body": "<p>As there is no <em>observable</em> difference between the two program snippets - provided the implementation is one that doesn't use trap values or anything else that might cause the inner comparison to do something other than just evaluate to <code>true</code> or <code>false</code> - the compiler could optimize one to the other under the \"as if\" rule. If there was some observable difference or some way that a conforming program might behave differently then the compiler would be non-conforming if it changed one form to the other.</p>\n<p>For C++, see 1.9 [intro.execution] / 5.</p>\n<blockquote>\n<p id=\"so_4796270_4796323_0\">A conforming implementation executing a well-formed program shall produce the same observable behavior as one of the possible execution sequences of the corresponding instance of the abstract machine with the same program and the same input. However, if any such execution sequence contains an undefined\n  operation, this International Standard places no requirement on the implementation executing that program with that input (not even with regard to operations preceding the first undefined operation).</p>\n<p id=\"so_4796270_4796323_1\">[This provision is sometimes called the \"as-if\" rule, because an implementation is free to disregard any requirement of this International Standard as long as the result is <em>as if</em> the requirement had been obeyed, as far as can be determined from the observable behavior of the program. For instance, an actual implementation need not evaluate part of an expression if it can deduce that its value is not used and that no side effects affecting the observable behavior of the program are produced.]</p>\n</blockquote>\n", "LastEditorUserId": "19563", "LastActivityDate": "2011-01-25T16:52:23.527", "Score": "11", "CreationDate": "2011-01-25T16:45:46.363", "ParentId": "4796270", "CommentCount": "4", "LastEditDate": "2011-01-25T16:52:23.527", "OwnerUserId": "19563"}, "4796666": {"Id": "4796666", "PostTypeId": "2", "Body": "<p>The truth is that if a&gt;5 is false more often than b&lt;6 is false or vice versa then the sequence will make a very minor difference as it will have to compute both conditionals on more occasions.</p>\n<p>In reality though it is so trivial it is not worth bothering about in this particular case.</p>\n<p>There are cases where it actually does make a difference, i.e. when you are filtering a large collection of data on several criteria and have to decide which filter to apply first, particularly if only one of them is O(log N) or constant and the subsequent checks are linear through what is left.</p>\n", "LastActivityDate": "2011-01-25T17:15:22.257", "Score": "0", "CreationDate": "2011-01-25T17:15:22.257", "ParentId": "4796270", "CommentCount": "0", "OwnerUserId": "442284"}, "4796308": {"Id": "4796308", "PostTypeId": "2", "Body": "<p>If the compiler can verify that there is no observable difference between those two, then it is free to make such optimizations.</p>\n<p>Sequence points are a conceptual thing:  the compiler has to generate code such that it behaves <em>as if</em> all the semantic rules like sequence points were followed.  The generated code doesn't actually have to follow those rules if not following them produces no observable difference in the behavior of the program.</p>\n<p>Even if you had:</p>\n<pre><code>if (a &gt; 5 &amp;&amp; b &lt; 6)\n</code></pre>\n<p>the compiler could freely rearrange this to be</p>\n<pre><code>if (b &lt; 6 &amp;&amp; a &gt; 5)\n</code></pre>\n<p>because there is no observable difference between the two (in this specific case where <code>a</code> and <code>b</code> are both <code>int</code> values).  [This assumes that it is safe to read both <code>a</code> and <code>b</code>; if reading one of them could cause some error (e.g., one has a trap value), then the compiler would be more restricted in what optimizations it could make.]</p>\n", "LastActivityDate": "2011-01-25T16:44:47.377", "Score": "12", "CreationDate": "2011-01-25T16:44:47.377", "ParentId": "4796270", "CommentCount": "5", "OwnerUserId": "151292"}, "4796360": {"Id": "4796360", "PostTypeId": "2", "Body": "<p>The end of a full expression (including those that control logical constructs like if, while, et cetera) is a sequence point. However, the sequence point really only provides a guarantee that side-effects of previously-evaluated statements have completed.</p>\n<p>If a statement has no observable side-effects the compiler can do what it feels is best.</p>\n", "LastActivityDate": "2011-01-25T16:48:39.987", "Score": "0", "CreationDate": "2011-01-25T16:48:39.987", "ParentId": "4796270", "CommentCount": "0", "OwnerUserId": "197015"}, "bq_ids": {"n4140": {"so_4796270_4796323_0": {"length": 36, "quality": 0.9, "section_id": 5801}, "so_4796270_4796323_1": {"length": 39, "quality": 0.9285714285714286, "section_id": 5797}}, "n3337": {"so_4796270_4796323_0": {"length": 36, "quality": 0.9, "section_id": 5574}, "so_4796270_4796323_1": {"length": 39, "quality": 0.9285714285714286, "section_id": 5570}}, "n4659": {"so_4796270_4796323_0": {"length": 36, "quality": 0.9, "section_id": 7260}, "so_4796270_4796323_1": {"length": 39, "quality": 0.9285714285714286, "section_id": 7256}}}, "4798929": {"Id": "4798929", "PostTypeId": "2", "Body": "<p>Lots of PC programmer replies =)</p>\n<p>The compiler may, and likely would, optimize the sequence points for speed if \"b\" is passed to the function in a quickly-accessed register while \"a\" is passed on the stack. That's a quite common case for many compilers for 8-bit and 16-bit MCU:s. </p>\n<p>Through the optimization it doesn't need to first stack \"b\", then load \"a\" into a register, then evaluate \"a\", then load \"b\" back into a register, then evaluate \"b\". Quite a mess I'd rather hope the compiler handled by rearranging the sequence points.</p>\n<p>Though of course as already mentioned, to be standard compliant the compiler needs to ensure that it doesn't change the program behavior by the optimization.</p>\n", "LastActivityDate": "2011-01-25T21:17:24.187", "Score": "0", "CreationDate": "2011-01-25T21:17:24.187", "ParentId": "4796270", "CommentCount": "0", "OwnerUserId": "584518"}, "4796338": {"Id": "4796338", "PostTypeId": "2", "Body": "<p>Yes, the <code>if</code> statement is a <a href=\"http://en.wikipedia.org/wiki/Sequence_point\" rel=\"nofollow\">sequence point</a>.</p>\n<p>However, a smart and agressive compiler can still reorder the different expressions, statements and alter the sequence points providing no side effects appear.</p>\n", "LastActivityDate": "2011-01-25T16:46:42.430", "Score": "1", "CreationDate": "2011-01-25T16:46:42.430", "ParentId": "4796270", "CommentCount": "0", "OwnerUserId": "209629"}, "4796347": {"Id": "4796347", "PostTypeId": "2", "Body": "<p>Sequence points only apply to the abstract machine.</p>\n<p>If the target specific optimizer can prove that reversing the order of two instructions has no side effects, it can change them at will.</p>\n", "LastActivityDate": "2011-01-25T16:47:26.483", "Score": "1", "CreationDate": "2011-01-25T16:47:26.483", "ParentId": "4796270", "CommentCount": "0", "OwnerUserId": "613064"}, "4796270": {"ViewCount": "547", "Body": "<p>I had an argument today with one of my collegues regarding the fact that a compiler could change the semantics of a program when agressive optimizations are enabled.</p>\n<p>My collegue states that when optimizations are enabled, a compiler might change the order of some instructions. So that:</p>\n<pre><code>function foo(int a, int b)\n{\n  if (a &gt; 5)\n  {\n    if (b &lt; 6)\n    {\n      // Do something\n    }\n  }\n}\n</code></pre>\n<p>Might be changed to:</p>\n<pre><code>function foo(int a, int b)\n{\n  if (b &lt; 6)\n  {\n    if (a &gt; 5)\n    {\n      // Do something\n    }\n  }\n}\n</code></pre>\n<p>Of course, in this case, it <strong>doesn't change</strong> the program general behavior and isn't <em>really</em> important.</p>\n<p>From my understanding, I believe that the two <code>if (condition)</code> belong to two different <em>sequence points</em> and that the compiler can't change their order, even if changing it would keep the same general behavior.</p>\n<p>So, dear SO users, what is the truth regarding this ?</p>\n", "AcceptedAnswerId": "4796308", "Title": "Sequence points, conditionals and optimizations", "CreationDate": "2011-01-25T16:41:25.160", "Id": "4796270", "CommentCount": "4", "PostTypeId": "1", "LastActivityDate": "2011-01-25T21:17:24.187", "Score": "6", "OwnerUserId": "279259", "Tags": "<c++><c><optimization><compiler-construction><semantics>", "AnswerCount": "7"}});