post_cb({"37684825": {"ParentId": "37684327", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>The problem is that the c-preprocessor just adds another line ending character when the <code>\\</code> is hit and continuated.</p>\n<p>Within <code>//</code> comments you can't do that. The <code>\\</code> character isn't accepted to continuate the comment (it's supposed to appear as a single line anyway).</p>\n<hr>\n<p>The solution is,- as you found out yourself -, to use the <code>/**/</code> comment style.</p>\n</hr>", "OwnerUserId": "1413395", "LastEditorUserId": "1413395", "LastEditDate": "2016-06-07T16:47:51.273", "Id": "37684825", "Score": "2", "CreationDate": "2016-06-07T16:40:26.940", "LastActivityDate": "2016-06-07T16:47:51.273"}, "37686206": {"ParentId": "37684327", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>To understand this phenomenon, you may to refer into the C standard (I believe that C++ is similar to C in that manner). In particular it's in <em>translation phases</em> section (C11 draft \u00a75.1.1.2).</p>\n<p>The preprocessor is obligated to behave just like as the phases are executed in the top-down order (i.e. step 3 is executed after step 2 has finished completely etc.).</p>\n<p>Basically, the <code>//</code> and <code>/* ... */</code> comments are recognized in phase three, that is performed <em>after</em> the trailing <code>\\</code> handling (i.e. phase two), meaning that it is agnostic to them. In other words, it treats them just like an ordinary source text with no special meaning.</p>\n<blockquote>\n<ol start=\"2\">\n<li><p id=\"so_37684327_37686206_0\">Each instance of a backslash character (\\) immediately followed by a new-line character is deleted, splicing physical source lines to\n  form logical source lines. Only the last backslash on any physical\n  source line shall be eligible for being part of such a splice.</p></li>\n<li><p id=\"so_37684327_37686206_1\">The source file is decomposed into preprocessing tokens<sup>7)</sup> and sequences of white-space characters (including comments). A source file shall not end in a partial preprocessing token or in a partial comment.Each comment is replaced by one space character. New-line characters are retained. Whether each nonempty sequence of white-space\n  characters other than new-line is retained or replaced by one space\n  character is implementation-defined.</p></li>\n</ol>\n</blockquote>\n", "OwnerUserId": "586873", "LastEditorUserId": "586873", "LastEditDate": "2016-06-07T18:08:52.203", "Id": "37686206", "Score": "1", "CreationDate": "2016-06-07T17:58:13.530", "LastActivityDate": "2016-06-07T18:08:52.203"}, "bq_ids": {"n4140": {"so_37684327_37686206_0": {"section_id": 5313, "quality": 0.9642857142857143, "length": 27}, "so_37684327_37686206_1": {"section_id": 5313, "quality": 0.9069767441860465, "length": 39}}, "n3337": {"so_37684327_37686206_0": {"section_id": 5110, "quality": 0.9642857142857143, "length": 27}, "so_37684327_37686206_1": {"section_id": 5110, "quality": 0.9069767441860465, "length": 39}}, "n4659": {"so_37684327_37686206_0": {"section_id": 6737, "quality": 0.9642857142857143, "length": 27}, "so_37684327_37686206_1": {"section_id": 6737, "quality": 0.9069767441860465, "length": 39}}}, "37684327": {"CommentCount": "8", "ViewCount": "263", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2016-06-07T16:11:12.470", "LastActivityDate": "2016-06-08T07:20:40.980", "Title": "Multiline preprocessor macro with trailing comments", "AcceptedAnswerId": "37684825", "LastEditDate": "2017-05-23T11:58:50.607", "Id": "37684327", "Score": "6", "Body": "<p>I want to define the following ordinary looking macro:</p>\n<pre><code>#define MY_ENUM enum MyEnum{ \\\n    myVal0, \\ //Describes this situation\n    myVal2  \\ //Describes that situation\n}\n</code></pre>\n<p>To my surprise this doesn't work due to <code>error: stray \u2018\\\u2019 in program</code>. Even some whitespace after the backslash results in <code>warning: backslash and newline separated by space</code>. As <a href=\"https://stackoverflow.com/a/10419556/1525238\">this answer</a> points out, the backslash must be the last character on the line. <a href=\"https://stackoverflow.com/a/25157708/1525238\">This answer</a> points out that line splicing occurs before comments are processed. The reason why this order was chosen makes absolutely no sense to me; the only reason I can imagine this could be done is to allow multiline comments like the following:</p>\n<pre><code>//This is a comment which \\\nfollows in the next line\n</code></pre>\n<p>Which looks extremely dangerous as such a thing could just eat up whatever code is on the next line when attempted. The reverse order, i.e replace each comment with single whitespace before splicing lines sounds like a much more sensible choice to me. Can someone explain why this choice was made?</p>\n<p>I can work around my original problem with the following:</p>\n<pre><code>#define MY_ENUM enum MyEnum{ \\\n    myVal1, /*Describes this situation*/ \\\n    myVal2  /*Describes that situation*/ \\\n}\n</code></pre>\n<p>My purpose when doing this awkward enum macro definition is that this macro must be shared between c++ (where it absolutely must be a class member due to Qt) and c. Defining a macro such as this looks like the only solution to me but the above workaround looks ugly and I absolutely don't want to leave enums uncommented. Am I approaching this problem wrong?</p>\n", "Tags": "<c++><c><gcc><g++><c-preprocessor>", "OwnerUserId": "1525238", "AnswerCount": "2"}});