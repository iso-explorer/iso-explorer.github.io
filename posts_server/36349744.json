post_cb({"36349744": {"ViewCount": "90", "Body": "<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main() {\n    int &amp;&amp;rfint = 10;\n    int &amp;l = rfint;\n    std::cout &lt;&lt; l &lt;&lt; std::endl;\n    std::cout &lt;&lt; ++l &lt;&lt; std::endl;\n    std::cout &lt;&lt; &amp;l &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>\n<p>Using the above construct, I can directly manipulate the prvalue <code>10</code> through the non-const lvalue reference <code>l</code>. I can even take address of the prvalue. How does this work? Is it related to <a href=\"http://en.cppreference.com/w/cpp/language/reference_initialization#Lifetime_of_a_temporary\" rel=\"nofollow\">extended lifetime</a>?</p>\n", "AcceptedAnswerId": "36350140", "Title": "Bind non-const lvalue reference to rvalue", "CreationDate": "2016-04-01T06:47:50.380", "Id": "36349744", "CommentCount": "0", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2016-04-01T07:54:05.620", "LastEditorUserId": "2101084", "LastActivityDate": "2016-04-01T07:54:05.620", "Score": "4", "OwnerUserId": "1021388", "Tags": "<c++>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_36349744_36350140_0": {"length": 20, "quality": 0.8695652173913043, "section_id": 3321}}, "n3337": {"so_36349744_36350140_0": {"length": 18, "quality": 0.782608695652174, "section_id": 3191}}, "n4659": {"so_36349744_36350140_0": {"length": 17, "quality": 0.7391304347826086, "section_id": 4087}}}, "36350140": {"Id": "36350140", "PostTypeId": "2", "Body": "<p>[dcl.init.ref]/5:</p>\n<blockquote>\n<p id=\"so_36349744_36350140_0\">A reference to type \u201c<em>cv1</em> <code>T1</code>\u201d is initialized by an expression of type \u201c<em>cv2</em> <code>T2</code>\u201d as follows:<br>\n  ...<br>\n  (5.2.2.2) \u2014 If <code>T1</code> is a non-class type, a temporary of type \u201c<em>cv1</em> <code>T1</code>\u201d is created and copy-initialized (8.5)\n  from the initializer expression. The reference is then bound to the temporary.</br></br></p>\n</blockquote>\n<p>So <code>int &amp;&amp;rfint = 10;</code> creates a temporary, and the reference is bound to it, not to <code>10</code> itself.</p>\n<p>And yes, the lifetime of that temporary is extended to the lifetime of <code>rfint</code>, so you can do whatever you want with it while <code>rfint</code> is in scope.</p>\n", "LastEditorUserId": "3959454", "LastActivityDate": "2016-04-01T07:17:38.287", "Score": "2", "CreationDate": "2016-04-01T07:11:45.067", "ParentId": "36349744", "CommentCount": "0", "OwnerUserId": "3959454", "LastEditDate": "2016-04-01T07:17:38.287"}});