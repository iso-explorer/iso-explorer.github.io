post_cb({"35003915": {"ParentId": "35003070", "CommentCount": "1", "Body": "<p>Without <code>static</code>, you are allowing a C99 compiler to create both a function with external linkage (defined in a single place), but also separate inline code in every translation unit that includes the file. It can use any function it likes, unless you explicitly decide between <code>static</code> or <code>extern</code>.</p>\n<p>One requirement of such functions can be seen in <a href=\"https://busybox.net/~landley/c99-draft.html#6.7.4\" rel=\"noreferrer\">C99 Draft 6.7.4.3</a>:</p>\n<blockquote>\n<p id=\"so_35003070_35003915_0\">An inline definition of a function with external linkage shall not contain a definition of a modifiable object with static storage duration, and shall not contain a reference to an identifier with internal linkage.</p>\n</blockquote>\n<p>This makes sense, because compiler wants this function to behave equally, regardless of how it chooses to implement it. </p>\n<p>So, in this case the compiler is complaining that your non-static inline function is calling a different function which is <code>static</code>, and it isn't sure that this other function (<code>fprintf</code>) doesn't mutate static storage.</p>\n", "OwnerUserId": "69809", "PostTypeId": "2", "Id": "35003915", "Score": "5", "CreationDate": "2016-01-25T22:45:55.667", "LastActivityDate": "2016-01-25T22:45:55.667"}, "35003469": {"ParentId": "35003070", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>First of all, the behaviour of <code>inline</code> , particularly with respect to linkage of the symbols involved, is different in C to C++. (And also differs between ISO C and GNU C). </p>\n<p>You can read about the C version <a href=\"https://stackoverflow.com/questions/6312597/is-inline-without-static-or-extern-ever-useful-in-c99\">here</a>. </p>\n<p>If you try putting a function body in a header that is included from both C and C++ (within the same project) then you are opening a real can of worms. That situation isn't covered by either language standard.  In practical terms I would treat it as an <a href=\"https://en.wikipedia.org/wiki/One_Definition_Rule\" rel=\"nofollow noreferrer\">ODR violation</a> because the C version of the function is different to the C++ version.</p>\n<p>The safe thing to do is to include only the function prototype in the header,  and have the function body in one of the non-header source files. </p>\n", "OwnerUserId": "1505939", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:17:16.087", "Id": "35003469", "Score": "3", "CreationDate": "2016-01-25T22:16:53.033", "LastActivityDate": "2016-01-25T22:50:10.330"}, "bq_ids": {"n4659": {"so_35003070_35003915_0": {"section_id": 8540, "quality": 0.5294117647058824, "length": 9}}}, "35003070": {"CommentCount": "9", "AcceptedAnswerId": "35003915", "LastEditDate": "2016-08-01T11:34:57.510", "LastEditorUserId": "5906918", "CreationDate": "2016-01-25T21:50:35.180", "LastActivityDate": "2016-08-01T11:34:57.510", "PostTypeId": "1", "ViewCount": "1520", "FavoriteCount": "1", "Title": "Why does inline function need to be declared static if it uses fprintf?", "Id": "35003070", "OwnerUserId": "290182", "Body": "<p>I am refactoring some C code and performing unit testing on the factored out parts (using Google Test). One snippet was used several times in a loop, so in order to expose it to testing I factored it out as an <code>inline</code> function in a header file <code>demo.h</code> which also includes declarations of some other non-<code>inline</code> functions. A simplified version is as follows:</p>\n<pre><code>#ifndef DEMO_H_\n#define DEMO_H_\n#ifdef __cplusplus\nextern \"C\" {\n#endif\ninline void print_line(FILE* dest, const double * data, int length) {\n    for (int s = 0; s &lt; length; s++)\n        fprintf(dest, \"%lf \", data[s]);\n    fprintf(dest, \"\\n\");\n}\n#ifdef __cplusplus\n}\n#endif\n#endif /* MK_H_ */\n</code></pre>\n<p>My test code </p>\n<pre><code>#include \"gtest/gtest.h\"\n#include \"demo.h\"\n#include &lt;memory&gt;\n#include &lt;array&gt;\n#include &lt;fstream&gt;\n\nTEST (demo, print_line) {\n    std::array&lt;double,4&gt; test_data = {0.1, 1.4, -0.05, 3.612};\n\n    const char* testfile = \"print_line_test.txt\";\n    {\n        auto output_file = std::unique_ptr&lt;FILE, decltype(fclose)*&gt;{\n            fopen(testfile, \"w\"), fclose };\n        print_line(output_file.get(), test_data.data(), test_data.size());\n    }\n\n    std::ifstream input(testfile);\n    double dval;\n    for(const auto&amp; v: subsequence_data) {\n        input &gt;&gt; dval;\n        EXPECT_EQ (v, dval);\n    }\n    EXPECT_FALSE (input &gt;&gt; dval) &lt;&lt; \"No further data\";\n}\n\nint main(int argc, char **argv) {\n  ::testing::InitGoogleTest(&amp;argc, argv);\n  return RUN_ALL_TESTS();\n}\n</code></pre>\n<p>This code compiles and runs fine under MinGW g++ 4.8.1 with <code>-std=gnu++0x</code>. </p>\n<p>The original C code then makes of use of this function. A simplified version would be the following:</p>\n<pre><code>#include \"demo.h\"\n\nvoid process_data(const char* fname, double ** lines, int num_lines, int line_length) {\n    FILE* output_file = fopen(fname, \"w\");\n    for (int i=0; i&lt;num_lines; ++i) {\n      print_line(output_file, lines[i], line_length);\n    }\n}\n</code></pre>\n<p>However, when I try to compile my C code using MinGW GCC 4.8.1 with <code>-std=c99</code>, I get the following warning:</p>\n<blockquote>\n<p id=\"so_35003070_35003070_0\">warning: 'fprintf' is static but used in inline function 'print_line'\n  which is not static [enabled by default]</p>\n</blockquote>\n<p>I also get a subsequent error, which may be related:</p>\n<blockquote>\n<p id=\"so_35003070_35003070_1\">undefined reference to `print_line'</p>\n</blockquote>\n<p>Changing the signature in the header to <code>static inline void print_line ...</code> appears to fix the problem. However, I don't like not understanding the cause of the issue. Why did the lack of <code>static</code> not affect the C++ test? And what did the error regarding <code>fprintf</code> actually mean?</p>\n", "Tags": "<c++><c><static><inline>", "Score": "5", "AnswerCount": "2"}});