post_cb({"bq_ids": {"n4140": {"so_20662945_20664932_1": {"length": 5, "quality": 1.0, "section_id": 87}}, "n3337": {"so_20662945_20664932_1": {"length": 5, "quality": 1.0, "section_id": 82}}}, "20664932": {"PostTypeId": "2", "Body": "<p>The compiler error states that <code>\"template argument of type 'int' is not an integral constant expression\"</code> for <code>int const i = { 42 };</code></p>\n<p>According to <a href=\"http://sites.cs.queensu.ca/gradresources/stuff/cpp98.pdf\" rel=\"nofollow noreferrer\">98 standard</a> the template argument should fall into this category:</p>\n<blockquote>\n<p id=\"so_20662945_20664932_0\">14.3.2 / 1</p>\n<p id=\"so_20662945_20664932_1\">A template-argument for a non-type, non-template template-parameter shall be one of:</p>\n<ul>\n<li>an <strong>integral constant-expression</strong> of integral or enumeration type; or</li>\n</ul>\n<p id=\"so_20662945_20664932_2\">...</p>\n</blockquote>\n<p>and the definition of integral constant expression <code>int const i</code> fall into this category:</p>\n<blockquote>\n<p id=\"so_20662945_20664932_3\">5.19 Constant expressions</p>\n<p id=\"so_20662945_20664932_4\">An integral constant-expression can involve only literals (2.13), enumerators, <strong>const variables</strong> or static\n  data members</p>\n</blockquote>\n<p>and for the initialization of <code>i</code> (like Mike Seymour post):</p>\n<blockquote>\n<p id=\"so_20662945_20664932_5\">8.5 Initializers /13</p>\n<p id=\"so_20662945_20664932_6\">If T is a scalar type, then a declaration of the form</p>\n<p id=\"so_20662945_20664932_7\">T x = { a };</p>\n<p id=\"so_20662945_20664932_8\">is equivalent to</p>\n<p id=\"so_20662945_20664932_9\">T x = a;</p>\n</blockquote>\n<p>Now based on <a href=\"https://stackoverflow.com/questions/162480/const-int-vs-int-const-as-function-parameter-in-c-and-c\">this post</a> the declaration of <code>const int</code> and <code>int const</code> should be the same (could not find this specifically in standard) making <code>i</code> a <strong>const variable</strong>. So any usage of <code>i</code> should be an integral constant expression regardless of the initialization method. It appears there is a bug in clang. Checking the web i could not find a bug report only two more or less similar:</p>\n<p><a href=\"http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=666539\" rel=\"nofollow noreferrer\">http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=666539</a></p>\n<p>and </p>\n<p><a href=\"http://lists.cs.uiuc.edu/pipermail/llvmbugs/2011-March/017353.html\" rel=\"nofollow noreferrer\">http://lists.cs.uiuc.edu/pipermail/llvmbugs/2011-March/017353.html</a></p>\n", "LastActivityDate": "2013-12-18T18:01:01.320", "LastEditorUserId": "-1", "Id": "20664932", "CommentCount": "0", "CreationDate": "2013-12-18T17:45:55.323", "ParentId": "20662945", "Score": "2", "OwnerUserId": "498424", "LastEditDate": "2017-05-23T11:56:45.393"}, "20663335": {"PostTypeId": "2", "Body": "<p>Yes, both declarations are equivalent, per C++98 8.5/13:</p>\n<blockquote>\n<p id=\"so_20662945_20663335_0\">If <code>T</code> is a scalar type, then a declaration of the form</p>\n</blockquote>\n<pre><code>T x = { a };\n</code></pre>\n<blockquote>\n<p id=\"so_20662945_20663335_1\">is equivalent to</p>\n</blockquote>\n<pre><code>T x = a;\n</code></pre>\n<p>So both variables are constant, and initialised from a constant expression, so (as far as I can see) should both be usable as constant expressions.</p>\n", "LastActivityDate": "2013-12-18T16:27:04.773", "Id": "20663335", "CommentCount": "0", "CreationDate": "2013-12-18T16:27:04.773", "ParentId": "20662945", "Score": "5", "OwnerUserId": "204847"}, "20663832": {"PostTypeId": "2", "Body": "<p>I think that Clang is right. initializer list is not an expression. There is a difference between initialization of aggregate objects and fundamental objects. When a POD object is initialized then each initializer can be considered as a const expression. However when you deal with fundamental types then initializer list is not an expression and is not a const expression.</p>\n<p>In paragraph #14 of the Standard there is written: </p>\n<blockquote>\n<p id=\"so_20662945_20663832_0\"><em>The source type is not defined when the initializer is brace-enclosed</em>\n  or when it is a parenthesized list of expressions</p>\n</blockquote>\n", "LastActivityDate": "2013-12-18T17:15:05.730", "LastEditorUserId": "2877241", "Id": "20663832", "CommentCount": "0", "CreationDate": "2013-12-18T16:50:23.717", "ParentId": "20662945", "Score": "1", "OwnerUserId": "2877241", "LastEditDate": "2013-12-18T17:15:05.730"}, "20662945": {"ViewCount": "538", "Body": "<p>I stumbled upon the code which I do not understand. Here's a simplified version of it:</p>\n<pre><code>template &lt;int&gt; struct A {};\n\nint const i = { 42 };\ntypedef A&lt;i&gt; Ai;\n\nint const j = 42;\ntypedef A&lt;j&gt; Aj;\n</code></pre>\n<p>This code compiles with GCC in C++98 mode, but not in Clang. Clang produces the following error:</p>\n<pre><code>$ clang -Wall -Wextra -std=c++98 -c test.cpp\n\ntest.cpp:4:11: error: non-type template argument of type 'int' is not an integral constant expression\ntypedef A&lt;i&gt; Ai;\n          ^\ntest.cpp:4:11: note: initializer of 'i' is not a constant expression\ntest.cpp:3:11: note: declared here\nint const i = { 42 };\n          ^\n</code></pre>\n<p>As far as I understand initialization of <code>int</code> with and without curly braces should be equivalent. Clang initializes <code>i</code> correctly to <code>42</code>, just doesn't think it's a compile time constant.</p>\n<p>This code compiles well in C++11 mode.</p>\n<p>Is there a reason <code>j</code> is treated as a compile time constant and <code>i</code> is not? Or is it simply a bug in Clang?</p>\n<p><strong>Update:</strong> I opened a <a href=\"http://llvm.org/bugs/show_bug.cgi?id=18283\" rel=\"nofollow\">ticket</a> in LLVM bug tracker with this issue.</p>\n", "AcceptedAnswerId": "20664932", "Title": "C++98 curly brace const scalar initialization", "CreationDate": "2013-12-18T16:07:31.560", "Id": "20662945", "CommentCount": "4", "LastEditDate": "2013-12-19T17:39:35.547", "PostTypeId": "1", "LastEditorUserId": "362938", "LastActivityDate": "2013-12-19T17:39:35.547", "Score": "5", "OwnerUserId": "362938", "Tags": "<c++><gcc><clang><c++98>", "AnswerCount": "3"}});