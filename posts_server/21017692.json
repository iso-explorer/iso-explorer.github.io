post_cb({"bq_ids": {"n4140": {"so_21017692_21018308_1": {"length": 11, "quality": 1.0, "section_id": 386}}, "n3337": {"so_21017692_21018308_1": {"length": 11, "quality": 1.0, "section_id": 377}}, "n4659": {"so_21017692_21018308_1": {"length": 11, "quality": 1.0, "section_id": 403}}}, "21018308": {"Id": "21018308", "PostTypeId": "2", "Body": "<p>Stolen from this <a href=\"https://stackoverflow.com/a/12847286/1508519\">answer</a>, the standard says:</p>\n<blockquote>\n<p id=\"so_21017692_21018308_0\">12.3 Conversions [class.conv]</p>\n<p id=\"so_21017692_21018308_1\">4 At most one user-defined conversion (constructor or conversion function) is implicitly applied to a single value.</p>\n</blockquote>\n<p>You're trying to perform two in one step, <code>S</code> which needs to be converted for <code>B</code>'s constructor that accepts an <code>A</code>, and then another for <code>A</code>'s constructor that accepts an <code>S</code>. The solution is to first cast <code>S</code> into an <code>A</code>:</p>\n<pre><code>B b1 = static_cast&lt;A&gt;(s);\n</code></pre>\n", "OwnerDisplayName": "user1508519", "LastEditorUserId": "-1", "LastActivityDate": "2014-01-09T10:59:58.520", "Score": "5", "CreationDate": "2014-01-09T10:59:58.520", "ParentId": "21017692", "CommentCount": "4", "LastEditDate": "2017-05-23T12:03:47.687"}, "21017692": {"ViewCount": "97", "Body": "<p>I've discovered a discrepancy between the Microsoft Visual C++ compiler, and gcc-4.8.1 (as provided by ideone.com). Consider the following SSCCE:</p>\n<pre><code>struct S\n{\n  int x;\n};\n\nclass A\n{\npublic:\n  int x;\n  A(const S&amp; s) : x(s.x) {}\n};\n\nclass B\n{\n  int x, y;\n\npublic:\n  template &lt;typename T&gt; explicit B(const T&amp; t) : x(t.x), y(t.y) {}\n\n  B(const A&amp; a) : x(a.x), y(0) {}\n};\n\nint main() {\n  S s = {1};\n\n  B b1 = s; // Compiles OK on MSVC++;\n            // Fails on gcc - conversion from \u2018S\u2019 to non-scalar type \u2018B\u2019 requested\n\n  B b2(s);  // Fails on both - Error: y is not a member of S in B::B&lt;S&gt;(const T &amp;)\n}\n</code></pre>\n<p>I understand why the line <code>B b2(s);</code> fails - the <code>explicit</code> constructor matches so it's tried; but <code>t.y</code> doesn't exist. Fine.</p>\n<p>But I can't work out whether MSVC++ is correct in allowing <code>B b1 = s;</code>, or whether gcc is correct in rejecting it. MSVC++ is constructing a temporary from <code>A::A(const S&amp;)</code>, and using that to initialise <code>b1</code> via <code>B::B(const A&amp;)</code>; I'm not sure why gcc errors.</p>\n<p>Which compiler's right?</p>\n<p>(As an after note, if I remove the <code>explicit</code> both compilers reject <code>B b1 = s;</code> - presumably because the templated constructor is now fair game for the implicit construction of the temporary.)</p>\n<p><strong>Edit:</strong> From the comments, it appears the MSVC++ also rejects the <code>B b1 = s;</code> line in Visual Studio 2012, so the consensus seems to be it really is an error. In which case - what is the nature of the error? What does that error message <em>mean</em>?</p>\n", "AcceptedAnswerId": "21018308", "Title": "Copy-initialisation and explicit constructor - compiler discrepancy", "CreationDate": "2014-01-09T10:31:33.707", "Id": "21017692", "CommentCount": "7", "LastEditDate": "2014-01-09T10:51:57.433", "PostTypeId": "1", "LastEditorUserId": "93884", "LastActivityDate": "2014-01-09T10:59:58.520", "Score": "4", "OwnerUserId": "93884", "Tags": "<c++><visual-c++><gcc><constructor>", "AnswerCount": "1"}});