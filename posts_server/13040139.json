post_cb({"bq_ids": {"n4140": {"so_13040139_13040241_0": {"length": 44, "quality": 0.8627450980392157, "section_id": 6259}, "so_13040139_13040560_0": {"length": 18, "quality": 0.9473684210526315, "section_id": 6308}, "so_13040139_13040283_2": {"length": 35, "quality": 0.8536585365853658, "section_id": 4908}, "so_13040139_13040283_1": {"length": 38, "quality": 0.926829268292683, "section_id": 4907}}, "n3337": {"so_13040139_13040241_0": {"length": 44, "quality": 0.8627450980392157, "section_id": 6019}, "so_13040139_13040560_0": {"length": 18, "quality": 0.9473684210526315, "section_id": 6065}, "so_13040139_13040283_2": {"length": 35, "quality": 0.8536585365853658, "section_id": 4703}, "so_13040139_13040283_1": {"length": 38, "quality": 0.926829268292683, "section_id": 4702}}, "n4659": {"so_13040139_13040241_0": {"length": 41, "quality": 0.803921568627451, "section_id": 7763}, "so_13040139_13040560_0": {"length": 18, "quality": 0.9473684210526315, "section_id": 7818}, "so_13040139_13040283_2": {"length": 35, "quality": 0.8536585365853658, "section_id": 6317}, "so_13040139_13040283_1": {"length": 38, "quality": 0.926829268292683, "section_id": 6316}}}, "13040139": {"ViewCount": "930", "Body": "<p>Can somebody please explain the following:</p>\n<pre><code>$ cat test.cpp \n#include &lt;string&gt;\nstd::string div;\n$ g++ -c test.cpp \n$ g++ -std=c++11 -c test.cpp \ntest.cpp:2:13: error: 'std::string div' redeclared as different kind of symbol\nIn file included from /usr/include/c++/4.7.1/cstdlib:66:0,\n                 from /usr/include/c++/4.7.1/ext/string_conversions.h:37,\n                 from /usr/include/c++/4.7.1/bits/basic_string.h:2814,\n                 from /usr/include/c++/4.7.1/string:54,\n                 from test.cpp:1:\n/usr/include/stdlib.h:787:14: error: previous declaration of 'div_t div(int, int)'\n$\n</code></pre>\n<p>Shouldn't the <code>div</code> symbol be in <code>std</code> namespace also for C++11 mode? Or is it something specific to my system?</p>\n", "AcceptedAnswerId": "13040283", "Title": "namespace issues in c++11?", "CreationDate": "2012-10-23T22:11:38.673", "Id": "13040139", "CommentCount": "9", "PostTypeId": "1", "LastActivityDate": "2012-12-13T15:31:44.427", "Score": "8", "OwnerUserId": "333421", "Tags": "<c++><gcc><c++11><glibc>", "AnswerCount": "3"}, "13040560": {"Id": "13040560", "PostTypeId": "2", "Body": "<p>17.6.4.3.3/1 states:</p>\n<blockquote>\n<p id=\"so_13040139_13040560_0\">Each name declared as an object with external linkage in a header is reserved to the implementation to designate that library object with external linkage,<sup>182</sup> both in namespace <code>std</code> and in the global namespace.</p>\n</blockquote>\n<p><code>div</code> is a name declared as a function with external linkage in the header cstdlib, and therefore is a reserved name in the global namespace. You're not allowed to use this name.</p>\n", "LastEditorUserId": "365496", "LastActivityDate": "2012-12-13T15:31:44.427", "Score": "1", "CreationDate": "2012-10-23T22:54:02.387", "ParentId": "13040139", "CommentCount": "0", "LastEditDate": "2012-12-13T15:31:44.427", "OwnerUserId": "365496"}, "13040241": {"Id": "13040241", "PostTypeId": "2", "Body": "<p><code>div</code> is a function from <code>&lt;stdlib.h&gt;</code>.</p>\n<p>In C++11, the <code>&lt;c</code><i>blah</i><code>&gt;</code> headers were allowed to place stuff in the global namespace.</p>\n<blockquote>\n<p id=\"so_13040139_13040241_0\">C++11 <strong>\u00a717.6.1.2/4</strong>:<br>\n  \u201cExcept as noted in Clauses 18 through 30 and Annex D, the contents of each header <code>c<i>name</i></code> shall be the same\n  as that of the corresponding header <code><i>name</i>.h</code>, as specified in the C standard library (1.2) or the C Unicode TR, as appropriate, as if by inclusion. In the C++standard library, however, the declarations (except for\n  names which are defined as macros in C) are within namespace scope (3.3.6) of the namespace <code>std</code>. It is\n  unspecified whether these names are first declared within the global namespace scope and are then injected\n  into namespace std by explicit <i>using-declarations</i> (7.3.3).\u201d</br></p>\n</blockquote>\n<p>Reflecting the reality of common C++ implementations.</p>\n<p>So nothing changed, really, except the formal: that the behavior you see is now sanctioned by the standard instead of being an implementation artifact that one had to make allowance for.</p>\n<p>Also, the formal change makes it easier to argue on SO that one should better include <code>.h</code> headers rather than <code>c</code><i>xxx</i> headers\u2026</p>\n", "LastEditorUserId": "464581", "LastActivityDate": "2012-10-23T22:30:48.313", "Score": "3", "CreationDate": "2012-10-23T22:21:50.067", "ParentId": "13040139", "CommentCount": "0", "LastEditDate": "2012-10-23T22:30:48.313", "OwnerUserId": "464581"}, "13040283": {"Id": "13040283", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_13040139_13040283_0\">/usr/include/stdlib.h</p>\n</blockquote>\n<p>Every name in a <code>.h</code> C stdlib header resides in the global namespace (obviously).</p>\n<p>Additionally, any <code>cHEADER</code> C++ stdlib header will define the corresponding names from <code>HEADER.h</code> in the <code>std</code> namespace, but is also allowed to have them in the global namespace (so they can just do</p>\n<pre><code>// cHEADER\n#include &lt;HEADER.h&gt;\n\nnamespace std{\nusing ::one_name_from_HEADER;\nusing ::another_name_from_HEADER;\n// and so on...\n}\n</code></pre>\n<p>and be done with it).</p>\n<p><code>\u00a7D.5 [depr.c.headers]</code></p>\n<blockquote>\n<p id=\"so_13040139_13040283_1\">p2 Every C header, each of which has a name of the form <code>name.h</code>, behaves as if each name placed in the standard library namespace by the corresponding <code>cname</code> header is placed within the global namespace scope. It is unspecified whether these names are first declared or defined within namespace scope (3.3.6) of the namespace std and are then injected into the global namespace scope by explicit using-declarations (7.3.3).</p>\n<p id=\"so_13040139_13040283_2\">p3 [ <em>Example:</em> The header <code>&lt;cstdlib&gt;</code> assuredly provides its declarations and definitions within the namespace std. It may also provide these names within the global namespace. The header <code>&lt;stdlib.h&gt;</code> assuredly provides the same declarations and definitions within the global namespace, much as in the C Standard. It may also provide these names within the namespace std. <em>\u2014end example</em> ]</p>\n</blockquote>\n<p>As you can see, the same is also true the other way around (<code>&lt;HEADER.h&gt;</code> may introduces names to the <code>std</code> namespace, as if</p>\n<pre><code>// HEADER.h\n#include &lt;cHEADER&gt;\n\nusing std::one_name_from_HEADER;\nusing std::another_name_from_HEADER;\n// and so on...\n}\n</code></pre>\n<p>), which makes the whole distinction between those headers rather... useless, really.</p>\n", "LastActivityDate": "2012-10-23T22:25:30.383", "Score": "4", "CreationDate": "2012-10-23T22:25:30.383", "ParentId": "13040139", "CommentCount": "4", "OwnerUserId": "500104"}});