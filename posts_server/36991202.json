post_cb({"bq_ids": {"n4140": {"so_36991202_36991202_3": {"length": 7, "quality": 0.7, "section_id": 6704}, "so_36991202_36991267_0": {"length": 18, "quality": 1.0, "section_id": 31}, "so_36991202_36991202_2": {"length": 10, "quality": 0.6666666666666666, "section_id": 6081}}, "n3337": {"so_36991202_36991202_3": {"length": 7, "quality": 0.7, "section_id": 6459}, "so_36991202_36991267_0": {"length": 18, "quality": 1.0, "section_id": 28}, "so_36991202_36991202_2": {"length": 10, "quality": 0.6666666666666666, "section_id": 5849}}, "n4659": {"so_36991202_36991202_3": {"length": 6, "quality": 0.6, "section_id": 3233}, "so_36991202_36991267_0": {"length": 18, "quality": 1.0, "section_id": 31}, "so_36991202_36991202_2": {"length": 10, "quality": 0.6666666666666666, "section_id": 7577}}}, "36991202": {"ViewCount": "71", "Body": "<p>If the <code>std::size_type</code> of a <code>std::string</code> is that of the default allocator, </p>\n<blockquote>\n<p id=\"so_36991202_36991202_0\"><strong>21.3.1 Class template basic_string</strong><br>\n<code>typedef typename allocator_traits&lt;Allocator&gt;::size_type size_type;</code></br></p>\n</blockquote>\n<p>And the <code>std::size_type</code> for the default allocator is that of <code>std::size_t</code>,</p>\n<blockquote>\n<p id=\"so_36991202_36991202_1\"><strong>20.9.9 The default allocator</strong><br>\n<code>typedef size_t size_type;</code></br></p>\n</blockquote>\n<p>And we know that <code>std::size_t</code> is always an unsigned integer type,    </p>\n<blockquote>\n<p id=\"so_36991202_36991202_2\"><em>C++ Standard</em><br>\n<strong>5.3.3 Sizeof</strong><br>\n  The result of sizeof and sizeof... is a constant of type <code>std::size_t</code>.<br>\n  [ Note: std::size_t is defined in the standard header <code>&lt;cstddef&gt;</code> </br></br></br></p>\n<p id=\"so_36991202_36991202_3\"><strong>8.2 Types</strong><br>\n  The contents are the same as the Standard C library header <code>&lt;stddef.h&gt;</code>, with the following changes:</br></p>\n</blockquote>\n<hr>\n<blockquote>\n<p id=\"so_36991202_36991202_4\"><em>C Standard</em><br>\n<strong>6.5.3.4 The sizeof and _Alignof operators</strong><br>\n  The value of the result of both operators is implementation-defined,<br>\n  and its type (an unsigned integer type) is <code>size_t</code>, defined in\n  <code>&lt;stddef.h&gt;</code> (and other headers).</br></br></br></p>\n</blockquote>\n<p>How can <a href=\"http://en.cppreference.com/w/cpp/string/basic_string/npos\" rel=\"nofollow\">std::basic_string::npos</a> (defined as a <code>size_type</code>) be -1?  </p>\n</hr>", "AcceptedAnswerId": "36991267", "Title": "How can size_type be an unsigned integral if npos is -1?", "CreationDate": "2016-05-02T20:34:58.787", "Id": "36991202", "CommentCount": "2", "PostTypeId": "1", "LastActivityDate": "2016-05-02T20:39:22.397", "Score": "0", "OwnerUserId": "908939", "Tags": "<c++><string><stl><size-t><size-type>", "AnswerCount": "2"}, "36991267": {"Id": "36991267", "PostTypeId": "2", "Body": "<p>The C++ spec requires that signed types can be converted to unsigned types. \u00a74.7/2 states that</p>\n<blockquote>\n<p id=\"so_36991202_36991267_0\">If the destination type is unsigned, the resulting value is the least unsigned integer congruent to the source\n  integer (modulo 2<sup>n</sup> where n is the number of bits used to represent the unsigned type)</p>\n</blockquote>\n<p>This means that the C++ spec guarantees that -1 can be converted to a <code>size_type</code> even if <code>size_type</code> is unsigned, and the result will be equal to the largest possible <code>size_type</code> because adding 1 to that number needs to give back 0.</p>\n", "LastActivityDate": "2016-05-02T20:39:22.397", "CommentCount": "1", "CreationDate": "2016-05-02T20:39:22.397", "ParentId": "36991202", "Score": "4", "OwnerUserId": "501557"}, "36991240": {"Id": "36991240", "PostTypeId": "2", "Body": "<p>The definition uses the fact that unsigned integers follow modular arithmetic, and <code>-1</code> converts to the largest unsigned integer of a given type.</p>\n", "LastActivityDate": "2016-05-02T20:37:11.840", "CommentCount": "1", "CreationDate": "2016-05-02T20:37:11.840", "ParentId": "36991202", "Score": "2", "OwnerUserId": "661519"}});