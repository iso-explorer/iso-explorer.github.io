post_cb({"17854029": {"Id": "17854029", "PostTypeId": "2", "Body": "<p>Error when you try to assign the reference to a constant value\n\"error C2440: 'initializing' : cannot convert from 'const int' to 'int &amp;'\"</p>\n", "LastActivityDate": "2013-07-25T09:26:27.987", "CommentCount": "0", "CreationDate": "2013-07-25T09:26:27.987", "ParentId": "17853767", "Score": "0", "OwnerUserId": "1791142"}, "bq_ids": {"n4140": {"so_17853767_17854139_1": {"length": 5, "quality": 1.0, "section_id": 3221}, "so_17853767_17853925_0": {"length": 5, "quality": 0.5555555555555556, "section_id": 300}}, "n3337": {"so_17853767_17854139_1": {"length": 5, "quality": 1.0, "section_id": 3095}, "so_17853767_17853925_0": {"length": 5, "quality": 0.5555555555555556, "section_id": 291}}, "n4659": {"so_17853767_17854139_1": {"length": 5, "quality": 1.0, "section_id": 3978}, "so_17853767_17853925_0": {"length": 5, "quality": 0.5555555555555556, "section_id": 307}}}, "17853767": {"ViewCount": "109", "Body": "<p>Suppose if I write the following code</p>\n<pre><code>int i=10;\nint &amp;j=i; //a reference in C++,don't confuse it with pointers &amp; address\n</code></pre>\n<p>Does <code>j</code> takes any space in the memory as its simply a reference?</p>\n", "AcceptedAnswerId": "17854139", "Title": "References in C++ and its memory requirement", "CreationDate": "2013-07-25T09:14:14.353", "Id": "17853767", "CommentCount": "7", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2013-07-25T10:06:42.767", "LastEditorUserId": "1624921", "LastActivityDate": "2013-07-25T10:16:23.013", "Score": "0", "OwnerUserId": "1460665", "Tags": "<c++><pointers><memory-management>", "AnswerCount": "3"}, "17853925": {"Id": "17853925", "PostTypeId": "2", "Body": "<p>You can't bind a non-<code>const</code> reference to a <code>const</code> value. The compiler should give you an error:</p>\n<blockquote>\n<p id=\"so_17853767_17853925_0\">invalid initialization of reference of type \u2018int&amp;\u2019 from expression of type \u2018const int\u2019</p>\n</blockquote>\n<p>Even if you do get around this (with, for example, a <code>const_cast</code>), the code will have undefined behavior because you're modifying an originally <code>const</code> value. </p>\n<blockquote>\n<p id=\"so_17853767_17853925_1\">Does i takes any space in the memory as its simply a reference?</p>\n</blockquote>\n<p>That's an implementation detail - it could be optimized out completely. What you need to know is that <code>j</code> is just a nickname for <code>i</code>.</p>\n", "LastActivityDate": "2013-07-25T09:20:55.633", "CommentCount": "0", "CreationDate": "2013-07-25T09:20:55.633", "ParentId": "17853767", "Score": "3", "OwnerUserId": "673730"}, "17854139": {"Id": "17854139", "PostTypeId": "2", "Body": "<p>First of all you are doing invalid initialization of <code>&amp;j</code> as said by Luchian.</p>\n<p>A reference is just a name given to the variable's memory location.You can access the contents of the variable through either the original variable name or the reference. You can read the following declaration :</p>\n<pre><code>int &amp;j=i;\n</code></pre>\n<p>as:</p>\n<p><code>j</code> is an integer reference initialized to <code>i</code>.</p>\n<p>Well, their occupying space is implementation dependent,Its not that they are stored somewhere,  you can think of them just as a label.</p>\n<blockquote>\n<p id=\"so_17853767_17854139_0\"><strong>From C++ Standard (\u00a7 8.3.2 #4)</strong></p>\n<p id=\"so_17853767_17854139_1\">It is <strong>unspecified</strong> whether or not a reference requires storage</p>\n</blockquote>\n<p>The emphasis is mine.</p>\n<p>*<em>NOTE--</em>*References are usually used for function argument lists and function return values.</p>\n", "LastEditorUserId": "1513753", "LastActivityDate": "2013-07-25T10:16:23.013", "Score": "0", "CreationDate": "2013-07-25T09:31:36.100", "ParentId": "17853767", "CommentCount": "2", "OwnerUserId": "1513753", "LastEditDate": "2013-07-25T10:16:23.013"}});