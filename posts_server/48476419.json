post_cb({"bq_ids": {"n4140": {"so_48476419_48476436_0": {"length": 16, "quality": 0.5333333333333333, "section_id": 3314}}, "n4659": {"so_48476419_48476436_0": {"length": 16, "quality": 0.5333333333333333, "section_id": 4080}}}, "48476419": {"ViewCount": "137", "LastEditDate": "2018-01-27T14:20:08.377", "AcceptedAnswerId": "48476440", "Title": "Is the string \"Hello\\0\" equal to {'H','e','l','l','o','\\0'} or {'H','e','l','l','o','\\0'}?", "CreationDate": "2018-01-27T13:44:26.590", "LastActivityDate": "2018-01-27T14:20:08.377", "CommentCount": "7", "Body": "<p>Is the string <code>\"Hello\\n\"</code> equal to<br>\n<code>{'H','e','l','l','o','\\','n','\\0'}</code>  or<br>\n<code>{'H','e','l','l','o','\\n','\\0'}</code>?</br></br></p>\n<p>Does adding escape sequences in string definitions like:  </p>\n<pre><code>char arr[] = \"Hello\\n\";\n</code></pre>\n<p>Create strings like:</p>\n<pre><code>char arr[] = {'H','e','l','l','o','\\','n','\\0'};\n</code></pre>\n<p>or strings like:</p>\n<pre><code>char arr[] = {'H','e','l','l','o','\\n','\\0'};\n</code></pre>\n<p>also is the NULL character '\\0' added every time when a declaration like <code>char* foo = \"HelloWorld!\"</code>  is used. </p>\n", "PostTypeId": "1", "LastEditorUserId": "7733418", "Id": "48476419", "Score": "-1", "OwnerUserId": "9276160", "Tags": "<c++><c><string>", "AnswerCount": "2"}, "48476440": {"PostTypeId": "2", "LastEditDate": "2018-01-27T13:52:48.960", "ParentId": "48476419", "CommentCount": "0", "LastEditorUserId": "6525260", "LastActivityDate": "2018-01-27T13:52:48.960", "CreationDate": "2018-01-27T13:47:05.203", "Id": "48476440", "Score": "6", "Body": "<p>Your second interpretation is correct, since the escape sequence you are talking about (newline), is only 1 character in length. The NULL character <em>is</em> added to to the end every time you make such a declaration.</p>\n<p>The reason your first interpretation is incorrect, is because \\ is the escape character, meaning it would escape the quote right after it. You can even see this in Stack Overflow's syntax highlighting!</p>\n<pre><code>char arr[] = {'H','e','l','l','o','\\','n',\\0'};\n//  See how the n is not highlighted --^\n</code></pre>\n<p>As evident, the <code>n</code> is outside the quotes and is interpreted as a keyword or an identifier.</p>\n", "OwnerUserId": "6525260"}, "48476436": {"PostTypeId": "2", "LastEditDate": "2018-01-27T14:16:26.640", "ParentId": "48476419", "CommentCount": "0", "LastEditorUserId": "3796113", "LastActivityDate": "2018-01-27T14:16:26.640", "CreationDate": "2018-01-27T13:46:40.030", "Id": "48476436", "Score": "5", "Body": "<p><code>\"Hello\\n\"</code> means <code>{'H','e','l','l','o','\\n','\\0'}</code>. It's <code>\\n</code> is the newline character. </p>\n<pre><code>char* foo = \"HelloWorld!\"\n</code></pre>\n<p>is assigning the decayed pointer to the literal <code>char</code> array to the <code>char*</code> <code>foo</code>. And yes that string literal is <code>null</code> terminated char array.</p>\n<p>Note that <code>char* foo = ...</code> and <code>char foo[]=\"..\"</code> are two different things. The second one initializes the char array <code>foo</code> with the content of the string literal. First one is simply pointing to the immutable literal string(<code>foo</code> is pointing to that literal string).</p>\n<p>From <a href=\"http://port70.net/~nsz/c/c11/n1570.html#6.7.9\" rel=\"nofollow noreferrer\">standard</a> 6.7.9</p>\n<blockquote>\n<p id=\"so_48476419_48476436_0\">An array of character type may be initialized by a character string literal or UTF-8 string literal, optionally enclosed in braces. <em>Successive bytes of the string literal (<strong>including the terminating null character if there is room or if the array is of unknown size</strong>) initialize the elements of the array</em>.</p>\n</blockquote>\n<p>If you compiled your code with <code>char arr[] = {'H','e','l','l','o','\\','n',\\0'};</code> you will likely to see the message </p>\n<pre><code>error: stray '\\' in program\n</code></pre>\n<p>From <a href=\"http://port70.net/~nsz/c/c11/n1570.html#5.2.1\" rel=\"nofollow noreferrer\">standard</a> 5.2.1 again:</p>\n<blockquote>\n<p id=\"so_48476419_48476436_1\"><em>In a character constant or string literal, members of the execution character set shall be represented by corresponding members of the source character set or by escape sequences consisting of <strong>the backslash <code>\\</code> followed by one or more characters</strong></em></p></blockquote>. A byte with all bits set to 0, called the null character, shall exist in the basic execution character set; it is used to terminate a character string.\n\n", "OwnerUserId": "3796113"}});