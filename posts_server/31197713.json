post_cb({"bq_ids": {"n4140": {"so_31197713_31197713_2": {"length": 20, "quality": 1.0, "section_id": 3487}, "so_31197713_31197713_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 3487}}, "n3337": {"so_31197713_31197713_2": {"length": 20, "quality": 1.0, "section_id": 3352}, "so_31197713_31197713_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 3352}}, "n4659": {"so_31197713_31197713_2": {"length": 20, "quality": 1.0, "section_id": 4250}, "so_31197713_31197713_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 4250}}}, "41197795": {"Id": "41197795", "PostTypeId": "2", "Body": "<p>uint_fast32_t is specified to be the fastest unsigned integer type with width of at least 32 bits.</p>\n<p>In C++ type system, both character and integer types are integral types, but character types are not integer types (nor vice-versa).</p>\n<p>Finally, unsigned integer types are exactly the ones enumerated for random generators.</p>\n<p>My conclusion is that using uint_fast32_t complies with the standard (unless I missed some part of the standard where it is specifically allowed for uint_fast32_t to be a nonstsndard type, or for the definition of integer type to include nonstandard types).</p>\n<p>However, I believe the spec should be fixed to try to avoid ambiguous interpretations.</p>\n", "LastEditorUserId": "7208919", "LastActivityDate": "2016-12-18T23:44:25.293", "Score": "1", "CreationDate": "2016-12-17T10:51:12.960", "ParentId": "31197713", "CommentCount": "0", "OwnerUserId": "7208919", "LastEditDate": "2016-12-18T23:44:25.293"}, "41083955": {"Id": "41083955", "PostTypeId": "2", "Body": "<p>I'm no expert, but my answer is that yes it is a defect, if you are correct that <code>uint_fast32_t</code> need not be one of those types according to the standard.  </p>\n<p>The proposal in the NAD issue 2326 you referenced would appear to also resolve this defect.</p>\n", "LastActivityDate": "2016-12-11T07:30:02.140", "CommentCount": "0", "CreationDate": "2016-12-11T07:30:02.140", "ParentId": "31197713", "Score": "0", "OwnerUserId": "1349673"}, "31197713": {"ViewCount": "664", "Body": "<p>Section 26.5.1.1 paragraph 1 of the C++11 standard (N3242) says:</p>\n<blockquote>\n<p id=\"so_31197713_31197713_0\">Throughout this subclause 26.5, the effect of instantiating a template:</p>\n<p id=\"so_31197713_31197713_1\">[...]</p>\n<p id=\"so_31197713_31197713_2\">f) that has a template type parameter named <code>UIntType</code> is \n  undefined unless the corresponding template\n  argument is cv-unqualified and is one of <code>unsigned short</code>, <code>unsigned int</code>, <code>unsigned long</code>, or <code>unsigned long long</code>.</p>\n</blockquote>\n<p>And it defines the linear congruential generator in 26.5.3.1. The definition of the class starts like this:</p>\n<pre><code>template&lt;class UIntType, UIntType a, UIntType c, UIntType m&gt;\nclass linear_congruential_engine\n</code></pre>\n<p><code>minstd_rand0</code> seems to violate this restriction:</p>\n<pre><code>typedef linear_congruential_engine&lt;uint_fast32_t, 16807, 0, 2147483647&gt;\n    minstd_rand0;\n</code></pre>\n<p>As it uses uint_fast32_t (which isn't guaranteed to be one of <code>unsigned short</code>, <code>unsigned int</code>, <code>unsigned long</code>, or <code>unsigned long long</code>) in <code>minstd_rand0</code> for a template parameter named <code>UIntType</code>, it appears to have undefined effect to <code>#include &lt;random&gt;</code>, or at least to use <code>minstd_rand0</code>. This problem applies to other predefined RNGs as well, and it does not appear to be fixed in C++14.</p>\n<p>My questions are:</p>\n<ul>\n<li>Is this really a contradiction (or rather an extreme amount of undefined behaviour), or have I missed something?</li>\n<li>Has this been mentioned in a defect report?</li>\n</ul>\n<p><strong>Edit:</strong> I have noticed that <a href=\"http://cplusplus.github.io/LWG/lwg-closed.html#2326\" rel=\"nofollow noreferrer\">this</a> defect report seems to be related to this problem.</p>\n", "Title": "C++11 random number generator UIntType contradiction", "CreationDate": "2015-07-03T02:55:07.307", "LastActivityDate": "2017-02-20T07:38:14.213", "CommentCount": "7", "FavoriteCount": "3", "PostTypeId": "1", "LastEditDate": "2017-02-20T07:38:14.213", "LastEditorUserId": "4071916", "Id": "31197713", "Score": "17", "OwnerUserId": "4071916", "Tags": "<c++><c++11><language-lawyer>", "AnswerCount": "3"}, "41084047": {"Id": "41084047", "PostTypeId": "2", "Body": "<p>Yes and no. Per section 18.4.1, <code>uint_fast32_t</code> Has to be an alias to an unsigned integer type. While the only unsigned integer types in C++ are unsigned char, short, int, long, long, long (3.9.1) So the only scenario that the section you mentioned can be a contradiction is that char is somehow 32-bits or wider and and uint_fast32_t is defined to an alias to unsigned char. </p>\n", "LastActivityDate": "2016-12-11T07:47:19.383", "CommentCount": "0", "CreationDate": "2016-12-11T07:47:19.383", "ParentId": "31197713", "Score": "1", "OwnerUserId": "794424"}});