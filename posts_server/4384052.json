post_cb({"bq_ids": {"n4140": {"so_4384052_4384064_0": {"length": 17, "quality": 0.7083333333333334, "section_id": 435}, "so_4384052_4384052_0": {"length": 15, "quality": 0.6818181818181818, "section_id": 435}}, "n3337": {"so_4384052_4384064_0": {"length": 17, "quality": 0.7083333333333334, "section_id": 427}, "so_4384052_4384052_0": {"length": 15, "quality": 0.6818181818181818, "section_id": 427}}, "n4659": {"so_4384052_4384064_0": {"length": 17, "quality": 0.7083333333333334, "section_id": 454}, "so_4384052_4384052_0": {"length": 15, "quality": 0.6818181818181818, "section_id": 454}}}, "4384052": {"ViewCount": "144", "Body": "<p>In C++98 </p>\n<blockquote>\n<p id=\"so_4384052_4384052_0\"><strong>12.6.2/4</strong> : After the call to a constructor for class X has completed, if a member of X is neither specified in the constructor's <em>mem-initializers</em>, nor default-initialized, <em>nor initialized during execution of the body of the constructor</em>, the member has indeterminate value.</p>\n</blockquote>\n<p>What does <em>nor initialized during execution of the body of the constructor</em> mean? Can a member be <em>initialized</em> inside the body of the constructor?</p>\n", "AcceptedAnswerId": "4384064", "Title": "Confusion in understanding C++ standards", "CreationDate": "2010-12-08T04:00:33.133", "Id": "4384052", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2010-12-08T04:09:37.177", "Score": "11", "OwnerUserId": "534519", "Tags": "<c++><standards>", "AnswerCount": "2"}, "4384064": {"Id": "4384064", "PostTypeId": "2", "Body": "<p><em>nor initialized during execution of the body of the constructor</em> is not correct IMHO.</p>\n<p>The wordings have been changed in C++03 from <em>nor initialized</em> (in C++98) to <em>nor given a value</em></p>\n<blockquote>\n<p id=\"so_4384052_4384064_0\">After  the  call  to  a  constructor  for  class X has  completed,  if  a  member  of X is  neither  specified  in  the constructor\u2019s mem-initializers, nor default-initialized, nor value-initialized, <strong>nor given a value</strong> during execution of the body of the constructor, the member has indeterminate value.</p>\n</blockquote>\n", "LastActivityDate": "2010-12-08T04:02:56.207", "CommentCount": "5", "CreationDate": "2010-12-08T04:02:56.207", "ParentId": "4384052", "Score": "11", "OwnerUserId": "165520"}, "4384087": {"Id": "4384087", "PostTypeId": "2", "Body": "<p>It's actually very simple.  class/struct members can include objects with default constructors, but if they don't, and you don't bother to give them a value in the initialiser list, nor set them within the body of the constructor, then basically the memory that they occupy - whatever was scrounged for them from the stack or heap - will still have old garbage in there, i.e. an indeterminate value.</p>\n<p>Consider:</p>\n<pre><code>struct X\n{\n    X() : x1(1) { x2 = 2; }\n    double x1, x2, x3;\n    std::string x4;\n};\n</code></pre>\n<p>Here, <code>x1</code> and <code>x2</code> are explicitly initialised by <code>X</code>'s constructor, and <code>x4</code> - being a <code>std::string</code> - is default constructed to be \"\" / length 0.  <code>x3</code>, however, could be anything - and shouldn't be read from until after it's been set (it's undefined behaviour and really could bite on some systems - consider that the bit pattern of the memory it occupies may not even be a valid value for a double, so reading from it might trigger some CPU exception/trap/interrupt).</p>\n", "LastActivityDate": "2010-12-08T04:09:37.177", "CommentCount": "3", "CreationDate": "2010-12-08T04:09:37.177", "ParentId": "4384052", "Score": "3", "OwnerUserId": "410767"}});