post_cb({"31210366": {"CommentCount": "0", "ViewCount": "119", "CreationDate": "2015-07-03T15:40:36.950", "LastActivityDate": "2015-07-03T16:19:04.170", "Title": "Can a standard library implementation specialize standard types?", "PostTypeId": "1", "Id": "31210366", "Score": "8", "Body": "<p>For instance, let's assume for the sake of the argument that a more efficient (storage, operations on it) implementation for a vector of integral types is found (compared to the generic vector implementation). Can a standard complying library do something like:</p>\n<pre><code>template &lt;class T, class A, class Enable = void&gt;\nclass vector { ... };\n\ntemplate &lt;class T&gt;\nclass vector&lt;T, A, std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;&gt; { ... };\n</code></pre>\n<p>I think that this would be illegal because of the extra template parameter.</p>\n<p>But what about a little compiler magic: (aside from the extra implementation work) would something like that be allowed:</p>\n<ul>\n<li><code>vector&lt;integral_type, A&gt;</code> to be <em>internally mapped</em> to <code>class vector_integral&lt;T, A&gt;</code> while</li>\n<li><code>vector&lt;anything_else, A&gt;</code> to be <em>internally mapped</em> to <code>class vector&lt;T, A&gt;</code>.</li>\n</ul>\n<hr>\n<p><sub>\n- This is obviously not about specializations explicitly mentioned in the standard, like <code>std::vector&lt;bool&gt;</code>\n</sub></p>\n<p><sub>\n- The specialization would obviously have the same interface and observable behavior.\n</sub></p>\n<p><sub>\n- Let's ignore <code>concepts</code>, as they are not yet standard. Unless you have some facts.\n</sub></p>\n<p><sub>\n- This is a pure academic question (<em>read</em> personal curiosity).\n</sub></p>\n</hr>", "Tags": "<c++><language-lawyer><standards-compliance><c++-standard-library>", "OwnerUserId": "2805305", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_31210366_31210815_0": {"section_id": 6224, "quality": 1.0, "length": 14}}, "n3337": {"so_31210366_31210815_0": {"section_id": 5984, "quality": 1.0, "length": 14}}, "n4659": {"so_31210366_31210815_0": {"section_id": 7727, "quality": 1.0, "length": 14}}}, "31210815": {"ParentId": "31210366", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>As long as the standard library implementation lives up to the guarantees issued by the standard, it is allowed to have specializations. These guarantees obviously include growth complexity, interface functions, and for certain classes the internal layout of the data.</p>\n<p>The <code>vector&lt;bool&gt;</code> specialization is, to my knowledge, included in the standard since its internal data layout differs from the generic <code>vector&lt;T&gt;</code> library class, thus it needs to be specifically allowed by the standard.</p>\n<p>The standtard explicitly says <em>17.5.1.4 ad. 7</em>:</p>\n<blockquote>\n<p id=\"so_31210366_31210815_0\">Complexity requirements specified in the library clauses are upper bounds, and implementations that provide better complexity guarantees satisfy the requirements.</p>\n</blockquote>\n", "OwnerUserId": "111143", "LastEditorUserId": "111143", "LastEditDate": "2015-07-03T16:19:04.170", "Id": "31210815", "Score": "1", "CreationDate": "2015-07-03T16:10:37.740", "LastActivityDate": "2015-07-03T16:19:04.170"}});