post_cb({"13032670": {"CommentCount": "4", "AcceptedAnswerId": "13032765", "PostTypeId": "1", "LastEditorUserId": "413766", "CreationDate": "2012-10-23T14:25:10.327", "LastActivityDate": "2012-10-23T19:39:21.993", "LastEditDate": "2012-10-23T19:39:21.993", "ViewCount": "284", "FavoriteCount": "1", "Title": "Template argument deduction - T is deduced and T&& used", "Id": "13032670", "Score": "1", "Body": "<p>For the example</p>\n<pre><code>template &lt;typename T&gt;\nvoid function(T&amp;&amp; arg)\n</code></pre>\n<p>Can somebody explain in detail how does it end that function signature becomes T&amp; for lvalues and T&amp;&amp; for rvalues passed in ? I know that somehow(standard line needed) T -&gt; T&amp; in the case of lvalues and T -&gt; T in case of revalues and then by combining &amp; and &amp;&amp; it results lvalue/rvalue reference.</p>\n", "Tags": "<c++><templates><c++11>", "OwnerUserId": "413766", "AnswerCount": "2"}, "13032925": {"ParentId": "13032670", "PostTypeId": "2", "CommentCount": "2", "CreationDate": "2012-10-23T14:36:31.797", "Score": "4", "LastEditorUserId": "596781", "LastEditDate": "2012-10-23T15:01:56.660", "Id": "13032925", "OwnerUserId": "596781", "Body": "<p>This is thanks to the reference collapsing rules. Assume that <code>U</code> is a non-reference type; then:</p>\n<pre class=\"lang-none prettyprint-override\"><code>    T = U             T &amp; = U &amp;       T &amp;&amp; = U &amp;&amp;\nIf  T = U &amp;  ,  then  T &amp; = U &amp;  and  T &amp;&amp; = U &amp;    .\n    T = U &amp;&amp;          T &amp; = U &amp;       T &amp;&amp; = U &amp;&amp;\n</code></pre>\n<p>Therefore, if your function argument can bind to an lvalue reference of type <code>U</code>, then <code>T</code> must be de\u00adduced as <code>U &amp;</code> in order for <code>T &amp;&amp;</code> to become <code>U &amp;</code>, and this is the only choice, since lvalues cannot bind to rvalue references. On the other hand, if your argument is an rvalue of type <code>U</code>, then <code>T</code> is de\u00adduced as <code>U</code> so that <code>T &amp;&amp;</code> becomes <code>U &amp;&amp;</code> and your argument can bind.</p>\n<p>The key point is that matching reference type is <code>T &amp;&amp;</code> (and not <code>T</code>!). However, since <code>arg</code> itself is a named variable and thus an lvalue, you must use <code>std::forward&lt;T&gt;(arg)</code> to create an <em>expression</em> that's identical to the one with which your function was called.</p>\n", "LastActivityDate": "2012-10-23T15:01:56.660"}, "bq_ids": {"n4140": {"so_13032670_13032765_0": {"section_id": 3223, "quality": 0.88, "length": 22}}, "n3337": {"so_13032670_13032765_0": {"section_id": 3097, "quality": 1.0, "length": 25}}, "n4659": {"so_13032670_13032765_0": {"section_id": 3980, "quality": 0.88, "length": 22}}}, "13032765": {"ParentId": "13032670", "PostTypeId": "2", "CommentCount": "10", "CreationDate": "2012-10-23T14:29:21.457", "Score": "4", "LastEditorUserId": "500104", "LastEditDate": "2012-10-23T14:34:02.700", "Id": "13032765", "OwnerUserId": "103167", "Body": "<p>The rule is found in section 8.3.2p6.</p>\n<blockquote>\n<p id=\"so_13032670_13032765_0\">If a typedef, a type <em>template-parameter</em>, or a <em>decltype-specifier</em> denotes a type <code>TR</code>\n  that is a reference to a type <code>T</code>, an attempt to create the type \"lvalue reference to <em>cv</em> <code>TR</code>\" creates the type \"lvalue reference to <code>T</code>\", while an attempt to create the type \"rvalue reference to <em>cv</em> <code>TR</code>\" creates the type <code>TR</code>.</p>\n</blockquote>\n<p>Or in tabular form:</p>\n<pre><code>TR   R\n\nT&amp;   &amp;  -&gt; T&amp;  // lvalue reference to cv TR -&gt; lvalue reference to T\nT&amp;   &amp;&amp; -&gt; T&amp;  // rvalue reference to cv TR -&gt; TR (lvalue reference to T)\nT&amp;&amp;  &amp;  -&gt; T&amp;  // lvalue reference to cv TR -&gt; lvalue reference to T\nT&amp;&amp;  &amp;&amp; -&gt; T&amp;&amp; // rvalue reference to cv TR -&gt; TR (rvalue reference to T)\n</code></pre>\n", "LastActivityDate": "2012-10-23T14:34:02.700"}});