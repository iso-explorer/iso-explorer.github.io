post_cb({"12434578": {"Id": "12434578", "PostTypeId": "2", "Body": "<p>C++ Standard 17.6.4.8:</p>\n<blockquote>\n<p id=\"so_12434412_12434578_0\">In certain cases (replacement functions, handler functions, operations on types used to instantiate standard library template components), the C++ standard library depends on components supplied by a C++ program. If these components do not meet their requirements, the Standard places no requirements on the implementation.</p>\n<p id=\"so_12434412_12434578_1\">In particular, the effects are undefined in the following cases:</p>\n<ul>\n<li>...</li>\n<li>if an incomplete type (3.9) is used as a template argument when instantiating a template component,\n  unless specifically allowed for that component.</li>\n</ul>\n</blockquote>\n<p>None of the standard library's container class templates, including <code>list</code>, mention any such allowance for an incomplete type.  So your program is an invalid one that might happen to work with some compilers.  That can't be considered a bug in the standard library implementation.</p>\n", "LastActivityDate": "2012-09-15T04:46:48.643", "CommentCount": "0", "CreationDate": "2012-09-15T04:46:48.643", "ParentId": "12434412", "Score": "3", "OwnerUserId": "459640"}, "bq_ids": {"n4140": {"so_12434412_12434578_0": {"length": 23, "quality": 0.9583333333333334, "section_id": 6323}, "so_12434412_12434578_1": {"length": 5, "quality": 1.0, "section_id": 6324}}, "n3337": {"so_12434412_12434578_0": {"length": 23, "quality": 0.9583333333333334, "section_id": 6080}, "so_12434412_12434578_1": {"length": 5, "quality": 1.0, "section_id": 6081}}, "n4659": {"so_12434412_12434578_0": {"length": 23, "quality": 0.9583333333333334, "section_id": 7833}, "so_12434412_12434578_1": {"length": 5, "quality": 1.0, "section_id": 7834}}}, "12434412": {"ViewCount": "215", "Body": "<p>I think I found a bug in the libc++ list implementation. The following code will produce a compiler error (Field has incomlete type 'foo') when using certain build settings in xcode:</p>\n<pre><code>#include &lt;list&gt;\n\nusing namespace std;\n\nclass foo {\n    public:\n        list&lt;foo&gt; bar;\n};\n</code></pre>\n<p>The settings are the following:</p>\n<p><strong>XCode Version:</strong> 4.4.1<br>\n<strong>C++ Language Dialect:</strong> C++11 or GNU++11<br>\n<strong>C++ Standard library:</strong> LLVM C++ standard library with C++ extensions (libc++11)<br/></br></br></p>\n<p>Using GCCs libstdc++ will resolve the error.<br>\nNot using the C++11 dialect will resolve the error.<br>\nUsing vector instead of list will resolve the error.<br/></br></br></p>\n<p>I think it is a bug in the list implementation, but I am not sure.<br>\nForgive my ignorance, but I don't know what I should do to resolve this issue.<br>\nSwitching to vector is not an option in my project and I definitely need C++11 features. That also includes shared_ptr, but the headers are missing when using GCC. Beside that, apple does not seem to provide new versions of GCC anymore.</br></br></p>\n<p>I would very appreciate it if somebody could recreate this issue, maybe with newer header from libc++.<br/></p>\n<p>Also, if updating LLVM/libc++ would resolve this issue, do you recommend it? </p>\n", "AcceptedAnswerId": "12434578", "Title": "Object hierarchy using std::list from libc++ (bug?)", "CreationDate": "2012-09-15T04:10:01.783", "Id": "12434412", "CommentCount": "0", "LastEditDate": "2012-09-15T04:18:00.100", "PostTypeId": "1", "LastEditorUserId": "1492625", "LastActivityDate": "2012-09-15T04:46:48.643", "Score": "1", "OwnerUserId": "1492625", "Tags": "<xcode><list><stl><libc++>", "AnswerCount": "1"}});