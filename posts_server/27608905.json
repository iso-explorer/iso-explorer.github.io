post_cb({"27608905": {"CommentCount": "4", "ViewCount": "112", "PostTypeId": "1", "LastEditorUserId": "1413395", "CreationDate": "2014-12-22T19:06:26.813", "LastActivityDate": "2014-12-22T19:27:41.500", "Title": "How are inline members of classes compiled?", "AcceptedAnswerId": "27609182", "LastEditDate": "2014-12-22T19:14:47.753", "Id": "27608905", "Score": "1", "Body": "<p>I am new to c++ (and to programming itself) and this is what I heard:</p>\n<p>If we compile an ordinary function, The compiler creates a pointer to that function and place the instructions that make up the body of the function elsewhere. This is how an ordinary function gets compiled. But in case of inline functions, the compiler generates code during compilation and replaces it with the inline function call. </p>\n<p>My question is when member functions (of a C++ class) are compiled, are they treated as inline functions or are they treated as ordinary functions?     </p>\n", "Tags": "<c++><function><class><compilation>", "OwnerUserId": "3633270", "AnswerCount": "4"}, "27609079": {"ParentId": "27608905", "CommentCount": "0", "Body": "<p>Whether to inline a function or not is entirely up to the compiler's discretion, which means that different compilers might have different criteria for function inlining. That being said, you can prompt the compiler to inline a function with keywords such as <code>inline</code>, <code>__inline</code>, and <code>__forceinline</code>. Still, it does not guarantee that your function will be inlined.</p>\n<p>However, there are cases where it's generally impossible to inline. This <a href=\"http://msdn.microsoft.com/en-us/library/z8y1yy88.aspx\" rel=\"nofollow\">link from Microsoft</a> would probably give you a good idea about function inlining.</p>\n<p>An example of a function that cannot be inlined will be a <code>virtual</code> function. As <code>virtual</code> function calls(i.e. which <code>virtual</code> function definition to call) are determined on run-time, it is impossible for the compiler to figure out which exact function definition will be called at each call of the <code>virtual</code> function.</p>\n<pre class=\"lang-cpp prettyprint-override\"><code>#include &lt;iostream&gt;\n\nclass Base\n{\npublic:\n  virtual int VirtualFunc();\n};\n\nclass Derived1 : public Base\n{\npublic:\n  virtual int VirtualFunc() { return 1; }\n};\n\nclass Derived2 : public Base\n{\npublic:\n  virtual int VirtualFunc() { return 2; }\n};\n\nint main(void)\n{\n  Base* pBase;\n\n  size_t choice;\n  std::cin &gt;&gt; choice; //Get user input\n  if(choice == 1) //If user inputs 1, create a Derived1\n    pBase = new Derived1;\n  else if(choice == 2) //If user inputs 2, create a Derived2\n    pBase = new Derived2;\n\n  pBase-&gt;VirtualFunc(); //At compile-time, no idea if pBase will be Derived1 or Derived2\n\n  return 0;\n}\n</code></pre>\n<p>Thank you for reading.</p>\n", "OwnerUserId": "4146185", "PostTypeId": "2", "Id": "27609079", "Score": "2", "CreationDate": "2014-12-22T19:20:05.413", "LastActivityDate": "2014-12-22T19:20:05.413"}, "27609054": {"ParentId": "27608905", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>They are just like normal functions, with one exception: if you write the function definition inside the class definition (example below), then the function is automatically given the <code>inline</code> keyword:</p>\n<blockquote>\n<p id=\"so_27608905_27609054_0\"><code>[C++11: 9.3/2]:</code> <strong>A member function may be defined (8.4) in its class definition, in which case it is an <em>inline</em> member function</strong> (7.1.2), or it may be defined outside of its class definition if it has already been declared but not defined in its class definition.</p>\n</blockquote>\n<pre><code>struct T\n{\n   void foo()   // the same as `inline void foo()`\n   {\n      // ...\n   }\n};\n</code></pre>\n<p>That doesn't automatically mean the class will be inlined, though; the <code>inline</code> keyword is just a hint and is largely ignored nowadays when it comes to deciding whether to <em>actually</em> inline a function, though it does assuredly affect linkage.</p>\n", "OwnerUserId": "4386278", "LastEditorUserId": "560648", "LastEditDate": "2014-12-22T19:20:28.480", "Id": "27609054", "Score": "5", "CreationDate": "2014-12-22T19:17:54.440", "LastActivityDate": "2014-12-22T19:20:28.480"}, "27609182": {"ParentId": "27608905", "CommentCount": "0", "Body": "<p>You asked:</p>\n<blockquote>\n<p id=\"so_27608905_27609182_0\">are they treated as inline functions or are they treated as ordinary functions?</p>\n</blockquote>\n<p>Member functions of classes can be inline or non-inline depending on how they are declared and defined.</p>\n<p>Here's the relevant info from the standard:</p>\n<blockquote>\n<p id=\"so_27608905_27609182_1\"><strong>9.3 Member functions</strong></p>\n<p id=\"so_27608905_27609182_2\">2 A member function may be defined (8.4) in its class definition, in which case it is an <em>inline</em> member function (7.1.2), or it may be defined outside of its class definition if it has already been declared but not defined in its class definition. A member function definition that appears outside of the class definition shall appear in a namespace scope enclosing the class definition...</p>\n</blockquote>\n<p>Example:</p>\n<pre><code>class A\n{\n    A() : data(0) {} // Inline function\n\n    inline A(A const&amp; copy) : data(copy.data) {}\n                            // Inline function. The keyword inline\n                            // can be used but not necessary.\n    int data;\n};\n</code></pre>\n<blockquote>\n<p id=\"so_27608905_27609182_3\">3 An <code>inline</code> member function (whether static or non-static) may also be defined outside of its class definition provided either its declaration in the class definition or its definition outside of the class definition declares the function as <code>inline</code>. [ <em>Note:</em> Member functions of a class in namespace scope have external linkage. Member functions of a local class (9.8) have no linkage. See 3.5. <em>\u2014end note</em> ]</p>\n</blockquote>\n<p>Example:</p>\n<pre><code>class A\n{\n    A(); // Declaration doesn't say whether the function is inline or not.\n    inline A(A const&amp; copy); // Declaration says the function is inline.\n    int data;\n};\n\ninline A::A() : data(0) {} // Implementation says the function is inline.\n\ninline A(A const&amp; copy) : data(copy.data) {}\n</code></pre>\n<blockquote>\n<p id=\"so_27608905_27609182_4\">4 There shall be at most one definition of a non-inline member function in a program; no diagnostic is required. There may be more than one inline member function definition in a program. See 3.2 and 7.1.2.</p>\n</blockquote>\n<p>Example:</p>\n<pre><code>class A\n{\n    A(); // Declaration doesn't say whether the function is inline or not.\n    inline A(A const&amp; copy); // Declaration says the function is inline.\n    int data;\n};\n\ninline A(A const&amp; copy) : data(copy.data) {}\n// Must be defined in a .h file since the declaration says the function is inline.\n\nA::A() : data(0) {} // Non-inline implementation.\n                    // It must be defined in only one translation unit (a .cpp file, not a .h file). \n</code></pre>\n", "OwnerUserId": "434551", "PostTypeId": "2", "Id": "27609182", "Score": "3", "CreationDate": "2014-12-22T19:27:41.500", "LastActivityDate": "2014-12-22T19:27:41.500"}, "27608975": {"ParentId": "27608905", "CommentCount": "4", "Body": "<p>Compilation of class methods works same as standalone functions. If you put <code>inline</code> keyword before it, compiler will try to insert it's code to place, where it is called, if it's possible.</p>\n", "OwnerUserId": "3575426", "PostTypeId": "2", "Id": "27608975", "Score": "2", "CreationDate": "2014-12-22T19:12:08.377", "LastActivityDate": "2014-12-22T19:12:08.377"}, "bq_ids": {"n4140": {"so_27608905_27609182_4": {"section_id": 5883, "quality": 0.95, "length": 19}, "so_27608905_27609182_2": {"section_id": 5881, "quality": 0.9487179487179487, "length": 37}, "so_27608905_27609054_0": {"section_id": 5881, "quality": 0.8571428571428571, "length": 24}, "so_27608905_27609182_3": {"section_id": 5882, "quality": 0.9333333333333333, "length": 42}}, "n3337": {"so_27608905_27609182_4": {"section_id": 5654, "quality": 0.95, "length": 19}, "so_27608905_27609182_2": {"section_id": 5652, "quality": 0.9487179487179487, "length": 37}, "so_27608905_27609054_0": {"section_id": 5652, "quality": 0.8571428571428571, "length": 24}, "so_27608905_27609182_3": {"section_id": 5653, "quality": 0.9333333333333333, "length": 42}}, "n4659": {"so_27608905_27609182_4": {"section_id": 7366, "quality": 0.85, "length": 17}, "so_27608905_27609182_2": {"section_id": 7364, "quality": 0.9487179487179487, "length": 37}, "so_27608905_27609054_0": {"section_id": 7364, "quality": 0.8571428571428571, "length": 24}, "so_27608905_27609182_3": {"section_id": 7365, "quality": 0.9111111111111111, "length": 41}}}});