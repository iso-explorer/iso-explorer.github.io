post_cb({"46911517": {"ParentId": "46910844", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>Your program is ill-formed.<br>\n<strong>\u00a77.1.6.4/[dcl.spec.auto]</strong> states:</br></p>\n<blockquote>\n<p id=\"so_46910844_46911517_0\">A program that uses <code>auto</code> or <code>decltype(auto)</code> in a context not explicitly allowed in this section is ill-formed.</p>\n</blockquote>\n<p>There, I cannot find anything that should allow you to write this. Generally, <code>decltype(auto)</code> is used in variable and function declarations only. The fact the grammar allows is doesn't mean it's well-formed, though.</p>\n<p>Therefore, writing something like <code>f.~decltype(f)()</code> hasn't been explicitely forbidden and is allowed as stated in the grammar. The fact that the GCC won't compile it is most likely a bug.</p>\n", "OwnerUserId": "7703564", "LastEditorUserId": "7703564", "LastEditDate": "2017-11-10T16:02:07.830", "Id": "46911517", "Score": "10", "CreationDate": "2017-10-24T13:12:15.640", "LastActivityDate": "2017-11-10T16:02:07.830"}, "46910844": {"CommentCount": "3", "ViewCount": "271", "PostTypeId": "1", "LastEditorUserId": "5212827", "CreationDate": "2017-10-24T12:38:24.663", "LastActivityDate": "2017-11-10T16:02:07.830", "Title": "Explicit destructor call with decltype", "AcceptedAnswerId": "46911517", "LastEditDate": "2017-10-24T12:52:00.107", "Id": "46910844", "Score": "10", "Body": "<p>Consider the following snippet:</p>\n<pre><code>struct Foo {};\n\nint main()\n{\n   Foo f;\n   f.~decltype(f)(); // fine with clang, error with gcc\n   f.~decltype(auto)(); // error with both clang and gcc \n}\n</code></pre>\n<p>The rules for an explicit destructor call are handled by the standard grammar with <code>pseudo-destructor-name</code> which is defined as follows:</p>\n<blockquote>\n<p id=\"so_46910844_46910844_0\">pseudo-destructor-name:<br>\n      nested-name-specifier opt  type-name ::\u2009~ type-name <br/>\n      nested-name-specifier template simple-template-id ::\u2009~type-name <br/>\n      ~ type-name <br/>\n      ~ decltype-specifier <br/></br></p>\n</blockquote>\n<p>And:</p>\n<blockquote>\n<p id=\"so_46910844_46910844_1\">decltype-specifier:   <br/>\n  decltype ( expression )  <br/>\n  decltype ( auto ) <br/></p>\n</blockquote>\n<p>Then shouldn't the above snippet be well-formed as per standard? (Not considering the fact that the destructor is called twice and then a third time on the same object.)</p>\n<p><a href=\"https://godbolt.org/g/3DMMuF\" rel=\"noreferrer\">GCC Live</a> <br/>\n<a href=\"https://godbolt.org/g/LsJEMR\" rel=\"noreferrer\">Clang Live</a></p>\n", "Tags": "<c++><c++14><language-lawyer><c++1z>", "OwnerUserId": "5212827", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_46910844_46911517_0": {"section_id": 5450, "quality": 1.0, "length": 8}, "so_46910844_46910844_0": {"section_id": 5984, "quality": 0.8181818181818182, "length": 9}}, "n3337": {"so_46910844_46911517_0": {"section_id": 5244, "quality": 0.875, "length": 7}, "so_46910844_46910844_0": {"section_id": 5752, "quality": 0.8181818181818182, "length": 9}}, "n4659": {"so_46910844_46911517_0": {"section_id": 6877, "quality": 1.0, "length": 8}, "so_46910844_46910844_0": {"section_id": 7484, "quality": 0.8181818181818182, "length": 9}}}});