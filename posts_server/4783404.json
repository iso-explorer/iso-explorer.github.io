post_cb({"4783597": {"Id": "4783597", "PostTypeId": "2", "Body": "<p>Your \"program\" simply returns a value from a global variable.  Everything else is initialization code.  Thus, the standard holds - you just have a very trivial program and more complex initialization.</p>\n", "LastActivityDate": "2011-01-24T15:14:47.400", "CommentCount": "0", "CreationDate": "2011-01-24T15:14:47.400", "ParentId": "4783404", "Score": "4", "OwnerUserId": "529761"}, "4783465": {"Id": "4783465", "PostTypeId": "2", "Body": "<p>main() is a user function called by the C runtime library.</p>\n<p>see also: <a href=\"https://stackoverflow.com/questions/3379190/avoiding-the-main-entry-point-in-a-c-program\">Avoiding the main (entry point) in a C program</a></p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2011-01-24T15:20:01.767", "Score": "4", "CreationDate": "2011-01-24T14:59:45.707", "ParentId": "4783404", "CommentCount": "0", "OwnerUserId": "151501", "LastEditDate": "2017-05-23T11:54:28.677"}, "4788030": {"Id": "4788030", "PostTypeId": "2", "Body": "<p>main is called after initializing all the global variables. </p>\n<p>What the standard does not specify is the order of initialization of all the global variables of all the modules and statically linked libraries.</p>\n", "LastActivityDate": "2011-01-24T22:36:37.727", "CommentCount": "0", "CreationDate": "2011-01-24T22:36:37.727", "ParentId": "4783404", "Score": "1", "OwnerUserId": "209629"}, "bq_ids": {"n4140": {"so_4783404_4783404_0": {"length": 7, "quality": 1.0, "section_id": 7145}, "so_4783404_4784365_0": {"length": 7, "quality": 1.0, "section_id": 7145}}, "n3337": {"so_4783404_4783585_0": {"length": 7, "quality": 0.6363636363636364, "section_id": 5947}, "so_4783404_4783404_0": {"length": 7, "quality": 1.0, "section_id": 6889}, "so_4783404_4784365_0": {"length": 7, "quality": 1.0, "section_id": 6889}}, "n4659": {"so_4783404_4783585_0": {"length": 6, "quality": 0.5454545454545454, "section_id": 6789}, "so_4783404_4783404_0": {"length": 5, "quality": 0.7142857142857143, "section_id": 8646}, "so_4783404_4784365_0": {"length": 5, "quality": 0.7142857142857143, "section_id": 8646}}}, "24442704": {"Id": "24442704", "PostTypeId": "2", "Body": "<p>Seems like an English semantics quibble. The OP refers to his block of code first as \"code\" and later as the \"program.\" The user writes the code, and then the compiler writes the program. </p>\n", "LastActivityDate": "2014-06-27T01:31:22.220", "CommentCount": "0", "CreationDate": "2014-06-27T01:31:22.220", "ParentId": "4783404", "Score": "2", "OwnerUserId": "2158635"}, "4783480": {"Id": "4783480", "PostTypeId": "2", "Body": "<p>Yes, main is the \"entry point\" of every C++ program, excepting implementation-specific extensions.  Even so, some things happen before main, notably global initialization such as for main_ret.</p>\n", "LastActivityDate": "2011-01-24T15:01:12.200", "CommentCount": "0", "CreationDate": "2011-01-24T15:01:12.200", "ParentId": "4783404", "Score": "0", "OwnerUserId": "511601"}, "4784365": {"Id": "4784365", "PostTypeId": "2", "Body": "<p>You are reading the sentence incorrectly.</p>\n<blockquote>\n<p id=\"so_4783404_4784365_0\">A program shall contain a global function called main, <em>which is the designated start of the program.</em></p>\n</blockquote>\n<p>The standard is DEFINING the word \"start\" for the purposes of the remainder of the standard.  It doesn't say that no code executes before <code>main</code> is called.  It says that the start of the program is considered to be at the function <code>main</code>.</p>\n<p>Your program is compliant.  Your program hasn't \"started\" until main is started.  The constructor is called before your program \"starts\" according to the definition of \"start\" in the standard, but that hardly matters.  A LOT of code is executed before <code>main</code> is <em>ever</em> called in every program, not just this example.  </p>\n<p><strong>For the purposes of discussion, your constructor code is executed prior to the 'start' of the program, and that is fully compliant with the standard.</strong></p>\n", "LastActivityDate": "2011-01-24T16:26:55.077", "CommentCount": "4", "CreationDate": "2011-01-24T16:26:55.077", "ParentId": "4783404", "Score": "80", "OwnerUserId": "2915"}, "4783585": {"Id": "4783585", "PostTypeId": "2", "Body": "<p>You tagged the question as \"C\" too, then, speaking strictly about C, your initialization should fail as per section 6.7.8 \"Initialization\" of the ISO C99 standard.</p>\n<p>The most relevant in this case seems to be constraint #4 which says:</p>\n<blockquote>\n<p id=\"so_4783404_4783585_0\">All the expressions in an initializer for an object that\n  has static storage duration shall be constant expressions or string literals.</p>\n</blockquote>\n<p>So, the answer to your question is that the code is not compliant to the C standard.</p>\n<p>You would probably want to remove the \"C\" tag if you were only interested to the C++ standard.</p>\n", "LastEditorUserId": "16827", "LastActivityDate": "2011-01-24T21:56:45.513", "Score": "15", "CreationDate": "2011-01-24T15:13:54.460", "ParentId": "4783404", "CommentCount": "9", "OwnerUserId": "16827", "LastEditDate": "2011-01-24T21:56:45.513"}, "4784190": {"Id": "4784190", "PostTypeId": "2", "Body": "<p>No, C++ does a lot of things to \"set the environment\" prior to the call of main; however, main is the official start of the \"user specified\" part of the C++ program.</p>\n<p>Some of the environment setup is not controllable (like the initial code to set up std::cout; however, some of the environment is controllable like static global blocks (for initializing static global variables).  Note that since you don't have full control prior to main, you don't have full control on the order in which the static blocks get initialized.</p>\n<p>After main, your code is conceptually \"fully in control\" of the program, in the sense that you can both specify the instructions to be performed and the order in which to perform them.  Multi-threading can rearrange code execution order; but, you're still in control with C++ because you specified to have sections of code execute (possibly) out-of-order.</p>\n", "LastActivityDate": "2011-01-24T16:11:30.817", "CommentCount": "4", "CreationDate": "2011-01-24T16:11:30.817", "ParentId": "4783404", "Score": "73", "OwnerUserId": "302139"}, "4783404": {"ViewCount": "16334", "Body": "<p>The section $3.6.1/1 from the C++ Standard reads,</p>\n<blockquote>\n<p id=\"so_4783404_4783404_0\">A program shall contain a global\n  function called <strong>main</strong>, which is the\n  designated <strong>start</strong> of the program.</p>\n</blockquote>\n<p>Now consider this code,</p>\n<pre><code>int square(int i) { return i*i; }\nint user_main()\n{ \n    for ( int i = 0 ; i &lt; 10 ; ++i )\n           std::cout &lt;&lt; square(i) &lt;&lt; endl;\n    return 0;\n}\nint main_ret= user_main();\nint main() \n{\n        return main_ret;\n}\n</code></pre>\n<p>This sample code does what I intend it to do, i.e printing the square of integers from 0 to 9, <strong>before</strong> entering into the <code>main()</code> function which is supposed to be the \"start\" of the program.</p>\n<p>Have a look at the output here : <a href=\"http://www.ideone.com/Niy0R\" rel=\"noreferrer\">http://www.ideone.com/Niy0R</a></p>\n<p>I also compiled it with <code>-pedantic</code> option, GCC 4.5.0. It gives no error, not even warning!</p>\n<p>So my question is, </p>\n<p><strong>Is this code really Standard conformant?</strong></p>\n<p>If it's standard conformant, then does it not invalidate what the Standard says? <code>main()</code> is not start of this program! <code>user_main()</code> executed before the <code>main()</code>. </p>\n<p>I understand that to initialize the global variable <code>main_ret</code>, the <code>use_main()</code> executes first but that is a different thing altogether; the point is that, it <strong>does</strong> invalidate the quoted statement $3.6.1/1 from the Standard, as <code>main()</code> is NOT the <em>start</em> of the program; it is in fact the <strong>end</strong> of <em>this</em> program!</p>\n<hr>\n<p>EDIT:</p>\n<h2>How do you define the  word 'start'?</h2>\n<p>It boils down to the definition of the phrase <em>\"start of the program\"</em>. So how exactly do you define it?</p>\n</hr>", "AcceptedAnswerId": "4784190", "Title": "Is main() really start of a C++ program?", "CreationDate": "2011-01-24T14:54:11.287", "Id": "4783404", "CommentCount": "0", "FavoriteCount": "41", "PostTypeId": "1", "LastEditDate": "2011-01-27T10:56:37.177", "LastEditorUserId": "415784", "LastActivityDate": "2014-06-27T01:31:22.220", "Score": "124", "OwnerUserId": "415784", "Tags": "<c++><standards-compliance><main><entry-point>", "AnswerCount": "11"}, "4783457": {"Id": "4783457", "PostTypeId": "2", "Body": "<p>Your program will not link and thus not run unless there is a main. However main() does not cause the start of the execution of the program because objects at file level have constructors that run beforehand and it would be possible to write an entire program that runs its lifetime before main() is reached and let main itself have an empty body.</p>\n<p>In reality to enforce this you would have to have one object that is constructed prior to main and its constructor to invoke all the flow of the program.</p>\n<p>Look at this:</p>\n<pre><code>class Foo\n{\npublic:\n   Foo();\n\n // other stuff\n};\n\nFoo foo;\n\nint main()\n{\n}\n</code></pre>\n<p>The flow of your program would effectively stem from <code>Foo::Foo()</code></p>\n", "LastActivityDate": "2011-01-24T14:58:58.317", "CommentCount": "9", "CreationDate": "2011-01-24T14:58:58.317", "ParentId": "4783404", "Score": "22", "OwnerUserId": "442284"}, "4783915": {"Id": "4783915", "PostTypeId": "2", "Body": "<p>The compiler often has to add code before main() to <em>be</em> standard compliant. Because the standard specifies that initalization of globals/statics must be done <em>before</em> the program is executed. And as mentioned, the same goes for constructors of objects placed at file scope (globals).</p>\n<p>Thus the original question <em>is</em> relevant to C as well, because in a C program you would still have the globals/static initialization to do before the program can be started.</p>\n<p>The standards assume that these variables are initialized through \"magic\", because they don't say <em>how</em> they should be set before program initialization. I think they considered that as something outside the scope of a programming language standard.</p>\n<p>Edit: See for example ISO 9899:1999 5.1.2:</p>\n<blockquote>\n<p id=\"so_4783404_4783915_0\">All objects with static storage\n  duration shall be initialized (set to\n  their initial values) before program\n  startup. The manner and timing of such\n  initialization are otherwise\n  unspecified.</p>\n</blockquote>\n<p>The theory behind how this \"magic\" was to be done goes way back to C's birth, when it was a programming language intended to be used only for the UNIX OS, on RAM-based computers. In theory, the program would be able to load all pre-initialized data from the executable file into RAM, at the same time as the program itself was uploaded to RAM.</p>\n<p>Since then, computers and OS have evolved, and C is used in a far wider area than originally anticipated. A modern PC OS has virtual addresses etc, and all embedded systems execute code from ROM, not RAM. So there are many situations where the RAM can't be set \"automagically\".</p>\n<p>Also, the standard is too abstract to know anything about stacks and process memory etc. These things must be done too, before the program is started.</p>\n<p>Therefore, pretty much every C/C++ program has some init/\"copy-down\" code that is executed before main is called, in order to conform with the initialization rules of the standards.</p>\n<p>As an example, embedded systems typically have an option called \"non-ISO compliant startup\" where the whole initialization phase is skipped for performance reasons, and then the code actually starts directly from main. But such systems don't conform to the standards, as you can't rely on the init values of global/static variables.</p>\n", "LastActivityDate": "2011-01-24T15:47:08.823", "CommentCount": "0", "CreationDate": "2011-01-24T15:47:08.823", "ParentId": "4783404", "Score": "9", "OwnerUserId": "584518"}, "4783819": {"Id": "4783819", "PostTypeId": "2", "Body": "<p>Section 3.6 as a whole is very clear about the interaction of <code>main</code> and dynamic initializations.  The \"designated start of the program\" is not used anywhere else and is just descriptive of the general intent of <code>main()</code>.  It doesn't make any sense to interpret that one phrase in a normative way that contradicts the more detailed and clear requirements in the Standard.</p>\n", "LastActivityDate": "2011-01-24T15:37:42.627", "CommentCount": "0", "CreationDate": "2011-01-24T15:37:42.627", "ParentId": "4783404", "Score": "10", "OwnerUserId": "459640"}});