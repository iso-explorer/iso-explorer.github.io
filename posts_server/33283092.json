post_cb({"33283092": {"CommentCount": "0", "ViewCount": "83", "CreationDate": "2015-10-22T14:09:38.257", "LastActivityDate": "2015-10-22T14:28:11.620", "Title": "How to take address of an overloaded operator defined as a friend in class body in C++", "AcceptedAnswerId": "33283279", "PostTypeId": "1", "Id": "33283092", "Score": "4", "Body": "<p>How can I take an address of an overloaded operator defined as a friend in a class body?</p>\n<p>I tried the following</p>\n<pre><code>struct S {\n  friend bool operator==(S, S) { return true; }\n};\n\nint main() {\n  bool (*f)(S, S) = &amp;operator==;\n}\n</code></pre>\n<p>But gcc gives an error</p>\n<pre><code>test.cc: In function \u2018int main()\u2019:\ntest.cc:6:30: error: \u2018operator==\u2019 not defined\n   bool (*f)(S, S) = &amp;operator==;\n                              ^\n</code></pre>\n<p>which can be fixed by declaring the operator in the (global) namespace:</p>\n<pre><code>bool operator==(S, S);\n</code></pre>\n<p>Is there a way to take the address without redeclaring the operator?</p>\n", "Tags": "<c++><operator-overloading>", "OwnerUserId": "471164", "AnswerCount": "2"}, "33283499": {"ParentId": "33283092", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_33283092_33283499_0\">Is there a way to take the address without redeclaring the operator?</p>\n</blockquote>\n<p>No, the name is in the scope of class, you can't use it directly.</p>\n<p>From the standard, 11.3$6,7 Friends [class.friend] (bold by me)</p>\n<blockquote>\n<p id=\"so_33283092_33283499_1\">6 A function can be defined in a friend declaration of a class if and\n  only if the class is a non-local class (9.8), the function name is\n  unqualified, and the function has namespace scope. </p>\n<p id=\"so_33283092_33283499_2\">7 Such a function is implicitly inline. A friend function defined in a\n  class is <strong>in the (lexical) scope of the class</strong> in which it is defined. A\n  friend function defined outside the class is not (3.4.1).</p>\n</blockquote>\n", "OwnerUserId": "3309790", "PostTypeId": "2", "Id": "33283499", "Score": "2", "CreationDate": "2015-10-22T14:28:11.620", "LastActivityDate": "2015-10-22T14:28:11.620"}, "33283279": {"ParentId": "33283092", "PostTypeId": "2", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_33283092_33283279_0\">A name first declared in a friend declaration within class or class\n  template X becomes a member of the innermost enclosing namespace of X,\n  but <b>is not accessible for lookup</b> (except argument-dependent lookup\n  that considers X) <b>unless a matching declaration at the namespace scope\n  is provided</b></p>\n</blockquote>\n<p><a href=\"http://en.cppreference.com/w/cpp/language/friend\" rel=\"nofollow noreferrer\">http://en.cppreference.com/w/cpp/language/friend</a>, emphasis mine.</p>\n<p>Generally, you should always declare your friends also outside of a class, unless you explicitly want to hide them from any lookup except ADL (which might be good idea and might be not, I don't have enough experience to judge, and this really depends on a situation.).</p>\n", "OwnerUserId": "3216312", "LastEditorUserId": "3216312", "LastEditDate": "2015-10-22T14:25:20.727", "Id": "33283279", "Score": "5", "CreationDate": "2015-10-22T14:18:08.070", "LastActivityDate": "2015-10-22T14:25:20.727"}, "bq_ids": {"n4140": {"so_33283092_33283279_0": {"section_id": 5485, "quality": 0.6923076923076923, "length": 18}, "so_33283092_33283499_1": {"section_id": 6689, "quality": 1.0, "length": 15}, "so_33283092_33283499_2": {"section_id": 6690, "quality": 0.9444444444444444, "length": 17}}, "n3337": {"so_33283092_33283279_0": {"section_id": 5271, "quality": 0.6538461538461539, "length": 17}, "so_33283092_33283499_1": {"section_id": 6444, "quality": 1.0, "length": 15}, "so_33283092_33283499_2": {"section_id": 6445, "quality": 0.9444444444444444, "length": 17}}, "n4659": {"so_33283092_33283279_0": {"section_id": 6920, "quality": 0.5769230769230769, "length": 15}, "so_33283092_33283499_1": {"section_id": 8164, "quality": 1.0, "length": 15}, "so_33283092_33283499_2": {"section_id": 8165, "quality": 0.9444444444444444, "length": 17}}}});