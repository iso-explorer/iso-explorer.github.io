post_cb({"bq_ids": {"n4140": {"so_35463169_35482857_0": {"length": 77, "quality": 0.9058823529411765, "section_id": 5485}}, "n3337": {"so_35463169_35482857_0": {"length": 81, "quality": 0.9529411764705882, "section_id": 5271}}, "n4659": {"so_35463169_35482857_0": {"length": 70, "quality": 0.8235294117647058, "section_id": 6920}}}, "35482857": {"Id": "35482857", "PostTypeId": "2", "Body": "<p>Standard 7.3.1.2/3 : </p>\n<blockquote>\n<p id=\"so_35463169_35482857_0\">Every name first declared in a namespace is a member of that\n  namespace. <strong>If a friend declaration in a non-local class first declares\n  a class or function the friend class or function is a member of the\n  innermost enclosing namespace. The name of the friend is not found by\n  unqualified lookup (3.4.1) or by qualified lookup (3.4.3) until a\n  matching declaration is provided in that namespace scope (either\n  before or after the class definition granting friendship). If a friend\n  function is called, its name may be found by the name lookup that\n  considers functions from namespaces and classes associated with the\n  types of the function arguments (3.4.2)</strong> . If the name in a friend\n  declaration is neither qualified nor a template-id and the declaration\n  is a function or an elaborated-type-specifier, the lookup to determine\n  whether the entity has been previously declared shall not consider any\n  scopes outside the innermost enclosing namespace.</p>\n</blockquote>\n<p>Ok after little discussion with @Niall I realized that MSVC++ is wrong in this case, since ADL only happens in function call expression and since <code>std::sort</code> is being passed just name of function i.e <code>comparePersonAge</code>, no function <code>comparePersonAge</code> should be found at the time of call to <code>std::sort</code> . Hence GCC and Clang are correct I think </p>\n", "LastEditorUserId": "4882052", "LastActivityDate": "2016-02-18T14:06:18.357", "Score": "1", "CreationDate": "2016-02-18T13:31:50.037", "ParentId": "35463169", "CommentCount": "5", "OwnerUserId": "4882052", "LastEditDate": "2016-02-18T14:06:18.357"}, "35484257": {"Id": "35484257", "PostTypeId": "2", "Body": "<p>A couple of points.</p>\n<ol>\n<li>There's no need to specify <code>inline</code> if it's defined within the class.</li>\n<li>Although that declaration yields a <a href=\"http://en.cppreference.com/w/cpp/language/friend#Notes\" rel=\"nofollow\">friend function</a> which is a member of the enclosing namespace of the class, until it's declared <em>in that namespace</em> explicitly, it's not available for regular lookup\u2014though ADL is allowed.</li>\n</ol>\n<p>So if you want to make it accessible via regular lookup, declare it in the enclosing namespace.</p>\n<p><kbd><a href=\"http://rextester.com/DWC97124\" rel=\"nofollow\">Demo</a></kbd></p>\n", "LastActivityDate": "2016-02-18T14:32:33.370", "CommentCount": "0", "CreationDate": "2016-02-18T14:32:33.370", "ParentId": "35463169", "Score": "0", "OwnerUserId": "602372"}, "35463579": {"Id": "35463579", "PostTypeId": "2", "Body": "<p>The purpose of the <code>friend</code> keyword is to make an exception to the access rules (<code>protected</code> and <code>private</code>), giving a class or function access to members not otherwise allowed.</p>\n<p>So you can declare and define your <code>comparePersonAge()</code> function outside of your class declaration, and use the <code>friend</code> keyword inside the declaration, to give the function access to private members, <code>age</code> specifically.</p>\n", "LastEditorUserId": "2565958", "LastActivityDate": "2016-02-18T13:19:55.317", "Score": "1", "CreationDate": "2016-02-17T17:25:36.810", "ParentId": "35463169", "CommentCount": "0", "OwnerUserId": "2565958", "LastEditDate": "2016-02-18T13:19:55.317"}, "35463169": {"ViewCount": "189", "Body": "<p>I am in the process of moving all of my C++ Windows applications to Ubuntu Linux. This application runs fine on Visual Studio 2015 Community on Windows 7 OS. However, it gives an error when running in Code Blocks on Ubuntu Linux. I have replicated the error message I am getting using the following simple <code>Person</code> class.</p>\n<blockquote>\n<p id=\"so_35463169_35463169_0\">Error Message: 'comparePersonAge' was not declared in this scope</p>\n</blockquote>\n<h3>Person.h</h3>\n<pre><code>#ifndef Person_h\n#define Person_h\n\n#include &lt;string&gt;\n\nclass Person\n{\nprivate:\n    int age;\n    std::string name;\npublic:\n    Person(int a, std::string n) : age(a), name(n) {}\n\n    int getAge()\n    {\n        return age;\n    }\n    std::string getName()\n    {\n        return name;\n    }\n    inline friend bool comparePersonAge(const Person&amp; p1, const Person&amp; p2)\n    {\n        return p1.age &lt; p2.age;\n    }\n};\n\n#endif\n</code></pre>\n<p><strong>main.cpp</strong></p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n#include \"Person.h\"\n\nint main()\n{\n    Person p1(93, \"harold\");\n    Person p2(32, \"james\");\n    Person p3(67, \"tracey\");\n\n    std::vector&lt;Person&gt; v;\n    v.push_back(p1);\n    v.push_back(p2);\n    v.push_back(p3);\n\n    std::sort(v.begin(), v.end(), comparePersonAge);\n\n    std::cout &lt;&lt; v[0].getAge() &lt;&lt; \" \" &lt;&lt; v[1].getAge() &lt;&lt; \" \" &lt;&lt; v[2].getAge()  &lt;&lt; std::endl;\n}\n</code></pre>\n<p>On Windows machine, the output is: <code>32 67 93</code> as expected. On Linux, the error message is as written above.</p>\n<p><strong>Note:</strong> Someone else name DJR discusses this issue in this post: <a href=\"https://stackoverflow.com/questions/16780013/friend-function-not-declared-in-this-scope-error\">Friend function not declared in this scope error</a>.\nHowever, his explanation is very vague I and don't follow his steps.</p>\n<p>He writes:</p>\n<blockquote>\n<p id=\"so_35463169_35463169_1\">Previous comment should have read: It is a bug on the the Linux side. The code should work as written. I have code right now that compiles fine on the Windows side and when I move it to the Linux side I get the same error. Apparently the compiler that you are using on the Linux side does not see/use the friend declaration in the header file and hence gives this error. By simply moving the friend function's definition/implementation in the C++ file BEFORE that function's usage (e.g.: as might be used in function callback assignment), this resolved my issue and should resolve yours also. </p>\n</blockquote>\n<p>I don't know what he means by by moving the friend function's definition in the C++ file before the function's usage. What does this mean precisely?</p>\n", "Title": "Error: 'Friend Member Function Name' was not declared in this scope", "CreationDate": "2016-02-17T17:06:50.750", "LastActivityDate": "2016-02-18T14:32:33.370", "CommentCount": "12", "LastEditDate": "2016-02-17T17:16:56.053", "PostTypeId": "1", "LastEditorUserId": "1324", "Id": "35463169", "Score": "5", "OwnerUserId": "5911365", "Tags": "<c++><linux><oop><codeblocks><friend>", "AnswerCount": "3"}});