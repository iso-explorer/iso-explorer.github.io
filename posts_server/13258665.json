post_cb({"bq_ids": {"n4140": {"so_13258665_13258818_0": {"length": 16, "quality": 1.0, "section_id": 3241}, "so_13258665_13258818_1": {"length": 9, "quality": 1.0, "section_id": 3246}}, "n3337": {"so_13258665_13258818_0": {"length": 16, "quality": 1.0, "section_id": 3114}, "so_13258665_13258818_1": {"length": 9, "quality": 1.0, "section_id": 3119}}, "n4659": {"so_13258665_13258818_0": {"length": 12, "quality": 0.75, "section_id": 3997}, "so_13258665_13258818_1": {"length": 9, "quality": 1.0, "section_id": 4004}}}, "13258806": {"Id": "13258806", "PostTypeId": "2", "Body": "<p>You're right in many ways. <code>F</code> is a function type, and <code>FPT</code> is a function pointer type.</p>\n<p>If you have an object of function type, you can take its address and get a function pointer. However, objects of function type aren't real, first-class C++ objects. Only actual functions are of such a type, and you can't create an object that is a function (other than by declaring a function!) and thus you cannot assign to it (as in <code>F f = foo;</code>).</p>\n<p>The only way you can refer to a function is via a function pointer or reference:</p>\n<pre><code>FPT f1 = &amp;foo;\nF * f2 = &amp;foo;\nF &amp; f3 = foo;\n</code></pre>\n<p>See also <a href=\"https://stackoverflow.com/a/13242329/596781\">this answer</a>.</p>\n<p>Note that for a callback I would prefer the reference type over the pointer type, because it's more natural compared to how you pass any other variable, and because you can apply address-of and decay to the reference and get the pointer, which you can't do with a pointer:</p>\n<pre><code>double callme(F &amp; f, double val)       // not: \"F *\" or \"FPT\"\n{\n    return f(val);\n\n    // \"&amp;f\" and \"std::decay&lt;F&gt;::type\" still make sense\n}\n</code></pre>\n", "LastEditorUserId": "-1", "LastActivityDate": "2012-11-06T20:24:57.973", "Score": "5", "CreationDate": "2012-11-06T20:24:57.973", "ParentId": "13258665", "CommentCount": "0", "OwnerUserId": "596781", "LastEditDate": "2017-05-23T11:48:12.273"}, "13258665": {"ViewCount": "424", "Body": "<p>What is the difference between </p>\n<pre><code>typedef double F(double)\n</code></pre>\n<p>and </p>\n<pre><code>typdedef double (*FPT)(double);\n</code></pre>\n<p>?</p>\n<p>It seems to me that I can pass both as arguments to a function, i.e.</p>\n<pre><code>bar1(FPT f);\nbar2(F f); \n</code></pre>\n<p>but while I can do </p>\n<pre><code>FPT f = &amp;foo;\n</code></pre>\n<p>I can not do</p>\n<pre><code>F f = foo;\n</code></pre>\n<p>i.e. I can not create variables of type F?</p>\n", "AcceptedAnswerId": "13258806", "Title": "function pointer typedef", "CreationDate": "2012-11-06T20:14:47.453", "Id": "13258665", "CommentCount": "0", "LastEditDate": "2012-11-06T20:20:15.360", "PostTypeId": "1", "LastEditorUserId": "695652", "LastActivityDate": "2012-11-06T20:33:01.220", "Score": "0", "OwnerUserId": "695652", "Tags": "<c++><function><pointers><function-pointers>", "AnswerCount": "2"}, "13258818": {"Id": "13258818", "PostTypeId": "2", "Body": "<p>In parameter lists, function types decay to the appropriate function pointer type, such that a function of the same type can be passed as in an argument list, itself decaying to the same pointer type.</p>\n<p>This works the same for arrays; <code>void foo(int arg[4])</code> has actual first argument type <code>int *</code>.</p>\n<blockquote>\n<h3>8.3.5 Functions [dcl.fct]</h3>\n<p id=\"so_13258665_13258818_0\">5 - [...] After determining the type of each parameter, any parameter of type \"array of <code>T</code>\" or \"function returning <code>T</code>\" is adjusted to be \"pointer to <code>T</code>\" or \"pointer to function returning <code>T</code>,\" respectively. [...]</p>\n</blockquote>\n<p>The use of a function type in a declaration is covered in the same section:</p>\n<blockquote>\n<p id=\"so_13258665_13258818_1\">10 - A typedef of function type may be used to declare a function but shall not be used to define a function.</p>\n</blockquote>\n", "LastEditorUserId": "567292", "LastActivityDate": "2012-11-06T20:33:01.220", "Score": "0", "CreationDate": "2012-11-06T20:25:14.953", "ParentId": "13258665", "CommentCount": "0", "OwnerUserId": "567292", "LastEditDate": "2012-11-06T20:33:01.220"}});