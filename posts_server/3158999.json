post_cb({"3430035": {"ParentId": "3158999", "CommentCount": "0", "Body": "<p><code>call(map);</code> implicitly converts map to a function pointer, to make the function:</p>\n<pre><code>auto call( std::map&lt;int,int&gt;(*f)() ) -&gt; decltype(f())\n</code></pre>\n<p>It looks like VC10 isn't meeting the c++0x FCD for decltype, which says:</p>\n<blockquote>\n<p id=\"so_3158999_3430035_0\">The type denoted by decltype(e) is de\ufb01ned as follows:</p>\n<ul>\n<li><p id=\"so_3158999_3430035_1\">if e is an unparenthesized id-expression or a class member access [snip, it isn't]</p></li>\n<li><p id=\"so_3158999_3430035_2\">otherwise, if e is a function call (5.2.2) or [snip], decltype(e) is the return type of the statically chosen function;</p></li>\n<li><p id=\"so_3158999_3430035_3\">otherwise, if e is an lvalue, decltype(e) is T&amp;, where T is the type of e;</p></li>\n<li><p id=\"so_3158999_3430035_4\">otherwise, decltype(e) is the type of e.</p></li>\n</ul>\n</blockquote>\n<p>5.2.2 makes it clear that calling through a function pointer is a \"function call\" so <code>decltype(f())</code> should be <code>std::map&lt;int,int&gt;</code>.  Instead, it's treating f() like an lvalue espression, with the result <code>std::map&lt;int,int&gt; &amp;</code>.  The type of ret is being inferred correctly, but it's being cast into a reference by the return.</p>\n<p>This bug doesn't show up when you use a function expression instead of a function pointer expression, <code>decltype(map())</code> correctly results in <code>std::map&lt;int,int&gt;</code>.</p>\n", "OwnerUserId": "314988", "PostTypeId": "2", "Id": "3430035", "Score": "3", "CreationDate": "2010-08-07T10:14:46.380", "LastActivityDate": "2010-08-07T10:14:46.380"}, "3158999": {"CommentCount": "7", "AcceptedAnswerId": "3430035", "PostTypeId": "1", "LastEditorUserId": "3848", "CreationDate": "2010-07-01T14:58:18.957", "LastActivityDate": "2010-10-04T08:44:37.270", "LastEditDate": "2010-10-04T08:44:37.270", "ViewCount": "793", "FavoriteCount": "1", "Title": "Returning address of local variable or temporary when using C++0x decltype return value", "Id": "3158999", "Score": "3", "Body": "<p><strong>Edit:</strong></p>\n<p>This is indeed a bug in the compiler, I've opened a <a href=\"https://connect.microsoft.com/VisualStudio/feedback/details/573330/bad-code-generated-for-function-using-a-decltype-return-value?wa=wsignin1.0#details\" rel=\"nofollow noreferrer\">defect</a> and got the following response.</p>\n<blockquote>\n<p id=\"so_3158999_3158999_0\">Hello Motti,<br>\n  Thank you for submitting this issue. As noted in the stackoverflow posting, this is a bug in our decltype implementation. Unfortunately, we cannot fix this bug in the next release of Visual Studio since the code is relatively uncommon, and we are particularly resource constrained.</br></p>\n</blockquote>\n<p><em>Original question follows</em></p>\n<hr>\n<p>I'm playing around with the C++0x features of VS10 and I ran into the following problem.</p>\n<pre><code>std::map&lt;int, int&gt; map()\n{\n    return std::map&lt;int, int&gt;();\n}\n\ntemplate &lt;class F&gt;\nauto call(F f) -&gt; decltype(f())\n{       \n    auto ret = f();\n    return ret;\n}\n\nvoid check() \n{\n    auto m = call(map); \n}\n</code></pre>\n<p>I get the following warning:</p>\n<blockquote>\n<p id=\"so_3158999_3158999_1\">warning C4172: returning address of local variable or temporary</p>\n</blockquote>\n<p>However when I change the prototype of <code>call</code> to be the old style:</p>\n<pre><code>std::map&lt;int, int&gt; call(F f)\n</code></pre>\n<p>It's fine, it's also OK when <code>call</code> is not a template function (even when using deduced return types).</p>\n<p>If I look at the type of <code>ret</code> it's <code>std::map&lt;int, int&gt;</code> (no references or pointers).</p>\n<p>Is this a bug in VS10 or am I missing something.</p>\n</hr>", "Tags": "<visual-studio-2010><c++11><type-inference>", "OwnerUserId": "3848", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_3158999_3430035_3": {"section_id": 5440, "quality": 1.0, "length": 5}, "so_3158999_3430035_0": {"section_id": 5440, "quality": 0.6666666666666666, "length": 4}, "so_3158999_3430035_2": {"section_id": 5990, "quality": 0.6363636363636364, "length": 7}, "so_3158999_3430035_1": {"section_id": 5440, "quality": 0.7142857142857143, "length": 5}}, "n3337": {"so_3158999_3430035_3": {"section_id": 5235, "quality": 1.0, "length": 5}, "so_3158999_3430035_0": {"section_id": 5235, "quality": 0.6666666666666666, "length": 4}, "so_3158999_3430035_2": {"section_id": 5758, "quality": 0.6363636363636364, "length": 7}, "so_3158999_3430035_1": {"section_id": 5235, "quality": 0.7142857142857143, "length": 5}}, "n4659": {"so_3158999_3430035_3": {"section_id": 6867, "quality": 1.0, "length": 5}, "so_3158999_3430035_0": {"section_id": 6867, "quality": 0.6666666666666666, "length": 4}, "so_3158999_3430035_2": {"section_id": 7490, "quality": 0.6363636363636364, "length": 7}, "so_3158999_3430035_1": {"section_id": 6867, "quality": 0.7142857142857143, "length": 5}}}});