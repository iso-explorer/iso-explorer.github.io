post_cb({"bq_ids": {"n4140": {"so_11172389_11172417_0": {"length": 4, "quality": 0.6666666666666666, "section_id": 577}, "so_11172389_11172459_4": {"length": 9, "quality": 1.0, "section_id": 660}, "so_11172389_11172459_2": {"length": 18, "quality": 1.0, "section_id": 466}}, "n3337": {"so_11172389_11172417_0": {"length": 4, "quality": 0.6666666666666666, "section_id": 567}, "so_11172389_11172459_4": {"length": 9, "quality": 1.0, "section_id": 650}, "so_11172389_11172459_2": {"length": 18, "quality": 1.0, "section_id": 457}}, "n4659": {"so_11172389_11172417_0": {"length": 4, "quality": 0.6666666666666666, "section_id": 600}, "so_11172389_11172459_4": {"length": 9, "quality": 1.0, "section_id": 688}, "so_11172389_11172459_2": {"length": 18, "quality": 1.0, "section_id": 489}}}, "11172389": {"ViewCount": "4183", "Body": "<p>I am trying to overload the <code>operator=</code> in a template class.</p>\n<p>I have this template class:</p>\n<pre><code>template &lt;class T&gt;\nclass Matrice\n{\n    T m,n;\npublic:\n    template &lt;class V&gt;\n    friend Matrice&lt;V&gt;&amp; operator=(const Matrice&lt;V&gt; &amp;);\n};\n\ntemplate &lt;class T&gt;\nMatrice&lt;T&gt;&amp; Matrice&lt;T&gt;::operator=(const Matrice&lt;T&gt; &amp;M)\n{\n    /*...*/\n    return *this;\n}\n</code></pre>\n<p>and I also tried:</p>\n<pre><code>template &lt;class T&gt;\nclass Matrice\n{\n    T m,n;\npublic:\n    template &lt;class V&gt;\n    Matrice&lt;V&gt;&amp; operator=(Matrice&lt;V&gt; &amp;);\n};\n\ntemplate &lt;class T&gt;\nMatrice&lt;T&gt;&amp; operator=(Matrice&lt;T&gt; &amp;M)\n{\n    /*...*/\n    return *this;\n}\n</code></pre>\n<p>but I still get this error:</p>\n<pre><code>error C2801: 'operator =' must be a non-static member\n</code></pre>\n", "AcceptedAnswerId": "11172417", "Title": "C++ error C2801: 'operator =' must be a non-static member", "CreationDate": "2012-06-23T19:34:28.800", "Id": "11172389", "CommentCount": "4", "LastEditDate": "2012-06-23T19:38:57.733", "PostTypeId": "1", "LastEditorUserId": "809387", "LastActivityDate": "2012-06-24T11:10:46.687", "Score": "2", "OwnerUserId": "865175", "Tags": "<c++><class><templates><overloading><operator-keyword>", "AnswerCount": "3"}, "11172459": {"Id": "11172459", "PostTypeId": "2", "Body": "<p>The standard says</p>\n<blockquote>\n<p id=\"so_11172389_11172459_0\"><strong>12.8 Copying and moving class objects</strong> [class.copy]</p>\n<p id=\"so_11172389_11172459_1\">...</p>\n<p id=\"so_11172389_11172459_2\"><em>17</em> A user-declared copy assignment operator <code>X::operator=</code> is a non-static non-template member function of class X with exactly one parameter of type X, X&amp;, const X&amp;, volatile X&amp; or const volatile X&amp;.</p>\n</blockquote>\n<p>A friend function doesn't fulfill these requirements. It must be a member function.</p>\n<hr>\n<p>To address the comments that this is just \"plain\" assignment, not copy assignment, let's add another quote from the standard:</p>\n<blockquote>\n<p id=\"so_11172389_11172459_3\"><strong>13.5.3 Assignment</strong> [over.ass]</p>\n<p id=\"so_11172389_11172459_4\">An assignment operator shall be implemented by a non-static member function with exactly one parameter.</p>\n</blockquote>\n<p>In standardese, \"shall\" doesn't leave any options to do anything else.</p>\n</hr>", "LastEditorUserId": "597607", "LastActivityDate": "2012-06-24T11:10:46.687", "Score": "3", "CreationDate": "2012-06-23T19:44:01.183", "ParentId": "11172389", "CommentCount": "3", "OwnerUserId": "597607", "LastEditDate": "2012-06-24T11:10:46.687"}, "11172490": {"Id": "11172490", "PostTypeId": "2", "Body": "<p>You mixed <em>friend</em> and <em>member</em> declarations and definitions: in the first example you declared <code>operator=</code> as a <em>friend</em> but defined it as a class member. In the second example, you declared <code>operator=</code> as a member but tried to define it as a non-member. Your <code>operator=</code> has to be a member (see <a href=\"https://stackoverflow.com/questions/3933637/why-friend-function-cant-be-used-for-overloading-assignment-operator\">this question</a> why) and you can do the following:</p>\n<pre><code>template &lt;class T&gt;\nclass Matrice\n{\n    T m,n;\npublic:\n    Matrice&lt;T&gt;&amp; operator=(Matrice&lt;T&gt; &amp;);\n};\n\ntemplate &lt;class T&gt;\nMatrice&lt;T&gt;&amp; Matrice&lt;T&gt;::operator=(Matrice&lt;T&gt; &amp;M)\n{\n    /*...*/\n    return *this;\n}\n</code></pre>\n", "LastEditorUserId": "-1", "LastActivityDate": "2012-06-23T19:48:59.740", "Score": "2", "CreationDate": "2012-06-23T19:48:59.740", "ParentId": "11172389", "CommentCount": "0", "OwnerUserId": "404421", "LastEditDate": "2017-05-23T11:51:17.837"}, "11172417": {"Id": "11172417", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_11172389_11172417_0\">error C2801: 'operator =' must be a non-static <strong>member</strong></p>\n</blockquote>\n<p>The bolded word is key here. <code>friend</code> is not a member; it's a friend. Remove that <code>friend</code> keyword and treat <code>operator=</code> as member:</p>\n<p>The syntactically proper version is:</p>\n<pre><code>template &lt;class T&gt;\nclass Matrice\n{\n    T m,n;\npublic:\n    template &lt;class V&gt;\n    Matrice&lt;V&gt;&amp; operator=(const Matrice&lt;V&gt; &amp;);\n};\n\ntemplate &lt;class T&gt;\ntemplate &lt;class V&gt;\nMatrice&lt;V&gt;&amp; Matrice&lt;T&gt;::operator=(const Matrice&lt;V&gt; &amp;M)\n{\n    /*...*/\n    return *this;\n}\n</code></pre>\n<p>Although I think that it's wrong to use that <code>template &lt;class V&gt;</code> there; the <em>sematically</em> proper version would be</p>\n<pre><code>template &lt;class T&gt;\nclass Matrice\n{\n    T m,n;\npublic:\n    Matrice&lt;T&gt;&amp; operator=(const Matrice&lt;T&gt; &amp;);\n};\n\ntemplate &lt;class T&gt;\nMatrice&lt;T&gt;&amp; Matrice&lt;T&gt;::operator=(const Matrice&lt;T&gt; &amp;M)\n{\n    /*...*/\n    return *this;\n}\n</code></pre>\n<p>Explanation: you don't generally want to <strong>assign</strong> <code>Type&lt;V&gt;</code> to <code>Type&lt;T&gt;</code> in this way; if you have to, then it is probably sign of bad design.</p>\n", "LastEditorUserId": "809387", "LastActivityDate": "2012-06-23T20:00:02.637", "Score": "5", "CreationDate": "2012-06-23T19:38:38.233", "ParentId": "11172389", "CommentCount": "12", "OwnerUserId": "809387", "LastEditDate": "2012-06-23T20:00:02.637"}});