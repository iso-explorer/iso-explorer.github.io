post_cb({"bq_ids": {"n4140": {"so_45447125_45447209_0": {"length": 4, "quality": 0.8, "section_id": 6106}}, "n3337": {"so_45447125_45447209_0": {"length": 4, "quality": 0.8, "section_id": 5872}}, "n4659": {"so_45447125_45447209_0": {"length": 4, "quality": 0.8, "section_id": 7603}}}, "45447125": {"ViewCount": "117", "Body": "<p>Consider the following code:</p>\n<pre><code>#include &lt;iostream&gt;\n\nint main()\n{\n    double zero = 0;\n    const double ZERO = 0.;\n    std::cout &lt;&lt; 0/zero &lt;&lt; \"\\n\"; // -nan\n    std::cout &lt;&lt; 0/0. &lt;&lt; \"\\n\";   // nan\n    std::cout &lt;&lt; 0/ZERO &lt;&lt; \"\\n\"; // nan\n}\n</code></pre>\n<p>Why does <code>0/zero</code> produces <code>-nan</code>, why it differs from <code>0/0.</code> and what is the meaning of <code>-nan</code>?</p>\n<p>Live demo <a href=\"https://wandbox.org/permlink/vNQa5AMECkEZFrDh\" rel=\"nofollow noreferrer\">here</a> for clang. <a href=\"https://wandbox.org/permlink/hvQ9eHlB0cmuBOhj\" rel=\"nofollow noreferrer\">GCC gives</a> <code>-nan</code> for all these cases. Trying to compile with MSVC <a href=\"http://rextester.com/PFHPT79409\" rel=\"nofollow noreferrer\">leads to complile error</a> for const values and <code>-nan</code> <a href=\"http://rextester.com/KTNRQ31271\" rel=\"nofollow noreferrer\">for variable</a>. </p>\n<p>Which compiler is the more correct by Standard in this case?</p>\n", "Title": "Dividing by constant or by variable zero", "CreationDate": "2017-08-01T20:28:00.113", "LastActivityDate": "2017-08-01T21:39:32.127", "CommentCount": "8", "PostTypeId": "1", "Id": "45447125", "Score": "3", "OwnerUserId": "3240681", "Tags": "<c++><language-lawyer><nan>", "AnswerCount": "1"}, "45447209": {"Id": "45447209", "PostTypeId": "2", "Body": "<p>From the C++ Standard 5.6.4:</p>\n<blockquote>\n<p id=\"so_45447125_45447209_0\">If the second operand of / or % is zero the behavior is undefined.</p>\n</blockquote>\n<p>Division by <code>0</code> causes the dreaded undefined behaviour!  So the compiler is free to do anything included generating a <code>NaN</code>, writing code that crashes, and raiding your fridge.  There isn't a <em>more</em> correct behaviour.</p>\n<p>For floating-point types, C++ has <a href=\"http://en.cppreference.com/w/cpp/types/numeric_limits/is_iec559\" rel=\"nofollow noreferrer\"><code>std::numeric_limits&lt;T&gt;::is_iec559</code></a> to test whether or not the implementation supports the <a href=\"http://en.wikipedia.com/wiki/IEEE_754-2008\" rel=\"nofollow noreferrer\">IEEE 754</a> standard for dealing with floating-points of type <code>T</code>. </p>\n", "LastEditorUserId": "1312406", "LastActivityDate": "2017-08-01T21:39:32.127", "Score": "2", "CreationDate": "2017-08-01T20:34:07.400", "ParentId": "45447125", "CommentCount": "17", "OwnerUserId": "1312406", "LastEditDate": "2017-08-01T21:39:32.127"}});