post_cb({"20745378": {"ParentId": "7902452", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>According to <a href=\"http://www.tenouk.com/Module31.html\" rel=\"nofollow\">http://www.tenouk.com/Module31.html</a> these operations (for '*' and '-&gt;' it depends also on the type stored) are no throw for STL containers.</p>\n", "OwnerUserId": "3128048", "LastEditorUserId": "3128048", "LastEditDate": "2013-12-23T21:18:51.010", "Id": "20745378", "Score": "0", "CreationDate": "2013-12-23T14:17:23.820", "LastActivityDate": "2013-12-23T21:18:51.010"}, "7902519": {"ParentId": "7902452", "CommentCount": "2", "Body": "<blockquote>\n<p id=\"so_7902452_7902519_0\">no copy constructor or assignment operator of a returned iterator throws an exception</p>\n</blockquote>\n<p>That's from the C++03 standard. I don't think that the standard goes any further than that.</p>\n<p>Btw. it's <code>23.1.10</code></p>\n", "OwnerUserId": "211659", "PostTypeId": "2", "Id": "7902519", "Score": "6", "CreationDate": "2011-10-26T12:25:34.423", "LastActivityDate": "2011-10-26T12:25:34.423"}, "7902491": {"ParentId": "7902452", "CommentCount": "10", "Body": "<blockquote>\n<p id=\"so_7902452_7902491_0\">The destructor would therefore use the following iterator-related\n  methods</p>\n</blockquote>\n<p>No it would not. The destructor of that object would just call the destructor of the container, which would in turn be guaranteed to not throw an exception.</p>\n<p>If you use RAII correctly, you will almost never run into a scenario where you have to explicitly release resources. This could be achieved by have the container store <code>shared_ptr</code> or <code>unique_ptr</code>, or by using something like <a href=\"http://www.boost.org/doc/libs/release/libs/ptr_container/doc/ptr_container.html\" rel=\"nofollow\">Boost.Pointer Container</a>.</p>\n", "OwnerUserId": "160206", "PostTypeId": "2", "Id": "7902491", "Score": "1", "CreationDate": "2011-10-26T12:22:32.027", "LastActivityDate": "2011-10-26T12:22:32.027"}, "7902452": {"CommentCount": "3", "AcceptedAnswerId": "7903037", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2011-10-26T12:18:08.057", "LastActivityDate": "2015-11-21T13:23:01.637", "LastEditDate": "2017-05-23T11:50:40.983", "ViewCount": "4626", "FavoriteCount": "4", "Title": "May STL iterator methods throw an exception", "Id": "7902452", "Score": "18", "Body": "<p><a href=\"https://stackoverflow.com/questions/130117/throwing-exceptions-out-of-a-destructor\">Destructors may not throw exceptions</a> (so <a href=\"https://stackoverflow.com/questions/2331316/what-is-stack-unwinding\">stack unwinding</a> can complete during exception handling), and must deallocate any resources allocated to the object (so no resources leak). A design for an object that contains several other objects (or is allocated several resources) might record pointers to them in an STL container. The destructor would therefore use the following iterator-related methods:</p>\n<ul>\n<li><code>begin()</code>, <code>end()</code> for the container</li>\n<li><code>operator++</code> for a valid iterator</li>\n<li><code>operator*</code> or <code>operator-&gt;</code> for a valid iterator</li>\n</ul>\n<p>But to guarantee that the destructor both does not throw exceptions and deallocates its resources you would need to rely on those methods never throwing exceptions.</p>\n<p>Is it safe to rely on those methods never throwing exceptions? It is hard to imagine a practical implementation that would throw exceptions, as under the hood an STL iterator is essentially a pointer. But does standard C++ <strong>require</strong> that those methods never throw exceptions? I've not found a clear statement in the C++ standard.</p>\n<hr>\n<p><strong>Edit</strong>: The interesting case is for C++ 03 when you want to have <a href=\"https://stackoverflow.com/questions/141337/c-stl-should-i-store-entire-objects-or-pointers-to-objects\">a container of <em>pointers</em> to resources</a>. There are good reasons for doing this; for example, if you have polymorphic resources. As <a href=\"https://stackoverflow.com/questions/7902452/may-stl-iterator-methods-throw-an-exception/7902491#7902491\">Bj\u00f6rn Pollex</a> points out in his answer, if you use a container of resources (such as a <code>std::list&lt; Resource &gt;</code>) rather than a container of pointers to resources, the destructor of the container will take care of destruction (deallocation) of the <code>Resource</code> objects for you.</p>\n</hr>", "Tags": "<c++><exception><stl>", "OwnerUserId": "545127", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_7902452_7902519_0": {"section_id": 712, "quality": 1.0, "length": 8}}, "n3337": {"so_7902452_7902519_0": {"section_id": 701, "quality": 1.0, "length": 8}}, "n4659": {"so_7902452_7902519_0": {"section_id": 741, "quality": 1.0, "length": 8}}}, "7903037": {"ParentId": "7902452", "CommentCount": "4", "Body": "<blockquote>\n<p id=\"so_7902452_7903037_0\">operator++ for a valid iterator</p>\n</blockquote>\n<p>The C++ standard (I refer to N3290 draft) does not give nothrow guarantee for increment operator of iterators.</p>\n<p>For example, <code>std::istreambuf_iterator::operator++</code> effects in call to <code>std::basic_streambuf::sbumpc</code>. The <code>sbumpc</code> may call <code>uflow</code> which in turn may throw exception.</p>\n", "OwnerUserId": "151641", "PostTypeId": "2", "Id": "7903037", "Score": "15", "CreationDate": "2011-10-26T13:08:24.900", "LastActivityDate": "2011-10-26T13:08:24.900"}});