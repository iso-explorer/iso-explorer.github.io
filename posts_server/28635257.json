post_cb({"bq_ids": {"n4140": {"so_28635257_28635396_0": {"section_id": 5348, "quality": 0.875, "length": 7}}, "n3337": {"so_28635257_28635396_0": {"section_id": 5145, "quality": 0.875, "length": 7}}, "n4659": {"so_28635257_28635396_0": {"section_id": 6773, "quality": 0.875, "length": 7}}}, "28635348": {"ParentId": "28635257", "CommentCount": "0", "Body": "<p><code>15.95</code> is treated as a double no matter what it is assigned to; the variable's type only affects what value it <em>ends up</em> holding, not what you try to assign to it.  The right side of an assignment is always evaluated first.</p>\n", "OwnerUserId": "507761", "PostTypeId": "2", "Id": "28635348", "Score": "2", "CreationDate": "2015-02-20T18:01:00.420", "LastActivityDate": "2015-02-20T18:01:00.420"}, "28635353": {"ParentId": "28635257", "CommentCount": "1", "Body": "<blockquote>\n<p id=\"so_28635257_28635353_0\">why is the compiler interpreting the literal values as as doubles</p>\n</blockquote>\n<p>Because that's how literals are interpreted, unless you add modifiers to specify a different type.</p>\n<pre><code>a=15.95f;\n       ^ gives the literal \"float\" type\n</code></pre>\n<blockquote>\n<p id=\"so_28635257_28635353_1\">But if variables are declared as float...</p>\n</blockquote>\n<p>The type of an expression never depends on how the expression is used; so <code>15.95</code> has type <code>double</code> whatever you do with it. The type is converted for use in a larger expression, if necessary, and that's what gives the warning in this case.</p>\n", "OwnerUserId": "204847", "PostTypeId": "2", "Id": "28635353", "Score": "5", "CreationDate": "2015-02-20T18:01:12.893", "LastActivityDate": "2015-02-20T18:01:12.893"}, "28635396": {"ParentId": "28635257", "CommentCount": "0", "Body": "<p>From standard 2.14.4</p>\n<blockquote>\n<p id=\"so_28635257_28635396_0\">The type of a floating literal is double <strong>unless explicitly specified by a suffix</strong>.</p>\n</blockquote>\n<p>(emphasis mine)</p>\n", "OwnerUserId": "4342498", "PostTypeId": "2", "Id": "28635396", "Score": "0", "CreationDate": "2015-02-20T18:03:57.950", "LastActivityDate": "2015-02-20T18:03:57.950"}, "28636320": {"ParentId": "28635257", "CommentCount": "0", "Body": "<p>The processes the string tokens that make up your code - it sees is \"2.7\" or 15.95, which is numeric (starts with a digit) and floating point (has a .) The default container for floating point numbers is a double (otherwise you'd get really erroneous outcomes for most of the hard coded numbers you enter. \nAfter the value of the expression is evaluated (in this case, just the value itself), it's assigned to a float value, which isn't precise enough to store the result, hence the warning.</p>\n", "OwnerUserId": "4385932", "PostTypeId": "2", "Id": "28636320", "Score": "1", "CreationDate": "2015-02-20T19:01:13.533", "LastActivityDate": "2015-02-20T19:01:13.533"}, "28635257": {"CommentCount": "2", "ViewCount": "195", "CreationDate": "2015-02-20T17:55:08.890", "LastActivityDate": "2015-02-20T19:01:13.533", "Title": "In C++ float value being truncated from double", "AcceptedAnswerId": "28635353", "PostTypeId": "1", "Id": "28635257", "Score": "0", "Body": "<p>I've coded using float variables before and never had this problem.    </p>\n<pre><code>float  a, b, subtotal, stx;\na=15.95;\nb=24.95;\nsubtotal=a+b;\nstx=subtotal*.07;\n\ncout &lt;&lt; \"Item 1: $\" &lt;&lt; a &lt;&lt; endl;\ncout &lt;&lt; \"Item 2: $\" &lt;&lt; b &lt;&lt; endl;\ncout &lt;&lt; \"\\nSubtotal: $\" &lt;&lt;subtotal&lt;&lt; endl;\ncout &lt;&lt; \"Sales Tax: $\" &lt;&lt; stx &lt;&lt; endl; \ncout &lt;&lt; \"Total: $\"  &lt;&lt; subtotal+stx &lt;&lt; endl;\n</code></pre>\n<p>relatively strait forward code </p>\n<pre><code>warning C4305: '=' : truncation from 'double' to 'float'\n</code></pre>\n<p>I understand the idea of data being truncated (and I also know that you can write the <code>f</code> at the end of the variable. But if variables are declared as float why is the compiler interpreting the literal values as as doubles if it was declared as floats. </p>\n<p>I looked up a few other tickets and they were different then my inquiry I can't seem to find a solution as to why the data is being read as a double if its declared as a float. </p>\n", "Tags": "<c++><oop><double><warnings><truncation>", "OwnerUserId": "3532205", "AnswerCount": "4"}});