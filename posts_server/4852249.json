post_cb({"4852301": {"ParentId": "4852249", "CommentCount": "4", "CreationDate": "2011-01-31T14:54:51.183", "OwnerUserId": "100724", "PostTypeId": "2", "Id": "4852301", "Score": "4", "Body": "<p>The correct way I'd assume is:</p>\n<pre><code>bool b = static_cast&lt;bool&gt;(val);\n</code></pre>\n", "LastActivityDate": "2011-01-31T14:54:51.183"}, "4852284": {"ParentId": "4852249", "PostTypeId": "2", "CommentCount": "12", "CreationDate": "2011-01-31T14:53:00.987", "Score": "8", "LastEditorUserId": "356440", "LastEditDate": "2011-02-01T02:33:53.897", "Id": "4852284", "OwnerUserId": "356440", "Body": "<p>In the context of using win32 SDK and MFC, I tend to write it always this way. It's explicit.</p>\n<pre><code>bool b = (myBOOL != FALSE);\n</code></pre>\n<p>EDIT: I have edited :-) cause i'm not sure myBOOL == TRUE works for all implementation of BOOL\nand I can assume that FALSE may have the 0 value most of the time.</p>\n", "LastActivityDate": "2011-02-01T02:33:53.897"}, "bq_ids": {"n4140": {"so_4852249_4852249_1": {"section_id": 44, "quality": 1.0, "length": 28}}, "n3337": {"so_4852249_4852249_1": {"section_id": 41, "quality": 1.0, "length": 28}}, "n4659": {"so_4852249_4852249_1": {"section_id": 45, "quality": 1.0, "length": 28}}}, "4852507": {"ParentId": "4852249", "CommentCount": "3", "CreationDate": "2011-01-31T15:15:29.550", "OwnerUserId": "517634", "PostTypeId": "2", "Id": "4852507", "Score": "1", "Body": "<p>I tend to write it always this way. .</p>\n<pre><code>bool b = !!myBOOL;\n</code></pre>\n<p>It is clearer (well as an English speaker, I am used to double-negatives....)</p>\n<p>It is also safer and avoids mistakes like:</p>\n<pre><code>bool b = (myBOOL = FALSE); //oops!\n</code></pre>\n<p>Also, I am of the opinion that booleans should never be compared using <code>==</code> or <code>!=</code>  rather <code>&amp;&amp;</code> should be used.  As soon as <code>==</code> or <code>!=</code>  is used the boolean variable is no longer treated as a boolean but as an integral value which defeats the purpose of boolean.</p>\n", "LastActivityDate": "2011-01-31T15:15:29.550"}, "4852249": {"CommentCount": "4", "AcceptedAnswerId": "4942423", "PostTypeId": "1", "LastEditorUserId": "321013", "CreationDate": "2011-01-31T14:50:08.400", "LastActivityDate": "2012-09-19T04:28:15.827", "LastEditDate": "2011-01-31T15:16:29.077", "ViewCount": "484", "FavoriteCount": "2", "Title": "What is the preferred way in C++ for converting a builtin type (int) to bool?", "Id": "4852249", "Score": "4", "Body": "<p>When programming with Visual C++, I think every developer is used to see the warning</p>\n<pre><code>warning C4800: 'BOOL' : forcing value to bool 'true' or 'false'\n</code></pre>\n<p>from time to time. The reason obviously is that BOOL is defined as int and directly assigning any of the built-in numerical types to <code>bool</code> is considered a bad idea.</p>\n<p>So my question is now, given any built-in numerical type (int, short, ...) that is to be interpreted as a boolean value, what is the/your preferred way of actually storing that value into a variable of type <code>bool</code>?</p>\n<p><sub>Note: While mixing BOOL and bool is probably a bad idea, I think the problem will inevitably pop up whether on Windows or somewhere else, so I think this question is neither Visual-C++ nor Windows specific.</sub></p>\n<p>Given <code>int nBoolean;</code> I prefer this style:</p>\n<ul>\n<li><code>bool b = nBoolean?true:false;</code></li>\n</ul>\n<p>The following might be alternatives:</p>\n<ul>\n<li><p><code>bool b = !!nBoolean;</code></p></li>\n<li><p><code>bool b = (nBoolean != 0);</code></p></li>\n</ul>\n<p>Is there a generally preferred way? Rationale? </p>\n<p>I should add: Since I only work with Visual-C++ I cannot really say if this is a VC++ specific question or if the same problem pops up with other compilers. So it would be interesting to specifically hear from g++ or  users how they handle the int-&gt;bool case.</p>\n<p>Regarding Standard C++: As David Thornley notes in a comment, the C++ Standard does not require this behavior. In fact it seems to explicitly allow this, so one might consider this a VC++ weirdness. To quote the N3029 draft (which is what I have around atm.):</p>\n<blockquote>\n<p id=\"so_4852249_4852249_0\">4.12 Boolean conversions [conv.bool] </p>\n<p id=\"so_4852249_4852249_1\">A prvalue of arithmetic, unscoped\n  enumeration, pointer, or pointer to\n  member type can be converted to a\n  prvalue of type bool. A zero value,\n  null pointer value, or null member\n  pointer value is converted to false;\n  any other value is converted to true.\n  (...)</p>\n</blockquote>\n", "Tags": "<c++><coding-style><boolean>", "OwnerUserId": "321013", "AnswerCount": "7"}, "4852572": {"ParentId": "4852249", "CommentCount": "5", "CreationDate": "2011-01-31T15:22:12.313", "OwnerUserId": "464581", "PostTypeId": "2", "Id": "4852572", "Score": "2", "Body": "<p>Three good ways:</p>\n<pre><code>static_cast&lt;bool&gt;( whatever )\nbool( whatever )\n!!whatever\n</code></pre>\n<p>Personally I prefer the last, but *nix folks may react negatively (not needed for those compilers, so not familiar with that idiom).</p>\n<p>One reason that the last one is good is that it shuts up Visual C++ (sillywarning suppression).</p>\n<p>Ungood ways include comparing with <code>true</code> or <code>false</code>, especially the former.</p>\n<p>Cheers &amp; hth.,</p>\n", "LastActivityDate": "2011-01-31T15:22:12.313"}, "4942423": {"ParentId": "4852249", "PostTypeId": "2", "CommentCount": "2", "CreationDate": "2011-02-09T07:43:45.750", "Score": "1", "LastEditorUserId": "321013", "LastEditDate": "2012-09-19T04:28:15.827", "Id": "4942423", "OwnerUserId": "321013", "Body": "<p>There is <strong>no</strong> preferred way <strong>in C++</strong>, since <em>the C++ Std simply allows the integral conversion</em> from <code>int</code> to <code>bool</code>. (So the preferred way wrt the Std would be <code>bool b = i;</code>.)</p>\n<p>That said, judging from the other answers, there does not even seem to be an accepted way to do it in Visual C++ (MS) although the MSDN page states </p>\n<blockquote>\n<p id=\"so_4852249_4942423_0\">... If you cannot rewrite the expression\n  to use type bool, then you can add\n  \"!=0\" to the expression, which gives\n  the expression type bool. ...</p>\n</blockquote>\n<p>So one <em>might</em> conclude that MS recommends to use the <code>!=0</code> comparison, although I, personally, think it's the worst of all the warning-supressing alterantives presented in the question and the answers here: The \"type\" in the source code is <code>BOOL</code>, and even though it's really just an <code>int</code> at least one should compare a \"<code>BOOL</code>\" with <code>!=FALSE</code> like has been proposed in some other answers.</p>\n", "LastActivityDate": "2012-09-19T04:28:15.827"}, "4852502": {"ParentId": "4852249", "PostTypeId": "2", "CommentCount": "2", "CreationDate": "2011-01-31T15:15:13.493", "Score": "2", "LastEditorUserId": "540815", "LastEditDate": "2011-01-31T15:24:57.113", "Id": "4852502", "OwnerUserId": "540815", "Body": "<p>I cast my vote for</p>\n<pre><code>BOOL nBoolean;\nbool b = (nBoolean != 0);\n</code></pre>\n<p>Reason? Since BOOL resolves to an int, one should compare it to an int when converting to bool. The other two methods: <code>!!nBoolean</code> and <code>nBoolean?true:false</code> treat nBoolean as as logical value and therefore perform an implicit <strike>cast</strike> conversion.</p>\n", "LastActivityDate": "2011-01-31T15:24:57.113"}, "4854742": {"ParentId": "4852249", "CommentCount": "0", "CreationDate": "2011-01-31T18:48:23.630", "OwnerUserId": "347716", "PostTypeId": "2", "Id": "4854742", "Score": "-1", "Body": "<p>If this bothered me, I would write a helper function like </p>\n<pre><code>inline bool to_bool(BOOL b) {...}\n</code></pre>\n<p>which would hide one of the proposed implementations inside it. And never think about this again :)</p>\n", "LastActivityDate": "2011-01-31T18:48:23.630"}});