post_cb({"21034140": {"Id": "21034140", "PostTypeId": "2", "Body": "<p>You can investigate the order of constructor calls from this quote of the C++ Standard and try to trap it yourself</p>\n<blockquote>\n<p id=\"so_21033845_21034140_0\">10 In a non-delegating constructor, initialization proceeds in the\n  following order: \u2014 First, and only for the constructor of the most\n  derived class (1.8), virtual base classes are initialized in the order\n  they appear on a depth-first left-to-right traversal of the directed\n  acyclic graph of base classes, where \u201cleft-to-right\u201d is the order of\n  appearance of the base classes in the derived class\n  base-specifier-list. \u2014 Then, direct base classes are initialized in\n  declaration order as they appear in the base-specifier-list\n  (regardless of the order of the mem-initializers). \u2014 Then, non-static\n  data members are initialized in the order they were declared in the\n  class definition (again regardless of the order of the\n  mem-initializers). \u2014 Finally, the compound-statement of the\n  constructor body is executed. [ Note: The declaration order is\n  mandated to ensure that base and member subobjects are destroyed in\n  the reverse order of initialization. \u2014end note ]</p>\n</blockquote>\n", "LastActivityDate": "2014-01-10T00:35:46.320", "CommentCount": "0", "CreationDate": "2014-01-10T00:35:46.320", "ParentId": "21033845", "Score": "0", "OwnerUserId": "2877241"}, "21034129": {"Id": "21034129", "PostTypeId": "2", "Body": "<p>Virtual base subobjects are constructed first, by the most-derived class, before any other bases. This is the only way that makes sense, since the relation of the virtual bases to tbe most-derived object is not known until object construction, at runtime (hence \"virtual\"). All intermediate initializers for virtual bases are ignored.</p>\n<p>So, what are your virtual bases? <code>G</code> derives from <code>E</code> and <code>F</code>. <code>E</code> derives virtually from <code>C</code>, which in turn derives virtually from <code>A</code>, so <code>A</code>, <code>C</code> are first. Next, <code>F</code> doesn't add any further virtual bases. Next, <code>E</code> has non-virtual bases <code>B</code> and <code>D</code>, in that order, which are constructed next, and then <code>E</code> is complete. Then comes <code>F</code>'s non-virtual base <code>D</code>, and <code>F</code> is complete. Finally, <code>G</code> is complete.</p>\n<p>All in all, it's virtual bases <code>A</code>, <code>C</code>, then non-virtual bases <code>B</code>, <code>D</code>, <code>E</code> and <code>D</code>, <code>F</code>, and then <code>G</code> itself.</p>\n", "LastActivityDate": "2014-01-10T00:34:59.630", "CommentCount": "0", "CreationDate": "2014-01-10T00:34:59.630", "ParentId": "21033845", "Score": "1", "OwnerUserId": "596781"}, "21034121": {"Id": "21034121", "PostTypeId": "2", "Body": "<p>You should follow the rules given in the C++ standard:</p>\n<blockquote>\n<p id=\"so_21033845_21034121_0\"><code>[C++11: 12.6.2/10]:</code> In a non-delegating constructor, initialization proceeds in the following order:</p>\n<ul>\n<li><strong>First, and only for the constructor of the most derived class (1.8), virtual base classes are initialized in the order they appear on a depth-first left-to-right traversal of the directed acyclic graph of base classes, where \u201cleft-to-right\u201d is the order of appearance of the base classes in the derived class <em>base-specifier-list</em>.</strong></li>\n<li><strong>Then, direct base classes are initialized in declaration order as they appear in the base-specifier-list (regardless of the order of the <em>mem-initializers</em>).</strong></li>\n<li>Then, non-static data members are initialized in the order they were declared in the class definition (again regardless of the order of the <em>mem-initializers</em>).</li>\n<li>Finally, the <em>compound-statement</em> of the constructor body is executed.</li>\n</ul>\n<p id=\"so_21033845_21034121_1\"><em>[ Note:</em> The declaration order is mandated to ensure that base and member subobjects are destroyed in the reverse order of initialization. <em>\u2014end note ]</em></p>\n</blockquote>\n", "LastActivityDate": "2014-01-10T00:34:00.487", "CommentCount": "0", "CreationDate": "2014-01-10T00:34:00.487", "ParentId": "21033845", "Score": "1", "OwnerUserId": "560648"}, "bq_ids": {"n4140": {"so_21033845_21034121_1": {"length": 11, "quality": 0.7333333333333333, "section_id": 438}, "so_21033845_21034121_0": {"length": 6, "quality": 0.75, "section_id": 438}, "so_21033845_21034140_0": {"length": 79, "quality": 0.9518072289156626, "section_id": 438}}, "n3337": {"so_21033845_21034121_1": {"length": 11, "quality": 0.7333333333333333, "section_id": 429}, "so_21033845_21034121_0": {"length": 6, "quality": 0.75, "section_id": 429}, "so_21033845_21034140_0": {"length": 79, "quality": 0.9518072289156626, "section_id": 429}}, "n4659": {"so_21033845_21034121_1": {"length": 11, "quality": 0.7333333333333333, "section_id": 458}, "so_21033845_21034121_0": {"length": 6, "quality": 0.75, "section_id": 458}, "so_21033845_21034140_0": {"length": 79, "quality": 0.9518072289156626, "section_id": 458}}}, "21033845": {"ViewCount": "117", "Body": "<pre><code>#include &lt;iostream&gt;\nusing namespace std;    \nstruct A{\n  A() {cout &lt;&lt; \"A\" &lt;&lt; endl;}\n  A(int a) {cout &lt;&lt; \"A+\" &lt;&lt; endl;}\n};\n\nstruct B : virtual A{\n  B() : A(1) {cout &lt;&lt; \"B\" &lt;&lt; endl;}\n};\nstruct C : virtual A{\n  C() : A(1) {cout &lt;&lt; \"C\" &lt;&lt; endl;}\n};\nstruct D : virtual A{\n  D() : A() {cout &lt;&lt; \"D\" &lt;&lt; endl;}\n};\nstruct E : B, virtual C, D{\n  E(){cout &lt;&lt; \"E\" &lt;&lt; endl;}\n};\nstruct F : D, virtual C{\n  F(){cout &lt;&lt; \"F\" &lt;&lt; endl;}\n};\nstruct G : E, F{\n  G() {cout &lt;&lt; \"G\" &lt;&lt; endl;}\n};\n\nint main(){\n  G g;\n  return 0;\n}\n</code></pre>\n<p>Program prints:</p>\n<pre><code>A\nC\nB\nD\nE\nD\nF\nG\n</code></pre>\n<p>I would like to know what rules should I use to determine in what order constructors get called. Thanks.</p>\n", "Title": "Call order of constructors", "CreationDate": "2014-01-10T00:09:24.173", "LastActivityDate": "2014-01-10T00:35:46.320", "CommentCount": "2", "PostTypeId": "1", "Id": "21033845", "Score": "0", "OwnerUserId": "1242967", "Tags": "<c++><inheritance><constructor><multiple-inheritance>", "AnswerCount": "3"}});