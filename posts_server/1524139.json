post_cb({"1524168": {"ParentId": "1524139", "CommentCount": "2", "Body": "<p>As to your first question: TTBOMK, unqualified <code>printf</code> shouldn't work in standard C++ when including <code>&lt;cstdio&gt;</code>. </p>\n<p>To the second question: For one, the C++ standard library uses an incredible amount of identifiers, among the such useful and common ones like <code>list</code>, <code>sort</code>, <code>iterator</code> and the like. Had they all been in the global namespace, we'd been effectively robbed of hundreds of useful names. </p>\n<p>Also, if you use the explicit <code>std::</code> prefix for a few weeks, you will probably find it easier to read the code, since it very effectively tells you which identifiers are from the standard library (so you know them right away). </p>\n", "OwnerUserId": "140719", "PostTypeId": "2", "Id": "1524168", "Score": "3", "CreationDate": "2009-10-06T07:57:35.387", "LastActivityDate": "2009-10-06T07:57:35.387"}, "1524332": {"ParentId": "1524139", "CommentCount": "0", "Body": "<p><code>&lt;stdio.h&gt;</code> is the header which imports the functions from <code>&lt;cstdio&gt;</code> into the global namespace.</p>\n", "OwnerUserId": "15416", "PostTypeId": "2", "Id": "1524332", "Score": "1", "CreationDate": "2009-10-06T08:40:51.087", "LastActivityDate": "2009-10-06T08:40:51.087"}, "1524387": {"ParentId": "1524139", "CommentCount": "2", "Body": "<p>7.4.1.2/4:</p>\n<blockquote>\n<p id=\"so_1524139_1524387_0\">Except as noted in clauses 18 through 27, the contents of each header <code>cname</code> shall be the same as that of the corresponding header <code>name.h</code>, as specified in ISO/IEC 9899:1990 Programming Languages C (Clause 7), or ISO/IEC:1990 Programming Languages\u2014C AMENDMENT 1: C Integrity, (Clause 7), as appropriate, as if by inclusion. In the C + + Standard Library, however, the declarations and definitions (except for names which are defined as macros in C) are within namespace scope (3.3.5) of the namespace <code>std</code>.</p>\n</blockquote>\n<p>D.5/2:</p>\n<blockquote>\n<p id=\"so_1524139_1524387_1\">Every C header, each of which has a name of the form <code>name.h</code>, behaves as if each name placed in the Standard library namespace by the corresponding <code>cname</code> header is also placed within the namespace scope of the namespace std and is followed by an explicit using-declaration (7.3.3).</p>\n</blockquote>\n<p>In practice, however, <code>name.h</code> includes the names in the global namespace and <code>cname</code> in both the global and <code>std</code> namespace (i.e. the other way around than the standard specifies).</p>\n", "OwnerUserId": "89847", "PostTypeId": "2", "Id": "1524387", "Score": "3", "CreationDate": "2009-10-06T08:53:00.453", "LastActivityDate": "2009-10-06T08:53:00.453"}, "1524234": {"ParentId": "1524139", "CommentCount": "0", "Body": "<p>Personally I like namespaces, especially short ones.</p>\n<p>People usually think that since you have a namespace to type it is longer, but that's wrong. One of the benefit of typing the namespace is that your editor can then use auto-completion much more efficiently ;)</p>\n<p>Besides typing (since one could argue that you type faster than auto-completion anyway), there is also the net advantage that if I type 'std::re' I will be prompted with all the identifiers that begin with 're' in the std namespace, saving me the hassle of memorizing each and every one of them, and then I can also look at their arguments directly, in case I don't remember the exact order, the const-ness, etc...</p>\n<p>Technically, there is also something about clashes of names... but who care ;) ?</p>\n", "OwnerUserId": "147192", "PostTypeId": "2", "Id": "1524234", "Score": "1", "CreationDate": "2009-10-06T08:11:56.357", "LastActivityDate": "2009-10-06T08:11:56.357"}, "1524139": {"CommentCount": "2", "ViewCount": "1677", "PostTypeId": "1", "ClosedDate": "2016-05-09T20:38:53.453", "LastEditorUserId": "23643", "CreationDate": "2009-10-06T07:47:51.350", "LastActivityDate": "2009-10-06T08:53:00.453", "Title": "ANSI C functions namespace in ISO C++", "AcceptedAnswerId": "1524387", "LastEditDate": "2009-10-06T08:19:31.737", "Id": "1524139", "Score": "1", "Body": "<p>Consider the following small program:</p>\n<pre><code>#include &lt;cstdio&gt;\n\nint main() {\n    printf(\"%d\\n\", 1);\n    std::printf(\"%d\\n\", 2);\n    return 0;\n}\n</code></pre>\n<ol>\n<li>What does C++ standard say about importing C library functions into global namespace <em>by default</em>? Can you point me to the relevant C++ standard section?</li>\n<li>What is the reason ANSI C functions are in <code>std</code> namespace in the first place, since they are by default imported into global namespace?</li>\n</ol>\n", "Tags": "<c++><c><standards>", "OwnerUserId": "23643", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_1524139_1524387_0": {"section_id": 6259, "quality": 0.5609756097560976, "length": 23}, "so_1524139_1524387_1": {"section_id": 4907, "quality": 0.7777777777777778, "length": 21}}, "n3337": {"so_1524139_1524387_0": {"section_id": 6019, "quality": 0.5609756097560976, "length": 23}, "so_1524139_1524387_1": {"section_id": 4702, "quality": 0.7777777777777778, "length": 21}}, "n4659": {"so_1524139_1524387_0": {"section_id": 7763, "quality": 0.5365853658536586, "length": 22}, "so_1524139_1524387_1": {"section_id": 6316, "quality": 0.7777777777777778, "length": 21}}}});