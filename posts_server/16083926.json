post_cb({"bq_ids": {"n4140": {"so_16083926_16083983_0": {"length": 16, "quality": 0.5161290322580645, "section_id": 6299}}, "n3337": {"so_16083926_16083983_0": {"length": 16, "quality": 0.5161290322580645, "section_id": 6056}}, "n4659": {"so_16083926_16083983_0": {"length": 16, "quality": 0.5161290322580645, "section_id": 7808}}}, "16083994": {"Id": "16083994", "PostTypeId": "2", "Body": "<p>You can use <code>std::numeric_limits</code>, instead of your constants, but if you want only <code>kMinValue</code> and <code>kMaxValue</code> - you can use something like this</p>\n<p>C++03</p>\n<pre><code>template&lt;&gt;\nstruct CompTraits&lt;float&gt;\n{\n   static const float kMinValue;\n   static const float kMaxValue;\n};\n\nconst float CompTraits&lt;float&gt;::kMinValue = std::numeric_limits&lt;float&gt;::min();\nconst float CompTraits&lt;float&gt;::kMaxValue = std::numeric_limits&lt;float&gt;::max();\n</code></pre>\n<p>C++11</p>\n<pre><code>template&lt;&gt;\nstruct CompTraits&lt;float&gt;\n{\n   static constexpr float kMinValue = std::numeric_limits&lt;float&gt;::min();\n   static constexpr float kMaxValue = std::numeric_limits&lt;float&gt;::max();\n};\n</code></pre>\n<p>for your case you simply should use</p>\n<pre><code>template&lt;&gt;\nstruct CompTraits&lt;float&gt;\n{\n   static const float kMinValue = 0.0f;\n   static const float kMaxValue = 1.0f;\n};\n</code></pre>\n", "LastEditorUserId": "743214", "LastActivityDate": "2013-04-19T11:23:22.707", "Score": "5", "CreationDate": "2013-04-18T13:13:55.747", "ParentId": "16083926", "CommentCount": "6", "OwnerUserId": "1498580", "LastEditDate": "2013-04-19T11:23:22.707"}, "16084004": {"Id": "16084004", "PostTypeId": "2", "Body": "<p>It's because you use <code>enum</code> for the constants. Enumeration constants can only be integers.</p>\n<p>I suggest you use <code>static const</code> member variables instead (or <code>static constexpr</code> if you're using a C++11 compiler).</p>\n", "LastActivityDate": "2013-04-18T13:14:26.263", "CommentCount": "0", "CreationDate": "2013-04-18T13:14:26.263", "ParentId": "16083926", "Score": "2", "OwnerUserId": "440558"}, "16083926": {"ViewCount": "392", "Body": "<p>while writing some code in c++, I want to express the notion that for a component of type X, its min value is <code>kMinValue</code> and its max value is <code>kMaxValue</code>. For this purpose, I did something like:</p>\n<pre><code>template &lt;typename ComponentType&gt;\nstruct CompTraits\n{\n\n};\n\ntemplate &lt;&gt;\nstruct CompTraits&lt;unsigned char&gt;\n{\n    typedef unsigned char ComponentType;\n    enum{\n        kMinValue = 0,\n        kMaxValue = 255\n    };              \n};\n</code></pre>\n<p>And, I can refer <code>CompTraits&lt;unsigned char&gt;::kMinValue</code>. But, I am not able to understand the trick for floating data types. Could someone please help in defining the same thing for floats.</p>\n<p>Thanks in advance.</p>\n", "AcceptedAnswerId": "16083994", "Title": "Defining value traits for floating points", "CreationDate": "2013-04-18T13:11:22.110", "Id": "16083926", "CommentCount": "3", "PostTypeId": "1", "LastActivityDate": "2013-04-19T12:42:27.797", "Score": "2", "OwnerUserId": "938221", "Tags": "<c++><template-specialization>", "AnswerCount": "3"}, "16083983": {"Id": "16083983", "PostTypeId": "2", "Body": "<p><strong>You can't used an <code>enum</code></strong> to define those values since an <code>enum</code> can only store integer values, you could use constants instead :</p>\n<pre><code>template &lt;&gt;\nstruct CompTraits&lt;double&gt;\n{\n    typedef double ComponentType;\n    static const double kMinValue = 0.;\n    static const double kMinValue = 1.;          \n};\n</code></pre>\n<p>Also for standard numeric types you could take a look at the <a href=\"http://www.cplusplus.com/reference/limits/numeric_limits/\" rel=\"nofollow\">std::numeric_limit</a> of the C++ STL.</p>\n<p><strong><code>numeric_limits&lt;unsigned char&gt;::min()</code></strong> will do the same thing as your <code>CompTraits&lt;unsigned char&gt;::kMinValue</code>, and it's implemented for every numeric types.</p>\n<p>Also note that <strong>you can specialize numeric_limit for your own data type</strong> :</p>\n<pre><code>namespace std {\n    template&lt;&gt;\n    struct numeric_limits&lt;YourType&gt;\n    {\n        static const bool is_specialized = true;\n        /* assuming YourType has a constructor from double */\n        static const YourType min() throw() { return 0. };\n        static const YourType max() throw() { return 1. };\n    };\n}\n</code></pre>\n<p>If you have doubt about the legitimacy of this approach, see :</p>\n<blockquote>\n<p id=\"so_16083926_16083983_0\">\u00ab A program may add template specializations\n  for any standard library template to namespace std. Such a\n  specialization (complete or partial) of a standard library template\n  results in undefined behavior unless the declaration depends on a\n  user-defined name of external linkage and unless the specialization\n  meets the standard library requirements for the original template.\u00bb\n  from <a href=\"http://cs.nyu.edu/courses/spring13/CSCI-GA.2110-001/downloads/C++%20Standard%202003.pdf\" rel=\"nofollow\">C++ 2003, \u00a717.4.3.1/1</a></p>\n</blockquote>\n", "LastEditorUserId": "1439688", "LastActivityDate": "2013-04-19T12:42:27.797", "Score": "1", "CreationDate": "2013-04-18T13:13:41.027", "ParentId": "16083926", "CommentCount": "0", "OwnerUserId": "1439688", "LastEditDate": "2013-04-19T12:42:27.797"}});