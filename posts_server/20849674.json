post_cb({"bq_ids": {"n4140": {"so_20849674_20849769_0": {"length": 4, "quality": 0.6666666666666666, "section_id": 7217}}, "n3337": {"so_20849674_20849769_0": {"length": 4, "quality": 0.6666666666666666, "section_id": 6961}}, "n4659": {"so_20849674_20849769_0": {"length": 4, "quality": 0.6666666666666666, "section_id": 8726}}}, "20849769": {"Id": "20849769", "PostTypeId": "2", "Body": "<p>Well, 3.9.1 [basic.fundamental] paragraph 8 states</p>\n<blockquote>\n<p id=\"so_20849674_20849769_0\">... The value representation of floating-point types is implementation-defined. ...</p>\n</blockquote>\n<p>At least, the implementation has to define what representation it uses.</p>\n<p>On the other hand, <code>std::numeric_limits&lt;F&gt;</code> defines a couple of members which seem to imply that the representation is some in the form of <em>significand  radix <sup>exponent</sup></em>:</p>\n<ul>\n<li><code>std::numeric_limits&lt;F&gt;::radix</code>: the radix of the exponent</li>\n<li><code>std::numeric_limtis&lt;F&gt;::digits</code>: the number of <code>radix</code> digits</li>\n</ul>\n<p>I think these statements imply that you can represent integers in the range of <code>0</code> ... <em>radix <sup>digits</sup> - 1</em> exactly.</p>\n", "LastActivityDate": "2013-12-31T00:18:14.013", "CommentCount": "8", "CreationDate": "2013-12-31T00:18:14.013", "ParentId": "20849674", "Score": "7", "OwnerUserId": "1120273"}, "20849674": {"ViewCount": "283", "Body": "<p>Does the C++03 standard guarantee that sufficiently small non-zero integers are represented exactly in <code>double</code>? If not, what about C++11? Note, I am not assuming IEEE compliance here.</p>\n<p>I suspect that the answer is <em>no</em>, but I would love to be proved wrong.</p>\n<p>When I say <em>sufficiently small</em>, I mean, bounded by some value that can be derived from the guarantees of C++03, and maybe even be calculated from values made available via <code>std::numeric_limits&lt;double&gt;</code>.</p>\n<hr>\n<p>EDIT:</p>\n<p>It is clear (now that I have checked) that <code>std::numeric_limits&lt;double&gt;::digits</code> is the same thing as <code>DBL_MANT_DIG</code>, and <code>std::numeric_limits&lt;double&gt;::digits10</code> is the same thing as <code>DBL_DIG</code>, and this is true for both C++03 and C++11.</p>\n<p>Further more, C++03 defers to C90, and C++11 defers to C99 with respect to the meaning of <code>DBL_MANT_DIG</code> and <code>DBL_DIG</code>.</p>\n<p>Both C90 and C99 states that the minimum allowable value for <code>DBL_DIG</code> is 10, i.e., 10 decimal digits.</p>\n<p>The question then is, what does that mean? Does it mean that integers of up to 10 decimal digits are guaranteed to be represented exactly in <code>double</code>?</p>\n<p>In that case, what is then the purpose of <code>DECIMAL_DIG</code> in C99, and the following remark in C99 \u00a75.2.4.2.2 / 12?</p>\n<blockquote>\n<p id=\"so_20849674_20849674_0\">Conversion from (at least) double to decimal with DECIMAL_DIG digits and back\n  should be the identity function.</p>\n</blockquote>\n<hr>\n<p>Here is what C99 \u00a75.2.4.2.2 / 9 has to say about <code>DBL_DIG</code>:</p>\n<pre><code>Number of decimal digits, 'q', such that any floating-point\nnumber with 'q' decimal digits can be rounded into a\nfloating-point number with 'p' radix 'b' digits and back again\nwithout change to the q decimal digits,\n\n    { p * log10(b)              if 'b' is a power of 10\n    {\n    { floor((p-1) * log10(b))   otherwise\n\nFLT_DIG   6\nDBL_DIG   10\nLDBL_DIG  10\n</code></pre>\n<p>I'll be happy if someone can help me unpack this.</p>\n</hr></hr>", "Title": "Is `double` guaranteed by C++03 to represent small integers exactly?", "CreationDate": "2013-12-31T00:06:51.477", "LastActivityDate": "2013-12-31T02:11:01.967", "CommentCount": "4", "LastEditDate": "2013-12-31T02:11:01.967", "PostTypeId": "1", "LastEditorUserId": "1698548", "Id": "20849674", "Score": "9", "OwnerUserId": "1698548", "Tags": "<c++><floating-point><integer><c++03>", "AnswerCount": "2"}, "20849778": {"Id": "20849778", "PostTypeId": "2", "Body": "<p>From the C standard, \"Characteristics of floating types <code>&lt;float.h&gt;</code>\", which is normative for C++, I would assume that you can combine <code>FLT_RADIX</code> and <code>FLT_MANT_DIG</code> into useful information: The number of digits in the mantissa and the base in which they are expressed.</p>\n<p>For example, for a single-precision IEEE754 float, this would be respectively 2 and 24, so you should be able to store integers of absolute value up to 2<sup>24</sup>.</p>\n", "LastActivityDate": "2013-12-31T00:18:47.913", "CommentCount": "0", "CreationDate": "2013-12-31T00:18:47.913", "ParentId": "20849674", "Score": "2", "OwnerUserId": "596781"}});