post_cb({"13678692": {"Id": "13678692", "PostTypeId": "2", "Body": "<p>This post lists all ways a default param can be set - <a href=\"https://stackoverflow.com/questions/334882/must-default-function-parameters-be-constant-in-c\">Must default function parameters be constant in C++?</a></p>\n<p>It's not difficult to workaround your need.</p>\n<pre><code>class A\n{\n    int a;\n    public:\n    void f(int i);\n\n    void f()\n    {\n        f(a);\n    }\n};\n</code></pre>\n<p>gives you what you want.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2012-12-03T08:42:16.780", "Score": "1", "CreationDate": "2012-12-03T07:09:54.820", "ParentId": "13678627", "CommentCount": "7", "OwnerUserId": "922712", "LastEditDate": "2017-05-23T10:34:57.123"}, "13678730": {"Id": "13678730", "PostTypeId": "2", "Body": "<p>I believe this are the most fitting paragraphs from the standard, especially \u00a79:</p>\n<blockquote>\n<h3>8.3.6 Default arguments [dcl.fct.default]</h3>\n<p id=\"so_13678627_13678730_0\">\u00a77 Local variables shall not be used in a default argument</p>\n<p id=\"so_13678627_13678730_1\">\u00a79 [...] Similarly, a non-static member shall not be used in a default argument, even if it is not evaluated, unless it appears as the id-expression of a class member access expression (5.2.5) or unless it is used to form a pointer to member (5.3.1).</p>\n</blockquote>\n", "LastActivityDate": "2012-12-03T07:12:40.767", "CommentCount": "1", "CreationDate": "2012-12-03T07:12:40.767", "ParentId": "13678627", "Score": "1", "OwnerUserId": "1139697"}, "13679985": {"Id": "13679985", "PostTypeId": "2", "Body": "<p>The essence of what you are asking can be distilled into this simple example</p>\n<pre><code>void foo(int a, int b = a);\n</code></pre>\n<p>This is not allowed in C++. C++ does not allow default arguments to depend on other parameters.</p>\n<p>Using class members as default arguments is just a particular case of the above, since class members are accessed through <code>this</code> pointer and <code>this</code> pointer is just another hidden parameter of each non-static member function.</p>\n<p>So, the question is really why</p>\n<pre><code>void foo(int a, int b = a);\n</code></pre>\n<p>is not allowed. </p>\n<p>One obvious potential reason to disallow this is that it would impose additional requirements on the order of argument evaluation. As you know, in C++ the order of function argument evaluation is unspecified - the compiler can evaluate arguments in any order. However, in order to support the above default argument functionality the compiler would have to make sure that <code>a</code> is evaluated before <code>b</code>. This feels like an excessive requirement, which restricts the typical freedom of evaluation order that we are used to seeing in C++.</p>\n<p>Note that this</p>\n<pre><code>int a;\n\nvoid foo(int b = a);\n</code></pre>\n<p>is allowed in C++. And, obviously, it does not exhibit the aforementioned order of evaluation issue.</p>\n", "LastEditorUserId": "187690", "LastActivityDate": "2012-12-16T08:00:16.457", "Score": "4", "CreationDate": "2012-12-03T09:03:05.343", "ParentId": "13678627", "CommentCount": "4", "OwnerUserId": "187690", "LastEditDate": "2012-12-16T08:00:16.457"}, "bq_ids": {"n4140": {"so_13678627_13678730_0": {"length": 4, "quality": 1.0, "section_id": 3258}, "so_13678627_13678627_0": {"length": 6, "quality": 0.6666666666666666, "section_id": 3260}, "so_13678627_13678730_1": {"length": 16, "quality": 0.8888888888888888, "section_id": 3260}}, "n3337": {"so_13678627_13678730_0": {"length": 4, "quality": 1.0, "section_id": 3130}, "so_13678627_13678627_0": {"length": 6, "quality": 0.6666666666666666, "section_id": 3132}, "so_13678627_13678730_1": {"length": 16, "quality": 0.8888888888888888, "section_id": 3132}}, "n4659": {"so_13678627_13678627_0": {"length": 6, "quality": 0.6666666666666666, "section_id": 8595}, "so_13678627_13678730_1": {"length": 13, "quality": 0.7222222222222222, "section_id": 4018}}}, "13678627": {"ViewCount": "221", "Body": "<blockquote>\n<p id=\"so_13678627_13678627_0\"><strong>Possible Duplicate:</strong><br>\n<a href=\"https://stackoverflow.com/questions/4539406/nonstatic-member-as-a-default-argument-of-a-nonstatic-member-function\">Nonstatic member as a default argument of a nonstatic member function</a> </br></p>\n</blockquote>\n<p>Correct me if I am wrong, but the way I think default parameters work is this:</p>\n<p>When the compiler sees the function call, it starts pushing the parameters onto the stack. When it runs out of parameters, it will start pushing the defaults onto the stack until all required parameters are filled (I know this is a simplification, since parameters are actually pushed from right to left, so it will start with the defaults, but the idea is the same).</p>\n<p>If this is true, why can't member variables be used as defaults? It seems to me that since the compiler is pushing them as usual at the call site, it should be able to resolve them just fine!</p>\n<p><strong>EDIT</strong> Since it seems by the answers my question was misunderstood, let me clarify. I know this is the case, and I know what is and isn't allowed by the language. My question is why did the language designers choose to not allow this, since it seems to naturally work.</p>\n", "AcceptedAnswerId": "13679985", "Title": "Why can member variables not be used as defaults for parameters?", "CreationDate": "2012-12-03T07:03:37.767", "Id": "13678627", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2017-05-23T12:02:59.700", "LastEditorUserId": "-1", "LastActivityDate": "2012-12-16T08:00:16.457", "ClosedDate": "2012-12-03T09:50:54.203", "Score": "6", "OwnerUserId": "331785", "Tags": "<c++><language-lawyer><default-parameters>", "AnswerCount": "4"}, "13679880": {"Id": "13679880", "PostTypeId": "2", "Body": "<p>Summarizing Nawaz excellent answer in the linked question: The call to <code>void Foo::Bar(int a = this-&gt;member)</code> really means <code>void Foo__Bar(Foo* this, int a = this-&gt;member)</code>. Obviously the second argument cannot be evaluated before the first, which violates a C++ axiom that compilers can evaluate arguments in whatever order they like.</p>\n", "LastEditorUserId": "15416", "LastActivityDate": "2012-12-03T09:18:50.467", "Score": "1", "CreationDate": "2012-12-03T08:54:47.987", "ParentId": "13678627", "CommentCount": "6", "OwnerUserId": "15416", "LastEditDate": "2012-12-03T09:18:50.467"}});