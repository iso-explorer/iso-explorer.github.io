post_cb({"39712992": {"ViewCount": "176", "Body": "<p>I've faced a weird problem - the library I use uses regular expressions, which can be either <code>boost</code> or <code>std</code>, depending on options provided during configuration. Due to other reasons, I can't use <code>std::regex</code> in my code and use <code>boost</code> instead. When I started to call library functions that internally use regular expressions, my code blocked. After many hours of debugging the problem, I located it. In short, this code blocks:</p>\n<pre><code>std::string str = \"/a/b/c/d/e/KEY/h/dsk-1474591592/ID-CERT\";\nstd::string pattern = \"^((?:(?!/KEY)(?:/.*)*)*)/KEY((?:/.+?)*)/ksk-.+/ID-CERT\";\nboost::regex re = regex(pattern);\nboost::sregex_iterator iterator = boost::sregex_iterator(str.begin(), str.end(), re);\n</code></pre>\n<p>When I made a little test program with this code, I got exception:</p>\n<pre><code>libc++abi.dylib: terminating with uncaught exception of type boost::exception_detail::clone_impl&lt;boost::exception_detail::error_info_injector&lt;std::runtime_error&gt; &gt;: The complexity of matching the regular expression exceeded predefined bounds.  Try refactoring the regular expression to make each choice made by the state machine unambiguous.  This exception is thrown to prevent \"eternal\" matches that take an indefinite period time to locate.\nAbort trap: 6\n</code></pre>\n<p>Same code, doesn't throw if std::regex is used instead.</p>\n<p>I tried several boost versions - 1.54, 1.58, 1.59 - all throw. I need to find a workaround for this - either suppress throwing this exact exception from boost (which might be dangerous) or make regex simpler (preferred). Unfortunately, I didn't have much experience with regexes and any advice on how to make it simpler would be highly appreciated!</p>\n<p><strong>UPDATE (ADDITIONAL INFO):</strong></p>\n<p>How the regular expression mentioned above was cretead: it is the resulting regex that is processed by the <a href=\"https://github.com/named-data/ndn-cpp\" rel=\"nofollow\">library</a>. It uses <a href=\"http://named-data.net/doc/ndn-cxx/current/tutorials/utils-ndn-regex.html\" rel=\"nofollow\">NDN-regex</a> in this <a href=\"https://github.com/named-data/ndn-cpp/blob/4a9207cd53144206c38cf9dc755d76b6038cdfb5/src/security/policy/config-policy-manager.cpp#L461\" rel=\"nofollow\">function</a> and passes it through this <a href=\"https://github.com/named-data/ndn-cpp/blob/4a9207cd53144206c38cf9dc755d76b6038cdfb5/src/util/ndn-regex-matcher.cpp#L56\" rel=\"nofollow\">sanitizing function</a>. </p>\n", "Title": "Boost regex throws complexity exception while std::regex does not", "CreationDate": "2016-09-26T21:52:37.570", "LastActivityDate": "2016-09-26T23:46:31.113", "CommentCount": "8", "LastEditDate": "2016-09-26T22:49:15.397", "PostTypeId": "1", "LastEditorUserId": "846340", "Id": "39712992", "Score": "1", "OwnerUserId": "846340", "Tags": "<c++><regex><osx><boost><boost-regex>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_39712992_39714004_0": {"length": 10, "quality": 0.9090909090909091, "section_id": 5059}}, "n3337": {"so_39712992_39714004_0": {"length": 10, "quality": 0.9090909090909091, "section_id": 4856}}, "n4659": {"so_39712992_39714004_0": {"length": 10, "quality": 0.9090909090909091, "section_id": 6480}}}, "39714004": {"Id": "39714004", "PostTypeId": "2", "Body": "<p><code>boost::regex</code> (and <code>std::regex</code>) will throw an exception when they decide an expression is too complex.  See [re.err] in the standard for a description of <code>error_complexity</code> and the related <code>error_stack</code>.</p>\n<blockquote>\n<p id=\"so_39712992_39714004_0\"><strong>error_complexity</strong>  The complexity of an attempted match against a regular expression exceeded a pre-set level.</p>\n</blockquote>\n<p>How it decides that, and what is \"too complex\" is implementation-defined.</p>\n<p>So, what you're seeing is \"perfectly fine\", but that is not really a helpful answer for you.</p>\n", "LastActivityDate": "2016-09-26T23:46:31.113", "CommentCount": "0", "CreationDate": "2016-09-26T23:46:31.113", "ParentId": "39712992", "Score": "0", "OwnerUserId": "992490"}});