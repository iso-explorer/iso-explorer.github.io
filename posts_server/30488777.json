post_cb({"30488911": {"ParentId": "30488777", "CommentCount": "0", "Body": "<p>The <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf\">4.13 section</a> says that</p>\n<blockquote>\n<p id=\"so_30488777_30488911_0\">Every integer type has an integer conversion rank defined as follows:</p>\n<p id=\"so_30488777_30488911_1\">\u2014 No two signed integer types other than char and signed char (if char\n  is signed) shall have the same rank, even if they have the same\n  representation.</p>\n<p id=\"so_30488777_30488911_2\">\u2014 The rank of a signed integer type shall be greater than the rank of\n  any signed integer type with a smaller size.</p>\n<p id=\"so_30488777_30488911_3\">\u2014 The rank of long long int shall be greater than the rank of long\n  int, which shall be greater than the rank of int, which shall be\n  greater than the rank of short int, which shall be greater than the\n  rank of signed char.</p>\n<p id=\"so_30488777_30488911_4\">\u2014 The rank of any unsigned integer type shall equal the rank of the\n  corresponding signed integer type</p>\n<p id=\"so_30488777_30488911_5\">\u2014 The rank of any standard integer type shall be greater than the rank\n  of any extended integer type with the same size.</p>\n<p id=\"so_30488777_30488911_6\">\u2014 The rank of char shall equal the rank of signed char and unsigned\n  char.</p>\n<p id=\"so_30488777_30488911_7\">\u2014 The rank of bool shall be less than the rank of all other standard\n  integer types.</p>\n<p id=\"so_30488777_30488911_8\">\u2014 The ranks of char16_t, char32_t, and wchar_t shall equal the ranks\n  of their underlying types (3.9.1).</p>\n<p id=\"so_30488777_30488911_9\">\u2014 The rank of any extended signed integer type relative to another\n  extended signed integer type with the same size is\n  implementation-defined, but still subject to the other rules for\n  determining the integer conversion rank.</p>\n<p id=\"so_30488777_30488911_10\">\u2014 For all integer types T1, T2, and T3, if T1 has greater rank than T2\n  and T2 has greater rank than T3, then T1 shall have greater rank than\n  T3.</p>\n</blockquote>\n", "OwnerUserId": "1501794", "PostTypeId": "2", "Id": "30488911", "Score": "5", "CreationDate": "2015-05-27T17:04:56.577", "LastActivityDate": "2015-05-27T17:04:56.577"}, "30488777": {"CommentCount": "2", "ViewCount": "799", "PostTypeId": "1", "LastEditorUserId": "908939", "CreationDate": "2015-05-27T16:57:57.273", "LastActivityDate": "2015-05-27T17:25:42.457", "Title": "What does rank mean in relation to type conversion?", "AcceptedAnswerId": "30488911", "LastEditDate": "2015-05-27T17:25:42.457", "Id": "30488777", "Score": "4", "Body": "<p><strong>From C++11 standard (draft n3337) \u00a75/9:</strong></p>\n<blockquote>\n<p id=\"so_30488777_30488777_0\">\u2014 If both operands have the same type, no further conversion is\n  needed.</p>\n<p id=\"so_30488777_30488777_1\">\u2014 Otherwise, if both operands have signed integer types or both have\n  unsigned integer types, the operand with the type of lesser integer\n  conversion <strong>rank</strong> shall be converted to the type of the operand with\n  greater <strong>rank</strong>.</p>\n<p id=\"so_30488777_30488777_2\">\u2014 Otherwise, if the operand that has unsigned integer type has <strong>rank</strong>\n  greater than or equal to the <strong>rank</strong> of the type of the other operand,\n  the operand with signed integer type shall be converted to the type of\n  the operand with unsigned integer type.</p>\n<p id=\"so_30488777_30488777_3\">\u2014 Otherwise, if the type of the operand with signed integer type can\n  represent all of the values of the type of the operand with unsigned\n  integer type, the operand with unsigned integer type shall be\n  converted to the type of the operand with signed integer type.</p>\n<p id=\"so_30488777_30488777_4\">\u2014 Otherwise, both operands shall be converted to the unsigned integer\n  type corresponding to the type of the operand with signed integer\n  type.</p>\n</blockquote>\n<p><strong>What does rank mean in this context?</strong><br>\nSurely it's not referring to <a href=\"http://en.cppreference.com/w/cpp/types/rank\" rel=\"nofollow\">std::rank</a>,<br>\nas that has to do with the number of dimensions in an array...  </br></br></p>\n<p>In terms of integral types and floating point types, I think it refers to their potential sizes.    </p>\n<p>The C++ Standard guarantees that:  </p>\n<pre><code>1 == sizeof(char) &lt;= sizeof(short) &lt;= sizeof(int) &lt;= sizeof(long) &lt;=  sizeof(long long)  \n</code></pre>\n<p>am I right to assume then that the ranks are then:  </p>\n<p><kbd><code><strong>Rank</strong></code></kbd><kbd><code><strong>Type</strong> </code></kbd><br/>\n<kbd><code>1   </code></kbd><kbd><code>char     </code></kbd><br>\n<kbd><code>2   </code></kbd><kbd><code>short    </code></kbd><br>\n<kbd><code>3   </code></kbd><kbd><code>int      </code></kbd><br>\n<kbd><code>4   </code></kbd><kbd><code>long     </code></kbd><br>\n<kbd><code>5   </code></kbd><kbd><code>long long</code></kbd><br>\n...  </br></br></br></br></br></p>\n<p>I haven't been able to find a <a href=\"http://en.cppreference.com/w/cpp/language/types\" rel=\"nofollow\">list</a> anywhere describing the level of rank for each type.  </p>\n", "Tags": "<c++><implicit-conversion><type-conversion><rank>", "OwnerUserId": "908939", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_30488777_30488777_0": {"section_id": 5943, "quality": 1.0, "length": 8}, "so_30488777_30488911_3": {"section_id": 45, "quality": 0.9583333333333334, "length": 23}, "so_30488777_30488777_1": {"section_id": 5943, "quality": 1.0, "length": 23}, "so_30488777_30488911_9": {"section_id": 45, "quality": 0.9166666666666666, "length": 22}, "so_30488777_30488777_3": {"section_id": 5943, "quality": 1.0, "length": 25}, "so_30488777_30488911_5": {"section_id": 45, "quality": 0.9166666666666666, "length": 11}, "so_30488777_30488911_10": {"section_id": 45, "quality": 0.9333333333333333, "length": 14}, "so_30488777_30488911_1": {"section_id": 45, "quality": 1.0, "length": 19}, "so_30488777_30488777_4": {"section_id": 5943, "quality": 1.0, "length": 13}, "so_30488777_30488777_2": {"section_id": 5943, "quality": 1.0, "length": 23}, "so_30488777_30488911_6": {"section_id": 45, "quality": 0.8888888888888888, "length": 8}, "so_30488777_30488911_8": {"section_id": 45, "quality": 0.8181818181818182, "length": 9}, "so_30488777_30488911_7": {"section_id": 45, "quality": 0.9, "length": 9}, "so_30488777_30488911_0": {"section_id": 45, "quality": 0.875, "length": 7}, "so_30488777_30488911_4": {"section_id": 45, "quality": 0.9090909090909091, "length": 10}, "so_30488777_30488911_2": {"section_id": 45, "quality": 0.9230769230769231, "length": 12}}, "n3337": {"so_30488777_30488777_0": {"section_id": 5714, "quality": 1.0, "length": 8}, "so_30488777_30488911_3": {"section_id": 42, "quality": 0.9583333333333334, "length": 23}, "so_30488777_30488777_1": {"section_id": 5714, "quality": 1.0, "length": 23}, "so_30488777_30488911_9": {"section_id": 42, "quality": 0.9166666666666666, "length": 22}, "so_30488777_30488777_4": {"section_id": 5714, "quality": 1.0, "length": 13}, "so_30488777_30488911_5": {"section_id": 42, "quality": 0.9166666666666666, "length": 11}, "so_30488777_30488911_10": {"section_id": 42, "quality": 0.9333333333333333, "length": 14}, "so_30488777_30488911_1": {"section_id": 42, "quality": 1.0, "length": 19}, "so_30488777_30488777_3": {"section_id": 5714, "quality": 1.0, "length": 25}, "so_30488777_30488777_2": {"section_id": 5714, "quality": 1.0, "length": 23}, "so_30488777_30488911_6": {"section_id": 42, "quality": 0.8888888888888888, "length": 8}, "so_30488777_30488911_8": {"section_id": 42, "quality": 0.8181818181818182, "length": 9}, "so_30488777_30488911_7": {"section_id": 42, "quality": 0.9, "length": 9}, "so_30488777_30488911_0": {"section_id": 42, "quality": 0.875, "length": 7}, "so_30488777_30488911_4": {"section_id": 42, "quality": 0.9090909090909091, "length": 10}, "so_30488777_30488911_2": {"section_id": 42, "quality": 0.9230769230769231, "length": 12}}, "n4659": {"so_30488777_30488777_0": {"section_id": 7428, "quality": 1.0, "length": 8}, "so_30488777_30488911_3": {"section_id": 46, "quality": 0.9583333333333334, "length": 23}, "so_30488777_30488777_1": {"section_id": 7428, "quality": 1.0, "length": 23}, "so_30488777_30488911_9": {"section_id": 46, "quality": 0.9166666666666666, "length": 22}, "so_30488777_30488777_3": {"section_id": 7428, "quality": 1.0, "length": 25}, "so_30488777_30488911_5": {"section_id": 46, "quality": 0.9166666666666666, "length": 11}, "so_30488777_30488911_10": {"section_id": 46, "quality": 0.9333333333333333, "length": 14}, "so_30488777_30488911_1": {"section_id": 46, "quality": 1.0, "length": 19}, "so_30488777_30488777_4": {"section_id": 7428, "quality": 1.0, "length": 13}, "so_30488777_30488777_2": {"section_id": 7428, "quality": 1.0, "length": 23}, "so_30488777_30488911_6": {"section_id": 46, "quality": 0.8888888888888888, "length": 8}, "so_30488777_30488911_2": {"section_id": 46, "quality": 0.9230769230769231, "length": 12}, "so_30488777_30488911_7": {"section_id": 46, "quality": 0.9, "length": 9}, "so_30488777_30488911_0": {"section_id": 46, "quality": 0.875, "length": 7}, "so_30488777_30488911_4": {"section_id": 46, "quality": 0.9090909090909091, "length": 10}, "so_30488777_30488911_8": {"section_id": 46, "quality": 0.8181818181818182, "length": 9}}}});