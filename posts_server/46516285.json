post_cb({"46516285": {"CommentCount": "5", "AcceptedAnswerId": "46516847", "PostTypeId": "1", "LastEditorUserId": "2069064", "CreationDate": "2017-10-01T19:51:15.543", "LastActivityDate": "2017-10-02T02:18:49.223", "LastEditDate": "2017-10-02T02:18:49.223", "ViewCount": "230", "FavoriteCount": "2", "Title": "Conditional operator with same underlying class type", "Id": "46516285", "Score": "5", "Body": "<p>Should this program output 0 or 1? In my reading and understanding of the cited paragraphs from the C++14 standard, it should print 1, but both GCC and clang prints 0 (because the deduced type is <code>A const</code> instead of <code>A const&amp;</code>):</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct A {};\n\nint main()\n{\n    A a;\n    A const&amp; ra = std::move(a); // #1\n\n    std::cout &lt;&lt; std::is_same&lt;decltype(true ? ra : std::move(a)),\n                              A const&amp;&gt;::value; // Prints 0\n}\n</code></pre>\n<p>In this case, <code>ra</code> is a <code>A const</code> lvalue, and <code>std::move(a)</code> is a <code>A</code> xvalue, both of class-types. According to the standard about the conditional operator (emphasis mine), the result should be an <code>lvalue</code> of type <code>A const</code>, and thus the <code>decltype</code> result must be <code>A const&amp;</code>:</p>\n<blockquote>\n<p id=\"so_46516285_46516285_0\"><strong>[expr.cond]/3</strong> Otherwise, if the second and third operand have different types and <strong>either has (possibly cv-qualified) class\n  type</strong>, or if both are glvalues of the same value category and the same type except for cv-qualification, an\n  attempt is made to convert each of those operands to the type of the other. The process for determining\n  whether an operand expression E1 of type T1 can be converted to match an operand expression E2 of type\n  T2 is defined as follows:</p>\n<p id=\"so_46516285_46516285_1\">\u2014 If <strong>E2 is an lvalue</strong>: E1 can be converted to match E2 if E1 can be implicitly converted (Clause 4) to the\n  type <strong>\u201clvalue reference to T2\u201d</strong>, subject to the constraint that in the conversion the reference <strong>must bind directly (8.5.3) to an lvalue</strong>.</p>\n<p id=\"so_46516285_46516285_2\">[...]</p>\n</blockquote>\n<p>In this case, <strong>E2</strong> is <code>ra</code>, which is a lvalue, and the other can be implicitely converted to <strong>\"lvalue reference to T2\"</strong>, as shown in line <code>// #1</code>. <strong>\"lvalue reference to T2\"</strong> is translated as <code>A const&amp;</code>, so, <code>std::move(a)</code> binds directly to a lvalue of type <code>A const</code>, and after the conversion, both operands have same type and value category, and thus:</p>\n<blockquote>\n<p id=\"so_46516285_46516285_3\"><strong>[expr.cond]/3</strong> If the second and third operands are glvalues of the same value category and have the same type, the result is of that type and value category [...].</p>\n</blockquote>\n<p>So, the operator result should be an lvalue and the <code>decltype</code> result should be a reference, and thus the program should print 1.</p>\n", "Tags": "<c++><c++14><conditional-operator><decltype>", "OwnerUserId": "1794803", "AnswerCount": "1"}, "46516847": {"ParentId": "46516285", "PostTypeId": "2", "CommentCount": "8", "Body": "<p>The question is awkwardly worded. You should instead ask what the type and value category of the expression <code>true ? ra : std::move(a)</code> should be. The answer to that question is a prvalue of type <code>A const</code>. This subsequently means the program should print 0, as I think every compiler correctly does.</p>\n<hr/>\n<p>The rules for <code>?:</code> are fairly complex. In this case, we have two expressions of class type that we try to see if we can convert to each other, based on a limited subset of rules.</p>\n<p>Attempting the conversion <code>ra</code> \u2192 <code>std::move(a)</code> fails. We first try with a  <a href=\"https://timsong-cpp.github.io/cppwp/n4140/expr.cond#3.2\" rel=\"nofollow noreferrer\">target type</a> is <code>A&amp;&amp;</code> which can't bind directly to <code>ra</code>. We then try the backup plan in <a href=\"https://timsong-cpp.github.io/cppwp/n4140/expr.cond#3.3.1\" rel=\"nofollow noreferrer\">(3.3.1)</a> since the two expressions have the same underlying class type, but our target expression is not at least as cv-qualified as the source expression, so this also fails. </p>\n<p>Attempting the conversion <code>std::move(a)</code> \u2192 <code>ra</code> fails <a href=\"https://timsong-cpp.github.io/cppwp/n4140/expr.cond#3.1\" rel=\"nofollow noreferrer\">(3.1)</a> because we need to bind directly to an lvalue (we can bind an rvalue to a const lvalue reference, but here we are <strong>required</strong> to bind an lvalue). But, the <a href=\"https://timsong-cpp.github.io/cppwp/n4140/expr.cond#3.3.1\" rel=\"nofollow noreferrer\">(3.3.1)</a> backup succeeds because now the target type <em>is</em> at least as cv-qualified as the source. </p>\n<p>Hence, we apply the conversion and we continue as if the second operand were an lvalue of type <code>A const</code> but the third operand is now a prvalue of type <code>A const</code> (instead of an xvalue of type <code>A</code>).</p>\n<p><a href=\"https://timsong-cpp.github.io/cppwp/n4140/expr.cond#4\" rel=\"nofollow noreferrer\">(4)</a> fails, because they're not of the same value category.</p>\n<p>Hence, the <a href=\"https://timsong-cpp.github.io/cppwp/n4140/expr.cond#5\" rel=\"nofollow noreferrer\">result is a prvalue</a>. And since they have the same type, <a href=\"https://timsong-cpp.github.io/cppwp/n4140/expr.cond#6.1\" rel=\"nofollow noreferrer\">the result is of that type</a>: <code>A const</code>.</p>\n", "OwnerUserId": "2069064", "LastEditorUserId": "2069064", "LastEditDate": "2017-10-01T22:58:24.310", "Id": "46516847", "Score": "6", "CreationDate": "2017-10-01T21:00:03.397", "LastActivityDate": "2017-10-01T22:58:24.310"}, "bq_ids": {"n4140": {"so_46516285_46516285_0": {"section_id": 6169, "quality": 0.9555555555555556, "length": 43}, "so_46516285_46516285_3": {"section_id": 6170, "quality": 0.9333333333333333, "length": 14}, "so_46516285_46516285_1": {"section_id": 6169, "quality": 0.95, "length": 19}}, "n3337": {"so_46516285_46516285_0": {"section_id": 5930, "quality": 0.9555555555555556, "length": 43}, "so_46516285_46516285_3": {"section_id": 5931, "quality": 0.9333333333333333, "length": 14}, "so_46516285_46516285_1": {"section_id": 5930, "quality": 0.95, "length": 19}}, "n4659": {"so_46516285_46516285_0": {"section_id": 7667, "quality": 0.7777777777777778, "length": 35}, "so_46516285_46516285_3": {"section_id": 7668, "quality": 0.9333333333333333, "length": 14}, "so_46516285_46516285_1": {"section_id": 7667, "quality": 0.55, "length": 11}}}});