post_cb({"16383049": {"ParentId": "16382948", "CommentCount": "1", "CreationDate": "2013-05-05T09:13:35.460", "OwnerUserId": "9990", "PostTypeId": "2", "Id": "16383049", "Score": "3", "Body": "<p>You'll find a helpful description of <code>std::map&lt;\u2026&gt;::operator[]</code> at <a href=\"http://en.cppreference.com/w/cpp/container/map/operator_at\" rel=\"nofollow\">cppreference.com</a>.</p>\n<p>I assume you want to <em>conditionally</em> add a Value using a non-default constructor, i.e., when the corresponding key isn't present in the map.</p>\n<h3>C++03</h3>\n<pre><code>std::map&lt;int, Value&gt;::iterator i = myMap.find(j);\nif (i == myMap.end())\n    i = myMap.insert(std::map&lt;int, Value&gt;::value_type(j, 123)).first;\ni-&gt;add(k);\n</code></pre>\n<h3>C++11</h3>\n<pre><code>auto i = myMap.find(j);\nif (i == myMap.end())\n    i = myMap.emplace(j, 123).first;\ni-&gt;add(k);\n</code></pre>\n<p>In both cases, newly inserted <code>Value</code>s will have some_member == 123.</p>\n", "LastActivityDate": "2013-05-05T09:13:35.460"}, "16382948": {"CommentCount": "2", "ViewCount": "1513", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2013-05-05T08:57:11.313", "LastActivityDate": "2013-05-05T09:13:35.460", "Title": "initialize std::map value when its key does not exist", "AcceptedAnswerId": "16382969", "LastEditDate": "2017-05-23T12:18:56.707", "Id": "16382948", "Score": "1", "Body": "<p>I read in <a href=\"https://stackoverflow.com/questions/1639544/why-does-stdmap-operator-create-an-object-if-the-key-doesnt-exist\">here</a> that <em>the std::map operator[] create an object if the key doesn't exist</em> !</p>\n<p>1st of all may I know where I can find a reference for this claim?(Although I know it is true)</p>\n<p><strong>Next, imagin the following code snippet:</strong></p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include&lt;map&gt;\n\nclass Value {\n//..\n    int some_member; //is used for any purpose that you like\n    std::vector&lt;int&gt; some_container;\npublic:\n    Value(int some_member_) :\n            some_member(some_member_) {\n        std::cout &lt;&lt; \"Hello from the one-argument constructor\" &lt;&lt; std::endl;\n    }\n    Value() {\n        std::cout &lt;&lt; \"Hello from the no argument constructor\" &lt;&lt; std::endl;\n    }\n    void add(int v) {\n        some_container.push_back(v);\n    }\n    int getContainerSize()\n    {\n        return some_container.size();\n    }\n\n//...\n};\n\n//and somewhere in the code:\n\nclass A {\npublic:\n    std::map&lt;int, Value&gt; myMap;\n\n    void some_other_add(int j, int k) {\n        myMap[j].add(k);\n    }\n    int getsize(int j)\n    {\n        return myMap[j].getContainerSize();\n    }\n\n};\n//and the program actually works\nint main() {\n    A a;\n    std::cout &lt;&lt; \"Size of container in key 2 = \" &lt;&lt; a.getsize(2) &lt;&lt; std::endl;\n    a.some_other_add(2, 300);\n    std::cout &lt;&lt; \"New Size of container in key 2 = \" &lt;&lt; a.getsize(2) &lt;&lt; std::endl;\n\n    return 1;\n}\n</code></pre>\n<p>output:</p>\n<pre><code>Hello from the no argument constructor\nSize of container in key 2 = 0\nNew Size of container in key 2 = 1\n</code></pre>\n<p>I can see from the above output that the no-argument constructor is invoked.</p>\n<p><strong>My question is:</strong> Is there any way to invoke the one-argument constructor of map's Value(s) ?</p>\n<p>thank you</p>\n", "Tags": "<c++><constructor><stdmap>", "OwnerUserId": "805896", "AnswerCount": "2"}, "16382969": {"ParentId": "16382948", "CommentCount": "3", "CreationDate": "2013-05-05T09:00:34.257", "OwnerUserId": "1932150", "PostTypeId": "2", "Id": "16382969", "Score": "6", "Body": "<blockquote>\n<p id=\"so_16382948_16382969_0\">may I know where I can find a reference for this claim?</p>\n</blockquote>\n<p>This is what the C++11 Standard mandates. Per paragraph 23.4.4.3:</p>\n<blockquote>\n<pre><code>T&amp; operator[](const key_type&amp; x);\n</code></pre>\n<p id=\"so_16382948_16382969_1\">1 <em>Effects</em>: If there is no key equivalent to <code>x</code> in the map, inserts <code>value_type(x, T())</code> into the map.</p>\n<p id=\"so_16382948_16382969_2\">[...]</p>\n<pre><code>T&amp; operator[](key_type&amp;&amp; x);\n</code></pre>\n<p id=\"so_16382948_16382969_3\">5 <em>Effects</em>: If there is no key equivalent to <code>x</code> in the map, inserts <code>value_type(std::move(x), T())</code> into\n  the map.</p>\n</blockquote>\n<p>Concerning the second question:</p>\n<blockquote>\n<p id=\"so_16382948_16382969_4\">Is there any way to invoke the one-argument constructor of map's Value(s) ?</p>\n</blockquote>\n<p>You could do this in C++03:</p>\n<pre><code>void some_other_add(int j, int k) {\n    myMap.insert(std::make_pair(j, Value(k)));\n}\n</code></pre>\n<p>And use the <a href=\"http://en.cppreference.com/w/cpp/container/map/emplace\"><code>emplace()</code></a> member function in C++11:</p>\n<pre><code>myMap.emplace(j, k);\n</code></pre>\n", "LastActivityDate": "2013-05-05T09:00:34.257"}, "bq_ids": {"n4140": {"so_16382948_16382969_1": {"section_id": 1007, "quality": 0.8888888888888888, "length": 8}, "so_16382948_16382969_3": {"section_id": 1011, "quality": 0.8888888888888888, "length": 8}}, "n3337": {"so_16382948_16382969_1": {"section_id": 992, "quality": 0.8888888888888888, "length": 8}, "so_16382948_16382969_3": {"section_id": 996, "quality": 0.8888888888888888, "length": 8}}, "n4659": {"so_16382948_16382969_1": {"section_id": 802, "quality": 0.5555555555555556, "length": 5}, "so_16382948_16382969_3": {"section_id": 802, "quality": 0.5555555555555556, "length": 5}}}});