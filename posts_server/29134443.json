post_cb({"bq_ids": {"n4140": {"so_29134443_29134572_2": {"length": 15, "quality": 0.5357142857142857, "section_id": 3314}}, "n4659": {"so_29134443_29134572_2": {"length": 15, "quality": 0.5357142857142857, "section_id": 4080}}}, "29134846": {"Id": "29134846", "PostTypeId": "2", "Body": "<p>In C++11, without macros:</p>\n<pre><code>template &lt;typename T, size_t n&gt;\nconstexpr size_t array_length(const T (&amp;)[n]) {\n    return n;\n}\n\ntemplate &lt;typename T, size_t n&gt;\nconstexpr size_t string_length(const T (&amp;)[n]) {\n    return n - 1;\n}\n</code></pre>\n<p>I realize the question explicitly eliminates C++11 but that might not be true about everyone reaching this question from a search engine.</p>\n", "Score": "0", "LastActivityDate": "2015-03-18T23:54:17.040", "CreationDate": "2015-03-18T23:54:17.040", "ParentId": "29134443", "CommentCount": "2", "OwnerUserId": "432"}, "29134745": {"Id": "29134745", "PostTypeId": "2", "Body": "<p>The simplest solution is to change your array length macro to ignore the trailing null:</p>\n<pre><code>#define ARRAY_LEN(array) (sizeof(array)/sizeof((array)[0]) - 1)\n</code></pre>\n<p>(posted under duress :)</p>\n", "Score": "2", "LastActivityDate": "2015-03-18T23:42:55.163", "CreationDate": "2015-03-18T23:42:55.163", "ParentId": "29134443", "CommentCount": "4", "OwnerUserId": "506413"}, "29134572": {"Id": "29134572", "PostTypeId": "2", "LastEditDate": "2017-05-23T12:22:15.317", "CommentCount": "8", "LastEditorUserId": "-1", "LastActivityDate": "2015-03-18T23:46:02.950", "CreationDate": "2015-03-18T23:26:26.880", "ParentId": "29134443", "Score": "4", "Body": "<blockquote>\n<p id=\"so_29134443_29134572_0\">Is there some trick to define a constant string literal without a\n  trailing '\\0' character?</p>\n</blockquote>\n<p>In C, if you specify the size of a character array to be one less than the size of the string literal initializer, it won't have a trailing null character. You could do it like so:</p>\n<pre><code>static const char c_seqence[ARRAY_LEN(\"___----__--_-_\")-1] = \"___----__--_-_\";\n</code></pre>\n<p>Of course, to avoid having to indicate the string literal twice in the same line, you might want to define a macro to do it:</p>\n<pre><code>#define MAKE_STR_LITERAL(n, l) static const char n[ARRAY_LEN(l)-1] = l\n</code></pre>\n<p>You can use it like this:</p>\n<pre><code>MAKE_STR_LITERAL(c_seqence, \"___----__--_-_\");\n</code></pre>\n<p><strong>Note</strong>:</p>\n<p>As stated in <a href=\"https://stackoverflow.com/a/4348188/2793118\">https://stackoverflow.com/a/4348188/2793118</a>, this behavior is in section 6.7.8 of the standard (quoting from that answer):</p>\n<blockquote>\n<p id=\"so_29134443_29134572_1\"><strong>\u00a7 6.7.8p14</strong></p>\n<p id=\"so_29134443_29134572_2\">An array of character type may be initialized by a character string\n  literal, optionally enclosed in braces. Successive characters of the\n  character string literal (including the terminating null character if\n  there is room or if the array is of unknown size) initialize the\n  elements of the array.</p>\n</blockquote>\n<p><strong>Note2</strong>: Turns out this is a C-only thing. In C++ it will not compile. Yet another great example of why people shouldn't tag questions with both C and C++.</p>\n", "OwnerUserId": "2793118"}, "29134443": {"ViewCount": "102", "Body": "<p>is there some trick to define a constant string literal without a trailing <code>'\\0'</code> character?</p>\n<pre><code>#define ARRAY_LEN(array) (sizeof(array)/sizeof((array)[0]))\n\nstatic const char c_seqence[] = \"___----__--_-_\";\n</code></pre>\n<p>So that using <code>ARRAY_LEN(c_seqence)</code> returns the actual sequence length without the <code>'\\0'</code>?\nNo runtime ovearhead should be generated.\nObiously the string like representation is preffered to a char array <code>{'_','_',...}</code> initialization because of better readability.</p>\n<p>C solution is preffered but may be also some c++ solution may be interesting as long they do not rely on c++11 features.</p>\n", "Title": "constant string literal without terminating nul", "CreationDate": "2015-03-18T23:15:37.360", "LastActivityDate": "2015-03-18T23:54:17.040", "CommentCount": "13", "PostTypeId": "1", "Id": "29134443", "Score": "2", "OwnerUserId": "2331592", "Tags": "<c++><c>", "AnswerCount": "3"}});