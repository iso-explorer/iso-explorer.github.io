post_cb({"bq_ids": {"n4140": {"so_38344470_38345017_1": {"length": 28, "quality": 1.0, "section_id": 6683}, "so_38344470_38345017_0": {"length": 14, "quality": 0.875, "section_id": 6682}, "so_38344470_38345357_1": {"length": 9, "quality": 0.9, "section_id": 6682}, "so_38344470_38345357_0": {"length": 6, "quality": 1.0, "section_id": 6682}}, "n3337": {"so_38344470_38345357_0": {"length": 6, "quality": 1.0, "section_id": 6437}, "so_38344470_38345357_1": {"length": 9, "quality": 0.9, "section_id": 6437}, "so_38344470_38345017_0": {"length": 14, "quality": 0.875, "section_id": 6437}, "so_38344470_38345017_1": {"length": 28, "quality": 1.0, "section_id": 6438}}, "n4659": {"so_38344470_38345017_0": {"length": 14, "quality": 0.875, "section_id": 8157}, "so_38344470_38345357_1": {"length": 9, "quality": 0.9, "section_id": 8157}, "so_38344470_38345357_0": {"length": 6, "quality": 1.0, "section_id": 8157}, "so_38344470_38345017_1": {"length": 28, "quality": 1.0, "section_id": 8158}}}, "38344470": {"ViewCount": "80", "Body": "<p>Here is my codes in file source.cpp:</p>\n<pre><code>class B\n{\n  friend class F;\nprotected:\n  int protectedIntB;\n};\n\nclass D : public B {};\n\nclass F\n{\npublic:\n  int f(D &amp;d) {return ++d.protectedIntB;}\n};\n</code></pre>\n<p>When I compile above codes with <code>g++ -c -Wall -pedantic -std=c++11 source.cpp</code> and <code>cl /c source.cpp</code>, both compilers compile successfully. However, when I make D inherits from B using <code>protected</code> instead of <code>public</code>:</p>\n<pre><code>class D : protected B {};\n</code></pre>\n<p>This time, gcc compiles successfully while cl gives an error says that <code>B::protectedIntB</code> is inaccessible in <code>return ++d.protectedIntB;</code>.</p>\n<p>Another situation is replacing <code>public</code> with <code>private</code>:</p>\n<pre><code>class D : private B {};\n</code></pre>\n<p>This time, both compilers yield errors. By the way I'm using gcc version 5.3.0 built by mingw-w64 and cl version 19.00.24210 from VS2015.</p>\n<p>Here comes my question:</p>\n<p>How does friend class of the base class access members of that base class through objects of class derived from the base class, and why gcc and cl handle it differently?</p>\n<p><strong>Edit:</strong></p>\n<p>Thanks to <a href=\"https://stackoverflow.com/users/3309790/songyuanyao\">songyuanyao</a> and <a href=\"https://stackoverflow.com/users/481267/brian\">Brian</a>, it seems a bug in gcc 5.3.0 in the <code>protected</code> case. Only the <code>public</code> case should be compiled successfully, and gcc 6.1.0 also works fine.</p>\n", "AcceptedAnswerId": "38345017", "Title": "How does friend class of the base class access members of that base class through objects of class derived from the base class?", "CreationDate": "2016-07-13T06:48:55.800", "Id": "38344470", "CommentCount": "0", "LastEditDate": "2017-05-23T11:51:39.170", "PostTypeId": "1", "LastEditorUserId": "-1", "LastActivityDate": "2016-07-13T08:47:08.850", "Score": "2", "OwnerUserId": "5845611", "Tags": "<c++><inheritance><language-lawyer><friend>", "AnswerCount": "3"}, "38344809": {"Id": "38344809", "PostTypeId": "2", "Body": "<p>If the code compiles on gcc 5.3.0 and does not compile on cl, probability is high that one of the two does not strictly enforce C++ standard. If I have to take a guess, for protected and private inheritance, you should get a compiler error. For the difference between different kind of inheritances see <a href=\"https://stackoverflow.com/questions/860339/difference-between-private-public-and-protected-inheritance\">Difference between private, public, and protected inheritance</a> for more details. </p>\n<p>For the class F to be able to access the private members of class B, It should know that class D derives from class B which will only happen for public inheritance.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2016-07-13T07:06:53.883", "Score": "0", "CreationDate": "2016-07-13T07:06:53.883", "ParentId": "38344470", "CommentCount": "0", "OwnerUserId": "2990896", "LastEditDate": "2017-05-23T12:08:06.307"}, "38345017": {"Id": "38345017", "PostTypeId": "2", "Body": "<p>According to [class.access.base]/5:</p>\n<blockquote>\n<p id=\"so_38344470_38345017_0\">The access to a member is affected\n  by the class in which the member is named. This naming class is the class in which the member name was\n  looked up and found.</p>\n</blockquote>\n<p>According to [class.access.base]/6:</p>\n<blockquote>\n<p id=\"so_38344470_38345017_1\">If a class member access operator, including an implicit \u201c<code>this-&gt;</code>,\u201d is used to access a non-static data member\n  or non-static member function, the reference is ill-formed if the left operand (considered as a pointer in the\n  \u201c<code>.</code>\u201d operator case) cannot be implicitly converted to a pointer to the naming class of the right operand.</p>\n</blockquote>\n<p>Therefore, in your particular case, in order to access <code>d.protectedIntB</code>, both of the following must be true:</p>\n<ul>\n<li><p>You have to have access to <code>protectedIntB</code> as a member of <code>B</code>, since <code>B</code> is the class in which the name <code>protectedIntB</code> was found. (Note: this can be altered by redeclaring the member in the derived class using a <em>using-declaration;</em> in that case the derived class would be controlling.)</p></li>\n<li><p>You have to have access to <code>B</code> as a base of <code>D</code>, <em>i.e.,</em> be able to convert <code>D*</code> to <code>B*</code>. If <code>B</code> is a public base of <code>D</code>, fine. If <code>B</code> is a protected base of <code>D</code>, an access check applies, which <code>F::f</code> fails since <code>F</code> is not a friend of <code>D</code> and is not a derived class of <code>D</code>.</p></li>\n</ul>\n<p>Surprisingly, it seems that GCC is the compiler that's wrong in the protected case but this bug <a href=\"http://coliru.stacked-crooked.com/a/f93625a9e500cb34\" rel=\"nofollow\">appears fixed</a>. Note that Clang gives a <a href=\"http://coliru.stacked-crooked.com/a/e65b4c0aef2739a8\" rel=\"nofollow\">much better diagnostic</a>.</p>\n", "LastActivityDate": "2016-07-13T07:17:45.830", "CommentCount": "0", "CreationDate": "2016-07-13T07:17:45.830", "ParentId": "38344470", "Score": "3", "OwnerUserId": "481267"}, "38345357": {"Id": "38345357", "PostTypeId": "2", "Body": "<p>If you make <code>D</code> inherits from <code>B</code> using protected or private instead of public, compilation should fail.</p>\n<p>From the standard, <a href=\"http://eel.is/c++draft/class.access.base#5\" rel=\"nofollow\">$11.2/5 Accessibility of base classes and base class members\n[class.access.base]</a>:</p>\n<blockquote>\n<p id=\"so_38344470_38345357_0\">A member m is accessible at the point R when named in class N if</p>\n<p id=\"so_38344470_38345357_1\">(5.4)    there exists a base class B of N that is accessible at R, and\n  m is accessible at R when named in class B. [ Example:</p>\n<pre><code>class B;\nclass A {\nprivate:\n  int i;\n  friend void f(B*);\n};\nclass B : public A { };\nvoid f(B* p) {\n  p-&gt;i = 1;         // OK: B* can be implicitly converted to A*,\n                    // and f has access to i in A\n}\n</code></pre>\n<p id=\"so_38344470_38345357_2\">\u2014 end example ] </p>\n</blockquote>\n<p>For your 1st case, the base class <code>B</code> of <code>D</code> is accessible at <code>F::f()</code>, because it's public inheritance. And <code>B::protectedIntB</code> is accessible at <code>F::f()</code> because it's friend of class <code>B</code>.</p>\n<p>If you change it to protected or private inheritance, the base class <code>B</code> of <code>D</code> is not accessible at <code>F::f()</code> again, then compilation should fail. Note <code>F::f()</code> is not friend of derived class <code>D</code>. It means if you make it friend of class <code>D</code> too, compilation will succeed.</p>\n<p>BTW: I tried the protected inheritance with gcc <a href=\"http://coliru.stacked-crooked.com/a/79a3ad4ac0964835\" rel=\"nofollow\">here</a> and it failed.</p>\n", "LastEditorUserId": "3309790", "LastActivityDate": "2016-07-13T08:45:06.223", "Score": "3", "CreationDate": "2016-07-13T07:35:16.487", "ParentId": "38344470", "CommentCount": "0", "OwnerUserId": "3309790", "LastEditDate": "2016-07-13T08:45:06.223"}});