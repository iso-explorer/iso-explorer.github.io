post_cb({"bq_ids": {"n4140": {"so_13905200_28936701_0": {"length": 7, "quality": 0.875, "section_id": 775}}, "n3337": {"so_13905200_28936701_0": {"length": 7, "quality": 0.875, "section_id": 762}}}, "13905432": {"Id": "13905432", "PostTypeId": "2", "Body": "<p><a href=\"http://gcc.gnu.org/bugzilla/show_bug.cgi?id=25137\"><code>-Wmissing-braces</code> will no longer be enabled in GCC's <code>-Wall</code> (for C++ mode), as of 4.8, for precisely the reason you describe.</a> For current versions of GCC, either disable or ignore the warning, the code you have is written the way it should be.</p>\n<p>The warning is probably meant to cover code such as</p>\n<pre><code>struct A { int a; int b; };\nstruct B { A a; int b; };\nB b = {\n  1,\n  2 // initialises b.a.b, not b.b\n};\n</code></pre>\n<p>However, IMHO, that is already handled well enough by <code>-Wmissing-field-initializers</code>, which does not warn about your original code.</p>\n", "LastEditorUserId": "743382", "LastActivityDate": "2015-04-26T12:34:53.590", "CommentCount": "6", "CreationDate": "2012-12-16T20:59:15.380", "ParentId": "13905200", "Score": "40", "OwnerUserId": "743382", "LastEditDate": "2015-04-26T12:34:53.590"}, "39209864": {"PostTypeId": "2", "Body": "<p>When ignoring the Clang warning with <code>-Wno-missing-braces</code>, I would recommend to enable <code>-Wmissing-field-initializers</code> (or use <code>-Wextra</code>, which also includes it). Otherwise, you miss a useful warning like in this example:</p>\n<pre class=\"lang-cpp prettyprint-override\"><code>#include &lt;cstdio&gt;\n\nstruct A\n{\n  int i;\n  int arr[2];\n  int j;\n};\n\nvoid print(const A&amp; a)\n{\n  printf(\"i=%d, arr={%d,%d}, j=%d\\n\", a.i, a.arr[0], a.arr[1], a.j);\n}\n\nint main() {\n  A a = {1, 2, 3}; // this is the critical line\n  print(a); // output: i=1, arr={2,3}, j=0\n\n  A b = {1, {2}, 3};\n  print(b); // output: i=1, arr={2,0}, j=3\n\n  A c = {1, {2,0}, 3};\n  print(c); // output: i=1, arr={2,0}, j=3\n\n  return 0;\n}\n</code></pre>\n<pre class=\"lang-none prettyprint-override\"><code>$ clang++ -Wall example.cpp\nexample.cpp:16:13: warning: suggest braces around initialization of\n      subobject [-Wmissing-braces]\n  A a = {1, 2, 3};\n            ^~~~\n            {   }\n1 warning generated.\n\n$ clang++ -Wall -Wno-missing-braces example.cpp\n(no warnings)\n\n$ clang++ -Wall -Wno-missing-braces -Wmissing-field-initializers example.cpp\nexample.cpp:16:17: warning: missing field 'j' initializer\n      [-Wmissing-field-initializers]\n  A a = {1, 2, 3};\n                ^\n1 warning generated.\n\n$ clang++ --version\nclang version 3.8.1 (tags/RELEASE_381/final)\n</code></pre>\n<p>For comparison, this is what GCC does:</p>\n<pre class=\"lang-none prettyprint-override\"><code>$ g++ -Wall -Wextra example.cpp\n(no warning)\n\n$ g++ -Wall -Wmissing-field-initializers example.cpp\nexample.cpp: In function \u2018int main()\u2019\nexample.cpp:16:17: warning: missing initializer for member \u2018A::j\u2019 [-Wmissing-field-initializers]\n   A a = {1, 2, 3};\n                 ^\n</code></pre>\n<p>In summary:</p>\n<ul>\n<li>For Clang, I would recommend <code>-Wno-missing-braces -Wmissing-field-initializers</code> to silence the warning without loosing other useful warnings</li>\n<li>GCC does not complain in the original <code>std::array&lt;int, 1&gt; x = { 0 };</code> example, so there is no need to disable any warnings. However, I would recommend to enable <code>-Wmissing-field-initializers</code> (or use <code>-Wextra</code>), as it is not enabled by <code>-Wall</code>.</li>\n</ul>\n", "LastActivityDate": "2016-08-29T15:26:40.753", "Id": "39209864", "CommentCount": "2", "CreationDate": "2016-08-29T15:26:40.753", "ParentId": "13905200", "Score": "3", "OwnerUserId": "783510"}, "13905200": {"ViewCount": "13733", "Body": "<p>Consider the following program:</p>\n<pre><code>#include &lt;array&gt;\n\nint main()\n{\n  std::array&lt;int, 1&gt; x = { 0 }; // warning!\n  x = { { 0 } }; // no warning\n  return 0;\n}\n</code></pre>\n<p>The first initialization leads to warnings on gcc 4.7.2...</p>\n<pre><code>main.cpp:5:22: warning: unused variable \u2018x\u2019 [-Wunused-variable]\n</code></pre>\n<p>... and clang 3.1</p>\n<pre><code>main.cpp:5:28: warning: suggest braces around initialization of subobject [-Wmissing-braces]\n  std::array&lt;int, 1&gt; x = { 0 };\n</code></pre>\n<p>As far as the standard goes, there should be no difference between double or single curly braces, at least in this example.</p>\n<p>There are two ways to deal with the warning:</p>\n<ol>\n<li>Just turn it off</li>\n<li>Fix the code, so the compiler is happy</li>\n</ol>\n<p>What do you propose? IMHO, the double curly expression looks somewhat ugly. On the other hand, the warning might detect real problems in more complicated examples. Do you know an example where the warning would have helped you?</p>\n", "AcceptedAnswerId": "13905432", "Title": "Is it wise to ignore gcc/clang's \"-Wmissing-braces\" warning?", "CreationDate": "2012-12-16T20:31:32.143", "Id": "13905200", "CommentCount": "2", "FavoriteCount": "3", "PostTypeId": "1", "LastEditDate": "2012-12-17T05:49:47.253", "LastEditorUserId": "636019", "LastActivityDate": "2016-08-29T15:26:40.753", "Score": "37", "OwnerUserId": "783510", "Tags": "<c++><c++11><compiler-warnings>", "AnswerCount": "3"}, "28936701": {"Id": "28936701", "PostTypeId": "2", "Body": "<p>I get the same warning in Xcode 6.1.1 (the current version as of March 9, 2015).  When I add the extra braces around each subobject I get an error.  When I add an extra set of braces around the entire initialization list then the warning goes away.  According to the standard specification 14882:2011 23.3.2.1 [array.overview] subsection 2 explicitly states</p>\n<pre><code>array&lt;T, N&gt; a = { initializer-list };\n</code></pre>\n<blockquote>\n<p id=\"so_13905200_28936701_0\">where initializer-list is a comma-separated list of up to N elements\n  whose types are convertible to T</p>\n</blockquote>\n<p>result of code in Xcode 6.1.1 (below)</p>\n<pre><code>array&lt;int, 2&gt; key1 = {1, 2}; // warning: suggest braces around initialization of subobject\n\narray&lt;int, 2&gt; key2 = { {1}, {2} }; // error: no viable overload =\n\narray&lt;int, 2&gt; key3 = array&lt;int, 2&gt; { {1}, {2} }; // error: excess elements in struct initializer\n\narray&lt;int, 2&gt; key4 = { {1, 2} }; // no warning and no error\n</code></pre>\n<p>When we look at 14882:2011 8.5 [dcl.init] subsection 1 we see that an 'initializer-list' can optionally contain an 'initializer-clause', which itself can be a 'braced-init-list'.  So either way should be correct.  Though based on the spec I personally think single braces shouldn't output a compiler warning for a std::array initializer-list, and double braces is overkill.</p>\n", "LastEditorUserId": "4648695", "LastActivityDate": "2015-03-09T07:30:49.063", "CommentCount": "0", "CreationDate": "2015-03-09T07:05:39.157", "ParentId": "13905200", "Score": "6", "OwnerUserId": "4648695", "LastEditDate": "2015-03-09T07:30:49.063"}});