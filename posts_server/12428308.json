post_cb({"26947012": {"ParentId": "12428308", "CommentCount": "0", "Body": "<p>In implict inlining the inline member function is defined within the class definition.the keyword inline is not used</p>\n", "OwnerUserId": "4255896", "PostTypeId": "2", "Id": "26947012", "Score": "0", "CreationDate": "2014-11-15T14:46:36.243", "LastActivityDate": "2014-11-15T14:46:36.243"}, "12428308": {"CommentCount": "1", "ViewCount": "1152", "CreationDate": "2012-09-14T16:15:34.083", "LastActivityDate": "2014-11-15T14:46:36.243", "Title": "Implicit copy constructor", "AcceptedAnswerId": "12428391", "PostTypeId": "1", "Id": "12428308", "Score": "6", "Body": "<p>Quote from n3337 12.3.1/3</p>\n<blockquote>\n<p id=\"so_12428308_12428308_0\">A non-explicit copy/move constructor (12.8) is a converting\n  constructor. An implicitly-declared copy/move constructor is not an\n  explicit constructor; it may be called for implicit type conversions.</p>\n</blockquote>\n<p>Quote from ANSI ISO IEC 14882 2003</p>\n<blockquote>\n<p id=\"so_12428308_12428308_1\">A non-explicit copy-constructor (12.8) is a converting constructor. An\n  implicitly-declared copy constructor is not an explicit constructor;\n  it may be called for implicit type conversions.</p>\n</blockquote>\n<p>I have no ideas, how <code>copy-constructor</code> can be used for <code>implicit</code> type <code>conversions</code>. And if it's misprint/error in standard, why it's not corrected since C++03 standard? Any links and examples (if we can use it for <code>type conversions</code>) are really appreciated.</p>\n", "Tags": "<c++><c++11><copy-constructor><implicit-conversion>", "OwnerUserId": "1498580", "AnswerCount": "2"}, "12428391": {"ParentId": "12428308", "CommentCount": "2", "Body": "<p>A copy constructor can convert from an object of a derived type by slicing it:</p>\n<pre><code>struct A {};\nstruct B : A {};\n\nB b;\nA a = b; // uses A::A(A const&amp;) to convert B to A\n</code></pre>\n", "OwnerUserId": "204847", "PostTypeId": "2", "Id": "12428391", "Score": "8", "CreationDate": "2012-09-14T16:21:42.650", "LastActivityDate": "2012-09-14T16:21:42.650"}, "bq_ids": {"n4140": {"so_12428308_12428308_1": {"section_id": 390, "quality": 0.8, "length": 12}, "so_12428308_12428308_0": {"section_id": 390, "quality": 0.9375, "length": 15}}, "n3337": {"so_12428308_12428308_1": {"section_id": 381, "quality": 0.8, "length": 12}, "so_12428308_12428308_0": {"section_id": 381, "quality": 0.9375, "length": 15}}, "n4659": {"so_12428308_12428308_1": {"section_id": 407, "quality": 0.8, "length": 12}, "so_12428308_12428308_0": {"section_id": 407, "quality": 0.9375, "length": 15}}}});