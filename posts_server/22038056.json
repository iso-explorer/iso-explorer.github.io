post_cb({"22038056": {"ViewCount": "325", "Body": "<p>The C++11 algorithms <code>std::is_sorted</code> and <code>std::is_sorted_until</code> both require <code>ForwardIterator</code>s. However, the Boost.Range version <code>boost::is_sorted</code> only requires <code>SinglePassRange</code>s which corresponds to <code>InputIterator</code>s. In particular, it delegates to an an iterator-based implementation like this:</p>\n<pre><code>template&lt;class Iterator, class Comp&gt;\ninline Iterator is_sorted_until (Iterator first, Iterator last, Comp c) {\n  if (first == last)\n    return last;\n\n  Iterator it = first; ++it;\n\n  for (; it != last; first = it, ++it)\n    if (c(*it, *first))\n      return it;\n\n  return it;\n}\n</code></pre>\n<p>Here we see a <code>*first</code> iterator dereference that happens after the <code>++it</code> iterator increment. This means that <code>Iterator</code> should have <code>ForwardIterator</code> as its required category. Why? Because the Standard says so in  </p>\n<p><strong>24.2.3 Input iterators [input.iterators]/p2</strong> (see table 107 with the line about <code>++r</code>)</p>\n<blockquote>\n<p id=\"so_22038056_22038056_0\">post: any copies of the previous value of <code>r</code> are no longer required\n  either to be dereferenceable or to be in the domain of <code>==</code>.</p>\n</blockquote>\n<p><strong>Note</strong>: this is not intended to be \"a proof by single example\", but it seems that any comparison based algorithm (e.g. <code>adjacent_find</code>) would necessarily require forward iterators in order to be able to make a comparison between two iterators.</p>\n<p><strong>Question</strong>: why doesn't the Boost.Range version of <code>is_sorted</code> require the stronger concept of <code>ForwardRange</code> (and <code>ForwardIterator</code> for its low-level routines) that is required by <code>std::is_sorted</code>? Is it a bug in Boost.Range?</p>\n", "AcceptedAnswerId": "22138899", "Title": "Why doesn't Boost.Range is_sorted require forward iterators?", "CreationDate": "2014-02-26T10:10:06.993", "Id": "22038056", "CommentCount": "5", "LastEditDate": "2014-02-26T10:43:23.890", "PostTypeId": "1", "LastEditorUserId": "819272", "LastActivityDate": "2014-03-03T05:10:50.750", "Score": "11", "OwnerUserId": "819272", "Tags": "<c++><algorithm><c++11><iterator><boost-range>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_22038056_22038056_0": {"length": 9, "quality": 1.0, "section_id": 5569}}, "n3337": {"so_22038056_22038056_0": {"length": 9, "quality": 1.0, "section_id": 5351}}, "n4659": {"so_22038056_22038056_0": {"length": 8, "quality": 0.8888888888888888, "section_id": 7016}}}, "22138899": {"Id": "22138899", "PostTypeId": "2", "Body": "<p>It looks like the iterator versions in boost.algorithm correctly require <code>ForwardIterators</code>. And believe it or not, <a href=\"http://www.boost.org/doc/libs/1_55_0/libs/algorithm/doc/html/the_boost_algorithm_library/CXX11/is_sorted.html\" rel=\"nofollow\"><strong>there are also range-based versions in boost.algorithm.</strong></a> Code duplication at its best. The documentation is lagging behind the source according to <a href=\"https://svn.boost.org/trac/boost/ticket/9367\" rel=\"nofollow\">Ticket #9367</a>, <a href=\"https://svn.boost.org/trac/boost/changeset/86741\" rel=\"nofollow\">Changeset #86741</a> corrects the rest of the documentation to state that all flavors of the sort-checking algorithms require <code>ForwardIterators</code>.</p>\n<p>I would prefer the implementations in <code>&lt;boost/algorithm/cxx11/is_sorted.hpp&gt;</code> over those in <code>&lt;boost/range/algorithm_ext/is_sorted.hpp&gt;</code> which seem to be bit-rotting since 2010.</p>\n<p>EDIT: Digging around, it appears that the Boost.Range implementations <em>did</em> require <code>ForwardIterator</code>, but <a href=\"https://github.com/boostorg/range/commit/367582d0f414ba7098081c69b8b86428905f6f2f\" rel=\"nofollow\">this commit broke them in 2010?!?</a>.</p>\n", "LastEditorUserId": "923854", "LastActivityDate": "2014-03-03T05:10:50.750", "Score": "2", "CreationDate": "2014-03-03T04:51:27.887", "ParentId": "22038056", "CommentCount": "1", "OwnerUserId": "923854", "LastEditDate": "2014-03-03T05:10:50.750"}});