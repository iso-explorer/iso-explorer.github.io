post_cb({"25673057": {"ParentId": "25672971", "CommentCount": "0", "Body": "<p>If the first condition is false then the second condition will not be evaluated because in any case the full expression will be equal to false independing on what is the result of evaluatuin of the second condition.</p>\n<p>According to the C++ Standard</p>\n<blockquote>\n<p id=\"so_25672971_25673057_0\">1 The &amp;&amp; operator groups left-to-right. The operands are both\n  contextually converted to bool (Clause 4). The result is true if both\n  operands are true and false otherwise. Unlike &amp;, &amp;&amp; guarantees\n  left-to-right evaluation: <strong>the second operand is not evaluated if the\n  first operand is false.</strong></p>\n</blockquote>\n", "OwnerUserId": "2877241", "PostTypeId": "2", "Id": "25673057", "Score": "0", "CreationDate": "2014-09-04T18:54:10.923", "LastActivityDate": "2014-09-04T18:54:10.923"}, "25672971": {"CommentCount": "3", "ViewCount": "807", "CreationDate": "2014-09-04T18:48:52.853", "LastActivityDate": "2014-09-04T18:54:10.923", "Title": "if conditions execute order in C++", "AcceptedAnswerId": "25673000", "PostTypeId": "1", "Id": "25672971", "Score": "2", "Body": "<p>I have a if block as below in C++:</p>\n<pre><code>if( node != NULL &amp;&amp; node-&gt;next !=NULL ){\n    //do some stuff\n}\n</code></pre>\n<p>Can anybody tell me do I need to split node and node-&gt;next in two if block? or is it\nguaranteed that node!=NULL will executed before node-&gt;next!=NULL ? </p>\n", "Tags": "<c++><if-statement><order><execute>", "OwnerUserId": "2497462", "AnswerCount": "4"}, "25673008": {"ParentId": "25672971", "CommentCount": "0", "Body": "<p>You do not need to. node!=NULL will execute first and if it is false it will not evaluate the rest of the conditions.</p>\n", "OwnerUserId": "3471177", "PostTypeId": "2", "Id": "25673008", "Score": "0", "CreationDate": "2014-09-04T18:51:22.360", "LastActivityDate": "2014-09-04T18:51:22.360"}, "25673020": {"ParentId": "25672971", "CommentCount": "0", "Body": "<p>No, you do not.  The <code>&amp;&amp;</code> operator <em>short-circuits</em>; if the left operand evaluates to false then the right operand is not evaluated at all, because the result is already known.  (Similarly, the <code>||</code> operator will not evaluate the right operand when the left operand is true.)</p>\n", "OwnerUserId": "501250", "PostTypeId": "2", "Id": "25673020", "Score": "2", "CreationDate": "2014-09-04T18:52:02.240", "LastActivityDate": "2014-09-04T18:52:02.240"}, "25673000": {"ParentId": "25672971", "CommentCount": "0", "Body": "<p>This is a <a href=\"http://en.wikipedia.org/wiki/Short-circuit_evaluation\">short circuit</a> evaluation and the operator &amp;&amp; guarantees that the left-hand side expression will be fully evaluated before the right-hand side is evaluated</p>\n<p>From the standards:</p>\n<blockquote id=\"so_25672971_25673000_0\">\n<h2>5.14 Logical AND operator [expr.log.and]</h2>\n<pre><code>logical-and-expression: \n      inclusive-or-expression\n      logical-and-expression &amp;&amp; inclusive-or-expression \n</code></pre>\n<ol>\n<li>The &amp;&amp; operator groups <strong>left-to-right</strong>. The\n  operands are both contextually converted to bool (Clause 4). The\n  result is true if both operands are true and false otherwise. Unlike\n  &amp;, <strong>&amp;&amp; guarantees left-to-right evaluation</strong>: the second operand is not\n  evaluated if the first operand is false. </li>\n<li>The result is a bool. If the\n  second expression is evaluated, every value computation and side\n  effect associated with the first expression is sequenced before every\n  value computation and side effect associated with the second\n  expression.</li>\n</ol>\n</blockquote>\n", "OwnerUserId": "1501794", "Id": "25673000", "PostTypeId": "2", "OwnerDisplayName": "user3414693", "Score": "13", "CreationDate": "2014-09-04T18:50:46.050", "LastActivityDate": "2014-09-04T18:50:46.050", "LastEditorUserId": "1501794"}, "bq_ids": {"n4140": {"so_25672971_25673057_0": {"section_id": 6163, "quality": 0.896551724137931, "length": 26}}, "n3337": {"so_25672971_25673057_0": {"section_id": 5924, "quality": 0.896551724137931, "length": 26}}, "n4659": {"so_25672971_25673057_0": {"section_id": 7660, "quality": 0.896551724137931, "length": 26}}}});