post_cb({"41581251": {"ParentId": "41581225", "CommentCount": "3", "Body": "<p>According to [basic.lookup.qual]/3,</p>\n<blockquote>\n<p id=\"so_41581225_41581251_0\">In a declaration in which the <em>declarator-id</em> is a <em>qualified-id</em>, names used before the <em>qualified-id</em> being declared\n  are looked up in the defining namespace scope; names following the <em>qualified-id</em> are looked up in the scope\n  of the member\u2019s class or namespace.</p>\n</blockquote>\n<p>The return type comes before the <em>qualified-id</em> being declared (that is, <code>A::Method</code>) whereas the parameter type comes after it, so the parameter type's name is automatically looked up in the scope of <code>A</code>, while the return type's name is not. We can avoid the extra qualification using a trailing return type.</p>\n<pre><code>auto A::Method(B argument) -&gt; B;\n</code></pre>\n", "OwnerUserId": "481267", "PostTypeId": "2", "Id": "41581251", "Score": "8", "CreationDate": "2017-01-11T01:19:26.063", "LastActivityDate": "2017-01-11T01:19:26.063"}, "41581225": {"CommentCount": "0", "AcceptedAnswerId": "41581251", "CreationDate": "2017-01-11T01:15:46.993", "LastActivityDate": "2017-01-11T01:19:26.063", "PostTypeId": "1", "ViewCount": "144", "FavoriteCount": "0", "Title": "Returning member class in C++", "Id": "41581225", "Score": "7", "Body": "<p>In the following example:</p>\n<pre><code>class A\n{\npublic:\n    class B\n    {\n        ...\n    }\n    B Method(B argument);\n}\n\nA::B A::Method(B argument);\n</code></pre>\n<p>Why exactly is the scope required for return type, while not for argument type?</p>\n", "Tags": "<c++><types>", "OwnerUserId": "7302586", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_41581225_41581251_0": {"section_id": 7109, "quality": 1.0, "length": 20}}, "n3337": {"so_41581225_41581251_0": {"section_id": 6853, "quality": 1.0, "length": 20}}, "n4659": {"so_41581225_41581251_0": {"section_id": 8610, "quality": 1.0, "length": 20}}}});