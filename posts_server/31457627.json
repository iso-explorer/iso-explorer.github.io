post_cb({"bq_ids": {"n4140": {"so_31457627_31457627_1": {"length": 7, "quality": 0.875, "section_id": 7094}, "so_31457627_31457627_0": {"length": 24, "quality": 0.9230769230769231, "section_id": 7094}, "so_31457627_31457917_0": {"length": 5, "quality": 1.0, "section_id": 187}, "so_31457627_31457828_0": {"length": 8, "quality": 1.0, "section_id": 7094}}, "n3337": {"so_31457627_31457627_1": {"length": 6, "quality": 0.75, "section_id": 6838}, "so_31457627_31457627_0": {"length": 14, "quality": 0.5384615384615384, "section_id": 6838}, "so_31457627_31457917_0": {"length": 5, "quality": 1.0, "section_id": 181}, "so_31457627_31457828_0": {"length": 6, "quality": 0.75, "section_id": 3082}}, "n4659": {"so_31457627_31457627_1": {"length": 6, "quality": 0.75, "section_id": 8595}, "so_31457627_31457627_0": {"length": 23, "quality": 0.8846153846153846, "section_id": 8595}, "so_31457627_31457917_0": {"length": 5, "quality": 1.0, "section_id": 192}, "so_31457627_31457828_0": {"length": 8, "quality": 1.0, "section_id": 8595}}}, "31457828": {"Id": "31457828", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_31457627_31457828_0\">[\u2026] or in the definition of a class member <strong>outside of the definition</strong>\n  of <code>X</code>, following the member\u2019s <em>declarator-id</em></p>\n</blockquote>\n<p>I.e. the following is valid</p>\n<pre><code>struct C {\n    using I = int;\n    void f(I);\n};\n\nvoid C::f(I) {}\n</code></pre>\n", "LastActivityDate": "2015-07-16T14:59:06.237", "Score": "5", "CreationDate": "2015-07-16T14:59:06.237", "ParentId": "31457627", "CommentCount": "4", "OwnerUserId": "3647361"}, "31457627": {"ViewCount": "142", "Body": "<p>According to [basic.lookup.unqual]/8 from <a href=\"https://github.com/cplusplus/draft/blob/master/papers/n4140.pdf\" rel=\"nofollow\">N4140</a> the following snippet should compile. But it doesn't in <a href=\"http://coliru.stacked-crooked.com/a/03c6d030f364bf92\" rel=\"nofollow\">clang</a>, gcc and vs2013.</p>\n<pre><code>struct C {\n    void f(I) {}\n    using I = int;\n};\n</code></pre>\n<p>[basic.lookup.unqual]/8 (emphases are mine):</p>\n<blockquote>\n<p id=\"so_31457627_31457627_0\">For the members of a class <code>X</code>, a name used in a member function body,\n  in a default argument, in an <em>exception-specification</em>, in the\n  <em>brace-or-equal-initializer</em> of a non-static data member (9.2), or in the definition of a class member outside of the definition of <code>X</code>,\n  following the member\u2019s <strong><em>declarator-id</em><sup>31</sup></strong>, shall be\n  declared in one of the following ways:  </p>\n<ul>\n<li>before its use in the block in which it is used or in an enclosing block (6.3), or</li>\n<li><strong>shall be a member of class <code>X</code></strong> or be a member of a base class of <code>X</code> (10.2), or</li>\n<li>...  </li>\n</ul>\n<p id=\"so_31457627_31457627_1\"><strong><sup>31) That is, an unqualified name that occurs, for instance, in a type in the <em>parameter-declaration-clause</em> or in the\n  <em>exceptions-pecification</em>.</sup></strong></p>\n</blockquote>\n", "AcceptedAnswerId": "31457917", "Title": "According to my interpretation of \u00a73.4.1/8 this code should compile. What am I missing?", "CreationDate": "2015-07-16T14:50:20.140", "Id": "31457627", "CommentCount": "2", "LastEditDate": "2015-07-16T19:09:07.597", "PostTypeId": "1", "LastEditorUserId": "1708801", "LastActivityDate": "2015-07-17T03:07:44.033", "Score": "2", "OwnerUserId": "1042389", "Tags": "<c++><language-lawyer><c++14>", "AnswerCount": "2"}, "31457917": {"Id": "31457917", "PostTypeId": "2", "Body": "<p>The way you are using it does not fall under any of the conditions in <em>[basic.lookup.unqual]/8</em>, it is not used:</p>\n<ul>\n<li>in a member function body</li>\n<li>in a default argument</li>\n<li>in an exception-specification</li>\n<li>in the brace-or-equal-initializer of a non-static data member</li>\n</ul>\n<p>and it does not fall under this case either:</p>\n<blockquote>\n<p id=\"so_31457627_31457917_0\">definition of a class member outside of the definition of X</p>\n</blockquote>\n<p>the following example shows some cases that do follow those rules:</p>\n<pre><code>struct C {\n    int y = I() ;           // brace-or-equal-initializer of non-static data member\n    void f(int x = I())     // default argument\n      noexcept(sizeof(I)&lt;4) // exception-specification\n    {\n          I i = x ;         // member function body\n    }\n    using I = int;   \n};\n</code></pre>\n", "LastEditorUserId": "1708801", "LastActivityDate": "2015-07-17T03:07:44.033", "Score": "7", "CreationDate": "2015-07-16T15:03:45.027", "ParentId": "31457627", "CommentCount": "6", "LastEditDate": "2015-07-17T03:07:44.033", "OwnerUserId": "1708801"}});