post_cb({"25097032": {"CommentCount": "3", "ViewCount": "231", "CreationDate": "2014-08-02T16:18:00.143", "LastActivityDate": "2014-08-02T17:03:14.147", "Title": "Is this compiler bug triggered by invalid code, or should it compile?", "AcceptedAnswerId": "25097443", "PostTypeId": "1", "Id": "25097032", "Score": "2", "Body": "<p>Given the following complete program:</p>\n<pre><code>#include &lt;functional&gt;\n\nstruct jobbie\n{\n    std::function&lt;void()&gt; a;\n};\n\nvoid do_jobbie(jobbie j = {})\n{\n    if (j.a) \n        j.a();\n}\n\nint main()\n{\n    do_jobbie();\n    return 0;\n}\n</code></pre>\n<p>compiling this on gcc (Ubuntu 4.8.1-2ubuntu1~12.04) 4.8.1:\nboom!</p>\n<pre><code>richard@DEV1:~/tmp$ g++ -std=c++11 bug.cpp\nbug.cpp: In function \u2018int main()\u2019:\nbug.cpp:16:13: internal compiler error: in create_tmp_var, at gimplify.c:479\n  do_jobbie();\n             ^\nPlease submit a full bug report,\nwith preprocessed source if appropriate.\nSee &lt;file:///usr/share/doc/gcc-4.8/README.Bugs&gt; for instructions.\nPreprocessed source stored into /tmp/ccWGpb7M.out file, please attach this to your bugreport.\n</code></pre>\n<p>However, clang [Apple LLVM version 5.1 (clang-503.0.40) (based on LLVM 3.4svn)] is happy with it.</p>\n<pre><code>$ clang++ -std=c++11 bug.cpp\n</code></pre>\n<p>It seems to me that clang is correctly deducing that j defaults to a default-constructed <code>jobbie</code> object whereas gcc is (obviously) blowing up.</p>\n<p>replacing line 8 with <code>void do_jobbie(jobbie j = jobbie {})</code> fixes the problem on gcc.</p>\n<p>Question - which of these is true:</p>\n<ol>\n<li>clang is correct, gcc is faulty (ignoring the compiler blow-up)</li>\n<li>clang is over-reaching the standard and it should not really compile</li>\n<li>the standard does not make it clear?</li>\n</ol>\n", "Tags": "<c++><c++11><g++><clang++><g++4.8>", "OwnerUserId": "2015579", "AnswerCount": "2"}, "25097443": {"ParentId": "25097032", "CommentCount": "5", "Body": "<p>This indicates that it should work:</p>\n<blockquote>\n<p id=\"so_25097032_25097443_0\">The default argument has the same semantic constraints as the initializer in a declaration of a variable of the parameter type, using the copy-initialization semantics.</p>\n</blockquote>\n<p>(8.3.6, wording from draft n3936)</p>\n", "OwnerUserId": "103167", "PostTypeId": "2", "Id": "25097443", "Score": "2", "CreationDate": "2014-08-02T17:03:14.147", "LastActivityDate": "2014-08-02T17:03:14.147"}, "25097063": {"ParentId": "25097032", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>An internal compiler error is always a compiler bug. Compilers should be able to process anything without crashing like that.</p>\n<p>clang has similar handling for when it crashes, producing data for reporting the bug and pointing the user to clang's bug reporting web page.</p>\n<p>I don't see anything tricky about this code. It seems straightforward to me that it should compile and run.</p>\n", "OwnerUserId": "365496", "LastEditorUserId": "365496", "LastEditDate": "2014-08-02T16:26:40.150", "Id": "25097063", "Score": "4", "CreationDate": "2014-08-02T16:21:19.933", "LastActivityDate": "2014-08-02T16:26:40.150"}, "bq_ids": {"n4140": {"so_25097032_25097443_0": {"section_id": 3256, "quality": 0.9285714285714286, "length": 13}}, "n3337": {"so_25097032_25097443_0": {"section_id": 3128, "quality": 0.9285714285714286, "length": 13}}, "n4659": {"so_25097032_25097443_0": {"section_id": 4014, "quality": 0.9285714285714286, "length": 13}}}});