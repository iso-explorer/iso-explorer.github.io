post_cb({"3909825": {"Body": "<p>I think GCC 4.5.1 is nonconforming wrt \u00a75.16/4. Have you <a href=\"http://gcc.gnu.org/bugzilla/\" rel=\"nofollow\">filed a bug report</a>?</p>\n<p>Anyway, I think it is conforming with that ternary operator code. <code>decltype</code> is defined by \u00a77.1.6.2/4:</p>\n<blockquote>\n<p id=\"so_3909720_3909825_0\">The type denoted by decltype(e) is\n  defined as follows:</p>\n<ul>\n<li>if e is an unparenthesized id-expression or a class member access\n  (5.2.5), decltype(e) is the type of\n  the entity named by e. If there is no\n  such entity, or if e names a set of\n  overloaded functions, the program is\n  ill-formed;</li>\n<li>otherwise, if e is a function call (5.2.2) or an invocation of an\n  overloaded operator (parentheses\n  around e are ignored), decltype(e) is\n  the return type of the statically\n  chosen function;</li>\n<li>otherwise, if e is an lvalue, decltype(e) is T&amp;, where T is the type\n  of e;</li>\n<li>otherwise, decltype(e) is the type of e. The operand of the decltype\n  specifier is an unevaluated operand\n  (Clause 5).</li>\n</ul>\n</blockquote>\n<p><code>decltype</code> works by fetching the appropriate declaration and returning the desired type from it. It has little intelligence with respect to non-overloaded operators. Perhaps another point</p>\n<ul>\n<li>otherwise, if <code>e</code> is an xvalue, decltype(e) is <code>T&amp;&amp;</code>, where <code>T</code> is the type of <code>e</code></li>\n</ul>\n<p>would be in order, particularly since, as written, xvalues get treated as prvalues. Furthermore, your expression corresponds exactly to the definition of <code>std::common_type</code> (\u00a720.7.6.6/3).</p>\n<p>One straightforward workaround (to coin a phrase :vP ):</p>\n<pre><code>template&lt; typename T1, typename T2 &gt;\nstruct common_type_and_category {\n    typedef typename std::conditional&lt;\n        std::is_same&lt; T1, T2 &gt;::value,\n        T1,\n        typename std::common_type&lt; T1, T2 &gt;::type\n    &gt;::type type;\n};\n</code></pre>\n", "CreationDate": "2010-10-11T20:46:27.190", "ParentId": "3909720", "CommentCount": "0", "LastEditDate": "2010-10-11T21:08:19.680", "Id": "3909825", "PostTypeId": "2", "LastActivityDate": "2010-10-11T21:08:19.680", "LastEditorUserId": "153285", "CommunityOwnedDate": "2010-10-11T20:46:27.190", "Score": "2", "OwnerUserId": "153285"}, "bq_ids": {"n4140": {"so_3909720_3909720_0": {"length": 14, "quality": 0.875, "section_id": 6170}, "so_3909720_3909825_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 5440}}, "n3337": {"so_3909720_3909825_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 5235}, "so_3909720_3909720_0": {"length": 14, "quality": 0.875, "section_id": 5931}}, "n4659": {"so_3909720_3909825_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 6867}, "so_3909720_3909720_0": {"length": 14, "quality": 0.875, "section_id": 7668}}}, "3909720": {"ViewCount": "579", "Body": "<p>I am reposting a <a href=\"http://groups.google.com/group/comp.std.c++/tree/browse_frm/thread/2c794aa70224c726/df7535c66f6a1b24?rnum=1&amp;_done=%2Fgroup%2Fcomp.std.c%2B%2B%2Fbrowse_frm%2Fthread%2F2c794aa70224c726%3F#doc_df7535c66f6a1b24\" rel=\"nofollow\">comp.std.c++ Usenet discussion</a> here because that group has become very unreliable. The last few posts I've submitted there have gone into the void, and activity has all but ceased. I doubt I've been banned and/or everyone else just lost interest. Hopefully all interested people will find this discussion, and there will be a general migration. Maybe then they will appoint a new moderator.</p>\n<hr>\n<p>Hello!</p>\n<p>With my current interpretation of draft N3126 w.r.t. the conditional\noperator and xvalues, I expect the following assertions to hold:</p>\n<pre><code> int i = 0;\n int&amp; j = true? i : i;\n int&amp;&amp; k = true? std::move(i) : std::move(i);   // #2\n assert(&amp;i == &amp;j); // Holds since C++98\n assert(&amp;i == &amp;k); // Should this hold as well?\n</code></pre>\n<p>5.16/4 says:</p>\n<blockquote>\n<p id=\"so_3909720_3909720_0\">If the second and third operands [to\n  the conditional operator] are \n  glvalues of the same value category\n  and have the same type, the  result is\n  of that type and value category [...]</p>\n</blockquote>\n<p>Though, it doesn't clearly say that the resulting glvalue refers to\none of the objects the glvalue operands referred to -- or is this\nimplied because otherwise it would return a prvalue? Using GCC 4.5.1\nin C++0x mode the second assertion fails. The reference k seems to\nrefer to some temporary object. Can somebody clarify whether the\ncomiler is allowed to create such a temporary in case both operands\naround the colon are xvalues of the same type?</p>\n<p>I'm currently assuming GCC is buggy and/or not up-to-date with respect\nto xvalues.</p>\n<p>The followup question is: Wouldn't it be nice to be able to detect the\nvalue category of an expression? If we ignore the conditional operator\nwe can detect the value category of an expression with decltype. But\nwhat is</p>\n<pre><code> bool xvalue = std::is_rvalue_reference&lt;\n   decltype( true ? std::move(i) : std::move(i) ) &gt;::value;\n</code></pre>\n<p>supposed to yield? Using GCC 4.5.1, the xvalue variable is initialized\nwith false. Is this conforming to the current standard draft?</p>\n<p>TIA,\nSebastian </p>\n</hr>", "AcceptedAnswerId": "3909825", "Title": "C++0x: conditional operator, xvalues, and decltype", "CreationDate": "2010-10-11T20:31:50.657", "Id": "3909720", "CommentCount": "12", "LastEditDate": "2010-11-06T21:25:50.123", "CommunityOwnedDate": "2010-10-11T20:31:50.657", "PostTypeId": "1", "LastEditorUserId": "224671", "LastActivityDate": "2010-11-06T21:25:50.123", "Score": "3", "OwnerUserId": "153285", "Tags": "<c++><c++11><rvalue-reference><defects>", "AnswerCount": "1"}});