post_cb({"41444490": {"Tags": "<c++><language-lawyer><reserved-words><using-directives><user-defined-literals>", "ViewCount": "241", "LastEditDate": "2017-01-03T13:23:43.037", "CreationDate": "2017-01-03T13:21:08.327", "LastEditorUserId": "1782465", "Title": "Should a using command issue a warning when using a reserved identifier?", "CommentCount": "1", "AnswerCount": "1", "Score": "7", "OwnerUserId": "4342498", "Id": "41444490", "LastActivityDate": "2017-01-04T11:14:10.300", "Body": "<p>When using the line</p>\n<pre><code>using std::literals::chrono_literals::operator\"\"s;\n</code></pre>\n<p>in g++ 6.3.0, the compiler issues a warning stating:</p>\n<blockquote>\n<p id=\"so_41444490_41444490_0\">warning: literal operator suffixes not preceded by '_' are reserved for future standardization</p>\n<pre><code>using std::literals::chrono_literals::operator\"\"s;\n</code></pre>\n</blockquote>\n<p>A similar warning is also issued in MSVS. However, clang 3.8.0 issues no such warning.</p>\n<p>Since <code>operator\"\"s</code> is defined by the standard for the chrono library shouldn't this not issue a warning since we are just importing the name and not defining one?</p>\n", "PostTypeId": "1"}, "41445653": {"ParentId": "41444490", "Score": "2", "CreationDate": "2017-01-03T14:23:34.833", "LastActivityDate": "2017-01-04T11:14:10.300", "LastEditDate": "2017-01-04T11:14:10.300", "OwnerUserId": "3647361", "LastEditorUserId": "3647361", "Body": "<p>Arguably, the wording is clear enough on this\u2014<a href=\"http://eel.is/c++draft/over.literal#1\" rel=\"nofollow noreferrer\">[over.literal]/1</a>:</p>\n<blockquote>\n<p id=\"so_41444490_41445653_0\">Some literal suffix identifiers are\n  reserved for future standardization; see 17.6.4.3.5. A declaration <strong>whose <em>literal-operator-id</em></strong> uses such a literal suffix\n  identifier is ill-formed; no diagnostic required.</p>\n</blockquote>\n<p>This can be interpreted as referring to (UDL operator) declarations whose \"name\" is a <em>literal-operator-id</em>\u2014which of course excludes your case, since <em>literal-operator-id</em>s are unqualified. Same goes for <a href=\"http://eel.is/c++draft/reserved.names#2\" rel=\"nofollow noreferrer\">[reserved.names]/2</a>, where the \u201ccontext\u201ds are declarations of user-defined literal operators.</p>\n", "Id": "41445653", "PostTypeId": "2", "CommentCount": "16"}, "bq_ids": {"n4659": {"so_41444490_41445653_0": {"length": 19, "section_id": 695, "quality": 0.95}}}});