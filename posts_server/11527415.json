post_cb({"bq_ids": {"n4140": {"so_11527415_11527505_0": {"section_id": 53, "quality": 0.8, "length": 16}}, "n3337": {"so_11527415_11527505_0": {"section_id": 48, "quality": 0.8, "length": 16}}, "n4659": {"so_11527415_11527505_0": {"section_id": 55, "quality": 0.8, "length": 16}}}, "11527415": {"CommentCount": "11", "AcceptedAnswerId": "11527505", "PostTypeId": "1", "LastEditorUserId": "369872", "CreationDate": "2012-07-17T17:08:44.180", "LastActivityDate": "2012-07-17T17:35:20.577", "LastEditDate": "2012-07-17T17:28:38.320", "ViewCount": "561", "FavoriteCount": "1", "Title": "Are methods of templated classes implied inline linkage?", "Id": "11527415", "Score": "3", "Body": "<p>Are methods of templated classes implied <code>inline</code> linkage (not talking about the inline optimization), or is it just templated methods which are?</p>\n<pre><code>// A.h\n\ntemplate&lt;typename T&gt;\nclass A\n{\npublic:\n    void func1();                       //  #1\n    virtual void func2();               //  #2\n    template&lt;typename T2&gt; void func3(); //  #3\n};\n\ntemplate&lt;typename T&gt;\nvoid A&lt;T&gt;::func1(){}    //  #1\n\ntemplate&lt;typename T&gt;\nvoid A&lt;T&gt;::func2(){}    //  #2\n\ntemplate&lt;typename T&gt;\ntemplate&lt;typename T2&gt;\nvoid A&lt;T&gt;::func3&lt;T2&gt;(){}    //  #3\n</code></pre>\n<p>Are all the above cases <code>inline</code> [linkage]? (Should I explicitly write <code>inline</code> for any of them)?</p>\n", "Tags": "<c++><templates><inline><linkage>", "OwnerUserId": "369872", "AnswerCount": "1"}, "11527505": {"ParentId": "11527415", "PostTypeId": "2", "CommentCount": "10", "CreationDate": "2012-07-17T17:14:36.827", "Score": "10", "LastEditorUserId": "36565", "LastEditDate": "2012-07-17T17:35:20.577", "Id": "11527505", "OwnerUserId": "36565", "Body": "<p>Template functions and member functions of template classes are implicitly inline if they are implicitly instantiated, but beware template specializations are not.</p>\n<pre><code>template &lt;typename T&gt;\nstruct test {\n    void f();\n}\ntemplate &lt;typename T&gt;\nvoid test&lt;T&gt;::f() {}           // inline\n\ntemplate &lt;&gt;\nvoid test&lt;int&gt;::f() {}           // not inline\n</code></pre>\n<hr>\n<p>By lack of a better quote:</p>\n<blockquote>\n<p id=\"so_11527415_11527505_0\">A non-exported template must be defined in every translation unit in which it is implicitly instantiated (14.7.1), unless the corresponding specialization is explicitly instantiated (14.7.2) in some translation unit; no diagnostic is required</p>\n</blockquote>\n</hr>", "LastActivityDate": "2012-07-17T17:35:20.577"}});