post_cb({"41709089": {"CommentCount": "9", "AcceptedAnswerId": "41709124", "PostTypeId": "1", "LastEditorUserId": "963864", "CreationDate": "2017-01-17T23:49:14.490", "LastActivityDate": "2017-01-22T23:14:09.000", "LastEditDate": "2017-01-22T23:14:09.000", "ViewCount": "95", "FavoriteCount": "1", "Title": "Should the destructor for a base class that you won't use to delete an object, be virtual?", "Id": "41709089", "Score": "2", "Body": "<p>Say I have two base classes, </p>\n<pre><code>struct A {}; \nstruct B {}; \n</code></pre>\n<p>and a derived one that uses <strong>multiple inheritance</strong></p>\n<pre><code>struct D : A, B {}; \n</code></pre>\n<p>If my use scenario goes something like this: </p>\n<pre><code>A *obj = new D; \n</code></pre>\n<p>i.e. I'll never use the <code>B</code> base class to refer to the derived object, <strong>do I have to make the destructor of both bases virtual</strong>? I'm currently declaring the destructor of <code>B</code> as <code>protected</code> to forbid other users from doing this, but is it enough?</p>\n<p>What about the destructor of <code>D</code>? </p>\n", "Tags": "<c++><destructor><multiple-inheritance><protected><virtual-destructor>", "OwnerUserId": "4224575", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_41709089_41709124_0": {"section_id": 6107, "quality": 1.0, "length": 23}}, "n3337": {"so_41709089_41709124_0": {"section_id": 5873, "quality": 1.0, "length": 23}}, "n4659": {"so_41709089_41709124_0": {"section_id": 7604, "quality": 1.0, "length": 23}}}, "41709124": {"ParentId": "41709089", "CommentCount": "0", "Body": "<p>It is not necessary for <code>B</code>'s destructor to be virtual as long as a <code>B*</code> is never used to delete derived objects. See [expr.delete]/3:</p>\n<blockquote>\n<p id=\"so_41709089_41709124_0\">... if the static type of the object to be deleted is different from its\n  dynamic type, the static type shall be a base class of the dynamic type of the object to be deleted and the static type shall have a virtual destructor or the behavior is undefined.</p>\n</blockquote>\n<p>In this case the \"static type\" is the type <code>T</code> <em>cv</em> where the operand to <code>delete</code> has type <code>T</code> <em>cv</em> <code>*</code>. So the requirements in your case are imposed on <code>A</code>, not on <code>B</code>.</p>\n", "OwnerUserId": "481267", "PostTypeId": "2", "Id": "41709124", "Score": "7", "CreationDate": "2017-01-17T23:51:56.053", "LastActivityDate": "2017-01-17T23:51:56.053"}});