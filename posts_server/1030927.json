post_cb({"1031368": {"ParentId": "1030927", "CommentCount": "0", "Body": "<p>To quote the C++ Standard (10.3.2):</p>\n<blockquote>\n<p id=\"so_1030927_1031368_0\">If a virtual member function <code>vf</code> is declared in a class <code>Base</code> and in a class <code>Derived</code>, derived directly or indirectly from <code>Base</code>, a member function <code>vf</code> with the same name and same parameter list as <code>Base::vf</code> is declared, then <code>Derived::vf</code> is also virtual (whether or not it is so declared) and it <em>overrides</em> <code>Base::vf</code>.</p>\n</blockquote>\n<p>You can sum up this with: \"once virtual, always virtual\". However, you can still add the <code>virtual</code> modifier to the overriding member functions in order to make it clear for the user that the class is polymorphic.</p>\n", "OwnerUserId": "20984", "PostTypeId": "2", "Id": "1031368", "Score": "2", "CreationDate": "2009-06-23T08:39:09.433", "LastActivityDate": "2009-06-23T08:39:09.433"}, "1030927": {"CommentCount": "0", "AcceptedAnswerId": "1030981", "CreationDate": "2009-06-23T06:33:22.160", "LastActivityDate": "2009-06-23T08:53:03.570", "PostTypeId": "1", "ViewCount": "1076", "FavoriteCount": "0", "Title": "Dynamic Binding in C++", "Id": "1030927", "Score": "3", "Body": "<p>Why does the derived class have to declare its methods as virtual for dynamic binding to work even though the methods of the base class are declared virtual?</p>\n", "Tags": "<c++><inheritance><dynamic><binding>", "OwnerUserId": "5759201", "AnswerCount": "5"}, "1030981": {"ParentId": "1030927", "CommentCount": "1", "Body": "<p>It doesn't have to. If a method is declared virtual in a base class, overriding it in a derived class makes the overriding function virtual as well, even if the <code>virtual</code> keyword is not used.</p>\n", "OwnerUserId": "101361", "PostTypeId": "2", "Id": "1030981", "Score": "5", "CreationDate": "2009-06-23T06:48:19.110", "LastActivityDate": "2009-06-23T06:48:19.110"}, "1030989": {"ParentId": "1030927", "CommentCount": "0", "Body": "<p>It doesn't.  </p>\n<pre><code>class Base\n{\n    virtual void foo() {}\n};\n\nclass Derived : public Base\n{\n    void foo() {}\n}\n</code></pre>\n<p>in this code <code>foo()</code> is still virtual in the <code>Derived</code> class even though it isn't declared as such.</p>\n", "OwnerUserId": "9611", "PostTypeId": "2", "Id": "1030989", "Score": "3", "CreationDate": "2009-06-23T06:50:16.627", "LastActivityDate": "2009-06-23T06:50:16.627"}, "1030986": {"ParentId": "1030927", "CommentCount": "1", "Body": "<p>Is it? The following code produces the expected output B::f1() (compiled using VS2008):</p>\n<pre><code>class A\n{\npublic:\n\n    virtual ~A(){}\n      virtual void f1()\n      {\n        std::cout&lt;&lt;\"A::f1()\\n\";\n      }\n\n        virtual void f2()\n      {\n        std::cout&lt;&lt;\"A::f2()\\n\";\n      }\n};\n\nclass B : public A\n{\npublic:\n       void f1()\n      {\n        std::cout&lt;&lt;\"B::f1()\\n\";\n      }\n\n         void f2()\n      {\n        std::cout&lt;&lt;\"B::f2()\\n\";\n      }\n};\n\n\nint  main()\n{\n    B b;\n    A* p = &amp;b;\n    p-&gt;f1();\n\n    return 0;\n}\n</code></pre>\n", "OwnerUserId": "39742", "PostTypeId": "2", "Id": "1030986", "Score": "2", "CreationDate": "2009-06-23T06:49:11.573", "LastActivityDate": "2009-06-23T06:49:11.573"}, "1031410": {"ParentId": "1030927", "CommentCount": "0", "Body": "<p>One need not to.\nBut i prefer using virtual in the derived class functions too as it will make the dynamic binding associated with those function more clear while reading the code.</p>\n", "OwnerUserId": "132736", "PostTypeId": "2", "Id": "1031410", "Score": "0", "CreationDate": "2009-06-23T08:53:03.570", "LastActivityDate": "2009-06-23T08:53:03.570"}, "bq_ids": {"n4140": {"so_1030927_1031368_0": {"section_id": 7003, "quality": 0.896551724137931, "length": 26}}, "n3337": {"so_1030927_1031368_0": {"section_id": 6749, "quality": 0.896551724137931, "length": 26}}, "n4659": {"so_1030927_1031368_0": {"section_id": 8500, "quality": 0.896551724137931, "length": 26}}}});