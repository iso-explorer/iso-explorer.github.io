post_cb({"bq_ids": {"n4140": {"so_33273550_33273777_1": {"length": 10, "quality": 1.0, "section_id": 5381}}, "n3337": {"so_33273550_33273777_1": {"length": 10, "quality": 1.0, "section_id": 5175}}, "n4659": {"so_33273550_33273777_1": {"length": 10, "quality": 1.0, "section_id": 6805}}}, "33273960": {"Id": "33273960", "PostTypeId": "2", "Body": "<p>Your code is illegal (i.e. erroneous, ill-formed, constraint-violating) in both C and C++. The reason you get a \"warning\" in one language and \"error\" in another is just a quirk of your compiler and your compiler setup. After all, neither language really formally differentiates between \"warnings\" and \"errors\". GCC under its default settings just happens to be more permissive in C mode (mostly for historical reasons).</p>\n<p>Use <code>-pedantic-errors</code> in GCC, and you will get an \"error\" in C code as well. (Note that <code>-pedantic-errors</code> does not simply blindly turn all \"warnings\" into \"errors\". It attempts to report only actual <em>constraint violations</em> as \"errors\".)</p>\n", "LastEditorUserId": "187690", "LastActivityDate": "2015-10-22T05:35:16.997", "Score": "30", "CreationDate": "2015-10-22T05:30:13.487", "ParentId": "33273550", "CommentCount": "0", "OwnerUserId": "187690", "LastEditDate": "2015-10-22T05:35:16.997"}, "33273691": {"Id": "33273691", "PostTypeId": "2", "Body": "<p>The syntax of declaration is defined as (omitting <em>init-declarator-list</em> and <em>init-declarator</em>):</p>\n<blockquote id=\"so_33273550_33273691_0\">\n<h3>C11 6.7 Declarations</h3>\n<pre><code>declaration:\n    declaration-specifiers init-declarator-list opt ;\n    static_assert-declaration\ndeclaration-specifiers:\n    storage-class-specifier declaration-specifiers opt\n    type-specifier declaration-specifiers opt\n    type-qualifier declaration-specifiers opt\n    function-specifier declaration-specifiers opt\n    alignment-specifier declaration-specifiers opt\n</code></pre>\n</blockquote>\n<p>Note that <em>declaration-specifiers</em> is defined recursively, but each with an <strong>opt</strong> indicates it's optional.</p>\n<p>Also, the following clause 6 states:</p>\n<blockquote>\n<p id=\"so_33273550_33273691_1\">The declaration specifiers consist of a sequence of specifiers that indicate the linkage,\n  storage duration, and part of the type of the entities that the declarators denote. The initdeclarator-list is a comma-separated sequence of declarators, each of which may have additional type information, or an initializer, or both. The declarators contain the identifiers <strong>(if any)</strong> being declared.</p>\n</blockquote>\n<p>Note the words <em>if any</em>.</p>\n", "LastActivityDate": "2015-10-22T04:59:40.680", "CommentCount": "0", "CreationDate": "2015-10-22T04:59:40.680", "ParentId": "33273550", "Score": "18", "OwnerUserId": "1009479"}, "33273777": {"Id": "33273777", "PostTypeId": "2", "Body": "<p>The C standard says</p>\n<blockquote>\n<p id=\"so_33273550_33273777_0\">A declaration other than a static_assert declaration shall declare at least a declarator (other than the parameters of a function or the members of a structure or union), a tag, or the members of an enumeration.</p>\n</blockquote>\n<p>C++ says</p>\n<blockquote>\n<p id=\"so_33273550_33273777_1\">In a simple-declaration, the optional init-declarator-list can be omitted only when declaring a class (Clause 9) or enumeration.</p>\n</blockquote>\n<p>A violation of this in either language requires a diagnostic. The standards do not talk about compiler errors or warnings. A warning is a diagnostic.</p>\n", "LastEditorUserId": "775806", "LastActivityDate": "2015-10-22T05:21:35.140", "Score": "43", "CreationDate": "2015-10-22T05:08:42.347", "ParentId": "33273550", "CommentCount": "5", "OwnerUserId": "775806", "LastEditDate": "2015-10-22T05:21:35.140"}, "33273550": {"ViewCount": "4255", "Body": "<p>Consider the following program (see live demo <a href=\"http://ideone.com/504P4P\">here</a>).</p>\n<pre><code>#include &lt;stdio.h&gt;\nint main(void)\n{\n      int ;  // Missing variable name\n      puts(\"Surprise\");\n}\n</code></pre>\n<p>My compiler, gcc 4.8.1, gives the below warning:</p>\n<blockquote>\n<p id=\"so_33273550_33273550_0\">[Warning] useless type name in empty declaration [enabled by default]</p>\n</blockquote>\n<p>Why does it compile fine? Shouldn't I get a compiler error? g++ 4.8.1 gives the following error when I compile it as a C++ program:</p>\n<blockquote>\n<p id=\"so_33273550_33273550_1\">[Error] declaration does not declare anything [-fpermissive]</p>\n</blockquote>\n", "AcceptedAnswerId": "33273777", "Title": "Why does `int ;` compile fine in C, but not in C++?", "CreationDate": "2015-10-22T04:44:16.560", "Id": "33273550", "CommentCount": "9", "FavoriteCount": "4", "PostTypeId": "1", "LastEditDate": "2015-10-24T08:39:28.827", "LastEditorUserId": "63550", "LastActivityDate": "2015-10-24T08:39:28.827", "Score": "55", "OwnerUserId": "3777958", "Tags": "<c++><c><gcc><language-lawyer><variable-declaration>", "AnswerCount": "3"}});