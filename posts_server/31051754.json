post_cb({"31051754": {"CommentCount": "1", "ViewCount": "45", "PostTypeId": "1", "LastEditorUserId": "3747990", "CreationDate": "2015-06-25T13:28:08.857", "LastActivityDate": "2015-06-25T14:01:36.870", "Title": "Error when trying to pass '==' overload to std::map comparator", "LastEditDate": "2015-06-25T13:45:57.987", "Id": "31051754", "Score": "-1", "Body": "<p>I'm trying to pass an overload of a custom class as a comparator of an <code>std::map</code>.</p>\n<p>Here's some code and the error to help you help me :</p>\n<p>Here is Position.hpp</p>\n<pre><code>#ifndef POSITION_HPP_\n# define POSITION_HPP_\n\nclass   Position\n{\npublic:\n  int   _x;\n  int   _y;\n\n  Position(){}\n  Position(int x, int y)\n  {\n    _x = x;\n    _y = y;\n  }\n\n  void  setPosition(Position &amp;newpos)\n  {\n    _x = newpos._x;\n    _y = newpos._y;\n  }\n\n  int   getX()\n  {\n    return _x;\n  }\n\n  int   getY()\n\n     return _y;\n  }\n  void  setX(int x)\n  {\n    _x = x;\n  }\n  void  setY(int y)\n  {\n    _y = y;\n  }\n\n  struct cmpIsSame{\n    inline bool operator==(const Position&amp; pos)\n    {\n      if (pos._x == _x &amp;&amp; pos._y == _y)\n        return true;\n      return false;\n    }\n  };\n\n  inline Position&amp;      operator=(const Position&amp; pos)\n  {\n    _x = pos._x;\n    _y = pos._y;\n    return *this;\n  }\n};\n\n#endif\n</code></pre>\n<p>And here is the map declaration in GameEngine.hh</p>\n<pre><code>private:\n  std::map&lt;Position, Case, Position::cmpIsSame&gt; _cases;\n</code></pre>\n<p>And here is the error: </p>\n<pre><code>Position.hpp: In member function \u2018bool Position::cmpIsSame::operator==(const Position&amp;)\u2019:\nPosition.hpp:17:7: error: invalid use of non-static data member \u2018Position::_x\u2019\n   int _x;\n       ^\nPosition.hpp:52:21: error: from this location\n       if (pos._x == _x &amp;&amp; pos._y == _y)\n                     ^\nPosition.hpp:18:7: error: invalid use of non-static data member \u2018Position::_y\u2019\n   int _y;\n       ^\nPosition.hpp:52:37: error: from this location\n       if (pos._x == _x &amp;&amp; pos._y == _y)\n                                     ^\n</code></pre>\n<p>Any help would be a pleasure?</p>\n", "Tags": "<c++><operator-overloading><comparator><non-static>", "OwnerUserId": "3577133", "AnswerCount": "2"}, "31052088": {"ParentId": "31051754", "PostTypeId": "2", "CommentCount": "0", "Body": "<p><strong>As to the error</strong></p>\n<p>In the implementation of the <code>operator==</code> you attempt to access members <code>_x</code> etc. of the enclosing class. You don't have access to them there. Embedding a class in a class is a namespace issue, not a member access issue.</p>\n<p>It would be easier to just provide a free function or a functor that offers the comparison.</p>\n<p><strong>As to the comparison of keys in <code>map</code></strong></p>\n<p>The definition of the key comparison for <a href=\"http://en.cppreference.com/w/cpp/container/map\" rel=\"nofollow\"><code>std::map</code></a> is <a href=\"http://en.cppreference.com/w/cpp/utility/functional/less\" rel=\"nofollow\"><code>std::less</code></a> which by default calls <code>operator&lt;</code>. It may be easier to just implement an overloaded <code>operator&lt;</code> for the key you use.</p>\n<pre><code>bool operator&lt;(const Position&amp; lhs, const Position rhs&amp;) {\n  // your implementation of \"less\" here...\n}\n</code></pre>\n<p><strong>As to the implementation of <code>less</code></strong></p>\n<p>This is really up to you and manner in which you use it in the application. But as a first off approximation (also to try get the code up and going), consider using the distance (<a href=\"https://en.wikipedia.org/?title=Pythagorean_theorem\" rel=\"nofollow\">pythagorean theory</a>) of the point to the origin (probably 0,0).</p>\n", "OwnerUserId": "3747990", "LastEditorUserId": "3747990", "LastEditDate": "2015-06-25T14:01:36.870", "Id": "31052088", "Score": "1", "CreationDate": "2015-06-25T13:41:03.157", "LastActivityDate": "2015-06-25T14:01:36.870"}, "31051859": {"ParentId": "31051754", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>First of all you have to use either functional object or a static function.\nBut in any case your approach is wrong because the comparator shall satisfy the strict weak ordering principle that correcponds to operator &lt;.</p>\n<p>From the C++ Standard (23.2.4 Associative containers)</p>\n<blockquote>\n<p id=\"so_31051754_31051859_0\">3 The phrase \u201cequivalence of keys\u201d means the equivalence relation\n  imposed by the comparison and <strong>not the operator== on keys</strong>. That is,\n  two keys k1 and k2 are considered to be equivalent if for the\n  comparison object comp, comp(k1, k2) == false &amp;&amp; comp(k2, k1) ==\n  false. For any two keys k1 and k2 in the same container, calling\n  comp(k1, k2) shall always return the same value.</p>\n</blockquote>\n", "OwnerUserId": "2877241", "LastEditorUserId": "2877241", "LastEditDate": "2015-06-25T13:38:52.467", "Id": "31051859", "Score": "1", "CreationDate": "2015-06-25T13:32:02.463", "LastActivityDate": "2015-06-25T13:38:52.467"}, "bq_ids": {"n4140": {"so_31051754_31051859_0": {"section_id": 739, "quality": 0.9090909090909091, "length": 30}}, "n3337": {"so_31051754_31051859_0": {"section_id": 728, "quality": 0.9090909090909091, "length": 30}}, "n4659": {"so_31051754_31051859_0": {"section_id": 797, "quality": 0.9090909090909091, "length": 30}}}});