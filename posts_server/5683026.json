post_cb({"5683026": {"CommentCount": "3", "AcceptedAnswerId": "5683030", "PostTypeId": "1", "LastEditorUserId": "103167", "CreationDate": "2011-04-15T22:39:20.357", "LastActivityDate": "2017-07-26T09:17:39.150", "LastEditDate": "2017-07-25T22:08:17.147", "ViewCount": "7138", "FavoriteCount": "3", "Title": "Logical AND, OR: Is left-to-right evaluation guaranteed?", "Id": "5683026", "Score": "18", "Body": "<p>Is left-to-right evaluation of logical operators (<code>&amp;&amp;</code> <code>||</code>) guaranteed?</p>\n<p>Let's say I have this:</p>\n<pre><code>SDL_Event event;\n\nif (SDL_PollEvent(&amp;event)) {\n    if (event.type == SDL_QUIT) {\n            // do stuff\n    }\n}\n</code></pre>\n<p>Is this guaranteed to be the same as this?</p>\n<pre><code>SDL_Event event;\n\nif (SDL_PollEvent(&amp;event) &amp;&amp; event.type == SDL_QUIT) {\n    // do stuff\n}\n</code></pre>\n<p>This can also be very important, let's say we have two requirements, <code>a</code> and <code>b</code>. Requirement <code>a</code> is much more likely to fail then <code>b</code>. Then it's more efficient to say <code>if (a &amp;&amp; b)</code> than <code>if (b &amp;&amp; a)</code>.</p>\n", "Tags": "<c++><logical-operators><order-of-evaluation>", "OwnerUserId": "565635", "AnswerCount": "1"}, "5683030": {"ParentId": "5683026", "PostTypeId": "2", "CommentCount": "6", "Body": "<p>Yes, it's guaranteed, otherwise such operators would lose much of their usefulness.</p>\n<p><strong><em>Important notice</em></strong>: this is valid <em>only</em> for the builtin <code>&amp;&amp;</code> and <code>||</code>; if some criminal overloads them, they are treated as \"regular\" overloaded binary operators, so in this case <em>both</em> operands are <em>always</em> evaluated, and in unspecified order as usual. For this reason, never overload them - it breaks a hugely important assumption about the control flow of the program.</p>\n<hr>\n<h2>Relevant standard quotations</h2>\n<h3>Builtin <code>&amp;&amp;</code> and <code>||</code> have guaranteed short-circuit behavior</h3>\n<p>\u00a75.14 \u00b61</p>\n<blockquote>\n<p id=\"so_5683026_5683030_0\">Unlike <code>&amp;</code>, <code>&amp;&amp;</code> guarantees left-to-right evaluation: the second operand is not evaluated if the first operand is <code>false</code>.</p>\n</blockquote>\n<p>\u00a75.15 \u00b61</p>\n<blockquote>\n<p id=\"so_5683026_5683030_1\">Unlike <code>|</code>, <code>||</code> guarantees left-to-right evaluation; moreover, the second operand is not evaluated if the first operand evaluates to <code>true</code>.</p>\n</blockquote>\n<h3>If overloaded, they behave as \"regular\" binary operators (no short-circuit or guaranteed ordering of evaluation)</h3>\n<p>\u00a713.5 \u00b69</p>\n<blockquote>\n<p id=\"so_5683026_5683030_2\">Operators not mentioned explicitly in subclauses 13.5.3 through 13.5.7 act as ordinary unary and binary operators obeying the rules of 13.5.1 or 13.5.2.</p>\n</blockquote>\n<p>and <code>&amp;&amp;</code> and <code>||</code> are not mentioned explicitly in these subclauses, so regular \u00a713.5.2 holds:</p>\n<p>\u00a713.5.2 \u00b61</p>\n<blockquote>\n<p id=\"so_5683026_5683030_3\">A binary operator shall be implemented either by a non-static member function (9.3) with one parameter or by a non-member function with two parameters. Thus, for any binary operator <code>@</code>, <code>x@y</code> can be interpreted\n  as either <code>x.operator@(y)</code> or <code>operator@(x,y)</code>.</p>\n</blockquote>\n<p>with no special provision for evaluating only one side or in a particular order.</p>\n<p>(all quotations from the C++11 standard)</p>\n</hr>", "OwnerUserId": "214671", "LastEditorUserId": "214671", "LastEditDate": "2017-07-26T09:17:39.150", "Id": "5683030", "Score": "29", "CreationDate": "2011-04-15T22:40:02.523", "LastActivityDate": "2017-07-26T09:17:39.150"}, "bq_ids": {"n4140": {"so_5683026_5683030_0": {"section_id": 6163, "quality": 1.0, "length": 10}, "so_5683026_5683030_2": {"section_id": 656, "quality": 0.75, "length": 12}, "so_5683026_5683030_1": {"section_id": 6165, "quality": 1.0, "length": 12}, "so_5683026_5683030_3": {"section_id": 659, "quality": 0.9523809523809523, "length": 20}}, "n3337": {"so_5683026_5683030_0": {"section_id": 5924, "quality": 1.0, "length": 10}, "so_5683026_5683030_2": {"section_id": 646, "quality": 0.75, "length": 12}, "so_5683026_5683030_1": {"section_id": 5926, "quality": 1.0, "length": 12}, "so_5683026_5683030_3": {"section_id": 649, "quality": 0.9523809523809523, "length": 20}}, "n4659": {"so_5683026_5683030_0": {"section_id": 7660, "quality": 1.0, "length": 10}, "so_5683026_5683030_2": {"section_id": 684, "quality": 0.75, "length": 12}, "so_5683026_5683030_1": {"section_id": 7662, "quality": 1.0, "length": 12}, "so_5683026_5683030_3": {"section_id": 687, "quality": 0.9523809523809523, "length": 20}}}});