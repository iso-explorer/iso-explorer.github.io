post_cb({"13951278": {"ParentId": "13950938", "PostTypeId": "2", "CommentCount": "6", "CreationDate": "2012-12-19T11:21:54.003", "Score": "8", "LastEditorUserId": "567292", "LastEditDate": "2012-12-19T11:53:35.990", "Id": "13951278", "OwnerUserId": "567292", "Body": "<p>That's a quality of implementation issue.  The const static object returned by <code>std::system_category()</code> is relied upon to perform the mapping from the platform-native error code enumeration to the standard <code>std::error_condition</code> enumeration.  Under <strong>17.6.5.14 Value of error codes [value.error.codes]</strong>:</p>\n<blockquote>\n<p id=\"so_13950938_13951278_0\">Implementations for operating systems that are not based on POSIX are encouraged to define values identical to the operating system\u2019s values.</p>\n</blockquote>\n<p>You can see in <a href=\"http://www.boost.org/doc/libs/1_46_1/libs/system/src/error_code.cpp\" rel=\"noreferrer\">http://www.boost.org/doc/libs/1_46_1/libs/system/src/error_code.cpp</a> how Boost performs the mapping; any standard library supplied by your compiler vendor for use on Windows should do something similar.</p>\n<p>The intended behaviour is covered in 19.5.1.5p4, describing <code>system_category().default_error_condition(int ev)</code>:</p>\n<blockquote>\n<p id=\"so_13950938_13951278_1\">If the argument <code>ev</code> corresponds to a POSIX errno value <code>posv</code>, the function shall return <code>error_condition(posv, generic_category())</code>. Otherwise, the function shall return <code>error_condition(ev, system_category())</code>.</p>\n</blockquote>\n<p>So, for example, <code>error_code(ERROR_FILE_NOT_FOUND, std::system_category()).default_error_condition()</code> will invoke <code>std::system_category().default_error_condition(ERROR_FILE_NOT_FOUND)</code>, which should return <code>std::error_condition(std::no_such_file_or_directory, std::generic_category())</code>.</p>\n", "LastActivityDate": "2012-12-19T11:53:35.990"}, "bq_ids": {"n4140": {"so_13950938_13951278_1": {"section_id": 2596, "quality": 1.0, "length": 15}, "so_13950938_13951278_0": {"section_id": 6364, "quality": 1.0, "length": 12}}, "n3337": {"so_13950938_13951278_1": {"section_id": 2559, "quality": 1.0, "length": 15}, "so_13950938_13951278_0": {"section_id": 6121, "quality": 1.0, "length": 12}}, "n4659": {"so_13950938_13951278_1": {"section_id": 3334, "quality": 1.0, "length": 15}, "so_13950938_13951278_0": {"section_id": 7875, "quality": 1.0, "length": 12}}}, "13950938": {"CommentCount": "0", "AcceptedAnswerId": "13951278", "CreationDate": "2012-12-19T11:03:26.417", "LastActivityDate": "2012-12-19T11:53:35.990", "PostTypeId": "1", "ViewCount": "3772", "FavoriteCount": "5", "Title": "Construct std::error_code from errno on POSIX and GetLastError() on Windows", "Id": "13950938", "Score": "19", "Body": "<p>My question: What is the correct way to construct <code>std::error_code</code> instances from <code>errno</code> values on POSIX and <code>GetLastError()</code> on Windows so that the instances can be compared to the well-known values from <code>std::errc</code>?</p>\n<p>The longer explanation: My goal is to add an <code>std::error_code</code> instance to a self-made exception object that works on POSIX and Windows systems in a C++11ish way.</p>\n<p>In my cross-platform application I'm using a self-made I/O class hierarchy that uses the POSIX <code>fopen()</code> and Windows' <code>CreateFile()</code> calls for opening/creating files. If that fails a generic, self-made <code>open_error</code> exception is thrown (it is derived from <code>std::exception</code>, yes, but it's not one of C++'s predefined exception classes). I'm trying to extend this rather bare-bones exception with an error code; to be more precise with C++11's <code>std::error_code</code> if I understood correctly.</p>\n<p>My problem is how to construct such an object from <code>errno</code> (in the POSIX case) or <code>GetLastError()</code> (in the Windows case). For POSIX, as far as I've understood things, I can simply use <code>errno</code> in <code>std::error_code</code>'s constructor, e.g. like this:</p>\n<pre><code>std::error_code ec(errno, std::generic_category());\n</code></pre>\n<p>And that <code>ec</code> should be comparable to the well-known values from <code>std::errc</code>.</p>\n<p>For Windows a similar call can be made, of course:</p>\n<pre><code>std::error_code ec(::GetLastError(), std::generic_category());\n</code></pre>\n<p>But I'm not sure whether or not the values returned by <code>GetLastError()</code> map nicely to the well-known constants from <code>std::errc</code>. I've read <a href=\"http://www.boost.org/doc/libs/1_52_0/boost/system/windows_error.hpp\">in Boost's system library</a> that they do <em>for Boost's implementation of <code>error_code</code></em>, but I'm asking about the <code>std</code> implementation, not about Boost's.</p>\n<p>Please don't advice to switch to using C++ streams for file access. I'd love to, but refactoring half of my code is not something I'd like to do right at this very moment.</p>\n", "Tags": "<c++><c++11>", "OwnerUserId": "507077", "AnswerCount": "1"}});