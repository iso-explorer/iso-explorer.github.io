post_cb({"bq_ids": {"n4140": {"so_13904020_13913553_0": {"length": 15, "quality": 0.9375, "section_id": 3287}}, "n3337": {"so_13904020_13913553_0": {"length": 11, "quality": 0.6875, "section_id": 3157}}, "n4659": {"so_13904020_13913553_0": {"length": 15, "quality": 0.9375, "section_id": 4049}}}, "13913553": {"Id": "13913553", "PostTypeId": "2", "Body": "<p>Value-initialization of a non-aggregate class type is covered by 8.5p8.  In your case the (non-union) class has an implicitly-declared defaulted default no-parameter constructor (12.1p5), which is not deleted and is trivial (ibid).  Thus the second bullet of 8.5p8 applies:</p>\n<blockquote>\n<p id=\"so_13904020_13913553_0\">\u2014 if <code>T</code> is a (possibly cv-qualified) non-union class type without a user-provided or deleted default constructor, then the object is zero-initialized and, if <code>T</code> has a non-trivial default constructor, default-initialized;</p>\n</blockquote>\n<p>So <code>A</code> should be zero-initialized, and the program should print <code>0</code>.</p>\n<p>On the following program:</p>\n<pre><code>struct A { int get() { return i; } private: int i; };\n#include &lt;iostream&gt;\nint main() {\n    char c[sizeof(A)];\n    new (c) int{42};\n    std::cout &lt;&lt; (new (c) A{})-&gt;get() &lt;&lt; '\\n';\n}\n</code></pre>\n<p>gcc-4.7.2 correctly outputs <code>0</code>; gcc-4.6.3 incorrectly outputs <code>42</code>; clang-3.0 goes absolutely crazy and outputs garbage (e.g. <code>574874232</code>).</p>\n", "LastActivityDate": "2012-12-17T11:45:05.687", "Score": "3", "CreationDate": "2012-12-17T11:45:05.687", "ParentId": "13904020", "CommentCount": "2", "OwnerUserId": "567292"}, "13904020": {"ViewCount": "330", "Body": "<p>The C++11 standard 8.5.4.3 says: </p>\n<p>\"If the initializer list has no elements and T is a class type with a default constructor, the object is value-initialized.\"</p>\n<pre><code>struct A\n{\n    int get() { return i; }\n\nprivate:\n    int i;\n};\n\nint main()\n{\n    A a = {};\n\n    int n = a.get();\n    cout &lt;&lt; n &lt;&lt; endl;\n    // n is a random number rather than 0\n\n    return 0;\n}\n</code></pre>\n<p>Is this a bug of VC++? My VC++ is the latest Nov 2012 CTP.</p>\n", "Title": "A BIG bug of VC++? Why does initializer-list not value-initialize a struct?", "CreationDate": "2012-12-16T18:02:41.060", "LastActivityDate": "2012-12-17T11:45:05.687", "CommentCount": "7", "LastEditDate": "2012-12-17T05:48:44.863", "PostTypeId": "1", "LastEditorUserId": "636019", "Id": "13904020", "Score": "7", "OwnerUserId": "508343", "Tags": "<c++><c++11><initialization><aggregate><initializer-list>", "AnswerCount": "1"}});