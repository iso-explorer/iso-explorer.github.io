post_cb({"39278306": {"ParentId": "39278200", "PostTypeId": "2", "CommentCount": "12", "CreationDate": "2016-09-01T18:12:26.313", "OwnerUserId": "440558", "CommunityOwnedDate": "2016-09-02T10:54:50.827", "Id": "39278306", "Score": "55", "Body": "<p><code>void()</code> is a function type (it's a function which takes no arguments and returns nothing), so it's not a valid type in <code>sizeof()</code>.</p>\n", "LastActivityDate": "2016-09-01T18:12:26.313"}, "39278200": {"CommentCount": "14", "AcceptedAnswerId": "39278306", "PostTypeId": "1", "LastEditorUserId": "476681", "CreationDate": "2016-09-01T18:05:59.820", "LastActivityDate": "2016-09-11T20:56:51.077", "LastEditDate": "2016-09-02T11:58:05.543", "ViewCount": "3309", "FavoriteCount": "7", "Title": "Is sizeof(void()) a legal expression?", "Id": "39278200", "Score": "48", "Body": "<p>From <a href=\"http://eel.is/c++draft/expr.sizeof#1\">[5.3.3/1]</a>, I found that:</p>\n<blockquote>\n<p id=\"so_39278200_39278200_0\">The\u00a0sizeof\u00a0operator shall not be applied to an expression that has function or incomplete type</p>\n</blockquote>\n<p>From <a href=\"http://eel.is/c++draft/basic.types#5\">[3.9/5]</a> I found that:</p>\n<blockquote>\n<p id=\"so_39278200_39278200_1\">Incompletely-defined object types and\u00a0cv void\u00a0are\u00a0incomplete types</p>\n</blockquote>\n<p>Anyway, for <code>sizeof</code> does not evaluate it's operands, I would have said that <code>sizeof(void())</code> was a legal expression (actually GCC compiles it and the result is 1).<br>\nOn the other side, from <a href=\"http://eel.is/c++draft/expr.sizeof\">here</a>, <code>void</code> is not mentioned while discussing <code>sizeof</code>, neither when the types having size 1 are mentioned, nor in the list of the ones having an <em>implementation defined</em> size.</br></p>\n<p>The question is thus: is <code>sizeof(void())</code> a legal expression?<br>\nIs it guaranteed to have size equal to 1?<br>\nOr is it a legal expression resulting in an UB and that's all?</br></br></p>\n", "Tags": "<c++><language-lawyer><sizeof><void>", "OwnerUserId": "4987285", "AnswerCount": "6"}, "39278298": {"ParentId": "39278200", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>From looking at <a href=\"http://en.cppreference.com/w/cpp/language/sizeof\"><strong>CppReference.com - sizeof operator</strong></a>, the documentation literally states:</p>\n<blockquote>\n<p id=\"so_39278200_39278298_0\"><code>sizeof</code> cannot be used with <strong>function types</strong>, incomplete types, or\n  bit-field glvalues.</p>\n</blockquote>\n<p>And since <code>void()</code> is a function type, then <code>sizeof(void())</code> is not a legal expression.</p>\n<p>In their usage example, we can see their <strong>error</strong> comment on this line:</p>\n<pre><code>std::cout &lt;&lt; \"size of function: \" &lt;&lt; sizeof(void()) &lt;&lt; '\\n'; // error\n</code></pre>\n", "OwnerUserId": "5890227", "LastEditorUserId": "5890227", "LastEditDate": "2016-09-01T20:43:24.447", "Id": "39278298", "Score": "39", "CreationDate": "2016-09-01T18:12:02.817", "LastActivityDate": "2016-09-01T20:43:24.447"}, "39390725": {"ParentId": "39278200", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>A little premise.</p>\n<p>The question arose from a misinterpretation of the <code>sizeof</code> operator.<br>\nIn fact the OP considered <code>void()</code> an expression that has incomplete type in the context of <code>sizeof</code> and the question itself can be read as - <em>why <code>sizeof</code> accept the expression <code>void()</code>, that is an incomplete type and should not be accepted as mentioned in the working draft</em>?<br>\nThat's why [3.9/5] is mentioned actually, otherwise it wouldn't have made sense.</br></br></p>\n<p>That said, the fact is that the question contains actually two interesting questions:</p>\n<ul>\n<li><p>Why is <code>sizeof(void())</code> not legal?<br>\nThis is the actual question as from the title itself.</br></p></li>\n<li><p>Why is <code>sizeof((void()))</code> not legal?<br>\nThis is the intended question of the OP.</br></p></li>\n</ul>\n<p>Answers below:</p>\n<ul>\n<li><p><code>void()</code> in <code>sizeof(void())</code> is interpreted as a function type and it is ill-formed as for <a href=\"http://eel.is/c++draft/expr.sizeof#1\" rel=\"nofollow\">[5.3.3/1]</a> (emphasis mine):</p>\n<blockquote>\n<p id=\"so_39278200_39390725_0\"><strong>The\u00a0sizeof\u00a0operator shall not be applied to an expression that has function</strong> or incomplete <strong>type, to the parenthesized name of such types</strong>, [...]</p>\n</blockquote></li>\n<li><p><code>(void())</code> in <code>sizeof((void()))</code> is an expression that has incomplete type <code>void</code> (note that <code>sizeof</code> is an unevaluated context) and it is ill-formed as for <a href=\"http://eel.is/c++draft/expr.sizeof#1\" rel=\"nofollow\">[5.3.3/1]</a> (emphasis mine):</p>\n<blockquote>\n<p id=\"so_39278200_39390725_1\"><strong>The\u00a0sizeof\u00a0operator shall not be applied to an expression that has</strong> function or <strong>incomplete type</strong>, to the parenthesized name of such types, [...]</p>\n</blockquote></li>\n</ul>\n<p>In both cases GCC compiles the code with a warning.</p>\n", "OwnerUserId": "4987285", "LastEditorUserId": "4987285", "LastEditDate": "2016-09-11T20:56:51.077", "Id": "39390725", "Score": "5", "CreationDate": "2016-09-08T12:18:46.853", "LastActivityDate": "2016-09-11T20:56:51.077"}, "39376951": {"ParentId": "39278200", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>As already highlighted in the docs here <a href=\"http://en.cppreference.com/w/cpp/language/sizeof\" rel=\"nofollow\">http://en.cppreference.com/w/cpp/language/sizeof</a></p>\n<p><strong>Notes</strong></p>\n<p><code>sizeof()</code> cannot be used with <strong>function types</strong>, incomplete types, or bit-field glvalues. </p>\n<p>Since <code>void()</code> is a function type, so its not a valid type of <code>sizeof()</code></p>\n<p>Note:</p>\n<p><code>void()</code> is a function that takes no arguments and returns nothing</p>\n<p>Quoting a Example from Docs:</p>\n<pre><code>//&lt;&lt; \"size of function: \" &lt;&lt; sizeof(void()) &lt;&lt; '\\n'  // error\n</code></pre>\n<p>So Answers to your questions:</p>\n<p>1)No it is not a legal Expression.</p>\n<p>2)It will show as 1 , but will show a warning</p>\n<p>3)same as 1).</p>\n", "OwnerUserId": "5148907", "LastEditorUserId": "5148907", "LastEditDate": "2016-09-08T08:54:03.760", "Id": "39376951", "Score": "1", "CreationDate": "2016-09-07T18:35:39.080", "LastActivityDate": "2016-09-08T08:54:03.760"}, "39278843": {"ParentId": "39278200", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Also, if you compile the code, such as the example below:</p>\n<pre><code>#include &lt;iostream&gt;\n\nint main()\n{\n   std::cout &lt;&lt; sizeof(void());\n}\n</code></pre>\n<p>The code compiles correctly and produces a value of 1, but if you look at the compilation, you see this:</p>\n<blockquote>\n<p id=\"so_39278200_39278843_0\">main.cpp: In function 'int main()':</p>\n<p id=\"so_39278200_39278843_1\">main.cpp:5:29: warning: invalid application of 'sizeof' to a function type [-Wpointer-arith]</p>\n<p id=\"so_39278200_39278843_2\">std::cout &lt;&lt; sizeof(void());</p>\n</blockquote>\n<p>So, it is evident that <code>sizeof()</code> doesn't apply for function types, so the code produces a warning. It is invalid.\n<hr/>\n<a href=\"http://coliru.stacked-crooked.com/a/a8f2fe4fe8bc9ab1\">Code here</a></p>\n<hr/>\n", "OwnerUserId": "6525260", "LastEditorUserId": "6525260", "LastEditDate": "2016-09-01T18:57:19.167", "Id": "39278843", "Score": "9", "CreationDate": "2016-09-01T18:48:51.453", "LastActivityDate": "2016-09-01T18:57:19.167"}, "39434983": {"ParentId": "39278200", "CommentCount": "3", "Body": "<p>Straigth from the C99 reference NO</p>\n<p>Stated in the document under section <b>6.5.3.4  The sizeof operator</b>:</p>\n<blockquote>\n<p id=\"so_39278200_39434983_0\">The sizeof operator shall not be applied to an expression that has function type or an incomplete  type, to the parenthesized name of such a type, or to an expression  that designates a bit-field member.</p>\n</blockquote>\n<p>According to item 19 and 20 of section <b>6.2.5 Types</b>:</p>\n<blockquote id=\"so_39278200_39434983_1\">\n<ol start=\"19\">\n<li>The void type comprises an empty set of values;<b> it is an incomplete type</b> that cannot be completed.</li>\n<li>...A function type describes a function with specified return type. A function type is characterized by its return type and the number and  types of its parameters.\n  A function type is said to be derived from its return type, and if its return type is T, the function type is sometimes called \u2018\u2018function  returning T\u2019\u2019. The construction of a function type from a return type is called \u2018\u2018function type derivation\u2019\u2019.</li>\n</ol>\n</blockquote>\n<p><b>Thus void() is a function type derived from an incomplete type and its illegal as operand for the sizeof. That said its returns will depends on the compiler implementation and does not have any return value guaranteed</b></p>\n<p><a href=\"http://www.open-std.org/jtc1/sc22/WG14/www/docs/n1256.pdf\" rel=\"nofollow\" title=\"C99 standard\">C99 Standard</a></p>\n", "OwnerUserId": "3033698", "PostTypeId": "2", "Id": "39434983", "Score": "1", "CreationDate": "2016-09-11T10:09:53.283", "LastActivityDate": "2016-09-11T10:09:53.283"}, "bq_ids": {"n4140": {"so_39278200_39278200_1": {"section_id": 7203, "quality": 0.8333333333333334, "length": 5}, "so_39278200_39434983_0": {"section_id": 6076, "quality": 0.7058823529411765, "length": 12}, "so_39278200_39278200_0": {"section_id": 6076, "quality": 0.875, "length": 7}, "so_39278200_39390725_1": {"section_id": 6076, "quality": 0.9166666666666666, "length": 11}, "so_39278200_39278298_0": {"section_id": 6076, "quality": 0.625, "length": 5}, "so_39278200_39390725_0": {"section_id": 6076, "quality": 0.9166666666666666, "length": 11}}, "n3337": {"so_39278200_39278200_0": {"section_id": 5844, "quality": 0.875, "length": 7}, "so_39278200_39434983_0": {"section_id": 5844, "quality": 0.7058823529411765, "length": 12}, "so_39278200_39390725_1": {"section_id": 5844, "quality": 0.9166666666666666, "length": 11}, "so_39278200_39278200_1": {"section_id": 6947, "quality": 1.0, "length": 6}, "so_39278200_39278298_0": {"section_id": 5844, "quality": 0.625, "length": 5}, "so_39278200_39390725_0": {"section_id": 5844, "quality": 0.9166666666666666, "length": 11}}, "n4659": {"so_39278200_39278200_1": {"section_id": 8712, "quality": 0.6666666666666666, "length": 4}, "so_39278200_39434983_0": {"section_id": 7572, "quality": 0.7058823529411765, "length": 12}, "so_39278200_39278200_0": {"section_id": 7572, "quality": 0.875, "length": 7}, "so_39278200_39390725_1": {"section_id": 7572, "quality": 0.9166666666666666, "length": 11}, "so_39278200_39278298_0": {"section_id": 7572, "quality": 0.625, "length": 5}, "so_39278200_39390725_0": {"section_id": 7572, "quality": 0.9166666666666666, "length": 11}}}});