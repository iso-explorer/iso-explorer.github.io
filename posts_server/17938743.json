post_cb({"17938743": {"CommentCount": "11", "ViewCount": "139", "CreationDate": "2013-07-30T05:11:27.303", "LastActivityDate": "2013-08-01T13:12:06.400", "Title": "Strange code... Can someone explain me this", "AcceptedAnswerId": "17939275", "PostTypeId": "1", "Id": "17938743", "Score": "0", "Body": "<p>Hi I am switching to C++ from C. While reading <a href=\"http://www.gotw.ca/publications/xc++.htm\" rel=\"nofollow\">http://www.gotw.ca/publications/xc++.htm</a> I see this code block.</p>\n<pre><code>const int i = 1;\nconst int j = 2;\nstruct x\n{\n   int x;\n};\nnamespace y\n{\n   int i[i];\n   int j = j;\n   x x;\n   int y::y = x.x;\n};\n</code></pre>\n<p>And I am totally confused about this specially in <code>namespace y</code> section.\nPlease explain me the behavior of this code and use of namespace. Also I read somewhere that bad use of namespace leading to violating fundamentals of <code>inheritance</code>. Please give me some examples of using namespace brilliantly.</p>\n", "Tags": "<c++><inheritance><namespaces>", "OwnerUserId": "2507632", "AnswerCount": "3"}, "17939614": {"ParentId": "17938743", "PostTypeId": "2", "CommentCount": "0", "Body": "<pre><code>int i[i];  //line 1\n</code></pre>\n<p>It creates an int array of size 1, as the index i is a constant initialized to 1  </p>\n<pre><code>int j = j; //line 2\n</code></pre>\n<p>It declares and initilizes a variable j to 2(value of constant j) in a namespace y   </p>\n<pre><code>x x;   //line 3\n</code></pre>\n<p>It creates a structure variable x of type struct x (<b> Note: The structure variable x is different from the int x present inside the structure x, int x is a member of structure x</b></p>\n<pre><code>int y::y = x.x;  //line 4\n</code></pre>\n<p>This is syntactically wrong, there is no need to qualify int y with namespace('y'), as it is already present in the namespaace y, So the statement should be</p>\n<pre><code>int y = x.x \n</code></pre>\n<p>where x.x represents accessing the data member (int x) of structure variable x created in the line 3</p>\n<p><br><b>Namespace example </b> Have a look on this example,it helps you to understand namespaces clearly. Refer the link for more examples [link]<a href=\"http://www.cplusplus.com/doc/tutorial/namespaces/\" rel=\"nofollow\">http://www.cplusplus.com/doc/tutorial/namespaces/</a></br></p>\n<pre><code>   #include &lt;iostream&gt;\nusing namespace std;\n\nnamespace first\n{\n  int x = 5;\n  int y = 10;\n}\n\nnamespace second\n{\n  double x = 3.1416;\n  double y = 2.7183;\n}\n\nint main () {\n  using namespace first;\n  cout &lt;&lt; x &lt;&lt; endl;\n  cout &lt;&lt; y &lt;&lt; endl;\n  cout &lt;&lt; second::x &lt;&lt; endl;\n  cout &lt;&lt; second::y &lt;&lt; endl;\n  return 0;\n}\n</code></pre>\n<p><strong>//Output</strong>\n5<br>\n10<br>\n3.1416<br>\n2.7183<br/></br></br></br></p>\n<pre><code>          ......Hope it helps you....:)\n</code></pre>\n", "OwnerUserId": "2551262", "LastEditorUserId": "2551262", "LastEditDate": "2013-07-30T06:26:10.190", "Id": "17939614", "Score": "0", "CreationDate": "2013-07-30T06:20:09.607", "LastActivityDate": "2013-07-30T06:26:10.190"}, "17939159": {"ParentId": "17938743", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>I think there is some problem with your code. The int y::y = x.x; section is wrong as there is no y previous to this and so this statement needs some correction. I am trying to give some basic info about namespace and its usage, hope it helps. \nThe main purpose of namespaces is to logically group functionality without the need of long names and the option for handy usage via \"using\". You can also use same name over different namespaces </p>\n<pre><code>namespace Color\n{\n    class Add {};\n    class Multiply {};\n};\n\nnamespace Dimension\n{\n    class Add {};\n    class Multiply {};\n};\n</code></pre>\n<p>So you can use the same class name Add, Multiply under two namespaces and one thing which you have to remember is that use namespaces only when required otherwise you will spam the global namespace \"std\" unknowingly which is not conventional.</p>\n<p>For using namespace with inheritance you can search for articles in stack over flow and definitely you will get some. Ex: <a href=\"https://stackoverflow.com/questions/1139430/accessing-parent-namespace-in-c\">Accessing Parent Namespace in C++</a></p>\n", "OwnerUserId": "1571180", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:29:20.417", "Id": "17939159", "Score": "0", "CreationDate": "2013-07-30T05:49:01.973", "LastActivityDate": "2013-07-30T05:59:41.560"}, "bq_ids": {"n4140": {"so_17938743_17939275_0": {"section_id": 7067, "quality": 0.9375, "length": 15}, "so_17938743_17939275_1": {"section_id": 7049, "quality": 0.875, "length": 14}}, "n3337": {"so_17938743_17939275_0": {"section_id": 6811, "quality": 0.9375, "length": 15}, "so_17938743_17939275_1": {"section_id": 6794, "quality": 0.875, "length": 14}}, "n4659": {"so_17938743_17939275_0": {"section_id": 8564, "quality": 0.9375, "length": 15}, "so_17938743_17939275_1": {"section_id": 8546, "quality": 0.875, "length": 14}}}, "17939275": {"ParentId": "17938743", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>This example is using some horribly obfuscated code to illustrate a point about the scope of names. From C++11 \u00a73.3.6 [basic.scope.namespace] p1:</p>\n<blockquote>\n<p id=\"so_17938743_17939275_0\">... A namespace member name has namespace scope. Its potential scope includes its namespace from the name\u2019s point of declaration (3.3.2) onwards ...</p>\n</blockquote>\n<p><em>point of declaration</em> is defined in \u00a73.3.2 [basic.scope.pdecl] p1:</p>\n<blockquote>\n<p id=\"so_17938743_17939275_1\">The <em>point of declaration</em> for a name is immediately after its complete declarator (Clause 8) and before its <em>initializer</em> (if any), except as noted below.</p>\n</blockquote>\n<p>So it is possible to use e.g. the name <code>i</code> from an outer scope in the initializer of something named <code>i</code> in an inner scope. The code in question:</p>\n<pre><code>const int i = 1;\nconst int j = 2;\nstruct x\n{\n   int x;\n};\n\nnamespace y\n{\n   int i[i];\n   int j = j;\n   x x;\n   int y::y = x.x;\n}\n</code></pre>\n<p>declares:</p>\n<ul>\n<li><code>y::i</code> as an array of 1 <code>int</code> that will be implicitly zeroed (since all static storage duration objects are zero-initialized if they have no explicit initializer),</li>\n<li><code>y::j</code> as an <code>int</code> with initial value 2,</li>\n<li><code>y::x</code> as struct of type <code>::x</code> that will be implicitly zeroed, and</li>\n<li><code>y::y</code> is an invalid name. If it was simply <code>y</code>, it <em>would be</em> an <code>int</code> with initial value 0, since its initializer <code>y::x.x</code> is implicitly zero-initialized.</li>\n</ul>\n<p><a href=\"http://coliru.stacked-crooked.com/view?id=f703c9fc444d7943516bef5a3e05f9c7-c944ac6b0eed3bfc48b1f78a894f6965\" rel=\"nofollow\">Here's a demo (with <code>y::y</code> changed to <code>y</code>) at Coliru.</a></p>\n<p>NOTE: DO NOT EVER WRITE CODE LIKE THIS. The only time using this feature of names even borders on being acceptable is for member initializers in a class constructor. If you do this anywhere else, I will find you. And I will make you pay.</p>\n", "OwnerUserId": "923854", "LastEditorUserId": "923854", "LastEditDate": "2013-08-01T13:12:06.400", "Id": "17939275", "Score": "1", "CreationDate": "2013-07-30T05:57:32.533", "LastActivityDate": "2013-08-01T13:12:06.400"}});